#include<bits/stdc++.h>
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int MAXN=2e5+5;
struct node
{
	int x,v;
	bool operator < (const node &o)const
	{
		return x<o.x;
	}
}sv[MAXN];
int Hash[MAXN],tot;
int getid(int x)
{
	int pos=lower_bound(Hash+1,Hash+1+tot,x)-Hash;
	return pos;
}
struct seg
{
	#define lson l,mid,rt<<1
	#define rson mid+1,r,rt<<1|1
	ll sum[MAXN<<2];
	inline void push_up(int rt)
	{
		sum[rt]=sum[rt<<1]+sum[rt<<1|1];
	}
	void build(int l,int r,int rt)
	{
		sum[rt]=0;
		if(l==r) return ;
		int mid=(l+r)>>1;
		build(lson);
		build(rson);
	}
	void update(int pos,int v,int l,int r,int rt)
	{
		if(l==r)
		{
			sum[rt]+=v;
			return ;
		}
		int mid=(l+r)>>1;
		if(pos<=mid) update(pos,v,lson);
		if(mid<pos) update(pos,v,rson);
		push_up(rt);
	}
	ll query(int L,int R,int l,int r,int rt)
	{
		if(L<=l&&r<=R)
			return sum[rt];
		int mid=(l+r)>>1;
		ll ret=0;
		if(L<=mid) ret+=query(L,R,lson);
		if(mid<R) ret+=query(L,R,rson);
		return ret;
	}
}se;
struct BIT
{
	int c[MAXN];
	void upd(int pos,int v)
	{
		for(int x=pos;x<MAXN;x+=x&(-x))
			c[x]+=v;
	}
	int qry(int pos)
	{
		int ret=0;
		for(int x=pos;x;x-=x&(-x))
			ret+=c[x];
		return ret;
	}
}bit;
int main()
{
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	int n;
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
		scanf("%d",&sv[i].x);
	for(int i=1;i<=n;i++)
		scanf("%d",&sv[i].v);
	sort(sv+1,sv+1+n);
	tot=0;
	for(int i=1;i<=n;i++)
		Hash[++tot]=sv[i].v;
	sort(Hash+1,Hash+1+tot);
	tot=unique(Hash+1,Hash+1+tot)-Hash-1;
	for(int i=1;i<=n;i++)
		sv[i].v=getid(sv[i].v);
	se.build(1,tot,1);
	for(int i=1;i<=n;i++)
		bit.upd(sv[i].v,1),se.update(sv[i].v,sv[i].x,1,tot,1);
	ll ans=0;
	for(int i=1;i<=n;i++)
	{
		int cnt=(n-i+1)-bit.qry(sv[i].v-1);
		ans+=se.query(sv[i].v,tot,1,tot,1)-1LL*sv[i].x*cnt;
		se.update(sv[i].v,-sv[i].x,1,tot,1);
		bit.upd(sv[i].v,-1);
	}
	cout<<ans<<endl;
	return 0;
}
