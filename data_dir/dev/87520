#include <bits/stdc++.h>
using namespace std;

#define inf 1000000007

int N;
int A[200005], B[200005], maxTree[800005], minTree[800005];

pair<int, int> get_diff(int left, int right, int L, int R, int root)
{
    if(left>right || left>R || right<L)
        return make_pair(-inf, inf);
    
    if(left>=L && right<=R)
        return make_pair(maxTree[root], minTree[root]);
    
    int mid = (left+right)/2;
    
    pair<int, int> x = get_diff(left, mid, L, R, root*2);
    pair<int, int> y = get_diff(mid+1, right, L, R, root*2+1);
    
    return make_pair(max(x.first, y.first), min(x.second, y.second));
}

void build(int left, int right, int root)
{
    if(left>right)
        return;
    
    if(left==right)
    {
        maxTree[root] = A[left];
        minTree[root] = B[right];
        return;
    }
    
    int mid = (left+right)/2;
    
    build(left, mid, root*2);
    build(mid+1, right, root*2+1);
    
    maxTree[root] = max(maxTree[root*2], maxTree[root*2+1]);
    minTree[root] = min(minTree[root*2], minTree[root*2+1]);
}

int solveL(int i, int left, int right)
{
    while(left<=right)
    {
        int mid = (left+right)/2;
        pair<int, int> diff = get_diff(1, N, i, mid, 1);
        
        if(diff.first-diff.second>0)
            right = mid-1;
        else if(diff.first-diff.second<0)
            left = mid+1;
        else 
        {
            if(left==mid)
                return mid;
            
            right = mid;
        }
    }
    
    return -1;
}

int solveR(int i, int left, int right)
{
    while(left<=right)
    {
        int mid = (left+right)/2;
        pair<int, int> diff = get_diff(1, N, i, mid, 1);
        
        if(diff.first-diff.second>0)
            right = mid-1;
        else if(diff.first-diff.second<0)
            left = mid+1;
        else
        {
            if((mid+right)/2==mid)
            {
                pair<int, int> diff = get_diff(1, N, i, right, 1);
            
                if(diff.first-diff.second==0)
                    return right;
            
                return mid;
            }
            
            left = mid;
        }
    }
    
    return -1;
}

int main() {
	
	scanf("%d", &N);
	
	for(int i=1; i<=N; i++)
	    scanf("%d", &A[i]);
	
	for(int j=1; j<=N; j++)
	    scanf("%d", &B[j]);
	
	build(1, N, 1);
	
	long long ans = 0;
	
	for(int i=1; i<=N; i++)
	{
	    int R = solveR(i, i, N);
	    int L = solveL(i, i, R);
	    
	    if(R!=-1)
    	    ans += R - L + 1;
	}
	
	printf("%lld\n", ans);
	
	return 0;
}
