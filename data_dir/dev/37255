/*==============================================*\
ID:          shahidul_brur
 
Name:     Md. Shahidul Islam
Study:      CSE, BRUR
Address:  Rangpur, Bangladesh
 
 mail: shahidul.cse.brur@gmail.com
 FB  : fb.com/shahidul.brur
 Blog: shahidul-brur.blogspot.com(in Bengali),
       shahidul-brur-en.blogspot.com(in English)
\*===============================================*/
#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
//using namespace __gnu_pbds;
using namespace std;
//typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

//#pragma GCC optimize("O3")
//#pragma GCC optimize("unroll-loops")
//#pragma GCC target("avx,avx2,fma")

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef pair<ll, int> li;
typedef pair<int, ll> il;
typedef vector<ii> vii;
typedef vector<il> vil;
typedef vector<li> vli;
 
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define sz size()
#define all(a)  a.begin(), a.end()
#define mem(a, b)     memset(a, b, sizeof(a))
#define f0(i,b) for(int i=0;i<(b);i++)
#define f1(i,b) for(int i=1;i<=(b);i++)
#define f2(i,a,b) for(int i=(a);i<=(b);i++)
#define fr(i,b,a) for(int i=(b);i>=(a);i--)
#define rep(i,a,b,c) for(int i=(a);i!=(b);i+=(c))
 
int dx8[] = {0, 0, 1, 1, 1, -1, -1, -1};
int dy8[] = {1,-1, 1, -1, 0, 0, -1, 1};
int dx4[] = {0, 0, 1, -1};
int dy4[] = {1, -1, 0, 0};

const double pi = acos(-1.0);
const double eps = 1e-6;
const int mod = (int)1e9+7;
const int maxn = (int)2e5+5;
const int logn = 20;
pair<ll, int> p[maxn];
ll typ[maxn], mand[maxn];
ll tim_req[2];
int main()
{
    ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    int tst; cin>>tst;
    while(tst--){
        ll n, t, a, b, easy=0, hard=0;
        cin>>n>>t>>a>>b;
        tim_req[0] = a;
        tim_req[1] = b;
        f0(i,n) 
        {
            cin>>typ[i];
            if(typ[i]==1) hard++;
            else easy++;
        }
        f0(i,n) 
        {
            cin>>mand[i];
            p[i] = mp(mand[i], typ[i]);
        }
        sort(p,p+n);
        ll ans = 0;
        ll solved = 0;
        ll used_tim = 0, i = 0;
        for(i=0;i<n && used_tim<=t;i++)
        {
            ll cur_tim = min(p[i].ff - 1, t);
            if(cur_tim>=0){
                ll rem_tim = cur_tim - used_tim;
                ll can_easy = max(0LL, min(easy, rem_tim/a));
                ll req_easy_tim = a * can_easy;
                
                ll can_hard = max(0LL, min(hard, (rem_tim-req_easy_tim)/b));
                ll req_hard_tim = b * can_hard;
                ans = max(ans, solved + can_easy + can_hard);
            }
            //2
            used_tim+=tim_req[p[i].ss];
            if(p[i].ss==1) hard--;
            else easy--;
//            cur_tim = p[i].first;
//            cur_tim+=tim_req[p[i].ss];
                //cout << cur_tim << "\n";
//            if(cur_tim>t) break;
            if(used_tim>t) break;
            solved++;
            while(i+1<n && used_tim>=p[i+1].ff){
                ++i;
                //cout << i << ": " << cur_tim << " => ";
                used_tim+=tim_req[p[i].ss];
                //cout << cur_tim << "\n";
                if(used_tim>t) break;
                if(p[i].ss==1) hard--;
                else easy--;
                solved++;
            }
            if(used_tim>t) break;
            ans = max(ans, solved);
        }
        if(i>=n && used_tim<=t){
            ll cur_tim = t;
            ll rem_tim = cur_tim - used_tim;
            ll can_easy = max(0LL, min(easy, rem_tim/a));
            ll req_easy_tim = a * can_easy;
            
            ll can_hard = max(0LL, min(hard, (rem_tim-req_easy_tim)/b));
            ll req_hard_tim = b * can_hard;
            ans = max(ans, solved + can_easy + can_hard);
        }
        cout << ans << "\n";
    }
    return 0;
}
