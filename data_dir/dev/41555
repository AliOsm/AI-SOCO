#include <bits/stdc++.h>
#define MOD 1000000007
#define endl "\n"
typedef long long ll;
using namespace std;

const int N = 222222;
int a[N];
int n;

int main() {
    ios_base::sync_with_stdio(false);
    set<pair<int, int> > lens, segs;
    cin >> n;
    int l = 1;
    for(int i = 1; i <= n; i++) {
        cin >> a[i];
        if(a[l] != a[i]) {
            int curl = i - l;
            lens.insert(make_pair(-curl, l));
            segs.insert(make_pair(l, curl));
            l = i;
        }
    }
    int curl = n - l + 1;
    lens.insert(make_pair(-curl, l));
    segs.insert(make_pair(l, curl));
    int ans = 0;
    while(lens.size()) {
        pair<int, int> p = *(lens.begin());
        lens.erase(p);
        ans++;
        set<pair<int, int> >::iterator left = segs.lower_bound(make_pair(p.second, -p.first));
        if(left != segs.begin()) {
            left--;
            set<pair<int, int> >::iterator right = segs.upper_bound(make_pair(p.second, -p.first));
            if(right != segs.end() && left->first < p.second) {
                int x = a[left->first], y = a[right->first];
                if(x == y) {
                    segs.erase(*left);
                    segs.erase(*right);
                    lens.erase(make_pair(-left->second, left->first));
                    lens.erase(make_pair(-right->second, right->first));
                    int l = left->second + right->second;
                    int ind = left->first;
                    lens.insert(make_pair(-l, ind));
                    segs.insert(make_pair(ind, l));
                }
            }
        }
        segs.erase(make_pair(p.second, -p.first));
    }
    cout << ans << endl;
    return 0;
}
