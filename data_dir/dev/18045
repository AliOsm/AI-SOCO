#include <iostream>
#include <iomanip>
#include <algorithm>
using namespace std;

int N;
long long T;
long long p[150000],t[150000];
int cid[150000];
int pid[150000];
double low[150000],high[150000];

bool cmp(int a,int b)
{
	return p[a]*t[b] > p[b]*t[a];
}

bool pcmp(int a,int b)
{
	return p[a]<p[b];
}

bool pos(double c)
{
	int start = 0;
	long long sumt = 0;
	for(int i=0;i<N;i++)
	{
		if(i<N-1 && (!cmp(cid[i],cid[i+1])) && (!cmp(cid[i+1],cid[i])))
			continue;
		long long lowt = sumt;
		for(int j=start;j<=i;j++)
			sumt += t[cid[j]];
		for(int j=start;j<=i;j++)
		{
			low[cid[j]] = p[cid[j]]*(1 - c*(((double)(sumt))/T));
			high[cid[j]] = p[cid[j]]*(1 - c*(((double)(lowt+t[cid[j]]))/T));
			//cout << cid[j] << ": " << lowt << ": " << low[cid[j]] << ' ' << high[cid[j]] << '\n';
		}
		start = i+1;
	}
	double mx = 0.0;
	int j = 0;
	for(int i=0;i<N;i++)
	{
		while(j<N && p[pid[j]] < p[pid[i]])
			mx = max(mx,high[pid[j++]]);
		if(mx > low[pid[i]])
			return 0;
	}
	return 1;
}

double binSearch(double low,double high,int iter)
{
	if(iter==60) return low;
	double mid = (low+high)/2;
	if(pos(mid)) return binSearch(mid,high,iter+1);
	else return binSearch(low,mid,iter+1);
}

int main()
{
	cin >> N;
	for(int i=0;i<N;i++)
		cin >> p[i];
	for(int i=0;i<N;i++)
	{
		cin >> t[i];
		T += t[i];
	}
	for(int i=0;i<N;i++)
		cid[i] = pid[i] = i;
	sort(cid,cid+N,cmp);
	sort(pid,pid+N,pcmp);
	cout << fixed << setprecision(20) << binSearch(0,1,0) << '\n';
}