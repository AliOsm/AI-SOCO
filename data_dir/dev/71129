#include <bits/stdc++.h>
using namespace std;

long long capacity[33], cost[33];
vector< pair<long long, long long> > X;

long long solve(int i, long long rem)
{
    if(rem <= 0)
        return 0;
    
    if(i == X.size())
        return (long long)1e18;
    
    int costx = X[i].first;
    int capacityx = X[i].second;
    int f = (rem%capacityx > 0);
    
    long long ans = (rem/capacityx + f) * costx;
    
    if(f)
        ans = min(ans, rem/capacityx * costx + solve(i+1, rem%capacityx));
    
    return ans;
}

bool cmp(pair<long long, long long> a, pair<long long, long long> b)
{
    return (a.first * b.second < a.second * b.first);
}

int main() {
    
    int N, L;
    cin >> N >> L;
    
    for(int i=1; i<=N; i++)
    {
        cin >> cost[i];
        capacity[i] = (1<<(i-1));
        X.push_back(make_pair(cost[i], capacity[i]));
    }
    
    long long ans = (long long)1e18 * 4;
    sort(X.begin(), X.end(), cmp);
    
    cout << solve(0, L) << endl;
	return 0;
}