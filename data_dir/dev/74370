#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>

const int MaxN = 102;

char buf [MaxN];
int b [MaxN];
int m, t;

bool is_free (int pos, int len)
{
 if (pos + len > m) return false;
 int i;
 for (i = 0; i < len; i++)
  if (b[i + pos])
   return false;
 return true;
}

int main (void)
{
 int cur, i, j, n, r;
 while (scanf (" %d %d", &t, &m) != EOF)
 {
  memset (b, 0, sizeof (b));
  cur = 0;
  for (r = 0; r < t; r++)
  {
   scanf (" %s", buf);
   if (!strcmp (buf, "alloc"))
   {
    scanf (" %d", &n);
    for (i = 0; i < m; i++)
     if (is_free (i, n))
      break;
    if (i == m)
     printf ("NULL\n");
    else
    {
     cur++;
     for (j = 0; j < n; j++)
      b[j + i] = cur;
     printf ("%d\n", cur);
    }
   }
   else if (!strcmp (buf, "erase"))
   {
    scanf (" %d", &n);
    for (i = 0; i < m; i++)
     if (b[i] == n)
      break;
    if (n == 0 || i == m)
     printf ("ILLEGAL_ERASE_ARGUMENT\n");
    else
     for ( ; i < m; i++)
      if (b[i] == n)
       b[i] = 0;
   }
   else if (!strcmp (buf, "defragment"))
   {
    for (i = j = 0; i < m; i++)
     if (b[i])
     {
      b[j] = b[i];
      if (i > j) b[i] = 0;
      j++;
     }
   }
   else assert (false);
  }
 }
 return 0;
}
