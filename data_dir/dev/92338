// In The Name Of God
// Road To Gray and beyond !

#include<bits/stdc++.h>
#define IOS ios::sync_with_stdio(false),cin.tie(0)
#define rep(i,n) for(int i=0;i<(n);i++)
#define rpp(i,st,en) for(int i=(st);i<=(en);i++)
#define prr(i,st,en) for(int i=(en);i>=(st);i--)
#define fe(i,v) for(auto &i:(v)) 
#define suniq(v) (sort(v.begin(),v.end()), v.resize(distance(v.begin(),unique(v.begin(),v.end()))))
#define ms0(v) memset((v),0,sizeof(v))
#define ms1(v) memset((v),-1,sizeof(v))
#define ms22(v) memset((v),63,sizeof(v))
#define all(v) (v).begin(),(v).end()
#define sz(v) int((v).size())
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define pii pair<int,int> 
#define vi vector<int>
#define ll long long

using namespace std;
const int N = 1e6+22 , L=22 ;

int n,k;
int dp[N][L]  , hg[N] , cl[N] , val[N] ;
vi G[N] ;

int fpar(int v,int h)
{
	prr(i,0,L-1)
	{
		if(h&(1<<i)) 
		{
			v=dp[v][i] ;
			h-=(1<<i) ;
		}
	}
	return v;
}

void dfs(int v,int h=0,int par=0)
{
	dp[v][0]=par;
	rpp(i,1,L-1) dp[v][i]=dp[dp[v][i-1]][i-1];
	hg[v]=h;
	if(sz(G[v])==1 && v) cl[v]=0 , val[v]=1;
	else
	{
		fe(u,G[v]) 
		{
			if(u-par)
			{
				dfs(u,h+1,v);
				cl[v]=min(cl[v],cl[u]+1) ;
			}
		}
	}
}

void dfs2(int v,int par=0)
{
	fe(u,G[v]) if(u-par) dfs2(u,v);
	if(cl[v]<k)
	{
		int u=fpar(v,k-cl[v]);
		if(hg[v]>hg[u]) val[u]+=val[v] , val[v]=0 ;
	}
}

void dfs3(int v,int par=0)
{
	fe(u,G[v]) if(u-par) dfs3(u,v) ;
	int mx=0;
	fe(u,G[v])
	{
		if(u-par)
		{
			mx=max(mx,val[u]) ;
		}
	}
	val[v]+=mx;
}

int main()
{IOS;
	int x,y;
	ms22(cl) ;
	
	cin>>n>>k;
	rep(i,n-1)
	{
		cin>>x , x-- ;
		y=i+1;
		G[x].pb(y) ;
		G[y].pb(x) ;
	}
	dfs(0) ;
	dfs2(0) ;
	dfs3(0) ;
	cout<<val[0]; 
	
	return 0;
}
