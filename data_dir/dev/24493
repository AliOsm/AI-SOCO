#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define Fit(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define inf 1000000005
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))
#define mod 1000000007
#define sz(a) ((int)(a).size())

template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcountll(s);}
#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)

typedef unsigned long long ull;
typedef long long ll;
typedef double ld;
#define eps 1e-9
typedef pair<int, int> II;
template<class T> T gcd(T a, T b){ T r; while (b != 0) { r = a % b; a = b; b = r; } return a;}
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
#define PI 2 * acos(0)

#define maxn 200005

struct triple{
    int x, y, z, id;
    triple(){};
    triple(int _x, int _y, int _z,int _id){
        x = _x; y = _y; z = _z;
        id = _id;
    }

    bool operator <(const triple &T) const{
        return x < T.x;
    }
}T[maxn];

triple A[maxn];
int n, m, res[maxn], d[maxn];

int main()
{
//    freopen("jingles.in", "r", stdin);
//    freopen("jingles.out", "w", stdout);
//    freopen("in.txt", "r", stdin);
//   freopen("out.txt", "w", stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int x, y, z;
    cin >> n;
    For(i, 1, n) {
        cin >> x >> y;
        A[i] = triple(x, y, 0, i);
    }

    cin >> m;
    For(i, 1, m){
        cin >> x >> y >> z;
        T[i] = triple(x, y, z, i);
        d[i] = z;
    }

    sort(A + 1, A + n + 1);
    sort(T + 1, T + m + 1);

    int run = 0;
    set<II> S;
    set<II>::iterator it;
    bool ok = true;
    For(i, 1, n){
        while(T[run + 1].x <= A[i].x && run < m){
            S.insert(mp(T[run + 1].y, T[run + 1].id));
            run++;
        }
        if(S.empty()){
            ok = false;
            break;
        }

        it = S.lower_bound(mp(A[i].y, -1));
        if(it != S.end()){
            II P = *it;
            S.erase(it);
            res[A[i].id] = P.se;
            d[P.se]--;
            if(d[P.se]) S.insert(P);
        } else{
            ok = false;
            break;
        }
    }

    if(!ok){
        cout << "NO" << endl;
    } else{
        cout << "YES\n";
        For(i, 1, n) cout << res[i] << " ";
    }

    return 0;
}
