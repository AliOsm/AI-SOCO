#include "bits/stdc++.h"
//#include "ext/pb_ds/assoc_container.hpp"
//#include "ext/pb_ds/tree_policy.hpp"
//using namespace __gnu_pbds;
using namespace std;
typedef long long ll;
#define int long long
#define pb push_back
#define fi first
#define se second
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define sz(x) (int)x.size()
//const int mod = 1e9 + 7;
//const int mod1 = 998244353;
typedef long double f80;

#ifndef LOCAL
#pragma GCC optimize ("O2")
#define endl '\n'
#endif

//template<typename T>
//using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
//
//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//int rand(int l, int r){
//    uniform_int_distribution<int> uid(l, r);
//    return uid(rng);
//}

ll pwr(ll a,ll b, ll mod){
    a %= mod;
    int ans = 1;
    while(b){
        if(b & 1) ans = (ans * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ans;
}

string to_string(string s) {
    return '"' + s + '"';
}

string to_string(const char* s) {
    return to_string((string) s);
}

string to_string(bool b) {
    return (b ? "true" : "false");
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

const int N = 1005;
char grid[N][N];
int val[N][N], val_up[N][N], val_down[N][N];
int next_col[N][N];

void solve(){
    int n, m;
    cin >> n >> m;
    fr(i, 1, n) {
        fr(j, 1, m) {
            cin >> grid[i][j];
        }
    }
    fr(i, 1, n) {
        int pt = 1;
        fr(j, 1, m) {
            if(pt < j) pt = j;
            while(pt + 1 <= m && grid[i][pt] == grid[i][pt + 1]) {
                pt++;
            }
            val[i][j] = pt - j + 1;
        }
    }
    fr(j, 1, m) {
        int pt = 0;
        vector<pii> temp;
        fr(i, 1, n) {
            while(!temp.empty() && temp.back().se < i) temp.pop_back();
            if(pt < i) {
                assert(temp.empty());
                pt = i;
                temp.push_back({val[i][j], i});
                while(pt + 1 <= n && grid[pt][j] == grid[pt + 1][j]) {
                    pt++;
                    temp.push_back({val[pt][j], pt});
                }
                sort(all(temp));
                reverse(all(temp));
            }
            next_col[i][j] = pt;
            assert(!temp.empty());
            val_down[i][j] = temp.back().fi;
        }
    }
    fr(j, 1, m) {
        int pt = n + 1;
        vector<pii> temp;
        for(int i = n; i >= 1; i--) {
            while(!temp.empty() && temp.back().se > i) temp.pop_back();
            if(pt > i) {
                assert(temp.empty());
                pt = i;
                temp.push_back({val[i][j], i});
                while(pt > 0 && grid[pt][j] == grid[pt - 1][j]) {
                    pt--;
                    temp.push_back({val[pt][j], pt});
                }
                sort(all(temp));
                reverse(all(temp));
            }
            assert(!temp.empty());
            val_up[i][j] = temp.back().fi;
        }
    }
    int ans = 0;
    fr(j, 1, m) {
        fr(i, 1, n) {
            int pt1 = next_col[i][j];
            if(pt1 == n) continue;
            int pt2 = next_col[pt1 + 1][j];
            if(pt2 == n) continue;
            if(pt1 - i + 1 == pt2 - pt1 && next_col[pt2 + 1][j] - pt2 >= pt2 - pt1) {
                ans += min(val_down[i][j], min(val_down[pt1 + 1][j], val_up[2 * pt2 - pt1][j]));
            }
        }
    }
    cout << ans << endl;
}
signed main(){
    IO;
#ifdef LOCAL
    freopen("inp.txt","r", stdin);
#endif
    cout << setprecision(10) << fixed;
//    srand(time(NULL));
    int t = 1;
    // cin >> t;
    fr(tt, 1, t){
        solve();
    }
    return 0;
}
