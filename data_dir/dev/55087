#include <bits/stdc++.h>
using namespace std;
mt19937 rng(std::chrono::system_clock::now().time_since_epoch().count());
const int N = 4e5;
int n,mx,is[20];
long long inv[20][20],ans = 1e18;
unordered_map<int,long long>dp;
vector<int>v[20];
long long find1(int at,int msk){
	long long cost = 0;
	for(int i = 0;i < mx;i++)
		if(msk&(1<<i))
			cost+=inv[i][at];
	return cost;
}
long long solve(int msk){
	if(!msk)return 0;
	if(dp.find(msk) != dp.end())return dp[msk];
	long long &ref = dp[msk];
	ref = 1e18;
	for(int i = 0;i < mx;i++)
		if(msk&(1<<i))
			ref = min(ref,solve(msk^(1<<i)) + find1(i,msk^(1<<i)));
	return ref;
}
void fill1(vector<int>&a,int msk){
	for(int i = 0;i < mx;i++)
		if(msk&(1<<i))
			a.push_back(i);
}
int main(){
// 	freopen("input.txt","r",stdin);
	scanf("%d",&n);
	memset(is,-1,sizeof is);
	for(int i = 0,a;i < n;i++){
		scanf("%d",&a);
		a--;
		if(is[a] != -1)a = is[a];
		else a = is[a] = mx++;
		v[a].push_back(i);
	}
	for(int i = 0;i < 20;i++)
		for(int j = 0;j < 20;j++)
			if(i != j)
				for(int l = 0,r = 0;l < v[i].size();l++){
					while(r < v[j].size() && v[j][r] < v[i][l])r++;
					inv[i][j]+=r;
				}
	for(int i = 0;i < (1<<mx);i++)
		if(__builtin_popcount(i) == mx/2 + 1)
			solve(i);
	for(int i = 0;i < (1<<mx);i++)
		if(__builtin_popcount(i) == mx/2 + 1){
			int comp = (1<<mx) - 1 - i;
			vector<int>a,b;
			fill1(a,i);
			fill1(b,comp);
			long long temp = dp[i] + dp[comp];
			for(auto lol : a)
				for(auto lel : b)
					temp+=inv[lol][lel];
			ans = min(ans,temp);
		}
	printf("%lld\n",ans);
}