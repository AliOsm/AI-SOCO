#include<bits/stdc++.h>
using namespace std;
#define ll long long

template<class T> ostream& operator<<(ostream &os,vector<T> V){
	os<<"[ ";for(auto v:V)os<<v<<" ";return os<<" ]";
}
template<class L,class R> ostream& operator<<(ostream &os,pair<L,R> P){
	return os<<"("<<P.first<<","<<P.second<<")";
}

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
template<typename Arg1>
void __f(const char* name,Arg1&& arg1){
	cout<<name<<" : "<<arg1<<endl;
}
template<typename Arg1,typename... Args>
void __f(const char* names,Arg1&& arg1,Args&&... args){
	const char* comma=strchr(names+1,',');cout.write(names,comma-names)<<" : "<<arg1<<" | ";__f(comma+1,args...);
}
#else
#define trace(...) 1
#endif

#define ld long double
#define pll pair<ll,ll>
#define vi vector<int>
#define vll vector<ll>
#define vpll vector<pll>
#define vvi vector<vi>
#define vvll vector<vll>
#define I insert
#define F first
#define S second
#define all(x) x.begin(),x.end()
#define endl "\n"
#define pb push_back

/*maintains upper convex hull of lines ax+b and gives minimum value at a given x
to add line ax+b: sameoldcht.addline(a,b), to get min value at x: sameoldcht.getbest(x)
to get maximum value at x add -ax-b as lines instead of ax+b and use -sameoldcht.getbest(x)*/
const int N = 1e5 + 5;
struct line{
	ll a , b;double xleft;bool type;
	line(ll _a , ll _b){a = _a;b = _b;type = 0;}
	bool operator < (const line &other) const{
		if(other.type){return xleft < other.xleft;}
		return a > other.a;}
};
double meet(line x , line y){
	return 1.0 * (y.b - x.b) / (x.a - y.a);}
struct cht{
	set <line> hull;
	cht() {hull.clear();}
	typedef set < line > :: iterator ite;
	bool hasleft(ite node){
		return node != hull.begin();}
	bool hasright(ite node){
		return node != prev(hull.end());}
	void updateborder(ite node){
		if(hasright(node)){line temp = *next(node);
			hull.erase(temp);
			temp.xleft=meet(*node,temp);
			hull.insert(temp);}
		if(hasleft(node)){line temp = *node;
			temp.xleft = meet(*prev(node) , temp);
			hull.erase(node);hull.insert(temp);}
		else{
			line temp = *node;hull.erase(node);
			temp.xleft = -1e18;hull.insert(temp);}
	}
	bool useless(line left,line middle,line right){
		double x = meet(left,right);
		double y = x * middle.a + middle.b;
		double ly = left.a * x + left.b;
		return y > ly;}
	bool useless(ite node){
		if(hasleft(node) && hasright(node)){return
			useless(*prev(node),*node,*next(node));}
		return 0;}
	void addline(ll a , ll b){
		line temp = line(a , b);
		auto it = hull.lower_bound(temp);
		if(it != hull.end() && it -> a == a){
			if(it -> b > b){hull.erase(it);}
			else return;}
		hull.insert(temp);it = hull.find(temp);
		if(useless(it)){hull.erase(it);return;}
		while(hasleft(it) && useless(prev(it))){
			hull.erase(prev(it));}
		while(hasright(it) && useless(next(it))){
			hull.erase(next(it));}
		updateborder(it);}
	ll getbest(ll x){
		if(hull.empty())return 1e18;
		line query(0 , 0);
		query.xleft = x;query.type = 1;
		auto it = hull.lower_bound(query);
		it = prev(it);
		return it -> a * x + it -> b;}
};
vi adj[N],vis(N),a(N),b(N),ssize(N),idx(N);
ll ans[N];
cht ch[N];
void dfs(int i)
{
	vis[i]=1;vi chld;ssize[i]=1;
	int bst=0,id=-1;
	for(auto j:adj[i])
		{
			if(!vis[j]){
				dfs(j),chld.pb(j),ssize[i]+=ssize[j];
				if(ssize[j]>bst)bst=ssize[j],id=j;
			}
		}
	if(chld.empty()){ch[i].addline(b[i],0);idx[i]=i;return;}
	idx[i]=idx[id];
	for(auto x:chld){
		if(x==id)continue;
		for(auto y:ch[idx[x]].hull)
			ch[idx[i]].addline(y.a,y.b);
		ch[idx[x]].hull.clear();
	}
	ans[i]=ch[idx[i]].getbest(a[i]);
	ch[idx[i]].addline(b[i],ans[i]);
}
int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);cout<<setprecision(25);
	int n;cin>>n;
	for(int i=0;i<n;i++)cin>>a[i];
	for(int i=0;i<n;i++)cin>>b[i];
	for(int i=0;i<n-1;i++){int u,v;cin>>u>>v;--u;--v;adj[u].pb(v);adj[v].pb(u);}
	dfs(0);
	for(int i=0;i<n;i++)cout<<ans[i]<<' ';cout<<endl;
}