#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <unordered_map>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include <unordered_set>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
#include<math.h>
#include<fstream>
using namespace std;
#define pi 3.141592653589793
#define ii  pair<int,int>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c\n", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf\n", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s\n", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mod 1000000009
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define inf 10000000000000000
#define ninf -10000000000000000;
#define eps 1e-10
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
#define loop0(i,n) for(int i=0;i<n;++i)
#define loop1(i,n) for(int i=1;i<=n;++i)
ll power(ll base, ll exp) {
base %= mod;
ll result = 1;
while (exp > 0) {
if (exp & 1)
result = (result * base) % mod;
base = (base * base) % mod;
exp >>= 1;
}
return result;
}

/*long long gcd(long long a, long long b)
{
if (b == 0)return a; return gcd(b, a%b);
}
long long lcm(long long a, long long b) {
return  a * b / gcd(a, b);
}
*/
struct el {
	int minn, minidx, secmin, secidx;
	el() {};
	el(int m,int mi,int sm,int si):minn(m),minidx(mi),secmin(sm),secidx(si){}
};
const int N = 1e5 + 5;
el co[N];
el da[N];
pair<pair<int, int>, char>arr[N];
int main()
{
	int n,c,d;
	sci(n); sci(c); sci(d);
	for (int i = 0; i < N; ++i) {
		co[i].minn = -1e9; co[i].secmin = -1e9;
		co[i].secidx = -1; co[i].minidx = -1;
		da[i].minn = -1e9;  da[i].secmin = -1e9;
		da[i].secidx = -1; da[i].minidx = -1;
	}
	for (int i = 0; i < n; ++i) {
		sci(arr[i].first.first), sci(arr[i].first.second), cin >> arr[i].second;
		if (arr[i].second == 'C') {
			if (arr[i].first.first > co[arr[i].first.second].minn) {
				co[arr[i].first.second].secmin = co[arr[i].first.second].minn;
				co[arr[i].first.second].secidx = co[arr[i].first.second].minidx;
				co[arr[i].first.second].minn = arr[i].first.first;
				co[arr[i].first.second].minidx = i;
				
			}
			else if (arr[i].first.first > co[arr[i].first.second].secmin) {
				co[arr[i].first.second].secmin = arr[i].first.first;
				co[arr[i].first.second].secidx = i;
			}
		}
		else if (arr[i].second == 'D') {
			if (arr[i].first.first > da[arr[i].first.second].minn) {
				da[arr[i].first.second].secmin = da[arr[i].first.second].minn;
				da[arr[i].first.second].secidx = da[arr[i].first.second].minidx;
				da[arr[i].first.second].minn = arr[i].first.first;
				da[arr[i].first.second].minidx = i;

			}
			else if (arr[i].first.first > da[arr[i].first.second].secmin) {
				da[arr[i].first.second].secmin = arr[i].first.first;
				da[arr[i].first.second].secidx = i;
			}
		}
	}
	for (int i = 1; i < N; ++i) {
		if (co[i - 1].minn > co[i].minn) {
			co[i].minn = co[i - 1].minn;
			co[i].minidx = co[i - 1].minidx;
		}
		if (co[i - 1].secmin > co[i].secmin) {
			co[i].secmin = co[i - 1].secmin;
			co[i].secidx = co[i - 1].secidx;
		}
		if (da[i - 1].minn > da[i].minn) {
			da[i].minn = da[i - 1].minn;
			da[i].minidx = da[i - 1].minidx;
		}
		if (da[i - 1].secmin > da[i].secmin) {
			da[i].secmin = da[i - 1].secmin;
			da[i].secidx = da[i - 1].secidx;
		}
	}

	int ans = 0;
	int tempc=c, tempd=d;
	for (int i = 0; i < n; ++i) {
		
		if (arr[i].second == 'C') {
			if (arr[i].first.second > tempc)continue;
			tempc = max(0, tempc - arr[i].first.second);
		}
		else {
			if (arr[i].first.second > tempd)continue;
			tempd = max(0, tempd - arr[i].first.second); }
		int temp1=-1; int temp2=-1;
		if (co[tempc].minidx != i) {
			temp1 = co[tempc].minn;
		}
		else if (co[tempc].secidx != i)temp1 = co[tempc].secmin;
		if (da[tempd].minidx != i) {
			temp2 = da[tempd].minn;
		}
		else if (da[tempd].secidx != i)temp2 = da[tempd].secmin;
		int temp = max(temp2, temp1);
		ans = max(ans, temp + arr[i].first.first);
		tempc = c; tempd = d;
	}
	
	pr(ans);
}



