#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>
#include <random>

using namespace std;

#define int long long

const int INF = 1e18 + 239;

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	int n, k;
	cin >> n >> k;
	vector<int> a(n);
	for (auto &t : a) {
		cin >> t;
	}
	sort(a.begin(), a.end());
	map<int, int> kk;
	for (auto t : a) kk[t]++;
	int ans = INF;	
	vector<int> ps(n + 1);
	for (int i = 0; i < n; i++) {
		ps[i + 1] = ps[i] + a[i];
	}
	auto sum_min = [&](int x, int bn) {
		int c = 0;
		int cnt_less = lower_bound(a.begin(), a.end(), x) - a.begin();
		c = ps[cnt_less] + (n - cnt_less) * x;
		c -= min(x, a[bn]);
		return c;
	};
	auto sum_max = [&](int x, int bn) {
		int c = 0;
		int cnt_gr = a.end() - upper_bound(a.begin(), a.end(), x);
		c = (n - cnt_gr) * x + (ps[n] - ps[n - cnt_gr]);
		c -= max(x, a[bn]);
		return c;
	};
 	for (int i = 0; i < n; i++) {
 		int lf = k - kk[a[i]];
 		if (lf <= 0) {
 			cout << 0 << endl;
 			exit(0);
 		}
		{
			int cg = sum_max(a[i] + 1, i) - (n - 1) * (a[i] + 1);
			int cl = (n - 1) * (a[i] - 1) - sum_min(a[i] - 1, i);
			int cnt_gr = a.end() - upper_bound(a.begin(), a.end(), a[i]);
			if (cnt_gr >= lf) {
				ans = min(ans, cg + lf);
			} else {
				ans = min(ans, cg + cl + lf);
			}
		}
		{
			int cg = sum_max(a[i] + 1, i) - (n - 1) * (a[i] + 1);
			int cl = (n - 1) * (a[i] - 1) - sum_min(a[i] - 1, i);
			int cnt_ls = lower_bound(a.begin(), a.end(), a[i]) - a.begin();
			if (cnt_ls >= lf) {
				ans = min(ans, cl + lf);
			} else {
				ans = min(ans, cg + cl + lf);
			}
		}
	}
	cout << ans << endl;
}
