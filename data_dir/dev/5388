#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <assert.h>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>

using namespace std;

const int N = 100001;

map < int, int > mp[N];
int num[N];
int color[N];
long long sum[N];
int mx[N];
vector < int > G[N];
int n, m;
long long ans[N];

void dfs(int v, int parent)
{
    bool leaf = true;
    for (int i = 0; i < G[v].size(); ++i)
    {
        int to = G[v][i];
        if (to != parent)
        {
            dfs(to, v);
            leaf = false;
        }
    }
    if (leaf == true)
    {
        mp[m][color[v]] = 1;
        num[v] = m;
        sum[m] = color[v];
        mx[m++] = 1;
        ans[v] = color[v];
        return;
    }
    int u = -1;
    for (int i = 0; i < G[v].size(); ++i)
    {
        int to = G[v][i];
        if (to != parent && (u == -1 || mp[num[to]].size() > mp[num[u]].size()))
            u = to;
    }
    num[v] = num[u];
    //cout << v << " " << sum[num[v]] << " " << mx[num[v]] << endl;
    for (int i = 0; i < G[v].size(); ++i)
    {
        int to = G[v][i];
        if (to != parent && to != u)
        {
            for (map < int, int > :: iterator it = mp[num[to]].begin(); it != mp[num[to]].end(); ++it)
            {
                /*if (v == 1)
                    cout << (*it).first << " " << (*it).second << endl;*/
                if (mp[num[v]].find((*it).first) == mp[num[v]].end())
                    mp[num[v]][(*it).first] = (*it).second;
                else
                    mp[num[v]][(*it).first] += (*it).second;
                long long cnt = mp[num[v]][(*it).first];
                if (cnt > mx[num[v]])
                {
                    mx[num[v]] = cnt;
                    sum[num[v]] = (*it).first;
                }
                else if (cnt == mx[num[v]])
                    sum[num[v]] += (*it).first;
                /*if (v == 1)
                    cout << mx[num[v]] << endl;*/
            }
        }
    }
    if (mp[num[v]].find(color[v]) == mp[num[v]].end())
        mp[num[v]][color[v]] = 1;
    else
        mp[num[v]][color[v]] += 1;
    long long cnt = mp[num[v]][color[v]];
    //cout << v << " " << cnt << " " << sum[num[v]] << " " << mx[num[v]] << " ";
    if (cnt > mx[num[v]])
    {
        mx[num[v]] = cnt;
        sum[num[v]] = color[v];
    }
    else if (cnt == mx[num[v]])
        sum[num[v]] += color[v];
    //cout << sum[num[v]] << endl;
    ans[v] = sum[num[v]];
}


int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    scanf("%d", &n);
    for (int i = 0; i < n; ++i)
        scanf("%d", &color[i]);
    for (int i = 0; i < n - 1; ++i)
    {
        int u, v;
        scanf("%d%d", &u, &v); u--; v--;
        G[u].push_back(v);
        G[v].push_back(u);
    }
    dfs(0, -1);
    for (int i = 0; i < n; ++i)
        printf("%I64d ", ans[i]);
    return 0;
}