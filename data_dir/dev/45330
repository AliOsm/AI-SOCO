#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000005;
const ll INFLL = 2000000000000000000ll;
const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

int N, A[150005], B[150005];
set<int> S;
set<pii> S2;

int bad(int l, int r)
{
    if(r<l) return 0;
    return B[r] - B[l-1];
}

bool nice(int a, int b)
{
    if(a > b) swap(a,b);

    f(i,max(a,2),min(a+1,N))
    {
        if(i%2 == 0 && A[i] <= A[i-1]) return false;
        if(i%2 == 1 && A[i] >= A[i-1]) return false;
    }

    f(i,max(b,2),min(b+1,N))
    {
        if(i%2 == 0 && A[i] <= A[i-1]) return false;
        if(i%2 == 1 && A[i] >= A[i-1]) return false;
    }

    if(bad(1,a-1) + bad(b+2,N) + bad(a+2,b-1) == 0) return true;
    else return false;
}

int main()
{
    cin >> N;
    f(i,1,N) scanf("%d", &A[i]);
    f(i,2,N)
    {
        if(i%2 == 0 && A[i] <= A[i-1]) S.insert(i-1), S.insert(i), B[i] = 1;
        if(i%2 == 1 && A[i] >= A[i-1]) S.insert(i-1), S.insert(i), B[i] = 1;
    }

    f(i,1,N) B[i] += B[i-1];

    if(SZ(S) > 10)
    {
        cout << 0;
        return 0;
    }

    for(int a : S) f(b,1,N) if(a != b)
    {
        swap(A[a],A[b]);
        if(nice(a,b)) S2.insert({min(a,b),max(a,b)});
        swap(A[a],A[b]);
    }

    cout << SZ(S2);
}
