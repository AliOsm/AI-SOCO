
// ~/BAU/ACM-ICPC/Teams/Rampage/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <functional>
#include <assert.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const int N = 505, M = 1000005;
const ll MOD = 1e9 + 7;
const double eps = 1e-9;

int n, mod = 998244353;
ll a[N];
bool done[N];
map<ll, int> f;

ll sqrt2(ll x) {
	ll l = 1, r = x, m;
	while (l <= r) {
		m = (l + r) / 2;
		long double tmp = m;
		tmp *= m;
		if (tmp == x)
			return m;
		if (tmp > x) r = m - 1;
		else l = m + 1;
	}
	return -1;
}

ll sqrt3(ll x) {
	ll l = 1, r = x, m;
	while (l <= r) {
		m = (l + r) / 2;
		long double tmp = m;
		tmp *= m;
		tmp *= m;
		if (tmp == x)
			return m;
		if (tmp > x) r = m - 1;
		else l = m + 1;
	}
	return -1;
}

ll sqrt4(ll x) {
	ll l = 1, r = x, m;
	while (l <= r) {
		m = (l + r) / 2;
		long double tmp = m;
		tmp *= m;
		tmp *= m;
		tmp *= m;
		if (tmp == x)
			return m;
		if (tmp > x) r = m - 1;
		else l = m + 1;
	}
	return -1;
}

ll gcd(ll a, ll b) {
	return b == 0 ? a : gcd(b, a%b);
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif	
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%lld", a + i);
		ll x = sqrt4(a[i]);
		if (x != -1) {
			f[x] += 4;
			done[i] = 1;
			continue;
		}
		x = sqrt3(a[i]);
		if (x != -1) {
			f[x] += 3;
			done[i] = 1;
			continue;
		}
		x = sqrt2(a[i]);
		if (x != -1) {
			f[x] += 2;
			done[i] = 1;
		} 
	}
	for(int i=0; i<n; i++)
		for (int j = i + 1; j < n; j++) {
			if (done[i] && done[j] || a[i] == a[j]) continue;
			ll g = gcd(a[i], a[j]);
			if (g == 1) continue;
			if (!done[i]) {
				f[g]++;
				f[a[i] / g]++;
			}
			if (!done[j]) {
				f[g]++;
				f[a[j] / g]++;
			}
			done[i] = 1;
			done[j] = 1;
		}
	int ans = 1;
	for (auto it = f.begin(); it != f.end(); it++) 
		ans = (1ll * ans * (it->second + 1))%mod;
	map<ll, ll> freq;
	for (int i = 0; i < n; i++)
		if (!done[i])
			freq[a[i]]++;
	for (auto it = freq.begin(); it != freq.end(); it++)
		ans = ((1ll * ans * (it->second + 1))%mod * (it->second + 1))%mod;
	printf("%d\n", ans);
	fflush(stdout);
	return 0;
}