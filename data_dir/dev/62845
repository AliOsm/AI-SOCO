#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <cstdio>
#include <math.h>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
using namespace std;

#define mp make_pair
#define int64 long long

#ifdef _DEBUG
    const int N = 1010;
#else
    const int N = 1010;
#endif

const int inf = 1e9;


int n, m, compNumber, step, comp[N][N], marked[N * N], sz[N * N];
char a[N][N];
bool used[N][N];
const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};

bool check(int x, int y)
{
    return (x > 0 && x <= n && y > 0 && y <= m);
}

void dfs(int x, int y)
{
    used[x][y] = true;
    comp[x][y] = compNumber;
    sz[comp[x][y]]++;
    for (int i = 0; i < 4; i++)
    {
        int xnew = x + dx[i];
        int ynew = y + dy[i];
        if (check(xnew, ynew) && !used[xnew][ynew] && a[xnew][ynew] == '.')
        {
            dfs(xnew, ynew);
        }
    }
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    scanf("%d%d\n", &n, &m);
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= m; j++) scanf("%c", &a[i][j]);
        scanf("\n");
    }
    compNumber = 0;
    memset(used, false, sizeof(used));
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= m; j++)
            if (!used[i][j] && a[i][j] == '.')
            {
                compNumber++;
                dfs(i, j);
            }
    step = 0;
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= m; j++)
        {
            if (a[i][j] == '*')
            {
                int res = 0;
                step++;
                for (int k = 0; k < 4; k++)
                {
                    int xnew = i + dx[k];
                    int ynew = j + dy[k];
                    if (check(xnew, ynew) && a[xnew][ynew] == '.' && marked[comp[xnew][ynew]] != step) 
                    {
                        marked[comp[xnew][ynew]] = step;
                        res += sz[comp[xnew][ynew]];
                    }
                }
                res++;
                res %= 10;
                printf("%c", res + '0');
            }
            else printf("%c", '.');
        }
        printf("\n");
    }
    return 0;
}