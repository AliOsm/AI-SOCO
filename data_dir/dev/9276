#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <queue>
#define N 220
using namespace std;

typedef pair<int, pair<int, int> > pipii;

char s[N];
int c[N];
bool v[N][N][N];
queue<pipii> q;

int main(void)
{
    int n;
    int i;
    pipii x;

    scanf("%d", &n);
    scanf("%s", s);

    for(i = 0; i < n; i ++)
        ++ c[s[i]];

    for(q.push(make_pair(c['B'], make_pair(c['G'], c['R']))), v[c['B']][c['G']][c['R']] = true; !q.empty(); )
    {
        x = q.front();
        q.pop();

        if(x.first && x.second.first && !v[x.first - 1][x.second.first - 1][x.second.second + 1])
        {
            q.push(make_pair(x.first - 1, make_pair(x.second.first - 1, x.second.second + 1)));
            v[x.first - 1][x.second.first - 1][x.second.second + 1] = true;
        }
        if(x.first && x.second.second && !v[x.first - 1][x.second.first + 1][x.second.second - 1])
        {
            q.push(make_pair(x.first - 1, make_pair(x.second.first + 1, x.second.second - 1)));
            v[x.first - 1][x.second.first + 1][x.second.second - 1] = true;
        }
        if(x.second.first && x.second.second && !v[x.first + 1][x.second.first - 1][x.second.second - 1])
        {
            q.push(make_pair(x.first + 1, make_pair(x.second.first - 1, x.second.second - 1)));
            v[x.first + 1][x.second.first - 1][x.second.second - 1] = true;
        }

        if(x.first > 1 && !v[x.first - 1][x.second.first][x.second.second])
        {
            q.push(make_pair(x.first - 1, make_pair(x.second.first, x.second.second)));
            v[x.first - 1][x.second.first][x.second.second] = true;
        }
        if(x.second.first > 1 && !v[x.first][x.second.first - 1][x.second.second])
        {
            q.push(make_pair(x.first, make_pair(x.second.first - 1, x.second.second)));
            v[x.first][x.second.first - 1][x.second.second] = true;
        }
        if(x.second.second > 1 && !v[x.first][x.second.first][x.second.second - 1])
        {
            q.push(make_pair(x.first, make_pair(x.second.first, x.second.second - 1)));
            v[x.first][x.second.first][x.second.second - 1] = true;
        }
    }

    if(v[1][0][0])
        putchar('B');
    if(v[0][1][0])
        putchar('G');
    if(v[0][0][1])
        putchar('R');

    return 0;
}