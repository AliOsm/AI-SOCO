#include "iostream"
#include "algorithm"
#include "vector"
#include "set"
#include "map"
#include "cstring"
#include "string"
#include "vector"
#include "cassert"
#include "queue"
#include "cstdio"
#include "cstdlib"
#include "ctime"
#include "cmath"
#include "bitset"
#include "numeric"
#include "iomanip"

using namespace std;

typedef long long ll;
typedef pair < int, int > ii;

const int N = 1 << 18;

int n;
int a[N], b[N], ta[N << 1], tb[N << 1];

inline int geta(int l, int r) {
    int res = -1e9;
    for(l += N, r += N; l <= r; l = (l + 1) >> 1, r = (r - 1) >> 1) {
        if(l & 1) res = max(res, ta[l]);
        if(~r & 1) res = max(res, ta[r]);
    }
    return res;
}

inline int getb(int l, int r) {
    int res = 1e9;
    for(l += N, r += N; l <= r; l = (l + 1) >> 1, r = (r - 1) >> 1) {
        if(l & 1) res = min(res, tb[l]);
        if(~r & 1) res = min(res, tb[r]);
    }
    return res;
}

int main () {
    
    scanf("%d", &n);
    
    for(int i = 1; i <= n; i++) {
        scanf("%d", a + i);
        ta[i + N] = a[i];
    }
    
    for(int i = 1; i <= n; i++) {
        scanf("%d", b + i);
        tb[i + N] = b[i];
    }
    
    for(int i = N - 1; i >= 1; i--)
        ta[i] = max(ta[i + i], ta[i + i + 1]), tb[i] = min(tb[i + i], tb[i + i + 1]);
    
    int l = n, r = n + 1;
    
    ll ans = 0;
    
    for(int i = n; i >= 1; i--) {
        while(r - 1 >= i and geta(i, r - 1) > getb(i, r - 1))
            r--;
        while(l >= i and !(geta(i, l) < getb(i, l)))
            l--;
//        printf("i = %d l = %d r = %d\n", i, l, r);
        ans += max(0, r - l - 1);
    }
    
    printf("%lld\n", ans);
    
    return 0;
    
}