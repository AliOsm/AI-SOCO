    #include "bits/stdc++.h"
    // #include "bits/extc++.h"
    #define all(x) begin(x), end(x)
    #define pb push_back
     
    using namespace std;
    // using namespace __gnu_pbds;
    using ll = long long int;
    const ll MOD = 1e9+7;
     
    int dp[5020][5020][2];
     
    int main()
    {
    	ios::sync_with_stdio(false);
    	cin.tie(0);
    	mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
    	memset(dp, -1, sizeof dp);
    	
    	int n, m, k = 0; cin >> n >> m;
    	int a, b, c; cin >> a >> b >> c;
    	vector<vector<int>> g(n);
    	for (int i = 0; i < m; ++i) {
    		int u, v; cin >> u >> v;
    		g[--u].pb(--v);
    		g[v].pb(u);
    	}
    	vector<int> mark(n), ch, comp(n);
    	vector<array<int, 2>> s;
    	bool good = 1;
    	for (int i = 0; i < n; ++i) {
    		if (mark[i]) continue;
    		vector<int> cur = {i};
    		mark[i] = 1; comp[i] = k;
    		int tot = 1, one = 1;
    		while (!cur.empty()) {
    			auto u = cur.back(); cur.pop_back();
    			for (auto v : g[u]) {
    				if (!mark[v]) {
    					mark[v] = 3 - mark[u];
    					comp[v] = k;
    					cur.push_back(v);
    					++tot;
    					one += mark[v] == 1;
    				}
    				else {
    					if (mark[v] + mark[u] != 3)
    						good = 0;
    				}
    			}
    		}
    		s.pb({one, tot-one});
    		ch.pb(-1);
    		++k;
    	}
    	if (!good) {cout << "NO\n"; return 0;}
    	dp[0][0][0] = dp[0][0][1] = 0;
    	for (int i = 0; i < (int)s.size(); ++i) {
    		int x = s[i][0], y = s[i][1];
    		for (int val = x; val <= n; ++val) {
    			if (dp[i][val-x][0] != -1) {
    				dp[i+1][val][0] = 0;
    			}
    			if (dp[i][val-x][1] != -1) {
    				dp[i+1][val][0] = 1;
    			}
    		}
    		for (int val = y; val <= n; ++val) {
    			if (dp[i][val-y][0] != -1) {
    				dp[i+1][val][1] = 0;
    			}
    			if (dp[i][val-y][1] != -1) {
    				dp[i+1][val][1] = 1;
    			}
    		}
    	}
    	if (dp[s.size()][a+c][0] == -1 and dp[s.size()][a+c][1] == -1) {cout << "NO\n"; return 0;}
    	cout << "YES\n";
    	if (dp[s.size()][a+c][0] != -1) {
    		int pos = s.size(), val = a+c;
    		ch[pos-1] = 0;
    		while (pos > 1) {
    			ch[pos-2] = dp[pos][val][ch[pos-1]];
    			val -= s[pos-1][ch[pos-1]];
    			--pos;
    		}
    		int ones = 0;
    		for (int i = 0; i < n; ++i) {
    			int cm = comp[i];
    			if (ch[cm] == 1) {
    				if (mark[i] == 1) cout << '2';
    				else if (ones < a) cout << '1', ++ones;
    				else cout << '3';
    			}
    			else {
    				if (mark[i] == 2) cout << '2';
    				else if (ones < a) cout << '1', ++ones;
    				else cout << '3';	
    			}
    		}
    	}
    	else {
    		int pos = s.size(), val = a+c;
    		ch[pos-1] = 1;
    		while (pos > 1) {
    			ch[pos-2] = dp[pos][val][ch[pos-1]];
    			val -= s[pos-1][ch[pos-1]];
    			--pos;
    		}
    		int ones = 0;
    		for (int i = 0; i < n; ++i) {
    			int cm = comp[i];
    			if (ch[cm] == 1) {
    				if (mark[i] == 1) cout << '2';
    				else if (ones < a) cout << '1', ++ones;
    				else cout << '3';
    			}
    			else {
    				if (mark[i] == 2) cout << '2';
    				else if (ones < a) cout << '1', ++ones;
    				else cout << '3';	
    			}
    		}
    	}
    }