#include <stdio.h>
#include <algorithm>

#define N  (1<<18)

int q[N], p[N], n, t[N] ;

// q[1] = p[2] - p[1]
// q[2] = p[3] - p[2]
// q[3] = p[4] - p[3]
// ....
// q[n-2] = p[n-1] - p[n-2]
// q[n-1] = p[n] - p[n-1]
// sum(q[i]) = p[n] - p[1]

bool is_palindrom(const int p[], int n)
{
   std::copy(p,p+n,t);
   
   std::sort( t, t + n );
   for(int i= 0; i < n; ++i){
      if (t[i] != i + 1) return false;
   }
   return true;
}
void print_arr( const int p[], int n){
   for(int i = 0; i< n; ++i)printf("%d ", p[i]);
   
}
int main()
{
   scanf("%d",&n);
   for(int i = 0; i < n - 1; ++i)scanf("%d",q+i);
   
   //1. p[0] = n
   p[0] = n;
   for(int i = 1; i< n; ++i){
      // q[i-1] = p[i] - p[i-1]
      // p[i] = q[i-1] + p[i-1]
      p[i] = q[i-1] + p[i-1];
   }
   
   if(is_palindrom(p,n)){
      print_arr(p,n);
      return 0;
   }
   
   //2. p[0] < n
   long long mx = -4 * n ;
   long long s = 0;
   for(int i = 0; i < n-1; ++i){
      s += q[i]; // s = q[0] + q[1] + ... + q[i] =  p[i] - p[0]
      mx = std::max(mx, s);
   }
   
   // mx = n - p[0]    -->   0 < mx < n
   if (! ( mx > 0 && mx < n) ) {
      printf("-1\n");
      return 0;
   }
   
   // p[0] = n - mx
   p[0] = n - mx;
   for(int i = 1; i < n; ++i) p[i] = q[i-1] + p[i-1];
   
   if (is_palindrom(p,n)){
      print_arr(p,n);
      return 0;
   }
   
   printf("-1\n");
}