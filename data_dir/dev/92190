#include <iostream>
#include <cmath>
#include <queue>
#include <vector>
#include <set>
#include <cstring>
#include <map>
#include <cstdio>
#include <algorithm>
using namespace std;
typedef long long Long;

typedef vector<int> VI;
VI next , prev;
int G1[3010] , GSZ[3010];
int G2[3010];
int arr[3010] , p[3010];
int build(int N)
{
    VI vis(N,0);
    int SZ = 0;
    for(int i = 0; i < N; ++i)
    {
        if(vis[i])continue;
        int j = i;
        G1[SZ] = 1000000;
        G2[SZ] = 1000000;
        GSZ[SZ] = 0;
        while(!vis[j])
        {
            GSZ[SZ]++;
            int temp[] = {G1[SZ] , G2[SZ] , j};
            sort(temp,temp+3);
            G1[SZ] = temp[0];
            G2[SZ] = temp[1];
            vis[j] = 1;
            j = next[j];
        }
        SZ++;
    }
    return SZ;
}
int main()
{
    int N;
    cin >> N;
    next = VI(N);
    prev = VI(N);
    for (int i = 0; i < N; ++i) {
        cin >> arr[i];
        arr[i]--;
        p[arr[i]] = i;
    }
    for (int i = 0; i < N; ++i) {
        next[i] = arr[i];
        prev[arr[i]] = i;
    }
    int K; cin >> K;
    int S = build(N);
    cout << abs((N-S) - K) << endl;
    while(N-S > K)
    {
        for(int i = 0; i < N; ++i)
        {
            if(GSZ[i] > 1)
            {
                int t1 = G1[i];
                int t2 = G2[i];
                int mi = min(t1,t2)+1;
                int ma = max(t1,t2)+1;
                cout << mi << " " << ma << " ";
                swap(next[t1],next[t2]);
                break;
            }
        }
        S = build(N);
    }
    while(N-S < K)
    {
        int t1 = G1[0];
        int t2 = G1[1];
        int mi = min(t1,t2)+1;
        int ma = max(t1,t2)+1;
        cout << mi << " " << ma << " ";
        swap(next[t1],next[t2]);
        S = build(N);
    }
    cout << endl;
    
}





// 2 3 4 5 1

// next = { 1 , 2 , 3 , 4 , 0 }
// prev = { 4 , 0 , 1 , 2 , 3 }

// 2 1 4 5 3
// next = { 1 , 0 , 3 , 4 , 2 }
// prev = { 4 , 0 , 1 , 2 , 3 }

