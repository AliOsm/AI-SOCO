#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
#define fi first
#define se second
#define sz(a) ((int)a.size())
#define pb push_back

const int inf_int = 1e9;
const ll inf_ll = 1e18;
const int MAXN = (3e5+100);
const int MOD = 1e9+7;

bool debug = 0;
#define dout if(debug) cout
#define free asfkdg
#define next afhfasfh

int next[MAXN*25][2];
int sum[MAXN*25];
int free = 1;

int MAX_BITS = 20;
void add(int x){
    int v = 0;
    for(int i=MAX_BITS;i>=0;--i){
        int c = (x>>i)&1;
        if(next[v][c]==-1){
            next[v][c] = free++;
        }
        v = next[v][c];
        sum[v]++;
    }
}

int total = 0;
int get(){
    int v = 0;
    int res = 0;
    for(int i=MAX_BITS;i>=0;--i){
        dout <<i<<" : "<<endl;
        int to = 0;
        if(total&(1<<i))
            to = 1;
        dout <<"to " <<to<<" "<<sum[next[v][to]]<<" "<<(1<<i)<<endl;
        if(next[v][to]==-1){
            return res;
        }
        if(sum[next[v][to]]<(1<<(i))){
            v = next[v][to];
        } else{
            v = next[v][1^to];
            dout <<"add "<<(1<<i)<<endl;
            res+=(1<<i);
            if(v==-1)
            {
                return res;
            }
        }
    }
    return res;
}


int a[MAXN];
void solve(){
    memset(next,-1,sizeof next);
    int n,m;
    cin >> n >> m;
    for(int i=0;i<n;++i){
        cin >> a[i];
    }
    sort(a,a+n);
    for(int i=0;i<n;++i){
        if(i==0 || a[i]!=a[i-1]){
            add(a[i]);
        }
    }
    for(int j=1;j<=m;++j){
        int x;
        cin >> x;
        total^=x;
        cout << get()<<endl;
    }

}




int main(){
    #ifdef zxc
        debug = 0;
        freopen("input.txt","r",stdin);
       // freopen("output.txt","w",stdout);
    #endif // zxc

    int t=1;

    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    while(t--)
        solve();
}
