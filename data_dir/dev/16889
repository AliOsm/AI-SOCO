#include<bits/stdc++.h>
using namespace std;
const int N = 15, MAXN = (1 << N) + 10;
long long x;
long long mask[MAXN];
vector<pair<long long, long long> > pr;
void getPr(long long x) {
	for (long long i = 2; i * i <= x; i++) {
		if (x % i == 0)
			pr.push_back({i, 0});
		while (x % i == 0) {
			pr.back().second++;
			x /= i;
		}
	}
	if (x != 1)
		pr.push_back({x, 1});
}
long long power(long long a, long long b) {
	if (!b)
		return 1;
	long long rtr = power(a, b / 2);
	if (b % 2)
		return rtr * rtr * a;
	return rtr * rtr;
}
int main() {
	ios_base::sync_with_stdio (false);
	cin.tie(0);
	cin >> x;
	getPr(x);
	long long n = pr.size();
	long long ans = x;
	for (long long i = 0; i < (1 << n); i++) {
		if (i == 0) {
			mask[i] = 1;
			continue;
		}
		for (long long j = 0; j <= N; j++) {
			if (((i >> j) & 1)) {
				mask[i] = 1ll * mask[i ^ (1 << j)] * power(pr[j].first, pr[j].second);
				break;
			}
		}
		ans = min(ans, max(mask[i], x / mask[i]));
	}
	cout << x / ans << " " << ans;
	return 0;
}
