#include"bits/stdc++.h"
#include<valarray>
#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;


int n;
int m;

#define MAX 5002

vector<int> v[MAX];
vector<int> rv[MAX];

bool use[MAX];

vector<int> od;

inline void dfs(int b){
	use[b]=true;
	for(int go:v[b]){
		if(use[go])continue;
		dfs(go);
	}
	od.push_back(b);
}

vector<vector<int> > vv;
inline void dfs2(int b){
	use[b]=false;
	vv.back().push_back(b);
	for(int go:rv[b]){
		if(use[go]==false)continue;
		dfs2(go);
	}
}

set<int> ss;

int dep[MAX];

int cyc;
int dist[MAX];

queue<int> q;

inline void dfs3(int b){
	for(int el:ss){
		dist[el]=INT_MAX;
	}
	q.push(b);
	dist[b]=0;
	while(!q.empty()){
		int cur=q.front();
		q.pop();
		for(int go:v[cur]){
			if(dist[go]>dist[cur]+1){
				dist[go]=dist[cur]+1;
				q.push(go);
			}
			if(go==b){
				cyc=min(cyc,dist[cur]+1);
			}
		}
	}
	return;
}

int main(){
	cin>>n>>m;
	for(int i=0;i<m;i++){
		int a,b;
		scanf("%d%d",&a,&b);
		a--;
		b--;
		v[a].push_back(b);
		rv[b].push_back(a);
	}
	for(int i=0;i<n;i++){
		if(use[i]==false){
			dfs(i);
		}
	}
	reverse(od.begin(),od.end());
	for(int el:od){
		if(use[el]==false)continue;
		vv.push_back(vector<int>());
		dfs2(el);
	}
	int ans=n;
	for(int i=0;i<vv.size();i++){
		if(vv[i].size()==1)continue;
		ss.clear();
		for(int el:vv[i])ss.insert(el);
		bool ok=true;
		for(int el:vv[i]){
			for(int go:v[el]){
				if(ss.count(go)==0){
					ok=false;
					break;
				}
			}
		}
		if(ok==false){
			continue;
		}
		ans++;
		cyc=114514;
		for(int el:ss){
			dfs3(el);
		}
		ans+=cyc*998;
	}
	cout<<ans<<endl;
	return 0;
}
