#include <bits/stdc++.h>
using namespace std;

#define FASTIO ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define LL long long 
#define ar32(x) array<int, x> 
#define ar64(x) array<LL, x>
// Infinity xP
const int oo = 1e8 + 5;
// const int MOD = 1e9 + 7;
const LL ooll = 1e18;
// const int MOD = 998244353;
const int MOD = 1e9 + 7;
const int N = 1e6 + 5;

vector<int> g[N];
int one[N], two[N], three[N], one_sol[N];
ar32(2) two_sol[N];
ar32(3) three_sol[N];

void dfs(int node, int par) {
    one[node] = 0;
    one_sol[node] = node;
    two[node] = -oo;
    three[node] = -oo;
    for (auto it : g[node]) if (it != par) {
        dfs(it, node);
        int onet = one[node], twot = two[node], threet = three[node];
        int one_solt = one_sol[node];
        ar32(2) two_solt = two_sol[node];
        ar32(3) three_solt = three_sol[node];
        if (one[it] + 1 > onet) {
            onet = one[it] + 1;
            one_solt = one_sol[it];
        }
        if (two[it] + 1 > twot) {
            twot = two[it] + 1;
            two_solt = two_sol[it];
        }
        if (one[it] + one[node] + 1 > twot) {
            twot = one[it] + one[node] + 1;
            two_solt = {one_sol[it], one_sol[node]};
        }
        if ((two[node] + one[it] + 1) > threet) {
            threet = (two[node] + one[it] + 1);
            three_solt = {two_sol[node][0], two_sol[node][1], one_sol[it]};
        }
        if ((one[node] + two[it] + 1) > threet) {
            threet = (one[node] + two[it] + 1);
            three_solt = {one_sol[node], two_sol[it][0], two_sol[it][1]};
        }
        if (three[it] > threet) {
            threet = three[it];
            three_solt = three_sol[it];
        }
        one[node] = onet; one_sol[node] = one_solt;
        two[node] = twot; two_sol[node] = two_solt;
        three[node] = threet; three_sol[node] = three_solt;
    }
    // cout << node << " : ";
    // cout << one[node] << ",{" << one_sol[node] << "} ";
    // cout << two[node] << ",{" << two_sol[node][0] << "," << two_sol[node][1] << "} ";
    // cout << three[node] << ",{" << three_sol[node][0] << "," << three_sol[node][1] << "," << three_sol[node][2] << "}\n";
}

void solve() {
    int n, i;
    cin >> n;
    for (i=0;i<n-1;i++) {
        int u, v; cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1, 0);
    cout << three[1] << '\n';
    cout << three_sol[1][0] << " " << three_sol[1][1] << " " << three_sol[1][2] << '\n';
}   
 
int main() {
    FASTIO;
    int t = 1;
    // cin >> t;
    while(t--) solve();
    return 0;
}