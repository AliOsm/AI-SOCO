#include <bits/stdc++.h>
using namespace std;

using pii = pair<int, int>; using vi = vector<int>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
using ll = long long; using vll = vector<long long>;
constexpr int INF = 0x3f3f3f3f; constexpr ll BINF = 0x3f3f3f3f3f3f3f3fLL;

int solve() {
	ll n; int k; cin >> n >> k;
	vector<ll> a(k); iota(a.begin(), a.end(), 1);
	ll sum = accumulate(a.begin(), a.end(), 0LL);
	if (sum > n) {
		cerr << ":C" << endl;
		cout << "NO" << endl;
		return 0;
	}
	n -= sum;

	// cerr << n << ": " << a;

	ll batchadd = n / k;
	n %= k;
	for (ll &z : a) z += batchadd;

	// cerr << n << ": " << a;

	reverse(a.begin(), a.end());

	for (int i=0;i<n;i++) {
		int pos = 0;
		while (pos + 1 < k && a[pos] + 1 > a[pos + 1] * 2) pos++;
		a[pos]++;

		// cerr << a;
	}

	reverse(a.begin(), a.end());

	bool valid = true;
	for (int j=0;j+1<k;j++) if (a[j] >= a[j + 1] || a[j] * 2 < a[j + 1]) valid = false;
	if (!valid) {
		cerr << ":O" << endl;
		cout << "NO" << endl;
		return 0;
	}
	cout << "YES" << endl;
	cout << a;
	return 0;
}

int main() {
	ios::sync_with_stdio(0);
	// precompute();
	// int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << (solve() ? "YES" : "NO") << endl;
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it << " \n"[++it==v.end()];
	return os;
}