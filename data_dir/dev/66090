#include <iostream>
#include <stack>
#include <set>
#include <vector>
#include <cmath>
#include <algorithm>
#include <queue>
#include <cstdio>
#include <cstring>
#include <string>
#include <map>

#define inf (1 << 30)
#define INF (1<<45LL)
#define pb push_back
#define mp make_pair
using namespace std;

typedef pair<int, int> pi;
typedef long long ll;

/*
 * 
 *      PUCMM PROGRAMMING FORCE
 * 
 * */

int dp[111111], dist[111111], dad[111111];
bool visited[111111];
vector<pi> E[111111];

/*
 *  DFS IS A WASTE OF TIME FOR THIS PROBLEM
 *  BFS GUARANTEES YOU WILL FIND THE BEST DISTANCE
 *  TO ANY GIVEN NODE THE FIRST TIME YOU ENQUEUE IT D:
 * 
void dfs(int n, int distance, int working_edges, int parent){
    

    if(dist[n] == distance){
        if(dp[n] < working_edges){
            dp[n] = working_edges;
            dad[n] = parent;
        }else
            return;
        
    }else{
        dp[n] = working_edges;
        dad[n] = parent;
    }
    
    dist[n] = distance;

    for(int i=0; i < E[n].size(); i++){
        int v = E[n][i].first;
        int type = E[n][i].second;
        
        if(dist[v] == -1)
            dfs(v, distance+1, dp[n] + type, n);
        else{
            

            if(dist[v] < dist[n] + 1) continue;
            if(dist[v] == dist[n] + 1 && dp[n] + type > dp[v])
                dfs(v, distance + 1, dp[n] + type, n);
            
            
            if(dist[v] > dist[n] + 1)
                dfs(v, distance + 1, dp[n]  + type, n);
                
        }
    }
}
*/

int from[111111], to[111111], type[111111];

int main(){

    ios_base::sync_with_stdio(false);
    
    int n, m;
    
    while(cin >> n >> m){
        for(int i=1; i <= n; i++) E[i].clear();
        
        int total_working = 0;
        for(int i=0; i < m; i++){
            int s, d, c; cin >> s >> d >> c;
            E[s].pb(mp(d,c));
            E[d].pb(mp(s,c));
            
            if(c == 1) total_working++;
            from[i] = s;
            to[i] = d;
            type[i] = c;
        }
        
        memset(dp, -1, sizeof dp);
        for(int i=2; i <= n; i++) dist[i] = inf;

        dp[1] = 0;
        dist[1] = 0;
        dad[1] = 0;
        queue<int> Q;
        Q.push(1);
        
        while(!Q.empty()){
            
            int v = Q.front();
            Q.pop();
            
            //cout << "CURRENT NODE = " << v << endl;
            for(int i=0; i < E[v].size(); i++){
                int to = E[v][i].first;
                int type = E[v][i].second;
            
                //cout << "TO = " << to << " " << dist[to] << endl;
                if(dist[to] == inf || (dist[to] == dist[v] + 1 && dp[to] < dp[v] + type)){
                    
                    if(dist[to] == inf)
                        Q.push(to);
                        
                    dist[to] = dist[v] + 1;
                    dp[to] = dp[v] + type;
                    dad[to] = v;
                    
                }
            }
        }
        //cout << dist[n] << " " << dp[n] << endl;
        cout << (dist[n] - dp[n]) + (total_working - dp[n]) << endl;
        
        int node = n;
        int path[111111];
        memset(path, -1, sizeof path);
        

        while( dad[node] > 0){
        
        //  cout << "FROM " << node << " TO " << dad[node] << endl;
            path[node] = dad[node];
            node = dad[node];
            
            
        }
        
        for(int i=0; i < m; i++){
            
            if(path[from[i]] == to[i] || path[to[i]] == from[i]){
                // this edge was used in the best path we found,
                if(type[i] == 0) cout << from[i] << " " << to[i] << " 1" << endl;
            }else{
                // it wasn't used...
                if(type[i] == 1) cout << from[i] << " " << to[i] << " 0" << endl;
            }
        }
    }
    return 0;
}
