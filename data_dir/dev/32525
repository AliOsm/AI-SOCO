#include <bits/stdc++.h>
using namespace std;
using ll = long long;

const int maxn = 3e5+5;
int n;
vector<int> adj[maxn];
int color[maxn];
int bcnt[maxn], rcnt[maxn]; //count in subtree

void DFS(int i, int p) {
    if (color[i] == 1) bcnt[i]++;
    else if (color[i] == 2) rcnt[i]++;
    for (int j: adj[i]) {
        if (j == p) continue;
        DFS(j,i);
        bcnt[i] += bcnt[j];
        rcnt[i] += rcnt[j];
    }
}

int ans = 0;
void DFS2(int i, int p) {
    for (int j: adj[i]) {
        if (j == p) continue;
        DFS2(j,i);
        int b1 = bcnt[j];
        int r1 = rcnt[j];
        int b2 = bcnt[1] - b1;
        int r2 = rcnt[1] - r1;
        if ((b1 == 0 || r1 == 0) && (b2 == 0 || r2 == 0)) ans++;
    }
}

int main()
{
    cin >> n;
    for (int i = 1; i <= n; i++) cin >> color[i];
    for (int i = 0; i < n - 1; i++) {
        int a, b; cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    DFS(1,1);    
    DFS2(1,1);
    cout << ans << '\n';
}

