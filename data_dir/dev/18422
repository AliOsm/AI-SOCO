/*****Enigma27*****/
#include<bits/stdc++.h>
#define start_routine clock_t begin = clock();
#define end_routine clock_t end = clock(); double elapsed_secs = double(end - begin) /CLOCKS_PER_SEC;return cerr<<"\nTime elapsed : "<<elapsed_secs<<" seconds\n",0;
#define ll          long long
#define pb          push_back
#define endl        '\n'
#define pll         pair<ll int,ll int>
#define vll          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define x           first
#define y           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll int i=a;i<b;i++)
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define gcd(a,b)    __gcd((a),(b))
#define lcm(a,b)    ((a)*(b)) / gcd((a),(b))
#define ios     ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
using namespace std;
ll n,i,j,k,l,flag=0,t,sub[200005],ans=0,lev[200005],parent[200005],o[200005],e[200005],oddPath=0;
vll v[200005],vv[200005];
void dfs(int node,int p){
    sub[node]=1;
    e[node]=1;
    for(auto i:v[node]){
        if(i!=p){
            dfs(i,node);
            sub[node]+=sub[i];
            o[node]+=e[i];
            e[node]+=o[i];
            ans+=sub[i]*(n-sub[i]);
        }
    }
}
void dfs2(int node,int p){
    oddPath+=o[node];
    for(auto i:v[node]){
        if(i!=p){
            o[node]-=e[i];
            e[node]-=o[i];
            o[i]+=e[node];
            e[i]+=o[node];
            dfs2(i,node);
            o[i]-=e[node];
            e[i]-=o[node];
            o[node]+=e[i];
            e[node]+=o[i];
        }
    }
}
int main()
{


    ios
    cin>>n;
    for(int i=0;i<n-1;i++){
    	cin>>j>>k;
    	v[j].pb(k);
    	v[k].pb(j);
    }
    dfs(1,0);
    dfs2(1,0);
    oddPath/=2;  //(2*o/2)
    cout<<(ans+oddPath)/2<<endl; //(o+e+o)/2
    return 0;
}