#include <bits/stdc++.h>

using namespace std;

int n,m;
string a[101];
vector <char> alpha;
set <int> adj[27];
bool mark[27],vis[27],anc[27],path[27][27],cycle;

bool dfs(int s) {
  mark[s] = anc[s] = true;
  for (auto i : adj[s]) {
    if (!mark[i]) {
      dfs(i);
    } else {
      if (anc[i]) {
        cycle = true;
      }
    }
  }
  anc[s] = false;
}

bool cmp(char a,char b) {
  return path[(int)(a - 'a')][(int)(b - 'a')];
}

int main() {
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  for (int i = 0; i < n; i++) {
    for (int j = i + 1; j < n; j++) {
      bool flag = 0;
      for (int k = 0; k < min(a[i].size(),a[j].size()); k++) {
        if (a[i][k] != a[j][k]) {
          adj[a[i][k] - 'a'].insert(a[j][k] - 'a');
          flag = 1;
          break;
        }
      }
      if (!flag) {
        if (a[i].size() > a[j].size()) {
          return cout << "Impossible",0;
        }
      }
    }
  }
  for (int i = 0; i < 26; i++) {
    if (!mark[i]) {
      dfs(i);  
    }
  }
  if (cycle) {
    return cout << "Impossible",0;
  }
  for (int i = 0; i < 26; i++) {
    memset(mark,0,sizeof mark);
    dfs(i);
    for (int j = 0; j < 26; j++) {
      if (j != i && mark[j]) {
        path[i][j] = true;
      }
    }
  }
  for (int i = 0; i < 26; i++) {
    for (int j = 0; j < 26; j++) {
      if (path[i][j]) {
        if (!vis[i]) {
          alpha.push_back(i + 'a');
        }
        if (!vis[j]) {
          alpha.push_back(j + 'a');
        }
        vis[i] = vis[j] = true;
      }
    }
  }
  sort(begin(alpha),end(alpha),cmp);
  for (int j = 0; j < 26; j++) {
    if (!vis[j]) {
      alpha.push_back(j + 'a');
    }
  }
  for (int i = 0; i < 26; i++) {
    cout << alpha[i];
  }
}