#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<string>
#include<vector>
#include<stack>
#include<bitset>
#include<cstdlib>
#include<cmath>
#include<set>
#include<list>
#include<deque>
#include<map>
#include<queue>
#define Max(a,b) ((a)>(b)?(a):(b))
#define Min(a,b) ((a)<(b)?(a):(b))
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
const double eps = 1e-10;
const int mod = 1000000000 + 7;
const int INF = 1000000000;
const double inf = 10000000000000000000.0;
const int maxn = 100000 + 10;
int T,n,m;
struct point {
    double x, y;
    point(double xx=0, double yy=0) : x(xx), y(yy) {}
}a[maxn];
typedef point Vector;
int dcmp(double x) {
    if(fabs(x) < eps) return 0; else return x < 0 ? -1 : 1;
}
Vector operator + (Vector A, Vector B) { return Vector(A.x+B.x, A.y+B.y); }
Vector operator - (point A, point B) { return Vector(A.x-B.x, A.y-B.y); }
Vector operator * (Vector A, double p) { return Vector(A.x*p, A.y*p); }
Vector operator / (Vector A, double p) { return Vector(A.x/p, A.y/p); }
bool operator == (const point& a, const point& b) {
    return dcmp(a.x - b.x) == 0 && dcmp(a.y - b.y) == 0;
}
double Dot(Vector A, Vector B) { return A.x * B.x + A.y * B.y; }
double Length(Vector A) { return sqrt(Dot(A, A)); }

double Cross(Vector A, Vector B) {
    return A.x * B.y - A.y * B.x;
}

//double dist(point P, point A, point B) {
//    Vector v1 = B - A, v2 = P - A;
//    return fabs(Cross(v1,v2)) / Length(v1);
//}
double dist(point P, point A, point B) {
    if(A == B) return Length(P-A);
    Vector v1 = B - A, v2 = P - A, v3 = P - B;
    if(dcmp(Dot(v1,v2)) < 0) return Length(v2);
    else if(dcmp(Dot(v1,v3)) > 0) return Length(v3);
    else return fabs(Cross(v1, v2)) / Length(v1);
}
double x, y;

int main() {
    scanf("%d%lf%lf",&n,&x,&y);
    double di = 0, hehe = inf;
    for(int i=0;i<n;i++) {
        scanf("%lf%lf",&a[i].x,&a[i].y);
        Vector v = point(x, y) - a[i];
        double d = Length(v);
        di = max(di, d);
        if(i == 0) continue;
        d = dist(point(x, y), point(a[i-1].x, a[i-1].y), point(a[i].x, a[i].y));
        hehe = min(hehe, d);
    }
    double d = dist(point(x, y), point(a[n-1].x, a[n-1].y), point(a[0].x, a[0].y));
    hehe = min(hehe, d);
    printf("%.18f\n",PI*di*di - PI*hehe*hehe);
    return 0;
}
