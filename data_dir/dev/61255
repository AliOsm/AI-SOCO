#include <stdio.h>
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define sz(a) (int)a.size()
#define fi first
#define se second

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 1000000 + 239;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;

void print(vector<int> &a)
{
    for (int i : a)
        cout << i << " ";
    cout << endl;
}

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("lasers.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    int n, m;
    cin >> n >> m;
    pair<int, int> a[n];
    rep(i, 0, n)
    {
        cin >> a[i].fi;
        a[i].se = i;
    }
    sort(a, a + n);
    if (n % 2 == 1)
    {
        cout << "-1";
        return 0;
    }
    int p1 = 1, p2 = 2, out = 0;
    map<int, int> cnt;
    rep(i, 0, n)
        cnt[a[i].fi]++;
    int c1 = 0, c2 = 0;
    for (auto it : cnt)
        if (it.fi % 2 == 1)
            c1++;
        else
            c2++;
    rep(i, 0, n)
        if (cnt[a[i].fi] > 1)
        {
            if (c1 < n / 2)
            {
                while (cnt.find(p1) != cnt.end())
                    p1 += 2;
                if (p1 > m)
                {
                    cout << -1;
                    return 0;
                }
                cnt[a[i].fi]--;
                a[i].fi = p1;
                cnt[a[i].fi]++;
                p1 += 2;
                c1++;
                out++;
            }
            else
            {
                while (cnt.find(p2) != cnt.end())
                    p2 += 2;
                if (p2 > m)
                {
                    cout << -1;
                    return 0;
                }
                cnt[a[i].fi]--;
                a[i].fi = p2;
                cnt[a[i].fi]++;
                p2 += 2;
                c2++;
                out++;
            }
        }
    rep(i, 0, n)
    {
        if (c1 > c2 && a[i].fi % 2 == 1)
        {
            while (cnt.find(p2) != cnt.end())
                p2 += 2;
            if (p2 > m)
            {
                cout << -1;
                return 0;
            }
            cnt[a[i].fi]--;
            a[i].fi = p2;
            cnt[a[i].fi]++;
            p2 += 2;
            c1--;
            c2++;
            out++;
        }
        if (c1 < c2 && a[i].fi % 2 == 0)
        {
            while (cnt.find(p1) != cnt.end())
                p1 += 2;
            if (p1 > m)
            {
                cout << -1;
                return 0;
            }
            cnt[a[i].fi]--;
            a[i].fi = p1;
            cnt[a[i].fi]++;
            p1 += 2;
            c1++;
            c2--;
            out++;
        }
    }
    cout << out << endl;
    int res[n];
    rep(i, 0, n)
        res[a[i].se] = a[i].fi;
    rep(i, 0, n)
        cout << res[i] << " ";
    return 0;
}
