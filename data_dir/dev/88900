#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <iterator>
#define Mod 1000000007
typedef long long ll;

using namespace std;

long long l[100005], le[100005];
vector <int> Div[100005];
long long tedad[100005], contain[100005];

long long t(long long a, int b)
{
    if (b == 0)
        return 1;
    long long ans = t(a, b/2);
    ans = (ans * ans)%Mod;
    if (b%2 == 1)
        ans = (ans * a)%Mod;
    return ans;
}

int main()
{
    int n;
    cin >> n;
    int a;
    int Max = 0;
    for (int i = 0; i<n; i++)
    {
        cin >> a;
        Max = max(Max, a);
        tedad[a]++;
    }
    contain[100000] = tedad[100000];
    for (int i = 99999; i>=1; i--)
        contain[i] = contain[i+1] + tedad[i];
    for (int i = 1; i<=100000; i++)
    {
        le[i] = l[i] = 1;
        for (int j = 1; i*j <= 100000; j++)
            Div[i*j].push_back(i);
    }
    long long ans = 0;
    for (int i = 2; i<=Max; i++)
    {
        for (int j = 0; j<Div[i].size(); j++)
        {
            if (j < Div[i].size()-1)
            {
                le[i] *= t(j+1, contain[Div[i][j]] - contain[Div[i][j+1]]);
                le[i] %= Mod;
                if (j + 1 == Div[i].size()-1)
                     l[i] *= t(j+1, contain[Div[i][j]]);
                else
                    l[i] *= t(j+1, contain[Div[i][j]] - contain[Div[i][j+1]]);
                l[i] %= Mod;
            }
            else
            {
                le[i] *= t(j+1, contain[Div[i][j]]);
                le[i] %= Mod;
            }
        }
        ans = (ans + le[i] - l[i]);
        while (ans < 0)
            ans += Mod;
        ans %= Mod;
    }
    cout << ans+1 << endl;
    return 0;
}
