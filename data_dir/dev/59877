#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <cstdio>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
using namespace std;

#define mp make_pair
#define int64 long long

#ifdef _DEBUG
    const int N = 110;
#else
    const int N = 100010;
#endif
    

int n, cnt, c[N], number[N];
int64 ans[N];
vector <int> g[N];
map <int, int> q[N];
pair <int64, int64> res[N];

void dfs(int v, int p)
{
    bool f = false;
    for (int i = 0; i < g[v].size(); i++)
        if (g[v][i] != p)
        {
            f = true;
            dfs(g[v][i], v);
        }
    if (!f)
    {
        cnt++;
        q[cnt][c[v]] = 1;
        res[cnt] = mp(1, c[v]);
        ans[v] = c[v];
        number[v] = cnt;
        return;
    }
    int j = -1;
    for (int i = 0; i < g[v].size(); i++)
        if (g[v][i] != p)
        {
            int u = g[v][i];
            int num = number[u];
            if (j == -1 || q[num].size() > q[j].size()) j = num;
        }
    for (int i = 0; i < g[v].size(); i++)
        if (g[v][i] != p)
        {
            int u = g[v][i];
            int num = number[u];
            if (num == j) continue;
            for (map <int, int> :: iterator it = q[num].begin(); it != q[num].end(); it++)
            {
                int x = it->first;
                int count = it->second;
                if (q[j].find(x) != q[j].end()) q[j][x] += count;
                else q[j][x] = count;
                int tmp = q[j][x];
                if (res[j].first < tmp)
                {
                    res[j].first = tmp;
                    res[j].second = x;
                }
                else if (res[j].first == tmp)
                {
                    res[j].second += x;
                }
            }
            q[num].clear();
        }
    number[v] = j;
    if (q[j].find(c[v]) == q[j].end()) q[j][c[v]] = 1;
    else q[j][c[v]]++;
    int tmp = q[j][c[v]];
    if (res[j].first < tmp)
    {
        res[j].first = tmp;
        res[j].second = c[v];
    }
    else if (res[j].first == tmp)
    {
        res[j].second += c[v];
    }
    ans[v] = res[j].second;
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) scanf("%d", &c[i]);
    for (int i = 1; i < n; i++)
    {
        int a, b;
        scanf("%d%d", &a, &b);
        g[a].push_back(b);
        g[b].push_back(a);
    }
    cnt = 0;
    dfs(1, -1);
    for (int i = 1; i <= n; i++) printf("%I64d ", ans[i]);
    return 0;
}