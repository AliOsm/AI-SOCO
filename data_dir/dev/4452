#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     std::begin(_obj), std::end(_obj)
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
    #define debug(_x)                 std::cerr << (#_x) << " = " << (_x) << '\n' << std::flush;
#else
    #define debug(_x)                 ;
#endif
#define endl "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = int64_t;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
#define m_ptr(_m) int (&_m)[100][100]

int T[100][100];
int x[100][100];
int buf[100][100];

inline int Add(int x, int y) {
    int res = x + y;
    return res < MOD ? res : res - MOD;
}

inline int Mul(int x, int y) {
    return 1LL * x * y % MOD;
}

void MulMat(m_ptr(a), m_ptr(b), int n) {
    memset(buf, 0, sizeof(buf));
    loop(n) {
        for (int j = 0; j < n; ++j) {
            for (int k = 0; k < n; ++k) {
                buf[i][j] = Add(buf[i][j], Mul(a[i][k], b[k][j]));
            }
        }
    }
    memcpy(a, buf, sizeof(a));
}

void FastPow(m_ptr(m), int n, ll p) {
    memcpy(x, m, sizeof(m));
    while (p) {
        if (p & 1) {
            MulMat(m, x, n);
        }
        p >>= 1;
        MulMat(x, x, n);
    }
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    ll n;
    int m;
    cin >> n >> m;
    T[0][m - 1] = T[m - 1][m - 1] = 1;
    for (int i = 1; i < m; ++i) {
        T[i][i - 1] = 1;
    }
    FastPow(T, m, n);
    cout << T[0][m - 1] << endl;

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}