#include<bits/stdc++.h>
#include<ext/numeric>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define WHITE -1
#define GREY   0
#define BLACK  1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)
#define MP make_pair

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef unsigned int ui;

//typedef complex<double> point
//#define X real()
//#define Y imag()
//#define vec(a,b) ((b)-(a))
//#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define colliner pointOnLine

const double PI = acos(-1.0);

int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

int DX[] = { -1, -1, 0, 1, 1, 1, 0, -1 };
int DY[] = { 0, 1, 1, 1, 0, -1, -1, -1 };

const int MAX = 1e5 + 5, MOD = 1e9 + 7, oo = (1 << 30), MAXLOG = 20;
const ll OO = 1ll << 60;
const double EPS = 1e-9;

int n, m;
ll h[MAX], p[MAX];

bool check(ll x) {
	int nxt = 0;
	for (int i = 0; i < n; ++i) {
		ll X = x;
		int idx = lower_bound(p, p + m, h[i] - x) - p;
		if (idx > nxt)
			return 0;
		X -= max(2ll * (h[i] - p[nxt]), 0ll);
		int idx2 = lower_bound(p, p + m, h[i] + X) - p;
		if (idx2 == m)
			return 1;
		if (p[idx2] > h[i] + X)
			--idx2;
//		nxt = idx2 + 1;
//		if (nxt == m)
//			return 1;
		X = x;
		X -= max(h[i] - p[nxt], 0ll);
		int idx3 = lower_bound(p, p + m, h[i] + X / 2) - p;
		if (idx3 == m)
			return 1;
		if (p[idx3] > h[i] + X / 2)
			--idx3;
		nxt = max(idx3 + 1, idx2 + 1);
		if (nxt == m)
			return 1;

	}
	return nxt == m;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
#endif
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; ++i)
		scanf("%lld", &h[i]);
	for (int i = 0; i < m; ++i)
		scanf("%lld", &p[i]);
	ll l = 0, r = 2e10;
	while (l < r) {
		ll mid = l + ((r - l) >> 1);
		if (check(mid))
			r = mid;
		else
			l = mid + 1;
	}
	printf("%lld\n", r);
}
