#include <iostream>
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define pi acos(-1)
typedef complex<double>CX;


void fft(vector<CX>&a,bool inv){
    int n=a.size();
    if(n==1)
      return;
    vector<CX>even(n/2),odd(n/2);
    for(int i=0;i<n/2;i++){
        even[i]=a[i*2];
        odd[i]=a[i*2+1];
    }
    fft(even,inv);
    fft(odd,inv);
    double angle=2*pi/n*(inv?-1:1);
    CX w(1,0),wn(cos(angle),sin(angle));
    for(int i=0;i<n/2;i++){
        a[i]=even[i]+w*odd[i];
        a[i+n/2]=even[i]-w*odd[i];
        w*=wn;
    }
}
vector<int>multiply(vector<int>a,vector<int>b){
    int mxA=0,mxB=0,n=1;
    for(int i=a.size()-1;i>=0;i--){
        if(a[i]){
            mxA=i;
            break;
        }
    }
    for(int i=b.size()-1;i>=0;i--){
        if(b[i]){
            mxB=i;
            break;
        }
    }
    while(n<mxA+mxB)n*=2;
    while(a.size()<n)
        a.pb(0);
    while(b.size()<n)
        b.pb(0);
    vector<CX>A(a.begin(),a.end());
    vector<CX>B(b.begin(),b.end());
    fft(A,0);
    fft(B,0);
    for(int i=0;i<A.size();i++)
        A[i]*=B[i];
    fft(A,1);
    vector<int>ret;
    for(int i=0;i<A.size();i++){
        ret.pb(min((int)round(real(A[i]/double(n))),1));
    }
    return ret;
}
vector<int>power(vector<int>v,int k){
  if(k==1)
    return v;
  vector<int>cur=power(v,k/2);
  cur=multiply(cur,cur);
  if(k&1)
    cur=multiply(v,cur);
  return cur;
}
int main()
{
    //freopen("test.in","r",stdin);
   //freopen("test.out","w",stdout);
   vector<int>v(1024,0);
   int k,n;
   scanf("%d%d",&n,&k);
   while(n--){
      int a;
      scanf("%d",&a);
      v[a]=1;
   }
   vector<int>sol=power(v,k);
   for(int i=0;i<min((int)sol.size(),1000001);i++){
      if(sol[i])
        printf("%d ",i);
   }
   return 0;
}
