#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) ((n%m + m) % m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

const int N = 2e7 + 5;
int sv[N];
void factorize(int n, vector<int> &v)
{
	if (n == 1)
		return;
	if (sv[n] == 0)
		sv[n] = n;
	v.push_back(sv[n]);
	if (sv[n] == n)
		return;
	factorize(n / sv[n], v);
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	for (int i = 2; i * i < N; i++)
		if (sv[i] == 0)
			for (int j = i; j < N; j += i)
				if (sv[j] == 0)
					sv[j] = i;

	int n;
	cin >> n;
	vi vec(n);

	int gcd = 0;
	rep(i, 0, n)
	{
		int x;
		cin >> x;
		vec[i] = x;
		gcd = __gcd(gcd, x);
	}
	int mx = 0;
	map<int, int> mp;
	rep(i, 0, n)
	{
		vec[i] /= gcd;
		vi send;
		factorize(vec[i], send);
		unordered_map<int, int> c;

		for(auto j : send)
		{
			if (c[j])
				continue;
			c[j] = true;
			while(vec[i]%j == 0)
				vec[i] /= j;
			mp[j]++;
		}
	}
	for(auto i : mp)
		mx = max(mx, i.second);
	if (!mx)
		return cout << -1, 0;
	cout << n - mx << endl;

	return 0;
}
