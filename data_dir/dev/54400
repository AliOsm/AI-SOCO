// #include "testlib.h"
#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define eps 1e-6
#define endl '\n'
#define Endl '\n'
#define fi first
#define ii pair<ll,ll>
#define iii pair<ll,ii>
#define se second
#define mod 1000000007
#define popcount __builtin_popcountll
const double PI = acos(-1.0);
using namespace std;
const int mxN = 100000;
const int inf = 2e9;
struct Edgee {
  int to, cost, cap, flow, backEdge;
};
struct MCMF {
  int s, t, n;
  vector<Edgee> g[mxN];
  MCMF(int _s, int _t, int _n) {
    s = _s, t = _t, n = _n;
  }
  void addEdge(int u, int v, int cost, int cap) {
    Edgee e1 = { v, cost, cap, 0, g[v].size() };
    Edgee e2 = { u, -cost, 0, 0, g[u].size() };
    g[u].push_back(e1); g[v].push_back(e2);
  }
  pair<int, int> minCostMaxFlow() { // { cost , flow }
    int flow = 0, cost = 0;
    vector<int> state(n), from(n), from_edge(n), d(n);
    deque<int> q;
    while (true) {
      for (int i = 0; i < n; i++)
        state[i] = 2, d[i] = inf, from[i] = -1;
      state[s] = 1; q.clear(); q.push_back(s); d[s] = 0;
      while (!q.empty()) {
        int v = q.front(); q.pop_front(); state[v] = 0;
        for (int i = 0; i < (int) g[v].size(); i++) {
          Edgee e = g[v][i];
          if (e.flow >= e.cap || d[e.to] <= d[v] + e.cost)
            continue;
          int to = e.to; d[to] = d[v] + e.cost;
          from[to] = v; from_edge[to] = i;
          if (state[to] == 1) continue;
          if (!state[to] || (!q.empty() && d[q.front()] > d[to]))
            q.push_front(to);
          else q.push_back(to);
          state[to] = 1;
        }
      }
      if (d[t] == inf) break;
      int it = t, addflow = inf;
      while (it != s) {
        addflow = min(addflow,
            g[from[it]][from_edge[it]].cap
            - g[from[it]][from_edge[it]].flow);
        it = from[it];
      }
      it = t;
      while (it != s) {
        g[from[it]][from_edge[it]].flow += addflow;
        g[it][g[from[it]][from_edge[it]].backEdge].flow -= addflow;
        cost += g[from[it]][from_edge[it]].cost * addflow;
        it = from[it];
      }
      flow += addflow;
    }
    return {cost,flow};
  }
};
int mx[55], mn[55];
int main(){
    int n, q;
    cin>>n>>q;
    for(int i=1;i<=n;i++){
        mn[i] = n;
        mx[i] = 1;
    }
    while(q--){
        int t, l, r, v;
        scanf("%d%d%d%d", &t, &l, &r, &v);
        for(int i=l;i<=r;i++){
            if(t==1)mx[i] = max(mx[i], v);
            else mn[i] = min(mn[i], v);
        }
    }
    for(int i=1;i<=n;i++){
        // cout<<mn[i]<<" "<<mx[i]<<endl;
        swap(mn[i], mx[i]);
        // continue;
        if(mx[i]<mn[i]){
            cout<<-1<<endl;
            return 0;
        }
    }
    int src = 2*n+1, snk = 2*n + 2;
    MCMF amid(src, snk, 2*n+3);
    for(int i=1;i<=n;i++){
        amid.addEdge(src, i, 0, 1);
        for(int j = mn[i];j<=mx[i];j++){
            amid.addEdge(i, n+j, 0, 1);
        }
    }
    for(int i=n+1;i<=2*n;i++){
        for(int j=1;j<=n;j++){
            amid.addEdge(i, snk,2*j-1, 1);
        }
    }
    cout<<amid.minCostMaxFlow().fi<<endl;
}
