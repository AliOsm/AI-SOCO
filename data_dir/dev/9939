#include <iostream>
#include <vector>
#include <algorithm>
#include <deque>
using namespace std;

typedef pair<int, int> pii;

vector<pii> colswaps;

int rev[1010];
int fwd[1010];

void swap_col(int i, int j) {
	if (i == j) return;
	int& fi = rev[i];
	int& fj = rev[j];
	swap(fi, fj);
	fwd[fi] = i;
	fwd[fj] = j;
	colswaps.push_back(pii(i + 1, j + 1));
}

deque<int> rows[1010];
vector<pii> rowswaps;
void swap_row(int i, int j) {
	if (i == j) return;
	swap(rows[i], rows[j]);
	rowswaps.push_back(pii(i + 1, j + 1));
}

int cnt[1010];

int main() {
	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		rev[i] = i;
		fwd[i] = i;
	}
	for (int i = 0; i < n - 1; i++) {
		int a, b;
		cin >> a >> b;
		a--; b--;
		rows[a].push_back(b);
		cnt[b]++;
	}
	int p = 0;
	for (int i = 0; i < n; i++) {
		if (cnt[i]) {
			swap_col(p, i);
			p++;
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < rows[i].size(); j++) {
			rows[i][j] = fwd[rows[i][j]];
		}	
	}
	for (int i = 0; i < n; i++) {
		bool found = false;
		for (int j = i; j < n; j++) {
			if (rows[j].size() && rows[j].front() < i) {
				rows[j].pop_front();
			}
			if (!found && rows[j].size() == 0) {
				swap_row(i, j);	
				found = true;
			}
		}
	}
	cout << colswaps.size() + rowswaps.size() << '\n';
	for (int i = 0; i < colswaps.size(); i++) {
		cout << 2 << ' ' << colswaps[i].first << ' ' << colswaps[i].second << '\n';
	}
	for (int i = 0; i < rowswaps.size(); i++) {
		cout << 1 << ' ' << rowswaps[i].first << ' ' << rowswaps[i].second << '\n';
	}
}