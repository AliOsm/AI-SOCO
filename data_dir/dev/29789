
#include <iostream>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j1234 = n; (i) < j1234; (i) ++)
#define rep1(i, n) for (int (i) = 1, j1234 = n; (i) <= j1234; (i) ++)
#define For(i, a, b) for (int (i) = (a), ub1234=b; (i) <= ub1234; (i) ++)
#define db(x) {if(debug){cout << #x << " = " << (x) << endl;}}
#define dba(a, x, y) {if(debug){cout << #a << " :";For(i, (x), (y))cout<<" "<<(a)[(i)];cout<<endl;}}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define endl '\n'
#define ll long long
#define ld long double
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const int output_precision = 15;
const ld pi = acos(-1);
const bool debug = true;
// const ll MOD = ;

int gcd(int a, int b) { return b ? gcd(b,a%b) : a; }
int N, K;
vector<int> ans[10100];
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(output_precision); cout << fixed;
  cout.tie(0);
  cin >> N >> K;
  // make n sets of rank 1, and multiply everything by 1.
  int even = 2;
  int odd = 1;
  rep1(i,N)
  {
    ans[i].pb(odd);
    odd+=2;
    ans[i].pb(odd);
    odd+=2;
    ans[i].pb(odd);
    odd+=2;
    for (; true; even+=2)
    {
      int flag = 0;
      rep(ii,3)
        if (gcd(even,ans[i][ii])!=1)
          flag = 1;
      if (!flag)
      {
        ans[i].pb(even);
        even+=2;
        break;
      }
    }
  }
  cout << max(even-2,odd-2)*K << endl;
  rep1(i,N) rep(j,4) cout << K*ans[i][j] << (j+1==4?'\n':' ');

}
