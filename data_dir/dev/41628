#include<bits/stdc++.h>
#define MOD 1000000007
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define pll pair<ll,ll>
#define vpll vector<pll>
using namespace std;
typedef long long int ll; 
double PI=4.00*(atan(1));

ll gcd(ll a,ll b)
{
    if(b==0)
    {
        return a;
    }
    return gcd(b,a%b);
}

pll makeline(ll xdiff,ll ydiff)
{
    if((xdiff*ydiff)>=0)
    {
        xdiff=fabs(xdiff);
        ydiff=fabs(ydiff);        
    }
    else
    {
        ll temp=xdiff*ydiff;
        ydiff=fabs(ydiff);
        xdiff=temp/ydiff;
    }
    ll val1=gcd(fabs(xdiff),fabs(ydiff));
    xdiff=xdiff/val1;
    ydiff=ydiff/val1;
    return make_pair(xdiff,ydiff);
}

ll sumsquare(vector<ll> v1)
{
    ll size=v1.size();
    ll sum=0;
    for(ll i=0;i<size;i++) 
    {
        sum+=v1[i];
    }
    sum=sum*sum;
    for(ll i=0;i<size;i++)
    {
        sum-=(v1[i]*v1[i]);
    }
    sum=sum/2;
    return sum;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);    
     
    ll n;
    cin>>n;
    pll points[n];
    for(ll i=0;i<n;i++)
    {
        cin>>points[i].first>>points[i].second;
    }
    map<pll,set<ll>> values;
    // First for uniquecoordinates;
    
    pll temp;
    ll diff=0;
    ll val;
    for(ll i=0;i<n;i++)
    {
        for(ll j=0;j<n;j++)
        {
            if(i==j)
            {
                continue;
            }
            temp=makeline(points[j].first-points[i].first,points[j].second-points[i].second);
            val=temp.first*points[i].second;
            val-=(temp.second*points[i].first);
            values[temp].insert(val);
        }
    }
    vector<ll> final;
    for(auto it:values)
    {
        val=it.second.size();
        final.push_back(val);
    }
    ll result=sumsquare(final);
    cout<<result;
    return 0;
}