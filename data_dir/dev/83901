#include<bits/stdc++.h>
//#define int long long int
#define begin begin1
#define end end1
#define ld long double
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD2 998244353
#define MOD1 1e9+7
#define f first
#define s second
#define endl '\n'
#define pii pair<int,int>
#define piii pair<pii,int>
#define precise(i) cout<<fixed<<setprecision(i)
using namespace std;
const long double PI = atan(1.0)*4;
const int64_t INF=1000000000000000003;
const int32_t LOG=21;
const int MOD=MOD2;

int t[2000005];
int lazy[2000005];
int a[300005];
vector<int> v[300005];
void build(int v, int tl, int tr) {
    if (tl == tr) {
        t[v] = a[tl];
    } else {
        int tm = (tl + tr) / 2;
        build(v*2, tl, tm);
        build(v*2+1, tm+1, tr);
        t[v] = max(t[v*2],t[v*2+1]);
    }
}

void push(int v) {
    t[v*2] += lazy[v];
    lazy[v*2] += lazy[v];
    t[v*2+1] += lazy[v];
    lazy[v*2+1] += lazy[v];
    lazy[v] = 0;
}

void update(int v, int tl, int tr, int l, int r, int addend) {
    if (l > r) 
        return;
    if (l == tl && tr == r) {
        t[v] += addend;
        lazy[v] += addend;
    } else {
        push(v);
        int tm = (tl + tr) / 2;
        update(v*2, tl, tm, l, min(r, tm), addend);
        update(v*2+1, tm+1, tr, max(l, tm+1), r, addend);
        t[v] = max(t[v*2], t[v*2+1]);
    }
}

int query(int v, int tl, int tr, int l, int r) {
    if (l > r)
        return 2000000001;
    if (l <= tl && tr <= r)
        return t[v];
    push(v);
    int tm = (tl + tr) / 2;
    return max(query(v*2, tl, tm, l, min(r, tm)), 
               query(v*2+1, tm+1, tr, max(l, tm+1), r));
}

int32_t main()
{ 
      getFaster;
      int tests=1;
      //cin>>tests;
      rep(ii,0,tests)
      {               
          int n;
          cin>>n;
          rep(i,0,n){cin>>a[i];a[i]+=2;}
          rep(i,0,n-1)
          {
          	 int x,y;
          	 cin>>x>>y;
          	 x--,y--;
          	 v[x].push_back(y);
          	 v[y].push_back(x);
          }
          build(1,0,n-1);
          int ans=2000000001;
          rep(i,0,n)
          {
               update(1,0,n-1,i,i,-2);
               for(auto it:v[i])
               update(1,0,n-1,it,it,-1);
               ans=min(ans,t[1]);
               update(1,0,n-1,i,i,2);
               for(auto it:v[i])
               update(1,0,n-1,it,it,1);	
          }
          cout<<ans<<endl;	
      }
      return 0;     
}
