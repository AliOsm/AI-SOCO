#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define pb push_back
#define f first
#define s second
#define mod 1000000007
#define inf 1e8

#define pi pair<ll,ll>
#define pii pair<pi,ll>
#define f first
#define mp make_pair
#define s second
#define rep(i,n) for(ll i=0;i<n;i++)
#define forup(i,a,b) for(ll i=a;i<=b;i++)
#define gd(v) scanf("%d",&v)
#define gl(x) scanf("%lld",&x)
#define pd(v) printf("%d\n",v)
#define pl(v) printf("%lld\n",v)
int a[500011];
int next_ind[500011];
vector<int>seg[1<<21];
void init(int node,int l,int r){
	if(l==r){
		seg[node].pb(next_ind[l]);
		return;
	}
	int mid=(l+r)/2;
	init(2*node,l,mid);
	init(2*node+1,mid+1,r);
	seg[node].resize(r-l+1);
	merge(seg[2*node].begin(),seg[2*node].end(),seg[2*node+1].begin(),seg[2*node+1].end(),seg[node].begin());
}
int n;
int query(int node,int l,int r,int s,int e){
	if(r<s or l>r or e<l) return n+1;
	if(s<=l and r<=e){
		auto it = upper_bound(seg[node].begin(),seg[node].end(),e+1);
		if(it==seg[node].end()) return n+1;
		return *it;
		//return *it;
	}
	int mid=(l+r)/2;
	return min(query(2*node,l,mid,s,e),query(2*node+1,mid+1,r,s,e));
}
map<int,int>next_pos;
int dp[500011];
int trace[500011];
int main(){
	cin>>n;
	rep(i,n)
		cin>>a[i+1];
	for(int i=n;i>=1;i--){
		if( next_pos[a[i]] ){
			next_ind[i]=next_pos[a[i]];
		}
		else{
			next_ind[i]=n+2;
		}
		next_pos[a[i]]=i;
	}
	int nx;
	int pivot=0;
	init(1,1,n);
	for(int i=n;i>=1;i--){
		dp[i]=dp[i+1];
		if(next_ind[i]!=n+1){
			pivot=query(1,1,n,i+1,next_ind[i]-1);
			if( pivot!=n+1 and dp[i] < dp[pivot+1]+4 )
				dp[i]=dp[pivot+1]+4,trace[i]=pivot;

		}
			nx=next_ind[i];
			nx=next_ind[nx];
			nx=next_ind[nx];
			if( nx!=0 and nx<=n and dp[i] < dp[nx+1]+4 )
				dp[i]=dp[nx+1]+4,trace[i]=nx;

	}
	cout<<dp[1]<<"\n";;
	vector<int>ans;
	for(int i=1;i<=n;i++){
		//cout<<i<<" ";
		if( trace[i]>0 and trace[i]<=n ){
			ans.pb(a[i]);
			ans.pb(a[trace[i]]);
			ans.pb(a[i]);
			ans.pb(a[trace[i]]);
			i=trace[i];

		}

	}
	for(auto x:ans) cout<<x<<" ";
}
