#pragma comment(linker, "/STACK:268435456")

#include<iostream>
#include<cstdio>

#include<string>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<stack>

#include<iomanip>
#include<memory.h>
#include<algorithm>
#include<cstring>
#include<ctime>
#include<cmath>
#include<cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define for1(i, n) for(int i = 1; i < (int)(n); ++i)
#define forr(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define fore(i, a, b) for(int i = int(a); i <= int(b); ++i)
#define correct(x, y, n, m) (0 <= x && x < n && 0 <= y && y < m)
#define x first
#define y second
#define all(a) a.begin(), a.end()
#define pb push_back
#define mp make_pair
#define sz(v) (int)(v.size())
#define hash archash
#define next arcnext
#define link arclink
#define y0 arcy0
#define y1 arcy1
#define log2 arclog2

template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }
template<class T> T gcd(T a, T b) { return a ? gcd (b % a, a) : b; }
template<class T> T lcm(T a, T b) { return a / gcd (a, b) * b; }
template<class T> T sign(T a) { return a > 0 ? 1 : (a < 0 ? -1 : 0); }

typedef long long li;
typedef unsigned long long uli;
typedef long double ld;
typedef pair <int, int> pt;
typedef vector <int> vi; 
typedef vector <vector <int> > vvi;
typedef vector <pair <int, int> > vpt; 

const int dx[] = {-1, 0, 1,  0};
const int dy[] = { 0, 1, 0, -1};
const int dxK[] = {-1, -1, 0, 1, 1,  1,  0, -1};
const int dyK[] = { 0,  1, 1, 1, 0, -1, -1, -1};
const int dxKn[] = {-2, -1, 1, 2,  2,  1, -1, -2};
const int dyKn[] = { 1,  2, 2, 1, -1, -2, -2, -1};

const int N = int(1e6) + 9;
const int M = int(3e3) + 9;
const int LOGN = 22;
const int SQN = 350;
const int MOD = int(1e9) + 7;
const int INF = 1e9 + 100;
const li INF64 = 2e18;
const ld PI = 3.1415926535897932384626433832795;
const ld EPS = 1e-9;

int n, m;
int a[N];
pt q[N];
vi b;
int mx[N];
int dp[N], t[4 * N];
vi poses[N];
vpt q2[N];
int ansl[N], ansr[N];

bool read(){
	if(scanf("%d %d", &n, &m) != 2)
		return false;
	forn(i, n)
		scanf("%d", &a[i]), b.pb(a[i]);
	forn(i, m)
		scanf("%d %d", &q[i].x, &q[i].y), b.pb(q[i].y), --q[i].x;
	sort(all(b));b.erase(unique(all(b)), b.end());
	forn(i, n)
		a[i] = lower_bound(all(b), a[i]) - b.begin();
	forn(i, m)
		q[i].y = lower_bound(all(b), q[i].y) - b.begin();
	return true;
}

int get(int v, int l, int r, int L, int R){
	if(l == L && r == R)
		return t[v];
	int mid = (l + r) / 2;
	if(R <= mid)
		return get(v * 2 + 1, l, mid, L, R);
	if(L > mid)
		return get(v * 2 + 2, mid + 1, r, L, R);
	return max(get(v * 2 + 1, l, mid, L, mid), 
		   get(v * 2 + 2, mid + 1, r, mid + 1, R));
}

void upd(int v, int l, int r, int pos, int d){
	if(l == r){
		assert(pos == l);
		t[v] = max(t[v], d);
		return;
	}
	int mid = (l + r) / 2;
	if(pos <= mid)
		upd(v * 2 + 1, l, mid, pos, d);
	if(pos > mid)
		upd(v * 2 + 2, mid + 1, r, pos, d);
	t[v] = max(t[v * 2 + 1], t[v * 2 + 2]);

}

void solve(){
	forn(i, n){
		dp[i] = 1;
		int pos = a[i] - 1;
		if(pos >= 0)
			dp[i] = 1 + get(0, 0, N - 1, 0, pos);
		
		upd(0, 0, N - 1, a[i], dp[i]);
	}

	int res = t[0];
	memset(mx, -1, sizeof mx);
	mx[res + 1] = INF;
	forr(i, n){
		if(a[i] < mx[dp[i] + 1]){
			mx[dp[i]] = max(mx[dp[i]], a[i]);
			if(sz(poses[dp[i]]) < 2)
				poses[dp[i]].pb(i);
		}
	}

	forn(i, m)
		q2[q[i].x].pb(mp(i, q[i].y));

	memset(t, 0, sizeof t);
	memset(dp, 0, sizeof dp);
	forr(i, n){
		dp[i] = 1;
		int pos = a[i] + 1;
		dp[i] = 1 + get(0, 0, N - 1, pos, N - 1);
		forn(j, sz(q2[i])){
			ansr[q2[i][j].x] = 1;
			int pos2 = q2[i][j].y + 1;
			ansr[q2[i][j].x] = 1 + get(0, 0, N - 1, pos2, N - 1);
		}
		upd(0, 0, N - 1, a[i], dp[i]);
	}

	memset(t, 0, sizeof t);
	memset(dp, 0, sizeof dp);
	forn(i, n){
		dp[i] = 1;
		int pos = a[i] - 1;
		if(pos >= 0)
			dp[i] = 1 + get(0, 0, N - 1, 0, pos);
		forn(j, sz(q2[i])){
			ansl[q2[i][j].x] = 1;
			int pos2 = q2[i][j].y - 1;
			if(pos2 >= 0)
				ansl[q2[i][j].x] = 1 + get(0, 0, N - 1, 0, pos2);
		}
		upd(0, 0, N - 1, a[i], dp[i]);
	}



	forn(i, m){
		int pos = q[i].x;
		int nres = res;
		if(sz(poses[dp[pos]]) == 1 && poses[dp[pos]][0] == pos)
			--nres;
		cout << max(nres, -1 + ansl[i] + ansr[i]) << endl;
	}
}

int main(){
//	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	srand(time(NULL));
	cout << setprecision(10) << fixed;
	cerr << setprecision(10) << fixed;   
	while(read())
		solve();

	return 0;
}