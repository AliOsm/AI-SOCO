//#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
          
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
          
using namespace std;
using namespace __gnu_pbds;
          
//#define int long long
 
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
          
using matrix = vector<vector<ll>>;
template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
          
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
 
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cout.setf(ios::fixed);
    cout.precision(20);
    #ifndef _offline
    //freopen("mincost.in", "r", stdin);
    //freopen("mincost.out", "w", stdout);
    #endif
}

const int MAXN = 1e6 + 100;
int a[MAXN], dp[MAXN];
pll val[MAXN];

signed main() {
    FAST_IO();
    int n;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    for (int i = n - 1; i >= 0; --i) {
        dp[i] = i;
        val[i] = {a[i], 1};
        ll s = a[i], cnt = 1;
        int j = i + 1;
        while (j < n) {
            ll s1 = val[j].first;
            ll cnt1 = val[j].second;
            if ((s + s1) * cnt < s * (cnt + cnt1)) {
                s += s1;
                cnt += cnt1;
                dp[i] = dp[j];
                val[i] = {s, cnt};
                j = dp[j] + 1;
            }
            else {
                break;
            }
        }
    }
    int i = 0;
    while (i < n) {
        for (int j = i; j <= dp[i]; ++j) {
            cout << val[i].first / 1. / val[i].second << ' ';
        }
        i = dp[i] + 1;
    }
}