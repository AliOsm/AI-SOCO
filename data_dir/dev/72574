#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;
vector<int>adj[100001];
int parent[100001];
int anc[20][100001];
int size[100001];
int N;
int treenum[100001];
int curtreenum=1;
int depth[100001];
int num[100001];
map<int,vector<int>>tree[100001]; //? nodes of ? depth in which tree

int curnum;

int dfs(int node){
  num[node]=curnum;
  curnum++;
  treenum[node]=curtreenum;
  tree[curtreenum][depth[node]].push_back(num[node]);
  for (int i=0;i<adj[node].size();i++){
    depth[adj[node][i]]=depth[node]+1;
    size[node]+=dfs(adj[node][i]);
  }
  size[node]++;
  return size[node];
}

int findanc(int P, int V) //find the Pth ancestor of node V
{
  for (int i=19;i>=0;i--){
    if (((1<<i)&P)!=0)
      V=anc[i][V];
  }
  return V;
}

int main()
{
  ios_base::sync_with_stdio(0);cin.tie(0);
  cin>>N;
  for (int i=1;i<=N;i++){
    cin>>parent[i];
    anc[0][i]=parent[i];
    if (i!=0)
      adj[parent[i]].push_back(i);
  }
  for (int i=1;i<=N;i++){
    if (parent[i]==0){
      curnum=1;
      dfs(i);
      curtreenum++;
    }
  }
  for (int j=1;j<20;j++)
    for (int i=1;i<=N;i++)
      anc[j][i]=anc[j-1][anc[j-1][i]];
  for (int i=1;i<curtreenum;i++){
    int j=0;
    while (tree[i][j].size()>0){
      sort(tree[i][j].begin(),tree[i][j].end());
      j++;
    }
  }
  int M;
  cin>>M;
  while (M--){
    int P,V;
    cin>>V>>P;
    int node=findanc(P,V);
    int d=depth[V];
    int l=lower_bound(tree[treenum[node]][d].begin(),tree[treenum[node]][d].end(),num[node])-tree[treenum[node]][d].begin();
    int r=upper_bound(tree[treenum[node]][d].begin(),tree[treenum[node]][d].end(),num[node]+size[node])-tree[treenum[node]][d].begin();
    if (r>l)
      cout<<r-l-1<<' ';
    else
      cout<<r-l<<' ';
  }
  cout<<endl;
  return 0;
}
    
    
