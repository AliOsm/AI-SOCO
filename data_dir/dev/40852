#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;
const int maxn = 1e5 + 2;
const ll infy = 1e14;
ll cost[maxn][3], dp[maxn][3][3];
vector<int> adjlist[maxn];
int n, root, col[maxn];


void dfs2(int cur, int par, int x, int y) {
	col[cur] = x;
	for (auto u : adjlist[cur]) {
		if (u == par)
			continue;
		dfs2(u, cur, y, 3 - x - y);
	}
}
void dfs(int cur, int par) {
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			dp[cur][i][j] = infy;
		}
	}
	if (cur != root && adjlist[cur].size() == 1) {
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				if (i != j)
					dp[cur][i][j] = cost[cur][i];
			}
		}
		return;
	}
	for (auto u : adjlist[cur]) {
		if (u == par)
			continue;
		dfs(u, cur);
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				if (i != j) {
					dp[cur][i][j] = min(dp[cur][i][j], cost[cur][i] + dp[u][j][3 - i - j]);
				}
			}
		}
	}
}
int main()
{
	fastread;
	cin >> n;
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < n; j++) {
			cin >> cost[j][i];
		}
	}
	for (int i = 1; i < n; i++) {
		int u, v;
		cin >> u >> v;
		u--;
		v--;
		adjlist[u].pb(v);
		adjlist[v].pb(u);
		if (adjlist[u].size() > 2 || adjlist[v].size() > 2) {
			cout << -1;
			return 0;
		}
	}
	while (adjlist[root].size() != 1)
		root++;
	dfs(root, -1);
	ll ans = infy;
	int rootx, rooty;
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			if (i != j && dp[root][i][j] < ans) {
				ans = dp[root][i][j];
				rootx = i;
				rooty = j;
			}
		}
	}
	dfs2(root, -1, rootx, rooty);
	cout << ans << '\n';
	for (int i = 0; i < n; i++)
		cout << col[i] + 1 << " ";
	return 0;
}