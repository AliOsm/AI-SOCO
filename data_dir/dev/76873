#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define MAX 200005

struct EDGE{
    ll dest; ll cost;
    EDGE(ll b,ll c){dest=b;cost=c;}
};

struct NODE{
    ll ID; ll Dist;
    NODE(ll u,ll d){ID=u;Dist=d;}
    bool operator <(const NODE& other) const{
        return Dist>other.Dist;
    }
};

vector<EDGE>adj[MAX];
priority_queue<NODE>pq;
ll dist[MAX];
ll A[MAX];
ll n;

void djkstra(){
    for(ll i=1;i<=n;i++) {dist[i]=A[i]; pq.push(NODE(i,dist[i]));}

    while(!pq.empty()){
        NODE now=pq.top();
        ll v=now.ID;
        pq.pop();
        if(dist[v]<now.Dist) continue;

        for(ll i=0;i<adj[v].size();i++){
            EDGE w=adj[v][i];
            if(dist[w.dest]>dist[v]+2*w.cost){
                dist[w.dest]=dist[v]+2*w.cost;
                pq.push(NODE(w.dest,dist[w.dest]));
            }
        }
    }
}

int main(){
    ll m;
    scanf("%I64d %I64d",&n,&m);

    for(ll i=1;i<=m;i++){
        ll u,v;
        ll c;
        scanf("%I64d %I64d %I64d",&u,&v,&c);
        adj[u].push_back(EDGE(v,c));
        adj[v].push_back(EDGE(u,c));
    }

    for(ll i=1;i<=n;i++) scanf("%I64d",&A[i]);

    djkstra();
    for(ll i=1;i<=n;i++) printf("%I64d ",dist[i]);
}
