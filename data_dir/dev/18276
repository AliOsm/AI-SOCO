#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <bitset>
#include <random>
#include <cassert>

using std::ios_base;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::fixed;

using std::vector;
using std::string;
using std::stack;
using std::queue;
using std::deque;
using std::map;
using std::set;
using std::unordered_map;
using std::unordered_set;
using std::bitset;

using std::tuple;
using std::make_tuple;
using std::pair;
using std::make_pair;

using std::sort;
using std::reverse;
using std::nth_element;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define sqr(x) ((x) * (x))

#define forn(i, n) for (int i = 0; i < (n); i++)
#define fornr(i, n) for (int i = (n) - 1; i >= 0; i--)
#define forab(i, a, b) for (int i = (a); i < (b); i++)

const int N = 1e5+5;
const int M = 1e9+9;

int n, m;
int p[N];

int getp(int v) {
    return p[v] = p[v] == v ? v : getp(p[v]);
}

bool add(int v, int u) {
    v = getp(v), u = getp(u);
    if (v == u)
        return false;
    p[v] = u;
    return true;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    int ans = 1;

    cin >> n >> m;
    for (int i = 0; i < n; ++i)
        p[i] = i;

    for (int i = 0; i < m; ++i) {
        int v, u;
        cin >> v >> u;
        if (!add(--v, --u))
            ans = (ans * 2) % M;
        cout << ans - 1 << '\n';
    }

#ifdef LOCAL
    cerr << "\n== " << 1.0 * clock() / CLOCKS_PER_SEC << " sec.\n";
#endif
    return 0;
}
