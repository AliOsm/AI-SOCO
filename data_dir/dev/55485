#define _CRT_SECURE_NO_DEPRECATE
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <cmath>
#ifndef __GNUC__
#include <intrin.h>
#endif // !__GNUC__
#include <random>
#include <vector>
#include <cstdio>
#include <string>
#include <cstdlib>
#include <numeric>
#include <cstring>
#include <complex>
#include <cassert>
#include <iterator>
#include <iostream>
#include <algorithm>
#include <functional>

int bsf(int x) {
#ifdef __GNUC__
    return __builtin_ctz(x);
#else
    unsigned long i;
    _BitScanForward(&i, x);
    return i;
#endif
}
int bsr(int x) {
#ifdef __GNUC__
    return 31 - __builtin_clz(x);
#else
    unsigned long i;
    _BitScanReverse(&i, x);
    return i;
#endif
}

using namespace std;
typedef long long int64;
const double pi = 3.14159265358979323846;
const int64 inf = (int64)2e+16 + 2;
const int mod = (int)1e+9 + 7;
const double eps = 1e-8;
const int N = 400001;

int n, m, k;
int64 w[N];
int64 s[N][20];
int par[N][20];

void solve()
{
    cin >> n;
    int cur = 1;
    int ans = 0;
    while (n--) {
        int t, p;
        int64 q;
        cin >> t >> p >> q;
        p ^= ans;
        q ^= ans;
        if (t == 1) {
            w[++cur] = q;
            if (w[p] >= w[cur]) {
                par[cur][0] = p;
                s[cur][0] = w[p];
            }
            else {
                for (int i = 19; i >= 0; --i) {
                    if (par[p][i] && w[par[p][i]] < w[cur])
                        p = par[p][i];
                }
                p = par[p][0];
                par[cur][0] = p;
                if (!p)
                    s[cur][0] = inf;
                else
                    s[cur][0] = w[p];
            }
            for (int i = 1; i < 20; ++i) {
                par[cur][i] = par[par[cur][i - 1]][i - 1];
                if (!par[cur][i])
                    s[cur][i] = inf;
                else
                    s[cur][i] = s[cur][i - 1] + s[par[cur][i - 1]][i - 1];
            }
        }
        else {
            ans = 0;
            if (w[p] <= q) {
                ++ans;
                q -= w[p];
            }
            for (int i = 19; i >= 0 && p != 1; --i) {
                if (s[p][i] <= q) {
                    ans += 1 << i;
                    q -= s[p][i];
                    p = par[p][i];
                }
            }
            cout << ans << '\n';
        }
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    int test = 1;
    //cin >> test;
    for (; test; --test)
        solve();
    return 0;
}