#include <bits/stdc++.h>
using namespace std;

int n, m;
long long a[200055];

struct edge {int v; int u; long long cost;};

vector<edge> es;

typedef pair<long long, int> P;

#define ft first
#define sd second

int par[200055];

int fin(int x) {
	if (par[x] == x) return x;
	return par[x] = fin(par[x]);
}
int main() {
	cin >> n >> m;
	
	for (int i = 0; i < n; i++) {
		scanf("%lld", &a[i]);
	}
	
	for (int i = 0; i < m; i++) {
		int x, y;
		long long z;
		scanf("%d %d %lld", &x, &y, &z);
		x--, y--;
		
		es.push_back((edge){x, y, z});
	}
	
	sort(es.begin(), es.end(), [&] (edge u, edge v) {
		return u.cost < v.cost;
	});
	
	set<P> s;
	
	for (int i = 0; i < n; i++) s.insert(P(a[i], i));
	
	for (int i = 0; i < n; i++) {
		par[i] = i;
	}
	
	long long res = 0;
	
	for (auto e : es) {
		while ((int)s.size() > 1 && s.begin()->ft + (++s.begin())->ft <= e.cost) {
			int v = s.begin()->sd;
			s.erase(s.begin());
			int u = s.begin()->sd;
			s.erase(s.begin());
			
			par[u] = v;
			s.insert(P(a[v], v));
			
			res += a[v] + a[u];
		}
		
		int x = fin(e.v);
		int y = fin(e.u);
		
		if (x == y) continue;
		
		res += e.cost;
		
		if (a[x] < a[y]) {
			par[y] = x;
			s.erase(P(a[y], y));
		} else {
			par[x] = y;
			s.erase(P(a[x], x));
		}
	}
	
	while ((int)s.size() > 1) {
			int v = s.begin()->sd;
			s.erase(s.begin());
			int u = s.begin()->sd;
			s.erase(s.begin());
			
			par[u] = v;
			s.insert(P(a[v], v));
			
			res += a[v] + a[u];
		}
	
	printf("%lld\n", res);
	
	return 0;
}
