#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <cstdio>
#include <map>
#include <unordered_map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <unordered_set>
#include <stack> 
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
#define sz(a) (int)a.size()
#define pb push_back
const int MAXN = 2 * 1000 * 100 + 10;
const double EPS = 1e-9;
typedef long long LL;
const LL MOD = 1000 * 1000 * 1000 + 7;

int main(int argc, char* argv[]) {

#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("data.in", "r", stdin); freopen("data.out", "w", stdout);
#endif
	char tc[200005], pc[200005];
	string t, p;
	scanf("%s", &tc);
	scanf("%s", &pc);
	t = string(tc);
	p = string(pc);

	vector<int> a(t.size());
	forn(i, 0, sz(t))scanf("%d", &a[i]);

	string in_t = t;

	int l = 0, r = sz(t) - 1;
	while (l < r) {
		int tm = (l + r) / 2;
		tm++;

		for (int i = 0; i < tm; ++i) {
			t[a[i] - 1] = '0';
		}

		int pt_p = 0;
		for (int i = 0; i < t.size(); ++i) {
			if (t[i] == '0') continue;
			if (pt_p == p.size()) break;
			if (t[i] == p[pt_p]) {
				pt_p++;
			}
		}

		for (int i = 0; i < tm; ++i) {
			t[a[i] - 1] = in_t[a[i]-1];
		}

		if (pt_p == p.size()) {
			l = tm;
		}
		else {
			r = tm - 1;
		}
	}

	cout << l;

	return 0;
}