// gskhirtladze

#include <iostream>
#include <stdio.h>
#include <math.h>
#include <algorithm>
#include <vector>
#include <map>
#include <queue>
#include <string>

#define fi first
#define se second
#define pb push_back
#define mk make_pair
#define Pii pair < int , int >
#define tree int t,int l,int r
#define left 2*t,l,(l+r)/2
#define right 2*t+1,(l+r)/2+1,r
#define get(x) scanf("%d",&x)
#define LL long long
#define INF 1000000000
#define eps 0.00000001
#define P7 1000000007
#define P9 1000000009
#define N3 2555
#define N5 262145
#define N6 1048577
#define SS system("pause")

using namespace std;

LL gcd(LL A,LL B) {
    return A>B?gcd(B,A):A?gcd(B%A,A):B; }

LL lcm(LL A,LL B) {
    return A/gcd(A,B)*B; }

LL pow(LL A,LL B,LL P) {
   if (!B) return 1%P;
   LL h=pow(A,B/2,P); h*=h;
   h%=P; if (B%2) h*=A; return h%P;
}

Pii P[N5];
int p[N5];
vector < int > ans1,ans2,ans3;
string s,q,s1,s2;
vector < int > g[N5],c[N5];
int lp[N6+2];
vector < int > pr;
void get_pr(int N) {
 for (int i=2;i<=N;i++)
  {
   if (lp[i] == 0)
    {
     pr.pb(i);
     lp[i]=i;
    }
   for (int j=0;j<pr.size()&& pr[j]<=lp[i] && pr[j]*i<=N;j++)
     lp[pr[j]*i]=pr[j];
  }
}

int tst;
void get_ready() {
     //freopen(".in","r",stdin);
     //freopen(".out","w",stdout);
     tst=1; //get(tst);
     get_pr(N6);
 }

int a[N5],b[N5];
char D[N3][N3];
int n,m,i,j,k,l,r,x,y;
LL ans,res,cur;

main()
{get_ready();
 while (tst--){

 cin>>n;
lp[1]=1;
 for (i=1;i<=n;i++)
  if (lp[i] != i && (lp[n-i] != n-i))
  { cout<<i<<" "<<n-i<<endl; return 0; }


}}
