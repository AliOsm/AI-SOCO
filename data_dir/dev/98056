#include <bits/stdc++.h>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d %d", &a, &b)
#define sc3(a, b, c) scanf("%d %d %d", &a, &b, &c)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define db(x) cerr << #x << " == " << x << endl;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<ll> vi;
typedef vector<vi> vvi;
typedef vector<ii> vii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9 + 9;
ll powe(ll b, ll e){
	if(e==0) return 1;
	ll x = powe(b, e/2);
	if(e&1){
		return (((x*x)%MOD)*b)%MOD;
	}
	return (x*x)%MOD;
}
ll calc(ll k, ll A, ll B, ll n){
	ll resp = 0;
	for(int i=0;i<k;i++){
		char c;
		cin>>c;
		ll si = 1;
		if(c=='-') si = -1;
		ll a = powe(A, n-i);
		ll b = powe(B, i);
		resp = (resp + (a*b*si)%MOD)%MOD;
	}
	return resp;
}
vvi matmul(vvi &m1, vvi &m2)
{
	vvi ans;
	ans.resize(m1.size(), vi(m2.size(), 0));
	int n = m1.size();
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			for (int k = 0; k < n; k++) {
				ans[i][j] += m1[i][k] * m2[k][j];
				ans[i][j] %= MOD;
			}
	return ans;
}
vvi matpow(vvi &m1, ll p)
{
	vvi ans;
	ans.resize(m1.size(), vi(m1.size(), 0));
	int n = m1.size();
	for (int i = 0; i < n; i++) ans[i][i] = 1;
	while (p) {
		if (p & 1) ans = matmul(ans, m1);
		m1 = matmul(m1, m1);
		p >>= 1ll;
	}
	return ans;
}
// VETOR TEM N LINHAS E A MATRIZ E QUADRADA
vi mulvet(vvi &m1, vi &vet)
{
	vi ans;
	ans.resize(vet.size(), 0);
	int n = vet.size();
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++) {
			ans[i] += (m1[i][j] * vet[j]);
			ans[i] %= MOD;
		}
	return ans;
}

int main() {
	ll n, a, b, k;
	cin>>n>>a>>b>>k;
	ll x = powe(b, k);
	ll y = powe(powe(a, k), MOD-2);
	vector< vector<ll> > m1(2, vector<ll>(2, 0));
	m1[0][0] = (x*y)%MOD;
	m1[0][1] = 0;
	m1[1][0] = 1;
	m1[1][1] = 1;
	vector<ll> vet(2, 0);
	vet[0] = calc(k, a, b, n);
	vet[1] = 0;
	ll poe = (n+1)/k;
	m1 = matpow(m1, poe);
	vet = mulvet(m1, vet);
	vet[1] = (vet[1]%MOD + MOD)%MOD;
	cout<<vet[1]<<endl;
	return 0; 
}
