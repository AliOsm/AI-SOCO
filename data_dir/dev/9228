#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::greater<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef unsigned long long uint64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 300'000;
const int LOGN = 19;

int n, m, k;
int d[31][31][51];

int f(int a, int b, int c) {
  if (d[a][b][c]) {
    return d[a][b][c];
  }
  if (a * b < c) {
    return d[a][b][c] = inf;
  }
  if (!c || a * b == c) {
    return 0;
  }
  if (a == 1 || b == 1) {
    return 1;
  }
  int x = inf;
  for (int l = 1; l < b; ++l) {
    for (int i = 0; i <= c; ++i) {
      x = min(x, f(a, l, i) + f(a, b - l, c - i) + a * a);
    }
  }
  for (int l = 1; l < a; ++l) {
    for (int i = 0; i <= c; ++i) {
      x = min(x, f(l, b, i) + f(a - l, b, c - i) + b * b);
    }
  }
  return d[a][b][c] = x;
}

void solve(int) {
  int a, b, c;
  cin >> a >> b >> c;
  cout << f(a, b, c) << '\n';
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  precalc();
  int test = 1;
  cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
