#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
#define debug(_x)                     std::cerr << (#_x) << " = " << (_x) << '\n' << std::flush;
#else
#define debug(_x)                     {}
#endif
#define endl "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = long long;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
ll arr[501];
ll brr[501];
int dp[501][501];
int prnt[501];
vector<ll> ans;

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int n;
    cin >> n;
    loop(n) {
        cin >> arr[i + 1];
    }
    int m;
    cin >> m;
    loop(m) {
        cin >> brr[i + 1];
    }
    for (int i = 1; i <= n; ++i) {
        for (int j = 1, best = 0, pos = 0; j <= m; ++j) {
            dp[i][j] = dp[i - 1][j];
            if (arr[i] == brr[j]) {
                if (best + 1 > dp[i][j]) {
                    dp[i][j] = best + 1;
                    prnt[j] = pos;
                }
            } else if (arr[i] > brr[j]) {
                if (dp[i - 1][j] > best) {
                    best = dp[i - 1][j];
                    pos = j;
                }
            }
        }
    }
    int j = distance(dp[n], max_element(dp[n], dp[n] + m + 1));
    while (j > 0) {
        ans.push_back(brr[j]);
        j = prnt[j];
    }
    reverse(all(ans));
    assert(sz(ans) == *max_element(dp[n], dp[n] + m + 1));
    cout << sz(ans) << endl;
    outarr(all(ans));

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}
