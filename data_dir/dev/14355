#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<queue>
#include<string>
#include<cstring>
#include<map>
#include<cmath>
#include<bitset>
#include<set>
#include<cstdlib>
#include<complex>
#include<list>
#include<sstream>
#include<cassert>
#include<iomanip>

using namespace std;

#define double long double

typedef pair<int,int> ii;
typedef pair<int,long long> il;
typedef pair<long long,long long> ll;
typedef pair<ll,int> lli;
typedef pair<long long,int> li;
typedef pair<double,double> dd;
typedef pair<ii,int> iii;
typedef pair<double,int> di;
typedef pair<int,ii> iii2;
typedef pair<ii,ii> iiii;
long long mod = 1000000007LL;
long long large = 2000000000000000000LL;

long long mul(long long x,long long y){
	return (x*y)%mod;
}
//|x|+|y| is the minimum value
void gcdE(long long a,long long b,long long& d,long long& x,long long& y){
	if(!b){
		d=a;
		x=1;
		y=0;
	}else{
		gcdE(b,a%b,d,y,x);
		y-=x*(a/b);
	}
}

//to calculate (a/b) mod n, change it to ((a mod n)*inv(b,n)) mod n
long long inv(long long a,long long n){
	long long d,x,y;
	gcdE(a,n,d,x,y);
	return d==1?(x+n)%n:-1;
}

vector<vector<long long> > dp;

long long pa,pb;
int n;


long long f(int x,int y){
	if(x<0||y<0) return 0LL;
	if(x==0LL&&y>0LL) return 0LL;
	if(dp[x][y]!=-1) return dp[x][y];
	dp[x][y] = 0;
	dp[x][y]+=mul(pa,f(x-1,y));
	dp[x][y]+=mul(pb,f(x,y-x));
	dp[x][y]%=mod;
	return dp[x][y];

}

long long sq(long long x){
	return (x*x)%mod;
}
int main(){
	cin>>n>>pa>>pb;
	long long ta,tb;
	ta = mul(pa,inv(pa+pb,mod));
	tb = mul(pb,inv(pa+pb,mod));
	pa = ta;
	pb = tb;
	dp.assign(2*n+10,vector<long long>(n,-1));
	dp[0][0] = inv((1+mod-pb),mod);
	long long ans = 0LL;
	long long temp = 0LL;
	int s;
	for(s = n;s<2*n;s++){
		temp = 0LL;
		for(int i=0;i<n;i++) temp+=f(s-i,i);
		temp%=mod;
		ans+=mul(temp,mul(s,pb));
		//cout<<ans<<endl;
	}
	s--;
	ans+=mul(mul(temp,s-1),mul(mul(pa,pb),inv((1+mod-pa)%mod,mod)));
	ans+=mul(mul(temp,pb),mul((pa*2+mod-sq(pa))%mod,inv(sq(1+mod-pa),mod)));
	ans%=mod;
	cout<<ans<<endl;


    return 0;

}
