#include <algorithm>
#include <vector>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <cstring>
#define pb push_back
#define mp make_pair
#define pp pair<int, int>
#define ppp pair<pp, int>
#define pp4 pair<pp, pp>
#define pp3 pair<ll, pair<int, int> > 
#define fi first
#define se second
#define N  400020
#define mod 1000000007
#define inf 2000000001
#define esp 1e-9
#define BLOCK 333
#define BITNUM 555
#define BASE 311097
typedef long long ll;
const ll oo = (ll)1e18 + 1;
using namespace std;
ll zero_x, zero_y;
ll ax, ay, bx, by;
ll x, y, t;
vector<pair<ll, ll> > nodes;

int main() {
    ios::sync_with_stdio(false);
    // freopen("in.in", "r", stdin);
    cin >> zero_x >> zero_y >> ax >> ay >> bx >> by;
    cin >> x >> y >> t;

    ll maxT = (ll)2e16;

    for (int i = 0; ; i++) {
        nodes.pb(mp(zero_x, zero_y));

        if (zero_x > (maxT - bx) / ax) break;
        if (zero_y > (maxT - by) / ay) break;

        zero_x = zero_x * ax + bx;
        zero_y = zero_y * ay + by;
    }

    // for (int i = 0; i < nodes.size(); i++)
    //     cout << nodes[i].fi << " " << nodes[i].se << "\n";

    int collected = 0;
    for (int i = 0; i < nodes.size(); i++) {
        ll remain_time = t;
        remain_time -= (abs(nodes[i].fi - x) + abs(nodes[i].se - y));
        
        if (remain_time < 0)
            continue;

        int cur_collect = 1;
        ll cur_x = nodes[i].fi;
        ll cur_y = nodes[i].se;
        
        for (int j = i - 1; j >= 0; j--) {
            ll diff = abs(nodes[j].fi - cur_x) + abs(nodes[j].se - cur_y);
            if (remain_time >= diff) {
                remain_time -= diff;
                cur_x = nodes[j].fi;
                cur_y = nodes[j].se;
                cur_collect++;
            } else
                break;
        }

        for (int j = i + 1; j < nodes.size(); j++) {
            ll diff = abs(nodes[j].fi - cur_x) + abs(nodes[j].se - cur_y);
            if (remain_time >= diff) {
                remain_time -= diff;
                cur_x = nodes[j].fi;
                cur_y = nodes[j].se;
                cur_collect++;
            } else
                break;
        }
        // cout << "collect " << i << ": " << cur_collect << "\n";

        collected = max(collected, cur_collect);
    }
    cout << collected << "\n";
    return 0;
}
