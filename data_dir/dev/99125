/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
#define mod 1000000007
#define OS //single input use oeis
lli INF=1e17;
lli eps=1e-8;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,x,c,m;
const double pi=3.14159265358979323846;
lli add(lli a, lli b) {
 	lli res = a + b;
 
 	while (res >= mod) res -= mod;
 
 	while (res < 0) res += mod;
 
 	return res;
}
// Thi
//matrix exponentiation is associative and distributive
lli ans[2000005];
lli a[2000005];

void build(lli v,lli tl,lli tr)
{
    if(tl==tr)
    {
        ans[v]=a[tl];
    }
    else
    {
        lli tm=(tl+tr)/2ll;
        build(2*v,tl,tm);
        build(2*v+1,tm+1,tr);
        ans[v]=__gcd(ans[2*v],ans[2*v+1]);
    }
}

lli get(lli v,lli tl,lli tr,lli l,lli r)
{
    if(l>r)
    return 0;
    if(tl==l&&tr==r)
    {
        return ans[v];
    }
    else
    {
        lli tm=(tl+tr)/2ll;
        return __gcd(get(2*v,tl,tm,l,min(r,tm)),get(2*v+1,tm+1,tr,max(l,tm+1),r));
    }
}

lli ggt(lli l,lli r)
{
    return get(1,1,n,l,r);
}
map<ll,lli> ml;
map<lli,vector<lli>> mm;
int main()
{
 IO;
 OS;
 lli t;
 cin>>t;
 for(int i=1;i<=t;i++)
 {
     cin>>n>>m>>k;
     lli a[n+2];
     mem1(a,1e15);
     a[0]=0;
     for(int j=1;j<=n;j++)
     cin>>a[j];
     k=min(k,m-1);
     lli mx=0;
     for(int j=0;j<=k;j++)
     {
        lli mi=1e15;
        for(int p=0;p<m-k;p++)
        {
            
                lli finalst=j+p;
                lli finalend=n-(m-1-(j+p));
                // if(finalst==0)
                // finalst=1;
                mi=min(mi,max(a[finalst+1],a[finalend]));
                // cout<<j<<" "<<p<<" "<<finalst<<" "<<finalend<<" "<<mi<<"\n";
            
        }
        // if(mi!=1e15)
        mx=max(mx,mi);
     }
    
     cout<<mx<<"\n";
    //  mem1(a,0);
 }
//  cout<<ans[5];
}