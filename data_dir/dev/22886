#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define endl '\n'
#define F first
#define S second
#define mp make_pair
#define ll long long
#define pb push_back
#define pii pair < int, int >
#define type(x) __typeof(x.begin())
#define foreach(i, x) for(type(x) i = x.begin(); i != x.end(); i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define sol (root << 1)
#define sag (sol | 1)
#define orta ((bas + son) >> 1)
#define bit __builtin_popcount
#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#define dbg(x) cerr << (#x) << " --> " << (x) << endl
#define TIME cerr << "Tooks " << (double) clock() / CLOCKS_PER_SEC << " seconds." << endl
#define time emit

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 5e5 + 5;

int n, m, c, x, y, s[N], f[N], time;
vector < int > v[N];

class segment_tree1{

	public:

	int kd[4 * N];

	int update(int root, int bas, int son, int x, int time) {

		if(son < x or x < bas) return kd[root];

		if(x <= bas and son <= x) return kd[root] = time;
		
		return kd[root] = max(update(sol, bas, orta, x, time), update(sag, orta + 1, son, x, time));

	}

	int query(int root, int bas, int son, int x, int y) {

		if(son < x or y < bas) return -inf;
		
		if(x <= bas and son <= y) return kd[root];

		return max(query(sol, bas, orta, x, y), query(sag, orta + 1, son, x, y));
	
	}

};

class segment_tree2{

	public:

	int kd[4 * N];

	void update(int root, int bas, int son, int x, int y, int time) {

		if(son < x or y < bas) return;

		if(x <= bas and son <= y) { kd[root] = time; return; }

		update(sol, bas, orta, x, y, time);
		update(sag, orta + 1, son, x, y, time);

	}

	int query(int root, int bas, int son, int x) {

		if(son < x or x < bas) return 0;

		if(x <= bas and son <= x) return kd[root];

		kd[sol] = max(kd[sol], kd[root]);
		kd[sag] = max(kd[sag], kd[root]);

		return query(sol, bas, orta, x) + query(sag, orta + 1, son, x);

	}

};

void dfs(int root , int node) {

	s[node] = ++time;

	foreach(it, v[node])
		if(*it != root)
			dfs(node, *it);

	f[node] = time;

}

segment_tree1 tree1;
segment_tree2 tree2;

int main () {
    
    ios :: sync_with_stdio(0);
    
    cin >> n;

	FOR(i, 1, n - 1)
	{
		cin >> x >> y;

		v[x].pb(y);
		v[y].pb(x);
	}

	dfs(-1, 1);

	cin >> m;

	time = 0;

	FOR(i, 1, m)
	{
		cin >> c >> x;
		
		if(c == 1)
			tree2.update(1, 1, n, s[x], f[x], ++time);
		else if(c == 2)
			tree1.update(1, 1, n, s[x], ++time);
		else
			cout << (tree1.query(1, 1, n, s[x], f[x]) < tree2.query(1, 1, n, s[x])) << endl;
	}
    
    TIME;
    
    return 0;
    
}
