//gskhirtladze

#include <iostream>
#include <stdio.h>

#define tree int t,int l,int r
#define left 2*t,l,(l+r)/2
#define right 2*t+1,(l+r)/2+1,r

using namespace std;

struct name
 { int a,b,c; };

name zero,tr[2097152];
string s;

name uni(name A,name B)
 {
  name C;
  int t=min(A.b,B.c);
  C.a=A.a+B.a+2*t;
  C.b=A.b+B.b-t;
  C.c=A.c+B.c-t;
  return C;
 }

void build(tree)
 {
  if (l == r)
   {
    tr[t].a=0;
    if (s[l] == '(') tr[t].b=1; else
                     tr[t].c=1;
    return;
   }
  build(left);
  build(right);
  tr[t]=uni(tr[2*t],tr[2*t+1]);
 }

name getans(tree,int L,int R)
 {
  if (R < l || r < L) return zero;
  if (L <= l &&  r <= R) return tr[t];
  return uni(getans(left,L,R),getans(right,L,R));
 }

int l,r,m;

main()
 {
  cin>>s;
  build(1,0,s.size()-1);
  cin>>m;
  while (m--)
   {
    cin>>l>>r; l--; r--;
    cout<<getans(1,0,s.size()-1,l,r).a<<endl;
   }

 }
