//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")
  
#include <iostream>
#include <stdlib.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <random>
#include <assert.h>
#include <memory.h>
#include <time.h>
#include <bitset>
  
#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = (l); i < (r); i++)
#define repb(i, r, l) for (int i = (r); i > (l); i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)
#define rank qwertyuio
#define next dfghjk
#define prev fhsgfhjf
#define plus fsghsf
#define minus ytryr
  
using namespace std;
  
inline bool setmin(int &x, int y) { return (y < x) ? x = y, 1 : 0; }
inline bool setmax(int &x, int y) { return (y > x) ? x = y, 1 : 0; }
inline bool setmin(ll &x, ll y) { return (y < x) ? x = y, 1 : 0; }
inline bool setmax(ll &x, ll y) { return (y > x) ? x = y, 1 : 0; }
  
const int N = 200000 + 239;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int P1 = 31;
const int P2 = 57;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const int MOD2 = 998244353;
const ld eps = 1e-12;
const double pi = atan2(0, -1);
const int ABC = 26;

const int B = 500;

int a[N + 1], a1[N + 1], pr[N];

void sort_fast(int n) {
    int V = (1 << 16) - 1;
    fill(pr, pr + (1 << 16), 0);
    rep(i, 0, n) {
        pr[(a[i] & V) + 1]++;
    }
    rep(i, 1, (1 << 16)) {
        pr[i] += pr[i - 1];
    }
    rep(i, 0, n) {
        a1[pr[a[i] & V]++] = a[i];
    }

    fill(pr, pr + (1 << 16), 0);
    rep(i, 0, n) {
        pr[(a1[i] >> 16) + 1]++;
    }
    rep(i, 1, (1 << 16)) {
        pr[i] += pr[i - 1];
    }
    rep(i, 0, n) {
        a[pr[a1[i] >> 16]++] = a1[i];
    }
}

int pref[N + 1];
vector<int> pos;

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    //ll TL = 10.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();

    string s;
    cin >> s;
    int n = sz(s);
    pref[0] = 0;
    rep(i, 0, n) {
        pref[i + 1] = pref[i] + (s[i] == '1');
    }
    rep(i, 0, n) {
        if (s[i] == '1') {
            pos.push_back(i);
        }
    }
    ll ans = 0;
    int p = 0;
    rep(i, 0, n) {
        while (p < sz(pos) && pos[p] < i) {
            p++;
        }
        int max_cnt = (n - i) / (B + 1);
        rep(c, 1, max_cnt + 1) {
            if (p + c - 1 >= sz(pos)) {
                break;
            }
            int L = pos[p + c - 1] - i + 1;
            int R = (p + c < sz(pos) ? pos[p + c] - i : n - i);
            L = max(L, c * (B + 1));
            if (L <= R) {
                ans += (R / c) - ((L - 1) / c);
            }
        }
    }
    rep(k, 1, B + 1) {
        int mv = 0;
        rep(i, 0, n + 1) {
            a[i] = pref[i] * k - i;
            setmin(mv, a[i]);
        }
        rep(i, 0, n + 1) {
            a[i] -= mv;
        }
        sort_fast(n + 1);
        int cur = 0;
        rep(i, 0, n + 1) {
            cur++;
            if (i == n || a[i] != a[i + 1]) {
                ans += 1LL * cur * (cur - 1) / 2;
                cur = 0;
            }
        }
    }
    cout << ans << "\n";
    return 0;
}