#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cassert>
#include <ctime>
#include <deque>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)
#define mp make_pair
#define pb push_back
#define fs first
#define sc second
#define pi 3.1415926535897932384626433832795l

typedef long long ll;
typedef long double ld;

const int N = 100100;
int p[N];
int maxt[20][N];
int tw[20][N];
vector <int> ord_t;
vector <int> who;
vector <pair<int, int> > ord;
const int inf = 1e9;
vector <int> a[N];
bool use[N];
int h[N];

void dfs (int v, int h1) {
    use[v] = 1;
    h[v] = h1;
    forn(i, a[v].size()) {
        int to = a[v][i];
        if (use[to])
            continue;
        dfs(to, h1 + 1);
    }
}

int lift (int v, int s) {
    forn(i, 20) {
        if (s & (1 << i)) {
            v = tw[i][v];
        }
    }
    return v;
}               

inline int get_ans (int u, int v) {
    if (h[u] > h[v])
        return inf;              
    if (lift(v, h[v] - h[u]) != u)
        return inf;
    int s = h[v] - h[u], maxx = -inf;
    ford(i, 20) {
        if (s & (1 << i)) {
            maxx = max(maxx, maxt[i][v]);        
            v = tw[i][v];
        }
    }
    return maxx;
}

int main() {
#ifdef SG
    freopen ("input.txt", "r", stdin);
//  freopen ("output.txt", "w", stdout);
#endif
    int n, m;
    cin >> n >> m;
    forn(i, 20) {
        forn(j, n) {
            maxt[i][j] = -inf;
        }
    }
    memset(p, -1, sizeof(p));
    forn(i, m) {
        int tp;
        cin >> tp;
        if (tp == 1) {
            int x, y;
            cin >> x >> y;
            x--, y--;
            p[x] = y;
            maxt[0][x] = i;    
        } else if (tp == 2) {
            int x;
            cin >> x;
            x--;
            who.pb(x);
            ord_t.pb(i);        
        } else {
            int x, num;
            cin >> x >> num;
            x--, num--;
            ord.pb(mp(x, num));
        }
    } 
    forn(i, n)
        if (p[i] >= 0)
            a[p[i]].pb(i);

    forn(i, n) 
        tw[0][i] = p[i];
    for (int i = 1; i < 20; ++i)
        forn(j, n) {
            tw[i][j] = tw[i - 1][tw[i - 1][j]];
            maxt[i][j] = max(maxt[i - 1][j], maxt[i - 1][tw[i - 1][j]]);
        }
    forn(i, n)
        if (p[i] == -1)
            dfs(i, 0);
    forn(i, ord.size()) {
        int u = ord[i].fs, v = who[ord[i].sc];
        //cerr << u << ' ' << v << ' ' << get_ans(u, v) << endl; 
        if (get_ans(u, v) < ord_t[ord[i].sc]) {
            puts("YES");
        } else {
            puts("NO");
        }
    }

    return 0;
}
