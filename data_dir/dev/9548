#include <bits/stdc++.h>

using namespace std;

#define trace(x) cerr << #x << ": " << x << " ";
#define tracen(x) cerr << #x << ": " << x << "\n";

typedef long long lolo;
typedef unsigned long long ulolo;
typedef pair<int, int> pii;
#define fi first
#define se second

const int INF = 1e9 + 23;
const int MOD = 1e9 + 7;
const int MAXN = 2e2 + 100;

char arr[MAXN][MAXN];
bool vis[MAXN][MAXN];
int n, m, cnt;

pii checkNeigh(int x, int y) {
  pii ret = {-1, -1};
  for (int i = -1; i <= 1; ++i) {
    for (int j = -1; j <= 1; ++j) {
      if (abs(i + j) != 1) continue;
      int px = x + i, py = y + j;
      if (px < 0 || n <= px 
          || py < 0 || m <= py) continue;
      if (arr[px][py] == '#') {
        return {px, py};
      }
    }
  }
  return ret;
}

void resetVis() {
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      vis[i][j] = false;
    }
  }
}

int dfs(int x, int y) {
  // trace(x); tracen(y);
  int ret = 0;
  vis[x][y] = true;
  for (int i = -1; i <= 1; ++i) {
    for (int j = -1; j <= 1; ++j) {
      if (abs(i + j) != 1) continue;
      int px = x + i, py = y + j;
      if (vis[px][py]) continue;
      if (arr[px][py] == '#') {
        ret += dfs(px, py);
      }
    }
  }
  return ret + 1;
}

int solve() {
  if (cnt <= 2) {
    return -1;
  }
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      if (arr[i][j] == '#') {
        pii ngh = checkNeigh(i, j);
        if (ngh.fi == -1 && ngh.se == -1) {
          return 1;
        }
        resetVis();
        arr[i][j] = '.';
        int cur = dfs(ngh.fi, ngh.se);
        arr[i][j] = '#';
        if (cur < cnt - 1) {
          return 1;
        }
      }
    }
  }
  return 2;
}

int main()
{
  ios_base::sync_with_stdio(0);
  cin >> n >> m;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      cin >> arr[i][j];
      if (arr[i][j] == '#') ++cnt;
    }
  }
  int ans = solve();
  cout << ans << "\n";
  return 0;
}


// g++ -W -Wall -Wextra -pedantic -std=c++0x -o p main.cpp