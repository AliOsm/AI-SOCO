#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
 
#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2
 
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound
 
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;
 
template <class T1, class cmp = less <T1>> using Tree = tree <T1, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2> using um = unordered_map <T1, T2>;
template <class T> using us = unordered_set <T>;
template <class T> using vec = vector <T>;
 
const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int A = 50001;
const int B = 31;
int a, b, n;

int dp[A][B];
int ex[A][B];

void input() {
    cin >> a >> b >> n;
    for(int i = 1; i < A; ++i) {
        ex[i][0] = 1;
        for(int j = 1; j < B; ++j) {
            ex[i][j] = min((ll) inf, (1ll * ex[i][j - 1] * i));
        }
    }
}

int calc(int i, int j) {
    if(i == A && j == 1) {
        return ((n - i) % 2 == 0? 1: 0);
    }
    if(i == 1 && j == B) {
        return 2;
    }
    if(ex[i][j] >= n) {
        return 1;
    }
    if(dp[i][j] != -1) {
        return dp[i][j];
    }
    if(!calc(i + 1, j) || !calc(i, j + 1)) {
        return dp[i][j] = 1;
    } else if(calc(i + 1, j) == 2 || calc(i, j + 1) == 2) {
        return dp[i][j] = 2;
    } else {
        return dp[i][j] = 0;
    }
}

void solve() {
    memset(dp, -1, sizeof dp);
    if(calc(a, b) == 0) {
        cout << "Stas\n";
    } else if(calc(a, b) == 1) {
        cout << "Masha\n";
    } else if(calc(a, b) == 2) {
        cout << "Missing\n";
    }
}

int main() {
    input();
    solve();
}
