#include <bits/stdc++.h>

using namespace std;

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<pii, int> para;
const int inf = 1e9 + 7;
const int maxN = 1e3;

int n, arr[maxN][maxN], m, minim[maxN], arr2[maxN][maxN];
bool used[maxN];
vector<string> answers;
int ans, cnt;


bool solveCols() {
	answers.clear();
	RI(col, m)
		minim[col] = inf;
	RI(row, n)
		RI(col, m)
			minim[col] = min(minim[col], arr[row][col]);
	//RI(col, m) cout<<minim[col]<<endl;
	RI(row, n) {
		RI(col, m) {
			arr[row][col] -= minim[col];
		}
	}
	RI(col, m) {
		REP(i, minim[col])
			answers.pb("col " + to_string(col));
	}

	RI(row, n) {
		int tmp = arr[row][1];
		RI(col, m) {
			if (arr[row][col] != tmp) return false;
		}
		REP(i, tmp) {
			answers.pb("row " + to_string(row));
		}
	}
	return true;
}

bool solveRows() {
	answers.clear();
	//printf("%d\n", answers.size());
	RI(row, n)
		minim[row] = inf;
	RI(row, n)
		RI(col, m)
			minim[row] = min(minim[row], arr[row][col]);
	RI(row, n) {
		RI(col, m) {
			arr[row][col] -= minim[row];
		}
	}
	RI(row, n) {
		REP(i, minim[row])
			answers.pb("row " + to_string(row));
	}
	//printf("%d\n", answers.size());
	RI(col, m) {
		int tmp = arr[1][col];
		RI(row, n) {
			if (arr[row][col] != tmp) return false;
		}
		REP(i, tmp) {
			answers.pb("col " + to_string(col));
		}
	}
	return true;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin>>n>>m;
	RI(i, n) {
		RI(j, m) {
			cin>>arr[i][j];
			arr2[i][j] = arr[i][j];
		}
	}
	int ans = inf;
	vector<string> tmpAns;

	if (solveCols()) {
		//cout<<"Here\n";
		ans = answers.size();
		tmpAns = answers;
	}
	RI(i, n)
		RI(j, m)
			arr[i][j] = arr2[i][j];
	if (solveRows()) {
		if (answers.size() < tmpAns.size()) {
			ans = answers.size();
			tmpAns = answers;
		}
	}

	if (ans == inf) cout<<"-1";
	else {
		cout<<ans<<endl;
		REP(i, ans)
			cout<<tmpAns[i]<<endl;
	}
	return 0;
}
