#include <functional>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <numeric>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cassert>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef double ld;

template <typename T>
T nextInt() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;
}
const int maxN = (int)3e5 + 10;
const int INF = (int)1e9;
const int mod = (int)1e9 + 7;
const ll LLINF = (ll)1e18 + 5;

int main() {

  //  freopen("input.txt", "r", stdin);
   // freopen("output.txt", "w", stdout);

    ios_base::sync_with_stdio(0);
    int n;
    cin >> n;

    multiset <int> s;
    vector < pair <string, int> > result;
    for (int i = 0; i < n; ++i) {
        string op;
        cin >> op;
        if (op == "insert") {
            int x;
            cin >> x;
            s.insert(x);
            result.push_back(make_pair(op, x));
        }
        if (op == "getMin") {
            int x;
            cin >> x;
            while(!s.empty() && *s.begin() < x) {
                result.push_back(make_pair("removeMin", 2e9));
                s.erase(s.begin());
            }
            if (s.empty() || *s.begin() != x) {
                result.push_back(make_pair("insert", x));
                s.insert(x);
            }
            result.push_back(make_pair("getMin", x));
        }
        if (op == "removeMin") {
            if (s.empty()) {
                result.push_back(make_pair("insert", 0));
            } else {
                s.erase(s.begin());
            }
            result.push_back(make_pair(op, 2e9));
        }
    }

    cout << result.size() << '\n';
    for (auto x: result) {
        cout << x.first;
        if (x.second != 2e9) {
            cout << ' ' << x.second;
        }
        cout << '\n';
    }
    return 0;
}
