#include <bits/stdc++.h>

using namespace std;

const int N = 3003;
vector <int> v[N], rngrod, road;
bool vis[N], ret;
int dist[N];

void dfs(int x, int par)
{
    if (ret) return;
    if (vis[x])
    {
        int sz = rngrod.size();
        memset(vis, false, sizeof vis);
        for (int i = sz - 1; i >= 0; i--)
        {
            road.push_back(rngrod[i]);
            vis[rngrod[i]] = true;
            if (rngrod[i] == x) break;
        }
        ret = true;
        return;
    }
    vis[x] = true;
    rngrod.push_back(x);
    int sz = v[x].size();
    for (int i = 0; i < sz; i++)
    {
        if (v[x][i] != par)
        {
            dfs(v[x][i], x);
        }
    }
    rngrod.pop_back();
}

void calc(int x, int par)
{
    if (par == 0)
    {
        dist[x] = 0;
    }
    else
    {
        dist[x] = dist[par] + 1;
    }
    int sz = v[x].size();
    for (int i = 0; i < sz; i++)
    {
        if (v[x][i] != par && !vis[v[x][i]])
        {
            calc(v[x][i], x);
        }
    }
}

int main()
{
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
    {
        int x, y;
        scanf("%d %d", &x, &y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    dfs(1, 0);
    int sz = road.size();
    for (int i = 0; i < sz; i++)
    {
        calc(road[i], 0);
    }
    for (int i = 1; i <= n; i++)
    {
        printf("%d ", dist[i]);
    }
    return 0;
}
