#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <unordered_set>
#include <complex>
#include <cassert>
#include <numeric>
#include <functional>

#define ll long long
#define ld long double
#define ull unsigned ll
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vector<int>>
#define endl '\n'
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const ll  Inf = 1e18;
ll LINF = (ll)2e18;
using namespace std;
ll mod = 1e9 + 7;
ll mod3 = 998244353;
ll mod2 = 1e9 + 123;
#define M_PI       3.14159265358979323846   // pi

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("javacert.in", "r", stdin);
	//freopen("javacert.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0); cout.setf(ios::fixed); cout.precision(20);
	int n;
	cin >> n;
	string s, t;
	cin >> s >> t;
	map<char, vi> pos1, pos2;
	forn(i, 0, n) {
		pos1[s[i]].push_back(i);
	}
	forn(i, 0, n) {
		pos2[t[i]].push_back(i);
	}
	vpii ans;
	forn(i, 0, 26) {
		char c = 'a' + i;
		while (pos1[c].size() > 0 && pos2[c].size() > 0) {
			ans.push_back({ pos1[c].back(), pos2[c].back() });
			pos1[c].pop_back();
			pos2[c].pop_back();
		}
	}
	forn(i, 0, 26) {
		char c = 'a' + i;
		while (pos1[c].size() > 0 && pos2['?'].size() > 0) {
			ans.push_back({ pos1[c].back(), pos2['?'].back() });
			pos1[c].pop_back();
			pos2['?'].pop_back();
		}
	}
	forn(i, 0, 26) {
		char c = 'a' + i;
		while (pos1['?'].size() > 0 && pos2[c].size() > 0) {
			ans.push_back({ pos1['?'].back(), pos2[c].back() });
			pos1['?'].pop_back();
			pos2[c].pop_back();
		}
	}
	while (pos1['?'].size() > 0 && pos2['?'].size() > 0) {
		ans.push_back({ pos1['?'].back(), pos2['?'].back() });
		pos1['?'].pop_back();
		pos2['?'].pop_back();
	}
	cout << ans.size() << endl;
	forn(i, 0, ans.size()) cout << ans[i].first + 1 << " " << ans[i].second + 1<< endl;
	return 0;
}