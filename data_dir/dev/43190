#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 1e5 + 1;
int n, a, b, c, ab, ac, bc, abc;

int d[N];

void sieve() {
    for(int i = 1; i < N; ++i) {
        for(int j = i; j < N; j += i) {
            d[j]++;
        }
    }
}

int count_three(int x) {
    return x + (x - 1) * x + (x - 2) * (x - 1) * x / 6;
}

int count_two(int xy, int z) {
    return (xy * (xy - 1) / 2 + xy) * z;
}

int count_one(int x, int y, int z) {
    return x * y * z;
}

void input() {
    cin >> n;
}

bool ok(int x, int y, int z) {
    return 2 % x == 0 && 4 % y == 0 && 6 % z == 0;
}

void solve() {
    for(int i = 0; i < n; ++i) {
        int A; cin >> A;
        int B; cin >> B;
        int C; cin >> C;
        abc = d[__gcd(__gcd(A, B), C)];
        ab = d[__gcd(A, B)] - abc;
        ac = d[__gcd(A, C)] - abc;
        bc = d[__gcd(B, C)] - abc;
        a = d[A] - ab - ac - abc;
        b = d[B] - ab - bc - abc;
        c = d[C] - ac - bc - abc;
        int res = 0;
        int divs[7] = {a, b, c, ab, ac, bc, abc};
        vec <int> va = {0, 3, 4, 6};
        vec <int> vb = {1, 3, 5, 6};
        vec <int> vc = {2, 4, 5, 6};
        set <array <int, 3>> was;
        for(int x = 0; x < 4; ++x) {
            for(int y = 0; y < 4; ++y) {
                for(int z = 0; z < 4; ++z) {
                    int lst = res;
                    array <int, 3> arr = {va[x], vb[y], vc[z]};
                    sort(all(arr));
                    if(was.count({arr})) {
                        continue;
                    }
                    if(va[x] == vb[y] && va[x] == vc[z]) {
                        res += count_three(divs[va[x]]);
                    } else if(va[x] == vb[y]) {
                        res += count_two(divs[va[x]], divs[vc[z]]);
                    } else if(va[x] == vc[z]) {
                        res += count_two(divs[va[x]], divs[vb[y]]);
                    } else if(vb[y] == vc[z]) {
                        res += count_two(divs[vb[y]], divs[va[x]]);
                    } else {
                        res += count_one(divs[va[x]], divs[vb[y]], divs[vc[z]]);
                    }
                    was.insert({arr});
                }
            }
        }
        cout << res << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    sieve();
    input();
    solve();
}
