// rc.cpp
//

#include <assert.h>
#include <time.h>
#include <math.h>
#include <string.h>

#include <iterator>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <list>
#include <stack>
#include <queue>
#include <algorithm>
#include <numeric>
#include <functional>

using namespace std;

typedef unsigned char uchar;
typedef unsigned int uint;
typedef unsigned long long uint64;
typedef long long sint64;

#define PI 3.1415926535897932384626433832795
#define EPS 1E-11

sint64 a[100000],
       b[100000],
       c[100000];

bool v[100000];

sint64 rx[5],
       ry[5];
uint rn;

sint64 gcd(sint64 x, sint64 y)
{
    if (x == 0)
        return y;

    return gcd(y % x, x);
}

int main(int argc, char* argv[])
{
/*#ifndef _DEBUG
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
#endif*/

    uint n, k;
    cin >> n >> k;

    for (uint i = 0; i < n; ++i)
        cin >> a[i] >> b[i] >> c[i];

    uint q = n,
         st = 0;
    for (uint i = 0; q && i < k; ++i)
    {
        while (v[st])
            ++st;
        v[st] = true;
        --q;

        map<pair<pair<sint64, sint64>, pair<sint64, sint64>>, vector<uint>> d;
        for (uint j = 0; j < n; ++j)
        {
            if (j != st && !v[j])
            {
                sint64 w = a[st] * b[j] - a[j] * b[st];
                if (w)
                {
                    pair<sint64, sint64> wa(b[st] * c[j] - b[j] * c[st], w),
                                         wb(c[st] * a[j] - c[j] * a[st], w);

                    sint64 g = gcd(wa.first, w);
                    wa.first /= g;
                    wa.second /= g;
                    g = gcd(wb.first, w);
                    wb.first /= g;
                    wb.second /= g;

                    if (wa.first < 0)
                        wa.first = -wa.first, wa.second = -wa.second;
                    if (wb.first < 0)
                        wb.first = -wb.first, wb.second = -wb.second;
                    d[make_pair(wa, wb)].push_back(j);
                }
            }
        }

        map<pair<pair<sint64, sint64>, pair<sint64, sint64>>, vector<uint>>::iterator qit = d.end();
        uint vm = 0;
        for (map<pair<pair<sint64, sint64>, pair<sint64, sint64>>, vector<uint>>::iterator it = d.begin(); it != d.end(); ++it)
        {
            if (it->second.size() > vm)
            {
                qit = it;
                vm = it->second.size();
            }
        }

        rx[rn] = st;
        if (vm)
        {
            ry[rn] = qit->second.at(0);
            for (vector<uint>::iterator it = qit->second.begin(); it != qit->second.end(); ++it)
            {
                v[*it] = true;
                --q;
            }
        }
        else
            ry[rn] = -2;
        ++rn;
    }

    if (q)
        cout << "NO\n";
    else
    {
        cout << "YES\n";
        cout << rn << '\n';
        for (uint i = 0; i < rn; ++i)
            cout << rx[i] + 1 << ' ' << ry[i] + 1 << '\n';
    }
    return 0;
}
