#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <complex>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
const int INF = (int)(1e9 + 1e5);
const int64 LINF = (int64)(2e18);
const int64 MX = 100500;
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL() (*(int*)(0))++
#define ASSERT(exp) {if (!(exp)) exit(0);}
#define y1 fjgjf
#ifdef _MY_DEBUG
#define I64d lld
#endif
typedef complex<double> comp;
const int MOD = 1000000007;

const int MAXN = 2005;

int tnum;

int n, k;
char s[MAXN][MAXN];
int dp[MAXN][MAXN];
vector<vector<pii>> v;
int cnt;
string ans;

int get_pos(int x, int y) {
    return x + y - 1;
}

void init() {
    scanf ("%d%d", &n, &k);
    for (int i = 1; i <= n; ++i) {
        scanf ("%s", &s[i][1]);
    }
}

bool is_valid(int x, int y) {
    return 1 <= x && x <= n && 1 <= y && y <= n;
}

void solve() {
    v.resize(2 * n);
    cnt = 0;

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + (s[i][j] == 'a' ? 1 : 0);
            auto pos = get_pos(i, j);
            if (dp[i][j] + k >= pos && cnt <= pos) {
                if (cnt < pos) {
                    v[cnt].clear();
                    cnt = pos;
                }
                v[cnt].push_back(pii(i, j));
            }
        }
    }

    if (!cnt) {
        cnt = 1;
        ans += s[1][1];
        v[1].push_back(pii(1, 1));
    } else {
        ans = string(cnt, 'a');
    }

    for (int pos = cnt + 1; pos <= 2 * n - 1; ++pos) {
        char mn = 'z';
        for (int i = 0; i < v[pos - 1].size(); ++i) {
            const auto check = [&](int x, int y) {
                if (is_valid(x, y) && s[x][y] <= mn) {
                    if (s[x][y] < mn) {
                        v[pos].clear();
                        mn = s[x][y];
                    }
                    v[pos].push_back(pii(x, y));
                }
            };

            check(v[pos - 1][i].first, v[pos - 1][i].second + 1);
            check(v[pos - 1][i].first + 1, v[pos - 1][i].second);
        }
        v[pos].erase(unique(v[pos].begin(), v[pos].end()), v[pos].end());
        ans += s[v[pos][0].first][v[pos][0].second];
    }
}

void print_answer() {
    printf("%s\n", ans.c_str());
}

void precalc() {

}

void run()
{
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    freopen(getenv("OUTPUT_PATH"), "wt", stdout);
#endif // _MY_DEBUG
    precalc();
    int t = 1; //scanf ("%d", &t);
    for (tnum = 1; tnum <= t; ++tnum)
    {
        init();
        solve();
        print_answer();
    }
}

int main()
{
    srand(90);
    ios_base::sync_with_stdio(false); cin.tie(0);
    run();
    return 0;
}