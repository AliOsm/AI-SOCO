#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>
#include <chrono>
#include <iomanip>

using namespace std;
using ll = long long;
const double oo = numeric_limits<double>::max();
const double EPS = 1e-8;

ll x3;
ll y3;
ll x2;
ll y2;

struct P {
  P (double _x, double _y): x(_x), y(_y) {}
  double x, y;
};

double dist(const P& p1, const P& p2) {
  return sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
}

P intersect(ll a1, ll b1, ll c1, ll a2, ll b2, ll c2, bool& f) {
  if (abs(a1 * b2 - a2 * b1) < EPS) {
    f = false;
    return P(-1, -1);
  }
  f = true;
  double x = -1. * (c1 * b2 - c2 * b1) / (a1 * b2 - a2 * b1);
  double y = -1. * (a1 * c2 - a2 * c1) / (a1 * b2 - a2 * b1);
  // cout << x << " " << y << endl;
  return P(x, y);
}

double get(ll a2, ll b2, ll c2, ll a1, ll b1, ll c1, ll a, ll b, ll c) {
  bool f1 = true;
  // cout << a1 << b1  << c1 << a << b << c << endl;
  P p1 = intersect(a1, b1, c1, a, b, c, f1);
  bool f2 = true;
  // cout << a2 << b2  << c2 << a << b << c << endl;
  P p2 = intersect(a2, b2, c2, a, b, c, f2);
  // cout << f1 << " " << f2 << endl;
  if (!f1 || !f2) {
    return oo;
  }

  double d1 = abs((double)x2 - p2.x) + abs((double)y2 - p2.y);
  double d2 = abs((double)x3 - p1.x) + abs((double)y3 - p1.y);
  double d3 = dist(p1, p2);

  return d1 + d2 + d3;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie();
  ll a, b, c;
  cin >> a >> b >> c;
  cin >> x3 >> y3;
  cin >> x2 >> y2;

  if (x3 == x2) {
    cout << abs(y2 - y3) << endl;
    return 0;
  }

  if (y3 == y2) {
    cout << abs(x2 - x3) << endl;
  }
  
  double ret = abs(x2 - x3) + abs(y2 - y3);
  double lret = get(0, 1, -y2, 0, 1, -y3, a, b, c);
  ret = min(ret, lret);
  lret = get(0, 1, -y2, 1, 0, -x3, a, b, c);
  ret = min(ret, lret);
  lret = get(1, 0, -x2, 0, 1, -y3, a, b, c);
  ret = min(ret, lret);
  lret = get(1, 0, -x2, 1, 0, -x3, a, b, c);
  ret = min(ret, lret);
  cout << setprecision(12) << ret << endl;
	return 0;
}
