#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <list>
#include <cmath>
#include <queue>
#include <deque>
#include <map>
#include <set>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; }
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; }
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

istringstream reader;
int max_depth = 0;
vector<vector<string> > rows;

void add_comment(string text, int depth) {
  if (Size(rows) <= depth) {
    rows.resize(depth + 1);
  }
  rows[depth].pb(text);
}

void solve(int count = -1, int depth = 0) {
  if (count == 0) {
    return;
  }
  smax(max_depth, depth + 1);
  while (reader && count--) {
    string child_text;
    int child_count;
    reader >> child_text >> child_count;
    add_comment(child_text, depth);
    solve(child_count, depth + 1);
  }
}

int main() {
  string input;
  cin >> input;
  FOR(i, 0, Size(input)) {
    if (input[i] == ',') {
      input[i] = ' ';
    }
  }
  reader.str(input);
  solve();
  cout << max_depth << endl;
  FOR(i, 0, max_depth) {
    FOR(j, 0, Size(rows[i])) {
      cout << rows[i][j] << " ";
    }
    cout << endl;
  }
}
