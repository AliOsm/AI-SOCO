#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
typedef long long int64;
const int inf=1000000000;
#define show(x) cout << x << endl
#define rep(i,n) for(int i=0;i<n;i++)
#define mset(a,i) memset(a,i,sizeof(a))
#define PB(i) push_back(i)

using namespace std;
char sr[2][100010];
int d[200010], cur[200010], Q[200010];
vector<int> g[200010];
int N, K;
bool bfs(int u) {
    int s = 0, t = 0;
    mset(d, -1);
    if(sr[0][0] == 'X')     return false;
    d[u] = 1;
    Q[t ++] = u;
    while(s < t) {
        u = Q[s ++];
        if((u >> 1) + K >= N)   return true;
        int sz = g[u].size();
        rep(i, sz) {
            int v = g[u][i];
            if(d[v] == -1) {
                d[v] = d[u] + 1;
                if(d[v] <= cur[v]) {
                    Q[t ++] = v;
                }
            }
        }
    }
    return false;
}
bool go() {
    rep(i, N) {
        rep(o, 2) {
            if(sr[o][i] == '-' && sr[o][i+1] == '-') {
                g[i<<1|o].PB(i+1<<1|o);
                g[i+1<<1|o].PB(i<<1|o);
            }
            if(sr[o][i] == '-' && i + K < N && sr[o^1][i+K] == '-') {
                g[i<<1|o].PB(i+K<<1|(o^1));
            }
            cur[i<<1|o] = i + 1;
        }
    }
    return bfs(0);
}
int main() {
    cin >> N >> K;
    scanf("%s%s", sr[0], sr[1]);
    int ans = go();
    puts(ans ? "YES": "NO");
    return 0;
}

