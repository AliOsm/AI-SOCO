/* ****revpro**** */
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")
#include<bits/stdc++.h>
#define ll          int
#define pb          push_back
#define endl     '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii      map<ll,ll>
using namespace std;

#define TIME        cerr << "\nTime elapsed: " << setprecision(5) <<1000.0 * clock() / CLOCKS_PER_SEC << "ms\n";
#define FAST ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define N  9000005
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;  
#define ordered_set tree<double, null_type,less<double>, rb_tree_tag,tree_order_statistics_node_update> 
vi v[N];
void solve()
{
  ll  n,k;
  cin>>n>>k;
  string s;
  cin>>s;
  ll cur=0,sum=0;
  while(1)
  {
    if(cur>k) {
      cout<<-1;
      return ;
    }
    ll f=0;
    rep(i,0,n-1)
    {
      if((s[i]=='R')&&(s[i+1]=='L'))
      {
        f=1;
        sum++;
        v[cur].pb(i);
      }
    }
    for(auto i:v[cur]) swap(s[i],s[i+1]);
    if(!f) break;
    cur++;
  }
  if(sum<k){
    cout<<-1;
    return ;
  }
  rep(i,0,cur)
  {
    while((k>(cur-i))&&(sz(v[i])))
    {
      cout<<1<<' '<<v[i].back()+1<<endl;
      v[i].pop_back();
      k--;
    }
    if(sz(v[i])) {
      cout<<sz(v[i])<<' ';
      k--;
      for(auto  j:v[i]) cout<<j+1<<' ';
      cout<<endl;
    }
  }
}
signed main()
{
  
    /***********************************/
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    mt19937_64 generator (seed);
    /***********************************/
 #ifndef ONLINE_JUDGE
      // for getting input from input.txt
     freopen("input.txt", "r", stdin);
//     // for writing output to output.txt
//     freopen("output1.txt", "w", stdout);
 #endif
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int TESTS=1;
//  cin>>TESTS;
  while(TESTS--)
  {
    solve();
    
  }
  TIME
  return 0;
}