/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */


#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define int long long

using namespace std;

class CProductOfThreeNumbers {
public:
	void solve(std::istream& in, std::ostream& out) {
        int n; in >> n;
        int num = n;
        set<int> uni;
        vector<int> factors;

        for(int i = 2; i * i <= n; ++i) {
            while(n%i == 0) factors.emplace_back(i), n /= i, uni.insert(i);
        }
        if(n >= 2) uni.insert(n), factors.emplace_back(n);


        if(uni.size() == 1) {
            if(factors.size() < 6) {
                out << "NO\n";
                return;
            }
            out << "YES\n";
            int a = *uni.begin();
            int b = a*a;
            int c = num/(a*b);
            out << a << ' ' << b << ' '  << c << '\n';
            return;
        }
        int a = *uni.begin();
        int b = *next(uni.begin());
        int c = num/(a*b);
        if(a == c or b == c or c == 1) {
            out << "NO\n";
            return;
        }
        out << "YES\n";
        out << a << ' ' << b << ' ' << c << '\n';
	}
};


int32_t main() {
	CProductOfThreeNumbers solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}
