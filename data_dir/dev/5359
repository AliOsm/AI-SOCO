/*
    U FAIL U IMPROVE
                    U SKIP U LOSE!!
                                    */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=1e9+7;   
#define INF 100000000
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctz(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clz(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffs(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,t,q,z,x,y,k,m;
const double pi=3.14159265358979323846;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
vector<int> pf(string s) {
    int n = (int)s.length();
    vector<int> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
//lli vis[305][305];
//lli a[500005];
//lli good[5005][5005];
//string s;
//map<lli,lli> vis;
//map<lli,lli> ml;
//vector<ll> v[2000005];
//lli mx=0;
//lli ff=0;
struct edge
{
    lli first,second,third;
};
//set<lli> s;
lli hpy,atky,defy,hpm,atkm,defm,h,d,l,r;
//string s[100005];
lli ii=1;
char s[55][55];
lli tot=0;
lli tot1=0;
lli f=0;
vector<lli> v;
map<pair<char,char>,lli> ml;
lli mi1=1e18;
lli mx1=-1;
   map<string,char> kl;
void dfs(lli a[],lli tot,lli i)
{
    if(i==1)
    {
    for(int j=1;j<=tot-2;j++)
    {
        v.push_back(j);
        dfs(a,tot-j,i+1);
        v.pop_back();
    }
    }
    else if(i==2)
    {
        for(int j=1;j<=tot-1;j++)
    {
        v.push_back(j);
        dfs(a,tot-j,i+1);
        v.pop_back();
    }
    }
    else
    {
        v.push_back(tot);
        string d="1234567";
        lli ss=5045;
        lli mx=-1;
        lli mi=1e18;
        for(int j=0;j<3;j++)
        {
            lli d2=(a[j+1]/v[j]);
            mi=min(d2,mi);
            mx=max(mx,d2);
        }
        if(mi1>=abs(mx-mi))
        {
        mi1=mx-mi;
        while(ss)
        {
            lli cnt=0;
            lli point=0;
            vector<lli> oo;
            for(int j=0;j<3;j++)
            {
                if(j==0)
                {
                for(int p=0;p<v[j];p++)
                {
                    for(int p1=0;p1<v[j];p1++)
                    {
                        if(ml[{d[p],d[p1]}])
                        cnt++;
                    }
                }
                oo.push_back(cnt);
                point+=v[j];
                }
                else
                {
                    for(int p=point;p<v[j]+point;p++)
                {
                    for(int p1=point;p1<v[j]+point;p1++)
                    {
                        if(ml[{d[p],d[p1]}])
                        cnt++;
                    }
                }
                oo.push_back(cnt);
                point+=v[j];
                }
            }
            next_permutation(d.begin(),d.end());
            ss--;
        }
        //cout<<mx1<<endl;
        }
        v.pop_back();
    }
}
void dfs1(lli a[],lli tot,lli i)
{
    if(i==1)
    {
    for(int j=1;j<=tot-2;j++)
    {
        v.push_back(j);
        dfs1(a,tot-j,i+1);
        v.pop_back();
    }
    }
    else if(i==2)
    {
        for(int j=1;j<=tot-1;j++)
    {
        v.push_back(j);
        dfs1(a,tot-j,i+1);
        v.pop_back();
    }
    }
    else
    {
        v.push_back(tot);
        string d="1234567";
        lli ss=5045;
        lli mx=-1;
        lli mi=1e18;
        for(int j=0;j<3;j++)
        {
            lli d2=(a[j+1]/v[j]);
            mi=min(d2,mi);
            mx=max(mx,d2);
        }
        if(abs(mx-mi)==mi1)
        {
        while(ss)
        {
            lli cnt=0;
            lli point=0;
            vector<lli> oo;
            for(int j=0;j<3;j++)
            {
                if(j==0)
                {
                for(int p=0;p<v[j];p++)
                {
                    for(int p1=0;p1<v[j];p1++)
                    {
                        if(ml[{d[p],d[p1]}])
                        cnt++;
                    }
                }
                oo.push_back(cnt);
                point+=v[j];
                }
                else
                {
                    for(int p=point;p<v[j]+point;p++)
                {
                    for(int p1=point;p1<v[j]+point;p1++)
                    {
                        if(ml[{d[p],d[p1]}])
                        cnt++;
                    }
                }
                oo.push_back(cnt);
                point+=v[j];
                }
            }
            mx1=max(mx1,cnt);
            next_permutation(d.begin(),d.end());
            ss--;
        }
        //cout<<mx1<<endl;
        }
        v.pop_back();
    }
}
lli dp[1000007];
lli vis[5005][5005];
int main()
{
   cin>>n;
   ll p[n+1];
   for(int i=1;i<=n;i++)
   {
       cin>>x>>y;
       p[i].first=x;
       p[i].second=y;
       dp[x]++;
       dp[y+1]--;
   }
   for(int i=1;i<=1000005;i++)
   {
       dp[i]+=dp[i-1];
   }
   for(int i=1;i<=n;i++)
   {
       x=p[i].first;
       y=p[i].second;
       for(int j=1;j<=n;j++)
       {
           if(j!=i&&vis[i][j]==0)
           {
               vis[i][j]=1;
               vis[j][i]=1;
               if(x==p[j].second)
               dp[x]--;
               if(y==p[j].first)
               dp[y]--;
           }
       }
   }
   vector<ll> v;
   lli fl=0;
   for(int i=1;i<=1000005;)
   {
       if(dp[i]==2)
       {
           if(dp[i+1]==2)
           fl=1;
           lli low=i;
           lli high=i;
           while(dp[i]==2)
           {
               i++;
           }
           high=i-1;
           //cout<<low<<" "<<high<<endl;
           if(low!=high)
           v.push_back({low,high});
       }
       else if(dp[i]==1||dp[i]==0)
       {
           i++;
       }
       else
       {
           if(dp[i+1]>2)
           return cout<<0,0;
           i++;
       }
   }
   lli ml[5005];
   mem1(ml,0);
   lli cnt=0;
   for(int i=1;i<=n;i++)
   {
   lli f=0;
   for(int j=0;j<v.size();j++)
   {
       //cout<<v[j].first<<" "<<v[j].second<<endl;
       ll interx=v[j];
       if(interx.first>=p[i].first&&interx.second<=p[i].second)
       continue;
       f=1;
   }
   if(!f)
   {
       cnt++;
       ml[i]=1;
   }
   }
   if(fl)
   {
   cout<<cnt<<"\n";
   for(int i=1;i<=n;i++)
   {
       if(ml[i])
       cout<<i<<" ";
   }
   }
   else
   {
       cout<<n<<endl;
       for(int i=1;i<=n;i++)
       cout<<i<<" ";
   }
}