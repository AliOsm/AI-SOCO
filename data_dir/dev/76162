#include <cstdio>
#include <queue>

using namespace std;

struct elem {
  int i,j,player,turn,step;
  elem() {}
  elem(int i,int j,int player,int turn,int step):i(i),j(j),player(player),turn(turn),step(step) {}
};

bool operator<(elem e1,elem e2)
{
  if (e1.turn!=e2.turn) return e1.turn>e2.turn;
  if (e1.player!=e2.player) return e1.player>e2.player;
  if (e1.step!=e2.step) return e1.step>e2.step;
  if (e1.i!=e2.i) return e1.i>e2.i;
  return e1.j>e2.j;
}

const int limit=1005;

int n,m,p;
int v[limit][limit];
int speed[10];
int sol[10];
priority_queue<elem> q;

bool inside(int i,int j)
{
  return 1<=i and i<=n and 1<=j and j<=m;
}

int movi[]={0,-1,0,1};
int movj[]={1,0,-1,0};

char buff[limit];

void addmoves(int i,int j,int player,int turn,int step)
{
  for (int d=0;d<4;d++) {
    int nexti=i+movi[d];
    int nextj=j+movj[d];
    if (inside(nexti,nextj) and v[nexti][nextj]==0) {
      q.push(elem(nexti,nextj,player,turn,step));
    }
  }
}

int main()
{
  scanf("%d%d%d",&n,&m,&p);
  for (int i=1;i<=p;i++)
    scanf("%d",speed+i);
  for (int i=1;i<=n;i++) {
    scanf("%s",buff);
    for (int j=1;j<=m;j++) {
      char c=buff[j-1];
      if (c=='#')
	v[i][j]=-1;
      else if (c!='.')
	v[i][j]=c-'0';
    }
  }
  for (int i=1;i<=n;i++) {
    for (int j=1;j<=m;j++) {
      if (v[i][j]>0) {
	addmoves(i,j,v[i][j],1,1);
      }
    }
  }
  while (not q.empty()) {
    elem e=q.top();
    q.pop();
    int i=e.i;
    int j=e.j;
    int player=e.player;
    int turn=e.turn;
    int step=e.step;
    if (v[i][j]==0) {
      v[i][j]=player;
      step++;
      if (step>speed[player]) {
	step=1;
	turn++;
      }
      addmoves(i,j,player,turn,step);
    }
  }
  for (int i=1;i<=n;i++)
    for (int j=1;j<=m;j++)
      if (v[i][j]>0)
	sol[v[i][j]]++;
  for (int i=1;i<=p;i++) {
    if (i>1) printf(" ");
    printf("%d",sol[i]);
  }
  printf("\n");
}
