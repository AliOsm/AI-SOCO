#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define all(v) (v).begin() , (v).end()
#define popcnt(x) __builtin_popcount(x)
#define inf 0x3f3f3f3f
#define watch(x) cout << (#x) << " is " << (x) << endl
#define rand() (rand() << 15 | rand())
using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set =
tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long  ll;
#define EPS 1e-9
#define PI acos(-1.0)
const int N = 4e5 + 4;
vector<int> adj[N] , pay[N];
int need[N] , n , m;
int main() {
#ifndef ONLINE_JUDGE
   freopen("input.txt", "r", stdin);
#endif
   ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
   cin >> n >> m;
   for(int i = 1 ; i <= n ; ++i)
      cin >> need[i];

   for(int i = 0 ; i < m ; ++i){
      int day , type;
      cin >> day >> type;
      adj[day].pb(type);
   }

   auto valid = [](int d , vector<int> &lst){
      fill(all(lst) , -1);
      for(int i = 1 ; i <= d ; ++i){
         pay[i].clear();
         for(int x : adj[i]){
            lst[x] = i;
         }
      }
      for(int i = 1 ; i <= n ; ++i){
         if(~lst[i]){
            pay[lst[i]].pb(need[i]);
         }
      }

      int sm = 0 , extra = 0;
      for(int i = 1 ; i <= d ; ++i){
         sm++;
         for(int x : pay[i]){
            int mn = min(x , sm);
            sm -= mn;
            extra += (x - mn);
         }
      }

      for(int i = 1 ; i <= n ; ++i){
         if(lst[i] == -1){
            if(sm < 2 * need[i])
               return false;
            sm -= 2 * need[i];
         }
      }
      if(sm < 2 * extra)
         return false;
      return true;
   };
   vector<int> lst(n + 1 , -1);
   int l = 1 , r = 4e5 , ans = -1;
   while(l <= r){
      int mid = (l + r) / 2;
      if(valid(mid , lst)){
         ans = mid;
         r = mid - 1;
      }
      else l = mid + 1;
   }

   cout << ans << "\n";
}