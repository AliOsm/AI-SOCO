#include <bits/stdc++.h>
using namespace std;

string s;
const int maxN = 5050;
const int ALF = 30;

int ok[maxN][maxN];
int n, k;
int cnt[ALF];
int p2[maxN];
int p[maxN];
const char ce = 'a' - 1;
int J[maxN * maxN];
int L[maxN * maxN];
int R[maxN * maxN];

int sz;

int push(int j, int l, int r) {
    if (l < r) {
        J[sz] = j;
        L[sz] = l;
        R[sz] = r;
        sz++;
    }
}


int ook[2];

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> s;
    n = s.size();
    cin >> k;
    for (int i = 0; i < n + 2; i++) {
        s.push_back(ce);
        p[i] = i;
    }

    for (int i = n - 1; i >= 0; i--) {
        for (int j = 0; j < ALF; j++) {
            cnt[j] = 0;
        }
        for (int j = 0; j < n; j++) {
            cnt[s[i + p[j]] - ce]++;
        }
        for (int j = 1; j < ALF; j++) {
            cnt[j] += cnt[j - 1];
        }
        for (int j = n - 1; j >= 0; j--) {
            p2[--cnt[s[i + p[j]] - ce]] = p[j];
        }
        for (int j = 0; j < n; j++) {
            p[j] = p2[j];
        }
    }

    for (int i = 0; i < n; i++) {
        for (int t = 0; t < 2; t++) {
            ook[0] = ook[1] = 1;
            for (int l = i, r = i + t; l >= 0 && r < n; l--, r++) {
                ook[l % 2] &=  (s[l] == s[r]);
                ok[l][r] = ook[l % 2];
            }
        }
    }
    sz = 0;
    push(0, 0, n);
    int t = 0;
    while (sz) {
        sz--;
        int j = J[sz];
        int l = L[sz];
        int r = R[sz];
        while (l < r && s[p[l] + j] == ce) {
            l++;
        }
        if (l != r) {
                int ii = l;
                while (ii < r && s[p[l] + j] == s[p[ii] + j]) {
                    k -= ok[p[ii]][p[ii] + j];
                    ii++;
                }
                if (k <= 0) {
                    cout << s.substr(p[l], j + 1) << endl;
                    exit(0);
                }
                push(j, ii, r);
                push(j + 1, l, ii);
        }
    }
    return 0;
}
