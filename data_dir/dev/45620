#include <cstdio>
#include <vector>
#include <queue>
using namespace std;
vector<int> cl[200010];
vector<int> vap[200010];
vector<int> vsg[200010];
inline int abs(int x) {
	return x >= 0 ? x : -x;
}
inline int sgn(int x) {
	return x > 0 ? 1 : -1;
}
char b[200010];
int done[200010];
int unc[200010];
priority_queue<pair<int, int> > q;
int main() {
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; i++) {
		int x, y;
		scanf("%d", &x);
		for (int j = 0; j < x; j++) {
			scanf("%d", &y);
			cl[i].push_back(y);
			vap[abs(y)].push_back(i);
			vsg[abs(y)].push_back(sgn(y));
		}
		unc[i] = x;
	}
	for (int i = 1; i <= m; i++) {
		if (vap[i].size() == 2 && vsg[i][0] != vsg[i][1]) {
			continue;
		}
		if (vap[i].size()) {
			b[i] = vsg[i][0];
			unc[vap[i][0]]--;
			if (vap[i].size() > 1) {
				unc[vap[i][1]]--;
			}
		} else {
			b[i] = 1;
		}
	}
	for (int i = 0; i < n; i++) {
		done[i] = unc[i];
		q.push(make_pair(-unc[i], i));
	}
	while (q.size()) {
		int i = q.top().second;
		q.pop();
		int f = 0;
		for (int j = 0; j < cl[i].size(); j++) {
			int x = abs(cl[i][j]);
			if (sgn(cl[i][j]) == b[x]) {
				f = 1;
			}
		}
		if (f) continue;
		if (unc[i] == 0 && !f) {
			puts("NO");
			return 0;
		}
		for (int j = 0; j < cl[i].size(); j++) {
			int x = abs(cl[i][j]);
			if (!b[x]) {
				b[x] = sgn(cl[i][j]);
				for (int k = 0; k < vap[x].size(); k++) {
					if (vap[x][k] == i) continue;
					q.push(make_pair(- --unc[vap[x][k]], vap[x][k]));
				}
				break;
			}
		}
	}
	puts("YES");
	for (int i = 1; i <= m; i++) {
		putchar(b[i] == 1 ? '1' : '0');
	}
	puts("");
	return 0;
}
