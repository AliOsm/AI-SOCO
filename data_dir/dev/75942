#include<bits/stdc++.h>
using namespace std;
#define int long long
typedef long long ll;

const int mod = 998244353;

ll power(ll a, ll b, ll c = mod) {//returns a^b mod c
    if (b <= 0) return 1;
    ll temp = power(a, b / 2, c) % c;
    if (b % 2 == 0) {
        return (temp * temp) % c;
    }
    return (((a * temp) % c) * temp) % c;
}

vector<vector<int>> adj;
vector<bool> visited, currColor;
int cntWhite, cntSeen;

bool dfs(int node, bool color) {
    if(color) cntWhite++;
    cntSeen++;
    visited[node] = true;
    currColor[node] = color;
    for(int to : adj[node]) {
        if(!visited[to]) {
            if(!dfs(to, !color)) return false;
        } else if(currColor[node] == currColor[to]) {
            return false;
        }
    }
    return true;
}

void doTest() {
    int n, m;
    cin >> n >> m;
    adj.clear();
    adj.resize(n+1);
    visited.clear();
    visited.resize(n+1, false);
    currColor.resize(n+1);
    int u, v;
    for(int i = 0; i < m; ++i) {
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    bool bipartite = true;
    int res = 1;
    for(int i = 1; i <= n; ++i) {
        if(!visited[i]) {
            cntSeen = cntWhite = 0;
            bipartite &= dfs(i, true);
            res *= (power(2, cntWhite) + power(2, cntSeen-cntWhite))%mod;
            res %= mod;
        }
    }
    if(!bipartite) {
        cout << "0\n";
        return;
    }
    cout << res << '\n';
}

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t;
    cin >> t;
    while(t--) doTest();
    return 0;
}



























