#include <cstdio>
#include <algorithm>

using namespace std;

const int MAXN = 64;
const int INF = 1000000007;

int w[MAXN][MAXN][MAXN];
int d[MAXN][MAXN][MAXN];

void floyd(int n, int d[MAXN][MAXN]) {
    for (int k = 0; k < n; ++k) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
            }
        }
    }
}

void gao(int n, const int a[MAXN][MAXN], const int b[MAXN][MAXN], int c[MAXN][MAXN]) {
    for (int k = 0; k < n; ++k) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                c[i][j] = min(c[i][j], a[i][k] + b[k][j]);
            }
        }
    }
}

int main() {
    int n, m, r, s, t, k;

    scanf("%d%d%d", &n, &m, &r);
    fill(d[0][0], d[n][0], INF);
    for (int k = 0; k < m; ++k) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                scanf("%d", &w[k][i][j]);
            }
        }
        floyd(n, w[k]);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                d[0][i][j] = min(d[0][i][j], w[k][i][j]);
            }
        }
    }
    for (int k = 1; k < n; ++k) {
        gao(n, d[k - 1], d[0], d[k]);
    }

    for (int q = 0; q < r; ++q) {
        scanf("%d%d%d", &s, &t, &k);
        --s;
        --t;
        k = min(k, n - 1);
        printf("%d\n", d[k][s][t]);
    }

    return 0;
}

