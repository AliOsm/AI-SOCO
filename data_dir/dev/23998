#include <bits/stdc++.h>
using namespace std;
struct abc{
    int x, y, z;
};
const int N = 512345;
bool cmp(abc a, abc b)
{
    return a.x > b.x;
}
abc a[N];
int read()
{
    int x;
    scanf("%d", &x);
    return x;
}
int d[N * 4];
void update(int l, int r, int id, int ind, int x)
{
    if(l == r)
    {
        d[id] = max(d[id], x);
        return ;
    }
    int m = (l + r) >> 1;
    if(ind <= m) update(l, m, id + id, ind, x);
    else update(m + 1, r, id + id + 1, ind, x);
    d[id] = max(d[id + id], d[id + id + 1]);
}
int maxlr(int l, int r, int id, int ll, int rr)
{
    if(ll > rr)
        return 0;
    if(ll <= l && r <= rr)
        return d[id];
    int m = (l + r) >> 1, s = 0;
    if(ll <= m) s = max(s, maxlr(l, m, id + id, ll, rr));
    if(rr > m) s = max(s, maxlr(m + 1, r, id + id + 1, ll, rr));
    return s;
}
main()
{
    int n, m, i, j;
    n = read();
    for(i = 1; i <= n; i ++) a[i].x = read();
    for(i = 1; i <= n; i ++) a[i].y = read();
    for(i = 1; i <= n; i ++) a[i].z = read();
    sort(a + 1, a + n + 1, cmp);
    map <int, int> mp;
    for(i = 1; i <= n; i ++)
        mp[a[i].y];
    int k = 0;
    for(map <int, int> :: iterator i = mp.begin(); i != mp.end(); i ++)
        (*i).second = ++k;
    for(i = 1; i <= n; i ++)
        a[i].y = mp[a[i].y];
    int id = 1;
    int ans = 0;
    for(i = 1; i <= n; i ++)
    {
        while(a[id].x != a[i].x)
        {
            update(1, n, 1, a[id].y, a[id].z);
            id ++;
        }
        if(maxlr(1, n, 1, a[i].y + 1, n) > a[i].z)
        {
            ans ++;
        }
    }
    cout << ans;
}
