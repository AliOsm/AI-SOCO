#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <bitset>
#include <string>
#include <vector>
#include <algorithm>
#include <ctime>
#include <queue>
#include <cstring>
#include <set>
#include <map>
#include <sstream>
#include <cmath>
#include <fstream>
#include <list>
using namespace std;
#define rp(i,n) for(int (i)=0;(i)<(n);++(i))
#define pb push_back
#define L(s) (int)s.size()
#define mp make_pair
#define pii pair<int,int>
#define x first 
#define y second
#define inf 1000000000
#define VI vector<int>
#define ll long long
#define all(s) (s).begin(),(s).end()
#define C(u) memset((u),0,sizeof((u)))
#define ull unsigned ll
#define uint unsigned int 
int* a[5005];
int x[5555],y[5555];
int d[5005*5005/2];
int cm[5005*5005/2];
int c[33333];
int par[5555];
int sz[5555];
int tp[5555];
int n,k,com;
int u[5555];
VI e[5005];
int P(int x)
{
	return (x==par[x])?(x):(par[x]=P(par[x]));
}
inline void U(int x,int y)
{
	if (rand()%2)
	{
		par[x]=y;
		sz[y]+=sz[x];
	}
	else
	{
		par[y]=x;
		sz[x]+=sz[y];
	}
}
void dfs_r(int v,int num)
{
	u[v]=num;
	tp[v]^=1;
	rp(i,L(e[v]))
		if (u[e[v][i]]!=num)
			dfs_r(e[v][i],num);
}
inline void ren(int x,int y,int now)
{
	if (sz[x]>=sz[y])
		dfs_r(y,now+1);
	else
		dfs_r(x,now+1);
}
int main()
{
	scanf("%d",&n);
	rp(i,n)
		a[i]=new int[i+1];
	rp(i,n)
	{
		scanf("%d%d",&x[i],&y[i]);
		e[i].reserve(n);
	}
	rp(i,n)
		rp(j,i+1)
			a[i][j]=abs(x[i]-x[j])+abs(y[i]-y[j]);
	k=0;
	rp(i,n)
		rp(j,i+1)
		{
			c[a[i][j]+1]++;
			++k;
		}
	for(int i=1;i<33333;++i)
		c[i]+=c[i-1];
	rp(i,n)
		rp(j,i+1)
		{
			d[c[a[i][j]]]=i*n+j;
			c[a[i][j]]++;
		}
	reverse(d,d+k);
	rp(i,n)
		par[i]=i;
	com=n;
	rp(i,n)
		rp(j,i+1)
			a[i][j]*=-1;
	rp(i,k)
	{
		int v1=d[i]/n;
		int v2=d[i]%n;
		if (v1<v2)
			swap(v1,v2);
		int p1=P(v1);
		int p2=P(v2);
		if (v1==v2)
			break;
		if (p1==p2)
		{
			if (tp[v1]==tp[v2])
			{
				int ans=1;
				cout<<-a[v1][v2]<<endl;
				int pos=i-1;
				while(pos<k && a[max(d[pos]/n,d[pos]%n)][min(d[pos]/n,d[pos]%n)]==a[v1][v2])
					--pos;
				com=cm[pos];
				rp(i,com)
					ans=(ans*2)%1000000007;
				cout<<ans<<endl;
				return 0;
			}
		}
		else
		{
			com--;
			if (tp[v2]==tp[v1])
				ren(v1,v2,i);
			U(p1,p2);
		}
		e[v1].pb(v2);
		e[v2].pb(v1);
		cm[i]=com;
	}
	cout<<"0\n2\n";
}