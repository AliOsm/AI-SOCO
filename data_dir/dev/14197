#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <unordered_map>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>

using namespace std;

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.1415926535897
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned

vector<vector<int>> g;
vector<vector<int>> b;
int wh[200100];
vector<vector<int>> pathes;
int tot;
int was[200100];
int wasInPath[200100];
vector<int> order;

void dfs(int v) {
	was[v] = 1;
	order.push_back(v);
	FOR(i, 0, g[v].size()) {
		int to = g[v][i];
		if (was[to] == 0) {
			dfs(to);
			order.push_back(v);
		}
	}
}

set<pnt> s;

void printAns(vector<int>& ans) {
	printf("%d", ans.size());
	FOR(i, 0, ans.size()) {
		printf(" %d", ans[i] + 1);
	}
	printf("\n");
}
vector<int> t;

int main()
{
#ifdef Fcdkbear
	freopen("in.txt", "r", stdin);
	double beg = clock();
	//freopen("out.txt", "w", stdout);
#endif

	int n, m, k;
	scanf("%d%d%d", &n, &m, &k);
	g.resize(n);
	b.resize(n);
	FOR(i, 0, m) {
		int v1, v2;
		scanf("%d%d", &v1, &v2);
		v1--;
		v2--;
		g[v1].push_back(v2);
		g[v2].push_back(v1);
	}
	tot = (2*n + k - 1) / k;
	dfs(0);
	FOR(i, 0, order.size()) {
		t.push_back(order[i]);
		if (t.size() % tot == 0) {
			pathes.push_back(t);
			t.clear();
		}
	}
	if (t.size()) {
		pathes.push_back(t);
	}
	t.clear();
	t.push_back(0);
	while (pathes.size() < k) {
		pathes.push_back(t);
	}
	FOR(i, 0, pathes.size()) {
		printAns(pathes[i]);
	}

#ifdef Fcdkbear
	double end = clock();
	fprintf(stderr, "*** Total time = %.3lf ***\n", (end - beg) / CLOCKS_PER_SEC);
#endif
	return 0;
}