#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <vector>
using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef tuple<int, int, int> event;

const int MAXN = 100100;
const int MOD = 999999937;
int N;
event E[2][2*MAXN];
ll H[MAXN];
ll power[MAXN];
ll A[2][MAXN];
int total[2][MAXN];

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    cin >> N;
    for (int i = 0; i < N; i++)
        H[i] = ((ll)rand()*rand() % MOD + (ll)rand()*MAXN % MOD + rand()) % MOD;
    power[0] = 1;
    for (int i = 1; i < N; i++)
        power[i] = power[i - 1]*17 % MOD;

    for (int i = 0, sa, ea, sb, eb; i < N; i++)
    {
        cin >> sa >> ea >> sb >> eb;
        E[0][2*i] = event(sa, -1, i);
        E[0][2*i + 1] = event(ea, 1, i);
        E[1][2*i] = event(sb, -1, i);
        E[1][2*i + 1] = event(eb, 1, i);
    }

    for (int i = 0; i < 2; i++)
    {
        sort(E[i], E[i] + 2*N);
        ll cur = 0;
        int cnt = 0;
        for (int j = 0, x, se, idx; j < 2*N; j++)
        {
            tie(x, se, idx) = E[i][j];
            if (se == -1)
            {
                A[i][idx] = (A[i][idx] + cur) % MOD;
                total[i][idx] += cnt;
            }
            else
            {
                cur = (cur + power[idx]*H[idx] % MOD) % MOD;
                cnt++;
            }
        }
        cur = cnt = 0;
        for (int j = 2*N - 1, x, se, idx; j >= 0; j--)
        {
            tie(x, se, idx) = E[i][j];
            if (se == 1)
            {
                A[i][idx] = (A[i][idx] + cur) % MOD;
                total[i][idx] += cnt;
            }
            else
            {
                cur = (cur + power[idx]*H[idx] % MOD) % MOD;
                cnt++;
            }
        }
    }

    for (int i = 0; i < N; i++)
        if (A[0][i] != A[1][i] || total[0][i] != total[1][i])
        {
            cout << "NO\n";
            return 0;
        }
    cout << "YES\n";

    return 0;
}
