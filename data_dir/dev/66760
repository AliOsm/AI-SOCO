#include <bits/stdc++.h>
using namespace std;

const int MX = 1000006;
const int MN = 1005;

const int MOD = 1073741824;

vector<int> primes;
bool check[MN];

void gen_primes() {
  primes.push_back(2);
  for (int i = 3; i < MN; i += 2) {
    if (check[i])
      continue;
    primes.push_back(i);
    for (int j = i * i; j < MN; j += i)
      check[j] = true;
  }
}

int euler_function(int x) {
  int ans = 1;
  map<int, int> fact;
  for (int i = 0; i < primes.size() && primes[i] * primes[i] <= x; i++) {
    if (x % primes[i] == 0) {
      while (x % primes[i] == 0) {
        fact[primes[i]]++;
        x /= primes[i];
      }
    }
  }
  if (x > 1)
    fact[x]++;
  for (auto i : fact)
    ans = ans * (i.second + 1);
  return ans;
}

int main() {
  gen_primes();

  int a, b, c;
  vector<int> div(MX);
  div[1] = 1;
  for (int i = 2; i < MX; i++) {
    div[i] = euler_function(i);
  }
  while (cin >> a >> b >> c) {
    long long ans = 0;
    for (int i = 1; i <= a; i++)
      for (int j = 1; j <= b; j++)
        for (int k = 1; k <= c; k++)
          ans = (ans + div[i * j * k]) % MOD;
    cout << ans << endl;
  }
  return 0;
}
