#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;

int arr[30][2];
int dist[30][30];
int n;

//struct _hash {
//  int operator ()(const pair<pii, int> &key) const {
//      return (key.first.first + key.first.second + key.second) % 10000007;
//  }
//};
//
//hash_map<pair<pii, int>, int, _hash> memo;

int memo[1 << 25];
bool vis[1 << 25];

int calc(int msk) {
    if (!msk) {
        return 0;
    }
    int &ret = memo[msk];
    if (vis[msk])
        return ret;
    vis[msk] = 1;
    ret = OO;
    for (int i = 0; i < n; i++) {
        if ((1 << i) & msk) {
            ret = min(ret,
                    dist[0][i + 1] + dist[i + 1][0] + calc(msk & ((~(1 << i)))));
            for (int j = i + 1; j < n; j++) {
                if ((1 << j) & msk) {
                    ret = min(ret,
                            dist[0][i + 1] + dist[i + 1][j + 1] + dist[j + 1][0]
                                    + calc(msk & ((~(1 << i)) & (~(1 << j)))));
                }
            }
            break;
        }
    }
    return ret;
}

void print(int msk) {
    if (!msk) {
        return;
    }
    int ret = memo[msk];
    for (int i = 0; i < n; i++) {
        if ((1 << i) & msk) {
            if (ret
                    == dist[0][i + 1] + dist[i + 1][0] + calc(msk & ((~(1 << i))))) {
                cout << i + 1 << " " << 0 << " ";
                print(msk & ((~(1 << i))));
                return;
            }
            for (int j = i + 1; j < n; j++) {
                if ((1 << j) & msk) {
                    if (ret
                            == dist[0][i + 1] + dist[i + 1][j + 1] + dist[j + 1][0]
                                    + calc(msk & ((~(1 << i)) & (~(1 << j))))) {
                        cout << i + 1 << " " << j + 1 << " " << 0 << " ";
                        print(msk & ((~(1 << i)) & (~(1 << j))));
                        return;
                    }
                }
            }
        }
    }
}

void pre() {
    for (int i = 0; i <= n; i++)
        for (int j = 0; j <= n; j++) {
            dist[i][j] = (arr[i][0] - arr[j][0]) * (arr[i][0] - arr[j][0])
                    + (arr[i][1] - arr[j][1]) * (arr[i][1] - arr[j][1]);
        }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
#ifndef ONLINE_JUDGE
//  freopen("in.txt", "rt", stdin);
//  freopen("out.txt", "wt", stdout);
#endif
    cin >> arr[0][0] >> arr[0][1];
    cin >> n;
    for (int i = 1; i <= n; i++)
        cin >> arr[i][0] >> arr[i][1];
    pre();
    cout << calc((1 << n) - 1) << endl;
    cout << 0 << " ";
    print((1 << n) - 1);
    return 0;
}
