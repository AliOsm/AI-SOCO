#include <bits/stdc++.h>

using namespace std;

#define ok printf("ok\n");
#define pf printf
#define sc scanf
#define br printf("\n")

#define scs(a) scanf("%s",a)
#define sc1(a) scanf("%d",&a)
#define sc2(a,b) scanf("%d %d",&a,&b)
#define sc3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define sc1l(a) scanf("%lld",&a)
#define sc2l(a,b) scanf("%lld %lld",&a,&b)
#define sc3l(a,b,c) scanf("%lld %lld %lld",&a,&b,&c)
#define sc1d(a) scanf("%lf",&a)
#define sc2d(a,b) scanf("%lf %lf",&a,&b)
#define sc3d(a,b,c) scanf("%lf %lf %lf",&a,&b,&c)
#define pfs(a) printf("%s",a)
#define pf1(a) printf("%d",a)
#define pf2(a,b) printf("%d %d",a,b)
#define pf1l(a) printf("%lld",a)
#define pf2l(a,b) printf("%lld %lld",a,b)
#define pf1d(a) printf("%lf",a)
#define pf2d(a,b) printf("%lf %lf",a,b)

#define pii pair<int,int>
#define pll pair<long long,long long>
#define mp make_pair
#define F first
#define S second
#define pb push_back

#define mem0(a) memset(a,0,sizeof(a))
#define mem1(a) memset(a,-1,sizeof(a))

#define read freopen("input.txt","r",stdin)
#define write freopen("output.txt","w",stdout)

long long inline gcd(long long x,long long y){return !y?(long long)abs(x):gcd(y,x%y);}  //returns always positive gcd
long long inline lcm(long long a,long long b){return ((long long)abs((a/gcd(a,b))*b));} //returns always positive lcm
double inline cartesian_dist(double x1,double y1,double x2,double y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}

long long bigmod(long long b,long long p,long long m){              //for both positive and negative base
    if(!p)return 1%m;
    else if(p&1)return (((b%m)+m)%m*bigmod(b,p-1,m))%m;
    else {long long ret=bigmod(b,p/2,m);return (ret*ret)%m;}
}
// inverse will exist if and only if gcd(a,m) is 1
long long inverse(long long a,long long m){return bigmod(a,m-2,m);}  //if Mod is prime
long long extended(long long a,long long m){
    long long oldr=a,r=m,oldans=1,ans=0,quotient;
    while(r){
        quotient=oldr/r;
        oldr=oldr-r*quotient;
        swap(oldr,r);
        oldans=oldans-ans*quotient;
        swap(oldans,ans);
    }
    return ((oldans%m)+m)%m;
}

//template<class t1,class t2>  bool checkBit(t1 &mask,t2 i){return mask&((t1)1<<i);}
//template<class t1,class t2>  void setBit(t1 &mask,t2 i){mask=mask|((t1)1<<i);}
//template<class t1,class t2>  void resetBit(t1 &mask,t2 i){mask=mask&~((t1)1<<i);}


typedef long long ll;
const double PI=acos(-1.0);
const double eps=10E-12;
# define inf 100000000
ll MOD=101LL;

string convertedNum;
ll dp[10+1][64][2][2][2048],sz[10+2],cnt[10+2];

void convertNum(ll num,ll base){
    while(num){
        convertedNum+=(int)(num%base)+48;
        num/=base;
    }
    reverse(convertedNum.begin(),convertedNum.end());
    //cout<<convertedNum<<endl;
}
ll calculate(int base,int idx,int high,int low,int state){
    if(idx==(int)convertedNum.size()){
        if(low)return 0LL;
        for(int i=0;i<base;i++)if(cnt[i]%2!=0)return 0LL;
        return 1LL;
    }

    ll &ret=dp[base][idx][high][low][state];
    if(ret!=-1 && !high)return ret;

    ret=0;

    int up=base-1;
    if(high)up=convertedNum[idx]-48;
    for(int i=up;i>=0;i--){
        if(high){
            if(i==up){
                if(low && !i)ret+=calculate(base,idx+1,1,1,state);
                else {
                    state-=(cnt[i]%2)*(1<<i);
                    ++cnt[i];
                    state+=(cnt[i]%2)*(1<<i);

                    ret+=calculate(base,idx+1,1,0,state);

                    state-=(cnt[i]%2)*(1<<i);
                    --cnt[i];
                    state+=(cnt[i]%2)*(1<<i);
                }
            }
            else {
                if(low && !i)ret+=calculate(base,idx+1,0,1,state);
                else {
                    state-=(cnt[i]%2)*(1<<i);
                    ++cnt[i];
                    state+=(cnt[i]%2)*(1<<i);

                    ret+=calculate(base,idx+1,0,0,state);

                    state-=(cnt[i]%2)*(1<<i);
                    --cnt[i];
                    state+=(cnt[i]%2)*(1<<i);
                }
            }
        }
        else {
            if(low && !i)ret+=calculate(base,idx+1,0,1,state);
            else {
                state-=(cnt[i]%2)*(1<<i);
                ++cnt[i];
                state+=(cnt[i]%2)*(1<<i);

                ret+=calculate(base,idx+1,0,0,state);

                state-=(cnt[i]%2)*(1<<i);
                --cnt[i];
                state+=(cnt[i]%2)*(1<<i);
            }
        }
    }
    return ret;
}
void makeReady(){
    mem1(dp);
    for(int i=2;i<=10;i++){
        convertedNum.clear();
        mem0(cnt);

        convertNum((ll)1e18,i);
        sz[i]=convertedNum.size();

        calculate(i,0,1,1,0);
    }
}
void getNum(ll num,int base){
    convertedNum.clear();
    mem0(cnt);

    convertNum(num,base);
    reverse(convertedNum.begin(),convertedNum.end());
    while(convertedNum.size()<sz[base])convertedNum+="0";
    reverse(convertedNum.begin(),convertedNum.end());
}
int main(){
    makeReady();

    ll q,b,l,r;
    sc1l(q);
    while(q--){
        sc3l(b,l,r);

        getNum(r,b);
        ll up=calculate(b,0,1,1,0);

        getNum(l-1,b);
        ll down=calculate(b,0,1,1,0);

        pf1l(up-down);br;
    }
    return 0;
}
