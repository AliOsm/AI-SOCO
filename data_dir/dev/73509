/*
ID: essi
LANG: C++
TASK: .cpp
*/
/*

explanation:
	
	suppose all possible value of x,  (2 <=x <= 2k)
	for every value of x check all pair and calculate 
		number of replacement to achieve to x and take the minimum between all receive value

		exmaple tesst case 3
			8 7
		a = 6 1 1 7 6 3 4 6

		2 <= x <= 14
		res = float('inf')
		for x in range(2, 14):
			co = 0
			for pair in a:
				co+= check(x, pair)
			res = min(res, co)
		print(res)

		complexity of this program is O(n * k)
		and this means time limit
		how work faster?
			lets precalcute for every pair:
				1- if We don't need to change anything in this pair, then which x are reachable
				2- if we replace atleast one element, whichs x are reachable
				3- if we replace exctly two element, whichs x are reachable
				for (1) it very easy calculate with O(n + k)
				for (2) we must use prefix sum. written in my notebook O(n + k)
				for (3) n//2 - prefix[x]
				at the end:
				for x in range(2, 14):
					res = min(res, (prefx−cntx)+(n//2−prefx)*2 )

				complexity of this program is O(n + k)
*/

#include <bits/stdc++.h>
using namespace std;
#define sep ios::sync_with_stdio(0),cin.tie(0)
#define ll long long int
#define all(n) n.begin(), n.end()
#define rall(n) n.rbegin(), n.rend()
const int MXI = 2e5+14;

void solve() {
	int n, k; cin >> n >> k;
	vector<int> a(n);
	for (auto &it: a) cin >> it;
	unordered_map<int, int> cnt;// without any replacement
	for (int i = 0; i < n / 2; ++i) 
		++cnt[a[i] + a[n - i - 1]];
	// for atleast one replacement
	/*for (auto X: cnt)
		cout << X.first << " " << X.second << "\n";*/
	vector<int> prefix(2 * k + 10, 0);
	int l, r;
	for (int i = 0; i < n / 2; ++i) {
		l = min(a[i], a[n - i - 1]) + 1;
		r = max(a[i], a[n - i - 1]) + k;
		++prefix[l];
		--prefix[r + 1];
	}
	// prefix sum
	for (int i = 1; i < 2 * k + 5; ++i)
		prefix[i]+= prefix[i - 1];
	int res = 3e5;
	// number of pair with exctly two replacement = all pair - number of pair with atleast one replacement
	int move;
	for (int x = 2; x <= 2 * k; ++x) {
		move = ((n / 2 - prefix[x]) * 2) + (prefix[x] - cnt[x]);
		res = min(move, res);
	};
	cout << res << "\n";
}

int main() {
    sep;
    int t;
    cin >> t;
    while (t--) solve();
    return 0;
}	