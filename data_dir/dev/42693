#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<vector>
using namespace std;
#define FOR(I,N) for(int(i)=0;i<int(N);++i)
const int N = 1e5 + 2;
int n, m, x, y, q, d;
vector<int>v[N];
int ID, LineOf[N], IdxOf[N], par[N], NodesInLine[N] , rootCount;
vector<int>rootbit;
vector<vector<int> >bits;
void update(int node ,vector<int> & bit ,int size ,int val){
    while (node <= size){
        bit[node] += val;
        node += node &-node;
    }
}
int get(int node, vector<int> & bit){
    int ret = 0;
    while (node){
        ret += bit[node];
        node -= node &-node;
    }
    return ret;
}
void DFS(int src, int dep){
    LineOf[src] = ID;
    IdxOf[src] = dep;
    NodesInLine[ID]++;
    bits[ID].push_back(0); 
    rootbit.push_back(0);
    FOR(0, v[src].size()){
        int nxt = v[src][i];
        if (nxt == par[src])
            continue;
        par[nxt] = src;
        if (src == 1){
            ++ID;
            bits.push_back(vector<int>(1,0));
        }
        DFS(nxt, dep + 1);
    }
}
int main(){
    bits.push_back(vector<int>(1, 0));
    rootbit.push_back(0);
    scanf("%d%d", &n, &m);
    FOR(0, n - 1){
        scanf("%d%d", &x, &y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    DFS(1, 0);
    while (m--){
        scanf("%d", &q);
        if (q){
            scanf("%d", &x);
            if (x == 1)
                printf("%d\n", rootCount);
            else
                printf("%d\n", get(IdxOf[x], bits[LineOf[x]]) + get(IdxOf[x], rootbit));
        }
        else{
            scanf("%d%d%d", &x, &y, &d);
            int myLine = LineOf[x];
            if (IdxOf[x] <= d){
                if (x != 1){
                    update(d - IdxOf[x] + 1, bits[myLine], NodesInLine[myLine], y);
                    update(IdxOf[x] + d + 1, bits[myLine], NodesInLine[myLine], -y);
                }
                if (d != IdxOf[x]) {
                    update(1, rootbit, n, y);
                    update(d - IdxOf[x] + 1, rootbit, n, -y);
                }
                rootCount += y;
            }
            else{
                update(IdxOf[x] - d, bits[myLine], NodesInLine[myLine], y);
                update(IdxOf[x] + d + 1, bits[myLine], NodesInLine[myLine], -y);
            }
        }
    }
}