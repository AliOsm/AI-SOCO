#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <hash_map>
#include <map>
#include <hash_set>
#include <set>
#include <stack>
#include <algorithm>
#include <sstream>
#include <queue>
#include <math.h>
using namespace std;
typedef long long LL;
#define mems(arr, val) memset(arr, val, sizeof(arr));
#define all(A) A.begin(), A.end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define INF 2000000000
#define SIZE 1000009
#define mp(a, b) make_pair(a, b)


int main()
{
#ifdef MY_SOL
	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
#endif
	int n;
	cin>>n;
	vector<LL> a(n);
	forn(i, 0, n)
		cin>>a[i];
	vector<LL> sum(n + 1);
	sum[0] = 0;
	forn(i, 0, n)
		if (a[i] > 0) sum[i + 1] = sum[i] + a[i]; else sum[i + 1] = sum[i];


	map<LL, vector<LL>> M;
	forn(i, 0, n)
		M[a[i]].push_back(i);
	LL ans = -2000000001;
	LL ansL, ansR;
	for(auto it = M.begin(); it != M.end(); ++it)
	{
		if (it->second.size() >= 2)
		{
			int l = it->second.front();
			int r = it->second.back();
			LL tsum = it->first * 2;
			tsum += sum[r] - sum[l + 1];
			if (tsum > ans)
				{
					ansL = l;
					ansR = r;
					ans = tsum;
				}
		}
	}
	vector<LL> tree;
	forn(i, 0, n)
	{
		if (i == ansL || i == ansR) continue;
		if (i < ansL || i > ansR) tree.push_back(i + 1);
		else
		{
			if (a[i] < 0) tree.push_back(i + 1);
		}
	}

	cout<<ans<<" "<<tree.size()<<endl;
	forn(i, 0, tree.size())
	{
		cout<<tree[i]<<" ";
	}

	return 0;
}

