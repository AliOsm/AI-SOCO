#include<bits/stdc++.h>

using namespace std;

typedef long long LL;
typedef unsigned long long uLL;
typedef long double ldb;
typedef pair<int,int> pii;

int D[1000001];

LL S[1300000];
int N[1300000];

void build(int id, int sl, int sr)
{
    if(sl + 1 == sr)
    {
        cin>>S[id];
        N[id] = D[S[id]] != S[id];
        return;
    }
    int idl = id<<1;
    int idr = idl|1;
    int mid = (sl + sr) >> 1;
    build(idl, sl, mid);
    build(idr, mid, sr);
    N[id] = N[idl] + N[idr];
    S[id] = S[idl] + S[idr];
}

LL sum(int id, int sl, int sr, int l, int r)
{
    if(sl >= r || l >= sr)
        return 0;
    if(l <= sl && sr <= r)
        return S[id];
    int idl = id<<1;
    int idr = idl|1;
    int mid = (sl + sr) >> 1;
    return sum(idl, sl, mid, l, r) + sum(idr, mid, sr, l, r);
}

void R(int id, int sl, int sr, int l, int r)
{
    if(sl >= r || l >= sr || !N[id])
        return;
    if(sl + 1 == sr)
    {
        S[id] = D[S[id]];
        N[id] = D[S[id]] != S[id];
        return;
    }
    int idl = id<<1;
    int idr = idl|1;
    int mid = (sl + sr) >> 1;
    R(idl, sl, mid, l, r);
    R(idr, mid, sr, l, r);
    N[id] = N[idl] + N[idr];
    S[id] = S[idl] + S[idr];
}

int main()
{
    ios_base::sync_with_stdio(0);cin.tie(0);
    for(int i = 1; i <= 1000000; ++i)
        for(int j = i; j <= 1000000; j += i)
            ++D[j];
    int n, m;
    cin>>n>>m;
    build(1, 1, n+1);
    while(m--)
    {
        int t, l, r;
        cin>>t>>l>>r;
        if(t == 1)
            R(1, 1, n+1, l, r+1);
        else
            cout<<sum(1, 1, n+1, l, r+1)<<'\n';
    }
    return 0;
}
