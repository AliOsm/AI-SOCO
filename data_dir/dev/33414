#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define ll long long
#define ull unsigned long long

struct expr
{
    int f, op, s;

    expr()
    {};

    expr(int _f) : f(_f)
    {
        op = -1;
    }

    expr(int _f, int _op, int _s)
            : f(_f), op(_op), s(_s)
    {
    }
};

const int N = 1e4 + 3, M = 1e3 + 3;
int n, m, id;
string v, f, op, s, mn, mx;
map<string, int> ids;
expr mp[N];
char vals[N];
string toStr[N];
map<string, int> oper;
char bit;

char val(int s, int i)
{
    if (toStr[s] == "?") return bit;
    if (vals[s] != -1) return vals[s];
    if (toStr[s][0] == '0' || toStr[s][0] == '1') return toStr[s][i];

    if (mp[s].op == -1)
    {
        vals[s] = val(mp[s].f, i);
    }
    else if (mp[s].op == 2)
    {
        vals[s] = (val(mp[s].f, i) == val(mp[s].s, i)) ? '0' : '1';
    }
    else if (mp[s].op == 0)
    {
        vals[s] = (val(mp[s].f, i) == '0' || val(mp[s].s, i) == '0') ? '0' : '1';
    }
    else
    {
        vals[s] = (val(mp[s].f, i) == '0' && val(mp[s].s, i) == '0') ? '0' : '1';
    }

    return vals[s];
}

bool solve(int i)
{
    for (int j = 1 ; j <= id ; j++)
        val(j, i);
}

void add(string &s)
{
    if (ids.count(s) != 0) return;
    ids[s] = ++id;
    toStr[id] = s;
}

int main()
{
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);

    oper["AND"] = 0;
    oper["OR"] = 1;
    oper["XOR"] = 2;

    cin >> n >> m;
    for (int i = 0; i < n; i++)
    {
        cin >> v;

        add(v);
        cin >> op >> f;

        add(f);

        if (f[0] >= '0' && f[0] <= '1')
        {
            mp[ids[v]] = expr(ids[f]);
        }
        else
        {
            cin >> op >> s;
            add(s);
            mp[ids[v]] = expr(ids[f], oper[op], ids[s]);
        }
    }

    for (int i = 0; i < m; i++)
    {
        memset(vals , -1 , sizeof vals);
        bit = '1';
        solve(i);

        int cnt1 = 0, cnt2 = 0;
        for (int j = 1 ; j <= id ; j++)
            if (vals[j] == '1')
                cnt1++;

        memset(vals , -1 , sizeof vals);

        bit = '0';
        solve(i);
        for (int j = 1 ; j <= id ; j++)
            if (vals[j] == '1')
                cnt2++;

        if (cnt1 == cnt2)
        {
            mn += '0';
            mx += '0';
        }
        else if (cnt1 > cnt2)
        {
            mn += '0';
            mx += '1';
        }
        else
        {
            mn += '1';
            mx += '0';
        }
    }
    cout << mn << '\n' << mx;

    return 0;
}