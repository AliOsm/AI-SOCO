/*...Part - 01...*/

#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <stack>
#include <queue>
#include <deque>
#include <iterator>
#include <bitset>
#include <assert.h>
#include <new>
#include <sstream>
//#include <bits/stdc++.h>
using namespace std ;

/*...Part - 02...*/

typedef long long               ll ;
typedef long double             ld ;
typedef unsigned long long      ull ;
typedef pair<int,int>           pii ;
typedef pair<ll,ll>             pll ;
typedef vector<int>             vi ;
typedef vector<ll>              vll ;
typedef vector<vector<int>>     vvi ;

int Int(){int x ; scanf("%d",&x) ; return x ;}
ll Long(){ll x ; scanf("%lld",&x) ; return x ;}

/*...Part - 03...*/
/*....Debugger....*/

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string> it) {cout << endl ;}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
    cerr << *it << " = " << a << ' ' ;
    err(++it, args...);
}

/*...Part - 04...*/
/*...Needed to change according to problem requirements...*/

const int N          = (int)2e5 + 5 ;
const int maxN       = (int)1e6 + 6 ;
const ll  Mod        = (ll)1e9 + 7 ;
const int inf        = (int)2e9 ;
const ll  Inf        = (ll)1e18 ;

/*..........................................................*/
/*...Part - 05...*/

#define     debug(x)    cerr << #x << " = " << x << '\n' ;
#define     rep(i,b,e)  for(__typeof(e) i = (b) ; i != (e + 1) - 2 * ((b) > (e))  ; i += 1 - 2 * ((b) > (e)))
#define     Int         Int()
#define     Long        Long()
#define     all(x)      x.begin() , x.end()
#define     sz(x)       (int)x.size()
#define     ff          first
#define     ss          second
#define     pb          push_back
#define     eb          emplace_back
#define     mem(a)      memset(a , 0 ,sizeof a)
#define     memn(a)     memset(a , -1 ,sizeof a)

/*...Part - 06...*/
/*...... ! Code start from here ! ......*/

const int len = 350 ;

int a[N], nxt[N], cnt[N], last[N], n, q;


void update(int p, int v){
    int b = p / len ;
    int limit = max(0, b* len) ;
    a[p] = v ;
    int cn = 0, ind = p, lid = p ;
    //error(limit)
    while(ind / len == b and ind < n){
        lid = ind ;
        ind += a[ind] ;
        ++cn ;
    }
    cnt[p] = cn, nxt[p] = min(ind, n), last[p] = lid;
    //error(p, cnt[p], nxt[p], last[p])
    for(int i = p - 1 ; i >= limit ; --i){
        if(i / len < (i + a[i]) / len){
            cnt[i] = 1 ;
            last[i] = i ;
            nxt[i] = min(i + a[i], n) ;
        }
        else{
            if(i + a[i] >= n){
                cnt[i] = 1 ;
                last[i] = i ;
                nxt[i] = n ;
            }
            else{
                cnt[i] = 1 + cnt[i + a[i]] ;
                last[i] = last[i + a[i]] ;
                nxt[i] = nxt[i + a[i]] ;
            }
            
            //error(i, cnt[i], last[i], nxt[i])
        }
    }
}

void query(int p){
    int res = 0, id = p ;
    while(p < n){
        res += cnt[p] ;
        id = p ;
        p = nxt[p] ;
    }
    printf("%d %d\n",last[id] + 1, res);
}

void dispaly(){
    for(int i = 0 ; i < n ; ++i)error(cnt[i], nxt[i], last[i])
}


int main(){
    int test = 1 , tc = 0 ;
    while(test--){
        n = Int, q = Int ;
        for(int i = 0 ; i < n ; ++i){
            a[i] = Int ;
        }
        for(int i = 0 ; i < n ; ++i){
            int cn = 0, ind = i, b = i / len, lid = 0;
            while(ind / len == b and ind < n){
                lid = ind ;
                ind += a[ind] ;
                ++cn ;
            }
            cnt[i] = cn, nxt[i] = min(ind, n), last[i] = lid;
        }
        //dispaly() ;
        while(q--){
            int tp = Int ;
            if(tp == 0){
                int l = Int - 1 , r = Int ;
                update(l, r) ;
                //dispaly() ;
            }
            else{
                int x = Int ;
                query(x - 1) ;
            }
        }
    }
    return 0 ;
}

/*...Always look at the part - 04...*/
/*...............END................*/


