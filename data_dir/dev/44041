#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
#define re return
#define ll long long
#define ull unsigned ll
#define ld long double
#define f first
#define s second
#define pi acos(-1)
#define oo (ll)1e9+8
#define OO 1e18
#define EPS 1e-6
#define Endl '\n'
#define FX(n) fixed<<setprecision(n)
#define mm(o,k) memset(o,k,sizeof o)
#define IO ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
using namespace std;
const int maxn=200005;
const int N=200005,M=2*N;
vector<int> nodes;
int vis[maxn],vid(1);
int ones[maxn],n,m,d,cnt;
int head[N],to[M],nxt[M],ne;
void init(){
    ne=0;
    memset(head,-1,(n+1)*sizeof head[0]);
}
void add_edge(int f,int t){
    to[ne]=t;
    nxt[ne]=head[f];
    head[f]=ne++;
}
inline void add_bi_edge(int a,int b){
    add_edge(a,b);
    add_edge(b,a);
}
vector<pair<int,int> > ret,out;
void dfs(int u,bool mnen){
    vis[u]=vid;
    if(ones[u]&&mnen)
        nodes.push_back(u);
    for(int e=head[u];~e;e=nxt[e]){
        int v=to[e];
        if(vis[v]!=vid){
            if(!mnen)out.push_back({u,v});
            dfs(v,mnen);
        }
    }
}
vector<vector<int> > comp;
void _3be_el_edges(){
    ++vid;
    while(d){
        for(auto &i:comp){
            if(!d)break;
            if(i.size()){
                --d;
                vis[i.back()]=vid;
                ret.push_back({1,i.back()});
                i.pop_back();
            }
        }
    }
    for(auto i:ret)
        dfs(i.s,0);
}
int main()
{
    scanf("%d%d%d",&n,&m,&d);
    init();
    for(int i=0;i<m;++i){
        int x,y;
        scanf("%d%d",&x,&y);
        if(x>y)swap(x,y);
        if(x==1){ones[y]=1;++cnt;continue;}
        add_bi_edge(x,y);
    }
    if(d>cnt)exit(puts("NO"));
    if(cnt==m){
        if(cnt>d)exit(puts("NO"));
        puts("YES");
        for(int i=2;i<=n;++i)
            printf("1 %d\n",i);
        exit(0);
    }
    for(int i=2;i<=n;++i){
        nodes.clear();
        if(vis[i]==vid)continue;
        dfs(i,1);
        if(nodes.empty())exit(puts("NO"));
        comp.push_back(nodes);
    }
    if(comp.size()>d)exit(puts("NO"));
    _3be_el_edges();
    puts("YES");
    for(auto i:ret)printf("%d %d\n",i.f,i.s);
    for(auto i:out)printf("%d %d\n",i.f,i.s);
    re 0;
}