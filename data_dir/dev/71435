#include <bits/stdc++.h>
using namespace std;

#define REP(i, n) for(int i = 0; i < n; i++)
#define clr(t, val) memset(t, val, sizeof(t))

#define all(v)  v.begin() , v.end()
#define SZ(v) ((int)(v).size())

typedef long long Long;
typedef vector<int> vInt;
typedef vector<vInt> vvInt;
typedef vector<string> vStr;
typedef pair<int, int> Pair;
typedef pair<Long, Long> PairLong;
typedef vector<Pair> vPair;
typedef vector<PairLong> vPairLong;

int ones(int x) {
	return __builtin_popcount(x);
}

const int MAX_N = 1000;
int dist[MAX_N + 1];
void calc() {
	dist[1] = 0;
	for (int x = 2; x <= MAX_N; x++) {
		dist[x] = 1 + dist[ones(x)];
	}
}

const int MOD = (int)1e9 + 7;
string limit;
bool used[MAX_N + 1][MAX_N + 1][2];
int memo[MAX_N + 1][MAX_N + 1][2];
void fix(int &x) {
	if (x >= MOD) {
		x -= MOD;
	}
}

int dp(int pos, int bits, int isLess) {
	if (pos == SZ(limit)) {
		return (bits == 0);
	}
	if (used[pos][bits][isLess]) {
		return memo[pos][bits][isLess];
	}
	used[pos][bits][isLess] = true;
	int &ans = memo[pos][bits][isLess] = 0;
	REP (i, 2) {
		if (!isLess && limit[pos] < i) {
			continue;
		}
		if (bits - i >= 0) {
			ans += dp(pos + 1, bits - i, (isLess || (limit[pos] > i)));
			fix(ans);
		}
	}
	return ans;
}

int main() {
	calc();
	
	int K;
	while (cin >> limit >> K) {
		if (K == 0) {
			cout << 1 << '\n';
			continue;
		}
		if (K == 1) {
			cout << SZ(limit) - 1 << '\n';
			continue;
		}
		for (auto &c:limit){
			c -= '0';
		}
		clr(used, 0);
		int ans = 0;
		for (int i = 1; i <= SZ(limit); i++) {
			if (dist[i] == K - 1) {
				ans += dp(0, i, 0);
				fix(ans);
			}
		}
		cout << ans << '\n';
	}	
}
