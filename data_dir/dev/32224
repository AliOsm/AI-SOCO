#include <string.h>
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <set>
 
#include <map>
#include <vector>
#include <string>
#include <stdlib.h>
 
#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf
 
#define pf printf
#define mp make_pair
 
using namespace std;
const int N = 600100;
const int mod = 1000000007;

int a[N],b[N];
int pos[N];
 
int main() {
	int n;
	cin>>n;
	fr(i,1,n+1) {
		sf("%d",&a[i]);
		b[i] = a[i];
		pos[i] = 0;
	}
	int q;
	cin>>q;
	vector<pair<int,int> > ft;
	map<int,int> mft;
	fr(i,1,q+1) {
		int c;
		sf("%d",&c);
		if(c==1) {
			int p,x;
			sf("%d%d",&p,&x);
			b[p]=x;
			pos[p] = i;
		}
		else {
			int x;
			sf("%d",&x);
			ft.pb( mp(i,x) );
			//printf("i = %d x = %d\n",i,x);
		}
	}

	int sum = 0;
	for(int i = ft.size()-1; i >=0;--i) {
		sum = max(sum, ft[i].second);
		mft[ft[i].first] = sum;
		//printf("pos = %d max = %d\n",ft[i].first, sum);
	}

	for(int i = 1; i<=n; ++i) {
		auto it = mft.lower_bound(pos[i]);
		if(it!=mft.end()) {
			//printf("i = %d b = %d find = %d\n",i,b[i],it->second);
			b[i] = max(b[i],it->second);
		}
		pf("%d ",b[i]);
	}
	pf("\n");

}


