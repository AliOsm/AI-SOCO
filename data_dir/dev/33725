#include <bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-9, PI = acos(-1);
const int N = 2e5 + 9, OO = 1e9 + 7, MOD = 998244353;
const ll INF = 1e18;
using namespace std;

vector<int> adj[N];
int dist[N][3];

void bfs(int node, int par) {
	queue<int> q;
	q.push(node);
	dist[node][par] = 0;
	while(!q.empty()) {
		int tp = q.front();
		q.pop();
		for(auto it: adj[tp]) {
			if(dist[it][par] > dist[tp][par] + 1) {
				dist[it][par] = dist[tp][par] + 1;
				q.push(it);
			}
		}
	}
}

int main() {
	fastIO;
#ifdef LOCAL
//	freopen("input.in", "rt", stdin);
#endif
	int t;
	cin >> t;
	while (t--) {
		int n, m, a,b, c, u, v;
		cin >> n >> m >> a >> b >> c;
		for (int i = 1; i <= n; ++i) {
			adj[i].clear();
			for (int j = 0; j < 3; ++j)
				dist[i][j] = OO;
		}
		vector<ll> costs(m + 1);
		for (int i = 1; i <= m; ++i)
			cin >> costs[i];
		sort(all(costs));
		for (int i = 1; i <= m; ++i)
			costs[i] += costs[i - 1];
		for (int i = 0; i < m; ++i) {
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		bfs(a, 0), bfs(b, 1), bfs(c, 2);
		ll ans = INF;
		for (int i = 1; i <= n; ++i) {
			int x = dist[i][0], y = dist[i][1], z = dist[i][2];
			if(x + y + z > m) continue;
			ll cur = costs[x + y + z] + costs[y];
			ans = min(ans, cur);
		}
		cout << ans << '\n';
	}
	return 0;
}
