/**
 * @author khokharnikunj8
 */

#include <bits/stdc++.h>

using namespace std;

class CFadiAndLCM {
public:
    void solve(std::istream &in, std::ostream &out) {
        long long x;
        in >> x;
        if (x == 1) {
            out << "1 1\n";
            return;
        }
        vector<long long> factors;
        for (long long i = 2; i * i <= x; i++) {
            if (x % i == 0) {
                long long which = 1;
                while (x % i == 0) {
                    which *= i;
                    x /= i;
                }
                factors.push_back(which);
            }
        }
        if (x > 1) factors.push_back(x);
        int len = (int) factors.size();
        long long min = LONG_LONG_MAX / 2;
        pair<long long, long long> ans = {-1, -1};
        for (int i = 0; i < (1 << len); i++) {
            long long first = 1;
            long long second = 1;
            for (int j = 0; j < len; j++)
                if ((i & (1 << j)))first *= factors[j];
                else second *= factors[j];
            if (max(first, second) < min) {
                min = max(first, second);
                ans = {first, second};
            }
        }
        out << ans.first << " " << ans.second << "\n";
    }
};


int main() {
	CFadiAndLCM solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
