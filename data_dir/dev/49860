/**
SXR0aXAkI0JwbXptI3FhI3Z3I293bCNqY2IjUG0jMCNicG0jVHFkcXZvLyNCcG0jQW10bjBhY2phcWFicXZvLyNNYm16dml0MSNWdyNhdGN1am16I2tpdiNhbXF9bSNQcXUjVnd6I0F0bW14MSNQcWEjaXptI2l0dCNicHF2b2EjUXYjYnBtI3BtaWRtdmEjaXZsI3d2I21pemJwMSNFcHcjcWEjYnBtem0ja2l2I3F2Ym16a21sbSNRdiNQcWEjeHptYW12a20jbXtrbXhiI0lhI3BtI3htenVxYmJtYnBHI1BtI3N2d2VtYnAjRXBpYiMraXh4bWl6bWJwI2J3I1BxYSNrem1pYmN6bWEjSWEsI0ptbnd6bSN3eiNJbmJteiN3eiNKbXBxdmwjYnBtdTEjVnd6I2FwaXR0I2JwbXwja3d1eGlhYSNJY29wYiN3biNwcWEjc3Z3ZXRtbG9tI017a214YiNpYSNQbSNlcXR0bWJwMSNQcWEjYnB6d3ZtI2x3YnAjbXtibXZsI1dkbXojYnBtI3BtaWRtdmEjSXZsI3d2I21pemJwLyNpdmwjUG0jbm1tdG1icCNWdyNuaWJxb2NtI3F2I29jaXpscXZvI0l2bCN4em1hbXpkcXZvI2JwbXUvI053eiNQbSNxYSNicG0jVXdhYiNQcW9wMSNCcG0jQWN4em11bSMrcXYjb3R3enwsMQ==
*/
#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <queue>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>

#define F first
#define S second
#define endl '\n'
#define deb(x) cout<<#x<<' '<<x<<endl;
#define pb push_back

const long long MAXN = 1e6 + 1;
const long long MOD = 3333 + 7;
using namespace std;

typedef pair<int, int> pii;


long long readInt() {
    bool minus1 = false;
    long long result = 0;
    char ch;
    ch = getchar();
    while (true) {
        if (ch == '-') break;
        if (ch >= '0' && ch <= '9') break;
        ch = getchar();
    }
    if (ch == '-') minus1 = true; else result = ch-'0';
    while (true) {
        ch = getchar();
        if (ch < '0' || ch > '9') break;
        result = result*10 + (ch - '0');
    }
    if (minus1)
        return -result;
    else
        return result;
}

const int MNN = 505;
int n, dp[MNN][MNN][28];
char b[MNN];
/*
int DP(int l, int r, int letter){
    if (l > r) {
        return 0;
    }
    if (dp[l][r][letter] != -1) return dp[l][r][letter];
    int ans = MOD;
    if (b[l] - 'a' == letter) {
        ans = min(ans, DP(l + 1, r, letter));
        for (int i = 0; i < 26; i++) {
            ans = min(ans, DP(l + 1, r, i) + 1);
        }
    }
    if (b[r] - 'a' == letter) {
        ans = min(ans, DP(l, r - 1, letter));
        for (int i = 0; i < 26; i++) {
            ans = min(ans, DP(l, r - 1, i) + 1);
        }
    }
    for (int i = l; i < r; i++) {
        ans = min(ans, DP(l, i, letter) + DP(i + 1, r, letter));
    }
	return dp[l][r][letter] = ans;
}
*/
main(){
    n = readInt();
    for (int len = 0; len <= n; len++) {
        for (int i = 1; i + len <= n; i++) {
            int j = i + len;
            for (int left = 0; left < 26; left++) {
                dp[i][j][left] = MOD;
            }
        }
    }
    for(int i = 1; i <= n; i++){
        cin >> b[i];
    }
    for (int len = 0; len <= n; len ++) {
        for (int i = 1; i  + len <= n; i++) {
            int j = i + len;
            for (int letter = 0; letter < 26; letter++) {
                int& ans = dp[i][j][letter];
                if (len == 0) {
                    if (b[i] - 'a' == letter) {
                        dp[i][j][letter] = 0;
                    }
                    continue;
                }
                if (b[i] - 'a' == letter) {
                    dp[i][j][letter] = min(dp[i][j][letter], dp[i + 1][j][letter]);
                    for (int kek = 0; kek < 26; kek++) {
                        dp[i][j][letter] = min(dp[i][j][letter], dp[i + 1][j][kek] + 1);
                    }
                }
                if (b[j] - 'a' == letter) {
                    dp[i][j][letter] = min(dp[i][j][letter], dp[i][j - 1][letter]);
                    for (int kek = 0; kek < 26; kek++) {
                        dp[i][j][letter] = min(dp[i][j][letter], dp[i][j - 1][kek] + 1);
                    }
                }
                for (int mid = i; mid < j; mid ++) {
                    dp[i][j][letter] = min(dp[i][mid][letter] + dp[mid + 1][j][letter], dp[i][j][letter]);
                }
            }
        }
    }
    cout << *min_element(dp[1][n], dp[1][n] + 26) + 1;
    return 0;
}
