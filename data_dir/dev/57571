#include <iostream>

#include <algorithm>

using namespace std;

typedef long long llong;

#define MAXN 100004
int N;
llong V[MAXN];
llong T[MAXN];
llong PS[MAXN];

llong sobra[MAXN];

struct Update {
   int L, R;
   llong delta;
};

Update updates[MAXN];

llong deltas[MAXN];
llong factores[MAXN];

int main() {
   cin >> N;
   for (int i = 1; i <= N; i++)
      cin >> V[i];
   for (int i = 1; i <= N; i++)
      cin >> T[i];
  
   for (int i = 1; i <= N; i++) {
      PS[i] = PS[i-1] + T[i];
  //    cerr << PS[i] << ' ';
   }
  // cerr << endl;

   for (int i = 1; i <= N; i++) {
      llong target = V[i] + PS[i-1];
      int idx = lower_bound(PS+1 , PS+1+N, target) - PS;
    // cerr << idx << endl;
      sobra[idx] +=  V[i] - (PS[idx-1] - PS[i-1]);
      // if (i >= N-1)
      //   cerr << "Dia " << i << " con vol " << V[i]
    //          << " con temp " << T[i]
      //        << "  sobra es " <<  V[i] - (PS[idx-1] - PS[i-1])
    //          << " deposita en pos " << idx << endl;
      updates[i] = {i, idx-1, +1};
   }

   //for (int i = 1; i <= N; i++)
  //    cerr << sobra[i] << ' ';
  //  cerr << endl;

   for (int i = 1; i <= N; i++) {
     Update upd = updates[i];
    //  cerr << "Dia " << i << " tiene update " 
  //         << upd.L << " " << upd.R << " " << upd.delta << endl;
      deltas[ upd.L ] += upd.delta;
      deltas[ upd.R+1 ] -= upd.delta;
   }

   //for (int i = 1; i <= N; i++)
  //    cerr << deltas[i] << ' ';
  // cerr << endl;

   for (int i = 1; i <= N; i++)
      factores[i] = factores[i-1] + deltas[i];

   //for (int i = 1; i <= N; i++)
  //    cerr << factores[i] << ' ';
   //cerr << endl;

   for (int i = 1; i <= N; i++) {
      cout << factores[i] * T[i] + sobra[i] << ' ';
   }
   cout << endl;
}