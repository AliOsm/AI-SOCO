#include <bits/stdc++.h>

using namespace std;

struct vec
{
    long double x,y;
    bool operator ==(const vec &a) const{
        return x==a.x&&y==a.y;
    }
    bool operator <(const vec &a) const{
        if(a.x!=x) return x<a.x;
        return y<a.y;
    }
    vec operator +(const vec &a) const{
        return {x+a.x,y+a.y};
    }
    vec operator *(const long double &a) const{
        return {x*a,y*a};
    }
    vec operator -(const vec &a) const{
        return {x-a.x,y-a.y};
    }
    vec operator /(const long double &a) const{
        return {x/a,y/a};
    }
    long double len() const{
        return sqrt(x*x+y*y);
    }
    long double dot(const vec &a) const{
        return x*a.x+y*a.y;
    }
    long double crs(const vec &a) const{
        return x*a.y-y*a.x;
    }
    vec proj(const vec &a) const{
        return (a/a.len())*(*this).dot(a)/a.len();
    }
};


struct P
{
    int x,y;
};

bool as(P a,P b)
{
    return a.x<b.x;
}

long long d,x,y,z,mod=998244353;
vector<int> v[1];
int i,n,m,k,a,b,c;
int e;
int o[1111];
int l[111][11111];
//stack<int> s;
//multiset<int> s[5111];
priority_queue<int,vector<int>,greater<int> > q;
vec u[1];
//char r[51111];
//string r,r1,r2;
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p,p1;
//v.resize(unique(v.begin(),v.end())-v.begin());

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//rng();

int f(int n,int m)
{
    if(m<0) return -987654321;
    if(n>a) return 0;
    if(l[n][m]>=0) return l[n][m];
    return l[n][m]=max(f(n+1,m),f(n+1,m-o[n])+o[n]);
}

void g(int n,int m)
{
    if(n>a) return;
    if(f(n+1,m)>f(n+1,m-o[n])+o[n])
    {
        g(n+1,m);
        return;
    }
    //puts("#");
    q.push(n);
    g(n+1,m-o[n]);
}

int main()
{
    memset(l,-1,sizeof(l));
    scanf("%d",&a);
    for(int t=1;t<=a;k+=o[t],t++)
        scanf("%d",&o[t]);
    d=o[1];
    for(int t=2;t<=a;t++)
        if(o[t]*2<=o[1]) c++,d+=o[t];
    if(d<k/2+1)
    {
        puts("0");
        return 0;
    }
    printf("%d\n",c+1);
    printf("%d ",1);
    for(int t=2;t<=a;t++)
        if(o[t]*2<=o[1])
            printf("%d ",t);
}

