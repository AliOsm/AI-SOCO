#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <bitset>
#include <complex>
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include<random>

//#pragma comment(linker, "/STACK:512000000")

using namespace std;

#define pb emplace_back
#define mp make_pair
#define all(a) (a).begin(), (a).end()
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int infi = 1e9 + 7;
const ll infl = (ll)1e18 + (ll)7;



int32_t main() {
    cin.sync_with_stdio(false);
    cin.tie(0);
    //srand(time(NULL));
    //freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<int> tmp1, tmp2;
        int ans = 0;
        for (int len = 64; len >= 1; len /= 2) {
            tmp1.clear(), tmp2.clear();
            int flag = 0;
            for (int i = 0; i < n; i += len, flag ^= 1) {
                forn(j, len) {
                    if (i + j >= n)
                        break;
                    if (flag)
                        tmp2.pb(i + j);
                    else
                        tmp1.pb(i + j);
                }
            }
            if (tmp1.empty() || tmp2.empty())
                continue;
            cout << tmp1.size() << ' ' << tmp2.size() << ' ';
            for (int a : tmp1)
                cout << a + 1 << ' ';
            for (int a : tmp2)
                cout << a + 1 << ' ';
            cout << '\n';
            cout.flush();
            int q;
            cin >> q;
            ans = max(q, ans);
            assert(q != -1);
        }
        cout << -1 << ' ' << ans << '\n';
        cout.flush();
    }

    return 0;
}