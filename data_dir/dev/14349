////////////////////////////////////////////    _LeMur_
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 500005;
const int inf = 1000 * 1000 * 1000;
const int mod = 998244353;

int n , m , q;

int mas[N];
int answ[N];
int t[4 * N];

vector < pair<long long,int> > qq;

void update(int v,int s,int e,int pos){
    if(s == e){
        t[v] = 1;
        return ;
    }
    int m = (s + e) / 2;
    if(pos <= m)
        update(2 * v , s , m , pos);
    else
        update(2 * v + 1 , m + 1 , e , pos);
    t[v] = t[2 * v] + t[2 * v + 1];
}

int get(int v,int s,int e,int k){
    if(s == e)return s;
    int m = (s + e) / 2;
    if(t[2 * v] >= k)return get(2 * v , s , m , k);
    return get(2 * v + 1 , m + 1 , e , k - t[2 * v]);
}

int main(){
	mt19937 myrand(chrono::steady_clock::now().time_since_epoch().count());
    cin >> n >> m >> q;
    for(int i=1;i<=n;i++){
        int a;
        scanf("%d",&a);
        mas[a]++;
    }
    vector < pair<int,int> > g;
    for(int i=1;i<=m;i++){
        g.push_back(make_pair(mas[i] , i));
    }
    sort(g.begin() , g.end());
    for(int i=1;i<=q;i++){
        long long k;
        scanf("%lld",&k);
        qq.push_back(make_pair(k , i));
    }
    sort(qq.begin() , qq.end());
    long long now = n;
    long long prev = n;
    int it = 0;
    int cnt = 0;
    for(int i=0;i<q;i++){
        int id = qq[i].second;
        long long year = qq[i].first;
        while(it < m && year > now){
            int st = it;
            while(it < m && g[it].first == g[st].first){
                ++cnt;
                update(1 , 1 , m , g[it].second);
                ++it;
            }
            if(it != m){
                prev = now;
                now += cnt * 1ll * (g[it].first - g[st].first);
            }
        }
        if(it == m && year > now) prev = now;
        int ind = (year - prev - 1) % cnt + 1;
        answ[id] = get(1 , 1 , m , ind);
    }
    for(int i=1;i<=q;i++){
        printf("%d\n",answ[i]);
    }
	return 0;
}

