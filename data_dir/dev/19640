//bismillahir rahmanir rahim
#include <iostream>
#include <math.h>
#include <string.h>
#include <vector>
#include <stack>
#include <algorithm>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cstdio>
#include <iterator>
#define           ll                         long  long
#define           lf                         double 
#define           pb(x)                      push_back(x)
#define           ull                        unsigned long long
#define           sfl(a)                     scanf("%lld",&a)
#define           sf(a)                      scanf("%d",&a)
#define           pf(a)                      printf("%d\n",a)
#define           pfl(a)                     printf("%lld\n",a)
#define           pdl(a)                     printf("%llf\n",a)
#define           FOR(x,n)                   for(int x=1;x<=n;++x)
#define           vii                        vector< ll > v
#define           pi                         3.14159265359
#define           mex                        10000000
#define           pii                        pair< ll , ll >
#define           mem(m,a)                   memset( m, a,sizeof m)
#define           mp(a,b)                    make_pair(a,b)
#define           maxn                       100000
#define           mod                        1000000007
#define 		  INF						 1e17
#define 		  f1 						 first
#define 		  f2						 second
#define 		  all(v)					 v.begin(),v.end()
#define           PI                         acos(-1)
#define           printminusone              print("-1\n")

using namespace std;

ll a[202010],p1,p2,lw,hi, tmp;

vector < ll > tree[802010];

void build ( ll node, ll b , ll e ){

	if ( b == e ){

		tree[node].pb ( a[b] );

		return;
	}

	ll left = node << 1;

	ll right = left + 1;

	ll m = ( b + e ) >> 1;

	build ( left, b ,m );

	build ( right, m+1 ,e );

	//merge(tree[left].begin(), tree[left].end(), tree[right].begin(), tree[right].end(), back_inserter(tree[node]));

	
	p1 = p2 = 0;

	while ( p1 < tree[left].size() and p2 < tree[right].size() ){

		if ( tree[left][p1] <= tree[right][p2] ){

			tree[node].pb ( tree[left][p1] );

			p1++;
		}

		else{

			tree[node].pb ( tree[right][p2] );

			p2++;
		}
	}

	while ( p1 < tree[left].size() ){

		tree[node].pb ( tree[left][p1] );

		p1++;
	}

	while ( p2 < tree[right].size() ){

		tree[node].pb( tree[right][p2] );

		p2++;
	}
	
}

ll query ( ll node,ll b , ll e , ll i , ll j , ll val ){


	if ( i > e or j < b or i > j){

		return 0;
	}

	if ( b >= i and e <= j ){

		//cout << b <<' ' << e << endl;

	 	lw = 0, hi = tree[node].size()-1;

	 	if ( tree[node].size() == 0 ) return 0;

	 	ll ret  = 0;

	 	while ( lw <= hi ){

	 		ll mid = ( lw + hi ) >> 1;

	 		if ( tree[node][mid] <= val ){

	 			ret = mid+1;

	 			lw = mid+1;

	 		}

	 		else{

	 			hi 	= mid-1;
	 		}
	 	}

	 	//cout  << tree[node].size()-ret << endl;

	 	return tree[node].size()-ret;
	}

	ll left = node << 1;

	ll right = left + 1;

	ll m = ( b + e ) >> 1;

	ll p1 = query( left , b , m, i , j , val );

	//cout << b <<' '<<m <<' '<<e<<' '<<i <<' '<<j << endl;

	ll p2 = query( right , m+1 ,e , i , j , val );

	//cout << p1 <<' '<<p2 << endl;

	return p1+p2;

}

int main(){

	a[0] = 0;
   
    ll n ,t;

    sfl ( n ), sfl ( t );

    ll x;

   	for ( ll i = 1; i <= n; i++  ){

   		sfl ( x );

   		if ( i == 1 ){

   			a[i] = x;
   		}

   		else{

   			a[i] = a[i-1]+x;
   		}
   	}

   	build( 1 , 0 , n );

   	ll ans = 0;

   	for ( ll i = 1; i <= n; i++ ){

   		//cout << query(1, 0 , n , 0, i-1 , a[i]-t )<<endl;

   		ans += query(1, 0 , n , 0, i-1 , a[i]-t );
   	}

   	pfl ( ans );

}