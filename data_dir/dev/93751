//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
//#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 100001

const int inf=1e9,N=2e6+10,dollar=257;
map<int,int> to[N];
int s[N];
int len[N]={inf},fps[N],link[N],k;
int node,pos,sz=1,n=0;
int totlen;
int make_node(int _pos,int _len,int _par)
{
  fps[sz]=_pos;
  len[sz]=_len;
  return sz++;
}
void go_edge()
{
  while(pos>len[to[node][s[n-pos]]])
    {
      node=to[node][s[n-pos]];
      pos-=len[node];
    }
}
void add_letter(int c)
{
  s[n++]=c;
  pos++;
  int last=0;
  while(pos>0)
    {
      go_edge();
      int edge=s[n-pos];
      int &v=to[node][edge];
      int t=s[fps[v]+pos-1];
      if(v==0)
	{
	  v=make_node(n-pos,inf,node);
	  if(len[v]==inf)
	    len[v]=totlen-fps[v];
	  link[last]=node;
	  last=0;
	}
      else if(t==c)
	{
	  link[last]=node;
	  return;
	}
      else
	{
	  int u=make_node(fps[v],pos-1,node);
	  to[u][c]=make_node(n-1,inf,u);
	  len[to[u][c]]=totlen-fps[to[u][c]];
	  to[u][t]=v;
	  fps[v]+=pos-1;
	  len[v]-=pos-1;
	  v=u;
	  link[last]=u;
	  last=u;
	}
      if(node==0)
	pos--;
      else
	node=link[node];
    }
}
void reset()
{
	for(int i=0;i<sz;i++)
	to[i].clear();
	node=pos=n=0;
	sz=1;
}
void print()
{
	for(int i=0;i<sz;i++)
	{
		for(auto it:to[i])
		{
			int x=it.S;
			cout<<i<<" "<<x<<" "<<fps[x]<<" "<<len[x]<<endl;
		}
	}
}
/*
declare string locally
set totlen=s.length()//totlen is declared globally
for(i=0;i<totlen;i++)
add_letter(s[i]);
add_letter(dollar);
*/
string s2;
ll dp[N],ans;
void dfs(ll cur,ll length)
{
	if(to[cur].size()==0)
	{
		if(s2[totlen-length]=='0')
		dp[cur]=1;
		else
		dp[cur]=0;
		ans=max(ans,dp[cur]);
		//cout<<"here"<<" "<<ans<<endl;
		return;
	}
	for(auto it:to[cur])
	{
		ll x=it.S;
		dfs(x,length+len[x]);
		dp[cur]+=dp[x];
		ans=max(ans,dp[x]*(length+len[x]));
	}
}
int main()
{
	boost1;boost2;
	string s1;
	ll i;
	cin>>totlen;
	cin>>s1>>s2;
	reverse(all(s1));
	reverse(all(s2));
	for(i=0;i<totlen;i++)
	add_letter(s1[i]);
	add_letter(dollar);
	dfs(0,0);
	cout<<ans;
	return 0;
}
