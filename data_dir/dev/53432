#include<iostream>
#include<algorithm>
#include<vector>
#include<map>

#define PB push_back
#define MP make_pair
#define F first
#define S second
using namespace std;

const int MAXN = 200005;

map<pair<int, int>, int> mp[MAXN];
vector<int> od, ans;
vector<pair<int, int> > v[MAXN];
int in[MAXN], deg[MAXN], ind[MAXN];

void DFS(int n)
{
	for(; ind[n] < v[n].size();)
	{
		auto x = v[n][ind[n]];
		ind[n]++;
		if(!mp[n][x])
		{
			mp[n][x] = mp[x.F][MP(n, x.S)] = 1;
			DFS(x.F);
		}
	}
	ans.PB(n + 1);
}

int main()
{
	int n, m;
	cin >> n >> m;
	for(int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		a--, b--;
		v[a].PB(MP(b, i));
		if(a != b)
			v[b].PB(MP(a, i));
		deg[a]++, deg[b]++;
	}
	for(int i = 0; i < n; i++)
		if(deg[i] % 2 == 1)
			od.PB(i);
	for(int i = 1; i < od.size(); i += 2, m++)
		v[od[i]].PB(MP(od[i - 1], m)), v[od[i - 1]].PB(MP(od[i], m));
	DFS(0);
	if(m % 2 == 0)
		cout << m << endl;
	else
		cout << m + 1 << endl;
	for(int i = 0; i < ans.size() - 1; i++)
		if(i % 2 == 0)
		{
			cout << ans[i] << ' ' << ans[i + 1] << endl;
			in[ans[i + 1]]++;
		}
		else
		{
			cout << ans[i + 1] << ' ' << ans[i] << endl;
			in[ans[i]]++;
		}
	for(int i = 1; i <= n; i++)
		if(in[i] % 2 == 1)
			cout << i << ' ' << i << endl;
	return 0;
}
