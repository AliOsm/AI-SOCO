#include <iostream>
#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-9
#define BASE 53ll
#define ld long double
#define MAX 1000000000
#define NIL 0
#define INF -1e18-1e10
#define infi 1000000000ll;
#define rd(a) scanf("%d",&a)
#define rdll(a) scanf("%I64d",&a)
#define sz(a) (int) a.size()
#define lp(i,a,n) for(int i=(a); i<=(n) ; ++i)
#define lpd(i,n,a) for(int i=(n); i>=(a) ; --i)
#define pi acos(-1)

typedef complex<double>CX;
typedef pair<int,int>ii;
typedef pair<int,ii>edge;
typedef pair<vector<int>,int>vii;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int N=100005;

ll mod=1000000009;
ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='y')return 1;return 0;}
ld getDistance(ld x1,ld y1,ld x2,ld y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}
ll extended_euclidean(ll a,ll b,ll &x,ll &y){if(b==0){x=1;y=0;return a;}ll g = extended_euclidean(b,a%b,y,x);y -= (a/b)*x;return g;}
ll power(ll base,ll p){if(p==1)return base;if(!p)return 1ll;ll ret=power(base,p/2);ret*=ret;ret%=mod;if(p&1)ret*=base;return ret%mod;}

string s;
int a[6];
int getCost(){
   int ret=0;
   lp(i,0,5){
      if(a[i]!=s[i]-'0')ret++;
   }
   return ret;
}
int solve(int idx){
  if(idx==6){
      if(a[0]+a[1]+a[2]==a[3]+a[4]+a[5])return getCost();
      return 6;
  }
  int mn=6;
  lp(i,0,9){
     a[idx]=i;
     mn=min(mn,solve(idx+1));
  }
  return mn;
}
int main() {
 // freopen("test.in","r",stdin);
  cin>>s;
  cout<<solve(0);
  return 0;
}
