#include <bits/stdc++.h>

using namespace std;

int n, m;

string garb;

string sa[10000];
int type[10000];

pair<string, string> sb[10000];

bool good(string &s)
{
    for(int i = 0; i < s.size(); ++i)
        if(s[i] < '0' || s[i] > '1')
            return false;
    return true;
}

map<int, int> mp;

int getHash(string s)
{
    int res = 0;
    for(int i = 0; i < s.size(); ++i)
        res = res * 31 + s[i] - 'a' + 1;
    return res;
}

int main()
{
//    freopen("input.txt", "r", stdin);
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> m;
    for(int i = 1; i <= n; ++i)
    {
        cin >> sa[i] >> garb;
        string ss;
        cin >> ss;
        if(good(ss))
        {
            sb[i] = make_pair(ss, ss);
            type[i] = 0;
        }
        else
        {
            string s1, s2;
            cin >> s1 >> s2;
            sb[i] = make_pair(ss, s2);
            if(s1 == "OR")
                type[i] = 1;
            else
            if(s1 == "AND")
                type[i] = 2;
            else
                type[i] = 3;
        }
    }
    string ans1, ans2;
    for(int bit = 0; bit < m; ++bit)
    {
        mp.clear();
        int cur = 0;
        mp[getHash("?")] = 1;
        for(int i = 1; i <= n; ++i)
        {
            if(type[i] == 0)
            {
                if(sb[i].first[bit] == '1')
                {
                    ++cur;
                    mp[getHash(sa[i])] = 1;
                }else
                    mp[getHash(sa[i])] = 0;
            }else
            {
                int p1 = mp[getHash(sb[i].first)];
                int p2 = mp[getHash(sb[i].second)];
                int kek;
                if(type[i] == 1)
                    kek = (p1 | p2);
                else
                if(type[i] == 2)
                    kek = (p1 & p2);
                else
                    kek = (p1 ^ p2);
                cur += kek;
                mp[getHash(sa[i])] = kek;
            }
        }
        mp.clear();
        mp[getHash("?")] = 0;
        int cur1 = 0;
        for(int i = 1; i <= n; ++i)
        {
            if(type[i] == 0)
            {
                if(sb[i].first[bit] == '1')
                {
                    ++cur1;
                    mp[getHash(sa[i])] = 1;
                }else
                    mp[getHash(sa[i])] = 0;
            }else
            {
                int p1 = mp[getHash(sb[i].first)];
                int p2 = mp[getHash(sb[i].second)];
                int kek;
                if(type[i] == 1)
                    kek = (p1 | p2);
                else
                if(type[i] == 2)
                    kek = (p1 & p2);
                else
                    kek = (p1 ^ p2);
                cur1 += kek;
                mp[getHash(sa[i])] = kek;
            }
        }
        if(cur1 >= cur)
        {
            ans2.push_back('0');
        }else
            ans2.push_back('1');
        if(cur1 <= cur)
        {
            ans1.push_back('0');
        }else
            ans1.push_back('1');
    }
    cout << ans1 << '\n' << ans2 << '\n';
}
