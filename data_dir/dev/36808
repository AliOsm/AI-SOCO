#include <bits/stdc++.h>

using namespace std;

const int mx = 100500;
const long long mod = 1000LL*1000LL*1000LL + 7;

vector <int> vec[mx];
vector <int> rev[mx];
long long cost[mx];
bool vis[mx];
int comp[mx];
vector<int> st;
long long mini , minicnt;

void deepika(int u)
{
    vis[u] = true;
    int i , j ,v ,  l = vec[u].size();
    for(i = 0 ; i < l ; i++)
    {
        v = vec[u][i];
        if(!vis[v])
        {
            deepika(v);
        }
    }
    st.push_back(u);
}
void katheryn(int u , int k)
{
    vis[u] = true;

    if(cost[u] < mini)
    {
        mini = cost[u];
        minicnt = 1;
    }
    else if(cost[u] == mini)
    {
        minicnt++;
    }

    int i , j , l , v;
    l = rev[u].size();

    for(i = 0 ; i < l ; i++)
    {
        v = rev[u][i];
        if(!vis[v])
        {
            katheryn(v,k);
        }
    }
}

int main()
{
    int i , j , k , u , v , n , m , p;
    scanf("%d",&n);

    for(i = 1 ; i <= n ; i++)
    {
        scanf("%lld",cost+i);
    }
    scanf("%d",&m);
    while(m--)
    {
        scanf("%d %d",&u,&v);
        vec[u].push_back(v);
        rev[v].push_back(u);
    }
    memset(vis,false,sizeof(vis));
    for(i = 1 ; i <= n ; i++)
    {
        if(vis[i] == false)
        {
            deepika(i);
        }
    }
    reverse(st.begin(),st.end());
    memset(vis,false,sizeof(vis));
    k = 0;
    long long ways = 1 , cst = 0 , cnt;
    for(i = 0 ; i < st.size() ; i++)
    {
        u =  st[i];
        if(!vis[u])
        {
            mini = LLONG_MAX;
            minicnt = 1;
            katheryn(u,k);
            cst += mini;
            cnt = ways;
            ways = (cnt%mod * minicnt%mod)%mod;
        }
    }
    printf("%lld %lld\n",cst,ways);

    return 0;
}
