#include <bits/stdc++.h>

using namespace std;
using ll = long long;
using ii = pair<int, int>;
#define ff first
#define ss second
#define pb push_back

const int N = 1000006;

int n, k, m;

vector<tuple<int, int, int>> bg[N], en[N];

int main(){

	scanf("%d %d %d", &n, &k, &m);

	for(int i = 0, a, b, c, d; i < m; i++){
		scanf("%d %d %d %d", &a, &b, &c, &d);
		bg[a].emplace_back(d, c, i);
		en[b].emplace_back(d, c, i);
	}

	ll ans = 0, sum = 0, cnt = 0;

	int c, d, i;
	map<pair<int, int>, int> in, out;
	for(int day = 1; day <= n; day++){
		for(auto x : bg[day]){
			tie(d, c, i) = x;
			out[{d, i}] = c;
		}

		while(cnt < k && !out.empty()){
			tie(d, i) = out.begin()->first;
			c = out.begin()->second;
			out.erase(out.begin());
			cnt += c;
			sum += 1LL * c * d;
			in[{d, i}] += c;
		}

		while(cnt > k){
			tie(d, i) = prev(in.end())->first;
			c = prev(in.end())->second;
			in.erase(prev(in.end()));
			sum -= 1LL * d * c;
			if(cnt - c < k){
				in[{d, i}] += c - (cnt - k);
				sum += 1LL * d * (c - (cnt - k));
				out[{d, i}] += cnt - k;
				cnt = k;
				break;
			}
			cnt -= c;
			out[{d, i}] += c;
		}

		while(!in.empty() && !out.empty()){
			if(out.begin()->first.first >= prev(in.end())->first.first) break;
			int mn = min(out.begin()->second, prev(in.end())->second);
			sum -= 1LL * prev(in.end())->first.first * mn;
			sum += 1LL * out.begin()->first.first * mn;
			int d1, i1, d2, i2;
			tie(d1, i1) = out.begin()->first;
			tie(d2, i2) = prev(in.end())->first;
			out[{d1, i1}] -= mn;
			out[{d2, i2}] += mn;
			in[{d1, i1}] += mn;
			in[{d2, i2}] -= mn;
			if(out[{d1, i1}] == 0) out.erase(make_pair(d1, i1));
			if(in[{d2, i2}] == 0) in.erase(make_pair(d2, i2));
		}

		ans += sum;
/*		printf("$ %lld %lld\n", sum, cnt);
		for(auto x : in){
			printf("[%d %d %d] ", x.first.first, x.first.second, x.second);
		}
		printf("\n>");
		for(auto x : out){
			printf("[%d %d %d] ", x.first.first, x.first.second, x.second);
		}
		printf("\n");
*/
		for(auto x : en[day]){
			tie(d, c, i) = x;
			if(out.count(make_pair(d, i))) out.erase(out.find({d, i}));
			if(in.count(make_pair(d, i))){
				c = in[{d, i}];
				in.erase(in.find({d, i}));
				cnt -= c;
				sum -= 1LL * d * c;
			}
		}
	}

	printf("%lld\n", ans);


	return 0;
}

