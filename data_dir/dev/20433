#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("input.txt");ofstream out("output.txt");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

ll cnt_for_odd(ll x, ll mx){
    if(x>mx) return 0;
    ll o = 0, d = 1, c=x;
    for(; c<=mx; c*=2, d*=2){
        ll rg = c+d-1;
        o += d;
        if(rg > mx) o-=rg-mx;
    }
    return o;
}

ll cnt(ll x, ll mx){
    if(x>mx) return 0;
    return x%2 ? cnt_for_odd(x,mx) : 1+cnt(x+1,mx)+cnt(x*2,mx);
}

ll bpe(ll n, ll k){
    ll even = n/2;
    if(even==0) return -1;
    ll l = 0, r = even+1;
    for(; l+1<r;){
        ll md = (l+r)/2;
        ll c = cnt(md*2, n);
        if(c>=k) l = md;
        else r = md;
    }
    return l*2;
}

ll bpo(ll n, ll k){
    ll odd = (n+1)/2;
    ll l = 1, r = odd+1;
    for(; l+1<r;){
        ll md = (l+r)/2;
        ll c = cnt(md*2-1, n);
        if(c>=k) l = md;
        else r = md;
    }
    return l*2-1;
}

int main(){
    fast;
    //for(int q=0; q<100; q++){ll x; cin>>x;cout<<cnt(x, 1e18)<<endl;}
    ll n,k; cin>>n>>k;
   // cout<<bpo(n,k)<<" "<<bpe(n,k)<<"\n";
    cout<<max(bpo(n,k), bpe(n,k));
}