#include<bits/stdc++.h>
#define CLR(a)              memset(a, 0, sizeof(a))
#define SET(a, x)           memset(a, x, sizeof(a))
#define SORT(v)             sort(v.begin(), v.end())
#define REV(v)              reverse(v.begin(), v.end())
#define FOR(i, n)           for (int i=0; i<n; i++)
#define FOR1(i, n)          for (int i=1; i<=n; i++)
#define ROF(i, n)           for (int i=n-1; i>=0; i--)
#define ROF1(i, n)          for (int i=n; i>=1; i--)
#define LOOP(i, x, n)       for (int i=x; i<=n; i++)
#define READ(x)             freopen(x, "r", stdin);
#define WRITE(x)            freopen(x, "w", stdout);
#define fastIO()            ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define PI                  acos(-1.0)
#define pb                  push_back
#define mp                  make_pair
#define fi                  first
#define se                  second
#define all(v)              v.begin(), v.end()

using namespace std;

typedef long long              ll;
typedef unsigned long long     ull;
typedef vector<int>            vi;
typedef pair<int, int>         pii;
typedef pair<string, int>      psi;
typedef pair<char, int>        pci;

const double eps = 1e-9;

int fx[] = {-1, 1, 0, 0, -1, -1, 1, 1};
int fy[] = {0, 0, -1, 1, -1, 1, -1, 1};

int kx[] = {1, 1, 2, 2, -1, -1, -2, -2};
int ky[] = {2, -2, 1, -1, 2, -2, 1, -1};

#define MX 1000006
struct X{
    int val;
    int pos;
};
X A[MX];
bool cmp(X a, X b){return a.val < b.val;}


int tree[4*MX];

void update(int node, int L, int R, int l, int r){
    if (L > r || R < l) return;
    if (L == R && L == l){
        tree[node] = 1;
        return;
    }
    int mid = (L + R) / 2;
    int left = 2 * node;
    int right = 2 * node + 1;
    update(left, L, mid, l, r);
    update(right, mid+1, R, l, r);
    tree[node] = tree[left] + tree[right];
}

int query(int node, int L, int R, int l, int r){
    if (L > r || R < l) return 0;
    if (L >= l && R <= r) return tree[node];
    int mid = (L + R) / 2;
    int left = 2 * node;
    int right = 2 * node + 1;
    return query(left, L, mid, l, r) + query(right, mid+1, R, l, r);
}

int lmax[MX], rmin[MX];

int main()
{
    fastIO();
    int n; cin >> n;
    FOR1(i, n){
        cin >> A[i].val;
        A[i].pos = i;
    }

    sort(A+1, A+n+1, cmp);

    FOR1(i, n){
        int pos = A[i].pos;
        rmin[pos] = query(1, 1, n, pos+1, n);
        update(1, 1, n, pos, pos);
    }

    FOR1(i, 4*n) tree[i] = 0;

    ROF1(i, n){
        int pos = A[i].pos;
        lmax[pos] = query(1, 1, n, 1, pos-1);
        update(1, 1, n, pos, pos);
    }

    ll res = 0;
    FOR1(i, n) res += (ll)lmax[i] * (ll)rmin[i];
    cout << res << "\n";
    return 0;
}


