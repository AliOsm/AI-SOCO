#include<bits/stdc++.h>
 using namespace std;

 #define ll long long
 #define pb push_back
 #define fi first
 #define se second
 #define FILE "lucky"
 #define ull unsigned long long
 #define ld long double
 #define rev reverse
 #define pob pop_back()
 #define sz size()
 #define bb begin()
 #define ee end()

 const int maxn=2e5+228;
 ll t[27][4*maxn];
 int ko;
 string vv;
 int q;
 int dp[27][maxn];


void build(int v,int tl,int tr,int ans1)
{
   if (tl==tr)
   {
     t[ans1][v]=dp[ans1][tl];
   }
   else
    {
     int tm=(tl+tr)/2;
     build (v*2,tl,tm,ans1);
     build (v*2+1,tm+1,tr,ans1);
     t[ans1][v]=t[ans1][v*2]+t[ans1][v*2+1];
   }
}

ll sum(int v,int tl,int tr,int l,int r,int ans1)
{
   if (l>r)
   {
    return 0;
   }
   if (l==tl && r==tr)
   {
    return t[ans1][v];
   }
   int tm=(tl+tr)/2;
   return sum(v*2,tl,tm,l,min(r,tm),ans1)+sum(v*2+1,tm+1,tr,max(l,tm+1),r,ans1);
}

void update(int v,int tl,int tr,int pos,ll new_val,int ans1)
 {
    if (tl==tr)
    {
     t[ans1][v]=new_val;
    }
    else
    {
     int tm=(tl+tr)/2;
     if (pos<=tm)
     {
        update(v*2,tl,tm,pos,new_val,ans1);
     }
     else
     {
        update(v*2+1,tm+1,tr,pos,new_val,ans1);
     }
     t[ans1][v]=t[ans1][v*2]+t[ans1][v*2+1];
    }
}

int find_kth(int v,int tl,int tr,int k,int ans1)
{
    if(k>t[ans1][v])
    {
        return -1;
    }
    if(tl==tr)
    {
        return tl;
    }
    int tm=(tl+tr)/2;
    if(t[ans1][2*v]>=k)
    {
        return find_kth(v*2,tl,tm,k,ans1);
    }
    else
    {
        return find_kth(v*2+1,tm+1,tr,k-t[ans1][2*v],ans1);
    }
}


 int main()
 {
     ios_base::sync_with_stdio(false);cin.tie(0), cout.tie(0);
     /*freopen(FILE ".in", "r", stdin);
     freopen(FILE ".out", "w", stdout);*/
     cin >> ko >> vv >> q;
     string lead="";
     for(int i=0;i<ko;i++)
     {
         lead+=vv;
     }
     for(int i=0;i<lead.sz;i++)
     {
         int y=lead[i]-'a';
         dp[y][i]++;
     }
     for(int i=0;i<26;i++)
     {
         build(1,0,lead.sz-1,i);
     }
     for(int i=0;i<q;i++)
     {
         int k;
         char f;
         cin >> k >> f;
         int qwe=f-'a';
         int to=find_kth(1,0,lead.sz-1,k,qwe);
         update(1,0,lead.sz-1,to,0,qwe);
     }
     for(int i=0;i<lead.sz;i++)
     {
         int asd=lead[i]-'a';
         int s=sum(1,0,lead.sz-1,i,i,asd);
         if(s)
         {
             cout << lead[i];
         }
     }
     return 0;
 }
