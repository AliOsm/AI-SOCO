#include <functional>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <numeric>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cassert>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;

template <typename T>
T nextInt() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;
}

const int maxN = (int)5e5 + 10;
const int maxL = 17;
const int INF = (int)1e9;
const int mod = (int)1e9 + 7;
const ll LLINF = (ll)1e18;

char s[maxN];
int rev[maxN];
int n, m, q;

set <int> available;
set<int> ::iterator it;

void makeDel() {
    int l = *it;
    int r = rev[l];
    auto iter2 = available.lower_bound(rev[*it]);
    if (l < r) {
        iter2++;
        available.erase(it, iter2);
    } else {
        it++;
        available.erase(iter2, it);
    }
    it = available.upper_bound(l);
    if (it == available.end()) it = prev(it);
}

int main() {

   // freopen("input.txt", "r", stdin);
   // freopen("output.txt", "w", stdout);

    n = nextInt<int>();
    m = nextInt<int>();
    int p = nextInt<int>() - 1;
    gets(s);
    stack <int> st;
    for (int i = 0; i < n; ++i) {
        if (s[i] == '(') {
            st.push(i);
        } else {
            rev[i] = st.top();
            rev[st.top()] = i;
            st.pop();
        }
        available.insert(i);
    }
    it = available.lower_bound(p);

    for (int i =0; i < m; ++i) {
        char ch = getchar();
        if (ch == 'L') {
            it--;
        } else if (ch == 'R') {
            it++;
        } else {
            makeDel();
        }
    }
    for (auto x: available) putchar(s[x]);
    return 0;
}