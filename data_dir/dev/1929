#include <bits/stdc++.h>

#define Edge pair<int , int >
#define to first
#define cost second
#define long long long

using namespace std ;

long memo[5001][5001] ;
vector<Edge > adjList[5000] ;
int n ;
const long INF = (long) 1e18 ;
string sb ;

long dp(int u , int rem)
{
    if(rem < 0) return INF ;

    if(rem == 0) return u == n - 1 ? 0 : INF;

    if(memo[u][rem] != -1)
        return memo[u][rem] ;

    long ans = INF ;

    for(Edge e: adjList[u])
        ans = min(ans , e.cost + dp(e.to , rem - 1)) ;

    return memo[u][rem] = ans ;
}
void trace(int u , int rem)
{
    if(rem == 0)
    {
        sb+= to_string(u + 1) + " " ;
        return;
    }

    for(Edge e : adjList[u])
        if(dp(u , rem) == e.cost + dp(e.to , rem - 1))
        {
            sb+= to_string(u + 1) + " " ;
            trace(e.to , rem - 1);
            return;
        }
}


int main()
{
    ios_base :: sync_with_stdio(false) ;
    cin.tie(nullptr) ;

    cin >> n ;
    int m , T ;
    cin >> m >> T ;
    memset(memo , -1 , sizeof memo) ;
    for(int i = 0 ; i < m ; i ++) {
        int a, b, c;
        cin >> a >> b >> c;
        adjList[--a].push_back({--b, c});
    }
    int ans = 0 ;
    for(int k = m  ; k >= 0 ; k --) {
        if (dp(0, k) <= T) {
            ans = k;
            break;
        }
    }
    cout << ans + 1 << '\n' ;
    trace(0 , ans) ;
    cout << sb << '\n' ; 

    return 0;
}