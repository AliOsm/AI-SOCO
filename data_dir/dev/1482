#include <bits/stdc++.h>
using namespace std;
#define forr(i, a, b) for(int i=(a); i < (int)b; i++)
#define forn(i, n) forr(i, 0, n)
#define dforn(i, n) for(int i = ((int)n) - 1; i >= 0; i--)
#define forall(it, v) for(auto it=v.begin(); it != v.end(); it++)
#define db(v) cerr << #v << " = " << v << endl
#define pb push_back
typedef long long ll;

int n;
map<string, int> m;

string normalize(string s) {
	string ans = "";
	//~ cout << "Normalizing: " << s << endl;
	
	forn(i, s.size()) {
		if(s[i] == 'u') {
			ans.pb('o');
			ans.pb('o');
		} else if(s[i] == 'k') {
			int j = i;
			for(; i < (int) s.size() && s[i] == 'k'; i++);
			int ks = i-j;
			if(i < (int)s.size() && s[i] == 'h'){
				ans.pb('h');
			}
			else {
				//~ printf("Agregando %d ks\n", ks);
				forn(z, ks){
					ans.pb('k');
				}
				if(i < (int)s.size() && s[i] != 'k'){
					if(s[i] == 'u'){
						ans.pb('o');
						ans.pb('o');
					}
					else {
						ans.pb(s[i]);
					}
				}
			}
		}
		else {
			ans.pb(s[i]);
		}
	}
	
	return ans;
}

int main() {
	cin >> n;
	forn(i, n) {
		string s;
		cin >> s;
		m[normalize(s)]++;
		//~ cout << i << ": " << normalize(s) << endl;
	}	
	
	cout << m.size() << endl;
	
	return 0;
}
