#include <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
using namespace std;
typedef long long ll; 
typedef long double ld;
typedef pair<ll, ll> pll;

const ll N = 4e6 + 30, Mod = 1e9 + 7;
const ll SQ = 330;

ll n, x;
ll G[N][2];
ll par[N], sz[N], is[N];
ll node = 1;
ll cnt[N];
ll a[N], ps[N];
ll ans;


void Add(ll k) {
	ll cur = 1;
	is[cur] = 1;
	for (ll i = 50; ~i; i --) {
		ll res = (1ll << i) & k;
		if (res) {
			if (!G[cur][1]) {
				node ++;
				G[cur][1] = node;
			}
			cur = G[cur][1];
			is[cur] = 1;
		}
		else {
			if (!G[cur][0]) {
				node ++;
				G[cur][0] = node;
			}
			cur = G[cur][0];
			is[cur] = 1;
		}
	}
}
ll Get(ll k) {
	ll cur = 1;
	ll res = 0;
	ll best = 0;
	for (ll i = 50; ~i; i --) {
		ll g = (1ll << i) & k;
		if (g) {
			if (G[cur][0] && is[G[cur][0]]) {
				cur = G[cur][0];
				best ^= (1ll << i);
			}
			else if (G[cur][1] && is[G[cur][1]]) {
				cur = G[cur][1];
			}
			else {
				return best;
			}
		}
		else {
			if (G[cur][1] && is[G[cur][1]]) {
				cur = G[cur][1];
				best ^= (1ll << i);
			}
			else if (G[cur][0] && is[G[cur][0]]) {
				cur = G[cur][0];
			}
			else {
				return best;
			}
		}
	}
	return best;
}
void clear() {
	for (int i = 1; i <= node; i ++) {
		G[i][0] = G[i][1] = 0;
		is[i] = 0;
	}
	node = 1;
	ans = 0;
}
int main () {
	ios::sync_with_stdio(0), cin.tie(0);
	ll q;
	q = 1;
	while (q --) {
		clear();
		cin >> n;
		for (int i = 1; i <= n; i ++) {
			cin >> a[i];
			ps[i] = ps[i - 1] ^ a[i];
		}
		x = ps[n];
		Add(ps[0]);
		for (int i = 1; i <= n; i ++) {
			ans = max(ans, Get(ps[i] ^ x));
			Add(ps[i]);
		}
		for (int i = 1;  i <= n; i ++) {
			ans = max(ans, Get(ps[i] ^ x));
		}
		cout << ans << '\n';
	}
}