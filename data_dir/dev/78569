//Be Name Khoda, Besmellah Rahmane Rahim, In The Name Of God;
//#include<bits/stweight++.h>
#include<iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <stack>
#include<bitset>
#include<list>
#include<cassert>
#include<numeric>
#include <stdio.h>
#include <string.h>
#include<iomanip>
#include<unordered_map>
#include<unordered_set>
#include <iostream>
#include <fstream>


using namespace std;

const int N = 3e5 + 5;
int group[N];
vector<int> graph[N];
int deg[N];
set< pair<int, int> > s;
int n, m;
 
int main()
{
	std::ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n>> m;
	for (int i =0 ; i < m; i++)
	{
		int u, v;
		cin >> u >> v;
		graph[u -1 ].push_back(v - 1);
		graph[v - 1].push_back(u - 1);
		deg[u - 1]++;
		deg[v - 1]++;
	}
	for (int i = 0; i < n; i++)
	{
		s.insert({-deg[i], i});
	}
	while (true)
	{
		auto nei = *s.begin();
		s.erase(s.begin());
		int in = abs(nei.first);
		int person = nei.second;
		if (in < 2)
		{
			break;
		}
		group[person]++;
		group[person] %= 2;
		int tmp = graph[person].size() - in;
		deg[person] = tmp;
		s.insert({-tmp, person});
		for (auto u: graph[person])
		{
			if (group[u] == group[person])
			{
				s.erase({-deg[u], u});
				deg[u]++;
				s.insert({-deg[u], u});
			}
			else
			{
				s.erase({-deg[u], u});
				deg[u]--;
				s.insert({-deg[u], u});
			}
		}
	}
	for (int i =0 ; i < n; i++)
	{
		cout << group[i];
	}
}

