#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_map>
#include<unordered_set>
using namespace std;

#define MAX 100002
int n;
vector<int> v[MAX];

#define MOD 1000000007LL
long long int dp[MAX][2][2];
bool use[MAX][2][2];


inline long long int dfs(int a, int b, int c){
    if (use[a][b][c]){
        return dp[a][b][c];
    }
    if (v[a].size() == 0){
        use[a][b][c] = true;
        if (b == c){
            return 0;
        }
        dp[a][b][c] = 1;
        return 1;
    }
    use[a][b][c] = true;
    int S = v[a].size();
    //clored and return
    long long int way[] = { 0, 0 };
    long long int nex_way[] = { 0, 0 };
    way[b ^ true] = 1;
    for (int i = 0; i < S; i++){
        nex_way[0] = nex_way[1] = 0;
        for (int j = 0; j < 2; j++){
            if (way[j]){
                for (int k = 0; k < 2; k++){
                    nex_way[k] += dfs(v[a][i], j, k)*way[j];
                    if (nex_way[k] >= MOD){
                        nex_way[k] %= MOD;
                    }
                }
            }
        }
        way[0] += nex_way[0];
        way[1] += nex_way[1];
        if (way[0] >= MOD){
            way[0] %= MOD;
        }
        if (way[1] >= MOD){
            way[1] %= MOD;
        }
    }
    dp[a][b][c] += way[c];
    if (dp[a][b][c] >= MOD){
        dp[a][b][c] %= MOD;
    }
    way[0] = way[1] = 0;
    way[b ^ true] = 1;
    for (int i = S-1; i>=0; i--){
        nex_way[0] = nex_way[1] = 0;
        for (int j = 0; j < 2; j++){
            if (way[j]){
                for (int k = 0; k < 2; k++){
                    nex_way[k] += dfs(v[a][i], j, k)*way[j];
                    if (nex_way[k] >= MOD){
                        nex_way[k] %= MOD;
                    }
                }
            }
        }
        way[0] += nex_way[0];
        way[1] += nex_way[1];
        if (way[0] >= MOD){
            way[0] %= MOD;
        }
        if (way[1] >= MOD){
            way[1] %= MOD;
        }
    }
    dp[a][b][c] += way[c];
    if (dp[a][b][c] >= MOD){
        dp[a][b][c] %= MOD;
    }
    int be = b ^ true;
    int en = c;
    //first be->en
    way[0] = way[1] = 0;
    long long int des = 0;
    if (b^true == c){
        long long int sum = 0;
        for (int i = 0; i < S; i++){
            sum += (sum+1LL)*dfs(v[a][i], c, c);
            if (sum >= MOD){
                sum %= MOD;
            }
        }
        des = sum;
    }
    else{
        int fact = b ^ true;
        int fact2 = c;
        long long int way2[] = { 0, 0};
        for (int i = 0; i < S; i++){
            long long int tmp1= (way2[1]+1LL) * dfs(v[a][i],fact ,fact2 );
            long long int tmp2= way2[0] * dfs(v[a][i], fact2, fact);
            way2[1] += tmp2;
            way2[0] += tmp1;
            if (way2[0] >= MOD){
                way2[0] %= MOD;
            }
            if (way2[1] >= MOD){
                way2[1] %= MOD;
            }
        }
        des = way2[0] ;
    }
    if (des >= MOD){
        des %= MOD;
    }
    dp[a][b][c] += MOD - des;
    if (b ^ true == c){
        dp[a][b][c] += MOD - 1;
    }
    if (dp[a][b][c] >= MOD){
        dp[a][b][c] %= MOD;
    }
    return dp[a][b][c];
}
int main(){
    scanf("%d", &n);
    for (int i = 2; i <= n; i++){
        int p;
        scanf("%d", &p);
        p--;
        v[p].push_back(i - 1);
    }
    long long int ans = dfs(0, 0, 0) + dfs(0, 0, 1);
    if (ans >= MOD){
        ans %= MOD;
    }
    printf("%I64d\n", ans);
    return 0;
}
