//ITNOG
#include <bits/stdc++.h>
 
using namespace std;

//#define int long long

const int maxN = 5000 + 2;
const int mod = 1000*1000*1000 + 7;

double dp[maxN][maxN];

int p[maxN], t[maxN];

double power(double x, int k)
{
    if(!k) return 1;
    double ans = power(x, k / 2);

    ans *= ans;
    if(k & 1) ans *= x;

    return ans;
}

main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    
    int n, ti; cin >> n >> ti;
    for(int i = 0; i < n; i ++) cin >> p[i] >> t[i];


    dp[0][0] = 1;
    
    for(int i = 1; i <= n; i ++)
    {
	  double pr = p[i - 1] / 100.0;
	  double sum = 0;
	  double sump = 0;
	  double cur = 1;
	  
	  for(int j = 1; j < t[i - 1]; j ++)
	  {
		sump += pr * cur; //cout << sump << endl;
		cur *= (1 - pr);
	  }
//	  cout << sump << endl;
	  for(int j = 0; j <= ti; j ++)
	  {
		sum *= (1 - pr);
		if(j >= t[i - 1]) sum -= power(1 - pr, t[i - 1] - 1) * dp[i - 1][j - t[i - 1]];
		sum += dp[i - 1][j - 1];
		dp[i][j] = sum * pr;
		if(j >= t[i - 1])
		    dp[i][j] += (1 - sump) * dp[i - 1][j - t[i - 1]];
	  }
    }

    double res = 0;

    for(int i = 1; i <= n; i ++)
	  for(int j = 0; j <= ti; j ++)
		res += dp[i][j];

//    cout << dp[1][2] << endl;

    cout << fixed << setprecision(10) << res << endl;

    return 0;
}
