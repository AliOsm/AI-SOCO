#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<int, int>, // change type
//        null_type,
//        less<pair<int, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define X first
#define Y second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-9);
//int dcmp(long double x, long double y)
//{
//    if (abs(x - y) < eps)
//        return 0;
//    if (x > y)
//        return 1;
//    return -1;
//}

const int MOD = 998244353;

ll add(ll x, ll y)
{
    x += y;
    if (x >= MOD)
        x -= MOD;
    if (x < 0)
        x += MOD;
    return x;
}
ll mult(ll x, ll y)
{
    return (x * y)%MOD;
}

ll power(ll base, ll exp)
{
    ll ret = 1;
    for (; exp; exp>>=1)
    {
        if (exp&1)
            ret = mult(ret, base);
        base = mult(base, base);
    }
    return ret;
}

ll modInverse(ll x)
{
    return power(x, MOD - 2);
}

const int MAX_N = 5002;
ll fac[MAX_N], invFac[MAX_N];

void pre()
{
    fac[0] = fac[1] = invFac[0] = invFac[1] = 1;
    for (int i = 2; i < MAX_N; ++i)
    {
        fac[i] = mult(fac[i - 1], i );
        invFac[i] = modInverse(fac[i]);
    }
}

ll getC(int n, int k)
{
    return mult(fac[n], mult(invFac[k], invFac[n - k]));
}

ll solve(int a, int b)
{
    ll ret = 0;
    for (int i = 0; i <= min(a,b); ++i)
    {
        ret = add(ret, mult(fac[i], mult(getC(a, i), getC(b, i))));
    }
    return ret;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    pre();
    int a, b, c;
    cin >> a >> b >> c;
    ll ans = solve(a, b);
    ans = mult(ans, solve(b, c));
    ans = mult(ans, solve(a, c));
    cout << ans;
    return 0;
}