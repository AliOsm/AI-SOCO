#include <bits/stdc++.h>

using namespace std;
typedef long long ll;

const int N = 2e5 + 10;
int n, m;
map<char, set<int>> Maping;
string s;
int Bit[N];
bool Deleted[N];

void update(int idx)
{
    Deleted[idx] = 1;
    for(; idx <= n; idx += (idx&-idx))
        Bit[idx]++;
}

int get(int idx)
{
    int ret = 0;
    for(; idx > 0; idx -= (idx&-idx))
        ret += Bit[idx];
    return ret;
}

int query(int l, int r)
{
    return get(r) - get(l - 1);
}

int GetPos(int idx)
{
    int st = 1, en = n, mid, ans = -1;
    while(st <= en)
    {
        mid = (st + en) >> 1;
        int pos = mid - query(1, mid);
        if(pos == idx)
            ans = mid, en = mid - 1;
        else if(pos < idx)
            st = mid + 1;
        else
            en = mid - 1;
    }
    return ans;
}

void deleteRange(char c, int l, int r)
{
    set<int>& sett = Maping[c];
    set<int>::iterator it1 = lower_bound(sett.begin(), sett.end(), l);
    set<int>::iterator it2 = upper_bound(sett.begin(), sett.end(), r);
    if(it1 == sett.end())
        return;
    set<int>::iterator it3 = it1;
    while(it3 != it2)
    {
        update(*it3);
        it3++;
    }
    sett.erase(it1, it2);
}

int main()
{
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    cin >> n >> m >> s;
    for(int i = 0; i < s.size(); i++)
    {
        Maping[s[i]].insert(i + 1);
    }
    while(m--)
    {
        int l, r;
        char c;
        cin >> l >> r >> c;
        l = GetPos(l);
        r = GetPos(r);
        deleteRange(c, l, r);
    }
    for(int i = 1; i <= n; i++)
    {
        if(!Deleted[i])
            cout << s[i - 1];
    }
}
