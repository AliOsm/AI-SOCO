#define _CRT_SECURE_NO_DEPRECATE
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <cmath>
#ifndef __GNUC__
#include <intrin.h>
#endif // !__GNUC__
#include <bitset>
#include <random>
#include <vector>
#include <cstdio>
#include <string>
#include <cstdlib>
#include <numeric>
#include <cstring>
#include <complex>
#include <cassert>
#include <iterator>
#include <iostream>
#include <algorithm>
#include <functional>
#include <string_view>

int bsf(int x) {
#ifdef __GNUC__
	return __builtin_ctz(x);
#else
	unsigned long i;
	_BitScanForward(&i, x);
	return i;
#endif
}
int bsr(int x) {
#ifdef __GNUC__
	return 31 - __builtin_clz(x);
#else
	unsigned long i;
	_BitScanReverse(&i, x);
	return i;
#endif
}

using namespace std;
typedef long long int64;
const double pi = 3.14159265358979323846;
const int inf = (int)2e+9 + 2;
const int mod = (int)1e+9 + 7;
const double eps = 1e-8;
const int N = 200000;

int n, m, k;

int a[N];
vector<int> c[N];

void solve()
{
	cin >> n >> m;
	for (int i = 0; i < n; ++i) {
		cin >> a[i];
		c[a[i] % m].push_back(i);
	}
	multimap <int, int, greater<int>> mp;
	for (int i = 0; i < m; ++i) {
		while (c[i].size() * 1ll * m > n) {
			mp.emplace(i, c[i].back());
			c[i].pop_back();
		}
	}
	int64 ans = 0;
	for (int i = 0; i < m; ++i) {
		for (int j = (int)c[i].size(); j * m < n; ++j) {
			auto it = mp.upper_bound(i);
			int dt;
			if (it != mp.end())
				dt = i - it->first;
			else {
				it = mp.begin();
				dt = i + m - mp.begin()->first;
			}
			ans += dt;
			a[it->second] += dt;
			mp.erase(it);
		}
	}
	cout << ans << '\n';
	for (int i = 0; i < n; ++i)
		cout << a[i] << ' ';
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0), cout.tie(0);
	int test = 1;
	//cin >> test;
	for (; test; --test)
		solve();
	return 0;
}