//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <iostream>
#include <stdlib.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <unordered_map>
#include <random>
#include <assert.h>
#include <memory.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

inline void setmin(int &x, int y) { if (y < x) x = y; }
inline void setmax(int &x, int y) { if (y > x) x = y; }
inline void setmin(ll &x, ll y) { if (y < x) x = y; }
inline void setmax(ll &x, ll y) { if (y > x) x = y; }

const int N = 100000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int P1 = 31;
const int P2 = 57;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const int MOD2 = 998244353;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n;
    cin >> n;
    string s;
    cin >> s;
    int a[n];
    rep(i, 0, n) {
        if (s[i] == 'R') {
            a[i] = 0;
        } else if (s[i] == 'G') {
            a[i] = 1;
        } else {
            a[i] = 2;
        }
    }
    int dp[n][3];
    int come[n][3];
    rep(i, 0, n) {
        dp[i][0] = dp[i][1] = dp[i][2] = inf;
    }
    rep(j, 0, 3) {
        if (j == a[0]) {
            dp[0][j] = 0;
        } else {
            dp[0][j] = 1;
        }
    }
    rep(i, 1, n) {
        rep(j, 0, 3) {
            rep(r, 0, 3) {
                if (r == j) {
                    continue;
                }
                if (dp[i - 1][r] + (j != a[i]) < dp[i][j]) {
                    dp[i][j] = dp[i - 1][r] + (j != a[i]);
                    come[i][j] = r;
                }
            }
        }
    }
    int b = 0;
    rep(j, 0, 3) {
        if (dp[n - 1][j] < dp[n - 1][b]) {
            b = j;
        }
    }
    repb(i, n - 1, -1) {
        if (b == 0) {
            s[i] = 'R';
        } else if (b == 1) {
            s[i] = 'G';
        } else {
            s[i] = 'B';
        }
        b = come[i][b];
    }
    cout << min(min(dp[n - 1][0], dp[n - 1][1]), dp[n - 1][2]) << "\n";
    cout << s << "\n";
    return 0;
}