#include <iostream>
#include <algorithm>
#include <cstdio>

using namespace std;

struct tree
{
    int ans, pref, suff;
    int len;
    tree () {};
    tree (int ans, int pref, int suff, int len) : ans (ans), pref(pref), suff(suff), len(len) {};
    tree (tree l, tree r)
    {
        len = l.len + r.len;
        ans = max (l.ans, r.ans);
        pref = l.pref;
        suff = r.suff;
        if (l.len == l.ans) pref = max (pref, l.len + r.pref);
        if (r.len == r.ans) suff = max (suff, r.len + l.suff);
        ans = max (max (max (l.ans, r.ans), l.suff + r.pref), max (pref, suff));
    }
} t[4*200500];

int n, ans[200500];
pair < int, int > a[200500];

void bld (int v, int l, int r)
{
    if (l == r) t[v] = tree (0, 0, 0, 1);
    else
    {
        int tm = (l + r) >> 1;
        bld (v + v, l, tm);
        bld (v + v + 1, tm + 1, r);
        t[v] = tree (t[v + v], t[v + v + 1]);
    }
}

void upd (int v, int l, int r, int pos)
{
    if (l == r)
        t[v] = tree (1, 1, 1, 1);
    else
    {
        int tm = (l + r) >> 1;
        if (pos <= tm) upd (v + v, l, tm, pos);
        else upd (v + v + 1, tm + 1, r, pos);
        t[v] = tree (t[v + v], t[v + v + 1]);
    }
}

int main()
{
    scanf ("%d", &n);
    for (int i = 1; i <= n; i ++)
        scanf ("%d", &a[i].first),
        a[i].second = i;
    sort (a + 1, a + 1 + n);
    bld (1, 1, n);
    int r = 0;
    for (int i = n; i >= 1; i --)
    {
        int pos = a[i].second;
        upd (1, 1, n, pos);
        while ( t[1].ans > r )
            ans[++ r] = a[i].first;
    }
    for (int i = 1; i <= n; i ++)
        printf ("%d ", ans[i]);
    return 0;
}
