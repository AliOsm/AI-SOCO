//Be Name Khoda
//no comment...
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using mordered_set =  tree<T, null_type, greater<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)2007;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
vector<int> G[MAXN], H[MAXN];
int visited[MAXN];
void dfs(int u)
{
	visited[u] = 1;
	for (auto v : G[u])
		if(!visited[v])
			dfs(v);
}
void dfs2(int u)
{
	visited[u] = 1;
	for (auto v : H[u])
		if(!visited[v])
			dfs2(v);
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    int n;
    cin >> n;
    int cur = -1;
    for (int i = 1; i <= n; i++)
    	for (int j = 1; j <= n; j++)
    	{
    		int a;
    		cin >> a;
    		if(!a)
    			continue;
    		if(i == j)
    			cur = i;
    		G[i].push_back(j);
    		H[j].push_back(i);
		}
	dfs(cur);
	for (int i = 1; i <= n; i++)
		if(!visited[i])
			return cout << "NO", 0;
	memset(visited, 0, sizeof visited);
	dfs2(cur);
	for (int i = 1; i <= n; i++)
		if(!visited[i])
			return cout << "NO", 0;
	cout << "YES";
}
