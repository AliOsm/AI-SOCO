#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define ll long long
#define M 100007
#define MOD 1000000007

// Order Statistic Tree

/* Special functions:

        find_by_order(k) --> returns iterator to the kth largest element counting from 0
        order_of_key(val) --> returns the number of items in a set that are strictly smaller than our item
*/

typedef tree<
int,					// type long long
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

int p[M];
int isRecord[M];
int hinders[M];
ordered_set ost;

int main(void)
{
    int n, i;
    scanf("%d", &n);

    int cnt = 0;
    for (i = 1; i <= n; i++) {
        scanf("%d", &p[i]);
        int bame = ost.order_of_key(p[i]);
        //cout << "bame " << bame << endl;
        if (bame==i-1) isRecord[i] = 1, cnt++;
        else if (bame==i-2) {
            int x = *(ost.find_by_order(i-2));
            //cout << x << ' ' << "hinders" << p[i] << endl;
            hinders[x]++;
        }

        ost.insert(p[i]);
    }

    //for (int i = 1; i <= n; i++) printf("%d ", isRecord[i]);
    //printf("\n");
    //for (int i = 1; i <= n; i++) printf("%d ", hinders[i]);
    //printf("\n");

    pair< int , int > ans;
    ans.first = 0;
    ans.second = -1;

    for (int i = 1; i <= n; i++) {
        pair< int , int >tmp;
        tmp.second = -p[i];
        tmp.first = cnt;
        tmp.first += hinders[p[i]];
        tmp.first -= isRecord[i];

        ans = max(ans, tmp);
    }

    printf("%d\n", -ans.second);


    return 0;
}
