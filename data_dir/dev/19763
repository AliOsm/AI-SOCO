//Be Name Khoda, Besmellah Rahmane Rahim, In The Name Of God;
//#include<bits/stdc++.h>
#include<iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <stack>
#include<bitset>
#include<list>
#include<cassert>
#include<numeric>
#include <stdio.h>
#include <string.h>
#include<iomanip>
#include<unordered_map>
#include<unordered_set>

using namespace std;
 
const int N = 105;
vector<int> graph[2 * N];
int mark[2 * N];
bool choose[2 * N];
int cnt = 0;
int n, m;

int Not(int x)
{
	if (x < n)
	{
		return x + n;
	}
	else
	{
		return x - n;
	}
}

void dfs(int v)
{
	if (choose[Not(v)])
	{
		choose[v] = false;
	}
	else
	{
		choose[v] = true;
	}
	mark[v] = cnt;
	//cout << v << " benz " << mark[v] << endl;
	for (auto u: graph[v])
	{
		if (!mark[u])
		{
			dfs(u);
		}
	}
}


 
int main() 
{
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		int u, v, w;
		cin >> u >> v >> w;
		u--;
		v--;
		if (w == 1)
		{
			//u ^ v = 0 => (u || !v) && (v || !u);
			graph[Not(u)].push_back(Not(v));
			graph[v].push_back(u);
			graph[Not(v)].push_back(Not(u));
			graph[u].push_back(v);
		}
		if (w == 0)
		{
			//u ^ v = 1 => (u || v) && (!u || !v)
			graph[u].push_back(Not(v));
			graph[v].push_back(Not(u));
			graph[Not(u)].push_back(v);
			graph[Not(v)].push_back(u);
			//cout << u << " " << Not(v) << endl;
			//cout << v << " " << Not(u) << endl;
		}
	}
	for (int i = 0; i < 2 * n; i++)
	{
		if (!mark[i])
		{
			cnt++;
			dfs(i);
		}
	}
	for (int i = 0; i < n; i++)
	{
		if (mark[i] == mark[Not(i)])
		{
			cout << "Impossible" << endl;
			exit(0);
		}
	}	
	vector<int> ans;
	for (int i = 0; i < n; i++)
	{
		if (choose[i])
		{
			ans.push_back(i);
		}
	}
	cout << ans.size() << endl;
	for (auto nei: ans)
	{
		cout << nei + 1 << " ";
	}

}

