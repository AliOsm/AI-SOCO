#include <iostream>
#include <stdio.h>
#include <algorithm>

#define tree int t,int l,int r
#define left 2*t,l,(l+r)/2
#define right 2*t+1,(l+r)/2+1,r

#define fi first
#define se second
#define INF 1048576

using namespace std;

int nxt[INF/2],tr[INF];

void build(tree)
 {
  tr[t]=INF;
  if (l == r) return;
  build(left);
  build(right);
 }

void add(tree,int x)
 {
  if (r < x || l > x) return;
  if (l == r)
   {
    tr[t]=nxt[l];
    return;
   }
  add(left,x);
  add(right,x);
  tr[t]=min(tr[2*t],tr[2*t+1]);
 }

int L,R,ans;

void get_min(tree)
 {
  if (R < l || r < L) return;
  if (L <= l && r <= R)
   {
    if (tr[t] < ans) ans=tr[t];
    return;
   }
  get_min(left);
  get_min(right);
 }

pair < pair < int , int > , int > q[INF/2];
pair < int , int > P[INF/2];
int lst[INF/2],a[INF/2],res[INF/2];
int n,m,i,x,y,l,r,mid,upto,j;

main()
 {
  scanf("%d%d",&n,&m);
  for (i=1;i<=n;i++)
   scanf("%d",&a[i]),P[i].fi=a[i],P[i].se=i;
  sort(P+1,P+n+1);
  a[P[1].se]=1;
  for (i=2;i<=n;i++)
   if (P[i].fi == P[i-1].fi) a[P[i].se]=a[P[i-1].se]; else
                             a[P[i].se]=a[P[i-1].se]+1;
  for (i=1;i<=n;i++) lst[i]=INF;
  for (i=n;i>=1;i--)
   {
    nxt[i]=lst[a[i]]-i;
    P[i].fi=lst[a[i]];
    P[i].se=i;
    lst[a[i]]=i;
   }
  sort(P+1,P+n+1); upto=1;
  build(1,1,n);

  for (i=1;i<=m;i++)
   scanf("%d%d",&q[i].fi.se,&q[i].fi.fi),q[i].se=i;
  sort(q+1,q+m+1);

  for (j=1;j<=m;j++)
   {
    i=q[j].se;
    x=q[j].fi.se;
    y=q[j].fi.fi;
    while (upto <= n && P[upto].fi <= y)
     {
      add(1,1,n,P[upto].se);
      upto++;
     }
    L=x; R=y; ans=INF;
    get_min(1,1,n);
    if (ans == INF) ans=-1;
    res[i]=ans;
   }
 for (j=1;j<=m;j++)
  printf("%d\n",res[j]);
 }
