#include <bits/stdc++.h>

using namespace std;

#define MAX 1005
vector<int> adj[MAX];
int dist1[MAX], dist2[MAX], vis[MAX];
map<pair<int, int>, int > mp;

void bfs(int s, int type)
{
    if(type == 1){
        memset(dist1, 0, sizeof dist1);
        memset(vis, 0, sizeof vis);
        dist1[s] += 1;
        vis[s] = 1;
        queue<int> Q;
        Q.push(s);
        while(!Q.empty()){
            int u = Q.front();
            Q.pop();
            for(int i=0; i<adj[u].size(); i++){
                int v = adj[u][i];
                if(vis[v] == 0){
                    vis[v] = 1;
                    dist1[v] = dist1[u]+1;
                    Q.push(v);
                }
            }
        }
    }
    else {
        memset(dist2, 0, sizeof dist2);
        memset(vis, 0, sizeof vis);
        dist2[s] += 1;
        vis[s] = 1;
        queue<int> Q;
        Q.push(s);
        while(!Q.empty()){
            int u = Q.front();
            Q.pop();
            for(int i=0; i<adj[u].size(); i++){
                int v = adj[u][i];
                if(vis[v] == 0){
                    vis[v] = 1;
                    dist2[v] = dist2[u]+1;
                    Q.push(v);
                }
            }
        }
    }
}

int main()
{
    //freopen("in.txt", "r", stdin);
    int n, m, s, t;
    scanf("%d %d %d %d", &n, &m, &s, &t);
    for(int i=0; i<m; i++){
        int u, v;
        scanf("%d %d", &u, &v);
        adj[u].push_back(v);
        adj[v].push_back(u);
        pair<int, int> P = make_pair(u, v);
        mp[P] = 1;
        P = make_pair(v, u);
        mp[P] = 1;
    }
    bfs(s, 1);
    bfs(t, 2);
    int mins = dist1[t];
    int ans = 0;
    for(int i=1; i<=n; i++){
        for(int j=i+1; j<=n; j++){
            pair<int, int> P = make_pair(i, j);
            if(mp[P] == 1) continue;
            int d1 = dist1[i] + dist2[j];
            int d2 = dist2[i] + dist1[j];
            int d = min(d1, d2);
            if(d >= mins){
                ans++;
            }
        }
    }
    cout << ans;
}

