#include <bits/stdc++.h>

using namespace std;

const int MAXN = 2e5 + 10;
vector<int> adj[MAXN];
vector<int> color(MAXN);
vector<int> dp(MAXN), par(MAXN);
vector<bool> vis(MAXN);

void dfs(int s, int p) {
	par[s] = p;
	for(auto i : adj[s]) {
		if(i != p) {
			dfs(i, s);
			dp[s] += max(0, dp[i]);
		}
	}
}

void bfs(int s) {
	queue<int> q;
	q.push(s);
	vis[s] = true;
	while(!q.empty()) {
		s = q.front();
		q.pop();
		//cout << s << '\n';
		if(dp[s] > 0 and dp[par[s]] - dp[s] > 0) {
			dp[s] += dp[par[s]] - dp[s];
		}
		else if(dp[s] <= 0 and dp[par[s]] > 0) {
			dp[s] += dp[par[s]];
		}
		for(auto i : adj[s]) {
			if(!vis[i]) {
				vis[i] = true;
				q.push(i);
			}
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);

	int n;
	cin >> n;
	for(int i = 1; i <= n; i++) {
		cin >> color[i];
		if(color[i]) dp[i] = 1;
		else dp[i] = -1;
	}
	for(int i = 1; i < n; i++) {
		int u, v;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	dfs(1, 0);
	bfs(1);
	for(int i = 1; i <= n; i++) {
		cout << dp[i] << ' ';
	}

	return 0;
}