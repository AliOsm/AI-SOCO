#include <cstdio>
#include <cstring>
#include <algorithm> 
#include <vector>
#include <string>
#include <iostream>
#include <map>
#include <queue>   
#include <functional>
#include <climits>
#include <set>
   
int solve()
{
    int n;
    scanf("%d", &n);
    
    std::vector< long long > a;
    
    a.resize(n);
    
    for(int i = 0; i < n; ++i)
    {
        scanf("%lld", &a[i]);
        
    }
    
    std::sort(a.begin(), a.end());
    
    std::vector< long long > b, c;
    
    b.push_back(a[0]);
    a[0] = 0;
    
    while(true)
    {
        long long last = b.back();
        
        int x = std::find(a.begin(), a.end(), last * 2 ) - a.begin();
        
        if (x < n && a[ x ] == last * 2 )
        {
            b.push_back(last*2);
            a[x] = 0;
            continue;
        }
        
        if (last % 3 == 0)
        {
            x = std::find(a.begin(), a.end(), last / 3) - a.begin();
            
            if (x < n && a[x] == last/ 3)
            {
                b.push_back(last / 3);
                a[x] = 0;
                continue;
            }
        }
        
        break;
    }
    
    if (b.size() < n )
    {
        long long first = b[0];
        
        int x = std::find(a.begin(), a.end(), first * 3) - a.begin();
//        assert(x < n && a[x] == first * 3);
        
        c.push_back(a[x]);
        a[x] = 0;
        
        while(true)
        {
            long long last = c.back();
            
            
            int x = std::find(a.begin(), a.end() , last*3) - a.begin();
            
            if (x < n && a[x] == last * 3)
            {
                c.push_back(last*3);
                a[x] = 0;
                continue;
            }
            
            if (last % 2 == 0)
            {
                x = std::find(a.begin(), a.end(), last / 2) - a.begin();
                
                if (x < n && a[x] == last / 2)
                {
                    c.push_back(last / 2);
                    a[x] = 0;
                    continue;
                }
            }
            
            break;
        }
        
        
    }
    
    std::vector< long long > ans;
    for(int i = (int)c.size() - 1; i >= 0; --i)
    {
        ans.push_back(c[i]);
        //printf("%lld ", c[i]);
    }
    for(int i = 0; i < (int)b.size(); ++i)
        ans.push_back(b[i]);
    
    
    for(long long l : ans)printf("%lld ", l);
    
    
    return 0;
}

int main(int argc, char* argv[])
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif   
    
    solve();
    
    return 0;
 }