#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<queue>
#include<string>
#include<cstring>
#include<map>
#include<cmath>
#include<bitset>
#include<set>
#include<cstdlib>
#include<complex>
#include<list>
#include<sstream>
#include<cassert>
#include<iomanip>
#include<limits>

using namespace std;

#define double long double

typedef pair<int,int> ii;
typedef pair<int,long long> il;
typedef pair<long long,long long> ll;
typedef pair<ll,int> lli;
typedef pair<long long,int> li;
typedef pair<double,double> dd;
typedef pair<ii,int> iii;
typedef pair<double,int> di;
typedef pair<int,ii> iii2;
typedef pair<ii,ii> iiii;
typedef vector<int> vi;
long long mod = 1000000007LL;
long long large = 2000000000000000000LL;



int n,L;
vector<int> a,b;

int main(){

	cin>>n>>L;
	a.assign(n,0);
	for(int i=0;i<n;i++) scanf("%d",&a[i]);
	sort(a.begin(),a.end());
	for(int i=0;i<n;i++) a.push_back(a[i]+L);
	b.assign(n,0);
	for(int i=0;i<n;i++) scanf("%d",&b[i]);
	sort(b.begin(),b.end());


	long long low = 0;
	long long high = L/2;
	long long ans = L/2;
	while(low<=high){
		long long mid = (low+high)/2;
		vector<ii> e;
		bool flag = true;
		for(int i=0;i<n;i++){
			int l = b[i]-mid;
			int r = b[i]+mid;
			if(l<0){
				l+=L;
				r+=L;
			}
			l = lower_bound(a.begin(),a.end(),l)-a.begin();
			r = upper_bound(a.begin(),a.end(),r)-a.begin()-1;
			if(r<l){
				flag = false;
				break;
			}
			e.push_back(ii(l,r));
		}
		if(!flag){
			low = mid+1;
			continue;
		}
		sort(e.begin(),e.end());
		vector<int> cnt(2*n,0);
		for(int i=0;i<(int)e.size();i++){
			int l = e[i].first;
			int r = e[i].second;
			l-=i;
			r-=i;
			if(l<0){
				l+=n;
				r+=n;
			}
			cnt[l]++;
			if(r+1<2*n) cnt[r+1]--;
		}

		for(int i=1;i<2*n;i++) cnt[i] += cnt[i-1];
		flag = false;
		for(int i=0;i<n;i++) if(cnt[i]+cnt[i+n]==n){
			flag = true;
			break;
		}
		if(flag){
			ans = mid;
			high = mid-1;
		}else low = mid+1;
	}
	cout<<ans<<endl;


    return 0;
}
