
#pragma GCC optimize("O3")
#include<queue>
#include <cmath>
#include <complex>
#include<map>
#include <string>
#include<iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <string>
#include <iostream>
#include <stdio.h>
#include<bits/stdc++.h>


/*
#define x real()
#define y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define length(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)
//#define polar(r,ang)            ((r)*exp(point(0,ang)))  ==> Already added in c++11
#define rotateO(p,ang)          ((p)*exp(point(0,ang)))
#define rotateA(p,ang,about)  (rotateO(vec(about,p),ang)+about)
#define reflectO(v,m)  (conj((v)/(m))*(m))
*/

//#define pi 3.141592654
#define forr(i,a,b) for(int i=a;i<=b;i++)
#define F first
#define S second
#define input ios_base::sync_with_stdio(0);cin.tie(0);
#define NOT(x) (1^x)

const double PI  = acos(-1.0);
using namespace std;
typedef pair<double,double>pdd;
typedef long long  ll;
typedef pair<ll, ll>pii;
typedef complex<double> point;
//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};
const int N = 300006 + 3, M = 5e4 + 3;

int t,n,k;
string s;
 int main()
{
//freopen("travel.in","r",stdin);
//freopen("travel.out","w",stdout);
//__builtin_popcount()
input;

        cin>>t;
        while(t--)
        {
            cin>>n>>k;
            cin>>s;
            stack<int>a;
            vector<pair<int,int>>ans;
            int f=0;
            for(int i=0;i<n;i++)
            {
                if(a.size()==0)a.push(i);
                else
                {
                    if(s[a.top()]==')'&&s[i]=='(')
                    {
                        ans.push_back({a.top(),i});
                        a.pop();
                    }
                    else if(s[a.top()]=='('&&s[i]==')')
                    {
                        if(a.size()>1)ans.push_back({a.top(),i});
                        a.pop();
                    }
                    else a.push(i);
                }
            }
            int c=n/2,i=1;
            while(c>k)
            {
                ans.push_back({i,i+1});
                c--;
                i+=2;
            }
            cout<<ans.size()<<endl;
            for(auto p:ans)cout<<p.F+1<<" "<<p.S+1<<endl;

        }





return 0;
}
