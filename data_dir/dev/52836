#include <iostream>
#include <stdio.h>
#include <bits/stdc++.h>
#include <math.h>
#include <string>
#include <sstream>
#define ll long long
#define F first
#define S second
#define pb push_back
#define ld long double
#define pll pair<long long,long long>
#define pld pair<long double,long double>
#define ios     ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
using namespace std;
ll mod=10000000000;
ll gcd (ll a,ll b)
{
    if(b==0)
        return a;
    else
        return gcd(b,a%b);
}
ll fastexp(ll x ,ll n)
{
    ll result =1;
    while(n>0)
    {
        if(n%2==1)
            result*=x;
        x*=x;
        n=n/2;
    }
    return result;
}

ll modularExp(ll x,ll n,ll mod)
{
    ll result=1;
    while(n>0)
    {
        if(n%2==1)
            result=(result*x)%mod;
        x=((x%mod)*(x%mod))%mod;
        n=n/2;
    }
    return (result)%mod;
}
bool isPrime(ll n)
{
    for(ll i=2;i*i<=n;i++)
        if(n%i==0)
            return false;
    return true;
}
bool mycomp(pll &a,pll &b)
{
    if(a.F!=b.F)
        return a.F < b.F;
    else
        return a.S < b.S;
}

int main()
{
    ll tests;
    cin>>tests;
    //tests=1;
    while(tests--)
    {
        ll n;
        cin>>n;
        ll i;
        vector<ll> power(n+1);
        for(i=1;i<=n;i++)
          cin>>power[i];
        ll m;
        cin>>m;
        vector<ll> p(m+1),s(m+1);
        vector<ll> bst(n+1);
        for(i=1;i<=m;i++)
        {
             cin>>p[i]>>s[i];
             bst[s[i]]=max(bst[s[i]],p[i]);
        }
        for(i=n-1;i>=0;i--)
          bst[i]=max(bst[i],bst[i+1]);
          
        bool ok=true;
        ll ans=0;
        ll pos=1;
        while(pos<=n)
        {
             ans+=1;
             ll npos=pos;
             ll mx=0;
             while(npos<=n)
             {
                  mx=max(mx,power[npos]);
                  if(mx> bst[npos-pos+1])
                    break;
                  npos+=1;
             }
             if(npos==pos)
             {
                  ok=false;
                  break;
             }
             pos=npos;
        }
        if(ok)
          cout<<ans<<"\n";
        else 
          cout<<"-1\n";

    }
}
