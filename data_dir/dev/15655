#include <bits/stdc++.h>
using namespace std;
const int MAX = 1e4;
 
typedef long long ll;
 
ll A = 911382323, B = 972663749;
ll h1[MAX], h2[MAX], p[MAX];
int arr[MAX];
string s;
 
ll buildH(ll *H, int k)
{
    if(k == 0)
        return H[0] = s[0];
    return H[k] = (buildH(H, k - 1)*A + s[k]) % B;
}
 
ll buildP(int k)
{
    if(k == 0) 
        return p[0] = 1;
    return p[k] = (buildP(k - 1)*A) % B;
}
 
ll vhash(ll *H, int a, int b)
{
    if(a == 0)
        return H[b];
    ll ans = (H[b] - H[a - 1] * p[b - a + 1]) % B;
    if(ans < 0)
        ans += B;
    return ans;
}

ll vhashDir(int a, int b, bool ida)
{
	if(ida) return vhash(h1, a, b);
	return vhash(h2, s.size()
    	 - b - 1, s.size() - a - 1);
}

int main()
{
	int t;
	cin >> t;
	while(t--)
	{
		cin >> s;
		int n = s.size();
		buildH(h1, n-1); 
		reverse(s.begin(), s.end());
		buildH(h2, n-1);
		buildP(n + 1);
		reverse(s.begin(), s.end());
		int L = -1, R = -1;
		int pr = -1, su = -1;
		
		bool fl = false;
		bool fl_pre = false;
		bool fl_su = false;
		
		for(int i = 0; i < n; i++)
		{
			for(int j = i + 1; j < n; j++)
			{
				// [0, i]  [j, n - 1]
				int v1 = vhashDir(0, i, 1);
				int v2 = vhashDir(j, n - 1, 1);
				int m = n - j;
				int ida = (((v1 * p[m]) % B) + v2) % B;
			
				v1 = vhashDir(0, i, 0);
				v2 = vhashDir(j, n - 1, 0);
				m = i + 1;
				int volta = (((v2 * p[m]) % B) + v1) % B;
				
				if(ida == volta)
				{
					if(!fl) L = i, R = j, fl = true;
					else
					{
						int T = i + 1 + n - j;
						if(T <= n and T > L + 1 + n - R)
							L = i, R = j;
					}
				}		
			}
			int indo = vhashDir(0, i, 1);
			int voltando = vhashDir(0, i, 0);
			
			if(indo == voltando)
			{
				if(!fl_pre) pr = i, fl_pre = true;
				else if(pr + 1 < i + 1) pr = i;
			}
			
			indo = vhashDir(i, n - 1, 1);
			voltando = vhashDir(i, n - 1, 0);
			
			if(indo == voltando)
			{
				if(!fl_su) su = i, fl_su = true;
				else if(n - su < n - i) su = i;
			}
		}
		
		vector<string> ANS;
		
		if(L != -1 and R != -1)
			ANS.push_back(s.substr(0, L + 1) + s.substr(R));
		if(pr != -1)
			ANS.push_back(s.substr(0, pr + 1));
		if(su != -1)
			ANS.push_back(s.substr(su));
			
		string ans;
		for(int i = 0; i < ANS.size(); i++)
			if(ans.size() < ANS[i].size())
				ans = ANS[i];
				
		cout << ans << endl;
	}
    return 0;
}