#include <bits/stdc++.h>
//#define int long long
#define endl "\n"
using namespace std;
inline int in(){int32_t x ; scanf("%d",&x);return x;}
const int maxn = 3e5 + 10;
const int mod = 1e9 + 7;
const int inf = 1e9 + 10;
bool mark[maxn];
vector<int> g[maxn];
int pre[maxn],h[maxn],t,nxt[maxn];
int q[maxn],T;
inline void dfs(int node , int fa = -1)
{
    mark[node] = true;
    pre[node] = fa;
    h[node] = t ++;
    for (auto u : g[node])
    {
        if (u == fa) continue;
        if (mark[u])
        {
            if (h[u] >= h[node]) continue;
            //vector<int> cycle;
            int cur = node;
            int mini = inf , maxi = -inf;
            T = 0;
            while(cur != u)
            {
              //  cycle.push_back(cur);
                q[T ++] = cur;
                cur = pre[cur];
            }
            //cycle.push_back(u);
            q[T ++] = u;
            for (int i = 0 ; i < T ; i ++) { u = q[i] ;  mini = min(mini,u) , maxi = max(maxi,u);}
            nxt[mini] = maxi;
            
        }else dfs(u,node);
        
    }
    
}
long long suf[maxn];
int r[maxn];

inline long long shit(int x) {return 1LL * x * (x + 1) / 2;}
int32_t main()
{
    int n = in() , m = in();
    for (int i = 0 ; i <= n ; i ++) nxt[i] = n;
    for (int i = 0 ; i < m ; i ++)
    {
        int v = in() - 1 , u = in() - 1;
        g[v].push_back(u);
        g[u].push_back(v);
    }
    for (int i = 0 ; i < n ; i ++)
        if (!mark[i]) dfs(i);
    for (int i = n - 1 ; i >= 0 ; i--)
    {
        suf[i] += suf[i + 1];
        nxt[i] = min(nxt[i],nxt[i + 1]);
        suf[i] += (nxt[i]-i);
        r[i] = nxt[i] - 1;
    }
    int q = in();
    while(q --)
    {
        int l = in() - 1 , r = in() - 1;
        
        
        int low = l - 1 , hi = r + 1;
        while(low + 1 < hi)
        {
            int mid = (low + hi) >> 1;
            if (::r[mid] > r) hi = mid;
            else low = mid;
        }
        cout << 1LL * (suf[l] - suf[hi]) + shit(r - hi + 1) << "\n";
    }
}
