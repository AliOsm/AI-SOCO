#include<bits/stdc++.h>
//#include<ctime>
//#include <stdlib.h>
using namespace std;
#define time ios_base::sync_with_stdio(0);cin.tie(0);
#define dpp(arr,val) memset(arr,val,sizeof (arr))
#define ll long long
#define ull unsigned long long
#define ld long double
#define PQ priority_queue
#define pii pair<int,int>
#define pll pair<ll,ll>
#define S second
#define F first
#define MP make_pair

//const int oo=0x3f3f3f3f ;

double eps=1e-9;
double pi=acos(-1);
//bool isprime(ll value){int cnt=0;for (ll i=1; i*i<=value; i++){if (value%i==0){cnt++;if (i*i!=value){cnt++;}}}if (cnt==2){return true;}else{return false;}}
ll fastpower(ll b,ll p)
{
    ll ans=1;
    while(p){if (p%2){ans=(ans*b);}b=b*b;p/=2;}
    return ans;
}

ll fastpowermod(ll b,ll p,ll m)
{
    ll ans=1;
    while(p)
    {
        if (p%2)
        {
            ans=((ans%m)*(b%m))%m;
        }
        b=((b%m)*(b%m))%m;
        p/=2;
    }
    return ans%m;
}
string  makeitstring(ll n)
{
    string ans;
    bool ch=0;
    if (n<0)
    {
        n*=-1;
        ch=1;
    }
    if (n==0)
    {
        ans="0";
    };
    while (n)
    {
        ll mo=n%10;
        mo+=48;
        char m=mo;
        ans=m+ans;
        n/=10;
    }
    if (ch)
    {
        ans='-'+ans;
    }
    return ans;
}
// gold bach (using induction)theory any number can be expressed as the sum of three prime numbers
// if num>2 and any even number greater than two can be expressed as the sum of two prime numbers
//ll ny[12]= {31,28,31,30,31,30,31,31,30,31,30,31};
//ll ly[12]= {31,29,31,30,31,30,31,31,30,31,30,31};
//bool valid(int x,int y,int n,int m){return (x>=0&&y<m&&x<n&&y>=0);}
//ll ncr(ll n,ll r){ll ans=1;r=min(r,n-r);for (int i=1;i<=r;i++){ans*=(n-r+i);ans/=i;}return ans;}
bool checksqrt(ll f){ll num=sqrt(f);return (num*num==f);}
//struct element{ll l,r,index;};
//bool cmp(element a,element b){if (a.l==b.l){return a.r>b.r;}else {return a.l<b.l ;}}
//bool isPowerOfTwo(ll x){return (x && !(x & (x - 1)));}
//bool checkpower(long double n){long double f=sqrt(n);return !(f-floor(f));}
//string multiply(string one,string two){string s;int cnt=0;if (one[0]=='-'){reverse(one.begin(),one.end());one.pop_back();reverse(one.begin(),one.end());cnt++;}if (two[0]=='-'){reverse(two.begin(),two.end());two.pop_back();reverse(two.begin(),two.end());cnt++;}int n1=one.size();int n2=two.size();vector<int>ans(n1+n2,0);int pos1=0;int pos2=0;for (int i=n1-1; i>=0; i--){int carry=0;int digit1=one[i]-'0';pos2=0;for (int j=n2-1; j>=0; j--){int digit2=two[j]-'0';int sum=(digit1*digit2)+ans[pos1+pos2]+carry;carry=sum/10;ans[pos1+pos2]=sum%10;pos2++;}if (carry>0){ans[pos1+pos2]+=carry;}pos1++;}bool check=0;for (int i=ans.size()-1; i>=0; i--){if (ans[i]){check=true;}if (check){s+=makeitstring(ans[i]);}}if(!check){s+='0';}if (cnt%2){s='-'+s;}return s;}
//double eps =1e-9;
//void comparing_doubles(double f,double s){if (f-s>eps){cout<<">"<<endl;}else if (f-s<-eps){cout<<"<"<<endl;}else{// if (abs(f-s)<eps)cout<<"=";}}
bool compare(double f,double s)
{
    return  (abs(f-s)<eps);
}
ll gcd(ll a,ll b)
{
    while(b!=0)
    {
        ll a2=a;
        a=b;
        b=a2%b;
    }
    return a;
}
//ll solve(ll n){return (n*(n+1))/2;}
//ll cumsumrule(ll l,ll r,vector<ll>&cum){if (!l){return cum[r];}else {return cum[r]-cum[l-1];}}
/*
struct point{
    ll x,y;
};
bool eq(point p1,point p2){return (p1.x==p2.x&&p1.y==p2.y);}
ll distance(point p1,point p2){ll dis=0;dis+=((p1.x-p2.x)*(p1.x-p2.x));dis+=((p1.y-p2.y)*(p1.y-p2.y));return dis;}
bool sq(point p1,point p2,point p3,point p4)
{
    if ((eq(p1,p2)||eq(p1,p3)||eq(p1,p4))||(eq(p2,p3)||eq(p2,p4))||eq(p3,p4))
    {
        return 0;
    }

    ll d2=distance(p1,p2);
    ll d3=distance(p1,p3);
    ll d4=distance(p1,p4);
    if (d2==d3&&2*d2==d4&&2*d2==distance(p2,p3)) {
    ll d=distance(p2,p4);return (d==distance(p3,p4)&&d==d2);
    }
    if (d3==d4&&2*d3==d2&&2*d3==distance(p3, p4)) {
        ll d=distance(p2, p3);
        return (d==distance(p2,p4)&&d==d3);
    }
    if (d2==d4&&2*d2==d3&&2*d2==distance(p2,p4)){
        ll d = distance(p2, p3);
        return (d==distance(p3, p4)&&d==d2);
    }

    return 0;
}



void rot(ll &x1,ll &y1,ll x2, ll y2)
{
 ll xf=x2-(y1-y2);
 ll yf=y2+(x1-x2);
 x1=xf;
 y1=yf;

}
*/
/*
int memo[MAX][MAX];

struct state {
	int i, j;
	bool isProcessed;
	state(int i, int j) : i(i), j(j), isProcessed(0) {}
};

int best(int i, int j) {
	stack<state> st;
	state cur = state(i, j);
	st.push(cur);

	while(!st.empty()) {
		cur = st.top(), i = cur.i, j = cur.j, st.pop();
		//base case handling
		if(memo[i][j] == -1) {
			if(i >= j)
				memo[i][j] = 0;
			else if(!cur.isProcessed) {
				//push me again to be processed later
				cur.isProcessed = 1;
				st.push(cur);
				//push my sub-states
				st.push(state(i+1, j-1));
				st.push(state(i+1, j));
				st.push(state(i, j-1));
			} else // Evaluate
				memo[i][j] = min(memo[i+1][j-1] + (A[i] != A[j]), min(memo[i][j-1]+1, memo[i+1][j]+1));
		}
	}

	return memo[cur.i][cur.j];
}*/

/*void unionrule(int i,ll l,ll cnt)
{
    if (i==m){if (cnt%2==0){ans+=(n/l);}else {ans-=(n/l);}return ;}
    // add 1 set elements
    // subtract 2 set elements
    // add 3 set elements subtract 4 set elements etc.
    unionrule(i+1,(l*a[i])/gcd(l,a[i]),cnt+1);
    unionrule(i+1,l,cnt);
}
*/
//priority_queue<int,vector<int>,greater<int> >pqmin;
//priority_queue<pair<pii,pii>,vector<pair<pii,pii>>,greater<pair<pii,pii>>>pqmin;
/*

// C++ program for implementation of KMP pattern searching
// algorithm
#include <bits/stdc++.h>

void computeLPSArray(char* pat, int M, int* lps);

// Prints occurrences of txt[] in pat[]
void KMPSearch(char* pat, char* txt)
{
    int M = strlen(pat);
    int N = strlen(txt);

    // create lps[] that will hold the longest prefix suffix
    // values for pattern
    int lps[M];

    // Preprocess the pattern (calculate lps[] array)
    computeLPSArray(pat, M, lps);

    int i = 0; // index for txt[]
    int j = 0; // index for pat[]
    while (i < N) {
        if (pat[j] == txt[i]) {
            j++;
            i++;
        }

        if (j == M) {
            printf("Found pattern at index %d ", i - j);
            j = lps[j - 1];
        }

        // mismatch after j matches
        else if (i < N && pat[j] != txt[i]) {
            // Do not match lps[0..lps[j-1]] characters,
            // they will match anyway
            if (j != 0)
                j = lps[j - 1];
            else
                i = i + 1;
        }
    }
}

// Fills lps[] for given patttern pat[0..M-1]
void computeLPSArray(char* pat, int M, int* lps)
{
    // length of the previous longest prefix suffix
    int len = 0;

    lps[0] = 0; // lps[0] is always 0

    // the loop calculates lps[i] for i = 1 to M-1
    int i = 1;
    while (i < M) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        }
        else // (pat[i] != pat[len])
        {
            // This is tricky. Consider the example.
            // AAACAAAA and i = 7. The idea is similar
            // to search step.
            if (len != 0) {
                len = lps[len - 1];

                // Also, note that we do not increment
                // i here
            }
            else // if (len == 0)
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}

// Driver program to test above function
int main()
{
    char txt[] = "ABABDABACDABABCABAB";
    char pat[] = "ABABCABAB";
    KMPSearch(pat, txt);
    return 0;
}

*/
/*
// A C++ program to find articulation points in an undirected graph
#include<iostream>
#include <list>
#define NIL -1
using namespace std;

// A class that represents an undirected graph
class Graph
{
    int V;    // No. of vertices
    list<int> *adj;    // A dynamic array of adjacency lists
    void APUtil(int v, bool visited[], int disc[], int low[],
                int parent[], bool ap[]);
public:
    Graph(int V);   // Constructor
    void addEdge(int v, int w);   // function to add an edge to graph
    void AP();    // prints articulation points
};

Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}

void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w);
    adj[w].push_back(v);  // Note: the graph is undirected
}

// A recursive function that find articulation points using DFS traversal
// u --> The vertex to be visited next
// visited[] --> keeps tract of visited vertices
// disc[] --> Stores discovery times of visited vertices
// parent[] --> Stores parent vertices in DFS tree
// ap[] --> Store articulation points
void Graph::APUtil(int u, bool visited[], int disc[],
                                      int low[], int parent[], bool ap[])
{
    // A static variable is used for simplicity, we can avoid use of static
    // variable by passing a pointer.
    static int time = 0;

    // Count of children in DFS Tree
    int children = 0;

    // Mark the current node as visited
    visited[u] = true;

    // Initialize discovery time and low value
    disc[u] = low[u] = ++time;

    // Go through all vertices aadjacent to this
    list<int>::iterator i;
    for (i = adj[u].begin(); i != adj[u].end(); ++i)
    {
        int v = *i;  // v is current adjacent of u

        // If v is not visited yet, then make it a child of u
        // in DFS tree and recur for it
        if (!visited[v])
        {
            children++;
            parent[v] = u;
            APUtil(v, visited, disc, low, parent, ap);

            // Check if the subtree rooted with v has a connection to
            // one of the ancestors of u
            low[u]  = min(low[u], low[v]);

            // u is an articulation point in following cases

            // (1) u is root of DFS tree and has two or more chilren.
            if (parent[u] == NIL && children > 1)
               ap[u] = true;

            // (2) If u is not root and low value of one of its child is more
            // than discovery value of u.
            if (parent[u] != NIL && low[v] >= disc[u])
               ap[u] = true;
        }

        // Update low value of u for parent function calls.
        else if (v != parent[u])
            low[u]  = min(low[u], disc[v]);
    }
}

// The function to do DFS traversal. It uses recursive function APUtil()
void Graph::AP()
{
    // Mark all the vertices as not visited
    bool *visited = new bool[V];
    int *disc = new int[V];
    int *low = new int[V];
    int *parent = new int[V];
    bool *ap = new bool[V]; // To store articulation points

    // Initialize parent and visited, and ap(articulation point) arrays
    for (int i = 0; i < V; i++)
    {
        parent[i] = NIL;
        visited[i] = false;
        ap[i] = false;
    }

    // Call the recursive helper function to find articulation points
    // in DFS tree rooted with vertex 'i'
    for (int i = 0; i < V; i++)
        if (visited[i] == false)
            APUtil(i, visited, disc, low, parent, ap);

    // Now ap[] contains articulation points, print them
    for (int i = 0; i < V; i++)
        if (ap[i] == true)
            cout << i << " ";
}
*/
/*
int parent[N];
int sz[N];
ll cnt[N];
void st()
{

   for (int i=0;i<N;i++)
   {
       parent[i]=i;
       sz[i]=1;

   }
}
int findp(int node)
{
    if (parent[node]==node)
    {
        return node;
    }
    return parent[node]=findp(parent[node]);
}
void unionnodes(int a,int b,int val)
{
    int pa=findp(a);
    int pb=findp(b);
    if (pa==pb)
    {
     return ;
    }
    if (sz[pa]>=sz[pb])
    {
        sz[pa]+=sz[pb];
        parent[pb]=pa;
    }
    else {
        sz[pb]+=sz[pa];
        parent[pa]=pb;
    }
    return ;
}*/
//int pal[N];
/*string findSum(string str1, string str2)
{
    // Before proceeding further, make sure length
    // of str2 is larger.
    if (str1.length() > str2.length())
        swap(str1, str2);

    // Take an empty string for storing result
    string str = "";

    // Calculate lenght of both string
    int n1 = str1.length(), n2 = str2.length();

    // Reverse both of strings
    reverse(str1.begin(), str1.end());
    reverse(str2.begin(), str2.end());

    int carry = 0;
    for (int i=0; i<n1; i++)
    {
        // Do school mathematics, compute sum of
        // current digits and carry
        int sum = ((str1[i]-'0')+(str2[i]-'0')+carry);
        str.push_back(sum%10 + '0');

        // Calculate carry for next step
        carry = sum/10;
    }

    // Add remaining digits of larger number
    for (int i=n1; i<n2; i++)
    {
        int sum = ((str2[i]-'0')+carry);
        str.push_back(sum%10 + '0');
        carry = sum/10;
    }

    // Add remaining carry
    if (carry)
        str.push_back(carry+'0');

    // reverse resultant string
    reverse(str.begin(), str.end());

    return str;
}*/
/*const int N=1e3+1;
int n,m;
int dp[N][N];
bool vis[N][N];
string arr[N][N];
int col(string c)
{
    int sz=c.size();
    int cur=1;
    int ans=0;
    for (int i=sz-1;i>=0;i--)
    {
     ans+=(c[i]-'A'+1)*cur;
     cur*=26;
    }
    return ans;
}
void vecki(string s,vector<pii>&inde)
{

    string r="";
    string c="";
    for (int i=1;i<s.size();)
    {
    if (s[i]=='+'){inde.push_back({atoi(r.c_str())-1,col(c)-1});r=c="";i++;}
    if (isalpha(s[i])){c+=s[i];i++;}
    else if (isdigit(s[i])){r+=s[i];i++;}

    }
    if(r!=""&&c!=""){inde.push_back({atoi(r.c_str())-1,col(c)-1});}
}
int conv(char c)
{
    if (isalpha(c))
    {
       c-='A';
       return (int)c;
    }
    else if(isdigit(c)){c-='0';return (int)c-1;}

}

int solve(int i,int j)
{


    if (vis[i][j]){return dp[i][j];}
    string s=arr[i][j];
    vector<pii>inde;
    vecki(s,inde);
    int sum=0;
    for (int i=0;i<inde.size();i++)
    {
        sum+=solve(inde[i].first,inde[i].second);

    }
    vis[i][j]=1;
    return dp[i][j]=sum;

}*/

/*ll countbit(ll n)
{
    int ans=0;
    while(n)
    {
        if (n%2){ans++;}
        n/=2;
    }
    return ans;
}
*/
/*const int N=1e6+10;
int parent[N];
vector<pll>adj[N];
ll dist[N];
void printpath(int node)
{
    if (parent[node]==-1){cout<<node<<" ";return ;}
    else {
    printpath(parent[node]);
    cout<<node<<" ";
    }
}
void init()
{

    for (int i=0;i<N;i++)
    {
        parent[i]=-1;
        dist[i]=LLONG_MAX;
    }
}
void dijkestra(ll src)
{
	priority_queue<pll>pq;
	pq.push({0,src});
    dist[src]=0;
    while(!pq.empty())
    {

        ll p=pq.top().second;
        ll w=-1*pq.top().first;
        pq.pop();
        for (auto ch:adj[p])
        {
            if (ch.first+w<dist[ch.second])
            {
             parent[ch.second]=p;
             dist[ch.second]=ch.first+w;
             pq.push({dist[ch.second]*-1,ch.second});
            }
        }
    }
}*/
/*ll fact[N];
ll invfact[N];
ll modInverse(ll a,ll m)
{
    int m0 = m;
    int y = 0, x = 1;

    if (m == 1)
      return 0;

    while (a > 1)
    {
        // q is quotient
        int q = a / m;
        int t = m;

        // m is remainder now, process same as
        // Euclid's algo
        m = a % m, a = t;
        t = y;

        // Update y and x
        y = x - q * y;
        x = t;
    }

    // Make x positive
    if (x < 0)
       x += m0;

    return x;
}
void initfact()
{
    fact[0]=1;
    for (int i=1;i<N;i++)
    {
        fact[i]=fact[i-1]*i;
        fact[i]%=M;
    }
    for (int i=0;i<N;i++)
    {
        invfact[i]=modInverse(fact[i],M)%M;

    }
}
ll npr(ll n,ll r)
{
    return (fact[n]*invfact[n-r])%M;
}*/

/*ll modth[3];
ll cntdivrange(ll l,ll r,ll num){return (r/num)-(l/num)+(l%num==0);}
for (int i=0;i<3;i++)
{
    // cnt how many number in range mod 3=0 mod 3 =1 mod 3 =2
modth[i]=cntdivrange(l+i,r+i,3);
}
*/
/*vector<ll>v;
priority_queue<int,vector<int>,greater<int> > my_min_heap;
vector<pll>intervals;
ll treemin[N];
ll treemax[N];
ll lazy[N];
void build(int node,int st,int en)
{

    if (st==en)
    {
      treemin[node]=v[st];
        treemax[node]=v[st];
        return ;
    }
    else
    {
        int mid=st+(en-st)/2;
        build(node*2+1,st,mid);
        build(node*2+2,mid+1,en);
        //  treemin[node]=min(treemin[node*2+1],treemin[node*2+2]);
        treemax[node]=max(treemax[node*2+1],treemax[node*2+2]);
    }
}

void updatesingleelment(int node,int st,int en,int idx,int val)
{
    if (st==en)
    {
        v[idx]+=val;
        treemin[node]+=val;
        treemax[node]+=val;
    }
    else
    {
        int mid=st+(en-st)/2;
        if (st<=idx&&idx<=mid)
        {
            updatesingleelment(node*2+1,st,mid,idx,val);
        }
        else
        {
            updatesingleelment(node*2+2,mid+1,en,idx,val);
        }
        treemax[node]=max(treemax[2*node+1],treemax[2*node+2]);
        treemin[node]=min(treemin[2*node+1],treemin[2*node+2]);
    }
}
ll querymin(int node,int st,int en,int l,int r)
{
    if (r<st||en<l)
    {
        return 1e18;
    }
    if (l<=st&&en<=r)
    {
        return treemin[node];
    }
    int mid=st+(en-st)/2;
    ll p1=querymin(node*2+1,st,mid,l,r);
    ll p2=querymin(node*2+2,mid+1,en,l,r);
    return min(p1,p2);
}
ll querymax(int node,int st,int en,int l,int r)
{

    if (r<st||en<l)
    {
        return -1e18;
    }
    if (l<=st&&en<=r)
    {
        return treemax[node];
    }
    int mid=st+(en-st)/2;
    ll p1=querymax(node*2+1,st,mid,l,r);
    ll p2=querymax(node*2+2,mid+1,en,l,r);
    return max(p1,p2);
}
void updaterangenaive(int node,int st,int en,int l,int r,int val)
{
    if (r<st||en<l)
    {
        return ;
    }
    if (st==en)
    {
        treemax[node]+=val;
        treemin[node]+=val;
        return ;
    }
    int mid=st+(en-st)/2;
    updaterangenaive(node*2+1,st,mid,l,r,val);
    updaterangenaive(node*2+2,mid+1,en,l,r,val);
    treemax[node]=max(treemax[node*2+1],treemax[node*2+2]);
    treemin[node]=min(treemin[node*2+1],treemin[node*2+2]);


}*/
/*void updateRange(int node, int st, int en, int l, int r, int val)
{
    if(lazy[node]!=0)
    {
        treemax[node]+=lazy[node];
    //    treemin[node]+=lazy[node];

        if(st!=en)
        {
            lazy[node*2+1]+=lazy[node];
            lazy[node*2+2]+=lazy[node];
        }
        lazy[node]=0;
    }
    if(st>en||st>r||en<l){return;}
    if(st>=l&&en<=r)
    {
//        treemin[node]+=val;
        treemax[node]+=val;
        if(st!=en)
        {
            lazy[node*2+1]+=val;
            lazy[node*2+2]+=val;
        }
        return;
    }
    int mid=st+(en-st)/2;
    updateRange(node*2+1,st,mid,l,r,val);
    updateRange(node*2+2,mid+1,en,l,r,val);
    //treemin[node]=min(treemin[node*2+1],treemin[node*2+2]);
    treemax[node]=max(treemax[node*2+1],treemax[node*2+2]);

}
ll queryRangemax(int node,int st,int en,int l,int r)
{
if(st>en||st>r||en<l){return -1e18;}
    if(lazy[node]!=0)
    {
        treemax[node]+=lazy[node];
        if(st!=en)
        {
        lazy[node*2+1]+=lazy[node];
        lazy[node*2+2]+=lazy[node];
        }
        lazy[node]=0;
    }

    if(st>=l&&en<=r){return treemax[node];}
    int mid=st+(en-st)/2;
    ll p1=queryRangemax(node*2+1,st, mid, l, r);
    ll p2=queryRangemax(node*2+2, mid + 1, en, l, r);
    return max(p1,p2);
}
*/
//vector<ll>anyint[N],le[N],ri[N];

//const  int M=1e9+7;
/*char convert_base(int num)
{
    if (num>=0&&num<=9)
    {
        return num+'0';
    }
    else {
        return (num-10)+'A';
    }
}
string makeitbase(ll num,ll base)
{
    string s;
    while(num)
    {
        ll mod=num%base;
        s+=(mod+'0');
        num/=base;
    }
    reverse(s.begin(),s.end());
    return s;
}
bool check(ll num)
{
    ll now=1;
    while(now<num)
    {
        now*=2;
    }
    return (now-1==num);
}

ll make_it_number(string s,ll base)
{
    ll ans=0;
    for (int i=0;i<s.size();i++)
    {
     if (s[i]=='1'){ans+=fastpower(base,i);}
    }
    return ans;
}
bool cmp(pll a,pll b)
{
    if (a.first>b.first){return a.second<b.second;}
    else{return a.first<b.first;}
}
ll count_factorial_last_zeros(ll fact,ll primefactor,ll how_many_prime_factor_in_this_base)
{
    ll ans=0;
    while(fact/primefactor>0)
    {
      ans+=(fact/=primefactor);
    }
    return (ans/how_many_prime_factor_in_this_base);
}
*/
/*struct point{
ll x,y;
};
int orientation(point p1, point p2, point p3)
{
    int val=(p2.y - p1.y)*(p3.x - p2.x)-(p2.x - p1.x) * (p3.y - p2.y);
    if (val==0){return 0;}
    return (val>0)? 1: 2;
}
bool check(point p1,point p2,point p3)
{
 ll val=(p2.y - p1.y)*(p3.x - p2.x)-(p2.x - p1.x) * (p3.y - p2.y);
 return (val==0);
}*/
/*const int sz=5e3+20;
int parent[sz];
int depth[sz];
int cnt[sz];
vector<ll>adj[sz];
void st()
{

   for (int i=0;i<sz;i++)
   {
       parent[i]=i;
       depth[i]=1;

   }
}
int findp(int node)
{
    if (parent[node]==node)
    {
        return node;
    }
    return parent[node]=findp(parent[node]);
}
void unionnodes(int a,int b)
{
    int pa=findp(a);
    int pb=findp(b);
    if (pa==pb)
    {
     return ;
    }
    if (depth[pa]>=depth[pb])
    {
        depth[pa]+=depth[pb];
        parent[pb]=pa;
    }
    else {
        depth[pb]+=depth[pa];
        parent[pa]=pb;
    }
    return ;
}
*/
/*ll kurksal()
{
    ll x, y;
    ll cost=0,maxi= 0;
    for(int i=0;i<edges.size();++i)
    {
        x = edges[i].S.F;
        y = edges[i].S.S;
        cost=edges[i].F;

        if(findp(x)!=findp(y))
        {

            maxi+=cost;
            unionnodes(x,y);
        }
    }
return maxi;

}*/

const int sz=26;
const int M=1e9+7;
ll add(ll a,ll b)
{
    return (a%M+b%M)%M;
}
ll mul(ll a,ll b)
{
    return (a%M*b%M)%M;

}
vector<ll>adj1[sz],adj2[sz];
vector<ll>qu1,qu2;
vector<pll>ans;
void make(vector<ll>&f,vector<ll>&s)
{
    while(f.size()&&s.size())
    {
        ans.push_back({f[f.size()-1],s[s.size()-1]});
        f.pop_back();
        s.pop_back();
    }

}
int main()
{
    //myf.open("file.txt");
    //freopen("task.in", "r", stdin);
    //freopen("output.txt", "w", stdout);
     ll n;
      cin>>n;
     string f,s;
     cin>>f>>s;
     for (int i=0;i<f.size();i++)
     {
     if (f[i]!='?'){adj1[f[i]-'a'].push_back(i);}
     else {qu1.push_back(i);}

     }
     for (int i=0;i<s.size();i++)
     {
     if(s[i]!='?'){adj2[s[i]-'a'].push_back(i);}
     else {qu2.push_back(i);}
     }

     for (int i=0;i<26;i++)
     {
         make(adj1[i],adj2[i]);
     }

    for (int i=0;i<26;i++)
    {
     make(qu1,adj2[i]);
     make(adj1[i],qu2);
    }
    make(qu1,qu2);
    cout<<ans.size()<<endl;
    for (int i=0;i<ans.size();i++)
    {
        cout<<ans[i].F+1<<" "<<ans[i].S+1<<endl;
    }
     return 0;

}
