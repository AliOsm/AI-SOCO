/*
author: madhav_1999 aka orthodoxparadox
21-Jul-2019
03:12:05
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define sz(x) ((long long) x.size())
#define pii pair<int, int>
#define fup(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define len(x) sz(x)
#define fnu for(ll i = 0; i < n; i++)
#define trav(x, v) for(auto &x : v)
#define rev(Y) reverse(all(Y))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#define inf 2e18
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef MADHAV
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...)
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
template <typename T, typename S> ostream& operator << (ostream& os, const map<T, S>& v) { for (auto it : v) os << it.first << "=>" << it.second << endl; return os; }
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int MOD = 1e9 + 7;

int takemod(int a, int mod = MOD){a%=mod;if(a<0)a+=mod;return a;}

int fast_exp(int base, int expo, int mod = MOD) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a, int mod = MOD){return takemod(fast_exp(takemod(a), mod-2));}



const int N = 2e5 + 10;

typedef int Value;

struct LazySegmentTree
{
	//POSSIBLY CHANGE += lz[id] to = lz[id] depending on situation
	int n;
	int TYPE;
	vector<Value> st;
	vector<Value> lz;
	vector<Value> a;
	LazySegmentTree(int num, string type) : n(num), a(num + 10, 0), st(4*num + 10, 0), lz(4*num + 10, 0) {
		if(type == "SUM") TYPE = 1;
		if(type == "MIN") TYPE = 2;
		if(type == "MAX") TYPE = 3;
	}

	inline int lazycount(int l, int r)
	{
		if(TYPE == 1) return r - l + 1;
		if(TYPE == 2) return 1;
		if(TYPE == 3) return 1;
		return 0; 
	}

	inline Value nullval()
	{
		if(TYPE == 1) return 0;
		if(TYPE == 2) return inf;
		if(TYPE == 3) return -inf;
		return 0;
	}

	inline Value merge(Value x, Value y)
	{
		if(TYPE == 1) return x + y;
		if(TYPE == 2) return min(x, y);
		if(TYPE == 3) return max(x, y);
		return 0;
	}

	void build(int id, int l, int r)
	{
		if(l == r)
		{
			st[id] = a[l];
			lz[id] = 0;
			return;
		}
		int mid = (l + r) >> 1;
		build(id << 1, l, mid);
		build(id << 1 | 1, mid + 1, r);
		st[id] = merge(st[id << 1], st[id << 1 | 1]);
		lz[id] = 0;
	}

	void update(int id, int l, int r, int s, int e, Value val)
	{
		if(lz[id])
		{
			st[id] += lazycount(l, r)*lz[id];
			if(l != r)
			{
				lz[id << 1] += lz[id];
				lz[id << 1 | 1] += lz[id];
			}
			lz[id] = 0;
		}
		if(s > r or e < l) return;
		if(l >= s and r <= e)
		{
			st[id] += lazycount(l, r)*val;
			if(l != r)
			{
				lz[id << 1] += val;
				lz[id << 1 | 1] += val;
			}
			return;
		}
		int mid = (l + r) >> 1;
		update(id << 1, l, mid, s, e, val);
		update(id << 1 | 1, mid + 1, r, s, e, val);
		st[id] = merge(st[id << 1], st[id << 1 | 1]);
	}

	Value query(int id, int l, int r, int s, int e)
	{
		if(lz[id])
		{
			st[id] += lazycount(l, r)*lz[id];
			if(l != r)
			{
				lz[id << 1] += lz[id];
				lz[id << 1 | 1] += lz[id];
			}
			lz[id] = 0;
		}
		if(s > r or e < l)
		{
			return nullval();
		}
		if(l >= s and r <= e)
		{
			return st[id];
		}
		int mid = (l + r) >> 1;
		Value q1 = query(id << 1, l, mid, s, e);
		Value q2 = query(id << 1 | 1, mid + 1, r, s, e);
		return merge(q1, q2);
	}

	void build()
	{
		build(1, 1, n);
	}

	void update(int s, int e, Value val)
	{
		update(1, 1, n, s, e, val);
	}

	Value query(int s, int e)
	{
		return query(1, 1, n, s, e);
	}
};


int tin[N], tout[N];
int cnt = 1;
vector<int> graph[N];
int x[N];

void dfs(int a, int p = -1)
{
	tin[a] = cnt++;
	for(int &i : graph[a])
	{
		if(i == p) continue;
		dfs(i, a);
	} 
	tout[a] = cnt++;
}

void solve()
{
	int n, m;
	cin >> n >> m;
	LazySegmentTree even(2*n, "SUM"), odd(2*n, "SUM");
	for(int i = 1; i <= n; i++)
	{
		cin >> x[i];
	}
	for(int i = 0; i < n - 1; i++)
	{
		int u, v;
		cin>> u >> v;
		graph[u].pb(v);
		graph[v].pb(u);
	}
	dfs(1);
	for(int i = 1; i <= n; i++)
	{
		if(tin[i] % 2 == 0)
		{
			even.update(tin[i], tin[i], x[i]);
		}
		else
		{
			odd.update(tin[i], tin[i], x[i]);
		}
	}
	while(m--)
	{
		int ty;
		cin >> ty;
		if(ty == 1)
		{
			int y, val;
			cin >> y >> val;
			if(tin[y] % 2 == 1)
			{
				odd.update(tin[y], tout[y], val);
				even.update(tin[y], tout[y], -val);
			}
			else
			{
				even.update(tin[y], tout[y], val);
				odd.update(tin[y], tout[y], -val);
			}
		}
		else
		{
			int r;
			cin >> r;
			if(tin[r] % 2 == 1)
			{
				cout << odd.query(tin[r], tin[r]) << endl;
			}
			else
			{
				cout << even.query(tin[r], tin[r]) << endl;
			}
		}
		
	}
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef MADHAV
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	clock_t t1, t2;
	t1 = clock();

	int t = 1;
	// cin >> t;
	while(t--)
	{
		solve();
	}
	t2 = clock(); cerr << "time taken: " << (t2-t1)/(dbl)CLOCKS_PER_SEC;
	return 0;
}