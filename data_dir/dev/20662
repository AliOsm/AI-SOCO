# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace std;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 1e6 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
int p[N];
int f[N];
bool fail_p[N];
bool fail_f[N];
string s;

int main () {               
    cin >> n >> s;
    s = '#' + s;
    int bal = 0;
    For (i, 1, n) {
    	if (s[i] == '(') bal ++;
    	else bal --;
    	
    	fail_p[i] |= fail_p[i - 1];
    	if (bal < 0) fail_p[i] = 1;
    	p[i] = bal;
    }
    bal = 0;
    FOr (i, n, 1) {
    	if (s[i] == '(') bal ++;
    	else bal --;

    	fail_f[i] |= fail_f[i + 1];
    	if (bal > 0) fail_f[i] = 1;
    	f[i] = bal;
    }
    int ans = 0;
    For (i, 1, n) {
    	if (fail_p[i - 1]) continue;
    	if (fail_f[i + 1]) continue;

    	bal = p[i - 1] + f[i + 1];
    	if (s[i] == '(') {
    		bal --;
    		if (!bal) ans ++;
    	} else {
    		bal ++;
    		if (!bal) ans ++;
    	}
    }

    cout << ans;
    return Accepted;
}

// Coded By OB