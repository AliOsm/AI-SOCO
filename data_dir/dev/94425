#include <bits/stdc++.h>
using namespace std;

const int mod = 998'244'353;

void add(int &x, int y) {
  x += y;
  if (x >= mod)
    x -= mod;
}

void sub(int &x, int y) {
  add(x, mod - y);
}

int power(int a, int n) {
  int r = 1;
  while (n > 0) {
    if (n % 2) {
      r = (1LL * r * a) % mod;
    }
    a = (1LL * a * a) % mod;
    n /= 2;
  }
  return r;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int p, s, r;
  cin >> p >> s >> r;
  
  if (p == 1) {
    cout << 1 << '\n';
    return 0;
  }
  
  --p;
  
  vector<vector<int>> c(p + s + 1, vector<int> (p + s + 1));
  for (int i = 0; i < (int) c.size(); ++i) {
    c[i][0] = c[i][i] = 1;
    for (int j = 1; j < i; ++j) {
      c[i][j] = c[i - 1][j];
      add(c[i][j], c[i - 1][j - 1]);
    }
  }
  
  int result = 0;
  for (int i = 0; i <= s - r; ++i) {
    int sum = 0;
    for (int mx = 0; mx <= i && s - i >= mx; ++mx) {
      if (s - i == mx) {
        for (int cnt = 1; cnt * mx <= i && cnt < p; ++cnt) {
          int total = c[i - cnt * mx + p - cnt - 1][p - cnt - 1] % mod;
          for (int j = 1; j <= p - cnt && (cnt + j) * mx <= i; ++j) {
            auto func = j % 2 ? sub : add;
            func(total, 1LL * c[i - (cnt + j) * mx + p - cnt - 1][p - cnt - 1] * c[p - cnt][j] % mod);
          }
          total = (1LL * total * c[p][cnt]) % mod;
          add(result, 1LL * total * power(cnt + 1, mod - 2) % mod);
        }
        if (p * mx == i) {
          add(result, power(p + 1, mod - 2) % mod);
        }
        continue;
      }
      int total = c[i + p - 1][p - 1];
      sub(total, sum);
      for (int j = 1; j <= p && j * (mx + 1) <= i; ++j) {
        auto func = j % 2 ? sub : add;
        func(total, 1LL * c[i - j * (mx + 1) + p - 1][p - 1] * c[p][j] % mod);
      }
      add(result, total);
      add(sum, total);
    }
  }
  
  int d = 0;
  for (int i = 0; i <= s - r; ++i) {
    add(d, c[i + p - 1][p - 1]);
  }
  
  result = (1LL * result * power(d, mod - 2)) % mod;
  
  cout << result << '\n';
  
  
}
