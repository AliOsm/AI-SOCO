# include <iostream>
# include <sstream>
# include <cstdio>
# include <cstdlib>
# include <algorithm>
# include <string>
# include <cstring>
# include <cmath>
# include <stack>
# include <queue>
# include <vector>
# include <list>
# include <map>
# include <set>
# include <deque>
# include <iterator>
# include <functional>
# include <bitset>
# include <climits>
# include <ctime>
using namespace std;
#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define odd(x) ((x)&1)
#define sqr(x) ((x)*(x))
#define mp make_pair
#define pb push_back
#define fir first
#define sec second
#define all(x) (x).begin(),(x).end()
#define mem(a,x) memset(a,x,sizeof(a))
#define rep(i,a,b) for (int i=(a); i<=(b); ++i)
#define per(i,a,b) for (int i=(a); i>=(b); --i)
#define rep_it(it,x) for (__typeof((x).begin()) it=(x).begin(); it!=(x).end(); it++)
#define ____ puts("\n_______________\n\n") 
#define debug(x) ____; cout<< #x << " => " << (x) << endl
#define debug_pair(x) cout<<"\n{ "<<(x).fir<<" , "<<(x).sec<<" }\n"
#define debug_arr(x,n) ____; cout<<#x<<":\n"; rep(i,0,n) cout<<#x<<"["<<(i)<<"] => "<<x[i]<<endl
#define debug_arr2(x,n,m) ____; cout<<#x<<":\n"; rep(i,0,n) rep(j,0,m) cout<<#x<<"["<<(i)<<"]["<<(j)<<"]= "<<x[i][j]<<((j==m)?"\n\n":"    ")
#define debug_set(x) ____; cout<<#x<<": \n"; rep_it(it,x) cout<<(*it)<<" "; cout<<endl
#define debug_map(x) ____; cout<<#x<<": \n"; rep_it(it,x) debug_pair(*it)
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef vector<int> vi;
const int oo = /*2 * 1000 * 1000 * 1000*/0x3f3f3f3f;
const ll ooo=9223372036854775807ll; 
const int _cnt = 1000 * 1000 + 7;
const int _p = 1000 * 1000 * 1000 + 7;
const int N=100005; 
const double PI=acos(-1.0);
const double eps=1e-9;
int o(int x) { return x%_p; }
int gcd(int a, int b) { return b ? gcd(b, a%b) : a; }
int lcm(int a, int b) { return a / gcd(a, b)*b; }

void file_put() {
    freopen("filename.in", "r", stdin);
    freopen("filename.out", "w", stdout);
} 

ll Pow(ll x,ll k,ll p) { ll ans=1; for (; k; k>>=1,(x*=x)%=_p) if (k&1) (ans*=x)%=_p; return ans; }

const int _M=100;
template <class V=ll,ll _p=(ll)1e9+7>
struct L_B{
	V base[_M+5][_M+5],a[_M+5],b[_M+5],t; int D,cnt; ll pp=13331;
	inline void Init(int _D) { D=_D,mem(base,0); cnt=0; }
	inline bool I(V a[]) {
		mem(b,0);
		rep(i,0,D-1) if (a[i]) {
			if (!base[i][i]) {
				t=Pow(a[i],_p-2,_p);
				rep(j,i,D-1) base[i][j]=a[j]=(ll)a[j]*t%_p;
				cnt++; return 1;
			}
			b[i]=a[i];
			per(j,D-1,i) a[j]=(a[j]-(ll)a[i]*base[i][j]%_p)%_p;
		}
		return 0;
	}
	inline bool Insert(V _a[],V _b[]=NULL) {
		memcpy(a,_a,D*sizeof(V)); bool tt=I(a);
		if (!tt && _b) memcpy(_b,b,D*sizeof(V)); return tt; 
	}
	inline void Normalize() {
		rep(i,0,D-1) if (base[i][i])
			rep(j,0,i-1) if (base[j][i]) 
				per(k,D-1,i) base[j][k]=(base[j][k]-(ll)base[i][k]*base[j][i]%_p)%_p;
		rep(i,0,D-1) rep(j,0,D-1) if (base[i][j]<0) base[i][j]+=_p;
	}
	inline L_B& Clone() const {
		L_B p; rep(i,0,D-1) rep(j,0,D-1) p.base[i][j]=base[i][j];
		p.D=D,p.cnt=cnt; return p;
	}
	friend L_B& Merge(const L_B &a,const L_B &b) {
		L_B c=a.Clone(); rep(i,0,b.D-1) c.Insert(b.base[i]); return c;
	}
	inline V Get_Hash_Code() const {
		V ans=D^cnt%_p;
		rep(i,0,D-1) rep(j,0,D-1) ans=((ll)ans*pp+base[i][j])%_p;
		return ans;
	}
	friend bool operator == (const L_B &_a,const L_B &_b) {
		L_B a=_a.Clone(),b=_b.Clone(); a.Normalize(),b.Normalize();
		return a.Get_Hash_Code()==b.Get_Hash_Code();
	}
	inline void Print() const { debug(D); debug(cnt); debug_arr2(base,D-1,D-1); }
};

int m,d,k,id=0; L_B<> B; ll a[15],ret; map <ll,int> M;

int main() {
    //file_put();
    
    scanf("%d%d",&m,&d);
    while (m--) {
    	scanf("%d",&k),B.Init(d);
    	rep(i,1,k) {
    		rep(j,0,d-1) scanf("%I64d",&a[j]);
    		B.Insert(a);
		}
		B.Normalize();
		ret=B.Get_Hash_Code();
		if (!M.count(ret)) M[ret]=++id;
		printf("%d ",M[ret]);
	}
	
    return 0;
}

