#include<bits/stdc++.h>
using namespace std;

int n, m, x, y, z, p, q, r;

int taken[200000];

vector < pair < int , int > > vec;
vector < int > lft;

int main()
{

    cin >> n;

    int ans = 0;

    for(int i = 2; i <= n; i = i * 2) taken[i] = 1;

    for(int i = 3; i <= n; i++){

        if(taken[i] == 1) continue;
        int tmp = 0;

        for(int j = i; j <= n; j += i) tmp += taken[j] == 0;
        if(tmp == 1) continue;

        ans += tmp / 2;

        if(tmp % 2){

            int prv = -1;

            for(int j = i, k = 1; j <= n; j += i){
                if(taken[j]) continue;

                if(j == 2 * i){
                    lft.push_back(j);
                    continue;
                }

                if(k % 2) prv = j;
                else vec.push_back({prv, j});
                k++;

            }

        }
        else{
            int prv = -1;
            for(int j = i, k = 1; j <= n; j +=i){
                if(taken[j]) continue;
                if(k % 2) prv = j;
                else vec.push_back({prv, j});

                k++;

            }
        }

        for(int j = i; j <= n; j += i) taken[j] = 1;

    }
    for(int i = 2; i <= n; i = i * 2) lft.push_back(i);

    ans += (int)lft.size()/ 2;

    cout << ans << endl;
    for(int i = 0; i < vec.size(); i++) printf("%d %d\n", vec[i].first, vec[i].second);

    for(int i = 0; i < (int)lft.size() - 1; i += 2) printf("%d %d\n", lft[i], lft[i + 1]);


    return 0;
}
