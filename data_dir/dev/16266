
#include<bits/stdc++.h>


using namespace std;

using ll   = long long;
using ii   = pair   < int , int >;
using i3   = pair   < int , ii  >;
using li   = pair   < ll  , int >;
using lii  = pair   < ll  , ii  >;
using pll  = pair   < ll  , ll  >;
using vi   = vector < int       >;
using vl   = vector < ll        >;
using vii  = vector < ii        >;
using vli  = vector < li        >;
using vpll = vector < pll       >;
using vi3  = vector < i3        >;
using vlii = vector < lii       >;


const int N = 100 + 5;
const ll INF = 1e17 + 7;
const double eps = 1e-9 , PI = acos(-1);

char s[N];
int need[4];
int has[4];
int price[4];

bool ok(ll burgers , ll rubles){
    ll sum = 0;
    for(int i = 0 ; i < 3 ; i ++) sum += 1ll * price[i] * max(0ll , burgers * 1ll*need[i] - (ll)has[i]);
    return sum <= rubles;
}

void solve(int testCase){

    scanf("%s" , s);
    for(int i = 0 ; s[i] ; i ++){
            if(s[i] == 'B')need[0] ++;
            if(s[i] == 'S')need[1] ++;
            if(s[i] == 'C')need[2] ++;
    }

    for(int i = 0 ; i < 3 ; i ++) scanf("%d" , &has[i]  );
    for(int i = 0 ; i < 3 ; i ++) scanf("%d" , &price[i]);

    ll r; scanf("%I64d" , &r);

    ll low = 0 , high = ll(1e15);
    while(low < high){
            ll mid = low + (high - low + 1) / 2;

            if(ok(mid , r)){
                    low = mid;
            }
            else {
                    high = mid - 1;
            }
    }

    printf("%I64d\n" , low);
}

main(){

    int t = 1;
    // scanf("%d" , &t);

    for(int testCase = 1 ; testCase <= t ; testCase ++){
            solve(testCase);
    }

    return 0;
}
