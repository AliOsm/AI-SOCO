#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <functional>
#include <cmath>
#include <climits>

#define ONLINE_JUDGE1

#if !defined(__GNUC__)
#include <hash_set>
#include <hash_map>

typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef signed short int16_t;
typedef unsigned short uint16_t;
typedef signed long int32_t;
typedef unsigned long uint32_t;
typedef signed long long int64_t;
typedef unsigned long long uint64_t;

typedef stdext::hash_set<size_t>    hash_set_size_t;
#else // !defined(__GNUC__)

#endif // !defined(__GNUC__)

typedef long double double_t;
typedef std::string string8_t;

typedef std::vector<size_t> vector_size_t;
typedef std::vector<vector_size_t> vector_2d_size_t;
typedef std::vector<int32_t> vector_int32_t;
typedef std::vector<uint32_t> vector_uint32_t;
typedef std::set<size_t> set_size_t;
typedef std::multiset<size_t> multiset_size_t;

typedef std::vector<string8_t> vector_string8_t;
typedef std::set<string8_t> set_string8_t;
typedef std::multiset<std::string> multiset_string8_t;

// Auxiliary functions definition
// 
template<typename T> inline T Abs(const T a) { return a < 0 ? -a : a; }
template<typename T> inline T Min(const T a, const T b) {return a < b ? a : b;}
template<typename T> inline T Max(const T a, const T b) {return a > b ? a : b;}
template<typename T> inline void UpdateMin(T& a, const T b) {a = Min(a, b);}
template<typename T> inline void UpdateMax(T& a, const T b) {a = Max(a, b);}

static const double_t eps = 1.0e-09;
template<typename T> inline bool IsEqual(const T a, const T b) { return Abs(a - b) < eps; }
template<typename T> inline bool IsGreater(const T a, const T b) { return a > b + eps; }
template<typename T> inline bool IsLess(const T a, const T b) { return a + eps < b; }

template<typename T> inline string8_t ToStr(const T& val) { std::ostringstream ostr; ostr << val; return ostr.str(); }
template<typename T> inline bool FromStr(const string8_t& str, T& val) {std::istringstream istr(str); istr >> val; return !!istr; }

#if defined(ONLINE_JUDGE) || defined(__GNUC__)
template<size_t id> class StopWatch { };
#else //defined(ONLINE_JUDGE)
#include <library/lib_stopwatch.h>
#endif //defined(ONLINE_JUDGE)

#define FINISH(str) {ost << (str) << std::endl; return multipleTestMode;}

#define YES() FINISH("YES")

#define NO() FINISH("NO")

vector_size_t GetDefault(const size_t n)
{
    vector_size_t r(n);
    for (size_t i = 0; i < n; i++)
        r[i] = i;
    return r;
}

vector_size_t GetReversed(const vector_size_t& a)
{
    vector_size_t r(a.size());
    for (size_t i = 0; i < a.size(); i++)
        r[a[i]] = i;
    return r;
}

vector_size_t Apply(const vector_size_t& a, const vector_size_t& b)
{
    vector_size_t r(a.size());
    for (size_t i = 0; i < a.size(); i++)
        r[b[i]] = a[i];
    return r;
}

vector_2d_size_t GenerateVariants(const vector_size_t& a, const size_t k)
{
    vector_2d_size_t r;
    vector_size_t ma = GetDefault(a.size());
    r.push_back(ma);
    for (size_t i = 1; i <= k; i++)
    {
        ma = Apply(ma, a);
        r.push_back(ma);
    }
    return r;
}

bool IsPossible(const vector_size_t& trf, const vector_size_t& trr, const vector_size_t& last, const vector_size_t& forbidden, const size_t k)
{
    const vector_size_t& DefaultSeq = GetDefault(trf.size());

    vector_size_t ma = DefaultSeq;

    if (ma == forbidden)
        return false;

    if (k % 2 == 1)
    {
        ma = Apply(ma, trf);

        if (ma == forbidden)
            return false;

        if (ma == last)
        {
            if (k == 1)
                return true;

//          const vector_size_t& mr = Apply(DefaultSeq, trr);
//          return mr != forbidden;
            return true;
        }
    }
    else if (k % 2 == 0)
    {
        if (ma == last)
        {
            const vector_size_t& mr = Apply(DefaultSeq, trr);
            const vector_size_t& mf = Apply(DefaultSeq, trf);
            return (mr != forbidden) || (mf != forbidden);
        }
    }
    
    for (size_t p = k % 2 + 1; p <= k; p ++)
    {
        ma = Apply(ma, trf);
        if (ma == forbidden)
            return false;
        if ((k - p) % 2 == 0)
            if (ma == last)
                return true;
    }

    return false;
}

bool Solve(std::istream& ist, std::ostream& ost, const bool multipleTestMode)
{
    StopWatch<1> sw;

    // first input value
    size_t n, k;
    ist >> n >> k;

    if (multipleTestMode && !ist)
        return false;

    // remain input & solve
    vector_size_t a(n), b(n);
    for (size_t i = 0; i < n; i++)
    {
        ist >> a[i];
        --a[i];
    }
    for (size_t i = 0; i < n; i++)
    {
        ist >> b[i];
        --b[i];
    }

    const vector_size_t& ra = GetReversed(a);
    const vector_size_t& bp = Apply(b, ra);
    const vector_size_t& bn = Apply(b, a);

    vector_size_t ma = GetDefault(n);

#if defined(_DEBUG)
    const vector_2d_size_t& varsf = GenerateVariants(a, k);
    const vector_2d_size_t& varsr = GenerateVariants(ra, k);
#endif

    if (b == ma)
        NO();

    if (k == 1 && (bp == ma || bn == ma))
        YES();

    if (IsPossible(a, ra, bp, b, k-1))
        YES();
    
    if (IsPossible(ra, a, bn, b, k-1))
        YES();

    NO();
}

int main()
{
    std::ios_base::sync_with_stdio(false);
    std::istream& ist = std::cin;
    std::ostream& ost = std::cout;
#if defined(ONLINE_JUDGE)
    Solve(ist, ost, false);
#else
    while(Solve(ist, ost, true)) {};
#endif
}
