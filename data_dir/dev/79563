#include <iostream>
#include <vector>
#include <string>
#include <cassert>
#include <cstring>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <algorithm>
#include <map>
#include <cmath>
#include <numeric>
#include <functional>
#include <ctime>
#include <unordered_map>
#include <sstream>

using namespace std;
typedef long long Long;
typedef long double Double;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef pair<Long,Long> PLL;

int read(int &x) { return scanf("%d", &x); }
int read(int &x, int &y) { return scanf("%d%d", &x, &y); }
int read(int &x, int &y, int &z) { return scanf("%d%d%d", &x, &y, &z); }
int read(Long &x) { return scanf("%lld", &x); }
int read(Long &x, Long &y) { return scanf("%lld%lld", &x, &y); }
int read(double &x) { return scanf("%lf", &x); }
char buff[2000010];
int read(string &s) { int r = scanf("%s", buff); s = buff; return r; }

#define dlog2(n) ((n) == -1 ? 0 : (31-__builtin_clz(n)))

#define INF 1000000000

#define BC 21
struct MaskCount {
	VVI V;
	int B;
	MaskCount(int b) : V(1<<b), B(b) {}
	void add(int x, int id) {
		if (V[x].size() == 2) return;
		if (V[x].size() > 0 && V[x].back() == id) return;
		V[x].push_back(id);
		for (int i = 0; i < B; ++i) {
			if ((x>>i) & 1) {
				add(x ^ (1<<i), id);
			}
		}
	}
};

int main()  {

	int N;
	read(N);
	VI V(N);
	for (int i = 0; i < N; ++i) {
		read(V[i]);
	}
	MaskCount MC(BC);
	int best = 0;
	for (int i = N-1; i >= 0; --i) {
		int c = 0;
		for (int b = BC-1; b >= 0; --b) {
			if (((V[i]>>b) & 1) == 0) {
				c ^= (1 << b);
				if (MC.V[c].size() < 2) {
					c ^= (1 << b);
				}
			}
		}
		if (i + 2 < N) {
			best = max(best, V[i] | c);
		}
		MC.add(V[i], i);
	}
	cout << best << endl;



	return 0;
}

/*

x1 = 2*(x0 - a)
x2 = 2*(x1 - b) = 4x0 - 2a - b
x3 = 2*(x2 - c) = 8x0 - 4a - 2b - c

 */