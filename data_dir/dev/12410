#include "bits/stdc++.h"
//#include "ext/pb_ds/tree_policy.hpp"
//#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(int x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cerr<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
#define EX0 exit(0);

typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ll inf = 1e9+7;
const ld eps = 1e-9;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a) {
    if(a<0)return -1;
    if(a>0)return 1;
    return 0;
}


template<typename T> inline void in(T &x) {
    x = 0;
    T f = 1;
    char ch = getchar();
    while (!isdigit(ch)) {
        if (ch == '-') f = -1;
        ch = getchar();
    }
    while (isdigit(ch))  {
        x = x * 10 + ch - '0';
        ch = getchar();
    }
    x *= f;
}

ll twop(int x) {
    return 1LL<<x;
}

template<typename A,typename B > inline void in(A&x,B&y) {
    in(x);
    in(y);
}
template<typename A,typename B,typename C>inline void in(A&x,B&y,C&z) {
    in(x);
    in(y);
    in(z);
}
template<typename A,typename B,typename C,typename D> inline void in(A&x,B&y,C&z,D&d) {
    in(x);
    in(y);
    in(z);
    in(d);
}




template <class T>
void upd(T&a,T b) {
    a = max(a,b);
}

const int maxn = 1e6+10;

// m must be positive
template<typename T>
static T MOD(T a, T m)
{
    a %= m;
    if (a < 0)
        a += m;
    return a;
}

// a must be relatively prime to m
template<typename T>
static T inverse(T a, T m)
{
    a = MOD(a, m);
    if (a <= 1)
        return a;
    return MOD((1 - inverse(m, a) * m) / a, m);
}

ll fac[maxn],inv[maxn];
void init(){
    fac[0] = 1;
    REP(i,1,maxn)fac[i] = i*(fac[i-1])%mod;
    inv[maxn-1]=inverse(fac[maxn-1], mod);
    RREP(i,maxn-2,0){
        inv[i] = inv[i+1]*(i+1)%mod;
    }
}

ll cnt[26];
ll getNumOfPerm(){
    ll tot = 0;
    REP(i,0,26){
        tot+=cnt[i];
    }
    ll ans = fac[tot];
    REP(i,0,26){
        (ans*=inv[cnt[i]])%=mod;
    }
    return ans;
}
string lb,ub;
int restri[maxn];
ll calc(){
    ll ans = 0;
    ll prod = getNumOfPerm();
    int tot= sz(ub);
    REP(i,0,sz(ub)){
        REP(j,0,restri[i]){
            if(cnt[j]){
                (prod*=inv[tot]*fac[tot-1]%mod)%=mod;
                (prod*=cnt[j])%=mod;
                cnt[j]--;
                tot--;
                ans+=prod;
                
                cnt[j]++;
                tot++;
                (prod*=tot)%=mod;
                (prod*=inv[cnt[j]]*fac[cnt[j]-1]%mod)%=mod;
            }
        }
        if(cnt[restri[i]]){
            (prod*=inv[tot]*fac[tot-1]%mod)%=mod;
            (prod*=cnt[restri[i]])%=mod;
        }
        cnt[restri[i]]--;
        tot--;
        if(cnt[restri[i]]<0)break;
    }
    return ans;
}
int main(){
    cin>>lb>>ub;
    init();
    for(auto i:lb)cnt[i-'a']++;
    REP(i,0,sz(ub))restri[i] = ub[i]-'a';
    ll ans = calc();
    dbg(ans);
    mst(cnt,0);
    REP(i,0,sz(ub))restri[i] = lb[i]-'a';
    for(auto i:lb)cnt[i-'a']++;
    ans = MOD(ans-calc()-1,mod);
    cout<<ans<<endl;
    
    
    
    
    
    
    return 0;
}
