#include <bits/stdc++.h>
#include <map>
using namespace std;
#define ll long long
#define se second
#define fi first
#define mk(a, b) make_pair(a, b)
#define pb push_back
#define vi vector<int>
#define vvi vector<vector<int>>
#define pii pair<int, int>
#define vvpi vector<vector<pii>>
#define pli pair<ll, int>
#define INF (int)1e9 + 5
#define MOD 100000000
#define MAX (int)2e5 + 5
#define FI freopen("i.txt", "r", stdin);
#define FO freopen("o.txt", "w", stdout);
#define sf(a, b) scanf("%d %d", &a, &b)
#define edge pair<int, pair<int, int>>
int dx[] = { 1, 0, -1, 0 };
int dy[] = { 0, 1, 0, -1 }; // 4 Directio
							// int dx[] = {1, 1, 0, -1, -1, -1, 0, 1};
							// int dy[] = {0, 1, 1, 1, 0, -1, -1, -1};
							// 8 direction

							// int dx[] = { 2,1,-1,-2,-2,-1,1,2 };
							// int dy[] = { 1,2,2,1,-1,-2,-2,-1};
							// Knight Direction
int n,l;
int main() {
	int a, b;
	cin >> n >> l;
	vector<int>v(n), v2(n);
	for (int i = 0; i < n; i++) {
		cin >> v[i];
	}
	for (int i = 0; i < n; i++) {
		cin >> v2[i];
	}
		bool ans = 1;
	for (int i = 0; i <= n; i++) {
		ans = 1;
		for (int j = 1; j < n; j++) {
			int a, b;
			if (v2[j] < v2[j - 1]) {
				a = v2[j] + l - v2[j - 1];
			}
			else a = abs(v2[j] - v2[j - 1]);
			if (v[j] < v[j - 1]) {
				b = v[j] + l - v[j - 1];
			}
			else b = abs(v[j] - v[j - 1]);

			if (a!= b) {
				ans = 0;
				break;
			}
		}
		if (ans) {
			int a, b;

			if (v2[0] < v2[n - 1]) {
				a = v2[0] + l - v2[n - 1];
			}
			else a = abs(v2[0] - v2[n - 1]);
			if (v[0] < v[n - 1]) {
				b = v[0] + l - v[n - 1];
			}
			else b = abs(v[0] - v[n - 1]);
			if (a == b) {
				ans = 1;
				break;
			}
			else ans = 0;
		}
		if (ans == 0) {
			int c = v2.back();
			v2.pop_back();
			v2.insert(v2.begin(),c);
		}
	}
	if (ans)cout << "YES" << endl;
	else cout << "NO" << endl;;
}