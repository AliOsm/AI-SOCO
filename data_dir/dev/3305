
// ~/BAU/ACM-ICPC/Teams/OverflowLimitExceeded/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const int N = 200000;
const ll MOD = 1e9 + 7;

int n, m, state[N], idx[N], low[N], comp[N], compID[N], cnt, cmp;
vector<vector<int> > sw, g;
bool vis[N];
stack<int> S;

void dfs(int u) {
	idx[u] = low[u] = ++cnt;
	vis[u] = 1;
	S.push(u);

	for (int i = 0; i < g[u].size(); i++) {
		int v = g[u][i];
		if (!idx[v])
			dfs(v);
		if (vis[N])
			low[u] = min(low[u], low[v]);
	}

	if (idx[u] == low[u]) {
		while (1) {
			int v = S.top();
			S.pop();
			vis[v] = 0;
			comp[v] = cmp;
			if (v == u)
				break;
		}
		compID[cmp++] = u;
	}
}

inline int Not(int a) {
	return a >= m ? a - m : a + m;
}

inline void add(int a, int b) {
	g[Not(a)].push_back(b);
	g[Not(b)].push_back(a);
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif

	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; i++)
		scanf("%d", state + i);

	sw.resize(n);
	for (int i = 0; i < m; i++) {
		int x, y;
		scanf("%d", &x);
		while (x--) {
			scanf("%d", &y);
			y--;
			sw[y].push_back(i);
		}
	}

	g.resize(2 * m);
	for (int i = 0; i < n; i++) {
		if (state[i]) {
			//(a^b)v(-a^-b) = (av-b) ^(-avb)
			add(sw[i][0], Not(sw[i][1]));
			add(Not(sw[i][0]), sw[i][1]);
		}
		else {
			//(a^-b)v(-a^b) = (avb)^(-av-b)
			add(sw[i][0], sw[i][1]);
			add(Not(sw[i][0]), Not(sw[i][1]));
		}
	}

	for (int i = 0; i < 2 * m; i++)
		if (!idx[i])
			dfs(i);

	for(int i=0; i<m; i++)
		if (comp[i] == comp[Not(i)]) {
			puts("NO");
			return 0;
		}

	puts("YES");
	return 0;
}