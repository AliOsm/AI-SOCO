#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
using namespace std;

int n;
vector<int> g[300000];
int s, f;
int sz[300000];
bool used[300000];

int allOut = 1;

bool dfs(int v) {
	used[v] = 1;
	sz[v] = 1;
	int ans = 0;
	for (int to : g[v]) {
		if (!used[to]) {
			bool cache = dfs(to);
			if (v == s) {
				if (!cache) {
					allOut += sz[to];
				}
			}
			ans |= cache;
			sz[v] += sz[to];
		}
	}
	if (v == f) return 1;
	return ans;
}

void solveSimple(int v) {
	dfs(v);
	cout << 1LL * n * (n - 1) - 1LL * sz[f] * allOut;
}

int main() {
	ios_base::sync_with_stdio(0);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	cin >> n >> s >> f;
	s--;
	f--;
	for (int i = 1; i < n; i++) {
		int v, to;
		cin >> v >> to;
		v--;
		to--;
		g[v].push_back(to);
		g[to].push_back(v);
	}
	
	solveSimple(s);
	
	
	return 0;
}