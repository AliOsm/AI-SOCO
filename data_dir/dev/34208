#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <bitset>

using std::ios_base;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::fixed;

using std::vector;
using std::string;
using std::stack;
using std::queue;
using std::deque;
using std::map;
using std::set;
using std::unordered_map;
using std::unordered_set;
using std::bitset;

using std::tuple;
using std::make_tuple;
using std::pair;
using std::make_pair;

using std::sort;
using std::reverse;
using std::nth_element;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()

const int MAXN = 100000;
const int INF = 1e9;
const int MOD = 1e9+7;
const int64_t L_INF = 4e18;

int n;
int c[MAXN], d[MAXN];
int a[MAXN], b[MAXN];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> c[i];
        if (i) {
            a[i - 1] = c[i] - c[i - 1];
        }
    }
    for (int i = 0; i < n; i++) {
        cin >> d[i];
        if (i) {
            b[i - 1] = d[i] - d[i - 1];
        }
    }

    sort(a, a + n - 1);
    sort(b, b + n - 1);

    bool eq = c[0] == d[0] && c[n - 1] == d[n - 1];
    for (int i = 0; i < n - 1; i++) {
        eq &= a[i] == b[i];
    }

    cout << (eq ? "Yes\n" : "No\n");

    #ifdef LOCAL
        cerr << "\n== " << 1.0 * clock() / CLOCKS_PER_SEC << " sec.\n";
    #endif
    return 0;
}
