#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <queue>;
#include <set>
#include <iomanip>

using namespace std;

int n, m;
char **maps;


bool check(int string, int column)
{
    return (n > string && string >= 0 && m > column && column >= 0 && maps[string][column] != '*');
}


struct four
{
	int first, second, third, forth;
};


int main() 
{
	int strings = 0, columns = 0, stringf = 0, columnf = 0;
	cin >> n >> m;

	maps = new char*[n];
	bool ****visit = new bool***[n];

	for (int i = 0; i < n; i++)
	{
		maps[i] = new char[m];
		visit[i] = new bool**[m];
		for (int j = 0; j < m; j++)
		{
			visit[i][j] = new bool*[3];
			for (int z = 0; z < 3; z++)
				visit[i][j][z] = new bool[4];
		}

	}

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			for (int z = 0; z < 3; z++)
				for (int k = 0; k < 4; k++)
					visit[i][j][z][k] = 0;


	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
		{
			cin >> maps[i][j];
			if (maps[i][j] == 'S')
			{
				strings = i;
				columns = j;
			}

			if (maps[i][j] == 'T')
			{
				stringf = i;
				columnf = j;
			}
		}


	queue <four> que;
	pair <int, int> step[4] = {make_pair(0, 1), make_pair(0, -1), make_pair(1, 0), make_pair(-1, 0)};

	for (int i = 0; i < 4; i++)
		visit[strings][columns][0][i] = 1;

	int ind = 0;
	for (auto a:step)
	{
		if (check(strings + a.first, columns + a.second))
		{
			four f;
			f.first = strings + a.first;
			f.second = columns + a.second;
			f.third = 0;
			f.forth = ind;
			que.push(f);
			visit[strings + a.first][columns + a.second][0][ind] = 1;
		}
		ind += 1;
	}


	while (que.size())
	{
		four f = que.front();
		que.pop();
    
	    ind = 0;
		
		for (auto a: step)
		{
			if (check(f.first + a.first, f.second + a.second))
				if (ind == f.forth)
				{
					if (!visit[f.first + a.first][f.second + a.second][f.third][ind])
					{
						f.first += a.first;
						f.second += a.second;
						swap(f.forth, ind);
						que.push(f);
						visit[f.first][f.second][f.third][ind] = 1;
						f.first -= a.first;
						f.second -= a.second;
						swap(f.forth, ind);
					}
				}
				else
					if (f.third < 2 && !visit[f.first + a.first][f.second + a.second][f.third + 1][ind])
					{
						f.first += a.first;
						f.second += a.second;
						f.third++;
						swap(f.forth, ind);
						que.push(f);
						visit[f.first][f.second][f.third][ind] = 1;
						f.first -= a.first;
						f.second -= a.second;
						f.third--;
						swap(f.forth, ind);
					}
			ind += 1;
		}
	}

	int label = 0;
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 4; j++)
			if (visit[stringf][columnf][i][j])
				label = 1;
	
	//for (int i = 0; i < n; i++)
	//{
	//	for (int j = 0; j < m; j++)
	//		for (int z = 0; z < 3; z++)
	//		{
	//			cout << '(';
	//			for (int k = 0; k < 4; k++)
	//				cout << visit[i][j][z][k] << ' ';
	//			cout << ") ";
	//		}
	//	cout << '\n';
	//}

	if (label)
		cout << "YES";
	else
		cout << "NO";
	return 0;
} 