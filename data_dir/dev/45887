#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define INF 1.0E+18
#define SZ 250

int a[260];

double logg[10010];
double logsum[10010];

double uniform_prob(int P, int k){
	if(k >= 0 && k <= 2 * P) return -logg[2*P+1];
	return -INF;
}

double poisson_prob(int P, int k){
	if(k < 0) return -INF;
	return logg[P] * k - P - logsum[k];
}

double get_uniform(int P){
	int i;
	double ans = 0.0;
	REP(i,SZ) ans += uniform_prob(P, a[i]);
	return ans;
}

double get_poisson(int P){
	int i;
	double ans = 0.0;
	REP(i,SZ) ans += poisson_prob(P, a[i]);
	return ans;
}

void main2(void){
	char type = '?';
	int P = -1;
	double best = -INF;
	
	int i;
	
	for(i=10;i<=1000;i++){
		double tmp = get_uniform(i);
		if(tmp > best){
			best = tmp;
			type = 'u';
			P = i;
		}
		
		tmp = get_poisson(i);
		if(tmp > best){
			best = tmp;
			type = 'p';
			P = i;
		}
	}
	
	cout << P << endl;
}

int main(void){
	int TC,tc,i;
	
	REP(i,10000) logg[i] = log(i);
	REP(i,10000) logsum[i+1] = logsum[i] + log(i+1);
	
	cin >> TC;
	REP(tc,TC){
		REP(i,SZ) scanf("%d", &a[i]);
		main2();
	}
	
	return 0;
}
