/*
▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄██████████████▒▒▐▌
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐
TAYA 
*/
#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#pragma GCC optimize("fast-math")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>
 
using namespace std;


#define ll long long
#define ld double
#define null NULL
#define prev prev228
#define index index228
#define left left228
#define right right228
#define hash hash228
#define firn(i, n) for (int i = 0; i < (int)n; ++i)
#define forn(i, n) for (int i = 1; i <= (int)n; ++i)
#define endl '\n'



template<typename T> inline void uin(T &a, T b) {
	if (b < a) a = b;
}

template<typename T> inline void uax(T &a, T b) {
	if (b > a) a = b;
}

const int maxn = 100 * 1000 + 228;

vector<int> g[maxn], in[maxn];

int n, m;

int deep[maxn];

vector< pair<int, int> > ee;

inline void read() {
	cin >> n >> m;
	forn(i, m) {
		int u, v;
		cin >> u >> v;
		ee.push_back(make_pair(u, v));
	}
}

bool calc[maxn];

inline void clear_all() {
	forn(i, n) in[i].clear();
	memset(calc, 0, sizeof(calc));
}


void dfs(int v) {
	calc[v] = 1;
	int mx = 0;
	for (int from : in[v]) {
		if (!calc[from]) dfs(from);
		uax(mx, deep[from] + 1);
	}
	deep[v] = mx;
}


inline bool check(int fir) {
	clear_all();
	for (int i = 0; i < fir; ++i) {
		int u = ee[i].first, v = ee[i].second;
		in[v].push_back(u);
	}
	forn(i, n) {
		if (!calc[i]) {
			dfs(i);
		}
	}
	forn(i, n) {
		if (deep[i] == n - 1) return 1;
	}
	return 0;
}


inline void solve() {
	int l = 0, r = m;
	while (r - l > 1) {
		int mid = (l + r) >> 1;
		if (check(mid)) {
			r = mid;
		} else {
			l = mid;
		}
	}
	if (!check(r)) {
		cout << -1 << endl;
	} else {
		cout << r << endl;
	}
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	read();
	solve();
	return 0;
}
