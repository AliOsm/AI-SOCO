#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>

using namespace std;

int main() {
  int n;
  cin >> n;

  string s, t;
  cin >> s >> t;

  vector<queue<int>> cnt(26);
  for (int i = 0; i < n; i++) {
    cnt[t[i] - 'a'].push(i);
  }

  vector<int> a(n);
  for (int i = 0; i < n; i++) {
    s[i] -= 'a';
    if (cnt[s[i]].empty()) {
      cout << "-1" << endl;
      return 0;
    }
    a[i] = cnt[s[i]].front();
    cnt[s[i]].pop();
  }

  cout << (n / 2) * 6 << endl;

  auto dodo = [&](int k) {
    vector<int> v;
    string u;
    for (int i = 0; i < k; i++) {
      v.push_back(a.back());
      a.pop_back();
      u.push_back(s.back());
      s.pop_back();
    }
    a.insert(a.begin(), v.begin(), v.end());
    s.insert(s.begin(), u.begin(), u.end());
  };

  for (int i = 0; i * 2 + 1 < n; i++) {
    int mn = i;
    int mx = i;
    for (int j = i; j < n - i; j++) {
      if (a[mn] > a[j]) mn = j;
      if (a[mx] < a[j]) mx = j;
    }
    if (mn < mx) {
      vector<int> pos = {0, i, mn, mn + 1, mx, mx + 1, n - i, n};
      vector<int> len;
      for (int i = 0; i + 1 < pos.size(); i++) {
        len.push_back(pos[i + 1] - pos[i]);
      }

      vector<int> s = {3, 3, 3, 3, 3, 3};

      for (int x : s) {
        vector<int> t;
        int total = 0;
        for (int i = 0; i < x; i++) {
          total += len.back();
          t.push_back(len.back());
          len.pop_back();
        }
        len.insert(len.begin(), t.begin(), t.end());
        cout << total << ' ';
        dodo(total);
      }
    } else {
      vector<int> pos = {0, i, mx, mx + 1, mn, mn + 1, n - i, n};
      vector<int> len;
      for (int i = 0; i + 1 < pos.size(); i++) {
        len.push_back(pos[i + 1] - pos[i]);
      }

      vector<int> s = {6, 3, 2, 1, 3, 6};

      for (int x : s) {
        vector<int> t;
        int total = 0;
        for (int i = 0; i < x; i++) {
          total += len.back();
          t.push_back(len.back());
          len.pop_back();
        }
        len.insert(len.begin(), t.begin(), t.end());
        cout << total << ' ';
        dodo(total);
      }
    }
  }
}
