#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) { if (i) os << ' '; os << v[i]; } os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, const pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(int, q);

	vector<pair<int, int>> x(n);
	FOR (i, 0, n) x[i].second = i, cin >> x[i].first;

	sort(all(x));

	map<int, int> mapping;
	FOR (i, 0, n) mapping[x[i].second] = i;

	while (q --> 0) {
		next(int, cur); cur--; cur = mapping[cur];
		next(int, len);

		int l = cur;
		int r = n;
		while (l + 1 < r) {
			int m = (l + r) / 2;
			if (x[m].first - x[cur].first <= len) l = m;
			else r = m;
		}

		len -= x[l].first - x[cur].first;
		assert(len >= 0);
		cur = l;
		int go_left = true;

		while (true) {
			if (go_left) {
				l = -1;
				r = cur;
				while (l + 1 < r) {
					int m = (l + r) / 2;
					if (x[cur].first - x[m].first <= len) r = m;
					else l = m;
				}
				if (r == cur) break;
				if (len >= 2LL * (x[cur].first - x[r].first)) {
					len %= 2 * (x[cur].first - x[r].first);
				} else {
					len -= x[cur].first - x[r].first;
					cur = r;
					go_left = false;
				}
			} else {
				l = cur;
				r = n;
				while (l + 1 < r) {
					int m = (l + r) / 2;
					if (x[m].first - x[cur].first <= len) l = m;
					else r = m;
				}
				if (l == cur) break;
				if (len >= 2LL * (x[l].first - x[cur].first)) {
					len %= 2 * (x[l].first - x[cur].first);
				} else {
					len -= x[l].first - x[cur].first;
					cur = l;
					go_left = true;
				}
			}
		}

		cout << x[cur].second + 1 << endl;
	}
}