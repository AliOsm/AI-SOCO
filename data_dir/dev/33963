//In The Name of Allah
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template < class T > using Tree = tree < T , null_type , less < T > , rb_tree_tag , tree_order_statistics_node_update >;

typedef long long            ll;
typedef long double          ld;
typedef string               str;
typedef pair < ll , ll >     pll;

#define X               first
#define Y               second
#define pb              push_back
#define all(x)          (x).begin(), (x).end()
#define SZ(x)           (ll)(x.size())
#define sep             ' '
#define fast_io         ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define dbl_io(x)       cout << fixed << setprecision(x);

const int N = 5e3 + 10;
const ll mod = 1e9 + 7;
const ll inf = 1e18 + 10;

ll pal[N][N], p[N];

void solve(){
    string s;
    cin >> s;
    ll n = s.size();
    s = '.' + s;
    for (ll i = 0; i <= n; i ++){
        p[i] = 0;
        for (ll j = 0; j <= n; j ++){
            pal[i][j] = 0;
        }
    }
    p[0] = 1;
    for (ll i = 1; i <= n; i ++){
        pal[i][i] = 1;
        pal[i][i - 1] = 1;
        if (i <= n / 2){
            if (s[i] == s[n + 1 - i])
                p[i] = p[i - 1];
            else
                p[i] = 0;
        }
    }
    for (ll len = 2; len <= n; len ++){
        for (ll l = 1, r = len; r <= n; l ++, r ++){
            if (s[l] != s[r])
                pal[l][r] = 0;
            else
                pal[l][r] = pal[l + 1][r - 1];
        }
    }
    ll ans = 0, L = 0, R = 0;
    for (ll i = 0; i <= n; i ++){
        for (ll j = n + 1; j > i; j --){
            if (i < n - j + 1){
                if (p[i] && pal[j][n - i]){
                    if (i + n + 1 - j > ans){
                        L = i, R = j, ans = i + n + 1 - j;
                    }
                }
            }
            else{
                if (p[n + 1 - j] && pal[n + 1 - j + 1][i]){
                    if (i + n + 1 - j > ans){
                        L = i, R = j, ans = i + n + 1 - j;

                    }
                }
            }
        }
    }
    for (ll i = 1; i <= L; i ++)
        cout << s[i];
    for (ll j = R; j <= n; j ++)
        cout << s[j];
    cout << '\n';
}

int main(){
    fast_io
    //dbl_io(10);
    ll q;
    cin >> q;
    while (q --){
        solve();
    }
    return 0;
}
