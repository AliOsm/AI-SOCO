#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;


const int maxn = 3e5 + 7;

int st[maxn], en[maxn], depth[maxn], n, tim, root = 1;
vector<int> adjlist[maxn];

vector< pair<int, int> > dlist[maxn];
vector<ll> dvalue[maxn];
ll value[maxn];


void dfs(int cur, int par) {
    tim++;
    st[cur] = tim;
    depth[cur] = depth[par] + 1;
    dlist[depth[cur]].pb({st[cur], cur});
    for (auto u : adjlist[cur]) {
        if (u == par)
            continue;
        dfs(u, cur);
    }
    tim++;
    en[cur] = tim;
}


void dfs2(int cur, int par) {
    value[cur] += value[par];
    for (auto u : adjlist[cur]) {
        if (u != par)
            dfs2(u, cur);
    }
}

int main()
{
    fastread;
    cin >> n;
    for (int i = 1; i < n; i++) {
        int x, y;
        cin >> x >> y;
        adjlist[x].pb(y);
        adjlist[y].pb(x);
    }
    dfs(root, 0);
    for (int i = 1; i < maxn; i++) {
        sort(dlist[i].begin(), dlist[i].end());
        for(auto u:dlist[i]){
            // cout<<i<<" "<<u.x<<" "<<u.y<<endl;
        }
        dvalue[i].resize(dlist[i].size() + 1, 0);
    }
    int q;
    cin >> q;
    while (q--) {
        int v, d, x;
        cin >> v >> d >> x;
        value[v] += x;
        ll den = d + 1;
        den += (depth[v]);
        den = min(den, maxn - 1LL);
        // cout<<"query"<<den<<endl;
        pair<int, int> stcmp = {st[v], -1}, encmp = {en[v], -1};
        int stl = lower_bound(dlist[den].begin(), dlist[den].end(), stcmp) - dlist[den].begin();
        int enl = lower_bound(dlist[den].begin(), dlist[den].end(), encmp) - dlist[den].begin();
        if (stl < enl) {
            dvalue[den][stl] -= x;
            dvalue[den][enl] += x;
            // cout<<dlist[den][stl].y<<" "<<dlist[den][enl-1].y<<"val"<<x<<endl;
        }
    }
    for (int i = 1; i < maxn; i++) {
        for (int j = 0; j < dlist[i].size(); j++) {
            if (j != 0)
                dvalue[i][j] += dvalue[i][j - 1];
            value[dlist[i][j].y] += dvalue[i][j];
            // cout<<dlist[i][j].y<<" "<<value[dlist[i][j].y]<<"ch"<<endl;
        }
    }
    dfs2(root, 0);
    for (int i = 1; i <= n; i++)
        cout << value[i] << ' ';
    return 0;
}