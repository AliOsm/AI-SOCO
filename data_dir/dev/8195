#include <bits/stdc++.h>

using namespace std;

vector<pair<int, pair<char, char> > > counterNine;
vector<int> ind;
map<char, int> counter1, counter2;
map<char, bool> vis;
char ten1, ten2, otherTen1[2], otherTen2[2], number1[100001], number2[100001];
bool is = false, inside[2];

void butAllNine() {
    for (int i = 0; i <= 9; ++i) {
        char num1 = i + '0', num2 = (9 - i) + '0';
        int minNum = min(counter1[num1], counter2[num2]);
        if (minNum != 0) {
            counterNine.push_back(make_pair(minNum, make_pair(num1, num2)));
            counter1[num1] -= minNum, counter2[num2] -= minNum;
            vis[num1] = true, vis[num2] = true;
        }
    }
}

vector<int> get(bool vis1, bool vis2, char num1, char num2, int boo);
void getOneTen() {
    for (int i = 1; i <= 5; ++i) {
        char num1 = i + '0', num2 = (10 - i) + '0';
        if (counter1[num1] != 0 && counter2[num2] != 0) {
            is = true, ten1 = num1, ten2 = num2;
            break;
        } else if (!inside[0]) {
            if (counter1[num1] != 0 && vis[num2])
                ind = get(false, true, num1, num2, 0);
            else if (counter2[num2] != 0 && vis[num1])
                ind = get(true, false, num1, num2, 0);
        } else if (!inside[0] && !inside[1] && vis[num1] && vis[num2])
            ind = get(true, true, num1, num2, 1);
    }
}

vector<int> get(bool vis1, bool vis2, char num1, char num2, int boo) {
    inside[boo] = true, otherTen1[boo] = num1, otherTen2[boo] = num2;
    vector<int> indRes;
    for (int j = 0; j < int(counterNine.size()); ++j) {
        pair<char, char> temp = counterNine[j].second;
        if ((vis1 && temp.first == num1) || (vis2 && temp.second == num2))
            indRes.push_back(j);
    }
    return indRes;
}

void takeOneNine() {
    for (int j = 0; j <= 1; ++j) {
        if (!is && inside[j]) {
            ten1 = otherTen1[j], ten2 = otherTen2[j], is = true;
            for (int i = 0; i < int(ind.size()); ++i) {
                pair<char, char> temp = counterNine[ind[i]].second;
                counterNine[ind[i]].first--, counter1[temp.first]++, counter2[temp.second]++;
            }
        }
    }
}

void print(int size) {
    int size1 = size - 1, size2 = size - 1;
    while (counter1['0'] > 0 && counter2['0'] > 0) {
        number1[size1] = '0', number2[size2] = '0', size1--, size2--;
        counter1['0']--, counter2['0']--;
    }
    if (is) {
        number1[size1] = ten1, number2[size2] = ten2, size1--, size2--;
        counter1[ten1]--, counter2[ten2]--;
    }
    for (int i = 0; i < int(counterNine.size()); ++i) {
        while (counterNine[i].first > 0) {
            counterNine[i].first--;
            number1[size1] = counterNine[i].second.first;
            number2[size2] = counterNine[i].second.second;
            size1--, size2--;
        }
    }
    for (char i = '0'; i <= '9'; ++i) {
        while (counter1[i] > 0)
            counter1[i]--, number1[size1] = i, size1--;
        while (counter2[i] > 0)
            counter2[i]--, number2[size2] = i, size2--;
    }
    printf("%s\n%s\n", number1, number2);
}

int main() {
//#ifndef ONLINE_JUDGE
    //freopen("test.in", "rt", stdin);
    //freopen( "test.out" , "wt" , stdout );
//#endif
    char arr[100001];
    scanf("%s", arr);
    int size = strlen(arr);
    for (int i = 0; i < size; ++i) {
        number1[i] = '0', number2[i] = '0';
        counter1[arr[i]]++, counter2[arr[i]]++;
    }
    number1[size] = '\0', number2[size] = '\0';
    butAllNine(), getOneTen(), takeOneNine(), print(size);
    return 0;
}
