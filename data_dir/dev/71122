#include <bits/stdc++.h>
#define mp make_pair
#define lld long long
#define nmax 200005
#define nmax2 1000005
using namespace std;
int n, t, dv;
int l, r;
int a[nmax];
int fv[nmax2];
lld anss[nmax];
int dvv[nmax];
lld inm[nmax];
vector<pair<int,pair<int,int>>>queries;
int ssqrt(int x)
{
    if (x<=1) return x;
    int d;
    for (d=2; d*d<=x; ++d);
    return d-1;
}
bool cmp1(pair<int,pair<int,int>> a, pair<int,pair<int,int>> b)
{
    if (dvv[a.first] == dvv[b.first])
        return a.second.second < b.second.second;
    return dvv[a.first] < dvv[b.first];
}
bool cmp2(pair<int,pair<int,int>> a, pair<int,pair<int,int>> b)
{
    return a.first < b.first;
}
int main()
{
    scanf("%d %d",&n,&t);
    for (int i=0; i<n; ++i)
        {scanf("%d",&a[i]);
        inm[i] = 1LL*i*i;}
    inm[n] = 1LL*n*n;
    dv = ssqrt(n);
    for (int i=1; i<=t; ++i)
    {
        scanf("%d %d",&l,&r);
        --l,--r;
        dvv[i] = l/dv;
        queries.push_back(mp(i,mp(l,r)));
    }
    sort(queries.begin(), queries.end(), cmp1);
    //printf("\n");
    /*for (auto x:queries)
        printf("%d %d\n", x.second.first,x.second.second);*/
    //printf("\n");
    int mo_left = 0, mo_right = -1, lft, rgh;
    lld ans = 0;
    for (int i=0; i<(int)queries.size(); ++i)
    {
        lft = queries[i].second.first;
        rgh = queries[i].second.second;
        while (mo_right<rgh)
        {
            ++mo_right;
            ans-= (1LL*a[mo_right]*inm[fv[a[mo_right]]]);
            ++fv[a[mo_right]];
            ans += (1LL*a[mo_right]*inm[fv[a[mo_right]]]);
        }
        while (mo_left<lft)
        {
            ans -= (1LL*a[mo_left]*inm[fv[a[mo_left]]]);
            --fv[a[mo_left]];
            ans+= (1LL*a[mo_left]*inm[fv[a[mo_left]]]);
            ++mo_left;
        }
        while (mo_left>lft)
        {
            --mo_left;
            ans -= (1LL*a[mo_left]*inm[fv[a[mo_left]]]);
            ++fv[a[mo_left]];
            ans += (1LL*a[mo_left]*inm[fv[a[mo_left]]]);
        }
        while (mo_right>rgh)
        {
            ans-= (1LL*a[mo_right]*inm[fv[a[mo_right]]]);
            --fv[a[mo_right]];
            ans+= (1LL*a[mo_right]*inm[fv[a[mo_right]]]);
            --mo_right;
        }
        anss[queries[i].first] = ans;
    }
    for (int i=1; i<=t; ++i)
        printf("%I64d\n",anss[i]);
    return 0;
}
