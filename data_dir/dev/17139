#include<bits/stdc++.h>
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;
#define pb push_back
#define ins(x) insert(x)
#define fi first
#define se second
#define ub upper_bound
#define all(v) v.begin(),v.end()
#define sz(v) ((ll)((v).size()))
#define reset(v,val) memset(v,val,sizeof(v))
#define erep(i, x, n) for ( i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for( i = x; i<(ll)(n); i++)
using namespace std;
typedef    long long   int ll;
const long long  int mod=998244353;
ll dx[]={0,0,1,-1};
ll dy[]={1,-1,0,0};
ll m=1e9+9,n,res,k,ans=0,nbcycle=0,s;
 ll p = 31;
string s2="zero",ch="";
set< ll  > st;
multiset<ll> mst;
vector< pair<ll,ll> >vv,vv2,vm;
vector< pair< ll, pair<ll,ll> > > vvv;
vector<pair<ll,ll> >vvs;
vector<ll> v[100005],adj[100005];
ll a[200005],vis[200005],dp[200005],red[200005];
map< pair<ll,ll>,ll > mp;

void dfs(ll x){
    vis[x]=1;
    for(ll i=0;i<adj[x].size();i++){
        ll y=adj[x][i];
        if(!vis[y]){
            dfs(y);
            vv.pb({x,y});
        }
    }
}

int main(){
In_the_name_of_allah_the_merciful

    ll i=0,x,y,j=0,z,q,nb0=0,nbp=0,nbn=0,nbmax=0,nbinf=0,mm=5e8,idx=0,ok=0,l=0,r=0,negatif=0,positif=0,l1,r1,d;
    set< ll > ::iterator it,it1;
    char c;
    //freopen("a.txt","r",stdin);
    cin>>n>>k;
    for(i=1;i<=n;i++){
       cin>>a[i];
       v[a[i]].pb(i);
    }
     if(v[0].size()>1||!v[0].size())return cout<<"-1",0;
     ll node=v[0][0];
     for(i=1;i<=n;i++){
        if(!v[i].size())break;
        ll nb=v[i].size();
        if(i==1&& v[i].size()>k)return cout<<"-1",0;
        else if(i>1&&v[i-1].size()*(k-1)<nb){
            return cout<<"-1",0;
        }
        z=0;
        for(j=0;j<v[i].size();j++){
            y=v[i-1][z];
            if(adj[y].size()==k)z++;
            y=v[i-1][z];
            x=v[i][j];
            adj[x].pb(y);
            adj[y].pb(x);
        }

     }
     memset(vis,0,sizeof(vis));
     dfs(node);
     for(i=1;i<=n;i++){
        if(!vis[i])return cout<<"-1",0;
     }
     cout<<vv.size()<<endl;
     for(i=0;i<vv.size();i++){
        cout<<vv[i].first<<" "<<vv[i].second<<endl;
     }
   Alhamdulillah
 }
