#include <bits/stdc++.h>
#include <cctype>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::less<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef unsigned long long uint64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 300'000;
const int LOGN = 19;

int n, m, k;

void solve(int) {
  cin >> n >> m >> k;
  if (k > 4 * n * m - 2 * n - 2 * m) {
    cout << "NO\n";
    return;
  }
  cout << "YES\n";
  vector<pair<int, string>> ans;
  for (int i = 0; i + 1 < n && k; ++i) {
    int v = min(m - 1, k);
    if (v) {
      ans.emplace_back(v, "R"s);
      k -= v;
    }
    v = min(m - 1, k / 3);
    if (v) {
      k -= v * 3;
      ans.emplace_back(v, "DUL");
    }
    if (k && v != m - 1) {
      ans.emplace_back(1, "DUL"s.substr(0, k));
      k -= k;
    }
    if (k) {
      --k;
      ans.emplace_back(1, "D"s);
    }
  }
  int v = min(m - 1, k);
  if (v) {
    k -= v;
    ans.emplace_back(v, "R"s);
  }
  v = min(m - 1, k);
  if (v) {
    k -= v;
    ans.emplace_back(v, "L"s);
  }
  if (k) {
    ans.emplace_back(k, "U"s);
  }
  cout << ans.size() << '\n';
  for (const auto& pr : ans) {
    cout << pr.first << ' ' << pr.second << '\n';
  }
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}


