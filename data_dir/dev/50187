// in the name of god 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
#include <bits/stdc++.h>
//#include <unistd.h>
using namespace std ;
using namespace __gnu_pbds;
void operator+=(vector<int>&in1,const vector<int>&in2){for(int i=0;i<in2.size();i++)in1.push_back(in2[i]);}
#define y2 sdfklgjsdkfd
#define y1 sdfklgjsdkafd
#define X first 
#define Y second
#define int long long  
typedef long long ll ;
typedef long double ld ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
typedef pair < int , int > pii ; 
typedef pair < int , pii > pi_ii ;
typedef pair < pii , int > pii_i ;
typedef pair < pii , pii > pii_ii ;
#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%I64d
int mod = 1e9+9 ;
const int mod1 = 1e9+9 ;
const int max_Mat = 2 ; 
struct Mat{int n;int a[max_Mat][max_Mat];Mat(bool x=0){n=2;for(int i=0;i<max_Mat;i++)for(int j=0;j<max_Mat;j++)a[i][j]=((i==j)?x:0);}};
inline Mat operator*(const Mat&m1,const Mat&m2){Mat ret;int n=m1.n;ret.n=n;
  for(int i=0;i<n;i++)
    for(int j=0;j<n;j++)
      for(int k=0;k<n;k++)
	ret.a[i][j]=(0LL+ret.a[i][j]+1LL*m1.a[i][k]*m2.a[k][j])%mod;return ret;}inline Mat operator*=(Mat&m1,const Mat&m2){m1=m1*m2;} 
inline Mat operator^(Mat mat,int k){Mat ret(1);ret.n=mat.n;while(k){if(k&1)ret*=mat;k/=2;mat*=mat;}return ret;}
inline void operator^=(Mat &m1, int k){m1=m1^k;} 
inline ostream&operator<<(ostream&os,const Mat&mat){for(int i=0;i<mat.n;i++)for(int j=0;j<mat.n;j++)cout<<mat.a[i][j]<<((j+1==mat.n)?'\n':' ');}
const int maxL = 20 ;
const ll  inf = 1e18 ;
const int baze = 450 ;
const int maxn = 2e5 + 100 ;
const int base0 = 421 ;
const int base1 = 427 ;
int n , m , k ; 

int pown ( int x , int y )
{
  if ( y == 0 )
    return 1 ;
  int ret = pown ( x , y / 2 ) ;
  ret = ( ret * ret ) % mod ;
  if ( y & 1 )
    ret *= x ;
  return ret % mod ;
} 

main ( )
{
  cin >> n >> m >> k ;
  int x = n - m ;
  n = max ( 0LL , n - x * k ) ;
  cout << ( k * pown ( 2 , 1+(n/k)) - 2 * k + n % k + m - n + mod ) %mod ; 
}
