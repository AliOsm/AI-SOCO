#include <bits/stdc++.h>

using namespace std;

const int64_t MOD = 1e9 + 7;
int n, m;
map<int, int> mp;
int a[300'000 + 1][9];

bool can(int x) {
    mp.clear();
    for (int i = 1; i <= n; ++i) {
        int val = 0;
        for (int j = 1; j <= m; ++j) {
            val *= 2;
            if (a[i][j] >= x) {
                val = val + 1;
            }
        }
        mp[val] = i;
    }

    for (int i = 0; i < (1 << m); ++i) {
        for (int j = 0; j < (1 << m); ++j) {
            if ((i | j) == (1 << m) - 1 && mp[i] && mp[j]) {
                return true;
            }
        }
    }

    return false;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    cin >> n >> m;

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            cin >> a[i][j];
        }
    }

    int l = 0, r = 1e9 + 5;
    while (l < r - 1) {
        int m = (l + r) / 2;
        if (can(m)) {
            l = m;
        } else {
            r = m;
        }
    }

    mp.clear();
    for (int i = 1; i <= n; ++i) {
        int val = 0;
        for (int j = 1; j <= m; ++j) {
            val *= 2;
            if (a[i][j] >= l) {
                val = val + 1;
            }
        }
        mp[val] = i;
    }

    for (int i = 0; i < (1 << m); ++i) {
        for (int j = 0; j < (1 << m); ++j) {
            if ((i | j) == (1 << m) - 1 && mp[i] && mp[j]) {
                cout << mp[i] << " " << mp[j] << endl;
                return 0;
            }
        }
    }

    return 0;
}