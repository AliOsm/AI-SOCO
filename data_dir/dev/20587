#include <bits/stdc++.h>

using namespace std;

int n, m;
long long ba, inc, dam, ma[100005], st[100005], rg[100005], ans, ta, tb, tc;
vector< pair< long long, long long > > v[100005], vv;
bool o;

int main() {
	scanf("%d%d", &n, &m);
	scanf("%lld%lld%lld", &ba, &inc, &dam);
	for (int i = 1; i <= n; i++)
		scanf("%lld%lld%lld", ma + i, st + i, rg + i);
	while (m--) {
		scanf("%lld%lld%lld", &ta, &tb, &tc);
		v[tb].push_back(make_pair(ta, tc));
	}
	for (int i = 1; i <= n; i++) {
		v[i].push_back(make_pair(0, st[i]));
		sort(v[i].begin(), v[i].end());
		o = 0;
		for (int j = 0; j < v[i].size(); j++) {
			if (v[i][j].second <= dam && !o) {
				o = 1;
				vv.push_back(make_pair(v[i][j].first, 1));
			} else if (v[i][j].second > dam && o) {
				o = 0;
				vv.push_back(make_pair(v[i][j].first, -1));
			}
			if (o && ma[i] > dam && rg[i]) {
				ta = (dam - v[i][j].second) / rg[i] + 1;
				if (j == v[i].size() - 1 || v[i][j].first + ta < v[i][j + 1].first) {
					o = 0;
					vv.push_back(make_pair(v[i][j].first + ta , -1));
				}
			}
		}
	}
	sort(vv.begin(), vv.end());
	ta = 0;
	for (int i = 0; i < vv.size(); i++) {
		// printf("%d %d\n", vv[i].first, vv[i].second);
		ta += vv[i].second;
		if (i == vv.size() - 1) {
			if (ta)
				if (inc)
					ans = -1;
				else
					ans = max(ans, ta * ba);
		} else if (vv[i].first != vv[i + 1].first)
			ans = max(ans, ta * (ba + inc * (vv[i + 1].first - 1)));
	}
	printf("%lld\n", ans);
	return 0;
}
