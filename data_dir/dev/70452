#include <bits/stdc++.h>
using namespace std;
map < int , vector < int > > done;
int n , qq;
deque < pair < int , int > > cur;
void relax(){
    deque < pair < int , int > > v;
    for(auto I : cur){
        if(!v.empty() && v.back().second >= I.first)
            v.back().second = I.second;
        else v.push_back(I);
    }
    cur.clear();
    cur.swap(v);
}
void nk7(int diag){
    deque < pair < int , int > > v;
    for(auto I : cur){
    //    cout<<"$"<<I.first<<' '<<I.second<<endl;
        while(!done[diag].empty()){
            int y = done[diag].back();
            if(y < I.first) goto qq;
            if(y > I.second) break;

            if(I.first != y)
                v.push_back({I.first , y-1});
            I.first = y+1;
            qq: done[diag].pop_back();
        }
        if(I.first <= I.second)
            v.push_back(I);
    }
    cur.clear();
    cur.swap(v);
}
int main(){
    scanf("%d %d",&n,&qq);
    set < int > S;
    while(qq--){
        int x , y;
        scanf("%d %d",&x,&y);
        done[x+y-1].push_back(y);
        S.insert(x + y - 1);
    }
    S.insert(n + n -1);
    for(auto &pp : done)
        sort(pp.second.rbegin() , pp.second.rend());
    int diag = 1 , nosol=0;
    cur.push_back({1,1});
    while(1){
        int st = 1;
        if(diag > n) st += diag - n;
        while(!cur.empty()){
            cur.front().first = max(cur.front().first , st);
            if(cur.front().first > cur.front().second)
                cur.pop_front();
            else break;
        }
        nk7(diag);
        //cout<<"#"<<diag<<endl;
        //for(auto pp : cur) cout<<pp.first<<' '<<pp.second<<endl; cout<<endl;
        if(cur.empty()){
            nosol = 1;
            break;
        }
        if(diag == n + n - 1) break;
        int nxtdiag = *S.upper_bound(diag);
        int flag = nxtdiag - diag , en = n;
        if(nxtdiag < n) en = nxtdiag;
        if(flag){
            for(auto &pp : cur){
                pp.second += flag;
                pp.second = min(pp.second , en);
            }
            relax();
        }
        diag = nxtdiag;
    }
    if(nosol) puts("-1");
    else cout<<n+n-2<<endl;

}
