#include<bits/stdc++.h>

#define ll long long

using namespace std;
const int N = 1e5 + 5;
int sp[N][20], n, a[N], lg[N];
void build() {
	for (int i = 0; 1 << i < N; i++)
		lg[1 << i] = i;
	for (int i = 1; i < N; i++)
		lg[i] = max(lg[i], lg[i - 1]);
	for (int i = 0; i < n; i++)
		sp[i][0] = a[i];
	for (int j = 1; j < 20; j++)
		for (int i = 0; i < n; i++) {
			sp[i][j] = sp[i][j - 1];
			if (i + (1 << (j - 1)) < n)
				sp[i][j] = max(sp[i][j], sp[i + (1 << (j - 1))][j - 1]);
		}
}
int get(int l, int r) {
	int k = lg[r - l + 1];
	return max(sp[l][k], sp[r - (1 << k) + 1][k]);
}
int bs1(int st, int m) {
	int s = st, e = n - 1, ans = -1;
	while (s <= e) {
		int mid = (s + e) >> 1;
		if (get(st, mid) > m)
			e = mid - 1, ans = a[mid];
		else
			s = mid + 1;
	}
	return ans;
}
int bs2(int en, int m) {
	int s = 0, e = en, ans = -1;
	while (s <= e) {
		int mid = (s + e) >> 1;
		if (get(mid, en) > m)
			s = mid + 1, ans = a[mid];
		else
			e = mid - 1;
	}
	return ans;
}
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	build();
	int ans = 0;
	for (int i = 0; i < n; i++) {
		int l = bs1(i, a[i]);
		if (l != -1)
			ans = max(ans, a[i] ^ l);
		int r = bs2(i, a[i]);
		if (r != -1)
			ans = max(ans, a[i] ^ r);
	}
	cout << ans << endl;
	return 0;
}
