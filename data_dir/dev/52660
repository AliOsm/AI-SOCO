#include <iostream>
#include <bits/stdc++.h>
#include <string>
using namespace std;

#define pb push_back
#define ull unsigned long long
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-9
#define BASE 31ll
#define BASE2 53ll
#define ld double
#define MAX 1000000000
#define NIL 0
#define INF 1e15
#define infi 1e16
#define rd(a) scanf("%d",&a)
#define rd2(a,b) scanf("%d %d",&a,&b)
#define rd3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define rdll(a) scanf("%I64d",&a)
#define sz(a) (int) a.size()
#define lp(i,a,n) for(int i=(a); i<=(n) ; ++i)
#define lpd(i,n,a) for(int i=(n); i>=(a) ; --i)
#define pi acos(-1)
#define lc (x << 1)
#define rc (x << 1 | 1)
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define angle(a)                (atan2((a).imag(), (a).real()))
#define X real()
#define Y imag()
#define vec(a,b)                ((b)-(a))


typedef complex<double>point;
typedef complex<double>CX;
typedef pair<int,int>ii;
typedef pair<int,ii>tri;
typedef pair<vector<int>,int>vii;
typedef pair<int, int> pii;
typedef pair<ii,ii> line;
typedef pair<ll, ll> pll;
typedef vector<int> vi;

const int N=100005;


ll mod=1e9+7;
int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u')return 1;return 0;}
ld getDistance(ld x1,ld y1,ld x2,ld y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}
ll extended_euclidean(ll a,ll b,ll &x,ll &y){if(b==0){x=1;y=0;return a;}ll g = extended_euclidean(b,a%b,y,x);y -= (a/b)*x;return g;}
ll power(ll base,ll p){if(p==1)return base;if(!p)return 1ll;ll ret=power(base,p/2);ret*=ret;ret%=mod;if(p&1)ret*=base;return ret%mod;}


ll dp[5005][2555][2][2];
int n,a[5002];

ll solve(int idx,int k,bool build,bool small){
   if(!k)return 0;
   if(idx==n)return 1e16;
   if((n-idx+1)<k)return 1e16;
   if(dp[idx][k][build][small]!=-1)return dp[idx][k][build][small];
   ll ret=1e16;
   if(build){
       ret=solve(idx+1,k,0,1);
   }
   else{
       ret=solve(idx+1,k,0,0);
       ll cost=0;
       if(idx+1<n&&a[idx+1]>=a[idx])cost=a[idx+1]-a[idx]+1;
       if(idx>0&&a[idx]<=a[idx-1]){
          int cur=a[idx-1];
          if(small)
             cur=min(a[idx-2]-1,a[idx-1]);
          if(cur>=a[idx])cost+=cur-a[idx]+1;
       }
       ret=min(ret,solve(idx+1,k-1,1,1)+cost);
   }
   return dp[idx][k][build][small]=ret;
}
int main() {
  //freopen("test.in","r",stdin);
  rd(n);
  lp(i,0,n-1)rd(a[i]);
  memset(dp,-1,sizeof(dp));
  lp(i,1,(n+1)/2)printf("%I64d ",solve(0,i,0,0));
  return 0;
}
