#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma comment(linker, "/STACK:16777216")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<double, double> pd;

template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

struct edge {
    int to, w, id;

    edge() : to(0), w(0), id(0) {};
    edge(int _to, int _w, int _id) : to(_to), w(_w), id(_id) {};
};

const int MAXN = 3e5 + 100;
vector<edge> g[MAXN];
ll d[MAXN];
pii par[MAXN];
int deg[MAXN];

signed main() {
    FAST_IO();
    int n, m, k;
    cin >> n >> m >> k;
    for (int i = 0; i < m; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        u--;
        v--;
        g[u].push_back(edge(v, w, i));
        g[v].push_back(edge(u, w, i));
    }
    fill(d, d + MAXN, 1e18);
    fill(par, par + MAXN, (pii){-1, -1});
    d[0] = 0;
    set<pll> setik;
    for (int i = 0; i < n; ++i) {
        setik.insert({d[i], i});
    }
    while (setik.size()) {
        int u = setik.begin()->second;
        setik.erase(setik.begin());
        for (auto &[to, w, id] : g[u]) {
            if (d[to] > d[u] + w) {
                setik.erase({d[to], to});
                if (par[to].first != -1) {
                    deg[par[to].first]--;
                    deg[to]--;
                }
                d[to] = d[u] + w;
                par[to] = {u, id};
                deg[u]++;
                deg[to]++;
                setik.insert({d[to], to});
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        setik.insert({deg[i], -i});
    }
    int cnt = n - 1;
    while (cnt > k) {
        int u = -setik.begin()->second;
        setik.erase(setik.begin());
        setik.erase({deg[par[u].first], -par[u].first});
        deg[par[u].first]--;
        setik.insert({deg[par[u].first], -par[u].first});
        deg[u]--;
        cnt--;
    }
    cout << cnt << '\n';
    for (int i = 1; i < n; ++i) {
        if (deg[i] != 0) {
            cout << par[i].second + 1 << ' ';
        }
    }
}
