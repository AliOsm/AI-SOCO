#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <memory.h>
#include <cstring>
#include <stack>
#include <unordered_set>
#include <unordered_map>
#include <iterator>
#pragma comment(linker, "/STACK:667177216")
#define ll long long
#define ull unsigned long long
#define INF 1000000007;
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define mp make_pair
#define vI vector<int>
#define vvI vector<vector<int>>
#define vLL vector<LL>
#define vS vector<string>
#define fori(i, n) for (int(i) = 0; (i) < n; (i)++)
#define forn(it, from, to) for (int(it) = from; (it) < to; (it)++)
#define forI(tmp) for (auto(it) = (tmp).begin(); (it) != (tmp).end(); (it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%d", &(a))
#define scLL(a) scanf("%I64d", &(a))
#define mems(a, val) memset(a, val, sizeof(a))
typedef long long LL;
using namespace std;
const LL MOD = 1000000000 + 7;
const LL MAXN = 100000 + 100;

LL dist(pair<int,int> &p1, pair<int,int> &p2) {
    return abs(p1.first - p2.first) + abs(p1.second - p2.second);
}

LL P(vector<pair<int, int> > &p, vector<int> &selected) {

LL result = 0;
    for(int i = 0; i < selected.size(); ++i){
result += dist(p[selected[i]], p[selected[(i + 1) % selected.size()]]);
    }

    return result;
}

    int main()
{
#ifdef ONLINE_JUDGE
    //freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int n;
    scanf("%d", &n);
    //n = 3000000;
    vector<pair<int,int> > p(n);
    forn(i,0,n){
        scanf("%d%d", &p[i].first, &p[i].second);
        //p[i].first = i;
        //p[i].second = i;
    }

    vector<pair<int,int> > xs, ys;
    forn(i,0,n) {
        xs.push_back(mp(p[i].first, i));
        ys.push_back(mp(p[i].second, i));
    }

    sort(all(xs));
    sort(all(ys));

    set<int> good;
    int i = 0;
    while(i < xs.size() && xs[i].first == xs[0].first) {
        good.insert(xs[i].second);
        i++;
    }
    i = 0;
    while (i < ys.size() && ys[i].first == ys[0].first)
    {
        good.insert(ys[i].second);
        i++;
    }

    i = n - 1;
    while(i >= 0 && xs[i].first == xs.back().first) {
        good.insert(xs[i].second);
        i--;
    }
    i = n - 1;
    while (i >= 0 && ys[i].first == ys.back().first)
    {
        good.insert(ys[i].second);
        i--;
    }

    vector<int> gv(all(good));

    sort(all(gv));
LL maxi = -1;
    for(int i = 3; i <= n; ++i){
        int mask_size = gv.size();
        
        if (mask_size <= i) {
            //cout << P(p, gv)<<" ";
            printf("%I64d ", P(p, gv));
        }else{
            LL ans = -1;
            if (i == 3) {
                for(int j1 = 0; j1 < mask_size; ++j1) {
                    for(int j2 = j1 + 1; j2 < mask_size; ++j2) {
                        for(int j3 = (gv[j1] + 1) % n; j3 != gv[j2]; j3 = (j3 + 1) % n) {
                            ans = max(ans, dist(p[gv[j1]], p[j3]) + dist(p[j3], p[gv[j2]]) + dist(p[gv[j1]], p[gv[j2]]));
                        }
                        for (int j3 = (gv[j2] + 1)%n; j3 != gv[j1]; j3 = (j3 + 1) % n)
                        {
                            ans = max(ans, dist(p[gv[j2]], p[j3]) + dist(p[j3], p[gv[j1]]) + dist(p[gv[j1]], p[gv[j2]]));
                        }
                    }
                }
            }else{
                for (int j = 0; j < (1 << mask_size); ++j)
                {
                    vector<int> tmp;
                    for (int k = 0; k < mask_size; ++k)
                    {
                        if (j & (1 << k))
                        {
                            tmp.push_back(gv[k]);
                        }
                    }

                    if (tmp.size() == i)
                    {
                        ans = max(ans, P(p, tmp));
                    }
                }
            }


            

//cout<<ans<<" ";;
            printf("%I64d ", ans);
        }
    }


    return 0;
}