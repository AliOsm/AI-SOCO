// inplace_merge(T + beg, T + mid + 1, T + end + 1);
// unsigned Long hash[maxn],p = 999999999989; hash[0] = 1; fo(i,1,maxn)hash[i] = hash[i-1] * p;
// __builtin_popcount(n);
/*
ID: Tariqul
PROG:
LANG: C++
*/

#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

#define fo(i,j,n) for(i=j;i<n;++i)
#define Fo(i,j,n) for(i=n-1;i>=j;--i)
#define foo(i,j,v) fo(i,j,sz(v))
#define Foo(i,j,v) Fo(i,j,sz(v))
#define li(v) v.begin(),v.end()
#define sz(v) ((int)v.size())
#define CLR(a,v) memset((a),(v),sizeof(a))
#define inf 1e9 + 10
#ifdef localhost
typedef long long Long;
#else
typedef __int64 Long;
#endif // localhost
#define pi (2*acos(0))
#define eps 1e-9

#define two(X) (1<<(X))
#define twoL(X) (((Long)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)

char BUFFER[100000 + 5];
bool readn(int &n)	{ return scanf("%d",&n) == 1; }
#ifdef localhost
bool readl(Long &n)	{ return scanf("%lld",&n) == 1; }
#else
bool readl(Long &n)	{ return scanf("%I64d",&n) == 1; }
#endif // localhost
bool readd(double &n){ return scanf("%lf",&n) == 1; }
bool reads(string &s){ s = ""; int n = scanf("%s",BUFFER); if(n == 1)s = BUFFER; return n == 1; }
bool readln(string &s){ char *valid = gets(BUFFER); if(valid)s = BUFFER; return ((bool)valid); }
#ifdef localhost
void Print(Long &n, bool printNewLine = true)	{ printNewLine ? printf("%lld\n",n) : printf("%lld",n);  }
#else
void Print(Long &n, bool printNewLine = true)	{ printNewLine ? printf("%I64d\n",n) :  printf("%I64d",n); }
#endif // localhost

using namespace std;

const int maxn = 105;

Long c1[maxn],c2[maxn];
int d1[maxn],d2[maxn];
vector<int> adj[maxn];
queue<int> q;
bool vis[maxn];

void dfs(int cur, int d[])
{
    while(!q.empty())q.pop(); CLR(vis,false);
    q.push(cur); vis[cur] = true; d[cur] = 0; int i,next;
    while(!q.empty())
    {
        cur = q.front(); q.pop();
        foo(i,0,adj[cur])
        {
            next = adj[cur][i]; if(vis[next])continue;
            vis[next] = true; d[next] = d[cur] + 1;
            q.push(next);
        }
	}
}

Long dfs(int cur, int d[], Long c[])
{
    Long &res = c[cur]; if(res != -1)return res;
	if(d[cur] == 0)return res = 1; int i,next; res = 0;
	foo(i,0,adj[cur])
	{
		next = adj[cur][i];
		if(d[cur] - d[next] == 1)
		{
            res += dfs(next,d,c);
        }
	}
	return res;
}

int main()
{
   #ifdef localhost
    freopen("/home/tariqul/APC/Contest/input.txt","r",stdin);
    //freopen("/home/tariqul/APC/Contest/output.txt","w",stdout);
    #endif

	int i,n,m,a,b; cin >> n >> m;
	while(m--)
	{
		cin >> a >> b; a--; b--;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}

	dfs(0,d1);
	dfs(n-1,d2);

	CLR(c1,-1); dfs(n-1,d1,c1);
	CLR(c2,-1); dfs(0,d2,c2);
	Long ma = c2[0],val;
	fo(i,1,n-1)
	{
		val = c1[i] * c2[i] * 2;
		ma = max(ma, val);
	}

    printf("%.9lf\n",double(ma)/c2[0]);
	//cout << ma / c2[0] << endl;



    return 0;
}
