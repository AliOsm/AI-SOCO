/*input
10
aaaba
babba
bbba
aaabb
abba
a
bbb
baa
aaba
aa


5
abba
abb
ab
aa
aacada

3
telegram
digital
resistance




*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define mp make_pair
#define fi first
#define se second
#define __builtin_popcount __builtin_popcountll
#define loop(i,l,r) for(int i=(l); i<=(r); i++)
#define rloop(i,l,r) for(int i=(l); i>=(r); i--)
#define bit(x,y) ((x>>y)&1LL)
const int N = 1e5 + 5;
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &a) {
	return os << '(' << a.first << ", " << a.second << ')';
}

template <class T>
ostream &operator<<(ostream &os, const vector<T> &a) {
	os << '[';
	for (unsigned int i = 0; i < a.size(); i++)
		os << a[i] << (i < a.size() - 1 ? ", " : "");
	os << ']';
	return os;
}

template <class T>
ostream &operator<<(ostream &os, const deque<T> &a) {
	os << '[';
	for (unsigned int i = 0; i < a.size(); i++)
		os << a[i] << (i < a.size() - 1 ? ", " : "");
	os << ']';
	return os;
}

template <class T>
ostream &operator<<(ostream &os, const set<T> &a) {
	os << '{';
	for (typename set<T>::iterator it = a.begin(); it != a.end(); it++) {
		typename set<T>::iterator jt = it;
		os << *it << (++jt != a.end() ? ", " : "");
	}
	os << '}';
	return os;
}

template <class T>
ostream &operator<<(ostream &os, const multiset<T> &a) {
	os << '{';
	for (typename set<T>::iterator it = a.begin(); it != a.end(); it++) {
		typename set<T>::iterator jt = it;
		os << *it << (++jt != a.end() ? ", " : "");
	}
	os << '}';
	return os;
}

template <class T1, class T2>
ostream &operator<<(ostream &os, map<T1, T2> &a) {
	os << "{\n";
	for (typename map<T1, T2>::iterator it = a.begin(); it != a.end(); it++) {
		typename map<T1, T2>::iterator jt = it;
		os << "  " << it->first << ": " << it->second << (++jt != a.end() ? ",\n" : "\n");
	}
	os << '}';
	return os;
}

int n;
array<array<int, 26>, N> nxt;
array<int, N> pass;
array<bool, N> mark;
array<multiset<int>, N> chain;
array<int, N> maxLen;
int ans = 0;

void add(const string &s) {
	static int peak = 0;
	int u = 0;
	for (const auto &c : s) {
		pass[u]++;
		if (nxt[u][c - 'a'] == 0) {
			// cout << u << sp << peak + 1 << endl;
			nxt[u][c - 'a'] = ++peak;
		}
		u = nxt[u][c - 'a'];
	}
	pass[u]++; mark[u] = true;
}

void merge(multiset<int> &A, multiset<int> &B) {
	if (A.size() > B.size()) A.swap(B);
	A.insert(B.begin(), B.end()); B.clear();
}

void dfs(int u, int depth) {
	vector<int> child;
	loop(i, 0, 25) if (nxt[u][i] != 0) {
		dfs(nxt[u][i], depth + 1);
		child.push_back(nxt[u][i]);
	}
	if (u != 0) {
		for (auto v : child) merge(chain[u], chain[v]);
		ans += pass[u];
		if (mark[u]) chain[u].insert(depth);
		else {
			ans -= *chain[u].rbegin() - *chain[u].begin() + 1;
			// printf("vertex %lld sub %lld add %lld\n", u, *chain[u].rbegin() - *chain[u].begin() + 1, pass[u]);
			// cout << "set" << sp << chain[u] << endl;
			chain[u].insert(depth);
			chain[u].erase((--chain[u].end()));
		}

	}
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n;
	loop(i, 1, n) {
		string s; cin >> s;
		add(s);
	}
	dfs(0, 0);
	cout << ans << endl;
}