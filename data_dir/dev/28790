#include <bits/stdc++.h>
using namespace std;

using LL = long long;
const LL MOD = 998244353;
using PLL = pair<LL, LL>;
#define SUM first
#define PROD second

LL modpow(LL a, LL n) {
    LL res = 1;
    while (n > 0) {
        if (n & 1) res = (res * a) % MOD;
        a = (a * a) % MOD;
        n >>= 1;
    }
    return res;
}

class SegmentTree {
    int sz;
    vector<PLL> tree;

    PLL merge(PLL a, PLL b) {
        return make_pair((a.SUM + b.SUM * a.PROD) % MOD, (a.PROD * b.PROD) % MOD);
    }

public:
    SegmentTree(vector<LL> p) {
        for (sz = 1; sz < (int) p.size(); sz <<= 1);
        tree.resize(2 * sz, {0, 1});
        for (int i = 0; i < (int) p.size(); ++i) {
            tree[sz + i].SUM = 1;
            tree[sz + i].PROD = p[i];
        }
        for (int i = sz - 1; i >= 1; --i) {
            tree[i] = merge(tree[2 * i], tree[2 * i + 1]);
        }
    }

    PLL query(int l, int r, int node = 1, int x = 0, int y = -1) {
        if (y == -1) y = sz;
        if (r <= x || l >= y) return {0, 1};
        if (l <= x && y <= r) return tree[node];
        return merge(query(l, r, 2 * node, x, (x + y) / 2), query(l, r, 2 * node + 1, (x + y) / 2, y));
    }
    LL get(int l, int r) {
        auto q = query(l, r);
        return (q.first * modpow(q.second, MOD - 2)) % MOD;
    }
};

int main() {
#ifdef LOCAL_EXEC
//	freopen("sample.in", "r", stdin);
//	freopen("sample.out", "w", stdout);
#else
	ios_base::sync_with_stdio(false); cin.tie(NULL);
#endif

	int n, q; cin >> n >> q;
	const LL inv100 = modpow(100, MOD - 2);
	vector<LL> vals(n);
	for (int i = 0; i < n; ++i) {
	    cin >> vals[i];
	    vals[i] = (vals[i] * inv100) % MOD;
	}
	SegmentTree st(vals);
	LL ans = st.get(0, n);

	set<int> ch;
	ch.insert(0); ch.insert(n);
	while (q--) {
        int u; cin >> u; --u;
        auto it = ch.find(u);
        if (it != ch.end()) {
            it--; int lo = *it;
            it++; it++; int hi = *it;
            it--; ch.erase(it);
            ans -= st.get(lo, u);
            ans -= st.get(u, hi);
            ans += st.get(lo, hi);
        } else {
            ch.insert(u); it = ch.find(u);
            it--; int lo = *it;
            it++; it++; int hi = *it;

            ans += st.get(lo, u);
            ans += st.get(u, hi);
            ans -= st.get(lo, hi);
        }

        ans %= MOD;
        if (ans < 0) ans += MOD;
        cout << ans << '\n';
	}

	return 0;
}
