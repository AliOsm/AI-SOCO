// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = (int)1e5 + 3;

int n, m, h, id, nr[N], u[N];
VI topo, skl, bst, child[N], rev[N];
vector<VI> sklad;
bool vis[N];

void dfs(int v) {
  vis[v] = true;
  for (int x: child[v])
    if (!vis[x])
      dfs(x);
  topo.PB(v);
}

void dfs2(int v) {
  vis[v] = true;
  skl.PB(v);
  nr[v] = id;
  for (int x: rev[v])
    if (!vis[x])
      dfs2(x);
}

int main() {
  init_ios();
  cin >> n >> m >> h;
  for (int i = 1; i <= n; ++i)
    cin >> u[i];
  for (int i = 1; i <= m; ++i) {
    int x, y;
    cin >> x >> y;
    if ((u[x]+1)%h == u[y]) {
      child[x].PB(y);
      rev[y].PB(x);
    }
    if ((u[y]+1)%h == u[x]) {
      child[y].PB(x);
      rev[x].PB(y);
    }
  }
  for (int i = 1; i <= n; ++i)
    if (!vis[i])
      dfs(i);
  for (int i = 1; i <= n; ++i)
    vis[i] = false;
  while (topo.size()) {
    int v = topo.back();
    topo.pop_back();
    if (vis[v])
      continue;
    skl.clear();
    dfs2(v);
    sklad.PB(skl);
    ++id;
  }
  for (int i = 0; i <= n; ++i)
    vis[i] = false;
  for (int i = 1; i <= n; ++i)
    for (int x: child[i])
      if (nr[i] != nr[x])
        vis[nr[i]] = true;
  for (int i = 0; i < id; ++i)
    if (!vis[i] && (bst.size() == 0 || bst.size() > sklad[i].size()))
      bst = sklad[i];
  cout<<bst.size()<<"\n";
  for (int x: bst)
    cout<<x<<" ";
  cout<<"\n";
}