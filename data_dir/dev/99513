#include <iostream>
#include <set>
#include <vector>
#include <map>
#include <cmath>
#include <algorithm>
#include <list>

using namespace std;

string s[2222];
pair<int,int> dist[2222][2222];

int main()
{
    int n,m;
    cin >> n >> m;
    int r,c;
    cin >> r >> c;
    int le,ri;
    cin >> le >> ri;

    s[0]=s[n+1]=string('*',m+2);

    for (int i=1;i<=n;i++)
    {
        string t;
        cin >> t;
        s[i]='*'+t+'*';
        for (int j=1;j<=m;j++)
        {
            dist[i][j]={1e9+7,1e9+7};
        }
    }

    list<pair<int,int> > q;

    q.push_back({r,c});
    dist[r][c]={0,0};
    int res=0;
    while(q.size())
    {
        auto p=q.front();
        q.pop_front();
        int r1=p.first,c1=p.second;

        if (dist[r1][c1].first<=le&&dist[r1][c1].second<=ri)++res;

        if (s[r1-1][c1]=='.')
        {
            if (dist[r1][c1]<dist[r1-1][c1])
            {
                dist[r1-1][c1]=dist[r1][c1];
                q.push_front({r1-1,c1});
            }
        }
        if (s[r1+1][c1]=='.')
        {
            if (dist[r1][c1]<dist[r1+1][c1])
            {
                dist[r1+1][c1]=dist[r1][c1];
                q.push_front({r1+1,c1});
            }
        }

        if (s[r1][c1-1]=='.')
        {
            auto p1=dist[r1][c1];
            p1.first++;
            if (p1<dist[r1][c1-1])
            {
                dist[r1][c1-1]=p1;
                q.push_back({r1,c1-1});
            }
        }
        if (s[r1][c1+1]=='.')
        {
            auto p1=dist[r1][c1];
            p1.second++;
            if (p1<dist[r1][c1+1])
            {
                dist[r1][c1+1]=p1;
                q.push_back({r1,c1+1});
            }
        }
    }

cout << res;
    return 0;
}


    /*int n,m;
    cin >> n >> m;
    s[0]=s[n+1]=string('#',m+2);
    int rb,cb;
    for (int i=1;i<=n;i++)
    {
        string t;
        cin >> t;
        s[i]='#'+t+'#';
        if (s[i].find('O')!=string::npos)
        {
            rb=i;
            cb=s[i].find('O');
        }
    }

    for (int i=1;i<=n;i++)
    {
        for (int j=1;j<=m;j++)
        {

        }
    }
    */
