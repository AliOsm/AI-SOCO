//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#include <iomanip>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define INF (100000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;


#define matrix vector< vector<ll> >

matrix matmul(matrix &a, matrix &b){
    int i, j, k, n = a.size();
    matrix ans (n, vector<ll>(n));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            ll temp = 0;
            for(k=0;k<n;k++)    temp = (temp + a[i][k] * b[k][j]) % MOD;
            ans[i][j] = temp;
        }

    return ans;
}

matrix matpwr(matrix &a, ll p){
    int n = a.size();
    matrix ans(n, vector<ll> (n));
    for(int i=0;i<n;i++)    ans[i][i] = 1;

    while(p){
        if(p&1) ans = matmul(ans, a);

        a = matmul(a, a);
        p >>= 1;
    }
    return ans;
}


ll pwr(ll base, ll p, ll mod = MOD){
    ll ans = 1;
    while(p){
        if(p & 1)   ans = (ans * base) % mod;
        base = (base * base) % mod;
        p /= 2;
    }
    return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


ll lcm(ll a, ll b){
    return (a*b) / gcd(a, b);
}


ll invMod(ll n, ll mod = MOD){
    return pwr(n, mod-2);
}



int n, n1, n2, arr1[100004], arr2[100004], deck[200004], arr[200005];
vector<int> moves;


void func(int l, int r, int x, bool leftIsTop){

    if(l > r)   return;

// cout<<"now at "<<l<<" "<<r<<" and "<<x<<" "<<leftIsTop<<" with "<<moves.size()<<" moves done\n";

    if(leftIsTop && x == 0){

        int rr = r;
        while(rr >= l && arr[rr] == 0)  rr--;

        if(rr == l-1)   return;

        int ll = l;
        while(ll <= r && arr[ll] == 0){
            arr[ll] = 1;
            ll++;
        }

        if(ll > l)  moves.pb(ll-l);
        moves.pb(rr-l+1);
        func(l, rr, 1^x, false);
    }

    if(leftIsTop && x == 1){
    
        int rr = r;
        while(rr >= l && arr[rr] == 1)  rr--;

        if(rr == l-1)   return;

        int ll = l;
        while(ll <= r && arr[ll] == 1){
            arr[ll] = 0;
            ll++;
        }

        if(ll > l)  moves.pb(ll-l);
        moves.pb(rr-l+1);
        func(l, rr, 1^x, false);
    }

    if(!leftIsTop && x == 0){
        
        int ll = l;
        while(ll <= r && arr[ll] == 0)  ll++;

        if(ll == r+1)   return;

        int rr = r;
        while(rr >= l && arr[rr] == 0){
            arr[rr] = 1;
            rr--;
        }

        if(rr < r)  moves.pb(r-rr);

        if(ll > l)  moves.pb(ll-l);
        moves.pb(r-ll+1);
        func(ll, r, 1^x, true);
    }

    if(!leftIsTop && x == 1){
    
        int ll = l;
        while(ll <= r && arr[ll] == 1)  ll++;

        if(ll == r+1)   return;

        int rr = r;
        while(rr >= l && arr[rr] == 1){
            arr[rr] = 0;
            rr--;
        }

        if(rr < r)  moves.pb(r-rr);
        moves.pb(r-ll+1);
        func(ll, r, 1^x, true); 
    }
}


int main()
{
    // ios_base::sync_with_stdio(0);
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    scanf("%d", &n1);
    for(int i=1;i<=n1;i++)
        scanf("%d", &arr1[i]);
    scanf("%d", &n2);
    for(int i=1;i<=n2;i++)
        scanf("%d", &arr2[i]);

    n = n1+n2;
    int ptr1 = n1, ptr2 = n2, turn = 0;
    while(ptr1>=1 || ptr2>=1){

        while(ptr1 >= 1 && arr1[ptr1] == turn){
            arr[n] = turn;
            deck[n] = ptr1;
            ptr1--; n--;
        }

        while(ptr2 >= 1 && arr2[ptr2] == turn){
            arr[n] = turn;
            deck[n] = n1+ptr2;
            ptr2--; n--;
        }

        turn = 1-turn;
    }

    n = n1+n2;
    for(int i=1;i<=n;i++)
        printf("%d ", deck[i]);
    printf("\n");

// for(int i=1;i<=n;i++)    cout<<arr[i]<<" ";cout<<endl;

    func(1, n, 0, true);
    printf("%d\n", (int)moves.size());
    for(int i=0;i<(int)moves.size();i++)
        printf("%d ", moves[i]);
    return 0;
}













