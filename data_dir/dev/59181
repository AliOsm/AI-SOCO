//satyaki3794
#include <bits/stdc++.h>
#include <iomanip>
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)

using namespace std;
typedef long long ll;
typedef pair<int, ll> ii;
typedef pair<int, ii> iii;

ll pwr(ll base, ll p, ll mod = MOD){
ll ans = 1;while(p){if(p&1)ans=(ans*base)%mod;base=(base*base)%mod;p/=2;}return ans;
}


#define UP 0
#define RIGHT 1
#define DOWN 2
#define LEFT 3


int r, c, dist[1003][1003][4];
bool arr[1003][1003][4];

bool valid(int x, int y){
    return (x >= 1 && x <= r && y >= 1 && y <= c);
}

int modulo(int a){
    a %= 4;
    if(a < 0)   a += 4;
    return a;
}

bool allowed(int x1, int y1, int x2, int y2, int iter){

    if(y2 == y1-1){
        int dir1 = modulo(LEFT - iter);
        int dir2 = modulo(RIGHT - iter);
        if(arr[x1][y1][dir1] && arr[x2][y2][dir2])  return true;
        return false;
    }

    if(y2 == y1+1){
        int dir1 = modulo(RIGHT - iter);
        int dir2 = modulo(LEFT - iter);
        if(arr[x1][y1][dir1] && arr[x2][y2][dir2])  return true;
        return false;
    }

    if(x2 == x1+1){
        int dir1 = modulo(DOWN - iter);
        int dir2 = modulo(UP - iter);
        if(arr[x1][y1][dir1] && arr[x2][y2][dir2])  return true;
        return false;
    }

    if(x2 == x1-1){
        int dir1 = modulo(UP - iter);
        int dir2 = modulo(DOWN - iter);
        if(arr[x1][y1][dir1] && arr[x2][y2][dir2])  return true;
        return false;
    }

    assert(0);
    return false;
}


void process(char ch, int i, int j){
    switch(ch){
        case '+':   arr[i][j][LEFT] = arr[i][j][RIGHT] = arr[i][j][UP] = arr[i][j][DOWN] = true;
                    break;
        case '-':   arr[i][j][LEFT] = arr[i][j][RIGHT] = true;
                    break;
        case '|':   arr[i][j][UP] = arr[i][j][DOWN] = true;
                    break;
        case '^':   arr[i][j][UP] = true;
                    break;
        case '>':   arr[i][j][RIGHT] = true;
                    break;
        case '<':   arr[i][j][LEFT] = true;
                    break;
        case 'v':   arr[i][j][DOWN] = true;
                    break;
        case 'L':   arr[i][j][RIGHT] = arr[i][j][UP] = arr[i][j][DOWN] = true;
                    break;
        case 'R':   arr[i][j][LEFT] = arr[i][j][UP] = arr[i][j][DOWN] = true;
                    break;
        case 'U':   arr[i][j][LEFT] = arr[i][j][RIGHT] = arr[i][j][DOWN] = true;
                    break;
        case 'D':   arr[i][j][LEFT] = arr[i][j][RIGHT] = arr[i][j][UP] = true;
                    break;
        case '*':   break;
    }
}


int main()
{
    // ios_base::sync_with_stdio(0);

    scanf("%d%d", &r, &c);
    char str[1004];
    for(int i=1;i<=r;i++){
        scanf("%s", str);
        for(int j=1;j<=c;j++)
            process(str[j-1], i, j);
    }

// for(int i=1;i<=r;i++){
//     for(int j=1;j<=c;j++){
//         for(int k=0;k<4;k++)    cout<<arr[i][j][k]<<" ";cout<<endl;
//     }
// }cout<<endl;

// cout<<allowed(1, 1, 1, 2, 1)<<endl;

    int sx, sy, ex, ey;
    scanf("%d%d%d%d", &sx, &sy, &ex, &ey);

    if(sx == ex && sy == ey){
        printf("0");
        return 0;
    }

    queue<iii> qq;
    memset(dist, -1, sizeof(dist));
    dist[sx][sy][0] = 0;
    qq.push(iii (0, ii (sx, sy)));
    while(!qq.empty()){

        int iter = qq.front().ff;
        int x = qq.front().ss.ff;
        int y = qq.front().ss.ss;
        qq.pop();

        if(dist[x][y][modulo(iter+1)] == -1){
// cout<<"set "<<x<<" "<<y<<" "<<modulo(iter+1)<<" to "<<dist[x][y][iter]+1<<endl;
            dist[x][y][modulo(iter+1)] = dist[x][y][iter]+1;
            qq.push(iii (modulo(iter+1), ii (x, y)));
        }

        for(int i=x-1;i<=x+1;i++)
            for(int j=y-1;j<=y+1;j++)
                if(valid(i, j) && abs(i-x)+abs(j-y)==1)
                    if(dist[i][j][iter] == -1 && allowed(x, y, i, j, iter)){
                        dist[i][j][iter] = dist[x][y][iter]+1;
// cout<<"set "<<i<<" "<<j<<" "<<iter<<" to "<<dist[i][j][iter]<<endl;
                        qq.push(iii (iter, ii (i, j)));
                    }
    }

    int ans = MOD;
    for(int iter=0;iter<4;iter++)
        if(dist[ex][ey][iter] != -1)
            ans = min(ans, dist[ex][ey][iter]);

    if(ans == MOD)  ans = -1;
    printf("%d", ans);
    return 0;
}



