#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;
//kosarajus-directed
const int maxn=4e5;


char val[maxn];
int dp[maxn][26];
int n,m;
vector<int> flist[maxn],rlist[maxn];
int component[maxn],cptr=0;
int visited[maxn];
stack<int> etime;

//dfs for forward graph
void fdfs(int cur,vector<int> adj[]){
    visited[cur]=1;
    for(auto u:adj[cur]){
        if(visited[u]!=1)
            fdfs(u,adj);
    }
    etime.push(cur);
}

//dfs for reverse graph
void rdfs(int cur,vector<int> adj[]){
    visited[cur]=1;
    component[cur]=cptr;
    for(auto u:adj[cur]){
        if(visited[u]!=1)
            rdfs(u,adj);
    }
}

void kosaraju(){
    for(int i=1;i<=n;i++){
        if(visited[i]!=1)
            fdfs(i,flist);
    }
    memset(visited,0,sizeof(visited));
    while(!etime.empty()){
        int cur=etime.top();
        etime.pop();
        if(visited[cur]==1)
            continue;
        rdfs(cur,rlist);
        cptr++;        
    }
}

//end of kosarajus
int maxi=0;


void dfs(int cur){
    visited[cur]=1;
    for(auto u:flist[cur]){
        if(visited[u]==0)
            dfs(u);
        for(int i=0;i<26;i++){
            dp[cur][i]=max(dp[cur][i],dp[u][i]);
            maxi=max(maxi,dp[cur][i]);
        }
    }
    dp[cur][val[cur]-'a']++;
    maxi=max(maxi,dp[cur][val[cur]-'a']);
}

int main()
{
    fastread;
    cin>>n>>m;
    for(int i=1;i<=n;i++){
        cin>>val[i];
    }
    int u,v;
    for(int i=1;i<=m;i++){
        cin>>u>>v;
        if(u==v){
            cout<<-1;
            return 0;
        }
        flist[u].pb(v);
        rlist[v].pb(u);
    }
    kosaraju();
    if(cptr!=n){
        cout<<-1;
        return 0;
    }
    memset(visited,0,sizeof(visited));
    for(int i=1;i<=n;i++){
        if(visited[i]==1)
            continue;
        dfs(i);
    }
    cout<<maxi;
    return 0;
}