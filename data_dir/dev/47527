#include<bits/stdc++.h>
#define x first
#define y second
using namespace std;
const int MXN = 1e6 + 10;
int n, m, t, r, p, s, ts, M[MXN], P[MXN];
long long Mx, C[MXN], dp[MXN];
pair < int , int > F[MXN];
vector < pair < int , int > > V[MXN], VT[MXN];
long long Calc(int v)
{
    long long le = 0, ri = v, mid;
    while (ri - le > 1)
    {
        mid = (le + ri) / 2;
        if (1ll * mid * (mid + 1) <= 1ll * v * 2)
            le = mid;
        else
            ri = mid;
    }
    return (1ll * v * (le + 1) - 1ll * (le + 2) * (le + 1) * le / 6);
}
int DFS(int nd)
{
    M[nd] = 1;
    for (int i = 0; i < (int)V[nd].size(); i++)
    {
        if (M[V[nd][i].x] == 0)
            DFS(V[nd][i].x);
    }
    F[nd].x = ts ++;
    return (0);
}
int DFS2(int nd, int cm)
{
    M[nd] = 1;
    P[nd] = cm;
    for (int i = 0; i < (int)VT[nd].size(); i++)
    {
        if (M[VT[nd][i].x] == 0)
            DFS2(VT[nd][i].x, cm);
    }
    return (0);
}
long long DFS3(int nd)
{
    long long c = 0;
    for (int i = 0; i < (int)VT[nd].size(); i++)
    {
        if (dp[VT[nd][i].x] != -1)
            c = max(c, dp[VT[nd][i].x] + VT[nd][i].y);
        else
            c = max(c, DFS3(VT[nd][i].x) + VT[nd][i].y);
    }
    dp[nd] = c + C[nd];
    return (dp[nd]);
}
int main()
{
    scanf("%d%d", &n, &m);
    for (int i = 0; i < m; i++)
    {
        scanf("%d%d%d", &r, &t, &p);
        V[r].push_back(make_pair(t, p));
        VT[t].push_back(make_pair(r, p));
    }
    scanf("%d", &s);
    for (int i = 1; i <= n; i++)
    {
        F[i].y = i;
        if (M[i] == 0)
            DFS(i);
    }
    sort(F + 1, F + n + 1);
    reverse(F + 1, F + n + 1);
    for (int i = 1; i <= n; i++)
        M[i] = 0;
    r = 1;
    for (int i = 1; i <= n; i++)
    {
        if (M[F[i].y] == 1)
            continue;
        DFS2(F[i].y, r ++);
    }
    for (int i = 1; i <= n; i++)
    {
        VT[i].clear();
        dp[i] = -1;
    }
    for (int i = 1; i <= n; i++)
    {
        for (int j = 0; j < (int)V[i].size(); j++)
        {
            if (P[i] == P[V[i][j].x])
            {
                C[P[i]] += Calc(V[i][j].y);
                continue;
            }
            VT[P[i]].push_back(make_pair(P[V[i][j].x], V[i][j].y));
        }
    }
    Mx = DFS3(P[s]);
    printf("%I64d", Mx);
}
