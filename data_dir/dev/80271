// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC optimize("Ofast")
// #pragma GCC target("avx,avx2,fma")
 
#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define int long long
 
using namespace __gnu_pbds;
using namespace std;
 
template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
 
//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k
 
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;
 
void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}
 
const int INF = (int)1e18;
 
int t;
VI pr;
 
bool isp(int x) {
  if (x < 2)
    return false;
  for (int i = 2; i*i <= x; ++i)
    if (x%i == 0)
      return false;
  return true;
}
 
int ask(int v) {
  int res;
  cout<<"? "<<v<<endl;
  cin >> res;
  return res;
}
 
void ans(int v) {
  cout<<"! "<<v<<endl;
}
 
signed main() {
  // init_ios();
  for (int i = 2; i <= 680; ++i)
    if (isp(i))
      pr.PB(i);
  cin >> t;
  while (t--) {
    VI roz;
    int si = (int)pr.size();
    for (int i = 0; i < si; ++i) {
      int cur = pr[i];
      int j = i;
      while (i+1 < si && cur < INF/pr[i+1]) {
        ++i;
        cur *= pr[i];
      }
      int v = ask(cur);
      for (int k = j; k <= i; ++k)
        if (v%pr[k] == 0)
          roz.PB(pr[k]);
    }
    VI vp;
    // cout<<"roz: ";
    // for (int x: roz)
    //   cout<<x<<", ";
    // cout<<"\n";
    int sir = (int)roz.size();
    int xx = 1;
    for (int i = 0; i < sir; ++i) {
      int val = roz[i];
      while (val <= 1e9)
        val *= roz[i];
      val /= roz[i];
      if (i+1 < sir) {
        ++i;
        int val2 = roz[i];
        while (val2 <= 1e9)
          val2 *= roz[i];
        val2 /= roz[i];
        val *=  val2;
        int v = ask(val);
        int cnt = 0;
        while (v%roz[i-1] == 0) {
          ++cnt;
          v /= roz[i-1];
          xx *= roz[i-1];
        }
        vp.PB(cnt);
        cnt = 0;
        while (v%roz[i] == 0) {
          ++cnt;
          v /= roz[i];
          xx *= roz[i];
        }
        vp.PB(cnt);
      }
      else {
        int v = ask(val);
        int cnt = 0;
        while (v%roz[i] == 0) {
          ++cnt;
          v /= roz[i];
          xx *= roz[i];
        }
        vp.PB(cnt);
      }
    }
    // cout<<"vp: ";
    // for (int x: vp)
    //   cout<<x<<", ";
    // cout<<"\n";
    int res = 1;
    for (int x: vp)
      res *= x+1;
    int coef = 2;
    if (res <= 2)
      coef = 4;
    ans(coef*res);
  }
}