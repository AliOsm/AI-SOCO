/* 
chirag11032000
Chirag Thakur
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using db = double;
using pii = pair < int, int >;
using pll = pair < ll, ll >;

template < typename T > using OrderedSet = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
	cerr << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << " | ";
	__f(comma + 1, args...);
}
#else
#define trace(...)
#endif

#define eb emplace_back
#define mp make_pair
#define mt make_tuple
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()

const db PI = acos(-1);
const ll LINF = LLONG_MAX;
const int INF = INT_MAX, MOD = 1e9 + 7, N = 1e5 + 10;

void testCase();

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	testCase();
	cerr << "Time taken: " << int((clock() * 1000.) / CLOCKS_PER_SEC) << "ms\n";
	return 0;
}

void testCase() {
	int n, m;
	cin >> n >> m;
	vector < int > b(n);
	int mx = -INF;
	for (auto &el: b) {
		cin >> el;
		mx = max(mx, el);
	}
	vector < int > g(m);
	for (auto &el: g) {
		cin >> el;
		if (el < mx) {
			cout << "-1\n";
			return;
		}
	}
	sort(rall(b));
	sort(rall(g));
	vector < int > cnt(n, m);
	int g_ctr = 0, b_ctr = 0;
	while (g_ctr < m && b_ctr < n) {
		if (g[g_ctr] > b[b_ctr]) {
			if (cnt[b_ctr] > 1) {
				--cnt[b_ctr];
				++g_ctr;
			} else {
				++b_ctr;
			}
		} else if (g[g_ctr] == b[b_ctr]) {
			--cnt[b_ctr];
			++g_ctr;
			if (cnt[b_ctr] == 0) {
				++b_ctr;
			}
		} else {
			++b_ctr;
		}
	}
	if (g_ctr != m) {
		cout << "-1\n";
		return;
	}
	ll sum = accumulate(all(g), 0ll);
	for (int i = 0; i < n; ++i) {
		sum += 1ll * b[i] * cnt[i];
	}
	cout << sum << "\n";
}