#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <cstdio>
#include <map>
#include <hash_map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <stack> 
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
#pragma comment (linker, "/STACK:167177216")
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
const int MAX = 2147483647;
const int MAXN = 1000100;
typedef long long LL;
const LL MOD = 1000000000 + 7;

bool erat[MAXN];

int main(int argc, char **argv)
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
    //freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    //freopen("john.in", "r", stdin); freopen("john.out", "w", stdout);
#endif
    int n;
    cin >> n;
    if (n == 3 || n == 5 || n == 7)
    {
        cout << 1<<endl<<n;
        return 0;
    }
    if (n == 4){
        cout << 2 << endl << 2 << " " << 2;
        return 0;
    }
    if (n == 6){
        cout << 3 << endl << 2 << " " << 2 << " " << 2;
        return 0;
    }

    vector<int> primes;

    mems(erat, true);
    for (int i = 2; i * i < MAXN; ++i){
        if (erat[i])
        {
            for (int j = i * i; j < MAXN; j += i){
                erat[j] = false;
            }
        }
    }

    vector<int> ans;
    if (n % 2 == 1)
    {
        ans.push_back(3);
        n -= 3;
    }

    bool prime = true;
    for (int i = 2; i * i <= n; ++i){
        if (n % i == 0) {
            prime = false;
            break;
        }
    }

    if (prime){
        ans.push_back(n);
        cout << ans.size() << endl;
        for (int i = 0; i < ans.size(); ++i){
            cout << ans[i] << " ";
        }
        return 0;
    }

    for (int i = 2; i < MAXN; ++i) if (erat[i]) primes.push_back(i);

    for (int i = 0; i < primes.size(); ++i){
        int need = n - primes[i];

            bool prime = true;
            for (int j = 2; j * j <= need; ++j){
                if (need % j == 0) {
                    prime = false;
                    break;
                }
            }

            if (prime){
                ans.push_back(primes[i]);
                ans.push_back(need);
                cout << ans.size() << endl;
                for (int i = 0; i < ans.size(); ++i){
                    cout << ans[i] << " ";
                }
                return 0;
            }
    }

    return 0;
}