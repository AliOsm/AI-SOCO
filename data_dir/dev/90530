/*
 * Author    : raj1307 - Raj Singh
 * Date      : 14.05.2020
 */
 
#pragma GCC optimize("Ofast")
// #pragma GCC optimize("unroll-loops")
// #define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
using namespace std;
 
#define fio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define fr(i, a, b) for(int i = (a); i < (b); ++i)
#define fb(i, b, a) for(int i = (b); i > (a); --i)
#define fill(x,y) memset(x,y,sizeof(x))
#define rr return 
#define mp make_pair
#define pb push_back
#define sz(x) ((int)x.size())
#define int long long
#define ll long long
#define ld long double
#define S second
#define F first
#define endl "\n"
#define Endl "\n"
#define all(v) (v).begin(), (v).end()
typedef pair<int, int> ii;;
int max(int a,int b){if(a>b) return a; else return b;}
int min(int a,int b){if(a>b) return b; else return a;}
int gcd(int a,int b){ return (b == 0) ? a : gcd(b, a % b);}
inline int lcm(int a,int b){ return a / gcd(a, b) * b;}
inline int normalize(int x,int mod){ x %= mod; if (x < 0) x += mod; return x;}
 
int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};
string abc="abcdefghijklmnopqrstuvwxyz";
const double PI=acosl(-1);
const int mod = 1000*1000*1000+7;
//const int mod = 998244353;
const int inf = 1e18 +5;
 
//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }
 
int floor1(int n,int k){
    if(n%k == 0 || n >= 0)return n/k;
    return (n/k)-1;
}
 
int ceil1(int n,int k){
    return floor1(n+k-1,k);
}
 
int powm(int a, int b) {
	int res=1;
	while(b) {
		if(b&1)
			res=(res*a)%mod;
		a=(a*a)%mod;
		b>>=1;
	}
	return res;
}
 
 
const int N = 2e5 + 5;

 
int n,m;
int a[N];

int ans[N];



void solve(){   
        


	cin>>n;


	fr(i,1,n+1) ans[i]=0;

	multiset< pair<int,pair<int,int>> >s;
	multiset<int>ma;
	s.insert({n,{1,n}});
	ma.insert(n);
	int mx=n;

	if(n==1){
		cout<<1<<endl;
		return;
	}
	int num=1;
	int cnt=0;
	while(cnt!=n){

		// if(cnt==2){
		// 	cout<<sz(ma)<<endl;
		// 	return;
		// }

		int mx=*ma.rbegin();
		//cout<<sz(ma)<<" ^"<<endl;
		auto it=s.lower_bound({mx,{0,0}}); 		
		pair<int,pair<int,int>> x=*it;

		int val=x.F;
		int l=x.S.F;
		int r=x.S.S;
		s.erase(it);
		//cout<<sz(ma)<<" |"<<endl;
		auto i2=ma.lower_bound(mx); 		
		ma.erase(i2);
		//cout<<sz(ma)<<" |"<<endl;
		//cout<<l<<" "<<r<<" "<<num<<" "<<(l+r)/2<<endl;
		int mid=(l+r)/2;
		ans[mid]=num;
		++cnt;
		num++;
		// if(cnt==2){
		// 	cout<<l<<" # "<<r<<" "<<sz(ma)<<endl;

		// }
		if(l<=mid-1){
			//cout<<"i"<<endl;
			s.insert({mid-l,{l,mid-1}});
			ma.insert(mid-l);
		}
		if(mid+1<=r){
			//cout<<"j"<<" "<<r-mid<<" "<<mid+1<<" "<<r<<endl;
			s.insert({r-mid,{mid+1,r}});
			ma.insert(r-mid);
			// if(cnt==1)
			// cout<<sz(ma)<<" |"<<endl;
		}	

		// if(cnt==2)
		// 	return;
	}






	fr(i,1,n+1) cout<<ans[i]<<" ";
	cout<<endl;
















    
}
 
 
 
 
signed main() {
	fio;
	#ifndef ONLINE_JUDGE 
    	freopen("input.txt", "r", stdin); 
    	freopen("output.txt", "w", stdout); 
    	//freopen("error.txt", "w", stderr); 
	#endif 
	cout<<fixed<<setprecision(10);
	int t=1;
	cin>>t;  // UNCOMMENT FOR TEST-CASES
	//precompute();
	while(t--) {
		solve();
	}	
	return 0;
}
 
 