/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

const int N = 1e3 + 5;
vector<int> adj[N], vec;
int n, m, c, mark[N], dp[N], mid[N], a[N];

inline bool cmp(int i, int j) {
	return dp[i] > dp[j];
}

void dfs_d(int u, int par = -1) {
	vec.push_back(u);
	if (vec.size() > dp[c]) {
		dp[c] = vec.size();
		mid[c] = vec[vec.size() >> 1];
	}
	for (auto v: adj[u])
		if (v ^ par)
			dfs_d(v, u);
	vec.pop_back();
}

void dfs_c(int u, int par = -1) {
	mark[u] = c;
	if (adj[u].size() <= 1)
		dfs_d(u);
	for (auto v: adj[u])
		if (v ^ par)
			dfs_c(v, u);
}

inline void readInput() {
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int u, v;
		cin >> u >> v;

		u--, v--;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
}

inline void solve() {
	memset(mark, -1, sizeof mark);
	for (int u = 0; u < n; u++)
		if (!~mark[u]) {
			dfs_c(u);
			c++;
		}
	iota(a, a + c, 0);
	sort(a, a + c, cmp);
}

inline void writeOutput() {
	int ans = dp[a[0]] - 1;
	if (c >= 2)
		ans = max(ans, dp[a[0]] / 2 + dp[a[1]] / 2 + 1);
	if (c >= 3)
		ans = max(ans, dp[a[1]] / 2 + dp[a[2]] / 2 + 2);
	cout << ans << endl;
	for (int i = 1; i < c; i++)
		cout << mid[a[i]] + 1 << ' ' << mid[a[0]] + 1 << endl;
}

int main() {
	ios_base:: sync_with_stdio(0), cin.tie(0), cout.tie(0);
	readInput(), solve(), writeOutput();
	return 0;
}
