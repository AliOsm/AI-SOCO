#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma comment(linker, "/STACK:2000000")

#include "bits/stdc++.h"

using namespace std;

template<int D, typename T>
struct Vec : public vector<Vec<D - 1, T>> {
  static_assert(D >= 1, "Vector dimension must be greater than zero!");
  template<typename... Args>
  Vec(int n = 0, Args... args) : vector<Vec<D - 1, T>>(n, Vec<D - 1, T>(args...)) {
  }
};
template<typename T>
struct Vec<1, T> : public vector<T> {
  Vec(int n = 0, T val = T()) : vector<T>(n, val) {
  }
};

#define pb push_back
#define F first
#define S second
#define f(i,a,b)  for(int i = a; i < b; i++)
// #define endl '\n'
using ll = long long;
using db = long double;
using ii = pair<int, int>;

const int N = 1e5+5, LG = 19, MOD = 998244353;
const int SQ = 550;
const long double EPS = 1e-7;
void printCase(int cs){cout << "Case #"<<cs<<": ";}
int n;
vector<int> adj[N];
vector<ii> ans;
void dfs(int node, int par, int tim){
  ans.pb(ii(node, tim));
  int deg = adj[node].size() + (node == par);
  if(tim > deg)
    ans.push_back(ii(node, (tim -= deg))),deg = INT_MAX;
  for(auto child : adj[node])
    if(child != par){
      if(tim == deg)
        ans.pb(ii(node, (tim = 0)));
      dfs(child, node, tim + 1);
      ans.push_back(ii(node,++tim));
    }
  if(tim == deg)
    ans.pb(ii(node, (tim = 0)));
}
int32_t main(){
#ifdef ONLINE_JUDGE
    ios_base::sync_with_stdio(0);
    cin.tie(0);
#endif // ONLINE_JUDGE

  cin >> n;
  f(i,1,n){
    int u, v;
    cin >> u >> v;
    adj[u].pb(v);
    adj[v].pb(u);
  }

  dfs(1, 1, 0);

  cout << ans.size() << '\n';

  for(auto x : ans)cout << x.F << ' ' << x.S << '\n';

  return 0;
}
