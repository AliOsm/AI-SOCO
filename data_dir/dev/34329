#pragma GCC optimize ("O3")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define ff first
#define ss second
#define ll long long
#define ld long double
#define endl '\n'
#define all(a) a.begin(),a.end()
#define ull unsigned long long
#define pb push_back
#define mp make_pair
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define iter set<int>::iterator
#define int long long
using namespace std;
using namespace __gnu_pbds;

template<class T>
using ordered_set=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

template<class T>
using ordered_multiset=tree<T,null_type,less_equal<T>,rb_tree_tag,tree_order_statistics_node_update>;

//find_by_order
//order_of_key

mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rnd1(chrono::steady_clock::now().time_since_epoch().count());

const int N=6e5+7;
const int inf=1e18+5;
const int mod=1e9+7;

int dp[16777216];

main ()
{
    ios;
    int n;
    cin>>n;
    for (int i=1;i<=n;++i){
        string s;
        cin>>s;
        vector<int>d;
        for (int j=0;j<s.size();++j){
            int num=s[j]-'a';
            d.pb(num);
        }
        sort(all(d));
        d.erase(unique(all(d)),d.end());
        if (d.size()==1){
            int mask=(1LL<<d[0]);
            dp[mask]++;
        }
        else if (d.size()==2){
            int mask=(1LL<<d[0]);
            dp[mask]++;
            mask=(1LL<<d[1]);
            dp[mask]++;
            mask=(1LL<<d[0])+(1LL<<d[1]);
            dp[mask]--;
        }
        else {
            int sum=0;
            for (int i=0;i<d.size();++i){
                int mask=(1LL<<d[i]);
                sum+=mask;
                dp[mask]++;
                for (int j=i+1;j<d.size();++j){
                    dp[(mask|(1LL<<d[j]))]--;
                }
            }
            dp[sum]++;
        }
    }
    for (int bit=0;bit<24;++bit){
        for (int mask=0;mask<(1LL<<24);++mask){
            if ((mask&(1LL<<bit))>0){
                dp[mask]+=dp[(mask^(1LL<<bit))];
            }
        }
    }
    int ans=0;
    for (int mask=0;mask<(1LL<<24);++mask){
        int f=dp[mask]*dp[mask];
        ans^=f;
    }
    cout<<ans<<endl;
}
