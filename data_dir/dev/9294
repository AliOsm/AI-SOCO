///Foxi_Doree
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define gcd __gcd
#define time { ios::sync_with_stdio(0); ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); srand(time(0)); }

using namespace std;
using namespace __gnu_pbds;

ifstream in("input.txt");
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair < ll, ll > pll;
typedef pair < double, double > pdd;
typedef vector < ll > vll;
typedef set < ll > sll;
/*
    find_by_order()
    order_of_key()
*/
typedef tree <
ll, null_type,
less < ll >, rb_tree_tag,
tree_order_statistics_node_update > set_t;
const ll inf = 1000000007, oo = 1e6 + 2, o = 4e5 + 2, f = 998244353;

ll a[4][100][100], dp[4];

int main()
{
    time

    ll n, i, j, k;

    cin >> n;

    for(k = 0; k < 4; ++k) {
        for(i = 0; i < n; ++i) {
            for(j = 0; j < n; ++j) {
                char b; cin >> b;
                a[k][i][j] = b - '0';
            }
        }
    }

    for(k = 0; k < 4; ++k) {
        for(i = 0; i < n; ++i) {
            for(j = 0; j < n; ++j) {
                if(i % 2 != 0) {
                    if(j % 2 != 0) {
                        if(a[k][i][j] == 1) ++dp[k];
                    }
                    else {
                        if(a[k][i][j] == 0) ++dp[k];
                    }
                }
                else {
                    if(j % 2 != 0) {
                        if(a[k][i][j] == 0) ++dp[k];
                    }
                    else {
                        if(a[k][i][j] == 1) ++dp[k];
                    }
                }
            }
        }
    }

    ll ans = 1e18;
    for(i = 0; i < 4; ++i) {
        for(j = 0; j < 4; ++j) {
            for(ll l = 0; l < 4; ++l) {
                for(k = 0; k < 4; ++k) {
                    if(i != k && i != l && i != j && j != k && j != l && l != k) {
                        ans = min(ans, dp[i] + 2 * n * n - dp[j] - dp[k] + dp[l]);
                    }
                }
            }
        }
    }
    
    cout << ans;
}
