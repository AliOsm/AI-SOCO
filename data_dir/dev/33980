//marico el que lo lea
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <stdlib.h>
#include <assert.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> ii;

void fastIO() {
	std::ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
}

#define FOR(i,f,t) for(int i=f; i<(int)t; i++)
#define FORR(i,f,t) for(int i=f; i>(int)t; i--)
#define FORE(i,c) for(auto i = (c).begin(); i != (c).end(); i++)
#define pb push_back
#define all(obj) obj.begin(), obj.end()
#define ms(obj, val) memset(obj, val, sizeof(obj))
#define ms2(obj, val, sz) memset(obj, val, sizeof(obj[0])*sz)

#define fst first
#define snd second

template<typename T, typename U> inline void mnze(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void mxze(T &x, U y) { if(x < y) x = y; }

void _scan( int &x ) { scanf("%d",&x); }
void _scan( long long &x ) { scanf("%lld",&x); }
void _scan( double &x ) { scanf("%lf",&x); }
void _scan( char &x ) { scanf(" %c",&x); }
void _scan( char *x ) { scanf("%s",x); }
void scan() {}
template<typename T, typename... U>
void scan( T& head, U&... tail ) { _scan(head); scan(tail...);}

template<typename T> void _dbg(const char* sdbg, T h) { cerr<<sdbg<<"="<<h<<"\n"; }
template<typename T, typename... U> void _dbg(const char* sdbg, T h, U... t) {
	while(*sdbg != ',')cerr<<*sdbg++;
	cerr<<"="<<h<<","; _dbg(sdbg+1, t...);
}

#ifdef LOCAL
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#define debugv(x) {{cerr <<#x <<" = "; FORE(_i, (x)) cerr <<*_i <<", "; cerr <<"\n"; }}
#define debuga(x, sz) {{cerr <<#x <<" = "; FOR(_i, 0, sz) cerr << x[_i] <<", "; cerr <<"\n"; }}
#else
#define debug(...) (__VA_ARGS__)
#define debugv(x)
#define debuga(x, sz)
#define cerr if(0)cout
#endif


///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

const int MAXN = 52;
struct movestr{
	int xi, yi, xf, yf;
};

int n, m;
int xi[MAXN], yi[MAXN], xf[MAXN], yf[MAXN];

bool a[MAXN][MAXN];
bool move(vector<movestr> &ans, int &xx, int &yy, int xf, int yf){
	while(xx != xf){
		int nx;
		if(xf > xx) nx=xx+1;
		else nx=xx-1;
		if(a[nx][yy]) return false;
		a[xx][yy]=false;
		ans.pb({xx,yy,nx,yy});
		xx = nx;
		a[xx][yy]=true;
	}
	while(yy != yf){
		int ny;
		if(yf > yy) ny=yy+1;
		else ny=yy-1;
		if(a[xx][ny]) return false;
		a[xx][yy]=false;
		ans.pb({xx,yy,xx,ny});
		yy = ny;
		a[xx][yy]=true;
	}
	return true;
}

vector<movestr> solve(int *x, int *y){
	vector<movestr> ans;
	vector<pair<ii, int>> pos;
	ms(a, false);
	FOR(i,0,m) a[x[i]][y[i]] = true, pos.pb({ {x[i], y[i]}, i });
	sort(all(pos));

	bool finish=false;
	while(!finish){
		finish = true;
		FOR(i,0,m){
			int xx=pos[i].fst.fst, yy=pos[i].fst.snd;
			finish &= move(ans, xx, yy, i+1, yy);
			pos[i].fst.fst=xx; pos[i].fst.snd=yy;
		}
	}
	FOR(i,0,m){
		int xx=i+1, yy=pos[i].fst.snd, id=pos[i].snd;
		move(ans, xx, yy, xx, id+1);
	}
	FOR(i,0,m){
		int xx=i+1, yy=pos[i].snd+1, id=pos[i].snd;
		move(ans, xx, yy, id+1, yy);
	}
	return ans;
}

int main(){
	scan(n, m);
	FOR(i,0,m) scan(xi[i], yi[i]);
	FOR(i,0,m) scan(xf[i], yf[i]);
	vector<movestr> ans = solve(xi, yi);
	vector<movestr> ans2 = solve(xf, yf);
	printf("%lu\n", ans.size() + ans2.size());
	FOR(i,0,ans.size()){
		printf("%d %d %d %d\n", ans[i].xi, ans[i].yi, ans[i].xf, ans[i].yf);
	}
	reverse(all(ans2));
	FOR(i,0,ans2.size()){
		printf("%d %d %d %d\n", ans2[i].xf, ans2[i].yf, ans2[i].xi, ans2[i].yi);
	}
	printf("\n");
}
