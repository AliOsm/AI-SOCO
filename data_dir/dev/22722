#include <bits/stdc++.h>
using namespace std;
#define sc(x)            scanf("%d",&x)
#define scc(x)           scanf("%c",&x)
#define scl(x)           scanf("%lld",&x)
#define sz(v)	     	(v.size())
#define mem(v, d)		memset(v, d, sizeof(v))
#define oo				2000000100
#define OO				4000000000000000100
#define PI 3.14159265
typedef unsigned int uint;
typedef long long ll;
//-----------------------------------------------------
const int N = 100005;
const ll MOD = 1000000007;

int dX[] = {0,0,1,-1};
int dY[] = {1,-1,0,0};

//ll GCD(ll num,ll ones) { return !ones ? num : GCD(ones,num%ones); }
//ll lcm(ll a, ll b) { return (a / GCD(a, b)) * b; }
//double Len(int x,int y,int X,int Y) { return sqrt((X-x)*(X-x)+(Y-y)*(Y-y)); }
/*ll fastP(ll b,ll p)
{
    if(p==0) return 1;
    else if(p==1) return b;
    ll a = fastP(b,p/2);
    if(p%2) return (((a*a))*b);
    else return (a*a);
}*/
//----------------- ------   -------
int n,m,u,v,dfsID = 1,cst[N],dfsn[N],lowlink[N]; bool InStack[N],vis[N]; ll num = 1,totcst;
vector<int>adj[N]; stack<int>st;
void dfs(int cur)
{
    dfsn[cur] = lowlink[cur] = dfsID++;
    vis[cur] = 1; st.push(cur); InStack[cur] = 1;
    for(int V:adj[cur])
    {
        if(!vis[V]) dfs(V);
        if(InStack[V])
            lowlink[cur] = min(lowlink[cur],lowlink[V]);
    }
    if(lowlink[cur] == dfsn[cur])
    {
        stack<int>tmp; int mn = oo,cnt = 0,x = -1;
        while(x!=cur) x = st.top(),st.pop(),mn = min(mn,cst[x]),tmp.push(x),InStack[x]=0;
        totcst+=mn;
        while(!tmp.empty()) cnt+=(cst[tmp.top()] == mn),tmp.pop();
        num*=cnt; num%=MOD;
    }
}
int main()
{
#ifndef ONLINE_JUDGE
    freopen("i.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    sc(n); for(int i=1;i<=n;++i) sc(cst[i]);
    sc(m); for(int i=0;i<m;++i) sc(u),sc(v),adj[u].push_back(v);
    for(int i=1;i<=n;++i)
        if(!vis[i]) dfs(i);
    printf("%lld %lld",totcst,num);

    return 0;
}
