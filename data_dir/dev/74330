#include <bits/stdc++.h>
using namespace std;
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define int long long  

int n,I;
int arr[500005];
int tree[3000005];
int sums(int i)
{
    int sum = 0; 
    while(i>0)
    {
        sum+=tree[i];
        i-=i&(-i);
    }
    return sum;
}

void update(int i, int val)
{
    while(i<3000004)
    {
       tree[i]+=val;
       i+=i&(-i);
    }
}
int32_t main()
{
	IOS;
	cin>>n>>I;
	I*=8;
	set<int>hs;
	map<int,int>mapit;
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
		hs.insert(arr[i]);
	}
	int ct=1;
	for(int i:hs)
		mapit[i]=ct++;
	for(int i=0;i<n;i++)
		arr[i]=mapit[arr[i]];
	map<int,int>mp;
	for(int i=0;i<n;i++)
		mp[arr[i]]++;
	vector<pair<int,int>>v;
	for(auto i:mp)
	{
		v.push_back({i.first,i.second});
		update(i.first,i.second);
	}
	sort(v.begin(),v.end());
	int maxk=I/n;
	int maxK=1;
	while(maxk!=0 && maxK<=1e6)
	{
		maxK*=2;
		maxk--;
	}
	int minans=1e18;
	int rem=0;
	int sum[v.size()+2]={};
	for(int i=1;i<=v.size();i++)
	{
		sum[i]+=v[i-1].second;
		sum[i]+=sum[i-1];
	}

	for(int i=0;i<v.size();i++)
	{
		int pos=v[i].first+maxK-1;
		int get=sum[v.size()]-sums(pos);
		//cout<<pos<<" "<<rem<<" "<<get<<endl;
		minans=min(minans,rem+get);
		rem+=v[i].second;
	}
	cout<<minans;
}