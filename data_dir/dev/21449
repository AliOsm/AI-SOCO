#include <bits/stdc++.h>
#define LL long long
#define pb push_back
#define fi first
#define sc second
#define mp make_pair
using namespace std;

int n,m,q,x,blocks,idx[100100],intersect[400][100100];
LL a[100100],sum[100100],largeSum[100100],y;
bool found[400][100100];
vector<int> large, v[100100];
char s[10];

int main() {
	scanf("%d %d %d", &n, &m, &q);
	blocks = sqrt(100000);
	for(int i = 1; i <= n; i++) scanf("%lld", &a[i]);
	for(int i = 1; i <= m; i++) {
		int k;
		scanf("%d", &k);
		if(k > blocks) {
			idx[i] = large.size();
			large.pb(i);
		}
		for(int j = 0; j < k; j++) {
			scanf("%d", &x);
			v[i].pb(x);
			if(k > blocks) {
				found[idx[i]][x] = true;
				sum[idx[i]] += a[x];
			}
		}
	}
	for(int i = 0; i < large.size(); i++) {
		for(int j = 1; j <= m; j++) {
			for(int k = 0; k < v[j].size(); k++) {
				if(found[i][v[j][k]]) intersect[i][j]++;
			}
		}
	}
	while(q--) {
		scanf("%s", s);
		if(s[0]=='+') {
			scanf("%d %lld", &x, &y);
			if(v[x].size() > blocks) largeSum[idx[x]] += y;
			else {
				for(int i = 0; i < v[x].size(); i++) a[v[x][i]] += y;
				for(int i = 0; i < large.size(); i++) {
					sum[i] += y * intersect[i][x];
				}
			}
		}
		else {
			scanf("%d", &x);
			LL ans = 0;
			if(v[x].size() > blocks) ans += sum[idx[x]];
			else {
				for(int i = 0; i < v[x].size(); i++) ans += a[v[x][i]];
			}
			for(int i = 0; i < large.size(); i++) {
				ans += largeSum[i] * intersect[i][x];
			}
			printf("%lld\n", ans);
		}
	}
	return 0;
}