// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

int t, a, b, c, d, x, y, xx[2], yy[2];

int main() {
  init_ios();
  cin >> t;
  while (t--) {
    cin >> a >> b >> c >> d >> x >> y >> xx[0] >> yy[0] >> xx[1] >> yy[1];
    if (xx[0] == xx[1] && max(a, b) >= 1) {
      cout<<"NO\n";
      continue;
    }
    int mn = min(a, b);
    a -= mn;
    b -= mn;
    if (x-a < xx[0]) {
      cout<<"NO\n";
      continue;
    }
    if (x+b > xx[1]) {
      cout<<"NO\n";
      continue;
    }
    if (yy[0] == yy[1] && max(c, d) >= 1) {
      cout<<"NO\n";
      continue;
    }
    mn = min(c, d);
    c -= mn;
    d -= mn;
    if (y-c < yy[0]) {
      cout<<"NO\n";
      continue;
    }
    if (y+d > yy[1]) {
      cout<<"NO\n";
      continue;
    }
    cout<<"YES\n";
  }
}