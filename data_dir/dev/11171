//~In The Name Of Allah~//
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <iomanip>
#include <math.h>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <string.h>
#include <sstream>
#include <fstream>
#include <functional>
#include <stack>
#include <utility> 
#include <set>
#include <list>
#include <queue>
#include <bitset>
#include <time.h>

using namespace std;

#define read freopen("in.txt", "r", stdin)
#define write freopen("out.txt", "w", stdout)
#define all(_) _.begin(), _.end()
#define rall(_) _.rbegin(), _.rend()
#define rep(i, j) for (int i = 0; i < j; i++)
#define Rep(i, j, k) for (int i = j; i < k; i++)
#define siz(_) (int)_.size()
#define ll long long
#define endl '\n'

const double PI = 2.0 * acos(0.0);
const int MOD = 1e9 + 7;
const int oo = MOD;

typedef pair<int, int> pii;

ll gcd(ll x, ll y) { return !y ? x : gcd(y, x%y); }

const int mx = 1e3 + 5;
int grid[mx][mx], x[mx][mx], y[mx][mx];
bool vis[mx];

int main() {
	int n, k, ans = 0;
	cin >> n >> k;
	int a, b;
	rep(i, k) {
		scanf("%d%d", &a, &b);
		grid[a][b] = 1;
	}
	Rep(i, 1, n + 1) Rep(j, 1, n + 1) {
		x[i][j] = x[i - 1][j] + grid[i][j];
		y[i][j] = y[i][j - 1] + grid[i][j];
	}
	Rep(i, 2, n) if (!x[n][i])
		++ans;
	Rep(i, 2, n) {
		if (!y[i][n] && !x[n][i] && n % 2 && i == n / 2 + 1)
			continue;
		if (!y[i][n])
			++ans;
	}
	cout << ans << endl;
	return 0;
}