/*
digu_J - Digvijay Janartha
NIT Hamirpur - INDIA
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#pragma GCC optimize("O3")

using namespace std;
using namespace __gnu_pbds;

template < typename T > using ordered_set = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifdef HOME
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
    cout << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
    const char* comma = strchr(names + 1, ',');
    int len = comma - names;
    for (int i = 0; i < len; ++i) {
        cout << names[i];
    }
    cout <<  " : " << arg1 << " | ";
    __f(comma + 1, args...);
}
#else
#define trace(...)
#endif

typedef double db;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair < ll, ll > pll;
typedef pair < int, int > pii;
typedef vector < ll > vll;
typedef vector < int > vi;
typedef complex < double > com;

#define eb emplace_back
#define pb push_back
#define F first
#define S second
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define unique_sort(x) (sort(x.begin(), x.end()), x.resize(distance(x.begin(), unique(x.begin(), x.end()))))
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const ll LINF = LLONG_MAX, base = 1e9, MOD = 1e9 + 7, N = 1e5 + 5, M = 1e3 + 5, LG = 20;
const int INF = INT_MAX;
const db PI = acos(-1), EPS = 1 / db(1e6);
mt19937_64 rang(chrono::high_resolution_clock::now().time_since_epoch().count());

int a[N], cnt[N];

void test() {
    int n, k;
    cin >> n >> k;
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        ++cnt[a[i]];
    }
    if (k >= 3) {
        ll ans = 0;
        for (ll i = 1, z = 1; i <= 1e10; i = 1ll * pow(z, ll(k))) {
            ++z;
            for (int j = 0; j < n; ++j) {
                if (i % a[j] == 0) {
                    ll cur = i / a[j];
                    if (cur < N) {
                        ans += cnt[cur];
                        if (cur == a[j]) {
                            --ans;
                        }
                    }
                }
            }
            if (k > 35) {
                break;
            }
        }
        cout << ans / 2 << "\n";
        return;
    }
    ll ans = 0, temp = 1;
    for (int i = 1; temp <= 1e10; ++i, temp = pow(i, k)) {
        vi div;
        for (int j = 1; j * j <= i; ++j) {
            if (i % j == 0) {
                if (j * j != i) {
                    div.eb(i / j);
                }
                div.eb(j);
            }
        }
        sort(all(div));
        vi tot;
        for (int u = 0; u < div.size(); ++u) {
            for (int v = u; v < div.size(); ++v) {
                ll cur = 1ll * div[v] * div[u];
                if (cur <= i) {
                    tot.eb(int(cur));
                } else {
                    break;
                }
            }
        }
        unique_sort(tot);
        for (auto &x: tot) {
            if (cnt[x] and temp / x < N) {
                if (x == temp / x) {
                    ans += (1ll * cnt[x] * (cnt[x] - 1)) / 2;
                } else {
                    if (cnt[temp / x]) {
                        ans += 1ll * cnt[temp / x] * cnt[x];
                    }
                }
            }
        }
    }
    cout << ans << "\n";
}

int main() {
    fast_io();
    #ifdef HOME
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    cout << fixed << setprecision(15);
    test();
    #ifdef HOME
        cout << "Time: " << (int)(clock() * 1000. / CLOCKS_PER_SEC) << "ms";
    #endif
    return 0;
}
