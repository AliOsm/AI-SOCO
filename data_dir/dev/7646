#include <bits/stdc++.h>
using namespace std;

#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()

using ll = long long;
using ld = long double;

// unions[i] >= 0 => unions[i] = parent
// unions[i]  < 0 => unions[i] = -height
vector<int> unions;

void init(int n) { //Initialisieren
    unions.assign(n, -1);
}

int findSet(int n) { // Pfadkompression
    if (unions[n] < 0) return n;
    return unions[n] = findSet(unions[n]);
}

void linkSets(int a, int b) { // Union by rank.
    if (unions[a] > unions[b]) unions[a] = b;
    else if (unions[b] > unions[a]) unions[b] = a;
    else {
        unions[a] = b;
        unions[b]--;
}}

void unionSets(int a, int b) { // Diese Funktion aufrufen.
    if (findSet(a) != findSet(b)) linkSets(findSet(a), findSet(b));
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    ll n, m;
    cin >> n >> m;
    vector<vector<ll>> adj(n);
    for (ll i = 0; i < m; i++) {
        ll a, b;
        cin >> a >> b;
        a--;
        b--;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    ll best = 0;
    for (ll i = 0; i < n; i++) {
        if (sz(adj[i]) > sz(adj[best])) best = i;
    }
    init(n);
    for (ll i : adj[best]) {
        cout << best+1 << " " << i+1 << endl;
        unionSets(i, best);
    }
    for (ll i = 0; i < n; i++) {
        for (ll j : adj[i]) {
            if (findSet(i) != findSet(j)) {
                unionSets(i, j);
                cout << i+1 << " " << j+1 << endl;
            }
        }
    }
}
