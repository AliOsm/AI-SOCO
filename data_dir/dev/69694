#include<bits/stdc++.h>
#define pb push_back
#define x first
#define y second
using namespace std;
const int N = 1e5 + 10;
int n, q, dp[255][255][255], nxt[N][26];
string A, S[4];
inline void smin(int &a, int b) {a = min(a, b);}
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    cin >> n >> q >> A;
    for (int i = 0; i < 26; i++)
        nxt[n][i] = n, nxt[n + 1][i] = n;
    for (int i = n - 1; ~i; i--)
    {
        for (int j = 0; j < 26; j++)
            nxt[i][j] = nxt[i + 1][j];
        nxt[i][A[i] - 'a'] = i;
    }
    for (int i = 0; i < 255; i++)
        for (int j = 0; j < 255;j ++)
            for (int k = 0; k < 255; k++)
            dp[i][j][k] = n + 1;
    dp[0][0][0] = 0;
    for (; q; q --)
    {
        int id;
        char tp, ch;
        cin >> tp >> id;
        if (tp == '+')
        {
            cin >> ch;
            ch -= 'a';
            S[id] += ch;

            int ss[4] = {0, 0, 0, 0};
            ss[id] = S[id].size();

            for (int i = ss[1]; i <= S[1].size(); i++)
                for (int j = ss[2]; j <= S[2].size(); j++)
                    for (int k = ss[3]; k <= S[3].size(); k++)
                    {
                        if (!i && !j && !k)
                            dp[i][j][k] = 0;
                        else
                            dp[i][j][k] = n + 1;
                        if (i > 0) smin(dp[i][j][k], nxt[dp[i-1][j][k]][S[1][i-1]] + 1);
                        if (j > 0) smin(dp[i][j][k], nxt[dp[i][j-1][k]][S[2][j-1]] + 1);
                        if (k > 0) smin(dp[i][j][k], nxt[dp[i][j][k-1]][S[3][k-1]] + 1);
                    }

        }
        else
            S[id].pop_back();

        if (dp[S[1].size()][S[2].size()][S[3].size()] <= n)
            printf("YES\n");
        else
            printf("NO\n");
    }
    return (0);
}