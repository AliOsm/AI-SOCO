//be naame khodaa

#include <bits/stdc++.h>

typedef long long ll;

using namespace std;

struct mat
{
	int n, a[105][105];
	mat () {}
	mat (int n_)
	{
		n = n_;
		for (int i = 0; i < n; i++)
			fill(a[i], a[i] + n, -1);
	}
};

mat merge(int n, mat A, mat B)
{
	mat C(A.n);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
		{
			C.a[i][j] = -1;
			for (int k = 0; k < n; k++)
				if (A.a[i][k] != -1 && B.a[k][j] != -1)
					C.a[i][j] = max(C.a[i][j], A.a[i][k] + B.a[k][j]);
		}
	return C;
}

int solve(int n, int t, mat b)
{
	bool f = true;
	mat ans(n);
	while (t)
	{
		if (t&1)
		{
			if (f) ans = b, f = false;
			else ans = merge(n, ans, b);
		}
		t /= 2;
		b = merge(n, b, b);
	}
	int mx = 0;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			mx = max(mx, ans.a[i][j]);
	return mx;
}

int main()
{
	ios_base::sync_with_stdio(false);
	int n, t;
	int a[105];
	cin >> n >> t;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	mat b(n);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
		{
			if (a[j] < a[i]) continue;
			b.a[i][j] = 0;
			for (int k = 0; k < j; k++)
				if (a[k] <= a[j] && b.a[i][k] != -1)
					b.a[i][j] = max(b.a[i][j], b.a[i][k]);
			b.a[i][j]++;
		}
	cout << solve(n, t, b) << endl;
    return 0;
}
