/*
author: madhav_1999 aka orthodoxparadox
25-May-2019
03:55:13
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define sz(x) ((long long) x.size())
#define pii pair<int, int>
#define fup(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define len(x) sz(x)
#define fnu for(ll i = 0; i < n; i++)
#define trav(x, v) for(auto &x : v)
#define rev(Y) reverse(all(Y))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#define inf 2e18
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef __APPLE__
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...)
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int mod = 1e9 + 7;

int takemod(int a){return ((a%mod)+mod)%mod;}

int fast_exp(int base, int expo) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a){return takemod(fast_exp(takemod(a), mod-2));}


void solve()
{
	int n;
	cin >> n;
	int a[n];
	for(int i = 0; i < n; i++) cin >> a[i];
	int k;
	cin >> k;
	int b[k];
	for(int i = 0; i < k; i++) cin >> b[i];
	if(accumulate(a, a + n, 0LL) != accumulate(b, b + k, 0LL))
	{
		dbg("LMAO3");
		cout << "NO";
		return;
	}
	int it = 0, curs = 0;
	vector<vector<int>> v;
	vector<int> t;
	for(int i = 0; i < n; i++)
	{
		if(curs < b[it])
		{
			curs += a[i];
			t.pb(a[i]);
			continue;
		}
		else if(curs == b[it])
		{
			v.pb(t);
			t.clear();
			t.pb(a[i]);
			curs = a[i];
			it++;
			continue;
		}
		else
		{
			dbg("LMAO2");
			cout << "NO";
			return;
		}
	}
	v.pb(t);
	int idx = 0;
	vector<pair<int, char>> res;
	for(int i = 0; i < v.size(); i++)
	{
		vector<int> t = v[i];
		while(t.size() > 1)
		{
			int maxi = -inf;			
			for(int j = 0; j < t.size(); j++)
			{
				maxi = max(maxi, t[j]);
			}
			dbg(maxi);
			bool flag = false;
			for(int j = 0; j < t.size(); j++)
			{
				if(t[j] != maxi) continue;
				if(j != 0 && t[j - 1] < t[j])
				{
					flag = true;
					// cout << idx + j << " L" << endl;
					res.pb(mp(idx + j + 1, 'L'));
					t[j] += t[j - 1];
					t.erase(t.begin() + j - 1);
					break;
				}
				if(j != t.size() - 1 && t[j + 1] < t[j])
				{
					flag = true;
					// cout << idx + j << " R" << endl;
					res.pb(mp(idx + j + 1, 'R'));
					t[j] += t[j + 1];
					t.erase(t.begin() + j + 1);
					break;
				}
			}
			if(!flag)
			{
				dbg("LMAO");
				cout << "NO";
				return;
			}
		}
		idx++;
	}
	cout << "YES\n";
	for(auto r : res)
	{
		cout << r << endl;
	}
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef __APPLE__
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	clock_t t1, t2;
	t1 = clock();

	int t = 1;
	// cin >> t;
	while(t--)
	{
		solve();
	}
	t2 = clock(); cerr << "time taken: " << (t2-t1)/(dbl)CLOCKS_PER_SEC;
	return 0;
}