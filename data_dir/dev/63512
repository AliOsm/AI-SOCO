// eddy1021
#pragma GCC optimize("O3")
#include <bits/stdc++.h>
using namespace std;
typedef double D;
typedef long double LD;
typedef long long LL;
typedef pair<int,int> PII;
typedef pair<LL,LL> PLL;
#define mod9 1000000009LL
#define mod7 1000000007LL
#define INF  1023456789LL
#define INF16 10000000000000000LL
#define eps 1e-9
#define SZ(x) (int)(x).size()
#define ALL(x) (x).begin(), (x).end()
#ifndef ONLINE_JUDGE
#define debug(...) printf(__VA_ARGS__)
#else 
#define debug(...)
#endif
inline LL getint(){
  LL _x=0,_tmp=1; char _tc=getchar();    
  while( (_tc<'0'||_tc>'9')&&_tc!='-' ) _tc=getchar();
  if( _tc == '-' ) _tc=getchar() , _tmp = -1;
  while(_tc>='0'&&_tc<='9') _x*=10,_x+=(_tc-'0'),_tc=getchar();
  return _x*_tmp;
}
inline LL add( LL _x , LL _y , LL _mod = mod7 ){
  _x += _y;
  return _x >= _mod ? _x - _mod : _x;
}
inline LL sub( LL _x , LL _y , LL _mod = mod7 ){
  _x -= _y;
  return _x < 0 ? _x + _mod : _x;
}
inline LL mul( LL _x , LL _y , LL _mod = mod7 ){
  _x *= _y;
  return _x >= _mod ? _x % _mod : _x;
}
LL mypow( LL _a , LL _x , LL _mod ){
  if( _x == 0 ) return 1LL;
  LL _ret = mypow( mul( _a , _a , _mod ) , _x >> 1 , _mod );
  if( _x & 1 ) _ret = mul( _ret , _a , _mod );
  return _ret;
}
LL mymul( LL _a , LL _x , LL _mod ){
  if( _x == 0 ) return 0LL;
  LL _ret = mymul( add( _a , _a , _mod ) , _x >> 1 , _mod );
  if( _x & 1 ) _ret = add( _ret , _a , _mod );
  return _ret;
}
inline bool equal( D _x ,  D _y ){
  return _x > _y - eps && _x < _y + eps;
}
#define Bye exit(0)
int __ = 1 , _cs;
/*********default*********/
#define N 101010
void build(){

}
LL st[ N << 2 ] , st2[ N << 2 ];
int he[ N << 2 ];
#define L(X) (X<<1)
#define R(X) (1+(X<<1))
#define mid ((l+r)>>1)
void build_st( int no , int l , int r ){
  st[ no ] = INF16;
  he[ no ] = l;
  if( l == r ) return ;
  build_st( L( no ) , l , mid );
  build_st( R( no ) , mid + 1 , r );
}
void build_st2( int no , int l , int r ){
  st2[ no ] = INF16;
  if( l == r ) return ;
  build_st2( L( no ) , l , mid );
  build_st2( R( no ) , mid + 1 , r );
}
void modify( int no , int l , int r , int p , LL v ){
  if( l == r ){
    st[ no ] = v;
    he[ no ] = l;
    return;
  }
  if( p <= mid ) modify( L( no ) , l , mid , p , v );
  else modify( R( no ) , mid + 1 , r , p , v );
  if( st[ L( no ) ] > st[ R( no ) ] ){
    st[ no ] = st[ L( no ) ];
    he[ no ] = he[ L( no ) ];
  }else{
    st[ no ] = st[ R( no ) ];
    he[ no ] = he[ R( no ) ];
  }
}
void modify2( int no , int l , int r , int p , LL v ){
  if( l == r ){
    st2[ no ] = v;
    return;
  }
  if( p <= mid ) modify2( L( no ) , l , mid , p , v );
  else modify2( R( no ) , mid + 1 , r , p , v );
  st2[ no ] = min( st2[ L( no ) ] , st2[ R( no ) ] );
}
pair<int,LL> query( int no , int l , int r , int ql , int qr ){
  if( l == ql and r == qr ) return { he[ no ] , st[ no ] };
  if( qr <= mid ) return query( L( no ) , l , mid , ql , qr );
  if( mid < ql ) return query( R( no ) , mid + 1 , r , ql , qr );
  auto lhs = query( L( no ) , l , mid , ql , mid );
  auto rhs = query( R( no ) , mid + 1 , r , mid + 1 , qr );
  if( lhs.second > rhs.second ) return lhs;
  return rhs;
}
LL query2( int no , int l , int r , int ql , int qr ){
  if( r < ql or qr < l ) return INF16;
  if( ql <= l and r <= qr ) return st2[ no ];
  return min( query2( L( no ) , l , mid , ql , qr ) ,
              query2( R( no ) , mid + 1 , r , ql , qr ) );
}
int n , q , s;
int t[ N ] , w[ N ] , l[ N ] , r[ N ] , v[ N ] , u[ N ];
vector<int> g[ N ] , rg[ N ];
clock_t ss;
void init(){
  s = clock();
  n = getint();
  q = getint();
  s = getint();
  for( int i = 0 ; i < q ; i ++ ){
    t[ i ] = getint();
    if( t[ i ] == 1 ){
      v[ i ] = getint();
      u[ i ] = getint();
      w[ i ] = getint();
    }else{
      v[ i ] = getint();
      l[ i ] = getint();
      r[ i ] = getint();
      w[ i ] = getint();
    }
    if( t[ i ] == 3 )
      rg[ v[ i ] ].push_back( i );
    else
      g[ v[ i ] ].push_back( i );
  }
}
LL dst[ N ] , pre[ N ];
void solve(){
  for( int i = 1 ; i <= n ; i ++ ){
    dst[ i ] = INF16;
    pre[ i ] = -1;
  }
  dst[ s ] = 0;
  build_st( 1 , 1 , n );
  build_st2( 1 , 1 , n );
  modify( 1 , 1 , n , s , 0 );
  modify2( 1 , 1 , n , s , 0 );
  for( int _ = 1 ; ; _ ++ ){
    int tn = _ % n;
    if( tn == 0 ) tn = n;
    LL nd = dst[ tn ];
    for( auto idx : rg[ tn ] ){
      LL bst = query2( 1 , 1 , n , l[ idx ] , r[ idx ] );
      nd = min( nd , bst + w[ idx ] );
    }
    if( ( clock() - ss ) > 1.8 * CLOCKS_PER_SEC ) break;
    if( nd < dst[ tn ] ){
      dst[ tn ] = nd;
      modify( 1 , 1 , n , tn , nd );
      modify2( 1 , 1 , n , tn , nd );
    }
    if( dst[ tn ] == pre[ tn ] ) continue;
    pre[ tn ] = dst[ tn ];
    for( auto idx : g[ tn ] ){
      LL cst = dst[ tn ] + w[ idx ];
      if( t[ idx ] == 1 ){
        if( cst < dst[ u[ idx ] ] ){
          dst[ u[ idx ] ] = cst;
          modify( 1 , 1 , n , u[ idx ] , cst );
          modify2( 1 , 1 , n , u[ idx ] , cst );
        }
      }else{
        //printf( "%d %d\n" , tn , idx );
        while( true ){
          auto i = query( 1 , 1 , n , l[ idx ] , r[ idx ] );
          //printf( "--%d %lld\n" , i.first , i.second );
          if( i.second <= cst ) break;
          dst[ i.first ] = cst;
          modify( 1 , 1 , n , i.first , cst );
          modify2( 1 , 1 , n , i.first , cst );
        }
      }
    }
  }
  for( int i = 1 ; i <= n ; i ++ )
    printf( "%lld%c" , dst[ i ] == INF16 ? -1 : dst[ i ] , " \n"[ i == n ] );
}
int main(){
  build();
  //__ = getint();
  while( __ -- ){
    init();
    solve();
  }
}
