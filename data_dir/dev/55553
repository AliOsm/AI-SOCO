#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define ull unsigned long long
#define pll pair<ll, ll>
#define pii pair<int, int>
#define mp(x, y) make_pair(x, y)
using namespace std;

const ll MAX_N = 2e5 + 5, inf = 1e18, mod = 1000000007;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31,30, 31, 31, 30, 31, 30, 31};

template<typename T>
ostream& operator <<(ostream& out, const vector<T>& mas) {
    for (const auto& x : mas) {
        out << x << ' ';
    }
    return out;
}

void ok() {
    cout << "YES" << '\n';
}

void no() {
    cout << "NO" << '\n';
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

class OrderStatistic {
public:
    OrderStatistic(int _n) {
        n = _n;
        tree.resize(n * 4);
    }
 
    void upd(int v, int l, int r, int ind, int val) {
        if (ind < l || ind > r) {
            return;
        }
        if (l == r) {
            tree[v] += val;
            return;
        }
        int md = (l + r) / 2;
        upd(v * 2, l, md, ind, val);
        upd(v * 2 + 1, md + 1, r, ind, val);
        tree[v] = tree[v * 2] + tree[v * 2 + 1];
    }
 
    void upd(int ind, int val) {
        upd(1, 0, n - 1, ind, val);
    }
 
    int FindIndx(int k) {
         if (tree[1] < k) {
            return 0;
         }
         int v = 1;
         int l = 0, r = n - 1;
         while (r - l > 1) {
            int md = (l + r) / 2;
            if (tree[v * 2] < k) {
                k -= tree[v * 2];
                v = v * 2 + 1;
                l = md + 1;
            } else {
                v = v * 2;
                r = md;
            } 
         }
         if (tree[v * 2] >= k) {
            return l;
         } else {
            return r;
         }
    }
private:
    int n;
    vector<int> tree;
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    int n = nxt(), q = nxt();
    OrderStatistic os(n + 1);
    for (int i = 0; i < n; i++) {
        int x = nxt();
        os.upd(x, 1);
    }
    while (q--) {
        int k = nxt();
        if (k > 0) {
            os.upd(k, 1);
        } else {
            int indx = os.FindIndx(-k);
            os.upd(indx, - 1);
        }
    }
    cout << os.FindIndx(1);
    return 0;
}
