//#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
          
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
          
using namespace std;
using namespace __gnu_pbds;
          
//#define int long long
 
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
          
using matrix = vector<vector<ll>>;
template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
          
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
 
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("mincost.in", "r", stdin);
    //freopen("mincost.out", "w", stdout);
    #endif
}

const int MAXN = 1050;
int p[MAXN];
bool good[MAXN];

bool ask(int id) {
    cout << "? " << id << endl;
    char res;
    cin >> res;
    return (res == 'N');
}

int find_set(int u) {
    return (p[u] == u ? u : p[u] = find_set(p[u]));
}

void union_sets(int u, int v) {
    int a = find_set(u);
    int b = find_set(v);
    if (a == b) {
        return;
    }
    p[b] = a;
}

signed main() {
    FAST_IO();
    int n, k;
    cin >> n >> k;
    if (k == 1) {
        iota(p, p + MAXN, 0);
        for (int i = 1; i <= n; ++i) {
            for (int j = i + 1; j <= n; ++j) {
                ask(i);
                if (!ask(j)) {
                    union_sets(i, j);
                }
            }
        }
        int cnt = 0;
        for (int i = 1; i <= n; ++i) {
            cnt += (find_set(i) == i);
        }
        cout << "! " << cnt << endl;
        return 0;
    }
    for (int i = 1; i <= n; ++i) {
        good[i] = ask(i);
    }
    cout << 'R' << endl;
    for (int i = k + 1; i <= n; i += k) {
        vector<int> poses;
        for (int j = 1; j < i; ++j) {
            if (good[j]) {
                poses.push_back(j);
            }
        }
        cerr << '\n';
        vector<vector<int>> kek;
        for (int j = 0; j < (int)poses.size(); j += k / 2) {
            kek.push_back({});
            for (int l = j; l < min((int)poses.size(), j + k / 2); ++l) {
                kek.back().push_back(poses[l]);
            }
        }
        poses.clear();
        for (int j = i; j < i + k; ++j) {
            if (good[j]) {
                poses.push_back(j);
            }
        }
        vector<vector<int>> kek1;
        for (int j = 0; j < (int)poses.size(); j += k / 2) {
            kek1.push_back({});
            for (int l = j; l < min((int)poses.size(), j + k / 2); ++l) {
                kek1.back().push_back(poses[l]);
            }
        }
        int sz = kek1.size(), cur = 0;
        if (sz == 0) {
            continue;
        }
        else if (sz == 1) {
            int ptr = 0;
            while (true) {
                if (cur == 0 || cur == 2) {
                    if (ptr == (int)kek.size()) {
                        break;
                    }
                    for (int x : kek[ptr]) {
                        if (!ask(x)) {
                            good[x] = false;
                        }
                    }
                    for (int j = kek[ptr].size(); j < k / 2; ++j) {
                        ask(kek[ptr].back());
                    }
                    ptr++;
                    if (cur == 2) {
                        for (int j = 0; j < k / 2; ++j) {
                            ask(kek[0].back());
                        }
                    }
                }
                else {
                    for (int x : kek1[0]) {
                        if (!ask(x)) {
                            good[x] = false;
                        }
                    }
                    for (int j = kek1[0].size(); j < k / 2; ++j) {
                        ask(kek1[0].back());
                    }
                }
                cur = (cur == 2 ? 0 : cur + 1);
            }
        }
        else {
            for (auto &v : kek) {
                for (int x : v) {
                    if (!ask(x)) {
                        good[x] = false;
                    }
                }
                for (int j = v.size(); j < k / 2; ++j) {
                    ask(v.back());
                }
                for (int x : kek1[cur]) {
                    if (!ask(x)) {
                        good[x] = false;
                    }
                }
                for (int j = kek1[cur].size(); j < k / 2; ++j) {
                    ask(kek1[cur].back());
                }
                cur = (cur == sz - 1 ? 0 : cur + 1);
            }
            if (kek.size() % 2 == 0) {
                for (int x : kek[0]) {
                    if (!ask(x)) {
                        good[x] = false;
                    }
                }
            }
            else {
                cout << 'R' << endl;
                for (int x : kek[0]) {
                    if (!ask(x)) {
                        good[x] = false;
                    }
                }
                for (int x : kek1[cur]) {
                    if (!ask(x)) {
                        good[x] = false;
                    }
                }
            }
        }
        cout << 'R' << endl;
    }
    int cnt = 0;
    for (int i = 1; i <= n; ++i) {
        cnt += good[i];
    }
    cout << "! " << cnt << endl;
    return 0;
}