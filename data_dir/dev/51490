//#if !defined(YCM) && 1
//#define _FORTIFY_SOURCE 0
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC target("avx")
////#pragma GCC optimize ("O3")
////#pragma GCC target ("sse4")
//#include <stdio.h>
//#endif
#include <unistd.h>
//#pragma GCC diagnostic ignored "-Wunused-result"
//#pragma GCC diagnostic ignored "-Wunused-function"
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define ull unsigned long long int
#define clr(a) memset(a,0,sizeof(a))
#define clr_(a) memset(a,-1,sizeof(a))
#define pb(a) push_back(a)
#define pii pair<int,int>
#define eps 1e-9
#define inf INT_MAX
#define pi acos(-1.0)
#define ff first
#define ss second
#define INF (ll)1e18
#define m_p make_pair
#define all(v) v.begin(),v.end()
int fx[]={0,0,-1,1,-1,1,1,-1};
int fy[]={1,-1,0,0,1,1,-1,-1};
ll lcm(ll a,ll b){return (a/__gcd(a,b))*b;}
ll bigmod(ll a,ll p,ll mod){ll ans=1;while(p){if(p&1)ans=ans*a%mod;a=a*a%mod;p>>=1;}return ans;}
ll power(ll x,ll n){if(n==0)return 1;else if(n%2==0){ll y=power(x,n/2);return y*y;}else return x*power(x,n-1);}

#ifdef shaft
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cerr << name << " is " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cerr.write(names, comma - names) << " is " << arg1 <<endl;
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif
const int N=(int)1e6+5;
const int mod=(int)1e9+7;
//! Tokenize the given string str with given delimiter. If no delimiter is given whitespace is used.
void Tokenize(const std::string& str, std::vector<std::string>& tokens, const std::string& delimiters = ",;")
{
   tokens.clear();
   // Skip delimiters at beginning.
   std::string::size_type lastPos = str.find_first_not_of(delimiters, 0);
   // Find first "non-delimiter".
   std::string::size_type pos     = str.find_first_of(delimiters, lastPos);

   while (std::string::npos != pos || std::string::npos != lastPos)
   {
	// Found a token, add it to the vector.
	tokens.push_back(str.substr(lastPos, pos - lastPos));
	// Skip delimiters.  Note the "not_of"
	lastPos = str.find_first_not_of(delimiters, pos);
	// Find next "non-delimiter"
	pos = str.find_first_of(delimiters, lastPos);
   }
}

int main()
{
    ios_base::sync_with_stdio(false); cout.setf(ios::fixed); cout.precision(100); cout.tie(nullptr); cin.tie(nullptr);
    #ifdef shaft
        freopen("in.txt","r",stdin);
        //freopen("out.txt","w",stdout);
    #endif ///shaft
    string s;
    while(cin >> s){
        s += ';';
        int aa = 0, bb = 0;
        vector<string> v;
        string a = "", b = "";
        v.clear();
        string sp = "";
        if(s[0] == ';' || s[0] == ',')
            sp += '#';
        sp += s[0];
        for(int i = 1; i < s.size(); i++){
            if(s[i] == ';' || s[i] == ','){
                if(s[i-1] == ';' || s[i-1] == ',')
                    sp += '#';
            }
            sp += s[i];
        }
        Tokenize(sp,v);

        for(string s : v){
            int flag = 0;
            for(int i = 0; i < s.size(); i++){
                if(s[i] == '#' || s[i] == '.')
                    flag = 1;
                if(s[i] >= 'a' && s[i] <= 'z')
                    flag = 1;
                if(s[i] >= 'A' && s[i] <= 'Z')
                    flag = 1;
            }
            if(!flag && s.size()>1 && s[0] == '0'){
                    flag = 1;
            }
            if(flag){
                if(bb) b += ',';
                bb = 1;
                b += s;
            }
            else{
                if(aa) a += ',';
                aa = 1;
                a += s;
            }
        }
        if(a.size() == 0)
             a = "-";
        else{
            a = "\""+a+"\"";
        }
        if(b.size() == 0)
             b = "-";
        else{
            string s = "";
            for( char ch : b){
                if(ch != '#')
                    s += ch;
            }
            b = s;
            b = "\""+b+"\"";
        }
        cout <<a<<endl<<b<<endl;
    }
    return 0;
}



