#include <bits/stdc++.h>
using namespace std;

/*#ifdef SG
    #include <debug.h>
#else
    #define show(...)
    #define debug(...)
    #define deepen(...)
    #define timer(...)
#endif
*/

#define forn(i,n) for (int i = 0; i < int(n); ++i)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; --i)
#define forv(i,v) for (auto i = v.begin(); i != v.end(); ++i)
#define forr(i,v) for (auto i = v.end(); i != v.begin() && (--i, 1); )
#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T> inline T abs (T x) {return x > T() ? x : -x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 510;

struct Input {
    int n;
    int p[N];
    int a[N][N];
            
    bool read () {
        if (scanf ("%d", &n) != 1)
            return 0;
        forn(i, n) {
            scanf ("%d", &p[i]);
            p[i]--;
        }   
        string qwe;
        getline(cin, qwe);
        forn(i, n) {
            getline(cin, qwe);
            forn(j, n) {
                a[i][j] = int(qwe[j]) - '0';
            }
        }
        return 1;
    }

    void init (const Input &input) {
        *this = input;
    }
};

struct Data: Input {
    vector <int> ans;

    void write () {
        forn(i, ans.size())
            cout << ans[i] + 1 << ' ';
        cout << endl;
    }
    
    virtual void solve () {}
    
    virtual void clear () {
        *this = Data();
    }
};

struct Solution: Data {
    vector <int> ord, pos;
    bool use[N];

    void dfs (int v) {
        use[v] = 1;
        ord.pb(p[v]);
        pos.pb(v);
        forn(i, n) {
            if (use[i])
                continue;
            if (a[v][i]) {
                dfs(i);
            }
        }
    }

    void solve () {
        ans.clear();
        memset(use, 0, sizeof(use));
        ans.resize(n);
        forn(i, n) {
            if (!use[i]) {
                ord.clear();
                pos.clear();
                dfs(i);
                sort(all(ord));
                sort(all(pos));
                forn(j, ord.size())
                    ans[pos[j]] = ord[j];
            }
        }
    }
    
    void clear () {
        *this = Solution();
    }
};

Solution sol;

int main () {
    cout.setf(ios::showpoint | ios::fixed);
    cout.precision(20);
#ifdef SG
    freopen("input.txt", "r", stdin);
//  freopen("output.txt", "w", stdout);
    while (sol.read()) {
        sol.solve();
        sol.write();
        sol.clear();
    }
#else
    sol.read();
    sol.solve();
    sol.write();
#endif  

    return 0;
}
