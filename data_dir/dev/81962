#include <iostream>
#include <algorithm>
#include <vector>
#include <functional>

int input() {
    int n;
    scanf("%d", &n);
    return n;
}

int main() {
    int n, q;
    std::cin >> n >> q;

    std::vector<std::vector<int>> g(n);
    for (int i = 0; i < n - 1; i++) {
        int u = input() - 1;
        int v = input() - 1;
        g[u].push_back(v);
        g[v].push_back(u);
    }

    input();
    int root = input() % n;
    q--;

    std::vector<int> white_path(n);
    for (int i = 0; i < n; i++) {
        white_path[i] = i;
    }
    std::vector<int> stack;

    std::vector<int> parent(n, -1);
    std::vector<bool> marked(n);
    marked[root] = true;

    stack.push_back(root);
    while (!stack.empty()) {
        const int u = stack.back();
        stack.pop_back();

        for (int v : g[u]) {
            if (v != parent[u]) {
                parent[v] = u;
                white_path[v] = std::min(white_path[v], white_path[u]);
                stack.push_back(v);
            }
        }
    }

    int ans = 0;
    int black_min = 1e9;
    while (q--) {
        int t = input();
        int z = input();
        int x = z + ans;
        while (x >= n) {
            x -= n;
        }

        if (t == 1) {
            for (; !marked[x]; x = parent[x]) {
                marked[x] = true;
                black_min = std::min(black_min, x);
            }
        } else {
            ans = std::min(white_path[x], black_min) + 1;
            printf("%d\n", ans);
        }
    }
}