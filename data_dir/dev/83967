#include <bits/stdc++.h>

using namespace std;

const int MAXN = 100100;
int n, a[MAXN], dp[MAXN][2];
vector<int> g[MAXN];

void dfs(int v, int bit, int p = -1)
{
	bool b = (a[v] & (1 << bit)) != 0;
	dp[v][b]++;
	for(const int& u : g[v])
	{
		if(u == p)
			continue;
		dfs(u, bit, v);
		dp[v][1] += dp[u][!b], dp[v][0] += dp[u][b];
	}
}

long long f(int v, int bit, int p = -1)
{
	bool b = (a[v] & (1 << bit)) != 0;
	long long ans = b, x = 0, y = 0, tmp = 0;
	for(const int& u : g[v])
	{
		if(u == p)
			continue;
		ans += f(u, bit, v) + dp[u][!b];
		x += dp[u][0], y += dp[u][1];
	}
	for(const int& u : g[v])
	{
		if(u == p)
			continue;
		if(b)
			tmp += (x - dp[u][0]) * dp[u][0] + (y - dp[u][1]) * dp[u][1];
		else
			tmp += (y - dp[u][1]) * dp[u][0] + (x - dp[u][0]) * dp[u][1];
	}
	return ans + (tmp / 2);
}

int main()
{
	scanf("%d", &n);
	for(int i = 1; i <= n; ++i)
		scanf("%d", &a[i]);
	for(int i = 1, u, v; i <= n - 1; ++i)
		scanf("%d %d", &u, &v), g[u].push_back(v), g[v].push_back(u);
	long long ans = 0;
	for(int i = 0; i < 30; ++i)
	{
		memset(dp, 0, sizeof dp);
		dfs(1, i);
		ans += f(1, i) * (1LL << i);
	}

	printf("%lld\n", ans);
}