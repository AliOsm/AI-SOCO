/*input
5
0 69
1 194
1 139
0 47
1 66

*/

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll , ll> PLL;
typedef long double ld;

#define pb push_back
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
#define mod 1000000007
#define PI 3.14159265
#define endl '\n'
#define F first
#define S second
#define debug(x) cout << #x << " = " << x << endl;
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

#define out(container) cout << #container << " = "; for (auto it : container) cout << it << " "; cout << endl;

template < typename T> int sz(T x) {return x.size();}
template < typename T > T GCD(T a, T b)            { ll t; while(a) { t = a; a = b % a; b = t; } return b; }
template < typename T > string toString(T a)       { return to_string(a); }
template < typename T > void toInt(string s, T &x) { stringstream str(s); str >> x;}
inline int add(int x, int y){ x += y; if(x >= mod) x -= mod; return x;}
inline int sub(int x, int y){ x -= y; if(x < 0) x += mod; return x;}
inline int mul(int x, int y){ return (x * 1ll * y) % mod;}
inline int powr(int a, ll b){
    int x = 1 % mod;
    while(b){
        if(b & 1) x = mul(x, a);
        a = mul(a, a);
        b >>= 1;
    }
    return x;
}
inline int inv(int a){ return powr(a, mod - 2);}


string initial = "What are you doing at the end of the world? Are you busy? Will you save us?";
string X = "What are you doing while sending \"";
string Y = "\"? Are you busy? Will you send \"";
string Z = "\"?";
// fn = X + fn - 1 + Y + fn - 1 + Z

const int N = 1e5 + 1;
ll sizes[N];
ll inf = 1e18 + 1;

char get(ll n, ll k) {
  if (sizes[n] < k) return '.';
  if (n == 0) return initial[k - 1];
  if (k <= X.size()) return X[k - 1];
  if (k <= X.size() + sizes[n - 1]) return get(n - 1, k - X.size());
  if (k <= X.size() + sizes[n - 1] + Y.size()) return Y[k - (X.size() + sizes[n - 1]) - 1];
  if (k <= X.size() + sizes[n - 1] + Y.size() + sizes[n - 1]) return get(n - 1, k - (X.size() + sizes[n - 1] + Y.size()));
  return Z[k - (X.size() + sizes[n - 1] + Y.size() + sizes[n - 1]) - 1];
}

int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  sizes[0] = sz(initial);
  for (int i = 1; i < N; i++) {
    sizes[i] = min(inf, 2ll * sizes[i - 1] + sz(X) + sz(Y) + sz(Z));
  }

  int q;
  cin >> q;
  while (q--) {
    ll n, k;
    cin >> n >> k;
    char ans = get(n, k);
    cout << ans;
  }
  cout << endl;

  return 0;
}