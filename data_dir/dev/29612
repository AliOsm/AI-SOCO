#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcountll(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;

const int N = 41;

int n, k;
bool a[N][N];
ll c[N];
int dp[1 << 20];

int main() {
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("in.txt", "rt", stdin);
//	freopen("out.txt", "wt", stdout);
#endif
	cin >> n >> k;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> a[i][j];
			if (a[i][j] || i == j) {
				c[i] |= 1LL << j;
			}
		}
	}
	int mx = 0;
	int s1 = n / 2, s2 = n - s1;
//	int s1 = min(n, 20), s2 = max(0, n - 20);
	for (ll msk = 1; msk < (1 << s1); msk++) {
		ll cur = (((1LL << n) - 1) & (~((1LL << s1) - 1))) | msk;
		for (int i = 0; i < s1; i++) {
			if (msk & (1 << i)) {
				cur &= c[i];
				dp[msk] = max(dp[msk], dp[msk ^ (1 << i)]);
			}
		}
		if ((cur & msk) == msk) {
			mx = max(mx, PPC(msk));
			dp[msk] = PPC(msk);
		}
	}
	for (ll msk = 1; msk < (1 << s2); msk++) {
		ll cur = ((1LL << s1) - 1) | (msk << s1);
		for (int i = 0; i < s2; i++) {
			int j = i + s1;
			if (msk & (1 << i)) {
				cur &= c[j];
			}
		}
		if ((cur & (msk << s1)) == (msk << s1)) {
			mx = max(mx, PPC(msk) + dp[cur & ((1 << s1) - 1)]);
		}
	}
//	cout << mx << endl;
	double res = k * k * (mx - 1) / (2.0 * mx);
	cout << fixed << setprecision(10) << res << endl;
	return 0;
}
