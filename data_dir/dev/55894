#include <bits/stdc++.h>
using namespace std;
template<class T> void ckmin(T &a, T b) { a = min(a, b); }
template<class T> void ckmax(T &a, T b) { a = max(a, b); }
#define pb push_back
#define mp make_pair
#define Red ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define F first
#define S second
#define sz(x) (int)x.size()
#define all(x) (x).begin(), (x).end()
#define rep(i, n) for(int i = 0; i < n; ++i)
#define repr(i,n) for(int i = n - 1; i >= 0; --i)
#define Rep(i, a, n) for(int i = (a); i <=(n); ++i)
#define repst(i, n) for(auto it = n.begin(); it != n.end(); ++it)
#define Repr(i, a, n) for(int i = (n); i >= (a); --i)
typedef long long ll;
 
const ll inf = int(1e18);
const int mod = 1e9 + 7;
const int N = 1e6 + 555;
const long double PI = acos(-1.0);

int parent[N], sz[N], used[N];
vector<int> g[N];
int get(int v){
	if(parent[v] == v) return v;
	return parent[v] = get(parent[v]);
}
void ms(int v){
	parent[v] = v;
	sz[v] = 1;
}
void dfs(int v){
	used[v] = 1;
	cout << v << " ";
	for(int to : g[v]) if(!used[to]) dfs(to);
}
void merge(int u, int v){
	u = get(u);
	v = get(v);
	if(u != v){
		parent[u] = v;
		g[u].pb(v);
		g[v].pb(u);
	}
}
void solve()
{
	int n;
	cin >> n;
	for(int i = 1; i <= n; ++i) ms(i);
	for(int i = 0; i < n - 1; ++i){
		int u, v;
		cin >> u >> v;
		merge(u, v);
	}
	dfs(1);

}

int main()
{
	Red;
	solve();
	return 0;
}
