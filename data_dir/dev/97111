#include <bits/stdc++.h>

using namespace std;

const int MaxN = 5e5 + 13;
const int MOD = 1e9 + 7;
const int INF = 1e9;

int tree[MaxN * 4];
int a[MaxN];
int n;

void make(int x, int l, int r)
{
    if(l == r)
    {
        tree[x] = a[l];
    }else
    {
        int mid = (l + r) / 2;
        make(x + x, l, mid);
        make(x + x + 1, mid + 1, r);
        tree[x] = __gcd(tree[x + x], tree[x + x + 1]);
    }
}

void up(int x, int l, int r, int pos, int y)
{
    if(l == r)
        tree[x] = y;
    else
    {
        int mid = (l + r) / 2;
        if(mid >= pos)
            up(x + x, l, mid, pos, y);
        else
            up(x + x + 1, mid + 1, r, pos, y);
        tree[x] = __gcd(tree[x + x], tree[x + x + 1]);
    }
}

int K;

void check(int x, int l, int r, int ll, int rr, int c)
{
    if(K > 1)
        return;
    if(l > rr || r < ll || (tree[x] % c == 0))
        return;
    if(l == r)
    {
        ++K;
        return;
    }
    int mid = (l + r) / 2;
    check(x + x, l, mid, ll, rr, c);
    if(K < 2)
        check(x + x + 1, mid + 1, r, ll, rr, c);
}

int main()
{
//    freopen("input.txt", "r", stdin);
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n;
    for(int i = 1; i <= n; ++i)
        cin >> a[i];

    make(1, 1, n);

    int q;
    cin >> q;
    for(int i = 1; i <= q; ++i)
    {
        int t;
        cin >> t;
        if(t == 1)
        {
            int l, r, x;
            cin >> l >> r >> x;
            K = 0;
            check(1, 1, n, l, r, x);
            if(K < 2)
                cout << "YES\n";
            else
                cout << "NO\n";
        }else
        {
            int pos, y;
            cin >> pos >> y;
            up(1, 1, n, pos, y);
        }
    }

    return 0;
}
