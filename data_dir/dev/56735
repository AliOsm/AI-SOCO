//g++ -std=c++14 -g -O2 -o ./a ./A.cpp
#include <bits/stdc++.h>
using namespace std;
#define ff first
#define ss second
#define nl '\n'
typedef long long ll;
//////////////////////////////////////////////////////////////////////

const int N = 200200 , M = 1000100;
int n,a[N];
ll p[N],s[N];

struct ConvexHull{
  
  const static int LX = -M , RX = M;
  const static ll INF = (ll)9e18;

  struct Line {
    ll m,c;
    Line(ll mm=0,ll cc=-INF){m=mm;c=cc;}
    ll operator[](int x){return m*x+c;}
  };

  struct node{
    node*lt,*rt;
    Line ln;
    node(Line l){lt=rt=NULL;ln = l;}
  }*root=NULL;

  void add(Line l,node*&it,int lx=LX,int rx=RX){
    if(it==NULL){it=new node(l);return;}
    if(it->ln[lx]>=l[lx] and it->ln[rx]>=l[rx])return;
    if(it->ln[lx]<=l[lx] and it->ln[rx]<=l[rx]){it->ln=l;return;}
    int mid = lx+rx>>1;
    bool cross = 0;
    
    if(it->ln[lx] <= l[lx]){
      if(it->ln[mid] > l[mid])cross = 1;
    }else{
      if(it->ln[mid] <=l[mid])cross = 1;
    }
    
    if(cross){
      if(it->ln[rx] < l[rx])swap(it->ln,l);
      add(l,it->lt,lx,mid);
    }else{
      if(it->ln[lx] < l[lx])swap(it->ln,l);
      add(l,it->rt,mid+1,rx);
    }
  }
  void add(ll m,ll c){add(Line(m,c),root);}

  ll get(int &x,node*&it,int lx=LX,int rx=RX){
    if(it==NULL)return -INF;
    ll ret = it->ln[x];
    int mid = lx+rx>>1;
    if(x<=mid)ret = max(ret , get(x,it->lt,lx,mid) );
    else ret = max(ret , get(x,it->rt,mid+1,rx) );
    return ret;
  }
  ll get(int x){return get(x,root);}
} d1,d2;

int main(){
  ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
  
  cin>>n;

  for(int i=1;i<=n;i++)cin>>a[i];
  
  ll f = 0 , ans;
  p[0]=0;s[n+1]=0;
  for(int i=1;i<=n;i++)p[i]=p[i-1]+a[i];
  for(int i=n;i>=1;i--)s[i]=s[i+1]+a[i],f+=s[i];

  ans = f;
  
  d1.add(n,-p[n]);
  
  for(int i=n-1;i>=1;i--){
    ll temp = i*1ll*a[i]-p[i];
    ans = max(ans , f + d1.get(a[i]) - temp);
    d1.add(i,-p[i]);
  }

  d2.add(1,s[1]);
  for(int j=2;j<=n;j++){
    ll temp = j*1ll*a[j] + s[j];
    ans = max(ans , f + d2.get(a[j]) - temp);
    d2.add(j,s[j]);
  }

  cout<<ans<<nl;
  
  return 0;
}
