#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#define MAX_PRIMES 11
#define ll long long
using namespace std;

ll primes[11]={1000000007,
    1000000009,
    1000000021,
    1000000033,
    1000000087,
    1000000093,
    1000000097,
    1000000103,
    1000000123,
    1000000181,
    1000000207};


ll modpow(ll x, ll y, ll M) {
    ll xs = x;
    ll answer = 1;
    while(y) {
        if (y&1) {
            answer = (answer * xs) % M;
        }
        y >>= 1;
        xs = (xs * xs) % M;
    }
    return answer;
}

ll A[211111];

ll Solve(int n, ll k) {
    ll answer = 0;
    ll sum_modval[MAX_PRIMES];
    ll twopow[MAX_PRIMES];
    
    for(int j=0;j<MAX_PRIMES;j++) {
        sum_modval[j]=0;
        twopow[j]=1;
    }
    
    for(int i=0;i<=n;i++) {
        for(int j=0;j<MAX_PRIMES;j++) {
            sum_modval[j] += A[i]*twopow[j];
            sum_modval[j] %= primes[j];
            sum_modval[j]=(sum_modval[j]+primes[j])%primes[j];
            twopow[j]=(twopow[j]*2)%primes[j];
        }
    }
    
    for(int j=0;j<MAX_PRIMES;j++) {
        twopow[j]=1;
    }
    
    for(int i=0;i<=n;i++) {
        ll rest = (-sum_modval[0] + twopow[0]*A[i])%primes[0];
        rest = (rest + primes[0])%primes[0];
        
        
        
        ll candidate_mod = (rest*modpow(twopow[0], primes[0]-2, primes[0]))%primes[0];
        candidate_mod = (candidate_mod + primes[0])%primes[0];
        
        for(ll x = candidate_mod-3*primes[0];x <= candidate_mod+3*primes[0]; x+=primes[0]) {
            if (x < -k || x > k)
                continue;
            
            if (x == 0 && i == n)
                continue;
            
            bool ok = true;
            for(int j=0;j<MAX_PRIMES;j++) {
                ll d = (x-A[i])%primes[j];
                ll rest_curr = (sum_modval[j] + twopow[j]*d)%primes[j];
                rest_curr = (rest_curr + primes[j])%primes[j];
                
                if (rest_curr != 0) {
                    ok = false;
                    break;
                }
            }
            
            if (ok) {
                answer++;
            }
        }
        
        for(int j=0;j<MAX_PRIMES;j++) {
            twopow[j]=(twopow[j]*2)%primes[j];
        }
    }
    
    return answer;
    
}

int main() {
    ll n,k;
    cin>>n>>k;
    
    
    // a_i * 2^i = rest
    
    for(int i=0;i<=n;i++) {
        cin>>A[i];
    }
    
    
    cout << Solve(n, k) << endl;
    
    
    
    
}