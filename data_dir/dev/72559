// In the name of god
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <assert.h>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <bitset>
#define sqr(a) ((a)*(a))
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
 
const long long INF = (long long)1e18;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)1e6 + 227 + 1;    
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-9;
 
long long bin_pow(long long a, long long b) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2);
    ans = ans * ans % MOD;
    if(b % 2) ans = ans * a % MOD;
    return ans;
}

int kek[26];

void solve(int n) {
    vector<vector<string> > a(1);

    for(int i = 0; i < n; i++) {
        string kek = "";
        kek += (char)('a' + i);
        a[0].push_back(kek);
    }

    bool lol = 1;
    for(int i = 1; i < n; i++) {
        a.push_back(vector<string>());

        for(int j = 0; j + 1 < a[i - 1].size(); j++) {
            if(lol) {
                a.back().push_back(a[i - 1][j] + "+" + a[i - 1][j + 1]);
            } else {
                string heh = a[i - 1][j + 1];
                if(heh[0] != '+' && heh[0] != '-')
                    heh = '+' + heh;
                for(int i = 0; i < heh.size(); i += 2)
                    heh[i] = (heh[i] == '+' ? '-' : '+');

                a.back().push_back(a[i - 1][j] + heh);
            }

            lol ^= 1;
        }
    }

    string b = "+" + a.back()[0];

    for(int i = 1; i < b.size(); i++) {
        assert(((b[i] == '+' || b[i] == '-') ^ (b[i - 1] == '+' || b[i - 1] == '-')));
    }

    for(int i = 0; i < n; i++)
        kek[i] = 0;

    for(int i = 1; i < b.size(); i += 2)
        kek[b[i] - 'a'] += (b[i - 1] == '+' ? 1 : -1);

    for(int i = 0; i < n; i++)
        cout << kek[i] << " ";
    puts("");
}

long long f[MAXN], ob[MAXN];

long long C(long long n, long long k) {
    return f[n] * ob[k] % MOD * ob[n - k] % MOD;
}

void solve_task() {
    int n; cin >> n;

    vector<long long> a(n);
    for(int i = 0; i < n; i++)
        a[i] = next_int<int>();

    vector<long long> b(n, 0);
    if(n % 4 == 1) {
        for(int j = 0; j <= n / 2; j += 2)
            b[j] = C(n / 2, j / 2);
        for(int j = n - 1; j >= n / 2; j -= 2)
            b[j] = C(n / 2, (n - j - 1) / 2);
    } else 
    if(n % 4 == 2) {
        for(int j = 0; j < n / 2; j += 2)
            b[j] = b[j + 1] = C(n / 2 - 1, j / 2);
        for(int j = n - 1; j >= n / 2; j -= 2)
            b[j] = b[j - 1] = C(n / 2 - 1, (n - j - 1) / 2);
    } else
    if(n % 4 == 3) {
        n--;

        for(int i = 0; i < n; i++)
            a[i] = (i % 2 ? a[i] - a[i + 1] : a[i] + a[i + 1]);

        for(int j = 0; j < n / 2; j += 2)
            b[j] = b[j + 1] = C(n / 2 - 1, j / 2);
        for(int j = n - 1; j >= n / 2; j -= 2)
            b[j] = b[j - 1] = C(n / 2 - 1, (n - j - 1) / 2);
    } else {
        for(int j = 0; j < n / 2; j += 2) {
            b[j] = C(n / 2 - 1, j / 2);
            b[j + 1] = -C(n / 2 - 1, j / 2);
        }
        for(int j = n - 1; j >= n / 2; j -= 2) {
            b[j] = -C(n / 2 - 1, (n - j - 1) / 2);
            b[j - 1] = C(n / 2 - 1, (n - j - 1) / 2);
        }
    }

    long long ans = 0;
    for(int i = 0; i < n; i++)
        (ans += b[i] * a[i]) %= MOD;

    cout << (ans % MOD + MOD) % MOD << "\n";
} 

int main() {
    // freopen(".in", "r", stdin);

    for(int i = 0; i < MAXN; i++) {
        if(i) 
            f[i] = f[i - 1] * i % MOD;
        else
            f[0] = 1;
        ob[i] = bin_pow(f[i], MOD - 2);
    }

    solve_task();

    // for(int i = 0; i < 10; i++) {
    //     for(int j = 0; j < 5; j++)
    //         cout << C(i, j) << " ";
    //     puts("");
    // }

    // for(int n = 3; n <= 24; n += 4) {
        // cout << n / 2 << ": ";
        // solve(n);
        // solve_task(n);
    // }

    // solve_task(5);
}
