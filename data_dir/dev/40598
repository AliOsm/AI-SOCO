//██████╗ ██╗   ██╗██╗      ██████╗ ███████╗
//██╔══██╗██║   ██║██║      ██╔══██╗██╔════╝
//██████╔╝██║   ██║██║█████╗██║  ██║█████╗
//██╔══██╗██║   ██║██║╚════╝██║  ██║██╔══╝
//██║  ██║╚██████╔╝██║      ██████╔╝███████╗
//╚═╝  ╚═╝ ╚═════╝ ╚═╝      ╚═════╝ ╚══════╝
#include <bits/stdc++.h>

// #pragma GCC target("sse,sse2,sse3,ssse3,sse4")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
using namespace std;

#define fst first
#define snd second
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define eb emplace_back

#define all(v) (v).begin(), (v).end()
#define sz(v) ((int)(v).size())
#define sqr(x) ((x) * (x))

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;

#define next ajksdslk
#define prev aklsfjk

mt19937_64 mt_rand(chrono::system_clock::now().time_since_epoch().count());

template<typename T1, typename T2>
inline bool upmax(T1& a, T2 b) { return (a < b ? (a = b, true) : false); }

template<typename T1, typename T2>
inline bool upmin(T1& a, T2 b) { return (b < a ? (a = b, true) : false); }

const int maxn = (int)  3e5 + 100;
const int maxlog = 21;
const int base = 1e9 + 7;
const ld eps = (ld) 1e-9;
const ld PI = acos(-1.);
//const int pp = 41;
const int inf = 2e9;
const ll llinf = 2e18;

struct pt {
  int x, y, z, id;
};



int main() {

  int n; cin >> n;
  vector<pt> a(n);
  for (int i= 0; i < n; i ++) {
    cin >> a[i].x >> a[i].y >> a[i].z; a[i].id = i + 1;
  }

  sort(all(a), [](pt a, pt b) {
    if (a.x == b.x) {
      if (a.y == b.y) {
        return a.z < b.z;
      }
      return a.y < b.y;
    }
    return a.x < b.x;
  });

  vector<pt> ostall;
  for (int i = 0; i < n; i ++) {

    vector<pt> cur;
    cur.pb(a[i]);
    int j = i;
    while (j + 1 < n && a[j + 1].x == a[i].x) {
      cur.pb(a[j + 1]);
      j ++;
    }

    vector<pt> ost;
    for (int k = 0; k < sz(cur); k ++) {
      int p = k;
      vector<pt> kek{cur[k]};
      while (p + 1 < sz(cur) && cur[p + 1].y == cur[k].y) {
        kek.pb(cur[p + 1]);
        p ++;
      }
      while (sz(kek) > 1) {
        cout << kek.back().id << " " ;
        kek.pop_back();
        cout << kek.back().id << "\n";
        kek.pop_back();
      }
      if (sz(kek)) {
        ost.pb(kek.back());
      }

      k = p;

    }

    while (sz(ost) > 1) {
      cout << ost.back().id << " ";
      ost.pop_back();
      cout << ost.back().id << "\n";
      ost.pop_back();
    }

    if (sz(ost)) {
      ostall.pb(ost.back());
    }


    i = j;

  }

  while (sz(ostall)) {
    cout << ostall.back().id << " ";
    ostall.pop_back();
    cout << ostall.back().id << "\n";
    ostall.pop_back();
  }

  return 0;
}