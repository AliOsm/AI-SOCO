#include <iostream>
#include <algorithm>
#include <string>
#include <cstdio>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <ctime>
#include <cstdlib>
#include <queue>
#include <cstring>
#include <cassert>
#include <bitset>

using namespace std;

#define mp make_pair
#define f first
#define s second
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define sz(x) ((int)(x).size())
#define sqr(x) ((x)*1ll*(x))

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<int> vi;

int n;
int a[200200];
vector < int > x, y;

bool is_square(int x) {
	int y = int(sqrt(x + .0));
	return (y * y == x);
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);

    cin >> n;
    for(int i = 1; i <= n; ++i) {
    	cin >> a[i];
    	if(is_square(a[i])) {
    		x.pb(a[i]);
    	} else {
    		y.pb(a[i]);
    	}
    }
    vector < int > sq;
    for(int i = 0; i <= 32000; ++i) {
    	sq.pb(i * i);
    }
    ll ans = 0;
    if(sz(x) > sz(y)) {
    	vector < int > cost(sz(x), 0);
    	for(int i = 0; i < sz(x); ++i) {
    		if(x[i] == 0) cost[i] = 2;
    		else cost[i] = 1;
    	}
    	sort(all(cost));
    	for(int i = 0; i < ((sz(x) - sz(y)) >> 1); ++i) {
    		ans += cost[i];
    	}
    } else if (sz(x) < sz(y)) {
    	vector < int > cost(sz(y), 0);
    	for(int i = 0; i < sz(y); ++i) {
    		int j = lower_bound(all(sq), y[i]) - sq.begin();
    		int cur = sq[j] - y[i];
    		if(j > 0) {
    			j--;
    			cur = min(cur, y[i] - sq[j]);
    		}
    		cost[i] = cur;
    	}
    	sort(all(cost));
    	for(int i = 0; i < ((sz(y) - sz(x)) >> 1); ++i) {
    		ans += cost[i];
    	}
    }
    
    cout << ans << endl;
    return 0;
}
