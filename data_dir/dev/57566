#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <random>
#include <cstdlib>
#include <fstream>
#include <climits>
#include <queue>
#include <map>
#include <set>

using namespace std;

const int N = (int) 2e5;
char s[N + 1];

int getCode(char ch) {
    if (ch == 'R')
        return 0;
    if (ch == 'G')
        return 1;
    return 2;
}

int main(int argc, char **argv) {
    vector<vector<int> > ps({{0, 1, 2},
                             {1, 2, 0},
                             {2, 0, 1}});
    int q;
    scanf("%d", &q);
    while (q-- != 0) {
        int n, k;
        scanf("%d%d%s", &n, &k, s);
        vector<vector<vector<int>>> cum(3, vector<vector<int>>(3, vector<int>(n, 0)));
        for (int i = 0; i < n; ++i) {
            cum[getCode(s[i])][i % 3][i] = 1;
        }
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                for (int index = 1; index < n; ++index) {
                    cum[i][j][index] += cum[i][j][index - 1];
                }
        int result = INT_MAX;
        for (int i = 0; i + k <= n; ++i) {
            int r = i + k - 1;
            int length = r - i + 1;
            for (vector<int> &p : ps) {
                int need = 0;
                int mod = i % 3;
                for (int index = 0; index < 3 && index < length; ++index) {
                    int color = p[index];
                    int has = cum[color][mod][r];
                    if (i != 0)
                        has -= cum[color][mod][i - 1];
                    int must = length / 3;
                    if (length % 3 != 0 && length % 3 > index)
                        ++must;
                    need += max(0, must - has);
                    ++mod;
                    mod %= 3;
                }
                result = min(result, need);
            }
        }
        printf("%d\n", result);
    }
    return 0;
}