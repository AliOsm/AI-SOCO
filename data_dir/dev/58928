#include<bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
using namespace std;

#define fr first
#define sc second
#define memset(X,Y) memset(X,Y,sizeof X)
#define all(X) X.begin(),X.end()
#define SZ size()
#define mp make_pair
#define pb push_back
#define Pb pop_back

template<class A, class B> ostream& operator <<(ostream &out, const pair<A, B> &p) {
    return out << "(" << p.fr << ", " << p.sc << ")";
};

template<class A> ostream& operator <<(ostream &out, const vector<A> &v) {
    out << "[";
    for(int i=0;i<(int)v.SZ;i++) {
        if(i)
            out << ", ";
        out << v[i];
    }
    return out << "]";
}

#define error(args...){vector<string> _v = split(#args,','); err(_v.begin(),args); cerr<<endl;}
vector <string> split(const string &s,char c)
{
    vector<string> v;
    stringstream ss(s);
    string x;
    while(getline(ss,x,c))
        v.emplace_back(x);
    return move(v);
}
void err(vector<string>:: iterator it) {}
template<typename T,typename ... Args>
void err(vector<string>::iterator it, T a, Args ... args)
{
    cerr << it->substr((*it)[0] == ' ',it->length())
         << " = " << a <<" " ;
    err(++it,args...);
}

template <typename T>
using order_set = tree<T, null_type, less<T>, rb_tree_tag,
      tree_order_statistics_node_update>;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<int> vi;
typedef vector<ll> vll;
double pi = acos(-1),eps=1e-8;
const ll N = (1e5) + 10 , M = (1e6)+10 , mod = 1e9 + 7 , K = 4 * N;
ll OOL = 1e18;
ll OO = 1e9;

ll n,a[N],b[N];
ll ans;
int main(){
    cin >> n ;
    for(int i=0;i<n;i++){
        cin >> a[i];
    }
    sort(a,a+n);
    b[n/2]=a[n-1];
    int i=n-2;
    int j1=n/2+1;
    int j2=n/2-1;

    while(i>=0){
        if(j1<n){
            b[j1]=a[i];
            i--;
            j1++;
        }
        if(i>=0){
            if(j2>=0){
                b[j2]=a[i];
                i--;
                j2--;
            }
            else if(j1<n){
                b[j1]=a[i];
                i--;
                j2++;
            }
        }
    }
    int ans=0;
    for(int i=0;i<n;i++){
        cout << b[i] << " " ;
    }
}
/*
if(a[i]!=a[i+1] && b[i]!=b[i+1]){

        }
        else if(a[i]!=a[i+1]){
            if(a[i+1]>b[i] && a[i]<=b[i])ans++;
        }
        else if(b[i]!=b[i+1]){
            if(b[i+1]>a[i] && b[i]<=a[i])ans++;
        }
*/
