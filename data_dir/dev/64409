/**
 * Dont raise your voice, improve your argument.
 * --Desmond Tutu
 */

#include <bits/stdc++.h>
using namespace std;

const double PI = acos(-1);
typedef long long ll;
#define int ll
#define fori(n) for(int i=0; i<int(n); i++)

#define cins(s) string s; cin>>s;
#define cini(i) int i; cin>>i;
#define cind(d) double d; cin>>d;
#define cinai(a, n) vi a(n); fori(n) { cin>>a[i]; }
#define cinas(s, n) vs s(n); fori(n) { cin>>s[i]; }
#define cinad(a, n) vd a(n); fori(n) { cin>>a[i]; }


typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<double> vd;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<string> vs;

/* With each swap an "RL" is changed to "LR".
 * So, min number of operations is
 * the distance of the rightmost L to the place
 * where it belongs (the number of Ls).
 * Max number of operations is the sum of
 * all L movings.
 */
void solve() {
    cini(n);
    cini(k);
    cins(s);

    vvi a;
    int sum=0;
    while(1) {
        a.resize(a.size()+1);
        for(size_t i=0; i+1<s.size(); i++)
            if(s[i]=='R' && s[i+1]=='L')
                a.back().push_back(i);

        if(a.back().size()==0) {
            a.pop_back();
            break;
        }
        sum+=a.back().size();

        for(int idx : a.back())
            swap(s[idx], s[idx+1]);
    }

    if(k<a.size() || k>sum) {
        cout<<-1<<endl;
        return;
    }

    vvi ans(k);
    int extra=k-a.size();
    int idx=0;
    for(int i=0; i<a.size(); i++) {
        for(int j=0; j<a[i].size(); j++) {
            ans[idx].push_back(a[i][j]);
            if(extra && j+1<a[i].size()) {
                extra--;
                idx++;
            }
        }
        idx++;
    }

    for(int i=0; i<k; i++) {
        cout<<ans[i].size()<<" ";
        for(int j : ans[i])
            cout<<j+1<<" ";
        cout<<"\n";
    }



}

signed main() {
    cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    solve();
}

