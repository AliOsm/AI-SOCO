#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAX = 1e2 + 5;
const int OFFSET = 1e5;
const int MOD = 1e9 + 7;
int a, b, k, t;
int dp[MAX][2 * OFFSET + 5], partial[MAX][2 * OFFSET + 5];


inline int add(int aa, int bb) {
	aa += bb;
	if(aa >= MOD) {
		aa -= MOD;
	}
	if(0 > aa) {
		aa += MOD;
	}
	return aa;
}

inline int mult(int aa, int bb) {
	return (1LL * aa * bb) % MOD;
}

int main() {
	ios_base::sync_with_stdio(false);

	cin >> a >> b >> k >> t;

	dp[0][OFFSET] = 1;
	fori(i, OFFSET, 2 * OFFSET + 1) {
		partial[0][i] = 1;
	}
	fori(i, 1, t + 1) {
		fori(j, 0, 2 * OFFSET + 1) {
			int left = max(0, j - k);
			int right = min(2 * OFFSET, j + k);
			dp[i][j] = add(partial[i - 1][right], -(left > 0 ? partial[i - 1][left - 1] : 0));
			partial[i][j] = add(dp[i][j], j > 0 ? partial[i][j - 1] : 0);
		}
	}

	int ans = 0;
	fori(i, -k * t, k * t + 1) {
		int cur_a = a + i;
		int diff = cur_a - b - 1;
		diff = min(diff, OFFSET);
		if(diff >= -k * t) {
			ans = add(ans, mult(dp[t][OFFSET + i], partial[t][OFFSET + diff]));
		}
	}
	cout << ans << '\n';

	return 0;
}

