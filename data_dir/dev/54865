#include <iostream>
#include <string>
#include <assert.h>
#include <vector>
#include <map>
using namespace std;

#define ll long long
#define loop(i,n) for(int i=0; i<n; i++)
#define pb push_back

const int MXN = 1e5 + 5;

int n, m, c[MXN], x[MXN], y[MXN], res[MXN];
map<int, int> M1[MXN], M2[MXN];
vector<int> q[MXN], g[MXN];

void dfs(int u, int pa = -1) {
	M1[u][c[u]] = 1; /* Color c[u] occured once in subtree u */
	M2[u][1] = 1; /* Only 1 color occured once in subtree u */
	for (int v: g[u]) {
		if (v == pa) continue;
		dfs(v, u);
		if (M1[u].size() < M1[v].size()) {
			M1[u].swap(M1[v]);
			M2[u].swap(M2[v]);
		}
		/* Merge subtree v into subtree u */
		for (map<int, int>::iterator it = M1[v].begin(); it != M1[v].end(); it++) {
			int color = it->first;
			int occ = it->second;
			while (occ > 0) {
				M1[u][color]++;
				M2[u][M1[u][color]]++;
				occ--;
			}
		}
	}
	for (int x: q[u]) res[x] = M2[u][y[x]];
}

int main () {
	ios_base::sync_with_stdio(false);
	cin>>n>>m;
	loop(i, n) cin>>c[i];
	loop(i, n-1) {
		int u, v;
		cin>>u>>v;
		u--;	v--;
		g[u].pb(v);
		g[v].pb(u);
	}
	loop(i, m) {
		cin>>x[i]>>y[i];
		x[i]--;
		q[x[i]].push_back(i);
	}
	dfs(0);
	loop(i, m) cout<<res[i]<<endl;
	return 0;
}