#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <functional>
#include <numeric>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <complex>
#include <memory.h>
#include <time.h>

using namespace std;

typedef long long LL;

const int MOD = 51123987;

int n;
char s[1 << 8];
int Next[155][3];

int C[1 << 8][1 << 8];

int dp[55][55][55][4];


int main()
{
	scanf("%d", &n);
	scanf("%s", s);

	for(int i = 0; i < 1 << 8; ++i)
		C[i][i] = 1, C[i][0] = 1;
	for(int i = 2; i < 1 << 8; ++i)
		for(int j = 1; j < i; ++j)
			C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MOD;

	memset(Next, -1, sizeof(Next));

	for(int i = n - 1; i >= 0; --i)
	{
		if (i < n - 1)
			memcpy(Next[i], Next[i + 1], sizeof(Next[i + 1]));
		Next[i][s[i] - 'a'] = i;
	}

	dp[0][0][0][3] = 1;

	for(int pos = 0; pos < n; ++pos)
	{
		for(int i = 0; i < 55; ++i)
			for(int j = 0; j < 55; ++j)
				for(int k = 0; k < 55; ++k)
				{
					if (i == 0 && j == 0 && k == 0)
						continue;
					if (s[pos] == 'a')
					{
						if (i == 0)
							continue;
						dp[i][j][k][0] = 0;
						dp[i][j][k][0] += dp[i - 1][j][k][1];
						if (dp[i][j][k][0] >= MOD)
							dp[i][j][k][0] -= MOD;
						dp[i][j][k][0] += dp[i - 1][j][k][2];
						if (dp[i][j][k][0] >= MOD)
							dp[i][j][k][0] -= MOD;
						dp[i][j][k][0] += dp[i - 1][j][k][3];
						if (dp[i][j][k][0] >= MOD)
							dp[i][j][k][0] -= MOD;
					}
					else if (s[pos] == 'b')
					{
						if (j == 0)
							continue;
						dp[i][j][k][1] = 0;
						dp[i][j][k][1] += dp[i][j - 1][k][0];
						if (dp[i][j][k][1] >= MOD)
							dp[i][j][k][1] -= MOD;
						dp[i][j][k][1] += dp[i][j - 1][k][2];
						if (dp[i][j][k][1] >= MOD)
							dp[i][j][k][1] -= MOD;
						dp[i][j][k][1] += dp[i][j - 1][k][3];
						if (dp[i][j][k][1] >= MOD)
							dp[i][j][k][1] -= MOD;
					}
					else
					{
						if (k == 0)
							continue;
						dp[i][j][k][2] = 0;
						dp[i][j][k][2] += dp[i][j][k - 1][0];
						if (dp[i][j][k][2] >= MOD)
							dp[i][j][k][2] -= MOD;
						dp[i][j][k][2] += dp[i][j][k - 1][1];
						if (dp[i][j][k][2] >= MOD)
							dp[i][j][k][2] -= MOD;
						dp[i][j][k][2] += dp[i][j][k - 1][3];
						if (dp[i][j][k][2] >= MOD)
							dp[i][j][k][2] -= MOD;
					}
				}
	}
	int res = 0;
	for(int i = max(0, n / 3 - 1); i <= (n / 3 + 1); ++i)  
		for(int j = max(0, n / 3 - 1); j <= (n / 3 + 1); ++j)
			for(int k = max(0, n / 3 - 1); k <= (n / 3 + 1); ++k)
				if (i + j + k == n && abs(i - j) <= 1 && abs(i - k) <= 1 && abs(j - k) <= 1)
				{
					for(int ii = 0; ii <= i; ++ii)
						for(int jj = 0; jj <= j; ++jj)
							for(int kk = 0; kk <= k; ++kk)
							{
								LL add = 0;
								for(int t = 0; t < 4; ++t)
									add += dp[ii][jj][kk][t];
								if (i > 0)
									add = add * C[i - 1][i - ii] % MOD;
								if (j > 0)
									add = add * C[j - 1][j - jj] % MOD;
								if (k > 0)
									add = add * C[k - 1][k - kk] % MOD;
								res += add;
								if (res >= MOD)
									res -= MOD;
							}
				}
	printf("%d\n", res);
	return 0;
}