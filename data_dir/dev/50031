#include <bits/stdc++.h>
using namespace std;
const int N = 3e5 + 10;
int par[N], mk[N], d[N], dis[N], n, m, q;
pair<int, int> mx;
vector<int> vec, gr[N];
int getPar(int v) {
	if (par[v] == v)
		return v;
	return par[v] = getPar(par[v]);
}
void addEdge(int x, int y) {
	x = getPar(x), y = getPar(y);
	if (x == y) 
		return;
	par[x] = y, d[y] = max({d[y], d[x], (d[y] + 1) / 2 + (d[x] + 1) / 2 + 1});
}
void dfs(int v, int parent, int mark) {
	if (parent != -1)
		dis[v] = dis[parent] + 1;
	mx = max(mx, {dis[v], v}), vec.push_back(v);
	for (auto u : gr[v]) 
		if (u != parent)
			dfs(u, v, mark);
}	
int main() {
	ios_base::sync_with_stdio (false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> q;
	for (int i = 0; i < m; i++) {
		int x, y;
		cin >> x >> y;
		x--, y--;
		gr[x].push_back(y);
		gr[y].push_back(x);
	}
	iota(par, par + n + 1, 0);
	for (int i = 0; i < n; i++) {
		if (!mk[i]) {
			dfs(i, -1, i + 1);
			int st = mx.second;
			mx = {0, 0};
			for (auto x : vec) {
				dis[x] = 0, par[x] = i, mk[x] = 1;
			}
			vec.clear();
			dfs(st, -1, i + 1);
			d[i] = mx.first;
//			cout << "i = " << i << " : " << d[par[i]] << endl;
			vec.clear();
			mx = {0, 0};
		}
	}
//	cout << endl;
//	for (int i = 0; i < n; i++)
//		cout << par[i] << ", " << d[par[i]] << endl;
//	cout << endl;
	for (int i = 0; i < q; i++) {
		int t, x, y;
		cin >> t;
		if (t == 1) {
			cin >> x;
			x--;
			x = getPar(x);
			cout << d[x] << "\n";
		}
		else {
			cin >> x >> y;
			x--, y--;
			addEdge(x, y);
		}
	}
	return 0;
}
