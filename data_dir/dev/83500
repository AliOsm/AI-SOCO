#include <bits/stdc++.h>
using namespace std;

// why am I so weak

const int B = 800;

int n;	
int ope[300055], a[300055], b[300055];

typedef pair<int, int> P;

#define ft first
#define sd second

bool in[300055];

long long res[300055];

int deq[300055];
int s, t;

bool can[300055];

vector<int> vec;

inline bool check(int i, int j, int k) {
	long long a1 = a[i], b1 = b[i];
	long long a2 = a[j], b2 = b[j];
	long long a3 = a[k], b3 = b[k];

	return (a2 - a1) * (b3 - b2) >= (b2 - b1) * (a3 - a2);
}
inline void construct(int n) {
	for (int i = 0; i < n; i++) {
		if (ope[i] == 1) {
			in[i] = true;
		} else if (ope[i] == 2) {
			in[a[i]] = false;
		}
	}

	for (int i = n; i < min(::n, n + B); i++) {
		if (ope[i] == 2) {
			in[a[i]] = false;
		}
	}

	s = 0, t = 0;

	for (auto u : vec) if (in[u]) {
		while (s + 1 < t && check(deq[t - 2], deq[t - 1], u)) t--;
		deq[t++] = u;
	}
}
inline long long f(int u, int v) {
	return 1ll * a[u] * a[v] + b[v];
}
inline long long gao(int id) {
	while (s + 1 < t && f(id, deq[s]) <= f(id, deq[s + 1])) s++;
	return f(id, deq[s]);
}
int main() {
	scanf("%d", &n);

	for (int i = 0; i < n; i++) {
		scanf("%d %d", &ope[i], &a[i]);
		if (ope[i] == 1) scanf("%d", &b[i]);
		if (ope[i] == 2) a[i]--;
	}

	for (int i = 0; i < n; i++) if (ope[i] == 1) {
		vec.push_back(i);
	}

	sort(vec.begin(), vec.end(), [&] (int u, int v) {
		return a[u] < a[v];
	});

	for (int i = 0; i < n; i += B) {
		construct(i);

		vector<int> q;

		for (int j = i; j < min(n, i + B); j++) if (ope[j] == 3) {
			q.push_back(j);
		}

		sort(q.begin(), q.end(), [&] (int u, int v) {
			return a[u] < a[v];
		});

		for (auto u : q) {
			res[u] = -LLONG_MAX;

			if (s < t) res[u] = gao(u);
		}

		vector<int> buf;

		for (int j = 0; j < i; j++) {
			if (ope[j] == 1) {
				in[j] = true;
			} else if (ope[j] == 2) {
				in[a[j]] = false;
			}
		}

		for (int j = i; j < min(n, i + B); j++) if (ope[j] == 2) {
			buf.push_back(a[j]);
		}

		for (int j = i; j < min(n, i + B); j++) {
			if (ope[j] == 1) {
				in[j] = true;
				buf.push_back(j);
			} else if (ope[j] == 2) {
				in[a[j]] = false;
			} else {
				for (auto u : buf) {
					if (in[u]) res[j] = max(res[j], f(j, u));
				}
			}
		}
	}

	for (int i = 0; i < n; i++) if (ope[i] == 3) {
		if (res[i] == -LLONG_MAX) puts("EMPTY SET");
		else printf("%lld\n", res[i]);
	}

	return 0;
}

