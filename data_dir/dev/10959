#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define Fit(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define inf 1000000005
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))
#define mod 1000000007
#define sz(a) ((int)(a).size())

template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcountll(s);}

#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)

const int bfsz = 1 << 16; char bf[bfsz + 5]; int rsz = 0;int ptr = 0;
char gc() { if (rsz <= 0) { ptr = 0; rsz = (int) fread(bf, 1, bfsz, stdin); if (rsz <= 0) return EOF; } --rsz; return bf[ptr++]; }
void ga(char &c) { c = EOF; while (!isalpha(c)) c = gc(); }
int gs(char s[]) { int l = 0; char c = gc(); while (isspace(c)) c = gc(); while (c != EOF && !isspace(c)) { s[l++] = c; c = gc(); } s[l] = '\0'; return l; }
template<class T> bool gi(T &v) {
    v = 0; char c = gc(); while (c != EOF && c != '-' && !isdigit(c)) c = gc(); if (c == EOF) return false; bool neg = c == '-'; if (neg) c = gc();
    while (isdigit(c)) { v = v * 10 + c - '0'; c = gc(); } if (neg) v = -v; return true;
}

typedef unsigned long long ull;
typedef long long ll;
typedef double ld;
#define eps 1e-9
typedef pair<int, int> II;
template<class T> T gcd(T a, T b){ T r; while (b != 0) { r = a % b; a = b; b = r; } return a;}
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
#define PI 2 * acos(0)

#define maxn 1005

string s[maxn];
int n, m, a[maxn][maxn], rs, cs;
int number = 0;

bool inside(int r, int c){
    return r >= 1 && r <= n && c >= 1 && c <= m;
}

int cal(int r1, int c1, int r2, int c2){
    return a[r2][c2] - a[r1][c2] - a[r2][c1] + a[r1][c1];
}

bool can(int addr, int addc){
//  cout << addr << " " << addc << endl;
    int area = addr * addc;
    int r = rs + addr - 1, c = cs + addc - 1, rr, cc;
    if(cal(r - addr, c - addc, r, c) != area) return false;
    int S = area;
    while(true){
        rr = r + 1; cc = c;
        if(inside(rr, cc) && cal(rr - addr, cc - addc, rr, cc) == area){
            r = rr; c = cc;
            S += addc;
            continue;
        }
        rr = r; cc = c + 1;
        if(inside(rr, cc) && cal(rr - addr, cc - addc, rr, cc) == area){
            r = rr; c = cc;
            S += addr;
            continue;
        }
        break;
    }
    return S == number;
}

int main() {
//  freopen("highways.in", "r", stdin);
//  freopen("highways.out", "w", stdout);
//    freopen("in.txt", "r", stdin);
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> m;
    rs = -1; cs = -1;
    ms(a, 0);
    For(i, 1, n){
        cin >> s[i];
        s[i] = "." + s[i];
        For(j, 1, m) {
            a[i][j] = a[i - 1][j] + a[i][j - 1] - a[i - 1][j - 1];
            if(s[i][j] == 'X'){
                number++;
                if(rs == -1){
                    rs = i;
                    cs = j;
                }
                a[i][j]++;
            }
        }
    }
    int w = 1, h = 1;

    while(inside(rs, cs + w) && s[rs][cs + w] == 'X') w++;
    while(inside(rs + h, cs) && s[rs + h][cs] == 'X') h++;

    int res = inf;
    For(i, 1, w) if(can(h, i)) res = min(res, i * h);
    For(i, 1, h) if(can(i, w)) res = min(res, i * w);
    if(res >= inf){
        cout << -1 << endl;
    } else cout << res << endl;

    return 0;

}
