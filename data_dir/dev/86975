#include <bits/stdc++.h>
#define LL long long
#define pb push_back
#define mp make_pair
#define fi first
#define sc second
using namespace std;

LL mod = 1000000009;
LL f[300100], g[300100], sumF[300100], sumG[300100];
LL tree[1300100];
pair<LL,LL> lazy[1300100];
LL sum[300100];

void precompute() {
	f[1] = 1, f[2] = 0;
	g[1] = 0, g[2] = 1;
	sumF[1] = 1, sumF[2] = 1;
	sumG[1] = 0, sumG[2] = 1;
	
	for(int i = 3; i <= 300000; i++) {
		f[i] = (f[i-1] + f[i-2]) % mod;
		g[i] = (g[i-1] + g[i-2]) % mod;
		sumF[i] = (sumF[i-1] + f[i]) % mod;
		sumG[i] = (sumG[i-1] + g[i]) % mod;
	}
}

LL getFib(LL a, LL b, LL c) {
	return (((a * f[c]) % mod) + (b * g[c]) % mod) % mod;
}

void propagate(int node, int a, int b) {
	if(lazy[node].fi || lazy[node].sc) {
		LL x = lazy[node].fi;
		LL y = lazy[node].sc;
		
		tree[node] = (tree[node] + ((x * sumF[b-a+1]) % mod)) % mod;
		tree[node] = (tree[node] + ((y * sumG[b-a+1]) % mod)) % mod;
//		cout<<node<<" "<<a<<" "<<b<<" "<<x<<" "<<y<<endl;
//		cout<<tree[node]<<endl;
		
		lazy[node*2].fi = (lazy[node*2].fi + x) % mod;
		lazy[node*2].sc = (lazy[node*2].sc + y) % mod;
		
		int mid = (a + b) / 2;
		lazy[node*2+1].fi = (lazy[node*2+1].fi + getFib(x, y, mid-a+2)) % mod;
		lazy[node*2+1].sc = (lazy[node*2+1].sc + getFib(x, y, mid-a+3)) % mod;
		
		lazy[node] = mp(0, 0);
	}
}

void update(int node, int a, int b, int i, int j) {
	propagate(node, a, b);
	if(a > b || a > j || b < i) return;
	if(a >= i && b <= j) {
		lazy[node].fi = (lazy[node].fi + getFib(1, 1, a-i+1)) % mod;
		lazy[node].sc = (lazy[node].sc + getFib(1, 1, a-i+2)) % mod;
		propagate(node, a, b);
		return;
	}
	update(node*2, a, (a+b)/2, i, j);
	update(node*2+1, (a+b)/2+1, b, i, j);
	tree[node] = (tree[node*2] + tree[node*2+1]) % mod;
}

LL query(int node, int a, int b, int i, int j) {
	propagate(node, a, b);
	if(a > b || a > j || b < i) return 0;
	if(a >= i && b <= j) return tree[node];
	LL q1 = query(node*2, a, (a+b)/2, i, j);
	LL q2 = query(node*2+1, (a+b)/2+1, b, i, j);
	return (q1 + q2) % mod;
}

int main() {
	LL n, m, q, x, y;
	scanf("%lld %lld", &n, &q);
	for(int i = 1; i <= n; i++) {
		scanf("%lld\n", &x);
		sum[i] = (sum[i-1] + x) % mod;
	}
	precompute();
	while(q--) {
		scanf("%lld %lld %lld", &m, &x, &y);
		if(m==1) update(1, 1, n, x, y);
		else {
			LL ans = query(1, 1, n, x, y);
//			cout<<"ASD: "<<ans<<endl;
			cout<<(ans + sum[y] - sum[x-1] + mod) % mod<<endl;
		}
	}
	return 0;
}