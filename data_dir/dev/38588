#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAX = 3e3 + 5;
const int MOD = 1e9 + 7;
char str[MAX];
int p[MAX], memo_A[MAX][MAX], memo_F[MAX][MAX], memo_C[MAX][MAX];
int mark_A[MAX][MAX], mark_F[MAX][MAX], mark_C[MAX][MAX];
int k, n, m, pass = 1;

inline int add(int a, int b) {
	a += b;
	if(a >= MOD) {
		a -= MOD;
	}
	return a;
}

void build_prefix_function() {
	n = strlen(str);
	fori(i, 2, n + 1) {
		p[i] = p[i - 1];
		while(p[i] > 0 && str[p[i]] != str[i - 1]) {
			p[i] = p[p[i]];
		}
		if(str[p[i]] == str[i - 1]) {
			p[i]++;
		}
	}
}

// next state of str-pfa when fed by food
int A(int state, int food) {
	if(state == 0) {
		return (str[0] - 'a') == food;	
	}
	int &ans = memo_A[state][food];
	if(mark_A[state][food] == pass) {
		return ans;
	}
	mark_A[state][food] = pass;
	if((str[state] - 'a') == food) {
		ans = state + 1;
	}
	else {
		ans = A(p[state], food);
	}
	return ans;
}

// next state of str-pfa when fed by Fib(food)
int F(int state, int food) {
	if(food == 0) {
		return state;
	}
	else if(food <= 2) {
		return A(state, food - 1); 
	}
	int &ans = memo_F[state][food];
	if(mark_F[state][food] == pass) {
		return ans;
	}
	mark_F[state][food] = pass;
	ans = F(F(state, food - 1), food - 2);
	return ans;
}

// count of matches of str on str-pfa when fed with Fib(food)
int C(int state, int food) {
	if(food == 0) {
		return 0;
	}
	else if(food <= 2) {
		return A(state, food - 1) == n;
	}
	int &ans = memo_C[state][food];
	if(mark_C[state][food] == pass) {
		return ans;
	}
	mark_C[state][food] = pass;
	ans = add(C(state, food - 1), C(F(state, food - 1), food - 2));
	return ans;
}

int main() {
	scanf("%d %d", &k, &m);
	fori(i, 0, m) {
		scanf("%s", str);
		build_prefix_function();
		int ans = C(0, k);
		printf("%d\n", ans);
		pass++;
	}

	return 0;
}

