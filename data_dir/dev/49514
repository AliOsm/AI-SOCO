#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

const int N = 300000, M = 300000;

struct V {
	vector<int> adj, ice;
} vv[N];

int color[M + 1];

void dfs(int p, int i) {
	auto &ice = vv[i].ice;
	sort(ice.begin(), ice.end(), [] (int a, int b) { return color[a] < color[b]; });
	int h = 0, m = ice.size();
	while (h < m && color[ice[h]] == 0)
		h++;
	for (int p = 0, q = h, c = 1; p < h; p++) {
		while (q < m && c == color[ice[q]]) {
			q++;
			c++;
		}
		color[ice[p]] = c++;
	}
	for (int j : vv[i].adj)
		if (j != p)
			dfs(i, j);
}

int main() {
	int n, m;
	cin >> n >> m;
	int k = 0;
	for (int i = 0; i < n; i++) {
		int s;
		cin >> s;
		k = max(k, s);
		while (s-- > 0) {
			int c;
			cin >> c;
			vv[i].ice.push_back(c);
		}
	}
	for (int h = 0; h < n - 1; h++) {
		int i, j;
		cin >> i >> j;
		i--, j--;
		vv[i].adj.push_back(j);
		vv[j].adj.push_back(i);
	}
	dfs(-1, 0);
	if (k == 0)
		k = 1;
	for (int c = 1; c <= m; c++)
		if (color[c] == 0)
			color[c] = 1;
	cout << k << endl;
	for (int c = 1; c <= m; c++)
		cout << color[c] << ' ';
	cout << endl;
	return 0;
}
