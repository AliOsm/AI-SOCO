#include <bits/stdc++.h>
#define ll long long int
using namespace std;
int const MAXN=2e5+6;
ll a[MAXN],tree[4*MAXN],lazy[4*MAXN];
void affiche (){
    for (int i=1;i<9;i++){
        printf ("tree[%d] = %lld \n",i,tree[i]);
    }
}
    void build (int node,int start,int end){
        if (start==end){
            tree[node]=a[start];
            return ;
        }
        int mid=(start+end)/2;
        build(2*node,start,mid);
        build(2*node+1,mid+1,end);
        tree[node]=min(tree[2*node],tree[2*node+1]);
    }
    void update (int node,ll start,ll end,int l,int r,ll val){
        if (lazy[node]){
             tree[node]+=lazy[node];
             if (start!=end){
                lazy[2*node]+=lazy[node];
                lazy[2*node+1]+=lazy[node];
             }
             lazy[node]=0;
        }
        if (r<start or end<l or start> end) return;
        if (l<=start && end<=r){
              tree[node]+=val;
              if(start!=end){
                lazy[2*node]+=val;
                lazy[2*node+1]+=val;
              }
              return;
        }
        int mid=(start+end)/2;
        update (2*node,start,mid,l,r,val);
        update (2*node+1,mid+1,end,l,r,val);
        tree[node]=min(tree[2*node],tree[2*node+1]);
    }
    ll query (int node,ll start,ll end,int l,int r){
        if (r<start or end<l or start> end ) return 1e18;
       if (lazy[node]){
             tree[node]+=lazy[node];
             if (start!=end){
                lazy[2*node]+=lazy[node];
                lazy[2*node+1]+=lazy[node];
             }
             lazy[node]=0;
        }
     if (l<=start && end<=r) return tree[node];
     int mid=(start+end)/2;
     ll left=query(2*node,start,mid,l,r);
     ll right=query(2*node+1,mid+1,end,l,r);
     return min(left,right);
    }
int main (){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    memset(a,0,sizeof a);
    memset (lazy,0,sizeof lazy);
    memset (tree,0,sizeof tree);
    int n;
    scanf ("%d",&n);
    for (int i=0;i<n;i++)
        scanf("%lld",a+i);
    build(1,0,n-1);
    int q;
   scanf ("%d",&q);
   char ch[50];
   gets(ch);
    while (q--){
        ll l,r,val;
        char line[500];
        if (sscanf(gets(line),"%lld%lld%lld",&l,&r,&val)==3){
           if (l>r){
                update(1,0,n-1,l,n-1,val);
                update (1,0,n-1,0,r,val);
            }else update (1,0,n-1,l,r,val);
        }else {
            if (l>r){
                ll left=query(1,0,n-1,l,n-1);
                ll right=query (1,0,n-1,0,r);
                printf("%lld \n",min(left,right));
            }else printf("%lld \n",query (1,0,n-1,l,r));

        }
        //printf ("L= %lld r=%lld \n",l,r);
    }




}
