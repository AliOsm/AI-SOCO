#include <cstdio>
#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <map>
#include <stack>

using namespace std;

typedef long long LL;

const int INF=1e9+7;
stack<int> q;
int n,fa[500005];
char s[10];
vector<pair<int,int> >v[500005];
int f[5000005];
int siz[500005],ans[500005];
int minx;
bool vis[500005];
void dfs(int x,int ga)
{
	siz[x]=1;
	for (int i=0;i<v[x].size();++i)
	{
		int y=v[x][i].first;
		if (y==ga) continue;
		if (vis[y]) continue;
		dfs(y,x);siz[x]+=siz[y];
	}
}
void getroot(int x,int fa,int sum,int &root)
{
	int maxx=sum-siz[x];
	for (int i=0;i<v[x].size();++i)
	{
		int y=v[x][i].first;
		if (y==fa) continue;
		if (vis[y]) continue;
		getroot(y,x,sum,root);
		maxx=max(maxx,siz[y]);
	}
	if (maxx<minx)
	{
		minx=maxx;
		root=x;
	}
}
void dfs2(int x,int ga,int top,int dep,int mask)
{

	int dq;
	dq=dep+f[mask];
	for (int i=0;i<22;++i) 
		dq=max(dq,dep+f[mask^(1<<i)]);
	ans[top]=max(ans[top],dq);

	for (int i=0;i<v[x].size();++i)
	{
		int y=v[x][i].first;
		if (vis[y]) continue;
		if (y==ga) continue;
		if (y==fa[x]) dfs2(y,x,y,dep+1,mask^(1<<v[x][i].second));
		else dfs2(y,x,top,dep+1,mask^(1<<v[x][i].second));
	}
}
void paint(int x,int ga,int dep,int mask)
{
	f[mask]=max(f[mask],dep);
	q.push(mask);
	for (int i=0;i<v[x].size();++i)
	{
		int y=v[x][i].first;
		if (vis[y]) continue;
		if (y==ga) continue;
		paint(y,x,dep+1,mask^(1<<v[x][i].second));
	}
}
void work(int x)
{
	int sum,root,y;
	dfs(x,-1);
	sum=siz[x];
	minx=1e9;
	getroot(x,-1,sum,root);
	vis[root]=true;
	while (!q.empty())
	{
		y=q.top();
		f[y]=-1e9;
		q.pop();
	}
	f[0]=0;
	q.push(0);
	for (int i=0;i<v[root].size();++i)
	{
		y=v[root][i].first;
		if (vis[y]||y==fa[root]) continue;
		dfs2(y,root,root,1,1<<v[root][i].second);
		paint(y,root,1,1<<v[root][i].second);
	}
	for (int i=0;i<v[root].size();++i)
	{
		y=v[root][i].first;
		if (vis[y]||y!=fa[root]) continue;
		dfs2(y,root,y,1,1<<v[root][i].second);
	}
	for (int i=0;i<v[root].size();++i)
	{
		y=v[root][i].first;
		if (vis[y]) continue;
		work(y);
	}
	vis[root]=false;
}
void dfs3(int x,int ga)
{
	for (int i=0;i<v[x].size();++i)
	{
		int y=v[x][i].first;
		if (y==ga) continue;
		dfs3(y,x);
		ans[x]=max(ans[x],ans[y]);
	}
}
int main()
{
	scanf("%d",&n);
	for (int i=2;i<=n;++i)
	{
		scanf("%d",&fa[i]);
		scanf("%s",s);
		v[i].push_back(make_pair(fa[i],s[0]-'a'));
		v[fa[i]].push_back(make_pair(i,s[0]-'a'));
	}
	memset(vis,false,sizeof(vis));
	for (int i=0;i<(1<<22);++i) f[i]=-1e9;
	for (int i=1;i<=n;++i) ans[i]=0;
	work(1);
	dfs3(1,-1);
	for (int i=1;i<=n;++i) printf("%d ",ans[i]);
	return 0;
}