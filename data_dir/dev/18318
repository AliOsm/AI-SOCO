#include<bits/stdc++.h>
#define int long long int
#define ld long double
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD2 998244353
#define MOD1 1e9+7
#define f first
#define s second
#define endl '\n'
#define pii pair<int,int>
#define piii pair<pii,int>
#define precise(i) cout<<fixed<<setprecision(i)
using namespace std;
const long double PI = atan(1.0)*4;
const int64_t INF=1000000000000000003;
const int32_t LOG=21;
const int MOD=MOD2; 
int a[200005];
bool ok[200005];
bool ok1[200005];
bool check[200005];
int32_t main()
{ 
      getFaster;
      int tests=1;
      cin>>tests;
      rep(ii,0,tests)
      {
          int n;
          cin>>n;
          
          fill(check,check+n+2,false);

          rep(i,1,n+1)
          cin>>a[i];
          
          int min1=n+2,max1=0;
          bool stop=false;
          rep(i,1,n+1)
          {
               if(check[a[i]] || stop)
               {
                    stop=true;
                    ok[i]=false;
                    continue; 
               }   
               check[a[i]]=true;
               min1=min(min1,a[i]);
               max1=max(max1,a[i]);
               if(min1==1 && max1==i)
               ok[i]=true;
               else
               ok[i]=false;   
          }

          fill(check,check+n+2,false);
          
          min1=n+2,max1=0;
          stop=false;
          rev(i,n,1)
          {
               if(check[a[i]] || stop)
               {
                  stop=true;
                  ok1[i]=false;
                  continue;
               }   

               check[a[i]]=true;
               min1=min(min1,a[i]);
               max1=max(max1,a[i]);
               if(min1==1 && max1==n-i+1)
               ok1[i]=true;
               else
               ok1[i]=false;
          }

          vector<pii> ans;
          rep(i,1,n)
          {
              if(ok[i] && ok1[i+1])
              ans.push_back({i,n-i});    
          }

          cout<<ans.size()<<endl;
          rep(i,0,ans.size())cout<<ans[i].f<<" "<<ans[i].s<<endl;

      }
      return 0;                         
}

/*
 TIPS(FOR ME):
 1.) Check for corner cases (like 0 is exception case)
 2.) Check for global memory sizes,memory refreshments and its complexity 
 3.) Check for sorting criteria (if used 1-based indexing)
 4.) Check for numbers overflow (while multiplying and doing MOD)
 5.) Check for typecasting issues like int to float( while dividing numbers)
*/
