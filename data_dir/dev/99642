#include "bits/stdc++.h"
//#include "ext/pb_ds/tree_policy.hpp"
//#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 710;
typedef complex<ll> point;
//const ll mod = 1e9+7;
const ld eps = 1e-9;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}
ll n,k,l,mod;

struct matrix{
    vector<vector<ll>>v;
    int x,y;
    matrix(int n=0,int m=0,int value = 0):x(n),y(m){
        REP(i,0,n){
            v.PB(vector<ll>(m,0));
        }
        if(value == 1){
            REP(i,0,n)v[i][i]=1;
        }
    }
    
    matrix operator*(const matrix&o)const{
        matrix ans(x,o.y);
        REP(i,0,x){
            REP(j,0,o.y){
                REP(k,0,y){
                    ans.v[i][j] = (ans.v[i][j]+v[i][k]*o.v[k][j])%mod;
                }
            }
        }
        return ans;
    }
    matrix operator+(const matrix&o)const{
        assert(x == o.x && y == o.y);
        matrix ans = *this;
        REP(i,0,x){
            REP(j,0,y){
                ans.v[i][j]+=o.v[i][j];
                ans.v[i][j]%=mod;
            }
        }
        return ans;
    }
    
    
    friend matrix fast(matrix a,ll b){
        matrix ans(a.x,a.y,1);
        assert(a.x==a.y);
        while(b){
            if(b&1){
                b--;
                ans = ans*a;
            }else{
                b/=2;
                a = a*a;
            }
        }
        return ans;
    }
    
    void print(){
        printf("row = %d, column = %d\n",x,y);
        REP(i,0,x){
            REP(j,0,y){
                cout<<v[i][j]<<' ';
            }
            cout<<endl;
        }
        cout<<endl;
    }
};

int main(){
    //fr("/Users/zhangqingchuan/Desktop/做题/做题/input.txt");
    cin>>n>>k>>l>>mod;
    matrix base(4,4);
    base.v = {{1,1,0,0},{1,0,0,0},{0,1,1,1},{0,0,1,1}};
    matrix product = fast(base,n);
    ll ans = 1;
    matrix ini(4,1);
    ini.v = {{1},{0},{0},{0}};
    ini = product*ini;
    ll zero = ini.v[0][0]+ini.v[1][0];
    ll one = ini.v[2][0]+ini.v[3][0];
    
    REP(i,0,l){
        if(1LL<<i&k){
            ans = (ans*one)%mod;
        }else{
            ans = (ans*zero)%mod;
        }
    }
    REP(i,l,64){
        if(1LL<<i&k){
            puts("0");return 0;
        }
    }
    cout<<ans%mod;
    return 0;
}
