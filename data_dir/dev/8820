#pragma comment(linker, "/STACK:64000000")
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

queue<ll> q;
map<ll, int> dp;
map<ll, ll> par;

int main(){

    int a, b;

    scanf("%d%d", &a, &b);
    q.push(a);
    dp[a] = 0;
    while (!q.empty()) {
        ll v = q.front();
        q.pop();
        if (v > b) continue;
        ll nxt = 2ll * v;
        if (dp.count(nxt) == 0) {
            dp[nxt] = dp[v] + 1;
            par[nxt] = v;
            q.push(nxt);
        }
        nxt = 10ll * v + 1;
        if (dp.count(nxt) == 0) {
            dp[nxt] = dp[v] + 1;
            par[nxt] = v;
            q.push(nxt);
        }
    }

    if (dp.count(b) == 0) {
        cout << "NO" << endl;
    } else {
        cout << "YES" << endl;
        vector<ll> ans;
        ll x = b;
        while (x != a) {
            ans.pb(x);
            x = par[x];
        }
        ans.pb(x);
        reverse(all(ans));
        cout << ans.size() << endl;
        for (int i = 0; i < ans.size(); i++) {
            if (i > 0) cout << " ";
            cout << ans[i];
        }
        cout << endl;
    }

    return 0;
}
