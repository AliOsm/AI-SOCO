#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()

typedef tree<pair<ll,ll> ,null_type,less<pair<ll,ll> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth smallest: " << *A.find_by_order(k-1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

vector<ll>pr, ans;
ll np[1000000];

void soe()
{
	for(int i=2;i<1000000;i++)
	{
		if(np[i] == 0)
		{	
			for(int j=2*i;j<1000000;j+=i)
				np[j] = 1;
		}	
	}
}

int main()
{
	std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

 	ll n;
 	cin >> n;
 	ll a[n], oc = 0, tc = 0;
 	for(int i=0;i<n;i++)
 	{ 
 		cin >> a[i];
 		if(a[i] == 1) oc++;
 		else tc++;
 	}
	soe();
	for(int i=2;i<1000000;i++) if(!np[i]) pr.pb(i);
	ll curr = 0, ind = 0;
	while(1)
	{	
		ll val = pr[ind] - curr;
		if( val % 2 == 0)
		{
			if(tc >= 1)
			{
				ans.pb(2);
				tc -= 1;
				curr += 2;
			}
			else if(oc >= 2)
			{
				ans.pb(1);
				ans.pb(1);
				oc -= 2;
				curr += 2;
			}
			else if(oc == 1)
			{
				ans.pb(1);
				oc -= 1;
				curr += 1;
			}
		}
		else
		{
			if(val > 1)
			{
				if(tc >= 1)
				{
					ans.pb(2);
					tc -= 1;
					curr += 2;
				}
				else if(oc >= 1)
				{	
					ans.pb(1);
					oc -= 1;
					curr += 1;
				}	
			}
			else if(val == 1)
			{
				if(oc >= 1)
				{
					ans.pb(1);
					oc -= 1;
					curr += 1;
				}
				else if(tc >= 1)
				{
					ans.pb(2);
					tc -= 1;
					curr += 2;
				}
			}
		}
		if(tc == 0 && oc == 0) break;
		if(curr >= pr[ind]) ind++;
	}
	for(int i=0;i<sz(ans);i++) cout << ans[i] << " ";
	cout << endl;	
    return 0;
}