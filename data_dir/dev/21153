#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cstring>
using namespace std;

#define pb push_back
#define rs resize
#define mp make_pair
#define inf 1e9
#define pi 3.1415926535897932384626433832795
#define sz(a) (a).size()
#define sort(a) sort((a).begin(), (a).end())
#define reverse(a) reverse((a).begin(), (a).end())
#define sf scanf
#define pf printf

typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <vvi> vvvi;
typedef vector <vvvi> vvvvi;
typedef vector <bool> vb;
typedef vector <vb> vvb;
typedef vector <vvb> vvvb;
typedef vector <vvvb> vvvvb;
typedef long long ll;
typedef vector <ll> vl;
typedef vector <vl> vvl;
typedef vector <vvl> vvvl;
typedef vector <vvvl> vvvvl;
typedef pair <int, int> ii;
typedef vector <ii> vii;
typedef vector <vii> vvii;
typedef pair <int, ll> il;
typedef vector <il> vil;
typedef vector <vil> vvil;
typedef pair <ll, int> li;
typedef vector <li> vli;
typedef vector <vli> vvli;
typedef set <int> si;
typedef set <li> sli;
typedef set <il> sil;
typedef vector <string> vs;
typedef vector <vs> vvs;
typedef vector <vvs> vvvs;
typedef map <string, int> msi;
typedef map <char, int> mci;
typedef pair <ll, ll> pll;

const int bits = 17;
map <int, int> lef[17], rig[17];
ll ans = 0;

void add(int p, int x)
{
    for (int i = 0; i < 17; ++i, x /= 2)
    {
        if (x % 2 == 1)
        {
            if (lef[i].count(p + 1) && rig[i].count(p - 1))
            {
                int l1 = rig[i][p - 1], r1 = p - 1, l2 = p + 1, r2 = lef[i][p + 1];
                ans -= ((ll)(r1 - l1 + 1) * (ll)(r1 - l1) / 2 + (ll)(r1 - l1 + 1)) * (ll)(1 << i);
                ans -= ((ll)(r2 - l2 + 1) * (ll)(r2 - l2) / 2 + (ll)(r2 - l2 + 1)) * (ll)(1 << i);
                ans += ((ll)(r2 - l1 + 1) * (ll)(r2 - l1) / 2 + (ll)(r2 - l1 + 1)) * (ll)(1 << i);
                rig[i].erase(p - 1);
                lef[i].erase(p + 1);
                rig[i][r2] = l1;
                lef[i][l1] = r2;
                continue;
            }
            if (rig[i].count(p - 1))
            {
                int l = rig[i][p - 1], r = p - 1;
                ans -= ((ll)(r - l + 1) * (ll)(r - l) / 2 + (ll)(r - l + 1)) * (ll)(1 << i);
                ans += ((ll)(p - l + 1) * (ll)(p - l) / 2 + (ll)(p - l + 1)) * (ll)(1 << i);
                rig[i].erase(p - 1);
                rig[i][p] = l;
                lef[i][l] = p;
                continue;
            }
            if (lef[i].count(p + 1))
            {
                int l = p + 1, r = lef[i][l];
                ans -= ((ll)(r - l + 1) * (ll)(r - l) / 2 + (ll)(r - l + 1)) * (ll)(1 << i);
                ans += ((ll)(r - p + 1) * (ll)(r - p) / 2 + (ll)(r - p + 1)) * (ll)(1 << i);
                lef[i].erase(p + 1);
                lef[i][p] = r;
                rig[i][r] = p;
                continue;
            }
            if (rig[i].lower_bound(p) != rig[i].end())
            {
                int r = rig[i].lower_bound(p)->first, l = rig[i].lower_bound(p)->second;
                if (l <= p)
                {
                    continue;
                }
            }
            ans += (ll)(1 << i);
            lef[i][p] = rig[i][p] = p;
            continue;
        }
        else
        {
            if (rig[i].lower_bound(p) == rig[i].end())
            {
                continue;
            }
            int r = rig[i].lower_bound(p)->first, l =  rig[i].lower_bound(p)->second;
            if (l > p)
            {
                continue;
            }
            if (l == p && r == p)
            {
                lef[i].erase(p);
                rig[i].erase(p);
                ans -= (ll)(1 << i);
                continue;
            }
            if (l == p)
            {
                lef[i].erase(l);
                lef[i][l + 1] = r;
                rig[i][r] = p + 1;
                ans -= (ll)(r - l + 1) * (ll)(1 << i);
                continue;
            }
            if (r == p)
            {
                ans -= (ll)(r - l + 1) * (ll)(1 << i);
                lef[i][l] = p - 1;
                rig[i].erase(p);
                rig[i][p - 1] = l;
                continue;
            }
            ans -= ((ll)(r - l + 1) * (ll)(r - l) / 2 + (ll)(r - l + 1)) * (ll)(1 << i);
            ans += ((ll)(p - 1 - l + 1) * (ll)(p - 1 - l) / 2 + (ll)(p - 1 - l + 1)) * (ll)(1 << i);
            ans += ((ll)(r - p - 1 + 1) * (ll)(r - p - 1) / 2 + (ll)(r - p - 1 + 1)) * (ll)(1 << i);
            lef[i][l] = p - 1;
            lef[i][p + 1] = r;
            rig[i][r] = p + 1;
            rig[i][p - 1] = l;
        }
    }
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < n; ++i)
    {
        int x;
        sf("%d\n", &x);
        add(i, x);
    }
    for (int i = 0; i < m; ++i)
    {
        int p, v;
        sf("%d %d", &p, &v);
        p--;
        add(p, v);
        pf("%I64d\n", ans);
    }
}