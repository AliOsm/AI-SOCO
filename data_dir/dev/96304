//http://codeforces.com/contest/862/problem/B

#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <algorithm>
#include <iterator>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <iomanip>

using namespace std;

typedef pair <int, int> pii;
typedef pair <long long, long long> pll;
typedef vector <int> vi;
typedef long long ll;

#define endl "\n"
#define mp make_pair

const int mod = 1000000007;

int n, color[100005];
vector <vector <int>> e;
ll result = 0, len1 = 0, len2 = 0, cl1 = 0, cl2 = 0, cl3 = 0;

void dfs(int cur, int c, int p);

int main() {
	int u, v;

	ios::sync_with_stdio(false);
	cin.tie(NULL);

	cin >> n;

	e.resize(n + 1);

	for (int i = 1; i < n; i++) {
		cin >> u >> v;

		e[u].push_back(v);
		e[v].push_back(u);
	}

	dfs(1, 2, 1);

	for (int i = 1; i <= n; i++) {
		if (color[i] == 1)
			len1++;
		else
			len2++;
	}

	for (int i = 1; i <= n; i++) {
		for (int j = 0; j < e[i].size(); j++) {
			if (color[i] != color[e[i][j]])
				cl3++;
		}
	}

	cl3 /= 2;

	result += (len1 * len2) - cl3;
	
	cout << result << endl;

	return 0;
}

void dfs(int cur, int c, int p) {
	color[cur] = c;

	if (c == 1)
		c = 2;
	else
		c = 1;

	for (int i = 0; i < e[cur].size(); i++) {
		if (e[cur][i] != p)
			dfs(e[cur][i], c, cur);
	}
}