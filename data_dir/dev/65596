/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 04-Sep-2018 17:02:46
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> inline void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 5e3 + 7;
const int mod = (int) 1e9 + 7;

int dp[N], tdp[N];
int l = 1, r, a, b, k;

int Ways(int x) {
    return dp[x];
}

int Ways(int l, int r) {
    if (l > r) return 0;
    int ret = Ways(r) - Ways(l - 1);
    return (ret % mod + mod) % mod;
}

int solve() {
    Int(r, a); Int(b, k);

    if (a < b) r = b - 1;
    if (a > b) l = b + 1;

    FOR (i, l, r) dp[i] = 1;

    FOR (j, 1, k) {
        FOR (i, l, r) {
            tdp[i] = 0;
            dp[i] += dp[i - 1];
            dp[i] %= mod;
        }
        FOR (i, l, r) {
            int mxDist = abs(b - i) - 1;

            tdp[i] += Ways(max(l, i - mxDist), i - 1);
            tdp[i] += Ways(i + 1, min(r, i + mxDist));

            if (tdp[i] > mod) tdp[i] -= mod;
        }
        FOR (i, l, r) dp[i] = tdp[i];
    }

    printf("%d\n", dp[a]);

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; //Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}