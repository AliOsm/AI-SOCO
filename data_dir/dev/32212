#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <iostream>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef unsigned long long llu;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
const ll MOD = 1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v[100000];
vector<pii> edg;

int n;

int go(int o) {
	int deg[100000] = { 0 };
	queue<int> q;

	for (int i = 0; i < n; i++)
		v[i].clear();

	for (int i = 0; i <= o; i++) {
		v[edg[i].first].push_back(edg[i].second);
		deg[edg[i].second]++;
	}
	for (int i = 0; i < n; i++)
		if(!deg[i]) q.push(i);

	int tv;
	int cnt = 0;

	while (!q.empty()) {
		tv = q.front();
		q.pop();
		cnt++;

		if (!q.empty()) return 0;

		for (int i = 0; i < sz(v[tv]); i++)
			if (--deg[v[tv][i]] == 0) q.push(v[tv][i]);
	}

	return cnt == n;
}

int main() {
	int m;
	scanf("%d %d", &n, &m);

	int a, b;
	for (int i = 0; i < m; i++) {
		scanf("%d %d", &a, &b);
		a--; b--;
		edg.push_back({ a, b });
	}

	int l = 0, r = m - 1, mid;
	while (l <= r) {
		mid = (l + r) / 2;

		if (go(mid)) r = mid - 1;
		else l = mid + 1;
	}

	if (l == m) return !printf("-1");
	printf("%d", l + 1);
}