#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> ii;
typedef tuple<int,int,int> i3;

struct SegmentTree{
    vector<ll> v, tree, lazy;
    int n;
    
    SegmentTree(){}
    SegmentTree(vector<ll> _v){
        v = _v;
        n = v.size();
        tree.assign(4*n, 0);
        lazy.assign(4*n, 0);
        build(1, 0, n-1);
    }
    
    int left(int u){return (u << 1);}
    int right(int u){return (u << 1) + 1;}
    
    void build(int u, int L, int R){
        if(L == R) tree[u] = v[L];
        else{
            int mid = (L+R)/2;
            build(left(u), L, mid);
            build(right(u), mid+1, R);
            tree[u] = min(tree[left(u)], tree[right(u)]);
        }
    }
    
    void push(int u, int L, int R){
        if(lazy[u] != 0){
            tree[u] += lazy[u];
            if(L != R){
                lazy[left(u)] += lazy[u];
                lazy[right(u)] += lazy[u];
            }
            lazy[u] = 0;
        }
    }
    
    void update(int u, int L, int R, int i, int j, int x){
        push(u, L, R);
        if(R < i || j < L) return;
        if(L >= i && R <= j){
            lazy[u] += x;
            push(u, L, R);
            return;
        }
        int mid = (L+R)/2;
        update(left(u), L, mid, i, j, x);
        update(right(u), mid+1, R, i, j, x);
        tree[u] = min(tree[left(u)], tree[right(u)]);
    }
    
    void update(int esq, int dir, int x){
        if(esq <= dir) return update(1, 0, n-1, esq, dir, x);
        else{
            update(1, 0, n-1, esq, n-1, x);
            update(1, 0, n-1, 0, dir, x);
        }
    }
    
    ll query(int esq, int dir){
        if(esq <= dir) return query(1, 0, n-1, esq, dir);
        else{
            ll r1 = query(1, 0, n-1, esq, n-1);
            ll r2 = query(1, 0, n-1, 0, dir);
            return min(r1,r2);
        }
    }
    
    ll query(int u, int L, int R, int i, int j){
        push(u, L, R);
        if(R < i || j < L) return 1e18;
        if(L >= i && R <= j) return tree[u];
        int mid = (L+R)/2;
        ll r1 = query(left(u), L, mid, i, j);
        ll r2 = query(right(u), mid+1, R, i, j);
        return min(r1,r2);
    }
    
    
    
};

int main(){

    cout.sync_with_stdio(0);
    cin.tie(0);
    
    
    int n; cin >> n;
    vector<ll> v(n), qry(5);
    for(int i = 0; i < n; i++)
        cin >> v[i];

    SegmentTree st(v);
    
    int q; cin >> q;
    string token; getline(cin, token);
    while(q--){
        string line; getline(cin, line);
        istringstream iss(line);
        string s;
        int pos = 0;
        while(iss >> s)
            qry[pos++] = stoi(s);
        // cout << "----" << endl;
        // cout << line << endl;
        // cout << pos << endl;
        // cout << "----" << endl;
        // continue;
        if(pos == 2)
            cout << st.query(qry[0], qry[1]) << endl;
        else
            st.update(qry[0], qry[1], qry[2]);
    }

	return 0;
}