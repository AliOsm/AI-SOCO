#include <bits/stdc++.h>
using namespace std;
 
typedef long long int ll;
typedef pair <ll, ll> pll;

const int Max = 2e6 + 10;
const int Mod = 1e9 + 7;
const ll Inf = 1LL << 62;

string str[123];
vector <char> G[256];
int vist[256], cycle;
stack <char> S, ans;

inline void dfs( char ch ) {
        vist[ch] = 1;
        for( char x : G[ch] ) {
                if( !vist[x] ) {
                        dfs( x );
                }
                else if( vist[x] == 1 ) {
                        cycle = true;
                }
        } S.push( ch );
        vist[ch] = 2;
}

inline void topo( char ch ) {
        vist[ch] = 1;
        for( char x : G[ch] ) {
                if( !vist[x] ) {
                        topo( x );
                }
        }
}

inline void Clr() {
        memset( vist, 0, sizeof vist );
        cycle = false;
        for( int i=0; i<256; i++ ) {
                G[i].clear();
        }
        while( !S.empty() ) {
                S.pop();
        }
        while( !ans.empty() ) {
                ans.pop();
        }
}

int main() {
        #ifdef Mr_Emrul
                freopen("input.txt", "r", stdin);
                freopen("output.txt", "w", stdout);
        #endif ///Mr_Emrul
        
        //ios_base::sync_with_stdio(false);
        //cin.tie(0);

        ll n, m, t, k, q;
        
        while( cin >> n ) {
                for( int i=1; i<=n; i++ ) {
                        cin >> str[i];
                }
                Clr();
                for( int i=2; i<=n; i++ ) {
                        int cnt = 0;
                        for( int j=0; j<min( str[i-1].size(), str[i].size() ); j++ ) {
                                if( str[i-1][j] == str[i][j] ) {
                                        cnt++;
                                }
                                else {
                                        G[str[i][j]].push_back( str[i-1][j] );
                                        //cout << str[i-1][j] << " " << str[i][j] << endl;
                                        break;
                                }
                        }
                        if( cnt == min( str[i-1].size(), str[i].size() ) && str[i-1].size() > str[i].size() ) {
                                printf("Impossible\n");
                                goto ses;
                        }
                }
                for( int i='a'; i<='z'; i++ ) {
                        if( !vist[i] ) {
                                dfs( i );
                        }
                        //cout << (char) i << " " << G[i].size() << endl;
                }
                if( cycle ) {
                        printf("Impossible\n");
                        goto ses;
                }
                memset( vist, 0, sizeof vist );
                while( !S.empty() ) {
                        char ch = S.top();
                        if( !vist[ch] ) {
                                topo( ch );
                        }
                        ans.push( ch );
                        S.pop();
                }
                while( !ans.empty() ) {
                        char ch = ans.top();
                        printf("%c", ch);
                        ans.pop();
                } printf("\n");
                ses:;
                cerr << "--------------------" << endl;
        }
        return 0;
}