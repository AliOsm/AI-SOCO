#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

#define rep(i,n) for(int i=0;i<(n);++i)
#define REP(i,n) for(int i=1;i<=(n);++i)
#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl
#define tr(it,c) for(auto it=(c).begin(); it!=(c).end(); ++it)
#define all(c) (c).begin(), (c).end()

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long int64;
typedef pair<int,int> pii;

const int maxn=100050;
VI edge1[maxn], edge2[maxn];
int no[maxn]={};
int n,m;
int ans=0;
bool vis[maxn]={};

int gcd(int a,int b) { return b==0 ? a : gcd(b,a%b);}

void dfs(int x)
{
	if(vis[x]) return;
	vis[x]=true;
	tr(it,edge1[x])
	{
		if(vis[*it])
		{
			int tmp=abs(no[*it]-(no[x]+1));
			if(tmp) ans=gcd(ans,abs(tmp));
		}
		else no[*it]=no[x]+1, dfs(*it);
	}
	tr(it,edge2[x])
	{
		if(vis[*it])
		{
			int tmp=abs(no[*it]-(no[x]-1));
			if(tmp) ans=gcd(ans,abs(tmp));
		}
		else no[*it]=no[x]-1, dfs(*it);
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin>>n>>m;
	rep(i,m)
	{
		int a,b; cin>>a>>b; --a; --b;
		edge1[a].PB(b); edge2[b].PB(a);
	}
	rep(i,n) if(!vis[i]) dfs(i);
	cout<<(ans==0 ? n : ans)<<endl;
	return 0;
}
