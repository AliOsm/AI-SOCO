#include <bits/stdc++.h>
#define ll long long
using namespace std;
const int N = 1e3 + 5;
char g[N][N];
int s[10];
struct node {
	int r, c, turn, player, moves;

	node(int r, int c, int turn, int player, int moves) :
			r(r), c(c), turn(turn), player(player), moves(moves) {
	}
	bool operator <(const node &r) const {

		if (turn != r.turn) return turn < r.turn;
		if (player != r.player) return player < r.player;
		if (moves != r.moves) return moves > r.moves;
		return make_pair(this->r, c) < make_pair(r.r, r.c);
	}
};
int n, m, p;
bool valid(int r, int c) {
	return r >= 0 && r < n && c >= 0 && c < m && g[r][c] == '.';
}
int ans[11];
int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m >> p;
	for (int i = 0; i < p; i++)
		cin >> s[i];

	set<node> pq;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> g[i][j];
			if (g[i][j] == '.' || g[i][j] == '#') continue;
			pq.insert(node(i, j, 0, g[i][j] - '0', s[g[i][j] - '0' - 1]));
		}
	}
	int dx[4] = { 1, -1, 0, 0 }, dy[4] = { 0, 0, 1, -1 };
	while (pq.size()) {
		node T = *pq.begin();
//		cout << pq.begin()->r << ' ' << pq.begin()->c << endl;
		pq.erase(pq.begin());
//		cout << T.r << ' ' << T.c << ' ' << T.player << ' ' << T.turn << ' ' << T.moves << endl;
//		if (T.r == 0 && T.c == 1) {
//			cout << T.r << ' ' << T.c << " " << T.player << ' ' << T.turn << endl;
//			return 0;
//		}
		g[T.r][T.c] = char(T.player + '0');
		if (T.moves != s[T.player - 1]) pq.insert(node(T.r, T.c, T.turn + 1, T.player, s[T.player - 1]));
		if (T.moves == 0) continue;
		for (int i = 0; i < 4; i++) {
			int nr = T.r + dx[i];
			int nc = T.c + dy[i];
			if (!valid(nr, nc)) continue;
			g[nr][nc] = char(T.player + '0');
//			cout << nr << " " << nc << endl;
			pq.insert(node(nr, nc, T.turn, T.player, T.moves - 1));
			pq.insert(node(nr, nc, T.turn + 1, T.player, s[T.player - 1]));
		}

//		for (int i = 0; i < n; i++, cout << endl) {
//			for (int j = 0; j < m; j++) {
//				cout << g[i][j];
//			}
//		}
//		cout << "------" << endl;
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (g[i][j] == '.' || g[i][j] == '#') continue;
			ans[g[i][j] - '0']++;
		}
	}

	for (int i = 1; i <= p; i++)
		cout << ans[i] << ' ';
	return 0;
}
