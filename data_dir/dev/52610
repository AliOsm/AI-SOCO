#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define CeilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
#define debug(_x)                     std::cerr << (#_x) << " = " << (_x) << '\n' << std::flush;
#else
#define debug(_x)                     {}
#endif
#define endl "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = long long;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
int arr[100];

bool Can(int n, int k) {
    int sum = 0;
    loop(k) {
        sum += arr[i];
    }
    int cur = sum;
    for (int i = k; i < n; ++i) {
        cur += arr[i] - arr[i - k];
        if (cur != sum) {
            return false;
        }
    }
    return true;
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int test_cases;
    cin >> test_cases;
    while (test_cases--) {
        int n, k;
        cin >> n >> k;
        set<int> was;
        loop(n) {
            cin >> arr[i];
            was.insert(arr[i]);
        }
        if (Can(n, k)) {
            cout << n << endl;
            outarr(arr, arr + n);
            continue;
        }
        if (sz(was) > k) {
            cout << -1 << endl;
            continue;
        }
        for (int i = 1; sz(was) < k; ++i) {
            was.insert(i);
        }
        cout << n * sz(was) << endl;
        loop(n) {
            for (int j : was) {
                cout << j << ' ';
            }
        }
        cout << endl;
    }

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}