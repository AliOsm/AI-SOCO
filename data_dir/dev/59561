#include <bits/stdc++.h>
  
using namespace std;
  
template<class T> void ckmin(T &a, T b) { a = min(a, b); }
template<class T> void ckmax(T &a, T b) { a = max(a, b); }
  
#define pb push_back
#define mp make_pair
#define cotu cout
#define itn int
#define Red ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define F first
#define S second
#define sz(x) (int)x.size()
#define all(x) (x).begin(), (x).end()
#define rep(i, n) for(int i = 0; i < n; ++i)
#define repr(i,n) for(int i = n - 1; i >= 0; --i)
#define Rep(i, a, n) for(int i = (a); i <=(n); ++i)
#define repst(i, n) for(auto it = n.begin(); it != n.end(); ++it)
#define Repr(i, a, n) for(int i = (n); i >= (a); --i)
  
#define ordered_set tree<int , null_type,less<int >, rb_tree_tag,tree_order_statistics_node_update> 
  
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
  
typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
  
const int inf = int(1e8);
const int mod = 16714589;
const int N = 2e6 + 555; // TL MB
const double PI = acos(-1.0);
double eps = 1e-6;

vector<ll> g[200002];
int a[N];
ll bp(ll a, ll n){
	ll r = 1;
	while(n){
		if(n & 1) r *= a;
		a *= a;
		n >>= 1;
	}
	return r;
}
void solve(){   
	int n;
	cin >> n;
	rep(i, n){
		cin >> a[i];
		for(int j = 2; j <= sqrt(a[i]); ++j){
			int cnt = 0;
			while(a[i] % j == 0){
				cnt++;
				a[i] /= j;
			}
			if(cnt){
				g[j].pb(cnt);
			}
		}	
		if(a[i] != 1){
			g[a[i]].pb(1);
		}
	}
	ll res = 1;
	for(int i = 2; i <= 200000; ++i){
		sort(all(g[i]));
		if(g[i].size() == n){
			res *= bp(i, g[i][1]);
		}
		else if(sz(g[i]) == n - 1){
			res *= bp(i, g[i][0]);
		}
	}
	// 5 * 
	// 2 * 5
	// 2 * 2 * 2 * 3
	// 2 * 2 * 2 * 5
	// 2 * 2 * 2 * 2 * 5
	cout << res;
}   
 
int main()
{
    Red;
    //freopen("input.txt", "r", stdin);s
    //freopen("output.txt", "r", stdin);
    int T = 1; 
    //cin >> T; 
    for(int i = 1; i <= T; ++i){
        solve();
    }
    return 0;
}