//g++ -std=c++14 -g -O2 -o ./a ./A.cpp
#include <bits/stdc++.h>
using namespace std;
#define ff first
#define ss second
#define nl '\n'
typedef long long ll;
//////////////////////////////////////////////////////////////////////

const int N = 100100;
int n,m,c[N],ssz[N],ans[N];
vector<int> g[N];
vector<pair<int,int> >qrs[N];

int fr[N],pfs[N];//
void add(int col){
  pfs[++fr[col]]++;
}
void rem(int col){
  pfs[fr[col]--]--;
}

void fssz(int x=1,int par=0){
  ssz[x]=1;
  for(auto&it:g[x])
    if(it!=par){
      fssz(it,x);
      ssz[x] += ssz[it];
    }
}

vector<int>*L[N];
void dfs(int x=1,int par=0,bool retain=1){
  int hvy = 0;
  for(auto&it:g[x])
    if(it!=par and ssz[it]>ssz[hvy])hvy=it;
  for(auto&it:g[x])
    if(it!=par and it!=hvy)dfs(it,x,0);
  if(hvy){
    dfs(hvy,x,1);
    L[x] = L[hvy];
  }
  if(L[x]==NULL)L[x]=new vector<int>();
  L[x]->emplace_back(x);add(c[x]);
  for(auto&it:g[x])
    if(it!=par and it!=hvy){
      for(auto&jt:*L[it])
	L[x]->emplace_back(jt),add(c[jt]);
    }

  for(auto&qry:qrs[x]){
    ans[qry.ss] = pfs[qry.ff];
  }
  
  if(!retain)
    for(auto&jt:*L[x])rem(c[jt]);
}

int main(){
  ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
  
  cin>>n>>m;
  for(int i=1;i<=n;i++)cin>>c[i];
  for(int u,v,i=1;i<n;i++){
    cin>>u>>v;
    g[u].emplace_back(v);
    g[v].emplace_back(u);
  }

  memset(fr,0,sizeof fr);
  memset(pfs,0,sizeof pfs);

  for(int i=1;i<=m;i++){
    int v,k;
    cin>>v>>k;
    qrs[v].emplace_back(k,i);
  }

  fssz();ssz[0]=0;
  dfs();
  for(int i=1;i<=m;i++)cout<<ans[i]<<nl;
  
  return 0;
}
