#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>

using namespace std;
    
struct Fenwick {
	vector<int> f;

	void add(int pos, int val) {
		for (int i = pos; i < (int)f.size(); i = (i | (i + 1))) {
			f[i] += val;
		}
	}

	int get(int pos) {
		int ans = 0;
		for (int i = pos; i >= 0; i = (i & (i + 1)) - 1) {
			ans += f[i];
		}
		return ans;
	}

	int get(int l, int r) {
		int f = get(r);
		int s = 0;
		if (l > 0) {
			s = get(l - 1);
		}
		return f - s;
	}

	Fenwick(int n) {
		f.resize(n);
	}
};

const int LIM = 10;
const string LT = "ACGT";

vector<int> convert(const string &to) {
	vector<int> res;
	for (auto t : to) {
		for (int i = 0; i < (int)LT.size(); i++) {
			if (t == LT[i]) {
				res.push_back(i);
			}
		}
	}
	return res;
}

int convert(const char &to) {
	for (int i = 0; i < (int)LT.size(); i++) {
		if (to == LT[i]) {
			return i;
		}
	}
	assert(false);
	return -1;
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	string s;
	cin >> s;
	int n = (int)s.size();
	vector<int> sv = convert(s);
	vector<vector<vector<Fenwick>>> p(LT.size(), vector<vector<Fenwick>> (LIM + 1, vector<Fenwick> (LIM + 1, Fenwick(n))));
	for (int mod = 1; mod <= LIM; mod++) {
		for (int i = 0; i < n; i++) {
			p[sv[i]][mod][i % mod].add(i, 1);
		}
	}
	int q;
	cin >> q;
	while (q--) {
		int tp;
		cin >> tp;
		if (tp == 1) {
			int x;
			char c;
			cin >> x >> c;
			x--;
			int nw = convert(c);
			int ws = sv[x];
			for (int mod = 1; mod <= 10; mod++) {
				p[ws][mod][x % mod].add(x, -1);
				p[nw][mod][x % mod].add(x, 1);
			}
			sv[x] = nw;
		} else {
			int l, r;
			string e;
			cin >> l >> r >> e;
			vector<int> to = convert(e);
			l--;
			r--;
			int ans = 0;
			int cmod = (int)to.size();
			for (int i = 0; i < (int)to.size(); i++) {
				int ci = i + l;
				ans += p[to[i]][cmod][ci % cmod].get(l, r);
			}
			cout << ans << '\n';
		}
	}
}
