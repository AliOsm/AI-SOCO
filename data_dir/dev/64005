#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef long double real;

#ifdef WIN32
#define INT64 "%I64d"
#define UINT64 "%I64u"
#else
#define INT64 "%lld"
#define UINT64 "%llu"
#endif

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

const int MaxN = 50009, MaxK = 507, MaxC = 0x3F3F3F3F, NA = -1;

vector <int> adj [MaxN];
int f [MaxN] [MaxK];
int a [MaxN];
int n, k;
int64 res;

void recur (int v, int p)
{
 int i, j, u;

 memset (f[v], 0, sizeof (f[v]));
 f[v][0] = 1;
 for (i = 0; i < (int) adj[v].size (); i++)
 {
  u = adj[v][i];
  if (u == p)
   continue;
  recur (u, v);
  for (j = 0; j < k; j++)
   res += (int64) f[u][j] * f[v][k - j - 1];
  for (j = 0; j < k; j++)
   f[v][j + 1] += f[u][j];
 }
}

int main (void)
{
 int i, j, l;

 while (scanf (" %d %d", &n, &k) != EOF)
 {
  for (i = 0; i < n; i++)
   adj[i].clear ();
  for (i = 0; i < n - 1; i++)
  {
   scanf (" %d %d", &j, &l);
   j--;
   l--;
   adj[j].push_back (l);
   adj[l].push_back (j);
  }
  res = 0;
  recur (0, NA);
  printf (INT64 "\n", res);
 }

 return 0;
}
