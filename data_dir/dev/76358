#include <iostream>
#include <map>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <vector>

#define mp make_pair
#define pb push_back
#define ppb pop_back
#define X first
#define Y second

using namespace std;

map<pair<int, pair<int, int> >, int> Q;
vector<pair<int, int> > LinesF[400000];
vector<pair<int, int> > LinesS[400000];
int poz, n, m;

int X[2000];
int Y[2000];
int R[2000];

int abs(int v){
    if (v > 0) return v;
    return - v;
}

int gcd(int v, int w){
    while ((v > 0) && (w > 0))
          if (v > w) v %= w; else w %= v;
    return v + w;
}

void normalize(int &a, int &b, int &c){
     if (a < 0){
        a = -a;
        b = -b;
        c = -c;
     }
           
     if (a == 0)
        if (b < 0){
                 b = -b;
                 c = -c;
        }
              
     int d = gcd(abs(a), gcd(abs(b), abs(c)));
       
     a /= d;
     b /= d;        
     c /= d;             
}

int GetLine(int a, int b, int c){
    if (!Q.count(mp(a, mp(b, c)))){
          Q[mp(a, mp(b, c))] = (++poz);           
    }
    
    return Q[mp(a, mp(b, c))];
}

int main(){
    cin >> n >> m;
    for (int i = 0; i < n; i++){
        int X1, Y1, X2, Y2;
        scanf("%d%d%d%d", &X1, &Y1, &X2, &Y2);

        int a = Y2 - Y1;
        int b = X1 - X2;
        int c = - (a * X1) - (b * Y1);        
        
        normalize(a, b, c);               
        
        
        int num = GetLine(a, b, c);
        
        if ((X1 > X2) || ((X1 == X2) && (Y1 > Y2))){
                swap(X1, X2);
                swap(Y1, Y2);
        }
        
        LinesF[num].pb(mp(2 * X1, 2 * Y1));
        LinesS[num].pb(mp(2 * X2, 2 * Y2));
        
            //cout << a << " " <<  b << " " << c << endl;        
    }
    
    for (int i = 1; i <= poz; i++){
        sort(LinesF[i].begin(), LinesF[i].end());
        sort(LinesS[i].begin(), LinesS[i].end());        
    }
        
    for (int i = 0; i < m; i++)
        cin >> X[i] >> Y[i] >> R[i];
        
    long long ans = 0;
    
    for (int i = 0; i < m; i++)
        for (int j = i + 1; j < m; j++)
            if (R[i] == R[j])
        {
            double dist = sqrt((X[i] - X[j]) * (X[i] - X[j]) + (Y[i] - Y[j]) * (Y[i] - Y[j]));
            if ((R[i] <= R[j] + dist + 0.000001) && (R[j] <= R[i] + dist + 0.000001) && (dist <= R[i] + R[j] + 0.000001)) continue;
            
            int a = Y[j] - Y[i];
            int b = X[i] - X[j];
            int c = - (a * X[i]) - (b * Y[i]);
            
            int bb = -a;
            int aa = b;
            int cc = - aa * (X[i] + X[j]) - bb * (Y[i] + Y[j]);
            aa *= 2;
            bb *= 2;
            
            a = aa;
            b = bb;
            c = cc;
            
            normalize(a, b, c);
            
            //cout << a << " " <<  b << " " << c << endl;
            
            if (!Q.count(mp(a, mp(b, c)))) continue;
            
            int num = GetLine(a, b, c);
                        
            int XX = X[i] + X[j];
            int YY = Y[i] + Y[j];
            
            pair<int, int> P = mp(XX, YY);
            
            ans += LinesF[num].size();
            
            int ll = - 1;
            int rr = LinesS[num].size();
            
            while (ll + 1 < rr){
                  int cc = (ll + rr) / 2;
                  if (LinesS[num][cc] < P) ll = cc; else rr = cc;
            }
            
            ans -= (ll + 1);
            
            ll = 0;
            rr = LinesF[num].size();
            
            while (ll + 1 < rr){
                  int cc = (ll + rr) / 2;
                  if (LinesF[num][cc] > P) rr = cc; else ll = cc;
            }
            
            ans -= (LinesF[num].size() - rr);            
        }
    
    cout << ans << endl;
    
    //ystem("pause");
    return 0;
}
 
