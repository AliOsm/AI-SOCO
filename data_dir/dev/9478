#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;
typedef tree<
        pair<int, int>, // change type
        null_type,
        less<pair<int, int> >, // change type
        rb_tree_tag,
        tree_order_statistics_node_update>
        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define per(i, start, end) for(int i = (int)start-1; i >= end; --i)
#define sz(x) (int)(x).size()
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-8);

const int MAX_X = 40005, SHIFT = 20000;
int oX[MAX_X], another[MAX_X];

bool isInCircle(int xs, int ys,int xi, int r)
{
    return (xs - xi) * (xs - xi) + ys * ys <= r * r;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    clr(oX, -1);
    clr(another, -1);
    int n;
    cin >> n;
    vector<int> radius(n), center(n);
    for (int i = 0; i < n; ++i)
    {
        int x, r;
        cin >> x >> r;
        x += SHIFT;
        radius[i] = r;
        center[i] = x;
        for (int j = x - r; j <= x + r; ++j)
        {
            if (oX[j] == -1)
                oX[j] = i;
            else
                another[j] = i;
        }
    }
    int m;
    cin >> m;
    vector<int> ans(n, -1);
    int cntShot = 0;
    for (int i = 0; i < m; ++i)
    {
        int x, y;
        cin >> x >> y;
        x += SHIFT;
        if (oX[x] != -1)
        {
            if (isInCircle(x, y,center[oX[x]], radius[oX[x]]) && ans[oX[x]] == -1)
            {
                ++cntShot;
                ans[oX[x]] = i + 1;
            }
        }
        if (another[x] != -1)
        {
            if (isInCircle(x, y,center[another[x]], radius[another[x]]) && ans[another[x]] == -1)
            {
                ++cntShot;
                ans[another[x]] = i + 1;
            }
        }
    }
    cout << cntShot << '\n';
    for (auto item : ans)
        cout << item << ' ';
    return 0;
}