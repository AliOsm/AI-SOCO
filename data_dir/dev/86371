/*
    The bigger the rocks
                       the greater the chance 
                                            to find high value tokens!! */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=998244353;   
#define INF 100000000
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctz(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clz(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffs(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,t,q,z,x,y,k,m;
const double pi=3.14159265358979323846;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
vector<int> pf(string s) {
    int n = (int)s.length();
    vector<int> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
//lli vis[305][305];
//lli a[500005];
//lli good[5005][5005];
//string s;
//map<lli,lli> vis;
//map<lli,lli> ml;
//vector<ll> v[2000005];
//lli mx=0;
//lli ff=0;
struct edge
{
    lli first,second,third;
};
//set<lli> s;
lli hpy,atky,defy,hpm,atkm,defm,h,d,l,r;
//string s[100005];
map<lli,lli> nm;
map<lli,string> ml;
//map<lli,lli> vis;
lli ii=1;
map<lli,lli> vis;
lli parent[1000007];
lli ra[1000007];
lli find_set(lli v)
{
    if(v==parent[v])
    return v;
    return parent[v]=find_set(parent[v]);
}
void make_set(int v) {
    parent[v] = v;
    ra[v] = 0;
}

void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        if (ra[a] < ra[b])
            swap(a, b);
        parent[b] = a;
        if (ra[a] == ra[b])
            ra[a]++;
    }
}
vector<lli> v[1000007];
lli cnt=1;
map<lli,lli> kk;
void dfs(lli i)
{
    vis[i]=cnt;
    kk[cnt]++;
    for(int j=0;j<v[i].size();j++)
    {
        if(vis[v[i][j]]==0)
        {
            dfs(v[i][j]);
        }
    }
}
int main()
{
cin>>n;
lli a[n+1];
for(int i=1;i<=n;i++)
cin>>a[i],a[i]=abs(a[i]);
sort(a+1,a+n+1);
lli cnt=0;
for(int i=1;i<=n;i++)
{
    lli d=upper_bound(a+1,a+n+1,2*a[i])-a;
    cnt+=d-i-1;
}
cout<<cnt;
}