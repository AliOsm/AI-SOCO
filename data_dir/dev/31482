#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int N = 1000005;

int n, k;
vector<int> g[N];
int f[N], h[N];

void dfs(int v, int pr = -1) {
  vector<int> r;
  for (int to: g[v]) {
    if (to == pr) {
      continue;
    }
    dfs(to, v);
    r.push_back(h[to] + 1);
    f[v] += f[to];
  }
  sort(r.begin(), r.end());
  int j = 0;
  while (j + 1 < (int) r.size() && r[j] + r[j + 1] <= k) {
    ++j;
    --f[v];
  }
  if (!r.empty()) {
    h[v] = r[j];
  } else {
    f[v] = 1;
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  cin >> n >> k;
  for (int i = 0; i < n - 1; ++i) {
    int x, y;
    cin >> x >> y;
    --x; --y;
    g[x].push_back(y);
    g[y].push_back(x);
  }
  int root = 0;
  while ((int) g[root].size() < 2) {
    ++root;
  }
  dfs(root);
  cout << f[root] << '\n';
}
