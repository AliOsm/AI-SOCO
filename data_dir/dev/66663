#include <bits/stdc++.h>
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

const int mxN = 100010;
int N;
int tree[2][mxN*4];
vector<int> gb[2][mxN];

int ind,t,qt;
void upd(int n = 1,int l = 0,int r = mxN - 1) {
	if(l == r) {
		if(!qt) {
			if(gb[t][l].size() > 1)
				tree[t][n] = gb[t][l][1];
			else
				tree[t][n] = INT_MIN;
		} else {
			tree[t][n] = gb[t][l][0];
		}
		return;
	}
	int md = (l+r)>>1;
	if(ind <= md)
		upd(n<<1,l,md);
	else
		upd(n<<1|1,md+1,r);
	tree[t][n] = max(tree[t][n<<1],tree[t][n<<1|1]);
}

int get(int a,int b,int n = 1,int l = 0,int r = mxN - 1) {
	if(l == a && b == r) {
		return tree[t][n];
	}
	int md = (l+r)>>1;
	int res = INT_MIN;
	if(a <= md)
		res = get(a,min(b,md),n<<1,l,md);
	if(b > md)
		res = max(res,get(max(a,md+1),b,n<<1|1,md+1,r));
	return res;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	int c,d,p,b;
	string ct;
	cin>>N>>c>>d;
	for(int i = 0;i < N;i++) {
		cin>>b>>p>>ct;
		if(ct == "C") {
			gb[0][p].push_back(b);
		} else {
			gb[1][p].push_back(b);
		}
	}
	qt = 1;
	for(ind = 0;ind < mxN;ind++) {
		if(!gb[0][ind].empty() && c >= ind) {
			sort(gb[0][ind].rbegin(),gb[0][ind].rend());
			t = 0;
			upd();
		}
		if(!gb[1][ind].empty() && d >= ind) {
			sort(gb[1][ind].rbegin(),gb[1][ind].rend());
			t = 1;
			upd();
		}
	}
	int res = 0;
	for(ind = 0;ind < mxN;ind++) {
		if(!gb[0][ind].empty() && c >= ind) {
			int cur = gb[0][ind][0];
			t = qt = 0;
			upd();
			int with = 0;
			t = 0;
			with = get(0,c-ind);
			t = 1;
			with = max(with,get(0,d));
			if(with)
				res = max(res,cur + with);
			t = 0;
			qt = 1;
			upd();
		}
		if(!gb[1][ind].empty() && d >= ind) {
			int cur = gb[1][ind][0];
			t = 1;
			qt = 0;
			upd();
			int with = 0;
			t = 0;
			with = get(0,c);
			t = 1;
			with = max(with,get(0,d-ind));
			if(with)
				res = max(res,cur + with);
			t = qt = 1;
			upd();
		}
	}
	cout<<res<<'\n';
	return 0;
}
