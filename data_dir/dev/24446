#define MAXSTACKSIZE [1024 * 1024 * 128]
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <hash_map>
#include <hash_set>
#include <vector>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iterator>
#include <limits>
#include <time.h>
#include <math.h>
using namespace std;
#define mems(arr, val) memset(arr, val, sizeof(arr))
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define all(A) (A).begin(), A.end()
#define mp(a, b) make_pair(a, b)
#define forit(it, A) for(auto it = A.begin(); it != A.end(); it++)
#define M_PI       3.14159265358979323846
#define M_PI_2     1.57079632679489661923
#define M_PI_4     0.785398163397448309616
typedef long long LL;
typedef pair<int, int> pii;
//const LL INF = INT_MAX;
const int MAXN = 100100;
const LL MOD = 1000000007;
const double EPS = 1e-6;


int main()
{
#ifdef MY_SOL
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
    //freopen("stars.in", "r", stdin); freopen("stars.out", "w", stdout);
#endif
    string str;
    cin>>str;
    bool erat[10000];
    mems(erat, true);
    for(int i = 2; i * i < 10000; i ++)
    {
        if (erat[i])
        {
            for(int j = i * i; j < 10000; j += i) erat[j] = false;
        }
    }

    map<char, int> m;

    forn(i, 0, str.length())
        m[str[i]]++;

    vector<pair<int, char>> A;

    forit(it, m)
    {
        A.push_back(mp(it->second, it->first));
    }

    sort(all(A));

    char lastch = A.back().second;

    for(int i = 0; i < str.length(); ++i)
    {
        if (i == 0 || (erat[i + 1] && (2 * (i + 1)) > str.length()))
        {
            auto it = m.begin();
            if (it->first == lastch && m.size() > 1) it++;
            str[i] =it->first;
            m[it->first]--;
            if (it->second == 0) m.erase(it->first);
        }
        else
        {
            if (!m.count(lastch))
            {
                cout<<"NO";
                return 0;
            }
            str[i] = lastch;
            m[lastch]--;
            if (m[lastch] == 0) m.erase(lastch);
        }
    }
    cout<<"YES"<<endl;
    cout<<str;

    return 0;
}