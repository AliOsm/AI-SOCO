//#include <cstdio>
#include <iostream>

#include <cstring>

#include <string>
#include <vector>
#include <algorithm>

#include <set>

using namespace std;

#define SZ(a) int((a).size())
#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

typedef long long llong;
typedef vector<int> VI;
typedef vector<VI> VVI;

typedef pair<int,int> II;

#define MAXN 100004
int N;
int A[MAXN];
bool losing[MAXN];

bool trace;
bool has_losing_next_state(int start, int step) {
   for (int j = start + step; j < N; j += step) {
      if (losing[j]) {
         if (trace)
            cerr << "j: " << j << endl;
         return true;
      }
   }
   for (int j = start - step; j >= 0; j -= step) {
      if (losing[j]) {
         if (trace)
            cerr << "j: " << j << endl;
         return true;
      }
   }
   return false;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   cin >> N;
   REP(i, N)
      cin >> A[i];

   vector<II> P;
   REP(i, N)
      P.push_back(II(A[i], i));
   sort(P.begin(), P.end(), greater<II>());

   REP(i, N)
      losing[i] = false;

   for (II p : P) {
      int m = p.first;
      int i = p.second;
   // cerr << m << " " << i << endl;
   // trace = m == 8;
      losing[i] = !has_losing_next_state(i, m);
   }

   string ans;
   for (int i = 0; i < N; ++i)
      ans += losing[i] ? 'B' : 'A';
   cout << ans << '\n';

   return 0;
}
