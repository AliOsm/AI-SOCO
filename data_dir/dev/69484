#include <bits/stdc++.h>
using namespace std;

const int N = 202;

int dp[N][N][N];
string s1, s2;
const int inf = 10000;

int solve(int m1, int m2, int balance) {
    if(balance > 200) return inf;
    if(m1 == s1.size() && m2 == s2.size()) {
        return balance;
    }
    if(m1 == s1.size()) {
        int len = 0;
        for(int j = m2; j < s2.size(); j++) {
            if(s2[j] == ')' && balance == 0) len += 2;
            else {
                len++;
                if(s2[j] == ')') balance--;
                else balance++;
            }
        }
        return len + balance;
    }

    if(m2 == s2.size()) {
        int len = 0;
        for(int j = m1; j < s1.size(); j++) {
            if(s1[j] == ')' && balance == 0) len += 2;
            else {
                len++;
                if(s1[j] == ')') balance--;
                else balance++;
            }
        }
        return len + balance;
    }

    if(dp[m1][m2][balance] != -1) return dp[m1][m2][balance];
    int ans = 1 + solve(m1+(s1[m1] == '('), m2+(s2[m2] == '('), balance+1);
    if(balance > 0) ans = min(ans, 1 + solve(m1+(s1[m1] == ')'), m2+(s2[m2] == ')'), balance-1));
    return dp[m1][m2][balance] = ans;
}

string res;


void rec(int m1, int m2, int balance) {
    if(m1 == s1.size() && m2 == s2.size()) {
        while(balance--) res.push_back(')');
        return;
    }
    if(m1 == s1.size()) {
       for(int j = m2; j < s2.size(); j++) {
            if(s2[j] == ')' && balance == 0) {
                res.push_back('(');
                res.push_back(')');
            }
            else {
                res.push_back(s2[j]);
                if(s2[j] == ')') balance--;
                else balance++;
            }
        }
        while(balance--) res.push_back(')');
        return;
    }

    if(m2 == s2.size()) {
       for(int j = m1; j < s1.size(); j++) {
            if(s1[j] == ')' && balance == 0) {
                res.push_back('(');
                res.push_back(')');
            }
            else {
                res.push_back(s1[j]);
                if(s1[j] == ')') balance--;
                else balance++;
            }
        }
        while(balance--) res.push_back(')');
        return;
    }

    int ans1 = 1 + solve(m1+(s1[m1] == '('), m2+(s2[m2] == '('), balance+1);
    int ans2 = inf;
    if(balance > 0) ans2 = 1 + solve(m1+(s1[m1] == ')'), m2+(s2[m2] == ')'), balance-1);
    if(ans1 < ans2) {
        res.push_back('(');
        rec(m1+(s1[m1] == '('), m2+(s2[m2] == '('), balance+1);
    }
    else {
        res.push_back(')');
        rec(m1+(s1[m1] == ')'), m2+(s2[m2] == ')'), balance-1);
    }
}



int main() {
    // freopen("in.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin >> s1 >> s2;
    memset(dp, -1, sizeof dp);
    solve(0,0,0);
    rec(0,0,0);
    cout << res << endl;

    return 0;
}

