#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("input.txt");ofstream out("output.txt");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

ll a,k,o=0;
vec<int> m, c, g;

int main(){
    fast;
    cin>>a>>k;
    m = vec<int>(a);
    c = vec<int>(1e5+1, 0);
    g = vec<int>(1e5+1, 0);
    for(int q=0; q<a; q++) cin>>m[q], c[m[q]]++;
    sort(m.begin(), m.end());
    g[1] = 1;
    for(int q=1; q<=100000; q++){
        ll cc = 1;
        for(int i = 0; i<k && cc<=1e5; i++) cc*=q;
        if(cc<=1e5) g[cc] = 1;
    }
    vec<int> t(100001), f(100001);
    for(int q=1; q<=100000; q++){
        for(int i = 1; q*i<=100000; i++){
            t[q] += c[q*i]*g[i];
        }
    }
    //for(int q=0; q<100; q++)cout<<q<<": "<<t[q]<<endl;
    for(int q=0; q<a; q++){
        vec<pii> n;
        int v = m[q];
        for(int w=2, uu = sqrt(m[q]); w<=uu && v>1; w++){
            if(v%w) continue;
            int i = 0;
            for(; v%w==0; i++) v/=w;
            n.pb({w, i});
        }
        if(v>1) n.pb({v, 1});
        ll mul = 1;
        for(pii p : n){
            int eso = (k-p.S%k)%k;
            for(; eso && mul<1e6; eso--) mul*=p.F;
        }
        if(mul>1e5) continue;
        //if(g[m[q]] && m[q]%mul==0) t[m[q]]--;
        //cout<<m[q]<<"  "<<mul<<"  "<<t[mul]<<endl;
        o += t[mul] - (m[q]%mul==0 && g[m[q]/mul] ? 1 : 0);
    }
    ll bad = 0;
    // for(int q=0; q<a; q++) bad+=g[m[q]];
    cout<<(o-bad)/2;
}