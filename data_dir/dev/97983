#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <hash_map>
#include <map>
#include <hash_set>
#include <set>
#include <stack>
#include <algorithm>
#include <sstream>
#include <queue>
#include <math.h>
using namespace std;
typedef long long LL;
#define mems(arr, val) memset(arr, val, sizeof(arr));
#define all(A) A.begin(), A.end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define INF 2000000000
#define SIZE 1000009
#define MOD 1000000007 
#define mp(a, b) make_pair(a, b)
const int MAXN = 1100100;

LL D[105][252533];
LL DEG[19];
LL m;
LL BITS[10];
LL bit(LL num)
{
	LL ans = 0;
	while(num)
	{
		ans++;
		num >>= 1;
	}

	return ans;
}

LL gethash(LL state[10])
{
	LL result = 0;
	for(int i = 0; i <= 9; ++i)
	{
		result <<= BITS[i];
		result |= state[i];
	}

	return result;
}

LL rec(LL mod, LL state[10], LL first)
{
	if (gethash(state) == 0) return mod == 0 ? 1 : 0;
	LL result = 0;
	vector<LL> dig(10);
	LL tmod = mod;
	LL deg = 0;
	for(LL i = 0; i <= 9; ++i)
	{
		deg += state[i];
	}

	LL start = 0;
	if (first == 0) start = 1;
	for(LL i = start; i <= 9; ++i)
	{
		if (state[i] == 0) continue;

		tmod += (LL)i * DEG[deg - 1];
		tmod %= m;

		state[i]--;

		LL newstate = gethash(state);
		if (D[tmod][newstate] == -1)
		{
			D[tmod][newstate] = rec(tmod, state, 1);
		}
		state[i]++;
		result += D[tmod][newstate];
		tmod = mod;
	}

	return result;
}


int main()
{
#ifdef MY_SOL
	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
#endif
	string str;
	mems(D, -1);
	cin>>str>>m;
	LL A[10];
	mems(A, 0);
	forn(i, 0, str.size())
		A[str[i] - '0']++;
	for(int i = 0; i <= 9; ++i)
	{
		BITS[i] = bit(A[i]);
	}

	LL curdeg = 1;
	for(int i = 0; i <= 18; ++i)
	{
		DEG[i] = curdeg;
		curdeg *= 10;
	}
	cout<<rec(m, A, 0);
	
	return 0;
}