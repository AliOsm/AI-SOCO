#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)); (v).erase(unique(all(v)), (v).end());
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define umap unordered_map
#define uset unordered_set
#define pqueue priority_queue
#define si(a) scanf("%d", &a)
#define sll(a) scanf("%lld", &a)
#define bitcount(x) __builtin_popcount(x)
#define cps CLOCKS_PER_SEC
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000007
#define MOD 1000000007
#define N 5005
using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;

template<typename T>
using maxpq = priority_queue<T>;

//All indexing is 0-based
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update> ordered_set;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pairs of (value, time_of_insertion)
//to distinguish values which are similar.

//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }

//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c;}
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c;}
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p;}

#define int ll
int n, m;
int a[N], g[N];
int badness[N], goodness[N];
map<int, pii> mp;
set<int> b;

inline bool isBad(int k) {
    return b.find(k) != b.end();
}

pii factorize(int k) {
    if(mp.find(k) != mp.end()) return mp[k];
    int temp = k;
    int g, b;
    g = b = 0;
    for(int i = 2; i * 1ll * i <= k; i++) {
        if(k % i == 0) {
            int cnt = 0;
            while(k % i == 0) cnt++, k /= i;
            isBad(i) ? b += cnt : g += cnt;
        }
    }
    if(k > 1) isBad(k) ? b++ : g++;
    return mp[temp] = {g, b};
}

main()
{   
    #ifndef ONLINE_JUDGE
        freopen("/home/tarun/Desktop/input.txt", "r", stdin);
//      freopen("/home/tarun/Desktop/output.txt", "w", stdout);
    #endif
    sync;
    clock_t clk = clock();
    cerr << "I will return...\n";
    
    cin >> n >> m;
    rep(i, 0, n) {
        cin >> a[i];
        g[i] = i == 0 ? a[i] : gcd(a[i], g[i-1]);
    }
    
    rep(i, 0, m) {
        int j; cin >> j; b.insert(j);
    }

    int gd = 0, bd = 0; //Goodness and badness eliminated so far
    int totg = 0, totb = 0;

    rep(i, 0, n) {
        auto p = factorize(a[i]);
        totg += p.fi, totb += p.se;
        tie(goodness[i], badness[i]) = factorize(g[i]);
        //trace(i, goodness[i], badness[i], totg, totb);
    }

    repi(i, n-1, -1) {
        goodness[i] -= gd;
        badness[i] -= bd;
        //trace(i, goodness[i], badness[i]);
        if(goodness[i] < badness[i]) {
            //trace("haha");
            totg -= (i+1) * goodness[i];
            totb -= (i+1) * badness[i];
            gd += goodness[i]; 
            bd += badness[i];
        }
       // trace(i, totg, totb);
    }

    cout << totg - totb << '\n';

    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << double(clock() - clk) * 1000.0 / cps << '\n';
}

//Compile using:
//g++ -o filename.exe --std=c++11 filename.cpp
//Use -D CP for defining a macro CP in the local environment




