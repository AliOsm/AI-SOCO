#include <bits/stdc++.h>
using namespace std;
const int N = 3e5 + 10;
long long n, a[3][N], fps[3][N], sps[3][N], dp[3][N], ps[3][N];
int main() {
	ios_base::sync_with_stdio (false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int r = 0; r < 2; r++) 
		for (int i = 0; i < n; i++) 
			cin >> a[r][i];
	for (int i = 0; i < 2; i++)
		for (int j = 0; j < n; j++)
			ps[i][j + 1] = ps[i][j] + a[i][j];
	dp[1][0] = a[1][0];
	for (int i = 1; i < n; i++) {
		if (i % 2 == 0) {
			long long pst = i * 2;
			dp[0][i] += dp[0][i - 1] + pst * a[0][i];
			dp[1][i] += dp[0][i] + (pst + 1) * a[1][i];
		}
		else {
			long long pst = i * 2;
			dp[1][i] += dp[1][i - 1] + pst * a[1][i];
			dp[0][i] += dp[1][i] + (pst + 1) * a[0][i];
		}
	}
	for (int i = 0; i < 2; i++)
		for (int j = n - 1; j >= 0; j--)
			fps[i][j] = fps[i][j + 1] + ps[i][n] - ps[i][j];
	for (int i = 0; i < 2; i++)
		for (int j = n - 1; j >= 0; j--)
			sps[i][j] = sps[i][j + 1] + (n - j) * a[i][j];
/*	for (int i = 0; i < 2; i++) {
		for (int j = 0; j < n; j++) {
			cout << fps[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl;
	for (int i = 0; i < 2; i++) {
		for (int j = 0; j < n; j++) {
			cout << sps[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl;*/
	long long ans = 0;
	for (int i = 0; i < n; i++) {
		long long rtr = 0;
		if (i % 2 == 0) {
			if (i != 0)
				rtr = dp[0][i - 1];
			int pst = i * 2;
			rtr += fps[0][i] + (ps[0][n] - ps[0][i]) * (pst - 1);
			rtr += (n + i - 1) * (ps[1][n] - ps[1][i]) + sps[1][i];
			ans = max(ans, rtr);
		}
		else {
			rtr = dp[1][i - 1];
			int pst = i * 2;
			rtr += fps[1][i] + (ps[1][n] - ps[1][i]) * (pst - 1);
			rtr += (n + i - 1) * (ps[0][n] - ps[0][i]) + sps[0][i];
			ans = max(ans, rtr);
		}
	}
/*	for (int i = 0; i < 2; i++) {
		for (int j = 0; j < n; j++)
			cout << dp[i][j] << " ";
		cout << endl;
	}*/
	cout << max({ans, dp[0][n - 1], dp[1][n - 1]});
	return 0;
}
