#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define ull unsigned long long
#define pll pair<ll, ll>
#define mp(x, y) make_pair(x, y)
using namespace std;

const ll MAX_N = 2e5 + 5, inf = 1e18, mod = 1e9+123;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       tp %= mod; res %= mod;
       b >>= 1ll;
    }
    return res;
}

ll vec_mult(const pll &t1, const pll &t2, const pll &t3) {
   const ll &x1 = t1.first, y1 = t1.second;
   const ll &x2 = t2.first, y2 = t2.second;
   const ll &x3 = t3.first, y3 = t3.second;
   return ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
   cout << "YES" << endl;
}

void no() {
   cout << "NO" << endl;
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    ll t = nxt();
    while (t--) {
        int n = nxt(), m = nxt(), a = nxt() - 1, b = nxt() - 1;
        vector<vector<ll>> g(n);
        for (int i = 0; i < m; i++) {
            ll v = nxt() - 1, u = nxt() - 1;
            g[v].push_back(u);
            g[u].push_back(v);
        }

        vector<char> used(n);
        function<void(set<ll> *, int, int)> dfs = [&](set<ll> *st, int v, int curV) {
            used[v] = 1;
            (*st).insert(v);
            for (auto u : g[v]) {
                if (u != curV && !used[u]) {
                    dfs(st, u, curV);
                }
            }
        };
        set<ll> st1 = {b};
        set<ll> st2 = {a};
        dfs(&st1, a, b);
        used.assign(n, 0);
        dfs(&st2, b, a);
        ll ct1 = 0;
        for (auto x : st1) {
            if (!st2.count(x)) { 
                ct1++;
            }
        }
        ll ct2 = 0;
        for (auto x : st2) { 
            if (!st1.count(x)) ct2++;
        } 
        cout << ct1 * ct2 << '\n';
    }

    return 0;
}
