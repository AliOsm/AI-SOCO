/*<<head>> {{{*/
#include <bits/stdc++.h>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <string>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
using namespace std;
typedef double db;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
#define dd(x) cout << #x << " = " << x << ", "
#define de(x) cout << #x << " = " << x << endl
#define rep(i,a,b) for(int i=(a);i<(b);++i)
#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define fi first
#define se second
//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;
//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;
const int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1
const ll LINF = 0x3f3f3f3f3f3f3f3f;
/*}}}*/                         // zr, zm
const int MOD = (int)1e9+7;     // when MOD = 1e9+7, inv2 = 500000004
const int N = (int)3e3+7;

// ------- 变量 ------- //

int n, s[N], ans;
int no, trie[N*N][2], fa[N*N];
int dp[N*N];

// ------- 函数 ------- //

int newnode() { ++no; memset(trie[no], 0, sizeof(trie[no])); return no; }

// 反向将后缀插入字典树，可以看做所有后缀统一在根节点汇聚
// 每个节点到根节点形成的子串代表一个独特的子串
void Insert(int len) {
    int rt = 0;
    per(i, 1, len+1) {
        int id = s[i];
        if (!trie[rt][id]) {
            int num = trie[rt][id] = newnode();
            fa[num] = rt;
            
            int t = rt, val = 0;
            rep(j, 0, 4) {
                
                // 判断 num 节点向上 4 位形成的字母是否合法
                val = val << 1 | s[i+j];
                if (j == 3 && (val == 3 || val == 5 || val == 14 || val == 15)) break;

                // dp[num] 表示从 num 节点到根形成的子串能构造的字符串种数
                // dp[num] 可从最多四个祖先转移过来
                // 表示 num 节点向上至多 4 位形成一个字母，
                // 然后上面的所有祖先节点所能形成的所有字符串种数 dp[t]
                dp[num] = (dp[num] + dp[t]) % MOD;
                if (t) t = fa[t]; else break;
            }
            ans = (ans + dp[num]) % MOD;  // 每当有一个新节点，就更新答案
        }
        rt = trie[rt][id];
    }
}

void Init() {
    no = -1; newnode();
    dp[0] = 1;
    ans = 0;
}

int Solve() {
    rep(i, 1, n+1) {
        scanf("%d", s+i);
        Insert(i);  // 反向将当前 01 串插入字典树
        printf("%d\n", ans);
    }
    return 0;
}

// ------- main ------- //

int main ()
{
    //ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);

    //Pre();
    //int t; scanf("%d", &t); while (t--) {
    while (~scanf("%d", &n)) {
    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符
        //if (n == 0) break;
        //static int kase = 0; printf("Case %d: ", ++kase);
        Init();
        Solve();
        //if (t) puts("");
    }
    return 0;
}