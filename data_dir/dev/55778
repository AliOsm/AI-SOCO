/*
ID: hepic
PROG: sabotage
LANG: C++11
*/
#include <bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i<=b; ++i)
#define REP(i, a, b) for(auto i=a; i<b; ++i)
#define FORI(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REPI(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define PI acos(-1)
#define open_read1 freopen("C:\\Users\\Hepic\\Desktop\\a.txt", "r", stdin)
#define open_write1 freopen("C:\\Users\\Hepic\\Desktop\\b.txt", "w", stdout)
#define open_read freopen("team.in", "r", stdin)
#define open_write freopen("team.out", "w", stdout)

using namespace std;

typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair<double, double> PDD;
typedef pair<int, int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<ULL, ULL> PUU;
typedef pair<LL, PLL> PLPLL;
typedef pair<PLL, PLL> PPLLPLL;
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    out<<"("<<obj.first<<","<<obj.second<<")";
    return out;
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, multiset<T> cont)
{
    typename multiset<T>::const_iterator itr = cont.begin();
    typename multiset<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N])
{
     REP(i, 0, N)
        out<<arr[i]<<" ";
    out<<endl;

    return out;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}


template<typename T>
T fast_exp_pow(T base, T exp, T mod)
{
    LL res = 1;

    while(exp)
    {
        if(exp&1)
        {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;

    }

    return res % mod;
}

/*#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################*/

#define SIZE 110

int N, answer = -1, ind;
map<char, int> maps = {{'R', 5}, {'G', 6}, {'B', 7}, {'Y', 8}, {'W', 9}};
string card;
vector<string> cards;
vector<string> parts[SIZE];


int count_ones(int value)
{
    int cnt = 0;

    while(value)
    {
        cnt += value&1;
        value >>= 1;
    }

    return cnt;
}


void split(char hint)
{
    int len = ind;

    FOR(i, 0, len)
    {
        vector<int> deletes;
        int val = 0;
        bool found = false;

        REP(j, 0, parts[i].size())
        {
            if(hint <= '4'  &&  parts[i][j][1] == hint)
            {
                parts[ind+1].pb(parts[i][j]);
                deletes.pb(j);
                found = true;
            }

            else if(hint >= '5'  &&  parts[i][j][0] == hint)
            {
                parts[ind+1].pb(parts[i][j]);
                deletes.pb(j);
                found = true;
            }
        }

        for(auto elem: deletes)
        {
            parts[i].erase(parts[i].begin()+elem-val);
            ++val;
        }

        if(found)
            ++ind;
    }

//    FOR(i, 0, ind)
//        cout<<parts[i]<<endl;
//    cout<<endl;
//    cout<<endl;
}


bool check(int mask)
{
    int pos = 0;
    ind = 0;

    REP(i, 0, SIZE)
        parts[i].clear();

    REP(i, 0, N)
        parts[0].pb(cards[i]);

    while(mask)
    {
        if(mask&1)
            split(pos+'0');

        mask >>= 1;
        ++pos;
    }

    FOR(i, 0, ind)
        REP(j, 1, parts[i].size())
            if(parts[i][j] != parts[i][j-1])
                return false;

    return true;
}



int main()
{
//    open_read1;
    scanf("%d", &N);

    REP(i, 0, N)
    {
        cin>>card;

        card[0] = maps[card[0]] + '0';
        --card[1];

        cards.pb(card);
    }

    for(int mask=0; mask<(1<<10); ++mask)
    {
        if(check(mask))
            answer = (answer == -1 ? count_ones(mask) : min(answer, count_ones(mask)));
    }

    printf("%d\n", answer);
    return 0;
}
