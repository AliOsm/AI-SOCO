#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAX = 4e5 + 5;
int n, m;
int lis[MAX], lds[MAX], arr[MAX], helper[MAX], maxx[MAX], ans[MAX], app[MAX];
bool on_lis[MAX];
vector<ii> queries[MAX];

int main() {
	scanf("%d %d", &n, &m);
	fori(i, 1, n + 1) {
		scanf("%d", arr + i);
	}
	memset(helper, 0x3F, sizeof helper);
	int longest = 0;
	fori(i, 1, n + 1) {
		int pos = lower_bound(helper + 1, helper + n + 1, arr[i]) - helper;
		lis[i] = pos;
		longest = max(longest, lis[i]);
		helper[pos] = arr[i];
	}
	memset(maxx, -1, sizeof maxx);
	ford(i, n, 1) {
		if(lis[i] == longest || maxx[lis[i] + 1] > arr[i]) {
			on_lis[i] = true;
			maxx[lis[i]] = max(maxx[lis[i]], arr[i]);
			app[lis[i]]++;
		}
	}
	memset(helper, 0x3F, sizeof helper);
	ford(i, n, 1) {
		int pos = lower_bound(helper + 1, helper + n + 1, -arr[i]) - helper;
		lds[i] = pos;
		helper[pos] = -arr[i];
	}

	fori(i, 1, m + 1) {
		int a, b;
		scanf("%d %d", &a, &b);
		queries[a].emplace_back(b, i);
	}

	memset(helper, 0x3F, sizeof helper);
	fori(i, 1, n + 1) {
		for(auto &each : queries[i]) {
			int pos = lower_bound(helper + 1, helper + n + 1, each.first) - helper;
			ans[each.second] = pos;
		}
		int pos = lower_bound(helper + 1, helper + n + 1, arr[i]) - helper;
		helper[pos] = arr[i];
	}
	memset(helper, 0x3F, sizeof helper);
	ford(i, n, 1) {
		for(auto &each : queries[i]) {
			int pos = lower_bound(helper + 1, helper + n + 1, -each.first) - helper;
			ans[each.second] += pos - 1;
			if(on_lis[i] && app[lis[i]] == 1) {
				ans[each.second] = max(ans[each.second], longest - 1);
			}
			else {
				ans[each.second] = max(ans[each.second], longest);
			}
		}
		int pos = lower_bound(helper + 1, helper + n + 1, -arr[i]) - helper;
		helper[pos] = -arr[i];
	}

	fori(i, 1, m + 1) {
		printf("%d\n", ans[i]);
	}

	return 0;
}

