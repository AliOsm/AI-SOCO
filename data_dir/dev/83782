#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007LL
#define maxn 500005
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<i64, i64> pii;

int gcd(int A, int B)
{
    if(B==0) return A ;
    return gcd(B,A%B) ;
}

int a[maxn] , tr[4*maxn] ;

void build(int cn, int b ,int e)
{
    if(b==e)
    {
        tr[cn] = a[b] ;
        return ;
    }
    int l= cn*2 , r=cn*2+1 , m = (b+e)/2 ;

    build(l,b,m) ; build(r,m+1,e) ;
    tr[cn] = gcd(tr[l],tr[r]) ;
    return ;
}

void upd(int cn, int b ,int e , int idx, int val )
{
    if( b>idx || e<idx ) return ;
    if(b==e)
    {
        a[b] = val ;
        tr[cn] = a[b] ;
        return ;
    }
    int l= cn*2 , r=cn*2+1 , m = (b+e)/2 ;

    upd(l,b,m,idx,val) ; upd(r,m+1,e,idx,val) ;
    tr[cn] = gcd(tr[l],tr[r]) ;
    return ;
}
int query(int cn, int b, int e ,int left,int right)
{
    if( b>right || e<left ) return 0 ;
    if( left<=b && e<=right ) return tr[cn] ;
    int l= cn*2 , r=cn*2+1 , m = (b+e)/2 ;
    int y = query(l,b,m,left,right) ; int z = query(r,m+1,e,left,right) ;
    return gcd(y,z) ;
}

int query1(int cn, int b, int e ,int left,int right,int x)
{
    if( b>right || e<left ) return 0 ;
    if( left<=b && e<=right && tr[cn]%x==0 ) return 0 ;
    if( b==e)
    {
        if(tr[cn]%x==0) return 0 ;
        return b ;
    }
    int l= cn*2 , r=cn*2+1 , m = (b+e)/2 ;
    int y = query1(l,b,m,left,right,x) ;

    if(y!=0) return y ;
    return query1(r,m+1,e,left,right,x) ;
}


int main()
{
    int i , j , k , l , m ,n , r , x , q ;

    scanf("%d",&n) ;

    for(i=1 ; i<=n ; i++) scanf("%d",&a[i]) ;
    scanf("%d",&q) ;

    build(1,1,n) ;

    for(i=1 ; i<=q ; i++)
    {
        int qtype ;
        scanf("%d",&qtype) ;
        if(qtype==1)
        {
            scanf("%d %d %d",&l,&r,&x) ;
            int m = query1(1,1,n,l,r,x) ;

            if(m==0)
            {
                printf("YES\n") ;
                continue ;
            }

            if(m!=0){
                int t = a[m] ;
                upd(1,1,n,m,x) ;
                int res = query(1,1,n,l,r) ;
                upd(1,1,n,m,t) ;
                if(res%x==0){
                    printf("YES\n") ;
                }
                else printf("NO\n") ;
            }

        }
        if(qtype==2)
        {
            scanf("%d %d",&j,&m) ;
            upd(1,1,n,j,m) ;
        }
    }


    return 0 ;
}
