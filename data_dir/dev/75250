#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

const int N = 1e5 + 5;

int n, par[N], sz[N];
ll res[N], ans, dp[N];

int root (int v) {
	if(par[v] == v)
		return v;
	return par[v] = root(par[v]);
}

void merge(int v, int u) {
	v = root(v), u = root(u);
	if(sz[v] > sz[u])
		swap(v, u);
	sz[u] += sz[v];
	par[v] = u;
	return;
}

int main() {
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		par[i] = i, sz[i] = 1;
	for (int i = 0; i < n - 1; i++) {
		int v, u, w;
		cin >> v >> u >> w;
		v--, u--;
		string s = to_string(w);
		bool val = true;
		while(!s.empty()) {
			if(s.back() != '4' && s.back() != '7')
				val = false;
			s.pop_back();
		}
		if(!val)
			merge(v, u);
	}
	vector <int> vec;
	for (int i = 0; i < n; i++) {
		if(root(i) == i)
			vec.push_back(i);
	}
	int m = vec.size();
	for (int i = 0; i < m; i++) {
		res[i] = 1LL * sz[vec[i]] * (sz[vec[i]] - 1);
		dp[i + 1] = dp[i] + res[i];
	}
	for (int i = 0; i < m; i++) {
		int v = vec[i];
		ans += 1LL * sz[v] * (dp[m] - res[i]);
	}
	ll sum[N];
	sum[0] = 0;
	for (int i = 0; i < m; i++) {
		ans -= 1LL * sz[vec[i]] * sz[vec[i]] * sz[vec[i]];	
	}
	for (int i = 0; i < m; i++) {
		sum[i + 1] = sum[i] + sz[vec[i]];
	}
	ans += 1LL * sum[m] * sum[m] * sum[m];
	for (int i = 0; i < m; i++) {
		ans -= 1LL * 3 * sz[vec[i]] * sz[vec[i]] * (sum[m] - sz[vec[i]]);
	}
	cout << ans << "\n";
}
