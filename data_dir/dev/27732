///FUCKOUT
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")

#include "bits/stdc++.h"
using namespace std;

#define pb push_back
#define F first
#define S second
#define f(i,a,b)  for(int i = a; i < b; i++)
//#define endl '\n'

using ll = long long;
using db = long double;
using row = vector<int>;
using ii = pair<int, int>;

const int N = 400 + 5, M = 1e6 + 5, LG = 17, MOD = 1e9 + 7;
const int BLOCK = 1900;
const int BLOCKN = N / BLOCK + 1;
const long double EPS = 1e-7;

bitset<N> m[N];
string s, tp;
int n, l, h5a;
int get(char c){
  return tp[c-'a'] == 'V';
}
bool solve(string & s, int len){
  bitset<N> tmp;
  f(i,0,len+1)tmp|=m[i<<1|(get(s[i]))];
  f(i,0,n)
    if(tmp[i<<1] && tmp[i<<1|1])return false;
  return true;
}
int main(){
#ifdef ONLINE_JUDGE
  ios_base::sync_with_stdio(0);
  cin.tie(0);
#endif // ONLINE_JUDGE

  cin >> tp >> n >> h5a;
  l = tp.size();

  f(i,0,h5a){
    int u, v; char  c1,c2;
    cin >> u >> c1 >> v >> c2;
    u = (u - 1) * 2 + (c1 == 'V');
    v = (v - 1) * 2 + (c2 == 'V');
    m[u][v] = m[v ^ 1][u ^ 1] = 1;
  }

  f(i,0,n+n)m[i][i] = 1;

  f(k,0,n+n)
    f(i,0,n+n)
      if(m[i][k])m[i] |= m[k];

  cin >> s;
  if(solve(s, n -  1)){
    cout << s << '\n';
    return 0;
  }

  for(int i = n - 1 ; i >= 0; --i){
    string tmp = s;
    for(char c = s[i]+1; c < 'a' + l; c++){
      tmp[i] = c;
      if(solve(tmp, i)){  ///if prefix is correct you can solve suffix
        f(k,i+1,n)
          f(k2,0,l){
            tmp[k] = k2 + 'a';
            if(solve(tmp,k))break;
          }

        if(!solve(tmp,n-1)){
          cout << "-1\n";
        } else {
          cout << tmp << '\n';
        }
        return 0;
      }

    }

  }

  cout << -1 << '\n';

  return 0;
}
