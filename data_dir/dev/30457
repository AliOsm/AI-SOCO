//==========================================================================
//
//                   Bismillahir-Rahmanir-Rahim
//
// ==========================================================================
#include <bits/stdc++.h>
#define        ll                              long long int
#define        f(x,y,z)                        for(int x=y;x<z;x++)
#define        pii                             pair<int,int>
#define        pll                             pair<ll,ll>
#define        CLR(a)                          memset(a,0,sizeof(a))
#define        SET(a)                          memset(a,-1,sizeof(a))
#define        N                               200010
#define        M                               1000000007
#define        pi                              acos(-1.0)
#define        ff                              first
#define        ss                              second
#define        pb                              push_back
#define        inf                             (int)1e9
#define        eps                              1e-9
using namespace std;
int dx[]={0,0,1,-1,-1,-1,1,1};
int dy[]={1,-1,0,0,-1,1,1,-1};
template < class T> inline T biton(T n,T pos){return n |((T)1<<pos);}
template < class T> inline T bitoff(T n,T pos){return n & ~((T)1<<pos);}
template < class T> inline T ison(T n,T pos){return (bool)(n & ((T)1<<pos));}
template < class T> inline T gcd(T a, T b){while(b){a%=b;swap(a,b);}return a;}
template <typename T> string NumberToString ( T Number ) { ostringstream ss; ss << Number; return ss.str(); }
inline int nxt(){int aaa;scanf("%d",&aaa);return aaa;}
inline ll lxt(){ll aaa;scanf("%I64d",&aaa);return aaa;}
inline double dxt(){double aaa;scanf("%lf",&aaa);return aaa;}
template <class T> inline T bigmod(T p,T e,T m){T ret = 1;
for(; e > 0; e >>= 1){
    if(e & 1) ret = (ret * p) % m;p = (p * p) % m;
} return (T)ret;}
#define sayed
#ifdef sayed
     #define debug(args...) {cerr<<"Debug: "; dbg,args; cerr<<endl;}
#else
    #define debug(args...)  // Just strip off all debug tokens
#endif
struct debugger{
    template<typename T> debugger& operator , (const T& v){
        cerr<<v<<" ";
        return *this;
    }
}dbg;
///******************************************START******************************************
ll tree[N];
ll ar[N];
int n;
void update(int i,int val){
  while(i<=n){
     tree[i]+=val;
     i+=i&(-i);
    }
}
 ll query(int i){
    ll sum=0;
    while(i>0){
         sum+=tree[i];
         i-=i&(-i);
    }
   return sum;
 }
ll Left(ll tot){
     int b=0,e=n;
     while(b<=e){
         int mid=(b+e)>>1;
         if(query(mid)<tot) b=mid+1;
         else e=mid-1;
     }

     return b+1;
}
ll Right(ll tot){
     int b=1,e=n;
     while(b<=e){
         int mid=(b+e)>>1;
         if(query(mid)<=tot) b=mid+1;
         else e=mid-1;

     }
     return b-1;
}
ll Count(ll n,ll a){
    if(n<a) return 0;
    ll c=1;
    n-=a;
    c+=n/(a+1);
    return c;

}
int main(){
     //freopen("out.txt","w",stdout);
    //ios_base::sync_with_stdio(false);
   //cin.tie(0);
     n=nxt();int k=nxt(),a=nxt();
    ll ship=Count(n,a);
     int q=nxt();
    for(int i=1;i<=q;i++){
        int x=nxt();
        ll tot=query(x);
        int l=Left(tot);
        int r=Right(tot);
          ship-=Count(r-l+1,a);
        // cout<<l<<" lr "<<r<<" "<<tot<<endl;
        if(l==x||r==x){
            ship+=Count(r-l,a);
            update(x,1);
        } else {
           ship+=Count(x-l,a);
           ship+=Count(r-x,a);
           update(x,1);
        }
        if(ship<k){
            cout<<i<<endl;
            return 0;
        }
     // cout<<ship<<endl;
    }
   puts("-1");
return 0;
}
