#include <bits/stdc++.h>
using namespace std;

struct UnionFind {
    vector<int> par;
    vector<int> sz;

    UnionFind(int n=0){
        if(n>0) initialize(n);
    }

    void initialize(int n){
        par.resize(n);
        sz.resize(n);
        for(int i=0; i<n; i++){
            par[i] = i;
            sz[i] = 1;
        }
    }

    int find(int x){
        if(par[x] == x){
            return x;
        }else{
            return par[x] = find(par[x]);
        }
    }

    void unite(int x, int y){
        x = find(x);
        y = find(y);
        if(x == y) return;
        if(sz[x] > sz[y]) swap(x, y);
        par[x] = y;
        sz[y] += sz[x];
    }

    bool same(int x, int y){
        return find(x) == find(y);
    }

    int size(int x){
        return sz[find(x)];
    }
};

int N, M;
vector<vector<int>> edges;
vector<int> ans[2];

void dfs(int i, int p, int k){
    ans[k].push_back(i+1);
    for(int j : edges[i]) if(j != p) dfs(j, i, 1-k);
}

void solve(){
    scanf("%d %d", &N, &M);
    UnionFind uf(N);
    edges.clear();
    edges.resize(N);
    for(int i=0; i<M; i++){
        int a, b;
        scanf("%d %d", &a, &b);
        a--; b--;
        if(!uf.same(a, b)){
            edges[a].push_back(b);
            edges[b].push_back(a);
            uf.unite(a, b);
        }
    }
    ans[0].clear();
    ans[1].clear();
    dfs(0, -1, 0);
    int k = ans[0].size() < ans[1].size() ? 0 : 1;
    int sz = ans[k].size();
    printf("%d\n", sz);
    for(int i=0; i<sz; i++){
        printf("%d", ans[k][i]);
        printf(i==sz-1 ? "\n" : " ");
    }
}

int main(){
    int T;
    cin >> T;
    while(T--) solve();
    return 0;
}
