#include <bits/stdc++.h>

using namespace std;
vector<int>v[200002];
int n, sub[200002];
long long dp2[200002], viz[200002], dp[200002];
long long ans;

void dfs1 (int x) {
  viz[x] = 1;
  sub[x] = 1;
  for (auto it : v[x]) {
    if (!viz[it]) {
      dfs1(it);
      sub[x] += sub[it];
      dp[x] += dp[it] + sub[it];
    }
  }
}

void dfs2 (int x, int p) {
  if (x == 1)
    dp2[x] = dp[x];
  else
    dp2[x] = dp2[p] - sub[x] + (n - sub[x]);
  ans = max(ans, dp2[x]);
  viz[x] = 1;
  for (auto it : v[x])
    if (!viz[it])
      dfs2(it, x);
}

int main()
{
  cin >> n;
  for (int i = 1; i < n; i++) {
    int x, y;
    cin >> x >> y;
    v[x].push_back(y);
    v[y].push_back(x);
  }
  dfs1(1);
  memset(viz, 0, sizeof(viz));
  dfs2(1, 0);
  cout << ans + n;
  return 0;
}
