//#include<bits/stdc++.h>
#include<iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <stack>
#include<bitset>
#include<list>
#include<cassert>
#include<numeric>

using namespace std;


const long long N = 1e5 + 5;
vector<long long> graph[N];
set< pair<long long, long long> > st[N];
long long mark[N];
long long c[N];
long long ans[N];
long long res[N];
long long maxi[N];
long long n;

void input()
{
	cin >> n;
	for (long long i = 0; i < n; i++)
	{
		cin >> c[i];
	}
	for (long long i = 0; i < n - 1; i++)
	{
		long long u, v;
		cin >> u >> v;
		graph[u - 1].push_back(v - 1);
		graph[v - 1].push_back(u - 1);
	}
}

void dfs(long long v)
{
	mark[v] = true;
	st[v].insert({c[v], 1});
	maxi[v] = 1;
	ans[v] = c[v];
	for (long long i = 0; i < graph[v].size(); i++)
	{
		long long u = graph[v][i];
		if (!mark[u])
		{
			dfs(u);
			if (st[u].size() > st[v].size())
			{
				st[v].swap(st[u]);
				ans[v] = ans[u];
				maxi[v] = maxi[u];
			}
			while (st[u].size())
			{
				auto it = st[v].lower_bound({(*st[u].begin()).first, 0});
				if (it == st[v].end() || (*it).first != (*st[u].begin()).first)
				{
					st[v].insert({(*st[u].begin()).first, (*st[u].begin()).second});
					if (maxi[v] == (*st[u].begin()).second)
					{
						ans[v] += (*st[u].begin()).first;
					}
					if (maxi[v] < (*st[u].begin()).second)
					{
						ans[v] = (*st[u].begin()).first;
						maxi[v] = (*st[u].begin()).second;
					}
				}
				else
				{
					pair<long long, long long> tmp = *it;
					st[v].erase(it);
					st[v].insert({tmp.first, tmp.second + (*st[u].begin()).second});
					if (tmp.second + (*st[u].begin()).second == maxi[v])
					{
						ans[v] += (*st[u].begin()).first;
					}
					if (tmp.second + (*st[u].begin()).second > maxi[v])
					{
						ans[v] = (*st[u].begin()).first;
						maxi[v] = tmp.second + (*st[u].begin()).second;
					}
					
				}
				st[u].erase(st[u].begin());
			}
		}
	}
}


int main()
{
	//set<pair<long long, long long>> test;
	//test.insert({1, 2});
	//test.insert({2, 3});
	//test.insert({3, 1});
	//auto it = test.lower_bound({3, 0});
	//cout << (*it).first << " " << (*it).second << endl;
	input();
	dfs(0);
	for (long long i = 0; i < n; i++)
	{
		cout << ans[i] << " ";
	}


}



