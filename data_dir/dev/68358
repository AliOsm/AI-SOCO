#include <bits/stdc++.h>
#include <ctime>
using namespace std;

#define space ' '
#define enter "\n"
#define fi first
#define se second
#define INF 2000000007
#define mp make_pair

typedef long long ll;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef set <int> si;
typedef map <int, int> mii;
typedef pair <ll, ll> pll;
typedef vector <int> vi;
typedef vector <pii> vii;

const int MAXN = (int)1e5 + 10;

ll n;
ll cnt[MAXN], V[MAXN];
ll cntlst, vlst, ILst, LittleAns;

inline ll cube (ll x)
{
    return x * x * x;
}

inline ll cubet (ll x)
{
    ll l = 0, r = 1e5 + 1;
    while (r - l > 1)
    {
        ll md = (l + r) >> 1;
        if (cube(md) <= x)
            l = md;
        else
            r = md;
    }
    if (cube(l) < x)
        return l + 1;
    return max(l, 1ll);
}

ll GetLittleAns (ll x)
{
    if (!x)
        return 0;
    ll a = cubet(x);
    if (cube(a) > x)
        a--;
    x -= V[a];
    return cnt[a] + (x / cube(a));
}

int main ()
{
    ios_base::sync_with_stdio(false);
    cin >> n;
    cnt[1] = 1, V[1] = 1;
    cnt[2] = 7, V[2] = 7;
    for (int i = 3; cube(i) <= n; i++)
    {
        ll have = cube(i), NewCnt;
        V[i] = V[i - 1], cnt[i] = cnt[i - 1];
        have -= V[i];
        NewCnt = have / cube(i - 1);
        cnt[i] += NewCnt, V[i] += NewCnt * cube(i - 1);
        ILst = i;
    }
    LittleAns = GetLittleAns(n);
    ll have = n, ans = 0, BIG = n;
    for (int i = max(ILst, 3ll); i >= 1; i--)
    {
        ll NewCnt = have / cube(i);
        if (NewCnt + ans + GetLittleAns(have - NewCnt * cube(i)) >= LittleAns)
        {
            ans += NewCnt, have -= NewCnt * cube(i);
            continue;
        }
        NewCnt--;
        ans += NewCnt, have -= NewCnt * cube(i);
        if (cube(i) - 1 < have)
            BIG -= have - (cube(i) - 1);
        have = min(have, cube(i) - 1);
    }
    cout << ans << space << BIG - have;
}
