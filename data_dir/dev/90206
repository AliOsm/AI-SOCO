/*
▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄██████████████▒▒▐▌
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐
TAYA 
*/
#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#pragma GCC optimize("fast-math")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>
 
using namespace std;


#define ll long long
#define ld double
#define null NULL
#define prev prev228
#define index index228
#define left left228
#define right right228
#define hash hash228
#define firn(i, n) for (int i = 0; i < (int)n; ++i)
#define forn(i, n) for (int i = 1; i <= (int)n; ++i)
#define endl '\n'
#define int long long


template<typename T> inline void uin(T &a, T b) {
	if (b < a) a = b;
}

template<typename T> inline void uax(T &a, T b) {
	if (b > a) a = b;
}

const int maxn = 3000 + 7, INF = 1e18 + 228;

int cnt[maxn];

bool used[maxn];

vector< pair<int, int> > costs[maxn];

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	int n, m;
	cin >> n >> m;
	vector<int> p(n + 1), c(n + 1);
	vector< pair<int, int> > cc;
	forn(i, n) {
		cin >> p[i] >> c[i];
		++cnt[p[i]];
		cc.push_back(make_pair(c[i], i));
		costs[p[i]].push_back(make_pair(c[i], i));
	}
	forn(i, m) sort(costs[i].rbegin(), costs[i].rend());
	sort(cc.rbegin(), cc.rend());
	int res = INF;
	for (int parts = max(1LL, cnt[1]); parts <= n; ++parts) {
		memset(used, 0, sizeof(used));
		int cur = 0;
		int out = 0;
		for (int i = 2; i <= m; ++i) {
			if (cnt[i] >= parts) {
				int new_del = cnt[i] - parts + 1;
				out += new_del;
				for (int it = 0; it < new_del; ++it) {
					cur += costs[i][cnt[i] - it - 1].first;
					used[costs[i][cnt[i] - it - 1].second] = 1;
				}
			}
		}
		if (cnt[1] + out > parts) continue;
		int need = parts - cnt[1] - out;
		int ptr = n - 1;
		while (ptr >= 0 && need) {
			if (!used[cc[ptr].second] && p[cc[ptr].second] != 1) {
				--need;
				cur += cc[ptr].first;
			}
			--ptr;
		}
		uin(res, cur);
	}
	cout << res << endl;
	return 0;
}






