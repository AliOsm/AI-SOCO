///==================================================///
///                HELLO WORLD !!                    ///
///                  IT'S ME                         ///
///               BISHAL GAUTAM                      ///
///         [ bsal.gautam16@gmail.com ]              ///
///==================================================///
#include<bits/stdc++.h>
#define X first
#define Y second
#define mpp make_pair
#define nl printf("\n")
#define SZ(x) (int)(x.size())
#define pb(x) push_back(x)
#define pii pair<int,int>
#define pll pair<ll,ll>
///---------------------
#define S(a) scanf("%d",&a)
#define P(a) printf("%d",a)
#define SL(a) scanf("%lld",&a)
#define S2(a,b) scanf("%d%d",&a,&b)
#define SL2(a,b) scanf("%lld%lld",&a,&b)
///------------------------------------
#define all(v) v.begin(),v.end()
#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define fr(i,a,n) for(int i=a;i<=n;i++)
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
///==========CONSTANTS=============///
///  Digit     0123456789012345678 ///
#define MX     200002
#define inf    500000000
#define MD     1000000007
#define MD     1000000007
#define eps    1e-9
///===============================///

vector<int>v;
int n,m,q,L[MX+2],R[MX+2];

int ar[(6*MX)+2];
int nd[(20 * MX) + 2];

void Build(int id, int l, int r) {
    if(l == r) {
        nd[id] =ar[l];
        return;
    }
    int md = (l + r) >> 1, lft = id << 1, rgt = lft + 1;
    Build(lft, l, md);
    Build(rgt, md + 1, r);
    nd[id] = min(nd[lft], nd[rgt]);
}

int Qry(int id, int l, int r, int q1, int q2) {
    if(l == q1 && r == q2) return nd[id];
    int md = (l + r) >> 1, lft = id << 1, rgt = lft + 1;
    if( q2 <= md ) return Qry(lft, l, md, q1, q2);
    else if( q1 > md ) return Qry(rgt, md + 1, r, q1, q2);
    else {
        int x = Qry(lft, l, md, q1, md);
        int y = Qry(rgt, md + 1, r, md + 1, q2);
        return min(x, y);
    }
}

int main() {
    int i,j,k,x,y;
    S(n);
    fr(i,1,n) {
        S2(L[i],R[i]);

        v.pb( L[i] );
        v.pb( L[i]+1 );
        v.pb( L[i]-1 );

        v.pb( R[i]+1 );
        v.pb( R[i]-1 );
        v.pb( R[i] );
    }
    sort( all(v) );
    v.erase( unique( all(v) ) ,v.end());

    m=SZ(v);

    fr(i,1,n){
        L[i]=lower_bound(all(v), L[i])-v.begin()+1;
        R[i]=lower_bound(all(v), R[i])-v.begin()+1;

        ar[ L[i] ]++;
        ar[ R[i]+1 ]--;
    }
    fr(i,1,m){
        ar[i]+=ar[i-1];
        if(ar[i]>=MX)ar[i]=MX;
    }
    Build(1,1,m);
    int id=-1;
    fr(i,1,n){
        int mn=Qry(1,1,m,L[i],R[i]);
        if( mn>=2 ){
            id=i;
            break;
        }
    }
    printf("%d\n",id);

    return 0;
}
