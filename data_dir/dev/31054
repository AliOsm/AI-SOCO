#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
#define pb push_back
#define endl "\n"
template <typename T> inline T sqr(T t){return t*t;}

const int N = 3e5+100;

int n, m, q, d[N], diam[N];

bool used[N];

vector <int> g[N], vec;

int dsu_get(int v){
    if (d[v] == v){
        return v;
    }
    d[v] = dsu_get(d[v]);
    diam[v] = diam[d[v]];
    return d[v];
}

int dsu_unite(int a, int b){
    a = dsu_get(a);
    b = dsu_get(b);
    if (a != b)
        d[b] = a;
}

void dfs(int v, int p){
    used[v] = 1;
    if (p != 0)
        dsu_unite(p, v);
    vec.pb(v);
    for (int i = 0; i < g[v].size(); i++)
        if (g[v][i] != p)
            dfs(g[v][i], v);
}

int mx = -1, ver = 0;

void dfsmx(int v, int p, int cur){
    if (cur > mx){
        mx = cur;
        ver = v;
    }
    for (int i = 0; i < g[v].size(); i++){
        if (g[v][i] != p)
            dfsmx(g[v][i], v, cur+1);
    }
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    cin >> n >> m >> q;
    for (int i = 1; i <= m; i++){
        int u, v;
        cin >> u >> v;
        g[u].pb(v);
        g[v].pb(u);
    }
    for (int i = 1; i <= n; i++)
        d[i] = i;
    for (int i = 1; i <= n; i++){
        if (!used[i]){
            dfs(i, 0);
            mx = -1;
            ver = 0;
            dfsmx(i, 0, 0);
            mx = -1;
            dfsmx(ver, 0, 0);
            diam[i] = mx;
        }
    }
    for (int i = 1; i <= q; i++){
        int type, a, b;
        cin >> type;
        if (type == 2){
            cin >> a >> b;
            a = dsu_get(a);
            b = dsu_get(b);
            if (a == b)
                continue;
            int sz1 = diam[a], sz2 = diam[b];
            diam[a] = max(diam[a], max(diam[b], (diam[a]+1)/2 + (diam[b]+1)/2 + 1));
            //cout << a << ' ' << b << ' ' << diam[a] << endl;
            d[b] = a;
        } else {
            cin >> a;
            a = dsu_get(a);
            cout << diam[a] << endl;
        }
    }

}
