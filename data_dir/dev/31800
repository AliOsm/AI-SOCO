#include <bits/stdc++.h>
using namespace std;

const int P = 110, S = 5050 + P, MOD = 998244353;

int sum(int a, int b) {
	a += b;
	if(a < 0)
		a += MOD;
	else if(a >= MOD)
		a -= MOD;
	return a;
}

void _sum(int &a, int b) {
	a = sum(a, b);
}

int mul(int a, int b) {
	return 1LL * a * b % MOD;
}

int power(int a, int b) {
	int res = 1;
	while(b) {
		if(b & 1)
			res = mul(res, a);
		a = mul(a, a);
		b >>= 1;
	}
	return res;
}

int inv(int x) {
	return power(x, MOD - 2);
}

int p, s, r, ans, all, c[P][S];

int dio(int cnt, int s) {
	if(cnt == 0)
		return s == 0;
	if(s < 0)
		return 0;
	return c[cnt - 1][s + cnt - 1];
}

int solve(int maxi, int cnt) {
	int REM = p - cnt;
	int res = 0;
	for (int bad = 0; bad <= REM; bad++)
		if(bad & 1)
			_sum(res, -mul(c[bad][REM], dio(REM, s - (cnt + bad) * maxi)));
		else
			_sum(res, mul(c[bad][REM], dio(REM, s - (cnt + bad) * maxi)));
	return res;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	fill(c[0], c[0] + S, 1);
	for (int i = 1; i < P; i++)
		for (int j = 1; j < S; j++)
			c[i][j] = sum(c[i - 1][j - 1], c[i][j - 1]);
	
	cin >> p >> s >> r;
	for (int me = r; me <= s; me++)
		for (int cnt = 1; cnt <= p && cnt * me <= s; cnt++)
			_sum(ans, mul(c[cnt - 1][p - 1], mul(solve(me, cnt), inv(cnt))));
	for (int me = r; me <= s; me++)
		_sum(all, dio(p - 1, s - me));
	cout << mul(ans, inv(all));
	return 0;
}
