#include <bits/stdc++.h>

using namespace std;

vector<vector<int>> graph;
int n, q;
vector<int> ans;
vector<int> dp;
vector<int> sum;
vector<int> pred;

void dfs(int v, int p) {
    sum[v] = 1;
    pred[v] = p;
    dp[v] = 0;
    for (int i = 0; i < (int)graph[v].size(); ++i) {
        if (graph[v][i] != p) {
            dfs(graph[v][i], v);
            sum[v] += sum[graph[v][i]];
            dp[v] = max(dp[v], sum[graph[v][i]]);
        }
    }
}

void dfs2(int v, int p) {
    for (int i = 0; i < (int)graph[v].size(); ++i) {
        if (graph[v][i] != p)
            dfs2(graph[v][i], v);
    }
    if (sum[v] / 2 >= dp[v])
        ans[v] = v;
    else {
        int vert;
        for (int i = 0; i < (int)graph[v].size(); ++i) {
            if (graph[v][i] != p && dp[v] == sum[graph[v][i]])
                vert = graph[v][i];
        }
        int der = sum[v] / 2;
        vert = ans[vert];
        while (vert != v) {
            if (dp[vert] <= der && sum[v] - sum[vert] <= der) {
                ans[v] = vert;
                break;
            }
            vert = pred[vert];
        }
    }
}

int main() {

    ios::sync_with_stdio(false);
    cin.tie(0);
//    freopen("input.txt","r",stdin);
    cin >> n >> q;
    ans.resize(n);
    sum.resize(n);
    dp.resize(n);
    pred.resize(n);
    graph.resize(n);

    for (int i = 1; i < n; ++i) {
        int a;
        cin >> a;
        --a;
        graph[a].push_back(i);
        graph[i].push_back(a);
    }
    dfs(0, -1);
    dfs2(0, -1);
    for (int i = 0; i < q; ++i) {
        int vert;
        cin >> vert;
        cout << ans[vert - 1] + 1 << '\n';
    }
    return 0;
}
