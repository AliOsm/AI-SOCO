#include<bits/stdc++.h>
using namespace std;

// Mistake :
// I misunderstood the question initially ; actually for each color ; we need to find number of distinct colors
// that are attached to it.

int main()
{
    ios_base :: sync_with_stdio ( false ) ; cin.tie ( 0 ) ; cout.tie ( 0 ) ;
    int n , m ;
    cin >> n >> m ;

    map < int , set < int > > g ;
    vector < int > col ( n + 1 ) ;

    int dummy = -2 ;

    for ( int i=1 ; i < n + 1 ; i ++ )
    {
        cin >> col[i] ;
        g[col[i]].insert ( dummy ) ; // just to initialize all colors in map
    }

    int maxx = -1 ;
    int col_id = -1 ;

    for ( int i=0 ; i < m ; i ++ )
    {
        int a , b ;
        cin >> a >> b ;

        int ca = col[a] ;
        int cb = col[b] ;

        if ( ca == cb ) continue ;

        g[ca].insert ( cb ) ;
        g[cb].insert ( ca ) ;
    }

    # define F first
    # define S second

    for ( auto i : g )
    {
        int z = i.S.size() ;
        if ( z > maxx )
            maxx = z , col_id = i.F ;
    }

    cout << col_id << "\n"  ;
    return 0 ;
}
