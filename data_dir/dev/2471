#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define cps CLOCKS_PER_SEC
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
#define eb emplace_back
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)), (v).erase(unique(all(v)), (v).end())
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define mt make_tuple
#define pqueue priority_queue
#define bitcount(x) __builtin_popcount(x)
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000007
using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2>& p) { return os << '(' << p.fi << ", " << p.se << ')'; }

template<typename T>
void printv(const T& v) { for(auto i : v) cerr << i << ' '; cerr << '\n'; }

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;

template<typename T>
using maxpq = priority_queue<T>;

//All indexing is 0-based
using namespace __gnu_pbds;
template<class key, class cmp = std::less<key>>
using ordered_set = tree<key, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pairs of (value, time_of_insertion)
//to distinguish values which are similar

template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;

//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }

//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }

//a and b are assumed to be taken modulo p
// inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
// inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
// inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }

#define N 3000005
// #define int ll
// #define trace(...) 42

//{7340033, 998244353}
#define mod 998244353 // mod = p = 199*(2^23) + 1  = m*2^k + 1
//{5, 15311432}
const int root = 15311432;  //n = 2^23 th root of unity
//{4404020, 469870224}
const int root_1 = 469870224; // inverse of 2 ^ 20 th root of unity
//{1 << 20, 1 << 23}
const int root_pw = 1 << 23;

inline int add(int a, int b, int p = mod) { int c = a + b; if(c >= p) c -= p; return c;}
inline int sub(int a, int b, int p = mod) { int c = a - b; if(c < 0) c += p; return c;}
inline int mul(int a, int b, int p = mod) { return (a * 1ll * b) % p;}

#define inv Fermat
#define div Div

int power(int a,int b,int p = mod)
{
    int res = 1;
    while(b > 0){
        if(b & 1) res = mul(res, a, p);
        a = mul(a, a, p);
        b >>= 1;
    }
    return res;
}

//Computes a^(-1) mod p
// p must be a prime no.
// Fermat's little theorem: a^(p-1) = 1(mod p)
//So, we have a^(p-2) = a^(-1) (mod p)
inline int Fermat(int a, int p = mod){ return power(a, p-2, p);}

inline int div(int a, int b, int p) {
    return mul(a, Fermat(b, p), p);
}

vi order;

void fft(vector<int>& a, bool invert)
{
    int n = a.size();
    for(int i = 0;i < n;i++)
        if (order[i] < i)
            swap(a[i], a[order[i]]);
    
    for(int len=2; len<=n; len<<=1){
        int wn = invert ? root_1 : root;
        
        for(int l=len; l<root_pw; l<<=1)
            wn = 1ll * wn * wn % mod;    
        
        for(int i=0; i<n; i+=len){
            int w = 1;
            for(int j=0; j<len/2; j++){
                int u = a[i + j];
                int v = 1ll * a[i + j + len/2] * w % mod;
                a[i + j] = u + v >= mod ? u + v - mod : u + v;
                a[i + j + len/2] = u - v >= 0 ? u - v : u - v + mod;
                w = 1ll * w * wn % mod;
            }
        }
    }
    
    if(invert){
        int n_1 = inv(n, mod);
        for(int& c : a)
            c = c * 1ll * n_1 % mod;
    }
}

void precalc(int n, int L)
{
    order.resize(n);
    for(int i = 0; i < n; i++)
    {
        int res = 0;
        for(int j = 0;j < L;j++)
            if (i & (1<<j))
                res |= 1<<(L - j - 1);
        order[i] = res;
    }
}

vi multiply(const vi& a, const vi& b)
{
    vector<int> fa = a, fb = b;
    int n = 1; 
    int L = 0;
    while(a.size() + b.size() - 1 > n)
        n <<= 1, L++;
    fa.resize(n);
    fb.resize(n);
    precalc(n, L);
    fft(fa,false);
    fft(fb,false);
    for(int i = 0;i < n;i++)
        fa[i] = 1ll * fa[i] * fb[i] % mod;
    fft(fa,true);
 
    fa.resize(n);
    
    /* Uncomment following 2 lines to prune the trailing 0s from the polynomial.*/
   while(fa.size() > 1 && fa.back() == 0)
       fa.pop_back();
    return fa;
}

int n, p[N], freq[N];
vvi poly;

vi solve(int l, int r) {
    if(l == r) return poly[l];

    int m = (l + r) / 2;
    vi a = solve(l, m);
    vi b = solve(m+1, r);

    return multiply(a, b);
}

main()
{   
    #ifndef ONLINE_JUDGE
        freopen("/home/tarun/Desktop/input.txt", "r", stdin);
     // freopen("/home/tarun/Desktop/output.txt", "w", stdout);
    #endif
    sync;
    clock_t clk = clock();
    cerr << "I will return...\n";

    cin >> n;
    rep(i, 0, n) cin >> p[i], ++freq[p[i]];

    rep(i, 0, N) {
        if(freq[i]) {
            vi v(freq[i]+1, 1);
            poly.pb(v);
            // printv(v);
        }
    }

    vi ans = solve(0, poly.size() - 1);
    cout << ans[n/2] << '\n';

    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << (double)(clock() - clk) * 1000.0 / cps << '\n';
}

//Compile using:
//g++ -o filename.exe --std=c++11 filename.cpp
//Use -D CP for defining a macro CP in the local environment

