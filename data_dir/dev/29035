#include <bits/stdc++.h>
#include <ext/hash_set>
#include <ext/numeric>

using namespace __gnu_cxx;
using namespace std;

using ll = long long;
using vi = vector<ll>;
using vll = vector<ll>;
using vvi = vector<vi>;
using pii = pair<int, int>;
using vii = vector<pii>;
using vb = vector<bool>;
using vs = vector<string>;
const int MOD = int(1e9 + 7);
const long double EPS = 1e-4;
const double PI = 3.1415926535897932384626433;
const ll INF = ll(1e9);
int di[] = {0, 0, 0, 1, -1, 1, -1, 1, -1};
int dj[] = {0, 1, -1, 0, 0, 1, -1, -1, 1};
#define all(x) x.begin(),x.end()


int main() {
	ios::sync_with_stdio(false), cin.tie(nullptr);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#endif

	int n, m, q; cin >> n >> m >> q;
	vi num(n);
	for (int i = 0; i < n; ++i) {
		cin >> num[i];
	}

	int sq = sqrt(n);
	vb isBig(n);
	vi big(m), ch(m);
	vvi st(m);
	vvi bigHere(n), smlHere(n);
	vector<map<int, int>> adjBig(m);
	for (int i = 0; i < m; ++i) {
		int sz; cin >> sz;
		st[i].resize(sz);
		if (sz >= sq) {
			isBig[i] = true;
			adjBig[i][i] = sz;
			for (int j = 0; j < sz; ++j) {
				cin >> st[i][j]; st[i][j]--;
				big[i] += num[st[i][j]];
				for (auto& k : smlHere[st[i][j]]) {
					adjBig[k][i]++;
				}
				for (auto& k : bigHere[st[i][j]]) {
					adjBig[i][k]++;
					adjBig[k][i]++;
				}
				bigHere[st[i][j]].push_back(i);
			}
		} else {
			for (int j = 0; j < sz; ++j) {
				cin >> st[i][j]; st[i][j]--;
				smlHere[st[i][j]].push_back(i);
				for (auto& k : bigHere[st[i][j]]) {
					adjBig[i][k]++;
				}
			}
		}
	}

	while (q--) {
		char tp; cin >> tp;
		int k; cin >> k; k--;
		if (tp == '?') {
			ll ans = 0;
			if (isBig[k]) {
				ans = big[k];
			} else {
				for (auto& i : st[k])
					ans += num[i];
			}
			for (auto &i : adjBig[k])
				ans += ch[i.first] * i.second;
			cout << ans << endl;
		} else {
			ll x; cin >> x;
			if (isBig[k]) {
				ch[k] += x;
			} else {
				for (auto& i : st[k])
					num[i] += x;
				for (auto& i : adjBig[k])
					big[i.first] += x * i.second;
			}
		}
	}
}
