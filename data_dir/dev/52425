//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 100001

pair<ll,pair<ll,ll> >a[maxn];

typedef struct node
{
    int val,prior,size;
    struct node *l,*r;
}node;
typedef node* pnode;
int sz(pnode t)
{
    return t?t->size:0;
}
void upd_sz(pnode t)
{
    if(t)t->size = sz(t->l) + 1 + sz(t->r);
}
void split(pnode t,pnode &l,pnode &r,int key)
{
    if(!t)
    l=r=NULL;
    else if(t->val <= key)
    split(t->r,t->r,r,key),l=t; 
    else 
    split(t->l,l,t->l,key),r=t;    
    upd_sz(t);
}
void merge(pnode &t,pnode l,pnode r)
{
    if(!l || !r)
    t=l?l:r;
    else if(l->prior>r->prior)
    merge(l->r,l->r,r),t=l;
    else
    merge(r->l,l,r->l),t=r;
    upd_sz(t);
}
void insert(pnode &t,pnode it)
{
    if(!t)
    t=it;    
    else if(it->prior>t->prior)
    split(t,it->l,it->r,it->val),t=it;
    else
    insert(t->val<it->val?t->r:t->l,it);
    upd_sz(t);
}
void erase(pnode &t,int key)
{
    if(!t)return;
    else if(t->val==key)
    {
        pnode temp=t;
        merge(t,t->l,t->r);
        free(temp);
    }    
    else 
    erase(t->val<key?t->r:t->l,key);
    upd_sz(t);
}
pnode init(int val)
{
    pnode ret=(pnode)malloc(sizeof(node));
    ret->val=val;
    ret->size=1;
    ret->prior=rand();
    ret->l=ret->r=NULL;
    return ret;
}
ll query(pnode node,ll val)//number of nodes with value>=val
{
    if(!node)
    return 0;
    if(node->val<val)
    return query(node->r,val);
    else
    return query(node->l,val)+1+sz(node->r);
}

pnode tree[maxn];
int main()
{
    boost1;boost2;
    ll i,j,n,x,y,ans=0,xstart,xend,fstart,fend,k;
    for(i=0;i<maxn;i++)
    tree[i]=NULL;
    cin>>n>>k;
    for(i=1;i<=n;i++)
    cin>>a[i].S.F>>a[i].F>>a[i].S.S;
    sort(a+1,a+n+1);
    reverse(a+1,a+n+1);

    for(i=1;i<=n;i++)
    {
        fstart=max(-k+a[i].S.S,1LL);
        fend=min(k+a[i].S.S,10000LL);
        xstart=-a[i].F+a[i].S.F;
        xend=a[i].F+a[i].S.F;
        for(j=fstart;j<=fend;j++)
        ans+=query(tree[j],xstart)-query(tree[j],xend+1);
        insert(tree[a[i].S.S],init(a[i].S.F));
    }
    cout<<ans;
    return 0;
}
