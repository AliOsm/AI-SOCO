#include <bits/stdc++.h>
using namespace std;
class KuhnBPM{
  public:
    int n,k;
    vector < vector<int> > g;
    vector<int> pairs_of_right, pairs_of_left;
    vector<int> used;
    int cs;
    bool kuhn (int v) {
        if (used[v]==cs)  return false;
        used[v] = cs;
        for (int i = 0; i < g[v].size(); ++i) {
            int to = g[v][i];
            if (pairs_of_right[to] == -1 || kuhn (pairs_of_right[to])) {
                pairs_of_right[to] = v;
                pairs_of_left[v] = to;
                return true;
            }
        }
        return false;
    }
    void init(int _k){
        cs=0;
        n=5007;
        k=_k+7;
        g=vector<vector<int> > ( n, vector<int> (0,0));
        pairs_of_right = vector<int> (k, -1);
        pairs_of_left = vector<int> (n, -1);
        used = vector<int>(n,0);
    }
    int find_max_matching() {

        bool path_found,ok;
        int ret = 0;
        do{
            cs++;
            path_found = false;
            for (int i = ret; i < n; ++i,ret++)
                if (pairs_of_left[i] < 0 && used[i]!=cs){
                    ok=kuhn (i);
                    path_found |= ok;
                    if(!ok){break;}
                }
        }while (path_found);
        return ret ;

    }
};
KuhnBPM kuhn;
int n,m,q;
int p[5007];
int c[5007];
int id[5007];
int ans[5007];
pair<int,pair<int,int> >  edge[5007];
int main(){
    cin>>n>>m;
    for(int i=1;i<=n;i++)scanf("%d",&p[i]);
    for(int i=1;i<=n;i++)scanf("%d",&c[i]);
    cin>>q;
    for(int i=1;i<=q;i++){
        int x;
        scanf("%d",&x);
        id[x]=n-i+1;
    }
    for(int i=1;i<=n;i++){
       edge[i]={id[i],{p[i],c[i]}};
    }
    sort(edge+1,edge+n+1);
    kuhn.init(m);
    for(int i=1;i<=n;i++){
        int idx = n-edge[i].first+1;
        int u = edge[i].second.first;
        int v = edge[i].second.second;
        if(idx<=n)ans[idx]=kuhn.find_max_matching();
        kuhn.g[u].push_back(v);
    }
    for(int i=1;i<=q;i++){
        printf("%d\n",ans[i]);
    }


    return 0 ;
}
