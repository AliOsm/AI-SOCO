#include <cstdio>
#include <vector>
#include <cstring>
using namespace std;
int dp[110][110][110];
char s1[110],s2[110],s3[110];
int pre[110][30];
void init()
{
    int len = strlen(s3+1);
    for(int i = 0; i < 26; i++) pre[0][i] = 0;
    pre[0][s3[1]-'A'] = 1;
    for(int i = 1; i <= len; i++) {
        for(int j = 0; j < 26; j++){
             char tmp = s3[i+1];
//             s3[i+1] = 'A' + j;
             bool flag = true;
             int k;
             for(k = i+1; k >= 1; k--) if(s3[k] == 'A' + j){
                    int pt = i;
                    for(int kk = k-1; kk >= 1; kk--) {
                        if(s3[kk] != s3[pt]) {
                            flag = false;
                            break;
                        }
                        pt --;
                    }
                    if(flag) {
                        break;
                    }
             }
             pre[i][j] = k;
  //           s3[i+1] = tmp;
        }
    }
}
struct node {
    int i,j,k;
    node(){

    }
    node(int a,int b,int c) {
        i = a;
        j = b;
        k = c;
    }
}path[110][110][110];
int main()
{
    scanf("%s%s%s",s1+1,s2+1,s3+1);
    int n = strlen(s1+1);
    int m = strlen(s2+1);
    int K = strlen(s3+1);
    init();
/*    for(int i = 0; i < K; i++) {
        for(int j = 0; j < 26; j++) {
            printf("dp[%d][%d]=%d\n",i,j,pre[i][j]);
        }
    }*/
    dp[0][0][0] = 0;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            for(int k = 0; k < K; k++) {
                if(s1[i+1] == s2[j+1]) {
                    int to = pre[k][s1[i+1]-'A']; 
                   // printf("%d %d %d\n",i,j,to);
                    if(to!=K && dp[i][j][k]+1 > dp[i+1][j+1][to]) {
                        path[i+1][j+1][to] = node(i,j,k);
                   
                     
                        dp[i+1][j+1][to] = dp[i][j][k] + 1 ;
                     //   printf("%d %d %d %d\n",i+1,j+1,to,dp[i+1][j+1][to]);
                    } 
                }  
                if(dp[i][j][k] > dp[i+1][j][k]) {
                        dp[i+1][j][k] = dp[i][j][k];
                        path[i+1][j][k] = node(i,j,k);
                }
                if(dp[i][j][k] > dp[i][j+1][k]) {
                        dp[i][j+1][k] = dp[i][j][k];
                        path[i][j+1][k] = node(i,j,k);
                }
                
            }
        }
    }
    int ans = 0;
    node end;
    for(int i = 0; i <= n; i++) {
        for(int j = 0; j <= m; j++) {
            for(int k = 0; k < K; k++) if(dp[i][j][k] > ans) {
                ans = dp[i][j][k];
                end = node(i,j,k);
            }
        }
    }
    if(ans == 0)
    printf("%d\n",ans);
    else {
  //      printf("ans=%d\n",ans);
        int a = end.i, b = end.j, c = end.k;
        vector<char> ret;
        while(a&&b) {
//            printf("a=%d b=%d c=%d %d\n",a,b,c,dp[a][b][c]);
            int ta = path[a][b][c].i;
            int tb = path[a][b][c].j;
            int tc = path[a][b][c].k;
            if(ta == a-1 && tb == b-1) {
                ret.push_back(s1[a]);
            }
            if(ret.size() == ans) break;
            a = ta; b = tb; c = tc;
        }
        for(int i = ret.size()-1;i>=0;i--) {
            printf("%c",ret[i]);
        }
        puts("");
    }
    return 0;
}
