#include<bits/stdc++.h>

using namespace std;


#include <ext/rope>
using namespace __gnu_cxx;


#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;


#define int long long

#define add push_back
#define rem pop_back
#define ALL(x) x.begin(), x.end()
#define SORT(x) sort(ALL(x))
#define SZ(x) int((x).size())
#define F first
#define S second
#define NEW(x, y, z) x y; x::iterator z;



#define REPI(it, x) for(__typeof((x).begin()) it = (x).begin(); it != (x).end(); it++)
#define REP(i, a, b)  for(int i = a; i <  b; i++)
#define REPN(i, a, b) for(int i = a; i <= b; i++)
#define REPV(i, b, a) for(int i = b; i >= a; i--)


const double EPS = 1e-9;
const double PI = acos(-1.);
const int MOD = 1e9 + 7;
const int MAXN = 500001;
int INF = __INT64_MAX__;
int MAX = -1e16;
int MIN = 1e16;
string YN[] = {"NO", "YES"};


#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
template<typename T1, typename T2> T2 max(T1 a, T2 b) { T2 res = a > b ? a : b; return res; }
template<typename T1, typename T2> T2 min(T1 a, T2 b) { T2 res = a < b ? a : b; return res; }


int POW (int a, int n)
{
		int res = 1;
		while (n) {
				if (n & 1)
						res *= a;
				a *= a;
				n >>= 1;
		}
		return res;
}


string to_string(int n)
{
		stringstream ss;
		string s;
		ss << n;
		ss >> s;
		return s;
}


string to_binary(int n)
{
		string s;
		while(n) {
				s += (n & 1) + '0';
				n >>= 1;
		}
		reverse(ALL(s));
		return s;
}


int GCD_E(int a, int b, int& x, int& y)
{
		if (!a) {
				x = 0;
				y = 1;
				return b;
		}
		int x1, y1;
		int d = GCD_E(b % a, a, x1, y1);
		x = y1 - (b / a) * x1;
		y = x1;
		return d;
}


inline int addMOD(int a, int b, int m = MOD)
{
		return (a + b) % m;
}


inline int mulMOD(int a, int b, int m = MOD)
{
		return (a * b) % m;
}


inline int divMOD(int a, int b, int m = MOD)
{
		int x, y;
		int g = GCD_E(b, m, x, y);
		x = (x % m + m) % m;
		return mulMOD(a, x, m);
}

int fact[MAXN];
inline int C(int k, int n)
{
		return divMOD(fact[n], mulMOD(fact[n - k], fact[k]));
}


int px[] = { 1, 1, -1, -1 };
int py[] = { -1, 1, -1, 1};
int dx[] = { 1, 0, -1, 0, 1, 1, -1, -1 };
int dy[] = { 0, 1, 0, -1, 1, -1, 1, -1 };
int fx[] = {-2, -2, -1, -1,  1,  1,  2,  2};
int fy[] = {-1,  1, -2,  2, -2,  2, -1,  1};




int n, m, k, s, cnt, res;
int A[201][201], B[201][201];

void solution()
{
		vector<pair<pair<int, int>, int>> ans;
		cin >> n >> m;
		REPN(i, 1, n){
			REPN(j, 1, m){
				char c;
				cin >> c;
				if(c == '*')
					A[i][j] = 1;
			}
		}
		REPN(i, 1, n){
			REPN(j, 1, m){
				if(A[i][j]){
					int dx = j + 1;
					int k1 = 0, k2 = 0, k3 = 0, k4 = 0;
					while(dx <= m && A[i][dx]) k1++, dx++;
					dx = j - 1;
					while(dx >= 1 && A[i][dx]) k2++, dx--;

					dx = i + 1;
					while(dx <= n && A[dx][j]) k3++, dx++;

					dx = i - 1;
					while(dx >= 1 && A[dx][j]) k4++, dx--;

					int p = min({k1, k2, k3, k4});
					if(p)
						ans.add({{i, j}, p});
				}
			}
		}
		
			for(auto p : ans) {
				REPN(i, p.F.F - p.S, p.F.F + p.S) B[i][p.F.S] = 1;
				REPN(j, p.F.S - p.S, p.F.S + p.S) B[p.F.F][j] = 1;
			}
			REPN(i, 1, n){
				REPN(j, 1, m){
					if(A[i][j] != B[i][j]){
						cout << -1;
						return;
					}
				}
			}
			cout << ans.size() << endl;
			for(auto p : ans) cout << p.F.F << " " << p.F.S << " " << p.S << endl;
		
}

__INT16_C() main()
{
        //ifstream fin("input.in");
        //ofstream fout("output.out");

        ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);

        int t = 1;
        // cin >> t;

        while(t--) solution();
}