#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <cstring>
#include <stdlib.h>
#include <iomanip>
#include <queue>
#include <ctime>
#include <deque>
#include <utility>
#include <iterator>
#include <set>
#include <map>

using namespace std;

#define pb push_back
#define mp make_pair
#define F first
#define S second
#define scf scanf
#define prf printf

int n, m, q;
int l1, r1, l2, r2;
long long p;
char t;
int pos, len;
multiset < int > vmax, gmax;
multiset < int > :: iterator pit;
set < pair < int, int > > v, g;
set < pair < int, int > > :: iterator it;

int main() {
    scf("%d%d%d\n", &m, &n, &q);
    v.insert(mp(1, m));
    g.insert(mp(1, n));
    vmax.insert(m);
    gmax.insert(n);
    while (q--) {
        scf("%c %d", &t, &pos);
        if (t == 'H') {
            pos = n - pos;
            it = g.lower_bound(mp(pos, pos));
            if (it == g.end()) --it;
            if (pos < it->F) --it;
            len = it->S - it->F + 1;
            gmax.erase(gmax.find(len));
            l1 = it->F;
            r1 = pos;
            l2 = pos + 1;
            r2 = it->S;
            g.erase(it);
            gmax.insert(r1 - l1 + 1);
            gmax.insert(r2 - l2 + 1);
            g.insert(mp(l1, r1));
            g.insert(mp(l2, r2));
        } else {
            pos = m - pos;
            it = v.lower_bound(mp(pos, pos));
            if (it == v.end()) --it;
            if (pos < it->F) --it;
            len = it->S - it->F + 1;
            vmax.erase(vmax.find(len));
            l1 = it->F;
            r1 = pos;
            l2 = pos + 1;
            r2 = it->S;
            v.erase(it);
            vmax.insert(r1 - l1 + 1);
            vmax.insert(r2 - l2 + 1);
            v.insert(mp(l1, r1));
            v.insert(mp(l2, r2));
        }
        pit = vmax.end(); --pit;
        p = 1LL * (*pit);
        pit = gmax.end(); --pit;
        p = p * 1LL * (*pit);
   
        prf("%I64d\n", p);
        if (q != 0) scf("\n");
    }
    return 0;
}
