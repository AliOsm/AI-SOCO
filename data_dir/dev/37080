#include <bits/stdc++.h>
using namespace std;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl




typedef long long ll;
const ll mod = 1e9+7;
const int maxn = 1010;





int n, m;
int id[maxn][maxn];
string g[maxn];
int cnt;

vector<pair<int,int>> moves  = { {0,1},{1,0},{0,-1},{-1,0} };

void dfs(int i, int j) {
    id[i][j]=cnt;
    for (auto mo: moves) {
	int di = mo.first+i;
	int dj = mo.second+j;
	if (di<0||dj<0||di>=n||dj>=m||(id[di][dj]!=-1)) continue;
	if (g[di][dj]=='.') continue;
	dfs(di,dj);
    }
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);

    cin>>n>>m;
    for (int i=0; i<n; i++) {
	cin>>g[i];
    }
    memset(id,-1,sizeof(id));

    for (int i=0; i<n; i++) {
	for (int j=0; j<m; j++) {
	    if (g[i][j] == '#' && id[i][j] == -1) {
		dfs(i,j);
		cnt++;
	    }
	}
    }


    //validate rows
    {
	for (int i=0; i<n; i++) {
	    int last = -1;
	    for (int j=0; j<m; j++) {
		if (id[i][j]==-1) continue;
		if (last==-1) {
		    last=j; continue;
		}
		if (last+1<j) out(-1);
		last=j;
	    }
	}
    }



    //validate cols
    for (int j=0; j<m; j++) {
	int last = -1;
	for (int i=0; i<n; i++) {
	    if (id[i][j]==-1) continue;
	    if (last==-1) {
		last=i; continue;
	    }
	    if (id[last][j]==id[i][j] && last+1<i) out(-1);
	    last=i;
	}
    }



    //make S per row and col
    vector<bool> rows(n, false), cols(m, false);
    vector<bool> has_black_in_row(n, false), has_black_in_col(m, false);
    for (int i=0; i<n; i++) {
	for (int j=0; j<m; j++) {
	    if (id[i][j]!=-1) {
		rows[i]=true;
		cols[j]=true;
		has_black_in_row[i]=true;
		has_black_in_col[j]=true;
	    }
	}
    }


    vector<pair<int,int>> pts;
    for (int i=0; i<n; i++) {
	for (int j=0; j<m; j++) {
	    if (!rows[i] && !cols[j]) {
		//row not covered && col not covered
		//can safely put an S here without tempting any black
		pts.emplace_back(i,j);
	    }
	}
    }
    for (auto p: pts) {
	rows[p.first]=true;
	cols[p.second]=true;
    }

    for (int i=0; i<n; i++) {
	if (!rows[i]) out(-1);
    }

    for (int j=0; j<m; j++) {
	if (!cols[j]) out(-1);
    }

    cout<<cnt<<endl;  

    return 0;
}
