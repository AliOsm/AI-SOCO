#include<stdio.h>
#include<string.h>
#include<algorithm>
#include<map>
#include<string>
#include<math.h>
#include<queue>
#include<stack>
#include<iostream>
using namespace std;
#define LL long long
#define mod 1000000007
LL all, n, tre[200005], ned[200005];
typedef struct Res
{
	LL x, id;
	bool operator < (const Res &b) const
	{
		if(x>b.x)
			return 1;
		return 0;
	}
}Res;
Res s[200005];
LL Query(LL k)
{
	LL ans = 0;
	while(k)
	{
		ans += tre[k];
		k -= k&-k;
	}
	return ans;
}
void Update(LL k, LL val)
{
	while(k<=n)
	{
		tre[k] += val;
		k += k&-k;
	}
}
LL Query2(LL k)
{
	LL ans = 0;
	while(k)
	{
		ans += ned[k];
		k -= k&-k;
	}
	return ans;
}
void Update2(LL k, LL val)
{
	while(k<=n)
	{
		ned[k] += val;
		k += k&-k;
	}
}
LL Jud(LL loc, LL m)
{
	LL now;
	if(loc+m-1<=n)
		return Query(loc+m-1)-Query(loc-1);
	else
	{
		now = m-(n-loc+1);
		return all-(Query(loc-1)-Query(now));
	}
}
int main(void)
{
	LL T, x, i, ans, cnt, loc, l, r, mid, now;
	scanf("%lld%lld", &n, &T);
	all = 0, cnt = n;
	for(i=1;i<=n;i++)
	{
		scanf("%lld", &x);
		s[i].id = i, s[i].x = x;
		Update2(i, 1);
		Update(i, x);
		all += x;
	}
	ans = 0;
	sort(s+1, s+n+1), loc = 1;
	for(i=1;i<=n;i++)
	{
		//printf("%lld %lld\n", T, s[i].x);
		if(T<s[i].x)
		{
			Update(s[i].id, -s[i].x);
			Update2(s[i].id, -1);
			all -= s[i].x;
			cnt--;
		}
		else
		{
			x = T-s[i].x;
			ans += cnt*(x/all);
			T -= x/all*all;
			//printf("%lld %lld\n", T, ans);
			l = 1, r = n;
			while(l<r)
			{
				mid = (l+r)/2;
				if(T-Jud(loc, mid)<s[i].x)
					r = mid;
				else
					l = mid+1;
			}
			T -= Jud(loc, r);
			if(loc+r-1<=n)
				ans += Query2(loc+r-1)-Query2(loc-1);
			else
			{
				now = r-(n-loc+1);
				ans += cnt-(Query2(loc-1)-Query2(now));
			}
			if(loc+r>n)
				loc = loc+r-n;
			else
				loc = loc+r;
			Update(s[i].id, -s[i].x);
			Update2(s[i].id, -1);
			all -= s[i].x;
			cnt--;
		}
	}
	printf("%lld\n", ans);
	return 0;
}