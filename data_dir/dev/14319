#include<bits/stdc++.h>
using namespace std;

bool is_prime(int n) {
    static map<int, bool> cache;

    if (cache.find(n) != cache.end()) {
        return cache[n];
    }

    for (int i = 2; i * i <= n; i++)
        if (n % i == 0) {
            return cache[n] = false;
        }

    return cache[n] = true;
}

int f(int n) {
    static map<int, int> cache;

    if (cache.find(n) != cache.end()) {
        return cache[n];
    }

    if (is_prime(n)) {
        return cache[n] = 1;
    }

    int res = 1;

    for (int i = 2; i * i <= n; i++)
        while (n % i == 0) {
            n /= i;
            res = i;
        }

    return cache[n] = res;
}

void case1(int n) {
    vector<int> dp(n + 1, 4);
    dp[0] = 0;

    for (int i = 0; i <= n; i++)
        for (int j = 2; i + j <= n; j++) {
            dp[i + j] = min(dp[i + j], dp[i] + f(j));
        }

    printf("%d", dp[n]);
}

void case2(int n) {
    for (int i = 2; i <= 1e6 && i + 2 <= n; i++)
        if (is_prime(i) && is_prime(n - i)) {
            printf("2");
            return;
        }

    printf("3");
}

int main() {
    int n = 1999999999;
    scanf("%d", &n);

    if (is_prime(n)) {
        printf("1");
        return 0;
    }

    (n <= 1e3 ? case1 : case2)(n);
}
