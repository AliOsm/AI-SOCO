// KALAM
# include <bits/stdc++.h>
using namespace std;
const int N = 2e5 + 77 , Mod = 1e9 + 7;
int dp[N] , A[N] , n;
vector < pair < int , bool > > a[N];
void dfs(int v , int prev){
	for(auto x : a[v]){
		int u = x.first;
		if(u == prev)continue;
		dfs(u,v);
		if(x.second)dp[v]++;
		dp[v] += dp[u];
	}
}
void dfsc(int v , int prev , bool c){
	if(v != prev){
		dp[v] = dp[prev];
		if(c)dp[v]++;
		else dp[v]--;
	}
	for(auto x : a[v]){
		int u = x.first;
		if(u == prev){
			
			continue;
		}
		dfsc(u , v , !x.second);
	}
}
int main(){
	scanf("%d" , & n);
	for(int i = 1;i < n;i++){
		int x , y;
		scanf("%d %d" , & x , & y);
		a[x].push_back(make_pair(y,false));
		a[y].push_back(make_pair(x,true));
	}
	dfs(1,1);
	dfsc(1,1,1);
	
	int Mn = Mod;
	vector < int > R;
	for(int i = 1;i <= n;i++){
		if(dp[i] < Mn){R.clear();Mn = dp[i];}
		if(dp[i] == Mn){
			R.push_back(i);
		}
	}
	printf("%d\n",Mn);
	for(auto i : R)printf("%d ",i);
	return (0);
}

