#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 2e5 + 7;

ll h[N], a[N];
int st[N], ft[N];
vector<pair<int, int> > adj[N];
int tim = 0;
int ord[N], ind[N];
int fen[N], ans[N];

void add(int p, int val)
{
	for (p++; p < N; p += p & -p)
		fen[p] += val;
}
int get(int p, int res = 0)
{
	for (; p; p -= p & -p)
		res += fen[p];
	return res;
}

void dfs(int v, int p)
{
	st[v] = tim++;
	for (auto u : adj[v])
		if (u.first != p)
		{
			h[u.first] = h[v] + u.second;
			dfs(u.first, v);
		}
	ft[v] = tim;
}

bool cmp(int x, int y)
{
	return h[x] < h[y];
}
bool cmp2(int x, int y)
{
	return a[x] < a[y];
}

int main()
{
	ios::sync_with_stdio(false);


	int n;
	cin >> n;
	for (int i=0; i<n; i++)
		cin >> a[i];
	for (int i=1; i<n; i++)
	{
		int p, w;
		cin >> p >> w;
		adj[--p].push_back({i, w});
	}
	dfs(0, -1);
	for (int i=0; i<n; i++)
		a[i] = h[i] - a[i];
	for (int i=0; i<n; i++)
		ord[i] = ind[i] = i;
	sort(ord, ord + n, cmp);
	sort(ind, ind + n, cmp2);
	int p = 0;
	for (int i=0; i<n; i++)
	{
		while (p < n && a[ind[p]] <= h[ord[i]])
			add(st[ind[p]], 1), p++;
		ans[ord[i]] = -get(st[ord[i]]) + get(ft[ord[i]]);
	}
	for (int i=0; i<n; i++)
		cout << ans[i] - 1 << " ";
	cout << "\n";
	return 0;
}
