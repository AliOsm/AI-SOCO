#include <bits/stdc++.h>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d %d", &a, &b)
#define sc3(a, b, c) scanf("%d %d %d", &a, &b, &c)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define udb(x) cerr<< #x <<" == "<< x <<endl;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9+7;
struct Hashing{
	vector<ull> h, eleva;
	ull B;
	const string &s;
	Hashing(const string &s, ull B) : s(s), h(s.size()), eleva(s.size()){
		eleva[0] =1;
		for(int i=1;i<s.size();i++) eleva[i] = eleva[i-1]*B;
		ull hp=0;
		for(int i=0;i<s.size();i++){
			hp = hp*B + s[i];
			h[i] = hp;
		}
	}
	ull getHash(int i, int j){
		if(i==0) return h[j];
		return h[j] - h[i-1]*eleva[j-i+1];
	}
};

struct Hashing2{
	vector<ll> h, eleva;
	ll B;
	const string &s;
	Hashing2(const string &s, ll B) : s(s), h(s.size()), eleva(s.size()){
		eleva[0] =1;
		for(int i=1;i<s.size();i++) eleva[i] = (eleva[i-1]*B)%MOD;
		ll hp=0;
		for(int i=0;i<s.size();i++){
			hp = ((hp*B)%MOD + s[i])%MOD;
			h[i] = hp;
		}
	}
	ll getHash(int i, int j){
		if(i==0) return h[j];
		return (h[j] - (h[i-1]*eleva[j-i+1])%MOD + MOD)%MOD;
	}
};

int main()
{
	string s;
	cin>>s;
	for(char &c: s) c-='0';
	Hashing Dilson(s,10);
	Hashing2 Douglas(s,10);
	for(char &c: s) c+='0';
	for(int i=1;i<=s.size()-2;i++){
		int l1=0;
		int r1=i-1;

		int l2=i;
		int r2=s.size()-1-i;
		if(r2<l2) continue;

		int l3=s.size()-i;
		int r3=s.size()-1;

		if(Dilson.getHash(l1, r1) + Dilson.getHash(l2,r2) == Dilson.getHash(l3,r3) and ( (Douglas.getHash(l1,r1) + Douglas.getHash(l2,r2) )%MOD == Douglas.getHash(l3,r3) )){
			if(r1 - l1>=1 and s[l1] =='0') continue;
			if(r2 - l2>=1 and s[l2] =='0') continue;
			if(r3 - l3>=1 and s[l3] =='0') continue;
			cout<<s.substr(l1, r1-l1+1)<<"+"<<s.substr(l2, r2-l2+1)<<"="<<s.substr(l3, r3-l3+1)<<endl;
			return 0;
		}
	}


	for(int i=1;i<=s.size()-2;i++){
		int l1=0;
		int r1=s.size()-2*i-1;
		if(r1<0) continue;
		int l2=s.size()-2*i;
		int r2=s.size()-i-1;

		int l3=s.size()-i;
		int r3=s.size()-1;
		if(Dilson.getHash(l1, r1) + Dilson.getHash(l2,r2) == Dilson.getHash(l3,r3) and ( (Douglas.getHash(l1,r1) + Douglas.getHash(l2,r2) )%MOD == Douglas.getHash(l3,r3) )){

			if(r1 - l1>=1 and s[l1] =='0') continue;
			if(r2 - l2>=1 and s[l2] =='0') continue;
			if(r3 - l3>=1 and s[l3] =='0') continue;
			cout<<s.substr(l1, r1-l1+1)<<"+"<<s.substr(l2, r2-l2+1)<<"="<<s.substr(l3, r3-l3+1)<<endl;
			return 0;
		}
	}

	for(int i=2;i<=s.size()-2;i++){
		int l1=0;
		int r1=i-2;

		int l2=i-1;
		int r2=s.size()-1-i;
		if(r2<l2) continue;

		int l3=s.size()-i;
		int r3=s.size()-1;
		if(Dilson.getHash(l1, r1) + Dilson.getHash(l2,r2) == Dilson.getHash(l3,r3) and ( (Douglas.getHash(l1,r1) + Douglas.getHash(l2,r2) )%MOD == Douglas.getHash(l3,r3) )){
			if(r1 - l1>=1 and s[l1] =='0') continue;
			if(r2 - l2>=1 and s[l2] =='0') continue;
			if(r3 - l3>=1 and s[l3] =='0') continue;
			cout<<s.substr(l1, r1-l1+1)<<"+"<<s.substr(l2, r2-l2+1)<<"="<<s.substr(l3, r3-l3+1)<<endl;
			return 0;
		}
	}

	for(int i=2;i<=s.size()-2;i++){
		int l1=0;
		int r1=s.size()-2*i;
		if(r1<0) continue;
		int l2=s.size()-2*i+1;
		int r2=s.size()-i-1;

		int l3=s.size()-i;
		int r3=s.size()-1;
		if(Dilson.getHash(l1, r1) + Dilson.getHash(l2,r2) == Dilson.getHash(l3,r3) and ( (Douglas.getHash(l1,r1) + Douglas.getHash(l2,r2) )%MOD == Douglas.getHash(l3,r3) )){

			if(r1 - l1>=1 and s[l1] =='0') continue;
			if(r2 - l2>=1 and s[l2] =='0') continue;
			if(r3 - l3>=1 and s[l3] =='0') continue;
			cout<<s.substr(l1, r1-l1+1)<<"+"<<s.substr(l2, r2-l2+1)<<"="<<s.substr(l3, r3-l3+1)<<endl;
			return 0;
		}
	}
	return 0;
}
