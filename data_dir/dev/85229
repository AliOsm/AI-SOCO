#include <bits/stdc++.h>

#define ll long long
#define ld long double

using namespace std;
struct node {
	node *l, *r;
	int val;
	node() {
		l = r = NULL;
		val = 0;
	}
};
int get(node * cur, int l, int r, int a, int b) {
	if (l > b || r < a || !cur || b < a)
		return 0;
	if (l >= a && r <= b)
		return cur->val;
	int mid = (l + r) >> 1;
	return max(get(cur->l, l, mid, a, b), get(cur->r, mid + 1, r, a, b));
}
void update(node *cur, int l, int r, int a, int v) {
	if (l > a || r < a)
		return;
	if (l == r)
		return void(cur->val = max(cur->val, v));

	int mid = (l + r) >> 1;
	if (mid >= a) {
		if (!cur->l)
			cur->l = new node();
		update(cur->l, l, mid, a, v);
		cur->val = max(cur->val, cur->l->val);
	} else {
		if (!cur->r)
			cur->r = new node();
		update(cur->r, mid + 1, r, a, v);
		cur->val = max(cur->val, cur->r->val);
	}
}
const int N = 1e5 + 5;
node *tree[N];
int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n, m;
	cin >> n >> m;
	int ans = 0;
	for (int i = 0; i < m; i++) {
		int u, v, c;
		cin >> u >> v >> c;
		if (!tree[u])
			tree[u] = new node();
		if (!tree[v])
			tree[v] = new node();
		int temp = get(tree[u], 0, N, 0, c - 1);
		ans = max(ans, temp + 1);
		update(tree[v], 0, N, c, temp + 1);
	}
	
	cout << ans << endl;
	return 0;
}
