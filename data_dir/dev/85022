/*               ______  ______
 \      / |\   |    |    |       |    |  |   |
  \    /  | \  |    |    |____   |____|  |___|
   \  /   |  \ |    |        |   |    |  |   |
    \/    |   \|    |   _____|   |    |  |   |

  -----------IIT Indore----------*/
#include<bits/stdc++.h>
#define rep(i,start,lim) for(long long i=start;i<lim;i++)
#define repd(i,start,lim) for(long long i=start;i>=lim;i--)
#define MOD 1000000007
#define INF 1000000000000000000
#define scan(x) scanf("%lld",&x)
#define print(x) printf("%lld ",x)
#define sz(a) lld((a).size())
#define eb emplace_back
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define YES printf("YES\n")
#define NO printf("NO\n")
#define all(c) (c).begin(),(c).end()
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define br printf("\n")
#define bit(x,i) (x&(1<<i))
#define trace(x) cerr<<#x<<"="<<x<<endl
using namespace std;
typedef long double ldb;
typedef long long lld;
lld powm(lld base,lld exp,lld mod=MOD) {lld ans=1;while(exp){if(exp&1) ans=(ans*base)%mod;exp>>=1,base=(base*base)%mod;}return ans;}
typedef vector<lld> vlld;
typedef pair<lld,lld> plld;
#define N 100005
lld type[N],graph[505][505],dist[505][505];
vector<pair<plld,lld> > v;
struct DSU{
	lld sze[N],arr[N];
	void init()
	{
		rep(i,1,N) arr[i]=i,sze[i]=1;
	}
	void get_union(lld a,lld b)
	{
		lld root_a=root(a),root_b=root(b);
		if(sze[root_a]<sze[root_b])
			arr[root_a]=arr[root_b],sze[root_b]+=sze[root_a];
		else
			arr[root_b]=arr[root_a],sze[root_a]+=sze[root_b];
	}
	lld root(lld x)
	{
		while(arr[x]!=x) arr[x]=arr[arr[x]],x=arr[x];
		return x;
	} 
} dsu;
int main()
{
	lld p,q,n,m,k,x,cnt=0,flag=0;
	scan(n),scan(m),scan(k),dsu.init();
	rep(i,0,505) rep(j,0,505) graph[i][j]=dist[i][j]=INF;
	rep(i,0,k)
	{
		scan(p),x=p;
		while(x--) type[(++cnt)]=i;
	}
	rep(i,0,m)
	{
		scan(p),scan(q),scan(x),v.pb({{p,q},x});
		if(!x) dsu.get_union(p,q);
	}
	rep(i,1,n) if(type[i]==type[i+1]) if(dsu.root(i)!=dsu.root(i+1)) {flag=1;break;} 
	if(flag) return 0*printf("No\n");
	rep(i,0,m)
	{
		graph[type[v[i].f.f]][type[v[i].f.s]]=min(graph[type[v[i].f.f]][type[v[i].f.s]],v[i].s);
		graph[type[v[i].f.s]][type[v[i].f.f]]=min(graph[type[v[i].f.s]][type[v[i].f.f]],v[i].s);
	}
	rep(i,0,k) rep(j,0,k) dist[i][j]=graph[i][j];
	//Simple Floyd Warshall
	rep(p,0,k) rep(i,0,k) rep(j,0,k) dist[i][j]=min(dist[i][j],dist[i][p]+dist[p][j]);
	printf("Yes\n");
	rep(i,0,k) rep(j,0,k) 
		if(dist[i][j]==INF and i!=j) print(-1LL),cout<<" \n"[j==k-1];
		else if(i==j) print(0LL),cout<<" \n"[j==k-1]; 
		else print(dist[i][j]),cout<<" \n"[j==k-1];
	return 0;
}

