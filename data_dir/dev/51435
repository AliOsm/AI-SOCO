#include <iostream>
#include <string>
using namespace std;

const int L = 5002;
short lcps[L][L];
short lcpt[L][L];
short LCPs[L];
short LCPt[L];
short lcpst[L][L];
string s, t;
int n;
int ans = 1e9;

int main()
{
    cin >> s >> t;
    for (int i = (int)s.length() - 1; i > -1; --i)
        for (int j = i - 1; j > -1; --j)
            if (s[i] == s[j])
                lcps[i][j] = lcps[j][i] = lcps[i + 1][j + 1] + 1;
    for (int i = 0; i < s.length(); ++i)
        for (int j = 0; j < s.length(); ++j)
            if (i != j && lcps[i][j] > LCPs[i])
                LCPs[i] = lcps[i][j];
    for (int i = (int)t.length() - 1; i > -1; --i)
        for (int j = i; j > -1; --j)
            if (t[i] == t[j])
                lcpt[i][j] = lcpt[j][i] = lcpt[i + 1][j + 1] + 1;
    for (int i = 0; i < t.length(); ++i)
        for (int j = 0; j < t.length(); ++j)
            if (i != j && lcpt[i][j] > LCPt[i])
                LCPt[i] = lcpt[i][j];
    for (int i = (int)s.length() - 1; i > -1; --i)
        for (int j = (int)t.length() - 1; j > -1; --j)
            if (s[i] == t[j])
                lcpst[i][j] = lcpst[i + 1][j + 1] + 1;
    for (int i = 0; i < s.length(); ++i)
        for (int j = 0; j < t.length(); ++j)
            if (max(LCPs[i], LCPt[j]) < lcpst[i][j])
                ans = min(ans, max(LCPs[i], LCPt[j]) + 1);
    if (ans == 1e9)
        ans = -1;
    cout << ans;
    return 0;
}