#include <bits/stdc++.h>
using namespace std;

const int
	MAX = 1005,
	INF = 1e9;
int n, dt[MAX][MAX], mk[MAX], has[MAX];
pair <int, int> d[MAX];
vector <pair <int, int> > e;

void addEdge(int u, int v) {
	dt[u][v] = dt[v][u] = 1;
	e.push_back({u, v});
}

void printAns() {
	for(int k = 1; k <= n; k++) {
		for(int i = 1; i <=n; i++)
			for(int j =1; j <= n; j++)
				dt[i][j] = min(dt[i][j], dt[i][k] + dt[k][j]);
	}

	int diam = 0;
	for(int x = 1; x <= n; x++)
		for(int y = 1; y <= n; y++)
			diam = max(diam, dt[x][y]);

	printf("YES %d\n", diam);

	printf("%d\n", (int) e.size());
	for(auto o : e)
		printf("%d %d\n", o.first, o.second);
}

int main() {
	scanf("%d", &n);

	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++)
			dt[i][j] = INF;

	int s = 0;
	for(int i = 1; i <= n; i++) {
		int x; scanf("%d", &x);
		d[i] = { x, i };
		dt[i][i] = 0;
		s += x;
	}

	if(s < 2 * (n - 1)) {
		printf("NO\n");
		return 0;
	}

	sort(d + 1, d + n + 1);

	int p = -1;
	int fst = d[1].second;
	int lst = d[2].second;

	mk[fst] = mk[lst] = 1;
	has[fst] = has[lst] = 0;

	for(int i = 1; i <= n; i++) {
		if(d[i].first >= 2) {
			p = i;
			break;
		}
	}

	if(p == -1) {
		addEdge(fst, lst);

		int bad = 0;
		for(int i = 1; i <= n; i++)
			if(!mk[i])
				bad = 1;

		if(bad) {
			printf("NO\n");
			return 0;
		}

		printAns();
		return 0;
	}

	int u = fst;
	for(int i = p; i <= n; i++) {
		if(mk[d[i].second])
			continue;

		int v = d[i].second;

		has[v] = d[i].first - 2;

		mk[v] = 1;
		addEdge(u, v);
		u = v;
	}

	addEdge(u, lst);

	for(int i = 1; i <= n; i++) {
		int u = d[i].second;

		if(!mk[u]) {
			assert(d[i].first == 1);

			int ok = 0;
			for(int j = 1; j <= n; j++) {
				int v = d[j].second;

				if(has[v] > 0) {
					has[v]--;
					ok = 1;
					addEdge(u, v);
					break;
				}
			}

			if(!ok) {
				printf("NO\n");
				return 0;
			}

			mk[u] = 1;
		}
	}

	printAns();

	return 0;
}