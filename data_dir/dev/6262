#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <math.h>
#define ll long long
#define MODD 1000000000000000003ll

#define MAXW 100
#define MAXN 100
#define MAX_SUM 11111

using namespace std;

ll dp[MAX_SUM+1][MAXN+1];
ll dp2[MAX_SUM+1][MAXN+1];

int counts[MAXW+1];

int A[MAXN+1];

ll B[MAXN+1][MAXN+1];


int main() {
    int n;
    cin>>n;
    
    int sum_wts=0;
    int max_wts=0;
    
    for(int i=1;i<=n;i++) {
        cin>>A[i];
        sum_wts+=A[i];
        max_wts=max(max_wts,A[i]);
    }
    
    for(int i=0;i<=max_wts;i++)
        counts[i]=0;

    
    
    // dp[i][j]=number of ways of getting sum of i using j weights
    for(int i=0;i<=MAX_SUM;i++)
        for(int j=0;j<=n;j++) {
            dp[i][j]=0;
            dp2[i][j]=-1;
        }
    dp[0][0]=1;
    
    for(int i=1;i<=n;i++) {
        int x=A[i];
        counts[x]++;
        for(int i=sum_wts;i>=0;i--)
            for(int j=n;j>=0;j--) {
                dp[i][j]+=(i>=x && j>=1 ? dp[i-x][j-1] : 0);
                if (dp[i][j]>=MODD)
                    dp[i][j]-=MODD;
            }
    }
    
    // 20 -> 4,4,4,4,4
    
    for(int i=0;i<=n;i++)
        for(int j=0;j<=n;j++) {
            if (j>i) {
                B[i][j]=0;
            } else {
                if (j==0)
                    B[i][j]=1;
                else
                    B[i][j]=(B[i-1][j]+B[i-1][j-1])%MODD;
            }
        }
    
    for(int i=1;i<=max_wts;i++) {
        if (counts[i]) {
            // i * x
            for(int x=1;x<=counts[i];x++) {
                dp2[i*x][x]=B[counts[i]][x];
            }
        }
    }
    
    
    
    
    
    int ans=0;
    for(int i=1;i<=sum_wts;i++)
        for(int j=1;j<=n;j++) {
            int curr = 0;
            if (dp[i][j] && dp[i][j]==dp2[i][j]) {
                curr+=j;
            }
            if (j<n && dp[sum_wts-i][n-j] && dp[sum_wts-i][n-j]==dp2[sum_wts-i][n-j]) {
                curr+=n-j;
            }
            ans=max(ans,curr);
        }
    
    cout << ans << endl;
    
    
}
