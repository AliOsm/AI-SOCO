#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e6 + 5;
const double eps = 1e-9;
using namespace std;
int s[MAXN];
int tree[MAXN];
unordered_map<int,int> tre[MAXN];

void build(int l, int r, int k)
{
    if (l == r)
    {
        tree[k] = s[l];
        tre[k][s[l]] = 1;
        return;
    }
    int m = (l + r) >> 1;
    build(l, m, k << 1);
    build(m + 1, r, k << 1 | 1);
    tree[k] = __gcd(tree[k << 1], tree[k << 1 | 1]);
    for (int i = l; i <= r; i++)
    {
        int a = 0, b = 0;
        if (tre[k << 1].find(s[i]) != tre[k << 1].end())
            a = tre[k << 1][s[i]];
        if (tre[k << 1 | 1].find(s[i]) != tre[k << 1 | 1].end())
            b = tre[k << 1 | 1][s[i]];
        tre[k][s[i]] = a + b;
    }
}

int gcd(int l, int r, int k, int a, int b)
{
    if (r < a || b < l)
        return 0;
    if (a <= l && r <= b)
        return tree[k];
    int m = (l + r) >> 1;
    int p1 = gcd(l, m, k << 1, a, b);
    int p2 = gcd(m + 1, r, k << 1 | 1, a, b);
    if (p1 > p2) swap(p1, p2);
    if (p1 == 0)
        return p2;
    return __gcd(p1, p2);
}

int cnt(int l, int r, int k, int a, int b, int v)
{
    if (r < a || b < l)
        return 0;
    if (a <= l && r <= b)
    {
        if (tre[k].find(v) != tre[k].end())
            return tre[k][v];
        return 0;
    }
    int m = (l + r) >> 1;
    return cnt(l, m, k << 1, a, b, v) + cnt(m + 1, r, k << 1 | 1, a, b, v);
}

int main()
{
    int n;
    ni(n);
    nai(s, n);
    build(0, n - 1, 1);
    int t;
    ni(t);
    for (int i = 0; i < t; i++)
    {
        int l, r;
        ni(l), ni(r);
        --l, --r;
        int val = gcd(0, n - 1, 1, l, r);
        pri(r - l + 1 - cnt(0, n - 1, 1, l, r, val));
    }
    return 0;
}
