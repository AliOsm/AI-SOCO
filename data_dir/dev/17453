#include<bits/stdc++.h>
#include<unordered_map>
using namespace std;
typedef unsigned long long ll;
typedef double D;
const int inf=(1<<30);
const ll mod=1e9+7;
const int MX=2e5+9;
int n,a,b,dia[MX],dis[MX],dis1[MX],dis2[MX],depth[MX],par[MX],x1,x2;
vector<int>v[MX];
vector<pair<int,int> >path;
ll ans,diam;
void dfstree(int x,int p){
    par[x]=p;
    for(auto pp:v[x]){
        if(pp==p)continue;
        depth[pp]=depth[x]+1;
        par[pp]=x;
        dfstree(pp,x);
    }
}
void bfs(int xx){
    for(int i=1;i<=n;i++)dis[i]=inf;
    dis[xx]=0;
    queue<int>q;
    q.push(xx);
    while(!q.empty()){
        int x=q.front();q.pop();
        for(auto pp:v[x]){
            if(dis[pp]==inf){
                dis[pp]=dis[x]+1;
                q.push(pp);
            }
        }
    }
}
unordered_set<int>s[MX];
int main(){
    scanf("%d",&n);
    for(int i=0;i<n-1;i++){
        scanf("%d%d",&a,&b);
        v[a].push_back(b);
        v[b].push_back(a);
        s[a].insert(b);
        s[b].insert(a);
    }
    dfstree(1,-1);
    int mx=0;
    bfs(1);
    for(int i=1;i<=n;i++)mx=max(mx,dis[i]);
    for(int i=1;i<=n;i++){
        if(dis[i]==mx)x1=i;
    }
    mx=0;
    bfs(x1);
    for(int i=1;i<=n;i++)dis1[i]=dis[i];
    for(int i=1;i<=n;i++)mx=max(mx,dis[i]);
    for(int i=1;i<=n;i++){
        if(dis[i]==mx)x2=i;
    }
    bfs(x2);
    for(int i=1;i<=n;i++)dis2[i]=dis[i];
    dia[x1]=dia[x2]=1;
    int y1=x1,y2=x2;
    while(x1!=x2){
        if(depth[x1]<depth[x2])swap(x1,x2);
        x1=par[x1];
        dia[x1]=1;
    }
    queue<int>q;
    for(int i=1;i<=n;i++){
        if(dia[i]||s[i].size()!=1)continue;
        q.push(i);
    }
    while(!q.empty()){
        int x=q.front();q.pop();
        if(dis1[x]>dis2[x]){
            ans+=dis1[x];
            path.push_back({y1,x});
        }
        else{
            ans+=dis2[x];
            path.push_back({y2,x});
        }
        for(auto pp:v[x]){
            s[pp].erase(x);
            if(s[pp].size()!=1||dia[pp])continue;
            q.push(pp);
        }
    }
    ans+=(1ll*dis1[y2]*(dis1[y2]+1))/2;
    cout<<ans<<endl;
    x1=y1;x2=y2;
    while(x1!=x2){
        if(depth[x1]<depth[x2])swap(x1,x2);
        path.push_back({x2,x1});
        x1=par[x1];
    }
    for(auto pp:path)cout<<pp.first<<" "<<pp.second<<" "<<pp.second<<endl;
}
