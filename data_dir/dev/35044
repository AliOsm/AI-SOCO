 /// Bismillahir-Rahmanir-Rahim
#include <bits/stdc++.h>
#define        ll                              long long int
#define        FOR(x,y,z)                      for(int x=y;x<z;x++)
#define        pii                             pair<int,int>
#define        pll                             pair<ll,ll>
#define        CLR(a)                          memset(a,0,sizeof(a))
#define        SET(a)                          memset(a,-1,sizeof(a))
#define        N                               1000010
#define        M                               1000000007
#define        pi                              acos(-1.0)
#define        ff                              first
#define        ss                              second
#define        pb                              push_back
#define        inf                              (1e9)+1000
#define        eps                             1e-9
#define        ALL(x)                          x.begin(),x.end()
using namespace std;
int dx[]={0,0,1,-1,-1,-1,1,1};
int dy[]={1,-1,0,0,-1,1,1,-1};
template < class T> inline T biton(T n,T pos){return n |((T)1<<pos);}
template < class T> inline T bitoff(T n,T pos){return n & ~((T)1<<pos);}
template < class T> inline T ison(T n,T pos){return (bool)(n & ((T)1<<pos));}
template < class T> inline T gcd(T a, T b){while(b){a%=b;swap(a,b);}return a;}
template <typename T> string NumberToString ( T Number ) { ostringstream ss; ss << Number; return ss.str(); }
inline int nxt(){int aaa;scanf("%d",&aaa);return aaa;}
inline ll lxt(){ll aaa;scanf("%lld",&aaa);return aaa;}
inline double dxt(){double aaa;scanf("%lf",&aaa);return aaa;}
template <class T> inline T bigmod(T p,T e,T m){T ret = 1;
for(; e > 0; e >>= 1){
    if(e & 1) ret = (ret * p) % m;p = (p * p) % m;
} return (T)ret;}
#ifdef sayed
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cerr << name << " is " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cerr.write(names, comma - names) << " is " << arg1 <<" | ";
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif
///******************************************START******************************************
vector<int>primes;
bool mark[N];
void sieve(int n) {
    primes.push_back(2);
    for(int i=3; i*i<=n; i+=2)
        if(mark[i]==0)
            for(int j = i*i; j <= n; j += i * 2)
                mark[j] = 1;
    for (int i = 3; i <= n; i += 2)
        if (!mark[i]) primes.push_back(i);
}
ll ar[12];int sz[12];
int tot =0;
int n;
int dp[(1<<8)+10][(1<<8)+10];
int go(int mask,int head){
    if(mask==tot) {
        if(__builtin_popcount(head)>1) return 1;
        else return 0;
    }
    int &res = dp[mask][head];
    if(res!=-1) return res;
    res  = inf;
    for(int i = 0;i<n;i++) {
        if(ison(mask,i)==0) {
            res = min(res,go(biton(mask,i),biton(head,i))+sz[i]+1);
            for(int j = head;j>0;j= head&(j-1)) {
                int tot = 0;
                ll num = 1;
                bool f = 0;
                for(int k = 0;k<n;k++){
                    if(ison(j,k)==1) {
                        if(ar[k]>(ll)1e15/num) {
                            f = 1;
                            break;
                        }
                        num*=ar[k];
                        tot+=sz[k];
                    }
                }
                if(f) continue;
                if(ar[i]%num==0) {
                    res = min(res,go(biton(mask,i),biton(head^j,i))+sz[i]-tot+1);
                }

            }

        }
    }
    return res;
}
int main(){
    #ifdef sayed
    //freopen("out.txt","w",stdout);
    // freopen("in.txt","r",stdin);
    #endif
    //ios_base::sync_with_stdio(false);
    //cin.tie(0);
    sieve(N-1);
    n = nxt();
    tot = (1<<n)-1;
    for(int i = 0;i<n;i++) ar[i] = lxt();
    for(int i = 0;i<n;i++) {
        ll tmp  = ar[i];
        for(int j = 0;1LL*primes[j]*primes[j]<=ar[i];j++){
            if(ar[i]%primes[j]==0) {
                while(ar[i]%primes[j]==0) ar[i]/=primes[j],sz[i]++;
            }
        }
        if(ar[i]>1) sz[i]++;
        ar[i] = tmp;
    }
    int mask = 0;
    int head =0;
    int ans = 0;
    for(int i = 0;i<n;i++) {
        if(sz[i]==1) {
            ans++;
            mask = biton(mask,i);
            head = biton(head,i);
        }

    }
    SET(dp);
    printf("%d\n",ans+go(mask,head));
    return 0;
}

