#include <bits/stdc++.h>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; }
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; }
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

const int MAXN = 5050;
const int MOD = 1000 * 1000 * 1000 + 7;

int n;
string s;
int lcp[MAXN][MAXN];
int dp[MAXN][MAXN];
int sum[MAXN][MAXN]; // sum[i][j] = dp[i][j] + ... + dp[i][n - 1] = dp[i][j] + sum[i][j + 1]

bool increasing(int a, int b) {
	int d = lcp[a][b];
	if (a + d < b) {
		return s[a + d] < s[b + d];
	} else {
		return false;
	}
}

int main() {
	cin >> n;
	cin >> s;
	for (int i = n - 1; i >= 0; i--) {
		for (int j = n - 1; j >= 0; j--) {
			if (s[i] == s[j]) {
				lcp[i][j] = 1 + lcp[i + 1][j + 1];
			} else {
				lcp[i][j] = 0;
			}
		}
	}
	for (int end = n; end > 0; end--) {
		for (int start = end - 1; start >= 0; start--) {
			if (s[start] == '0') {
				dp[start][end] = 0;
			} else if (end == n) {
				dp[start][end] = 1;
			} else {
				int min_next = start + 2 * (end - start);
				if (min_next > n) {
					dp[start][end] = 0;
				} else {
					if (!increasing(start, end)) {
						min_next++;
					}
					dp[start][end] = sum[end][min_next];
				}
			}
			sum[start][end] = dp[start][end] + sum[start][end + 1];
			if (sum[start][end] >= MOD) {
				sum[start][end] -= MOD;
			}
		}
	}
	cout << sum[0][1] << endl;
	return 0;
}
