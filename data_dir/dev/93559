#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds ;
#define ll int
#define ld long double
#define pp pair<ll,pair<ll,ll> >
#define rep(i,a,b) for(ll i=a;i<b;i+=1)
#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(a) int((a).size())
#define hell 1000000007
#define f first
#define s second
#define sll(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
typedef tree<ll , null_type , less<ll> , rb_tree_tag , tree_order_statistics_node_update > ordered_set ;
ll t = 1  ;
void solve()
{
    ll n , cur = 0 , numEven = 0 , numOdd = 0 , k , p ;
    cin >> n >> k >> p ;
    vector<ll> v(n) , odds[k-p+1] , evens[p+1] ;
    queue<ll> qOdd , qEven ;
    rep( i , 0 , n )
    {
        cin >> v[i] ;
        if( v[i] % 2 == 0 )
        {
            numEven++;
            qEven.push(v[i]);
        }
        else
        {
            numOdd++;
            qOdd.push(v[i]);
        }
    }
    bool isOk = true ;
    isOk &= ( numOdd >= k-p ) ;
    numOdd -= (k-p) ;
    isOk &= ( (numOdd) % 2 == 0 ) ;
    isOk &= ( (numOdd)/2 + numEven >= p ) ;
    if(!isOk)
    {
        cout << "NO";return;
    }
    rep( i , 0 , k - p )
    {
        odds[i].pb(qOdd.front());
        qOdd.pop();
    }
    rep( i , 0 , p )
    {
        if( !qEven.empty() )
        {
            evens[i].pb(qEven.front());
            qEven.pop();
        }
        else
        {
            evens[i].pb(qOdd.front());
            qOdd.pop();
            evens[i].pb(qOdd.front());
            qOdd.pop();
        }
    }
    while(!qEven.empty())
    {
        if(k-p>0)
        {
            odds[0].pb(qEven.front());
            qEven.pop();
        }
        else
        {
            evens[0].pb(qEven.front());
            qEven.pop();
        }
    }
    while(!qOdd.empty())
    {
        if(k-p>0)
        {
            rep( i , 0 , 2 )
            {
                odds[0].pb(qOdd.front());
                qOdd.pop();
            }

        }
        else
        {
            rep( i , 0 , 2 )
            {
                evens[0].pb(qOdd.front());
                qOdd.pop();
            }
        }
    }
    cout << "YES\n";
    rep( i , 0 , p )
    {
        cout << sz(evens[i]) << " " ;
        for(auto it : evens[i] )
            cout << it << " ";
        cout << "\n";
    }
    rep( i , 0 , k - p )
    {
        cout << sz(odds[i]) << " " ;
        for(auto it : odds[i] )
            cout << it << " " ;
        cout << "\n" ;
    }
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //cin>>t;
    while(t--)
        solve() ;
    return 0 ;
}
