#include<bits/stdc++.h>
#define MAX   500500
#define FOR(i,a,b) for (int i=(a),_b=(b);i<=_b;i=i+1)
#define FORD(i,b,a) for (int i=(b),_a=(a);i>=_a;i=i-1)
#define REP(i,n) for (int i=0,_n=(n);i<_n;i=i+1)
#define FORE(i,v) for (__typeof((v).begin()) i=(v).begin();i!=(v).end();i++)
#define ALL(v) (v).begin(),(v).end()
#define fi   first
#define se   second
#define MASK(i) (1LL<<(i))
#define BIT(x,i) (((x)>>(i))&1)
#define next   ___next
#define prev   ___prev
#define left   ___left
#define right   ___right
using namespace std;
template<class X,class Y>
    void minimize(X &x,const Y &y) {
        if (x>y) x=y;
    }
template<class X,class Y>
    void maximize(X &x,const Y &y) {
        if (x<y) x=y;
    }
const int mod=(int)1e9+7;
struct Number {
    int val;
    Number() {
        val=0;
    }
    Number(long long x) {
        val=(x%mod+mod)%mod;
    }
    Number operator + (const Number &x) const {
        return (Number(val+x.val));
    }
    void operator += (const Number &x) {
        *this=*this+x;
    }
    Number operator - (const Number &x) const {
        return (Number(val-x.val));
    }
    Number operator * (const Number &x) const {
        return (Number(1LL*val*x.val%mod));
    }
};
ostream& operator << (ostream& os,const Number &a) {
    return (os<<a.val);
}
const char dir[]="UDLR";
const int dx[]={-1,1,0,0};
const int dy[]={0,0,-1,1};
int n,w,h;
char s[MAX];
Number SUM(int x) {
    return (1LL*x*(x+1)/2%mod);
}
Number SUM2(int x) {
    return (1LL*x*(x+1)*(2*x+1)/6%mod);
}
Number SUM3(int x) {
    return (SUM(x)*SUM(x));
}
Number sumProduct(Number a,Number dx,Number b,Number dy,Number t,Number n,int lim) {
    Number res=a*b*t*Number(lim+1);
    res+=(a*b*n-dx*b*t-dy*a*t)*SUM(lim);
    res+=(dx*dy*t-a*dy*n-b*dx*n)*SUM2(lim);
    res+=n*dx*dy*SUM3(lim);
    //printf("CALC %d %d %d %d\n",a,b,t,lim);

    return (res);
}
int Abs(int x) {
    return (x<0?-x:x);
}
void init(void) {
    scanf("%d%d%d",&n,&w,&h);
    scanf("%s",s+1);
}
int numRound(int a,int b,int n) {
    if (a>n) return (0);
    if (b==0) return (MAX);
    return ((n-a)/b);
}
void process(void) {
    Number res=0;
    int curX=0;
    int curY=0;
    int maxX=0;
    int maxY=0;
    int minX=0;
    int minY=0;
    FOR(i,1,n) REP(j,4) if (dir[j]==s[i]) {
        curX+=dx[j];
        curY+=dy[j];
        if (curX>maxX && maxX-minX+1<=w && maxY-minY+1<=h) res+=Number(h-(maxY-minY+1)+1)*Number(i);
        if (curX<minX && maxX-minX+1<=w && maxY-minY+1<=h) res+=Number(h-(maxY-minY+1)+1)*Number(i);
        if (curY>maxY && maxY-minY+1<=h && maxX-minX+1<=w) res+=Number(w-(maxX-minX+1)+1)*Number(i);
        if (curY<minY && maxY-minY+1<=h && maxX-minX+1<=w) res+=Number(w-(maxX-minX+1)+1)*Number(i);
        maximize(maxX,curX);
        maximize(maxY,curY);
        minimize(minX,curX);
        minimize(minY,curY);
        //printf("After %d: ",i);
        //cerr<<res<<endl;
    }
    int delX=Abs(curX);
    int delY=Abs(curY);
    if (delX==0 && delY==0 && maxX-minX+1<=w && maxY-minY+1<=h) {
        printf("-1\n");
        exit(0);
    }
    //cerr<<delX<<" "<<delY<<" "<<res<<endl;
    FOR(i,1,n) REP(j,4) if (dir[j]==s[i]) {
        curX+=dx[j];
        curY+=dy[j];
        if (curX>maxX && maxX-minX+1<=w && maxY-minY+1<=h)
            res+=sumProduct(1,0,h-(maxY-minY+1)+1,delY,i+n,n,
                min(numRound(maxX-minX+1,delX,w),numRound(maxY-minY+1,delY,h)));
        if (curX<minX && maxX-minX+1<=w && maxY-minY+1<=h)
            res+=sumProduct(1,0,h-(maxY-minY+1)+1,delY,i+n,n,
                min(numRound(maxX-minX+1,delX,w),numRound(maxY-minY+1,delY,h)));
        if (curY>maxY && maxY-minY+1<=h && maxX-minX+1<=w)
            res+=sumProduct(w-(maxX-minX+1)+1,delX,1,0,i+n,n,
                min(numRound(maxX-minX+1,delX,w),numRound(maxY-minY+1,delY,h)));
        if (curY<minY && maxY-minY+1<=h && maxX-minX+1<=w)
            res+=sumProduct(w-(maxX-minX+1)+1,delX,1,0,i+n,n,
                min(numRound(maxX-minX+1,delX,w),numRound(maxY-minY+1,delY,h)));
        maximize(maxX,curX);
        maximize(maxY,curY);
        minimize(minX,curX);
        minimize(minY,curY);
    }
    cout<<res<<endl;
}
int main(void) {
#ifdef SKY
    freopen("tmp.txt","r",stdin);
#endif // SKY
    init();
    process();
    return 0;
}
