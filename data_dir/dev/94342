///****In the name of Allah, most Gracious, most Compassionate****//

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <ll, ll> pii;

#define NL cout<<"\n";
#define ALL(a) a.begin(), a.end()
#define DBG(a) cout<< #a <<" --> "<<(a)<<endl;
#define FastIO ios::sync_with_stdio(false); cin.tie(nullptr);cout.tie(nullptr)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}

const ll N=3e5+5;
const ll oo=1e18+7;
ll c[N][3];
ll deg[N];
vector<ll > g[N];
ll id[N];
ll r_id[N];
void arr(ll u,ll p= -1, ll  i = 0 )
{
    r_id[u]= i;
    id[i++] =  u;
    for(ll v: g[u])
    {
        if(p!=v)
            arr(v,u,i) ;
    }
}
ll dp[N][9];
ll n;
ll res[N];
void pr(ll u,ll i)
{
    if(u==n-2)
    {
        res[id[u]] = i%3;
        res[id[u+1]] = i/3;
        return ;
    }
    for(ll j=0; j<3; j++)
        if(i%3==j or i/3==j)
            continue;
        else if(dp[u][i] == dp[u+1][(i/3+j*3)]+  c[id[u]][i%3])
        {
            res[id[u]] = i%3;
            return pr(u+1, (i/3+j*3));
        }
    assert(0);
}
int32_t main()
{
    FastIO;

    cin>>n;
    for(ll j=0; j<3; j++)
        for(ll i=0; i<n; i++)
        {
            cin>>c[i][j];
        }
    for(ll i=1; i<n; i++)
    {
        ll u,v;
        cin>>u>>v;
        u--,v--;
        g[u].push_back(v);
        g[v].push_back(u);
        deg[u]++;
        deg[v]++;
    }
    ll root = -1;
    for(ll i=0; i<n; i++)
        if(deg[i]==1)
            root = i;
    assert(root!=-1);
    bool ans =1;
    for(ll i=0; i<n; i++)
        if(g[i].size()>=3)
            ans= 0;
    if(ans)
    {
        arr(root);
        for(ll i=0; i<3; i++)
        {
            for(ll j=0; j<3; j++)
            {
                dp[n-2][i+j*3]= oo;
                if(i==j)
                    continue;
                dp[n-2][i+j*3]  = c[id[n-2]][i] + c[id[n-1]][j];
            }
        }
        for(ll i=n-3; i>=0; i--)
        {
            for(ll j=0; j<9; j++)
            {

                dp[i][j] = oo;
                if(j%3==j/3)
                    continue;
                for(ll k=0; k<3; k++)
                    if(k==j%3 or k== j/3 )
                        continue ;
                    else
                        dp[i][j] = min(dp[i][j],   dp[i+1][(j/3+k*3)] + c[id[i]][j%3]);
            }
        }
        ll an =  oo+1, state = -1;
        for(ll i=0; i<9; i++)
        {
            if(i%3 == i/3)
                continue;
            an = min(an, dp[0][i]);
            if(an == dp[0][i])
            {
                state = i;
            }
        }
//        DBG(root);
//        DBG(an);
//        DBG(state);
//        for(ll i=0; i<n; i++)
//            cout<<id[i]<<" ";
//        NL;
//        for(ll i=0; i<n-1; i++)
//        {
//            DBG(i);
//            for(ll j=0; j<9; j++)
//                cout<<dp[i][j]<<" ";
//            NL;
//        }
        assert(state != -1);
        cout<<an<<"\n";
        pr(0,state);
        for(ll i=0; i<n; i++)
            cout<<res[i]+1<<" ";
        NL;
        for(int i=0; i<n-2; i++)
        {
            assert(res[id[i]]!=res[id[i+1]]);
            assert(res[id[i]]!=res[id[i+2]]);
        }
    }
    else
        cout<<"-1\n";
}
