#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <cstdio>
#include <math.h>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <bitset>
#include <map>
using namespace std;

#define int64 long long
#define mp make_pair
#define ull unsigned long long


#ifdef _DEBUG
	const int N = 50;
#else
	const int N = 5010;
#endif

const int64 INF = 1e18;

int n, a[N];
int64 dp[N][4][2];
vector <int> res;



int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	scanf("%d", &n);
	for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			dp[0][i][j] = -INF;
		}
	}
	dp[0][0][0] = 0;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			for (int k = 0; k < 2; k++)
			{
				int d = 1;
				if (k == 1) d *= -1;
				dp[i][j][k] = -INF;
				dp[i][j][k] = dp[i - 1][j][k] + d * a[i];
				if (j > 0) dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - 1][k ^ 1] + d * a[i]);
			}
		}
	}
	int64 ans = -INF;
	int icur = n, jcur = -1, kcur = -1;
	for (int j = 0; j < 4; j++)
	{
		for (int k = 0; k < 2; k++)
		{
			if (dp[n][j][k] > ans)
			{
				ans = dp[n][j][k];
				icur = n;
				jcur = j;
				kcur = k;
			}
		}
	}
	while (icur > 0)
	{
		int d = 1;
		if (kcur == 1) d *= -1;
		bool flag = (dp[icur][jcur][kcur] == dp[icur - 1][jcur][kcur] + d * a[icur]);
		icur--;
		if (!flag)
		{
			res.push_back(icur);
			jcur--;
			kcur ^= 1;
		}
	}
	reverse(res.begin(), res.end());
	while (res.size() < 3) res.push_back(n);
	for (int i = 0; i < res.size(); i++) printf("%d ", res[i]);
	return 0;
}
