// ~/BAU/ACM-ICPC/Teams/OverflowLimitExceeded/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <assert.h>
#include <utility>
#include <functional>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

const double EPS = 1e-8;
int n, r, x[1001];
double y[1001];

bool check(int a, double X, double Y) {
	double d = hypot(x[a] - X, y[a] - Y);
	if (d + EPS < 2.0 * r)
		return 1;
	return 0;
}

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
#endif

	scanf("%d%d", &n, &r);
	for (int i = 0; i < n; i++) {
		scanf("%d", x + i);
	}

	double R = 1.0*r;
	y[0] = R;

	for (int i = 1; i < n; i++) {
		double ans = r;
		for (int j = 0; j < i; j++) {
			if ((x[i] - r >= x[j] - r && x[i] - r <= x[j] + r) || (x[i] + r >= x[j] - r && x[i] + r <= x[j] + r)) {
				double l = y[j], rr = y[j] + 2.0 * R, m, cur = y[j] + 2.0 * R;
				int it = 0;
				while (l < rr && it < 25) {
					it++;
					m = (l + rr) / 2.0;

					if (check(j, x[i], m)) {
						l = m;
					}
					else {
						cur = min(cur, m);
						rr = m;
					}
				}

				ans = max(ans, cur);
			}
		}
		y[i] = ans;
	}

	for (int i = 0; i < n; i++)
		printf("%.6lf ", y[i]);
	puts("");

	return 0;
}