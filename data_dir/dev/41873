
// In the name of God
// Code by: mrMaster

#include <bits/stdc++.h>

using namespace std;

#define int long long
#define boost ios_base::sync_with_stdio(false) , cin.tie(0) , cout.tie(0)

const int MN = 2e5 + 10;
const int MOD = 1e9 + 7;

vector<int>edges[MN];
int n;
int down[MN] , up[MN];
vector<int>pre[MN] , suf[MN];

int pw(int a,int b)
{
	if(!b) return 1;
	int t = pw(a,b/2);
	t*=t;t%=MOD;
	if(b%2) return (a*t)%MOD;
	else return t;
}

void input()
{
	boost;
	int a;
	cin >> n;
	for(int i=0;i<n-1;++i){
		cin >> a; --a;
		edges[a].push_back(i+1);
		edges[i+1].push_back(a);
		pre[a].push_back(0);
		pre[i+1].push_back(0);
		suf[a].push_back(0);
		suf[i+1].push_back(0);
	}
	for(int i=0;i<n;++i){
		pre[i].push_back(0);
		suf[i].push_back(0);
	}
}

void dfs1(int s = 0 , int pr = -1)
{
	pre[s][0] = 1;
	for(int i=0;i<edges[s].size();++i){
		pre[s][i+1] = pre[s][i];
		if(edges[s][i] == pr) continue;
		dfs1(edges[s][i] , s);
		pre[s][i+1] *= down[edges[s][i]]+1;
		pre[s][i+1] %= MOD;
	}
	down[s] = pre[s][edges[s].size()];
	suf[s][edges[s].size()] = 1;
	for(int i=edges[s].size()-1;i>=0;--i){
		suf[s][i] = suf[s][i+1];
		if(edges[s][i] == pr) continue;
		suf[s][i] *= down[edges[s][i]]+1;
		suf[s][i] %= MOD;
	}
}

void dfs2(int s=0,int pr=-1)
{
	for(int i=0;i<edges[s].size();++i){
		if(edges[s][i] == pr) continue;
		up[edges[s][i]] = up[s];
		up[edges[s][i]] *= (pre[s][i]*suf[s][i+1])%MOD;
		up[edges[s][i]] %= MOD;
		++up[edges[s][i]];
		up[edges[s][i]] %= MOD;
		dfs2(edges[s][i] , s);
	}
}

void output()
{
	boost;
	for(int i=0;i<n;++i)
		cout << (down[i]*up[i])%MOD << ' ';
	cout << endl;
}

signed main()
{
	input();
	dfs1();
	for(int i=0;i<n;++i) up[i] = 1;
	dfs2();
	output();
	return 0;		
}

