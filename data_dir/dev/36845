#include <bits/stdc++.h>
#define ll long long

using namespace std;

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll n, m, p, v[1000][1000] = {}, s[10], cnt[10] = {};
    char c[1000][1000];
    cin >> n >> m >> p;
    vector <vector <pair <ll, ll> > > cells(p);

    for (int i = 0; i < p; i++)
        cin >> s[i];

    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
        {
            cin >> c[i][j];

            if (c[i][j] != '.' && c[i][j] != '#')
                cells[c[i][j] - '1'].push_back({i, j});
        }

    while (1)
    {
        ll flag = 0;

        for (int i = 0; i < p; i++)
        {
            vector <pair <ll, ll> > new_cells;
            queue <pair <pair <ll, ll>, ll> > q;

            for (auto pr: cells[i])
                q.push({pr, 0});

            while (!q.empty())
            {
                pair <pair <ll, ll>, ll> z = q.front();
                q.pop();
                ll x = z.first.first, y = z.first.second;

                if (c[x][y] == '.')
                {
                    c[x][y] = (char)(i + '1');
                    flag = 1;

                    if (z.second == s[i])
                    new_cells.push_back({x, y});
                }

                if (z.second == s[i])
                    continue;

                if (x && c[x - 1][y] == '.')
                    q.push({{x - 1, y}, z.second + 1});

                if (x < n - 1 && c[x + 1][y] == '.')
                    q.push({{x + 1, y}, z.second + 1});

                if (y && c[x][y - 1] == '.')
                    q.push({{x, y - 1}, z.second + 1});

                if (y < m - 1 && c[x][y + 1] == '.')
                    q.push({{x, y + 1}, z.second + 1});
            }

            while (cells[i].size())
                cells[i].pop_back();

            for (auto pr: new_cells)
                cells[i].push_back(pr);
        }

        if (!flag)
            break;
    }

    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            if (c[i][j] != '.' && c[i][j] != '#')
                cnt[c[i][j] - '1']++;

    for (int i = 0; i < p; i++)
        cout << cnt[i] << " ";
}