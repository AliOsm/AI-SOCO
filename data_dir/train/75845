#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <unordered_map>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
#include<math.h>
#include<fstream>
using namespace std;
#define pi 3.141592653589793
#define ii  pair<int,int>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c\n", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf\n", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s ", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define inf 10000000000000000
#define ninf -10000000000000000;
#define eps 1e-7
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
/*ll power(ll base, ll exp) {
base %= mod;
ll result = 1;
while (exp > 0) {
if (exp & 1)
result = (result * base) % mod;
base = (base * base) % mod;
exp >>= 1;
}
return result;
}
*/
/*long long gcd(long long a, long long b)
{
if (b == 0)return a; return gcd(b, a%b);
}
*/
/*long long lcm(long long a, long long b) {
return  a * b / gcd(a, b);
}
*/


int sp[3010][3010];
bool vis[3010];
vector<int>arr[3010];
void bfs(int s) {
	sp[s][s] = 0;
	queue<ii>q;
	q.push({ s,0 });
	while (!q.empty()) {
		int cur = q.front().first; int cost = q.front().second; q.pop();
		if (vis[cur])continue;
		vis[cur] = 1;
		sp[s][cur] = cost;
		for (int i = 0; i < arr[cur].size(); ++i) {
			int to = arr[cur][i];
			if (!vis[to]) q.push({ to,cost + 1 });  
		}
	}
}

int main()
{
	
	int n, m, u, v, s1, t1, l1, s2, t2, l2;
	sci(n); sci(m);
	for (int i = 0; i < m; ++i) {
		sci(u); sci(v);
		arr[u].push_back(v); arr[v].push_back(u);
	}
	sci(s1); sci(t1); sci(l1); sci(s2); sci(t2); sci(l2);
	for (int i = 0; i <= 3000; ++i) {
		for (int j = 0; j <= 3000; ++j)sp[i][j] = 1e8;
	}

	for (int i = 1; i <= n; ++i) {
		mem(vis, 0);
		bfs(i);
	}
	int ans;
	if (sp[s1][t1] > l1 || sp[s2][t2] > l2)ans = -1e8;
	else ans = m-(sp[s1][t1]+sp[s2][t2]);
	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= n; ++j) {
			int p1 = sp[s1][i] + sp[j][t1] + sp[i][j];
			int p2 = sp[s2][i] + sp[j][t2] + sp[i][j];
			int p3 = sp[s1][j] + sp[i][t1] + sp[i][j];
			int p4 = sp[s2][j] + sp[i][t2] + sp[i][j];
			if (p1 <= l1&&p2 <= l2) {
				ans = max(ans, m - (p1+p2-sp[i][j]));
			}
			 if (p1 <= l1&&p4 <= l2) {
				ans = max(ans, m - (p1+p4-sp[i][j]));
			}
			 if (p3 <= l1&&p2 <= l2) {
				ans = max(ans, m - (p3+p2-sp[i][j]));
			}
			if (p3 <= l1&&p4 <= l2) {
				ans = max(ans, m - (p3+p4-sp[i][j]));
			}
		}

	}
	if (ans == -1e8)printf("-1\n");
	else pr(ans);
	return 0;
}