#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <vector>
#include <queue>
#include <deque>
#include <utility>
#include <cstring>
#include <ext/rope>
#include <iterator>

using namespace std;
using namespace __gnu_cxx;

#define pb push_back
#define mp make_pair
#define F first
#define S second
#define sz size
#define scf scanf
#define prf printf
#define prev(x) (x/2)
#define left(x) (x*2)
#define right(x) (x*2+1)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define gcd(a,b) __gcd(a,b)
#define getBit(x,i) ((x&(1<<i))!=0 ? 1 : 0)
#define For(i,n) for (int i = 0; i < n; ++i)
#define FOR(i,begin,end,move) for (int i = begin; i <= end; i += move)

typedef long long ll;

const ll base = 1000000007LL;
const ll INF = 10000000000000LL;

int n,m;
bool used[111111] = {false};
pair < int, int > st[111111];
vector < vector < int > > g;
set < int > s[44444];
vector < int > ans;
int last;

void dfs(int ver)
{
    used[ver] = true;
    For(i,g[ver].size())
        if (!used[g[ver][i]])
            dfs(g[ver][i]);
    ans.pb(ver);
}

int main()
{
    scf("%d%d", &n, &m);
    g.assign(n, vector < int >(0));
    For(i,n)
    {
        st[i].F = 0;
        st[i].S = i;
    }
    For(i,m)
    {
        int x, y;
        scanf("%d%d", &y, &x);
        --x;--y;
        g[x].pb(y);
    }
    For(i,n)
        if (!used[i])
            dfs(i);
    for (int i = n - 1; i >= 0; --i)
        prf("%d ", ans[i] + 1);
    return 0;
}
