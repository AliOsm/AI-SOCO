#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

const int N = 1e5 + 10;
vector<ii> a[N];
int deg[N], f[N];
int64 w[N];

struct Edge {
  int x, y;
  int64 z;
};

int main() {
  int n, m;
  scanf("%d%d", &n, &m);
  for (int i = 0; i < n; ++i) f[i] = i;
  for (int i = 0; i < m; ++i) {
    int x, y, z;
    scanf("%d%d%d", &x, &y, &z);
    --x; --y;
    a[x].emplace_back(y, z);
    w[x] += z;
    w[y] -= z;
  }
  // queue<int> Q;
  // for (int i = 0; i < n; ++i) {
  //   if (w[i] > 0) Q.push(i);
  // }
  // vector<Edge> ret;
  // while (!Q.empty()) {
  //   int u = Q.front();
  //   Q.pop();
  //   for (auto& it : a[u]) {
  //     int v = it.first;
  //     // trace(u, v, f[u], w[f[u]], w[v]);
  //     int64 cur = max(0LL, min(w[f[u]], -w[v]));
  //     if (cur > 0) {
  //       ret.push_back({f[u], v, cur});
  //     }
  //     w[f[u]] -= cur;
  //     w[v] += cur;
  //     if (w[f[u]] > 0) Q.push(v);
  //     f[v] = f[u];
  //   }
  // }

  vector<Edge> ret;
  set<pair<int64, int>> pos, neg;
  for (int i = 0; i < n; ++i) {
    if (w[i] > 0) pos.insert({w[i], i});
    if (w[i] < 0) neg.insert({w[i], i});
  }
  while (pos.size()) {
    auto u = std::prev(pos.end());
    auto v = neg.begin();
    int x = u->second, y = v->second;
    int64 X = u->first, Y = v->first;
    int64 cur = min(X, -Y);
    ret.push_back({x, y, cur});
    pos.erase(u);
    neg.erase(v);
    if (X > cur) {
      pos.insert({X - cur, x});
    }
    if (-Y > cur) {
      neg.insert({Y + cur, y});
    }
  }
  printf("%d\n", (int)ret.size());
  for (auto& it : ret) {
    auto [x, y, z] = it;
    printf("%d %d %lld\n", x + 1, y + 1, z);
  }
  return 0;
}
