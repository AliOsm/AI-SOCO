#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef long long int ll;
typedef vector< pair<int, int> > vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<long long int> vll;
typedef pair<int, int> pii;

const ll INF = 1e18;
const int inf = 1e9;
const int MOD = 1e9 + 7;
const int nax = 10000000 + 10;

int n, c[nax], ans1[nax], ans0[nax];
vi graph[1000001];
int arr[1000001];

void dfs(int v, int par = -1)
{
    if(graph[v].size() == 1 && par != -1)
    {
        c[v] = 1;
        if(c[v] == 1)
        ans1[arr[v]]++;
        else
        ans0[arr[v]]++;
        return ;
    }
    for(auto x: graph[v])
    {
        if(x == par) continue;
        dfs(x, v);
        c[v] = 1 - c[x];
    }
     if(c[v] == 1)
        ans1[arr[v]]++;
        else
        ans0[arr[v]]++;
}
int main()
{
    ios::sync_with_stdio(0);
    cin >> n;
    for(int i = 1; i <= n; i++)
        cin >> arr[i];
    for(int i = 2; i <= n; i++)
    {
        int p; cin >> p;
        graph[p].pb(i);
        graph[i].pb(p);
    }
    dfs(1, -1);
    ll xori = 0;
    for(int i = 1; i <= 1e7; i++)
    {
        if(ans1[i] % 2 == 1)
        {
            xori ^= ((ll)i);
        }
    }
    ll answer = 0;
    if(xori == 0)
    {
        ll b = 0, r = 0;
        for(ll i = 1; i <= 1e7; i++)
        {
            b += (ll)ans1[i], r += (ll)ans0[i];
            ll r1 = (ll)ans0[i], b1  = (ll)ans1[i];
            answer += b1 * r1;
        }
        answer += (b * (b - 1)) / 2;
        answer += (r * (r - 1)) / 2;
        cout << answer;
        return 0;
    }
    for(int i = 1; i <= 1e7; i++)
    {
        ll b = ans1[i], r = ans0[i];
        ll temp = ((xori) ^ ((ll)i));
        if(temp > 1e7)
            continue;
        answer += b * ans0[temp];
    }
    cout << answer;
    return 0;
}
