#include <bits/stdc++.h>

using namespace std;

const int N = 1 << 15;


string s[N];
string t[N];
int n, a[101], b[101], w[101];
int is[N], it[N]; 

void process(int x[101], string c[N]) {
  for (int mask = 0; mask < N; ++mask) {
    c[mask] = string(n, 0);
    char mini = 30;
    for (int i = 0; i < n; ++i) {
      c[mask][i] = __builtin_popcount(x[i] ^ mask);
      mini = min(mini, c[mask][i]);
    }
    for (int i = 0; i < n; ++i)
      c[mask][i] -= mini;
  }
}

int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", a+i);
    w[i] = a[i];
    b[i] = a[i] >> 15;
    a[i] &= N-1;
  }
  process(a, s);
  process(b, t);
  for (int i = 0; i < N; ++i) {
    char maxi = 0;
    for (int j = 0; j < n; ++j)
      maxi = max(maxi, t[i][j]);
    for (int j = 0; j < n; ++j) {
      t[i][j] = maxi - t[i][j];
    }
  }
  iota(is, is+N, 0);
  iota(it, it+N, 0);
  sort(is, is+N, [&](int l, int r) {
    return s[l] < s[r];
  });
  sort(it, it+N, [&](int l, int r) {
    return t[l] < t[r];
  });
  for (int i = 0, j = 0; i < N; ++i) {
    int v = is[i];
    while (j < N && t[it[j]] < s[v]) ++j;
    if (j >= N) break;
    if (t[it[j]] == s[v]) {
      int ans = (it[j] << 15) | v;
      int z = __builtin_popcount(ans ^ w[0]);
      for (int k = 0; k < n; ++k) {
        assert(__builtin_popcount(ans ^ w[k]) == z);
      }
      printf("%d\n", ans);
      return 0;
    }
  }
  puts("-1");
  return 0;
}
