#include <bits/stdc++.h>

using namespace std;

const int N = 1e6;

const int SZ = 5e7;
char buf[SZ];
int pos;
void * operator new (size_t x){
    pos += x;
    if (pos > SZ)
        throw 42;
    return buf + pos - x;
}
void operator delete(void *x) { }

unordered_map<int, vector<pair<pair<int,int>, int>>> val;

int a[N];

struct fenwick {
    int tree[N];
    int n;
    void build(int nn) {
        n = nn;
        memset(tree, 0, n << 2);
    }

    int query(int pos) {
        int res = 0;
        for (; pos >= 0; pos = (pos & (pos + 1)) - 1) {
            res += tree[pos];
        }
        return res;
    }

    void modify(int i, int d) {
        for (; i < n; i |= i + 1) {
            tree[i] += d;
        }
    }
} ft;

int ans[N];

int A[N];
int T[N];
int X[N];
set<int> FT;
unordered_map<int, int> TF;


int main(){
#ifndef ONLINE_JUDGE
    freopen("C:\\Users\\Hippskill\\ClionProjects\\timus\\input.txt", "r", stdin);
#endif
    memset(ans, -1, sizeof(ans));
    int n;
    scanf("%d", &n);
    for(int i = 0; i < n; i++){
        scanf("%d%d%d", &A[i], &T[i], &X[i]);
        FT.insert(T[i]);
    }
    int cnt = 1;
    for(auto i : FT){
        TF[i] = cnt++;
    }
    for(int i = 0; i < n; i++){
        int x = X[i];
        int tp = A[i];
        int time = TF[T[i]];
        val[x].push_back(make_pair(make_pair(tp, i), time));
    }
    for(auto i : val){
        int nn = 0;
        for(auto j : i.second) {
            nn = max(nn, j.second);
            nn = max(nn, j.first.second);
        }
        nn++;
        ft.build(nn);
        for(auto j : i.second){
            if(j.first.first == 1){
                ft.modify(j.second, 1);
            }
            if(j.first.first == 2){
                ft.modify(j.second, -1);
            }
            if(j.first.first == 3){
                ans[j.first.second] = ft.query(j.second);
            }
        }
    }

    for(int i = 0; i < N; i++){
        if(ans[i] == -1)
            continue;
        else{
            printf("%d\n", ans[i]);
        }
    }

    return 0;
}