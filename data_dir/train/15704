#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>

#include <cstdint>
#include <cstdlib>
#include <cassert>
#include <cctype>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-11;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 1 && x <= n && y >= 1 && y <= m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

template <typename T1, typename T2>
inline ostream& operator <<(ostream& out, const pair<T1, T2>& p) {
	return out << "(" << p.x << ", " << p.y << ")";
}

template <typename T>
inline ostream& operator <<(ostream& out, const vector<T>& a) {
	out << sz(a) << " : ";
	for (int i = 0; i + 1 < sz(a); i++) out << a[i] << ' ';
	if (a.empty()) out << "EMPTY";
	else out << a.back();
	return out << endl;
}

template <typename T>
inline ostream& operator <<(ostream& out, const set<T>& a) {
	out << sz(a) << " : ";
	if (a.empty()) return out << "EMPTY" << endl;
	for (auto it = a.begin(); it != (--a.end()); it++) out << *it << ' ';
	return out << *(--a.end()) << endl;
}

template <typename T1, typename T2>
inline ostream& operator <<(ostream& out, const map<T1, T2>& a) {
	out << sz(a) << " : ";
	if (a.empty()) return out << "EMPTY" << endl;
	for (const pair<T1, T2>& p : a) out << "[ " << p.x << " ] --> " << p.y << endl;
	return out;
}

const int N = 11111;

int n, m;
int * a[N];
multiset<int> s1, s2;
int n1, n2;

inline void gen() {
	return;
}

inline bool read() {
	if (scanf("%d %d", &n, &m) != 2) return false;
	assert(scanf("%d", &n1) == 1);
	forn(i, n1) {
		int x;
		assert(scanf("%d", &x) == 1);
		s1.insert(x);
	}

	assert(scanf("%d", &n2) == 1);
	forn(i, n2) {
		int x;
		assert(scanf("%d", &x) == 1);
		s2.insert(x);
	}
	return true;
}

inline int len(const pt& a, const pt& b) {
	return abs(a.x - b.x) + abs(a.y - b.y);
}

inline void solve() {
	multiset<int> ss1 = s1, ss2 = s2;
	//forn(i, n + 2) a[i] = new int[m + 2];
	vector<pair<int, pt> > v1;
	forn1(i, n) forn1(j, m) {
		v1.push_back(mp(len(pt(0, 0), pt(i, j)), pt(i, j)));
	}

	bool ok = true;

	sort(all(v1));
	reverse(all(v1));
	forn(ii, sz(v1)) {
		int i = v1[ii].y.x;
		int j = v1[ii].y.y;
		int cnt1 = 0, cnt2 = 0;
		int mn = INF;
		int who = -1;
		int len1 = ::len(pt(0, 0), pt(i, j));
		for (int x : s1) {
			if (x >= len1) cnt1++;
		}

		int len2 = ::len(pt(0, m + 1), pt(i, j));
		for (int x : s2) {
			if (x >= len2) cnt2++;
		}

		if (!cnt1 && !cnt2) {
			ok = false;
			break;
			return;
		}

		auto it1 = s1.lower_bound(len1);
		auto it2 = s2.lower_bound(len2);

		if (cnt1 && !cnt2) {
			s1.erase(it1);
		}
		else if(!cnt1 && cnt2) {
			s2.erase(it2);
		}
		else {
			if (*it1 < *it2) {
				s1.erase(it1);
			}
			else if(*it1 > *it2) {
				s2.erase(it2);
			}
			else {
				if (true) {
					s1.erase(it1);
				}
				else {
					s2.erase(it2);
				}
			}
		}
	}

	if (ok) {
		puts("YES");
		return;
	}

	vector<pair<int, pt> > v2;
	forn1(i, n) forn1(j, m) {
		v2.push_back(mp(len(pt(0, m + 1), pt(i, j)), pt(i, j)));
	}

	s1 = ss1, s2 = ss2;
	ok = true;

	sort(all(v2));
	reverse(all(v2));
	forn(ii, sz(v2)) {
		int i = v2[ii].y.x;
		int j = v2[ii].y.y;
		int cnt1 = 0, cnt2 = 0;
		int mn = INF;
		int who = -1;
		int len1 = ::len(pt(0, 0), pt(i, j));
		for (int x : s1) {
			if (x >= len1) cnt1++;
		}

		int len2 = ::len(pt(0, m + 1), pt(i, j));
		for (int x : s2) {
			if (x >= len2) cnt2++;
		}

		if (!cnt1 && !cnt2) {
			puts("NO");
			return;
		}

		auto it1 = s1.lower_bound(len1);
		auto it2 = s2.lower_bound(len2);

		if (cnt1 && !cnt2) {
			s1.erase(it1);
		}
		else if (!cnt1 && cnt2) {
			s2.erase(it2);
		}
		else {
			if (*it1 < *it2) {
				s1.erase(it1);
			}
			else if (*it1 > *it2) {
				s2.erase(it2);
			}
			else {
				if (true) {
					s1.erase(it1);
				}
				else {
					s2.erase(it2);
				}
			}
		}
	}
	puts("YES");
	return;
}

int main() {
#ifdef _DEBUG
	assert(freopen("input.txt", "rt", stdin));
	assert(freopen("output.txt", "wt", stdout));
#endif

	cout << setprecision(10) << fixed;
	cerr << setprecision(10) << fixed;

	srand(int(time(NULL)));

	int nTests = 1;
	//assert(cin >> nTests);
	//#define MULTITEST
#ifdef MULTITEST
	assert(scanf("%d", &nTests) == 1);
#endif

	forn(i, nTests) {
		//cerr << "TEST == " << i << endl;
		assert(read());
		solve();
	}

#ifdef _DEBUG
	cerr << "TIME == " << clock() << " ms" << endl;
#endif
	return 0;
}