#include <iostream>
#include<memory.h>
#include <map>
#include <string>
#include <iomanip>
#include <fstream>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <cmath>
#include <set>
using namespace std;

/*
int main()
{
	long long r[3001]={0};
	int sq[1501*1501] = {0};
	for (int i = 1; i <= 1500; i++) sq[i*i] = i;
	for (long long i = 1; i <= 1500; i++)
	{
		for (long long j = 1; j < i; j++)
		{
			long long k = i*i - j*j;
			if (sq[k] != 0 && i+j+sq[k] < 3001)
			{
				r[i+j+sq[k]] = max(r[i+j+sq[k]], i*j*sq[k]);
			}
		}
	}
	int t;
	cin>>t;
	while (t--)
	{
		int n;
		cin>>n;
		if (r[n] > 0) cout<<r[n]<<endl;
		else cout<<-1<<endl;
	}
}


int main()
{
	bool np[1000001] = {false};
	np[0] = np[1] = true;
	for (long long i = 2; i < 1000000; i++)
	{
		if (!np[i])
		{
			for (long long j = i*i; j < 1000000; j+= i)
			{
				np[j] = true;
			}
		}
	}
	long long f[1000001] = {0};
	f[0] = 0;
	for (int i = 1; i < 1000001; i++)
	{
		f[i] += f[i-1];
		if (!np[i]) f[i] += i;
	}
	int t;
	cin>>t;
	while (t--)
	{
		int n;
		cin>>n;
		cout<<f[n]<<endl;
	}
}



int main()
{
	int a[20][20] = {0};
	for (int i = 0; i < 20; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			string s;
			cin>>s;
			int x = 0;
			for (int k = 0; k< s.size(); k++)
			{
				x*=10;
				x+= s[k]-'0';
			}
			a[i][j] = x;
		}
	}
	int mx =0;
	for (int i = 0; i < 20; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			int x = 1;
			if (i+4 <= 20)
			{
				x= a[i][j]*a[i+1][j]*a[i+2][j]*a[i+3][j];
				mx = max(mx, x);
			}
			if (j+4 <= 20)
			{
				x= a[i][j]*a[i][j+1]*a[i][j+2]*a[i][j+3];
				mx = max(mx, x);
			}
			if (i+4 <= 20 && j+4 <= 20)
			{
				x= a[i][j]*a[i+1][j+1]*a[i+2][j+2]*a[i+3][j+3];
				mx = max(mx, x);
			}
			if (i+4<=20 && j>=3)
			{
				x= a[i][j]*a[i+1][j-1]*a[i+2][j-2]*a[i+3][j-3];
				mx = max(mx, x);
			}
		}
	}
	cout<<mx<<endl;
}


int main()
{
	int a[50000] = {0};
	int t[50000] = {0};
	a[1] = 1;
	for (int i = 2;i < 50000; i++)
	{
		int x = 0;
		for (int j = 1; j*j <= i; j++)
		{
			if (i%j==0){
				x++;
				if (j*j != i) x++;
			}
		}
		int k = i;
		while (k%2==0) {t[i]++; k/=2;}
		a[i] = x;
	}
	int b[50000]= {0};
	b[1] = 1;
	for (int i = 2; i < 50000; i++)
	{
		if (i%2==0)
		{
			b[i] = (a[i]*a[i-1]*t[i]) / (t[i]+1);
		}
		else
		{
			b[i] = (a[i]*a[i-1]*t[i-1]) / (t[i-1]+1);
		}
		b[i] = max(b[i-1], b[i]);
	}
	int T;
	cin>>T;
	while(T--)
	{
		int n;
		cin>>n;
		int * it = upper_bound(b,b+50000, n);
		long long x = (it-b);
		
		x *= (x-1ll);
		x/=2;
		cout<<x<<endl;
	}
}


string sm(string a, string b)
{
	reverse(a.begin(), a.end());
	reverse(b.begin(), b.end());
	int c = 0;
	string r = "";
	for (int i = 0; i < max(a.size(), b.size()); i++)
	{
		int x,y;
		if (a.size() <= i) x = 0;
		else x = a[i]-'0';
		if (b.size() <= i) y = 0;
		else y = b[i]-'0';
		int z = x+y+c;
		r += '0'+(z%10);
		c = z/10;
	}
	if (c > 0) r+= '0'+c;
	reverse(r.begin(), r.end());
	return r;
}
int main()
{
	int n;
	cin>>n;
	string s;
	string b;
	cin>>s;
	for (int i = 1; i < n; i++)
	{
		cin>>b;
		s = sm(s,b);
	}
	cout<<s<<endl;
	cout<<s.substr(0,10)<<endl;
}


int main()
{
	vector<short> a(5000001, 0);
	vector<int> b(5000001, 0);
	for(int i = 1; i < 5000001; i++)
	{
		long long j = i;
		int x = 0;
		while (j > 1)
		{
			if (j < i)
			{
				x += a[j];
				break;
			}
			x++;
			if (j%2==0) j>>=1;
			else j = 3*j+1;
		}
		a[i] = x;
	}
	b[1] = 1;
	for (int i = 2; i < 5000001; i++)
	{
		if (a[i] >= a[b[i-1]]) b[i] = i;
		else b[i] = b[i-1];
	}
	int t;
	cin>>t;
	while (t--)
	{
		int n;
		cin>>n;
		cout<<b[n]<<endl;
	}
}

int main()
{
	int dp[1001][1001];
	dp[0][0] = 1;
	
	for (int i = 1; i < 1001; i++) {
		dp[0][i] = 0;
		dp[i][0] = 1;
	};
	for (int i = 1; i < 1001; i++)
	{
		for (int j = 1; j <= 1000; j++)
		{
			if (i < j)
			{
				dp[i][j] = 0;
				continue;
			}
			dp[i][j] = dp[i-1][j] + dp[i-1][j-1];
			dp[i][j] %= 1000000007;
		}
	}
	int t;
	cin>>t;
	while (t--)
	{
		int n,m;
		cin>>n>>m;
		cout<<dp[n+m][n]<<endl;
	}
}


string db(string a)
{
	reverse(a.begin(), a.end());
	int c = 0;
	string r = "";
	for (int i = 0; i < a.size(); i++)
	{
		int x,y;
		if (a.size() <= i) x = 0;
		else x = a[i]-'0';
		int z = x+x+c;
		r += '0'+(z%10);
		c = z/10;
	}
	if (c > 0) r+= '0'+c;
	reverse(r.begin(), r.end());
	return r;
}

int main()
{
	string a[10001];
	a[0] = "1";
	for (int i = 1; i < 10001; i++)
	{
		a[i] = db(a[i-1]);
	}
	int t;
	cin>>t;
	while (t--)
	{
		int n;
		cin>>n;
		int sm = 0;
		for (int i = 0; i < a[n].size(); i++)
		{
			sm += a[n][i]-'0';
		}
		cout<<sm<<endl;
	}
}


int main()
{
	int pr[100] = {0};
	int cnt = 0;
	for (int i = 2; cnt < 100; i++)
	{
		bool prime = true;
		for (int j = 2; j*j <= i; j++)
		{
			if (i%j==0) prime = false;
		}
		if (prime)
		{
			pr[cnt] = i;
			cnt++;
		}
	}
	int sm[100] = {0};
	sm[0] = 2;
	for (int i = 1; i < 100; i++)
	{
		int prd = 1;
		int k = pr[i];
		while (k)
		{
			prd*= (k%10);
			k/=10;
		}
		sm[i] = prd;
		sm[i] += sm[i-1];
	}
	int t;
	cin>>t;
	while (t--)
	{
		int n;
		cin>>n;
		cout<<sm[n-1]<<endl;
	}
}


int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		int n;
		cin>>n;
		vector<int> a(n);
		int sm = 0;
		for (int i = 0; i < n; i++)
		{
			cin>>a[i];
			sm += a[i];
		}
		int x = sm/n;
		int sm2=0;
		for (int i = 0; i < n; i++) if (a[i] < x) sm2+= x-a[i];
		cout<< sm%n<<" "<<sm2<<endl;
	}
}


int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		int n;
		cin>>n;
		int x = 0;
		int y = 0;
		for (int i = 0; i < n; i++)
		{
			cin>>y;
			x = max(x, y);
		}
		if (x > 1) cout<<"ambiguous"<<endl;
		else cout<<"not ambiguous"<<endl;
	}
}


int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		int n;
		cin>>n;
		int x = 0;
		int y = 0;
		
		for (int i = 0; i < n; i++)
		{
			cin>>y;
			x += y;
		}
		cout<<x-(2*(n-1))<<endl;
	}
}


int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		string s;
		cin>>s;
		int f[26] = {0};
		for (int i = 0; i < s.size(); i++) f[s[i]-'a']++;
		int mxi;
		
		mxi = 0;
		for (int i = 0; i < 26; i++)
		{
			if (f[i] > f[mxi])
			{
				mxi = i;
			}
		}
		cout<<f[mxi]<<" "<<(char)(mxi+'a')<<endl;
	}
}


int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		int y1,y2,m1,m2;
		cin>>y1>>m1>>y2>>m2;
		m1 += y1*12;
		m2 += y2*12;
		int m3 = m1+m2;
		if (m3%12==0)
			cout<<m3/12-1<<" "<<12<<endl;
		else
			cout<<m3/12<<" "<<m3%12<<endl;
	}
}


string read(long long n, bool bef)
{
	if (n >= 1000000000)
	{
		return read(n/1000000000, false) + " Billion" + read(n%1000000000, true);
	}
	if (n >= 1000000)
	{
		string ret = "";
		if (bef) ret += " ";
		ret += read(n/1000000, false) + " Million" + read(n%1000000, true);
		return ret;
	}
	if (n >= 1000)
	{
		string ret = "";
		if (bef) ret += " ";
		ret += read(n/1000, false) + " Thousand" + read(n%1000, true);
		return ret;
	}
	if (n >= 100)
	{
		string ret = "";
		if (bef) ret += " ";
		ret += read(n/100, false) + " Hundred" + read(n%100, true);
		return ret;
	}
	if (n >= 20)
	{
		string ret = "";
		if (bef) ret += " ";
		if (n >= 90)
		{
			ret += "Ninety";
			ret += read(n%10, true);
		}
		else if (n >= 80)
		{
			ret += "Eighty";
			ret += read(n%10, true);
		}
		else if (n >= 70)
		{
			ret += "Seventy";
			ret += read(n%10, true);
		}
		else if (n >=60)
		{
			ret += "Sixty";
			ret += read(n%10, true);
		}
		else if (n >= 50)
		{
			ret += "Fifty";
			ret += read(n%10, true);
		}
		else if (n >= 40)
		{
			ret += "Forty";
			ret += read(n%10, true);
		}
		else if (n >= 30)
		{
			ret += "Thirty";
			ret += read(n%10, true);
		}
		else
		{
			ret += "Twenty";
			ret += read(n%10, true);
		}
		return ret;
	}
	else if (n >= 10)
	{
		string ret = "";
		if (bef) ret+=' ';
		if (n == 10)
		{
			ret += "Ten";
		}
		if (n == 11)
		{
			ret += "Eleven";
		}
		if (n == 12)
		{
			ret += "Twelve";
		}
		if (n == 13)
		{
			ret += "Thirteen";
		}
		if (n == 14)
		{
			ret += "Fourteen";
		}if (n == 15)
		{
			ret += "Fifteen";
		}if (n == 16)
		{
			ret += "Sixteen";
		}if (n == 17)
		{
			ret += "Seventeen";
		}if (n == 18)
		{
			ret += "Eighteen";
		}if (n == 19)
		{
			ret += "Nineteen";
		}
		return ret;
	}
	else
	{
		string ret = "";
		if (bef) ret+=' ';
		if (n == 0)
		{
			return "";
		}
		if (n == 1)
		{
			ret += "One";
		}
		if (n == 2)
		{
			ret += "Two";
		}
		if (n == 3)
		{
			ret += "Three";
		}
		if (n == 4)
		{
			ret += "Four";
		}if (n == 5)
		{
			ret += "Five";
		}if (n == 6)
		{
			ret += "Six";
		}
		if (n == 7)
		{
			ret += "Seven";
		}
		if (n == 8)
		{
			ret += "Eight";
		}
		if (n == 9)
		{
			ret += "Nine";
		}
		return ret;
	}
}

int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		long long n;
		cin>>n;
		cout<<read(n, false)<<endl;
	}
}


int dp[20][20];
int n;
int m[20][20];
int sol(int i, int j)
{
	if (i == n) return 0;
	if (dp[i][j] != -1) return dp[i][j];
	int r = m[i][j];
	r += max(sol(i+1, j), sol(i+1, j+1));
	return dp[i][j] = r;
}

int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		for (int i = 0; i < 20; i++) for (int j = 0; j < 20; j++) dp[i][j] = m[i][j] = -1;
		cin>>n;
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j<=i; j++) cin>>m[i][j];
		}
		cout<<sol(0,0)<<endl;
	}
}


int main()
{
	int t;
	cin>>t;
	int mn[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
	while (t--)
	{
		long long y1,m1,d1,y2,m2,d2;
		cin>>y1>>m1>>d1>>y2>>m2>>d2;
		unsigned long long st = 1900*365;
		st += 1900/4;
		st -= 1900/100;
		st += 1900/400;
		unsigned long long beg = y1*365;
		beg += y1/4;
		beg -= y1/100;
		beg += y1/400;
		beg++;
		beg -= st;
		beg %= 7;
		int res = 0;
		m1--;
		m2--;
		for (int i = y1; i <= y2; i++)
		{
			for (int j = 0; j < 12; j++)
			{
				if (i==y2 && j > m2) break;
				if ((i > y1) || (i == y1 && j > m1) || (i == y1 && j == m1 && d1 == 1))
				{
					if (beg == 0) res++;
				}
				if (j != 1)
				{
					beg += mn[j];
					beg %= 7;
				}
				else
				{
					if (i %4==0 && i %100 != 0)
					{
						beg += 29;
						beg %= 7;
					}
					else if (i % 400==0)
					{
						beg += 29;
						beg %= 7;
					}
					else
					{
						beg += 28;
						beg %= 7;
					}
				}
			}
		}
		cout<<res<<endl;
	}
}


vector<vector<int> > tree;
vector<vector<int> >dp [200005];
bool pr[200004];
int n;
int inf;
int f(int i, int j, int p, int mask, int rmaskg) {
		if (j == tree[i].size()) {
			if (pr[i] && (mask & 1) != 0)
				return inf;
			if (mask == 3 && (rmaskg&1) == 0)
				return inf;
			if ((mask & (rmask>>1)) != mask)
				return inf;
			return 0;
		}
		if (dp[i][j][mask << 3 | rmaskg] != -1)
			return dp[i][j][mask << 3 | rmaskg];
		int node = tree[i][j];
		if (node == p)
			return dp[i][j][mask << 3 | rmaskg] = f(i, j + 1, p, mask,
					rmaskg);
		int ans = inf;
		// put a guard
		if (!pr[node]) {
			ans = f(i, j + 1, p, mask, rmaskg) + 1 + f(node, 0, i, 0, (3<<1)+1);
		}
		// put no guard
		int next_mask = mask;
		if (tree[node].size() == 1)
			next_mask |= 1;
		if (pr[node])
			next_mask |= 2;
		for (int m = 0; m < 4; m++) {
			int r = f(i, j + 1, p, next_mask | m, rmaskg)
					+ f(node, 0, i, 0, m<<1);
			if (r < ans)
				ans = r;
		}
		return dp[i][j][mask << 3 | rmaskg] = ans;
	}

	int solution(vector<int> &A, vector<int> &B, vector<int> &C) {
		n = A.size() + 1;
		inf = 1000000;
		tree = vector<vector<int> > (n);
		for (int i=0; i < C.size(); i++)
			pr[C[i]] = true;
		for (int i = 0; i < n - 1; i++) {
			tree[A[i]].push_back(B[i]);
			tree[B[i]].push_back(A[i]);
		}
		for (int i = 0; i < n; i++) {
			dp[i] = vector<vector<int> > (tree[i].size(), vector<int> (1<<5, -1));
		}
		int count = 0;
		bool badass = false;
		for (int i = 0; i < tree.size(); i++) {
			if (tree[i].size() == 1) {
				count++;
				if (pr[i])
					return -1;
			}
			badass |= pr[i];
		}
		for (int i = 0; i < tree.size(); i++) {
			if (tree[i].size() > 1 && !pr[i]) {
				int x = f(i, 0, -1, 0, 7) + 1;
				for (int m = 0; m < 4; m++)
					x = min(x, f(i, 0, -1, 0, m<<1));
				return x;
			}
		}
		if (badass)
			return count;
		return 0;
	}
	
int main()
{
	vector<int> A;
	vector<int> B;
	vector<int> C;
	A.push_back(0);
	B.push_back(1);
	A.push_back(0);
	B.push_back(14);
	A.push_back(0);
	B.push_back(13);
	A.push_back(1);
	B.push_back(2);
	A.push_back(1);
	B.push_back(15);
	A.push_back(1);
	B.push_back(16);
	A.push_back(1);
	B.push_back(17);
	A.push_back(17);
	B.push_back(3);
	A.push_back(3);
	B.push_back(4);
	A.push_back(3);
	B.push_back(5);
	A.push_back(3);
	B.push_back(6);
	A.push_back(3);
	B.push_back(8);
	A.push_back(8);
	B.push_back(7);
	A.push_back(8);
	B.push_back(9);
	A.push_back(8);
	B.push_back(10);
	A.push_back(8);
	B.push_back(11);
	A.push_back(8);
	B.push_back(12);
	
	C.push_back(1);
	C.push_back(3);
	int res = solution(A,B,C);
	cout<<res<<endl;
}



int main()
{
	string s;
	cin>>s;
	string s2 = "hello";
	int j = -1;
	for (int i = 0; i < s2.size(); i++)
	{
		for (j = j+1; j < s.size(); j++)
		{
			if (s[j] == s2[i])
				break;
		}
		if (j == s.size())
		{
			cout<<"NO"<<endl;
			return 0;
		}
	}
	cout<<"YES"<<endl;
}


vector<vector<long long> > dp;
long long f[100001] = {0};
long long sol(int i, int pv)
{
cout<<i<<" "<<pv<<endl;
	if (i==-1) return 0;
	if (dp[i][pv] != -1) return dp[i][pv];
	if (pv > 0)
	{
		return dp[i][pv] = sol(i-1, 0);
	}
	else
	{
		return dp[i][pv] = max(f[i]*i + sol(i-1, 1), sol(i-1, 0));
	}
}

int main()
{
	int n;
	cin>>n;
	int x;
	dp = vector<vector<long long> > (100001, vector<long long> (2, -1));
	for (int i = 0; i < n; i++)
	{
		cin>>x;
		f[x]++;
	}
	cout<<sol(100000, 0)<<endl;
}


class Node
{
public:
	Node *ch[26];
	Node()
	{
		for (int i = 0; i < 26; i++) ch[i] = NULL;
	}
	vector<int> val;
	int i;
	void add(int i)
	{
		val.push_back(i);
	}
};
vector<string> a;
Node * st;
void build(Node * i, int k)
{
	if (i == NULL) return;
	i->i = k;
	for (int j = 0; j < i->val.size(); j++)
	{
		if (k >= a[i->val[j]].size()) continue;
		
		char x = a[i->val[j]][i->i];
		if (i->ch[x - 'a'] == NULL) i->ch[x - 'a'] = new Node;
		i->ch[x - 'a']->add(i->val[j]);
	}
	for (int j = 0; j < 26; j++) build(i->ch[j], k+1);
}

int getWin(Node *i, int turn)
{
	for (int j = 0; j < 26; j++)
	{
		if (i->ch[j] != NULL)
		{
			if (getWin(i->ch[j], 1-turn) == turn) return turn;
		}
	}
	return 1-turn;
}

int getLost(Node *i, int turn)
{
	bool ok = false;
	for (int j = 0; j < 26; j++)
	{
		if (i->ch[j] != NULL)
		{
			ok = true;
			if (getLost(i->ch[j], 1-turn) == turn) return turn;
		}
	}
	if (!ok) return turn;
	return 1-turn;
	
}
int main()
{
	int n, k;
	cin>>n>>k;
	a = vector<string> (n);
	st = new Node;
	for (int i = 0; i < n; i++)
	{
		cin>>a[i];
		st->add(i);
	}
	build(st, 0);
	int win = getWin(st, 0);
	int loss = getLost(st, 0);
	if (win == 0 && loss == 0)
	{
		cout<<"First"<<endl;
	}
	if (win==0 && loss == 1)
	{
		if (k%2==0)
		{
			cout<<"Second"<<endl;
		}
		else
		{
			cout<<"First"<<endl;
		}
	}
	if (win == 1)
	{
		cout<<"Second"<<endl;
	}
}


string sm(string a, string b)
{
	reverse(a.begin(), a.end());
	reverse(b.begin(), b.end());
	int c = 0;
	string r = "";
	for (int i = 0; i < max(a.size(), b.size()); i++)
	{
		int x,y;
		if (a.size() <= i) x = 0;
		else x = a[i]-'0';
		if (b.size() <= i) y = 0;
		else y = b[i]-'0';
		int z = x+y+c;
		r += '0'+(z%10);
		c = z/10;
	}
	if (c > 0) r+= '0'+c;
	reverse(r.begin(), r.end());
	return r;
}

string mul(string a, int b)
{
	if (b==0) return "0";
	if (b%2==0)
	{
		string s = mul(a, b/2);
		return sm(s,s);
	}
	else
	{
		string s = mul(a, b-1);
		return sm(s,a);
	}
}
int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		int n;
		cin>>n;
		string r = "1";
		for (int i = 1; i <= n; i++)
		{
			r = mul(r, i);
		}
		cout<<r<<endl;
	}
}


int main()
{
	int n,m,w;
	cin>>n>>m>>w;
	vector<long long> a(n);
	vector<long long> b(n);
	vector<int> c(n+w);
	long long mn = 1000000000;
	for (int i = 0;i < n; i++)
	{
		cin>>a[i];
		mn = min(mn, a[i]);
	}
	long long lo = mn;
	long long hi = mn+m+1;
	long long md = -1;
	while (lo <= hi)
	{
		md = (lo+hi)/2;
		for (int i = 0; i < n; i++)
		{
		
			b[i] = max(0ll, md-a[i]);
			c[i] = 0;
			
		}
		int cur = 0;
		int sm = 0;
		for (int i = 0; i < n; i++)
		{
			if (b[i] > cur)
			{
				sm += b[i]-cur;
				c[i+w-1] = b[i]-cur;
				cur = b[i];
				
			}
			cur -= c[i];
		}
		if (sm > m)
		{
			hi = md-1;
		}
		else
			lo = md;
	}
	cout<<hi<<endl;
}


pair<int,int>seg[400004];
int update(int i, int j, int x,int a, int b)
{
	if (b < a) return 0;
	if (a >= i && b <= j)
	{
		seg[x].second++;
		seg[x].second %=2;
		int r = (b-a+1) - 2*seg[x].first;
		seg[x].first = (b-a+1) - seg[x].first;
		return r;
	}
	if (b < i || a > j)
	{
		return 0;
	}
	if (seg[x].second == 1)
	{
		int lh = ((a+b)/2) - a + 1;
		int rh = (b-a+1) - lh;
		seg[x].second = 0;
		seg[2*x].second++;
		seg[2*x].second %=2;
		seg[2*x].first = lh - seg[2*x].first;
		seg[2*x+1].second++;
		seg[2*x+1].second %=2;
		seg[2*x+1].first = rh - seg[2*x+1].first;
	}
	int r = 0;
	r+= update(i, j, x*2,a, (a+b)/2);
	r+= update(i, j, x*2+1,(a+b)/2 + 1, b);
	seg[x].first += r;
	return r;
}

int read(int i, int j, int x,int a, int b)
{
	if (b < a) return 0;
	if (a >= i && b <= j)
	{
		return seg[x].first;
	}
	if (b < i || a > j)
	{
		return 0;
	}
	if (seg[x].second == 1)
	{
		int lh = ((a+b)/2) - a + 1;
		int rh = (b-a+1) - lh;
		seg[x].second = 0;
		seg[2*x].second++;
		seg[2*x].second %=2;
		seg[2*x].first = lh - seg[2*x].first;
		seg[2*x+1].second++;
		seg[2*x+1].second %=2;
		seg[2*x+1].first = rh - seg[2*x+1].first;
	}
	int r = 0;
	r+= read(i, j, x*2,a, (a+b)/2);
	r+= read(i, j, x*2+1,(a+b)/2 + 1, b);
	return r;
}

int main()
{
	int n,q;
	scanf("%d %d",&n,&q);
	for (int i = 0; i < 400004; i++) seg[i].first = seg[i].second = 0;
	while (q--)
	{
		int com,x,y;
		scanf("%d %d %d",&com,&x, &y);
		if (com == 0)
		{
			update(x,y,1,0,n-1);
		}
		else
		{
			printf("%d\n",read(x,y,1,0,n-1));
		}
	}
}


int main()
{
	long long a,b,n;
	
	int pr[30000];
	int prcnt = 0;
	bool np[100000] = {0};
	for (long long i = 2; i < 100000; i++)
	{
		if (!np[i])
		{
			pr[prcnt] = i;
			prcnt++;
			for (long long j = i*i; j < 100000; j+=i) np[j] = true;
		}
	}
	cin>>a>>b>>n;
	int sz = b-a+1;
	vector<int> x[10001];
	for (int i = 0; i < prcnt; i++)
	{
		long long y = a%pr[i];
		long long st = 0;
		if (y>0)
		{
			st = pr[i]-y;
		}
		for (; st < sz; st += pr[i])
		{
			x[st].push_back(pr[i]);
		}
	}
	int res = 0;
	for (int i = 0; i < sz; i++)
	{
		int div = 1;
		long long z = a+i;
		for (int j = 0; j < x[i].size(); j++)
		{
			int cnt = 0;
			while (z%x[i][j] == 0)
			{
				cnt++;
				z/= x[i][j];
			}
			div *= (cnt+1);
		}
		if (z > 1)
		{
			div *=2;
		}
		if (div == n) res++;
	}
	cout<<res<<endl;
}



int main()
{
	ios_base::sync_with_stdio(false);
	int t;
	cin>>t;
	while (t--)
	{
		string s;
		cin>>s;
		int r = 0;
		set<int> w;
		for (int i = 0; i < s.size(); i++)
		{
			w.clear();
			int c = 0;
			for (int j = i; j < s.size() && c < 10; j++, c++)
			{
				if (w.count(c) > 0)
				{
					w.erase(c);
				}
				else
					w.insert(c);
				int x = s[j]-'0';
				if (w.count(x) > 0)
				{
					w.erase(x);
				}
				else
					w.insert(x);
				if (w.empty()) r++;
			}
		}
		cout<<r<<endl;
	}
}


int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		long long n,c;
		cin>>n>>c;
		pair<int,int> a[8];
		for (int i = 0; i < n; i++) cin>>a[i].first>>a[i].second;
		sort(a, a+n);
		int r = 0;
		int cnt = 0;
			int rem = c;
			for (int i = 0; i < n; i++)
			{
				if (a[i].first <= rem)
				{
					rem -= a[i].first;
					rem += a[i].second;
					cnt++;
					continue;
				}
				break;
			}
			r = max(r, cnt);
		while (next_permutation(a, a+n))
		{
			cnt = 0;
			rem = c;
			for (int i = 0; i < n; i++)
			{
				if (a[i].first <= rem)
				{
					rem -= a[i].first;
					rem += a[i].second;
					cnt++;
					continue;
				}
				break;
			}
			r = max(r, cnt);
		}
		cout<<r<<endl;
	}
}


int dp[20][1<<16];
vector<long long> has;
vector<long long> req;
vector<vector<int> > g;
int n;
int sol(int r, int msk, long long keys, bool first)
{
	if (dp[r][msk] != -1) return dp[r][msk];
	int res = 0;
	if (!first)
	{
		for (long long i = 0; i < 60; i++)
		{
			if ((req[r] & (1ll<<i)) > 0)
			{
				if ((keys & (1ll<<i)) ==0) return dp[r][msk] = 0;
			}
		}
	}
	res++;
	for (long long i = 0; i < 60; i++)
	{
		if ((has[r] & (1ll<<i)) > 0)
		{
			keys |= (1ll<<i);
		}
	}
	for (int i = 0; i < g[r].size(); i++)
	{
		int go = g[r][i];
		if (((1<<go)&msk)>0) continue;
		res = max(res, 1+sol(go, msk|(1<<go),keys, false));
	}
	return dp[r][msk] = res;
}

int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		for (int i = 0; i < 20; i++) for (int j = 0; j < (1<<16); j++) dp[i][j] = -1;
		cin>>n;
		has = vector<long long> (n);
		req = vector<long long> (n);
		for (int i = 0; i < n; i++)
		{
			int k = 0;
			cin>>k;
			for (int j = 0; j < k; j++)
			{
				long long x;
				cin>>x;
				req[i] |= (1ll<<x);
			}
		}
		for (int i = 0; i < n; i++)
		{
			int k = 0;
			cin>>k;
			for (int j = 0; j < k; j++)
			{
				long long x;
				cin>>x;
				has[i] |= (1ll<<x);
			}
		}
		g = vector<vector<int> > (n);
		string s;
		for (int i = 0; i < n; i++)
		{
			cin>>s;
			for (int j = 0; j < n; j++)
			{
				if (s[j] == 'Y')
				{
					g[i].push_back(j);
				}
			}
		}
		int r = 0;
		for (int i = 0; i < n; i++) r = max(r, sol(i,1<<i,0, true));
		cout<<r<<endl;
	}
}


int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		int n;
		cin>>n;
		int a[50][50];
		int b[50][50];
		for (int i = 0; i < n; i++)
		{
			for (int j = 0 ; j < n; j++)
			{
				cin>>a[i][j];
				if (a[i][j] == -1) a[i][j] = 100000000;
				b[i][j] = a[i][j];
				if (i==j) a[i][j] = 0;
			}
		}
		for(int k = 0; k < n; k++)
        for(int i = 0; i < n; i++)
            for(int j = 0; j < n; j++)
                if(a[i][j]>a[i][k]+a[k][j])
                    a[i][j]=a[i][k]+a[k][j];
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (j > 0) cout<<" ";
				int r = 0;
				if (b[i][j] >= 100000000)
				{
					cout<<-1;
					continue;
				}
				for (int x = 0; x< n; x++)
				{
					for (int y = 0; y < n; y++)
					{
						if (x==y || a[x][y] >= 1000000) continue;
						if (a[x][i]+b[i][j]+a[j][y] <= a[x][y])
						{
							r++;
						}
					}
				}
				cout<<r;
			}
			cout<<endl;
		}
	}
}


int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		int s,n,k,m;
		cin>>s>>n>>k>>m;
		double tme = (double)n/(double)s;
		tme -= ((double)m/(double)k);
		if (n*k < m*s) cout<<-1<<endl;
		else
			printf("%.5f\n", tme);
	}
}




int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		long long l;
		cin>>l;
		pair<int, pair<long long,long long> > ch[5];
		for (int i = 0; i < 5; i++)
		{
			cin>>ch[i].first>>ch[i].second.first>>ch[i].second.second;
		}
		sort(ch, ch+5);
		vector<pair<long long, pair<long long, long long> > > p;
		for (int i = 0; i <= ch[3].first; i++)
		{
			for (int j = 0; j <= ch[4].first; j++)
			{
				long long a, b;
				a = i*ch[3].second.first;
				b = i*ch[3].second.second;
				a += j*ch[4].second.first;
				b += j*ch[4].second.second;
				p.push_back(make_pair(a, make_pair(b, a)));
			}
		}
		sort(p.begin(), p.end());
		vector<pair<long long, pair<long long, long long> > > :: iterator it;
		for (int i = p.size()-2; i>=0; i--)
		{
			p[i].second = min(p[i].second, p[i+1].second);
		}
		long long cost = 1000000000000000ll;
		long long dam = 1000000000000000ll;
		for (int i = 0; i <= ch[0].first; i++)
		{
			for (int j = 0; j <= ch[1].first; j++)
			{
				for (int k = 0; k <= ch[2].first; k++)
				{
					long long a, b;
					a = i*ch[0].second.first;
					b = i*ch[0].second.second;
					a += j*ch[1].second.first;
					b += j*ch[1].second.second;
					a += k*ch[2].second.first;
					b += k*ch[2].second.second;
					pair<long long, pair<long long, long long> > x = make_pair(l-a, make_pair(-1,-1));
					it = lower_bound(p.begin(), p.end(), x);
					if (it != p.end())
					{
						if (cost > b+(*it).second.first || (cost == b+(*it).second.first && dam > a+(*it).second.second))
						{
							cost = b+(*it).second.first;
							dam = a+(*it).second.second;
						}
					}
				}
			}
		}
		if (cost == 1000000000000000ll && dam == 1000000000000000ll)
		{
			cout<<"We are doomed!!"<<endl;
		}
		else
			cout<<cost<<" "<<dam<<endl;
	}
}

int gcd(int a, int b)
{
	if (b==0) return a;
	return gcd(b, a%b);
}
int main()
{
	int t;
	scanf("%d",&t);
	
	while (t--)
	{
		int x,y;
		scanf("%d %d",&x, &y);
		int r = 0;
		int z = gcd(x,y);
		for (long long i = 1; i*i <= z; i++)
		{
			if (i*i == z) r++;
			else if (z%i==0) r+=2;
		}
		printf("%d\n",r);
	}

}



int main()
{
	vector<int> pr;
	bool np[10000] = {0};
	for (int i = 2; i < 10000; i++)
	{
		if (!np[i])
		{
			pr.push_back(i);
			for (int j = i*i; j < 10000; j+= i) np[j] = true;
		}
	}
	int t = 1;
	long long a,b;
	cin>>a>>b;
	while (a > 0 && b > 0)
	{
		int dif = 0, n = 0;
		for (int i = 0; i < pr.size(); i++)
		{
			int c1 = 0;
			int c2 = 0;
			while (a%pr[i] == 0)
			{
				c1++;
				a/= pr[i];
			}
			while (b%pr[i] == 0)
			{
				c2++;
				b/= pr[i];
			}
			if (c1 > 0 || c2 > 0) n++;
			dif += abs(c1-c2);
		}
		if (a > 1 && b>1 && a==b)
		{
			n++;
		}
		else
		{
			if (a > 1)
			{
				n++;
				dif++;
			}
			if (b > 1)
			{
				n++;
				dif++;
			}
		}
		cout<<t<<". "<<n<<":"<<dif<<endl;
		t++;
		cin>>a>>b;
	}
}



int main()
{
	vector<long long> a(10000001, 0);
	for (long long i = 2; i <= 10000000; i++)
	{
		if (a[i] == 0)
		{
			a[i] = i;
			for (long long j = i*i; j <= 10000000; j+=i)
			{
				if (a[j] == 0) a[j] = i;
			}
		}
		a[i] += a[i-1];
	}
	int t;
	cin>>t;
	while (t--)
	{
		int n;
		cin>>n;
		cout<<a[n]<<endl;
	}
}



int main()
{
	int a,b,n;
	vector<pair<int,int> > c(1000001, make_pair(0,0));
	for (int i = 0; i < c.size(); i++) c[i].second = i;
	for (int i = 2; i <= 1000; i++)
	{
		if (c[i].first < 1)
		{
			for (int j = i; j <= 1000000; j+=i) {
				c[j].first++;
				while (c[j].second%i==0) c[j].second/= i;
			}
		}
	}
	for (int i = 0; i < c.size(); i++)
	{
		if (c[i].second > 1) c[i].first++;
	}
	vector<int> ans[11];
	for (int i = 1; i <c.size(); i++)
	{
		if (c[i].first > 10) continue;
		ans[c[i].first].push_back(i);
	}
	int t;
	cin>>t;
	while (t--)
	{
		cin>>a>>b>>n;
		int res = upper_bound(ans[n].begin(), ans[n].end(), b)-lower_bound(ans[n].begin(), ans[n].end(), a);
		cout<<res<<endl;
	}
}



long long dp[10010][52][3];
long long read(int idx, int j, int k){
	int sum = 0;
	while (idx > 0){
		sum += dp[idx][j][k];
		while (sum < 0) sum+=1000000;
		sum %= 1000000;
		idx -= (idx & -idx);
	}
	return sum;
}

void update(int idx ,int j, int k, long long val){
	while (idx < 10010){
		dp[idx][j][k] += val;
		while (dp[idx][j][k] < 0) dp[idx][j][k]+=1000000;
		dp[idx][j][k] %= 1000000;
		idx += (idx & -idx);
	}
}


int main()
{
	int t;
	cin>>t;
	for (int a = 1; a <= t; a++)
	{
		int n,k;
		cin>>n>>k;
		vector<pair<long long, long long> > rat(n);
		for (int i = 0; i < n; i++)
		{
			cin>>rat[i].first>>rat[i].second;
		}
		sort(rat.begin(), rat.end());
		set<long long> r;
		int c = 1;
		for (int i = 0; i < rat.size(); i++) r.insert(rat[i].second);
		map<long long, int> mp;
		for (set<long long> :: iterator i = r.begin(); i!= r.end(); i++)
		{
			mp[(*i)] = c++;
		}
		int sm = 0;
		for (int i = 0; i < 10010; i++)
		{
			for (int j = 0; j < 52; j++) dp[i][j][0] = dp[i][j][1] = dp[i][j][2] = 0;
		}
		for (int i = n-1; i >= 0; i--)
		{
			for (int j = 0; j <= k; j++)
			{
				if (i==n-1 && j==0)
				{
					update(mp[rat[i].second], 0, 0,1);
					update(mp[rat[i].second], 0, 1,1);
					update(mp[rat[i].second], 0, 2,1);
				}
				else if (i<n-1 && j > 0)
				{
					long long k3 = read(mp[rat[i].second]-1,j, 0);
					k3+=read(10009, j, 1)-read(mp[rat[i].second],j, 1);
					long long pv = read(mp[rat[i].second],j,2)-read(mp[rat[i].second]-1,j,2);
					while (k3 < 0) k3+=1000000;
					k3 %= 1000000;
					update(mp[rat[i].second], j,2,k3-pv);
					
					long long k2 = read(10009, j, 1)-read(mp[rat[i].second],j, 1);
					k2+=read(mp[rat[i].second]-1,j-1, 0);
					pv = read(mp[rat[i].second],j,1)-read(mp[rat[i].second]-1,j,1);
					while (k2 < 0) k2+=1000000;
					k2 %= 1000000;
					update(mp[rat[i].second], j,1,k2-pv);
					
					long long k1 = read(mp[rat[i].second]-1,j, 0);
					k1+=read(10009, j-1, 1)-read(mp[rat[i].second],j-1, 1);
					pv = read(mp[rat[i].second],j,0)-read(mp[rat[i].second]-1,j,0);
					while (k1 < 0) k1+=1000000;
					k1 %= 1000000;
					update(mp[rat[i].second], j,0,k1-pv);
				}
				else if (i < n-1 && j == 0)
				{
					long long k3 = 1+read(mp[rat[i].second]-1,j, 0);
					k3+=read(10009, j, 1)-read(mp[rat[i].second],j, 1);
					long long pv = read(mp[rat[i].second],j,2)-read(mp[rat[i].second]-1,j,2);
					while (k3 < 0) k3+=1000000;
					k3 %= 1000000;
					update(mp[rat[i].second], j,2,k3-pv);
					
					long long k2 = 1+read(10009, j, 1)-read(mp[rat[i].second],j, 1);
					pv = read(mp[rat[i].second],j,1)-read(mp[rat[i].second]-1,j,1);
					while (k2 < 0) k2+=1000000;
					k2 %= 1000000;
					update(mp[rat[i].second], j,1,k2-pv);
					
					long long k1 = 1+read(mp[rat[i].second]-1,j, 0);
					pv = read(mp[rat[i].second],j,0)-read(mp[rat[i].second]-1,j,0);
					while (k1 < 0) k1+=1000000;
					k1 %= 1000000;
					update(mp[rat[i].second], j,0,k1-pv);
				}
			}
		}
		sm = read(10009, k, 2);
		while (sm < 0) sm+=1000000;
		if (k==0) sm++;
		sm %= 1000000;
		cout<<"Case "<<a<<": "<<sm<<endl;
	}
}



typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long L;
typedef vector<L> VL;
typedef vector<VL> VVL;
typedef pair<int, int> PII;
typedef vector<PII> VPII;

const L INF = numeric_limits<L>::max() / 4;

struct MinCostMaxFlow {
  int N;
  VVL cap, flow, cost;
  VI found;
  VL dist, pi, width;
  VPII dad;

  MinCostMaxFlow(int N) : 
    N(N), cap(N, VL(N)), flow(N, VL(N)), cost(N, VL(N)), 
    found(N), dist(N), pi(N), width(N), dad(N) {}
  
  void AddEdge(int from, int to, L cap, L cost) {
    this->cap[from][to] = cap;
    this->cost[from][to] = cost;
  }
  
  void Relax(int s, int k, L cap, L cost, int dir) {
    L val = dist[s] + pi[s] - pi[k] + cost;
    if (cap && val < dist[k]) {
      dist[k] = val;
      dad[k] = make_pair(s, dir);
      width[k] = min(cap, width[s]);
    }
  }

  L Dijkstra(int s, int t) {
    fill(found.begin(), found.end(), false);
    fill(dist.begin(), dist.end(), INF);
    fill(width.begin(), width.end(), 0);
    dist[s] = 0;
    width[s] = INF;
    
    while (s != -1) {
      int best = -1;
      found[s] = true;
      for (int k = 0; k < N; k++) {
        if (found[k]) continue;
        Relax(s, k, cap[s][k] - flow[s][k], cost[s][k], 1);
        Relax(s, k, flow[k][s], -cost[k][s], -1);
        if (best == -1 || dist[k] < dist[best]) best = k;
      }
      s = best;
    }

    for (int k = 0; k < N; k++)
      pi[k] = min(pi[k] + dist[k], INF);
    return width[t];
  }

  pair<L, L> GetMaxFlow(int s, int t) {
    L totflow = 0, totcost = 0;
    while (L amt = Dijkstra(s, t)) {
      totflow += amt;
      for (int x = t; x != s; x = dad[x].first) {
        if (dad[x].second == 1) {
          flow[dad[x].first][x] += amt;
          totcost += amt * cost[dad[x].first][x];
        } else {
          flow[x][dad[x].first] -= amt;
          totcost -= amt * cost[x][dad[x].first];
        }
      }
    }
    return make_pair(totflow, totcost);
  }
};

int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		int m,I;
		cin>>m>>I;
		int a[100][5];
		for (int i = 0; i < m; i++)
		{
			for (int j=0; j < 5; j++) cin>>a[i][j];
		}
		MinCostMaxFlow g = MinCostMaxFlow(m*2+2);
		
	}
}


//Problem 1
int main()
{
	string s,t;
	while (cin>>s>>t)
	{
		vector<int> a[256];
		for (int i = 0; i < t.size(); i++)
		{
			a[t[i]].push_back(i);
		}
		int in = -1;
		bool ok = true;
		for (int i = 0; i < s.size(); i++)
		{
			vector<int> ::iterator it = upper_bound(a[s[i]].begin(), a[s[i]].end(), in);
			if (it != a[s[i]].end())
			{
				in = *it;
			}
			else
				ok = false;
		}
		if (ok) cout<<"Yes"<<endl;
		else cout<<"No"<<endl;
	}
}




struct edge{int e, nxt;};
class SConCom
{
public:
	int V, E;
	vector<edge> e, er;
	vector<int> sp, spr, stk, group_num;
	int group_cnt;
	bool v[1001];
	SConCom(int v,int e)
	{
		V = v-1;
		this->e = vector<edge>(e+1);
		this->er = vector<edge>(e+1);
		sp = vector<int>(v,0);
		spr = vector<int>(v,0);
		stk = vector<int>(v,0);
		group_num = vector<int>(v);
		E=0;
	}
	void fill_forward(int x)
	{
	  int i;
	  v[x]=true;
	  for(i=sp[x];i;i=e[i].nxt){
	  if(!v[e[i].e]) fill_forward(e[i].e);
	  }
	  stk[++stk[0]]=x;
	}
	void fill_backward(int x)
	{
	  int i;
	  v[x]=false;
	  group_num[x]=group_cnt;
	  for(i=spr[x];i;i=er[i].nxt) if(v[er[i].e]) fill_backward(er[i].e);
	}
	void add_edge(int v1, int v2) //add edge v1->v2
	{
	  e [++E].e=v2; e [E].nxt=sp [v1]; sp [v1]=E;
	  er[  E].e=v1; er[E].nxt=spr[v2]; spr[v2]=E;
	}
	void SCC()
	{
	  int i;
	  stk[0]=0;
	  for (i = 0; i <= V; i++) v[i] = false;

	  for(i=1;i<=V;i++){
	 
	  if(!v[i]) fill_forward(i);
	  }
	  group_cnt=0;
	  for(i=stk[0];i>=1;i--) {
	  if(v[stk[i]]){group_cnt++; fill_backward(stk[i]);}
	  }
	}
};

int main()
{
	int p,t;
	cin>>p>>t;
	while (p > 0 ||t > 0)
	{
		SConCom *sc = new SConCom(p+1, t);
		string f,l;
		map<pair<string,string> , int> mp;
		for (int i = 0; i < p; i++)
		{
			cin>>f>>l;
			mp[make_pair(f,l)] = i+1;
		}
		for (int i = 0; i < t; i++)
		{
			cin>>f>>l;
			int x = mp[make_pair(f,l)];
			cin>>f>>l;
			int y = mp[make_pair(f,l)];
			sc->add_edge(x,y);
		}
		sc->SCC();
		cout<<sc->group_cnt<<endl;
		cin>>p>>t;
	}
}


int main()
{
	vector<pair<long long, int> > nod(1000001);
	vector<long long> n(1000000);
	for (int i = 0; i < 1000001; i++) {
		nod[i].first = 1;
		nod[i].second = i;
	}
	for (int i = 2; i < 1000001; i++)
	{
		if (nod[i].first == 1)
		{
			for (int j = i; j < 1000001; j+=i)
			{
				int cnt = 0;
				while (nod[j].second%i==0){
					nod[j].second/=i;
					cnt++;
				}
				nod[j].first *= (cnt+1);
			}
		}
	}
	n[0]= 1;
	int mx = 0;
	for (int i = 1; i < 1000000; i++)
	{
		n[i] = n[i-1] + nod[n[i-1]].first;
		if (n[i] > 1000000)
		{
			mx = i;
			break;
		}
	}
	int t;
	cin>>t;
	for (int i = 1; i <= t; i++)
	{
		long long a,b;
		cin>>a>>b;
		cout<<"Case "<<i<<": "<<upper_bound(n.begin(), n.begin()+mx, b)-lower_bound(n.begin(), n.begin()+mx, a)<<endl;
	}
}


int main()
{
	int t;
	cin>>t;
	for (int i =0; i < t; i++)
	{	
		if (i) cout<<endl;
		int m;
		cin>>m;
		int l, r;
		cin>>l>>r;
		vector<int> R(100001, 0);
		while (l!= 0 || r != 0)
		{
			R[l+50000] = max(R[l+50000], r+50000);
			cin>>l>>r;
		}
		int cnt = 0;
		int mx = 50000;
		int reach = 0;
		m+= 50000;
		vector<pair<int,int> > res;
		while (mx < m && mx > reach)
		{
			cnt++;
			int nmx = mx;
			pair<int,int> add;
			add.first = -1;
			add.second = -1;
			for (; reach <= mx; reach++)
			{
				if (nmx < R[reach])
				{
					add.first = reach-50000;
					add.second = R[reach]-50000;
					nmx = R[reach];
				}
			}
			res.push_back(add);
			mx = nmx;
		}
		if (mx >= m)
		{
			cout<<cnt<<endl;
			for (int i = 0; i < res.size(); i++) cout<<res[i].first<<" "<<res[i].second<<endl;
		}
		else cout<<0<<endl;
	}
}



int tree[2][100001];
int read(int idx, int d){
	int sum = 0;
	while (idx > 0){
		sum += tree[d][idx];
		idx -= (idx & -idx);
	}
	return sum;
}

void update(int idx ,int val, int d){
	while (idx <= 100000){
		tree[d][idx] += val;
		idx += (idx & -idx);
	}
}

int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		for (int i = 0; i < 100001; i++) tree[0][i] = tree[1][i] =0;
		int n;
		cin>>n;
		vector<int> a(n);
		for (int i = 0; i < n; i++) {
			cin>>a[i];
			update(a[i], 1, 1);
		}
		long long res = 0;
		for (int i = 0; i < n; i++)
		{
			long long lft = read(a[i], 0);
			update(a[i], -1, 1);
			update(a[i], 1, 0);
			long long right = (n-1-i)-read(a[i], 1);
			res += (right*lft);
			res += (i-lft)*(n-1-i-right);
		}
		cout<<res<<endl;
	}
}



class Node
{
public:
	Node *ch[26];
	Node()
	{
		for (int i = 0; i < 26; i++) ch[i] = NULL;
	}
	vector<int> val;
	int i;
	void add(int i)
	{
		val.push_back(i);
	}
};
vector<string> a;
Node * st;
void build(Node * i, int k)
{
	if (i == NULL) return;
	i->i = k;
	for (int j = 0; j < i->val.size(); j++)
	{
		if (k >= a[i->val[j]].size()) continue;
		
		char x = a[i->val[j]][i->i];
		if (i->ch[x - 'a'] == NULL) i->ch[x - 'a'] = new Node;
		i->ch[x - 'a']->add(i->val[j]);
	}
	for (int j = 0; j < 26; j++) build(i->ch[j], k+1);
}


class Mat
{
	public:
		Mat()
		{
			for (int i=0; i < 3; i++) for (int j =0; j < 3; j++) arr[i][j] = 0;
		}
		Mat(const Mat &B)
		{
			for (int i=0; i < 3; i++) for (int j =0; j < 3; j++) arr[i][j] = B.arr[i][j];
		}
		long long arr[3][3];
		Mat mul(Mat B)
		{
			Mat C;
			for(int i=0;i<3;i++){
			for(int j=0;j<3;j++){
					C.arr[i][j]=0;
					for(int k=0;k<3;k++){
			C.arr[i][j]=C.arr[i][j]+(arr[i][k] * B.arr[k][j]);
			C.arr[i][j] %= 1000000007;
			}
			}
			}
			return C;
		}
		Mat pow(Mat A, int p)
		{
			if (p==1) return A;
			if (p%2==0)
			{
				Mat B = pow(A, p/2);
				return B.mul(B);
			}
			else return A.mul(pow(A, p-1));
		}
};

int main()
{
	Mat fib;
	fib.arr[0][0] = 0;
	fib.arr[0][1] = 1;
	fib.arr[1][0] = 1;
	fib.arr[1][1] = 1;
	fib.arr[1][2] = 0;
	fib.arr[2][0] = 1;
	fib.arr[2][1] = 1;
	fib.arr[2][2] = 1;
	int t;
	cin>>t;
	while (t--)
	{
		int n,m;
		cin>>n>>m;
		long long x,y;
		if (n <= 3)
		{
			x = n-1;
			if (x < 0) x++;
		}
		else
		{
			Mat B = fib.pow(fib, n-3);
			long long arr[3] = {1,1,2};
			x = B.arr[2][0]*arr[0]+B.arr[2][1]*arr[1]+B.arr[2][2]*arr[2];
			x%= 1000000007;
		}
		if (m <= 2)
		{
			y = m;
		}
		else
		{
			Mat B = fib.pow(fib, m-2);
			long long arr[3] = {1,1,2};
			y = B.arr[2][0]*arr[0]+B.arr[2][1]*arr[1]+B.arr[2][2]*arr[2];
			y%= 1000000007;
		}
		long long z = y-x;
		while (z < 0) z += 1000000007;
		z%=1000000007;
		cout<<z<<endl;
	}
}


long long pw(long long a, int p)
{
	if (p==0) return 1;
	if (p%2==0)
	{
		long long r = pw(a, p/2);
		if (r > (1ll<<62ll)/r) return (1ll<<62ll);
		return r*r;
	}
	else
	{
		long long r = pw(a, p-1);
		if (a > (1ll<<62ll)/r) return (1ll<<62ll);
		return a*r;
	}
}

long long srch(long long val, int k, bool up)
{
	long long lo = 2;
	long long hi = 1000000000000000000ll;
	long long mid;
	while (lo <= hi)
	{
		mid = lo+(hi-lo)/2;
		long long r = pw(mid, k);
		if (r > val)
		{
			hi = mid-1;
		}
		else if (r < val) lo = mid+1;
		else
		{
			return mid;
		}
	}
	if (up) return hi;
	return lo;
}

int main()
{
	long long a,b;
	cin>>a>>b;
	
	while (a>0 && b>0)
	{
		long long res[64] = {0};
		for (int i = 62; i>= 1; i--)
		{
			long long st = srch(a, i, false);
			long long end = srch(b, i, true);
			res[i] += max(end-st+1, 0ll);
			for (int j = i+i; j <= 62; j+=i)
			{
				res[i] -= res[j];
			}
		}
		long long r = 0;
		for (int i = 1; i < 63; i++) r+= i*res[i];
		cout<<r<<endl;
		cin>>a>>b;
	}
}


int fi(int n) 
{ 
       int result = n; 
       for(int i=2;i*i <= n;i++) 
       { 
         if (n % i == 0) result -= result / i; 
         while (n % i == 0) n /= i; 
       } 
       if (n > 1) result -= result / n; 
       return result; 
} 

int main()
{
	int t;
	scanf("%d",&t);
	while (t--)
	{
		int n;
		scanf("%d",&n);
		printf("%d\n",fi(n));
	}
}




long long P;
class Mat
{
	public:
		Mat()
		{
			for (int i=0; i < 2; i++) for (int j =0; j < 2; j++) arr[i][j] = 0;
		}
		Mat(const Mat &B)
		{
			for (int i=0; i < 2; i++) for (int j =0; j < 2; j++) arr[i][j] = B.arr[i][j];
		}
		long long arr[2][2];
		Mat mul(Mat B)
		{
			Mat C;
			for(int i=0;i<2;i++){
			for(int j=0;j<2;j++){
					C.arr[i][j]=0;
					for(int k=0;k<2;k++){
			C.arr[i][j]=C.arr[i][j]+(arr[i][k] * B.arr[k][j]);
			C.arr[i][j] %= P;
			}
			}
			}
			return C;
		}
		Mat pow(Mat A, int p)
		{
			if (p==0)
			{
				Mat res;
				res.arr[0][0] = 1;
				res.arr[0][1] = 0;
				res.arr[1][0] = 0;
				res.arr[1][1] = 1;
				return res;
			}
			if (p==1) return A;
			if (p%2==0)
			{
				Mat B = pow(A, p/2);
				return B.mul(B);
			}
			else return A.mul(pow(A, p-1));
		}
};


long long pw(long long a, int p)
{
	if (p==0) return 1;
	if (p%2==0)
	{
		long long r = pw(a, p/2);
		return (r*r)%P;
	}
	else
	{
		long long r = pw(a, p-1);
		return (a*r)%P;
	}
}

int main()
{
	int t;
	cin>>t;
	for (int i = 1; i <= t; i++)
	{
		long long a,n,m;
		cin>>a>>n>>P>>m;
		Mat mat;
		long long ap = pw(a, P-2);
		mat.arr[0][0] = ap;
		mat.arr[0][1] = 0;
		mat.arr[1][0] = ap;
		mat.arr[1][1] = 1;
		
		if (n==0)
		{
			cout<<"Case "<<i<<": "<<m%P<<endl;
			continue;
		}
		Mat mat2 = mat.pow(mat, n);
		long long s = mat2.arr[1][0] + mat2.arr[1][1];
		cout<<"Case "<<i<<": "<<((m%P)*(s))%P<<endl;
	}
}


long long P;
class Mat
{
	public:
		Mat()
		{
			for (int i=0; i < 3; i++) for (int j =0; j < 3; j++) arr[i][j] = 0;
		}
		Mat(const Mat &B)
		{
			for (int i=0; i < 3; i++) for (int j =0; j < 3; j++) arr[i][j] = B.arr[i][j];
		}
		long long arr[3][3];
		Mat mul(Mat B)
		{
			Mat C;
			for(int i=0;i<3;i++){
			for(int j=0;j<3;j++){
					C.arr[i][j]=0;
					for(int k=0;k<3;k++){
			C.arr[i][j]=C.arr[i][j]+(arr[i][k] * B.arr[k][j]);
			}
			C.arr[i][j] %= P;
			}
			}
			return C;
		}
		Mat pow(Mat &A, int p)
		{
			if (p==0)
			{
				Mat res;
				res.arr[0][0] = 1;
				res.arr[0][1] = 0;
				res.arr[0][2] = 0;
				res.arr[1][0] = 0;
				res.arr[1][1] = 1;
				res.arr[1][2] = 0;
				res.arr[2][0] = 0;
				res.arr[2][1] = 0;
				res.arr[2][2] = 1;
				return res;
			}
			if (p==1) return A;
			if (p%2==0)
			{
				Mat B = pow(A, p/2);
				return B.mul(B);
			}
			else return A.mul(pow(A, p-1));
		}
};

int main()
{
	P = 1000000007;
	Mat res;
	res.arr[0][0] = 2;
	res.arr[0][1] = 3;
	res.arr[0][2] = 0;
	res.arr[1][0] = 3;
	res.arr[1][1] = 5;
	res.arr[1][2] = 0;
	res.arr[2][0] = 2;
	res.arr[2][1] = 3;
	res.arr[2][2] = 1;
	int t;
	scanf("%d",&t);
	while (t--)
	{
		int n;
		scanf("%d",&n);
		if (n == 0)
		{
			printf("0\n");
		}
		else
		{
			Mat r = res.pow(res, n-1);
			long long ans = r.arr[2][0]*2 + r.arr[2][1]*3 + r.arr[2][2]*2;
			ans%= P;
			printf("%d\n",ans);
		}
	}
}


int main()
{
	int k;
	cin>>k;
	string s;
	cin>>s;
	vector<int> a(s.size(), 0);
	for (int i = 0; i < s.size(); i++)
	{
		if (s[i] == '1') a[i] = 1;
		if (i) a[i] += a[i-1];
	}
	long long rs = 0;
	for (int i = 0; i < a.size(); i++)
	{
		int st = 0;
		if (i) st = a[i-1];
		vector<int> :: iterator it1, it2;
		it2= upper_bound(a.begin(), a.end(), st+k) ;
		it1 = lower_bound(a.begin(), a.end(), st+k);
		rs += min(it2-it1, it2-(a.begin()+i));
	}
	cout<<rs<<endl;
}
*/

int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		int n,p;
		cin>>n>>p;
		vector<vector<int> > g(n, vector<int>(n, 0));
		int z = n;
		for (int i = 0; i < n; i++)
		{
			g[i][(i+1)%z] = 1;
			g[(i+1)%z][i] = 1;
			g[i][(i+2)%z] = 1;
			g[(i+2)%z][i] = 1;
		}
		int rem = p;
		for (int i = 0; i < n; i++)
		{
			for (int j = i+1; j < n; j++)
			{
				if (rem > 0 &&!g[i][j])
				{
					g[i][j] = 1;
					g[j][i] = 1;
					rem--;
				}
			}
		}
		for (int i =0; i < n; i++)
		{
			for (int j = i+1; j < n; j++)
			{
				if (g[i][j] == 1) cout<<i+1<<" "<<j+1<<endl;
			}
		}
		
	}	
}