// In the name of god
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <assert.h>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <bitset>
#include <unordered_map>
#define sqr(a) ((a)*(a))
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
 
const long long INF = (long long)1e18;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)1e6 + 227 + 1;    
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-9;

long long bin_pow(long long a, long long b) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2);
    ans = ans * ans % MOD;
    if(b % 2) ans = ans * a % MOD;
    return ans;
}

struct tree {
    struct node {
        int l;
        int r;
        int k;
        int mn;
        int push;

        node() {
            l = r = -1;
            mn = push = k = 0;
        }
    } ;

    vector<node> t;

    tree() {
        t.push_back(node());
    }

    void push(int v) {
        if(t[v].l == -1) {
            t[v].l = t.size();
            t.push_back(node());
        }
        if(t[v].r == -1) {
            t[v].r = t.size();
            t.push_back(node());
        }

        t[t[v].l].push += t[v].push;
        t[t[v].l].mn += t[v].push;
        t[t[v].l].k += t[v].push;

        t[t[v].r].push += t[v].push;
        t[t[v].r].mn += t[v].push;
        t[t[v].r].k += t[v].push;

        t[v].push = 0;
    }

    void inc(int v, int l, int r, int _l, int _r) {
        if(_l > _r) return;
        if(l == _l && r == _r) {
            t[v].k++;
            t[v].mn++;
            t[v].push++;

            return;
        }

        push(v);

        int mid = (l + r) / 2;
        inc(t[v].l, l, mid, _l, min(_r, mid));
        inc(t[v].r, mid + 1, r, max(_l, mid + 1), _r);

        t[v].mn = min(t[t[v].l].mn, t[t[v].r].mn);
    }

    void inc(int l, int r) {
        inc(0, 0, (int)1e9, l, r);
    }

    int get(int v, int l, int r, int _l, int _r) {
        if(_l > _r) return INFINT;
        if(l == _l && r == _r) {
            return t[v].mn;
        }

        push(v);

        int mid = (l + r) / 2;
        return min(get(t[v].l, l, mid, _l, min(mid, _r)), get(t[v].r, mid + 1, r, max(mid + 1, _l), _r));
    }

    int get(int l, int r) {
        return get(0, 0, (int)1e9, l, r);
    }
} q;

int main() {
    // freopen(".in", "r", stdin);

    int n; cin >> n;

    vector<int> l(n), r(n);
    for(int i = 0; i < n; i++) {
        l[i] = next_int<int>();
        r[i] = next_int<int>();
    
        q.inc(l[i], r[i]);
    }

    for(int i = 0; i < n; i++) {
        if(q.get(l[i], r[i]) > 1) {
            cout << i + 1 << "\n";
            return 0;
        }
    }

    puts("-1");
}