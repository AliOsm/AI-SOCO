#include <bits/stdc++.h>
#include <ctime>

#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")

using namespace std;

#define space ' '
#define enter "\n"
#define fi first
#define se second
#define mp make_pair
#define ALL(x) x.begin(), x.end()
#define bits(x) __builtin_popcount(x)
#define bitsll(x) __builtin_popcountll(x)
#define crr(a) cerr << #a << " = " << a << "\n"
#define precision(a) fixed << setprecision(a)

typedef long long ll;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<int, int> pii;
typedef set<int> si;
typedef map<int, int> mii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<pii> vii;

inline bool isDigit(char c) {
    return '0' <= c && c <= '9';
}

template<class T>
inline T sqr(T x) {
    return x * x;
}

template<class T>
inline bool isSquare(T x) {
    T y = sqrt(x + 0.5);
    return (y * y) == x;
}

template<class T1, class T2>
inline T1 gcd(T1 a, T2 b) {
    return b ? gcd(b, a % b) : a;
}

template<class T1, class T2>
inline T1 eqMin(T1 &x, const T2 &y) {
    if (T1(y) < x)
        return x = y;
    return x;
}

template<class T1, class T2>
inline T1 eqMax(T1 &x, const T2 &y) {
    if (T1(y) > x)
        return x = y;
    return x;
}

template<class T1, class T2>
inline T1 min(const T1 &x, const T2 &y) {
    return x < (T1) y ? x : (T1) y;
}

template<class T1, class T2>
inline T1 max(T1 &x, const T2 &y) {
    return x > (T1) y ? x : (T1) y;
}

template<typename T>
inline T getint() {
    T x = 0, p = 1;
    char ch;
    do {
        ch = getchar();
    } while (ch <= ' ');
    if (ch == '-')
        p = -1, ch = getchar();
    while (ch >= '0' && ch <= '9')
        x = x * 10 + ch - '0', ch = getchar();
    return x * p;
}

template<class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &p) {
    return os << '(' << p.fi << ", " << p.se << ')';
}

template<typename T>
auto operator<<(ostream &os, const T &v) -> decltype(v.begin(), v.end(), declval<ostream &>()) {
    os << '{';
    bool was = false;
    for (const auto &x : v) {
        if (was)
            os << ", ";
        was = true;
        os << x;
    }
    os << '}';
    return os;
}

template<size_t sz>
ostream &operator<<(ostream &os, const bitset<sz> &bit) {
    os << '/';
    for (int i = 0; i < sz; i++)
        os << bit[i];
    os << '\\';
    return os;
}

const long double PI = acos(-1);
const long double EPS = 1e-8;
const int INF = (int) 2e9;
const ll LINF = (ll) 2e18;
const int MOD = (int) 1e9 + 7;
const int MAXN = (int) 1 << 7;

int n, m, level;
long double rel[MAXN][MAXN];
long double p[10][MAXN], dp[10][MAXN];

void rec (int lvl, int l, int r) {
    if (lvl == n) {
        return;
    }

    int md = (l + r) >> 1;

    rec(lvl + 1, l, md);
    rec(lvl + 1, md + 1, r);

    for (int i = l; i <= md; i++) {
        for (int j = md + 1; j <= r; j++) {
            p[lvl][i] += p[lvl + 1][i] * p[lvl + 1][j] * rel[i][j];
        }
    }
    for (int i = md + 1; i <= r; i++) {
        for (int j = l; j <= md; j++) {
            p[lvl][i] += p[lvl + 1][i] * p[lvl + 1][j] * rel[i][j];
        }
    }

    for (int i = l; i <= md; i++) {
        long double ma = -1;
        for (int j = md + 1; j <= r; j++) {
            eqMax(ma, dp[lvl + 1][i] + dp[lvl + 1][j] + p[lvl][i] * (1 << (n - lvl - 1)));
        }
        dp[lvl][i] = ma;
    }
    for (int i = md + 1; i <= r; i++) {
        long double ma = -1;
        for (int j = l; j <= md; j++) {
            eqMax(ma, dp[lvl + 1][i] + dp[lvl + 1][j] + p[lvl][i] * (1 << (n - lvl - 1)));
        }
        dp[lvl][i] = ma;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin >> n;
    m = 1 << n;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < m; j++) {
            cin >> rel[i][j], rel[i][j] /= 100;
        }
    }
    for (int i = 0; i < m; i++) {
        p[n][i] = 1;
    }

    long double ma = -1;
    rec(0, 0, m - 1);
    for (int i = 0; i < m; i++) {
        eqMax(ma, dp[0][i]);
    }
    
    cout << precision(10) << ma;
}