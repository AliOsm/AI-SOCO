

// ~/BAU/ACM-ICPC/Teams/A++/BlackBurn95
// ~/sudo apt-get Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

const int N = 1000;
const int offset = N;

int n, k;
char s[N + 1];
int dp[N][2 * N], p[N][2 * N];

int calc(int i, int t) {
	if (i == n) {
		if (abs(t) == k) return 1;
		return 0;
	}

	if (abs(t) == k) return 0;

	int &r = dp[i][t + offset];

	if (r != -1)
		return r;

	if (s[i] != '?') {
		p[i][t + offset] = 0;
		if (s[i] == 'W') r = calc(i + 1, t + 1);
		else if (s[i] == 'L') r = calc(i + 1, t - 1);
		else r = calc(i + 1, t);
	}
	else {
		r = calc(i + 1, t + 1);
		if (r) {
			p[i][t + offset] = 1;
			return r;
		}

		r = calc(i + 1, t - 1);
		if (r) {
			p[i][t + offset] = 2;
			return r;
		}

		r = calc(i + 1, t);
		p[i][t + offset] = 3;
	}

	return r;
}

string print(int i, int t) {
	if (i == n || abs(t) == k) return "";

	if (p[i][t + offset] == 0) return "X"+ print(i + 1, t + (s[i] == 'W' ? 1 : (s[i] == 'L' ? -1 : 0)));

	if (p[i][t + offset] == 1) return "W" + print(i + 1, t + 1);

	if (p[i][t + offset] == 2) return "L" + print(i + 1, t - 1);

	return "D" + print(i + 1, t);
}

int main() {
	std::ios::sync_with_stdio(false);

#ifdef LOCAL
	freopen("input.txt", "r", stdin);
#endif

	scanf("%d%d", &n, &k);
	scanf("%s", s);

	memset(dp, -1, sizeof(dp));

	int res = calc(0, 0);

	if (res) {
		string ans = print(0, 0);
		for (int i = 0; i < ans.size(); i++)
			if (ans[i] == 'X') ans[i] = s[i];
		puts(ans.c_str());
	}
	else puts("NO");

	return 0;
}