#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int Max = 1e5+3, Log = 20+1;
vector<int> adj[Max];
int memo[Max][Log];
int depth[Max];

void dfs(int node, int prev, int Depth = 0) {
    depth[node] = Depth;
    memo[node][0] = prev;
    for(int i = 1; i < Log; ++i) {
        memo[node][i] = memo[memo[node][i-1]][i-1];
    }
    for(int to : adj[node]) {
        if(to == prev) continue;
        dfs(to, node, Depth+1);
    }
}

int LCA(int x, int y) {
    if(depth[x] < depth[y]) swap(x,y);
    int diff = depth[x] - depth[y];
    for(int k = Log-1; k >= 0; --k) {
        if(diff&(1<<k)) {
            x = memo[x][k];
        }
    }
    for(int k = Log-1; k >= 0; --k) {
        if(memo[x][k] != memo[y][k]) {
            x = memo[x][k];
            y = memo[y][k];
        }
    }
    if(x != y) x = memo[x][0];
    return x;
}

ll ccw(pair<ll, ll> a, pair<ll, ll> b, pair<ll, ll> c) {
	ll dx1 = b.first - a.first;
	ll dy1 = b.second - a.second;
	ll dx2 = c.first - a.first;
	ll dy2 = c.second - a.second;
	return 1LL * dx1 * dy2 - 1LL * dy1 * dx2;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin >> n;
    vector<pair<ll, ll> > arr(n);
    for(int i = 0; i < n; ++i) {
        cin >> arr[i].first >> arr[i].second;
    }
    vector<pair<int, pair<ll, ll> > > st;//index, x,y 
    for(int i = n-1; i >= 0; --i) {
        while(st.size() >= 2 && ccw(arr[i], st[(int)st.size()-2].second, st.back().second) < 0) st.pop_back();
        if(st.size()) {
            adj[i].push_back(st.back().first);
            adj[st.back().first].push_back(i);
        }
        st.push_back({i, arr[i]});
    }
    dfs(n-1, n-1);
    int q;
    cin >> q;
    int u, v;
    while(q--) {
        cin >> u >> v;
        cout << LCA(u-1, v-1) + 1 << ' ';
    }
    cout << '\n';
    return 0;
}































