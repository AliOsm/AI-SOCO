#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define oset tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 

#define ll long long

#ifdef sarthak
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
int begtime = clock();
#else
#define trace(...)
#endif

#ifndef sarthak
    #pragma GCC optimize("Ofast")
    #pragma GCC optimize("unroll-loops")
    // #pragma GCC target ("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#endif

#define foreach(it,ar) for (auto it = ar.begin(); it != ar.end(); it++)
#define fort(i,v) for(auto i:v)
#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) rep(i,sizeof(ar)/sizeof(ll)) ar[i]=val
#define fill2(ar,val) rep(i,sizeof(ar)/sizeof(ar[0])) rep(j,sizeof(ar[0])/sizeof(ll)) ar[i][j]=val
#define fill0(ar) memset(ar,0,sizeof(ar))
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%lld",&x)
#define sd2(x,y) scanf("%d %d",&x,&y)
#define slld2(x,y) scanf("%lld %lld",&x,&y)
#define pd(x) printf("%d\n",x)
#define plld(x) printf("%lld\n",x)
#define pd2(x,y) printf("%d %d\n",x,y)
#define plld2(x,y) printf("%lld %lld\n",x,y)
#define all(ar) ar.begin(), ar.end()
#define endl '\n'
#define sz(x) (int)x.size()
#define len(x) (int)x.length()

typedef pair<ll, ll> ii;
typedef pair<ii, ll> iii;
typedef vector<ii> vii;
typedef vector<ll> vi;

#define INF 1000000000000000000
#define PI 3.14159265358979323846L

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rngb(chrono::steady_clock::now().time_since_epoch().count()); // can give negative values too

ll po[300000];
ll mod = 1000000007;

ll modexp(ll x, ll y, ll p)
{
    ll res = 1;   
    x = x % p;  
    while (y > 0)
    {
        if (y & 1)    
            res = (res*x) % p;
        y = y>>1;     
        x = (x*x) % p; 
    }
    return res;
}

void pre()
{
    po[0] = 1;
    fr(i,1,250000)
    {
        po[i] = po[i-1]*2;
        po[i] %= mod;
    }
}

struct node 
{
    ll l,r;
    ll has;
    ll nu;
    ll len;

    node(){};
    node(ll x)
    {
        l = r = has = x;
        nu = 0;
        len = 1;
    }

    bool operator==(node n)
    {
        if(this->l == n.l && this->r== n.r && this->nu==n.nu && this->has==n.has && this->len==n.len)
            return 1;
        return 0;
    }
};

node seg[4*200100];

node merge(node a, node b)
{
    node c;
    c.len = a.len+b.len;
    c.l = a.l;
    c.r = b.r;
    c.nu = a.nu+b.nu;

    c.has = a.has + po[a.len]*b.has;
    c.has %= mod;

    if(a.len==0)
        c.l = b.l;
    if(b.len==0)
        c.r = a.r;

    if(a.r==1 && b.l==1)
    {
        c.len = c.len-2;
        c.nu++;
        c.has = a.has;
        c.has = (c.has - po[a.len-1] + mod)%mod;
        ll xx = (b.has-1+mod)%mod;
        ll inv = modexp(2ll,mod-2,mod);
        xx = xx*inv;
        xx %= mod;

        xx = xx*po[a.len-1];
        xx %= mod;
        c.has += xx;
        c.has %= mod;

        if(a.len==1)
            c.l = 0;
        if(b.len==1)
            c.r = 0;
    }

    return c;
}

void update(ll st, ll en, ll ind, ll i, ll x)
{
    if(i>en || i<st)
        return;
    if(i==en && i==st)
    {
        // trace(i);
        seg[ind] = node(x);
        return;
    }

    ll mid = (st+en)/2;
    update(st,mid,2*ind,i,x);
    update(mid+1,en,2*ind+1,i,x);

    seg[ind] = merge(seg[2*ind],seg[2*ind+1]);
}

node query(ll st, ll en, ll ind, ll il, ll ir)
{
    if(il>en || ir<st)
    {
        node xx = node(0);
        xx.len = 0;
        return xx;
    }

    if(il<=st && en<=ir)
    {
        return seg[ind];
    }

    ll mid = (st+en)/2;

    return merge(query(st,mid,2*ind,il,ir),query(mid+1,en,2*ind+1,il,ir));
}

void solve()
{
    pre();
    ll n;
    cin >> n;

    string t;
    cin >> t;

    fr(i,1,4*n+10)
    {
        seg[i] = node(0);
        seg[i].len = 0;
    }

    fr(i,1,n)
    {
        ll x = 0;
        if(t[i-1]=='1')
            x = 1;
        update(1,n,1,i,x);
        // trace(i);
        // trace(z.nu);
    }

    node z = query(1,n,1,1,2);
    ll q;
    cin >> q;

    while(q--)
    {
        ll a,b,c;
        cin >> a >> b >> c;
        ll d = a+c-1;
        ll e = b+c-1;

        node fir = query(1,n,1,a,d);
        node sec = query(1,n,1,b,e);

        // trace(fir.nu);
        if(fir==sec)
        {
            cout << "Yes" << endl;
        }
        else
        {
            cout << "No" << endl;
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout << fixed;
    cout << setprecision(10);
    #ifdef sarthak
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll t = 1;
    // cin >> t;
    while(t--)
    {
        solve();
    }

    #ifdef sarthak
    cerr << "Time elapsed: " << (clock() - begtime)*1000/CLOCKS_PER_SEC << " ms\n\n";
    #endif
}
