#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>
#include <complex>

#define ll long long
#define ld long double
#define ull unsigned ll
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()

using namespace std;

const int nax = 5005;

int a[nax];
int b[nax];
int c[nax];
vector<int>g[nax];
int can[nax][nax];
int have[nax];

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("dictionary.in", "r", stdin);
	//freopen("dictionary.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cout.precision(20); cout.setf(ios::fixed);
	int n, m, k;
	cin >> n >> m >> k;

	for (int i = 0; i < n; i++) {
		cin >> a[i] >> b[i] >> c[i];
	}

	for (int i = 0; i < n; i++) {
		can[i][i] = 1;
	}

	for (int i = 0; i < m; i++) {
		int u, v;
		cin >> u >> v;
		u--, v--;
		can[u][v] = 1;
	}

	int cur = k;
	for (int i = 0; i < n; i++) {
		if (cur < a[i]) {
			cout << -1;
			return 0;
		}

		cur += b[i];
	}

	cur = k;
	for (int i = 0; i < n; i++) {
		cur += b[i];
		int l = 0, r = cur;
		while (l < r) {
			int mid = (l + r) / 2 + 1;
			int tmp = cur - mid;
			int ok = 1;
			for (int j = i + 1; j < n; j++) {
				if (tmp < a[j]) {
					ok = 0;
					break;
				}

				tmp += b[j];
			}

			if (ok) l = mid;
			else r = mid - 1;
		}

		have[i] = l;
	}
	
	vector<pair<int, int>>tmp(n);
	for (int i = 0; i < n; i++) {
		tmp[i].first = c[i];
		tmp[i].second = i;
	}

	sort(rall(tmp));


	int ans = 0;
	for (int i = 0; i < n; i++) {
		int v = tmp[i].second;
		for (int j = n - 1; j >= 0; j--) {
			if (can[j][v] && have[j] > 0) {
				int ok = 1;
				for (int k = j; k < n; k++) {
					if (have[k] == 0) {
						ok = 0;
						break;
					}
				}

				if (!ok) continue;
				ans += tmp[i].first;
				for (int k = j; k < n; k++) {
					have[k]--;
				}
				break;
			}
		}
	}

	cout << ans;
	return 0;
}