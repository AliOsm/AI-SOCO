#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>
#include <random>
#include <bitset>
#include <iomanip>


typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define debug(x) cout << #x << " = "  << x << endl

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

const tint maxP = 2097152;
const tint maxN = 131072;
tint p[maxP+1] = {1,1};

struct Arista
{
	tint u,v,w;
	Arista (tint uu, tint vv, tint ww)
	{
		u = uu;
		v = vv;
		w = ww;
	}
};
const tint INFINITO = 999999999;

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	for (tint i = 1; i <= maxP; ++i)
		if (p[i] == 1)
			for (tint j = i; j <= maxP; j += i)
				p[j] = i;
	
	tint n,m;
	while (cin >> n >> m)
	{
		
		
		vector<tint> indy (n);
		forn(i,n)
			indy[i] = i+1;
		swap(indy[1],indy[n-1]);
		vector<Arista> ans;
		tint suma = 0, aristaInicial = 2;
		forn(i,n-1)
		{
			forsn(x,aristaInicial,maxP)
			{
				if ( p[(suma + x)] == (suma + x) )
				{
					suma += x;
					ans.push_back(Arista(indy[i],indy[i+1],x));
					break;
				}
			}
		}
		tint usadas = n-1;
		forn(i,n)
		{
			forsn(j,i+2,n)
			{
				if (usadas == m)
					break;
				ans.push_back(Arista(indy[i],indy[j],INFINITO));
				usadas++;
			}
			if (usadas == m)
				break;
		}
		cout << "2 " << suma << "\n";
		forn(i,m)
			cout << ans[i].u << " " << ans[i].v << " " << ans[i].w << "\n";
	}
	return 0;
}



