
// In the name of God
// Code by: mrMaster

#include <bits/stdc++.h>

using namespace std;

inline int in(){int x; scanf("%d" , &x); return x;}
#define bpc __builtin_popcount
#define blz __builtin_clz
#define btz __builtin_ctz
#define pb push_back
#define Size(x) ((x).size())
#define boost ios_base :: sync_with_stdio(false) , cin.tie(0), cout.tie(0)
#define FOR(i,j,k) for(int i=j;i<k;++i)
#define endl '\n'

typedef long long ll;
typedef long double ld;
typedef pair<int,int>pii;

const int INF = 1e9 + 10;
const ll LINF = 1000ll*1000*1000*1000*1000*1000 + 100;
const int MN = 1e5 + 10;
const int MOD = 1e9 + 7;

int n,m;
vector<int>adj[MN] , rev[MN];
int cost[MN];
vector<int>topol;
vector<int>comp[MN];
int sz[MN] , mn[MN];
bool mk[MN];

void input()
{
	cin >> n;
	for(int i=0;i<n;++i) cin >> cost[i];
	cin >> m;
	for(int i=0;i<m;++i){
		int a,b;
		cin >> a >> b;
		--a, --b;
		adj[a].pb(b) , rev[b].pb(a);
	}	
}

void dfs_front(int s)
{
	mk[s] = true;
	for(int i=0;i<Size(adj[s]);++i){
		if(!mk[adj[s][i]]) dfs_front(adj[s][i]);
	}
	topol.pb(s);
}

void dfs_back(int s, int c)
{
	mk[s] = true;
	comp[c].pb(s);
	for(int i=0;i<Size(rev[s]);++i){
		if(!mk[rev[s][i]]) dfs_back(rev[s][i] , c);
	}
}

ll ans, W;
int cnt;

void Out()
{
	for(int i=0;i<cnt;++i){
		cout <<i << " : ";
		for(int j=0;j<Size(comp[i]);++j)
			cout << comp[i][j] << ' ';
		cout << endl;
	}
}

int main()
{
	boost;
	input();
	for(int i=0;i<n;++i)
		if(!mk[i]) dfs_front(i);
	memset(mk , 0 , sizeof mk);
	for(int i=Size(topol)-1;i>=0;--i)
		if(!mk[topol[i]]) dfs_back(topol[i] , cnt++);
	W = 1;
	fill(mn , mn+n , INF);
	for(int i=0;i<cnt;++i)
		for(int j=0;j<Size(comp[i]);++j)
			mn[i] = min(mn[i] , cost[comp[i][j]]);
	for(int i=0;i<cnt;++i){
		for(int j=0;j<Size(comp[i]);++j)
			if(cost[comp[i][j]] == mn[i]) ++sz[i];
		ans += mn[i];
		W *= sz[i]; W %= MOD;
	}
	cout << ans << ' ' << W << endl;
	return 0;
}


