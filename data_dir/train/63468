#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::less<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = /*1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-8;
const int N = 1'000'000;
const int LOGN = 19;

int n, m, k;

int ask(int v, int u) {
  cout << "? " << v + 1 << ' ' << u + 1 << endl;
  char r;
  cin >> r;
  return r == '<';
}

void solve(int) {
  cin >> n;
  vector<int> a(n - 1), lose(n - 1);
  for (int i = 0; i < n - 1; ++i) {
    for (int j = i + 1; j < n - 1; ++j) {
      if (ask(i, j)) {
        ++lose[i];
      } else {
        ++lose[j];
      }
    }
  }
  iota(begin(a), end(a), 0);
  sort(begin(a), end(a), [&] (int a, int b) { return lose[a] < lose[b]; });
  int low = n - 1, high = n;
  if (!ask(low, high)) {
    swap(low, high);
  }
  for (int i = n + 1; i < n + n; ++i) {
    if (ask(low, a.back())) {
      if (ask(i, high)) {
        low = i;
      } else {
        low = high;
        high = i;
      }
    } else {
      int pos = (int)a.size() - 1;
      for (; pos >= 0 && ask(a[pos], i); --pos);
      a.insert(begin(a) + pos + 1, i);
      a.pop_back();
    }
  }
  ask(a.back(), low);
  cout << '!' << endl;
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
