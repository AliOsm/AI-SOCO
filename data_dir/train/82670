// --------------------<optimizations>--------------------
#pragma GCC optimize("O3")

//(UNCOMMENT WHEN HAVING LOTS OF RECURSIONS)\
#pragma comment(linker, "/stack:200000000")
//(UNCOMMENT WHEN TRYING TO BRUTEFORCE WITH A LOT OF LOOPS)\
#pragma GCC optimize("unroll-loops")

// -------------------</optimizations>--------------------
#include<bits/stdc++.h>
using namespace std;
#define int long long
//#define d long double
#define pii pair<int,int>
#define pb push_back
#define pf push_front
#define cases int tc;cin>>tc;while(tc--)
#define N 200003
#define M 103
#define inf LLONG_MAX
#define SPEED ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
//int mod=1e9+7;
//int mod=998244353;
int n,m,k[N];
unordered_map<int,vector<int>> dt,td;

bool good(int x)
{
    int i,j,money=0;
    int kc[N];
    for(i=1;i<=n;++i)
        kc[i]=k[i];
    
    for(i=1;i<=x;++i)
    {
        ++money;
        for(auto it:dt[i])
        {
            auto it2=upper_bound(td[it].begin(),td[it].end(),x);
            if(td[it].size()==0 or (it2==td[it].begin()))                //gadha hai tu 
                continue;
            --it2;
            if(*it2==i)
            {
                int mi=min(money,kc[it]);
                money-=mi;
                kc[it]-=mi;
            }
            if(money==0)
                break;
        }
    }
    
    for(i=1;i<=n;++i)
        money-=2*kc[i];
    
    return (money>=0);    
}

signed main()
{
    SPEED

    td.clear(),dt.clear();
    cin>>n>>m;
    int i,j;
    for(i=1;i<=n;++i)
        cin>>k[i];
    
    int d,t;
    for(i=1;i<=m;++i)
    {
        cin>>d>>t;
        dt[d].pb(t);            
        td[t].pb(d);
    }
    
    for(i=1;i<=n;++i)
        sort(td[i].begin(),td[i].end());
    
    int s=1,e=4e5,mid;
    while(s<=e)
    {
        mid=s+ (e-s)/2;
        if(mid==s)
            break;
        if(good(mid))
            e=mid;
        else
            s=mid+1;
    }
    cout<<(good(mid)?mid:mid+1LL);

    return 0;
}
