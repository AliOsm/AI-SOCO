#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <vector>
#include <queue>
#include <memory.h>
#include <deque>
#include <iomanip>
#include <utility>
#include <string>
#include <ext/rope>
#include <iterator>

using namespace std;
using namespace __gnu_cxx;

#define pb push_back
#define mp make_pair
#define F first
#define S second
#define sz size
#define scf scanf
#define prf printf       
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define gcd(a,b) __gcd(a,b)
#define print(x) prf("%d\n", x.sz()); for (int i = 0; i < x.sz(); i++) prf("%d ", x[i]);
#define getBit(x,i) ((x&(1<<i))!=0 ? 1 : 0)
#define For(i,n) for (int i = 0; i < n; ++i)
#define FOR(i,begin,end,move) for (int i = begin; i != end; i += move)
#define y1 awdaklg

typedef long long ll;

const ll base = 1000000007LL;
const ll INF = 10000000000000LL;

int a, b;
char c, d;
int dx[8] = {1, 1, 1, -1, -1, -1, 0, 0};
int dy[8] = {-1, 0, 1, -1, 0, 1, -1, 1};
string add[8] = {"LU", "L", "LD", "RU", "R", "RD", "U", "D"};

int get(int x, int y, int xx, int yy)
{
    return abs(x - xx) + abs(y - yy);
}

int main()
{
    scf("%c%d\n%c%d", &c, &a, &d, &b);
    int x = 8 - (int)(c - 'a' + 1) + 1;
    int y = 8 - a + 1;
    int xx = 8 - (int)(d - 'a' + 1) + 1;
    int yy = 8 - b + 1;
    if (x == xx && y == yy)
    {
        prf("0\n");
        return 0;
    }
    vector < string > ans;
    while (true)
    {
        int d = (int)2e9;
        int num = -1;
        For(i, 8)
        {
            int g = get(xx, yy, x + dx[i], y + dy[i]);
            if (g < d)
            {
                d = g;
                num = i;
            }
        }
        ans.pb(add[num]);
        if (d == 0)
            break;
        x += dx[num];
        y += dy[num];
    }          
    prf("%d\n", ans.sz());
    For(i, ans.sz())
        cout << ans[i] << endl;
    return 0;
}