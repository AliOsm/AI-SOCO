// in the name of Allah

#include <bits/stdc++.h>
using namespace std;

#define endl '\n'
#define pb push_back
#define ll long long
#define double long double
#define sz(x) ((int) (x.size()))

#define fr first
#define se second

#define inf 1e9

class UnionFind {
	public:
		vector <int> p;
		UnionFind(int N) {
			p.assign(N, 0);
			for(int i = 0; i < N; i++) p[i] = i;
		}
		int findSet(int i) { return (p[i] == i) ? i : (p[i] = findSet(p[i])); }
		bool isSameSet(int i, int j) { return findSet(i) == findSet(j); }
		void unionSet(int i, int j) {
			if(!isSameSet(i, j)) {
				int x = findSet(i), y = findSet(j);
				p[y] = x;
			}
		}
};

int n, m;
ll a[254321];
int idx[254321];
pair <ll, int> p[254321];

int main() {
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	cin >> n >> m;
	for(int i=0; i<n; i++) {
		cin >> a[i];
		p[i] = {a[i], i};
	}
	sort(p, p+n);
	for(int i=0; i<n; i++) idx[p[i].se] = i;
	ll w;
	int u, v;
	set < pair < ll, pair <int,  int> > > st;
	for(int i=0; i<m; i++) {
		cin >> u >> v >> w; u--; v--;
		st.insert({w, {idx[u], idx[v]}});
	}
	ll ans = 0;
	int E = 0, cnt = 1;
	UnionFind uf(n+10);
	while(true) {
		if(E == n-1) break;
		while(cnt < n && uf.isSameSet(0, cnt)) cnt++;
		while(sz(st)) {
			auto e = *st.begin();
			if(uf.isSameSet(e.se.fr, e.se.se)) st.erase(e);
			else break;
		}
		if(cnt < n && sz(st)) {
			auto e = *st.begin();
			if(e.fr < p[0].fr + p[cnt].fr) {
				w = e.fr;
				u = e.se.fr;
				v = e.se.se;
			}
			else {
				w = p[0].fr + p[cnt].fr;
				u = 0;
				v = cnt;
			}
		}
		else if(sz(st)) {
			auto e = *st.begin();
			w = e.fr;
			u = e.se.fr;
			v = e.se.se;
		}
		else {
			w = p[0].fr + p[cnt].fr;
			u = 0;
			v = cnt;
		}
		uf.unionSet(u, v);
		ans += w;
		E++;
	}
	cout << ans << endl;
	return 0;
}