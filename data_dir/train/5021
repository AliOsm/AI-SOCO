
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
#include <bitset>
#include <complex>
using namespace std;
#define rep(i, n) for (int (i) = 0; (i) < (n); (i) ++)
#define rep1(i, n) for (int (i) = 1; (i) <= (n); (i) ++)
#define FOR(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout<<#a<<" :";FOR(i123,x,y)cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int((x).size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
const int MOD = 1e9 + 7;

inline void add(int& a, int b)
{
  a += b;
  if (a >= MOD) a -= MOD;
}
inline int mul(int a, int b)
{
  return (int) ((a * 1ll * b) % MOD);
}

typedef vector<int> vec;
typedef vector<vec> mat;

mat mul(const mat& m1, const mat& m2)
{
  int n = sz(m1);
  mat m(n, vec(n));
  rep(i,n) rep(j,n) rep(k,n)
  add(m[i][j], mul(m1[i][k], m2[k][j]));
  return m;
}

mat pow(mat m, ll k)
{
  int n = sz(m);
  mat ret(n, vec(n));
  rep(i,n) ret[i][i] = 1;
  while (k > 0)
  {
    if (k & 1) ret = mul(ret, m);
    m = mul(m, m);
    k >>= 1;
  }
  return ret;
}


int N, B, K, X;
int cnt[20];
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  cin >> N >> B >> K >> X;
  rep(i,N) 
  {
    int tmp;
    cin >> tmp;
    cnt[tmp]++;
  }
  mat m(X, vec(X));
  rep(i,X) rep(j,X)
  {
    // we have a number M such that M % x == j
    // how many ways are there 
    // to make this into M' % x == i
    // by appending a new digit after M?
    int tot = 0;
    for (int d = 1; d <= 9; d++)
    {
      if ((j * 10 + d - i) % X == 0)
      {
        tot += cnt[d];
      }
    }
    m[i][j] = tot;
  }
//  rep(i,X) rep(j,X) cout << m[i][j] << (j + 1 < X ? ' ' : '\n');
  m = pow(m, B);
  cout << m[K][0] << endl;
}
