#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

string s;
vector <int> pref[8001];
int dp[8011];
void F(int st)
{
    pref[st].resize(s.size() , 0);
    for (int i = 1; i < s.size(); i++){
        if (i + st == s.size()) break;
        int j = pref[st][i - 1];
        while (j > 0 && s[j + st] != s[i + st]) j = pref[st][j - 1];
        if (s[i + st] == s[j + st]) pref[st][i] = j + 1;
        else pref[st][i] = j;
    }
}

int digits(int x){
    int res = 0;
    while (x){
        res++;
        x /= 10;
    }
    return res;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cin >> s;
    for (int i = 0; i < s.size(); i++) F(i);
    for (int i = 0; i < s.size(); i++) dp[i] = 1000000000;
    for (int i = 0; i < s.size(); i++){
        for (int j = i; j < s.size(); j++){
            int sz = j - i + 1 , l = pref[i][j - i], t;
            if (sz % (sz - l) == 0) t = sz - l;
            else t = sz;
            if (i)
                dp[j] = min(dp[j] , dp[i - 1] + digits(sz / t) + t);
            else
                dp[j] = min(dp[j] , digits(sz / t) + t);
        }
    }
    cout << dp[s.size() - 1];
}
