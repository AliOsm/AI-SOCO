#include <bits/stdc++.h>
#define ll long long

using namespace std;

const int INF = (int) 2e9;

vector < pair <int, char> > pts;

int main(){
    //ifstream cin("A.in");
    //ofstream cout("A.out");
    int i, x, n, mnb, mxb, mnr, mxr;
    char ch;
    ios::sync_with_stdio(false);
    cin >> n;
    int cnt = 0;
    for(i = 1; i <= n; i++) {
        cin >> x >> ch;
        pts.push_back({x, ch});
        if(ch == 'G')
            cnt++;
    }
    //sort(pts.begin(), pts.end());
    if(cnt == 0) {
        mnr = INF, mxr = 0, mnb = INF, mxb = 0;
        for(i = 0; i < n; i++) {
            pair <int, char> it = pts[i];
            if(it.second == 'B') {
                mnb = min(mnb, it.first);
                mxb = max(mxb, it.first);
            }
            else {
                mnr = min(mnr, it.first);
                mxr = max(mxr, it.first);
            }
        }
        if(mxr == 0)
            mxr = mnr;
        if(mxb == 0)
            mxb = mnb;
        cout << mxr - mnr + mxb - mnb;
        return 0;
    }
    int p1 = 0;
    int p2 = n - 1;
    mnr = mnb = INF;
    while(pts[p1].second != 'G') {
        if(pts[p1].second == 'B')
            mnb = min(mnb, pts[p1].first);
        else
            mnr = min(mnr, pts[p1].first);
        p1++;
    }
    mxr = mxb = 0;
    while(pts[p2].second != 'G') {
        if(pts[p2].second == 'B')
            mxb = max(mxb, pts[p2].first);
        else
            mxr = max(mxr, pts[p2].first);
        p2--;
    }
    ll ans = max(0, pts[p1].first - mnb) + max(0, pts[p1].first - mnr) + max(0, mxb - pts[p2].first) + max(0, mxr - pts[p2].first);
    while(p1 != p2) {
        int lastr = pts[p1].first, lastb = pts[p1].first;
        int lenb = 0, lenr = 0, cntr = 0, cntb = 0;
        int pos = p1 + 1;
        while(pts[pos].second != 'G') {
            if(pts[pos].second == 'R') {
                lenr = max(lenr, pts[pos].first - lastr);
                lastr = pts[pos].first;
                cntr++;
            }
            else {
                lenb = max(lenb, pts[pos].first - lastb);
                lastb = pts[pos].first;
                cntb++;
            }
            pos++;
        }
        lenb = max(lenb, pts[pos].first - lastb);
        lenr = max(lenr, pts[pos].first - lastr);
        ans += min(2 * (pts[pos].first - pts[p1].first), 3 * (pts[pos].first - pts[p1].first) - lenb - lenr);
        p1 = pos;
    }
    cout << ans;
    //cin.close();
    //cout.close();
    return 0;
}
