#include<bits/stdc++.h>
#define int long long
using namespace std;
typedef struct TrieNode
{
    struct TrieNode *children[2];
    int fre[2];
} Trie;
Trie *getNode(void)
{
    Trie *pNode =  new TrieNode;
    pNode->fre[0]=0;
    pNode->fre[1]=0;
    for (int i=0;i<2;i++)
        pNode->children[i] = NULL;
    return pNode;
}
void insert(Trie *root,int key)
{
    Trie *pCrawl=root;
    int p=1;
    for(int i=0;i<41;i++)p*=2;
    for (int i=41;i>=0; i--)
    {
        int index=(key & p);
        if(index){
            index=1;
        }
        else index=0;
        if (!pCrawl->children[index])
            pCrawl->children[index] = getNode();
            pCrawl->fre[index]++;
        pCrawl = pCrawl->children[index];
        p/=2;
    }
}
void delet(Trie *root,int key)
{
    Trie *pCrawl=root;
    int p=1;
    for(int i=0;i<41;i++)p*=2;
    for (int i=41;i>=0; i--)
    {
        int index=(key & p);
        if(index){
            index=1;
        }
        else index=0;
        pCrawl->fre[index]--;
        pCrawl = pCrawl->children[index];
        p/=2;
    }
}
int value(Trie *root,int key)
{
    Trie *pCrawl = root;
    int wdc=0,p=1;
    for(int i=0;i<41;i++)p*=2;
    for (int i=41; i>=0; i--)
    {
        int index=(key & p);
        if(index){
            index=1;
        }
        else index=0;
        if(pCrawl->fre[0]==0 && pCrawl->fre[1]==0)
        break;
        if(pCrawl->fre[abs(index-1)])
        {
            wdc+=p;
            pCrawl = pCrawl->children[abs(index-1)];
        }
        else
            pCrawl = pCrawl->children[index];
            p/=2;
    }
    return wdc;
}
int32_t main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    int n,x,lx1=0,lx2=0,ans=0;cin>>n;
    Trie *root = getNode();
    stack<int> s;
    for(int i=0;i<n;i++)
    {
        cin>>x;
        s.push(x);
        lx1=lx1^x;ans=max(lx1,ans);
        insert(root,lx1);
    }
    while(!s.empty())
    {
        delet(root,lx1);
        x=s.top();s.pop();
        lx1=lx1^x;
        lx2=lx2^x;ans=max(lx2,ans);
       ans=max(value(root,lx2),ans);
    }
    cout<<ans;
}