#include <string.h>
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <set>
 
#include <map>
#include <vector>
#include <string>
#include <stdlib.h>
 
#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf
 
#define pf printf
#define mp make_pair
 
using namespace std;
const int N = 51;
const int mod = 1e9+7;
//const int mod = 1000000007;

int n,m;
ll dp[N][N][N][N],sum[N][N][N][N];
int g[N][N];

int dfs(int x1,int y1,int x2, int y2) {
	if(dp[x1][y1][x2][y2]>=0) return dp[x1][y1][x2][y2];

	if(sum[x1][y1][x2][y2]==0) {
		return dp[x1][y1][x2][y2] = 0;
	}
	int ret = max(x2-x1+1,y2-y1+1);
	for(int i = x1; i <x2;++i) {
		ret = min(ret, dfs(x1,y1,i,y2)+dfs(i+1,y1,x2,y2));
	}
	for(int i = y1; i<y2;++i) {
		ret = min(ret, dfs(x1,y1,x2,i)+dfs(x1,i+1,x2,y2));
	}
//	printf("x1 = %d y1 = %d x2 = %d y2 = %d ret = %d\n",x1,y1,x2,y2,ret);
	return dp[x1][y1][x2][y2]=ret;
}

int main() {
	cin>>n;
	fr(i,0,n) {
		string s;
		cin>>s;
		fr(j,0,n) {
			if(s[j]=='#') {
				g[i][j] = 1;
			}
			else {
				g[i][j] = 0;
			}
		}
	}
	fr(i,0,n) {
		fr(j,0,n) {
			fr(k,i,n) {
				fr(l,j,n) {
					for(int ii = i; ii <=k; ++ii) {
						for(int jj = j; jj <=l; ++jj) {
							sum[i][j][k][l] += g[ii][jj];
						}
					}
				}
			}
		}
	}

	_clr(dp);
	printf("%d\n",dfs(0,0,n-1,n-1));
}


