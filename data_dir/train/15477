#include <bits/stdc++.h>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
#define PI 3.14159265358979323846
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;

const int MAX = 100010;

char s[MAX], t[MAX];
int ls, lt;

int sB[MAX], sA[MAX];
int tB[MAX], tA[MAX];

void InitBsum(char* from, int* B, int n){
  for(int i = 0;i < n;++i){
    B[i] = (from[i] == 'B') ? 1 : 0;
    if(i) B[i] += B[i - 1];
  }
}

void InitAsuff(char* from, int* A, int n){
  for(int i = 0;i < n;++i){
    A[i] = (from[i] == 'A') ? 1 : 0;
    if(i && A[i]) A[i] += A[i - 1];
  }
}

int EndsWith(int* A, int l, int r){
  if(A[r] == 0) return 0;
  int from = max(l, r - A[r] + 1);
  return r - from + 1;
}

int Sum(int* B, int l, int r){
  if(l) return B[r] - B[l - 1];
  else return B[r];
}

bool Query(int s1, int s2, int t1, int t2){
  int suff_s = EndsWith(sA, s1, s2);
  int suff_t = EndsWith(tA, t1, t2);

  if(suff_t > suff_s) return false;

  int s_cnt = Sum(sB, s1, s2);
  int t_cnt = Sum(tB, t1, t2);

  if(s_cnt % 2 != t_cnt % 2) return false;

  if(s_cnt == 0){
    int rem = suff_s - suff_t;
    if(t_cnt == 0) return rem % 3 == 0;
    return rem > 0;
  } else {
    suff_s = (suff_s - suff_t) % 3;
    if(suff_s > 0) s_cnt += 2;
    return s_cnt <= t_cnt;
  }
}

int main(){
  scanf("%s", s);
  scanf("%s", t);
  ls = strlen(s);
  lt = strlen(t);

  for(int i = 0;i < ls;++i)
    if(s[i] == 'C') s[i] = 'B';
  for(int i = 0;i < lt;++i)
    if(t[i] == 'C') t[i] = 'B';

  InitBsum(s, sB, ls);
  InitBsum(t, tB, lt);

  InitAsuff(s, sA, ls);
  InitAsuff(t, tA, lt);

  int q;
  scanf("%d", &q);
  for(int i = 0;i < q;++i){
    int s1, s2, t1, t2;
    scanf("%d%d%d%d", &s1, &s2, &t1, &t2);
    --s1, --s2;
    --t1, --t2;
    printf(Query(s1, s2, t1, t2) ? "1" : "0");
  }

  printf("\n");

  return 0;
}
