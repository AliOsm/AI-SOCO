#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define ins insert
#define mp make_pair
#define mt make_tuple
#define fo(i, n1, n, x) for(int i = n1; i <= n; i += x)
#define foo(i, n, n1, x) for(int i = n; i >= n1; i -= x)
#define bit __builtin_popcount
#define md (l + ((r - l) / 2))
#define all(x) x.begin(),x.end()
#define ll long long
#define ld long double
#define eb emplace_back
#define ub upper_bound
#define lb lower_bound
#define ios ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define file(s) if (fopen(s".in", "r")) freopen(s".in", "r", stdin), freopen(s".out", "w", stdout)

using namespace std;

const int N = 1e5 + 11, mod = 1e9 + 7, mod2 = 998244353;
const int MAX = 6e5 + 11;
const int INF1 = 2e9 + 11;
const ll INF2 = 2e18 + 11;
const int base = 500;
const int P = 31;
const int dx[] = {1, -1, 0, 0, 1, 1, -1, -1};
const int dy[] = {0, 0, 1, -1, 1, -1, 1, -1};
const double EPS = 1e-9;
const double PI = acos(-1.0);

#define int ll

int n, s[N], ans, a[N];
vector <int> g[N];
inline void dfs(int v, int pr, int lvl) {
    if (lvl & 1) {
        if (~pr) a[v] = s[v] - s[pr];
        else a[v] = s[v];
    } else {
        if (g[v].size() == 1) {
            a[v] = 0;
            s[v] = s[pr];
        } else {
            int mn = INF1;
            for (int & to : g[v]) {
                if (to != pr) {
                    mn = min(mn, s[to]);
                }
            }
            if (s[pr] > mn) {
                cout << -1;
                exit(0);
            }
            a[v] = mn - s[pr];
            s[v] = s[pr] + a[v];
        }
    }
    for (int & to : g[v]) if (to != pr) dfs(to, v, lvl ^ 1);
}
main() {
    file("lca");
    ios;
    cin >> n;
    fo(i, 2, n, 1) {
        int pr;
        cin >> pr;
        g[i].eb(pr);
        g[pr].eb(i);
    }
    fo(i, 1, n, 1) cin >> s[i];
    dfs(1, -1, 1);
    fo(i, 1, n, 1) ans += a[i];
    cout << ans;
    return 0;
}
/**

*/
