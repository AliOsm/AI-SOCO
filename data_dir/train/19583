// Enjoy your stay.

#include <bits/stdc++.h>

#define long long long
#define LOOPVAR_TYPE long

#define all(x) (x).begin(), (x).end()
#define sz(x) ((LOOPVAR_TYPE)(x).size())
#define foreach(it, X) for(__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define GET_MACRO(_1, _2, _3, NAME, ...) NAME
#define _rep(i, n) _rep2(i, 0, n)
#define _rep2(i, a, b) for(LOOPVAR_TYPE i = (LOOPVAR_TYPE)(a); i < (LOOPVAR_TYPE)(b); i++)
#define rep(...) GET_MACRO(__VA_ARGS__, _rep2, _rep)(__VA_ARGS__)

#define fir first
#define sec second
#define mp make_pair
#define mt make_tuple
#define pb push_back

const double EPS = 1e-9;
const double PI = acos(-1.0);
const long INF = 1070000000LL;
const long MOD = 1000000007LL;

using namespace std;

typedef istringstream iss;
typedef stringstream sst;
typedef pair<LOOPVAR_TYPE, LOOPVAR_TYPE> pi;
typedef vector<LOOPVAR_TYPE> vi;

int n, k, a0, a1;

int main(){
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	
	string name1 = "Stannis", name2 = "Daenerys";
	cin >> n >> k;
	rep(i, n){
		int a;
		cin>>a;
		if(a%2)a1++; else a0++;
	}
	int t = n - k;
	int p1 = (t+1)/2, p2 = t/2;
	if(t == 0){
		return cout << (a1 % 2 ? name1 : name2) << endl, 0;
	}
	if(t % 2 == 1){
		if(a0 < a1){
			if(p2 < a0){
				return cout<<name1<<endl,0;
			}else{
				int remain1 = k;
				if(remain1 % 2 == 1){
					return cout<<name1<<endl,0;
				}else{
					return cout<<name2<<endl,0;
				}
			}
		}else if(a1 < a0){ // 
			if(p2 < a1){
				return cout<<name1<<endl,0;
			}else{
				return cout<<name2<<endl,0;
			}
		}else{
			return cout<<name1<<endl,0;
		}
	}else{
		if(a0 < a1){
			if(p1 < a0){
				return cout<<name2<<endl,0;
			}else{
				int remain1 = k;
				if(remain1 % 2 == 0){
					return cout<<name2<<endl,0;
				}else{
					return cout<<name1<<endl,0;
				}
			}
		}else if(a1 < a0){ // 
			if(p1 < a1){
				return cout<<name2<<endl,0;
			}else{
				return cout<<name2<<endl,0;
			}
		}else{
			return cout<<name2<<endl,0;
		}
	}
}
