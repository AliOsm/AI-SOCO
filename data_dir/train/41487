/****** BISMILLAH HIR RAHMANIR RAHIM ******/

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

typedef long long ll;
typedef pair <int, int> pii;
/* Special functions:

        find_by_order(k) --> returns iterator to the kth largest element counting from 0
        order_of_key(val) --> returns the number of items in a set that are strictly smaller than our item
*/

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;


#define EPS 1e-9
#define NL cout<<endl;
#define MP make_pair
#define ALL(a) a.begin(), a.end()
#define DBG(a) cout<< #a <<" --> "<<(a)<<endl;
#define FastIO ios::sync_with_stdio(false); cin.tie(0);cout.tie(0)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}
template < class T1,class T2>
pair <T1,T2> operator + ( const  pair < T1,T2 > &p1,const pair < T1,T2 > &p2)
{
    return make_pair(p1.first+p2.first,p1.second+p2.second);
}
/****** END OF HEADER ******/
const int N=1e5+5;
const int oo=1e9+7;

ll n,m;

string s[1000];
int check[505][505];
int ans(int ii,int jj)
{
    int tot=0;
    for(int i=ii+1; i<n; i++)
    {
        if(s[i][jj]=='*')
            check[i][jj]=1,tot++;
        else
            break;
    }
    if(tot==0) return 0;
    tot=0;
    for(int i=ii; i>=0; i--)
    {
        if(s[i][jj]=='*')
            check[i][jj]=1,tot++;
        else
            break;
    }
    if(tot<=1) return 0;
    tot=0;
    for(int i=jj+1; i<m; i++)
    {
        if(s[ii][i]=='*')
            check[ii][i]=1,tot++;
        else
            break;
    }
    if(tot==0) return 0;
    tot=0;
    for(int i=jj; i>=0; i--)
    {
        if(s[ii][i]=='*')
            check[ii][i]=1,tot++;
        else
            break;
    }
    if(tot<=1) return 0;
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<m; j++)
            if(s[i][j]=='*' && check[i][j]==0)
                return 0;
    }
    return 1;
}
int chk()
{
    int ii=-1,jj=-1;
    for(int i=0; i<n; i++)
    {
        int total=0;
        for(int j=0; j<m; j++)
        {
            if(s[i][j]=='*')
            {
                total++;
            }
        }
        if(total>1)
        {
            if(ii!=-1)
            {
                ii=-1;
                break;
            }
            else
                ii=i;
        }
    }
    for(int i=0; i<m; i++)
    {
        int total=0;
        for(int j=0; j<n; j++)
        {
            if(s[j][i]=='*')
            {
                total++;
            }
        }
        if(total>1)
        {
            if(jj!=-1)
            {
                jj=-1;
                break;
            }
            else
                jj=i;
        }
    }
    if(ii==-1 || jj==-1)
        return 0;
    return ans(ii,jj);
}
int32_t main()
{
    FastIO;
//    IN;
//    OUT;

    cin>>n>>m;
    for(int i=0; i<n; i++)
        cin>>s[i];
    cout<<(chk()?"YES\n":"NO\n");

}