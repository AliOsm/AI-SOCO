#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll mod=10000000000000;
ll len=1500000;
inline ll add(ll a,ll b)
{
	if((a+=b)>=mod)a-=mod;
	return a;
}
inline ll mult(unsigned long long a,unsigned long long b)
{
	ll t=a*b-(unsigned long long)((long double)a/mod*b+0.5)*mod;
	if(t<0)t+=mod;
	return t;
}
namespace matrix
{
	template<int N,int M>
	class matr
	{
		public:
			ll dat[N][M];
			void init()
			{
				memset(dat,0,sizeof(dat));
			}
			void iden()
			{
				init();
				for(int i=0; i<min(N,M); i++)dat[i][i]=1;
			}
			const ll* operator [](const int &x)const
			{
				return dat[x];
			}
			ll* operator [](const int &x)
			{
				return dat[x];
			}
			template<int X>
			friend matr<N,M> operator *(const matr<N,X> a,const matr<X,M> b)
			{
				matr<N,M> out;
				out.init();
				for(int i=0; i<N; i++)
				{
					for(int j=0; j<X; j++)
					{
						if(a[i][j])
						{
							for(int k=0; k<M; k++)
								out[i][k]=add(out[i][k],mult(a[i][j],b[j][k]));
						}
					}
				}
				return out;
			}
	};
};
using namespace matrix;
ll getfib(ll pos)
{
	matr<1,2> ans=(matr<1,2>){{0,1}};
	matr<2,2> trans=(matr<2,2>){{{0,1},{1,1}}};
	while(pos)
	{
		if(pos&1)ans=ans*trans;
		trans=trans*trans;
		pos>>=1;
	}
	return ans[0][0];
}
ll f[1500010],v,premod=100000;
vector<ll> ok;
int main()
{
	scanf("%lld",&v);
	f[0]=0;f[1]=1;
	for(int i=2;i<len;i++)f[i]=add(f[i-1],f[i-2]);
	for(int i=2;i<len;i++)f[i]%=premod;
	for(int i=0;i<len;i++)if(f[i]==v%premod)ok.push_back(i);
	while(premod<mod)
	{
		premod*=10;
		vector<ll> tmp;
		for(ll &x:ok)
		{
			for(int j=0;j<10;j++)
			{
				if(getfib(x+len*j)%premod==v%premod)tmp.push_back(x+len*j);
			}
		}
		len*=10;
		ok=tmp;
	}
	sort(ok.begin(),ok.end());
	if(!ok.size())puts("-1");
	else printf("%lld\n",ok[0]);
	return 0;
}