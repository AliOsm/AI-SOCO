#include<bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define pb push_back
#define ll long long
#define mp make_pair
const ll INF=1e18;
const int MX=1000000+4;
const int Ed=1e6;
int N, M, k;
int arr[MX];
map<int, int> all;
int f[1000002], cur[1000002];
struct node
{
    int cnt, exist, val;
    node()
    {
        cnt=exist=val=0;
    }
    node(int c, int e, int v)
    {
        cnt=c;
        exist=e;
        val=v;
    }
};
node st[4*MX];
void up(int L, int R, int p, int i, int j, int val)
{
    if(L > R || L > j || R < i) return ;
    if(L >= i && R <= j)
    {
        st[p].cnt+=val;
        if(st[p].cnt > 0) st[p].exist=1;
        else st[p].exist=0;
        st[p].val=st[p].cnt*L;
        return ;
    }
    int m=(L+R)>>1;
    up(L, m, p<<1, i, j, val);
    up(m+1, R, p<<1|1, i, j, val);
    st[p].cnt=st[p<<1].cnt+st[p<<1|1].cnt;
    st[p].exist=st[p<<1].exist+st[p<<1|1].exist;
    st[p].val=st[p<<1].val+st[p<<1|1].val;
}
node query(int L, int R, int p, int i, int j)
{
    if(L > R || L > j || R < i) return node();
    if(L >= i && R <= j)
    {
        return st[p];
    }
    int m=(L+R)>>1;
    node c1=query(L, m, p<<1, i, j);
    node c2=query(m+1, R, p<<1|1, i, j);
    return node(c1.cnt+c2.cnt, c1.exist+c2.exist, c1.val+c2.val);
}
/*
9
1 4 3 2 1 1 2 2 1
*/
int main()
{

    scanf("%d", &N);
    for(int i=0; i<N; i++) scanf("%d", &arr[i]);
    int j=0;
    for(int i=0; i<N; i++)
    {
        if(all.find(arr[i]) == all.end()) all[arr[i]]=++j;
    }
    for(int i=0; i<N; i++)
    {
        arr[i]=all[arr[i]];
        f[arr[i]]++;
    }
    for(int i=1; i<=Ed; i++) if(f[i]) up(1, Ed, 1, f[i], f[i], +1);
    ll an=0;
    for(int i=0; i<N; i++)
    {
        up(1, Ed, 1, f[arr[i]], f[arr[i]], -1);
        if(--f[arr[i]]) up(1, Ed, 1, f[arr[i]], f[arr[i]], +1);
        node now=query(1, Ed, 1, 1,  cur[arr[i]]);
        an+=now.val;
       // cout<<now.val<<" ";
        now=query(1, Ed, 1, ++cur[arr[i]], Ed);
      ///  cout<<now.exist<<"\n";
        an+=(ll)now.cnt*(cur[arr[i]]-1);


    }
    cout<<an;
    return 0;
}
