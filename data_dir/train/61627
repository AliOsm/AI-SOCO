#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("board.in");ofstream out("board.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

struct edge{
    int x,y;
    ll d;
    edge(){}

    edge(int a, int b, ll c){
        x = a; y = b;
        d = c;
    }
};

int a,k,t;
vec<edge> m;

int main() {
    fast;
    cin>>a>>k>>t;
    for(int q=0; q<k; q++){
        int x,y,z; cin>>x>>y>>z; x--; y--;
        m.pb(edge(x,y,z));
    }
    sort(m.begin(), m.end(), [](edge e1, edge e2){return e1.d<e2.d;});
    for(; m.size()>t;) m.pop_back();
    umap<int, int> mp;
    int c = 1;
    for(int q=0; q<m.size(); q++){
        if(mp[m[q].x]) m[q].x = mp[m[q].x];
        else mp[m[q].x] = c, m[q].x = c++;
        if(mp[m[q].y]) m[q].y = mp[m[q].y];
        else mp[m[q].y] = c, m[q].y = c++;
    }
    c--;
    ll inf = 1e17; a = m.size();
    vec<vec<ll>> K(c, vec<ll>(c, inf));
    for(int q=0; q<a; q++){
        m[q].x--, m[q].y--;
        K[m[q].x][m[q].y] = K[m[q].y][m[q].x] = m[q].d;
       //k[q][q] = 0;
    }
    for(int e=0; e<c; e++){
        for(int q=0; q<c; q++){
            for(int w=0; w<c; w++){
                K[q][w] = min(K[q][w], K[q][e]+K[e][w]);
            }
        }
    }
    vec<ll> o;
    for(int q=0; q<c; q++){
        for(int w=q+1; w<c; w++){
            o.pb(K[q][w]);
        }
    }
    sort(o.begin(), o.end());
    cout<<o[t-1];
}