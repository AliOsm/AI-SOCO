#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef unsigned long long ull;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;
const int N = 100010;
const int MX = 123456;
const int mod = (int)1e9 + 7;
const int base = 1023456789;
const ull BS1 = 10000019ULL;
const int INF = (1 << 29);

template < class T > inline void fastScan(T &x){
    register char c = getchar();
    int neg = 0; x = 0;
    for(   ; (c < 48 || c > 57) && (c != '-'); c = getchar());
    if(c == '-') { neg = 1; c = getchar(); }
    for(   ; c > 47 && c < 58; c = getchar()){
        x = (x << 1) + (x << 3) + c - 48;
    }
    if(neg) x = -x;
}

int fx[]={1,-1,0,0};
int fy[]={0,0,-1,1};

int n;
int inp[123];

int seen[123][2];
pair < int , int > dp[123][2];

pii go(int pos, int who){
    if(pos > n) return mp(0,0);
    if(seen[pos][who] == 1) return dp[pos][who];
    seen[pos][who] = 1;
    int a = 0, b = 0;
    pii ret = mp(0, 0);
    if(who == 0){
        a += inp[pos];
        pii tmp = go(pos + 1, 1 - who);
        if(a + tmp.fs > ret.fs) ret = mp(a + tmp.fs, b + tmp.se);
        a = 0; b = 0;
        for(int i = pos; i <= n; i++){
            b += inp[i];
            a = inp[i + 1];
            pii tmp = go(i + 2, 1 - who);
            if(a + tmp.fs > ret.fs) ret = mp(a + tmp.fs, b + tmp.se);
        }
    }else {
        b += inp[pos];
        pii tmp = go(pos + 1, 1 - who);
        if(b + tmp.se > ret.se) ret = mp(a + tmp.fs, b + tmp.se);
        for(int i = pos; i <= n; i++){
            a += inp[i];
            b = inp[i + 1];
            pii tmp = go(i + 2, 1 - who);
            if(b + tmp.se > ret.se) ret = mp(a + tmp.fs, b + tmp.se);
        }
    }
    return dp[pos][who] = ret;
}

int main(){
    n; fastScan(n);
    for(int i = 1; i <= n; i++){
        fastScan(inp[i]);
    }
    go(1, 0);
    printf("%d %d\n", dp[1][0].se, dp[1][0].fs);
}

