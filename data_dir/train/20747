#include <bits/stdc++.h>
using namespace std;
#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()

using ll = long long;

constexpr ll inf = 2000000000000;

struct event {
    ll pos, id;
    bool insert;
    bool operator<(const event& o) const {
        if (pos != o.pos) return pos < o.pos;
        return !insert && o.insert;
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    ll n;
    cin >> n;
    vector<ll> in(n);
    ll sum = 0;
    for (ll i = 0; i < n; i++) {
        cin >> in[i];
        sum += in[i];
    }
    sort(all(in), greater<ll>());
    ll m;
    cin >> m;
    for (ll i = 0; i < m; i++) {
        ll x;
        cin >> x;
        cout << sum - in[x - 1] << endl;
    }
    /*ll n, q;
    cin >> n >> q;
    vector<event> events;
    for (ll i = 0; i < q; i++) {
        ll l, r;
        cin >> l >> r;
        l--;
        events.push_back({l, i, true});
        events.push_back({r, i, false});
    }
    sort(all(events));
    ll all = 0;
    vector<ll> unique(q);
    vector<ll> pair(q*q);
    auto pairId = [&](ll a, ll b){
        if (a > b) swap(a, b);
        return a * q + b;
    };
    set<ll> active;
    for (ll i = 0, l = 0; i < n; i++) {
        while (l < sz(events) && events[l].pos <= i) {
            if (events[l].insert) {
                active.insert(events[l].id);
            } else {
                active.erase(events[l].id);
            }
            l++;
        }
        if (active.empty()) {
            all++;
        } else if (active.size() == 1) {
            unique[*active.begin()]++;
        } else if (active.size() == 2) {
            pair[pairId(*active.begin(), *active.rbegin())]++;
        }
    }
    ll res = 0;
    for (ll i = 0; i < q; i++) {
        for (ll j = 0; j < i; j++) {
            ll c = n - all;
            c -= unique[i];
            c -= unique[j];
            c -= pair[pairId(i, j)];
            res = max(res, c);
        }
    }
    cout << res << endl;*/
    /*ll n, k;
    cin >> n >> k;
    vector<ll> a(n);
    for (ll i = 0; i < n; i++) {
        cin >> a[i];
    }
    vector<ll> b(n);
    for (ll i = 0; i < n; i++) {
        cin >> b[i];
    }
    auto ok = [&](ll x){
        priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>> pq;
        vector<ll> loadings(n);
        for (ll i = 0; i < n; i++) {
            pq.push({a[i] / b[i] + 1, i});
        }
        for (ll t = 0; t < k; t++) {
            auto c = pq.top();
            pq.pop();
            if (c.first <= t) return false;
            ll i = c.second;
            loadings[i]++;
            pq.push({(a[i] + x * loadings[i]) / b[i] + 1, i});
        }
        while (!pq.empty()) {
            auto c = pq.top();
            pq.pop();
            if (c.first < k) return false;
        }
        return true;
    };
    ll l = -1;
    ll r = inf;
    while (l + 1 < r) {
        ll mid = (l + r) / 2;
        if (ok(mid)) {
            r = mid;
        } else {
            l = mid;
        }
    }
    if (r == inf) {
        cout << -1 << endl;
    } else {
        cout << r << endl;
    }*/
}