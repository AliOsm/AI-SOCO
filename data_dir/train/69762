//                             In The Name Of Allah
#include <bits/stdc++.h>
#define use_fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define ret(n) return cout << n, 0
#define se(n) cout << setprecision(n) << fixed
#define pb push_back
#define int long long
#define ld long double
using namespace std; 
 
const int N = 3e5 + 100, OO = 1e9 + 100, M = 1e9 + 7, P = 6151, SQ = 100, lg = 21;
typedef pair <int, int> pii;
struct node {
	pii ff, ss, tt;
} mx[N], ans;
pii d[N], du[N]; 
vector <int> v[N];
int cnt = 0;

void dfs_d(int x, int y) {
	mx[x] = {{0, 0}, {0, 0}, {0, x}};
	d[x] = {0, x};
	for(auto u : v[x]) {
		if(u == y)
			continue;
		dfs_d(u, x);
		if(d[u].first + 1 > d[x].first) {
			d[x] = d[u];
			d[x].first++;
		}
		if(d[u].first + 1 > mx[x].tt.first) {
			mx[x].ff = mx[x].ss;
			mx[x].ss = mx[x].tt;
			mx[x].tt = d[u];
			mx[x].tt.first++;
		}
		else if(d[u].first + 1 > mx[x].ss.first) {
			mx[x].ff = mx[x].ss;
			mx[x].ss = d[u];
			mx[x].ss.first++;
		}
		else if(d[u].first + 1 > mx[x].ff.first) {
			mx[x].ff = d[u];
			mx[x].ff.first++;
		}
	}
}

void dfs_up(int x, int y) {
	if(x != 1) {
		pii p;
		if(d[x].first + 1 == mx[y].tt.first)
			p = mx[y].ss;
		else
			p = mx[y].tt;
		if(p.first + 1 > mx[x].tt.first) {
			mx[x].ff = mx[x].ss;
			mx[x].ss = mx[x].tt;
			mx[x].tt = p;
			mx[x].tt.first++;
		}
		else if(p.first + 1 > mx[x].ss.first) {
			mx[x].ff = mx[x].ss;
			mx[x].ss = p;
			mx[x].ss.first++;
		}
		else if(p.first + 1 > mx[x].ff.first) {
			mx[x].ff = p;
			mx[x].ff.first++;
		}		
	} 
	if(mx[x].ff.first + mx[x].ss.first + mx[x].tt.first > cnt) {
		cnt = mx[x].ff.first + mx[x].ss.first + mx[x].tt.first;
		ans = {{0, mx[x].ff.second}, {0, mx[x].ss.second}, {0, mx[x].tt.second}};
	}
	for(auto u : v[x]) {
		if(u == y)	
			continue;
		dfs_up(u, x);
	}
}

int32_t main() {
    use_fast;
	int n;
	cin >> n;
	for(int i = 0; i < n - 1; i++) {
		int x, y;
		cin >> x >> y;
		v[x].pb(y);
		v[y].pb(x);
	}
	dfs_d(1, 0);
	dfs_up(1, 0);
	set <int> s;
	s.insert(ans.ff.second);
	s.insert(ans.ss.second);
	s.insert(ans.tt.second);
	if(*s.begin() == 0)
		s.erase(*s.begin());
	while(s.size() < 3) {
		s.insert(n);
		n--;
	}
	cout << cnt << endl;
	for(auto u : s)
		cout << u << " ";
	return 0; 
}
/*
be carefull :
1- if not solve after 20 min, read again twice
2- after submit read the code again
3- fun with contest
4- ... 
*/	
