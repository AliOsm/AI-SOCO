//Pham Huu Canh
//F. Ant colony
//Algorithm:
//Complexity:
//AC:

#include <iostream>
#include <fstream>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

#define max64 9223372036854775807LL
#define max32 2147483647
#define maxty 1001001001
#define max16 32767
#define EPS 1e-8
#define ll long long
#define ull unsigned long long
#define pb push_back
#define mp make_pair
#define PQ priority_queue
#define LB lower_bound
#define UB upper_bound
#define fi first
#define se second
#define timmax(x, y)    ((x) > (y) ? (x) : (y))
#define timmin(x, y)    ((x) < (y) ? (x) : (y))
#define fori(i, n)      for((i) = 0; (i) < (n); (i)++)
#define ford(i, n)      for((i) = (n-1); (i) >= 0; (i)--)
#define fore(i, v)      for(typeof(v.begin()) i = v.begin(); i != v.end(); i++)
#define repi(i, a, b)   for((i) = (a); (i) <= (b); (i)++)
#define repd(i, a, b)   for((i) = (a); (i) >= (b); (i)--)
#define all(tmpv)      tmpv.begin(), tmpv.end()

#define fii "f.inp"
#define foo "f.out"
#define MOD 1000000007
#define inf 1000111000111000111LL

using namespace std;

typedef pair<int, int> II;
typedef vector<int> VI;
#define nmax 100005

int g[nmax<<2], a[nmax];
II st[nmax<<2];

inline int gcd(int x, int y){
    int r;
    while (y)   r = x % y, x = y, y = r;
    return x;
}

void build(int i, int dau, int cuoi){
    if (dau == cuoi){
        st[i] = mp(a[dau], 1);
        g[i] = a[dau];
        return;
    }
    int i1 = i<<1, i2 = i1|1, giua = (dau + cuoi)>>1;
    build(i1, dau, giua);
    build(i2, giua+1, cuoi);
    
    g[i] = gcd(g[i1], g[i2]);
    if (st[i1].fi == st[i2].fi) st[i] = mp(st[i1].fi, st[i1].se + st[i2].se);
    else if (st[i1].fi > st[i2].fi) st[i] = st[i2];
    else st[i] = st[i1];
}

int qrgcd(int i, int dau, int cuoi, int l, int r){
    if (dau == l && cuoi == r)  return g[i];
    int i1 = i<<1, i2 = i1|1, giua = (dau + cuoi)>>1;
    if (r <= giua)  return qrgcd(i1, dau, giua, l, r);
    else if (l > giua)  return qrgcd(i2, giua+1, cuoi, l, r);
    else return gcd(qrgcd(i1, dau, giua, l, giua), qrgcd(i2, giua+1, cuoi, giua+1, r));
}

II qr(int i, int dau, int cuoi, int l, int r){
    if (dau == l && cuoi == r)  return st[i];
    int i1 = i<<1, i2 = i1|1, giua = (dau + cuoi)>>1;
    if (r <= giua)  return qr(i1, dau, giua, l, r);
    else if (l > giua)  return qr(i2, giua+1, cuoi, l, r);
    else{
        II p1 = qr(i1, dau, giua, l, giua);
        II p2 = qr(i2, giua+1, cuoi, giua+1, r);
        if (p1.fi == p2.fi) return mp(p1.fi, p1.se + p2.se);
        else if (p1.fi > p2.fi) return p2;
        return p1;
    }
}

void input()
{
    int i, n, l, r, ucln, nq;
    II p;
    
    scanf("%d", &n);
    repi(i, 1, n)   scanf("%d", &a[i]);
    
    build(1, 1, n);
    
    scanf("%d", &nq);
    while (nq--){
        scanf("%d %d", &l, &r);
        ucln = qrgcd(1, 1, n, l, r);
        p = qr(1, 1, n, l, r);
        
        if (ucln != p.fi)   printf("%d\n", r - l + 1);
        else    printf("%d\n", r - l + 1 - p.se);
    }
}

int main()
{
    #ifndef ONLINE_JUDGE
        freopen(fii,"r",stdin);
        freopen(foo,"w",stdout);
    #endif

    input();

    return 0;
}
