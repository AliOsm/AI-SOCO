/*
ЗАПУСКАЕМ 
░ГУСЯ░▄▀▀▀▄░РАБОТЯГУ░░
▄███▀░◐░░░▌░░░░░░░
░░░░▌░░░░░▐░░░░░░░
░░░░▐░░░░░▐░░░░░░░
░░░░▌░░░░░▐▄▄░░░░░
░░░░▌░░░░▄▀▒▒▀▀▀▀▄
░░░▐░░░░▐▒▒▒▒▒▒▒▒▀▀▄
░░░▐░░░░▐▄▒▒▒▒▒▒▒▒▒▒▀▄
░░░░▀▄░░░░▀▄▒▒▒▒▒▒▒▒▒▒▀▄
░░░░░░▀▄▄▄▄▄█▄▄▄▄▄▄▄▄▄▄▄▀▄
░░░░░░░░░░░▌▌░▌▌░░░░░
░░░░░░░░░░░▌▌░▌▌░░░░░
░░░░░░░░░▄▄▌▌▄▌▌░░░░░ 
 */
#include <iostream>
#include <complex>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
     
      
using namespace std;
template<typename T1, typename T2>inline void chkmin(T1 &x, T2 y) { if (x > y) x = y; }
template<typename T1, typename T2>inline void chkmax(T1 &x, T2 y) { if (x < y) x = y; } 
template<typename T, typename U> inline ostream &operator<< (ostream &_out, const pair<T, U> &_p) { _out << _p.first << ' ' << _p.second; return _out; }
template<typename T, typename U> inline istream &operator>> (istream &_in, pair<T, U> &_p) { _in >> _p.first >> _p.second; return _in; }
template<typename T> inline ostream &operator<< (ostream &_out, const vector<T> &_v) { if (_v.empty()) { return _out; } _out << _v.front(); for (auto _it = ++_v.begin(); _it != _v.end(); ++_it) { _out << ' ' << *_it; } return _out; }
template<typename T> inline istream &operator>> (istream &_in, vector<T> &_v) { for (auto &_i : _v) { _in >> _i; } return _in; }
template<typename T> inline ostream &operator<< (ostream &_out, const set<T> &_s) { if (_s.empty()) { return _out; } _out << *_s.begin(); for (auto _it = ++_s.begin(); _it != _s.end(); ++_it) { _out << ' ' << *_it; } return _out; }
template<typename T> inline ostream &operator<< (ostream &_out, const multiset<T> &_s) { if (_s.empty()) { return _out; } _out << *_s.begin(); for (auto _it = ++_s.begin(); _it != _s.end(); ++_it) { _out << ' ' << *_it; } return _out; }
template<typename T> inline ostream &operator<< (ostream &_out, const unordered_set<T> &_s) { if (_s.empty()) { return _out; } _out << *_s.begin(); for (auto _it = ++_s.begin(); _it != _s.end(); ++_it) { _out << ' ' << *_it; } return _out; }
template<typename T> inline ostream &operator<< (ostream &_out, const unordered_multiset<T> &_s) { if (_s.empty()) { return _out; } _out << *_s.begin(); for (auto _it = ++_s.begin(); _it != _s.end(); ++_it) { _out << ' ' << *_it; } return _out; }
template<typename T, typename U> inline ostream &operator<< (ostream &_out, const map<T, U> &_m) { if (_m.empty()) { return _out; } _out << '(' << _m.begin()->first << ": " << _m.begin()->second << ')'; for (auto _it = ++_m.begin(); _it != _m.end(); ++_it) { _out << ", (" << _it->first << ": " << _it->second << ')'; } return _out; }
template<typename T, typename U> inline ostream &operator<< (ostream &_out, const unordered_map<T, U> &_m) { if (_m.empty()) { return _out; } _out << '(' << _m.begin()->first << ": " << _m.begin()->second << ')'; for (auto _it = ++_m.begin(); _it != _m.end(); ++_it) { _out << ", (" << _it->first << ": " << _it->second << ')'; } return _out; }
#define sz(c) (int)(c).size()
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define left left228
#define right right228
#define next next228
#define rank rank228
#define prev prev228
#define y1 y1228                                                         
#define read(FILENAME) freopen((FILENAME + ".in").c_str(), "r", stdin)
#define write(FILENAME) freopen((FILENAME + ".out").c_str(), "w", stdout)
#define files(FILENAME) read(FILENAME), write(FILENAME)
#define pb push_back
const string FILENAME = "input";






int main() {
    ios_base::sync_with_stdio(false);
   // read(FILENAME);
    int n;
    cin >> n;
    int curx = n;
    int cury = n;
    vector<pair<int, int> > st;
    st.pb({curx, cury});
    string ans;
    while (abs(curx - 1) + abs(cury - 1) >= n) {
        cout << '?' << ' ' << 1 << ' ' << 1 << ' ' << curx - 1 << ' ' << cury << ' ' << endl;
        string res;
        cin >> res;
        if (res == "YES") {
            ans += 'D';
            curx--;
        } else {
            ans += 'R';
            cury--;
        }
        st.pb({curx, cury});
        if (curx == 1) {
            while (cury != 1) {
                cury--;
                ans += 'R';
            }
            reverse(all(ans));
            cout << '!' << ' ' << ans << endl;
            return 0; 
        }
        if (cury == 1) {
            while (curx != 1) {
                curx--;
                ans += 'D';
            }
            reverse(all(ans));
            cout << '!' << ' ' << ans << endl;
            return 0; 
        }
    }
    curx = 1;
    cury = 1;
    int uk = sz(st) - 2;
    string ans1;
    while (sz(ans1) + sz(ans) != 2 * n - 2) {
        cout << '?' << ' ' << curx << ' ' << cury + 1 << ' ' << st[uk].first << ' ' << st[uk].second << ' ' << endl;
        string res;
        cin >> res;
        if (res == "YES") {
            ans1 += 'R';
            cury++;
        } else {
            ans1 += 'D';
            curx++;
        }
        if (curx == n) {
            while (cury != n) {
                cury++;
                ans1 += 'R';
            }
          //  reverse(all(ans));
            cout << '!' << ' ' << ans1 << endl;
            return 0; 
        }
        if (cury == n) {
            while (curx != n) {
                curx++;
                ans1 += 'D';
            }
            //reverse(all(ans));
            cout << '!' << ' ' << ans1 << endl;
            return 0; 
        }
        uk--;
    }
    reverse(all(ans));
    cout << '!' << ' ' << ans1 + ans << endl;
    return 0;       
}
