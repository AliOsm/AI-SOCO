#include<bits/stdc++.h>
#define ll long long
#define fe first
#define se second
using namespace std;
const int N = 1e3 + 5;
const ll M = 1e14;
ll a[N];
int n, m, s, f;
vector<pair<int, ll> > v[N];
bool vis[N];
ll t[N], c[N];
ll dist[N];
ll dd[N][N];
ll g[N][N];
void dj(int s){
    fill(dist, dist + N, M);
    memset(vis, 0, sizeof(vis));
    dist[s] = 0;
    multiset<pair<ll, ll> > ms;
    ms.insert({0, s});
    while(!ms.empty()){
        pair<ll, ll> p = *ms.begin();
        ms.erase(ms.begin());
        ll x = p.se, we = p.fe;
        if(vis[x]) continue;
        vis[x] = 1;
        for(auto i : v[x]){
            ll e = i.fe, w = i.se;
            if(dist[x] + w < dist[e]){
                dist[e] = dist[x] + w;
                ms.insert({dist[e], e});
            }
        }
    }
    for(int i = 1; i <= n; i++)
        dd[s][i] = dist[i];
}
void newdj(){
    fill(dist, dist + N, M);
    memset(vis, 0, sizeof(vis));
    dist[s] = 0;
    for(int ct = 0; ct < n - 1; ct++){
        ll mini = LLONG_MAX, who;
        for(int ii = 1; ii <= n; ii++)
            if(!vis[ii] && dist[ii] < mini)
                mini = dist[ii], who = ii;
        vis[who] = 1;
        for(int ii = 1; ii <= n; ii++)
            if(!vis[ii] && g[who][ii] != M && dist[who] != M && dist[who] + g[who][ii] < dist[ii])
                dist[ii] = dist[who] + g[who][ii];
    }
}
int main()
{
    ios_base ::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    cin >> n >> m >> s >> f;
    int x, y, z;
    for(int i = 0; i < m; i++){
        cin >> x >> y >> z;
        v[x].push_back({y, z});
        v[y].push_back({x, z});
    }
    for(int i = 1; i <= n; i++) cin >> t[i] >> c[i];
    for(int i = 1; i <= n; i++) dj(i);
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= n; j++)
            g[i][j] = (dd[i][j] <= t[i] ? c[i] : M);
    newdj();
    cout << (dist[f] >= M ? -1 : dist[f]);
return 0;
}
