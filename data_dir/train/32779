//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, a[200005];

ll f[200005];
bool was[200005];

ll rec(int v){
  if(was[v]){
    if(!f[v]) return f[v] = -1;
    return f[v];
  }
  was[v] = true;
  if(v == 1){
    return f[v] = -1;
  }
  ll ver = v + a[v];
  int points = a[v];
  if(ver > n){
    return f[v] = points;
  }
  points += a[ver];
  ver -= a[ver];
  if(ver < 0){
    return f[v] = points;
  }
  rec(ver);
  if(f[ver] == -1){
    return f[v] = -1;
  }
  return f[v] = f[ver] + points;
}

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  scanf("%d", &n);
  for(int i = 2; i <= n; ++i){
    scanf("%d", a + i);
  }
  for(int i = 1; i <= n; ++i){
    rec(i);
  }
  for(int i = 1; i < n; ++i){
    ll now = i;
    if(a[i + 1] >= i + 1){
      now += a[i + 1];
      printf("%I64d\n", now);
      continue;
    }
    now += a[i + 1];
    if(f[i + 1 - a[i + 1]] == -1){
      puts("-1");
    } else {
      printf("%I64d\n", now + f[i + 1 - a[i + 1]]);
    }
  }
  return 0;
}
