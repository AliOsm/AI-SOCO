#pragma comment(linker,"/stack:256000000")

#include <cmath> 
#include <ctime> 
#include <iostream> 
#include <string> 
#include <vector> 
#include <algorithm> 
#include <set> 
#include <map> 
#include <cstring> 
#include <cstdlib> 
#include <queue> 
#include <cstdio> 
#include <cfloat>
#include <cassert>
#include <ctime>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++) 
#define sz(v) (int)(v).size() 
#define all(v) (v).begin(), (v).end()

const int N = 100100;

int a[N];
vector <int> v[N];
long long sum[N];

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	long long start = clock();
#endif
	int n, m;
	cin >> n >> m;
	REP(i, m) scanf("%d", &a[i]);
	long long total = 0;
	REP(i, m - 1) total += abs(a[i + 1] - a[i]);
	REP(i, m) {
		int x = a[i];
		if (i > 0 && a[i - 1] != x) {
			v[x].push_back(a[i - 1]);
			sum[x] += abs(x - a[i - 1]);
		}
		if (i < m - 1 && a[i + 1] != x) {
			v[x].push_back(a[i + 1]);
			sum[x] += abs(x - a[i + 1]);
		}
	}
	long long best = total;
	for (int i = 1; i <= n; i++) {
		if (!v[i].empty()) {
			sort(all(v[i]));
			int t = v[i][sz(v[i]) / 2];
			long long cur = total - sum[i];
			REP(j, sz(v[i])) {
				cur += abs(v[i][j] - t);
			}
			best = min(best, cur);
		}
	}
	cout << best << endl;
	return 0;
}