#include <cstdio>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;

typedef pair<int,int> PII;

vector<pair<PII,PII>> edge;
vector<PII> e[201];
PII ret;

bool gao(int x, int z, int from = -1){
    if(x==z) return true;
    for(auto r:e[x]){
        int y,c;
        tie(y,c)=r;
        if(from!=y && gao(y,z,x)){
            ret=max(ret,PII(edge[c].first.second,c));
            return true;
        }
    }
    return false;
}

int main(){
    int n,m,x,y,g,s;
    long long gc,sc,ans=1ll<<62;
    scanf("%d%d%I64d%I64d",&n,&m,&gc,&sc);
    for(int i=0;i<m;i++){
        scanf("%d%d%d%d",&x,&y,&g,&s);
        edge.push_back({{g,s},{x,y}});
    }
    sort(edge.begin(),edge.end());
    multiset<int> u;
    for(int i=0;i<m;i++){
        tie(g,s)=edge[i].first;
        tie(x,y)=edge[i].second;
        if(x==y) continue;
        ret={0,0};
        if(gao(x,y)){
            int X,Y,G,S,j=ret.second;
            tie(G,S)=edge[j].first;
            tie(X,Y)=edge[j].second;
            if(s>=S) continue;
            e[X].erase(find(e[X].begin(),e[X].end(),PII(Y,j)));
            e[Y].erase(find(e[Y].begin(),e[Y].end(),PII(X,j)));
            u.erase(u.find(S));
        }
        e[x].push_back({y,i});
        e[y].push_back({x,i});
        u.insert(s);
        if(u.size()==n-1) ans=min(ans,g*gc+*u.rbegin()*sc);
    }
    if(ans==(1ll<<62)) puts("-1"); else printf("%I64d\n",ans);
}
