#include <bits/stdc++.h>
using namespace std;

#define FR(i, a, b) for(int i = a; i < b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define PB push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define size(x) (int)x.size()
#define fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
#define debug(x) cerr<< #x << ": " << x << endl;

typedef long double ld;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

//const int INF = 1000 * 1000 * 1000 + 1;
const int N = 100 * 1000 + 10;
struct flight{
	ll d, u, v, p;
	bool operator < (const flight x) const {
		return d < x.d;
	}
} f[N];
ll st[N], fi[N];
ll p[N];

int main()
{
	int n, m, k;
	cin>> n >> m >> k;

	FR(i, 0, m)
	{
		cin>> f[i].d >> f[i].u >> f[i].v >> f[i].p;
	}
	
	sort(f, f + m);

	FR(i, 0, m)
		st[i] = fi[i] = -1;

	FR(i, 0, n + 1)
		p[i] = -1;

	ll sum = 0;
	int t = 0;
	FR(i, 0, m)
	{
		if(i != 0)
			st[i] = st[i - 1];
		if(f[i].v == 0)
		{
			if(p[f[i].u] == -1)
			{
				t++;
				sum += f[i].p;
				p[f[i].u] = f[i].p;
			}
			if(p[f[i].u] > f[i].p)
			{
				sum -= p[f[i].u];
				p[f[i].u] = f[i].p;
				sum += f[i].p;
			}
			if(t == n)
				st[i] = sum;
		}
	}

	FR(i, 0, n + 1)
		p[i] = -1;

	sum = 0;
	t = 0;
	ROF(i, m - 1, 0)
	{
		if(i != m - 1)
			fi[i] = fi[i + 1];
		if(f[i].u == 0)
		{
			if(p[f[i].v] == -1)
			{
				t++;
				sum += f[i].p;
				p[f[i].v] = f[i].p;
			}
			if(p[f[i].v] > f[i].p)
			{
				sum -= p[f[i].v];
				p[f[i].v] = f[i].p;
				sum += f[i].p;
			}
			if(t == n)
				fi[i] = sum;
		}
	}

	ll ans = -1;
	int j = 0;
	FR(i, 0, m)
	{
		while(j < m && f[j].d - f[i].d <= k)
			j++;
		if(j == m)
			break;
		if(st[i] != -1 && fi[j] != -1)
		{
		ll nw = st[i] + fi[j];
		if(ans == -1 || ans > nw)
			ans = nw;
		}
	}
	cout<< ans << endl;
	return 0;
}
