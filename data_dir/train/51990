///*BISMILLAHIR RAHMANIR RAHIM*///
#include<bits/stdc++.h>
using namespace std;
#define MAX 300005
typedef vector<int> vi;
typedef pair<int,int> pii;
vi dfs_low,dfs_num,dfs_parent,articulation_vertex;
int dfsNumberCounter,dfsRoot,child;
vi adjlist[MAX],edge[MAX];
vector<pii>bridge;
int visited[MAX];
void articulationPointAndBridge(int u){
    dfs_low[u]=dfs_num[u]=dfsNumberCounter++;
    int i,sz=(int)adjlist[u].size();
    for(i=0;i<sz;i++){
        int v = adjlist[u][i];
        if (dfs_num[v] == -1) {
            dfs_parent[v]=u;
            if(u==dfsRoot)child++;
            articulationPointAndBridge(v);
            if(dfs_low[v]>=dfs_num[u])articulation_vertex[u]=true;
            if(dfs_low[v]>dfs_num[u])bridge.push_back(pii(v,u));
            else{
                edge[u].push_back(v);
                edge[v].push_back(u);
            }
            dfs_low[u]=min(dfs_low[u],dfs_low[v]);
        }
        else if(v!=dfs_parent[u])dfs_low[u]=min(dfs_low[u],dfs_num[v]);
    }
}
int comp[MAX],maxi,start;
void put(int s,int val){
    visited[s]=1;
    for(auto i : edge[s])if(!visited[i])put(i,val);
    comp[s]=val;
}
void dfs(int s,int dist){
    visited[s]=1;
    if(dist>maxi){
        maxi=dist;
        start=s;
    }
    for(auto v: edge[s]){
        if(!visited[v]){
            visited[v]=true;
            dfs(v,dist+1);
        }
    }
}
int main(){
    int tc,cases=0,n,m,i,j,u,v,ans;
    ans=0;
    scanf("%d%d",&n,&m);
    for(i=0;i<m;i++){
        scanf("%d %d",&u,&v);
        u--,v--;
        adjlist[u].push_back(v);
        adjlist[v].push_back(u);
    }
    dfsNumberCounter = 0; dfs_num.assign(n, -1); dfs_low.assign(n, 0);
    dfs_parent.assign(n, -1); articulation_vertex.assign(n, 0);
    for (i = 0; i <n; i++){
        if (dfs_num[i] == -1) {
            dfsRoot = i; child= 0;
            articulationPointAndBridge(i);
            articulation_vertex[dfsRoot] = (child > 1);
        }
    }
    ans=bridge.size();
    int cnt=0;
    for(i=0;i<n;i++)if(!visited[i])put(i,cnt++);
    for(i=0;i<n;i++)edge[i].clear();
    for(i=0;i<ans;i++){
        u=bridge[i].first,v=bridge[i].second;
        u=comp[u],v=comp[v];
        edge[u].push_back(v);
        edge[v].push_back(u);
    }
    memset(visited,0,sizeof visited);
    maxi=0;
    dfs(0,0);
    maxi=0;
    memset(visited,0,sizeof visited);
    dfs(start,0);
    cout<<maxi<<endl;
    return 0;
}

