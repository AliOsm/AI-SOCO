#include <bits/stdc++.h>
#define MAX 100005
using namespace std;
int a[MAX];
int tree[4*MAX];
int tree1[4*MAX];
int n;
int init_tree_max(int node,int b,int e)
{
        if(b==e) // leaf node
        {
            tree[node] = a[b];
            return tree[node] ;
        }
        int mid = (b+e)/2;
        int sutta1 = init_tree_max(2*node,b,mid);
        int sutta2 =  init_tree_max(2*node+1,mid+1,e);
       tree[node]  = max(sutta1 , sutta2);
       return tree[node];
}


int query_max(int node,int b,int e,int i,int j)
    {
        if(b >= i && e <= j)//in range
            return tree[node];

        int mid = (b+e)/2;
        if(j<=mid)
            return query_max(2*node,b,mid,i,j);
        else if(i>mid)
            return query_max(2*node+1,mid+1,e,i,j);
        int p1 = query_max(2*node,b,mid,i,j);
        int p2 = query_max(2*node+1,mid+1,e,i,j);

        return max(p1,p2);
}



int init_tree_min(int node,int b,int e)
{
        if(b==e) // leaf node
        {
            tree1[node] = a[b];
            return tree1[node] ;
        }
        int mid = (b+e)/2;
        int sutta = init_tree_min(2*node,b,mid);
        int sutta1 = init_tree_min(2*node+1,mid+1,e);
        tree1[node] = min(sutta , sutta1);
        return tree1[node];
}


int query_min(int node,int b,int e,int i,int j)
{
        if(b >= i && e <= j)//in range
            return tree1[node];

        int mid = (b+e)/2;
        if(j<=mid)
            return query_min(2*node,b,mid,i,j);
        else if(i>mid)
            return query_min(2*node+1,mid+1,e,i,j);
        int p1 = query_min(2*node,b,mid,i,j);
        int p2 = query_min(2*node+1,mid+1,e,i,j);

        return min(p1,p2);
}

bool check(int x ) {
    bool flag = false;
    for(int i = 0; i < n - x; i++) {
       // cout<<(query_max(1, i , i + x, 0 , n - 1) - query_min(1, i , i + x, 0 , n - 1))<<" ";
       if((query_max(1, 0 , n - 1., i , i + x) - query_min(1, 0 , n - 1,  i , i + x)) <= 1) {
            flag = true;
       }
    }
    //cout<<endl;
    return flag ;

}
int main() {


    cin>>n;
    for(int i = 0; i < n; i++) {
        cin>>a[i];
    }
    init_tree_min(1 , 0 , n-1);
    init_tree_max(1 , 0 , n-1);
    int l = 0;
    int r = n - 1;
    while( l <= r) {

        int mid = (l+ r)/2;
         //cout<<mid << endl;
        if(check(mid)) {
            l = mid+ 1;

        } else {
            r = mid - 1;
        }
    }
    //cout << query_max(1, 0 ,  2, 0 , n - 1) << " " << query_min(1, 0 , 2, 0 , n - 1) <<endl;
    //cout << query_max(1, 0 ,  1, 0 , n - 1) << " " << query_min(1, 0 , 1, 0 , n - 1) <<endl;
    cout<<l<<endl;
}
