#include<bits/stdc++.h>
#pragma GCC optimize ("-O3")
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define ll long long
#define int long long
#define double long double
#define pb push_back
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define diff(a,b) (a>b?a-b:b-a)
const int N=1e6+5;
void pairsort(int a[], int b[], int n){
    pair<int, int> pairt[n];
    for (int i = 0; i < n; i++) 
    {
        pairt[i].first = a[i];
        pairt[i].second = b[i];
    }
    sort(pairt, pairt + n);
    for (int i = 0; i < n; i++) 
    {
        a[i] = pairt[i].first;
        b[i] = pairt[i].second;
    }
}
int gcd(int a, int b){
    if (b == 0)
        return a;
    return gcd(b, a % b); 
}
int isPrime(int n){
    if(n < 2)
        return 0;
    if(n < 4)
        return 1;
    if(n % 2 == 0 or n % 3 == 0)
        return 0;
    for(int i = 5; i*i <= n; i += 6)
        if(n % i == 0 or n % (i+2) == 0)
            return 0;
    return 1;
}
long long C(int n, int r) {
    if(r>n-r) 
        r=n-r;
    long long ans=1;
    for(int i=1;i<=r;i++){
        ans*=n-r+i;
        ans/=i;
    }
    return ans;
}
int mod = 1e9+7;
int modexpo(int x,int p){
    int res = 1;
    x = x%mod;
    while(p){
        if(p%2)
            res = res * x;
        p >>= 1;
        x = x*x % mod;
        res %= mod;
    }
    return res;
}
int Digits(int x)
{
    if(!x)
        return 1;
    int s=0;
    while(x)
        x/=10,s++;
    return s;
}
int sum(int x)
{
    return x*(x+1)/2;
}
int q,x;
int BinSearch1(int x)
{
    int low=0,high=2e9,mid,mid1=-1;
    while(low<=high)
    {
        mid=(low+high+1)/2;
        int d=Digits(mid),s=0;
        for(int i=1;i<d;i++)
        {
            int p1=pow(10,i-1)-1,p2=pow(10,i)-1;
            s+=(i)*(sum(mid-p1)-sum(mid-p2));
        }
        s+=d*sum(mid-pow(10,d-1)+1);
        if(s>=x)
            high=mid-1;
        else
        {
            mid1=max(mid1,mid);
            low=mid+1;
        }
    }
    return mid1;
}
int BinSearch2(int x)
{
    int low=0,high=2e9,mid,mid1=0;
    while(low<=high)
    {
        mid=(low+high+1)/2;
        int d=Digits(mid),s=mid;
        for(int i=2;i<d;i++)
            s+=9*(int)pow(10,i-1)*(i-1);
        s+=(mid-(int)pow(10,d-1)+1)*(d-1);
        if(s>=x)
            high=mid-1;
        else
        {
            mid1=max(mid1,mid);
            low=mid+1;
        }
    }
    return mid1;
}
int32_t main()
{
    IOS;
    cin>>q;
    while(q--)
    {
        cin>>x;
        int mid=BinSearch1(x),t;
        int d=Digits(mid),s=0;
        for(int i=1;i<d;i++)
        {
            int p1=pow(10,i-1)-1,p2=pow(10,i)-1;
            s+=(i)*(sum(mid-p1)-sum(mid-p2));
        }
        s+=d*sum(mid-pow(10,d-1)+1);
        x-=s;
        t=BinSearch2(x)+1;
        mid=t-1;
        d=Digits(mid),s=mid;
        for(int i=2;i<d;i++)
            s+=9*(int)pow(10,i-1)*(i-1);
        s+=(mid-(int)pow(10,d-1)+1)*(d-1);
        x-=s;
        vector<int> v;
        while(t)
            v.push_back(t%10),t/=10;
        reverse(v.begin(),v.end());
        cout<<v[x-1]<<endl;
    }
    return 0;
}