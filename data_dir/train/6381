#include <bits/stdc++.h>
using namespace std;
#define pii             pair<int , int >
#define inf             1111111111
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define mp              make_pair
#define vi              vector<int >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pn              printf("\n")
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b, c)    printf("%d %d %d\n", a, b, c)
#define pb              push_back
#define mem(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
#define x               first
#define y               second
#define lc              (2*i)
#define rc              (2*i+1)

#define prr(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); pn;}
vector<string> split(const string& s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c))
		v.emplace_back(x);
	return move(v);
}
void err(vector<string>::iterator it) {}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr <<a<<" ";
	err(++it, args...);
}

typedef long long LL;
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1,0};int dy[]={0,1,1,1,0,-1,-1,-1,0};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//int  on(int n, int pos) {return n | (1<<pos);} //typecast 1 in case of int
//int  off(int n, int pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

const int M = 100100, mod = 1000000007, bs = 600;
const int MAX = 1007;
int p[M];

inline int nxt(int i)
{
    i = i + 1;
    if (i >= MAX) i-=MAX;
    return i;
}

inline int prv(int i)
{
    i = i - 1;
    if (i < 0) i += MAX;
    return i;
}

struct DequeTypeKisuAkta {

    int A[MAX], l, r, cnt[M];

    DequeTypeKisuAkta() {l = 0; r = -1; mem(cnt, 0);}

    void push(int x)
    {
        r = nxt(r);
        A[r] = x;
        cnt[x]++;
    }

    int shift_right(int newval)
    {
        int temp = A[r];
        r = prv(r);
        l = prv(l);
        A[l] = newval;

        cnt[newval] ++;
        cnt[temp] --;

        return temp;
    }

    int shift_right(int l, int r, int newval = -1)
    {
        int temp = A[r];
        for (int i = r; i!=l; i = prv(i)) A[i] = A[prv(i)];
        A[l] = newval == -1? temp : newval;

        cnt[A[l]] ++;
        cnt[temp] --;

        return temp;
    }

    int access(int ith)
    {
        for (int i=l, j=0; j < MAX ; i = nxt(i), j++) if (j == ith) return i;
        return -1;
    }
}S[bs];

void update(int l, int r)
{
    int i, j, sum = 0, L = l/bs, R = r/bs;
    int posl = S[L].access(l%bs), posr = S[R].access(r%bs);

    if (L == R)
    {
        S[L].shift_right(posl, posr);
    }
    else
    {
        int temp = S[R].A[posr];
        temp = S[L].shift_right(posl, S[L].r, temp);
        for (i = L+1; i < R; i++) temp = S[i].shift_right(temp);
        temp = S[R].shift_right(S[R].l, posr, temp);
    }

}

int query(int l, int r, int k)
{
    int i, j, sum = 0, L = l/bs, R = r/bs;
    int posl = S[L].access(l%bs), posr = S[R].access(r%bs);

    if (L == R)
    {
        for (i = posl; prv(i)!=posr; i = nxt(i)) if (S[L].A[i] == k) sum ++;
    }
    else
    {
        for (i = posl; prv(i)!=S[L].r; i = nxt(i)) if (S[L].A[i] == k) sum ++;
        for (i = S[R].l; prv(i)!=posr; i = nxt(i)) if (S[R].A[i] == k) sum ++;
        for (i=L+1; i<R; i++) sum += S[i].cnt[k];
    }

    return sum;
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("C:\\Users\\Dell\\Desktop\\in.txt", "r", stdin);
//    freopen("C:\\Users\\Dell\\Desktop\\in.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);

    int i, j, k, l, r, n, q, lastans = 0, t;

    in(n);
    for (i=0; i<n; i++) in(p[i]);

    j = -1;
    for (i=0; i<n; i++)
    {
        if (i%bs == 0) j++;
        S[j].push(p[i]);
    }

    in(q);
    while (q--)
    {
        in3(t, l, r);
        l = (l + lastans - 1) % n;
        r = (r + lastans - 1) % n;

        if (l > r) swap(l, r);

        if (t == 1)
        {
            update(l, r);
        }
        else
        {
            in(k);
            k = (k + lastans - 1) % n + 1;

            lastans = query(l, r, k);
            pr(lastans);
        }
    }

return 0;
}
