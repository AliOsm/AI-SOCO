#define _CRT_SECURE_NO_WARNINGS

#pragma comment(linker, "/STACK:250000000")

#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
#include <complex>
#include <functional>
#include <numeric>
#include <random>
#include <cstring>
#include <ctime>

#define y1 klfjvkldfngldf

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;

int n;
char buf[100000 + 1];
int cnt[26];

set<int> G[26];
set<int> Gt[26];

int color[26];
int used[26];

bool cycle(int v)
{
	color[v] = 1;
	for (int to : G[v])
	{
		if (color[to] == 1)
			return 1;
		if (!color[to] && cycle(to))
			return 1;
	}
	color[v] = 2;
	return 0;
}

int main()
{
	scanf("%d", &n);
	for (int i = 0; i < n; ++i)
	{
		scanf("%s", buf);
		memset(cnt, 0, sizeof(cnt));
		int m = strlen(buf);
		for (int j = 0; j < m; ++j)
		{
			cnt[buf[j] - 'a']++;
			used[buf[j] - 'a'] = 1;
		}
		bool ok = 1;
		for (int j = 0; j < 26; ++j)
			ok &= cnt[j] <= 1;
		if (!ok)
		{
			printf("NO\n");
			return 0;
		}
		for (int j = 0; j < m - 1; ++j)
		{
			int from = buf[j] - 'a';
			int to = buf[j + 1] - 'a';
			G[from].insert(to);
			Gt[to].insert(from);
		}
	}

	for (int i = 0; i < 26; ++i)
	{
		if (G[i].size() > 1 || Gt[i].size() > 1)
		{
			printf("NO\n");
			return 0;
		}
	}

	for (int i = 0; i < 26; ++i)
	{
		if (!color[i] && cycle(i))
		{
			printf("NO\n");
			return 0;
		}
	}

	vector<string> res;
	for (int i = 0; i < 26; ++i)
	{
		if (!used[i])
			continue;
		if (!Gt[i].size())
		{
			int v = i;
			string add = "";
			add += (char)(v + 'a');
			while (G[v].size())
			{
				int to = *G[v].begin();
				add += (char)(to + 'a');
				v = to;
			}
			res.push_back(add);
		}
	}
	sort(res.begin(), res.end());

	for (string & s : res)
		printf("%s", s.c_str());
	printf("\n");


	return 0;
}