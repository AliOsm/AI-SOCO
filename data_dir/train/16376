/*
ID: hepic
PROG: sabotage
LANG: C++11
*/
#include <bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i<=b; ++i)
#define REP(i, a, b) for(auto i=a; i<b; ++i)
#define FORI(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REPI(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define PI acos(-1)
#define open_read freopen("disrupt.in", "r", stdin)
#define open_write freopen("disrupt.out", "w", stdout)

using namespace std;

typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair<double, double> PDD;
typedef pair<int, int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<ULL, ULL> PUU;
typedef pair<LL, PLL> PLPLL;
typedef pair<PLL, PLL> PPLLPLL;
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    out << "(" << obj.first << ", " << obj.second << ")";
    return out;
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, multiset<T> cont)
{
    typename multiset<T>::const_iterator itr = cont.begin();
    typename multiset<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N])
{
     REP(i, 0, N)
        out<<arr[i]<<" ";
    out<<endl;

    return out;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}


template<typename T>
T fast_exp_pow(T base, T exp, T mod)
{
    T res = 1;

    while(exp)
    {
        if(exp&1)
        {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;
    }

    return res % mod;
}

/*#################################################################################################################
###################################################################################################################
###################################################################################################################
#################################################################################################################*/

struct info {
    int cost, changes, sold, goal;
    PII loc;
    
    info (int _cost, int _changes, int _sold, int _goal, PII _loc) : cost(_cost), changes(_changes), sold(_sold), goal(_goal), loc(_loc) {}
};

int N, minCost = 99999999, minChanges = 99999999;
int board[15][15], minDist[110][110][110][5];
PII location[110];
queue<info> que;


void dijkstra() {
    FOR (i, 1, 3) {
        que.push(info(0, 0, i, 2, location[1]));
    }

    while (!que.empty()) {
        int cost = que.front().cost;
        int changes = que.front().changes;
        int sold = que.front().sold;
        int goal = que.front().goal;
        PII loc = que.front().loc; 

        // cout << cost << ", " << changes << ", " << sold << ", " << goal << ", " << loc << endl;
        que.pop();

        if (goal == N * N + 1 && board[loc.fir][loc.sec] == N * N) {
            if (minCost > cost) {
                minCost = cost;
                minChanges = changes;
            } else if (minCost == cost && minChanges > changes) {
                minChanges = changes;
            }

            continue;
        }

        if (sold == 1) {
            FOR (k, 1, 2) {
                for (int i = -1; i <= 1; i += 2) {
                    for (int j = -1; j <= 1; j += 2) {
                        int newCost = cost + 1;
                        int newGoal = goal;
                        PII newLoc = mp(loc.fir + k * i, loc.sec + (3 - k) * j);
                        int num = board[newLoc.fir][newLoc.sec];
                        
                        if (newLoc.fir >= 1 && newLoc.fir <= N && newLoc.sec >= 1 && newLoc.sec <= N) {
                            if (location[goal] == newLoc && goal <= N * N) {
                                ++newGoal;
                            }
                            
                            if (newCost < minDist[num][changes][newGoal][sold]) {
                                que.push(info(newCost, changes, sold, newGoal, newLoc));
                                minDist[num][changes][newGoal][sold] = newCost;
                            }
                        }
                    }
                }
            }
        } else if (sold == 2) {
            FOR (i, 1, N) {
                for (int j = -1; j <= 1; j += 2) {
                    for (int k = -1; k <= 1; k += 2) {
                        int newCost = cost + 1;
                        int newGoal = goal;
                        PII newLoc = mp(loc.fir + i * j, loc.sec + i * k);
                        int num = board[newLoc.fir][newLoc.sec];

                        if (newLoc.fir >= 1 && newLoc.fir <= N && newLoc.sec >= 1 && newLoc.sec <= N) {
                            if (location[goal] == newLoc && goal <= N * N) {
                                ++newGoal;
                            }
                            
                            if (newCost < minDist[num][changes][newGoal][sold]) {
                                que.push(info(newCost, changes, sold, newGoal, newLoc));
                                minDist[num][changes][newGoal][sold] = newCost;
                            }
                        }
                    }
                }
            }
        } else if (sold == 3) {
            FOR (j, 0, 1) {
                for (int k = -1; k <= 1; k += 2) {
                    FOR (i, 1, N) {
                        int newCost = cost + 1;
                        int newGoal = goal;
                        PII newLoc = mp(loc.fir + k * j * i, loc.sec + k * (1 - j) * i);
                        int num = board[newLoc.fir][newLoc.sec];

                        if (newLoc.fir >= 1 && newLoc.fir <= N && newLoc.sec >= 1 && newLoc.sec <= N) {
                            if (location[goal] == newLoc && goal <= N * N) {
                                ++newGoal;
                            }
                            
                            if (newCost < minDist[num][changes][newGoal][sold]) {
                                que.push(info(newCost, changes, sold, newGoal, newLoc));
                                minDist[num][changes][newGoal][sold] = newCost;
                            }
                        }
                    }
                }
            }
        }

        int newCost = cost + 1;
        int newChanges = changes + 1;
        int num = board[loc.fir][loc.sec];
        
        FOR (newSold, 1, 3) {
            if (newSold != sold && newChanges <= 100) {
                if (newCost < minDist[num][newChanges][goal][newSold]) {
                    que.push(info(newCost, newChanges, newSold, goal, loc));
                    minDist[num][newChanges][goal][newSold] = newCost;
                }
            }
        }
    }
}


int main() {
    scanf("%d", &N);

    REP (i, 0, 110) {
        REP (j, 0, 110) {
            REP (k, 0, 110) {
                REP (a, 0, 5) {
                    minDist[i][j][k][a] = 99999999;
                }
            }
        }
    }

    FOR (i, 1, N) {
        FOR (j, 1, N) {
            scanf("%d", &board[i][j]);
            location[board[i][j]] = mp(i, j);
        }
    }
    
    dijkstra();

    printf("%d %d\n", minCost, minChanges);
    return 0;
}