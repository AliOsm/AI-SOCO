
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <cstdio>
#include <random>
#include <chrono>
#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
//#define int long long
using namespace std;

const int INF = 2e9;
const int MOD = 1e9 + 7;

vector<vector<int>> g;
vector<int> s, ans;
vector<map<int, int>> mp;

void sizes(int v) {
	s[v] = 1;
	for (int u : g[v]) {
		sizes(u);
		s[v] += s[u];
	}
}

void dfs(int v) {
	for (int u : g[v]) {
		dfs(u);
		if (mp[u].size() > mp[v].size()) swap(mp[u], mp[v]);
		for (auto & p : mp[u]) mp[v][p.first] = p.second;
	}

	ans[v] = (mp[v].lower_bound(s[v] / 2 + s[v] % 2) == mp[v].end() ? v : mp[v].lower_bound(s[v] / 2 + s[v] % 2)->second) + 1;
	mp[v][s[v]] = v;
}


void solve() {
	int n, q;
	cin >> n >> q;
	g.resize(n);
	for (int i = 1; i < n; i++) {
		int p;
		cin >> p;
		p--;
		g[p].pb(i);
	}

	s.resize(n);
	sizes(0);
	ans.resize(n);
	mp.resize(n);
	dfs(0);

	for (int i = 0; i < q; i++) {
		int v;
		cin >> v;
		v--;
		cout << ans[v] << '\n';
	}
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	//freopen("network.in", "r", stdin);
	//freopen("network.out", "w", stdout);
	solve();
}
