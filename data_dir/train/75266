#include <algorithm>
#include <cstdio>
#include <iostream>
#include <set>
#include <string>
#include <vector>
using namespace std;

const int N = 100000;

vector<int> getCommonDivisors(const int a, const int b)
{
  vector<int> result;
  for(int i = 1; i <= min(a, b); i++)
    if(a % i == 0 && b % i == 0)
      result.push_back(i);
  return result;
}

bool checkDivisor(const string &s, const int len)
{
  for(int i = 0; i < len; i++)
    for(int j = 1; j * len < s.length(); j++)
      if(s[i] != s[j * len + i])
        return false;
  return true;
}

set<string> getDivisors(const string &s, const vector<int> &divsLength)
{
  set<string> result;
  for(int i = 0; i < divsLength.size(); i++)
    if(checkDivisor(s, divsLength[i]))
      result.insert(s.substr(0, divsLength[i]));
  return result;
}

int main()
{
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  string s1, s2;
  getline(cin, s1);
  getline(cin, s2);

  vector<int> commonDivLength = getCommonDivisors(s1.length(), s2.length());
  set<string> d1 = getDivisors(s1, commonDivLength);
  set<string> d2 = getDivisors(s2, commonDivLength);
  vector<string> commonDivs(d1.size() + d2.size());  
  cout << set_intersection(d1.begin(), d1.end(), d2.begin(), d2.end(), commonDivs.begin()) - commonDivs.begin();

  return 0;
}