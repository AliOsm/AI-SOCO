#include <bits/stdc++.h>
#define F first
#define S second
#define all(a) a.begin(),a.end()
#define setDP(arr) memset(arr,-1,sizeof arr)
#define oo 2000000000
#define inf 1000000000000000LL
#define M 1000000007
#define sc(n) scanf("%d",&n);
typedef long long ll;
using namespace std;
const int N = 205001;
const double PI = acos(-1);
const int SQRT = 7915;

vector<pair<int,int> > edges;
int n;
vector<int> vl,vr;
pair<int,int> a[N],tmp;
vector<pair<int,int> > v;
signed main(){
    #ifndef ONLINE_JUDGE
        freopen("in.txt","r",stdin);
    #endif
    cin >> n;
    for(int i = 1 ; i <= n ; i++){
        scanf("%d",&a[i].F);
        a[i].S=i*2-1;
    }
    sort(a+1,a+n+1);
    deque<pair<int,int> > q;
    for(int i = 1 ; i <= n ; i++){
        if(i&1)q.push_back(a[i]);
        else q.push_front(a[i]);
    }
    while(!q.empty()){
        tmp=q.back();
        q.pop_back();
        v.push_back(tmp);
    }
    for(int i = 0 ; i < v.size() ; i++){
        v[i].F--;
        if(i){
            edges.push_back(make_pair(v[i].S,v[i-1].S));
        }
    }
    int bg,en;
    bg=0;
    en=v.size()-1;
    for(int i = 0 ; i < n ; i+=2){
        int idx=v[bg].F+bg;
        if(idx>=v.size()){
            idx-=v.size();
            edges.push_back(make_pair(v[bg].S+1,vr[idx]));
            if(vr.size()==idx+1){
                vr.push_back(v[bg].S+1);
            }
        }else{
            edges.push_back(make_pair(v[bg].S+1,v[idx].S));
            if(vr.size()==0&&idx==v.size()-1){
                vr.push_back(v[bg].S+1);
            }
        }
        bg++;
        if(bg>en)break;
        idx=en-v[en].F;
        if(idx<0){
            idx=abs(idx);
            idx--;
            edges.push_back(make_pair(v[en].S+1,vl[idx]));
            if(vl.size()==idx+1){
                vl.push_back(v[en].S+1);
            }
        }else{
            edges.push_back(make_pair(v[en].S+1,v[idx].S));
            if(vl.size()==0&&idx==0){
                vl.push_back(v[en].S+1);
            }
        }
        en--;
    }
    for(int i = 0 ; i < edges.size() ; i++){
        printf("%d %d\n",edges[i].F ,edges[i].S);
    }



}
