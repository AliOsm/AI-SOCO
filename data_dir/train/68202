#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int , int >
#define Endl '\n'
#define endl '\n'

#pragma GCC optimize("Ofast")

using namespace std;
using namespace __gnu_pbds;

template <typename T> using ordered_set = tree <T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 gen(chrono::system_clock::now().time_since_epoch().count());

const ll mod = 1e9 + 7;
const int FFTM = 2e9 + 9;

const int SX[4] = {0 , 1 ,  - 1 , 0};
const int SY[4] = {1 , 0 , 0 ,  - 1};
const int rx[8] = {1,  - 1, 0, 0, 1, 1, -1, -1};
const int ry[8] = {0, 0, 1,  - 1, 1,  - 1, 1, -1};
const int kx[8] = {1, 1, -1, -1, 2, 2, -2, -2};
const int ky[8] = {2, -2, 2, -2, 1, -1, 1, -1};

typedef cc_hash_table< int, int, hash<int>, equal_to<int>, direct_mask_range_hashing<int>, hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

void solve(){
    int n, m;
    cin >> n >> m;
    int a[13][2002];
    for (int i = 0;i < n; ++i){
        for (int j = 0;j < m; ++j){
            cin >> a[i][j];
        }
    }

    vector < pair < int, int > > all;
    for (int i = 0;i < m; ++i){
        int mx = 0;
        for (int j = 0;j < n; ++j){
            mx = max(mx, a[j][i]);
        }
        all.pb({mx, i});
    }
    sort(all.rbegin(), all.rend());
    vector < int > ma;
    for (int i = 0;i < min(n, m); ++i)ma.pb(all[i].S);

    int calc[12][(1 << 12)+1]={};

    for(int i = 0;i < ma.size();i++){
       int st = ma[i];
       for(int mask = 0;mask < (1 << n);mask++){
        int o = 0;
        for(int sd=0;sd<n;sd++){
            int sum=0;
            for(int j=0;j<n;j++){
                if((mask & (1<<j))) sum += a[(j+sd)%n][st];
            }
            o=max(o,sum);
        }
        calc[i][mask]=o;
       }
    }

      int dp[12][(1<<12)]={};

  for(int i=0;i<min(n,m);i++){
    for(int mask=0;mask<(1<<n);mask++){
    int ne=0;
    dp[i+1][mask]=max(dp[i+1][mask],dp[i][mask]);
        for(int j=0;j<12;j++){
            if((mask &(1<<j))==0){
                ne+=(1<<j);
        }
    }
    for(int s=ne;s;s=((s-1)&ne)){
        dp[i+1][mask|s]=max(dp[i+1][mask|s],dp[i][mask]+calc[i][s]);
    }
   }
  }

  cout<<dp[min(n,m)][(1<<n)-1]<<endl;

}

int32_t main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//    freopen("railroad.in", "r", stdin);
//    freopen("railroad.out", "w", stdout);
#endif
    int t;
    cin >> t;
    for (int i = 0;i < t; ++i)solve();
    return 0;
}
