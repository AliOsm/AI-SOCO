#include<iostream>
#include<unistd.h>
#include<iomanip>
#include<cmath>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<cassert>
#include<cstring>
#include<bitset>
#include<iterator>
#include<queue>
#include<unordered_map>

typedef unsigned long long ll;
using namespace std;

int const N = 100 * 1000 + 16;
int const M = 1000 * 1000 * 1000 + 7;
int const inf = 1000 * 1000 * 1000;

int n, m;
int a[N];
int b[N];
int c[N];
int L[N];
int R[N];
int V[N];

void dfs(int i, int l, int r) {
  if(i < 1 || l > r)
    return;
  
  auto x = equal_range(a+l, a+r+1, V[i]);
  int left = x.first-a, right = x.second-a;
  fill(b+left, b+right, 1);
  
  dfs(L[i], l, left - 1);
  dfs(R[i], right, r);
}

int main()
{
	cin.tie(0);
	cin.sync_with_stdio(0);
	
	cin >> n;
	auto child = c + 1;
	for(int i = 1; i <= n; ++i) {
	  int v, l, r;
	  cin >> v >> l >> r;
	  L[i] = l;
	  R[i] = r;
	  V[i] = v;
	  a[i] = v;
	  child[l] = 1;
	  child[r] = 1;
	}
	
	sort(a+1, a+1+n);
	int root = std::find(child+1, child+1+n, 0) - child;
	
	if(root == n+1) {
	  cout << n << endl;
	  return 0;
	}
	
	dfs(root, 1, n);
	int cnt = count(b + 1, b + 1 + n, 0);
	cout << cnt << endl;
}