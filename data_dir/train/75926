#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,avx,avx2,popcnt,tune=native")
#pragma GCC optimize("SEX_ON_THE_BEACH")	
#pragma comment(linker, "/STACK:36777216")
#define _CRT_SECURE_NO_WARNINGS

#include <set>
#include <map>
#include <deque>
#include <cmath>
#include <queue>
#include <cassert>
#include <random>
#include <bitset>
#include <iomanip>
#include <numeric>
#include <time.h>//////////////
#include <ctime>
#include <string>
#include <cstdio>
#include <vector>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
#define mp make_pair
#define pbc push_back
#define pob pop_back()
#define empb emplace_back
#define queuel queue<long long>
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define matrix vector<vector<ll>>
#define pin(p) cin >> p.first >> p.second;
#define rev(v) reverse(v.begin(), v.end());
#define mx(v) max_element(v.begin(), v.end());
#define mn(v) min_element(v.begin(), v.end());
#define sout(s, c) for (auto i : s) cout << i << c;
#define pout(p) cout << p.first << " " << p.second;
#define er(v, l, r) erase(v.begin() + l, v.begin() + r);
#define vin(v) for (ll i = 0; i < v.size(); ++i) cin >> v[i];
#define vout(v, c) for (int i = 0; i < v.size(); ++i) cout << v[i] << c;
#define pushi(v, a) for (int i = 0; i < a.size(); ++i) v.push_back(a[i]);
#define sin(s, n) for (int i = 0; i < n; ++i){int a; cin >> a; s.insert(a); }
#define fastio() ios_base::sync_with_stdio(0); cout.tie(0); cin.tie(0); srand(time(NULL))
#define sp system("pause")
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
using namespace std;//СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚СЂСџВ¦Р‚
					//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
const int MAXN = 6e3 + 28;
const int inf = 1e9;
const ld PI = acos(-1);
const int mod = (int)998244353;
const int MOD = 1000000007;
const int MOD9 = 1000000009;
const int a228 = 18;
const ld obr = (ld)1 / sqrt(2);
vector<char> kek{ 'R','G','B' };
int get(char c)
{
	return find(all(kek), c) - kek.begin();
}
int get1(int r, int c)
{
	if (r < 0) return 0;
	return r / 3 + ((r % 3) >= c);
}
vector<vector<vector<int>>> pref;
int kekget(int l, int r, char c, int ost)
{
	return pref[get(c)][ost][r] - (l == 0 ? 0 : pref[get(c)][ost][l - 1]);
}
signed main()
{
	fastio();
	int q;
	cin >> q;
	while (q--)
	{
		int n, k;
		cin >> n >> k;
		string s;
		cin >> s;
		vector<vector<vector<int>>> prefa(3, vector<vector<int>>(3, vector<int>(n)));

		for (int i = 0; i < s.size(); ++i)
		{
			prefa[0][i % 3][i] = (i < 3 ? 0 : prefa[0][i % 3][i - 3]);
			prefa[1][i % 3][i] = (i < 3 ? 0 : prefa[1][i % 3][i - 3]);
			prefa[2][i % 3][i] = (i < 3 ? 0 : prefa[2][i % 3][i - 3]);
			for (int j = 0; j < 3; ++j)
			{
				prefa[j][0][i] = max(prefa[j][0][i], (i < 1 ? 0 : prefa[j][0][i - 1]));
				prefa[j][1][i] = max(prefa[j][1][i], (i < 1 ? 0 : prefa[j][1][i - 1]));
				prefa[j][2][i] = max(prefa[j][2][i], (i < 1 ? 0 : prefa[j][2][i - 1]));
			}
			prefa[get(s[i])][i % 3][i] = (i < 3 ? 0 : prefa[get(s[i])][i % 3][i - 3]) + 1;

		}
		pref = prefa;
		int ans = inf;
		for (int i = 0; i + k - 1 < s.size(); ++i)
		{
			int tans = inf;
			int fam = get1(i + k - 1, i % 3) - get1(i - 1, i % 3);
			int fam1 = get1(i + k - 1, (i + 1) % 3) - get1(i - 1, (i + 1) % 3);
			int fam2 = get1(i + k - 1, (i + 2) % 3) - get1(i - 1, (i + 2) % 3);
			int l = i, r = i + k - 1;
			tans = min({ tans, abs(fam - kekget(l,r,'R', i % 3)) + abs(fam1 - kekget(l,r,'G',(i + 1) % 3)) + abs(fam2 - kekget(l,r,'B',(i + 2) % 3)) });
			tans = min({ tans, abs(fam - kekget(l,r,'G', i % 3)) + abs(fam1 - kekget(l,r,'B',(i + 1) % 3)) + abs(fam2 - kekget(l,r,'R',(i + 2) % 3)) });
			tans = min({ tans, abs(fam - kekget(l,r,'B', i % 3)) + abs(fam1 - kekget(l,r,'R',(i + 1) % 3)) + abs(fam2 - kekget(l,r,'G',(i + 2) % 3)) });
			ans = min(ans, tans);
		}
		cout << ans << endl;
	}
	//sp;
}


//you should actually read the stuff at the bottom
/* stuff you should look for
* int overflow, array bounds
* special cases (n=1?), set tle
* do smth instead of nothing and stay organized
*/