#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
#include<set>
#include<algorithm>
#define N 200010
#define inf 1000000000
#define mp make_pair
using namespace std;
int n, m;
int edges[N][3];
bool vis[N];
int dis[N], rep[N];
set<pair<int, int> > que;
set<int> used;
vector<int> edge[N];
int pre[N], work;
void addEdge (int num, int u, int v, int c) {
	edges[num][0] = u;
	edges[num][1] = v;
	edges[num][2] = c;
}
void spfa () {
	memset(vis, false, sizeof(vis));
	for (int i = 1; i <= n; ++i) {
		dis[i] = inf;
		rep[i] = inf;
	}
	dis[1] = 0;
	rep[1] = 0;
	vis[1] = true;
	que.clear();
	que.insert(mp(dis[1], 1));
	while (!que.empty()) {
		int cur = (*que.begin()).second;
		que.erase(*que.begin());
		if (cur == n) return;
		for (int i = 0; i < edge[cur].size(); ++i) {
			int num = edge[cur][i];
			int v = edges[num][1];
			if (dis[v] > dis[cur] + 1) {
				dis[v] = dis[cur] + 1;
				pre[v] = num;
				rep[v] = rep[cur] + edges[num][2];
				que.insert(mp(dis[v], v));
			} else {
				if (dis[v] == dis[cur] + 1) {
					if (rep[v] > rep[cur] + edges[num][2]) {
						pre[v] = num;
						rep[v] = rep[cur] + edges[num][2];
					}
				}
			}
		}
	}
}
void dfs (int cur) {
	if (cur == 1) {
		return ;
	}
	int c = edges[pre[cur]][2];
	if (c) {
		cout<<edges[pre[cur]][0]<<" "<<edges[pre[cur]][1]<<" "<<edges[pre[cur]][2]<<endl;
	} else {
		used.insert(pre[cur]);
	}
	dfs (edges[pre[cur]][0]);
}
int main() {
	int u, v, c;
	while (cin>>n>>m) {
		work = 0;
		for (int i = 0; i < m; ++i) {
			scanf("%d%d%d", &u, &v, &c);
			if (c) {
				work++;
			}
			addEdge(2 * i, u, v, c ^ 1);
			edge[u].push_back(2 * i);
			addEdge(2 * i + 1, v, u, c ^ 1);
			edge[v].push_back(2 * i + 1);
		}
		spfa();
		cout<<work - dis[n] + 2 * rep[n]<<endl;
		used.clear();
		dfs(n);
	//	cout<<"here"<<endl;
		/*for (set<int>::iterator itr = used.begin(); itr != used.end(); ++itr) {
            cout<<(*itr)<<endl;
        }*/
		for (int i = 0; i < m; ++i) {
            if (edges[2 * i][2]) continue;
			if ((used.find(2 * i) == used.end()) && (used.find(2 * i + 1) == used.end())) {
				cout<<edges[2 * i][0]<<" "<<edges[2 * i][1]<<" "<<edges[2 * i][2]<<endl;
			}
		}
	}
	return 0;
}
