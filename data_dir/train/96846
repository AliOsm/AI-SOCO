#include <bits/stdc++.h>
using namespace std;
const int N = 1e6 + 5;
int n, tin[N], tout[N], a[N], tree[N * 4], ob[N * 4], k, t;
vector < int > g[N];
stack < int > q;

void dfs(int x){
    tin[x] = ++t;
    for (int i = 0; i < g[x].size(); ++i){
        int y = g[x][i];
        dfs(y);
    }
    tout[x] = t;
}

void push(int v, int l, int r){
    if (!ob[v])return;
    tree[v] += ob[v];
    if (l != r){
        ob[v + v] += ob[v];
        ob[v + v + 1] += ob[v];
    }
    ob[v] = 0;
}

void add(int v, int l, int r, int ll, int rr, int x){
    push(v, l, r);
    if (l > r || ll > rr || l > rr || r < ll)return;
    if (l >= ll && r <= rr){
        ob[v] += x;
        push(v, l, r);
        return;
    }
    int mid = (l + r) / 2;
    add(v + v, l, mid, ll, rr, x);
    add(v + v + 1, mid + 1, r, ll, rr, x);
    tree[v] = max(tree[v + v], tree[v + v + 1]);
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);
    cin >>n>>k;
    for (int i = 1; i <= n; ++i){
        cin >>a[i];
    }
    a[n + 1] = 1e9;
    q.push(n + 1);
    for (int i = n; i >= 1; --i){
        while (a[i] >= a[q.top()]){
            q.pop();
        }
        g[q.top()].push_back(i);
        q.push(i);
    }
    dfs(n + 1);
    for (int i = 1; i <= n; ++i){
        add(1, 1, n + 1, tin[i], tout[i], 1);
        if (i > k)add(1, 1, n + 1, tin[i - k], tout[i - k], -1);
        push(1, 1, n + 1);
        if (i >= k)cout <<tree[1]<<" ";
    }
}
