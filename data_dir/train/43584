#include <bits/stdc++.h>

using namespace std;

#define mx 300005
#define int long long
#define pii pair <int, int>
#define piii pair <int, pii>
#define fi first
#define se second
#define mod 998244353
#define inf 1e9+19
#define pb push_back
#define mem(ara, x) memset(ara, x, sizeof ara)
#define read() freopen("in.txt", "r", stdin)
#define write() freopen("out.txt", "w", stdout)
#define fst ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

int ara[mx], vis[mx], sz[mx];
vector <pii> v;
priority_queue < piii, vector <piii>, greater <piii> > g;

void initset(int n){
    for(int i = 1; i<=n; i++){
        ara[i] = i;
        sz[i] = 1;
    }
}

int findset(int i){
    if(ara[i] == i) return i;
    return ara[i] = findset(ara[i]);
}

bool issameset(int i, int j){
    return (findset(i)==findset(j));
}

void unionset(int i, int j){
    int a = findset(j);
    int b = findset(i);
    if(a==b) return;
    if(sz[a]>=sz[b]){
        sz[a]+=sz[b];
        ara[b] = a;
    }
    else{
        sz[b]+=sz[a];
        ara[a] = b;
    }
}

int32_t main(){
    //read();
    //fst;
    int n, m;
    while(scanf("%lld%lld", &n, &m)!=EOF){
        for(int i=0;i<n;i++){
            scanf("%lld", &ara[i+1]);
            v.push_back({ara[i+1], i+1});
        }
        sort(v.begin(), v.end());
        mem(vis, 0);
        int ans = 0;
        vis[v[0].se] = 1;
        while(m--){
            int a, b, c;
            scanf("%lld%lld%lld", &a, &b, &c);
            g.push({c, {a, b}});
        }
        for(int i=1;i<n;i++){
            int x = v[i].se;
            int y = v[0].se;
            g.push({ara[x] + ara[y], { x, y } });
        }
        initset(n);
        while(!g.empty()){
            int a = g.top().se.fi;
            int b = g.top().se.se;
            int c = g.top().fi;
            if(!issameset(a, b)){
                unionset(a, b);
                ans += c;
            }
            g.pop();
        }
        cout << ans << endl;
        v.clear();
    }
    return 0;
}





