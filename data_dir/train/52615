#pragma GCC target("avx2")
#pragma GCC optimize("O3")

# include <x86intrin.h>
# include <bits/stdc++.h>

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
 
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

inline void Input_Output () {
	//freopen(".in", "r", stdin);
   //freopen(".out", "w", stdout);
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 3123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m;
ll bal[N];
vector < int > g[N];
pair < int, ll > dp[N][N], ndp[N];
int sz[N];


void dfs (int v, int par = 0) {
	sz[v] = 1;
	dp[v][0] = mp(0, bal[v]);
	//cout << v << ' '<< bal[v] << "st\n";
	for (auto to : g[v]) if (to != par) {
		dfs(to, v);

		for (int j = 0; j <= sz[v] + sz[to]; ++j) {
			ndp[j] = dp[v][j];
			dp[v][j] = mp(-n, 0);
		}
		for (int j = sz[v]; j >= 0; --j) {
			for (int k = sz[to]; k >= 0; --k) {
				pair < int, ll > nw;
				nw = mp(ndp[j].F + dp[to][k].F, ndp[j].S + dp[to][k].S);
				dp[v][j + k] = max(dp[v][j + k], nw);
				nw = mp(ndp[j].F + dp[to][k].F + (dp[to][k].S > 0), ndp[j].S);
				dp[v][j + k + 1] = max(dp[v][j + k + 1], nw);
			}
		}

		sz[v] += sz[to];
		
	}
	
}

inline void solve () {
	cin >> n >> m;
	for (int i = 1, x; i <= n; i ++) {
		cin >> x;
		bal[i] = -x;
		g[i].clear();
	}	
	for (int i = 1, x; i <= n; i ++) {
		cin >> x;
		bal[i] += x;
	}

	for (int i = 1; i < n; i ++) {
		int l, r;
		cin >> l >> r;
		g[l].pb(r);
		g[r].pb(l);	
	}

	for (int i = 1; i <= n; ++ i) {
		for (int j = 0; j <= n; ++ j) 	
			dp[i][j] = mp(-n, 0);
	}

	dfs(1);                                         
	--m;
	cout << dp[1][m].F + (dp[1][m].S > 0) << '\n';

}

int main () {
   	SpeedForce;
	int tt = 1;
	cin >> tt;
	while(tt--) solve();
   	return Accepted;
}

// B...a