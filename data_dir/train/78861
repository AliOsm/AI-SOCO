#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
 
#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2
 
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound
 
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;
 
template <class T1, class cmp = less <T1>> using Tree = tree <T1, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2> using um = unordered_map <T1, T2>;
template <class T> using us = unordered_set <T>;
template <class T> using vec = vector <T>;
 
const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <ll>::max() >> 1;
const ll N = 4e5 + 1;
const ll M = 20;
ll n;

ll arr[N];
ll cnt[M];
ll sum[M][1 << M];

ll dp[1 << M];

void input() {
    cin >> n;
    for(ll i = 1; i <= n; ++i) {
        cin >> arr[i];
        arr[i]--;
    }
}

ll calc(ll mask) {
    if(!mask) {
        return 0;
    }
    if(dp[mask] != -1) {
        return dp[mask];
    }
    ll res = inf;
    for(ll i = 0; i < M; ++i) {
        if(!((mask >> i) & 1)) {
            continue;
        }
        ll next = mask ^ (1 << i);
        res = min(res, calc(next) + sum[i][next]);
    }
    return dp[mask] = res;
}

void solve() {
    for(ll i = 1; i <= n; ++i) {
        ll c = arr[i];
        for(ll j = 0; j < M; ++j) {
            sum[c][1 << j] += cnt[j];
        }
        cnt[c]++;
    }
    for(ll i = 0; i < M; ++i) {
        for(ll j = 1; j < (1 << M); ++j) {
            if(j & (j - 1)) {
                ll m1 = j ^ lsb(j);
                ll m2 = lsb(j);
                sum[i][j] = sum[i][m1] + sum[i][m2];
            }
        }
    }
    memset(dp, -1, sizeof dp);
    cout << calc((1 << M) - 1) << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
