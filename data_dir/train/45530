/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=1e9+7ll;
lli INF=1e17;
lli eps=1e-8;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,m,x;
const double pi=3.14159265358979323846;
//matrix exponentiation is associative and distributive
long long gcd(long long a,long long b)
{
 while (a&&b)a>b?a%=b:b%=a;
 return a+b;
}
lli sparse[100005][25];
void precompute(lli a[])
{
    for(int i=1;i<=n;i++)
    sparse[i][0]=a[i];
    
    for(int j=1;j<=24;j++)
    {
        int span=(1<<j);
        for(int i=1;(i+span)<=n+1;i++)
        {
            sparse[i][j]=gcd(sparse[i][j-1],sparse[i+(1<<(j-1))][j-1]);
        }
    }
    
}

lli checkgcd(lli l,lli r)
{
    lli gg=0;
    lli len=r-l+1;
    len=log2(len);
    lli dif=r-((1<<len))+1;
    return gcd(sparse[l][len],sparse[dif][len]);
}
map<lli,lli> mp;
lli a[100005];
int main()
{
 cin.tie(0);
 scanf("%lld",&n);
 for(int i=1;i<=n;i++)
 scanf("%lld",&a[i]);
 
 precompute(a);
 
//  cout<<checkgcd(2,3)<<"\n";
 
 lli q;
 scanf("%lld",&q);
 for(int i=1;i<=n;i++)
 {
     lli val=a[i];
     lli start=i;
     while(start<=n)
     {
     lli l=start-1;
     lli r=n;
     lli ans=i;
     while(l<r)
     {
         lli m=(l+r)/2 + 1;
         lli gg=checkgcd(i,m);
         if(gg<val)
         r=m-1;
         else
         l=m,ans=m;
     }
     mp[val]+=(ans-start+1);
     start=ans+1;
     val=gcd(val,a[start]);
     }
 }
 
 for(int i=1;i<=q;i++)
 {
     lli x;
     scanf("%lld",&x);
     printf("%lld\n",mp[x]);
 }
 
}