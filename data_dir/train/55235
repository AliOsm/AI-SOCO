#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MX = 200005;

vector<int> neigh[MX];
int depth[MX];
int par[MX];
int up[MX];
bool vis[MX];

void dfs(int v, int p, int d)
{
	vis[v] = true;
	par[v] = p;
	depth[v] = d;
	up[v] = d;
	
	int to1 = -1, to2 = -1;
	
	for (int u : neigh[v]) {
		if (u == p) continue;
		if (!vis[u]) {
			dfs(u, v, d + 1);
			up[v] = min(up[v], up[u]);
			
			if (up[u] < depth[v]) {
				if (to1 == -1) to1 = u;
				else to2 = u;
			}
		}
		else if (vis[u] && depth[u] < depth[v]) {
			up[v] = min(up[v], depth[u]);
			if (depth[u] < depth[v]) {
				if (to1 == -1) to1 = u;
				else to2 = u;
			}
		}
	}
	
	if (to1 != -1 && to2 != -1) {
		vector<int> A, B, C;
		
		A.push_back(v);
		while (depth[to1] > depth[v]) {
			A.push_back(to1);
			for (auto u : neigh[to1]) {
				if (depth[u] < depth[v] || (depth[u] > depth[to1] && up[u] < depth[v])) {
					to1 = u;
					break;
				}
			}
		}
		A.push_back(to1);
		
		B.push_back(v);
		while (depth[to2] > depth[v]) {
			B.push_back(to2);
			for (auto u : neigh[to2]) {
				if (depth[u] < depth[v] || (depth[u] > depth[to2] && up[u] < depth[v])) {
					to2 = u;
					break;
				}
			}
		}
		B.push_back(to2);
		
		while (depth[v] >= max(depth[to1], depth[to2])) {
			C.push_back(v);
			v = par[v];
		}
		
		if (depth[to1] > depth[to2]) {
			vector<int> tmp;
			while (to1 != to2) {
				tmp.push_back(to1);
				to1 = par[to1];
			}
			reverse(tmp.begin(), tmp.end());
			for (auto x : tmp) B.push_back(x);
		}
		else {
			vector<int> tmp;
			while (to2 != to1) {
				tmp.push_back(to2);
				to2 = par[to2];
			}
			reverse(tmp.begin(), tmp.end());
			for (auto x : tmp) A.push_back(x);
		}
		
		printf("YES\n");
		printf("%d ", (int)A.size());
		for (int x : A) printf("%d ", x);
		printf("\n");
		printf("%d ", (int)B.size());
		for (int x : B) printf("%d ", x);
		printf("\n");
		printf("%d ", (int)C.size());
		for (int x : C) printf("%d ", x);
		printf("\n");
		exit(0);
	}
}

int main()
{
	int n, m;
	ignore = scanf("%d %d", &n, &m);
	
	for (int i = 0; i < m; i++) {
		int u, v;
		ignore = scanf("%d %d", &u, &v);
		neigh[u].push_back(v);
		neigh[v].push_back(u);
	}
	for (int v = 1; v <= n; v++) if (!vis[v]) dfs(v, 0, 1);
	printf("NO\n");
}
