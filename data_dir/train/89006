#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

const int N = 200000;

vector<int> g[N];
bool color[N];
long long num[N][2];
long long cnt[2];

void dfs(int u, int p) {
  num[u][color[u]] = 1;
  for (int v : g[u]) if (v != p) {
    color[v] = color[u] ^ 1;
    dfs(v, u);
    num[u][0] += num[v][0];
    num[u][1] += num[v][1];
  }
}

void dfs2(int u, int p) {
  for (int v : g[u]) if (v != p) {
    dfs2(v, u);
    for (int i = 0; i < 2; i++) {
      for (int j = 0; j < 2; j++) {
        cnt[i ^ j] += (num[0][i] - num[v][i]) * num[v][j];
      }
    }
  }
}

int main() {
  int n;
  cin >> n;
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    scanf("%d %d", &u, &v);
    u--;
    v--;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  dfs(0, -1);
  dfs2(0, -1);
  long long ans = cnt[0] / 2;
  ans += (cnt[1] + num[0][0] * num[0][1]) / 2;
  cout << ans << endl;
}

