#include "bits/stdc++.h"
using namespace std;

#define debug(args...) fprintf(stderr, args)

typedef long long ll;

const ll mod = 1e9 + 7;
const int LOG = 35;

int q;

int X[LOG];
int Y[LOG];
int Z[LOG];

ll dp[LOG][2][2][2];
ll sum[LOG][2][2][2];

ll solve(int x, int y, int z) {
	if(x < 0 || y < 0 || z < 0)
		return 0;

	for(int i = 0; i <= 30; ++i) {
		X[i + 1] = ((1 << i) & x) ? (1) : (0);
		Y[i + 1] = ((1 << i) & y) ? (1) : (0);
		Z[i + 1] = ((1 << i) & z) ? (1) : (0);
	}

	memset(dp, 0, sizeof(dp));
	memset(sum, 0, sizeof(sum));

	dp[31][1][1][1] = 1;
	sum[31][1][1][1] = 0;

	for(int bit = 31; bit > 0; --bit) 
		for(int flagx = 0; flagx <= 1; ++flagx)
			for(int flagy = 0; flagy <= 1; ++flagy)
				for(int flagz = 0; flagz <= 1; ++flagz) 
					for(int x = 0; x <= 1; ++x)
						for(int y = 0; y <= 1; ++y) {
							int z = x ^ y;

							if(flagx && !X[bit] && x == 1) continue;
							if(flagy && !Y[bit] && y == 1) continue;
							if(flagz && !Z[bit] && z == 1) continue;

							int a = bit - 1;
							int b = flagx & (X[bit] == x);
							int c = flagy & (Y[bit] == y);
							int d = flagz & (Z[bit] == z);

							dp[a][b][c][d] = (dp[a][b][c][d] + dp[bit][flagx][flagy][flagz]) % mod;
							sum[a][b][c][d] = (sum[a][b][c][d] + sum[bit][flagx][flagy][flagz]) % mod;
							
							long long add = ((z << (bit - 1)) * (dp[bit][flagx][flagy][flagz])) % mod;
							sum[a][b][c][d] = (sum[a][b][c][d] + add) % mod; 
						}

	ll ans = 0;

	for(int flagx = 0; flagx <= 1; ++flagx)
		for(int flagy = 0; flagy <= 1; ++flagy)
			for(int flagz = 0; flagz <= 1; ++flagz) {
				ans = (ans + dp[0][flagx][flagy][flagz]) % mod;
				ans = (ans + sum[0][flagx][flagy][flagz]) % mod;
			}

	return ans;
}

int main() {
	scanf("%d", &q);

	while(q--) {
		int x1, y1, x2, y2, k;
		scanf("%d %d %d %d %d", &x1, &y1, &x2, &y2, &k);

		--x1, --y1, --x2, --y2, --k;

		ll ans = 0;

		ans = (ans + solve(x2, y2, k)) % mod;
		ans = (ans + solve(x1 - 1, y1 - 1, k)) % mod;
		ans = (ans - solve(x2, y1 - 1, k) + mod) % mod;
		ans = (ans - solve(x1 - 1, y2, k) + mod) % mod;

		printf("%lld\n", ans);
	}

	return 0;
}