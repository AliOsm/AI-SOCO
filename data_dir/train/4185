#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif
#define NO_IO_TIE ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for( auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for( auto & u: a) fin >> u; return fin; }
/* @@@ ----------------------------------- */

void e529()
{
    size_t n, k;
    cin >> n >> k;
    vector<int> a(n);
    cin >> a;

    size_t q;
    cin >> q;
    vector<int> query(q);
    cin >> query;

    map<int, size_t> m;
    m[0] = 0;

    for(const auto i: a)
        for(size_t j = 1; j < k + 1; ++j)
        {
            auto & ref = m[i * (int) j];
            ref = ref ? min(ref, j) : j;
        }

    vector<pair<int, size_t>> w(begin(m), end(m));

    for(const auto acc: query)
    {
        size_t out = k + 1;

        for(size_t i = 0, j = w.size() - 1; i < j + 1; ++i)
        {
            while(i < j && acc < w[i].first + w[j].first)
                -- j;

            if(acc == w[i].first + w[j].first)
                out = min(out, w[i].second + w[j].second);
        }

        if(out < k + 1)
            cout << out << '\n';
        else
            cout << -1 << '\n';
    }


}


int main( const int argc, char * argv [])
{
    NO_IO_TIE;
    e529();

    return EXIT_SUCCESS;
}
