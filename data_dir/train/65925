#include <bits/stdc++.h>
using namespace std ;

#define int long long

typedef pair<int,int> pii ;
#define v first
#define w second

const int N = 3e5 + 5 , INF = 1e18 ;

vector <pii> G[N] ;
int dis[N] ;
int par[N] ;
int deg[N] ;



main() {
    int n , m , k ;
    cin >> n >> m >> k ;
    map < pii , int > Map ;
    for(int i = 1 ; i <= m ; i++) {
        int u , v , w ;
        scanf("%lld %lld %lld",&u,&v,&w) ;
        G[u].push_back({v,w}) ;
        G[v].push_back({u,w}) ;
        if (u > v) swap(u,v) ;
        Map[{u,v}] = i ;
    }
    for(int i = 1 ; i <= n ; i++) {
        dis[i] = INF ;
    }
    dis[1] = 0 ;
    priority_queue < pii > pq ;
    pq.push({0,1}) ;
    while(pq.size()) {
        pii top = pq.top() ; pq.pop() ;
        int u = top.second , w = -top.first;
        if (dis[u] != w) continue ;
        for(pii t: G[u]) {
            int v = t.v ;
            if (dis[u] + t.w < dis[v]) {
                dis[v] = dis[u] + t.w ;
                par[v] = u ;
                pq.push({-dis[v],v}) ;
            }
        }
    }
//
//    for(int i = 1 ; i <= n ; i++) {
//        cout << i << " : " << par[i] << endl ;
//    }

    vector <int> leaf ;
    for(int i = 1 ; i <= n ; i++) {
        deg[par[i]]++ ;
    }
    for(int i = 1 ; i <= n ; i++) {
        if(deg[i] == 0) {
            leaf.push_back(i) ;
        }
    }

    int mustErase = max( (n-1)-k, 0LL ) ;
    while(mustErase--) {
        int u = leaf.back() ;
        leaf.pop_back() ;
        deg[par[u]]-- ;
        if(deg[par[u]] == 0) {
            leaf.push_back(par[u]) ;
        }
        par[u] = 0 ;
    }
    vector < pii > sol ;
    for(int i = 1 ; i <= n ; i++) {
        if (par[i] > 0) {
            sol.push_back({i,par[i]}) ;
        }
    }
    printf ("%lld\n" , (int)sol.size()) ;
    for(pii t : sol){
        int u = t.first , v = t.second ;
        if (u > v) swap(u,v) ;
        printf ("%lld " , Map[{u,v}]) ;
    }
}
