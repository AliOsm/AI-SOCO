#include<bits/stdc++.h>
//#include<ctime>
//#include <stdlib.h>
#define time ios_base::sync_with_stdio(0);cin.tie(0);
#define dpp(arr,val) memset(arr,val,sizeof (arr))
#define ll long long
#define ull unsigned long long
#define ld long double
#define PQ priority_queue
#define pii pair<int,int>
#define pll pair<ll,ll>
#define S second
#define F first
#define MP make_pair
using namespace std;

ll add(ll a,ll b,ll mod)
{
    return (a%mod+b%mod)%mod;
}
ll sub(ll a,ll b,ll mod)
{
    return (a%mod-b%mod+mod)%mod;

}
ll mul(ll a,ll b,ll mod)
{
    return (a%mod*b%mod)%mod;
}
ll sumodd(ll num,ll mod)
{
    return mul(num,num,mod);
}
ll sumeven(ll num,ll mod)
{
    return mul(num,num+1,mod);
}
ll sumrange(ll st,ll en,ll num)
{
    return (num*(st+en)/2);

}
ll gcd(ll a,ll b)
{
    while(b!=0)
    {
        ll a2=a;
        a=b;
        b=a2%b;
    }
    return a;
}
ll lcm(ll a,ll b)
{
    return a/gcd(a,b)*b;
}
string makeitbinary(ll n)
{
    string s;
    while(n)
    {
        s=s+(char)((n%2)+'0');
        n/=2;
    }
    reverse(s.begin(),s.end());
    return s;
}
bool bit(int num,int i)
{
    return((num>>i)&1);
}
ll fastpowermod(ll b,ll p,ll mod)
{
    ll ans=1;
    while(p)
    {
        if (p%2)
        {
            ans=mul(ans,b,mod);
        }
        b=mul(b,b,mod);
        p/=2;
    }
    return ans;
}
ll fastpower(ll b,ll p)
{
    ll ans=1;
    while(p)
    {
        if (p%2)
        {
            ans=ans*b;
        }
        b=b*b;
        p/=2;
    }
    return ans;
}
double fastpower_double(double b,ll p)
{
    double ans=1;
    while(p)
    {
        if (p%2)
        {
            ans=ans*b;
        }
        b=b*b;
        p/=2;
    }
    return ans;
}

ll summation_formula(ll n)
{
    return (n*(n+1)/2);
}
bool lower_vowel(char c)
{
    return (c=='i'||c=='o'||c=='u'||c=='a'||c=='e');
}
string bigint_mini(string s1,string s2)
{
    if (s1.size()>s2.size())
    {
        return s2;
    }
    else if (s2.size()>s1.size())
    {
        return s1;
    }
    for (int i=0; i<s1.size(); i++)
    {
        if ((s1[i]-'0')>(s2[i]-'0'))
        {
            return s2;
        }
        else if ((s2[i]-'0')>(s1[i]-'0'))
        {
            return s1;
        }
    }
    return s1;
}
double polygon_area(int n,vector<double>X,vector<double>Y)
{
    double area=0.0;
    int j=n-1;
    for (int i=0; i<n; i++)
    {
        area+=(X[j] + X[i]) * (Y[j] - Y[i]);
        j=i;
    }
    return abs(area / 2.0);
}
ll sum_of_digits(string s)
{
    ll sum=0;
    for (int i=0; i<s.size(); i++)
    {
        sum+=s[i]-'0';
    }
    return sum;
}
string makeitbase(ll num,ll base)
{
    string s;
    while(num)
    {
        ll mod=num%base;
        s+=(mod+'0');
        num/=base;
    }
    reverse(s.begin(),s.end());
    return s;
}
bool intersect(ll l1,ll r1,ll l2,ll r2)
{
    return(max(l1,l2)<=min(r1,r2));

}
pll find_intersection(ll l1,ll r1,ll l2,ll r2)
{
    return {max(l1,l2),min(r1,r2)};
}
ll sum_ranges(ll l,ll r)
{
    return summation_formula(r)-summation_formula(l);
}
double power_2(double num)
{
    return num*num;
}

struct point{
int x,y;
};

int M=1e9+7;
const int sz=2e5+1;
const int OO= 0x3f3f3f3f;
vector<ll>v;
int n,m;
ll needed(ll x,ll y)
{
     if (y>x){return y-x;}
     else {return m-x+y;}
}
bool check(int ans)
{
    ll before=0;
    for (int i=0;i<v.size();i++)
    {
        if (v[i]>=before)
        {
            if (needed(v[i],before)<=ans)
            {
                continue;
            }
            else {before=v[i];}
        }
        else {
             if (needed(v[i],before)>ans)
             {
                 return 0;
             }
            }


    }
    return 1;
}

int main()
{
    //myf.open("file.txt");
    //freopen("task.in", "r", stdin);
    //freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
    cin>>n>>m;
    for (int i=0;i<n;i++)
    {
        int x;
        cin>>x;
        v.push_back(x);
    }
    int last=-1;
    int l=0;
    int r=m;
    while(l<=r)
    {
        int mid=l+(r-l)/2;
        if (check(mid))
        {
            last=mid;
            r=mid-1;
        }
        else {
            l=mid+1;
        }
    }
    cout<<last<<endl;
    return 0;
}
