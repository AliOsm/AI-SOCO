#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << (x) << endl;
#define ull unsigned long long
#define pii pair<int, int>
//#define pii pair<ll, ll>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-10
//#define endl "\n"
#define pdd pair<double, double>
//#define mp make_pair

const int MAXN = 101*100;

int n, m;
int tot[MAXN], tmp1[MAXN], tmp2[MAXN];

int main() {
	cin >> n >> m;
	while (n--) {
		string s;
		cin >> s;
		if (s.find('1') == s.npos) {
			cout << -1 << endl;
			return 0;
		}
		int last = 0;
		FOR(i, 0, 2*m) {
			if (s[i%m] == '1') last = 0; else last++;
			tmp1[i%m] = last;
		}
		last = 0;
		FOR(i, 0, 2*m) {
			if (s[(2*m-i)%m] == '1') last = 0; else last++;
			tmp2[(2*m-i)%m] = last;
		}
		FOR(i, 0, m) tot[i] += min(tmp1[i], tmp2[i]);
	}
	cout << *min_element(tot, tot+m) << endl;
	return 0;
}

