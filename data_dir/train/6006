
#include <iostream>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j1234 = n; (i) < j1234; (i) ++)
#define rep1(i, n) for (int (i) = 1, j1234 = n; (i) <= j1234; (i) ++)
#define For(i, a, b) for (int (i) = (a), ub1234=b; (i) <= ub1234; (i) ++)
#define db(x) {if(debug){cout << #x << " = " << (x) << endl;}}
#define dba(a, x, y) {if(debug){cout << #a << " :";For(i, (x), (y))cout<<" "<<(a)[(i)];cout<<endl;}}
#define mp make_pair
#define pb push_back
#define endl '\n'
#define ll long long
#define ld long double
#define pi 3.1415926535897932384626433832795028
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const int output_precision = 15;
const bool debug = true;
// const ll MOD = ;

stringstream ss;
int N, K, p[10][1100], loc[10][1100];
map<vector<int>,int> DP;
// find the longest common subsequence 
// within p[i][0] ~ p[i][i] for each i
int dp(vector<int> v)
{
  if (DP.find(v) != DP.end()) return DP[v];
//  dba(v,0,v.size()-1);
  int& x = DP[v];
  int done = 0;
  rep(i,v.size()) done |= v[i] <= 0;
  if (done) return 0;
  x = 0;
  // take v[0]th element of p[0].
  int element = p[0][v[0]];
  int impossible = 0;
  rep(i,v.size())
  {
    impossible |= loc[i][element] > v[i];
  }
//  if (impossible)
//  {
//    x = 0;
//    return x;
//  }
//  else
  if (!impossible)
  {
    vector<int> vv;
    rep(i,v.size()) vv.pb(loc[i][element]-1);
    x = max(x,1+dp(vv));
  }
  // ignore v[0]th element of p[0].
  v[0]-=1;
  x = max(x,dp(v));
  return x;
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(output_precision); cout << fixed;
  ss.precision(output_precision); ss << fixed;
  cin >> N >> K;
  rep(k,K) rep1(n,N) cin >> p[k][n], loc[k][p[k][n]]=n;
  vector<int> v;
  rep(k,K) v.pb(N);
  cout << dp(v) << endl;
}
