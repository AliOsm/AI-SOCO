/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 24-Jul-2019 22:21:57
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 1e5 + 7;
const int inf = 1e9 + 7;

inline bool canTake(int x, int y) {
    return y <= x * 3 + 1;
}

int solve() {
    int b, w; Int(b, w);

    vector <pair <int, int> > white, black;

    if (b > w) {
        if (!canTake(w, b)) {
            return printf("NO\n");
        }
        for (int i = 2; len(white) < w; i += 2) {
            white.push_back({i, 2});
            black.push_back({i + 1, 2});
        }
        for (int i = 0; i < len(white) and len(black) < b; ++i) {
            if (len(black) < b) {
                black.push_back({white[i].first, 3});
            }
            if (len(black) < b) {
                black.push_back({white[i].first, 1});
            }
        }
        if (len(black) < b) {
            black.push_back({white[0].first - 1, 2});
        }
        if (len(black) < b) {
            black.push_back({white.back().first + 1, 2});
        }
    } else {
        if (!canTake(b, w)) {
            return printf("NO\n");
        }
        for (int i = 3; len(black) < b; i += 2) {
            black.push_back({i, 2});
            white.push_back({i + 1, 2});
        }
        for (int i = 0; i < len(black) and len(white) < w; ++i) {
            if (len(white) < w) {
                white.push_back({black[i].first, 3});
            }
            if (len(white) < w) {
                white.push_back({black[i].first, 1});
            }
        }
        if (len(white) < w) {
            white.push_back({black[0].first - 1, 2});
        }
        if (len(white) < w) {
            white.push_back({black.back().first + 1, 2});
        }
    }

    printf("YES\n");
    for (auto i : black) {
        printf("%d %d\n", i.first, i.second);
    }
    for (auto i : white) {
        printf("%d %d\n", i.first, i.second);
    }

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}