#pragma GCC target("avx2")
#pragma GCC optimize("O3")

# include <x86intrin.h>
# include <bits/stdc++.h>

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
 
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

inline void Input_Output () {
	//freopen(".in", "r", stdin);
   //freopen(".out", "w", stdout);
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 1e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
pair < int,int> a[N];
int b[N][10];
ll dp[N][(1 << 7)];
ll ndp[N][(1 << 7)];

inline void solve () {
	cin >> n >> m >> k;
	for (int i = 0; i < n; ++i) cin >> a[i].F, a[i].S = i;
	for (int i = 0; i < n; ++i) { 
		for (int j = 0; j < m; ++j) 
			cin >> b[i][j];

	}
	sort(a, a + n);
	reverse(a, a + n);
	ll sum = 0;

	dp[0][0] = 0;
	for (int msk = 1; msk < (1 << m); msk++) {
		dp[0][msk] = -INF;
	}
	for (int i = 0; i < n; ++i) {
		int id = a[i].second;
		for (int msk = 0; msk < (1 << m); msk++) {
		    if(i - __builtin_popcount(msk) + 1 <= k)
				dp[i+1][msk] = dp[i][msk] + a[i].F;
			else
				dp[i+1][msk] = dp[i][msk];
		} 

		for (int j = 0; j < m; ++j) {
			for (int msk = 0; msk < (1 << m); msk++) if (msk & (1 << j)) {
				dp[i+1][msk] = max(dp[i+1][msk], dp[i][msk ^ (1 << j)] + b[id][j]);
			} 
		}
	}

	for (int i = n - 1; i >= 0; i--) {
		int id = a[i].second;
		for (int msk = 0; msk < (1 << m); msk++) {
			ndp[i][msk] = ndp[i+1][msk];
			for (int j = 0; j < m; ++j) if (msk & (1 << j)) {
				ndp[i][msk] = max(ndp[i][msk], ndp[i+1][msk ^ (1 << j)] + b[id][j]);
			}
		}
	}

	ll res = 0;
	for (int msk = 0; msk < (1 << m); msk++) {
		int rev = (1 << m) - 1;
		rev ^= msk;

		int aa = __builtin_popcount(msk);
		res = max(res, dp[k+aa][msk] + ndp[k+aa + 1][rev]);
	}
	cout << res << '\n';
}

int main () {
   	SpeedForce;
	int tt = 1;
	//cin >> tt;
	while(tt--) solve();
   	return Accepted;
}

// B...a