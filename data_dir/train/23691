#include <stdio.h>
#include <iostream>
#include <string.h>
#include <algorithm>
using namespace std;
int par[600], sze[600];
int n, m, u[10050], v[10050];
bool vis[600];
void init(){
	for(int i=1; i<=n; i++) par[i]=i, sze[i]=1;
}

int root(int node){
	while(par[node]!=node){
		par[node]=par[par[node]];
		node=par[node];
	}
	return node;
}

void dsu(int a, int b){
	int root_a=root(a);
	int root_b=root(b);
	if (sze[root_a]<sze[root_b]){
		par[root_a]=root_b;
		sze[root_b]+=sze[root_a];
	}
	else{
		par[root_b]=root_a;
		sze[root_a]+=sze[root_b];
	}
}

struct query{
	int l , r, id;
	query(){}
	
	bool operator < (query X)const{
		if (l!=X.l)return l<X.l;
		return r>X.r;
	}
};

query q[100500]; int ans[100500];

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	scanf("%d%d", &n,&m); 
	for(int i=1; i<=m; i++){
		scanf("%d%d", &u[i], &v[i]);
	}
	int Q; scanf("%d", &Q); 
	for(int i=0; i<Q; i++){
		int l, r; scanf("%d%d", &l, &r); 
		q[i+1].l=l; 
		q[i+1].r=r;
		q[i+1].id=i+1;
	}
	sort(q+1, q+Q);
	int j=1; int strt=0, endd=m;
	while(j<=Q){
	//	cout<<j<<'\n';
		int l=q[j].l;
		int r=q[j].r; 
		if (l!=strt){
			init();
			for(int i=1; i<l; i++){
				dsu(u[i], v[i]);
			}
			endd=m;
		}
		
		for(int i=endd;i>r; i--) dsu(u[i], v[i]);
		endd=r;
		memset(vis, 0, sizeof vis);
		for(int i=1; i<=n; i++){
			//printf("%d %d\n", i, root(i));
			vis[root(i)]=1;
		}
		int cnt=0;
		for(int i=1; i<=n; i++) {
			cnt+=vis[i];
			//printf("%d %d\n", i, vis[i]);
		}
		ans[q[j].id]=cnt;
		j++;strt=l;
	}
	for(int i=1; i<=Q; i++)printf("%d\n", ans[i]);
}