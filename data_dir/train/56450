#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d%d", &a, &b)
#define sc3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define scs(a) scanf("%s", a)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define db(x) cerr << #x << " == " << x << endl
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<ii> vii;
typedef vector< vii> vvii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9 + 7;
int dp[110][110][12];
int n,q,c;
vi v[110][110][11];
void process()
{
	for(int k=0;k<=10;k++)
		for(int i=1;i<=100;i++)
			for(int j=1;j<=100;j++){
				dp[i][j][k]= dp[i-1][j][k] + dp[i][j-1][k] - dp[i-1][j-1][k];
				for(int x: v[i][j][k]) dp[i][j][k]+=x;
			}
}
int query(int x1, int y1, int x2, int y2, int t){
	//db(dp[x2][y2][t]);
	return dp[x2][y2][t] - dp[x2][y1-1][t] - dp[x1-1][y2][t] + dp[x1-1][y1-1][t];
}
int main()
{
	sc3(n,q,c);
	for(int i=1;i<=n;i++){
		int x,y,s;
		sc3(x,y,s);
		v[x][y][0].pb(s);
	}
	for(int k=1;k<=10;k++)
		for(int i=0;i<=100;i++) 
			for(int j=0;j<=100;j++)
					for(int x: v[i][j][k-1]){ 
						if(x<c)
							v[i][j][k].pb(x+1);
						else v[i][j][k].pb(0);
					}
						
	process();	
	while(q--){
		int t,x1,y1,x2,y2;
		sc3(t,x1,y1);
		sc2(x2,y2);
		//cout<<t<<" "<<x1<<" "<<y1<<" "<<x2<<" "<<y2<<endl;
		if(x1>x2) swap(x1,x2);
		if(y1>y2) swap(y1, y2);
		t%=(c+1);
		//db(t);
		pri(query(x1,y1,x2,y2,t));
		
	}
	return 0;
}
