#include <bits/stdc++.h>
//#define int long long
#define pb push_back
#define mk make_pair
using namespace std;
const int N = 1123456;
const int mod = 1e9 + 7;
const int inf = 1e15 + 7;
inline int read()
{
    int n = 0 , c = 0, m;
    while (!isdigit(c)) m = c - 45 ? 1 : -1 , c = getchar();
    while (isdigit(c))  n = n * 10 + c - 48 , c = getchar();
    return m * n;
}
string x, y, z;
string d[101][101][101];
int used[101][101][101];
int px[101][101][101];
int py[101][101][101];
int pz[101][101][101];
main()
{
    int n, m, i, j;
    cin >> x >> y >> z;
    for(i = 0; i < z.size(); i ++) {
        for(j = 0; j < x.size(); j ++) {
            for(int k = 0; k < y.size(); k ++) {
                string ans;
                if(i > 0) {
                    if(ans.size() < d[i - 1][j][k].size()){
                        ans = d[i - 1][j][k];
                    }
                }
                if(j > 0) {
                    if(ans.size() < d[i][j - 1][k].size()) {
                        ans = d[i][j - 1][k];
                    }
                    if(i > 0 && ans.size() == d[i][j - 1][k].size() && (ans.size() <= i ||d[i][j - 1][k].substr((int)d[i][j - 1][k].size() - i) != z.substr(0, i))) {
                        ans = d[i][j - 1][k];
                    }
                }
                if(k > 0) {
                     if(ans.size() < d[i][j][k - 1].size()) {
                        ans = d[i][j][k - 1];
                    }
                    if(i > 0 && ans.size() == d[i][j][k - 1].size() && (ans.size() <= i || d[i][j][k - 1].substr((int)d[i][j][k - 1].size() - i) != z.substr(0, i))) {
                        ans = d[i][j][k - 1];
                    }
                }
                if(x[j] == y[k]) {
                    if(x[j] != z[i]) {
                        string cnt;
                        if(j > 0 && k > 0)
                            cnt += d[i][j - 1][k - 1] + x[j];
                        else
                            cnt += x[j];
                        if(ans.size() < cnt.size()) {
                            ans = cnt;
                        }
                        if(i > 0 && ans.size() == cnt.size() && (i >= ans.size() || cnt.substr(cnt.size() - i) != z.substr(0, i)))
                            ans = cnt;
                    }
                    else {
                        string cnt;
                        if(j > 0 && k > 0)
                            cnt += d[i][j - 1][k - 1];
                        cnt += z[i];
                        if(ans.size() < cnt.size() && (i >= cnt.size() || cnt.substr((int)cnt.size() - i - 1) != z.substr(0, i + 1)))
                            ans = cnt;
                    }
                }
                d[i][j][k] = ans;
            }
        }
    }
    if(d[(int)z.size() - 1][(int)x.size() - 1][(int)y.size() - 1] == "")
        d[(int)z.size() - 1][(int)x.size() - 1][(int)y.size() - 1] = "0";
    cout << d[(int)z.size() - 1][(int)x.size() - 1][(int)y.size() - 1];
}
