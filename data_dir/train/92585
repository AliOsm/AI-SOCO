#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm = " ") -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
template<typename T> vector<T> & operator--(vector<T> & a)
{ for(auto & i: a) --i; return a; }
/* @@@ ----------------------------------- */

inline vector<string>
tokenize(const string & str, const char delim)
{
    vector<string> out(1);

    for(const auto i: str)
        if(i == delim)
            out.push_back("");
        else
            out.back().push_back(i);

    out.erase(remove_if(begin(out), end(out), mem_fun_ref(&string::empty)),
              end(out));

    return out;
}

template<class T> inline T str2val(const string & str)
{
    T a;
    istringstream(str, ios_base::in) >> a;
    return a;
}

const char * b722()
{
    string line;
    getline(cin, line);

    const auto n = str2val<size_t>(line);

    getline(cin, line);
    vector<size_t> a;
    a.reserve(n);

    {
        const auto tok = tokenize(line, ' ');
        for(const auto t: tok)
            a.push_back(str2val<size_t>(t));
    }

    DEBUG(a);

    const auto pred = [](const char i) {
        return i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y';
    };

    for(const auto k: a)
    {
        getline(cin, line);
        // auto tok = tokenize(line, ' ');

        if(count_if(begin(line), end(line), pred) != (int) k)
            return "NO";
    }

    return "YES";
}

int main(const int argc, char * argv [])
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    cout << b722();

    return EXIT_SUCCESS;
}
