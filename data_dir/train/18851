#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <queue>
#include <deque>
#include <stack>
#include <cstdio>
#include <set>
#include <map>
#include <list>
#include <cmath>
#include <cstdlib>
using namespace std;
#define pb push_back
#define rs resize
#define mp make_pair
#define inf 1000000000
typedef vector <int> vi;
typedef long long ll;
typedef vector <vi> vvi;
typedef vector <bool> vb;
typedef vector <vb> vvb;
typedef vector <ll> vll;
typedef pair <int, int> pii;
const double pi = 3.1415926535;
const int dig = 10000;

struct tree
{
	vi t, left, right;
	vb op;

	void push(int v)
	{
		if (left[v] == right[v])
			return ;
		if (op[v])
			t[v] = t[2 * v] | t[2 * v + 1];
		else
			t[v] = t[2 * v] ^ t[2 * v + 1];
	
	}

	void build(int v, int l, int r, vi &a)
	{
		left[v] = l;
		right[v] = r;
		if (l == r)
		{
			t[v] = a[l];
			op[v] = 0;
			return ;
		}
		build(v * 2, l, (l + r) / 2, a);
		build(v * 2 + 1, (l + r) / 2 + 1, r, a);
		op[v] = !op[2 * v];
		push(v);
	}
	
	tree(vi &a, int n)
	{
		t.rs(n * 4);
		left.rs(n * 4);
		right.rs(n * 4);
		op.rs(n * 4);
		build(1, 0, n - 1, a);
	}

	int get()
	{
		push(1);
		return t[1];
	}

	void mod(int v, int p, int b)
	{
		if (left[v] == right[v])
		{
			t[v] = b;
			return ;
		}
		if (right[2 * v] >= p)
			mod(2 * v, p, b);
		else
			mod(2 * v + 1, p, b);
		push(v);
	}
};

int main()
{
	int n, m;
	cin >> n >> m;
	n = (1 << n);
	int p, b;
	vi a(n);
	for (int i = 0; i < n; ++i)
		cin >> a[i];
	tree t(a, n);
	for (int i = 0; i < m; i++)
	{
		cin >> p >> b;
		--p;
		t.mod(1, p, b);
		cout << t.get() << endl;
	}
}