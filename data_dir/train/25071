#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;
const int maxn = 5005;
int n, m, s, ans;
vector<int> flist[maxn], rlist[maxn], kflist[maxn], kblist[maxn];


//kosarajus-directed

int component[maxn], cptr = 0;
int visited[maxn];
stack<int> etime;

//dfs for forward graph
void fdfs(int cur, vector<int> adj[]) {
	visited[cur] = 1;
	for (auto u : adj[cur]) {
		if (visited[u] != 1)
			fdfs(u, adj);
	}
	etime.push(cur);
}

//dfs for reverse graph
void rdfs(int cur, vector<int> adj[]) {
	visited[cur] = 1;
	component[cur] = cptr;
	for (auto u : adj[cur]) {
		if (visited[u] != 1)
			rdfs(u, adj);
	}
}

void kosaraju() {
	for (int i = 1; i <= n; i++) {
		if (visited[i] != 1)
			fdfs(i, flist);
	}
	memset(visited, 0, sizeof(visited));
	while (!etime.empty()) {
		int cur = etime.top();
		etime.pop();
		if (visited[cur] == 1)
			continue;
		rdfs(cur, rlist);
		cptr++;
	}
}

//end of kosarajus

void make_unique(vector<int>& seq) {
	sort(seq.begin(), seq.end());
	seq.resize(distance(seq.begin(), unique(seq.begin(), seq.end())));
}

void dfs(int cur) {
	visited[cur] = 1;
	for (auto u : kflist[cur])
		if(visited[u]==0)
			dfs(u);
}

int find_root(int cur) {
	if (kblist[cur].size() == 0)
		return cur;
	else
		return find_root(kblist[cur][0]);
}

int main()
{
	fastread;
	cin >> n >> m >> s;
	for (int i = 0; i < m; i++) {
		int u, v;
		cin >> u >> v;
		flist[u].pb(v);
		rlist[v].pb(u);
	}
	kosaraju();
	for (int i = 1; i <= n; i++) {
		for (auto u : flist[i])
			if (component[i] != component[u])
				kflist[component[i]].pb(component[u]);
	}
	for (int i = 0; i < cptr; i++) {
		make_unique(kflist[i]);
		for (auto u : kflist[i])
			kblist[u].pb(i);
	}
	memset(visited, 0, sizeof(visited));
	s = component[s];
	dfs(s);

	for (int i = 0; i < cptr; i++) {
		if (visited[i])
			continue;
		int root = find_root(i);
		dfs(root);
		ans++;
	}
	cout << ans;
	return 0;
}