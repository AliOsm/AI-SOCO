#include <bits/stdc++.h>
using namespace std;
#define _N (int)1e5+5
#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define INF (int)1e9

int n, m, s, l, dist[_N], u, v, w, res = 0;
vector <pair <int, int> > graph[_N];
vector <pair <int, pair <int, int> > > edges;
set <pair <int, int> > S;

int main() {
	cin >> n >> m >> s;
	for (int i = 0; i < m; i++) {
		cin >> u >> v >> w;
		graph[u].pb(mp(v, w));
		graph[v].pb(mp(u, w));
		edges.pb(mp(u, mp(v, w)));
	}
	cin >> l;
	for (int i = 1; i <= n; i++) dist[i] = INF;
	dist[s] = 0;
	S.insert(mp(dist[s], s));
	while (!S.empty()) {
		pair <int, int> p = *S.begin();
		S.erase(S.begin());
		v = p.second;
		for (int i = 0; i < (int)graph[v].size(); i++) {
			u = graph[v][i].first;
			w = graph[v][i].second;
			if (dist[u] > dist[v] + w) {
				S.erase(mp(dist[u], u));
				dist[u] = dist[v] + w;
				S.insert(mp(dist[u], u));
			}
		}
	}
	for (int i = 1; i <= n; i++) {
		if (dist[i] == l) {
			res++;
		}
	}
	for (int i = 0; i < (int)edges.size(); i++) {
		u = edges[i].first;
		v = edges[i].second.first;
		w = edges[i].second.second;
		int d1 = dist[u], d2 = dist[v];
		if ((d1 < l && d1 + w > l) || (d2 < l && d2 + w > l)) {
			if ((d1 < l && d1 + w > l) && (d2 < l && d2 + w > l)) {
				int beg1 = l - d1;
				int end1 = w - beg1;
				int beg2 = l - d2;
				if (end1 == beg2) res++;
				else if (end1 > beg2) res += 2; 
			} else if((d1 < l && d1 + w > l)) {
				int beg = l - d1;
				int end = w - beg;
				if (d2 + end >= d1 + beg) res++;
			} else {
				int beg = l - d2;
				int end = w - beg;
				if (d1 + end >= d2 + beg) res++;	
			}
		}
	}
	cout << res << endl;
	return 0;
}
