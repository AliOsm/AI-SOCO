#include <bits/stdc++.h>
using namespace std;

const int N = 2e5 + 5 , M = 1e6 + 5;
long long arr[N];
int n , m, block;
vector<pair<int , long long> > ans;
long long counter[M];

struct Query
{
    int L, R , idx;
}q[N];

bool compare(Query &x, Query& y)
{
    if (x.L/block != y.L/block)
        return x.L/block < y.L/block;

    return x.R < y.R;
}

void queryResults()
{
    block = (int)sqrt(n);
    sort(q, q + m, compare);

    int currL = 0, currR = 0;
    long long currSum = 0;

    for (int i=0; i<m; i++)
    {
        int L = q[i].L , R = q[i].R;
        while (currL < L)
        {
            currSum -= counter[arr[currL]] * counter[arr[currL]] * arr[currL];
            counter[arr[currL]]--;
            currSum += counter[arr[currL]] * counter[arr[currL]] * arr[currL];
            currL++;
        }
        while (currL > L)
        {
            currL--;
            currSum -= counter[arr[currL]] * counter[arr[currL]] * arr[currL];
            counter[arr[currL]]++;
            currSum += counter[arr[currL]] * counter[arr[currL]] * arr[currL];
        }
        while (currR <= R)
        {
            currSum -= counter[arr[currR]] * counter[arr[currR]] * arr[currR];
            counter[arr[currR]]++;
            currSum += counter[arr[currR]] * counter[arr[currR]] * arr[currR];
            currR++;
        }
        while (currR > R+1)
        {
            currR--;
            currSum -= counter[arr[currR]] * counter[arr[currR]] * arr[currR];
            counter[arr[currR]]--;
            currSum += counter[arr[currR]] * counter[arr[currR]] * arr[currR];
        }
        ans.push_back({q[i].idx , currSum});
    }
}

int main()
{
    ios::sync_with_stdio(0) , cout.tie(0) , cin.tie(0);

    cin >> n >> m;

    for(int i = 0 ; i < n ; i++)
        cin >> arr[i];
    for(int i = 0 ; i < m ; i++)
        cin >> q[i].L >> q[i].R , q[i].idx = i , q[i].L-- , q[i].R--;

    queryResults();

    sort(ans.begin() , ans.end());
    for(auto i : ans)
        cout << i.second << '\n';


    return 0;
}
