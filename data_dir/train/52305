#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include <iostream>
#include <cmath>
#include <iomanip>
#include <string>
#include <cstring>
#include <cstdio>
#include <math.h>
#include <algorithm>
#include <stdio.h>
#include <climits>
#include <stack>
#include <queue>
#include <vector>
#include <set>
#include <sstream>
#include <map>
#include <ctime>
#include <cstdlib>
#include <list>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;

int dx[] = { 1, 0, -1, 0 };
int dy[] = { 0, 1, 0, -1 };

// start + (end - start) / 2;
/*
int power(int b, int p){
if (p == 0)return 1;
int sq = power(b, p / 2);
sq *= sq;
if (p % 2 == 1)sq *= b;
return sq;
}
*/
int can(int r, int g, int b){
    ll c = 0;
    if (r % 3 == 0 && b % 3 == 0 && g % 3 == 0){
        c = (r / 3 + g / 3 + b / 3);
    }
    else{
        if ((r % 3 == 0 && b % 3 && g % 3) || (r % 3 && b % 3 == 0 && g % 3) || (r % 3 && b % 3 && g % 3 == 0)){
            c = min(r, min(g, b));
            if (c >= 2)
                c = 2;
            else if (c >= 1)
                c = 1;
            else
                c = 0;
            r -= c, g -= c, b -= c;
            c += (r / 3 + g / 3 + b / 3);
            r %= 3, g %= 3, b %= 3;
            while (r &&  g && b){
                r--, g--, b--;
                c++;
            }
        }
        else{
            c = (r / 3 + g / 3 + b / 3);
            r %= 3, g %= 3, b %= 3;
            while (r&& g&& b){
                r--, g--, b--;
                c++;
            }
        }
    }
    return c;
}
int main(){
    ll r, g, b;
    cin >> r >> g >> b;
    cout << can(r, g, b) << "\n";
}