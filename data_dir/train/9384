#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define MOD 1000000007
ll power(ll a,ll b, ll m=MOD)
{
    ll res=1;
    while(b>0)
    {
        if(b&1)
            res=(res*a)%m;
        a=(a*a)%m;
        b>>=1;
    }
    return res;
}
ll inverse(ll a,ll m=MOD)
{
    return power(a,m-2,m);
}
#define INFl 1e18
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<long long>
#define vvl vector<vl>
#define ii pair<int,int>
#define pll pair<ll,ll>
#define vii vector<ii>
#define F first
#define S second
#define forl(i,n) for(int i=0;i<n;i++)
#define fore(i,n) for(int i=1;i<=n;i++)
#define rforl(i,n)  for(int i=n-1;i>=0;i--)
#define rfore(i,n)  for(int i=n;i>=1;i--)
#define INF 1000000009
#define gcd(a,b) __gcd(a,b)
#define all(x)  x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define print(x)    for(auto it=x.begin();it!=x.end();it++) cout<<*it<<' '; cout<<endl;
#define printii(x)  for(auto it=x.begin();it!=x.end();it++) cout<<it->F<<' '<<it->S<<'\n'; 
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
vvi g;
vvi Fill,Empty,Check;
set<int> up,down;
vi sz,st,ft,ver,big;
int times=0;
vii res;
void dfs(int u,int p)
{
    sz[u]=Empty[u].size();
    ver[times]=u;
    st[u]=times++;
    int mx=-1,bigChild=-1;
    for(int v:g[u])
    {
        if(v==p)    continue;
        dfs(v,u);
        sz[u]+=sz[v];
        if(sz[v]>mx)
        {
            bigChild=v;
            mx=sz[v];
        }
    }
    big[u]=bigChild;
    ft[u]=times;
}
void DSUTree(int u,int p,bool keep)
{
    // cout<<u<<endl;
    for(int x:Fill[u])
        up.insert(x);
    for(int v:g[u])
    {
        if(v==p || v==big[u])    continue;
        DSUTree(v,u,false);
    }
    if(big[u]!=-1)
        DSUTree(big[u],u,true);
    for(int y:Empty[u])
        down.insert(y);
    for(int v:g[u])
    {
        if(v==p||v==big[u]) continue;
        for(int t=st[v];t<ft[v];t++)
        {
            int vertex=ver[t];
            for(int x:Empty[vertex])
                down.insert(x);
        }
    }

    for(int x:Check[u])
    {
        int p1=-1,p2=-1;
        auto it=up.lower_bound(x);
        if(it!=up.begin())
        {
            it--;
            p1=*it;
        }
        auto it2=down.lower_bound(x);
        if(it2!=down.begin())
        {
            it2--;
            p2=*it2;
        }
        if(p1<=p2)
            res.pb(mp(x,0));
        else
            res.pb(mp(x,1));
    }

    if(!keep)
    {
        for(int t=st[u];t<ft[u];t++)
        {
            int vertex=ver[t];
            for(int x: Empty[vertex])
                down.erase(x);
        }
    }

    for(int x:Fill[u])
        up.erase(x);

}
int main()
{
    fastio;
    int n;
    scanf("%d",&n);
    g.resize(n);
    Fill.resize(n);
    Empty.resize(n);
    Check.resize(n);
    sz.resize(n);
    st.resize(n);
    ft.resize(n);
    ver.resize(n);
    big.resize(n);
    forl(i,n-1)
    {
        int u,v;
        scanf("%d %d",&u,&v);
        u--;v--;
        g[u].pb(v);
        g[v].pb(u);
    }
    int q;
    scanf("%d",&q);
    forl(t,q)
    {
        int c,v;
        scanf("%d %d",&c,&v);
        v--;
        if(c==1)
            Fill[v].pb(t);
        else if(c==2)
            Empty[v].pb(t);
        else
            Check[v].pb(t);
    }

    // cout<<"HEY"<<endl;
    dfs(0,-1);
    DSUTree(0,0,false);
    sort(all(res));
    // cout<<res.size()<<endl;
    for(auto x:res)
    {
        printf("%d\n",x.S);
    }
}