/// *********************************************** K
/// B *                                           * H
/// I *    Solved By : Bir Bahadur Khatri(B'ru)   * A
/// R *      Be Positive,be Happy.                * T
/// U *                                           * R
/// *********************************************** I

#include<bits/stdc++.h>

#define LL long long int
#define ULL unsigned LL
#define PI 2.0*acos(0.0)
#define D double
#define sz size()
#define PB push_back
#define cp printf("here\n");
#define NL printf("\n")
#define CHR getchar()
#define SQR(n) (n*n)
#define MEM(a,val) memset(a,val,sizeof(a))
#define Max(a,b) ((a>b)?a:b)
#define Min(a,b) ((a<b)?a:b)
#define _Max(a,b,c) Max(a,Max(b,c))
#define _Min(a,b,c) Min(a,Min(b,c))
#define S1(a) a=in<int>()
#define S2(a,b) a=in<int>(),b=in<int>()
#define S3(a,b,c) a=in<int>(),b=in<int>(),c=in<int>()
#define SL1(a) a=in<LL>()
#define SL2(a,b) a=in<LL>(),b=in<LL>()
#define SL3(a,b,c) a=in<LL>(),b=in<LL>(),c=in<LL>()
#define F(i,a,b) for(int i=a;i<b; i++)
#define R(i,a,b) for(int i=a-1;i>=b; i--)
#define all(a) a.begin(),a.end()
#define cnt_bit(a) __builtin_popcountll(a)
#define InpOut freopen("A.txt","r",stdin),freopen("A1.txt","w",stdout)
#define _cin ios_base::sync_with_stdio(0)
#include <time.h>

using namespace std;
template <typename T> T in(){char ch;T n = 0;bool ng = false;while (1){ch = getchar();if (ch == '-'){ng = true;ch = getchar();break;}if (ch>='0' && ch<='9')     break;}while (1){n = n*10 + (ch - '0');ch = getchar();if (ch<'0' || ch>'9')   break;}return (ng?-n:n);}
template<typename T>inline T Dis(T x1,T y1,T x2, T y2){return sqrt( SQR(x1-x2) + SQR(y1-y2) );}
template<typename T>inline T POW(T B,T P){ if(P==0) return 1; if(P&1) return B*POW(B,P-1);  else return SQR(POW(B,P/2));}
template<typename T>inline T ABS(T a) {if(a<0)return -a;else return a;}
template<typename T>inline T Gcd(T a,T b){if(a<0)return Gcd(-a,b);if(b<0)return Gcd(a,-b);return (b==0)?a:Gcd(b,a%b);}
template<typename T>inline T Lcm(T a,T b) {if(a<0)return Lcm(-a,b);if(b<0)return Lcm(a,-b);return a*(b/Gcd(a,b));}
long long Bigmod(long long base, long long power, long long MOD){long long ret=1;while(power){if(power & 1)ret=(ret*base)%MOD;base=(base*base)%MOD;power>>=1;}return ret;}
long long ModInverse(long long number, long long MOD){return Bigmod(number, MOD-2, MOD);}
int Set(int N,int pos){ return N=N | (1<<pos);}
int Reset(int N,int pos){return N= N & ~(1<<pos);}
bool Chkbit(int N,int pos){return (bool)(N & (1<<pos));}
bool isVowel(char ch){ ch=toupper(ch); if(ch=='A'||ch=='U'||ch=='I'||ch=='O'||ch=='E') return true; return false;}
bool isConst(char ch){if (isalpha(ch) && !isVowel(ch)) return true; return false;}
int toInt(string s)  { int sm; stringstream ss(s); ss>>sm; return sm; }
long long int toLlint(string s) { long long int sm; stringstream ss(s); ss>>sm; return sm;}

///**********************************************************//


///         0123456789
#define MX  1000005
#define MOD 1000000007
#define INF (1<<28)
#define eps 1e-9
/// ==========================================////

LL ar[MX];

struct z
{
    LL lazy,mn;
};

z Tree[MX*4];

void Propagate(int id)
{
    int lft=2*id,rgt=lft+1;
    Tree[id].mn=Tree[id].mn+Tree[id].lazy;
    Tree[lft].lazy+=Tree[id].lazy;
    Tree[rgt].lazy+=Tree[id].lazy;
    Tree[id].lazy=0;
    return;
}

void Update(int id,int l,int r,int st,int ed,LL val)
{
    if(st<=l&&ed>=r) {
        Tree[id].lazy+=val;
        Propagate(id);
        return;
    }

    int mid=(l+r)/2;
    int lft=2*id;
    int rgt=lft+1;

    if(Tree[id].lazy) {
        Propagate(id);
    }

    if(ed<=mid) {
        Update(lft,l,mid,st,ed,val);
    }
    else if(st>mid) {
        Update(rgt,mid+1,r,st,ed,val);
    }
    else{
        Update(lft,l,mid,st,ed,val);
        Update(rgt,mid+1,r,st,ed,val);
    }

    if(Tree[lft].lazy) {
        Propagate(lft);
    }
    if(Tree[rgt].lazy) {
        Propagate(rgt);
    }
    Tree[id].mn=min(Tree[lft].mn,Tree[rgt].mn);
    return;
}

LL Query(int id,int l,int r,int st,int ed)
{
    if(st<=l&&ed>=r){
        if(Tree[id].lazy)
        {
            Propagate(id);
        }
        return Tree[id].mn;
    }

    int mid=(l+r)/2;
    int lft=2*id;
    int rgt=lft+1;

    if(Tree[id].lazy) {
        Propagate(id);
    }

    if(ed<=mid) {
        return Query(lft,l,mid,st,ed);
    }
    else if(st>mid) {
        return Query(rgt,mid+1,r,st,ed);
    }
    else{
        LL a,b,c;
        a=Query(lft,l,mid,st,ed);
        b=Query(rgt,mid+1,r,st,ed);
        c=min(a,b);
        return c;
    }
}
char s[MX];
vector<int> Solve()
{
    int N=0,F=0,f=0;
    vector<int> V;
    F(i,0,strlen(s)) {
        if(s[i]==' ') {
            F=1;
            if(f) V.PB(-N);
            else V.PB(N);
            f=0;
            N=0;
        } else if(s[i]=='-') {
            f=1;
        } else {
            N=N*10+(s[i]-'0');
        }
    }

    if(f) V.PB(-N);
    else V.PB(N);
    return V;
}

int main()
{
    int n;
    S1(n);

    F(i,1,n+1) SL1(ar[i]),Update(1,1,n,i,i,ar[i]);
    int m;
    S1(m);

    while(m--) {
        gets(s);
        vector<int> V=Solve();
        if(V.sz==2) {
            int st,ed;
            if(V[0]<=V[1]) {
                st=V[0]+1,ed=V[1]+1;
                 printf("%lld\n",Query(1,1,n,st,ed));
            }
            else  {
                st=V[1]+1;
                ed=(V[0]+1);
               printf("%lld\n",min(Query(1,1,n,ed,n),Query(1,1,n,1,st)));
            }
        }
        else {
            int st,ed;
            if(V[0]<=V[1]) {
                st=V[0]+1,ed=V[1]+1;
                Update(1,1,n,st,ed,V[2]);
            }
            else  {
                st=V[1]+1;
                ed=(V[0]+1);
                Update(1,1,n,ed,n,V[2]);
                Update(1,1,n,1,st,V[2]);
            }
        }
    }

    return 0;
}
