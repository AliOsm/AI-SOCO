//Author : Siriuslight
#include "bits/stdc++.h"
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
#define FIO ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0),cout<<setprecision(10)<<fixed;
#define F first
#define S second

using namespace std;
using namespace __gnu_pbds;

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

typedef long long ll;
typedef long double ld;
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const ll inf = 1e9+100, N = 1e3+5;
const ll INF = 1e18+100, MOD = 1e9+7;

ll powmod(ll a,ll b,ll m=MOD){ll r=1;while(b>0){if(b&1)r=r*a%m;a=a*a%m;b>>=1;}return r;}
ll power(ll a,ll b){ll r=1;while(b>0){if(b&1)r=r*a;a=a*a;b>>=1;}return r;}
ll gcd(ll a,ll b){if(!b)return a;return gcd(b,a%b);}
ll inv(ll a, ll m = MOD){return powmod(a,m-2,m);}
ll lcm(ll a,ll b){return(a*b)/gcd(a,b);}

//ordered_set X;
//X.insert(3);
//X.order_of_key(3) no of elements less than 3
//*X.find_by_order(n) nth greatest element(0-indexed)

int n, m, vis[N][N], dx[4] = {-1, 1, 0, 0}, dy[4] ={0, 0, -1, 1}, px, py, val[N][N], cnt;
vector <pair<int,int> > v;
pair <int, int> p[N][N];
char g[N][N];

bool valid(int x, int y){
    return (1 <= x && x <= n && 1 <= y && y <= m && g[x][y] == '.');
}

void dfs(int x, int y){
    vis[x][y] = 1;
    cnt++;
    p[x][y] = {px, py};
    for(int i = 0; i < 4; ++i){
        if(!vis[x + dx[i]][y + dy[i]] && valid(x + dx[i], y + dy[i])){
            vis[x + dx[i]][y + dy[i]] = 1;
            dfs(x + dx[i], y + dy[i]);
        }
    }
}

int main(){
    FIO;
    cin >> n >> m;
    for(int i = 1; i <= n; ++i){
        for(int j = 1; j <= m; ++j){
            cin >> g[i][j];
        }
    }

    for(int i = 1; i <= n; ++i){
        for(int j = 1; j <= m; ++j){
            if(!vis[i][j] && g[i][j] == '.'){
                cnt = 0;
                px = i, py = j;
                dfs(i, j);
                val[px][py] = cnt;
            }
        }
    }
    for(int i = 1; i <= n; ++i){
        for(int j = 1; j <= m; ++j){
            int ans = 1;
            if(g[i][j] == '.'){
                cout << '.';
                continue;
            }
            set <pair<int,int> > st;
            for(int k = 0; k < 4; ++k){
                if(valid(i + dx[k], j + dy[k])){
                    st.insert({p[i + dx[k]][j + dy[k]]});
                }
            }
                for(auto x : st){
                ans += val[x.F][x.S];
            }
            cout << ans % 10;
        }
        cout << "\n";
    }
}