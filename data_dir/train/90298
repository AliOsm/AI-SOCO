#include<bits/stdc++.h>

using namespace std;
const int MAXN = 300000;

bool comp[MAXN + 1000];

int mdc(int x,int y){
  if(y == 0) return x;

  return mdc(y,x%y);
}

int main(){
  memset(comp,false,sizeof comp);

  for(int i = 2;i <= MAXN;i++){
    
    if(i*i > MAXN) break;

    for(int j = 2*i;j <= MAXN;j += i){
      comp[j] = true;
    }
  }

  int c = 0;
  int a = 1;

  map<int,int> mep;

  while(true){
    if(c > 150) break;

    if(comp[a] == false) mep.insert({a,1}) , c += 1;
    a += 1;
  }

  int n,m;

  cin >> n >> m;

  if(m < n-1){
    cout << "Impossible" << endl;
    return 0;
  }

  if(n < 4000){
    int cont = n-1;
    bool flag = false;
    vector<pair<int,int>> resp;


    for(int i = 1;i <= n;i++){
      if(cont == m){
        flag = true;
        break;
      }
      for(int j = i+2;j <= n;j++){
        if(mdc(i,j) == 1)
          cont += 1 , resp.push_back({i,j});
        if(cont == m){
          flag = true;
          break;
        }
      }
      if(flag == true) break;
    }

    if(flag == true){
      cout << "Possible" << endl;
      for(int i = 1;i <= n-1;i++){
        cout << i << " " << i+1 << endl;
      }
      for(int i = 0;i < resp.size();i++){
        cout << resp[i].first << " " << resp[i].second << endl;
      }
    }
    else cout << "Impossible" << endl;
  }
  else{
    int contador = n-1;

    cout << "Possible" << endl;

    for(int i = 1;i <= n-1;i++){
        cout << i << " " << i+1 << endl;
    }

    for(auto i : mep){
      for(int j = 1000;j <= n;j++){
        if(i.first == 1 && j == n)continue;
        if(j%i.first == 0)continue;

        if(contador == m) break;

        cout << i.first << " " << j << endl;
        contador += 1;
      }
    }
  }

}