#include <iostream>
#include <map>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <vector>
#include <cstring>
#include <cstdlib>
#include <queue>

#define mp make_pair
#define pb push_back
#define ppb pop_back
#define X first
#define Y second
#define free free_

using namespace std;

int a[111];
int q[111];
int t[111];
int n, m;
int dp[21][1 << 20];
int main(){
    cin >> n;
    for (int i = 0; i < n; i++) cin >> a[i];
    sort(a, a + n);
    reverse(a, a + n);
    
    cin >> m;
    
    for (int i = 0; i < m; i++){
        char ch;
        cin >> ch >> t[i];
        if (t[i] == 2) t[i] = -1;
        if (ch == 'p') q[i] = 1; else q[i] = 2;
    }
    
    for (int i = m - 1; i >= 0; i--){
        if (q[i] == 1){
           if (t[i] == 1){
              for (int mask = 0; mask < (1 << m); mask++){
                  dp[i][mask] = -1000000000;
                  for (int j = 0; j < m; j++)
                      if ((mask & (1 << j)) == 0)
                      dp[i][mask] = max(dp[i][mask], dp[i + 1][mask | (1 << j)] + a[j]);
              }
           } else {
              for (int mask = 0; mask < (1 << m); mask++){
                  dp[i][mask] = 1000000000;
                  for (int j = 0; j < m; j++)
                      if ((mask & (1 << j)) == 0)
                      dp[i][mask] = min(dp[i][mask], dp[i + 1][mask | (1 << j)] - a[j]);
              }
           
           }
        } else {
          if (t[i] == 1){
           for (int mask = 0; mask < (1 << m); mask++){
               dp[i][mask] = dp[i + 1][mask];
               for (int j = 0; j < m; j++)
                   if ((mask & (1 << j)) == 0)
                      dp[i][mask] = max(dp[i][mask], dp[i + 1][mask | (1 << j)]);
           }             
          }  else {
           for (int mask = 0; mask < (1 << m); mask++){
               dp[i][mask] = dp[i + 1][mask];
               for (int j = 0; j < m; j++)
                   if ((mask & (1 << j)) == 0)
                      dp[i][mask] = min(dp[i][mask], dp[i + 1][mask | (1 << j)]);
           }             
                  
          }
        }
    }
    
    cout << dp[0][0] << endl;

  // system("pause");
    return 0;
}
