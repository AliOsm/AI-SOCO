#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

const int maxn = 80 + 5;
const int oo = 2e9;

int g[maxn][maxn], apps[maxn], ans = oo, n, k;
vector<pii> top[maxn][maxn];
vector<int> path;


void dfs(int steps){
	if(steps == k / 2){
		
	//	cerr << "here" << endl;
		
		path.push_back(0);
		int sum = 0;
		for(int i = 1; i < path.size(); i++){
			bool found = false;
			
			int x = path[i - 1];
			int y = path[i];
			
	//		cerr << x << " " << y << endl;
			
			for(auto &e : top[x][y]){
				int w = e.first;
				int z = e.second;
				
	//			cerr << z << " " << w << endl;
	//			cerr << apps[z] << " apps " << endl;
				
				if(apps[z] == 0){
					found = true;
					sum += w;
					break;
				}
			}
			
			if(!found){
				path.pop_back();
				return;
			}
				
		}
		
		ans = min(ans, sum);
		path.pop_back();
	}
	else{
		for(int i = 0; i < n; i++){
			apps[i]++;
			path.push_back(i);
			dfs(steps + 1);
			path.pop_back();
			apps[i]--;
		}
	}
}


int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	cin >> n >> k;
	
	for(int i = 0; i < n; i++)
		for(int j = 0; j < n; j++)
			cin >> g[i][j];
	
	for(int i = 0; i < n; i++){
		for(int j = 0; j < n; j++){
			//if(i == j)
			//	continue;

			for(int k = 0; k < n; k++){
				if(k == i || k == j)
					continue;
				
				int cost = g[i][k] + g[k][j];
				top[i][j].push_back({cost, k});
				
				//if(top[i][j].size() > 6)
				//	top[i][j].pop_back();
			}
			
			sort(top[i][j].begin(), top[i][j].end());			
		}
	}
	
	path.push_back(0);
	apps[0]++;
	
	dfs(1);
	
	cout << ans << endl;

	return 0;
}
