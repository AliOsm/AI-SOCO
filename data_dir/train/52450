#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define edge pair<ll,ll>
#define MAX 262144
#define ab 100000
#define set(v,n) memset(v,n,sizeof v);
//int tree[MAX];
//deque<int> lazy[MAX];
//string ans;
//vector<int>v;
//void build_tree(int low, int high, int pos){
//	if (low == high){
//		tree[pos] = (v[low]==0)?v[low]:(v[low]>0)?1:-1;
//		return;
//	}
//	int mid = ((low + high) / 2);
//	build_tree(low, mid,pos*2 + 1);
//	build_tree(mid + 1, high, pos*2 + 2);
//	int &c1=tree[pos*2+1];
//	int &c2=tree[pos*2+2];
//	int &c = tree[pos];
//	c = c1*c2;
//}
//int get(int qlow,int qhigh, int low, int high, int pos){
//	
//	if (qlow > high || qhigh < low){
//		return 1;
//	}
//	if (qlow <= low&&qhigh >= high)return tree[pos];
//	int mid = ((low + high) >> 1);
//	int c1 = get(qlow, qhigh, low, mid, (pos << 1) + 1);
//	int c2 = get(qlow, qhigh, mid + 1, high, (pos << 1) + 2);
//	int c = c1*c2;
//	return c;
//}
//void update(int val, int l, int low, int high, int pos){
//	if (low == l&&high == l){
//		tree[pos] = (val == 0) ? val : (val>0) ? 1 : -1;
//		return;
//	}
//	if (l > high || l < low)return;
//	int mid = ((low + high) >> 1);
//	update(val, l, low,mid, (pos << 1) + 1);
//	update(val, l, mid+1, high, (pos << 1) + 2);
//	int &c1 = tree[pos * 2 + 1];
//	int &c2 = tree[pos * 2 + 2];
//	int &c = tree[pos];
//	c = c1*c2;
//}
map<ll, ll>parent;
map<ll, bool>vis;
int main(){
	ll a, b;
	queue<edge>q;
	scanf("%I64d%I64d", &a, &b);
	q.push({ a, 0 });
	parent[a] = -1;
	while (!q.empty()&&q.front().first != b){
		edge e = q.front();
		q.pop();
		if (e.first > b)continue;
		vis[e.first] = 1;
		if (vis[e.first*2]==0){
			q.push({ e.first * 2, e.second + 1 });
			vis[e.first*2] = 1;
			parent[e.first * 2] = e.first;
		}
		if (vis[e.first*10+1]==0){
			q.push({ e.first * 10 + 1, e.second + 1 });
			vis[e.first*10+1] = 1;
			parent[e.first * 10+1] = e.first;
		}
	}
	if (parent.find(b) == parent.end()){

		printf("NO");
	}
	else {
		printf("YES\n");
		stack<ll>ans;
		ll val=parent[b];
		while (val != -1){
			ans.push(val);
			val = parent[val];
		}
		printf("%d\n", ans.size()+1);
		while (!ans.empty()){
			printf("%I64d ", ans.top());
			ans.pop();
		}
		printf("%d", b);

	}



	//freopen("o.txt", "w", stdout);
	
}