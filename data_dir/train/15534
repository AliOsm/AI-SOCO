#include<bits/stdc++.h>

//#include "rubo.h"
#define MP make_pair
#define PB push_back
#define in int
#define ll long long
#define ull unsigned long long
#define vc vector
#define SQ(j) (j)*(j)
//#define i first
//#define j second

//#define ld long double
#define dbl  double
#define pll pair<long long,long long>
#define pii pair<int,int>
#define all(j) j.begin(), j.end()
#define loop(xxx, yyy) for(int xxx = 0; xxx < yyy; xxx++)
#define loop1(xxx, yyy) for(int xxx = 1; xxx <= yyy; xxx++)
//#define printf(fmt, ...) (0)
//#define HOME
//#define y0 ngacaleiebinvoaeu
//#define y1 gnarpipipaigare
//#define j1 adsfndnasfafoasp

//#define printf(...) (0)
#define db(x) cout << #x << " = " << x << endl
#define dbCont(x) cout << #x << ": "; for(auto shun: x) cout << shun << ' '; cout<<endl;

using namespace std;

const int N = 2000 + 5;

int n, k;

int a[N][N];
int pa[N][N];

// white -> 0
// black -> 1


// col,row ok
int c[N];
int ro[N];

int pc[N];
int pro[N];

int u[N][N];
int d[N][N];
int l[N][N];
int r[N][N];

int ud[N][N];
int lr[N][N];

int udp[N][N];
int lrp[N][N];

int getSumUD(int i1, int j1, int i2, int j2) {
    if(i1 > i2 || j1 > j2) return 0;

    return
            udp[i2][j2] - udp[i1 - 1][j2] - udp[i2][j1 - 1] + udp[i1 - 1][j1 - 1];
}

int getSumLR(int i1, int j1, int i2, int j2) {
    if(i1 > i2 || j1 > j2) return 0;


    return
            lrp[i2][j2] - lrp[i1 - 1][j2] - lrp[i2][j1 - 1] + lrp[i1 - 1][j1 - 1];
}

int getSumP(int i1, int j1, int i2, int j2) {
    if(i1 > i2 || j1 > j2) return 0;

    return
            pa[i2][j2] - pa[i1 - 1][j2] - pa[i2][j1 - 1] + pa[i1 - 1][j1 - 1];
}

void pr(int arr[]) {
    loop1(i, n) {
        cout << arr[i] << ' ';
    }
    cout << endl;
}

char buf[N];
int main() {
    cin >> n >> k;
    loop(i, n) {
        string s;
        scanf("%s",buf);
        loop(j, n) {
            a[i + 1][j + 1] = buf[j] == 'B';
        }
    }


    loop1(i, n)loop1(j, n)pa[i][j] = pa[i - 1][j] + pa[i][j - 1] - pa[i - 1][j - 1] + a[i][j];

    // c,ro
    loop1(i, n) ro[i] = getSumP(i, 1, i, n) == 0;
    loop1(j, n) c[j] = getSumP(1, j, n, j) == 0;

//    pr(c);
//    pr(ro);


    loop1(i, n) pro[i] = pro[i - 1] + ro[i];
    loop1(i, n) pc[i] = pc[i - 1] + c[i];


    loop1(i, n)loop1(j, n)u[i][j] = getSumP(1, j, i - 1, j) == 0;
    loop1(i, n)loop1(j, n)d[i][j] = getSumP(i + 1, j, n, j) == 0;
    loop1(i, n)loop1(j, n)l[i][j] = getSumP(i, 1, i, j - 1) == 0;
    loop1(i, n)loop1(j, n)r[i][j] = getSumP(i, j + 1, i, n) == 0;
//    db(getSumP(1,0,1,0));

//    cout << "l\n";
//    loop1(i,n){
//        pr(l[i]);
//    }


    for (int i = 1; i + k - 1 <= n; i++) {
        for (int j = 1; j <= n; j++) {
            ud[i][j] = min(u[i][j], d[i + k - 1][j]);
        }
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j + k - 1 <= n; j++) {
            lr[i][j] = min(l[i][j], r[i][j + k - 1]);
        }
    }




//    cout << "r\n";
//    loop1(i,n){
//        pr(r[i]);
//    }
//
//    // ud
//    cout << "ud\n";
//    loop1(i,n){
//        pr(ud[i]);
//    }
//
//    // lr
//    cout << "lr\n";
//    loop1(i,n){
//        pr(lr[i]);
//    }

    loop1(i, n)loop1(j, n)udp[i][j] = udp[i - 1][j] + udp[i][j - 1] - udp[i - 1][j - 1] + ud[i][j];
    loop1(i, n)loop1(j, n)lrp[i][j] = lrp[i - 1][j] + lrp[i][j - 1] - lrp[i - 1][j - 1] + lr[i][j];

    int ans = 0;
    for (int i = 1; i + k - 1 <= n; i++) {
        for (int j = 1; j + k - 1 <= n; j++) {
//            cout << endl;
//            db(i);
//            db(j);
//
//            db(pc[j - 1] + pc[n] - pc[j + k - 1]);
//            db(pro[i - 1] + pro[n] - pc[i + k - 1]);
//            db(getSumUD(i, j, i, j + k - 1));
//            db(getSumLR(i, j, i + k - 1, j));
            int cur =
                    pc[j - 1] + pc[n] - pc[j + k - 1] +
                    pro[i - 1] + pro[n] - pro[i + k - 1] +


                    getSumUD(i, j, i, j + k - 1) +
                    getSumLR(i, j, i + k - 1, j);

//            db(cur);
            ans = max(ans, cur);
        }
    }

    cout << ans << endl;

}

/*


 5 3
BWBBB
BWBBB
BWWWB
BWWWB
WWWWW

*/