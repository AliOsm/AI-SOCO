#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <sstream>
#include <cassert>
#include <queue>
#include <bitset>
#include <ctime>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define db(v) cerr << #v << " = " << v << endl
#define pb push_back
#define sz(x) ((int)x.size())
#define fst first
#define snd second
typedef long long ll;
typedef pair<int, int> ii;
const int MAXN = 300050;
const int MOD = 998244353;

int n, A[MAXN], B[MAXN], bn, last[MAXN];

struct Fenwick {
	int t[MAXN+1]; // for more dimensions, make t multi-dimensional
	void add(int p, int v){ // add v to p-th element (0-based)
		// add extra fors for more dimensions
		for(int i=p+1;i<=MAXN;i+=i&-i)t[i]=max(t[i], v);
	}
	int mx(int p){ // get sum of range [0,p)
		int r=0;
		// add extra fors for more dimensions
		for(int i=p;i;i-=i&-i)r=max(r, t[i]);
		return r;
	}
};


int main(){
	while(scanf("%d", &n) >= 1){
		bn = 0;
		memset(last, -1, sizeof(last));
		
		forn(i, n){
			scanf("%d", &A[i]);
			B[bn++] = A[i];
		}
		
		sort(B, B + bn);
		bn = unique(B, B + bn) - B;
		
		forn(i, n){
			A[i] = lower_bound(B, B + bn, A[i]) - B;
			last[A[i]] = i;
		}
		
		Fenwick F; memset(F.t, 0, sizeof(F.t));
		forn(i, n){
			F.add(i, last[A[i]]);
		}
		
		int blocks = 0;
		int p = 0;
		while(p < n){
			while(F.mx(p+1) != p){
				p = F.mx(p+1);
			}
			blocks++;
			p++;
		}
		
		//~ printf("blocks = %d\n", blocks);
		
		int ans = 1;
		forn(i, blocks-1){
			ans = (ans * 2) % MOD;
		}
		
		printf("%d\n", ans);
	}
	return 0;
}
