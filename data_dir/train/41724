#include <bits/stdc++.h>

using namespace std;

const int N = 100010;

int a[N], d[N];
int from_left[N], from_right[N];


int main() {
  #ifdef LOCAL
  freopen("sol.in", "r", stdin);
  freopen("sol.out", "w+", stdout);
  #endif
  int n, q;
  scanf("%d %d", &n, &q);
  for (int i = 0; i < n; i++) {
    scanf("%d", a + i);
  }
  for (int i = 0; i + 1 < n; i++) {
    d[i] = a[i] - a[i + 1];
    if (d[i] < 0) {
      d[i] = -d[i];
    }
  }
  for (int i = 0; i < q; i++) {
    int l, r;
    scanf("%d %d", &l, &r);
    l--; r--;
    for (int i = l; i < r; i++) {
      from_left[i] = 1;
      from_right[i] = 1;
    }
    vector<int> stk;
    for (int i = l; i < r; i++) {
      while (!stk.empty() && d[stk.back()] < d[i]) {
        int j = stk.back();
        stk.pop_back();
        from_left[i] += from_left[j];
      }
      stk.push_back(i);
    }
    stk.clear();
    for (int i = r - 1; i >= l; i--) {
      while (!stk.empty() && d[stk.back()] <= d[i]) {
        int j = stk.back();
        stk.pop_back();
        from_right[i] += from_right[j];
      }
      stk.push_back(i);
    }
    long long ans = 0;
    for (int i = l; i < r; i++) {
      ans += d[i] * 1LL * from_left[i] * from_right[i];
    }
    printf("%lld\n", ans);
  }
  return 0;
}