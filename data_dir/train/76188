#include<iostream>
#include<cstdio>

#include<string>
#include<vector>
#include<set>
#include<map>
#include<unordered_map>
#include<queue>
#include<deque>
#include<stack>

#include<iomanip>
#include<algorithm>
#include<cstring>
#include<ctime>
#include<cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define correct(x, y, n, m) (0 <= x && x < n && 0 <= y && y < m)
#define X first
#define Y second
#define all(a) a.begin(), a.end()
#define pb push_back
#define mp make_pair
#define sz(v) (int)(v.size())
#define hash hash_

template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }

typedef long long li;
typedef unsigned long long uli;
typedef long double ld;
typedef pair<int, int> pt;

const int N = 300009;
const int logN = 22;
const int sqrN = 450;
const int MOD = 1000000007;
const int INF = 1e9 + 100;
const li INF64 = 2e18;
const ld PI = 3.1415926535897932384626433832795;
const ld eps = 1e-9;

int dx[] = {0, 0, -1, 1};
int dy[] = {-1, 1, 0, 0};

li a[N];
li f[N];
li dp[5009][5009];

li get(int l, int r){
    return f[r] - f[l];
}

int main(){
     
    srand(time(NULL));
    cout << setprecision(10) << fixed;
    cerr << setprecision(10) << fixed;          
    
    
    int n, k;
    cin >> n >> k;
    forn(i, n)
        cin >> a[i];
    sort(a, a + n);
    
    for(int i = 1; i < n; ++i)
        f[i] = f[i - 1] + a[i] - a[i - 1];

    if(n % k == 0){
        li res = 0;
        li d = n / k;
        forn(i, k){
            int l = i * d, r = i * d + d - 1;
            res += get(l, r);
        }
        cout << res;
        return 0;
    }

    map <int, int> m;
    for(int i = 1; i <= k; ++i)
        m[((n - i) / k)]++;

    
    vector <int> v;
    vector <int> cnt;
    for(map<int, int> :: iterator it = m.begin(); it != m.end(); ++it){
        v.pb(it -> X);
        cnt.pb(it -> Y);
    }

    //assert(sz(v) == 2);

    forn(i, 2)
        ++v[i];
    forn(i, k + 3)
        forn(j, k + 3)
            dp[i][j] = INF64;

    dp[0][0] = 0;
    // j == cnt1
    forn(i, k + 3)
        forn(j, k + 3){
            int cnt1 = j, cnt2 = i - j;
            int l = cnt1 * v[0] + cnt2 * v[1];
            int r = l + v[0] - 1;
            if(r < n)
                dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][j] + get(l, r));
            r = l + v[1] - 1;
            if(r < n)
                dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + get(l, r));
        }

    li ans = INF64;
    
    cout << dp[cnt[0] + cnt[1]][cnt[0]];
    return 0;
}