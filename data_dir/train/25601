#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>
#include <complex>
#include <cassert>
#include <regex>
#include <random>
#include <numeric>
#include <functional>

using namespace std;

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()

typedef pair<int, int> pt;

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("sum.in", "r", stdin);
	//freopen("sum.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cout.precision(7);
	cout.setf(ios::fixed);
	map<int, int>cnt;

	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		int x;
		cin >> x;
		cnt[x]++;
	}

	int ans = 0;
	while (1) {
		int mn = cnt.begin()->first;
		int mx = cnt.rbegin()->first;

		if (cnt.size() == 1) {
			ans += cnt.begin()->first * cnt.begin()->second;
			break;
		}

		pt p1 = *cnt.rbegin();
		cnt.erase(--cnt.end());
		pt p2 = *cnt.rbegin();

		int can = (p1.first - p2.first + p2.first - 1) / p2.first;
		int val = p1.first - can * p2.first;
		cnt[val] += p1.second;
	}

	cout << ans;
	return 0; 
}