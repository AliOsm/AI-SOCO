#include <bits/stdc++.h>
using namespace std;

class LRUCache{
    size_t m_capacity;
    unordered_map<int, list<pair<int, int>>::iterator> m_map;
    list<pair<int, int>> m_list;

public:
    LRUCache(size_t capacity):m_capacity(capacity) {}

    int get(int key) {
        auto found_iter = m_map.find(key);
        if (found_iter == m_map.end()) {
            return - 1;
        }
    }

};



int main() {
    int n, m; scanf("%d %d", &n, &m);
    long long int nMod[5] = {0};
    long long int mMod[5] = {0};

    for(int i = 1; i <= n; i++) {
        nMod[i % 5] ++;
    }
    for(int i = 1; i <= m; i++) {
        mMod[i % 5] ++;
    }
    long long ans = 0;
    for(int i = 0; i < 5; i++) {
        for(int j = 0; j < 5; j++) {
            if((i + j) % 5 == 0) {
                ans += (long long)(nMod[i] * mMod[j]);
            }
        }
    }
    printf("%lld", ans);
}
