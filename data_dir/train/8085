#include <bits/stdc++.h>

using namespace std;

const int N = 1e3 + 5;
char s[N][N];
int vis[N][N][4], d[N][N][4], sx, sy, ex, ey, n, m;
int dr[] = {0, -1, 0, 1, 0};
int dc[] = {1, 0, -1, 0, 0};
int dz[] = {0, 0, 0, 0, 1};

bool ok(int r, int c, int z){
    return 0 <= r && r < n && 0 <= c && c < m && !vis[r][c][z];
}

void BFS(){
    vis[sx][sy][0] = 1;
    queue<pair<pair<int, int>, int>> q;
    q.push({{sx, sy}, 0});
    while(q.size()){
        int r = q.front().first.first;
        int c = q.front().first.second;
        int z = q.front().second;
        q.pop();
        for(int i=0; i<5; i++){
            int nr = r + dr[i];
            int nc = c + dc[i];
            int nz = (z + dz[i]) % 4;
            if(ok(nr, nc, nz)){
                if(i == 4 || (d[r][c][(i + z) % 4] && d[nr][nc][(i + z + 2) % 4])){
                    vis[nr][nc][nz] = vis[r][c][z] + 1;
                    q.push({{nr, nc}, nz});
                }
            }
        }
    }
}

int main()
{
    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++){
        scanf("%s", s[i]);
        for(int j=0; j<m; j++){
            char c = s[i][j];
            d[i][j][0] = (c == '+' || c == '-' || c == '>' || c == 'L' || c == 'U' || c == 'D');
            d[i][j][2] = (c == '+' || c == '-' || c == '<' || c == 'R' || c == 'U' || c == 'D');
            d[i][j][1] = (c == '+' || c == '|' || c == '^' || c == 'L' || c == 'R' || c == 'D');
            d[i][j][3] = (c == '+' || c == '|' || c == 'v' || c == 'L' || c == 'U' || c == 'R');

        }
    }
    scanf("%d %d %d %d", &sx, &sy, &ex, &ey);
    --sx, --sy, --ex, --ey;
    BFS();
    int ans = 1e9, f = 0;
    for(int i=0; i<4; i++){
        if(vis[ex][ey][i] != -1){
            f = 1;
            ans = min(ans, vis[ex][ey][i] - 1);
        }
    }
    printf("%d", f ? ans : -1);
    //printf("%d%c", f ? ans : -1, " \n"[c == m - 1]);
    return 0;
}
