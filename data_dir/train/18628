//In the name of Allah

#include <bits/stdc++.h>
using namespace std;

#define int ll

typedef long long ll;
typedef pair <int , int> pii;

const int N = 1e5+10 , mod = 1e9+7;

int dp_down[N][2] , dp_up[N][2];
vector <int> g[N];

inline int power(int x , int y){
	int ret = 1;
	for( ; y ; y /= 2){
		if(y & 1)
			ret = 1ll * ret * x % mod;
		x = 1ll * x * x % mod;
	}
	return ret;
}

void dfs_up(int v , int p){
	int e = dp_up[v][0] , o = max(dp_up[v][1] , 1ll) , ch = 0;
	for(int u : g[v])
		if(u != p){
			ch++;
			(e *= (dp_down[u][0] + dp_down[u][1])) %= mod;
			(o *= (dp_down[u][0] + dp_down[u][1])) %= mod;
		}
	if(ch == 1 && p == -1)
		o = 0;
	for(int u : g[v])
		if(u != p){
			int x = e * power(dp_down[u][0] + dp_down[u][1] , mod - 2) % mod;
			int y = o * power(dp_down[u][0] + dp_down[u][1] , mod - 2) % mod;
			dp_up[u][0] = (x + y) % mod;
			dp_up[u][1] = (x + y) % mod;
			dfs_up(u , v);
		}
}

void dfs_down(int v , int p){
	int e = 1 , o = 1 , ch = 0 , cnt = 0;
	for(int u : g[v])
		if(u != p){
			dfs_down(u , v);
			(e *= (dp_down[u][0] + dp_down[u][1])) %= mod;
			(o *= (dp_down[u][1] + dp_down[u][0])) %= mod;
			ch++;
		}
	if(!ch){
		dp_down[v][0] = 1ll;
		dp_down[v][1] = 0;
	}
	else{
		dp_down[v][0] = e;
		dp_down[v][1] = o;
	}
}

int32_t main(){
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	int n;
	cin >> n;
	for(int i = 0 ; i < n - 1 ; i++){
		int u , v;
		cin >> u >> v;
		u--; v--;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	dfs_down(0 , -1);
	dp_up[0][0] = 1ll;
	dfs_up(0 , -1);
	int ans = 0;
	for(int i = 0 ; i < n ; i++){
//		cout << i << " " << dp_down[i][0] << " " << dp_down[i][1] << endl;
//		cout << i << " " << dp_up[i][0] << " " << dp_up[i][1] << endl;
		(ans += dp_down[i][0] * dp_up[i][0] % mod) %= mod;
		(ans += max(dp_down[i][1] , 1ll) * max(dp_up[i][1] , 1ll) % mod) %= mod;
	}
	cout << ans;
	return 0;
}

