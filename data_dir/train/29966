#include <bits/stdc++.h>

using namespace std;
typedef long long ll;

const int N = 100005;
const int M = 1000006;
const int mod = 1e9+7;

int n, a[N];

vector<int> occ[M];

ll dp[N];
int vis[N], pass;

int add(int a, int b){
    a += b;
    if(a >= mod) a -= mod;
    return a;
}

ll sum(int x){
    ll ans = 0;
    for(; x; x -= x & -x){
        if(vis[x] != pass) vis[x] = pass, dp[x] = 0;
        ans = add(ans, dp[x]);
    }
    return ans;
}

ll sum(int i, int j){
    return add(sum(j), mod - sum(i-1));
}

void upd(int x, ll val){
    for(; x < N; x += x & -x){
        if(vis[x] != pass) vis[x] = pass, dp[x] = 0;
        dp[x] = add(dp[x], val);
    }
}


int main(){

    scanf("%d", &n);

    for(int i = 1; i <= n; i++) scanf("%d", a+i);

    for(int i = 1; i <= n; i++) occ[ a[i] ].push_back(i);

    ll ans = 0;
    for(int i = n; i >= 1; i--){
        vector<int> now, tmp;
        for(int j = i; j < M; j += i) if(!occ[j].empty()){
            //tmp.resize(now.size() + occ[j].size());
            // merge(now.begin(), now.end(), occ[j].begin(), occ[j].end(), tmp.begin());
            //swap(tmp, now);
            for(int x : occ[j]) now.push_back(x);
        }
        
        tmp.clear();
        for(int id : now){
            int t = 1 + sum(id+1, N-1);
            if(i == 1) ans += t;
            tmp.push_back(t);
        }
        pass++;
        for(int j = 0; j < (int)now.size(); j++){
            upd(now[j], tmp[j]);
        }
    }

    ans %= mod;

    printf("%lld\n", ans);

}
