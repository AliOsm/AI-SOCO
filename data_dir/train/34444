//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
#define mem(a,v) memset((a), (v), sizeof (a))
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pil pair<int, long long>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vil vector<pil>
#define vll vector<pll>
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> oset;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const ll INF = 1e9 + 7;
const int MAXN = 1e3 + 5;
const double eps = 1e-9;
ll a[MAXN], sm[MAXN], sm2[MAXN];
ll p10[20];

pll f(int x) {
	int ret = 0;
	ll v = x;
	while (v > 0) {
		ret++;
		v /= 10ll;
	}
	ll r = 1;
	for (int i = 1; i < ret; i++)
		r *= 10ll;
	return mp(ret, x-r);
}

ll gt(ll mi) {
	ll m, v; tie(m,v) = f(mi);
	return (mi+1) * (sm[m-1] + m * (v+1)) - sm2[m-1] - m * (p10[m-1]+mi) * (mi-p10[m-1]+1) / 2;
}

ll gt2(ll mi) {
	ll m, v; tie(m,v) = f(mi);
	return sm[m-1] + m * (v+1);
}

int main() {
	ll pw = 1;
	p10[0] = 1;
	for (ll i = 1; i < 20; i++) {
		sm[i] = pw * 9ll * i + sm[i-1];
		sm2[i] = sm2[i-1] + i * (11ll * pw - 1ll) * (pw * 9ll) / 2;
		pw *= 10ll;
		p10[i] = pw;
	}
	int q; ni(q);
	for (int i = 0; i < q; i++) {
		nl(a[i]);
		ll lo = 1, hi = INF;
		int ans = -1;
		while (lo <= hi) {
			ll mi = (lo+hi) / 2;
			ll cnt = gt(mi);
			if (cnt == a[i]) {
				ans = mi%10;
				break;
			} else if (cnt < a[i])
				lo = mi+1;
			else
				hi = mi-1;
		}
		if (ans != -1) {
			pri(ans);
			continue;
		}
		//hi + some numbers
		ll h = hi;
		ll dif = a[i] - gt(h);
		lo = 1, hi = h;
		while (lo <= hi) {
			ll mi = (lo+hi) / 2;
			ll cnt = gt2(mi);
			if (cnt == dif) {
				ans = mi % 10;
				break;
			} else if (cnt < dif)
				lo = mi + 1;
			else
				hi = mi - 1;
		}
		if (ans != -1) {
			pri(ans);
			continue;
		}
		// add lo
		dif -= gt2(hi);
		vi tmp;
		while (lo > 0) {
			tmp.pb(lo % 10);
			lo /= 10;
		}
		while (dif > 0) {
			ans = tmp.back();
			tmp.pop_back();
			dif--;
		}
		pri(ans);
	}
	return 0;
}
