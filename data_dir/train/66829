#include <iostream>
#include <vector>
#include <stdio.h>
#include <tuple>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <string>
#include <map>
//#include <stack>
//#include <set>
//#include <complex>
#include <bitset>
#include <cstring>

#define INF 1000000021
#define MOD 1000000007
#define p_b push_back
#define p_p pop_back
#define p_f push_front
#define sqr(a) (a)*(a)
#define f0r(i, a, b) for(int i = a; i <= b; i ++)
#define ison(s, j) (s & (1 << j))
#define stbt(s, j) (s |= (1 << j))
#define clbt(s, j) (s &= ~(1 << j))
#define r0f(i, a, b) for(int i = a; i >= b; i --)
#define all(x) (x.begin(), x.end())
#define deb(x) cerr << #x << " = " << x << '\n'
#define M 222222
using namespace std;

typedef long double ld;
typedef long long ll;
typedef tuple<int,int,int> tii;
typedef tuple<ll, ll, ll> tll;
typedef pair<int ,int> pii;
typedef pair<ll, ll> pll;
typedef map<int, int> mpii;
typedef map<string, int> mpsi;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef queue<int> qi;
typedef queue<ll> qll;
typedef priority_queue<int> pqi;
typedef priority_queue<ll> pqll;

const ld pi = 2 * acos(0.0);
template<class T> bool umin(T& a, T b){if(a>b){a=b; return 1;} return 0;}
template<class T> bool umax(T& a, T b){if(a<b){a=b; return 1;} return 0;}
template<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a;}
template<class T> T lcm(T a, T b) { return a*(b / gcd(a, b)); }
template<class T, class TT>bool pal(T a, TT n){int k=0;f0r(i,0,n/2){if(a[i]!=a[n-i-1]){k=1;break;}}return k?0:1;}

//int month[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

int a[M], dp[M];
int main()
{
	//freopen("Ganiyev.txt", "r", stdin");
	//freopen("Asadullo.txt", "w", stdout);
	//ios::sync_with_stdio(0);
	//cin.tie(0); cout.tie(0);
	int n, k;
	scanf("%d%d", &n, &k);
	f0r(i, 1, n)
	{
		scanf("%d", a + i);
	}
	f0r(i, 1, k)
	{
		int l = i -k;
		if(l < 1)
			l = 1;
		int r = i + k;
		if(r > n)
			r = n;
		dp[i] = r - l + 1;
	}
	f0r(i, k + 1, n)
	{
		int t = a[i];
		if(i - a[i] - 1 < 2 * k && a[i])
		{
			int l = a[i] + k;
			int r = i + k;
			if(l > n)
				l = n;
			if(r > n)
				r = n;
			dp[i] = dp[a[i]] + r - l;
		}
		else
		{
			int l = i - k;
			int r = i + k;
			if(l < 1)
				l = 1;
			if(r > n)
				r = n;
			dp[i] = dp[a[i]] + r - l + 1;
			}
	}
	f0r(i, 1, n)
		printf("%d ", dp[i]);
	getchar();
	getchar();
	return 0;
}