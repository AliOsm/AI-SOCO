#include <bits/stdc++.h>

struct Edge {
    int w,id;
    bool in;

    bool operator < (const Edge &rhs) const {
        if (w != rhs.w) return w < rhs.w;
        return in > rhs.in;
    }
};

const int N = 100000 + 5;
Edge e[N];
int n,m;
int weight[N];
int L[N],R[N];

bool work() {
    std::sort(e,e + m);
    int now = 0;
    int l = 0,r = 0;
    for (int i = 0; i < m; ++ i) {
        if (e[i].in == false) {
            if (l + 1 >= r || weight[r] > e[i].w) {
                return false;
            }
            L[e[i].id] = l;
            R[e[i].id] = r;
            //printf("out %d %d %d\n",l + 1,r + 1,e[i].w);
            l ++;
            if (l + 1 >= r) {
                if (r < now) {
                    r ++;
                    l = 0;
                }
            }
        } else {
            weight[++now] = e[i].w;
            L[e[i].id] = now - 1;
            R[e[i].id] = now;
            //printf("in %d %d %d\n",now - 1 + 1,now + 1,e[i].w);
            if (l + 1 >= r) {
                r ++;
                l = 0;
            }
        }
    }
    for (int i = 0; i < m; ++ i) {
        printf("%d %d\n",L[i] + 1,R[i] + 1);
    }
    puts("");
    return true;
}

int main() {
    scanf("%d%d",&n,&m);
    for (int i = 0; i < m; ++ i) {
        int a,b;
        scanf("%d%d",&a,&b);
        e[i] = {a,i,b == 1};
    }
    if (!work()) {
        puts("-1");
    }
}
