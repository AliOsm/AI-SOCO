#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <utility>
#include <algorithm>
#include <memory.h>
#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <conio.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define pii pair<int, int>
#define vi vector<int>
#define inf 2000000000
#define mod 1000000007
#define mod2 536870911
#define y1 uhgeg
#define lim 31700

typedef long long ll;
typedef unsigned long long ull;

struct edge
{
	int u, w, ready, link;
	bool in_way;
	edge(int u, int w, int ready, int link) : u(u), w(w), ready(ready), link(link)
	{
		in_way = 0;
	}
};

int n, m, j, i, f, k, h, q1, q2, q, d[2][100500];
vector<edge> v[100500];
pii par[100500];

void dejk(int num)
{
	d[num][1] = 0;
	priority_queue<pii, vector<pii>, greater<pii> > qu;
	qu.push(pii(0, 1));
	int u;
	pii cur;
	while (!qu.empty())
	{
		do
		{
			cur = qu.top();
			qu.pop();
		}
		while (!qu.empty() && d[num][cur.second] != cur.first);
		if (d[num][cur.second] != cur.first)
		{
			break;
		}
		u = cur.second;
		for (int i = 0; i < v[u].size(); i++)
		{
			if (d[num][v[u][i].u] > d[num][u] + v[u][i].w && (num == 0 || d[0][u] + 1 == d[0][v[u][i].u]))
			{
				d[num][v[u][i].u] = d[num][u] + v[u][i].w;
				par[v[u][i].u] = pii(u, i);
				qu.push(pii(d[num][v[u][i].u], v[u][i].u));
			}
		}
	}
}

void solve()
{
	scanf ("%d%d", &n, &m);
	for (j = 1; j <= m; j++)
	{
		scanf ("%d%d%d", &q1, &q2, &q);
		v[q1].pb(edge(q2, 1, q, v[q2].size()));
		v[q2].pb(edge(q1, 1, q, v[q1].size() - 1));
		if (q)
		{
			k++;
		}
	}
	memset(d, 127, sizeof(d));
	dejk(0);
	f = d[0][n];
	for (j = 1; j <= n; j++)
	{
		for (i = 0; i < v[j].size(); i++)
		{
			v[j][i].w = 1 - v[j][i].ready;
		}
	}
	dejk(1);
	q = n;
	while (q != 1)
	{
		v[par[q].first][par[q].second].in_way = 1;
		v[q][v[par[q].first][par[q].second].link].in_way = 1;
		q = par[q].first;
	}
	printf ("%d\n", k - d[0][n] + 2 * d[1][n]);
	for (j = 1; j <= n; j++)
	{
		for (i = 0; i < v[j].size(); i++)
		{
			if (v[j][i].u > j)
			{
				if (v[j][i].in_way ^ v[j][i].ready)
				{
					printf ("%d %d %d\n", j, v[j][i], 1 - (int)(v[j][i].ready));
				}
			}
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);
	//freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
	solve();
	return 0;
}