#include<bits/stdc++.h>
using namespace std;
#define M 100005

int root;

struct query
{
    int l, r, idx, ans;

    bool operator<(const query& a) const
    {
        if((l+root-1)/root != (a.l+root-1)/root) return (l+root-1)/root < (a.l+root-1)/root;
        else return r < a.r;
    }

}qara[M];

int ans[M];
int pri[M];
int ara[M];

int main()
{
    int n, i, j, k, x, y, p, q, m;

    cin>>n>>m;
    for(i = 1; i <= n; i++) cin>>ara[i];

    int l, r, temp;
    l = r = temp = 0;

    for(i = 1; i <= m; i++) cin>>qara[i].l>>qara[i].r;
    for(i = 1; i <= m; i++) qara[i].idx = i;

    root = sqrt(n);
    sort(qara+1, qara+m+1);

    for(i = 1; i <= m; i++)
    {
        while(l != qara[i].l)
        {
            if(l < qara[i].l)
            {
                j = ara[l];
                l++;
                if(j == 0 || j > n) continue;
                if(pri[j] == j) temp--;
                else if(pri[j] == j+1) temp++;
                pri[j]--;
            }
            else
            {
                j = ara[l-1];
                l--;
                if(j == 0 || j > n) continue;
                if(pri[j] == j-1) temp++;
                else if(pri[j] == j) temp--;
                pri[j]++;
            }
        }

        while(r != qara[i].r)
        {
            if(r < qara[i].r)
            {
                j = ara[r+1];
                r++;
                if(j == 0 || j > n) continue;
                if(pri[j] == j-1) temp++;
                else if(pri[j] == j) temp--;
                pri[j]++;
            }
            else
            {
                j = ara[r];
                r--;
                if(j == 0 || j > n) continue;
                if(pri[j] == j) temp--;
                else if(pri[j] == j+1) temp++;
                pri[j]--;
            }
        }

        qara[i].ans = temp;
    }

    for(i = 1; i <= m; i++) ans[qara[i].idx] = qara[i].ans;

    for(i = 1; i <= m; i++) printf("%d\n", ans[i]);

    return 0;
}
