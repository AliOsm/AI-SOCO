#include <iostream>
#include <vector>
using namespace std;

vector<vector<int> > gr;
vector<bool> used;

int dfs(int v, int k = 1)
{
	used[v] = true;
	int m = k;
	for (int i = 0; i < gr[v].size(); ++i)
	{
		int to = gr[v][i];
		if (!used[to])
		{
			
			m = max(m, dfs(to, k+1));
		}
	}
	used[v] = false;
	return m;
}

int main(void)
{
	int n, p;
	cin >> n;
	gr.resize(n);
	for (int i = 0; i < n; i++)
	{
		cin >> p;
		if (--p != -2)
		{
			gr[p].push_back(i);
		}
	}
	used.resize(n, false);
	int m = 0;
	for (int i = 0; i < used.size(); ++i)
	{
		if (!used[i])
			m = max(dfs(i), m);
	}
	cout << m;
	return 0;
}