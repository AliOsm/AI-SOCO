///Bismillahir Rahmanir Rahim
#include<bits/stdc++.h>

#define                           int                         long long
#define                           fi                          first
#define                           si                          second
#define                           mp                          make_pair
#define                           pb                          push_back
#define                           meme(x)                     memset(x,0,sizeof(x));
#define                           pi                          pair<int,int>
#define                           f(i,l,r)                    for(int i=l;i<=r;i++)
#define                           rf(i,r,l)                   for(int i=r;i>=l;i--)
#define                           done(i)                     cout<<"done = "<<i<<endl;
#define                           fast                        ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);




using namespace std;

const int inf=1e18;
const int mod=1e9+7;
const int M=5000009;
inline int bigmod(int B,int P){int R=1;while(P>0){if(P&1){R=(R*B)%mod;}P>>=1;B=(B*B)%mod;}return R;}

int fact[M+7],infact[M+7];
int spf[M+7];
void sieve()
{
    spf[1]=1;
    f(i,1,M)spf[i]=i;
    for(int i=4;i<=M;i=i+2)
    {
        spf[i]=2;
    }
    for(int i=3;i*i<=M;i=i+2)
    {
        if(spf[i]==i)
        {
           for(int j=i*i;j<=M;j=j+i)
           {
               if(spf[j]==j)
               {
                   spf[j]=i;
               }
           }
        }
    }
}
void prime_factorization(int val,vector<int>&prime,vector<int>&power)
{
    while(val!=1)
    {
        int p=spf[val],cnt=0;
        prime.pb(p);
        while(val%p==0)val=val/p,cnt++;
        power.pb(cnt);
    }
}
void init()
{
    sieve();
    fact[0]=1;infact[0]=1;
    f(i,1,M)fact[i]=(fact[i-1]*i)%mod;
    infact[M]=bigmod(fact[M],mod-2);
    rf(i,M-1,1)infact[i]=(infact[i+1]*(i+1))%mod;
}
 main()

{
    fast
    init();
    int q;
    cin>>q;

    while(q--)
    {
        int x,y,ses=1LL;
        cin>>x>>y;
        vector<int>prime,cnt;
        prime_factorization(x,prime,cnt);
        for(int p:cnt)
        {
            ses=(ses*fact[p+y-1])%mod;
            ses=(ses*infact[p])%mod;
            ses=(ses*infact[y-1])%mod;
        }
        ses=(ses*bigmod(2LL,y-1))%mod;
        if(ses<0)ses+=mod;
        ses=ses%mod;
        cout<<ses<<endl;
    }

    return 0;

}


