#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define fi first
#define se second
ll mpow(ll a, ll n,ll mod)
{ll ret=1;ll b=a;while(n) {if(n&1)
    ret=(ret*b)%mod;b=(b*b)%mod;n>>=1;}
return (ll)ret;
}
using namespace std;
#define sd(x) scanf("%d",&x)
#define pd(x) printf("%d",x)
#define sl(x) scanf("%lld",&x)
#define pl(x) printf("%lld",x)
#define mem(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define all(v) v.begin(),v.end()
#define N (int)(2e5+25)
map<int,int> ma1;
map<int,int> ma2;
vector<pair<pii,char> > v;
vector<int> allQx,allQy;
int n,q;
int tree[4*200011][2];
int lazy[4*200011][2];
struct node{
	int l,r,id,k;
	node(){

	}
	node(int l_,int r_,int id_,int _k){
		l=l_;
		r=r_;
		id=id_;
		k=_k;
		lazy_update();
	}
	node left(){
		return node(l,(l+r)/2,2*id,k);
	}
	node right(){
		return node((l+r)/2+1,r,2*id+1,k);
	}
	void lazy_update(){
		if(lazy[id][k]==0) return;
		if(l!=r){
			lazy[2*id][k]=max(lazy[id][k],lazy[2*id][k]);
			lazy[2*id+1][k]=max(lazy[id][k],lazy[2*id+1][k]);
		}
		tree[id][k]=max(tree[id][k],lazy[id][k]);
		lazy[id][k]=0;
	}
	int query(int s,int e,int k){
		if(r<s or e<l) return 0;
		if(s<=l and r<=e) return tree[id][k];
		return max(left().query(s,e,k),right().query(s,e,k));
	}
	void update(int s,int e,int x,int k){
		if(r<s or e<l) return;
		if(s<=l and r<=e){
			lazy[id][k]=max(lazy[id][k],x);
			lazy_update();
			return;
		}
		left().update(s,e,x,k);
		right().update(s,e,x,k);
		tree[id][k]=max(tree[2*id][k],tree[2*id+1][k]);
	}
};
void solve(){
    int c=1;
    sd(n);sd(q);
    allQx.pb(0);
    allQy.pb(0);
    for(int i=1;i<=q;i++){
        int x,y;
        char c;
        cin>>x>>y>>c;
        v.pb(mp(mp(x,y),c));
        allQx.pb(x);
        allQy.pb(y);
    }
    allQx.pb(n);
    allQy.pb(n);
    sort(all(allQx));
    sort(all(allQy));
    for(int i=0;i<allQx.size();i++){
        if(ma1.find(allQx[i])==ma1.end()){
            ma1[allQx[i]]=c++;
        }
    }
    c=1;
    for(int i=0;i<allQy.size();i++){
        if(ma2.find(allQy[i])==ma2.end()){
            ma2[allQy[i]]=c++;
        }
    }
    node R(1,q,1,0);
    node C(1,q,1,1);
    for(int i=0;i<v.size();i++){
        char type=v[i].se;
        if(type=='U'){
            int x=R.query(ma1[v[i].fi.fi],ma1[v[i].fi.fi],0);
            C.update(ma2[x],ma2[v[i].fi.se],v[i].fi.fi,1);
            R.update(ma1[v[i].fi.fi],ma1[v[i].fi.fi],v[i].fi.se,0);
            pd(v[i].fi.se-x);
            printf("\n");
        }
        else{
            int x=C.query(ma2[v[i].fi.se],ma2[v[i].fi.se],1);
            R.update(ma1[x],ma1[v[i].fi.fi],v[i].fi.se,0);
            C.update(ma2[v[i].fi.se],ma2[v[i].fi.se],v[i].fi.fi,1);
            pd(v[i].fi.fi-x);
            printf("\n");
        }
    }
}
int main(){
   //freopen("input.txt","r",stdin);
   //freopen("out.txt","w",stdout);
    int t=1;
   // sd(t);
   for(int i=1;i<=t;i++){
       //printf("Case #%d:\n",i);
       solve();
   }
   return 0;
}
