#include<bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; ++i )
#define clr( t , val ) memset( t , val , sizeof( t ) )

#define pb push_back
#define SZ( v ) ((int)(v).size())
#define all( v ) v.begin() , v.end()

#define mp make_pair
#define fi first
#define se second

#define N 100000

typedef long long ll;
typedef vector< int > vi;

int a , b , n ;
int p[ N + 5 ];
int id[ N + 5 ] , sz[ N + 5 ];

int Find( int x ){ return id[ x ] = (id[ x ] == x ? x : Find( id[ x ] )); }
void Union( int a , int b ){
    int pa = Find( a ) , pb = Find( b );
    if( pa != pb ) id[ pa ] = pb , sz[ pb ] += sz[ pa ];
}
vi G[ N + 5 ];
int ind[ N + 5 ] ;
void add( int u , int v ){
    //cout << u << " " << v << endl;
    G[ u ].pb( v );
    ind[ v ] ++;
}
int vis[ N + 5 ] , ans[ N + 5 ];
void dfs( int u , int doit ){
    vis[ u ] = 1;
    if( (p[ u ] << 1) == a ){
        if( doit ) ans[ u ] = 0;
        return;
    }
    if( (p[ u ] << 1) == b ){
        if( doit ) ans[ u ] = 1;
        return;
    }
    REP( i , SZ( G[ u ] ) ){
        int v = G[ u ][ i ];
        if( !vis[ v ] ){
            dfs( v , doit ^ 1 );
            if( doit ){
                if( p[ u ] + p[ v ] == a ) ans[ u ] = ans[ v ] = 0;
                else ans[ u ] = ans[ v ] = 1;
            }
        }
    }
}
void impr( int arr[ N + 5 ] ){
    REP( i , n ) cout << arr[ i ] << char(i + 1 == n ? 10 : 32);
}
int main(){
    ios_base :: sync_with_stdio( 0 );
    while( cin >> n >> a >> b ){
        REP( i , N ) id[ i ] = i , sz[ i ] = 1;
        REP( i , N ) G[ i ].clear();
        clr( ind , 0 );
        map< int , int > mapa;
        REP( i , n ) cin >> p[ i ] , mapa[ p[ i ] ] = i;
        REP( u , n ){
            int val = a - p[ u ] , v = mapa.count( val ) ? mapa[ val ] : -1;
            if( v != -1 ) Union( u , v ) , add( u , v );
            if( a == b ) continue;
            val = b - p[ u ] , v = mapa.count( val ) ? mapa[ val ] : -1;
            if( v != -1 ) Union( u , v ) , add( u , v );
        }
        bool solve = 1;
        REP( i , n ) 
            if( Find( i ) == i ){
                if( sz[ i ] & 1 ){
                    if( !(a & 1)  && mapa.count( a >> 1 ) && Find( mapa[ a >> 1 ] ) == i ) continue;
                    if( !(b & 1)  && mapa.count( b >> 1 ) && Find( mapa[ b >> 1 ] ) == i ) continue;
                    if( sz[ i ] > 1 ) {
                        solve = 0;
                        break;
                    }
                    solve = 0;
                    break;
                }
            }
        if( !solve ){
            cout << "NO\n";
            continue;
        }
        
        clr( vis , 0 ) , clr( ans , -1 );
        REP( i , n )
            if( ind[ i ] == 1 && !vis[ i ] ) {
                dfs( i , 1 );
            }
        cout << "YES\n";
        //impr( ind );
        
        impr( ans );
    }
}