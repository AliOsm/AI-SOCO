#include<bits/stdc++.h>
using namespace std;
#define dbg(x)  cout << #x << ": " << x << endl

int main () {
  int n, m, x, y;
  long long k;
  while (cin >> n >> m >> k >> x >> y) {
    vector<vector<long long> > mat(n, vector<long long>(m, 0));
    if (n == 1) {
      if (m == 1)
        cout << k << " " << k << " " << k << endl;
      else {
        long long mmin = k / m;
        long long mod = k % m;
        long long mmax = k / m + ((mod != 0) ? 1 : 0);
        long long tt = mmin + ((mod >= y) ? 1 : 0);
        cout << mmax << " " << mmin << " " << tt << endl;
      }
    }else{
      vector<long long> accu(n, 0);
      long long ev = 0;

      long long rs = n * m;
      long long rsp = n * m - m;
      int startsim = -1;
      if (k >= rs) {
        for (int i = 0; i < n; i++) accu[i]++;
        k -= rs;
        startsim = 1;
      }
      if (k >= rsp && startsim != -1) {
        ev = k / (rsp * 2);
        for (int i = 0; i < n - 1; i++) accu[i] += ev;
        for (int i = 1; i < n; i++) accu[i] += ev;
        k -=  rsp * 2 * ev;

        if (k >= rsp) {
          for (int i = 0; i < n - 1; i++) accu[i]++;
          k -= rsp;
          startsim = 0;
        }
      }
      //cout << k << " " << startsim << endl;
      if (startsim == 0) {
        for (int i = 1; i < n && k > 0; i++) {
          for (int j = 0; j < m && k > 0; j++) {
            mat[i][j]++;
            k--;
          }
        }
      }else if(startsim == 1){
        for (int i = n - 2; i >= 0 && k > 0; i--) {
          for (int j = 0; j < m && k > 0; j++) {
            mat[i][j]++;
            k--;
          }
        }
      }else{
        for (int i = 0; i < n && k > 0; i++) {
          for (int j = 0; j < m && k > 0; j++) {
            mat[i][j]++;
            k--;
          }
        }
      }
      long long mmin = 1000000000000000000, mmax = -1;
      for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
          mat[i][j] += accu[i];
          mmin = min(mmin, mat[i][j]);
          mmax = max(mmax, mat[i][j]);
        }
      }
      cout << mmax << " " << mmin << " " << mat[x - 1][y - 1] << endl;
    }
  }
}