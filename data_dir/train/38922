#include<bits/stdc++.h>

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define all(c) (c).begin(),(c).end()
#define mp make_pair
#define pb push_back
#define each(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
const int inf = (int)1e9;
const double INF = 1e12, EPS = 1e-9;

typedef int Weight;
struct Edge {
  int src, dst;
  Weight weight;
  Edge(int src, int dst, Weight weight=0) :
    src(src), dst(dst), weight(weight) { }
};
bool operator < (const Edge &e, const Edge &f) {
  return e.weight != f.weight ? e.weight > f.weight : // !!INVERSE!!
    e.src != f.src ? e.src < f.src : e.dst < f.dst;
}
typedef vector<Edge> Edges;
typedef vector<Edges> Graph;

typedef vector<Weight> Array;
typedef vector<Array> Matrix;

void visit(const Graph & g, int v, int u,
    Edges& brdg, vector< vector<int> >& tecomp,
    stack<int>& roots, stack<int>& S, vector<bool>& inS,
    vector<int>& num, int& time) {
  num[v] = ++time;
  S.push(v); inS[v] = true;
  roots.push(v);
  each(e, g[v]) {
    int w = e->dst;
    if (num[w] == 0)
      visit(g, w, v, brdg, tecomp, roots, S, inS, num, time);
    else if (u != w && inS[w])
      while (num[roots.top()] > num[w]) roots.pop();
  }
  if (v == roots.top()) {
    brdg.push_back(Edge(u, v));
    tecomp.push_back(vector<int>());
    while (1) {
      int w = S.top(); S.pop(); inS[w] = false;
      tecomp.back().push_back(w);
      if (v == w) break;
    }
    roots.pop();
  }
}
void bridge(const Graph& g, Edges& brdg, vector< vector<int> >& tecomp) {
  const int n = g.size();
  vector<int> num(n);
  vector<bool> inS(n);
  stack<int> roots, S;
  int time = 0;
  rep(u, n) if (num[u] == 0) {
    visit(g, u, n, brdg, tecomp, roots, S, inS, num, time);
    brdg.pop_back();
  }
}



const char *str[] = {"none", "any", "at least one"};
const int MX = 100000;
int n, m, ans[MX];

int p[MX];
inline int root(int x){
	if(x == p[x]) return x;
	return p[x] = root(p[x]);
}
inline void merge(int a, int b){
	a = root(a); b = root(b);
	if(a != b) p[b] = a;
}

int main(){
	scanf("%d%d", &n, &m);
	
	vector<pair<pi, pi> > es;
	rep(i, m){
		int a, b, c;
		scanf("%d%d%d", &a, &b, &c);
		es.pb(mp(mp(c, i), mp(a - 1, b - 1)));
		
		ans[i] = 2;
	}
	rep(i, n) p[i] = i;
	
	#define F first
	#define S second
	
	sort(all(es));
	rep(i, m){
		
		int cnt = 0;
		vector<pair<int, pi> > e;
		vi v;
		for(int j = i; j < m && es[i].F.F == es[j].F.F; j++){
			
			int a = es[j].S.F, b = es[j].S.S;
			a = root(a); b = root(b);
			cnt++;
			
			if(a == b) ans[es[j].F.S] = 0;
			else{
				e.pb(mp(es[j].F.S, mp(a, b)));
				v.pb(a); v.pb(b);
			}
		}
		sort(all(v));
		v.erase(unique(all(v)), v.end());
		
		Graph g(v.size());
		map<pi, int> id;
		Edges bs;
		vector<vi> tmp;
		
		rep(j, e.size()){
			
			int a = lower_bound(all(v), e[j].S.F) - v.begin();
			int b = lower_bound(all(v), e[j].S.S) - v.begin();
			g[a].pb(Edge(a, b, 0));
			g[b].pb(Edge(b, a, 0));
			merge(e[j].S.F, e[j].S.S);
			
			if(id.count(mp(a, b))) id[mp(a, b)] = id[mp(b, a)] = -1;
			else id[mp(a, b)] = id[mp(b, a)] = e[j].F;
		}
		bridge(g, bs, tmp);
		
		
		rep(j, bs.size()){
			int a = bs[j].src, b = bs[j].dst;
			if(id[mp(a, b)] >= 0) ans[id[mp(a, b)]] = 1;
		}
		i += cnt - 1;
	}
	
	rep(i, m) puts(str[ans[i]]);
	return 0;
}
