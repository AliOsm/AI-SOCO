#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <cstring>
#include <cmath>

using std::ios_base;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::fixed;

using std::vector;
using std::string;
using std::stack;
using std::queue;
using std::deque;
using std::map;
using std::set;
using std::unordered_map;
using std::unordered_set;

using std::tuple;
using std::make_tuple;
using std::pair;
using std::make_pair;

using std::sort;
using std::reverse;
using std::nth_element;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()

const int MAXN = 20005;
const int INF = 1e9;
const int64_t MOD = 1e9+7;
const int64_t L_INF = 4e18;

int64_t n, k;
vector<pair<int64_t, int> > divisors;

int64_t binpow(int64_t a, int64_t b) {
    int64_t res = 1;
    while (b) {
        if (b & 1) {
            res = (res * a) % MOD;
        }
        a = (a * a) % MOD;
        b >>= 1;
    }
    return res;
}

int64_t inv(int64_t a) {
    return binpow(a, MOD - 2);
}

int64_t invs[100];
int64_t dp[60][20000];

int64_t get_answer(int64_t p, int q) {
    for (int i = 0; i <= k; i++) {
        dp[0][i] = 1;
    }

    int64_t x = 1;
    for (int i = 1; i <= q; i++) {
        x *= p;
        dp[i][0] = x % MOD;
        for (int j = 1; j <= k; j++) {
            dp[i][j] = 0;
            for (int t = 0; t <= i; t++) {
                dp[i][j] = (dp[i][j] + dp[t][j - 1]) % MOD;
            }
            dp[i][j] = (dp[i][j] * invs[i + 1]) % MOD;
        }
    }

    return dp[q][k];
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    for (int i = 1; i < 100; i++) {
        invs[i] = inv(i);
    }

    cin >> n >> k;
    for (int64_t p = 2; p * p <= n; p++) {
        if (n % p == 0) {
            divisors.pb({p, 0});
            while (n % p == 0) {
                divisors.back().second++;
                n /= p;
            }
        }
    }
    if (n > 1) {
        divisors.pb({n, 1});
    }

    int64_t ans = 1;
    for (auto& d : divisors) {
        ans = (ans * get_answer(d.first, d.second)) % MOD;
    }

    cout << ans << '\n';

    #ifdef LOCAL
        cerr << "\n== " << 1.0 * clock() / CLOCKS_PER_SEC << " sec.\n";
    #endif
    return 0;
}
