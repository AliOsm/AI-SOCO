#include <bits/stdc++.h>

using namespace std;

#define SZ(x) ((int)(x).size())
#define PB(x) push_back(x)
#define MEMSET(x,v) memset(x,v,sizeof(x))
#define REP(i,n) for(int i=0;(i)<(n);++(i))
#define x first
#define y second
#define INF (0x3f3f3f3f)

typedef long long LL;
typedef pair<int, int> P2;
template<class A, class B> inline bool mina(A &x, B y) {return (x > y)?(x=y,1):0;}
template<class A, class B> inline bool maxa(A &x, B y) {return (x < y)?(x=y,1):0;}

const int MAXN = 1e5+5;
int N, M;
int H, T;
vector<int> adj[MAXN];
int flag[MAXN];
int flag_mark;

bool check(int u, int v) {
    flag_mark++;
    for (int i = 0; i < min(SZ(adj[u]), H + T + 1); i++) {
        int c = adj[u][i];
        if (c != v) {
            flag[c] = flag_mark;
        }
    }
    flag_mark++;
    vector<int> commons;
    int m_common = flag_mark;
    for (int i = 0; i < min(SZ(adj[v]), H + T + 1); i++) {
        int c = adj[v][i];
        if (c != u) {
            if (flag[c] == flag_mark - 1) {
                flag[c] = m_common;
                commons.PB(c);
            }
        }
    }

    int hh = SZ(adj[u]) - 1 - SZ(commons);
    int tt = SZ(adj[v]) - 1 - SZ(commons);
    int more_h = max(0, H - hh);
    int more_t = max(0, T - tt);
    if (more_h + more_t > SZ(commons)) {
        return false;
    }
    printf("YES\n%d %d\n", u + 1, v + 1);
    vector<int> p1, p2;
    for (int i = 0; i < min(SZ(adj[u]), H + T + 1); i++) {
        int c = adj[u][i];
        if (SZ(p1) < H && flag[c] != m_common && c != v) {
            p1.PB(c);
        }
    }
    for (int i = 0; i < min(SZ(adj[v]), H + T + 1); i++) {
        int c = adj[v][i];
        if (SZ(p2) < T && flag[c] != m_common && c != u) {
            p2.PB(c);
        }
    }
    int i = 0;
    for (; SZ(p1) < H; i++) p1.PB(commons[i]);
    for (; SZ(p2) < T; i++) p2.PB(commons[i]);

    for (int c : p1) printf("%d ", c + 1);
    printf("\n");
    for (int c : p2) printf("%d ", c + 1);
    printf("\n");
    return true;
}

int main() {
    cin >> N >> M >> H >> T;
    REP(i, M) {
        int u, v;
        scanf("%d %d", &u, &v);
        u--, v--;
        adj[u].PB(v);
        adj[v].PB(u);
    }
    REP(u, N) {
        for (int v : adj[u]) {
            if (check(u, v)) {
                return 0;
            }
        }
    }
    printf("NO\n");
    return 0;
}

