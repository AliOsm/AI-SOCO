#include <bits/stdc++.h>

using namespace std;
using ll = long long int;
ll ara[1000005];
stack < ll > mn_stack,mx_stack;

int main()
{
    ll n,i,j;
    scanf("%I64d",&n);
    for(i=0; i<n; i++)
    {
        scanf("%I64d",&ara[i]);
    }
    ll mn_ans=0,mx_ans=0,Left,Right;
    mn_stack.push(0);
    for(i=1; i<n; i++)
    {
        while(!mn_stack.empty())
        {
            ll u=mn_stack.top();
            if(ara[u]>ara[i])
            {
                mn_stack.pop();
                if(!mn_stack.size())
                {
                    Left=0;
                    Right=i-1;
                }
                else
                {
                    Left=mn_stack.top()+1;
                    Right=i-1;
                }
                ll tot=Right-Left+1;
                ll l=u-Left,r=tot-l;
                mn_ans+=(r*ara[u]);
                mn_ans+=(r*l*ara[u]);
            }
            else break;
        }
        mn_stack.push(i);
    }

    while(!mn_stack.empty())
    {
        ll u=mn_stack.top();
        mn_stack.pop();
        if(!mn_stack.size())
        {
            Left=0;
            Right=i-1;
        }
        else
        {
            Left=mn_stack.top()+1;
            Right=i-1;
        }
        ll tot=Right-Left+1;
        ll l=u-Left,r=tot-l;
        mn_ans+=(r*ara[u]);
        mn_ans+=(r*l*ara[u]);
    }

    mx_stack.push(0);
    for(i=1; i<n; i++)
    {
        while(!mx_stack.empty())
        {
            ll u=mx_stack.top();
            if(ara[u]<ara[i])
            {
                mx_stack.pop();
                if(!mx_stack.size())
                {
                    Left=0;
                    Right=i-1;
                }
                else
                {
                    Left=mx_stack.top()+1;
                    Right=i-1;
                }
                ll tot=Right-Left+1;
                ll l=u-Left,r=tot-l;
                mx_ans+=(r*ara[u]);
                mx_ans+=(r*l*ara[u]);
            }
            else break;
        }
        mx_stack.push(i);
    }

    while(!mx_stack.empty())
    {
        ll u=mx_stack.top();
        mx_stack.pop();
        if(!mx_stack.size())
        {
            Left=0;
            Right=i-1;
        }
        else
        {
            Left=mx_stack.top()+1;
            Right=i-1;
        }
        ll tot=Right-Left+1;
        ll l=u-Left,r=tot-l;
        mx_ans+=(r*ara[u]);
        mx_ans+=(r*l*ara[u]);
    }

    ll ans=mx_ans-mn_ans;
    printf("%I64d\n",ans);
    return 0;
}
