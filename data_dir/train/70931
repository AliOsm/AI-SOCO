#ifdef DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <bits/stdc++.h>

using namespace std;

mt19937 mrand(random_device{} ()); 

int rnd(int x) {
  return mrand() % x;
}

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;
typedef long long ll;

#ifdef DEBUG
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
#define eprintf(...) ;
#endif

#define pb push_back
#define mp make_pair
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int inf = (int) 1.01e9;
const ld eps = 1e-9;
const ld pi = acos((ld) -1.0);

void precalc() {
}

const int maxn = (int) 3e5 + 10;
int n, q;

int read() {
  if (scanf("%d%d", &n, &q) < 2) {
    return 0;
  }
  return 1;
}

int used[maxn];
vector<int> have[maxn];
int pos[maxn];

void update(int x, int &res) {
  if (!used[x]) {
    used[x] = 1;
    res += 1;
  }
}

void solve() {
  int cnt = 0;
  for (int i = 0; i < q; ++i) {
    used[i] = 0;
  }
  for (int i = 0; i < n; ++i) {
    have[i].clear();
    pos[i] = 0;
  }

  int mx = 0;
  int res = 0;
  for (int i = 0; i < q; ++i) {
    int type, x;
    scanf("%d%d", &type, &x);
    if (type == 1) {
      --x;
      have[x].pb(cnt++);
    } else {
      if (type == 2) {
        --x;
        while (pos[x] < sz(have[x])) {
          update(have[x][pos[x]], res);
          ++pos[x];
        }
      } else {
        assert(type == 3);
        while (mx < x) {
          update(mx, res);
          ++mx;
        }
      }
    }
    printf("%d\n", cnt - res);
  }
}

int main() {
  precalc();
#ifdef LOCAL
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time %.2f\n", (double) clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
