#include <cstdlib>
#include <iostream>
#include <map>
#include <stdio.h>
#include <vector>
#include<bits/stdc++.h>
#include <ctype.h>
#include <list>
#include <stack>
#include <queue>
#include <string.h>
#include <iomanip>
#include <string>
#include <algorithm>
#include <cmath>
#define _CRT_SECURE_NO_DEPRECATE
#define INF 1000000000
#define Set(a, s) memset(a, s, sizeof (a))
#define ALL(x) x.begin() , x.end()
#define UNIQUE(c) (c).resize(unique(ALL(c))-(c).begin())
#define forpos(i,j,k) for (int i=0 ; i<j ; i+=k)
#define forneg(i,j,k) for (int i=j ;i>=0 ;i-=k)
#define upcase(x) transform(x.begin(), x.end(), x.begin(), ::toupper)
#define locase(x) transform(x.begin(), x.end(), x.begin(), ::tolower)
#define findIndex(v,x) find(v.begin(), v.end(), x) - v.begin()
#define PI 3.14159265358979323846
#define pf printf
#define CLR(a) memset(a,0,sizeof(a))
#define FILL(a,v) memset(a,v,sizeof(a))
#define SSTR( x ) dynamic_cast< std::ostringstream & >( \
       ( std::ostringstream() << std::dec << x ) ).str()
#define mp(x,y) make_pair(x,y)
#define s second
#define f first


using namespace std;

typedef long long ll;
typedef std::pair<int,int> ii;
typedef std::pair<std::string,int> si;
typedef vector<int> vi;
typedef vector<ii> vii;

unsigned power( unsigned val, unsigned _pow=0 ) {
  if ( _pow <= 0 )
    return 1;
  return val * power( val, _pow-1 );
}
int str2int (const string &str) {
  stringstream ss(str);
  int num;
  if((ss >> num).fail())
  {
      //ERROR
  }
  return num;
}
/*bool operator<(const state& lhs, const state& rhs){
  return lhs.dist > rhs.dist;
}*/

class test{
public:
  int x, y;
  test(int a, int b){
    x = a;
    y = b;
  }
};

class UnionFind {                                              // OOP style
private:
  vi p, rank, setSize;                       // remember: vi is vector<int>
  int numSets;
public:
  UnionFind(int N) {
    setSize.assign(N, 1); numSets = N; rank.assign(N, 0);
    p.assign(N, 0); for (int i = 0; i < N; i++) p[i] = i; }
  int findSet(int i) { return (p[i] == i) ? i : (p[i] = findSet(p[i])); }
  bool isSameSet(int i, int j) { return findSet(i) == findSet(j); }
  void unionSet(int i, int j) { 
    if (!isSameSet(i, j)) { numSets--; 
    int x = findSet(i), y = findSet(j);
    // rank is used to keep the tree short
    if (rank[x] > rank[y]) { p[y] = x; setSize[x] += setSize[y]; }
    else                   { p[x] = y; setSize[y] += setSize[x];
                             if (rank[x] == rank[y]) rank[y]++; } } }
  int numDisjointSets() { return numSets; }
  int sizeOfSet(int i) { return setSize[findSet(i)]; }
};


//int dx[]={-1,1,0,0,1,1,-1,-1};
//int dy[]={0,0,1,-1,1,-1,1,-1};

int tc , V , E , w;
string a , b ;
map<string,int> strIdx;
vector<pair<int , pair< int , int> > > edgeList;
int kruskal ()
{
  UnionFind UF(V);
  sort(edgeList.begin(),edgeList.end());
  int mst_cost = 0;
  for(int i =0 ; i < edgeList.size() ; ++i)
  {
    pair<int , pair<int,int> > v = edgeList[i];
    int cost = v.f , u = v.s.f , u2 = v.s.s;
    if(!UF.isSameSet(u,u2))
    {
      mst_cost+=cost;
      UF.unionSet(u,u2);
    }
  }

  return mst_cost;
}

int k ;
ll mod = 1000000007;
ll dp[100001] , cum[100001];
long long search(int N)
{
    if(N==0)return 1L;
    if(N<0) return 0L;
    if(dp[N]!=-1) return dp[N];
    return dp[N] = N-k>=0?(search(N-k)%mod + search(N-1)%mod):(search(N-1)%mod);
}
int main() {


  int n , m;
  cin>>n>>m;
  int mat [n][m];
  for(int i =0 ; i < n ; ++i)
    for(int j =0 ; j  < m ; ++j)
      cin>>mat[i][j];

  bool found = false;
  for(int i =0 ; i < m ; ++i)
    if(mat[0][i])
      found = true;
  
  for(int i =0 ; i < n ; ++i)
    if(mat[i][0])
      found = true;
  
  for(int i =0 ; i < m ; ++i)
    if(mat[n-1][i])
      found = true;
  
  for(int i =0 ; i < n ; ++i)
    if(mat[i][m-1])
      found = true;
  if(found)
  cout<<"2";
  else cout<<"4";
  return 0;
}