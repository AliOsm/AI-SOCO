#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse2")
#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
//#define int long long
#define N 1000001
#define inf 1000000000
int tree[5*N];
int lazy[5*N];
vector<int> pre(N,0);
void build(int id,int lo,int hi)
{
	lazy[id] = 0;
    if(lo == hi)
    {

        tree[id] = pre[lo-1];
        return ;
    }
    int mid = (lo + hi)>>1;
    build(2*id,lo,mid);
    build(2*id+1,mid+1,hi);
    tree[id] = min(tree[2*id+1],tree[2*id]);
}
void propogate(int id)
{
    lazy[2*id] += lazy[id];
    lazy[2*id+1] += lazy[id];
    tree[id] = tree[id] + lazy[id];
    lazy[id] = 0; 
}
void update(int id,int lo,int hi,int l,int r,int val)
{
    
    if(lazy[id])
        propogate(id);
    if(lo>r or hi<l)
        return ;
    if(lo>=l and hi<=r)
    {
        tree[id] += val;
        lazy[2*id] += val;
        lazy[2*id+1] += val;
        return ;
    }
    int mid = (lo + hi)>>1;
    update(2*id,lo,mid,l,r,val);
    update(2*id+1,mid+1,hi,l,r,val);
    tree[id] = min(tree[2*id],tree[2*id+1]);
}
int query(int id,int lo,int hi,int l,int r)
{
   
    if(lazy[id])
        propogate(id);
     if(lo >  r or hi < l)
        return inf;
    if(lo>=l and hi<=r)
    {
        return tree[id];
    }
    int mid = (lo + hi)>>1;
    int ans =  min(query(2*id,lo,mid,l,r),query(2*id+1,mid+1,hi,l,r));
    tree[id] = min(tree[2*id],tree[2*id+1]);
    return ans;
}

int32_t main()
{
	IOS;
    #ifndef ONLINE_JUDGE
    freopen("int.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
    #endif
    int n;
    cin>>n;
 	string s;
 	cin>>s;
 	
 	int c = 0;
 	int ch = 1;
 	int ans  = 0;
 	for(int i = 0;i < n;i++)
 	{
 		if(s[i] == '(')
 			c += 1;
 		else
 			c -= 1;
 		pre[i] = c;

 	}
 	build(1,1,n);
 	for(int i = 0;i < n;i++)
 	{
 		if(s[i] == ')')
 		{
 			update(1,1,n,i+1,n,2);
 			int q1 = query(1,1,n,1,n);
 			int q2 = query(1,1,n,n,n);
 			if(q1==0 and q2==0)
 				ans++;
 			update(1,1,n,i+1,n,-2);
 		}
 		else
 		{

 			update(1,1,n,i+1,n,-2);
 			int q1 = query(1,1,n,1,n);
 			int q2 = query(1,1,n,n,n);

 			if(q1==0 and q2==0)
 				ans++;
 			update(1,1,n,i+1,n,2);
 		}
 	}
 	cout<<ans;
}