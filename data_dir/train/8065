#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

#define rep(i,n) for(int i=0;i<(n);++i)
#define REP(i,n) for(int i=1;i<=(n);++i)
#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl
#define tr(it,c) for(auto it=(c).begin(); it!=(c).end(); ++it)
#define all(c) (c).begin(), (c).end()

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long int64;
typedef pair<int,int> pii;

#define x first
#define y second
typedef pair<int,int> Point;
//typedef pair<double,double> Point;
typedef pair<Point,Point> Seg;
template<class T> inline T sqr(T _t) {return _t*_t;}
template<class T> inline T det(T x1,T y1,T x2,T y2){return x1*y2-x2*y1;}
template<class T> inline T cross(pair<T,T> a,pair<T,T> b,pair<T,T> c){return det(b.x-a.x,b.y-a.y,c.x-a.x,c.y-a.y);}//ab*ac
template<class T> inline T dist2(pair<T,T> a,pair<T,T> b) { T m=a.x-b.x, n=a.y-b.y; return m*m+n*n;}
template<class T> double dist(pair<T,T> a,pair<T,T> b) { return sqrt(double(dist2(a,b))); }
template<class T> inline T dotdet(T x1,T y1,T x2,T y2){return x1*x2+y1*y2;}
template<class T> inline T dot(pair<T,T> a,pair<T,T> b,pair<T,T> c){return dotdet(b.x-a.x,b.y-a.y,c.x-a.x,c.y-a.y);}//ab*ac
template<class T> double Area(pair<T,T> a,pair<T,T> b,pair<T,T> c){ return double(cross(a,b,c))*0.5; }
istream& operator >> (istream &in, Point &p){in>>p.x>>p.y;return in;}
istream& operator >> (istream &in, Seg &s) {in>>s.first>>s.second; return in;}

const int maxn=2000;
int a,b;
Seg s[maxn];
Point A,B;
int d[maxn],n;

template<class T> inline T dist2(pair< pair<T,T>, pair<T,T> > seg,pair<T,T> point)
{
	if(seg.first.x == seg.second.x)
	{
		return (min(seg.first.y,seg.second.y)<=point.y && point.y<=max(seg.first.y,seg.second.y))
			? sqr(abs(seg.first.x-point.x))
			: min(dist2(seg.first,point), dist2(seg.second,point));
	}
	else
	{
		return (min(seg.first.x,seg.second.x)<=point.x && point.x<=max(seg.first.x,seg.second.x))
			? sqr(abs(seg.first.y-point.y))
			: min(dist2(seg.first,point), dist2(seg.second,point));
	}
}

template<class T> inline T dist2(pair< pair<T,T>, pair<T,T> > seg1, pair< pair<T,T>, pair<T,T> > seg2)
{
	return min(min(dist2(seg2,seg1.first), dist2(seg2,seg1.second)),
			min(dist2(seg1,seg2.first), dist2(seg1,seg2.second)));
}

int main(void)
{
	queue<int> q;
	ios::sync_with_stdio(false);
	memset(d,-1,sizeof d);
	cin>>a>>b>>A>>B>>n;
	rep(i,n)
	{
		cin>>s[i];
		if(dist2(s[i],A)<=a*a) d[i]=1, q.push(i);
	}
	while(!q.empty())
	{
		int x=q.front(); q.pop();
		rep(i,n) if(d[i]==-1 && dist2(s[x],s[i])<=a*a) d[i]=d[x]+1, q.push(i);
	}
	double ans=1e100;
	if(dist2(A,B)<=a*a) ans=dist(A,B);
	rep(i,n) if(d[i]>=0 && dist2(s[i],B)<=a*a) ans=min(ans,(a+b)*d[i]+sqrt(double(dist2(s[i],B))));
	cout<<fixed;
	cout.precision(200);
	cout<<(ans>=1e90 ? -1 : ans)<<endl;
}
