#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/STACK:16777216")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<double, double> pd;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

const int MAXN = 18;
ll arr[MAXN];
ll c[MAXN][MAXN];
ll dp[1 << MAXN][MAXN];

signed main() {
    FAST_IO();
    int n, m, k;
    cin >> n >> m >> k;
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    while (k--) {
        int x, y;
        ll w;
        cin >> x >> y >> w;
        x--, y--;
        c[x][y] = w;
    }
    int hg = 0;
    for (int mask = 1; mask < (1 << n); ++mask) {
        if (!(mask & (mask - 1))) {
            dp[mask][hg] = arr[hg];
            hg++;
        }
        for (int i = 0; i < n; ++i) {
            if (!(mask & (1 << i))) {
                continue;
            }
            for (int j = 0; j < n; ++j) {
                if ((mask & (1 << j))) {
                    continue;
                }
                dp[mask ^ (1 << j)][j] = max(dp[mask ^ (1 << j)][j], dp[mask][i] + c[i][j] + arr[j]);
            }
        }
    }
    ll ans = 0;
    for (int mask = 1; mask < (1 << n); ++mask) {
        if (__builtin_popcount(mask) == m) {
            for (int i = 0; i < n; ++i) {
                ans = max(ans, dp[mask][i]);
            }
        }
    }
    cout << ans;
}
