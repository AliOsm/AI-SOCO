#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <stdio.h>
#include <fstream>

#define c0 ios_base :: sync_with_stdio(0); cin.tie (0);
#define s second
#define f first
#define ll long long
#define ull unsigned long long

using namespace std;

const int MaxN = 2e5 + 17;
const int INF = 1e9 + 17;
const int MOD = 1e9 + 7;
const double eps = 1e-9;
const double pi = 3.14159265359;

set < int > b[MaxN];
int t[4 * MaxN];

void upd (int v, int l, int r, int pos) {
    if (l == r) {
        if (b[l].size() >= 1)
            t[v] = *b[l].rbegin();
        else
            t[v] = 0;
        return;
    }
    int m = (l + r) >> 1;
    if (pos <= m)
        upd (v + v, l, m, pos);
    else
        upd (v + v + 1, m + 1, r, pos);
    t[v] = max (t[v + v], t[v + v + 1]);
}
int get (int v, int l, int r, int L, int R) {
    if (L <= l && r <= R) {
        return t[v];
    }
    if (l > R || r < L)
        return 0;
    int m = (l + r) >> 1;
    return max (get (v + v, l, m, L, R), get (v + v + 1, m + 1, r, L, R));
}


int x[MaxN], y[MaxN], a[MaxN];
int n, tt[MaxN];
int u[MaxN];

inline void get2 (int x, int y) {
    int l = x + 1, r = n, ans = INF;
    while (l <= r) {
        int m = (l + r) >> 1;
        if (get (1, 1, n, x + 1, m) > y) {
            r = m - 1;
            ans = min (ans, m);
        }
        else {
            l = m + 1;
        }
    }
    if (ans == INF) {
        printf ("-1\n");
        return;
    }
    x = ans;
    y = *b[x].upper_bound (y);
    printf ("%d %d\n", u[x], y);
}

int main () {
    #ifdef DEBUG
        freopen(".in", "r", stdin);
        freopen(".out", "w", stdout);
    #endif
    scanf ("%d", &n);
    for (int i = 1; i <= n; ++ i) {
        char s[10];
        scanf ("%s%d%d", &s, x + i, y + i);
        if (s[0] == 'a') {
            tt[i] = 1;
        }
        else if (s[0] == 'r') {
            tt[i] = 2;
        }
        a[i] = x[i];
    }
    sort (a + 1, a + n + 1);
    for (int i = 1; i <= n; ++ i) {
        int xx = x[i];
        x[i] = lower_bound (a + 1, a + n + 1, x[i]) - a;
        u[x[i]] = xx;
    }
    for (int i = 1; i <= n; ++ i) {
        if (tt[i] == 1) {
            b[x[i]].insert (y[i]);
            upd (1, 1, n, x[i]);
        }
        else if (tt[i] == 2) {
            b[x[i]].erase (y[i]);
            upd (1, 1, n, x[i]);
        }
        else {
            get2(x[i], y[i]);
        }
    }
    return 0;
}
