/*
######################################################
#    I don't know what I'm doing with my life O.O    #
######################################################
*/

#include <bits/stdc++.h>
using namespace std;

//Optimizations
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

//save time
#define endl '\n'
#define db(x) cout << "> " << #x << ": " << x << endl;
typedef long long ll;

//for sorting
#define all(a) a.begin(),a.end()

//Constants
#define PI   3.141592653593
#define MOD  1000000007LL
#define EPS  0.000000001
#define INF  0X3f3f3f3f

//loops
#define REP(i,n) 	    for(int i=0;i<(n);++i)
#define FOR(i,a,b)      for(int i=(a);i<(b);++i)
#define DFOR(i,a,b)     for(int i=(a);i>=(b);--i)

//vectors
#define vi vector<int>
#define vll vector<ll>
#define vii vector<pair<int,int>>
#define vlll vector<pair<ll,ll>>
#define pb 	push_back

//pairs
#define pi pair<int,int>
#define pll pair<ll,ll>
#define mp make_pair
#define F first
#define S second

//fast I/O
#ifndef _WIN32
#define getchar getchar_unlocked
#define putchar putchar_unlocked
#endif
#define gc getchar
#define pc putchar

//If using cin and cout
#define IOS ios::sync_with_stdio(false)
#define TIE cin.tie(NULL);cout.tie(NULL)

//queue
#define di deque<int>
#define dll deque<ll>
#define qi queue<int>
#define PQ priority_queue

//general
#define E empty()

//Declare all variables and methods needed between this comment and the next one(OCD lol)
const int MAXN=0;

//Main function
int main(){
    IOS;
    TIE;

    int n;
    cin>>n;

    vector<string> ans;
    if(n>=4){
        while(n>=8){
            ans.pb(to_string(n)+" + "+to_string(n-3)+" = "+to_string(2*n-3));
            ans.pb(to_string(n-1)+" + "+to_string(n-2)+" = "+to_string(2*n-3));
            ans.pb(to_string(2*n-3)+" - "+to_string(2*n-3)+" = "+to_string(0));
            ans.pb(to_string(1)+" + "+to_string(0)+" = "+to_string(1));
            n-=4;
        }

        if(n==7){
            ans.pb("7 - 5 = 2");
            ans.pb("6 - 4 = 2");
            ans.pb("2 * 2 = 4");
            ans.pb("4 * 2 = 8");
            ans.pb("8 * 3 = 24");
            ans.pb("24 * 1 = 24");
        }
        else if(n==6){
            ans.pb("2 * 3 = 6");
            ans.pb("5 + 1 = 6");
            ans.pb("6 - 6 = 0");
            ans.pb("4 + 0 = 4");
            ans.pb("4 * 6 = 24");
        }
        else if(n==5){
            ans.pb("5 - 2 = 3");
            ans.pb("3 - 1 = 2");
            ans.pb("2 * 4 = 8");
            ans.pb("8 * 3 = 24");
        }
        else if(n==4){
            ans.pb("1 * 2 = 2");
            ans.pb("2 * 3 = 6");
            ans.pb("6 * 4 = 24");
        }
    }

    if(ans.E)
        cout<<"NO"<<endl;
    else
        cout<<"YES"<<endl;

    for(auto foo : ans)
        cout<<foo<<endl;


    return 0;
}
