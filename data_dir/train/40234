#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define sz(v) (int)v.size()
#define up_b upper_bound
#define low_b lower_bound
#define nl '\n'

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;

const int N=1e5+11;
const int M=2e6+11;
const int W=1e3+11;
const int inf=1e9;
const ll INF=1e18;
const ll mod=1e9+7;
const ld EPS=1e-9;

vector<int>a[N];

int t[N];

void upd(int x){
  for(int i=x;i<N;i=(i|(i+1))){
    t[i]++;
  }
}

int get(int x){
  int res=0;
  for(int i=x;i>=0;i=(i&(i+1))-1){
    res+=t[i];
  }
  return res;
}

int main(){
  ios_base::sync_with_stdio(0);
  cin.tie(0),cout.tie(0);
  int n;
  cin>>n;
  for(int i=1;i<=n;i++){
    int x;
    cin>>x;
    a[x].pb(i);
  }
  int pos=1;
  ll res=0;
  for(int i=1;i<=100000;i++){
    if(sz(a[i])==0)continue;
    vector<int>v;
    for(int j=0;j<sz(a[i]);j++){
      v.pb(a[i][j]);
      a[i][j]-=get(a[i][j]-1);
    }
    int l=low_b(all(a[i]),pos)-a[i].begin();
    for(int j=l;j<sz(a[i]);j++){
      res+=a[i][j]-pos+1;
      pos=a[i][j]+1;
    }
    for(int j=l;j<sz(v);j++){
      upd(v[j]);
      n--;
      pos--;
    }
    if(l>0){
      res+=n-pos+1;
      pos=1;
      for(int j=0;j<l;j++){
        res+=a[i][j]-pos+1;
        pos=a[i][j]+1;
      }
      for(int j=0;j<l;j++){
        upd(v[j]);
        n--;
        pos--;
      }
    }
  }
  cout<<res;
}
