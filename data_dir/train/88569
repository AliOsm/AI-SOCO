#include <bits/stdc++.h>
using namespace std;
long long a,b,c,d,i,e,f,g,n,m,k,l,B[200005],D[200005],P[22][200005],M[22][200005],in[200005],out[200005],C[200005],cur,ans,fix[200005];
pair<pair <long long, long long> , pair<long long, long long> > A[200005];
vector < pair<long long,long long> > v[200005];
long long get_col(long long x) {
  if (B[x] == x)
    return x;
  B[x] = get_col(B[x]);
  return B[x];
}
void col(long long x, long long y) { B[get_col(x)] = get_col(y); }
long long LCA(long long x,long long y) {
	if(in[x]<=in[y] && out[y]<=out[x]) return x;
	for(long long i=20;i>=0;i--) {
		if((P[i][x]==0) || (in[P[i][x]]<=in[y] && out[y]<=out[P[i][x]])) continue;
		else x=P[i][x];
	}
	return P[0][x];
}
void dfs(long long x,long long y,long long z,long long al) {
	cur++;
	in[x]=cur;
	P[0][x]=y;
	M[0][x]=z;
	C[x]=al;
	for(long long i=1;i<=20;i++) {
		P[i][x]=P[i-1][P[i-1][x]];
	}
	//cout<<x<<" "; system("pause");
	for(long long i=1;i<=20;i++) {
		M[i][x]=max(M[i-1][x],M[i-1][P
		[i-1][x]]);
	}
	for(long long i=0;i<v[x].size();i++) {
		if(v[x][i].first==y) continue;
		dfs(v[x][i].first,x,v[x][i].second,al+1);
	}
	out[x]=cur;
}
long long get_max(long long x,long long y) {
	f++;
	ans=0;
	for(long long i=20;i>=0;i--) {
		if((1<<i)<=y) { y-=(1<<i);  ans=max(ans,M[i][x]); x=P[i][x]; }
	}
	return ans;
}
int main() {
  cin >> n >> m;
  for (long long i = 1; i <= m; i++) {
    cin >> A[i].second.first >> A[i].second.second >> A[i].first.first;
    A[i].first.second=i;
  }
  sort(A + 1, A + 1 + m);
  for (long long i = 1; i <= n; i++) {
    B[i] = i;
  }
  for (long long i = 1; i <= m; i++) {
    if (get_col(A[i].second.first) != get_col(A[i].second.second)) {
      col(A[i].second.first, A[i].second.second);
      k+=A[i].first.first;
      v[A[i].second.first].push_back({A[i].second.second,A[i].first.first});
      v[A[i].second.second].push_back({A[i].second.first,A[i].first.first});
      fix[i]++;
    }
  }
  dfs(1,0,0,1);
  for(long long i=1;i<=m;i++) {
  	//cout<<A[i].second.first<<" "<<A[i].second.second<<" ";
  	if(fix[i]==1) {  D[A[i].first.second]=k; continue; }
	l=LCA(A[i].second.first,A[i].second.second);
  	//cout<<C[A[i].second.first]-C[l]<<" "<<C[A[i].second.second]-C[l]<<endl;
	a=get_max(A[i].second.first,C[A[i].second.first]-C[l]);
	b=get_max(A[i].second.second,C[A[i].second.second]-C[l]);
	//cout<<a<<" "<<b<<endl;
	D[A[i].first.second]=k-max(a,b)+A[i].first.first;
  }
  for(long long i=1;i<=m;i++)
  cout<<D[i]<<endl;
}
