#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

set < PII > S;
vector < vector < int > > ans;

int main()
{
    _upgrade
    int n; cin >> n;
    vector < int > v(n);
    for(int i = 0; i < n; i++)
        cin >> v[i];
    S.insert({-v[0], 0});
    ans.push_back({v[0]});
    for(int i = 1; i < n; i++)
    {
        auto it = S.lower_bound({-v[i], 0});
        if(it == S.end())
        {
            S.insert({-v[i], sz(ans)});
            ans.push_back({v[i]});
        }
        else
        {
            int j = it -> second;
            S.insert({-v[i], j});
            S.erase({-ans[j].back(), j});
            ans[j].push_back(v[i]);
        }
    }
    for(auto ve: ans)
    {
        for(auto x: ve) cout << x << " ";
        cout << "\n";
    }
    return 0;
}
