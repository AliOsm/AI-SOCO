#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <map>

using namespace std;

map<long long, long long> dp;

void dfs(long long n) {
    if (n <= 1)
        dp[n] = 1;
    else {
        dfs(n / 2);
        dp[n] = dp[n / 2] * 2 + 1;
    }
}

int dfs2(long long l, long long r, long long n) {
    if (l < 1)
        l = 1;
    if (l > r)
        return 0;
    if (n <= 1) {
        if (l == 1)
            return n;
        else
            return 0;
    }
    else {
        if (dp[n / 2] < l) {
            l -= dp[n / 2];
            r -= dp[n / 2];
            return dfs2(l, r, n % 2) + dfs2(l - 1, r - 1, n / 2);
        }
        else {
            return dfs2(l, r, n / 2) + dfs2(l - dp[n / 2], r - dp[n / 2], n % 2) + dfs2(l - dp[n / 2] - 1, r - dp[n / 2] - 1, n / 2);
        }
    }
}

int main()
{
    long long n, l, r;
    cin >> n >> l >> r;
    dfs(n);
    cout << dfs2(l, r, n);
    //system("pause");
    return 0;
}