//satyaki3794
#include <bits/stdc++.h>
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define LEFT(n) (2*(n))
#define RIGHT(n) (2*(n)+1)

using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;

ll pwr(ll base, ll p, ll mod = MOD){
ll ans = 1;while(p){if(p&1)ans=(ans*base)%mod;base=(base*base)%mod;p/=2;}return ans;
}


int n, arr[1000*1002], subsum[1000*1002], par[1000*1002], depth[1000*1002];
vector<int> adj[1000*1002];


void dfs(int v, int d=0){
	depth[v] = d;
	subsum[v] = arr[v];
	for(auto vv : adj[v]){
		dfs(vv, d+1);
		subsum[v] += subsum[vv];
	}
}


int main(){

    // ios_base::sync_with_stdio(0);
    // cin.tie(0);

    scanf("%d", &n);
    for(int i=1;i<=n;i++){
    	scanf("%d%d", &par[i], &arr[i]);
    	adj[par[i]].pb(i);
    }

    int root = adj[0][0];
    dfs(root);

// cout<<"subsum: ";for(int i=1;i<=n;i++)	cout<<subsum[i]<<" ";cout<<endl;

    if(subsum[root] % 3 != 0){
    	printf("-1\n");
    	return 0;
    }
    int x = subsum[root]/3;
    subsum[root] = MOD;

    int v1 = -1, v2 = -1;
    for(int i=1;i<=n;i++)
    	if(subsum[i] == x){
    		if(v1 == -1 || depth[i] > depth[v1])
    			v1 = i;
    	}

    v2 = v1;
    while(v2 != 0){
    	subsum[v2] = MOD;
    	v2 = par[v2];
    }

    v2 = -1;
    for(int i=1;i<=n;i++)
    	if(subsum[i] == x){
    		v2 = i;
    	}

    if(v1 != -1 && v2 != -1){
    	printf("%d %d\n", v1, v2);
    	return 0;
    }

    dfs(root);
    subsum[root] = MOD;
    v1 = -1;
    for(int i=1;i<=n;i++)
    	if(subsum[i] == x){
    		if(v1 == -1 || depth[i] > depth[v1])
    			v1 = i;
    	}

	v2 = par[v1];
    while(v2 != 0){
    	if(subsum[v2] == 2*x)	break;
    	v2 = par[v2];
    }
    if(v2 == 0)	v2 = -1;

    if(v1 != -1 && v2 != -1){
    	printf("%d %d\n", v1, v2);
    	return 0;
    }

    printf("-1\n");
    return 0;
}



