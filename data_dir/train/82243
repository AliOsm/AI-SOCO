//�߶��� 
#include <cstdio>
#include <cstdlib>
#include <cstring>

const int MAXM = 500000; //���� MAXM Ϊ�߶���󳤶�

int n;
int q;

int a[MAXM+5];
int st[(MAXM<<2)+5];     // a ����Ϊ main �����ж�������ݣ�st ����Ϊ��Ҫ��ѯ��������Ϣ����͡���ֵ�ȣ������Ŀռ��СΪ�߶���󳤶ȵ��ı�

void swap(int &a, int &b)
{
     int temp = a;
     a = b;
     b = temp;
}

int doGcd(int a, int b)
{
     if (a % b == 0)
          return b;
     else
          return doGcd(b, a % b);
}

int gcd(int a, int b)
{
     if (b < a)
          swap(a, b);
     return doGcd(a, b);
}

void build(int o, int l, int r)
//����Ĳ���Ϊ o:��ǰ��Ҫ�����Ľ�㣻l����ǰ��Ҫ��������˵㣻r����ǰ��Ҫ�������Ҷ˵�
{
     if (l == r)
          st[o] = a[l];            //����˵�����Ҷ˵㼴����Ҷ�ӽ��ʱ��ֱ�Ӹ�������Ϣ��ֵ
     else
     {
          int m = l + ((r - l) >> 1);        //m Ϊ�м�㣬����ӽ��Ϊ [l,m] ���Ҷ��ӽ��Ϊ [m+1,r]��
          build(o << 1, l, m);           //��������ӽ��
          build((o << 1) | 1, m + 1, r);         //�����Ҷ��ӽ��
          st[o] = gcd(st[o << 1], st[(o << 1) | 1]);    //�ݹ鷵��ʱ�ö��ӽ����¸��ڵ㣬�˴��ɽ��и������ֵ����Сֵ������͵Ȳ���
     }
}

//o��l��rΪ��ǰ���µ��Ľ�㡢���Ҷ˵㣬indΪ��Ҫ�޸ĵ�Ҷ�ӽ����˵㣬ansΪ��Ҫ�޸ĳɵ�ֵ��
void update(int o, int l, int r, int ind, int ans)
{
     if(l == r) //����ǰ���µ�����Ҷ˵���ȼ���Ҷ�ӽ��ʱ��ֱ�Ӹ�����Ϣ������
     {
          st[o] = ans;
          return;
     }
     
     int m = l + ((r - l) >> 1);
     if (ind <= m)   //����Ҫ���µ�Ҷ�ӽ���ڵ�ǰ��������ӽ��ķ�Χ�ڣ���ݹ��������ӽ�㣬��������Ҷ��ӽ��
     {
          update(o << 1, l, m, ind, ans);
     }
     else
     {
          update((o << 1) | 1, m + 1, r, ind, ans);
     }
     st[o] = gcd(st[o << 1], st[(o << 1) | 1]);//�ݹ��֮���ö��ӽ����¸��ڵ㣨�˴����������ֵ��
}

bool isExistOne = false;

//ql��qrΪ��Ҫ��ѯ���������Ҷ˵�
int query(int o, int l, int r, int ql, int qr, int x)  //������-1--δ֪��0--�ޣ�1���ϣ��� 
{
     if (ql > r || qr < l)    //����ǰ������Ҫ���ҵ����䲻�ཻ���򷵻�һ�����������ѯ�޹ص�ֵ�������ʱ����0�������ֵʱ����-1�ȣ�
          return 0;   //�޹صĵ�Ȼ 
     if (ql <= l && qr >= r)  //����ǰ�������䱻��Ҫ��ѯ�����串�ǣ��򷵻ص�ǰ������Ϣ
     {
          if (st[o] % x == 0)
          {
               return 0;
          }
          else
          {
               if (l == r)
                    return 1;
               
               int m = l + ((r - l) >> 1);               
               int p1 = query(o << 1, l, m, ql, qr, x);
               if (p1 >= 2)
                    return p1;
               int p2 = query((o << 1) | 1, m + 1, r, ql, qr, x);
               
               return p1 + p2;
          }
          //return st[o];
     }
     int m = l + ((r - l) >> 1);
     int p1 = query(o << 1, l, m, ql, qr, x);
     if (p1 >= 2)
          return p1;
     
     int p2 = query((o << 1) | 1, m + 1, r, ql, qr, x);   //p1Ϊ��ѯ����ӽ��õ�����Ϣ��p2Ϊ��ѯ�Ҷ��ӽ��õ�����Ϣ
     return p1 + p2;
/*     if (p1 == -1)
          return p2;
     if (p2 == -1)
          return p1;
     return gcd(p1, p2);      //�ۺ��������ӽ�����Ϣ������*/
}

int main()
{
     /*printf("12 18 %d\n", gcd(12, 18));
     printf("18 12 %d\n", gcd(18, 12));
     printf("2 3 %d\n", gcd(2, 3));*/
     scanf("%d", &n);
     for (int i = 1 ; i <= n ; i++)
          scanf("%d", &(a[i]));
          
     build(1, 1, n);
     
     scanf("%d", &q);
     for (int i = 0 ; i < q ; i++)
     {
          int c;
          scanf("%d", &c);
          
          if (c == 1)
          {
               int l, r, x;
               scanf("%d%d%d", &l, &r, &x);
               
               //bool isFound = false;
               isExistOne = false;
               int count = query(1, 1, n, l, r, x);
               
               if (count <= 1)
                    printf("YES\n");
               else
                    printf("NO\n");
               
               /*for (int p = l ; p <= r ; p++)
               {
                    int curGcd;
                    if (p == l)
                         curGcd = query(1, 1, n, l + 1, r);
                    else if (p == r)
                         curGcd = query(1, 1, n, l, r - 1);
                    else
                    {
                         curGcd = query(1, 1, n, l, p - 1);
                         curGcd = gcd(curGcd, query(1, 1, n, p + 1, r));
                    }
                    
                    if (curGcd % x == 0)
                    {
                         printf("YES\n");
                         isFound = true;
                         break;
                    }                    
               }
               
               if (!isFound)
               {
                    if (l == r)
                         printf("YES\n");
                    else
                         printf("NO\n");
               }*/
          }
          else if (c == 2)
          {
               int p, y;
               scanf("%d%d", &p, &y);
               update(1, 1, n, p, y);
          }
     }
     
     return 0;
}
