#include <bits/stdc++.h>
#define ll long long

using namespace std;

#ifdef LOCAL
#define error(args...){vector<string> _v = split(#args,','); err(_v.begin(),args); }
vector <string> split(const string &s,char c){
    vector<string> v;
    stringstream ss(s);
    string x;
    while(getline(ss,x,c))
        v.emplace_back(x);
    return move(v);
}
void err(vector<string>:: iterator it){}
template<typename T,typename ... Args>
void err(vector<string>::iterator it, T a, Args ... args){
    cerr << it->substr((*it)[0] == ' ',it->length())
         << " = " << a <<"\n" ;
    err(++it,args...);
}
#else
#define error(args...){}
#endif


const ll N = 1010;
const ll Inf = 1e9;
int n;
char G[N][4][N];
int dp[4][N];
int valid(int i,int j,int k){

    if(j < 0 || j > 3 || i < 0 || k < 0)return 0;
    if(i >= n || k >= n)return 1;
    return G[i][j][k] == '.' || G[i][j][k]=='s';
}
int solve(int i,int j){
    if(j >= n)
        return 1;
    if(!valid(j,i,j) || !valid(j,i,j + 1)) return 0;
    int &ret = dp[i][j];
    if(~ret)return ret;
    ret = 0;
    ret|=solve(i,j+1);
    if(valid(j,i - 1,j + 1))
       ret|=solve(i-1,j+1);
    if(valid(j,i + 1,j + 1))
        ret|=solve(i+1,j+1);
    return ret;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
#ifdef LOCAL
    freopen("in.in","r",stdin);
#endif
    int t;
    cin >> t;
    while(t--){
        int v;
        cin >> n >> v;
        int w = 0;
        for(int i=0;i<3;i++){
            for(int j=0;j<n;j++){
                cin >> G[0][i][j];
                if(G[0][i][j]=='s')w = i;
            }
        }
        for(int i = 1;i<n;i++){
            for(int j = 0;j<3;j++){
                for(int k = 0;k<n;k++){
                    char c = '.';
                    if(k + 2 < n)c = G[i - 1][j][k + 2];
                    G[i][j][k] = c;
                }
            }
        }
        memset(dp,-1,sizeof dp);
        int can = solve(w,0);
        puts(can ? "YES":"NO");
    }
}