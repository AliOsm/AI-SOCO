#include <bits/stdc++.h>

using namespace std;

const long long N = 1e5 + 5;

long long n, a[N], b[N], ptr; 

long long d[N];

vector < pair < long long, long long > > st;

bool bad (int l1, int l2, int l3)
{
    return (st[l3].second - st[l1].second) * (double) (st[l1].first - st[l2].first) <= (st[l2].second - st[l1].second) * (double)(st[l1].first - st[l3].first);
}

void add (long long a, long long b)
{
    st.push_back (make_pair (a, b));
    while (st.size () >= 3 && bad (st.size () - 3, st.size () - 2, st.size () - 1))
    {
        st[st.size () - 2] = st[st.size () - 1];
        st.pop_back ();     
    }
}

long long F(long long x, int id)
{
    return x * st[id].first + st[id].second;
}

long long get (long long x)
{
    if (ptr >= st.size ()) ptr = st.size () - 1;
    while (ptr + 1 < st.size () && F(x, ptr + 1) < F(x, ptr)) ptr++;
    return F(x, ptr);
}

int main ()
{
    scanf ("%I64d", &n);
    for (int i = 1;i <= n;i++) scanf ("%I64d", &a[i]);
    for (int i = 1;i <= n;i++) scanf ("%I64d", &b[i]);
    add (b[1], d[1]);
    for (int i = 2;i <= n;i++)
    {
        d[i] = get (a[i]);
        add (b[i], d[i]);
    }
    printf ("%I64d\n", d[n]);
    return 0;
}