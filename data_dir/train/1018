/*input
7
1 2
1 3
2 4
2 5
3 6
3 7
*/
#include <iostream>
#include <cstdio>
#include <vector>
#include <functional>
#include <cmath>
#include <cstring>
#include <utility>
#include <algorithm>
#include <iomanip>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <bitset>
#include <list>
#include <cstdlib>
#include <list>
#include <cassert>
#include <ctime>
#include <fstream>
#include <sstream>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define ll long long
#define N 35
// const int INF = 1e18;
#define int long long
vector<vector<int> > a(35);
int n;
queue<int> q;
bool visited[N];
pair<int, int> ans[N];
int dis[N];

#define pow binPow
ll binPow(ll a, ll q) {
	ll ret = 1;
	for (int i = 0; (1LL << i) <= q; i++) {
		if (q & (1LL << i)) ret = (ret * a);
		a = (a * a);
	}
	return ret;
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n;
	for (int i = 1; i <= n - 1; i++) {
		int u, v;
		cin >> u >> v;
		a[u].push_back(v); a[v].push_back(u);
	}
	q.push(1); visited[1] = true;
	ans[1] = mp(0, 0);
	while (!q.empty()) {
		int u = q.front(); q.pop();
		int cnt = 1;
		int forbid = -1;
		for (int i = 0; i < a[u].size(); i++) {
			int v = a[u][i];
			if (visited[v]) {
				if (ans[u].se == ans[v].se) {
					if (ans[u].fi > ans[v].fi) forbid = 1;
					else forbid = 3;
				}
				else {
					if (ans[u].se > ans[v].se) forbid = 4;
					else forbid = 2;
				}
			}
		}
		for (int i = 0; i < a[u].size(); i++) {
			int v = a[u][i];
			if (visited[v]) {
				continue;
			}
			while (cnt == forbid) cnt++;
			if (cnt == 1) {
				ans[v] = mp(ans[u].fi - binPow(2, 50 - dis[u]), ans[u].se);
			}
			else if (cnt == 2) {
				ans[v] = mp(ans[u].fi, ans[u].se + binPow(2, 50 - dis[u]));
			}
			else if (cnt == 3) {
				ans[v] = mp(ans[u].fi + binPow(2, 50 - dis[u]), ans[u].se);
			}
			else if (cnt == 4) {
				ans[v] = mp(ans[u].fi, ans[u].se - binPow(2, 50 - dis[u]));
			}
			else {
				cout << "NO" << endl;
				exit(0);
			}
			dis[v] = dis[u] + 1;
			q.push(v); visited[v] = true;
			cnt++;
		}
	}
	cout << "YES" << endl;
	for (int i = 1; i <= n; i++) cout << ans[i].fi << sp << ans[i].se << endl;
}