#include <bits/stdc++.h>
#include <cctype>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::less<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef unsigned long long uint64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 300'000;
const int LOGN = 19;

int n, m, k;

vector<int> a, b;
vector<vector<int>> down;
vector<vector<int>> d, f;

void get_ans(int x, int y) {
  if (x > 0) {
    int col = (n + y - f[x][y]) % n;
    for (int i = 0; i < n; ++i) {
      int dist = abs(col - i);
      dist = min(dist, n - dist);
      if (d[x - 1][i] + abs(f[x][y]) + dist == d[x][y]) {
        get_ans(x - 1, i);
        if ((i + dist) % n == col) {
          cout << '+' << dist << '\n';
        } else {
          cout << '-' << dist << '\n';
        }
        break;
      }
    }
    char ch;
    int dir;
    if (f[x][y] > 0) {
      ch = '+';
      dir = 1;
    } else {
      ch = '-';
      dir = -1;
    }
    for (int i = dir, j = 1; abs(i) <= abs(f[x][y]); i += dir, ++j) {
      if (a[(n + col + i) % n] == b[x - 1]) {
        cout << ch << j << '\n';
        j = 0;
      }
    }
  } 
}

void solve(int) {
  cin >> n >> m;
  --m;
  a.resize(n);
  for (int& x : a) {
    cin >> x;
  }
  b = a;
  sort(begin(b), end(b));
  b.erase(unique(begin(b), end(b)), end(b));
  d.resize(b.size() + 1, vector<int>(n, inf));
  f.resize(b.size() + 1, vector<int>(n, inf));
  d[0][m] = 0;
  for (int i = 0; i < (int)b.size(); ++i) {
    vector<int> c(n, inf);
    int cur = inf;
    for (int j = 0; j < n + n; ++j) {
      int id = j % n;
      if (d[i][id] < cur) {
        cur = d[i][id];
      }
      c[id] = min(cur, c[id]);
      ++cur;
    }
    cur = inf;
    for (int j = n + n - 1; j >= 0; --j) {
      int id = j % n;
      if (d[i][id] < cur) {
        cur = d[i][id];
      }
      c[id] = min(cur, c[id]);
      ++cur;
    }
    vector<int> ids;
    for (int j = 0; j < n; ++j) {
      if (a[j] == b[i]) {
        ids.push_back(j);
      }
    }
    for (int j = 0; j < (int)ids.size(); ++j) {
      int p1 = ids[j];
      int p2 = ids[(j + 1) % ids.size()];
      int dist = (n - (n + p2 - p1) % n) % n;
      if (d[i + 1][p1] > c[p2] + dist) {
        d[i + 1][p1] = c[p2] + dist;
        f[i + 1][p1] = dist;
      }
      if (d[i + 1][p2] > c[p1] + dist) {
        d[i + 1][p2] = c[p1] + dist;
        f[i + 1][p2] = -dist;
      }
    }
    down.push_back(move(c));
  }
  //for (const auto& vec : d) {
  //  for (int x : vec) {
  //    cout << x << ' ';
  //  }
  //  cout << '\n';
  //}
  int p = 0;
  m = (int)b.size();
  for (int i = 0; i < n; ++i) {
    if (d[m][i] < d[m][p]) {
      p = i;
    }
  }
  cout << d[m][p] << '\n';
  get_ans(m, p);
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}


