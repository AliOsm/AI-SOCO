#include <bits/stdc++.h>

using namespace std;

#define MAX 100005
#define MOD 1000000007
#define ll long long
int cost[MAX];
vector<int> adj[MAX];
vector<int> rev[MAX];
bool vis[MAX];
stack<int> S;
vector<pair<int, int> > comp;

void dfs(int u)
{
    vis[u] = true;
    for(int i=0; i<adj[u].size(); i++){
        int v = adj[u][i];
        if(vis[v] == false){
            dfs(v);
        }
    }
    S.push(u);
}

void dfs2(int u)
{
    vis[u] = true;
    comp.push_back(make_pair(cost[u], u));
    for(int i=0; i<rev[u].size(); i++){
        int v = rev[u][i];
        if(vis[v] == false){
            dfs2(v);
        }
    }
}

int main()
{
    //freopen("in.txt", "r", stdin);
    int n;
    scanf("%d", &n);
    for(int i=1; i<=n; i++) scanf("%d", &cost[i]);
    int m;
    scanf("%d", &m);
    for(int i=0; i<m; i++){
        int u, v;
        scanf("%d %d", &u, &v);
        adj[u].push_back(v);
        rev[v].push_back(u);
    }
    memset(vis, false, sizeof vis);
    for(int i=1; i<=n; i++){
        if(vis[i] == false) dfs(i);
    }
    ll tot = 0, ways = 1;
    memset(vis, false, sizeof vis);
    while(!S.empty()){
        int tp = S.top();
        S.pop();
        if(vis[tp] == false){
            comp.clear();
            dfs2(tp);
            sort(comp.begin(), comp.end());
            int mins = comp[0].first;
            tot += mins;
            ll cnt = 0;
            for(int i=0; i<comp.size(); i++){
                if(comp[i].first == mins){
                    cnt++;
                }
                else break;
            }
            ways = ((ways%MOD)*(cnt%MOD))%MOD;
        }
    }
    cout << tot << " " << ways;
}
