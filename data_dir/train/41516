#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const vector<ii> dir {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {0, 0}};
const ll INF = (ll) 1e18;
vector<ii> arr;
vector<ii> ans;
ll best = -INF;
int n, m;

inline bool inside(int x, int y) {
	return x >= 0 && x <= n && y >= 0 && y <= m;
}

inline ll dis(int xa, int ya, int xb, int yb) {
	return 1LL * (xa - xb) * (xa - xb) + 1LL * (ya - yb) * (ya - yb);
}

vector<ii> state;
void gen() {
	if(state.size() == 4) {
		ll total = 0;
		fori(i, 1, state.size()) {
			total += dis(state[i].first, state[i].second, state[i - 1].first, state[i - 1].second);
		}
		if(total > best) {
			best = total;
			ans = state;
		}
		return;
	}
	ford(i, arr.size() - 1, 0) {
		state.push_back(arr[i]);
		arr.erase(arr.begin() + i);
		gen();
		arr.insert(arr.begin() + i, state.back());
		state.pop_back();
	}
}

inline void roll_up(int x, int y) {
	if(inside(x, y)) {
		arr.emplace_back(x, y);
	}
}

int main() {
	scanf("%d %d", &n, &m);

	for(auto &each : dir) {
		roll_up(0 + each.first, 0 + each.second);
		roll_up(0 + each.first, m + each.second);
		roll_up(n + each.first, 0 + each.second);
		roll_up(n + each.first, m + each.second);
	}
	
	sort(arr.begin(), arr.end());
	arr.erase(unique(arr.begin(), arr.end()), arr.end());

	gen();
	for(auto &each : ans) {
		cout << each.first << " " << each.second << '\n';
	}

	return 0;
}

