	#include <bits/stdc++.h>

using namespace std;
/*


█▒▒▒▒▒▒▒▒▒
10%
███▒▒▒▒▒▒▒
30%
█████▒▒▒▒▒
50%
███████▒▒▒
70%
██████████
100%

.
☁☁☁☁☁☁☁⚡
☁☁☁☁☁☁⚡☁
☁☁☁☁☁⚡⚡☁
☁☁☁☁⚡⚡☁☁
☁☁☁⚡⚡☁☁☁
☁☁⚡⚡⚡☁☁☁
☁⚡⚡⚡☁☁☁☁
⚡⚡⚡⚡⚡⚡⚡⚡
⚡⚡⚡⚡⚡⚡⚡⚡
☁☁☁☁⚡⚡⚡☁
☁☁☁⚡⚡⚡☁☁
☁☁☁⚡⚡☁☁☁
☁☁⚡⚡☁☁☁☁
☁⚡⚡☁☁☁☁☁
☁⚡☁☁☁☁☁☁
⚡☁☁☁☁☁☁☁

▀█▀ █░░ █▀▀     █▀ █░░ ▄▀▄ ▄▀▀ █░░     █▄░█ █▀▀ █░░░█     ▒█▀▀ ▒▄█░
░█░ █▀▄ █▀▀     █▀ █░▄ █▀█ ░▀▄ █▀▄     █░▀█ █▀▀ █░█░█     ▒▀▀▄ ░▒█░
░▀░ ▀░▀ ▀▀▀     ▀░ ▀▀▀ ▀░▀ ▀▀░ ▀░▀     ▀░░▀ ▀▀▀ ░▀░▀░     ▒▄▄▀ ▒▄█▄

*/
#define _FORTIFY_SOURCE 0 //просто херь
#pragma GCC optimize("Ofast") // векторизацию подрубает, ну там сложно
#pragma GCC optimize("no-stack-protector") //хуйня
#pragma GCC optimize("unroll-loops") // у тебя есть фор по 100 он просто берет и повторяет не фор а 100 раз ну иногда ускоряет
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native") // вот здесь потно ну там 03 02 запускает с битами быстрее работает там тоже векторизация
#pragma GCC optimize("fast-math") //быстрее с вещественными работает ну там float оч быстрый становится

const int N = 1e6  + 3, MOD = 998244353;
#define int long long

vector <int> g[N];
 main()
{

	int n, s;
	cin >> n >> s;
	for (int i = 1; i <= n - 1; i++) {
		int l, r;
		cin >> l >> r;
		g[l].push_back(r);
		g[r].push_back(l);
	}
	int kol = 0;
	for (int i = 1; i <= n; i++) {
		if (g[i].size() == 1) kol++;
	}
	double kek = s, kek1 = kol;
	cout << setprecision(30) << kek / kek1 * 2.0;

}
