/* 301B */
#include <iostream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <functional>
#include <iterator>
#include <iomanip>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define sti				set<int>
#define stpii			set<pair<int, int> >
#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define vpii			vector<pair<int,int> >
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define clr				clear
#define pb 				push_back
#define mp 				make_pair
#define fir				first
#define sec				second
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1

const int bound = 1e8;
const int maxn = 105;
int M[maxn][maxn];
int dis[maxn];
bool visit[maxn];
int X[maxn], Y[maxn];
int a[maxn];
int n, d;

bool judge(int t) {
	int u, v, tmp;
	queue<int> Q;
	
	memset(dis, -1, sizeof(dis));
	memset(visit, false, sizeof(visit));
	dis[1] = t+a[1];
	visit[1] = true;
	Q.push(1);
	
	while (!Q.empty()) {
		u = Q.front();
		Q.pop();
		visit[u] = false;
		for (v=2; v<=n; ++v) {
			tmp = M[u][v];
			if (tmp > dis[u] || v==u)
				continue;
			tmp = dis[u] - tmp + a[v];
			if (tmp > dis[v]) {
				dis[v] = tmp;
				if (!visit[v]) {
					visit[v] = true;
					Q.push(v);
				}
			}
		}
	}
	
	return dis[n]>=0;
}

int main() {
	ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif
	
	scanf("%d %d", &n, &d);
	rep(i, 2, n)
		scanf("%d", &a[i]);
	rep(i, 1, n+1)
		scanf("%d %d", &X[i], &Y[i]);
		
	int tmp;
	
	rep(i, 1, n+1) {
		rep(j, 1, i) {
			tmp = abs(X[i]-X[j]) + abs(Y[i]-Y[j]);
			M[i][j] = M[j][i] = tmp * d;
		}
	}
	
	int l = 0;
	int r = bound;
	int mid;
	int ans = -1;
	
	while (l <= r) {
		mid = (l+r)>>1;
		if (judge(mid)) {
			ans = mid;
			r = mid - 1;
		} else {
			l = mid + 1;
		}
	}
	
	printf("%d\n", ans);
	
	#ifndef ONLINE_JUDGE
		printf("time = %d.\n", (int)clock());
	#endif
	
	return 0;
}