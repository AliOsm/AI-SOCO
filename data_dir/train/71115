#include <cstdio>
#include <cstring>
#include <cmath>
#include <stack>
#include <algorithm>
using namespace std;
typedef long long LL;
#define INF 0x3f3f3f3f
#define eps 1e-8

struct Node {
	int u, v, next;
};

const int MOD = 1e9+7;

int n, m, u, v, cnt, a[100010], b[100010];
int d[100010], f[100010], head[100010], flag[100010];
Node l[300010];
LL ans1, ans2;
stack<int> s;

void Add(int x, int u, int v) {
	l[x].u = u;
	l[x].v = v;
	l[x].next = head[u];
	head[u] = x;
}

void Dfs(int x) {
	flag[x] = 1; d[x] = cnt++; f[x] = d[x];
	s.push(x);
	for (int i = head[x]; i; i = l[i].next)
		if (!flag[l[i].v]) {
			Dfs(l[i].v);
			f[x] = min(f[x], f[l[i].v]);
		}
		else if (flag[l[i].v] == 1)
			f[x] = min(f[x], f[l[i].v]);
	if (f[x] == d[x])
		while (!s.empty()) {
			int A = s.top(); s.pop();
			flag[A] = 2;
			if (A != x) {
				if (a[x] > a[A]) {
					a[x] = a[A];
					b[x] = b[A];
				}
				else if (a[x] == a[A]) b[x] += b[A];
			}
			else break;
		}
}

int main() {
	memset(flag, 0, sizeof(flag));
	memset(head, 0, sizeof(head));
	scanf("%d", &n);
	for (int i = 1; i <= n; i++) {
		scanf("%d", &a[i]);
		b[i] = 1;
	}
	scanf("%d", &m);
	for (int i = 0; i < m; i++) {
		scanf("%d%d", &u, &v);
		Add(i+1, u, v);
	}
	cnt = 0;
	for (int i = 1; i <= n; i++)
		if (!flag[i]) Dfs(i);
	ans1 = 0; ans2 = 1;
	for (int i = 1; i <= n; i++)
		if (f[i] == d[i]) {
			ans1 += a[i];
			ans2 = ans2 * b[i] % MOD;
		}
	printf("%I64d %I64d\n", ans1, ans2);
	return 0;
}
