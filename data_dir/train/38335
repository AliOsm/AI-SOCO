#include <bits/stdc++.h>

using namespace std ;

const int MAX = 1e5 + 10 ;

int arr[MAX] , suff[MAX] ;
int n ;
vector<int>v[MAX] ;

int main()
{
	ios_base::sync_with_stdio(0) ;
	cin.tie(0) ;
	cin>>n ;
	for(int i = 0 ; i < n ; ++i)
	{
		cin>>arr[i] ;
		v[arr[i]].push_back(i) ;
	}
	suff[n-1] = 1 ;
	int ans = 0 ;
	for(int i = n-2 ; i >= 0 ; --i)
	{
		if(arr[i] == arr[i+1])
			suff[i] = suff[i+1] + 1 ;
		else
		{
			int a = n , b = n ; 
			if(arr[i] < arr[i+1])
			{
				int x = arr[i]+2 ;
				int idx = lower_bound(v[x].begin() , v[x].end() , i) - v[x].begin() ;
				if(idx != v[x].size())
					a = v[x][idx] ;
				x = arr[i]-1 ;
				idx = lower_bound(v[x].begin() , v[x].end() , i) - v[x].begin() ;
				if(idx != v[x].size())
					b = v[x][idx] ;
			}
			else if(arr[i] > arr[i+1])
			{
				int x = arr[i]-2 ;
				int idx = lower_bound(v[x].begin() , v[x].end() , i) - v[x].begin() ;
				if(idx != v[x].size())
					a = v[x][idx] ;
				x = arr[i]+1 ;
				idx = lower_bound(v[x].begin() , v[x].end() , i) - v[x].begin() ;
				if(idx != v[x].size())
					b = v[x][idx] ;	
			}
			suff[i] = min(a , b) - i ;
		}
		ans = max(ans , suff[i]) ;
	}
	return cout<<ans<<"\n" , 0 ;
}		