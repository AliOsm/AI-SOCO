#include <bits/stdc++.h>

#define FOR(i,b,e) for(int i=(b); i <= (e); ++i)
#define FORD(i,b,e) for(int i=(b); i >= (e); --i)
#define REP(i,n) for(int i=0; i < (n); ++i)
#define SIZE(c) (int) (c).size()
#define ALL(c) (c).begin(), (c).end()
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
#define FWD(i,a,b) for (int i=(a); i<(b); ++i)
#define BCK(i,a,b) for (int i=(a); i>(b); --i)
#define PI 3.14159265358979311600
#define pb push_back
#define mp make_pair
#define st first
#define nd second

using namespace std;

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

typedef vector < int > VI;
typedef vector<ll> VL;

typedef long double K;

const int inf = 1000 * 1000 * 1000 + 7;

const int N = 505;

int n, m, k, x[N], y[N];
vector<int> cmp;
multiset<pair<int,int>> s;

pair<int,int> calc(int t) {
	cmp.clear();
	cmp.push_back(1);
	cmp.push_back(n);
	cmp.push_back(max(n - 1, 1));
	cmp.push_back(min(2, n));
	REP(i, k) {
		cmp.push_back(max(x[i] - t, 1));
		cmp.push_back(max(x[i] - t - 1, 1));
		cmp.push_back(min(x[i] + t, n));
		cmp.push_back(min(x[i] + t + 1, n));
	}
	sort(cmp.begin(), cmp.end());
	cmp.erase(unique(cmp.begin(), cmp.end()), cmp.end());
	s.clear();
	int mn = inf, mx = -inf;
	for (auto& pos : cmp) {
		REP(i, k) {
			int l = max(y[i] - t, 1);
			int r = min(y[i] + t, m);
			int now = max(x[i] - t, 1);
			if (now == pos) {
				s.insert({l, r});
			}
		}
		bool found = false;
		int here = 0;
		for (auto& item : s) {
			if (here + 1 >= item.first) {
				here = max(here, item.second);
			} else {
				found = true;
				break;
			}
		}
		if (here < m) found = true;
		if (found) {
			mn = min(mn, pos);
			mx  = max(mx, pos);
		}
		REP(i, k) {
			int l = max(y[i] - t, 1);
			int r = min(y[i] + t, m);
			int now = min(x[i] + t, n);
			if (now == pos) {
				s.erase(s.find({l, r}));
			}
		}
	}
	return {mn, mx};
}

bool check(int t) {
	pair<int,int> bounds[2];
	int mx = 1;
	REP(i, 2) {
		bounds[i] = calc(t);
		REP(j, k) swap(x[j], y[j]);
		swap(n, m);
		mx = max(mx, bounds[i].second - bounds[i].first + 1);
	}
	return mx <= 2*t + 1;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	cin >> n >> m >> k;
	REP(i, k) {
		cin >> x[i] >> y[i];
	}

	int l = -1, r = inf;
	while (r - l > 1) {
		int mid = (l + r) / 2;
		if (check(mid)) r = mid; else l = mid;
	}

	cout << r << '\n';

	return 0;
}