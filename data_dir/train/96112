#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>
#include <numeric>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

constexpr long long MAX = 5100000;
constexpr long long INF = 1LL << 60;
constexpr int inf = 1 << 28;
//constexpr long long mod = 1000000007LL;
constexpr long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

int n, k;
vector<vector<pair<int, int>>> g;
int col;
vector<int> res;
void dfs(int cur, int pre, int pre_c) {
	int c = 0;
	if (pre != -1) c = (pre_c + 1) % col;
	for (auto next : g[cur]) {
		if (next.first == pre) continue;
		res[next.second] = c;
		dfs(next.first, cur, c);
		c = (c + 1) % col;
	}
}

int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/
	scanf("%d %d", &n, &k);
	g.resize(n);
	priority_queue<int> pq;
	vector<int> deg(n);
	res.resize(n);
	for (int i = 0; i < n - 1; i++) {
		int u, v; scanf("%d %d", &u, &v);
		u--; v--;
		g[u].emplace_back(v, i);
		g[v].emplace_back(u, i);
		deg[u]++;
		deg[v]++;
	}
	for (int i = 0; i < n; i++) pq.emplace(deg[i]);
	int now = n;
	int cnt = 0;
	for (; now > 0; now--) {
		while (!pq.empty() and now < pq.top()) {
			pq.pop();
			cnt++;
		}
		if (cnt > k) {
			now++;
			break;
		}
		//cout << now << " " << cnt << endl;
		if (now == 1) break;
	}
	col = now;
	dfs(0, -1, -1);
	printf("%d\n", col);
	for (int i = 0; i < n - 1; i++) {
		printf("%d", res[i] + 1);
		if (i == n - 2) puts("");
		else printf(" ");
	}
    return 0;
} 