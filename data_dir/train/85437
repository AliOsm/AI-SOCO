#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define row first
#define col second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-4);
int dcmp(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

typedef struct edge
{
    int from, to, cost;

    edge(int from = 0, int to = 0, int cost = 0) : from(from), to(to), cost(cost)
    {
    }

    bool operator<(const edge &e) const
    {
        return cost < e.cost;
    }

} edge;

struct UnionFind // disjoint set data structure
{
    vector<int> parent;
    vector<int> rank; // height of tree i guess? Only valid when talking about biggest parent, for child nodes it doesn't mean much.
    vector<int> size;
    int forests;

    UnionFind(int n) // initilization, can be same name as struct cuz no typedef
    {
        parent.resize(n);
        rank.resize(n);
        size.resize(n);
        forests = n;
        for (int i = 0; i < n; ++i)
        {
            parent[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }
    }

    int find_parent(int x) // finding parent while path compressing
    {
        if (x == parent[x])
            return x;
        return parent[x] = find_parent(parent[x]);
    }

    void link(int x, int y) // linking 2 trees. x & y are both parents
    {
        if (rank[x] > rank[y])
            swap(x, y); // x is the smaller rank

        parent[x] = parent[y];
        size[y] += size[x];
        if (rank[x] == rank[y]) // I don't understand this bit
            rank[y]++;
    }

    bool union_sets(int x, int y)
    {
        // we only care about parents
        x = find_parent(x);
        y = find_parent(y);

        if (x != y)
        {
            link(x, y);
            forests--;
        }

        return x != y;
    }


    // There are more applications like finding connected components dynamically and other shit
};

long long get(int s)
{
    return 1LL * (s - 1) * s / 2;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    int n, q;
    cin >> n >> q;
    vector<edge> v(n - 1);
    rep(i,0,n - 1)
    {
        cin >> v[i].from >> v[i].to >> v[i].cost;
        --v[i].from;
        --v[i].to;
    }
    sort(all(v));
    vector<pair<int, int> > query(q);
    vector<long long> ans(q);
    rep(i,0,q)
    {
        cin >> query[i].first;
        query[i].second = i;
    }
    sort(all(query));
    UnionFind uf(n);
    int i = 0;
    long long total = 0;
    for (auto p : query)
    {
        int k = p.first, qIdx = p.second;
        while(i < sz(v) && v[i].cost <= k)
        {
            int a = uf.find_parent(v[i].from);
            int b = uf.find_parent(v[i].to);
            total -= get(uf.size[a]);
            if (a != b)
                total -= get(uf.size[b]);
            uf.union_sets(a, b);
            total += get(uf.size[uf.find_parent(a)]);
            ++i;
        }
        ans[qIdx] = total;
    }
    for (int i = 0; i < q; ++i)
        cout << ans[i] << ' ';
    return 0;
}