#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>

#define LL long long
#define uLL unsigned long long
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define vi vector<int>
#define vvi vector<vector<int>>
#define vLL vector<LL>
#define vs vector<string>
#define fori(n) for(int (i)=0; (i)<n; (i)++)
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
#define forI(tmp) for(auto(it)=(tmp).begin();(it)!=(tmp).end();(it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%I64d", &(a))
const LL mod = 1000000007;

using namespace std;



int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	LL ax, ay, bx, by, tx, ty;
	sc(ax);
	sc(ay);
	sc(bx);
	sc(by);
	sc(tx);
	sc(ty);
	LL n;
	sc(n);
	vector<pair<LL, LL>> bot(n);
	vector<double> toT(n);
	vector<pair<double, int>> toA(n), toB(n);
	double sum = 0;
	fori(n)
	{
		sc(bot[i].first);
		sc(bot[i].second);
		toT[i] = sqrt((double)((bot[i].first - tx)*(bot[i].first - tx) + (bot[i].second - ty)*(bot[i].second - ty)));
		sum += 2*toT[i];
		toA[i].first = sqrt((double)((bot[i].first - ax)*(bot[i].first - ax) + (bot[i].second - ay)*(bot[i].second - ay)));
		toA[i].first -= toT[i];
		toA[i].second = i;
		toB[i].first = sqrt((double)((bot[i].first - bx)*(bot[i].first - bx) + (bot[i].second - by)*(bot[i].second - by)));
		toB[i].first -= toT[i];
		toB[i].second = i;
	}
	sort(all(toA));
	sort(all(toB));
	double ans = 1e18;
	for (int i = 0; i < n; i++)
	{
		int j = toA[i].second;
		int k = toB[0].second;
		
		double tmp = sum + toA[i].first;
		ans = min(ans, tmp);
		tmp = sum + toB[i].first;
		ans = min(ans, tmp);
		if (j != k)
			tmp = sum + toA[i].first + toB[0].first;
		else
			tmp = sum + toA[i].first + toB[1].first;
		j = toB[i].second;
		ans = min(ans, tmp);
		k = toA[0].second;
		if (j != k)
			tmp = sum + toA[0].first + toB[i].first;
		else
			tmp = sum + toA[1].first + toB[i].first;
		ans = min(ans, tmp);
	}
	printf("%.10f", ans);
	return 0;
}