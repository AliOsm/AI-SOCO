#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;
#define Max 1000001
#define inf INT_MAX
#define llinf LONG_LONG_MAX
#define f(i,n) for(i=0;i<n;i++)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define pb push_back
#define ff first#define ss second
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcount(n)
#define endl '\n'
const ll N=1e5+5,mod=1e9+7,bit=60;

// gcd(a,m) = gcd(a+x,m) 
// gcd(g * k1,g * k2) = gcd(g * k3, g* k2)
// gcd (k1,k2)= gcd(k3,k2) =1 , // x < m =>  a+x < a+m => g * k3 <a + m => k3 < (a+m)/g  
// find all k3 from k1 to a+m-1 which are coprime to k2 

ll solve(ll m,ll n) // find all x less than or equal to m and coprime to n 
{
	vector<ll> v;
	ll nn=n,i,j;
	for(i=2;i*i<=nn;i++)
	{
		if(nn%i==0)
		{
			while(nn%i==0)
			{
				nn/=i;
			}
			v.pb(i);
		}
	}
	if(nn>1)
	{
		v.pb(nn);
	}
	ll ans=m+1;  // 0 to m
	ll k=v.size();
	for(i=1;i<(1ll<<k);i++)
	{
		ll curr=1;
		bool odd=0;
		for(j=0;j<k;j++)
		{
			if(i & (1ll<<j))
			{
				curr*=v[j];
				odd^=1;
			}
		}
		if(odd)
		{
			ans-=(m/curr);
		}
		else
		{
			ans+=(m/curr);
		}
	}
	return ans;
}

signed main()
{
    fast;
    ll t;
    cin>>t;
    while(t--)
    {
    	ll a,m;
    	cin>>a>>m;
    	ll g=__gcd(a,m);
    	ll k1=a/g;
    	ll k2=m/g;
    	ll ans=solve((a+m)/g-1,k2)-solve(k1-1,k2);
    	cout<<ans<<endl;
    }
    return 0;
}