#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;

#define endl '\n'
#define ff first
#define ss second
#define int long long
#define pb push_back
#define f(i,l,r) for(ll i=l;i<=r;i++)
#define rf(i,r,l) for(ll i=r;i>=l;i--)
#define Max 5000001
#define inf 2147483647
#define llinf 9223372036854775807
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcount(n)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)

#define d1(a) cout<<a<<endl;
#define d2(a,b) cout<<a<<' '<<b<<endl;
#define d3(a,b,c) cout<<a<<' '<<b<<' '<<c<<endl;
#define d4(a,b,c,d) cout<<a<<' '<<b<<' '<<c<<' '<<d<<endl;
#define d5(a,b,c,d,e) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<endl;

const ll N=1e5+5,mod=1e9+7,bit=61;

vector<ll> adj[N],adjt[N],order;
bool vis[N];
ll n,comp[N];

void dfst(ll u,ll id)
{
    comp[u]=id;
    for(auto v:adjt[u])
    {
        if(comp[v]==-1)
        {
            dfst(v,id);
        }
    }
}

void dfs(ll u)
{
    vis[u]=1;
    for(auto v:adj[u])
    {
        if(!vis[v])
        {
            dfs(v);
        }
    }
    order.push_back(u);
}

void scc()
{
    for(int i=0;i<=n;i++)
    {
        comp[i]=-1;
        vis[i]=0;
    }
    for(int i=0;i<=n;i++)
    {
        if(!vis[i])
        {
            dfs(i);
        }
    }
    reverse(order.begin(),order.end());
    for(auto i:order)
    {
        if(comp[i]==-1)
        {
            dfst(i,i);
        }
    }
}

void add(ll u,ll v)
{
    adj[u].push_back(v);
    adjt[v].push_back(u);
}

signed main()
{
    fast;

    ll t=1;
    //cin>>t;
    while(t--)
    {
        cin>>n;
        f(i,1,n)
        {
            ll x;
            cin>>x;
            add(i,x);
        }
        scc();
        ll v[n+1]={0};
        f(i,1,n)
        {
            v[comp[i]]++;
        }
        sort(v+1,v+n+1,greater<ll>());
        ll ans=0;
        f(i,1,n)
        {
            ans+=(v[i]*v[i]);
        }
        if(n>1)
        {
            ans-=(v[1]*v[1]);
            ans-=(v[2]*v[2]);
            ans+=((v[1]+v[2])*(v[1]+v[2]));
        }
        cout<<ans<<endl;
    }
    return 0;
}















