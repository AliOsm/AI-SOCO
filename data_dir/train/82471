#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 100100;

struct ring{
    ll a , b , h , idx , pos ;
};

map<ll,ll>mp[2];

ll seg[N<<3];
ring r[N];
int n;
vector<ll>v;
set<ll>st;

void update(int nd,int L,int R,int idx,ll val)
{
    if( idx<L || idx>R )return;
    if( L == R )
    {
        seg[nd]=val;
        return ;
    }
    int mid = (L+R) >>1;
    update(nd<<1  ,  L  ,mid,idx,val);
    update(nd<<1|1,mid+1, R ,idx,val);
    seg[nd]=max( seg[nd<<1] , seg[nd<<1|1] );
}

ll query(int nd,int L,int R,int from,int to)
{

    if( from<=L && R<=to )return seg[nd];
    if( from>R || to<L )return 0ll;

    int mid = (L+R) >>1;

    ll leftAns = query(nd<<1  ,  L  ,mid,from,to);
    ll rightAns= query(nd<<1|1,mid+1, R ,from,to);
    return max( leftAns ,rightAns );
}


bool cmp(ring A,ring B)
{
    if( A.b != B.b )return A.b>B.b;
    if( A.pos != B.pos )return A.pos<B.pos;
    if( A.idx != B.idx )return A.idx<B.idx;
    return A.h>B.h;
    if( A.a != B.a )return A.a<B.a;
}


int main()
{

    scanf("%d",&n);

    for(int i=0; i<n; i++)
    {
        ll a,b,h;
        scanf("%lld %lld %lld",&a,&b,&h);
        mp[0][b]+=h;
        if(mp[1].count(b))mp[1][b]=min(mp[1][b],a);
        else              mp[1][b]=a;
    }
    n = 0;
    for(auto rng:mp[0]){
        r[n].b=rng.first;
        r[n].a=mp[1][rng.first];
        r[n].h=rng.second;
        st.insert(r[n].a);
        n++;
    }

    for(auto x:st)v.push_back(x);

    for(int i=0; i<n; i++)
        r[i].idx=lower_bound(v.begin(),v.end(),r[i].b)-v.begin();

    for(int i=0;i<n;i++)
        r[i].pos = upper_bound(v.begin(),v.end(),r[i].a)-v.begin();

    sort(r,r+n,cmp);


    for(int i=0; i<n; i++)
    {

        ll x = query(1,1,n,1,r[i].idx);
              update(1,1,n,r[i].pos,x+r[i].h);

    }

    printf("%lld\n",seg[1]);
    return 0;
}
