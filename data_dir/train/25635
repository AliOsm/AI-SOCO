#include <bits/stdc++.h>
#define mk make_pair
#define fs first
#define sc second
using namespace std;
typedef long long ll;
typedef long double ld;
int mem[80][80][80][4], posk[100], posv[100], posx[100], kk, vv, xx, n;
char s[100];
int dp(int k, int v, int x, bool l){
  if(k>kk&&v>vv&&x>xx)
    return 0;
  if(mem[k][v][x][l]!=-1)
    return mem[k][v][x][l];
  int res=1e9, tmp;
  tmp=max(x-1+k-1+v-1,min(posk[k],min(posv[v],posx[x])));
  int cntkx=0, cntkv=0, cntvk=0, cntvx=0, cntxk=0, cntxv=0;
  if(k<=kk)
  for(int i=0; i<posk[k]; ++i){
    if(s[i]=='V'){
      ++cntkv;
    }
    else if(s[i]!='K'){
      ++cntkx;
    }
  }
  cntkv=max(0, v-1-cntkv);
  cntkx=max(0, x-1-cntkx);
  if(v<=vv)
  for(int i=0; i<posv[v]; ++i){
    if(s[i]=='K'){
      ++cntvk;
    }
    else if(s[i]!='V'){
      ++cntvx;
    }
  }
  cntvk=max(0, k-1-cntvk);
  cntvx=max(0, x-1-cntvx);
  if(x<=xx)
  for(int i=0; i<posx[x]; ++i){
    if(s[i]=='V'){
      ++cntxv;
    }
    else if(s[i]=='K'){
      ++cntxk;
    }
  }
  cntxv=max(0, v-1-cntxv);
  cntxk=max(0, k-1-cntxk);
  if(!l){
    if(k<=kk){
      res=min(res, max(0, posk[k]+cntkv+cntkx-tmp)+dp(k+1,v,x,0));
    }
    if(v<=vv){
      res=min(res, max(0, posv[v]+cntvk+cntvx-tmp)+dp(k, v+1, x, 1));
    }
    if(x<=xx){
      res=min(res, max(0, posx[x]+cntxv+cntxk-tmp)+dp(k, v, x+1, 0));
    }
  }
  else{
    if(v<=vv){
      res=min(res, max(0, posv[v]+cntvk+cntvx-tmp)+dp(k, v+1, x, 1));
    }
    if(x<=xx){
      res=min(res, max(0, posx[x]+cntxk+cntxv-tmp)+dp(k, v, x+1, 0));
    }
  }
//  cout<<k<<" "<<v<<" "<<x<<" "<<l<<" "<<res<<endl;
  mem[k][v][x][l]=res;
  return res;
}
int main(){
  memset(mem, -1, sizeof mem);
  cin>>n;
  scanf("%s",s);
  kk=vv=xx=0;
  for(int i=0; i<n; ++i){
    if(s[i]=='K'){
      posk[++kk]=i;
    }
    else if(s[i]=='V'){
      posv[++vv]=i;
    }
    else{
      posx[++xx]=i;
    }
  }
  posk[kk+1]=posv[vv+1]=posx[xx+1]=1e9;
  cout<<dp(1,1,1,0)<<endl;
  return 0;
}


