#include <bits/stdc++.h>
using namespace std;

const int MAXN = 51;
const int modulo = 1000000007;
int d[MAXN], cd[MAXN];
int f[MAXN][MAXN];
int g[MAXN][MAXN][MAXN];
int n;

int GetG(int c2, int c3, int cnext)
{
    if(c2 < 0 || c3 <0 || cnext < 0)
        return 0;
    if(g[c2][c3][cnext] != -1)
        return g[c2][c3][cnext];
    if(cnext > 0)
        return g[c2][c3][cnext] = (1LL * c2 * GetG(c2 - 1, c3, cnext - 1) + 1LL * c3 * GetG(c2 + 1, c3 - 1, cnext - 1)) % modulo;
    if(c2 > 0)
        return g[c2][c3][cnext] = (1LL * (c2 - 1) * GetG(c2 - 2, c3, cnext) + 1LL * c3 * GetG(c2, c3 - 1, cnext)) % modulo;
    if(c3 > 0)
        return g[c2][c3][cnext] = (1LL * ((c3 - 1) * (c3 - 2) / 2) * GetG(c2 + 2, c3 - 3, cnext)) % modulo;
    return g[c2][c3][cnext] = 1;
}

int GetF(int u, int cnext)
{
    int ret, c2, c3;

    if(u + cnext > n)
        return 0;
    if(f[u][cnext] != -1)
        return f[u][cnext];
    if(u == n)
        return f[u][cnext] = 1;
    if(cnext == 0)
        return f[u][cnext] = 0;

    ret = 0;
    c2 = cd[u + cnext] - cd[u];
    c3 = cnext - c2;
    for(int i = 0; i <= n - u - cnext; ++i)
        ret = (ret + 1LL * GetG(c2, c3, i) * GetF(u + cnext, i)) % modulo;

    return f[u][cnext] = ret;
}

int main()
{

    // freopen("D:\\1.in", "r", stdin);
    // freopen("D:\\1.out", "w", stdout);

    scanf("%d", &n);
    for(int i = 1; i <= n; ++i)
        scanf("%d", &d[i]), cd[i] = cd[i - 1] + (d[i] == 2 ? 1 : 0);
    memset(f, -1, sizeof(f));
    memset(g, -1, sizeof(g));
    printf("%d\n", GetF(1, d[1]));

    return 0;
}
