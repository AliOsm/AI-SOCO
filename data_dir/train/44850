#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

using namespace std;
using namespace  __gnu_pbds;


#define loop(i,n) for(int i = 0;i < int(n);i++)
#define rloop(i,n) for(int i = int(n);i >= 0;i--)
#define range(i,a,b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1,v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1,v2,v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1,v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1,v2,v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3)

typedef vector<int> vi;
typedef vector<pair<int,int> > vii;
typedef long long ll;
typedef pair<int, int> pii;

typedef tree<
pii,
null_type,
less<pii>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

const int N = 3e5 + 5;
pii arr[N];
int idx[N];
ll ans[N];
ll F[3][N];
int n , m;

void increase(int j , int i, ll delta)
{
    for (; i < N; i |= i + 1)
        F[j][i] += delta;
}

ll sum(int j , int i)
{
	ll ans = 0;
	for (; i >= 0; i = (i & (i + 1)) - 1)
		ans += F[j][i];
	return ans;
}

ll getsum(int j , int left, int right)
{
    return sum(j,right) - sum(j,left-1);
}


int main()
{

#ifndef ONLINE_JUDGE
	//freopen("in.in", "r", stdin);
	//freopen("out.in", "w", stdout);
	//ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#endif
    sfi2(n,m);
    ll sum = 0;
    vector<ll> v;

    loop(i,n){
        sfi2(arr[i].fr,arr[i].sc);
        ans[i] += 1LL * (n-1) * arr[i].fr;
        sum += arr[i].sc;
        v.pb(arr[i].sc-arr[i].fr);
    }

    sort(ALL(v));
    v.resize(unique(ALL(v)) - v.begin());


    loop(i,n)ans[i] += (sum - arr[i].sc);
    loop(i,n)idx[i] = lower_bound(ALL(v),arr[i].sc-arr[i].fr)-v.begin();
    loop(i,n)increase(0,idx[i],1);
    loop(i,n)increase(1,idx[i],arr[i].fr);
    loop(i,n)increase(2,idx[i],arr[i].sc);

    loop(i,n){
        ll cnt = getsum(0,idx[i]+1,N-1);
        //cout << i << " " << cnt << endl;
        ans[i] -= cnt * 1LL * arr[i].fr;
        ans[i] += cnt * 1LL * arr[i].sc;
        ans[i] += getsum(1,idx[i]+1,N-1);
        ans[i] -= getsum(2,idx[i]+1,N-1);
    }


    int a , b;
    loop(i,m){
        sfi2(a,b);
        a-- , b--;
        ll cur = min(arr[a].fr + arr[b].sc , arr[a].sc + arr[b].fr);
        ans[a] -= cur;
        ans[b] -= cur;
    }

    loop(i,n)printf("%lld ",ans[i]);
    puts("");



    return 0;
}
