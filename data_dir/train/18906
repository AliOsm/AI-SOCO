#include <stdio.h>
#include <assert.h>

#include <string.h>
#include <set>
#include <queue>
#include <vector>
#include <map>
#include <stack>
#include <algorithm>
#include <string>
#include <iostream>
using namespace std;

#define ll long long
#define sf scanf
#define pf printf
#define pb push_back
#define clr(x) memset(x,0,sizeof(x))
#define fr(x,a,b) for(int x=a; x<b;++x)

struct sb{
    int t;
    long long v;
};

class prio
{
    public:
        bool operator()( const sb &a, const sb & b )
            {
                return a.t * b.v < b.t * a.v;
            }
};

int v[1000];
int g[1000][1000];
int in[1000];
long long sum[1000];

int main()
{
    clr( v );
    clr( in );
    clr( g );
    clr( sum );

    int n,m;
    sf("%d%d",&n,&m);
    fr(i,0,n)
        sf("%d",&v[i]);
    fr(i,0,m)
    {
        int a,b,c;
        sf("%d%d%d",&a,&b,&c);
        --a;
        --b;
        g[a][b] = c;
        g[b][a] = c;
    }

    if( n == 1 )
    {
        pf("%lf\n",0.0);
    }
    else
    {
        int x1 = 0, x2 = 0;
        long long vans = 0;
        long long eans = 1;
        fr(i,0,n)
        {
            fr(j,i+1,n)
            {
                if( g[i][j] > 0 )
                {
                    if( ( v[i] + v[j] ) * eans >  vans  * g[i][j] )
                    {
                        x1 = i;
                        x2 = j;
                        vans = v[x1] + v[x2];
                        eans = g[x1][x2];
                    }
                }
            }
        }

//      printf("x1 = %d x2 = %d v = %d e = %d\n",x1,x2, vans, eans);
        priority_queue< sb, vector< sb > , prio > q;

        in[x1] = 1;
        in[x2] = 1;
        fr(i,0,n)
        {
            if( g[x1][i] && !in[i] )
            {
                sum[i] += g[x1][i];
                sb x;
                x.t = i;
                x.v = sum[i];
                q.push( x );
            }
            
            if( g[x2][i] && !in[i] )
            {
                sum[i] += g[x2][i];
                sb x;
                x.t = i;
                x.v = sum[i];
                q.push( x );
            }
        }



        while( !q.empty() )
        {
            sb x = q.top();
            q.pop();
            if( in[x.t] ) continue;

            int node = x.t;
            long long val = x.v;

            if( vans * val > eans * v[node] ) continue;

            vans += v[node];
            eans += val;

            //printf("get node %d ev = %d vans = %d eans = %d\n",node, val, vans, eans);

            in[node] = 1;


            for( int i = 0; i < n; ++i )
            {
                if( in[i] || !g[node][i]) continue;

                sum[i] += g[node][i];

                sb x;
                x.t = i;
                x.v = sum[i];
                q.push( x );
            }
        }

        pf("%.10lf\n",(double)vans/eans);
    }
}