#include <bits/stdc++.h>
using namespace std;

const int N = 1e6;

int n, a[N], cnt;
bool mark[N];
vector<int> vec = {0}, help;

bool ok(int k) {
	for (int i = 0; i < (1 << k); i++)
		if(mark[i] == false)
			return false;
	return true;
}

void print(int k) {
	vec = {0};
	fill(mark + 1, mark + (1 << k), false);
	for (int i = 0; i < n; i++)
		if((a[i] < (1 << k)) && mark[a[i]] == false) {
			cnt++;
			for (int num: vec)
				mark[num ^ a[i]] = true;
			vector<int> help;
			for (int j = 0; j < vec.size(); j++)
				if(j & 1) {
					help.push_back(vec[j] ^ a[i]);
					help.push_back(vec[j]);
				}
				else {
					help.push_back(vec[j]);
					help.push_back(vec[j] ^ a[i]);
				}
			vec = help;
		}
	if(k == 1 && (*min_element(a, a + n)) != 1)
		return;
	cout << k << '\n';
	for (int num: vec)
		cout << num << ' ';
	exit(0);
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	mark[0] = true;
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
		if(mark[a[i]] == false) {
			cnt++;
			for (int num: vec)
				mark[num ^ a[i]] = true;
			vector<int> help;
			for (int j = 0; j < vec.size(); j++)
				if(j & 1) {
					help.push_back(vec[j] ^ a[i]);
					help.push_back(vec[j]);
				}
				else {
					help.push_back(vec[j]);
					help.push_back(vec[j] ^ a[i]);
				}
			vec = help;
		}
	}
	for (int i = 20;; i--)
		if(ok(i))
			print(i);
	return 0;
}
