#include<bits/stdc++.h>

using namespace std;
const int INF = 0x3f3f3f3f;
const int MAXN = 100100;

struct seg{
	seg *fe,*fd;
	int meio ,l ,r,menor,maior,lazy;
	
	seg(int x,int y){
		l = x,r = y;
		meio = (x + y)/2;
		menor = maior = 0;
		lazy = 0;
		
		if(l == r) return;
		
		fe = new seg(x,meio);
		fd = new seg(meio + 1,y);
	}
	
	void lazyup(){
		menor += lazy;
		maior += lazy;
		if(l != r) fe->lazy += lazy , fd->lazy += lazy;
		lazy = 0;
	}
	
	void up(int a,int b,int novo){
		lazyup();
		if(l >= a && r <= b){
			lazy += novo;
			lazyup();
			
			return;
		}
		if(l > b || r < a) return;
		fe->up(a,b,novo) ,fd->up(a,b,novo);
		
		maior = max(fe->maior,fd->maior);
		menor = min(fe->menor,fd->menor); 
	}
	
	int get(int x,int y){
		lazyup();
		if(l >= x && r <= y) return menor;
		if(l > y || r < x) return INF;
		return min(fe->get(x,y),fd->get(x,y));
	}
	
	int getm(int x,int y){
		lazyup();
		if(l >= x && r <= y) return maior;
		if(l > y || r < x) return -INF;
		return max(fe->getm(x,y),fd->getm(x,y));
	}
};

seg sfx(1,MAXN),pfx(1,MAXN);

int v[MAXN];

int bb(int x,int y){
	int meio = (x + y)/2;
	
	if(x == y) return x;
	
	if(sfx.getm(meio + 1,y) > 0) return bb(meio + 1,y);
	else return bb(x,meio);
}

int main(){
	int n;
	cin >> n;
	
	for(int i = 1;i <= n;i++){
		int p,t,x;
		cin >> p >> t;
		
		if(t == 0){
			sfx.up(1,p,-1);
			pfx.up(p,n,-1);
		}
		if(t == 1){
			cin >> x;
			v[p] = x;
			
			sfx.up(1,p,1);
			pfx.up(p,n,1);
		}
		
		int h = bb(0,n);
		
		if(h == 0) cout << -1 << endl;
		else cout << v[h] << endl;
	}
}


