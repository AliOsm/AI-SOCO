#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <bitset>
#include <complex>
#include <unordered_map>

//#pragma comment(linker, "/STACK:512000000")

using namespace std;

#define pb emplace_back
#define mp make_pair
#define all(a) (a).begin(), (a).end()
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int infi = 1e9 + 7;
const ll infl = (ll)1e18 + (ll)7;

pll operator * (const pll&a, const pll&b) {
    return { a.first * b.first, a.second * b.second };
}
pll operator * (const pll&a, ll b) {
    return { a.first* b, a.second * b };
}
pll operator + (const pll& a, const pll&b) {
    return { a.first + b.first, a.second + b.second };
}
pll operator - (const pll& a, const pll&b) {
    return { a.first - b.first, a.second - b.second };
}
pll operator % (pll a, const pll& b) {
    a.first %= b.first, a.second %= b.second;
    if (a.first < 0)
        a.first += b.first;
    if (a.second < 0)
        a.second += b.second;
    return a;
}
const pll mod = { 1000000123, 1000000181 };
const pll p1 = { 1009 , 1013 };
pll st[1000500];
pll hsh[1000500];
void calc_hash(string& s, int n) {
    forn(i, n) {
        if (i)
            hsh[i] = (hsh[i - 1] + st[i] * s[i]) % mod;
        else
            hsh[i] = (st[i] * s[i]) % mod;
    }
    return;
}
pll get_hash(int l, int r, int n) {
    pll ans = hsh[r];
    if (l) {
        ans = (ans - hsh[l - 1]) % mod;
    }
    return (ans * st[n - l]) % mod;
}
int check(string& s, string& t, int len1, int len0) {
    int n = s.size(), m = t.size();
    pll h1 = get_hash(0, len1 - 1, m);
    pll h0;
    int flag0 = 0;
    int i = 0;
    for (char c : s) {
        if (c == '1') {
            int j = i + len1 - 1;
            if (j >= m)
                return 0;
            if (h1 != get_hash(i, j, m))
                return 0;
            i += len1;
        } else {
            int j = i + len0 - 1;
            if (j >= m)
                return 0;
            if (!flag0) {
                flag0 = 1;
                h0 = get_hash(i, j, m);
                if (h1 == h0)
                    return 0;
            }
            if (h0 != get_hash(i, j, m))
                return 0;
            i += len0;
        }
    }
    return 1;
}

int main() {
    cin.sync_with_stdio(false);
    cin.tie(0);
   // freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    //freopen("customs.in", "r", stdin); freopen("customs.out", "w", stdout);
    st[0] = { 1, 1 };
    for (int i = 1; i < 1000500; ++i)
        st[i] = (st[i - 1] * p1) % mod;
    string s, t;
    cin >> s >> t;
    if (s[0] == '0')
        for (char& c : s)
            if (c == '1')
                c = '0';
            else
                c = '1';
    int n = s.size(), m = t.size();
    int cnt0 = 0, cnt1 = 0;
    int fst0 = n, fst1 = n;
    forn(i, n) {
        char c = s[i];
        if (c == '0')
            ++cnt0, fst0 = min(fst0, i);
        else
            ++cnt1, fst1 = min(fst1, i);
    }
    calc_hash(t, m);
    int ans = 0;
    for (int len1 = 1; len1 * cnt1 < m; ++len1) {
        int len0 = m - len1 * cnt1;
        if (len0 % cnt0)
            continue;
        len0 /= cnt0;
        if (check(s, t, len1, len0))
            ++ans;
    }
    cout << ans << '\n';

    return 0;
}