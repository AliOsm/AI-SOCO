#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define all(v) (v).begin() , (v).end()
#define popcnt(x) __builtin_popcount(x)
#define inf 0x3f3f3f3f
#define watch(x) cout << (#x) << " is " << (x) << endl
#define F first
#define S second

using namespace std;
using namespace __gnu_pbds;

typedef pair<int, int> ii;
typedef vector<int> vi;
typedef long long  ll;
typedef vector<ll> vll;

template <typename T>
using ordered_set = tree<T, null_type, less<T> , rb_tree_tag, tree_order_statistics_node_update>;

const double EPS = 1e-9;
const double pi = acos(-1.0);

int dx[] = {0 , 0 , 1 , -1 , 1 , 1 , -1 , -1};
int dy[] = {1 ,-1 , 0 , 0 , -1 , 1 ,  1 , -1};
ll n;
int q;
stack<pair<ll , pair<ll , ll> > > st;

void solve(ll cur){
    while(st.size())st.pop();
    ll l = 0 , r = n + 1;
    while(r - l > 1){
        ll mid = (l + r) / 2;
        st.push({mid , {l , r}});
        if(mid == cur)return;
        if(cur > mid)l = mid;
        else r = mid;
    }
}

int main(){
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
#endif
    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    cin >> n >> q;
    while(q--){
        ll x;
        cin >> x;

        string s;
        cin >> s;
        pair<ll , pair<ll , ll> > cur = {x , {0 , n + 1}};
        for(char e : s){
            solve(cur.F);
            if(e == 'U'){
                st.pop();
                if((int)st.size())cur = st.top();
            }
            else if(e == 'L'){
                cur = st.top();
                pair<ll , pair<ll , ll> > newOne;
                ll mid = cur.F;
                if(mid & 1)continue;
                newOne = {(cur.S.F + mid) / 2 , {cur.S.F , mid}};
                cur = newOne;
            }
            else{
                cur = st.top();
                pair<ll , pair<ll , ll> > newOne;
                ll mid = cur.F;
                if(mid & 1)continue;
                newOne = {(cur.S.S + mid) / 2 , {mid , cur.S.S}};
                cur = newOne;
            }
        }
        cout << cur.F << '\n';
    }
}
