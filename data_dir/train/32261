#include <set>
#include <map>
#include <list>
#include <cmath>
#include <queue>
#include <stack>
#include <cstdio>
#include <string>
#include <vector>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <tuple>
using namespace std;

std::tuple<int,int,int,int> Convert(std::tuple<int,int,int,int> x) {
    return std::make_tuple(-std::get<3>(x),
                           std::get<0>(x),
                           std::get<1>(x),
                           std::get<2>(x));
}

int A[222222];


int main() {
    int n;
    cin>>n;
    for(int i=1;i<=n;i++) {
        cin>>A[i];
    }
    
    // st,en,elem,len
    set<std::tuple<int,int,int,int>> segments;
    
    // -len,st,en,elem
    set<std::tuple<int,int,int,int>> lengths;
    
    for(int i=1;i<=n;) {
        int j=i;
        while(j+1<=n && A[j+1]==A[i])
            j++;
        
        std::tuple<int,int,int,int> new_segment = std::make_tuple(i,j,A[i],j-i+1);

        segments.insert(new_segment);
        lengths.insert(Convert(new_segment));
        i=j+1;
        
        
    }
    
    int ans=0;
    while(!lengths.empty()) {
        ans++;
        set<std::tuple<int,int,int,int>>::iterator len_it = lengths.begin();
        
        std::tuple<int,int,int,int> x = std::make_tuple(std::get<1>(*len_it),
                                                        std::get<2>(*len_it),
                                                        std::get<3>(*len_it),
                                                        -std::get<0>(*len_it));
        
        lengths.erase(*len_it);

        segments.erase(x);
        
        
        
        set<std::tuple<int,int,int,int>>::iterator it = segments.lower_bound(x);
        
        if (it != segments.end() && it != segments.begin()) {
            std::tuple<int,int,int,int> rt = *it;
            it--;
            std::tuple<int,int,int,int> lt = *it;
            
            if (std::get<2>(rt) == std::get<2>(lt)) {
                segments.erase(rt);
                segments.erase(lt);
                
                std::tuple<int,int,int,int> new_segment = std::make_tuple(std::get<0>(lt),
                                                                          std::get<1>(rt),
                                                                          std::get<2>(lt),
                                                                          std::get<3>(lt)+std::get<3>(rt));
                
                segments.insert(new_segment);
                
                
                lengths.erase(Convert(rt));
                lengths.erase(Convert(lt));
                lengths.insert(Convert(new_segment));

            }
        }
    }
    
    cout << ans << endl;
}
