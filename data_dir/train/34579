#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MD = 1000000007;
int mod_mult(ll a, ll b) {
	return (a * b) % MD;
}
void add(int& a, int b) {
	a += b;
	if (a >= MD) a -= MD;
}
void sub(int& a, int b) {
	a -= b;
	if (a < 0) a += MD;
}
int cx[2], cy[2];

int gcd(int a, int b) {
	while (b) {
		int c = a % b;
		a = b;
		b = c;
	}
	return a;
}

int main()
{
	int n, m;
	ignore = scanf("%d %d", &n, &m);
	
	cx[0] = n / 2 + 1;
	cx[1] = (n + 1) / 2;
	cy[0] = m / 2 + 1;
	cy[1] = (m + 1) / 2;
	
	int ans = 0;
	
	int c = 0;
	for (int x1 = 0; x1 < 2; x1++) {
		for (int y1 = 0; y1 < 2; y1++) {
			for (int x2 = 0; x2 < 2; x2++) {
				for (int y2 = 0; y2 < 2; y2++) {
					for (int x3 = 0; x3 < 2; x3++) {
						for (int y3 = 0; y3 < 2; y3++) {
							
							int cp = (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1);
							if (abs(cp) % 2 == 0) {
								int tmp = 1;
								tmp = mod_mult(tmp, cx[x1]);
								tmp = mod_mult(tmp, cy[y1]);
								tmp = mod_mult(tmp, cx[x2]);
								tmp = mod_mult(tmp, cy[y2]);
								tmp = mod_mult(tmp, cx[x3]);
								tmp = mod_mult(tmp, cy[y3]);
								add(ans, tmp);
								c++;
							}
						}
					}
				}
			}
		}
	}
	
	for (int dx = 0; dx <= n; dx++) {
		for (int dy = 0; dy <= m; dy++) {
			int a = n - dx + 1;
			int b = m - dy + 1;
			
			int tmp = mod_mult(a, b);
			
			if (dx == 0 && dy == 0) {
				sub(ans, tmp);
				continue;
			}
			
			if (dx > 0 && dy > 0) tmp = mod_mult(tmp, 2);
			
			int t = 6;
			add(t, mod_mult(6, gcd(dx, dy) - 1));
			
			tmp = mod_mult(tmp, t);
			sub(ans, tmp);
		}
	}
	
	printf("%d\n", ans);
}
