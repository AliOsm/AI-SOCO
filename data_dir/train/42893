#include <string>
#include <vector>
#include <set>
#include <cstdio>
#include <queue>
#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstring>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)


const int MAXN=3000;

int res1[MAXN];
int res2[MAXN];
int tmp[MAXN];
int p[MAXN];
int used[MAXN];

int cnt[MAXN][MAXN];

vector<int> resp, resq;
vector<int> P,Q;

const int MINV=8;

bool solve(int n, int k, bool flag)
{
	if(n>MINV)
	{
		if(solve(MINV,k-(n-MINV), true))
		{
			int top=0;
			REP(i,MINV)
			{
				if(res1[i]==MINV-2 && res1[i+1]==MINV-1)
				{
					REP(j,n-MINV+2)
						tmp[top++]=MINV-2+j;
					i++;
				}
				else if(res1[i]==MINV-1 && res1[i+1]==MINV-2)
				{
					for(int j=n-MINV+1;j>=0;j--)
						tmp[top++]=MINV-2+j;
					i++;
				}
				else
					tmp[top++]=res1[i];
			}
			REP(i,n)
				res1[i]=tmp[i];

			top=0;
			REP(i,MINV)
			{
				if(res2[i]==MINV-2 && res2[i+1]==MINV-1)
				{
					REP(j,n-MINV+2)
						tmp[top++]=MINV-2+j;
					i++;
				}
				else if(res2[i]==MINV-1 && res2[i+1]==MINV-2)
				{
					for(int j=n-MINV+1;j>=0;j--)
						tmp[top++]=MINV-2+j;
					i++;
				}
				else
					tmp[top++]=res2[i];
			}
			REP(i,n)
				res2[i]=tmp[i];

			return true;
		}
		else
			return false;
	}
	else
	{
		int res=1000000000;
		P.clear(); Q.clear();
		REP(i,n)
			if(i!=0 && i!=1)
				P.push_back(i);
		REP(i,n)
			if(i!=2 && i!=3)
				Q.push_back(i);
		do
		{
			do
			{
				res1[0]=0;
				REP(i,P.size())
					res1[1+i]=P[i];
				res1[n-1]=1;

				res2[0]=2;
				REP(i,Q.size())
					res2[1+i]=Q[i];
				res2[n-1]=3;

				bool isOk=true;
				int cur=0;

				REP(i,n-1)
				{
					int a=res1[i];
					int b=res1[i+1];
					if(a>b) swap(a,b);
					if(a==0 && b==1) isOk=false;
					if(a==2 && b==3) isOk=false;
					if(cnt[a][b]==0) cur++;
					cnt[a][b]++;
				}
				REP(i,n-1)
				{
					int a=res2[i];
					int b=res2[i+1];
					if(a>b) swap(a,b);
					if(a==0 && b==1) isOk=false;
					if(a==2 && b==3) isOk=false;
					if(cnt[a][b]==0) cur++;
					cnt[a][b]++;
				}
				if(flag)
				{
					isOk&=cnt[n-2][n-1]==2;
				}
				if(isOk && cur< res)
				{
					res=cur;
					resp=P;
					resq=Q;
				}
				REP(i,n-1)
				{
					int a=res1[i];
					int b=res1[i+1];
					if(a>b) swap(a,b);
					if(a==0 && b==1) isOk=false;
					if(a==2 && b==3) isOk=false;
					if(cnt[a][b]==0) cur++;
					cnt[a][b]--;
				}
				REP(i,n-1)
				{
					int a=res2[i];
					int b=res2[i+1];
					if(a>b) swap(a,b);
					if(a==0 && b==1) isOk=false;
					if(a==2 && b==3) isOk=false;
					if(cnt[a][b]==0) cur++;
					cnt[a][b]--;
				}
			}
			while(next_permutation(Q.begin(), Q.end()));
		}
		while(next_permutation(P.begin(), P.end()));
		if(res<=k)
		{
			P=resp;
			Q=resq;
			res1[0]=0;
			REP(i,P.size())
				res1[1+i]=P[i];
			res1[n-1]=1;

			res2[0]=2;
			REP(i,Q.size())
				res2[1+i]=Q[i];
			res2[n-1]=3;
			return true;
		}
		else
			return false;
	}
}

int main()
{
	int n,k;
	scanf("%d%d",&n,&k);
	if(!solve(n,k,false))
	{
		puts("-1");
		return 0;
	}

	{
		int cur=0;
		REP(i,n-1)
		{
			int a,b;
			a=res1[i];
			b=res1[i+1];
			cnt[a][b]++;
			cnt[b][a]++;
			a=res2[i];
			b=res2[i+1];
			cnt[a][b]++;
			cnt[b][a]++;
		}
		assert(cnt[0][1]==0);
		assert(cnt[2][3]==0);
		REP(i,n)
			assert(cnt[i][i]==0);
		REP(i,n) REP(j,i)
			if(cnt[i][j])
				cur++;
		fprintf(stderr,"%d\n",cur);
	}
	int a[4];
	REP(i,4)
	{
		scanf("%d",&a[i]);
		a[i]--;
	}

	memset(p,-1,sizeof(p));
	REP(i,4)
	{
		p[i]=a[i];
		used[a[i]]=true;
	}

	REP(i,n) if(p[i]==-1)
	{
		REP(j,n)
			if(!used[j])
			{
				p[i]=j;
				used[j]=true;
				break;
			}
		assert(p[i]!=-1);
	}
	REP(i,n)
		printf("%d ",p[res1[i]]+1);
	puts("");
	REP(i,n)
		printf("%d ", p[res2[i]]+1);
	puts("");
	return 0;
}
