#include <bits/stdc++.h>
using namespace std;

const int maxn = 1e5+5;
const int inf = 1e9+5;

int n, subtree[maxn], root = -1;
char res[maxn];
bool isCent[maxn];
vector <int> adj[maxn], cadj[maxn];

void dfs(int node, int p){
    subtree[node] = 1;
    for (int i : adj[node]){
        if (i != p && !isCent[i]) {
            dfs(i, node);
            subtree[node] += subtree[i];
        }
    }
}

int centroid(int node, int p, int sz){
    for (int i : adj[node]){
        if (i != p && !isCent[i] && subtree[i] > sz / 2){
            return centroid(i, node, sz);
        }
    }

    return node;
}

int decompose(int node){
    dfs(node, -1);

    int cen = centroid(node, -1, subtree[node]);
    if (root == -1) root = cen;
    isCent[cen] = true;

    for (int i : adj[cen]){
        if (!isCent[i]) {
            int next = decompose(i);
            cadj[next].push_back(cen);
            cadj[cen].push_back(next);
        }
    }

    return cen;
}

void dfs2(int node, int p, char c){
    res[node] = c;
    for (int i : cadj[node]){
        if (i != p) dfs2(i, node, c + 1);
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);

    cin >> n;
    for (int i = 0; i < n - 1; i++){
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }

    decompose(1);
    dfs2(root, -1, 'A');

    for (int i = 1; i <= n; i++) printf("%c ", res[i]);
    return 0;
}
