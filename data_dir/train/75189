#include <bits/stdc++.h>

using namespace std;

const int N = 2e5 + 5;
const long long INF = 1e18 + 5;
const int MAXN = 1e6;
const int base = 317;

typedef long long ll;

const ll bs = 31;
const ll mod = 998244353;

int n, m, q, ct, timer;
int d[N], up[21][N];
vector <int> g[N], c[N], pu[21][N];

void combine(vector <int> &a, vector <int> b) {
    for (int i : b)
        a.push_back(i);
    sort(a.begin(), a.end());
    a.resize(unique(a.begin(), a.end()) - a.begin());
    if (a.size() > 10) {
        a.erase(a.begin() + 10, a.end());
    }
}

void dfs(int v, int p = 0) {
    up[0][v] = p;
    d[v] = d[p] + 1;
    combine(pu[0][v], c[v]);
    combine(pu[0][v], c[p]);
    for (int i = 1; i <= 20; i++) {
        up[i][v] = up[i - 1][up[i - 1][v]];
        combine(pu[i][v], pu[i - 1][v]);
        combine(pu[i][v], pu[i - 1][up[i - 1][v]]);
    }
    for (int to : g[v]) {
        if (to != p) {
            dfs(to, v);
        }
    }
}

vector <int> lca(int a, int b) {
    if (d[a] > d[b]) {
        swap(a, b);
    }
    vector <int> ans;
    combine(ans, c[a]);
    combine(ans, c[b]);
    for (int i = 20; i >= 0; i--) {
        if (d[a] <= d[up[i][b]]) {
            combine(ans, pu[i][b]);
            b = up[i][b];
        }
    }
    if (a == b)
        return ans;
    for (int i = 20; i >= 0; i--) {
        if (up[i][a] != up[i][b]) {
            combine(ans, pu[i][a]);
            combine(ans, pu[i][b]);
            a = up[i][a];
            b = up[i][b];
        }
    }
    combine(ans, pu[0][a]);
    combine(ans, pu[0][b]);
    return ans;
}

int main() {
    scanf("%d%d%d", &n, &m, &q);
    for (int i = 1; i < n; i++) {
        int u, v;
        scanf("%d%d", &u, &v);
        g[u].push_back(v);
        g[v].push_back(u);
    }
    for (int i = 1; i <= m; i++) {
        int id;
        scanf("%d", &id);
        c[id].push_back(i);
    }
    for (int i = 1; i <= n; i++) {
        if (c[i].size() > 10)
            c[i].erase(c[i].begin() + 10, c[i].end());
    }
    dfs(1);
    for (int i = 1; i <= q; i++) {
        int u, v, a;
        scanf("%d%d%d", &u, &v, &a);
        vector <int> ans = lca(u, v);
        printf("%d ", min((int)ans.size(), a));
        for (int j = 0; j < min((int)ans.size(), a); j++) {
            printf("%d ", ans[j]);
        }
        puts("");
    }
    return 0;
}

