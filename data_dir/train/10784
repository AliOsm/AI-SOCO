#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;
const long long longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 1 << 17;

int a[N];
int fl[N], fr[N];

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    int n = read();

    for(int i = 1; i <= n; i++){
        a[i] = read();
    }

    fl[1] = 1;
    for(int i = 2; i <= n; i++){
        if(a[i] > a[i - 1])
            fl[i] = fl[i - 1] + 1;
        else
            fl[i] = 1;
    }

    fr[n] = 1;
    for(int i = n - 1; i > 0; i--){
        if(a[i] < a[i + 1])
            fr[i] = fr[i + 1] + 1;
        else
            fr[i] = 1;
    }

    int ans = 0;
    for(int i = 1; i <= n; i++){
        umax(ans, fl[i]);
        umax(ans, fr[i]);
    }
    for(int i = 2; i < n; i++){
        if(a[i - 1] < a[i + 1] && a[i + 1] - a[i - 1] >= 2){
            umax(ans, fl[i - 1] + fr[i + 1] + 1);
        }
    }
    for(int i = 1; i < n; i++){
        umax(ans, fr[i + 1] + 1);
    }
    for(int i = n; i > 1; i--){
        umax(ans, fl[i - 1] + 1);
    }

    cout << ans << endl;

    return 0;
}
