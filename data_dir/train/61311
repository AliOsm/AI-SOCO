#include <bits/stdc++.h>
using namespace std;

struct query{
	char c,a;
	int r;
	query(char c2,int r2,char a2){
		c = c2;
		r = r2;
		a = a2;
	}
};

const int MAX = 1e5+10;
char S[MAX];
char R[4][MAX];
int tam[4];
set <int> L[26];
int m1 = 0;
int m2 = 0;
vector <query> V;
const int BO = 260*260*260;
int A[BO];


int comprime(int i,int j,int k){
	return i + j*(m1+1) + k*(m1+1)*(m2+1);
}


void calcula(int i,int j,int k){
	int cmp = comprime(i,j,k);
	A[cmp] = MAX;
	if( i > 0){
		auto it = L[R[1][i-1] - 'a'].upper_bound(A[comprime(i-1,j,k)]);
		if( it != L[R[1][i-1] - 'a'].end() ) A[cmp] = min(A[cmp],*it);
	}
	if( j > 0){
		auto it = L[R[2][j-1] - 'a'].upper_bound(A[comprime(i,j-1,k)]);
		if( it != L[R[2][j-1] - 'a'].end() ) A[cmp] = min(A[cmp],*it);
	}
	if( k > 0){
		auto it = L[R[3][k-1] - 'a'].upper_bound(A[comprime(i,j,k-1)]);
		if( it != L[R[3][k-1] - 'a'].end() ) A[cmp] = min(A[cmp],*it);
	}
}


int main(){
	int n,q;
	scanf("%d %d",&n,&q);
	scanf("%s",S);
	for(int i = 0;i<n;i++){
		L[S[i] -'a'].insert(i);
	}
	for(int i=0;i<BO;i++){
		A[i] = MAX;
	}
	A[0] = -1;

	while( q--){
		char c,a;
		int r;
		scanf(" %c %d",&c,&r);
		if( c == '+'){
			tam[r] ++;
			scanf(" %c",&a);
		}
		if( c == '-'){
			tam[r]--;
		}
		m1 = max(m1,tam[1]);
		m2 = max(m2,tam[2]);
		V.push_back( query(c,r,a) );
	}
	for(int i=1;i<=3;i++){
		tam[i] = 0;
	}
	for( query q: V){
		if( q.c == '-'){
			tam[q.r] --;
			if( A[comprime(tam[1],tam[2],tam[3])] != MAX) printf("YES\n");
			else printf("NO\n");
			continue;
		}
		R[q.r][tam[q.r]] = q.a;
		tam[q.r] ++;
		if( q.r == 1){
			for(int j=0;j<=tam[2];j++){
				for(int k=0;k<=tam[3];k++){
					calcula(tam[1],j,k);
				}
			}
		}
		if( q.r == 2){
			for(int i=0;i<=tam[1];i++){
				for(int k=0;k<=tam[3];k++){
					calcula(i,tam[2],k);
				}
			}
		}
		if( q.r == 3){
			for(int i=0;i<=tam[1];i++){
				for(int j=0;j<=tam[2];j++){
					calcula(i,j,tam[3]);
				}
			}
		}
		if( A[comprime(tam[1],tam[2],tam[3])] != MAX) printf("YES\n");
		else printf("NO\n");
	}
}
