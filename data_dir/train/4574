
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
#include <bitset>
#include <complex>
using namespace std;
#define rep(i, n) for (int (i) = 0; (i) < (n); (i) ++)
#define rep1(i, n) for (int (i) = 1; (i) <= (n); (i) ++)
#define FOR(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout<<#a<<" :";FOR(i123,x,y)cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int((x).size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

struct BIT{
  int N;
  vector<int> v;
  BIT(int n) : N(n), v(n + 1) {}
  int sum(int i) {
    int s = 0;
    for (;i > 0; s += v[i], i -= i & -i);
    return s;
  }
  int sum(int a, int b) {
    return sum(b) - sum(a - 1);
  }
  void add(int i, int x) {
    for (; i <= N; v[i] += x, i += i & -i);
  }
  void set(int i, int x) {
    int val = sum(i) - sum(i - 1);
    add(i, x - val);
  }
};


int N;
struct Line { int x1, y1, x2, y2; } A[100100];

int cmp(pair<int,int> p1, pair<int,int> p2)
{
  return mp(p1.second,p1.first) < mp(p2.second,p2.first);
}
vector< pair<int,int> > rem_dup(vector< pair<int,int> > v)
{
  int debug = 0;
  if (debug)
  {
    cout << "v" << endl;
    rep(i,sz(v)) cout << "(" << v[i].first << " " << v[i].second << ")";
    cout << endl;
  }
  vector< pair<int,int> > w;
  rep(i,sz(v)) w.pb(mp(-1,v[i].first));
  rep(i,sz(v)) w.pb(mp(1,v[i].second));
  sort(w.begin(), w.end(), cmp);
  if (debug)
  {
    cout << "w" << endl;
    rep(i,sz(w)) cout << "(" << w[i].first << " " << w[i].second << ")";
    cout << endl;
  }
  vector< pair<int,int> > ret;
  for (int i = 0, cnt = 0, op; i < sz(w); i++)
  {
    if (cnt == 1 && w[i].first == 1) // close
    {
      ret.pb(mp(op,w[i].second));
    }
    if (cnt == 0 && w[i].first == -1) // open
    {
      op = w[i].second;
    }
    cnt -= w[i].first;
  }
  if (debug)
  {
    cout << "ret" << endl;
    rep(i,sz(ret)) cout << "(" << ret[i].first << " " << ret[i].second << ")";
    cout << endl;
    cout << endl;
    cout << endl;
  }
  return ret;
}

vector< pair<int,int> > hor[200100];
vector< pair<int,int> > ver[200100];

vector<int> nums;
inline int get_ind(int x)
{
  return (int) (lower_bound(nums.begin(), nums.end(), x) - nums.begin());
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  cin >> N;
  rep1(i,N) cin >> A[i].x1 >> A[i].y1 >> A[i].x2 >> A[i].y2;
  rep1(i,N) nums.pb(A[i].x1);
  rep1(i,N) nums.pb(A[i].y1);
  rep1(i,N) nums.pb(A[i].x2);
  rep1(i,N) nums.pb(A[i].y2);
  nums.pb((int) (-1e9-10));
  sort(nums.begin(), nums.end());
  nums.erase(unique(nums.begin(), nums.end()), nums.end());
  rep1(i,N)
  {
    if (A[i].x1 == A[i].x2)
    {
      // vertical
      int mny = min(A[i].y1, A[i].y2);
      int mxy = max(A[i].y1, A[i].y2);
      ver[get_ind(A[i].x1)].pb(mp(mny, mxy));
    }
    else
    {
      // horizontal
      int mnx = min(A[i].x1, A[i].x2);
      int mxx = max(A[i].x1, A[i].x2);
      hor[get_ind(A[i].y1)].pb(mp(mnx, mxx));
    }
  }
  rep(i,sz(nums)) ver[i] = rem_dup(ver[i]);
  rep(i,sz(nums)) hor[i] = rem_dup(hor[i]);
  vector< vector< pair<int,int> > > tmpver(sz(nums));
  ll ans = 0;
  rep(i,sz(nums)) rep(j,sz(ver[i]))
  {
    int x = nums[i];
    int miny = ver[i][j].first;
    int maxy = ver[i][j].second;
//    cout << "haha = (" << x << ", " << miny << ") (" << x << ", " << maxy << ")" << endl;
    ans += maxy - (ll) miny + 1;
    tmpver[get_ind(miny)].pb(mp(-1,x)); // -1 = open
    tmpver[get_ind(maxy)].pb(mp(1,x)); // 1 = close
  }
  rep(i,sz(nums)) ver[i] = tmpver[i];
  rep(i,sz(nums))  rep(j,sz(hor[i]))
  {
    ans += hor[i][j].second - (ll) hor[i][j].first + 1;
//    cout << "hehe = (" << hor[i][j].first << ", " << nums[i] << ") (" << hor[i][j].second << ", " << nums[i] << ")" << endl;
  }
//  db(ans);
  BIT bit(sz(nums) + 10);
  rep(i,sz(nums))
  {
    rep(j,sz(ver[i]))
    {
      int doesopen = ver[i][j].first == -1;
      int x = ver[i][j].second;
      if (doesopen)
      {
        bit.set(get_ind(x), 1);
      }
    }
    rep(j,sz(hor[i]))
    {
      int a = hor[i][j].first;
      int b = hor[i][j].second;
//      cout << "subtracting (" << a << ", " << b << ")" << endl;
//      cout << "which is " << bit.sum(get_ind(a), get_ind(b)) << endl << endl;
      ans -= bit.sum(get_ind(a), get_ind(b));
    }
    rep(j,sz(ver[i]))
    {
      int doesopen = ver[i][j].first == -1;
      int x = ver[i][j].second;
      if (!doesopen)
      {
        bit.set(get_ind(x), 0);
      }
    }
  }
  cout << ans << endl;
}
