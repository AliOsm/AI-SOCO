/*||>>>> Praveen Ojha <<<<>>>> 09 June 2019 <<<<>>>> 06:40:03 <<<<||*/
// #pragma GCC optimize("Ofast") //(Very Fast but Inaccurate)
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native") //(Small operations in many loops)
// #pragma GCC optimize("unroll-loops")
// #pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("O3")
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define F first
#define S second
#define mod 1000000007
#define inf 1e18+5
#define sz(x) (int)x.size()
#define PI 3.141592653589793238510
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define __ ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define vi vector<int>
#define vpii vector<pair<int,int> > 
#define vvi vector<vector<int> >
#define PRINT_TIME cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s." <<endl;
#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename   enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "
typedef long double ld;
typedef pair<int,int> pii;
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

int32_t main(){__
	 vector <string> tt={"C", "C#", "D", "D#", "E","F", "F#", "G", "G#", "A", "B", "H"};//,"C", "C#", "D", "D#", "E"," F", "F#", "G", "G#", "A", "B", "H"};
	 string s[3];
	 for(int i=0;i<3;i++)
	 	cin>>s[i];
	 int i=0;
	 vi ans;
	 int n=sz(tt);
	 for(int j=0;i<3;j=(j+1)%n){
	 	if(tt[j]==s[i]){
	 		ans.push_back(j);
	 		i++;
	 	}
	 	// debug()<< imie(ans);
	 }
	 sort(all(ans));
	 do{
	 	int a=ans[0],b=ans[1],c=ans[2];
	 	if(b<a)
	 		b+=sz(tt);
	 	if(c<b)
	 		c+=sz(tt);
	 	// debug()<< imie(a) imie(b) imie(c);
	 	if(b-a==4 && c-b==3 && c-a==7){
	 		return cout<<"major\n",0;
	 	}
	 	else if(b-a==3 && c-b==4 && c-a==7){
	 		return cout<<"minor\n",0;
	 	}
	 }while(next_permutation(all(ans)));
	 cout<<"strange\n";
return 0;
}