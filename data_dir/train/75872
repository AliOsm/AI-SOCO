/*input
Â 
*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define fi first
#define se second
#define mp make_pair
#define __builtin_popcount __builtin_popcountll
#define bit(x,y) ((x>>y)&1LL)
#define loop(i,l,r) for(int i=(int)l; i<=(int)r; i++)
#define rloop(i,l,r) for(int i=(int)l; i>=(int)r; i--)
mt19937 rd(chrono::steady_clock::now().time_since_epoch().count());
// mt19937 rd(5);
#define rand rd
//const int N=;
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &a) {
	return os << '(' << a.first << ", " << a.second << ')';
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a) {
	os << '[';
	for (unsigned int i = 0; i < a.size(); i++)
		os << a[i] << (i < a.size() - 1 ? ", " : "");
	os << ']';
	return os;
}
vector<int> dfx = {0, 1};
vector<int> dfy = {1, 0};
bool checkPalin(vector<vector<int> > &a, int x1, int y1, int x2, int y2) {
	assert(x1 <= x2 && y1 <= y2 && x1 + y1 + 2 <= x2 + y2);
	assert(x2 + y2 <= x1 + y1 + 3); // special assert
	if (x1 + y1 + 2 == x2 + y2) {
		return a[x1][y1] == a[x2][y2];
	}
	else {
		if (a[x1][y1] != a[x2][y2]) return false;
		loop(i, 0, 1) {
			int x3 = x1 + dfx[i]; int y3 = y1 + dfy[i];
			if (x3 > x2 || y3 > y2) continue;
			loop(j, 0, 1) {
				int x4 = x3 + dfx[i]; int y4 = y3 + dfy[i];
				if (x4 > x2 || y4 > y2) continue;
				if (a[x3][y3] == a[x4][y4]) return true;
			}
		}
		return false;
	}
}
struct GraderX {
	int n = 3; int cntQuest = 0;
	vector<vector<int> > a;
	void init() {
		a.assign(n + 5, vector<int>(n + 5, 0));
		loop(i, 1, n) loop(j, 1, n) a[i][j] = rd() % 2;
		cout << "ANSWER" << endl;
		loop(i, 1, n) {
			loop(j, 1, n) cout << a[i][j] << sp;
			cout << endl;
		}
		cout << endl;
	}
	bool ask(int x1, int y1, int x2, int y2) {
		cntQuest++;
		assert(cntQuest <= n * n);
		assert(x1 <= x2 && y1 <= y2 && x1 + y1 + 2 <= x2 + y2);
		assert(x2 + y2 <= x1 + y1 + 3); // special assert
		return checkPalin(a, x1, y1, x2, y2);
	}
	void ANSWER(vector<vector<int> > inp) {
		bool flip = false;
		loop(i, 1, n) {
			loop(j, 1, n) {
				if (a[i][j] != inp[i][j]) {
					flip = true;
				}
			}
		}
		if (!flip) {
			cout << "OK, Correct answer" << endl;
			exit(0);
		}
		loop(i, 1, n) {
			loop(j, 1, n) a[i][j] ^= 1;
		}
		loop(i, 1, n) {
			loop(j, 1, n) {
				if (a[i][j] != inp[i][j]) {
					cout << "Wrong Answer !!!" << endl;
					exit(0);
				}
			}
		}
		cout << "OK, Correct answer" << endl;
		exit(0);
	}
	int getn() {
		return n;
	}
} Grader;
bool ask(int x1, int y1, int x2, int y2) {
	if (!(x1 <= x2 && y1 <= y2 && x1 + y1 + 2 <= x2 + y2))
		swap(x1, x2), swap(y1, y2);
	assert(x1 <= x2 && y1 <= y2 && x1 + y1 + 2 <= x2 + y2);
	bool ret;
#ifdef UncleGrandpa
	ret = Grader.ask(x1, y1, x2, y2);
#else
	cout << "?" << sp << x1 << sp << y1 << sp << x2 << sp << y2 << endl;
	cin >> ret;
#endif
	return ret;
}
void ANSWER(vector<vector<int> > a, int n) {
#ifdef UncleGrandpa
	Grader.ANSWER(a);
#else
	cout << "!" << endl;
	loop(i, 1, n) {
		loop(j, 1, n) cout << a[i][j];
		cout << endl;
	}
#endif
	exit(0);
}
vector<vector<int> > a;
// 0 2 11 2 0
int dx[] = {0, 1, 2};
int dy[] = {2, 1, 0};
int d3x[] = {0, 1, 2, 3};
int d3y[] = {3, 2, 1, 0};
signed main() {
	int n;
#ifdef UncleGrandpa
	Grader.init();
	n = Grader.getn();
#else
	cin >> n;
#endif
	a.assign(n + 5, vector<int>(n + 5, -1));
	a[1][1] = 0; a[1][2] = 0;
	queue<pair<int, int> > q;
	q.push(mp(1, 1)); q.push(mp(1, 2));
	while (!q.empty()) {
		int x = q.front().fi; int y = q.front().se; q.pop();
		loop(i, 0, 2) {
			int ax = x + dx[i]; int ay = y + dy[i];
			if (1 <= ax && ax <= n && 1 <= ay && ay <= n && a[ax][ay] == -1) {
				auto rec = ask(x, y, ax, ay);
				if (rec)
					a[ax][ay] = a[x][y];
				else
					a[ax][ay] = 1 - a[x][y];
				q.push(mp(ax, ay));
			}
		}
		loop(i, 0, 2) {
			int ax = x + dx[i] * -1; int ay = y + dy[i] * -1;
			if (1 <= ax && ax <= n && 1 <= ay && ay <= n && a[ax][ay] == -1) {
				auto rec = ask(x, y, ax, ay);
				if (rec)
					a[ax][ay] = a[x][y];
				else
					a[ax][ay] = 1 - a[x][y];
				q.push(mp(ax, ay));
			}
		}
	}
	int doneCheck = -1;
	try {
		loop(x, 1, n) {
			loop(y, 1, n) {
				loop(k, 0, 3) {
					int ax = x + d3x[k]; int ay = y + d3y[k];
					if (1 <= ax && ax <= n && 1 <= ay && ay <= n) {
						if (checkPalin(a, x, y, ax, ay)) {
							doneCheck = ask(x, y, ax, ay);
							throw 1;
						}
					}
				}
			}
		}
		loop(i, 1, n) {
			loop(j, 1, n) if ((i + j) % 2 == 1) a[i][j] ^= 1;
		}
		loop(x, 1, n) {
			loop(y, 1, n) {
				loop(k, 0, 3) {
					int ax = x + d3x[k]; int ay = y + d3y[k];
					if (1 <= ax && ax <= n && 1 <= ay && ay <= n) {
						if (checkPalin(a, x, y, ax, ay)) {
							doneCheck = ask(x, y, ax, ay);
							throw 1;
						}
					}
				}
			}
		}
	}
	catch (...) {
		if (doneCheck == 0) {
			loop(i, 1, n) {
				loop(j, 1, n) if ((i + j) % 2 == 1) a[i][j] ^= 1;
			}
		}

	}
	if (a[1][1] != 1) {
		loop(i, 1, n) {
			loop(j, 1, n) a[i][j] ^= 1;
		}
	}
	ANSWER(a, n);
}
