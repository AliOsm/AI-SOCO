#include <bits/stdc++.h>
using namespace std;
#define read            freopen("C:\\Users\\Dell\\Desktop\\in.txt", "r", stdin)
#define write           freopen("C:\\Users\\Dell\\Desktop\\out.txt", "w", stdout)
#define pii             pair<int, int>
#define pll             pair<LL, LL>
#define inf             1111111111
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pn              printf("\n");
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b ,c)    printf("%d %d %d\n", a, b, c)
#define MP              make_pair
#define vi              vector<int>
#define vll             vector<LL>
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define MEM(a, b)       memset((a), (b), sizeof(a))
#define CASE            printf("Case %d: ", ++cs)
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
typedef long long LL;
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
bool check(LL n, LL pos) {return (n & ((LL)1<<pos))>>pos;} //typecast 1 in case of int
LL  on(LL n, LL pos) {return n | ((LL)1<<pos);} //typecast 1 in case of int
LL  off(LL n, LL pos) {return n & ~((LL)1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue
inline int getnum()
{
    char c = getchar();
    int num,sign=1;
    for(;c<'0'||c>'9';c=getchar())if(c=='-')sign=-1;
    for(num=0;c>='0'&&c<='9';)
    {
        c-='0';
        num=num*10+c;
        c=getchar();
    }
    return num*sign;
}
/* ***************************************************************************************
   *************************************************************************************** */
const int M=400100;
struct data {
    LL val;
    bool propagate;
}tree[2*524288+10];
char color[M];
bool visited[M];
pii range[M];
int pos[M], id=0;
vi A[M];
void dfs(int u)
{
    visited[u]=true;
    pos[u]=id;
    range[u].first=id++;

    for (int i=0; i<A[u].sz; i++)
    {
        if (!visited[A[u][i]]) dfs(A[u][i]);
    }
    range[u].second=id-1;
}
void update_lazy (int indx, int left, int right, int i, int j, LL value)
{
    int mid=(left+right)/2, child=2*indx;

    if (left>=i&&right<=j)
    {
        tree[indx].propagate=false;
        tree[indx].val=value;

        if (left!=right) tree[child].propagate=tree[child+1].propagate=true;
    }
    else
    {
        if (tree[indx].propagate==true)
        {
            tree[indx].val=tree[indx/2].val;
            tree[indx].propagate=false;
            if (left!=right) tree[child].propagate=tree[child+1].propagate=true;
        }

        if (left>j||right<i) return ;

        update_lazy(child, left, mid, i, j, value);
        update_lazy(child+1, mid+1, right, i, j, value);

        tree[indx].val=tree[child].val|tree[child+1].val;
    }
}
LL query (int indx, int left, int right, int i, int j)
{
       int mid=(left+right)/2, child=2*indx;

       if (tree[indx].propagate==true)
        {
            tree[indx].val=tree[indx/2].val;
            tree[indx].propagate=false;
            if (left!=right) tree[child].propagate=tree[child+1].propagate=true;
        }
        if (left>=i&&right<=j) return tree[indx].val;
        if (left>j||right<i) return 0;

        return query(child, left, mid, i, j)|query(child+1, mid+1, right, i, j);
}
int main()
{
#ifndef ONLINE_JUDGE
    read;
#endif
    int i, j, k, t, cs=0, n, q, c;
    LL z=0;

    MEM(tree, false);
    n=getnum();
    q=getnum();
    for (i=1; i<=n; i++) color[i]=getnum();
    for (i=0; i<n-1; i++)
    {
        j=getnum();
        k=getnum();
        A[j].pb(k);
        A[k].pb(j);
    }

    id=1;
    MEM(visited, 0);
    dfs(1);

    for (i=1; i<=n; i++) update_lazy(1, 1, n, pos[i], pos[i], on(z, color[i]));

    int sum;
    LL mask;
    while (q--)
    {
        sum=0;
        t=getnum();
        if (t==1)
        {
            k=getnum();
            c=getnum();

            update_lazy(1, 1, n, range[k].first, range[k].second, on(z, c));
//            pr3(k, range[k].first, range[k].second);
        }
        else
        {
            k=getnum();
            mask=query(1, 1, n, range[k].first, range[k].second);

            for (i=1; i<=60; i++) if (check(mask, i)) sum++;
            pr(sum);
        }
    }

return 0;
}