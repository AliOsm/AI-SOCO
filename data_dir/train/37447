#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <cmath>
#include <algorithm>
#include <assert.h>
#include <memory.h>
#include <string.h>
#include <complex>
#include <queue>
#include <cstdlib>
#include <ctime>
using namespace std;

#define ll long long
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x).size()

bool is_prime(int x) {
	for(int i = 2; i * i <= x; i++) {
		if (x % i == 0) return false;
	}
	return true;
}

int mod1, mod2;
int osn;

vector<int> v[300300];
int hash1[300300];
//ll hash2[300300];

int pow1[300300];
//ll pow2[300300];

bool ok = true;
bool vis[300300];
int val[300300];

bool is_eq(int s, int t) {
	int hs1 = hash1[s];
	//ll hs2 = hash2[s];
	int ht1 = hash1[t];
	//ll ht2 = hash2[t];
	
	hs1 -= pow1[t];
	if (hs1 < 0) hs1 += mod1;
	//hs2 -= pow2[t];
	//if (hs2 < 0) hs2 += mod2;
	
	ht1 -= pow1[s];
	if (ht1 < 0) ht1 += mod1;
	//ht2 -= pow2[s];
	//if (ht2 < 0) ht2 += mod2;

	return (hs1 == ht1);// && hs2 == ht2);
}

//set<pair<int, int> > edges;

int st = 1;

void dfs(int s, int c) {
	if (!ok) return;
	vis[s] = true;
	val[s] = c;
	if (val[s] == val[1]) {
		for(int i = 0; i < sz(v[s]); i++) {
			int nxt = v[s][i];
			if (is_eq(s, nxt)) {
				if (vis[nxt]) {
					if (val[s] != val[nxt]) {
						ok = false;
						return;
					}
				}
				else {
					if (st <= -3) {
						ok = false;
						return;
					}
					dfs(nxt, c);
				}
			}
			else {

			}
		}
	}
	else {
		for(int i = 0; i < sz(v[s]); i++) {
			int nxt = v[s][i];
			if (is_eq(s, nxt)) {
				if (vis[nxt]) {
					if (val[s] != val[nxt]) {
						ok = false;
						return;
					}
				}
				else {
					dfs(nxt, c);
				}
			}
			else {

			}
		}
	}
	if (val[s] == val[1]) {
		for(int i = 0; i < sz(v[s]); i++) {
			int nxt = v[s][i];
			if (is_eq(s, nxt)) {

			}
			else {
				if (vis[nxt]) {
					if (abs(val[s] - val[nxt]) != 1) {
						ok = false;
						return;
					}
				}
				else {
					if (st <= -3) {
						ok = false;
						return;
					}
					dfs(nxt, c + st);
					st-=2;
				}
			}
		}
	}
	else {
		for(int i = 0; i < sz(v[s]); i++) {
			int nxt = v[s][i];
			if (is_eq(s, nxt)) {

			}
			else {
				if (vis[nxt]) {
					if (abs(val[s] - val[nxt]) != 1) {
						ok = false;
						return;
					}
				}
				else {
					dfs(nxt, c + st);
				}
			}
		}
	}
}


int main() {
	//freopen("input.txt", "rt", stdin);
	//freopen("output.txt", "wt", stdout);
	//srand(time(0));
	mod1 = 1e9 + 7;
	//mod2 = mod1 + rand() + rand() + rand();
	//while(!is_prime(mod2)) mod2++;
	osn = 2;
	
	pow1[0] = 1;
	for(int i = 1; i < 300300; i++) {
		pow1[i] = pow1[i-1] * osn;
		if (pow1[i] >= mod1) pow1[i] -= mod1;
	}
	//pow2[0] = 1;
	//for(int i = 1; i < 300300; i++) {
	//	pow2[i] = (pow2[i-1] * osn) % mod2;
	//}


	int n, m;
	scanf("%d %d", &n, &m);
	for(int i = 0; i < m; i++) {
		int a, b;
		scanf("%d %d", &a, &b);
		v[a].pb(b);
		v[b].pb(a);
	//	edges.insert(mp(a, b));
		//edges.insert(mp(b, a));

		hash1[a] += pow1[b];
		if (hash1[a] >= mod1) hash1[a] -= mod1;

		hash1[b] += pow1[a];
		if (hash1[b] >= mod1) hash1[b] -= mod1;

		//hash2[a] += pow2[b];
		//hash2[a] %= mod2;

		//hash2[b] += pow2[a];
	//	hash2[b] %= mod2;
	}

	dfs(1, 300300);

	if (ok) {
		printf("YES\n");
		for(int i = 1; i <= n; i++) printf("%d ", val[i]);
	}
	else printf("NO\n");

	return 0;
}