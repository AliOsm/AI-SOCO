#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

int main() {
  int n, m;
  scanf("%d%d", &n, &m);
  vector<int64> a(n), sum(n + 1);
  for (int i = 0; i < n; ++i) {
    scanf("%lld", &a[i]);
    sum[i + 1] = sum[i] + a[i];
  }
  int k = 0;
  int64 used = 0;
  while (m--) {
    int64 hit;
    scanf("%lld", &hit);
    int idx = upper_bound(sum.begin() + k + 1, sum.end(), sum[k] + used + hit) - sum.begin();
    int ret;
    if (idx > n) {
      ret = n;
      k = 0;
      used = 0;
    } else {
      ret = n - idx + 1;
      used = a[idx - 1] - (sum[idx] - sum[k] - used - hit);
      k = idx - 1;
    }
    // trace(k, ret, used);
    printf("%d\n", ret);
  }
  return 0;
}
