#include<bits/stdc++.h>
#define int long long int
#define ld long double
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD2 998244353
#define MOD1 1e9+7
#define f first
#define s second
#define endl '\n'
#define pii pair<int,int>
#define piii pair<pii,int>
#define precise(i) cout<<fixed<<setprecision(i)
using namespace std;
const long double PI = atan(1.0)*4;
const int64_t INF=1000000000000000003;
const int32_t LOG=21;
const int MOD=MOD1;
int a[300005];
int b[300005];

int32_t main()
{ 
      getFaster;
      int tests=1;
      cin>>tests;
      rep(ii,0,tests)
      {
           int n;
           cin>>n;
           rep(i,0,n)cin>>a[i]>>b[i];
           
           int sum=0;
           rep(i,0,n)sum+=max(a[(i+1)%n]-b[i],0LL);

           int ans=-1;
           rep(i,0,n)
           {
                 int val=max(a[i]-b[(i-1+n)%n],0LL);
                 if(ans==-1)
                 ans=sum+a[i]-val;
                 else 
                 ans=min(ans,sum+a[i]-val);  
           }
           cout<<ans<<endl;
      }

      return 0;                         
}

/*
 TIPS(FOR ME):
 1.) Check for corner cases (like 0 is exception case)
 2.) Check for global memory sizes,memory refreshments and its complexity 
 3.) Check for sorting criteria (if used 1-based indexing)
 4.) Check for numbers overflow (while multiplying and doing MOD)
 5.) Check for typecasting issues like int to float( while dividing numbers)
*/
