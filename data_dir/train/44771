#include <bits/stdc++.h>
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define all(v) v.begin(),v.end()
#define nl '\n'

#define boost ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0)

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef pair<ll,ll> pll;

const ll INF=1e18;
const int inf=1e9;
const ld eps=1e-7;
const ld pi=acos(-1);
const int dx[8]={0,0 ,1,-1,1,1,-1,-1};
const int dy[8]={1,-1,0,0,1,-1,1,-1};
const int mod1=998244353;
const int mod2=1e9+7;
const int N=1e5+11;

struct line{
  ll k,b;
};

vector<line>L;
vector<ld>X;
int n;
ll a[N],c[N],dp[N];

ld intersect(line a,line b){
  ld x=(ld)(b.b-a.b)/(ld)(a.k-b.k);
  return x;
}

void add(ll k,ll b){
  if(sz(L)<2){
    if(sz(L)==0)L.pb({k,b});
    else{
      L.pb({k,b});
      X.pb(intersect(L[0],L[1]));
    }
  }
  else{
    while(sz(L)>1){
      int n=sz(L);
      ld xL=intersect(L[n-2],L[n-1]),xR=intersect(L[n-2],{k,b});
      if(xL>xR){
        L.pop_back();
        X.pop_back();
      }
      else break;
    }
    int n=sz(L);
    L.pb({k,b});
    X.pb(intersect(L[n-1],L[n]));
  }
}

ll get(ll x){
  X.pb(inf);
  int pos=low_b(all(X),x)-X.begin();
  X.pop_back();
  return L[pos].k*x+L[pos].b;
}


int main(){
  boost;
  cin>>n;
  for(int i=1;i<=n;i++){
    cin>>a[i];
  }
  for(int i=1;i<=n;i++){
    cin>>c[i];
  }
  dp[1]=0;
  add(c[1],dp[1]);
  for(int i=2;i<=n;i++){
    dp[i]=get(a[i]);
    add(c[i],dp[i]);
  }
  cout<<dp[n];
  return 0;
}
