#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef long double ld;
#define F first
#define S second
#define ii pair <int,int>
#define ever (;;)

const int N = 1010;

bool q;
int n,a[N][N],dp[N][N][3],inf=1e5;

void getPath(int i,int j,int type)
{
    if( i == n && j == n )
        return;

    if( dp[i+1][j][type] < dp[i][j+1][type] )
    {
        printf("D");
        getPath(i+1,j,type);
    }
    else
    {
        printf("R");
        getPath(i,j+1,type);
    }
}

int main()
{
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
        {
            scanf("%d",&a[i][j]);
            q |= ( a[i][j] == 0 );
        }

    for(int i=0;i<=n;i++)
        dp[i][n+1][1] = dp[n+1][i][1] = dp[i][n+1][2] = dp[n+1][i][2] = inf;

    for(int i=n;i>=1;i--)
    {
        for(int j=n;j>=1;j--)
        {
            if( a[i][j] == 0 )
            {
                dp[i][j][1] = dp[i][j][2] = inf;
                continue;
            }

            while( a[i][j]%2 == 0 )
            {
                dp[i][j][1]++;
                a[i][j] /= 2;
            }

            while( a[i][j]%5 == 0 )
            {
                dp[i][j][2]++;
                a[i][j] /= 5;
            }

            if( i != n || j != n )
            {
                dp[i][j][1] += min( dp[i+1][j][1] , dp[i][j+1][1] );
                dp[i][j][2] += min( dp[i+1][j][2] , dp[i][j+1][2] );
            }
        }
    }

    if( min( dp[1][1][1] , dp[1][1][2] ) == 0 )
    {
        printf("0\n");
        getPath(1,1,( dp[1][1][1] == 0 ) ? 1 : 2 );
        return 0;
    }

    if( q )
    {
        printf("1\n");
        int x,y;
        for(int i=1;i<=n;i++)
            for(int j=1;j<=n;j++)
                if( a[i][j] == 0 )
                {
                    x = i;
                    y = j;
                    break;
                }

        for(int i=1;i<x;i++)
            printf("D");
        for(int i=1;i<y;i++)
            printf("R");
        for(int i=1;i<=n-x;i++)
            printf("D");
        for(int i=1;i<=n-y;i++)
            printf("R");
    }
    else
    {
        printf("%d\n",min(dp[1][1][1],dp[1][1][2]));
        getPath(1,1,( dp[1][1][1] == min(dp[1][1][1],dp[1][1][2]) ) ? 1 : 2 );
    }
}
