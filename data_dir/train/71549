#include<bits/stdc++.h>
using namespace std;

#define int           long long 
#define S             second
#define F             first
#define pb            push_back
#define ppb           pop_back()
#define ppb           pop_back()
#define B(c)          (c).begin()
#define E(c)          (c).end()
#define all(c)        (c).begin(),(c).end()
#define rall(c)       (c).rbegin(),(c).rend() 
#define lb            lower_bound
#define si(c)         (int)((c).size())
#define lcm(a,b)      (a * (b / __gcd(a,b)))  
#define inf           (int)(1e18)
#define err           cerr << "move" << '\n';
#define endl          '\n'
#define pow(x, n)     (int)(pow(x, n))
#define mp            make_pair

typedef vector<int>                           vi;
typedef pair<int,int>                         pii;
typedef vector<pii>                           vpi;
typedef vector<vector<int> >                  vvi;;
typedef priority_queue<pii, vector<pii>, greater<pii> > pq;

const int N = 1e6+10;

class PrimeFactor{
public:
    static int p[N];
    static vector<int> primes[N];
    void Seive(){
        for(int i = 2; i <= N-5; i++){
            if(p[i])continue;
            for(int j = i; j <= N-5; j += i)
                if(!p[j])p[j] = i;
        }
    }
    // store the prime divisor 
    void StorePrime(){
        for(int i = 2; i <= N-5; i++){
            int x = i;
            while(x != 1){
                int pre = p[x];
                primes[i].pb(pre);
                while(x%pre == 0)x /= pre;
            }
        }
    }
    void Init(){
        Seive();
        StorePrime();
    }
}Pf;

int PrimeFactor::p[N];
vector<int> PrimeFactor::primes[N];

void solve(){
    int x, p, k;
    cin >> x >> p >> k;
    vpi V;
    //cout << "move" << endl;
    int n = si(Pf.primes[p]);
    for(int i = 1; i < (1<<n); i++){
        int cnt = 1;
        for(int j = 0; j < n; j++){
            if((i>>j)&1)cnt *= Pf.primes[p][j];
        }
        if(__builtin_popcountll(i)%2)V.pb({cnt, -1});
        else V.pb({cnt, 1});
    }
    //cout << n << endl;
    int s = x+1, e = 1e18, ans;
    while(s <= e){
        int y = (s+e)/2, tot = y-x, ele = 0;
        for(auto j : V){
            int i = j.F, f = j.S;
            int cnt = y/i-x/i;
            ele += cnt*f;
        }
        if(tot+ele >= k){
            e = y-1, ans = y;
        }
        else s = y+1;
    }
    cout << ans << endl;
}

signed main(){

    ios_base::sync_with_stdio(0); 
    cin.tie(0); cout.tie(0);   

    int t = 1;
    clock_t start, end; 
    start = clock(); 

    cout << fixed << setprecision(15);

    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
    #endif
    
    Pf.Init();

    cin >> t;

    while(t--){
        solve();
    }

    end = clock();
    double time_taken = double(end - start) / double(CLOCKS_PER_SEC); 
    // cerr<<time_taken;
}