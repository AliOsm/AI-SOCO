#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <cstdio>
#include <set>

using namespace std;

typedef long long ll;
typedef long double ld;

const int N = 105;
const ll INF = 2e9 + 7;
const ll MOD = 1e9 + 7;

ld dp[N][N][N];
//    r  s  p

ld col(ld r, ld s, ld p)
{
	return r * s + r * p + s * p;
}

int main()
{
	ios :: sync_with_stdio(false);

	int rr, ss, pp;
	cin >> rr >> ss >> pp;

	dp[rr][ss][pp] = 1;

	for (int R=rr; R>=0; R--)
	{
		for (int S=ss; S>=0; S--)
		{
			for (int P=pp; P>=0; P--)
			{
				if (R != rr || S != ss || P != pp)
				{
					// R win S
					if (col(R, S+1, P) != 0)
					dp[R][S][P] += dp[R][S+1][P] * ld(R * (S+1)) / col(R, S+1, P);

					// S win P
					if (col(R, S, P+1) != 0)
					dp[R][S][P] += dp[R][S][P+1] * ld(S * (P+1)) / col(R, S, P+1);

					// P win R
					if (col(R+1, S, P) != 0)
					dp[R][S][P] += dp[R+1][S][P] * ld((R+1) * P) / col(R+1, S, P);
				}
			}
		}
	}

	cout.precision(12);
	cout << fixed;

	ld ans = 0;

	for (int i=1; i<=rr; i++)
		ans += dp[i][0][0];

	cout << ans << " ";


	ans = 0;

	for (int i=1; i<=ss; i++)
		ans += dp[0][i][0];

	cout << ans << " ";


	ans = 0;

	for (int i=1; i<=pp; i++)
		ans += dp[0][0][i];

	cout << ans << " ";

	return 0;
}