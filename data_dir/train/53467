#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE

#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <cmath>
#include <sstream>
#include <utility>
#include <ctime>
#include <memory.h>
#include <cctype>
#include <cstdlib>
#include <complex>

using namespace std;

#pragma comment (linker, "/STACK:64000000")

#define y0 qwe
#define y1 asd
#define sz size()
#define pb push_back
#define fors(w,s) for(set <string> :: iterator w = s.begin(); w != s.end(); w++)
#define pii pair<int, int>
#define pll pair<ll, ll>
#define ull unsigned long long
#define vi vector <int>
#define vvi vector <vi>
#define inf 2000000000
#define mod 1000000007
#define ll long long
#define maxint 2139062143 //2147483647
#define maxll 9223372036854775807
#define fi first
#define se second
#define eps 1e-9
#define doubleinf 1000000000000000.0

int t, l, r, h, g, q, j, i, y, q1, q2, k, ans, mn, m, n, res[300500], high[300500], par[300500];
vector <int> v[300005];
bool b[300500];

void rec(int p, int u)
{
    b[u] = 1;
    par[u] = p;
    int mx1 = 0, mx2 = 0, mx = 0;
    for (int j = 0; j < v[u].sz; j++)
    {
        if (!b[v[u][j]])
        {
            rec(p, v[u][j]);
            mx = max(res[v[u][j]], mx); 
            if (!mx1 || !mx2)
            {
                if (!mx1)
                {
                    mx1 = high[v[u][j]];
                }
                else
                {
                    mx2 = high[v[u][j]];
                    if (mx1 < mx2)
                    {
                        swap (mx1, mx2);
                    }
                }
            }
            else
            {
                if (mx2 < high[v[u][j]])
                {
                    mx2 = high[v[u][j]];
                    if (mx1 < mx2)
                    {
                        swap (mx1, mx2);
                    }
                }
            }
        }
    }
    high[u] = mx1 + 1;
    res[u] = max(mx1 + mx2, mx);
}

int find_set (int v)
{
    if (v == par[v])
    {
        return v;
    }
    return par[v] = find_set (par[v]);
}

inline void solve()
{
    scanf ("%d%d%d", &n, &m, &k);
    for (j = 1; j <= m; j++)
    {
        scanf ("%d%d", &q1, &q2);
        v[q1].pb(q2);
        v[q2].pb(q1);
    }
    for (j = 1; j <= n; j++)
    {
        if (!par[j])
        {
            rec(j, j);
        }
    }
    for (j = 1; j <= k; j++)
    {
        scanf ("%d", &t);
        if (t == 1)
        {
            scanf ("%d", &q);
            printf ("%d\n", res[find_set(q)]);
        }
        else
        {
            scanf ("%d%d", &q1, &q2);
            q1 = find_set(q1);
            q2 = find_set(q2);
            if (q1 != q2)
            {
                res[q1] = max(max(((res[q1] + 1) >> 1) + ((res[q2] + 1) >> 1) + 1, res[q1]), res[q2]);
                par[q2] = q1;
            }
        }
    }
}

inline void init()
{
    
}

inline void answer()
{
    
}

int main()
{
    //freopen ("input.txt","r",stdin); freopen ("output.txt","w",stdout);
    //freopen ("olympiad.in","r",stdin); freopen ("olympiad.out","w",stdout);
    init();
    solve();
    answer();
    return 0;
}