#include <bits/stdc++.h>
using namespace std;
#define mp make_pair
#define pb push_back
#define left fleft
#define right fright
#define F first
#define S second
const int INF = 1000000000;
const int N = 500000;
int n;
int c;
char s[N];
int d[N];
int nt;
vector < int > g[N];
set < pair < long long, int > > dfs(int v, int p, long long h, long long r) {
	h = (h * nt + s[v] - 'a' + 1);
	r = (r * 31 + s[v] - 'a' + 1) % 1000000009;
	set < pair < long long, int >  > cur; cur.insert(mp(h, r));
	for (int i = 0; i < (int)g[v].size(); ++i) {
		int to = g[v][i];
		if (to == p) continue;
		set < pair < long long, int > > t = dfs(to, v, h, r);
		if (t.size() > cur.size()) 
			cur.swap(t);
		for (set < pair < long long, int >  > :: iterator it = t.begin(); it != t.end(); ++it) {
			cur.insert(*it);
		}
	}
	d[v] += cur.size();
	return cur;
}
bool prime(int n) {
	for (int i = 2; i < n; ++i)
		if (n % i == 0) return false;
	return true;
}
int main(){
	//freopen("input.txt","r",stdin);
	scanf("%d", &n);
	nt = rand() % 155 + 25;
	while (!prime(nt)) nt++;
	for (int i = 0; i < n; ++i) {
		int c; scanf("%d", &c);
		d[i] = c;
	}
	scanf("%s", s);
	for (int i = 0; i < n - 1; ++i) {
		int x, y;
		scanf("%d%d", &x, &y); x--; y--;
		g[x].pb(y);
		g[y].pb(x);
	}
	dfs(0, -1, 0, 0);
	int cur = -1;
	for (int i = 0; i < n; ++i) {
		cur = max(cur, d[i]);
	}
	printf("%d\n", cur);
	int cnt = 0;
	for (int i = 0; i < n; ++i) {
		if (cur == d[i])
			cnt++;
	}
	printf("%d\n", cnt);
	return 0;
}
