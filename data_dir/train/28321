//~In The Name Of Allah~//
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <iomanip>
#include <math.h>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <string.h>
#include <sstream>
#include <fstream>
#include <functional>
#include <stack>
#include <utility> 
#include <set>
#include <list>
#include <queue>
#include <bitset>
#include <time.h>

using namespace std;

#define read freopen("in.txt", "r", stdin)
#define write freopen("out.txt", "w", stdout)
#define all(_) _.begin(), _.end()
#define rall(_) _.rbegin(), _.rend()
#define rep(i, j) for (int i = 0; i < j; i++)
#define Rep(i, j, k) for (int i = j; i < k; i++)
#define siz(_) (int)_.size()
#define ll long long
#define endl '\n'
#define ff fflush(stdout)

const double PI = 2.0 * acos(0.0);
const int MOD = 1e9 + 7;
const int oo = MOD;

typedef pair<int, int> pii;

ll gcd(ll x, ll y) { return !y ? x : gcd(y, x%y); }

int main() {
	int n, k;
	cin >> n >> k;
	vector<pair<pii, int>> in(n);
	rep(i, n) {
		scanf("%d%d", &in[i].first.first, &in[i].first.second);
		in[i].second = i;
	}
	sort(all(in));
	int ans = 0, idx;
	set<pii> x, y;
	rep(i, n) {
		x.insert({ in[i].first.first, i });
		y.insert({ in[i].first.second, i });
		if (i + 1 >= k) {
			int l, r;
			l = (*x.rbegin()).first;
			r = (*y.begin()).first;
			if (r - l + 1 > ans) {
				ans = r - l + 1;
				idx = i;
			}
			x.erase({ in[(*y.begin()).second].first.first, (*y.begin()).second });
			y.erase(y.begin());
		}
	}
	cout << ans << endl;
	if (!ans) {
		rep(i, k)
			printf("%d ", i + 1);
		puts("");
		return 0;
	}
	x.clear(), y.clear();
	rep(i, n) {
		x.insert({ in[i].first.first, i });
		y.insert({ in[i].first.second, i });
		if (i + 1 >= k) {
			int l, r;
			l = (*x.rbegin()).first;
			r = (*y.begin()).first;
			if (i == idx) {
				for (auto it : x)
					printf("%d ", in[it.second].second + 1);
				puts("");
				return 0;
			}
			x.erase({ in[(*y.begin()).second].first.first, (*y.begin()).second });
			y.erase(y.begin());
		}
	}
	return 0;
}