# include <iostream>
# include <algorithm>

using namespace std;
const int N = 2e5 + 100;

int n, q, a[N], d[N], L[N], R[N];
int tree[4*N];

void build( int tl = 1, int tr = n, int td = 1 ){
    if( tl == tr )
        tree[td] = a[tl];
    else{
        int tm = ( tl + tr ) >> 1;
        build( tl, tm, td+td );
        build( tm+1, tr, td+td+1 );
        tree[td] = min( tree[td+td], tree[td+td+1] );
    }
}
int get( int l, int r, int tl = 1, int tr = n, int td = 1 ){
    if( tl > tr || l > r || l > tr || tl > r )
        return 1e9;
    if( l <= tl && tr <= r ){
        return tree[td];
    }
    else{
        int tm = ( tl + tr )>> 1;
        return min( get(l,r,tl,tm,td+td), get(l,r,tm+1,tr,td+td+1 ) );
    }
}

int main()
{
    cin >> n >> q;
    for( int i = 1; i <= n; i ++ ){
        cin >> a[i];
    }
    int mx = *max_element( a+1, a+n+1 );
    int mn = *min_element( a+1, a+n+1 );

    if( mx != q && mn != 0 ){
        cout << "NO";
        return 0;
    }
    else if( mx == 0 && mn == 0 ){
        cout << "YES" << endl;
        for( int i = 1; i <= n; i ++ ) cout << q << ' ';
    }

    else{
        if( mx != q ){
            for( int i = 1; i <= n; i ++ ){
                if( a[i] == 0 ){
                    a[i] = q;
                    break;
                }
            }
        }
        for( int i = 2; i <= n; i ++ )
            if( a[i] == 0 ) a[i] = a[i - 1];

        for( int i = n - 1; i >= 1; i -- )
            if( a[i] == 0 ) a[i] = a[i + 1];

        for( int i = 1; i <= n; i ++ ){
            if( L[a[i]] == 0 )
                L[a[i]] = i;
            R[a[i]] = i;
        }
        build();
        for( int i = 1; i <= q; i ++ ){
            if( L[i] && R[i] ){
                if( get( L[i], R[i]) != i){
                    cout << "NO";
                    return 0;
                }
            }
        }
        cout << "YES" << endl;
        for( int i = 1; i <= n; i ++ ){
            cout << a[i] << ' ';
        }
    }
    return 0;
}
