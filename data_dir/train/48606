/*input
9
88 22 83 14 95 91 98 53 11
3 24
7 -8
1 67
1 64
9 65
5 12
6 -80
3 8
*/
#include <iostream>
#include <cstdio>
#include <vector>
#include <functional>
#include <math.h>
#include <string.h>
#include <utility>
#include <algorithm>
#include <iomanip>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <stdlib.h>
#include <list>
#include <assert.h>
#include <time.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define ll long long
#define N 100005
template<class T>
void maximize(T &x, T y) {
	if (x < y) x = y;
}
template<class T>
void minimize(T &x, T y) {
	if (x > y) x = y;
}
vector<vector<pair<int, int> > > a(N);
ll dis[N];
ll node[N];
ll sad[N];
int n;

void loadtree() {
	for (int i = 1; i <= n ; i++) {
		cin >> node[i];
	}
	for (int i = 2; i <= n; i++) {
		int x, y;
		cin >> x >> y;
		a[x].push_back(mp(i, y));
		a[i].push_back(mp(x, y));
	}
}
multiset<ll> mst;
int ans = 0;
void dfs(int u, int p, bool status) {
	mst.insert(dis[u]);
	if (status == false)
		ans++;
	for (int i = 0; i < a[u].size(); i++) {
		int v = a[u][i].fi;
		if (v == p) continue;
		dis[v] = dis[u] + a[u][i].se;
		bool _flag = status;
		if ((mst.lower_bound(dis[v] - node[v])) != mst.begin() || status == false) _flag = false;
		//if (u == 1 && v == 4) cout << _flag << sp << dis[v] - node[v] << endl;
		dfs(v, u, _flag);
	}
	mst.erase(mst.find(dis[u]));
}
int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n;
	loadtree();
	dfs(1, 1, true);
	cout << ans << endl;
}