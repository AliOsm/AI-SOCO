#include <bits/stdc++.h>
using namespace std;

struct Node
{
	long long lazy, sum, maxv;
	Node *left, *right;
};

const int MAXN = 100005;
long long a[MAXN], k[MAXN];
Node *root;

Node *build(int l, int r)
{
	int mid = (l + r) >> 1;
	Node *ret = new Node();
	
	ret->lazy = LLONG_MAX;
	if(l == r)
		ret->sum = ret->maxv = a[r], ret->left = ret->right = NULL;
	else
		ret->left = build(l, mid), ret->right = build(mid + 1, r),
		ret->sum = ret->left->sum + ret->right->sum,
		ret->maxv = ret->right->maxv;

	return ret;
}

void updateLazy(Node *u, int l, int r)
{
	if(u->lazy != LLONG_MAX)
	{
		u->sum = (r - l + 1) * u->lazy;
		u->maxv = u->lazy;
		if(l < r)
			u->left->lazy = u->right->lazy = u->lazy;
		u->lazy = LLONG_MAX;
	}

	return;
}

long long query(Node *u, int l, int r, int ql, int qr)
{
	int mid = (l + r) >> 1;

	updateLazy(u, l, r);	
	if(l == ql && r == qr)
		return u->sum;
	else if(qr <= mid)
		return query(u->left, l, mid, ql, qr);
	else if(ql > mid)
		return query(u->right, mid + 1, r, ql, qr);
	else
		return query(u->left, l, mid, ql, mid) + query(u->right, mid + 1, r, mid + 1, qr);

	return 0;
}

int findmax(Node *u, int l, int r, long long maxv)
{
	int mid = (l + r) >> 1;

	updateLazy(u, l, r);
	if(u->maxv < maxv)
		return r;
	else if(l == r)
		return r - 1;
	else
	{
		int lpos = findmax(u->left, l, mid, maxv);
		if(lpos < mid)
			return lpos;
		else
			return findmax(u->right, mid + 1, r, maxv);
	}
	
	return 0;
}

void update(Node *u, int l, int r, int ql, int qr, long long val)
{
	int mid = (l + r) >> 1;

	updateLazy(u, l, r);
	if(l == ql && r == qr)
		u->lazy = val, updateLazy(u, l, r);
	else if(qr <= mid)
		update(u->left, l, mid, ql, qr, val);
	else if(ql > mid)
		update(u->right, mid + 1, r, ql, qr, val);
	else
		update(u->left, l, mid, ql, mid, val), update(u->right, mid + 1, r, mid + 1, qr, val);
	
	if(l < r)
	{
		updateLazy(u->left, l, mid);
		updateLazy(u->right, mid + 1, r);
		u->sum = u->left->sum + u->right->sum;
		u->maxv = u->right->maxv;
	}

	return;
}

int main()
{
	int n, qn;
	char t[5];

	scanf("%d", &n);
	for(int i = 0; i < n; ++i)
		scanf("%lld", &a[i]);
	for(int i = 0; i < n - 1; ++i)
		scanf("%lld", &k[i]), k[i] += (i > 0 ? k[i- 1] : 0);
	for(int i = 0; i < n; ++i)
		a[i] -= (i > 0 ? k[i - 1] : 0);
	for(int i = 1; i < n; ++i)
		k[i] += k[i - 1];

	root = build(0, n - 1);
	scanf("%d", &qn);
	for(int qi = 0, x, y; qi < qn; ++qi)
	{
		scanf("%s%d%d", t, &x, &y);
		if(t[0] == 's')
			printf("%lld\n", query(root, 0, n - 1, x - 1, y - 1) + (y > 1 ? k[y - 2] : 0) - (x > 2 ? k[x - 3] : 0));
		else
		{
			long long x0 = query(root, 0, n - 1, x - 1, x - 1);
			int idx = findmax(root, 0, n - 1, x0 + y);
			
			if(y > 0)
				update(root, 0, n - 1, x - 1, idx, x0 + y);
		}
	}

	return 0;
}
