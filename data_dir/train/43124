#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); }
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

int main()
{
    int n, m;
    cin >> n >> m;
    vector <int> v(n);
    GET(v, n);
    vector <int> odd;
    vector <int> even;
    FOR (i, 0, n) {
        if (v[i] % 2) {
            odd.push_back(v[i]);
        } else {
            even.push_back(v[i]);
        }
    }
    sort(IT(odd));
    odd.resize(unique(IT(odd)) - odd.begin());
    reverse(IT(odd));
    sort(IT(even));
    even.resize(unique(IT(even)) - even.begin());
    reverse(IT(even));
    int cut_odd = 0;
    int cut_even = 0;
    if (odd.size() > n / 2) {
        cut_odd = odd[n / 2 - 1];
    }
    if (even.size() > n / 2) {
        cut_even = even[n / 2 - 1];
    }
    vector <int> ok(n);
    set <int> used;
    int odd_need = n / 2;
    int even_need = n / 2;
    FOR (i, 0, n) {
        if (v[i] % 2 && v[i] >= cut_odd && used.find(v[i]) == used.end()) {
            ok[i] = 1;
            --odd_need;
        }
        if (v[i] % 2 == 0 && v[i] >= cut_even && used.find(v[i]) == used.end()) {
            ok[i] = 1;
            --even_need;
        }
        used.insert(v[i]);
    }
    int cnt = 1;
    FOR (i, 0, n) {
        if (!ok[i]) {
            while (used.find(cnt) != used.end() || (cnt % 2 == 0 && !even_need) || (cnt % 2 && !odd_need)) {
                ++cnt;
            }
            if (cnt > m) {
                cout << -1;
                return 0;
            }
            v[i] = cnt;
            if (cnt % 2) {
                --odd_need;
            } else {
                --even_need;
            }
            ++cnt;
        }
    }
    cout << count(IT(ok), 0) << endl;
    PRINT(v, n);
    return 0;
}
