#include<bits/stdc++.h>
using namespace std;
int a,s,d[100002][2],f[100002],g,h,j,k,l,i,n,m;
vector<int> v[100002];
struct tre{
    int shep;
    tre *L;
    tre *R;
    tre(){
        shep=0;
        L=NULL;
        R=NULL;
    }
};
void dfs(int idx,int par,int lv){//cout<<"#";
        if(idx==1);
        else{
            d[idx][0]=k;
            f[k]++;
            d[idx][1]=lv;
        }
    for(vector<int>::iterator it=v[idx].begin();it!=v[idx].end();it++){
        if(*it==par) continue;
        if(idx==1) k++;
        dfs(*it,idx,lv+1);
    }
    return;
}
tre *root,*rt[100002];
/*
void shd(tre *it,int val){
    if(!it->L) it->L=new tre();
    if(!it->R) it->R=new tre();
    it->L->shep+=it->shep;
    it->R->shep+=it->shep;
    it->val+=it->shep*val;
    it->shep=0;
    return;
}
*/

void add(tre *&it,int l,int r,int lf,int rg,int val){//cout<<"--->"<<l<<" "<<r<<" "<<lf<<" "<<rg<<" "<<val<<endl;
    if(!it) it=new tre();
    if(l>=rg || r<=lf) return;
    if(l>=lf && r<=rg) {it->shep+=val;return;}
    add(it->L,l,(l+r)/2,lf,rg,val);
    add(it->R,(l+r)/2,r,lf,rg,val);
    return;
}

int sum(tre *&it,int l,int r,int idx){//cout<<"O";
    if(!it) return 0;//cout<<"-->"<<l<<" "<<r<<idx<<" "<<it->shep<<endl;
    if(l>idx || r<=idx) return 0;
    if(l+1==r) return it->shep;
    return sum(it->L,l,(l+r)/2,idx)+sum(it->R,(l+r)/2,r,idx)+it->shep;
}

main(){
    cin>>n>>m;
    for(i=0;i<n-1;i++){
        scanf("%d%d",&a,&s);
        v[a].push_back(s);
        v[s].push_back(a);
    }
    dfs(1,0,0);
    for(i=0;i<m;i++){
        scanf("%d",&a);
        if(a){
            scanf("%d",&s);
            if(s==1) cout<<l<<endl; else
            printf("%d\n",sum(root,1,n,d[s][1])+sum(rt[d[s][0]],1,f[d[s][0]]+1,d[s][1]));
        }

        else{
            scanf("%d%d%d",&a,&s,&j);
            int tmp=0;
            if(j>=d[a][1]){tmp=1;
                l+=s;
                if(j-d[a][1])add(root,1,n,1,j-d[a][1]+1,s);

            }//cout<<"*"<<f[d[a][0]]<<"*";
            add(rt[d[a][0]],1,f[d[a][0]]+1,abs(j-d[a][1])+tmp,min(f[d[a][0]],d[a][1]+j)+1,s);
        }
    }
}
