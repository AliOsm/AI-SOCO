#include <bits/stdc++.h>
#define endl '\n'

//#pragma GCC optimize ("O3")
//#pragma GCC target ("sse4")

#define SZ(x) ((int)x.size())
#define ALL(V) V.begin(), V.end()
#define L_B lower_bound
#define U_B upper_bound
#define pb push_back

using namespace std;
template<class T, class T2> inline int chkmax(T &x, const T2 &y) { return x < y ? x = y, 1 : 0; }
template<class T, class T2> inline int chkmin(T &x, const T2 &y) { return x > y ? x = y, 1 : 0; }
const int MAXN = (1 << 20);
const int MAXLOG = 20;

struct suffix_automaton
{
	map<char, int> to[MAXN];
	int len[MAXN], link[MAXN];
	int last, psz = 0;

	void add_letter(char c)
	{
		int p = last, cl, q;
		if(to[p].count(c))
		{
			q = to[p][c];
			if(len[q] == len[p] + 1)
			{
				last = q;
				return;
			}

			cl = psz++;
			len[cl] = len[p] + 1;
			to[cl] = to[q];
			link[cl] = link[q];
			link[q] = cl;
			last = cl;

			for(; to[p][c] == q; p = link[p])
				to[p][c] = cl;

			return;
		}

		last = psz++;
		len[last] = len[p] + 1;

		for(; to[p][c] == 0; p = link[p])
			to[p][c] = last;

		if(to[p][c] == last) 
		{
			link[last] = p;
			return;
		}

		q = to[p][c];
		if(len[q] == len[p] + 1)
		{
			link[last] = q;
			return;
		}

		cl = psz++;
		len[cl] = len[p] + 1;
		to[cl] = to[q];
		link[cl] = link[q];
		link[q] = cl;
		link[last] = cl;

		for(; to[p][c] == q; p = link[p])
			to[p][c] = cl;
	}

	void clear()
	{
		for(int i = 0; i < psz; i++)
			len[i] = 0, link[i] = 0, to[i].clear();
		psz = 1;
		last = 0;
	}

	void init(string s)
	{
		clear();
		for(int i = 0; i < (int)s.size(); i++)
			add_letter(s[i]);
	}

	suffix_automaton() {psz = 0; clear();}
};

int n, q;
string s;

void read()
{
	cin >> n >> q >> s;
}

suffix_automaton sa;

int ver[MAXN];

vector<int> G[MAXN];
int d[MAXN], st[MAXN], en[MAXN], dfs_time = 0;
int par[MAXN][MAXLOG], vertex[MAXN];

void dfs_lca(int u, int de = 0)
{
	d[u] = de;
	st[u] = ++dfs_time;
	vertex[dfs_time] = u;
	for(int i = 1; i < MAXLOG; i++)
		par[u][i] = par[par[u][i - 1]][i - 1];

	for(int v: G[u])
		if(v != par[u][0])
		{
			par[v][0] = u;
			dfs_lca(v, de + 1);
		}

	en[u] = dfs_time;
}

inline bool upper(int u, int v) { return st[u] <= st[v] && en[v] <= en[u]; }

int lca(int u, int v)
{
	if(upper(u, v)) return u;
	if(upper(v, u)) return v;

	int a = u;
	for(int i = MAXLOG - 1; i >= 0; i--)
		if(!upper(par[a][i], v))
			a = par[a][i];

	return par[a][0];
}

void lca_precompute(int root)
{
	for(int i = 0; i < MAXLOG; i++)
		par[root][i] = root;

	dfs_time = 0;
	dfs_lca(root);
}

vector<int> vg[MAXN];
int mstack[MAXN], msize;

bool cmp(int u, int v) { return st[u] < st[v]; }

int build_tree(vector<int> vec)
{
	if(vec.empty()) { vg[0].clear(); return -1; }

	sort(vec.begin(), vec.end(), cmp);
	vec.erase(unique(vec.begin(), vec.end()), vec.end());

	int st_sz = vec.size();
	for(int i = 0; i + 1 < st_sz; i++)
		vec.push_back(lca(vec[i], vec[i + 1]));

	sort(vec.begin(), vec.end(), cmp);
	vec.erase(unique(vec.begin(), vec.end()), vec.end());

	for(int vertex: vec)
		vg[vertex].clear();

	msize = 0;
	mstack[msize++] = vec[0];

	for(int i = 1; i < (int)vec.size(); i++)
	{
		while(!upper(mstack[msize - 1], vec[i]))
		{
			vg[mstack[msize - 2]].push_back(mstack[msize - 1]);
			msize--;    
		}
		
		mstack[msize++] = vec[i];
	}

	for(int i = 0; i < msize - 1; i++)
		vg[mstack[i]].push_back(mstack[i + 1]);
	
	return mstack[0];
}

int flag[MAXN][2], dp[MAXN][2];
int64_t answer;

void dfs(int u)
{
	dp[u][0] = flag[u][0];
	dp[u][1] = flag[u][1];
	
	answer += dp[u][0] * 1ll * dp[u][1] * 1ll * sa.len[u];

	for(int v: vg[u])
	{
		dfs(v);
		answer += sa.len[u] * 1ll * dp[u][0] * 1ll * dp[v][1];
		answer += sa.len[u] * 1ll * dp[u][1] * 1ll * dp[v][0];
		dp[u][0] += dp[v][0];
		dp[u][1] += dp[v][1];
	}
}

void solve()
{
	reverse(ALL(s));

	sa.clear();
	int pos = n;
	for(char c: s)
	{
		sa.add_letter(c);
		ver[pos] = sa.last; 
		pos--;
	}

	for(int i = 1; i < sa.psz; i++)
		G[sa.link[i]].pb(i);

	lca_precompute(0);

	while(q--)
	{
		int x, y;
		cin >> x >> y;
		vector<int> a, b;
		
		while(x--)
		{
			int p;
			cin >> p;
			p = ver[p];
			a.pb(p);
			flag[p][0] = 1;
		}

		while(y--)
		{
			int p;
			cin >> p;
			p = ver[p];
			b.pb(p);
			flag[p][1] = 1;
		}

		vector<int> qq = a;
		for(int v: b) qq.pb(v);

		int root = build_tree(qq);

		answer = 0;
		dfs(root);
		cout << answer << endl;

		for(int v: a) flag[v][0] = 0;
		for(int v: b) flag[v][1] = 0;
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}

