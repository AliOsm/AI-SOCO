#include <bits/stdc++.h>

using namespace std;

#define loop(i, n) for(int i = 0;i < int(n);i++)
#define rloop(i, n) for(int i = int(n);i >= 0;i--)
#define range(i, a, b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1, v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1, v2, v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1, v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1, v2, v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3)
#define endl '\n'

typedef vector<int> vi;
typedef vector<pair<int, int> > vii;
typedef long long ll;
typedef pair<int, int> pii;

const int M = 1e6 + 3;
const int N = 4 * M + 5;
int mn[N], mx[N], lazy[N];
char text[N];
int n;

void upd(int id, int l, int r, int x) {
    lazy[id] += x;
    mn[id] += x;
    mx[id] += x;

}


void shift(int id, int l, int r) {//pass update information to the children
    int mid = (l + r) / 2;
    upd(id * 2, l, mid, lazy[id]);
    upd(id * 2 + 1, mid, r, lazy[id]);
    lazy[id] = 0;// passing is done
}


void increase(int x, int y, int v, int id = 1, int l = 0, int r = M) {
    if (x >= r or l >= y) return;
    if (x <= l && r <= y) {
        upd(id, l, r, v);
        return;
    }
    shift(id, l, r);
    int mid = (l + r) / 2;
    increase(x, y, v, id * 2, l, mid);
    increase(x, y, v, id * 2 + 1, mid, r);
    mn[id] = min(mn[id * 2], mn[id * 2 + 1]);
    mx[id] = max(mx[id * 2], mx[id * 2 + 1]);
}

int sum(int x, int y, int id = 1, int l = 0, int r = n) {
    if (x >= r or l >= y) return 0;
    if (x <= l && r <= y) return mx[id];
    shift(id, l, r);
    int mid = (l + r) / 2;
    return sum(x, y, id * 2, l, mid) +
           sum(x, y, id * 2 + 1, mid, r);
}


int main() {

#ifndef ONLINE_JUDGE
    //freopen("in.in", "r", stdin);
    //freopen("out.in", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int n;
    string str;
    cin >> n >> str;
    int idx = 0, best = 0 , b = 0;
    loop(i, n) {
        if (str[i] == 'R') {
            idx = min(idx + 1, best + 1);
        } else if (str[i] == 'L') {
            idx = max(idx - 1, 0);
        } else {
            //remove
            if (text[idx] == '(') {
                b--;
                increase(idx, M, -1);
            } else if (text[idx] == ')') {
                b++;
                increase(idx, M, 1);
            }

            //add
            if (str[i] == '(') {
                b++;
                increase(idx, M, 1);
            } else if (str[i] == ')') {
                b--;
                increase(idx, M, -1);
            }

            text[idx] = str[i];
        }

        best = max(best, idx);
        if (mn[1] != 0 || b != 0) {
            cout << -1 << " ";
        } else {
            cout << mx[1] << " ";
        }
    }


    return 0;
}