/// I won't go back on my words ... that's my ninja way !!!
#include<bits/stdc++.h>
using namespace std;
const int N = 1e5+5;
int n ,s[N] ,q ,l ,r ;
int spars[20][N] ,LG[N] ;
map<int,vector<int>> mp ;
void build(){
    LG[0] = -1 ;
    for(int i=0;i<n;++i){
        LG[i+1] = LG[i] + !(i&(i+1)) ;
        spars[0][i] = s[i] ;
    }
    for(int lg = 1 ;(1<<lg)<=n ;++lg){
        for(int i =0;i+(1<<lg)<=n;++i){
            int a = spars[lg-1][i] ;
            int b = spars[lg-1][i+(1<<(lg-1))] ;
            spars[lg][i] = __gcd(a,b);
        }
    }
}
int gcd(int s,int e){
    if(s>e)swap(s,e) ;
    int siz = e - s + 1 ;
    int lg = LG[siz] ;
    int a = spars[lg][s] ;
    int b = spars[lg][e-(1<<lg)+1] ;
    return __gcd(a,b) ;
}

int main(){
    scanf("%d",&n);
    for(int i=0;i<n;++i){
        scanf("%d",s+i);
        mp[s[i]].push_back(i);
    }
    build();
    scanf("%d",&q);
    while(q--){
        scanf("%d%d",&l,&r);
        int g = gcd(--l,--r);
        if(!mp.count(g)){
            printf("%d\n",r-l+1);
            continue;
        }
        int x = upper_bound(mp[g].begin(),mp[g].end(),r) - lower_bound(mp[g].begin(),mp[g].end(),l);
        printf("%d\n",r-l+1-x);
    }
    return 0;
}
