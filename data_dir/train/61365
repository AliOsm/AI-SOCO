#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>
#include <complex>
#include <cassert>
#include <regex>
#include <random>

#define ll long long
#define ld long double
#define ull unsigned ll
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vector<int>>
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const int  Inf = 2 * 1000 * 1000 * 1000;
ll LINF = (ll)4e18;
using namespace std;
//ll mod = 1e9 + 7;
#define M_PI       3.14159265358979323846   // pi

struct point {
	int x, y;
};

char a[1005][1005];
int num[1005][1005];
int used[1005][1005];

int n, m, k;


bool ok(int x, int y) {
	return (x >= 1 && x <= n) && (y >= 1 && y <= m);
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("sum.in", "r", stdin);
	//freopen("sum.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cin >> n >> m >> k;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			cin >> a[i][j];
			if (a[i][j] == '*') used[i][j] = 1;
		}
	}

	vector<int>ans;

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			if (used[i][j]) continue;
			int cur = 0;

			queue<point>q;
			used[i][j] = 1;
			q.push({ i, j });

			while (!q.empty()) {
				auto v = q.front();
				q.pop();
				num[v.x][v.y] = ans.size();

				for (int x = v.x - 1; x <= v.x + 1; x++) {
					for (int y = v.y - 1; y <= v.y + 1; y++) {
						if (x != v.x && y != v.y) continue;
						if (x == v.x && y == v.y) continue;
						if (!ok(x, y)) continue;
						if (a[x][y] == '*') {
							cur++;
							continue;
						}
						if (used[x][y]) continue;
						used[x][y] = 1;
						q.push({ x, y });
					} 
				}
			}
			ans.push_back(cur);
		}
	}
	for (int i = 0; i < k; i++) {
		int x, y;
		cin >> x >> y;
		int id = num[x][y];
		cout << ans[id] << '\n';
	}
	return 0;
}