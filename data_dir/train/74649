#include<bits/stdc++.h>

using namespace std;

typedef long long ll;

struct DSU
{
    int root[100005];
    int cnt[100005];
    int enemy[100005];
    DSU()
    {
        for(int i=0; i<100005; i++)
        {
            enemy[i]=-1;
            cnt[i]=1;
            root[i]=i;
        }
    }
    int getroot(int i)
    {
        if(i==-1)
            return 0;
        if(root[i]==i)
            return i;
        return root[i]=getroot(root[i]);
    }
    void mer(int x,int y)
    {
        if(x!=-1 && y!=-1)
        {
            int p1=getroot(x);
            int p2=getroot(y);
            if(cnt[p1]>cnt[p2])
                swap(p1,p2);
            cnt[p2]+=cnt[p1];
            root[p1]=p2;
        }
    }
    bool same(int x,int y)
    {
        if(x==-1 || y==-1)
            return 0;
        if(getroot(x)==getroot(y))
            return 1;
        return 0;
    }

};


int main()
{
    int n,m,q;
    DSU d;
    cin>>n>>m>>q;
    map<string,int> mp;
    for(int i=0; i<n; i++)
    {
        string s;
        cin>>s;
        mp[s]=i+1;
    }
    for(int i=0; i<m; i++)
    {
        int t,x,y;
        string a,b;
        cin>>t>>a>>b;
        x=mp[a];
        x=d.getroot(x);
        y=mp[b];
        y=d.getroot(y);
        if(t==1)
        {
            if(d.same(x,d.enemy[y]) || d.same(y,d.enemy[x]))
                cout<<"NO"<<endl;
            else
            {
                cout<<"YES"<<endl;
                d.mer(x,y);
                if(d.enemy[x]!=-1 && d.enemy[y]!=-1)
                d.mer(d.enemy[x],d.enemy[y]);
                else if(d.enemy[x]!=-1)
                    d.enemy[y]=d.enemy[x];
                else
                    d.enemy[x]=d.enemy[y];
            }
        }
        else
        {
            if(d.same(x,y))
                cout<<"NO"<<endl;
            else
            {
                cout<<"YES"<<endl;
                if(d.enemy[x]==-1)
                    d.enemy[x]=y;
                if(d.enemy[y]==-1)
                    d.enemy[y]=x;
                d.mer(x,d.enemy[y]);
                d.mer(y,d.enemy[x]);
            }
        }
    }
    while(q--)
    {
        int x,y;
        string a,b;
        cin>>a>>b;
        x=mp[a];
        x=d.getroot(x);
        y=mp[b];
        y=d.getroot(y);
        if(d.same(x,y))
            cout<<1<<endl;
        else if(d.same(d.enemy[x],y) || d.same(d.enemy[y],x))
            cout<<2<<endl;
        else
            cout<<3<<endl;
    }
    return 0;
}
