#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265359
#endif // M_PI
#define endl "\n"
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
struct Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;

int main()
{
    int n, k;
    cin >> n >> k;
    vector <int> a(n);
    GET(a, n);
    sort(IT(a));
    for (auto &i: a) {
        --i;
    }
    vector <vector <vector <LL>>> dp(2, vector <vector <LL>> (n + 1, vector <LL> (k + 1)));
    dp[0][0][0] = 1;
    dp[0][1][0] = 1;
    FOR (i, 1, n) {
        FOR (j, 0, n + 1) {
            FOR (l, 0, k + 1) {
                dp[i & 1][j][l] = 0;
            }
        }
        FOR (j, 0, n + 1) {
            FOR (l, 0, k + 1) {
                if (l + (a[i] - a[i - 1]) * j <= k) {
                    if (j - 1 >= 0) {
                        dp[i & 1][j - 1][l + (a[i] - a[i - 1]) * j] += j * dp[!(i & 1)][j][l];// )
                        dp[i & 1][j - 1][l + (a[i] - a[i - 1]) * j] %= MOD;
                        dp[i & 1][j][l + (a[i] - a[i - 1]) * j] += j * dp[!(i & 1)][j][l];//
                        dp[i & 1][j][l + (a[i] - a[i - 1]) * j] %= MOD;//
                    }
                    dp[i & 1][j][l + (a[i] - a[i - 1]) * j] += dp[!(i & 1)][j][l];// ()
                    dp[i & 1][j][l + (a[i] - a[i - 1]) * j] %= MOD;
                    if (j + 1 < n + 1) {
                        dp[i & 1][j + 1][l + (a[i] - a[i - 1]) * j] += dp[!(i & 1)][j][l];// (
                        dp[i & 1][j + 1][l + (a[i] - a[i - 1]) * j] %= MOD;
                     }
                }
            }
        }
    }
    LL res = 0;
    FOR (i, 0, k + 1) {
        res += dp[!(n & 1)][0][i];
    }
    res %= MOD;
    cout << res;
}
