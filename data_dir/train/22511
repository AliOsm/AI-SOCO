#include<bits/stdc++.h>
using namespace std;

int tin[1000000];
int timer;
int up[1000000];
vector<pair<int,int> >v1[1000000],v[1000000];
int colors,color[1000000];
int x[1000000];
int y[1000000];
int z[1000000];
int c[1000000];
int n,m;
int s,t;
set<pair<int,int> >edges;

void dfs(int x,int p)
{
    tin[x]=++timer;
    up[x]=tin[x];
    for(int i=0;i<v[x].size();i++)
    {
        int to=v[x][i].first;
        if(to==p)
            continue;
        if(tin[to])
            up[x]=min(up[x],tin[to]);
        else
        {
            dfs(to,x);
            up[x]=min(up[x],up[to]);
            if(up[to]>tin[x])
            {
                edges.insert(make_pair(x,to));
            }
        }
    }
}

void dfs2(int x,int y)
{
    color[x]=y;
    for(int i=0;i<v[x].size();i++)
    {
        int to=v[x][i].first;
        if(color[to])
            continue;
        if(edges.count(make_pair(x,to)))
            dfs2(to,++colors);
        else
            dfs2(to,y);
    }
}

void dfs3(int x,int k,int p)
{
    if(c[x])
        k=1;
    if(x==color[t])
    {
        if(k)
        {
            cout<<"YES\n";
            exit(0);
        }
        cout<<"NO\n";
        exit(0);
    }
    for(int i=0;i<v1[x].size();i++)
    {
        int to=v1[x][i].first;
        if(to==p)
            continue;
        dfs3(to,k|v1[x][i].second,x);
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin>>n>>m;
    for(int i=1;i<=m;i++)
    {
        cin>>x[i]>>y[i]>>z[i];
        v[x[i]].push_back(make_pair(y[i],z[i]));
        v[y[i]].push_back(make_pair(x[i],z[i]));
    }
    cin>>s>>t;
    dfs(s,0);
    dfs2(s,++colors);
    for(int i=1;i<=m;i++)
    {
        if(color[x[i]]==color[y[i]])
        {
            if(z[i])
                c[color[x[i]]]=1;
        }else
        {
            v1[color[x[i]]].push_back(make_pair(color[y[i]],z[i]));
            v1[color[y[i]]].push_back(make_pair(color[x[i]],z[i]));
        }
    }
    dfs3(color[s],0,0);
}
