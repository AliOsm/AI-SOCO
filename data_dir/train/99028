#pragma GCC target("avx2")
#pragma GCC optimize("O3")
   
#include <x86intrin.h>
#include <bits/stdc++.h>   
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;

template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair                                     
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)3e5 + 123;
const ll inf = (ll)1e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, sx, sy, X, Y, ans = 0;
pii x[N];

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> n >> sx >> sy;
   for (int i = 1; i <= n; i ++) cin >> x[i].F >> x[i].S;
   sort (x + 1, x + n + 1);
   for (int i = 1; i <= 4; i ++) {
      int new_x = sx + dx[i];
      int new_y = sy + dy[i];
      if (new_x < 0 || new_y < 0 || new_x > 1000000000 || new_y > 1000000000) continue;
      int res = 0;
      for (int j = 1; j <= n; j ++) {
         if (abs (sx - x[j].F) + abs (sy - x[j].S) > abs (new_x - x[j].F) + abs (new_y - x[j].S))
            res ++;      
      }
      if (res > ans) {
         ans = res;
         X = new_x, Y = new_y;
      }
   }
   cout << ans << endl;
   cout << X << ' ' << Y;
}

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
   //cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
                          