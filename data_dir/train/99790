#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

map < pair < int , int > , int > isOkay;
vector < int > edges[100009];
int m, n, x, y, z;

vector < int > ans;

int sub_tree[300000];

int dfs(int node, int par)
{
    //cout << node << ' ' << isEverythingOkay << endl;

    if(edges[node].size() == 1 && edges[node][0] == par){
        return sub_tree[node] = 0;
    }

    int p = 0;

    for(int i = 0; i < edges[node].size(); i++){

        int x = edges[node][i];
        if(x == par) continue;
        int z = isOkay[make_pair(node, x)];

        if(z == 0) p += dfs(x, node) + 1;
        else p += dfs(x, node);

    }

    return sub_tree[node] = p;

}

void dfs_2(int node, int par, int isEveryThingOkay)
{

    if(sub_tree[node] == 0){
        //cout << node << ' ' << isEveryThingOkay << endl;
        if(!isEveryThingOkay) return;
        else{
            ans.push_back(node);
            return;
        }
    }

    for(int i = 0; i < edges[node].size(); i++){
        int x = edges[node][i];

        if(x == par) continue;

        int z = isOkay[make_pair(node, x)];

        if(z == 1 && sub_tree[x] == 0) continue;

        dfs_2(x, node, 1 - z);
    }

}
int main()
{
    cin >> n;

    for(int i = 1; i < n; i++){
        cin >> x >> y >> z;

        edges[x].push_back(y);
        edges[y].push_back(x);

        isOkay[make_pair(x, y)] = 2 - z;
        isOkay[make_pair(y, x)] = 2 - z;

    }

    edges[1].push_back(-1);

    dfs(1, -1);


    dfs_2(1, -1, 0);

    cout << ans.size() << endl;

    for(int i = 0; i < ans.size(); i++) printf("%d ", ans[i]);


    return 0;
}
