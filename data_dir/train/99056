#include <bits/stdc++.h>
using namespace std;

int n, m;
bool mat[1010][1010];
bool my_mat[1010][1010];
int xmin = 1e9, xmax, ymin = 1e9, ymax;

bool check()
{
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= m; j++)
            if (my_mat[i][j] != mat[i][j])
                return false;
    return true;
}

int drept()
{
    for (int i = xmin; i <= xmax; i++)
        for (int j = ymin; j <= ymax; j++)
            if (!mat[i][j])
                return 2e9;
    return min(xmax - xmin + 1, ymax - ymin + 1);
}

int down()
{ /// first move is down
    if (!mat[xmin][ymin] || !mat[xmax][ymax])
        return 2e9;

    int x1 = xmin, y1 = ymin, x2 = xmin, y2 = ymin;
    while (mat[x1 + 1][y1])
        x1++;
    while (mat[x2][y2 + 1])
        y2++;
    while (!mat[x2][y2 + 1]) {
        if (x2 > xmax)
            return 2e9;
        x2++;
    }
    int dimx = x1 - x2 + 1, dimy = y2 - y1 + 1;

    for (int i = 0; i < dimx; i++)
        for (int j = 0; j < dimy; j++)
            my_mat[i + xmin][j + ymin] = 1;

    for (int i = xmin, j = ymin; i != xmax - dimx + 1 || j != ymax - dimy + 1; ) {
        if (mat[i + dimx][j]) {
            for (int q = 0; q < dimy; q++)
                my_mat[i + dimx][j + q] = 1;
            i++;
        }
        else {
            if (!mat[i][j + dimy])
                return 2e9;
            for (int q = 0; q < dimx; q++)
                my_mat[i + q][j + dimy] = 1;
            j++;
        }
    }
    if (!check())
        return 2e9;
    return dimx * dimy;
}
int left()
{ /// first move is down
    if (!mat[xmin][ymin] || !mat[xmax][ymax])
        return 2e9;

    int x1 = xmin, y1 = ymin, x2 = xmin, y2 = ymin;
    while (mat[x1 + 1][y1])
        x1++;
    while (!mat[x1 + 1][y1]) {
        if (y1 > ymax)
            return 2e9;
        y1++;
    }
    while (mat[x2][y2 + 1])
        y2++;

    int dimx = x1 - x2 + 1, dimy = y2 - y1 + 1;

    for (int i = 0; i < dimx; i++)
        for (int j = 0; j < dimy; j++)
            my_mat[i + xmin][j + ymin] = 1;

    for (int i = xmin, j = ymin; i != xmax - dimx + 1 || j != ymax - dimy + 1; ) {
        if (mat[i + dimx][j]) {
            for (int q = 0; q < dimy; q++)
                my_mat[i + dimx][j + q] = 1;
            i++;
        }
        else {
            if (!mat[i][j + dimy])
                return 2e9;
            for (int q = 0; q < dimx; q++)
                my_mat[i + q][j + dimy] = 1;
            j++;
        }
    }
    if (!check())
        return 2e9;
    return dimx * dimy;
}

int main()
{/*
    cin >> n >> m;
    string s;
    for (int i = 1; i <= n; i++) {
        cin >> s;
        for (int j = 1; j <= m; j++) {
            mat[i][j] = s[j - 1] == 'X';
            if (mat[i][j])
                xmin = min(xmin, i), xmax = i, ymin = min(ymin, j), ymax = max(ymax, j);
        }
    }

    if (xmin == 1e9) {
        cout << -1;
        return 0;
    }

    int minim = 1e9;

    minim = min(minim, drept());
    minim = min(minim, down());
    minim = min(minim, left());

    if (minim == 1e9)
        cout << -1 << '\n';
    else
        cout << minim << '\n';
*/
    int n, m;
    cin >> n >> m;
    n--, m--;

    string a, b;
    cin >> a >> b;
    if (a[0] == '<' && (a[n] != '>' || b[0] != 'v' || b[m] != '^'))
        cout << "NO\n";
    else if (a[0] == '>' && (a[n] != '<' || b[0] != '^' || b[m] != 'v'))
        cout << "NO\n";
    else
        cout << "YES\n";
    return 0;
}
