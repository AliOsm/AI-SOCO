#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)
#define int ll
using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/************************************** MAIN PROGRAM ********************************************/
const int MAX = 1e5 + 1;
const int MOD = 1e9 + 7;

vector<int> primeFactors[MAX + 1];
vector<int> factors[MAX + 1];

void sieve() {
    /// FUCK YOU SEIVE OF ERATOSTHENES. YOU ARE SHITTIER THAN 10 POUNDS OF SHIT.
    for (ll i = 2; i <= MAX; ++i) {
        if (primeFactors[i].size()) continue;
        for (ll j = i; j <= MAX; j += i) {
            primeFactors[j].push_back(i);
        }
    }
    for (int i = 1; i <= MAX; ++i) {
        for (int j = i; j <= MAX; j += i) {
            factors[j].push_back(i);
        }
    }
}

/// count of numbers divisible by k in [1, m]
ll howMany(ll k, ll m) {
    return m / k;
}

/// count of numbers p in [1, m] such that GCD of (x, p) is y
/// count in [1, m / y] such that gcd of x / y and p is 1
ll magic(ll x, ll y, ll m) {
    vector<int> &factors = primeFactors[x / y];

    ll n = factors.size();
    ll total_union = 0;

    for (int mask = 0; mask < (1 << n); ++mask) {
        ll sz = 0;
        ll prod = 1;
        for (int i = 0; i < n; ++i) {
            if ((mask >> i) & 1) {
                sz++;
                prod *= factors[i];
            }
        }
       // DEBUG(sz, prod, howMany(prod, m / y))
        total_union += ((sz & 1) ? -1 : 1) * howMany(prod, m / y);
        total_union %= MOD;
    }
   // DEBUG(m / y, total_union)
    return total_union;
}

ll myPow(ll base, ll exp)
{
    ll result = 1;
    while (exp > 0) {
        if (exp & 1) result = result * base % MOD;
        base = base * base % MOD;
        exp >>= 1;
    }
    return result;
}

ll modInverse(ll a) {
    return myPow(a, MOD - 2);
}

main()
{
   // freopen("input.txt", "r", stdin);
    SPEED

    sieve();
    ll m;
    cin >> m;
    vector<int> dp(m + 1, 0);
    dp[1] = 0;

    for (int x = 2; x <= m; ++x) {
        ll sum = 0;
        ll k = 0;
        for (int y : factors[x]) {
            if (y == x) {
                k += magic(x, x, m);
                continue;
            }
            sum += magic(x, y, m) * dp[y] % MOD;
            sum %= MOD;
        }
        dp[x] = ((m + sum) % MOD) * modInverse(m - k) % MOD;
    }
    ll ans = 0;
    for (int x = 1; x <= m; ++x) {
        ans += dp[x];
        ans %= MOD;
    }
  //  DEBUG(dp)
    cout << (1 + ans * modInverse(m)) % MOD;
    return 0;
}
/************************************** END OF PROGRAM ******************************************/
/** Stuff you should look for:
 * int overflow, array bounds, over-counting
 * special cases (n=1?), set/unordered_set TLE, multi-set/set error
 * do something instead of nothing and stay organized
 */
