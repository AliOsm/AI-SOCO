
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <cstdio>
#include <random>
#include <chrono>
#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
#define mp make_pair
#define int long long
using namespace std;

const int INF = 2e9;
const int MOD = 1e9 + 7;
int MB = 65;

vector<vector<int>> a, mx1, mx2, g;
int ans = 0;
void dfs(int v, int p = -1) {
	for (int u : g[v]) {
		if (u != p) {
			dfs(u, v);
			for (int i = 0; i < a[u].size(); i++) {
				int index = -1;
				for (int j = 0; j < a[v].size(); j++) {
					if (a[u][i] == a[v][j]) {
						index = j;
						break;
					}
				}
				if (index == -1) continue;
				if (mx1[v][index] < mx1[u][i] + 1) {
					mx2[v][index] = mx1[v][index];
					mx1[v][index] = mx1[u][i] + 1;
				}
				else if (mx2[v][index] < mx1[u][i] + 1) {
					mx2[v][index] = mx1[u][i] + 1;
				}
			}
		}
	}

	for (int i = 0; i < a[v].size(); i++) {
		ans = max(ans, mx1[v][i] + mx2[v][i] + 1);
	}
}

void solve() {
	int n;
	cin >> n;
	a.resize(n);
	for (int i = 0; i < n; i++) {
		int x;
		cin >> x;
		int d = 2;
		while (d * d <= x) {
			if (x % d == 0) {
				a[i].pb(d);
				while (x % d == 0) x /= d;
			}
			d++;
		}
		if (x > 1) a[i].pb(x);
	}

	g.resize(n);
	for (int i = 0; i < n - 1; i++) {
		int v, u;
		cin >> v >> u;
		v--; u--;
		g[v].pb(u);
		g[u].pb(v);
	}

	mx1.resize(n);
	mx2.resize(n);
	for (int i = 0; i < n; i++) {
		mx1[i].resize(a[i].size());
		mx2[i].resize(a[i].size());
	}
	dfs(0);
	cout << ans;
}


signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}
