#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("sumsqr.in");ofstream out("sumsqr.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());

int a,k;
vec<vec<int>> l, inv, comp;
vec<int> us, ans, us1;
deque<int> d;

void dfs1(int v){
    us[v] = 1;
    for(int h : l[v]) if(!us[h]) dfs1(h);
    d.pb(v);
}

void dfs2(int v){
    us[v] = 1;
    comp.back().pb(v);
    for(int h : inv[v]) if(!us[h]) dfs2(h);
}

void checkAcyklic(){
    us = vec<int>(a);
    for(int q=0; q<a; q++) if(!us[q]) dfs1(q);
    us = vec<int>(a);
    for(int q=d.size()-1; q>=0; q--){
        if(!us[d[q]]){
            comp.pb(vec<int>());
            dfs2(d[q]);
        }
    }
    if(comp.size()!=a) cout<<-1, exit(0);
}

void XYEFS(int v){
    us[v] = 1;
    for(int h : l[v]){
        if(!us[h]){
            ans[h] = 0;
            XYEFS(h);
        }
    }
}

void XYEFS2(int v){
    us1[v] = 1;
    for(int h : inv[v]){
        if(!us1[h]){
            ans[h] = 0;
            XYEFS2(h);
        }
    }
}

int main() {
    fast;
    cin>>a>>k;
    l = vec<vec<int>>(a, vec<int>());
    inv = vec<vec<int>>(a, vec<int>());
    for(int q=0; q<k; q++){
        int x,y; cin>>x>>y; x--, y--;
        l[x].pb(y);
        inv[y].pb(x);
    }
    checkAcyklic();
    ans = vec<int>(a, -1);
    vec<char> o(a, 'E');
    int cnt= 0 ;
    us = vec<int>(a);
    us1 = vec<int>(a);
    for(int q=0; q<a; q++){
        if(ans[q]!=-1){
            XYEFS(q);
            XYEFS2(q);
            continue;
        }
        int fl = 1;
        for(int i : l[q]) fl &= i>q;
        for(int i : inv[q]) fl &= i>q;
        ans[q] = fl;
        if(fl){
            o[q] = 'A', cnt++;
        }
        XYEFS(q);
        XYEFS2(q);
    }
    cout<<cnt<<"\n";
    for(char u : o) cout<<u;
}