#include <cstdio>
#include <cstring>
#include <set>
#include <string>
#include <iostream>
#include <cmath>
#include <vector>
#include <map>
#include <stack>
#include <time.h>
#include <queue>
#include <cstdlib>
#include <algorithm>
using namespace std;
#define lowbit(x) ((x)&(-(x)))
#define sqr(x) ((x)*(x))
#define PB push_back
#define MP make_pair
#define Tr(it, x) for(typeof(x.begin()) it = x.begin(); it!=x.end();it++)
typedef unsigned long long ULL;
typedef long long lld;
typedef vector<int> VI;
typedef vector<string> VS;
typedef pair<int,int> PII;
#define SZ(x) x.size()
#define SORT(x) sort(s.begin(),s.end())
#define REP(i,n) for(int i=0;i<n;i++)
#define For(i,a,b) for(int i=a;i<b;i++)
#define CL(x) memset(x, 0, sizeof(x))
#define CLX(x, y) memset(x, y, sizeof(x))
template <class T>  T two(T x) {return 1<<x ;}
template <class T>  inline void Min(T &x, T y){if(y < x) x = y;}
template <class T>  inline void Max(T &x,T y){if(y > x) x = y;}
const int maxn = 200010;
const int mod = 1000000007;
const int inf  = ~0u>>2;
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
vector<PII> edge[10];
int du[10];
bool ve[110];
int fa[10];
int v[10];
int find(int x){return fa[x] == x ? x : fa[x] = find(fa[x]); }
vector<pair<int,char> > ans;
int Left[110];
void dfs(int u,int eid)
{
    //printf("eid = %d\n",eid);
    REP(i,du[u]) {
        if(!ve[edge[u][i].second]) {
            ve[edge[u][i].second] = true;
            dfs(edge[u][i].first,edge[u][i].second);
        }
    }
    if(eid!=-1) ans.PB(MP(eid+1 , u == Left[eid]?'-':'+'));
}
int main()
{
    int n , a , b; 
    int roots = 0;
    cin >> n;
    REP(i,n) 
    {
        scanf("%d%d",&a,&b);Left[i] = a;
        if(!v[a]) v[a] = 1,fa[a] = a,roots++;
        if(!v[b]) v[b] = 1,fa[b] = b,roots++;
        if(find(a)!=find(b)) {
            roots --;
            fa[find(a)] = find(b);
        }
        du[a] ++ ; du[b] ++;
        edge[a].PB(MP(b,i));
        edge[b].PB(MP(a,i));
    }
    int odd = 0;
    REP(i,7)    if(du[i]&1) odd ++;
    if(odd!=2 && odd!=0 || roots > 1){
        puts("No solution");
    } else {
        if(odd==2) {
            REP(i,7) if(du[i]&1) a = i;
        } else {
            REP(i,7) if(du[i]) a = i;
        }
    //  printf("a=%d\n",a);
        dfs(a,-1);
    }
    for(int i = ans.size()-1 ; i >= 0; i--) 
    {
        printf("%d %c\n",ans[i].first,ans[i].second);
    }
    return 0;
}