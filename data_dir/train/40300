#include <bits/stdc++.h>

#define pb push_back
#define pp pop_back
#define mp make_pair
#define ld long double
#define f first
#define s second
#define ll long long

using namespace std;

const int N = 111;

const int mod = 1e9 + 7;

void add(int &a, int b)
{
  a += b;
  if (a >= mod) a -= mod;
}

int sum(int a, int b)
{	
  add(a, b);
  return a;
}

int mult(int a, int b)
{
  return (1ll * a * b) % mod;
}

int n;

ll k, a[N];

struct matrix
{
  int n, m;
  int a[N][N];
  matrix(int _n = 0, int _m = 0)
  {
    n = _n;
    m = _m;
    memset(a, 0, sizeof a);
  }
};

matrix operator * (matrix a, matrix b)
{
  matrix c(a.n, b.m);
  for (int i = 1;i <= c.n;i++)
    for (int j = 1;j <= c.m;j++)
      for (int k = 1;k <= a.m;k++)
        add(c.a[i][j], mult(a.a[i][k], b.a[k][j]));
  return c;
}

matrix bp(matrix a, ll n)
{
  matrix ans(a.n, a.n);
  for (int i = 1;i <= a.n;i++) ans.a[i][i] = 1;

  while(n)
  {
    if (n & 1) ans = ans * a;
    a = a * a;
    n >>= 1;
  }
  return ans;
}

int main()
{
  ios_base::sync_with_stdio(0);
	
  clock_t start = clock();

  cin >> n >> k;
  for (int i = 1;i <= n;i++) cin >> a[i];

  matrix x(1, n);
  for (int i = 1;i <= n;i++) x.a[1][i] = 1;

  matrix y(n, n);
  for (int i = 1;i <= n;i++)
  {
    for (int j = 1;j <= n;j++)
    {
      int cnt = __builtin_popcountll(a[i] ^ a[j]);
      if (cnt % 3 == 0) y.a[j][i] = 1;
    }
  }

  x = x * bp(y, k - 1);

  int ans = 0;
  for (int i = 1;i <= n;i++) add(ans, x.a[1][i]);

  cout << ans << endl;

  double duration = ((double) clock() - start) / (double) CLOCKS_PER_SEC;
//  cout << "Time: " << fixed << setprecision(10) << duration << endl;
	
  return 0;
}