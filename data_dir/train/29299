#include <bits/stdc++.h>
using namespace std;

int trie[27][100010];
int lvl[100010];
bool fin[100010];
multiset <int> coresp[100010];
int cnt;

void add(string s)
{
    int root = 1;
    for (auto i : s) {
        if (!trie[i - 'a'][root]) {
            trie[i - 'a'][root] = ++cnt;
            lvl[trie[i - 'a'][root]] = 1 + lvl[root];
        }
        root = trie[i - 'a'][root];
    }
    fin[root] = 1;
}

int get_ans(int where)
{
    vector <int> fii;
    int fiumax(where);
    if (fin[where])
        coresp[fiumax].insert(lvl[where]);

    for (int i(0); i < 26; i++) {
        if (trie[i][where]) {
            int x = get_ans(trie[i][where]);
            if (coresp[x].size() > coresp[fiumax].size())
                fii.push_back(fiumax), fiumax = x;
            else
                fii.push_back(x);
        }
    }

    for (auto i : fii)
        for (auto j : coresp[i])
            coresp[fiumax].insert(j);

    if (coresp[fiumax].find(lvl[where]) == coresp[fiumax].end()) {
        coresp[fiumax].insert(lvl[where]);
        coresp[fiumax].erase(prev(coresp[fiumax].end()));
    }
    return fiumax;
}

int main()
{
    cnt = 1;
    int n;
    string s;

    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> n;

    while (n--) {
        cin >> s;
        add(s);
    }

    int ans(0);

    for (int i(0); i < 26; i++) {
        if (trie[i][1]) {
            int x = get_ans(trie[i][1]);
            for (auto i : coresp[x])
                ans += i;
        }
    }

    cout << ans << '\n';
    return 0;
}
