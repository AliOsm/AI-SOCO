#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

//#define PB push_back
#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template < typename F, typename S > ostream& operator << ( ostream& os, const pair< F, S > & p ) { return os << "(" << p.first << ", " << p.second << ")"; }
template < typename T > ostream &operator << ( ostream & os, const vector< T > &v ) { os << "{";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "}";}
template < typename T >ostream &operator << ( ostream & os, const set< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename T >ostream &operator << ( ostream & os, const multiset< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename F, typename S >ostream &operator << ( ostream & os, const map< F, S > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << it -> first << " = " << it -> second ;}return os << "]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
clock_t tStart = clock();
#define timeStamp dbg("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)
void faltu () {cerr << endl;}
template <typename T>void faltu( T a[], int n ) {for(int i = 0; i < n; ++i) cerr << a[i] << ' ';cerr << endl;}
template <typename T, typename ... hello>
void faltu( T arg, const hello &... rest) {cerr << arg << ' ';faltu(rest...);}
//#else
//#define dbg(args...)

const int mx = 2e6+5;
string s, c;
bool b[26];
int k;
int trie[mx][26];
bool End[mx];
int nxt = 1;
int len;
set <int> v[mx];

void add( int pos, int p )
{
    int node = 0;
    for( int i = pos; i < len; ++i ) {
        if( !b[ s[i] - 'a' ] ) --p;
        if( p == -1 ) break;
        v[node].insert( s[i] - 'a' );
        if( trie[node][ s[i] - 'a' ] == -1 ) trie[node][ s[i] - 'a' ] = nxt++;
        node = trie[node][ s[i] - 'a' ];
        End[node] = 1;
    }
}

int dfs( int node )
{
    //dbg(node);
    //dbg(v[node]);
    int ret = 0;
    if( End[node] ) ++ret;
    int l = v[node].size();
    for( set <int> :: iterator itr = v[node].begin(); itr != v[node].end(); ++itr ) {
        ret += dfs( trie[node][*itr] );
    }
    return ret;
}

int main()
{
    mem(trie, -1);
    optimize();
    cin >> s >> c >> k;
    len = s.size();
    for( int i = 0; i < 26; ++i ) b[i] = ((c[i] == '1')?1:0);
    for( int i = 0; i < len; ++i ) {
        add( i, k );
    }
    cout << dfs(0);
}



























