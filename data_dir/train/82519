#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
using namespace std;
template<class T> inline T sqr(T x) { return x * x; }
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = (int)5e4 + 10;
LL d[maxn][505];
int deg[maxn],k;
vector< vector<int> > g(maxn);
LL res = 0;
void dfs(int v, int p)
{
	for(int i = 0; i < sz(g[v]); i++)
	{
		int to = g[v][i];
		if (to == p) continue;
		dfs(to,v);
	}
	for(int i = 0; i < sz(g[v]); i++)
	{
		int to = g[v][i];
		if (to == p) continue;
		for(int j = 1; j <= 500; j++)
			d[v][j] += d[to][j - 1];
	}
	LL cur = 0;
	for(int i = 0; i < sz(g[v]); i++)
	{
		int to = g[v][i];
		if (to == p) continue;
		for(int j = 1; j < k; j++)
			cur = cur + d[to][j - 1] * (d[v][k - j] - d[to][k - j - 1]);
	}
	res = res + cur / 2 + d[v][k];
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	int n;
	cin>>n>>k;
	if (n == 1)
	{
		cout<<0<<endl;
		return 0;
	} else
	if (n == 2)
	{
		if (k == 1) cout<<1<<endl; else cout<<0<<endl;
		return 0;
	}
	for(int i = 0; i < n; i++)
		d[i][0]++;
	for(int i = 0; i < n - 1; i++)
	{
		int a,b;
		scanf("%d%d",&a,&b);
		--a;
		--b;
		g[a].pb(b);
		g[b].pb(a);
		deg[a]++;
		deg[b]++;
	}
	int root = 0;
	while(deg[root] == 1) root++;
	dfs(root,-1);
	cout<<res<<endl;
	return 0;
}
