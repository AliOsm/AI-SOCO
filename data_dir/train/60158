#include <bits/stdc++.h>
using namespace std; 
#define x first
#define y second
#define mp make_pair
typedef pair<int,int> pii;
typedef long long ll;
const int N = 250010;

int n,m,q,nR[10000001],nL[10000001],cnt=0;
ll dp[10000001];
struct dom{
  int a;
  ll c;
  dom(){}
};
vector<dom> block[N];
dom cur[10000001];
priority_queue< pair<ll,int> > best;


int main() {
  cin >> n >> m;
  for (int k,i = 1; i <= n; ++i){
    scanf("%d",&k);
    block[i].resize(k);
    for(int j = 0 ; j < k ; ++j)scanf("%d",&block[i][j].a); 
    for(int j = 0 ; j < k ; ++j)scanf("%lld",&block[i][j].c);
  }
  scanf("%d",&q);
  for (int id,mul,i = 0; i < q; ++i){
    scanf("%d%d",&id,&mul);
    for(int j = 0 ; j < block[id].size();++j){
      int cx = cnt++;
      cur[cx] = block[id][j];
      cur[cx].c *= mul;
    }
  }
  assert(cnt == m);
  stack<int> st;
  for(int i = m-1;i >= 0 ; --i){
    nR[i] = min(i + cur[i].a - 1,m-1);
    while(st.size() && nR[i] >= st.top()){
      nR[i] = max(nR[i],nR[st.top()]);
      st.pop();
    }
    st.push(i);
  }
  while(st.size())st.pop();
  for(int i = 0; i < m ; ++i){
    nL[i] = max(0,i-(cur[i].a-1));
    while(st.size() && nL[i] <= st.top()){
      nL[i] = min(nL[i],nL[st.top()]);
      st.pop();
    }
    st.push(i);
  }
  for(int i = m-1; i>= 0 ; --i){
    dp[i] = cur[i].c + dp[nR[i]+1];
    best.push(mp(-(dp[i+1]+cur[i].c),nL[i])); 
    while(best.size() && best.top().y > i)best.pop();
    if(best.size())dp[i] = min(dp[i],-best.top().x);
 /*   while(best.size() && nL[best.front()] > i)best.pop_front();
    if(best.size())dp[i] = min(dp[i],dp[best.front()+1]+cur[best.front()].c);
    while(best.size() && dp[best.back()+1]+cur[best.back()].c > dp[i+1]+cur[i].c)best.pop_back();
    best.push_back(i);*/
  }
  printf("%lld\n", dp[0]);

  return 0;
}