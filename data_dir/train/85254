//basma taala
//ya_hossein
#include<bits/stdc++.h>
using namespace std;
struct cc
{
	int x, y;
};
cc s[3];
cc f[3];
cc g[3];
bool io(cc x, cc y)
{
	return x.x > y.x;
}
int main()
{
	for(int i = 0; i < 3; i++)
	{
		g[i].x = g[i].y = f[i].x = f[i].y = s[i].x = s[i].y = 100000000;
	}
	int n, m;
	cin >> n >> m;
	char a[n][m];
	for(int i = 0; i < n; i++)
	for(int j = 0; j < m; j++)
	cin >> a[i][j];
	for(int i = 0; i < n; i++)
	{
		int t = 1e9;
		int tt = 1e9;
		int l = 0;
		for(int k = 0; k < m; k++, l++)
		{
			if(a[i][k] == '#' || a[i][k] == '&' || a[i][k] == '*')
			{
				t = l;
				break;
			}
		}
		l = 1;
		for(int k = m - 1; k >= 1; k--, l++)
		{
			if(a[i][k] == '#' || a[i][k] == '&' || a[i][k] == '*')
			{
				tt = l;
				break;
			}
		}
		t = min(t, tt);
		sort(s, s + 3, io);
		if(s[0].x > t)
		{
			s[0].x = t;
			s[0].y = i;
		}
		///////////////
		t = 1e9;
		tt = 1e9;
		l = 0;
		for(int k = 0; k < m; k++, l++)
		{
			if(a[i][k]>= '0' && a[i][k] <= '9')
			{
				t = l;
				break;
			}
		}
		l = 1;
		for(int k = m - 1; k >= 1; k--, l++)
		{
			if(a[i][k]>= '0' && a[i][k] <= '9')
			{
				tt = l;
				break;
			}
		}
		t = min(t, tt);
		sort(f, f + 3, io);
		if(f[0].x > t)
		{
			f[0].x = t;
			f[0].y = i;
		}
		//////////////
		t = 1e9;
		tt = 1e9;
		l = 0;
		for(int k = 0; k < m; k++, l++)
		{
			if(a[i][k]>= 'a' && a[i][k] <= 'z')
			{
				t = l;
				break;
			}
		}
		l = 1;
		for(int k = m - 1; k >= 1; k--, l++)
		{
			if(a[i][k] >= 'a' && a[i][k] <= 'z')
			{
				tt = l;
				break;
			}
		}
		t = min(t, tt);
		sort(g, g + 3, io);
		if(g[0].x > t)
		{
			g[0].x = t;
			g[0].y = i;
		}
	}
	int y = 1e9;
	for(int i = 0; i < 3; i++)
	{
		if(s[i].y == 1e9)
		continue;
		for(int j = 0; j < 3; j++)
		{
			if(f[j].y == 1e9 || f[j].y == s[i].y)
			continue;
			for(int z = 0; z < 3; z++)
			{
				if(g[z].y == 1e9 || g[z].y == f[j].y || g[z].y == s[i].y)
				continue;
				y = min(y, s[i].x + f[j].x + g[z].x);
			}
		}
	}
	cout << y;
}