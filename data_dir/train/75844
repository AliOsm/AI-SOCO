#include <bits/stdc++.h>
using namespace std;

using ll = long long;
const int N = 105;
const int oo = 1e9;

int n, p[N], dp[2][N][N][N];
vector<int> mi;

int DP(int prev, int pos, int e, int o) {
	if(pos == 0) return 0;
	if(dp[prev][pos][e][o] != -1) return dp[prev][pos][e][o];
	
	int &ret = dp[prev][pos][e][o];
	ret = oo;
	if(p[pos] != 0) {
		int cur = ((p[pos] & 1) == prev ? 0 : 1);
		return ret = cur + DP((p[pos] & 1), pos - 1, e, o);
	}
	if(e) {
		ret = min(ret, (prev == 0 ? 0 : 1) + DP(0, pos - 1, e - 1, o));
	}
	if(o) {
		ret = min(ret, (prev == 1 ? 0 : 1) + DP(1, pos - 1, e, o - 1));
	} return ret;
}

int got[N];
int main() {
//	ios_base::sync_with_stdio(0); cin.tie(0);
	memset(dp, -1, sizeof dp);
	scanf("%d", &n);
	for(int i = 1; i <= n; i++) {
		scanf("%d", &p[i]);
		got[p[i]] = 1;
	}
	if(n == 1) {
		puts("0");
		return 0;
	}
	int e = 0, o = 0;
	for(int i = 1; i <= n; i++) if(!got[i]) {
		mi.push_back(i);
		if(i & 1) o++;
		else e++;
	}
	int ans = oo;
	if(p[n] == 0) {
		if(e) ans = min(ans, DP(0, n - 1, e - 1, o));
		if(o) ans = min(ans, DP(1, n - 1, e, o - 1));
	}
	else ans = min(ans, DP((p[n] & 1), n - 1, e, o));
	printf("%d\n", ans);
	return 0;
}