#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define INF 2000000000
#define DESPACITO2 1000000000000000
#define DESPACITO 1000000000000000000
#define MOD 1000000007
#define ll long long
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define ii pair<int,int>
#define vii vector<ii>
#define si set<int>
#define msi map<string,int>
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define TRvi(c,it) for(vi::iterator it=(c).begin();it!=(c).end();it++)
#define TRvii(c,it) for(vii::iterator it=(c).begin();it!=(c).end();it++)
#define TRmsi(c,it) for(msi::iterator it=(c).begin();it!=(c).end();it++)
 
 
using namespace std;

int n,m;
string grid[1000];
int ex,ey,sx,sy;
int dist[1000][1000];
bool visited[1000][1000];

bool test(int x,int y)
{
	if(x<0||y<0||x>=n||y>=m||grid[x][y]=='T')
		return false;
	//cerr << x << " " << y << "\n";
	return true;
}

void Dijsktra()
{
	multiset<pair<int,pair<int,int>>>q;
	q.insert(mp(0,mp(ex,ey)));
	dist[ex][ey]=0;
	while(!q.empty())
	{
		pair<int,pair<int,int>>p=(*q.begin());
		q.erase(q.begin());
		if(visited[p.second.first][p.second.second])
			continue;
		int x=p.second.first;
		int y=p.second.second;
		visited[x][y]=true;
		//cerr << x << " " << y << "\n";
		if(test(x-1,y))
		{
			if(dist[x-1][y]>dist[x][y]+1)
			{
				dist[x-1][y]=dist[x][y]+1;
				q.insert(mp(dist[x-1][y],mp(x-1,y)));
			}
		}
		if(test(x+1,y))
		{
			if(dist[x+1][y]>dist[x][y]+1)
			{
				dist[x+1][y]=dist[x][y]+1;
				q.insert(mp(dist[x+1][y],mp(x+1,y)));
			}
		}
		if(test(x,y-1))
		{
			if(dist[x][y-1]>dist[x][y]+1)
			{
				dist[x][y-1]=dist[x][y]+1;
				q.insert(mp(dist[x][y-1],mp(x,y-1)));
			}
		}
		if(test(x,y+1))
		{
			if(dist[x][y+1]>dist[x][y]+1)
			{
				dist[x][y+1]=dist[x][y]+1;
				q.insert(mp(dist[x][y+1],mp(x,y+1)));
			}
		}
	}
}

int main()
{
    IOS;
    #ifndef ONLINE_JUDGE
        // for getting input from input.txt
        freopen("input.txt", "r", stdin);
        // for writing output to output.txt
        freopen("output.txt", "w", stdout);
    #endif
    cin >> n >> m;
    REP(i,0,n-1)
    	cin >> grid[i];
    REP(i,0,n-1)
    {
    	REP(j,0,m-1)
    	{
    		dist[i][j]=10000000;
    		if(grid[i][j]=='S')
    		{
    			sx=i;
    			sy=j;
    			grid[i][j]='0';
    		}
    		if(grid[i][j]=='E')
    		{
    			ex=i;
    			ey=j;
    			grid[i][j]='0';
    		}
    	}
    }
    Dijsktra();
    int ct=0;
    //cerr << dist[0][0];
    REP(i,0,n-1)
    {
    	REP(j,0,m-1)
    	{
    		if(grid[i][j]!='T')
    		{
    			if(dist[i][j]<=dist[sx][sy])
    				ct+=(grid[i][j]-'0');
    		}
    	}
    }
    cout << ct;
}