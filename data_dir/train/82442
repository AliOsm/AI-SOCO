#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define mp make_pair
#define mod 1000000007
#define pi 3.141592653589793
const int N = 200001;
using namespace std;

bool g(char c) {
    return c != '*';
}

int main() {
//    cout << fixed << setprecision(10);
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n, m, k, p;
    cin >> n >> m >> k >> p;
    char a[n + 5][m + 5];
    memset(a, '*', sizeof a);
    for (int i = 1; i < n + 1; i++) {
        for (int j = 1; j < m + 1; j++) {
            cin >> a[i][j];
        }
    }

    ll ans[n + 1][m + 1];
    bool vis[n + 10][m + 10];
    memset(vis, false, sizeof vis);
    memset(ans, 0, sizeof ans);
    for (int i = 1; i < n + 1; i++) {
        for (int j = 1; j < m + 1; j++) {
            if (a[i][j] == '*' || a[i][j] == '.') {
                continue;
            }

            queue<pair<pair<int, int>, ll>> q;
            vector<pair<pair<int, int>, ll>> v;
            q.push(mp(mp(i, j), k * (a[i][j] - 'A' + 1)));
            v.pb(mp(mp(i, j), k * (a[i][j] - 'A' + 1)));
            vis[i][j] = true;
            while (!q.empty()) {
                auto f = q.front();
                q.pop();
                int x = f.first.first, y = f.first.second;
                ans[x][y] += f.second;
                if (f.second == 0) {
                    break;
                }
                if (g(a[x - 1][y]) && !vis[x - 1][y]) {
                    vis[x - 1][y] = true;
                    q.push(mp(mp(x - 1, y), f.second / 2));
                    v.pb(mp(mp(x - 1, y), f.second / 2));
                }

                if (g(a[x + 1][y]) && !vis[x + 1][y]) {
                    vis[x + 1][y] = true;
                    q.push(mp(mp(x + 1, y), f.second / 2));
                    v.pb(mp(mp(x + 1, y), f.second / 2));
                }

                if (g(a[x][y - 1]) && !vis[x][y - 1]) {
                    vis[x][y - 1] = true;
                    q.push(mp(mp(x, y - 1), f.second / 2));
                    v.pb(mp(mp(x, y - 1), f.second / 2));
                }

                if (g(a[x][y + 1]) && !vis[x][y + 1]) {
                    vis[x][y + 1] = true;
                    q.push(mp(mp(x, y + 1), f.second / 2));
                    v.pb(mp(mp(x, y + 1), f.second / 2));
                }

            }

            for (auto e : v) {
                vis[e.first.first][e.first.second] = false;
            }
        }
    }

    int cnt = 0;
    for (int i = 1; i < n + 1; i++) {
        for (int j = 1; j < m + 1; j++) {
            cnt += ans[i][j] > p;
        }
    }

    cout << cnt;

}
