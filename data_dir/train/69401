#include <bits/stdc++.h>
using namespace std;
#define ll int
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds;   
#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 
#define ld long double
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(a) a.begin(),a.end()
#define sz(a) (ll)(a.size())
const ll M=1e5+5;
ll pos[M];
ll req;
bool done[M];
set<ll> vtr[M];
std::vector<ll> st;
void dfs(ll x)
{
	pos[x] = sz(st);
	st.pb(x);
	for(auto u:vtr[x])
	{
		if(pos[u]==-1)
			dfs(u);
		else
		{
			if(sz(st)-pos[u]>=req)
			{
				cout<<"2\n";
				cout<<sz(st)-pos[u]<<"\n";
				for(ll i=pos[u];i<sz(st);i++)
					cout<<st[i]<<" ";
				cout<<"\n";
				exit(0);
			}
		}
	}
	st.pop_back();
}
int main()
{
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	ll n,m;
	cin>>n>>m;
	req = sqrt(n);
	if(req*req<n)
		req++;
	for(ll i=1;i<=m;i++)
	{
		ll u,v;
		cin>>u>>v;
		vtr[u].insert(v);
		vtr[v].insert(u);
	}
	memset(pos,-1,sizeof(pos));
	dfs(1);
	set<pair<ll,ll> > dg;
	for(ll i=1;i<=n;i++)
		dg.insert({sz(vtr[i]),i});
	std::vector<ll> v;
	while(sz(dg))
	{
		ll x =(*dg.begin()).ss;
		v.pb(x);
		if(sz(v)==req)
			break;
		done[x] = 1;
		dg.erase(dg.begin());
		for(auto u:vtr[x])
		{
			done[u] = 1;
			dg.erase({sz(vtr[u]),u});
		}
		for(auto u:vtr[x])
		{
			for(auto z:vtr[u])
			{
				if(done[z]==0)
				{
					dg.erase({sz(vtr[z]),z});
					vtr[z].erase(u);
					dg.insert({sz(vtr[z]),z});
				}
			}
		}
	}
	cout<<"1\n";
	for(auto u:v)
		cout<<u<<" ";
	cout<<"\n";
	return 0;
}