#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())

#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);

const int N = 300005;
const LL MOD = 998244353;
vector<int>g[N];
int n;
LL fac[N];
int main()
{
    fac[0] = 1;
    for(int i = 1;i < N;i++)fac[i] = (fac[i - 1] * i) % MOD;
    scanf("%d",&n);

    vector<int>L,R;
    vector<pair<int,int>>vec;
    FOR(i,1,n)
    {
        int a,b;
        scanf("%d %d",&a,&b);
        g[a].push_back(b);
        L.push_back(a);
        R.push_back(b);
        vec.push_back(mk(a,b));
    }
    SORT(vec);
    SORT(L);SORT(R);

    LL bam = 1,dan = 1;
    int cnt = 1;
    for(int i = 1;i < L.size();i++){
        if(L[i] == L[i - 1]){
            cnt++;
        }else{
            bam = (bam * fac[cnt]) % MOD;
            cnt = 1;
        }
    }
    bam = (bam * fac[cnt]) % MOD;

    cnt = 1;
    for(int i = 1;i < R.size();i++){
        if(R[i] == R[i - 1]){
            cnt++;
        }else{
            dan = (dan * fac[cnt]) % MOD;
            cnt = 1;
        }
    }
    dan = (dan * fac[cnt]) % MOD;
    LL ans = bam + dan;
    LL both = 1;
    cnt = 1;
    for(int i = 1;i < vec.size();i++){
        if(vec[i].second < vec[i-1].second){
            both = 0;
        }
        if(vec[i] == vec[i - 1]){
            cnt++;
        }else{
            both = (both * fac[cnt]) % MOD;
            cnt = 1;
        }
    }
    both = (both * fac[cnt]) % MOD;
    ans = (ans - both + MOD) % MOD;
    LL ret = fac[n] - ans;
    ret %= MOD;ret += MOD;ret %= MOD;
    cout << ret << "\n";


}
