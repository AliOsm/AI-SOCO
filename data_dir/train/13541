
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int maxn = 3 * 100005;
const ll inf = (ll) 1e18;

vector <pair<ll, ll>> new_[maxn];
vector <ll> ans;

struct graph {
#define pq priority_queue
#define node pair<ll,ll>
  vector <vector<node>> g;
  vector <ll> d, p;
  map <node, ll> nums;
  graph(int n) {
    g.resize(n + 1);
    p.assign(n + 1, -1);
    d.assign(n + 1, inf);
  }
  void init(int m) {
    for (int i = 0; i < m; ++i) {
      ll u, v, len;
      cin >> u >> v >> len;
      g[u].push_back({v , len});
      g[v].push_back({u , len});
      auto x = make_pair(u, v);
      nums[x] = nums[make_pair(x.second, x.first)] = i;
    }
  }
  void dij(int s) {
    d.assign(g.size(), inf);
    d[s] = 0;
    p[s] = s;
    pq <node, vector<node>, greater<node>> q;
    q.push(make_pair(0, s));
    while (q.size()) {
      auto cur = q.top();
      q.pop();
      if (d[cur.second] != cur.first) {
        continue;
      }
      for (auto v : g[cur.second]) {
        if (d[v.first] > cur.first + v.second) {
          d[v.first] = cur.first + v.second;
          p[v.first] = cur.second;
          q.push(make_pair(d[v.first], v.first));
        }
      }
    }
  }
};

void dfs(int u, int __K) {
  for (auto x : new_[u]) {
    if (ans.size() < __K)
      ans.push_back(x.second);
    dfs(x.first, __K);
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int n, m, k;
  cin >> n >> m >> k;
  graph a(n);
  a.init(m);
  a.dij(1);
  for (int i = 1; i <= n; ++i) {
    ll u = a.p[i];
    ll v = i;
    if (u != v) {
      new_[u].push_back(make_pair(v, a.nums[make_pair(u, v)]));
    }
  }
  dfs(1, k);
  cout << ans.size() << endl;
  for (ll i : ans) {
    cout << i + 1 << ' ';
  }
  return 0;
}
