#include <bits/stdc++.h>
using namespace std;
typedef int64_t lld;
const int N = 200000 + 5;
const int MOD = 1e9 + 7;

lld dp[N], ans[N], no[N];
vector<int> G[N];

void dfs1(int);
void dfs2(int,lld);

int main() {
	ios_base::sync_with_stdio(0); cin.tie(0);
	int n; cin >> n;
	for(int i=2;i<=n;i++){
		int x; cin >> x;
		G[x].push_back(i);
	}
	dfs1(1); dfs2(1, 0);
	for(int i=1;i<=n;i++) cout << ans[i] << " \n"[i==n];
	return 0;
}

void dfs1(int u) {
	for(int v: G[u]) dfs1(v);
	dp[u] = 1;
	for(int v: G[u]) dp[u] = dp[u]*(dp[v]+1)%MOD;
	vector<lld> pre, pos;
	for(int v: G[u]) pre.push_back(dp[v]+1);
	for(int v: G[u]) pos.push_back(dp[v]+1);
	for(int i=1;i<(int)G[u].size();i++) pre[i] = pre[i]*pre[i-1]%MOD;
	for(int i=(int)G[u].size()-2;i>=0;i--) pos[i] = pos[i]*pos[i+1]%MOD;
	for(int i=0;i<(int)G[u].size();i++){
		no[G[u][i]] = (i-1>=0?pre[i-1]:1) * (i+1<(int)G[u].size()?pos[i+1]:1);
		no[G[u][i]] %= MOD;
	}
}
void dfs2(int u, lld a) {
	ans[u] = dp[u]*(a+1)%MOD;
	for(int v: G[u]) dfs2(v, (a+1)*no[v]%MOD);
}