#include <iostream>
#include <vector>
#include <string.h>
#include <deque>
#include <queue>
#include <algorithm>
#include <set>
#include <map>
#include <sstream>
#include <stack>
#include <iomanip>
#include <fstream>
#include <assert.h>
#include <cmath>
#include <climits>
#include <complex>
#include <cmath>
#define fi first
#define se second
#define th second
#define FI first
#define SE second.first
#define TH second.second

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef long double ld;
typedef complex<double> cd;

const int maxN = 1e3 + 9, lg = 19, MOD = 1e9 + 7, maxV = 1e6 + 9;

ii arr[3];

int dp[maxN][maxN];
ii auxi[maxN][maxN];
bool vi[maxN][maxN];

int dst(ii one, ii two){
    return abs(one.fi - two.fi) + abs(two.se - one.se);
}

const int dr[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

bool ins(int x, int y){
    return x < maxN && y < maxN && y >= 0 && x >= 0;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n = 3;
    for(int i = 0; i < n; i++)
        cin >> arr[i].fi >> arr[i].se;
    
    ii begi = ii(min(arr[0].fi, arr[1].fi), min(arr[0].se, arr[1].se));
    ii ende = ii(max(arr[0].fi, arr[1].fi), max(arr[0].se, arr[1].se));
    
    ii clos = begi;
    
    for(int i = begi.fi; i <= ende.fi; i++){
        for(int j = begi.se; j <= ende.se; j++){
            if(dst(arr[2], clos) > dst(arr[2], ii(i, j))){
                clos = ii(i, j);
            }
        }
    }
    
    queue<ii> q;
    
    q.push(clos);
    
    memset(dp, -1, sizeof dp);
    
    dp[clos.fi][clos.se] = 0;
    auxi[clos.fi][clos.se] = ii(-1, -1);
    
    while(q.size()){
        ii cr = q.front(); q.pop();
        
        for(int i = 0; i < 4; i++){
            int x = cr.fi + dr[i][0], y = cr.se + dr[i][1];
            if(!ins(x, y) || dp[x][y] != -1) continue;
            dp[x][y] = dp[cr.fi][cr.se] + 1;
            auxi[x][y] = cr;
            q.push(ii(x, y));
        }
    }
    
    for(int i = 0; i < 3; i++){
        ii strt = arr[i];
        
        while(strt != ii(-1, -1)){
            vi[strt.fi][strt.se] = 1;
            strt = auxi[strt.fi][strt.se];
        }
        
    }
    
    vector<ii> ans;
    for(int i = 0; i < maxN; i++)
        for(int j = 0; j < maxN; j++)
            if(vi[i][j])
                ans.push_back(ii(i, j));
    
    cout << ans.size() << '\n';
    for(ii el: ans) cout << el.fi << ' ' << el.se << '\n';
    
}