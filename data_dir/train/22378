#pragma GCC optimize ("Ofast")
#include "bits/stdc++.h"
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
using namespace __gnu_pbds;
using namespace std;
typedef long long int ll;
#define int long long int
#define pb push_back
#define fi first
#define se second
#define deb cerr << "Line no." << __LINE__
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define sz(x) (int)x.size()
const int mod = 1e9 + 7;
const int mod1 = 998244353;
typedef long double f80;
#ifndef LOCAL
#define endl '\n'
#endif

template<typename T>
using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
	uniform_int_distribution<int> uid(l, r);
	return uid(rng);
}
const int N = 1e5 + 5;
int dp[N][5], a[N];
char s[N];
string lol = "hard";
void solve(){
	int n;
	cin >> n;
	scanf("%s", s + 1);
	fr(i, 1, n) cin >> a[i];
	fill(&dp[0][0], &dp[0][0] + 5 * N, 1e18);
	dp[0][0] = 0;
	fr(i, 0, n - 1){
		fr(j, 0, 3){
			dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + a[i + 1]);
			if(s[i + 1] == lol[j])
				dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][j]);
			else
				dp[i + 1][j] = min(dp[i + 1][j], dp[i][j]);
		}
	}
	int ans = min(min(dp[n][0], dp[n][1]), min(dp[n][2], dp[n][3]));
	cout << ans;
}
signed main(){
  	// IO;
// 	freopen("inp.txt","r", stdin);
// 	freopen("out.txt", "w", stdout);
 	clock_t clk = clock();
  	int t = 1;
  	// cin >> t;
  	while(t--){
    	solve();
  	}
  	cerr << (double)(clock() - clk) / CLOCKS_PER_SEC;
  	return 0;
}