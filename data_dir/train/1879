#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
#define dbl(k, x) fixed << setprecision(k) << (x)

template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define _upgrade ios_base::sync_with_stdio(0);
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 2e5 + 7;
const int MAX = 1 << 18;
const int D = 10;
const int INF = 1e9 + 7;

PII tree[D][2 * MAX];

PII merge(PII a, PII b)
{
    if(a.first <= b.first)
        return make_pair(a.first, min(a.second, b.first));
    else
        return make_pair(b.first, min(a.first, b.second));
}

void update(int p, int e, int v)
{
    e += MAX;
    tree[p][e] = {v, INF};
    e /= 2;
    while(e)
    {
        tree[p][e] = merge(tree[p][2 * e], tree[p][2 * e + 1]);
        e /= 2;
    }
}

PII query(int p, int a, int b)
{
    a += MAX, b += MAX;
    PII res = merge(tree[p][a], tree[p][b]);
    if(a == b) res = tree[p][a];
    while(a / 2 != b / 2)
    {
        if(a % 2 == 0) res = merge(res, tree[p][a + 1]);
        if(b % 2 == 1) res = merge(res, tree[p][b - 1]);
        a /= 2, b /= 2;
    }
    return res;
}

void make(int e, int v)
{
    int u = v;
    for(int i = 0; i < D; i++)
    {
        int c = u % 10;
        u /= 10;
        update(i, e, (c != 0 ? v : INF));
    }
}

int answer(int a, int b)
{
    PII best = {INF, INF};
    for(int i = 0; i < D; i++)
    {
        PII tmp = query(i, a, b);
        if(tmp.second == INF)
            continue;
        if(best.first + best.second > tmp.first + tmp.second)
            best = tmp;
    }
    if(best.second != INF)
        return best.first + best.second;
    return -1;
}

int main()
{
    _upgrade
    
    int n, q;
    cin >> n >> q;
    for(int i = 1; i <= n; i++)
    {
        int x; cin >> x;
        make(i, x);
    }

    while(q--)
    {
        int a, b, c;
        cin >> a >> b >> c;
        if(a == 1)
            make(b, c);
        else
            cout << answer(b, c) << "\n";
    }

	return 0;
}