#include <bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-12, PI = acos(-1);
const int N = 2e6 + 9, M = 1e7 + 9, OO = 1e9 + 7, MOD = 1e9 + 7, MOD2 = 998244353;
const ll inf = 1e18;

int l[N], r[N];
ll tree[4*N], lazy[4*N];

void propagate(int node, int start, int end) {
	if(!lazy[node]) return;
	tree[node] += lazy[node];
	if(start != end) {
		lazy[node * 2] += lazy[node];
		lazy[node * 2 + 1] += lazy[node];
	}
	lazy[node] = 0;
}

void update(int node, int start, int end, int l, int r, int val) {
	propagate(node, start, end);
	if(start > r || end < l) return;
	if(start >= l && end <= r) {
		lazy[node] += val;
		propagate(node, start, end);
		return;
	}
	int mid = (start + end) / 2;
	update(node * 2, start, mid, l, r, val);
	update(node * 2 + 1, mid + 1, end, l, r, val);
	tree[node] = min(tree[node * 2], tree[node * 2 + 1]);
}

int query(int node, int start, int end, int l, int r) {
	propagate(node, start, end);
	if(start > r || end < l) return OO;
	if(start >= l && end <= r) return tree[node];
	int mid = (start + end) / 2;
	int p1 = query(node * 2, start, mid, l, r);
	int p2 = query(node * 2 + 1, mid + 1, end, l, r);
	return min(p1, p2);
}

int main() {
	fastIO;
#ifdef LOCAL
//	freopen("input.in", "rt", stdin);
#endif
	int n, idx = 0, ptrL, ptrR;
	cin >> n;
	map<int, int> mp;
	for (int i = 0; i < n; ++i) {
		cin >> l[i] >> r[i];
		mp[l[i]], mp[r[i]];
		mp[l[i] + 1], mp[r[i] + 1];
		mp[l[i] - 1], mp[r[i] - 1];
	}
	mp.erase(mp.begin());
	for(auto it: mp)
		mp[it.first] = ++idx;
	for (int i = 0; i < n; ++i) {
		ptrL = mp[l[i]], ptrR = mp[r[i]];
		update(1, 1, idx, ptrL, ptrR, 1);
	}
	for (int i = 0; i < n; ++i) {
		ptrL = mp[l[i]], ptrR = mp[r[i]];
		update(1, 1, idx, ptrL, ptrR, -1);
		int ret = query(1, 1, idx, ptrL, ptrR);
		if(ret)
			return cout << i + 1, 0;
		update(1, 1, idx, ptrL, ptrR, 1);
	}
	cout << -1;
	return 0;
}
