#include <bits/stdc++.h>
using namespace std;

long long A[69], nodes[69], maxVal[69];

int getHt(long long x)
{
    int ans = 0;
    
    while(x)
        x/= 2, ans++;
    
    return ans - 1;
}

long long getNode(long long x, long long s, int h)
{
    x += s;
    
    if(x <= maxVal[h])
        return x;
    
    x = maxVal[h-1] + (x - maxVal[h]);
    return x;
}

void solve(long long x, int h)
{
    cout << getNode(x, nodes[h]-A[h], h) << " ";
    
    if(x == 1)
        return;
    
    solve(x/2, h-1);
}

int main()
{
    cin.tie(NULL), cout.tie(NULL);
    
    int Q;
    cin >> Q;
    
    nodes[0] = maxVal[0] = 1;
    
    for(int i=1; i<=60; i++)
    {
        nodes[i] = nodes[i-1] * 2;
        maxVal[i] = maxVal[i-1] + nodes[i];
    }
    
    while(Q--)
    {
        int type;
        cin >> type;
        
        if(type == 1)
        {
            long long x, k;
            cin >> x >> k;
            
            int h = getHt(x);
            k = (k % nodes[h] + nodes[h] ) % nodes[h];
            
            A[h] = (A[h] + k) % nodes[h];
        }
        else if(type == 2)
        {
            long long x, k;
            cin >> x >> k;
            
            for(int h = getHt(x); h <= 60; h++, k = k * 2)
            {
                k = (k % nodes[h] + nodes[h] ) % nodes[h];
                A[h] = (A[h] + k) % nodes[h];
            }
        }
        else
        {
            long long x;
            cin >> x;
            
            int h = getHt(x);
            long long y = getNode(x, A[h], h);
            
            solve(y, h);
            cout << "\n";
        }
        
        // for(int i=0; i<=10; i++)
        //     cout << A[i] << " ";
        // cout << "\n";
    }
    
    return 0;
}