#include <iostream>
#include <assert.h>
#include <stack>
#include <algorithm>
#include <queue>
#include <set>
#include <vector>
#include <queue>
#include <map>
#include <string.h>
#include <stdio.h>
#define sf scanf
#define pf printf
#define pb push_back
#define ll long long
#define ull unsigned long long

#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i )

using namespace std;

map< ll, int > ft;
set< ll > nima;

void setv( ll t, int id )
{
    nima.insert( t);
    ft[t] =id;
}

void find( int t, int id )
{
    int l = -1, r = 1000000; 
    while( l + 1 < r )
    {
        int mid = ( l + r ) >> 1;
        ll k = mid * 3 + t;
        if( nima.find( k ) == nima.end() )
        {
            r = mid;
        }
        else
        {
            l = mid;
        }
    }

    setv(r*3+t, id);
}

int t[1000000];

int main()
{
    int n;
    while( cin>>n )
    {
        ft.clear(); nima.clear();
        vector< pair< int, int > > sb;
        fr(i,0,n)
        {
            cin>>t[i];
            if( nima.find( t[i] ) == nima.end( ))
            {
                setv( t[i], i + 1 );
            }
            else sb.push_back( make_pair( t[i],i + 1 ) );
        }

        sort( sb.begin(), sb.end() );

        for( int i = sb.size()-1; i >=0; --i )
        {
            find( sb[i].first, sb[i].second );
        }

        /*
        for( set< ll > :: iterator iter = nima.begin(); iter != nima.end(); ++iter )
        {
            cout<<*iter<<" "<<ft[*iter]<<endl;
        }
        */
        int ok = 1;
        int now = 0;
        for( set< ll > :: iterator iter = nima.begin(); iter != nima.end(); ++iter )
        {
            int k = t[ft[*iter]-1];
            if( k != now )
            {
                if( now > k )
                {
                    int delta = now - k;
                    now -= delta/3 * 3;
                }
                if( k != now )
                {
                    ok = 0;
                    break;
                }
            }
            now ++;
        }
        if( ok == 0 )
        {
            cout<<"Impossible"<<endl;
            continue;
            }
        cout<<"Possible"<<endl;

        for( set< ll > :: iterator iter = nima.begin(); iter != nima.end(); ++iter )
        {
            cout<<ft[*iter]<<" ";
        }
        cout<<endl;
    }
}