#pragma GCC optimize("Ofast,fast-math,unroll-loops")

#include <bits/stdc++.h>

typedef long long ll;

using namespace std;

void dout() { cerr << '\n'; }

template<typename Head, typename... Tail>
void dout(Head H, Tail... T) {
	cerr << H << ' ';
	dout(T...);
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0), cout.tie(0);
	int n;
	cin >> n;

	vector<vector<int>>g(n);
	for (int i = 1; i < n; i++) {
	 	int u, v;
	 	cin >> u >> v;
	 	u--,v--;
	 	g[u].emplace_back(v);
	 	g[v].emplace_back(u);
	}

	vector<int>dist(n, 0);
	vector<int>par(n, -1);
	function<void(int, int)> dfs = [&] (int v, int p) {
		for (auto to : g[v]) {
		 	if (to == p) continue;
		 	dist[to] = dist[v] + 1;
		 	par[to] = v;
		 	dfs(to, v);
		}
	};

	dfs(0, -1);
	int root = 0;
	for (int i = 0; i < n; i++) {
	 	if (dist[root] < dist[i]) {
	 	 	root = i;
	 	}
	}

	int first = root;
	fill(dist.begin(), dist.end(), 0);
	fill(par.begin(), par.end(), -1);
	dfs(root, -1);
	vector<int>used(n, 0);
	vector<int>q;
	root = 0;

	int ans = 0;
	for (int i = 0; i < n; i++) {
		ans = max(ans, dist[i]);
	 	if (dist[i] > dist[root]) {
	 	 	root = i;
	 	}
	}

	int second = root;

	while (par[root] != -1) {
	    q.emplace_back(root);
	    used[root] = 1;
	    root = par[root];
	}	

	used[root] = 1;
	q.emplace_back(root);

	if ((int)q.size() == n) {
		cout << ans << '\n';
	 	cout << first + 1 << ' ' << q[1] + 1 << ' '  << second + 1;
	 	return 0;
	}

	fill(dist.begin(), dist.end(), 0);
	for (int i = 0; i < (int)q.size(); i++) {
	 	int v = q[i];
	 	for (auto to : g[v]) {
	 	 	if (used[to]) continue;
	 	 	used[to] = 1;
	 	 	dist[to] = dist[v] + 1;
	 	 	q.emplace_back(to);
	 	}
	}

	int third = 0;
	for (int i = 0; i < n; i++) {
	 	if (dist[i] > dist[third]) {
	 	 	third = i;
	 	}
	}

	cout << ans + *max_element(dist.begin(), dist.end()) << '\n';
	cout << first + 1 << ' ' << second + 1 << ' '  << third + 1;
	return 0;
}
