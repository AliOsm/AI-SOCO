// KALAM
#include<bits/stdc++.h>

using namespace std;

const int N = 500000 + 77;
int n , q , a[N] , Qle[N] , Qri[N] , A[N];
vector < pair < int , int > > Q[N];
inline void Add(int t , vector < int > & T){
   for(int x : T)
      t = min(t , t ^ x);
   if(t == 0)
      return ;
   for(int & x : T)
      x = min(x , t ^ x);
   T.push_back(t);
}
inline int Get(vector < int > & T){
   int res = 0;
   for(int & x : T)
      res = max(res , res ^ x);
   return res;
}
inline vector < int > Merge(vector < int > & X , vector < int > & Y){
   vector < int > T;
   for(int & x : X)
      T.push_back(x);
   for(int & x : Y)
      Add(x , T);
   return T;
}
void Solve(int le = 1 , int ri = n){
   if(le == ri)
      return ;
   int mid = (le + ri) / 2;
   Solve(le , mid) , Solve(mid + 1 , ri);
   vector < vector < int > > L , R;
   vector < int > V;
   for(int i = mid + 1;i <= ri;++ i)
      Add(a[i] , V) , R.push_back(V);
   V.clear();
   for(int i = mid;i >= le;-- i)
      Add(a[i] , V) , L.push_back(V);
   for(int i = mid + 1;i <= ri;++ i){
      int sz = Q[i].size();
      int id = lower_bound(Q[i].begin() , Q[i].end() , make_pair(le , - 1)) - Q[i].begin();
      for(int j = id;j < sz;++ j){
         if(Q[i][j].first > mid)
            break ;
         vector < int > T = Merge(R[i - mid - 1] , L[mid - Q[i][j].first]);
         A[Q[i][j].second] = Get(T);
      }
   }
}
int main(){
   scanf("%d" , & n);
   for(int i = 1;i <= n;++ i)
      scanf("%d" , a + i);
   scanf("%d" , & q);
   for(int i = 1;i <= q;++ i){
      scanf("%d %d" , Qle + i , Qri + i);
      if(Qle[i] == Qri[i]){
         A[i] = a[Qle[i]];
         continue ;
      }
      Q[Qri[i]].push_back(make_pair(Qle[i] , i));
   }
   for(int i = 1;i <= n;++ i)
      sort(Q[i].begin() , Q[i].end());
   Solve();
   for(int i = 1;i <= q;++ i)
      printf("%d\n" , A[i]);
   return 0;
}
