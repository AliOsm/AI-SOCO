#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
    #define debug(_x)                 std::cerr << (#_x) << " = " << (_x) << '\n'; std::cerr.flush();
#else
    #define debug(_x)                 ;
#endif
#define endl                          "\n"
template<typename Tp>
inline void outarr(Tp _array, const std::size_t _N, const char* _delim = " ") {
    Tp end = std::next(_array, _N);
    for (Tp current = _array; current != end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = int64_t;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
string arr[200];
string ps[2];
multimap<string, int> was, tmp;

bool Check(int p, int s) {
    tmp = was;
    loop(sz(ps[p])) {
        auto it = tmp.find(ps[p].substr(0, i + 1));
        if (it == tmp.end()) {
            return false;
        }
        tmp.erase(it);
    }
    loop(sz(ps[s])) {
        auto it = tmp.find(ps[s].substr(i));
        if (it == tmp.end()) {
            return false;
        }
        tmp.erase(it);
    }
    return true;
}

string GetAns(int p, int s, int n) {
    string res(n + n - 2, '0');
    loop(sz(ps[p])) {
        auto it = was.find(ps[p].substr(0, i + 1));
        res[it->second] = 'P';
        was.erase(it);
    }
    loop(sz(ps[s])) {
        auto it = was.find(ps[s].substr(i));
        res[it->second] = 'S';
        was.erase(it);
    }
    return res;
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int n;
    cin >> n;
    loop(n + n - 2) {
        cin >> arr[i];
        if (sz(arr[i]) == n - 1) {
            if (empty(ps[0])) {
                ps[0] = arr[i];
            } else {
                ps[1] = arr[i];
            }
        }
        was.emplace(arr[i], i);
    }
    if (Check(0, 1)) {
        RET(GetAns(0, 1, n));
    }
    cout << GetAns(1, 0, n) << endl;

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}