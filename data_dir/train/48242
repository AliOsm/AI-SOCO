#include<bits/stdc++.h>
 
using namespace std;
 
namespace Tzh{
 
	typedef long long ll;
	const ll p=1e9+7;
	ll n,m,k,ans,c[110][110];
 
	struct Matrix{
		ll g[110][110];
		void init() { memset(g,0,sizeof(g)); }
		Matrix operator *(const Matrix &b) const{
			Matrix tmp; tmp.init();
			for(int i=1;i<=m;i++)
				for(int j=1;j<=m;j++)
					for(int k=1;k<=m;k++)
						tmp.g[i][j]=(tmp.g[i][j]+g[i][k]*b.g[k][j]%p)%p;
			return tmp;
		}
	};
 
	Matrix qpow(Matrix a,ll b){
		Matrix tmp; tmp.init();
		for(int i=1;i<=m;i++) tmp.g[i][i]=1;
		while(b){
			if(b&1) tmp=tmp*a;
			a=a*a; b>>=1;
		}
		return tmp;
	}
 
	void work(){
		scanf("%lld%lld",&n,&k); m=2*k+3;
		c[0][0]=1;
		for(int i=1;i<=k;i++){
			c[i][0]=1;
			for(int j=1;j<=k;j++)
				c[i][j]=(c[i-1][j]+c[i-1][j-1])%p;
		}
		Matrix a; a.init();
		a.g[1][1]=1;
		for(int i=2;i<=m;i+=2)
			for(int j=i;j<=m;j+=2)
				a.g[i][j]=a.g[i][j+1]=a.g[i+1][j]=c[k-i/2+1][(j-i)/2];
		for(int i=2;i<=m;i++) a.g[1][i]=a.g[2][i];
		a=qpow(a,n-1); 
		for(int i=1;i<=m;i++) ans=(ans+a.g[1][i])%p;
		printf("%lld",ans);
		return ;
	}
}
 
int main(){
	Tzh::work();
}