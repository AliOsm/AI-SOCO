#include <iostream>
#include <cstdio>
#include <map>
#include <cstring>
#include <string>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <queue>
#include <set>

using namespace std;

int a, b, h, w, n;
int A[111111];
int s;
pair<int, int> L[111111];

const int INF = 1000000000;
int temp;
void go(long long a, long long b, long long h, long long w, int id, int cnt) {    
    if (a <= h && b <= w) {
        if (cnt < temp) {
            temp = cnt;
        }
        return;
    }
    if (id == s) {
        return;
    }
    long long hh = h;
    long long ww = w;
    for (int i = 0; i <= L[id].second; i++) {        
        ww = w;
        for (int j = 0; j <= L[id].second - i; j++) {
            //cout << id << " " << i << " " << j<< endl;
            if (a <= hh && b <= ww) {
                go(a, b, hh, ww, id + 1, cnt + i + j);
                break;
            } else 
            if (i + j == L[id].second) {
                go(a, b, hh, ww, id + 1, cnt + i + j);
            }
            if (b <= ww) {
                break;
            }
            ww *= L[id].first;
        }
        if (a <= hh) {
            break;
        }
        hh *= L[id].first;
    }
}

int solve(int a, int b, int h, int w) {
    temp = INF;
    go(a, b, h, w, 0, 0);
    return temp;
}

int main() {
	ios_base::sync_with_stdio(0);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
    cin >> a >> b >> h >> w >> n;
    for (int i = 0; i < n; i++) { 
        cin >> A[i];        
    }
    sort(A, A + n);
    reverse(A, A + n);
    s = 0;
    for (int i = 0; i < n; i++) {
        if (s == 0 || L[s - 1].first != A[i]) {
            L[s] = make_pair(A[i], 1);
            s++;
        } else {
            L[s - 1].second++;
            if (L[s - 1].second > 34) {
                L[s - 1].second = 34;
            }
        }
    }
    int ans = solve(a, b, h, w);
    ans = min(ans, solve(b, a, h, w));
    if (ans == INF) {
        ans = -1;
    }
    cout << ans << endl;
	return 0;
}