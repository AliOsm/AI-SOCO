#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <iterator> 
using namespace std;
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf 1000000
#define pii pair<int, int>
const int mod = (1e9) + 7;
const double eps = 1e-6;
const int siz = 15e4 + 5, siz2 = 1e5 + 5;
int q, n;
map<ll, set<pii>> circ_pnts;
map<pair<int, int>, int> on_line, symm;
int gcd(int a, int b) {
	return b == 0 ? a : gcd(b, a%b);
}
ll sq_dist(int x, int y) {
	return (ll)x*x + (ll)y*y;
}
pair<int, int> reduce(int x, int y) {
	int g = gcd(x, y);
	return{x/g, y/g};
}
int main()
{
	scanf("%d", &q);
	while (q--) {
		int t, x, y;
		scanf("%d%d%d", &t, &x, &y);
		if (t == 3) {
			pair<int, int> reduced = reduce(x, y);
			printf("%d\n", n - on_line[reduced] - 2*symm[reduced]);
		}
		else {
			int add = t == 1 ? 1 : -1;
			n += add;
			ll sq_d = sq_dist(x, y);
			if (t == 2) {
				circ_pnts[sq_dist(x, y)].erase({ x, y });
			}
			for (auto &p : circ_pnts[sq_d]) {
				symm[reduce(p.first + x, p.second + y)] += add;
			}
			if (t == 1) {
				circ_pnts[sq_dist(x, y)].insert({ x, y });
			}
			on_line[reduce(x, y)] += add;
		}
	}
	return 0;
}