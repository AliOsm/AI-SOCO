#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <functional>
#include <numeric>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <memory.h>

using namespace std;

typedef long long LL;

const int MOD = (int)1e9 + 7;

LL s[1 << 24];
int cnt[1 << 24];
LL f[1 << 5];
LL ff[1 << 5];

int n, k;
int x, y;

LL calc(int x)
{
	LL res = f[n];
	for(int i = 0; i < 1 << n; ++i)
	{
		if (s[i] == x)
		{
			res -= ff[cnt[i]];
			if (res < 0)
				res += MOD;
		}
	}
	return res;
}

int dp[1 << 24];

int main()
{
	scanf("%d", &n);
	for(int i = 0; i < n; ++i)
	{
		int x;
		scanf("%d", &x);
		s[1 << i] = x;
		cnt[1 << i] = 1;
	}
	for(int i = 1; i < 1 << n; ++i)
	{
		int j = i & (i - 1);
		s[i] = s[j] + s[i ^ j];
		cnt[i] = cnt[j] + cnt[i ^ j];
	}
	f[0] = 1;
	for(int i = 1; i <= n; ++i)
		f[i] = f[i - 1] * i % MOD;
	for(int i = 0; i <= n; ++i)
		ff[i] = f[i] * f[n - i] % MOD;
	scanf("%d", &k);
	if (k == 0)
	{
		printf("%d\n", (int)f[n]);
		return 0;
	}
	if (k == 1)
	{
		int x;
		scanf("%d", &x);
		printf("%d\n", (int)calc(x));
		return 0;
	}
	scanf("%d%d", &x, &y);
	if (x == y)
	{
		printf("%d\n", (int)calc(x));
		return 0;
	}
	if (x > y)
		swap(x, y);
	memset(dp, 0, sizeof(dp));
	for(int mask = (1 << n) - 1; mask >= 0; --mask)
	{
		if (s[mask] == x || s[mask] == y)
		{
			dp[mask] = 0;
			continue;
		}
		if (cnt[mask] == n)
		{
			dp[mask] = 1;
			continue;
		}
		if (s[mask] > y)
		{
			dp[mask] = f[n - cnt[mask]];
			continue;
		}
		int m = (1 << n) - mask - 1;
		while (m)
		{
			int p = m;
			m = m & (m - 1);
			dp[mask] += dp[mask | (p - m)];
			if (dp[mask] >= MOD)
				dp[mask] -= MOD;
		}
	}
	printf("%d\n", dp[0]);
	return 0;
}