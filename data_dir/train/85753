#include <bits/stdc++.h>
using namespace std;
#define SZ(v) int((v).size())
#define ALL(vec) begin(vec), end(vec)
typedef long long i64;
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
#ifdef Rahul
# define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#else
# define error(...) 42;
#endif
string to_string(char c) { return "'" + string(1, c) + "'";}
string to_string(string s) { return '"' + s + '"';}
string to_string(const char* s) { return to_string((string) s);}
template<typename A> string to_string(A);
template<typename A, typename B> string to_string(pair<A, B> p){
  return "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}
template<typename A> string to_string(A v) {bool f = false; string r = "{"; 
  for (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}
template<typename A> string to_string(vector<vector<A>> v) {string r; 
  for (auto x: v) r += "\n" + to_string(x); return r;}
int Nerr;
template<typename A> string to_string(A *p) {return to_string(vector<A>(p, p + Nerr));}
void err(istream_iterator<string>) { cerr << endl; }
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << to_string(a) << "; "; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
#define Lu(...) [&] (auto &&u) { return __VA_ARGS__; }
#define Luv(...) [&] (auto &&u, auto &&v) { return __VA_ARGS__; }
int const MOD = 1e9 + 7;
i64 const INF = 1e18 + 42;
/***********************************************************************/

void solve_case() {
  int n, k; cin >> n >> k;
  const int K = 2 * k + 5;
  vector<int> d(K), c(K);
  n >>= 1;
  vector<int> a(n), b(n), l(n), r(n);
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
  }
  for (int i = 0; i < n; ++i) {
    cin >> b[n - 1 - i];
  }
  for (int i = 0; i < n; ++i) {
    c[a[i] + b[i]]++;
    l[i] = min(a[i], b[i]) + 1;
    r[i] = max(a[i], b[i]) + k;
    d[l[i]]++;
    d[r[i] + 1]--;
  }
  int ans = 2 * n;
  for (int i = 1; i < K; ++i) {
    d[i] += d[i - 1];
    int one = d[i];
    int two = n - d[i];
    uin(ans, two * 2 + one - c[i]);
  }
  cout << ans << '\n';
}
int32_t main() {
  cin.tie(nullptr) -> sync_with_stdio(false);

  int tt = 1;
  cin >> tt;
  while (tt--) {
    solve_case();
  }
}
