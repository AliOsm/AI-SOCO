#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

const long long MAX = 5100000;
const long long INF = 1LL << 60;
const long long MOD = 1'000'000'007LL;
const long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;


int main()
{
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	ll H, W;
	cin >> H >> W;
	vector<string> vs(H);
	for (ll i = 0; i < H; i++) cin >> vs[i];
	vector<vector<ll>>a(H + 1, vector<ll>(W + 1));
	vector<vector<ll>>b(H + 1, vector<ll>(W + 1));;
	vector<vector<pair<ll,ll>>> row(H), col(W);

	for (ll i = 0; i < H; i++) {
		ll l = -1;
		ll r = -1;
		for (ll j = 0; j < W; j++) {
			if (vs[i][j] == '*') {
				r = j;
				if (l == -1) l = j;
			}
			else {
				if (l == -1) continue;
				row[i].emplace_back(l, r);
				l = -1;
				r = -1;
			}
		}
		if (l != -1) row[i].emplace_back(l, r);
	}

	for (ll j = 0; j < W; j++) {
		ll u = -1;
		ll d = -1;
		for (ll i = 0; i < H; i++) {
			if (vs[i][j] == '*') {
				d = i;
				if (u == -1) u = i;
			}
			else {
				if (u == -1)continue;
				col[j].emplace_back(u, d);
				u = -1;
				d = -1;
			}
		}
		if (u != -1) col[j].emplace_back(u, d);
	}
	vector<tuple<ll, ll, ll>> res;

	for (ll i = 0; i < H; i++) {
		for (ll j = 0; j < W; j++) {
			if (vs[i][j] == '*') {
				ll d = INF;
				//cout << i << " " << j << " " << row[i].first << " " << row[i].second << " " << col[j].first << " " << col[j].second << endl;
				auto itr = lower_bound(row[i].begin(), row[i].end(), make_pair(j, INF));
				if (itr != row[i].begin()) {
					itr--;
					//cout << i<<" "<<j<<" "<<itr->first << " " << itr->second << endl;
					chmin(d, j - itr->first);
					chmin(d, itr->second - j);
				}
				auto itr2 = lower_bound(col[j].begin(), col[j].end(), make_pair(i, INF));
				if (itr2 != col[j].begin()) {
					itr2--;
					chmin(d, i - itr2->first);
					chmin(d, itr2->second - i);
				}
				if (d == 0 || d == INF) continue;
				//cout << d << endl;
				a[i][j - d]++;
				a[i][j + d + 1]--;
				b[i - d][j]++;
				b[i + d + 1][j]--;
				res.emplace_back(i + 1, j + 1, d);
			}
		}
	}

	for (ll i = 0; i < H; i++) {
		for (ll j = 0; j < W - 1; j++) {
			a[i][j + 1] += a[i][j];
		}
	}
	for (ll j = 0; j < W; j++) {
		for (ll i = 0; i < H - 1; i++) {
			b[i + 1][j] += b[i][j];
		}
	}

	vector<string> check(H, string(W, '.'));
	for (ll i = 0; i < H; i++) {
		for (ll j = 0; j < W; j++) {
			if (a[i][j] > 0 || b[i][j] > 0) {
				check[i][j] = '*';
			}
		}
	}
	if (vs == check) {
		ll sz = res.size();
		cout << sz << "\n";
		for (ll i = 0; i < sz; i++) {
			ll x, y, z;
			tie(x, y, z) = res[i];
			cout << x << " " << y << " " << z << "\n";
		}
	}
	else {
		cout << -1 << endl;
	}
	return 0;
}
