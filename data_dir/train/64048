/********************************************************
 *    #####   #    #    ##     ####    #   #    ##      *
 *    #    #  #    #   #  #   #    #    # #    #  #     *
 *    #####   ######  #    #  #          #    #    #    *
 *    #    #  #    #  ######  #  ###     #    ######    *
 *    #    #  #    #  #    #  #    #     #    #    #    *
 *    #####   #    #  #    #   ####      #    #    #    *
 ********************************************************/

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define	endl		'\n'
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define rep(i,a,b)	for(ll int i=a;i<b;i++)
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
using namespace std;

#define N  100005
#define INF  1000050000500

ll int n,m,k;

ll int dist[N],vis[N];
vector<pii> a[N];
priority_queue<pii> q;
ll int train[N];

ll int ans=0;

void dijkstra(ll int x)
{
	dist[x]=0;
	q.push({0,x});
	while(!q.empty())
	{
		ll int cur=q.top().S;
		q.pop();
		if(!vis[cur])
		{
			vis[cur]=1;
			for(auto i:a[cur])
			{
				if(dist[i.F]>dist[cur]+i.S)
				{
					dist[i.F]=dist[cur]+i.S;
					q.push({-dist[i.F],i.F});
				}
			}
			if(cur==1)
			{
				for(ll int i=1;i<=n;i++)
				{
					if(train[i]!=INF)
					{
						if(dist[i]>dist[cur]+train[i])
						{
							dist[i]=dist[cur]+train[i];
							q.push({-dist[i],i});
						}
					}
				}
			}
		}
	}
}

vector<pii> a2[N];
ll int degree[N];

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		cin>>n>>m>>k;
		for(ll int i=1;i<=n;i++) 
		{
			vis[i]=0;
			dist[i]=INF;
			train[i]=INF;
		}
		while(m--)
		{
			ll int n1,n2,w;
			cin>>n1>>n2>>w;
			a[n1].pb({n2,w});
			a[n2].pb({n1,w});
		}
		while(k--)
		{
			ll int s,y;
			cin>>s>>y;
			if(train[s]!=INF) ans++;
			train[s]=min(train[s],y);
		}
		dijkstra(1);
		memset(degree,0,sizeof(degree));
		for(ll int i=1;i<=n;i++)
		{
			for(auto j:a[i])
			{
				if(dist[j.F]==dist[i]+j.S)
				{
					degree[j.F]++;
				}
			}
		}
		for(ll int i=1;i<=n;i++)
		{
			if(train[i]!=INF)
			{
				if(dist[i]==dist[1]+train[i]&&degree[i]==0) ans+=0; else ans++;
			}
		}
		cout<<ans;
	}
	return 0;
}