#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("input.txt");ofstream out("output.txt");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

ll a, s=0;
vec<ll> m;

int main() {
    fast;
    cin>>a;
    m = vec<ll>(a+1);
    for(int q=1; q<=a; q++) cin>>m[q], s+=m[q];
    map<ll, ll> cnt;
    map<pll, ll> xyu;
    ll d = 0, z; cin>>z;
    for(;z--;){
        ll RESURS,KOLVO,u; cin>>RESURS>>KOLVO>>u;
        if(xyu.count({RESURS, KOLVO})){
            ll c = xyu[{RESURS, KOLVO}];
            xyu.erase({RESURS, KOLVO});
            cnt[c]--;
            if(cnt[c] < m[c]) d--;
        }
        if(u>0){
            xyu[{RESURS, KOLVO}] = u;
            cnt[u]++;
            if(cnt[u]<=m[u]) d++;
        }
        cout<<s-d<<"\n";
    }
}