#include<bits/stdc++.h>
using namespace std;


const int N = 105;


int bad[N][N];


int n, m;
map < int, int > used[N];
vector < int > g[N];
set < pair < int, int > > vec[N];

int main(){
    //ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin >> n >> m;
    for(int i = 1; i <= n; i++){
        for(int j = i + 1; j <= n; j++){
            bad[i][j] = bad[j][i] = true;
        }
    }
    for(int i = 1; i <= m; i++){
        int x, y;
        cin >> x >> y;
        bad[x][y] = bad[y][x] = false;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    for(int i = 1; i <= n; i++){
        g[i].push_back(0);
    }
    for(int i = 1; i <= n; i++){
        int pos = 1;
        for(int j : g[i]){
            while(true){
                bool p1 = true, p2 = true;
                for(int k = 1; k <= n; k++){
                    if(bad[i][k] && used[k].find(pos) != used[k].end()){
                        p1 = false;
                        break;
                    }
                }
                for(int k = 1; k <= n; k++){
                    if(bad[j][k] && used[k].find(pos) != used[k].end()){
                        p2 = false;
                        break;
                    }
                }
                if(p1 && p2){
                    vec[i].insert(make_pair(i, pos));
                    vec[j].insert(make_pair(j, pos));
                    used[i][pos] = true;
                    used[j][pos] = true;
                    pos++;
                    break;
                }
                pos++;
            }
        }
        cout << (int)vec[i].size() << "\n";
        for(auto it : vec[i]){
            cout << it.first << " " << it.second << "\n";
        }
    }
}
