#include <bits/stdc++.h>
using namespace std;

using ll = long long;
const int sz = 1e5 + 10;
const ll inf = 1e18;

int n, m;

vector < int > G[sz], W[sz], T[sz], B[sz];
ll dis[sz];

void dijk() {
        memset(dis, 63, sizeof dis);
        auto cmp = [](int a, int b) { return dis[a] > dis[b];};
        priority_queue < int, vector < int >, decltype(cmp) > PQ(cmp);
        dis[1] = 0;
        PQ.push(1);
        while (!PQ.empty()) {
                int u = PQ.top(); PQ.pop();
                int len = G[u].size();
                for (int i = 0; i < len; i++) {
                        int v = G[u][i];
                        ll w = W[u][i];
                        ll ww = dis[u] + w;
                        if (binary_search(T[u].begin(), T[u].end(), dis[u])) {
                                ww = B[u][lower_bound(T[u].begin(), T[u].end(), dis[u]) - T[u].begin()] + w;
                        }
                        if (dis[v] > ww) {
                                dis[v] = ww;
                                PQ.push(v);
                        }
                }
        }
        if (dis[n] >= dis[0]) dis[n] = -1ll;
}

int main() {
#ifdef CLown1331
        freopen( "in.txt", "r", stdin );
#endif // CLown1331

        while (scanf("%d %d", &n, &m) == 2) {

                for (int i = 0; i <= n; i++) G[i].clear(), W[i].clear(), T[i].clear();

                while (m--) {
                        int x, y, w;
                        scanf("%d %d %d", &x, &y, &w);
                        G[x].push_back(y);
                        W[x].push_back(w);
                        G[y].push_back(x);
                        W[y].push_back(w);
                }

                for (int i = 1; i <= n; i++) {
                        int t;
                        scanf("%d", &t);
                        T[i].resize(t);
                        B[i].resize(t);
                        for (int &x: T[i]) {
                                scanf("%d", &x);
                        }
                        int pr = INT_MAX;
                        for (int j = t - 1; j >= 0; j--) {
                                if (T[i][j] + 1 == pr) {
                                        B[i][j] = B[i][j + 1];
                                } else {
                                        B[i][j] = T[i][j] + 1;
                                }
                                pr = T[i][j];
                        }
                }                

                dijk();

                printf("%lld\n", dis[n]);

                cerr << "-----\n";
        }

        return 0;
}