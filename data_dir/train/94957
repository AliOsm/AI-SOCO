#include <bits/stdc++.h>
#define limit 1000005
using namespace std;
int n,A[limit],bas[limit],son[limit];
long long int cev;
map <int,int> mp;
vector <int> tree[limit*4];
void build(int node,int start,int end)
{
    if(start==end)
    {
        vector <int> v;
        v.push_back(bas[start]);
        tree[node]=v;
        return ;
    }
    int mid=(start+end)/2;
    build(node*2,start,mid);
    build(node*2+1,mid+1,end);
    vector <int> v(end-start+1);
    merge(tree[node*2].begin(),tree[node*2].end(),tree[node*2+1].begin(),tree[node*2+1].end(),v.begin(),greater <int>());
    tree[node]=v;
}
int query(int node,int start,int end,int l,int r,int val)
{
    if(start>r || end<l) return 0;
    if(l<=start && r>=end)
    {
        int lo=0;
        int hi=tree[node].size()-1;
        while(lo<=hi)
        {
            int mid=(lo+hi)/2;
            if(tree[node][mid]>val) lo=mid+1;
            else hi=mid-1;
        }
        return lo;
    }
    int mid=(start+end)/2;
    return query(node*2,start,mid,l,r,val)+query(node*2+1,mid+1,end,l,r,val);
}
int main()
{
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        scanf("%d",&A[i]);
    }
    for(int i=1;i<=n;i++)
    {
        bas[i]=++mp[A[i]];
    }
    mp.clear();
    build(1,1,n);
    for(int i=n;i>=1;i--)
    {
        son[i]=++mp[A[i]];
        cev+=query(1,1,n,1,i-1,mp[A[i]]);
    }
    printf("%lld",cev);
    return 0;
}
