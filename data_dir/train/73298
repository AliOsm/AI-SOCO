#include <bits/stdc++.h>

using namespace std; 

#define SZ(x) (((int) x.size()))
#define rep(i, s, e) for(int i = s; i < e; i ++)

 
typedef long double ld;
const int maxN = 50 + 5;
const int maxM = 400*400 + 300;
const long long mod = 1000*1000*1000 + 7;

vector<int> a[maxN][maxN], ar[maxN][maxN];
int n;

int mp[maxN][maxN], mpr[maxN][maxN];

void check(int v, int u)
{
//    cout << v << ' ' << u << endl;

    for(int i = 0; i + 1 < a[v][u].size(); i ++)
	  if(a[v][u][i] == v && a[v][u][i + 1] == u) 
	  {
		vector<int> v1, v2;

		for(int j = 0; j + 1 < ar[u][v].size(); j ++)
		    if(ar[u][v][j] == u && ar[u][v][j + 1] == v)
			  for(int k = j; k < ar[u][v].size(); k ++)
				v1.push_back(ar[u][v][k]);
		
		for(int j = i; j < a[v][u].size(); j ++)
		    v2.push_back(a[v][u][j]);
		
		int ps = 1;
		
		while(ps + 1 < v1.size())
		{
		    if(v1.size() > 2 * n) return;
		   
		    int xv = v1[ps], xu = v1[ps + 1];

		    if(mpr[xv][xu] == 0) return;

		    rep(j, 0, ar[xv][xu].size())
			  v1.push_back(ar[xv][xu][j]);
		
		    ps ++;
		}

		ps = 1;

		while(ps + 1 < v2.size())
		{
		    if(v1.size() + v2.size() - 2 > 2 * n) return;
		    
		    int xv = v2[ps], xu = v2[ps + 1];

		    if(mp[xv][xu] == 0) return;

		    rep(j, 0, a[xv][xu].size())
			  v2.push_back(a[xv][xu][j]);
		    ps ++;
		}

		reverse(v1.begin(), v1.end()); v1.pop_back(); v1.pop_back();
		cout << v1.size() + v2.size() << endl;

		rep(j, 0, v1.size()) cout << v1[j] + 1 << ' ';
		rep(j, 0, v2.size()) cout << v2[j] + 1 << ' ';
		cout << endl;
		exit(0);
	  }

}

main() 
{
    ios::sync_with_stdio(0); cin.tie(0); 
    int m; cin >> n >> m;

    vector< pair<int, int> > ed;

    rep(i, 0, m)
    {
	  int v, u; cin >> v >> u; v --; u --;

	  mp[v][u] = mpr[u][v] = 1;
	  
	  int k; cin >> k;

	  rep(j, 0, k)
	  {
		int x; cin >> x; x --;
		a[v][u].push_back(x);
		ar[u][v].push_back(x);
	  }

	  reverse(ar[u][v].begin(), ar[u][v].end());
	  
	  ed.push_back({v, u});
    }

    rep(i, 0, m)
	  check(ed[i].first, ed[i].second);

    cout << 0 << endl;
    return 0;
}
