//Problem D will go here
 /*
 Problem name :
 Algorithm : Not Sure Yet
 Contest/Practice :
 Source :
 Comment : Whenever you start to believe  yourself, people also start to believe in you
 Date : --
 Last Update : 25-Mar-2015
*/

#include<bits/stdc++.h>

#define pause           system("pause");
#define FOR(s,e,inc)    for(int i=s;i<=e;i+=inc)
#define mod             1000000007
#define inf             1<<30
#define pb              push_back
#define ppb             pop_back
#define mp              make_pair
#define F               first
#define S               second
#define sz(x)           ((int)x.size())
#define sqr(x)          ( (x)* (x) )
#define eps             1e-9
#define lcm(x,y)        (abs(x) /gcd(x,y))* abs(y)
#define on(x,w)         x|(1<<w)
#define check(x,w)      (x&(1<<w))
#define all(x)          (x).begin(),(x).end()
#define pf              printf
#define sf              scanf
#define pi              acos(-1.0)
#define reset(x,v)      memset(x,v,sizeof(x));
#define AND             &&
#define OR              ||
#define what_is(x)      cerr<<#x<<" is "<<x<<"\n";

typedef long long ll;
typedef unsigned long long llu;

using namespace std;


template<class T>
inline T mod_v(T num)
{
    if(num>=0)
        return num%mod;
    else
        return (num%mod+mod)%mod;
}
template<class T>
inline T gcd(T a,T b)
{
    a=abs(a);
    b=abs(b);

    while(b) b ^= a ^= b ^= a %= b;
    return a;
}

template<class T>
T fast_pow(T n , T p)
{
    if(p==0) return 1;
    if(p%2)
    {
        T g=mod_v ( mod_v(n) * mod_v(fast_pow(n,p-1)) );
        return g;
    }
    else
    {
        T g=fast_pow(n,p/2);
        g=mod_v( mod_v(g) * mod_v(g) ) ;
        return g;
    }
}

template<class T>
inline T modInverse(T n)
{
    return fast_pow(n,mod-2);
}
 

bool equalTo ( double a, double b ){ if ( fabs ( a - b ) <= eps ) return true; else return false; }
bool notEqual ( double a, double b ){if ( fabs ( a - b ) > eps ) return true; else return false; }
bool lessThan ( double a, double b ){ if ( a + eps < b ) return true; else return false; }
bool lessThanEqual ( double a, double b ){if ( a < b + eps ) return true;   else return false;}
bool greaterThan ( double a, double b ){if ( a > b + eps ) return true;else return false;}
bool greaterThanEqual ( double a, double b ){if ( a + eps > b ) return true;else return false;}

#define debug(args...) {dbg,args; cerr<<endl;}

struct debugger{
    template<typename T> debugger& operator , (const T& v){
        cerr<<v<<" ";
        return *this;
    }
}dbg;

int nextInt() { int n; scanf("%d", &n); return n; }
long long nextLong() { long long n; scanf("%lld", &n); return n; }
void print(int n){ printf("%d", n); }
void println(int n){ printf("%d\n", n); }
void println(long long n){ printf("%lld\n", n); }



template<class T>
inline int in(register T& num)
{
    register char c=0;
    num=0;
    bool n=false;
    while(c<33)c=getchar();
    while(c>33){
        if(c=='-')
            n=true;
        else num=num*10+c-'0';
        c=getchar();
    }
    num=n?-num:num;
    return 1;
}

/******* ! Code start from here ! *******/

int tree[4*1000006];
int mark[1000006];
int lazy[4*1000006];
int u,v,s;
int mx = 1000000;

void build(int nod,int l,int r){

    lazy[nod] = 0;
    if(l==r){
        tree[nod] = mark[l];
        return;
    }

    int mid = (l+r)>>1;
    int left = nod<<1;
    int right =  left |1;

    build(left,l,mid);
    build(right,mid+1,r);

    tree[nod]  = tree[left ] + tree[right];
}


void update(int nod,int l,int r){

    if(r<u or v<l or s==0)
        return;

    if(u<=l and r<=v and s>=tree[nod] ){
        s-=tree[nod];
        tree[nod] = 0;
        lazy[nod] = 1;     
        return;
    }

 
    int mid = (l+r)>>1;
    int left = nod<<1;
    int right =  left |1;

    if(lazy[nod]){
        lazy[left] = lazy[right] = 1;
        tree[left] = tree[right] = 0;
        lazy[nod] = 0;
    }

   
    update(right,mid+1,r);    
    if(s)
        update(left,l,mid);

    tree[nod]  = tree[left ] + tree[right];
}


void qu(int nod,int l,int r){

    if(r<u or v<l  )
        return;

    if(u<=l and r<=v){
        s+=tree[nod];
        return;
    }
 
    int mid = (l+r)>>1;
    int left = nod<<1;
    int right =  left |1;

    if(lazy[nod]){
        lazy[left] = lazy[right] = 1;
        tree[left] = tree[right] = 0;
        lazy[nod] = 0;
    }

    qu(left,l,mid);
    qu(right,mid+1,r);
 
    tree[nod]  = tree[left ] + tree[right];
}




int main()
{
//     std::ios_base::sync_with_stdio(false);

    #ifdef kimbbakar
        freopen ( "E:/Code/in.txt", "r", stdin );
//        freopen ( "E:/Code/out.txt", "w", stdout );
    #endif

    int n,m,k,vv;

    in(n),in(m),in(k);
    vector<int>kp;

    for(int i=1;i<=n;i++){
        in(vv);

        mark[vv] = 1;
        kp.pb(vv);
    }

    build(1,1,mx);

    int res = 0;

    sort(all(kp) );


    for(auto i:kp){
        s = 0;
        u =v =i;

        qu(1,1,mx);

        if(s){
            s = 0;
            u =i;
            v = i + m-1;

            qu(1,1,mx);

            if(s>=k){
                s = s-k + 1;
                res+=s;
                update(1,1,mx);
            }

        }
    }

    cout<<res;

    return 0;
}



