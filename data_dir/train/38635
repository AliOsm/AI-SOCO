#include <bits/stdc++.h>
using namespace std;

#ifdef SG
    #include <debug.h>
#else
    #define show(...)
    #define debug(...)
    #define deepen(...)
    #define timer(...)
#endif

#define forn(i,n) for (int i = 0; i < int(n); ++i)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; --i)
#define forv(i,v) for (auto i = v.begin(); i != v.end(); ++i)
#define forr(i,v) for (auto i = v.end(); i != v.begin() && (--i, 1); )
#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T> inline T abs (T x) {return x > T() ? x : -x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int K = 700;
const int N = 200100;

struct Input {
    int n;
    int a[N];   

    bool read () {
        if (scanf ("%d", &n) != 1)
            return 0;
        forn(i, n)
            scanf ("%d", &a[i]);
        return 1;
    }

    void init (const Input &input) {
        *this = input;
    }
};

struct Data: Input {
    int ans[N];

    void write () {
        forn(i, n - 1) {
            cout << ans[i] << ' ';
        }
        cout << endl;
    }
    
    virtual void solve () {}
    
    virtual void clear () {
        *this = Data();
    }
};

struct Solution: Data {
    
    vector <pair<int, int> > ord;

    int f[N];

    void upd (int v, int k) {
        for (int st = v; st < n; st = (st | (st + 1))) {
    //      debug(st);
            f[st] += k;
        }
    }

    int fnd (int v) {
        int res = 0;
        for (int st = v; st >= 0; st = (st & (st + 1)) - 1) {
    //      debug(st);
    //      debug('!');
            res += f[st];
        }
        return res;
    }
    
    int get (int l, int r) {
        int res = fnd(r);
        if (l > 0)
            res -= fnd(l - 1);
        return res;
    }

    void solve () {
        for (int k = 1; k < min(n, K); ++k) {
            for (int j = 0; j < n; ++j) {
                int st = k * j + 1;
                for (int t = st, cnt = 0; t < n && cnt < k; ++cnt, ++t) {
                    if (a[j] > a[t]) {
                        ans[k - 1]++;
                    }   
                }   
            }   
        }
        forn(i, n)
            ord.pb(mp(a[i], i));
        sort(all(ord));
        memset(f, 0, sizeof(f));
        for (int i = 0; i < int(ord.size());) {
            int j = i;
            for (; j < (int)ord.size() && ord[i].fs == ord[j].fs; ++j) {
                int idx = ord[j].sc;
             //   debug(idx);
                for (int k = K; k < n; ++k) {
                    if (1ll * k * idx + 1 >= n) {
                        break;
                    }   
                    //debug(k);
                    ans[k - 1] += get(k * idx + 1, min(k * idx + k, n - 1));
                }   
            }
            for (int k = i; k < j; ++k) {
            //  debug();
                upd(ord[k].sc, 1);
            }
            i = j;
        }
    }
    
    void clear () {
        *this = Solution();
    }
};

Solution sol;

int main () {
    cout.setf(ios::showpoint | ios::fixed);
    cout.precision(20);
#ifdef SG
    freopen("f.in", "r", stdin);
//  freopen(".out", "w", stdout);
    while (sol.read()) {
        sol.solve();
        sol.write();
        sol.clear();
    }
#else
    sol.read();
    sol.solve();
    sol.write();
#endif

    return 0;
}
