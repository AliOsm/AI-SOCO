#include<bits/stdc++.h>
using namespace std;

# define C continue;
# define R return

# define D double
# define I insert
# define ll long long
# define ld long double

# define ull unsigned long long
# define ui unsigned int

# define pb push_back
# define pf push_front

# define vi vector < int >
# define vc vector < char >
# define vs vector < string >
# define vb vector < bool >
# define vd vector < D >
# define vll vector < ll >
# define vull vector < ull >
# define vld vector < ld >
# define PQ priority_queue

# define vvi vector < vector < int > >
# define vvb vector < vector < bool > >
# define vvc vector < vector < char > >
# define vvll vector < vector < ll > >
# define vvd vector < vector < D > >
# define vvld vector < vector < ld > >

# define all(v) (v).begin() , (v).end()
# define allrev(v) (v).rbegin() , (v).rend()
# define allcomp(v) v.begin() , v.end() , comp
# define allrevcomp(v) v.rbegin() , v.rend() , comp

# define pii pair < int , int >
# define pll pair < ll , ll >
# define pld pair < ld , ld >
# define pDD pair < D , D >

# define vpld vector < pld >
# define vpii vector < pii >
# define vpll vector < pll >
# define vpDD vector < pDD >

# define vvpii vector < vector < pii > >
# define F first
# define S second
# define mp make_pair

# define dist(a,b,p,q) sqrt((p-a)*(p-a) + (q-b)*(q-b))

# define pp(n) printf("%.10Lf",n);
# define line cout<<"\n";
# define fast ios_base::sync_with_stdio(false) ; cin.tie(0) ; cout.tie(0);

string vow = "aeiou";
int month[] = {-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

const int dxhorse[] = {-2, -2, -1, -1, 1, 1, 2, 2};
const int dyhorse[] = {1, -1, 2, -2, 2, -2, 1, -1};

const int dx[] = { -1 , 0 , 0 , 1 } ;
const int dy[] = { 0 , -1 , 1 , 0 } ;

const ld pie = 3.14159265358979 ;
const ll mod = 1e9 + 7 ;

// Tip : ceil ( a/b ) = 1 + floor( (a-1)/b ) !

int n , m ;
vpii ed ;

void read()
{
    cin >> n >> m ;
    ed.resize ( m ) ;

    for ( int i=0 ; i < m ; i ++ )
    {
        int a , b ;
        cin >> a >> b ;

        a -- ; b -- ;
        ed[i] = { a , b } ;
    }
}

const int N = 1e5 + 2 ;

int dp[N] , vis[N] ;
vi g[N] ;

vi top_order ;

void FILL()
{
    for ( int i=0 ; i < n ; i ++ )
    {
        vis[i] = false ; dp[i] = 1 ;
        g[i].clear() ;
    }
    top_order.clear() ;
}

void dfs ( int node )
{
    vis[node] = true ;

    for ( auto i : g[node] )
    {
        if ( vis[i] ) C ;
        dfs ( i ) ;
    }

    top_order.pb ( node ) ;
}

void solve ( int test_case )
{
    read() ;

    int ans = -1 ;
    for ( int lo = 1 , hi = m ; lo <= hi ; )
    {
        int mid = lo + hi >> 1 ;

        FILL() ;
        for ( int i=0 ; i < mid ; i ++ )
        {
            int a = ed[i].F ;
            int b = ed[i].S ;

            g[a].pb ( b ) ;
        }

        for ( int i=0 ; i < n ; i ++ )
        {
            if ( vis[i] == false )
                dfs ( i ) ;
        }

        int max_h = 0 ;
        for ( int node : top_order )
        {
            for ( auto i : g[node] )
            {
                dp[node] = max ( dp[node] , 1 + dp[i] ) ;
            }

            max_h = dp[node] ;
        }

        if ( max_h == n )
        {
            ans = mid ;
            hi = mid - 1 ;
        }

        else lo = mid + 1 ;
    }

    cout << ans ; line
}

int main()
{fast
    int t = 1;
    // cin >> t;

    for ( int i=0 ; i < t ; i++ ) solve(i);
    return 0;
}
