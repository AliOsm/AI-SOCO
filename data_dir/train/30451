#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cassert>
#include <ctime>
#include <deque>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); i ++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i --)
#define mp make_pair
#define pb push_back
#define fs first
#define sc second
#define pi 3.1415926535897932384626433832795l

typedef long long ll;
typedef long double ld;

int a[1010][1010];
int n, m;
const int dx[4] = {0, 0, -1, 1};
const int dy[4] = {-1, 1, 0, 0};

int ans = 0;

inline int gcd(int a, int b){
    if (a == 0 || b == 0) return a + b;
    return gcd(b, a % b);
}

inline int kol(int i, int j){
    int kol1 = 0;
    forn(k, 4){
        int x = dx[k] + i, y = dy[k] + j;
        if (x < 0 || y < 0 || x >= n || y >= m) continue;
        if (a[x][y] == 1) kol1 ++;
    }   

    return kol1;
}


inline bool check(int i, int j){
    int k = kol(i, j);
    if (k != 2) 
        return true;
    if (i != 0 && i != n - 1){
        if (a[i + 1][j] == 1 && a[i - 1][j] == 1) 
            return false;
    }
    if (j != 0 && j != m - 1){
        if (a[i][j - 1] == 1 && a[i][j + 1] == 1) 
            return false;
    }
    return true;

}

bool use[1010][1010];
int glob;

void dfs(int u, int v){
    use[u][v] = true;
    glob ++;
    forn(i, 4){
        int x = u + dx[i], y = v + dy[i];
        if (x < 0 || y < 0 || x >= n || y >= m || a[x][y] == 0 || use[x][y]) continue;
        dfs(x, y);
    }
}

int main(){
#ifdef LOCAL
    freopen ("input.txt","rt",stdin);
//  freopen ("output.txt","wt",stdout);
#endif
    scanf ("%d %d\n", &n, &m);
    ans = 0;
    forn(i, n)
        forn(j, m)
            scanf ("%d", &a[i][j]);
    int last = -1;
    int sc = 0, col = 0;
    glob = 0;
    forn(i, n){
        forn(j, m)
            if (a[i][j] == 1){
                dfs(i, j);
                break;
            }
            if (glob > 0) break;
        }
    forn(i, n){
        forn(j, m){
            if (a[i][j] == 0) continue;
            if (kol(i, j) == 1) sc ++;
            col ++;
            if (kol(i, j) == 0) {
                cout << -1 << endl;
                return 0;
            }       
            if (check(i, j)){
                if (last != -1) 
                    ans = gcd(ans, i - last);
//              cerr << i << endl;
                last = i;
            }
        }
    }
    last = -1;
    forn(j, m){
        forn(i, n){
            if (a[i][j] == 0) continue;                  
            if (check(i, j)){
                if (last != -1) 
                    ans = gcd(ans, j - last);   
                //cerr << j << endl;
                last = j;
            }
        }
    }

    if (col != glob || ans == 1 || sc > 2){
        cerr << sc << ' ' << glob << ' ' << col << ' ' << ans << endl;
        cout << -1 << endl;
        return 0;
    }
    for (int i = 2; i <= ans; ++ i){
        if (ans % i == 0){
            cout << i << ' ';
        }
    }
    cout << endl;
    


    return 0;
}
