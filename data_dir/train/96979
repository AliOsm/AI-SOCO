#include <bits/stdc++.h>

using namespace std;
int LG[100100];
int a[100100];
int sTable[100100][17];
int n;
void build() {
  LG[0] = -1;
  for (int i = 0; i < n; i++) {
    LG[i + 1] = LG[i] + !(i & (i + 1));
    sTable[i][0] = a[i];
  }
  for (int j = 1; (1 << j) <= n; j++)
    for (int i = 0; i + (1 << j) <= n; i++) {
      int a = sTable[i][j - 1];
      int b = sTable[i + (1 << (j - 1))][j - 1];
      sTable[i][j] = __gcd(a,b);
    }
}
int qry(int s, int e) {
  int len = e - s + 1;
  int lg = LG[len];
  int a = sTable[s][lg];
  int b = sTable[e - (1 << lg) + 1][lg];
  return __gcd(a,b);
}
int bs(int S,int s,int g)
{
    int e=n-1;
    while(s<e)
    {
        int mid=(s+e+1)/2;
        if(qry(S,mid)==g) s=mid;
        else e=mid-1;
    }
    return s;
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    cin>>n;
    for(int i=0;i<n;i++)
        cin>>a[i];
    map<int,long long>cnt;
    build();
    for(int i=0;i<n;i++)
    {
        int cur=i;
        while(cur<n)
        {
            int ncur=bs(i,cur,qry(i,cur));
            cnt[qry(i,cur)]+=(ncur-cur+1);
            assert(qry(i,cur)==qry(i,ncur));
            assert(ncur>=0&&ncur<n);
            cur=ncur;
            cur++;
        }
    }
    int q;cin>>q;
    while(q--)
    {
        int x;cin>>x;
        cout<<cnt[x]<<'\n';
    }
    return 0;
}
