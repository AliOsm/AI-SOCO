#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <tuple>
#define ll long long
using namespace std;

bool is_blocked[2][111111];


int main() {
    int n,Q;
    cin>>n>>Q;
    for(int i=0;i<=n+1;i++) {
        is_blocked[0][i]=is_blocked[1][i]=false;
    }
    
    // (x,y) and (1-x,y+1)
    
    set<int> y_cross_blocks[2];
    
    set<int> y_straight_blocks;
    
    
    for(int q=1;q<=Q;q++) {
        int x,y;
        cin>>x>>y;
        x--;
        if (is_blocked[x][y]) {
            is_blocked[x][y]=false;
            if (is_blocked[1-x][y+1]) {
                y_cross_blocks[x].erase(y);
            }
            
            if (is_blocked[1-x][y-1]) {
                y_cross_blocks[1-x].erase(y-1);
            }
            
            if (!is_blocked[0][y] || !is_blocked[1][y]) {
                y_straight_blocks.erase(y);
            }
            
            
            
            
        } else {
            is_blocked[x][y]=true;
            if (is_blocked[1-x][y+1]) {
                y_cross_blocks[x].insert(y);
            }
            
            if (is_blocked[1-x][y-1]) {
                y_cross_blocks[1-x].insert(y-1);
            }
            if (is_blocked[0][y] && is_blocked[1][y]) {
                y_straight_blocks.insert(y);
            }
            
            
        }
        
//        
//        
//        for(int i=1;i<=n;i++) {
//            printf("%d%d\n",is_blocked[0][i],is_blocked[1][i]);
//        }
//        
        if (!is_blocked[0][1] && !is_blocked[1][n] && y_cross_blocks[0].empty() && y_cross_blocks[1].empty() && y_straight_blocks.empty()) {
            printf("Yes\n");
        } else {
            printf("No\n");
        }
        
        
    }
    
    
}
