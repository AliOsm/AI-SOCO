#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 10;
const long long MOD = 1e9 + 7;
int n, k, vertexCnt;
vector<int> graph[N];
bool used[N];
void dfs(int v){
	used[v] = true;
	vertexCnt++;
	for (int i=0; i<graph[v].size(); i++){
		int child = graph[v][i];
		if (used[child] == false){
			dfs(child);
		}
	}
}
int main(){
	// freopen("input.txt", "r", stdin);
	// freopen("output.txt", "w", stdout);
	cin>>n>>k;
	for (int i=1; i<=n-1; i++){
		int from, to, color;
		cin>>from>>to>>color;
		if (color == 0){
			graph[from].push_back(to);
			graph[to].push_back(from);
		}
	}
	long long ans = 1;
	for (int i=1; i<=k; i++){
		ans = 1LL * ans * n;
		ans = ans % MOD;
	}
	for (int i=1; i<=n; i++){
		if (used[i] == false){
			vertexCnt = 0;
			dfs(i);
			if (vertexCnt == 1){
				ans--;
				if (0 > ans){
					ans = ans + MOD;
				}
			}
			else{
				long long ansTemp = 1;
				for (int j=1; j<=k; j++){
					ansTemp = 1LL * ansTemp * vertexCnt;
					ansTemp = ansTemp % MOD;
				}
				ans = ans - ansTemp;
				if (0 > ans){
					ans = ans + MOD;
				}
			}
		}
	}
	cout<<ans;
}