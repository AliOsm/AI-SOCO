#include <bits/stdc++.h>
using namespace std;
#define finish(x) reutrn cout << x << endl, 0;
#define ll long long

int n, k, m[2002][2002];
bool c[2002][2002];
char grid[2002][2002];

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> k;
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= n ; j++)
            cin >> grid[i][j];
    for(int i = 0 ; i <= n ; i++)
        m[0][i] = m[i][0] = 1e9;
    m[1][1] = grid[1][1] != 'a';
    int mx = 0;
    for(int i = 1 ; i <= n ; i++){
        for(int j = 1 + (i == 1) ; j <= n ; j++){
            m[i][j] = min(m[i - 1][j], m[i][j - 1]) + 1 - (grid[i][j] == 'a');
            if(m[i][j] <= k) mx = max(mx, i + j - 2);
        }
    }
    set <pair <char, pair <int, int> > > bfs;
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= n ; j++)
            if(m[i][j] <= k && i + j - 2 == mx)
                c[i][j] = 1;
    string ans;
    if(k == 0) mx = -1, c[0][1] = 1;
    int diagonal = mx + 2;
    while(diagonal < 2 * n){
        char mn = 'z';
        for(int i = 1 ; i <= n ; i++){
            int j = diagonal - i + 1;
            if(1 <= j && j <= n && (c[i - 1][j] || c[i][j - 1])) mn = min(mn, grid[i][j]);
        }
        for(int i = 1 ; i <= n ; i++){
            int j = diagonal - i + 1;
            if(1 <= j && j <= n && (c[i - 1][j] || c[i][j - 1]) && grid[i][j] == mn)
                c[i][j] = 1;
        }
        diagonal++;
        ans += mn;
    }
    cout << string(mx + 1, 'a') << ans << endl;
}
