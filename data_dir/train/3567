#include <bits/stdc++.h>

using namespace std;

typedef unsigned uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ldbl;
typedef pair<int, int> pii;
typedef pair<uint, uint> puu;
typedef pair<ll, ll> pll;
typedef pair<ull, ull> pull;
typedef vector<int> vi;
typedef vector<uint> vu;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<pii> vpii;
typedef vector<puu> vpuu;
typedef vector<pll> vpll;
typedef vector<pull> vpull;
typedef vector<string> vstr;
typedef vector<double> vdbl;
typedef vector<ldbl> vldbl;
#define pb push_back
#define ppb pop_back
#define pfr push_front
#define ppfr pop_front
#define emp emplace
#define empb emplace_back
#define be begin
#define rbe rbegin
#define all(x) (x).be(), (x).end()
#define rall(x) (x).rbe(), (x).rend()
#define fir first
#define sec second
#define mkp make_pair
#define brif(cond) if (cond) break
#define ctif(cond) if (cond) continue
#define retif(cond) if (cond) return
static inline void canhazfast() {ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}
template<typename T> T gcd(T a, T b) {return b ? gcd(b, a%b) : a;}
template<typename T> T extgcd(T a, T b, T &x, T &y)
{
    T x0 = 1, y0 = 0, x1 = 0, y1 = 1;
    while (b) {
        T q = a/b; a %= b; swap(a, b);
        x0 -= q*x1; swap(x0, x1);
        y0 -= q*y1; swap(y0, y1);
    }
    x = x0; y = y0; return a;
}
int ctz(uint x) {return __builtin_ctz(x);}
int ctzll(ull x) {return __builtin_ctzll(x);}
int clz(uint x) {return __builtin_clz(x);}
int clzll(ull x) {return __builtin_clzll(x);}
int popcnt(uint x) {return __builtin_popcount(x);}
int popcntll(ull x) {return __builtin_popcountll(x);}
int bsr(uint x) {return 31^clz(x);}
int bsrll(ull x) {return 63^clzll(x);}

#define N 100016
#define SZ (1 << 19)

int qt[N];
ll l[N], r[N];
int tree[SZ], lazy[SZ];

void push(int u, int sz, int t)
{
    if (t == 1) tree[u] = sz;
    else if (t == 2) tree[u] = 0;
    else tree[u] = sz-tree[u];
    if (t < 3) lazy[u] = t;
    else lazy[u] ^= t;
}

void upd(int u, int b, int e, int l, int r, int t)
{
    retif(b >= r || l >= e);
    retif(b >= l && r >= e) push(u, e-b, t);
    int m = (b+e)/2, lc = 2*u, rc = 2*u+1;
    if (lazy[u]) {
        push(lc, m-b, lazy[u]);
        push(rc, e-m, lazy[u]);
        lazy[u] = 0;
    }
    upd(lc, b, m, l, r, t);
    upd(rc, m, e, l, r, t);
    tree[u] = tree[lc]+tree[rc];
}

int get(int u, int b, int e)
{
    retif(b+1 == e) b;
    int m = (b+e)/2, lc = 2*u, rc = 2*u+1;
    if (lazy[u]) {
        push(lc, m-b, lazy[u]);
        push(rc, e-m, lazy[u]);
        lazy[u] = 0;
    }
    return tree[lc] < m-b ? get(lc, b, m) : get(rc, m, e);
}

int main()
{
    canhazfast();

    int n, k;
    vll vals(1, 0LL);

    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> qt[i] >> l[i] >> r[i];
        vals.pb(--l[i]);
        vals.pb(r[i]);
    }
    sort(all(vals));
    vals.erase(unique(all(vals)), vals.end());
    //cerr << "vals ="; for (ll x : vals) cerr << ' ' << x; cerr << '\n';
    k = (int)vals.size();
    for (int i = 0; i < n; ++i) {
        //cerr << "i = " << i << '\n';
        l[i] = lower_bound(all(vals), l[i])-vals.be();
        r[i] = lower_bound(all(vals), r[i])-vals.be();
        //cerr << "  [" << l[i] << ", " << r[i] << ")\n";
        upd(1, 0, k, l[i], r[i], qt[i]);
        int p = get(1, 0, k);
        //cerr << "  p = " << p << '\n';
        cout << vals[p]+1 << '\n';
    }

    return 0;
}
