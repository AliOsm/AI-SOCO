#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <fstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <stack>
#include <iomanip>
#include <deque>
#include <list>
#include <cassert>
#include <complex>
#include <bitset>
#include <deque>


using namespace std;
typedef long long ll;
#define int ll
typedef long double ld;
typedef vector<int> vi;
typedef vector<ld> vld;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pdd;
typedef vector<pii> vpi;
typedef vector<pll> vpl;
typedef vector<pdd> vpd;
#define mmin(a, b) a = min(a, (b))
#define ALL(a) a.begin(),a.end()
#define RALL(a) a.rbegin(),a.rend()
#define SZ(a) ((int)(a).size())
#define watch(x) cout << (#x) << " = " << (x) << endl;
#define mp(a,b) make_pair((a),(b))


const int N = 1 << 20, K = 101, A = 201, B = 400, psz = 20;
const ll M = 1e9 + 9, x = 100019;
const ld pi = atan2(1, 0) * 2, EPS = 1e-9, oo = 1e10;


int cnt[N];
int n, m, l;
vi vl;


bool can(int ind)
{
	if (ind < 0 || ind >= n)
		return 0;

	return vl[ind] > l;
}


signed main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	srand(time(0));

	cout << fixed << setprecision(12);
	
	cin >> n >> m >> l;

	vl.resize(n);
	for (int i = 0; i < n; ++i)
		cin >> vl[i];

	int i = 0;
	while (i < n)
	{
		if (vl[i] <= l)
		{
			i++;
			continue;
		}

		for (int j = i; j < n; ++j)
		{
			if (vl[j] <= l || j + 1 == n)
			{
				cnt[i]++;
				i = j + 1;
				break;
			}
		}
	}

	int ans = count(cnt, cnt + N, 1);

	for (int i = 0; i < m; ++i)
	{
		int label;
		cin >> label;

		if (label)
		{
			int p, d;
			cin >> p >> d;
			p--;

			if (vl[p] > l)
				continue;

			vl[p] += d;

			if (vl[p] <= l)
				continue;
		
			
			if (can(p - 1) && can(p + 1))
			{
				cnt[p + 1] = 0;
				ans--;
			}
			else if (can(p + 1))
			{
				cnt[p + 1] = 0;
				cnt[p] = 1;
			}
			else if (!can(p - 1) && !can(p + 1))
			{
				cnt[p] = 1;
				ans++;
			}
		}
		else
			cout << ans << '\n';
	}
}