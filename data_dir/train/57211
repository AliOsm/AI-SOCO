#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_map>
#include<unordered_set>
using namespace std;
#define MAX 500002
/*vector<int> seg[MAX * 4];
vector<int> vv[MAX * 4];
int siz[MAX * 4];
void add(int i, int j, int x) {
j = lower_bound(vv[i].begin(), vv[i].end(), j) - vv[i].begin();
j++;
while (j < siz[i]) {
if (seg[i][j] < x) {
seg[i][j] = x;
}
else {
break;
}
j += j&-j;
}
}
int upper_boun(int i, int j) {
int r = -1;
j = upper_bound(vv[i].begin(), vv[i].end(), j) - vv[i].begin();
while (j) {
if (r < seg[i][j]) {
r = seg[i][j];
}
j -= j&-j;
}
return r;
}
inline void pre_add(int b, int l, int r, int ll, int x) {
if (l <= ll&&ll < r) {
vv[b].push_back(x);
if (l + 1 == r) {
return;
}
pre_add(b * 2 + 1, l, (l + r) >> 1, ll, x);
pre_add(b * 2 + 2, (l + r) >> 1, r, ll, x);
}
}
inline void add(int b, int l, int r, int ll, int x) {
if (l <= ll&&ll < r) {
add(b, x, x);
if (l + 1 == r) {
return;
}
add(b * 2 + 1, l, (l + r) >> 1, ll, x);
add(b * 2 + 2, (l + r) >> 1, r, ll, x);
}
}
inline int q(int b, int l, int r, int ll, int rr, int x) {  //less than or equal to x
if (ll >= rr) {
return -1;
}
if(rr<=l||r<=ll){
return -1;
}
if (seg[b].size() == 0) {
return -1;
}
if (ll <= l&&r <= rr) {
return upper_boun(b, x);
}
return max(q(b * 2 + 1, l, (l + r) >> 1, ll, rr, x), q(b * 2 + 2, (l + r) >> 1, r, ll, rr, x));
}*/

int seg[MAX * 4];
inline void add(int b, int l, int r, int ll, int x) {
    if (l <= ll&&ll < r) {
        if (l + 1 == r) {
            seg[b] = x;
            return;
        }
        add(b * 2 + 1, l, (l + r) >> 1, ll, x);
        add(b * 2 + 2, (l + r) >> 1, r, ll, x);
        seg[b] = max(seg[b * 2 + 1], seg[b * 2 + 2]);
    }
}
inline int q(int b, int l, int r, int ll, int rr) {
    if (ll <= l&&r <= rr) {
        return seg[b];
    }
    if (rr <= l || r <= ll) {
        return -1;
    }
    return max(q(b * 2 + 1, l, (l + r) >> 1, ll, rr), q(b * 2 + 2, (l + r) >> 1, r, ll, rr));
}
int a[MAX];
int tmp[MAX];
vector<int> v;
int n;
int last_index[MAX];
int pre[MAX];
int dp1[MAX];
int dp2[MAX];
int dp2_pre[MAX];
pair<int, int> bit[MAX];
void add(int i, pair<int, int> x) {
    i++;
    while (i < MAX) {
        if (bit[i] < x) {
            bit[i] = x;
        }
        else {
            return;
        }
        i += i&-i;
    }
}
pair<int, int> sum(int i) {
    i++;
    pair<int, int> r = make_pair(0, -1);
    while (i) {
        if (r < bit[i]) {
            r = bit[i];
        }
        i -= i&-i;
    }
    return r;
}
vector<int> V;
vector<int> IN[MAX];
int A1[MAX];
int B1[MAX];
vector<pair<int, int> > ME;
vector<pair<int, pair<int, int> > > FOR;
int answer[MAX];

int main() {
    scanf("%d", &n);
    for (int i = 0;i < n;i++) {
        int aa;
        scanf("%d", &aa);
        a[i] = aa;
        v.push_back(aa);
        tmp[i] = aa;
    }
    sort(v.begin(), v.end());
    v.erase(unique(v.begin(), v.end()), v.end());
    for (int i = 0;i < n;i++) {
        a[i] = lower_bound(v.begin(), v.end(), a[i]) - v.begin();
    }
    /*memset(last_index, -1, sizeof(last_index));
    for (int i = 0;i < MAX;i++) {
    bit[i] = make_pair(0, -1);
    dp2[i] = -1;
    dp1[i] = -1;
    }
    for (int i = 0;i<n;i++) {
    pre_add(0, 0, n, i, last_index[a[i]]);
    last_index[a[i]] = i;
    }
    for (int i = 0;i < MAX * 4;i++) {
    if (vv[i].size()) {
    sort(vv[i].begin(), vv[i].end());
    vv[i].erase(unique(vv[i].begin(), vv[i].end()), vv[i].end());
    seg[i].assign(vv[i].size() + 2, -1);
    siz[i] = vv[i].size() + 2;
    }
    }*/
    memset(last_index, -1, sizeof(last_index));
    for (int i = 0;i < n;i++) {
        ME.push_back(make_pair(last_index[a[i]], i));
        int lef = last_index[a[i]];
        last_index[a[i]] = i;
        if (lef != -1) {
            FOR.push_back(make_pair(lef, make_pair(lef + 1, i)));
        }
    }
    sort(ME.begin(), ME.end());
    sort(FOR.begin(), FOR.end());
    memset(seg, -1, sizeof(seg));
    {
        int index = 0;
        for (int i = 0;i < FOR.size();i++) {
            while (index < ME.size() && ME[index].first<FOR[i].first) {
                add(0, 0, n, ME[index].second, ME[index].first);
                index++;
            }
            answer[FOR[i].second.second] = q(0, 0, n, FOR[i].second.first, FOR[i].second.second);
        }
    }
    memset(last_index, -1, sizeof(last_index));
    for (int i = 0;i < MAX;i++) {
        bit[i] = make_pair(0, -1);
        dp2[i] = -1;
        dp1[i] = -1;
    }
    for (int i = 0;i<n;i++) {
        int lef = last_index[a[i]];
        last_index[a[i]] = i;
        pre[i] = lef;
        IN[a[i]].push_back(i);
        if (lef == -1) {
            continue;
        }
        //A1 B1 A2 B2=i
        int vall = answer[i];//A1
        int maxt = dp1[lef];  //A1
        maxt = max(maxt, vall);
        if (IN[a[i]].size() >= 4) {
            maxt = max(maxt, IN[a[i]][IN[a[i]].size() - 4]);
        }
        dp1[i] = maxt;
        if (maxt == -1) {
            continue;
        }
        pair<int, int> G = sum(maxt - 1);
        dp2_pre[i] = G.second;
        dp2[i] = G.first + 1;
        G.first++;
        G.second = i;
        add(i, G);
        A1[i] = tmp[maxt];
        B1[i] = tmp[i];
    }
    int maxt = -1;
    int ind = -1;
    for (int i = 0;i < n;i++) {
        if (dp2[i] == -1) {
            continue;
        }
        if (maxt < dp2[i]) {
            ind = i;
            maxt = dp2[i];
        }
    }
    if (ind == -1) {
        puts("0");
        return 0;
    }
    while (ind != -1) {
        V.push_back(ind);
        ind = dp2_pre[ind];
    }
    cout << V.size() * 4 << endl;
    reverse(V.begin(), V.end());
    for (int i = 0;i < V.size();i++) {
        if (i) {
            printf(" ");
        }
        printf("%d %d %d %d", A1[V[i]], B1[V[i]], A1[V[i]], B1[V[i]]);
    }
    puts("");
    return 0;
}