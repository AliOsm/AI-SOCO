#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>

using namespace std;

int solve(vector<int> a) {
    int n = (int)a.size();
    int ans = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] == 1) {
            int r = i;
            while (r + 1 < n && a[r + 1] == 1) {
                r++;
            }
            ans = max(ans, r - i + 1);
            i = r;
        }
    }
    return ans;
}

int solve(vector<vector<int>> a) {
    int ans = 0;
    for (auto t : a) {
        ans = max(ans, solve(t));
    }
    return ans;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n, m, q;
    cin >> n >> m >> q;
    vector<vector<int>> a(n, vector<int> (m));
    for (auto &t : a) {
        for (auto &x : t) {
            cin >> x;
        }
    }  
    multiset<int> hv;
    for (auto t : a) {
        hv.insert(solve(t));
    }
    while (q--) {
        int i, j;
        cin >> i >> j;
        i--;
        j--;
        hv.erase(hv.find(solve(a[i])));
        a[i][j] ^= 1;
        hv.insert(solve(a[i]));
        cout << *hv.rbegin() << endl;
    }
}