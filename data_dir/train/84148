/// In The Name Of God

#include <bits/stdc++.h>

#define f first
#define s second

#define pb push_back
#define pp pop_back
#define mp make_pair

#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define rep(i, l, r) for (int i = (l); i <= (r); i++)
#define per(i, l, r) for (int i = (l); i >= (r); i--)

#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const int N = (int)3000 + 7;
const int inf = (int)1e9 + 7;
const int mod = (int)1e9 + 7;
const ll linf = (ll)1e18 + 7;

const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1};
const int dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

using namespace std;

int n;
int sz[N], bat[N];
vector <int> g[N];

void pre(int v = 1, int p = 0) {
	sz[v] = 1;
	bat[v] = p;
	for (auto to : g[v]) {
		if (to != p) {
			pre(to, v);
			sz[v] += sz[to];
		}
	}
	if (p > 0) {
		g[v].erase(find(all(g[v]), p));
	}
}
ll dp[N][N][2];
ll calc(int a, int b, int par, bool turn = 0) {
	// cout << a << ' ' << b << ' ' << par << endl;
	if (~dp[a][b][turn]) return dp[a][b][turn];
	ll res = 0;
	ll aSize = (!turn ? n - sz[par] : sz[a]);
	for (auto to : g[b]) {
		res = max(res, calc(a, to, par, turn) + (ll)sz[to] * aSize);
	}
	for (auto to : g[a]) {
		if (to == par) continue;
		res = max(res, calc(to, b, a, 1) + (ll)sz[to] * sz[b]);
	}
	if (!turn && bat[a]) {
		res = max(res, calc(bat[a], b, a, turn) + (ll)sz[b] * (n - sz[a]));
	}
	return dp[a][b][turn] = res;
}
int main() {
	#ifdef wws
		freopen ("in.txt", "r", stdin);
	#endif
	Kazakhstan
	cin >> n;
	rep(i, 2, n) {
		int v, u;
		cin >> v >> u;
		g[v].pb(u);
		g[u].pb(v);
	}
	pre();
	ll ans = 0;
	memset(dp, -1, sizeof(dp));
	rep(i, 1, n) {
		for (auto to : g[i]) {
			// if (to != 3) continue; // TODO: delete
			// cerr << i << ' ' << to << ' ' << (ll)(n - sz[i] + 1) << ' ' << sz[to] << nl;
			ans = max(ans, calc(i, to, to) + (ll)(n - sz[to]) * sz[to]);
			// break;
		}
	}
	cout << ans;
	ioi
}
