//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#include <iomanip>
#include <numeric>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define INF (100000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;


#define matrix vector< vector<ll> >

matrix matmul(matrix &a, matrix &b){
    int i, j, k, n = a.size();
    matrix ans (n, vector<ll>(n));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            ll temp = 0;
            for(k=0;k<n;k++)    temp = (temp + a[i][k] * b[k][j]) % MOD;
            ans[i][j] = temp;
        }

    return ans;
}

matrix matpwr(matrix &a, ll p){
    int n = a.size();
    matrix ans(n, vector<ll> (n));
    for(int i=0;i<n;i++)    ans[i][i] = 1;

    while(p){
        if(p&1) ans = matmul(ans, a);

        a = matmul(a, a);
        p >>= 1;
    }
    return ans;
}


ll pwr(ll base, ll p, ll mod = MOD){
    ll ans = 1;
    while(p){
        if(p & 1)   ans = (ans * base) % mod;
        base = (base * base) % mod;
        p /= 2;
    }
    return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


ll lcm(ll a, ll b){
    return (a*b) / gcd(a, b);
}


ll invMod(ll n, ll mod = MOD){
    return pwr(n, mod-2);
}


int n, arr[25], DP[(1<<23)+3];
vector<int> submasks[25];


bool possible(int mask, int done){
    for(int i=0;i<(int)submasks[done].size();i++)
        if((mask & submasks[done][i]) == submasks[done][i])
            return true;
    return false;
}


int dp(int mask){

    int done = -1;
    for(int i=n-1;i>=0;i--)
        if((mask>>i)&1){
            done = i+1; break;
        }
    if(done == n)   return __builtin_popcount(mask);
    if(DP[mask] != -1)    return DP[mask];

    if(!possible(mask, done))   return DP[mask] = INF;

    int newMask = mask | (1<<done);

    //create a new variable
    int ans = dp(newMask);

    //replace an existing variable
    for(int i=0;i<n;i++)
        if((mask>>i) & 1)
            ans = min(ans, dp(newMask^(1<<i)));
    ans = max(ans, __builtin_popcount(mask));
    return DP[mask] = ans;
}


int main()
{
    ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    cin>>n;
    for(int i=0;i<n;i++)
        cin>>arr[i];

    for(int k=1;k<n;k++){
        int val = arr[k];
        for(int i=0;i<k;i++)
            for(int j=i;j<k;j++)
                if(arr[i]+arr[j] == val)
                    submasks[k].pb((1<<i) | (1<<j));
    }

    memset(DP, -1, sizeof(DP));
    int ans = dp(1);
    if(ans >= INF)  ans = -1;
    cout<<ans;
    return 0;
}





