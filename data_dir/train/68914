#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math")
////!pragma
//const int K = 250, N = 200005;
//const int Z = (K+1)*N;
//int tmp[N*(K+3)*2];
//ll f(ll l, ll r, ll ones){
//    return (r+l)*(r-l+1)/2*ones;
//}
//int n;
//string s;
//int bf(){
//    vi psum(n+1);
//    rep(i,n){
//        psum[i+1] = s[i]=='1';
//        psum[i+1] += psum[i];
//    }
//    int ans = 0;
//    rep(i,1,n)
//        rep(j,i,n)
//            if(psum[j]-psum[i-1])
//                if((j-i+1)%(psum[j]-psum[i-1]) == 0)
//                    ++ans;
//    return ans;
//}
//ll rn(ll l, ll r){
//    if(l > r)
//        return 0;
//    return (r+l)*(r-l+1)/2;
//}
//ll v(ll ls, ll rs, ll ones, ll min_reach, ll min_ratio, ll max_ratio){
//    ll ans = 0;
//    ll t1 = (ls-1+min_reach)/ones;
//    t1 = min(t1,max_ratio);
//    t1 = max(t1,min_ratio-1);
//    ll t2 = (rs+min_reach)/ones;
//    t2 = max(t2,t1);
//    t2 = min(t2,max_ratio);
//    if(min_ratio <= t1){
//        ans += (t1-min_ratio+1)*(1-min_reach);
//        ans += rn(min_ratio,t1)*ones;
//    }else{
//    }
//    if(t1 <= t2)
//        ans += (t2-t1)*(ls+1);
//
//    if(t2 <= max_ratio){
//        ans += (max_ratio-t2)*(ls+min_reach+rs+1);
//        ans -= rn(t2+1,max_ratio)*ones;
//    }
//    return ans;
//}
//void __(){
//    cin >> s;
//    n = sz(s);
//    ll ans = 0;
//    vi sums;
//    for(int r = 1; r <= K; ++r){
//        tmp[Z] = 1;
//        sums.pb(0);
//        int sum = 0;
//        rep(i,n){
//            if(s[i] == '0')
//                sum += -1;
//            else
//                sum += r-1;
//            ans += tmp[sum+Z];//cnt[sum];
//            tmp[sum+Z]++;
//            sums.pb(sum);
//        }
//        for(int x : sums)
//            tmp[x+Z] = 0;
//        sums.clear();
//    }
//    vi one_pos;
//    rep(i,n)
//        if(s[i] == '1')
//            one_pos.pb(i);
//    ll max_ones = n/(K+1);
//    rep(i,sz(one_pos))
//        for(int j = i; j <= min(sz(one_pos)-1,i+max_ones-1); ++j){
//            ll ones = j-i+1;
//            ll lb = i==0 ? 0 : one_pos[i-1]+1;
//            ll rb = j+1==sz(one_pos) ? n-1 : one_pos[j+1]-1;
//            ll ls = one_pos[i]-lb;
//            ll rs = rb-one_pos[j];
//            if(ls > rs)
//                swap(ls,rs);
//            ll reach = rb-lb+1;
//            ll min_reach = one_pos[j]-one_pos[i]+1;
//            ll max_ratio = reach/ones;
//            ll min_ratio = max(K+1ll,(min_reach+ones-1)/ones);
//            if(min_ratio <= max_ratio)
//                ans += v(ls,rs,ones,min_reach,min_ratio,max_ratio);
//        }
//    print ans;
//}
//
#include <iomanip>
#include <algorithm>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define REP_INT(i,l,r) for(int i = l; i <= r; ++i)
#define REP_ZERO_INT(i,r) for(int i = 0; i < r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT,REP_ZERO_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<int> vi;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout)
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }
    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
#define print _print(),
//!pragma
const int K = 250, N = 200005;
const int Z = (K+1)*N;
int tmp[N*(K+3)*2];
ll f(ll l, ll r, ll ones){
    return (r+l)*(r-l+1)/2*ones;
}
int n;
string s;
int bf(){
    vi psum(n+1);
    rep(i,n){
        psum[i+1] = s[i]=='1';
        psum[i+1] += psum[i];
    }
    int ans = 0;
    rep(i,1,n)
        rep(j,i,n)
            if(psum[j]-psum[i-1])
                if((j-i+1)%(psum[j]-psum[i-1]) == 0)
                    ++ans;
    return ans;
}
ll rn(ll l, ll r){
    if(l > r)
        return 0;
    return (r+l)*(r-l+1)/2;
}
ll v(ll ls, ll rs, ll ones, ll min_reach, ll min_ratio, ll max_ratio){
    ll ans = 0;
    ll t1 = (ls-1+min_reach)/ones;
    t1 = min(t1,max_ratio);
    t1 = max(t1,min_ratio-1);
    ll t2 = (rs+min_reach)/ones;
    t2 = max(t2,t1);
    t2 = min(t2,max_ratio);
    if(min_ratio <= t1){
        ans += (t1-min_ratio+1)*(1-min_reach);
        ans += rn(min_ratio,t1)*ones;
    }else{
    }
    if(t1 <= t2)
        ans += (t2-t1)*(ls+1);
    if(t2 <= max_ratio){
        ans += (max_ratio-t2)*(ls+min_reach+rs+1);
        ans -= rn(t2+1,max_ratio)*ones;
    }
    return ans;
}
void __(){
    cin >> s;
    n = sz(s);
    ll ans = 0;
    vi sums;
    for(int r = 1; r <= K; ++r){
        tmp[Z] = 1;
        sums.pb(0);
        int sum = 0;
        rep(i,n){
            if(s[i] == '0')
                sum += -1;
            else
                sum += r-1;
            ans += tmp[sum+Z];//cnt[sum];
            tmp[sum+Z]++;
            sums.pb(sum);
        }
        for(int x : sums)
            tmp[x+Z] = 0;
        sums.clear();
    }
    vi one_pos;
    rep(i,n)
        if(s[i] == '1')
            one_pos.pb(i);
    ll max_ones = n/(K+1);
    rep(i,sz(one_pos))
        for(int j = i; j <= min(sz(one_pos)-1,i+max_ones-1); ++j){
            ll ones = j-i+1;
            ll lb = i==0 ? 0 : one_pos[i-1]+1;
            ll rb = j+1==sz(one_pos) ? n-1 : one_pos[j+1]-1;
            ll ls = one_pos[i]-lb;
            ll rs = rb-one_pos[j];
            if(ls > rs)
                swap(ls,rs);
            ll reach = rb-lb+1;
            ll min_reach = one_pos[j]-one_pos[i]+1;
            ll max_ratio = reach/ones;
            ll min_ratio = max(K+1ll,(min_reach+ones-1)/ones);
            if(min_ratio <= max_ratio)
                ans += v(ls,rs,ones,min_reach,min_ratio,max_ratio);
        }
    print ans;
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        __();
}
