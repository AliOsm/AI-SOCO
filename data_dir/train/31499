/////////////////////////   _LeMur_
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 300005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;

int n , a[N];
vector <int> g[N];

long long dp[N];

long long mx = inf * (-1ll) * inf;
long long answ1 = 0;
int answ2 = 0;

void dfs(int v,int p){
    dp[v] = a[v];
    for(int i=0;i<(int)g[v].size();i++){
        int to = g[v][i];
        if(to == p)continue;
        dfs(to , v);
        if(dp[to] < 0)continue;
        dp[v] += dp[to];
    }
}

bool rec(int v,int p){
    bool F = false;
    for(int i=0;i<(int)g[v].size();i++){
        int to = g[v][i];
        if(to == p)continue;
        bool flag = rec(to , v);
        if(dp[to] <= 0)continue;
        F |= flag;
    }
    if(!F && dp[v] == mx){
        F = true;
        answ1 += mx;
        answ2++;
    }
    return F;
}

int main(){
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
        scanf("%d",&a[i]);
    }
    for(int i=1;i<n;i++){
        int u , v;
        scanf("%d%d",&u,&v);
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1 , -1);
    for(int i=1;i<=n;i++){
        if(dp[i] > mx){
            mx = dp[i];
        }
    }
    if(mx <= 0){
        for(int i=1;i<=n;i++){
            if(dp[i] == mx){
                answ1 += mx;
                answ2++;
            }
        }
    }
    else
        rec(1 , -1);
    cout<<answ1<<" "<<answ2<<endl;
    return 0;
}
