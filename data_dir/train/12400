//Be Name Khoda
//no comment...
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)2e5 + 7;
const int infint = (int)1e9;
vector<ll> G[MAXN] , fen[MAXN];
ll v[MAXN], u[MAXN], w[MAXN];
//fenwick copy paste.
ll get(ll id, ll x)
{   
	ll res = 0;
    for( ; x > 0 ; x-=(x&-x) )
        res = max(res,fen[id][x]);
    return res;
}
void update(ll id,ll x,ll val)
{
    for( ; x < fen[id].size(); x += (x&-x) )
        fen[id][x] = max(fen[id][x] , val);
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n, m;
	cin >> n >> m;
	for(int i = 0; i < m; i++)
    {
        cin >> v[i] >> u[i] >> w[i];
        G[v[i]].push_back(w[i]) ,  G[u[i]].push_back(w[i]);
    }
    
    for(int i = 1; i <= n; i++)
    {
        sort(G[i].begin(), G[i].end());
        G[i].resize(unique(G[i].begin(), G[i].end())  -  G[i].begin());
        fen[i].reserve(G[i].size() + 1);

        for(int j = 0; j <= G[i].size(); j++)
            fen[i].push_back(0);
    }
	ll ans = 0;
    for(int i = 0; i < m; i++)
    {   
		ll k;
        k = get(v[i], lower_bound(G[v[i]].begin(), G[v[i]].end() , w[i]) -   G[v[i]].begin()) + 1;
        update(u[i], lower_bound(G[u[i]].begin(), G[u[i]].end() , w[i]) -   G[u[i]].begin() + 1, k);
        ans = max(ans, k);
	}
    cout << ans;
}
