/*
    STARK_BOY
*/
#include <bits/stdc++.h>
#include <fstream>
using namespace std;
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define repe(i,a,b) for(ll i=a;i<=b;i++)
#define bac(i,a,b) for(ll i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define F first
#define S second
typedef long long ll;
typedef vector< ll > vi;
typedef vector<pair<ll,ll> > vpii;
typedef pair<ll,ll> pii;
#define all(c) c.begin(),c.end()
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define setbitc(x) __builtin_popcount(x)
#define init(x,a) memset(x,a,sizeof(x))
#define INF 1000000000  
#define MOD 1000000007
#define M 998244353
#define N 100010
# define PI           3.14159265358979323846  /* pi */
mt19937 rng32(chrono::steady_clock::now().time_since_epoch().count());

//Variables Start
ll n,m,k;
ll adj[510][510],cnt[510],par[N],par2[N];
vector< pair<ll,pair<ll,ll> > > vec;
//Variables End

ll modularExponentiation(ll x,ll n)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return modularExponentiation((x*x)%MOD,n/2);
    else                             //n is odd
        
        return (x*modularExponentiation((x*x)%MOD,(n-1)/2))%MOD;

}
ll modInverse(ll n) 
{ 
    return modularExponentiation(n,MOD-2); 
}
ll get_par(ll ver)
{
    while(par2[ver]!=ver)
        ver=par2[ver];
    return ver;
}
void merge(ll p1,ll p2)
{
    p1=get_par(p1);
    p2=get_par(p2);
    if(p1!=p2)
    {
        if(p1<p2) par2[p2]=p1;
        else par2[p1]=p2;
    }
}
int main()
{
    ios
    int ti=1;
    //cin>>ti;
    while(ti--)
    {
        cin>>n>>m>>k;
        rep(i,0,k)cin>>cnt[i];
        int l=0;
        rep(i,0,k)
        {
            rep(j,0,cnt[i])
            {
                par2[l]=l;
                par[l]=i;
                l++;
            }

        }
        //rep(i,0,n)cout<<par[i]<<" ";
        rep(i,0,k)
        {
            rep(j,0,k)
            {
                if(i!=j)adj[i][j]=INF;
            }
        }
        while(m--)
        {
            ll u,v,x;
            cin>>u>>v>>x;
            u--,v--;
            vec.pb(mp(x,mp(u,v)));
        }
        sort(all(vec));
        for(auto z:vec)
        {
            ll u,v,x;
            x=z.F,u=z.S.F,v=z.S.S;
            if(x==0)
            {
                merge(u,v);
            }
            if(par[v]==par[u] && x!=0)
            {
                if(get_par(u)!=get_par(v))
                {
                    cout<<"No";
                    return 0;
                }
            }
            else
            {
                adj[par[u]][par[v]]=min(adj[par[u]][par[v]],x);
                adj[par[v]][par[u]]=min(adj[par[v]][par[u]],x);

            }
        }
        l=0;
        rep(i,0,k)
        {
            ll ref=get_par(l);
            rep(j,0,cnt[i])
            {
                if(get_par(l)!=ref)
                {
                    cout<<"No";
                    return 0;
                }
                l++;
            }

        }
        cout<<"Yes"<<endl;
        rep(i,0,k)
        {
            rep(j,0,k)
            {
                rep(l,0,k)
                    adj[j][l]=min(adj[j][l],adj[j][i]+adj[i][l]);         
            }
        }
        rep(i,0,k)
        {
            rep(j,0,k)
            {
                if(adj[i][j]==INF)cout<<"-1 ";
                else cout<<adj[i][j]<<" ";
            }
            cout<<endl;
        }

    }
    
    return 0;
        
} 