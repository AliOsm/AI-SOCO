#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
#define mod 998244353

ll n, m;
ll arr[1005][1005];

ll fastpow(ll base, ll power)
{
    if(!power)
        return 1;
    ll ret = fastpow(base, power / 2);
    ret = (ret * ret) % mod;
    if(power & 1)
        ret = (ret * ((base) % mod)) % mod;
    return ret;
}

ll mul(ll a, ll b)
{
    ll ret = (a % mod) * (b % mod);
    while(ret < 0)
        ret += mod;
    ret %= mod;
    return ret;
}

ll add(ll a, ll b)
{
    while(a < 0)
        a += mod;
    while(b < 0)
        b += mod;
    ll ret = ((a % mod) + (b % mod));
    while(ret < 0)
        ret += mod;
    ret %= mod;
    return ret;
}

int main()
{
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    vector<pair<int, pair<int, int>>> vec;
    vector<int> i2, j2, i, j, ans;
    cin >> n >> m;
    for(int i = 1; i <= n; i++)
    {
        for(int j = 1; j <= m; j++)
        {
            int a;
            cin >> a;
            vec.push_back({a, {i, j}});
        }
    }
    int r, c;
    cin >> r >> c;
    sort(vec.begin(), vec.end());
    for(int z = 0; z < n * m; z++)
    {
        i.push_back(vec[z].second.first);
        j.push_back(vec[z].second.second);
        i2.push_back(mul(vec[z].second.first, vec[z].second.first));
        j2.push_back(mul(vec[z].second.second, vec[z].second.second));
        ans.push_back(0);
        if(z)
            i[z] = add(i[z], i[z - 1]), j[z] = add(j[z], j[z - 1]), i2[z] = add(i2[z], i2[z - 1]), j2[z] = add(j2[z], j2[z - 1]);
    }
    for(int z = 0; z < n * m; z++)
    {
        int curx = vec[z].second.first, cury = vec[z].second.second;
        int have = -1, x2 = 0, y2 = 0, x = 0, y = 0, sol = 0, have2 = 0;
        int st = 0, en = z - 1;
        while(st <= en)
        {
            int mid = (st + en) / 2;
            if(vec[mid].first == vec[z].first)
                en = mid - 1;
            else
                st = mid + 1, have = mid;
        }
        have++;
        if(!have)
            continue;
        x = i[have - 1], y = j[have - 1], x2 = i2[have - 1], y2 = j2[have - 1], sol = ans[have - 1];
        have2 = fastpow(have, mod - 2);
        int newHave = add(mul(-2, mul(x, curx)), mul(-2, mul(y, cury)));
        newHave = add(newHave, x2);
        newHave = add(newHave, y2);
        newHave = add(newHave, mul(have, mul(curx, curx)));
        newHave = add(newHave, mul(have, mul(cury, cury)));
        newHave = add(newHave, sol);
        newHave = mul(newHave, have2);
        ans[z] = newHave;
        if(ans[z])
            ans[z] = add(ans[z], ans[z - 1]);
        if(curx == r && cury == c)
        {
            cout << newHave;
            return 0;
        }
    }
    cout << 0;
    return 0;
}
