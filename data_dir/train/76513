#define DBG 1
// No progress
#include<bits/stdc++.h>
//#include<ext/pb_ds/assoc_container.hpp>
//#include<ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define eb emplace_back
#define fi first
#define se second
#define all(x) (x).begin(), (x).end()
#define dbg(x) if (DBG) cerr << #x << " = " << x << '\n';

using namespace std;
//using namespace __gnu_pbds;

typedef long long ll;
typedef pair<int, int> pii;

//template<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const int MAXN = (int)2e5 + 5;
const int OFF = (int)1e5;

pair<int, pii> arr[MAXN];
vector<int> group[MAXN];
pii ans2[MAXN];
int ans[MAXN];
int n, w, h;

bool cmp(int a, int b) {
    return arr[a].se.fi < arr[b].se.fi;
}

void solve() {
    scanf("%d %d %d", &n, &w, &h);

    for (int i = 1; i <= n; ++i) {
        int tp, pos, t;
        scanf("%d %d %d", &tp, &pos, &t);
        arr[i] = {tp, {pos, t}};
        group[pos - t + OFF].eb(i);
    }

    for (int g = 0; g < MAXN; ++g) {
        if (group[g].empty()) {
            continue;
        }

        vector<int> hor, ver;

        for (int id : group[g]) {
            if (arr[id].fi == 1) {
                hor.pb(id);
            }
            else {
                ver.pb(id);
            }
        }

        sort(all(hor), cmp);
        sort(all(ver), cmp);
        int hsz = hor.size();
        int vsz = ver.size();

        for (int i = 0; i < hsz; ++i) {
            if (hsz - i <= vsz) {
                ans[hor[i]] = ver[hsz - i - 1];
            }
            else {
                ans[hor[i]] = hor[i + vsz];
            }
        }

        for (int i = 0; i < vsz; ++i) {
            if (vsz - i <= hsz) {
                ans[ver[i]] = hor[vsz - i - 1];
            }
            else {
                ans[ver[i]] = ver[i + hsz];
            }
        }
    }

    for (int i = 1; i <= n; ++i) {
        int id = ans[i];

        if (arr[id].fi == 1) {
            printf("%d %d\n", arr[id].se.fi, h);
        }
        else {
            printf("%d %d\n", w, arr[id].se.fi);
        }
    }
}

int main() {
    int tt = 1;

    while (tt--) {
        solve();
    }

    return 0;
}
