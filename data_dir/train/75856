#include <iostream>

using namespace std;

const int A = 1000000;

int cnt[A + 1];
long long sum[A + 1];
bool composite[A + 1];

int main() {
	int n, x, y;
	scanf("%d%d%d", &n, &x, &y);
	for (int i = 0; i < n; i++) {
		int a;
		scanf("%d", &a);
		cnt[a]++;
		sum[a] += a;
	}
	for (int a = 1; a <= A; a++) {
		cnt[a] += cnt[a - 1];
		sum[a] += sum[a - 1];
	}
	long long ans = (long long) n * x;
	int k = (x - 1) / y;
	for (int a = 2; a <= A; a++) {
		if (composite[a])
			continue;
		for (int b = a + a; b <= A; b += a)
			composite[b] = true;
		long long cost = 0;
		int l = min(k, a - 1);
		for (int b = 0; b < A; b += a) {
			int o = b;
			int p = min(b + a - l - 1, A);
			int q = min(b + a - 1, A);
			int d = cnt[p] - cnt[o];
			int c = cnt[q] - cnt[p];
			long long s = sum[q] - sum[p];
			cost += (long long) d * x + ((long long) c * (b + a) - s) * y;
		}
		ans = min(ans, cost);
	}
	printf("%lld\n", ans);
	return 0;
}
