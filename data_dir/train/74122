#include <bits/stdc++.h>

#define fi first
#define se second
#define pb push_back

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

using namespace std;

const ll MOD = 1e9 + 7;
const int N = 2e3 + 7;
const int INF = 1e9 + 9;
const int xi[] = {0, 0, +1, -1};
const int yi[] = {-1, +1, 0, 0};
const int xxi[] = {-1, +1, 0, 0, -1, +1, +1, -1};
const int yyi[] = {0, 0, -1, +1, -1, +1, -1, +1};

int n, ax, ay, bx, by, cy, cx;

int used[N][N], u[N][N];

bool check(int x, int y){
  return (x >= 1 && x <= n && y >= 1 && y <= n);
}

queue < pair < int, int > > q;

void fill_that_shit(int x, int y){

  int nowx = x;
  int nowy = y;

  used[nowx][nowy] = 1;

  for(int i = 0; i < 8; i++){

    nowx = x;
    nowy = y;

    while(check(nowx + xxi[i], nowy + yyi[i])){
      used[nowx + xxi[i]][nowy + yyi[i]] = 1;
      nowx += xxi[i];
      nowy += yyi[i];
    }
  }
}

int main(){

  cin >> n;

  cin >> ax >> ay;
  cin >> bx >> by;
  cin >> cx >> cy;

  fill_that_shit(ax, ay);

  /*
  for(int i = 1; i <= n; i++){
    for(int j = 1; j <= n; j++){
      cout << used[i][j];
    }
    cout << '\n';
  }
  */

  q.push({bx, by});
  u[bx][by] = 1;

  while(!q.empty()){

    int x = q.front().fi;
    int y = q.front().se;

    //cout << x << ' ' << y << '\n';

    for(int i = 0; i < 8; i++){

      if(check(x + xxi[i], y + yyi[i]) && !u[x + xxi[i]][y + yyi[i]] && x + xxi[i] == cx && y + yyi[i] == cy && !used[x + xxi[i]][y + yyi[i]]){
        cout << "YES\n";
        return 0;
      }

      if(check(x + xxi[i], y + yyi[i]) && !u[x + xxi[i]][y + yyi[i]] && !used[x + xxi[i]][y + yyi[i]]){
        q.push({x + xxi[i], y + yyi[i]});
        u[x + xxi[i]][y + yyi[i]] = 1;
      }
    }

    q.pop();
  }

  cout << "NO";
}
