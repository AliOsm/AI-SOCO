#include <iostream>
#include <stdio.h>
#include <bits/stdc++.h>
#include <math.h>
#include <string>
#include <sstream>
#define ll long long
#define F first
#define S second
#define pb push_back
#define ld long double
#define pll pair<long long,long long>
#define pld pair<long double,long double>
#define ios     ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
using namespace std;
ll mod=10000000000;
ll gcd (ll a,ll b)
{
    if(b==0)
        return a;
    else
        return gcd(b,a%b);
}
ll fastexp(ll x ,ll n)
{
    ll result =1;
    while(n>0)
    {
        if(n%2==1)
            result*=x;
        x*=x;
        n=n/2;
    }
    return result;
}

ll modularExp(ll x,ll n,ll mod)
{
    ll result=1;
    while(n>0)
    {
        if(n%2==1)
            result=(result*x)%mod;
        x=((x%mod)*(x%mod))%mod;
        n=n/2;
    }
    return (result)%mod;
}
bool isPrime(ll n)
{
    for(ll i=2;i*i<=n;i++)
        if(n%i==0)
            return false;
    return true;
}
bool mycomp(string &a,string &b)
{
        return a.length() < b.length();
}
bool ispalindrome(string s)
{
     ll n=s.length();
     ll i;
     for(i=0;i<n/2;i++)
     {
          if(s[i]!=s[n-1-i])
               return false;
     }
     return true;
}
int main()
{
    ios;
    ll n,m;
    cin>>n>>m;
    ll i,j;
    vector< pair<string,string> > prs;
    vector<string> pdomes;
    multiset<string> st;
    for(i=0;i<n;i++)
    {
        string s;
        cin>>s;
        string t=s;
        reverse(s.begin(),s.end());
        if(st.find(s)!=st.end())
        {
             auto it = st.find(s);
             prs.pb({t,s});
             st.erase(it);
             //cout<<t<<" "<<s;
        }
        else 
          st.insert(t);
    }
    if(st.size()!=0)
    {
     for(auto it:st)
          if(ispalindrome(it))
               pdomes.pb(it);
    }
    
     if(prs.size()==0 && pdomes.size()==0)
     {
          cout<<"0\n";
          return 0;
     }

    string ns;
    if(prs.size()!=0)
    {
     for(i=0;i<prs.size();i++)
          ns+=prs[i].F;
    }
    if(pdomes.size()!=0)
     ns+=pdomes[0];
    if(prs.size()!=0)
    {
          for(i=prs.size()-1;i>=0;i--)
               ns+=prs[i].S;
    }

     cout<<ns.length()<<"\n"<<ns;
     

}
