#include <iostream>

#include <vector>
#include <queue>
#include <deque>
#include <algorithm>
#include <cstring>

using namespace std;

#define SZ(a) int((a).size())

#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long llong;

const int INF = 1000000000;

struct Pos {
   int row, col;
};

int R, C;
char B[1004][1004];

int dr[] = {-1, 0, 0, 1};
int dc[] = {0, -1, 1, 0};

void bfs(Pos src, VVI& D) {
   deque<Pos> dq;
   dq.push_back(src);
   D = VVI(R+4, VI(C+4, INF));
   D[src.row][src.col] = 0;
   for (int t = 1; !dq.empty(); ++t) {
      Pos cur = dq.front();
      dq.pop_front();
      int dist = D[cur.row][cur.col];
   // cerr << cur.row << ',' << cur.col << ' ' << dist << endl;
      for (int k = 0; k < 4; ++k) {
         Pos nxt = { cur.row + dr[k], cur.col + dc[k] };
         if (B[nxt.row][nxt.col] == '#') continue;
         if (D[nxt.row][nxt.col] < INF) continue;
         if (B[nxt.row][nxt.col] == '.') {
            D[nxt.row][nxt.col] = dist + 1;
            dq.push_back(nxt);
         }
         else {
            D[nxt.row][nxt.col] = dist;
            dq.push_front(nxt);
         }
      }
   }
}

llong solve() {
   Pos pos[3];
   FOR(r, 1, R) {
      FOR(c, 1, C) {
         switch (B[r][c]) {
            case '1':
            case '2':
            case '3':
               pos[ B[r][c]-'1' ] = {r, c};
            //   cerr << "r = " << r << " c = " << c << "  " << B[r][c] << endl;
               break;
         }
      }
   }

   //REP(i, 3)
   //   cout << i << ": " << pos[i].row << ' ' << pos[i].col << endl;

   VVI D[3];

   int D2[3][3];

   REP(i, 3) {
      D2[i][i] = 0;
      bfs( pos[i], D[i] );
      FOR(j, i+1, 2) {
         D2[i][j] = D2[j][i] = D[i][ pos[j].row ][ pos[j].col ];
         if ( D2[i][j] >= INF )
            return -1;
      }
   }

   llong res = INF;

   //int max_dist = max(max(D2[0][1], D2[0][2]), D2[1][2]);
   //int res = D2[0][1] + D2[0][2] + D2[1][2] - max_dist;
   
   FOR(r, 1, R) {
      FOR(c, 1, C) {
         if (B[r][c] == '#') continue;
         //if (r == 1 && c == 5)
         //   cerr << D[0][r][c] << ' ' << D[1][r][c] << ' ' << D[2][r][c] << endl;
         int dot = B[r][c] == '.' ? 1 : 0;
         llong dist = 0;
         REP(i, 3)
            dist += D[i][r][c] - dot;
         //if (D[0][r][c] >= INF) continue;
         //if (D[1][r][c] >= INF) continue;
         //if (D[2][r][c] >= INF) continue;
         res = min(res, dist + dot);
      }
   }
   
   return res;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   memset(B, '#', sizeof(B));

   cin >> R >> C;

   FOR(r, 1, R) {
      cin >> ( B[r]+1 );
      B[r][C+1] = '#';
   }

   llong res = solve();
   cout << res << endl;

   return 0;
}
