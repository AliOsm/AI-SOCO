#include <bits/stdc++.h>

using std::ios_base;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::fixed;

using std::vector;
using std::string;
using std::stack;
using std::queue;
using std::deque;
using std::map;
using std::set;
using std::unordered_map;
using std::unordered_set;

using std::tuple;
using std::make_tuple;
using std::pair;
using std::make_pair;

using std::sort;
using std::reverse;
using std::nth_element;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()

const int MAXN = 400000;
const int INF = 1e9;
const int MOD = 1e9+7;
const int64_t L_INF = 4e18;

int n;
set<int> buy, sell, unknown;
int64_t ans = 1;

void add(int x) {
    if (!sell.empty() && x > *sell.begin()) {
        sell.insert(x);
        return;
    }
    if (!buy.empty() && x < *buy.rbegin()) {
        buy.insert(x);
        return;
    }
    unknown.insert(x);
}

void accept(int x) {
    if (buy.find(x) != buy.end()) {
        if (x != *buy.rbegin()) {
            cout << "0\n";
            exit(0);
        }
        buy.erase(x);
        for (auto y : unknown) {
            sell.insert(y);
        }
        unknown.clear();
        return;
    }
    if (sell.find(x) != sell.end()) {
        if (x != *sell.begin()) {
            cout << "0\n";
            exit(0);
        }
        sell.erase(x);
        for (auto y : unknown) {
            buy.insert(y);
        }
        unknown.clear();
        return;
    }

    ans = (ans * 2) % MOD;
    unknown.erase(x);
    for (auto y : unknown) {
        if (y < x) {
            buy.insert(y);
        } else {
            sell.insert(y);
        }
    }
    unknown.clear();
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    cin >> n;
    for (int i = 0; i < n; i++) {
        string type;
        int value;
        cin >> type >> value;

        if (type == "ADD") {
            add(value);
        } else {
            accept(value);
        }
    }
    
    ans = (ans * (unknown.size() + 1)) % MOD;

    cout << ans << '\n';

    #ifdef LOCAL
        cerr << "\n== " << 1.0 * clock() / CLOCKS_PER_SEC << " sec.\n";
    #endif
    return 0;
}
