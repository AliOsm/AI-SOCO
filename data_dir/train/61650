#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <iomanip>

#include <vector>
#include <cstring>
#include <string>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>

#include <utility>
#include <list>

#include <cmath>
#include <algorithm>
#include <cassert>
#include <bitset>
#include <complex>
#include <climits>
#include <functional>
#include <unordered_set>
#include <unordered_map>
using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> l4;
typedef pair<double, double> dd;
typedef vector<int> vi;
#define mp make_pair
#define pb push_back

#define debug(x) cerr << #x << " = " << x << " "
const int maxn = 1e3+1;
char s[maxn];
int m;
int pt[2][maxn];
int color[2][maxn];
int len[2];
const int N = maxn<<1;
const int mod = 998244353;
inline void Add(ll &x, ll y)
{
    if ((x += y) >= mod) x -= mod;
}
ll p2[N];
void clear()
{
    for (int id = 0; id < 2; ++id)
        memset(color[id], -1, len[id] * sizeof(color[id][0]));
}
bool dfs(int id, int pos, int c)
{
    int &_color = color[id][pos];
    if (_color != -1)
    {
        if (_color != c)
        {
        }
        return _color == c;
    }
    _color = c;
    int npos = len[id]-1-pos;
    if (!dfs(id, npos, c)) return false;
    if (len[!id] > pos)
    {
        if (s[pos] != '?' && !dfs(!id, pos, (s[pos]-'0')^c)) return false;
    }
    else
    {
        if (s[pos] != '?' && c != (s[pos]-'0')) return false;
    }
    return true;
}
vector<vector<string> > palindromes;
int pcnt = 0;
void gen(int x)
{
    string base = "";
    while (x)
    {
        base.pb('0' + (x%2));
        x >>= 1;
    }
    for (int i = 0; i * 2 < base.size(); ++i)
        if (base[i] != base[base.size()-1-i])
            return;
    palindromes[base.size()].pb(base);
    ++pcnt;
}

vector<pair<string, string> > vsol;
void generate(int len)
{
    palindromes = vector<vector<string> > (len+1, vector<string>());
    for (int i = 1; i < (1<<len); ++i) gen(i);
    printf("pcnt = %d\n", pcnt);
    
    for (const auto & b : palindromes[len])
    for (int i = 1; i < len; ++i)
        for (const auto & e : palindromes[i])
        {
            if (b == "10001" && e == "111")
            {
                cerr << "found\n";
            }
            string tmp;
            for (int i = 0; i < e.size(); ++i)
                tmp.pb(e[i]==b[i]?'0':'1');
            for (int i = e.size(); i < b.size(); ++i)
                tmp.pb(b[i]);
            bool work = true;
            for (int i = 0; work && i < tmp.size(); ++i)
                if (s[i] != '?' && s[i] != tmp[i])
                    work = false;
            if (work) vsol.pb(mp(e, b));
        }
    cerr << "brute ans = " << vsol.size() << endl;
    for (auto e : vsol)
        cerr << e.first.size() << " " << e.first << " " << e.second << endl;
}
int main()
{
    p2[0] = 1;
    for (int i = 1; i < N; ++i) Add(p2[i] = p2[i-1], p2[i-1]);
    scanf("%s", s);
    m = strlen(s);
    reverse(s, s+m);

    len[0] = m;
    ll ans = 0;
    for (int &i = len[1] = 1; i < m; ++i)
    {
        clear();
        bool has_ans = true;
        for (int i = len[1]; has_ans && i < m; ++i)
            if (s[i] != '?' && !dfs(0, i, s[i]-'0'))
            {
                has_ans = false;
            }
        if (!dfs(1, len[1]-1, 1)) has_ans = false;
        int tot = 0;
        for (int id = 0; has_ans && id < 2; ++id)
            for (int i = 0; has_ans && i < len[id]; ++i)
                if (color[id][i] == -1)
                {
                    if (!dfs(id, i, 0))
                    {
                        has_ans = false;
                    }
                    else ++tot;
                }
        if (has_ans)
        {
            Add(ans, p2[tot]);
        }
    }
    printf("%lld\n", ans);
}
