#include <bits/stdc++.h>

using namespace std;
const int MAXN = 100100;
int n;
vector<int> g[MAXN], curPath, path;

pair<int, int> dfs(int v, int trgt = -1, int p = -1, bool flg = false)
{
	curPath.push_back(v);
	if(v == trgt)
		path = curPath;
	pair<int, int> ret((flg ? (g[v].size() == 1 ? 1 : MAXN) : 1), v), aux;
	for(const int& u : g[v])
		if(u != p && (!flg || g[u].size() <= 2))
			aux = dfs(u, trgt, v, flg), aux.first++, ret = (flg ? min(ret, aux) : max(ret, aux));
	curPath.pop_back();
	return ret;
}

bool check(int v)
{
	bool flg[MAXN];
	int cur, h[MAXN], degath[MAXN];
	memset(flg, false, sizeof flg);
	memset(degath, 0, sizeof degath);
	queue<int> q;
	q.push(v), flg[v] = true, h[v] = 1;
	while(!q.empty())
	{
		cur = q.front(), q.pop();
		if(!degath[h[cur]])
			degath[h[cur]] = g[cur].size();
		else if(degath[h[cur]] != g[cur].size())
			return false;
		for(const int& u : g[cur])
			if(!flg[u])
				h[u] = h[cur] + 1, flg[u] = true, q.push(u);
	}
	return true;
}

int main()
{
	scanf("%d", &n);
	for(int i = 1, u, v; i < n; ++i)
		scanf("%d %d", &u, &v), g[u].push_back(v), g[v].push_back(u);
	int d1 = dfs(1).second, d2 = dfs(d1).second, dmid, aux;
	dfs(d1, d2);
	dmid = path[path.size() / 2];
	if(check(d1))
		printf("%d\n", d1), exit(0);
	else if(check(d2))
		printf("%d\n", d2), exit(0);
	else if(check(dmid))
		printf("%d\n", dmid), exit(0);
	aux = dfs(dmid, -1, -1, true).second;
	if(check(aux))
		printf("%d\n", aux), exit(0);
	printf("-1\n");
}