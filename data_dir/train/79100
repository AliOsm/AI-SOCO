#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)a
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/************************************** MAIN PROGRAM ********************************************/
const int MAX = 32;
const int R = 2;
struct node {
    node* next[2];
    int atme = 0;
};
node* root;

void insert(string s) {
    node* x = root;
    for (auto ch : s) {
        int c = ch - '0';
        if (x->next[c] == nullptr) x->next[c] = new node();
        x = x->next[c];
    }
    x->atme++;
}

node* erase(node* x, string &s, int i) {
    if (x == nullptr) return x;
    if (i < s.size()) {
        x->next[s[i] - '0'] = erase(x->next[s[i] - '0'], s, i + 1);
    } else {
        x->atme--;
    }
    if (x->atme) return x;
    bool useless = true;
    for (int c : {0, 1}) {
        useless &= x->next[c] == nullptr;
    }
    if (useless && x != root) {
        delete x;
        return nullptr;
    }
    return x;
}

string ans(string s) {
    node* x = root;
    string ans;
    for (auto ch : s) {
        char wanted = '0' + '1' - ch;
        assert(wanted == '0' || wanted == '1');
        if (x->next[wanted - '0']) {
            x = x->next[wanted - '0'];
            ans += '1';
        }
        else if (x->next[ch - '0']) {
            x = x->next[ch - '0'];
            ans += '0';
        }
        else assert(false);
    }
    return ans;
}

int main()
{
    //freopen("input.txt", "r", stdin);
    SPEED
    root = new node();

    int q;
    cin >> q;
    insert(bitset<31>(0).to_string());
    FOR(_, 0, q) {
        char ch;
        cin >> ch;
        int x;
        cin >> x;
        string s = bitset<31>(x).to_string();
        //DEBUG(s)
        if (ch == '+') {
            insert(s);
        } else if (ch == '-') {
            root = erase(root, s, 0);
        } else {
          //  DEBUG(ans(s))
            cout << bitset<31>(ans(s)).to_ulong() << endl;
        }
    }

}
/************************************** END OF PROGRAM ******************************************/
/** Stuff you should look for:
 * int overflow, array bounds, over-counting
 * special cases (n=1?), set/unordered_set TLE, multi-set/set error
 * do something instead of nothing and stay organized
 */
