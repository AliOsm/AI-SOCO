#include <iostream>
#include <cstring>
using namespace std;

const int N = 2e2 + 7;

int n;
int dis[N];

bool adj[N][N];
bool mark[N];

void dfs(int v)
{
	mark[v] = true;
	for (int i = 0; i < n; ++i)
	{
		if (!adj[v][i] || mark[i]) continue;
		dis[i] = dis[v] + 1;
		dfs(i);
	}
}

int max_path(int src)
{
	memset(mark, 0, sizeof mark);
	dis[src] = 0;
	dfs(src);
	for (int i = 0; i < n; ++i)
		if (mark[i] && dis[src] < dis[i])
			src = i;
	memset(mark, 0, sizeof mark);
	dis[src] = 0;
	dfs(src);
	for (int i = 0; i < n; ++i)
		if (mark[i] && dis[src] < dis[i])
			src = i;
	return dis[src];
}

main()
{
	// freopen("input", "r", stdin);
	ios::sync_with_stdio(0);
	cin >> n;
	for (int i = 0; i < n - 1; ++i)
	{
		int u, v;
		cin >> u >> v;
		u --, v --;
		adj[u][v] = adj[v][u] = 1;
	}
	int ans = 0;
	for (int i = 0; i < n; ++i)
		for (int j = i + 1; j < n; ++j)
			if (adj[i][j])
			{
				adj[i][j] = adj[j][i] = 0;
				int res = max_path(0);
				for (int k = 0; k < n; ++k)
					if (!mark[k])
					{
						res *= max_path(k);
						break;
					}
				ans = max(ans, res);
				adj[i][j] = adj[j][i] = 1;
			}
	cout << ans << "\n";
}