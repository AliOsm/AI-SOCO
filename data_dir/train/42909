#include<bits/stdc++.h>

#define SZ(x) ((int(x.size())))

using namespace std;

const int maxn = 1*1000+10;
int n, a, ranking[maxn], x, tmp;
vector <int> vec[maxn][2];
vector <int> m, ans;
bool mark[maxn], flg;
bitset <maxn> b;

void dfs_b (int x, int o)
{
    ranking[x] = o;
    tmp++;
    mark[x] = 1;
    for (int i = 0; i < SZ(vec[x][1]); i++)
        dfs_b(vec[x][1][i], o+1);
}

void dfs_p (int x)
{
    for (int i = 0; i < SZ(vec[x][0]); i++)
        dfs_p(vec[x][0][i]);
    if (SZ(vec[x][0]) == 0)
        dfs_b(x, 1);
}

int main()
{
    cin >> n >> x;
    for (int i = 0; i < n; i++)
    {
        cin >> a;
        if (a == 0)
            continue;
        vec[a][1].push_back(i+1);
        vec[i+1][0].push_back(a);
    }
    for (int i = 1; i <= n; i++)
    {
        if (!mark[i])
        {
            tmp = 0;
            dfs_p(i);
            if (!flg && mark[x] == 1)
            {
                flg = 1;
                continue;
            }
            m.push_back(tmp);
        }
    }
    b[0] = 1;
    for (int i = 0; i < SZ(m); i++)
        b = b | (b << m[i]);
    for (int i = 0; i <= n; i++)
    {
        if (b[i] == 1)
            cout << i+ranking[x] << endl;
    }
    return 0;
}