#include <bits/stdc++.h>
using namespace std;
static constexpr int N = 200000 + 5;

vector< pair< int, int > > E[ N ];
int clr[ N ];
pair< size_t, int > idx[ N ];
bool need[ N ];
bitset< N > used;

void dfs( int );

int main() {
	ios_base::sync_with_stdio( false );
	cin.tie( nullptr );
	int n, k; cin >> n >> k; k = n - k;
	for ( int i = 1 ; i < n ; ++ i ) {
		int u, v; cin >> u >> v;
		E[ u ].emplace_back( v, i );
		E[ v ].emplace_back( u, i );
	}
	for ( int i = 1 ; i <= n ; ++ i )
		idx[ i ] = { E[ i ].size(), i };
	sort( idx + 1, idx + n + 1 );
	for ( int i = k ; i >= 1 ; -- i )
		need[ idx[ i ].second ] = true;
	dfs( 1 );
	cout << idx[ k ].first << '\n';
	for ( int i = 1 ; i < n ; ++ i )
		cout << clr[ i ] << " \n"[ i == n - 1 ];
	return 0;
}

void dfs( int u ) {
	if ( not need[ u ] ){
		for ( auto e : E[ u ] ) {
			if ( clr[ e.second ] )
				continue;
			clr[ e.second ] = 1;
			dfs( e.first );
		}
	} else {
		for ( auto e : E[ u ] )
			used[ clr[ e.second ] ] = true;
		int pt = 1, fa = -1;
		for ( auto e : E[ u ] ) {
			if ( clr[ e.second ] ) {
				fa = e.first;
				continue;
			}
			while ( used[ pt ] ) ++ pt;
			clr[ e.second ] = pt;
			used[ pt ++ ] = true;
		}
		for ( auto e : E[ u ] )
			used[ clr[ e.second ] ] = false;
		for ( auto e : E[ u ] ) {
			if ( e.first == fa )
				continue;
			dfs( e.first );
		}
	}
}