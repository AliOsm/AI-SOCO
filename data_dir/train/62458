#include <iostream>
#include <string>
#include <iomanip>
#include <fstream>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <cmath>
#include <set>
using namespace std;

class Node
{
public:
	Node *ch[26];
	Node()
	{
		for (int i = 0; i < 26; i++) ch[i] = NULL;
	}
	vector<int> val;
	int i;
	void add(int i)
	{
		val.push_back(i);
	}
};
vector<string> a;
Node * st;
void build(Node * i, int k)
{
	if (i == NULL) return;
	i->i = k;
	for (int j = 0; j < i->val.size(); j++)
	{
		if (k >= a[i->val[j]].size()) continue;
		
		char x = a[i->val[j]][i->i];
		if (i->ch[x - 'a'] == NULL) i->ch[x - 'a'] = new Node;
		i->ch[x - 'a']->add(i->val[j]);
	}
	for (int j = 0; j < 26; j++) build(i->ch[j], k+1);
}

int getWin(Node *i, int turn)
{
	for (int j = 0; j < 26; j++)
	{
		if (i->ch[j] != NULL)
		{
			if (getWin(i->ch[j], 1-turn) == turn) return turn;
		}
	}
	return 1-turn;
}

int getLost(Node *i, int turn)
{
	bool ok = false;
	for (int j = 0; j < 26; j++)
	{
		if (i->ch[j] != NULL)
		{
			ok = true;
			if (getLost(i->ch[j], 1-turn) == turn) return turn;
		}
	}
	if (!ok) return turn;
	return 1-turn;
	
}
int main()
{
	int n, k;
	cin>>n>>k;
	a = vector<string> (n);
	st = new Node;
	for (int i = 0; i < n; i++)
	{
		cin>>a[i];
		st->add(i);
	}
	build(st, 0);
	int win = getWin(st, 0);
	int loss = getLost(st, 0);
	if (win == 0 && loss == 0)
	{
		cout<<"First"<<endl;
	}
	if (win==0 && loss == 1)
	{
		if (k%2==0)
		{
			cout<<"Second"<<endl;
		}
		else
		{
			cout<<"First"<<endl;
		}
	}
	if (win == 1)
	{
		cout<<"Second"<<endl;
	}
}