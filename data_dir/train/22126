/*
Anton Gulikov
*/
#include <iostream>
#include <fstream>
#include <stack>
#include <cstdlib>
#include <cmath>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <ctime>
#include <cassert>
#include <stdio.h>
#include <queue>

#define mp make_pair
#define pb push_back
#define foru(i,n) for(int i = 0; i < n; i++)
#define ford(i,n) for(int i = n - 1; i >= 0; i--)
#define forab(i,l,r) for(int i = l; i <= r; i++)
#define forabd(i,r,l) for(inr i = r; i >= l; i--)
#define sqr(x) ((x) * (x))
#define F first
#define S second

const long long base = 1000000000 + 7;

using namespace std;

vector <pair <int, int> > a;
int n;
int have[111111];
int cnt[111111];
vector <int> g[111111];
int x,y,ma = 0;
int used[111111];

bool ok(int x){
	forab(i,0,ma) have[i] = cnt[i];
	int tmp = 0;
	forab(i,0,ma){
		if (have[i] >= x){
			tmp += have[i] - x + 1;
		}		
	}	
	return (tmp <= x);
}

int cost(int x){
//	cout << x << endl;
	int tmp = 0;	
	int res = 0;
	int kol = 0;
	forab(i,0,ma){
		have[i] = cnt[i];
	}
	forab(i,1,kol) used[i] = 0;
	forab(i,1,ma) {		
		kol = min(have[i], max(have[i] - x + 1,0));
		have[i] -= kol;
		used[i] = kol;
		tmp += kol;
		foru(j,kol) res += g[i][j];
	}
	foru(i,a.size()){
		if (tmp == x) break;
		if (used[a[i].S] == 0){
			tmp++;
			res += a[i].F;
		} else used[a[i].S]--;
	}
//	cout << res << endl;
	return -res;
}

void solve(){
	cin >> n;
	foru(i,n){
		cin >> x >> y;
		g[x].pb(y);
		cnt[x]++;
		ma = max(x, ma);
	}                   
	a.clear();
	foru(i,ma + 1) foru(j,g[i].size()) a.pb(mp(g[i][j], i));
	sort(a.begin(), a.end());
	foru(i,ma + 1) sort(g[i].begin(), g[i].end());
	int l = 0;
	int r = n;
	while (r - l > 3){
		int m1 = l + (r - l) / 3;
		int m2 = r - (r - l) / 3;
        if (cost(m1) < cost(m2)) l = m1; else r = m2;
	}
	int ans = 2000000000;
	forab(i,l,r) ans = min(ans, -cost(i));
	cout << ans;
}

int main(){
	ios_base :: sync_with_stdio(false);
	int test = 1;
	while (test--){
		solve();
	}
	return 0;
}