 /*
    __                      _    _            __                 __
   / /_/\__        __ _    | | _| | __     _  \ \       __/\__  / /
  / /\    /       / _` |   | |/ / |/ /    (_)  | |      \    / / / 
 / / /_  _\      | (_| |   |   <|   <      _   | |      /_  _\/ /  
/_/    \/         \__,_|___|_|\_\_|\_\    (_)  | |        \/ /_/   
                      |_____|                 /_/                  

*/
#include <bits/stdc++.h>
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
#define ll long long int
using namespace std;
const long double pi = 3.14159265358979323;
const double EPS = 1e-12;
const int N = 1e6 + 5;
const int MOD = 1e9 + 7;

ll a[N], b[N], nge[N], pge[N], nse[N], pse[N], n;
vector<ll> v[N];
void compress(){
	ll ct = 1;
	for(int i = 1; i <= n; i++) v[a[i]].push_back(i);
	for(int i = 1; i < N; i++){
		if(v[i].size() == 0) continue;
		for(auto j: v[i]) b[j] = ct++;
	}
}

void findnge(){
	stack<ll> s;
	s.push(1);
	for(int i = 2; i <= n; i++){
		if(s.empty()){
			s.push(i);
			continue;
		}
		while(!s.empty() && b[s.top()] < b[i]){
			nge[s.top()] = i;
			s.pop();
		}
		s.push(i);
	}
	while(!s.empty()){
		nge[s.top()] = n + 1;
		s.pop();
	}
}

void findpge(){
	stack<ll> s;
	s.push(n);
	for(int i =  n - 1; i > 0; i--){
		if(s.empty()){
			s.push(i);
			continue;
		}
		while(!s.empty() && b[s.top()] < b[i]){
			pge[s.top()] = i;
			s.pop();
		}
		s.push(i);
	}
	while(!s.empty()){
		pge[s.top()] = 0;
		s.pop();
	}
}

void findnse(){
	stack<ll> s;
	s.push(1);
	for(int i = 2; i <= n; i++){
		if(s.empty()){
			s.push(i);
			continue;
		}
		while(!s.empty() && b[s.top()] > b[i]){
			nse[s.top()] = i;
			s.pop();
		}
		s.push(i);
	}
	while(!s.empty()){
		nse[s.top()] = n + 1;
		s.pop();
	}
}

void findpse(){
	stack<ll> s;
	s.push(n);
	for(int i =  n - 1; i > 0; i--){
		if(s.empty()){
			s.push(i);
			continue;
		}
		while(!s.empty() && b[s.top()] > b[i]){
			pse[s.top()] = i;
			s.pop();
		}
		s.push(i);
	}
	while(!s.empty()){
		pse[s.top()] = 0;
		s.pop();
	}
}

int main(){
	fast;
	cin >> n;
	for(int i = 1; i <= n; i++){
		cin >> a[i];
	}
	compress();
	findnge();
	findpge();
	findnse();
	findpse();
	ll ans = 0;
	for(int i = 1; i <= n; i++){
		ll lft, rt;
		lft = pge[i];
		rt = nge[i];
		lft++;
		rt--;
		ans += a[i] * ((i - lft + 1) * (rt - i + 1));
	}

	for(int i = 1; i <= n; i++){
		ll lft, rt;
		lft = pse[i];
		rt = nse[i];
		lft++;
		rt--;
		ans -= a[i] * ((i - lft + 1) * (rt - i + 1));
	}
	cout << ans;


	
	return 0;
}
/*
 check for corner cases(n == 1?)
 read the highlighted part again
 check nested for loops, flags, and breaks
*/
