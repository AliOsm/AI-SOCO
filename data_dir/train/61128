#include<bits/stdc++.h>
using namespace std;
int N, M, i, j, X, Y, Z, P[100005], D[100005], L[100005], R[100005], H[100005], BL, BR;
vector <int> V[100005], W[100005];
void dfs(int X,int K) {
	D[X]=K;
	L[X]=Z;
	H[Z]=X;
	W[K].push_back(Z);
	Z++;
	//for (int F : V[X]) {
	for (int i=V[X].size()-1;i>=0;i--) {
		dfs(V[X][i],K+1);
	}
	R[X]=Z;
}
int binser(int ind,int car) {
	int awa=0, akh=W[ind].size()-1, cen, res=W[ind].size();
	for (cen=(awa+akh)/2;awa<=akh;cen=(awa+akh)/2) {
		if (W[ind][cen]>car) {
			res=cen;
			akh=cen-1;
		}
		else {
			awa=cen+1;
		}
	}
	return res;
}
int main () {
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	cin>>N;
	for (i=1;i<=N;i++) {
		cin>>P[i];
		V[P[i]].push_back(i);
	}
	dfs(0,0);
	//for (i=1;i<=N;i++) cout<<D[i]<<' '<<L[i]<<' '<<R[i]<<'\n';
	cin>>M;
	for (i=1;i<=M;i++) {
		cin>>X>>Y;
		if (D[X]<=Y) {
			cout<<0<<' ';
		}
		else {
			BL=W[D[X]-Y][binser(D[X]-Y,L[X])-1];
			BR=R[H[BL]];
			//cout<<BL<<' '<<BR<<'\n';
			cout<<binser(D[X],BR)-binser(D[X],BL)-1<<' ';
		}
	}
	cout<<'\n';
}
