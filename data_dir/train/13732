#pragma GCC optimize("Ofast")
#pragma GCC target("avx2")

#include <bits/stdc++.h>

using namespace std;

#define ALIGN 32
const int maxn = (int) 2e5;
alignas(ALIGN) int a[maxn];
alignas(ALIGN) int b[maxn];
alignas(ALIGN) int posA[maxn];
alignas(ALIGN) int posB[maxn];
alignas(ALIGN) int special[maxn];

#define check(i, lb, rb) (lb <= special[i] && special[i] <= rb)

int getCount(int la, int ra, int lb, int rb) {
  int count = 0;
//   while (la <= ra && la % 8 != 0) {
//     count += check(la, lb, rb);
//     la++;
//   }
//   auto c = __builtin_assume_aligned(&special[la], 32);
  for (int i = la; i <= ra; i++) count += check(i, lb, rb);
  return count;
}

int main(int argc, char *argv[]) {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);

  int n, m;
  cin >> n >> m;
  for (int i = 0; i < n; i++) cin >> a[i], a[i]--;
  for (int i = 0; i < n; i++) cin >> b[i], b[i]--;
  for (int i = 0; i < n; i++) posA[a[i]] = i;
  for (int i = 0; i < n; i++) posB[b[i]] = i;
  for (int i = 0; i < n; i++) special[i] = posB[a[i]];

  for (int i = 0; i < m; i++) {
    int t;
    cin >> t;
    if (t == 1) {
      int la, ra, lb, rb;
      cin >> la >> ra >> lb >> rb;
      la--, ra--, lb--, rb--;
      int count = getCount(la, ra, lb, rb);
      cout << count << '\n';
    } else {
      int x, y;
      cin >> x >> y;
      x--, y--;
      swap(b[x], b[y]);
      posB[b[x]] = x;
      posB[b[y]] = y;
      special[posA[b[x]]] = x;
      special[posA[b[y]]] = y;
    }
  }
}