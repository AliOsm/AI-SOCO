#include <bits/stdc++.h>
using namespace std;
#define SZ(v) int((v).size())
#define ALL(vec) begin(vec), end(vec)
typedef long long i64;
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
#ifdef Rahul
# define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#else
# define error(...) 42;
#endif
string to_string(char c) { return "'" + string(1, c) + "'";}
string to_string(string s) { return '"' + s + '"';}
string to_string(const char* s) { return to_string((string) s);}
template<typename A> string to_string(A);
template<typename A, typename B> string to_string(pair<A, B> p){
  return "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}
template<typename A> string to_string(A v) {bool f = false; string r = "{"; 
  for (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}
template<typename A> string to_string(vector<vector<A>> v) {string r; 
  for (auto x: v) r += "\n" + to_string(x); return r;}
int Nerr;
template<typename A> string to_string(A *p) {return to_string(vector<A>(p, p + Nerr));}
void err(istream_iterator<string>) { cerr << endl; }
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << to_string(a) << "; "; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
#define Lu(...) [&] (auto &&u) { return __VA_ARGS__; }
#define Luv(...) [&] (auto &&u, auto &&v) { return __VA_ARGS__; }
int const MOD = 1e9 + 7;
long long const INF = 1e18 + 42;
/***********************************************************************/

const int N = 4010, K = 27, M = 502;
int len[N], dp[N][N];
int32_t main() {
  cin.tie(nullptr) -> sync_with_stdio(false);
  
  string s, t;
  cin >> s >> t;
  int n = SZ(s), m = SZ(t);
  for (int i = 0; i <= n; ++i) {
    int ptr = 0, j = i;
    for (; j < n && ptr < m; ++j) {
      if (s[j] == t[ptr]) ++ptr;
    }
    if (ptr == m) len[i] = j - i;
  }
  fill_n(dp[n], n + 1, -MOD);
  dp[n][0] = 0;
  for (int i = n - 1; i >= 0; --i) {
    for (int j = 0; j <= n; ++j) {
      dp[i][j] = dp[i + 1][j];
      if (j) uax(dp[i][j], dp[i + 1][j - 1]);
      if (len[i] && len[i] - m <= j) uax(dp[i][j], 1 + dp[i + len[i]][j - (len[i] - m)]);
      if (!i) cout << dp[0][j] << ' ';
    }
  }
  cout << '\n';
}
