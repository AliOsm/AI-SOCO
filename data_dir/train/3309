#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

ll dd , ans;

struct Node
{
    ll l , r , id;
    Node(){}

    Node(ll a , ll b , ll c)
    {
        l = a;
        r = b;
        id = c;
    }
    bool operator <(const Node p) const
    {
        ll box1 = l/dd;
        ll box2 = p.l/dd;

        if(box1 == box2)return r<p.r;

        return box1<box2;

    }

};

ll cnt[1000050];
ll arr[200050];

void add(ll val)
{
    ans -= (val*cnt[val]*cnt[val]);
    cnt[val]++;
    ans += (val*cnt[val]*cnt[val]);

}
void rmv(ll val)
{
    ans -= (val*cnt[val]*cnt[val]);
    cnt[val]--;
    ans += (val*cnt[val]*cnt[val]);
}
int main()
{
    ll n , q , i , j , k , p , l ,r;
    scanf("%lld %lld",&n,&q);

    for(i = 0 ; i < n ; i++)scanf("%lld",arr+i);

    dd = sqrt(n);
    Node query[q+5];

    for(i = 0 ; i < q ; i++)
    {
        scanf("%lld %lld",&l,&r);
        l--;
        r--;
        query[i] = Node(l,r,i);
    }
    sort(query,query+q);

    l = 0;
    r = -1;

    ll aaa[q+5];

    for(i = 0 ; i < q ; i++)
    {
        //cout << query[i].l << "  " << query[i].r << endl;
        while(r < query[i].r)
        {
            r++;
            add(arr[r]);
        }
        while(l < query[i].l)
        {
            rmv(arr[l]);
            l++;
        }
        while(r > query[i].r)
        {
            rmv(arr[r]);
            r--;
        }
        while(l > query[i].l)
        {
            l--;
            add(arr[l]);
        }
        aaa[query[i].id] = ans;
    }

    for(i = 0 ; i < q ; i++)
    {
        printf("%lld\n",aaa[i]);
    }


    return 0;
}
