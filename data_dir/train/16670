#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int MAXN = 100005;
ll t[4 * MAXN];
ll get(int i, int l, int r, int pos)
{
	if (l == r)
		return t[i];
	else
	{
		int mid = (l + r) / 2;
		if (pos <= mid)
			return t[i] + get(2 * i + 1, l, mid, pos);
		else
			return t[i] + get(2 * i + 2, mid + 1, r, pos);
	}
}
void addOnRange(int i, int l, int r, int lx, int rx, ll val)
{
	if (l == lx && r == rx)
		t[i] += val;
	else
	{
		int mid = (l + r) / 2;
		if (lx <= mid)
			addOnRange(2 * i + 1, l, mid, lx, min(rx, mid), val);
		if (rx > mid)
			addOnRange(2 * i + 2, mid + 1, r, max(lx, mid + 1), rx, val);
	}
}
int main()
{
	ios::sync_with_stdio(false);
	int n; cin >> n;
	vector<ll> a(n);
	for (int i = 0; i < n; i++)
		cin >> a[i];
	int s, f;
	cin >> s >> f;
	s--; f--;
	for (int i = 0; i < n; i++)
	{
		int start = s - i, end = f - i - 1;
		while (start < 0) start += n;
		while (end < 0) end += n;
		if (end < start)
		{
			addOnRange(0, 0, n - 1, start, n - 1, a[i]);
			addOnRange(0, 0, n - 1, 0, end, a[i]);
		}
		else
			addOnRange(0, 0, n - 1, start, end, a[i]);
	}
	ll maxCnt = -1; int maxI = 0;
	for (int i = 0; i < n; i++)
	{
		ll currCnt = get(0, 0, n - 1, i);
		if (currCnt > maxCnt)
		{
			maxCnt = currCnt;
			maxI = i + 1;
		}
	}
	cout << maxI << endl;
}