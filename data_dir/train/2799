#include <bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; i++ )
#define FOR( it , A ) for( typeof A.begin() it = A.begin() ; it != A.end() ; it++ )
#define clr( t , val ) memset( t , val , sizeof(t) )

#define all(v)  v.begin() , v.end()
#define rall(v)  v.rbegin() , v.rend()
#define pb push_back

#define mp make_pair
#define fi first
#define se second

#define ones(x) __builtin_popcount(x)
#define test puts("************test************");
#define sync ios_base::sync_with_stdio(false);

#define N 2005
#define B 11
#define INF (1<<30)
#define EPS (1e-5)

typedef long long ll;
typedef unsigned long long ull;
typedef pair< int , int > pii;
typedef pair< ll , ll > pll;
typedef vector< int > vi;
typedef vector< vi > vvi;
typedef vector< ll > vll;
typedef vector< ull > vull;

vi E[ N ];
bool M[ N ][ N ];
void add_edge( int u , int v ){
    E[ u ].pb( v );
    E[ v ].pb( u );
}
int main(){
    int n , k , lvl;
    while( cin >> k ){
        clr( M , 0 );
        n = 1;
        lvl = 0;
        REP( i , N ) E[ i ].clear();
        vi v;
        while( k ){
            v.pb( k%B );
            k /= B;
        }
        int nv = v.size();
        reverse( all( v ) );
        /*for( int i = 0 ; i < nv ; ++i ){
            k = v[ i ];
            cout << k ;
        }
        cout << endl;*/
        for( int j = 1 ; j <= v[ 0 ] ; ++j ){
            /*cout << n << " - " << n + j << endl;
            cout << n + j << " * " << n + v[ 0 ] + 1 << endl;*/
            add_edge( n , n + j ) , add_edge( n + j , n + v[ 0 ] + 1 );
        }
        //cout << "n : " << n << endl;
        n += v[ 0 ] + 1;
        lvl += 2;
        //cout << "n : " << n << endl;
        for( int i = 1 ; i < nv ; ++i ){
            k = v[ i ];
            for( int j = 1 ; j <= B ; ++j ){
                //cout << n << " - " << n + j << endl;
                //cout << n + j << " * " << n + B + 1 << endl;  
                add_edge( n , n + j ) , add_edge( n + j , n + B + 1 );
            }
            n += B + 1;
            lvl += 2;
            /*
            cout << "n : " << n << endl;
            cout << "lvl : " << lvl << endl;
            */
            if( k ){
                
                for( int j = 0 ; j < k ; ++j ) {
                    //cout << 1 << " - " << n + j*lvl + 1 << endl;
                    add_edge( 1 , n + j*lvl + 1 );
                }
                for( int j = 0 ; j < k ; ++j )
                    for( int L = 1 ; L <= lvl - 1 ; ++L ) {
                        //cout << n + j*lvl + L << " - " << n + j*lvl + L + 1 << endl;
                        add_edge( n + j*lvl + L , n + j*lvl + L + 1 );
                    }
                for( int j = 1 ; j <= k ; ++j ) add_edge( n + k*lvl + 1 , n + j*lvl );
                add_edge( n , n + k*lvl + 1 );
                n += k*lvl + 1;
                lvl++;
            }
        }
        add_edge( n , 0 );
        n++;
        REP( i , n ) FOR( v , E[ i ] ) M[ i ][ *v ] = M[ *v ][ i ] = 1;
        printf( "%d\n" , n );
        REP( i , n )REP( j , n ) printf( "%c%s" , M[ i ][ j ] ? 'Y':'N' , j + 1 == n ? "\n":"" );
        //REP( i , n )REP( j , n ) if( i < j && M[ i ][ j ] ) cout << i << " " << j << endl;
        //cout << n << endl;
    }
}