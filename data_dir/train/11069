#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>

#define ll long long
#define ld long double
#define ull unsigned ll
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vector<int>>
//#define endl '\n'
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const int  Inf = 1e9;
ll LINF = (ll)4e18;
using namespace std;
ll mod = 1e9 + 7;
ll mod2 = 1e9 + 123;
#define M_PI       3.14159265358979323846   // pi

pair<ll, ll> cnt(ll x1, ll y1, ll x2, ll y2) {
	ll len1 = (x2 - x1 + 1);
	ll len2 = (y2 - y1 + 1);
	ll answ = 0, ansb = 0;
	if ((x1 + y1) % 2 == 0) {
		answ = ((len1 + 1) / 2)*((len2 + 1) / 2) + (len1 / 2)*(len2 / 2);
		ansb = (len1 / 2) * ((len2+1) / 2) + ((len1+1) / 2) * (len2 / 2);
	}
	else {
		ansb = ((len1 + 1) / 2)*((len2 + 1) / 2) + (len1 / 2)*(len2 / 2);
		answ = (len1 / 2) * ((len2 + 1) / 2) + ((len1 + 1) / 2) * (len2 / 2);
	}
	return{ answ, ansb };
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("divisors.in", "r", stdin);
	//freopen("divisors.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int tt;
	cin >> tt;
	while (tt--) {
		ll n, k;
		cin >> n >> k;
		ll pw = 0;
		ull sum = 0;
		vector<ll> lol;
		lol.push_back(0);
		ll mx = 0;
		forn(i, 0, n) {
			sum += ((ll)1 << pw);
			lol.push_back(sum);
			mx = i + 1;
			pw += 2;
			if (sum>2e18) break;
		}
		if (k > sum) {
			cout << "NO\n";
			continue;
		}
		if (k == sum) {
			cout << "YES 0\n";
			continue;
		}
		ull curlen = 1;
		ll kk = k;
		map<ull, ull> tmp;
		ll sz = n-1;
		ull qq = 1;
		ll kek = 2;
		while (curlen <= kk && sz>=0) {
			if (sz>0) tmp[sz] += qq;
			qq += ((ll)1 << kek);
			kek++;
			kk -= curlen;
			curlen = curlen*2 + 1;
			sz--;
		}
		if (curlen <= 0) {
			cout << "YES " << sz + 1 << endl;
			continue;
		}
		bool ok = false;
		for (auto it = tmp.rbegin(); it != tmp.rend(); it++) {
			if (it->first > mx || it->second==0) {
				ok = true;
				break;
			}
			else {
				ull qwe = (ull)lol[it->first] * it->second;
				if (qwe == 0 || kk<=qwe) {
					ok = true;
					break;
				}
				kk -= qwe;
			}
			if (kk <= 0) {
				ok = true;
				break;
			}
		}
		if (ok) {
			cout << "YES " << sz + 1 << endl;
			continue;
		}
		cout << "NO\n";
	}
	return 0;
}