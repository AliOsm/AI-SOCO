#include<bits/stdc++.h>
#define god dimasi5eks
#pragma GCC optimize("O3")
#define fi first
#define se second
#define pb push_back
#define pf push_front
#define mod 1000000007

using namespace std;

typedef long long ll;

int n, perm[200002], buk = 1000, st[1002], sf[1002], bk[200002], x = 1, q, aib[450][200002];

void add(int pz, int nod, int val)
{
    for(; nod <= n; nod += (nod & (-nod)))
        aib[pz][nod] += val;
}
int compute(int pz, int nod)
{
    int sum = 0;
    for(; nod; nod -= (nod & (-nod)))
        sum += aib[pz][nod];
    return sum;
}

ll inv;

void solve(int pa, int pb)
{
    if(pa > pb)
        swap(pa, pb);
    if(perm[pa] > perm[pb])
        inv += 2;
    for(int i = 1; i < bk[pa]; ++i)
        inv -= 2 * (sf[i] - st[i] + 1 - compute(i, perm[pa]));
    for(int i = bk[pa] + 1; i <= x; ++i)
        inv -= 2 * compute(i, perm[pa]);
    for(int i = 1; i < bk[pb]; ++i)
        inv -= 2 * (sf[i] - st[i] + 1 - compute(i, perm[pb]));
    for(int i = bk[pb] + 1; i <= x; ++i)
        inv -= 2 * compute(i, perm[pb]);
    add(bk[pa], perm[pa], -1);
    add(bk[pb], perm[pb], -1);
    for(int i = st[bk[pa]]; i <= sf[bk[pa]]; ++i)
    {
        if(i < pa && perm[pa] < perm[i])
            inv -= 2;
        if(i > pa && perm[pa] > perm[i])
            inv -= 2;
    }
    for(int i = st[bk[pb]]; i <= sf[bk[pb]]; ++i)
    {
        if(i < pb && perm[pb] < perm[i])
            inv -= 2;
        if(i > pb && perm[pb] > perm[i])
            inv -= 2;
    }
    swap(perm[pa], perm[pb]);
    add(bk[pa], perm[pa], 1);
    add(bk[pb], perm[pb], 1);
    for(int i = 1; i < bk[pa]; ++i)
        inv += 2 * (sf[i] - st[i] + 1 - compute(i, perm[pa]));
    for(int i = bk[pa] + 1; i <= x; ++i)
        inv += 2 * compute(i, perm[pa]);
    for(int i = 1; i < bk[pb]; ++i)
        inv += 2 * (sf[i] - st[i] + 1 - compute(i, perm[pb]));
    for(int i = bk[pb] + 1; i <= x; ++i)
        inv += 2 * compute(i, perm[pb]);
   // cout << inv << '\n';
    for(int i = st[bk[pa]]; i <= sf[bk[pa]]; ++i)
    {
        if(i < pa && perm[pa] < perm[i])
            inv += 2;
        if(i > pa && perm[pa] > perm[i])
            inv += 2;
    }
    for(int i = st[bk[pb]]; i <= sf[bk[pb]]; ++i)
    {
        if(i < pb && perm[pb] < perm[i])
            inv += 2;
        if(i > pb && perm[pb] > perm[i])
            inv += 2;
    }
    if(perm[pa] > perm[pb])
        inv -= 2;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> q;
    for(int i = 1; i <= n; ++i)
    {
        perm[i] = i;
        bk[i] = x;
        if(!st[x])
            st[x] = i;
        sf[x] = i;
        add(x, perm[i], 1);
        if(i % buk == 0 && i != n)
            ++x;
    }
    for(int i = 1; i <= q; ++i)
    {
        int a, b;
        cin >> a >> b;
        if(a == b);
        else
            solve(a, b);
        cout << inv / 2 << '\n';
    }
    return 0;
}
