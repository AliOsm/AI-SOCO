#include <iostream>
#include <stdio.h>
#include <string>
#include <memory.h>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <time.h>
#include <assert.h>
#include <cmath>
#include <stack>
#include <string.h>
#include <sstream>
#include <algorithm>
using namespace std;
typedef long long ll;
char v[1000001];
bool done[1000001];
int main()
{
	scanf("%s", v);
	set<int> has;
	queue<int> bad;
	int n = strlen(v);
	for (int i = 0; i < n; ++i)
		has.insert(i);
	for (int i = 0; i < n; ++i) {
		bool is = false;
		if (i && v[i - 1] != v[i])
			is = true;
		if (i + 1 < n && v[i + 1] != v[i])
			is = true;
		if (is) {
			done[i] = true;
			bad.push(i);
		}
	}
	int res = 0;
	while (!bad.empty()) {
		++res;
		for (int it = bad.size(); it > 0; --it) {
			has.erase(bad.front());
			int x = bad.front();
			bad.pop();
			bad.push(x);
		}
		for (int itt = bad.size(); itt > 0; --itt) {
			int x = bad.front();
			bad.pop();
			auto prv = has.upper_bound(x);
			if (prv != has.begin()) {
				auto nxt = prv;
				--prv;
				if (nxt != has.end() && v[*nxt] != v[*prv]) {
					if (!done[*prv]) {
						done[*prv] = true;
						bad.push(*prv);
					}
					if (!done[*nxt]) {
						done[*nxt] = true;
						bad.push(*nxt);
					}
				}
			}
		}
	}
	printf("%d\n", res);
	return 0;
}