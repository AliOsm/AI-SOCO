#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization ("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define rep(i,a,b) for(ll i = (a); i < (b); i++)
#define iter(it,c) for(auto it = (c).begin(); it != (c).end();++it)
#define pb push_back
#define fs first
#define sc second
typedef pair<ll,ll> ii;
typedef vector<ll> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;

const ll INF = ~(1<<31);
const double pi = acos(-1);
const double EPS = 1e-9;
typedef unsigned long long ull;

template <class T> T smod(T a, T b) {
  return (a % b + b) % b; }



ll TO[5020];


ll memo[5020];
ll n,a,b;
ll dp(ll at) {
    if(at >= n) return 0;
    if(memo[at] != -1) return memo[at];
    ll val = dp(at+1)+a;
    if(TO[at] != at) val = min(val, dp(TO[at])+b);
    return memo[at] = val;
}


struct hasher { ll b = 311, m; vi h, p;
  hasher(string s, ll _m)
    : m(_m), h(size(s)+1), p(size(s)+1) {
    p[0] = 1; h[0] = 0;
    rep(i,0,size(s)) p[i+1] = (ll)p[i] * b % m;
    rep(i,0,size(s)) h[i+1] = ((ll)h[i] * b + s[i]) % m; }
  ll hash(ll l, ll r) {
    return (h[r+1] + m - (ll)h[l] * p[r-l+1] % m) % m; } };

int main() {
    cin.sync_with_stdio(false);
    memset(memo,-1,sizeof(memo));
    cin >> n >> a >> b;
    string S;
    cin >> S;
    hasher H(S, 1000000000+7);
    hasher H1(S, 1000000000+9);
    rep(i,0,n) TO[i] = i;
    rep(i,0,n) {
        ll lo = 1, hi = min(n-i-1,i+1);
        ll bst = 0;
        while(lo <= hi) {
            ll mid = (lo+hi)/2;
            bool good = false;
            for(ll j = 0; j < i-mid+2; j++) {
                if(good) break;
                if(H.hash(i+1,i+mid) == H.hash(j,j+mid-1) 
                 && H1.hash(i+1,i+mid) == H1.hash(j,j+mid-1)) good = true;
            }
            if(good) {
                bst = mid;
                lo = mid+1;
            } else {
                hi = mid-1;
            }
        }
        TO[i+1] = i+1+bst;
    }
    cout << dp(0) << endl;
    return 0;
}


