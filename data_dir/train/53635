//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
#define sz(x) (int)(x).size()
#define mem(a,v) memset((a), (v), sizeof (a))
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int _i = 0; _i < (n); _i++) ni(a[_i])
#define nal(a, n) for (int _i = 0; _i < (n); _i++) nl(a[_i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pil pair<int, long long>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vil vector<pil>
#define vll vector<pll>
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> oset;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e2 + 5;
const double eps = 1e-9;
int dp[MAXN][MAXN][MAXN][2][2];
int p[MAXN], vis[MAXN];

int dfs(int l, int r, int o, int i, int j) {
	if (o < 0) return INF;
	if (r - l <= 1 && o != 0) return INF;
	if (l == r && i != j) return INF;
	if (l == r) return 0;
	if (r - l == 1) return i != j ? 1 : 0;
	if (dp[l][r][o][i][j] != -1) return dp[l][r][o][i][j];
	int& v = dp[l][r][o][i][j];
	v = INF;
	if (p[l+1] < 0 && p[r-1] < 0) {
		v = min(v, dfs(l+1, r-1, o-1-(l+1!=r-1), 1, 1) + (i!=1) + (j!=1));
		v = min(v, dfs(l+1, r-1, o-1, 1, 0) + (i!=1) + (j!=0));
		v = min(v, dfs(l+1, r-1, o-1, 0, 1) + (i!=0) + (j!=1));
		v = min(v, dfs(l+1, r-1, o, 0, 0) + (i!=0) + (j!=0));
	} else if (p[l+1] < 0) {
		v = min(v, dfs(l+1, r-1, o-1, 1, p[r-1]) + (i!=1) + (j!=p[r-1]));
		v = min(v, dfs(l+1, r-1, o, 0, p[r-1]) + (i!=0) + (j!=p[r-1]));
	} else if (p[r-1] < 0) {
		v = min(v, dfs(l+1, r-1, o-1, p[l+1], 1) + (i!=p[l+1]) + (j!=1));
		v = min(v, dfs(l+1, r-1, o, p[l+1], 0) + (i!=p[l+1]) + (j!=0));
	} else {
		v = min(v, dfs(l+1, r-1, o, p[l+1], p[r-1]) + (i!=p[l+1]) + (j!=p[r-1]));
	}
	//cerr << l << " " << r << " " << o << " " << i << " " << j << " " << v << "\n";
	return v;
}

int main() {
	int n; ni(n);
	if (n == 1) return !printf("0\n");
	if (n == 2) return !printf("1\n");
	int o = (n+1)/2, e = n - o;
	for (int i = 1; i <= n; i++) {
		ni(p[i]);
		vis[p[i]] = 1;
		if (p[i] != 0 && p[i] % 2 == 0)
			e--;
		else if (p[i] != 0)
			o--;
		if (p[i] == 0)
			p[i]--;
		else
			p[i] %= 2;
	}
	int ans = INF;
	mem(dp, -1);
	if (p[1] < 0 && p[n] < 0) {
		ans = min(ans, dfs(1, n, o-2, 1, 1));
		ans = min(ans, dfs(1, n, o-1, 1, 0));
		ans = min(ans, dfs(1, n, o-1, 0, 1));
		ans = min(ans, dfs(1, n, o, 0, 0));
	} else if (p[1] < 0) {
		ans = min(ans, dfs(1, n, o-1, 1, p[n]));
		ans = min(ans, dfs(1, n, o, 0, p[n]));
	} else if (p[n] < 0) {
		ans = min(ans, dfs(1, n, o, p[1], 0));
		ans = min(ans, dfs(1, n, o-1, p[1], 1));
	} else {
		ans = min(ans, dfs(1, n, o, p[1], p[n]));
	}
	printf("%d\n", ans);
	return 0;
}
