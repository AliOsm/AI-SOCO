#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <ctime>
#include <cassert>
#include <complex>
#include <string>
#include <cstring>
#include <chrono>
#include <random>
#include <queue>
#include <bitset>
using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, int> pli;
typedef pair<ll, ll> pll;
typedef long double ld;
#define mp make_pair
#define str(s) s.c_str()

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());	

const int N = 3e5;

vector<int> a[N];
int p[N], n, m;
int mark[N], mn[N], mx[N];

int get(int a) {
	if (p[a] == a) {
		return a;
	}
	return p[a] = get(p[a]);
}

int merge(int a, int b) {
	a = get(a);
	b = get(b);
	if (a == b) return 0;
	p[b] = a;
	mn[a] = min(mn[a], mn[b]);
	mx[a] = max(mx[a], mx[b]);
	return 1;
}

int main() {
	//freopen("input.txt", "r", stdin);

	scanf("%d %d", &n, &m);

	for (int i = 0; i < m; ++i) {
		int u, v;
		scanf("%d %d", &u, &v);
		a[u].push_back(v);
		a[v].push_back(u);
	}

	for (int i = 1; i <= n; ++i) {
		p[i] = mn[i] = mx[i] = i;
	}

	for (int i = 1; i <= n; ++i) {
		for (int v : a[i]) {
			merge(i, v);
		}
	}
	
	int s = 0, i = 1;
	
	while (i <= n) {
		int j = i;
		while (j <= mx[get(i)]) {
			s += merge(i, j);
			j++;
		}
		i = j;
	}

	printf("%d", s);

	
	return 0;
}
