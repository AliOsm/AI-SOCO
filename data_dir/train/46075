#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
using namespace std;
int a[100010],ne[100010];
struct Tree
{
    int l,r,mx;
};
Tree seg[400010];
void build(int id,int L,int R)
{
    seg[id].l=L;
    seg[id].r=R;
    if (L==R)
        seg[id].mx=-100;
    else
    {
        int mid=(L+R)/2;
        build(id*2,L,mid);
        build(id*2+1,mid+1,R);
        seg[id].mx=max(seg[id*2].mx,seg[id*2+1].mx);
    }
}
void insert(int id,int pos,int val)
{
    if (seg[id].l==seg[id].r)
    {
        seg[id].mx=val;
        return;
    }
    int mid=(seg[id].l+seg[id].r)/2;
    if (pos<=mid) insert(id*2,pos,val);
    else insert(id*2+1,pos,val);
    seg[id].mx=max(seg[id*2].mx,seg[id*2+1].mx);
}
int query(int id,int val)
{
    int mx=seg[id].mx;
    if (mx<val) return -1;
    if (seg[id].l==seg[id].r) return seg[id].mx;
    int mx1=seg[id*2].mx;
    int mx2=seg[id*2+1].mx;
    if (mx2>val) return query(id*2+1,val);
    else return query(id*2,val);
}
int main()
{
    int n;
    scanf("%d",&n);
    for (int i=0;i<n;i++)
        scanf("%d",&a[i]);
    int maxx=0;
    for (int i=0;i<2;i++)
    {
        build(1,0,n-1);
        insert(1,0,a[0]);
        for (int i=1;i<n;i++)
        {
            int id=query(1,a[i]);
            if (id!=-1) maxx=max(maxx,id^a[i]);
            insert(1,i,a[i]);
        }
        reverse(a,a+n);
    }
    printf("%d\n",maxx);
    return 0;
}
