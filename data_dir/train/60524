#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <deque>
#include <map>
#include <set>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; }
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; }
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

int cnt(int n) {
	int lim = 1, total = 0;
	FOR(i, 0, n) lim *= n;
	FOR(mask, 0, lim) {
		int arr[n];
		int tmp = mask;
		FOR(i, 0, n) arr[i] = tmp%n, tmp /= n;
		bool ok = true;
		FOR(i, 0, n) {
			int pos = i;
			FOR(j, 0, n) {
				if (pos == 0) break;
				pos = arr[pos];
			}
			if (pos != 0) { ok = false; break; }
		}
		if (ok) total++;
	}
	return total;
}

int arr[9] = {0, 1,2,9,64,625,7776,117649,2097152};

int main() {
	const int MOD = 1000000007;
	int n, k;
	cin >> n >> k;
	int res = arr[k];
	FOR(i, k, n) res = 1LL*res*(n-k)%MOD;
	cout << res << endl;
	return 0;
}

