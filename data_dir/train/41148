#pragma GCC optimize("O3")
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define ll long long
#define ull  unsigned long long
#define pb push_back

using namespace std;
using namespace __gnu_pbds;
typedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
const int N = 501;
int d[N][N], p[N];
vector < pair < int, int > > g[N];
vector < int > G[N];
int used[N];
int ans = 0;
void dfs(int v){
    used[v] = 1;
    for (auto u: G[v]){
        ans++;
        if (!used[u]) dfs(u);
    }
}
main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    int n, m;
    cin >> n >> m;
    for (int i = 1; i <= m; i++){
        int x, y, l;
        cin >> x >> y >> l;
        d[x][y] = l;
        d[y][x] = l;
        g[x].pb({y, l});
        g[y].pb({x, l});
    }
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= n; j++){
            if (d[i][j] == 0) d[i][j] = 1e9;
        }
    }
    for (int i = 1; i <= n; i++) d[i][i] = 0;
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= n; j++){
            for (int l = 1; l <= n; l++){
                d[j][l] = min(d[j][l], d[j] [i] + d[i][l]);
            }
        }
    }
    for (int i = 1; i <= n; i++){
        queue < int > q;
        memset(used, 0, sizeof(used));
        memset(p, 0, sizeof(p));
        for (int j = 1; j <= n; j++) G[j].clear();
        q.push(i);
        used[i] = 1;
        int t = 0;
        while(!q.empty()){
            int v = q.front();
            q.pop();
            for (auto u: g[v]){
                if (d[i][v] + u.S == d[i][u.F]){
                    p[u.F]++;
                    if (used[u.F] == 0){
                        q.push(u.F);
                        used[u.F] = 1;
                    }
                }
            }
        }
        for (int j = i + 1; j <= n; j++){
            ans = 0;
            for (int l = 1; l <= n; l++){
                if (d[i][l] + d[l][j] == d[i][j]) ans += p[l];
            }
            cout << ans << " ";
        }
    }
}
