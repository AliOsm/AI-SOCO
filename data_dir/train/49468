#include <bits/stdc++.h>

using namespace std;

#define int long long
int n, a[200005], b[200005], t[27][200005*4], tt[27][200005*4], ans, p[200005];

int getm(int l, int r)
{
    int len=r-l+1;
    int k=p[len];
    return max(t[k][l], t[k][r-(1<<k)+1]);
}

int gtm(int l, int r)
{
    int len=r-l+1;
    int k=p[len];
    return min(tt[k][l], tt[k][r-(1<<k)+1]);
}

int binr(int ll)
{
    int r=n+1, l=ll, md;
    while (r-l>1)
    {
        md=(l+r)/2;
        int mx=getm(ll, md), mn=gtm(ll, md);
        if (mx>mn)
        {
            r=md;
        }
        else
            l=md;
    }
    if (getm(ll, l)==gtm(ll, l))
        return l;
    return -1;
}
int binl(int ll)
{
    int r=n, l=ll-1, md;
    while (r-l>1)
    {
        md=(l+r)/2;
        int mx=getm(ll, md), mn=gtm(ll, md);
        if (mx<mn)
            l=md;
        else
            r=md;
    }
    if (getm(ll, r)!=gtm(ll, r))
        return -1;
    return r;
}

main()
{
    cin >> n;
    for (int i=1;i<=n;i++)
    {
        cin >> a[i];
        t[0][i]=a[i];
    }
    for (int lvl=1;lvl<=20;lvl++)
    {
        for (int i=1;i<=n;i++)
        {
            if (i+(1<<(lvl-1))>n)
                t[lvl][i]=t[lvl-1][i];
            else
                t[lvl][i]=max(t[lvl-1][i], t[lvl-1][i+(1<<(lvl-1))]);
        }
    }
    for (int i=1;i<=n;i++)
    {
        cin >> b[i];
        tt[0][i]=b[i];
    }
    for (int lvl=1;lvl<=20;lvl++)
    {
        for (int i=1;i<=n;i++)
        {
            if (i+(1<<(lvl-1))>n)
                tt[lvl][i]=tt[lvl-1][i];
            else
                tt[lvl][i]=min(tt[lvl-1][i], tt[lvl-1][i+(1<<(lvl-1))]);
        }
    }

    for (int i=1;i<=n;i++)
    {
        int k=0;
        while ((1<<k)<=i)
            k++;
        k--;
        p[i]=k;
    }
    for (int i=1;i<=n;i++)
    {
        int x=binr(i);
        int xx=binl(i);
        if (xx<=x && xx!=-1 && x!=-1)
            ans+=(x-xx+1);
    }
    cout << ans;
}
