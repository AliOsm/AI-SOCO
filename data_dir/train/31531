#include <bits/stdc++.h>
#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define mp make_pair
#define mt make_tuple

using namespace std;

typedef pair<int, int> ii;
typedef long long ll;

const int N = 200010;

int lazy[4*N];

enum {
	NONE,
	NTOP,
	PTON,
	FLIP
};

int combine(int op1, int op2)
{
	if (op1 == NONE)
		return op2;

	if (op2 == NONE)
		return op1;

	if (op1 == op2)
	{
		if (op1 == FLIP)
			return NONE;
		return op1;
	}

	if (op1 == PTON)
		return NTOP;
	if (op1 == NTOP)
		return PTON;
	if (op1 == FLIP)
		return op2;
	assert(0);
	return -1;
}

void prop(int start, int end, int pos)
{
	if (lazy[pos] == NONE) return;
	if (start == end) return;
	lazy[2*pos + 1] = combine(lazy[2*pos + 1], lazy[pos]);
	lazy[2*pos + 2] = combine(lazy[2*pos + 2], lazy[pos]);
	lazy[pos] = NONE;
}

void update(int start, int end, int ustart, int uend, int op, int pos)
{
	if (ustart > end or uend < start)
		return;
	
	prop(start, end, pos);
	if (start >= ustart and end <= uend)
	{
		lazy[pos] = combine(lazy[pos], op);
		return;
	}

	int mid = (start+end)/2;
	update(start, mid, ustart, uend, op, 2*pos + 1);
	update(mid+1, end, ustart, uend, op, 2*pos + 2);
}

void upd(int l, int r, int op)
{
	update(0, N-1, l + N/2, r + N/2, op, 0);
}

int a[N];

const int oo = 100000;

int sgn[N];
void propall(int start, int end, int pos)
{
	if (start == end)
	{
		if (lazy[pos] == PTON or lazy[pos] == FLIP)
			sgn[start] = -1;
		else
			sgn[start] = 1;
		return;
	}
	prop(start, end, pos);
	int mid = (start+end)/2;
	propall(start, mid, 2*pos + 1);
	propall(mid+1, end, 2*pos + 2);
}

int main()
{
	int n, q;
	scanf("%d %d", &n, &q);
	for (int i = 0; i < n; i++)
		scanf("%d", a+i);
	while (q--)
	{
		char s[10];
		int x;
		scanf("%s %d", s, &x);
		if (x > 0)
		{
			if (s[0] == '>')
			{
				upd(x+1, oo, PTON);
				upd(-oo, -(x+1), NTOP);
			}
			else
			{
				upd(-(x-1), x-1, FLIP);
				upd(x, oo, NTOP);
				upd(-oo, -x, PTON);
			}
		}
		else if (x < 0)
		{
			if (s[0] == '>')
			{
				upd(x+1, -x-1, FLIP);
				upd(-oo, x, NTOP);
				upd(-x, oo, PTON);
			}
			else
			{
				upd(-oo, x-1, PTON);
				upd(-x+1, oo, NTOP);
			}
		}
		else
		{
			if (s[0] == '>')
			{
				upd(1, oo, PTON);
				upd(-oo, -1, NTOP);
			}
			else
			{
				upd(-oo, -1, PTON);
				upd(1, oo, NTOP);
			}
		}
	}
	propall(0, N-1, 0);
	for (int i = 0; i < n; i++)
	{
		if (sgn[a[i] + N/2] == -1)
			a[i] *= -1;
		printf("%d%c", a[i], " \n"[i+1 == n]);
	}
	return 0;
}

