/*
author: madhav_1999 aka orthodoxparadox
15 December 2019 at 4:22 PM
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define pii pair<int, int>
#define len(x) (int) x.size()
#define rev(a) reverse(all(a))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#define inf 2e18
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef MADHAV
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...) 42
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
template <typename T, typename S> ostream& operator << (ostream& os, const map<T, S>& v) { for (auto it : v) os << it.first << "=>" << it.second << endl; return os; }
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int MOD = 1e9 + 7;

int takemod(int a, int mod = MOD){a%=mod;if(a<0)a+=mod;return a;}

int fast_exp(int base, int expo, int mod = MOD) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a, int mod = MOD){return takemod(fast_exp(takemod(a), mod-2, mod), mod);}

const int N = 5010;
vector<int> graph[N];
int a[N], b[N], c[N];


bool mysort(const int &x, const int &y)
{
	if(c[x] == c[y]) return x > y;
	return c[x] > c[y];
}

void solve()
{
	int n, m, k;
	cin >> n >> m >> k;
	int cr = 0;
	map<int, int> mx;
	for(int i = 1; i <= n; i++)
	{
		cin >> a[i] >> b[i] >> c[i];
		mx[i] = i;
	}
	dbg(cr);
	int res[n + 1]{};
	res[n] = a[n];
	for(int i = n - 1; i >= 1; i--)
	{
		res[i] = max(a[i], res[i + 1] - b[i]);
	}
	int cursol = k;
	for(int i = 1; i <= n; i++)
	{
		if(cursol < res[i]){
			cout << -1;
			return;
		}
		cursol += b[i];
	}
	for(int i = 0; i < m; i++)
	{
		int u, v;
		cin >> u >> v;
		mx[v] = max(mx[v], u);
	}
	for(int i = 1; i <= n; i++)
	{
		graph[mx[i]].push_back(i);
	}
	for(int i = 1; i <= n; i++)
	{
		sort(all(graph[i]), mysort);
	}
	priority_queue<pii, vector<pii>, greater<pii>> pq;

	cursol = k;
	int ans = 0;
	// for(int i = 1; i <= n; i++)
	// {
	// 	dbg(i, res[i]);
	// }
	bool guarded[n + 1]{};
	for(int i = 1; i <= n; i++)
	{
		dbg(cursol, a[i], c[i]);
		cursol += b[i];
		int x = i == n ? 0 : res[i + 1];
		dbg(x);
		// dbg(i, cursol, x);
		// dbg(i, graph[i]);
		for(int j = 0; j < graph[i].size(); j++)
		{
			dbg(i, graph[i][j]);
			if(guarded[graph[i][j]]) continue;
			if(c[graph[i][j]] <= 0) break;
			if(cursol > x)
			{
				cursol--;
				pq.push(make_pair(c[graph[i][j]], graph[i][j]));
				guarded[graph[i][j]] = 1;
				ans += c[graph[i][j]];
				dbg(i, graph[i][j]);
			}
			else
			{
				if(!pq.empty() && pq.top().ff < c[graph[i][j]])
				{
					ans += c[graph[i][j]] - pq.top().ff;
					guarded[pq.top().ss] = false;
					pq.pop();
					pq.push(make_pair(c[graph[i][j]], graph[i][j]));
					guarded[graph[i][j]] = 1;
				}
				else
				{
					break;
				}
			}
		}
		// if(cursol > x)
		// {
		// 	cursol--;
		// 	pq.push(make_pair(c[i], i));
		// 	guarded[i] = 1;
		// 	ans += c[i];
		// 	dbg(i, "here");
		// }
		// else
		// {
		// 	if(!pq.empty() && pq.top().ff < c[i])
		// 	{
		// 		ans += c[i] - pq.top().ff;
		// 		guarded[pq.top().ss] = false;
		// 		pq.pop();
		// 		pq.push(make_pair(c[i], i));
		// 		guarded[i] = 1;
		// 	}
		// }
		dbg(i, ans);
	}
	cout << ans << endl;
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef MADHAV
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	clock_t t1, t2;
	t1 = clock();

	int t = 1;
	// cin >> t;
	while(t--)
	{
		solve();
	}
	#ifdef MADHAV
	t2 = clock(); cerr << "time taken: " << (t2-t1)/(dbl)CLOCKS_PER_SEC;
	#endif
	return 0;
}