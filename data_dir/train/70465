#include <cstring>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
#include <climits>
#include <cctype>
#include <bitset>
#include <list>
#include <fstream>

using namespace std;

#define all(v)              ((v).begin()), ((v).end())
#define allr(v)             ((v).rbegin()), ((v).rend())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define MP                  make_pair
#define lpv(i, v)           for(int i=0;i<sz(v);++i)
#define lpn(i, n)           for(int i=0;i<(int)(n);++i)

typedef long long                   ll;
typedef long double                 LD;
typedef vector<int>                 vi;
typedef vector<ll>                  vl;

ll suf(ll a){ return (a*(a + 1)) / 2; }
const ll  OO = 1e6 + 10;
vector<vector<int> >adj;

int dx[]{1, -1, 0, 0};
int dy[]{0, 0, 1, -1};
int dx8[]{1, -1, 0, 0, 1, -1, 1, -1};
int dy8[]{0, 0, 1, -1, 1, -1, -1, 1};

vector<int> primfact(int n)
{
	int sq = sqrt(n);
	vector<int>v;
	for (int i = 2; i <= sq; i++)
	{
		while (n % i == 0) v.push_back(i), n /= i, sq += sqrt(n);
	}
	if (n != 1)v.push_back(n);
	return v;
}

int main()
{

	int n, m, k;
	char ch[100005];
	while (cin >> n >> m)
	{
		vector<int>a = primfact(n);
		vector<int>b = primfact(m);
		sort(allr(a));
		sort(allr(b));
		int l = 1, r = 1;
		for (int i = 0; i < a.size(); i++)
			if (a[i] > 5) l *= a[i];

		for (int i = 0; i < b.size(); i++)
			if (b[i] > 5) r *= b[i];

		if (l != r)
			cout << -1;
		else 
		{
			int fiv = abs(count(all(a), 5) - count(all(b), 5));
			int thr = abs(count(all(a), 3) - count(all(b), 3));
			int two = abs(count(all(a), 2) - count(all(b), 2));
			cout << fiv + thr + two << endl;
		}
	}




	//	system("pause");
	return 0;
}