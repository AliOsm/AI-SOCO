#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

constexpr long long MAX = 5100000;
constexpr long long INF = 1LL << 60;
constexpr int inf = 1 << 28;
//constexpr long long mod = 1000000007LL;
//constexpr long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

int calc_sum(vector<int>& v) {
	int sum = 0;
	for (int i = 0; i < v.size(); i++) sum += v[i];
	return sum;
}

void invRow(vector<vector<int>>& b, int r) {
	for (int i = 0; i < b[r].size(); i++) {
		b[r][i] ^= 1;
	}
}

void invCol(vector<vector<int>>& b, int c) {
	for (int i = 0; i < b.size(); i++) {
		b[i][c] ^= 1;
	}
}

int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/

	int n, m; scanf("%d %d", &n, &m);
	vector<vector<int>> a(n, vector<int>(m)); for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) scanf("%d", &a[i][j]);
	vector<vector<int>> b;
	//1行目の0の数
	for (int cnt0 = 0; cnt0 <= m; cnt0++) {
		b = a;
		string r(n, '0');
		string c(m, '0');
		for (int i = 0; i < m; i++) {
			if (i < cnt0 && b[0][i] == 1) {
				invCol(b, i);
				c[i] = '1';
			}
			if (i >= cnt0 && b[0][i] == 0) {
				invCol(b, i);
				c[i] = '1';
			}
		}
		bool flag = true;
		if (cnt0 < m) {
			for (int i = 1; i < n; i++) {
				int sum = calc_sum(b[i]);
				if (sum != 0 and sum != m) {
					flag = false;
					break;
				}
				if (sum == 0) {
					invRow(b, i);
					r[i] = '1';
				}
			}
			if (flag) {
				puts("YES");
				cout << r << "\n" << c << "\n";
				return 0;
			}
		}
		else {
			int idx = -1;
			for (int i = 1; i < n; i++) {
				int sum = calc_sum(b[i]);
				if (sum != 0 and sum != m) {
					if (idx == -1) idx = i;
					else {
						puts("NO");
						return 0;
					}
				}
			}
			if (idx == -1) {
				for (int i = 0; i < n; i++) {
					int sum = calc_sum(b[i]);
					if (sum == m) {
						invRow(b, i);
						r[i] = '1';
					}
				}
			}
			else {
				for (int i = 1; i < n; i++) {
					if (i < idx) {
						int sum = calc_sum(b[i]);
						if (sum == m) {
							invRow(b, i);
							r[i] = '1';
						}
					}
					else if (i == idx) {
						if (b[idx][0] == 1) {
							invRow(b, i);
							r[i] = '1';
						}
						for (int j = 0; j < m - 1; j++) {
							if (b[i][j] > b[i][j + 1]) {
								puts("NO");
								return 0;
							}
						}
					}
					else {
						int sum = calc_sum(b[i]);
						if (sum == 0) {
							invRow(b, i);
							r[i] = '1';
						}
					}

				}
				puts("YES");
				cout << r << "\n" << c << "\n";
			}
		}
	}



	return 0;
}
