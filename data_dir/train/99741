#include <bits/stdc++.h>
#define endl '\n'
#define N 1'000'000
using namespace std;
typedef long long ll;
string s;
int n;
int pre[N];
int nex[N];
int head = 0;
vector<int> to_delete_copy;
set<int> to_delete;
set<int> to_check;
void check(int i) {
    if(0 <= i && i < n && ((pre[i] >= 0 && s[i] != s[pre[i]]) || (nex[i] < n && s[i] != s[nex[i]]))) {
        to_delete.insert(i);
    }
}
void del(int i) {
    if(head == i) head = nex[i];
    if(pre[i] >= 0) {
        nex[pre[i]] = nex[i];
        if(!to_delete.count(pre[i])) {
            to_check.insert(pre[i]);
        }
    }
    if(nex[i] < n) {
        pre[nex[i]] = pre[i];
        if(!to_delete.count(nex[i])) {
            to_check.insert(nex[i]);
        }
    }
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> s;
    n = s.length();
    for(int i = 0; i < n; i++) {
        pre[i] = i - 1;
        nex[i] = i + 1;
    }
    int ops = 0;
    for(int i = head; i < n; i = nex[i]) {
        check(i);
    }
    while(to_delete.size() > 0) {
        ops++;
        for(int i : to_delete) {
            to_delete_copy.push_back(i);
            del(i);
        }
        for(int i : to_delete_copy) {
            to_delete.erase(i);
        }
        to_delete_copy.clear();
        for(int i : to_check) {
            check(i);
        }
        to_check.clear();
    }
    cout << ops << endl;
    return 0;
}
