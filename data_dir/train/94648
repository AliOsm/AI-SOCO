#include <bits/stdc++.h>
using namespace std;
#define mp make_pair
#define pb push_back
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(),(x).end()
#define EPS 1e-9
#define OO 1e9
#define X real()
#define Y imag()
#define vec(a,b) ((b)-(a))
#define polar(r,t) ((r)*exp(point(0,(t))))
#define angle(v) (atan2((v).Y,(v).X))
#define length(v) ((double)hypot((v).Y,(v).X))
#define lengthSqr(v) (dot(v,v))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define rotate(v,t) (polar(v,t))
#define rotateabout(v,t,a)  (rotate(vec(a,v),t)+(a))
#define reflect(p,m) ((conj((p)/(m)))*(m))
#define normalize(p) ((p)/length(p))
#define same(a,b) (lengthSqr(vec(a,b))<EPS)
#define mid(a,b) (((a)+(b))/point(2,0))
#define perp(a) (point(-(a).Y,(a).X))
#define colliner pointOnLine
typedef long long ll;
const int oo = (1<<30);
const int mod = (int) 1e9 + 7;
const double PI = acos(-1.0);
typedef complex<long double> point;

long double h, w, alpha, alpha0;

point intersect(const point &a, const point &b, const point &p, const point &q)
{
    //handle degenerate cases (2 parallel lines, 2 identical lines,   line is 1 point)
    long double d1 = cross(p - a, b - a);
    long double d2 = cross(q - a, b - a);
    return (d1 * q - d2 * p) / (d1 - d2);
}

double triangleArea3points(const point& a, const point& b, const point& c)
{
    return fabs(cross(a,b) + cross(b,c) + cross(c,a)) / 2;
}

double case_1()
{
    point A1(-w/2, h/2);
    point B1(w/2, h/2);
    point C1(w/2, -h/2);
    point D1(-w/2, -h/2);

    point A2 = rotate(A1, alpha);
    point B2 = rotate(B1, alpha);
    point C2 = rotate(C1, alpha);

    point xx = intersect(A1, B1, A2, B2);
    point yy = intersect(A1, B1, B2, C2);
    point zz = intersect(B1, C1, B2, C2);

    return h * w - 2 * triangleArea3points(xx, yy, B2) - 2 * triangleArea3points(B1, yy, zz);
}

double case_2()
{
    point A1(-w/2, h/2);
    point B1(w/2, h/2);

    point A2 = rotate(A1, alpha);
    point B2 = rotate(B1, alpha);

    point xx = intersect(A1, B1, A2, B2);
    return h * length(vec(xx, B1));
}

double case_3()
{
    point A1(-w/2, h/2);
    point B1(w/2, h/2);
    point C1(w/2, -h/2);
    point D1(-w/2, -h/2);

    point A2 = rotate(A1, alpha);
    point B2 = rotate(B1, alpha);
    point C2 = rotate(C1, alpha);
    point D2 = rotate(D1, alpha);

    point xx = intersect(A1, B1, A2, B2);
    point yy = intersect(A1, B1, C2, D2);
    return h * length(vec(xx, yy));
}

int main()
{
    cin >> h >> w >> alpha;
    if(h > w) swap(h, w);
    if(alpha > 90) alpha = 180 - alpha;
    alpha = alpha * PI / 180;
    if(alpha == 0){
        cout << fixed << setprecision(10) << h * w << endl;
        return 0;
    }
    alpha0 = 2 * atan(h / w);
    double ans;
    if(alpha < alpha0) ans = case_1();
    else if(fabs(alpha - alpha0) < EPS) ans = case_2();
    else ans = case_3();
    cout << fixed << setprecision(10) << ans << endl;
    return 0;
}
