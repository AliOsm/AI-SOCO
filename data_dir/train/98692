//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#include <iomanip>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define INF (100000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;


#define matrix vector< vector<ll> >

matrix matmul(matrix &a, matrix &b){
    int i, j, k, n = a.size();
    matrix ans (n, vector<ll>(n));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            ll temp = 0;
            for(k=0;k<n;k++)    temp = (temp + a[i][k] * b[k][j]) % MOD;
            ans[i][j] = temp;
        }

    return ans;
}

matrix matpwr(matrix &a, ll p){
    int n = a.size();
    matrix ans(n, vector<ll> (n));
    for(int i=0;i<n;i++)    ans[i][i] = 1;

    while(p){
        if(p&1) ans = matmul(ans, a);

        a = matmul(a, a);
        p >>= 1;
    }
    return ans;
}


ll pwr(ll base, ll p, ll mod = MOD){
    ll ans = 1;
    while(p){
        if(p & 1)   ans = (ans * base) % mod;
        base = (base * base) % mod;
        p /= 2;
    }
    return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


ll lcm(ll a, ll b){
    return (a*b) / gcd(a, b);
}


ll invMod(ll n, ll mod = MOD){
    return pwr(n, mod-2, mod);
}


ll fac[100005], invFac[100005];
int mobius[100004], sieve[100005];


ll nCr(ll n, ll r){
    if(r < 0 || r>n)    return 0;
    ll ans = fac[n];
    ans = (ans * invFac[n-r]) % MOD;
    ans = (ans * invFac[r]) % MOD;
    return ans;
}


ll countSolutions(ll g, ll f, ll n){

    if(g*f > n) return 0;
    ll r = (n-g*f)/g;
    return nCr(f+r-1, r);
}


int main()
{
    // ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    fac[0] = invFac[0] = 1;
    for(int i=1;i<=100004;i++){
        fac[i] = (i * fac[i-1]) % MOD;
        invFac[i] = invMod(fac[i]);
    }

    for(int i=1;i<=100000;i++)
        mobius[i] = 1;
    for(int i=2;i<=100000;i++){
        if(!sieve[i]){
            for(int j=i;j<=100000;j+=i){
                mobius[j] *= -1;
                if((j/i) % i == 0)  mobius[j] = 0;
                sieve[j] = 1;
            }
        }
    }

    //Mobius inversion
    //ans = sum (mobius[i] * no of solutions of equation x1+x2+..xf=n and i|(x1, x2, ..xf))

    int t;
    scanf("%d", &t);
    while(t--){

        int n, f;
        scanf("%d%d", &n, &f);

        ll ans = 0;
        for(int i=1;(ll)i*i<=n;i++){

            if(n % i != 0)  continue;
            ans = (ans + mobius[i] * countSolutions(i, f, n)) % MOD;
            if(i != n/i)    ans = (ans + mobius[n/i] * countSolutions(n/i, f, n)) % MOD;
        }

        if(ans < 0) ans += MOD;
        printf("%I64d\n", ans);
    }

    return 0;
}











