#include <bits/stdc++.h>

using namespace std;


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int n;
  cin >> n;
  vector<int> ne(26, -1);
  set<int> h;
  for (int i = 0; i < n; i++) {
    string s;
    cin >> s;
    vector<int> have(26);
    for (auto& x : s) {
      h.insert(x - 'a');
    }
    for (int j = 0; j < (int) s.size(); j++) {
      int k = j + 1;
      if (have[s[j] - 'a']) {
        cout << "NO\n";
        return 0;
      }
      have[s[j] - 'a'] = 1;
      if (k < (int) s.size()) {
        if (ne[s[j] - 'a'] > -1 && ne[s[j] - 'a'] != s[k] - 'a') {
          cout << "NO\n";
          return 0;
        }
        for (int l = 0; l < 26; l++) {
          if (l == s[j] - 'a') {
            continue;
          }
          if (ne[l] == s[k] - 'a') {
            cout << "NO\n";
            return 0;
          }
        }
        ne[s[j] - 'a'] = s[k] - 'a';
      }
    }
  }
  vector<int> ans;
  vector<int> used(26);
  function<bool(int)> dfs = [&](int v) { 
    used[v] = 1;
    ans.push_back(v);
    if (ne[v] > -1) {
      if (used[ne[v]] == 1) {
        return false;
      }
      if (used[ne[v]] == 0) {
        if (!dfs(ne[v])) {
          return false;
        }
      }
    }
    used[v] = 2;
    return true;
  };
  for (auto& x : h) {
    if (!used[x]) {
      if (!dfs(x)) {
        cout << "NO\n";
        return 0;
      }
    }
  }
  ans.clear();
  for (auto& x : h) {
    used[x] = 0;
  }
  for (auto& x : h) {
    bool skip = false;
    for (int i = 0; i < 26; i++) {
      if (ne[i] == x) {
        skip = true;
        break;
      }
    }
    if (skip) {
      continue;
    }  
    if (!used[x]) {
      if (!dfs(x)) {
        cout << "NO\n";
        return 0;
      }
    }
  }
  for (auto& x : ans) {
    cout << (char) (x + 'a');
  }
  cout << '\n';
  return 0;
}