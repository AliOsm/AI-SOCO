/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

const int N = 6e6 + 5;
int m, h[N] = {29}, nxt[N][2];
vector<int> a[N];

void add_trie(int x) {
	int cur = 0;
	for (int i = 29; ~i; i--) {
		if (!nxt[cur][x >> i & 1])
			h[nxt[cur][x >> i & 1] = ++m] = i - 1;
		cur = nxt[cur][x >> i & 1];
	}
	a[cur].push_back(x);
}

int get_trie(int x, int cur) {
	int ans = 0;
	for (int i = h[cur]; ~i; i--)
		if (nxt[cur][x >> i & 1])
			cur = nxt[cur][x >> i & 1];
		else {
			cur = nxt[cur][~x >> i & 1];
			ans += 1 << i;
		}
	return ans;
}

long long dfs(int u) {
	long long ans = 0;
	if (nxt[u][0])
		ans += dfs(nxt[u][0]);
	if (nxt[u][1])
		ans += dfs(nxt[u][1]);
	if (!nxt[u][0] || !nxt[u][1]) {
		if (nxt[u][0])
			swap(a[u], a[nxt[u][0]]);
		if (nxt[u][1])
			swap(a[u], a[nxt[u][1]]);
		return ans;
	}
	int v1 = nxt[u][0], mn = 2e9;
	if (a[v1].size() > a[nxt[u][1]].size())
		v1 = nxt[u][1];
	int v2 = nxt[u][0] ^ nxt[u][1] ^ v1;
	for (auto x: a[v1]) {
		mn = min(mn, get_trie(x, v2));
		a[v2].push_back(x);
	}
	ans += 1 << h[u] | mn;
	swap(a[u], a[v2]);
	a[v1].clear();
	return ans;
}

int main() {
	int n;
	cin >> n;
	while (n--) {
		int x;
		cin >> x;
		add_trie(x);
	}
	cout << dfs(0);
}
