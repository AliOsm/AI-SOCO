#include <bits/stdc++.h>
using namespace std;


int cnt=0;
map<string,int>M;
pair<int,int>arr[6*(int)1e5+5];
vector<int>vec[6*(int)1e5+5];

typedef pair<pair<int,int>,int> pii;
//priority_queue<pii,vector<pii>,greater<pii> >pq;
set<pii>st;

void enlist(string &s){
	int rcnt=0;
	for(int i=0;i<s.size();i++){
		if('A'<=s[i] && s[i]<='Z'){
			s[i]-='A';
			s[i]+='a';
		}
		if(s[i]=='r')rcnt++;
	}
	if(!M[s]){
		M[s]=++cnt;
		arr[cnt]=make_pair(rcnt,s.size());
	}
}


void updateAll(){
	while(!st.empty()){
		int u=st.begin()->second;
		
		st.erase(st.begin());	
		for(int i=0;i<(int)vec[u].size();i++){
			int v=vec[u][i];
			if(arr[v]>arr[u]){
				arr[v]=arr[u];
				st.insert(make_pair(arr[v],v));
		//		cout<<u<<" "<<v<<endl;
			}
		}
	}
}
		
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	int m;
	cin>>m;

	vector<int>given;
	for(int i=1;i<=m;i++){
		string s;
		cin>>s;

		enlist(s);
		given.push_back(M[s]);
	}

	int n;
	cin>>n;

	for(int i=1;i<=n;i++){
		string s1,s2;	
		cin>>s1>>s2;
		
		enlist(s1);
		enlist(s2);
		
		vec[M[s2]].push_back(M[s1]);
		st.insert(make_pair(arr[M[s2]],M[s2]));	
	}		

	updateAll();

	pair<long long,long long>res=make_pair(0,0);
	for(int i=0;i<(int)given.size();i++){
		res.first+=(long long)arr[given[i]].first;		
		res.second+=(long long)arr[given[i]].second;		
	}		
	cout<<res.first<<" "<<res.second<<"\n";
	//printf("%lld %lld\n",res.first,res.second);

	return 0;
}
