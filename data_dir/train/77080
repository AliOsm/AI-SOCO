#include <iostream>
#include <stdio.h>
#include <bits/stdc++.h>
#include <math.h>
#include <string>
#include <sstream>
#define ll long long
#define F first
#define S second
#define pb push_back
#define ld long double
#define pll pair<long long,long long>
#define pld pair<long double,long double>
#define ios     ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
using namespace std;
ll mod=1000000007;
ll gcd (ll a,ll b)
{
    if(b==0)
        return a;
    else
        return gcd(b,a%b);
}
ll fastexp(ll x ,ll n)
{
    ll result =1;
    while(n>0)
    {
        if(n%2==1)
            result*=x;
        x*=x;
        n=n/2;
    }
    return result;
}

ll modularExp(ll x,ll n,ll mod)
{
    ll result=1;
    while(n>0)
    {
        if(n%2==1)
            result=(result*x)%mod;
        x=((x%mod)*(x%mod))%mod;
        n=n/2;
    }
    return (result)%mod;
}
bool isPrime(ll n)
{
    for(ll i=2;i*i<=n;i++)
        if(n%i==0)
            return false;
    return true;
}
bool mycomp(pll &a,pll &b)
{
    if(a.F!=b.F)
        return a.F < b.F;
    else
        return a.S < b.S;
}
vector<ll> par(1005),sz(1005);
ll froot(ll x)
{
     ll y=x;
     while(x!=par[x])
          x=par[x];
     par[y]=x;
     return x;
}


void solve()
{
     ll n;
     cin>>n;
     ll i;
     for(i=1;i<=n;i++)
          par[i]=i;
     vector<pll> a,b;
     for(i=0;i<n-1;i++)
     {
          ll x,y;
          cin>>x>>y;
          ll r1=froot(x);
          ll r2=froot(y);
          if(r1==r2)
               a.pb({x,y});
          else 
          {
               par[r1]=r2;
          }
     }
     vector<ll> np;
     for(i=1;i<=n;i++)
          if(i==par[i])
               np.pb(i);
     for(i=1;i<np.size();i++)
          b.pb({np[0],np[i]});
     cout<<a.size()<<"\n";
     for(i=0;i<a.size();i++)
          cout<<a[i].F<<" "<<a[i].S<<" "<<b[i].F<<" "<<b[i].S<<"\n";

}


int main()
{
    ios;
    ll t;
    t=1;
//    cin>>t;
    while(t--)
        solve();
}