#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define repr(i,x,y) for (__typeof(x) i=x;i>=y;i--)
#define rep(i,x,y) for (__typeof(x) i=x;i<=y;i++)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

/* Print pair */
template <typename T,typename S>
ostream & operator << (ostream &os , const pair<T,S> &v) {
    os << "(" ;
    os << v.first << "," << v.second << ")" ;
    return os ;
}
/* Print vector */
template <typename T>
ostream & operator << (ostream &os , const vector<T> &v) {
    os << "[" ;
    int sz = v.size() ;
    for(int i = 0 ; i < sz ; ++i) {
        os << v[i] ;
        if(i!=sz-1)os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print set */
template <typename T>
ostream & operator << (ostream &os , const set<T> &v) {
    T last = *v.rbegin() ;
    os << "[" ;
    for(auto it : v) {
        os << it  ;
        if(it != last) os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print Map */
template <typename T,typename S>
ostream & operator << (ostream &os , const map<T,S> &v) {
    for(auto it : v) {
        os << it.first << " : " << it.second << "\n" ;
    }
    return os ;
}
int power(int a , int b)
{
    int res = 1 ;
    while(b)
    {
        if(b%2) {
            res = (res * a) % mod ;
        }
        b/=2 ;
        a = (a*a) % mod ;
    }
    return res ;
}

//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
        cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
const int N = 1e5 + 5 ; 
int brr[N] , arr[N] ; 
int id[N] , sz[N] ; 
vector<int> ans[N] ; 
int root(int i) {
    while(i != id[i]) i= id[i] ; return i ; 
}
void unite(int a,int b) {
    a = root(a) , b = root(b) ; 
    if(a == b) return ; 
    if(sz[a] > sz[b]) swap(a,b) ; 
    sz[b] += sz[a] ; 
    id[a] = b ;  
}
int32_t main()
{
    fast;
    int n ; cin >> n ; 
    rep(i,1,n) cin >> arr[i] ; 
    set<int> s ; 
    int index = 0 ; 
    map<int,int> cnt ; 
    rep(i,1,n) s.insert(arr[i]) ; 
    for(auto it : s) {
        cnt[it] = ++index ;    
    }
    rep(i,1,n) arr[i] = cnt[arr[i]] ; 
    rep(i,1,n) brr[i] = arr[i] ; 
    sort(brr + 1 , brr + 1 + n) ;
    map<int,int> indexes ; 
    rep(i,1,n) indexes[arr[i]] = i ;  
    rep(i,1,n) id[i] = i , sz[i] = 1 ;
    rep(i,1,n) {
        int a = arr[i] , b = brr[i] ; 
        if(a == b) {} 
        else {
            unite(i , indexes[b]) ; 
        }
    }  
    rep(i,1,n) {
        ans[root(i)].pb(i) ; 
    }
    int res = 0 ; 
    rep(i,1,n) if(ans[i].empty() == false) res++ ; 
    cout << res << endl ; 
    rep(i,1,n) {
        if(ans[i].empty()) continue ; 
        cout << ans[i].size() << " " ; 
        for(auto it : ans[i]) cout << it << " " ; 
        cout << endl ; 
    } 
    return 0;
}
