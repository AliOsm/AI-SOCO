#include<stdio.h>
#include<vector>
#include<algorithm>
#include <iostream>
#include <cmath>
#include <complex>
#include<queue>
#include <string>
#include<bits/stdc++.h>
#define pi 3.141592654
#define forr(i,a,b) for(int i=a;i<=b;i++)
#define F first
#define S second
using namespace std;
typedef pair<double,double>pdd;
typedef long long  ll;
typedef pair<ll, ll>pii;
//template<typename T>T gcd(T x, T y) { if(y == 0)return x; else return gcd(y, x%y); }
//typedef bitset<8> mask;
//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};
//const double PI = acos(-1.0);
//const double EPS = 1e-9;
//typedef complex<double> point;
int q,n,mn[110],mx[110],a[505],dis[505][505],OO=1e9,x,y,e,src,snk,from[1000007],to[1000007],cap[1000007],cost[1000007],dp[1000007],p[1000007],gg;
map<pair<int,int>,int>ck;
vector<int>path;
void connect(int i,int j,int c,int v)
{
    e++;
    from[e]=i;
    to[e]=j;
    cap[e]=c;
    cost[e]=v;
}
void biconnect(int i,int j,int c,int v)
{
    connect(i, j, c, v);
    connect(j, i, 0, -v);
}
void query()
{
    dp[src]=0;
    p[src]=-1;
    forr(i,1,2*n)
    {
        int r=0;
        forr(j,0,e)
        {
            if(cap[j]==0)continue;
            if(dp[from[j]]+cost[j]<dp[to[j]])
            {
                dp[to[j]]=dp[from[j]]+cost[j];
                p[to[j]]=from[j];
                ck[{from[j],to[j]}]=j;
                r=1;
            }
        }
        if(!r)return;
    }
}
void bulid(int i)
{
    if(i==-1)return;
    bulid(p[i]);
    path.push_back(i);
}
int main()
{

//cout<<Pow((ll)1000000,(ll)110);
//freopen("hotel.in","r",stdin);
//freopen("math.in","w",stdout);
//    char input[15];
//    scanf("%s", &input);
    cin>>n>>q;
    forr(i,1,n)
    {
      mn[i]=1;
      mx[i]=n;
    }
    int t,l,r,v;
    forr(i,1,q)
    {
        cin>>t>>l>>r>>v;
        if(t==1)
            forr(j,l,r)
            mn[j]=max(mn[j],v);
        else
            forr(j,l,r)
            mx[j]=min(mx[j],v);
    }
    e=-1,src=0,snk=2*n+1;
    int cur=0;
    forr(i,1,n)
    {
    cur=0;
    forr(j,1,n)
    {
      biconnect(src,i,1,j*j-cur);
      cur=j*j;
    }
    }
    forr(i,1,n)
    {
        if(mn[i]>mx[i])
        {
            cout<<"-1";
            return 0;
        }
        forr(j,mn[i],mx[i])
            biconnect(j,i+n,1,0);
    }
    forr(i,1,n)
      biconnect(i+n,snk,1,0);
    int ans=0;
    while(1)
    {
        fill(dp,dp+2*n+2,OO);
        query();
        if(dp[snk]==OO)break;
        path.clear();
        bulid(snk);
        int g=0;
        forr(i,0,path.size()-2)
        {
            int y=ck[{path[i],path[i+1]}];
            cap[y]--;
            cap[y^1]++;
            g+=cost[y];
        }
        ans+=g;
    }
     cout<<ans<<endl;

return 0;
}
