#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define MAX 5000005
#define INF 1e18
ll arr[MAX], sum[MAX];
bool prime[MAX];

void sieve()
{
    memset(prime, true, sizeof prime);
    prime[0] = prime[1] = false;
    for(ll i=2; i<MAX; i++){
        if(prime[i]){
            for(ll j=2*i; j<MAX; j+=i) prime[j] = false;
        }
    }
}

vector<ll> gen(ll x)
{
    vector<ll> ret;
    for(ll i=2; i<MAX; i++){
        if(prime[i] == false) continue;
        if(x%i == 0){
            ret.push_back(i);
            while(x%i==0) x=x/i;
        }
    }
    if(x != 1) ret.push_back(x);
    return ret;
}

ll func(vector<ll> &v, ll p)
{
    int n = (int) v.size();
    ll pre_sum = 0, suff_sum = 0;
    ll pre_val = 0, suff_val = 0;
    for(int i=0; i<n; i++){
        if(v[i]){
            suff_val += i*v[i];
            suff_sum += v[i];
        }
    }
    ll mins = INF;
    for(int i=0; i<n; i++){
        if(v[i]){
            suff_val -= i*v[i];
            suff_sum -= v[i];
        }
        ll cost = i*pre_sum - pre_val + suff_val - i*suff_sum;
        mins = min(mins, cost);
        if(v[i]){
            pre_val += i*v[i];
            pre_sum += v[i];
        }
    }
    return mins;
}

ll calc(ll val, ll n)
{
    vector<ll> temp;
    ll cur = 0;
    ll ans = 0;
    for(ll i=1; i<=n; i++){
        ll nows = arr[i]%val;
        if(cur+nows>=val){
            temp.push_back(val-cur);
            ans += func(temp, val);
            temp.clear();
            cur = cur+nows-val;
            if(cur != 0) temp.push_back(cur);
        }
        else {
            cur += nows;
            temp.push_back(nows);
        }
    }
    return ans;
}

int main()
{
    //freopen("in.txt", "r", stdin);
    ll n;
    sieve();
    scanf("%lld", &n);
    sum[0] = 0;
    for(ll i=1; i<=n; i++){
        scanf("%lld", &arr[i]);
        sum[i] = sum[i-1] + arr[i];
    }
    if(sum[n] == 1){
        cout << -1;
        return 0;
    }
    if(n == 1){
        cout << 0;
        return 0;
    }
    vector<ll> divisor = gen(sum[n]);
    ll mins = INF;
    for(int i=0; i<divisor.size(); i++){
        mins = min(mins, calc(divisor[i], n));
    }
    cout << mins << endl;
}