#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 4e6 + 1;
const int M = 1e6;
int n, m;
int ans;

struct Dsu {
    int par[N];
    int cnt[N];
} dsu;

int root(int u) {
    if(dsu.par[u] == u) {
        return u;
    } else {
        return dsu.par[u] = root(dsu.par[u]);
    }
}

void unite(int u, int v) {
    if(dsu.cnt[u] < dsu.cnt[v]) {
        swap(u, v);
    }
    u = root(u);
    v = root(v);
    if(u == v) {
        return;
    }
    dsu.cnt[u] += dsu.cnt[v];
    dsu.par[v] = u;
    ans--;
}

void input() {
    cin >> n >> m;
    ans = (n + m) * 2;
}

void solve() {
    for(int i = 1; i < N; ++i) {
        dsu.cnt[i] = 1;
        dsu.par[i] = i;
    }
    unite(1, 1 + M);
    unite(n, 1 + M * 3);
    unite(m + M * 1, 1 + M * 2);
    unite(n + M * 2, m + M * 3);
    for(int i = 1; i <= n; ++i) {
        int a = min(i - 1, m - 1);
        int b = min(n - i, m - 1);
        if(a == i - 1) {
            unite(i, 1 + a + M);
        } else {
            unite(i, i - a + M * 2);
        }
        if(b == n - i) {
            unite(i, 1 + b + M * 3);
        } else {
            unite(i, i + b + M * 2);
        }
    }
    for(int i = 1; i <= m; ++i) {
        int a = min(i - 1, n - 1);
        int b = min(m - i, n - 1);
        if(a == i - 1) {
            unite(i + M, 1 + a);
        } else {
            unite(i + M, i - a + M * 3);
        }
        if(b == m - i) {
            unite(i + M, 1 + b + M * 2);
        } else {
            unite(i + M, i + b + M * 3);
        }
    }
    for(int i = 1; i <= n; ++i) {
        int a = min(i - 1, m - 1);
        int b = min(n - i, m - 1);
        if(a == i - 1) {
            unite(i + M * 2, m - a + M);
        } else {
            unite(i + M * 2, i - a);
        }
        if(b == n - i) {
            unite(i + M * 2, m - b + M * 3);
        } else {
            unite(i + M * 2, i + b);
        }
    }
    for(int i = 1; i <= m; ++i) {
        int a = min(i - 1, n - 1);
        int b = min(m - i, n - 1);
        if(a == i - 1) {
            unite(i + M * 3, n - a);
        } else {
            unite(i + M * 3, i - a + M);
        }
        if(b == m - i) {
            unite(i + M * 3, n - b + M * 2);
        } else {
            unite(i + M * 3, i + b + M);
        }
    }
    cout << ans << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
