#include "bits/stdc++.h"
#define MAXN 200009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second

using namespace std;

typedef long long ll;
typedef pair<int,int> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
int node,pos[MAXN];
map<int,int>pm;
set<pair<int,PII> >s;
set<int>ind;
void ID(int &x){
	if(!pm[x])
		pm[x]=++node;
	x=pm[x];			
}
//~ bool mark[MAXN];
int main(){
	#ifndef ONLINE_JUDGE
    freopen("file.in", "r", stdin);
	#endif	
	int n,q;
	scanf("%d%d",&n,&q);
	s.insert(mp(0,mp(-INF,INF)));
	while(q--){
		int type,x;
		scanf("%d%d",&type,&x);
		ID(x);
		if(type==1){
			pair<int,PII> now=*s.rbegin();
			now=*s.lower_bound(mp(now.ff,mp(-2*INF,-INF)));
			s.erase(now);
			if(now.ss.ff==-INF and now.ss.ss==INF){
				s.insert(mp(n-1,mp(2,INF)));
				pos[x]=1;
			}
			else if(now.ss.ff==-INF){
				pos[x]=1;
				__typeof((ind).begin()) it=ind.upper_bound(pos[x]);
				if(pos[x]+1<*it)
					s.insert(mp((*it-pos[x])/2,mp(pos[x]+1,*it-1)));
			}
			else if(now.ss.ss==INF){
				pos[x]=n;
				__typeof((ind).begin()) it=ind.upper_bound(pos[x]);it--;
				if(*it+1<pos[x])
					s.insert(mp((pos[x]-*it)/2,mp(*it+1,pos[x]-1)));
			}
			else{
				pos[x]=now.ss.ff+now.ff-1;
				__typeof((ind).begin()) it=ind.upper_bound(pos[x]);
				if(pos[x]+1<*it)
					s.insert(mp((*it-pos[x])/2,mp(pos[x]+1,*it-1)));
				it--;
				if(*it+1<pos[x])
					s.insert(mp((pos[x]-*it)/2,mp(*it+1,pos[x]-1)));	
			}
			ind.insert(pos[x]);
			//~ int mx=-1,ps;
			//~ for(int i=1;i<=n;i++)
				//~ if(!mark[i]){
					//~ int mn=INF;
					//~ for(int j=1;j<=n;j++)
						//~ if(mark[j])
							//~ umin(mn,abs(i-j));
					//~ if(umax(mx,mn))
						//~ ps=i;
				//~ }	
			//~ if(mx==INF)
				//~ ps=1;
			//~ printf("add to %d\n",pos[x]);	
			//~ printf("pos[x]=%d ps=%d\n",pos[x],ps);	
			//~ assert(ps==pos[x]);
			printf("%d\n",pos[x]);
			//~ mark[ps]=true;
		}
		else{
			ind.erase(pos[x]);
			//~ mark[pos[x]]=false;	
			if(ind.size()==0){
				s.clear();
				s.insert(mp(0,mp(-INF,INF)));
				continue;
			}
			__typeof((ind).begin()) it=ind.upper_bound(pos[x]);
			if(it==ind.end()){
				it--;
				if(pos[x]!=n)
					s.erase(mp(n-pos[x],mp(pos[x]+1,INF)));
				s.erase(mp((pos[x]-*it)/2,mp(*it+1,pos[x]-1)));
				s.insert(mp(n-*it,mp(*it+1,INF)));
			}
			else if(it==ind.begin()){
				if(pos[x]!=1)
					s.erase(mp(pos[x]-1,mp(-INF,pos[x]-1)));
				s.erase(mp((*it-pos[x])/2,mp(pos[x]+1,*it-1)));
				s.insert(mp(*it-1,mp(-INF,*it-1)));
			}
			else{
				__typeof((ind).begin()) itt=it;
				itt--;
				s.erase(mp((*it-pos[x])/2,mp(pos[x]+1,*it-1)));
				s.erase(mp((pos[x]-*itt)/2,mp(*itt+1,pos[x]-1)));
				s.insert(mp((*it-*itt)/2,mp(*itt+1,*it-1)));
			}
			//~ printf("remove to %d\n",pos[x]);
			pos[x]=0;
		}
		//~ tr(it,s)
			//~ cout<<it->ss.ff<<" "<<it->ss.ss<<endl;
		//~ cout<<"avaible indexes=";	
		//~ tr(it,ind)
			//~ cout<<*it<<" ";
		//~ cout<<endl;
		//~ wr	
	}
	return 0;
}
