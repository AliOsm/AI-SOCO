#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>
#include <numeric>
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

constexpr long long MAX = 5100000;
constexpr long long INF = 1LL << 60;
constexpr int inf = 1 << 28;
constexpr long long mod = 1000000007LL;
//constexpr long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;


int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/

	ll n, a, b; scanf("%lld %lld %lld", &n, &a, &b);
	if (n == 1) {
		puts("YES");
		puts("0");
		return 0;
	}
	if (a != 1 and b != 1) {
		puts("NO");
		return 0;
	}
	if (a == 1 and b == 1) {
		if (n <= 3) {
			puts("NO");
			return 0;
		}
		else {
			puts("YES");
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					if (j == i + 1 or j == i - 1) cout << "1";
					else cout << "0";
					if (j == n - 1) cout << "\n";
				}
			}
			return 0;
		}
	}
	bool flag = true;
	if (a > b) {
		swap(a, b);
		flag = false;
	}
	vector<vector<int>> res(n, vector<int>(n));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (i == j) continue;
			if (i >= b - 1 and j >= b - 1) res[i][j] = 1;
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (i == j) continue;
			res[i][j] ^= flag;
		}
	}
	puts("YES");
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cout << res[i][j];
			if (j == n - 1) cout << "\n";
		}
	}
	return 0;
}