#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <cstdio>
#include <map>
#include <unordered_map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <unordered_set>
#include <stack> 
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
#pragma comment (linker, "/STACK:167177216")
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
#define sz(a) (int)a.size()
#define pb push_back
const int MAXN = 2 * 1000 * 1000 + 500;

struct vert{
	vert *l, *r;
	int left, right;
	int sum;
	vert(int from, int to) :left(from), right(to), sum(0), l(NULL), r(NULL){}
};

int get_sum(vert *v){
	if (v) return v->sum;
	return 0;
}

void set_val(vert *v, int pos, int val){
	if (v->left == v->right && v->left == pos){
		v->sum = val;
		return;
	}

	int mid = (v->left + v->right) / 2;
	if (pos <= mid){
		if (!v->l){
			v->l = new vert(v->left, mid);
		}

		set_val(v->l, pos, val);
	}
	else{
		if (!v->r){
			v->r = new vert(mid + 1, v->right);
		}

		set_val(v->r, pos, val);
	}

	v->sum = get_sum(v->l) + get_sum(v->r);
}

int get_val(vert *v, int l, int r){
	if (!v) return 0;
	if (l > r) return 0;

	if (v->left == l && v->right == r){
		return v->sum;
	}

	int mid = (v->left + v->right) / 2;
	return get_val(v->l, l, min(r,mid)) + get_val(v->r, max(mid + 1, l), r);
}

int main(int argc, char* argv[]) {

#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("numbers.in", "r", stdin); freopen("numbers.out", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	
	map<int, vert*> M;
	int n;
	scanf("%d", &n);
	forn(i, 0, n){
		int a, t, x;
		scanf("%d%d%d", &a, &t, &x);
		if (a == 1){
			if (!M.count(x)){
				M[x] = new vert(0, (1 << 30));
			}

			vert *root = M[x];
			set_val(root, t, 1);
		}
		if (a == 2){
			if (!M.count(x)){
				M[x] = new vert(0, (1 << 30));
			}

			vert *root = M[x];
			set_val(root, t, -1);
		}
		if (a == 3){
			if (!M.count(x)){
				M[x] = new vert(0, (1 << 30));
			}

			vert *root = M[x];
			int val = get_val(root, 1, t);
			printf("%d\n", val);
		}
	}

	return 0;
}