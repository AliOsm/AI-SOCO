//#if !defined(YCM) && 1
//#define _FORTIFY_SOURCE 0
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC target("avx")
////#pragma GCC optimize ("O3")
////#pragma GCC target ("sse4")
//#include <stdio.h>
//#endif

#include <bits/stdc++.h>
#include <unistd.h>
//#pragma GCC diagnostic ignored "-Wunused-result"
//#pragma GCC diagnostic ignored "-Wunused-function"
using namespace std;
#define ll int64_t
#define ull unsigned long long int
#define clr(a) memset(a,0,sizeof(a))
#define clr_(a) memset(a,-1,sizeof(a))
#define pb(a) push_back(a)
#define pii pair<int,int>

#define eps 1e-9
#define inf INT_MAX
#define pi acos(-1.0)
#define ff first
#define ss second
#define INF (ll)1e18
#define m_p make_pair
#define vsort(v) sort(v.begin(),v.end())
#define all(v) v.begin(),v.end()
int fx[]={0,0,-1,1,-1,1,1,-1};
int fy[]={1,-1,0,0,1,1,-1,-1};
ll lcm(ll a,ll b){return (a/__gcd(a,b))*b;}
ll bigmod(ll a,ll p,ll mod){ll ans=1;while(p){if(p&1)ans=ans*a%mod;a=a*a%mod;p>>=1;}return ans;}
ll power(ll x,ll n){if(n==0)return 1;else if(n%2==0){ll y=power(x,n/2);return y*y;}else return x*power(x,n-1);}

#ifdef shaft
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cerr << name << " is " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cerr.write(names, comma - names) << " is " << arg1 <<endl;
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif
const int N=(int)3e5+5;
struct data{
    int typ;
    ll  l, r;
};
data Q[N];
map<ll,int>mp;
map<int,ll>rev;
int prop[N*4], tree[N*4];
void build(int node, int b, int e){
    tree[node] = 0;
    prop[node] = 0;
    if(b == e){
        return;
    }
    int lft = node*2, rght = lft+1;
    int mid = (b+e)/2;
    build(lft, b, mid);
    build(rght, mid+1, e);
}
void propagate(int node, int b, int e){
    if(b == e){
        prop[node] = 0;
        return;
    }
    int lft = node*2, rght = lft+1;
    int mid = (b+e)/2;
    int p = prop[node];
    if(p == 1){
        tree[lft] = (mid-b+1);
        tree[rght] = (e-mid);
        prop[lft] = 1;prop[rght] = 1;
    }
    else if(p == 2){
        tree[lft] = 0;
        tree[rght] = 0;
        prop[lft] = 2;prop[rght] = 2;
    }
    else{
        tree[lft] = (mid-b+1)-tree[lft];
        tree[rght] = (e-mid)-tree[rght];
        prop[lft] ^= 3;
        prop[rght] ^= 3;
    }
    prop[node] = 0;
}
void update(int node, int b, int e, int i, int j, int typ){
    if(prop[node])
        propagate(node, b, e);
    if(b > j || e < i)
        return;
    if(b >= i && e <= j){
        prop[node] = typ;
        if(typ == 1)
            tree[node] = (e-b+1);
        else if(typ == 2)
            tree[node] = 0;
        else
            tree[node] = (e-b+1)-tree[node];
        return;
    }
    int lft = node*2, rght = lft+1;
    int mid = (b+e)/2;
    update(lft, b, mid, i, j, typ);
    update(rght, mid+1, e, i, j, typ);
    tree[node] = tree[lft]+tree[rght];
    prop[node] = 0;
}
int query(int node, int b, int e){
    if(prop[node])
        propagate(node, b, e);
    if(b == e){
        return b;
    }
    int lft = node*2, rght = lft+1;
    int mid = (b+e)/2;
    if(tree[lft] == (mid-b+1))
        return query(rght, mid+1, e);
    else
        return query(lft, b, mid);
}
int main()
{
    ios_base::sync_with_stdio(false); cout.setf(ios::fixed); cout.precision(100); cout.tie(nullptr); cin.tie(nullptr);
    #ifdef shaft
        freopen("in.txt","r",stdin);
        //freopen("out.txt","w",stdout);
    #endif ///shaft
    int q;
    cin >> q;
    for(int i = 0; i < q; i++){
        cin >> Q[i].typ >> Q[i].l >> Q[i].r;
        mp[Q[i].l];
        mp[Q[i].r];
        mp[Q[i].r+1];
    }
    map<ll,int>::iterator it;
    int n = 1;
    mp[1] = 1;
    rev[1] = 1;
    for(it = mp.begin(); it != mp.end(); it ++){
        ll x = it->ff;
        if(x == 1)
            continue;
        mp[x] = ++n;
        rev[n] = x;
        //debug(x,n);
    }
    build(1, 1, n);
    for(int i = 0; i < q; i+=1){
        ll t = Q[i].typ, l = Q[i].l, r = Q[i].r;
        l = mp[l]; r = mp[r];
       // cout << l <<" "<<r<<" "<<t<<endl;
        update(1, 1, n, l, r, t);
        ll res = query(1, 1, n);
        cout << rev[res] << endl;
    }
    return 0;
}



