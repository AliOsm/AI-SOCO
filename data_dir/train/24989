#include<bits/stdc++.h>
#define st first
#define nd second
#define pb push_back
#define ppb pop_back
#define umax(x,y) x=max(x,y)
#define umin(x,y) x=min(x,y)
#define ll long long
#define ii pair<int,int>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define sz(x) ((int) x.size())
#define orta ((bas+son)>>1)
#define all(x) x.begin(),x.end()
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define pw(x) (1<<(x))
#define inf 1000000000
#define MOD 1000000007
#define M 15000007
#define N 200005
#define MAX 5032117	
#define LOG 100
#define KOK 333
using namespace std;

struct seg {

	ll ws;
	int as;

	inline seg operator+(seg a) {

		return {ws+a.ws,(as+a.as)%MOD};

    }

} S[N*4];

int n,q,x,t,y;
int l[N];

int get2(int node,int bas,int son,int x,int y,int cas) {

	if(bas>y || son<x) return 0;

	if(bas>=x && son<=y) {

		int pos=(cas?x-1:y+1);

		return (S[node].ws%MOD*(l[pos]-pos)%MOD+S[node].as)%MOD;

	}

	return (get2(node*2,bas,orta,x,y,cas)+get2(node*2+1,orta+1,son,x,y,cas))%MOD;

}

ll get1(int node,int bas,int son,int x,int y) {

	if(bas>y || son<x) return 0;

	if(bas>=x && son<=y) return S[node].ws;

	return get1(node*2,bas,orta,x,y)+get1(node*2+1,orta+1,son,x,y);

}

void up(int node,int bas,int son,int x,int val) {

	if(bas>x || son<x) return ;

	if(bas==x && son==x) {

		S[node]={val,1ll*val*(bas-l[bas]+MOD)%MOD};

		return ;

	}

	up(node*2,bas,orta,x,val);
	up(node*2+1,orta+1,son,x,val);

	S[node]=S[node*2]+S[node*2+1];

}

int main() {

	//freopen("input.txt","r",stdin);

	scanf("%d %d",&n,&q);

	for(int i=1;i<=n;i++) {

		scanf("%d",&l[i]);

	}

	for(int i=1;i<=n;i++) {

		scanf("%d",&x);

		up(1,1,n,i,x);

	}

	while(q--) {

		scanf("%d %d",&x,&y);

		if(x>0) {

			int bas=x,son=y;
			ll alle=get1(1,1,n,x,y);

			while(bas<=son) {

				if(get1(1,1,n,x,orta)>=(alle+1)/2) son=orta-1;
				else bas=orta+1;

			}

			printf("%d\n",(get2(1,1,n,x,bas-1,0)-get2(1,1,n,bas+1,y,1)+MOD)%MOD);

		}	
		else {

			x=-x;

			up(1,1,n,x,y);

		}

	}

}