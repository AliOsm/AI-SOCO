#include<iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <stack>
#include<bitset>
#include<list>
#include<cassert>
#include<numeric>
 
using namespace std;
 
const int N = 100 + 5;
const int inf = 1000 * 1000 * 1000;
int dp[N][N * N];
int dp2[N][N * N];
int ps[N];
int psL[N][N];
int psR[N][N];
vector<int> a[N];
 
int n, m;
int main()
{
	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		int tmp;
		cin >> tmp;
		for (int j = 0; j < tmp; j++)
		{
			int t;
			cin >> t;
			a[i].push_back(t);
		}
	}
	ps[0] = a[0].size();
	for (int i = 1; i < n; i++)
	{
		ps[i] = ps[i - 1] + a[i].size();
	}
	for (int i = 0; i < n; i++) // psL
	{
		for (int j = 1; j <= a[i].size(); j++)
		{
			psL[i][j] = psL[i][j - 1] + a[i][j - 1];
		}
	}
	for (int i = 0; i < n; i++) // psR
	{
		reverse(a[i].begin(), a[i].end());
		for (int j = 1; j <= a[i].size(); j++)
		{
			psR[i][j] = psR[i][j - 1] + a[i][j - 1];
		}
		reverse(a[i].begin(), a[i].end());
	}
	for (int i = 0; i < n; i++) // dp2;
	{
		for (int j = 1; j <= a[i].size(); j++)
		{
			for (int k = 0; k <= j; k++)
			{
				dp2[i][j] = max(dp2[i][j], psL[i][k] + psR[i][j - k]);
			}
		}
	}
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < a[i].size(); j++)
		{
			dp[i][j] = -inf;
		}
	}
	for (int i = 0; i <= a[0].size(); i++)
	{
		dp[0][i] = dp2[0][i];
	}
	for (int i = 1; i < n; i++)
	{
		for (int j = 0; j <= ps[i]; j++)
		{
			for (int k = 0; k <= min(int(a[i].size()), j); k++)
			{
				if (dp[i - 1][j - k] == -inf)
				{
					continue;
				}
				dp[i][j] = max(dp2[i][k] + dp[i - 1][j - k], dp[i][j]);
			}
		}
	}
	/*
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j <= a[i].size(); j++)
		{
			cout << dp[i][j] << " ";
		}
		cout << endl;
	}
	*/
	cout << dp[n - 1][m] << endl;
 
 
 
 
 
 
}
 