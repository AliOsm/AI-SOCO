                /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file  
#include <ext/pb_ds/tree_policy.hpp>  
#include <functional> // for less 
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
using namespace __gnu_pbds;
using namespace std;
typedef tree<int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update>  ordered_set;
const ll mod=1e9+7;         
const int N=3e5+4;
int main()
{   
    int n;
    
    scn(n);
    
    vector<tuple<int,int,int>> v;
    
    ordered_set s;
    
    int ans[n];
    
    rep(i,0,n)
    {
        int l,r;
        
        scn(l); scn(r);
        
        v.emplace_back(l,r,i);
    }
    
    sort(v.begin(),v.end());
    
    for(int i=n-1;i>=0;i--)
    {
        int hr=get<1>(v[i]),hi=get<2>(v[i]);
        
        int here=s.order_of_key(hr);
        
        ans[hi]=here;
        
        s.insert(hr);
    }
    
    rep(i,0,n)
    priln(ans[i]);
    return 0;
}