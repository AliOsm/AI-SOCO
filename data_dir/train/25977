#include<bits/stdc++.h>
using namespace std;

const int N = 1e5+7;
vector<long long> v;

int f(long long x) {
    return upper_bound(v.begin(), v.end(), x) - v.begin() - 1;
}

long long solve(long long X, long long mx) {
    long long cb = mx*mx*mx;
    if (mx == 1)    return min(7LL, X);

    int cnt = 0;
    for (int i=0; i*cb <= X ; i++) {
        if (i + f(min(X-i*cb, cb-1)) >= f(X))  cnt = i;
    }
    return cnt*cb + solve(min(X-cnt*cb, cb-1), mx-1);
}

int g(long long X, long long mx) {
    if (mx == 0)    return 0;
    long long cb = mx*mx*mx;
    if (cb > X)     return g(X, mx-1);
    return 1+g(X-cb, mx);
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    long long X;
    cin>>X;

    v.push_back(0);

    long long sum = 0;
    for (int i=1; i<N; i++) {
        long long cb = 1LL*i*i*i;
        long long nxt = 1LL*(i+1)*(i+1)*(i+1);
        while(sum+cb < nxt) {
            sum += cb;
            v.push_back(sum);
        }
    }

    long long a = f(X), b = solve(X, N);
    assert(g(b, N) == a);
    cout<<a<<" "<<b<<endl;
}
