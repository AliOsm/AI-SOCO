//#pragma GCC optimize("Ofast,no-stack-protector")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
//#pragma GCC target("avx,tune=native")
// Anand Jaisingh

#include<bits/stdc++.h>

using namespace std;

typedef complex<double> base;
typedef long double ld;
typedef long long ll;

#define pb push_back

const int maxn=(int)(1e5+5);
const ll mod=(ll)(1e9+7);
int parent[256],g_size[256],a[maxn];
int assigned[256];
bool done[256];

int getParent(int u)
{
    if(u==parent[u])
    {
        return u;
    }
    else
    {
        int val=getParent(parent[u]);parent[u]=val;

        return val;
    }
}

void merge(int u,int v)
{
    parent[v]=u;

    g_size[u]+=g_size[v];

    g_size[v]=0;
}

int main()
{
    ios_base::sync_with_stdio(0);

    int n,k;cin>>n>>k;

    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }

    fill(done,done+256,false);

    for(int i=0;i<256;i++)
    {
        assigned[i]=i;

        parent[i]=i;

        g_size[i]=1;
    }

    for(int i=0;i<n;i++)
    {
        if(done[a[i]])
        {
            continue;
        }

        int last=a[i];

        for(int j=max(0,a[i]-k+1);j<a[i];j++)
        {
            int val1=g_size[getParent(j)],val2=a[i]-j;

            if(val1+val2<=k)
            {
                last=j;

                break;
            }
        }

      //  cout<<a[i]<<" "<<last<<" "<<g_size[getParent(last)]<<endl;

        for(int j=a[i];j>=last;j--)
        {
            int x=getParent(j),y=getParent(last);

            if(x!=y)
            {
                merge(x,y);
            }

            assigned[j]=assigned[last];

            done[j]=true;
        }
    }

    for(int i=0;i<n;i++)
    {
        cout<<assigned[a[i]]<<" ";
    }

    cout<<endl;return 0;
}
