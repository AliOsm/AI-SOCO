#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int A[4][4], B[4][4];
bool vis[4][4];

int whoWins(int a, int b) {
    if(a == b) return 0;
    else if(a == 3 && b == 2) return 1;
    else if(a == 2 && b == 1) return 1;
    else if(a == 1 && b == 3) return 1;
    else return 2;
}

int main() {
    ios_base::sync_with_stdio(false);
    ll k;
    int a, b;
    cin >> k >> a >> b;
    for(int i = 1; i < 4; i++) {
        for(int j = 1; j < 4; j++) {
            cin >> A[i][j];
        }
    }
    for(int i = 1; i < 4; i++) {
        for(int j = 1; j < 4; j++) {
            cin >> B[i][j];
        }
    }
    vector<pair<int, int> > path;
    while(!vis[a][b]) {
        vis[a][b] = true;
        path.push_back({a, b});
        a = A[path[path.size() - 1].first][path[path.size() - 1].second], b = B[path[path.size() - 1].first]
        [path[path.size() - 1].second];
    }
    ll alice = 0, bob = 0;
    if(k <= path.size()) {
        for(int i = 0; i < k; i++) {
            if(whoWins(path[i].first, path[i].second) == 1) alice += 1LL;
            else if(whoWins(path[i].first, path[i].second) == 2) bob += 1LL;
        }
        cout << alice << " " << bob << endl;
        return 0;
    }
    reverse(path.begin(), path.end());
    int cnt = 0;
    int len = path.size() - 1;
    for(int i = len; i >= 0; i--) {
        if(path[i].first == a && path[i].second == b) {
            break;
        }
        cnt++;
        if(whoWins(path[i].first, path[i].second) == 1) alice += 1LL;
        else if(whoWins(path[i].first, path[i].second) == 2) bob += 1LL;
        path.pop_back();
    }
    //cout << cnt << endl;
    //cout << path.size() << endl;
    reverse(path.begin(), path.end());
    k = max(0LL , k - (cnt * 1LL));
    ll mod = k % (ll(path.size()));
    len = int(mod);
    //cout << len << endl;
    for(int i = 0; i < len; i++) {
        if(whoWins(path[i].first, path[i].second) == 1) alice += 1LL;
        else if(whoWins(path[i].first, path[i].second) == 2) bob += 1LL;
    }
    for(int i = 0; i < path.size(); i++) {
        if(whoWins(path[i].first, path[i].second) == 1) alice += 1LL * (k / int(path.size()));
        else if(whoWins(path[i].first, path[i].second) == 2) bob += 1LL * (k / int(path.size()));
    }
    cout << alice << " " << bob << endl;
}
