#include<iostream>
#include<cstdio>
#include<cassert>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<cmath>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<bitset>
#include<algorithm>
#pragma comment(linker, "/STACK:640000000")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define ll long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = 333;
int a[maxn][maxn];
int up[maxn],down[maxn];
int best = (int)2e9;
int U,D,L,R;
int main() {
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    int n,m,t; cin >> n >> m >> t;
    int tp,tu,td; cin >> tp >> tu >> td;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            scanf("%d",&a[i][j]);
        }
    }
    for (int u = 0; u < n - 2; u++) {       
        for (int j = 0; j < m; j++) {
            if (a[u][j] > a[u + 1][j]) {
                up[j] = tu;
                down[j] = td;
            } else if (a[u][j] < a[u + 1][j]) {
                up[j] = td;
                down[j] = tu;
            } else {
                up[j] = tp;
                down[j] = tp;
            }
        }
        for (int d = u + 2; d < n; d++) {
            for (int j = 0; j < m; j++) {
                if (a[d - 1][j] > a[d][j]) {
                    up[j] += tu;
                    down[j] += td;
                } else if (a[d - 1][j] < a[d][j]) {
                    up[j] += td;
                    down[j] += tu;
                } else {
                    up[j] += tp;
                    down[j] += tp;
                }
            }
            set<pii> st;
            int uu = 0;
            int dd = 0;
            st.insert(mp(up[0] - uu - dd,0));
            if (a[u][0] < a[u][1]) {
                uu += tu;
            } else if (a[u][0] > a[u][1]) {
                uu += td;
            } else {
                uu += tp;
            }
            if (a[d][0] < a[d][1]) {
                dd += td;
            } else if (a[d][0] > a[d][1]) {
                dd += tu;
            } else {
                dd += tp;
            }
            for (int j = 2; j < m; j++) {
                int nu,nd;
                if (a[u][j - 1] < a[u][j]) {
                    nu = uu + tu;
                } else if (a[u][j - 1] > a[u][j]) {
                    nu = uu + td;
                } else {
                    nu = uu + tp;
                }
                if (a[d][j - 1] < a[d][j]) {
                    nd = dd + td;
                } else if (a[d][j - 1] > a[d][j]) {
                    nd = dd + tu;
                } else {
                    nd = dd + tp;
                }
                set<pii>::iterator it = st.lower_bound(mp(t - (down[j] + nu + nd),0));
                if (it != st.end() && abs((*it).first + down[j] + nu + nd - t) < best) {
                    best = abs((*it).first + down[j] + nu + nd - t);
                    U = u;
                    D = d;
                    L = (*it).second;
                    R = j;
                }
                if (it != st.begin()) {
                    it--;
                    if (it != st.end() && abs((*it).first + down[j] + nu + nd - t) < best) {
                        best = abs((*it).first + down[j] + nu + nd - t);
                        U = u;
                        D = d;
                        L = (*it).second;
                        R = j;
                    }
                }
                st.insert(mp(up[j - 1] - uu - dd,j - 1));
                uu = nu;
                dd = nd;
            }
        }
    }
    U++;
    L++;
    D++;
    R++;
    cout << U << " " << L << " " << D << " " << R << endl;
    return 0;
}
