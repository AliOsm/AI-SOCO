#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOR(i, a, b) for (int i = a; i < int(b); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>

const int MAX = 100100;

bitset<MAX> bs;
vector<int> primes;
ll sieve_size;
ll p1 = 1000000021, p2 = 1000000009;

ll mpow(ll n, ll p){
    if(p == 0) return 1;
    else{
        ll aux = mpow(n, p/2);
        aux = (aux * aux)%p2;
        if(p%2 == 0) return aux;
        else return (n * aux)%p2;
    }
}

void sieve(ll upperbound){
    sieve_size = upperbound + 1;
    bs.set();
    bs[0] = bs[1] = false;
    for(ll i = 2; i < sieve_size; i++) if(bs[i]){
        for(ll j = i*i; j < sieve_size; j += i) bs[j] = false;
        primes.pb((int)i);
    }
}

int a[MAX];
vector<int> factorization[MAX];
ll fs[MAX];
int n;

void init(){
    REP(i, n){
        ll PF_idx = 0, PF = primes[PF_idx];
        fs[i] = 1;
        if(a[i] < 0){
            a[i] *= -1;
            //factorization[i].pb(-1);
            fs[i] *= -1;
        }
        while(PF * PF <= a[i]){
            int cnt = 0;
            while(a[i]%PF == 0){
                cnt ^= 1;
                a[i] /= PF;
            }
            //if(cnt%2 == 1) factorization[i].pb(PF);
            if(cnt == 1) fs[i] = fs[i] * PF;

            PF = primes[++PF_idx];
        }
        if(a[i] != 1){
            //factorization[i].pb(a[i]);
            fs[i] = fs[i] * a[i];
        }
    }
}

int ans[MAX];
unordered_set<ll> S;
unordered_map<int, int> last;
int cnt[MAX];

int main(){
    sieve(10010);
    scanf("%d", &n);
    REP(i, n) scanf("%d", a + i);
    init();
    /*if(n == 5000){
        printf("DONE\n");
        return 0;
    }*/

    for(int i = 0; i < n; i++){
        if(a[i] != 0){
            if(last.count(fs[i]) == 1) cnt[last[fs[i]]] = 0;
            cnt[i] = 1;
            last[fs[i]] = i; 
        }
        //printf("i = %d, fs = %d\n", i, fs[i]);
        //REP(j, n) printf("%d%c", cnt[j], j == n - 1  ? '\n' : ' ');
        int acc = 0;
        for(int j = i; j >= 0; j--){
            acc += cnt[j];
            ans[acc > 0 ? acc : 1]++;
        }
    }
    for(int i = 1; i <= n; i++) printf("%d%c", ans[i], i == n ? '\n' : ' ');
}