#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <queue>
#include <set>
#include <vector>
#include <algorithm>

using namespace std;

int nextInt() {
    int x = 0, p = 1;
    char c;
    do {
        c = getchar();
    } while (c <= 32);
    if (c == '-') {
        p = -1;
        c = getchar();
    }
    while (c >= '0' && c <= '9') {
        x = x * 10 + c - '0';
        c = getchar();
    }
    return x * p;
}

double nextDouble() {
    double x;
    scanf("%lf", &x);
    return x;
}

void bad() {
    cout << "-1\n";
    exit(0);
}

typedef long long ll;

const ll P = 1000000007LL;

const int maxn = 100500;

vector<int> z_foo(string s) {
    int n = s.length();
    vector<int> z(n);
    z[0] = n;
    int l = 1, r = -1;
    for (int i = 1; i < n; i++) {
        if (i <= r)
            z[i] = min(z[i - l], r - i + 1);
        while (i + z[i] < n && s[z[i]] == s[i + z[i]]) ++z[i];
        if (i + z[i] - 1 > r)
            l = i, r = i + z[i] - 1;
    }
    return z;
}

string s, t;
int n, m;

bool g[maxn];
ll f[maxn], sf0[maxn], sf[maxn], ssf[maxn];

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    ios_base::sync_with_stdio(0);

    cin >> s >> t;

    n = s.length();
    m = t.length();

    vector<int> z = z_foo(t + "#" + s);

    for (int i = 0; i < n; i++)
        if (z[i + m + 1] == m) {
            g[i + m] = true;
        }

    for (int i = 0; i <= n; i++)
        sf0[i] = i + 1;

    int lst = -1;

    for (int i = 1; i <= n; i++) {
        if (g[i]) {
            lst = i;
        }
        sf[i] = sf[i - 1];
        ssf[i] = (ssf[i - 1] + sf[i]) % P;
        if (lst == -1) continue;
        f[i] = ssf[lst - m] + sf0[lst - m];
        sf[i] = (sf[i] + f[i]) % P;
        ssf[i] = (ssf[i] + f[i]) % P;
    }

    cout << sf[n] << "\n";

    return 0;
}
