#define __USE_MINGW_ANSI_STDIO 0
#include <bits/stdc++.h>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
#define ff first
#define ss second
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define int long long
#define all(a) a.begin(), a.end()
#define inf (1LL<<61)
#define print_time cerr << "Time elapsed: " << 1000.0 * clock() / CLOCKS_PER_SEC << "ms\n";
#define ull unsigned long long
#define debug1(x) cerr << #x << ": " << x <<'\n'
#define debug2(x, y) cerr << #x << ": " << x << '\t' << #y << ": " << y <<'\n'
#define debug3(x, y, z) cerr << #x << ": " << x << '\t' << #y << ": " << y << '\t' << #z << ": " << z <<'\n'
using namespace std;
int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
int gcd(int x,int y)
{
    if(y==0)
	return x;
    else
	return gcd(y,x%y);
}
int expo(int n,int m,int p)   //modULAR EXPONENTIATION
{
    int r=1;
    n=n%p;
    while(m>0)
    {
	if(m%2)
	    r=(r*n)%p;
	n=(n*n)%p;
	m=m/2;
    }
    return r%p;
}
bool isPrime(int n)
{
    // Corner cases
    if (n <= 1)  return false;
    if (n <= 3)  return true;
 
    // This is checked so that we can skip 
    // middle five numbers in below loop
    if (n%2 == 0 || n%3 == 0) return false;
 
    for (int i=5; i*i<=n; i=i+6)
	if (n%i == 0 || n%(i+2) == 0)
	   return false;
 
    return true;
}
vector<int> z_function(string s) {
    int n = (int) s.length();
    vector<int> z(n);
    for (int i = 1, l = 0, r = 0; i < n; ++i) {
	if (i <= r)
	    z[i] = min (r - i + 1, z[i - l]);
	while (i + z[i] < n && s[z[i]] == s[i + z[i]])
	    ++z[i];
	if (i + z[i] - 1 > r)
	    l = i, r = i + z[i] - 1;
    }
    return z;
}
vector<int>adj[200000];
bool vis[200000];
bool stat[200000][3];
int par[200000][3];
bool isp[200000];
bool cyc=false;
stack<int>qq;
void dfs(int s)
{
	vis[s]=true;
	isp[s]=true;
	for(int i=0;i<adj[s].size();i++)
	{
		int x=adj[s][i];
		if(!vis[x])
			dfs(x);
		else if(isp[x])
			cyc=true;
	}
	isp[s]=false;
}
bool draw(int s)
{
	memset(vis,false,sizeof(vis));
	memset(isp,false,sizeof(isp));
	dfs(s);
	return cyc;
}
void dfs1(int s,int l)
{
	//debug2(s,l);
	stat[s][l%2]=true;
	qq.push(s);
	if(adj[s].size()==0&&l%2==1)
	{	
		cout<<"Win"<<endl;
		vector<int>path;
		while(qq.size())
		{
			path.pb(qq.top()+1);
			qq.pop();
		}
		reverse(all(path));
		for(auto x : path)
		{
			cout<<x<<' ';
		}
		exit(0);
		return ;
	}
	for(int i=0;i<adj[s].size();i++)
	{
		int x=adj[s][i];
		if(!stat[x][1-l])
		{
			dfs1(x,1-l);
		}
	}
	qq.pop();
}
int32_t main()
{
   IOS;
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin); 
   freopen("output.txt","w",stdout);
   #endif
   /********************* Code starts here ***********************/     
   int n,m;
   cin>>n>>m;
   for(int i=0;i<n;i++)
   {
   	int x;
   	cin>>x;
   	while(x--)
   	{
   		int y;
   		cin>>y;
   		y--;
   		adj[i].pb(y);
   	}
   	//par[i]=i;
   }
   int s;
   cin>>s;
   s--;
   queue<pair<int,int> >q;
   q.push(mp(s,0));
   bool ok=false;
   int fin;
   memset(vis,false,sizeof(vis));
   memset(stat,false,sizeof(stat));
   multiset<int>pa;
   while(q.size())
   {
   	pair<int,int> p = q.front();
   	//debug2(p.ff,p.ss);
   	q.pop();
   	if(stat[p.ff][p.ss])
   		continue;
   	stat[p.ff][p.ss]=true;
   	if(adj[p.ff].size()==0)
   	{
   		if(p.ss==1)
   		{
   			//debug1(n);
   			fin=p.ff;
   			ok=true;
   			break;
   		}
   	}
   	for(int i=0;i<adj[p.ff].size();i++)
   	{
   		int x=adj[p.ff][i];
   		if(!stat[x][1-p.ss])
   		{
   			par[x][1-p.ss]=p.ff;
   			q.push(mp(x,(p.ss+1)%2));
   		}
   	}
   }
   if(ok)
   {
   	
   	memset(stat,false,sizeof(stat));
   	dfs1(s,0);
   }
   if(draw(s))
   {
   	cout<<"Draw"<<endl;
   	return 0;
   }
   cout<<"Lose"<<endl;
}      
