#include <iostream>
#include <list>
#include <cmath>
#include <algorithm>
#include <map>
#include <vector>
#include <cstdio>
#include <queue>

using namespace std;

const long long inf = 1e17;
int n, m;
int x, y;
long long t;
int curr;
int dx, dy;

int get_t(int x, int y){
    if(dx > 0){
        x = n - x;
    }
    if(dy > 0){
        y = m - y;
    }
    return min(x, y);
}

int get_number(int x,int y){
    int curr;
    if(x == 0){curr = y;} else
    if(x == n){curr = m + 1 + y;} else
    if(y == 0) curr = 2 * m + x + 1; else
        curr = 2 * m + n + x;
    return curr;
}

void go(){
    int tt = get_t(x, y);
    x += dx * tt;
    y += dy * tt;
    t += tt;
    curr = get_number(x, y);
    if(x == 0 || x == n) dx *= -1;
    if(y == 0 || y == m) dy *= -1;

}

int _dx[] = {1,1,-1,-1};
int _dy[] = {1,-1,1,-1};
long long d[400500];

int main()
{
    int k;
    scanf("%d%d%d", &n, &m, &k);
    x = 0;
    y = 0;
    dx = dy = 1;
    for(int i = 0; i < 2 * m + 2 * n; i++)
        d[i] = inf;
    curr = 0;
    t = 0;
    while(d[curr] == inf){
        d[curr] = t;
        go();
    }
    while(k--){
        scanf("%d%d", &x, &y);
        long long ans = inf;
        int xx = x;
        int yy = y;
        for(int i = 0; i < 4; i++){
            t = 0;
            x = xx;
            y = yy;
            dx = _dx[i];
            dy = _dy[i];
            go();
            if(d[curr] + t < ans) ans = d[curr] + t;
        }
        if(ans == inf){ans = -1;}
        cout << ans << endl;
    }
    return 0;
}
