// KALAM
# include <bits/stdc++.h>
using namespace std;

const int N = 5000 + 77 , Mod = 1000000007;
int n , dis[N][N] , X[N] , Y[N] , l = - 1 , r = N + N , Pow[N];
vector < int > a[N];
bool M[N] , C[N] , is_bip = 1;
void dfs(int v){
	M[v] = 1;
	for(int u : a[v]){
		if(M[u]){
			if(C[u] == C[v]){
				is_bip = 0;
			}
			continue;
		}
		C[u] = ! C[v];
		dfs(u);
	}
}
bool Check(int t , bool print = 0){
	for(int i = 1;i <= n;i ++){
		for(int j = 1;j <= n;j ++){
			if(dis[i][j] <= t){continue;}
			a[i].push_back(j);
		}
	}
	int comp = 0;
	for(int i = 1;i <= n;i ++){
		if(M[i]){continue;}
		dfs(i);comp ++;
	}
	bool res = is_bip;
	is_bip = 1;
	for(int i = 1;i <= n;i ++){
		M[i] = C[i] = 0;a[i].clear();
	}
	if(print){
		printf("%d\n" , Pow[comp]);
	}
	return res;
}
int main(){
	scanf("%d" , & n);
	Pow[0] = 1;
	for(int i = 1;i <= n;i ++){
		Pow[i] = (Pow[i - 1] << 1) % Mod;
		scanf("%d %d" , & X[i] , & Y[i]);
	}
	for(int i = 1;i <= n;i ++){
		for(int j = 1;j <= n;j ++){
			dis[i][j] = abs(X[i] - X[j]) + abs(Y[i] - Y[j]);
		}
	}
	while(r - l > 1){
		int mid = (l + r) >> 1;
		if(Check(mid)){
			r = mid;
		}
		else{
			l = mid;
		}
	}
	printf("%d\n" , r);
	Check(r , 1);
	return 0;
}	
