#include <iostream>
#include <algorithm>
#include <map>
#include <stack>
#include <vector>
#include <list>
#include <string>
#include <string.h>
using namespace std;
#define X first
#define Y second
#define ll long long
#define pii pair<long long,long long>

int main()
{
	int n, m; cin >> n >> m;
	int e = m;
	map<pair<int, int>, int> fruit;
	map<pair<int, int>, int> crim;
	map<pair<int, int>, int> fruit1;
	map<pair<int, int>, int> crim1;
	for (int i = 0; i < n; i++)
	{
		int a, b, c;
		cin >> a >> b >> c;
		if (a == 0)
		{
			if (fruit.count(make_pair(b, c)) == 0)
			{
				fruit[make_pair(b, c)] = 1;
				fruit1[make_pair(b, c)] =1;
			}
			else
			{
				fruit[make_pair(b, c)]++;
				fruit1[make_pair(b, c)]++;
			}
			
		}
		else
		{
			if (crim.count(make_pair(b, c)) == 0)
			{
				crim[make_pair(b, c)] = 1;
				crim1[make_pair(b, c)] = 1;
			}
			else
			{
				crim[make_pair(b, c)]++;
				crim1[make_pair(b, c)]++;
			}
		}
	}
	bool bol = true;
	int sum = 0,sum1=0;
	while (bol)
	{
		bol = false;
		int help = -1;
		map<pair<int, int>, int>::iterator j;
		for (map<pair<int,int>,int>::iterator i=fruit.begin(); i != fruit.end(); i++)
		{
			if ((*i).first.first <= m )
			{
				if ((*i).first.second>help)
				{
					j = i;
					help = (*i).first.second;
					bol = true;
				}
			}
			else break;
		}
		if (bol)
		{
			sum++;
			m += (*j).first.second;
			if ((*j).second > 1)
				(*j).second--;
			else fruit.erase(j);
		}
		else break;
		bol = false;
		help = -1;
		for (map<pair<int, int>, int>::iterator i = crim.begin(); i != crim.end(); i++)
		{
			if ((*i).first.first <= m )
			{
				if ((*i).first.second>help)
				{
					j = i;
					help = (*i).first.second;
					bol = true;
				}
			}
			else break;
		}
		if (bol)
		{
			sum++;
			m += (*j).first.second;
			if ((*j).second > 1)
				(*j).second--;
			else crim.erase(j);
		}
	}
	
	bol = true;
	m = e;
	while (bol)
	{
		bol = false;
		int help = -1;
		map<pair<int, int>, int>::iterator j;
		for (map<pair<int, int>, int>::iterator i = crim1.begin(); i != crim1.end(); i++)
		{
			if ((*i).first.first <= m )
			{
				if ((*i).first.second>help)
				{
					j = i;
					help = (*i).first.second;
					bol = true;
				}
			}
			else break;
		}
		if (bol)
		{
			sum1++;
			m += (*j).first.second;
			if ((*j).second > 1)
				(*j).second--;
			else crim1.erase(j);
		}
		else break;
		bol = false;
		help = -1;
		for (map<pair<int, int>, int>::iterator i = fruit1.begin(); i != fruit1.end(); i++)
		{
			if ((*i).first.first <= m )
			{
				if ((*i).first.second>help)
				{
					j = i;
					help = (*i).first.second;
					bol = true;
				}
			}
			else break;
		}
		if (bol)
		{
			sum1++;
			m += (*j).first.second;
			if ((*j).second > 1)
				(*j).second--;
			else fruit1.erase(j);
		}
	}
	cout <<max(sum, sum1);
	return 0;
}