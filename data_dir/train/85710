#include <bits/stdc++.h>

using namespace std;
const int MAXN = 100100, MOD = 1e9 + 7;
int n, x[MAXN], dp[MAXN][2];
vector<int> g[MAXN];

int powmod(int b, int e)
{
	if(!e)
		return 1;
	if(e & 1)
		return (1LL * b * powmod(b, e - 1)) % MOD;
	int aux = powmod(b, e >> 1);
	return (1LL * aux * aux) % MOD;
}

void dfs(int v, int p = -1)
{
	for(const int& u : g[v])
		if(u != p)
			dfs(u, v);
	if(x[v])
	{
		dp[v][1] = 1;
		for(const int& u : g[v])
			if(u != p)
				dp[v][1] = (1LL * dp[v][1] * (dp[u][0] + dp[u][1])) % MOD;
		dp[v][0] = 0;
	}
	else
	{
		dp[v][0] = 1;
		for(const int& u : g[v])
			if(u != p)
				dp[v][0] = (1LL * dp[v][0] * (dp[u][0] + dp[u][1])) % MOD;
		int prod = 1;
		for(const int& u : g[v])
			if(u != p)
				prod = (1LL * prod * (dp[u][1] + dp[u][0])) % MOD;
		for(const int& u : g[v])
			if(u != p)
				dp[v][1] = (dp[v][1] + 1LL * (1LL * dp[u][1] * prod) % MOD * powmod(dp[u][1] + dp[u][0], MOD - 2)) % MOD;
	}
}

int main()
{
	scanf("%d", &n);
	for(int i = 1, p; i < n; ++i)
		scanf("%d", &p), g[p].push_back(i), g[i].push_back(p);
	for(int i = 0; i < n; ++i)
		scanf("%d", &x[i]);
	dfs(0);
	printf("%d\n", dp[0][1]);
}