//#include "stdc++.h"
#include <bits/stdc++.h>
#include<iostream>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <ll, int> pli;
typedef pair <db, db> pdd;
typedef vector<int> vi;
#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))
//#define sz(x) (int)(x.size())
#define ff first
#define ss second
#define endl "\n"
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p;}
const ll hell =998244353 ;
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
#define pi 3.141592653589793238462
#define int  long long
const int N=200005;
int z[200001];int f[200001];int bit[N+1];
int getparent(int i)                   // getting parent of i
{
    return i-(i&(-i));
}
int getnext(int i)
{
    return i+(i&(-i));
}
ll getsum(int r)            // calculating sum from 1-r
{
    ll sum=0;
    while(r>0)
    {
        sum=sum+bit[r];
        r=getparent(r);
    }
    return sum;
}
void update(int i,int value)    //   updating index i
{
    while(i<=N)
    {
        bit[i]+=value;
        i=getnext(i);
    }
}
int32_t main()
{
    IOS;
    int n;
    cin>>n;
    int p[n+1];int cnt=0;
    for(int i=1;i<=n;i++)
    {
        cin>>p[i];
        if(p[i]!=-1)
        {
            z[p[i]]=1;
        }
        else
            cnt++;
    }
    int inv=power(cnt,hell-2,hell);
    for(int i=1;i<=n;i++)
    {
        if(!z[i])
        {
            f[i]=1;
        }
    }
    int gr[n+2],sm[n+2],left[n+2],right[n+2],lt,grt,ans1;
    gr[n+1]=0;
    gr[n]=f[n];
    for(int i=n-1;i>=1;i--)
    {
        gr[i]=f[i]+gr[i+1];
    }
    sm[0]=0;
    for(int i=1;i<=n;i++)
    {
        sm[i]=f[i]+sm[i-1];
    }
    int ans=(cnt*(cnt-1))/2;
    ans=(ans%hell*power(2,hell-2,hell))%hell;
    left[0]=0;
    for(int i=1;i<=n;i++)
    {
        if(p[i]==-1)
        {
            left[i]=1+left[i-1];
        }
        else
        {
            left[i]=left[i-1];
        }
    }
    right[n+1]=0;
    for(int i=n;i>=1;i--)
    {
        right[i]=right[i+1];
        if(p[i]==-1)
            right[i]++;
    }
    for(int i=1;i<=n;i++)
    {
        if(p[i]!=-1)
        {
            lt=left[i-1];
            grt=gr[p[i]+1];
            ans1=(lt%hell*grt%hell)%hell;
            ans1=(ans1%hell*inv%hell)%hell;
            ans=(ans%hell+ans1%hell)%hell;
            lt=right[i+1];
            grt=sm[p[i]-1];
            ans1=(lt%hell*grt%hell)%hell;
            ans1=(ans1%hell*inv%hell)%hell;
            ans=(ans%hell+ans1%hell)%hell;
            
        }
    }
    for(int i=n;i>=1;i--)
    {
       if(p[i]!=-1)
       {
        ans=(ans%hell+getsum(p[i]-1)%hell)%hell;
        update(p[i],1);
       }
    }
    cout<<ans<<endl;
    return 0;
}
