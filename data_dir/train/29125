# include <iostream>
# include <cmath>
# include <vector>
# include <algorithm>
# include <string>
# include <set>
# include <map>
# include <bitset>
# include <queue>
# include <iomanip>
# include <string>

# define FILE
using namespace std;

const int N = 2e5 +100;

int mx[4*N], mn[4*N];
int n, a[N], cnt[N];

void build( int tl = 1, int tr = 2*n, int td = 1 ){
    if( tl == tr ){
        mn[td] = a[tl];
        mx[td] = a[tl];
    }else{
        int tm = ( tl + tr ) >> 1;
        build( tl, tm, td+td );
        build( tm+1, tr, td+td+1 );
        mn[td] = min( mn[td+td], mn[td+td+1] );
        mx[td] = max( mx[td+td], mx[td+td+1] );
    }
}
pair < int, int > get( int l, int r, int tl = 1, int tr = 2*n, int td =  1 ){
    if( r < tl || tr < l || l > r || tl > tr ){
        return make_pair( 2e9 ,-2e9 );
    }if( l <= tl && tr <= r ){
        return make_pair( mn[td], mx[td] ) ;
    }else{
        int tm = (tl+tr) >> 1;
        auto g1 = get( l, r, tl, tm, td+td );
        auto g2 = get( l, r, tm+1, tr, td+td+1 );
        return make_pair( min( g1.first, g2.first ), max( g1.second, g2.second ) );
    }
}

int main()
{
    # ifdef FILEs
        freopen( "ANSWER.IN", "r", stdin );
        freopen( "ANSWER.OUT", "w", stdout );
    # endif // FILE

    # ifdef FILEs
        freopen( "input.txt", "r", stdin );
        freopen( "output.txt", "w", stdout );
    # endif // FILE
    ios_base::sync_with_stdio( false );

    cin >> n;
    for( int i = 1; i <= n; i ++ ){
        cin >> a[i];
        a[i+n] = a[i];
    }
    build();
    for( int i = 1; i <= n; i ++ ){
        int l, r;
        l = i, r = 2*n+1;
        while( r - l > 1 ){
            int m = ( l + r ) >> 1;
            auto g = get( i+1, m );
            if( g.first < a[i]/2.0){
                r = m;
            }else{
                l = m;
            }
        }

        if( l == 2*n ){
            cnt[i] = 1e9;
        }else{
            cnt[i] = l - i + 1;
        }
    }
    for( int i = n; i >= 1; i -- ){
        if( i == n ) cnt[i] = min( cnt[i], cnt[1]+1 );
        else{
            cnt[i] = min( cnt[i+1]+1, cnt[i] );
        }
    }
    for( int i = n; i >= 1; i -- ){
        if( i == n ) cnt[i] = min( cnt[i], cnt[1]+1 );
        else{
            cnt[i] = min( cnt[i+1]+1, cnt[i] );
        }
    }
    for( int i = n; i >= 1; i -- ){
        if( i == n ) cnt[i] = min( cnt[i], cnt[1]+1 );
        else{
            cnt[i] = min( cnt[i+1]+1, cnt[i] );
        }
    }
    for( int i = 1; i <= n;  i++ ){
        if( cnt[i] > 1e6 ){
            cout << -1 <<' ' ;
        }else{
            cout << cnt[i] << ' ';
        }
    }
    return 0;
}


