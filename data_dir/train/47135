#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define mp make_pair
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(),x.end()
#define show(x) cout<<(#x)<<" is "<<(x)<<endl

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef pair<ll,ll> pll;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> indexed_set;

const ll INF=1e18+123;
const ld EPS=1e-9;
const int inf=1e9+123;
const int MOD=1e9+7;
const int N=5e5+123;
const int dx[]={0,0,1,-1};
const int dy[]={1,-1,0,0};

vector<int>g[N],q1[N],q2[N];

vector<pii>q3[N];

set<pair<int,bool> >s;

int sz[N],st[N],ft[N],tmr,ver[N];

bool ans[N];

void dfs1(int v=1,int p=0){
    st[v]=++tmr;
    ver[tmr]=v;
    sz[v]=1;
    for(int to : g[v]){
        if(p!=to){
            dfs1(to,v);
            sz[v]+=sz[to];
        }
    }
    ft[v]=tmr;
}

void dfs(int v=1,int p=0,bool kp=1){
    int mx=-1,b=0;
    for(int to : g[v]){
        if(p!=to){
            if(sz[to]>mx){
                mx=sz[to];
                b=to;
            }
        }
    }
    for(int x : q1[v])s.insert({x,1});
    for(int to : g[v]){
        if(p!=to && b!=to){
            dfs(to,v,0);
        }
    }
    if(b){
        dfs(b,v);
    }
    for(int to : g[v]){
        if(p!=to && b!=to){
            for(int t=st[to];t<=ft[to];t++){
                int u=ver[t];
                for(int x : q2[u]){
                    s.insert({x,0});
                }
            }
        }
    }
    for(int x : q2[v]){
        s.insert({x,0});
    }
    for(pii q : q3[v]){
        set< pair<int,bool> > ::iterator it=s.up_b(mp(q.x,0));
        it--;
        ans[q.y]=it->y;
    }
    if(!kp){
        for(int t=st[v];t<=ft[v];t++){
            int u=ver[t];
            for(int x : q2[u]){
                s.erase({x,0});
            }
        }
        for(int x : q2[v]){
            s.erase({x,0});
        }
    }
    for(int x : q1[v])s.erase({x,1});
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n,m,u,v,c;
    cin>>n;
    for(int i=1;i<n;i++){
        cin>>u>>v;
        g[v].push_back(u);
        g[u].push_back(v);
    }
    dfs1();
    cin>>m;
    int q=0;
    for(int i=1;i<=m;i++){
        cin>>c>>v;
        if(c==1){
            q1[v].push_back(i);
        }
        else if(c==2){
            q2[v].push_back(i);
        }
        else{
            q3[v].push_back({i,++q});
        }
    }
    s.insert({0,0});
    dfs();
    for(int i=1;i<=q;i++)cout<<ans[i]<<" ";
    return 0;
}
