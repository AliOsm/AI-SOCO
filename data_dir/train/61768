#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <string>
// DON'T DIVIDE
// Try different approaches
using namespace std;

int n, m;
const int MAXN = 200005;
set<int> adj[MAXN], curr;
vector<int> ans;

int dfs(int x)
{
	curr.erase(x);
	int total = 1;
	for(set<int>::iterator it = curr.begin(); it != curr.end();)
	{
		if(adj[x].count(*it) == 0)
		{
			int i = *it;
			total += dfs(i);
			it = curr.lower_bound(i);
		}
		else
			it++;
	}
	
	return total;
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> n >> m;
	for(int i = 0; i < m; i++)
	{
		int x, y;
		cin >> x >> y;
		adj[x].insert(y);
		adj[y].insert(x);
	}

	for(int i = 1; i <= n; i++)
		curr.insert(i);

	while(!curr.empty())
	{
		int x = *curr.begin();
		ans.push_back(dfs(x));
	}

	sort(ans.begin(), ans.end());
	cout << ans.size() << "\n";
	for(int i = 0; i < ans.size(); i++)
		cout << ans[i] << " ";
	cout << "\n";

	return 0;
}