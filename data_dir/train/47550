#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

vector<int> G[100100];
int a[100100];
int b[100100];
char ans[100100];
int ok = 1;

void dfs(int u, int p){
	if (!ok) return;
	if (ans[u] != -1){
		if (ans[u] != p) ok = 0;
		return;
	}
	ans[u] = p;
	for (int i = 0; i < G[u].size(); i++){
		int nxt = G[u][i];
		dfs(nxt, 1 - p);
	}
}

int main()
{
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
	ios::sync_with_stdio(0);
	cin.tie(0);

	int n, m; cin >> n >> m;
	for (int i = 0; i < m; i++){
		int x, y; cin >> x >> y;
		a[i] = min(x, y);
		b[i] = max(x, y);
	}

	for (int i = 0; i < m; i++){
		for (int j = i + 1; j < m; j++){
			if ((a[j] < a[i] && b[j] > a[i] && b[j] < b[i]) || (a[j] > a[i] && a[j] < b[i] && b[j] > b[i])) G[i].push_back(j), G[j].push_back(i);
		}
	}
	memset(ans, -1, sizeof ans);
	for (int i = 0; i < m; i++){
		if (ans[i] == -1) dfs(i, 0);
	}
	if (!ok) return cout << "Impossible" << endl, 0;
	for (int i = 0; i < m; i++){
		if (ans[i]) cout << "i";
		else cout << "o";
	}
	cout << endl;

	return 0;
}