#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>
#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mod 998244353
#define PI 3.1415926536
#define pll pair<ll, ll>
using namespace std;

template <class A, class B> ostream& operator << (ostream& out, const pair<A, B> &a) {
	return out << "(" << a.first << ", " << a.second << ")";
}

template <class A> ostream& operator << (ostream& out, const vector<A> &v) {
	out << "[";
	for (int i = 0; i < v.size(); i++) {
        if (i) out << ", ";
		out << v[i];
	}
	return out << "]";
}

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
           return false;
        }
    }
    return true;
}

vector<ll> fact(ll n) {
    vector<ll> ans;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            ans.push_back(i);
            while (n % i == 0) {
               n /= i;
            }
        }
    }
    if(n > 1) ans.push_back(n);
    return ans;
}

ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
      if (b&1ll) {
          res *= tp;
      }
      tp *= tp;
      b >>= 1ll;
    }
    return res;
}

ll vec_mult(ll x1, ll y1, ll x2, ll y2, ll x3, ll y3) {
    return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
    cout << "YES" << endl;
    exit(0);
}

void no() {
    cout << "NO" << endl;
    exit(0);
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

const ll N = 300000 + 5, inf = 2e9;
ll dp[10][N];
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    ll n = nxt();
    vector<ll> mas(n);
    for (int i = 0; i < n; i++) {
        mas[i] = nxt();
        dp[1][mas[i]] = 1;
    }

   if (dp[1][1]) return cout << 1, 0;
    for (int i = 2; i <= 7; i++) {
        for (int j = N - 1; j >= 1; j--) {
            ll s1 = 0, s2 = 0, s3 = 0;
            for (int k = 1; k * j < N; k++) {
                s1 += dp[i - 1][k * j];
                s2 += dp[1][k * j];
                s3 += dp[i][k * j];
            }
            dp[i][j] = s1 * s2 - s3; 
        }
        if(i < 3) for (int j = 1; j < N; j++) {
            dp[i][j] = min(1ll, dp[i][j]);
        }
        if (dp[i][1]) return cout << i, 0;
    }
    
    cout << -1;
    return 0;
}
