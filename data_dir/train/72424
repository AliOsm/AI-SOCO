#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define M 300005

struct data
{
    ll dif, b1, b2;

    data() {}
    data(ll dif, ll b1, ll b2): dif(dif), b1(b1), b2(b2) {}
    bool operator<(const data& rhs)
    {
        if(dif != rhs.dif) return dif < rhs.dif;
        if(b1 != rhs.b1) return b1 < rhs.b1;
        return b2 < rhs.b2;
    }

} ara[M];
vector<data>vec;

ll ans[M];

int main()
{
    int n, m;
    scanf("%d %d", &n, &m);

    vec.push_back(data(-210000000000LL, 0, 0));

    for(int i = 1; i <= n; i++)
    {
        scanf("%lld %lld", &ara[i].b1, &ara[i].b2);
        ara[i].dif = ara[i].b1-ara[i].b2;
        vec.push_back(data(ara[i].b1-ara[i].b2, ara[i].b1, ara[i].b2));
    }

    sort(vec.begin(), vec.end());
    for(int i = 1; i < vec.size(); i++) vec[i].b1 += vec[i-1].b1, vec[i].b2 += vec[i-1].b2;

    //for(data dt: vec) printf("%lld %lld %lld\n", dt.dif, dt.b1, dt.b2);

    for(int i = 1; i <= n; i++)
    {
        int idx = lower_bound(vec.begin(), vec.end(), data(ara[i].dif, 0LL, 0LL))-vec.begin();

        //printf("--> %d %d %lld\n", i, idx, ara[i].dif);

        ans[i] += 1LL*(idx-1)*ara[i].b2;
        ans[i] += vec[idx-1].b1;
        ans[i] += 1LL*(n-idx+1)*ara[i].b1;
        ans[i] += vec[n].b2-vec[idx-1].b2;
    }

    //printf("%lld\n", ans[1]);

    for(int i = 1; i <= m; i++)
    {
        int u, v;
        scanf("%d %d", &u, &v);

        ans[u] -= min(ara[u].b1+ara[v].b2, ara[u].b2+ara[v].b1);
        ans[v] -= min(ara[u].b1+ara[v].b2, ara[u].b2+ara[v].b1);
    }

    for(int i = 1; i <= n; i++) ans[i] -= ara[i].b1+ara[i].b2;

    for(int i = 1; i <= n; i++) printf("%lld ", ans[i]);

    return 0;
}
