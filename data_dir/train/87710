#include <bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds;   
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
#define ll long long int
#define ld double
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(a) a.begin(),a.end()
#define sz(a) (ll)(a.size())
map<ll,ll> m;
const ll M=2e5+5;
ll L[M],R[M],seg[12*M],val[3*M];
void build(ll i,ll s,ll e)
{
	if(s==e)
	{
		seg[i]=val[s];
		return;
	}
	ll m=(s+e)/2;
	build(2*i,s,m);
	build(2*i+1,m+1,e);
	seg[i]=min(seg[2*i],seg[2*i+1]);
}
ll query(ll i,ll s,ll e,ll l,ll r)
{
	if(s>r || l>e)
		return 1e9;
	if(s>=l && e<=r)
		return seg[i];
	ll m=(s+e)/2;
	return min(query(2*i,s,m,l,r),query(2*i+1,m+1,e,l,r));
}
int main()
{
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	ll n;
	cin>>n;
	for(ll i=1;i<=n;i++)
	{
		cin>>L[i]>>R[i];
		m[L[i]]=0;
		m[L[i]-1]=0;
		m[R[i]]=0;
	}
	ll i=1;
	for(auto it=m.begin();it!=m.end();it++)
	{
		it->ss=i++;
	}
	for(ll i=1;i<=n;i++)
	{
		L[i]=m[L[i]];
		R[i]=m[R[i]];
	}
	for(ll i=1;i<=n;i++)
	{
		val[L[i]]++;
		val[R[i]+1]--;
	}
	for(ll i=1;i<=3*n;i++)
	{
		val[i]+=val[i-1];
	}
	build(1,1,3*n);
	for(ll i=1;i<=n;i++)
	{
		ll z=query(1,1,3*n,L[i],R[i]);
		if(z>1)
		{
			cout<<i<<"\n";
			return 0;
		}
	}
	cout<<"-1\n";
	return 0;
}