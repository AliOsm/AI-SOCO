#include <iostream>
#include <vector>
#include <cstdio>
#include <memory.h>
#include <algorithm>
#include <set>
#include <map>
#include <cstring>
#include <cstdlib>
#include <stack>
#include <queue>
#include <ctime>
#include <cmath>
#include <iomanip>

using namespace std;

#define MAXN 300500
#define pb push_back
#define mp make_pair
#define x1 sadjnvskj
#define y1 ascnjdskn

typedef long long ll;
typedef long double ld;

struct node {
    int inf;
    node *r, *d;
    node (int inf) : inf(inf) , r(NULL), d(NULL) {};
};

node *root;
node *ma[1010][1010];
int n, m, q;
int a, b, c, d, h, w;

node * getVer(int x, int y) {
    node *v = root;
    for (int i = 1; i < x; i ++)
        v = v -> d;
    for (int i = 1; i < y; i ++)
        v = v -> r;
    return v;
}

void scanMatrix() {
    for (int i = 0; i <= n + 1; i ++)
        ma[i][0] = new node (0),
        ma[i][m + 1] = new node (0);
    for (int i = 1; i <= m; i ++)
        ma[0][i] = new node (0),
        ma[n + 1][i] = new node (0);

    for (int i = 1; i <= n; i ++)
        for (int j = 1; j <= m; j ++) {
            int x;
            scanf ("%d", &x);
            ma[i][j] = new node(x);
        }
    for (int i = 0; i <= n; i ++)
        for (int j = 0; j <= m; j ++)
            ma[i][j] -> d = ma[i + 1][j],
            ma[i][j] -> r = ma[i][j + 1];
}

int main() {
    //freopen ("input.txt", "r", stdin);
    scanf ("%d%d%d", &n, &m, &q);
    scanMatrix();
    root = ma[0][0];
    while ( q -- ) {
        scanf ("%d%d%d%d%d%d", &a, &b, &c, &d, &h, &w);
        node *va = getVer(a, b);
        node *vb = getVer(c, d);

        node *vl = va;
        node *vr = vb;
        for (int i = 1; i <= h; i ++)
            vl = vl -> d, vr = vr -> d,
            swap (vl -> r, vr -> r);
        for (int i = 1; i <= w; i ++)
            vl = vl -> r, vr = vr -> r,
            swap (vl -> d, vr -> d);

        vl = va, vr = vb;
        for (int i = 1; i <= w; i ++)
            vl = vl -> r, vr = vr -> r,
            swap (vl -> d, vr -> d);
        for (int i = 1; i <= h; i ++)
            vl = vl -> d, vr = vr -> d,
            swap (vl -> r, vr -> r);
    }
    node *line = root;
    for (int i = 1; i <= n; i ++) {
        line = line -> d;
        node *v = line;
        for (int j = 1; j <= m; j ++)
            v = v -> r, printf ("%d ", v -> inf);
        printf ("\n");
    }
    return 0;
}
