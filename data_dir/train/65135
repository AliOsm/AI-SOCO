#include <bits/stdc++.h>

using namespace std;

template<class INT> struct Poin {
	INT x, y;
	Poin(INT a = 0, INT b = 0) {
		x = a, y = b;
	}
	Poin operator+(const Poin &P) const {
		return Poin(x + P.x, y + P.y);
	}
	Poin operator-(const Poin &P) const {

		return Poin(x - P.x, y - P.y);
	}
	INT operator*(const Poin &P) const {

		return x * P.x + y * P.y;
	}
	INT operator^(const Poin &P) const {

		return x * P.y - y * P.x;
	}

	INT mag() const {

		return sqrt(x * x + y * y);
	}
	Poin scale(INT H, bool div = false) const {

		return div ? Poin(x / H, y / H) : Poin(x * H, y * H);
	}
	Poin operator*(const INT f)const{
		return Point(x*f, y*f);
	}
	Poin unit() const {

		return scale(mag(), 1);
	}
	Poin rotate(double a)const{
		return Point(x*cos(a)-y*sin(a),x*sin(a)+y*cos(a));
	}
	Poin rotate90(){
		return Point(-y,x);
	}
	bool operator<(const Poin &P) const {

		return x != P.x ? x < P.x : y < P.y;
	}
	bool operator==(const Poin &P) const {
		return x == P.x && y == P.y;
	}
};
typedef Poin<int> Point;

inline bool Collinear(Point A, Point B, Point C) { // O(1)

	return ((A - B) ^ (C - B)) == 0;
}

inline bool between(Point A, Point B, Point C) {// A-B-C	O(1)

	// B lines in the segment AC
	if (A == B || C == B)
		return true;

	return (A - C) * (B - C) > 0 && (C - A) * (B - A) > 0 && Collinear(A, B, C);
}

bool segmentIntersect(Point A, Point B, Point C, Point D) {
	int d1 = (A - C) ^ (D - C);
	int d2 = (B - C) ^ (D - C);
	int d3 = (C - A) ^ (B - A);
	int d4 = (D - A) ^ (B - A); // if( d1 and d2 has different signs && d3 and d4 too)
	if( (d1^d2) < 0 && (d3^d4) < 0 ) return true;
	if (between(C, A, D) || between(C, B, D) || between(A, C, B)
			|| between(A, D, B))
		return true;
	return false;
}
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int n, m; cin >> n >> m;
    if(n != m) {
        cout << "No" << endl;
        return 0;
    }

    vector<Point> a(n);
    vector<Point> b(n);
    for(int i = 0; i < n; i++) cin >> a[i].x >> a[i].y;
    for(int i = 0; i < n; i++) cin >> b[i].x >> b[i].y;

    int arr[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

    bool good = false;
    do {
        bool ok = true;
        for(int i = 0; i < n; i++) {
            for(int j = i+1; j < n; j++) {
                int other_i = arr[i];
                int other_j = arr[j];

                Point A = a[i];
                Point B = a[other_i];
                Point C = b[j];
                Point D = b[other_j];

                if(segmentIntersect(A,B,C,D)) ok = false;
            }
        }
        if(ok) {
            cout << "Yes" << endl;
            good = true;
            break;
        }
    }while(next_permutation(arr, arr+n));
    if(!good) cout << "No" << endl;
    return 0;
}
