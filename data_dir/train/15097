// Give me My Shotgun

#include <bits/stdc++.h>
using namespace std ;

#define int ll

#define all(x) x.begin() , x.end()

#define PB push_back
#define F first
#define S second
#define _sz(x) (int)x.size()

#define debug(x) cerr << #x << " = " << x << endl

typedef long long ll ;
typedef pair<int , int> pii ;

const int MAX_N = 400 * 1000 + 19 ;
const int inf = 2e9 + 19 ;

int n , d , k , deg[MAX_N] , sz[MAX_N] ;
vector<int> ff[MAX_N] , vec ;
vector<pii> ans ;

int32_t main() {
        ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0) ;
        cin >> n >> d >> k ;
        int f = ((d + 1) / 2) + 1 ;
        if (d & 1) {
                if (n < 2 * f - 2)
                        return cout << "NO" , 0 ;
        }
        else {
                if (n < 2 * f - 1)
                        return cout << "NO" , 0 ;
        }
        if (d == 1 && n > 2)
                return cout << "NO" , 0 ;
        int tmp = 1 ;
        ff[0].PB(0) ;
        sz[0] = 1 , sz[1] = k ;
        for (int i = 2 ; i < f ; i ++)
                sz[i] = min((k - 1) * sz[i - 1] , inf) ;
        while (tmp < n) {
                for (int i = 1 ; i < f ; i ++) {
                        if (_sz(ff[i]) == sz[i])
                                continue ;
                        ff[i].PB(tmp) ;
                        tmp ++ ;
                        if (tmp == n)
                                break ;
                }
                if (tmp == n)
                        break ;
                int cnt = 0 ;
                for (int i = 1 ; i < f ; i ++)
                        if (_sz(ff[i]) == sz[i])
                                cnt ++ ;
                //debug(cnt) ;
                if (cnt == f - 1)
                        return cout << "NO" , 0 ;
        }
        //debug(f) ;
        /*for (int i = 0 ; i < f ; i ++) {
                for (int j : ff[i])
                        cout << j << ' ' ;
                cout << endl ;
        }*/
        bool flag = true ;
        if (d & 1) {
                if (_sz(ff[f - 1]) > k - 1) {
                        while (_sz(ff[f - 1]) > k - 1)
                                vec.PB(ff[f - 1].back()) , ff[f - 1].pop_back() ;
                        for (int i = 0 ; i < f ; i ++) {
                                while (_sz(ff[i]) < sz[i] && _sz(vec)) {
                                        ff[i].PB(vec.back()) ;
                                        vec.pop_back() ;
                                }
                        }
                }
                for (int i = 0 ; i < f - 2 ; i ++) {
                        int x = 0 , y = 0 ;
                        while (y < _sz(ff[i + 1])) {
                                ans.PB({ff[i][x] + 1 , ff[i + 1][y] + 1}) ;
                                deg[ff[i][x]] ++ , deg[ff[i + 1][y]] ++ ;
                                if (deg[ff[i][x]] > k || deg[ff[i + 1][y]] > k) {
                                        flag = false ;
                                        return cout << "NO" , 0 ;
                                }
                                x ++ , y ++ ;
                                if (x == _sz(ff[i]))
                                        x = 0 ;
                        }
                }
                int t = ff[f - 2][0] ;
                int ind = 0 ;
                for (int i = 0 ; i < _sz(ff[f - 1]) ; i ++) {
                        ans.PB({t + 1 , ff[f - 1][i] + 1}) ;
                        deg[t] ++ , deg[ff[f - 1][i]] ++ ;
                        if (deg[t] >= k && ind + k < _sz(ff[f - 2]))
                                t = ff[f - 2][ind + k] , ind += k ;
                        if (deg[t] > k || deg[ff[f - 1][i]] > k) {
                                flag = false ;
                                return cout << "NO" , 0 ;
                        }
                }
        }
        else {
                for (int i = 0 ; i < f - 1 ; i ++) {
                        int x = 0 , y = 0 ;
                        while (y < _sz(ff[i + 1])) {
                                ans.PB({ff[i][x] + 1 , ff[i + 1][y] + 1}) ;
                                deg[ff[i][x]] ++ , deg[ff[i + 1][y]] ++ ;
                                if (deg[ff[i][x]] > k || deg[ff[i + 1][y]] > k) {
                                        flag = false ;
                                        return cout << "NO" , 0 ;
                                }
                                x ++ , y ++ ;
                                if (x == _sz(ff[i]))
                                        x = 0 ;
                        }
                }
        }
        /*for (auto i : ans)
                cout << i.F << ' ' << i.S << endl ;
        for (int i = 0 ; i < n ; i ++)
                cout << deg[i] << ' ' ;
        cout << endl ;
        for (int i = 0 ; i < f ; i ++) {
                for (int j = 0 ; j < _sz(ff[i]) ; j ++)
                        cout << ff[i][j] + 1 << ' ' ;
                cout << endl ;
        }
        debug(f) ;*/
        if (!flag)
                return cout << "NO" , 0 ;
        else {
                cout << "YES" << endl ;
                for (auto i : ans)
                        cout << i.F << ' ' << i.S << endl ;
        }
        /*debug(f) ;
        for (int i = 0 ; i < 200 ; i ++)
                cout << sz[i] << endl ;*/
        return (0) ;
}
