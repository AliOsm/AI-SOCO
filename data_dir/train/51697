#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d%d", &a, &b)
#define sc3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define scs(a) scanf("%s", a)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define db(x) cerr << #x << " == " << x << endl
#define dbs(x) cerr << x << endl
#define imprime(x, Y)                               \
   for (int X = 0; X < Y; X++) cerr << x[X] << " "; \
   cerr << endl;
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vector<ii> > vvii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9 + 7;
const int N=1e3+10;
ll dp[N];
vi alf;
int n;
string s;
ll solve(int b){
    if(b==n) return 1;
    if(dp[b]!=-1) return dp[b];
    ll ret=0;
    int last=INF;
    for(int i=b;i<n;i++){
        last=min(alf[s[i]],last);
        if(last< (i-b+1) ) break;
        ret=(ret+solve(i+1))%MOD;
    }
    return dp[b]=ret;
}
ll solve2(int b){
    if(b==n) return 0;
    if(dp[b]!=-1) return dp[b];
    ll ret=INF;
    int last=INF;
    for(int i=b;i<n;i++){
        last=min(alf[s[i]],last);
        if(last< (i-b+1) ) break;
        ret=min(ret,solve2(i+1)+1);
    }
    return dp[b]=ret;
}
bool ispossible(int i, int j){
    int tam=j-i+1;
    for(int x=i;x<=j;x++){
        if(alf[s[x]]<tam) return false;
    }
    return true;
}
int main()
{
   memset(dp,-1,sizeof(dp));
   cin>>n;
   cin>>s;
   for(int i=0;i<n;i++) s[i]-='a';
   alf.resize(26);
   for(int i=0;i<26;i++) cin>>alf[i];
   cout<<solve(0)<<endl;
   int tam=0;
   for(int i=0;i<n;i++){
       for(int j=i;j<n;j++){
           if(ispossible(i,j)){
               tam=max(tam,j-i+1);
           }
       }
   }
   cout<<tam<<endl;
   memset(dp,-1,sizeof(dp));
   cout<<solve2(0)<<endl;
   return 0;
}
