#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <stack>
#include <cstring>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <ctime>

using namespace std;

const int N = 2010;

int a[N][N];
long long sum1[3 * N], sum2[3 * N];
int n;
pair <int, int > pos1, pos2;
long long cost1, cost2;


int main()
{
    scanf("%d", &n);
    memset(a, 0, sizeof(a));
    for (int i = 1; i <= n; ++i)
    {
        for (int j = 1; j <= n; ++j)
            scanf("%d", &a[i][j]);
    }
    for (int i = 1; i <= n; ++i)
    {
        for (int j = 1; j <= n; ++j)
        {
            sum1[i + j] += a[i][j];
            sum2[i - j + n] += a[i][j];
        }
    }
    cost1 = cost2 = 0;
    for (int i = 1; i <= n; ++i)
    {
        for (int j = 1; j <= n; ++j)
        {
            if ((i % 2 == 1 && j % 2 == 1) || (i % 2 == 0 && j % 2 == 0))
            {
                if (cost1 <= sum1[i + j] + sum2[i - j + n] - a[i][j])
                {
                    cost1 = sum1[i + j] + sum2[i - j + n] - a[i][j];
                    pos1.first = i;
                    pos1.second = j;
                }
            }
            else
            {
                if (cost2 <= sum1[i + j] + sum2[i - j + n] - a[i][j])
                {
                    cost2 = sum1[i + j] + sum2[i - j + n] - a[i][j];
                    pos2.first = i;
                    pos2.second = j;
                }
            }
        }
    }
    printf("%I64d\n", cost1 + cost2);
    printf("%d %d %d %d", pos1.first, pos1.second, pos2.first, pos2.second);

        
            

    return 0;
}
