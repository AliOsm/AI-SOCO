// KALAM
# include <bits/stdc++.h>

using namespace std;

const int N = 500000 + 77;
int n , m , k , need , d[N] , ch[N] , P[N];
bool M[N];
vector < int > a[N] , b[N];
bool CMP(int x , int y){
   return d[x] > d[y];
}
void dfs(int v = 1){
   M[v] = 1;
   for(int u : a[v]){
      if(M[u]){
         if(d[u] < d[v] - 1)
            b[v].push_back(u);
         continue ;
      }
      d[u] = d[v] + 1;
      P[u] = v;
      ++ ch[v];
      dfs(u);
   }
   sort(b[v].begin() , b[v].end() , CMP);
}
inline void Path(int x , int y){
   int p = x;
   printf("%d\n" , d[x] - d[y] + 1);
   while(p != P[y])
      printf("%d " , p) , p = P[p];
   printf("\n");
}
inline void Path(int x , int y , int z){
   printf("%d\n" , d[y] - d[z] + 2);
   printf("%d " , x);
   int p = y;
   while(p != P[z])
      printf("%d " , p) , p = P[p];
   printf("\n");
}
int main(){
   scanf("%d %d %d" , & n , & m , & k);
   need = (n + k - 1) / k;
   for(int u , v , i = 1;i <= m;++ i){
      scanf("%d %d" , & v , & u);
      a[v].push_back(u);
      a[u].push_back(v);
   }
   dfs(1);
   for(int i = 1;i <= n;++ i)
      if(d[i] == need - 1){
         printf("PATH\n%d\n" , need);
         int p = i;
         while(p)
            printf("%d " , p) , p = P[p];
         return 0;
      }
   printf("CYCLES\n");
   for(int i = 1;i <= n;++ i)
      if(ch[i] == 0){
         int f = b[i][0] , s = b[i][1];
         if(d[f] % 3 != (d[i] + 1) % 3)
            Path(i , f);
         else if(d[s] % 3 != (d[i] + 1) % 3)
            Path(i , s);
         else
            Path(i , f , s);
         if(-- k == 0)
            return 0;
      }
	return 0;
}
