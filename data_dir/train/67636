#include <bits/stdc++.h>
#define um unordered_map
#define us unordered_set
#define f first
#define s second
#define pb push_back
#define MOD 998244353
#define eps 1e-9
#define INF 1000000002

using namespace std;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<int, pii> piii;
const int N = 303;

int n;
vector<int> adjList[N];
set<int> sub[N], lfs;
vector<int> order;

void dfs(int node, int parent) {
    sub[node].insert(node);
    for(int ch : adjList[node]) {
        if(ch == parent)
            continue;
        dfs(ch, node);
        sub[node].insert(sub[ch].begin(), sub[ch].end());
    }
}

vector<int> ans;

void build(int node, int parent) {
    if(node == order.back())
        order.pop_back();
    ans.pb(node);
    while(order.size()) {
        bool found = false;
        for(int ch : adjList[node]) {
            if(ch == parent)
                continue;
            if(order.size() && (sub[ch].find(order.back()) != sub[ch].end())) {
                build(ch, node);
                ans.pb(node);
                found = true;
            }
        }
        if(!found)
            break;
    }
}

int main() {
    scanf("%d",&n);
    for(int i =1;i<n;i++) {
        int x,y;
        scanf("%d%d",&x,&y);
        adjList[x].pb(y);
        adjList[y].pb(x);
    }
    int root = 1;
    int leaves = adjList[1].size() == 1?-1:0;
    for(int i = 1;i<=n;i++)
        if(adjList[i].size() == 1)
            leaves++;
    dfs(1, 1);
    int x;
    for(int i =0;i<leaves;i++)
        scanf("%d",&x), order.pb(x), lfs.insert(x);
    reverse(order.begin(), order.end());
    build(1, 1);
    if(ans.size() != 2*n-1)
        printf("-1");
    else
        for(int i : ans)
            printf("%d ", i);
    return 0;
}
