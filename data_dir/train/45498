#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>	
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound          	
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcount                                                                                        
#define sqr(x) ((x) * (x))
#define al 0x3F3F3F3F
#define sz(x) x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;                                  
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;
                                       
const double pi = acos(-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};   																																					
const int dy[] = {0, 1, 0, -1, 0};  

int n, q, ans[N], mx, l[N], r[N], used[N], pos, z;
set <int> s;

inline void boost () {
	ios_base :: sync_with_stdio (NULL);
	cin.tie (NULL), cout.tie (NULL);
}

inline void Solve () {  
	boost (); 
	cin >> n >> q;
	for (int i = 1; i <= n; i ++) {
		cin >> ans[i];
		mx = max (mx, ans[i]);
		if (!ans[i]) {
			z ++;
			pos = i;
			if (i == 1) ans[i] = 1;
			else ans[i] = ans[i - 1];
		}
	}
	if (mx < q) {
		if (!z) cout << "NO", exit (0);
		else ans[pos] = q;
	}
	for (int i = 1; i <= n; i ++) {
		if (used[ans[i]] == 0) {
			used[ans[i]] = 1;
			l[i] = ans[i];
		}
	}
	for (int i = n; i >= 1; i --) {
		if (used[ans[i]] == 1) {
			used[ans[i]] = 2;
			r[i] = ans[i];
		}
	}
	s.in (0);
	for (int i = 1; i <= n; i ++) {
		if (*s.rbegin () > ans[i]) cout << "NO", exit (0);
		if (l[i]) s.in (l[i]);
		if (r[i]) s.erase (r[i]);
	}
	cout << "YES\n";
	for (int i = 1; i <= n; i ++) cout << ans[i] << ' ';
}                                          
                  
main () {                                       
//	freopen ("ormax.in", "r", stdin);    
//	freopen ("ormax.out", "w", stdout); 	          
	int tt = 1;
//	cin >> tt;   
	while (tt --) {
		Solve ();
	}        
	return 0;      
}                                                  