#include <bits/stdc++.h>
namespace myland{
	using namespace std;
	namespace _abbr{
		#define fi first
		#define se second
		#define pb push_back
		#define each for_each
		#define _1s __builtin_popcountll
		using ui = unsigned int;
		using ll = long long;
		using ull = unsigned ll;
		using ld = long double;
		using pii = pair<int,int>;
		using pll = pair<ll,ll>;
		using vl = vector<ll>;
		using vpll = vector<pll>;
		using vvl = vector<vector<ll>>;
		using vvpll = vector<vector<pll>>;
		const double EPS = 1e-8;
		const double PI = acos(-1.0);
		const int INF = 0x3f3f3f3f;
		const ll INFL = 0x3f3f3f3f3f3f3f3fll;
		const int MOD = 1e9+7;
	}using namespace _abbr;
	namespace _solve{
		#define MAIN int main
		#define XORstar int main
		#define FAST_IO ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
		#define GG exit(0)
		#define rep(x,a,b) for(int x=a;x<=b;x++)
		#define per(x,a,b) for(int x=b;x>=a;x--)
		#define times(x) for(int cas=1,tms=(x);cas<=tms;cas++)
		#define CaseT int T;cin >> T;times(T)
		#define TCase int T;scanf("%d",&T);times(T)
		#define continue(_) if(_) continue;
		#define break(_) if(_) break;
		#define bug cerr << "!!!" << endl;
		#define bugc(_) cerr << (#_) << " = " << (_) << endl;	
	}using namespace _solve;
	namespace _calculate{
		bool odd(ll x){return x&1;}
		bool even(ll x){return (x&1)^1;}
		bool posi(ll x){return x>0;}
		bool nega(ll x){return x<0;}
		bool zero(ll x){return x==0;}
		bool prime(ll x){if(x<2) return 0;
			for(int i=2;i*i<=x;i++) if(x%i==0) return 0;
			return 1;}
		ll upd(ll a, ll b){return a%b?a/b+1:a/b;};
		ll random(ll a, ll b){return a+rand()*rand()%(b-a+1);};
		template<class T>T sqr(T x){return x*x;}
	}using namespace _calculate;
	namespace _trans{
		ll ctol(char c){return c-48;}
		char ltoc(ll x){return char(x+'0');}
		ll stol(const string& s){ll x=0;
			for(char c:s)x=x*10+c-48;return x;}
		string ltos(ll x){string s = "";
			while(x) s=char(x%10+48)+s,x/=10;
			return s;}
	}using namespace _trans;
	namespace _simple_algo{
		#define rg(a,x,y) (a+x), (a+y+1)
		#define vrg(a,x,y) (a.begin()+x),(a.begin()+y+1)
		#define all(x) (x).begin(),(x).end()
		#define rall(x) (x).rbegin(),(x).rend()
		#define clr(a,b) memset(a,b,sizeof(a))
		#define _sum(a) accumulate(a, 0ll)
		#define sz(a) (ll(a.size()))
		template<class T, class Function>
		T bis(T _l, T _r, int _tms, Function check){
			times(_tms){T _m = (_l+_r)/2;check(_m)?_l=_m:_r=_m;}
			return _l;}
		bool pal(const string& s){int l = s.size();
			for(int i=0,j=l-1;i<j;i++,j--)
			if(s[i]!=s[j]) return 0;return 1;}
	}using namespace _simple_algo;
	namespace _io{
		ll rd(){
			ll x=0,f=1;char ch=getchar();
			while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}
			while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}
			return x*f;}
		void rd(ll& t){t=rd();}
	}using namespace _io;
}using namespace myland;
const int N = 2e5+10;

ll n;
vl a(N), d(N, INF);
queue<pll>q;

XORstar(){
	rd(n);
	rep(i,1,n) rd(a[i]);
	d[1] = 0;
	q.push({1,0});
	while(q.size()){
		pll p = q.front(); q.pop();
		d[p.fi] = p.se;
		if(d[p.fi-1]==INF){
			d[p.fi-1] = p.se+1;
			q.push({p.fi-1,p.se+1});
		}
		if(d[a[p.fi]]==INF){
			d[a[p.fi]] = p.se+1;
			q.push({a[p.fi],p.se+1});
		}
		if(d[p.fi+1]==INF){
			d[p.fi+1] = p.se+1;
			q.push({p.fi+1,p.se+1});
		}
	}
	rep(i,1,n) cout << d[i] << ' ';
}
