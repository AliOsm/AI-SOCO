#include<bits/stdc++.h>

#define _USE_MATH_DEFINES
#define ll long long
#define ins Not Needed Thing
#define ull unsigned long long
#define ld long double
#define Accepted 0
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define mp make_pair
#define sz(x) (int)(x.size())
#define all(x) x.begin(),x.end()
#define F first
#define S second
#define emp What is it
#define SORRY FUL Accepted 
#define dimash the top one
#define I wish 
#define you be a little more calm
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0)

using namespace std;

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 5e3 + 123;                                          
const int NN = 5e5 + 123;
const int PRI = 555557;
const int pri = 997;

int tests = 1;
int n, m, k, cnt;
ll dp[(1 << 19)];
string a;
string s;
ll p[19];
ll b;

inline void Solve () {
	// easy
//	freopen ("915C.out", "w", stdout);
	cin >> a >> s;

	
	sort(a.begin(), a.end());
	for (int i = 0; i < s.size(); i ++) {
		b *= 10;
		b += s[i] - '0';
		p[i] = b;
	}

	for (int i = 0; i < a.size(); i ++) {
		ll now = a[i] - '0';
		for (int k = 0; k < n; k ++) if(k != i) now = now * 10 + a[k] - '0';
		if(now <= b)			
			dp[(1 << i)] = a[i] - '0';
	}

	n = a.size();
	for (int mask = 0; mask < (1 << n); mask ++) {
		int bbp = __builtin_popcount(mask);
		for (int j = 0; j < n; j ++) {
				ll cur = dp[mask] * 10 + a[j] - '0';
				ll now = cur;
				for (int k = 0; k < n; k ++) if(!(mask & (1 << k)) && k != j) now = now * 10 + a[k] - '0';
//					cout << mask << ' ' << now << '\n';
				if (!(mask & (1 << j)) && now <= b) {
					dp[(mask | (1 << j))] = max(dp[(mask | (1 << j))], cur);
				}
		}
	}

	cout << dp[(1 << n) - 1] << '\n';
}

int main () {
	SpeedForce;
//	freopen(".in", "r", stdin);
//	freopen(".out", "w", stdout);	
//	cin >> tests;
	while(tests --) {
		Solve ();
		// Ee Zadrot
	}	
}