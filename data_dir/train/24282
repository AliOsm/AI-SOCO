#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 7;
const int SQRT = 320 + 7;

deque<int> dq[SQRT];
int ex[SQRT][N];
int tmp[SQRT], tmp2[SQRT];
int n, q;

void shift(int l, int r)
{
	int cnt = 0;
	int v = 0;	
	for (int s = 0; s < n; s += SQRT)
	{
		int e = min(s + SQRT, n);
		if (l >= e || r <= s)
		{
			v++;
			continue;
		}
		if (l <= s && e <= r)
		{
			tmp[cnt++] = dq[v].back();
			ex[v][dq[v].back()]--;
			dq[v].pop_back();
		}
		else
		{
			int c = 0;
			for (int i=s; i<min(r, e); i++)
			{
				tmp2[c++] = dq[v].front();
				dq[v].pop_front();
			}
			ex[v][tmp2[--c]]--;
			tmp[cnt++] = tmp2[c];
			for (int i=c-1; i>=0; i--)
				dq[v].push_front(tmp2[i]);
		}
		v++;
	}
	rotate(tmp, tmp+cnt-1, tmp+cnt);
	cnt = 0;
	v = 0;
	for (int s = 0; s < n; s += SQRT)
	{
		int e = min(s + SQRT, n);
		if (l >= e || r <= s)
		{
			v++;
			continue;
		}
		if (l <= s && e <= r)
		{
			dq[v].push_front(tmp[cnt]);
			ex[v][tmp[cnt++]]++;
		}
		else
		{
			int c = 0;
			for (int i=s; i<max(l, s); i++)
			{
				tmp2[c++] = dq[v].front();
				dq[v].pop_front();
			}
			ex[v][tmp[cnt]]++;
			dq[v].push_front(tmp[cnt++]);
			for (int i=c-1; i>=0; i--)
				dq[v].push_front(tmp2[i]);
		}
		v++;
	}
}

int get(int l, int r, int k)
{
	int res = 0;
	int v = 0;
	for (int s=0; s<n; s+= SQRT)
	{
		int e = min(s + SQRT, n);
		if (l >= e || r <= s)
		{
			v++;
			continue;
		}
		if (l <= s && e <= r)
			res += ex[v][k];
		else for (int i=max(l, s); i<min(r, e); i++)
			if (dq[v][i-s] == k)
				res++;
		v++;
	}
	return res;
}

int main()
{
	ios::sync_with_stdio(false);
	cin >> n;
	for (int i=0; i<n; i++)
	{
		int t;
		cin >> t;
		dq[i / SQRT].push_back(t);
		ex[i / SQRT][t]++;
	}
	cin >> q;
	int ans = 0;
	while (q--)
	{
		int t, l, r;
		cin >> t >> l >> r;
		l = ((l + ans - 1) % n + n) % n + 1;
		r = ((r + ans - 1) % n + n) % n + 1;	
		if (l > r)
			swap(l, r);
		if (t == 1)
			shift(l-1, r);
		else
		{
			int k;
			cin >> k;
			k = ((k + ans - 1) % n + n) % n + 1;
			ans = get(l-1, r, k);
			cout << ans << "\n";
		}
	}


	return 0;
}
