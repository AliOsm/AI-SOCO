//Be Name Khoda
//no comment ...
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)2e5 + 7;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
int subtree[MAXN], dist[MAXN], dist2[MAXN], bad[MAXN];
vector<int> G[MAXN], H[MAXN];
void dfs(int u, int par)
{
	if(bad[u])
		subtree[u] = 1;
	else
		subtree[u] = 0;
	
	for (auto v : G[u])
		if(v != par)
		{
			dfs(v, u);
			subtree[u] += subtree[v];
		}
}
void dfs2(int u, int par)
{
	for (auto v : G[u])
		if(v != par && subtree[v])
		{
			H[u].push_back(v);
			H[v].push_back(u);
			dfs2(v, u);
		}
}
void dfs_diam(int u, int par)
{
	for (auto v : H[u])
		if(v != par)
		{
			dist[v] = dist[u] + 1;
			dfs_diam(v, u);
		}
}
void dfs_diam2(int u, int par)
{
	for (auto v : H[u])
		if(v != par)
		{
			dist2[v] = dist2[u] + 1;
			dfs_diam2(v, u);
		}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n, k;
	cin >> n >> k;
	for (int i = 0; i < n - 1; i++)
	{
		int u, v;
		cin >> u >> v;
		G[u].push_back(v);
		G[v].push_back(u);
	}
	//let's make a new tree :)
	int root;
	for (int i = 0; i < k; i++)
	{
		int u;
		cin >> u;
		root = u;
		bad[u] = 1;
	}
	if(k == 1)
		return cout << root << "\n0", 0;
	dfs(root, -1);
	dfs2(root, -1);
	dfs_diam(root, -1);
	int mx = 0, ans = 0;
	for (int i = 1; i <= n; i++)
		if(dist[i] > mx)
			mx = dist[i], ans = i;
	int all = 0;
	for (int i = 1; i <= n; i++)
	{
		all += H[i].size();
	}
	memset(dist, 0, sizeof dist);
	dfs_diam(ans, -1);
	mx = 0;
	int ans2 = 0;
	for (int i = 1; i <= n; i++)
		if(dist[i] > mx)
			mx = dist[i], ans2 = i;
	
	dfs_diam2(ans2, -1);
	int cnt = 0;
	mx = 0;
	for (int i = 1; i <= n; i++)
		if(max(dist[i], dist2[i]) > mx)
			mx = max(dist[i], dist2[i]), cnt = i;
	cout << cnt << "\n" << all - mx;
}
