#include <bits/stdc++.h>

//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define IN freopen("input.txt","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2

//using namespace __gnu_pbds;
using namespace std ;

typedef pair<int, int> pi ;
//typedef tree< pi, null_type, less<pi>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const i64 mod = 1000000007LL ;

#define maxn 200005

/*
     *os.find_by_order(k) -> returns the k'th smallest element (indexing starts from 0)
      os.order_of_key(v)  -> returns how many elements are strictly smaller than v
*/
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

i64 d[maxn] ;
char s[maxn] ;

stack <int> walk , swim ;

int main()
{
    int n ;
    scanf("%d",&n) ;

    for(int i=1 ; i<=n ; i++) scanf("%lld",&d[i]) ;

    scanf("%s",s+1) ;

    bool isWater = 0 ;

    i64 sw = 0 , w = 0 ;

    i64 ans = 0LL ;

    for(int i=1 ; i<=n ; i++)
    {
        if( s[i]=='G' ) walk.push(i) ;
        if( s[i]=='W' )
        {
            swim.push(i) ;
            isWater = 1 ;
        }

        if( s[i]=='L' )
        {
            while( swim.size() != 0 && d[i]!=0 )
            {
                int idx = swim.top() ;
                swim.pop() ;
                i64 l = min( d[idx] , d[i] ) ;
                d[i] -= l ; d[idx] -= l ;
                ans += l*(3+1) ;
                if( d[idx] != 0 ) swim.push(idx) ;
            }

            while( walk.size() != 0 && d[i]!=0 )
            {
                int idx = walk.top() ;
                walk.pop() ;
                i64 l = min( d[idx] , d[i] ) ;
                d[i] -= l ; d[idx] -= l ;
                ans += l*(5+1) ;
                if( d[idx] != 0 ) walk.push(idx) ;
            }


            if( d[i] !=0 )
            {
                if( isWater ) ans += d[i]*(3+1) ;
                else ans += d[i]*(5+1) ;
                d[i] = 0 ;
            }
        }
    }

    for(int i=1 ; i<=n ; i++ )
    {
        if( s[i]=='L' ) continue ;

        if( s[i]=='W' ) sw += d[i] ;
        if( s[i]=='G' )
        {
            i64 mn = min(d[i] , sw ) ;
            ans += mn*((3+1)) ;
            d[i] -= mn ; sw -= mn ;
            if(d[i]!=0) ans += d[i]*((5+1)/2) ;
        }
    }

    ans += ((3+1)/2)*sw ;

    printf("%lld\n",ans) ;

    return 0 ;
}
