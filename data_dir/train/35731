#include <bits/stdc++.h>
using namespace std;

#define loop(i,n) for(int i = 0;i < int(n);i++)
#define rloop(i,n) for(int i = int(n);i >= 0;i--)
#define range(i,a,b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1,v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1,v2,v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1,v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1,v2,v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3)

typedef vector<int> vi;
typedef vector<pair<int, int> > vii;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 5005;
const int INF = 1e9;
int dp[N][N][2];
int h[N];
int n;

int solve(int idx , int k , int flag){
    if(k <= 0)return 0;
    if(idx >= n+1)return INF;
    int &ret = dp[idx][k][flag];
    if(~ret)return ret;
    ret = INF;
    if(flag){
        ret = min(ret ,solve(idx+1 , k , 0));
        ret = min(ret , solve(idx+1+(h[idx] > min(h[idx-2]-1 , h[idx-1]) && h[idx] > h[idx+1]) , k - (h[idx] > min(h[idx-2]-1 , h[idx-1]) && h[idx] > h[idx+1]) , 0));
        int bfr = min(h[idx-2]-1 , h[idx-1]);
        int cb = bfr >= h[idx] ? bfr-h[idx]+1 : 0;
        int aft = h[idx+1];
        int ca = aft >= h[idx] ? aft-h[idx]+1 : 0;
        ret = min(ret , solve(idx+2,k-1,1) + ca + cb);
    }else{
        ret = min(ret ,solve(idx+1 , k , 0));
        ret = min(ret , solve(idx+1+(h[idx] > h[idx-1] && h[idx] > h[idx+1]) , k - (h[idx] > h[idx-1] && h[idx] > h[idx+1]) , 0));
        int bfr = h[idx-1];
        int cb = bfr >= h[idx] ? bfr-h[idx]+1 : 0;
        int aft = h[idx+1];
        int ca = aft >= h[idx] ? aft-h[idx]+1 : 0;
        ret = min(ret , solve(idx+2,k-1,1) + ca + cb);
    }
    return ret;
}

int main() {

#ifndef ONLINE_JUDGE
	//freopen("in.in", "r", stdin);
	//freopen("out.in", "w", stdout);
	//ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#endif

    sfi1(n);
    h[0] = -INF;
    h[n+1] = -INF;
    range(i,1,n)sfi1(h[i]);
    memset(dp,-1,sizeof dp);
    int K = (n+1)/2;
    range(i,1,K){
        printf("%d ",solve(1,i,0));
    }



	return 0;
}
