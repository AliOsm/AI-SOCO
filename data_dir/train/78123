#include <bits/stdc++.h>
#define endl '\n'

using namespace std;
const int MAXN = (1 << 20);

struct node
{
	int mx;

	node() {mx = -1e9;}
	node(int val)
	{
		mx = val;
	}
};

node temp, broken;

node merge(node l, node r)
{
	temp.mx = max(l.mx, r.mx);
	return temp;
}

struct segment_tree
{
    multiset<int> st[4 * MAXN];
	node tr[4 * MAXN];

	void init(int l, int r, int idx)
	{
		if(l == r)
		{
			tr[idx] = node();
			return;
		}

		int mid = (l + r) >> 1;
		init(l, mid, 2 * idx + 1);
		init(mid + 1, r, 2 * idx + 2);

		tr[idx] = merge(tr[2 * idx + 1], tr[2 * idx + 2]);
	}

	void erase(int pos, int val, int l, int r, int idx)
	{
		if(l > pos || r < pos)
			return;

		if(l == r && l == pos)
		{
            st[idx].erase(st[idx].find(val));
			if(st[idx].empty()) tr[idx].mx = -1e9;
			else tr[idx].mx = *prev(st[idx].end());
			return;
		}

		int mid = (l + r) >> 1;
		erase(pos, val, l, mid, 2 * idx + 1);
		erase(pos, val, mid + 1, r, 2 * idx + 2);

		tr[idx] = merge(tr[2 * idx + 1], tr[2 * idx + 2]);
	}


	void update(int pos, int val, int l, int r, int idx)
	{
		if(l > pos || r < pos)
			return;

		if(l == r && l == pos)
		{
            st[idx].insert(val);
			if(st[idx].empty()) tr[idx].mx = -1e9;
			else tr[idx].mx = *prev(st[idx].end());
			return;
		}

		int mid = (l + r) >> 1;
		update(pos, val, l, mid, 2 * idx + 1);
		update(pos, val, mid + 1, r, 2 * idx + 2);

		tr[idx] = merge(tr[2 * idx + 1], tr[2 * idx + 2]);
	}

	node query(int qL, int qR, int l, int r, int idx)
	{
		if(l > qR || r < qL)
			return broken;

		if(qL <= l && r <= qR)
			return tr[idx];

		int mid = (l + r) >> 1;
		return merge(query(qL, qR, l, mid, 2 * idx + 1), query(qL, qR, mid + 1, r, 2 * idx + 2));
	}
};

int n, A, B;
int a[MAXN], c[MAXN];
char type[MAXN];
bool t[MAXN];

void read()
{
    cin >> n >> A >> B;
    for(int i = 0; i < n; i++)
    {
        cin >> a[i] >> c[i] >> type[i];
        if(type[i] == 'C') t[i] = 0;
        else t[i] = 1;
    }
}

segment_tree t1, t2;

void solve()
{
    t1.init(0, (int)2e5, 0);
    for(int i = 0; i < n; i++)
        if(t[i]) t1.update(c[i], a[i], 0, (int)2e5, 0);

    t2.init(0, (int)2e5, 0);
    for(int i = 0; i < n; i++)
        if(!t[i]) t2.update(c[i], a[i], 0, (int)2e5, 0);

    int ans = 0;
    for(int i = 0; i < n; i++)
    {
        if(t[i]) t1.erase(c[i], a[i], 0, (int)2e5, 0);
        else t2.erase(c[i], a[i], 0, (int)2e5, 0);

        if(t[i])
        {
            B -= c[i];
            if(A >= 0 && B >= 0) ans = max(ans, a[i] + t2.query(0, A, 0, (int)2e5, 0).mx);
            if(A >= 0 && B >= 0) ans = max(ans, a[i] + t1.query(0, B, 0, (int)2e5, 0).mx);
            B += c[i];
        }
        else
        {
            A -= c[i];
            if(A >= 0 && B >= 0) ans = max(ans, a[i] + t2.query(0, A, 0, (int)2e5, 0).mx);
            if(A >= 0 && B >= 0) ans = max(ans, a[i] + t1.query(0, B, 0, (int)2e5, 0).mx);
            A += c[i];
        }

        if(t[i]) t1.update(c[i], a[i], 0, (int)2e5, 0);
        else t2.update(c[i], a[i], 0, (int)2e5, 0);
    }

    cout << ans << endl;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}
