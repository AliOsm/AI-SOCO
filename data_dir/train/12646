//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
#define mem(a,v) memset((a), (v), sizeof (a))
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pil pair<int, long long>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vil vector<pil>
#define vll vector<pll>
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> oset;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e6 + 5;
const double eps = 1e-9;
int vis[MAXN], ans[MAXN];
pii a[MAXN];
char s[MAXN];

ll cross(pll x, pll y, pll z) {
	return (y.fi - x.fi) * (z.se - x.se) - (y.se - x.se) * (z.fi - x.fi);
}

int main() {
	int n, st = 1;
	ni(n);
	for (int i = 1; i <= n; i++) {
		scanf("%d %d", &a[i].fi, &a[i].se);
		if (a[i].se < a[st].se)
			st = i;
		else if (a[i].se == a[st].se && a[i].fi < a[st].se)
			st = i;
	}
	scanf("%s", s+2);
	ans[1] = st;
	vis[st] = 1;
	for (int q = 2; q < n; q++) {
		int nx = -1;
		for (int j = 1; j <= n; j++) {
			if (vis[j])
				continue;
			if (s[q] == 'L' && (nx == -1 || cross(a[st], a[nx], a[j]) < 0))
				nx = j;
			else if (s[q] == 'R' && (nx == -1 || cross(a[st], a[nx], a[j]) > 0))
				nx = j;
		}
		if (nx == -1)
			return !printf("-1\n");
		vis[nx] = 1;
		ans[q] = nx;
		st = nx;
	}
	for (int i = 1; i <= n; i++)
		if (!vis[i])
			ans[n] = i;
	for (int i = 1; i <= n; i++)
		printf("%d ", ans[i]); 
	enl;
    return 0;
}
