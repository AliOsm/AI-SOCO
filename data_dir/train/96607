#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define Accepted 0
#define ins insert
#define pb push_back
#define pii pair<int,int>
#define mp make_pair
#define sz(x) (int)(x.size())
#define all(x) x.begin(),x.end()
#define F first
#define S second
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0)

using namespace std;

const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const ll mod = 1e9 + 7;
const ll INF = 1e18 + 9;
const int mxn = 1e6 + 9;
const int N = 2e3 + 123;
const int NN = 2e5 + 123;
const int PR = 555557;

int n, k, x, a[mxn];
int cnt[N], new_cnt[N], pref[N];
int MX = (int)2e3;

int main() {
	SpeedForce;

	cin >> n >> k >> x;
	for(int i = 1; i <= n; i ++) {
		cin >> a[i];
		cnt[a[i]] ++;
	}

	pref[0] = cnt[0];
	for(int i = 1; i <= MX; i ++)
		pref[i] = pref[i - 1] + cnt[i];		
	for(int it = 1; it <= k; it ++) {
		
		for(int num = 0; num <= MX; num ++)
			new_cnt[num] = cnt[num];
		
		for(int num = 0; num <= MX; num ++) {
			if(!cnt[num]) continue;

			if((pref[num] - cnt[num] + 1) % 2 == 1) {
				new_cnt[num] -= (cnt[num] >> 1) + (cnt[num] & 1);				
				new_cnt[(num ^ x)] += (cnt[num] >> 1) + (cnt[num] & 1); 
			} else {
				new_cnt[num] -= (cnt[num] >> 1);
				new_cnt[(num ^ x)] += (cnt[num] >> 1);
			}
		}

		cnt[0] = new_cnt[0];
		pref[0] = cnt[0];
		for(int num = 1; num <= MX; num ++) {
			cnt[num] = new_cnt[num];
			pref[num] = pref[num - 1] + cnt[num];
		}
	}
	for(int i = MX; i >= 0; i --)
		if(cnt[i]) {
			cout << i << " ";
			break;
		}
	for(int i = 0; i <= MX; i ++) {
		if(cnt[i]) {
			cout << i;
			break;
		}
	}
	return 0;
}