#include <bits/stdc++.h>
using namespace std;

const int N = 1e5+7, INF = 1e9+7;
vector<int> a[N];

int n;
multiset<int> stt;

int f(int tar)
{
    multiset<int> st = stt;
    int v = a[0].size();
    int cost = 0;

    for (int i=1; i<N; i++)
        for (int j = tar-1; j < a[i].size(); j++)
        {
            int cc = a[i][j];
            cost += cc;
            st.erase(st.find(cc));
            v++;
        }

    //cout<<"---->"<<tar<<" "<<cost<<endl;

    for (auto it = st.begin(); it!=st.end() && v < tar; it++, v++)
        cost += *it;

    if ( v < tar)   return INF;
    return cost;
}
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin>>n;

    for (int i=0; i<n; i++)
    {
        int id, c;
        cin>>id>>c;
        a[id].push_back(c);
        if (id != 0) stt.insert(c);
    }

    for (int i=1; i<N; i++)
        sort(a[i].rbegin(), a[i].rend());

    int ans = INF;

    int lo = 0, hi = n+1;

  //  for (int i=1; i<=n; i++)
    //    cout<<i<<" "<<f(i)<<endl;

    while (hi - lo > 2)
    {
        int m1 = lo + (hi - lo)/3;
        int m2 = hi - (hi - lo)/3;

        int c1 = f(m1);
        int c2 = f(m2);

        if (c1 < c2)    hi = m2;
        else            lo = m1;

    }
    cout<<f(lo+1)<<endl;
}

