// METADATA
#include <iostream>
#include <string>
using namespace std;

#define ll long long
#define ull unsigned long long



// GLOBAL VARIABLES
string s;
int l;

string current;



// FUNCTIONS
// dp( i, rem3, empty_number ) : maximum of numbers that are divisible by 3 we can extract
// from substring s[i .. l-1] and remainder of the current number we are building
// is rem3 and current number is empty/not empty

bool learnt[200004][3][2];
int answer[200004][3][2];

int dp( int i, int rem3, bool empty_number ) {

   // base case
   if (i >= l) {
      if (rem3 == 0 && !empty_number)  // last number is divisible by 3
         return 1;   
      else
         return 0;
   }

   if (learnt[i][rem3][empty_number])
      return answer[i][rem3][empty_number];

   // transition
   // stop building current number
   int res1;
   
   if (s[i] == '0') {
      // force to take single digit '0'
      res1 = dp( i+1, 0, true ) + 1;
      if (rem3 == 0 && !empty_number)      // we don't want to count an empty number
         res1++;
   }
   else {
      res1 = dp( i+1, (s[i] - '0') % 3, false );  // start new remainder with a digit s[i]
      if (rem3 == 0 && !empty_number)      // we don't want to count an empty number
         res1++;
   }
   

   // continue current number
   int res2 = dp( i+1, ( rem3 + (s[i] - '0') ) % 3, false ); // add digit s[i] to the current number
   
   int res = max(res1, res2);

   learnt[i][rem3][empty_number] = true;
   answer[i][rem3][empty_number] = res;

   return res;
}



int main() 
{
    // INPUT
    cin >> s;
    l = s.length();

    // PROCESS
    int res = dp(0, 0, true);


    // OUTPUT
    //
    cout << res << endl;


    return 0;
}