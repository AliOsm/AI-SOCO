#include<iostream>
#include<cstdio>

#include<string>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<stack>

#include<iomanip>
#include<algorithm>
#include<cstring>
#include<ctime>
#include<cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define correct(x, y, n, m) (0 <= x && x < n && 0 <= y && y < m)
#define X first
#define Y second
#define all(a) a.firts, a.second()
#define pb push_back
#define mp make_pair
#define sz(v) int((v).size())

template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }

typedef long long li;
typedef unsigned long long uli;
typedef long double ld;
typedef pair<int, int> pt;

const int N = 5009;
const int MOD = 1e9 + 7;
const int INF = 1e9;
const li INF64 = 1e18;
const ld PI = 3.1415926535897932384626433832795;

string s;
bool u[N];
bool mex[N];
int grundy[N];

int calc_grundy(int len){
    if(len <= 0)
        return 0;

    int &res = grundy[len];
    if(res != -1)
        return res;

    memset(mex, false, sizeof mex);
    forn(i, len){
        int xor = calc_grundy(i - 1) ^ calc_grundy(len - i - 2);
        if(xor < N)
            mex[xor] = true;
    }

    forn(i, N)
        if(!mex[i]){
            memset(mex, false, sizeof mex);
            return res = i;
        }
}

bool read(){
    if(!(cin >> s))
        return false;
    return true;
}

void solve(){
    for(int i = 1; i < sz(s) - 1; ++i)
        if(s[i - 1] == s[i + 1])
            u[i] = true;

    vector <int> lens;
    int cnt = 0;
    forn(i, N){
        if(u[i])
            ++cnt;
        else{
            if(cnt)
                lens.pb(cnt);
            cnt = 0;
        }
    }

    memset(grundy, 255, sizeof grundy);
    calc_grundy(N-1);
    int res = 0;
    forn(i, sz(lens))
        res ^= calc_grundy(lens[i]);

    if(res == 0)
        puts("Second"); 
    else{
        puts("First");
        int cnt = 0;
        forn(i, sz(lens)){
            res ^= calc_grundy(lens[i]);

            forn(j, lens[i]){
                res ^= calc_grundy(j - 1) ^ calc_grundy(lens[i] - j - 2);
                ++cnt;
                if(res == 0)
                    forn(k, N){
                        cnt -= u[k];
                        if(cnt == 0){
                            cout << k + 1;
                            return;
                        }
                }
                res ^= calc_grundy(j - 1) ^ calc_grundy(lens[i] - j - 2);
            }           
            res ^= calc_grundy(lens[i]);
        }       
    }
}

int main(){
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    srand(time(NULL));
    cout << setprecision(10) << fixed;

    while(read())
        solve();

    return 0;
}