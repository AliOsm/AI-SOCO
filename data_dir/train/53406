#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
const int N = 1e6 + 100, inF = 1000 * 1000 * 1000 + 1;

int n, m, u[N], v[N], w[N], par[N];
vector<int> vec;

void reset() {
	iota(par, par + N, 0);
}

int g_par(int v) {
	return (v == par[v]? par[v]: par[v] = g_par(par[v]));
}

void merge(int u, int v) {
	par[g_par(u)] = g_par(v);
}

bool ok() {
	sort(vec.begin(), vec.end(), [](int a, int b) {
		return pii(w[a], a) < pii(w[b], b);
	});
	ll mst = 0;
	reset();
	for (int e: vec)
		if(g_par(u[e]) != g_par(v[e])) {
			mst += w[e];
			merge(u[e], v[e]);
		}
	reset();
	merge(u[0], v[0]);
	mst -= w[0];
	for (int e: vec)
		if(e && g_par(u[e]) != g_par(v[e])) {
			mst -= w[e];
			merge(u[e], v[e]);
		}
	return mst == 0;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		cin >> u[i] >> v[i] >> w[i];
		u[i]--, v[i]--;
		vec.push_back(i);
	}
	int l = 0, r = inF;
	while(r - l > 1) {
		w[0] = (l + r) >> 1;
		if(ok())
			l = w[0];
		else
			r = w[0];
	}
	cout << l;
	return 0;
}
