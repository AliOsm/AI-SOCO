#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Edge {
public:
    int to, color, number;

    Edge(int to, int color, int number) {
        this->to = to;
        this->color = color;
        this->number = number;
    }
};

int n, k;
vector<int> ar;
vector<vector<Edge> > arr;
int answer;
bool used[200000];
int result[200000];


void dfs(int v, int color) {
    int cur_color = 1;
    used[v] = true;

    for (Edge& edge : arr[v]) {
        if (used[edge.to])
            continue;

        if (cur_color == color)
            ++cur_color;

        edge.color = (cur_color > answer) ? answer : cur_color++;
        dfs(edge.to, edge.color);
    }
}

int main() {
    cin >> n >> k;
    arr.resize(n);
    ar.resize(n);

    for (int i = 0; i < n - 1; ++i) {
        int a, b;
        cin >> a >> b;
        --a;
        --b;

        ++ar[a];
        ++ar[b];
        arr[a].emplace_back(b, -1, i);
        arr[b].emplace_back(a, -1, i);
    }

    sort(ar.begin(), ar.end(), [](int f, int s) { return s < f; });
    answer = ar[k];
    cout << answer << "\n";

    dfs(0, -1);
    for (int i = 0; i < arr.size(); ++i) {
        for (int j = 0; j < arr[i].size(); ++j) {
            if (arr[i][j].color != -1)
                result[arr[i][j].number] = arr[i][j].color;
        }
    }

    for (int i = 0; i < n - 1; ++i) {
        cout << result[i] << " ";
    }
}