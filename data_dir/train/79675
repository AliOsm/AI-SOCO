/* winners never quit and quitters never win.
      #swap                                 */
      
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
using namespace std;
using namespace __gnu_pbds;
#pragma GCC optimize ("-O3")
using ll = long long;
using ld = long double;
const ll mod = 1000000007;
const ll inf = 1000000000000000000;
const ll rk = 256;
const ld PI = 3.141592653589793;

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

#define pb push_back
#define mp make_pair
#define vc vector
#define fs first
#define sec second
#define pq priority_queue
#define lb lower_bound
#define ub upper_bound
#define pll pair<ll,ll> 
#define pls pair<ll,string>
#define psl pair<string,ll>
#define plc pair<ll,char>
#define pcl pair<char,ll>
#define pss pair<string,string>
#define all(x) (x).begin(), (x).end()
#define tol(s) transform(s.begin(),s.end(),s.begin(),::tolower);
#define tou(s) transform(s.begin(),s.end(),s.begin(),::toupper);
#define printclock cerr<<"Time : "<<1000*(ld)clock()/(ld)CLOCKS_PER_SEC<<"ms\n";

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }

void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cerr << *it << " = " << a << endl;
	err(++it, args...);
}

#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define T ll t=0;cin>>t;for(ll test=0;test<t;test++)

ll nxt() {
    ll TemporaryVariable;
    cin >> TemporaryVariable;
    return TemporaryVariable;
}

struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};

 
int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
	//isprime();
	//coeff();
	/*freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);*/
    map<string,ll> m;
    m["1110111"]=0;
    m["0010010"]=1;
    m["1011101"]=2;
    m["1011011"]=3;
    m["0111010"]=4;
    m["1101011"]=5;
    m["1101111"]=6;
    m["1010010"]=7;
    m["1111111"]=8;
    m["1111011"]=9;
		//cout<<"Case #"<<test+1<<": ";
		ll n=nxt(),k=nxt();
        
        vc<string> v(n);
        rep(a,0,n)
            cin>>v[a];
        reverse(all(v));
        ll dp[n][k+1];
        ll last[n][k+1];
        rep(a,0,n)
            rep(b,0,k+1)
                dp[a][b]=-1,last[a][b]=-1;
        rep(a,0,n)
        {
            vc<ll> v1;
            rep(b,0,7)
            {
                if(v[a][b]=='0')
                    v1.pb(b);
            }
            vc<pll> v2;

            ll p=(ll)v1.size();
            for(ll b=0;b<(1LL<<p);b++)
            {
                string s=v[a];
                
                ll cnt=0;
                for(ll c=0;c<p;c++)
                {
                    if((b&(1LL<<c))>0)
                    {
                        cnt++;
                        s[v1[c]]='1';
                    }
                }

                if(cnt>k)
                    continue;
                if(m.count(s))
                {
                    v2.pb({cnt,m[s]});
                }
            }
            sort(all(v2));
            if(a==0)
            {
                for(auto y:v2)
                {
                    dp[a][y.fs]=max(dp[a][y.fs],y.sec);
                }
                continue;
            }
            for(ll b=0;b<=k;b++)
            {
                ll tt=-1,pos=-1,num=-1;
                for(auto y:v2)
                {
                    if(y.fs>b or dp[a-1][b-y.fs]==-1)
                        continue;
                    
                    if(num<y.sec)
                    {
                        pos=b-y.fs;
                        num=y.sec;
                    }
                }
                if(pos!=-1)
                {
                    dp[a][b]=num;
                    last[a][b]=pos;
                }
            }
        }
        if(dp[n-1][k]==-1)
        {
            cout<<-1<<endl;
        }
        else
        {
            ll p=n-1,q=k;
            string ans="";
            while(p>=0)
            {
                ans+=(char)(dp[p][q]+'0');
                q=last[p][q];
                p--;
            }
            cout<<ans<<endl;
        }
        
	printclock;
	return 0;
}