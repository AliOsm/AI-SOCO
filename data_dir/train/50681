#include<bits/stdc++.h>
#define all(v) (v).begin(),(v).end()
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ri(x) scanf("%d",&(x))
#define ri2(x,y) scanf("%d %d",&(x),&(y))
#define ri3(x,y,z) scanf("%d %d %d",&(x),&(y),&(z))
#define rll(x) scanf("%lld",&(x))
#define rll2(x,y) scanf("%lld %lld",&(x),&(y))
#define rll3(x,y,z) scanf("%lld %lld %lld",&(x),&(y),&(z))
#define gc(x) ((x) = getchar())
using namespace::std;

const long double PI = acos(-1);
const long long MOD = 1000000000 +7;

typedef long long ll;
typedef pair<ll,ll> pll;
typedef pair<ll,pll> tll;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef vector<ll> vll;
typedef vector<pll> vpll;
typedef vector<tll> vtll;
typedef vector<string> vs;
typedef set<int> si;
typedef set<ii> sii;
typedef set<iii> siii;

ll gcd(ll a, ll b){ return b==0?a:gcd(b,a%b);}

ll add(ll a, ll b, ll m = MOD){ return (a%m + b%m+2*m)%m;}

ll mul(ll a, ll b, ll m = MOD){ return ((a%m+m)*(b%m+m))%m;}

ll pow_mod(ll a, ll b, ll m = MOD){
	ll res = 1LL;
	a = a%m;
	while(b){
		if(b&1) res = mul(res,a,m);
		b >>= 1;
		a = mul(a,a,m);
	}
	return res;
}

ll fastexp(ll a, ll b){
	ll res = 1LL;
	while(b){
		if(b&1) res = res*a;
		b >>= 1;
		a *= a;
	}
	return res;
}

int gcdExtendido(int a, int b, int *x, int *y){
	if(a == 0){
		*x = 0;
		*y = 1;
		return b;
	}
	int x1, y1;
	int gcd = gcdExtendido(b%a,a,&x1,&y1);
	
	*x = y1-(b/a)*x1;
	*y = x1;
	return gcd;
}

int modInverso(int a, int m){
	int x, y;
	int g = gcdExtendido(a,m,&x,&y);
	if(g!=1) return -1;
	else return (x%m + m)%m;
}

/****************************************
*************P*L*A*N*T*I*L*L*A************
*****************************************/

const int N = 200+5;

int n;
int ans;
vi G[N];
bitset<N> used[N][N];

int getDiameter(int s, bitset<N> &act2, bitset<N> &act){
	int D[N];
	D[s] = 0;
	queue<int> Q;
	Q.push(s);
	int most_distant = s;
	bitset<N> act3;
	act3.set(s,1);
	while(!Q.empty()){
		int u = Q.front(); Q.pop();
		if(D[u] > D[most_distant]) most_distant = u;
		for(int i=0; i<G[u].size(); i++){
			int v = G[u][i];
			if(!act3[v] and !act[v]){
				D[v] = D[u]+1;
				Q.push(v);
				act3.set(v,1);
			}
		}
	}
	Q.push(most_distant);
	D[most_distant] = 0;
	act2.set(most_distant,1);
	while(!Q.empty()){
		int u = Q.front(); Q.pop();
		if(D[u] > D[most_distant]) most_distant = u;
		for(int i=0; i<G[u].size(); i++){
			int v = G[u][i];
			if(!act2[v] and !act[v]){
				act2.set(v,1);
				D[v] = D[u]+1;
				Q.push(v);
			}
		}
	}
	return D[most_distant];
}

int tryThis(bitset<N> act){
	bitset<N> act2;
	int ans = 0;
	for(int i=1; i<=n; i++){
		if(act2[i] or act[i]) continue;
		int a = getDiameter(i,act2,act);
		ans = max(ans,a);
	}
	return ans;
}

void DFS(int source, int u, int p = 0){
	if(p){
		used[source][u] = used[source][p];
		used[source][u].set(u,1);
	}
	for(int i=0; i<G[u].size(); i++){
		int v = G[u][i];
		if(v != p){
			DFS(source,v,u);
		}
	}
}

int main(){
	ri(n);
	int a,b;
	for(int i=1; i<n; i++){
		ri2(a,b);
		G[a].pb(b);
		G[b].pb(a);
	}
	bitset<N> act;
	for(int i=1; i<=n; i++){
		used[i][i].set(i,1);
		DFS(i,i);
	}
	for(int i=1; i<=n; i++){
		for(int j=i+1; j<=n; j++){
			if(used[i][j].count() > 1 and used[i][j].count() < n-1){
				int cand = (used[i][j].count()-1) * tryThis(used[i][j]);
				if(ans < cand) ans = cand;
			}
		}
	}
	printf("%d\n",ans);
	return 0;
}
