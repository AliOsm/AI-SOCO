#include <bits/stdc++.h>
using namespace std;

const int N = 5e5 + 100, inF = N;

int n, c, ans, a[N], ps[N];
vector<int> vec[N];

int solve(int num) {
	if(vec[num].empty())
		return 0;
	int mini = 1 - ps[vec[num][0]], res = 1;
	for (int i = 1; i < vec[num].size(); i++) {
		int now = vec[num][i], last = vec[num][i - 1];
		res = max(res, i + 1 - ps[now] - (mini - 1));
		//cerr << now + 1 << " -> " << i + 1 << ' ' << ps[now] << ' ' << mini << " res = " << i + 1 - ps[now] - mini + 1 << '\n';
		mini = min(mini, i + 1 - ps[now]);
	}
	//cerr << num << " -> " << res << '\n';
	return res;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> c;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
		ans += (a[i] == c);
		vec[a[i]].push_back(i);
		ps[i] = (i? ps[i - 1]: 0) + (a[i] == c);
	}
	int help = ans;
	for (int i = 0; i < N; i++)
		if(i != c)
			ans = max(ans, help + solve(i));
	cout << ans;
	return 0;
}
