//#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
           
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
           
using namespace std;
using namespace __gnu_pbds;
           
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
           
using matrix = vector<vector<ll>>;
template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
           
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
//#define int long long;
           
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("kek.in", "r", stdin);
    //freopen("kek.out", "w", stdout);
    #endif
}

const ll mod = 998244353;
const int MAXN = 5005;
ll cf[MAXN][MAXN], sum[MAXN], need[MAXN];

ll binpow(ll a, ll n) {
    ll res = 1;
    while (n) {
        if (n & 1) {
            res = (res * a) % mod;
        }
        a = (a * a) % mod;
        n >>= 1;
    }
    return res;
}

signed main() {
    FAST_IO(); 
    ll n, m;
    int k;
    cin >> n >> m >> k;
    ll mn = binpow(binpow(m, n), mod - 2);
    ll cur = (n * mn) % mod;
    for (int i = 1; i <= k; ++i) {
        ll c = (n - i < 0 ? 0 : binpow(m, n - i));
        sum[i] = (cur * c) % mod;
        cur = (cur * (n - i)) % mod;
    }
    cf[1][1] = 1;
    for (int i = 2; i <= k; ++i) {
        for (int j = 1; j < MAXN; ++j) {
            cf[i][j] = cf[i - 1][j - 1];
        }
        for (int j = 0; j < MAXN; ++j) {
            cf[i][j] = (cf[i][j] + cf[i - 1][j] * -(i - 1) + mod * mod) % mod;
        }
    }
    ll ans = 0;
    need[k] = 1;
    for (int i = k; i >= 1; --i) {
        ans = (ans + sum[i] * need[i]) % mod;
        ll c = need[i];
        for (int j = 0; j < MAXN; ++j) {
            need[j] = (need[j] - c * cf[i][j] + mod * mod) % mod;
        }
    }
    cout << ans << '\n';
} 