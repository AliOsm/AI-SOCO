#include<bits/stdc++.h>
using namespace std;

# define C continue;
# define R return

# define D double
# define I insert
# define ll long long
# define ld long double

# define ull unsigned long long
# define ui unsigned int

# define pb push_back
# define pf push_front

# define vi vector < int >
# define vc vector < char >
# define vs vector < string >
# define vb vector < bool >
# define vd vector < D >
# define vll vector < ll >
# define vull vector < ull >
# define vld vector < ld >
# define PQ priority_queue

# define vvi vector < vector < int > >
# define vvb vector < vector < bool > >
# define vvc vector < vector < char > >
# define vvs vector < vs >
# define vvll vector < vector < ll > >
# define vvd vector < vector < D > >
# define vvld vector < vector < ld > >

# define all(v) (v).begin() , (v).end()
# define allrev(v) (v).rbegin() , (v).rend()
# define allcomp(v) v.begin() , v.end() , comp
# define allrevcomp(v) v.rbegin() , v.rend() , comp

# define pii pair < int , int >
# define pll pair < ll , ll >
# define pld pair < ld , ld >
# define pDD pair < D , D >

# define vpld vector < pld >
# define vpii vector < pii >
# define vpll vector < pll >
# define vpDD vector < pDD >

# define vvpii vector < vector < pii > >
# define F first
# define S second
# define mp make_pair

# define dist(a,b,p,q) sqrt((p-a)*(p-a) + (q-b)*(q-b))

# define pp(n) printf("%.10Lf",n);
# define line cout<<"\n";
# define fast ios_base::sync_with_stdio(false) ; cin.tie(0) ; cout.tie(0);

string vow = "aeiou";
int month[] = {-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

const int dxhorse[] = {-2, -2, -1, -1, 1, 1, 2, 2};
const int dyhorse[] = {1, -1, 2, -2, 2, -2, 1, -1};

const int dx[] = { -1 , 0 , 1 , 0 } ;
const int dy[] = { 0 , 1 , 0 , -1 } ;

const ld pie = 3.1415926535897932384626 ;
const ll mod = 1e9 + 7 ;

/// Tip : If a and b are positive integers ; we may say - ceil (a/b) = 1 + floor ( (a-1)/b ) .

void bad () { cout << "INVALID" ; line ; exit ( 0 ) ; }

const int N = 1e3 + 10 ;
char ans[N][N] ;

pii v[N][N] ;
int n ;

queue < pii > q ;
bool vis[N][N] ;

void read ()
{
    cin >> n ;

    for ( int i=1 ; i <= n ; i ++ )
    {
        for ( int j = 1 ; j <= n ; j ++ )
        {
            int a , b ;
            cin >> a >> b ;

            if ( a == i && b == j )
            {
                q.push ( { a , b } ) ;
                vis[i][j] = 1 ;
                ans[i][j] = 'X' ;
            }

            v[i][j] = { a , b } ;
        }
    }
}

string dir = "URDL" ;

void bfs ( )
{
    while ( q.empty() == false )
    {
        auto temp = q.front() ;
        q.pop() ;

        int x = temp.F ;
        int y = temp.S ;

        for ( int k = 0 ; k < 4 ; k ++ )
        {
            int xx = x + dx[k] ;
            int yy = y + dy[k] ;

            if ( vis[xx][yy] ) C ;
            if ( v[xx][yy] != v[x][y] ) C ;

            vis[xx][yy] = 1 ;
            q.push ( { xx , yy } ) ;

            int dir = (k^2) ;
            ans[xx][yy] = ::dir[dir] ;
        }
    }
}

void check_all_elements_part_of_a_cycle ()
{
    for ( int i=1 ; i <= n ; i ++ )
    {
        for ( int j = 1 ; j <= n ; j ++ )
        {
            if ( vis[i][j] ) C ;
            if ( v[i][j] != mp(-1,-1) ) bad() ;

            int opt_dir = -1 ;

            for ( int k = 0 ; k < 4 ; k ++ )
            {
                int xx = i + dx[k] ;
                int yy = j + dy[k] ;

                if ( v[xx][yy] != mp(-1,-1) ) C ;
                if ( vis[xx][yy] ) C ;

                opt_dir = k ;
                break ;
            }

            for ( int k = 0 ; k < 4 && (opt_dir == -1) ; k ++ )
            {
                int xx = i + dx[k] ;
                int yy = j + dy[k] ;

                if ( v[xx][yy] != mp(-1,-1) ) C ;

                opt_dir = k ;
                break ;
            }

            if ( opt_dir == -1 ) bad() ;

            int &k = opt_dir ;

            vis[i][j] = 1 ;
            ans[i][j] = dir[k] ;

            int xx = i + dx[k] ;
            int yy = j + dy[k] ;

            if ( vis[xx][yy] ) C ;

            vis[xx][yy] = 1 ;
            ans[xx][yy] = dir[k^2] ;
        }
    }
}

void check_if_ok ()
{
    string allowed_char = "URDLX" ;

    for ( int i=1 ; i <= n ; i ++ )
    {
        for ( int j = 1 ; j <= n ; j ++ )
        {
            if ( vis[i][j] == false ) bad() ;

            bool ok = false ;
            for ( auto c : allowed_char )
            {
                if ( c == ans[i][j] )
                    ok = 1 ;
            }

            if ( !ok ) bad() ;
        }
    }
}

void print ()
{
    cout << "VALID" ; line ;

    for ( int i = 1 ; i <= n ; i ++ )
    {
        for ( int j = 1 ; j <= n ; j ++ )
            cout << ans[i][j] ;

        line ;
    }
}

void solve ( int test_case )
{
    read () ;
    bfs () ;

    check_all_elements_part_of_a_cycle () ;

    check_if_ok () ;
    print () ;
}

int main()
{fast
    int t = 1;
    // cin >> t;

    for ( int i=1 ; i <= t ; i ++ ) solve ( i ) ;
    return 0;
}
