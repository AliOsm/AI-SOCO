//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e6 + 5;
const double eps = 1e-9;
using namespace std;
ll c[3][3];
ll dp[45][3][3];

int main()
{
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            nl(c[i][j]);
    int n;
    ni(n);
    for (int j = 0; j < 3; j++)
    {
        for (int k = 0; k < 3; k++)
        {
            if (j == k)
            {
                dp[1][j][k] = 0;
                continue;
            }
            dp[1][j][k] = min(c[j][k], c[j][3 - j - k] + c[3 - j - k][k]);
        }
    }
    for (int i = 2; i <= n; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            for (int k = 0; k < 3; k++)
            {
                if (j == k)
                {
                    dp[i][j][k] = 0;
                    continue;
                }
                dp[i][j][k] = min(dp[i - 1][j][3 - j - k] + c[j][k] + dp[i - 1][3 - j - k][k], c[j][3 - j - k] + c[3 - j - k][k] + dp[i - 1][j][k] + dp[i - 1][k][j] + dp[i - 1][j][k]);
            }
        }
    }
    printf("%I64d\n", dp[n][0][2]);
    return 0;
}
