#include <bits/stdc++.h>
using namespace std;

const int INF = 1e9 + 7;

struct pos {
	int x, y, height;
};

int dp[205][205][205];
pos track[205][205][205];
string s, t;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> s >> t; s = "_" + s; t = "_" + t;

	fill(&dp[0][0][0], &dp[0][0][0] + 205 * 205 * 205, INF);
	dp[0][0][0] = 0;
	for (int i = 0; i < s.size(); i++) {
		for (int j = 0; j < t.size(); j++) {
			//untuk '('
			for (int k = 1; k <= 200; k++) {
				pos pre;
				pre.x = i + (s[i] == '(' ? -1 : 0);
				pre.y = j + (t[j] == '(' ? -1 : 0);
				pre.height = k - 1;

				if (pre.x >= 0 && pre.y >= 0 && dp[pre.x][pre.y][pre.height] != INF && dp[pre.x][pre.y][pre.height] + 1 < dp[i][j][k]) {
					dp[i][j][k] = dp[pre.x][pre.y][pre.height] + 1;
					track[i][j][k] = pre;
				}
			}

			//untuk ')'
			for (int k = 200 - 1; k >= 0; k--) {
				pos pre;
				pre.x = i + (s[i] == ')' ? -1 : 0);
				pre.y = j + (t[j] == ')' ? -1 : 0);
				pre.height = k + 1;

				if (pre.x >= 0 && pre.y >= 0 && dp[pre.x][pre.y][pre.height] != INF && dp[pre.x][pre.y][pre.height] + 1 < dp[i][j][k]) {
					dp[i][j][k] = dp[pre.x][pre.y][pre.height] + 1;
					track[i][j][k] = pre;
				}
			}
		}
	}

	string ans = "";
	pos cur = {(int) s.size() - 1, (int) t.size() - 1, 0};
	while (cur.x != 0 || cur.y != 0 || cur.height != 0) {
		pos nxt = track[cur.x][cur.y][cur.height];

		if (cur.height > nxt.height) ans += '(';
		else ans += ')';

		cur = nxt;
	}

	reverse(ans.begin(), ans.end());
	cout << ans << '\n';

	return 0;
}