/*
author: madhav_1999 aka orthodoxparadox
5 April 2020 at 4:47 AM
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define pii pair<int, int>
#define len(x) (int) x.size()
#define rev(a) reverse(all(a))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#define inf 2e18
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef MADHAV
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...) 42
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
template <typename T, typename S> ostream& operator << (ostream& os, const map<T, S>& v) { for (auto it : v) os << it.first << "=>" << it.second << endl; return os; }
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int MOD = 1e9 + 7;

int takemod(int a, int mod = MOD){a%=mod;if(a<0)a+=mod;return a;}

int fast_exp(int base, int expo, int mod = MOD) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a, int mod = MOD){return takemod(fast_exp(takemod(a, mod), mod-2, mod), mod);}


const int N = 2e5 + 10;
vector<int> graph[N];
int subsz[N];
int cntleaves = 0;


void dfs(int u, int p = -1) {
	subsz[u] = 0;
	bool flag = false;
	for(int &v : graph[u]) {
		if(v == p) continue;
		flag = true;
		dfs(v, u);
		subsz[u] += subsz[v];
	}	
	if(!flag) subsz[u] = 1;
	cntleaves += !flag;
}

int max_dfs(int u, int p = -1, bool adv = 1) {
	if(adv) {
		int ret = inf;
		for(int &v : graph[u]) {
			if(v == p) continue;
			ret = min(ret, max_dfs(v, u, !adv));
		}
		if(ret == inf) ret = 1;
		return ret;
	}
	else {
		int ret = 0;
		for(int &v : graph[u]) {
			if(v == p) continue;
			ret += max_dfs(v, u, !adv);
		}
		if(ret == 0) ret = 1;
		return ret;
	}
}

int min_dfs(int u, int p = -1, bool adv = true) {
	if(adv) {
		int ret = 0;
		bool flag = false;
		for(int &v : graph[u]) {
			if(v == p) continue;
			flag = true;
			ret += min_dfs(v, u, !adv) - 1;
		}
		if(!flag) return 1;
		return ret + 1;
	}
	else {
		bool flag = false;
		int ret = subsz[u];
		int sub = inf;
		for(int &v : graph[u]) {
			if(v == p) continue;
			flag = true;
			sub = min(sub, subsz[v] - min_dfs(v, u, !adv));
		}
		if(!flag) return 1;
		else return ret - sub;
	}
}



void solve()
{
	int n;
	cin >> n;
	for(int i = 0; i < n - 1; i++) {
		int u, v;
		cin >> u >> v;
		graph[u].pb(v); 
		graph[v].pb(u);
	}
	cntleaves = 0;
	dfs(1);
	cout << cntleaves + 1 - max_dfs(1) << " " << cntleaves + 1 - min_dfs(1);
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef MADHAV
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	clock_t t1, t2;
	t1 = clock();

	int tt = 1;
	// cin >> tt;
	while(tt--)
	{
		solve();
	}
	#ifdef MADHAV
	t2 = clock(); cerr << "time taken: " << (t2-t1)/(dbl)CLOCKS_PER_SEC;
	#endif
	return 0;
}