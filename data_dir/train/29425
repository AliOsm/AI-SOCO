#include <algorithm>
#include <iostream>
#include <cmath>
#include <fstream>
#include <vector>
#include <iomanip>
#include <string>
#include <queue>
#include <map>
#include <stack>
#include <set>
#include <memory.h>

using namespace std;

typedef long long ll;
typedef long double ld;

template <typename T>
T gcd(T a, T b) {
    while (a > 0 && b > 0) {
        if (a > b) a %= b; else b %= a;
    }
    return (a + b);
}

template <typename T>
T lcm(T a, T b) {
    return a / gcd(a, b) * b;
}

template <typename T>
bool prime(T n) {
    if (n <= 1) {
        return false;
    }
    T i = 2;
    while (i * i <= n) {
        if (n % i == 0) {
            return false;
        }
        ++i;
    }
    return true;
}

vector<bool> badCity;
vector<vector<int> > g;
vector<bool> used;

bool isBadCurentComponent;
int sizeCurrentComponent;

void dfs(int v) {
    used[v] = true;
    if (badCity[v]) {
        isBadCurentComponent = true;
    }
    ++sizeCurrentComponent;
    for (int i = 0; i < g[v].size(); ++i) {
        int next = g[v][i];
        if (used[next]) {
            continue;
        }
        dfs(next);
    }
}

void solveTask() {
    int n, m, k;
    cin >> n >> m >> k;
    badCity.resize(n, false);
    g.resize(n, vector<int> ());
    used.resize(n, false);
    for (int i = 1; i <= k; ++i) {
        int ind;
        cin >> ind;
        badCity[ind - 1] = true;
    }  
    for (int i = 1; i <= m; ++i) {
        int v1, v2;
        cin >> v1 >> v2;
        --v1;
        --v2;
        g[v1].push_back(v2);
        g[v2].push_back(v1);
    }
    int biggestBadComponent = 0;
    int countNotBadCity = 0;
    int answer = -m;
    for (int i = 0; i < n; ++i) {
        if (used[i]) {
            continue;
        }
        sizeCurrentComponent = 0;
        isBadCurentComponent = false;
        dfs(i);
        if (!isBadCurentComponent) {
            countNotBadCity += sizeCurrentComponent;
        } else {
            answer += sizeCurrentComponent * (sizeCurrentComponent - 1) / 2;
            biggestBadComponent = max(biggestBadComponent, sizeCurrentComponent);
        }
    }
    int newSize = biggestBadComponent + countNotBadCity;
    answer += newSize * (newSize - 1) / 2;
    answer -= biggestBadComponent * (biggestBadComponent - 1) / 2;
    cout << answer << endl;
}

int main() {
#ifndef ONLINE_JUDGE  
    freopen("input.txt", "r", stdin);
#else
    // online submission
#endif    
    //ios_base::sync_with_stdio(false);
    solveTask();
    return 0;
}