#include<iostream>
using namespace std;
int n,m,p,b,a[1000001],SegTree[1000001];
void GetSegTree(int low, int high, int pos,int ind)
{
		if(low == high) { SegTree[pos]=a[high]; return; }
		GetSegTree(low,(high+low)/2,2*pos+1,ind+1);
		GetSegTree((high+low)/2+1,high,2*pos+2,ind+1);
		if(ind%2) SegTree[pos]=SegTree[2*pos+1]^SegTree[2*pos+2];
		else SegTree[pos]=SegTree[2*pos+1]|SegTree[2*pos+2];
}
int Answer(int low, int high, int pos, int ind, int L)
{		
		if(L<low || L>high) return 0;
		if(L==low && L==high)
		{
				if(pos%2) 
				{
						if(ind%2) return SegTree[pos]|SegTree[pos+1];  return SegTree[pos]^SegTree[pos+1];
				}
				if(ind%2) return SegTree[pos]|SegTree[pos-1]; return SegTree[pos]^SegTree[pos-1];
		}
		Answer(low,(high+low)/2,2*pos+1,ind+1,L);
		Answer((high+low)/2+1,high,2*pos+2,ind+1,L);
		if(ind%2) SegTree[pos]=SegTree[2*pos+1]^SegTree[2*pos+2];
		else SegTree[pos]=SegTree[2*pos+1]|SegTree[2*pos+2];
}
int main()
{
	cin>>n>>m; int P=n%2-1;
	n=1<<n;
	for(int i=0; i<n; i++) cin>>a[i];
	GetSegTree(0,n-1,0,P);
	for(int i=0; i<m; i++)
	{
			cin>>p>>b; SegTree[n-2+p]=b;
			Answer(0,n-1,0,P,p-1);
			cout<<SegTree[0]<<endl;
	}
	
}
