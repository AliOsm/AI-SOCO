/*
digu_J - Digvijay Janartha
NIT Hamirpur - INDIA
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;

template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
    cout << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
    const char* comma = strchr(names + 1, ',');
    int len = comma - names;
    for (int i = 0; i < len; ++i) {
        cout << names[i];
    }
    cout <<  " : " << arg1 << " | ";
    __f(comma + 1, args...);
}
#else
#define trace(...)
#endif

typedef double db;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair < ll, ll > pll;
typedef pair < int, int > pii;
typedef vector < ll > vll;
typedef vector < int > vi;

#define eb emplace_back
#define pb push_back
#define F first
#define S second
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define unique_sort(x) (sort(x.begin(), x.end()), x.resize(distance(x.begin(), unique(x.begin(), x.end()))))
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const ll LINF = LLONG_MAX, base = 1e9, MOD = 1e9 + 7, N = 60, M = 1e3 + 5;
const int INF = INT_MAX;
const db PI = acos(-1);

struct trie {
    trie* next[2];
    int cnt = 0;
};

trie* head;

void test();
void add(ll x);
void remove(ll x);
ll query(ll x);

int main() {
    fast_io();
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    test();
    #ifndef ONLINE_JUDGE
        cout << "Time: " << (int)(clock() * 1000. / CLOCKS_PER_SEC) << "ms";
    #endif
    return 0;
}

void test() {
    int n;
    cin >> n;
    head = new trie();
    add(0), add(0);
    ll a[n + 2] = {0}, pre[n + 2] = {0};
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        pre[i] = pre[i - 1] ^ a[i];
        add(pre[i]);
    }
    ll ans = 0, cur = 0;
    for (int i = n + 1; i > 0; --i) {
        remove(pre[i]);
        cur ^= a[i];
        ans = max(ans, query(cur));
    }
    cout << ans << "\n";
}

void add(ll x) {
    trie* cur = head;
    for (int i = N; i >= 0; --i) {
        bool bit = (x >> i) & 1;
        if (cur -> next[bit] == NULL) {
            cur -> next[bit] = new trie();
        }
        cur = cur -> next[bit];
        ++cur -> cnt;
    }
}

void remove(ll x) {
    trie* cur = head;
    for (int i = N; i >= 0; --i) {
        bool bit = (x >> i) & 1;
        cur = cur -> next[bit];
        --cur -> cnt;
    }
}

ll query(ll x) {
    trie* cur = head;
    ll ans = 0;
    for (int i = N; i >= 0; --i) {
        bool bit = !((x >> i) & 1);
        if (cur -> next[bit] and cur -> next[bit] -> cnt) {
            ans += (1ll << i);
            cur = cur -> next[bit];
        } else {
            cur = cur -> next[!bit];
        }
    }
    return ans;
}
