#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pf push_front
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("board.in");ofstream out("board.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

int a, k, S=350, o=0;
vec<pair<pii, int>> z;
vec<int> n(100005);

void add(int c){
    if(c>1e5) return;
    n[c]++;
    if(n[c]==c) o++;
    else if(n[c]==c+1) o--;
}

void rem(int c){
    if(c>1e5) return;
    n[c]--;
    if(n[c]==c) o++;
    else if(n[c]==c-1) o--;
}

int main() {
    fast;
    cin>>a>>k;
    vec<int>m(a);
    for(int q=0; q<a; q++) cin>>m[q];
    z = vec<pair<pii, int>>(k);
    for(int q=0; q<k; q++){
        int l,r; cin>>l>>r; l--; r--;
        z[q] = {{l,r}, q};
    }
    sort(z.begin(), z.end(), [](auto p1, auto p2){return p1.F.F/S!=p2.F.F/S ? p1.F.F<p2.F.F : (p1.F.S<p2.F.S)^((p1.F.F/S)&1);});
    vec<int> ans(k);
    int l=0, r=0;
    add(m[0]);
    for(int q=0; q<k; q++){
        if(r<z[q].F.S) {for(r++; r<z[q].F.S; r++) add(m[r]); add(m[r]);}
        if(r>z[q].F.S) {for(; r>z[q].F.S; r--) rem(m[r]);}
        if(l<z[q].F.F) {for(; l<z[q].F.F; l++) rem(m[l]);}
        if(l>z[q].F.F) {for(l--; l>z[q].F.F; l--) add(m[l]); add(m[l]);}
        ans[z[q].S] = o;
    }
    for(int i : ans) cout<<i<<endl;
}