//IOI 2021
 
#include <bits/stdc++.h>
using namespace std;
 
#define pb push_back
#define ff first
#define ss second
 
typedef long long ll;
typedef pair<int, int> pii;
 
const int MAXN = 2 * 100 * 1000 + 17;
 
int n, a[MAXN], par[MAXN];
ll sum_down[MAXN], sum_up[MAXN], ans[MAXN];
vector<int> adj[MAXN];
 
ll dfs(int v, int d) {
	ll res = 0;
	for (auto i : adj[v])
		if (i != par[v]) {
			par[i] = v;
			res += dfs(i, d + 1);
		}
	return res + 1LL * d * a[v];
}
 
void dfs_down(int v) {
	for (auto i : adj[v])
		if (i != par[v]) {
			dfs_down(i);
			sum_down[v] += sum_down[i];
		}
}
 
void dfs_up(int v) {
	if (v != 1)
		sum_up[v] = sum_up[par[v]] + sum_down[par[v]] - sum_down[v];
	for (auto i : adj[v])
		if (i != par[v])
			dfs_up(i);
}
 
void dfs_ans(int v) {
	if (v != 1)
		ans[v] = ans[par[v]] - sum_down[v] + sum_up[v];
	for (auto i : adj[v])
		if (i != par[v])
			dfs_ans(i);
}
 
int main() {
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i], sum_down[i] = a[i];
	for (int i = 1; i < n; i++) {
		int v, u;
		cin >> v >> u;
		adj[v].pb(u);
		adj[u].pb(v);
	}
	
	ans[1] = dfs(1, 0);
	dfs_down(1);
	dfs_up(1);
	dfs_ans(1);
	//cerr << sum_up[2] << endl;
	//cerr << sum_up[3] << endl;
	cout << *max_element(ans + 1, ans + n + 1) << endl;
	return 0;
}