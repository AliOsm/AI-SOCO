#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;
using namespace std;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
long long MOD = 1e9+7;
pair<int,int> dx[4] = {{1,0},{-1,0},{0,1},{0,-1}};
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
long long fastpow(long long x,long long k)
{
    if(!k)
        return 1;
    if(k & 1)
        return ((x * fastpow(x,k-1) % MOD) % MOD) % MOD;
    long long ans = fastpow(x,k/2);
    ans %= MOD;
    ans *= ans;
    ans %= MOD;
    return ans;
}
long long sumF(long long x)
{
    int s = 0;
    while(x)
        s += x%10,x /= 10;
    return s;
}
const int RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();
struct chash {
    int operator()(int x) const { return x ^ RANDOM; }
};
int moves[100005];
int answerMap[100005];
int freq[100005];
int main()
{
    IO;
    int n;
    cin >> n;
    //n = 1e5;
    memset(moves,-1,sizeof moves);
    for(int i = 1;i <= n;i++)
    {
        int x;
        cin >> x;
        //x = uniform_int_distribution<int>(1, 1e5)(rng);
        queue<int> myQue;
        myQue.push(x);
        moves[x] = 0;
        vector<int> toClear;
        while(myQue.size())
        {
            int cur = myQue.front();
            myQue.pop();
            toClear.push_back(cur);
            int f1 = cur*2;
            int f2 = cur/2;
            if(f1 <= 1e5 && moves[f1] == -1)
            {
                moves[f1] = moves[cur] + 1;
                myQue.push(f1);
            }
            if(f2 > 0 && moves[f2] == -1)
            {
                moves[f2] = moves[cur] + 1;
                myQue.push(f2);
            }
        }
        for(int i = 0;i < toClear.size();i++)
        {
            freq[toClear[i]]++;
            answerMap[toClear[i]] += moves[toClear[i]];
            moves[toClear[i]] = -1;
        }
    }
    int lowestAns = 1e9;
    for(int i = 1;i <= 1e5;i++)
    {
        if(freq[i] == n)
            lowestAns = min(lowestAns,answerMap[i]);
    }
    cout << lowestAns;
    return 0;
}
