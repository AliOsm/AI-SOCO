#include <iostream>
#include <algorithm>
#include <vector>
#include <cstring>
#include <cstdio>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cmath>
using namespace std;

int min_dist[3005][3005];
vector<int> bests[3005];
vector< pair<int, int> > X;
vector<int> E[3005];
int n;

void bfs(int source){

	for(int i = 1; i<= n; i++){
		for(int j = 1; j <= n; j++)
			min_dist[i][j] = 1 << 30;
	}		
	
	min_dist[source][source] = 0;
	
	queue<int> Q;
	Q.push(source);
	
	while(!Q.empty()){
		int v = Q.front();
		Q.pop();
		
		int d = min_dist[source][v];
	
		for(int i = 0; i < E[v].size(); i++){
			int to = E[v][i];
			
			if(min_dist[source][to] >= (1 << 30)){
				min_dist[source][to] = d + 1;
				Q.push(to);
			}
		}
	}
	
	X.clear();
	
	for(int i = 1; i <= n; i++){
		if(i == source) continue;
		if(min_dist[source][i] < (1 << 30)){
			X.push_back( make_pair( min_dist[source][i], i) );
		}
	}
	
	sort(X.begin(), X.end());
	reverse(X.begin(), X.end());
	
	for(int i = 0; i < X.size() && i < 4; i++){
		bests[source].push_back( X[i].second );
		//cout << "FROM " << source << " TO " << X[i].second << " " << X[i].first << endl;	
	}
}
long long v[222222];
int main() {
	
	ios::sync_with_stdio(false);
	cout.tie(0);
	cin.tie(0);

	int n; cin >> n;
	
	for(int i = 0; i < n; i++) cin >> v[i];
	
	sort(v, v+n);
	long long sum =0;
	for(int i = 0; i < n - 1; i++)
		sum += v[i];
		
	long long maxi = max(v[n - 1], sum);
	long long mini = min(v[n - 1], sum);
	
	cout << maxi - mini + 1 << endl;
	return 0;
}