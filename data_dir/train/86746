/**
*
* Author: Mouhanad
* Lang: GNU C++14
*
**/
#include<bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define ii pair < int , int >
#define LS pair < ll , string >
typedef long long ll;
const int inf = 1<<30;
const int N =200100;
int n , a[N] , q ;
vector < int > adj[N];
vector < ii > Q[N];
int  sz[N] , col[N] , dep[N] , ANS[N] , mark[N];
bool big[N];
map < int , int > cnt[N];
void pre_dfs ( int u , int par ) {

   sz[u] = 1;
   dep[u] = dep[par]+1;
   for ( auto v : adj[u] )
     if ( v != par ){
       pre_dfs(v,u);
       sz[u] += sz[v];
     }
 return ;
}
void add(int u, int p, int x){
    if ( x == 1 ){
        cnt [ dep[u] ][mark[u]] ++;
    }else {
     if ( cnt[dep[u]][mark[u]] == 1 ) cnt[dep[u]].erase(mark[u]);
     else cnt[dep[u]][mark[u]]--;
    }
    for(auto v: adj[u])
        if(v != p && !big[v])
            add(v, u, x);
}
void dfs(int u, int p, bool keep){
    int mx = -1, bigChild = -1;
    for(auto v : adj[u])
       if(v != p && sz[v] > mx)
          mx = sz[v], bigChild = v;
    for(auto v : adj[u])
        if(v != p && v != bigChild)
            dfs(v, u, 0);  // run a dfs on small childs and clear them from cnt
    if(bigChild != -1)
        dfs(bigChild, u, 1), big[bigChild] = 1;  // bigChild marked as big and not cleared from cnt
    add(u, p, 1);
   for ( auto q : Q[u] ){
         ANS[q.S] = ( int ) cnt[dep[u]+q.F].size() ;
    }

    if(bigChild != -1)
        big[bigChild] = 0;
    if(keep == 0)
        add(u, p, -1);
}
int c  ;
char al[22] ;
map  < string , int > mp;
int main ( ){
  scanf("%d",&n);

  for ( int i = 1 ; i <= n; i++ ){
     int p ; scanf("%s",al);
     scanf("%d",&p);
    if ( !mp.count(string(al)) ) {
        mp[string(al)] = ++c ;
    }
    mark[i] = mp[string(al)];
    adj[p].push_back(i);

  }
  dep[N-1] = -1 ;
  pre_dfs( 0,N-1);
  int q ; scanf("%d",&q);
  for ( int i = 1 ; i <= q; i++ ){
    int v , k ; scanf("%d %d",&v,&k);
    Q[v].push_back({k,i});
  }
  dfs(0,N-1,0);

  for ( int i = 1; i <= q ;i++ )
    printf("%d\n",ANS[i]);
return 0 ;
}
