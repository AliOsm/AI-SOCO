#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, mod;
int F[300300];
int inv[300300];

int binpow(int a, int k) {
    if (k == 0) return 1;
    if (a == 0) return 0;
    int ans = binpow(a, k / 2);
    ans = 1ll * ans * ans % mod;
    if (k % 2) ans = 1ll * ans * a % mod;
    return ans;
}

int C(int n, int k) {
    if (k < 0 || k > n) return 0;
    if (n < 0) return 0;
    if (k == 0 || k == n) return 1;
    int ans = F[n];
    ans = 1ll * ans * inv[k] % mod;
    ans = 1ll * ans * inv[n - k] % mod;
    return ans;
}

int f(int n) {
    vector<int> v;
    for (int i = 0; i < n; i++) v.pb(i);
    int ans = 0;
    do {
        for (int l = 0; l < v.size(); l++) {
            int mn = inf, mx = -inf;
            for (int r = l; r < v.size(); r++) {
                mn = min(mn, v[r]);
                mx = max(mx, v[r]);
                if (r - l == mx - mn) ans++;
            }
        }
    } while(next_permutation(all(v)));
    return ans;
}

int calc(int n) {
    int ans = F[n] * 1ll * n % mod;
    for (int k = 1; k < n; k++) {
        int cur = (k + 1) * 1ll * (k) % mod;
        cur = 1ll * cur * F[k - 1] % mod;
        cur = 1ll * cur * (n - k) % mod;
        cur = 1ll * cur * (n - k) % mod;
        cur = 1ll * cur * F[n - k - 1] % mod;
        ans = (ans + cur) % mod;
    }
    return ans;
}

int main(){

    cin >> n >> mod;

    F[0] = inv[0] = 1;
    for (int i = 1; i < 300300; i++) {
        F[i] = 1ll * F[i - 1] * i % mod;
        inv[i] = binpow(F[i], mod - 2);
    }

    cout << calc(n) << endl;

    return 0;
}
