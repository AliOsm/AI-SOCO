#include <bits/stdc++.h>
using namespace std;

const int MAX = 1e6; 
const int OO = 0x3f3f3f3f;
const double EPS = 1e-9; 

#define bug(x) cout << #x << " = " << x << '\n'
#define FOR(i, a, n) for(int i = a; i < n; i++)
#define REP(i, n) FOR(i, 0, n)
#define fi first
#define se second
#define pb push_back
#define mt make_tuple
#define all(vetor) vetor.begin(), vetor.end()
#define X real()
#define Y imag()
//#define gc getchar_unlocked

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> ii;
typedef pair<int, ii> iii;
typedef complex<ll> Pll;
typedef complex<ld> Pld;

int n;
int arr[MAX], tree[MAX];

void build(int node, int start, int end)
{
    if(start == end)
        tree[node] = arr[start];
    else
    {
        int mid = ((start + end) >> 1);
        build((node << 1), start, mid);
        build((node << 1) + 1, mid + 1, end);
        tree[node] = __gcd(tree[(node << 1)], tree[(node << 1) + 1]);
    }
}

void update(int node, int start, int end, int idx, int value)
{
    if(start == end)
        tree[node] = arr[idx] = value;
    else
    {
        int mid = ((start + end) >> 1);
        if(start <= idx and idx <= mid)
            update((node << 1), start, mid, idx, value);
        else
            update((node << 1) + 1, mid + 1, end, idx, value);
        tree[node] = __gcd(tree[(node << 1)], tree[(node << 1) + 1]);
    }
}

int query(int node, int start, int end, int l, int r, int x)
{
    int ans = 0;
    int mid = ((start + end) >> 1);
    
    if(l > end or start > r) 
        return 0;
    if(l <= start and end <= r)
    {
        if(tree[node]%x == 0) return 0;
        if(start == end) return 1;
        ans += query((node << 1), start, mid, l, r, x);
        if(ans > 1) return ans;
        ans += query((node << 1) + 1, mid + 1, end, l, r, x);
    }
    else
    {
        ans += query((node << 1), start, mid, l, r, x);
        if(ans > 1) return ans;
        ans += query((node << 1) + 1, mid + 1, end, l, r, x);
    }
    return ans;
}

int main()
{	
    scanf("%d", &n);
    REP(i, n) scanf("%d", arr + i);
    
    int q, o, l, r, x;
    build(1, 0, n-1);
    scanf("%d", &q);
    while(q--)
    {
        scanf("%d %d %d", &o, &l, &r);
        if(o == 2)
            update(1, 0, n-1, l-1, r);
        else
        {
            scanf("%d", &x);
            printf(query(1, 0, n-1, l-1, r-1, x) > 1 ? "NO\n" : "YES\n");           
        }
    }

	return 0;
}