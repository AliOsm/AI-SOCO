// in the name of Allah

#include <bits/stdc++.h>
using namespace std;

#define endl '\n'
#define pb push_back
#define ll long long
#define double long double
#define sz(x) ((int) (x.size()))

#define fr first
#define se second

const ll mod = 1000000007;

inline ll add(ll a, ll b) {
	a += b;
	if(a >= mod) return a - mod;
	return a;
}

inline ll mul(ll a, ll b) {
	a *= b;
	if(a >= mod) return a % mod;
	return a;
}

inline ll power(ll a, ll b) {
	ll p = 1;
	while(b) {
		if(b&1) p = mul(p, a);
		a = mul(a, a);
		b /= 2;
	}
	return p;
}

const int max_n = 2e5 + 5;

class SegmentTree {
private:
	int idx[5*max_n];
	ll tree[5*max_n];
	ll lazy[5*max_n];
	void build(int node, int start, int end) {
		if(start == end) {
			idx[node] = start;
			tree[node] = A[start];
		}
		else {
			int mid = (start + end) / 2;
			build(2*node, start, mid);
			build(2*node+1, mid+1, end);
			tree[node] = min(tree[2*node], tree[2*node+1]);
			if(tree[node] == tree[2*node+1]) {
				idx[node] = idx[2*node+1];
			}
			else {
				idx[node] = idx[2*node];
			}
		}
	}
	void updateRange(int node, int start, int end, int l, int r, long long val) {
		if(lazy[node] != 0) {
			tree[node] += lazy[node];
			if(start != end) {
				lazy[node*2] += lazy[node];
				lazy[node*2+1] += lazy[node];
			}
			lazy[node] = 0;
		}
		if(start > end || start > r || end < l) return;
		if(start >= l && end <= r) {
			tree[node] += val;
			if(start != end) {
				lazy[node*2] += val;
				lazy[node*2+1] += val;
			}
			return;
		}
		int mid = (start + end) / 2;
		updateRange(node*2, start, mid, l, r, val);
		updateRange(node*2 + 1, mid + 1, end, l, r, val);
		tree[node] = min(tree[node*2], tree[node*2+1]);
		if(tree[node] == tree[2*node+1]) {
			idx[node] = idx[2*node+1];
		}
		else {
			idx[node] = idx[2*node];
		}
	}
	pair <ll, int> queryRange(int node, int start, int end, int l, int r) {
		if(start > end || start > r || end < l) return {(int) 1e13, -1};
		if(lazy[node] != 0) {
			tree[node] += lazy[node];
			if(start != end) {
				lazy[node*2] += lazy[node];
				lazy[node*2+1] += lazy[node];
			}
			lazy[node] = 0;
		}
		if(start >= l && end <= r) return {tree[node], idx[node]};
		int mid = (start + end) / 2;
		auto p1 = queryRange(node*2, start, mid, l, r);
		auto p2 = queryRange(node*2 + 1, mid + 1, end, l, r);
		if(p1.first >= p2.first) return p2;
		return p1;
	}
public:
	int n;
	vector <ll> A;
	SegmentTree() {}
	SegmentTree(const vector <ll> &v) {
		A = v;
		n = A.size();
		memset(lazy, 0, sizeof lazy);
		build(1, 0, n-1);
	}
	void update(int l, int r, long long val = -1) {
		updateRange(1, 0, n-1, l, r, val);
	}
	int query(int l, int r) {
		return queryRange(1, 0, n-1, l, r).second;
	}
};

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);

	int n;
	cin >> n;
	vector <ll> a(n);
	for(int i=0; i<n; i++) {
		cin >> a[i];
	}
	SegmentTree st(a);
	int b[n];
	for(int i=1; i<=n; i++) {
		int idx = st.query(0, n-1);
		b[idx] = i;
		st.update(idx, idx, 1e13);
		st.update(idx+1, n-1, -i);
	}
	for(int i=0; i<n; i++) {
		cout << b[i] << " ";
	}

	return 0;
}