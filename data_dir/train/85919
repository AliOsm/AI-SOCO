#pragma GCC optimize(3)
#include <bits/stdc++.h>

using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define mod 998244353
#define int long long
#define inf (1LL << 55)
const int maxnodes=1005;
#define ll long long
#define N 300005
#define EPS 0.01
#define ff first
#define ss second
#define T pair<int, int>
#define ordered_set tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>

bool comp(int a,int b)
{
    return abs(a) <= abs(b);
}

int32_t main()
{
    IOS;
    #ifndef ONLINE_JUDGE
    freopen("int.txt","r",stdin);
    freopen("out.txt","w",stdout);
    #endif
    int n;
    cin >> n;
    vector<int> v(n);
    for(int i = 0;i < n;i++)
    {
        cin>>v[i];
    }
    sort(v.begin(),v.end(),comp);

    ordered_set positive;
    ordered_set negative;
    int j=0;
    int k=0;
    int ans = 0;
    int c = 1;
    for(int i = 0;i < n;i++)
    {
        if(v[i] >= 0)
        {   
            int y = v[i];
           
            j = positive.order_of_key({(y+1)/2,0});
            ans += ((int)(positive.size()) - j);

            k = negative.order_of_key({(-y-1)/2,c+1});
            ans += k;
            positive.insert({v[i],c});
            c++;
        }
        else
        {
            int y = v[i];
            k = negative.order_of_key({(y-1)/2,c+1});

            ans += k;
            j = positive.order_of_key({(-y+1)/2,0});
            ans += ((int)positive.size()) - j;
            negative.insert({v[i],c});
            c++;
        }
    }
   
    
    cout << ans;
}