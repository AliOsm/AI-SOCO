#include <bits/stdc++.h>

        using namespace std;

        /* ---*-----*-----
        ---------o--------
        -----------------*/

        typedef long long ll;
        typedef long double ld;

        typedef pair<int, int> pi;
        typedef pair<ll,ll> pl;
        typedef pair<ld,ld> pd;

        typedef vector<int> vi;
        typedef vector<ld> vd;
        typedef vector<ll> vl;
        typedef vector<pi> vpi;
        typedef vector<pl> vpl;
        typedef vector<char> vc;

        #define mp make_pair
        #define pb push_back
        #define f first
        #define s second
        #define lb lower_bound
        #define ub upper_bound

        const int MOD = 1000000007;
        set<char> vowel={'A', 'O', 'Y', 'E', 'U', 'I','a','o','y','e','u','i'};
        ll gcd(ll a, ll b) { return (b == 0 ? a : gcd(b, a % b)); }

        int dx[]={1,-1,0,0};
        int dy[]={0,0,1,-1};

        int n,m,k,l,ans=0,res=0,posmin,posmax,x,y,z,xmax=0,ymax=0;
        char c,c1;
        string ch,ch1,ch2;
        deque <int> q1,q2,q3,q4;
        map<int,set<int> > adj;
        map<pi ,vpi> mapai;
        set<ll> sx,sy;
        set<char> sc;
        map<ll,ll> ml;
        int lf[1000000],lib[1000000];
        vl v,vv;
        vpi vvv;
        //bool visit[N][N],check2=false;

        


        int main(){
            ios_base::sync_with_stdio(false);
            //memset(prime, true, sizeof(prime));
            //freopen("overcode.in", "r", stdin);
            //memset(graph,0,sizeof(graph));
            //memset(sptSet,0,sizeof(sptSet));
            //memset(visit,0,sizeof(visit));
            //memset(pred,-1,sizeof(tab));
            //memset(visit,0,sizeof(visit()));
            
            cin >> n;
            for(int i=0;i<n;i++){
                cin >> x;
                v.pb(x);
            }
            for(int i=0;i<n;i++){
                lib[i]=i;
                if(i-1>=0 && v[i]>v[i-1])lib[i]=lib[i-1];
            }
            for(int i=n-1;i>=0;i--){
                lf[i]=i;
                if(i+1<n && v[i+1]>v[i])lf[i]=lf[i+1];
            }
            ans=min(2,n);
            for(int i=0;i<n;i++){
                ans=max(ans,i-lib[i]+2);
                ans=max(ans,lf[i]-i+2);
                if(i-1>=0 && i+1<n && v[i-1]+1<v[i+1])ans=max(ans,lf[i+1]-lib[i-1]+1);
            }
            cout << min(ans,n);
            return 0;
        }