#include <iostream>

#include <vector>
#include <set>
#include <algorithm>

using namespace std;

// Idea: Procesamos desde la ultima posicion hasta la primera.  En cada
// instante, mantenemos un conjunto de todos los estudiantes que Nastya no
// puede pasar, ya sea directamente o indirectamente (porque otro estudiante
// lo esta bloqueando).
//
// Nota: Cualquier estudiante que entra en este conjunto no lograra salir ya que
// los nuevos estudiantes no pueden ayudarle a ser soprepasado por Nastya.
//
// Por cada estudiante nuevo a procesar (de derecha a izquierda), revisamos
// si Nastya puede pasarle o no.  La unica manera de que Nastya le pase es
// este estudiante llegue a pararse en frente de Nastya.  Para llegar ahi, en
// teoria, este estudiante debe cambiar de posicion con todos los estudiantes
// entre el y Nastya.  Pero los estudiantes que no estan en el conjunto descrito
// arriba no son relevantes porqye Nastya ya les paso (es decir, estan a la
// derecha de Nastya).  En fin, este estudiante solo necesita ser pasado por
// los estudiantes en el conjunto de estudiantes que Nastya no puede pasar.
//

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(nullptr);

   int N, M;
   cin >> N >> M;

   vector<int> P(N);
   for (int i = 0; i < N; ++i) {
      cin >> P[i];
   }

   vector< set<int> > can_swap(N+1);
   for (int m = 0; m < M; ++m) {
      int u, v;
      cin >> u >> v;
      can_swap[u].insert(v);
   }

   set<int> obstacles;  // conjunto de estudiantes que Nastya no puede pasar

   int res = 0;
   int nastya = P.back();
   for (int i = N-2; i >= 0; --i) {
      int new_pupil = P[i];
      
      int num_can_pass = 0;
      for (int other_pupil : can_swap[new_pupil]) {
         if (obstacles.count(other_pupil))
            ++num_can_pass;
      }
      
      // nuevo estudiante puede pasar todos los obstaculos
      // y Natsya puede intercambiar con nuevo estudiante
      if (num_can_pass == (int) obstacles.size() &&
          can_swap[new_pupil].count(nastya) != 0)
         ++res;
      else
         obstacles.insert(new_pupil);
   }
   cout << res << '\n';

   return 0;
}
