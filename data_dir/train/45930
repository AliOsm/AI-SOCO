/*input
3
4
1 3 4 2
1 2 2 3
5
2 3 4 5 1
1 2 3 4 5
8
7 4 5 6 1 8 3 2
5 3 6 4 7 5 8 4


*/
 
/*
                                                    ______________
                                                          |       )
                                                          |   )   /
                                                          |______/
                                                    |     |      \
                                                    |     |   )   \
                                                    |_____|_______)
 
*/
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <ctime>
#include <cassert>
#include <complex>
#include <string>
#include <cstring>
#include <chrono>
#include <random>
#include <queue>
#include <bitset>
#include <iomanip>
#include <fstream>
#include <stack>

using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll , ll> PLL;
typedef long double ld;
 
#define pb push_back
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
int mod = 1000000007;
const int inf = 1034567891;
const ll LL_INF = 1234567890123456789ll;
#define PI 3.14159265
#define endl '\n'
#define F first
#define S second
#define debug(x) cout << #x << " = " << x << endl;
#define TRACE
 
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
 
#define out(container) for (auto it : container) cout << it << " "; cout << endl;
 
 
template < typename T > T GCD(T a, T b)            { ll t; while(a) { t = a; a = b % a; b = t; } return b; }
template < typename T > string toString(T a)       { return to_string(a); }
template < typename T > void toInt(string s, T &x) { stringstream str(s); str >> x;}
inline int add(int x, int y){ x += y; if(x >= mod) x -= mod; return x;}
inline int sub(int x, int y){ x -= y; if(x < 0) x += mod; return x;}
inline int mul(int x, int y){ return (x * 1ll * y) % mod;}
inline int powr(int a, ll b){
  int x = 1 % mod;
  while(b){
    if(b & 1) x = mul(x, a);
    a = mul(a, a);
    b >>= 1;
  }
  return x;
}
inline int inv(int a){ return powr(a, mod - 2);}

const int N = 2e5 + 5;
int vec[N], col[N];
int n, ans = N;
bool vis[N], done[N];
vector<int> divisors[N];

void pre() {
  for (int i = 1; i < N; i++) {
    for (int j = i; j < N; j += i)
      divisors[j].pb(i);
  }
}

void stuff(vector<int>& cycles) {
  int m = cycles.size();
  bool ok = false;
  for (auto k : divisors[m]) {
    for (auto it : cycles)
      vis[it] = false;
    for (int i = 0; i < m; i++) {
      if (vis[cycles[i]]) continue;
      int p = cycles[(i + k) % m], c = col[cycles[i]], ind = (i + k) % m;
      vis[cycles[i]] = true;
      while (p != cycles[i] && col[p] == c) {
        vis[p] = true;
        ind = (ind + k) % m;
        p = cycles[ind];
      }
      if (p == cycles[i]) {
        ans = min(ans, k);
        ok = true;
        break;
      }
    }
    if (ok) break;
  }
}

int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  pre();
  int test;
  cin >> test;
  while (test--) {
    cin >> n;
    for (int i = 1; i <= n; i++) {
      cin >> vec[i];
      done[i] = false;
    }
    for (int i = 1; i <= n; i++) {
      cin >> col[i];
    }
    ans = N;
    for (int i = 1; i <= n; i++) {
      if (done[i]) continue;
      vector<int> cycles;
      int p = vec[i];
      done[i] = true;
      cycles.pb(i);
      while (p != i) {
        done[p] = true;
        cycles.pb(p);
        p = vec[p];
      }
      stuff(cycles);
    }
    cout << ans << endl;
  }

  return 0;
}