#include<bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-9, PI = acos(-1);
const int N = 1e2 + 9, M = 1e4 + 9, OO = 1e9 + 7, MOD = 1e9 + 7;
const ll inf = 1e18;

int a[N], b[N], mem[N][M], mem2[N][M], taken[N], total, n, sumBot = OO;

int solve(int idx, int sum) {
  if (idx == n) {
    if (sum >= total)
      return 0;
    return OO;
  }
  int& ret = mem[idx][sum];
  if (~ret)
    return ret;
  ret = OO;
  int c1 = solve(idx + 1, sum);
  int c2 = solve(idx + 1, sum + b[idx]) + 1;
  return ret = min(c1, c2);
}

int solve2(int idx, int sum) {
  if (idx == n)
    return 0;
  int& ret = mem2[idx][sum];
  if (~ret)
    return ret;
  ret = OO;
  int res = solve(idx, sum);
  int c1 = solve(idx + 1, sum);
  int c2 = solve(idx + 1, sum + b[idx]) + 1;
  if(c1 == c2 && c1 == res) {
    ret = min(solve2(idx+1, sum) + a[idx], solve2(idx + 1, sum + b[idx]));
  } else if(c1 == res) {
    ret = solve2(idx+1, sum) + a[idx];
  } else if(c2 == res) {
    ret = solve2(idx + 1, sum + b[idx]);
  } else
    assert(0);
  return ret;
}

int main() {
  fastIO;
#ifdef LOCAL
  freopen("input.in", "rt", stdin);
#endif
  cin >> n;
  for (int i = 0; i < n; ++i)
    cin >> a[i], total += a[i];
  for (int i = 0; i < n; ++i)
    cin >> b[i];
  memset(mem, -1, sizeof mem);
  memset(mem2, -1, sizeof mem2);
  cout << solve(0, 0) << ' ' << solve2(0, 0);
//  print(0, 0);
//  cout << sumBot;
  return 0;
}
