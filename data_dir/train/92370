#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <map>
#include <queue>
#include <set>
#include <iomanip>
#include <deque>
#include <cassert>
#include <ctime>
#include <cstring>
#include <cstdlib>
#include <chrono>
#include <ctime>
#include <random>
#include <stack>
#include <unordered_set>
#include <unordered_map>
using namespace std;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
typedef long long ll;
typedef long double ld;
#define INF 2001001001
#define MOD 1000000007

int N,M;
int mn,mx;
bool visited[200001];
vector<int>adj[200001];

void dfs(int node){
  mn=min(mn,node);
  mx=max(mx,node);
  visited[node]=true;
  for (int x:adj[node])
    if (!visited[x])
      dfs(x);
}

int main()
{
  //ios_base::sync_with_stdio(0);cin.tie(0);
  //freopen (".in","r",stdin);
  scanf("%d%d",&N,&M);
  for (int i=0;i<M;i++){
    int A,B;
    scanf("%d%d",&A,&B);
    adj[A].push_back(B);
    adj[B].push_back(A);
  }
  vector<pair<int,int>>v;
  int ans=0;
  for (int i=1;i<=N;i++)
    if (!visited[i]){
      mn=INF;
      mx=-INF;
      dfs(i);
      v.push_back({mn,mx});
    }
  sort(v.begin(),v.end());
  int R=-1;
  for (int i=0;i<(int)v.size();i++){
    if (R==-1)
      R=v[i].second;
    else{
      if (v[i].first>R)
	R=v[i].second;
      else{
	ans++;
	R=max(R,v[i].second);
      }
    }
  }
  cout<<ans<<endl;
  return 0;
}
