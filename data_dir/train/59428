#include <bits/stdc++.h>

using namespace std;

#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "

const int N = 500500;
const int M = 6;
int b[M] = { 4 , 8 , 15 , 16 , 23 , 42 };
int v[N];   /// inverse
int a[N];

set <int> st[M];

bool DFS(int i)
{
    if(a[i]==M-1)
    {
        st[a[i]].erase(i);
        return true;
    }

    auto nxt = st[a[i]+1].upper_bound(i);

    if(nxt == st[a[i]+1].end()) return false;

    if(DFS(*nxt))
    {
        st[a[i]].erase(i);
        return true;
    }

    return false;
}

int main()
{
    for(int i=0;i<M;i++)    v[b[i]] = i;

    int n;  cin>>n;

    for(int i=0;i<n;i++)
    {
        scanf("%d",a+i);

        a[i] = v[a[i]];

        st[a[i]].insert(i);
    }

    int Ans = 0;

    for(int i=0;i<n;i++)
    {
        if(!st[a[i]].count(i))  continue;

        if(a[i] != 0 || !DFS(i))    Ans++;
    }

    cout << Ans;
}
