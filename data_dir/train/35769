#include <bits/stdc++.h>

using namespace std ;


int n , m , w ; 
int W[1010] , B[1010] ; 
long long Sumw[1010] , Bt[1010] ; 
vector < vector < int > > v ; 
vector < vector < int > > clus ; 
bool vis[1010] ;
int cnt = -1;  
long long sumw , sumb ; 
void dfs(int idx) 
{
	if ( vis[idx] ) return ; 
	vis[idx] = 1 ; 
	sumw += W[idx] ; 
	sumb += B[idx] ; 
	clus[cnt].push_back(idx) ; 
	for ( int i = 0 ; i < v[idx].size() ; i++ ) 
		dfs(v[idx][i]) ; 
}

long long dp[1010][1010] ; 
long long f(int idx, int We) 
{
	if ( We < 0 ) return -1e15 ;
	if ( clus[idx].empty() ) return 0 ; 
	if ( dp[idx][We] != -1 ) return dp[idx][We] ; 
	long long ans = 0 ; 
	ans = max(ans,f(idx+1,We-Sumw[idx]) + Bt[idx]) ; 
	ans = max(ans,f(idx+1,We)) ; 
	for ( int i = 0 ; i < clus[idx].size() ; i++ ) 
		ans = max(ans,f(idx+1,We-W[clus[idx][i]])+ B[clus[idx][i]]) ; 
	return dp[idx][We] = ans ; 
}
int main()
{
	memset(dp,-1,sizeof dp) ; 
	scanf("%d%d%d",&n,&m,&w) ; 
	for ( int i = 0 ; i < n ; i++ ) 
		scanf("%d",&W[i]) ; 
	for ( int i = 0 ; i < n ; i++ ) 
		scanf("%d",&B[i]) ; 
	int x , y; 
	v.resize(n+10) ; 
	clus.resize(n+10) ; 
	for ( int i = 0 ; i < m ; i++ ) 
	{
		scanf("%d%d",&x,&y) ; 
		x--; y-- ; 
		v[x].push_back(y) ; 
		v[y].push_back(x) ; 
	}
	for ( int i = 0 ; i < n ; i++ ) 
	{
		sumw = sumb = 0 ; 
		if ( vis[i] ) ; 
		else 
		{
			cnt++ ; 
			dfs(i) ; 
			Sumw[cnt] = sumw ; 
			Bt[cnt] = sumb ; 
		}
		
	}
	cout << f(0,w) ; 
    return 0 ;
}
