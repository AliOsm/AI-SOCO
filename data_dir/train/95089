#include <bits/stdc++.h>
 
using namespace std;
 
#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<pii, int> para;
const int inf = 1e9 + 7;
const int maxN = 1000000 + 5;
const ll Q = 998244353;

int n;
pii arr[maxN], arr2[maxN];
ll factorial[maxN];
map<int, int> cnt1, cnt2;

void fact(int n) {
	ll tmp = 1;
	RI(i, n) {
		tmp *= i;
		tmp %= Q;
		factorial[i] = tmp;
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin >> n;
	fact(n);
	REP(i, n) {
		cin >> arr[i].st >> arr[i].nd;
		arr2[i] = arr[i];
		cnt1[arr[i].st]++;
		cnt2[arr[i].nd]++;
	}	
	sort(arr2, arr2 + n);
	int maxNd = 0;
	int cnt = 1;
	ll ansBoth = 1;
	REP(i, n) {
		if (maxNd > arr2[i].nd) {ansBoth = 0; break;}
		maxNd = arr2[i].nd;
		if (i != 0 && arr2[i] == arr2[i - 1]) cnt++;
		else {ansBoth *= factorial[cnt]; ansBoth %= Q; cnt = 1;}
	}
	ansBoth *= factorial[cnt]; ansBoth %= Q;

	ll fst = 1;
	for (auto p : cnt1) {
		fst *= factorial[p.nd]; fst %= Q;
	}
	ll fst2 = 1;
	for (auto p : cnt2) {
		fst2 *= factorial[p.nd]; fst2 %= Q;
	}
	
	//cout << fst << " " << fst2 << " " << factorial[n] << endl;
//cout << "Can be " << canBe << " " << ansBoth << endl;
	cout << (factorial[n] - fst - fst2 + ansBoth + 5 * Q) % Q;
	return 0;
}