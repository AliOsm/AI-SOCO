#include<iostream>
#include<cstdio>
#include<vector>
#include<cmath>
#include<map>
#include<set>
#define mod 1000000007
#define inf 2000000000
using namespace std;
int n,m;
int q[1003];
struct rebro
{
    int x,y,c;
};
rebro a[10003];
rebro b[10003];
int coun2[1003];
void mergesort(rebro *a,rebro *b,int n)
{
    int i,i0,i1,iRight,iEnd,width,j;
    for(width=1;width<n;width*=2)
        for(i=0;i<n;i+=width*2)
        {
            i0=i;
            i1=iRight=min(i+width,n);
            iEnd=min(i+width*2,n);
            for(j=i;j<iEnd;j++)
                if(i0<iRight && (i1==iEnd || a[i0].c<a[i1].c))
                    b[j]=a[i0++];
                else
                    b[j]=a[i1++];
            for(j=i;j<iEnd;j++)
                a[j]=b[j];
        }
}
int pred[1003];
int size[1003];
void makeset(int v)
{
    pred[v]=v;
    size[v]=1;
}
int findset(int v)
{
    if(pred[v]==v)
        return v;
    return pred[v]=findset(pred[v]);
}
int main()
{
    scanf("%d",&n);
    int i;
    for(i=0;i<n;i++)
        scanf("%d",&q[i]);
    scanf("%d",&m);
    int x,y;
    for(i=0;i<m;i++)
    {
        scanf("%d %d %d",&a[i].x,&a[i].y,&a[i].c);
        a[i].x--;
        a[i].y--;
    }
    mergesort(a,b,m);
    int ans=0;
    int coun=0;
    for(i=0;i<n;i++)
        makeset(i);
    for(i=0;i<m;i++)
    {
        if(coun2[a[i].y]<1)
        {
            x=findset(a[i].x);
            y=findset(a[i].y);
            if(x!=y)
            {
                coun2[a[i].y]++;
                coun++;
                ans+=a[i].c;
                if(size[x]>size[y])
                {
                    size[x]+=size[y];
                    pred[y]=x;
                }
                else
                {
                    size[y]+=size[x];
                    pred[x]=y;
                }
            }
        }
    }
    if(coun<n-1)
        printf("-1\n");
    else
        printf("%d\n",ans);
    return 0;
}
