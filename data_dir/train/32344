#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>
#include <random>
#include <bitset>
#include <iomanip>


typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define debug(x) cout << #x << " = "  << x << endl

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n;
	while (cin >> n)
	{
		vector<tint> grado(n,0);
		vector<tint> p(n);
		forn(i,n-1)
		{
			cin >> p[i+1];
			p[i+1]--;
			grado[p[i+1]]++;
		}
		vector<tint> leafsChild (n,0);
		forn(i,n)
			if (grado[i] == 0)
				leafsChild[p[i]]++;
		
		bool isSpruce = true;	
		forn(i,n)
			if (grado[i] > 0)
				isSpruce &= (leafsChild[i] >= 3);
		if (isSpruce)
			cout << "Yes\n";
		else
			cout << "No\n";
	}
	return 0;
}



