#include <bits/stdc++.h>

using namespace std;

const int N = 110;

int n, m, k;
int a[N][N];
int dp[N][N];
int nd[N];
int cnt0[N];

int check(int p, int q) {
  int cnt = 0;
  for (int i = 0; i < m; ++i) {
    if (a[p][i] != a[q][i]) {
      cnt++;
    }
  }
  return cnt;
}

void solvelarge() {
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      nd[i] += min(m - dp[i][j], dp[i][j]);
    }
  }
  int mn = k + 1;
  for (int i = 0; i < n; ++i) {
    mn = min(mn, nd[i]);
  }
  if (mn > k)
    puts("-1");
  else
    printf("%d\n", mn);
}

int get(int msk) {
  memset(cnt0, 0, sizeof(cnt0));
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      if (msk >> i & 1) {
        if (a[i][j]) {
          cnt0[j]++;
        }
      }
      else {
        if (!a[i][j]) {
          cnt0[j]++;
        }
      }
    }
  }
  int res = 0;
  for (int i = 0; i < m; ++i) {
    res += min(cnt0[i], n - cnt0[i]);
  }
  return res;
}

void solvesmall() {
  int mn = k + 1;
  for (int msk = 0; msk < (1 << n); ++msk) {
    mn = min(mn, get(msk));
  }
  if (mn > k)
    puts("-1");
  else
    printf("%d\n", mn);
}

int main() {
  scanf("%d%d%d", &n, &m, &k);
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      scanf("%d", a[i] + j);
    }
  }
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      dp[i][j] = check(i, j);
    }
  }
  if (n > k + 1) {
    solvelarge();
  }
  else {
    solvesmall();
  }
  return 0;
}
