//#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
          
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
          
using namespace std;
using namespace __gnu_pbds;
          
//#define int long long
 
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
          
using matrix = vector<vector<ll>>;
template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
          
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
          
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("nenokku.in", "r", stdin);
    //freopen("nenokku.out", "w", stdout);
    #endif
}   
 
const int MAXN = 2e5 + 100;
int d[MAXN], arr[MAXN];

signed main() {
    FAST_IO();
    int n;
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> d[i];
    }
    vector<int> order(n);
    iota(all(order), 1);
    sort(all(order), [&](int a, int b) {
        return d[a] > d[b];
    });
    vector<pii> ans;
    arr[0] = 2 * order[0];
    arr[d[order[0]]] = 2 * order[0] + 1;
    int cur = 1, pos = n;
    for (int i = 1; i < n; ++i) {
        cur += d[order[i - 1]] - d[order[i]];
        if (cur >= d[order[0]]) {
            pos = i;
            break;
        }
        arr[cur] = 2 * order[i];
        arr[cur + d[order[i]]] = 2 * order[i] + 1;
        cur++;
    }
    for (int i = d[order[0]]; i >= 0; --i) {
        if (arr[i] != 0) {
            continue;
        }
        arr[i] = 2 * order[pos];
        ans.emplace_back(arr[i + d[order[pos]] - 1], 2 * order[pos] + 1);
        pos++;
    }
    while (pos < n) {
        ans.emplace_back(arr[0], 2 * order[pos]);
        if (d[order[pos]] == 1) {
            ans.emplace_back(2 * order[pos], 2 * order[pos] + 1);
        }
        else {
            ans.emplace_back(arr[d[order[pos]] - 2], 2 * order[pos] + 1);
        }
        pos++;
    }
    for (int i = 1; i <= MAXN; ++i) {
        if (arr[i] == 0) {
            break;
        }
        ans.emplace_back(arr[i - 1], arr[i]);
    }
    for (auto &[x, y] : ans) {
        cout << x - 1 << ' ' << y - 1 << '\n';
    }
}