#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 30;
const int MOD = 1e9 + 7;

int main() {
  int n;
  scanf("%d", &n);
  vector<int> p(n);
  for (int i = 0; i < n; ++i) scanf("%d", &p[i]);
  set<int> A[3], B[3];
  for (int i = 0; i < n; ++i) {
    int x;
    scanf("%d", &x);
    --x;
    A[x].insert(p[i]);
  }
  for (int i = 0; i < n; ++i) {
    int x;
    scanf("%d", &x);
    --x;
    B[x].insert(p[i]);
  }
  int m;
  scanf("%d", &m);
  vector<int> ret(m);
  for (int i = 0; i < m; ++i) {
    int x;
    scanf("%d", &x);
    --x;
    if (!A[x].empty() && !B[x].empty()) {
      int cur = min(*A[x].begin(), *B[x].begin());
      for (int j = 0; j < 3; ++j) {
        A[j].erase(cur);
        B[j].erase(cur);
      }
      ret[i] = cur;
    } else if (!A[x].empty()) {
      int cur = *A[x].begin();
      ret[i] = cur;
      for (int j = 0; j < 3; ++j) {
        A[j].erase(cur);
        B[j].erase(cur);
      }
    } else if (!B[x].empty()) {
      int cur = *B[x].begin();
      ret[i] = cur;
      for (int j = 0; j < 3; ++j) {
        A[j].erase(cur);
        B[j].erase(cur);
      }
    } else {
      ret[i] = -1;
    }
  }
  for (int i = 0; i < m; ++i) {
    printf("%d%c", ret[i], " \n"[i + 1 == m]);
  }
  return 0;
}
