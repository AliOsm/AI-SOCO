#include <iostream>
#include <iomanip>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>
 
using namespace std;
 
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define y1 __y1
#define sqr(x) ((x) * (x))
 
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
 
const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-9;
const ld pi = ld(3.1415926535897932384626433832795);
 
bool in(int i, int j, int n, int m)
{
    return i >= 1 && i <= n && j >= 1 && j <= m;
}
 
inline int myrand()
{
    return (rand() ^ (rand() << 15));
}
 
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
 
const int N = 1e5 + 555;

int a[N];
int dp[N];
int n;

inline bool read()
{
    if(!(cin >> n))
        return false;

    forn(i, n)
    {
        assert(scanf("%d", &a[i]) == 1);
    }

    return true;
}

inline void solve()
{
    int ans = 1;

    forn(i, n)
    {
        int val = a[i];
        int mx = 0;
        for(int j = 2; j * j <= val; j++)
        {
            if(val % j == 0)
            {
                while(val % j == 0)
                {
                    val /= j;
                }

                mx = max(mx, dp[j] + 1);
            }
        }
        
        if(val > 1)
        {
            mx = max(mx, dp[val] + 1);
        }


        val = a[i];

        for(int j = 2; j * j <= val; j++)
        {
            if(val % j == 0)
            {
                while(val % j == 0)
                {
                    val /= j;
                }

                dp[j] = mx;
            }
        }
        
        if(val > 1)
        {
            dp[val] = mx;
        }
    }

    forn(i, N)
    {
        ans = max(ans, dp[i]);
    }

    cout << ans << endl;
    return;
}
 
int main(){
#ifdef _DEBUG
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
 
    cout << setprecision(15) << fixed;
    cerr << setprecision(10) << fixed;
 
    srand(int(time(NULL)));
 
    assert(read());
    solve();
 
    cerr << "TIME == " << clock() << " ms" << endl;
    return 0;
}