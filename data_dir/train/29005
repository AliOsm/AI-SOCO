#pragma GCC optimize("Ofast")
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;
using namespace std;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define PI 3.1415926535897932384626433832795
typedef tree<pair<int,int>,null_type,less<pair<int,int> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
long long MOD = 1e9+7;
pair<int,int> dx[4] = {{1,0},{-1,0},{0,1},{0,-1}};
const int RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
struct chash {int operator()(int x) const { return x ^ RANDOM; }};
string toString(long long x){stringstream ss;ss << x;string str = ss.str();return str;}
long long fastpow(long long x,long long k){if(!k)return 1;if(k & 1)return ((x * fastpow(x,k-1) % MOD) % MOD) % MOD;
long long ans = fastpow(x,k/2);ans %= MOD;ans *= ans;ans %= MOD;return ans;}
long long sumF(long long x){int s = 0;while(x)s += x%10,x /= 10;return s;}
bool isS(char c){return (c >= 'a' && c <= 'z');}
bool isB(char c){return (c >= 'A' && c <= 'Z');}
bool isD(char c){return (c >= '0' && c <= '9');}
bool isSqrt(long long x){ long long f = sqrt((long double)x + 0.5); return f*f == x;}
long long lcm(long long a,long long b){return a * (b / __gcd(a,b));}
class hashFunc
{
    public:
        string s;
        vector<long long> prefixHash;
        vector<long long> suffixHash;
        vector<long long> hashPower;
        long long MOD;
        long long p;
        hashFunc(string S,long long mod,long long P)
        {
            s = S;
            MOD = mod;
            p = P;
            hashPower.resize(s.length()+1);
            hashPower[0] = 1;
            for(int i = 1;i < hashPower.size();i++)
                hashPower[i] = (hashPower[i-1] * p) % MOD;
            prefixHash.resize(s.length());
            long long curSum = 0;
            for(int i = 0;i < s.length();i++)
                curSum = ((curSum * p) % MOD + (s[i])) % MOD,prefixHash[i] = curSum;
            suffixHash.resize(s.length());
            curSum = 0;
            for(int i = s.length()-1;i >= 0;i--)
                curSum = ((curSum * p) + (s[i])) % MOD,suffixHash[s.length() - i - 1] = curSum;
        }
        long long getHash(int l,int r,bool isSuffix)
        {
            if(!isSuffix)
            {
                long long enddy = prefixHash[r] % MOD;
                long long starto = (l ? prefixHash[l-1] : 0);
                starto = (starto * hashPower[r-l+1]) % MOD;
                return (((enddy - starto) % MOD) + MOD) % MOD;
            } else
            {
                r = s.length() - r - 1;
                l = s.length() - l - 1;
                if(l > r)
                    swap(l,r);
                long long enddy = suffixHash[r];
                long long starto = (l ? suffixHash[l-1] : 0);
                starto = (starto * hashPower[r-l+1]) % MOD;
                return (((enddy - starto) % MOD) + MOD) % MOD;
            }
        }
};
vector<int> endF[5005];
vector<pair<int,int> > queries[5005];
int ans[1000005];
int main()
{
    IO;
    int n;
    cin >> n;
    string s;
    cin >> s;
    vector<int> arr(10);
    for(int i = 1;i < 10;i++)
        cin >> arr[i];
    for(int i = 0;i < n;i++)
    {
        if(arr[s[i] - '0'] > s[i] - '0')
        {
            int j = 0;
            for(j = i;j < n;j++)
            {
                if(arr[s[j] - '0'] >= s[j] - '0')
                {
                    cout << (char)(arr[s[j] - '0'] + '0');
                    continue;
                }
                break;
            }
            for(;j < n;j++)
                cout << s[j];
            return 0;
        }
        cout << s[i];
    }
    return 0;
}
