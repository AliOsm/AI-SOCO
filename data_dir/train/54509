#include<iostream>
#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
vector< complex<ll> > v ;
complex<ll> cntr;
int n ;
ll cp(complex<ll> a, complex<ll> b)
{
    return a.real() * b.imag() - a.imag() * b.real();
}
bool sort_ccw(complex<ll> a, complex<ll> b)
{
    a-=cntr;
    b-=cntr;
    if(cp(a,b) == 0)
    {
        if(a.imag() == b.imag())
            return a.real() < b.real();
        return a.imag() < b.imag();
    }
    return cp(a, b) > 0;
}
map<pair<int,int>,int > id;
int main()
{
    IO
    cin>>n;
    for(int i=0; i<n; i++)
    {
        int x, y ;
        cin>>x>>y;
        v.push_back({x,y});
        id[ {x,y}]=i+1;
    }
    for(int i=1; i<v.size(); i++)
        if(v[i].imag()<v[0].imag() ||
                (v[i].imag()==v[0].imag() && v[i].real()<v[0].real()))
            swap(v[i],v[0]);
    cntr = v[0];
    sort(v.begin()+1, v.end(), sort_ccw);
    for(int i=2; i<v.size(); i++)
        if(cp(v[1]-v[0],v[i]-v[0]))
        {
            cout<<id[ {v[0].real(),v[0].imag()}]<<" ";
            cout<<id[ {v[1].real(),v[1].imag()}]<<" ";
            cout<<id[ {v[i].real(),v[i].imag()}]<<" ";
            break;
        }
}