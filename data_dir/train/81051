#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
typedef  long long ll;
typedef  vector<int> vi;
typedef  pair<int,int> pii;
typedef  pair<int,string> pis;
double   pi=3.1415926535898;
#define speed      ios::sync_with_stdio(false);cin.tie(NULL); cout.tie(NULL);
#define lop(i,n)   for(int i=0;i<int(n);i++)
#define ff(i,a,b)  for(int i=a;i<=int(b);i++)
#define fr(i,a,b)  for(int i=a;i>=int(b);i--)
#define ms(x,a)    memset(x,a,sizeof(x))
#define all(x)     (x).begin(),(x).end()
#define sz(x)      int(x.size())
#define pb         push_back
#define x          first
#define y          second       //  __builtin_popcount;
//freopen("input.txt","r",stdin),freopen("output.txt","w",stdout);
string ys = "YES\n";
string no = "NO\n" ;
const double EPS = 1e-6;
const int inf = 1e9+1;
const ll M  = 1e9+7 ;
const int N = 100100;
/////  for (int i= -inf ; i < inf ; i++)   Hi  :P

int n;
int w[N];
int h[N];
int mem[N][3];
bool dp (int i,int j)
{
    if (i >= n)
        return 1;

    int &r = mem[i][j];

    if (r != -1)
        return r;
    r = 0;

    if (j == 0)
    {
        if (h[i] <= h[i-1])
        {
            r |= dp(i+1,0);
        }
        if (w[i] <= h[i-1])
        {
            r |= dp(i+1,1);
        }
    }
    else
    {
        if (h[i] <= w[i-1])
        {
            r |= dp(i+1,0);
        }
        if (w[i] <= w[i-1])
        {
            r |= dp(i+1,1);
        }
    }
    return r;
}
int main()
{
    speed;
    cin >> n;
    ff(i,0,n-1) cin >> w[i] >> h[i];
    ms(mem,-1);
    bool ok = dp(1,0);
    ok|= dp(1,1);
    if (ok) cout << ys;
    else cout << no;
    return 0;
}





















