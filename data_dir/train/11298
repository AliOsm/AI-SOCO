#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <cstdio>
#include <map>
#include <unordered_map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <unordered_set>
#include <stack> 
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
#define sz(a) (int)a.size()
#define pb push_back
const int MAXN = 100 * 1000 + 10;
const double EPS = 1e-9;
typedef long long LL;
const LL MOD = 1000 * 1000 * 1000 + 7;

int parent[MAXN];
LL c[MAXN];

void add(int v, LL value){
	parent[v] = v;
	c[v] = value;
}

int get_parent(int v){
	if (parent[v] == v) return v;
	return parent[v] = get_parent(parent[v]);
}

LL unite(int a, int b){
	a = get_parent(a);
	b = get_parent(b);
	if (a == b) c[a];
	if (c[a] > c[b]){
		parent[b] = a;
		c[a] += c[b];
	}
	else{
		parent[a] = b;
		c[b] += c[a];
	}

	return max(c[a], c[b]);
}

int main(int argc, char* argv[]) {

#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("numbers.in", "r", stdin); freopen("numbers.out", "w", stdout);
#endif
	ios::sync_with_stdio(0);
	mems(parent, -1);
	int n;
	scanf("%d", &n);
	vector<int> a(n);
	vector<int> p(n);
	forn(i, 0, n)scanf("%d", &a[i]);
	forn(i, 0, n)scanf("%d", &p[i]);

	LL maxi = 0;
	vector<LL> answer;
	for (int i = p.size() - 1; i >=0; --i){
		answer.push_back(maxi);
		int pos = p[i] - 1;
		add(pos, a[pos]);
		maxi = max(maxi, (LL)a[pos]);
		if (pos > 0 && parent[pos - 1] != -1){
			maxi = max(maxi, unite(pos, pos - 1));
		}
		if (pos < n - 1 && parent[pos + 1] != -1){
			maxi = max(maxi, unite(pos, pos + 1));
		}
	}

	reverse(all(answer));
	forn(i, 0, n)cout << answer[i] << endl;;

	return 0;
}