#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
using namespace std;
#define ll long long
#define MOD 1000000009
ll power(ll a,ll b, ll m=MOD)
{
    ll res=1;
    while(b>0)
    {
        if(b&1)
            res=(res*a)%m;
        a=(a*a)%m;
        b>>=1;
    }
    return res;
}
ll inverse(ll a,ll m=MOD)
{
    return power(a,m-2,m);
}
#define INFl 1e18
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<long long>
#define vvl vector<vl>
#define ii pair<int,int>
#define pll pair<ll,ll>
#define vii vector<ii>
#define F first
#define S second
#define forl(i,n) for(int i=0;i<n;i++)
#define fore(i,n) for(int i=1;i<=n;i++)
#define rforl(i,n)  for(int i=n-1;i>=0;i--)
#define rfore(i,n)  for(int i=n;i>=1;i--)
#define INF 1100000009
#define gcd(a,b) __gcd(a,b)
#define all(x)  x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define print(x)    for(auto it=x.begin();it!=x.end();it++) cout<<*it<<' '; cout<<endl;
#define printii(x)  for(auto it=x.begin();it!=x.end();it++) cout<<it->F<<' '<<it->S<<endl;  
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
const int MAX=200005;
const int SHIFT=150000;
int bit[MAX];
struct query{
    int idx,k;
    query(){}
    query(int x,int y)
    {
        idx=x;
        k=y;
    }
};
vvi g;
vi st,ft,sz,big,color,ver;
int cur=0;
vector<vector<query>> queries;
vi res;
vi cnt;
void upd(int x,int c)
{
    for(;x<MAX;x+=x&-x)
        bit[x]+=c;
}
int _query(int x)
{
    int sum=0;
    for(;x>0;x-=x&-x)
        sum+=bit[x];
    return sum;
}
void add(int c)
{
    int tt=SHIFT-cnt[c];
    upd(tt,-1);
    cnt[c]++;
    tt--;
    upd(tt,1);
}
void del(int c)
{
    int tt=SHIFT-cnt[c];
    upd(tt,-1);
    cnt[c]--;
    tt++;
    upd(tt,1);
}
int get(int c)
{
    int tt=SHIFT-c;
    return _query(tt);
}
void dfs(int u,int p)
{
    ver.pb(u);
    st[u]=cur++;
    sz[u]=1;
    int mx=0;
    for(int v:g[u])
    {
        if(v==p)    continue;
        dfs(v,u);
        sz[u]+=sz[v];
        if(sz[v]>mx)
        {
            big[u]=v;
            mx=sz[v];
        }
    }
    ft[u]=cur;
}
void dsutree(int u,int p,bool keep)
{
    for(int v:g[u])
    {
        if(v==p || v==big[u])
            continue;
        dsutree(v,u,false);
    }
    if(big[u]!=-1)
        dsutree(big[u],u,true); 
    for(int v:g[u])
    {
        if(v==p||v==big[u]) continue;
        for(int i=st[v];i<ft[v];i++)
        {
            int c=color[ver[i]];
            add(c);
        }
    }
    add(color[u]);
    // cout<<"START:"<<u<<endl;  
    // fore(i,3)   cout<<cnt[i]<<' ';
    // cout<<endl;
    forl(i,queries[u].size())
    {
        query q=queries[u][i];
        int idx=q.idx;
        int k=q.k;
        res[idx]=get(k);
        // cout<<idx<<' '<<k<<' '<<res[idx]<<endl;
    }
    if(!keep)
    {
        for(int i=st[u];i<ft[u];i++)
        {
            int c=color[ver[i]];
            del(c);
        }
    }
}
int main()
{
    fastio;
    int n,m;
    cin>>n>>m;
    cnt.resize(100005);
    st.resize(n);
    ft.resize(n);
    color.resize(n);
    sz.resize(n);
    big.assign(n,-1);
    g.resize(n);
    queries.resize(n);
    res.resize(m);
    forl(i,n)   cin>>color[i];
    forl(i,n-1)
    {
        int u,v;
        cin>>u>>v;
        u--;v--;
        g[u].pb(v);
        g[v].pb(u);
    }
    dfs(0,-1);
    forl(i,m)
    {
        int v,k;
        cin>>v>>k;
        v--;
        queries[v].pb(query(i,k));
    }
    dsutree(0,-1,1);
    for(int x:res)
    {
        cout<<x<<endl;
    }
}