#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>
#include <chrono>

using namespace std;
using ll = long long;
using ull = unsigned long long;
mt19937 rnd(std::chrono::steady_clock::now().time_since_epoch().count());

struct P {
  int l, r, id;
  P(): l{0}, r{0}, id{0} {};

  bool operator< (const P& other) const {
    if (l != other.l) {
      return l < other.l;
    }
    return r < other.r;
  }
};

inline void solve() {
  int n;
  cin >> n;
  vector<P> seg(n);
  for(int i = 0; i < n; ++i) {
    seg[i].id = i;
    cin >> seg[i].l >> seg[i].r;
  }
  sort(seg.begin(), seg.end());

  vector<int> ans(n, -1);
  ans[seg[0].id] = 1;
  int maxr = seg[0].r;
  bool passed = false;
  for(int i = 1; i < n; ++i) {
    if (passed) {
      ans[seg[i].id] = 2;
      continue;
    }
    if (seg[i].l <= maxr) {
      ans[seg[i].id] = 1;
      maxr = max(maxr, seg[i].r);
    } else {
      passed = true;
      ans[seg[i].id] = 2;
    }
  }

  if (passed) {
    for(auto i : ans) {
      cout << i << " ";
    }
  } else {
    cout << -1;
  }
  cout << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int T;
  cin >> T;
  for(int tc = 0; tc < T; ++tc) {
    solve();
  }
  return 0;
}
