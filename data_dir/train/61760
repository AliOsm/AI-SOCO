/*
         --┬--  |     |  --┬--                |       |
           |    |\    |    |                  |       |
           |    | \   |    |     ----->       |       |
           |    |  \  |    |                  |       |
           |    |   \ |    |                  |       |
         --┴--  |    \|    |                  └----   └----

*/

// #define pragma

#ifdef pragma
#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC diagnostic ignored "-Wunused-result"
#endif // pragma

#include<bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define ll long long
#define all(x) begin(x), end(x)
#define pb push_back
#define x first
#define y second
#define int long long
#define zero(x) memset(x, 0, sizeof(x))

using namespace std;
using namespace __gnu_pbds;


typedef vector<int> vi;
typedef vector<bool> vb;
typedef pair<int, int> pii;
typedef long double ld;
typedef vector<vi> matrix;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int INF = 1e9 + 7;
const int MAXN = 1e6 + 7;
const ld EPS = 1e-6;
const ld PI = atan2(0, -1);

void seriy() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cout << fixed << setprecision(10);
    #ifdef _android
        freopen("input", "r", stdin);
        freopen("output", "w", stdout);
    #endif
}

#define FAST_ALLOCATOR_MEMORY 50000000

#ifdef FAST_ALLOCATOR_MEMORY
int allocator_pos = 0;
char allocator_memory[(int)FAST_ALLOCATOR_MEMORY];
inline void * operator new ( size_t n ) {
    char *res = allocator_memory + allocator_pos;
    allocator_pos += n;
    assert(allocator_pos <= (int)FAST_ALLOCATOR_MEMORY);
    return (void *)res;
}
inline void operator delete ( void * ) noexcept { }
inline void * operator new [] ( size_t ) { assert(0); }
inline void operator delete [] ( void * ) { assert(0); }
#endif

/** Fast input-output */

template <class T = int> inline T readInt();
inline double readDouble();
inline int readUInt();
inline int readChar(); // first non-blank character
inline void readWord( char *s );
inline bool readLine( char *s ); // do not save '\n'
inline bool isEof();
inline int getChar();
inline int peekChar();
inline bool seekEof();
inline void skipBlanks();

template <class T> inline void writeInt( T x, char end = 0, int len = -1 );
inline void writeChar( int x );
inline void writeWord( const char *s );
inline void writeDouble( double x, int len = 0 );
inline void flush();

static struct buffer_flusher_t {
    ~buffer_flusher_t() {
        flush();
    }
} buffer_flusher;

/** Read */

static const int buf_size = 4096;

static unsigned char buf[buf_size];
static int buf_len = 0, buf_pos = 0;

inline bool isEof() {
    if (buf_pos == buf_len) {
        buf_pos = 0, buf_len = fread(buf, 1, buf_size, stdin);
        if (buf_pos == buf_len)
            return 1;
    }
    return 0;
}


inline int getChar() {
    return isEof() ? -1 : buf[buf_pos++];
}

inline int peekChar() {
    return isEof() ? -1 : buf[buf_pos];
}

inline bool seekEof() {
    int c;
    while ((c = peekChar()) != -1 && c <= 32)
        buf_pos++;
    return c == -1;
}

inline void skipBlanks() {
    while (!isEof() && buf[buf_pos] <= 32U)
        buf_pos++;
}

inline int readChar() {
    int c = getChar();
    while (c != -1 && c <= 32)
        c = getChar();
    return c;
}

inline int readUInt() {
    int c = readChar(), x = 0;
    while ('0' <= c && c <= '9')
        x = x * 10 + c - '0', c = getChar();
    return x;
}

template <class T>
inline T readInt() {
    int s = 1, c = readChar();
    T x = 0;
    if (c == '-')
        s = -1, c = getChar();
    else if (c == '+')
        c = getChar();
    while ('0' <= c && c <= '9')
        x = x * 10 + c - '0', c = getChar();
    return s == 1 ? x : -x;
}

inline double readDouble() {
    int s = 1, c = readChar();
    double x = 0;
    if (c == '-')
        s = -1, c = getChar();
    while ('0' <= c && c <= '9')
        x = x * 10 + c - '0', c = getChar();
    if (c == '.') {
        c = getChar();
        double coef = 1;
        while ('0' <= c && c <= '9')
            x += (c - '0') * (coef *= 1e-1), c = getChar();
    }
    return s == 1 ? x : -x;
}

inline void readWord( char *s ) {
    int c = readChar();
    while (c > 32)
        *s++ = c, c = getChar();
    *s = 0;
}

inline bool readLine( char *s ) {
    int c = getChar();
    while (c != '\n' && c != -1)
        *s++ = c, c = getChar();
    *s = 0;
    return c != -1;
}

/** Write */

static int write_buf_pos = 0;
static char write_buf[buf_size];

inline void writeChar( int x ) {
    if (write_buf_pos == buf_size)
        fwrite(write_buf, 1, buf_size, stdout), write_buf_pos = 0;
    write_buf[write_buf_pos++] = x;
}

inline void flush() {
    if (write_buf_pos)
        fwrite(write_buf, 1, write_buf_pos, stdout), write_buf_pos = 0;
}

template <class T>
inline void writeInt( T x, char end, int output_len ) {
    if (x < 0)
        writeChar('-'), x = -x;

    char s[24];
    int n = 0;
    while (x || !n)
        s[n++] = '0' + x % 10, x /= 10;
    while (n < output_len)
        s[n++] = '0';
    while (n--)
        writeChar(s[n]);
    if (end)
        writeChar(end);
}

inline void writeWord( const char *s ) {
    while (*s)
        writeChar(*s++);
}

inline void writeDouble( double x, int output_len ) {
    if (x < 0)
        writeChar('-'), x = -x;
    int t = (int)x;
    writeInt(t), x -= t;
    writeChar('.');
    for (int i = output_len - 1; i > 0; i--) {
        x *= 10;
        t = std::min(9LL, (int)x);
        writeChar('0' + t), x -= t;
    }
    x *= 10;
    t = std::min(9LL, (int)(x + 0.5));
    writeChar('0' + t);
}

const int MAX_N = 1e6 + 47, MAX_M = 2e5 + 47;

int n, k, m, ans;

struct segment
{
    int l, r, c, p, id;
    const bool operator < (segment b) const
    {
        return p < b.p;
    }
};

struct vertex
{
    int sum_n, sum_v;
    vertex(int new_sum_n, int new_sum_v)
    {
        sum_n = new_sum_n;
        sum_v = new_sum_v;
    };
    vertex(){};
};

vertex t[MAX_M * 4];

void update(int v, int tl, int tr, int pos, int sum_n, int sum_v)
{
    if (tl == tr)
    {
        t[v].sum_n = sum_n;
        t[v].sum_v = sum_v;
        return;
    }
    int tm = (tl + tr) >> 1;
    if (tm >= pos) update(v << 1, tl, tm, pos, sum_n, sum_v);
    else update(v << 1 | 1, tm + 1, tr, pos, sum_n, sum_v);
    t[v].sum_n = t[v << 1].sum_n + t[v << 1 | 1].sum_n;
    t[v].sum_v = t[v << 1].sum_v + t[v << 1 | 1].sum_v;
}

vertex get_sum(int v, int l, int r, int tl, int tr)
{
    if (tl > r || tr < l) return vertex(0, 0);
    if (tl >= l && tr <= r) return t[v];
    int tm = (tl + tr) >> 1;
    vertex q1 = get_sum(v << 1, l, r, tl, tm), q2 = get_sum(v << 1 | 1, l, r, tm + 1, tr);
    return vertex(q1.sum_n + q2.sum_n, q1.sum_v + q2.sum_v);
}

pair<int, int> get_kek(int v, int l, int r, int tl, int tr, int must)
{
    if (tl > r || tr < l || t[v].sum_n < must) return {-47, -47};
    if (tl == tr) return {t[v].sum_v, tl};
    int tm = (tl + tr) >> 1;
    if (t[v * 2].sum_n >= must)
    {
        pair<int, int> q1 = get_kek(v * 2, l, r, tl, tm, must);
        if (q1.first == -47) return {t[v].sum_v, tr};
        return q1;
    }
    else
    {
        pair<int, int> q2 = get_kek(v * 2 + 1, l, r, tm + 1, tr, must - t[v * 2].sum_n);
        return {t[v * 2].sum_v + q2.first, q2.second};
    }
}

signed main() {
    seriy();
    n = readInt(), k = readInt(), m = readInt();
    vector<segment> a(m);
    vector<vector<int>> open(n), close(n);
    for (int i = 0; i < m; i++) a[i].l = readInt(), a[i].r = readInt(), a[i].c = readInt(), a[i].p = readInt(), a[i].l--, a[i].r--, a[i].id = i;
    sort(all(a));
    for (int i = 0; i < m; i++) open[a[i].l].push_back(i), close[a[i].r].push_back(i);
    for (int i = 0; i < n; i++)
    {
        for (int z = 0; z < open[i].size(); z++)
        {
            int j = open[i][z];
            update(1, 0, m - 1, j, a[j].c, a[j].p * a[j].c);
        }
        if (get_sum(1, 0, m - 1, 0, m - 1).sum_n < k)
        {
            ans += get_sum(1, 0, m - 1, 0, m - 1).sum_v;
        }
        else
        {
            int l = get_kek(1, 0, m - 1, 0, m - 1, k).second;
            if (get_sum(1, 0, l, 0, m - 1).sum_n >= k)
            {
                vertex one = get_sum(1, 0, l, 0, m - 1);
                int sum_n = one.sum_n;
                int sum_n_0 = (l > 0 ? get_sum(1, 0, l - 1, 0, m - 1).sum_n : 0);
                int ost = (k - sum_n_0);
                ost = a[l].c - ost;
                int sum = one.sum_v - ost * a[l].p;
                ans += sum;
            }
        }
        for (int z = 0; z < close[i].size(); z++)
        {
            int j = close[i][z];
            //cout << "kek\n";
            update(1, 0, m - 1, j, 0, 0);
        }
    }
    writeInt<ll>(ans);
    return 0;
}
