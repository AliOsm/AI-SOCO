#include<bits/stdc++.h>
using namespace std;
struct node
{
    node* bara[26];
    node()
    {
        int i;
        for(i = 0; i < 26; i++)
            bara[i] = NULL;
    }
}*root;
map<string, int>ma;
int dp[200005][2];
void ins(string str)
{
    int i, j, k;
    node* cur = root;
    for(i = 0; i < str.size(); i++)
    {
        if(cur->bara[str[i]-'a'] == NULL)
            cur->bara[str[i]-'a'] = new node;
        cur = cur->bara[str[i]-'a'];
    }
    return;
}
int cnt(node* cur, string str, int mark)
{
    int i, j = 0, k, p = 0;
    k = ma[str];
    if(dp[k][mark] != -1)
        return dp[k][mark];
    for(i = 0; i < 26; i++)
    {
        if(cur->bara[i])
        {
            p++;
            str.push_back('a'+i);
            j |= !cnt(cur->bara[i], str, mark);
            str.pop_back();
        }
    }
    if(!p)
        j = mark;
    dp[k][mark] = j;
    return j;
}
void del(node* cur)
{
    int i;
    for(i = 0; i < 26; i++)
    {
        if(cur->bara[i])
            del(cur->bara[i]);
    }
    delete(cur);
    return;
}
int main()
{
    int n, i, j, k, p, q, x, y;
    string str, temp;
    root = new node;
    scanf("%d %d", &n, &k);
    ma[""] = 0;
    x = 1;
    while(n--)
    {
        cin>>str;
        temp = "";
        for(i = 0; i < str.size(); i++)
        {
            temp += str[i];
            if(ma.find(temp) == ma.end())
                ma[temp] = x++;
        }
        ins(str);
    }
    memset(dp, -1, sizeof(dp));
    p = cnt(root, "", 0);
    q = cnt(root, "", 1);
    if(p && q)
        puts("First");
    else if(p && !q)
        puts((k%2)? "First": "Second");
    else
        puts("Second");
    del(root);
    return 0;
}
