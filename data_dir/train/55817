#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 7;

vector <int> adj[N][2][2];

int color[N];

int dfs(int u, int c) {
        color[u] = c;
        for(int v: adj[u][c][1]) {
                if(color[v]  == -1) {
                        if(!dfs(v, 1)) {
                                return 0;
                        }
                }
                else if(color[v] != 1) return 0;
        }
        for(int v: adj[u][c][0]) {
                if(color[v]  == -1) {
                        if(!dfs(v, 0)) {
                                return 0;
                        }
                }
                else if(color[v] != 0) return 0;
        }
        return 1;
}

int main() {
        ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0);


        memset(color, -1, sizeof color);
        int n, m; cin >> n >> m;
        vector <int> Initial(n + 1, 0);
        for(int i = 1; i <= n; i++) {
                cin >> Initial[i];
        }
        vector <int> D[N];
        for(int i = 1; i <= m; i++) {
                int k; cin >> k;
                for(int j = 1; j <= k; j++) {
                        int x; cin >> x;
                        D[x].push_back(i);
                }
        }
        for(int i = 1; i <= n; i++) {
                if(Initial[i]) {
                        adj[D[i][0]][0][0].push_back(D[i][1]);
                        adj[D[i][0]][1][1].push_back(D[i][1]);
                        adj[D[i][1]][0][0].push_back(D[i][0]);
                        adj[D[i][1]][1][1].push_back(D[i][0]);
                }else {
                        adj[D[i][0]][0][1].push_back(D[i][1]);
                        adj[D[i][0]][1][0].push_back(D[i][1]);
                        adj[D[i][1]][0][1].push_back(D[i][0]);
                        adj[D[i][1]][1][0].push_back(D[i][0]);
                }
        }

        int flag = 1;

        for(int i = 1; i <= m; i++) {
                if(~color[i]) continue;
                if(dfs(i, 0)) continue;
                memset(color, -1, sizeof color);
                if(dfs(i, 1)) continue;
                flag = 0;
                break;

        }
        if(flag) cout << "YES\n";
        else     cout << "NO\n";
}
