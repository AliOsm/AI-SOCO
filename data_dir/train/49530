#include <iostream>
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;

#define pb push_back
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-9
#define BASE 53ll
#define ld long double
#define MAX 1000000000
#define NIL 0
#define INF -1e18-1e10
#define infi 1e16
#define rd(a) scanf("%d",&a)
#define rd2(a,b) scanf("%d %d",&a,&b)
#define rd3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define rdll(a) scanf("%I64d",&a)
#define sz(a) (int) a.size()
#define lp(i,a,n) for(int i=(a); i<=(n) ; ++i)
#define lpd(i,n,a) for(int i=(n); i>=(a) ; --i)
#define pi acos(-1)

typedef complex<double>CX;
typedef pair<int,int>ii;
typedef pair<int,ii>edge;
typedef pair<vector<int>,int>vii;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int N=200005;


ll mod=1000000009;
ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='y')return 1;return 0;}
ld getDistance(ld x1,ld y1,ld x2,ld y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}
ll extended_euclidean(ll a,ll b,ll &x,ll &y){if(b==0){x=1;y=0;return a;}ll g = extended_euclidean(b,a%b,y,x);y -= (a/b)*x;return g;}
ll power(ll base,ll p){if(p==1)return base;if(!p)return 1ll;ll ret=power(base,p/2);ret*=ret;ret%=mod;if(p&1)ret*=base;return ret%mod;}
ii vec(ii a,ii b){ii ret=ii(a.F-b.F,a.S-b.S);return ret;}
ll getArea(ii a,ii b,ii c){ii x=vec(a,b);ii y=vec(c,b);return abs(x.F*y.S-x.S*y.F);}

map<int,int>mp;
int main() {
//  freopen("test.in","r",stdin);
  int n;
  rd(n);
  vector<ii>v(n);
  lp(i,1,n){
      rd(v[i-1].F);
      mp[v[i-1].F]++;
  }
  set<ii>st(v.begin(),v.end());
  v.assign(st.begin(),st.end());
  lp(i,0,(int)v.size()-1){
     v[i].S=mp[v[i].F];
  }
  int mx=0;
  lp(i,0,n-1){
     mx=max(mx,v[i].S);
     for(ll j=1;j<=2e9;j*=2){
         int sum=v[i].S;
         vector<ii>::iterator it1=lower_bound(v.begin(),v.end(),ii(v[i].F+j,0));
         vector<ii>::iterator it2=lower_bound(v.begin(),v.end(),ii(v[i].F-j,0));
         if(it1->F==v[i].F+j)sum+=it1->S;
         if(it2->F==v[i].F-j)sum+=it2->S;
         mx=max(mx,sum);
     }
  }
  cout<<mx<<endl;
  lp(i,0,n-1){
     if(mx==v[i].S){
        while(mx--){
            printf("%d ",v[i].F);
        }
        break;
     }
     for(ll j=1;j<=2e9;j*=2){
         int sum=v[i].S;
         vector<ii>::iterator it1=lower_bound(v.begin(),v.end(),ii(v[i].F+j,0));
         vector<ii>::iterator it2=lower_bound(v.begin(),v.end(),ii(v[i].F-j,0));
         if(it1->F==v[i].F+j)sum+=it1->S;
         if(it2->F==v[i].F-j)sum+=it2->S;
         if(sum==mx){
          if(it1->F==v[i].F+j)
            while(it1->S--)printf("%d ",it1->F);
            while(v[i].S--)printf("%d ",v[i].F);
          if(it2->F==v[i].F-j)
            while(it2->S--)printf("%d ",it2->F);
            return 0;
         }
     }
  }
  return 0;
}
