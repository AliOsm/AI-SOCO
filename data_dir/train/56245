#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <string>
#include <cstring>
// DON'T DIVIDE
// Greedy, Prefix, Sets/Bsearch, Dfs/bfs, DP
// Stack, Bitmask, Dsu
using namespace std;

int n, m, k;
const int MAXN = 20, MASK = (1 << 18);
long long a[MAXN], dp[MAXN][MASK], add[MAXN][MAXN];

int count(int x)
{
	int total = 0;
	while(x)
	{
		total += (x & 1);
		x >>= 1;
	}
	return total;
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> n >> m >> k;

	for(int i = 0; i < n; i++)
		cin >> a[i];

	for(int i = 0; i < k; i++)
	{
		int x, y;
		cin >> x >> y;
		cin >> add[x - 1][y - 1];
	}

	for(int i = 0; i < n; i++)
		dp[i][(1 << i)] = a[i];

	for(int m = 0; m < MASK; m++)
		for(int i = 0; i < n; i++)
			if(m & (1 << i))
			{
				for(int j = 0; j < n; j++)
					if((m & (1 << j)) == 0)
						dp[j][m | (1 << j)] = max(dp[j][m | (1 << j)], dp[i][m] + add[i][j] + a[j]);
			}
			

	long long ans = 0;
	for(int i = 0; i < n; i++)
		for(int j = 0; j < MASK; j++)
			if(count(j) == m)
				ans = max(ans, dp[i][j]);

	cout << ans << "\n";
	return 0;
}