#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;
const int N = 1000010;

inline int in() {int x; scanf("%d",&x); return x;}
inline ll lin() {ll x; scanf("%I64d",&x); return x;}

vector < int > G[N];

int root;
int p, q, tot;

int inp[N];

void go(int u, int par){
    int flag = 0, sum = inp[u];
    for(int i = 0; i < G[u].size(); i++){
        int v = G[u][i];
        if(v != par){
            flag = 1;
        }
    }
    if(flag == 0){
        if(sum == tot){
            if(p == -1){
                p = u;
            }else if(q == -1){
                q = u;
            }
            inp[u] = 0;
        }
        return ;
    }
    for(int i = 0; i < G[u].size(); i++){
        int v = G[u][i];
        if(v != par){
            go(v, u);
            inp[u] += inp[v];
        }
    }

    if(inp[u] == tot){
        if(p == -1){
            p = u;
        }else if(q == -1){
            q = u;
        }
        inp[u] = 0;
    }
}

void Solve(int root){
    tot /= 3;
    for(int i = 0; i < G[root].size(); i++){
        int v = G[root][i];
        //p = -1; q = -1;
        go(v, root);
        //cout << inp[v] << '\n';
        if(p != -1 && q != -1){
            return ;
        }
    }
}

int main(){
    int n = in();
    tot = 0;
    for(int i = 1; i <= n; i++){
        int u = in(), x = in();
        inp[i] = x;
        if(u != 0){
            G[i].pb(u);
            G[u].pb(i);
        }else if(u == 0){
            root = i;
        }

        tot += x;
    }

    if(tot % 3 != 0){
        printf("-1\n");
    }else {
        p = -1; q = -1;
        Solve(root);
        if(p != -1 && q != -1){
            printf("%d %d\n", p, q);
        }else {
            puts("-1");
        }
    }

    return 0;
}

/*
11
0 0
5 4
6 1
6 0
6 1
1 1
2 3
5 1
1 3
3 3
10 4
*/

