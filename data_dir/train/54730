
#include <bits/stdc++.h>

using namespace std;

int V, E;

vector<int> roots;
vector<int> ranks;
vector<int> cycles;

int getRoot(int pos) {
	if(pos != roots[pos]) roots[pos] = getRoot(roots[pos]);
	return roots[pos];
}

void setUnion(int pos1, int pos2) {
	int r1 = getRoot(pos1);
	int r2 = getRoot(pos2);
	if(r1 == r2) {
		cycles[r1] = 1;
		return;
	}
	if(ranks[r1] == ranks[r2]) {
		roots[r2] = roots[r1];
		cycles[r1] |= cycles[r2];
		ranks[r1] ++;
	}
	if(ranks[r1] > ranks[r2]) {
		roots[r2] = roots[r1];
		cycles[r1] |= cycles[r2];
	}
	else {
		roots[r1] = roots[r2];
		cycles[r2] |= cycles[r1];
	}
}

int main() {
	cin >> V >> E;
	for(int i = 0; i < V; i++) {
		roots.push_back(i);
		ranks.push_back(0);
		cycles.push_back(0);
	}

	for(int i = 0; i < E; i++) {
		int u, v; cin >> u >> v; u--, v--;
		setUnion(u, v);
	}
	set<int> visited;
	int ans = 0;
	for(int i = 0; i < V; i++) {
		int root = getRoot(i);
		if(cycles[root] == 0 && visited.find(root) == visited.end()) {
			ans ++;
			visited.insert(root);
		}
	}
	cout << ans << endl;

}
/*
4 3
2 1
1 3
4 3


*/


















