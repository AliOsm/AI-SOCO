#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

#define minimize(a, b) { a = min(a, b); }
#define maximize(a, b) { a = max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }

template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);

	next(int, n);
	
	vector<pair<int, int> > divs;
	
	int tmp = n;
	int up = 10 + sqrt(n);
	FOR (i, 2, up) if (tmp % i == 0) {
		if (divs.size() && divs.back().first == i) divs.back().second++;
		else divs.push_back(make_pair(i, 1));
		tmp /= i;
		i--;
	}
	if (tmp > 1) divs.push_back(make_pair(tmp, 1));
	if (!divs.size()) divs.push_back(make_pair(2, 0));
	
	int m = divs.size();
	vector<int> divisors;
	vector<int> cnt(m);
	while (true) {
		int res = 1;
		FOR (i, 0, m) FOR (j, 0, cnt[i]) res *= divs[i].first;
		divisors.push_back(res);
		
		FOR (i, 0, m)
			if (cnt[i] == divs[i].second) cnt[i] = 0;
			else {
				cnt[i]++;
				break;
			}
			
		if (accumulate(all(cnt), 0) == 0) break;
	}
	
	LL mn = LongMaxVal;
	LL mx = LongMinVal;
	
	for (auto a : divisors) for (auto b : divisors) {
		if (n / a % b) continue;
		
		auto c = n / a / b;
		auto val = (a + 1) * 1LL * (b + 2) * 1LL * (c + 2);
		minimize(mn, val);
		maximize(mx, val);
	}
	
	cout << mn - n << ' ' << mx - n;
}