#include<iostream>
#include<vector>

#define int long long

using namespace std;

const int MAXN = 300005, SEG = 1200005, mod = 1e9 + 7;
int sum1[SEG], sum2[SEG], start[MAXN], finish[MAXN], h[MAXN], num[MAXN];
vector<int> v[MAXN];
int n, dfs_number;

void set1(int ql, int qr, int val, int x = 1, int l = 0, int r = n)
{
	if(ql <= l && r <= qr)
	{
		sum1[x] += val;
		return;
	}
	int mid = (l + r) / 2;
	if(ql < mid)
		set1(ql, qr, val, 2 * x, l, mid);
	if(qr > mid)
		set1(ql, qr, val, 2 * x + 1, mid, r);
}

int get1(int p, int x = 1, int l = 0, int r = n)
{
	if(l == r - 1)
		return sum1[x] % mod;
	int mid = (l + r) / 2, ans;
	if(p < mid)
		ans = get1(p, 2 * x, l, mid);
	else
		ans = get1(p, 2 * x + 1, mid, r);
	return (ans + sum1[x]) % mod;
}

void set2(int ql, int qr, int val, int x = 1, int l = 0, int r = n)
{
	if(ql <= l && r <= qr)
	{
		sum2[x] -= val;
		return;
	}
	int mid = (l + r) / 2;
	if(ql < mid)
		set2(ql, qr, val, 2 * x, l, mid);
	if(qr > mid)
		set2(ql, qr, val, 2 * x + 1, mid, r);
}

int get2(int p, int x = 1, int l = 0, int r = n)
{
	if(l == r - 1)
		return sum2[x] % mod;
	int mid = (l + r) / 2, ans;
	if(p < mid)
		ans = get2(p, 2 * x, l, mid);
	else
		ans = get2(p, 2 * x + 1, mid, r);
	return (ans + sum2[x]) % mod;
}

void DFS(int n)
{
	start[n] = dfs_number;
	num[n] = dfs_number++;
	for(int i = 0; i < v[n].size(); i++)
	{
		h[v[n][i]] = h[n] + 1;
		DFS(v[n][i]);
	}
	finish[n] = dfs_number;
}

main()
{
	cin >> n;
	for(int i = 1; i < n; i++)
	{
		int a;
		cin >> a;
		a--;
		v[a].push_back(i);
	}
	DFS(0);
	int q;
	cin >> q;
	while(q--)
	{
		int t, v;
		cin >> t >> v;
		v--;
		if(t == 1)
		{
			int x, k;
			cin >> x >> k;
			set1(start[v], finish[v], x);
			set2(start[v], finish[v], k);
			set1(start[v], finish[v], h[v] * k);
		}
		else
			cout << ((get1(num[v]) + get2(num[v]) * h[v]) % mod + mod) % mod << endl;
	}
	return 0;
}
