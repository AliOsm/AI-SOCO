#include <bits/stdc++.h>

using namespace std;

const long long N = 2e6, MOD = 1e9 + 7;

#define int long long

bool used[N];
int d[N], ans = 0;
int a[N];
vector <pair <int, int>> g[N];

void dfs(int v, int p) {
	used[v] = 1;
	for (auto to : g[v]) {
		if (!used[to.first]) {
			dfs(to.first, v);
		}
	}
	//cout << v;
//exit(0);
	int kol = 0, kol1 = 0, kol2 = 0;
	for (auto to : g[v]) {
		if (to.first != p) {
			kol = max(kol, d[to.first] - to.second);
			if (d[to.first] - to.second > 0) {
				int lol = d[to.first] - to.second;
				if (lol > kol1) {
					kol2 = kol1;
					kol1 = lol;
				}
				else {
					kol2 = max(kol2, lol);
				}
			}
		}
	}
	kol1+= kol2;
	d[v] = a[v];
	ans = max(d[v] + kol1, ans);
	d[v]+= kol;
}
 main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n;
	cin >> n;
	for (int i = 1; i <= n; i++) {
		cin >> a[i];
		ans = max(a[i], ans);
	}
	for (int i = 0; i < n - 1; i++) {
		int l, r, w;
		cin >> l >> r >> w;
		//ans = max(ans, w);
		g[l].push_back({r, w});
		g[r].push_back({l, w});
	}
	dfs(1, -1);
	cout << ans;
}
