#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
#define dbl(k, x) fixed << setprecision(k) << (x)

template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define _upgrade ios_base::sync_with_stdio(0);
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 2e5 + 7;

int n;
vector<int> G[N];
bool bl[N];

PII find_max(int v, int f = 0, int d = 0)
{
    PII ans = {d, v};
    for(auto u: G[v])
        if(u != f && !bl[u]) 
            ans = max(ans, find_max(u, v, d + 1));
    return ans;
}

vector<int> path;

bool find_path(int v, int b, int f = 0)
{
    path.push_back(v);
    if(v == b)
        return true;
    
    for(auto u: G[v])
        if(u != f && find_path(u, b, v)) 
            return true;
    
    path.pop_back();
    return false;
}

int main()
{
    _upgrade
    
    cin >> n;
    for(int i = 1; i < n; i++)
    {
        int a, b; cin >> a >> b;
        G[a].push_back(b);
        G[b].push_back(a);
    }

    int a = find_max(1).second;
    auto [x, b] = find_max(a);

    find_path(a, b);

    int y = -1, c = -1;

    for(int i = 1; i + 1 < sz(path); i++)
    {
        int r = path[i];
        bl[path[i - 1]] = bl[path[i + 1]] = true;

        auto [y1, c1] = find_max(r);
        if(y1 > y)
        {
            y = y1;
            c = c1;
        }

        bl[path[i - 1]] = bl[path[i + 1]] = false;
    }

    cout << x + y << "\n" << a << " " << b << " " << c << "\n";

	return 0;
}