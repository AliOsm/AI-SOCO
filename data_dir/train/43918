/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>
#include <sstream>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vl;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;

const double pi = acos(0.0) * 2.0;
const double eps = 1e-12;
const int step[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}
template <class T> inline T max1(T a, T b, T c = -1234567, T d = -1234567) {
	T ans =  a > b ? a : b;
	if(c != -1234567) ans = max1(ans, c);
	if(d != -1234567) ans = max1(ans, d);
	return ans;
}
template <class T> inline T min1(T a, T b, T c = -1234567, T d = -1234567) {
	T ans = a < b ? a : b;
	if(c != -1234567) ans = min(ans, c);
	if(d != -1234567) ans = min(ans, d);
	return ans;
}
template <class T> inline T gcd1(T a, T b) {
	if(a < b) swap(a, b);
	if(a % b == 0) return b;
	return gcd1(b, a % b);
}
template <class T> inline T lb(T num) {return num & (-num); }
inline int jud(double a, double b){
	if(abs1(a - b) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
template <typename it, typename t1>
inline int find(t1 val, it a, int na, bool f_small = 1, bool f_lb = 1){
	if(na == 1) return 0;
	int be = 0, en = na - 1;
	if(*a <= *(a + na - 1)){
		if(f_lb == 0) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != 1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != -1) en = mid;
			else be = mid + 1;
		}
		if(f_small && jud(*(a + be), val) == 1 && be != 0) be--;
		if(!f_small && jud(*(a + be), val) == -1 && be != na - 1) be++;
	} else {
		if(f_lb) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != -1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != 1) en = mid;
			else be = mid + 1;
		}
		if(!f_small && jud(*(a + be), val) == -1 && be != 0) be--;
		if(f_small && jud(*(a + be), val) == 1 && be != na - 1) be++;
	}
	return be;
}
inline int bitnum(ull nValue){
    nValue = ((0xaaaaaaaaaaaaaaaaull & nValue)>>1) + (0x5555555555555555ull & nValue);
    nValue = ((0xccccccccccccccccull & nValue)>>2) + (0x3333333333333333ull & nValue);
    nValue = ((0xf0f0f0f0f0f0f0f0ull & nValue)>>4) + (0x0f0f0f0f0f0f0f0full & nValue);
    nValue = ((0xff00ff00ff00ff00ull & nValue)>>8) + (0x00ff00ff00ff00ffull & nValue);
    nValue = ((0xffff0000ffff0000ull & nValue)>>16) + (0x0000ffff0000ffffull & nValue);
    nValue = ((0xffffffff00000000ull & nValue)>>32) + (0x00000000ffffffffull & nValue);
	return nValue;
}
long long pow(long long n, long long m, long long mod = 0){
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}

const int maxn = 111100;
template <class t> struct segment_node{
	int be, en;
	t add, sum;
};
template <class t> struct segment_tree{
	int l;
	segment_node <t> tree[maxn * 4];

	inline int gleft(int no) {return no << 1;}
	inline int gright(int no) {return (no << 1) + 1;}
	inline int gfa(int no) {return no >> 1;}
	inline segment_tree(){ l = 0; }

	void build(int no, int l, int r, t orig = 0, t *a = NULL){
		if(l == r){
			tree[no].be = tree[no].en = l;
			tree[no].add = 0;
			tree[no].add = 0;
			tree[no].sum = 0;
			return;
		}
		tree[no].be = l; tree[no].en = r;
		int mid = (l + r) / 2;
		build(gleft(no), l, mid, orig, a);
		build(gright(no), mid + 1, r, orig, a);
		tree[no].sum = tree[gleft(no)].sum + tree[gright(no)].sum;
		tree[no].add = 0;
	}
	//l��r���нڵ��ranadd
	void down(int l, int r, int no){
		if(l <= tree[no].be && r >= tree[no].en){
			tree[no].add = 1 - tree[no].add;
			tree[no].sum = tree[no].en - tree[no].be + 1 - tree[no].sum;
			return;
		}
		if(tree[no].add){
			down(tree[no].be, tree[no].en, gleft(no));
			down(tree[no].be, tree[no].en, gright(no));
			tree[no].sum = tree[gleft(no)].sum + tree[gright(no)].sum;
			tree[no].add = 0;
		}
		int mid = (tree[no].be + tree[no].en) / 2;
		if(r >= tree[no].be && l <= mid) down(l, r, gleft(no));
		if(r >= mid + 1 && l <= tree[no].en) down(l, r, gright(no));
		tree[no].sum = tree[gleft(no)].sum + tree[gright(no)].sum;
	}
	//l��r���Խڵ����
	t getsum(int l, int r, int no) {
		if(l > r) return 0;
		if(l <= tree[no].be && r >= tree[no].en)
			return tree[no].sum;
		if(tree[no].add){
			down(tree[no].be, tree[no].en, gleft(no));
			down(tree[no].be, tree[no].en, gright(no));
			tree[no].sum = tree[gleft(no)].sum + tree[gright(no)].sum;
			tree[no].add = 0;
		}
		t ans = 0;
		int mid = (tree[no].be + tree[no].en) / 2;
		if(r >= tree[no].be && l <= mid) ans += getsum(max1(l, tree[no].be), min1(r, mid), gleft(no));
		if(r >= mid + 1 && l <= tree[no].en) ans += getsum(max1(l, mid + 1), min1(r, tree[no].en), gright(no));
		return ans;
	}
};
segment_tree <int> sgt;

int n, nq, orig[maxn];
int nxt_head[maxn], nxt_tail[maxn], head[maxn], tail[maxn];
pii q[maxn];

int main(){
//	freopen("input.txt","r", stdin);
	scanf("%d%d", &n, &nq);
	for(int i = 0; i < n; i++) scanf("%d", orig + i);
	sort(orig, orig + n);
	sgt.build(1, 0, n);
	memset(head, -1, sizeof(head));
	memset(tail, -1, sizeof(tail));
	for(int i = 0; i < nq; i++){
		scanf("%d%d", &q[i].first, &q[i].second);
		q[i].first = find(q[i].first, orig, n, 0, 1);
		q[i].second = find(q[i].second, orig, n, 1, 0);
		nxt_head[i] = head[q[i].first];
		head[q[i].first] = i;
		nxt_tail[i] = tail[q[i].second + 1];
		tail[q[i].second + 1] = i;
	}
	ll ans = ll(n) * ll(n - 1) * (n - 2) / 6;
	for(int i = 0; i < n; i++){
		for(; head[i] != -1; head[i] = nxt_head[head[i]]) sgt.down(q[head[i]].first, q[head[i]].second, 1);
		for(; tail[i] != -1; tail[i] = nxt_tail[tail[i]]) sgt.down(q[tail[i]].first, q[tail[i]].second, 1);
		ll c1 = i - sgt.getsum(0, i - 1, 1), c2 = sgt.getsum(i + 1, n, 1);
		ans -= c1 * (c1 - 1) / 2 + c2 * (c2 - 1) / 2 + c1 * c2;
	}
	cout << ans << endl;

	return 0;
}



