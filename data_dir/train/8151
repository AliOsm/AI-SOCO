#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <assert.h>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
#include <map>

using namespace std;

const int N = 200001;

int n, k;
int used[N];
vector < int > G[N];
long long ans;
int cnt[N];


void dfs(int v, int parent)
{
	if (used[v] == true)
		cnt[v]++;
	for (int i = 0; i < G[v].size(); ++i)
	{
		int to = G[v][i];
		if (parent != to)
		{
			dfs(G[v][i], v);
			cnt[v] += cnt[G[v][i]];
		}
	}
	if (parent != -1)
	{
		ans += min(cnt[v], 2 * k - cnt[v]);
	}
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
	scanf("%d%d", &n, &k);
	for (int i = 0; i < 2 * k; ++i)
	{
		int x; scanf("%d", &x); x--;
		used[x] = true;
	}
	for (int i = 0; i < n - 1; ++i)
	{
		int u, v; scanf("%d%d", &u, &v); u--; v--;
		G[u].push_back(v);
		G[v].push_back(u);
	}
	ans = 0;
	dfs(0, -1);
	printf("%I64d", ans);
    return 0;
}

