#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define inf 1000000005
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))
#define mod 1000000007
#define sz(a) ((int)(a).size())

template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcount(s);}
#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)

typedef unsigned long long ull;
typedef long long ll;
typedef double ld;
#define eps 1e-12
typedef pair<int, int> II;
typedef pair<ll, ll> LL;
template<class T> T gcd(T a, T b){ T r; while (b != 0) { r = a % b; a = b; b = r; } return a;}
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
#define PI (2 * acos(0))
#define linf (1ll << 60)
#define y1 y32432
#define y2 y435346

#define maxn 505

int n, k;
int a[maxn][maxn], num[maxn * maxn], temp[maxn * maxn], flag[maxn * maxn], m;
int size;
II que[maxn * maxn];
int q[maxn * maxn];

bool inside(int r, int c){
	return r >= 0 && c >= 0 && r < n && c < n;
}

string s[maxn];
int dr[4] = {+1, 0, -1, 0};
int dc[4] = {0, +1, 0, -1};

int run = 0;

void go(int r, int c){
	if(!a[r][c]) return;
	int x = a[r][c];
	if(!flag[x]){
		flag[x] = 1;
		q[size++] = x;
		run += temp[x];
	}
}

int main(){
//	freopen("in.txt", "r", stdin);
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	m = 0;
	cin >> n >> k;
	Rep(i, n) cin >> s[i];
	ms(a, 0);
	ms(num, 0);
	Rep(i, n) Rep(j, n) if(s[i][j] == '.' && !a[i][j]){
		m++;
		size = 0;
		que[size++] = mp(i, j);
		a[i][j] = m;
		Rep(t, size){
			int r = que[t].fi, c = que[t].se;
			num[m]++;
			Rep(h, 4){
				int rr = r + dr[h], cc = c + dc[h];
				if(inside(rr, cc) && !a[rr][cc] && s[rr][cc] == '.'){
					que[size++] = mp(rr, cc);
					a[rr][cc] = m;
				}
			}
		}
	}

	ms(flag, 0);
	int res = 0;

	for(int i = 0; i <= n - k; i++){
		ms(temp, 0);
		for(int j = 1; j <= m; j++) temp[j] = num[j];
		for(int r = i; r < i + k; r++) for(int c = 0; c < k; c++){
			temp[a[r][c]]--;
		}

		for(int j = 0; j <= n - k; j++){
			run = 0;
			size = 0;
			for(int c = j; c < j + k; c++){
				if(inside(i - 1, c)){
					go(i - 1, c);
				}
				if(inside(i + k, c)){
					go(i + k, c);
				}
			}

			for(int r = i; r < i + k; r++){
				if(inside(r, j - 1)){
					go(r, j - 1);
				}
				if(inside(r, j + k)){
					go(r, j + k);
				}
			}
//			cout << run << endl;
			For(r, i, i + k - 1){
				temp[a[r][j]]++;
				temp[a[r][j + k]]--;
			}
//			cout << j << " " << temp[1] << endl;
			Rep(j, size) flag[q[j]] = 0;
			res = max(res, run + k * k);
		}

	}

	cout << res << endl;

    return 0;
}
