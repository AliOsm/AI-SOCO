#include<bits/stdc++.h>

#define ll long long int
using namespace std;

const int N = 1e5 + 100;
vector<int> v[N], g[N];
int mem[N];
int ct[N], tail[N];

void deep(int node, int anc) {
    for (int to : v[node]) {
        if (to != anc) {
            g[node].push_back(to);
            deep(to, node);
        }
    }
}

void dfs(int node, int k) {
    ct[node] = 0;
    tail[node] = 1;

    int sum = 0;
    for (int to : g[node]) {
        dfs(to, k);
        ct[node] += ct[to];
        sum = max(sum, tail[node] + tail[to]);
        tail[node] = max(tail[node], tail[to] + 1);
    }
    if (sum >= k) {
        ct[node]++;
        tail[node] = 0;
    }
}

int f(int k) {
    if (mem[k] != -1)
        return mem[k];
    dfs(0, k);
    mem[k] = ct[0];
    return mem[k];
}

void calc(int l, int r) {
    if (f(l) != f(r) && r - l > 1) {
        int m = (l + r) >> 1;
        calc(l, m);
        calc(m, r);
    }
}

int main() {
#ifdef HOME
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    int n;
    scanf("%d", &n);

    for (int i = 0; i < n - 1; i++) {
        int a, b;
        scanf("%d%d", &a, &b);
        a--, b--;
        v[a].push_back(b);
        v[b].push_back(a);
    }

    fill(mem, mem + N, -1);
    mem[1] = n;

    deep(0, -1);
    calc(1, n);

    for (int i = 1; i < n; i++) {
        if (mem[i + 1] == -1)
            mem[i + 1] = mem[i];
    }
    for (int i = 1; i <= n; i++) {
        printf("%d\n", f(i));
    }

    return 0;
}