#include <bits/stdc++.h>
using namespace std;
const int N = 3e5 + 5;
int n, m, k, t, k2;
bool us[N];
map < pair < int, int >, int > q;
set < int > qq;

void dfs(int x){
    qq.erase(x);
    t++;
    if (qq.empty())return;
    int last = 0;
    while (qq.size()){
        set < int > :: iterator it = qq.upper_bound(last);
        if (it == qq.end())break;
        int y = *it;
        if (!q.count(make_pair(x, y)))dfs(y);
        last = y;
    }
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);
    cin >>n>>m>>k;
    k2 = n - 1;
    for (int i = 1; i <= m; ++i){
        int x, y;
        cin >>x>>y;
        if (x == 1 || y == 1)k2--;
        q[make_pair(x, y)] = q[make_pair(y, x)] = 1;
    }
    for (int i = 1; i <= n; ++i)qq.insert(i);
    dfs(1);
    if (t != n)return cout <<"impossible", 0;
    for (int i = 2; i <= n; ++i)qq.insert(i);
    int k1 = 0;
    for (int i = 2; i <= n; ++i){
        if (qq.empty())break;
        if (qq.find(i) != qq.end()){
            k1++;
            dfs(i);
        }
    }
    if (k >= k1 && k <= k2)cout <<"possible";else cout <<"impossible";
}
