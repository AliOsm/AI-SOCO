#include <cstring>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
#include <climits>
#include <cctype>
#include <bitset>
#include <list>
#include <fstream>

using namespace std;

#define all(v)              ((v).begin()), ((v).end())
#define allr(v)             ((v).rbegin()), ((v).rend())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define MP                  make_pair
#define lpv(i, v)           for(int i=0;i<sz(v);++i)
#define lpn(i, n)           for(int i=0;i<(int)(n);++i)
#define ss	                second
#define ff	                first


typedef unsigned long long          ull;
typedef long long                   ll;
typedef long double                 LD;
typedef vector<int>                 vi;
typedef vector<ll>                  vl;

ll suf(ll a){ return (a*(a + 1)) / 2; }
const ll  OO = 1e6 + 10, S = 1e6 + 10;
vector<vector<int> >adj;
bool OK;

int dx[]{1, -1, 0, 0};
int dy[]{0, 0, 1, -1};
int dx8[]{1, -1, 0, 0, 1, -1, 1, -1};
int dy8[]{0, 0, 1, -1, 1, -1, -1, 1};

int main()
{


	char ch;
	ll n, m, t, a, b, c, d;
	string s;
	while (cin >> s){

		vector<int>v, w;
		for (int i = 0; i < s.size(); i++)
			if (s[i] == '1') w.push_back(i + 1);

		cin >> m;
		for (int q = 0; q < 2; q++){
			int suml = 0, sumr = 0, alt = 0;
			v.clear();
			v.push_back(INT_MAX);
			if (q == 1 && w.size() >= 2)
				swap(w[0], w[1]);
			for (int i = 0; i < m; i++)
			{
				alt = abs(alt - 1);
				OK = false;
				for (int j = 0; j < w.size(); j++) if (v.size() == i + 1){
					if (alt == 1 && suml + w[j] > sumr && v.back() != w[j])
					{
						suml += w[j];
						v.push_back(w[j]);
						OK = true;
						break;
					}
					else if (alt == 0 && sumr + w[j] > suml && v.back() != w[j])
					{
						sumr += w[j];
						v.push_back(w[j]);
						OK = true;
						break;
					}
				}
			}
			if (OK)
			{
				cout << "YES" << endl;
				for (int i = 1; i < v.size(); i++)
					cout << v[i] << " ";
				cout << endl;
				return 0;
			}
		}
		cout << "NO" << endl;
	}


	//	system("pause");
	return 0;
}