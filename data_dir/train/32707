#include <iostream>
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;

#define pb push_back
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-9
#define BASE 53ll
#define ld double
#define MAX 1000000000
#define NIL 0
#define INF 1e15
#define infi 1e16
#define rd(a) scanf("%d",&a)
#define rd2(a,b) scanf("%d %d",&a,&b)
#define rd3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define rdll(a) scanf("%I64d",&a)
#define sz(a) (int) a.size()
#define lp(i,a,n) for(int i=(a); i<=(n) ; ++i)
#define lpd(i,n,a) for(int i=(n); i>=(a) ; --i)
#define pi acos(-1)
#define lc (x << 1)
#define rc (x << 1 | 1)

typedef complex<double>CX;
typedef pair<ll,ll>ii;
typedef pair<ll,ii>jj;
typedef pair<vector<int>,int>vii;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int N=200005;


ll mod=1000000007;
ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u')return 1;return 0;}
ld getDistance(ld x1,ld y1,ld x2,ld y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}
ll extended_euclidean(ll a,ll b,ll &x,ll &y){if(b==0){x=1;y=0;return a;}ll g = extended_euclidean(b,a%b,y,x);y -= (a/b)*x;return g;}
ll power(ll base,ll p){if(p==1)return base;if(!p)return 1ll;ll ret=power(base,p/2);ret*=ret;ret%=mod;if(p&1)ret*=base;return ret%mod;}
ii vec(ii a,ii b){ii ret=ii(a.F-b.F,a.S-b.S);return ret;}
ll getArea(ii a,ii b,ii c){ii x=vec(a,b);ii y=vec(c,b);return abs(x.F*y.S-x.S*y.F);}

int h[505],cnt[100005],n,k,kam[100005];
ll dp[505][5005];
ll solve(int p,int fadl){
   if(fadl==0||p==0)return 0;
   if(dp[p][fadl]!=-1)return dp[p][fadl];
   ll ret=0;
   lp(i,0,min(fadl,k))ret=max(ret,solve(p-1,fadl-i)+h[i]);
   return dp[p][fadl]=ret;
}
int main() {
 // freopen("test.in","r",stdin);
  rd2(n,k);
  lp(i,0,n*k-1){
     int c;
     rd(c);
     cnt[c]++;
  }
  lp(i,0,n-1){
     int a;
     rd(a);
     kam[a]++;
  }
  lp(i,1,k) rd(h[i]);
  ll sum=0;
  memset(dp,-1,sizeof(dp));
  lp(i,0,100000){
      sum+=solve(kam[i],cnt[i]);
  }
  cout<<sum;
  return 0;
}
