#include <bits/stdc++.h>

using namespace std;

const int N = 1010;
const int Mod = 2520;

int k;
int a[N], m[N];
vector <int> Adj[N];
bool Vis[N][Mod];
int Comp[N][Mod];
set <int> Nodes[N * Mod];
pair <int,int> Meet[N * Mod];

bool DFS(int i,int j)
{
    if(Vis[i][j])
    {
        if(Comp[i][j])  return false;

        Comp[i][j] = ++k;
        Meet[k] = make_pair(i,j);
        return true;
    }

    Vis[i][j] = true;

    int NewJ = (j + a[i]) % Mod;
    int NewI = Adj[i][NewJ % m[i]];

    bool Ok = DFS( NewI, NewJ);

    Comp[i][j] = Comp[NewI][NewJ];

    if(Ok)  Nodes[Comp[i][j]].insert(i);

    return Ok && Meet[Comp[i][j]] != make_pair(i,j);
}

int main()
{
    int n;  cin >> n;

    for(int i = 1; i <= n; i++) scanf("%d", a + i), a[i] = (a[i] % Mod + Mod) % Mod;

    for(int i = 1; i <= n; i++)
    {
        scanf("%d", m + i);

        Adj[i].resize(m[i]);

        for(int& x : Adj[i])    scanf("%d", &x);
    }

    for(int i = 1; i <= n; i++)
        for(int j = 0; j < Mod; j++)
            if(!Vis[i][j])
                DFS(i,j);

    int q;  cin >> q;

    while(q--)
    {
        int x, y;   scanf("%d%d", &x, &y);

        y = (y % Mod + Mod) % Mod;

        printf("%d\n", Nodes[Comp[x][y]].size());
    }
}
