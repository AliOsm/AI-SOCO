#include <bits/stdc++.h>
using namespace std;

// Template Headers {{{
using pii = pair<int, int>; using vpii = vector<pii>;
using vi = vector<int>; using vvi = vector<vi>;
using ll = long long; using vll = vector<long long>;
template <class T> using min_queue = priority_queue<T, vector<T>, greater<T>>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
template <class T, class U> istream &operator>>(istream &, pair<T, U> &);
template <class T, class U> ostream &operator<<(ostream &, const pair<T, U> &);
template <class T> struct Inf { static constexpr T inf() { return std::numeric_limits<T>::has_infinity ? std::numeric_limits<T>::infinity() : std::numeric_limits<T>::max(); } };
template <> struct Inf<int> { static constexpr int inf() { return 0x3f3f3f3f; } };
template <> struct Inf<long long> { static constexpr long long inf() { return 0x3f3f3f3f3f3f3f3fLL; } };
constexpr int INF = Inf<int>::inf(); constexpr ll BINF = Inf<ll>::inf();
// mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
// }}}
// Classic Segment Tree {{{
template <class T, class U, class SegOp>
class SegmentTree {
private:
	SegOp op;
	int n;
	std::vector<T> tree;

public:
	SegmentTree(const std::vector<T> &init) : n(init.size()), tree(init.size()) {
		for (const T &x : init) tree.push_back(x);
		for (int i = n - 1; i > 0; i--) tree[i] = op(tree[i << 1], tree[i << 1 | 1]);
	}
	SegmentTree(int n, const T &init) : SegmentTree(std::vector<T>(n, init)) {}
	SegmentTree(int n) : SegmentTree(n, op.def()) {}

	void modify(int p, const U &val) {
		for (op.upd(tree[p += n], val); p >>= 1; ) tree[p] = op(tree[p << 1], tree[p << 1 | 1]);
	}

	T query(int l, int r) {
		T resl = op.def(), resr = op.def();
		for (l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {
			if (l & 1) resl = op(resl, tree[l++]);
			if (r & 1) resr = op(tree[--r], resr);
		}
		return op(resl, resr);
	}

};
// }}}
// Segment Tree Operators {{{
template <class T, class U> struct SegOpTemp {
	constexpr T operator()(const T &lhs, const T &rhs); // query (e.g. range max/sum)
	constexpr T &upd(T &lhs, const U &rhs, int len = 1); // update (e.g. range add/assign)
	constexpr U &upLazy(U &lhs, const U &rhs); // update for lazy nodes (e.g. sum update accumulate)
	constexpr const T def(); // default value for result (e.g. INF for min query)
	constexpr const U udef(); // default value for update (e.g. 0 for add updates)
};

template <class T, class U> struct SumAdd {
	constexpr T operator()(const T &lhs, const T &rhs) { return lhs + rhs; }
	constexpr T &upd(T &lhs, const U &rhs, int len = 1) { return lhs += rhs * len; }
	constexpr U &upLazy(U &lhs, const U &rhs) { return lhs += rhs; }
	constexpr const T def() { return 0; }
	constexpr const U udef() { return 0; }
};

template <class T, class U> struct SumAsg {
	constexpr T operator()(const T &lhs, const T &rhs) { return lhs | rhs; }
	constexpr T &upd(T &lhs, const U &rhs, int len = 1) { return lhs = rhs * len; }
	constexpr U &upLazy(U &lhs, const U &rhs) { return lhs = rhs; }
	constexpr const T def() { return 0; }
	constexpr const U udef() { return 0; }
};

template <class T, class U> struct MinAdd {
	constexpr T operator()(const T &lhs, const T &rhs) { return min(lhs, rhs); }
	constexpr T &upd(T &lhs, const U &rhs, int = 1) { return lhs += rhs; }
	constexpr U &upLazy(U &lhs, const U &rhs) { return lhs += rhs; }
	constexpr const T def() { return Inf<T>::inf(); }
	constexpr const U udef() { return 0; }
};

template <class T, class U> struct MinAsg {
	constexpr T operator()(const T &lhs, const T &rhs) { return min(lhs, rhs); }
	constexpr T &upd(T &lhs, const U &rhs, int = 1) { return lhs = rhs; }
	constexpr U &upLazy(U &lhs, const U &rhs) { return lhs = rhs; }
	constexpr const T def() { return Inf<T>::inf(); }
	constexpr const U udef() { return 0; }
};
// }}}

int solve() {
	int n; cin >> n;
	vi a(n); cin >> a;
	SegmentTree<int, int, SumAsg<int, int>> st(a);
	int ans = 0, ansi = 0;
	for (int i = 0; i < n; i++) {
		int cur = 0;
		if (i - 1 >= 0) cur |= st.query(0, i - 1);
		if (i + 1 < n) cur |= st.query(i + 1, n - 1);
		int now = (a[i] | cur) - cur;
		if (now > ans) ans = now, ansi = i;
	}
	swap(a[0], a[ansi]);
	cout << a;
	return 0;
}

// Template Main {{{
int main() {
	ios::sync_with_stdio(0);
	// precompute();
	// int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << "Case #" << i << ": ", solve();
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it, os << " \n"[++it==v.end()];
	return os;
}

template <class T, class U> istream &operator>>(istream &is, pair<T, U> &p) {
	return is >> p.first >> p.second;
}

template <class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) {
	return os << p.first << ' ' << p.second;
}
// }}}

// vim: fdm=marker
