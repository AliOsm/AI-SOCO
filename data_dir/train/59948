#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

typedef long long ll;
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 2000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

char S[200005];
int L[200005], N, R[200005];
ll F[400005], I[400005];
string Str;

ll solve(int n, int m)
{
    m = min(m, n);
    ll up = F[n];
    up *= I[m];
    up %= MOD;
    up *= I[n-m];
    up %= MOD;
    return up;
}

ll exp(ll n, ll e)
{
    if(e == 0) return 1;
    if(e%2 == 0)
    {
        ll k = exp(n,e/2);
        return (k*k) % MOD;
    }
    return (exp(n,e-1) * n) % MOD;
}

int main()
{
    cin >> Str;
    F[0] = I[0] = 1;
    f(i,1,400000) F[i] = (F[i-1] * i) % MOD;
    f(i,1,400000) I[i] = exp(F[i],MOD-2);
    N = SZ(Str);
    f(i,1,N) S[i] = Str[i-1];
    f(i,1,N)
        if(S[i] == '(') L[i] = L[i-1] + 1;
        else L[i] = L[i-1];
    fd(i,N,1)
        if(S[i] == ')') R[i] = R[i+1] + 1;
        else R[i] = R[i+1];
    ll ans = 0;
    f(i,1,N) if(S[i] == '(')
    {
        int l = L[i-1];
        int r = R[i+1];
        if(r == 0) continue;
        ans += solve(l+r,l+1);
        ans %= MOD;
    }
    cout << ans;
}

