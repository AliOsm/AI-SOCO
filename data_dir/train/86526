#include <cstring>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
#include <climits>
#include <cctype>
#include <bitset>
#include <list>
#include <fstream>

using namespace std;

#define all(v)              ((v).begin()), ((v).end())
#define allr(v)             ((v).rbegin()), ((v).rend())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define MP                  make_pair
#define lpv(i, v)           for(int i=0;i<sz(v);++i)
#define lpn(i, n)           for(int i=0;i<(int)(n);++i)
#define V  	                vector
#define ss 	                second
#define ff 	                first

typedef unsigned long long          ull;
typedef long long                   ll;
typedef long double                 LD;

ll suf(ll a){ return (a*(a + 1)) / 2; }
const ll  OO = 1e6 + 10, S = 1e9 + 7;
vector<vector<int> >adj, can;
// D U R L
int dx[]{1, -1, 0, 0, 1, -1, 1, -1};
int dy[]{0, 0, 1, -1, 1, -1, -1, 1};
ll  n, m, b, mod;
vector<ll>v;
ll dp[2][505][505];
ll go(int idx, int rem, int buges){

	if (buges < 0 || rem < 0) return 0;
	if (idx == -1)
		return rem == 0;
	ll &ret = dp[idx][rem][buges];
	if (ret != -1)
		return ret;
	ret = 0;
	ret = go(idx, rem - 1, buges - v[idx]) % mod;
	ret = (ret + go(idx - 1, rem, buges)) % mod;
	return ret;
}
int main()
{
	while (cin >> n >> m >> b >> mod){
		//	clr(dp, -1);
		v.resize(n + 1);
		for (int i = 0; i < n; i++)
			cin >> v[i + 1];
		//cout << go(n - 1, m, b) << endl;
		for (int i = 0; i <= b;i++)
			dp[0][0][i] = 1;
		for (int i = 1; i <= n; i++){
			for (int j = 0; j <= m; j++){
				for (int k = 0; k <= b; k++){
					if (i - 1 >= 0)
						dp[i % 2][j][k] = dp[(i + 1) % 2][j][k] % mod;
					if (j - 1 >= 0 && k - v[i] >= 0)
						dp[i % 2][j][k] = (dp[i % 2][j][k] + dp[i % 2][j - 1][k - v[i]]) % mod;
				}
			}

		}
		cout << dp[n % 2][m][b] % mod << endl;
	}
	return 0;
}