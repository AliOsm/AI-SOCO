#include <bits/stdc++.h>

using namespace std;

typedef unsigned uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ldbl;
typedef pair<int, int> pii;
typedef pair<uint, uint> puu;
typedef pair<ll, ll> pll;
typedef pair<ull, ull> pull;
typedef pair<double, double> pdd;
typedef vector<int> vi;
typedef vector<uint> vu;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<pii> vpii;
typedef vector<puu> vpuu;
typedef vector<pll> vpll;
typedef vector<pull> vpull;
typedef vector<string> vstr;
typedef vector<double> vdbl;
typedef vector<ldbl> vldbl;
#define pb push_back
#define ppb pop_back
#define pfr push_front
#define ppfr pop_front
#define emp emplace
#define empb emplace_back
#define be begin
#define rbe rbegin
#define all(x) (x).be(), (x).end()
#define rall(x) (x).rbe(), (x).rend()
#define fir first
#define sec second
#define mkp make_pair
#define brif(cond) if (cond) break
#define ctif(cond) if (cond) continue
#define retif(cond) if (cond) return
void canhazfast() {ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}
template<typename T> T gcd(T a, T b) {return b ? gcd(b, a%b) : a;}
template<typename T> T extgcd(T a, T b, T &x, T &y)
{
    T x0 = 1, y0 = 0, x1 = 0, y1 = 1;
    while (b) {
        T q = a/b; a %= b; swap(a, b);
        x0 -= q*x1; swap(x0, x1);
        y0 -= q*y1; swap(y0, y1);
    }
    x = x0; y = y0; return a;
}
int ctz(uint x) {return __builtin_ctz(x);}
int ctzll(ull x) {return __builtin_ctzll(x);}
int clz(uint x) {return __builtin_clz(x);}
int clzll(ull x) {return __builtin_clzll(x);}
int popcnt(uint x) {return __builtin_popcount(x);}
int popcntll(ull x) {return __builtin_popcountll(x);}
int bsr(uint x) {return 31^clz(x);}
int bsrll(ull x) {return 63^clzll(x);}

#define MX 200064

int k;
char ans[MX];
vpii wh[MX];
vi pre[MX];
int st[MX];
int dp[MX], nxt[MX], pos[MX];
int a[MX], inv[MX];

void dfs(int u, int n)
{
    //cerr << "dfs(" << u << ")\n";
    st[k++] = u;
    if (k >= n) {
        //cerr << "  [" << u << ", " << st[k-n] << "]\n";
        dp[u] = min(dp[u], st[k-n]);
    }
    for (int v : pre[u]) dfs(v, n);
    --k;
}

int main()
{
    canhazfast();

    int n, m, q;

    cin >> n >> m >> q;
    for (int i = 0; i < n; ++i) {
        int p;
        cin >> p;
        inv[p] = i;
    }
    fill_n(pos, n, m);
    fill_n(dp, m+1, m);
    for (int i = 0; i < m; ++i) {
        cin >> a[i];
        a[i] = inv[a[i]];
    }
    for (int i = m-1; i >= 0; --i) {
        int v = a[i]+1;
        if (v == n) v = 0;
        int t = pos[v];
        //cerr << i << " -> " << t << '\n';
        nxt[i] = t;
        pre[t].pb(i);
        pos[a[i]] = i;
    }
    for (int i = 0; i < m; ++i) {
        ctif(nxt[i] < m);
        dfs(i, n);
    }
    for (int i = 0; i < q; ++i) {
        int l, r;
        cin >> l >> r;
        --l;
        wh[l].empb(r, i);
    }
    for (int l = m-1; l >= 0; --l) {
        dp[l] = min(dp[l], dp[l+1]);
        for (const pii &x : wh[l]) {
            int r = x.fir, i = x.sec;
            ans[i] = dp[l] < r ? '1' : '0';
        }
    }
    assert(strlen(ans) == q);
    cout << ans;

    return 0;
}
