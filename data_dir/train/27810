#include <iostream>
#include <fstream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <algorithm>
#include <array>
#include <bitset>
using namespace std;
 
#define REP(i,n) for(int i=0; i<n; ++i)
#define FOR(i,a,b) for(int i=a; i<=b; ++i)
#define FORR(i,a,b) for (int i=a; i>=b; --i)
#define ALL(c) (c).begin(), (c).end()
 
typedef long long ll;
typedef vector<int> VI;
typedef vector<ll> VL;
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef pair<int,int> P;
typedef pair<ll,ll> PL;
typedef pair<P, P> state;
 
int in() { int x; scanf("%d", &x); return x; }
ll lin() { ll x; scanf("%lld", &x); return x; }

const int INF = 1e9;

struct Trie_bit{
    vector<array<int, 2> > trie_nodes = {{0,0}};
    vector<int> mi = {0};

    void push_trie(int x){
        int node = 0;
        FORR(bit,17,0){
            int b = !!(x & (1<<bit));
            if (!trie_nodes[node][b]){
                trie_nodes[node][b] = trie_nodes.size();
                trie_nodes.push_back({0, 0});
                mi.push_back(x);
            }
            node = trie_nodes[node][b];
            mi[node] = min(mi[node], x);
        }
    }

    int maxmatch(int x, int ma){
        int node = 0;
        int r = 0;
        FORR(bit,17,0){
            int b = !!!(x & (1<<bit));
            if (!trie_nodes[node][b] || (b && mi[trie_nodes[node][b]] > ma)){
                b ^= 1;
            }
            node = trie_nodes[node][b];
            r |= (1 << bit) * b;
        }
        return r;
    }

    void show(){
        REP(i,trie_nodes.size()){
            cout << trie_nodes[i][0] << " " << trie_nodes[i][1] << "   " << mi[i] << endl;
        }
    }
};

const int N = 1e5 + 10;
int a[N];

int main() {
    int q;
    cin >> q;

    int m = 330;
    vector<Trie_bit> trie(m);
    VI mi(m, INF);
    // REP(i,m) trie[i].push_trie(0);

    while (q--){
        int t = in();
        if (t == 1){
            int x = in();
            if (!a[x]){
                a[x] = 1;
                FOR(i,1,m-1){
                    if (x % i == 0){
                        trie[i].push_trie(x);
                        mi[i] = min(mi[i], x);
                    }
                }
            }
        }else{
            int x = in(), k = in(), s = in();
            s -= x;
            int ans = -1;
            if (x % k == 0){
                if (k >= m){
                    int ma = -1;
                    for (int y = k; y <= s; y += k){
                        if (a[y] && (y ^ x) > ma){
                            ma = y ^ x;
                            ans = y;
                        }
                    }
                }else{
                    if (mi[k] <= s){
                        ans = trie[k].maxmatch(x, s);
                    }
                }
            }
            printf("%d\n", ans);
        }
    }
    return 0;
}