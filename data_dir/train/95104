// https://codeforces.com/contest/1343/submission/77557858 (Dukkha)
#include <algorithm>
#include <iostream>

using namespace std;

const int N = 200000, M = 200000;
const long long INF = 3e14;

int oo[1 + M * 2], oj[1 + M * 2];

int link(int o, int j) {
	static int _ = 1;
	oo[_] = o, oj[_] = j;
	return _++;
}

int ae[N];
int qu[N];

void bfs(int s, int n, int *dd) {
	fill_n(dd, n, n);
	int head = 0, cnt = 0;
	dd[s] = 0, qu[head + cnt++] = s;
	while (cnt) {
		int i = qu[cnt--, head++];
		int d = dd[i] + 1;
		for (int o = ae[i]; o; o = oo[o]) {
			int j = oj[o];
			if (dd[j] == n)
				dd[j] = d, qu[head + cnt++] = j;
		}
	}
}

long long pp[1 + M];
int aa[N], bb[N], cc[N];

int main() {
	int t; cin >> t;
	while (t--) {
		int n, m, a, b, c; cin >> n >> m >> a >> b >> c, a--, b--, c--;
		for (int h = 1; h <= m; h++)
			cin >> pp[h];
		fill_n(ae, n, 0);
		for (int h = 1; h <= m; h++) {
			int i, j; cin >> i >> j, i--, j--;
			ae[i] = link(ae[i], j);
			ae[j] = link(ae[j], i);
		}
		sort(pp + 1, pp + 1 + m);
		for (int h = 2; h <= m; h++)
			pp[h] += pp[h - 1];
		bfs(a, n, aa);
		bfs(b, n, bb);
		bfs(c, n, cc);
		long long ans = INF;
		for (int i = 0; i < n; i++) {
			int abc = aa[i] + bb[i] + cc[i];
			if (abc <= m)
				ans = min(ans, pp[abc] + pp[bb[i]]);
		}
		cout << ans << '\n';
	}
	return 0;
}
