#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pf push_front
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("board.in");ofstream out("board.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

int a,k,d;
vec<vec<int>> l;
vec<int> up, dow, pom;
vec<pii> mx;

int dfs1(int v, int p){
    int ans = -1;
    for(int h : l[v]){
        if(h==p) continue;
        int n  = dfs1(h, v);
        ans = max(ans, n);
        if(n>mx[v].S){
            mx[v].F = mx[v].S;
            mx[v].S = n;
        }
        else if(n>mx[v].F) mx[v].F = n;
    }
    dow[v] = ans!=-1 ? ans+1 : pom[v] ? 0 : -1;
    return dow[v];
}

void dfs2(int v, int p){
    int k =mx[p].S==dow[v] ? mx[p].F : mx[p].S;
    if(k==-1 && up[p]==-1) up[v] = pom[p] ? 1 : -1;
    else up[v] = max(up[p]+1, k+2);
    for(int h : l[v]) if(h!=p) dfs2(h, v);
}

int main() {
    fast;
    cin>>a>>k>>d;
    pom = vec<int>(a);
    up = vec<int>(a);
    dow = vec<int>(a);
    mx = vec<pii>(a, {-1, -1});
    l = vec<vec<int>>(a, vec<int>());
    for(int q=0; q<k; q++){
        int x; cin>>x; pom[x-1]= 1;
    }
    for(int q=0; q<a-1; q++){
        int x,y; cin>>x>>y; x--; y--;
        l[x].pb(y);
        l[y].pb(x);
    }
    up[0] = -1;
    dfs1(0, -1);
    for(int h : l[0]) dfs2(h, 0);
   // for(int i : dow) cout<<i<<" "; cout<<endl;
   // for(int i : up) cout<<i<<" "; cout<<endl;
    int o =0;
    for(int q=0; q<a;q ++) o+=max(dow[q], up[q])<=d;
    cout<<o;
}