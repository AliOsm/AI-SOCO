#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
using namespace std;
typedef long long ll;

const int maxN = 1e5 + 10;
pair <int, int> a[maxN];
int n,b[maxN];
vector <int> px,py; //vector e x haa va y haa
int sumx[maxN],sumy[maxN]; //sumx[i]: tedade noghte haaye ba X e kamtar mosavie i

vector <int> data[4 * maxN];
void build(int s = 0, int e = n, int id = 1)
{
	if (e - s < 2)
	{
		data[id].pb(a[s].second);
		return;
	}
	int mid = s + e >> 1;
	build(s, mid, 2 * id);
	build(mid, e, 2 * id + 1);

	merge(data[2 * id].begin(), data[2 * id].end(), data[2 * id + 1].begin(), data[2 * id + 1].end(), back_inserter(data[id]));
}

int get(int l, int r, int val, int s = 0, int e = n, int id = 1) //tedade adade koochiktar mosavie val too [l,r)
{
	if (e <= l || r <= s)
		return 0;
	if (l <= s && e <= r)
		return upper_bound(data[id].begin(), data[id].end(), val) - data[id].begin();
	int mid = s + e >> 1;
	return get(l, r, val, s, mid, 2 * id)
	     + get(l, r, val, mid, e, 2 * id + 1);
}

void check()
{
    int v1 = lower_bound(sumx, sumx + px.size(), b[0] + b[3] + b[6]) - sumx; //vertical line 1
    int v2 = lower_bound(sumx, sumx + px.size(), b[0] + b[3] + b[6] + b[1] + b[4] + b[7]) - sumx; //vertival line 2

    int h1 = lower_bound(sumy, sumy + py.size(), b[0] + b[1] + b[2]) - sumy; //horizontal line 1
    int h2 = lower_bound(sumy, sumy + py.size(), b[0] + b[1] + b[2] + b[3] + b[4] + b[5]) - sumy; //horizontal line 2

    if (v1 == px.size() || v2 == px.size()) 
    	return; //not found
    if (h1 == py.size() || h2 == py.size())
    	return; //not found

    if (sumx[v1] != b[0] + b[3] + b[6]) 
        return;
    if (sumx[v2] != b[0] + b[3] + b[6] + b[1] + b[4] + b[7])
        return;

    if (sumy[h1] != b[0] + b[1] + b[2])
        return;
    if (sumy[h2] != b[0] + b[1] + b[2] + b[3] + b[4] + b[5])
        return;
 	
 	int p1 = lower_bound(a, a + n, mp(px[v1], 2000000000)) - a; //avvalin pair ee ke x esh haddeaghal px[v1] hast
 	int p2 = lower_bound(a, a + n, mp(px[v2], 2000000000)) - a; 

 	if (get(0, p1, py[h1]) != b[0]) //beyne hameye pair haayi ke chape khatte v1 mioftan
 		return;

 	if (get(0, p1, py[h2]) != b[0] + b[3]) //beyne hameye pair haayi ke chape khatte v1 mioftan
 		return;

 	if (get(0, p2, py[h1]) != b[0] + b[1]) //beyne hameye pair haayi ke chape khatte v2 mioftan
 		return;

 	if (get(0, p2, py[h2]) != b[0] + b[1] + b[3] + b[4]) //beyne hameye pair hayi ke chape khate v2 mioftan
 		return;

 	cout << fixed << setprecision(2);
    cout << px[v1] + 0.01 << " " << px[v2] + 0.01 << endl;
    cout << py[h1] + 0.01 << " " << py[h2] + 0.01 << endl;
    exit(0);
}

int32_t main()
{
	cin >> n;
	for (int i = 0 ; i < n ; i++)
	{
		cin >> a[i].first >> a[i].second;
		px.pb(a[i].first);
		py.pb(a[i].second); 
	}

	sort(a, a + n); //noghte haro bar asase X sort kon
	build();

	//compress:
	sort(px.begin(), px.end());
	px.resize(unique(px.begin(), px.end()) - px.begin());
	sort(py.begin(), py.end());
	py.resize(unique(py.begin(), py.end()) - py.begin());

	for (int i = 0 ; i < n ; i++)
	{
		int num = lower_bound(px.begin(), px.end(), a[i].first) - px.begin(); //compress shodast
		sumx[num]++;

		num = lower_bound(py.begin(), py.end(), a[i].second) - py.begin();
		sumy[num]++;
	}

	for (int i = 1 ; i < px.size() ; i++)
		sumx[i] += sumx[i - 1];
	for (int i = 1 ; i < py.size() ; i++)
		sumy[i] += sumy[i - 1];


	for (int i = 0 ; i < 9 ; i++)
		cin >> b[i];

	for (int i = 0 ; i < 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 ; i++)
	{
		check();
		next_permutation(b, b + 9);
	}

	cout << -1 << endl;
   	return 0;
}