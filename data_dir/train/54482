/// I won’t run away anymore…
/// I won’t go back on my word…
/// That is my ninja way!

#include<bits/stdc++.h>
using namespace std ;
const int N = 2e5+5 ;
int n ,m ,x[N] ;
vector<int> inpls[N] ,outpls[N] ,inneg[N] ,outneg[N] ;
long long cntDis[N] ;
vector<int> vec ;
int main(){
    scanf("%d%d",&n,&m);
    for(int i=0;i<n;++i) scanf("%d",x+i);
    sort(x,x+n);
    for(int i=0;i<n;++i){
        if(!i){
            inneg[1].push_back(x[i]);
            outneg[m+1].push_back(x[i]);
            ++cntDis[1] ;
            --cntDis[m+1] ;
        }
        else{
            int c = x[i] - x[i-1] - 1 ;
            int d = (c+1)/2 ;
            d = min(d,m) ;
            inneg[1].push_back(x[i]);
            outneg[d+1].push_back(x[i]);
            ++cntDis[1] ;
            --cntDis[d+1] ;
        }
        if(i+1==n){
            inpls[1].push_back(x[i]);
            outpls[m+1].push_back(x[i]);
            ++cntDis[1] ;
            --cntDis[m+1] ;
        }
        else{
            int c = x[i+1] - x[i] - 1 ;
            int d = c/2 ;
            d = min(d,m);
            inpls[1].push_back(x[i]);
            outpls[d+1].push_back(x[i]);
            ++cntDis[1] ;
            --cntDis[d+1] ;
        }
    }
    for(int i=1;i<=m;++i) cntDis[i] += cntDis[i-1] ;
    set<int> add ,sub ;
    int x = m ;
    long long ans = 0 ;
    for(int i=1;i<=m;++i){
        if(!x) break;
        for(auto go:inneg[i]) sub.insert(go);
        for(auto go:inpls[i]) add.insert(go);
        for(auto go:outneg[i]) sub.erase(go);
        for(auto go:outpls[i]) add.erase(go);

        if(x>=cntDis[i]){
            ans += 1ll*i*cntDis[i] ;
            x -= cntDis[i] ;
            for(auto go:add) vec.push_back(go+i);
            for(auto go:sub) vec.push_back(go-i);
            continue;
        }
        ans += 1ll*x*i ;
        for(auto go:add){
            if(!x) break;
            --x ;
            vec.push_back(go+i);
        }
        for(auto go:sub){
            if(!x) break;
            --x ;
            vec.push_back(go-i);
        }
        break;
    }
    cout << ans << endl ;
    sort(vec.begin(),vec.end());
    for(auto go:vec)printf("%d ",go);
    return 0;
}
