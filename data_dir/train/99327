#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX_Y ((ll)(1e13))
#define MAX ((int)(1e9 + 2))
#define pi (2.0*acos(0))
#define M ((ll)(1e9 + 7))
#define NN ((ll)(305))
#define N ((int)(1e5 + 5))
#define eps (0)
#define log 20


using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long ull;


typedef tree < ll,  null_type,  less < ll >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;

char s[N];

int dpp[(1<<20)+2], arr[22][22];

int main()
{
    ////cout<<__builtin_popcount(0)<<" "<<__builtin_popcount(4);
    int n , m;
    scanf("%d %d %s",&n,&m,s);
    for(int i = 1; i<n; i++){
        int a = s[i]-'a', b = s[i-1]-'a';
        if(a==b) continue;
        arr[a][b]++;
        arr[b][a]++;
    }
//    for(int i = 0; i<m; i++){
//        for(int mask = 0; mask<(1<<m); mask++){
//            if(mask&(1<<i)) continue;
//            for(int j = 0; j<m; j++){
//                if(mask&(1<<j)){
//                    s
//                    break;
//                }
//            }
//        }
//    }

//    for(int i = 0; i<m; i++){
//        for(int j = 0; j<m; j++) cout<<i<<" "<<j<<" "<<arr[i][j]<<endl;
//    }

    dpp[(1<<m)-1] = 0;
    for(int i = (1<<m)-2; i>=0; i--){
        dpp[i] = MAX;
        int cnt = __builtin_popcount(i);
        int last = -1;
        for(int j = 0; j<m; j++){
            if(!(i&(1<<j))){
                int ans = dpp[i^(1<<j)];
                for(int k = 0; k<m; k++){
                    if(i&(1<<k)) ans += arr[j][k]*cnt;
                    else ans -= arr[j][k]*cnt;
                }
                if(ans<dpp[i]) last = j;
                dpp[i] = min(dpp[i],ans);
            }
        }
        //cout<<i<<" "<<last<<" "<<dpp[i]<<endl;
    }

    printf("%d\n",dpp[0]);
    return 0;
}
