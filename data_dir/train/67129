#include <bits/stdc++.h>

using namespace std;

#define mp make_pair

long double dist(pair<long long, long long> p1, pair<long long, long long> p2) {
    return sqrtl((p1.first - p2.first) * (p1.first - p2.first) + (p1.second - p2.second) * (p1.second - p2.second));
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    long long ax, ay, bx, by, tx, ty;
    cin >> ax >> ay >> bx >> by >> tx >> ty;
    int n;
    cin >> n;
    vector<pair<long long, long long>> m(n);
    long double ans = 0;

    for (int i = 0; i < n; ++i) {
        cin >> m[i].first >> m[i].second;
        ans += 2 * dist(m[i], mp(tx, ty));

    }

    pair<long double, int> ans1 = mp(dist(mp(ax, ay), m[0]) - dist(m[0], mp(tx, ty)), 0);
    pair<long double, int> ans2 = mp(dist(mp(bx, by), m[0]) - dist(m[0], mp(tx, ty)), 0);
    for (int i = 0; i < n; ++i) {
        if (dist(mp(ax, ay), m[i]) - dist(m[i], mp(tx, ty)) < ans1.first) {
            ans1 = mp(dist(mp(ax, ay), m[i]) - dist(m[i], mp(tx, ty)), i);
        }

        if (dist(mp(bx, by), m[i]) - dist(m[i], mp(tx, ty)) < ans2.first) {
            ans2 = mp(dist(mp(bx, by), m[i]) - dist(m[i], mp(tx, ty)), i);
        }
    }

    long double sum = ans;
    ans = sum - dist(m[ans1.second], mp(tx, ty)) + dist(mp(ax, ay), m[ans1.second]);
    ans = min(ans, sum - dist(m[ans2.second], mp(tx, ty)) + dist(mp(bx, by), m[ans2.second]));

    for (int i = 0; i < n; ++i) {
        if (i != ans2.second)
            ans = min(ans, sum - dist(m[ans2.second], mp(tx, ty)) + dist(mp(bx, by), m[ans2.second]) - dist(m[i], mp(tx, ty)) + dist(mp(ax, ay), m[i]));
        if (i != ans1.second)
            ans = min(ans, sum - dist(m[ans1.second], mp(tx, ty)) + dist(mp(ax, ay), m[ans1.second]) - dist(m[i], mp(tx, ty)) + dist(mp(bx, by), m[i]));
    }
    cout << fixed << setprecision(10);
    cout << (double)ans;

    return 0;
}
