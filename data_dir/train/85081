#pragma GCC target("avx2")
#pragma GCC optimize("O3")
   
#include <x86intrin.h>
#include <bits/stdc++.h>   
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;

template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)3e5 + 123;
const ll inf = (ll)1e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, k, s[N], x, y, add[4 * N], t[4 * N];
vector <pii> q[N];

void push (int v, int tl, int tr) {
   if (!add[v]) return;
   t[v] = tr - tl + 1 - t[v];
   if (tl != tr) {
      add[v + v] ^= add[v];
      add[v + v + 1] ^= add[v];
   }
   add[v] = 0;
}

void upd (int l, int r, int v = 1, int tl = 1, int tr = n) {
   push (v, tl, tr);
   if (tl > r || tr < l) return;
   if (l <= tl && tr <= r) {
      add[v] = 1;
      push (v, tl, tr);
      return;
   }
   int tm = tl + tr >> 1;
   upd (l, r, v + v, tl, tm);
   upd (l, r, v + v + 1, tm + 1, tr);
   t[v] = t[v + v] + t[v + v + 1];
}

int get (int l, int r, int v = 1, int tl = 1, int tr = n) {
   push (v, tl, tr);
   if (tl > r || tr < l) return 0;
   if (l <= tl && tr <= r) return t[v];
   int tm = tl + tr >> 1;
   return get (l, r, v + v, tl, tm) + get (l, r, v + v + 1, tm + 1, tr);
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> n >> k;
   for (int i = 1; i <= n; i ++) cin >> s[i];
   sort (s + 1, s + n + 1);
   for (int i = 1; i <= k; i ++) {
      int x, y;
      cin >> x >> y;
      x = lb (s + 1, s + n + 1, x) - s;
      y = ub (s + 1, s + n + 1, y) - s - 1;
      q[x].pb ({x, y});
      q[y + 1].pb ({x, y});
   }
   int ans = n * (n - 1) * (n - 2) / 6;
   for (int i = 1; i <= n; i ++) {
      for (auto it : q[i]) upd (it.F, it.S);
      int p = i - 1 - get (1, i - 1) + get (i + 1, n);
      ans -= p * (p - 1) / 2;
   }
   cout << ans;
}

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
   //cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
                          