#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)	for(int i=a;i<b;i++)
using namespace std;
long double ans[1001][1001][2];
//ans[i][j][k]=probability of princess winning with i white balls, j black balls, (k==0=>princess turn,k==1=>dragon's chance)
long double answer(int w,int b,int x){
	if(ans[w][b][x]>=0)return ans[w][b][x];
	int i=w;
	int j=b;
	if(w+b==0)return ans[w][b][x]=0;
	if(w==0)return ans[w][b][x]=0;
	if(b==0)return ans[w][b][x]=1-x;
	if(x==0)return ans[w][b][x]=(i*1.0l)/(i+j)+(j*1.0l)/(i+j)*answer(w,b-1,1);
	else if(b-2>=0) return ans[w][b][x]=((j*1.0l)/(i+j))*(((j-1)*1.0l)/(i+j-1))*answer(w,b-2,0)+((j*1.0l)/(i+j))*((i*1.0l)/(i+j-1))*answer(w-1,b-1,0);
	else return ans[w][b][x]=((j*1.0l)/(i+j))*((i*1.0l)/(i+j-1))*answer(w-1,b-1,0);
}
void solve(){
	rep(i,0,1001)rep(j,0,1001)rep(k,0,2)ans[i][j][k]=-1;
	int w,b;
	cin>>w>>b;
	cout<<fixed<<setprecision(10)<<answer(w,b,0);
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t=1;
//	cin>>t;
	while(t--){
		solve();
	}
	return 0;
}