#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <deque>
#include <map>
#include <set>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; }
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; }

const int MAXN = 101*1000;
int n, k, a[MAXN];

int main() {
	ios::sync_with_stdio(false);
	cin >> n >> k;
	FOR(i, 0, n) cin >> a[i];
	sort(a, a+n);
	int res = 1, last = 0, best = a[0];
	ll sum = a[0];
	FOR(i, 1, n) {
		sum += a[i];
		while (1LL*(i-last+1)*a[i]-sum > k) sum -= a[last++];
		if (res < i-last+1) res = i-last+1, best = a[i];
	}
	cout << res << " " << best << endl;
	return 0;
}

