//**KEEP IT SHORT AND SIMPLE**
#include <bits/stdc++.h>
#define IO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define FILES freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define REP(i,a,b) for (int i = a; i < b; i++)
#define NL '\n'
#define F first
#define S second
#define dot(a, b) (conj(a) * (b)).real()
#define cross(a, b) (conj(a)* (b)).imag()
using namespace std;
typedef long long ll;
typedef long double ld;
typedef bool bl;
typedef vector < vector<long long> > vvl;
typedef vector <long long> vll;
typedef pair <long long, long long> pll;
typedef map <long long, long long> mll;
typedef map <long long, bool> mlb;
typedef priority_queue<long long, vector<long long>, greater<long long> > minPq;
typedef tuple<ll, ll, ll> line;
typedef complex<double> point;
const double pi = 2 * acos(0.0);
const int OO = 0x3f3f3f3f;
using namespace std;
int n, m;
vector< vector<pll> > Adj(100005);
pll costs[100005];
void dijkstra(int src)
{
    REP(i, 0, n + 5)    costs[i].F = 1e13;
    costs[src] = {0, 1};
    priority_queue<pll, vector<pll>, greater<pll> >pq;
    pq.push({0, src});
    while(pq.size())
    {
        ll newNode = pq.top().S, newNodeCost = pq.top().F;
        pq.pop();
        if(newNodeCost > costs[newNode].F)  continue;
        REP(i, 0, Adj[newNode].size())
        {
            ll currNode = Adj[newNode][i].F, sum = newNodeCost + Adj[newNode][i].S;
            if(sum < costs[currNode].F)
            {
                costs[currNode] = {sum, newNode};
                pq.push({sum, currNode});
            }
        }
    }
}
void print(int i)
{
    if(i == costs[i].S)
    {
        cout << i << ' ';
        return;
    }
    print(costs[i].S);
    cout << i << ' ';
}
int main()
{
    IO
    int a, b, c;
    cin >> n >> m;
    while(m--)
    {
        cin >> a >> b >> c;
        if(a != b)
        {
            Adj[a].push_back({b, c});
            Adj[b].push_back({a, c});
        }
    }
    dijkstra(1);
    if(costs[n].F == 1e13)  cout << -1;
    else                    print(n);
    return 0;
}
