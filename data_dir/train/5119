#include <bits/stdc++.h>
using namespace std;
#define mp make_pair
#define pb push_back
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(),(x).end()
#define FOR(it,c) for (__typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
typedef long long ll;
const int oo = (int) 1e9;
const int mod = (int) 1e9 + 7;
const double PI = acos(-1.0);
#define point pair<ll,ll>
#define X first
#define Y second

const int MAX = 1001;
int n;
point p[MAX];
vector<point> rem;

bool check(point a)
{
    if(rem.size() == 0) return false;
    if(rem.size() == 1) return true;
    point v = { rem[1].first - rem[0].first , rem[1].second - rem[0].second };
    for(int i=2;i<sz(rem);i++){
        point w = { rem[i].first - rem[0].first , rem[i].second - rem[0].second };
        if(v.first * w.second - v.second * w.first != 0)
            return false;
    }
    return v.first * a.second - v.second * a.first == 0;
}

int main()
{
    cin >> n;
    for(int i=0;i<n;i++){
        p[i].X = i+1;
        cin >> p[i].Y;
    }
    for(int it = 0 ; it < 2 ; it++){
        int f = 1;
        double M = -1e18;
        for(int i=1;i<n;i++){
            double a = (1.0 * (p[i].second - p[0].second)) / (1.0 * (p[i].first - p[0].first));
            if(a > M){
                M = a;
                f = i;
            }
        }
        rem.clear();
        point v = { p[f].first - p[0].first , p[f].second - p[0].second };
        for(int i = 0; i < n ; i++){
            point w = { p[i].first - p[0].first , p[i].second - p[0].second };
            if(v.first * w.second - v.second * w.first != 0)
                rem.push_back(p[i]);
        }
        if(check(v)){
            cout << "Yes" << endl;
            return 0;
        }
//        cout << f << endl;

        f = 1;
        M = 1e18;
        for(int i=1;i<n;i++){
            double a = (1.0 * (p[i].second - p[0].second)) / (1.0 * (p[i].first - p[0].first));
            if(a < M){
                M = a;
                f = i;
            }
        }
        rem.clear();
        v = { p[f].first - p[0].first , p[f].second - p[0].second };
        for(int i = 0; i < n ; i++){
            point w = { p[i].first - p[0].first , p[i].second - p[0].second };
            if(v.first * w.second - v.second * w.first != 0)
                rem.push_back(p[i]);
        }
        if(check(v)){
            cout << "Yes" << endl;
            return 0;
        }
        reverse(p,p+n);
    }
    cout << "No" << endl;
    return 0;
}


