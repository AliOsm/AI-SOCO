#pragma GCC optimize("Ofast")
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
//#define int long long
#define ll long long
//#define int  unsigned long long
#define pb push_back
//#define double long double

using namespace std;
using namespace __gnu_pbds;
typedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
const int N = 11000;
const int K = 10000;
int a[N], b[N], dp[N], f[N], dp2[N], dp3[N], dp4[N];
main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
   // freopen("input.txt", "r", stdin);
    int n, l, r;
    cin >> n >> l >> r;
    for (int i = 1; i <= n; i++) cin >> a[i];
    vector <int> t, c;
    int ans = 0;
    for (int i = 1; i <= n; i++){
        cin >> b[i];
        if (b[i] == 1) t.pb(a[i]); else c.pb(a[i]);
    }
    sort(t.begin(), t.end());
    dp[0] = 1;
    for (int i = 0; i < c.size(); i++){
        int x = c[i];
        for (int j = x; j <= K; j++){
            dp3[j] |= dp[j - x];
        }
        for (int j = 0; j <= K; j++){
            dp[j] |= dp3[j];
        }
        memset(dp3, 0, sizeof(dp3));
    }
    int s = 0;
    for (auto x: t) s += x;
    int sz = t.size();
    for (int i = sz - 1; i >= 0; i--){
        int c = -1;
        for (int j = l; j + s <= r; j++){
            if (dp[j] == 0 && dp3[j] == 0) continue;
            c = i + 1;
            break;
        }
        if (c != -1){
            for (int j = l; j + s <= r; j++){
                if (dp2[j]){
                    c++;
                    break;
                }
            }
        }
        int x = t[i];
        if (i != sz - 1){
            for (int j = x; j <= K; j++){
                dp4[j] |= dp2[j - x];
            }
            for (int j = 0; j <= K; j++){
                dp2[j] |= dp4[j];
            }
            memset(dp4, 0, sizeof(dp4));
            for (int j = 0; j <= K; j++){
                dp2[j] |= dp3[j];
            }
            for (int j = x; j <= K; j++){
                dp4[j] |= dp3[j - x];
            }
            for (int j = 0; j <= K; j++){
                dp3[j] |= dp4[j];
            }
            memset(dp4, 0, sizeof(dp4));
        }
        if (i == sz - 1){
            for (int j = 0; j <= K; j++){
                dp2[j] |= dp[j];
            }
            for (int j = 0; j <= K; j++){
                if (j >= x) dp3[j] |= dp[j - x];
                dp3[j] |= dp[j];
            }
        }
        s -= x;
        ans = max(ans, c);
    }
    int cc = 0;
    for (int j = l; j + s <= r; j++){
        if (dp2[j]){
            cc++;
            break;
        }
    }
    cout << max(cc, ans);
}
