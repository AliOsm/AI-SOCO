//██████╗ ██╗   ██╗██╗      ██████╗ ███████╗
//██╔══██╗██║   ██║██║      ██╔══██╗██╔════╝
//██████╔╝██║   ██║██║█████╗██║  ██║█████╗
//██╔══██╗██║   ██║██║╚════╝██║  ██║██╔══╝
//██║  ██║╚██████╔╝██║      ██████╔╝███████╗
//╚═╝  ╚═╝ ╚═════╝ ╚═╝      ╚═════╝ ╚══════╝
#include <bits/stdc++.h>

// #pragma GCC target("sse,sse2,sse3,ssse3,sse4")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
using namespace std;

#define fst first
#define snd second
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define eb emplace_back

#define all(v) (v).begin(), (v).end()
#define sz(v) ((int)(v).size())
#define sqr(x) ((x) * (x))

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;

#define next ajksdslk
#define prev aklsfjk

mt19937_64 mt_rand(chrono::system_clock::now().time_since_epoch().count());

template<typename T1, typename T2>
inline bool upmax(T1& a, T2 b) { return (a < b ? (a = b, true) : false); }

template<typename T1, typename T2>
inline bool upmin(T1& a, T2 b) { return (b < a ? (a = b, true) : false); }

const int maxn = (int)  3e5 + 100;
const int maxlog = 21;
const int base = 1e9 + 7;
const ld eps = (ld) 1e-9;
const ld PI = acos(-1.);
//const int pp = 41;
const int inf = 2e9;
const ll llinf = 2e18;

ll t[maxn * 4];
ll p[maxn * 4];

void bld(int v, int l, int r) {
  p[v] = llinf;
  if (l == r) {
    t[v] = l ? llinf : 0;
  } else {
    int m = (l + r) >> 1;
    bld(v + v, l, m);
    bld(v + v+ 1, m + 1, r);
    t[v] = min(t[v + v], t[v + v + 1]);
  }
}

void push(int v, int l, int r) {
  if (p[v] != llinf && l != r) {
    upmin(p[v + v], p[v]);
    upmin(p[v + v + 1], p[v]);
    upmin(t[v + v], p[v]);
    upmin(t[v +  v+ 1], p[v]);
    p[v] = llinf;
  }
}

void upd(int v, int tl, int tr, int l, int r, ll val) {
  if (tl == l && tr == r) {
    upmin(t[v], val);
    upmin(p[v], val);
  } else{
    push(v, tl, tr);
    int m = (tl + tr) >> 1;
    if (l <= m) upd(v + v, tl, m, l, min(r, m), val);
    if (r > m) upd(v + v+ 1, m + 1, tr, max(l, m + 1), r, val);
    t[v] = min(t[v + v], t[v + v + 1]);
  }
}

ll get(int v, int tl, int tr, int l, int r) {
  if (tl == l && tr == r) {
    return t[v];
  }
  push(v, tl, tr);
  int m = (tl + tr) >> 1;
  ll ans = llinf;
  if (l <= m) upmin(ans, get(v + v, tl, m, l, min(r,m)));
  if (r > m) upmin(ans, get(v + v + 1, m + 1, tr, max(l, m + 1), r));
  return ans;
}

int main() {
//  freopen("input.txt", "r", stdin);
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int n, k;
  cin >> n >> k;
  bld(1, 0, n);
  string s;
  cin >> s;
  for (int i = 0; i < n; i ++) {
    if (s[i] == '1') {
      int l = max(i - k, 0);
      int r = i;
      ll kek = get(1, 0, n, l, r);
      r = min(i + k + 1, n);
      upd(1, 0, n, l, r, kek + i + 1);
    } else {
      ll kek = get(1, 0, n, i, i);
      upd(1, 0, n, i + 1, i + 1, kek + i + 1);
    }
  }

  cout << get(1, 0, n, n, n) << '\n';

  return 0;
}