#include <bits/stdc++.h>
using namespace std;
typedef long long Long;

//const Long MX = ;

vector< vector<Long> > ari;
vector< vector<Long> > adj;
vector< pair<Long,Long> > rp;
vector< Long > peso;

void dfs(Long u, Long p){
	vector<Long> hijos;
	for(Long v : adj[u]){
		if(v != p){
			dfs(v,u);
			hijos.push_back(rp[v].second);
		}
	}
	sort(hijos.rbegin(),hijos.rend());
	if(hijos.size() >= 2){
		rp[u] = {peso[u] + hijos[0] + hijos[1] + adj[u].size() - 2, peso[u] + hijos[0] + hijos.size() - 1};
	}else if(hijos.size() == 1){
		rp[u] = {peso[u] + hijos[0] + adj[u].size() - 1, peso[u] + hijos[0] + hijos.size() - 1};
	}else{
		rp[u] = {peso[u] + adj[u].size(),peso[u]};
	}
	return;
}

void solve(){
	peso.clear();
	ari.clear();
	adj.clear();
	rp.clear();
	
	Long n, x, y;
	cin >> n;
	
	ari.resize(n+1);
	adj.resize(n+1);
	peso.resize(n+1,0);
	rp.resize(n+1,{0,0});
	
	for(Long i = 1; i < n; i++){
		cin >> x >> y;
		ari[x].push_back(y);
		ari[y].push_back(x);
	}
	
	if(n == 2){
		cout << 2 << "\n";
		return;
	}
	
	Long root = -1;
	for(Long i = 1; i <= n; i++){
		if(ari[i].size() < 2) continue;
		root = i;
		peso[i]++;
		for(Long h : ari[i]){
			if(ari[h].size() == 1){
				peso[i]++;
			}else{
				adj[i].push_back(h);
			}
		}
	}
	
	dfs(root,-1);
	
	Long mx = 0;
	for(Long i = 1; i <= n; i++){
		mx = max(mx,rp[i].first);
	}
	cout << mx << "\n";
	return;
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cout.precision(10);
	cout << fixed;
	
	Long t;
	cin >> t;
	while(t--){
		solve();
	}
	return 0;
}
