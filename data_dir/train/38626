#include<bits/stdc++.h>
#define ll          long long int
#define db          double
#define pf          printf
#define sf          scanf
#define ff          first
#define ss          second
#define clr         clear()
#define sz          size()
#define pb          push_back
#define mk          make_pair
#define pi          acos(-1)
#define inf         1000000007
#define mod          998244353


#define q(n)        q.push(n)
#define ull         unsigned long long int
#define f(i,k,n)    for(ll i=k;i<n;i++)
#define fr(i,n,k)   for(ll i=n;i>=k;i--)
#define ent(a)      scanf("%lld",&a)
#define ent2(a,b)   scanf("%lld%lld",&a,&b)
#define ent3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define mem(a)      memset(a,0,sizeof(a))
#define mem1(a)     memset(a,-1,sizeof(a))
#define vec(v,s)    vector<ll>v[s]
#define arr(a,s)    ll a[s]
//#define check(n,pos) (n&(1<<pos))
//#define set(n,pos)  (n|(1<<pos))
//knight and king//
int dr[]= {2,2,-2,-2,1,-1,1,-1};
int dc[]= {1,-1,1,-1,2,2,-2,-2};
int dr1[]= {0,0,1,1,1,-1,-1,-1};
int dc1[]= {1,-1,1,0,-1,0,1,-1};
int dr2[]= {0,0,1,-1};
int dc2[]= {1,-1,0,0};
////////////////////////////
using namespace std;

#define ma 100005

ll tree[ma*3];
ll a[ma];
void update(ll n,ll b,ll e,ll x,ll val)
{
 if(b==e)
 {
  tree[n]=val;
  return;
 }
 ll mid=(b+e)>>1,l=n*2,r=l+1;
 if(x<=mid)update(l,b,mid,x,val);
 else update(r,mid+1,e,x,val);
 tree[n]=max(tree[l],tree[r]);
}

ll query(ll n,ll b,ll e,ll x,ll y)
{
 if(b>y||e<x)return 0;
 if(b>=x&&e<=y)return tree[n];
 ll mid=(b+e)>>1,l=n*2,r=l+1;
 ll p=query(l,b,mid,x,y);
 ll p1=query(r,mid+1,e,x,y);
 return max(p,p1);
}


int main()
{
 ll n,x,h,i,j;
 while(cin>>n)
 {
  vector<pair<ll,pair<ll,ll> > >v;

  f(i,1,n+1)
  {
   cin>>x>>h;
   v.pb(mk(x,mk(h,i)));
  }

  sort(v.begin(),v.end());
  ll max1=0;

  for(i=v.sz-1;i>=0;i--)
  {
   ll p=v[i].ff+v[i].ss.ff-1;
   ll lo=i,hi=v.sz-1,mid,ans;

   while(lo<=hi)
   {
    ll mid=(lo+hi)>>1;
    if(v[mid].ff>p)hi=mid-1;
    else
    {
     ans=mid;
     lo=mid+1;
    }
   }

   ll r=query(1,0,n-1,i,ans);
   r=max(r,ans);
   update(1,0,n-1,i,r);
   //1cout<<r-i+1<<endl;
   a[v[i].ss.ss]=r-i+1;



  }

  for(i=1;i<=n;i++)cout<<a[i]<<" ";
  cout<<endl;

 }


 return 0;
}
