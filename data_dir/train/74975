#include<bits/stdc++.h>
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;
using namespace std;
typedef long long int ll;
ll lazy[4000002],lazymask[4000002],tree[4000002],a[500005],n,mask[4000002]={0},prime[305],inv[1000];
const long long int mod=1e9+7;
vector<ll>v;
string s;
void modularInverse(ll n, ll prim)
{
	inv[0] = inv[1] = 1;
	for (ll i = 2; i <= n; i++)
		inv[i] = (inv[prim % i] *(prim -  prim / i) % prim)%prim;
}
/********************************/
void sieve(ll x)
{
    prime[0]=0;prime[1]=0;
    for(int i=2;i<=x;i++)prime[i]=1;
    for (int p=2; p<=x; p++)
    {
        if (prime[p]==1)
        {
            v.push_back(p);
            for (int i=p*2; i<=x; i += p)
                prime[i]=0;
        }
    }
}
/********************************/
ll pow(ll a,ll b,ll mod)
{
  if(b==0) return 1;
  else if(b%2==0) return pow(a*a%mod,b/2,mod);
  else return pow(a,b-1,mod)*a%mod;
}
/********************************/
void build(ll id,ll start,ll end){
	if(start==end){
		for(ll j=0;j<62;j++){
            if((a[start]%v[j])==0)mask[id]|=(1LL<<j);
		}
		tree[id]=a[start]%mod;
	}
	else{
		ll mid=(start+end)/2;
		build(2*id,start,mid);
		build(2*id+1,mid+1,end);
		tree[id]=(tree[2*id]*tree[2*id+1])%mod;
		mask[id]=(mask[2*id]|mask[2*id+1]);
	}
}
/********************************/
void upd(ll id,ll l,ll r,ll val,ll maskpush){//if(val){}
	if(val!=1){
	  lazy[id]*=val;
	  lazy[id]%=mod;
	  lazymask[id]|=maskpush;
	  tree[id]*=pow(val,(r-l+1),mod);
	  tree[id]%=mod;
      mask[id]|=maskpush;
	}
}
/********************************/
void shift(ll id,ll l,ll r){
	    ll mid=(l+r)/2;
	    upd(2*id,l,mid,lazy[id],lazymask[id]);
	    upd(2*id+1,mid+1,r,lazy[id],lazymask[id]);
	    lazy[id]=1;
	    lazymask[id]=0;
}
/********************************/
 void MULTIPLY(ll l,ll r,ll v,ll maskpush,ll id,ll start,ll end){
	if(l>end or r<start)return;
	if(l<=start&&r>=end){
		upd(id,start,end,v,maskpush);
		return ;
	}
	shift(id,start,end);
	ll mid=(start+end)/2;
	MULTIPLY(l,r,v,maskpush,id*2,start,mid);
	MULTIPLY(l,r,v,maskpush,id*2 +1,mid+1,end);
	tree[id]=(tree[2*id]*tree[2*id+1])%mod;
	mask[id]=(mask[2*id]|mask[2*id+1]|lazymask[id]);
}
/********************************/
pair<ll,ll> query(ll l,ll r,ll id,ll start,ll end){
	if(l>end or r<start )return {1,0};
	shift(id,start,end);
	if(l<=start&&r>=end){
        return {tree[id],mask[id]};
	}
	//c'est necessaire
	ll mid=(start+end)/2;
	pair<ll,ll> p1=query(l,r,2*id,start,mid);
	pair<ll,ll> p2=query(l,r,2*id+1,mid+1,end);
	return {(p1.first*p2.first)%mod,p1.second|p2.second};
}
/********************************/

int main(){
    In_the_name_of_allah_the_merciful
   //freopen("a.in","r",stdin);
	ll i,j,k,nb,x,t,q,l,r,prev=10;
	char c;
	sieve(300);
	modularInverse(999,mod);
	for(i=0;i<=4000001;i++){
        mask[i]=0;
        lazy[i]=1;
        tree[i]=0;
        lazymask[i]=0;
	}
	cin>>n>>q;
	for(i=1;i<=n;i++){
	    cin>>a[i];
	}
	build(1,1,n);
	while(q--){
		cin>>s;
		if(s=="MULTIPLY"){
			cin>>l>>r>>x;
			ll msk=0;
			for(j=0;j<62;j++){
                if((x%v[j])==0){
                    msk|=(1LL<<j);
                }
			}
			MULTIPLY(l,r,x,msk,1,1,n);
		}
		else {
			cin>>l>>r;
			pair<ll,ll> p=query(l,r,1,1,n);
			ll res=p.first;
			ll msk=p.second;
			for(j=0;j<62;j++){
                if(msk&(1LL<<j)){
                    res*=((v[j]-1)*(inv[v[j]]))%mod;
                    res%=mod;
                }
			}
			cout<<res<<endl;
		}
     }
     Alhamdulillah
}

