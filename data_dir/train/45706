#include <bits/stdc++.h>

using namespace std;

const int N = 20, M = 150;

int n;
char s[M][N + 10];

typedef long long li;
typedef long double ld;

li d[1 << N];

inline bool has(li msk, int pos) {
  return msk >> pos & 1;
}

ld prob[N + 10];
ld totalGuessed[N + 10];

int main() {
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%s", s[i]);
  }
  int m = strlen(s[0]);
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) if (i != j) {
      int same = 0;
      for (int k = 0; k < m; ++k) {
        if (s[i][k] == s[j][k]) same |= (1 << k);
      }
      d[same] |= (1ll << i);
    }
  }
  for (int msk = (1 << m) - 1; msk; --msk) {
    for (int i = 0; i < m; ++i) {
      if (has(msk, i)) d[msk ^ (1 << i)] |= d[msk];
    }
  }
  ld ans = 0;
  for (int msk = 0; msk < 1 << m; ++msk) {
    int moves = __builtin_popcount(msk) + 1;
    for (int i = 0; i < m; ++i) if (!has(msk, i)) {
      li res = d[msk] ^ d[msk ^ (1 << i)];
      if (res == 0) continue;
      int cnt = __builtin_popcountll(res);
      totalGuessed[moves] += cnt;
    }
  }
  for (int i = 1; i <= m; ++i) {
    ld val = totalGuessed[i] * i;
    for (int j = 0; j < i - 1; ++j) val *= ld(i - 1 - j) / ld(m - j);
    ans += val / ld(m - i + 1);
  }
  ans /= ld(n);
  printf("%.12f\n", (double)ans);
  return 0;
}
