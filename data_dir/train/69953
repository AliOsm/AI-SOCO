#include <unordered_map>
#include <cassert>
#include <list>
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d%d", &a, &b)
#define sc3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define scs(a) scanf("%s", a)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define db(x) cerr << #x << " == " << x << endl
#define dbs(x) cerr << x << endl
#define imprime(x, Y)                               \
   for (int X = 0; X < Y; X++) cerr << x[X] << " "; \
   cerr << endl;
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vector<ii> > vvii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9 + 7;
const int N=3e4+10;
int dp[N][501];
int pedra[N],n,d;
int solve(int cid, int last, int ofset){
    if(cid>=N) return 0;
    if(dp[cid][last]!=-1) return dp[cid][last];
    int ret=0;
    if(last+ofset-1>=1)
    ret=max(solve(cid+last+ofset-1,last-1,ofset),ret);
    ret=max(solve(cid+last+ofset,last,ofset),ret);
    ret=max(solve(cid+last+ofset+1,last+1,ofset),ret);
    ret+=pedra[cid];
    return dp[cid][last]=ret;
}
int main()
{
    sc2(n,d);
    for(int i=0;i<n;i++){
        int x;
        sc(x);
        pedra[x]++;
    }
    memset(dp,-1,sizeof(dp));
    cout<<solve(d,250,d-250)<<endl;
   return 0;
}
