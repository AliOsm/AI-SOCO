// October.cpp : Defines the entry point for the console application.
//

#include "iostream"
#include "algorithm"
#include "vector"
#include "set"
#include "string"
#include "map"
#include "stack"
#include "bitset"
#include "deque"
#include "queue"
#include "cmath"
#include "fstream"
#include "list"
#include "unordered_set"
#include "functional"
using namespace std;
typedef long long ll;
typedef long double ld;
#define int ll
#define double ld
#define all(a) a.begin(), a.end()
const int N = 200050;
const int mod = 998244353;
int a[N], pref[N];
vector<int>  tree[4 * N];
int n, t;

void mergeit(int v) {
	int i = 0, j = 0;
	int n = tree[v << 1].size(), m = tree[v << 1 | 1].size();
	while (i < n || j < m) {
		if (i >= n) 
			tree[v].push_back(tree[v << 1 | 1][j++]);
		else if (j >= m) 
			tree[v].push_back(tree[v << 1][i++]);
		else if (tree[v << 1][i] > tree[v << 1 | 1][j]) 
			tree[v].push_back(tree[v << 1 | 1][j++]);
		else
			tree[v].push_back(tree[v << 1][i++]);
	}
}

void build(int v, int tl, int tr) {
	if (tl == tr) {
		tree[v].push_back(pref[tl]);
		return;
	}
	int mid = (tl + tr) >> 1;
	build(v << 1, tl, mid);
	build(v << 1 | 1, mid + 1, tr);
	mergeit(v);
}

int get_(int v, int tl, int tr, int l, int r, int val) {
	if (l > r)
		return 0;
	if (l == tl && r == tr) {
		return lower_bound(tree[v].begin(), tree[v].end(), val) - tree[v].begin();
	}
	int mid = (tl + tr) >> 1;
	int ret = 0;
	if (l <= mid)
		ret += get_(v << 1, tl, mid, l, min(r, mid), val);
	if (r > mid)
		ret += get_(v << 1 | 1, mid + 1, tr, max(l, mid + 1), r, val);
	return ret;
}

signed main()
{
	ios::sync_with_stdio(0);
	cin >> n >> t; 
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 1; i <= n; i++)
		pref[i] = pref[i - 1] + a[i];
	build(1, 1, n);
	int ans = 0;
	for (int i = 1; i <= n; i++) {
		ans += get_(1, 1, n, i, n, t + pref[i - 1]);
	}
	cout << ans;
	return 0;
}