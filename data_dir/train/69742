#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 10;
const int B = 1e9 + 7;

int n, k;
int a[N];
int cnt;
map<int, int> mp;
vector<int> v;
// lucky num total : 1022
long long f[N] = {1};
long long fac[N] = {1};
long long ans;

int lucky(int x) {
  while (x) {
    if (x % 10 != 4 && x % 10 != 7)
      return 0;
    x /= 10;
  }
  return 1;
}

long long mypow(long long a, long long b) {
  long long res = 1;
  while (b) {
    if (b & 1) res = res * a % B;
    a = a * a % B;
    b >>= 1;
  }
  return res;
}

long long inv(long long x) {
  return mypow(x, B - 2);
}

long long c(int n, int m) {
  if (n < m) return 0;
  long long res = fac[n];
  res = res * inv(fac[m]) % B;
  res = res * inv(fac[n - m]) % B;
  return res;
}

int main() {
  for (int i = 1; i < N; ++i) {
    fac[i] = fac[i - 1] * i % B;
  }
  scanf("%d%d", &n, &k);
  for (int i = 0; i < n; ++i) {
    scanf("%d", a + i);
  }
  for (int i = 0; i < n; ++i) {
    if (lucky(a[i])) {
      mp[a[i]]++;
    }
    else {
      cnt++;
    }
  }
  for (auto p : mp) {
    if (p.second > 1)
      v.push_back(p.second);
    else if (p.second == 1)
      ++cnt;
  }
  int t = 0;
  for (int i = 0; i < v.size(); ++i) {
    t = min(k, i + 1);
    for (int j = t; j; --j) {
      f[j] = (f[j] + f[j - 1] * v[i] % B) % B;
    }
  }
  for (int i = 0; i <= t; ++i) {
    ans = (ans + f[i] * c(cnt, k - i) % B) % B;
  }
  printf("%I64d\n", ans);
  return 0;
}
