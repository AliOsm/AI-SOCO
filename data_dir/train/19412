#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define repr(i,x,y) for (__typeof(x) i=x;i>=y;i--)
#define rep(i,x,y) for (__typeof(x) i=x;i<=y;i++)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

/* Print pair */
template <typename T,typename S>
ostream & operator << (ostream &os , const pair<T,S> &v) {
    os << "(" ;
    os << v.first << "," << v.second << ")" ;
    return os ;
}
/* Print vector */
template <typename T>
ostream & operator << (ostream &os , const vector<T> &v) {
    os << "[" ;
    int sz = v.size() ;
    for(int i = 0 ; i < sz ; ++i) {
        os << v[i] ;
        if(i!=sz-1)os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print set */
template <typename T>
ostream & operator << (ostream &os , const set<T> &v) {
    T last = *v.rbegin() ;
    os << "[" ;
    for(auto it : v) {
        os << it  ;
        if(it != last) os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print Map */
template <typename T,typename S>
ostream & operator << (ostream &os , const map<T,S> &v) {
    for(auto it : v) {
        os << it.first << " : " << it.second << "\n" ;
    }
    return os ;
}
int power(int a , int b)
{
    int res = 1 ;
    while(b)
    {
        if(b%2) {
            res = (res * a) % mod ;
        }
        b/=2 ;
        a = (a*a) % mod ;
    }
    return res ;
}

//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
        cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
const int N = 1e5 + 5 ; 
int arr[N] ; 
int S[N] , E[N] ; 
int tree[N * 4] ; 
void update(int i,int l,int r,int index,int val) {
    if(l == r) {
        tree[i] = max(tree[i],val) ; 
        return ; 
    }
    int m = l + r >> 1 ; 
    if(index <= m) update(i*2,l,m,index,val);
    else update(i*2+1,m+1,r,index,val);
    tree[i]=max(tree[i*2],tree[i*2+1]);
} 
int query(int i,int l,int r,int s,int e) {
    if(r < s || l > e || l > r) return 0;
    if(l >=s && r <= e) return tree[i];
    int m = l + r >> 1 ; 
    return max(query(i*2,l,m,s,e),query(i*2+1,m+1,r,s,e));
}
int ans[N] ; 
int32_t main()
{
    fast;
    int n ; cin >> n ; 
    rep(i,1,n) cin >> arr[i] ;
    int lis = 0 ;  
    rep(i,1,n) {
        int val = 1 + query(1,1,100000,1,arr[i]-1) ;
        E[i] = val ;
        lis = max(lis,val) ; 
        update(1,1,100000,arr[i],val);
    }
    memset(tree,0,sizeof(tree));
    for(int i=n;i>0;--i) {
        int val = 1 + query(1,1,100000,arr[i]+1,100000) ;
        S[i] = val ;
        update(1,1,100000,arr[i],val);
    }
    map<int,int> cnt ; 
    rep(i,1,n) {
        if(S[i] + E[i] - 1 < lis) ans[i] = 1 ; 
        else ++cnt[E[i]] ; 
    }
    rep(i,1,n) {
        if(ans[i] != 1) {
            if(cnt[E[i]] > 1) ans[i] = 2 ; 
            else ans[i] = 3 ;
        }
        cout << ans[i] ;
    }
    cout << "\n" ; 
    return 0 ;
}
