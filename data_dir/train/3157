/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
#define mod 1000000007
#define OS //single input use oeis
lli INF=1e17;
lli eps=1e-8;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,x,c,m;
const double pi=3.14159265358979323846;
lli add(lli a, lli b) {
 	lli res = a + b;
 
 	while (res >= mod) res -= mod;
 
 	while (res < 0) res += mod;
 
 	return res;
}
// Thi
//matrix exponentiation is associative and distributive
lli parent[35];
lli ran[35];
void make_set(int v) {
    parent[v] = v;
    ran[v] = 0;
}
lli find_set(lli v)
{
if(v==parent[v])
return v;
return parent[v]=find_set(parent[v]);
}
void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        if (ran[a] < ran[b])
            swap(a, b);
        parent[b] = a;
        if (ran[a] == ran[b])
            ran[a]++;
    }
}

int main()
{
 IO;
 OS;
     cin>>n;
     string s;
     cin>>s;
    //  n=s.length();
     lli dp[n+1][30];
     mem2(dp,0);
     for(int j=0;j<n;j++)
     {
         for(int k=0;k<26;k++)
         dp[j+1][k]=dp[j][k];
         dp[j+1][s[j]-'a']++;
     }
    //  cout<<dp[3][2];
//  cout<<ans[5];
// cout<<dp[1]['c']
    // set<lli> vv[30];
    lli colours[26];
    for(int i=0;i<26;i++)
    colours[i]='a'-1;
    lli value[n+1];
    
    int cnt=0;
     for(int j=0;j<n;j++)
     {
         int i;
         for(i=0;i<26;i++)
         {
             cnt=max(cnt,i);
             if(colours[i]<=s[j])
             {
                 colours[i]=s[j];
                 value[j]=i;
                 break;
             }
         }
         
     }
     
     cout<<cnt+1<<"\n";
     
     for(int j=0;j<n;j++)
     cout<<value[j]+1<<" ";
     
     
}