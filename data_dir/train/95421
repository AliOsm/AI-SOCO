#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <map>
#include <algorithm>
#define fr first
#define sc second
using namespace std;
const int maxn=1e6+10;
int T,n,m,C,c0,cnt,tmp[maxn];
struct da{int t,maxc,val;}a[maxn];
map<int,int>v;
inline bool cmp(da aa,da bb){return aa.t<bb.t;}
long long solve()
{
	v[0]=c0; int lc=0,nowv=c0; long long ans=0;
	for (int i=1;i<=n+1;i++)
	{
		int need=a[i].t-lc;
/*		if (i==1)
		{
			printf("....................\n");
			for (auto j:v) printf("%d %d\n",j.fr,j.sc);
			printf("....................\n");
		}*/
		if (nowv<need) return -1;
		for (auto j=v.begin();j!=v.end();) 
		{
			if (!need) break;
			long long now=min(need,(*j).sc);
			ans+=now*(*j).fr; (*j).sc-=now; nowv-=now; need-=now;
			if ((*j).sc==0) j=v.erase(j);else j++;
		}
/*		if (i==1)
		{
			printf("....................\n");
			for (auto j:v) printf("%d %d\n",j.fr,j.sc);
			printf("....................\n");
		}*/
		if (i==n+1) break;
		int last=min(a[i].maxc,C-nowv);
		v[a[i].val]+=last; nowv+=last;
		int laa=a[i].maxc-last; cnt=0;
		for (auto j=v.rbegin();j!=v.rend();j++)
		if ((*j).fr>a[i].val) 
		{
			int now=min(laa,(*j).sc);
			v[a[i].val]+=now; laa-=now; (*j).sc-=now;
			if ((*j).sc==0) tmp[++cnt]=(*j).fr;
			if (!laa) break;
		}
		else break;
		for (int j=1;j<=cnt;j++) v.erase(tmp[j]);
		lc=a[i].t;
	}
return ans;
}
int main()
{
	scanf("%d",&T);
	while (T--)
	{
		scanf("%d%d%d%d",&n,&m,&C,&c0); v.clear(); a[n+1].t=m;
		for (int i=1;i<=n;i++) scanf("%d%d%d",&a[i].t,&a[i].maxc,&a[i].val);
		sort(a+1,a+n+1,cmp); printf("%lld\n",solve());
	}
return 0;
}