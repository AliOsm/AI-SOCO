#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define read(x) scanf( "%lld" , &x )
#define forq(i , a , b) for (int i = (a); i <= (b); ++i)
#define forr(i , b) forq( i , 0 , b - 1 )
#define carr( n , array ) forr(i , n) read(array[i])
#define coutarr(n , array ) cout << "\n" ; forr (i , n) printf("%lld " , array[i]) ; cout << "\n" ;
#define F first
#define S second
#define IF ->first
#define IS ->second
#define qqmemset(array , val) memset (array , val , sizeof(array))
#define ALLV(vect) vect.begin() , vect.end()
#define sizee(vec) (ll)vec.size()

ll R = 7 + 1e9 , NUMTESTCASE ;
const int NN = 10 + 1e5 ;
const double pi = acos(-1.0) ;
int di [4] = {1 , 0 , -1 , 0} , dj [4] = {0 , 1 , 0 , -1} , DI [8] = {1 , 1 , 0 , -1 , -1 , -1 , 0 , 1} , DJ [8] = {0 , 1 , 1 , 1 , 0 , -1 , -1 , -1} ;
using namespace std;

int main()
{
    ll x , k = 2 , draft ; cin >> x ;
    map <ll , ll> a ; draft = x ;
    while (k * k <= draft) {
        while (draft % k == 0) {
            draft /= k ; a[k] ++ ;
        }
        k ++ ;
    }
    if (draft != 1) a[draft] ++ ;
    vector <ll> div ;
    for (auto v : a){
        div.pb(v.F) ;
        while (--v.S) div.back() *= v.F ;
    }
    if (div.size() == 0) div.pb(1) ;
    if (div.size() == 1) div.pb(1) ;
    pair <ll , ll> ans = {1e13 , 1e13} ;
    for (int i = 1 ; i < (1 << div.size()) ; i ++) {
        ll t = i , draft1 = 1 , draft2 = 1 ;
        for (int j = 0 ; j < div.size() ; j ++) {
            if (t & 1) draft1 *= div[j] ;
            else draft2 *= div[j] ;
            t >>= 1 ;
        }
        if (max(draft1 , draft2) < max(ans.F , ans.S))
            ans = {draft1 , draft2} ;
    }
    cout << ans.F << " " << ans.S ;
    return 0;
}
