#include <bits/stdc++.h>
using namespace std;
typedef long long       ll;
typedef pair<int,int>   pii;
typedef vector<int>     vi;
typedef long double     ld;
#define MOD         1000000007
#define pb          push_back
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define endl        '\n'
#define PI          3.14159265359d
#define sz(x)       (int)x.size()
vi A[100005];
int n,bit[100005];
void update(int i,int v)
{
    for(;i<=n;i+=i&(-i))
        bit[i]+=v;
}
int query(int i)
{
    int s;
    for(s=0;i>0;i-=i&(-i))
        s+=bit[i];
    return s;
}
int range_query(int i,int j)
{
    if(i>j)
        return 0;
    return query(j)-query(i-1);
}
int main()
{
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    int i,x,cur=-1,j;
    ll res=0;
    cin>>n;
    for(i=1;i<=n;i++)
    {
        cin>>x;
        update(i,1);
        A[x].pb(i);
    }
    for(i=1;i<=100000;i++)
        if(!A[i].empty())
        {
            if(cur>A[i].back())
            {
                x=0;
                res+=range_query(cur+1,n)+range_query(1,A[i][0]);
                cur=A[i][0];
            }
            else
            {
                x=upper_bound(all(A[i]),cur)-A[i].begin();
                res+=range_query(cur+1,A[i][x]);
                cur=A[i][x];
            }
            update(A[i][x],-1);
            for(j=x+1;j<sz(A[i]);j++)
            {
                res+=range_query(cur+1,A[i][j]);
                update(A[i][j],-1);
                cur=A[i][j];
            }
            if(x>0)
            {
                res+=range_query(cur+1,n)+range_query(1,A[i][0]);
                cur=A[i][0];
                update(A[i][0],-1);
                for(j=1;j<x;j++)
                {
                    res+=range_query(cur+1,A[i][j]);
                    update(A[i][j],-1);
                    cur=A[i][j];
                }
            }
        }
    cout<<res;
    return 0;
}
