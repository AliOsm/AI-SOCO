#include <algorithm>
#include <assert.h>
#include <bitset>
#include <chrono>
#include <cstring>
#include <functional>
#include <iostream>
#include <istream>
#include <map>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#define endl '\n'

using namespace std;

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    int n, m;
    cin >> n >> m;

    vector<vector<int>> graph(n);
    vector<vector<int>> rev(n);
    vector<int> deg(n);

    for (int i = 0; i < m; ++i)
    {
        int u, v;
        cin >> u >> v;

        u--;
        v--;

        graph[u].push_back(v);
        rev[v].push_back(u);
        deg[v]++;
    }

    vector<int> order, rank(n);

    for (int i = 0; i < n; ++i)
    {
        if (deg[i] == 0)
            order.push_back(i);
    }

    for (int i = 0; i < order.size(); ++i)
    {
        int u = order[i];
        rank[u] = i;

        for (auto v : graph[u])
        {
            if (!--deg[v])
                order.push_back(v);
        }
    }

    if (order.size() != n)
    {
        cout << -1 << endl;
        return 0;
    }

    vector<int> le = order, ri = order;

    for (int i = 0; i < n; ++i)
    {
        int u = order[i];
        for (auto v : rev[u])
            le[i] = min(le[i], le[rank[v]]);
    }
    for (int i = n - 1; i >= 0; --i)
    {
        int u = order[i];
        for (auto v : graph[u])
            ri[i] = min(ri[i], ri[rank[v]]);
    }

    int answer = 0;

    for (int i = 0; i < n; ++i)
        if (le[i] == ri[i])
            answer++;

    cout << answer << endl;

    for (int i = 0; i < n; ++i)
    {
        int r = rank[i];
        cout << "EA"[le[r] == ri[r]];
    }
    cout << endl;

    return 0;
}
