#include <bits/stdc++.h>
using namespace std;
const int N = 2e5 + 5, mod = 1e9 + 7;
int dp[N], ans[N];
vector < int > adj[N];
vector < int > pre[N], suf[N];
vector < pair < int, int > > g[N];
int mul(int a, int b){
  return 1LL * a * b % mod;
}
void build(int node, int parent){
  dp[node] = 1;
  for(auto &child : adj[node]){
    if (child == parent)
      continue;
    build(child, node);
    g[node].push_back({child, dp[child]});
    dp[node] = mul(dp[node], dp[child] + 1);
  }
}
void dfs(int node, int parent){
    ans[node] = dp[node];
    for(int j = 0 ; j < g[node].size() ; j++){
      int child = g[node][j].first;
      int old_node = dp[node], old_child = dp[child];
      dp[node] = dp[parent] + 1;
      if (j)
        dp[node] = mul(dp[node], pre[node][j - 1]);
      if (j != g[node].size() - 1)
        dp[node] = mul(dp[node], suf[node][j + 1]);
      dp[child] = mul(dp[child], dp[node] + 1);
      dfs(child, node);
      dp[node] = old_node;
      dp[child] = old_child;
    }
}
int main(){
  int n;
  scanf("%d",&n);
  for(int i = 2; i <= n ; i++){
    int x;
    scanf("%d",&x);
    adj[x].push_back(i);
    adj[i].push_back(x);
  }
  build(1, 0);
  for(int i = 1 ; i <= n ; i++){
    for(int j = 0 ; j < g[i].size() ; j++){
      pre[i].push_back(g[i][j].second + 1);
      if (j)
        pre[i][j] = mul(pre[i][j], pre[i][j - 1]);
    }
    for(int j = g[i].size() - 1 ; j >= 0 ; j--){
      suf[i].push_back(g[i][j].second + 1);
      if (j != g[i].size() - 1)
        suf[i].back()= mul(suf[i].back(), suf[i][suf[i].size() - 2]);
    }
    reverse(suf[i].begin(),suf[i].end());
  }
  dp[0] = 0;
  dfs(1, 0);
  for(int i = 1 ; i <= n ; i++)
    printf("%d ",ans[i]);
  return 0;
}
