
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
#include <bitset>
#include <complex>
using namespace std;
#define rep(i, n) for (int (i) = 0; (i) < (n); (i) ++)
#define rep1(i, n) for (int (i) = 1; (i) <= (n); (i) ++)
#define FOR(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout<<#a<<" :";FOR(i123,x,y)cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int((x).size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;
ll N, K;
ll X[100100];
ll Y[100100];
struct PT 
{
  ll x;
  ll y;
  int index;
};
int compx(PT p1, PT p2)
{
  return p1.x < p2.x;
}
int compy(PT p1, PT p2)
{
  return p1.y < p2.y;
}
int shouldAdd[100100];
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  cin >> N >> K;
  vector<PT> vx;
  vector<PT> vy;
  rep1(i,N) 
  {
    ll x1, y1, x2, y2;
    cin >> x1 >> y1 >> x2 >> y2;
    X[i] = x1 + x2;
    Y[i] = y1 + y2;
    vx.pb((PT){X[i],Y[i],i});
    vy.pb((PT){X[i],Y[i],i});
  }
  sort(vx.begin(), vx.end(), compx);
  sort(vy.begin(), vy.end(), compy);
  ll ans = INFL;
  rep(left,K + 1)
  rep(right,K + 1)
  rep(up,K + 1)
  rep(down,K + 1)
  {
    set<int> inds;
    rep(i,left) inds.insert(vx[i].index);
    rep(i,right) inds.insert(vx[N - 1 - i].index);
    rep(i,down) inds.insert(vy[i].index);
    rep(i,up) inds.insert(vy[N - 1 - i].index);
    if (sz(inds) > K) continue;
    ll w = max(2ll, vx[N - 1 - right].x - vx[left].x);
    ll h = max(2ll, vy[N - 1 - up].y - vy[down].y);
    if (w & 1) w ++;
    if (h & 1) h ++;
    ans = min(ans, (w / 2) * (h / 2));
  }
  cout << ans << endl;
}
