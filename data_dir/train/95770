#include <bits/stdc++.h>
using namespace std;

#define REP(i, n) for(int i = 0; i < n; i++)
#define clr(t, val) memset(t, val, sizeof(t))

#define all(v)  v.begin() , v.end()
#define SZ(v) ((int)(v).size())

typedef long long Long;
typedef vector<int> vInt;
typedef vector<vInt> vvInt;
typedef vector<string> vStr;
typedef vector<vStr> vvStr;
typedef pair<int, int> Pair;
typedef pair<Long, Long> PairLong;
typedef vector<Pair> vPair;
typedef vector<vPair> vvPair;
typedef vector<PairLong> vPairLong;
typedef vector<Long> vLong;
typedef tuple<int, int, int> Tuple;
typedef long double LongDouble;

void add(vInt &ans, int index, int len) {
	REP (i, len - 1) {
		ans.push_back(index + i + 1);
	}
	ans.push_back(index);
}

void print(vInt &ans) {
	REP (i, SZ(ans)) {
		printf("%d%c", ans[i] + 1, (i + 1 == SZ(ans) ? 10 : 32));
	}
}

void solve(int n, int A, int B) {
	REP (x, n + 1) {
		Long rest = (Long)n - (Long)x * A;
		if (rest >= 0 && (rest % B == 0)) {
			int y = rest / B;
			
			int index = 0;
			vInt ans;
			REP (i, x) {
				add(ans, index, A);
				index += A;
			}
			REP (i, y) {
				add(ans, index, B);
				index += B;
			}
			print(ans);
			return;
		}
	}
	puts("-1");
}

int main() {
	int n, A, B;
	while (scanf("%d%d%d", &n, &A, &B) == 3) {
		solve(n, A, B);
	}
}


