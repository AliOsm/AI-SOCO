#include <bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds;   
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
#define ll long long int
#define ld double
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(a) a.begin(),a.end()
#define sz(a) (ll)(a.size())
const ll M=1e5+5;
ll s[M],pt[M],val[M],ans[M],sub[M];
std::vector<pair<ll,ll> > Q;
ll getpt(ll x)
{
	if(pt[x]==x)
		return x;
	return pt[x]=getpt(pt[x]);
}
int main()
{
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
	ll n,q;
	cin>>n;
	for(ll i=1;i<=n;i++)
		cin>>s[i];
	cin>>q;
	for(ll i=1;i<=q;i++)
	{
		ll l,r;
		cin>>l>>r;
		Q.pb(mp(r-l,i));
	}
	sort(all(Q));
	sort(s+1,s+n+1);
	std::vector<pair<ll,ll> > diff;
	for(ll i=1;i<=n;i++)
	{
		pt[i]=i;
		sub[i]=1;
		val[i]=0;
		if(i!=n)
			diff.pb(mp(s[i+1]-s[i],i));
	}
	ll curr=0;
	ll block = n;
	ll cval=0;
	sort(all(diff));
	for(ll i=0;i<sz(diff);i++)
	{
		while(curr<sz(Q))
		{
			if(Q[curr].ff<diff[i].ff)
			{
				ans[Q[curr].ss]=block*(Q[curr].ff+1)+cval;
				curr++;
			}
			else
				break;
		}
		ll x=diff[i].ss;
		ll y=diff[i].ss+1;
		ll a=getpt(x);
		ll b=getpt(y);
		if(sub[a]>sub[b])
		{
			pt[b]=a;
			sub[a]+=sub[b];
			cval-=val[a]+val[b];
			val[a]=val[a]+val[b]+diff[i].ff;
			cval+=val[a];
		}
		else
		{
			pt[a]=b;
			cval-=val[a]+val[b];
			sub[b]+=sub[a];
			val[b]=val[a]+val[b]+diff[i].ff;
			cval+=val[b];
		}
		block--;
	}
	while(curr<sz(Q))
	{
		ans[Q[curr].ss]=block*(Q[curr].ff+1)+cval;
		curr++;
	}
	for(ll i=1;i<=q;i++)
		cout<<ans[i]<<" ";
	cout<<"\n";
	return 0;
}