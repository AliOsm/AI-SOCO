#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int > pii;
typedef pair<ll, ll > pll;
typedef complex<double> point;

#define X real()
#define Y imag()
#define F first
#define S second
#define mk(x, y) make_pair((x), (y))
#define mt(x, y, z ,w) make_tuple((x), (y), (z),(w))
#define pb(x) push_back(x)
#define sz(x)((int)((x).size()))
#define all(x)	((x).begin()), ((x).end())
#define debug(x) dout << "[" #x "] = " << x << '\n'
#define IN "input.in"
#define OUT "output.out"

#define MAX 100005
#define MOD 1000000007
#define eps 1e-7

const ll OO = 0x0101010101010101;

class debug_t {
public:
    template<typename T>
    debug_t& operator << (const T& o) {
#ifdef Adel_SaadEddin_PC
        cout << o << flush;
        cerr << o << flush;
#endif
        return *this;
    }
    void end() {
        *this << "\nExecution Time = " << clock() * 1.0 / CLOCKS_PER_SEC << '\n';
        exit(0);
    }
} dout;

int dr[] = { 0,0,-1,1 };
int dc[] = { -1,1,0,0 };

bool vis[MAX];

int main() {
#ifdef Adel_SaadEddin_PC
    freopen(IN, "r", stdin);
//    freopen(OUT, "w", stdout);
#endif // Adel_SaadEddin_PC
ios_base::sync_with_stdio(false);

    int n, k, p; cin >> n >> k >> p;
    vector<int> ve;

    int even = 0, odd = 0;
    for(int i=0; i<n; i++) {
        int x; cin >> x;
        ve.push_back(x);

        if(x % 2) odd++;
        else even++;
    }

    if(odd < k - p)
        return cout << "NO\n", 0;
    if((odd - k + p) % 2)
        return cout << "NO\n", 0;
    if(even + (odd - k + p) / 2 < p)
        return cout << "NO\n", 0;

    cout << "YES\n";

    vector<vector<int>> res_even, res_odd;

    int odd_num = k - p;
    for(int i=0; i<n; i++) {
        if(ve[i] % 2 == 0) {
            if(p) {
                res_even.push_back(vector<int>());
                res_even.back().push_back(ve[i]);
                vis[i] = true;
                p--;
            }
        }
        else {
            if((int) res_odd.size() < odd_num) {
                res_odd.push_back(vector<int>());
                res_odd.back().push_back(ve[i]);
                vis[i] = true;
            }
        }
    }

    bool b = true;
    int cnt = 0;
    for(int i=0; i<n; i++) {
        if(!p) break;
        if(vis[i]) continue;

        if((cnt++) % 2 == 0)
            res_even.push_back(vector<int>()), p--;
        if(ve[i] % 2) {
            b = !b;
            res_even.back().push_back(ve[i]);
            vis[i] = true;
        }
    }
    
    
    for(int i=0; i<n; i++)
        if(!vis[i])
            if(!res_even.empty())
                res_even.back().push_back(ve[i]);
            else
                res_odd.back().push_back(ve[i]);
    
    for(auto &ve : res_odd) {
        cout << ve.size() << " ";
        for(auto x : ve)
            cout << x <<  " ";
        cout << "\n";
    }
    for(auto &ve : res_even) {
        cout << ve.size() << " ";
        for(auto x : ve)
            cout << x << " ";
        cout << "\n";
    }

    return 0;
}





