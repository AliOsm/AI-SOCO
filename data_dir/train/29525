#include <bits/stdc++.h>
using namespace std;

bool check(const vector<int>& a, int q) {
  if (find(a.begin(), a.end(), q) == a.end()) {
    return false;
  }
  int n = (int) a.size();
  set<int> s;
  for (int i = 0; i < n; ++i) {
    s.insert(i);
  }
  vector<pair<int,int>> b(n);
  for (int i = 0; i < n; ++i) {
    b[i] = {a[i], i};
  }
  sort(b.rbegin(), b.rend());
  for (int i = 0; i < n; ++i) {
    int j = i;
    while (j < n && b[i].first == b[j].first) {
      s.erase(b[j].second);
      ++j;
    }
    --j;
    auto it = s.lower_bound(b[j].second);
    if (it != s.end() && *it < b[i].second) {
      return false;
    }
    i = j;
  }
  return true;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n, q;
  cin >> n >> q;
  vector<int> a(n);
  vector<pair<int,int>> b;
  int fpos = -1;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
    if (a[i] > 0) {
      b.emplace_back(a[i], i);
    } else {
      fpos = i;
    }
  }
  sort(b.rbegin(), b.rend());
  for (auto& item: b) {
    int x = item.first;
    int p = item.second;
    for (int i = p - 1; i >= 0 && a[i] == 0; --i) {
      a[i] = x;
    }
    for (int i = p + 1; i < n && a[i] == 0; ++i) {
      a[i] = x;
    }
  }
  if (b.empty()) {
    fill(a.begin(), a.end(), q);
  } else
  if (b[0].first != q && fpos != -1) {
    a[fpos] = q;
  }
  if (check(a, q)) {
    cout << "YES\n";
    for (int e: a) {
      cout << e << ' ';
    }
    cout << '\n';
  } else {
    cout << "NO\n";
  }
}
