#define _CRT_SECURE_NO_WARNINGS
#include <math.h>
#include <memory.h>
#include <stdio.h>

#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <numeric>
// #pragma comment(linker, "/STACK:667177216")
#define ll long long
#define ull unsigned long long
#define INF 1000000007
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define mp make_pair
#define vI vector<int>
#define vvI vector<vector<int>>
#define vLL vector<LL>
#define vS vector<string>
#define fori(i, n) for (int(i) = 0; (i) < n; (i)++)
#define forn(it, from, to) for (int(it) = from; (it) < to; (it)++)
#define forI(tmp) for (auto(it) = (tmp).begin(); (it) != (tmp).end(); (it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%d", &(a))
#define scLL(a) scanf("%I64d", &(a))
#define mems(a, val) memset(a, val, sizeof(a))
#define sz(a) (int)(a).size()
typedef long long LL;
using namespace std;
const LL MOD = 998244353 ;
const LL MAXN = 2 * 100000 + 100;

vector<LL> ans(5 * 100000 + 100);

int D[1000000 + 1000][2];
int rec(int pos, bool already, string &s, vector<int> &one_pref)  {
  if (pos == s.size()) return 0;
  if (D[pos][already] != -1) return D[pos][already];
  int result = 1e9;
  if (already) {
    if (s[pos] == '1') {
      result = rec(pos + 1, already, s, one_pref);
    }
    else{
      result = min(result, rec(pos + 1, already, s, one_pref) + 1);
      result = min(result, one_pref[pos]);
    }
  }else{
    if (s[pos] == '1') {
      result = min(result, rec(pos + 1, false, s, one_pref) + 1);
      result = min(result, rec(pos + 1, true, s, one_pref));
    }else{
      result = rec(pos + 1, false ,s, one_pref);
    }
  }

  return D[pos][already] = result;
}

void solve() {
  int n,k;
  cin>>n>>k;
  string s;
  cin>>s;
  int ans = 1e9;
  int on_count = 0;
  forn(i,0,n)on_count += s[i] == '1';

  for(int i = 0; i < k; ++i) {
    int tmp = 0;
    string s2;
    for(int j = i; j < n; j += k) {
      tmp += s[j] == '1';
      s2 += s[j];
    }

    for(int j = 0; j < s2.size(); ++j) {
      D[j][0] = D[j][1] = -1;
    }

    vector<int> one_pref(s2.size() + 1);
    for(int j = s2.size() - 1; j >= 0; j--) {
      one_pref[j] = one_pref[j + 1] + (s2[j] == '1');
    }

    ans = min(ans, on_count - tmp + rec(0, false, s2, one_pref));
  }

  cout<<ans<<endl;
}

int main() {
#ifdef ONLINE_JUDGE
  // freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
  freopen("input.txt", "r", stdin);
  // freopen("output.txt", "w", stdout);
#endif
  ios::sync_with_stdio(false);
  cin.tie(0);

  int tt = 1;
  cin>>tt;

  while(tt-- > 0) {
    solve();
  }

  return 0;
}