#include <cstdio>
#include <algorithm>
using namespace std;
char s[1000010], ns[1000010];
int p[4000010];
int *q, *r, *t;
int l;
inline void mul(int *a, int *b, int *c, int n) {
	for (int i = 0; i < n; i++) {
		c[i] = a[b[i]];
	}
}
void pow(int *a, int *b, int n, int k) {
	if (k == 0) {
		for (int i = 0; i < n; i++) {
			b[i] = i;
		}
		return;
	}
	if (k == 1) {
		for (int i = 0; i < n; i++) {
			b[i] = a[i];
		}
		return;
	}
	pow(a, b, n, k / 2);
	mul(b, b, t, n);
	if (k & 1) {
		mul(t, a, b, n);
	} else {
		for (int i = 0; i < n; i++) {
			b[i] = t[i];
		}
	}
}

int main() {
	int n, k, d, l;
	scanf("%s%d", s, &n);
	for (l = 0; s[l]; l++) ;
	q = p + l, r = q + l, t = r + l;
	for (int i = 0; i < l; i++) {
		r[i] = i ? i - 1 : l - 1;
	}
	while (n--) {
		scanf("%d%d", &k, &d);
		int a = 0;
		for (int i = 0; i < d; i++) {
			for (int j = i; j < k; j += d) {
				p[j] = a++;
			}
		}
		for (int i = k; i < l; i++) {
			p[i] = i;
		}
		mul(r, p, q, l);
		pow(q, p, l, l-k+1);
		for (int i = 0; i < l; i++) {
			int j = p[i] - k + 1;
			if (j < 0) j += l;
			ns[j] = s[i];
		}
		puts(ns);
		for (int i = 0; i < l; i++) {
			s[i] = ns[i];
		}
	}
	return 0;
}
