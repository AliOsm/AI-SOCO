
// In the name of God

#include <bits/stdc++.h>
using namespace std;
#define Size(x) ((int)(x).size())
#define pb push_back
typedef long long ll;
typedef long double ld;
const int MN = 1e3 + 10;
const long double Pi = 3.141592653589793238462643;

int n , x[MN] , y[MN] , r[MN];
vector<int>child[MN];
ll dp[2][2][MN];
int rt[MN] ,sz;

void dfs(int s)
{
	for(auto x:child[s]) dfs(x);
	for(int a=0;a<2;++a)
		for(int b=0;b<2;++b){
			ll s1=-1 , s2=-1;
			if(!a) s1 = +1;
			if(!b) s2 = +1;
			
			ll ret1 = s1 * r[s] * r[s] , ret2 = s2 * r[s] * r[s];
			for(auto x:child[s]){	
				ret1 += dp[1-a][b][x];
				ret2 += dp[a][1-b][x];
			}
			dp[a][b][s] = max(ret1 , ret2);
		}
}

int main()
{
	ios_base :: sync_with_stdio(false) , cin.tie(0) , cout.tie(0);
	cin >> n;
	for(int i=0;i<n;++i)
		cin >> x[i] >> y[i] >> r[i];
	for(int i=0;i<n;++i){
		int mn = -1;
		for(int j=0;j<n;++j){
			int R = abs(r[j] - r[i]);
			ll D = 1ll * (x[i] - x[j]) * (x[i] - x[j]) + 1ll * (y[i] - y[j]) * (y[i] - y[j]);
			if(D > 1ll * R * R || r[j] <= r[i]) continue;
			if(mn == -1 || 	(r[mn] > r[j])) mn = j;
		}
		
		if(~mn) child[mn].pb(i);
		else rt[sz++] = i;
	}
	ll ans = 0;
	for(int i=0;i<sz;++i){
		dfs(rt[i]);
		ans += dp[0][0][rt[i]];
	}
	cout << setprecision(12) << fixed << (long double) Pi * ans << '\n';
	return 0;
}

