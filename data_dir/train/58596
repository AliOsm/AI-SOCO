/*
 Anton Gulikov
*/
#pragma comment(linker,"/STACK:300000000")
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <list>
#include <math.h>
#include <string>
#include <stdlib.h>

#define gcd(a,b) __gcd((a),(b))
#define sqr(a) ((a)*(a))
#define odd(a) ((a)&1)
#define foru(i,n) for (int i=0;i<(n);i++)
#define ford(i,n) for (int i=(n)-1;i>=0;i--)
#define forab(i,l,r) for (int i=(l);i<=(r);i++)
#define forabd(i,r,l) for (int i=(r);i>=(l);i--)
#define fillchar(a,b) memset((a),(b),sizeof((a)))
#define pb push_back
#define F first
#define S second
#define all(x) x.begin,x.end
#define pw2(x) (1ull<<(x))
#define mp make_pair

const long double eps=1e-20;
const long double pi=acos(-1.0);
const long long inf=1000*1000*1000*1000*1000*1000;
const long long base=1000*1000*1000+7;

using namespace std;

long long a[111111];
long long f1[111111],f2[111111];
vector <vector <int> > g(111111);
bool used[111111];
int n,x,y;

void dfs(int v){
	used[v]=true;
	foru(i,g[v].size()) if (!used[g[v][i]]){
		dfs(g[v][i]);
		f1[v]=max(f1[v],f1[g[v][i]]);
		f2[v]=max(f2[v],f2[g[v][i]]);
	}
	a[v]=a[v]+f1[v]-f2[v];
	if (a[v]<0) f1[v]-=a[v]; else f2[v]+=a[v];
}

int main(){
	scanf("%d",&n);
	foru(i,n-1){
		scanf("%d%d",&x,&y);
		x--; y--;
		g[x].pb(y); g[y].pb(x);
	}
	foru(i,n) scanf("%I64d",&a[i]);
	dfs(0);
	cout<<f1[0]+f2[0];
	return 0;
}