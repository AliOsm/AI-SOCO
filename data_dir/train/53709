//g++  5.4.0

#include<bits/stdc++.h>
using namespace std;
#define int long long
#define fast ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);

const int N = 1e5 + 10;
const int mod = 1e9 + 7;
vector<int> lastprime(N,-1) , mobius(N) , cnt(N,0) , cnt1(N,0);

void sieve_lastprime()
{
  lastprime[0] = lastprime [1] = 0;
    
  //-1 is prime
    
  for(int i=2;i<N;i++)
  {
    if(lastprime[i] == -1)
        for(int j=i*i;j<N;j+=i) 
            lastprime[j] = i;  
  }
}
void sieve_mobius()
{
  sieve_lastprime();  
    
  mobius[0] = 0;
  mobius[1] = 1;
    
  for(int i=2;i<N;i++)
  {
      if(lastprime[i] == -1) mobius[i] = -1;
      else if( (i/lastprime[i]) % lastprime[i] == 0) mobius[i] = 0;
      else mobius[i] = (mobius[lastprime[i]]*mobius[i/lastprime[i]]);
  }
}

void work()
{
    for(int i=1;i<N;i++)
      for(int j=i;j<N;j+=i)
        cnt1[i] = ( cnt1[i] + cnt[j] ) %mod;
    return ;
}

int binpow(int a,int b)
{
    a%=mod;
    int res = 1;
    while( b )
    {
        if( (b&1) ) res = (res*a)%mod;
        a = (a*a)%mod;
        b >>= 1;
    }
    return res;
}
signed main()
{
    fast;
    sieve_mobius();
    int n,x;
    cin >> n;
    for(int i=0 ; i <n ; i++ )
        cin >> x , cnt[x]++;
    work();
    int ans = 0;
    
    for(int i=1 ; i<N ; i++ )
    {
        if( cnt1[i] )
        {
            int term = binpow(2LL,cnt1[i]) - 1;
            term += mod;
            term %= mod;
            term *= mobius[i] ;
            ans = (ans + term ) %mod;
            ans += mod;
            ans %= mod;
        }
    }
    cout << ans;
}