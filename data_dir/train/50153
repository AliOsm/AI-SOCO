#include <iostream>
#include<algorithm>
#include<string>
#include<map>
#include<iomanip>
#include<vector>
#include<cmath>
#include<queue>
#include<stack>
#include<list>
#include<set>
#include <functional>

#define mod 1000000007
#define pa(a,b) make_pair(a,b)
#define f first
#define s second
#define pb(a)  push_back(a)
#define all(a) a.begin() , a.end()
#define mem(a, b) memset(a, b, sizeof(a))
#define LL  long long int
#define oo 1e9
#define pi 3.14159265359

LL maxx(LL a , LL b){ return a>b ?  a : b ;}
LL minn(LL a , LL b){ return a>b ?  b : a ;}

using namespace std;
LL gcd(LL a, LL b) {
    return b == 0 ? a : gcd(b, a % b);
}
LL lcm(LL a , LL b )
{
    return (a*b)/gcd(a , b);
}
LL poww(LL base, LL exp){
  base %= mod;
  LL result = 1;
  while (exp > 0) {
    if (exp & 1) result = (result * base) % mod;
    base = (base * base) % mod;
    exp >>= 1;
  }
  return result;
}
int n,m; bool cats[100100];
bool leaves[100100],vis[101000];
vector<int>a[100100];
void dfs(int root , int d , bool f)
{
    vis[root]=1; bool l=1;
    for(int i=0;i<a[root].size();i++)
    if(!vis[a[root][i]]){dfs(a[root][i] , (cats[a[root][i]] ? d+cats[a[root][i]] : 0 ) , f||((d+cats[a[root][i]])>m)); l=0;}
    leaves[root]=l&&!f;
}
int main()
{
    cin>>n>>m;
    for(int i=1;i<=n;i++)
        cin>>cats[i];
    for(int i=0;i<n-1;i++)
    {
        int x,y; cin>>x>>y;
        a[x].pb(y); a[y].pb(x);
    }
    dfs(1,cats[1],0); int ans=0;
    for(int i=1;i<=n;i++)ans+=leaves[i];
    cout<<ans;
}
