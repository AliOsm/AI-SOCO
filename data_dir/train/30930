#include <bits/stdc++.h>
using namespace std;
#define int long long
#define IOS ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0)
inline int in(){int32_t x ; scanf("%d",&x) ; return x ;}
inline long long lin(){long long x ; scanf("%lld",&x) ; return x;}
const int maxn = 5e5 + 1e4;
const int inf = 1e18 ;
int mp[] = {6,2,5,5,4,5,6,3,7,6};
int has[10][10];
inline int count(int ch)
{
	return mp[ch];
}
inline int both(int a , int b)
{
	int ret = 0;
	for (int i = 0 ; i < 7 ; i ++)
		ret += has[a][i] && has[b][i];
	return ret;
}
inline void Calc()
{
	memset(has[0],true,sizeof has[0]);
	has[0][6] = false;
	has[1][1] = has[1][2] = true;
	memset(has[2],true,sizeof has[2]);
	has[2][2] = has[2][5] = false;
	memset(has[3],true,sizeof has[3]);
	has[3][4] = has[3][5] = false;
	memset(has[4],true,sizeof has[4]);
	has[4][0] = has[4][3] = has[4][4] = false;
	memset(has[5],true,sizeof has[5]);
	has[5][1] = has[5][4] = false;
	memset(has[6],true,sizeof has[6]);
	has[6][1] = false;
	has[7][0] = has[7][1] = has[7][2] = true;
	memset(has[8],true,sizeof has[8]);
	memset(has[9],true,sizeof has[9]);
	has[9][4] = false;
	
}
int sum;
int32_t main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	Calc();
	string s ; cin >> s;
	int n = (int)s.size() / 2;
	bool fl = false;
	for (int i = 0 ; i < s.size() ; i ++) fl |= s[i] != '8';
	if (!fl) return cout << -1 << endl , 0;
	for (int i = 2 * n - 1 ; i >= 0 ; i --)
	{
		int match = i >= n ? s[i - n] - '0' : s[i + n] - '0';
		int bt = both(match,s[i]-'0');
		for (int newVal = s[i] - '0' + 1 ; newVal < 10 ; newVal ++)
		{
			if (both(newVal,match) + sum > bt)
			{
				s[i] = char('0' + newVal);
				int rem = sum - bt + both(newVal,match);
				for (int j = i + 1 ; j < 2 * n ; j ++)
				{
					int MATCH = j >= n ? s[j-n]-'0' : s[j+n]-'0';
					for (int NEWVAL = 0 ; NEWVAL < 10 ; NEWVAL ++)
					{
						if (rem - both(MATCH,s[j]-'0') + both(MATCH,NEWVAL) > 0)
						{
							rem += both(MATCH,NEWVAL) - both(MATCH,s[j]-'0');
							s[j] = char(NEWVAL + '0');
							break;
						}
					}
				}
				cout << s << endl;
				return 0;
			}
			
		}
		s[i] = '8' ;
		sum += count(match)- bt;
	}
	
	
}
