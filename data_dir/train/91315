/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ld PI = 3.14159265358979323846;

#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

class DBishwock {
public:
	char arr[2][101];
	void solve(std::istream& in, std::ostream& out) {
		string a, b; in>>a>>b;
		int n = a.length();
		f(i, n) arr[0][i] = a[i], arr[1][i] = b[i];
		int res = 0;
		f(i, n-1){
			int cnt = 0;
			f(j, 2){
				f(k, 2){
					if(arr[j][i+k] == 'X') ++cnt;
				}
			}
			if(cnt==0){
				arr[0][i] = arr[1][i] = arr[0][i+1] = 'X';
				++res;
			}
			else if(cnt == 1){
				arr[0][i] = arr[1][i] = arr[0][i+1] = arr[1][i+1] = 'X';
				++res;
			}
		}
		out<<res;
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	DBishwock solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
