	//     . .. ... .... ..... be name khoda ..... .... ... .. .     \\

#include <bits/stdc++.h>
using namespace std;

inline int in() { int x; scanf("%d", &x); return x; }
const int N = 1200021;
typedef long long ll;

ll A, B, a[N], cost[N], n;
bool must[N];

ll solve(int d)
{
	int L = 1e9, R = -1;
	ll sum = 0;
	fill(must, must + n, 0);
	for(int i = 0; i < n; i++)
		if(a[i] % d == 0)
			cost[i] = B;
		else if(min((a[i] + 1) % d, (a[i] - 1) % d) == 0)
		{
			cost[i] = B - A;
			sum += A;
		}
		else
		{
			cost[i] = B;
			L = min(L, i);
			R = max(R, i);
			sum += B;
			must[i] = 1;
		}
	ll ans = 1e18;
	if(R == -1)
	{
		ll mn = 0;
		ll cur = 0;
		for(int i = 0; i < n; i++)
		{
			cur += cost[i];
			if(cur > 0)
				cur = 0;
			mn = min(mn, cur);
		}
		ans = sum + mn;
	}
	else
	{
		
		for(int i = L; i <= R; i++)
			if(!must[i])
				sum += cost[i];
		ll mnR = 0, cur = 0;
		for(int i = R + 1; i < n; i++)
		{
			cur += cost[i];
			mnR = min(mnR, cur);
		}
		ll mnL = 0;
		cur = 0;
		for(int i = L - 1; i >= 0; i--)
		{
			cur += cost[i];
			mnL = min(mnL, cur);
		}
		ans = sum + mnL + mnR;
	}
	return ans;
}

ll _solve(int x)
{
	vector <int> ps;
	for(ll y = 2; y * y <= x; y++)
		if(x % y == 0)
		{
			while(x % y == 0)
				x /= y;
			ps.push_back(y);
		}
	if(x > 1)
		ps.push_back(x);
	ll ans = 1e18;
	for(int y : ps)
		ans = min(ans, solve(y));
	return ans;
}

ll solve()
{
	return min(_solve(a[0]), min(_solve(a[0] + 1), _solve(a[0] - 1)));
}

int main()
{
	cin >> n >> B >> A;
	for(int i = 0; i < n; i++)
		a[i] = in();
	ll ans = solve();
	reverse(a, a + n);
	ans = min(ans, solve());
	cout << ans << endl;
}
