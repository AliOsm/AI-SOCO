#include<bits/stdc++.h>
using namespace std;

#define F                      first
#define S                      second
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define pll                     pair< long long int, long long int> 
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define SZ(x)                   ((int)x.size())

#define FOR(i,a,b)              for(int i = a; i < b; ++i)
#define REV(i,a,b)              for(int i = a; i >= b; --i)
#define FORE(i,a,b)             for(int i = a; i <= b; ++i)

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

template <typename A, typename B>
string to_string(pair<A, B> p);
 
string to_string(const string& s) {
        return '"' + s + '"';
}
 
string to_string(const char* s) {
        return to_string((string) s);
}
 
string to_string(bool b) {
        return (b ? "true" : "false");
}
 
string to_string(vector<bool> v) {
        bool first = true;
        string res = "{";
        for (int i = 0; i < static_cast<int>(v.size()); i++) {
                if (!first) {
                        res += ", ";
                }
                first = false;
                res += to_string(v[i]); 
        }
        res += "}";
        return res;
}
 
template <size_t N>
string to_string(bitset<N> v) {
        string res = "";
        for (size_t i = 0; i < N; i++) {
                res += static_cast<char>('0' + v[i]);
        }
        return res;
}
 
template <typename A>
string to_string(A v) {
        bool first = true;
        string res = "{";
        for (const auto &x : v) {
                if (!first) {
                        res += ", ";
                }
                first = false;
                res += to_string(x);
        }
        res += "}";
        return res;
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
        return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
void debug_out() { 
        cerr << endl; 
}
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
        cerr << " " << to_string(H);
        debug_out(T...);
}
 
#ifdef IGM
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

void solve();

int main()
{
        fast;
        int t;
        cin >> t;
        while(t--)
                solve();
}

#define int ll

struct node {
        int North,East,South,West;
};


void solve() {
        string s;
        cin >> s;
        int n = int(s.length());

        std::vector<node> L(n+1);
        multiset<int> X,Y;

        pii cur_pos = {0,0};
        L[0] = {0,0,0,0};
        X.insert(0);
        Y.insert(0);
        FOR(i,0,n) {
                char ch = s[i];
                L[i+1] = L[i];


                if( ch == 'W' ) {
                        cur_pos.S += 1;
                }

                else if( ch == 'A') {
                        cur_pos.F -= 1;
                }

                else if( ch == 'S') {
                        cur_pos.S -= 1;
                }

                else if(ch == 'D') {
                        cur_pos.F += 1;
                }
                X.insert(cur_pos.F);
                Y.insert(cur_pos.S);
                L[i+1].North = max(L[i+1].North, cur_pos.S);
                L[i+1].South = min(L[i+1].South, cur_pos.S); 
                L[i+1].East = max(L[i+1].East, cur_pos.F);
                L[i+1].West = min(L[i+1].West, cur_pos.F);
        }
        // debug(X,Y);
        cur_pos = {0,0};
        vector<int> arr(4);
        arr[0] = *X.rbegin();
        arr[1] = *X.begin();
        arr[2] = *Y.rbegin();
        arr[3] = *Y.begin();
        int area = (arr[2] - arr[3] + 1) * (arr[0] - arr[1] + 1);
        FOR(i,0,n) {

                arr[0] = *X.rbegin();
                arr[1] = *X.begin();
                arr[2] = *Y.rbegin();
                arr[3] = *Y.begin();
                int H = max(arr[2],L[i].North) - min(arr[3], L[i].South);
                int W = max(arr[0], L[i].East) - min(arr[1], L[i].West);
                arr[0]++;
                arr[1]++;
                H = max(arr[2],L[i].North) - min(arr[3], L[i].South);
                W = max(arr[0], L[i].East) - min(arr[1], L[i].West);
                area = min(area, (H+1)*(W+1));
                arr[0]-= 2;
                arr[1]-= 2;
                H = max(arr[2],L[i].North) - min(arr[3], L[i].South);
                W = max(arr[0], L[i].East) - min(arr[1], L[i].West);
                area = min(area, (H+1)*(W+1));
                arr[0]+= 1;
                arr[1]+= 1;


                arr[2]++;
                arr[3]++;
                H = max(arr[2],L[i].North) - min(arr[3], L[i].South);
                W = max(arr[0], L[i].East) - min(arr[1], L[i].West);
                area = min(area, (H+1)*(W+1));
                arr[2] -= 2;
                arr[3] -= 2;

                H = max(arr[2],L[i].North) - min(arr[3], L[i].South);
                W = max(arr[0], L[i].East) - min(arr[1], L[i].West);
                area = min(area, (H+1)*(W+1));

                X.erase(X.find(cur_pos.F));
                Y.erase(Y.find(cur_pos.S));

                char ch = s[i];
                if( ch == 'W' ) {
                        cur_pos.S += 1;
                }

                else if( ch == 'A') {
                        cur_pos.F -= 1;
                }

                else if( ch == 'S') {
                        cur_pos.S -= 1;
                }

                else if(ch == 'D') {
                        cur_pos.F += 1;
                }
        }
        
        cout << area << endl;
}