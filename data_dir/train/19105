#include<algorithm>
#include<iostream>
#include<cstring>
#include<stdio.h>
#include<math.h>
#include<cstring>
#include<cstdio>
#include<vector>
#include<bitset>
#include<string>
#include<cmath>
#include<queue>
#include<tuple>
#include<stack>
#include<map>
#include<set>

#define tp tuple<int , int, int>
#define pii pair<int, int>
#define mt make_tuple
#define mk make_pair
#define pb push_back

#define MOD 1000000007
#define INF 10000000
#define MAX 200005

#define white 0
#define grey 1
#define black 2

typedef long double ld;
typedef long long ll;

const long double eps = 1e-9;
const long double pi = acos(-1);

using namespace std;
char temp[MAX];
int ar[] = {0, 0, -1, 1, 1, 1, -1, -1};
int ac[] = {-1, 1, 0, 0, 1, -1, -1, 1};

set<ll> se;

void solve(ll x) {
    for(ll i=1; i*i <= x; i++)
        if(x % i == 0) {
            se.insert(i);
            se.insert(x / i);
        }
}

int main() {
#ifndef ONLINE_JUDGE
freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
#endif // ONLINE_JUDGE
ios_base::sync_with_stdio(false);

    int u, p, up; cin >> u >> p >> up;

    int m; cin >> m;
    vector<int> ps, usb;

    for(int i=0; i<m; i++) {
        int x; string s; cin >> x >> s;
        if(s[0] == 'U') usb.pb(x);
        else ps.pb(x);
    }

    sort(usb.begin(), usb.end());
    sort(ps.begin(), ps.end());

    ll res = 0, cnt = 0;

    int i, j;
    for(i=0; i<usb.size(); i++) {
        if(i == u) break;
        res += usb[i];
        cnt++;
    }
    for(j=0; j<ps.size(); j++) {
        if(j == p) break;
        res += ps[j], cnt++;
    }

    for(int k=0; k<up; k++) {
        if(j < ps.size())
            if(i < usb.size())
                if(usb[i] < ps[j])
                    res += usb[i++], cnt++;
                else
                    res += ps[j++], cnt++;
            else res += ps[j++], cnt++;
        else
            if(i < usb.size()) res += usb[i++], cnt++;
        else break;
    }

    cout << cnt << " " <<  res << "\n";

    return 0;
}















