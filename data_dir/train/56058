#include <bits/stdc++.h>

using namespace std;

void fast_io() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
}

const int N = 100100;
vector<int> g[N];

int sub_size[N];
bool is_removed[N];
char node_labels[N];

void subtree_sizes(int x, int prev = -1) {
    sub_size[x] = 1;
    for(int y : g[x]) {
        if(y == prev or is_removed[y]) continue;
        subtree_sizes(y, x);
        sub_size[x] += sub_size[y];
    }
}

int get_centroid(int root, int tot_size, int prev = -1) {
    for(int y : g[root]){
        if(y == prev or is_removed[y]) continue;
        if (sub_size[y] > tot_size/2) return get_centroid(y, tot_size, root);
    }
    return root;
}

void centroid_decomposition(int root = 1, char label = 'A'){
    subtree_sizes(root);
    
    int centroid = get_centroid(root, sub_size[root]);
    is_removed[centroid] = true;
    node_labels[centroid] = label;
    
    for(int y : g[centroid]) {
        if(!is_removed[y]) centroid_decomposition(y, label+1);
    }
}

int main(){
    fast_io();
    
    int n;
    cin >> n;
    for(int i = 1; i < n; i++){
        int a, b;
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
        
    centroid_decomposition();    
    
    for(int i = 1; i <= n; i++){
        cout << node_labels[i] << ' ';
    }
    
    
    return 0;
}
