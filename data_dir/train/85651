#include <iostream>
#include <set>
#include <map>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <queue>
#include <functional>
#include <cstring>
using namespace std;

#define pii pair<int, int>
#define mp make_pair
#define loop(i,n) for (int i=0; i<n; i++)
#define pb push_back
#define ll long long
#define vi vector<int>

const ll MXN = 305;
int n, m, p, a[MXN][MXN];
ll bst[MXN][MXN];
vector<pii> loc[MXN * MXN];

const int dx[] = {0, 0, 1, -1};
const int dy[] = {1, -1, 0, 0};

const int THRESH = 1e6 * 3 / 2;

inline void bfs (int u) {
	priority_queue<pair<int, pii>, vector<pair<int, pii> >, greater<pair<int, pii> > > pq;
	int vis[MXN][MXN];
	memset(vis, 0, sizeof(vis));
	loop(j, loc[u].size()) {
		pq.push(mp(bst[loc[u][j].first][loc[u][j].second], mp(loc[u][j].first, loc[u][j].second)));
		vis[loc[u][j].first][loc[u][j].second] = 1;
	}
	while (!pq.empty()) {
		pair<int, pii> front = pq.top();
		pq.pop();
		int dist = front.first;
		int x = front.second.first;
		int y = front.second.second;
		if (a[x][y] == u + 1) bst[x][y] = dist;
		else {
			for (int k=0; k<4; k++) {
				int nx = x + dx[k];
				int ny = y + dy[k];
				if (nx >=0 && ny >=0 && nx < n && ny < m && !vis[nx][ny]) {
					vis[nx][ny] = 1;
					pq.push(mp(dist + 1, mp(nx, ny)));
				}
			}
		}
	}
}

inline void dp (int u) {
	for (int i=0; i<loc[u].size(); i++) {
		int x1 = loc[u][i].first;
		int y1 = loc[u][i].second;
		for (int j=0; j<loc[u+1].size(); j++) {
			int x2 = loc[u+1][j].first;
			int y2 = loc[u+1][j].second;
			bst[x2][y2] = min(bst[x2][y2], bst[x1][y1] + abs(x1 - x2) + abs(y1 - y2));
		}
	}
}

int main () {
	ios_base::sync_with_stdio(false);
	cin>>n>>m>>p;
	int ex, ey;
	loop(i, n) loop(j, m) bst[i][j] = MXN * MXN * MXN * MXN;
	for (int i=0; i<n; i++) {
		for (int j=0; j<m; j++) {
			cin>>a[i][j];
			if (a[i][j] == p) { ex = i; ey = j; }
			loc[a[i][j]].pb(mp(i, j));
			if (a[i][j] == 1) bst[i][j] = i + j;
		}
	}
	for (int i=1; i<p; i++) {
		int cur_cnt = loc[i].size();
		int nxt_cnt = loc[i+1].size();
		if (cur_cnt * nxt_cnt > THRESH) bfs(i);
		else dp(i);
	}
	cout<<bst[ex][ey]<<endl;
	return 0;
}