#include <cstdio>
#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>

using namespace std;

typedef long long LL;

int n,m,k,a[100005];
int num1[2000000],num2[2000000];
LL ans[100005];
int nn;
struct Node
{
    int l,r,id;
}q[100005];
int l,r,dql,dqr;
LL dq;
bool cmp(Node x,Node y)
{
	if (x.l/nn==y.l/nn) return x.r<y.r;
	return	x.l<y.l;
}
int main()
{
    scanf("%d%d%d",&n,&m,&k);
    for (int i=1;i<=n;++i) scanf("%d",&a[i]);
    a[0]=0;
    for (int i=1;i<=n;++i) a[i]=a[i-1]^a[i];
    nn=(int)sqrt(1.0*n);
    for (int i=1;i<=m;++i)
    {
        scanf("%d%d",&q[i].l,&q[i].r);
        q[i].id=i;
    }
    sort(q+1,q+m+1,cmp);
    memset(num1,0,sizeof(num1));
    memset(num2,0,sizeof(num2));
    dql=1;dqr=0;dq=0;
    for (int i=1;i<=m;++i)
    {
        l=q[i].l;r=q[i].r;
        if (dqr<r)
        {
            for (int j=dqr+1;j<=r;++j)
            {
                num1[a[j-1]]++;
                dq+=num1[a[j]^k];
                num2[a[j]]++;
            }
            dqr=r;
        }
        if (l<dql)
        {
            for (int j=dql-1;j>=l;--j)
            {
                num1[a[j-1]]++;
                num2[a[j]]++;
                dq+=num2[a[j-1]^k];
            }
            dql=l;
        }
        if (r<dqr)
        {
            for (int j=dqr;j>=r+1;--j)
            {
                dq-=num1[a[j]^k];
                num1[a[j-1]]--;
                num2[a[j]]--;
            }
            dqr=r;
        }
        if (dql<l)
        {
            for (int j=dql;j<=l-1;++j)
            {
                dq-=num2[a[j-1]^k];
                num1[a[j-1]]--;
                num2[a[j]]--;
            }
            dql=l;
        }
        ans[q[i].id]=dq;
    }
    for (int i=1;i<=m;++i) printf("%I64d\n",ans[i]);
    return 0;
}