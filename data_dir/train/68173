#include "bits/stdc++.h"
using namespace std;
char Permutation[4];
char S[4] , T[4];
bool Used[4];

bool FindPermutation1( int Cur ){
    if( Cur == 3 ){
        if( S[0] == Permutation[0] && S[1] == Permutation[1] ) return false;
        if( S[0] == Permutation[1] && S[1] == Permutation[2] ) return false;
        if( S[0] == Permutation[2] && S[1] == Permutation[0] ) return false;
        if( T[0] == Permutation[0] && T[1] == Permutation[1] ) return false;
        if( T[0] == Permutation[1] && T[1] == Permutation[2] ) return false;
        if( T[0] == Permutation[2] && T[1] == Permutation[0] ) return false;
        return true;
    }

    for( int i = 0 ; i <= 2 ; ++i ){
        if( Used[i] == false ){
            Used[i] = true;
            Permutation[Cur] = 'a' + i;
            if( FindPermutation1( Cur + 1 ) ) return true;
            Used[i] = false;
        }
    }

    return false;
}

bool FindPermutation2( int Cur ){
    if( Cur == 3 ){
        if( S[0] == Permutation[0] && S[1] == Permutation[0] ) return false;
        if( S[0] == Permutation[1] && S[1] == Permutation[1] ) return false;
        if( S[0] == Permutation[2] && S[1] == Permutation[2] ) return false;
        if( S[0] == Permutation[0] && S[1] == Permutation[1] ) return false;
        if( S[0] == Permutation[1] && S[1] == Permutation[2] ) return false;
        
        if( T[0] == Permutation[0] && T[1] == Permutation[0] ) return false;
        if( T[0] == Permutation[1] && T[1] == Permutation[1] ) return false;
        if( T[0] == Permutation[2] && T[1] == Permutation[2] ) return false;
        if( T[0] == Permutation[0] && T[1] == Permutation[1] ) return false;
        if( T[0] == Permutation[1] && T[1] == Permutation[2] ) return false;

        return true;
    }

    for( int i = 0 ; i <= 2 ; ++i ){
        if( Used[i] == false ){
            Used[i] = true;
            Permutation[Cur] = 'a' + i;
            if( FindPermutation2( Cur + 1 ) ) return true;
            Used[i] = false;
        }
    }

    return false;
}

int main(){
    int N , i , j;
    scanf( "%d%s%s" , &N , S , T );
    fill( Used , Used + 3 , false );
    puts( "YES" );

    if( FindPermutation1( 0 ) == false ){
        fill( Used , Used + 3 , false );
        FindPermutation2( 0 );

        for( i = 0 ; i <= 2 ; ++i ){
            for( j = 0 ; j < N ; ++j )
                printf( "%c" , Permutation[i] );
        }
    }
    else{
        for( i = 0 ; i < 3 * N ; ++i )
            printf( "%c" , Permutation[i % 3] );
    }

    puts( "" );
    return 0;
}