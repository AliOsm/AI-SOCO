#include <cstdio>
#include <vector>
#include <cstring>

using namespace std;

const int MAX_N = 2e5 + 15;
vector <int> graph[MAX_N];
vector <int> component[MAX_N];
int component_no[MAX_N];
int visited[MAX_N];

void dfs_and_mark_component(int v, int no)
{
    component[no].push_back(v);
    component_no[v] = no;

    for(int i = 0; i < graph[v].size(); i++)
    {
        int child = graph[v][i];

        if(component_no[child] == 0)
            dfs_and_mark_component(child, no);
    }
}

int dfs_check_cycle_from(int v, int parent, int &ending)
{
    visited[v] = true;

    if(graph[v].size() > 2) return 0;

    for(int i = 0; i < graph[v].size(); i++)
    {
        int child = graph[v][i];

        if(child == parent)
            continue;

        if(visited[child])
        {
            ending = child;
            return 1;
        }

        return dfs_check_cycle_from(child, v, ending);
    }

    return 0;
}

int main()
{
    int no_of_vertices, no_of_edges;
    scanf("%d %d", &no_of_vertices, &no_of_edges);

    for(int i = 1; i <= no_of_edges; i++)
    {
        int u, v;
        scanf("%d %d", &u, &v);

        graph[u].push_back(v);
        graph[v].push_back(u);
    }

    memset(component_no, 0, sizeof(component_no));

    int no_of_components = 0;
    for(int i = 1; i <= no_of_vertices; i++)
    {
        if(component_no[i] == 0)
            dfs_and_mark_component(i, ++no_of_components);
    }

    memset(visited, false, sizeof(visited));
    int no_of_cycles = 0;

    for(int i = 1; i <= no_of_components; i++)
    {
        int no_of_edges_in_this_component = 0;

        for(int j = 0; j < component[i].size(); j++)
        {
            no_of_edges_in_this_component += graph[component[i][j]].size();
        }

        no_of_edges_in_this_component /= 2;

        int ending;

        no_of_cycles += (dfs_check_cycle_from(component[i][0], 0, ending) && ending == component[i][0] && no_of_edges_in_this_component == component[i].size());
    }

    printf("%d\n", no_of_cycles);
    return 0;
}
