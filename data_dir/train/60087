#include <bits/stdc++.h>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define forall(it, v) for(auto it = v.begin(); it != v.end(); ++it)
#define dforn(i, n) for(int i = ((int) n) - 1; i >= 0; i--)
#define db(v) cerr << #v << " = " << v << endl
#define pb push_back
typedef long long ll;
const int MAXN = 20050;

struct dot {
  string str;
  int sz;
  dot(string str="", int sz=0):str(str), sz(sz){}
};
bool operator < (dot a, dot b){
  return a.str < b.str;
}

int n, sum;
string s[MAXN];
char code;
string cod;
multiset<string> C[20];
multiset<string>::iterator it;
string ans;

int main() {
  scanf("%d", &n);
  forn(i, n){
    char ss[10];
    scanf(" %s", ss);
    s[i] = ss;
    
    sum += s[i].size();
    C[ s[i].size() ].insert(s[i]);
  }
  scanf(" %c", &code); cod = code;
  
  int l = ((sum * 2) % n == 0) ? (sum*2/n) : (-1);
  assert(l != -1);
  
  int k = n / 2;
  while(k--){
    set<dot> S;
    forr(sz1, 1, l){
      int sz2 = l - sz1;
      if(C[sz1].size() == 0 || C[sz2].size() == 0) continue;
      string s1, s2;
      if(sz1 == sz2){
        if(C[sz1].size() < 2) continue;
        it = C[sz1].begin();
        s1 = *it; it++;
        s2 = *it;
      }
      else {          
        s1 = *C[sz1].begin();
        s2 = *C[sz2].begin();
      }
      string t = s1 + cod + s2;
      S.insert(dot(t, sz1));
    }
    assert(S.size());
    dot v = *S.begin();
    int sz1 = v.sz;
    int sz2 = l - v.sz;
    C[sz1].erase(C[sz1].begin());
    C[sz2].erase(C[sz2].begin());
    ans += v.str + '\n';
  }
  
  printf("%s\n", ans.c_str());
  return 0;
}
