#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __,_______,_______, 
 * |\  \|\  \  |\  ___ \  |\  ___ \,
 * \ \  \/  /|_\ \   __/| \ \   __/|,
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *,\ \__\\ \__\\ \_______\\ \_______\
 *,\|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

struct PT { 
	long long x, y;
	PT() : x(0), y(0) {}
	PT(long long _x, long long _y) : x(_x), y(_y) {}
	PT(const PT &p) : x(p.x), y(p.y)    {}
	PT operator + (const PT &p)  const { return PT(x+p.x, y+p.y); }
	PT operator - (const PT &p)  const { return PT(x-p.x, y-p.y); }
	PT operator * (long long c)     const { return PT(x*c,   y*c  ); }
	bool operator<(const PT &p)  const { return make_pair(x,y)<make_pair(p.x,p.y); }
};
long long dot(PT p, PT q)     { return p.x*q.x+p.y*q.y; }
long long dist2(PT p, PT q)   { return dot(p-q,p-q); }
long long cross(PT p, PT q)   { return p.x*q.y-p.y*q.x; }
istream &operator>>(istream &is, PT &p) {return is >> p.x >> p.y; }
ostream &operator<<(ostream &os, const PT &p) {return os << "(" << p.x << "," << p.y << ")";}
/*around the origin*/
PT RotateCCW90(PT p) { return PT(-p.y,p.x); }
PT RotateCW90(PT p) { return PT(p.y,-p.x); }

long long NcR(long long N,long long r) {
	if(r > N) return 0;
	if(r == N) return 1;
	if(r > N - r) r = N - r;
	long long res = 1;
	for(long long i = N;i > N - r;i--) res *= i;
	for(long long i = 2;i <= r;i++) res /= i;
	return res;
}

int main(int argc, char** argv) {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	
	int N,t;
	PT po;
	cin>>N;
	vector<PT> p(N);
	for(int i = 0;i < N;i++) cin>>p[i];
	cin>>t;
	for(int it = 0;it < t;it++) {
		cin>>po;
		long long res = 0;
		for(int i = 0;i < N;i++) {
			int lo = 1,hi = N-1,at = 0;
			while(lo <= hi) {
				int md = (lo + hi)>>1;
				int j = (i + md) % N;
				if(cross(p[j] - p[i],po - p[i]) < 0) lo = md + 1,at = md;
				else hi = md - 1;
			}
			if(at != 0) {
				res += NcR(at,2);
			}
			if(at != N-1) {
				res += NcR(N-1-at,2);
			}
		}
		if(res >= NcR(N,3) * 2) res = NcR(N,3) * 2;
		assert(!(res&1));
		cout<<max(0ll,NcR(N,3) - (res>>1))<<'\n';
	}
	return 0;
}
