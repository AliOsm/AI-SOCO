#include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define pi 3.141592653589793
#define ii pair<int,int>
#define llll pair<ll,ll>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans);
#define pr(ans) printf("%d\n", ans);
#define scc(x)  scanf("%c", &c);
#define pll(ans) printf("%lld\n", ans);
#define scll(x) scanf("%lld",&x);
#define sci(x)  scanf("%d",&x);
#define pc(ans)  printf("%c", ans);
#define scanfchararray scanf("%s", arr);
#define printfstring(s)    printf("%s\n", s.c_str());
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mk(x,y)                      make_pair(x,y)
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define ninf -10000000000000000;
#define inf 10000000000000000;

/*long long gcd(long long a, long long b)
{
	if (b == 0)return a; return gcd(b, a%b);
}
long long lcm(long long a, long long b) {
	return  a * b / gcd(a, b);
}
*/
const int maxnode=55;
struct dsu
{
	int parent[maxnode]; int rank[maxnode];
	dsu()
	{
		for(int i=0;i<maxnode;++i){parent[i]=i;rank[i]=1;}
	}
	int findparent(int x)
	{
		return (x==parent[x])?x:parent[x]=findparent(parent[x]);
	}
	bool sameset(int x,int y)
	{
		return (findparent(x)==findparent(y));
	}
	void link(int x,int y)
	{
		int temp1=findparent(x); int temp2=findparent(y);
		if(temp1!=temp2)
		{
			if(rank[temp1]>rank[temp2])
			{
				parent[temp2]=temp1;
				rank[temp1]+=rank[temp2];
			}
			else
			{
				parent[temp1]=temp2;
				rank[temp2]+=rank[temp1];
			}

		}
		return;
	}
};
int main()
{
   dsu d;
   int n,m,u,v;
   sci(n); sci(m);
   for(int i=0;i<m;++i)
   {
	   sci(u); sci(v);
	   d.link(u,v);
   }
   ll sum=1,ans=1;


   for(int i=1;i<=n;++i)
   {
	   if(d.parent[i]==i)
	   {
		   int temp=d.rank[i];

		   for(int j=1;j<temp;++j)
		   {
			   sum*=2;

		   }
		   ans*=sum;
		   sum=1;
	   }
   }
   cout<<ans<<endl;
 return 0;
}


