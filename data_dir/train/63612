#include <bits/stdc++.h>
using namespace std;

struct req {
	int type, a, b;
};

int n, m;
vector<req> arr;

vector<vector<int> > g;
vector<int> tin, tout;
int timer = 0;
vector<int> cnt;

vector<int> p;
vector<vector<pair<int, int> > > req;
int cur_num = 0;
vector<int> ans;

bool belong(int a, int b) {
	return tin[a] <= tin[b] && tout[a] >= tout[b];
}

void dfs(int v) {
	tin[v] = timer++;
	for(int i = 0; i < g[v].size(); ++i) {
		int to = g[v][i];
		dfs(to);
	}

	tout[v] = timer - 1;
}

int get_next(int v) {
	if(p[v] == v) {
		return p[v];
	}
	return p[v] = get_next(p[v]);
}

void unite(int a, int b) {
	a = get_next(a);
	b = get_next(b);
	if(a != b) {
		if(rand() % 2) {
			swap(a, b);
		}
		p[a] = b;
	}
}

int main (int argc, char *argv[])
{
	scanf("%d%d", &n, &m);
	arr.resize(m);
	g.resize(n);
	cnt.resize(n, 0);
	tin.resize(n);
	tout.resize(n);
	for(int i = 0; i < m; ++i) {
		scanf("%d", &arr[i].type);
		if(arr[i].type != 2) {
			scanf("%d%d", &arr[i].a, &arr[i].b);
			--arr[i].a; --arr[i].b;
		} else {
			scanf("%d", &arr[i].a);
			--arr[i].a;
			++cur_num;
		}
		if(arr[i].type == 1) {
			g[arr[i].b].push_back(arr[i].a);
			cnt[arr[i].a]++;
		}
	}
	for(int i = 0; i < n; ++i) {
		if(cnt[i] == 0) {
			dfs(i);
		}
	}
	p.resize(n);
	for(int i = 0; i < n; ++i) {
		p[i] = i;
	}
	req.resize(cur_num);
	cur_num = 0;
	for(int i = 0; i < m; ++i) {
		if(arr[i].type == 3) {
			req[arr[i].b].push_back(make_pair(arr[i].a, cur_num++));
		}
	}
	ans.resize(cur_num);
	cur_num = 0;
	for(int i = 0; i < m; ++i) {
		if(arr[i].type == 1) {
			unite(arr[i].a, arr[i].b);
		} else if(arr[i].type == 2) {
			int c = arr[i].a;
			for(int j = 0; j < req[cur_num].size(); ++j) {
				int cc = req[cur_num][j].first;
				if(belong(cc, c) && get_next(c) == get_next(cc)) {
					ans[req[cur_num][j].second] = 1;
				} else {
					ans[req[cur_num][j].second] = -1;
				}
			}
			++cur_num;
		}
	}
	for(int i = 0; i < ans.size(); ++i) {
		if(ans[i] == -1) {
			printf("NO\n");
		} else {
			printf("YES\n");
		}
	}

	return 0;
}

