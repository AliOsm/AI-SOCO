#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <ll>::max() >> 1;
const ll N = 2e5 + 1;
const ll L = 20;
ll n, inv;

ll arr[N];
ll ans[N];
ll bit[N];
ll beg[N];
ll fin[N];
pii pos[N];

void update_beg(ll i) {
    ll x = i;
    for(; i < N; i += lsb(i)) {
        beg[i] += x;
    }
}

void update_fin(ll i) {
    i = N - i;
    ll x = i;
    for(; i < N; i += lsb(i)) {
        fin[i] += x;
    }
}

ll query_beg(ll i) {
    ll res = 0;
    for(; i; i -= lsb(i)) {
        res += beg[i];
    }
    return res;
}

ll query_fin(ll i) {
    i = N - i;
    ll res = 0;
    for(; i; i -= lsb(i)) {
        res += fin[i];
    }
    return res;
}

void update(ll i) {
    for(; i < N; i += lsb(i)) {
        bit[i]++;
    }
}

ll query(ll i) {
    ll res = 0;
    for(; i; i -= lsb(i)) {
        res += bit[i];
    }
    return res;
}

ll bin_lift(ll k) {
    ll sum = k;
    ll pos = 0;
    for(ll i = L; i >= 0; --i) {
        ll new_pos = pos + (1 << i);
        if(new_pos < N && bit[new_pos] < sum) {
            pos = new_pos;
            sum -= bit[pos];
        }
    }
    return pos + 1;
}

ll bin(ll x) {
    return x * (x + 1) >> 1;
}

void input() {
    cin >> n;
    for(ll i = 1; i <= n; ++i) {
        cin >> arr[i];
        pos[i].xx = arr[i];
        pos[i].yy = i;
    }
    sort(pos + 1, pos + n + 1);
}

void solve() {
    for(ll i = 1; i <= n; ++i) {
        update(pos[i].yy);
        update_beg(pos[i].yy);
        update_fin(pos[i].yy);
        inv += i - query(pos[i].yy);
        ans[i] += inv;
        ll p = bin_lift((i + 1) / 2);
        ans[i] += p * query(p) - query_beg(p);
        ans[i] += (N - p) * (i - query(p) + 1) - query_fin(p);
        ans[i] -= bin(i / 2) + bin((i - 1) / 2);
    }
    for(ll i = 1; i <= n; ++i) {
        cout << ans[i] << " ";
    }
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
