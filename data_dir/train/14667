#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <iterator> 
#include <bitset>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf 1000000
#define pii pair<int, int>
#define pll pair<ll, ll>
#pragma GCC optimize ("O3")
//#define x first
//#define y second
const int mod = (1e9) + 7;
const double eps = 1e-10;
const int siz = 3e5 + 5, lg = 25, sq = 355, extrm[2] = {INT_MIN, INT_MAX};
const int modv = 998244353;
int n, sz[3000], st[3000], en[3000];
string src[3000], dst[3000], srccor, dstcor;
char str[3001];
int *kmp(string &sml, string &bg) {
	string s = sml + "#" + bg;
	int sz = s.size();
	int *kmparr = new int[sz];
	kmparr[0] = 0;
	for (int i = 1; i < sz; i++) {
		int j = kmparr[i - 1];
		while (j != 0 && s[i] != s[j]) {
			j = kmparr[j - 1];
		}
		kmparr[i] = j + (s[i] == s[j]);
	}
	return kmparr;
}
int main()
{
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%s", str);
		src[i] = string(str);
		sz[i] = src[i].size();
	}
	for (int i = 0; i < n; i++) {
		scanf("%s", str);
		dst[i] = string(str);
	}
	for (int i = 0; i < n; i++) {
		int sti = -1, eni = -1;
		for (int j = 0; j < sz[i]; j++) {
			if (src[i][j] != dst[i][j]) {
				sti = j;
				break;
			}
		}
		for (int j = sz[i] - 1; j >= 0; j--) {
			if (src[i][j] != dst[i][j]) {
				eni = j;
				break;
			}
		}
		st[i] = sti;
		en[i] = eni;
		if (sti != -1) {
			string srccori = src[i].substr(sti, eni - sti + 1), dstcori = dst[i].substr(sti, eni - sti + 1);
			if (srccor == "") {
				srccor = srccori;
				dstcor = dstcori;
			}
			if (srccori != srccor || dstcori != dstcor) {
				printf("NO\n");
				return 0;
			}
		}
	}
	if (srccor == "") {
		printf("YES\na\na\n");
		return 0;
	}
	while (true) {
		bool can = true;
		char comm = 0;
		for (int i = 0; i < n; i++) {
			if (st[i] == -1) {
				continue;
			}
			if (comm == 0 && st[i] != 0) {
				comm = src[i][st[i] - 1];
			}
			if (st[i] == 0 || src[i][st[i] - 1] != comm) {
				can = false;
				break;
			}
		}
		if (can) {
			for (int i = 0; i < n; i++) {
				if (st[i] != -1) {
					st[i]--;
				}
			}
		}
		else {
			break;
		}
	}
	while (true) {
		bool can = true;
		char comm = 0;
		for (int i = 0; i < n; i++) {
			if (en[i] == -1) {
				continue;
			}
			if (comm == 0 && en[i] != sz[i]-1) {
				comm = src[i][en[i] + 1];
			}
			if (en[i] == sz[i]-1 || src[i][en[i]+1] != comm) {
				can = false;
				break;
			}
		}
		if (can) {
			for (int i = 0; i < n; i++) {
				if (en[i] != -1) {
					en[i]++;
				}
			}
		}
		else {
			break;
		}
	}
	for (int i = 0; i < n; i++) {
		if (st[i] != -1) {
			srccor = src[i].substr(st[i], en[i] - st[i] + 1);
			dstcor = dst[i].substr(st[i], en[i] - st[i] + 1);
			break;
		}
	}
	int corsz = srccor.size();
	for (int i = 0; i < n; i++) {
		int foc = -1;
		int *kmparr = kmp(srccor, src[i]);
		for (int j = corsz + 1; j < corsz + sz[i] + 1; j++) {
			if (kmparr[j] == corsz) {
				foc = j - 2*corsz;
				break;
			}
		}
		if (foc != st[i]) {
			printf("NO\n");
			return 0;
		}
	}
	printf("YES\n%s\n%s\n", srccor.c_str(), dstcor.c_str());
	return 0;
}