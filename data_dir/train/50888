#include <bits/stdc++.h>
     
using namespace std;
typedef long long ll;
typedef vector<ll> vl ;
     
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define all(v) (v).begin(),(v).end()
#define max(a,b) (a>b ? a : b)
#define min(a,b) (a<b ? a : b)
  
const int MOD = 998244353;
const int N = 1000005;
const double PI =4*atan(1);
const double eps = 1e-7;
const long long oo = 1e18;

bool adj[105][105];
ll dist[105][105];
bool vis[105];
ll p[N];
ll m;
ll n;
void bfs(ll src){
	memset(vis,0,sizeof(vis));
	queue<pair<ll,ll> > q;
	q.push(mp(src, 0));
	while(!q.empty()){
		pair<ll,ll> ras=q.front();
		q.pop();
		//cout << ras.f << endl;
		if(vis[ras.f])continue;
		vis[ras.f]=1;
		for(int i=0;i<n;i++){
			if(adj[ras.f][i] && dist[src][i]>ras.s+1){
				//cout << ras.f << " " << i << endl;
				//cout << ras.f << " " << i << endl;
				//cout << ras.s << endl;
				dist[src][i]=ras.s+1;
				q.push(mp(i, ras.s+1));
			}
		}
	}
}
int main(){
    ios::sync_with_stdio(0);
    //freopen("easy.txt","r",stdin);
    cin >> n;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            char c;
            cin >> c;
            adj[i][j]=c-'0';
        }
    }
    cin >> m;
    for(int i=0;i<m;i++)cin >> p[i];
    for(int i=0;i<m;i++)p[i]--;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            dist[i][j]=1e18;
        }
        dist[i][i]=0;
    }
    for(int i=0;i<n;i++){
    	bfs(i);
    	//cout << "trol"<< endl;
    }
    /*for(int i=0;i<n;i++){
    	for(int j=0;j<n;j++){
    		cout << dist[i][j] << " ";
    	}
    	cout << endl;
    }*/
    
    vl v;
    ll j=0;
    v.pb(p[0]);
    for(int i=0;i<m;){
        j=i+1;
        ll distbef=0;
        ll bef=p[i];
        while(j<m && distbef+dist[bef][p[j]]==dist[p[i]][p[j]]){
            distbef+=dist[bef][p[j]];
            //cout << p[i]+1 << " " << p[j]+1 << " " << distbef << endl;
            bef=p[j];
            j++;
            //if(j<m)cout << distbef+dist[bef][p[j]] << " " << dist[p[i]][p[j]] << endl;
        }
        //cout << j << endl;
        v.pb(p[j-1]);
        if(j==m)break;
        i=j-1;
    }
    cout << v.size() << endl;
    for(auto t:v)cout << t+1 << " ";
    return 0;
}