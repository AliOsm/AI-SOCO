#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define endl '\n'
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int32_t , int32_t >
#define Endl '\n'
#define itn int


#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("-O3")

using namespace std;


mt19937 gen(chrono::system_clock::now().time_since_epoch().count());

const ll mod = 998244353;
const int32_t FFTM = 998244353;
const int32_t N = 2e5 + 10;

int32_t SX[4] = {0 , 1 , -1 , 0};
int32_t SY[4] = {1 , 0 , 0 , -1};

int n;
vector < int > a;

ll dp[505][505];

int go(int l, int r){
    if (dp[l][r] != -1)return dp[l][r];
    if (r <= l)return 0;
    dp[l][r] = 1e9;
    if (a[l] == a[r])dp[l][r] = min((int)dp[l][r], go(l + 1, r - 1));
    for (int i = l;i <= r; ++i)
        dp[l][r] = min((int)dp[l][r], go(l, i) + go(i + 1, r) + 1);
    return dp[l][r];
}

void dod(){
    for (int i = 0;i < n; ++i){
        for (int j = 0;j < n; ++j)
            dp[i][j] = -1;
    }
}

int32_t  main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
    cin >> n;
    a.resize(n);
    for (int i = 0;i < n; ++i){
        cin >> a[i];
    }
    dod();
    cout << go(0, n - 1) + 1 << endl;
    return 0;
}
