#include<bits/stdc++.h>
#define all(v) (v).begin(),(v).end()
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ri(x) scanf("%d",&(x))
#define ri2(x,y) scanf("%d %d",&(x),&(y))
#define ri3(x,y,z) scanf("%d %d %d",&(x),&(y),&(z))
#define rll(x) scanf("%lld",&(x))
#define rll2(x,y) scanf("%lld %lld",&(x),&(y))
#define rll3(x,y,z) scanf("%lld %lld %lld",&(x),&(y),&(z))
#define gc(x) ((x) = getchar())
using namespace::std;

const long double PI = acos(-1);
const long long MOD = 1000000000 +7;

typedef long long ll;
typedef pair<ll,ll> pll;
typedef pair<ll,pll> tll;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef vector<ll> vll;
typedef vector<pll> vpll;
typedef vector<tll> vtll;
typedef vector<string> vs;
typedef set<int> si;
typedef set<ii> sii;
typedef set<iii> siii;

ll gcd(ll a, ll b){ return b==0?a:gcd(b,a%b);}

ll add(ll a, ll b, ll m = MOD){ return (a%m + b%m+2*m)%m;}

ll mul(ll a, ll b, ll m = MOD){ return ((a%m+m)*(b%m+m))%m;}

ll pow_mod(ll a, ll b, ll m = MOD){
	ll res = 1LL;
	a = a%m;
	while(b){
		if(b&1) res = mul(res,a,m);
		b >>= 1;
		a = mul(a,a,m);
	}
	return res;
}

ll fastexp(ll a, ll b){
	ll res = 1LL;
	while(b){
		if(b&1) res = res*a;
		b >>= 1;
		a *= a;
	}
	return res;
}

int gcdExtendido(int a, int b, int *x, int *y){
	if(a == 0){
		*x = 0;
		*y = 1;
		return b;
	}
	int x1, y1;
	int gcd = gcdExtendido(b%a,a,&x1,&y1);
	
	*x = y1-(b/a)*x1;
	*y = x1;
	return gcd;
}

int modInverso(int a, int m){
	int x, y;
	int g = gcdExtendido(a,m,&x,&y);
	if(g!=1) return -1;
	else return (x%m + m)%m;
}

/****************************************
*************P*L*A*N*T*I*L*L*A************
*****************************************/

int t;
int n;
map<int,int> Q;

int main(){
	ri(t);
	int x;
	while(t--){
		ri(n);
		Q.clear();
		for(int i=0; i<n; i++){
			ri(x);
			Q[x]++;
		}
		int a = 0, b = 0;
		int ansnum = INT_MAX;
		int ansden = 1LL;
		vi take_off;
		for(map<int,int>::iterator it=Q.begin(); it!=Q.end(); it++){
			if(it->second < 2) take_off.pb(it->first);
		}
		for(int i=0; i<take_off.size(); i++){
			Q.erase(take_off[i]);
		}
		for(map<int,int>::iterator it=Q.begin(); it!=Q.end(); it++){
			int val = it->first;
			int times = it->second;
			if(times < 4 and times >= 2){
				map<int,int>::iterator next = it;
				next++;
				if(next != Q.end()){
					int val2 = next->first;
					int times2 = next->second;
					if(times2 >= 2){
						int p = 2*(val+val2);
						int area  = val*val2;
						p *= p;
						ll c1 = 1LL*ansnum*area;
						ll c2 = 1LL*ansden*p;
						if(c1 > c2){
							ansnum = p;
							ansden = area;
							a = val;
							b = val2;
						}
					}
				}	
			}
			else if(times >= 4){
				int p = 4*val;
				int area = val*val;
				p *= p;
				ll c1 = 1LL*ansnum*area;
				ll c2 = 1LL*ansden*p;
				if(c1 > c2){
					ansnum = p;
					ansden = area;
					a = val;
					b = val;
				}
			}
		}
		printf("%d %d %d %d\n",a,a,b,b);
	}
	return 0;
}
