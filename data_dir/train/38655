#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <iterator>
#include <cmath>
#include <set>
#include <deque> 
#include <string>


using namespace std;

int n, k;
int m[200010];
int c[200010];
int nextNums[200010];

struct Elem {
	int pos;
	int nextNum;
	
    bool operator < (const Elem &a) const {
        return this->nextNum > a.nextNum;//���ֵ����
    }	
};

struct ElemCont {
	std::vector<int> elems;	
};

std::vector<ElemCont> totalElem;

bool compare(const int &a, const int &b)
{
	return a > b;
}



int main()
{
	scanf("%d%d", &n, &k);
	
	for (int i = 0 ; i < n ; i++) {
		scanf("%d", &(m[i]));
	}
	sort(m, m + n, compare);
	
	for (int i = 1 ; i <= k ; i++) {
		scanf("%d", &(c[i]));
	}
	
	c[k + 1] = 0;
//	nextNums[0] = k;
	int nextP = 1;
	for (int i = k ; i >= 1 ; i--) {
		if (c[i] > c[i + 1]) {
			int dist = c[i] - c[i + 1];
			while (dist > 0) {
				nextNums[nextP] = i;
				nextP++;
				dist--;
			}
		}
	}
	
	std::priority_queue<Elem> q;

	Elem newElem;
	newElem.nextNum = 1;
	newElem.pos = 0;
	q.push(newElem);
	
	ElemCont newElemCont;
	newElemCont.elems.clear();
	
	totalElem.push_back(newElemCont);
	

	Elem curElem;
	int p = 0;
	while (p < n) {
		int curNextNum;
		int curPos;
		if (q.empty()) {
			curNextNum = -1;
		} else {
			curElem = q.top();
			q.pop();
			curNextNum = nextNums[curElem.nextNum];
			curPos = curElem.pos;
		}
		if (m[p] <= curNextNum) {
			curElem.nextNum++;
			totalElem[curPos].elems.push_back(m[p]);
			
			if (nextNums[curElem.nextNum] > 0)
				q.push(curElem);
		} else {
			if (nextNums[curElem.nextNum] > 0)
				q.push(curElem);
			
			Elem elemB;
			elemB.nextNum = 2;
			elemB.pos = totalElem.size();
			q.push(elemB);
			
			ElemCont elemContB;
			elemContB.elems.clear();
			totalElem.push_back(elemContB);
			
			totalElem[elemB.pos].elems.push_back(m[p]);
		}
		
		p++;
	}
	
	printf("%d\n", totalElem.size());
	for (int i = 0 ; i < totalElem.size() ; i++) {
		printf("%d", totalElem[i].elems.size());
		for (int j = 0 ; j < totalElem[i].elems.size() ; j++) {
			printf(" %d", totalElem[i].elems[j]);
		}
		printf("\n");
	}
	
	return 0;
}

