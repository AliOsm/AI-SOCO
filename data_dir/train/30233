#include <iostream>
#include <string>

using namespace std;

typedef long long int ll;

const int limit=42;

int nsig;
int sig[limit][2];
int proper[limit];

int simulate(int q,string s)
{
  for (int i=0;i<int(s.size());i++)
    q=sig[q][s[i]-'0'];
  return q;
}

ll amount[limit][limit][limit];
ll sol;

int main()
{
  int n;
  cin>>n;
  string s;
  cin>>s;
  for (nsig=0;nsig<int(s.size());nsig++) {
    int c=s[nsig]-'0';
    sig[nsig][1-c]=sig[proper[nsig]][1-c];
    sig[nsig][c]=nsig+1;
    if (nsig>0)
      proper[nsig+1]=sig[proper[nsig]][c];
  }
  sig[nsig][0]=sig[nsig][1]=nsig;
  for (int q1=0;q1<=nsig;q1++) {
    amount[q1][0][q1]=1;
    for (int len=0;len<n;len++)
      for (int q2=0;q2<=nsig;q2++)
	for (int c=0;c<2;c++)
	  amount[q1][len+1][sig[q2][c]]+=amount[q1][len][q2];
  }
  for (int i=0;i<n;i++)
    sol+=amount[0][i][nsig-1]*(1LL<<(n-1-i));
  for (int q0=1;q0<nsig;q0++) {
    for (int lenle=1;lenle<nsig;lenle++) {
      int qafter=simulate(0,s.substr(nsig-lenle));
      int qpreend=simulate(q0,s.substr(nsig-lenle,lenle-1));
      if (qpreend==nsig-1)
	sol+=amount[qafter][n-lenle][q0];
    }
  }
  cout<<sol<<endl;
}
