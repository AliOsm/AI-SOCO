#include <bits/stdc++.h>
using namespace std;
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
#define ll long long
#define ld long double
#define pb push_back
#define fe first
#define se second
#define st(x) sort(x.begin(),x.end())
#define rst(x) sort(x.rbegin(),x.rend())
const long double pi = 3.14159265358979323;
const double EPS = 1e-12;
const int N = 1e6 + 5;
const int mod = 1e9 + 7;
vector < ll > v[N] , v1;
bool vis[N];
ll parent[N] , rrank[N] , len , last ,k;

void dfs(ll s)
{
    vis[s] = 1;
    for(auto it : v[s])
    {
      //  cout << it << " ";
        if(!vis[it])
        {
            rrank[it] = rrank[s] + 1; // to maintain the distance of every node from the root vertex;
            parent[it] = s;           //to calculate the parent of every vertex ....
            dfs(it);
            
        }
        else if(rrank[s] - rrank[it] + 1 >= k + 1) // u can also use parent[it]! = s
        {
            //to check the circle in the graph;
            last = s;
            len = rrank[s] - rrank[it] + 1;
            return ;
        }      
    }
  
}

int main()
{
    
    fast; 
    ll n , m ,a ,b;
    cin >> n >> m >> k;
    for(int i = 0 ; i < m ; i++)
    {
        cin >> a >> b;
        v[a].pb(b);
        v[b].pb(a);
    }
    parent[1] = 1; //set parent of itself  as itself
    rrank[1] = 1;   //set length of root vertex as 1;
    dfs(1);
  
    cout << len << endl; 
  
    while(len--)
    {
        cout << last << " ";  //to print the cycle ...
        last = parent[last];
    }
  
    
    
    
    
    
    
    
    
    
    
    
    
    
}