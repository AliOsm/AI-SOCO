#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define PI 3.14152
#define INF 2000000000
#define MOD 1000000007
#define MOD2 998244353
#define ll long long
#define vi vector<int>
#define pb push_back
#define ii pair<int,int>
#define vii vector<ii>
#define si set<int>
#define msi map<string,int>
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define TRvi(c,it) for(vi::iterator it=(c).begin();it!=(c).end();it++)
#define TRvii(c,it) for(vii::iterator it=(c).begin();it!=(c).end();it++)
#define TRmsi(c,it) for(msi::iterator it=(c).begin();it!=(c).end();it++)


using namespace std;

ll fact[1001];

ll power(ll x, ll y, ll p)
{
    ll res = 1;      // Initialize result

    x = x % p;  // Update x if it is more than or
                // equal to p

    while (y > 0)
    {
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res*x) % p;

        // y must be even now
        y = y>>1; // y = y/2
        x = (x*x) % p;
    }
    return res;
}

// Returns n^(-1) mod p
ll modInverse(ll n, ll p)
{
    return power(n, p-2, p);
}

// Returns nCr % p using Fermat's little
// theorem.
ll nCrModPFermat(ll n, ll r, ll p)
{
   // Base case
   if (r==0)
      return 1;
  	if(r>n)
  		return 0;
    // Fill factorial array so that we
    // can find all factorial of r, n
    // and n-
    return (fact[n]* modInverse(fact[r], p) % p *
            modInverse(fact[n-r], p) % p) % p;
}

ll dp[1002];
int main()
{
    IOS;
    #ifndef ONLINE_JUDGE
        // for getting input from input.txt
        freopen("input.txt", "r", stdin);
        // for writing output to output.txt
        freopen("output.txt", "w", stdout);
    #endif
    fact[0]=1;
    REP(i,1,1000)
    {
    	fact[i]=fact[i-1]*i;
    	fact[i]%=MOD2;
    }
    int n;
    cin >> n;
    ll arr[n+1];
    REP(i,1,n)
    	cin >> arr[i];
    dp[n+1]=1;
   	for(int i=n;i>=1;i--)
   	{
   		if(arr[i]<=0||arr[i]>=1001)
   			continue;
   		if(n-i+1<arr[i]+1)
   			continue;
   		for(int j=i+arr[i];j<=n;j++)
   		{
   			ll val=nCrModPFermat(j-i,arr[i],MOD2);
   			val*=dp[j+1];
   			val%=MOD2;
   			dp[i]+=val;
   			dp[i]%=MOD2;
   		}
   	}
   	ll sum=0;
   	REP(i,1,n)
   	{
   		sum+=dp[i];
   		sum%=MOD2;
   	}
   	cout << sum;

}