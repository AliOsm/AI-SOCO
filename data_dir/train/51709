#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"

#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0);}

inline int safe_mul(int x, int y) __attribute__ ((warn_unused_result));

int const maxn = 50005;

int val[maxn * 30];
int add[maxn * 30];
int cntVal = 0;

int a[maxn];

inline void add_val(int v)
{
    val[cntVal++] = v;
}

vector<int> tree[maxn * 30];

int ans[maxn];

int cntAns = 0;

int dfs(int v, int bord)
{
    int ret = add[v];

    for(int ne : tree[v])
        ret += dfs(ne, bord);

    if (val[v] <= bord && ret > 0)
    {
        --ret;
        ans[cntAns++] = v;
    }
    return ret;
}

inline bool check(int bord)
{
    cntAns = 0;
    return dfs(0, bord) == 0;
}

int main()
{
//    freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    ios_base::sync_with_stdio(false);

    int n;
    cin >> n;
    for(int i = 0; i < n; ++i)
    {
        cin >> a[i];
        int tmp = a[i];
        while (tmp > 0)
        {
            add_val(tmp);
            tmp /= 2;
        }
    }

    sort(val, val + cntVal);
    cntVal = unique(val, val + cntVal) - val;

    for(int i = 0; i < n; ++i)
        ++add[lower_bound(val, val + cntVal, a[i]) - val];

    for(int i = 1; i < cntVal; ++i)
    {
        tree[lower_bound(val, val + cntVal, val[i] / 2) - val].push_back(i);
    }

    int l = 0;
    int r = 1000000000;

    while (r - l > 1)
    {
        int mid = (l + r) >> 1;
        if (check(mid))
            r = mid;
        else
            l = mid;
    }
    check(r);

    for(int i = 0; i < n; ++i)
        cout << val[ans[i]] << " \n"[i == n - 1];
}

