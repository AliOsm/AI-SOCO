#include <bits/stdc++.h>
using namespace std;

// Template Headers {{{
using pii = pair<int, int>; using vpii = vector<pii>;
using vi = vector<int>; using vvi = vector<vi>;
using ll = long long; using vll = vector<long long>;
template <class T> using min_queue = priority_queue<T, vector<T>, greater<T>>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
template <class T, class U> istream &operator>>(istream &, pair<T, U> &);
template <class T, class U> ostream &operator<<(ostream &, const pair<T, U> &);
template <class T> struct Inf { static constexpr T inf() { return std::numeric_limits<T>::has_infinity() ? std::numeric_limits<T>::infinty() : std::numeric_limits<T>::max(); } };
template <> struct Inf<int> { static constexpr int inf() { return 0x3f3f3f3f; } };
template <> struct Inf<long long> { static constexpr long long inf() { return 0x3f3f3f3f3f3f3f3fLL; } };
constexpr int INF = Inf<int>::inf(); constexpr ll BINF = Inf<ll>::inf();
// mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
// }}}
// Automod Integer Template {{{
class mint {
private:
	int x;
	static constexpr int MOD = 1'000'000'007;

public:
	friend inline std::ostream &operator<<(std::ostream &os, const mint &arg) {
		return os << arg.x;
	}
	friend inline std::istream &operator>>(std::istream &is, mint &arg) {
		is >> arg.x;
		if (arg.x >= MOD) arg.x -= MOD;
		return is;
	}
	mint(const int &x) : x(x) {
		if (this->x >= MOD) this->x -= MOD;
		if (this->x < 0) this->x += MOD;
	}
	mint(const long long &x) : x(x % MOD) {}
	mint() : x(0) {}

	mint &operator+=(const mint &rhs) {
		x += rhs.x;
		if (x >= MOD) x -= MOD;
		return *this;
	}
	mint &operator++() { return *this += 1; }
	mint operator+(const mint &rhs) const { return mint(*this) += rhs; }
	mint operator++(int) {
		mint cpy(*this);
		++*this;
		return cpy;
	}

	mint &operator-=(const mint &rhs) {
		x -= rhs.x;
		if (x < 0) x += MOD;
		return *this;
	}
	mint &operator--() { return *this -= 1; }
	mint operator-(const mint &rhs) const { return mint(*this) -= rhs; }
	mint operator-() const { return mint() - *this; }
	mint operator--(int dummy) {
		mint cpy(*this);
		--*this;
		return cpy;
	}

	mint &operator*=(const mint &rhs) {
		x = 1LL * x * rhs.x % MOD;
		return *this;
	}
	mint operator*(const mint &rhs) const { return mint(*this) *= rhs; }

	mint pow(long long p) const {
		mint rt = 1, b = *this;
		for (;p;p>>=1,b*=b) if (p & 1) rt *= b;
		return rt;
	}

	mint operator^(long long p) const { return pow(p); }
	mint &operator^=(long long p) { return *this = pow(p); }

	mint &operator/=(const mint &rhs) { return *this *= rhs.pow(MOD - 2); }
	mint operator/(const mint &rhs) const { return mint(*this) /= rhs; }

	constexpr bool operator<(const mint &rhs) const { return x < rhs.x; }
	constexpr bool operator>(const mint &rhs) const { return x > rhs.x; }
	constexpr bool operator<=(const mint &rhs) const { return x <= rhs.x; }
	constexpr bool operator>=(const mint &rhs) const { return x >= rhs.x; }
	constexpr bool operator==(const mint &rhs) const { return x == rhs.x; }
	constexpr bool operator!=(const mint &rhs) const { return x != rhs.x; }

	constexpr explicit operator int() const { return x; }

};
constexpr int mint::MOD;
// }}}

int solve() {
	int n; cin >> n;
	vpii a(n); cin >> a;
	sort(a.begin(), a.end());

	using vm = vector<mint>;
	/*

	vi dp(n, INF);
	vm dp2(n, 0);
	vi canAdd(n, 0);

	for (int i=0;i<n;i++) {
		dp[i] = a[i].second;
		for (int j=0;j<i;j++) {
			if (a[j].first <= a[i].second) {
				dp[i] = min(dp[i], dp[j] + a[i].second - a[j].first);
				canAdd[j] = 1;
			}
		}
		if (dp[i] == a[i].second) dp2[i]++;
		for (int j=0;j<i;j++) if (dp[i] == dp[j] + a[i].second - a[j].first) dp2[i] += dp2[j];
	}

	cerr << a;
	cerr << dp;
	cerr << dp2;
	cerr << canAdd;
	cerr << "===" << endl;
	*/


	{
		vi dp(n, INF);
		vm dp2(n, 0);
		int mxCanAdd = -1;

		vi prfMin(n, INF);
		vm prfCnt(n, 0);

		for (int i=0;i<n;i++) {
			dp[i] = a[i].second;

			int r = -1;
			for (int j=20;j>=0;j--) if (r + (1 << j) < i && a[r + (1 << j)].first <= a[i].second) r += 1 << j;
			if (r >= 0) {
				dp[i] = min(dp[i], a[i].second + prfMin[r]);
				mxCanAdd = max(mxCanAdd, r);
			}

			if (dp[i] == a[i].second) dp2[i]++;
			if (r >= 0 && dp[i] == a[i].second + prfMin[r]) dp2[i] += prfCnt[r];
			// for (int j=0;j<i;j++) if (dp[i] == dp[j] + a[i].second - a[j].first) dp2[i] += dp2[j];


			prfMin[i] = dp[i] - a[i].first;
			// if (i > 0) prfMin[i] = min(prfMin[i], prfMin[i - 1]);

			if (i > 0) {
				if (prfMin[i] == prfMin[i - 1])
					prfCnt[i] = prfCnt[i - 1] + dp2[i];
				else if (prfMin[i] < prfMin[i - 1])
					prfCnt[i] = dp2[i];
				else
					prfCnt[i] = prfCnt[i - 1];
				prfMin[i] = min(prfMin[i], prfMin[i - 1]);
			} else {
				prfCnt[i] = dp2[i];
			}

		}

		//cerr << dp;
		//cerr << dp2;
		//cerr << prfMin;
		//cerr << prfCnt;
		//cerr << mxCanAdd << endl;

		int mx = INF;
		for (int j=mxCanAdd+1;j<n;j++) mx = min(mx, dp[j]);
		mint ans = 0;
		for (int j=mxCanAdd+1;j<n;j++) if (dp[j] == mx) ans += dp2[j];
		cout << ans << endl;

	}

	return 0;
}

// Template Main {{{
int main() {
	ios::sync_with_stdio(0);
	// precompute();
	// int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << "Case #" << i << ": ", solve();
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it, os << " \n"[++it==v.end()];
	return os;
}

template <class T, class U> istream &operator>>(istream &is, pair<T, U> &p) {
	return is >> p.first >> p.second;
}

template <class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) {
	return os << p.first << ' ' << p.second;
}
// }}}

// vim: fdm=marker
