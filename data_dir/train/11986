#include<bits/stdc++.h>
#define x first
#define y second
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ins insert
#define all(v) v.begin(),v.end()
#define sz(v) (int)v.size()
#define up_b upper_bound
#define low_b lower_bound
#define rep(i,a,b) for(ll i=a;i<=b;i++)
#define rev(i,a,b) for(int i=b;i>=a;i--)
#define boost ios_base::sync_with_stdio(NULL),cin.tie(NULL),cout.tie(NULL)
#define nl '\n'

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<ll,int> pli;
typedef pair<int,ll> pil;
typedef pair<ll,ll> pll;
typedef vector<int> vi;
typedef vector<pii> vii;

const int N=100001;
const int MXN=1000001;
const int inf=1e9;
const ll INF=1e18;

vii g[8*N];

int num[N];

ll d[8*N];

int mx=0;

void buildtree1(int v,int tl,int tr){
  mx=max(mx,v);
  if(tl==tr){
    num[tl]=v;
    d[v]=INF;
    return ;
  }
  d[v]=INF;
  int tm=(tl+tr)/2;
  buildtree1(v*2,tl,tm);
  buildtree1(v*2+1,tm+1,tr);
  g[v*2].pb(mp(v,0));
  g[v*2+1].pb(mp(v,0));
}

void buildtree2(int v,int tl,int tr){
  if(tl==tr){
    return ;
  }
  d[mx+v]=INF;
  int tm=(tl+tr)/2;
  buildtree2(v*2,tl,tm);
  buildtree2(v*2+1,tm+1,tr);
  if(tl==tm)g[mx+v].pb(mp(num[tl],0));
  else g[mx+v].pb(mp(mx+v*2,0));
  if(tm+1==tr)g[mx+v].pb(mp(num[tm+1],0));
  else g[mx+v].pb(mp(mx+v*2+1,0));
}

void addE(int v,int tl,int tr,int l,int r,int x,int w,int type){
  if(tl>r||l>tr)return ;
  if(l<=tl&&tr<=r){
    if(type==0){
      if(tl==tr)g[x].pb(mp(num[tl],w));
      else g[x].pb(mp(mx+v,w));
    }
    else{
      if(tl==tr)g[num[tl]].pb(mp(x,w));
      else g[v].pb(mp(x,w));
    }
    return ;
  }
  int tm=(tl+tr)/2;
  addE(v*2,tl,tm,l,r,x,w,type);
  addE(v*2+1,tm+1,tr,l,r,x,w,type);
}

int main(){
  boost;
  int n,m,s;
  cin>>n>>m>>s;
  buildtree1(1,1,n);
  buildtree2(1,1,n);
  for(int i=1;i<=m;i++){
    int type,u,v,l,r,w;
    cin>>type>>u;
    if(type==1){
      cin>>v>>w;
      g[num[u]].pb(mp(num[v],w));
    }
    else if(type==2){
      cin>>l>>r>>w;
      addE(1,1,n,l,r,num[u],w,0);
    }
    else {
      cin>>l>>r>>w;
      addE(1,1,n,l,r,num[u],w,1);
    }
  }
  set<pli>q;
  d[num[s]]=0;
  q.insert(mp(0,num[s]));
  while(!q.empty()){
    pli p=*q.begin();
    q.erase(p);
    int v=p.y;
    for(int i=0;i<sz(g[v]);i++){
      int to=g[v][i].x;
      if(d[to]>d[v]+g[v][i].y){
        q.erase(mp(d[to],to));
        d[to]=d[v]+g[v][i].y;
        q.insert(mp(d[to],to));
      }
    }
  }
  for(int i=1;i<=n;i++){
    if(d[num[i]]==INF)cout<<"-1";
    else cout<<d[num[i]];
    cout<<" ";
  }
  return 0;
}
