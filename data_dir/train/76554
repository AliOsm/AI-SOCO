#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
// Linsanity is back 
// Who’s Kobe? 
// Fisherman can’t stop us
// Average ABCDE on a good day
using namespace std;
typedef long long ll;

const int primes[17] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59};
int T;
ll N;
vector<pair<int, int> > E;

ll expo(ll num, int p)
{
    ll ret = 1;
    for (int i = 0; i < p; i++)
    {
        if (ret > N/num)
            return N + 1;
        ret *= num;
    }
    return ret;
}

ll get_root(ll hi, int p)
{
    ll lo = 1;
    while (lo < hi)
    {
        ll mid = lo + (hi - lo + 1)/2;
        if (expo(mid, p) <= N)
            lo = mid;
        else
            hi = mid - 1;
    }
    return lo;
}

int main()
{
    scanf("%d", &T);
    for (int mask = 1; mask < (1<<17); mask++)
    {
        int s = 1, e = 1;
        bool good = true;
        for (int i = 0; i < 17; i++)
            if (mask & (1<<i))
            {
                e *= primes[i];
                if (e >= 60)
                {
                    good = false;
                    break;
                }
                s *= -1;
            }
        if (good)
            E.push_back(make_pair(e, s));
    }
    sort(E.begin(), E.end());
   
    for (int t = 0; t < T; t++)
    {
        scanf("%lld", &N);
        ll ans = N - 1, hi = 1000000001;
        for (int i = 0; i < E.size(); i++)
        {
            hi = get_root(hi, E[i].first);
            ans += E[i].second*(hi - 1);
        }
        printf("%lld\n", ans);
    }

    return 0;
}
