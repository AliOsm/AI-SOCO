#include <stdio.h>
#include <math.h>
#include <string.h>
#include <limits.h>
#include <stdlib.h>
#include <algorithm>
#include <iostream>
#include <utility>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>

using namespace std;

#define long long long
#define fi first
#define se second
typedef pair<int,int> ii;

long gcd(long a, long b) {return (b == 0)? a : gcd(b, a%b); }
long lcs(long a, long b) {return a/gcd(a,b)*b; }

int main()
{
	// ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	// freopen("input.in", "r", stdin);

	long n, k;
	long a, b;
	scanf("%lld %lld %lld %lld", &n, &k, &a, &b);

	long cyc = n*k;
	long p1 = (1+a)%cyc;
	long p2 = ((1-a)+cyc)%cyc;

	long mn = 1e18, mx = -1e18;
	for(long i = 1; i <= n; i++)
	{
		long y1 = ((i-1)*k+1+b)%cyc;
		long y2 = ((i-1)*k+1-b+cyc)%cyc;

		long l;
		l = (y1-p1+cyc)%cyc;
		if(l == 0) l = cyc;
		mn = min(mn, lcs(cyc, l)/l);
		mx = max(mx, lcs(cyc, l)/l);
		// printf("%lld\n", p1, y1);
		
		l = (y2-p1+cyc)%cyc;
		if(l == 0) l = cyc;
		mn = min(mn, lcs(cyc, l)/l);
		mx = max(mx, lcs(cyc, l)/l);
		// printf("%lld\n", l);

		l = (y1-p2+cyc)%cyc;
		if(l == 0) l = cyc;
		mn = min(mn, lcs(cyc, l)/l);
		mx = max(mx, lcs(cyc, l)/l);
		// printf("%lld\n", l);

		l = (y2-p2+cyc)%cyc;
		if(l == 0) l = cyc;
		mn = min(mn, lcs(cyc, l)/l);
		mx = max(mx, lcs(cyc, l)/l);
		// printf("%lld\n", l);
	}
	printf("%lld %lld\n", mn, mx);
}








