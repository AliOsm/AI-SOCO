#include <iostream>
#include <iomanip>
#include <set>
#include <algorithm>
#include <unordered_map>
#include <assert.h>
#include <cstring>
#include <vector>
#include <chrono>
#include <random>
#include <cmath>
#include <queue>
#include <functional>
#include <map>

using namespace std;
#define N 500005
#define MOD 1000000007
#define LL long long int
#define INF 1e18

vector<int> pos[N];
int cnt[N];

int maxsubarray(vector<int> &v) {
  int n=v.size(),currmin=0,currsum=0,ans=0;
  for (int i=0;i<n;i++) {
    currsum+=v[i];
    ans=max(ans,currsum-currmin);
    currmin=min(currmin,currsum);
  }
  return ans;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);cout.tie(NULL);
  int n,m,i,j,x,y,c,ans;
  cin >> n >> c;
  vector<int> cand;
  for (i=0;i<n;i++) {
    cin >> x;
    pos[x].push_back(i);
    cand.push_back(x);
    if (i>0) cnt[i]=cnt[i-1];
    if (x==c) cnt[i]++;
  }
  sort(cand.begin(),cand.end());
  cand.erase(unique(cand.begin(),cand.end()),cand.end());
  ans=cnt[n-1];
  for (auto it:cand) if (it!=c) {
    sort(pos[it].begin(),pos[it].end());
    m=pos[it].size();
    vector<int> curr;
    curr.push_back(1);
    for (j=1;j<m;j++) {
      curr.push_back(-(cnt[pos[it][j]]-((pos[it][j-1]>0) ? cnt[pos[it][j-1]-1] : 0)));
      curr.push_back(1);
    }
    ans=max(ans,cnt[n-1]+maxsubarray(curr));
  }
  cout << ans << '\n';
}
