#include <bits/stdc++.h>

using namespace std;

#define DIM 300009
#define INF ((long long)1e18+9ll)
#define pairll pair<long long,long long>
#define fi first
#define se second
#define ld long double
#define amen exit(0)
#define endl '\n'
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define MODULO 998244353
#define eps 5001

stack<long long>s[DIM];

long long a[DIM],b[DIM];

long long i,j,k,l,n,m,flag;

long long T[DIM*4];

void buildtree(long long v,long long tl,long long tr){
    if(tl==tr){
        T[v]=s[tl].top();
        return;
    }

    long long tm=(tl+tr)/2;

    buildtree(v*2+1,tl,tm);
    buildtree(v*2+2,tm+1,tr);
    T[v]=min(T[v*2+1],T[v*2+2]);
}

void update(long long v,long long tl,long long tr,long long x){
    if(tl>x || x>tr)return;

    if(tl==tr){
        T[v]=s[tl].top();
        return;
    }

    long long tm=(tl+tr)/2;
    update(v*2+1,tl,tm,x);
    update(v*2+2,tm+1,tr,x);
    T[v]=min(T[v*2+1],T[v*2+2]);
}

long long get(long long v,long long tl,long long tr,long long L,long long R){
    if(tl>R || L>tr)return INF;

    if(L<=tl && tr<=R)return T[v];

    long long tm=(tl+tr)/2;
    return min(get(v*2+1,tl,tm,L,R),get(v*2+2,tm+1,tr,L,R));
}

int main()
{
  //  fast;

    int nt;
    cin>>nt;
    while(nt--){
        cin>>n;
        for(i=1;i<=n;i++)cin>>a[i];
        for(i=1;i<=n;i++)cin>>b[i];

        for(i=1;i<=n;i++){
            while(!s[i].empty())s[i].pop();
            s[i].push(INF);
        }

        for(i=n;i>0;i--){
            s[a[i]].push(i);
        }

        buildtree(0,1,n);

        flag=0;

        for(i=1;i<=n;i++){
           // cout<<i<<' '<<b[i]<<' '<<s[b[i]].size()<<endl;
            k=s[b[i]].top();
            if(k==INF){
                flag=1;
                break;
            }

           // cerr<<"A"<<endl;

            if(get(0,1,n,1,b[i])!=k){
                flag=1;
                break;
            }
            //cerr<<"B"<<endl;

            s[b[i]].pop();
            //cerr<<"A"<<endl;
            update(0,1,n,b[i]);
            //cerr<<"B"<<endl;
        }

        if(flag==1){
            cout<<"NO"<<endl;
            continue;
        }

        cout<<"YES"<<endl;
    }

    amen;
}
