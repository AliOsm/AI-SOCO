#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <set>

using namespace std;

typedef long long ll;

const int MAXN = 4e5;

int v[MAXN];

ll dp[MAXN];

typedef pair<int, int> pi;

pair<int, int> taken[MAXN];
vector<int> I[MAXN];

int main()
{

    int n, m; cin >> n >> m;

    for(int i = 0; i < n; i++){
        int c, p; cin >> c >> p;
        I[c].push_back(p);
    }

    for(int j = 1; j <= 3; j++){
        sort(I[j].begin(), I[j].end());
        reverse(I[j].begin(), I[j].end());
    }

    if( I[1].size() > 0 ){
        dp[1] = I[1][0];
        taken[1] = make_pair(1, 0);
    }

    for(int j = 2; j <= m; j++){

        {

            ll cur = dp[j - 1];
            int used = taken[j-1].first;
            if( used < I[1].size() ){
                dp[j] = cur + I[1][used];
                taken[j] = taken[j-1];
                taken[j].first++;
            }

        }

        {
            ll cur = dp[j - 2];
            int used = taken[j-2].second;

            if(used < I[2].size() ){
                ll t = I[2][used];

                if( cur + t >= dp[j] ){
                    dp[j] = cur+t;
                    taken[j] = taken[j-2];
                    taken[j].second++;
                }
            }
        }

    }

    ll ans = 0;

    for(int i = 1; i <= m; i++){
        dp[i] = max(dp[i-1], dp[i]);
        ans = max(ans, dp[i]);
    }

    ll act = 0;
    int left = m;
    for(int i = 0; i < I[3].size(); i++){
        act += I[3][i];
        left -= 3;
        if( left >= 0)
            ans = max(ans, act + dp[left]);
        else
            break;
    }

    cout << ans << endl;

    return 0;
}