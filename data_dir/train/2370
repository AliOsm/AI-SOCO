#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long ll;

const int MAXN = 5005;
const int INFTY = 1<<30;
int N, M, T;
vector<pair<int, int> > adj[MAXN];
vector<int> order;
bool vis[MAXN];
int dp[MAXN][MAXN];
int prv[MAXN][MAXN];

void dfs(int cur)
{
    vis[cur] = true;
    for (int i = 0; i < adj[cur].size(); i++)
    {
        int next = adj[cur][i].first;
        if (vis[next])
            continue;
        dfs(next);
    }
    order.push_back(cur);
}

int main()
{
    ios::sync_with_stdio(0);

    cin >> N >> M >> T;
    for (int i = 0, a, b, c; i < M; i++)
    {
        cin >> a >> b >> c;
        adj[a].push_back(make_pair(b, c));
    }

    dfs(1);

    for (int i = 0; i < MAXN; i++)
        for (int j = 0; j < MAXN; j++)
            dp[i][j] = INFTY;

    dp[N][1] = 0;
    for (int i = 0; i < order.size(); i++)
    {
        int cur = order[i];
        for (int j = 0; j < adj[cur].size(); j++)
        {
            int next = adj[cur][j].first, w = adj[cur][j].second;
            for (int k = 1; k <= N; k++)
            {
                if (dp[next][k] == INFTY)
                    continue;
                if (dp[cur][k + 1] > dp[next][k] + w)
                {
                    dp[cur][k + 1] = dp[next][k] + w;
                    prv[cur][k + 1] = next;
                }
            }
        }
    }

    int best = 0;
    for (int i = 1; i <= N; i++)
        if (dp[1][i] <= T)
            best = i;

    cout << best << "\n";
    for (int i = best, cur = 1; i >= 1; i--)
    {
        cout << cur << " ";
        cur = prv[cur][i];
    }
    cout << "\n";
    
    return 0;
}

