#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
typedef unsigned long long ll;

int main()
{
	ios::sync_with_stdio(false);
	int n, k;
	cin >> n >> k;
	vector<ll> a(n);
	for (int i = 0; i < n; i++)
		cin >> a[i];

	vector<int> nextPos(n);
	int currL = -1, currR = -1;
	for (int i = 0; i < n; i++)
	{
		if (a[i] == 1)
		{
			if (currL == -1)
				currL = i;
			currR = i;
		}
		else
		{
			if (currL != -1)
			{
				for (int j = currL; j <= currR; j++)
					nextPos[j] = currR + 1;
				if (currL - 1 >= 0)
					nextPos[currL - 1] = currR + 1;
				currL = -1;
				currR = -1;
			}
			nextPos[i] = i + 1;
		}
	}
	if (currL != -1)
	{
		for (int j = currL; j <= currR; j++)
			nextPos[j] = currR + 1;
		if (currL - 1 >= 0)
			nextPos[currL - 1] = currR + 1;
	}

	ll result = 0;
	for (int i = 0; i < n; i++)
	{
		ll p = a[i], s = a[i];
		if (p == k * s)
			result++;
		int currPos = i;
		while (true)
		{
			ll newS = s + nextPos[currPos] - currPos - 1;
			if (p % k == 0 && p / k > s && p / k <= newS)
				result++;
			s = newS;
			currPos = nextPos[currPos];
			ll newP;
			if (currPos < n)
			{
				s += a[currPos];
				newP = p * a[currPos];
			}
			else
				newP = p;
			if (newP / p != a[currPos])
				break;
			p = newP;
			if (p == k * s)
				result++;
			if (currPos == n)
				break;
		}
	}
	cout << result << endl;
}