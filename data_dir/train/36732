#include<bits/stdc++.h>

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define all(c) (c).begin(),(c).end()
#define mp make_pair
#define pb push_back
#define each(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
const int inf = (int)1e9;
const double INF = 1e12, EPS = 1e-9;

const int LIM = 100000;
vector<ll> ans;

const int MX = 1000010;
bool p[MX];
int firstdiv[MX];
vi prime;
void rec(int, ll);

inline void rec2(int pos, const vector<ll> &d, const vector<ll> &e, ll cur, vector<ll> &ds){
	
	if(pos == d.size()){
		ds.pb(cur);
		return;
	}
	rep(it, e[pos] + 1){
		rec2(pos + 1, d, e, cur, ds);
		cur *= d[pos];
	}
}

inline void rec(int iter, ll x){
	
	if(ans.size() >= LIM) return;
	if(x == 1 || iter == 0){
		ans.pb(x);
		return;
	}
	if(ans.size() + iter >= LIM){
		while(ans.size() < LIM) ans.pb(1);
		return;
	}
	
	/*
	if(x == 1){
		rep(it, iter) ans.pb(1);
		while(ans.size() > LIM) ans.pop_back();
		return;
	}
	*/
	ll y = x;
	vector<ll> d, e, ds;
	
	if(x >= MX){
		
		for(int i = 0; i < prime.size() && (ll)prime[i] * prime[i] <= y; i++) if(y % prime[i] == 0){
			
			int cnt = 0;
			while(y % prime[i] == 0) y /= prime[i], cnt++;
			d.pb(prime[i]); e.pb(cnt);
		}
		if(y > 1) d.pb(y), e.pb(1);
	}
	else{
		while(y > 1){
			if(d.size() && firstdiv[y] == d.back()) e.back()++;
			else d.pb(firstdiv[y]), e.pb(1);
			
			y /= firstdiv[y];
		}
	}
	
	rec2(0, d, e, 1, ds);
	sort(all(ds)); ds.erase(unique(all(ds)), ds.end());
	
	if(ds.size() == 2){
		rep(it, iter) ans.pb(1);
		ans.pb(x);
		
		while(ans.size() > LIM) ans.pop_back();
		return;
	}
	
	rep(i, ds.size()){
		
		if(ds[i] < MX && !p[ds[i]]){
			rep(it, iter - 1) ans.pb(1);
			ans.pb(ds[i]);
			
			while(ans.size() > LIM) ans.pop_back();
		}
		else rec(iter - 1, ds[i]);
		if(ans.size() >= LIM) return;
	}
}

void run(){
	
	p[0] = p[1] = 1;
	for(int i = 2; i < MX; i++) if(!p[i]){
		prime.pb(i);
		for(int j = i; j < MX; j += i) firstdiv[j] = i;
		for(ll j = (ll)i * i; j < MX; j += i) p[j] = 1;
	}
	for(int i = 2; i < MX; i++) if(!p[i]) prime.pb(i);
	
	ll x, k;
	cin >> x >> k;
	
	rec(min(100000ll, k), x);
	
	
	#if 0
	
	int one = 0;
	vector<ll> cur, next;
	cur.pb(x);
	
	rep(it, k){
		next.clear();
		
		rep(i, cur.size()){
			
			ll t = cur[i];
			vector<ll> divs;
			
			for(ll i = 1; i * i <= t; i++) if(t % i == 0){
				divs.pb(i);
				if(i * i != t) divs.pb(t / i);
			}
			sort(all(divs));
			
			rep(j, divs.size()){
				if(next.empty() && divs[j] == 1) one++;
				else next.pb(divs[j]);
				if(next.size() + one >= LIM) break;
			}
			if(next.size() + one >= LIM) break;
		}
		cur.swap(next);
	};
	
	//dbg(one);
	
	one = min(one, LIM);
	vector<ll> ans(one, 1);
	
	rep(i, cur.size()){
		ans.pb(cur[i]);
		if(ans.size() >= LIM) break;
	}
	#endif
	
	rep(i, ans.size()) printf("%I64d%c", ans[i], i == ans.size() - 1 ? '\n' : ' ');
}

#if 1
int main(){
	run();
	return 0;
}
#else
int esp_org, esp_new;
int main(){
	const int size = 512*1024*1024;
	void *p = malloc(size);
	esp_new = (int)p + size - 1;
	
	__asm__("mov %%esp, %0" : "=r"(esp_org) : : );
	__asm__("mov %0, %%esp" : : "r"(esp_new) : );
	
	run();
	
	__asm__("mov %0, %%esp" : : "r"(esp_org) : );
	free(p);
	return 0;
}
#endif