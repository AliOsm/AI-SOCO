#include <bits/stdc++.h>


using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;


#define int ll
#define rand shittttty_shit
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rng_64(chrono::steady_clock::now().time_since_epoch().count());


typedef pair<int, int> pii;
typedef pair<string, string> pst;
typedef pair<pii, pii> piii;
typedef vector<piii> vpii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector< vi > vvi;
typedef vector< vvi > vvvi;
typedef vector<pii> vpi;
typedef vector<short> vs;
typedef vector<vs> vvs;
typedef vector<vvs> vvvs;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vvl> vvvl;
typedef vector<ld> vld;
typedef vector<vld> vvld;
typedef vector<vvld> vvvld;
typedef vector<string> vst;
typedef vector<vst> vvst;
typedef pair<ld, ld> pld;
typedef pair<pld, pld> pldd;
typedef vector<pld> vpd;
typedef complex<double> base;


#define inmin(a, b) a = min(a, (b))
#define inmax(a, b) a = max(a, (b))
#define my_abs(a) (((a) >= 0) ? (a) : -(a))
#define mp(a, b) make_pair(a, (b))
#define ALL(a) a.begin(),a.end()
#define RALL(a) a.rbegin(),a.rend()
#define sqr(x) ((x) * (x))
#define fori(i, n) for(int i = 0; i < int(n); ++i)
#define SZ(a) ((int)((a).size()))
#define MODIK(a) (a >= M ? a - M : a)
#define triple(T) tuple<T, T, T>
#define quad(T) tuple<T, T, T, T>
#define watch(x) cout << (#x) << " = " << x << endl;
#ifdef MAX_HOME
#define cerr cout
#else
#define cerr if (false) cerr
#endif


const double PI = 2 * acos(0.0);

const string DIGITS = "0123456789";
const string ALPH = "abcdefghijklmnopqrstuvwxyz";

istream &operator >> (istream &in, pii &a)
{
    in >> a.first >> a.second;
    return in;
}


ostream &operator << (ostream &out, pii &a)
{
    out << a.first << ' ' << a.second;
    return out;
}


istream &operator >> (istream &in, pld &a)
{
    in >> a.first >> a.second;
    return in;
}


ostream &operator << (ostream &out, pld &a)
{
    out << a.first << ' ' << a.second;
    return out;
}


template <class T0, class T1>
inline ostream & operator << (ostream &out, pair<T0, T1> &a) {
    return out << "{" << a.first << ", " << a.second << "}";
}

template <class T0, class T1, class T2>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) << ", " << get<2>(a) << "}";
}

template <class T0, class T1, class T2, class T3>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2, T3> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) <<
               ", " << get<2>(a) << ", " <<  get<3>(a) << "}";
}

template<class T>
inline ostream & operator << (ostream &out, vector<T> &a) {
    out << "[";
    fori (i, a.size())
        out << a[i] << vector<string>{", ", "]  "}[i + 1 == a.size()];
    return out;
}


void print(vi kek, int k)
{
    ofstream cout("output.txt");
    cout << SZ(kek) << ' ' << k << '\n';
    for (auto p : kek) {
        cout << p << ' ';
    }
    cout.close();
    exit(0);
}


void smain();

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

#ifdef ART_HOME
    freopen("input.txt", "r", stdin);
    clock_t start = clock();
#endif
    cout << setprecision(12) << fixed;
    smain();
#ifdef ART_HOME
    cout << "\n\n\n\nTOTAL EXECUTION TIME: " << float( clock () - start ) /  CLOCKS_PER_SEC << endl;
#endif
}


const int M1 = 1000000093, p1 = 27162;
const int M2 = 1000000087, p2 = 241;

const ld pi = atan2l(1, 0) * 2, EPS = 1e-8, PEPS = 1e-7;
const int N = 1e6 + 10, B = 3, M = 1e9 + 7, K = 110, psze = 17, pw = 20, oo = 1e18 + 100;


int balance(const string &s) {
    int cnt = 0;
    int mn = 0;

    for (auto c : s)
    {
        if (c == '(')
            cnt++;
        else
            cnt--;

        mn = min(mn, cnt);
    }

    return mn;
}


int lft[N], rght[N];


int get_count(const vi &kek, int lb, int rb)
{
    if (rb < lb)
        return 0;

    int l = -1, r = SZ(kek);
    while (r - l > 1)
    {
        int m = (l + r) >> 1;
        if (kek[m] > rb)
            r = m;
        else
            l = m;
    }

    int right = l;

    l = -1, r = SZ(kek);
    while (r - l > 1)
    {
        int m = (l + r) >> 1;
        if (kek[m] >= lb)
            r = m;
        else
            l = m;
    }

    int left = r;

    return right - left + 1;
}


void smain() {
    int n;
    string s;
    cin >> n >> s;

    int cnt = 0;
    int mn = 1, ind;

    for (int i = 0; i < n; ++i)
    {
        auto c = s[i];

        if (c == '(')
            cnt++;
        else
            cnt--;

        if (cnt < mn)
        {
            ind = i;
            mn = cnt;
        }
    }

    if (cnt)
    {
        cout << "0\n1 1";
        return;
    }

    int shift = ind + 1;
    s += s.substr(0, shift);
    s.erase(s.begin(), s.begin() + shift);


    vi bal(n), _0, _1;
    int cur = 0;

    stack<int> kek;

    int count = 0;
    for (auto c : s)
    {
        if (c == '(')
            kek.push(cur);
        else
        {
            rght[kek.top()] = cur;
            lft[cur] = kek.top();
            kek.pop();
        }

        if (!SZ(kek))
            count++;

        bal[cur++] = SZ(kek);
        if (bal[cur - 1] == 1)
            _1.push_back(cur - 1);
        else if (!bal[cur - 1])
            _0.push_back(cur - 1);
    }



    int label = 0, l = 0, r = 0;
    for (int i = 0; i + 1 < n; ++i) {
        cnt = 0;

        if (bal[i] == 1 && bal[i + 1] == 2) {
            cnt += get_count(_1, i + 1, rght[i] - 1);
            cnt -= get_count(_0, 0, i - 1);
            cnt -= get_count(_0, rght[i] + 1, n - 1);
        }

        if (cnt > label)
        {
            label = cnt;
            l = i, r = rght[i];
        }
    }


    for (int i = 0; i < n; ++i) {
        cnt = 0;

        if (bal[i] == 2) {
            for (int j = i; j < n; ++j) {
                if (bal[j] == 1)
                {
                    rght[i] = j;
                    break;
                }

                if (bal[j] == 2)
                    cnt++;
            }
        }

        if (cnt > label)
        {
            label = cnt;
            l = i, r = rght[i];
        }
    }

    vi flex(n);
    flex[0] = shift;
    for (int i = 1; i < n; ++i)
        flex[i] = (flex[i - 1] + 1) % n;


    l = flex[l], r = flex[r];


    cout << count + label << '\n' << l + 1 << ' ' << r + 1 << '\n';
}