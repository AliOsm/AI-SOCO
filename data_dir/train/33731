// In The Name Of God
#include<bits/stdc++.h>
#define PR(v) copy((v).begin(),(v).end(),ostream_iterator<int>(cout," ")),cout<<endl
#define PR2(v,w) copy((v),(w),ostream_iterator<int>(cout," ")),cout<<endl
#define IOS ios::sync_with_stdio(false),cin.tie(0)
#define rep(I,Q) for(int I=1;I<=(Q);I++)
#define err(I) cerr<<#I<<" : "<<I<<"\n"
#define pb push_back
#define ll long long
#define ld double
using namespace std;

const int N = 1e5+22 ;
const ld eps=1e-15;

int n,k,m;
int edg[N][2],pr[N];
int par[N];
vector<int>tree;
ld we[N];
bool sw;

bool cmp(int i,int j)
{
	return we[i]<we[j];
}

int fpar(int v)
{
	if(par[v]==v) return v;
	return par[v]=fpar(par[v]);
}

bool merge(int u,int v)
{
	if(fpar(u)==fpar(v)) return false;
	par[fpar(u)]=fpar(v);
	return true;
}

int ck(ld X)
{
	for(int i=1;i<=n;i++) par[i]=i;

	int ted=0;
	for(int i=1;i<=m;i++) if(edg[i][0]==1) we[i]+=X;
	
	for(int i=1;i<=m;i++) pr[i]=i;
	
	sort(pr+1,pr+1+m,cmp);
	
	for(int i=1;i<=m;i++)
	{
		int j=pr[i];
		bool st=merge(edg[j][0],edg[j][1]);
		if(st && sw) tree.pb(j);
		if(st && edg[j][0]==1) ted++;
	}
	
	for(int i=1;i<=m;i++) if(edg[i][0]==1) we[i]-=X;

	return ted;
}

int main()
{
	IOS;
	cin>>n>>m>>k;
	rep(i,m)
	{
		int x,y,w;
		cin>>x>>y>>w;
		if(x>y) swap(x,y);
		edg[i][0]=x , edg[i][1]=y , we[i]=w;
	}
	
	ld low=-1e9-22,high=1e9+22,mid;
	
	while(eps<high-low)
	{
		mid=(low+high)/2;
//		cout<<mid<<" "<<ck(mid)<<endl;
		int t=ck(mid);
		if(t>k)
			low=mid;
		else if(t<k)
			high=mid;
		else
		{
			low=mid;
			high=mid;
		}
	}
//	cout<<low<<" "<<high<<endl;
//	cout<<ck(low)<<" "<<ck(high)<<endl;
//	return 0;

	sw=true;
	if(ck(low)!=k) tree.clear(),sw=ck(high)==k;
	if(!sw || tree.size()!=n-1) return cout<<-1,0;
	
	cout<<n-1<<endl;
	PR(tree);

	return 0;
}
