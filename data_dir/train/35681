#include <bits/stdc++.h>

#define fore(i, l, r) for(int i = int(l); i < int(r); ++i)
#define forn(i, n) fore(i, 0, n)
#define nfor(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define for1(i, n) for(int i = 1; i < int(n); ++i)

#define mp make_pair
#define pb push_back
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define x first
#define y second

#define correct(x, y, xmax, ymax) ((x) >= 0 && (x) < (xmax) && (y) >= 0 && (y) < (ymax))
#define max(a, b) ((a > b)? a : b)
#define min(a, b) ((a < b)? a : b)
#define abs(a) ((a < 0) ? -a : a)
#define sqr(a) (a * a)

using namespace std;
    
template<class T> T gcd(T a, T b) { while(a > 0){ b %= a; swap(a, b);} return b; }
template<class T> T lcm(T a, T b) { return a / gcd (a, b) * b; }
template<class T> T sign(T a) { return a > 0 ? 1 : (a < 0 ? -1 : 0); }

template<class A, class B> ostream& operator <<(ostream &out, const pair<A, B> &p) {
    return out << "(" << p.x << ", " << p.y << ")";
};

template<class A> ostream& operator <<(ostream &out, const vector<A> &v) {
    out << "[";
    forn(i, sz(v)) {
        if(i)
            out << ", ";
        out << v[i];
    }
    return out << "]";
}

mt19937 myRand(time(NULL)); // [0, 2^32)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
typedef vector <int> vi;

const int dx[] = {-1, 0, 1,  0};
const int dy[] = { 0, 1, 0, -1};
const int dxK[] = {-1, -1, 0, 1, 1,  1,  0, -1};
const int dyK[] = { 0,  1, 1, 1, 0, -1, -1, -1};
const int dxKn[] = {-2, -1, 1, 2,  2,  1, -1, -2};
const int dyKn[] = { 1,  2, 2, 1, -1, -2, -2, -1};

const int INF = int(1e9) + 100;
const li INF64 = li(1e18) + 100;
const ld EPS = 1e-9;
const ld PI = acosl(-1.0);
const int N = 100 * 1000 + 9;

int n;
int c[N];
bool big[N];
int cnt[N];
li sum;
int MX = -1;
vector <int> g[N];
li res[N];
int szt[N];

inline bool read() {
    if(!(cin >> n))
    	return false;
    forn(i, n) scanf("%d", c + i);
    forn(_, n - 1){
    	int u, v;
    	scanf("%d %d", &u, &v);
    	--u, --v;
    	g[u].pb(v), g[v].pb(u);	
    }
    return true;
}

void szDfs(int v, int p){
	szt[v] = 1;
	for(auto to : g[v]){
		if(to == p) continue;
		szDfs(to, v);
		szt[v] += szt[to];
	}
}

void rec(int v, int p, int d){
	cnt[c[v]] += d;
	if(cnt[c[v]] > MX){
		MX = cnt[c[v]];
		sum = 0;
	}	
	
	if(cnt[c[v]] == MX)
		sum += c[v];
	if(cnt[c[v]] == MX - 1 && d == -1)
		sum -= c[v];
	

	for(auto to : g[v])
		if(to != p && !big[to])
			rec(to, v, d);
	
}

void dfs(int v, int p, bool keep){
	int mx = -1, id = -1;
	for(auto to : g[v]){
		if(to == p) continue;
		if(szt[to] > mx)
			mx = szt[to], id = to;
	}

	for(auto to : g[v]){
		if(to == p || to == id) continue;
		dfs(to, v, false);
	}
	
	if(id != -1){
		dfs(id, v, true);
		big[id] = true;
	}
	
	rec(v, p, 1);
	res[v] = sum;
	if(id != -1) big[id] = false;
	if(!keep){
		rec(v, p, -1);
		MX = -1;
		//forn(i, N) assert(cnt[i] == 0);
		assert(sum == 0);
	}
}
							
inline void solve() {
	szDfs(0, 0);
	dfs(0, 0, 0);
	forn(i, n)
		printf("%I64d ", res[i]);		
}

int main() {
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    int tt = clock();
#endif
    cout << fixed << setprecision(15);
    cerr << fixed << setprecision(15);

    int tc = 1;
	//cin >> tc;
    while(tc--) {
    	read();
        solve();

#ifdef _DEBUG
        cerr << "TIME = " << clock() - tt << endl;
        tt = clock();
#endif
    }

    return 0;
}