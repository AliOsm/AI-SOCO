#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>   
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)1e6 + 123;
const ll inf = (ll)3e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, a[N], pref[N];
pii x[N];

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> n;
   for (int i = 1; i <= n; i ++) x[i].F = 2 * (i - 1) + 1, x[i].S = x[i].F + 1;
   int nd = 2 * n;
   nd = nd * (nd + 1) / 2;
   nd >>= 1;
   int need = n / 2;
   for (int i = 2; i <= n; i += 2) a[i] = x[i].S, x[i].S = 0;
   for (int i = 1; i <= n; i += 2) a[i] = x[i].F, x[i].F = 0;
   for (int i = 1; i <= n; i ++) {
      if (x[i].F == 0) a[n + i] = x[i].S;
      else a[n + i] = x[i].F;
   }
   for (int i = 1; i <= 2 * n; i ++) a[2 * n + i] = a[i];
   for (int i = 1; i <= 4 * n; i ++) pref[i] = pref[i - 1] + a[i];
   for (int i = 1; i + n - 1 <= 4 * n; i ++) {
      if (pref[i + n - 1] - pref[i - 1] != nd && pref[i + n - 1] - pref[i - 1] != nd + 1) cout << "NO", exit (0);
   }
   cout << "YES\n";
   for (int i = 1; i <= 2 * n; i ++) cout << a[i] << ' ';
}                                     

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
// cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
