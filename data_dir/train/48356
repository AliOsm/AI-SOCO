#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
int dp[5010];
long long a[5010] , b[5010];
int p[5010];
// x = y * (y-1)/2 + y * k   (x,y) is a  cool pair
bool check(int i,int j) // two cases : a[j] is odd or a[j] is even
{
    if(a[j]&1) {
        // if a[j] is odd , a[i] must be divided by a[j];
        return (a[i]%a[j]==0) ;
        // cases : 12 3 3 3 3 3  3 3 3  (a[i] = 12 , a[j] = 3)
    } else {
        // the odd factor of a[i] must be divided by the odd factor of a[j]
        // if x y is two adjacent cool numbers then 2*x must be divided by y and x must not be divided by y
        if(p[j]==j-i+p[i] && b[i]%b[j]==0) return true; // special cases
        return p[j] <= j-i-1  && b[i]%b[j]==0;                                      //comman cases
        //comman  cases : a[i] = 6 , a[j] = 12 , we can construct the cool sequence as follows:
        //6 3 3 3 3 3 3 3 6 12
    }
}
int main()
{
    int n ;
    scanf("%d",&n);
    for(int i = 1; i <= n; i++)
    {
        scanf("%I64d",&a[i]);
        b[i] = a[i];
        for(;!(b[i]&1);b[i]/=2,p[i]++);
    }
    int res = 0 ;
    for(int i = 1; i <= n; i++)
    {
        dp[i] = 1;
        for(int j = 1; j < i; j++)
        {
            if(check(j,i))
            {
                dp[i] = max(dp[j]+1,dp[i]);
            }
            res = max(res,dp[i]);
        }
    }
    printf("%d\n",n-res);
    return 0;
}
