//#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <cmath>

using namespace std;
#define F first 
#define S second
#define sqr(x) ((x) * (x))
#define all(c) c.begin(), c.end()
#define tr(c, it) for(decltype (c.begin()) it = c.begin(); it != c.end(); it++)
#define eps 1e-12
#define pb push_back
#define ppb pop_back
#define lb lower_bound
#define ub upper_bound
#define inf 2e9
#define sz 100100
#define N 1000010
#define M 998244353
   
#define name "a"
#define isFile 0
 
typedef long long ll;	typedef unsigned long long ull;	typedef long double ld;
int bPow(int v, int u, int mod){	if(!u)	return 1;	int res = bPow(v, u / 2, mod);	res = (res * 1ll * res) % mod;	if(u & 1) res = (res * 1ll * v) % mod;	return res;} 
bool fb(ll x){return 0;}
int bSearch(int l, int r){	while(r - l > 1){	int m = (l + r) / 2;	if(fb(m))	l = m;	else		r = m;}	if(fb(l + 1))	l++;	if(!fb(l))		l = 0;	return l;}
void faster(){		ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);	if(isFile){	freopen(name".in", "r", stdin); freopen(name".out", "w", stdout); }}
vector<int> prime; bool notprime[N];
void resh(){ int n = N - 10;	for(int i = 2; i < n; i++)	if(!notprime[i]){	prime.pb(i); for(int j = i; j < n; j += i) notprime[j] = 1;}}
int is_comp(ll p){	for(int i = 0; prime[i] * 1ll * prime[i] <= p; i++){	if(p % prime[i] == 0)	return prime[i]; }	return 0;	}
bool is_prime(ll p){	for(int i = 0; prime[i] * 1ll * prime[i] <= p; i++){	if(p % prime[i] == 0)	return 0; }	return 1;	}
int gcd(int a, int b){	if(a > b)	swap(a, b);	if(!a)	return b;	return gcd(b % a, a);	}

int n;
bool bad;
bool ch(int x, int y, int u, int v){
	return max(x, u) <= min(y, v);
}
pair< pair<int, int>, int > a[sz], A[sz];
pair< int, int > b[sz], B[sz];
set<pair <int, int> > c;
ll cur;
int main(){
	faster();
	cin >> n;
	for(int i = 0; i < n; i++){
		cin >> a[i].F.F >> a[i].F.S >> b[i].F >> b[i].S;
		a[i].S = i;
		A[i].F.F = b[i].F;
		A[i].F.S = b[i].S;
		A[i].S = i;
		B[i].F = a[i].F.F;
		B[i].S = a[i].F.S;
	}
	sort(a, a + n);
	int ind, u, v, w;
	pair<int, int> C;
	for(int i = 0; i < n; i++){
		ind = a[i].S, u = a[i].F.F, v = a[i].F.S;
		while(!c.empty() && c.begin() -> F < u){
			w = c.begin() -> S;
			if(ch(b[ind].F, b[ind].S, b[w].F, b[w].S)){
				cout << "NO";
				return 0;
			}
			c.erase(c.begin());
		}
		cur += c.size();
		C.F = v, C.S = ind;
		c.insert(C);
	}
	sort(A, A + n);
	c.clear();
	for(int i = 0; i < n; i++){
		ind = A[i].S, u = A[i].F.F, v = A[i].F.S;
		while(!c.empty() && c.begin() -> F < u){
			w = c.begin() -> S;
			if(ch(B[ind].F, B[ind].S, B[w].F, B[w].S)){
				cout << "NO";
				return 0;
			}
			c.erase(c.begin());
		}
		cur -= c.size();
		C.F = v, C.S = ind;
		c.insert(C);
	}	
	if(!cur)
		cout << "YES";
	else
		cout << "NO";
	return 0;
}	