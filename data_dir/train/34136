#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

const int INF = 1000000000;
const int MAX_N = 105;
const int MAX_M = 1000005;

int n, m;
int g[MAX_N][MAX_N];
int p[MAX_M];
int dp[MAX_M];
int dpPrev[MAX_M];
int lastPos[MAX_N];

int main()
{
	ios::sync_with_stdio(false);
	cin >> n;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			g[i][j] = INF;
	for (int i = 0; i < n; i++)
	{
		string s; cin >> s;
		for (int j = 0; j < n; j++)
			if (s[j] == '1')
				g[i][j] = 1;
	}
	cin >> m;
	for (int i = 0; i < m; i++)
	{
		cin >> p[i];
		p[i]--;
	}

	for (int k = 0; k < n; k++)
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				g[i][j] = min(g[i][j], g[i][k] + g[k][j]);

	for (int i = 0; i < m; i++)
	{
		dp[i] = INF;
		dpPrev[i] = -1;
	}
	dp[0] = 1;
	for (int i = 0; i < n; i++)
		lastPos[i] = -1;
	lastPos[p[0]] = 0;

	for (int i = 1; i < m; i++)
	{
		int u = p[i];
		for (int v = 0; v < n; v++)
			if (v != u && g[v][u] != INF && lastPos[v] != -1 && i - lastPos[v] == g[v][u] &&
				dp[lastPos[v]] + 1 < dp[i])
			{
				dp[i] = dp[lastPos[v]] + 1;
				dpPrev[i] = lastPos[v];
			}
		lastPos[u] = i;
	}
	
	vector<int> result;
	result.reserve(dp[m - 1]);
	int j = m - 1;
	while (j != -1)
	{
		result.push_back(p[j] + 1);
		j = dpPrev[j];
	}
	reverse(result.begin(), result.end());

	cout << dp[m - 1] << endl;
	for (int x : result)
		cout << x << " ";
	cout << endl;
}