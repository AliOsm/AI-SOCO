#include<bits/stdc++.h>
#define int long long 
#define fast ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define pb push_back
#define all(a) a.begin(),a.end()
#define ld long double
#define ub upper_bound
#define lb lower_bound
#define pii pair<int,int>
using namespace std;
const int N = 1e3+1;
vector<int> adj[N];
int visit[N];
int n,m,w;
int W[N];
int b[N];
vector<int> group[N];
pii p[N];
int comp;
int sumw = 0;
int sumb = 0;
void dfs(int src){
	visit[src] = 1;
	group[comp].pb(src);
	sumw+=W[src];
	sumb+=b[src];
	for(auto it:adj[src]){
		if(!visit[it])
			dfs(it);
	}
}
int dp[N][N];
int nn;
int solve(int idx,int rem){
	if(idx == comp+1){
		if(rem>=0)
			return 0;
		return -1e18;
	}
	if(rem<0)
		return -1e18;
	if(dp[idx][rem]!=-1)
		return dp[idx][rem];
	int ans = p[idx].second+solve(idx+1,rem-p[idx].first);
	ans = max(ans,solve(idx+1,rem));
	for(auto i:group[idx]){
		int beauty = b[i];
		int weight = W[i];
		ans = max(ans,beauty+solve(idx+1,rem-weight));
	}
	dp[idx][rem] = ans;
	return ans;
}
signed main()
{
    fast;
   	cin>>n>>m>>w;
   	for(int i=1;i<=n;i++)
   		cin>>W[i];
   	for(int i=1;i<=n;i++)
   		cin>>b[i];
   	for(int i=1;i<=m;i++){
   		int u,v;
   		cin>>u>>v;
   		adj[u].pb(v);
   		adj[v].pb(u);
   	}
   	for(int i=1;i<=n;i++){
   		if(!visit[i]){
   			sumb = 0;
   			sumw = 0;
   			comp++;
   			dfs(i);
   			p[comp]={sumw,sumb};
   		}
   	}
   	memset(dp,-1,sizeof(dp));
   	cout<<solve(1,w);
}   