/*input
3 2
1 1 3 2
2 1 3 2
*/
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define int long long
#define N 125
#define bit(x,y) ((x>>y)&1LL)
#define show(x) cout << (#x) << ": " << x << endl;
#define ii pair<int,int>
ostream& operator << (ostream &os, vector<int>&x) {
	for (int i = 0; i < x.size(); i++) os << x[i] << sp;
	return os;
}
ostream& operator << (ostream &os, pair<int, int> x) {
	cout << x.fi << sp << x.se << sp;
	return os;
}
ostream& operator << (ostream &os, vector<pair<int, int> >&x) {
	for (int i = 0; i < x.size(); i++) os << x[i] << endl;
	return os;
}

class MinCostMaxFlow {
private:
	const int INF = 1e18;
	struct data {
		int u, v, cap, f, cost;
		data (int _u = 0, int _v = 0, int _cap = 0, int _f = 0, int _cost = 0): u(_u), v(_v), cap(_cap), f(_f), cost(_cost) {};
		int other(data x, int u) {
			if (x.u == u) return x.v;
			return x.u;
		}
	} E;
	vector<data> e;
	vector<vector<int> > a;
	int dis[N], par[N];
	bool inqueue[N];
	queue<int> q;
	int S, T;
	bool BellmanFord() {
		while (!q.empty()) q.pop();
		memset(par, 0, sizeof(par)); memset(inqueue, 0, sizeof(inqueue)); memset(dis, 127, sizeof(dis));
		par[S] = INF; dis[S] = 0; inqueue[S] = true;
		q.push(S);
		while (!q.empty()) {
			int u = q.front(); q.pop(); inqueue[u] = false;
			for (int i = 0; i < a[u].size(); i++) {
				data t = e[a[u][i]];
				int v = E.other(t, u);
				if (t.f < t.cap && dis[v] > dis[u] + t.cost) {
					dis[v] = dis[u] + t.cost;
					par[v] = a[u][i];
					if (!inqueue[v]) {
						inqueue[v] = true;
						q.push(v);
					}
				}
			}
		}
		return par[T] != 0;
	}
	int dfs() {
		int delta = INF;
		int u = T;
		while (1) {
			delta = min(delta, e[par[u]].cap - e[par[u]].f);
			u = E.other(e[par[u]], u);
			if (u == S) break;
		}
		u = T;
		while (1) {
			e[par[u]].f += delta;
			e[par[u] ^ 1].f -= delta;
			u = E.other(e[par[u]], u);
			if (u == S) break;
		}
		return delta;
	}
public:
	void init(int _S, int _T) {
		S = _S; T = _T;
		a.assign(N, vector<int>());
	}
	void addEdge(int u, int v, int cap, int cost) {
		e.push_back(data(u, v, cap, 0, cost));
		e.push_back(data(v, u, 0, 0, -cost));
		a[u].push_back(e.size() - 2);
		a[v].push_back(e.size() - 1);
	}
	pair<int, int> solve() {
		int ret = 0; int totalFlow = 0;
		while (BellmanFord()) {
			totalFlow += dfs();
		}
		for (int i = 0; i < e.size(); i++) if (e[i].f > 0) ret += e[i].f * e[i].cost;
		return mp(ret, totalFlow);
	}
} MCMF;

int n, q;
int lo[N], hi[N];
signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cin >> n >> q;
	memset(hi, 127, sizeof(hi));
	for (int i = 1; i <= q; i++) {
		int x, y, z, t;
		cin >> x >> y >> z >> t;
		if (x == 1) {
			for (int j = y; j <= z; j++) lo[j] = max(lo[j], t);
		}
		else {
			for (int j = y; j <= z; j++) hi[j] = min(hi[j], t);
		}
	}
	int S = 0, T = 2 * n + 1;
	MCMF.init(S, T);
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= 2 * n - 1; j += 2) MCMF.addEdge(S, i, 1, j);
	}
	for (int i = n + 1; i <= 2 * n; i++) MCMF.addEdge(i, T, 1, 0);
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			if (i >= lo[j] && i <= hi[j]) MCMF.addEdge(i, j + n, 1, 0);
		}
	}
	pair<int, int> rec = MCMF.solve();
	if (rec.se != n) cout << "-1" << endl;
	else cout << rec.fi << endl;
}