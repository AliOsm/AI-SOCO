//marico el que lo lea
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
using namespace std;

void fastIO() {
	std::ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
}

#define FOR(i,f,t) for(int i=f; i<(int)t; i++)
#define FORR(i,f,t) for(int i=f; i>(int)t; i--)
#define pb push_back
#define all(obj) obj.begin(), obj.end()
#define ms(obj, val) memset(obj, val, sizeof(obj))
#define ms2(obj, val, sz) memset(obj, val, sizeof(obj[0])*sz)
#define ri(x) scanf("%d",&x)
#define rl(x) scanf("%lld",&x)
#define rii(x,y) ri(x), ri(y)
#define rll(x,y) rl(x), rl(y)

#define fst first
#define snd second
#define dprintf debug && printf
#define debug false

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> ii;

const int MAXN = 2e5+5;
const ll INF = 0x3f3f3f3f3f3f3f3f;

int n, m, k;
vi a, b, c, d;
int all[MAXN];
bool la[MAXN], lb[MAXN];

multiset<int> on, off;
ll cursum;

ll get_sum(int s){
	if(s==0)return 0;
	while(on.size() && off.size()){
		auto onit = on.end(), offit = off.begin();
		onit--;
		if(*onit > *offit){
			on.insert(*offit);
			cursum+=*offit;
			off.erase(offit);
		}else{
			break;
		}
	}
	while(on.size() < s){
		auto offit = off.begin();
		on.insert(*offit);
		cursum+=*offit;
		off.erase(offit);
	}
	while(on.size() > s){
		auto onit = on.end(); onit--;
		off.insert(*onit);
		cursum-=*onit;
		on.erase(onit);
	}
	return cursum;
}

ll solve(){
	sort(all(a));sort(all(b));sort(all(c));sort(all(d));
	ll ans = INF;
	int s=0, t=k;
	ll sumc=0, sumab=0;
	FOR(i,0,min(t,int(a.size()))) sumab+=a[i];
	FOR(i,0,min(t,int(b.size()))) sumab+=b[i];
	FOR(i,t,a.size()) off.insert(a[i]);
	FOR(i,t,b.size()) off.insert(b[i]);
	FOR(i,0,d.size()) off.insert(d[i]);
	while(s<=c.size()){
		if(t<=int(a.size()) && t<=int(b.size())){
			int r = m - (s + 2*max(0,t));
			if(r>-1 && r <= on.size() + off.size()){
				ans = min(ans, sumc + sumab + get_sum(r));
			}
		}
		if(s<c.size()) sumc+=c[s];
		s++;
		t--;
		if(t>-1 && t<a.size()) off.insert(a[t]), sumab-=a[t];
		if(t>-1 && t<b.size()) off.insert(b[t]), sumab-=b[t]; 
	}
	if(ans == INF) ans = -1;
	return ans;
}


int main(){
	rii(n,m); ri(k);
	FOR(i,0,n) ri(all[i]);
	int l;
	ri(l); FOR(i,0,l){
		int foo; ri(foo); foo--;
		la[foo]=true;
	}
	ri(l); FOR(i,0,l){
		int foo; ri(foo); foo--;
		lb[foo]=true;
	}
	FOR(i,0,n){
		if(la[i] && lb[i]) c.pb(all[i]);
		else if(la[i]) a.pb(all[i]);
		else if(lb[i]) b.pb(all[i]);
		else d.pb(all[i]);
	}
	printf("%lld\n",solve());
}