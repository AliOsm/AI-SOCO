//#define _CRT_SECURE_NO_WARNINGS
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>
#include <time.h>
#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <cassert>
#include <climits>
#include <deque>
#include <limits>
#define sz(x) int((x).size())
#define FOR(i,a,b) for(ll(i) = (a); (i) <= (b); ++(i))
#define ROF(i,a,b) for(ll(i) = (a); (i) >= (b); --(i))
#define rep(i,n) for (int(i) = 0; (i) < (n); ++(i))
#define fe(i,a) for (ll(i) = 0; (i) < int((a).size()); ++(i))
#define C(a) memset((a),0,sizeof(a))
#define pb push_back
#define ppb pop_back
#define all(c) (c).begin(), (c).end()
#define sqr(a) (a)*(a)
#define mp(a,b) make_pair((a), (b))
#define X first
#define Y second
#define file freopen("input.txt","r",stdin)
#define file2 freopen("output.txt", "w",stdout)
#define text freopen("input.txt","r",stdin); freopen("output.txt", "w",stdout)
using namespace std;
typedef vector<int> vint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;
#define y1 vamdlsfmvldf
const int mod = (int)1e9 + 7;
const int inf = (int)(1e9);
const double eps = 1e-9;
const int N = 100005;
vector<int> prefix_function(string s)
{
    vector<int> result(s.length());
    for (size_t i = 1; i < s.length(); ++i) {
        int j = result[i - 1];
        for (; j > 0 && s[i] != s[j]; j = result[j - 1]);
        if (s[i] == s[j])
        {
            ++j;
        }
        result[i] = j;
    }
    return result;
}

int main()
{
    string s1, s2;
    cin >> s1 >> s2;
    vector<int> p1 = prefix_function(s1);
    vector<int> p2 = prefix_function(s2);
    int k1 = p1[s1.length() - 1] && s1.length() % (s1.length() - p1[s1.length() - 1]) == 0 ? s1.length() - p1[s1.length() - 1] : s1.length();
    int k2 = p2[s2.length() - 1] && s2.length() % (s2.length() - p2[s2.length() - 1]) == 0 ? s2.length() - p2[s2.length() - 1] : s2.length();
    if (k1 != k2)
    {
        cout << 0 << endl;
        return 0;
    }
    for (int i = 0; i < k1; ++i)
    {
        if (s1[i] != s2[i])
        {
            cout << 0 << endl;
            return 0;
        }
    }
    int n1 = s1.length() / k1;
    int n2 = s2.length() / k2;
    size_t result = 0;
    for (int i = 1; i <= min(n1, n2); ++i)
    {
        if (n1 % i == 0 && n2 % i == 0)
        {
            ++result;
        }
    }
    cout << result << endl;
    return 0;
}