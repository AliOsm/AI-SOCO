
/*
СТРОИМ СТЕНУ РАБОТЯГИ!
█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═█
█═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═█
█═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═█
█═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═█
█═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═█
█═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═█
█═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═█
█═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═╩═╦═█
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█
*/
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
using namespace std;

#define ll long long
#define ld long double
#define null NULL

const int MAXIMAL_ALGO = 2000001;

bool prime[MAXIMAL_ALGO];

int a[1001], cnt[MAXIMAL_ALGO / 2 + 1];


int main() {
	int n;
	scanf("%d", &n);
	memset(prime, 1, sizeof(prime));
	prime[1] = false;
	int i = 2;
	while (i * i <= MAXIMAL_ALGO) {
		if (prime[i]) {
			int j = i * i;
			while (j <= MAXIMAL_ALGO) {
				prime[j] = false;
				j += i;
			}
		}
		++i;
	}
	bool is_prime = false;
	for (int i = 1; i <= n; ++i) {
		scanf("%d", &a[i]);
		cnt[a[i]]++;
		if (prime[a[i] + 1] && a[i] != 1) {
			is_prime = true;
		}
	}
	bool joke = false;
	int fir = 0, sec = 0;
	for (int i = 1; i < n; ++i) {
		for (int j = i + 1; j <= n; ++j) {
			if (prime[a[i] + a[j]]) {
				joke = true;
				fir = a[i];
				sec = a[j];
			}
		}
	}
	int max_len = 1;
	int r = a[1];
	if (joke) {
		max_len = 2;
	}
	if (cnt[1] + is_prime > max_len) {
		max_len = cnt[1] + is_prime;
	}
	cout << max_len << endl;
	if (max_len == 1) {
		cout << r << endl;
		return 0;
	}
	if (max_len == 2 && joke) {
		cout << fir << " " << sec << endl;
		return 0;
	}
	for (int i = 0; i < cnt[1]; ++i) {
		printf("1 ");
	}
	for (int i = 1; i <= n; ++i) {
		if (prime[a[i] + 1] && a[i] != 1) {
			printf("%d", a[i]);
			break;
		}
	}
	printf("\n");
	return 0;
}












