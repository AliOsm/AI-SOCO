         /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
using namespace std;
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
const ll mod=1e9+7;         
const int N=1e6+4;

vector<vector<int>> steps;

int n,k;

string s;

int mx,mn;

void build_steps()
{
	while(1)
	{
		vector<int> v;

		for(int i=0;i<n-1;i++)
		if(s[i]=='R' and s[i+1]=='L')
		{
			v.pb(i+1);

			swap(s[i],s[i+1]); i++;

			mx++;
		}

		if(v.size()==0)
		break;

		mn++;

		steps.pb(v);
	}

	reverse(steps.begin(),steps.end());

	if(k>mx or k<mn)
	{
		pri(-1); 

		exit(0);
	}
}

int main()
{
	scn(n); scn(k);

	cin>>s;

	build_steps();

	while(k)
	{
		vector<int> v=steps.back();

		steps.pop_back();

		int sz=v.size();

		if(mx-sz>=k-1)
		{
			pri(sz);

			mx-=sz; k--;

			for(int it:v)
			printf(" %d",it);

			printf("\n");
		}
		else
		{
			int x=mx-k+1;

			pri(x);

			rep(i,0,x)
			printf(" %d",v[i]);

			printf("\n");

			rep(i,x,sz)
			printf("1 %d\n",v[i]);

			while(1)
			{
				if(steps.size()==0)
				break;

				v=steps.back(); steps.pop_back();

				rep(i,0,v.size())
				printf("1 %d\n",v[i]);
			}

			break;
		}
	}

    return 0;
}