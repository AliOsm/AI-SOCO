#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 1e5+1, P = 20, M = 71, mod = 1e9+7;
int n, dp[M][1<<(P-1)], a[M], x, fac[M];
vector<int> primes;
ll power(ll x, ll y)
{
    if(!y) return 1;
    ll temp = power(x, y/2);
    temp %= mod, temp *= temp, temp %= mod, temp *= ((y&1) ? x : 1), temp %= mod;
    return temp;
}
void operate()
{
    memset(dp, -1, sizeof dp);
    for(int i=2; i<M; i++)
    {
        bool f = 0;
        for(int j=2; j<i; j++)
        f = f | !(i%j);
        if(!f) primes.push_back(i);
    }
    for(int p=2; p<M; p++)
    {
        int mask = 0;
        int tmp = p;
        for(int j=0; j<primes.size(); j++) while(!(p%primes[j])) mask ^= (1<<j), p /= primes[j];
        p = tmp;
        fac[p] = mask;
    }
}
ll solve(int i=1, int mask=0)
{
    if(i == M) return (!mask);
    if(dp[i][mask] != -1) return dp[i][mask];
    if(a[i])
    dp[i][mask] = (((solve(i+1, mask)%mod)*power(2, a[i]-1))%mod)
    +(((solve(i+1, mask^fac[i])%mod)*power(2, a[i]-1))%mod);

    else dp[i][mask] = solve(i+1, mask);

    return dp[i][mask]%mod;
}
int main()
{
    cin >> n;
    
    for(int i=0; i<n; i++) cin >> x, a[x]++;
    operate();
    cout << (solve()-1 + mod)%mod << endl;
}
