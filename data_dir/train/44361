#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <string>
#include <cstring>
// DON'T DIVIDE
// Greedy, Prefix, Sets/Bsearch, Dfs/bfs, DP
// Stack, Bitmask, Dsu 
using namespace std;

int n;
const int MAXN = 200005;
long long a[MAXN], dp[MAXN];
vector<int> adj[MAXN];
long long ans = -1e18, pre = -1e18; 

void dfs(int idx, int par)
{
	dp[idx] = a[idx];
	for(int i = 0; i < adj[idx].size(); i++)
	{
		if(adj[idx][i] != par)
		{
			dfs(adj[idx][i], idx);
			dp[idx] += dp[adj[idx][i]];
		}
	}
}

void d(int idx, int par)
{
	if(pre != -1e18)
		ans = max(ans, dp[idx] + pre);
	for(int i = 0; i < adj[idx].size(); i++)
	{
		if(adj[idx][i] != par)
			d(adj[idx][i], idx);
	}
	pre = max(pre, dp[idx]);
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> n;

	for(int i = 1; i <= n; i++)
		cin >> a[i];

	for(int i = 0; i < n - 1; i++)
	{
		int u, v;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	dfs(1, 1);
	d(1, 1);

	if(ans == -1e18)
		cout << "Impossible\n";
	else
		cout << ans << "\n";

	return 0;
}