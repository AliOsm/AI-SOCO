//~In The Name Of Allah~//
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <iomanip>
#include <math.h>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <string.h>
#include <sstream>
#include <fstream>
#include <functional>
#include <stack>
#include <utility> 
#include <set>
#include <list>
#include <queue>
#include <bitset>
#include <time.h>
using namespace std;

#define all(S) S.begin(), S.end()
#define rall(S) S.rbegin(), S.rend()
#define getdis(xa, ya, xb, yb) hypot(xa-xb, ya-yb)
#define slope(xa, ya, xb, yb) ((yb-ya)/(xb-xa))
#define rep(i, j) for (ll i = 0; i < (ll)j; i++)
#define Rep(i, j, k) for (ll i = (ll)j; i < (ll)k; i++)
#define siz(S) (int)S.size()

const double PI = 2.0 * acos(0.0);
const double EX = 2.7182818284;
const int MOD = 1e9 + 7;
const int oo = 2e9 + 1e8;

typedef unsigned long long ll;

ll gcd(ll x, ll y) { return !y ? x : gcd(y, x%y); }

int n, m, a, b, x, y;
vector<int> adj[500], hope[500];
bool vis[500], fre[500][500];

int bfs(vector<int> g[]) {
    fill(vis, vis + 500, 0);
    queue<pair<int, int>> q;
    q.push(make_pair(1, 0));
    while (!q.empty()) {
        pair<int, int> t = q.front();
        q.pop();
        if (vis[t.first])
            continue;
        if (t.first == n)
            return t.second;
        vis[t.first] = 1;
        rep(i, siz(g[t.first]))
            if (!vis[g[t.first][i]])
                q.push(make_pair(g[t.first][i], t.second + 1));
    }
    return -1;
}

int main() {
    cin >> n >> m;
    rep(i, m) {
        scanf("%d%d", &a, &b);
        fre[a][b] = fre[b][a] = 1;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    Rep(i, 1, n + 1) Rep(j, i + 1, n + 1) if (!fre[i][j]) {
        hope[i].push_back(j);
        hope[j].push_back(i);
    }
    x = bfs(adj);
    y = bfs(hope);
    if (x < 0 || y < 0)
        puts("-1");
    else
        printf("%d\n", max(x, y));
    return 0;
}