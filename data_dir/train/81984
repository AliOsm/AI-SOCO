#include<bits/stdc++.h>
using namespace std;

#define ll long long

#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) memset(ar, val, sizeof(ar))
#define fill0(ar) fill((ar), 0)
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;
typedef vector<int> vi;

#define INF 1000000000000000000

void DFS(ll source, vector<ll> ed[], ll v, bool visited[], ll &sum1, ll &sum2, ll parity, bool &poss, ll parrr[])
{
	if(parity==1)
		sum1++;
	else
		sum2++;
    visited[source] = true;
    parrr[source] = parity;
    rep(i, ed[source].size())
    {
    	ll parr = 1-parity;
        if(!visited[ed[source][i]])
        {
            DFS(ed[source][i], ed, v, visited, sum1, sum2, 1-parity, poss, parrr);
        }
        else
        {
        	if(parrr[ed[source][i]]!=parr)
        		poss = false;
        }
    }
}

ll modexp(ll x, ll y, ll p)
{
    ll res = 1;   
    x = x % p;  
    while (y > 0)
    {
        if (y & 1)    
            res = (res*x) % p;
        y = y>>1;     
        x = (x*x) % p; 
    }
    return res;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll t;
    cin >> t;
    ll mod = 998244353;

    while(t--)
    {
    	ll n,m;
    	cin >> n >> m;

    	vector<ll> ed[n+1];

    	rep(i,m)
    	{
    		ll u,v;
    		cin >> u >> v;

    		ed[u].pb(v);
    		ed[v].pb(u);
    	}

    	ll parrr[n+1];
    	bool visited[n+1];
    	rep(i,n+1)
    	{
    		visited[i] = false;
    	}

    	ll ans = 1;
    	bool poss = true;
    	fr(i,1,n)
    	{
    		ll ans2 = 0;
    		if(!visited[i])
    		{
    			ll sum1 = 0;
    			ll sum2 = 0;

    			DFS(i,ed,n,visited,sum1,sum2,1,poss,parrr);

    			ans2 = (modexp(2,sum1,mod)%mod + modexp(2,sum2,mod)%mod)%mod;
    			ans = ((ans%mod)*(ans2%mod))%mod;
    		}
    	}
    	if(poss)
    		cout << ans << endl;
    	else
    		cout << "0" << endl;
    }
}
