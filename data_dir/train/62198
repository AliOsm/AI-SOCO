

   #include <iostream>
#include <stdio.h>
#include <bits/stdc++.h>
#include <math.h>
#include <string>
#include <sstream>
#define ll long long
#define F first
#define S second
#define pb push_back
#define ld long double
#define pll pair<long long,long long>
#define pld pair<long double,long double>
#define ios     ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
using namespace std;
ll mod=10000000000;
ll gcd (ll a,ll b)
{
    if(b==0)
        return a;
    else
        return gcd(b,a%b);
}
ll fastexp(ll x ,ll n)
{
    ll result =1;
    while(n>0)
    {
        if(n%2==1)
            result*=x;
        x*=x;
        n=n/2;
    }
    return result;
}

ll modularExp(ll x,ll n,ll mod)
{
    ll result=1;
    while(n>0)
    {
        if(n%2==1)
            result=(result*x)%mod;
        x=((x%mod)*(x%mod))%mod;
        n=n/2;
    }
    return (result)%mod;
}
bool isPrime(ll n)
{
    for(ll i=2;i*i<=n;i++)
        if(n%i==0)
            return false;
    return true;
}
bool mycomp(pll &a,pll &b)
{
    if(a.F!=b.F)
        return a.F < b.F;
    else
        return a.S < b.S;
}

bool in(ll x,ll l ,ll r)
{
    if(x>=l && x<=r) 
     return true;
    else 
     return false;
}
int main()
{
    ios;
    ll n,h,l,r;
    cin>>n>>h>>l>>r;
    ll i,j;
    vector<ll> v(n+1);
    for(i=1;i<=n;i++)
        cin>>v[i];
    vector< vector<ll> > dp(n+1,vector<ll> (n+1,INT_MIN));
    dp[0][0]=0;
    ll sum=0;
    for(i=1;i<=n;i++)
    {
        sum+=v[i];
        for(j=0;j<=i;j++)
        {
            dp[i][j]=max(dp[i][j],dp[i-1][j]+in((sum-j)%h,l,r));
            if(j+1<=n)
                dp[i][j+1]=max(dp[i][j+1],dp[i-1][j]+in((sum-j-1)%h,l,r));
        }
    }
    cout<<*max_element(dp[n].begin(),dp[n].end())<<"\n";
}
