/*
	Author: Youssef ElGhareeb
	Facebook Hacker Cup 2017 Round 1 - Fighting the Zombies
*/

#include <iostream>
#include <map>
#include <vector>
#include <assert.h>
#include <string>
#include <stdlib.h>     /* srand, rand */
#include <time.h>       /* time */
#include <algorithm>
#include <stdio.h>
#include <cmath>
#include <cstring>
using namespace std;

#define ll long long

const int MX = 5005;
int n, m;
map<string, int> mps;
vector<int> v1, v2;
int vis1[MX], vis2[MX];

int main () {
    ios_base::sync_with_stdio(false);
    cin>>n>>m;
    int wcnt = 0;
    for (int i=0; i<n; i++) {
        string s;
        cin>>s;
        if (mps.count(s) == 0) mps[s] = wcnt++;
        v1.push_back(mps[s]);
    }
    for (int i=0; i<m; i++) {
        string s;
        cin>>s;
        if (mps.count(s) == 0) mps[s] = wcnt++;
        v2.push_back(mps[s]);
    }
    sort(v1.begin(), v1.end());
    sort(v2.begin(), v2.end());
    vector<int> intersection;
    for (int i=0; i<n; i++) {
        vector<int>::iterator it = lower_bound(v2.begin(), v2.end(), v1[i]);
        if (it != v2.end() && *it == v1[i]) intersection.push_back(v1[i]);
    }
    vector<int> vv1, vv2;
    for (int i=0; i<intersection.size(); i++) {
        vv1.push_back(intersection[i]);
        vv2.push_back(intersection[i]);
    }
    for (int i=0; i<v1.size(); i++) {
        vector<int>::iterator it = lower_bound(intersection.begin(), intersection.end(), v1[i]);
        if (it == intersection.end() || *it != v1[i]) vv1.push_back(v1[i]);
    }
    for (int i=0; i<v2.size(); i++) {
        vector<int>::iterator it = lower_bound(intersection.begin(), intersection.end(), v2[i]);
        if (it == intersection.end() || *it != v2[i]) vv2.push_back(v2[i]);
    }
    int turn = 0;
    int p1 = 0, p2 = 0;
    assert (vv1.size() == n && vv2.size() == m);
    while (p1 < vv1.size() && p2 < vv2.size()) {
        if (turn == 0) {
            while (p1 < vv1.size() && vis1[vv1[p1]] == 1) {
                p1++;
            }
            if (p1 == vv1.size()) {
                cout<<"NO\n";
                return 0;
            }
            vis2[vv1[p1]] = 1;
            p1++;
        }
        else {
            while (p2 < vv2.size() && vis2[vv2[p2]] == 1) {
                p2++;
            }
            if (p2 == vv2.size()) {
                cout<<"YES\n";
                return 0;
            }
            vis1[vv2[p2]] = 1;
            p2++;
        }
        turn = (turn + 1) % 2;
    }
    while (p1 < vv1.size() && vis1[vv1[p1]] == 1) {
        p1++;
    }
    while (p2 < vv2.size() && vis2[vv2[p2]] == 1) {
        p2++;
    }
    if (turn == 0) {
        if (p1 == vv1.size()) cout<<"NO\n";
        else cout<<"YES\n";
    }
    else {
        if (p2 == vv2.size()) cout<<"YES\n";
        else cout<<"NO\n";
    }
    return 0;
}