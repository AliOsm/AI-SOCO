#include <sstream>
#include<iostream>
#include<algorithm>
#include<vector>
#include<set>
#include<ctime>
#include<cmath>
#include<map>
#include<stack>
#include<random>
#include<queue>
#include<list>
using namespace std;
const long long int INF=2000000000000000000;
#define ll long long int
#define ld long double
#define key pair<ld,ld>
#define ii pair<int,int>
#define si set<int>
#define vii vector<pair<int,int> >
#define vi vector<int>
#define vll vector<ll>
#define vb vector<bool>
#define vvi vector<vector<int> >
#define vs vector<string>
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define nu 100001
#define mod 1000000007
#define mul(x,y) ((ll)(x)*(y))%mod
#define tr(c,i) for(auto i = (c).begin(); i != (c).end(); i++)
#define fastio  ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
vector<vector<int>> adj;
map<pair<int,int>,int> weights;
vector<ll> dist;
vector<int> visited;
vector<ll> ans;
vector<ll> a;
vector<ll> subtree_size;
ll MOD(ll a, ll b)
{
    if(a>b)
        return a-b;
    else
        return b-a;
}
ll max3(ll a,ll b, ll c)
{
    return max(c,max(a,b));
}
ll min3(ll a,ll b,ll c)
{
    return min(a,min(b,c));
}
ll power(ll x,ll y )
{
    ll res = 1;
    x = x ;
    while (y > 0)
    {
        if (y & 1)
            res = (res*x);
        y = y>>1;
        x = (x*x);
    }
    return res;
}
ll logg(ll a)
{
    ll x=0;
    while(a>1)
    {
        x++;
        a/=2;
    }
    return x;
}
ll gcd(ll a,ll  b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}
void dfs2(int i)
{
    visited[i]=1;
    for(int j=0;j<adj[i].size();j++)
    {
        if(visited[adj[i][j]]==0)
        {
            dist[adj[i][j]]=dist[i]+(weights[mp(i,adj[i][j])]);
            dfs2(adj[i][j]);
            subtree_size[i]+=subtree_size[adj[i][j]];
        }
    }
    subtree_size[i]++;
}
void dfs(int n)
{
    for(int j=1;j<=n;j++)
    {
        if(visited[j]==0)
        {
            dfs2(j);
        }
    }
}
ll an=0;
void solve2(int i,ll d)
{
    visited[i]=1;
    if(i==1)
    {
        for(int j=0;j<adj[i].size();j++)
        {
            solve2(adj[i][j],weights[mp(i,adj[i][j])]);
        }
    }
    else
    {
        if(d>a[i])
        {
            an=an+subtree_size[i];
            return;
        }
        for(int j=0;j<adj[i].size();j++)
        {
            if(visited[adj[i][j]]==0)
            {
                solve2(adj[i][j],max3(d+weights[mp(i,adj[i][j])],weights[mp(i,adj[i][j])],weights[mp(i,adj[i][j])]));
            }
        }
    }
}
int main()
{
    fastio;
    int n;
    cin>>n;
    visited.resize(n+1,0);
    dist.resize(n+1,0);
    ans.resize(n+1,0);
    a.resize(n+1,0);
    adj.resize(n+1);
    subtree_size.resize(n+1,0);
    for(int i=1;i<=n;i++)
    {
        cin>>a[i];
    }
    for(int i=2;i<=n;i++)
    {
        int x,w;
        cin>>x>>w;
        adj[i].pb(x);
        adj[x].pb(i);
        weights.insert(mp(mp(x,i),w));
        weights.insert(mp(mp(i,x),w));
    }
    dfs(n);
    for(int i=0;i<=n;i++)
    {
        visited[i]=0;
    }
    solve2(1,0);
    cout<<an;
}
