//Author - Rahil Malhotra
#include <bits/stdc++.h>
using namespace std;
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define int long long
#define endl "\n"

string s;
int cache[1<<21];
int store[1<<21];
int dp(int bit)
{
    if(! __builtin_popcountll(bit))
        return 0;
    if(cache[bit]!=-1)
        return cache[bit];
    cache[bit]=store[bit];
    for(int j=0;j<21;j++)
        if(bit&(1<<j))
        {
            int mask=(1<<21)-(1<<j)-1;
            cache[bit]=max(cache[bit],dp(bit&mask));
        }
    return cache[bit];
}
int32_t main()
{
    IOS; 
    cin>>s;
    int n=s.length();
    for(int i=0;i<n;i++)
    {
        int bit=0;
        int len=0;
        for(int j=i;j<n;j++)
        {
            if((1<<(s[j]-'a'))&bit)
                break;
            len++;
            bit|=(1<<(s[j]-'a'));
            store[bit]=max(store[bit],len);
        }
    }
    memset(cache,-1,sizeof(cache));
    dp((1<<21)-1);
    int maxi=0;
    //max of sum from 2 masks with no bits common
    for(int i=0;i<1<<21;i++)
    {
        int k=0;
        for(int j=0;j<21;j++)
            if(!((1<<j)&i))
                k|=(1<<j);
        maxi=max(maxi,cache[i]+cache[k]);
    }
    cout<<maxi<<endl;
}   