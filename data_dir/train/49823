#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <cstdio>
#include <cassert>
#include <set>

using namespace std;

#define all(a) (a).begin(), (a).end()

const int MAX_N = (int)1e6 + 22 + 8;
const int MOD = 998244353;

long long dpF[2][505][505];
long long dpS[505][505];

long long binPow(long long a, long long b) {
	if (!b) {
		return 1;
	}

	long long ans = binPow(a, b / 2);
	ans = ans * ans % MOD;
	if (b % 2) {
		ans = ans * a % MOD;
	}

	return ans;
}

int main() {
	// freopen("input.txt", "r", stdin);
	// freopen("out.txt", "r", stdin);

	int n = 500, m = 500 * 500;
	cin >> n >> m;

	dpF[0][0][0] = 1;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			for (int mx = 0; mx < n; ++mx) {
				(dpF[1][1][(mx == 0 ? 1 : mx)] += dpF[0][j][mx]);
				
				if (mx == j)
				     (dpF[1][j + 1][j + 1] += dpF[0][j][mx]);
			     else
				     (dpF[1][j + 1][mx] += dpF[0][j][mx]);
			}
		}

		for (int j = 0; j <= n; ++j) {
			for (int mx = 0; mx <= n; ++mx) {
				swap(dpF[0][j][mx], dpF[1][j][mx]);
				
				if (dpF[0][j][mx] >= MOD) {
				     dpF[0][j][mx] %= MOD;
				}
				
				dpF[1][j][mx] = 0;
			}
		}
	}
	
	long long ans = 0;
	for (int len = 1; len <= min(n, m - 1); ++len) {
		for (int i = 0; i <= n; ++i) {
			for (int j = 0; j <= n; ++j) {
				dpS[i][j] = 0;
			}
		}

		dpS[0][0] = 1;
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j <= i; ++j) {
				if ((j + 1) * 1LL * len < m) {
					(dpS[i + 1][j + 1] += dpS[i][j]) %= MOD;
				}
				(dpS[i + 1][1] += dpS[i][j]) %= MOD;
			}
		}

		long long sum = 0;
		for (int j = 0; j <= n; ++j) {
			(sum += dpF[0][j][len]) %= MOD;
		}

		for (int j = 1; j <= n; ++j) {
			// cout << dpS[n][j] << " ";
			(ans += dpS[n][j] * sum) %= MOD;
		}
		// cout << "\n";
	}

	cout << ans * binPow(2, MOD - 2) % MOD << "\n";
}


// a = sqrt((x1 - x4) ^ 2 + (y1 - y4) ^ 2)


// 2 * (a + b + c + d) ^ 2
// --------------------------------
// (x1 - x4) * (y1 - y4) + (x2 - x1) * (y2 - y1) + (x3 - x2) * (y3 - y2) + (x4 - x3) * (y4 - y3)