#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, const pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

bool can_win(int x0, int x1, int moves, int req_odd) {
	if (moves == 0) return req_odd == 0;	
	if (x0 >= moves + 1 && x1 >= moves + 1) return false;
	if (x1 <= moves) {
		return req_odd == x1 % 2;
	} else {
		int rem = 2 * moves - x0;
		return req_odd == rem % 2;
	}
}

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(int, k);
	
	int moves = n - k;
	vector<int> a = readVector<int>(n);
	for (auto &x : a) x %= 2;
	int x0 = 0;
	int x1 = 0;
	for (auto x : a) if (x) x1++; else x0++;
	
	int totalCnt = accumulate(all(a), 0) % 2;
	
	bool wins;
	if (moves % 2 == 0) {
		wins = can_win(x0, x1, moves / 2, totalCnt ^ 1);
	} else {
		wins = false;
		if (x0) wins = wins || !can_win(x0 - 1, x1, moves / 2, totalCnt);
		if (x1) wins = wins || !can_win(x0, x1 - 1, moves / 2, totalCnt ^ 1);
	}
	
	cout << (wins ? "Stannis" : "Daenerys");
}