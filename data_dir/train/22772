#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
#include <random>
#include <cassert>
#include <sstream>
using namespace std;
#define F first
#define S second
#define pb push_back
#define MP make_pair
#define ALL(x) begin(x), end(x)
#define SZ(x) (int)(x).size()
#define rep(i, n) for(int i = 0; i < n; ++i)
#define rep1(i, a, b) for(int i = a; i < b; ++i)
#define per1(i, a, b) for(int i = a; i >= b; --i)
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
#define ln(i, n) " \n"[i == n]
typedef long long LL;
typedef long double LDB;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
//////////////////////
const long double eps = 1e-13;
const long double PI = acos(-1);
const int INF = (int)1e9;
const LL  INFF = (LL)1e18;
const int mod = 998244353;
const int MXN = (int)1e6 + 7;
inline LL add(LL v1, LL v2){
	v1 += v2;
	if (v1 >= mod) v1 -= mod;
	if (v1 < 0) v1 += mod;
	return v1;
};
int typ[MXN];
int xx[MXN], yy[MXN];
struct Seg{
	int ll[MXN<<2], rr[MXN<<2];
	int v[MXN<<2];
#define ls p<<1
#define rs p<<1|1
	void bd(int l, int r, int p = 1){
		ll[p] = l, rr[p] = r;
		if (l == r) return ;
		int mid = (l + r) >> 1;
		bd(l, mid, ls);
		bd(mid+1, r, rs);
		return ;
	}
	int qy(int l, int r, int p = 1){
		if (l > rr[p] || r < ll[p]) return 0;
		if (l <= ll[p] && rr[p] <= r) return v[p];
		return max( qy(l, r, ls), qy(l, r, rs) );
	}
	void md(int pp, int val, int p = 1){
		if (ll[p] == rr[p]) {
			v[p] = max(val, v[p]);
			return ;
		}
		int mid = (ll[p] + rr[p]) >> 1;
		if (pp <= mid) md(pp, val, ls);
		else md(pp, val, rs);
		v[p] = max(v[ls], v[rs]);
	}
}seg;
int main(){
	int n; scanf("%d", &n);
	vector<int>buf;
	for (int i = 1; i <= n; i++) {
		int x, y;
		char com[3]; scanf("%s %d %d", com, &x, &y);
		buf.pb(x);
		buf.pb(y);
		xx[i] = x, yy[i] = y;
		if (com[0] == '?') typ[i] = 2;
		else typ[i] = 1;
	}
	sort( ALL(buf) );
	buf.resize( unique(ALL(buf)) - buf.begin() );
	seg.bd(0, SZ(buf)-1);
	for (int i = 1; i <= n; i++) {
		int x = xx[i], y = yy[i];
		x = lower_bound( ALL(buf) , x ) - buf.begin();
		y = lower_bound( ALL(buf) , y ) - buf.begin();
		if (x > y) swap(x, y);
		if (typ[i] == 1) {
			seg.md(y, x);
		} else {
			int v = seg.qy(y+1, SZ(buf)-1);
			if (v) { puts("NO"); continue; }
			v = seg.qy(0, y);
			if (v > x) { puts("NO"); continue; } 
			puts("YES");
		}
	}
	return 0;
}
