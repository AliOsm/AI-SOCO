/* 
chirag11032000
Chirag Thakur
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

template < typename T > using ordered_set = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using min_priority_queue = priority_queue < T, vector < T >, greater < T > >;

typedef long long ll;
typedef double db;
typedef pair < ll, ll > pll;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
	cerr << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << " | ";
	__f(comma + 1, args...);
}
#else
#define trace(...)
#endif

#define pb push_back
#define mp make_pair
#define mt make_tuple
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const db PI = acos(-1);
const ll MOD = 1e9 + 7, INF = LLONG_MAX;
const ll N = 1e3 + 10;

ll m;
bool done;
vector < ll > weights;
ll perm[N];

void test_case();
void dfs(ll i, ll rem, ll status, ll s1, ll s2);

int main() {
	fast_io();
	test_case();
	cerr << "Time taken: " << int((clock() * 1000.) / CLOCKS_PER_SEC) << "ms\n";
	return 0;
}

void test_case() {
	string s;
	cin >> s;
	for (ll i = 0; i < s.size(); ++i) {
		if (s[i] == '1') {
			weights.pb(i + 1);
		}
	}
	cin >> m;
	for (auto &i : weights) {
		dfs(i, m, 0, 0, 0);
		if (done) {
			cout << "YES\n";
			for (ll i = 1; i <= m; ++i) {
				cout << perm[i] << " ";
			}
			cout << "\n";
			return;
		}
	}
	cout << "NO\n";
}

void dfs(ll i, ll rem, ll status, ll s1, ll s2) {
	perm[m - rem + 1] = i;
	if (status) {
		s2 += i;
	} else {
		s1 += i;
	}
	--rem;
	status ^= 1;
	if (rem == 0) {
		done = true;
	} else {
		ll ind = upper_bound(weights.begin(), weights.end(), abs(s1 - s2)) - weights.begin();
		if (ind == weights.size()) {
			return;
		} else {
			for (ll j = ind; j < weights.size(); ++j) {
				if (!done and weights[j] != i) {
					dfs(weights[j], rem, status, s1, s2);
				}
			}
		}
	}
}