#include <bits/stdc++.h>

using namespace std;

int n;
int m;
char stra[100][100];

int p[10000];

map<int, vector<pair<int, int>>> mapa;

inline int get(int i, int j) {
	return i * 100 + j;
}

int find(int x) {
	return p[x] == x ? x : p[x] = find(p[x]);
}

void fail() {
	puts("No");
	exit(0);
}
void succeed() {
	puts("Yes");
	exit(0);
}

int main() {
	scanf("%d%d", &n, &m);

	for (int i = 0; i < n; i++) {
		scanf("%s", stra[i]);
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			p[get(i, j)] = get(i, j);
		}
	}
	for (int i = 0; i < n; i++) {
		int ii = -1;
		int jj = -1;
		int olda;
		for (int j = 0; j < m; j++) {
			if (stra[i][j] == '#') {
				if (ii == -1) {
					ii = i;
					jj = j;
					olda = get(ii, jj);
				} else {
					int newa = get(i, j);
					olda = find(olda);
					newa = find(newa);
					if (newa != olda)
						p[newa] = olda;
				}
			}
		}
	}

	for (int j = 0; j < m; j++) {
		int ii = -1;
		int jj = -1;
		int olda;
		for (int i = 0; i < n; i++) {
			if (stra[i][j] == '#') {
				if (ii == -1) {
					ii = i;
					jj = j;
					olda = get(ii, jj);
				} else {
					int newa = get(i, j);
					olda = find(olda);
					newa = find(newa);
					if (newa != olda)
						p[newa] = olda;
				}
			}
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			int nowa = get(i, j);
			mapa[find(nowa)].push_back( { i, j });
		}
	}

	for (auto & au : mapa) {
		set<int> si;
		set<int> sj;
		for (pair<int, int> & au2 : au.second) {
			si.insert(au2.first);
			sj.insert(au2.second);
		}
		if (si.size() * sj.size() == au.second.size()) {
		} else {
			fail();
		}
	}

	succeed();

	return 0;
}

//from a