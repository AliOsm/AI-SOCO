#include <bits/stdc++.h>

using namespace std;


vector<int> W;
vector<int> B;

vector<int> ranks;
vector<int> roots;

int getRoot(int pos) {
	if(pos != roots[pos]) {
		roots[pos] = getRoot(roots[pos]);
	}
	return roots[pos];
}


void setUnion(int p1, int p2) {
	int r1 = getRoot(p1);
	int r2 = getRoot(p2);
	if(r1 == r2) {
		return;
	}
	if(ranks[r1] == ranks[r2]) {
		roots[r2] = r1;
		ranks[r1] ++;
	}
	else if(ranks[r1] > ranks[r2]) {
		roots[r2] = r1;
	}
	else {
		roots[r1] = r2;
	}
	return;
}


int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int n, m, w;
	cin >> n >> m >> w;
	ranks = vector<int>(n, 0);
	for(int i = 0; i < n; i++) {
		roots.push_back(i);
		int ele; cin >> ele;
		W.push_back(ele);
	}
	for(int i = 0; i < n; i++) {
		int ele; cin >> ele;
		B.push_back(ele);
	}
	for(int i = 0; i < m; i++) {
		int p1, p2; cin >> p1 >> p2; p1 --; p2 --;
		setUnion(p1, p2);
	}
	unordered_map<int, vector<int>> links;
	for(int i = 0; i < n; i++) {
		int r = getRoot(i);
		links[r].push_back(i);
	}

	vector<int> final = vector<int>(w + 1, 0);
	for(auto ele : links) {
		vector<int> temp = vector<int>(w + 1, 0);
		int totalW = 0;
		int totalB = 0;
		for(auto index : ele.second) {

			totalW += W[index];
			totalB += B[index];
			for(int f = 0; f < w + 1; f++) {
				if(f + W[index] > w) continue;
				temp[f + W[index]] = max(temp[f + W[index]], final[f] + B[index]);
			}
		}
		for(int f = 0; f < w + 1; f++) {
			if(totalW + f > w) break;
			temp[totalW + f] = max(temp[totalW + f], final[f] + totalB);
		}

		for(int i = 0; i < w + 1; i++) {
			final[i] = max(final[i], temp[i]);
		}
	}
	int ans = 0;
	for(auto ele : final) {
		ans = max(ans, ele);
	}
	cout << ans;
	return 0;
}

/*

10 5 100
70 67 8 64 28 82 18 61 82 7
596434 595982 237932 275698 361351 850374 936914 877996 789231 331012
1 7
2 4
3 6
5 7
1 5




 */
