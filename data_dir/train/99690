#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl

const int maxn = 1e6 + 5;


int n;
vector<int> g[maxn];

map<pair<int,int>,int> ind;
pair<int,int> edges[maxn];


int dist[maxn];

void dfs(int at, int p, int d=0) {
  dist[at]=d;
  for (int to: g[at]) {
    if (to == p) continue;
    dfs(to,at,d+1);
  }
}

int ans[maxn];

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);

  memset(ans,-1,sizeof ans);

  cin>>n;
  for (int i=0; i<n-1; i++) {
    int u,v; cin>>u>>v;
    g[u].push_back(v);
    g[v].push_back(u);
    ind[{u,v}]=i;
    ind[{v,u}]=i;
    edges[i]={u,v};
  }

  vector<int> leaves;
  for (int i=1; i<=n; i++) {
    if ((int)g[i].size() == 1) {
      leaves.push_back(i);
    }
  }

  if ((int)leaves.size() < 3) {
    for (int i=0; i<n-1; i++) {
      cout<<i<<"\n";
    }
    return 0;
  }

  int x=leaves.front();
  dfs(x,-1);
  int farthest=-1;
  for (int i=1; i<=n; i++) {
    if (farthest==-1 || dist[farthest]<dist[i]) {
      farthest=i;
    }
  }
  
  memset(dist,0,sizeof dist);
  x = farthest;
  farthest = -1;
  dfs(x,-1);
  for (int i=1; i<=n; i++) {
    if (farthest==-1 || dist[farthest]<dist[i]) {
      farthest=i;
    }
  }

  //cout<<x<<" "<<farthest<<endl;

  int label=2;
  for (int i: leaves) {
    int o = g[i].front();
    if (i == x) {
      ans[ind[{i,o}]]=0;
    } else if (i == farthest) {
      ans[ind[{i,o}]]=1;
    } else {
      ans[ind[{i,o}]]=label++;
    }
  }

  for (int i=0; i<n-1; i++) {
    if (ans[i] == -1) ans[i] = label++;
  }


  for (int i=0; i<n-1; i++) {
    assert(ans[i]!=-1);
    cout<<ans[i]<<"\n";
  }
  
  
  

  return 0;
}
// don't forget to read in the input :^)
