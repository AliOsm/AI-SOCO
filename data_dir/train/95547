#include <bits/stdc++.h>

#define fore(i, l, r) for(int i = int(l); i < int(r); ++i)
#define forn(i, n) fore(i, 0, n)
#define nfor(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define for1(i, n) for(int i = 1; i < int(n); ++i)

#define mp make_pair
#define pb push_back
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define x first
#define y second

#define correct(x, y, xmax, ymax) ((x) >= 0 && (x) < (xmax) && (y) >= 0 && (y) < (ymax))
#define max(a, b) ((a > b)? a : b)
#define min(a, b) ((a < b)? a : b)
#define abs(a) ((a < 0) ? -a : a)
#define sqr(a) (a * a)

using namespace std;
    
template<class T> T gcd(T a, T b) { while(a > 0){ b %= a; swap(a, b);} return b; }
template<class T> T lcm(T a, T b) { return a / gcd (a, b) * b; }
template<class T> T sign(T a) { return a > 0 ? 1 : (a < 0 ? -1 : 0); }

template<class A, class B> ostream& operator <<(ostream &out, const pair<A, B> &p) {
    return out << "(" << p.x << ", " << p.y << ")";
};

template<class A> ostream& operator <<(ostream &out, const vector<A> &v) {
    out << "[";
    forn(i, sz(v)) {
        if(i)
            out << ", ";
        out << v[i];
    }
    return out << "]";
}

mt19937 myRand(time(NULL)); // [0, 2^32)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
typedef vector <int> vi;
typedef vector <vi> vvi;

const int dx[] = {-1, 0, 1,  0};
const int dy[] = { 0, 1, 0, -1};
const int dxK[] = {-1, -1, 0, 1, 1,  1,  0, -1};
const int dyK[] = { 0,  1, 1, 1, 0, -1, -1, -1};
const int dxKn[] = {-2, -1, 1, 2,  2,  1, -1, -2};
const int dyKn[] = { 1,  2, 2, 1, -1, -2, -2, -1};

const int INF = int(1e9) + 100;
const li INF64 = li(1e18) + 100;
const ld EPS = 1e-9;
const ld PI = acosl(-1.0);
const int N = int(2e5) + 9;

int q;
unordered_map<int, int> dsu;
unordered_map<int, int> d;
unordered_map<int, int> rnk;

int get(int a){
	if(dsu[a] == a) return a;
	int ds = get(dsu[a]);
	d[a] ^= d[dsu[a]];
	dsu[a] = ds;
	return ds;
}

int getD(int a){
	return d[a];
}

void merge(int a, int b, int x){
	int A = get(a);
	int B = get(b);
	if(A == B) return;
	int da = getD(a);
	int db = getD(b);
	
	if(rnk[A] < rnk[B]){
	//if(false){
		swap(A, B);
		swap(da, db);
		swap(a, b);
	}
	
	dsu[B] = A;
	rnk[A] += rnk[B];
	d[B] ^= x ^ da ^ db;
}

void init(int x){
	if(dsu.count(x) == 0){
		dsu[x] = x;
		rnk[x] = 1;
		d[x] = 0;		
	}
}

inline bool read() {
    if(!(cin >> q))
    	return false;
    return true;
}

inline void solve() {
	int lst = 0;
	forn(_, q){
		int t, l, r, x;
		cin >> t >> l >> r;
		if(t == 1){
			cin >> x;
			l ^= lst, r ^= lst, x ^= lst;
			if(l > r) swap(l, r);
			++r;
			init(l), init(r);
			merge(l, r, x);
		}
		else{
			l ^= lst, r ^= lst;
			if(l > r) swap(l, r);
			++r;
			init(l), init(r);
			if(get(l) == get(r)){
				int res = getD(l) ^ getD(r);
				cout << res << endl;
				lst = res;
			}			
			else{
				cout << -1 << endl;
				lst = 1;
			}
		}
	}
}

int main() {
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    int tt = clock();
#endif
    cout << fixed << setprecision(15);
    cerr << fixed << setprecision(15);

	ios_base::sync_with_stdio(false);
    cin.tie(NULL);    
    
    int tc = 1;
	//cin >> tc;
    while(tc--) {
    	read();
        solve();

#ifdef _DEBUG
        cerr << "TIME = " << clock() - tt << endl;
        tt = clock();
#endif
    }

    return 0;
}