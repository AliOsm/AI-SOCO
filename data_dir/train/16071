#pragma comment (linker, "/STACK:256000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>
//#include <random>
 
using namespace std;
 
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<pii, pii> piiii;
typedef pair<int64, int> pli;
typedef pair<int, char> pic; 

#define pb push_back
#define sq(x) ((x)*(x))
#define cube(x) (((x)*(x))*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define bit(mask, b) ((mask >> b) & 1)
#define biton(mask, bit) (mask | (((uint64)(1)) << bit))
#define bitoff(mask, bit) (mask & (~(((uint64)(1)) << bit)))
#define bitputon(mask, bit) (mask |= (((uint64)(1)) << bit))
#define bitputoff(mask, bit) (mask &= (~(((uint64)(1)) << bit)))
#define FAIL() (*((int*)(0)))++
#define INF ((int)(1e9) + 1337)
#define EPS (1e-13)
#define y1 yy1
#define y0 yy0
#define j0 jj0

const long double PI = acosl((long double)-1.0);
const int64 LINF = ((1ull << 63) - 1ull);
const int MOD = 1000000007;

const int MAXN = 300010;

int n, m;
vector <vector <int> > g;
int cnt[MAXN];
int p[MAXN];
int c[MAXN];
int v[MAXN];

void init()
{
	scanf ("%d%d", &n, &m);
	g.resize(n + 1);
	for (int i = 2; i <= n; i++)
	{
		scanf ("%d", &p[i]);
		g[p[i]].push_back(i);
	}
	for (int i = 1; i <= m; i++)
	{
		scanf ("%d", &v[i]);
	}
}

bool cmp(int v1, int v2)
{
	return cnt[v1] > cnt[v2];
}

void dfs(int v)
{
	cnt[v] = 1;
	if (!g[v].empty())
	{
		for (int i = 0; i < g[v].size(); i++)
		{
			dfs(g[v][i]);
			cnt[v] += cnt[g[v][i]];
		}
		sort (g[v].begin(), g[v].end(), cmp);
		c[v] = c[g[v][0]];
		while (cnt[c[v]] <= cnt[v] / 2)
		{
			c[v] = p[c[v]];
		}
	}
	else
	{
		c[v] = v;
	}
	//fprintf(stderr, "out %d\n", v);
}

void solve()
{
	init();
	dfs(1);
	for (int i = 1; i <= m; i++)
	{
		printf("%d\n", c[v[i]]);
	}
}

void precalc()
{
	
}

int main()
{
    //ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
    srand(25);

	precalc();
	int tests = 1;
	
	//scanf ("%d", &tests);
	for (int i = 1; i <= tests; i++)
	{
		solve();
	}
	
    return 0;
}