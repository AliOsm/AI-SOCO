#include <algorithm> 
#include <iostream> 
#include <valarray> 
#include <iomanip> 
#include <fstream> 
#include <sstream> 
#include <cstdlib> 
#include <cstring> 
#include <cassert> 
#include <numeric> 
#include <complex> 
#include <cstdio> 
#include <string> 
#include <vector> 
#include <bitset> 
#include <ctime> 
#include <cmath> 
#include <queue> 
#include <stack> 
#include <deque> 
#include <map> 
#include <set> 
#include <ext/algorithm>
#include <ext/rope>

using namespace __gnu_cxx;
using namespace std; 

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i) 
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i) 
#define error(x) cout << #x << " = " << (x) << endl; 
#define all(n) (n).begin(), (n).end() 
#define Size(n) ((int)(n).size()) 
#define mk make_pair 
#define pb push_back 
#define F first 
#define S second 

int _;
#define scanf _ = scanf

typedef long long ll; 
typedef pair<int, int> pii; 
typedef pair<ll, ll> pll; 
typedef complex<double> point; 

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; } 
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; } 
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

const int MAXN = 1024;
typedef basic_string<int> order;

bool dp[MAXN];
int n, q[MAXN], pos;
vector<int> len;

int main() {
	cin >> n >> pos; pos--;
	FOR(i, 0, n) cin >> q[i], q[i]--;
	int add = -1;
	FOR(i, 0, n) if (q[i] == -1) {
		order tmp;
		tmp += i;
		while (1) {
			int nx = -1;
			FOR(j, 0, n) if (q[j] == tmp[Size(tmp)-1]) {
				nx = j;
				break;
			}
			if (nx == -1) break;
			tmp += nx;
		}
		if (tmp.find(pos) != tmp.npos)
			add = tmp.find(pos)+1;
		else
			len.pb(Size(tmp));
	}
	dp[0] = true;
	FOR(cur, 0, Size(len)) {
		int amt = len[cur];
		for (int i = MAXN-1; i >= amt; i--) dp[i] |= dp[i-amt];
	}
	FOR(i, 0, MAXN) if (dp[i]) cout << i+add << endl;
	return 0;
}

