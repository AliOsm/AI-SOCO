#include <bits/stdc++.h>
#pragma GCC optimize("O3")

using namespace std;

typedef long long ll;

#define f first
#define s second
#define pb push_back

ll n, v[500002], st[500002], dr[500002], dp1[500002], dp2[500002];
int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(0); cout.tie(0);
  cin >> n;
  for (ll i = 1; i <= n; i++) {
    cin >> v[i];
  }
  stack<ll>s;
  s.push(0);
  for (ll i = 1; i <= n; i++) {
    while (!s.empty() && v[s.top()] >= v[i])
      s.pop();
    st[i] = s.top();
    s.push(i);
  }
  while (!s.empty())
    s.pop();
  s.push(n + 1);
  for (ll i = n; i >= 1; i--) {
    while (!s.empty() && v[s.top()] >= v[i])
      s.pop();
    dr[i] = s.top();
    s.push(i);
  }
  for (ll i = 1; i <= n; i++) {
    ll aux = v[i] * (i - st[i]) + dp1[st[i]];
    dp1[i] = aux;
  }
  ll ans = 0, poz = 0;
  for (ll i = n; i >= 1; i--) {
    ll aux = v[i] * (dr[i] - i) + dp2[dr[i]];
    dp2[i] = aux;
    if (dp1[i] + dp2[i] - v[i] > ans) {
      ans = dp1[i] + dp2[i] - v[i];
      poz = i;
    }
  }
  vector<ll>sol;
  ll i = poz;
  while (i > 0) {
    ll val = v[i];
    for (ll j = i; j > st[i]; j--)
      sol.push_back(val);
    i = st[i];
  }
  reverse(sol.begin(), sol.end());
  for (auto it : sol)
    cout << it << " ";
  sol.clear();
  i = poz;
  while (i <= n) {
    ll val = v[i];
    for (ll j = i; j < dr[i]; j++)
      sol.push_back(val);
    i = dr[i];
  }
  for (ll i = 1; i < sol.size(); i++)
    cout << sol[i] << " ";
  return 0;
}
