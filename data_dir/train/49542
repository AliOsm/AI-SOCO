#include <string>
#include <stdio.h>
#include <algorithm>
#include <list>
#include <map>

using namespace std;

const int N = 300228, P = 3000228;


int h = 0, i, n, m, time, x, type;



struct tree
{
    int sum;
    tree *l, *r;
    tree()
    {
        l = r = NULL;
        sum = 0;
    }

    int get(int ll, int rr, int l, int r)
    {
        if(r < ll || rr < l)
            return 0;
        if(ll <= l && r <= rr)
            return sum;
        int c = (l + r) / 2;
        int ans = 0;
        if(this->l != NULL)
            ans += this->l->get(ll, rr, l, c);
        if(this->r != NULL)
            ans += this->r->get(ll, rr, c + 1, r);
        return ans;
    }
    void modi(int l, int r, int i, int x)
    {
        sum += x;
        if(l == r)
            return;
        int c = (l + r) / 2;
        if(i <= c)
        {
            if(this->l == NULL)
                this->l = new tree();
            this->l->modi(l, c, i, x);
        }
        else
        {
            if(this->r == NULL)
                this->r = new tree();
            this->r->modi(c + 1, r, i, x);
        }
    }
};
//typedef ptr (tree*);

map<int, tree*> ans;


int main()
{
    scanf("%d", &n);
    for(i = 0; i < n; i++)
    {
        scanf("%d", &type);
        if(type == 1)
        {
            scanf("%d%d", &time, &x);
            if(ans.find(x) == ans.end())
                ans[x] = new tree;
            ans[x]->modi(1, (int)1e9, time, +1);
        }
        else if(type == 2)
        {
            scanf("%d%d", &time, &x);
            if(ans.find(x) == ans.end())
                ans[x] = new tree;
            ans[x]->modi(1, (int)1e9, time, -1);
        }
        else
        {
            scanf("%d%d", &time, &x);
            if(ans.find(x) == ans.end())
                puts("0");
            else
                printf("%d\n", ans[x]->get(1, time, 1, (int)1e9));
        }
    }
    return 0;
}
