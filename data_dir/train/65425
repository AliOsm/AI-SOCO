#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <queue>
#include <algorithm>
#include <cmath>
#include <functional>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
const ll MOD = 1e9 + 7;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v; queue<int> q; deque<int> dq;

int tree[21][262144];
int szz = 1, depth;

void init(int dep, int i, int zmrl) {
	if (zmrl == 1) return;
	zmrl /= 2;
	init(dep + 1, i, zmrl), init(dep + 1, i + zmrl, zmrl);

	int a = 0, b = 0;
	while (a + b < zmrl * 2) {
		if (a >= zmrl) {
			tree[dep][i + zmrl + b] = tree[dep + 1][i + zmrl + b];
			b++;
		}
		else if (b >= zmrl) {
			tree[dep][i + zmrl + a] = tree[dep + 1][i + a];
			a++;
		}
		else {
			if (tree[dep + 1][i + a] < tree[dep + 1][i + zmrl + b]) {
				tree[dep][i + a + b] = tree[dep + 1][i + a];
				a++;
			}
			else {
				tree[dep][i + a + b] = tree[dep + 1][i + zmrl + b];
				b++;
			}
		}
	}
}

int find(int dep, int val, int a, int b, int ll, int rr) {
	if (b < ll || a > rr) return 0;
	if (rr <= b && ll >= a) {
		int l = ll, r = rr, mid;
		while (l <= r) {
			mid = (l + r) / 2;
			if (tree[dep][mid] > val) r = mid - 1;
			else l = mid + 1;
		}
		return rr - l + 1;
	}
	return find(dep + 1, val, a, b, ll, (ll + rr) / 2) + find(dep + 1, val, a, b, (ll + rr) / 2 + 1, rr);
}

int main() {
	int n;
	ll sum = 0;
	scanf("%d", &n);

	while (szz < n) szz *= 2;
	depth = ceil(log2(n));

	for (int i = 0; i < n; i++)
		scanf("%d", &tree[depth][i]);
	init(0, 0, szz);

	for (int i = 0; i < n; i++) {
		if (tree[depth][i] <= i + 1) continue;
		sum += find(0, i, i + 1, min(n, tree[depth][i]) - 1, 0, szz - 1);
	}
	
	printf("%lld", sum);
}