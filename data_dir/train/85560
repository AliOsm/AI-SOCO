#include <bits/stdc++.h>

using namespace std;

string s;
set<string> mp;

set<string> S ;

const int MAX = 10001;

int n,m,e;
int vid;
int vis[MAX];
int match[MAX];
vector<vector<int> > g;

bool findPath(int u){
	vis[u] = vid;
	for(int i=0;i<(int)g[u].size();++i){
		int v=g[u][i];
		if(match[v]==-1 || (vis[match[v]] != vid && findPath(match[v]))){
			match[v] = u;
			return true;
		}
	}
	return false;
}

int maxMatching(){
	memset(match, -1, sizeof(match));
	int res = 0;
	for(int i=0;i<n;++i){
		++vid;
		if(findPath(i)) ++res;
	}
	return res;
}

void treat1(string s){
    string ret ;
    for(int i = 1 ; i<s.size() ; i++){
        if(s[i]=='h' && s[i-1]=='k'){
            s[i-1]='h';
//            cout << s <<endl;
            s= s.substr(0,i)+s.substr(i+1,s.size()-i-1);
            return treat1(s);
        }
    }
    for(int i = 0 ; i< s.size() ;i++){
        if(s[i]=='u'){

            treat1(s.substr(0,i)+"oo"+s.substr(i+1,s.size()-i-1));
            return ;
        }
    }
//            cout << s <<endl;

    S.insert(s);
}

int main()
{
    int n   ;
    cin >>n ;
    for(int i = 0 ; i<n ; i++){
        cin >>s;
        S.clear();
        treat1(s);
        if(S.size()==1){
           mp.insert(*S.begin());
        }
//        cout << s.size() <<endl;
//        for(auto a : S) cout << a <<endl;
//        mp.insert(a);
    }
    cout << mp.size();
    return 0;
}
