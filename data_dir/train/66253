/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
using namespace std;

#define int long long
#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

const int N = 1e6+5;
const int LOGN = 20;
int p[N][LOGN+1], height[N];


class FNewYearTree {
public:
    int n, q;
    int lca(int u, int v){
        if(height[u] > height[v]) swap(u, v);
        for(int i = LOGN; i>=0; --i){
            if(p[v][i] and height[p[v][i]] >= height[u]) v = p[v][i];
        }
        if(u == v) return u;
        for(int i = LOGN; i>=0; --i){
            if(p[u][i] != p[v][i]){
                u = p[u][i];
                v = p[v][i];
            }
        }
        return p[u][0];
    }
    int dist(int u, int v){
        return height[u] + height[v] - 2*height[lca(u, v)];
    }
	void solve(std::istream& in, std::ostream& out) {
        n = 4;
        rep(i, 2, 4) height[i] = 1, p[i][0] = 1;
        in >> q;
        int x = 2, y = 4, res = 2;
        while(q--){
            int v; in >> v;
            height[n+1] = height[n+2] = 1 + height[v];
            p[n+1][0] = p[n+2][0] = v;
            for(int i = 1; i<=LOGN; ++i){
                p[n+1][i] = p[p[n+1][i-1]][i-1];
                p[n+2][i] = p[p[n+2][i-1]][i-1];
            }
            int d1 = dist(n+1, x);
            int d2 = dist(n+2, y);
            if(d1 > res){
                res = d1;
                y = n+1;
            }
            if(d2 > res){
                res = d2;
                x = n+2;
            }
            n += 2;
            out << res << '\n';
        }
	}
};


int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	FNewYearTree solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
