#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
typedef long long ll;
const int oo = 1e9;

const int N = 400000;
const int LOGN = 20;
const int R = 0;
const int G = 1;
const int B = 2;
int n;
vector<int> c[3];
vector<pii > p;

ll addBefore(int color) {
	if(c[color].size() && c[color][0] < c[G][0])
		return c[G][0]-c[color][0];
	return 0;
}
ll addAfter(int color) {
	if(c[color].size() && c[color].back() > c[G].back())
		return c[color].back()-c[G].back();
	return 0;
}
ll best(vector<int>&v,ll l , ll r){
	if(!v.size())return 0;
	ll ans = min(r-v[0],v.back()-l);
	for (int i = 0; i + 1 < v.size(); ++i){
		ans = min(ans,v[i]-l + r-v[i+1]);
	}
	return ans;
}
int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) {
		int pos;
		char tmp[10];
		scanf("%d%s", &pos, tmp);
		int id = 0;
		if (tmp[0] == 'R')
			id = 0;
		if (tmp[0] == 'G')
			id = 1;
		if (tmp[0] == 'B')
			id = 2;
		p.push_back(make_pair(pos, id));
		c[id].push_back(pos);
	}
	ll res = 0;
	if (!c[G].size()) {
		if (c[R].size())
			res += c[R].back() - c[R][0];
		if (c[B].size())
			res += c[B].back() - c[B][0];
		printf("%lld\n", res);
		return 0;
	}
	res += addBefore(R);
	res += addBefore(B);
	res += addAfter(R);
	res += addAfter(B);
	int foundGreen = -1;
	vector<int> red,blue;
	for (int i = 0; i < p.size(); ++i){
		if(p[i].second == G){
			ll thi = 0;
			if(foundGreen != -1){
				thi += (p[i].first - foundGreen);
				thi += best(red,foundGreen,p[i].first);
				thi += best(blue,foundGreen,p[i].first);
			}
			thi = min(thi,(p[i].first - foundGreen)*2ll);
			res += thi;
			red.clear();
			blue.clear();
			foundGreen = p[i].first;
			continue;
		}
		if(p[i].second == R){
			red.push_back(p[i].first);
		}
		if(p[i].second == B){
			blue.push_back(p[i].first);
		}
	}
	printf("%lld\n", res);


	return 0;
}