#include<bits/stdc++.h>
#include <stdarg.h>
using namespace std;
#define MOD 1000000000 + 7
#define hell 100000000000000000
#define PI 3.1415926535897932384626
#define int long long int
#define fi first
#define se second
#define pq priority_queue
#define pb push_back
#define IOS ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
#define endl '\n'
#define all(x) x.begin(),x.end()
#define ZERO(dabba) memset(dabba,0,sizeof(dabba));
#define what_is(x)  cerr << #x << " is " << x << endl;
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
template<typename T> T pow(T a,T b, int m){T ans=1; while(b>0){ if(b%2==1) ans=(ans*a)%m; b/=2; a=(a*a)%m; } return ans%m; }
template<typename T> void swap(T *a,T *b){T temp = *a;*a = *b;*b = temp;return ;}

struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
/*******************************Template ends**************************************/
void solve()
{
    int n;
    cin >> n;
    int arr[n+1];
    rep(i,0,n) cin >> arr[i+1];
    reverse(arr+1,arr+n+1);
    vector< pair<int,int > >s;
    int ans = 0;
    rep(i,1,n+1)
    {
        int cur = 0;
        while(s.size() and s.back().first < arr[i])
        {
            cur++;
            cur = max(cur,s.back().second);
            s.pop_back();
        }
        s.pb({arr[i],cur});
        ans = max(cur,ans);
    }
    cout << ans << endl;
}
signed main()
{
    IOS;
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output2.txt", "w", stdout);
    #endif
    solve();
    return 0;
}