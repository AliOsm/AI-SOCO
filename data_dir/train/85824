#include<bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
//using namespace __gnu_pbds;
//typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>pbds;
//#pragma comment(linker, "/stack:200000000")
#define mod ( ll  ) ( 998244353 )  //( 1e9 + 7 )
#define ll long long int
#define inf ( ll  )( 1e9 + 10 )
#define mxs (int)( 1e6 + 10 )
//#define md  int mid = ( l + r )>>1;
//int dx[]={+1,-1,+0,+0};///Four Directions
//int dy[]={+0,+0,+1,-1};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
int n, m, cases, t , ans , k;
string s , s2 , s3;
int ar [ mxs ] , ar2 [ mxs ] , ar3 [ mxs ];
map < int , vector < pair < int , int > > > mp;
map < int , vector < pair < int , int > > >::iterator it;
vector < pair < int , int > > v , temp;
void brainfuck();
int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>n;
    for ( int i = 1 ; i <= n; i++ )cin>>ar [ i ];
    for ( int i = 1 ; i <= n; i++ )
    {
        int sum = 0;
        for ( int j = i ; j <= n; j++ )
        {
            sum += ar [ j ];
            mp [ sum ].push_back( { j , i } );
        }
    }
    for ( it = mp.begin(); it != mp.end(); it++ )
    {
        sort( it->second.begin() , it->second.end() );
        m = it->second.size();
        int le = 0;
        temp.clear();
        for ( int j = 0 ; j < m; j++ )
        {
            if ( it->second [ j ].second > le )
            {
                temp.push_back( { it->second [ j ].second , it->second [ j ].first } );
                le = it->second [ j ].first;
            }
        }
        if ( temp.size() > v.size() )v = temp;
    }
    cout<<v.size()<<"\n";
    while( !v.empty() )
    {
        cout<<v.back().first<<" "<<v.back().second<<"\n";
        v.pop_back();
    }
}
