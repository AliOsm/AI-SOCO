#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 2e4 + 1;
int a, b, c, ans, tc;

vec <int> divi[N];

void input() {
    cin >> a >> b >> c;
}

void sieve() {
    for(int i = 1; i < N; ++i) {
        for(int j = i; j < N; j += i) {
            divi[j].pb(i);
        }
    }
}

int calc_a(int k) {
    int res = inf;
    auto it = ub(all(divi[k]), a);
    if(it != divi[k].end()) {
        res = min(res, abs(*it - a));
    }
    if(it != divi[k].begin()) {
        res = min(res, abs(*prev(it) - a));
    }
    return res;
}

int calc_c(int k) {
    return min(c % k, k - c % k);
}

void construct_a(int k) {
    pii res = {inf, 0};
    auto it = ub(all(divi[k]), a);
    if(it != divi[k].end()) {
        res = min(res, {abs(*it - a), *it});
    }
    if(it != divi[k].begin()) {
        res = min(res, {abs(*prev(it) - a), *prev(it)});
    }
    cout << res.yy << " ";
}

void construct_c(int k) {
    pii res = {inf, 0};
    res = min(res, {c % k, c - c % k});
    res = min(res, {k - c % k, c + k - c % k});
    cout << res.yy << "\n";
}

void solve() {
    ans = inf;
    for(int i = 1; i < N; ++i) {
        ans = min(ans, abs(b - i) + calc_a(i) + calc_c(i));
    }
    cout << ans << "\n";
    for(int i = 1; i < N; ++i) {
        if(ans == abs(b - i) + calc_a(i) + calc_c(i)) {
            construct_a(i);
            cout << i << " ";
            construct_c(i);
            break;
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    sieve();
    cin >> tc;
    while(tc--) {
        input();
        solve();
    }
}