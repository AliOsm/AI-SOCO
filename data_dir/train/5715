#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>
#include <random>
#include <iomanip>


typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl



using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint toNumber (string s)
{
	tint Number;
	if ( ! (istringstream(s) >> Number) )
		Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (tint number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}


struct Punto
{
	ldouble x,y;
	Punto (ldouble xx, ldouble yy)
	{
		x = xx;
		y = yy;
	}
};

Punto operator + (Punto p1, Punto p2)
{
	return Punto(p1.x+p2.x,p1.y+p2.y);
}

Punto operator - (Punto p1, Punto p2)
{
	return Punto(p1.x-p2.x,p1.y-p2.y);
}

Punto operator * (ldouble lambda, Punto p)
{
	return Punto(lambda*p.x, lambda*p.y);
}

Punto operator ~ (Punto p)
{
	return Punto(-p.y,p.x);
}

ldouble operator * (Punto p1, Punto p2)
{
	return p1.x*p2.x+p1.y*p2.y;
}

ldouble operator ^ (Punto p1, Punto p2)
{
	return p1.x*p2.y - p1.y*p2.x;
}

ldouble norma (Punto p)
{
	return sqrt(p.x*p.x+p.y*p.y);
}

ldouble areaTriangulo (Punto p1, Punto p2, Punto p3)
{
	return abs((p1-p3)^(p1-p2))/2.0;
}

ldouble areaPoligono(vector<Punto> &polygon)
{
	ldouble area = 0.0;
	tint n = polygon.size();
	forn(i,n)
		area += polygon[i]^polygon[(i+1)%n];
	return abs(area)/2.0;
}


ldouble epsilon = 5e-8;

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n;
	while (cin >> n)
	{
		vector<Punto> p (n, Punto(0.0,0.0));
		forn(i,n)
		{
			ldouble xx,yy;
			cin >> xx >> yy;
			p[i] = Punto(xx,yy);
		}
		ldouble dInf = 0.0, dSup = 1e9; // Inf es Convexo, Sup puede dejar de serlo
		while (dSup - dInf > epsilon)
		{
			ldouble d = (dSup + dInf) / 2.0;
			bool sePuede = false;
			forn(i,n)
			{
				Punto a = p[(i-1+n) % n], b = p[(i+1)%n], c = p[i];
				Punto q = (d /norma(b-a))*(~(b-a));
				
				sePuede |=  (((b + q)-(c + q))^((b + q)-(a + q)))*(((b + q)-(c - q))^((b + q)-(a - q))) < 0.0;
				sePuede |=  (((b - q)-(c + q))^((b + q)-(a + q)))*(((b + q)-(c - q))^((b - q)-(a - q))) < 0.0;
				if (sePuede)
					break;
				
			}
			if (sePuede)
				dSup = d;
			else
				dInf = d;
		}
		double ans = double((dInf+dSup) / 2.0);
		cout <<  fixed << showpoint << setprecision(16) << ans << "\n";
		
	}
	return 0;
}

