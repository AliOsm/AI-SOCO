#include <stdio.h>
#include <vector>
#include <algorithm>
#include <set>
#define pb push_back
using namespace std;

int kill_at(vector <int> ciel, vector <int> jiro, bool cards_left) {
    int ans = 0;

    for (int maxi = 0; maxi < (int)jiro.size(); maxi++) {
        int damage = 0;
        for (int i = (int)ciel.size() - 1, j = 0; i >= 0; i--, j++) {
            if (maxi - j < 0) {
                if (cards_left == false && maxi == (int)jiro.size() - 1) {
                    damage += ciel[i];
                }
            } else if (ciel[i] >= jiro[maxi - j]) {
                damage += ciel[i] - jiro[maxi - j];
            } else {
                break;
            }
        }
        //printf("maxi = %d, damage = %d, cards_left = %d\n", maxi, damage, cards_left);
        ans = max(ans, damage);
    }
    return ans;
}

int kill_all(vector <int> ciel, vector <int> jiro_at, vector <int> jiro_def) {
    multiset <int> s;
    for (int i = 0; i < (int)ciel.size(); i++) {
        s.insert(ciel[i]);
    }

    for (int i = 0; i < (int)jiro_def.size(); i++) {
        multiset<int>::iterator it = s.lower_bound(jiro_def[i] + 1);
        if (it == s.end()) {
            return 0;
        }
        s.erase(it);
    }

    vector <int> ciel_left;
    for (multiset<int>::iterator it = s.begin(); it != s.end(); it++) {
        ciel_left.pb(*it);
    }
    return kill_at(ciel_left, jiro_at, false);
}

int main(void) {
    int n, m;
    vector <int> jiro_at;
    vector <int> jiro_def;
    vector <int> ciel;
    int val;
    char pos[5];

    scanf(" %d %d", &n, &m);
    for (int i = 0; i < n; i++) {
        scanf(" %s %d", pos, &val);
        if (pos[0] == 'A') {
            jiro_at.pb(val);
        } else {
            jiro_def.pb(val);
        }
    }
    for (int i = 0; i < m; i++) {
        scanf(" %d", &val);
        ciel.pb(val);
    }
    sort(jiro_at.begin(), jiro_at.end());
    sort(ciel.begin(), ciel.end());
    if (jiro_at.empty()) {
        jiro_at.pb(0);
    }

    int ans = max(kill_at(ciel, jiro_at, true), kill_all(ciel, jiro_at, jiro_def));
    printf("%d\n", ans);

    return 0;
}
