#pragma GCC optimize("O3")
#include <bits/stdc++.h>

using namespace std;
using namespace __gnu_cxx;


#define f first
#define s second
#define sz size()
#define em empty()
#define pb push_back
#define pf push_front
#define mem(a,b,s) for(int i=0 ; i<=s ; ++i) a[i]=b;
#define mem2(a,r,c,b) for(int i=0 ; i<=r ; ++i)    for(int j=0 ; j<=c ; ++j)    a[i][j]=b;
#define all(a) a.begin(),a.end()
#define rall(a)	a.rbegin(),a.rend()
#define mp make_pair
#define in insert
#define sc(x) scanf("%d",&x)
#define scl(a)	scanf("%lld",&a)
#define sc2(a,b)	scanf("%d%d",&a,&b)
#define rep(x,a,b)	for(int x=a ; x<=b ; ++x)
#define irep(x,a,b)	for(int x=a ; x>=b ; --x)
#define cross(a,b) ((conj(a) * (b)).imag())
#define dot(a,b) ((conj(a) * (b)).real())
#define normalize(p) ((p) / length(p))
#define length(v) ((double)hypot((v).Y, (v).X))
#define X real()
#define Y imag()

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<pair<int,int> > vii;
typedef set<int> si;
typedef set<pair<int,int> > sii;
typedef map<int,int>	mii;
typedef pair<int,char>	ic;
typedef pair<int,string> is;
typedef long double ld;
typedef priority_queue<ii> pqii;
typedef priority_queue<int>pqi;
typedef complex<double> point;

const double pi=3.14159265358979323846264338327950288419716939937510582097494459;
const double EPS = 1e-9;
const int MAXN=1e5+10;
const ll MOD=1e9+7;
const int oo=2e9+10;
const ll OO=1e18;

int dx[]={0,1,0,-1,-1,-1,1,1};
int dy[]={1,0,-1,0,-1,1,-1,1};

int n,m,k,x,y,z;
vii ver[MAXN<<1];
map<int,ll>dist[MAXN<<1];

ll Dijkstra()
{
	k<<=1;
	priority_queue<pair<ll,ii>>pq;
	multiset<ll>st;
	multiset<ll>::iterator it;
	pair<ll,ii>cur;
	int cnt=0;
	rep(i,1,n)	pq.push({0,{i,i}}),dist[i][i]=0;
	while(pq.sz)
	{
		cur=pq.top(),pq.pop(),cur.f*=-1;
		if(cur.f>dist[cur.s.f][cur.s.s])	continue;
		cnt+=cur.f!=0;
		if(cnt==k)	return cur.f;
		for(auto& e:ver[cur.s.s])
			if((!dist[cur.s.f].count(e.f) || cur.f+e.s<dist[cur.s.f][e.f]) && (st.sz<k || cur.f+e.s<=*it))
			{
				dist[cur.s.f][e.f]=cur.f+e.s;
				pq.push({-dist[cur.s.f][e.f],{cur.s.f,e.f}});
				st.in(dist[cur.s.f][e.f]);
				it=st.end(),--it;
				if(st.sz>k)	st.erase(it--);
			}
	}
	return 0;
}


int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("In.txt","r",stdin);
//	freopen("Out.txt","w",stdout);
#else
//	freopen("points.in","r",stdin);
//	freopen("Out.txt","w",stdout);
#endif

	scanf("%d%d%d",&n,&m,&k);
	while(m--)	scanf("%d%d%d",&x,&y,&z),ver[x].pb({y,z}),ver[y].pb({x,z});
	printf("%lld",Dijkstra());
}
