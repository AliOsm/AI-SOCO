#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl

const int maxn = 1e5 + 5;

int n;
vector<int> g[maxn];
int parent[maxn];

const ll inf = 1e18;

ll s[maxn];
ll ans = 0;

bool check_valid(int at, ll mx) {
  ll v = s[at];
  if (v!=-1 && mx > v) return false;
  for (auto to: g[at]) {
    if (to == parent[at]) continue;
    if (v == -1) v = mx;
    if (!check_valid(to, v)) {
      return false;
    }
  }
  return true;
}

ll dfs(int at) {
  ll v = s[at];
  // i can be any value
  if (v==-1) {
    ll mn = inf; ll mx = -inf;
    vector<ll> children;
    for (auto to: g[at]) {
      if (to == parent[at]) continue;
      ll ret = dfs(to);
      mn = min(mn, ret);
      mx = max(mx, ret);
      children.push_back(ret);
    }
    // we're a leaf
    if ((int)children.size() == 0) {
      return 0;
    }

    for (auto c: children) {
      ans += (c-mn);
    }
    
    return mn;
  } else {
    for (auto to: g[at]) {
      if (to == parent[at]) continue;
      ll ret = dfs(to);
      ans += max(0ll,(ret-v));//case where child needs no help
    }
    return v;
  }
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);
  //cout << fixed << setprecision(6);
  cin>>n;
  for (int i=1; i<n; i++) {
    int p; cin>>p; --p; // 0-index
    parent[i] = p;
    g[p].push_back(i);
  }

  for (int i=0; i<n; i++) cin>>s[i];


  bool valid = check_valid(0,0);
  if (!valid) out(-1);

  ll deferred = dfs(0);

  ans += deferred;
  
  
  cout<<ans<<endl;
  
  return 0;
  //try using ll
  //ur outputting the answer incorrectly
  //try something simpler
  //read the prompt more carefully
  //challenge your assumptions
}
