#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
typedef long long ll;

int N;
string S;
ll A[105];
ll dp[105][105][105];

ll getdp(int a, int b, int c)
{
    if (a > b)
        return 0;
    if (dp[a][b][c] != -1)
        return dp[a][b][c];

    dp[a][b][c] = getdp(a + 1, b, 1) + A[c];
    for (int i = a + 1; i <= b; i++)
        if (S[i] == S[a])
            dp[a][b][c] = max(dp[a][b][c], getdp(a + 1, i - 1, 1) + getdp(i, b, c + 1)); 
    return dp[a][b][c];
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    cin >> N >> S;
    for (int i = 1; i <= N; i++)
        cin >> A[i];

    memset(dp, -1, sizeof(dp));
    cout << getdp(0, N - 1, 1) << "\n";

    return 0;
}
