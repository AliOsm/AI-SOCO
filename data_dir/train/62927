#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>
#include <random>

using namespace std;

#define int long long

const int LIM = 1e9 + 239;
const int INF = 1e18 + 239;

pair<int, int> solve(int n, int len, vector<int> a, int add) {
	vector<int> ps(n + 1);
	for (int i = 0; i < n; i++) {
		ps[i + 1] = ps[i] + a[i];
	}
	vector<pair<int, int>> dp(n + 1, {-INF, -INF});
	vector<pair<int, int>> pm(n + 1, {-INF, -INF});
	dp[0] = {0, 0};
	pm[0] = dp[0];
	for (int r = 1; r <= n; r++) {
		int l = max((int)0, r - len);
		int sum = ps[r] - ps[l];
		auto v = pm[l];
		v.first += (sum + add);
		v.second++;
		dp[r] = v;
		pm[r] = max(pm[r - 1], dp[r]);
	}
	return pm[n];
}

int solve(int n, int k, int len, vector<int> a) {
	int l = -LIM;
	int r = LIM;
	while (r - l > 1) {
		int m = (r + l) / 2;
		if (k <= solve(n, len, a, m).second) {
			r = m;
		} else {
			l = m;
		}
	}
	int ans = solve(n, len, a, r).first;
	return ans - r * k;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n, k, l;
    cin >> n >> k >> l;
    vector<int> a(n);
    int cnt1 = 0;
    for (auto &t : a) {
    	char c;
    	cin >> c;
    	if ('a' <= c && c <= 'z') {
    		t = 0;
    	} else {
    		t = 1;
    		cnt1++;
    	}
    }
    k = min(k, (n + l - 1) / l);
    int f = cnt1 - solve(n, k, l, a);
    for (auto &t : a) {
    	t ^= 1;
    }
    int s = (n - cnt1) - solve(n, k, l, a);
    cout << min(f, s) << endl;
}
