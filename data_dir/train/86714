#include <bits/stdc++.h>

using namespace std;
using namespace __gnu_cxx;

typedef double db;
typedef long long ll;
typedef pair<db, db> pdd;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef unsigned long long ull;

#define F          first
#define S          second
#define pnl        printf("\n")
#define sz(x)      (int)x.size()
#define sf(x)      scanf("%d",&x)
#define pf(x)      printf("%d\n",x)
#define all(x)     x.begin(),x.end()
#define rall(x)    x.rbegin(),x.rend()
#define rep(i, n)  for(int i = 0; i < n; ++i)

const db eps = 1e-9;
const db pi = acos(-1);
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
const int mod = 1000 * 1000 * 1000 + 7;

int t;
int n, a, b;
char str[200005];
ll dp[200005][2];
ll dp2[200005][2];

ll solve(int i, int d) {
    if (i == n) return (d == 0 ? b : 100000000000000LL);
    ll ret = dp[i][d];
    if (~ret) return ret;
    ret = 100000000000000LL;
    if (str[i] == '1' && d == 0) return ret;
    if (str[i] == '0') {
        if (d == 0) {
            ret = solve(i + 1, 0) + a + b;
            ret = min(ret, solve(i + 1, 1) + a + a + b);
        } else {
            ret = solve(i + 1, 1) + a + b + b;
            ret = min(ret, solve(i + 1, 0) + a + a + b + b);
        }
    } else {
        ret = solve(i + 1, 1) + a + b + b;
        // ret = min(ret, solve(i + 1, 0) + a + a + b);
    }
    return ret;
}

int main() {
    scanf("%d", &t);
    while (t--) {
        scanf("%d%d%d%s", &n, &a, &b, str);
        // memset(dp, -1, sizeof dp);
        // printf("%lld\n", solve(0, 0));
        memset(dp2, 0x3f, sizeof dp2);
        dp2[n][0] = b;
        for (int i = n - 1; i >= 0; --i) {
            for (int d = 0; d < 2; ++d) {
                if (str[i] == '1' && d == 0) continue;
                if (str[i] == '0') {
                    if (d == 0) {
                        dp2[i][d] = min(dp2[i + 1][0] + a + b,
                            dp2[i + 1][1] + a + a + b);
                    } else {
                        dp2[i][d] = min(dp2[i + 1][1] + a + b + b,
                            dp2[i + 1][0] + a + a + b + b);
                    }
                } else {
                    dp2[i][d] = dp2[i + 1][1] + a + b + b;
                }
            }
        }
        printf("%lld\n", dp2[0][0]);
    }
    return 0;
}
