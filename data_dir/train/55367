#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define mxs ( int ) ( 1e5 + 100 )
struct data
{
    ll le , ri , va;
};
data qu [ mxs ];
ll sum [ mxs * 3 ];
ll ar [ mxs ];
ll tree [ mxs * 3 ];
ll n , m , e , f , k;
void query_lazy( ll v , ll l , ll r , ll x , ll y );
void build( ll v , ll l , ll r );
void lazy( ll v , ll l , ll r , ll x , ll y , ll val , ll num );
void result( ll v , ll l , ll r );
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin>>n>>m>>k;
    for ( int i = 1; i <= n; i++ )cin>>ar [ i ];
    for ( int i = 1; i <= m; i++ )cin>>qu [ i ].le>>qu [ i ].ri>>qu [ i ].va;
    for ( int i = 1; i <= k; i++ )
    {
        cin>>e>>f;
        query_lazy( 1 , 1 , m , e , f );
    }
    build( 1 , 1 , m );
    result( 1 , 1 , n );
    for ( int i = 1; i <= n; i++ )cout<<ar [ i ]<<" ";
    return 0;
}
void query_lazy( ll v , ll l , ll r , ll x , ll y )
{
    if ( x > y )return;
    if ( l == x && r == y )tree [ v ]++;
    else
    {
        ll mid = ( l + r )>>1;
        query_lazy( v + v , l , mid , x , min( y , mid ) );
        query_lazy( v + v + 1 , mid + 1 , r , max( x , mid + 1 ) , y );
    }
}
void build( ll v , ll l , ll r )
{
    if ( l != r )
    {
        ll mid = ( l + r )>>1;
        tree [ v + v ] += tree [ v ];
        tree [ v + v + 1 ] += tree [ v ];
        tree [ v ] = 0;
        build( v + v , l , mid );
        build( v + v + 1 , mid + 1 , r );
        return;
    }
    if ( tree [ v ] )lazy( 1 , 1 , n , qu [ l ].le , qu [ l ].ri , qu [ l ].va , tree [ v ] );
}
void lazy( ll v , ll l , ll r , ll x , ll y , ll val , ll num )
{
    if ( x > y )return;
    if ( l == x && r == y )
    {
        sum [ v ] += ( val * num );
        return;
    }
    ll mid = ( l + r )>>1;
    lazy( v + v , l , mid , x , min( y , mid ) , val , num );
    lazy( v + v + 1 , mid + 1 , r , max( x , mid + 1 ) , y , val , num );
}
void result( ll v , ll l , ll r )
{
    if ( l == r )
    {
        ar [ l ] += sum [ v ];
        return;
    }
    ll mid = ( l + r )>>1;
    sum [ v + v ] += sum [ v ];
    sum [ v + v + 1 ] += sum [ v ];
    sum [ v ] = 0;
    result( v + v , l , mid );
    result( v + v + 1 , mid + 1 , r );
}
