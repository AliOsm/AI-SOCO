///****In the name of Allah, most Gracious, most Compassionate****//

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

#define ALL(a) a.begin(), a.end()
#define FastIO ios::sync_with_stdio(false); cin.tie(nullptr);cout.tie(nullptr)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

#define DBG(a) cout<< #a <<" --> "<<(a)<<endl
#define NL cout<<"\n"

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}

const int N=3e5+5;
const int oo=1e9+7;

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file

using namespace std;
using namespace __gnu_pbds;

/* Special functions:

        find_by_order(k) --> returns iterator to the kth largest element counting from 0
        order_of_key(val) --> returns the number of items in a set that are strictly smaller than our item
*/

typedef tree<
pii,
null_type,
less<pii>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;



int chai[3] , ache[3]  , a[N];
int ans[N];

ordered_set x[3];
const pii SuBa = { 0 , 0 } ;
int n;

bool pos()
{
    if(ache[0]!=chai[0]) return 0;
    if(ache[1]!=chai[1]) return 0;
    if(ache[2]!=chai[2]) return 0;
    return 1;
}

pii Find(int y,int i)
{
    i%=3;
    if(x[i].empty()) return SuBa;
    int xx = x[i].order_of_key({y,0});
    if(xx>=x[i].size())
        return *x[i].find_by_order(xx-1);
    else
    {
        pii ret = *x[i].find_by_order(xx);
        if(ret.first == y) return ret;
        else return  xx== 0 ? SuBa : *x[i].find_by_order(xx-1);
    }
}

bool cons()
{
    int now  =  -1;
    for(int i=0;i<n;i++)
    {
        if(i%3==0)
        now++;
        pii xx = Find(now , i);
        if(xx == SuBa) return 0;
        ans[i] = xx.second;
        now = xx.first;
        x[i%3].erase(xx);
    }
    return 1;
}

int32_t main()
{
    FastIO;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        chai[i%3]++;
        cin>>a[i];
        ache[a[i]%3]++;
        x[a[i]%3].insert({a[i]/3 , i+1});
    }
    if(pos())
    {
        if(cons())
        {
            cout<<"Possible\n";
            for(int i=0;i<n;i++) cout<<ans[i]<<" ";
        }
        else
            cout<<"Impossible\n";
    }
    else cout<<"Impossible\n";
}
