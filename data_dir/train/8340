#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> l4;
#define pb push_back
#define mp make_pair


const int N = 1500+1, M = N*N;

vector<ii> d[M];
ll a[N], sum[N];
int n;
int tot = 0;
ll values[M];
inline int idx(ll sum)
{
  int id = lower_bound(values, values+tot, sum)-values;
  assert(values[id] == sum);
  return id;
}
inline int get(int id, int pos)
{
  auto it = lower_bound(d[id].begin(), d[id].end(), mp(pos+1, 0));
  assert(it != d[id].begin());
  --it;
  return it->second;
}

int main()
{
  scanf("%d", &n);
  sum[0] = 0;
  for (int i = 1; i <= n; ++i)
    {
      scanf("%lld", &a[i]);
      sum[i] = a[i] + sum[i-1];
    }
  tot = 0;
  for (int i = 1; i <= n; ++i)
    for (int j = i; j <= n; ++j)
      values[tot++] = sum[j]-sum[i-1];
  sort(values, values+tot);
  tot = unique(values, values+tot)-values;
  for (int i = 0; i < tot; ++i) d[i].pb(mp(0, 0));
  for (int i = 1; i <= n; ++i)
    for (int j = i; j >= 1; --j)
      {
	ll _sum = sum[i] - sum[j-1];
	int id = idx(_sum);
	if (d[id].back().first == i) continue;
	int prev = get(id, j-1);
	if (prev+1 > d[id].back().second) d[id].pb(mp(i, prev+1));
      }
  int tar = 0;
  for (int i = 0; i < tot; ++i) if (d[i].back().second > d[tar].back().second) tar = i;
  vector<ii> ans;
  int expected = d[tar].back().second;
  //  cerr << values[tar] << " expected = " << expected << endl;
  //  for (auto e : d[tar])
  //    cerr << e.first << ", " << e.second << endl;
  while (d[tar].size() > 1)
    {
      int cur = d[tar].back().first;
      int prev = cur;
      while (prev >= 1 && sum[cur]-sum[prev-1] != values[tar]) --prev;
      assert(prev >= 1);
      ans.pb(mp(prev, cur));
      while (d[tar].size() > 1 && d[tar].back().first >= prev) d[tar].pop_back();
    }
  assert(expected == ans.size());
  
  printf("%d\n", (int) ans.size());
  for (auto e : ans)
    printf("%d %d\n", e.first, e.second);
  
}
