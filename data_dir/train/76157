#include<bits/stdc++.h>
#define god dimasi5eks
#pragma GCC optimize("O3")
#define fi first
#define se second
#define pb push_back
#define pf push_front
#define mod 1000000007
#define dancila 3.14159265359
#define eps 1e-9

using namespace std;

typedef long long ll;


int add(int a, int b)
{
    ll x = a+b;
    if(x >= mod)
        x -= mod;
    if(x < 0)
        x += mod;
    return x;
}
ll mul(ll a, ll b)
{
    return (a*b) % mod;
}

ll pw(ll a, ll b)
{
    ll ans = 1;
    while(b)
    {
        if(b & 1)
            ans = (ans * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ans;
}
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
long long rand_seed()
{
    long long a = rng();
    return a;
}
vector<int> dsu[100002];
int n, m, q, tt[100002], rel[100002];
map<string, int> mp;
int Find(int nod)
{
    if(tt[nod] == nod)
        return nod;
    return tt[nod] = Find(tt[nod]);
}
void Unite(int a, int b, int rx)
{
    int x = Find(a);
    int y = Find(b);
    if(dsu[x].size() < dsu[y].size())
        swap(x, y);
    bool flip = 0;
    if(rel[b] == rel[a] && rx == 1)
        flip = 1;
    if(rel[b] != rel[a] && rx == 0)
        flip = 1;
    for(int i = 0; i < dsu[y].size(); ++i)
        rel[dsu[y][i]] ^= flip;
    tt[y] = x;
    for(int i = 0; i < dsu[y].size(); ++i)
    {
        int vecin = dsu[y][i];
        dsu[x].pb(vecin);
    }
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> m >> q;
    for(int i = 1; i <= n; ++i)
    {
        string s;
        cin >> s;
        mp[s] = i;
    }
    for(int i = 1; i <= n; ++i)
        tt[i] = i, dsu[i].pb(i);
    for(int i = 1; i <= m; ++i)
    {
        int tip;
        string a, b;
        cin >> tip >> a >> b;
        int x = mp[a];
        int y = mp[b];
        --tip;
        if(Find(x) == Find(y))
        {
            if(tip == 0 && rel[x] != rel[y])
                cout << "NO\n";
            else
                if(tip == 1 && rel[x] == rel[y])
                    cout << "NO\n";
                else
                    cout << "YES\n";
        }
        else
        {
            cout << "YES\n";
            Unite(x, y, tip);
        }
    }
    for(int i = 1; i <= q; ++i)
    {
        string a, b;
        cin >> a >> b;
        int x = mp[a];
        int y = mp[b];
        if(Find(x) != Find(y))
            cout << "3\n";
        else
            if(rel[x] == rel[y])
                cout << "1\n";
            else
                cout << "2\n";
    }
    return 0;
}
