#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_set>
#include<unordered_map>
using namespace std;
#define MAX 100002
int n;
int m;

vector<pair<int, int> > used;
vector<pair<int, int> > vv;  //not used

int A[MAX];
int B[MAX];

struct st {
    int a;
    int b;
    int len;
    long long int index;
    st(int a_,int b_,int len_,int index_) {
        a = a_;
        b = b_;
        len = len_;
        index = index_;
        A[index] = a + 1;
        B[index] = b + 1;
    }
};
bool cmp(st &a, st &b) {
    return a.len < b.len;
}
vector<st> v;
long long int want = 0;
long long int res = 0;
int belong[MAX];

inline int root(int b) {
    if (belong[b] == -1) {
        return b;
    }
    belong[b] = root(belong[b]);
    return belong[b];
}
void merge(int a, int b) {
    a = root(a);
    b = root(b);
    if (a == b) {
        return;
    }
    belong[a] = b;
    return;
}
int main() {
    scanf("%d%d", &n, &m);
    for (int i = 0;i < m;i++) {
        int a, b;
        scanf("%d%d", &a, &b);
        if (b) {
            used.push_back(make_pair(a, i));
            want += (long long int)(a);
        }
        else {
            vv.push_back(make_pair(a, i));
        }
    }
    sort(used.begin(), used.end());
    sort(vv.begin(), vv.end());
    for (int i = 0;i < used.size();i++) {
        v.push_back(st(i, i + 1, used[i].first, used[i].second));
    }
    int vs = vv.size();
    {
        int ind = 0;
        for (int i = 2;i < n;i++) {
            for (int j = 0;j <= i - 2;j++) {
                if (ind >= vs) {
                    break;
                }
                v.push_back(st(i, j, vv[ind].first, vv[ind].second));
                ind++;
            }
            if (ind >= vs) {
                break;
            }
        }
    }
    sort(v.begin(), v.end(), cmp);
    memset(belong, -1, sizeof(belong));
    for (int i = 0;i < v.size();i++) {
        int a = v[i].a;
        int b = v[i].b;
        if (root(a) == root(b)) {
            continue;
        }
        res += v[i].len;
        merge(a, b);
    }
    if (res != want) {
        puts("-1");
        return 0;
    }
    for (int i = 0;i < m;i++) {
        printf("%d %d\n", A[i], B[i]);
    }
    return 0;
}