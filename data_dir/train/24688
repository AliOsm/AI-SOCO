#include<bits/stdc++.h>

using namespace std;

using ll = long long;
using ld = long double;

using edge = tuple<int, int, int>;

const int N = 100010;

int n, m, k, x[N], p[N], sz[N], cnt[N], cc[N];
vector<edge> e;

void init() {
    for (int i = 0; i < n; ++i) {
        cc[i] = 0;
        cnt[i] = 0;
        p[i] = i;
        sz[i] = 1;
    }
    cc[0] = n - k;
    cc[1] = k;
    for (int i = 0; i < k; ++i) {
        cnt[x[i]] = 1;
    }
}

int get(int v) {
    if (p[v] == v) {
        return v;
    }
    return p[v] = get(p[v]);
}

void unite(int v, int u) {
    v = get(v), u = get(u);
    if (v != u) {
        if (sz[v] > sz[u]) {
            swap(v, u);
        }
        p[v] = u;
        sz[u] += sz[v];
        --cc[cnt[u]];
        --cc[cnt[v]];
        cnt[u] += cnt[v];
        ++cc[cnt[u]];
    }
}

void pr(int w) {
    for (int i = 0; i < k; ++i) {
        cout << w << " ";
    }
    exit(0);
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m >> k;
    for (int i = 0; i < k; ++i) {
        cin >> x[i];
        --x[i];
    }
    e = vector<edge>(m);
    for (int i = 0; i < m; ++i) {
        cin >> get<1>(e[i]) >> get<2>(e[i]) >> get<0>(e[i]);
        --get<1>(e[i]);
        --get<2>(e[i]);
    }
    sort(e.begin(), e.end());
    init();
    for (int i = 0; i < m; ++i) {
        unite(get<1>(e[i]), get<2>(e[i]));
        if (cc[k] == 1) {
            pr(get<0>(e[i]));
        }
    }
    return 0;
}
