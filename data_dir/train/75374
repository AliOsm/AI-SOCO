#include <bits/stdc++.h>

using namespace std;

typedef pair <pair<int,int>,int> tri;

#define MP make_pair
#define L first
#define R second

const int maxn = 2e5;

int a[maxn];

set <tri> s1, s2;

void rem(int idx,int val,int rep) {
	set <tri> :: iterator it;
	it = s1.lower_bound(MP(MP(idx, val), rep));
	//cout << "@" << val << endl;
	if (it == s1.begin()) {
		s1.erase(*it);
		s2.erase(s2.lower_bound(MP(MP(rep, idx), val)));
		return;
	}
	it++;
	if (it == s1.end()) {
		it--;
		s1.erase(*it);
		s2.erase(s2.lower_bound(MP(MP(rep, idx), val)));
		return;
	}
	tri nxt1 = *s1.lower_bound(*it);
	tri nxt2 = *s2.lower_bound(MP(MP(nxt1.R, nxt1.L.L), nxt1.L.R));
	it--;
	it--;
	tri prv1 = *s1.lower_bound(*it);
	tri prv2 = *s2.lower_bound(MP(MP(prv1.R, prv1.L.L), prv1.L.R));
	it++;
	s1.erase(it);
	s2.erase(s2.lower_bound(MP(MP(rep, idx), val)));
	
	if (nxt1.L.R == prv1.L.R) {
		s2.erase(s2.lower_bound(nxt2));
		s2.erase(s2.lower_bound(prv2));
		s2.insert(MP(MP(nxt1.R + prv1.R, prv1.L.L), prv1.L.R));
		s1.erase(s1.lower_bound(nxt1));
		s1.erase(s1.lower_bound(prv1));
		s1.insert(MP(MP(prv1.L.L, prv1.L.R), nxt1.R + prv1.R));
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	int cnt = 1;
	for (int i = n - 2; i >= 0; i--)
		if (a[i] == a[i + 1])
			cnt++;
		else {
			s1.insert(MP(MP(i + 1, a[i + 1]), -cnt));
			s2.insert(MP(MP(-cnt, i + 1), a[i + 1]));
			cnt = 1;
		}
	s1.insert(MP(MP(0, a[0]), -cnt));
	s2.insert(MP(MP(-cnt, 0), a[0]));
	
	int ans = 0;
	while (s2.size()) {
		tri F = *s2.begin();
		rem(F.L.R, F.R, F.L.L);
		ans++;
	}
	cout << ans << endl;
	return 0;
}
