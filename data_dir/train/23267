//  Copyright Â© 2019 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<iostream>
#include<vector>
#include<stack>
#include<cstring>
#define MAX 100001
#define MXI 5000001
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;

int N, M, D, idx;
vector < int > ad1[MAX];
vector < int > ad2[MAX];
vector < int > ady[MXI];
string open[MAX];
int vis[MXI];
int ult[MXI];
stack < int > s;
int vl[MXI];
int cmp[MXI];

void dfs( int x )
{
    vis[x] = 1;
    int d = x % D;
    for( auto v : ad1[x / D] )
    {
        int sig = v * D + ( ( d + 1 ) % D );
        if( ! vis[sig] )
            dfs( sig );
    }
    s.push( x );
}

void dfs2( int x , int c )
{
    vis[x] = 2;
    cmp[x] = c;
    int d = x % D;
    if( open[x / D][x % D] == '1' && ult[x / D] != c )
    {
        ult[x / D] = c;
        vl[c]++;
    }
    for( auto v : ad2[x / D] )
    {
        int sig = v * D + ( ( d - 1 + D ) % D );
        if( vis[sig] != 2 )
            dfs2( sig , c );
    }
}

void findSCC()
{
    for( int i = 0; i < N*D; i ++ )
        if( ! vis[i] )
            dfs( i );
    while( ! s.empty() )
    {
        int x = s.top();
        s.pop();
        if( vis[x] == 2 )
            continue;
        idx++;
        dfs2( x , idx );
    }
}

int dp( int x )
{
    if( vis[x] != -1 )
        return vis[x];
    int ans = vl[x];
    for( auto v : ady[x] )
        ans = max( ans , dp( v ) + vl[x] );
    return vis[x] = ans;
}

int main()
{
    optimiza_io
    cin >> N >> M >> D;
    while( M -- )
    {
        int u, v;
        cin >> u >> v;
        u--, v--;
        ad1[u].push_back( v );
        ad2[v].push_back( u );
    }
    for( int i = 0; i < N; i ++ )
            cin >> open[i];
    
    findSCC();
    
    for( int i = 0; i < N; i ++ )
        for( auto v : ad1[i] )
            for( int d = 0; d < D; d ++ )
            {
                int a = i * D + d;            
                int b = v * D + ( ( d + 1 ) % D );
                if( cmp[a] && cmp[b] && cmp[a] != cmp[b] )
                    ady[cmp[a]].push_back( cmp[b] );
            }
    
    memset( vis , -1 , sizeof vis );
    cout << dp( cmp[0] );
            
    return 0;
}