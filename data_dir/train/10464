#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <chrono>

using namespace std;
typedef long long mt;
//#define mt int
#define rep(a, b, i) for(register mt i = a; i < b; ++i)
#define repe(a, b, i) for(register mt i = a; i <= b; ++i)
#define repd(a, b, i) for(register mt i = a; i > b; --i)
#define repde(a, b, i) for(register mt i = a; i >= b; --i)

#define N 1000002
#define K 4
#define M (300001)
#define INF 100000000000000007//10000000000000007// 1e16 + 7
#define MOD 1000000007ll  //1000000007//1e9 + 7
#define EPS 1e-9
#define MAX 1000000000000000001
//#pragma comment(linker, "/STACK:2000000000")

mt binPow(mt a, mt x, mt mod)
{
    mt r = 1;
    while (x) {
        if (x & 1)
            r = r * a % mod;
        a = a * a % mod;
        x >>= 1;
    }
    return r;
}

char s[N];
mt ln, shash[K][N];
mt mods[8] = { 3003529,
    3034909 ,
    3034453 ,
    3033689 ,
    3033551 ,
    3033353 ,
    3033011 ,
    3034979 };
bool mOk;
bool isSum(mt a, mt b)
{
    if (a <= 0 || b <= 0) return false;
    mt i = a - 1, j = a + b;
    //0; i;
    //i + 1; j - 1;
    //j; ln - 1;
    if (s[0] == '0' && i > 0 ||
        s[i + 1] == '0' && j-1 > i + 1 ||
        s[j] == '0' && ln - 1 > j) return false;
    bool ok = true;
    rep(0, K, k) {
        mt inv = binPow(10, mods[k] - 2, mods[k]);
        
        mt h1 = ((shash[k][0] - shash[k][i + 1]) * binPow(inv, (ln - 1 - i), mods[k]) % mods[k] + mods[k]) % mods[k],
        h2 = ((shash[k][i + 1] - shash[k][j]) * binPow(inv, ln - 1 - j + 1, mods[k]) % mods[k] + mods[k]) % mods[k],
        h3 = shash[k][j];
        ok &= (h1 + h2) % mods[k] == h3;
        if(!ok) return false;
    }
    if (ok) {
        string str(s);
        printf("%s+", str.substr(0, a).c_str());
        printf("%s=", str.substr(i + 1, b).c_str());
        printf("%s", str.substr(j, ln - j).c_str());
        
        
        return mOk = true;
    }
    return false;
}

int main(void)
{
    scanf("%s", s);
    ln = strlen(s);
    mt p = 1;
    rep(0, K, j){
        p=1;
        repde(ln - 1, 0, i) {
            shash[j][i] = ((i + 1 == ln ? 0 : shash[j][i + 1])
                           + p * (s[i] - '0')) % mods[j];
            p = p*10%mods[j];
        }
        
    }
    rep(1, ln, i) {
        if (isSum(i, ln - i - i)) //i ; ln - i - i; i
            break;
        if (isSum(i - 1, ln - i - i + 1))//i - 1; ln - i - i + 1; i
            break;
        if (isSum(ln - i - i, i))//ln - i - i ; i; i
            break;
        if (isSum(ln - i - i + 1, i - 1))//ln - i - i + 1; i - 1; i
            break;
    }
    
    return 0;
}
