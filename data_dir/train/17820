#include<bits/stdc++.h>
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse2")
#define pb          push_back
#define endl        '\n'
#define pll         pair<int,int>
#define vll          vector<int>
#define all(a)      (a).begin(),(a).end()
#define x           first
#define y           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mi        map<int,int>
#define gcd(a,b)    __gcd((a),(b))
#define lcm(a,b)    ((a)*(b)) / gcd((a),(b))
#define ios     ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
using namespace std;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); 
int i,j,k,l,sum=0,flag=0,a[100005],b[305],ans=0,m;
const int N = 2e5;  // limit for array size
int n;  // array size
int t[2 * N];
int d[2*N];
 
void build() {  // build the tree
  for (int i = n - 1; i > 0; --i)
    t[i] = min(t[i<<1], t[i<<1|1]);
}
 
// Range update and query
void apply(int p, int value) {          // applying value to segment node
  t[p] += value;
  if (p < n) d[p] += value;
}
 
void buildup(int p) {                     // build up from a node
  while (p > 1) p >>= 1, t[p] = min(t[p<<1], t[p<<1|1]) + d[p];     // build moving up with lazy value of each node
}
 
int h;
void push(int p) {
  for (int s = h; s > 0; --s) {            // update h of segment tree;
    int i = p >> s;
    if (d[i] != 0) {
      apply(i<<1, d[i]);
      apply(i<<1|1, d[i]);
      d[i] = 0;
    }
  }
}
 
void inc(int l, int r, int value) {
  l += n, r += n;
  int l0 = l, r0 = r;
  for (; l <= r; l >>= 1, r >>= 1) {
    if (l&1) apply(l++, value);
    if (!(r&1)) apply(r--, value);
  }
  buildup(l0);
  buildup(r0);
}
 
int query(int l, int r) {
  l += n, r += n;
  push(l);
  push(r);
  int res = 2e9;
  for (; l <= r; l >>= 1, r >>= 1) {
    if (l&1) res = min(res, t[l++]);
    if (!(r&1)) res = min(t[r--], res);
  }
  return res;
}
pair<int,int> q[305];
vector<int> output;
bool inside(int val , int index){
    return (q[index].x<= val && val <=q[index].y);
}
void solve(){
    cin>>n>>m;
    for(int i=0;i<n;i++){
        cin>>t[i+n];
        a[i]=t[i+n];
    }
    build();
    h = log(2*n)+5;
    for(int i=1;i<=m;i++){
        cin>>q[i].x>>q[i].y;
    }
    int kiska = -1;
    for(int i=0;i<n;i++){
            vector<int> res;
            for(int k=1;k<=m;k++){
                if(!inside(i+1,k)){
                    inc(q[k].x-1,q[k].y-1,-1);
                    res.pb(k);
                }
            }
            int temp = a[i] - query(0,n-1);
            if(temp>ans){
                ans=temp;
                kiska = i+1;
            }
            for(auto index:res){
                inc(q[index].x-1,q[index].y-1,1);
            }
    }
    cout<<ans<<endl;
    for(int k=1;k<=m;k++){
        if(!inside(kiska,k)){
            output.pb(k);
        }
    }
    cout<<output.size()<<endl;
    for(auto j:output) cout<<j<<" ";
}
signed main()
{
    ios
    int test=1;
    //cin>>test;
    while(test--){
        solve();
    }
    return 0;
}