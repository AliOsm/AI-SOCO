 #pragma comment(linker, "/stack:200000000")
 #pragma GCC optimize("Ofast")
 #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #define int long long 
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

map<int,ordered_set<int> >mm;
int ans[200005];
map<int,vector<pair<int,int> > >qq;

signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
 #ifndef ONLINE_JUDGE
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
 #endif


// -------------------------------------Code starts here--------------------------------------------------------------------- 

    int n;
    cin>>n;
    int a[n];
    ordered_set<pair<int,int> >s;
    int temp[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
        temp[i]=a[i];
        mm[a[i]].insert(i);
    }
    
    sort(temp,temp+n,greater<>());
    int m;
    cin>>m;
    int k,pos;
    for(int i=0;i<m;i++)
    {
        cin>>k>>pos;
        qq[k].push_back({pos,i});  
    }

    for(int i=0;i<n;i++)
    {
        if(s.size()==0)
        {
            auto j=mm[temp[i]].lower_bound(n+1);
            if(j==mm[temp[i]].end())
                j--;
            int pp=*j;
            mm[temp[i]].erase(j);
            s.insert({pp,temp[i]});
            for(auto l:qq[i+1])
            {
                ans[l.second]=(s.find_by_order(l.first-1))->second;
            }
        }   
        else
        {
            auto j=mm[temp[i]].lower_bound(s.begin()->first);
            if(j!=mm[temp[i]].begin())
                j--;
            int pp=*j;
            mm[temp[i]].erase(j);
            s.insert({pp,temp[i]});
            for(auto l:qq[i+1])
            {
                ans[l.second]=(s.find_by_order(l.first-1))->second;
            }            
        }
    }

    for(int i=0;i<m;i++)
        cout<<ans[i]<<"\n";

// -------------------------------------Code ends here------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
     clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }