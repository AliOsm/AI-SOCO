/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
using namespace std;

#define int long long
#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

vector<set<int>> adj;
class EMilitaryProblem {
public:
	vector<int> path;
	vector<int> dp;

	void dfs(int u, int parent){
		path.push_back(u);
		dp[u] = 1;
		for(int v: adj[u]) if(v!=parent) dfs(v, u), dp[u] += dp[v];
	}

	void solve(std::istream& in, std::ostream& out) {
		int n, q; in >> n >> q;
		adj = vector<set<int>>(n+1);
		dp = vector<int>(n+1, 0);

		rep(u, 2, n){
			int v; in >> v;
			adj[u].insert(v);
			adj[v].insert(u);
		}

		dfs(1, -1);

		map<int, int> pos;
		for(int i = 0; i<path.size(); ++i) pos[path[i]] = i;

		while(q--){
			int u, k; in >> u >> k;
			int res = pos[u] + k - 1, ans = -1;
			if(res < n and dp[u] >= k) ans = path[res];
			out<<ans<<'\n';
		}
	}
};


int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	EMilitaryProblem solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
