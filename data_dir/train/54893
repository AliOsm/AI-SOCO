/*
ID: hamed_51
PROG: ?
LANG: C++
*/

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#if (_win32 || __win32__)
#define LLD "%i64d"
#else
#define LLD "%lld"
#endif

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-13
//#define endl "\n"

inline void read(register int *n) {
	register char c; *n = 0;
	do { c = getchar(); } while (c < '0' || c > '9');
	do { *n = c-'0'+*n*10; c = getchar(); } while (c >= '0' && c <= '9');
}

#define MAXN 256

ll INF = 1000000LL*1000000*1000000;
ll dp[MAXN][MAXN];
string str;

ll f(int pos, int bal) {
	if (pos == -1) return bal == 0;
	if (bal < 0) return 0;
	ll &res = dp[pos][bal];
	if (res != -1) return res;
	if (str[pos] == '?') res = f(pos-1, bal+1)+f(pos-1, bal-1);
	else if (str[pos] == ')') res = f(pos-1, bal+1);
	else if (str[pos] == '(') res = f(pos-1, bal-1);
	res = min(INF, res);
	return res;
}

int main() {
	ll n, m, k;
	cin >> n >> m >> k;
	str = string(m+n-1, '?');
	vector<pii> priority(n+m-1, pii(10000, -1));
	FOR(i, 0, n) FOR(j, 0, m) {
		int x;
		cin >> x;
		priority[i+j].X = min(priority[i+j].X, x);
	}
	FOR(i, 0, n+m) priority[i].Y = i;
	sort(all(priority));
	FOR(i, 0, Size(priority)) {
		memset(dp, -1, sizeof dp);
		str[priority[i].Y] = '(';
		ll cnt = f(Size(str)-1, 0);
		if (cnt < k) {
			k -= cnt;
			str[priority[i].Y] = ')';
		}
	}
	FOR(i, 0, n) {
		FOR(j, 0, m) cout.put(str[i+j]);
		cout << endl;
	}
	return 0;
}

