#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()

typedef tree<pair<ll,ll> ,null_type,less<pair<ll,ll> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth smallest: " << *A.find_by_order(k-1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

ll val[100005];

int main()
{
	std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

   	ll n;
   	cin >> n;
   	ll a[n];
   	set<ll>s;
   	map<ll,ll>ma, ma2, m;
   	for(int i=0;i<n;i++) cin >> a[i], s.insert(a[i]), ma[a[i]]++;
   	if(*s.begin() == 0 && sz(s) != 1)
   	{
   		cout << "Impossible" << endl;
   		return 0;
   	}
   	else if(*s.begin() == 0)
   	{
   		cout << "Possible" << endl;
   		for(int i=0;i<n;i++) cout << 1 << " ";
   		cout << endl;
   		return 0;
   	}
   	ll count = 1;
   	for(auto it : s)
   	{
   		if(ma[it] % (n - it) != 0)
   		{
   			cout << "Impossible" << endl;
   			return 0;
   		}
   		else
   		{
   			val[it] = count;
   		}
   		count += ma[it] / (n - it);
   	}
   	vector<ll>ans;
   	for(int i=0;i<n;i++)
   	{
   		ans.pb(val[a[i]] + ma2[a[i]] / (n - a[i]));
   		ma2[a[i]]++;
   		m[ans[i]]++;
   	}
   	for(int i=0;i<sz(ans);i++)
   	{
   		if(m[ans[i]] != (n - a[i]))
   		{
   			cout << "Impossible" << endl;
   			return 0;
   		}
   	}
   	cout << "Possible" << endl;
   	for(auto it : ans) cout << it << " ";
   	cout << endl;
    return 0;
}  