#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

using namespace std;
using namespace  __gnu_pbds;



typedef tree<
pair<long long,int>,
null_type,
less<pair<long long , int > >,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;


#define loop(i,n) for(int i = 0;i < int(n);i++)
#define rloop(i,n) for(int i = int(n);i >= 0;i--)
#define range(i,a,b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1,v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1,v2,v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1,v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1,v2,v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3
#define endl '\n'

typedef vector<int> vi;
typedef vector<pair<int,int> > vii;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 2e5 + 5;
long long dp[N];
int n , x;

int main()
{

#ifndef ONLINE_JUDGE
	//freopen("in.in", "r", stdin);
	//freopen("out.in", "w", stdout);
#endif
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    long long pos = 0 , neg = 0;
    vector<pair<int,long long> > idx;
    cin >> n;
    loop(i,n){
        cin >> x;
        if(x < 0){
            idx.pb({i,0});
        }
    }

    loop(i,SZ(idx)){
        if(i == 0){
            idx[i].second += (idx[i].first+1);
            continue;
        }

        if(i == 1){
            idx[i].second += (idx[i].first-idx[i-1].first);
            continue;
        }

        idx[i].second = (idx[i].first-idx[i-1].first);
        idx[i].second += idx[i-2].second;
    }

    int j = 0;
    if(SZ(idx))range(i,idx[0].fr,n-1){
        if(j < SZ(idx) && i == idx[j].first){
            j++;
            continue;
        }
        //cout << j << endl;
        neg += idx[j-1].second;
    }

    for(auto p : idx)neg += p.sc;

    pos = 1LL * n * (n+1) / 2;
    pos -= neg;
    cout << neg << " " << pos << endl;


    return 0;
}
