#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;

void precalc() {
}

const int maxn = (int) 2e5 + 10;
int ps[maxn][2];
int n;

bool read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d%d", &ps[i][0], &ps[i][1]);
  }
  return 1;
}

int xs[2][maxn];

int its[maxn * 2];
int deg[maxn * 2];

int used[maxn];
char ans[maxn];

void solve() {
  for (int i = 0; i < n; ++i) {
    for (int it = 0; it < 2; ++it) {
      xs[it][i] = ps[i][it];
    }
  }
  int cnt[2];
  for (int it = 0; it < 2; ++it) {
    sort(xs[it], xs[it] + n);
    cnt[it] = unique(xs[it], xs[it] + n) - xs[it];
  }
  int n0 = cnt[0] + cnt[1];
  vector<vector<int> > es(n0), num(n0);
  for (int i = 0; i < n; ++i) {
    int r = lower_bound(xs[0], xs[0] + cnt[0], ps[i][0]) - xs[0];
    int c = lower_bound(xs[1], xs[1] + cnt[1], ps[i][1]) - xs[1];
    int s = r, t = c + cnt[0];
    es[s].pb(t), es[t].pb(s);
    num[s].pb(i), num[t].pb(i);
  }
  for (int i = 0; i < n0; ++i) {
    deg[i] = sz(es[i]);
    its[i] = 0;
  }
  for (int i = 0; i < n; ++i) {
    used[i] = 0;
    ans[i] = '.';
  }
  ans[n] = 0;
  for (int odd = 1; odd >= 0; --odd) {
    for (int i = 0; i < n0; ++i) {
      while (deg[i] > 0 && deg[i] % 2 == odd) {
        //eprintf("start %d\n", i);
        int v = i;
        int col = 0;
        while (deg[v] > 0) {
          //eprintf("%d\n", v);
          for (int &it = its[v]; it < sz(es[v]); ++it) {
            if (used[num[v][it]]) {
              continue;
            }
            int u = es[v][it];
            --deg[v], --deg[u];
            used[num[v][it]] = 1;
            //eprintf("move %d -> %d (%d)\n", v, u, num[v][it]);
            ans[num[v][it]] = col ? 'r' : 'b';
            v = u;
            col ^= 1;
            break;
          }
        }
      }
    }
  }
  printf("%s\n", ans);
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
