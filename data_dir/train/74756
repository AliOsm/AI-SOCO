#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

const int MAX = 200005;
const int RIGHT = 262144;
const int SIZE = 600000;
int N, M, R[MAX];
ll T[SIZE], L[SIZE];
vii Races[MAX];

ll query(int l, int r, int n, int a, int b)
{
    if(a>r || b<l) return -INFLL;
    if(a >= l && b <= r) return T[n];

    if(L[n] != 0)
    {
        T[2*n] += L[n];
        T[2*n+1] += L[n];
        L[2*n] += L[n];
        L[2*n+1] += L[n];
        L[n] = 0;
    }

    int mid = (a+b) / 2;
    ll q1 = query(l,r,2*n,a,mid);
    ll q2 = query(l,r,2*n+1,mid+1,b);

    return max(q1,q2);
}

void update(int l, int r, ll v, int n, int a, int b)
{
    if(a > r || b < l) return;

    if(a >= l && b <= r)
    {
        T[n] += v;
        L[n] += v;
        return;
    }

    if(L[n] != 0)
    {
        T[2*n] += L[n];
        T[2*n+1] += L[n];
        L[2*n] += L[n];
        L[2*n+1] += L[n];
        L[n] = 0;
    }

    int mid = (a+b) / 2;
    update(l,r,v,2*n,a,mid);
    update(l,r,v,2*n+1,mid+1,b);

    T[n] = max(T[2*n], T[2*n+1]);
}

int main()
{
    cin >> N >> M;
    f(i,1,N) scanf("%d", &R[i]);
    f(i,1,M)
    {
        int l,r,c;
        scanf("%d %d %d", &l, &r, &c);
        Races[r].pb({l,c});
    }

    f(i,1,N)
    {
        int offset = 210000-i;
        update(offset,offset,max(query(1,RIGHT,1,1,RIGHT),0ll),1,1,RIGHT);
        update(offset+1,RIGHT,-R[i],1,1,RIGHT);
        for(pii p : Races[i]) update(i-p.first+offset+1,RIGHT,p.second,1,1,RIGHT);
    }

    cout << max(0ll,query(1,RIGHT,1,1,RIGHT));
}
