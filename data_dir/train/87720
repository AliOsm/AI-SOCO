#include<bits/stdc++.h>
using namespace std;

const int K = 31;
long long p3[K+1];

int A, B;
long long dp[K][2][2];

long long solve(int n, bool sa, bool sb) {
    if (n==-1)          return 1;
    if (dp[n][sa][sb] != -1)    return dp[n][sa][sb];
    if (!sa && !sb)     return  dp[n][sa][sb] = p3[n+1];

    bool ba = A & (1<<n);
    bool bb = B & (1<<n);

    dp[n][sa][sb] = 0;
    dp[n][sa][sb] += solve(n-1, sa & !ba, sb & !bb);
    if (!sa || ba)  dp[n][sa][sb] += solve(n-1, sa, sb & !bb);
    if (!sb || bb)  dp[n][sa][sb] += solve(n-1, sa & !ba, sb);
    return dp[n][sa][sb];
}

long long solve(int A, int B) {
    memset(dp, -1, sizeof dp);
    ::A = A;
    ::B = B;
    return solve(K-1, 1, 1);
}

int main() {
    int t;
    cin>>t;

    p3[0] = 1;
    for (int i=1; i<=K; i++)     p3[i] = (p3[i-1] * 3);

    while (t--) {
        int l, r;
        cin>>l>>r;

        long long ans = solve(r, r);
        if (l > 0)  ans = ans - 2*solve(l-1, r) + solve(l-1, l-1);
        cout<<ans<<endl;
    }

}
