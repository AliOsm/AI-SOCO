#include <bits/stdc++.h>

using namespace std;

int main() {
    std::ios::sync_with_stdio(false); 
    cin.tie(nullptr);
    
    int n, m;
    cin >> n >> m;
    vector<string> t(n);
    for (int i = 0; i < n; ++i) {
        cin >> t[i];
    }
    bool swapped = false;
    vector<char> s{'A', 'C', 'G', 'T'};
    int mn_cost = n * m + 1;
    vector<string> res(n, string(m, ' ')); 
    do {
        {
            vector<string> tmp(n, string(m, ' '));
            int cur_cost = 0;
            for (int i = 0; i < n; ++i) {
                if (i % 2 == 0) {
                    cur_cost += (s[1] != t[i][0]) + (s[3] != t[i][1]);
                    tmp[i][0] = s[1];
                    tmp[i][1] = s[3];
                } else {
                    cur_cost += (s[0] != t[i][0]) + (s[2] != t[i][1]);
                    tmp[i][0] = s[0];
                    tmp[i][1] = s[2];
                }
            }
            for (int j = 2; j < m; ++j) {
                char a, b;
                if (j % 2 == 0) {
                    a = s[0];
                    b = s[1];
                } else {
                    a = s[2];
                    b = s[3];
                }
                int tmp_cost1 = 0;
                for (int i = 0; i < n; ++i) {
                    if (i % 2 == 0) {
                        tmp_cost1 += (b != t[i][j]);
                    } else {
                        tmp_cost1 += (a != t[i][j]);
                    }
                }
                swap(a, b);
                int tmp_cost2 = 0;
                for (int i = 0; i < n; ++i) {
                    if (i % 2 == 0) {
                        tmp_cost2 += (b != t[i][j]);
                    } else {
                        tmp_cost2 += (a != t[i][j]);
                    }
                }
                if (tmp_cost1 < tmp_cost2) {
                    swap(a, b);
                }
                cur_cost += min(tmp_cost1, tmp_cost2);
                for (int i = 0; i < n; ++i) {
                    if (i % 2 == 0) {
                        tmp[i][j] = b;
                    } else {
                        tmp[i][j] = a;
                    }
                }
            }
            if (cur_cost < mn_cost) {
                mn_cost = cur_cost;
                res = tmp;
            }
        }
        {
            vector<string> tmp(n, string(m, ' '));
            int cur_cost = 0;
            for (int i = 0; i < n; ++i) {
                char a, b;
                if (i % 2 == 0) {
                    a = s[1];
                    b = s[3];
                } else {
                    a = s[0];
                    b = s[2];
                }
                int tmp_cost1 = 0;
                for (int j = 0; j < m; ++j) {
                    if (j % 2 == 0) {
                        tmp_cost1 += (b != t[i][j]);
                    } else {
                        tmp_cost1 += (a != t[i][j]);
                    }
                }
                swap(a, b);
                int tmp_cost2 = 0;
                for (int j = 0; j < m; ++j) {
                    if (j % 2 == 0) {
                        tmp_cost2 += (b != t[i][j]);
                    } else {
                        tmp_cost2 += (a != t[i][j]);
                    }
                }
                if (tmp_cost1 < tmp_cost2) {
                    swap(a, b);
                }
                cur_cost += min(tmp_cost1, tmp_cost2);
                for (int j = 0; j < m; ++j) {
                    if (j % 2 == 0) {
                        tmp[i][j] = b;
                    } else {
                        tmp[i][j] = a;
                    }
                }
            }
            if (cur_cost < mn_cost) {
                mn_cost = cur_cost;
                res = tmp;
            }
        }
    } while (next_permutation(begin(s), end(s)));

    for (const auto &str : res) {
        cout << str << "\n";
    }

    return 0;
}