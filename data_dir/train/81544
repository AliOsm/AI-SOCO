/*
      HET PAGHADAR
      DA-IICT
      @HET262
*/
 
#include<bits/stdc++.h>
using namespace std;
 
typedef long double ld;
typedef long long ll;
 
typedef vector<ll> vec;
#define INF LLONG_MAX
 
#define int long long int
#define P pair<ll,ll>
 
#define ff first
#define ss second
 
#define FAST ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
 
#define N 100005
#define MOD 1000000007

ll binaryExponentiation( ll x , ll n )
{
    if( n == 0 )
        return 1;
    if( n%2 == 0 )
        return binaryExponentiation( ( x % MOD )*( x % MOD ) , n/2 ) % MOD ;
    else
        return ( (x % MOD )* binaryExponentiation( ( x % MOD )*( x % MOD ) , ( n-1 )/2 ) % MOD ) % MOD ;
}

bool isprime(ll n)
{
      for(int i=2;i*i<=n;i++)
      {
            if(n%i==0)
                  return false;
      }
      return true;
}

signed main()
{
      FAST;
      
      ll x,n,ans=1;
      cin>>x>>n;
      
      vec p,prime;
      bool pp[N];
      
      memset(pp,true,sizeof(pp));
      
      for(int i=2;i*i<=x;i++)
      {
            if(x%i==0)
            {
                  p.push_back(i);
                  if(x!=i*i)
                  p.push_back(x/i);
            }
      }
      
      
      for(int i=2;i<N;i++)
      {
            if(pp[i])
            {
                  for(int j=i+i;j<N;j+=i)
                        pp[j]=false;
            }
      }
      
      for(auto X:p)
      {
            if(X<N)
            {
                  if(pp[X])
                        prime.push_back(X);
            }
            else
            {
                  if(isprime(X))
                        prime.push_back(X);
            }
      }
      
      if(prime.size()==0)
            prime.push_back(x);
      
      for(auto X:prime)
      {
            
            ll cc=0,nn=n;
            while(nn>1)
            {
                  cc=(cc+(nn/X)%(MOD-1))%(MOD-1);
                  nn/=X;
            }
            
            ans = ( ans * binaryExponentiation(X,cc) ) % MOD ;
            
      }
      
      cout<<ans;
      
      
      
      
}