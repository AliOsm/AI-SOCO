#include <bits/stdc++.h>
using namespace std;
using namespace std::chrono;

#define all(x) begin(x), end(x)
#define sz(x) (ll)(x).size()

using ll = int;
using ld = long double;

//memory limit??
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    ll n, m, n1, n2, n3;
    cin >> n >> m >> n1 >> n2 >> n3;
    vector<vector<ll>> adj(n);
    for (ll i = 0; i < m; i++) {
        ll a, b;
        cin >> a >> b;
        a--;
        b--;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    vector<ll> color(n, -1);
    vector<vector<ll>> comp;
    vector<ll> zeros;
    for (ll i = 0; i < n; i++) {
        if (color[i] < 0) {
            comp.push_back({});
            zeros.push_back(0);
            color[i] = 0;
            vector<ll> s = {i};
            while (!s.empty()) {
                ll c = s.back();
                s.pop_back();
                comp.back().push_back(c);
                if (color[c] == 0) zeros.back()++;
                for (ll x : adj[c]) {
                    if (color[x] < 0) {
                        color[x] = color[c] ^ 1;
                        s.push_back(x);
                    } else if (color[x] != (color[c] ^ 1)) {
                        cout << "NO" << endl;
                        return 0;
                    }
                }
            }
        }
    }
    vector<vector<pair<ll, ll>>> dp(sz(comp) + 1, vector<pair<ll,ll>>(n2 + 1, {-2, -2}));
    dp[0][0] = {-1, -1};
    for (ll i = 0; i < sz(comp); i++) {
        ll z = zeros[i];
        ll o = sz(comp[i]) - z;
        for (ll j = n2; j >= 0; j--) {
            if (dp[i][j].first != -2) {
                if (j + z <= n2) dp[i+1][j + z] = {i, 0};
                if (j + o <= n2) dp[i+1][j + o] = {i, 1};
            }
        }
    }
    if (dp[sz(comp)][n2].first == -2) {
        cout << "NO" << endl;
    } else {
        cout << "YES" << endl;
        for (ll j = sz(comp); n2 > 0;) {
            ll x = zeros[dp[j][n2].first];
            if (dp[j][n2].second == 1) {
                x = sz(comp[dp[j][n2].first]) - x;
            } else {
                for (ll y : comp[dp[j][n2].first]) {
                    color[y] ^= 1;
                }
            }
            j = dp[j][n2].first;
            n2 -= x;
        }
        for (ll& x : color) {
            if (x == 0) {
                if (n1 > 0) n1--;
                else x = 2;
            }
            cout << x+1;
        }
        cout << endl;
    }

}
