#include<bits/stdc++.h>
using namespace std;
const int MAXN=2e5+5;
typedef long long ll;
struct node
{
	int id;
	ll x;
	node(){};
	node(int _id,ll _x):id(_id),x(_x){}
	bool operator < (const node &a)const
	{
		return x>a.x;
	}
};
ll ans[MAXN],mx=-1e9-5,f1,mi=1e9+5,f2,cnt1=0,cnt2=0,t[MAXN];
bool flag[MAXN];
int main()
{
	int n;
	ll x,k;
	priority_queue<node> Q;
	scanf("%d%I64d%I64d",&n,&k,&x);
	for(int i=1;i<=n;i++)
	{
		scanf("%I64d",&t[i]);
		if(t[i]>=0)
		{
			if(mi>t[i])
			{
				mi=t[i];
				f1=i;
			}
			cnt1++;
			flag[i]=true;
		}
		else
		{
			if(mx<t[i])
			{
				mx=t[i];
				f2=i;
			}
			cnt2++;
			flag[i]=false;
		}
	}
	if(!(cnt2&1))
	{
		if(-mx<=mi)
		{
			ll tt=-mx,tk;
			if(tt<=k*x)
			{
				tk=tt/x;
				if(tk<k)
				{
					tk++;
				}
				mx=mx+tk*x;
				k-=tk;
				t[f2]=mx;
				flag[f2]=true;
			}
			else
			{
				mx=mx+k*x;
				k=0;
				t[f2]=mx;
			}
		}
		else
		{
			ll tt=mi,tk;
			if(tt<=k*x)
			{
				tk=tt/x;
				if(tk<k)
				{
					tk++;
				}
				mi=mi-tk*x;
				k-=tk;
				t[f1]=mi;
				flag[f1]=false;
			}
			else
			{
				mi=mi-k*x;
				k=0;
				t[f1]=mi;
			}
		}
	}
	for(int i=1;i<=n;i++)
	{
		if(flag[i])
			Q.push(node(i,t[i]));
		else
			Q.push(node(i,-t[i]));
	}
	while(k--)
	{
		node tt;
		tt=Q.top();
		Q.pop();
		Q.push(node(tt.id,tt.x+x));
	}
	while(!Q.empty())
	{
		node tt;
		tt=Q.top();
		Q.pop();
		ans[tt.id]=tt.x;
	}
	for(int i=1;i<=n;i++)
	{
		if(flag[i]==false)
		{
			ans[i]=-ans[i];
		}
		printf("%I64d ",ans[i]);
	}
}