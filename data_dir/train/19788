#include <bits/stdc++.h>

using namespace std;
using ll = long long;

multiset <string> zp(int l, int r) {
    cout << "? " << l + 1 << " " << r + 1 << endl;
    multiset<string> ret;
    int sz = r - l + 1;
    for (int i = 0; i < sz * (sz - 1) / 2 + sz; ++i) {
        string s;
        cin >> s;
        sort(s.begin(), s.end());
        ret.insert(s);
    }
    return ret;
}

int n;
const int N = 150;
string len[N];

int main() {
    ios_base::sync_with_stdio(0);

    cin >> n;
   
    if (n <= 3) {
        string ans;
        for (int i = 0; i < n; ++i) {
            auto f = zp(i, i);
            ans += *f.begin();
        }
        cout << "! " << ans << endl;
        return 0;
    }

    auto fi1 = zp(0, n - 1);
    auto fi2 = zp(1, n - 1);

    for (auto i : fi2) fi1.erase(fi1.find(i));

    for (auto i : fi1) len[i.size()] = i;

    string res;
    res.assign(n, '#');

    for (int i = 1; i + 1 <= n; ++i) {
        map<char, int> calc1, calc2;
        for (auto c : len[i]) calc1[c]++;
        for (auto c : len[i + 1]) calc2[c]++;
        for (auto j : calc2) {
            if (calc1[j.first] != j.second) {
                res[i] = j.first;
                break;
            }
        }
    }
    res[0] = len[1][0];

    cout << "! " << res << endl;
    

    return 0;
}
