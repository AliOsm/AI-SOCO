#include <cstdio>
#include <iostream>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
#include <memory.h>
#include <complex>
#include <time.h>
#pragma comment(linker, "/STACK:100000000")
using namespace std;

#define mp make_pair
#define pb push_back
#define ll long long
#define sz(x) (int)(x).size()


int main() {
    //freopen("input.txt","rt",stdin);
    //freopen("cyclic.in","rt",stdin);
    //freopen("cyclic.out","wt",stdout);

	string s;
	cin >> s;
	string t;
	cin >> t;
	vector<pair<int, int> > res;

	int p = 0;
	while(p != sz(t)) {
		vector<int> pos;
		for(int i = 0; i < sz(s); i++) {
			if(s[i] == t[p]) pos.pb(i); 
		}
		if(sz(pos) == 0) {
			printf("-1\n");
			return 0;
		}
		int len = 0;
		int bestl = pos[0], bestr = pos[0];
		for(int np = p + 1; np < sz(t); np++) {
			len++;
			vector<int> newpos;
			for(int j = 0; j < sz(pos); j++) {
				int idx = pos[j] ;
				if(idx + len >= sz(s)) continue;
				if(s[idx+len] == t[p+len]) newpos.pb(idx);
			}
			pos = newpos;
			if(sz(pos) == 0) break;
			bestl = pos[0], bestr = pos[0] + len;
		}

		
		pos.clear();
		for(int i = 0; i < sz(s); i++) {
			if(s[i] == t[p]) pos.pb(i); 
		}
		if(sz(pos) == 0) {
			printf("-1\n");
			return 0;
		}
		len = 0;
		int bestl2 = pos[0], bestr2 = pos[0];
		for(int np = p + 1; np < sz(t); np++) {
			len++;
			vector<int> newpos;
			for(int j = 0; j < sz(pos); j++) {
				int idx = pos[j] ;
				if(idx - len < 0) continue;
				if(s[idx-len] == t[p+len]) newpos.pb(idx);
			}
			pos = newpos;
			if(sz(pos) == 0) break;
			bestl2 = pos[0] - len, bestr2 = pos[0];
		}
		if(bestr - bestl < bestr2 - bestl2) {
			res.pb(mp(bestr2, bestl2));
			p += (bestr2 - bestl2 + 1);
		}
		else {
			res.pb(mp(bestl, bestr));
			p += (bestr - bestl + 1);
		}
	}
	printf("%d\n", sz(res));
	for(int i = 0; i < sz(res); i++) printf("%d %d\n", res[i].first + 1, res[i].second + 1);

    return 0;
}