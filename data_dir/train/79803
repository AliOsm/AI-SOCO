//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
#define sz(x) (int)(x).size()
#define mem(a,v) memset((a), (v), sizeof (a))
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int _i = 0; _i < (n); _i++) ni(a[_i])
#define nal(a, n) for (int _i = 0; _i < (n); _i++) nl(a[_i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pil pair<int, long long>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vil vector<pil>
#define vll vector<pll>
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> oset;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 2e3 + 5;
const double eps = 1e-9;
vector<int> ar[MAXN];
vector<pii> adj[MAXN];
int vis[MAXN*MAXN], ans[MAXN], visV[MAXN];
int n, k;
 
bool ask(int i) {
  char c;
  printf("? %d\n", i); fflush(stdout);
  scanf(" %c", &c);
  return c == 'Y';
}
 
void ask(vector<int>& tmp) {
  for (int i: tmp) {
    if (!ans[i]) continue;
    if (ask(i))
      ans[i] = 0;
  }
}
 
void reset() {
  printf("R\n"); fflush(stdout);
}
 
void dfs(int u) {
  ask(ar[u]);
  visV[u] = 1;
  for (auto v: adj[u]) {
    if (vis[v.se] || visV[v.fi])
      continue;
    vis[v.se] = 1;
    dfs(v.fi);
    return;
  }
}
 
int main() {
  scanf("%d %d", &n, &k);
  mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
  int cnt = 0;
  for (int i = 1; i <= n; i++) {
    if ((i-1) % ((k+1)/2) == 0)
      cnt++;
    if (!ask(i)) {
      ar[cnt].pb(i);
      ans[i] = 1;
    }
  }
  reset();
  for (int i = 1, t = 0; i <= cnt; i++) {
    for (int j = i+2; j <= cnt; j++, t++) {
      adj[i].pb({j,t});
      adj[j].pb({i,t});
    }
    shuffle(adj[i].begin(), adj[i].end(), rng);
  }
  for (int i = 1; i <= cnt; i++) {
    for (auto j: adj[i]) {
      if (vis[j.se]) continue;
      for (int k = 1; k <= cnt; k++)
        visV[k] = 0;
      vis[j.se] = 1;
      ask(ar[i]); visV[i] = 1;
      dfs(j.fi);
      reset();
    }
  }
  cnt = 0;
  for (int i = 1; i <= n; i++)
    if (ans[i])
      cnt++;
  printf("! %d\n", cnt);
  return 0;
}