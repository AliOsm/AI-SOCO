#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define ndl '\n'
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<int, ll> pil;
typedef pair<ll, int> pli;
typedef pair<int, ull> piu;
typedef vector<vector<int>> matrix;

const ll INF = 1e18 + 123;
const ld EPS = 1e-9;
const int inf = 1e9 + 123;
const int MOD = 1e9 + 7;
const int N = 2e5 + 123;
const int M = 1e6 + 123;
const double pi = acos(-1.0);
const int dx[] = {0, 0, 1, -1};
const int dy[] = {1, -1, 0, 0};

int a[N], l[N], r[N], timer, h[N];
vector<int> d[N], g[N];

void dfs(int v, int p = 0){
    l[v] = ++timer;
    h[v] = h[p]+1;
    d[h[v]].pb(v);

    for (int to : g[v]){
        if (to != p){
            dfs(to, v);
        }
    }
    r[v] = timer;
//    cout << v << " "<< h[v]<< " " << l[v] << " " << r[v] << ndl;
}

int L, R;

bool check(int i){
    if (!i) return 1;
    //cout << L << " " << R << " " << i << endl;
    int low = 0, high = sz(d[i]);
    while (high - low > 1){
        int mid = low + high >> 1;
        if (l[d[i][mid]] < L){
            low = mid;
        }
        else{
            high = mid;
        }
    }
    int p = d[i][low];
    if (l[p] < L && R <= r[p]){
        L = l[p];
        R = r[p];
        return 1;
    }
    return 0;
}

void solve(){
    int n, m;
    cin >> n >> m;
    for (int i = 1, u, v; i < n; i++){
        cin >> u >> v;
        g[u].pb(v);
        g[v].pb(u);
    }
    dfs(1);
    while (m--){
        int k;
        cin >> k;
        for (int i = 1; i <= k; i++){
            cin >> a[i];
        }
        sort(a+1, a+1+k, [&](int i, int j){
                return h[i] > h[j];
        });
        L = l[a[1]], R = r[a[1]];
        bool ok = 1;
        for (int i = 2; i <= k; i++){
            if (h[a[i]] != h[a[i-1]]){
                if (!check(h[a[i-1]]-1)){
                    ok = 0;
                    break;
                }
            }
            L = min(L, l[a[i]]);
            R = max(R, r[a[i]]);

        }
        ok &= check(h[a[k]]-1);
        if (ok) cout << "YES";
        else cout << "NO";
        cout << ndl;
    }
}

int main(){
    #ifdef KAZAKH
        freopen("input.txt", "r", stdin);
    #endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t = 1;
    //cin >> t;
    for (int i = 1; i <= t; i++){
        //cout << "case #" << i << ": ";
        solve();
    }
    return 0;
}
