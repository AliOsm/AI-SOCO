/**
 * Dont raise your voice, improve your argument.
 * --Desmond Tutu
 */

#include <bits/stdc++.h>
using namespace std;

#define DEBUG
#ifndef DEBUG
#define endl "\n"
#define log(args...)
#else
#define log(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); logf(_it, args); cout<<endl; }
void logf(istream_iterator<string> it) {
}
template<typename T, typename ... Args>
void logf(istream_iterator<string> it, T a, Args ... args) {
    cout << *it << "=" << a << " ";
    logf(++it, args...);
}
#endif

const double PI = acos(-1);
typedef long long ll;
#define fori(n) for(int i=0; i<(n); i++)

#define cins(s) string s; cin>>s;
#define cini(i) int i; cin>>i;
#define cinll(l) ll l; cin>>l;
#define cind(d) double d; cin>>d;
#define cinai(a, n) vi a(n); fori(n) { cin>>a[i]; }
#define cinall(a, n) vll a(n); fori(n) { cin>>a[i]; }
#define cinas(s, n) vs s(n); fori(n) { cin>>s[i]; }
#define cinad(a, n) vd a(n); fori(n) { cin>>a[i]; }

typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<double> vd;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<string> vs;
typedef vector<ll> vll;

/* We run over doubled array.
 * We maintain list with "unresolved"
 * indexes.
 * For every position we mark all 
 * resolved with position before.
 * So we get a list of pairs which 
 * is ans in the second half.
 */
void solve() {
    cini(n);
    vi a(3*n);
    for(int i=0; i<n; i++) {
        cin>>a[i];
        a[i+n]=a[i];
        a[i+n+n]=a[i];
    }

    vi res(3*n, -1);   // res[i]==position where i will be ended
    set<pii> pq;        // current unresolved positions by value
    queue<int> q;       // current unresolved positions by index

    for(int i=0; i<3*n; i++) {
        while(pq.size()>0 && -pq.begin()->first>a[i]*2) {
            int residx=pq.begin()->second;
            while(true) {
                int r=q.front();
                q.pop();
                res[r]=i;
                pq.erase({-a[r], r});
                if(r==residx)
                    break;
            }
        }
        pq.insert({-a[i], i});
        q.push(i);
        assert(pq.size()==q.size());
    }

    for(int i=0; i<n; i++) {
        if(res[i]==-1)
            cout<<-1<<" ";
        else
            cout<<res[i]-i<<" ";
    }
    cout<<endl;
}

int main() {
    cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    solve();
}

