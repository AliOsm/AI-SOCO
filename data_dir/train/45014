#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000000000000.0
#define i64 long long int
#define eps (1e-100)
#define xx first
#define yy second
#define ln 17
#define off 100002

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<int,int> pii;

int ones = 0 , zeroes = 0 ;
string t ;

vector<int> prefix_function (string s) {
	int n = (int) s.length();
	vector<int> pi (n);
	for (int i=1; i<n; ++i) {
		int j = pi[i-1];
		while (j > 0 && s[i] != s[j])
			j = pi[j-1];
		if (s[i] == s[j])  ++j;
		pi[i] = j;
	}
	return pi;
}

char ans[500005] , s[500005] ;

int main()
{
    int i , j , k , l, m , n ;

    scanf("%s",s) ;

    for(i=0 ; s[i]!='\0' ; i++)
    {
        if( s[i]=='1' ) ones++ ;
        else zeroes++ ;
    }

    scanf("%s",s) ;

    t = s ;

    vector <int> res = prefix_function( t ) ;


    int len = 0 , fl = 1 ;
    while( fl )
    {
        if( len == 0 ) i = 0 ;
        else i = res.back() ;
        while( i <(int)t.size() )
        {
            if( t[i]=='0' )
            {
                if( zeroes>0 ) ans[len++] = '0' , zeroes-- ;
                else{
                    fl = 0 ;
                    break ;
                }
            }
            if( t[i]=='1' )
            {
                if( ones>0 ) ans[len++] = '1' , ones-- ;
                else{
                    fl = 0 ;
                    break ;
                }
            }
            i++ ;
        }
    }

    while( zeroes!=0 )
    {
        ans[len++] = '0' ;
        zeroes-- ;
    }

    while( ones!=0 )
    {
        ans[len++] = '1' ;
        ones-- ;
    }

    ans[len] = '\0' ;

    printf("%s\n",ans) ;

    return 0 ;
}
