#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<ll> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<ll, ll> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;

int n;
vi pl, prnts;
vvi adj;
vii nd;
pii solve(int node, int prnt) {
	prnts[node] = prnt;
	ll t = pl[node], mx = INT_MIN;
	pii tmp;
	for (int i = 0; i < adj[node].size(); i++)
		if (adj[node][i] != prnt)
		{
			tmp = solve(adj[node][i], node);
			t += tmp.first, mx = max(mx, tmp.second);
		}
	mx = max(mx, t);
	return nd[node] = pii(t, mx);
}

bool cmp(int a, int b) {
	return nd[a].second > nd[b].second;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	//ifstream cin("input.txt");
	cin >> n;
	pl.assign(n, 0);
	prnts.assign(n, -1);
	nd.assign(n, pii());
	adj.assign(n, vi());
	for (int i = 0; i < n; i++)
		cin >> pl[i];
	for (int i = 0; i < n - 1; i++)
	{
		int u, v; cin >> u >> v;
		u--, v--;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	solve(0, -1);
	ll r = LLONG_MIN;
	bool f = false;
	for (int i = 0; i < n; i++)
		if (i == 0 && adj[i].size() >= 2 || adj[i].size() >= 3)
		{
			f = true;
			sort(adj[i].begin(), adj[i].end(), cmp);
			if (adj[i][0] == prnts[i] || adj[i][1] == prnts[i])
				r = max(r, nd[adj[i][0]].second + nd[adj[i][1]].second + nd[adj[i][2]].second - nd[prnts[i]].second);
			else
				r = max(r, nd[adj[i][0]].second + nd[adj[i][1]].second);
		}
	if (f)
		cout << r << endl;
	else
		cout << "Impossible" << endl;
	//cin.ignore(), cin.get();
}