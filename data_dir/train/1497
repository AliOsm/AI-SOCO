#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef pair<int,int> pii;
typedef pair<double, double> pdd;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

//#define PB push_back
#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double PI = acos(-1);
const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007
//#define harmonic(n) 0.57721566490153286l+log(n)

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))
#define sqr(a) ((a) * (a))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

typedef vector<int>::iterator vit;
typedef set<int>::iterator sit;

inline bool checkBit(ll n, int i) { return n&(1LL<<i); }
inline ll setBit(ll n, int i) { return n|(1LL<<i);; }
inline ll resetBit(ll n, int i) { return n&(~(1LL<<i)); }

int dx[] = {0, 0, +1, -1};
int dy[] = {+1, -1, 0, 0};
//int dx[] = {+1, 0, -1, 0, +1, +1, -1, -1};
//int dy[] = {0, +1, 0, -1, +1, -1, +1, -1};

inline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }
inline bool isLeapYear(ll year) { return (year%400==0) || (year%4==0 && year%100!=0); }
inline void normal(ll &a) { a %= MOD; (a < 0) && (a += MOD); }
inline ll modMul(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a*b)%MOD; }
inline ll modAdd(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a+b)%MOD; }
inline ll modSub(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); a -= b; normal(a); return a; }
inline ll modPow(ll b, ll p) { ll r = 1; while(p) { if(p&1) r = modMul(r, b); b = modMul(b, b); p >>= 1; } return r; }
inline ll modInverse(ll a) { return modPow(a, MOD-2); }
inline ll modDiv(ll a, ll b) { return modMul(a, modInverse(b)); }

/*
bool seive[1010000];
vi prime;

void seiveGen(int limit) {
    limit += 100;
    int sqrtn = sqrt(limit);
    for(int i = 3; i <= sqrtn; i += 2) {
            if(!seive[i>>1]) {
                    for(int j = i * i; j < limit; j += i + i) {
                            seive[j>>1] = 1;
                    }
            }
    }
    prime.PB(2);
    for(int i = 3; i < limit; i += 2) {
            if(!seive[i>>1]) prime.PB(i);
    }
}
*/

//
//debug
#ifdef mohaimin
template < typename F, typename S >
ostream& operator << ( ostream& os, const pair< F, S > & p ) {
            return os << "(" << p.first << ", " << p.second << ")";
}

template < typename T >
ostream &operator << ( ostream & os, const vector< T > &v ) {
            os << "{";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "}";
}

template < typename T >
ostream &operator << ( ostream & os, const set< T > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "]";
}

template < typename T >
ostream &operator << ( ostream & os, const multiset< T > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "]";
}

template < typename F, typename S >
ostream &operator << ( ostream & os, const map< F, S > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << it -> first << " = " << it -> second ;
                                            }
                    return os << "]";
}

#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)

clock_t tStart = clock();
#define timeStamp dbg("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)

void faltu () {
            cerr << endl;
}

template <typename T>
void faltu( T a[], int n ) {
            for(int i = 0; i < n; ++i) cerr << a[i] << ' ';
                cerr << endl;
}

template <typename T, typename ... hello>
void faltu( T arg, const hello &... rest) {
            cerr << arg << ' ';
                faltu(rest...);
}
#else
#define dbg(args...)
#endif // mohaimin

char ch[100][100];

int main()
{
	optimize();
	int x, y;
	string uppleft[3];
	string uppmid[3];
	string uppright[3];
	string centleft[3];
	string centright[3];
	string centmid[3];
	string lowleft[3];
	string lowmid[3];
	string lowright[3];
	
	
	cin >> uppleft[0];
	cin >> uppmid[0];
	cin >> uppright[0];
	
	cin >> uppleft[1];
	cin >> uppmid[1];
	cin >> uppright[1];
	
	cin >> uppleft[2];
	cin >> uppmid[2];
	cin >> uppright[2];
	
	
	cin >> centleft[0];
	cin >> centmid[0];
	cin >> centright[0];
	
	cin >> centleft[1];
	cin >> centmid[1];
	cin >> centright[1];
	
	cin >> centleft[2];
	cin >> centmid[2];
	cin >> centright[2];
	
	
	cin >> lowleft[0];
	cin >> lowmid[0];
	cin >> lowright[0];
	
	cin >> lowleft[1];
	cin >> lowmid[1];
	cin >> lowright[1];
	
	cin >> lowleft[2];
	cin >> lowmid[2];
	cin >> lowright[2];
	
/*	for( int i = 1; i <= 3; ++i )
	{
		for( int j = 1; j <= 3; ++j )
		{
			ch[i][j] = uppleft[i-1][j-1];
		}
	}
	
	//for( int i = 0; i < 3; ++i ) cin >> uppmid[i];
	for( int i = 1; i <= 3; ++i )
	{
		for( int j = 4; j <= 6; ++j )
		{
			ch[i][j] = uppmid[i-1][j-1];
		}
	}
	
	//for( int i = 0; i < 3; ++i ) cin >> uppright[i];
	for( int i = 1; i <= 3; ++i )
	{
		for( int j = 7; j <= 9; ++j )
		{
			ch[i][j] = uppright[i-1][j-1];
		}
	}
	
	for( int i = 0; i < 3; ++i ) cin >> centleft[i];
	for( int i = 4; i <= 6; ++i )
	{
		for( int j = 1; j <= 3; ++j )
		{
			ch[i][j] = centleft[i-1][j-1];
		}
	}
	
	for( int i = 0; i < 3; ++i ) cin >> centmid[i];
	for( int i = 4; i <= 6; ++i )
	{
		for( int j = 4; j <= 6; ++j )
		{
			ch[i][j] = centmid[i-1][j-1];
		}
	}
	
	for( int i = 0; i < 3; ++i ) cin >> centright[i];
	for( int i = 4; i <= 6; ++i )
	{
		for( int j = 7; j <= 9; ++j )
		{
			ch[i][j] = centright[i-1][j-1];
		}
	}
	
	for( int i = 0; i < 3; ++i ) cin >> lowleft[i];
	for( int i = 7; i <= 9; ++i )
	{
		for( int j = 1; j <= 3; ++i )
		{
			ch[i][j] = lowleft[i-1][j-1];
		}
	}
	
	for( int i = 0; i < 3; ++i ) cin >> lowmid[i];
	for( int i = 7; i <= 9; ++i )
	{
		for( int j = 4; j <= 6; ++j )
		{
			ch[i][j] = lowmid[i-1][j-1];
		}
	}
	
	for( int i = 0; i < 3; ++i ) cin >> lowright[i];
	for( int i = 7; i <= 9; ++i )
	{
		for( int j = 7; j <= 9; ++j )
		{
			ch[i][j] = lowright[i-1][j-1];
		}
	}*/
	
	
	/*cout << uppleft[0] << " ";
		cout << uppmid[0] << " ";
		cout << uppright[0] << endl;
		
		cout << uppleft[1] << " ";
		cout << uppmid[1] << " ";
		cout << uppright[1] << endl;
		
		cout << uppleft[2] << " ";
		cout << uppmid[2] << " ";
		cout << uppright[2] << endl << endl;
		
		
		cout << centleft[0] << " ";
		cout << centmid[0] << " ";
		cout << centright[0] << endl;
		
		cout << centleft[1] << " ";
		cout << centmid[1] << " ";
		cout << centright[1] << endl;
		
		cout << centleft[2] << " ";
		cout << centmid[2] << " ";
		cout << centright[2] << endl << endl;
		
		
		cout << lowleft[0] << " ";
		cout << lowmid[0] << " ";
		cout << lowright[0] << endl;
		
		cout << lowleft[1] << " ";
		cout << lowmid[1] << " ";
		cout << lowright[1] << endl;
		
		cout << lowleft[2] << " ";
		cout << lowmid[2] << " ";
		cout << lowright[2] << endl << endl;
		* */
	
	cin >> x >> y;
	int row = x % 3;
	int col = y % 3;
	if( row == 0 ) row = 3;
	if( col == 0 ) col = 3;
	//char obj;
	//if( ch[x][y] == 'x' ) obj = 'o';
	//else obj = 'x';
	
	bool ok = 0;
	
	//cout << -1;
	
	if( row == 1 && col == 1 ) 
	{
		for( int i = 0; i < 3; ++i )
		{
			for( int j = 0; j < 3; ++j )
			{
				if( uppleft[i][j] == '.' ) 
				{
					ok = 1;
					uppleft[i][j] = '!';
				}
			}
		}
	}
	else if( row == 1 && col == 2 ) 
	{
		for( int i = 0; i < 3; ++i )
		{
			for( int j = 0; j < 3; ++j )
			{
				if( uppmid[i][j] == '.' ) 
				{
					ok = 1;
					uppmid[i][j] = '!';
				}
			}
		}
	}
	else if( row == 1 && col == 3 ) 
	{
		for( int i = 0; i < 3; ++i )
		{
			for( int j = 0; j < 3; ++j )
			{
				if( uppright[i][j] == '.' ) 
				{
					ok = 1;
					uppright[i][j] = '!';
				}
			}
		}
	}
	else if( row == 2 && col == 1 ) 
	{
		for( int i = 0; i < 3; ++i )
		{
			for( int j = 0; j < 3; ++j )
			{
				if( centleft[i][j] == '.' ) 
				{
					ok = 1;
					centleft[i][j] = '!';
				}
			}
		}
	}
	else if( row == 2 && col == 2 ) 
	{
		for( int i = 0; i < 3; ++i )
		{
			for( int j = 0; j < 3; ++j )
			{
				if( centmid[i][j] == '.' ) 
				{
					ok = 1;
					centmid[i][j] = '!';
				}
			}
		}
	}
	else if( row == 2 && col == 3 ) 
	{
		for( int i = 0; i < 3; ++i )
		{
			for( int j = 0; j < 3; ++j )
			{
				if( centright[i][j] == '.' ) 
				{
					ok = 1;
					centright[i][j] = '!';
				}
			}
		}
	}
	else if( row == 3 && col == 1 ) 
	{
		for( int i = 0; i < 3; ++i )
		{
			for( int j = 0; j < 3; ++j )
			{
				if( lowleft[i][j] == '.' ) 
				{
					ok = 1;
					lowleft[i][j] = '!';
				}
			}
		}
	}
	else if( row == 3 && col == 2 ) 
	{
		for( int i = 0; i < 3; ++i )
		{
			for( int j = 0; j < 3; ++j )
			{
				if( lowmid[i][j] == '.' ) 
				{
					ok = 1;
					lowmid[i][j] = '!';
				}
			}
		}
	}
	else if( row == 3 && col == 3 ) 
	{
		for( int i = 0; i < 3; ++i )
		{
			for( int j = 0; j < 3; ++j )
			{
				if( lowright[i][j] == '.' ) 
				{
					ok = 1;
					lowright[i][j] = '!';
				}
			}
		}
	}
	//cout << -1;
	
	dbg(ok);
	
	if( !ok ) 
	{
		for( int i = 0; i < 3; ++i )
		{
			for( int j = 0; j < 3; ++j )
			{
				if( lowleft[i][j] == '.' ) lowleft[i][j] = '!';
				if( lowmid[i][j] == '.' ) lowmid[i][j] = '!';
				if( lowright[i][j] == '.' ) lowright[i][j] = '!';
				if( uppleft[i][j] == '.' ) uppleft[i][j] = '!';
				if( uppmid[i][j] == '.' ) uppmid[i][j] = '!';
				if( uppright[i][j] == '.' ) uppright[i][j] = '!';
				if( centleft[i][j] == '.' ) centleft[i][j] = '!';
				if( centmid[i][j] == '.' ) centmid[i][j] = '!';
				if( centright[i][j] == '.' ) centright[i][j] = '!';
			}
		}
	}
	//cout << -1;
	
	cout << uppleft[0] << " ";
		cout << uppmid[0] << " ";
		cout << uppright[0] << endl;
		
		cout << uppleft[1] << " ";
		cout << uppmid[1] << " ";
		cout << uppright[1] << endl;
		
		cout << uppleft[2] << " ";
		cout << uppmid[2] << " ";
		cout << uppright[2] << endl << endl;
		
		
		cout << centleft[0] << " ";
		cout << centmid[0] << " ";
		cout << centright[0] << endl;
		
		cout << centleft[1] << " ";
		cout << centmid[1] << " ";
		cout << centright[1] << endl;
		
		cout << centleft[2] << " ";
		cout << centmid[2] << " ";
		cout << centright[2] << endl << endl;
		
		
		cout << lowleft[0] << " ";
		cout << lowmid[0] << " ";
		cout << lowright[0] << endl;
		
		cout << lowleft[1] << " ";
		cout << lowmid[1] << " ";
		cout << lowright[1] << endl;
		
		cout << lowleft[2] << " ";
		cout << lowmid[2] << " ";
		cout << lowright[2] << endl << endl;
	
	
}















