#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;

template<class T> T nextInt() {
    T x = 0, p = 1;
    char c;
    do {
        c = getchar();
    } while (c <= 32);
    if (c == '-') {
        p = -1;
        c = getchar();
    }
    while (c >= '0' && c <= '9') {
        x = x * 10 + c - '0';
        c = getchar();
    }
    return x * p;
}

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const ll P = (ll)1e9 + 7;

const int maxn = 1e6 + 5;

int n, m, tlen, x[maxn];
char t[maxn];
int z[maxn];
char res[maxn];

void calc_z(int * z, char * s, int n) {
    z[0] = n;
    int l = 0, r = 0;
    for (int i = 1; i < n; i++) {
        if (i <= r)
            z[i] = min(z[i - l], r - i + 1);
        else
            z[i] = 0;
        while (i + z[i] < n && s[z[i]] == s[i + z[i]]) z[i]++;
        if (i + z[i] - 1 > r) {
            l = i, r = i + z[i] - 1;
        }
    }
}

void answer(int x) {
    printf("%d\n", x);
    exit(0);
}

int main()
{
    srand(time(0));
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    scanf("%d%d", &n, &m);

    scanf("%s", t);

    tlen = strlen(t);

    calc_z(z, t, tlen);

    for (int i = 1; i <= m; i++) {
        scanf("%d", x + i);
        x[i]--;
    }

    memset(res, '?', sizeof(res));
    int r = -1;

    for (int i = 1; i <= m; i++) {
        if (x[i] > r) {
            for (int it = x[i]; it < x[i] + tlen; it++)
                res[it] = t[it - x[i]];
            r = x[i] + tlen - 1;
        }
        else {
            int l = r - tlen + 1;
            int cur = x[i];
            int pos = cur - l;
            if (z[pos] + pos != tlen) {
                answer(0);
            }
            for (int it = r + 1; it < x[i] + tlen; it++)
                res[it] = t[it - x[i]];
            r = x[i] + tlen - 1;
        }
    }

    int cnt = 0;

    for (int i = 0; i < n; i++)
        if (res[i] == '?') cnt++;

    ll prod = 1;

    while (cnt--)
        prod = (prod * 26LL) % P;

    answer(prod);

    return 0;
}
