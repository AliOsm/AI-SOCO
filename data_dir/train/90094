
// ~/BAU/ACM-ICPC/Teams/Rampage/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const int N = 301;
const ll MOD = 1e9 + 7;
const double eps = 1e-9;

int n, b = 31, len[N], lens[N], num[N][N], abb[N][N], tot;
string s[N];
char t[100002];

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif

	scanf("%d", &n);
	for(int i=0; i<n; i++) {
		scanf("%s", t);
		s[i] = string(t);
		len[i] = strlen(t);
		lens[i] = len[i] + (i ? lens[i - 1] : 0);
		tot += len[i];
		if (i) tot++;
	}

	for (int i = 0; i < n; i++) {
		int h = 0;
		for (int j = i; j < n; j++) {
			if (j != i) 
				h = ((h * b) % MOD + 27) % MOD;
			for (int k = 0; k < len[j]; k++)
				h = ((h * b) % MOD + s[j][k]-'a'+1) % MOD;
			num[i][j] = h;
			abb[i][j] = (j - i) + lens[j] - (i ? lens[i - 1] : 0);
		}
	}

	int ans = tot;
	for (int l = 1; l < n; l++) {
		for (int i = 0; i <= n - l; i++) {
			int cnt = 1, v = num[i][i + l - 1];
			for (int j = i + l; j <= n - l; ) {
				if (num[j][j + l - 1] == v) {
					cnt++;
					j += l;
				}
				else j++;
			}
			if (cnt >= 2) 
				ans = min(ans, tot + cnt * (-abb[i][i+l-1] + l));
		}
	}
	printf("%d\n", ans);
	return 0;
}