#include<bits/stdc++.h>
using namespace std;

const int N = 1e5+7;
vector<int> adj[N];
void dfs(int u, int p, int st) {
    cout<<u<<" ";
    assert(adj[u].size() == 2);
    for (int v: adj[u])
        if (v!=p && v!=st) {
            dfs(v, u, st);
            break;
        }
}

map<pair<int, int>, vector<int>> faces;
int p[N][3];

bool side(int i) {
    int cnt = 0;
    if (faces[make_pair(p[i][0],p[i][1])].size() == 1) cnt++;
    if (faces[make_pair(p[i][0],p[i][2])].size() == 1) cnt++;
    if (faces[make_pair(p[i][1],p[i][2])].size() == 1) cnt++;
    return cnt >= 2;
}

vector<int> special;

void remedge(int u, int v, int i) {
    if (u > v)  swap(u, v);
    auto &vv = faces[make_pair(u, v)];
    vv.erase(find(vv.begin(), vv.end(), i));

    for (int x: vv)
        if (side(x))
            special.push_back(x);
}

void remface(int i) {
    remedge(p[i][0], p[i][1], i);
    remedge(p[i][0], p[i][2], i);
    remedge(p[i][1], p[i][2], i);
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int t;
    cin>>t;

    while (t--) {
        faces.clear();
        int n;
        cin>>n;

        for (int i=1; i<=n-2; i++) {
            cin>>p[i][0]>>p[i][1]>>p[i][2];
            sort(p[i], p[i]+3);

            faces[make_pair(p[i][0],p[i][1])].push_back(i);
            faces[make_pair(p[i][0],p[i][2])].push_back(i);
            faces[make_pair(p[i][1],p[i][2])].push_back(i);
        }

        for (int i=1; i<=n; i++)    adj[i].clear();

        for (auto pr: faces) {
            if (pr.second.size() > 1)   continue;
            int u = pr.first.first;
            int v = pr.first.second;

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        dfs(1, -1, 1);
        cout<<endl;

        special.clear();
        for (int i=1; i<=n-2; i++)
            if (side(i))
                special.push_back(i);

        for (int i=0; i<n-2; i++) {
            cout<<special[i]<<" ";
            remface(special[i]);
        }
        cout<<endl;
    }
}
