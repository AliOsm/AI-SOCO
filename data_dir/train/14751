#include<bits/stdc++.h>

using namespace std;

int const N = 4e2+10;

int n, m, adj[N][N];

int dis[2][N], ans = -1;

void solve(int c1, int c2){
	for(int i = 1; i <= n; i++) dis[0][i] = dis[1][i] = -1;
	queue<int> bfs;
	bfs.push(1);
 dis[c1][1] = dis[c2][1] = 0;
 while(!bfs.empty()){
 	int v = bfs.front();
 	bfs.pop();
 	for(int u = 1; u <= n; u++)
 	 if(((c1 == 1 && !adj[v][u]) || (c1 == 0 && adj[v][u])) && (dis[c1][u] == -1 || dis[c1][u] > dis[c1][v] + 1))
 	  dis[c1][u] = dis[c1][v] + 1, bfs.push(u);
	}
 bfs.push(1);
 while(!bfs.empty()){
 	int v = bfs.front();
 	bfs.pop();
 	for(int u = 1; u <= n; u++)
 	 if(((c2 == 1 && !adj[v][u]) || (c2 == 0 && adj[v][u])) && (dis[c2][u] == -1 || dis[c2][u] > dis[c2][v] + 1 + 2*(dis[c2][v] == dis[c1][v] && v != 1)))
 	  dis[c2][u] = dis[c2][v] + 1 + 2*(dis[c2][v] == dis[c1][v] && v != 1), bfs.push(u);
	}
	if(dis[c1][n] == -1 || dis[c2][n] == -1) return;
	int cmp = max(dis[c1][n],dis[c2][n]);
	if(cmp != -1) 
	 if(ans == -1) ans = cmp;
	 else ans = min(ans,cmp);
}

int main(){
	
	scanf("%d %d", &n, &m);
	
	for(int i = 1; i <= m; i++){
		int u, v;
		scanf("%d%d",&u,&v);
		adj[u][v] = adj[v][u] = 1;
	}
	
	solve(0,1);
	solve(1,0);
	
	printf("%d\n",ans);
	
}
