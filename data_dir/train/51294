//marico el que lo lea
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <stdlib.h>
#include <assert.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> ii;

void fastIO() {
	std::ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
}

#define FOR(i,f,t) for(int i=f; i<(int)t; i++)
#define FORR(i,f,t) for(int i=f; i>(int)t; i--)
#define FORE(i,c) for(auto i = (c).begin(); i != (c).end(); i++)
#define pb push_back
#define all(obj) obj.begin(), obj.end()
#define ms(obj, val) memset(obj, val, sizeof(obj))
#define ms2(obj, val, sz) memset(obj, val, sizeof(obj[0])*sz)

#define fst first
#define snd second

template<typename T, typename U> inline void mnze(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void mxze(T &x, U y) { if(x < y) x = y; }

void _scan( int &x ) { scanf("%d",&x); }
void _scan( long long &x ) { scanf("%lld",&x); }
void _scan( double &x ) { scanf("%lf",&x); }
void _scan( char &x ) { scanf(" %c",&x); }
void _scan( char *x ) { scanf("%s",x); }
void scan() {}
template<typename T, typename... U>
void scan( T& head, U&... tail ) { _scan(head); scan(tail...);}

template<typename T> void _dbg(const char* sdbg, T h) { cerr<<sdbg<<"="<<h<<"\n"; }
template<typename T, typename... U> void _dbg(const char* sdbg, T h, U... t) {
	while(*sdbg != ',')cerr<<*sdbg++; cerr<<"="<<h<<","; _dbg(sdbg+1, t...);
}

#ifdef LOCAL
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#define debugv(x) {{cerr <<#x <<" = "; FORE(_i, (x)) cerr <<*_i <<", "; cerr <<"\n"; }}
#define debuga(x, sz) {{cerr <<#x <<" = "; FOR(_i, 0, sz) cerr << x[_i] <<", "; cerr <<"\n"; }}
#else
#define debug(...) (__VA_ARGS__)
#define debugv(x)
#define debuga(x, sz)
#define cerr if(0)cout
#endif

const ll MOD = 998244353;

ll sum(ll x){return x;}
template<typename... U>
ll sum(ll head, U... tail){
    return head + sum(tail...) %MOD;
}
ll prod(ll x){return x;}
template<typename... U>
ll prod(ll head, U... tail){
    return head * prod(tail...) %MOD;
}
ll fix(ll x){return (x%MOD + MOD) %MOD;}

ll sq(ll x){return x*x%MOD;}
ll pot(ll b, int e){
    if(!e) return 1;
    return sq(pot(b, e>>1)) * (e&1 ? b : 1)%MOD;
}
ll inv(ll x){
    return pot(x, MOD-2);
}
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
const int MAXN = 2e3+3;
int N, A, B;
ll p, q;

ll nc2(ll n){return (n*(n-1)/2) %MOD;}

ll dpg[MAXN][MAXN], dpf[MAXN], dpE[MAXN];
ll g(int n, int s){
    if(n==s || s==0) return 1;
    ll &ret = dpg[n][s];
    if(ret!=-1) return ret;
    return ret = sum(g(n-1,s-1)*pot(q,n-s)%MOD, g(n-1,s)*pot(p,s)%MOD);
}
ll f(int n){
    if(n==1) return 1;
    if(n==2) return 0;
    ll &ret = dpf[n];
    if(ret!=-1) return ret;
    ret = 0;
    FOR(s,1,n) ret = (ret + g(n,s)*f(s))%MOD;
    return ret = fix(1-ret);
}
ll E(int n){
    if(n==1) return 0;
    if(n==2) return 1;
    ll &ret = dpE[n];
    if(ret!=-1) return ret;
    ret = 0;
    FOR(s,1,n){
        ret+=prod(g(n,s), f(s), 
                sum(nc2(s), s*(n-s), E(s), E(n-s)));
        ret%=MOD;
    }
    ret += f(n)*nc2(n);
    ret %= MOD;
    ret = prod(ret, inv(fix(1-f(n))));
    return ret = fix(ret);
}


int main(){
    scan(N,A,B);
    p = prod(A, inv(B));
    q = fix(1-p);
    ms(dpE,-1);
    ms(dpf,-1);
    ms(dpg,-1);
    printf("%lld\n",E(N));
}
