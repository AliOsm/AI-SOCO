#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define DEBUG
#ifdef DEBUG
#define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
	template <typename Arg1>
	void __f(const char* name, Arg1&& arg1)
	{
		cerr << name << " = " << arg1 << endl;
	}
	template <typename Arg1, typename... Args>
	void __f(const char* names, Arg1&& arg1, Args&&... args)
	{
		const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " = " << arg1 << " || ";
		__f(comma+1, args...);
	}
#else
#define debug(...)
#endif

#define FAST_IO std::ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()
#define endl "\n"

// priority_queue<ll, vector<ll>, less<ll>>pq;     // Max Heap
// priority_queue<ll, vector<ll>, greater<ll>>pq;  // Min Heap

typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth (1 based indexing) smallest: " << *A.find_by_order(k - 1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

const int MAXN = 2e6;

ll cmp[MAXN];
vector<ll>pr;
vector<ll>v;

void soe()
{
	for(int i=2;i<MAXN;i++)
	{
		if(cmp[i]) continue;
		pr.pb(i);
		for(int j=2*i;j<MAXN;j+=i) cmp[j] = 1;
	}
}

ll power(ll a, ll b)
{
	ll ans = 1;
	while(b > 0)
	{
		if(b & 1ll) ans = (ans * a);
		a = (a * a);
		b >>= 1ll;
	}
	return ans;
}

int main()
{
	FAST_IO;

	soe();
	ll x, ans = 1e18, res = 1, y;
	cin >> x;
	y = x;
	for(int i=0;i<sz(pr);i++)
	{
		if(x % pr[i] != 0) continue;
		ll c = 0;
		while(x % pr[i] == 0)
		{
			x /= pr[i];
			c += 1;
		}
		v.pb(power(pr[i], c));
	}
	if(x > 1) v.pb(x);
	ll z = sz(v);
	for(ll i=0;i<(1ll << z);i++)
	{
		ll temp = 1;
		for(ll j=0;j<z;j++)
			if(i & (1ll << j)) 
				temp *= v[j];
		if(ans > max(temp, y / temp))
		{
			ans = max(temp, y / temp);
			res = temp;
		}
	}
	cout << res << " " << y / res << endl;
    return 0;
}