#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;

const int MAX = 1e2 + 5;
int n;
vector<int> adj[MAX], rvr[MAX];
bool visited[MAX];

ll gcd(ll a, ll b) {
	return !b ? a : gcd(b, a % b);
}

ll lcm(ll a, ll b) {
	return (a * (b / gcd(a, b)));
}

void dfs(int source, vector<int> graph[MAX], vector<int> &cont) {
	visited[source] = true;
	for(auto &each : graph[source]) {
		if(!visited[each]) {
			dfs(each, graph, cont);
		}
	}
	cont.push_back(source);
}

vector<int> kosaraju() {
	memset(visited, false, sizeof visited);
	vector<int> order;
	fori(i, 1, n + 1) {
		if(!visited[i]) {
			dfs(i, adj, order);
		}
	}
	vector<int> sz;
	memset(visited, false, sizeof visited);
	while(!order.empty()) {
		int back = order.back();
		order.pop_back();
		if(!visited[back]) {
			vector<int> cur;
			dfs(back, rvr, cur);
			if(cur.size() == 1 && adj[cur[0]][0] != cur[0]) {
				puts("-1");
				exit(0);
			}
			sz.push_back((int) cur.size());
		}
	}
	return sz;
}

int main() {
	scanf("%d", &n);
	fori(i, 1, n + 1) {
		int cur;
		scanf("%d", &cur);
		adj[i].push_back(cur);
		rvr[cur].push_back(i);
	}
	auto sizes = kosaraju();
	ll lc = 1;
	for(auto &each : sizes) {
		if(each % 2 == 0) {
			lc = lcm(lc, each / 2);
		}
		else {
			lc = lcm(lc, each);
		}
	}
	printf("%lld\n", lc);

	return 0;
}

