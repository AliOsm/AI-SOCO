#include "iostream"
#include "algorithm"
#include "vector"
#include "set"
#include "map"
#include "cstring"
#include "string"
#include "vector"
#include "cassert"
#include "queue"
#include "cstdio"
#include "cstdlib"
#include "ctime"
#include "cmath"
#include "bitset"

using namespace std;

typedef long long ll;
typedef pair < ll, ll > ii;

const int N = 400 + 5;

int n, m;
int dist[N][N], one[N], d[N], cnt[N];
double p[N], mx[N];

double f(int i, int x) {
    vector < int > v;
    memset(p, 0, sizeof(p));
    memset(cnt, 0, sizeof(cnt));
    for(int a = 1; a <= n; a++)
        if(dist[i][a] == x)
            for(int b = 1; b <= n; b++)
                if(dist[a][b] == 1) {
                    p[b] += 1.0 / one[x] / d[a];
                    if(++cnt[b] == 1)
                        v.push_back(b);
                }
    double ans = 0;
    for(int j = 1; j <= n; j++) {
        double res = 0;
        for(auto b : v) {
            mx[dist[j][b]] = max(mx[dist[j][b]], p[b]);
        }
        for(auto b : v) {
            res += mx[dist[j][b]];
            mx[dist[j][b]] = 0;
        }
        ans = max(ans, res);
    }
    return ans;
}

int main () {
    
    scanf("%d %d", &n, &m);
    
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= n; j++)
            if(i != j)
                dist[i][j] = 1e9;
    
    for(int i = 1; i <= m; i++) {
        int x, y;
        scanf("%d %d", &x, &y);
        d[x]++;
        d[y]++;
        dist[x][y] = dist[y][x] = 1;
    }
    
    for(int k = 1; k <= n; k++)
        for(int i = 1; i <= n; i++)
            for(int j = 1; j <= n; j++)
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
    
    double ans = 0;
    
    for(int i = 1; i <= n; i++) {
        for(int x = 1; x <= n; x++)
            one[dist[i][x]]++;
        double res = 0;
        for(int x = 0; x < N; x++) {
            if(!one[x])
                continue;
            double add = f(i, x) * one[x] / n;
            add = max(add, 1.0 / n);
            res += add;
        }
        ans = max(ans, res);
        for(int x = 1; x <= n; x++)
            one[dist[i][x]]--;
    }
    
    printf("%.12lf\n", ans);

    return 0;
    
}