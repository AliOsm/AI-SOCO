#include <algorithm>
#include <unordered_map>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d%d", &a, &b)
#define sc3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define scs(a) scanf("%s", a)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define db(x) cerr << #x << " == " << x << endl
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<ii> vii;
typedef vector< vii> vvii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9 + 9;
const int N=2e5+10;
int n;
int v[N],tr[25*N],L[25*N],R[25*N],root[N],sz=1;
void build(int node, int b, int e){
	if(b!=e){
		if(!L[node]) L[node]=sz++;
		if(!R[node]) R[node]=sz++;
		int mid=(b+e)/2;
		build(L[node],b,mid);
		build(R[node],mid+1,e);
	}
}
int update(int node, int b, int e, int i , int val){
	int idx=sz++;
	L[idx]=L[node];
	R[idx]=R[node];
	tr[idx]=tr[node]+val;
	if(b==e)	return idx;
	int mid=(b+e)/2;
	if(i<=mid) L[idx]=update(L[idx],b,mid,i,val);
	else R[idx]=update(R[idx],mid+1,e,i,val);
	return idx;
}
int query(int node, int b, int e, int k){
	if(b==e){
		if(tr[node]>k) return b+1;
		return b;
	}
	int mid=(b+e)/2;
	if(tr[R[node]]>k) return query(R[node],mid+1,e,k);
	return query(L[node],b,mid,k-tr[R[node]]);
}
inline int solve(int k)
{
	int r=0;
	int b=n;
	while(b>=1){
		int x=query(root[b],1,n,k);
		b=x-1;
		r++;
	}
	return r;
}
int mapa[N];
int main()
{
	sc(n);
	for(int i=1;i<=n;i++) sc(v[i]);
	build(root[0],1,n);
	for(int i=1;i<=n;i++){
		if(!mapa[v[i]]){
			root[i]=update(root[i-1],1,n,i,1),mapa[v[i]]=i;
		}
		else {
			root[i]=update(root[i-1],1,n,mapa[v[i]],-1);
			root[i]=update(root[i],1,n,i,1);
			mapa[v[i]]=i;
		}
	}
	for(int i=1;i<=n;i++){
		prie(solve(i));
	}
	cout<<endl;
	return 0;
}
