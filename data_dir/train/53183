// In the name of God
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <bitset>
#define sqr(a) (a)*(a)
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
 
const long long INF = (long long)1e18;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)1e6 + 227 + 1;    
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-9;
 
long long bin_pow(long long a, long long b) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2);
    ans = ans * ans;
    if(b % 2) ans = ans * a;
    return ans;
}

bool used[MAXN];

int ans[MAXN];

#include <assert.h>

int main() {
    // freopen(".in", "r", stdin);

    int n; cin >> n;

    for(int i = 2; i < MAXN; i++) {
        if(used[i]) continue;

        for(int j = i * 2; j < MAXN; j += i) {
            used[j] = 1;

            if(j <= n + 1) {
                ans[j] = max(ans[j], ans[i] + 1);
            }
        }
    }

    int mx = 1;
    for(int i = 2; i <= n + 1; i++)
        mx = max(mx, ans[i] + 1);

    cout << mx << "\n";
    for(int i = 2; i <= n + 1; i++)
        cout << ans[i] + 1 << " ";
}