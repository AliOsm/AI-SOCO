#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int maxn=3007;
const int inf=INT_MAX;
const ll inff=1e18;
const ll mod=1e9+7;
#define pii pair<int,int>
#define mkp make_pair
#define F first
#define S second
#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
//#define int ll

#ifdef HNO2
#define IOS
#else
#define endl '\n'
#define IOS ios::sync_with_stdio(0); cin.tie(0);
#endif // HNO2

int n,x,y;
vector<int> G[maxn];

int siz[maxn],depth[maxn];
ll dp[maxn][maxn];
pii last1[maxn][maxn],last2[maxn][maxn];
vector<pii> tmp[maxn];

void dfs0(int now,int p)
{
    siz[now]=1;
    for (int i:G[now])
    {
        if (i!=p)
        {
            depth[i]=depth[now]+1;
            dfs0(i,now);
            siz[now]+=siz[i];
        }
    }
}

vector<int> v,u; //0: up, 1: down

void dfs(int s,int now,int p,int dep)
{
    u.pb(now);
    if (p!=-1)
    {
        if (v[0]==0&&v.back()==0) dp[now][s]=dp[s][now]=siz[s]*1ll*(n-siz[u[sz(u)-2]]);
        if (v[0]==0&&v.back()==1) dp[now][s]=dp[s][now]=siz[s]*1ll*siz[now];
        if (v[0]==1&&v.back()==1) dp[now][s]=dp[s][now]=(n-siz[u[1]])*1ll*siz[now];
        if (last1[s][now].F==0)
        {
            last1[s][now]=mkp(p,s);
            last1[now][s]=mkp(p,s);
        }
        else
        {
            last2[now][s]=mkp(p,s);
            last2[s][now]=mkp(p,s);
        }
        if (s<now) tmp[dep].pb(mkp(s,now));
    }
    for (int i:G[now])
    {
        if (i!=p)
        {
            if (depth[i]<depth[now]) v.pb(0);
            else v.pb(1);
            dfs(s,i,now,dep+1);
            v.pop_back();
        }
    }
    u.pop_back();
}

int32_t main()
{
    IOS
    memset(last1,0,sizeof(last1));
    memset(last2,0,sizeof(last2));
    cin>>n;
    for (int i=1;i<=n-1;i++)
    {
        cin>>x>>y;
        G[x].pb(y);
        G[y].pb(x);
    }
    dfs0(1,-1);
    for (int i=1;i<=n;i++)
    {
        vector<int> ().swap(u);
        vector<int> ().swap(v);
        dfs(i,i,-1,0);
    }

   ll ans=0ll;
    for (pii i:tmp[1]) ans=max(ans,dp[i.F][i.S]);
    for (int i=2;i<=n;i++)
        for (pii j:tmp[i])
        {
            dp[j.F][j.S]+=max(dp[last1[j.F][j.S].F][last1[j.F][j.S].S]
                              ,dp[last2[j.F][j.S].F][last2[j.F][j.S].S]);
            dp[j.S][j.F]=dp[j.F][j.S];
            ans=max(ans,dp[j.F][j.S]);
        }
    cout<<ans<<endl;
}

