#include<bits/stdc++.h>
using namespace std;

char s[500006];
vector<int> g[500005];
int ind;
int low[500006], high[500005];
int rel[500006];
vector<int> nodes[500006], v;
vector< vector<int> > cnt[500006];

void dfs(int node, int depth) {
    low[node] = ind;
    for (int i = 0; i < int(g[node].size()); i++)
        dfs(g[node][i], depth + 1);
    rel[ind] = node;
    high[node] = ind++;
    nodes[depth].push_back(high[node]);
    cnt[depth].push_back(v);
}

int getHigher(int h, int val) {
    int start = -1; int end = nodes[h].size();
    while (end - start > 1) {
        int mid = (end + start) >> 1;
        if (nodes[h][mid] < val)
            start = mid;
        else
            end = mid;
    }
    return end;
}

int getLower(int h, int val) {
    int start = -1; int end = nodes[h].size();
    while (end - start > 1) {
        int mid = (end + start) >> 1;
        if (nodes[h][mid] > val)
            end = mid;
        else
            start = mid;
    }
    return start;
}

int main() {
    ios::sync_with_stdio(0);
    int n, q;
    scanf("%d%d", &n, &q);
    for (int i = 1; i < n; i++) {
        int p;
        scanf("%d", &p);
        g[p - 1].push_back(i);
    }
    scanf("%s", s);
    
    for (int c = 0; c < 26; c++)
        v.push_back(0);
    dfs(0, 1);   
    for (int depth = 1; depth <= n; depth++)
        for (int i = 0; i < int(nodes[depth].size()); i++)
            for (int c = 0; c < 26; c++)
                cnt[depth][i][c] = (i == 0 ? 0 : cnt[depth][i - 1][c]) + (s[rel[nodes[depth][i]]] - 'a' == c);
                
    while (q--) {
        int v, depth;
        scanf("%d%d", &v, &depth);
        --v;
        int left = getHigher(depth, low[v]);
        int right = getLower(depth, high[v]);
        if (right < left) {
            puts("Yes");
            continue;
        }
        int odd = 0;
        for (int c = 0; c < 26 && odd < 2; c++)
            if ((cnt[depth][right][c] - (left == 0 ? 0 : cnt[depth][left - 1][c])) % 2 == 1)
                odd++;
        if (odd < 2)
            puts("Yes");
        else
            puts("No");
    }

    return 0;
}