#include <bits/stdc++.h>
#define ll long long
using namespace std;
const int N = 105;
int s[N], e[N], a[N];
const int mod = 1e9 + 7;
struct matrix {
	vector<vector<int> > mat;
	matrix(int n) {
		mat.resize(n, vector<int>(n));
	}
	matrix operator *(matrix y) {
		matrix ret(y.mat.size());
		int n = y.mat.size();
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				for (int k = 0; k < n; k++) {
					ret.mat[i][j] += (mat[i][k] * 1ll * y.mat[k][j]) % mod;
					if (ret.mat[i][j] >= mod) ret.mat[i][j] -= mod;
				}
			}
		}
		return ret;
	}
	matrix identity(int n) {
		matrix ret(n);
		for (int i = 0; i < n; i++)
			ret.mat[i][i] = 1;
		return ret;
	}
	matrix fast_power(matrix a, ll k) {
		if (!k) return identity(a.mat.size());
		if (k & 1) return a * fast_power(a, k - 1);
		return fast_power(a * a, k / 2);
	}
};
ll fp(ll a, ll p) {
	if (!p) return 1;
	ll t = fp(a, p >> 1);
	t = (t * t) % mod;
	if (p & 1) t = (t * a) % mod;
	return t;
}
ll c[N];
const int M = 1e6 + 1;
int b[M], d[M];
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n, l, m;
	cin >> n >> l >> m;
	for (int i = 0, x; i < n; i++) {
		cin >> x;
		if (x >= m) x -= m;
		s[x]++;
	}
	for (int i = 0, x; i < n; i++) {
		cin >> x;
		if (x >= m) x -= m;
		b[i] = x;
		a[x]++;
	}
	for (int i = 0, x; i < n; i++) {
		cin >> x;
		if (x >= m) x -= m;
		d[i] = x;
		e[x]++;
	}
	matrix mat(m);
	for (int i = 0; i < m; i++)
		for (int j = 0; j < m; j++)
			mat.mat[i][j] = (a[(j - i + m) % m]);
	mat = mat.fast_power(mat, l - 2);
	ll ans = 0;

	for (int i = 0; i < m; i++) {
		if (!s[i]) continue;
		for (int j = 0; j < m; j++) {
			ll x = mat.mat[i][j];
			ll T = (s[i] * 1ll * x) % mod;
			c[j] += T;
			if (c[j] >= mod) c[j] -= mod;
		}
	}
	for (int j = 0; j < n; j++) {
		int x = (m - d[j]) % m;
		ll T = c[(x - b[j] + m) % m];
		ans += T;
		if (ans >= mod) ans -= mod;
	}
	cout << ans << endl;
	return 0;
}
