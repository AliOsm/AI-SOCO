#include <cstdio>
#include <vector>

using namespace std;

const int MAX_N = 1e5 + 15;
vector <int> graph[MAX_N];
vector <int> subtree_size(MAX_N, 0);

int dfs(int v, int parent)
{
    subtree_size[v] = 1;

    for(int i = 0; i < graph[v].size(); i++)
    {
        int child = graph[v][i];

        if(child == parent) continue;

        dfs(child, v);

        subtree_size[v] += subtree_size[child];
    }
}

int main()
{
    int no_of_vertices;
    scanf("%d", &no_of_vertices);

    for(int i = 1; i < no_of_vertices; i++)
    {
        int u, v;
        scanf("%d %d", &u, &v);

        graph[u].push_back(v);
        graph[v].push_back(u);
    }

    dfs(1, 0);

    if(no_of_vertices%2 == 1)
    {
        printf("-1\n");
        return 0;
    }

    int answer = 0;

    for(int i = 2; i <= no_of_vertices; i++)
        answer += (subtree_size[i]%2 == 0);

    printf("%d\n", answer);
    return 0;
}
