// In the name of God
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <ctime>
#include <set>
#include <map>
#include <vector>
#include <bitset>
using namespace std;

template <typename T>
T next_int() {
	T x = 0, p = 1;
	char ch;
	do { ch = getchar(); } while(ch <= ' ');
	if(ch == '-') {
		p = -1;
		ch = getchar();
	}
	while(ch >= '0' && ch <= '9') {
		x = x * 10 + (ch - '0');
		ch = getchar();
	}
	return p * x;
}
	
const long long max_int = (long long)2e18 + 228;
const int max_n = (int)3e3 + 228;	
const int mod = (int)1e9 + 7;

struct BOR {
	int p[2];
	int k;
} new_BOR;

vector<BOR> t;

void add(int a) {
	int p = 0;
	t[p].k++;
	for(int i = 29; i >= 0; i--) {
		bool next = (1 << i) & a;
		if(!t[p].p[next]) {
			t[p].p[next] = t.size();
			t.push_back(new_BOR);
		}
		p = t[p].p[next];
		t[p].k++;
	}
}

void del(int a) {
	int p = 0;
	t[p].k--;
	for(int i = 29; i >= 0; i--) {
		bool next = (1 << i) & a;
		p = t[p].p[next];
		t[p].k--;
	}
}

int get(int a) {
	int p = 0;
	int ans = 0;
	for(int i = 29; i >= 0; i--) {
		bool next = (1 << i) & a;

		if(t[p].p[1 ^ next] && t[t[p].p[1 ^ next]].k) {
			ans += (1 << i);
			p = t[p].p[1 ^ next];
		} else {
			p = t[p].p[next];
		}
	}

	return ans;
}

int main() {
//	freopen(".in", "r", stdin);

	t.push_back(new_BOR);

	add(0);
	int q = next_int<int>();
	while(q--) {
		char type; cin >> type;

		if(type == '+') 
			add(next_int<int>());
		else
		if(type == '-') 
			del(next_int<int>());
		else cout << get(next_int<int>()) << "\n";
	}
}
