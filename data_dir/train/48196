#include <bits/stdc++.h>

using namespace std;

const int N = 2e5 + 5, LG = 20;

int a[N];
int sp[LG][N];

int get(int l, int r) {
  int len = r - l;
  if (len <= 0)
    return -1;
  int lg = 31 - __builtin_clz(len);
  return max(sp[lg][l], sp[lg][r - (1 << lg)]);
}

int main() {
  int t;
  scanf("%d", &t);
  while (t--) {
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
      scanf("%d", a+i);
      sp[0][i] = a[i];
    }
    for (int i = 0; i + 1 < LG; ++i) {
      for (int j = 0; j + (1 << (i+1)) <= n; ++j) {
        sp[i+1][j] = max(sp[i][j], sp[i][j + (1 << i)]);
      }
    }
    int m;
    scanf("%d", &m);
    vector<pair<int, int>> hero(m);
    for (int i = 0; i < m; ++i) {
      scanf("%d %d", &hero[i].first, &hero[i].second);  
    }
    sort(hero.begin(), hero.end());
    for (int i = m-2; i >= 0; --i) {
      hero[i].second = max(hero[i].second, hero[i+1].second);
    }
    int ans = 0, cur = 0;
    while (cur < n) {
      int lo = 0, hi = n - cur;
      while (lo < hi) {
        int mid = (lo + hi + 1) >> 1;
        int monster = get(cur, cur + mid);
        int pos = lower_bound(hero.begin(), hero.end(), make_pair(monster, -1)) - hero.begin();
        if (pos >= m || hero[pos].second < mid)
          hi = mid - 1;
        else
          lo = mid;
      }
      if (lo == 0)
        break;
      cur += lo;
      ++ans;
    }
    if (cur < n)
      ans = -1;
    printf("%d\n", ans);
  }
  return 0;
}
