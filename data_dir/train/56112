#include <bits/stdc++.h>
using namespace std;

const int INF = 2e9;

int gcd(int x, int y){
	return y == 0 ? x : gcd(y, x % y);
}

struct frac{
	int x, y;
	void simp(){
		int _gcd = gcd(x, y);
		x /= _gcd;
		y /= _gcd;
		if (y < 0){
			x = -x; y = -y;
		}
	}
	frac(){
		
	}
	frac(int _x, int _y){
		x = _x; y = _y;
		simp();
	}
};

struct segm{
	frac k;
	long long d;
	segm(){
		
	}
	segm(int x1, int y1, int x2, int y2){
		if (x2 - x1 == 0) k = frac(INF, 1);
		else k = frac(y2 - y1, x2 - x1);
		d = 1LL * (x2 - x1) * (x2 - x1) + 1LL * (y2 - y1) * (y2 - y1);
	}
};

const int N = 4e6 + 10;

int xx[2005], yy[2005];
segm s[N];

int comp(frac f1, frac f2){
	long long k1, k2;
	k1 = 1LL * f1.x * f2.y;
	k2 = 1LL * f1.y * f2.x;
	if (k1 == k2) return 0;
	if (k1 < k2) return -1;
	return 1;
}

bool cmp(const segm& p, const segm& q){
	int res;
	res = comp(p.k, q.k);
	if (res == 0) return p.d < q.d;
	return res == -1;
}

int main(){
	int n, cnt, pos;
	long long ans;
	scanf("%d",&n);
	for (int i = 1; i <= n; i++) scanf("%d %d",&xx[i],&yy[i]);
	cnt = 0;
	for (int i = 1; i <= n - 1; i++){
		for (int j = i + 1; j <= n; j++){
			s[++cnt] = segm(xx[i], yy[i], xx[j], yy[j]);
		}
	}
	sort(s + 1, s + cnt + 1, cmp);
	ans = 0;
	for (int i = 1; i <= cnt; i++){
		pos = upper_bound(s + 1, s + cnt + 1, s[i], cmp) - s;
		ans += pos - i - 1;
	}
	printf("%I64d\n",ans / 2);
	return 0;
}