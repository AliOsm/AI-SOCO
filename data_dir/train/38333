#include <bits/stdc++.h>
using namespace std;
const int N=2e5+20;
int i,j,n,a[N],u,v,f[N],ans[2][N];
vector <int> divisors[N],adj[N];

void dfs(int node,int parent,int vis,bool removed)
{
	for(auto i:divisors[a[node]])
	{
		f[i]++;
		if(f[i]==vis) ans[removed][node]=max(ans[removed][node],i);
		else if(f[i]==vis-1 and not removed) ans[true][node]=max(ans[true][node],i);
	}
	
	for(auto child:adj[node])
		if(child!=parent)
			dfs(child,node,vis+1,removed);
	
	
	ans[true][node]=max(ans[true][node],ans[false][parent]);
	
	for(auto i:divisors[a[node]]) f[i]--;
	//cout<<node<<" "<<ans[false][node]<<" "<<ans[true][node]<<endl;
}

int main()
{
	for(i=1;i<N;i++)
		for(j=i;j<N;j+=i)
			divisors[j].push_back(i);
	
	scanf("%d",&n);
	for(i=1;i<=n;i++) scanf("%d",&a[i]);
	
	for(i=0;i<n-1;i++)
	{
		scanf("%d%d",&u,&v);
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	
	dfs(1,0,1,false);
	
	for(i=1;i<=n;i++) printf("%d ",max(ans[false][i],ans[true][i]));
}