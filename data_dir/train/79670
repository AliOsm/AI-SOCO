#include <bits/stdc++.h>
using namespace std;

const int N = 100001;
const int oo = 1e9;

int n, s, l, a[N], ST[N][20][2], LOG[N], dp[N];

inline void buildST() {
	int x, y, i, j;

	for (i = 0, LOG[0] = -1; i < n; ++i) {
		ST[i][0][0] = ST[i][0][1] = a[i];
		LOG[i + 1] = LOG[i] + !(i & (i + 1));
	}

	for (j = 1; (1 << j) <= n; ++j) {
		for (i = 0; (i + (1 << j)) <= n; ++i) {
			x = ST[i][j - 1][0];
			y = ST[i + (1 << (j - 1))][j - 1][0];
			ST[i][j][0] = min(x, y);

			x = ST[i][j - 1][1];
			y = ST[i + (1 << (j - 1))][j - 1][1];
			ST[i][j][1] = max(x, y);
		}
	}
}

inline int getMaxDiff(int l, int r) {
	int g = LOG[r - l + 1];
	r = r - (1 << g) + 1;
	return max(ST[l][g][1], ST[r][g][1]) - min(ST[l][g][0], ST[r][g][0]);
}

inline int solve() {
	deque<int> q;
	q.push_back(n);

	for (int i = n - 1; i >= 0; --i) {
		while (!q.empty() && getMaxDiff(i, q.front() - 1) > s) {
			q.pop_front();
		}

		if (q.empty() || q.front() - i < l) {
			dp[i] = oo;
			continue;
		}

		dp[i] = dp[q.front()] + 1;
		q.push_back(i);
	}

	return (dp[0] >= oo) ? -1 : dp[0];
}


int main() {
	cin >> n >> s >> l;
	for (int i = 0; i < n; ++i) {
		scanf("%d", a + i);
	}
	buildST();
	cout << solve() << endl;
	return 0;
}