#include <algorithm>
#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <math.h>
#include <stdlib.h>
#include <functional>
#include <string.h>

#include <vector>
#include <stack>

#include <set>
#include <map>

#include <hash_set>
#include <hash_map>

using namespace std;

const int maxn = (int)1e5 + 10;
const long long inf = (long long)1e15;

int n, m;
int p[maxn];
long long d[maxn]; 
vector<pair<int, long long> > g[maxn];
set<pair<long long, int>> st;
bool used[maxn];
int answer[maxn];

int main() {

#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	cin >> n >> m;

	for (int l = 0, i, j, w; l < m; ++l) {
		scanf("%d%d%d", &i, &j, &w);
		if (i == j) continue; //?
		--i, --j;
		g[i].push_back(make_pair(j, w));
		g[j].push_back(make_pair(i, w));
	}

	for (int i = 0; i < n; ++i) d[i] = inf, p[i] = -1;
	d[0] = p[0] = 0; //?

	memset(used, 0, sizeof(used));

	st.insert(make_pair(0, 0));

	while (true) {
		if (st.empty()) break;
		pair<long long, int> cur = *st.begin();
		int v = cur.second;
		st.erase(cur);
		used[v] = true;
		if (v == n - 1) break;

		for (int i = 0, sz = g[v].size(); i < sz; ++i) {
			int to = g[v][i].first;
			if (used[to]) continue; //to != v
			long long dst = d[v] + g[v][i].second;
			if (dst >= d[to]) continue;
			
			cur = make_pair(d[to], to);
			if (st.find(cur) != st.end()) st.erase(cur);
			st.insert(make_pair(dst, to));
			d[to] = dst;
			p[to] = v;
		}
	}

	if (d[n - 1] == inf)
		cout << -1;
	else {
		int size = 0;
		int pos = n - 1;
		while (pos > 0) {
			answer[size++] = pos + 1;
			pos = p[pos];
		}
		answer[size++] = 1;
		for (int i = size - 1; i >= 0; --i) printf("%d ", answer[i]);
	}

	return 0;
}