#include<bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef long long int ll;

const ll logx=30;
const ll N=2e5+5;
const ll M=3e5+5;
const ll mod=1e9+7;
const ll INF=1e18+5;
const double PI = 3.14159265358979323846;

#define ints(n) scanf("%d",&n)
#define intp(n) printf("%d\n",n)
#define longs(n) scanf("%intd",&n)
#define longp(n) printf("%intd\n",n)

inline ll mul(ll a, ll b){ return (a * 1ll * b) % mod; }
inline ll sub(ll a, ll b){ ll c = a - b; if(c < 0) c += mod; return c; }
inline ll add(ll a, ll b){ ll c = a + b; if(c > mod) c -= mod; return c; }

#define f first
#define s second
#define pb(x) push_back(x)
#define pf(x) push_front(x)
#define mp(x,y) make_pair(x,y)
#define GCD(a,b) __gcd((a),(b))
#define all(v) v.begin(),v.end()
#define bits(x) __builtin_popcount(x)
#define LCM(a,b) ((a)*(b))/GCD((a),(b))
#define ms(dp,val) memset(dp,val,sizeof(dp))
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);
template<typename T> T power(T x,T y,ll m){T ans=1;while(y>0){if(y&1LL) ans=(ans*x)%m;y>>=1ll;x=(x*x)%m;}return ans%m;}

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

ll n,a[105],vis[105],oddpar,evepar,dp[102][2][102][102];

ll F(ll idx,ll las,ll oddparcnt,ll eveparcnt)
{
  ll res=INF;
  if(oddparcnt<0||eveparcnt<0){return INF;}
  if(idx==n)
  {
    if(oddparcnt==0&&eveparcnt==0){return 0;}
    return INF;
  }
  if(dp[idx][las][oddparcnt][eveparcnt]!=-1){return dp[idx][las][oddparcnt][eveparcnt];}
  if(idx==0)
  {
    if(a[idx]!=0)
    {
      if(a[idx]&1){res=min(res,F(idx+1,1,oddparcnt,eveparcnt));}
      else{res=min(res,F(idx+1,0,oddparcnt,eveparcnt));}
    }
    else
    {
      res=min(res,F(idx+1,0,oddparcnt,eveparcnt-1));
      res=min(res,F(idx+1,1,oddparcnt-1,eveparcnt));
    }
  }
  else
  {
    if(a[idx]!=0)
    {
      if(las)
      {
        if(a[idx]&1){res=min(res,F(idx+1,1,oddparcnt,eveparcnt));}
        else{res=min(res,1+F(idx+1,0,oddparcnt,eveparcnt));}
      }
      else
      {
        if(a[idx]&1){res=min(res,1+F(idx+1,1,oddparcnt,eveparcnt));}
        else{res=min(res,F(idx+1,0,oddparcnt,eveparcnt));}
      }
    }
    else
    {
      if(las)
      {
        res=min(res,1+F(idx+1,0,oddparcnt,eveparcnt-1));
        res=min(res,F(idx+1,1,oddparcnt-1,eveparcnt));
      }
      else
      {
        res=min(res,F(idx+1,0,oddparcnt,eveparcnt-1));
        res=min(res,1+F(idx+1,1,oddparcnt-1,eveparcnt));
      }
    }
  }
  return dp[idx][las][oddparcnt][eveparcnt]=res;
}

int main()
{
  fast;
  cin>>n;
  ms(dp,-1);
  for(ll i=0;i<n;i++)
  {
    cin>>a[i];
    vis[a[i]]=1;
  }
  for(ll i=1;i<=n;i++)
  {
    if(vis[i]){continue;}
    if(i&1){oddpar++;}
    else{evepar++;}
  }
  //trace(oddpar,evepar);
  cout<<F(0,0,oddpar,evepar)<<endl;
}
