#include <bits/stdc++.h>

#ifdef NJUDGE
#include "igba.h"
#endif
using namespace std;

#define int long long
#define mkp make_pair
const int MAXN = 2 * 100100;
int n, a[MAXN], ans[MAXN][2];
bool flg[MAXN][2];
vector<pair<int, bool>> rg[MAXN][2];

signed main()
{
	queue<pair<int, bool>> q;
	memset(ans, -1, sizeof ans);
	scanf("%lld", &n);
	for(int i = 2; i <= n; ++i)
	{
		scanf("%lld", &a[i]);
		if(i + a[i] > n)
			q.push({i, 0}), ans[i][0] = a[i];
		if(i - a[i] <= 0)
			q.push({i, 1}), ans[i][1] = a[i];
		if(0 < i + a[i] && i + a[i] <= n)
			rg[i + a[i]][1].push_back(mkp(i, 0));
		if(0 < i - a[i] && i - a[i] <= n)
			rg[i - a[i]][0].push_back(mkp(i, 1));
	}
	while(!q.empty())
	{
		pair<int, bool> cur = q.front();
		q.pop();
		if(flg[cur.first][cur.second])
			continue;
		flg[cur.first][cur.second] = true;
		for(const pair<int, bool>& v : rg[cur.first][cur.second])
		{
			ans[v.first][v.second] = ans[cur.first][cur.second] + a[v.first];
			q.push({v.first, v.second});
		}
	}
	for(int i = 1; i <= n - 1; ++i)
		printf("%lld\n", (ans[i + 1][1] == -1 ? -1 : i + ans[i + 1][1]));
}