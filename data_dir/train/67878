#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> l4;
//typedef pair<double, double> dd;
#define mp make_pair
#define pb push_back
#define debug(x) cerr << #x << " = " << x << " "

const int N = 1e6+1;
vector<int> g[N];
int ans = -1;
void bfs(int root);
int main()
{
  int n; scanf("%d", &n);
  map<ii, int> ma;
  for (int i = 1; i <= n; ++i)
    {
      int x; scanf("%d", &x);
      vector<int> div;
      for (int i = 2; i * i <= x; ++i)
	if (x % i == 0)
	  {
	    int cnt = 0;
	    while (x % i == 0)
	      {
		cnt ^= 1;
		x /= i;
	      }
	    if (cnt) div.pb(i);
	  }
      if (x != 1) div.pb(x);
      ii ret;
      if (div.empty())
	{
	  puts("1"); return 0;
	}
      if (div.size() == 1) ret = mp(1, div[0]);
      else ret = mp(div[0], div[1]);
      ++ma[ret];
    }
  for (auto e : ma)
    if (e.second > 1)
      {
	puts("2"); return 0;
      }
  for (auto e : ma)
    {
      g[e.first.first].pb(e.first.second);
      g[e.first.second].pb(e.first.first);
    }
  for (int i = 1; i * i <= N; ++i)
    if (!g[i].empty())
      bfs(i);
  printf("%d\n", ans);
}
int d[N];
int vis[N];
int pre[N];
void bfs(int root)
{
  //  cerr << "bfs " << root << endl;
  queue<int> q;
  d[root] = 0;
  vis[root] = root;
  pre[root] = 0;
  q.push(root);
  while (!q.empty())
    {
      int cur = q.front(); q.pop();
      //      cerr << "cur " << cur << " d " << d[cur] << endl;
      for (auto nxt : g[cur])
	// we can skip this because we already eliminate 2-len cycle	
	if (nxt != pre[cur])
	{
	  if (vis[nxt] == root)
	    {
	      int newd = d[cur] + d[nxt] + 1;
	      //	      cerr << cur << " and " << nxt << " " << newd << endl;
	      
	      if (ans == -1 || ans > newd) ans = newd;
	      continue;
	    }
	  vis[nxt] = root;
	  pre[nxt] = cur;
	  d[nxt] = d[cur] + 1;
	  q.push(nxt);
	}
    }
  
}
