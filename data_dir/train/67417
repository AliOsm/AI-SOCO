#include<bits/stdc++.h>
using namespace std;
#define X first
#define Y second
typedef pair< int , int >PT;
typedef pair< PT , PT >Rectangle;
const int MAXN = 1e5+7;
const int MAXX = 1e5;

int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};
int allowed[MAXN][4];
PT position[MAXN];

Rectangle reachable(int i) {
    vector< PT >vp;
    vp.push_back(position[i]);
    for (int j = 0; j < 4; j++) {
        if (allowed[i][j]) {
            PT tmp(MAXX*dx[j], MAXX*dy[j]);
            if (dx[j]==0) tmp.X = position[i].X;
            else tmp.Y = position[i].Y;
            vp.push_back(tmp);
        }
    }

    Rectangle rt(position[i], position[i]);
    for (PT p : vp) {
        rt.first.X = min(rt.first.X, p.X);
        rt.first.Y = min(rt.first.Y, p.Y);
        rt.second.X = max(rt.second.X, p.X);
        rt.second.Y = max(rt.second.Y, p.Y);
    }
    return rt;
}

Rectangle intersection(Rectangle p, Rectangle q) {
    int lx = max(p.first.X, q.first.X);
    int rx = min(p.second.X, q.second.X);
    int ly = max(p.first.Y, q.first.Y);
    int ry = min(p.second.Y, q.second.Y);
    return Rectangle(PT(lx, ly), PT(rx, ry));
}

//Rectangle reachable(int i) {
//    int sum = allowed[i][0] + allowed[i][1] + allowed[i][2] + allowed[i][3];
//    if (sum == 0) {
//        return Rectangle(position[i], position[i]);
//    }
//    if (sum == 4) {
//        return Rectangle(PT(-MAXX, -MAXX), PT(MAXX, MAXX));
//    }
//
//
//
//    if (sum == 1) {
//        if (allowed[i][0]) {
//            return Rectangle(PT(-MAXX, position[i].Y), position[i]);
//        }
//        if (allowed[i][1]) {
//            return Rectangle(position[i], PT(position[i].X, MAXX));
//        }
//        if (allowed[i][2]) {
//            return Rectangle(position[i], PT(MAXX, position[i].Y));
//        }
//        if (allowed[i][3]) {
//            return Rectangle(PT(position[i].X, -MAXX), position[i]);
//        }
//        assert(false);
//    }
//
//    if (sum == 3) {
//        if (!allowed[i][0]) {
//            return Rectangle(PT(-MAXX, position[i].Y), position[i]);
//        }
//        if (!allowed[i][1]) {
//            return Rectangle(position[i], PT(position[i].X, MAXX));
//        }
//        if (!allowed[i][2]) {
//            return Rectangle(position[i], PT(MAXX, position[i].Y));
//        }
//        if (!allowed[i][3]) {
//            return Rectangle(PT(position[i].X, -MAXX), position[i]);
//        }
//        assert(false);
//
//    }
//}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int q;
    cin >> q;

    while (q--) {
        int n;
        cin >> n;

        for (int i = 0; i < n; i++) {
            cin >> position[i].X >> position[i].Y;
            cin >> allowed[i][0] >> allowed[i][1] >> allowed[i][2] >> allowed[i][3];
        }

        bool canDo = true;
        Rectangle ans(PT(-MAXX, -MAXX), PT(MAXX, MAXX));


        for (int i = 0; i < n && canDo; i++) {
            Rectangle r = reachable(i);
            ans = intersection(ans, r);
            if (ans.first.X > ans.second.X) canDo = false;
            if (ans.first.Y > ans.second.Y) canDo = false;
        }

        if (canDo) {
            cout << 1 << " " << ans.first.X << " " << ans.first.Y << "\n";
        } else {
            cout << 0 << "\n";
        }
    }


    return 0;
}
