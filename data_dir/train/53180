#define _CRT_SECURE_NO_WARNINGS
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
//#include <chrono>
//#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 200005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;

int n , m , q;

int id[N];
int a[N] , b[N];

int dp[N][22];

vector <int> g[N];
int mas[N];

int t[4 * N];

void build(int v,int s,int e){
    if(s == e){
        t[v] = mas[s];
        return ;
    }
    int m = (s + e) / 2;
    build(2 * v , s , m);
    build(2 * v + 1 , m + 1 , e);
    t[v] = min(t[2 * v] , t[2 * v + 1]);
}

int get(int v,int s,int e,int l,int r){
    if(l > r)return m + 1;
    if(s == l && e == r)return t[v];
    int mm = (s + e) / 2;
    return min( get(2 * v , s , mm , l , min(r , mm)) , get(2 * v + 1 , mm + 1 , e , max(mm + 1 , l) , r) );
}

int main() {
	//mt19937 myrand(chrono::steady_clock::now().time_since_epoch().count());
    scanf("%d%d%d",&n,&m,&q);
    for(int i=1;i<=n;i++){
        scanf("%d",&a[i]);
        id[ a[i] ] = i;
    }
    for(int i=1;i<=m;i++){
        scanf("%d",&b[i]);
        g[b[i]].push_back(i);
    }
    for(int i=1;i<=m;i++){
        ///
        int x = b[i];
        int ind = id[x] + 1;
        if(ind == n + 1) ind = 1;
        int y = a[ind];
        int it = upper_bound(g[y].begin() , g[y].end() , i) - g[y].begin();
        ///
        if(it == (int)g[y].size()){
            dp[i][0] = m + 1;
        }
        else{
            dp[i][0] = g[y][it];
        }
    }
    for(int j=0;j<=20;j++){
        dp[m + 1][j] = m + 1;
    }
    for(int j=1;j<=20;j++){
        for(int i=1;i<=m;i++){
            dp[i][j] = dp[dp[i][j - 1]][j - 1];
        }
    }
    for(int i=1;i<=m;i++){
        mas[i] = i;
        for(int j=0;j<=20;j++){
            if(((n - 1) >> j) & 1){
                mas[i] = dp[ mas[i] ][j];
            }
        }
    }
    build(1 , 1 , m);
    string answ = "";
    while(q--){
        int l , r;
        scanf("%d%d",&l,&r);
        int pat = get(1 , 1 , m , l , r);
        if(pat <= r)
            answ += '1';
        else
            answ += '0';
    }
    cout<<answ<<endl;
	return 0;
}
