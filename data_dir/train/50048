#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int maxn=1e6+7;
const int inf=1e8;
const ll inff=1e18;
const ll mod=1e9+7;
#define pii pair<int,int>
#define mkp make_pair
#define F first
#define S second
#define sz(v) (int)((v).size())
#define all(v) (v).begin(),(v).end()
#define pb push_back

#ifdef HNO2
#define IOS
#else
#define IOS ios::sync_with_stdio(0); cin.tie(0);
#define endl '\n'
#endif

int n,m;
string s,t;
pii dp[204][204][407];

int Solve(int N,int M,int K)
{
	if (N<0||M<0||K<0) return inf;
	if (dp[N][M][K].F!=inf) return dp[N][M][K].F;
	
	int lasti=(N>0&&s[N-1]=='('?N-1:N),lastj=(M>0&&t[M-1]=='('?M-1:M);
	dp[N][M][K]=min(dp[N][M][K],mkp(Solve(lasti,lastj,K-1)+1,1));
	
	lasti=(N>0&&s[N-1]==')'?N-1:N),lastj=(M>0&&t[M-1]==')'?M-1:M);
	dp[N][M][K]=min(dp[N][M][K],mkp(Solve(lasti,lastj,K+1)+1,2));	
	return dp[N][M][K].F;
}

int32_t main()
{
	IOS
	cin>>s>>t;
	n=s.length();
	m=t.length();
	s+="p",t+="i";
	for (int i=0;i<=n;i++)
		for (int j=0;j<=m;j++)
			for (int k=0;k<=403;k++) dp[i][j][k]=mkp(1e8,inf);
	dp[0][0][0]=mkp(0,0);
	int ret=Solve(n,m,0);
	
	string ans;
	int nown=n,nowm=m,nowk=0;
	while (nown!=0||nowm!=0||nowk!=0)
	{
		if (dp[nown][nowm][nowk].S==1)
		{
			ans.pb('(');
			int lasti=(nown>0&&s[nown-1]=='('?nown-1:nown),lastj=(nowm>0&&t[nowm-1]=='('?nowm-1:nowm);
			nown=lasti,nowm=lastj,nowk=nowk-1;
		}
		else
		{
			ans.pb(')');
			int lasti=(nown>0&&s[nown-1]==')'?nown-1:nown),lastj=(nowm>0&&t[nowm-1]==')'?nowm-1:nowm);
			nown=lasti,nowm=lastj,nowk=nowk+1;
		}
	}
	reverse(all(ans));
	cout<<ans<<endl;
}
