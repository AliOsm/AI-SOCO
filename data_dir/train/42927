#include <iostream>
#include<algorithm>
#include<string>
#include<map>
#include <iterator>
#include<iomanip>
#include <time.h>
#include<vector>
#include<cmath>
#include <cstdio>
#include<queue>
#include<unordered_map>
#include<stack>
#include<list>
#include<stdio.h>
#include<set>
#include <functional>

#define hash_mod 1000000007
#define mod7 1000000007
#define mod9 1000000009
#define mod2 30000000
#define pa(a,b) make_pair(a,b)
#define f first
#define s second
#define pb(a)  push_back(a)
#define all(a) a.begin() , a.end()
#define mem(a, b) memset(a, b, sizeof(a))
#define LL  long long int
#define oo 1e9
#define pi 3.141592653589793238
#define eps  1e-6



LL maxx(LL & a , LL & b){return a>b ?  a : b;}
LL minn(LL & a , LL & b){return a>b ?  b : a;}

using namespace std;
//int dx[] = {1 , -1 , 0 , 0} ;
//int dy[] = {0 , 0 , 1 , -1} ;
void boostIO(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
}
LL gcd(LL a, LL b) {
    return b == 0 ? a : gcd(b, a % b);
}
int int_gcd(int a, int b){
    return b == 0 ? a : int_gcd(b, a % b);
}
LL lcm(LL a , LL b ){
    return a / gcd(a , b) * b;
}
LL poww(LL base, LL exp , LL mod){
  base %= mod;
  LL result = 1;
  while (exp > 0) {
    if (exp & 1) result = (result * base) % mod;
    base = (base * base) % mod;
    exp >>= 1;
  }
  return result;
}
LL base = 131 , pw[100100] , has[100100] , inverse[100100] ;
unordered_map<LL , int> mp  , len ;
int n , m  , dp[100100] ;
vector<int>ans , length  ;
string s , tmp ; vector<string> names ;
void out(){
    for(int i = 0 ; i < ans.size() ; i++){
        cout << names[ans[i] - 1] << ' '  ;
    }

    return ;
}
int solve(int idx){
    if(idx == n + 1){
        out() ;
        exit(0) ;
    }

    int & ret = dp[idx];

    if(ret != -1){
        return ret ;
    }

    ret = 0 ;

    for(int i = 0 ; i < length.size() ; i++){
        int l = idx , r = idx + length[i] - 1 ;
        if(r > n){
            continue ;
        }

        LL temp = (((has[r] - has[l - 1] + hash_mod) % hash_mod) * inverse[l - 1]) % hash_mod ;

        if(mp[temp]  == 0)
            continue ;

        ans.pb(mp[temp]) ;
        solve(idx + length[i]) ;
        ans.pop_back() ;
    }

    return ret ;
}
void process(){
    for(int i = 0 ; i < tmp.size() ; i++){
        if(tmp[i] >= 'A' && tmp[i] <= 'Z'){
            tmp[i] = tmp[i] - 'A' + 'a' ;
        }
    }
    reverse(all(tmp)) ;

    return ;
}
int main()
{
    boostIO() ;

    cin >> n >> s >> m ;

    pw[0] = 1 ; inverse[0] = 1 ;

    for(int i = 1 ; i <= 100000 ; i++){
        pw[i] = (pw[i - 1] * base) % hash_mod ;
        inverse[i] = poww(pw[i] , hash_mod - 2 , hash_mod) ;
    }

    while(m--){
        cin >> tmp ;
        if(tmp.size() > n)
            continue ;
        string t = tmp ;
        process() ;
        LL h = 0 ;

        for(int i = 0 ; i < tmp.size() ; i++){
            h = (h + pw[i] * tmp[i]) % hash_mod ;
        }

        if(!mp.count(h)){
            names.pb(t) ;
            mp[h] = names.size() ;
            if(len[t.size()] == 0){
                length.pb(t.size()) ;
                len[t.size()] = 1 ;
            }
        }
    }

    m = names.size() ;

    for(int i = 1 ; i <= n ; i++){
        has[i] = (has[i - 1] + pw[i - 1] * s[i - 1]) % hash_mod ;
    }

    mem(dp , -1) ;

    solve(1) ;

    return 0 ;
}
