#include<bits/stdc++.h>

#define ll long long
#define Add_Speed ios_base::sync_with_stdio(0);cin.tie(NULL);
#define pb push_back
#define mp make_pair
#define f first
#define pii pair<int, int>
#define sz size()
#define s second
#define ppi pair<int, pair<int, int> >
#define all(s) s.begin(), s.end()
#define int ll
#define file(s) freopen(s".in","r",stdin); freopen(s".out","w",stdout);
#define inf INT_MAX

using namespace std;

const int maxn = 102;
const int mod = (int)1e9 + 9;
const int K = 1e6;
const int maxlog = (int)17;
const int P = mod;

int n, a[maxn], k;
ll S;
map<int, int> cnt[28], f;
main () {
	Add_Speed;
	cin >> n >> k >> S;
	f[0] = 1;
	int num = 1;
	while(num <= 18){
		f[num] = f[num - 1] * 1ll * num	;
		num++;
	}
	for(int i = 0; i < n; i++) cin >> a[i];
	int hlf = n / 2;
	for(int i = 0; i < (1 << hlf); i++){
		for(int s = i; ; s = (s - 1) & i){
			if(__builtin_popcount(s) <= k){
				int sum = 0;
				for(int pos = 0; pos < hlf; pos++){
					if(((i >> pos) & 1) && ((s >> pos) & 1)){
                        if(a[pos] > 18){
                            sum = -1;
                            break;
                        }
						sum += f[a[pos]];
					}else if((i >> pos) & 1){
						sum += a[pos];
					}
				}
				if(sum > S || sum < 0){
                    if(!s) break;
                    continue;
				}
				cnt[__builtin_popcount(s)][sum]++;
				if(!s) break;
			}
		}
	}
	int ans = 0;
	for(int i = 0; i < (1 << (n - hlf)); i++){
		for(int s = i; ; s = (s - 1) & i){
			if(1){
				int sum = 0;
				for(int pos = 0; pos < n - hlf; pos++){
					if(((i >> pos) & 1) && ((s >> pos) & 1)){
						if(a[pos + hlf] > 18){
                            sum = -1;
                            break;
						}
						sum += f[a[pos + hlf]];
					}else if((i >> pos) & 1){
						sum += a[pos + hlf];
					}
				}
				if(sum > S || sum < 0){
                    if(!s) break;
                    continue;
				}
				for(int j = 0; j <= k - __builtin_popcount(s); j++){
					if(cnt[j].count(S - sum)) ans += cnt[j][S - sum];
				}
				if(!s) break;
			}
		}
	}
	cout << ans;
}
