#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cctype>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <unordered_map>
#include <queue>
#include <stack>
#include <algorithm>
#include <functional>
#include <iomanip>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define nl cout<<'\n'
#define ff first
#define ss second
#define READ freopen("input.txt","r",stdin);
#define WRITE    freopen("output.txt","w",stdout);
#define fill(a,x) memset(a,x,sizeof(a));
#define loop(i,x,n) for(int i=x;i<n;i++)
#define TC() ll ttwea;cin>>ttwea;while(ttwea--)
#define ll long long
#define mod 1000000007
#define vi vector<ll>
#define pb push_back
#define mp make_pair
#define all(a) a.begin(), a.end()
#define ull unsigned long long
#define N 4000010
#define inf 10000000000000000
#define debug1(x) cerr << #x << ": " << x <<'\n'
#define debug2(x, y) cerr << #x << ": " << x << '\t' << #y << ": " << y <<'\n'
#define debug3(x, y, z) cerr << #x << ": " << x << '\t' << #y << ": " << y << '\t' << #z << ": " << z <<'\n'
using namespace std;
//ll dx[]={1,0,-1,0};ll dy[]={0,1,0,-1}; //4 Direction
//ll dx[]={1,1,0,-1,-1,-1,0,1};ll dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
ll gcd(ll x,ll y)
{
    if(y==0)
        return x;
    else
        return gcd(y,x%y);
}
ll expo(ll n,ll m,ll p)   //MODULAR EXPONENTIATION
{
    ll r=1;
    while(m>0)
    {
        if(m%2)
            r=(r*n)%p;
        n=(n*n)%p;
        m=m/2;
    }
    return r%p;
}
bool f(ll n)
{
	string t;
	while(n)
	{
		t.pb(n%10+'0');
		n=n/10;
	}
	string r=t;
	reverse(all(r));
	if(r==t)
		return true;
	return false;
}
int main()
{
 
   IOS;
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin); 
   freopen("output.txt","w",stdout);
   #endif
   /********************* Code starts here ************************/
   ll n,x,k;
   cin>>n>>x>>k;
   vi a(n);
   loop(i,0,n)
   cin>>a[i];
   sort(all(a));
   ll ans=0;
   if(k==0)
   {
   	for(ll i=0;i<n;i++)
   	{
   		if(a[i]%x==0)
   			continue;
   		ll end1=a[i],end2=(a[i]/x+1)*x-1;
   		ll l=lower_bound(all(a),end1)-a.begin();
 		ll r=upper_bound(all(a),end2)-a.begin();
 		//debug2(end1,end2);
 		//debug2(l,r);
 		ans=r-l+ans;
   	}
   	cout<<ans;
   	return 0;
   }
   for(ll i=0;i<n;i++)
   {
 	ll end1,end2;
 	if(a[i]%x==0)
 	{
 		end2=(a[i]/x+k)*x-1;
 		end1=(a[i]/x+k-1)*x;
 		if(k==0)
 			continue;
 	}
 	else
 		end1=(a[i]/x+k)*x,end2=(a[i]/x+k+1)*x-1;
 	ll l=lower_bound(all(a),end1)-a.begin();
 	ll r=upper_bound(all(a),end2)-a.begin();
 	//debug2(end1,end2);
 	//debug2(l,r);
 	ans=r-l+ans;
   }
   cout<<ans;
} 