#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <iterator> 
using namespace std;
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf 1000000
#define pii pair<int, int>
const int mod = (1e9) + 7;
const double eps = 1e-6;
const int siz = 2e5 + 5, siz2 = 1e5 + 5;
int n, k, modv = 998244353, dp[501][501], ver[501][501], ans, iter, save1[501], save2[501];
int add(int a, int b) {
	return (a + b) % modv;
}
int mul(ll a, int b) {
	return (a*b) % modv;
}
int sub(int a, int b) {
	return (a - b + modv) % modv;
}
int solve(int i, int j, int v) {
	if (ver[i][j] == iter) {
		return dp[i][j];
	}
	ver[i][j] = iter;
	if (j > v) {
		return dp[i][j] = 0;
	}
	if (i == n) {
		return dp[i][j] = 1;
	}
	return dp[i][j] = add(solve(i + 1, j + 1, v), solve(i + 1, 1, v));
}
int main()
{
	scanf("%d%d", &n, &k);
	for (int i = 1; i <= n; i++) {
		iter = i;
		solve(0, 0, i);
		solve(1, 1, i);
		save1[i] = dp[0][0];
		save2[i] = dp[1][1];
	}
	for (int i = 1; i <= min(n, k-1); i++) {
		ans = add(ans, mul(sub(save1[i], save1[i-1]), save2[min((k-1)/i, n)]));
	}
	printf("%d\n", ans);
	return 0;
}