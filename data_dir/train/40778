#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int) 1.01e9;
const ld EPS = 1e-9;

const ld PI = acos(-1.0L);

void precalc() {
}

const int maxn = 100 + 10;
int n;

ld ps[maxn];

bool read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    int x;
    scanf("%d", &x);
    ps[i] = (ld) x / 100;
  }
  return 1;
}

ld lose[maxn];

long long tm0;

void solve() {
  for (int i = 0; i < n; ++i) {
    lose[i] = 1;
  }
  ld res = 0;
  for (int iter = 0;; ++iter) {
    if (!(iter % 1000) && clock() >= tm0) {
      break;
    }
    ld P = 1;
    for (int i = 0; i < n; ++i) {
      P *= (1 - lose[i]);
    }
    res += (1 - P);

    int v = -1;
    ld res = -1;
    for (int i = 0; i < n; ++i) {
      ld cur = ps[i] * lose[i] / (1 - lose[i]);
      if (res < cur) {
        res = cur;
        v = i;
      }
    }
    lose[v] *= (1 - ps[v]);
    //eprintf("%.3e\n", (double) lose[v]);
  }
  printf("%.18f\n", (double) res);
}

int main() {
  tm0 = 1.7 * CLOCKS_PER_SEC;

  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time: %.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
