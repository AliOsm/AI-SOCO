#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;
//template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define X first
#define Y second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
#define debug(x) cerr << #x << " : " << (x) << endl
const double PI = 3.14159265358979323846;
const double eps = (1e-5);
int isGreater(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}


int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    int t;
    cin >> t;
    while(t--)
    {
        int n;
        string s;
        cin >> n >> s;
        vector<pair<int, int> > occ(10, {n, -1});
        for (int i = 0; i < n; ++i)
        {
            int d = s[i] - '0';
            if (occ[d].first == n)
                occ[d].first = i;
            occ[d].second = i;
        }
        vector<bool> isOne(n);
        int curD = 0, minElement = 10;
        for (int i = 0; i < n; ++i)
        {
            while(curD <= 9 && i > occ[curD].second)
                curD++;
            if (curD > minElement)
                break;
            if (s[i] - '0' == curD)
                isOne[i] = true;
            else
                minElement = min(minElement, s[i] - '0');
        }

        string res;
        for (int i = 0; i < n; ++i)
            if (isOne[i])
                res += s[i];
        for (int i = 0; i < n; ++i)
            if (!isOne[i])
                res += s[i];
        bool ok = true;
        for (int i = 1; i < n; ++i)
        {
            if (res[i] < res[i - 1])
            {
                ok = false;
                break;
            }
        }
        if (ok)
        {
            for (int i = 0; i < n; ++i)
            {
                if (isOne[i])
                    cout << 1;
                else
                    cout << 2;
            }
        }
        else
            cout << '-';
        cout << '\n';
    }

    return 0;
}