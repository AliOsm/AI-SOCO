# include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 2;

struct st{
      int l, r, cnt;
      st(){
            l = r = cnt = 0;
      }
}t[N * 18];

int n, q, k, a[N], b[N];
int root[N], sz;
vector <int> v[N];

void update(int ov, int nv, int pos, int tl = 0, int tr = n){
      if(tl == tr){
            t[nv].cnt = t[ov].cnt + 1;
      } else {
            int tm = (tl + tr) >> 1;
            if(pos <= tm){

                  t[nv].l = ++ sz;
                  t[nv].r = t[ov].r;
                  update(t[ov].l, t[nv].l, pos, tl, tm);
            } else {
                  t[nv].r = ++ sz;
                  t[nv].l = t[ov].l;
                  update(t[ov].r, t[nv].r, pos, tm + 1, tr);
            }
            t[nv].cnt = t[ t[nv].l ].cnt + t[ t[nv].r ].cnt;
      }
}

int get(int ov, int nv, int x, int tl = 0, int tr = n){
      if(tl > x || t[nv].cnt - t[ov].cnt <= 0) return 0;
      if(tr <= x)
            return t[nv].cnt - t[ov].cnt;
      int tm = (tl + tr) >> 1;
      return get(t[ov].l, t[nv].l, x, tl, tm) +
                  get(t[ov].r, t[nv].r, x, tm + 1, tr);
}

int main(){
      cin >> n >> k;

      for(int i = 1; i <= n; i ++){
            scanf("%d", &a[i]);
            v[a[i]].push_back(i);
            if(v[a[i]].size() > k){
                  b[i] = v[a[i]][v[a[i]].size() - k - 1];
            }
            root[i] = ++ sz;
            update(root[i - 1], root[i], b[i]);
      }

      int last = 0;
      cin >> q;
      while(q --){
            int x, y;
            scanf("%d %d", &x, &y);
            x = (last + x) % n + 1;
            y = (last + y) % n + 1;
            if(x > y) swap(x, y);
            last = get(root[x - 1], root[y], x-1);
            printf("%d\n", last);
      }
}
