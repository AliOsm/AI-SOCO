#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <iterator> 
#include <bitset>
using namespace std;
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf 1000000
#define pii pair<int, int>
#define pll pair<ll, ll>
#pragma GCC optimize ("O3")
//#define x first
//#define y second
const int mod = (1e9) + 7;
const double eps = 1e-10;
const int siz = 4e5 + 5;
int q, last, t, c=1, treesz[siz], root[siz], rtxor[siz];
map<int, int> tosml;
int getsml(int v) {
	int &sml = tosml[v];
	return sml > 0 ? sml : (sml = c++);
}
void initdsu() {
	for (int i = 1; i <= 2 * q; i++) {
		treesz[i] = 1;
		root[i] = i;
	}
}
void getrtv(int i, int &rt, int &v) {
	int res = 0;
	while (i != root[i]) {
		rtxor[i] ^= rtxor[root[i]];
		res ^= rtxor[i];
		root[i] = root[root[i]];
		i = root[i];
	}
	rt = i;
	v = res;
}
void addchild(int u, int v, int x) {
	root[v] = u;
	treesz[u] += treesz[v];
	rtxor[v] = x;
}
void join(int l, int r, int x) {
	if (treesz[l] > treesz[r]) {
		addchild(l, r, x);
	}
	else {
		addchild(r, l, x);
	}
}
int main()
{
	scanf("%d", &q);
	initdsu();
	while (q--) {
		scanf("%d", &t);
		int l, r;
		scanf("%d%d", &l, &r);
		l ^= last;
		r ^= last;
		if (l > r) {
			swap(l, r);
		}
		r++;
		l = getsml(l);
		r = getsml(r);
		int lrt = 0, lv = 0, rrt = 0, rv = 0;
		getrtv(l, lrt, lv);
		getrtv(r, rrt, rv);
		if (t == 1) {
			int x;
			scanf("%d", &x);
			x ^= last;
			if (lrt != rrt) {
				join(lrt, rrt, lv^rv^x);
			}
		}
		else {
			if (lrt != rrt) {
				last = -1;
			}
			else {
				last = lv ^ rv;
			}
			printf("%d\n", last);
			if (last == -1) {
				last = 1;
			}
		}
	}
	return 0;
}