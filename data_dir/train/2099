#include <iostream>
#include <vector>
#include <string.h>
#include <deque>
#include <queue>
#include <algorithm>
#include <set>
#include <map>
#include <sstream>
#include <stack>
#include <iomanip>
#include <fstream>
#include <assert.h>
#include <cmath>
#include <climits>
#include <functional>
#include <complex>
#include <cmath>
#define fi first
#define se second
#define th second
#define FI first
#define SE second.first
#define TH second.second

using namespace std;

typedef long long ll;
typedef pair<ll, ll> ii;
typedef pair<ll, ii> iii;
typedef long double ld;
typedef complex<double> cd;

const int maxN = 1e6 + 9, lg = 19, MOD = 1e9 + 7 , maxV = 1e2 + 9;
const ll SINF = 1e18, INF = 1e9;

int n, ct = 1;
iii arr[maxN];
ii hl[maxN];

ll pclave(ii one, ii two){
    ll ret = (one.fi - two.fi) / (two.se - one.se);
    return max(0LL, min(ret, INF));
}

ll getProfit(ll time){
    int l = 0, r = ct, m;
    while(l + 1 < r){
        m = (l + r) / 2;
        if(pclave(hl[m], hl[m - 1]) >= time)
            l = m;// a huevo prro, ve por mas!
        else
            r = m;// te mamaste, bajale de huevos
    }
    return max(0LL, hl[l].fi + hl[l].se * time);
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    cin >> n;
    for(int i = 0; i < n; i++)
        cin >> arr[i].FI >> arr[i].SE >> arr[i].TH;
    
    sort(arr, arr + n);
    
    hl[0] = ii(-SINF, INF);

    for(int i = 0; i < n; i++){
        
        ii cr(arr[i].FI * arr[i].SE + getProfit(arr[i].SE) - arr[i].TH, -arr[i].FI);

        while(1){
            ll punto = pclave(hl[ct - 2], hl[ct - 1]);
            if(ct == 1 || cr.fi + cr.se * punto < hl[ct - 1].fi + hl[ct - 1].se * punto) break;
            ct--;
        }
        if(cr.fi > hl[ct - 1].fi)
            hl[ct++] = cr;
    }
    cout << max(0LL, hl[ct - 1].fi) << '\n';
}

/*
 
 3
1 5 0
4 4 8
5 2 10
 
 4
1 6 2
2 4 3
5 3 8
6 2 4

 */

