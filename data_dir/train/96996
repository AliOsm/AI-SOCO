#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <vector>
#define pb push_back
using namespace std;
const int maxn=1e6+10;
int n,m,v[maxn],pre[maxn],nxt[maxn],q[maxn],id[maxn],l[maxn],r[maxn];
long long a[3][maxn],ans[maxn];
vector<int>cg[maxn],qy[maxn];
inline int lowbit(int x){return x&(-x);}
void add(int id,int x,long long k){while (x<=n) {a[id][x]+=k; x+=lowbit(x);}}
long long qury(int id,int x){long long sum=0; while (x) {sum+=a[id][x]; x-=lowbit(x);} return sum;}
void solve1()
{
	for (int i=1;i<=n;i++) 
	{
		qy[i].clear(); cg[i].clear();
		a[1][i]=0; a[2][i]=0;
	}
	for (int i=1;i<=n;i++) cg[pre[i]].pb(i);
	for (int i=1;i<=m;i++) qy[l[i]].pb(i);
	for (int i=1;i<=n;i++) add(1,i,pre[i]);
	for (int i=1;i<=n;i++)
	{
		for (auto j:cg[i-1]) {add(1,j,-pre[j]); add(2,j,1);}
		for (auto j:qy[i])
		{
			ans[j]-=qury(1,r[j])-qury(1,l[j]-1);
			ans[j]-=(qury(2,r[j])-qury(2,l[j]-1))*i;
		}
	}
	//for (int i=1;i<=m;i++) printf("%lld%c",ans[i],(i==m?'\n':' '));
}
void solve2()
{
	for (int i=1;i<=n;i++) 
	{
		qy[i].clear(); cg[i].clear();
		a[1][i]=0; a[2][i]=0;
	}
	for (int i=1;i<=n;i++) cg[nxt[i]].pb(i);
	for (int i=1;i<=m;i++) qy[r[i]].pb(i);
	for (int i=1;i<=n;i++) add(1,i,nxt[i]);
	for (int i=n;i>=1;i--)
	{
		for (auto j:cg[i+1]) {add(1,j,-nxt[j]); add(2,j,1);}
		for (auto j:qy[i])
		{
			ans[j]+=qury(1,r[j])-qury(1,l[j]-1);
			ans[j]+=(qury(2,r[j])-qury(2,l[j]-1))*i;
		}
	}
}
int main()
{
	scanf("%d%d",&n,&m);
	for (int i=1;i<=n;i++) scanf("%d",&v[i]);
	int top=0;
	for (int i=1;i<=n;i++)
	{
		while (top && q[top]<v[i]) top--;
		pre[i]=(top?id[top]+1:1);
		q[++top]=v[i]; id[top]=i;
	}
	top=0;
	for (int i=n;i>=1;i--)
	{
		while (top && q[top]<v[i]) top--;
		nxt[i]=(top?id[top]-1:n);
		q[++top]=v[i]; id[top]=i;
	}
	//for (int i=1;i<=n;i++) printf("lalal %d %d %d\n",i,pre[i],nxt[i]);
	for (int i=1;i<=m;i++) scanf("%d",&l[i]);
	for (int i=1;i<=m;i++) scanf("%d",&r[i]);
	for (int i=1;i<=m;i++) ans[i]=r[i]-l[i]+1;
	solve1(); solve2();
	for (int i=1;i<=m;i++) printf("%lld%c",ans[i],(i==m?'\n':' '));
return 0;
}