#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MX = 200005;

double intersect(pair<double, double> A, pair<double, double> B) {
	return max(0.0, min(A.second, B.second) - max(A.first, B.first));
}

double sy, line_L, line_R;

int n;
pair<double, double> segments[MX];
double S_len[MX];

double Calc(double X, double Y) {
	double factor = (Y + -sy) / Y;
	
	int r_interesting = 0;
	{
		int L = 1, R = n;
		while (L <= R) {
			int M = (L + R) / 2;
			double x = X + (segments[M].first - X) * factor;
			if (x < line_R) {
				r_interesting = M;
				L = M + 1;
			}
			else {
				R = M - 1;
			}
		}
	}
	int l_interesting = n + 1;
	{
		int L = 1, R = n;
		while (L <= R) {
			int M = (L + R) / 2;
			double x = X + (segments[M].second - X) * factor;
			if (x > line_L) {
				l_interesting = M;
				R = M - 1;
			}
			else {
				L = M + 1;
			}
		}
	}
	
	if (l_interesting > r_interesting) return 0;
	
	double len = 0;
	len += intersect({line_L, line_R}, {X + (segments[l_interesting].first - X) * factor, X + (segments[l_interesting].second - X) * factor});
	l_interesting++;
	if (l_interesting > r_interesting) return len;
	len += intersect({line_L, line_R}, {X + (segments[r_interesting].first - X) * factor, X + (segments[r_interesting].second - X) * factor});
	r_interesting--;
	if (l_interesting > r_interesting) return len;
	len += (S_len[r_interesting] - S_len[l_interesting - 1]) * factor;
	
	return len;
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	ignore = scanf("%lf %lf %lf", &sy, &line_L, &line_R);
	
	ignore = scanf("%d", &n);
	for (int i = 1; i <= n; i++) {
		int l, r;
		ignore = scanf("%d %d", &l, &r);
		segments[i].first = l;
		segments[i].second = r;
	}
	for (int i = 1; i <= n; i++) {
		S_len[i] = S_len[i - 1] + segments[i].second - segments[i].first;
	}
	
	int q;
	ignore = scanf("%d", &q);
	
	cout << setprecision(15) << fixed;
	
	while (q--) {
		int x, y;
		ignore = scanf("%d %d", &x, &y);
		cout << Calc(x, y) << "\n";
	}
}
