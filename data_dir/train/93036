#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>
using namespace std;

int n;
int v1[100500];
int v2[100500];
int l[100500];
int add[100500];
vector<int> g[100500];
int wei[100500];
long long koeff[100500];
bool used[100500];

int dfs(int v) {
    used[v] = 1;
    wei[v] = 1;
    for(int i = 0; i < g[v].size(); i++) {
            int to = g[v][i];
            if (used[to] == 0) wei[v] += dfs(to);
    }
    return wei[v];
}


int main() {
    ios_base::sync_with_stdio(0);
    cin >> n;
    for(int i = 0; i < 100500; i++) used[i] = 0;
    for(int i = 1; i < n; i++) {
            cin >> v1[i] >> v2[i] >> l[i];
            g[v1[i]].push_back(v2[i]);
            g[v2[i]].push_back(v1[i]);
    }
    dfs(1);
    for(int i = 1; i < n; i++) {
            add[i] = min(wei[v1[i]], wei[v2[i]]);
    }
    long double zn = (long long)n * (n - 1) * (n - 2) / 6.0;
    long double ans = 0;
    for(int i = 1; i < n; i++) {
            koeff[i] = 0;
            koeff[i] += (long long)add[i] * (add[i] - 1) * (n - add[i]);
            koeff[i] += (long long)add[i] * (n - add[i]) * (n - add[i] - 1);
            ans += koeff[i] / zn * l[i];
    }
    //cout << ans << endl;
    int q;
    cin >> q;
    for(int i = 1; i <= q; i++) {
            int num, nw;
            cin >> num >> nw;
            ans -= koeff[num] / zn * l[num];
            l[num] = nw;
            ans += koeff[num] / zn * l[num];
            cout << fixed << setprecision(10) << ans << "\n";
    }
    
            
            
    //system("pause");
    return 0;
}
