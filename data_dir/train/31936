#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int P = 110;
const int N = 17;
int n, m;

string p[N];
string t[N];

int valp[N];
int valt[N];

int dp[1 << N];
int sm[1 << N];
int pa[1 << N];

vec <string> ans[N];

string element[110] = {"","H","He","Li","Be","B","C","N","O","F","Ne","Na","Mg","Al","Si","P","S","Cl","Ar","K","Ca","Sc","Ti","V","Cr","Mn","Fe","Co","Ni","Cu","Zn","Ga","Ge","As","Se","Br","Kr","Rb","Sr","Y","Zr","Nb","Mo","Tc","Ru","Rh","Pd","Ag","Cd","In","Sn","Sb","Te","I","Xe","Cs","Ba","La","Ce","Pr","Nd","Pm","Sm","Eu","Gd","Tb","Dy","Ho","Er","Tm","Yb","Lu","Hf","Ta","W","Re","Os","Ir","Pt","Au","Hg","Tl","Pb","Bi","Po","At","Rn","Fr","Ra","Ac","Th","Pa","U","Np","Pu","Am","Cm","Bk","Cf","Es","Fm"};
map <string, int> ind;

inline int lg(int x) {
    return 31 - __builtin_clz(x);
}

void prepr() {
    for(int i = 0; i < 110; ++i) {
        ind[element[i]] = i;
    }
}

void input() {
    cin >> n >> m;
    for(int i = 0; i < n; ++i) {
        cin >> p[i];
        valp[i] = ind[p[i]];
    }
    for(int i = 0; i < m; ++i) {
        cin >> t[i];
        valt[i] = ind[t[i]];
    }
}

void path(int mask, int i) {
    if(i == -1) {
        return;
    }
    int prev = pa[mask];
    int diff = mask ^ prev;
    for(int j = 0; j < n; ++j) {
        if((diff >> j) & 1) {
            ans[i].pb(p[j]);
        }
    }
    path(prev, i - 1);
}

void solve() {
    for(int i = 1; i < (1 << n); ++i) {
        sm[i] = sm[i ^ lsb(i)] + valp[lg(lsb(i))];
    }
    memset(dp, -1, sizeof dp);
    dp[0] = 0;
    for(int i = 0; i < (1 << n); ++i) {
        int x = (1 << n) - 1 - i;
        int v = dp[i];
        if(v == -1) {
            continue;
        }
        for(int mask = x; mask; mask = (mask - 1) & x) {
            if(sm[mask] == valt[v]) {
                dp[i ^ mask] = v + 1;
                pa[i ^ mask] = i;
            }
        }
    }
    if(dp[(1 << n) - 1] == m) {
        cout << "YES\n";
    } else {
        cout << "NO\n";
        return;
    }
    path((1 << n) - 1, m - 1);
    for(int i = 0; i < m; ++i) {
        for(int j = 0; j < len(ans[i]); ++j) {
            cout << ans[i][j] << (j == len(ans[i]) - 1? "->": "+");
        }
        cout << t[i] << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    prepr();
    input();
    solve();
}
