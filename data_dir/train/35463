#include<bits/stdc++.h>
using namespace std;

#define int           long long 
#define S             second
#define F             first
#define pb            push_back
#define ppb           pop_back()
#define ppb           pop_back()
#define B(c)          (c).begin()
#define E(c)          (c).end()
#define all(c)        (c).begin(),(c).end()
#define rall(c)       (c).rbegin(),(c).rend() 
#define lb            lower_bound
#define si(c)         (int)((c).size())
#define lcm(a,b)      (a * (b / __gcd(a,b)))  
#define inf           (int)(1e18)
#define err           cerr << "move" << '\n';
#define endl          '\n'
#define pow(x, n)     (int)(pow(x, n))
#define mp            make_pair

typedef vector<int>                           vi;
typedef pair<int,int>                         pii;
typedef vector<pii>                           vpi;
typedef vector<vector<int> >                  vvi;;
typedef priority_queue<pii, vector<pii>, greater<pii> > pq;

int cnt[1000007], p[1000007];

struct FenwickTree{
    vector<long long > f;
    int N;
    FenwickTree(int n){
        f.resize(n+3);
        N = n+3;
    }
    void insert(int k, int x){
        while(k < N){
            f[k] += x;
            k += k&(-k);
        }
    }
    int sum(int r){
        int ans = 0;
        while(r > 0){
            ans += f[r];
            r -= r&(-r);
        }
        return ans;
    }
    int sumlr(int l, int r){
        if(r < l)swap(l, r);
        return sum(r) - sum(l-1);
    }
};

void solve(){
    int n, m;
    cin >> n >> m;
    int a[n+1];
    FenwickTree f(n);
    set<int> s;
    for(int i = 2; i <= 1e6; i++){
        if(p[i])continue;
        for(int j = i; j <= 1e6; j += i)if(!p[j])p[j] = i;
    }
    cnt[1] = 1;
    for(int i = 2; i <= 1e6; i++){
        int ans = 1, x = i;
        map<int, int> prim;
        while(x != 1){
            prim[p[x]]++;
            x /= p[x];
        }
        for(auto it = B(prim); it != E(prim); it++){
            ans *= ((it->S)+1);
        }
        cnt[i] = ans;
    }
    for(int i = 1; i <= n; i++){
        cin >> a[i];
        s.insert(i);
        f.insert(i, a[i]);
    }
    for(int i = 1; i <= m; i++){
        int t, l, r;
        cin >> t >> l >> r;
        if(t == 1){
            auto it = s.lb(l);
            vi v;
            while(it != E(s) && *it <= r){
                if(cnt[a[*it]] <= 2) v.pb(*it);
                f.insert(*it, -a[*it]);
                f.insert(*it, cnt[a[*it]]);
                a[*it] = cnt[a[*it]], it++;
            }
            for(auto u : v)s.erase(u);
        }
        else{
            cout << f.sumlr(l, r) << endl;
        }
    }
}

signed main(){

    ios_base::sync_with_stdio(0); 
    cin.tie(0); cout.tie(0);   

    int t = 1;
    clock_t start, end; 
    start = clock(); 

    cout << fixed << setprecision(15);

    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
    #endif
    
    //cin >> t;

    while(t--){
        solve();
    }

    end = clock();
    double time_taken = double(end - start) / double(CLOCKS_PER_SEC); 
    //cerr<<time_taken;
}