#include <bits/stdc++.h>
#define int long long

using namespace std;
int parent[505];
int lft[10005][505];
int rgt[10005][505];
int sz[505];
int cnt1[1005],cnt2[1005];

int initial(int a)
{
    parent[a]=a;
    sz[a]=1;
}

int find_parent(int a)
{
    if(parent[a]!=a)
        return parent[a]=find_parent(parent[a]);
    return parent[a];
}

int merge(int a,int b)
{
    a=find_parent(a);
    b=find_parent(b);
    if(a!=b)
    {
        if(sz[a]<sz[b])
            swap(a,b);

        sz[a]+=sz[b];
        parent[b]=a;
        return 1;
    }
    return 0;
}

signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);


    int n,m;
    cin>>n>>m;
    for (int i = 1; i <= n; ++i) {
        initial(i);
    }

    int x[m+1],y[m+1];
    int count=0;
    for (int i = 1; i <= m; ++i) {
        cin>>x[i]>>y[i];
        merge(x[i],y[i]);
        for (int j = 1; j <=n ; ++j) {
            lft[i][j]=find_parent(j);
        }
    }

    for (int i = 1; i <=n ; ++i) {
        initial(i);
    }

    for (int i = m; i >=1; --i) {
        merge(x[i],y[i]);
        for (int j = 1; j <=n ; ++j) {
            rgt[i][j]=find_parent(j);
        }
    }

    int q;
    cin>>q;
    while (q--)
    {
        int l,r;
        cin>>l>>r;
        for (int i = 1; i <=n ; ++i) {
            initial(i);
        }

        count=n;
        for (int i = 1; i <= n; ++i) {
            if(l>1)
                count-=merge(lft[l-1][i],i);
            if(r<m)
                count-=merge(rgt[r+1][i],i);
        }

        cout<<count<<"\n";
    }
}
