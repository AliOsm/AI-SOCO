#pragma GCC optimize(2)
#pragma GCC optimize(3)
#pragma GCC optimize(4)
#include<bits/stdc++.h>
using namespace std;
#define y1 y11
#define fi first
#define se second
#define pi acos(-1.0)
#define LL long long
//#define mp make_pair
#define pb emplace_back
#define ls rt<<1, l, m
#define rs rt<<1|1, m+1, r
#define ULL unsigned LL
#define pll pair<LL, LL>
#define pli pair<LL, int>
#define pii pair<int, int>
#define piii pair<pii, int>
#define pdd pair<double, double>
#define mem(a, b) memset(a, b, sizeof(a))
#define debug(x) cerr << #x << " = " << x << "\n";
#define fio ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
//head

const int N = 5e3 + 10, M = 1e4 + 10;
const int B = 5e3 + 5;
int x1, x2, y1, y2, n;
struct H{
    int x1, x2, y;
    bool operator < (const H & rhs) const {
        return x2 < rhs.x2;
    }
};
struct V{
    int y1, y2, x;
    bool operator < (const V & rhs) const {
        return x < rhs.x;
    }
};
struct Bit {
    int bit[M];
    inline void init() {
        mem(bit, 0);
    }
    inline void add(int x, int a) {
        x += B;
        while(x < M) bit[x] += a, x += x&-x;
    }
    inline int sum(int x) {
        int ans = 0;
        x += B;
        while(x) ans += bit[x], x -= x&-x;
        return ans;
    }
}b;
vector<H> h;
vector<V> v;
vector<pii> vc;
int main() {
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i) {
		scanf("%d %d %d %d", &x1, &y1, &x2, &y2);
		if(x1 == x2) v.pb(V{min(y1, y2), max(y1, y2), x1});
		else h.pb(H{min(x1, x2), max(x1, x2), y1});
	}
	if(v.size() < 2 || h.size() < 2) return 0*puts("0");
	LL ans = 0;
    sort(v.begin(), v.end());
    sort(h.begin(), h.end());
    for (int i = 0; i < v.size(); ++i) {
        for (int j = 0; j < h.size(); ++j) {
            if(h[j].x1 <= v[i].x && v[i].y1 <= h[j].y && h[j].y <= v[i].y2) {
                b.add(h[j].y, 1);
                vc.pb(h[j].x2, h[j].y);
            }
        }
        int l = 0;
        for (int j = i+1; j < v.size(); ++j) {
            while(l < vc.size() && vc[l].fi < v[j].x) {
                b.add(vc[l].se, -1);
                ++l;
            }
            int nn = b.sum(v[j].y2)-b.sum(v[j].y1-1);
            ans += nn*1LL*(nn-1)/2;
        }
        b.init();
        vc.clear();
    }
    printf("%lld\n", ans);
    return 0;
}
