# include <bits/stdc++.h>

# define pb push_back
# define fr first
# define sc second
# define mk make_pair

using namespace std;

const int inf = 1e9 + 7;
const int N = 1005;

typedef long long ll;

int n, m, k, a, b, x, y, dis[N][N][3];
char c[N][N];
queue < pair <int, int> > q;

bool check(int x, int y)
{
      if(x < 0 || x > n || y < 0 || y > m || dis[x][y][0] || dis[x][y][1] || dis[x][y][2] || c[x][y] != '.') return false;
      return true;
}

int main()
{
      cin >> n >> m >> k;

      for(int i = 1; i <= n; i ++)
      {
            scanf("\n");
            for(int j = 1; j <= m; j ++)
                  scanf("%c", &c[i][j]);
      }

      cin >> a >> b >> x >> y;

      q.push(mk(a, b));
      dis[a][b][0] = 1;

      while(!q.empty())
      {
            int a = q.front().fr, b = q.front().sc, mx = max(dis[a][b][0], max(dis[a][b][1], dis[a][b][2]));
            q.pop();
            for(int i = 1; i <= k; i ++)
                  if(check(a, b + i))
                  {
                        q.push(mk(a, b + i));
                        dis[a][b + i][1] = mx + 1;
                  }
                  else if(dis[a][b + i][2] > mx) continue;
                  else break;
            for(int i = 1; i <= k; i ++)
                  if(check(a, b - i))
                  {
                        q.push(mk(a, b - i));
                        dis[a][b - i][1] = mx + 1;
                  }
                  else if(dis[a][b - i][2] > mx) continue;
                  else break;
            for(int i = 1; i <= k; i ++)
                  if(check(a + i, b))
                  {
                        q.push(mk(a + i, b));
                        dis[a + i][b][2] = mx + 1;
                  }
                  else if(dis[a + i][b][1] > mx) continue;
                  else break;
            for(int i = 1; i <= k; i ++)
                  if(check(a - i, b))
                  {
                        q.push(mk(a - i, b));
                        dis[a - i][b][2] = mx + 1;
                  }
                  else if(dis[a - i][b][1] > mx) continue;
                  else break;
      }

      cout << max(dis[x][y][0], max(dis[x][y][1], dis[x][y][2])) - 1 << endl;
}
