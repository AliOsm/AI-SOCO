#include<bits/stdc++.h>

using namespace std;

typedef long long LL;
typedef pair<int,int> PII;

const int MAX = (1e4) + 5;
const LL inf = (1e15);

vector<int> positions;
int l[MAX], r[MAX];
LL dp[MAX];

int main()
{
    ios::sync_with_stdio(false);
    ///freopen("in.txt", "r", stdin);
    int x, u, v, n;

    cin >> n >> x; positions.push_back( x );
    for(int i = 0; i < n; i++){
        cin >> u >> v; l[i] = u; r[i] = v;
        positions.push_back( u ); positions.push_back(v);
    }

    sort(positions.begin(), positions.end());
    int p = positions.size();
    for(int i = 0; i < p; i++) dp[i] = abs(x - positions[i]);

    for(int oo = 0; oo < n; oo++)
    {
        u = l[oo]; v = r[oo];

        for(int i = 0; i < p; i++)
        {
            if(u <= positions[i] && positions[i] <= v) continue;
            dp[i] = min(abs(positions[i] - u), abs(positions[i] - v)) + dp[i];
        }

        int idx = 0;
        for(int i = 0; i < p; i++)
        {
            LL v1 = dp[idx] + abs(positions[idx] - positions[i]);
            if(v1 >= dp[i]) idx = i;

            dp[i] = min(dp[i], dp[idx] + abs(positions[idx] - positions[i]));
        }

        idx = p - 1;
        for(int i = p - 1; i >= 0; i--)
        {
            LL v1 = dp[idx] + abs(positions[idx] - positions[i]);
            if(v1 >= dp[i]) idx = i;

            dp[i] = min(dp[i], dp[idx] + abs(positions[idx] - positions[i]));
        }
    }

    LL sho = inf;
    for(int i = 0; i < p; i++) sho = min(sho, dp[i]);
    cout << sho << endl;
    return 0;
}
