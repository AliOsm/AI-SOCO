#include <stdio.h>
#include <vector>
#include <map>
#define pb push_back
#define lli long long int
#define MAXN 200005
using namespace std;

struct elem {
	int l;
	int r;
	int pos;

	elem() {}
	elem(int l, int r, int pos):l(l), r(r), pos(pos) {}
};

int a[MAXN];
int b[MAXN];

int la[MAXN];
int ra[MAXN];

int lb[MAXN];
int rb[MAXN];

vector <elem> ga[2 * MAXN];
vector <elem> gb[2 * MAXN];
map <int, int> mapa;

int main(void) {
	int n;
	
	scanf(" %d", &n);
	for (int i = 0; i < n; i++) {
		scanf(" %d", &a[i]);
	}
	for (int i = 0; i < n; i++) {
		scanf(" %d", &b[i]);
	}

	// a
	la[0] = -1;
	for (int i = 1; i < n; i++) {
		la[i] = i - 1;
		while(la[i] != -1 && a[la[i]] <= a[i]) {
			la[i] = la[la[i]];
		}
	}
	ra[n - 1] = n;
	for (int i = n - 1; i >= 0; i--) {
		ra[i] = i + 1;
		while(ra[i] != n && a[ra[i]] < a[i]) {
			ra[i] = ra[ra[i]];
		}
	}

	// b
	lb[0] = -1;
	for (int i = 1; i < n; i++) {
		lb[i] = i - 1;
		while(lb[i] != -1 && b[lb[i]] >= b[i]) {
			lb[i] = lb[lb[i]];
		}
	}
	rb[n - 1] = n;
	for (int i = n - 1; i >= 0; i--) {
		rb[i] = i + 1;
		while(rb[i] != n && b[rb[i]] > b[i]) {
			rb[i] = rb[rb[i]];
		}
	}
	
	int node = 0;
	for (int i = 0; i < n; i++) {
		int x = a[i];
		if (mapa.find(x) == mapa.end()) {
			//printf("x = %d, mapa = %d\n", x, node);
			mapa[x] = node++;
		}
		int idx = mapa[x];
		ga[idx].pb(elem(la[i] + 1, ra[i] - 1, i));
	}
	for (int i = 0; i < n; i++) {
		int x = b[i];
		if (mapa.find(x) == mapa.end()) {
			//printf("x = %d, mapa = %d\n", x, node);
			mapa[x] = node++;
		}
		int idx = mapa[x];
		gb[idx].pb(elem(lb[i] + 1, rb[i] - 1, i));
	}

	lli res = 0;
	for (int i = 0; i < 2 * n; i++) {
		//printf("i = %d\n", i);
		int pa = 0;
		int pb = 0;
		while(pa < (int)ga[i].size() && pb < (int)gb[i].size()) {
			int l1 = ga[i][pa].l;
			int r1 = ga[i][pa].r;
			int pos1 = ga[i][pa].pos;
			int l2 = gb[i][pb].l;
			int r2 = gb[i][pb].r;
			int pos2 = gb[i][pb].pos;

			/*printf("start\n");
			printf("here pos = %d, (%d, %d), pos2 = %d, (%d, %d)\n", pos1, l1, r1, pos2, l2, r2); */
			

			if (r2 < pos1) {
				pb++;
			} else if (l2 > pos1) {
				pa++;
			} else if (r1 < pos2) {
				pa++;
			} else if (l1 > pos2) {
				pb++;
			} else {
				int left = max(l1, l2);
				int right = min(r1, r2);
				int need_l = min(pos1, pos2);
				int need_r = max(pos1, pos2);
				int delta_l = need_l - left;
				int delta_r = right - need_r;
				res += 1LL * (delta_l + 1) * (delta_r + 1);
				/*printf("inside, delta1 = %d, delta2 = %d\n", delta_l, delta_r);
				printf("here pos = %d, (%d, %d), pos2 = %d, (%d, %d)\n", pos1, l1, r1, pos2, l2, r2); */

				if (r2 < r1) {
					pb++;
				} else {
					pa++;
				}
			}
		}
	}
	printf("%lld\n", res);
	return 0;
}			