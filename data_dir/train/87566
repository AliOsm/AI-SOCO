#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const ld PI = acos(-1.0);
const ll LINF = (ll)1e18 + 5;
const int INF = (int)1e9 + 5;

template<class T>
T sqr(T x) { return x * x; }

template<class T>
T abs(T x) { return x < 0 ? -x : x; }

template<class T>
ll round(T x) { return x < 0 ? x - 0.5 : x + 0.5; }

template<class T>
bool chmin(T & x, const T & y) {
	if (y < x) {
		x = y;
		return true;
	}
	return false;
}

template<class T>
bool chmax(T & x, const T & y) {
	if (x < y) {
		x = y;
		return true;
	}
	return false;
}


template<class P, class Q>
ostream & operator <<(ostream & os, const pair<P, Q> & p) {
	return os << "(" << p.first << ", " << p.second << ")";
}

template<class T>
ostream & operator <<(ostream & os, const vector<T> & v) {
	bool was = false;
	os << "{";
	for (typename vector<T>::const_iterator it = v.begin(); it != v.end(); it++) {
		if (was) {
			os << ", ";
		}
		else {
			was = true;
		}
		os << *it;
	}
	os << "}";
	return os;
}

template<class T>
ostream & operator <<(ostream & os, const set<T> & v) {
	bool was = false;
	os << "{";
	for (typename set<T>::const_iterator it = v.begin(); it != v.end(); it++) {
		if (was) {
			os << ", ";
		}
		else {
			was = true;
		}
		os << *it;
	}
	os << "}";
	return os;
}

template<class T>
ostream & operator <<(ostream & os, const multiset<T> & v) {
	bool was = false;
	os << "{";
	for (typename multiset<T>::const_iterator it = v.begin(); it != v.end(); it++) {
		if (was) {
			os << ", ";
		}
		else {
			was = true;
		}
		os << *it;
	}
	os << "}";
	return os;
}

template<class P, class Q>
ostream & operator <<(ostream & os, const map<P, Q> & v) {
	bool was = false;
	os << "{";
	for (typename map<P, Q>::const_iterator it = v.begin(); it != v.end(); it++) {
		if (was) {
			os << ", ";
		}
		else {
			was = true;
		}
		os << *it;
	}
	os << "}";
	return os;
}

#define all(x) (x).begin(), (x).end()

template<class T>
T nextInt() {
	ll x = 0;
	bool p = false;
	char c;
	do {
		c = getchar();
	} while (c <= 32);
	if (c == '-') {
		p = true;
		c = getchar();
	}
	while (c >= '0' && c <= '9') {
		x = x * 10 + c - '0';
		c = getchar();
	}
	return (p ? -x : x);
}

string nextToken() {
	static char str[200200];
	scanf("%s", str);
	return str;
}

const int N = (int)1e6 + 5;

int n;
char s[N];
int sumD[N], sumU[N];
ll sumDvalues[N], sumUvalues[N];
ll globalRes[N];

int getSum(int sum[], int r) {
	if (r > n) return sum[n];
	if (r < 0) return 0;
	return sum[r];
}

ll getSumLL(ll sum[], int r) {
	if (r > n) return sum[n];
	if (r < 0) return 0;
	return sum[r];
}

int getSum(int sum[], int l, int r) {
	return getSum(sum, r) - getSum(sum, l - 1);
}

ll getSumLL(ll sum[], int l, int r) {
	return getSumLL(sum, r) - getSumLL(sum, l - 1);
}

ll res[N];
void process() {
	for (int i = 1; i <= n; i++) {
		sumD[i] = sumD[i - 1] + (s[i] == 'd' ? 1 : 0);
		sumU[i] = sumU[i - 1] + (s[i] == 'u' ? 1 : 0);
		sumUvalues[i] = sumUvalues[i - 1] + (s[i] == 'u' ? i : 0);
		sumDvalues[i] = sumDvalues[i - 1] + (s[i] == 'd' ? i : 0);
	}
	fill(res + 1, res + n + 1, LINF);
	for (int i = 1; i <= n; i++) {
		if (s[i] == 'u') {
			int cntLeft = getSum(sumU, 1, i);
			int cntRight = getSum(sumD, i, n);
			if (cntLeft <= cntRight) {
				int le = i, ri = n + 1;
				while (ri - le > 1) {
					int mid = (le + ri) >> 1;
					if (getSum(sumD, i, mid) < cntLeft) le = mid;
					else ri = mid;
				}
				le++;
				ll z = -2 * getSumLL(sumUvalues, 1, i) + i + 2 * getSumLL(sumDvalues, i, le);
				res[i] = z;
			}
			else {
				int le = 1, ri = i + 1;
				while (ri - le > 1) {
					int mid = (le + ri) >> 1;
					if (getSum(sumU, i - mid + 1, i) <= cntRight + 1) le = mid;
					else ri = mid;
				}
				ll z = -2 * getSumLL(sumUvalues, i - le + 1, i) + i + 2 * getSumLL(sumDvalues, i, n) + n + 1;
				res[i] = z;
			}
		}
	}
}

void solve() {
	scanf("%d", &n);
	scanf("%s", s + 1);
	for (int i = 1; i <= n; i++) s[i] = tolower(s[i]);
	process();
	for (int i = 1; i <= n; i++) {
		globalRes[i] = res[i];
	}
	reverse(s + 1, s + n + 1);
	for (int i = 1; i <= n; i++) {
		s[i] = (s[i] == 'u' ? 'd' : 'u');
	}
	process();
	reverse(res + 1, res + n + 1);
	for (int i = 1; i <= n; i++) {
		globalRes[i] = min(globalRes[i], res[i]);
	}
	for (int i = 1; i <= n; i++) {
		printf("%lld ", globalRes[i]);
	}
	puts("");
}

int main() {
	srand(time(0));

#ifdef LOCAL
	//gen();
	freopen("input.txt", "r", stdin);
#else
	
#endif

	int t = 1;
	//cin >> t;
	while (t--) solve();
	
}