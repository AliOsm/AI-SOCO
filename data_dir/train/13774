// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define int long long

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = (1<<18);

int n, p[N], inv[N], drz[2][2*N];
ordered_set<int> s;

void add(int nr, int v, int val) {
  v += N;
  drz[nr][v] = val;
  while (v > 1) {
    v /= 2;
    drz[nr][v] = drz[nr][2*v]+drz[nr][2*v+1];
  }
}

int get(int nr, int p, int q) {
  p += N;
  q += N;
  if (p > q)
    return 0;
  int res = drz[nr][p];
  if (p != q)
    res += drz[nr][q];
  while (p/2 != q/2) {
    if (p%2 == 0)
      res += drz[nr][p+1];
    if (q%2 == 1)
      res += drz[nr][q-1];
    p /= 2;
    q /= 2;
  }
  return res;
}

int sum(int l, int r) {
  if (l > r)
    return 0;
  return r*(r+1)/2 - (l-1)*l/2;
}

signed main() {
  init_ios();
  cin >> n;
  for (int i = 1; i <= n; ++i) {
    cin >> p[i];
    inv[p[i]] = i;
  }
  int pam = 0;
  for (int i = 1; i <= n; ++i) {
    int id = inv[i];
    pam += get(0, id, n);
    add(0, id, 1);
    s.insert(id);
    int siz = (int)s.size();
    add(1, id, id);
    int res = pam;
    if (siz > 1) {
      int id2 = *s.find_by_order(siz/2);
      int le = siz/2+1;
      int ri = siz-le;
      int sum_left = get(1, 1, id2);
      int sum_right = get(1, id2+1, n);
      res += sum(id2-le+1, id2)-sum_left;
      res += sum_right-sum(id2+1, id2+ri);
    }
    cout<<res<<" ";
  }
  cout<<"\n";
}