#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
const int N = 100005;

ll x[N], y[N];
int n;
int p[N], lvl[N];
int dp[N][20];
vector<int> g[N];

int up(int u, int j){
	if(j == 0) return p[u];
	if(~dp[u][j]) return dp[u][j];
	return dp[u][j] = up(up(u, j-1), j-1);
}

void dfs(int u){
	for(int v : g[u])
		lvl[v] = lvl[u]+1, dfs(v);
}

int LCA(int u, int v){
	if(lvl[u] < lvl[v]) swap(u, v);

	for(int j = 19; j >= 0; j--){
		if(lvl[u] - (1 << j) >= lvl[v])
			u = up(u, j);
	}

	if(u == v) return u;

	for(int j = 19; j >= 0; j--){
		if((1 << j) < lvl[u] && up(u, j) != up(v, j))
			u = up(u, j), v = up(v, j);
	}
	return p[u];
}

int main(){
	memset(dp, -1, sizeof dp);
	
	scanf("%d", &n);

	for(int i = 1; i <= n; i++) scanf("%lld %lld", x+i, y+i);

	p[n] = n;

	for(int i = n-1; i > 0; i--){
		int j = i+1;
		while(j < n){
			int k = p[j];
			if((y[k] - y[i]) * (x[j] - x[i]) > (y[j] - y[i]) * (x[k] - x[i])){
				j = k;
			}
			else break;
		}
		p[i] = j;
		g[ p[i] ].push_back(i);
	}

	dfs(n);

	int m;

	scanf("%d", &m);

	int a, b;

	for(int i = 1; i <= m; i++){
		scanf("%d %d", &a, &b);

		printf("%d%c", LCA(a, b), " \n"[i == m]);
	}

}
