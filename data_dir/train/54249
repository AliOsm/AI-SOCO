#include <iostream>
#include <fstream>
#include <stack>
#include <cstdlib>
#include <cmath>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <ctime>
#include <cassert>
#include <stdio.h>
#include <queue>

#define mp make_pair
#define pb push_back
#define foru(i,n) for(int i = 0; i < n; i++)
#define ford(i,n) for(int i = n - 1; i >= 0; i++)
#define forab(i,l,r) for(int i = l; i <= r; i++)
#define forabd(i,r,l) for(inr i = r; i >= l; i--)
#define sqr(x) ((x) * (x))

const long long base = 1000000000 + 7;

using namespace std;

long long a[333333];
long long b[333333];
bool used[333333];
long long d[7000000];

const long long inf = 1000000000 * 1ll * 1000000000;

void solve(){
	int n = 0;
	int k = 0;
	cin >> n >> k;
	for (int i = 0; i < n; i++)
		cin >> b[i];
	sort(b, b + n);
	for (int i = 0; i < n; i++) if (!used[i])
	{
		int cnt = 0;
		for (int j = i; j < n; j += k)
		{
			if (used[j]) break;
			used[j] = true;		
			cnt++;
		}
//		cerr << cnt << endl;
		a[cnt]++;
	}
//	for (int i = 0; i <= n; i++)
//		cerr << a[i] << " ";
//	cerr << endl;	
	long long c1 = 0;
	long long c2 = 0;
	long long d1 = 0;
	long long d2 = 0;
	for (int i = 0; i <= n; i++)
		if (a[i] != 0)
		{
			c1 = a[i];
			d1 = i;
			break;
		}
	for (int i = n; i >= 0; i--)
	{
		if (a[i] != 0)
		{
			c2 = a[i];
			d2 = i;
			break;
		}
	}
	if (d1 == d2)
	{
		c2 = 0;
		d2 = 1;
	}
//	cerr << c1 << " " << d1 << " " << c2 << " " << d2 << endl;
	for (int i = 0; i <= c1; i++)
		for (int j = 0; j <= c2; j++)
			d[i * (c2 + 1) + j] = inf;
	d[c1 * (c2 + 1) + c2] = 0;
	for (int j = c1; j >= 0; j--)
		for (int i = c2; i >= 0; i--)
		{
			if (i + j == 0)
				continue;
			long long val = d[j * (c2 + 1) + i];
			int pos = (c1 - j) * d1 + (c2 - i) * d2;
			if (i > 0)
			{
				long long add = b[pos + d2 - 1] - b[pos];
				d[j * (c2 + 1) + i - 1] = min(d[j * (c2 + 1) + i - 1], val + add);
			}
			if (j > 0)
			{
				long long add = b[pos + d1 - 1] - b[pos];
				d[(j - 1) * (c2 + 1) + i] = min(d[(j - 1) * (c2 + 1) + i], val + add);
			}
		}
	cout << d[0] << endl;
}

int main(){
//	ios_base :: sync_with_stdio(false);
	int test = 1;
	while (test--){
		solve();
	}
	return 0;
}