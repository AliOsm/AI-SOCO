#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int infint = (ll)1e9 + 7;
const ll inf = (ll)1e18;
const int MAXN = (int)2e5 + 3;
int a[MAXN], n, q;
pair<int, int> b[MAXN];
int get(int id, int dist, int tp)
{
	if(tp % 2 == 0)
	{
		int L = id, R = n;
		while(R - L > 1)
		{
			int mid = (L + R) >> 1;
			if(b[mid].first - b[id].first <= dist)
				L = mid;
			else
				R = mid;
		}
		return L;
	}
	else
	{
		int L = -1, R = id;
		while(R - L > 1)
		{
			int mid = (L + R) >> 1;
			if(b[id].first - b[mid].first <= dist)
				R = mid;
			else
				L = mid;
		}
		return R;
	}
}
int solve(int id, int x, int tp)
{
	int nxt = get(id, x, tp), cur = x - abs(b[id].first - b[nxt].first);
	int nxxt = get(nxt, cur, tp ^ 1), cur2 = cur - abs(b[nxt].first - b[nxxt].first);
	if(nxxt != id)	
		return solve(nxxt, cur2, tp);
	else
	{
		int len = abs(b[id].first - b[nxt].first);
		if(nxt == id)
			return id;
		int dv = x / len;
		if(dv % 2 == 0)
			return solve(id, x % len, tp);
		else
			return solve(nxt, x % len, tp ^ 1);
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cin >> n >> q;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	for (int i = 0; i < n; i++)
		b[i] = {a[i], i};
	sort(b, b + n);
	for (int i = 0; i < n; i++)
		a[b[i].second] = i;
	
	for (int i = 0; i < q; i++)
	{
		int id, x;
		cin >> id >> x;
		cout << b[solve(a[id - 1], x, 0)].second + 1 << "\n";
	}
}