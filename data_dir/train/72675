#include <bits/stdc++.h>
#define ll long long
#define fr first
#define sc second
#define ii pair<int,int>
#define mp make_pair
using namespace std;
int n;
vector < int > v[300005];
int dp[300005][4];
pair<ii,int> son[300005][4];
int vis[300005][4];
void dfs(int node,int par)
{
    for(auto x : v[node])
    {
        if(x != par)
        {
            if(!vis[x][1])
                dfs(x,node);
        }
    }
    son[node][1] = mp(mp(node,node),node);
    son[node][2] = mp(mp(node,node),node);
    son[node][3] = mp(mp(node,node),node);
    for(auto x : v[node])
    {
        if(x != par)
        {
            if(dp[x][3] > dp[node][3])
            {
                son[node][3]  = son[x][3];
            }
            dp[node][3] = max(dp[node][3] , dp[x][3]);

            int nxt = dp[x][2]+1+dp[node][1];
            if(nxt > dp[node][3])
            {
                int X1,X2,X3;
                X1 = son[x][2].fr.fr;
                X2 = son[x][2].fr.sc;
                X3 = son[node][1].fr.fr;
                son[node][3] = mp(mp(X1,X2),X3);
            }
            dp[node][3] = max(dp[node][3] , dp[x][2]+1+dp[node][1]);

            nxt = dp[x][1]+1+dp[node][2];

            if(nxt > dp[node][3])
            {
                int X1,X2,X3;
                X1 = son[x][1].fr.fr;
                X2 = son[node][2].fr.fr;
                X3 = son[node][2].fr.sc;
                son[node][3] = mp(mp(X1,X2),X3);
            }
            dp[node][3] = max(dp[node][3] , dp[x][1]+1+dp[node][2]);

            nxt = dp[x][2]+1;
            if(nxt > dp[node][2])
            {
                son[node][2] = son[x][2];
            }
            dp[node][2] = max(dp[node][2] , dp[x][2]+1);

            nxt = dp[x][1]+1+dp[node][1];
            if(nxt > dp[node][2])
            {
                int X1,X2;
                X1 = son[x][1].fr.fr;
                X2 = son[node][1].fr.fr;
                son[node][2] = mp(mp(X1,X2),-1);
            }
            dp[node][2] = max(dp[node][2] , dp[x][1]+1+dp[node][1]);

            nxt = dp[x][1]+1;
            if(nxt > dp[node][1])
            {
                son[node][1] = son[x][1];
            }
            dp[node][1] = max(dp[node][1] , dp[x][1]+1);
        }
    }
    vis[node][1] = 1;
    vis[node][2] = 1;
    vis[node][3] = 1;
    return ;
}
int main()
{
    cin>>n;
    for(int i=1;i<n;i++)
    {
        int x,y;
        scanf("%d%d",&x,&y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    dfs(1,-1);
    cout<<dp[1][3]<<endl;

    set<int> s;
    if(son[1][3].fr.fr > 0)
    s.insert(son[1][3].fr.fr);
    if(son[1][3].fr.sc > 0)
    s.insert(son[1][3].fr.sc);
    if(son[1][3].sc > 0)
    s.insert(son[1][3].sc);

    if(s.size() < 3)
    {
        for(int i=1;i<=n;i++)
        {
            if(s.find(i)== s.end())
            {
                s.insert(i);
                if(s.size() == 3)
                    break;
            }
        }
    }
    for(auto x : s)
    {
        cout<<x<<" " ;
    }
    return 0;
}
