#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 1001;
int n, m;

int dp[N][N];
int pt[N][N];

string a;
string b;

void input() {
    cin >> a;
    cin >> b;
    n = len(a);
    m = len(b);
}

int calc(int i, int j) {
    if(i == n || j == m) {
        return max(n - i, m - j);
    }
    if(dp[i][j] != -1) {
        return dp[i][j];
    }
    pii res = {inf, 0};
    if(a[i] == b[j]) {
        res = min(res, {calc(i + 1, j + 1), 1});
    }
    res = min(res, {calc(i, j + 1) + 1, 2});
    res = min(res, {calc(i + 1, j) + 1, 3});
    res = min(res, {calc(i + 1, j + 1) + 1, 4});
    pt[i][j] = res.yy;
    return dp[i][j] = res.xx;
}

void construct(int i, int j) {
    if(i == n) {
        for(int k = 1; k <= m - j; ++k) {
            cout << "INSERT " << i + k << " " << b[k + j - 1] << "\n";
        }
        return;
    }
    if(j == m) {
        for(int k = i; k < n; ++k) {
            cout << "DELETE " << i + 1 << "\n";
        }
        return;
    }
    if(pt[i][j] == 1) {
        construct(i + 1, j + 1);
    }
    if(pt[i][j] == 2) {
        construct(i, j + 1);
        cout << "INSERT " << i + 1 << " " << b[j] << "\n";
    }
    if(pt[i][j] == 3) {
        construct(i + 1, j);
        cout << "DELETE " << i + 1 << "\n";
    }
    if(pt[i][j] == 4) {
        construct(i + 1, j + 1);
        cout << "REPLACE " << i + 1 << " " << b[j] << "\n";
    }
}

void solve() {
    memset(dp, -1, sizeof dp);
    cout << calc(0, 0) << "\n";
    construct(0, 0);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
