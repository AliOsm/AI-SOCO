#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

#define sign(value) ((value) < 0 ? -1 : 1)
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define fore(i, LF, RG) for(int i = int(LF); i < (int)(RG); i += sign(RG - LF))
#define min(a, b) ((a) < (b) ? (a) : (b))

const int NMAX = 110000;

int n, k;
vector<pair<int, int>> g[NMAX];

int d[NMAX][2];

int solve(int v, int goup, int par) {
  int& ans = d[v][goup];
  if (ans != -1) return ans;
  ans = 0;
  int par_idx = -1;
  forn(i, g[v].size()) {
    int u = g[v][i].first;
    if (u == par) {
      par_idx = i;
    } else {
      solve(u, 0, v);
      solve(u, 1, v);
    }
  }
  if (par_idx != -1) {
    g[v].erase(g[v].begin() + par_idx);
  }
  vector<pair<int, pair<int, int>>> child_up;
  forn(i, g[v].size()) {
    int u = g[v][i].first, c = g[v][i].second;
    child_up.push_back(make_pair(solve(u, 1, v) + c, g[v][i]));
  }
  sort(child_up.begin(), child_up.end());
  reverse(child_up.begin(), child_up.end());
  int sumk = 0;
  forn(i, min(child_up.size(), k - 1)) {
    sumk += child_up[i].first;
  }
  if (goup) {
    ans = sumk;
    return ans;
  }
  forn(i, child_up.size()) {
    int u = child_up[i].second.first;
    int c = child_up[i].second.second;
    int curans = c + solve(u, 0, v);
    curans += sumk;
    if (i < k - 1) {
      curans -= child_up[i].first;
      if (child_up.size() > k - 1) {
        curans += child_up[k - 1].first;
      }
    }
    ans = max(ans, curans);
  }
  return ans;
}

int main() {
#ifndef ssu1
#endif
  cin >> n >> k;
  forn(i, n - 1) {
    int u, v, c;
    cin >> u >> v >> c;
    g[v].push_back(make_pair(u, c));
    g[u].push_back(make_pair(v, c));
  }
  memset(d, -1, sizeof d);
  cout << max(solve(0, 0, -1), solve(0, 1, -1)) << endl;
  return 0;
}
