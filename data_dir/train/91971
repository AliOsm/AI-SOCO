/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

const int N = 1e3 + 5, M = 290 + 5;
int dx[4] = {0, 0, -1, 1}, dy[4] = {-1, 1, 0, 0};
vector<pair<int, int>> adj[N][N], nxt, help;
int n, m, d, s, dist[N][N];
queue<pair<int, int>> q;
bool mark[N][N];
char c[N][N];

inline void bfs(int x, int y) {
	for (auto u: nxt)
		dist[u.first][u.second] = dist[n][m];
	nxt.clear();
	dist[x][y] = 0;
	q.push({x, y});
	while (!q.empty()) {
		int a = q.front().first, b = q.front().second;
		if (dist[a][b] < d)
			for (int i = 0; i < 4; i++) {
				int u = a + dx[i], v = b + dy[i];
				if (c[u][v] ^ 'X' && dist[u][v] > dist[a][b] + 1) {
					dist[u][v] = dist[a][b] + 1;
					q.push({u, v});
				}
			}
		if (!mark[a][b]) {
			mark[a][b] = true;
			help.push_back({a, b});
		}
		adj[a][b].push_back({x, y});
		nxt.push_back({a, b});
		q.pop();
	}
}

inline void check_rats() {
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			s += c[i][j] == 'R';
	if (s >= M) {
		cout << -1;
		exit(0);
	}
}

inline void add_rats_edges() {
	memset(dist, 63, sizeof dist);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (c[i][j] == 'R')
				bfs(i, j);
	memset(mark, false, sizeof mark);
}

inline void read_input() {
	cin >> n >> m >> d;
	for (int i = 0; i < n; i++)
		cin >> c[i];
}

inline void solve() {
	check_rats();
	add_rats_edges();
}

inline void write_output() {
	for (int x = 0; x < n; x++)
		for (int y = 0; y < m; y++)
			if (adj[x][y].size() == s)
				for (int u = 0; u < n; u++)
					for (int v = 0; v < m; v++)
						if ((x ^ u || y ^ v) && c[u][v] ^ 'X') {
							cout << ++x << ' ' << ++y << ' ';
							cout << ++u << ' ' << ++v;
							return;
						}
	for (auto x: nxt) {
		for (auto y: adj[x.first][x.second])
			mark[y.first][y.second] = true;
		for (auto y: help) {
			int cnt = 0;
			for (auto z: adj[y.first][y.second])
				cnt += !mark[z.first][z.second];
			if (adj[x.first][x.second].size() + cnt == s) {
				cout << ++x.first << ' ' << ++x.second << ' ';
				cout << ++y.first << ' ' << ++y.second;
				return;
			}
		}
		for (auto y: adj[x.first][x.second])
			mark[y.first][y.second] = false;
	}
	cout << -1;
}

int main() {
	freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout);
	ios:: sync_with_stdio(0), cin.tie(0), cout.tie(0);
	read_input(), solve(), write_output();
	return 0;
}
