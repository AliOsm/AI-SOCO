#include <algorithm>
#include <iostream>
#include <cstring>
#include <climits>
#include <cassert>
#include <iomanip>
#include <cstdio>
#include <vector>
#include <string>
#include <stack>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define type(x) __typeof((x).begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 1e6 + 55;
const int M = 1e7 + 55;

int a[N];
int cnt[M];
bool used[M];
vector<int> primes;

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#endif

    for(int i = 2; i < M; i++){
        if(!used[i]){
            primes.push_back(i);
            for(int j = i + i; j < M; j += i){
                used[j] = 1;
            }
        }
    }

    int n = read();

    for(int i = 1; i <= n; i++){
        cnt[read()]++;
    }

    vector<long long> ans(primes.size(),0);

    for(int i = 0; i < (int)primes.size(); i++){
        int p = primes[i];
        for(int j = p; j < M; j += p){
            ans[i] += cnt[j];
        }
    }

    for(int i = 0; i < (int)ans.size() - 1; i++){
        ans[i + 1] += ans[i];
    }

    int m = read();

    while(m--){
        int l = read();
        int r = read();
        l = lower_bound(primes.begin(), primes.end(), l) - primes.begin();
        r = upper_bound(primes.begin(), primes.end(), r) - primes.begin() - 1;
        printf("%I64d\n",ans[r] - ((l == 0)? 0ll : ans[l - 1]));
    }

    return 0;

}
