#include <bits/stdc++.h>
using namespace std;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
typedef long long ll;
typedef long double ld;
#define INF 2001001001
#define MOD 1000000007

string S,T;
string ans;
int P[2000005];
int C,R;

int getChar(int l, int r){
  if (l%2==0) l++;
  if (r%2==0) r--;
  return (r-l)/2+1;
}

void Manacher(){
  C=0; R=0;
  T='$';
  for (int i=0;i<(int)S.length();i++){
    T+=S[i];
    if (i+1<(int)S.length())
      T+='#';
  }
  T+='%';
  for (int i=0;i<(int)T.length();i++)
    P[i]=0;
  for (int i=1;i<(int)T.length()-1;i++){
    int mirr=2*C-i; //index of mirror across current farthest right extending palidrome
    if (i<R) //copy mirror's value
      P[i]=min(R-i,P[mirr]);
    while (T[i+(1+P[i])]==T[i-(1+P[i])]) //expand string
      P[i]++;
    if (i+P[i]>R){ //expand right border
      C=i;
      R=i+P[i];
    }
  }
  // for (int i=0;i<T.length();i++)
  //  cout<<T[i]<<": "<<P[i]<<endl;
}

void solve(){
  cin>>S;
  if (S.length()==1){
    cout<<S<<endl;
    return;
  }
  ans="";
  Manacher();
  int maxI=0,minJ=INF;
  for (int i=1;i<T.length();i++){
    int j=T.length()-1-i;
    if (i>j || T[i]!=T[j]) break;
    maxI=i;
    minJ=j;
  }
  if (maxI==minJ){
    cout<<S<<endl;
    return;
  }
  int mx=0,L=-1,R=-1;
  if (maxI>0){
  for (int i=maxI+1;i<minJ;i++){
    int len=P[i];
    int l=i-len,r=i+len;
    if (l>maxI+1 && r+1<minJ)
      continue;
    len=min(len,i-maxI-1);
    len=min(len,minJ-i-1);
    len=max(len,0);
    //cout<<i<<' '<<len<<endl;
    if (getChar(0,maxI+1)*2+getChar(i-len,i+len)>mx){
	mx=getChar(0,maxI+1)*2+getChar(i-len,i+len);
	L=i-len;
	R=i+len;
      }
  }
  }
  ///cout<<mx<<' '<<maxI<<' '<<minJ<<' '<<L<<' '<<R<<endl;
  if (mx>0){
    ans=T.substr(0,maxI+1)+T.substr(L,(R-L+1))+T.substr(minJ,maxI+1);
    string temp="";
    for (char c:ans)
      if (c!='#' && c!='$' && c!='%')
	temp+=c;
    ans=temp;
  }
  int cen,nexMax=0;
  for (int i=0;i<(int)T.length();i++){
    if (i-P[i]<=1 || i+P[i]>=((int)T.length()-2)){
      if (getChar(i-P[i],i+P[i])>nexMax){
	nexMax=getChar(i-P[i],i+P[i]);
	cen=i;
      }
    }
  }
  if (nexMax>(int)ans.length()){
    ans=T.substr(cen-P[cen],(P[cen]*2+1));
    string temp="";
    for (char c:ans)
      if (c!='#' && c!='$' && c!='%')
	temp+=c;
    ans=temp;
  }
  if (ans=="")
    ans=S[0];
  cout<<ans<<endl;
}

int main()
{
  //ios_base::sync_with_stdio(0);cin.tie(0);
  //freopen (".in","r",stdin);
  //freopen (".out","w",stdout);
  int T;
  cin>>T;
  while (T--)
    solve();
  return 0;
}
