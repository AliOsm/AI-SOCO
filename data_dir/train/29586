
/**************************************************************
    Problem: ????
    User: Big_Red_Dates
    Language: GNU_C++11
    Result: Accepted
    Time:0 ms
    Memory:0 kb
    length:0 kb
    score: inf
****************************************************************/
//CLOCKS_PER_SEC
using namespace std;
#include<bitset>
#include<deque>
#include<stdint.h>
#include<set>
#include<stack>
#include<cmath>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<iomanip>
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<queue>
#include<cstring>
#include<ctime>
#include<map>
#define sqr(x) (x)*(x)
//#define sort stable_sort
#define ll long long
#define mk make_pair
#define pb push_back
#define in insert
#define mtr(x,y,z) mk(mk(x,y),z)
#define fi first
#define se second
#define lch(x) ((x)<<1)
#define rch(x) (((x)<<1)|1)
#define all(x) (x).begin(),(x).end()
#define titose CLOCKS_PER_SEC
#define fpi(x) freopen(x,"r",stdin);
#define fpo(x) freopen(x,"w",stdout);
#define fprio fpi("in.txt");fpo("out.txt");
#define fast ios_base::sync_with_stdio(false);
inline void read(int &x){int v=0,f=1;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=v*10+c-'0';while (isdigit(c=getchar())) v=v*10+c-'0';x=v*f;}
inline void read(ll &x){ll v=0ll,f=1ll;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=v*10+c-'0';while (isdigit(c=getchar())) v=v*10+c-'0';x=v*f;}
inline void readc(char &x){char c;while ((c=getchar())==' ');x=c;}
inline void writes(string s){puts(s.c_str());}
inline void writeln(){writes("");}
inline void writei(int x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
inline void writell(ll x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
#define pii pair<int,int>
#define pll pair<ll,ll>
#define vi vector<int>
#define vl vector<ll>
#define si set<int>
#define sl set<ll>
#define mii map<int,int>
#define mll map<ll,ll>
#define msi map<string,int>
#define msl map<string,ll>
#define piii pair<int,pii >
#define piipi pair<pii,int>
#define plll pair<ll,pll >
#define pllpl pair<pll,ll>
#define pqi priority_queue<int>
#define pql priority_queue<ll>
#define npqi priority_queue<int,vector<int>,greater<int> >
#define npql priority_queue<ll,vector<ll>,greater<ll> >
#define forup(i,a,b) for ((i)=(a);(i)<=(b);(i)++)
#define fordo(i,a,b) for ((i)=(a);(i)>=(b);(i)--)
#define rep(i,x) forup ((i),1,(x))
#define repd(i,x) fordo ((i),(x),1)
#define itr iterator
#define fe(itcalc,c) for(__typeof((c).begin()) itcalc=(c).begin();itcalc!=(c).end();itcalc++)
#define NO {cout<<"NO";return 0;}
#define YES {cout<<"YES";return 0;}
#define y0 y000000000000000000000000000
#define y1 y111111111111111111111111111
#define j0 j000000000000000000000000000
#define j1 j111111111111111111111111111
#define cl0(a) memset((a),(0),(sizeof((a))))
#define clz(a) memset((a),(0x16),(sizeof((a))))
#define clf(a) memset((a),(-(0x16)),(sizeof((a))))
#define inf 0x3bbbbbbb
#define lnf 0x1bbbbbbbbbbbbbbbll
#define sqrt divi
#define p2(i) (1ll<<(i))
#define readi read
#define readll read
/*************************************************/
int n,m,i,j,a[300005],p[300005],tag[1200005];
long long ans;
struct node
{
	int m1,m2,s1,s2;
	void ins(int x,int y){
		if(x<m1)
		{m2=m1;s2=s1;m1=x;s1=y;}
		else if(x==m1)s1+=y;else if(x<m2){m2=x;s2=y;}else if(x==m2)s2+=y;
	}
}f[1200005];
void upd(int x,int y){f[x].m1+=y;f[x].m2+=y;tag[x]+=y;}
node s(node x,node y){node ans=(node){inf-1,inf,1,1};ans.ins(x.m1,x.s1);ans.ins(x.m2,x.s2);ans.ins(y.m1,y.s1);ans.ins(y.m2,y.s2);return ans;}
void pushup(int x){f[x]=s(f[x+x],f[x+x+1]);}
void pushdo(int x){if(tag[x]){upd(x+x,tag[x]);upd(x+x+1,tag[x]);tag[x]=0;}}
void build(int x,int l,int r){
	if(l==r){f[x]=(node){0,inf,1,1};return;}
	int mid=(l+r)/2;build(x*2,l,mid);build(x*2+1,mid+1,r);pushup(x); 
}
void update(int x,int l,int r,int ql,int qr,int c){
	if(ql<=l&&r<=qr){upd(x,c);return;}
	pushdo(x);
	int mid=(l+r)/2;if(ql<=mid)update(x+x,l,mid,ql,qr,c);if(qr>mid)update(x+x+1,mid+1,r,ql,qr,c);
	pushup(x);
}
int g(int x){int s=0;if(f[x].m1<=2)s+=f[x].s1;if(f[x].m2<=2)s+=f[x].s2;return s;}
int query(int x,int l,int r,int ql,int qr){
	if(ql<=l&&r<=qr)return g(x);
	pushdo(x);
	int mid=(l+r)/2,ans(0);if(ql<=mid)ans+=query(x+x,l,mid,ql,qr);if(qr>mid)ans+=query(x+x+1,mid+1,r,ql,qr);
	return ans;
}
int main(){
	read(n);rep(i,n){read(a[i]);p[a[i]]=i;}build(1,1,n);
	rep(i,n){
		int t(p[i]);vector<int> v;
		if(t>1&&a[t-1]<i)v.pb(a[t-1]+1);
		if(t<n&&a[t+1]<i)v.pb(a[t+1]+1);
		v.pb(i+1);while(v.size()<4)v.pb(1);sort(all(v));//fe(it,v)cerr<<*it<<' ';cerr<<endl;
		forup(j,-1,1)if(j&&v[j+1]<v[j+2])update(1,1,n,v[j+1],v[j+2]-1,j);
		ans+=query(1,1,n,1,i)-1;
	}cout<<ans<<endl;
	return 0;
}