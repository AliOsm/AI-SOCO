#include <bits/stdc++.h>
using namespace std;
const int N = 3e5 + 10;
struct node {
	int mx1 = 0, mx2 = 0, par1 = -1, par2 = -1, cnt = 0;
	void upd(int val, int pr) {
		if (mx2 < val)
			mx2 = val, par2 = pr;
		if (mx2 > mx1)
			swap(mx2, mx1), swap(par1, par2);
		return;
	}
} dp[N];
int rtr, n;
vector<int> gr[N];
void dfs(int v, int par = -1) {
	for (auto u : gr[v]) {
		if (u != par)
			dfs(u, v), dp[v].cnt++, dp[v].upd(dp[u].cnt + dp[u].mx1, u);
	}
//	cout << "V = " << v << " : " << dp[v].mx1 << ", " << dp[v].cnt << endl;
	return;
}
void getAns(int v, int par = -1) {
	if (par != -1) {
		dp[v].cnt++;
		if (dp[par].par1 != v)
			dp[v].upd(dp[par].mx1 + dp[par].cnt - 1, par);
		else
			dp[v].upd(dp[par].mx2 + dp[par].cnt - 1, par);
	}
	rtr = max(rtr, dp[v].cnt + dp[v].mx1 + dp[v].mx2 + 1);
//	cout << "v = " << v << " : " << dp[v].mx1 << " " << dp[v].mx2 << " " << dp[v].cnt << endl;
	for (auto u : gr[v]) {
		if (u != par)
			getAns(u, v);
	}
	return;
}
void reset() {
	for (int i = 0; i <= n; i++)
		gr[i].clear(), dp[i].mx1 = dp[i].mx2 = dp[i].cnt = rtr = 0, dp[i].par1 = dp[i].par2 = -1;
	return;
}
int main() {
	ios_base::sync_with_stdio (false), cin.tie(0), cout.tie(0);
	int t;
	cin >> t;
	while (t--) {
		cin >> n;
		for (int i = 0; i < n - 1; i++) {
			int x, y;
			cin >> x >> y;
			x--, y--;
			gr[x].push_back(y), gr[y].push_back(x);
		}
		dfs(0);
		getAns(0);
		cout << rtr << "\n";
		reset();
	}
	return 0;
}	
