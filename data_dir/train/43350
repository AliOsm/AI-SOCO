#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef long double real;

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

using namespace std;

const int MaxN = 100005, MaxK = 102, MaxL = 1003, NA = -1, MaxC = 0x3F3F3F3F;

char s [MaxN];
char t [MaxK] [MaxL];
int len [MaxK];
int p [MaxL];
int f [MaxN];
int g [MaxN];
int m, n;

int main (void)
{
 int i, k, l, res;

 while (scanf (" %s", s + 1) != EOF)
 {
  n = strlen (s + 1);
  scanf (" %d", &m);
  for (l = 0; l < m; l++)
  {
   scanf (" %s", t[l] + 1);
   len[l] = strlen (t[l] + 1);
  }

  res = 0;
  for (l = 0; l < m; l++)
  {
   k = -1;
   p[0] = k;
   for (i = 1; i <= len[l]; i++)
   {
    while (k >= 0 && t[l][k + 1] != t[l][i])
     k = p[k];
    k++;
    p[i] = k;
   }

   k = 0;
   f[0] = k;
   for (i = 1; i <= n; i++)
   {
    while (k >= 0 && t[l][k + 1] != s[i])
     k = p[k];
    k++;
    f[i] = max (f[i - 1], k);
    if (k == len[l])
     k = p[k];
   }

   reverse (t[l] + 1, t[l] + len[l] + 1);
   reverse (s + 1, s + n + 1);

   k = -1;
   p[0] = k;
   for (i = 1; i <= len[l]; i++)
   {
    while (k >= 0 && t[l][k + 1] != t[l][i])
     k = p[k];
    k++;
    p[i] = k;
   }

   k = 0;
   g[0] = k;
   for (i = 1; i <= n; i++)
   {
    while (k >= 0 && t[l][k + 1] != s[i])
     k = p[k];
    k++;
    g[i] = max (g[i - 1], k);
    if (k == len[l])
     k = p[k];
   }

   reverse (t[l] + 1, t[l] + len[l] + 1);
   reverse (s + 1, s + n + 1);
   reverse (g + 1, g + n + 1);

   for (i = 1; i < n; i++)
    if (len[l] > 1 && f[i] > 0 && g[i + 1] > 0 && f[i] + g[i + 1] >= len[l])
    {
     eprintf ("%d: %d %d %d\n", l, i, f[i], g[i + 1]);
     res++;
     break;
    }
  }

  printf ("%d\n", res);
 }

 return 0;
}
