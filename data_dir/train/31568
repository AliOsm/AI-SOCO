#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 200010;
char S[N], T[N];
unsigned long long pw[N], Hash_S[26][N], Hash_T[26], cur[26];
const int MAGIC = 1331;
int match_which[26];
int main() {
	int n, m;
	scanf("%d%d", &n, &m);
	scanf("%s%s", S + 1, T + 1);
	pw[0] = 1;
	for(int i = 1; i <= n; i ++) {
		pw[i] = pw[i - 1] * MAGIC;
		rep(j, 26) {
			Hash_S[j][i] = Hash_S[j][i - 1] * MAGIC;
			if(S[i] == 'a' + j) 
				Hash_S[j][i] ++;
		}
	}
	for(int i = 1; i <= m; i ++) {
		rep(j, 26) {
			Hash_T[j] *= MAGIC;
			if(T[i] == 'a' + j)
				Hash_T[j] ++;
		}
	}
	std::map<unsigned long long, int> Char;
	std::vector<int> answer;
	rep(j, 26) if(Hash_T[j])	Char[Hash_T[j]] = j; 
	for(int i = 1; i + m - 1 <= n; i ++) {
		rep(j, 26)	cur[j] = 0;
		rep(j, 26) 
			cur[j] = Hash_S[j][i + m - 1] - Hash_S[j][i - 1] * pw[m];
		bool can = true;
		rep(j, 26) {
			if(cur[j]) {
				if(Char.count(cur[j]) == 0) 
					can = false;
				else
					match_which[j] = Char[cur[j]];
				//std::cout << j << " " << cur[j] << '\n';
			}
		}
		if(can == false)	continue;
		rep(j, 26) if(cur[j] && cur[match_which[j]] && match_which[match_which[j]] != j)
			can = false;
		if(can == false)	continue;
		answer.push_back(i);
	}
	printf("%d\n", answer.size());
	rep(i, answer.size()) 
		printf("%d%c", answer[i], " \n"[i == answer.size() - 1]);
	return 0;
}

