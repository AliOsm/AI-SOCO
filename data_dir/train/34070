#include <algorithm>
#include <ctype.h>
#include <deque>
#include <iostream>
#include <limits.h>
#include <map>
#include <queue>
#include <set>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <vector>
#include <algorithm>
#include <assert.h>
#include <limits.h>
#include <math.h>
#include <iomanip>
using namespace std;

int findAnswer(const vector<pair<int, int> > &pairs, int N) {
	vector<bool> vis(N, false);
	int answer = 0;
	for (size_t i = 0; i < pairs.size(); ++i)
		if (!vis[pairs[i].first] && !vis[pairs[i].second]) {
			++answer;
			vis[pairs[i].first] = vis[pairs[i].second] = true;
		}
	return answer;
}

int main(int argc, char **argv) {
	int n;
	scanf("%d", &n);
	vector<int> a(n);
	for (int i = 0; i < n; ++i)
		scanf("%d", &a[i]);
	map<int, vector<pair<int, int> > > sums;
	for (int i = 0; i < n; ++i)
		for (int j = i + 1; j < n; ++j)
			sums[a[i] + a[j]].push_back(make_pair(i, j));
	int answer = 0;
	map<int, vector<pair<int, int> > >::iterator it;
	for (it = sums.begin(); it != sums.end(); ++it)
		answer = max(answer, findAnswer(it->second, n));
	printf("%d\n", answer);
	return 0;
}
