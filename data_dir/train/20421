/* ****revpro**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl	   '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii	    map<ll,ll>
using namespace std;

#define N  100005
int pre[26][1005][1005];
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		ll n,m;
		cin>>n>>m;
		string s[n];
		rep(i,0,n) cin>>s[i];
		rep(k,0,26)
		{
			rep(i,0,n)
			{
				rep(j,0,m)
				{
					pre[k][i+1][j+1]=pre[k][i][j+1]+pre[k][i+1][j]-pre[k][i][j];
					if(s[i][j]-'a'==k)
					{
						pre[k][i+1][j+1]++;
					}
				}
			}
		}
		ll ans=0;
		rep(i,1,n+1)
		{
			rep(j,1,m+1)
			{
				ll lo=i,h1=n;
				while(lo<h1)
				{
					ll mid=(lo+h1+1)/2;
					if(pre[s[i-1][j-1]-'a'][mid][j]-pre[s[i-1][j-1]-'a'][mid][j-1]-pre[s[i-1][j-1]-'a'][i-1][j]+pre[s[i-1][j-1]-'a'][i-1][j-1]==mid-i+1)
						lo=mid;
					else h1=mid-1;
				}
				ll idx1,idx2,idx3;
				idx1=lo;
				ll idx=lo;
				if(2*(idx-i+1)>n-idx)
					continue;
				lo=idx+1,h1=n;
				while(lo<h1)
				{
					ll mid=(lo+h1+1)/2;
					if(pre[s[idx][j-1]-'a'][mid][j]-pre[s[idx][j-1]-'a'][mid][j-1]-pre[s[idx][j-1]-'a'][idx][j]+pre[s[idx][j-1]-'a'][idx][j-1]==mid-idx)
						lo=mid;
					else h1=mid-1;
				}
				if(idx-i+1!=(lo-idx))
					continue;
				idx2=lo;
				ll len=idx-i+1;
				idx=lo;
				lo=idx+1,h1=n;
				while(lo<h1)
				{
					ll mid=(lo+h1+1)/2;
					if(pre[s[idx][j-1]-'a'][mid][j]-pre[s[idx][j-1]-'a'][mid][j-1]-pre[s[idx][j-1]-'a'][idx][j]+pre[s[idx][j-1]-'a'][idx][j-1]==mid-idx)
						lo=mid;
					else h1=mid-1;
				}
				if(len>(lo-idx))
					continue;
				idx3=idx+len;
				lo=j,h1=m;
				while(lo<h1){
					ll mid=(lo+h1+1)/2;
					ll s1,s2,s3;
					s1=pre[s[i-1][j-1]-'a'][idx1][mid]-pre[s[i-1][j-1]-'a'][idx1][j-1]-pre[s[i-1][j-1]-'a'][i-1][mid]+pre[s[i-1][j-1]-'a'][i-1][j-1];
					s2=pre[s[idx1][j-1]-'a'][idx2][mid]-pre[s[idx1][j-1]-'a'][idx2][j-1]-pre[s[idx1][j-1]-'a'][idx1][mid]+pre[s[idx1][j-1]-'a'][idx1][j-1];
					s3=pre[s[idx2][j-1]-'a'][idx3][mid]-pre[s[idx2][j-1]-'a'][idx3][j-1]-pre[s[idx2][j-1]-'a'][idx2][mid]+pre[s[idx2][j-1]-'a'][idx2][j-1];
					if((s1==(mid-j+1)*len)&&(s3==(mid-j+1)*len)&&(s2==(mid-j+1)*len))
						lo=mid;
					else h1=mid-1;
				}
				ans+=lo-j+1;
			}
		}
		cout<<ans;
	}
	return 0;
}