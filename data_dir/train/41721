#include <bits/stdc++.h>
 
using namespace std;
 
#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(LL i=j;i<=k;i++)
#define read        freopen("in.txt", "r", stdin)
#define write       freopen("out.txt", "w", stdout)
#define pf          prLLf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define PB push_back
#define F first
#define S second
#define MP make_pair
 
typedef long long LL;
 
const int MAX = (1e5) + 5;
 
LL preNeed[MAX], sufNeed[MAX], ara[MAX], k;
 
void solve()
{
    LL n;
 
    cin >> n >> k;
    FOR(i,0,n-1) cin >> ara[i];
    sort(ara, ara + n);
 
    LL c = 0;
    for(LL i = 0, j = 1; i < n; i++, j++)
    {
        c += ara[i];
        preNeed[i] = (LL)ara[i] * j;
        preNeed[i] -= c;
    }
 
    LL d = 0;
    for(LL i = n - 1, j = 1; i >= 0; i--, j++)
    {
        d += ara[i];
        sufNeed[i] = d;
        sufNeed[i] -= ara[i] * j;
    }
 
    LL prin = ara[n - 1] - ara[0];
    FOR(i,0,n-1)
    {
        LL cank = k - preNeed[i];
 
        if(cank < 0) break;
 
        LL st = i, en = n - 1, j = n - 1;
 
        while(st <= en)
        {
            LL mid = (st + en)>>1;
 
            if(sufNeed[mid] <= cank) en = mid - 1, j = min(mid, j);
            else st = mid + 1;
        }
 
        LL extra = cank - sufNeed[j];
        LL l = i + 1, r = (n - j), x, y;
 
        x = ara[i]; y = ara[j];
        if(l < r)
        {
            LL canJump = extra / l;
            x += canJump;
            extra -= (canJump * l);
 
            LL canJumpDown = extra / r;
            y -= canJumpDown;
            extra -= (canJumpDown * r);
        }
        else
        {
            LL canJumpDown = extra / r;
            y -= canJumpDown;
            extra -= (canJumpDown * r);
 
            LL canJump = extra / l;
            x += canJump;
            extra -= (canJump * l);
        }
        if(i < n-1) x = min(x, ara[i + 1]);
        if(j) y = max(y, ara[j - 1]);
 
        prin = min(prin, (y - x));
    }
 
    for(int i = n - 1; i >= 0; i--)
    {
      //  cout << i << endl;
        LL cank = k - sufNeed[i];
 
        if(cank < 0) break;
 
        LL st = 0, en = i, j = 0;
 
        while(st <= en)
        {
            LL mid = (st + en)>>1;
           // cout << mid << endl;
 
            if(preNeed[mid] <= cank) st = mid + 1, j = max(mid, j);
            else en = mid - 1;
        }
 
        LL extra = cank - preNeed[j];
        LL l = j + 1, r = (n - i), x, y;
 
        x = ara[j]; y = ara[i];
        if(l < r)
        {
            LL canJump = extra / l;
            x += canJump;
            extra -= (canJump * l);
 
            LL canJumpDown = extra / r;
            y -= canJumpDown;
            extra -= (canJumpDown * r);
        }
        else
        {
            LL canJumpDown = extra / r;
            y -= canJumpDown;
            extra -= (canJumpDown * r);
 
            LL canJump = extra / l;
            x += canJump;
            extra -= (canJump * l);
        }
 
        if(j < n-1) x = min(x, ara[j + 1]);
        if(i) y = max(y, ara[i - 1]);
        prin = min(prin, (y - x));
    }
 
    cout << max((LL)0, prin) << endl;
}
 
int main()
{
    ios::sync_with_stdio(false);
    //read;
    solve();
    return 0;
}