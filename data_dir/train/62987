///****In the name of Allah, most Gracious, most Compassionate****//

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

#define All(a) a.begin(), a.end()
#define FastIO ios::sync_with_stdio(false); cin.tie(nullptr);cout.tie(nullptr)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)


#define TEST

#ifdef TEST
#define DBG(a) cout<< #a <<" --> "<<(a)<<endl;
#define NL cout<<"\n";
#else
#define DBG(a) ;
#define NL cout<<"\n";
#endif // TEST

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}

const int LOGN = 20;
const int N = (1 << LOGN);
const int MOD = 998244353;
const int g = 3;

vector<int> w[LOGN];
vector<int> iw[LOGN];
vector<int> rv[LOGN];


inline int mul(int a, int b)
{
	return (a * 1ll * b) % MOD;
}

inline int norm(int a)
{
	while(a >= MOD)
		a -= MOD;
	while(a < 0)
		a += MOD;
	return a;
}

inline int binPow(int a, int k)
{
	int ans = 1;
	while(k > 0)
	{
		if(k & 1)
			ans = mul(ans, a);
		a = mul(a, a);
		k >>= 1;
	}
	return ans;
}

inline int inv(int a)
{
	return binPow(a, MOD - 2);
}



void precalc_fft()
{
	int wb = binPow(g, (MOD - 1) / (1 << LOGN));

	for(int st = 0; st < LOGN; st++)
	{
		w[st].assign(1 << st, 1);
		iw[st].assign(1 << st, 1);

		int bw = binPow(wb, 1 << (LOGN - st - 1));
		int ibw = inv(bw);

		int cw = 1;
		int icw = 1;

		for(int k = 0; k < (1 << st); k++)
		{
			w[st][k] = cw;
			iw[st][k] = icw;

			cw = mul(cw, bw);
			icw = mul(icw, ibw);
		}

		rv[st].assign(1 << st, 0);

		if(st == 0)
		{
			rv[st][0] = 0;
			continue;
		}
		int h = (1 << (st - 1));
		for(int k = 0; k < (1 << st); k++)
			rv[st][k] = (rv[st - 1][k & (h - 1)] << 1) | (k >= h);
	}
}


inline void fft(int a[N], int n, int ln, bool inverse)
{
	for(int i = 0; i < n; i++)
	{
		int ni = rv[ln][i];
		if(i < ni)
			swap(a[i], a[ni]);
	}

	for(int st = 0; (1 << st) < n; st++)
	{
		int len = (1 << st);
		for(int k = 0; k < n; k += (len << 1))
		{
			for(int pos = k; pos < k + len; pos++)
			{
				int l = a[pos];
				int r = mul(a[pos + len], (inverse ? iw[st][pos - k] : w[st][pos - k]));

				a[pos] = norm(l + r);
				a[pos + len] = norm(l - r);
			}
		}
	}

	if(inverse)
	{
		int in = inv(n);
		for(int i = 0; i < n; i++)
			a[i] = mul(a[i], in);
	}
}

int aa[N], bb[N], cc[N];

inline void multiply(int a[N], int sza, int b[N], int szb, int c[N], int &szc)
{
	int n = 1, ln = 0;
	while(n < (sza + szb))
		n <<= 1, ln++;
	for(int i = 0; i < n; i++)
		aa[i] = (i < sza ? a[i] : 0);
	for(int i = 0; i < n; i++)
		bb[i] = (i < szb ? b[i] : 0);

	fft(aa, n, ln, false);
	fft(bb, n, ln, false);

	for(int i = 0; i < n; i++)
		cc[i] = mul(aa[i], bb[i]);

	fft(cc, n, ln, true);

	szc = n;
	for(int i = 0; i < n; i++)
		c[i] = cc[i];
}




inline int add(int x, int y)
{
    x += y;
    return x >= MOD ? x - MOD : x;
}
inline int sub(int x, int y)
{
    x -= y;
    return x < 0    ? x + MOD : x;
}

inline int Pow(int x, int y)
{
    int res = 1;
    while(y)
    {
        if(y & 1)
            res = mul(res, x);
        y >>= 1, x = mul(x, x);
    }
    return res;
}

int powr[N];
int fact[N];
int inv_fact[N];
int a[N];
int b[N];
int x[N];
int y[N];
int  res[5][N];
int sz[N];
int32_t main()
{
    FastIO;


    precalc_fft();

    powr[0] = 1;
    for(int i=1; i<N; i++)
        powr[i] = add(powr[i-1], powr[i-1]);

    fact[0] = inv_fact[0] = 1;
    for(int i=1; i<N; i++)
        fact[i] = mul(fact[i-1], i);

    inv_fact[N - 1] = Pow(fact[N - 1], MOD - 2);
    for(int i=N-2; i>=1; i--)
        inv_fact[i] = mul(inv_fact[i+1], i+1);

    int n,k;
    cin>>n>>k;
    for(int i=0; i<n; i++)
        cin>>a[i];
    for(int i=0; i<k; i++)
        cin>>b[i];

    map<int ,int> cnt;
    for(int i=0;i<n;i++)
        cnt[a[i]]++;
    for(int t=0; t<k; t++)
    {
//        DBG(b[t]);
        int nn=0,mm=0;
        for(pii i: cnt)
        {
            if(i.first>=b[t]) break;
            if(i.second==1)
                nn++;
            else
                mm++;
        }


        memset(x,0,sizeof x);
        memset(y,0,sizeof y);
        memset(res[t],0,sizeof res[t]);
        for(int i=0; i<nn+1; i++)
            x[i] = mul(fact[nn],mul(powr[i],mul(inv_fact[i], inv_fact[nn-i])));
        for(int i=0; i<2*mm+1; i++)
            y[i] = mul(fact[2*mm], mul(inv_fact[i], inv_fact[2*mm-i]));


        multiply(x,nn+1 , y , 2*mm+1 , res[t] , sz[t]);



//        for(int i=0;i<nn+1;i++) cout<<x[i]<<" "; NL;
//        for(int i=0;i<mm*2+1;i++) cout<<y[i]<<" "; NL;
//        for(int i=0;i<sz[t];i++) cout<<res[t][i]<<" "; NL;

    }

    int q;
    cin>>q;
    while(q--)
    {
        ll x;
        cin>>x;
        if(x%2)
        {
            cout<<"0\n";
            continue ;
        }
        ll ans = 0;
        x/=2;
        for(int i=0;i<k;i++)
        {
            ll l = x -b[i]-1;
//            DBG(i);
//            DBG(b[i]);
//            DBG(l);
//            DBG(sz[i]);
            if(l>sz[i] or l<0) continue;
            ans = add(ans ,res[i][l]);
        }

//        DBG(ans);
        cout<<ans<<'\n';
//        NL;NL;
    }
}
