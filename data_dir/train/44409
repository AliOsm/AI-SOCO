#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define size(x) ((int) x.size())
#define abs(x) ((x) < 0 ? -(x) : (x))
#define sqr(x) (1ll * (x) * (x))

const int maxn = 100005;
const int logn = 20;
const int inf = (int) 1e9;
const long long mod = (int) 1e9 + 7;
const long long l_inf = (long long) 4e18;
const long double pi = acosl(-1.0);
const long double eps = 1e-9;

mt19937 RANDOM(566);

struct TNode {
	long long x, y;
	long long sum, MAX;
	int l, r;
	TNode(long long x = 0, long long sum = 0) :
			x(x), sum(sum) {
		y = RANDOM();
		MAX = sum;
		l = r = -1;
	}
};

int n;
int root = -1, size = 0;
TNode tree[maxn];

inline int createNode(long long x, long long sum) {
	tree[size] = TNode(x, sum);
	return size++;
}

inline long long getMax(int v) {
	if (v == -1)
		return 0;
	return tree[v].MAX;
}

inline void updateNode(int v) {
	tree[v].MAX = max(tree[v].sum, max(getMax(tree[v].l), getMax(tree[v].r)));
}

int merge(int l, int r) {
	if (l == -1)
		return r;
	if (r == -1)
		return l;
	if (tree[l].y < tree[r].y) {
		tree[l].r = merge(tree[l].r, r);
		updateNode(l);
		return l;
	} else {
		tree[r].l = merge(l, tree[r].l);
		updateNode(r);
		return r;
	}
}

void split(int v, long long cp, int &l, int &r) {
	if (v == -1) {
		l = r = -1;
		return;
	}
	if (tree[v].x <= cp) {
		split(tree[v].r, cp, l, r);
		tree[v].r = l;
		l = v;
	} else {
		split(tree[v].l, cp, l, r);
		tree[v].l = r;
		r = v;
	}
	updateNode(v);
}

inline void process(long long x) {
	int l, r;
	split(root, x - 1, l, r);
	int v = createNode(x, getMax(l) + x);
	root = merge(merge(l, v), r);
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.precision(15);
	cout << fixed;

	cin >> n;
	for (int i = 0; i < n; i++) {
		int r, h;
		cin >> r >> h;
		process(1ll * r * r * h);
	}

	cout << getMax(root) * pi;


	return 0;
}
