#include <bits/stdc++.h>

using namespace std;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

#define all(x) (x).begin(), (x).end()
//#define int ll

struct item {
    int x, len, parent;
};

const int MAXN = 3e5 + 100;
int p[MAXN];
vector<int> g[MAXN];
bool used[MAXN];
bool used1[MAXN];
int y, ans = -1;

queue<item> q;

void bfs() {
    if (q.empty()) {
        return;
    }
    int x = q.front().x;
    int len = q.front().len;
    int par = q.front().parent;
    p[x] = par;
    if (x == y) {
        ans = len;
    }
    q.pop();
    for (int i = 0; i < g[x].size(); ++i) {
        if (used[g[x][i]]) {
            continue;
        }
        used[g[x][i]] = true;
        q.push((item){g[x][i], len + 1, x});
    }
    bfs();
}

int dfs(int u) {
    int cnt = 0;
    used1[u] = true;
    for (int to : g[u]) {
        if (!used1[to]) {
            cnt += dfs(to);
        }
    }
    return cnt + 1;
}

signed main() {

    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    int n, x;
    cin >> n >> x >> y;
    for (int i = 0; i < n - 1; ++i) {
        int a, b;
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    q.push((item){x, 1, x});
    bfs();
    int v = p[y];
    while (v != x) {
        used1[v] = true;
        v = p[v];
    }
    used1[x] = true;
    used1[y] = true;
    ll d = 0;
    ll a = n;
    ll l = dfs(x) + ans - 2;
    ll r = dfs(y) + ans - 2;
    ll m = ans - 2;
    for (int i = 1; i <= n; ++i) {
        if (!used1[i]) {
            l++;
            r++;
            d++;
        }
    }
    ll cnt = 0;
    cnt += a * (a - 1);
    cnt += l * (l - 1);
    cnt += r * (r - 1);
    cnt -= m * (m - 1);
    cnt -= d * (d - 1);
    cnt /= 2;
    cnt -= d * m;
    cout << cnt;
}
