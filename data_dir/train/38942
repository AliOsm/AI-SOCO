//be name khoda;
//#include<bits/stdc++.h>
#include<iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <stack>
#include<bitset>
#include<list>
#include<cassert>
#include<numeric>
#include <stdio.h>
#include <string.h>

 
using namespace std;

const int M = 3e5 + 5;
const int N = (1 << 10);
int mask[N];
int par[N];
int a[M][8];
int pr1 = 0;
int pr2 = 0;

int main()
{
	std::ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cin >> a[i][j];
		}
	}
	for (int i = 0; i < n; i++)
	{
		for (int j = 1; j < (1 << m); j++)
		{
			int ans = 1e9 + 7;
			for (int k = 0; k < m; k++)
			{
				if ((j >> k) % 2)
				{
					ans = min(ans, a[i][k]);
				}
			}
			if (ans == 1e9 + 7)
			{
				continue;
			}
			mask[j] = max(mask[j], ans);
			if (mask[j] == ans)
			{
				par[j] = i;
			}
		}
	}
	int ans = 0;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			int mini = a[i][j];
			int check = 0;
			for (int k = 0; k < m; k++)
			{
				if (a[i][k] < mini)
				{
					check += (1 << k);
				}
			}
			if (check == 0)
			{
				ans = max(ans, mini);
				if (ans == mini)
				{
					pr1 = i;
					pr2 = i;
				}
			}
			if (mask[check] >= mini)
			{
				ans = max(ans, mini);
				if (ans == mini)
				{
					pr1 = i;
					pr2 = par[check];
				}
			}
		}
	}
	cout << pr1 + 1 << " " << pr2 + 1 << '\n';













 
 
}