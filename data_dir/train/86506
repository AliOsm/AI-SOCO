//#include <cstdio>
#include <iostream>

#include <cstring>

#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
//#include <queue>
//#include <stack>
#include <cassert>

using namespace std;

#define SZ(a) int((a).size())
#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

#define DEBUG(x) cerr << #x << ": " << x << endl

typedef long long llong;
typedef vector<int> VI;
typedef vector<VI> VVI;

llong solve(int N, const VI& A, const VI& T) {
   map<int, VI> MAP;
   REP(i, N)
      MAP[ A[i] ].push_back( T[i] );

   llong res = 0;

   multiset< int, greater<int> > frontier;
   llong sum_frontier = 0;
   int nxta = -1;

   while ( !MAP.empty() || !frontier.empty() ) {
   // cerr << "nxta:" << nxta;
   // cerr << "  frontier:";
   // for (int t : frontier)
   //    cerr << t << ' ';
   // cerr << endl;
      auto it_map = MAP.begin();
      if (frontier.empty() ||
          (it_map != MAP.end() && it_map->first == nxta)) {
         for (int t : it_map->second) {
            frontier.insert(t);
            sum_frontier += t;
         }
         nxta = it_map->first;
         MAP.erase(it_map);
         continue;
      }

      if (!frontier.empty()) {
         auto it_set = frontier.begin();
         sum_frontier -= *it_set;
         res += sum_frontier;
         frontier.erase(it_set);
         ++nxta;
      }
   }
   
   return res;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(nullptr);

   int N;
   cin >> N;
   VI A(N);
   REP(i, N)
      cin >> A[i];
   VI T(N);
   REP(i, N)
      cin >> T[i];

   llong res = solve(N, A, T);
   cout << res << endl;

   return 0;
}
