#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<string>
#include<stdio.h>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<numeric>
#include<cmath>
#include<iomanip>
#include<sstream>
#include<bitset>
#include<stack>
#include<cstdio>
#include<queue>
#include<list>
#include <cstdlib> 
using namespace std;

#define all(v)              ((v).begin()), ((v).end())
#define allr(v)             ((v).rbegin()), ((v).rend())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define mpair               make_pair
#define lpv(i, v)           for(int i=0;i<sz(v);++i)
#define lpn(i, n)           for(int i=0;i<(int)(n);++i)
#define lps(i, j, n)        for(int i=(j);i<(int)(n);++i)
#define lpb(i, j, n)        for(int i=(j);i>=(int)(n);--i)
#define nul                 puts("")

typedef long long                   ll;
typedef long long                   LD;
typedef vector<int>                 vi;
typedef vector<ll>                  vl;
typedef vector<pair<int, int> >     vpi;
typedef vector<pair<ll, ll> >       vpl;
typedef multiset<int>               mls;
vi ans;

int gcd(int i, int j)
{

    if (i == 0)
        return j;
    gcd(j%i, i);
}

mls v;
int main()
{
    //cout << gcd(6, 4);
    int n, num = 0, l;
    cin >> n;


    lpn(i, n*n)     cin >> l, v.insert(l), num = max(num, l);
    ans.push_back(num);
    v.erase(v.find(num));

    while (ans.size() != n)
    {
        mls::iterator it = v.end();
        it--;
        int tmp = *it;
        v.erase(it);
        lpn(i, sz(ans))
        {
            int g = gcd(ans[i], tmp);
            v.erase(v.find(g));
            v.erase(v.find(g));
        }
        ans.push_back(tmp);
    }

    lpn(i, n)
        cout << ans[i] << " ";
    cout << endl;




 //   system("pause");
    return 0;
}