#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <memory.h>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 1e18+7;
const long long mod = 1e9+7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (ll (i)=0;(i)<(ll)(n);(i)++)
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

ll n, k;

pair<ll, ll> a[300005];

ll sums[300005];

ll get(int l, int r){
  if(r < 0){
    return 0;
  }
  ll res = sums[r];
  if(l > 0){
    res -= sums[l - 1];
  }
  return res;
}

int main(void) {
  #ifndef ONLINE_JUDGE
      freopen("input.txt", "rt", stdin);
      freopen("output.txt", "wt", stdout);
  #endif
  cin >> n;
  forn(i, n){
    int x; scanf("%d", &x);
    a[i].F = x;
    a[i].S = i;
  }
  sort(a, a + n);
  forn(i, n){
    sums[i] = a[i].F;
    if(i){
      sums[i] += sums[i - 1];
    }
  }
  cin >> k;
  ll cur = 0, num = 0, best = 0;
  forn(i, k){
    cur += a[i].F * i - get(0, i - 1);
  }
  best = cur;
  for(int i = 1; i < n; ++i){
    int r = i + k - 1;
    if(r >= n){
      break;
    }
    cur -= get(i, r - 1) - (k - 1) * a[i - 1].F;
    cur += a[r].F * (k - 1) - get(i, r - 1);
    if(cur < best){
      cur = best;
      num = i;
    }
  }
  forn(i, k){
    cout << a[num].S + 1 << " ";
    ++num;
  }
  cout << endl;
  return 0;
}
