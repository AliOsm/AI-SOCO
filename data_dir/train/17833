#include<bits/stdc++.h>
using namespace std;
const int MAXN=1e5+5;//点数
const int MAXM=2e5+5;//边数
namespace Tarjan
{
	struct Edge
	{
		int to,nxt;
	}edge[MAXM];
	int head[MAXN],tot;
	int Low[MAXN],DFN[MAXN],Stack[MAXN],Belong[MAXN];//Belong数组的值是1~scc
	int Index,top;
	int scc;//强连通分量的个数
	bool Instack[MAXN]; 
	int num[MAXN];//各个强连通分量包含点的个数，数组编号1~scc 
	//num数组不一定需要，结合实际情况
	void addedge(int u,int v)
	{
		edge[tot].to=v;edge[tot].nxt=head[u];head[u]=tot++;
	}
	void Tarjan(int u)
	{
		int v;
		Low[u]=DFN[u]=++Index;
		Stack[top++]=u;
		Instack[u]=true;
		for(int i=head[u];~i;i=edge[i].nxt)
		{
			v=edge[i].to;
			if(!DFN[v])
			{
				Tarjan(v);
				if(Low[u]>Low[v])Low[u]=Low[v];
			}
			else if(Instack[v]&&Low[u]>DFN[v])
				Low[u]=DFN[v];
		}
		if(Low[u]==DFN[u])
		{
			scc++;
			do
			{
				v=Stack[--top];
				Instack[v]=false;
				Belong[v]=scc;
				num[scc]++;
			}
			while(v!=u);
		}
	}
	void solve(int N)
	{
		memset(DFN,0,sizeof(DFN));
		memset(Instack,false,sizeof(Instack));
		memset(num,0,sizeof(num));
		Index=scc=top=0;
		for(int i=1;i<=N;i++)
			if(!DFN[i])
				Tarjan(i);
	}
	void init()
	{
		tot=0;
		memset(head,-1,sizeof(head));
	}
}
vector<int> E[MAXN];
int a[MAXN],in[MAXN],ans=0,mx=1e9;
bool vis[MAXN];
void dfs(int now,int fa)
{
	vis[now]=true;
	bool flag=true;
	for(auto v:E[now])
	{
		if(v!=fa)
			flag=false;
		if(vis[v])
			continue;
		dfs(v,now);
	}
	if(flag&&Tarjan::num[now]<mx)
	{
		mx=Tarjan::num[now];
		ans=now;
	}
}
int main()
{
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	int n,m,h;
	Tarjan::init();
	scanf("%d%d%d",&n,&m,&h);
	for(int i=1;i<=n;i++)
	{
		scanf("%d",&a[i]);
	}
	for(int i=1;i<=m;i++)
	{
		int u,v;
		scanf("%d%d",&u,&v);
		if((a[u]+1)%h==a[v])
			Tarjan::addedge(u,v);
		if((a[v]+1)%h==a[u])
			Tarjan::addedge(v,u);
	}
	Tarjan::solve(n);
	for(int i=1;i<=n;i++)
	{
		for(int j=Tarjan::head[i];~j;j=Tarjan::edge[j].nxt)
		{
			int v=Tarjan::edge[j].to;
			if(Tarjan::Belong[i]==Tarjan::Belong[v])
				continue;
			E[Tarjan::Belong[i]].push_back(Tarjan::Belong[v]);
			in[Tarjan::Belong[v]]++;
		}
	}
	for(int i=1;i<=Tarjan::scc;i++)
	{
		if(!vis[i]&&in[i]==0)
			dfs(i,-1);
	}
	printf("%d\n",mx);
	for(int i=1;i<=n;i++)
		if(Tarjan::Belong[i]==ans)
			printf("%d ",i);
	printf("\n");
	return 0;
}
