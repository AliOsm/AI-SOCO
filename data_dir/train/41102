/*
    STARK_BOY
*/
#include <bits/stdc++.h>
#include <fstream>
using namespace std;
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define repe(i,a,b) for(ll i=a;i<=b;i++)
#define bac(i,a,b) for(ll i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define F first
#define S second
typedef long long ll;
typedef vector< ll > vi;
typedef vector<pair<ll,ll> > vpii;
typedef pair<ll,ll> pii;
#define all(c) c.begin(),c.end()
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define setbitc(x) __builtin_popcount(x)
#define init(x,a) memset(x,a,sizeof(x))
#define INF 1000000000  
#define MOD 1000000007
#define M 998244353
#define N 1005
# define PI           3.14159265358979323846  /* pi */
mt19937 rng32(chrono::steady_clock::now().time_since_epoch().count());

ll modExpo(ll x,ll n)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return modExpo((x*x)%MOD,n/2);
    else                             //n is odd
        
        return (x*modExpo((x*x)%MOD,(n-1)/2))%MOD;

}
ll modInverse(ll n) 
{ 
    return modExpo(n,MOD-2); 
}

//Variables Start
ll n,m,k;
double dp[N][N][2];
string s,s1;
//Variables End

int main()
{
    ios
    int ti=1;
    //cin>>ti;
    while(ti--)
    {
        cin>>n>>m;
        if(n==0){cout<<"0";return 0;}
        dp[n][m][0]=1;
        double ans=(double)n/(n+m);
        bac(i,n,1)
        {
            bac(j,m,0)
            {
                if(i==n && j==m)continue;
                double t=(j+1.0)/(i+j+2.0);
                double t3=(i+1.0)/(i+j+1.0);
                double t1=(j+2.0)/(i+j+2.0);
                double t2=(j+1.0)/(i+j+1.0);
                dp[i][j][0]=dp[i+1][j+1][1]*t*t3+dp[i][j+2][1]*t1*t2;
                dp[i][j][1]=dp[i][j+1][0]*t2;
                double x=((double)i)/(i+j+0.0);
                //cout<<x<<" ";
                ans+=dp[i][j][0]*x;
                //cout<<ans<<endl;
                //cout<<dp[i][j][0]<<" "<<dp[i][j][1]<<endl;
            }
        }
        cout<<fixed<<setprecision(10)<<ans;      

    }
    return 0;
        
}