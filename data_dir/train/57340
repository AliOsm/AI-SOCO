#include <bits/stdc++.h>
using namespace std;
#define pii             pair<int , int >
#define inf             1111111111
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pn              printf("\n")
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b, c)    printf("%d %d %d\n", a, b, c)
#define pcs(a)          printf("Case %d: ", a)
#define mp              make_pair
#define vi              vector<int >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define mem(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
#define x               first
#define y               second
#define lc              (2*i)
#define rc              (2*i+1)

typedef long long LL;
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1,0};int dy[]={0,1,1,1,0,-1,-1,-1,0};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//int  on(int n, int pos) {return n | (1<<pos);} //typecast 1 in case of int
//int  off(int n, int pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

const int M = 300010;

struct node {
    int subsize;
    node *nxt[27];
    node()
    {
        subsize = 0;
        for (int i=0; i<27; i++) nxt[i]=NULL;
    }
};

int visited[M];
char let[M];
int val[M];
node *roots[M];
vi A[M];
int MAX = 0;
int CNT = 0;

int margaery(node *small, node *large)
{
    int sum = 0;
    for (int i = 0; i < 27; i++)
    {
        if (small->nxt[i] != NULL)
        {
            if (large->nxt[i] == NULL) large->nxt[i] = new node(), sum++;
            sum += margaery(small->nxt[i], large->nxt[i]);
        }
    }
    return sum;
}
//
//void printtrie(node *u, string str)
//{
//    if (str.size() > 0) cout<<str<<endl;
//
//    for (int i = 0; i < 27; i++)
//    {
//        if (u->nxt[i] != NULL)
//        {
//            printtrie(u->nxt[i], str+((char)(i+'a')));
//        }
//    }
//}

void dfs(int u)
{
    roots[u] = new node();
    vi child;
    visited[u] = true;
    for (int v : A[u]) if (!visited[v]) dfs(v), child.pb(v);

    node *temp = new node();

//    prr("-----------------");

    for (int v : child)
    {
//        prr("merging", u, "with", v);
//        prr("size of u:", temp->subsize);
//        printtrie(temp, "");
//        prr("size of v:", roots[v]->subsize);
//        printtrie(roots[v], "");

        if (temp->subsize >= roots[v]->subsize)
        {
            temp->subsize += margaery(roots[v], temp);
        }
        else
        {
            int k = roots[v]->subsize;
            k += margaery(temp, roots[v]);
            temp = roots[v];
            temp->subsize = k;
        }
//
//        prr("after merge size:", temp->subsize);
//        printtrie(temp, "");
//        getchar();
    }
//
    roots[u]->nxt[let[u]-'a'] = temp;
    roots[u]->subsize = temp->subsize + 1;
//    prr("RESULTS AT u:", u, "size:", roots[u]->subsize);
//    printtrie(roots[u], "");
//    prr("-----------------");

    if (roots[u]->subsize + val[u] > MAX) MAX = roots[u]->subsize + val[u], CNT = 1;
    else if (MAX == roots[u]->subsize + val[u]) CNT++;
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("/home/riaz/Documents/in.txt", "r", stdin);
//    freopen("/home/riaz/Documents/out.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);

    int i, j, k, n;

    let[0] = '?';

    in(n);
    for (i = 1; i <= n; i++) in(val[i]);
    ins(let+1);
    for (k = 1; k < n; k++)
    {
        in2(i, j);
        A[i].pb(j);
        A[j].pb(i);
    }

    dfs(1);

    pr(MAX);
    pr(CNT);


return 0;
}
