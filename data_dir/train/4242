/*
Author: Hossam Eissa

Idea:

*/
#include <bits/stdc++.h>
#include<stdio.h>
#include <map>
#include<unordered_map>
using namespace std;
#define sf(a) scanf("%d",&a)
#define sf2(a,b) scanf("%d %d",&a,&b)
#define sf3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define pf(a) printf("%d",a)
#define pf2(a,b) printf("%d %d",a,b)
#define pf3(a,b,c) printf("%d %d %d",a,b,c)
#define sfl(a) scanf("%lld",&a)
#define sfl2(a,b) scanf("%lld %lld",&a,&b)
#define sfl3(a,b,c) scanf("%lld %lld %lld",&a,&b,&c)
#define pfl(a) printf("%lld",a)
#define pfl2(a,b) printf("%lld %lld",a,b)
#define pfl3(a,b,c) printf("%lld %lld %lld",a,b,c)
#define nl printf("\n")
#define ll long long
#define se second
#define fi first
#define mk(a, b) make_pair(a, b)
#define pb push_back
#define vi vector<int>
#define vvi vector<vector<int>>
#define pii pair<int, int>
#define vvpi vector<vector<pii>>
#define pli pair<ll, int>
#define INF 2e9+5
#define MAX (int)1e6 + 5
#define FI freopen("input.txt", "r", stdin);
#define FO freopen("o.txt", "w", stdout);
#define in ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define edge pair<ll, pair<int, int>>
#define CYA  exit(0);
#define pi acos(-1);
int dx[] = { 0, 1, 0, -1 };
int dy[] = { 1, 0, -1, 0 }; // 4 Direction*/
/*int dx[]={1,1,0,-1,-1,-1,0,1};
int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction*/
/*int dx[] = { 2,1,-1,-2,-2,-1,1,2 };
int dy[] = { 1,2,2,1,-1,-2,-2,-1 };//Knight Direction*/
const int MOD = 1e9 + 7;
const int N = 1e6 + 5;
int n, m, k;
bool vis[N],vis2[N];
int main()
{
    in;
    cin>>n;
    vector<int>v(n),v2(n),answer(n);
    for(int i=0;i<n;i++){
        cin>>v[i];
    }
    for(int i=0;i<n;i++)cin>>v2[i];

    vector<int >vx;
    for(int i=0;i<n;i++){
        if(v[i]==v2[i]){
            answer[i]=v[i];
            vis[v[i]]=1;
        }
        else {
        vx.push_back(i);
        }
    }
    vector<int>num;
    for(int i=1;i<=n;i++){
        if(!vis[i])num.push_back(i);
    }
    if(vx.size()==1){
        answer[vx[0]]=num[0];
    }
    else{
    answer[vx[0]]=num[0];
    answer[vx[1]]=num[1];
    int cnt1=0,cnt2=0;
    for(int i=0;i<n;i++){
        if(answer[i]==v[i])cnt1++;
        if(answer[i]==v2[i])cnt2++;
    }
    if(cnt1<n-1||cnt2<n-1){
          answer[vx[0]]=num[1];
    answer[vx[1]]=num[0];
    }
    }
    for(int i=0;i<n;i++)cout<<answer[i]<<" " ;

}
