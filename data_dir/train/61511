#include <iostream>
#include <algorithm>
#include <time.h>
#include <stack>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <cassert>

using namespace std;

const int N = 100005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;

int q,n,m;
vector <int> g[2 * N];
int ind[N] , p[N] , t[N];
int answx[N] , answy[N];

int main(){
    scanf("%d%d%d",&q,&n,&m);
    for(int i=1;i<=q;i++){
        scanf("%d%d%d",&ind[i],&p[i],&t[i]);
        int L = p[i] - t[i] + 100000;
        g[L].push_back(i);
    }
    for(int i=0;i<=200000;i++){
        if((int)g[i].size() == 0)continue;
        vector < pair<int,int> > x;
        vector < pair<int,int> > y;
        for(int j=0;j<(int)g[i].size();j++){
            int id = g[i][j];
            if(ind[id] == 1)
                x.push_back(make_pair(p[id] , id));
            else
                y.push_back(make_pair(p[id] , id));
        }
        sort(x.begin() , x.end());
        sort(y.begin() , y.end());
        vector < pair<int,int> > g1 , g2;

        for(int j=0;j<(int)x.size();j++) g1.push_back(x[j]);
        for(int j=(int)y.size()-1;j>=0;j--) g1.push_back(y[j]);

        for(int j=(int)y.size()-1;j>=0;j--) g2.push_back(y[j]);
        for(int j=0;j<(int)x.size();j++) g2.push_back(x[j]);

        for(int j=0;j<(int)g1.size();j++){
            int id1 = g2[j].second , id2 = g1[j].second;
            if(ind[id2] == 1){
                answx[id1] = p[id2];
                answy[id1] = m;
            }
            else{
                answx[id1] = n;
                answy[id1] = p[id2];
            }
        }
    }
    for(int i=1;i<=q;i++) printf("%d %d\n",answx[i] , answy[i]);
    return 0;
}
