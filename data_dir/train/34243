#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 6e5 + 5;
int n, ans;
int col[N];
int add[N];

pii p[N];

vec <int> sml;

struct Dsu {
    int par[N];
    int nxt[N];
    int cnt[N];
} dsu;

int root(int u) {
    return dsu.par[u] == u? u: dsu.par[u] = root(dsu.par[u]);
}

void unite(int u, int v) {
    u = root(u);
    v = root(v);
    if(u == v) {
        return;
    }
    if(dsu.cnt[u] < dsu.cnt[v]) {
        swap(u, v);
    }
    dsu.nxt[u] = max(dsu.nxt[u], dsu.nxt[v]);
    dsu.cnt[u] += dsu.cnt[v];
    dsu.par[v] = u;
}

void input() {
    cin >> n;
    for(int i = 1; i <= n; ++i) {
        cin >> p[i].xx;
        cin >> p[i].yy; p[i].yy--;
        sml.pb(p[i].xx - 1);
        sml.pb(p[i].xx);
        sml.pb(p[i].yy);
    }
    for(int i = 0; i < N; ++i) {
        dsu.par[i] = i;
        dsu.cnt[i] = 1;
        dsu.nxt[i] = i;
    }
}

void compress() {
    sort(all(sml));
    sml.erase(unique(all(sml)), sml.end());
    for(int i = 1; i <= n; ++i) {
        p[i].xx = lb(all(sml), p[i].xx) - sml.begin() + 1;
        p[i].yy = lb(all(sml), p[i].yy) - sml.begin() + 1;
    }
}

void paint(int l, int r) {
    for(int i = dsu.nxt[root(l)]; i <= r; i = dsu.nxt[root(i + 1)]) {
        ans -= add[i];
        col[i] = 1;
        unite(i, i + 1);
    }
}

void update(int i) {
    if(col[i]) {
        return;
    }
    ans -= add[i];
    add[i] = 1;
    ans += add[i];
}

void solve() {
    compress();
    for(int i = 1; i <= n; ++i) {
        int l = p[i].xx;
        int r = p[i].yy;
        paint(l, r);
        update(l - 1);
        cout << ans << " ";
    }
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
