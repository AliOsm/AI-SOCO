#include <iostream>
#include <stdio.h>
#include <cmath>
#include <algorithm>
#include <vector>

using namespace std;

const int MAX_LEN = 20;
const int MAX_SUM = 10 * MAX_LEN;

long long f[2][MAX_LEN][MAX_SUM];

void upd(long long &x, long long y) {
	x = max(x, y);
}

int main() {
	long long n;
	cin >> n;
	vector<int> digits;
	long long m = n;
	while (m > 0LL) {
		digits.push_back((int)(m % 10LL));
		m /= 10LL;
	}
	reverse(digits.begin(), digits.end());
	int len = (int)digits.size();
	for (int i = 0; i < 2; i++) {
		for (int j = 0; j < MAX_LEN; j++) {
			for (int u = 0; u < MAX_SUM; u++) {
				f[i][j][u] = -1LL;
			}
		}
	}
	f[1][0][0] = 0LL;
	int max_sum = len * 10 + 1;
	for (int i = 0; i < len; i++) {
		for (int j = 0; j <= max_sum; j++) {
			if (f[0][i][j] == f[1][i][j] && f[0][i][j] == -1LL) {
				continue;
			}
			for (int newC = 0; newC < 10; newC++) {
				if (newC < digits[i]) {
					upd(f[0][i + 1][j + newC], f[0][i][j] * 10LL + 1LL * newC);
					upd(f[0][i + 1][j + newC], f[1][i][j] * 10LL + 1LL * newC);
				} else if (newC == digits[i]) {
					upd(f[0][i + 1][j + newC], f[0][i][j] * 10LL + 1LL * newC);
					upd(f[1][i + 1][j + newC], f[1][i][j] * 10LL + 1LL * newC);	
				} else if (newC > digits[i]) {
					upd(f[0][i + 1][j + newC], f[0][i][j] * 10LL + 1LL * newC);
				}
			}
		}
	}
	long long ans = -1LL;
	for (int i = max_sum; i >= 0; --i) {
		for (int j = 0; j <= len; j++) {
			ans = max(ans, f[0][j][i]);
			ans = max(ans, f[1][j][i]);
		}
		if (ans != -1LL) {
			break;
		}
	}
	cout << ans << endl;
	return 0;
}