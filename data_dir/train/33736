// In the name of God
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <assert.h>
#include <bitset>
#include <unordered_map>
#define sqr(a) (a)*(a)
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
    
const long long INF = (long long)1e18;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)1e6 + 227 + 1;    
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-9;
 
long long bin_pow(long long a, long long b) {
    if(!b) return 1;
 
    long long ans = bin_pow(a, b / 2);
 
    ans = ans * ans;
 
    if(b % 2) ans = ans * a;
 
    return ans;
}

int a[3][3];
int n;

bool check() {
    vector<int> b;

    for(int i = 0; i < 3; i++)
        for(int j = 0; j < 3; j++) {
            if(i == 1 && j == 1) continue;

            if(a[i][j] < 1 || a[i][j] > n) return 0;
        }

    b.push_back(a[0][0] + a[0][1] + a[1][0]);
    b.push_back(a[2][2] + a[2][1] + a[1][2]);
    b.push_back(a[2][0] + a[2][1] + a[1][0]);
    b.push_back(a[0][2] + a[0][1] + a[1][2]);

    sort(all(b));

    return b[0] == b.back();    
}

int main() {
    // freopen(".in", "r", stdin);

    cin >> n;
    cin >> a[0][1];
    cin >> a[1][0];
    cin >> a[1][2];
    cin >> a[2][1];

    long long ans = 0;
    for(a[0][0] = 1; a[0][0] <= n; a[0][0]++) {
        a[2][0] = (a[0][0] + a[0][1] + a[1][0]) - a[1][0] - a[2][1];
        a[0][2] = (a[0][0] + a[0][1] + a[1][0]) - a[0][1] - a[1][2];
        a[2][2] = (a[0][0] + a[0][1] + a[1][0]) - a[2][1] - a[1][2];

        ans += check() * n;
    }

    cout << ans << "\n";
}
