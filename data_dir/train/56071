#include <bits/stdc++.h>

#if (_WIN32 || __WIN32__)
#  define LLD "%I64d"
#else
#  define LLD "%lld"
#endif

using std::istream; using std::ostream; using std::fixed; using std::greater;
using std::tuple; using std::tie; using std::make_pair; using std::multiset;
using std::nth_element; using std::min_element; using std::max_element;
using std::vector; using std::set; using std::map; using std::string;
using std::fill; using std::copy; using std::sort; using std::unique;
using std::unordered_set; using std::unordered_map; using std::pair;
using std::next_permutation; using std::reverse; using std::rotate;
using std::cin; using std::cout; using std::cerr; using std::endl;
using std::lower_bound; using std::upper_bound; using std::deque;
using std::min; using std::max; using std::swap; using std::abs;
using std::priority_queue; using std::queue; using std::bitset;
using std::make_tuple; using std::iota;

typedef long long ll;
typedef long double ld;

ll rnd(ll x, ll y) { static auto gen = std::bind(std::uniform_int_distribution<ll>(), std::mt19937(960172)); return gen() % (y - x + 1) + x; }
ll gcd(ll a, ll b) { while (b > 0) { ll t = a % b; a = b; b = t; } return a; }

int const INF = (int) 1e9;
ll const INFL = (ll) INF * INF;
ld const PI = 3.1415926535897932384626433832795028;

vector<string> code(char s[22][22], int n, int m) {
	static char t[22][22];
	
	vector<string> ret;
	
	for (int it = 0; it < 4; ++it) {
		string cur;
		for (int i = 0; i < n; ++i) {
			cur += string(s[i], s[i] + m);
		}
		ret.push_back(cur);
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				t[j][n - 1 - i] = s[i][j];
			}
		}
		swap(n, m);
		for (int i = 0; i < n; ++i) {
			copy(t[i], t[i] + m, s[i]);
		}
	}
	
	sort(ret.begin(), ret.end());
	
	return ret;
}

char s[22][22];

bool check(int n, int m, int a, int b) {
	static char t[22][22];
	
	set<vector<string>> codes;
	for (int i = 0; i < n; i += a) {
		for (int j = 0; j < m; j += b) {
			
			for (int x = 0; x < a; ++x) {
				copy(s[i + x] + j, s[i + x] + j + b, t[x]);
			}
						
			codes.insert(code(t, a, b));
		
		}
	}
		
	return (int)codes.size() == (n / a) * (m / b);
}

void solve() {
	
	int n, m;
	scanf("%d%d ", &n, &m);
	
	for (int i = 0; i < n; ++i) gets(s[i]);
	
	int cnt = 0;
	int X = 1e3, Y = 1e3;
	
	for (int x = 1; x <= n; ++x) {
		for (int y = 1; y <= m; ++y) {
			if (n % x == 0 && m % y == 0) {
				if (check(n, m, x, y)) {
					++cnt;
					if (X * Y > x * y || (X * Y == x * y && X > x)) {
						X = x;
						Y = y;
					}
				}
			
			}
		}
	}
	
	cout << cnt << endl;
	cout << X << " " << Y << endl;
}



int main() {

	cout.precision(15);
	cout << fixed;
	cerr.precision(6);
	cerr << fixed;
	
	solve();

#ifdef LOCAL
	cerr << "time: " << (ll) clock() * 1000 / CLOCKS_PER_SEC << " ms" << endl;
#endif
}