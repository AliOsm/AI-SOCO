#include<bits/stdc++.h>
using namespace std;

#define fi first
#define se second
#define long long long
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

///////////////////////////////////
///// for any code taken from cheatsheet

/////

const int K = 100000;
set<int> st[200003];
int n, m;
int A[100003];
int par[100003], depth[100003];

long solve()
{
	memset(par, -1, sizeof par);
	memset(depth, 0, sizeof depth);
	for(int i = 0; i <= 200000; i++) st[i].clear();
	for(int i = 1; i <= m; i++)
		st[A[i]-i+K].insert(i);
	// for(int i = 1; i <= m; i++) printf("%d ", A[i]); printf("\n");

	long res = 0;
	for(int i = 1; i <= n; i++)
	{
		int kill = 0;
		int idx = 0;
		vector<int> temp;
		while(1)
		{
			auto it = st[i-kill+K].upper_bound(idx);
			if(it == st[i-kill+K].end()) break;
			if(par[*it] != -1)
			{
				int x = *it;
				while(temp.size())
				{
					par[temp.back()] = x;
					depth[temp.back()] = depth[x]+1;
					x = temp.back();
					temp.pop_back();
				}
				kill = depth[x];
				break;
			}
			temp.push_back(*it);
			idx = *it;
			kill++;
		}
		if(temp.size())
		{
			// for(auto x : temp) printf("%d|%d ", x, par[x]); printf("\n");
			int x = temp.back(); temp.pop_back();
			depth[x] = 1;
			while(temp.size())
			{
				par[temp.back()] = x;
				depth[temp.back()] = depth[x]+1;
				x = temp.back();
				temp.pop_back();
				// printf("UPDATE %d %d %d\n", x, par[x], depth[x]);
			}
			kill = depth[x];
		}

		int add = min(m+1-kill, n-i);
		res += add;
		// printf("%d %d %d\n", add, i, kill);
	}
	return res;
}

int main()
{
	// freopen("input.in", "r", stdin);

	scanf("%d %d", &n, &m);
	for(int i = 1; i <= m; i++)
		scanf("%d", &A[i]);
	if(n == 1)
	{
		printf("0\n");
		return 0;
	}

	long X = solve();
	for(int i = 1; i <= m; i++)
		A[i] = (n-A[i]+1);
	// printf("PEMBATAS\n");
	long Y = solve();

	printf("%lld\n", X+Y+n);
}