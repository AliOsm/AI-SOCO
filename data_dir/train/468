#include <bits/stdc++.h>
using namespace std;

/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______
 * |\  \|\  \  |\  ___ \  |\  ___ \
 * \ \  \/  /|_\ \   __/| \ \   __/|
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

const int mxN = 300010;

vector<int> dp[mxN];
long long out[mxN];
vector<int> tree[mxN];

int N;

void dfs(int v = 0,int p = -1) {
	if(p != -1 && (int)tree[v].size() == 1) {
		return;
	}
	vector<pair<int,int> > limit;
	for(auto u : tree[v]) if(u != p) {
		dfs(u,v);
		limit.push_back({dp[u].size(),u});
	}
	sort(limit.rbegin(),limit.rend());
	for(int k = 1;k <= (int) limit.size();k++) {
		vector<int> hvd;
		if(limit[k-1].first < k) {
			dp[v].push_back(2);
			continue;
		}
		for(int i = 0;i < (int)limit.size() && limit[i].first >= k;i++) {
			hvd.push_back(dp[limit[i].second][k-1]);
		}
		if((int)hvd.size() < k) {
			assert(false);
			dp[v].push_back(2);
			continue;
		}
		if((int)hvd.size() == k) {
			dp[v].push_back(*min_element(hvd.begin(),hvd.end())+1);
			continue;
		}
		sort(hvd.rbegin(),hvd.rend());
		dp[v].push_back(hvd[k-1]+1);
	}
}

vector<int> * cur[mxN];
void solve(int v = 0,int p = -1) {
	if(p != -1 && (int)tree[v].size() == 1) {
		out[v] = N;
		cur[v] = new vector<int>();
		return;
	}
	int big = -1,mx = 0;
	for(auto u : tree[v]) {
		if(p == u) continue;
		solve(u,v);
		if((int)cur[u]->size() >= mx) mx = cur[u]->size(),big = u;
	}
	assert(big != -1);
	cur[v] = cur[big];
	out[v] = out[big];
	for(int k = 0;k < (int) dp[v].size();k++) {
		if((int)cur[v]->size() <= k) {
			cur[v]->push_back(dp[v][k]);
			out[v] += dp[v][k] - 1;
		} else {
			if((*cur[v])[k] < dp[v][k]) out[v] += dp[v][k] - (*cur[v])[k],(*cur[v])[k] = dp[v][k];
		}
	}
	for(auto u : tree[v]) {
		if(p == u || big == u) continue;
		for(int k = 0;k < (int)cur[u]->size();k++) {
			if((int)cur[v]->size() <= k) {
				assert(false);
				cur[v]->push_back((*cur[u])[k]);
				out[v] += (*cur[u])[k] - 1;
			} else {
				if((*cur[v])[k] < (*cur[u])[k]) out[v] += (*cur[u])[k] - (*cur[v])[k],(*cur[v])[k] = (*cur[u])[k];
			}
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	int u,v;
	cin>>N;
	for(int i = 1;i < N;i++) {
		cin>>u>>v;
		u--,v--;
		tree[u].push_back(v);
		tree[v].push_back(u);
	}
	dfs();
	solve();
	long long res = 0;
	for(int i = 0;i < N;i++) res += out[i];
	cout<<res<<'\n';
	return 0;
}
