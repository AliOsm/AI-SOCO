#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>

using namespace std;

//1165  

#define int long long

const int INF = 1e6 + 239;

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	int n, m;
	cin >> n >> m;
	vector<int> k(n);
	for (auto &t : k) {
		cin >> t;
	}
	vector<pair<int, int>> p(m);
	for (auto &t : p) {
		cin >> t.first >> t.second;
		t.second--;
	}
	
	auto ch = [&](int d) {
		vector<int> in(n, -1);
		for (auto &t : p) {
			if (t.first <= d) {
				in[t.second] = max(in[t.second], t.first);
			}
		}
		vector<pair<int, int>> ef;
		for (int i = 0; i < n; i++) {
			if (in[i] != -1) {
				ef.push_back({in[i], i});
			}
		}
		sort(ef.begin(), ef.end());
		vector<int> left = k;
		int alr = 0;
		for (auto t : ef) {
			if (t.first <= d) {
				int can = min(t.first - alr, left[t.second]);
				left[t.second] -= can;
				alr += can;
			} else {
				break;
			}
		}
		int cnt_need = 0;
		for (auto t : k) {
			cnt_need += 2 * t;
		}
		cnt_need -= alr;
		if (cnt_need <= d) {
			return true;
		} else {
			return false;
		}
	};
	int l = 0;
	int r = INF;
	while (r - l > 1) {
		int mid = (r + l) >> 1;
		if (ch(mid)) {
			r = mid;
		} else {
			l = mid;
		}
	}
	cout << r << endl;
	//cout << ch(100) << endl;
}
