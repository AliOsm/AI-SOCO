//gskhirtladze

#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
#include <queue>

#define fi first
#define se second
#define mk make_pair
#define pb push_back

using namespace std;

priority_queue < pair < int , int > > q[2];
vector < pair < int , int > > g[2];
int o,x,t,u,v,now,ans1,ans2,i,l[2];

main()
 {
  cin>>o>>x;
  g[0].pb(mk(0,0));
  g[1].pb(mk(0,0));
  for (i=1;i<=o;i++)
   {
    scanf("%d%d%d",&t,&u,&v);
    g[t].pb(mk(u,v));
   }
  sort(g[0].begin(),g[0].end());
  sort(g[1].begin(),g[1].end());
  while (q[0].size() > 0) q[0].pop();
  while (q[1].size() > 0) q[1].pop();
  now=x;
  t=1;
  l[0]=1;
  l[1]=1;
  while (true)
   {
    while (l[t] < g[t].size() && g[t][l[t]].fi <= now) { q[t].push(mk(g[t][l[t]].se,g[t][l[t]].fi)); l[t]++; }
    if (q[t].size() == 0) break;
    if (q[t].top().se > now) break;
    now+=q[t].top().fi;
    q[t].pop();
    ans1++;
    t=1-t;
   }
  while (q[0].size() > 0) q[0].pop();
  while (q[1].size() > 0) q[1].pop();
  now=x;
  t=0;
  l[0]=1;
  l[1]=1;
  while (true)
   {
    while (l[t] < g[t].size() && g[t][l[t]].fi <= now) { q[t].push(mk(g[t][l[t]].se,g[t][l[t]].fi)); l[t]++; }
    if (q[t].size() == 0) break;
    if (q[t].top().se > now) break;
    now+=q[t].top().fi;
    q[t].pop();
    ans2++;
    t=1-t;
   }
  cout<<max(ans1,ans2)<<endl;
 }
