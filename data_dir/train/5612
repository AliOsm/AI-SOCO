#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifndef ONLINE_JUDGE
    #define debug(_x)                 std::cerr << (#_x) << " = " << (_x) << '\n'; std::cerr.flush();
#else
    #define debug(_x)                 ;
#endif
#define endl                          "\n"
template<typename Tp>
inline void outarr(Tp _array, const std::size_t _N, const char* _delim = " ") {
    Tp end = std::next(_array, _N);
    for (Tp current = _array; current != end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = int64_t;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
int power[2000];
int pr[2000];
char used[2000];
int id[2000];
int G_T = 0;

inline int Take(int x, int n) {
    used[x] = true;
    ++G_T;
    cout << x + 1 << endl;
    cout.flush();
    if (G_T == n) {
        return -1;
    }
    int res;
    cin >> res;
    --res;
    used[res] = true;
    ++G_T;
    return res;
}

int CUR = 0;
int Next(int n) {
    if (CUR < 5000) {
        for (int c = CUR; c < n; ++c) {
            int i = id[c];
            if (used[i] || pr[i] == -1) {
                continue;
            }
            CUR = c + 1;
            return i;
        }
        CUR = 5000;
    }
    for (int c = CUR - 5000; c < n; ++c) {
        int i = id[c];
        if (used[i]) {
            continue;
        }
        CUR = c + 1;
        return i;
    }
    return -1;
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int n, m;
    cin >> n >> m;
    loop(n + n) {
        cin >> power[i];
        id[i] = i;
    }
    sort(id, id + n + n, [](int i, int j) {
        return power[i] > power[j];
    });
    memset(pr, -1, sizeof(pr));
    loop(m) {
        int a, b;
        cin >> a >> b;
        --a; --b;
        pr[a] = b;
        pr[b] = a;
    }
    int t;
    cin >> t;
    n += n;
    if (t == 1) {
        for (int h = Next(n); h != -1; h = Next(n)) {
            Take(h, n);
            if (G_T == n) {
                return 0;
            }
        }
    } else {
        int y;
        cin >> y;
        --y;
        used[y] = true;
        ++G_T;
        if (G_T == n) {
            return 0;
        }
        while (pr[y] != -1) {
            y = Take(pr[y], n);
            if (G_T == n) {
                return 0;
            }
        }
        for (int h = Next(n); h != -1; h = Next(n)) {
            Take(h, n);
            if (G_T == n) {
                return 0;
            }
        }
    }

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}