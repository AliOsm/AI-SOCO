/*
ID: hepic
PROG: nocows
LANG: C++11
*/
#include<bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REP(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define SIZE 100010
#define MAXN 1000000007
#define NUM 20
#define PI acos(-1)
#define open_read1 freopen("C:\\Users\\Hepic\\Desktop\\a.txt", "r", stdin)
#define open_write1 freopen("C:\\Users\\Hepic\\Desktop\\b.txt", "w", stdout)
#define open_read freopen("cruise.in", "r", stdin)
#define open_write freopen("cruise.out", "w", stdout)

using namespace std;


typedef long long LL;
typedef unsigned long long LLU;
typedef pair<int,int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<LL, PLL> PLPLL;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    return out<<"("<<obj.first<<","<<obj.second<<")";
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N])
{
     REP(i, 0, N)
        out<<arr[i]<<" ";
    out<<endl;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}


template<typename T>
T fast_exp_pow(T base, T exp, T mod)
{
    LL res = 1;

    while(exp)
    {
        if(exp&1)
        {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;
    }

    return res;
}

/*#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################*/

int N;
int target, prime_dist, num, old_pos;
int numbers[SIZE], position[SIZE], find_num[SIZE];
bool is_prime[SIZE];
vector<int> primes;
vector<PII> changes;



void sieve_of_eratoshenes()
{
    ms(is_prime, true);
    is_prime[0] = false;
    is_prime[1] = false;

    for(int i=2; i*i<=SIZE; ++i)
        if(is_prime[i])
            for(int j=i*i; j<SIZE; j+=i)
                is_prime[j] = false;

    REP(i, 0, SIZE)
        if(is_prime[i])
            primes.pb(i);
}





int main()
{
   // open_read1;
    scanf("%d", &N);

    REP(i, 0, N)
        scanf("%d", numbers+i);



    sieve_of_eratoshenes();

    REP(i, 0, N)
    {
        position[numbers[i]] = i+1;
        find_num[i+1] = numbers[i];
    }

    target = 1;

    while(target <= N)
    {
        while(position[target] > target)
        {
            auto prime_dist = upper_bound(ALL(primes), position[target]-target+1);
            --prime_dist;


            int pos = position[target] - *prime_dist + 1;
             changes.eb(pos, position[target]);

            old_pos = position[target];
            position[target] = pos;

            num = find_num[pos];
            position[num] = old_pos;

            find_num[pos] = target;
            find_num[old_pos] = num;


//            FOR(i, 1, N)
//                cout<<position[i]<<" ";
//            cout<<endl;
//
//            FOR(i, 1, N)
//                cout<<find_num[i]<<" ";
//            cout<<endl;
        }

        ++target;
    }



    cout<<changes.size()<<endl;
    for(auto v: changes)
        cout<<v.fir<<" "<<v.sec<<endl;

    return 0;
}
