#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm) -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
/* @@@ ----------------------------------- */

int64_t probA()
{
    int64_t n;
    cin >> n;
    vector<string> a(n);
    cin >> a;

    map<pair<char, char>, int64_t> cnt;
    array<int64_t, 30> arr;
    fill(begin(arr), end(arr), 0);

    for(const auto & wrd: a)
    {
        const set<char> w(begin(wrd), end(wrd));

        if (w.size() == 2)
        {
            auto iter = begin(w);
            const auto u = *iter;
            ++ iter;
            const auto v = *iter;
            cnt[minmax(u, v)] += wrd.length();
        }
        else if (w.size() == 1)
        {
            const auto iter = begin(w);
            arr[(*iter) - 'a'] += wrd.length();
        }
    }

    for(auto & pr: cnt)
        pr.second += arr[pr.first.first - 'a'] + arr[pr.first.second - 'a'];

    DEBUG(arr);
    DEBUG(cnt);

    int64_t out = *max_element(begin(arr), end(arr));
    for(size_t i = 0; i < arr.size(); ++i)
        for(size_t j = i + 1; j < arr.size(); ++ j)
            out = max(out, arr[i] + arr[j]);

    for(const auto & pr: cnt)
        out = max(out, pr.second);

    return out;
}


int main( const int argc, char * argv [])
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    cout << probA();

    return EXIT_SUCCESS;
}
