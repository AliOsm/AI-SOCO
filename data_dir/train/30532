#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define si(n) scanf("%d",&n)
#define MAX 300005

const int mod=998244353;


int bigmod(long long a,long long p)
{
    long long ret = 1;
    while(p) {
        if(p & 1) ret = ret * a % mod;
        a = a * a % mod;
        p >>= 1;
    }
    return ret;
}

int mod_add(ll a,ll b) {
  a+=b;
  if(a>=mod) a-=mod;
  return a;
}

int mod_sub(ll a,ll b) {
  a-=b;
  if (a<0) a+=mod;
  return a;
}

int mod_mul(ll a, ll b) {
  return (a*b)%mod;
}

int mod_div(ll a,ll b)
{
    return mod_mul(a,bigmod(b,mod-2));
}


int mod_power(int a,int b) {
  int res=1;
  while (b>0) {
    if (b&1) {
      res=mod_mul(res,a);
    }
    a=mod_mul(a,a);
    b>>=1;
  }
  return res;
}

vector<int>gr[MAX];
int n,m;
int vis[MAX];
int x,y;
vector<pair<int,int> >v;


bool go(int now,int col)
{
    if(vis[now]!=-1){
        return col==vis[now];
    }
    bool ret=true;
    vis[now]=col;
    if(!col)x++;
    else y++;
    for(auto to : gr[now]){
        ret = go(to,!col);
        if(ret==false)return false;
    }
    return true;
}

int main()
{
    //freopen("input.txt","r",stdin);
    int i,j,t;
    si(t);
    while(t--){
        si(n);si(m);
        for(i=0;i<=n;i++)gr[i].clear();
        for(i=0;i<=n;i++)vis[i]=-1;
        v.clear();


        for(i=1;i<=m;i++){
            int u,v;
            si(u);si(v);
            gr[u].push_back(v);
            gr[v].push_back(u);
        }
        bool flag=true;
        for(i=1;i<=n;i++){
            //cout<<i<<' '<<vis[i]<<endl;
            if(vis[i]!=-1)continue;
            x=0;y=0;
            flag=go(i,0);

            if(!flag)break;
            //cout<<x<<' '<<y<<endl;
            v.push_back({x,y});
        }
        if(!flag)printf("0\n");
        else{
            ll ans=1;
            for(auto now : v){
                x=now.first,y=now.second;
                //cout<<x<<' '<<y<<endl;
                if(!y)ans=mod_mul(ans,mod_power(3,x));
                else{
                    ll tt=mod_add(mod_power(2,x),mod_power(2,y));
                    ans=mod_mul(ans,tt);
                }
            }
            printf("%lld\n",ans);
        }

    }


    return 0;
}
