#include <bits/stdc++.h>
#define ll long long
#define X first
#define Y second
#define pb push_back
#define Scan(a) scanf("%I64d", &a)
#define CLR(a) memset(a,0,sizeof(a))
#define FOR(i,a,b) for(ll i=(a),_b=(b); i<=_b; i++)
#define FORE(i,a,b) for(ll i=(a),_b=(b); i>=_b; i--)

using namespace std;

typedef pair<ll, ll> II;
typedef vector<II> vi;

struct HashModule {
    ll mod;
    vector<ll> pw, h;
    void init(string s, ll base, ll p) {
        mod = p;
        pw.resize(s.length()+1);
        h.resize(s.length());
        pw[0] = 1;
        FOR(i,1,s.length()) pw[i] = (pw[i-1] * base) % mod;
        h[0] = s[0];
        FOR(i,1,s.length()-1) h[i] = (h[i-1]*base + s[i]) % mod;
    }
    ll query(ll l, ll r) {
		if (!l) return h[r];
		return (h[r] - h[l-1] * pw[r-l+1] + mod*mod) % mod;
	}
};

struct DoubleHash {
    HashModule hm1, hm2;
    void init(string s, ll base1, ll mod1, ll base2, ll mod2) {
        hm1.init(s, base1, mod1);
        hm2.init(s, base2, mod2);
    }
    II query(ll l, ll r) {
        return II(hm1.query(l,r), hm2.query(l,r));
    }
};

ll n, m, dp[10010];
string s, t[100010];
DoubleHash dhashs, dhasht[100010];
map<II, ll> ma;

ll go(ll pos)
{
    if (pos == n) return n;
    if (dp[pos] != -1) return dp[pos];
    ll res = 1000000000;
    FOR(i,pos,min(pos+999, (ll) s.length()-1)) {
        II r = dhashs.query(pos, i);
        if (ma.count(r))
            if (go(i+1) < 1000000000) return dp[pos] = ma[r];
    }
    return dp[pos] = res;
}

int main()
{
    ios::sync_with_stdio(0);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    cin >> n >> s >> m;
    dhashs.init(s, 2311LL, (ll) 1e9 + 7, 1992LL, (ll) 1e8 + 7);
    FOR(i,1,m) {
        cin >> t[i];
        string str = t[i];
        FOR(j,0,str.length()-1)
            if (str[j] >= 'A' && str[j] <= 'Z') str[j] += 32;
        reverse(str.begin(), str.end());
        dhasht[i].init(str, 2311LL, (ll) 1e9 + 7, 1992LL, (ll) 1e8 + 7);
        ma[dhasht[i].query(0, str.length()-1)] = i;
    }
    memset(dp, -1, sizeof(dp));
    go(0);
    ll now = 0;
    while (now < s.length()) {
        cout << t[dp[now]];
        now += t[dp[now]].length();
        cout << " ";
    }
    return 0;
}
