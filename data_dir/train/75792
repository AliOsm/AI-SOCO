#include<bits/stdc++.h>
using namespace std;

#define scl(x) scanf("%lld",&x)
#define sc(x)  scanf("%d",&x)
#define ll long long
#define lop(i,n) for(int i=0;i<n;++i)
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;

//ax+by=gcd(a,b)
ll eGCD(ll a, ll b, ll &x, ll &y) {
	x = 1;
	y = 0;
	ll nx = 0, ny = 1;
	ll t, r;
	while (b) {
		r = a / b;
		t = a - r * b;
		a = b;
		b = t;
		t = x - r * nx;
		x = nx;
		nx = t;
		t = y - r * ny;
		y = ny;
		ny = t;
	}
	return a;
}
//ax+by=c
bool f=1;
bool solveLDE(ll a, ll b, ll c, ll &x, ll &y, ll &g) {
	g = eGCD(a, b, x, y);
	x *= c / g;
	y *= c / g;
	return (c % g) == 0;
}

const int N=2e5+10;
vector<ll> componentNodes[N];
vector<ll> adj[N];
vector<ll> divisors;

ll m,n,arr[N];
ll x,y,g;
bool ok[N];
ll dp[N];

ll solve(ll cur){
	ll &ret=dp[cur];
	if(~ret)return ret;
	ret=0;
	if(!componentNodes[cur].size())return ret;
	lop(i,adj[cur].size())
		ret=max(ret,solve(adj[cur][i]));
	ret+=componentNodes[cur].size();
	return ret;
}
int main() {
#ifndef ONLINE_JUDGE
	freopen("i.txt", "r", stdin);
#endif
	cin>>n>>m;
	lop(i,m)ok[i]=1;
	lop(i,n)scl(arr[i]),ok[arr[i]]=0;
	for(int i=1;i<m;i++)
		if(m%i==0)
			divisors.push_back(i);

	lop(i,divisors.size())
		for(int j=i+1;j<divisors.size();j++)
			if(divisors[j]%divisors[i]==0)
				adj[divisors[i]].push_back(divisors[j]);
	for(ll i=1;i<m;i++){
		if(!ok[i])continue;
		componentNodes[__gcd(i,m)].push_back(i);
	}
	memset(dp,-1,sizeof dp);
	ll startComp=-1,out=0;
	lop(i,divisors.size()){
		solve(divisors[i]);
		if(dp[divisors[i]]>out)
			startComp=divisors[i],out=dp[divisors[i]];
	}
	// always end output with a 0, if 0 isnt in arr
	vector<ll> vec;
	ll curComp=startComp;
	ll prvComp=-1;
	ll prvVal=1;
	while(curComp!=prvComp){
		lop(i,componentNodes[curComp].size()){
			ll nxtVal=componentNodes[curComp][i];
			bool res=solveLDE(prvVal,m,nxtVal,x,y,g);
			ll v=( (x%m) +m)%m;
			vec.push_back(v);
			prvVal=nxtVal;
		}
		prvComp=curComp;
		if(adj[prvComp].size())curComp=adj[prvComp][0];
		lop(i,adj[prvComp].size()){
			if(dp[adj[prvComp][i]]>dp[curComp])
				curComp=adj[prvComp][i];
		}
	}
	if(ok[0])vec.push_back(0);
	cout<<vec.size()<<endl;
	ll cur=1;
	lop(i,vec.size()){
		printf("%lld%c",vec[i]," \n"[i+1==vec.size()]);
	}



}
