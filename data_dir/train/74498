
#include <iostream>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j1234 = n; (i) < j1234; (i) ++)
#define rep1(i, n) for (int (i) = 1, j1234 = n; (i) <= j1234; (i) ++)
#define For(i, a, b) for (int (i) = (a), ub1234=b; (i) <= ub1234; (i) ++)
#define db(x) {if(debug){cout << #x << " = " << (x) << endl;}}
#define dba(a, x, y) {if(debug){cout << #a << " :";For(i, (x), (y))cout<<" "<<(a)[(i)];cout<<endl;}}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define endl '\n'
#define ll long long
#define ld long double
#define pi 3.1415926535897932384626433832795028
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const int output_precision = 15;
const bool debug = true;
const ll MOD = 1e9+7;

int N, A, B, K, f[5003][5003];
int mod(int a)
{
  a %= MOD;
  a += MOD;
  a %= MOD;
  return a;
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(output_precision); cout << fixed;
  cout.tie(0);
  cin >> N >> A >> B >> K;
  // f[i][j]=the number of ways to make i trips from a and
  // end at j0 (j0<=j).
  for (int i = A; i <= N; i++) f[0][i]=1;

  for (int i = 0; i <= K; i++) 
  {
    rep1(j,N) if (j != B)
    {
      int dist = abs(j-B);
      int x = mod(f[i][j]-f[i][j-1]);
      f[i+1][max(1,j-dist+1)]=mod(f[i+1][max(1,j-dist+1)]+x);
      f[i+1][j]=mod(f[i+1][j]-x);
      f[i+1][j+1]=mod(f[i+1][j+1]+x);
      f[i+1][min(N+1,j+dist)]=mod(f[i+1][min(N+1,j+dist)]-x);
    }
    rep1(j,N+1) f[i+1][j]=mod(f[i+1][j]+f[i+1][j-1]);
    rep1(j,N+1) f[i+1][j]=mod(f[i+1][j]+f[i+1][j-1]);
//    rep1(j,N)
//    {
//      cout << f[i][j] << " ";
//    }
//    cout << endl;
  }
  cout << f[K][N] << endl;
}
