#include<bits/stdc++.h>
using namespace std;

#define int           long long 
#define S             second
#define F             first
#define pb            push_back
#define ppb           pop_back()
#define ppb           pop_back()
#define B(c)          (c).begin()
#define E(c)          (c).end()
#define all(c)        (c).begin(),(c).end()
#define rall(c)       (c).rbegin(),(c).rend() 
#define lb            lower_bound
#define si(c)         (int)((c).size())
#define lcm(a,b)      (a * (b / __gcd(a,b)))  
#define inf           (int)(2e18)
#define err           cerr << "move" << '\n';
#define endl          '\n'
#define pow(x, n)     (int)(pow(x, n))
#define mp            make_pair

typedef vector<int>                           vi;
typedef pair<int,int>                         pii;
typedef vector<pii>                           vpi;
typedef vector<vector<int> >                  vvi;;
typedef priority_queue<pii, vector<pii>, greater<pii> > pq;

void solve(){
    int n, ans = 0;
    cin >> n;
    string s;
    cin >> s;
    int dp[n], mask[26] = {0};
    for(int i = 0; i < n; i++){
        int x = 0;
        for(int j = 0; j < 26; j++){
            if(j+'a' > s[i] ){
                x |= mask[j];
            }
        }
        for(int j = 1; j <= 26; j++){
            if(x&(1<<j))continue;
            dp[i] = j; break;
        }
        mask[s[i]-'a'] |= (1<<dp[i]);
        ans = max(ans, dp[i]);
    }
    if(ans > 2){
        cout << "NO" << endl; return;
    }
    cout << "YES" <<endl;
    for(int i = 0; i < n; i++){
        if(dp[i] == 1)cout <<0;
        else cout << 1;
    }
}

signed main(){

    ios_base::sync_with_stdio(0); 
    cin.tie(0); cout.tie(0);   

    int t = 1;
    clock_t start, end; 
    start = clock(); 

    cout << fixed << setprecision(15);

    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
    #endif

    //cin >> t;

    while(t--){
        solve();
    }

    end = clock();
    double time_taken = double(end - start) / double(CLOCKS_PER_SEC); 
    // cerr<<time_taken;
}