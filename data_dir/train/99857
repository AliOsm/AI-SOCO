#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

//#define PB push_back
#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template < typename F, typename S >ostream& operator << ( ostream& os, const pair< F, S > & p ) {return os << "(" << p.first << ", " << p.second << ")";}
template < typename T >ostream &operator << ( ostream & os, const vector< T > &v ) {os << "{";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "}";}
template < typename T >ostream &operator << ( ostream & os, const set< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename T >ostream &operator << ( ostream & os, const multiset< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename F, typename S >ostream &operator << ( ostream & os, const map< F, S > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << it -> first << " = " << it -> second ;}return os << "]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
clock_t tStart = clock();
#define timeStamp dbg("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)
void faltu () {cerr << endl;}
template <typename T>void faltu( T a[], int n ) {for(int i = 0; i < n; ++i) cerr << a[i] << ' ';cerr << endl;}
template <typename T, typename ... hello>void faltu( T arg, const hello &... rest) {cerr << arg << ' ';faltu(rest...);}
//#else
//#define dbg(args...)

int n;
ll a[705];
bool con[705][705];
bool dp[705][705][2];
bool vis[705][705][2];

bool recur( int lpos, int rpos, bool ok )
{
	if( lpos == rpos ) return 1;
	if( vis[lpos][rpos][ok] ) return dp[lpos][rpos][ok];
	bool ret = 0;
	if(!ok) {
		for( int i = lpos+1; i <= rpos; ++i ) {
			if( con[lpos][i] ) ret |= recur( lpos+1, i, 1 ) & recur( i, rpos, 0 );
			if(ret) break;
		}
	}
	else {
		for( int i = lpos; i < rpos; ++i ) {
			if( con[rpos][i] ) ret |= recur( i, rpos-1, 0 ) & recur( lpos, i, 1 );
			if(ret) break;
		}
	}
	vis[lpos][rpos][ok] = 1;
	dp[lpos][rpos][ok] = ret;
	return ret;
}

int main()
{
	optimize();
	cin >> n;
	for( int i = 1; i <= n; ++i ) cin >> a[i];
	for( int i = 0; i <= n; ++i ) {
		for( int j = 0; j <= n; ++j ) {
			if( gcd(a[i], a[j]) > 1 ) con[i][j] = 1;
		}
	}
	if( recur(0, n, 0) ) cout << "Yes";
	else cout << "No";
}






















