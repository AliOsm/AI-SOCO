#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef unsigned long long ull;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;

const int N = 100010;
const int MX = 200001;
const int mod = (int)1e9 + 7;
const int base = 1023456789;
const ull BS1 = 10000019ULL;
const int INF = (1 << 29);

template < class T > inline void fastScan(T &x) {
    register char c = getchar();
    int neg = 0; x = 0;
    for(   ; (c < 48 || c > 57) && (c != '-'); c = getchar());
    if(c == '-') { neg = 1; c = getchar(); }
    for(   ; c > 47 && c < 58; c = getchar()){
        x = (x << 1) + (x << 3) + c - 48;
    }
    if(neg) x = -x;
}

int n;
int possible;

ll ans;
ll sum[N];
ll arr[N];

vector < int > g[N];

void dfs(int u, int par){
  if(!possible) return ;
  for(int i = 0; i < g[u].size(); i++){
    int v = g[u][i];
    if(v != par){
      if(sum[v] == -1){
        sum[v] = sum[u];
      } else {
        if(sum[v] < sum[u]){
          possible = 0;
        }
      }
      dfs(v, u);
    }
  }
}

void go(int u, int par, int dep){
  if(dep % 2 == 0){
    ll mn = 1ll * 1e18;
    for(int i = 0; i < g[u].size(); i++){
      int v = g[u][i];
      if(v != par){
        mn = min(mn, sum[v] - sum[u]);
      }
    }
    if(mn != 1ll * 1e18){
      arr[u] = mn;
      for(int i = 0; i < g[u].size(); i++){
        int v = g[u][i];
        if(v != par){
          arr[v] = sum[v] - sum[u] - arr[u];
        }
      }
    }
  }
  for(int i = 0; i < g[u].size(); i++){
    int v = g[u][i];
    if(v != par){
      go(v, u, dep + 1);
    }
  }
}

int main(){
  fastScan(n);
  for(int i = 2; i <= n; i++){
    int u, v;
    fastScan(u);
    v = i;
    g[u].pb(v);
  }
  for(int i = 1; i <= n; i++){
    fastScan(sum[i]);
  }
  possible = 1;
  dfs(1, -1);
  if(possible == 0){
    puts("-1");
    return 0;
  }
  go(1, -1, 1);
  for(int i = 1; i <= n; i++){
    ans += arr[i];
    //cout << arr[i] << " " << sum[i] << '\n';
  }
  printf("%lld\n", sum[1] + ans);
}

