#include <iostream>
#include <deque>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <algorithm>
using namespace std;
 
const int N = 2 * 1e5;
vector < vector <int> > g(N);
bool used[N];
deque <int> d;
bool ok = true;
 
void bfs(int start) {
	if(d.front() == start) {
		used[start] = true;
		d.pop_front();
		queue <int> q;
		q.push(start);
		while(!q.empty()) {
			int s = q.front();
			q.pop();
			vector <int> v, v1, v2;
			for(int i = 0; i < g[s].size(); ++i) {
				int to = g[s][i];
				if(!used[to]) {
					used[to] = true;
					v.push_back(to);
				}
			}
			for(int i = 0; i < v.size(); ++i) {
				v1.push_back(d.front());
				d.pop_front();
			}
			sort(v.begin(), v.end());
			v2 = v1;
			sort(v1.begin(), v1.end());
			for(int i = 0; i < v.size(); ++i) {
				if(v[i] != v1[i]) {
					ok = false;
					break;
				}
			}
			if(!ok) {
				break;
			} else {
				for(int i = 0; i < v2.size(); ++i) {
					q.push(v2[i]);
				}
			}
		}
	} else {
		ok = false;
		return void();
	}
}
 
int main(){
	ios_base::sync_with_stdio(false);
	int n;
	cin >> n;
	for(int i = 0; i < n - 1; ++i) {
		int a, b;
		cin >> a >> b;
		a--, b--;
		g[a].push_back(b);
		g[b].push_back(a);
	}
	for(int i = 0; i < n; ++i) {
		int a;
		cin >> a;
		d.push_back(a - 1);
	}
	bfs(0);
	cout << (ok ? "Yes" : "No") << endl;
	return  0;
}