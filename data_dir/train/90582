#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <time.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
const int INF = (int)(1e9 + 1e5);
const int64 LINF = (int64)(1e18);
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL() (*(int*)(0))++
const int MOD = 1000000007;
const int ROOT = 700;
const int PRM_ROOT = 5;

const int MAXN = 2005;

int n;
int a[MAXN];
int dp[MAXN][MAXN][2];
int cnt[MAXN][2];
int ans;

void init()
{
    scanf ("%d", &n);
    for (int i = 1; i <= n; ++i)
    {
        scanf ("%d", &a[i]);
    }
}

int get_cnt(int l, int r, int d)
{
    return cnt[r][d] - cnt[l - 1][d];
}

void solve()
{
    for (int i = 1; i <= n; ++i)
    {
        --a[i];
        cnt[i][0] = cnt[i - 1][0];
        cnt[i][1] = cnt[i - 1][1];
        ++cnt[i][a[i]];
    }
    for (int l = 1; l <= n; ++l)
    {
        for (int r = l; r <= n; ++r)
        {
            dp[l][r][1] = dp[l][r - 1][1] + (a[r] == 1);
            dp[l][r][0] = max(dp[l][r - 1][0] + (a[r] == 0), (a[r] == 0 ? dp[l][r - 1][1] + 1 : 0));
        }
    }
    for (int l = 1; l <= n; ++l)
    {
        for (int r = l; r <= n; ++r)
        {
            ans = max(ans, get_cnt(1, l - 1, 0) + dp[l][r][0] + get_cnt(r + 1, n, 1));
            ans = max(ans, get_cnt(1, l - 1, 0) + dp[l][r][1] + get_cnt(r + 1, n, 1));
        }
    }
}

void print_ans()
{
    printf("%d\n", ans);
}

void run()
{
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif // _MY_DEBUG
    int t = 1; //scanf ("%d", &t);
    for (int i = 0; i < t; ++i)
    {
        init();
        solve();
        print_ans();
    }
}

void print_test()
{

}

int main()
{
    srand(90);
    ios_base::sync_with_stdio(false); cin.tie(0);
    run();
    return 0;
}