#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define from dsjklasd

typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 200005;
const int BLOCK = 450;

int n, q;
int a[MAXN];
vector<int> in_block[(MAXN + BLOCK) / BLOCK];
ll res = 0;

ll le(int id, int x) {
	return lower_bound(in_block[id].begin(), in_block[id].end(), x) -
		in_block[id].begin();
}

ll gr(int id, int x) {
	return (int)in_block[id].size() - le(id, x);
}

void recalc(int id, int from, int to) {
	for (int i = 0; i < (int)in_block[id].size(); ++i) {
		if (in_block[id][i] == from) {
			in_block[id][i] = to;
			//sort(in_block[id].begin(), in_block[id].end());
			//return;
			while (i > 0 && in_block[id][i] < in_block[id][i - 1]) {
				swap(in_block[id][i], in_block[id][i - 1]);
				--i;
			}
			while (i < (int)in_block[id].size() - 1 && in_block[id][i] > in_block[id][i + 1]) {
				swap(in_block[id][i], in_block[id][i + 1]);
				++i;
			}
			return;
		}
	}
	assert(false);
}

ll query(int l, int r) {
	if (l == r) return res;
	int blockl = l / BLOCK;
	int blockr = r / BLOCK;
	int x = a[l];
	int y = a[r];
	if (x < y) ++res;
	else --res;
	if (blockl == blockr) {
		for (int i = l + 1; i < r; ++i) {
			res -= a[i] < x;
			res += a[i] < y;
			res += a[i] > x;
			res -= a[i] > y;
		}
		swap(a[l], a[r]);
	} else {
		for (int i = l + 1; i < blockl * BLOCK + BLOCK; ++i) {
			res -= a[i] < x;
			res += a[i] < y;
			res += a[i] > x;
			res -= a[i] > y;
		}
		for (int i = blockr * BLOCK; i < r; ++i) {
			res -= a[i] < x;
			res += a[i] < y;
			res += a[i] > x;
			res -= a[i] > y;
		}
		for (int i = blockl + 1; i < blockr; ++i) {
			res -= le(i, x);
			res += le(i, y);
			res += gr(i, x);
			res -= gr(i, y);
		}
		recalc(blockl, x, y);
		recalc(blockr, y, x);
		swap(a[l], a[r]);
	}
	return res;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> q;
	for (int i = 0; i < n; ++i) {
		a[i] = i;
		in_block[i / BLOCK].pb(a[i]);
	}
	for (int i = 0, l, r; i < q; ++i) {
		cin >> l >> r;
		if (l > r) swap(l, r);
		--l; --r;
		cout << query(l, r) << '\n';
	}
	return 0;
}
