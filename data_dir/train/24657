//ITNOG
#include <bits/stdc++.h>
 
using namespace std;

#define int long long

const int maxN = 100*1000 + 2;
const int mod = 1000*1000*1000 + 7;
int fac[maxN], fac1[maxN];
int a[maxN];

int power(int n, int k)
{
    if(!k) return 1;
    int ans = power(n, k / 2);
    ans = ans * ans % mod;
    if(k & 1) ans = ans * n % mod;
    return ans;
}

int ted(int n, int f)
{
    if(n < f) return 0;
    
    int res = fac[n - 1];
    res = res * fac1[f - 1] % mod;
    res = res * fac1[n - f] % mod;
    return res;
}

void solve()
{
    int n, f; cin >> n >> f;
    
    vector<int> p;
    int tmp = n;
    
    while(tmp > 1)
    {
	  int x = a[tmp];
	  p.push_back(x);
	  while(tmp % x == 0) tmp /= x;
    }
    
    int ans = 0;
    for(int mask = 0; mask < (1 << p.size()); mask ++)
    {
	  int d = 1;
	  for(int i = 0; i < p.size(); i ++)
		if(mask & (1 << i))
		    d *= p[i];
	  
	  int cnt = __builtin_popcount(mask);
	  if(cnt & 1) ans -= ted(n / d, f);
	  else ans += ted(n / d, f);
	  ans %= mod; ans += mod; ans %= mod;
    }
    cout << ans << endl;
}

main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    fac[0] = 1;
    for(int i = 1; i < maxN; i ++)
	  fac[i] = fac[i - 1] * i % mod;

    for(int i = 0; i < maxN; i ++)
	  fac1[i] = power(fac[i], mod - 2);
    
    a[1] = 1;
    for(int i = 2; i < maxN; i ++)
	  if(!a[i])
		for(int j = i; j < maxN; j += i)
		    a[j] = i;

    int t; cin >> t;
    
    while(t --)
	  solve();
    return 0;
}
