#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((int)(1e8))
#define pi (2*acos(0))
#define M ((ll)(1e9 + 7))
#define NN ((ll)(305))
#define N ((ll)(3e5 + 5))
#define eps 0
#define log 20


using namespace std;
using namespace __gnu_pbds;

typedef long long int ll;
typedef unsigned long long ull;

typedef tree < ll,  null_type,  less < ll >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;

///trie
int node[27][200], mark[200]; /// mark = to mark endpoint
void init(int n){ /// creating new node
    for(int i = 0; i<26; i++) node[i][n] = -1;
    mark[n] = 0;
}
int Insert(char s[], int tot, int id){  /// inserting a string
    int cur = 0;
    for(int i = 0; s[i]!='\0'; i++){
        if(node[s[i]-'a'][cur]==-1){
            init(tot);
            node[s[i]-'a'][cur] = tot++;
        }
        cur = node[s[i]-'a'][cur];
    }
    mark[cur] |= id;
    return tot;
}
void visit_trie(int n, char c){ /// utility function to check the trie
    printf("%d %c %d start\n",n,c,mark[n]);
    for(int i = 0; i<26; i++){
        if(node[i][n]!=-1) visit_trie(node[i][n],'a'+i);
    }
    printf("%d %c end\n",n,c);
}
///aho_corasick...build trie first
int sfx_link[200];
queue < int > q;
void aho_corasick(){
    int a, cur;
    sfx_link[0] = -1;
    q.push(0);
    while(!q.empty()){
        a = q.front();
        q.pop();
        for(int i = 0; i<26; i++){
            if(node[i][a]==-1) continue;
            q.push(node[i][a]);
            cur = sfx_link[a];
            while(cur!=-1 && node[i][cur]==-1) cur = sfx_link[cur];
            if(cur==-1) cur = 0;
            else cur = node[i][cur];
            sfx_link[node[i][a]] = cur;
            mark[node[i][a]] |= mark[cur];
        }
    }
}

int dp[200][1007];
bool vis[200][1007];

char c[1007], s[1007], t[1007];

int call(int tr, int i)
{
    if(c[i]=='\0'){
        if(mark[tr]&1) return 1;
        if(mark[tr]&2) return -1;
        return 0;
    }

    if(vis[tr][i]) return dp[tr][i];
    vis[tr][i] = 1;
    if(mark[tr]&1) dp[tr][i] = 1;
    else if(mark[tr]&2) dp[tr][i] = -1;
    else dp[tr][i] = 0;
    if(c[i]!='*'){
        int cur = tr;
        while(node[c[i]-'a'][cur]==-1 && cur!=-1) cur = sfx_link[cur];
        if(cur==-1) cur = 0;
        else cur = node[c[i]-'a'][cur];

        dp[tr][i] += call(cur,i+1);

    }
    else{
        int ans = -MAX;
        for(int cc = 0; cc<26; cc++){
            int cur = tr;
            while(node[cc][cur]==-1 && cur!=-1) cur = sfx_link[cur];
            if(cur==-1) cur = 0;
            else cur = node[cc][cur];

            ans = max(ans,call(cur,i+1));

        }

        dp[tr][i] += ans;
    }
    return dp[tr][i];
}

int main()
{
    scanf("%s %s %s",c,s,t);
    init(0);
    int tot = 1;
    tot = Insert(s,tot,1);
    tot = Insert(t,tot,2);
    aho_corasick();
    memset(vis,0,sizeof vis);
    printf("%d\n",call(0,0));
    return 0;
}
