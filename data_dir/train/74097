#include <string.h>
#include <unordered_map>

#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include   <stdlib.h>    
#include   <time.h> 
#include <stack>
#include <queue>
#include <set>

#include <map>
#include <vector>
#include <string>
#include <stdlib.h>

#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf

#define pf printf
#define mp make_pair

using namespace std;
const int N = 400000;
int mod = 998244353;
int INF = 1<<30;

int n;
vector<int> g[N];
int dis[N],dep[N],f[N][21];
int son[N],max_son[N];
int in[N],id;

void dfs(int t, int fa) {

	dis[t]=dis[fa]+1;
	dep[t] = dep[fa]+1;
	//st[id]=t;
	max_son[t] = 0;
	son[t] = 1;
	for(int u : g[t]) {
		if(u==fa)continue;
		dfs(u,t);
		son[t]+=son[u];
		if(son[u]>son[max_son[t]]) {
			max_son[t] = u;
		}
	}
}

int ask1(int node) {
	printf("d %d\n",node);
	fflush(stdout);
	int t;
	scanf("%d",&t);
	return t;
}

int ask2(int node) {
	printf("s %d\n",node);
	fflush(stdout);
	int t;
	scanf("%d",&t);
	return t;
}

int main() {
	sf("%d",&n);
	fr(i,0,n-1) {
		int u,v;
		sf("%d%d",&u,&v);
		g[u].pb(v);
		g[v].pb(u);
	}
	id = 0;
	int cur = 1;
	dfs(1,1);
	int A = ask1(cur);
	while(1) {
		//printf("cur = %d\n",cur);
		int d3 = dis[cur]-1;
		int d = 0;
		stack<int> st;
		while(max_son[cur]>0) {
			st.push(cur);
			cur = max_son[cur];
			d++;
		}
		//printf("dis = %d\n",d);
		int s_d = ask1(cur);
		if(s_d==0) {
			break;
		}

		int d2 = -(A-d-s_d-d3)/2;
		int d1 = s_d - d2;
		//printf("A = %d dep = %d sd = %d d3 = %d\n",A,d,s_d,d3);
		//printf("cur = %d d1 = %d d2 = %d d3 = %d\n",cur,d1,d2,d3);
		while(d2) {
			cur = st.top();
			st.pop();
			d2--;
		}

		if(d1==0) {
			break;
		}
		cur = ask2(cur);
	}

	printf("! %d\n",cur);
	fflush(stdout);
}

