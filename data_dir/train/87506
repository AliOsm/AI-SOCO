#include <iostream>
#include <queue>
#include <cstdio>
#include <vector>
using namespace std;

vector<int> E[200];
long long ways[200], ways2[200];
int dist[200], dist2[200];
vector<int> out[200];

int main()
{
    int n, m; cin >> n >> m;

    for(int i = 1; i <= n; i++) dist[i] = dist2[i] = (1 << 30);

    for(int i = 0 ; i < m; i++){
        int u, v; cin >> u >> v;
        E[u].push_back(v);
        E[v].push_back(u);
    }

    ways[1] = 1;
    dist[1] = 0;

    queue<int> Q;

    Q.push(1);

    while(!Q.empty()){

        int v = Q.front();
        Q.pop();

        for(int i = 0; i < E[v].size(); i++)
        {
            int to = E[v][i];

            if( dist[to] == (1 << 30) ){
                ways[to] = ways[v];
                dist[to] = dist[v] + 1;
                Q.push(to);
            }else{

                if(dist[to] == dist[v] + 1)
                    ways[to] += ways[v];
            }

            if(dist[to] == dist[v] + 1){
                out[v].push_back(to);
            }
        }

    }

    Q.push(n);

    ways2[n] = 1;
    dist2[n] = 0;

    while(!Q.empty()){

        int v = Q.front();
        Q.pop();

        for(int i = 0; i < E[v].size(); i++)
        {
            int to = E[v][i];

            if( dist2[to] == (1 << 30) ){
                ways2[to] = ways2[v];
                dist2[to] = dist2[v] + 1;
                Q.push(to);
            }else{

                if(dist2[to] == dist2[v] + 1)
                    ways2[to] += ways2[v];
            }


        }

    }

    double ans = 0;
    for(int i = 1; i <= n; i++){

        if(dist[i] + dist2[i] > dist[n]) continue;

        long long sum = ways[i] * ways2[i];

        if(i > 1 && i < n)
            sum <<= 1;


        //cout << i << "  " << sum << " " << ways[n] << endl;

        ans = max(ans, (double) sum / (double) ways[n]);
    }

    printf("%.12lf\n", ans);

    return 0;
}
