#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

const ll MOD = 1e9+7;

int d[55][55][2], n, k;

ll dp[55][55][2], c[55][55];

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    cin >> n >> k;
    k /= 50;
    c[0][0] = 1;
    for (int i = 1; i <= 50; i++){
        c[i][0] = 1;
        for (int j = 1; j <= i; j++){
            c[i][j] = (c[i-1][j-1] + c[i-1][j])%MOD;
        }
    }
    int kol1 = 0, kol2 = 0;
    for (int i = 1; i <= n; i++){
        int x;
        cin >> x;
        x /= 50;
        if (x == 1)
            ++kol1;
        else
            ++kol2;
    }
    for (int i = 0; i <= 50; i++){
        for (int j = 0; j <= 50; j++){
            d[i][j][0] = d[i][j][1] = 1e9;
        }
    }
    d[kol1][kol2][0] = 0;
    dp[kol1][kol2][0] = 1;
    queue <pair<pair<int, int>, int> > q;
    q.push({{kol1, kol2}, 0});
    while(!q.empty()){
        int n1 = q.front().first.first, n2 = q.front().first.second, bank = q.front().second;
        q.pop();
        if (bank == 0){
            for (int i = 0; i <= n1; i++){
                if (i > k)
                    break;
                for (int j = 0; j <= n2; j++){
                    if (i + j*2 > k)
                        break;
                    //cout << "kek " << i << ' ' << j << ' ' << d[n1-i][n2-j] << ' ' endl;
                    if (i + j >= 1 && d[n1-i][n2-j][1] > d[n1][n2][0] + 1){
                        d[n1-i][n2-j][1] = d[n1][n2][0] + 1;
                        dp[n1-i][n2-j][1] = 0;
                        q.push({{n1-i, n2-j}, 1});
                    }
                    if (i + j >= 1 && d[n1-i][n2-j][1] == d[n1][n2][0] + 1){
                        ll cur = (c[n1][i] * c[n2][j])%MOD;
                        cur = (cur * dp[n1][n2][0]) % MOD;
                        //cout << n1 << ' ' << n2 << ' ' << i << ' ' << j << ' ' << cur << endl;
                        dp[n1-i][n2-j][1] = (dp[n1-i][n2-j][1] + cur) % MOD;
                    }
                }
            }
        } else {
            for (int i = 0; i <= kol1-n1; i++){
                if (i > k)
                    break;
                for (int j = 0; j <= kol2-n2; j++){
                    if (i + j * 2 > k)
                        break;
                    if (i + j >= 1 && d[n1+i][n2+j][0] > d[n1][n2][1] + 1 ){
                        d[n1+i][n2+j][0] = d[n1][n2][1] + 1;
                        dp[n1+i][n2+j][0] = 0;
                        q.push({{n1+i, n2+j}, 0});
                    }
                    if (i + j >= 1 && d[n1+i][n2+j][0] == d[n1][n2][1] + 1){
                        ll cur = (c[kol1-n1][i]*c[kol2-n2][j])%MOD;
                        cur = (cur * dp[n1][n2][1]) % MOD;
                        dp[n1+i][n2+j][0] = (dp[n1+i][n2+j][0] + cur) % MOD;
                    }
                }
            }
        }
    }
    if (d[0][0][1] == 1e9)
        d[0][0][1] = -1;
    cout << d[0][0][1] << endl;
    cout << dp[0][0][1];

}
