//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 200000000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 200005

ll parent[maxn],strength[maxn],weight[maxn],child[maxn],dp_min[maxn],dp_max[maxn],sum[maxn];
vector<pair<ll,pair<pair<ll,ll>,ll> > >v[maxn];
vector<pair<pair<ll,ll>,ll> >edge;

void dfs1(ll cur,ll par,ll strength_of_par_edge)
{
	parent[cur]=par;
	for(ll i=0;i<v[cur].size();i++)
	{
		ll x=v[cur][i].F;
		if(x==par)
		continue;
		dfs1(x,cur,v[cur][i].S.F.S);
	}
	for(ll i=0;i<v[cur].size();i++)
	{
		ll x=v[cur][i].F;
		if(x==par)
		continue;
		ll w=v[cur][i].S.F.F;
		sum[cur]+=sum[x]+w;
	}
	for(ll i=0;i<v[cur].size();i++)
	{
		ll x=v[cur][i].F;
		ll w=v[cur][i].S.F.F;
		ll p=v[cur][i].S.F.S;
		if(x==par)
		continue;
		if(p<dp_min[x])
		{
			cout<<"-1";
			exit(0);
		}
		dp_min[cur]+=dp_min[x]+w-min(w-1,p-dp_min[x]);
	}
	for(ll i=0;i<v[cur].size();i++)
	{
		ll x=v[cur][i].F;
		ll w=v[cur][i].S.F.F;
		ll p=v[cur][i].S.F.S;
		if(x==par)
		continue;
		dp_max[cur]+=dp_max[x]+w;
	}
	dp_max[cur]=min(dp_max[cur],strength_of_par_edge);
}
void dfs2(ll cur,ll par,ll reduce)
{
	for(ll i=0;i<v[cur].size();i++)
	{
		ll x=v[cur][i].F;
		ll w=v[cur][i].S.F.F;
		ll p=v[cur][i].S.F.S;
		if(x==par)
		continue;
		child[x]=sum[x]-dp_max[x];
		reduce=reduce-(sum[x]-dp_max[x]);
	}
	if(reduce>0)
	{
		for(ll i=0;i<v[cur].size();i++)
		{
			ll x=v[cur][i].F;
			ll w=v[cur][i].S.F.F;
			ll p=v[cur][i].S.F.S;
			if(x==par)
			continue;
			ll got=min(reduce,dp_max[x]-dp_min[x]);
			reduce-=got;
			child[x]+=got;
		}
	}
	if(reduce>0)
	{
		for(ll i=0;i<v[cur].size();i++)
		{
			ll x=v[cur][i].F;
			ll w=v[cur][i].S.F.F;
			ll p=v[cur][i].S.F.S;
			if(x==par)
			continue;
			ll got=min(reduce,min(w-1,p-dp_min[x]));
			reduce-=got;
			v[cur][i].S.F.F-=got;
			v[cur][i].S.F.S-=got;
		}
	}
	assert(reduce==0);
	for(ll i=0;i<v[cur].size();i++)
	{
		ll x=v[cur][i].F;
		if(x==par)
		continue;
		dfs2(x,cur,child[x]);
	}
}
int main()
{
	boost1;boost2;
	ll i,j,n,x,y,z,w,p,id;
	cin>>n;
	for(i=1;i<=n-1;i++)
	{
		cin>>x>>y>>w>>p;
		v[x].pb({y,{{w,p},i}});
		v[y].pb({x,{{w,p},i}});
		edge.pb({{x,y},i});
	}
	dfs1(1,-1,inf);
	dfs2(1,-1,sum[1]-dp_max[1]);
	cout<<n<<endl;
	for(i=1;i<=n;i++)
	{
		for(j=0;j<v[i].size();j++)
		{
			if(v[i][j].F==parent[i])
			continue;
			id=v[i][j].S.S;
			weight[id]=v[i][j].S.F.F;
			strength[id]=v[i][j].S.F.S;
		}
	}
	for(auto it:edge)
	{
		x=it.F.F;
		y=it.F.S;
		id=it.S;
		cout<<x<<" "<<y<<" "<<weight[id]<<" "<<strength[id]<<endl;
	}
	return 0;
}
