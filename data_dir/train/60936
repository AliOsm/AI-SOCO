
// ~/BAU/ACM-ICPC/Teams/Rampage/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <functional>
#include <assert.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const int N = 2001, M = 1000005;
const ll MOD = 1e9 + 7;
const double eps = 1e-9;

int n, m, r, c, x, y, best[N][N];
char g[N][N];
int dx[4] = { -1,+1,0,0 }, dy[4] = { 0,0,+1,-1 };

inline bool check(int x, int y) {
	return x >= 0 && x < n && y >= 0 && y < m && g[x][y]!='*';
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif
	scanf("%d%d%d%d%d%d", &n, &m, &r, &c, &x, &y);
	for (int i = 0; i < n; i++)
		scanf("%s", g + i);
	r--, c--;
	deque<pair<int,int> > q;
	memset(best, 0x3f3f3f3f, sizeof best);
	best[r][c] = 0;
	q.push_back(make_pair(r, c));
	while (!q.empty()) {
		pair<int, int> u = q.front();
		q.pop_front();
		for (int i = 0; i < 4; i++) {
			int nx = u.first + dx[i], ny = u.second + dy[i];
			if (check(nx, ny) && best[u.first][u.second] + (i == 3) < best[nx][ny]) {
				best[nx][ny] = best[u.first][u.second] + (i == 3);
				if (i < 3) q.push_front(make_pair(nx, ny));
				else q.push_back(make_pair(nx, ny));
			}
		}
	}
	int ans = 0;
	for (int i = 0; i < n; i++) 
		for (int j = 0; j < m; j++) 
			if (best[i][j] <= x && best[i][j] + j - c <= y) 
				ans++;
	printf("%d\n", ans);
	return 0;
}