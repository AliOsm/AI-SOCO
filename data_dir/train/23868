#include <bits/stdc++.h>
using namespace std;
#define pii             pair<LL , LL >
#define inf             1111111111
#define in(a)           scanf("%I64d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%I64d%I64d", &a, &b)
#define in3(a, b, c)    scanf("%I64d%I64d%I64d", &a, &b, &c)
#define mp              make_pair
#define vi              vector<LL >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pn              printf("\n")
#define pr(a)           printf("%I64d\n", a)
#define prs(a)          printf("%I64d ", a)
#define pr2(a, b)       printf("%I64d %I64d\n", a, b)
#define pr3(a, b, c)    printf("%I64d %I64d %I64d\n", a, b, c)
#define pb              push_back
#define mem(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
#define x               first
#define y               second
#define lc              (2*i)
#define rc              (2*i+1)
#define sst             clock_t t = clock()
#define eed             printf ("It took me %I64d clicks.\n", (int)(clock() - t))

//#define prr(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); pn;}
//vector<string> split(const string& s, char c) {
//	vector<string> v;
//	stringstream ss(s);
//	string x;
//	while (getline(ss, x, c))
//		v.emplace_back(x);
//	return move(v);
//}
//void err(vector<string>::iterator it) {}
//template<typename T, typename... Args>
//void err(vector<string>::iterator it, T a, Args... args) {
//	cerr <<a<<" ";
//	err(++it, args...);
//}

typedef long long LL;
//LL  dx[]={1,0,-1,0};LL dy[]={0,1,0,-1}; //4 Direction
//LL  dx[]={1,1,0,-1,-1,-1,0,1,0};LL dy[]={0,1,1,1,0,-1,-1,-1,0};//8 direction
//LL  dx[]={2,1,-1,-2,-2,-1,1,2};LL dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(LL n, LL pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//LL  on(LL n, LL pos) {return n | (1<<pos);} //typecast 1 in case of int
//LL  off(LL n, LL pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

const LL M = 100010, mod = 1000000007;

vi D[M];
LL inv[M];
LL fact[M];
LL dp[M];

LL bigMod(LL x, LL n)
{
    if (n==0) return 1;
    LL temp=bigMod(x, n/2);
    return n%2==0?(temp*temp)%mod:(x*((temp*temp)%mod))%mod;
}

LL ncr(LL n, LL r)
{
    if (r < 0 || r > n) return 0;
    return ((fact[n] * inv[r]) % mod * inv[n-r])%mod;
}

LL call(LL n, LL f)
{
   // pr2(n, f);
    if (f > n) return 0;
    if (n == f) return 1;
    if (dp[n] != -1) return dp[n];

    LL ans = ncr(n-1, f-1);
    for (LL i=0; i<D[n].sz; i++)
    {
        ans -= call(D[n][i], f);
        ans = (ans + mod) % mod;
    }

    return dp[n] = ans;
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("C:\\Users\\Dell\\Desktop\\in.txt", "r", stdin);
//    freopen("C:\\Users\\Dell\\Desktop\\in.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);

    LL q, n, f, i, j, k;

    fact[0] = 1;
    for (i=1; i<M; i++) fact[i] = (i*fact[i-1])%mod;
    for (i=0; i<M; i++) inv[i] = bigMod(fact[i], mod-2);
    for (i=2; i<M; i++) for (j=2*i; j<M; j+=i) D[j].pb(i);

    in(q);
    while (q--)
    {
        in2(n, f);

        if (f == 1)
        {
            pr((LL)(n == 1));
            continue;
        }

        dp[n] = -1;
        for (i=0; i<D[n].sz; i++) dp[D[n][i]] = -1;

        pr(call(n, f));
    }


return 0;
}
