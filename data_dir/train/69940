#include <bits/stdc++.h>
using namespace std;


const int LOG = 50;
long long A[100000];

struct Trie {
  struct Node {
    void push() { for (int i : {0, 1}) if (ch[i] == nullptr) ch[i] = new Node(); }
    int cnt = 0;
    Node* ch[2] = {nullptr, nullptr};
    Node() {}
  } *root;
  long long max_with(long long a) {
    auto cur = root;
    long long ans = 0;
    for (int i = LOG - 1; i >= 0; --i) {
      assert(cur->cnt);
      int idx = (a>>i)&1ll;
      if (cur->ch[idx^1] and cur->ch[idx^1]->cnt) 
        cur = cur->ch[idx^1], ans ^= (1ll<<i);
      else cur = cur->ch[idx];
    }
    return ans;
  }
  void add(long long a) {
    auto cur = root;
    ++cur->cnt;
    for (int i = LOG - 1; i >= 0; --i) {
      cur->push();
      int idx = (a>>i)&1ll;
      cur = cur->ch[idx];
      ++cur->cnt;
    }
  }
  Trie() {
    root = new Node();
  }
};



int main() {
  ios_base::sync_with_stdio(false);
  int n; cin >> n;
  long long ALL = 0;
  for (int i = 0; i < n; ++i) cin >> A[i], ALL ^= A[i];
  Trie tree;
  long long pre = 0, ans = ALL;
  tree.add(pre);
  for (int i = 0; i < n; ++i) {
    pre ^= A[i];
    tree.add(pre);
    ans = max(ans, tree.max_with(pre ^ ALL));
  }
  cout << ans << '\n';
}
