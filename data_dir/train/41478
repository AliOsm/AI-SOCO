#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

int main() {
  int cas;
  scanf("%d", &cas);
  while (cas--) {
    int n;
    scanf("%d", &n);
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
      scanf("%d", &a[i]);
    }
    sort(a.begin(), a.end());
    a.erase(unique(a.begin(), a.end()), a.end());
    n = a.size();
    int best = 0;
    int limit = 500;
    vector<int> A;
    for (int i = 0; i < n; ++i) {
      A.clear();
      for (int j = i - 1; j >= 0 && A.size() < limit; --j) {
        if (a[i] % a[j]) A.push_back(a[j]);
      }
      if (A.empty()) {
        best = max(best, a[i]);
      } else if (A.size() == 1) {
        best = max(best, a[i] + A[0]);
      } else {
        int j;
        for (j = 1; j < A.size() && A[0] % A[j] == 0; ++j);
        if (j != A.size()) {
          best = max(best, a[i] + A[0] + A[j]);
        } else {
          best = max(best, a[i] + A[0]);
        }
      }
    }
    printf("%d\n", best);
  }
  return 0;
}
