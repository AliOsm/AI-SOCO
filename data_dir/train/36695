#include <bits/stdc++.h>
using namespace std;
typedef long long int64;
typedef complex<long double> cmplx;
const long double pi = 3.14159265358979323846;
const int inf = (int)2e+9 + 2;
const int mod = 998244353;
const long double eps = 1e-8;
const int N = 100'000;

int n, m, k;

void solve()
{
    int64 a, b;
    cin >> a >> b;
    int64 c = a + b;
    int64 l = 0;
    int64 r = 1000000;
    while (l < r) {
        int64 mid = (l + r) / 2 + 1;
        if (mid * (mid + 1) / 2 <= c)
            l = mid;
        else
            r = mid - 1;
    }
    vector<int> ans1;
    vector<int> ans2;
    for (; l > 0 && a >= l; --l) {
        ans1.push_back(static_cast<int>(l));
        a -= l;
    }
    a = min(a, l);
    if (a)
        ans1.push_back(static_cast<int>(a));
    for (; l > a; --l)
        ans2.push_back(static_cast<int>(l));
    --a;
    for (; a > 0; --a)
        ans2.push_back(static_cast<int>(a));
    cout << ans1.size() << '\n';
    for (auto val : ans1)
        cout << val << ' ';
    cout << '\n';
    cout << ans2.size() << '\n';
    for (auto val : ans2)
        cout << val << ' ';
    cout << '\n';
}

void precalc()
{
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    precalc();
    int test = 1;
    //cin >> test;
    for (; test; --test)
        solve();
    return 0;
}
