//  Copyright Â© 2018 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 200005
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

i64 N, ans, idx;
i64 val[MAX];
vector < i64 > ady[MAX];
i64 sz[MAX];
i64 id[MAX];
i64 in[MAX];
i64 out[MAX];
i64 sum[MAX];
i64 ansdn[MAX];
i64 ansup[MAX];

i64 qry( i64 x )
{
    return sum[out[x]] - sum[in[x] - 1];
}

void dfsup( i64 u , i64 p , i64 up )
{
    ansup[u] = up;
    i64 tot = 0;
    for( auto v : ady[u] )
        if( v != p )
        {
            tot += ansdn[v];
            tot += 2 * qry( v );
        }
    
    for( auto v : ady[u] )
        if( v != p )
        {
            tot -= ansdn[v];
            tot -= 2 * qry( v );
            dfsup( v , u , up + tot + val[u] + qry( 1 ) - qry( u ) );
            tot += 2 * qry( v );
            tot += ansdn[v];
        }
}

void dfsdn( i64 u , i64 p )
{
    for( auto v : ady[u] )
    {
        if( v == p )
            continue;
        dfsdn( v , u );
        ansdn[u] += ansdn[v] + qry( v );
    }
}

void dfs( i64 u , i64 p )
{
    in[u] = ++idx;
    id[idx] = u;
    sz[u] = 1;
    for( auto v : ady[u] )
    {
        if( v == p )
            continue;
        dfs( v , u );
        sz[u] += sz[v];
    }
    out[u] = idx;
}

int main()
{
    optimiza_io
    cin >> N;
    for( i64 i = 1; i <= N; i ++ )
        cin >> val[i];
    for( i64 i = 1; i < N; i ++ )
    {
        i64 u, v;
        cin >> u >> v;
        ady[u].push_back( v );
        ady[v].push_back( u );
    }
    dfs( 1 , 0 );
    for( i64 i = 1; i <= N; i ++ )
        sum[i] = sum[i - 1] + val[id[i]];
    
    dfsdn( 1 , 0 );
    dfsup( 1 , 0 , 0 );
    
    for( i64 i = 1; i <= N; i ++ )
        ans = max( ans , ansdn[i] + ansup[i] );
    
    cout << ans;
    return 0;
}

