#include <iostream>
#include <vector>
#include <chrono>
#include <random>

std::mt19937 rng((int) std::chrono::steady_clock::now().time_since_epoch().count());

std::pair<long long, int> solve(const std::vector<int> &a, int l, long long cost) {
	int n = (int) a.size();
	const long long INF = 1e18;
	std::vector<std::pair<long long, int>> dp(n+1, std::pair<long long, int>(-INF, -1));
	dp[0] = std::pair<long long, int>(0, 0);
	for(int i = 0; i < n; i++) {
		auto cur = dp[i];
		cur.first += a[i];
		dp[i+1] = std::max(dp[i+1], cur);
		cur.first -= a[i];
		int j = std::min(n, i + l);
		cur.first -= cost;
		cur.first += j - i;
		cur.second++;
		dp[j] = std::max(dp[j], cur);
		//std::cout << dp[i].first << ", " << dp[i].second << "\n";
	}
	//std::cout << dp[n].first << ", " << dp[n].second << "\n";
	return dp[n];
}

int main() {
	std::ios_base::sync_with_stdio(false); std::cin.tie(NULL);
	int n, k, len;
	std::cin >> n >> k >> len;
	std::string str;
	std::cin >> str;
	std::vector<int> a;
	for(auto c : str) {
		a.push_back('a' <= c && c <= 'z' ? 1 : 0);
	}
	int ans = n;
	for(int rep = 0; rep < 2; rep++) {
		long long l = 0, r = n + 2;
		while(l != r) {
			long long mid = (l + r + 1) / 2;
			//std::cout << "[" << l << ", " << mid << ", " << r << "]\n";
			auto p = solve(a, len, mid);
			//std::cout << "got " << p.second << '\n';
			if(p.second >= k) {
				//std::cout << "l = " << mid << "\n";
				l = mid;
			} else {
				//std::cout << "r = " << mid - 1 << "\n";
				r = mid - 1;
			}
		}
		auto p = solve(a, len, l);
		//std::cout << "object cost at " << l << ", at " << p.second << " got cost " << p.first << "\n";
		ans = std::min(ans, n - (int)(p.first + (long long) k * l));
		for(auto &v : a) v = 1-v;
	}
	std::cout << ans << '\n';
}