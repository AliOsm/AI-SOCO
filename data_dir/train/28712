// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

template <typename T>
struct dataPolyHash {
  int n, X;
  VI mod;
  vector<VI> pot;
  vector<vector<VI>> lh, rh;

  void init(int n_, VI mod_) {
    n = n_;
    mod = mod_;
    pot.resize(mod.size(), VI(n, 1));
    X = 0;
    string magic = "cabccaababcaaaabcbbbbcbaababbabbaabcacbaaabcacabbccaabaaabcababbabbbacacabbbbccbacbabaacbccabbcbcbbbbbaccbbcbaabacbcccbbcbbacbaccbaccbcccacbbcabcbbcbcacaccbbaabbbabccccababcabcacbccabaccbbccababaaccaccbcbcabaccaccbaabcbbccaacacbacbabbbbbcccccbaccaaacbccbabacabacbbbcaacacccccccaacbccacaccaaaaabcbbcabcaaacbcabacabcbaaaaababccbbbbbcbaacabbababbbaabbbcbacaaccbbbbbabbcbbbacbbbccbbabaccabcaabbbaccccbcabcccbbaaacbcbabbcbaaaccbacbcbacaacbbabcbbaaccccbaaccccaccbcbabcabaaaccbbaabaabbcbbbbbbcbabcabcccccccbcbcaaaacccbbacacbbbbaccabcabcbacaaaabaabbbccbacababccbccabaaabcaaaabcbaacaaaaabbbaacbbbcaccabaabbbaacabcaccaccccccbbbcbbcbbacbcbacbccacaacbabacbaaababbabcaacabaabbababccacbacabaabbacbbccbcababcbcbbaacacaccbbaccbacabcccbabccaabbcbbbaccacbbcbbbbbccbccbabaacbbbbaaabccbaaaacccaabacbabccbcbcbcbcbbbbbabcbccbbacabcabacbcaccbabbbcacbbbccbcbacaaaabcacaacbaabcaabaabbcabacaabacabacacbabcbabaacabcbaccccccbbcabbaccbacaabbbbcacaaabcaaaccbbabacccbbcbcacabcaccbaaaabbabbbacaacbaaaaccbabaacbcababccaaaccababbcbccabacbbccbbcbacbabbacbcacacbababcbbbbacabaaacacccacabcbbbacbaaacabccccababacccbbbbcabbcaccccbaabcaaccabccbcbcbbaaaacbacbbbbcbcbbccbcacaababbbcbbbcaababccbcabacccabcacccccabccaaccbacaabccabccacacabcaaccbbcaaaacbbcabccccbccbcccaacabbacaaaaabaaacacbabbcbbbbaabccbaccbccbababbaacaaabbcacccbcabaaccaacbcacabbbcbbcbcccbbbaabcbbcbbababbabcccacbcbacaaaacbaaaaaabbaaaaabbcbcaabcccbbcacbbcabaacbcacaaccacbaacbabbcabccaaabcacbabaacbacbcacacbabacabcccaaaabacccccccccaccbccaaaaaababcbcacbbbabccbbcaccaabcacabacbabacabbccacbaacccaccabbaccbbabcbcabcccbaacbbacaccacbbcbbccccbcaaabaaccacccccccacaabcccbcabbbbacccaababcabbcabcacabcacaacccbbcbaabbcacbabaaccaacbabbcaccaaabcababaacacccaababaacacbacccccabcaaaabacccacabbbcbbccbacbacbcaacbaacabacaabcbaaabcacbbbcccbcaccbaccaacacccbbccccbccaaaaaacaacccaabbabcabcccccccbbbccacaacbbcbbabababbacbacacbbaaccaccbbaccccbcabbaacbaacacccaccaaabaccbccabaaaccaaccabcaabcbccbaaabccaacbcacaacbabbaccbaabcaacabccbaaccbabaabaccabaaacbbabccaabacaacaacbbababbabaabbaaaccacabbabbbcccbabbcccbcbcbbbccbcccbabcbccabbaccbccbcbbbaaacbcbaabaaccccbcbbacacbababacccababaabcacbbbbacbbcabcccaaacacbabbbccabbcaccacbbcbcbbbbccbbccabacaacbbaaacaacbccacbbbcbabaaabccbccaacbccbcaacabacccabaaabbbabbbbabcaacabaacabaaaccbbcacbcbcbcaaacabcbbabaccbacacccccacbaaacaacaaabcbbcabacaacbabbacbcaccbbacbbaaacbbaaaaabbaaccbabbccbabbaaacbaababcbccbbbbbacbaaababccaabbaccabacabcabbbaaaccbbcccbccaabcaabbcaaacbbacabcabcccbccbccbaababccbaccaaabbbaaccacbcbbbbbabcbcbccacacabaccccacbbbbbaaaccbbcacbcbccbbaaaaacaabacabcaccacaacbaaabaabcbcabccbbbbbbaacaaaacacaabccbabbbbbacbcaaccbcabaacccccaaaacaacccacccbcacbabcacabccbbcccaaabacccabcbabbcbcbaabbcbbbabbbbbbbcbabccbacaccbcbcaabccabbbccaabbcabbcaaaaaaaaccacabcababaabbaacaabccbaacbaacbccbacbbbcacababccaabccaabaccbcabbcbbbaaaacbccabcbbbaccbacbababaabcbcabaabaabbcbcbcabcccbbcbcabccbbbbaaababbbacbccbbbbaaabbccacccaabbbcbbacabbbbbbaccbaccaccabbaacabbccaabccabbbcbbcbccacccabbcbbcbacabaaacaccacbbccacaacabbcbbbacbacabcbbbbabacaabcaccaabbacccabbbcbaccbaaccccacacabcabbbcbbbaacccacabbacbbbacbcbbabbcabccaaaaacbbcbcacccbbaaacccabcccabbaccbcbcbbbbccacaaccbcbaaacaacccaccccbcabbcabaabacbccaaababcbacbacbabbaccaabcaccbcaaabbbbababbcbbababaababcccaabcbcccbbababacbabcbcccaabbbbbccccacccbbbacabcbbbaaaaaacbcaabaaacaacbbaccccbabcbccbaacccbaaaaacabcccccccabaaacbacaaaacaccaaabcabcabbabaaabbbaacbbcbbccbcabccbababaabcbacabbbaacbabacbcccacbccaabbaaaaaaacabcbcbcaccbbcaccababbbcabcbcacaabcaabcbacabcbaccccacacaacbaaaaccbcacbcabccbbbbaaabcbbacbbaccbbccbacacabccababcbbbbbacacbbccabccccccccabcbaacacccbbcbbcabbabccbbcbbbacbabbbbcaabcbcbbbccacbaacacabcbaacccabcbcabcaaacaaacbaaaaaccababaaabbcaabbcccabcbbacaababaabbccccbabbbcaaaaabbaabacbbbcacacbaabcbbbababcbccabcacaabccbabccacacccaaabbcaabbbcabacbbbbacbacccabccccccccaaabbbaaccbbbbcaccccacaaacbcbaccaabccbcbababcaccccbaccbcccabaabbaaaabcbcbcbbcbbabbabacbaccaccbacbbaabacacbcccacbcaabbccabcbabcacbccccccbcbbbaabacbbaabbcbaccaaabcabbbcbaaccbbacabbbbacacaacbccababbcaccccbbacbaaacababababccacbbbaaccacacbabaccabcbbcaccbcccbbcbcabcbacabacbcbcbccbbcabbbbaacabbbcbacaacbabbbbabbbcacbbbccccaabbacbabcaacccbbaaccaaccbbcaabbaacbabcbbaaaacababbcbccbaabcbcaaabbbcbabcaccaacbbbbabbbccabbaabbccaccbbbcbbbcbcbacbcaabcbbacccbbccabbcabbccacacccbccabcbcbbcaaacccbacccaacbccbccabcacccaaacbbbbbaaacbacccbbaaaabcabcabaacabbbaabcbbbbbabcccbcaccbbcbcaccbbbccbbcccbbabaaacbaababacccabcbabbaacabcbcaaacabbbbacbbbabaacbbaacbaacbbaccacabbbacabaccbcaaccbacabcaabaaabcacacaaccaaaaabacbaabacbbcccabbabbbbccbcaccaaccabcbcabababacaccbbbabbaaccbacacbbbaabbcacbbbbbbacababcbbbccccbbaabcccbcbccbbacbacabcacbcaaccaabbbaabcbacabaabcbbbcabcabcbaabbbccbbbaccacaaabacbbbcabcbbbcbcbaabbcccbccbaaccabacaaacababbccacacbccbbcaaabacccbccccbcbacbabbabbbbabaabaababbccaccabbcbaacccabbccaacaaacbaaaaabccbbbbacaacabbcbaccbccbcbaabaacbabccbacbcbbacacbaccbcbacbbaccbbaaaabbacbcccaaccbccccaababcacbbcccababccbbccbbbacaabcbacaacccacccaaabcabacaaccbbacacbbcbbbbbcaacbbaaaaccbaabababbbccabbcbabbbcbabccaabcccaacbbcacbaaababcbbbbcbabaabccbbaccbccccaaaacaacbbbcbcacbabbaaaabccabcccacbacbabaccbbcbcba";
    int md = (int)1e9+7;
    for (int i = 0; i < (int)magic.size(); ++i)
      X = (X+347LL*(magic[i]-'a'))%md;
    X += 28;
    for (int i = 1; i < n; ++i)
      for (int j = 0; j < (int)mod.size(); ++j)
        pot[j][i] = (1LL)*pot[j][i-1]*X%mod[j];
  }

  void add(T s) {
    vector<VI> wyn(mod.size(), VI((int)s.size()));
    lh.PB(wyn);
    for (int j = 0; j < (int)s.size(); ++j)
      for (int i = 0; i < (int)mod.size(); ++i) {
        int val = 0;
        if (j > 0)
          val = lh.back()[i][j-1];
        if (val < 0) {
          val %= mod[i];
          if (val < 0)
            val += mod[i];
        }
        val = (1LL*X*val+s[j])%mod[i];
        lh[(int)lh.size()-1][i][j] = val;
      }
    wyn.clear();
    wyn.resize(mod.size(), VI((int)s.size()));
    rh.PB(wyn);
    for (int j = (int)s.size()-1; j >= 0; --j)
      for (int i = 0; i < (int)mod.size(); ++i) {
        int val = 0;
        if (j+1 < (int)s.size())
          val = rh.back()[i][j+1];
        if (val < 0) {
          val %= mod[i];
          if (val < 0)
            val += mod[i];
        }
        val = ((1LL)*X*val+s[j])%mod[i];
        rh[(int)rh.size()-1][i][j] = val;
      }
    return;
  }

  int leftHash(int id, int l, int r, int modid) {
    int wyn = lh[id][modid][r];
    if (l) {
      wyn = (wyn-(1LL)*lh[id][modid][l-1]*pot[modid][r-l+1])%mod[modid];
      if (wyn < 0)
        wyn += mod[modid];
    }
    return wyn;
  }

  int rightHash(int id, int l, int r, int modid) {
    int wyn = rh[id][modid][l];
    if (r+1 < (int)rh[id][modid].size()) {
      wyn = (wyn-(1LL)*rh[id][modid][r+1]*pot[modid][r+1-l])%mod[modid];
      if (wyn < 0)
        wyn += mod[modid];
    }
    return wyn;
  }

  VI leftHash(int id, int l, int r) {
    VI res;
    for (int i = 0; i < (int)mod.size(); ++i)
      res.PB(leftHash(id, l, r, i));
    return res;
  }

  VI rightHash(int id, int l, int r) {
    VI res;
    for (int i = 0; i < (int)mod.size(); ++i)
      res.PB(rightHash(id, l, r, i));
    return res;
  }

  bool isPalindrom(int id, int l, int r) {
    for (int i = 0; i < (int)mod.size(); ++i)
      if (leftHash(id, l, r, i) != rightHash(id, l, r, i))
        return false;
    return true;
  }

  bool isEqual(int id1, int l1, int r1, int id2, int l2, int r2) {
    if (r1-l1 != r2-l2)
      return false;
    for (int i = 0; i < (int)mod.size(); ++i)
      if (leftHash(id1, l1, r1, i) != leftHash(id2, l2, r2, i))
        return false;
    return true;
  }
};

const int N = (int)2e5 + 3;

int n, m, res, x[N], y[N];
VI a, b;

int main() {
  init_ios();
  cin >> n >> m;
  for (int i = 0; i < n; ++i) {
    cin >> x[i];
    if (i)
      a.PB(x[i]-x[i-1]);
  }
  for (int i = 0; i < m; ++i) {
    cin >> y[i];
    if (i)
      b.PB(y[i]-y[i-1]);
  }
  if (m == 1) {
    cout<<n<<"\n";
    return 0;
  }
  if (m > n) {
    cout<<"0\n";
    return 0;
  }
  dataPolyHash<VI> dh;
  dh.init(N, {(int)1e9+7, (int)1e9+9});
  dh.add(b);
  dh.add(a);
  for (int i = 0; i+m-2 < (int)a.size(); ++i)
    if (dh.isEqual(0, 0, m-2, 1, i, i+m-2))
      ++res;
  cout<<res<<"\n";
}