// start of CP 3.0
#include <bits/stdc++.h>

//____By:sirjan13____

#define int long long
#define ld long double
#define mod 1000000007
#define mod1 mod
#define mod2 100000009
#define show(a) for(int i=0;i<a.size();i++) cout<<a[i]<<" ";
#define fi first
#define se second
#define vi vector<int>
#define vs vector<string>
#define vll vector<ll>
#define pb push_back
#define pi pair<int,int>
#define si set<int>
#define sll set<ll>
#define pll pair<ll, ll>
#define sci(x) scanf("%d",&x)
#define scs(x)  scanf("%s", x)
#define scll(x) scanf("%I64d",&x)
#define all(v) v.begin(),v.end()
#define sot(v) sort(v.begin(), v.end())
#define maxheap priority_queue<int>
#define minheap priority_queue<int,vector<int>,greater<int>>
#define mp make_pair
#define fast_io() cin.sync_with_stdio(false);cout.sync_with_stdio(false);
#define PI 3.1415926535
#define long_zero 0ll
#define long_one 1ll
#define ONLINE_JUDGEd 0

inline int sbt(int x){return __builtin_popcountll(x);}

using namespace std;

#define TRACE
#ifdef TRACE
#define deb(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << std::endl;
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define deb(...)
#endif
#define N 200013

// dsu template 

#define MAXN N

struct dsu {
    int tukde;
    int par[MAXN];
    int sub[MAXN];

    dsu() {
        memset(par, 0, sizeof par);
        memset(sub, 0, sizeof sub);
        tukde = 0;
    }

    dsu(int n) {
        tukde = n;
        for(int i = 1; i <= n; i++) {
            par[i] = i;
            sub[i] = 1;
        }
    }

    int find(int x) {
        while(1) {
            if(par[x] == x) return x;
            par[x] = par[par[x]];
            x = par[x];
        }
        return x;
    }

    void merge(int u, int v) {
        int root_a = find(u);
        int root_b = find(v);
        if(root_a == root_b) return;
        if(sub[root_a] > sub[root_b]) {
            swap(root_a, root_b);
        }
        par[root_a] = par[root_b];
        sub[root_b] += sub[root_a];
        sub[root_a] = 0;
    }

    int comp_size(int k) {
        int root = find(k);
        return sub[root];
    }
};

int par[N], sub[N];

void dsu(int n) {
        int tukde = n;
        for(int i = 1; i <= n; i++) {
            par[i] = i;
            sub[i] = 1;
        }
    }
int find(int x) {
        while(1) {
            if(par[x] == x) return x;
            par[x] = par[par[x]];
            x = par[x];
        }
        return x;
    }

    void merge(int u, int v) {
        int root_a = find(u);
        int root_b = find(v);
        if(root_a == root_b) return;
        if(sub[root_a] > sub[root_b]) {
            swap(root_a, root_b);
        }
        par[root_a] = par[root_b];
        sub[root_b] += sub[root_a];
        sub[root_a] = 0;
    }

    int comp_size(int k) {
        int root = find(k);
        return sub[root];
    }

multiset<pi> seg;
std::vector<pi> adj[N];
int pre[N], l[N], r[N];
int n, m;
si res;

int32_t main() {
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    fast_io()
    int t;
    cin >> n >> m;
    for(int i = 1; i <= n; i++) {
        cin >> l[i] >> r[i];
        pre[l[i]]++;
        pre[r[i] + 1]--;
        r[i]++;
    }
    for(int i = 1; i <= n; i++) {
        adj[l[i]].pb(mp(r[i], i));
    }
    int curr = 0;
    for(int i = 0; i < N; i++) {
        // deb(curr, pre[i]);
        curr += pre[i];
        for(auto nei: adj[i]) {
            seg.insert(nei);
        }
        while(1) {
            if(curr <= m) break;
            curr--;
            pi lastpt = (*(seg.rbegin()));
            seg.erase(seg.find(lastpt));
            pre[lastpt.fi]++;
            res.insert(lastpt.se);
        }
    }
    cout << res.size() << endl;
    for(auto ele: res) cout << ele << ' ';
    return 0;
}