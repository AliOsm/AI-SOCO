#include <bits/stdc++.h>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
typedef pair<char, int> pci;
typedef pair<int, char> pic;
const int MOD = 998244353;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int>> pq;
vector<int> v;

char t[1000001];
char s[2000005];
int a[2000005];

int main() {
    int tc;
    scanf("%d", &tc);

    while (tc--) {
        scanf("%s", t);
        int n = strlen(t), mav = 0;

        for (int i = 0; i < n * 2 + 1; i++) a[i] = s[i] = 0;
        for (int i = 0; i < n; i++) s[2 * i + 1] = t[i];
        int nn = n * 2 + 1;

        // 2가 나오고.
        // 2가 나온다?
        // 0 위치면 그냥 그 길이 그대로 쓰고
        // 그게 아니면 그것도 그대로 쓴다?

        for (int i = 0; i < n; i++) {
            if (s[i] == s[nn - i - 1]) mav = i + 1;
            else break;
        }

        int r = 0, p = 0;
        for (int i = 0; i < nn; i++) {
            if (i <= r) a[i] = min(a[2 * p - i], r - i);
            while (i + a[i] + 1 < nn && i - a[i] - 1 >= 0 && s[i + a[i] + 1] == s[i - a[i] - 1]) a[i]++;
            if (r < i + a[i]) { r = i + a[i]; p = i; }
        }

        // 0 1 2 3 4 5 6
        int ans = 0, mavi = -1;
        for (int i = 0; i < nn; i++) {
            if (a[i]) {
                // i를 중심으로 양쪽 날개가 있음.

                int le = i - a[i];
                int ri = i + a[i];
                int aa = min(le, nn - 1 - ri);
                if (mav >= aa && ans < a[i] + aa) {
                    ans = a[i] + aa;
                    mavi = i;
                }
            }
        }

        int le = mavi - a[mavi];
        int ri = mavi + a[mavi];
        int aa = min(le, nn - 1 - ri);

        for (int i = 0; i < aa; i++)
            if (s[i]) printf("%c", s[i]);
        for (int i = le; i <= ri; i++)
            if (s[i]) printf("%c", s[i]);
        for (int i = nn - aa - 1; i < nn; i++)
            if (s[i]) printf("%c", s[i]);
        printf("\n");
    }
}