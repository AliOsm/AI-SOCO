
#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
//using NAMspace __gnu_pbds;
//typedef tree<LL, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
#define ll                  long long
#define ull                 unsigned long long
#define scl(n)              scanf("%lld", &n)
#define scll(n,m)           scanf("%lld %lld",&n,&m)
#define sclll(n,m,p)        scanf("%lld %lld %lld",&n,&m,&p)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%lld\n",n)
#define pfs(s)              printf("%s\n",s)
#define dist2D(x1,y1,x2,y2)         ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))
#define dist3D(x1,y1,z1,x2,y2,z2)   ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2))
#define bug1(x)                cerr<<#x<<": "<<x<<endl
#define bug2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define bug3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define bug4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define bug5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define bug6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl

#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 998244353
#define MODP                99999999999973LL
#define pb                  push_back
#define pi                  pair<ll,ll>
#define pii                 pair<pi,ll>
#define mp                  make_pair
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9
#define EPS                 1e-13
#define Pi                  acos(-1)
//ll Set(ll mask,ll pos){return mask=mask | (1LL<<pos);}
//ll reset(ll mask,ll pos){return mask= mask & ~(1LL<<pos);}
//bool check(ll mask,ll pos){return (bool)(mask & (1LL<<pos));}
//ll bigmod(ll b, ll p, ll md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {ll y=bigmod(b,p/2,md);return (y*y)%md;}}
#define N 100002

vector<char>v[N];
int main(){

   ll t;
   cin>>t;
   while(t--){

      ll n,k;
      cin>>n>>k;

      string str;
      cin>>str;
      sort(str.begin(),str.end());

      for(ll i=0;i<k;i++)
         v[i].clear();

      if(k==1){
            cout<<str<<endl;
            continue;
      }
      ll cnt[26]={0};
      for(ll i=0;i<n;i++){
            cnt[str[i]-'a']++;
      }

      char res=str[0];
      bool flag=false;
      v[0].pb(str[0]);
      cnt[str[0]-'a']--;
      for(ll i=1;i<k;i++){
            if(str[i]!=str[i-1]){
               res=str[i];
               flag=true;
            }
            v[i].pb(str[i]);
            cnt[str[i]-'a']--;
      }
      if(flag || k==n){
            cout<<res<<endl;
            continue;
      }
      ll sum=k;

      for(ll i=0;i<26;i++){
         if(cnt[i]==0) continue;
         ll tem=cnt[i];
         //cout<<i<<" "<<sum<<" "<<tem<<endl;
         if(sum+cnt[i]==n){
               //cout<<"dfj"<<endl;
               char ch='a'+i;
               ll id=0;
               while(tem){
                     v[id].pb(ch);
                     tem--;
                     id++;
                     id=id%k;
               }

               for(char now:v[0])
                  cout<<now;
               cout<<endl;
               break;
         }
         else{
             for(ll j=k;j<n;j++)
                  v[0].pb(str[j]);
             for(char now:v[0])
                  cout<<now;
               cout<<endl;
               break;

         }
      }


   }



  return 0;
}

 //ll dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1};  // 4 Direction
 //ll dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; // 8 Direction
 //ll dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; // Knight Direction
 //ll dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; // Hexagonal Direction
