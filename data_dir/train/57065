#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 998244353;

vector<int> a[11];
int64 p10[100];

void add(int& x, int y) {
  x += y;
  if (x >= MOD) x -= MOD;
}

int solve(int u, int v) {
  if (a[u].empty() || a[v].empty()) return 0;
  int flag = 0;
  if (u < v) {
    swap(u, v);
    flag = 1;
  }
  vector<int> A(u), B(v);
  for (auto x : a[u]) {
    for (int k = 0; k < u; ++k) {
      A[k] += x % 10;
      x /= 10;
    }
  }
  for (auto x : a[v]) {
    for (int k = 0; k < v; ++k) {
      B[k] += x % 10;
      x /= 10;
    }
  }
  int64 sum = 0;
  for (int i = u - 1; i >= v; --i) sum = sum * 10 + A[i];
  int ret = sum * p10[v * 2] % MOD * a[v].size() % MOD;
  for (int i = v - 1; i >= 0; --i) {
    add(ret, A[i] * p10[i * 2 + 1 - flag] % MOD * a[v].size() % MOD);
    add(ret, B[i] * p10[i * 2 + flag] % MOD * a[u].size() % MOD);
  }
  return ret;
}

int main() {
  p10[0] = 1;
  for (int i = 1; i < 100; ++i) p10[i] = p10[i - 1] * 10 % MOD;
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    int x;
    scanf("%d", &x);
    int len = 0;
    for (int y = x; y; y /= 10) ++len;
    a[len].push_back(x);
  }
  int ret = 0;
  for (int u = 1; u <= 10; ++u) {
    for (int v = 1; v <= 10; ++v) {
      add(ret, solve(u, v));
    }
  }
  printf("%d\n", ret);
  return 0;
}
