#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
#define ii pair<int,int>
#define ll long long
#define pll pair<ll,ll>
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
#define iiordered_set tree<pll, null_type,less<pll>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
#define MOD 1000000007
ll power(ll a,ll b, ll m=MOD)
{
    ll res=1;
    while(b>0)
    {
        if(b&1)
            res=(res*a)%m;
        a=(a*a)%m;
        b>>=1;
    }
    return res%m;
}
ll inverse(ll a,ll m=MOD)
{
    return power(a,m-2,m);
}
#define INFl 1e18
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<long long>
#define vvl vector<vl>
#define vii vector<ii>
#define vvii vector<vii>
#define F first
#define S second
#define forl(i,n) for(int i=0;i<n;i++)
#define fore(i,n) for(int i=1;i<=n;i++)
#define rforl(i,n)  for(int i=n-1;i>=0;i--)
#define rfore(i,n)  for(int i=n;i>=1;i--)
#define CASE(t) cout<<"Case #"<<(t)<<": ";
#define INF 1100000009
#define gcd(a,b) __gcd(a,b)
#define all(x)  x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define print(x)    for(auto it=x.begin();it!=x.end();it++) cout<<*it<<' '; cout<<endl;
#define printii(x)  for(auto it=x.begin();it!=x.end();it++) cout<<it->F<<' '<<it->S<<endl;  
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL) 
int main()
{
	int n,k;
	cin>>n>>k;
	string s;
	cin>>s;
	bool f=true;
	forl(i,n-1)
	{
		if(s[i]==s[i+1])
			f=false;
	}
	if(n%2)	f=false;
	if(f)
	{
		forl(i,n)
		{
			if(k%2)
			{
				if(s[i]=='B')
					cout<<'W';
				else
					cout<<'B';
			}
			else
			{
				cout<<s[i];
			}
		}
		cout<<endl;	
		return 0;
	}
	vi dist(n,INF),val(n,0);
	int fst=INF,lst=0;
	forl(i,n)
	{
		int prv=(n+i-1)%n;
		int nxt=(i+1)%n;
		if(s[i]==s[prv] || s[i]==s[nxt])	dist[i]=0;
		if(dist[i]==0)	fst=min(fst,i),lst=max(lst,i);
	}
	int prv=lst-n;
	forl(i,n)
	{
		if(dist[i]==0)
		{
			prv=i;
		}
		else
		{
			dist[i]=i-prv;
			val[i]=s[(prv+n)%n];
		}
	}
	int nxt=n+fst;
	for(int i=n-1;i>=0;i--)
	{
		if(dist[i]==0)
			nxt=i;
		else if(dist[i]>nxt-i)
		{
			dist[i]=nxt-i;
			val[i]=s[nxt%n];
		}
	}
	// print(dist);
	// print(val);
	for(int i=0;i<n;i++)
	{
		if(dist[i]==0)
			cout<<s[i];
		else if(dist[i]>k)
		{
			if(k%2)
			{
				if(s[i]=='B')
					cout<<'W';
				else
					cout<<'B';
			}
			else
				cout<<s[i];
		}
		else
			cout<<(char)val[i];

	}
	cout<<endl;
}