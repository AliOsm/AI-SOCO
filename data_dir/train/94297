#include <bits/stdc++.h>
using namespace std;
#define finish(x) return cout << x << endl, 0;
#define ll long long

struct fenwick{
    int sz, fen[100002];
    void resize(int n){
        sz = n + 1;
        memset(fen, 0, sizeof(fen));
    }
    int query(int ind){
        int ans = 0;
        while(ind >= 1){
            ans += fen[ind];
            ind -= ind & -ind;
        }
        return ans;
    }
    void upd(int ind, int val){
        while(ind <= sz){
            fen[ind] += val;
            ind += (ind & -ind);
        }
    }
    int query(int l, int r){
        return query(r) - query(l-1);
    }
};

fenwick tree;
fenwick tree2;
int n, x, ans, cur = -10000000, cnt[100001], curans;
bool valid[100001];
vector <int> a;

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> n;
    tree.resize(n+1);
    tree2.resize(n+1);
    for(int i = 0 ; i < n && cin >> x ; i++){
        int c = tree.query(x, n);
        if(c == 0) valid[x] = 1, curans++;
        if(c != 1){
            tree2.upd(x, x);
            tree.upd(x, 1);
            a.push_back(x);
            continue;
        }
        c = tree2.query(x, n);
        cnt[c]++;
        tree2.upd(x, x);
        tree.upd(x, 1);
        a.push_back(x);
    }
    for(int i = 1 ; i <= n ; i++)
        if((cnt[i]-valid[i] > cur) || (cnt[i]-valid[i] == cur && i < ans)){
            ans = i;
            cur = cnt[i]-valid[i];
        }
    cout << (ans == 0 || (cnt[ans] == 1 && a[0] == ans) ? 1 : ans) << endl;
    return 0;
}
