#include <bits/stdc++.h>
typedef long long LL;

const int INF = 0x3f3f3f3f;
const int N = 100000 + 5;
int n,A[N];
int count[N];

bool check(int l,int r) {
    memset(count,0,sizeof(count));
    for (int i = l; i <= r; ++ i) {
        count[A[i]] ++;
    }
    for (int i = 0; i < n-1-i; ++ i) {
        bool inL = (l<=i && i<=r);
        bool inR = (l<=n-1-i && n-1-i<=r);
        if (inL && inR) continue;
        if (inL) {
            if (--count[A[n-1-i]] < 0) return false;
        } else if (inR) {
            if (--count[A[i]] < 0) return false;
        } else if (A[i] != A[n-1-i]) {
            return false;
        }
    }
    return true;
}

LL solve(int ll) {
    int l = ll+1,r = n-1;
    while (l <= r) {
        int mid = l+r>>1;
        if (check(ll,mid)) {
            r = mid-1;
        } else {
            l = mid+1;
        }
    }
    return (LL) (ll+1) * (n-r-1);
}

LL work() {
    int l = -1,r = -1;
    for (int i = 0; i < n-1-i; ++ i) {
        if (A[i] != A[n-i-1]) {
            l = i;
            r = n-1-i;
            break;
        }
    }
    if (l == -1) return (LL) n * (n-1) / 2 + n;
    {
        memset(count,0,sizeof(count));
        for (int i = 0; i < n; ++ i) {
            count[A[i]] ++;
        }
        int odd = 0;
        for (int i = 0; i < n; ++ i) {
            if (count[i]&1) odd ++;
        }
        if (odd > 1) return 0;
    }
    LL ret = (LL) -(l+1) * (n-r);
    ret += solve(l);
    std::reverse(A,A+n);
    ret += solve(l);
    return ret;
}

int main() {
    scanf("%d",&n);
    for (int i = 0; i < n; ++ i) {
        scanf("%d",A+i); A[i] --;
    }
    printf("%I64d\n",work());
    return 0;
}