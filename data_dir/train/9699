#include <iostream>
#include <queue>
#include <vector>
#include <map>
#include <stack>
#include <deque>
using namespace std;
deque<int>v[10000];
stack<int>cur;
vector<int>fin;
string rec[10000];
int in_degree[10000],out_degree[10000];
int edge_count[10000];
int counter=0;

void dfs(int node){
  cur.push(node);
  int curr_v = node;
  while (!cur.empty()){
    if (out_degree[curr_v]>0){
      counter++;
      cur.push(curr_v);
      int next_v = v[curr_v][0];
      out_degree[curr_v]--;
      v[curr_v].pop_front();
      curr_v = next_v;
    }
    else{
      fin.push_back(curr_v);
      curr_v = cur.top();
      cur.pop();
    }
  }
}

/*
  void dfs(int node){
  cur.push(node);
  for (int i=0;i<v[node].size();i++){
  if (visited[v[node][i].second]==false){
  visited[v[node][i].second]=true;
  degree[node]--;
  dfs(v[node][i].first);
  }
  }
  if (cur.size()==0)
  return;
  int temp=cur.top();
  cur.pop();
  fin.push_back(temp);
  if (degree[temp]!=0)
  dfs(temp);
  }
*/

int main()
{
  ios_base::sync_with_stdio(0);cin.tie(0);
  int N;
  string s[200001];
  map<string,int>id;
  int c=1;
  cin>>N;
  for (int i=0;i<N;i++)
    cin>>s[i];
  for (int i=0;i<N;i++){
    string t1="";
    t1+=s[i][0];
    t1+=s[i][1];
    if (id[t1]==0){
      rec[c]=t1;
      id[t1]=c;
      c++;
    }
    string t2="";
    t2+=s[i][1];
    t2+=s[i][2];
    if (id[t2]==0){
      rec[c]=t2;
      id[t2]=c;
      c++;
    }
    v[id[t1]].push_back(id[t2]);
    in_degree[id[t2]]++;
    out_degree[id[t1]]++;
  }
  int start=1;
  int a=0,b=0;
  for (int i=1;i<c;i++){
    if (in_degree[i]+1==out_degree[i])
      a++;
    if (out_degree[i]+1==in_degree[i])
      b++;
    if (in_degree[i]!=out_degree[i] && in_degree[i]+1!=out_degree[i] && in_degree[i]-1!=out_degree[i]){
      cout<<"NO"<<endl;
      return 0;
    }
    if (in_degree[i]<out_degree[i])
      start=i;
  }
  if (a>1 || b>1){
    cout<<"NO"<<endl;
    return 0;
  }
  dfs(start);
  /*
  for (int i=0;i<pathcnt;i++){
    if (visited[i]==false){
      cout<<"NO"<<endl;
      return 0;
    }
  }
  */
  
  if (counter!=N){
    cout<<"NO"<<endl;
    return 0;
  }
  
  cout<<"YES"<<endl;
  for (int i=fin.size()-1;i>=0;i--){
    cout<<rec[fin[i]][0];
    if (i==0)
      cout<<rec[fin[i]][1];
  }
  cout<<endl;
  return 0;
}
