//  Copyright Â© 2019 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 200005
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

i64 N, K;
i64 a[MAX], sum[MAX];

bool canBig( i64 x ) {
    i64 l = 1;
    for( i64 i = 1; i <= N; i ++ ) {
        while( a[l] < a[i] - x )
            l++;
        i64 ans = 0;
        i64 bt = a[i] - x;
        ans += ( sum[N] - sum[i] ) - ( ( N - i ) * a[i] );
        ans += ( bt * ( l - 1 ) ) - sum[l - 1];
        if( ans <= K )
            return true;
    }
    return false;
}

bool canSmall( i64 x ) {
    i64 r = N;
    for( i64 i = N; i >= 1; i -- ) {
        while( a[r] > x + a[i] )
            r--;
        i64 ans = 0;
        i64 tp = a[i] + x;
        ans += ( sum[N] - sum[r] ) - ( tp * ( N - r ) );
        ans += ( a[i] * ( i - 1 ) ) - sum[i - 1];
        if( ans <= K )
            return true;
    }
    return false;
}

int main()
{
    optimiza_io
    cin >> N >> K;
    for( i64 i = 1; i <= N; i ++ )
        cin >> a[i];
    
    sort( a + 1 , a + N + 1 );
    
    for( i64 i = 1; i <= N; i ++ )
        sum[i] = sum[i - 1] + a[i];
        
    i64 l = 0, r = a[N] - a[1];
    while( l < r ) {
        i64 mid = ( l + r ) / 2;
        if( canSmall( mid ) or canBig( mid ) )
            r = mid;
        else
            l = mid + 1;
    }
    
    cout << l << "\n";
    return 0;
}

/*

7 424
186 210 290 390 425 425 429

*/