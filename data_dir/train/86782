#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <climits>
#include <cctype>
#include <cmath>
#include <sstream>
#include <cstdlib>
#include <climits>
#include <ctime>
#include <set>
#include <map>
#include <numeric>
#include <utility>
#include <deque>
#include <queue>
#include <stack>
#include <iomanip>
#include <complex>
#include <list>
#include <bitset>
#include <fstream>
#include <limits>
#include <memory.h>
#include <tgmath.h>
#include <complex>
#include <assert.h>
using namespace std;

typedef complex<int> point;
#define dp(a, b) ((conj(a) * b).real())
#define cp(a, b) ((conj(a) * b).imag())
#define angle(a) (atan2(a.imag(), a.real()))
#define rotate0(a, angle) (a * exp(point(0, angle)))
#define length(a) (hypot(a.imag(), a.real()))
#define rotateAr(a, angle, around) (rotate0(((a) - (around)),(angle)) + around)
#define reflect(a, m) (conj((a)/(m)) * (m))
#define normalize(a) ((a) / length(a));
typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define per(i, start, end) for(int i = (int)start-1; i >= end; --i)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const long double PI = 3.14159265358979323846;
const long double eps = (1e-7);
int dcmp(long double x, long double y)
{
	// -1 means left is bigger
	return fabs(x - y) <= eps ? 0 : x > y ? -1 : 1;
}
int n;
vector<long long> cost;
vector<string> s;
bool can[100005][2][2];
void canReverse(int a)
{
	string s1 = s[a], s2 = s[a + 1];

	if (strcmp(s1.c_str(), s2.c_str()) <= 0)
		can[a][0][0] = 1;

	reverse(all(s2));
	if (strcmp(s1.c_str(), s2.c_str()) <= 0)
		can[a][0][1] = 1;

	reverse(all(s1));
	if (strcmp(s1.c_str(), s2.c_str()) <= 0)
		can[a][1][1] = 1;

	reverse(all(s2));
	if (strcmp(s1.c_str(), s2.c_str()) <= 0)
		can[a][1][0] = 1;
}

long long mem[100005][2];
long long solve(int i, bool reverse)
{
	if (i == n-1)
		return 0;
	long long &ret = mem[i][reverse];
	if (~ret)
		return ret;
	ret = (1LL<<59);
	if (can[i][reverse][0])
		ret = min(ret, solve(i+1, 0));
	if (can[i][reverse][1])
		ret = min(ret, solve(i+1, 1) + cost[i+1]);

	return ret;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
#ifndef ONLINE_JUDGE
	freopen("inputA.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
	clr(mem, -1);
	cin >> n;
	s.resize(n);
	cost.resize(n);
	for (int i = 0; i < n; ++i)
		cin >> cost[i];
	for (int i = 0; i < n; ++i)
		cin >> s[i];
	for (int i = 0; i < n - 1; ++i)
	{
		canReverse(i);
	}
	long long ans = min(solve(0, 0), solve(0, 1) + cost[0]);
	if (ans == (1LL<<59))
		cout << -1 << '\n';
	else
		cout << ans << '\n';
	return 0;
}