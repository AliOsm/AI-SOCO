#include<bits/stdc++.h>
using namespace std;
#define int long long int
#define double long double
#define pb push_back
#define endl '\n'
#define all(x) (x).begin(),(x).end()
#define F first
#define S second
#define sz(a) (int)((a).size())
#define fuck() cout<<"--------"<<endl
#define see(x) cout<<#x<<" = "<<x<<endl
#define see2(x,y) cout<<#x<<" = "<<x<<"::"<<#y<<" = "<<y<<endl
const int mod=1000000007;
typedef pair<int,int> pii;
const int maxn=2e5+5;
vector<int>g[maxn];
set<int>g0;
int par[maxn];
int n;
int depth[maxn];
pair<int,int>find_dia(int root){
	vector<int>dist(n+1,0),vis(n+1,0);
	queue<int>Q;
	Q.push(root);
	vis[root]=1;
	while(!Q.empty()){
		int u=Q.front();
		Q.pop();
		for(auto it:g[u]){
			if(vis[it])continue;
			vis[it]=1;
			dist[it]=dist[u]+1;
			Q.push(it);
		}
	}
	int mx=-1,tv=-1;
	for(int i=1;i<=n;i++){
		if(mx<dist[i]){
			mx=dist[i];
			tv=i;
		}
	}
	return {mx,tv};
}
void dfs(int v,int p){
	for(auto to:g[v]){
		if(to==p)continue;
		par[to]=v;
		dfs(to,v);
	}
}
void dfs1(int v,int p){
	for(auto to:g[v]){
		if(to==p)continue;
		if(g0.find(to)==g0.end()){
			depth[to]=depth[v]+1;
		}
		dfs1(to,v);
	}
}
int32_t main()
{
	ios_base::sync_with_stdio(0); cin.tie(0);cout.tie(0);
	cin>>n;
	for(int i=0;i<n-1;i++){
		int u,v;
		cin>>u>>v;
		g[u].pb(v);
		g[v].pb(u);
	}
	pair<int,int>p1=find_dia(1),p2;
	p2=find_dia(p1.S);
	int a=p1.S;
	int b=p2.S;
	int c=-1;
	dfs(a,a);
	int dia=p2.F;
	int v1=a,v2=b;
	while(v2!=v1){
		if(v2!=b)c=v2;
		g0.insert(v2);
		v2=par[v2];
	}
	g0.insert(v1);
	dfs1(a,a);
	int best=0;
	for(int i=1;i<=n;i++){
		if(depth[i]>best){
			best=depth[i];
			c=i;
		}
	}
	cout<<dia+best<<endl;
	cout<<a<<' '<<b<<' '<<c;
}