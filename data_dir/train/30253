#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;

void precalc() {
}

const int maxn = (int) 2e5 + 10;
int a[maxn];
int queries[maxn][3];

int n, m;

bool read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d", &a[i]);
  }
  scanf("%d", &m);
  for (int i = 0; i < m; ++i) {
    int type;
    scanf("%d", &type);
    for (int j = 0; j < 3 - type; ++j) {
      scanf("%d", &queries[i][j + 1]);
      if (!j) {
        --queries[i][j + 1];
      }
    }
    queries[i][0] = type;
  }
  return 1;
}

int go[maxn], inside[maxn];

int getGo(int v) {
  if (v == n) {
    return v;
  }
  if (go[v] == v) {
    if (inside[v] != a[v]) {
      return v;
    }
    ++go[v];
  }
  return go[v] = getGo(go[v]);
}

void solve() {
  for (int i = 0; i < n; ++i) {
    go[i] = i, inside[i] = 0;
  }
  for (int iter = 0; iter < m; ++iter) {
    int type = queries[iter][0];
    if (type == 1) {
      int v = queries[iter][1], left = queries[iter][2];
      while (left > 0) {
        int u = getGo(v);
        if (u == n) {
          break;
        }
        int tmp = min(left, a[u] - inside[u]);
        left -= tmp;
        inside[u] += tmp;
      }
      continue;
    }
    assert(type == 2);
    int v = queries[iter][1];
    printf("%d\n", inside[v]);
  }
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
