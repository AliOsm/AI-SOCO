/*
H idea exei ws eksis:
An h prwth le3i einai mikroteri apo thn deuteri,tote den ginetai.
Alliws elexoume an uparxei h deuteri sthn prwth.Ta grammata den xreiazetai na einai sunexomena.Px an h prwth le3i einai "abc" kai h deuteri "ac",tote uparxei h deuteri stin prwti.(auto einai to "automaton").
Alliws kanoume sort(),epeidi me to sort() kai anakatemena na einai ta grammata,8a ta3inomi8oun kai etsi bazoume sto paixidi to "array",poy mporei na kanei antallagi grammatwn.
An einai ta3inomimena kai isxuei to "automaton",tote ousiastika exoume "both".
*/

#include<cstdio>
#include<algorithm>
#include<string.h>



char S_word[100],T_word[100];


bool check_for_automaton()
{
    int pos_t=0;
    bool found=false;

    for(int i=0; i<strlen(S_word); ++i)
    {
        if(T_word[pos_t]==S_word[i])
            ++pos_t;

        if(pos_t==strlen(T_word))
        {
            found=true;
            break;
        }
    }

    return found;
}


int check_for_array_or_both_or_nothing()
{
    bool check_array=true;


    std::sort(S_word , S_word+strlen(S_word));
    std::sort(T_word , T_word+strlen(T_word));

    if(strlen(S_word)==strlen(T_word))
    {
        for(int i=0; i<strlen(S_word); ++i)
        {
            if(S_word[i]!=T_word[i])
            {
                check_array=false;
                break;
            }
        }

        if(check_array)
            return 1;
    }

    else
    {
        if(check_for_automaton())
            return 2;
    }

    return 0;

}



int main()
{

    scanf("%s%s",S_word,T_word);



    if(strlen(S_word)<strlen(T_word))
    {
        printf("need tree");
        return 0;
    }

    if(check_for_automaton())
    {
        printf("automaton");
        return 0;
    }

    int ret=check_for_array_or_both_or_nothing();

    if(ret==1)
        printf("array");

    else if(ret==2)
        printf("both");

    else if(ret==0)
        printf("need tree");



    return 0;
}
