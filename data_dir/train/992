#include <bits/stdc++.h>

using namespace std;

int n, m, k, v[50][50], xs, xi, ys, yi, z = 0;
vector <pair <int, vector <pair <int, int> > > > a;
vector <pair <int, int> > q;
char c[50][50];

void DFS(int x, int y)
{
	v[x][y] = 1;
	xs = max(xs, x);
	xi = min(xi, x);
	ys = max(ys, y);
	yi = min(yi, y);
	q.push_back(make_pair(x, y));
	
	if (x > 0 && !v[x-1][y] && c[x-1][y] == '.')
		DFS(x-1, y);
		
	if (x < n-1 && !v[x+1][y] && c[x+1][y] == '.')
		DFS(x+1, y);
		
	if (y > 0 && !v[x][y-1] && c[x][y-1] == '.')
		DFS(x, y-1);
		
	if (y < m-1 && !v[x][y+1] && c[x][y+1] == '.')
		DFS(x, y+1);
}

int main()
{
	cin >> n >> m >> k;
	
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> c[i][j];
			
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
		{
			if (c[i][j] == '*' || v[i][j])
				continue;
			
			q.clear();
			xs = 0;
			xi = n-1;
			ys = 0;
			yi = m-1;
			
			DFS(i, j);
			
			if (xs < n-1 && xi > 0 && ys < m-1 && yi > 0)
				a.push_back(make_pair(q.size(), q));
		}
		
	sort(a.begin(), a.end());
		
	for (int i = 0; i < a.size()-k; i++)
	{
		z += a[i].second.size();
		
		for (int j = 0; j < a[i].second.size(); j++)
			c[a[i].second[j].first][a[i].second[j].second] = '*';
	}
	
	cout << z << endl;
			
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
			cout << c[i][j];
			
		cout << endl;
	}
}