#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<ll> vll;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vector<int> > vvi;
typedef vector<pii> vii;
typedef vector<vector<pii> > vvii;
typedef long double ld;
typedef map<int, int> mapii;
typedef map<string, int> mapsi;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pi  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-8)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) { x, {y, z } }

char arr[401][401];

int rght[401][401], down[401][401], rd[401][401], ru[401][401];
int n, m;
int dx1[] =
{ 0, -1, -1, -1, 0, 1, 0, -1 };
int dy1[] =
{ 1, 1, 0, -1, -1, -1, 1, 1 };
int dx2[] =
{ -1, -1, 0, 1, 1, 1, 1, 1 };
int dy2[] =
{ 0, -1, -1, -1, 0, 1, 0, 1 };

bool valid(int i, int j)
{
	return (i >= 1 && j >= 1 && i <= n && j <= m);
}

void accum()
{
	erep(i, 1, n)
		erep(j, 1, m)
			rght[i][j] += rght[i][j - 1];

	erep(j, 1, m)
		erep(i, 1, n)
			down[i][j] += down[i - 1][j];

	erep(i, 1, n)
	{
		erep(j, 1, m)
		{
			if (i > 1 && j > 1)
				break;
			int x = i + 1, y = j + 1, px = i, py = j;
			while (valid(x, y))
			{
				rd[x][y] += rd[px][py];
				px = x, py = y;
				x++, y++;
			}

			x = n - i, y = j + 1, px = x + 1, py = j;

			while (valid(x, y))
			{
				ru[x][y] += ru[px][py];
				px = x, py = y;
				x--, y++;
			}
		}
	}
}

int curri, currj;

inline int check(int x1, int y1, int x2, int y2)
{
	if (x1 == x2)
	{
		if (y1 > y2)
			swap(y1, y2);
		int val = rght[x1][y2] - rght[x1][y1 - 1];
		return !val;
	}

	if (y1 == y2)
	{
		if (x1 > x2)
			swap(x1, x2);

		int val = down[x2][y1] - down[x1 - 1][y1];

		return !val;
	}

	string x = "";
	if (x1 == curri && y1 > currj)
		x += "R";
	if (x1 == curri && y1 < currj)
		x += "L";
	if (y1 == currj && x1 < curri)
		x += "U";
	if (y1 == currj && x1 > curri)
		x += "D";

	if (x2 == curri && y2 > currj)
		x += "R";
	if (x2 == curri && y2 < currj)
		x += "L";
	if (y2 == currj && x2 < curri)
		x += "U";
	if (y2 == currj && x2 > curri)
		x += "D";

	if (x[0] > x[1])
		swap(x[0], x[1]);

//	cout << curri << " " << currj << " " << x << endl;
	if (x == "RU" || x == "DL")
	{
		if (x2 < x1)
			swap(x1, x2), swap(y1, y2);
		int val = rd[x2][y2] - rd[x1 - 1][y1 - 1];

		return !val;
	}
	else
	{
		if (x2 > x1)
			swap(x1, x2), swap(y1, y2);

		int val = ru[x2][y2] - ru[x1 + 1][y1 - 1];
		return !val;
	}
	return 0;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m;

	erep(i, 1, n)
	{
		erep(j, 1, m)
		{
			cin >> arr[i][j];
			rght[i][j] = down[i][j] = rd[i][j] = ru[i][j] = (arr[i][j] - '0');
		}
	}

	accum();

	ll sum = 0;

	erep(i, 1, n)
	{
		erep(j, 1, m)
		{
			if (arr[i][j] == '1')
				continue;
			curri = i, currj = j;
			rep(k, 0, 8)
			{
				int x1 = i + dx1[k], y1 = j + dy1[k];
				int x2 = i + dx2[k], y2 = j + dy2[k];

				while (valid(x1, y1) && valid(x2, y2) && arr[x1][y1] == '0'
						&& arr[x2][y2] == '0')
				{
					sum += check(x1, y1, x2, y2);
					x1 += dx1[k], y1 += dy1[k];
					x2 += dx2[k], y2 += dy2[k];
				}
			}
		}
	}
	cout << sum << endl;

	return 0;
}