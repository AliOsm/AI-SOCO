/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author marX
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

using namespace std;

class BNewYearAndAscentSequence {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;

        vector<pair<int, int>> cand;

        long long answer = 0;
        long long flag = 0;

        for (int i = 0; i < n; ++i) {
            int t;
            in >> t;

            int mn = 1000001, mx = -1;

            bool asc = false;

            for (int j = 0; j < t; ++j) {
                int u;
                in >> u;

                if (u > mn) {
                    asc = true;
                }

                mn = min(mn, u);
                mx = max(mx, u);
            }

            if (asc) {
                answer += n;
                flag++;
            } else {
                cand.push_back({mn, mx});
            }
        }

        sort(cand.begin(), cand.end());

        for (auto c : cand) {
            answer += flag;

            answer += lower_bound(cand.begin(), cand.end(), make_pair(c.second, -1)) - cand.begin();
        }

        out << answer << endl;
    }
};


int main() {
    BNewYearAndAscentSequence solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
