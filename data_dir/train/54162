#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> l4;
typedef pair<double, double> dd;
#define mp make_pair
#define pb push_back
#define debug(x) cerr << #x << " = " << x << " "

ll gcd(ll x, ll y)
{
  return y?gcd(y, x%y):x;
}
ll a, m;
vector<ll> get_prime_factors(ll m)
{
  vector<ll> ret;
  for (ll i = 2; i * i <= m; ++i)
    if (m % i == 0)
      {
	ret.pb(i);
	while (m % i == 0) m /= i;
      }
  if (m != 1) ret.pb(m);
  return ret;
}
const int N = 10;
const int B = 1<<N;
int bitcnt[B];
ll product[B];
int rev_lb[B];
ll cnt(ll tot, ll d)
{
  return tot/d + 1;
}
ll cnt(ll d)
{
  return cnt(a+m-1, d) - cnt(a, d);
}
ll solve()
{
  auto p = get_prime_factors(m);
  /* 
     cerr << "primes are : ";
     for (auto e : p)
     cerr << e << " ";
  cerr << endl;
  */
  int sz = p.size();
  assert(sz <= N);
  int masksz = 1<<sz;
  bitcnt[0] = 0;
  product[0] = 1;
  for (int i = 0; i < sz; ++i) rev_lb[1<<i] = i;
  ll ret = 0;
  for (int mask = 1; mask < masksz; ++mask)
    {
      bitcnt[mask] = bitcnt[mask>>1] + (mask&1);
      int lb = mask & -mask;
      product[mask] = product[mask ^ lb] * p[rev_lb[lb]];
      //      cerr << mask << " mask size = " << bitcnt[mask] << " product = " << product[mask] << endl;
      ll delta = cnt(product[mask]);
      if (bitcnt[mask]&1) ret += delta;
      else ret -= delta;
    }
  return ret;
}
int main()
{
  int T; scanf("%d", &T);
  for (int kase = 1; kase <= T; ++kase)
    {
      scanf("%lld %lld", &a, &m);
      ll g = gcd(a, m);
      a /= g;
      m /= g;
      printf("%lld\n", m-solve());
    }
}
