#include<bits/stdc++.h>
#define pb push_back
#define all(v) (v).begin() , (v).end()
#define popcnt(x) __builtin_popcount(x)
#define inf 0x3f3f3f3f
#define watch(x) cout << (#x) << " is " << (x) << endl
#define rand() (rand() << 15 | rand())
using namespace std;
typedef long long  ll;
#define EPS 1e-9
#define PI acos(-1.0)
int dx[] = {0 , 0 , 1 , -1 , 1 , 1 , -1 , -1};
int dy[] = {1 ,-1 , 0 , 0 , -1 , 1 ,  1 , -1};
const int N = 2e5 + 4 , LG = log2(N) + 4;

vector<int> adj[N];
int st[N] , en[N] , H[N] , timer = 0 , jump , n; // n
int dp[N][LG];

void dfs(int node , int par , int d){
   st[node] = timer++;
   dp[node][0] = par;
   for(int i = 1 ; i <= jump ; ++i){
      dp[node][i] = dp[dp[node][i - 1]][i - 1];
   }
   H[node] = d;
   for(int child : adj[node]){
      if(child != par){
         dfs(child , node , d + 1); // if weighted d + cost(node , child)
      }
   }
   en[node] = timer++;
}

bool is_ancestor(int u , int v){
   return st[u] <= st[v] && en[u] >= st[v];    // in case of u == v
}

int LCA(int u , int v){        // get LCA between two nodes in tree in O(log2(n))
   if(is_ancestor(u , v))return u;
   if(is_ancestor(v , u))return v;

   int up = jump;
   while(up >= 0){
      if(!is_ancestor(dp[u][up] , v))
         u = dp[u][up];
      --up;
   }

   return dp[u][0];
}

int dist(int u , int v){        // get distance between two nodes in tree in O(log2(n))
   int ancestor = LCA(u , v);
   // if weighted H[node] should store total cost from root to node
   return (H[u] - H[ancestor]) + (H[v] - H[ancestor]);
}

void pre(){
   jump = ceil(log2(n));
   int root = 1;
   dfs(root , root , 0);
}


int main() {
#ifndef ONLINE_JUDGE
   freopen("input.txt", "r", stdin);
#endif
   ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
   int q;
   cin >> n >> q;
   for(int i = 1 ; i < n ; ++i){
      int u , v;
      cin >> u >> v;
      adj[u].pb(v);
      adj[v].pb(u);
   }
   pre();
   vector<int> a;
   while(q--){
      int k;
      cin >> k;
      a.clear();
      a.resize(k);
      for(int &x : a)
         cin >> x;
      sort(all(a) , [&](int x , int y){
         return H[x] > H[y];
      });
      bool good = true;
      for(int i = 1 ; i < k ; ++i){
         int lca = LCA(a[0] , a[i]);
         if(dist(lca , a[i]) > 1)
            good = false;
      }
      cout << (good ? "YES" : "NO") << "\n";
   }
}