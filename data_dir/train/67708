//be naame khodaa

#include <bits/stdc++.h>

typedef long long ll;

const int maxn = 100005;

using namespace std;

int a[maxn];
int n, m;

struct Segment
{
	ll sum[4*maxn];
	int Max[4*maxn], iMax[4*maxn];

	void update(int x)
	{
		sum[x] = sum[2*x] + sum[2*x+1];
		Max[x] = max(Max[2*x], Max[2*x+1]);
		if (Max[x] == Max[2*x])
			iMax[x] = iMax[2*x];
		else
			iMax[x] = iMax[2*x+1];
	}

	void make(int s=0, int e=n, int x=1)
	{
		if (e-s == 1)
		{
			sum[x] = Max[x] = a[s];
			iMax[x] = s;
			return;
		}
		int mid = (s + e)/2;
		make(s, mid, 2*x);
		make(mid, e, 2*x+1);
		update(x);
	}

	ll getSum(int l, int r, int s=0, int e=n, int x=1)
	{
		if (l <= s && e <= r)
			return sum[x];
		int mid = (s + e)/2;
		ll ans = 0;
		if (l < mid)
			ans += getSum(l, r, s, mid, 2*x);
		if (r > mid)
			ans += getSum(l, r, mid, e, 2*x+1);
		return ans;
	}

	void modify(int p, int val, int s=0, int e=n, int x=1)
	{
		if (e-s == 1)
		{
			sum[x] = Max[x] = val;
			return;
		}
		int mid = (s + e)/2;
		if (p < mid)
			modify(p, val, s, mid, 2*x);
		else
			modify(p, val, mid, e, 2*x+1);
		update(x);
	}

	pair <int, int> getMax(int l, int r, int s=0, int e=n, int x=1)
	{
		if (l <= s && e <= r)
			return {iMax[x], Max[x]};
		int mid = (s + e)/2;
		pair <int, int> ansL(0, 0), ansR(0, 0);
		if (l < mid)
			ansL = getMax(l, r, s, mid, 2*x);
		if (r > mid)
			ansR = getMax(l, r, mid, e, 2*x+1);
		if (ansL.second >= ansR.second)
			return ansL;
		else
			return ansR;
	}

} seg;

int main()
{
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	seg.make();
	while (m--)
	{
		int t, l, r, x;
		cin >> t;
		if (t == 1)
		{
			cin >> l >> r;
			l--;
			cout << seg.getSum(l, r) << endl;
		}
		if (t == 2)
		{
			cin >> l >> r >> x;
			l--;
			pair <int, int> MAX = seg.getMax(l, r);
			while (MAX.second >= x)
			{
				seg.modify(MAX.first, MAX.second%x);
				MAX = seg.getMax(l, r);
			}
		}
		if (t == 3)
		{
			cin >> l >> x;
			l--;
			seg.modify(l, x);
		}
	}
    return 0;
}
