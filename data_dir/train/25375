#include <bits/stdc++.h>
#define int long long
using namespace std;

const int N = 300003;

map <int, int> mp;

int arr[N], id, t[N << 2], dp[N], prv[N];

int combine(int idx, int idy) {
        return dp[idx] > dp[idy] ? idx : idy;
}

int update(int n, int l, int r, int p, int idx) {
        if(l == r) {
                t[n] = combine(t[n], idx);
                return 0;
        }
        int m = (l + r) >> 1;
        if(p <= m) update(n << 1 | 0, l + 0, m, p, idx);
        else       update(n << 1 | 1, m + 1, r, p, idx);
        t[n] = combine(t[n << 1 | 0], t[n << 1 | 1]);
}


int query(int n, int l, int r, int b, int e) {
        if(l >= b && r <= e)
                return t[n];
        int m = (l + r) >> 1;
        if(e <= m)     return query(n << 1 | 0, l, m, b, e);
        else if(b > m) return query(n << 1 | 1, m + 1, r, b, e);
        else           return combine(query(n << 1 | 0, l, m, b, m), query(n << 1 | 1, m + 1, r, m + 1, e));
}

int32_t main() {
    ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0);
        int n, d; cin >> n >> d;
        vector <int> tmp;
        for(int i = 1; i <= n; i++) {
                cin >> arr[i];
                tmp.push_back(arr[i]);
                tmp.push_back(arr[i] + d);
                tmp.push_back(arr[i] - d);
        }
        sort(tmp.begin(), tmp.end());
        for(int x: tmp)
                if(!mp[x])
                        mp[x] = ++id;
        int ans = 0;
        for(int i = 1; i <= n; i++) {
                prv[i] = combine(query(1, 1, id, 1, mp[arr[i] - d]), query(1, 1, id, mp[arr[i] + d], id));
                dp[i] = 1 + dp[prv[i]];
                if(dp[i] > dp[ans]) ans = i;
                update(1, 1, id, mp[arr[i]], i);
        }
        cout << dp[ans] << endl;
        stack <int> stk;
        while(ans) {
                stk.push(ans);
                ans = prv[ans];
        }
        while(!stk.empty()) {
                cout << stk.top() << " ";
                stk.pop();
        }
}
