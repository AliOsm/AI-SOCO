/*---> 13 November 2019 <--- > 02:26:03 <---*/
// #pragma GCC optimize("Ofast")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
// #pragma GCC optimize("unroll-loops")
// #pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("O3")
//#pragma GCC target ("sse4")
#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
using namespace std;
//template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
#define int long long
#define F first
#define S second
#define mod 1000000007
#define inf (int)1e18+5
#define sz(x) (int)x.size()
#define PI 3.141592653589793238510
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define __ ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define vi vector<int>
#define vpii vector<pair<int,int> > 
#define vvi vector<vector<int> >
#define PRINT_TIME cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s." <<endl;
#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename   enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "
typedef long double ld;
typedef pair<int,int> pii;
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
const int N=55;
char gg[N][N];
// int cnt[2555];
int di[]={1,-1,0,0};
int dj[]={0,0,1,-1};
bool vis[N][N];
int n,m;
bool valid(int i,int j){
	return (i>=0 && j>=0 && i<n && j<m && !vis[i][j] && gg[i][j]=='#');
}
int cnt;
void dfs(int i,int j){
	if(vis[i][j])
		return;
	cnt++;
	vis[i][j]=true;
	for(int k=0;k<4;k++){
		int ni=i+di[k],nj=j+dj[k];
		if(valid(ni,nj))
			dfs(ni,nj);
	}
	// vis[i][j]=false;
}
int32_t main(){__
	// int n,m;
	cin>>n>>m;
	int nodes=0;
	vpii nn;
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++)
		{
			cin>>gg[i][j];
			if(gg[i][j]=='#'){
				nodes++;
				nn.push_back({i,j});
			}
		}
	}
	// debug()<< imie(nodes) imie(st) imie(en);
	if(nodes<=2)
		return cout<<-1<<"\n",0;
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(gg[i][j]=='#')
			{	
				cnt=0;
				memset(vis,false,sizeof vis);
				vis[i][j]=true;
				if(i==nn.back().F && j==nn.back().S)
				dfs(nn[0].F,nn[0].S);
				else
				dfs(nn.back().F,nn.back().S);
				if(cnt<nodes-1){
					return cout<<1<<"\n",0;
				}
			}
		}
	}
	cout<<2<<"\n";
return 0;
}