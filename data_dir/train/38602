//besmellah
#include <bits/stdc++.h>
using namespace std;

const int maxn = 1e5 + 1, maxk = 2e6 + 1;
const int SQ = sqrt(maxn) + 1;
pair <int, int> LR[maxn];
int S[maxk];
int dp[maxn];
long long anq[maxn];
vector <int> vec;

bool cmp(int id1, int id2){
	if (LR[id1].first / SQ != LR[id2].first / SQ)
		return LR[id1].first < LR[id2].first;
	if ((LR[id1].first / SQ) % 2 == 0){
		return LR[id1].second < LR[id2].second;
	}
	return LR[id2].second < LR[id1].second;
}

int main(){
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n, m, k;
	cin >> n >> m >> k;
	for (int i = 0; i < n; i++){
		int a;
		cin >> a;
		dp[i + 1] = a ^ dp[i];
	}
	for (int i =  0; i < m; i++){
		int l, r;
		cin >> l >> r;
		l --;
		LR[i] = {l, r};
		vec.push_back(i);
	}
	sort(vec.begin(), vec.end(), cmp);
	int MO_left = 0, MO_right = 0;
	long long ans = 0;
	S[0] ++;
	for (auto idx: vec){
		pair <int, int> P = LR[idx];
		int l = P.first, r = P.second;
		while (MO_right < r){
			MO_right ++;
			ans += S[k ^ dp[MO_right]];
			S[dp[MO_right]] ++;
		}
		while (MO_left > l){
			MO_left --;
			ans += S[k ^ dp[MO_left]];
			S[dp[MO_left]] ++;
		}
		while (MO_right > r){
			S[dp[MO_right]] --;
			ans -= S[k ^ dp[MO_right]];
			MO_right --;
		}
		while (MO_left < l){
			S[dp[MO_left]] --;
			ans -= S[k ^ dp[MO_left]];
			MO_left ++;
		}
		anq[idx] = ans;
	}
	for (int i = 0; i < m; i++){
		cout << anq[i] << '\n';
	}
}
