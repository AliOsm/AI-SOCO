/**************************************************************
    Problem: ????
    User: Big_Red_Dates
    Language: GNU_C++11
    Result: Accepted
    Time:0 ms
    Memory:0 kb
    length:0 kb
    score: inf
****************************************************************/
//CLOCKS_PER_SEC
using namespace std;
#include<bitset>
#include<deque>
#include<stdint.h>
#include<set>
#include<stack>
#include<cmath>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<iomanip>
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<queue>
#include<cstring>
#include<ctime>
#include<map>
#define sqr(x) (x)*(x)
#define sort stable_sort
#define ll long long
#define mk make_pair
#define pb push_back
#define in insert
#define mtr(x,y,z) mk(mk(x,y),z)
#define fi first
#define se second
#define lch(x) ((x)<<1)
#define rch(x) (((x)<<1)|1)
#define all(x) (x).begin(),(x).end()
#define titose CLOCKS_PER_SEC
#define fpi(x) freopen(x,"r",stdin);
#define fpo(x) freopen(x,"w",stdout);
#define fprio fpi("in.txt");fpo("out.txt");
#define fast ios_base::sync_with_stdio(false);
inline void read(int &x){int v=0,f=1;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=v*10+c-'0';while (isdigit(c=getchar())) v=v*10+c-'0';x=v*f;}
inline void read(ll &x){ll v=0ll,f=1ll;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=v*10+c-'0';while (isdigit(c=getchar())) v=v*10+c-'0';x=v*f;}
inline void readc(char &x){char c;while ((c=getchar())==' ');x=c;}
inline void writes(string s){puts(s.c_str());}
inline void writeln(){writes("");}
inline void writei(int x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
inline void writell(ll x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
/*
#pragma GCC optimize("-funsafe-loop-optimizations")
#pragma GCC optimize("-funroll-loops")
#pragma GCC optimize("-fwhole-program")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("-fthread-jumps")
#pragma GCC optimize("-falign-functions")
#pragma GCC optimize("-falign-jumps")
#pragma GCC optimize("-falign-loops")
#pragma GCC optimize("-falign-labels")
#pragma GCC optimize("-fcaller-saves")
#pragma GCC optimize("-fcrossjumping")
#pragma GCC optimize("-fcse-follow-jumps")
#pragma GCC optimize("-fcse-skip-blocks")
#pragma GCC optimize("-fdelete-null-pointer-checks")
#pragma GCC optimize("-fdevirtualize")
#pragma GCC optimize("-fexpensive-optimizations")
#pragma GCC optimize("-fgcse")
#pragma GCC optimize("-fgcse-lm")
#pragma GCC optimize("-fhoist-adjacent-loads")
#pragma GCC optimize("-finline-small-functions")
#pragma GCC optimize("-findirect-inlining")
#pragma GCC optimize("-fipa-sra")
#pragma GCC optimize("-foptimize-sibling-calls")
#pragma GCC optimize("-fpartial-inlining")
#pragma GCC optimize("-fpeephole2")
#pragma GCC optimize("-freorder-blocks")
#pragma GCC optimize("-freorder-functions")
#pragma GCC optimize("-frerun-cse-after-loop")
#pragma GCC optimize("-fsched-interblock")
#pragma GCC optimize("-fsched-spec")
#pragma GCC optimize("-fschedule-insns")
#pragma GCC optimize("-fschedule-insns2")
#pragma GCC optimize("-fstrict-aliasing")
#pragma GCC optimize("-fstrict-overflow")
#pragma GCC optimize("-ftree-switch-conversion")
#pragma GCC optimize("-ftree-tail-merge")
#pragma GCC optimize("-ftree-pre")
#pragma GCC optimize("-ftree-vrp")
#pragma GCC optimize(2)
#pragma GCC optimize(3)
#pragma GCC optimize(4)
#pragma GCC optimize(5)
#pragma GCC optimize(6)
#pragma GCC optimize(7)
#pragma GCC optimize(8)
#pragma GCC optimize(9)
*/
#define pii pair<int,int>
#define pll pair<ll,ll>
#define vi vector<int>
#define vl vector<ll>
#define si set<int>
#define sl set<ll>
#define mii map<int,int>
#define mll map<ll,ll>
#define msi map<string,int>
#define msl map<string,ll>
#define piii pair<int,pii >
#define piipi pair<pii,int>
#define plll pair<ll,pll >
#define pllpl pair<pll,ll>
#define pqi priority_queue<int>
#define pql priority_queue<ll>
#define npqi priority_queue<int,vector<int>,greater<int> >
#define npql priority_queue<ll,vector<ll>,greater<ll> >
#define forup(i,csc,lys) for ((i)=(csc);(i)<=(lys);(i)++)
#define fordo(i,csc,lys) for ((i)=(csc);(i)>=(lys);(i)--)
#define rep(i,x) forup ((i),1,(x))
#define repd(i,x) fordo ((i),(x),1)
#define itr iterator
#define lyscsc(itcalc,c) for(__typeof((c).begin()) itcalc=(c).begin();itcalc!=(c).end();itcalc++)
#define NO {cout<<"NO";return 0;}
#define YES {cout<<"YES";return 0;}
#define y0 y000000000000000000000000000
#define y1 y111111111111111111111111111
#define j0 j000000000000000000000000000
#define j1 j111111111111111111111111111
#define cl0(a) memset((a),(0),(sizeof((a))))
#define clz(a) memset((a),(0x16),(sizeof((a))))
#define clf(a) memset((a),(-(0x16)),(sizeof((a))))
#define inf 0x3bbbbbbb
#define lnf 0x1bbbbbbbbbbbbbbbll
#define sqrt divi
#define p2(i) (1ll<<(i))
#define readi read
#define readll read
/*************************************************/
ll n,m,i,j,fa[600005],sz1[600005],sz2[600005],x,y,ans;
stack<ll> stk1,stk2;
map<pair<ll,ll>,ll> lst;
vector<pair<ll,ll> > lys[2400005];
int fnd(int x)
{
	if (fa[x]==x)
	{
		return x;
	}
	return fnd(fa[fa[fa[fa[x]]]]);
}
int merge(int x,int y)
{
	x=fnd(x);
	y=fnd(y);
	if (x==y) return 0;
	if (sz1[x]+sz2[x]>sz1[y]+sz2[y]) swap(x,y);
	ans-=sz1[x]*sz2[x];
	ans-=sz1[y]*sz2[y];
	sz1[y]+=sz1[x];
	sz2[y]+=sz2[x];
	fa[x]=y;
	ans+=sz1[y]*sz2[y];
	stk1.push(x);
	stk2.push(y);
	return 1;
}
void undo()
{
	int x=stk1.top(),y=stk2.top();
	stk1.pop();stk2.pop();
	ans-=sz1[y]*sz2[y];
	fa[x]=x;
	sz1[y]-=sz1[x];
	sz2[y]-=sz2[x];
	ans+=sz1[x]*sz2[x];
	ans+=sz1[y]*sz2[y];
}
void update(int x,int tl,int tr,int l,int r,pair<int,int> f)
{
	if (tl>r||tr<l)
	{
		return;
	}
	if (tl>=l&&tr<=r)
	{
		lys[x].push_back(f);
//		cerr<<x<<' '<<tl<<' '<<tr<<' '<<f.first<<' '<<f.second<<endl;
		return;
	}
	update(x*2,tl,(tl+tr)/2,l,r,f);
	update(x*2+1,(tl+tr)/2+1,tr,l,r,f); 
}
void solve(int x,int l,int r)
{
	int cnt=0;
	lyscsc(it,lys[x])
	{
		cnt+=merge(it->fi,it->se);
	}
	if (l==r)
	{
		printf("%I64d ",ans);
		while (cnt--)
		{
			undo();
		}
		return;
	}
	solve(x*2,l,(l+r)/2);
	solve(x*2+1,(l+r)/2+1,r);
	while (cnt--)
	{
		undo();
	}
}
int main()
{
	read(n);
	rep(i,n)
	{
		read(x);read(y);
		if (!lst.count(mk(x,y)))
		{
			lst[mk(x,y)]=i;
		}
		else
		{
			update(1,1,n,lst[mk(x,y)],i-1,mk(x,y+300000));
			lst.erase(mk(x,y));
		}
	}
	lyscsc(it,lst)
	{
		update(1,1,n,it->se,n,mk(it->fi.fi,it->fi.se+300000));
	}
	rep(i,600000)
	{
		fa[i]=i;
		if (i<=300000) sz1[i]=1; else sz2[i]=1;
	}
	solve(1,1,n);
	return 0;
}