#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
using namespace std;
#define pi 3.141592653589793
#define ii pair<int,int>
#define llll pair<ll,ll>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf\n", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s ", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mk(x,y)                      make_pair(x,y)
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define ninf -10000000000000000;
#define eps 1e-7
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
/*ll power(ll base, ll exp) {
base %= mod;
ll result = 1;
while (exp > 0) {
if (exp & 1)
result = (result * base) % mod;
base = (base * base) % mod;
exp >>= 1;
}
return result;
}
*/
/*long long gcd(long long a, long long b)
{
if (b == 0)return a; return gcd(b, a%b);
}
long long lcm(long long a, long long b) {
return  a * b / gcd(a, b);
}
*/
bool mat[3010][3010];
vector<int>arr[3010];
int main()
{
	int n, m,u,v;
	ll ans = 0;
	sci(n); sci(m);
	for (int i = 0; i < m; ++i) { sci(u); sci(v); arr[u].push_back(v); mat[u][v] = 1; }
	for (int i = 1; i <= n; ++i)
	{
		for (int j = 1; j <= n; ++j)
		{
			if (i != j)
			{
				int cnt = 0;
				for (int k = 0; k < arr[i].size(); ++k)
				{
					if (arr[i][k] != j&&mat[arr[i][k]][j])++cnt;
				}
				ans += (1LL * cnt*(cnt - 1)) / 2;
			}
		}
	}
	pll(ans);
	return 0;
}