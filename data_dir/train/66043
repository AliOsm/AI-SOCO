#include<bits/stdc++.h>
using namespace std;
#define M 100005
typedef vector<int> vii;
typedef vector<vii> vvi;
typedef pair<int, int> pii;

struct KMP
{
    static vii getFail(const string& s)
    {
        int n = s.size();
        vii fail(n);

        for(int i = 1; i < n; i++)
        {
            int j = fail[i-1];
            while(j && s[i] != s[j]) j = fail[j-1];
            if(s[i] == s[j]) j++;

            fail[i] = j;
        }

        return fail;
    }

    static vvi getAutomata(const string& s, vii fail = vii())
    {
        int n = s.size();
        vvi atmt(n+1);
        for(int i = 0; i <= n; i++) atmt[i].resize(26);

        if(fail == vii()) fail = getFail(s);

        for(int i = 0; i <= n; i++)
        {
            for(int j = 0; j < 26; j++)
            {
                if(i < n && s[i] == j+'a') atmt[i][j] = i+1;
                else if(i) atmt[i][j] = atmt[fail[i-1]][j];
            }
        }

        return atmt;
    }

    static vii metch(const string& text, const string& pat, vii fail = vii())
    {
        if(fail == vii()) fail = getFail(pat);
        vii ans;
        int n = text.size(), m = pat.size();

        for(int i = 0, j = 0; i < n; i++)
        {
            while(j && (j == m || text[i] != pat[j])) j = fail[j-1];
            if(text[i] == pat[j]) j++;

            if(j == m) ans.push_back(i-m+1);
        }

        return ans;
    }
};

int ans[M];

int main()
{
    //ios::sync_with_stdio(false);
    //cin.tie(0);

    string s;
    cin>>s;
    int n = s.size();

    vii fail = KMP::getFail(s);

    for(int i = 0; i < n; i++) ans[i]++;
    for(int i = n-1; i >= 0; i--)
    {
        if(fail[i]) ans[fail[i]-1] += ans[i];
    }

    vector<pii> vec;
    for(int j = n; j; j = fail[j-1]) vec.push_back({j, ans[j-1]});
    reverse(vec.begin(), vec.end());

    printf("%d\n", vec.size());
    for(pii p: vec) printf("%d %d\n", p.first, p.second);

    return 0;
}
