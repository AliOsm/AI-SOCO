#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define sz(x) (int)(x).size()
#define li long long
#define ld long double
#define x first
#define y second
#define pt pair<int, int>
#define pll pair<ll, ll>
#define forn(i, t) for(int i = 0; i < (t); i++)
#define fore(i, f, t) for(int i = (f); i < (t); i++)
#define forr(i, f, t) for(int i = (f) - 1; i >= (t); i--)
#define all(x) (x).begin(), (x).end()
#define ins insert

using namespace std;


const int INF = 1e9;
const int MOD = 1e9 + 7;
const li INF64 = 1e18;
const ld EPS = 1e-7;

mt19937 myrand(time(NULL));

const int N = 1000 + 13;

int n, m, k;
vector<int> g[N];
int a[N];


bool read(){
	if(scanf("%d%d%d", &n, &m, &k) != 3)
		return 0;
	int f, t;
	memset(a, 0, sizeof(a));
	forn(i, n)
		g[i] = vector<int>();
	forn(i, k){
		scanf("%d", &t);
		--t;
		a[t] = 1;	
	}
	forn(i, m){
		scanf("%d%d", &f, &t);
		--f, --t;
		g[f].pb(t);
		g[t].pb(f);
	}
	return 1;
}


char used[N];
int cnt, cnt1;
bool fl;


void dfs(int v){
	used[v] = 1;
	cnt++;
	cnt1 += sz(g[v]);
	if (a[v]) fl = 1;
	for (auto u : g[v])
		if (!used[u])
			dfs(u);
}


void solve(){
	memset(used, 0, sizeof(used));
	vector<int> c;
	vector<pt> b;
	li ans = 0;
	forn(i, n)
		if (!used[i]){
			fl = 0;
			cnt = 0;
			cnt1 = 0;
			dfs(i);
			if (fl)
				b.pb(mp(cnt, cnt1));
			else{
				c.pb(cnt);
				ans += (cnt * 1ll * (cnt - 1) / 2 - cnt1 / 2);
			}
		}
	sort(all(b));
	li sum = 0, cur = 0;
	for (auto it : c)
		sum += it;
	for (auto it : c){
		ans += it * 1ll * b[sz(b) - 1].x;
		cur += (sum - it) * 1ll * it;
	}
	for (auto it : b)
		ans += (it.x * 1ll * (it.x - 1) - it.y) / 2;
	printf("%lld\n", ans + cur / 2);
}


int main(){
	#ifdef _DEBUG
		freopen("input.txt", "r", stdin);
	#endif
	while(read())
		solve();
	return 0;
}