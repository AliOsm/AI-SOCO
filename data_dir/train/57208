#include <stdio.h>
#include <vector>

using namespace std;

struct sEdge {
    int u, v;
    bool backEdge;
} e[1009];

vector<int> neigh[1009];

bool root[1009];
bool visited[1009];
void DFS1(int v, int p)
{
    visited[v] = true;
    
    for (int i = 0; i < neigh[v].size(); i++) {
        int u = (v == e[ neigh[v][i] ].v ? e[ neigh[v][i] ].u : e[ neigh[v][i] ].v );
        
        if (u == p) continue;
        
        if (visited[u])
            e[ neigh[v][i] ].backEdge = true;
        else
            DFS1(u, v);
    }
}

int main()
{
    int n;
    scanf("%d", &n);
    
    for (int i = 0; i < n-1; i++) {
        scanf("%d %d", &e[i].u, &e[i].v);
        
        neigh[ e[i].u ].push_back(i);
        neigh[ e[i].v ].push_back(i);
    }
    
    int ans = -1;
    for (int v = 1; v <= n; v++) {
        if (!visited[v]) {
            ans++;
            root[v] = true;
            DFS1(v, -1);
        }
    }
    
    printf("%d\n", ans);
    
    int i = 0;
    for (int x = -1, y = 1; y <= n; y++) {
        if (root[y]) {
            if (x == -1)
                x = y;
            else {
                while (!e[i].backEdge) i++;
                printf("%d %d %d %d\n", e[i].u, e[i].v, x, y);
                i++;
            }
        }
    }
    
}
