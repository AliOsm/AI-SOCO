#include <iostream>
using namespace std;
const int N = 1e5 + 10;
int n;
long long a[N];
long long tree[4 * N];
long long temp[4 * N];
void Build(int v, int vLeft, int vRight){
	if (vLeft == vRight){
		tree[v] = a[vLeft];
		return;
	}
	int mid = (vLeft + vRight) / 2;
	Build(2 * v, vLeft, mid);
	Build(2 * v + 1, mid + 1, vRight);
	tree[v] = max(tree[2 * v], tree[2 * v + 1]);
}
void Push(int v, int vLeft, int vRight){
	if (temp[v] != 0){
		tree[v] = temp[v];
		temp[2 * v] = temp[v];
		temp[2 * v + 1] = temp[v];
		temp[v] = 0;
	}
}
long long GetMax(int v, int vLeft, int vRight, int left, int right){
	Push(v, vLeft, vRight);
	if (vLeft >= left && right >= vRight){
		return tree[v];
	}
	if (left > vRight || vLeft > right){
		return 0;
	}
	int mid = (vLeft + vRight) / 2;
	return max(GetMax(2 * v, vLeft, mid, left, right),
		GetMax(2 * v + 1, mid + 1, vRight, left, right));
}
void Update(int v, int vLeft, int vRight, int left, int right, long long value){
	Push(v, vLeft, vRight);
	if (vLeft >= left && right >= vRight){
		temp[v] = value;
		Push(v, vLeft, vRight);
		return;
	}
	if (left > vRight || vLeft > right){
		return;
	}
	int mid = (vLeft + vRight) / 2;
	Update(2 * v, vLeft, mid, left, right, value);
	Update(2 * v + 1, mid + 1, vRight, left, right, value);
	tree[v] = max(tree[2 * v], tree[2 * v + 1]);
}
int main(){
	cin>>n;
	for (int i=1; i<=n; i++){
		cin>>a[i];
	}
	Build(1, 1, n);
	int q;
	cin>>q;
	for (int i=1; i<=q; i++){
		int right;
		long long value;
		cin>>right>>value;
		cout<<GetMax(1, 1, n, 1, right)<<endl;
		value = value + GetMax(1, 1, n, 1, right);
		Update(1, 1, n, 1, right, value);
	}
}