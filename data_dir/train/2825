#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

int n, k;
vector<pair<pii,int>> vec;
int dp[80][80];
vector<int> store;

int recur( int pos, int taken )
{
	if( pos == n ) {
		if( taken == k ) return 0;
		return -inf;
	}
	if( dp[pos][taken] != -1 ) return dp[pos][taken];
	int ret = 0;
	if( taken < k ) ret = vec[pos].F.S + vec[pos].F.F*taken + recur( pos+1, taken+1 );
	ret = max( ret, vec[pos].F.F*(k-1) + recur( pos+1, taken ) );
	dp[pos][taken] = ret;
	return ret;
}

void print( int pos, int taken )
{
	if( pos == n ) return;
	if( taken < k && recur( pos, taken ) == vec[pos].F.S + vec[pos].F.F*taken + recur( pos+1, taken+1 ) ) {
		store.PB( vec[pos].S+1 );
		print( pos+1, taken+1 );
		return;
	}
	if( recur( pos, taken ) == vec[pos].F.F*(k-1) + recur( pos+1, taken ) ) {
		store.PB( -vec[pos].S-1 );
		print( pos+1, taken );
		return;
	}
}

int main()
{
	optimize();
	int T;
	cin >> T;
	while(T--) {
		memset( dp, -1, sizeof(dp) );
		vec.clear();
		store.clear();
		cin >> n >> k;
		vec.resize(n);
		for( int i = 0; i < n; ++i ) cin >> vec[i].F.S >> vec[i].F.F, vec[i].S = i;
		sort( vec.begin(), vec.end() );
		//dbg(vec);
		cout << 2*n-k << endl;
		print( 0, 0 );
		//dbg(store);
		for( int i = 0, j = 0; i < n && j < k-1; ++i ) {
			if( store[i] > 0 ) {
				++j;
				cout << store[i] << " ";
			}
		}
		for( int i = 0; i < n; ++i ) {
			if( store[i] < 0 ) {
				cout << -store[i] << " " << store[i] << " ";
			}
		}
		for( int i = n-1; i >= 0; --i ) {
			if( store[i] > 0 ) {
				cout << store[i] << endl;
				break;
			}
		}
	}
}





















