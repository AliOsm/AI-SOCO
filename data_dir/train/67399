#include <bits/stdc++.h>

using namespace std;

const int N = 5e5 + 5;

int n, q, type, x, head[N], tail[N], num, pos[N], m, par[N], col[N], sz[N], Mx[N];

vector < int > g[N];

struct node
{
	int add;
	int val;
} T[N * 4];

void build(int v = 1, int p = -1)
{
	col[v] = num;
	pos[v] = ++m;
	if (!head[num]) head[num] = v;
	int mx = -1;
	for (auto to : g[v])
		if (to != p)
			if (mx == -1 || sz[mx] < sz[to])
				mx = to;
	if (mx == -1)
	{
		tail[num] = v;
		return;
	}
	build(mx, v);
	for (auto to : g[v])
		if (to != p && to != mx)
		{
			num++;
			build(to, v);
		}
}

void push(int v, int tl, int tr)
{
	if (T[v].add == -1 || tl > tr) return;
	if (tl != tr)
		T[v * 2].add = T[v * 2 + 1].add = T[v].add;
	T[v].val = T[v].add;
	T[v].add = -1;
}

void build_rmq(int v = 1, int tl = 1, int tr = m)
{
	T[v].add = -1;
	if (tl == tr) 
	{	
		T[v].val = 0;
		return;
	}
	int tm = (tl + tr) / 2;
	build_rmq(v, tl, tm);
	build_rmq(v, tm + 1, tr);
}

void upd(int l, int r, int val, int v = 1, int tl = 1, int tr = m)
{
	push(v, tl, tr);
	if (tl > r || tr < l || tl > tr) return;
//	cout << "upd l = " << l << " r = " << r << " val = " << val << " v = " << v << " tl = " << tl << " tr = " << tr << endl;
	if (l <= tl && tr <= r)
	{
		T[v].add = val;
		push(v, tl, tr);
		return;
	}
	int tm = (tl + tr) / 2;
//	cout << "tm = " << tm << endl;
	upd(l, r, val, v * 2, tl, tm);
	upd(l, r, val, v * 2 + 1, tm + 1, tr);
}

int get(int pos, int v = 1, int tl = 1, int tr = m)
{
	push(v, tl, tr);
	if (tl == tr)
		return T[v].val;
	int tm = (tl + tr) / 2;
	if (pos <= tm) return get(pos, v * 2, tl, tm);
	else return get(pos, v * 2 + 1, tm + 1, tr);
}

void dfs(int v = 1, int p = -1)
{
	par[v] = p;
	for (auto to : g[v])	
		if (to != p)
		{
			dfs(to, v);
			sz[v] += sz[to];
		}
	sz[v]++;
}

void upd_subtree(int v)
{	
	upd(pos[v], pos[tail[Mx[v]]], 1);
}

void upd_par(int v)
{
	while(true)
	{
		if (v == -1) break;
//	  cout << "v = " << v << " col[v] = " << col[v] << " head[col[v]] = " << head[col[v]] << " l = " << pos[head[col[v]]] << " r = " << pos[v] << endl;
		upd(pos[head[col[v]]], pos[v], 0);
//		puts("there");
		v = par[head[col[v]]];
	}
}

void go(int v = 1, int p = -1)
{
	Mx[v] = col[v];
	for (auto to : g[v])	
		if (to != p)
		{
			go(to, v);
			Mx[v] = max(Mx[v], Mx[to]);
		}
}

int main()
{
  scanf("%d", &n);
  for (int it = 0, a, b;it < n - 1;it++)
  {
		scanf("%d%d", &a, &b);
		g[a].push_back(b);
		g[b].push_back(a);
  }
	dfs();
	num = 1;  
  build();
  build_rmq();
  go();
  scanf("%d", &q);
  while(q--)
  {
  	scanf("%d%d", &type, &x);
//  	cout << "type = " << type << " x = " << x << endl;
  	if (type == 1) upd_subtree(x);
  	if (type == 2) upd_par(x);
  	if (type == 3) printf("%d\n", get(pos[x]));
  }
  return 0;
}