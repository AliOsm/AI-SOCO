#include <bits/stdc++.h>

using namespace std;

const int maxn = 100005;
const int logn = 17;

int n, m;
long long x[maxn], y[maxn];
vector<int> g[maxn];
int hull[maxn];
int tin[maxn], tout[maxn], up[logn][maxn], timer = 0;

inline bool good(int i, int j, int k) {
	return (x[j] - x[k]) * (y[i] - y[j]) - (x[i] - x[j]) * (y[j] - y[k]) >= 0;
}

void dfs(int v, int p) {
	up[0][v] = p;
	for (int h = 1; h < logn; h++)
		up[h][v] = up[h - 1][up[h - 1][v]];

	tin[v] = timer++;
	for (int u : g[v])
		dfs(u, v);
	tout[v] = timer++;
}

inline bool isParent(int v, int u) {
	return tin[v] <= tin[u] && tout[u] <= tout[v];
}

inline int getLCA(int v, int u) {
	if (isParent(v, u))
		return v;
	if (isParent(u, v))
		return u;
	for (int h = logn - 1; h >= 0; h--)
		if (!isParent(up[h][v], u))
			v = up[h][v];
	return up[0][v];
}

int main() {

	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		scanf("%I64d%I64d", &x[i], &y[i]);

	int sz = 0;
	hull[sz++] = n - 1;
	for (int i = n - 2; i >= 0; i--) {
		while (sz > 1 && !good(i, hull[sz - 1], hull[sz - 2]))
			sz--;
		g[hull[sz - 1]].push_back(i);
		hull[sz++] = i;
	}
	dfs(n - 1, n - 1);

	scanf("%d", &m);
	for (int i = 0; i < m; i++) {
		int v, u;
		scanf("%d%d", &v, &u);
		printf("%d ", getLCA(--v, --u) + 1);
	}

	return 0;
}
