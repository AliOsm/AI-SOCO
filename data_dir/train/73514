#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
#define ll long long
#define ld long double
using namespace std;
const int block_size = 317;
int dp[100005],nxt[100005];
int n, m, t, a, b,p[100005];
vector<pair<int,int> >v;
int solve(int idx, int r){
    if(idx > r || idx >= n)
        return 0;
    if(dp[idx] != -1)
        return dp[idx];
    int &ans = dp[idx];
    ans = solve(p[idx] + idx, r) + 1;
    return ans;
}
int solve2(int idx, int r){
    if(nxt[idx] != -1)
        return nxt[idx];
    int &ans = nxt[idx];
    if(idx + p[idx] > r || idx + p[idx] >= n)
        ans = idx;
    else
        ans = solve2(idx + p[idx], r);
    return ans;
}
int main()
{
    ios::sync_with_stdio(0);
    scanf("%d%d", &n, &m);
    memset(dp, -1, sizeof dp);
    memset(nxt, -1, sizeof nxt);
    for(int i = 0; i < n; i++)
        scanf("%d", &p[i]);
    for(int i = 0; i <= 317; i++)
        v.push_back({a, a + 316}), a += 317;
    for(int i = 0; i < n; i++){
        solve(i, v[i / block_size].second);
        solve2(i, v[i / block_size].second);
    }
    while(m--){
        scanf("%d%d", &t, &a);
        a--;
        if(!t){
            scanf("%d", &b);
            p[a] = b;
            int l = v[a / block_size].first, r = v[a / block_size].second;
            for(int i = l; i <= r; i++)
                dp[i] = nxt[i] = -1;
        }
        else{
            int ans = 0;
            while(a < n){
                ans += solve(a, v[a / block_size].second);
                a = solve2(a,v[a / block_size].second);
                if(a + p[a] < n)
                    a += p[a];
                else
                    break;
            }
            printf("%d %d\n", a + 1, ans);
        }
    }
    return 0;
}
