/*input
5
ababa
codedoca
abcda
zxzytyz
abcdefghijklmnopqrstuvwxyza

*/
#ifdef UncleGrandpa
#include <prettyprint.hpp>
#endif
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define bit(x,y) ((x>>y)&1)
#define loop(i,l,r) for(int i=(l); i<=(r); i++)
#define rloop(i,l,r) for(int i=(l); i>=(r); i--)
#define debug(x...) {cout << "[" << #x << "] ="; _print(x);}
void _print() {cout << endl;}
template<typename T, typename... Ts> void _print(const T& value, const Ts&... values) {cout << ' ' << value; _print(values...);}
template<typename T, typename... Ts> void print(const T& value, const Ts&... values) {cout << value; _print(values...);}
// change cout to cerr for debug in crash
// for struct, can write print operator to use print() (even with SegTree)
// const int N =;

bool have[26];
string pass, s;

bool check() {
	for (int i = 0; i < s.size(); i++) {
		if (i <= 1) pass += s[i];
		else {
			auto p1 = pass.find(s[i]);
			auto p2 = pass.find(s[i - 1]);
			// print(pass, p1, p2);
			if (p1 == string::npos) {
				if (p2 == pass.size() - 1)
					pass = pass + s[i];
				else if (p2 == 0) pass = s[i] + pass;
				else return false;
			}
			else {
				if (p1 + 1 == p2 || p2 + 1 == p1) continue;
				return false;
			}
		}
	}
	for (char c = 'a'; c <= 'z'; c++) if (pass.find(c) == string::npos) pass += c;
	return true;
}
signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	int T; cin >> T;
	while (T--) {
		cin >> s; pass = "";
		if (check()) {
			cout << "YES" << endl;
			cout << pass << endl;
		}
		else cout << "NO" << endl;
	}
}