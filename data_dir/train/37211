#include <bits/stdc++.h>

using namespace std;

#define sz(a) a.size()
#define pii pair<int,int>

int cmp(pii a, pii b) {
      set <int> ob, v;
      int k = 0;
      for (auto i : vector<int>{a.first, a.second, b.first, b.second}) { v.insert(i); };
      if (v.size() != 3) return 0;
      for (auto i : vector<int>{a.first, a.second, b.first, b.second}) {
            ob.insert(i);
            if (ob.size() == k) return i;
            k = ob.size();
      }
}

signed main(void) {
      int n, m;
      cin >> n >> m;
      vector<pii> a(n), b(m);

      for (int i = 0; i < n; ++i)
            cin >> a[i].first >> a[i].second;
      for (int i = 0; i < m; ++i)
            cin >> b[i].first >> b[i].second;

      int s = 0;
      int ans;
      
      set<int> osl;
      for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                  if (cmp(a[i], b[j])) {
                        osl.insert(cmp(a[i], b[j]));
                        ans = cmp(a[i], b[j]);
                  }
            }
      }

      if (osl.size() == 1) {
            cout << ans << endl;
            return 0;
      }

    
      for (int i = 0; i < n; ++i) {
            set <int> q;
            for (int j = 0; j < m; ++j) {
                  if (cmp(a[i], b[j])) {
                        q.insert(cmp(a[i], b[j]));
                  }
            }
            if (q.size() > 1) {
                  cout << -1;
                  return 0;
            }
         //   various.insert(*q.begin());
      }

      for (int j = 0; j < m; ++j) {
            set <int> q;
            for (int i = 0; i < n; ++i) {
                  if (cmp(b[j], a[i])) {
                        q.insert(cmp(b[j], a[i]));
                  }
            }
            if (q.size() > 1) {
                  cout << -1;
                  return 0;
            }
           // various.insert(*q.begin());
      }


      cout << 0 << endl;

      return 0;
}