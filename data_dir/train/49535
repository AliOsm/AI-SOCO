#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef long double real;

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

using namespace std;

const int MaxN = 64, NA = -1, MaxC = 0x3F3F3F3F;

char s [MaxN];
int d;

inline int dig (char c)
{
 int res;
 if ('0' <= c && c <= '9')
  res = c - '0';
 else if ('A' <= c && c <= 'Z')
  res = 10 + c - 'A';
 else
  return NA;
 if (res >= d)
  res = NA;
 return res;
}

int main (void)
{
 int i;
 int64 h, m, t;
 bool ok;

 while (scanf (" %s", s) != EOF)
 {
  vector <int> ans;

  for (d = 2; d <= 61; d++)
  {
   ok = true;

   h = 0;
   for (i = 0; s[i] != ':' && ok; i++)
   {
    t = dig (s[i]);
    if (t == NA)
     ok = false;
    else
     h = h * d + t;
   }
   ok &= (0 <= h && h <= 23);

   m = 0;
   for (i++; s[i] != '\0' && ok; i++)
   {
    t = dig (s[i]);
    if (t == NA)
     ok = false;
    else
     m = m * d + t;
   }
   ok &= (0 <= m && m <= 59);

   if (ok)
    ans.push_back (d);
  }

  if ((int) ans.size () == 0)
   printf ("0\n");
  else if (ans[(int) ans.size () - 1] == 61)
   printf ("-1\n");
  else
   for (i = 0; i < (int) ans.size (); i++)
    printf ("%d%c", ans[i], i + 1 < (int) ans.size () ? ' ' : '\n');
 }

 return 0;
}
