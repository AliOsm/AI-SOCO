//io
#include <iostream>
#include <cstdio>
#include <cstdlib>
//data structure
#include <vector>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <utility>
//algorithm
#include <algorithm>
#include <cmath>
//debug
#include <cassert>

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> l4;


const int maxn = 1e3+1;
int n, m;
char a[maxn][maxn];
int d[3][maxn][maxn];
int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

int sx[300], sy[300];
void dij(int id)
{
  set<pair<int, ii> > st;
  d[id][sx['1'+id]][sy['1'+id]] = 0;
  st.insert(make_pair(0, ii(sx['1'+id], sy['1'+id])));
  while (!st.empty())
    {
      int x = st.begin()->second.first;
      int y = st.begin()->second.second;
      st.erase(st.begin());
      for (int i = 0; i < 4; ++i)
	{
	  int nx = x+dx[i];
	  int ny = y+dy[i];
	  if (nx < 0 || nx >= n || ny < 0 || ny >= m || a[nx][ny] == '#')
	    continue;
	  int nxtd = d[id][x][y]+(a[nx][ny]=='.');
	  if (d[id][nx][ny] == -1 || d[id][nx][ny] > nxtd)
	    {
	      st.erase(make_pair(d[id][nx][ny], ii(nx, ny)));
	      st.insert(make_pair(d[id][nx][ny]=nxtd, ii(nx, ny)));
	    }
	}
    }

}
int main()
{
  memset(d, -1, sizeof(d));
  scanf("%d %d", &n, &m);
  for (int i = 0; i < n; ++i)
    scanf("%s", a[i]);
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < m; ++j)
      {
	sx[a[i][j]] = i;
	sy[a[i][j]] = j;
      }
  for (int i = 0; i < 3; ++i)
    {
      dij(i);
    }
  for (char c = '1'; c <= '3'; ++c)
    if (d[0][sx[c]][sy[c]] == -1)
      {
	puts("-1");
	return 0;
      }
  int ans = 1e9;
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < m; ++j)
      if (d[0][i][j] != -1 && d[1][i][j] != -1 && d[2][i][j] != -1)
	{
	  ans = min(ans, d[0][i][j] + d[1][i][j] + d[2][i][j] - 2*(a[i][j]=='.'));
	}
  printf("%d\n", ans);

}
