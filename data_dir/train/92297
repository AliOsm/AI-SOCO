#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <string>
#include <vector>
#include <utility>
#include <numeric>
#include <algorithm>
#define ll long long

using namespace std;

int counts[111111];


#include <iostream>
#include <vector>

// Binary search (note boundaries in the caller)
int CeilIndex(std::vector<int> &v, int l, int r, int key) {
    while (r-l > 1) {
        int m = l + (r-l)/2;
        if (v[m] > key)
            r = m;
        else
            l = m;
    }
    
    return r;
}

vector<int> LongestIncreasingSubsequenceLength(std::vector<int> &v) {
    if (v.size() == 0)
        return v;
    
    vector<int> ret;
    
    std::vector<int> tail(v.size(), 0);
    int length = 1; // always points empty slot in tail
    
    ret.push_back(1);
    
    
    tail[0] = v[0];
    for (size_t i = 1; i < v.size(); i++) {
        if (v[i] < tail[0]) {
            // new smallest value
            tail[0] = v[i];
            ret.push_back(1);
        }
        else if (v[i] >= tail[length-1]) {
            // v[i] extends largest subsequence
            tail[length++] = v[i];
            ret.push_back(length);
        }

        else {
            int xx = CeilIndex(tail, -1, length-1, v[i]);
            tail[xx] = v[i];
            ret.push_back(xx+1);

        }
        
        
        
    }
    
    return ret;
}

bool canfwd[111111];
bool canbck[111111];


bool AllSame(const vector<int>& A) {
    for(int i=1;i<A.size();i++)
        if (A[i]!=A[0])
            return false;
    return true;
}

bool Can(const vector<int>& A) {
    
    canfwd[0]=true;
    
    for(int i=1;i<A.size();i++) {
        if (A[i]<A[i-1]) {
            canfwd[i]=false;
        } else {
            canfwd[i]=canfwd[i-1];
        }
    }
    
    canbck[(int)A.size()-1]=true;
    for(int i=(int)A.size()-2;i>=0;i--) {
        if (A[i]<A[i+1]) {
            canbck[i]=false;
        } else {
            canbck[i]=canbck[i+1];
        }
    }
    
    
    if (canfwd[A.size()-1] || canbck[0])
        return true;
    
    
    for(int i=1;i<(int)A.size()-1;i++) {
        if (canfwd[i-1] && canbck[i+1] && A[i] >= max(A[i-1],A[i+1]))
            return true;
    }
    return false;
    
    
    
}

int main() {
    
    while(0) {
        int n;
        cin>>n;
        vector<int> A(n);
        for(int i=0;i<n;i++)
            cin>>A[i];
        
        vector<int> ret = LongestIncreasingSubsequenceLength(A);
        
        for(int i=0;i<n;i++)
            printf("%d ",ret[i]);
        cout << endl;
    }
    
    int n,m;
    cin>>n>>m;
    
    vector<int> counts(m,0);
    
    for(int i=0;i<m;i++)
        counts[i]=0;
    
    for(int i=1;i<=n;i++) {
        int L,R;
        cin>>L>>R;
        L--;
        R--;
        counts[L]++;
        if (R+1<m)
            counts[R+1]--;
    }
    
    
    for(int i=1;i<m;i++)
        counts[i]+=counts[i-1];
    
    /*
    cout << endl;
    for(int i=0;i<m;i++)
        printf("%d %d\n",i,counts[i]);
    */
    
    if (AllSame(counts)) {
        cout << m << endl;
        return 0;
    }
    
    if (Can(counts)) {
        cout << m << endl;
        return 0;
    }
    
    vector<int> LIS = LongestIncreasingSubsequenceLength(counts);
    
    std::reverse(counts.begin(),counts.end());
    
    vector<int> LISrev = LongestIncreasingSubsequenceLength(counts);

    
    std::reverse(LISrev.begin(),LISrev.end());
    
    
    int ans=0;
    for(int i=0;i<m;i++) {
        
        int L = LIS[i];
        int R = LISrev[i];
        
        ans = max(ans, L+R-1);
        
        
    }
    
    cout << ans << endl;
    return 0;
   // cout << LongestIncreasingSubsequenceLength(counts) << endl;
    
    
    
    
    
}
