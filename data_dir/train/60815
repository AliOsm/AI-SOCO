#include <bits/stdc++.h>
using namespace std;

bool isprime(int x) {
    if (x == 1) return 0;
    for (int i = 2; i * i <= x; i++) {
        if (x % i == 0) return 0;
    }
    return 1;
}

int mask_number[70];

int a[111];

pair <int, pair <int, int> > par[111][(1 << 17) +55];

int dp[111][(1<<17) + 5];

int main() {
    int n;
    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }
    vector <int> primes;

    for (int i = 1; i < 60; i++) {
        if (isprime(i)) {
            primes.push_back(i);
        }
    }
    for (int i = 2; i < 60; i++) {
        for (auto j = 0; j < primes.size(); j++) {
            if (i % primes[j] == 0) {
                mask_number[i] |= (1 << j);
            }
        }
    }
    for (int i = 0; i <= 100; i++) {
        for (int j = 0; j < (1 << 17); j++) {
            dp[i][j] = 1e9;
        }
    }
    dp[0][0] = 0;
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < (1 << 17); j++) {
            if (dp[i-1][j] != 1e9) {
                for (int k = 2; k < 60; k++) {
                    if ((j + mask_number[k]) == (mask_number[k] | j)) {
                        int new_mask = (mask_number[k] | j);
                        if (dp[i][new_mask] > dp[i - 1][j] + abs(k - a[i])) {
                            dp[i][new_mask] = dp[i - 1][j] + abs(k - a[i]);
                            par[i][new_mask] = {k, {i - 1, j}};
                        }
                    }
                }
                if (dp[i][j] > dp[i - 1][j] + a[i] - 1) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + a[i]-1);
                    par[i][j] = {1, {i - 1, j}};
                }
            }
        }
    }
    int ans = 1e9;
    int id = -1;
    for (int i = 0; i < (1 << 17); i++) {
        if (ans > dp[n][i]) {
            ans = dp[n][i];
            id = i;
        }
    }
    cerr << ans << endl;
    int N = n;
    vector <int> Answer;
    while(N != 0) {
        Answer.push_back(par[N][id].first);
        id = par[N][id].second.second;
        N--;
    }
    for (int i = Answer.size() - 1; i >= 0; i--) {
        cout << Answer[i] << ' ' ;
    }
}
