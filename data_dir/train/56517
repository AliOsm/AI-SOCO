#include <iostream>
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <deque>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <sstream>
#include <bitset>
using namespace std;

const int inf = 1000*1000*1000;

class segments
{
public:
    segments(vector<unsigned long long>& v): t(4*v.size())
    {
        build(v, 1, 0, v.size()-1);
    }
    unsigned long long rmq(int v, int tl, int tr, int l, int r)
    {
        if (l > r)
            return 0;
        if (tl == l && tr == r)
            return t[v];
        int tm = (tl+tr)/2;
        return 
            rmq(2*v, tl, tm, l, min(r, tm)) + 
            rmq(2*v+1, tm+1, tr, max(tm+1, l), r)
            ;
    }
private:
    unsigned long long build(vector<unsigned long long>& a, int v, int tl, int tr)
    {
        if (tl == tr)
        {
            return t[v] = a[tr];
        }
        int tm = (tl+tr)/2;
        return t[v] = build(a, 2*v, tl, tm) + build(a, 2*v+1, tm+1, tr); 
    }
private:
    vector<unsigned long long> t;
};

int main(void)
{
    int n;
    cin >> n;
    vector<unsigned long long> a(n);
    vector<char> b(n);
    map<int, int> q;
    for (int i = 0; i < n; ++i)
    {
        cin >> a[i];
    }
    for (int i = 0; i < n; ++i)
    {
        cin >> b[i];
    }
    reverse(a.begin(), a.end());
    reverse(b.begin(), b.end());
    segments s(a);
    int id = -1;
    unsigned long long sum = 0, sum2 = 0, ret = 0;
    for (int i = 0; i < n; ++i)
    {
        if (b[i] == '1')
        {
            sum += a[i];         
        }
    }
    for (int i = 0; i < n; ++i)
    {
        if (b[i] == '1')
        {
            ret = max(ret, sum2 + s.rmq(1, 0, n-1, i, n-1) - a[i]);
            sum2 += a[i];
        }
    }
    cout << max(sum, ret);
    return 0;
}