#include<limits>
#include<iostream>
#include<queue>
#include<climits>
#include<cstring>
#include<algorithm>
#include<vector>
#include<set>
#include<cstdio>
#include<map>
#include<cmath>
#include<cstdlib>
using namespace std;

struct Point
{
    double x,y; 
    Point(double a=0,double b=0)
    {
        x=a,y=b;
    }
    double operator*(const Point &P)const{
        return x*P.x + y*P.y;
    }
    double operator^(const Point &P)const{
        return x*P.y - y*P.x;
    }
    double mag()const{
        return sqrt(x*x + y*y);
    }
};
double angle(const Point &A,const Point &B)
{
    double m1 = A.mag() , m2 = B.mag();
    double dp = ((A)*(B))/(m1*m2);
    double cp = (A)^(B);
//  cout << "   ---->   " << cp << endl;
    if(cp==0)return dp<0 ? 180.0 : 0.0;
    if(dp>1)dp = 1;  if(dp<-1)dp = -1;
    double angle = cp > 0 ? acos(dp) : -acos(dp);
    if(angle < 0)angle += 2*M_PI;
    return angle*180.0/M_PI;
}
bool cmp1(const Point &A,const Point &B)
{
    int c = (A.y >= 0 ) ? (A.x >= 0 ? 0 : 1) : (A.x > 0 ? 3 : 2);
    int d = (B.y >= 0) ? (B.x >= 0 ? 0 : 1) : (B.x > 0 ? 3 : 2);
    if(c!=d)return c<d;
    int cp = A.x*B.y - A.y*B.x;
    return cp > 0;
}

Point arr[100010];
int main()
{
    int N;
    cin >> N;
    for(int i = 0; i < N; ++i)
    {
        cin >> arr[i].x >> arr[i].y;
    }
    sort(arr,arr+N,cmp1);
    double mi = 360.0;
    bool linear = 1;
    for(int i = 0; i < N; ++i)
    {
        if((arr[i]^arr[(i+1)%N])!=0 || (arr[i]*arr[(i+1)%N])<0)
            linear = 0;
    }
    if(linear)
    {
        cout << 0.0 << endl;
        return 0;
    }
    for(int i = 0; i < N; ++i)
    {
//      cout << arr[i].x << " " << arr[i].y << endl;
//      cout << angle(arr[i],arr[(i+1)%N]) << endl;
        mi = min(mi , 360.0-angle(arr[i],arr[(i+1)%N]));
    }
    printf("%0.10lf\n",mi);
    
}




