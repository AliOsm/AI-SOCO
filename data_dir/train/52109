#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE

#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <cmath>
#include <sstream>
#include <utility>
#include <ctime>
#include <memory.h>
#include <cctype>
#include <cstdlib>

using namespace std;

#pragma comment (linker, "/STACK:64000000")

#define y0 qwe
#define y1 asd
#define sz size()
#define pb push_back
#define fors(w,s) for(set <string> :: iterator w = s.begin(); w != s.end(); w++)
#define pii pair<int, int>
#define pll pair<ll, ll>
#define ull unsigned long long
#define vi vector <int>
#define vvi vector <vi>
#define inf 2000000000
#define mod 1000000007
#define ll long long
#define maxint 2139062143 //2147483647
#define maxll 9223372036854775807
#define fi first
#define se second
#define eps 1e-9
#define doubleinf 1000000000000000.0

struct sweet
{
    bool type, exist;
    int h, m, mx, y, l, r, cnt, nummx;
};

int t, l, h, q, q0, q1, q2, cnt, res, j, i, n, m, k, x, y, k1, k2, x0, mx, cnt1, cnt2;
sweet s[2001];
bool flag = 0;


/*void update (int q, sweet* s)
{
    s[q].cnt = s[s[q].l].cnt + s[s[q].r].cnt + 1;
    if (s[s[q].l].mx > s[s[q].r].mx)
    {
        s[q].mx = s[s[q].l].mx;
        s[q].nummx = s[s[q].l].nummx;
    }
    else
    {
        s[q].mx = s[s[q].r].mx;
        s[q].nummx = s[s[q].l].cnt + 1 + s[s[q].r].nummx;
    }
}

int merge(int q1, int q2, sweet* s)
{
    if (!q1 || !q2)
    {
        return (max(q1, q2));
    }
    if (s[q1].y > s[q2].y)
    {
        s[q1].r = merge(s[q1].r, q2, s);
        update(q1, s);
        return q1;
    }
    else
    {
        s[q2].l = merge(q1, s[q2].l, s);
        update(q2, s);
        return q2;
    }
}

pii split (int q, int num0, sweet* s)
{
    if (!q)
    {
        return pii(0, 0);
    }
    if (!num0)
    {
        return pii(0, q);
    }
    if (num0 == s[q].cnt)
    {
        return pii(q, 0);
    }
    pii p = pii(0, 0);
    if (s[s[q].l].cnt <= num0)
    {
        p = split (s[q].l, num0, s);
        s[q].l = p.second;
        update(q, s);
        p.second = q;
        return p;
    }
    else
    {
        p = split(s[q].r, num0 - s[s[q].l].cnt - 1, s);
        s[q].r = p.first;
        update(q, s);
        p.first = q;
        return p;
    }
}

void insert(int q, sweet* s)
{

}*/

inline void solve()
{
    srand(1337);
    scanf ("%d%d", &n, &x0);
    for (j = 1; j <= n; j++)
    {
        scanf ("%d%d%d", &t, &h, &m);
        s[j].type = t;
        s[j].h = h;
        s[j].m = m;
        s[j].exist = 1;
    }
    x = x0;
    for (i = 1; ; i++)
    {
        mx = 0;
        if (i & 1)
        {
            for (j = 1; j <= n; j++)
            {
                if (s[j].type && s[j].exist && s[j].h <= x)
                {
                    if (s[j].m > s[mx].m)
                    {
                        mx = j;
                    }
                }
            }
            if (mx)
            {
                s[mx].exist = 0;
                x += s[mx].m;
            }
            else
            {
                cnt1 = i - 1;
                break;
            }
        }
        else
        {
            for (j = 1; j <= n; j++)
            {
                if (!s[j].type && s[j].exist && s[j].h <= x)
                {
                    if (s[j].m > s[mx].m)
                    {
                        mx = j;
                    }
                }
            }
            if (mx)
            {
                s[mx].exist = 0;
                x += s[mx].m;
            }
            else
            {
                cnt1 = i - 1;
                break;
            }
        }
    }
    x = x0;
    for (j = 1; j <= n; j++)
    {
        s[j].exist = 1;
    }
    for (i = 0; ; i++)
    {
        mx = 0;
        if (i & 1)
        {
            for (j = 1; j <= n; j++)
            {
                if (s[j].type && s[j].exist && s[j].h <= x)
                {
                    if (s[j].m > s[mx].m)
                    {
                        mx = j;
                    }
                }
            }
            if (mx)
            {
                s[mx].exist = 0;
                x += s[mx].m;
            }
            else
            {
                cnt2 = i;
                break;
            }
        }
        else
        {
            for (j = 1; j <= n; j++)
            {
                if (!s[j].type && s[j].exist && s[j].h <= x)
                {
                    if (s[j].m > s[mx].m)
                    {
                        mx = j;
                    }
                }
            }
            if (mx)
            {
                s[mx].exist = 0;
                x += s[mx].m;
            }
            else
            {
                cnt2 = i;
                break;
            }
        }
    }
    printf ("%d", max(cnt1, cnt2));
}

inline void init()
{
    
}

inline void answer()
{
    
}

int main()
{
   // freopen ("input.txt","r",stdin); freopen ("output.txt","w",stdout);
    //freopen ("olympiad.in","r",stdin); freopen ("olympiad.out","w",stdout);
    init();
    solve();
    answer();
    return 0;
}