#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <cstdlib>
#include <utility>
#include <memory.h>
#include <cassert>
#include <iterator>
#include <bitset>
#include <iomanip>
#include <complex>
#include <queue>
#include <ctime>
#include <deque>
#include <stack>
#include <set>
#include <map>
 
using namespace std;
#define forn(i, n) for (int i = 0; i < n; ++i)
#define sz(a) (int)a.size()
#define mp(a, b) make_pair(a, b)  
#define all(a) a.begin(), a.end()
#define pb(a) push_back(a)
 
#ifdef LOCAL  
#define pv(a) cout << #a << " = " << a << '\n';
#else
#define pv(a) ;                                
#endif 
                           
typedef long long ll;
 
const int MAXN = 5*200500;
 
 
ll arr[MAXN];
ll n, k, b, c;
 
void stup()
{
    ll res;
    ll sum = 0;
 
    forn(i, k)
        sum += arr[i];
 
    res = k * arr[k - 1] - sum;
 
    forn(i, n - k)
    {
        sum -= arr[i];
        sum += arr[i + k];
 
        res = min(res, k * arr[i + k] - sum);
    }
 
    cout << res * c;
}
 
void sol()
{
    vector <ll> q(6 * n);
    vector <vector <ll> > query(10);
 
    forn(i, n)
        forn(j, 5)
            q[i * 5 + j] = arr[i] + j;
 
    sort(all(q));
 
    q.resize(unique(all(q)) - q.begin());
 
    forn(i, sz(q))
    {
        query[q[i] % 5].pb(q[i]);
    }
 
    ll res = 1e18;
 
    forn(mod, 5)
    {                      
        int ptr = 0;
 
        multiset <ll> pl;
        ll sum = 0;
 
 
        forn(i, sz(query[mod]))
        {
            ll cur = query[mod][i];
 
            while (ptr != n && arr[ptr] <= cur)
            {
                ll dmod = (mod - arr[ptr] % 5 + 5) % 5;
                ll val = dmod * c - ((arr[ptr] + dmod) / 5) * b;
 
 
                sum += val;
                pl.insert(-val);
 
                if (sz(pl) > k)
                {                              
                    sum += *pl.begin();
                    pl.erase(pl.find(*pl.begin()));
                }
               
                ptr++;
            }
 
                    if (sz(pl) == k)
                    {
                        //cout << k * (cur / 5) * b + sum << '\n';
 
                        res = min(res, k * (cur / 5) * b + sum);
                    }                  
        }                                                            
    }
 
    cout << res;
}

map<long long, int> have;
map<long long, int> :: iterator it;
 
 
int main()
{
    cin >> n >> k >> b >> c;
 
    forn(i, n)
        {
        	cin >> arr[i];
        	have[arr[i]]++;
        	it = have.find(arr[i]);
        	if (it -> second >= k) {
        		puts("0");
        		return 0;
        	}
        }
 
    forn(i, n)
        arr[i] += (ll)1e9;
 
    sort(arr, arr + n);
 
    if (5 * c <= b)
        stup();
    else
        sol();
    return 0;
}