#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

int main() {
  int n;
  scanf("%d", &n);
  vector<int> a(n);
  vector<int> D, E;
  for (int i = 0; i < n; ++i) {
    scanf("%d", &a[i]);
    int t = (int)sqrt(a[i] + 0.5);
    int cur = a[i] - t * t;
    ++t;
    cur = min(cur, t * t - a[i]);
    if (cur) {
      D.push_back(cur);
    } else {
      if (a[i] == 0) {
        E.push_back(2);
      } else {
        E.push_back(1);
      }
    }
  }
  int64 ret = 0;
  if (D.size() > n / 2) {
    sort(D.begin(), D.end());
    int rem = D.size() - n / 2;
    for (int i = 0; i < rem; ++i) ret += D[i];
  } else {
    sort(E.begin(), E.end());
    int rem = E.size() - n / 2;
    for (int i = 0; i < rem; ++i) ret += E[i];
  }
  printf("%lld\n", ret);
  return 0;
}
