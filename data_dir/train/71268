#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cassert>
#include <queue>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define pb push_back
#define fst first
#define snd second
#define SZ(x) ((int)x.size())
typedef long long ll;
#define dforn(i, n) for(int i = n - 1; i >= 0; i--)

const int MAXN = 128;

int n,m;
vector<pair<int, int>> G[MAXN];
int color[MAXN];

bool pintar(int node){
    queue<int> Q;
    color[node] = 0;
    Q.push(node);
    while(!Q.empty()){
        int v = Q.front(); Q.pop();
        forn(i, SZ(G[v])){
            int w = G[v][i].fst;
            int t = G[v][i].snd;
            if(color[w] == -1){
                color[w] = (color[v] + t) % 2;
                Q.push(w);
            } else if((color[w] + color[v])%2 != t){
                return false;
            }
        }
    }
    return true;
}

int main() {
    //~ freopen("input.in", "r", stdin);
    while( scanf("%d%d", &n,&m) >= 1 ){
        forn(i, MAXN) G[i].clear();
        forn(i, m){
            int a, b, c;
            scanf("%d %d %d", &a, &b, &c);
            --a; --b;
            G[a].pb({b, 1-c});
            G[b].pb({a, 1-c});
        }
        memset(color, -1, sizeof color);
        bool ok = true;
        forn(i, n){
            if(color[i] == -1){
                ok &= pintar(i);
                if(!ok) break;
            }
        }
        if(!ok){
            puts("Impossible");
            continue;
        }
        vector<int> ans;
        forn(i, n){
            if(color[i] == 1) ans.pb(i);
        }
        printf("%d\n", SZ(ans));
        forn(i, ans.size()){
            if(i) printf(" ");
            printf("%d", ans[i]+1);
        } puts("");
    }
    return 0;
}
