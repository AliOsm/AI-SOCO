#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <deque>
#include <map>
#include <set>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; }
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; }
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

const int MAXN = 1024;
int n, row[MAXN], col[MAXN];
pii pt[MAXN];
vector<int> tp, from, to;

int main() {
	cin >> n;
	FOR(i, 1, n) {
		cin >> pt[i].F >> pt[i].S;
		pt[i].F--; row[pt[i].F]++;
		pt[i].S--; col[pt[i].S]++;
	}
	FOR(beg, 0, n) {
		int max_col = beg, min_row = beg;
		FOR(i, beg, n) {
			if (col[i] > col[max_col]) max_col = i;
			if (row[i] < row[min_row]) min_row = i;
		}
		FOR(i, 1, n) {
			if (pt[i].F == min_row) pt[i].F = beg;
			else if (pt[i].F == beg) pt[i].F = min_row;
			if (pt[i].S == max_col) pt[i].S = beg;
			else if (pt[i].S == beg) pt[i].S = max_col;
		}
		if (beg != min_row) tp.pb(1), from.pb(beg), to.pb(min_row), swap(row[beg], row[min_row]);
		if (beg != max_col) tp.pb(2), from.pb(beg), to.pb(max_col), swap(col[beg], col[max_col]);
		FOR(i, 1, n) if (pt[i].F == beg || pt[i].S == beg) row[pt[i].F]--, col[pt[i].S]--;
	}
	cout << Size(tp) << endl;
	FOR(i, 0, Size(tp)) cout << tp[i] << " " << from[i]+1 << " " << to[i]+1 << endl;
	return 0;
}

