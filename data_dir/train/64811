#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007LL
#define IN freopen("test.txt","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2
#define sq(x)  ((x)*(x))

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<i64, i64> pii;

#define maxn 200005

struct mat{
    i64 a[105][105] , sz ;
    mat(){}
    void init(int _sz)
    {
        sz = _sz ;
        for(int i=0 ; i<=sz ; i++) for(int j=0 ; j<=sz ; j++) a[i][j] = 0 ;
    }
    mat(int _sz){ init(_sz) ; }

    mat operator*( const mat &m1 )
    {
        mat res(sz) ;
        for(int i=0 ; i<=sz ; i++)
        {
            for(int j=0 ; j<=sz ; j++)
            {
                res.a[i][j] = 0 ;
                for(int k=0 ; k<=sz ; k++) res.a[i][j] = (res.a[i][j] + a[i][k]*m1.a[k][j])%mod ;
            }
        }
        return res ;
    }
    mat operator^(i64 p)
    {
        mat cur = (*this) ;
        mat res(sz) ;
        for(int i=0 ; i<=sz ; i++) res.a[i][i] = 1 ;
        while( p!=0 )
        {
            if( p&1 ) res = res*cur ;
            cur = cur*cur ;
            p /= 2 ;
        }
        return res ;
    }
    void print()
    {
        printf("--------------\n\n") ;
        for(int i=0 ; i<=sz ; i++)
        {
            for(int j=0 ; j<=sz ; j++) printf("%lld ",a[i][j]) ;
            printf("\n") ;
        }
        printf("---------------\n\n") ;
    }
};

class numberTheory{

public:
    numberTheory(){}

    pii extendedEuclid(i64 a, i64 b) { // returns x, y | ax + by = gcd(a,b)

        if(b == 0) return pii(1LL, 0LL);
        else {
            pii d = extendedEuclid(b, a % b);
            return pii(d.yy, d.xx - d.yy * (a / b));
        }

    }

    i64 modularInverse(i64 a, i64 n) {
        pair<i64,i64> ret = extendedEuclid(a, n);
        return ((ret.xx % n) + n) % n;
    }


    i64 bigMod(i64 a, i64 n , i64 m)
    {
        if(n==0) return 1 ;
        i64 ret = bigMod(a,n/2,m) ;
        ret = (ret*ret)%m ;
        if(n%2) ret = (ret*a)%m ;
        return ret ;
    }
};

int a[105] , b[105] ;

i64 C2(i64 n)
{
    return ( n*(n-1) )/2 ;
}

int main()
{
    int n ;
    i64 k ;

    scanf("%d %lld",&n,&k) ;

    for(int i=1 ; i<=n ; i++) scanf("%d",&a[i]) ;

    for(int i=1 ; i<=n ; i++) b[i] = a[i] ;

    sort( b+1 , b+n+1 ) ;

    mat m ;

    m.init(n) ;

    i64 c0 = 0 , c1 = 0 ;

    for(int i=1 ; i<=n ; i++)
    {
        if( a[i] == 0 ) c0++ ;
        else c1++ ;
    }

    numberTheory nt ;

    i64 tot = (n*(n-1))/2 ;

    i64 invTot = nt.modularInverse( tot , mod  ) ;

 //   printf("3---%lld\n" , nt.modularInverse(3,mod)) ;

    i64 ans = 1LL ;

    for( int i=0 ; i<= min(c0,c1) ; i++ )
    {
        m.a[i][i] = ( C2(c0) + C2(c1) + i*(c1-i) + i*(c0-i) )%mod ;
        if(i!=0) m.a[i-1][i] = ( i*i )%mod ;
        m.a[i+1][i]  = ( (c0-i)*(c1-i) )%mod ;
        for(int j=0 ; j <= n ; j++) m.a[j][i] = ( m.a[j][i]*invTot )%mod ;
    }

  //  m.print() ;

    m = m^k ;

  //  m.print() ;

    int init = 0 ;

    for(int i=1 ; i<=n ; i++) if( a[i]==1 && b[i] == 0 ) init++ ;

 //   printf("init %d\n",init) ;

    printf("%lld\n", (m.a[0][init]%mod + mod)%mod ) ;

    return 0 ;
}
