#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/*------------------------------------BITMASK------------------------------------------*/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/*-----------------------------------------------------------------------------------------------*/

/*-----------------------------DIRECTION_ARRAY-------------------------*/
//------FOUR_DIRECTION---------//
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


//------EIGHT_DIRECTION---------//
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/*--------------------------------------------------------------------------------------*/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}

///-----------------------------START FROM HERE--------------------------------------///

vector<int>vv[100005];

bool vis[100005];

int T[100005];
int par[100005][22];
int bt[100005], ft[100005];
int t;
int level[100005];
int arr[100005];
void dfs(int u, int par){
        bt[u]=++t;
        vis[u]=1;
        level[u]=level[par]+1;
        T[u]=par;
        arr[bt[u]]=level[u];
        for(int i=0; i<vv[u].size();i++){

                int v=vv[u][i];
                if(v==u || v==par)continue;
                dfs(v,u);
        }
        ft[u]=t;

}
vector<int> tree[100005*4];
void build(int node, int b, int e){
        if(b==e){

                tree[node].pb(arr[b]);
               // cout<<b<<" "<<tree[node][0]<<" "<<tree[node].size()<<endl;
                return;

        }
        int SEGMENT_TREE;

        build(left,b, mid);
        build(right, mid+1, e);

        for(int i=0; i<tree[left].size(); i++)tree[node].pb(tree[left][i]);
           for(int i=0; i<tree[right].size(); i++)tree[node].pb(tree[right][i]);
        sort(all(tree[node]));


}

int query(int node,int b, int e, int l, int r, int v,int i){

        if(b>r || e<l)return 0;
        if(b>=l && e<=r){

                int p=upper_bound(all(tree[node]),v)-tree[node].begin();
                int q=lower_bound(all(tree[node]),v)-tree[node].begin();
                if(tree[node][q]!=v)return 0;
                return p-q;

        }
        int SEGMENT_TREE;
        int p=query(left, b,mid, l,r, v,i);
        int q=query(right,mid+1, e, l,r,v,i);
        return p+q;


}


void init(int n){

        mem(par, -1);
        for(int i=1; i<=n; i++)par[i][0]=T[i];

        for(int j=1; 1<<j <=n; j++){

                for(int i=1; i<=n; i++)
                {
                     if(par[i][j-1]!=-1)par[i][j]=par[par[i][j-1]][j-1];


                }
        }




}
int ans[100005];

int fnc(int p, int l){


        int log=1;

        while(1){

                int Next=log+1;
                if((1<<Next)>level[p])break;
                log++;

        }

        for(int i=log; i>=0; i--){

                if(level[p]- (1<<i)>=l)p=par[p][i];

        }
        return p;


}

int main(){

        int n;
        scanf("%d", &n);

        for(int i=1; i<=n; i++){

                int x;
                scanf("%d", &x);

                if(x!=0){

                        vv[i].pb(x);
                        vv[x].pb(i);
                }

        }
        for(int i=1; i<=n; i++){

                if(vis[i]==0)dfs(i, 0);

        }

        init(n);
        int q;
        build(1,1,t);
        scanf("%d", &q);


        for(int i=1; i<=q; i++){

                int v,pi;
                scanf("%d %d", &v, &pi);

                int l=level[v];
                if(l==1 || l-pi<=0)ans[i]=0;
                else{


                        int lca=fnc(v, l-pi);
                        //cout<<lca<<" "<<level[lca]<<endl;
                        int Ans=query(1,1,t,bt[lca], ft[lca],level[v],i);
                        Ans--;
                        ans[i]=Ans;
                }

        }
        for(int i=1; i<=q; i++)printf("%d ", ans[i]);

}
