#pragma comment (linker, "/STACK:256000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <memory.h>
#include <sstream>
#include <queue>
#include <cassert>
#include <ctime>
#include <complex>
#include <unordered_map>
#include <random>
 
using namespace std;
 
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<pii, pii> piiii;
typedef pair<int64, int> pli;
typedef pair<int, char> pic; 

#define pb push_back
#define sq(x) ((x)*(x))
#define cube(x) (((x)*(x))*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define bit(mask, b) ((mask >> b) & 1)
#define biton(mask, bit) (mask | (((uint64)(1)) << bit))
#define bitoff(mask, bit) (mask & (~(((uint64)(1)) << bit)))
#define bitputon(mask, bit) (mask |= (((uint64)(1)) << bit))
#define bitputoff(mask, bit) (mask &= (~(((uint64)(1)) << bit)))
#define FAIL() (*((int*)(0)))++
#define INF ((int)(1e9) + 1337)
#define EPS (1e-9)
#define y1 yy1
#define y0 yy0
#define j0 jj0

const long double PI = acosl((long double)-1.0);
const int64 LINF = 1e18;//((1ull << 63) - 1ull);
const int MOD = 1000000007;
int test;

const int MAXN = 1050;

struct state
{
	int cnt;
	int64 sum;
	int last;

	state (int cnt, int64 sum, int last) : cnt(cnt), sum(sum), last(last){}

	state ()
	{
		cnt = INF;
		sum = last = 0LL;
	}

	bool operator < (const state &oth) const
	{
		if (cnt != oth.cnt)
		{
			return cnt < oth.cnt;
		}
		return sum < oth.sum;
	}
};

typedef pair<int64, state> pls;

inline int64 get_gcd(int64 a, int64 b)
{
	while (b)
	{
		a %= b;
		swap(a, b);
	}
	return a;
}

unordered_map<int64, int> mapa;
int n;
int64 k;
int64 a[MAXN];
int64 x[MAXN];
state s[MAXN][10001];
int mapcount;
int64 divs[10001];

inline int get_num(int64 d)
{
	int num = mapa[d];
	if (!num)
	{
		num = mapa[d] = ++mapcount;
		divs[num] = d;
	}
	return num;
}

void init()
{
	scanf ("%d%lld", &n, &k);
	for (int i = 1; i <= n; i++)
	{
		scanf ("%I64d", &x[i]);
	}
}

void solve()
{
	init();
	if (k == 1LL)
	{
		int mn = 1;
		for (int i = 2; i <= n; i++)
		{
			if (x[i] < x[mn])
			{
				mn = i;
			}
		}
		printf("1\n%d\n", mn);
		return;
	}
	for (int i = 1; i <= n; i++)
	{
		a[i] = get_gcd(x[i], k);
	}
	s[0][get_num(1LL)] = state(0, 0LL, 0LL);
	for (int i = 1; i <= n; i++)
	{
		int cnt = mapcount;
		for (int j = 1; j <= cnt; j++)
		{
			int64 numb = get_gcd(k / divs[j], a[i]) * divs[j];
			auto it = mapa.find(numb);
			s[i][get_num(numb)] = min(s[i][get_num(numb)], state(s[i - 1][j].cnt + 1, s[i - 1][j].sum + x[i], j));
			s[i][j] = min(s[i][j], state(s[i - 1][j].cnt, s[i - 1][j].sum, j));
		}
	}
	int num = get_num(k);
	if (s[n][num].cnt == INF)
	{
		printf("-1\n");
		return;
	}
	printf("%d\n", s[n][num].cnt);
	for (int i = n; i >= 1; i--)
	{
		if (s[i][num].last != num)
		{
			printf("%d ", i);
		}
		num = s[i][num].last;
	}
}

void precalc()
{
	
}

int main()
{
    //ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
	//test_output(); return 0;
    srand(55);
	precalc();
	int tests = 1;
	//scanf ("%d", &tests);
	for (test = 1; test <= tests; test++)
	{
		solve();
	}
	
    return 0;
}