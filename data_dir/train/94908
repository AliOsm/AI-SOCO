#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL_CHECK
#define trace(x) cerr << #x << ": " << x << " ";
#define trnl cerr << "\n";
#else
#define trace(x) {}
#define trnl {}
#endif
typedef long long lolo;
typedef unsigned long long ulolo;
typedef pair<int, int> pii;
#define R(i,n) for(int i=0;i<(n);++i)
#define F(i,a,b) for(int i=(a);i<(b);++i)
#define FS(i,a,b,s) for(int i=(a);i<(b);i+=(s))
#define FD(i,n) for(int i=(n-1);i>=0;--i)
#define FDS(i,n,s) for(int i=(n-1);i>=0;i-=(s))
#define SZ(x) ((int)(x).size())
#define ALL(x) (x).begin(),(x).end()
#define fi first
#define se second
#define M_PI           3.14159265358979323846

const int INF = 1e9 + 23;
const int MOD = 1e9 + 9;
const int N = 1e5 + 10;

struct node {
  int d;
  int fr;
};

int n, m, d;
bool in[N];
vector<int> gr[N];
pair<node, node> mx[N];
int cnt[N];
bool book[N];

void dfs1(int u, int fr) {
  trace(u) trace(fr) trnl
  if (in[u]) {
    cnt[u] = 1;
    mx[u].fi.d = 0;
    mx[u].fi.fr = u;
  }
  for (auto v : gr[u]) {
    if (v == fr) continue;
    dfs1(v, u);
    if (cnt[v] == 0) continue;
    if (mx[v].fi.d + 1 > mx[u].fi.d) {
      mx[u].se = mx[u].fi;
      mx[u].fi.d = mx[v].fi.d + 1;
      mx[u].fi.fr = v;
      if (cnt[u] < 2) ++cnt[u];
    } else if (mx[v].fi.d + 1 > mx[u].se.d) {
      mx[u].se.d = mx[v].fi.d + 1;
      mx[u].se.fr = v;
      if (cnt[u] == 1) ++cnt[u];
    }
  }
  trace(u) trace(cnt[u]) trace(mx[u].fi.d) trnl
}

void dfs2(int u, int fr, int pd) {
  if (pd > d) book[u] = false;
  if (mx[u].fi.d > d) book[u] = false;
  trace(u) trace(pd) trace(book[u]) trnl
  if (pd) ++pd;
  for (auto v : gr[u]) {
    if (v == fr) continue;
    int cpd = pd;
    if (cnt[u] > 0 && mx[u].fi.fr != v) cpd = max(cpd, mx[u].fi.d + 1);
    if (cnt[u] > 1 && mx[u].fi.fr == v) cpd = max(cpd, mx[u].se.d + 1);
    dfs2(v, u, cpd);
  }
}

int main()
{
  ios_base::sync_with_stdio(0);
  cin >> n >> m >> d;
  int x;
  R(i, m) {
    cin >> x;
    in[x] = true;
  }
  int a, b;
  R(i, n-1) {
    cin >> a >> b;
    gr[a].push_back(b);
    gr[b].push_back(a);
  }
  fill(book, book + n + 1, true);
  dfs1(1, -1);
  dfs2(1, 0, -1);
  int ans = count(book + 1, book + n + 1, true);
  cout << ans << "\n";
  return 0;
}
// g++ -W -Wall -Wextra -pedantic -std=c++0x -o p main.cpp
