#include<bits/stdc++.h>

using namespace std;
const int MAXN = 300100;

int pai[MAXN];

int find(int x){
	if(pai[x] == x) return x;
	return pai[x] = find(pai[x]);
}

void join(int a,int b){
	pai[find(a)] = find(b);
}

set<int> vis , grafo[MAXN];

void dfs(int x){
	vector<int> vec;
	for(auto i : vis){
		if(grafo[x].find(i) != grafo[x].end()) continue;
		vec.push_back(i) , join(x,i);
	}
	for(int i = 0;i < vec.size();i++) vis.erase(vec[i]);
	for(int i = 0;i < vec.size();i++) dfs(vec[i]);
	
}

bool mark[MAXN];

int main(){
	int n,m,k;
	cin >> n >> m >> k;
		
	for(int i = 1;i <= n;i++){
		pai[i] = i;
		if(i > 1) vis.insert(i);
	}
	
	set<int> s;
	
	for(int i = 1;i <= m;i++){
		int x,y;
		cin >> x >> y;
		if(x == 1) s.insert(y);
		else if(y == 1) s.insert(x);
		else grafo[x].insert(y) , grafo[y].insert(x);
	}
	
	for(int i = 2;i <= n;i++){
		if(vis.find(i) == vis.end()) continue;
		vis.erase(i);
		dfs(i);
	}
	
	//for(int i = 2;i <= n;i++) cout << "| " << i << " " << find(i) << endl;
	
	int q = 0;
	
	for(int i = 2;i <= n;i++){
		if(mark[find(i)] == false) q ++;
		mark[find(i)] = true;
 	}
 	memset(mark,false,sizeof mark);
	
	int res = 0;
	
	for(int i = 2;i <= n;i++){
		if(s.find(i) != s.end()) continue;
		int a = find(i);
		if(mark[a] == true) continue;
		res ++ , mark[a] = true;
	}
	
	//cout << "AA " << q << " " << res << endl;
	
	if(res <= k && res == q && n - 1 - (int) s.size() >= k) cout << "possible" << endl;
	else cout << "impossible" << endl;
}