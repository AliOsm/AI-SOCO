#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
const int mod = 1000000007;

vector<int> g[200005];
ll d[200005][5], c[200005][5], z;
int k;

void dfs(int x, int p) {
    ll s[5][5] = {}, t[5][5] = {};
    for (int i : g[x]) if (i != p) {
        dfs(i, x);
        for (int j = 0; j < k; j++) c[x][j] += c[i][j], d[x][j] += d[i][j];
        for (int j = 0; j < k; j++) for (int l = 0; l < j; l++) {
            s[j][l] += d[i][j] * c[i][l] + c[i][j] * d[i][l];
            if (j + l) s[j][l] += c[i][j] * c[i][l];
            if (j + l > k) s[j][l] += c[i][j] * c[i][l];
        }
        for (int j = 0; j < k; j++) {
            s[j][j] += d[i][j] * c[i][j] * 2;
            if (j + j) s[j][j] += c[i][j] * c[i][j];
            if (j + j > k) s[j][j] += c[i][j] * c[i][j];
            //if (x == 1 && j == 1) cout << s[j][j] << '@' << '\n';
        }
    }
    for (int i = 0; i < k; i++) for (int j = 0; j < i; j++) {
        z += d[x][i] * c[x][j] + c[x][i] * d[x][j];
        if (i + j) z += c[x][i] * c[x][j];
        if (i + j > k) z += c[x][i] * c[x][j];
        z -= s[i][j];
    }
    for (int i = 0; i < k; i++) {
        ll w = d[x][i] * c[x][i] * 2;
        if (i + i) w += c[x][i] * c[x][i];
        if (i + i > k) w += c[x][i] * c[x][i];
        //cout << w << '!' << s[i][i] << '\n';
        w -= s[i][i];
        z += w / 2;
        //cout << s[i][i] / 2 << '\n';
    }
    for (int i = 1; i < k; i++) z += d[x][i] + c[x][i];
    z += d[x][0];
    //for (int j = 0; j < k; j++) cout << d[x][j] << ' ';
    //for (int j = 0; j < k; j++) cout << c[x][j] << ' ';
    //cout << '\n';
    c[x][0]++;
    ll u = c[x][k - 1], v = d[x][k - 1];
    for (int i = k - 1; i; i--) c[x][i] = c[x][i - 1], d[x][i] = d[x][i - 1];
    c[x][0] = u;
    d[x][0] = v + u;
    //cout << z << '\n';
}

int main() {
    ios::sync_with_stdio(false);
    int n, u, v;
    cin >> n >> k;
    for (int i = 1; i < n; i++) cin >> u >> v, g[u].push_back(v), g[v].push_back(u);
    dfs(1, 1);
    cout << z;
}
