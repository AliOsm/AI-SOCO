#include <iostream>
#include <bits/stdc++.h>

using namespace std;

int n,a[300100];
pair < int , int > Seg[2000100];
vector < int > Answer[300100];



void Build(int L = 1 , int R = n , int p = 1){

    if(L==R){
        Seg[p] = {a[L],a[L]};
        return;
    }
    int mid = (L+R)/2;
    Build(L,mid,p*2);
    Build(mid+1,R,p*2+1);
    Seg[p].first = __gcd(Seg[p*2].first,Seg[p*2+1].first);
    Seg[p].second = min(Seg[p*2].second , Seg[p*2+1].second);
}

pair < int , int > query(int i , int j  , int L = 1 , int R = n , int p = 1){

    if(L > j || R < i)  return {0,1e9};
    if(L>=i && R<=j)   return {Seg[p].first,Seg[p].second};
    int mid = (L+R)/2;
    pair < int , int > x = query(i,j,L,mid,p*2);
    pair < int , int > y = query(i,j,mid+1,R,p*2+1);
    return {__gcd(x.first,y.first),min(x.second,y.second)};
}



int main()
{
    scanf("%d",&n);
    for(int i=1; i<=n; i++)  scanf("%d",&a[i]);
    int Start = 1,End = n,Max=0;
    Build();
    while(Start <= End)
    {
        int mid = (Start + End) / 2;
        int k = 0;
        bool flag = false;
        for(int i=1; i<=n; i++)
        {
            k++;
            if(mid==k)
            {
                pair < int , int > x= query(i-k+1,i);
                if(x.first == x.second)  flag = true,Answer[mid].push_back(i-k+1);
                k--;
            }
        }
        if(flag)   Max = mid, Start = mid + 1;
        else   End = mid-1;
    }
    printf("%d %d\n",Answer[Max].size(),Max-1);
    for(auto x : Answer[Max])  printf("%d ",x);
    return 0;
}
