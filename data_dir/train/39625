/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
using namespace std;

#define int long long
#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

class DGlider {
public:
    int n, h;
    vector<pair<int, int>> arr;
    vector<int> prefix;

    int get_sum(int l, int r){
        if(!l) return prefix[r];
        return prefix[r] - prefix[l-1];
    }

    int get(int i){
        int low = i+1, high = n - 1, res = arr[i].second + h;
        while(low <= high){
            int mid = (low + high) >> 1;
            int total = arr[mid].second - arr[i].first;
            total -= get_sum(i, mid);
            if(total < h) res = arr[mid].second + (h - total), low = mid + 1;
            else high = mid - 1;
        }
        return res;
    }

    void solve(std::istream& in, std::ostream& out) {
		in >> n >> h;
        prefix = vector<int>(n);
        prefix[0] = 0;
		f(i, n){
            int l, r; in >> l >> r;
            arr.emplace_back(l, r);
            if(i!=0) prefix[i] = prefix[i-1];
            prefix[i] += (r-l);
        }
        int res = 0;
        for(int i = 0; i < n; ++i){
            int start = arr[i].first;
            int finish = get(i);
            res = max(res, finish - start);
        }
        out << res;
	}
};


int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	DGlider solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
