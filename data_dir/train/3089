#include <bits/stdc++.h>
#define VI vector<int>
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define LL long long
using namespace std;
const int MAXN = 1e3;
char A[MAXN+10][MAXN+10];
int D[MAXN+10][MAXN+10];
bool V[MAXN+10][MAXN+10];
int n, m, q;
int movx[] = {1,-1,0,0};
int movy[] = {0,0,1,-1};
void bfs(){
	queue<pii> q;
	for(int i = 0; i < n; i++){
		for(int j = 0; j < m; j++){
			for(int k = 0; k < 4; k++){
				int nx = i + movx[k],
					ny = j + movy[k];
				if(nx < 0 || nx >= n || ny < 0 || ny >= m)  continue;
				if(A[i][j] == A[nx][ny]){
					q.push(mp(i,j));
					V[i][j] = true;
					break;
				}

			}
		}
	}
	while(!q.empty()){
		pii aux = q.front(); q.pop();
		int x = aux.first, y = aux.second;
		for(int i = 0; i < 4; i++){
			int nx = x + movx[i],
				ny = y + movy[i];
			if(nx < 0 || nx >= n || ny < 0 || ny >= m)  continue;

			if(V[nx][ny]) continue;
			V[nx][ny] = true;
			q.push(mp(nx,ny));
			D[nx][ny] = D[x][y] + 1;
		}
	}
}
char query(int x, int y, LL p){
	x--; y--;
	if(!V[x][y] || p < D[x][y]) return A[x][y];
	else{
		LL r = p - D[x][y];
		if(r%2) return (1 - A[x][y] + '0') + '0';
		else return A[x][y];
	}
}
int main(){
	scanf("%d %d %d", &n, &m, &q);
	for(int i = 0; i < n; i++) scanf("%s", A[i]);
	bfs();
	while(q--){
		int x, y;
		LL p;
		scanf("%d %d %lld", &x, &y, &p);
		printf("%c\n", query(x, y, p));
	}
	return 0;
}