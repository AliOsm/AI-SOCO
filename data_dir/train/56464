#include<bits/stdc++.h>
#define ALL(c) (c).begin(), (c).end()
using namespace std;
using ll = long long;
using ld = long double;

const int N = 1e6+6, mod = 1e9+7;

vector<int> primes;

ll p2[N];
ll C0(int n){
	if(n==0) return 1;
	return p2[n-1];
	
}
ll C1(int n){
	if(n==0) return 0;
	return p2[n-1];
}




int main(){
	//freopen("input.txt","r",stdin); //freopen("output.txt","w",stdout);
	ios::sync_with_stdio(0);cin.tie(0);//cout.precision(12);cout<<fixed;
	
	int n, m;
	
	int lim = 70;
	
	for(int x=2;x<=lim;++x){
		bool ok = 1;
		for(int p : primes) if(x%p==0) ok=0;
		if(ok) primes.push_back(x);
	}
	
	p2[0] = 1;
	for(int i=1;i<N;++i) p2[i]=p2[i-1]*2%mod;
	
	
	cin>>n;
	map<int,int> cnt;
	for(int i=0;i<n;++i){
		int x;
		cin>>x;
		int ms = 0;
		for(int k=0;k<primes.size();++k){
			int q = 0, p = primes[k];
			while(x%p==0){
				x/=p;
				q^=1;
			}
			ms|=q<<k;
		}
		++cnt[ms];
	}
	vector<ll> d(1<<primes.size());
	d[0] = 1;
	for(auto g : cnt){
		int ms = g.first, c = g.second;
		vector<ll> t(d.size());
		for(int mm=0;mm<d.size();++mm) if(d[mm]){
			t[mm]+= d[mm] * C0(c);
			t[mm]%=mod;
			t[mm^ms]+= d[mm] * C1(c);
			t[mm^ms]%=mod;
		}
		d = t;
	}
	
	int ans = (d[0]-1+mod) %mod;
	
	cout<<ans<<endl;
	
	
	
	return 0;
}
