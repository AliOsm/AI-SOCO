#include <bits/stdc++.h>

using namespace std;

#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define REV(i,j,k) for(int i=j;i>=k;i--)
#define FORR(i,j,k,l) for(int i=j;i<=k;i+=l)
#define inf         freopen("in.txt", "r", stdin)
#define outf        freopen("out.txt", "w", stdout)
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c)    scanf("%d %d %d", &a, &b, &c)
#define minn          (long long)-1000000000000000000
#define maxx          (long long) 1000000000000000000
#define mod          1000000007
#define M_PI           3.14159265358979323846  /* pi */
#define LL           long long
#define NL '\n'
#define cnd tree[idx]
#define lnd (idx<<1)
#define rnd ((idx<<1)+1)
#define PB push_back
#define F first
#define S second
#define MAX 300010
#define MK make_pair
#define valid(nx,ny)  ((nx >= 0) && (nx < row) && (ny >= 0) && (ny < col))
typedef pair<int,int> pr;

struct node
{
    LL v, pa, low, lev, col;
}dfa[MAX];

int stk[MAX], top, ins[MAX], ti, col, in[MAX], v, n, m;
vector<int> mat[MAX];

void tarzan( int p )
{
    int i, j, y;
    dfa[p].v = 1;
    dfa[p].low = dfa[p].lev = ++ti;
    ins[p] = 1;
    stk[++top] = p;

    for(int i=0; i<mat[p].size(); i++ )
    {
        int x = mat[p][i], y;
        if( dfa[x].v == 0 )
        {
            dfa[x].pa = p;
            tarzan(x);
            dfa[p].low = min( dfa[x].low, dfa[p].low );

        }
        else if( ins[x] == 1 &&  dfa[p].pa != x) dfa[p].low = min( dfa[x].lev, dfa[p].low );

    }

    if( dfa[p].low == dfa[p].lev )
    {
        while( top > -1 )
        {
            y = stk[top];
            ins[y] = 0;
            top--;
            dfa[y].col = col;
            if( y == p ) break;
        }
        col++;
    }
}

vector<int> mat2[MAX], mchi[MAX];
int vis[MAX], far[MAX], prin;

void up()
{
    int x, y;
    for( int i=1; i<=n; i++ )
    {
        x = dfa[i].col;
        for( int j=0; j<mat[i].size(); j++ )
        {
            y = mat[i][j];
            y = dfa[y].col;

            if( x != y )  in[y]++, mat2[x].PB( y );
        }
    }
}

void dfs( int p )
{
    vis[p] = far[p] = 1;
    for(int i=0; i<mat2[p].size(); i++ )
    {
        int x = mat2[p][i];
        if(!vis[x])
        {
            dfs(x);
            far[p] = max(far[p], far[x] + 1);
            mchi[p].PB( far[x] );
        }
    }


    sort(mchi[p].begin(), mchi[p].end());
    reverse(mchi[p].begin(), mchi[p].end());

    if(mchi[p].size() == 0);
    else if(mchi[p].size() == 1) prin = max(prin, mchi[p][0]);
    else prin = max(prin, mchi[p][0] + mchi[p][1]);

    return;
}

int main()
{
    ios::sync_with_stdio(false);

    int i, j, x, y, c = 0;

    ti = 0;
    top = -1;
    cin >> n >> m;
    col = 1;

    for( i=0; i<m; i++ )
    {
        cin >> x >> y;
        mat[x].push_back( y );
        mat[y].push_back( x );
    }
    tarzan( 1 );

    up();
    dfs(1);

    cout << prin << endl;

    return 0;

}



