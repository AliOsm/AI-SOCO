#include<bits/stdc++.h>
#define lf double
#define ll long long
#define ull unsigned ll
#define ii pair<int,int>
#define li pair<ll,int>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define pll pair<ll,ll>
#define ld long int
#define heap priority_queue
#define mp make_pair
#define st first
#define nd second
#define pb push_back
#define pp pop_back
#define all(x) x.begin(),x.end()
#define len(x) strlen(x)
#define sz(x) (int) x.size()
#define orta ((bas+son)/2)
#define min3(x,y,z) min(min(x,y),z)
#define max3(x,y,z) max(max(x,y),z)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 1000000007
#define inf 1000000000000000009
#define N 100005
#define LOG 20
#define M 10
#define EPS 0.0000001
using namespace std; 

int n,m,ans,cnt;
int dp[N],S[N*12];
ll a[N],u[N],d[N],tut[N];
vector< pair< pair<ll,int>,int > > v;
stack<int> s;

void up(int node,int bas,int son,int l,int r,int val) {

   if(bas>r || son<l) return ;
   if(bas>=l && son<=r) {
      S[node]=val;
      return ;
   }
   up(node*2,bas,orta,l,r,val);
   up(node*2+1,orta+1,son,l,r,val);
   S[node]=max(S[node*2],S[node*2+1]);

}

int get(int node,int bas,int son,int l,int r) {

   if(bas>r || son<l) return 0;
   if(bas>=l && son<=r) return S[node];
   return max(get(node*2,bas,orta,l,r),get(node*2+1,orta+1,son,l,r));

}

void arrange() {

   for(int i=0;i<sz(v);) {
      ++cnt;
      do {
         if(v[i].nd==0) {
            a[v[i].st.nd]=cnt;
         }
         if(v[i].nd==1) {
            u[v[i].st.nd]=cnt;
         }
         if(v[i].nd==2) {
            d[v[i].st.nd]=cnt;
         }
         i++;
      } while(i<sz(v) && v[i].st.st==v[i-1].st.st);
   }

}

int main() {

   scanf("%d %d",&n,&m);
   for(int i=1;i<=n;i++) {
      scanf("%lld",&a[i]);
      tut[i]=a[i];
      u[i]=a[i]+m;
      d[i]=a[i]-m;
      v.pb(mp(mp(a[i],i),0));
      v.pb(mp(mp(u[i],i),1));
      v.pb(mp(mp(d[i],i),2));
   }
   sort(all(v));
   arrange();
   for(int i=1;i<=n;i++) {
      dp[i]=max(get(1,1,cnt,1,d[i]),get(1,1,cnt,u[i],cnt))+1;
      up(1,1,cnt,a[i],a[i],dp[i]);
      ans=max(ans,dp[i]);
   }
   ll last=inf;
   printf("%d\n",ans);
   for(int i=n;i>=1;i--) {
      if(dp[i]==ans && abs(tut[i]-last)>=m) {
         s.push(i);
         ans--;
         last=tut[i];
      }
   }
   while(!s.empty()) {
      printf("%d ",s.top());
         s.pop();
   }

}
