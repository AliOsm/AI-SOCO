#include <bits/stdc++.h>
using namespace std;

typedef long long i64;
typedef pair <i64, i64> D;

inline double i64ersect(D a, D b);
i64 f(i64 st, i64 dr);

i64 v[200010];

int main()
{
    i64 n;
    ios_base :: sync_with_stdio(0);
    cin.tie(0);

    cin >> n;

    for (i64 i(1); i <= n; i++)
        cin >> v[i];

    cout << f(1, n);

    return 0;
}

i64 f(i64 st, i64 dr)
{
    i64 mij((st + dr) / 2);
    i64 ans(0);
    if (st != dr)
        ans = max(f(st, mij), f(mij + 1, dr));
    else
        return max(0ll, v[st]);

    vector <D> drepte;

    i64 sp(0), sum(0);

    for (i64 i(1); i + mij <= dr; i++) {
        sp += 1ll * i * v[i + mij];
        sum += v[i + mij];
        drepte.push_back({ sp, sum });
    }

    sort(drepte.begin(), drepte.end());

    vector <D> batch;

    for (auto i : drepte) {
        if (batch.empty()) {
            batch.push_back(i);
            continue;
        }
        while (1) {
            if (batch.empty())
                break;
            double p(i64ersect(i, batch.back()));
            if (p <= 0.0 || (batch.size() > 1 && p >= i64ersect(batch[batch.size() - 2], batch.back()))) {
                batch.pop_back();
                continue;
            }
            break;
        }
        batch.push_back(i);
    }

    sp = 0, sum = 0;

    mij++;

    for (i64 i(1); mij - i >= st; i++) {
        sum += v[mij - i];
        sp += sum;
        while(batch.size() != 1 && batch.back().first + 1ll * i * batch.back().second < batch[batch.size() - 2].first + 1ll * i * batch[batch.size() - 2].second)
            batch.pop_back();
        ans = max(ans, sp + batch.back().first + 1ll * i * batch.back().second);
    }
    return ans;
}

inline double i64ersect(D a, D b)
{
    if (a.second == b.second)
        return -1;
    return 1.0 * (-a.first + b.first) / (a.second - b.second);
}
