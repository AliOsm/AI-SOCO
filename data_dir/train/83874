/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

const int N = 3e5 + 5, SQ = 547 + 3;
int n, q, tri[N][30], nxt[N][30], w[N], dp[N];
vector<int> adj[N];

void dfs(int u) {
	dp[u] += w[u];
	for (auto v: adj[u]) {
		dp[v] = dp[u];
		dfs(v);
	}
	adj[u].clear();
}

void add_trie(string s, int x) {
	int cur = 0;
	for (auto c: s) {
		if (!tri[cur][c - 'a'])
			tri[cur][c - 'a'] = ++n;
		cur = tri[cur][c - 'a'];
	}
	w[cur] += x;
}

void make_aho() {
	int L = 0, R = 0, q[N], f[N];
	for (int i = 0; i < 26; i++)
		if (tri[0][i])
			adj[0].push_back(q[R++] = nxt[0][i] = tri[0][i]);
		else
			nxt[0][i] = 0;
	while (L < R)
		for (int u = q[L++], i = 0; i < 26; i++)
			if (tri[u][i])
				adj[f[tri[u][i]] = nxt[f[u]][i]].push_back(q[R++] = nxt[u][i] = tri[u][i]);
			else
				nxt[u][i] = nxt[f[u]][i];
	dfs(0);
}

void get(string s) {
	long long ans = 0;
	for (int i = 0; i < s.size(); i++)
		for (int j = 0, cur = 0; i + j < s.size(); j++) {
			if (!tri[cur][s[i + j] - 'a'])
				break;
			ans += w[cur = tri[cur][s[i + j] - 'a']];
		}
	cout << ans << endl;
}

void calc(string s) {
	make_aho();
	long long ans = 0;
	for (int i = 0, cur = 0; i < s.size(); i++)
		ans += dp[cur = nxt[cur][s[i] - 'a']];
	cout << ans << endl;
}

int main() {
	ios:: sync_with_stdio(0), cin.tie(0), cout.tie(0);
	for (cin >> q; q--; ) {
		int t;
		string s;
		cin >> t >> s;
		if (t < 3)
			add_trie(s, t & 1? 1: -1);
		else
			s.size() < SQ? get(s): calc(s);
	}
}
