#pragma GCC target("avx2")
#pragma GCC optimize("O3")

#include <x86intrin.h>
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define pb push_back
#define pf push_front
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll
#define sqr(x) ((x) * (x))
#define all(x) x.begin (), x.end ()
#define sz(x) (int)x.size()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long

typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;

const int mod = (int)1e9 + 7;
const int N = (int)3e5 + 123;
const ll inf = (ll)1e18 + 123;
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, kol[N];
string s, t;

inline void boost () {
	ios_base :: sync_with_stdio (0);
	cin.tie (0), cout.tie (0);
}
        
inline void Solve () {
	cin >> n >> s;
	for (char c = 'z'; c >= 'a'; c --) {
		string t = "";
		int how = 100;
		while (how --) {
			t = "";
			for (int i = 0; i < sz (s); i ++) {
				if (s[i] == c) {
			   	if (sz (t) && t.back () + 1 == s[i]) continue;
			   	t += s[i];
				}
				else t += s[i];
			}
			s = t;
			t = "";
			for (int i = sz (s) - 1; i >= 0; i --) {
				if (s[i] == c) {
			   	if (sz (t) && t.back () + 1 == s[i]) continue;
			   	t += s[i];
				}
				else t += s[i];
			}
			reverse (all (t));
			s = t;
		}	
	}
	cout << n - sz (s);
}

int main () {
	boost ();
	int tt = 1;
	//cin >> tt;
	while (tt --) Solve ();
	return 0;

}