#include <bits/stdc++.h>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
int n, m, k, s;
vi d, f;
vector<pii> dnal;
vector<pii> fnal;
vi type;

vector<pii> take;
int d_day, f_day;
bool can(int day, bool get_sol = false){
  if(day == 0) return false;

  take.clear();
  d_day = f_day = 0;
  for(int i = 1;i < day;++i){
    if(d[i] < d[d_day]) d_day = i;
    if(f[i] < f[f_day]) f_day = i;
  }

  vector< pair<ll, int> > cost_d(sz(dnal)),
                          cost_f(sz(fnal)),
                          cost(sz(dnal) + sz(fnal));
  for(int i = 0;i < sz(dnal);++i)
    cost_d[i] = mp(d[d_day] * 1LL * dnal[i].fi,
                   dnal[i].se);
  for(int i = 0;i < sz(fnal);++i)
    cost_f[i] = mp(f[f_day] * 1LL * fnal[i].fi,
                   fnal[i].se);
  merge(all(cost_d), all(cost_f), cost.begin());

  ll need = 0;
  for(int i = 0;i < k;++i){
    need += cost[i].fi;
    if(need > s) return false;
  }

  if(need > s) return false;

  if(get_sol){
    for(int i = 0;i < k;++i){
      int p = cost[i].se;
      take.pb(mp(p, type[p] == 1 ? d_day : f_day));
    }
  }

  return true;
}

int main(){
  scanf("%d%d%d%d", &n, &m, &k, &s);
  d.resize(n), f.resize(n);
  for(int i = 0;i < n;++i)
    scanf("%d", &d[i]);
  for(int i = 0;i < n;++i)
    scanf("%d", &f[i]);
  for(int i = 0;i < m;++i){
    int v, c;
    scanf("%d%d", &v, &c);
    type.pb(v);
    if(v == 1) dnal.pb(mp(c, i));
    else fnal.pb(mp(c, i));
  }

  sort(all(dnal)), sort(all(fnal));

  if(!can(n)) printf("-1\n");
  else{
    int lo = 0, hi = n, mid;
    for(;;){
      if(lo + 1 >= hi){
        if(can(lo)) mid = lo;
        else mid = hi;
        break;
      }
      mid = (lo + hi) >> 1;
      if(can(mid)) hi = mid;
      else lo = mid;
    }
    printf("%d\n", mid);
    can(mid, true);
    for(int i = 0;i < sz(take);++i){
      printf("%d %d\n", take[i].fi + 1,
                        take[i].se + 1);
    }
  }
  return 0;
}
