/*
Nahid Hossain
Jahangirnagar University
Roll:54
*/
#include<bits/stdc++.h>
#define ll          long long int
#define db          double
#define pf          printf
#define sf          scanf
#define ff          first
#define ss          second
#define clr         clear()
#define sz          size()
#define pb          push_back
#define mk          make_pair
#define pi          acos(-1)
#define inf         123456789
#define mod         1000000007
#define ull         unsigned long long int
#define f(i,k,n)    for(i=k;i<n;i++)
#define fr(i,n,k)   for(i=n;i>=k;i--)
#define ent(a)      scanf("%lld",&a)
#define ent2(a,b)   scanf("%lld%lld",&a,&b)
#define ent3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define mem(a)      memset(a,0,sizeof(a))
#define vec(v,s)    vector<ll>v[s]
#define arr(a,s)    ll a[s];
//#define check(n,pos) (n&(1<<pos))
//#define set(n,pos)  (n|(1<<pos))
//knight and king//
int dr[]={2, 2, -2, -2, 1, -1, 1, -1};
int dc[]={1,-1,  1, -1, 2,  2,-2, -2};
int dr1[]={0, 0, 0, 1, 1, 1, -1, -1, -1};
int dc1[]={-1,0, 1,-1, 0, 1, -1, 0,   1};
int dr2[]={0, 0, 1, -1};
int dc2[]={1,-1, 0,  0};
////////////////////////////
using namespace std;
#define ma 200005


struct persistent{
ll l,r,s;

persistent()
{
 l=0,r=0,s=0;
}

}tree[ma*20];

ll nw;



void update(ll n,ll b,ll e,ll pn,ll val,ll x)
{

 if(b==e)
 {
  tree[n].s=tree[pn].s+val;
  return ;
 }

 ll mid=(b+e)>>1;
 if(x<=mid)
 {
  if(tree[n].l==0)
  tree[n].l=++nw;
  tree[n].r=tree[pn].r;

  update(tree[n].l,b,mid,tree[pn].l,val,x);

 }
 else
 {
  if(tree[n].r==0)
  tree[n].r=++nw;
  tree[n].l=tree[pn].l;
  update(tree[n].r,mid+1,e,tree[pn].r,val,x);
 }

 tree[n].s=tree[tree[n].l].s+tree[tree[n].r].s;
}




ll query(ll n,ll b,ll e,ll x,ll y)
{
 if(b>y||e<x)return 0;
 if(b>=x&&e<=y)
 {
  return tree[n].s;
 }
 ll mid=(b+e)>>1;
 ll p=query(tree[n].l,b,mid,x,y);
 ll p1=query(tree[n].r,mid+1,e,x,y);
 return p+p1;

}

ll rt[ma],a[ma];

int main()
{
 ll n,i,j;
 while(cin>>n)
 {
  f(i,1,n+1)cin>>a[i];
  ll m=n;
  ll ans=0;

  for(i=1;i<=n;i++)
  {

   ll r=i-1;
   r=min(r,a[i]);
   ll r1=query(rt[r],1,n,i,n);
   ans+=r1;
   r=min(n,a[i]);
   rt[i]=++nw;
   update(rt[i],1,n,rt[i-1],1,r);
  }

  cout<<ans<<endl;


 }

 return 0;
}
