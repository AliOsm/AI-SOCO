#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>/
// #include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007LL
#define IN freopen("input.txt","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG printf("Hi\n")
#define INF 2000000000000000000LL
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2
#define SZ(z) ((int)z.size())

#define FastIO ios_base::sync_with_stdio(false); cin.tie(NULL)


// using namespace __gnu_pbds;
using namespace std ;

// typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define maxn 10005

pair<int,int> e[maxn] ;
int vis[maxn] ;
set<int> st[maxn] ;
vector <int> ans ;

void dfs(int u)
{
    while(  st[u].size() )
    {
        int id = *st[u].begin() ;
        st[u].erase( st[u].begin() ) ;
        int v = (e[id].xx^e[id].yy^u) ;
        st[v].erase( st[v].find(id) ) ;
        dfs( v ) ;
        ans.pb(id) ;
    }
    return ;
}

void dfs1(int u,int comp)
{
    vis[u] = comp ;
    for(auto id: st[u])
    {
        int v = (e[id].xx^e[id].yy^u) ;
        if(!vis[v]) dfs1(v,comp) ;
    }
    return ;
}

int res[maxn] ;

void printVector(vector <int>v)
{
    printf("-----\n") ;
    for(int i=0 ; i<v.size() ; i++) printf("%d ",v[i]) ;
    printf("\n----\n") ;
}

int main()
{
    IN ;
    OUT ;
    int m , n = 10000 ;

    scanf("%d",&m) ;

    for(int i=1 ; i<=m ; i++)
    {
        int u , v ;
        scanf("%d %d",&u,&v) ;
        if( u > v ) swap(u,v) ;
        st[u].insert(i) ;
        st[v].insert(i) ;
        e[i] = mp(u,v) ;
    }

    set<int> oddComps ;
    int comp = 0 ;

    for(int i=1;  i<=n ; i++)
    {
        if( vis[i] || st[i].size() == 0 ) continue ;
        ++comp ;
        dfs1(i,comp) ;
    //    printf("%d\n",vis[i]) ;
    }

    int odd = 0 ;

    for(int i=1;  i<=n  ; i++)
    {
        odd += (int)st[i].size()%2 ;
        if( (int)st[i].size()%2 ) oddComps.insert( vis[i] ) ;
    }

  //  printf("%d %d %d\n",comp,odd,m) ;

    if( comp > 2 || odd > 4 || m < 2 || ((int)oddComps.size()==1 && comp==2 && odd==4 )  )
    {
        printf("-1\n") ;
        return 0 ;
    }

  //  DBG ;

    if(comp==1 && odd==4)
    {
        for(int i=1 ; i<=n ; i++)
        {
            if( st[i].size()%2 )
            {
                for(int j=i+1 ; j<=n ; j++)
                {
                    if( st[j].size()%2== 1 )
                    {
                        e[m+1] = mp(i,j) ;
                        st[i].insert(m+1) ;
                        st[j].insert(m+1) ;
                        break ;
                    }
                }
                break ;
            }
        }
    }

    vector <int> ans1 , ans2 ;

    for(int i=1 ; i<=n ; i++)
    {
        if( st[i].size()%2 )
        {
            ans.clear() ;
            dfs(i) ;
            ans1 = ans ;
            break ;
        }
    }

  //  return 0 ;

 //   printf("%d\n",ans1.size()) ;
   // DBG ;

    if(ans1.size()==0)
    {
        int start = 0 ;
        for(int i=1 ; i<=n; i++)
        {
            if( st[i].size() )
            {
                start = i ;
                break ;
            }
        }
        ans.clear() ;
        dfs(start) ;
        ans1 = ans ;
    }
//    DBG ;

  //  printVector(ans1);
  //  return 0 ;

    for(int i=1 ; i<=n ; i++)
    {
        if( st[i].size()%2 )
        {
   //         DBG ;
            ans.clear() ;
            dfs(i) ;
            ans2 = ans ;
            break ;
        }
    }

 //   printf("%d\n",ans2.size()) ;

    if(ans2.size()==0)
    {
        for(int i=1 ; i<=n ; i++)
        {
            if( st[i].size() )
            {
            //    cout<<"heee"<<endl ;
                ans.clear() ;
                dfs(i) ;
                ans2 = ans ;
                break ;
            }
        }
    }

    for(int i=0 ; i<ans1.size() ; i++)
    {
        if( ans1[i] > m )
        {
            while( ans1.back() <= m )
            {
                ans2.pb( ans1.back() ) ;
                ans1.pop_back() ;
            }
            ans1.pop_back() ;
        }
    }

    if( ans1.size() + ans2.size() != m )
    {
        printf("-1\n") ;
        return 0 ;
    }

    if( ans2.size() == 0 )
    {
        ans2.pb(ans1.back()) ;
        ans1.pop_back() ;
    }
    printf("%d\n",ans1.size()) ;
    for(int i=0 ; i<ans1.size() ; i++) printf("%d ",ans1[i]) ;
    printf("\n") ;

    printf("%d\n",ans2.size()) ;
    for(int i=0 ; i<ans2.size() ; i++) printf("%d ",ans2[i]) ;
    printf("\n") ;

    for(int i=0 ; i<ans1.size() ; i++) res[ ans1[i] ] = 1 ;
    for(int i=0 ; i<ans2.size() ; i++) res[ ans2[i] ] = 2 ;

  //  return 0 ;

//    for(int i=1 ; i<=m ; i++) printf("%d\n",res[i]) ;

    return 0 ;
}
