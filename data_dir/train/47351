#include<bits/stdc++.h>

using namespace std;

const int maxi=1e5+5;
long long sum;
int p,n,x,y;
int a[maxi],pred[maxi],ob[maxi],t[maxi],s[maxi];
vector<int> v[maxi];

void dfs(int x,int y,int p)
{
    ob[x]=1;
    pred[x]=y;
    if (a[x]&p) s[x]=1;
    t[x]=1;
    for (int i=0;i<v[x].size();i++)
        if (!ob[v[x][i]])
        {
            dfs(v[x][i],x,p);
            t[x]+=t[v[x][i]];
            if (a[x]&p) s[x]+=t[v[x][i]]-s[v[x][i]]; else
                s[x]+=s[v[x][i]];
        }
        return;
}

int main()
{
    scanf("%d",&n);

    for (int i=1;i<=n;i++)
        scanf("%d",&a[i]);

    for (int i=1;i<n;i++)
    {
        scanf("%d%d",&x,&y);
        v[x].push_back(y);
        v[y].push_back(x);
    }

        
     for (int i=0;i<20;i++)
     {
         p=1<<i;
         for (int j=1;j<=n;j++)
            {
                s[j]=0;
                t[j]=0;
                ob[j]=0;
                pred[j]=0;
            }
         dfs(1,0,p);
         long long tot=0;
         for (int i=1;i<=n;i++)
        {
            tot+=2*s[i];
           long long jed=s[i];
           long long nu=t[i]-s[i];
           long long onu=0;
           long long ojed=0;
         for (int j=0;j<v[i].size();j++)
            if (v[i][j]!=pred[i])
          {
              long long jed1=s[v[i][j]];
              long long nu1=t[v[i][j]]-jed1;
             if (a[i]&p)
             {
                 ojed=jed-nu1-1;
                 onu=nu-jed1;
             }
             else
             {
               ojed=jed-jed1;
               onu=nu-nu1-1;
             }
             tot+=jed1*onu+ojed*nu1;
          }
        }
        tot=tot/2;
        sum+=1ll*p*tot;
     }
 printf("%lld\n",sum);
    return 0;
}
