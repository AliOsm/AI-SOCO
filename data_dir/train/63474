#pragma comment(linker, "/STACK:640000000")

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>
#include <bitset>
 
using namespace std;
 
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define forr(i, l, r) for(int i = int(l); i <= int(r); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define y1 __y1
#define sqr(x) ((x) * (x))
 
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
 
const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const int MOD = INF + 7;
const ld eps = 1e-9;
const ld pi = ld(3.1415926535897932384626433832795);
 
inline bool in(int i, int j, int n, int m) {
    return i >= 1 && i <= n && j >= 1 && j <= m;
}
 
inline int myrand() {
    return (rand() ^ (rand() << 15));
}
 
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
 
const int N = 2e5 + 555;
const int L = 1000;

struct Query {
    int l, r, id;
    Query() {}
    Query(int ll, int rr, int idd) {
        l = ll, r = rr, id = idd;
    }

    bool operator <(const Query &a) {
        return r < a.r;
    }
};

int n, m, a[N];
vector<Query> q[N / L + 1];

inline void gen() {
    return;
}

inline bool read() {
    if(scanf("%d %d", &n, &m) != 2) return false;
    forn1(i, n) assert(scanf("%d", &a[i]) == 1);

    forn1(i, m) {
        int l, r;
        assert(scanf("%d %d", &l, &r) == 2);
        int idxB = l / L + 1;
        if(l % L == 0) idxB--;
        q[idxB].pb(Query(l, r, i));
    }
    return true;
}

int ans[N];

#include <unordered_map>

inline void solve() {
    forn(i, N / L + 1) sort(all(q[i]));
    forn(k, N / L + 1) {
        if(q[k].empty()) continue;
        //cerr << "!" << endl;
        int l = q[k][0].l, r = q[k][0].r;
        //cerr << "l r == " << l << ' ' << r << endl;
        unordered_map<int, int> cnt;
        forr(i, l, r) cnt[a[i]]++;
        
        int sum = 0;
        for(unordered_map<int, int>::iterator it = cnt.begin(); it != cnt.end(); it++) sum += it->x == it->y;
        ans[q[k][0].id] = sum;
        //cerr << "sum == " << sum << endl;
        for(int i = 1; i < sz(q[k]); i++) {
            int nl = q[k][i].l, nr = q[k][i].r;
            while(l > nl) {
                l--;
                cnt[a[l]]++;
                sum += cnt[a[l]] == a[l];
                sum -= cnt[a[l]] - 1 == a[l];
            }

            while(l < nl) {
                cnt[a[l]]--;
                sum += cnt[a[l]] == a[l];
                sum -= cnt[a[l]] + 1 == a[l];
                l++;
            }

            while(r < nr) {
                r++;
                cnt[a[r]]++;
                sum += cnt[a[r]] == a[r];
                sum -= cnt[a[r]] - 1 == a[r];
            }

            while(r > nr) {
                cnt[a[r]]--;
                sum += cnt[a[r]] == a[r];
                sum -= cnt[a[r]] + 1 == a[r];
                r--;
            }

            ans[q[k][i].id] = sum;
        }
    }

    forn1(i, m) printf("%d\n", ans[i]);
    return;
}
 
int main() {
#ifdef _DEBUG
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
 
    cout << setprecision(10) << fixed;
    cerr << setprecision(10) << fixed;
 
    srand(int(time(NULL)));

    int T = 1;
    //assert(scanf("%d", &T) == 1);

    forn(i, T) {
        //cerr << "TEST == " << i + 1 << endl;
        assert(read());
        solve();
    }
 
#ifdef _DEBUG
    cerr << "TIME == " << clock() << " ms" << endl;
#endif
    return 0;
}