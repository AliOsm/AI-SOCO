#include<bits/stdc++.h>
using namespace std;

#define fi first
#define se second
#define pb push_back
#define all(x) x.begin(), x.end()
#define sz(x) (int)x.size()
#define endl '\n'

typedef long long ll;
typedef long double f80;
typedef pair<int,int> pii;

const int mod = 998244353;
int pwr(int a,int b) {
    int ans = 1;
    while(b) {
        if(b & 1) ans = (ans * 1LL * a) % mod;
        a = (a * 1LL * a) % mod;
        b >>= 1;
    }
    return ans;
}

vector<int> comp;
const int N = 205;
int l[N], r[N];
int nl[N], nr[N];
int dp[N][N];

ll iv[N];

int lol[N][N];

int main() {
    ios :: sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin >> n;
    for(int i = 1; i <= n; i++) {
        iv[i] = pwr(i, mod - 2);
        cin >> l[i] >> r[i];
        comp.pb(l[i]);
        comp.pb(r[i]);
    }
    sort(all(comp));
    comp.resize(unique(all(comp)) - comp.begin());
    nl[0] = 0, nr[0] = 0;
    dp[0][0] = 1;
    int tot = sz(comp);
    int cc = 0;
    for(int i = 0; i < tot; i++) {
        nl[++cc] = comp[i];
        nr[cc] = comp[i];
        if(i + 1 < tot && comp[i] + 1 <= comp[i + 1] - 1) {
            nl[++cc] = comp[i] + 1;
            nr[cc] = comp[i + 1] - 1;
        }
    }
    tot = cc;
    reverse(nl + 1, nl + tot + 1);
    reverse(nr + 1, nr + tot + 1);
    for(int i = 1; i <= tot; i++) {
        int nn = nr[i] - nl[i] + 1;
        int val = 1;
        lol[i][0] = 1;
        for(int k = 1; k <= n; k++) {
            val = (val * 1LL * (nn + k - 1)) % mod;
            val = (val * 1LL * iv[k]) % mod;
            lol[i][k] = val;
        }
    }
    for(int j = 0; j < tot; j++) {
        for(int i = 0; i <= n; i++) {
            if(!dp[j][i]) continue;
            for(int c = 0; i + c <= n; c++) {
                if(c == 0 || (c > 0 && l[i + c] <= nl[j + 1] && nr[j + 1] <= r[i + c])) {
                    int val = (dp[j][i] * 1LL * lol[j + 1][c]) % mod;
                    dp[j + 1][i + c] += val;
                    if(dp[j + 1][i + c] >= mod) dp[j + 1][i + c] -= mod;
                }
                else {
                    break;
                }
            }
        }
    }
    ll ans = dp[tot][n];
    for(int i = 1; i <= n; i++) {
        ans = (ans * 1LL * pwr(r[i] - l[i] + 1, mod - 2)) % mod;
    }
    cout << ans;
    return 0;
}