#include <iostream>
#include <string>

using namespace std;

string s[1000];
bool vis[1000][1000][4][3];
int n, m, finish_x, finish_y;
const int dx[4] = {1, -1, 0, 0};
const int dy[4] = {0, 0, 1, -1};

void dfs(int x, int y, int dir, int turn) {
	if (vis[x][y][dir][turn]) {
		return;
	}
	vis[x][y][dir][turn] = true;
	if (x == finish_x && y == finish_y) {
		return;
	}
	for (int nxt_dir = 0; nxt_dir < 4; nxt_dir++) {
		int nxt_turn = turn;
		if (dir != nxt_dir) {
			nxt_turn++;
			if (nxt_turn == 3) {
				continue;
			}
		}
		int nx = x + dx[nxt_dir];
		int ny = y + dy[nxt_dir];
		if (0 <= nx && nx < n && 0 <= ny && ny < m && s[nx][ny] == '.') {
			dfs(nx, ny, nxt_dir, nxt_turn);
		}
	}
}

int main() {
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		cin >> s[i];
	}
	int start_x, start_y;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (s[i][j] == 'S') {
				start_x = i;
				start_y = j;
				s[i][j] = '.';
			} else if (s[i][j] == 'T') {
				finish_x = i;
				finish_y = j;
				s[i][j] = '.';
			}
		}
	}
	for (int i = 0; i < 4; i++) {
		dfs(start_x, start_y, i, 0);
	}
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 3; j++) {
			if (vis[finish_x][finish_y][i][j]) {
				cout << "YES" << endl;
				return 0;
			}
		}
	}
	cout << "NO" << endl;
	return 0;
}