#define ll long long
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<cmath>
#include<bitset>
#include<cstring>

using namespace std;

int a[100001];

int main ()
{
//    freopen("a.in","r",stdin);
    bool de=false,in=false,increasing=true,decreasing=true,updown=false,downup=false,ok=true,peakfind=false,deepfind=false;
    long n,peak=-1,last,deep=-1,up=0,down=0,i;
    cin>>n>>a[0];
    last=a[0];
    for(i=1;i<n;i++)
    {
        cin>>a[i];
        if(a[i]<last)
        {
            increasing=false;
        }
        if(a[i]>last)
        {
            decreasing=false;
        }
        last=a[i];
    }
    if(!increasing and !decreasing)
    {

    if(a[1]>a[0])
    {
        in=true;
        updown=true;
    }
    else
    {
        downup=true;
        de=true;
    }
    for(i=2;i<n;i++)
    {
        if(downup)
        {
            if(de and a[i]>a[i-1] and !deepfind)
            {
                deepfind=true;
                deep=i-1;
                de=false;
                in=true;
            }
            if(in and a[i]<a[i-1])
            {
                ok=false;
                break;
            }
        }
        if(updown)
        {
            if(in and a[i]<a[i-1])
            {
                peakfind=true;
                peak=i-1;
                in=false;
                de=true;
                up++;
            }
            if(de and a[i]>a[i-1])
            {
                deepfind=true;
                deep=i-1;
                de=false;
                in=false;
                down++;
            }
        }
        if(up>1 or down>1)
        {
            ok=false;
            break;
        }
    }

    if(!ok)
    {
        cout<<"no";
        return 0;
    }
    else
    {
        if(downup and !peakfind)
        {
            peak=n-1;
        }
        if(updown and !deepfind )
        {
            deep=n-1;
        }
        if((updown and deepfind and (a[peak]>a[deep+1]))or ((updown and !deepfind and (a[peak-1]>a[n-1])))  or(updown and a[deep]<a[peak-1] )or (downup and (a[0]>a[deep+1])))
        {
            cout<<"no";
        }
        else if(downup)
        {
            cout<<"yes\n1 "<<deep+1;

        }
        else if(updown)
        {
            cout<<"yes\n"<<peak+1<<" "<<deep+1;
        }
    }

    }
    else
    {
        if(increasing)
        cout<<"yes\n1 1";
        else
        {
            cout<<"yes\n1 "<<n;

        }
    }

}

