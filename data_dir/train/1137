#include <bits/stdc++.h>
using namespace std;

int drum[10][10];
int comp[10];

vector <int> adia[10];
vector <int> in_nod[10];
int grad[10];
bool viz[10];
int nrcomp = 0;

vector <vector <vector <char>>> ans;
vector <vector <char>> sablon, btw;

void sortop(int nod)
{
	viz[nod] = 1;

	/// linia nod trb sa fie complet occupata, coloana nod contine goluri pe adiacenta
	sablon = vector <vector <char>>(5 * nrcomp, vector <char>(5 * nrcomp, '#'));
	btw = vector <vector <char>>(5 * nrcomp, vector <char>(5 * nrcomp, '.'));

	for (int i = 1; i <= nrcomp; i++) {
		for (int j = 1; j <= nrcomp; j++) {
			if (i != nod) {
				sablon[-1 + 5 * i - 2][-1 + 5 * j - 2] = '.';
				btw[-1 + 5 * i - 1][-1 + 5 * j - 2] = '#';
				btw[-1 + 5 * i - 3][-1 + 5 * j - 2] = '#';
				btw[-1 + 5 * i - 2][-1 + 5 * j - 1] = '#';
				btw[-1 + 5 * i - 2][-1 + 5 * j - 3] = '#';
			}
		}
	}

	for (auto i : adia[nod])
		btw[-1 + 5 * i - 2][-1 + 5 * nod - 1] = '.';
	
	for (int i = 0; i < in_nod[nod].size(); i++)
		btw[i][0] = in_nod[nod][i] + '0';

	ans.push_back(btw);
	ans.push_back(sablon);

	for (auto i : adia[nod]) {
		grad[i]--;
		if (!grad[i])
			sortop(i);
	}
}

int main()
{
	int n;
	cin >> n;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			cin >> drum[i][j];

	for (int c = 1; c <= n; c++)
		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= n; j++)
				drum[i][j] |= (drum[i][c] & drum[c][j]);

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j < i; j++)
			if (drum[i][j] && drum[j][i])
				comp[i] = comp[j];
		if (!comp[i])
			comp[i] = ++nrcomp;
		in_nod[comp[i]].push_back(i);
	}

	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			if (j != i && drum[i][j] && !drum[j][i])
				adia[comp[i]].push_back(comp[j]);

	for (int i = 1; i <= nrcomp; i++) {
		sort(adia[i].begin(), adia[i].end());
		adia[i].resize(unique(adia[i].begin(), adia[i].end()) - adia[i].begin());
		for (auto j : adia[i])
			grad[j]++;
	}

	nrcomp = max(nrcomp, 3);

	for (int i = 1; i <= nrcomp; i++)
		if (grad[i] == 0 && !viz[i])
			sortop(i);

	cout << ans[0][0].size() << ' ' << ans[0].size() << ' ' << ans.size() << '\n';

	for (auto i : ans) {
		for (auto j : i) {
			for (auto k : j)
				cout << k;
			cout << '\n';
		}
		cout << '\n';
	}

	return 0;
}