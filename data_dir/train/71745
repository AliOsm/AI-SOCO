/*
Nahid Hossain
Jahangirnagar University
Roll:54
*/
#include<bits/stdc++.h>
#define ll          long long int
#define db          double
#define pf          printf
#define sf          scanf
#define ff          first
#define ss          second
#define clr         clear()
#define sz          size()
#define pb          push_back
#define mk          make_pair
#define pi          acos(-1)
#define inf         100000000000
#define mod         1000000007
#define ull         unsigned long long int
#define f(i,k,n)    for(ll i=k;i<n;i++)
#define fr(i,n,k)   for(i=n;i>=k;i--)
#define ent(a)      scanf("%lld",&a)
#define ent2(a,b)   scanf("%lld%lld",&a,&b)
#define ent3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define mem(a)      memset(a,0,sizeof(a))
#define vec(v,s)    vector<ll>v[s]
#define arr(a,s)    ll a[s];
#define bitone(x)   __builtin_popcount(x)
//#define check(n,pos) (n&(1<<pos))
//#define set(n,pos)  (n|(1<<pos))
//knight and king//

//for(i=x;i>0;i=(i-1)&x)
//31-__builtin_clz(rt-lt+1)
int dr[]= {2, 2, -2, -2, 1, -1, 1, -1};
int dc[]= {1,-1,  1, -1, 2,  2,-2, -2};
int dr1[]= {0, 0, 1, 1, 1, -1, -1, -1};
int dc1[]= {-1, 1,-1, 0, 1, -1, 0,   1};
int dr2[]= {0, 0, 1, -1};
int dc2[]= {1,-1, 0,  0};
////////////////////////////
#define ma 100005
using namespace std;

vector<ll>adj[ma];
ll a[ma],lev[ma],st[ma],en[ma],tim,no[ma];
struct data
{
    vector<ll>v,v1;
};

data tree[ma*3];

void dfs(ll u,ll par)
{
    ll i,j;
    st[u]=++tim;
    no[tim]=u;
    for(i=0;i<adj[u].sz;i++)
    {
        ll p=adj[u][i];
        if(p==par)continue;
        lev[p]=lev[u]+1;
        dfs(p,u);
    }
    en[u]=tim;
}

void build(ll n,ll b,ll e)
{
    if(b==e)
    {
        tree[n].v.pb(no[b]);
        tree[n].v1.pb(a[no[b]]);
        return;
    }
    ll mid=(b+e)>>1,l=n*2,r=l+1;
    build(l,b,mid);
    build(r,mid+1,e);
    ll i=0,j=0;
    while(i<tree[l].v.sz&&j<tree[r].v.sz)
    {
        ll x=tree[l].v[i];
        ll y=tree[r].v[j];
        if(lev[x]<=lev[y])
        {
            tree[n].v.pb(x);
            i++;
        }
        else
        {
            tree[n].v.pb(y);
            j++;
        }
    }
    for(;i<tree[l].v.sz;i++)tree[n].v.pb(tree[l].v[i]);
    for(;j<tree[r].v.sz;j++)tree[n].v.pb(tree[r].v[j]);
    ll min1=inf;
    for(i=0;i<tree[n].v.sz;i++)
    {
        ll x=tree[n].v[i];
        min1=min(min1,a[x]);
        tree[n].v1.pb(min1);
    }
}

ll query(ll n,ll b,ll e,ll x,ll y,ll k)
{
    if(b>y||e<x)return inf;
    if(b>=x&&e<=y)
    {
        ll lo=0,hi=tree[n].v.sz-1,mid,ans=inf;
        while(lo<=hi)
        {
            mid=(lo+hi)>>1;
            ll x=tree[n].v[mid];
            if(lev[x]<=k)
            {
                ans=tree[n].v1[mid];
                lo=mid+1;
            }
            else hi=mid-1;
        }
        return ans;
    }
    ll mid=(b+e)>>1,l=n*2,r=l+1;
    ll p=query(l,b,mid,x,y,k);
    ll p1=query(r,mid+1,e,x,y,k);
    return min(p,p1);
}

int main()
{
    ll n,m,i,j,r;
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    while(cin>>n>>r)
    {
        for(i=1;i<=n;i++)cin>>a[i];
        for(i=1;i<n;i++)
        {
            ll u,v;
            cin>>u>>v;
            adj[u].pb(v);
            adj[v].pb(u);
        }
        dfs(r,-1);
        build(1,1,n);
        ll que;
        cin>>que;

        ll ans=0;

        while(que--)
        {
            ll p,q;
            cin>>p>>q;
            ll x=(p+ans)%n+1;
            ll k=(q+ans)%n;
            ans=query(1,1,n,st[x],en[x],lev[x]+k);
            cout<<ans<<endl;
        }
    }
    return 0;
}
