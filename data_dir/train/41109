#include <bits/stdc++.h>

using namespace std;

#define long long long
#define INF (long) 1e18
#define MOD ((long) 1e9 + 7)
#define mll map<long, long>
#define pll pair<long, long>
#define umap unordered_map
#define uset unordered_set
#define pb push_back
#define pf push_front
#define FOR(i, a, b) \
  for (long i = a; i < (long) b; i++)
#define SORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr < b.atr; });
#define UNSORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr > b.atr; });
#define PRINTV(v) \
  FOR (_i, 0, v.size()) \
    printf("%lld ", v[_i]); \
  printf("\n");

vector<long> gera_primos(long n)
{
  vector<long> primos;
  vector<bool> crivo(n);
  primos.pb(2);
  for (long i = 3; i <= n; i += 2) {
    if (crivo[i]) continue;
    primos.pb(i);
    for (long j = i; j <= n; j += i) {
      crivo[j] = true;
    }
  }
  return primos;
}

struct Node
{
  long id;
  bool visitado = false;
  long val;
  set<long> out, in;

  Node() {
    static long i = 0;
    id = i++;
  }
};

int main()
{
  //ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

  long n, a, b;
  cin >> n >> a >> b;

  vector<pll> d;
  FOR (i, 0, n) {
    long x, y;
    cin >> x >> y;
    d.pb({x, y});
    d.pb({y, x});
  }
  long maximo = 0;
  FOR (i, 0, 2*n) {
    if (d[i].first > a or d[i].second > b) continue;
    FOR (j, i+1 + (i % 2 == 0), 2*n) {
      long area = 0;
      long x0, y0, x1, y1;
      x0 = d[i].first + 1;
      y0 = 1;
      if (x0 <= a) {
        x1 = x0 + d[j].first - 1;
        y1 = y0 + d[j].second - 1;
        if (x1 <= a and y1 <= b) {
          area += d[j].first * d[j].second;
          goto end;
        }
      }
      x0 = 1;
      y0 = d[i].second + 1;
      if (y0 <= b) {
        x1 = x0 + d[j].first - 1;
        y1 = y0 + d[j].second - 1;
        if (x1 <= a and y1 <= b) {
          area += d[j].first * d[j].second;
        }
      }
    end:
      if (area > 0) {
        area += d[i].first * d[i].second;
        maximo = max(area, maximo);
      }
    }
  }
  printf("%lld\n", maximo);
}
