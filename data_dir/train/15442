#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int sz = 1e6 + 10;
const int inf = 1e6;

string a, b, c;
int failure[105];
int dp[105][105][105];

int rec( int i, int j, int l ) {
    if( l == c.size() ) return -inf;
    if( i == a.size() || j == b.size() ) return 0;
    int &ret = dp[i][j][l];
    if( ~ret ) return ret;
    ret = -inf;
    ret = max( ret, rec( i + 1, j, l ) );
    ret = max( ret, rec( i, j + 1, l ) );
    while( l > 0 && a[i] != c[l] ) l = failure[l - 1];
    if( a[i] == b[j] ) ret = max( ret, 1 + rec( i + 1, j + 1, l + ( a[i] == c[l] ) ) );
    return ret;
}

int print( int i, int j, int l ) {
    if( l == c.size() ) return 0;
    if( i == a.size() || j == b.size() ) return 0;
    int ret = dp[i][j][l];
    if( ret ==  rec( i + 1, j, l ) ) return print( i + 1, j, l );
    if( ret ==  rec( i, j + 1, l ) ) return print( i, j + 1, l );
    while( l > 0 && a[i] != c[l] ) l = failure[l - 1];
    if( a[i] == b[j] ) if( ret == 1 + rec( i + 1, j + 1, l + ( a[i] == c[l] ) ) ) {
        cout << a[i];
        print( i + 1, j + 1, l + ( a[i] == c[l] ) );
    }
    return 0;
}

void computeFailure() {
    failure[0] = 0;
    for( int i=1,k=0; i<c.size(); i++ ) {
        while( k > 0 && c[i] != c[k] ) k = failure[k - 1];
        if( c[i] == c[k] ) k++;
        failure[i] = k;
    }
}

int main() {
    #ifdef CLown1331
        freopen( "in.txt","r",stdin );
    #endif /// CLown1331
    while( cin >> a >> b >> c ) {
        computeFailure();
        memset( dp, -1, sizeof dp );
        if( rec( 0, 0, 0 ) <= 0 ) {
            cout << "0\n";
        }
        else {
            cerr << rec( 0, 0, 0 ) << "\n";
            print( 0, 0, 0 );
            cout << "\n";
        }
        cerr << "----\n";
    }
    return 0;
}