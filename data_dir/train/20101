#include <algorithm>
#include <iostream>
#include <iomanip>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 5050;
const int LIM = 2e8 + 10;

int a[N];
map<int, int> dp;

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    int n = read();
    int k = read();

    dp[0] = 0;
    for(int i = 1; i <= n; i++){
        a[i] = read();
        int x = 0;
        for(int c = 1; c <= k; c++){
            x += a[i];
            if(x > LIM)
                break;
            if(!dp.count(x) || dp[x] > c)
                dp[x] = c;
        }
    }

    int q = read();
    while(q--){
        int x = read();
        int ans = k + 1;
        for(int i = 1; i <= n; i++){
            int v = 0;
            for(int c = 1; c <= k; c++){
                v += a[i];
                if(v > x)
                    break;
                if(dp.count(x - v))
                    umin(ans, dp[x - v] + c);
            }
        }
        printf("%d\n", (ans <= k)? ans : -1);
    }

    return 0;
}
