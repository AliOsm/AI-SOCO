#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007LL
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<i64, i64> pii;

#define maxn 200005

int tr[4*maxn] ;

int par[maxn] ;

int findPar( int u )
{
    if( par[u]==u ) return u ;
    return par[u] = findPar( par[u] ) ;
}

void Merge( int u, int v )
{
    int pu = findPar(u) , pv = findPar( v ) ;
    if( pu == pv ) return ;
    par[pu] = pv ;
    return ;
}

void update(int cn, int b, int e ,int l, int r)
{
    if( tr[cn]==1 ) return ;
    if( e<l || b>r ) return ;
    if( l<=b && e<=r )
    {
        for(int i=b ; i<e ; i++) Merge( i , i+1 ) ;
        tr[cn] = 1 ;
        return ;
    }
    int lc = cn*2 , rc = cn*2+1 , m = (b+e)/2 ;

    update(lc,b,m,l,r) ; update(rc,m+1,e,l,r) ;

    if( l<=m && r>=m+1 )
    {
        Merge(m,m+1) ;
        if( tr[lc]&&tr[rc] )
        {
            tr[cn] = 1 ;
        }
    }
    return ;
}

int main()
{
    int n , q ;

    scanf("%d %d",&n,&q) ;

    for(int i=1 ; i<=n ; i++) par[i] = i ;

    for(int i=1 ;i<=q ; i++)
    {
        int type , u , v ;
        scanf("%d %d %d",&type,&u,&v) ;
        if( type==3 )
        {
            if( findPar(u) == findPar(v) ) printf("YES\n") ;
            else printf("NO\n") ;
        }
        else if( type==1 ) Merge(u,v) ;
        else update(1,1,n,u,v) ;
    }

    return 0 ;
}
