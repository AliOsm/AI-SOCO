#include <bits/stdc++.h>

using namespace std;

map <int, int> cnt;
map <int, int> cnt2;
vector < pair <int, int> > a;
map < pair <int, int>, int> pos;
map <int, pair <int, int> > tt;

const int maxn = 3e5;
int id[maxn];
int f[maxn + 5];

bool cmp(int i, int j) {
    return (a[i].first > a[j].first || (a[i].first == a[j].first && a[i].second > a[j].second));
}

int fd(int pos) {
    int ret = maxn;
    for (; pos > 0; pos = (pos & (pos + 1)) - 1) {
        ret = min(ret, f[pos]);
    }
    return ret;
}

void upd(int pos, int val) {
    for (; pos <= maxn; pos |= (pos + 1))
        f[pos] = min(f[pos], val);
}

int main() {
    int n = 0;
    ios_base :: sync_with_stdio(0);
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        int x = 0;
        int y = 0;
        cin >> x >> y;
        cnt[y - x]++;
    }
    for (int i = 0; i < n; i++)
    {
        int w = 0;
        cin >> w;
        cnt2[w]++;
        if (cnt2[w] > cnt[w]) {
            cout << "NO";
            return 0;
        }
        if (w <= 0) {
            a.push_back({cnt2[w] - 1, cnt2[w] - 1 - w});
        } else {
            a.push_back({w - 1 + cnt2[w], cnt2[w] - 1});
        }
        a.back() = {a.back().second, a.back().first};
        pos[a.back()] = i + 1;
        tt[i] = a.back();
    }
    for (int i = 0; i < n; i++)
        id[i] = i;
    sort(id, id + n, cmp);
    for  (int i = 0; i < maxn + 3; i++)
        f[i] = maxn;
    for (int i = 0; i < n; i++)
    {
        int j = id[i];
        pair <int, int> tmp = a[j];
        int p = pos[tmp];
        int y = maxn - tmp.second;
        int g = fd(y);
        if (g < p) {
            cout << "NO";
            return 0;
        }
        upd(y, p);
    }
    cout << "YES\n";
    for  (int i = 0; i < n; i++)
    {
        pair <int, int> tmp = tt[i];
        cout << tmp.first << " " << tmp.second << "\n";
    }
    return 0;
}