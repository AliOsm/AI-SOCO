#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int N = 2e5 + 5;

int n, m;
int a[N], b[N], in_d[N], h[N];
char ans[N];
vector<int> v[N], t[N];

bool dfs(int x) {
  h[x] = 2;
  for(auto u : v[x]) {
    if(!h[u]) {
      if(dfs(u))
        return true;
    }
    else if(h[u] == 2) {
      return true;;
    }
  }
  h[x] = 1;
  return false;
}

int dpr[N], dpl[N];

int rg(int x) {
  int &r = dpr[x];
  if(r != -1) return r;
  r = x;
  for(auto u : v[x])
    r = min(r, rg(u));
  return r;
}

int lf(int x) {
  int &r = dpl[x];
  if(r != -1) return r;
  r = x;
  for(auto u : t[x])
    r = min(r, lf(u));
  return r;
}

int main() {
  scanf("%d %d", &n, &m);
  for(int i = 1; i <= m; i++) {
    int x, y;
    scanf("%d %d", &x, &y);
    v[x].push_back(y);
    t[y].push_back(x);
    in_d[y]++;
  }
  for(int i = 1; i <= n; i++) {
    if(!h[i]) {
      if(dfs(i)) {
        puts("-1");
        return 0;
      }
    }
  }
  memset(dpr, -1, sizeof(dpr));
  memset(dpl, -1, sizeof(dpl));
  int cnt = 0;
  for(int i = 1; i <= n; i++) {
    if(rg(i) >= i and lf(i) >= i) {
      ans[i] = 'A';
      cnt++;
    }
    else {
      ans[i] = 'E';
    }
  }
  printf("%d\n", cnt);
  for(int i = 1; i <= n; i++)
    putchar(ans[i]);
  puts("");
  return 0;
}
