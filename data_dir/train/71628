// Kono Giorno Giovanna wa yume ga aru

#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;

//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/rope>
//using namespace __gnu_pbds;
//using namespace __gnu_cxx;
//
//template<class T> using Tree = tree<T, null_type, less<T>, rb_t_tag,t_order_statistics_node_update>;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
	 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;
//const long long mod = 998244353;
mt19937 rng((int) chrono::steady_clock::now().time_since_epoch().count());

// watch this
using ll = long long;
//typedef long long LL;
//using uint = unsigned int;
#define ll long long
#undef ll
const int mxN = 100010;

long long pow_mod(long long base, long long power) {
	long long res = 1;
	while (power) {
		if (power & 1)
			res = res * base % mod;
		base = base * base % mod;
		power >>= 1;
	}
	return res;
}

int num[mxN];
bool sqf[mxN];

void seive() {
	num[0] = num[1] = 0;
	fill(sqf, sqf + mxN, true);
	sqf[0] = false;
	for (long long i = 2; i < mxN; i++) {
		if (!num[i]) {
			for (long long j = i; j < mxN; j += i) {
				num[j]++;
				if (j % (i * i) == 0)
					sqf[j] = false;
			}
		}
	}
}

int main(int argc, char** argv) {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
#endif

//	cout << (2 + 4 * pow_mod(3, mod - 2) - 1) % mod << '\n';
//	return 0;

	seive();

	long long M;
	cin >> M;
	if (M == 1) {
		cout << "1\n";
		return 0;
	}
	long long res = 1;
	for (long long i = 2; i <= M; i++)
		if (sqf[i]) {
			long long cur = M * pow_mod(M - (M / i), mod - 2) % mod;
			cur = (cur + mod - 1) % mod;
			if (num[i] & 1)
				res += cur;
			else
				res += mod - cur;
		}
	cout << res % mod << '\n';
	return 0;
}
