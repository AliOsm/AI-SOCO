//==================================
//==========   WARNING   ===========
//==================================
//===   Contains too many bugs   ===
//==================================

#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cmath>
#include <set>
#include <functional>
#include <queue>
#include <iomanip>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pr;
typedef pair<ll,ll> prl;

#define double long double

const ll mod7 = 1000000007;

#define NAME "string"

int n;
int sz[201];
int gr[201][201];

int cnt;
pr edge[201];

int blocked;

bool used[300];

int csz;
int comp[201];

void dfs(int v)
{
    used[v] = true;
    for(int i=0;i<sz[v];++i)
    {
        int num = gr[v][i];
        if(num!=blocked)
        {
            int go = v==edge[num].first?edge[num].second:edge[num].first;
            if(!used[go])
                dfs(go);
        }
    }
    comp[csz] = v;
    ++csz;
}

int bfs(int v)
{
    for(int i=0;i<=n;++i)
        used[i] = false;
    int cur = 0;
    queue< pr > q;
    used[v] = true;
    q.push(make_pair(v,0));
    
    while(!q.empty())
    {
        pr top = q.front(); q.pop();
        int v = top.first;
        int d = top.second;
        cur = max(cur,d);
        for(int i=0;i<sz[v];++i)
        {
            int num = gr[v][i];
            if(num!=blocked)
            {
                int go = v==edge[num].first?edge[num].second:edge[num].first;
                if(!used[go])
                {
                    used[go] = true;
                    q.push(make_pair(go,d+1));
                }
            }
        }
    }
    return cur;
}

int main()
{
    //freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    //freopen(NAME".in","r",stdin); freopen(NAME".out","w",stdout);
    scanf("%d",&n);

    for(int i=0;i<n-1;++i)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        gr[a][sz[a]] = gr[b][sz[b]] = cnt;
        edge[cnt] = make_pair(a,b);
        ++cnt;
        ++sz[a];
        ++sz[b];
    }
    int ans = 0;
    for(;blocked<cnt;++blocked)
    {
        csz = 0;
        for(int temp=0;temp<=n;++temp)
            used[temp] = false;
        dfs(edge[blocked].first);
        
        int fmax = 0;
        for(int i=0;i<csz;++i)
            fmax = max(fmax,bfs(comp[i]));

        csz = 0;
        for(int temp=0;temp<=n;++temp)
            used[temp] = false;
        dfs(edge[blocked].second);
        
        int smax = 0;
        for(int i=0;i<csz;++i)
            smax = max(smax,bfs(comp[i]));
        ans = max(ans,smax*fmax);
    }
    printf("%d",ans);
    return 0;
}