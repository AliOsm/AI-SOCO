#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define int long long
#define ull  unsigned long long
#define pb push_back

using namespace std;
using namespace __gnu_pbds;
typedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
const int N = 1000000;
int t[N];
set < int > s[N];
int a[N];
void build(int v, int tl, int tr){
    if (tl == tr){
        t[v] = 1;
        return;
    }
    int mid = (tl + tr) / 2;
    build(v + v, tl, mid);
    build(v + v + 1, mid + 1, tr);
    t[v] = t[v + v] + t[v + v + 1];
}
int query(int v, int tl, int tr, int pos){
    if (tl == tr) return tl;
    int mid = (tl + tr) / 2;
    if (t[v + v] >= pos) return query(v + v, tl, mid, pos);
    pos -= t[v + v];
    return query(v + v + 1, mid + 1, tr, pos);
}
void update(int v, int tl, int tr, int pos){
    if (tl == tr){
        t[v] = 0;
        return;
    }
    int mid = (tl + tr) / 2;
    if (mid >= pos) update(v + v, tl, mid, pos); else
    update(v + v + 1, mid + 1, tr, pos);
    t[v] = t[v + v] + t[v + v + 1];
}
main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt","w", stdout);
    int n, m;
    cin >> n >> m;
    string ss;
    cin >> ss;
    for (int i = 1; i <= n; i++){
        a[i] = ss[i - 1];
        s[a[i]].insert(i);
    }
    build(1, 1, n);
    int k = n;
    while(m--){
        int l, r;
        char c;
        cin >> l >> r;
        cin >> c;
        int x = c;
        vector < int > d;
        l = query(1, 1, k, l);
        r = query(1, 1, k, r);
        auto it = s[x].lower_bound(l);
        for (auto i = it; i != s[x].end(); i++){
            if (*i > r) break;
            else d.pb(*i);
        }
        for (auto i: d){
            s[x].erase(i);
            n--;
            update(1, 1, k, i);
        }
    }
    for (int i = 1; i <= n; i++){
        int x = query(1, 1, k, i);
        char c = a[x];
        cout << c;
    }
}
