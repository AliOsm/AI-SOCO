                /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
const ll mod=1e9+7;         
const int N=1e5+4;

int main()
{
    int n,w;
    
    scn(n); scn(w);
    
    vector<pair<int,int>> v(n);
    
    int cap[n];
    
    rep(i,0,n)
    scn(v[i].F),cap[i]=v[i].F,v[i].S=i;
    
    sort(v.begin(),v.end());
    
    int sum=0;
    
    rep(i,0,n)
    {
        int here=(v[i].F+1)/2;
        
        sum+=here;
        
        v[i].F=here;
    }
    
    if(sum>w)
    {
        pri(-1);
    }
    else
    {
        w-=sum;
        
        for(int i=n-1;i>=0;i--)
        {
            int left=cap[v[i].S]-v[i].F;
            
            int here=min(w,left);
            
            w-=here;
            
            v[i].F+=here;
        }
        
        int ans[n];
        
        rep(i,0,n)
        ans[v[i].S]=v[i].F;
        
        rep(i,0,n)
        printf("%d ",ans[i]);
    }
    
    return 0;
}