//PRZEMYSL ASSERTY

//SPRAWDZ CORNER CASE'Y, MINIMALNE I MAKSYMALNE WEJŚCIE I WYJŚCIE

//MODULO = 1

//while (clock()<=69*CLOCKS_PER_SEC)

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "

#define shandom_ruffle random_shuffle

const int nax=107;
const int inf=1e6;

int n, m;

int tab[nax][nax];

vector < pair <int,int> > wek;

void check()
{
	for (int i=1; i<=n; i++)
	{
		for (int j=1; j<=m; j++)
		{
			if (tab[i][j])
			{
				printf("-1\n");
				exit(0);
			}
		}
	}
}

int main()
{
	scanf("%d%d", &n, &m);
	for (int i=1; i<=n; i++)
		for (int j=1; j<=m; j++)
			scanf("%d", &tab[i][j]);
			
	int naj=inf;
	for (int i=1; i<=m; i++)
		naj=min(naj, tab[1][i]);
	
	for (int i=1; i<=m; i++)
	{
		while(tab[1][i]!=naj)
		{
			for (int j=1; j<=n; j++)
				tab[j][i]--;
			wek.push_back({0, i});
		}
	}
	naj=inf;
	for (int i=1; i<=n; i++)
		naj=min(naj, tab[i][1]);
	
	for (int i=1; i<=n; i++)
	{
		while(tab[i][1]!=naj)
		{
			for (int j=1; j<=m; j++)
				tab[i][j]--;
			wek.push_back({1, i});
		}
	}
	
	naj=tab[1][1];
	
	for (int i=1; i<=n; i++)
		for (int j=1; j<=m; j++)
			tab[i][j]-=naj;
	
	if (n<m)
	{
		for (int i=1; i<=n; i++)	
			for (int j=1; j<=naj; j++)
				wek.push_back({1, i});
	}
	else
	{
		for (int i=1; i<=m; i++)	
			for (int j=1; j<=naj; j++)
				wek.push_back({0, i});
	}
	
	check();
	printf("%d\n", (int)wek.size());
	for (auto i : wek)
	{
		if (i.first)
			printf("row ");
		else
			printf("col ");
		printf("%d\n", i.second);
	}
	
	return 0;
}
