#include<bits/stdc++.h>
using namespace std;
const int N = 5e5 + 10;
int n, q, ts, S[N], F[N], seg[N << 2], seg2[N << 2];
vector < int > Adj[N];
void DFS(int v, int p)
{
    S[v] = ts ++;
    for (auto X : Adj[v])
        if (X != p)
            DFS(X, v);
    F[v] = ts;
}
void Fill(int le, int ri, int nw, int id = 1, int l = 0, int r = ts)
{
    if (ri <= l || r <= le)
        return ;
    if (le <= l && r <= ri)
    {
        seg[id] = nw;
        return ;
    }
    Fill(le, ri, nw, id * 2, l, (l + r) >> 1);
    Fill(le, ri, nw, id * 2 + 1, (l + r) >> 1, r);
}
void Clear(int i, int nw, int id = 1, int l = 0, int r = ts)
{
    seg2[id] = nw;
    if (r - l == 1)
        return ;
    if (i < ((l + r) >> 1))
        Clear(i, nw, id * 2, l, (l + r) >> 1);
    else
        Clear(i, nw, id * 2 + 1, (l + r) >> 1, r);
}
int get(int i, int id = 1, int l = 0, int r = ts)
{
    if (r - l == 1)
        return (seg[id]);
    int ret;
    if (i < ((l + r) >> 1))
        ret = get(i, id * 2, l, (l + r) >> 1);
    else
        ret = get(i, id * 2 + 1, (l + r) >> 1, r);
    return (max(seg[id], ret));
}
int get2(int le, int ri, int id = 1, int l = 0, int r = ts)
{
    if (ri <= l || r <= le)
        return (0);
    if (le <= l && r <= ri)
        return (seg2[id]);
    return (max(get2(le, ri, id * 2, l, (l + r) >> 1), get2(le, ri, id * 2 + 1, (l + r) >> 1, r)));
}
int main()
{
    scanf("%d", &n);
    for (int i = 1, v, u; i < n; i++)
        scanf("%d%d", &v, &u), Adj[v].push_back(u), Adj[u].push_back(v);
    DFS(1, 0); scanf("%d", &q);
    for (int i = 1; i <= q; i++)
    {
        int tp, v;
        scanf("%d%d", &tp, &v);
        if (tp == 1)
            Fill(S[v], F[v], i);
        if (tp == 2)
            Clear(S[v], i);
        if (tp == 3)
            printf("%d\n", get(S[v]) > get2(S[v], F[v]));
    }
    return (0);
}
