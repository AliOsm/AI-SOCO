//In the name of Allah

#include <bits/stdc++.h>
using namespace std;

#define int ll

typedef long long ll;
typedef pair <int , int> pii;

const int N = 1e5+10;

int flag[4 * N] , mn[4 * N] , mx[4 * N];
ll sum[4 * N];

inline void upd(int ind , int s , int e , int val , int val2){
	flag[ind] += val;
	sum[ind] += 1ll * (e - s) * val;
	mn[ind] = mx[ind] = val2;
}

inline void relax(int ind , int s , int e){
	int x = flag[ind];
	if(mx[ind] != mn[ind])
		return;
	flag[ind] = 0;
	int mid = (s + e) / 2;
	upd(2 * ind , s , mid , x , mx[ind]);
	upd(2 * ind + 1 , mid , e , x , mx[ind]);
}

ll query(int s , int e , int ind , int l , int r){
	if(s >= r || e <= l)
		return 0;
	if(s >= l && e <= r)
		return sum[ind];
	relax(ind , s , e);
	int mid = (s + e) / 2;
	return query(s , mid , 2 * ind , l , r) + query(mid , e , 2 * ind + 1 , l , r);
}

void add(int s , int e , int ind , int l , int r , int val){
	if(s >= r || e <= l)
		return;
	if(s >= l && e <= r && mn[ind] == mx[ind]){
		flag[ind] += abs(mx[ind] - val);
		sum[ind] += 1ll * abs(mx[ind] - val) * (e - s);
		mn[ind] = mx[ind] = val;
		return;
	}
	relax(ind , s , e);
	int mid = (s + e) / 2;
	if(mid > l)
		add(s , mid , 2 * ind , l , r , val);
	if(mid < r)
		add(mid , e , 2 * ind + 1 , l , r , val);
	sum[ind] = sum[2 * ind] + sum[2 * ind + 1];
	mn[ind] = min(mn[2 * ind] , mn[2 * ind + 1]);
	mx[ind] = max(mx[2 * ind] , mx[2 * ind + 1]);
}

void build(int s , int e , int ind){
	if(e - s < 2){
		mx[ind] = mn[ind] = s + 1;
		return;
	}
	int mid = (s + e) / 2;
	build(s , mid , 2 * ind);
	build(mid , e , 2 * ind + 1);
	mn[ind] = mn[2 * ind];
	mx[ind] = mx[2 * ind + 1];
}

int32_t main(){
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	memset(mn , 63 , sizeof(mn));
	int n , m;
	cin >> n >> m;
	build(0 , n , 1);
	for(int i = 0 ; i < m ; i++){
		int tp;
		cin >> tp;
		if(tp == 1){
			int l , r , x;
			cin >> l >> r >> x;
			l--;
			add(0 , n , 1 , l , r , x);
		}
		else{
			int l , r;
			cin >> l >> r;
			l--;
			cout << query(0 , n , 1 , l , r) << "\n";
		}
	}
	return 0;
}

