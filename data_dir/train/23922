#include <cmath>
#include <vector>
#include <iostream>
#include <limits>
#include <iostream>
#include <vector>
#include <cassert>
#include <complex>
#include <cstring>
#include <map>
#include <cmath>
#include <set>
#include <algorithm>
#include <queue>

using namespace std;
typedef long long Long;

int V[210];
Long P[210][210];
int N, M;
#define INF 1000000000000000000LL
Long mem[102][102][102];
Long dp(int id,int pc, int k){
	if(id == N)return k == 0 ? 0 : INF;
	if(mem[id][pc][k] != -1)return mem[id][pc][k];
	if(V[id] == 0){
		// color
		Long w = INF;
		for(int i = 1; i <= M; ++i){
			int nk = k -  (i != pc);
			if(nk < 0)continue;
			w = min(w, dp(id+1, i , nk) + P[id][i-1]);
		}
		return mem[id][pc][k] = w;
	}else{
		Long w = INF;
		if(k > 0 || V[id] == pc){
			w = min(dp(id+1,V[id],k - (V[id] != pc)), w);
		}
		return mem[id][pc][k] = w;
		
	}
}

int main(){
	
	int K;
	cin >> N >> M >> K;
	for (int i = 0; i < N; ++i) {
		cin >> V[i];
	}
	for (int i = 0; i < N; ++i) {
		for(int j = 0; j < M; ++j)
			cin >> P[i][j];
	}
	memset(mem,-1,sizeof(mem));
	Long t = dp(0,0,K);
	if(t == INF){
		cout << -1 << endl;
	}else{
		cout << t << endl;
	}
	
	
	
	
}


/*

9 7
abcbabcba
1
2
3
4
6
7
8       

 */

