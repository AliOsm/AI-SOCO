#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 998244353LL
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 42
#define off 2
#define FastIO  ios_base::sync_with_stdio(false); cin.tie(NULL)


using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<i64, i64> pii;

#define INF 2000000000
#define maxn 2000005

int a[1005] ;

bool isPrime[5005] ;
vector < pair<int,int> > vp ;

void buildGraph(int n)
{
    priority_queue < pair<int,int> > pq ;
    for(int i=1 ; i<=n ; i++) pq.push( mp(a[i],i) ) ;

    for(int i=1 ; i<=n ; i++)
    {
        pair<int,int> p = pq.top() ;
        pq.pop() ;
        vector < pair<int,int> > v ;

        for(int j=1 ; j<=p.xx ; j++)
        {
            pair<int,int> p1 = pq.top() ;
            pq.pop() ;

            v.pb( mp( p1.xx-1 , p1.yy ) ) ;
            vp.pb( mp( p1.yy , p.yy ) ) ;

        }
        for(int i=0 ; i<v.size() ; i++) pq.push( v[i] ) ;
    }
}

vector <int> g[1005] ;

int main()
{

            for(int i=2 ; i<=5000 ; i++)
    {
        isPrime[i] = 1 ;
    }

    for(int i=2 ; i<=5000 ; i++)
    {
        if(isPrime[i]) for(int j=i+i ; j<=5000 ; j+=i) isPrime[j] = 0 ;
    }

    int n ;

    scanf("%d",&n) ;

    if( n==3 )
    {
        printf("3\n1 2\n2 3\n3 1\n") ;
        return 0 ;
    }

    if( n==4 )
    {
        printf("5\n1 2\n2 3\n3 4\n4 1\n1 3\n") ;
        return 0 ;
    }

    if( n==5 )
    {
        printf("5\n1 2\n2 3\n3 4\n4 5\n5 1\n") ;
        return 0 ;
    }

    int target ;

    for(int i=n ; ; i++)
    {
        if(isPrime[i])
        {
            target = 2*i ;
            break ;
        }
    }

    for(int i=1 ; i<=n ; i++)
    {
        a[i] = 2 ;
        target -= 2 ;
    }

    for(int i=1 ; i<=n ; i+=2)
    {
        if( target !=0 )
        {
            a[i]++ ;
            a[i+1]++ ;
            target-=2 ;
        }
    }

    for(int i=n ; i>=1 ; i--)
    {
        if( target!=0 )
        {
            a[i] += 2 ;
            target -= 2 ;
        }
    }

    vp.clear() ;
    for(int i=1 ; i<=n ; i++) g[i].clear() ;
    buildGraph(n) ;

    for(int i=0 ; i<vp.size() ; i++)
    {
        g[ vp[i].xx ].pb( vp[i].yy ) ;
        g[ vp[i].yy ].pb( vp[i].xx ) ;
    }

 //   for(int i=1 ; i<=n ; i++) printf("%d\n" ,g[i].size() ) ;
    int fl = 1 ;
    for(int i=1 ; i<=n ; i++)
    {
        if( isPrime[ g[i].size() ]==0 ) fl = 0;
    }

   // printf("%d: ",n) ;
   // if(fl) printf("YES\n") ;
   // else printf("NO\n") ;



    printf("%d\n" , vp.size() ) ;
    for(int i=0 ; i<vp.size() ; i++) printf("%d %d\n"  ,vp[i].xx,vp[i].yy ) ;

    return 0 ;
}
