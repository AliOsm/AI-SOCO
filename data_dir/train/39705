#include "bits/stdc++.h"

using namespace std;

using ll = long long;
using vll = vector<ll>;


vector<vector<long long>> adjlist;

long long dfs(long long d, long long cur, long long pref = -1) {
	if (d == 0) {
		return cur;
	} else {
		for (long long n : adjlist[cur]) {
			if (n != pref) {
				long long res = dfs(d - 1, n, cur);
				if (res >= 0) return res;
			}
		}
		return -1;
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	long long n, k;
	cin >> n >> k;
	if (n == 1) {
		cout << "No" << endl;
		return 0;
	}
	adjlist.assign(n, {});
	for (long long i = 1; i < n; i++) {
		long long a, b;
		cin >> a >> b;
		a--;
		b--;
		adjlist[a].push_back(b);
		adjlist[b].push_back(a);
	}
	vector<long long> level;
	vector<bool> seen(n);
	for (long long i = 0; i < n; i++) {
		if (adjlist[i].size() == 1) {
			level.push_back(i);
			seen[i] = true;
		}
	}
	for (long long i = 0; i < k && !level.empty(); i++) {
		vector<long long> nextLevel;
		for (long long j : level) {
			for (long long k : adjlist[j]) {
				if (!seen[k]) {
					seen[k] = true;
					nextLevel.push_back(k);
				}
			}
		}
		level = nextLevel;
	}
	if (level.size() != 1 || adjlist[level[0]].size() < 3) {
		cout << "No" << endl;
		return 0;
	}
	seen.assign(n, false);
	seen[level[0]] = true;
	level = adjlist[level[0]];
	for (long long i = 1; i < k; i++) {
		vector<long long> nextLevel;
		for (long long x : level) {
			seen[x] = true;
			if (adjlist[x].size() <= 3) {
				cout << "No" << endl;
				return 0;
			}
			for (long long n : adjlist[x]) {
				if (!seen[n]) {
					nextLevel.push_back(n);
				}
			}
		}
		level = nextLevel;
	}
	for (long long i : level) {
		if (adjlist[i].size() != 1) {
			cout << "No" << endl;
			return 0;
		}
	}
	cout << "Yes" << endl;
}