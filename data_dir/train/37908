#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cctype>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <complex>
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef long double ld;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef stringstream ss;

#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define clr(t, v) memset((t), (v), sizeof(t))
#define w(a) #a << ": " << (a) << "  "

#define rep(i, n) for (int i = 0, _##i = (n); i < _##i; ++i)
#define dwn(i, n) for (int i = (n); --i >= 0;)
#define repr(i, l, r) for (int i = (l), _##i = (r); i < _##i; ++i)
#define dwnr(i, l, r) for (int i = (r), _##i = (l); --i >= _##i;)
#define repi(i, a) for (__typeof((a).begin()) i = (a).begin(), _##i=(a).end(); i != _##i; ++i)
#define dwni(i, a) for (__typeof((a).rbegin()) i = (a).rbegin(), _##i=(a).rend(); i != _##i; ++i)

int par[48];
int getpar(int a) {
    return par[a] == a ? a : par[a] = getpar(par[a]);
}

vector<int> v[48];
int main() {// freopen("a.in", "r", stdin); freopen("a.out", "w", stdout);
    cout << fixed << setprecision(12);
    
    int n, m;
    cin >> n >> m;
    rep (i, n) {
        par[i] = i;
    }
    rep (i, m) {
        int a, b;
        cin >> a >> b;
        a--; b--;
        par[getpar(a)] = getpar(b);
    }
    rep (i, n) {
        v[getpar(i)].push_back(i + 1);
    }
    vector<int> rem;
    rep (i, n) {
        if (v[i].size() > 3) {
            cout << -1 << endl;
            return 0;
        } else if (v[i].size() == 1) {
            rem.push_back(v[i][0]);
        }
    }
    int c = 0;
    rep (i, n) {
        if (v[i].size() == 2) {
            c++;
        }
    }
    if (c > rem.size()) {
        cout << -1 << endl;
        return 0;
    }
    rep (i, n) {
        if (v[i].size() == 2) {
            cout << v[i][0] << ' ' << v[i][1] << ' ' << rem.back() << '\n';
            rem.pop_back();
        } else {
            if (v[i].size() == 3) {
                cout << v[i][0] << ' ' << v[i][1] << ' ' << v[i][2] << '\n';
            }
        }
    }
    while (rem.size()) {
        rep (i, 3) {
            if (i) cout << ' ';
            cout << rem.back();
            rem.pop_back();
        }
        cout << endl;
    }
}
