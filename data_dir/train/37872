#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_pop_bcount

#ifndef D
	#define dbg(x) 0
	#define dbgs(x) 0
#else
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#endif

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 1e5 + 5;

const int LOG = 18;

int n, suf[LOG][N], cur[N], t[N];

char a[N];

pii C[N];

ll ans;

vector < pii > v;

bool cmp(int x, int y) {

	return C[x] < C[y];

}

int lcp(int x, int y) {

	int ans = 0;

	ROF(i, LOG - 1, 0)
		if(suf[i][x] == suf[i][y])
		{
			x += 1 << i;
			y += 1 << i;

			ans += 1 << i;
		}

	return ans;

}

int main() {
	
	scanf("%s", a + 1);

	n = strlen(a + 1);

	FOR(i, 1, n)
		cur[i] = i;

	FOR(i, 1, n)
		suf[0][i] = a[i];

	FOR(i, 1, LOG - 1)
	{
		FOR(j, 1, n)
			if(j + (1 << i - 1) <= n)
				C[j] = mp(suf[i - 1][j], suf[i - 1][j + (1 << i - 1)]);
			else
				C[j] = mp(suf[i - 1][j], 0);

		sort(cur + 1, cur + n + 1, cmp);

		FOR(j, 1, n)
			suf[i][cur[j]] = suf[i][cur[j - 1]] + (C[cur[j]] != C[cur[j - 1]]);
	}

	FOR(i, 1, n - 1)
		t[i] = lcp(cur[i], cur[i + 1]);

	ans = (ll) n * (n + 1) / 2;

	FOR(i, 1, n)
	{
		if(v.empty() or t[i] > v.back().F)
		{
			v.pb(mp(t[i], i));

			continue;
		}

		pii cur;

		while(!v.empty() and t[i] <= v.back().F)
		{
			cur = v.back();

			v.pop_back();

			int mx = t[i];

			if(!v.empty())
				mx = max(mx, v.back().F);

			ans += (ll) (cur.F - mx) * (i - cur.S) * (i - cur.S + 1) / 2;
		}

		v.pb(mp(t[i], cur.S));
	}

	cout << ans << endl;

	return 0;

}
