#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int lps[105];
int dp[105][105][105];

int pos[105][256];

int n, m, k;
string a, b, c;

int f(int x, int y, int z) {
  auto& ans = dp[x][y][z];
  if (ans != -1) return ans;
  ans = 0;
  if (x == n || y == m || z == k) return 0;
  if (a[x] == b[y]) {
    auto chr = a[x];
    int v = pos[z][chr];
    if (v != k) {
      int u = 1 + f(x + 1, y + 1, v);
      ans = max(ans, u);
    }
  }
  int u = f(x + 1, y, z);
  int v = f(x, y + 1, z);
  ans = max(ans, u);
  ans = max(ans, v);
  return ans;
}

int main() {
  cin.tie(0);
  cin.sync_with_stdio(0);

  cin >> a >> b >> c;
  n = a.size();
  m = b.size();
  k = c.size();

  // kmp
  for (int i = 1, j = 0; i < k; ++i) {
    while (c[i] != c[j] && j) j = lps[j - 1];
    lps[i] = (j += (c[i] == c[j]));
  }

  for (int i = 0; i < k; ++i) {
    for (char chr = 'A'; chr <= 'Z'; ++chr) {
      int j = i;
      while (c[j] != chr && j) j = lps[j - 1];
      pos[i][chr] = j + (c[j] == chr);
    }
  }

  memset(dp, -1, sizeof dp);
  int len = f(0, 0, 0);
  string ans;
  ans.reserve(len);
  for (int x = 0, y = 0, z = 0; ans.size() < len;) {
    int val = dp[x][y][z];
    bool done = false;
    if (a[x] == b[y]) {
      auto chr = a[x];
      int v = pos[z][chr];
      if (dp[x + 1][y + 1][v] == val - 1) {
        ans.push_back(chr);
        x++, y++, z = v;
        done = true;
      }
    }

    if (done) continue;
    if (dp[x + 1][y][z] == val) {
      x++;
    } else {
      y++;
    }
  }
  if (len == 0) ans = "0";
  cout << ans;
}