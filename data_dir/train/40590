#include <bits/stdc++.h>
#define pb push_back
#define fst first
#define snd second
// #define dbg(...) fprintf(stderr, __VA_ARGS__)
#define dbg(...) ({})
using namespace std;

int n;
char ss[2005][25];
map<string, int> ma;
map<int, string> mb;
int used[2005], match[2005];
int sz;
vector<int> graph[2005];
bool bad[2005];
int a[2005];

string get(int x) {
	string ret = "";
	dbg("x: %d\n", x);
	if (x % 2) for (int i = 0; i < 3; i++) {
		if (i < 2) ret.pb(ss[x ^ 1][i]);
		else ret.pb(ss[x][0]);
	} else for (int i = 0; i < 3; i++) ret.pb(ss[x][i]);
	dbg("%s\n", ret.c_str());
	return ret;
}

bool solve(int u) {
	for (auto to : graph[u]) {
		if (used[to]) continue;
		used[to] = 1;
		if (match[to] == -1 || solve(match[to])) {
			match[to] = u;
			return true;
		}
	}
	return false;
}

int main() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> ss[i * 2] >> ss[i * 2 + 1];
		ma[get(i * 2)]++;
	}
	for (int i = 0; i < n * 2; i++) dbg("%s\n", ss[i]);
	for (int i = 0; i < n; i++) if (ma[get(i * 2)] > 1) bad[i] = true;
	for (int i = 0; i < n; i++) if (ma.count(get(i * 2)) && ma[get(i * 2)] > 1) ma.erase(get(i * 2));
	for (int i = 0; i < n; i++) ma[get(i * 2 + 1)];
	for (auto it = ma.begin(); it != ma.end(); it++) {
		ma[it->fst] = sz;
		mb[sz] = it->fst;
		sz++;
	}
	for (int i = 0; i < n; i++) {
		if (!bad[i]) graph[i].pb(ma[get(i * 2)]);
		graph[i].pb(ma[get(i * 2 + 1)]);
	}
	memset(match, -1, sizeof match);
	int ans = 0;
	for (int i = 0; i < n; i++) {
		memset(used, 0, sizeof used);
		ans += solve(i);
	}
	for (auto it = mb.begin(); it != mb.end(); it++) dbg("%s\n", mb[it->fst].c_str());
	if (ans == n) {
		cout << "YES" << endl;
		for (int i = 0; i < n * 2; i++) if (match[i] > -1) a[match[i]] = i;
		for (int i = 0; i < n; i++) dbg("%d ", a[i]);
		dbg("\n");
		for (int i = 0; i < n; i++) cout << mb[a[i]] << endl;
	} else {
		cout << "NO" << endl;
	}
	return 0;
}
