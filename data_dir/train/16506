#include <bits/stdc++.h>

using namespace std;

#define MAX 1<<18
int tree[4*MAX];
int lev[4*MAX];
int arr[MAX];

void init(int node, int b, int e)
{
    if(b == e){
        tree[node] = arr[b];
        lev[node] = 0;
        return;
    }
    int left = 2*node;
    int right = 2*node+1;
    int mid =(b+e)/2;
    init(left, b, mid);
    init(right, mid+1, e);
    lev[node] = lev[left] + 1;
    if(lev[node]%2 == 1){
        tree[node] = tree[left] | tree[right];
    }
    else {
        tree[node] = tree[left] ^ tree[right];
    }
}

void update(int node, int b, int e, int idx, int val)
{
    if(b == e && b == idx){
        tree[node] = val;
        return;
    }
    if(idx > e || idx < b) return;
    int left = 2*node;
    int right = 2*node+1;
    int mid = (b+e)/2;
    update(left, b, mid, idx, val);
    update(right, mid+1, e, idx, val);
    if(lev[node]%2 == 1){
        tree[node] = tree[left] | tree[right];
    }
    else {
        tree[node] = tree[left] ^ tree[right];
    }
}

int main()
{
    int n, m;
    scanf("%d %d", &n, &m);
    int tot = 1<<n;
    for(int i=1; i<=tot; i++) scanf("%d", &arr[i]);
    init(1, 1, tot);
    for(int i=0; i<m; i++){
        int idx, val;
        scanf("%d %d", &idx, &val);
        update(1, 1, tot, idx, val);
        cout << tree[1] << endl;
    }
}
