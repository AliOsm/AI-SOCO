#include <bits/stdc++.h>
#include <cctype>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::less<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef unsigned long long uint64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 300'000;
const int LOGN = 19;

int n, m, k;

int active[1000][1000];

void solve(int) {
  cin >> n >> m >> k;
  vector<string> a(n);
  for (auto& s : a) {
    cin >> s;
  }
  int dx[4] = {-1, 0, 1, 0};
  int dy[4] = {0, 1, 0, -1};
  queue<pair<int, int>> q;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      for (int c = 0; c < 4; ++c) {
        int x = i + dx[c];
        int y = j + dy[c];
        if (0 <= x && x < n && 0 <= y && y < m && a[i][j] == a[x][y]) {
          active[i][j] = 1;
          q.emplace(i, j);
          break;
        }
      }
    }
  }
  while (!q.empty()) {
    auto[x , y] = q.front();
    q.pop();
    for (int i = 0; i < 4; ++i) {
      int tx = x + dx[i];
      int ty = y + dy[i];
      if (0 <= tx && tx < n && 0 <= ty && ty < m && !active[tx][ty]) {
        active[tx][ty] = active[x][y] + 1;
        q.emplace(tx, ty);
      }
    }
  }
  for (int i = 0; i < k; ++i) {
    int x, y;
    int64 z;
    cin >> x >> y >> z;
    --x; --y;
    if (active[x][y] && active[x][y] <= z) {
      z -= active[x][y] - 1;
      cout << (char)(a[x][y] ^ (z & 1)) << '\n';
    } else {
      cout << a[x][y] << '\n';
    }
  }
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}


