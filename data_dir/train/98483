#include<bits/stdc++.h>
#define F first
#define S second
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<vii> vvii;
typedef vector<vvvi> vvvvi;


int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    vector<string> floors(n);
    for (int i = 0; i < n; ++i) cin >> floors[i];
    reverse(floors.begin(), floors.end());
    vi left(n, 500), right(n, -1);
    m += 2;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (floors[i][j] == '1') {
                left[i] = min(left[i], j);
                right[i] = max(right[i], j);
            }
        }
    }
    int ans = 1e9, mx = n-1;
    for (; mx >= 0; --mx) {
        if (right[mx] != -1) break;
    }
    for (int i = 0; i < (1<<(n-1)); ++i) {
        int last = 0, cur = 0;
        for (int j = 0; j <= mx; ++j) {
            if (last) {
                if (right[j] != -1) cur += m-left[j]-1;
                if ((1<<j) & i) {
                    last = 1;
                    if (right[j] != -1 && j <= mx-1) cur += m-left[j]-1;
                } else {
                    last = 0;
                    if (right[j] != -1 && j <= mx-1) cur += left[j];
                    else if (right[j] == -1 && j <= mx-1) cur += m-1;
                }
            } else {
                if (right[j] != -1) cur += right[j];
                if ((1<<j) & i) {
                    last = 1;
                    if (right[j] != -1 && j <= mx-1) cur +=  m-right[j]-1;
                    else if (right[j] == -1 && j <= mx-1) cur += m-1;
                } else {
                    last = 0;
                    if (right[j] != -1 && j <= mx-1) cur += right[j];
                }
            }
            if (j <= mx-1) cur++;
        }
        ans = min(ans, cur);
    }
    cout << ans << "\n";
    return 0;
}