#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()

typedef tree<pair<ll,ll> ,null_type,less<pair<ll,ll> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth smallest: " << *A.find_by_order(k-1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

const int MAXN = 300005;

vector<ll>adj[MAXN];
ll dp[MAXN], n, a[MAXN], val = -1e18, ans;
bool vis[MAXN];

void dfs1(ll node, ll parent)
{
	vis[node] = true;
	for(auto it:adj[node])
		if(!vis[it])
			dfs1(it, node);
	for(auto it:adj[node])
		if(it != parent)
			dp[node] += max(0ll, dp[it]);
	dp[node] += a[node];		
}

void dfs2(ll node, ll parent)
{
	vis[node] = true;
	for(auto it:adj[node])
		if(!vis[it])
			dfs2(it, node);
	for(auto it:adj[node])
		if(it != parent)
			dp[node] += max(0ll, dp[it]);
	dp[node] += a[node];	
	if(dp[node] == val)	
	{	
		ans++;
		dp[node] = 0;
	}	
}

int main()
{
	std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

   	cin >> n;
   	for(int i=0;i<n;i++) cin >> a[i];
   	for(int i=0;i<n-1;i++)
   	{
   		ll u, v;
   		cin >> u >> v;
   		adj[u-1].pb(v-1);
   		adj[v-1].pb(u-1);
   	}
   	dfs1(0, -1);
   	for(int i=0;i<n;i++) val = max(val, dp[i]);
   	memset(dp, 0, sizeof(dp));
   	memset(vis, false, sizeof(vis));
   	dfs2(0, -1);	
   	cout << val * ans << " " << ans << endl;
    return 0;
}  