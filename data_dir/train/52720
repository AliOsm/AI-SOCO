#include<bits/stdc++.h>
using namespace std;
typedef long long int uli;
typedef pair<uli,uli> pt;
const int mx=2e3+10;
uli x[mx],y[mx];
bool good[mx];
pt operator +(pt a,pt b){
  return {a.first+b.first,a.second+b.second};
}
uli operator *(pt a,pt b){
  return a.first*b.second-b.first*a.second;
}
uli gcd(uli a,uli b){ 
  if(b==0)return a;
  return gcd(b,a%b);
}
int main(){
  int n;
  cin>>n;
  uli sx=0,sy=0;
  for(int i=0;i<n;i++){
    cin>>x[i]>>y[i];
    sx+=x[i],sy+=y[i];
    x[i]*=n;
    y[i]*=n;
  }
  for(int i=0;i<n;i++){
    x[i]-=sx;
    y[i]-=sy;
    good[i]=true;
  }
  for(int i=0;i<n;i++){
    int at=-1;
    for(int j=0;j<n;j++)
      if(j!=i && x[j]==-x[i] && y[j]==-y[i] && good[j])
        at=j;
    if(at!=-1)
      good[i]=good[at]=false;    
  }
  vector<pt>p;
  for(int i=0;i<n;i++)
    if(good[i])
      p.push_back({x[i],y[i]});
  n=p.size();
  if(n<=1){
    puts("-1");
    return 0;
  }
  pt a=p[0];
  set<pair<uli,uli> >all;
  for(int i=0;i<n;i++){
    pt b=p[i];
    pt u=a+b;
    if(u.first==0 && u.second==0)continue;
    vector<pair<uli,int> >cross;
    for(int j=0;j<n;j++){
      uli c=u*p[j];
      uli sgn=1;
      if(c==0)sgn=0;
      else if(c>0)sgn=1;
      else sgn=-1;
      cross.push_back({c*sgn,sgn});
    }
    sort(cross.begin(),cross.end());
    bool ok=true;

    for(int j=0;j<n;){
      uli v=cross[j].first;
      int cnt=0;
      while(j<n && cross[j].first==v)cnt+=cross[j++].second;
      ok&=(cnt==0);
    }
    if(ok){
      uli dx=u.first,dy=u.second;
      uli g=gcd(dx,dy);
      dx/=g,dy/=g;
      if(dx<0)dx=-dx,dy=-dy;
      if(dy<0)dx=-dx,dy=-dy;
      all.insert({dx,dy});
    }
  }
  cout<<all.size()<<endl;
  return 0;
}
