#include<bits/stdc++.h>
using namespace std;

#define MAX 200002

int n;

vector<int> v[MAX];
vector<int> r[MAX];

#define MOD 1000000007

bool use[MAX];
bool flag[MAX];

vector<int> vv;

inline void dfs(int b){
	use[b] = true;
	for (int i = 0; i < v[b].size(); i++){
		if (use[v[b][i]]==false)dfs(v[b][i]);
	}
	vv.push_back(b);
}
vector<int> V;
inline void rdfs(int b){
	use[b] = false;
	for (int i = 0; i < r[b].size(); i++){
		if (use[r[b][i]])rdfs(r[b][i]);
	}
	V.push_back(b);
}
long long int l2[MAX];
int cnt = 0;
inline void dfs2(int b){
	use[b] = true;
	cnt++;
	for (int i = 0; i < v[b].size(); i++){
		if(use[v[b][i]]==false&&flag[v[b][i]])dfs2(v[b][i]);
	}
	for (int i = 0; i < r[b].size(); i++){
		if (use[r[b][i]]==false&&flag[r[b][i]]){
			dfs2(r[b][i]);
		}
	}
}
int cntt[MAX];

vector<int> VV[MAX];

int main(){
	l2[0] = 1;
	for (int i = 1; i < MAX; i++){
		l2[i] = l2[i - 1];
		l2[i] *= 2LL;
		l2[i] %= MOD;
	}
	cin >> n;
	for (int i = 0; i < n; i++){
		int a;
		scanf("%d", &a);
		a--;
		flag[a] = true;
		v[i].push_back(a);
		r[a].push_back(i);
		VV[i].push_back(a);
		VV[a].push_back(i);
		cntt[a]++;
		cntt[i]++;
	}
	queue<int> q;
	for (int i = 0; i < n; i++){
		if (flag[i] == false){
			q.push(i);
		}
	}
	while (!q.empty()){
		int b = q.front();
		q.pop();
		for (int i = 0; i < VV[b].size(); i++){
			cntt[VV[b][i]]--;
			if (flag[VV[b][i]] && cntt[VV[b][i]] == 1){
				q.push(VV[b][i]);
				flag[VV[b][i]] = false;
			}
		}
	}
	int ed = n;
	long long int way = 1;
	for (int i = 0; i < n; i++){
		if (use[i] == false && flag[i]){
			cnt = 0;
			dfs2(i);
			if (cnt > 1){
				way *= ((l2[cnt] + MOD - 2) % MOD);
				ed -= cnt;
			}
			way %= MOD;
		}
	}
	way *= l2[ed];
	way %= MOD;
	printf("%lld\n", way);
	return 0;
}