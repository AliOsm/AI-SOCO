#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/************************************** MAIN PROGRAM ********************************************/

const int MAX = 501;
char grid[MAX][MAX];
bool marked[MAX][MAX];
int dR[] = {-1, 0, 0, +1};
int dC[] = {0, -1, 1, 0};
ll n, m, k;

void dfs(int r, int c)
{
    marked[r][c] = true;

    FOR(k, 0, 4)
    {
        int x = r + dR[k];
        int y = c + dC[k];

        if (!(x < n && x >= 0 && y < m && y >= 0)) continue;
        if (grid[x][y] == '#') continue;
        if (marked[x][y]) continue;

        dfs(x, y);
    }
    if (k > 0)
    {
        grid[r][c] = 'X';
        k--;
    }
}

int main()
{
   // freopen("input.txt", "r", stdin);
    SPEED

    cin >> n >> m >> k;
    FOR(i, 0, n)
    {
        cin >> grid[i];
    }
    FOR(r, 0, n)
    {
        FOR(c, 0, m)
        {
            if (marked[r][c]) continue;
            if (grid[r][c] == '#') continue;
            dfs(r, c);
        }
    }
    FOR(i, 0, n)
    {
        FOR(j, 0, m)
        {
            cout << grid[i][j];
        }
        cout << endl;
    }
}
/************************************** END OF PROGRAM ******************************************/
