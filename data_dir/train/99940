#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int MX = 200005;

struct {
	ll k, b;
	int L, R;
} lines[MX];
int cnt = 0;

int getLine(int x)
{
	int L = 0, R = cnt - 1;
	while (L <= R) {
		int M = (L + R) / 2;
		if (x < lines[M].L) {
			R = M - 1;
		}
		else if (x > lines[M].R) {
			L = M + 1;
		}
		else {
			return M;
		}
	}
}

ll Div(ll num, ll denom) {
	if (denom < 0) {
		num *= -1;
		denom *= -1;
	}
	
	if (num < 0) {
		return -(-num + denom - 1) / denom;
	}
	else {
		return num / denom;
	}
}

void addLine(ll k, ll b)
{
	if (cnt == 0) {
		lines[0].k = k;
		lines[0].b = b;
		lines[0].L = -2000000000;
		lines[0].R = 2000000000;
		cnt = 1;
		return;
	}
	
	ll x;
	while ((x = Div(lines[cnt - 1].b - b, k - lines[cnt - 1].k)) < lines[cnt - 1].L)  {
		cnt--;
	}
	lines[cnt - 1].R = x;
	
	lines[cnt].L = x + 1;
	lines[cnt].R = 2000000000;
	lines[cnt].k = k;
	lines[cnt].b = b;
	cnt++;
}

int a[MX];
long long S[MX];

int main()
{
	int n;
	ignore = scanf("%d", &n);
	
	for (int i = 1; i <= n; i++) {
		ignore = scanf("%d", a + i);
		S[i] = S[i - 1] + a[i];
	}
	
	ll ans = 0;
	
	for (int i = 1; i <= n; i++) {
		if (i > 1) {
			long long tmp1 = -i * 1LL * a[i] + S[i - 1];
			int id = getLine(a[i]);
			ans = max(ans, tmp1 + lines[id].k * 1LL * a[i] + lines[id].b);
		}
		addLine(i, -S[i - 1]);
	}
	
	cnt = 0;
	
	for (int i = n; i >= 1; i--) {
		if (i < n) {
			long long tmp1 = -i * 1LL * a[i] + S[i];
			int id = getLine(-a[i]);
			ans = max(ans, tmp1 + lines[id].k * 1LL * -a[i] + lines[id].b);
		}
		addLine(-i, -S[i]);
	}
	
	
	for (int i = 1; i <= n; i++) {
		ans += a[i] * 1LL * i;
	}
	
	cout << ans;
}
