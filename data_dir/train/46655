#include <stdlib.h>
#include <stdio.h>
#include <vector>

#define pb push_back

using namespace std;

vector <int> graph[105];
vector <int> cycle_el;

int color[105], pr[105];

bool u[105];

void bye (){
   printf ("NO");
   exit (0);
}

void dfs (int v, int prev){
   pr[v] = prev;
   color[v] = 1;

   for (int i = 0; i < graph[v].size (); i ++){
      int to = graph[v][i];

      if (to == prev){
         continue;
      }

      if (color[to] == 0){
         dfs (to, v);
      }
      else if (color[to] == 1){
         int curr = v;

         if (!cycle_el.empty ()){
            bye ();
         }

         while (curr != to){
            cycle_el.pb (curr);
            curr = pr[curr];
         }

         cycle_el.pb (to);
      }

   }

   color[v] = 2;
}

int calc_edges (int v){
   int res = 0;
   u[v] = 1;

   for (int i = 0; i < graph[v].size (); i ++){
      int to = graph[v][i];

      if (!color[to] && !u[to]){
         res += calc_edges (to) + 1;
      }
   }

   return res;
}

int main (){
   int n, m;
   scanf ("%d %d", &n, &m);

   for (int i = 1, l, r; i <= m; i ++){
      scanf ("%d %d", &l, &r);

      graph[l].pb (r);
      graph[r].pb (l);
   }

   dfs (1, 0);

   for (int i = 1; i <= n; i ++){
      if (!color[i]){
         bye ();
      }
   }

   if (cycle_el.empty ()){
      bye ();
   }

   for (int i = 0; i < cycle_el.size (); i ++){
      color[cycle_el[i]] = 1;
   }

   for (int i = 0; i < cycle_el.size (); i ++){
      int a = calc_edges (cycle_el[i]);
      int b = 0;

      for (int j = 1; j <= n; j ++){
         b += u[j];
         u[j] = 0;
      }

      if (a + 1 != b){
         bye ();
      }

   }

   printf ("FHTAGN!");
   return 0;
}
