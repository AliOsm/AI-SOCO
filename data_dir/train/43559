#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES

#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>
#include <unordered_map>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;

const int INF = (int)(1e9+1e5);
const int64 LINF = (int64)(4e18);
const double EPS = 1e-10;
const int MOD = (int)1e9 + 7;
#define sq(x) ((x)*(x))
#define FAIL() ((*(int*)0)++)
#define y0 y00

const int MAXN = 14;

int n, k;
int bc[1 << MAXN];
int cnt[1 << MAXN];

void init()
{
	scanf ("%d%d", &n, &k);
	for (int i = 1; i <= n; i++)
	{
		int q; scanf ("%d", &q);
		cnt[q]++;
	}
}

void precalc()
{
	for (int mask = 0; mask < (1 << MAXN); mask++)
	{
		for (int i = 0; i < MAXN; i++)
		{
			if (mask & (1 << i))
			{
				bc[mask]++;
			}
		}
	}
}

void solve()
{
	precalc();
	init();
	int64 ans = 0LL;
	if (!k)
	{
		for (int mask = 0; mask < (1 << MAXN); mask++)
		{
			ans += (int64)cnt[mask] * (cnt[mask] - 1) / 2;
		}
		printf("%I64d\n", ans);
		return;
	}
	for (int mask1 = 0; mask1 < (1 << MAXN); mask1++)
	{
		for (int mask2 = mask1 + 1; mask2 < (1 << MAXN); mask2++)
		{
			if (bc[mask1 ^ mask2] == k)
			{
				ans += (int64)cnt[mask1] * cnt[mask2];
			}
		}
	}
	printf("%I64d\n", ans);
}

int main()
{
	//srand(time(0)); testgen(10, 5, 30);
    ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif
    double st = clock();
    int t = 1;
    //scanf ("%d", &t);
    for (int i = 0; i < t; i++)
    {
    	solve();
    }

    //fprintf(stderr, "%.3lf\n", (clock() - st) / CLOCKS_PER_SEC);
    return 0;
}
