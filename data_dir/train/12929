#include <bits/stdc++.h>
using namespace std;

const int N = 4e5 + 100, MOD = 1000 * 1000 * 1000 + 7;

int n, k, ans, l[N], r[N], fac[N], add[N];
vector<int> vec;

int sum(int a, int b) {
	a += b;
	if(a >= MOD)
		a -= MOD;
	return a;
}

int mul(int a, int b) {
	return 1LL * a * b % MOD;
}

int power(int a, int b) {
	int res = 1;
	while(b) {
		if(b & 1)
			res = mul(res, a);
		a = mul(a, a);
		b >>= 1;
	}
	return res;
}

int inv(int x) {
	return power(x, MOD - 2);
}

int choose(int n, int m) {
	if(n > m)
		return 0;
	return mul(fac[m], mul(inv(fac[n]), inv(fac[m - n])));
}

int dex(int x) {
	return lower_bound(vec.begin(), vec.end(), x) - vec.begin();
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	fac[0] = 1;
	for (int i = 1; i < N; i++)
		fac[i] = mul(fac[i - 1], i);
	cin >> n >> k;
	for (int i = 0; i < n; i++) {
		cin >> l[i] >> r[i];
		vec.push_back(l[i]);
		vec.push_back(++r[i]);
	}
	sort(vec.begin(), vec.end());
	vec.resize(unique(vec.begin(), vec.end())  - vec.begin());
	for (int i = 0; i < n; i++)
		add[dex(l[i])]++, add[dex(r[i])]--;
	for (int i = 0; i < vec.size() - 1; i++)
		ans = sum(ans, mul(vec[i + 1] - vec[i], choose(k, add[i] += (i? add[i - 1]: 0))));
	cout << ans;
	return 0;
}
