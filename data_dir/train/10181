//  Copyright Â© 2018 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 200005
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

struct nodo
{
    int l, r, id, ans;
};

int N, Q, ans;
int cub[MAX];
int a[MAX];
nodo q[MAX];

bool cmpid( nodo a , nodo b ) 
{
    return a.id < b.id;
}

bool cmpmo( nodo a , nodo b ) 
{
    int ra = a.l / sqrt( N );
    int rb = b.l / sqrt( N );
    if( ra != rb )
        return ra < rb;
    return a.r < b.r;
}

bool ok( int x )
{
    return cub[x] == x;
}

int main()
{
    optimiza_io
    cin >> N >> Q;
    for( int i = 1; i <= N; i ++ )
    {
        cin >> a[i];
        a[i] = min( a[i] , N+1 );
    }
    
    for( int i = 1; i <= Q; i ++ )
    {
        cin >> q[i].l >> q[i].r;
        q[i].id = i;
    }
    
    sort( q + 1 , q + Q + 1 , cmpmo );
    int l = 1, r = 0;
    for( int i = 1; i <= Q; i ++ )
    {
        while( r < q[i].r )
        {
            r++;
            if( ok( a[r] ) )
                ans--;
            cub[a[r]]++;
            if( ok( a[r] ) )
                ans++;
        }
        while( r > q[i].r )
        {
            if( ok( a[r] ) )
                ans--;
            cub[a[r]]--;
            if( ok( a[r] ) )
                ans++;
            r--;
        }
        while( l < q[i].l )
        {
            if( ok( a[l] ) )
                ans--;
            cub[a[l]]--;
            if( ok( a[l] ) )
                ans++;
            l++;
        }
        while( l > q[i].l )
        {
            l--;
            if( ok( a[l] ) )
                ans--;
            cub[a[l]]++;
            if( ok( a[l] ) )
                ans++;
        }
        q[i].ans = ans;
    }
    
    
    sort( q + 1 , q + Q + 1 , cmpid );
    for( int i = 1; i <= Q; i ++ )
        cout << q[i].ans << "\n";
    return 0;
}
