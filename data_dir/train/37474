#include <iostream>
#include <iomanip>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <map>
#include<unordered_map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include<bitset>
#include<deque>
#include<string>
#include<list>
#include<iterator>
#include<sstream>
#include <algorithm>
# include <math.h>
#define lli long long int
#define lower(a) transform(a.begin(),a.end(),a.begin(),::tolower);

using namespace std;

const int N = 3e5 + 500;
const long long mod = 1e9 + 7;
const long long cmod = 998244353 ;
const long long inf = 1LL << 61;
const int M = 1e6 + 500;
const lli ths = 1LL << 40;
const int NN = 5e3 + 6;

set<lli> graph[N];
lli ans = 0;

void solve()
{
    lli n, m;
    cin>>n>>m;
    for(int i = 1; i <= m; i ++) {
        lli u, v;
        cin>>u>>v;
        graph[u].insert(v);
        graph[v].insert(u);
    }
    set<lli> st;
    for(int i = 1; i <= n; i ++)
        st.insert(i);
    ans = 0;
    for(int i = 1; i <= n; i ++) {
        if(graph[i].size() == 0) {
            cout<<"0\n";
            return ;
        }
        else if(st.find(i) != st.end()) {
            queue<lli> q;
            q.push(i);
            ans ++;
            st.erase(i);
            while(!q.empty()) {
                lli u = q.front();
                q.pop();
                for(auto it = st.begin(); it != st.end();) {
                    lli v = *it;
                    if(graph[u].find(v) != graph[u].end()) {
                        it ++;
                        continue ;
                    }
                    q.push(v);
                    it ++;
                    st.erase(v);
                }
            }
        }
    }
    cout<<ans - 1;
    cout<<'\n';
    return ;
}

/*
*/

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t;
    t = 1;
//    cin>>t;
    while(t --)
    {
        solve();
    }
    return 0;
}
