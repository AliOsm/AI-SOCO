#include <iostream>

#include <map>
#include <set>

using namespace std;

#define SZ(a) int((a).size())

#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)

struct P {
   int elem, cnt;
   P(int _cnt=0, int _elem=0) : elem(_elem), cnt(_cnt) {}
   bool operator<(const P& p) const {
      if (cnt != p.cnt) return cnt < p.cnt;
      return elem > p.elem;
   }
};

int N, K;
int A[100005];

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false);

   cin >> N >> K;
   FOR(i, 1, N)
      cin >> A[i];

   map<int,int> freq;
   FOR(k, 1, K)
      ++freq[ A[k] ];

   set<P> S;
   FOREACH(it, freq)
      S.insert( P(it->second, it->first) );
   if (S.begin()->cnt == 1)
      cout << S.begin()->elem << "\n";
   else
      cout << "Nothing\n";

   FOR(k, K+1, N) {
      int last = A[k-K];
      int cur = A[k];
      if (cur != last) {
         // erase A[k-K]
      // cerr << "Erase " << last << ' ' << freq[last] << ' ' << S.count( P( freq[last], last ) ) <<  endl;
         S.erase( P( freq[last], last ) );
         if (--freq[last] > 0) {
         // cerr << "WTF\n";
            S.insert( P(freq[last], last) );
         }
         else
            freq.erase(last);

         // insert A[k]
      // cerr << "Insert " << cur << endl;
         if (freq.count(cur) > 0)
            S.erase( P(freq[cur], cur) );
         ++freq[cur];
         S.insert( P(freq[cur], cur) );
      // cerr << "** " << freq[cur] << endl;
      }
      if (S.begin()->cnt == 1)
         cout << S.begin()->elem << "\n";
      else
         cout << "Nothing\n";
/*
      FOREACH(it, S)
         cerr << ' ' << it->elem << ':' << it->cnt;
      cerr << endl;
*/
   }

   return 0;
}
