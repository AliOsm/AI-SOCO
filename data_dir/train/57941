#include <vector>
#include <list>
#include <map>
#include <string.h>
#include <cstring>
#include <math.h>
#include <cmath>
#include <set>
#include <queue>
#include <deque>
#include <string>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string.h>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <unordered_map>

using namespace std;

#define ll  long long
#define ld long double
map<int, int>Graph;
map<int, int>freq;
vector<int>Connected_Components;
bool visited[1000];
inline int gcd(int x, int y)
{
	return (y == 0)? x : gcd(y, x%y);
}
inline int lcm(int x, int y)
{
	return x*y / gcd(x, y);
}
void dfs(int node, int Size, int initial_dude)
{
	visited[node] = true;
	if (node == initial_dude && Size)
	{
		//Size++;
		if (Size%2==1)
			Connected_Components.push_back(Size);
		else
			Connected_Components.push_back(Size/2);

		return;
	}
	dfs(Graph[node], Size + 1, initial_dude);
}
int main()
{
	ios::sync_with_stdio(false);
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr), cout.tie(nullptr);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	int n, temp;
	//cout << gcd(2, 6) << " " << gcd(3, 5) << " " << gcd(5, 8) << " " << gcd(100, 50) << endl;
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		cin >> temp;
		Graph[i] = temp;
		freq[temp]++;
		if (freq[temp] > 1)
		{
			cout << -1 << endl;
			return 0;
		}
	}
	for (int i = 1; i <= n; i++)
		if (visited[i] == false)
			dfs(i, 0, i);
	ll answer = 1;
	for (int i = 0; i < Connected_Components.size(); i++)
		answer = lcm(answer, Connected_Components[i]);

	cout << answer << endl;
	return 0;
}