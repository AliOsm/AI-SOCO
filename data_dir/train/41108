		//	   - -- --- ---- -----be name khoda----- ---- --- -- -		\\

#include <bits/stdc++.h>
using namespace std;

inline int in() { int x; scanf("%d", &x); return x; }
const int N = 404;

int n, dp[N][N], x[N], l[N], p[N];
vector <int> xs;

bool cmp(int i, int j) { return x[i] < x[j]; }

int main()
{
	cin >> n;
	for(int i = 1; i <= n; i++)
	{
		cin >> x[i] >> l[i];
		p[i] = i;
		xs.push_back(x[i]);
		xs.push_back(x[i] + l[i]);
		xs.push_back(x[i] - l[i]);
	}
	sort(xs.begin(), xs.end());
	sort(p + 1, p + n + 1, cmp);
	xs.resize(unique(xs.begin(), xs.end()) - xs.begin());
	int m = xs.size();
	for(int _i = 1; _i <= n; _i++)
		for(int r = 1; r < m; r++)
		{
			int i = p[_i], R = r, L = x[i] - l[i];
			int Li = lower_bound(xs.begin(), xs.end(), L) - xs.begin();
			dp[_i][r] = dp[_i - 1][min(Li, r)] + min(x[i], xs[r]) - min(xs[r], L);
			for(int _j = _i; _j; _j--)
			{
				int j = p[_j];
				while(xs[R] > x[j])
					R--;
				if(x[j] + l[j] >= xs[r])
					dp[_i][r] = max(dp[_i][r], dp[_j - 1][R] + xs[r] - xs[R]);
				while(xs[R] > x[j] - l[j])
					R--;
			}
			dp[_i][r] = max(dp[_i][r], dp[_i][r - 1]);
		}
	cout << dp[n][m - 1] << endl;
}
