#include <iostream>
#include <iomanip>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <string>
#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <bitset>
#include <deque>
#include <map>
#include <queue>
#include <set>
#include <sstream>
using namespace std;

typedef long long ll;

const int N = 2e6 + 1;
int n, k, l[N], r[N], s[N], e[N];
vector<int> hs;
vector<pair<int, int> > sol;

int main(int argc, char **argv) {
//	freopen("in.txt", "r", stdin);
	scanf("%d%d", &n, &k);
	for (int i = 0; i < n; ++i) {
		scanf("%d%d", &l[i], &r[i]);
		hs.push_back(l[i]);
		hs.push_back(r[i]);
	}
	sort(hs.begin(), hs.end());
	hs.resize(unique(hs.begin(), hs.end()) - hs.begin());
	for (int i = 0; i < n; ++i) {
		int ss = lower_bound(hs.begin(), hs.end(), l[i]) - hs.begin();
		++s[ss];
		int ee = lower_bound(hs.begin(), hs.end(), r[i]) - hs.begin();
		++e[ee];
	}
	int from = -1, with = 0;
	for (int i = 0; i < hs.size(); ++i) {
		with += s[i];
		if (with >= k && from == -1)
			from = i;
		with -= e[i];
		if (with < k && from != -1) {
			sol.push_back(make_pair(hs[from], hs[i]));
			from = -1;
		}
	}
	printf("%d\n", (int)sol.size());
	for (int i = 0; i < sol.size(); ++i)
		printf("%d %d\n", sol[i].first, sol[i].second);
	return 0;
}