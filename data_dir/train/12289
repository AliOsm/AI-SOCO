#include<bits/stdc++.h>
using namespace std;

typedef long long int lli;
typedef pair<int,int> pii;
typedef vector<int> vec;

#define pb push_back
#define mp make_pair
#define mt make_tuple
#define scn(n) scanf("%d",&n)
#define scnll(n) scanf("%lld",&n)
#define scn2(n,m) scanf("%d%d",&n,&m)
#define scn3(n,m,w) scanf("%d%d%d",&n,&m,&w)
#define scn2ll(n,m) scanf("%lld%lld",&n,&m)
#define atoz(v) v.begin(),v.end()
#define Fill(a,v) memset(a,v,sizeof(a))
#define sz(v) v.size()
#define fi first
#define se second
#define inf 1e9
#define pi acos(-1.0)
#define sqr(x) x*x
#define max3(a,b,c) max(a,max(b,c))
#define min3(a,b,c) min(a,min(b,c))
#define N 55
map<char,char>tempu;
int n,m;
string s[N], gmap, dir = "LRUD";
vector<string>maps;


bool oka(int i, int j , string curr, int k){

    if(i<0 || i>=n || j<0 || j>=m)return false;

    if(s[i][j]=='#')return false;
    if(s[i][j]=='E')return true;

    if(k>= sz(gmap))return false;

    char bal = curr[ gmap[k]-'0' ];

    if(bal=='L') return oka(i,j-1,curr,k+1);
    else if(bal=='R') return oka(i,j+1,curr,k+1);
    else if(bal=='U') return oka(i-1,j,curr,k+1);
    else return oka(i+1,j,curr,k+1);

}

int main()
{
    ///freopen("debug.txt","w",stdout);
    scn2(n,m);
    int sx,sy,ex,ey;

    for(int i=0; i<n; i++)
    {
        cin>>s[i];

        for(int j=0; j<m; j++)
        {

            if(s[i][j]=='S')
            {
                sx=i;
                sy=j;
            }

        }
    }

    cin>>gmap;

    for(int i=0; i<4; i++)
    {
        string f="";
        f += dir[i];

        for(int j=0; j<4; j++)
        {
            if(i==j)continue;
            f += dir[j];

            for(int k=0; k<4; k++)
            {
                if(i==k || k==j)continue;
                f += dir[k];

                for(int l=0; l<4; l++){

                    if(l!=k && l!=i && l!=j){
                        f+=dir[l];
                        maps.pb(f);
                        f.pop_back();
                    }
                }
                f.pop_back();
            }
            f.pop_back();
        }
    }
    int cnt=0;
    for(auto xx : maps){
       // cout<<xx<<endl;
        cnt += oka(sx,sy,xx,0);
    }

    cout<<cnt;


    return 0;
}
