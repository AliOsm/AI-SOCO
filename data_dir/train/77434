#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>	
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound          	    
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcount                                                                                        
#define sqr(x) ((x) * (x))
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;                                  
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;
                                       
const double pi = acos(-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};										
const int dy[] = {0, 1, 0, -1, 0};  		
 
int n, m, k, x[N], p[N], used[N], K;
vector < pair <int, pii> > g;

int get (int v) {
	if (v == p[v]) return v;
	return p[v] = get (p[v]);
}

inline void unite (int a, int b, int c) {
	a = get (a), b = get (b);
	if (a == b) return;
	if (used[a]) p[b] = a;
	else p[a] = b;
	if (used[a] && used[b]) k --;
	if (k == 1) {
		for (int i = 1; i <= K; i ++) cout << c << ' ';
		exit (0);
	}
	                        
}

inline void boost () {
	ios_base :: sync_with_stdio (NULL);
	cin.tie (NULL), cout.tie (NULL);          
}

inline void Solve () {
	cin >> n >> m >> k;
	K = k;
	for (int i = 1; i <= n; i ++) p[i] = i;
	for (int i = 1; i <= k; i ++) cin >> x[i], used[x[i]] = 1;
	for (int i = 1; i <= m; i ++) {
		int a, b, cost;
		cin >> a >> b >> cost;
		g.pb ({cost, {a, b}});
	}
	sort (all (g));
	for (int i = 0; i < m; i ++) {
		unite (g[i].S.F, g[i].S.S, g[i].F);
	}
}                                          
                  
main () {                                       
//	freopen (".in", "r", stdin);    
//	freopen (".out", "w", stdout); 	          
	boost ();
	int tt = 1;
//	cin >> tt;   
	while (tt --) {
		Solve ();
	}                                               
	return 0;      
}         	                                                    