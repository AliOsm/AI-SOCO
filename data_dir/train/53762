#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef unsigned long long ull;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;

const int N = 200010;
const int MX = 123456;
const int mod = (int)1e9 + 7;
const int base = 1023456789;
const ull BS1 = 10000019ULL;
const int INF = (1 << 29);

template < class T > inline void fastScan(T &x) {
    register char c = getchar();
    int neg = 0; x = 0;
    for(   ; (c < 48 || c > 57) && (c != '-'); c = getchar());
    if(c == '-') { neg = 1; c = getchar(); }
    for(   ; c > 47 && c < 58; c = getchar()){
        x = (x << 1) + (x << 3) + c - 48;
    }
    if(neg) x = -x;
}

// OrderedSet
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// template < typename T > using ordered_set = tree < T, null_type, greater < T >, rb_tree_tag, tree_order_statistics_node_update >;

//typedef uint64_t hash_t;
//mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
//const int HASH_COUNT = 2;
//const hash_t HASH_P = (uint32_t)-13337;
//uniform_int_distribution<hash_t> MULT_DIST(0.25 * HASH_P, 0.75 * HASH_P);
//const hash_t HASH_MULT[HASH_COUNT] = {MULT_DIST(rng), MULT_DIST(rng)};

int n, q;

int arr[N];
int ans[N];
int tree[N * 4];

struct Data {
  int val, pos;
  bool operator < (const Data & other) const {
    if(val == other.val){
      return pos < other.pos;
    }
    return val > other.val;
  }
}inp[N];

struct Info {
  int k, pos, id;
  bool operator < (const Info & other) const {
    return k < other.k;
  };
}Q[N];

void modify(int x, int b, int e, int l, int r, int v){
  if(b > r || e < l) return ;
  if(b >= l && e <= r){
    tree[x] = v;
    return ;
  }
  int m = (b + e) >> 1;
  modify(x + x, b, m, l, r, v);
  modify(x + x + 1, m + 1, e, l, r, v);
  tree[x] = tree[x + x] + tree[x + x + 1];
}

int get(int x, int b, int e, int l, int r){
  if(b > r || e < l) return 0;
  if(b >= l && e <= r) return tree[x];
  int m = (b + e) >> 1;
  return get(x + x, b, m, l, r) + get(x + x + 1, m + 1, e, l, r);
}

int Solve(int low, int high, int v){
  int ret = 1;
  while(low <= high){
    int mid = (low + high) >> 1;
    if(get(1, 1, n, 1, mid) < v){
      low = mid + 1;
      ret = low;
    } else {
      high = mid - 1;
    }
  }
  return ret;
}

int main(){
  fastScan(n);
  for(int i = 1; i <= n; i++){
    fastScan(inp[i].val);
    inp[i].pos = i;
    arr[i] = inp[i].val;
  }
  sort(inp + 1, inp + n + 1);
  fastScan(q);
  for(int i = 1; i <= q; i++){
    fastScan(Q[i].k);
    fastScan(Q[i].pos);
    Q[i].id = i;
  }
  sort(Q + 1, Q + q + 1);
  for(int i = 1, j = 1; i <= n; i++){
    int mx_val = inp[i].val;
    int where = inp[i].pos;
    modify(1, 1, n, where, where, 1);
    //cout << " -> " << tree[1] << "\n";
    while(j <= q && Q[j].k == i){
      ans[Q[j].id] = Solve(1, n, Q[j].pos);
      j++;
    }
  }
  for(int i = 1; i <= q; i++){
    printf("%d\n", arr[ans[i]]);
  }
}
