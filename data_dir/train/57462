#include <algorithm>
#include <iostream>
#include <iomanip>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 2020;

int a[N];
int p[N];
bool used[N];

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    int n = read();
    int m = read();

    for(int i = 1; i <= n; i++)
        a[i] = read();

    vector<int> cur;
    for(int i = 1; i <= m; i++){
        p[i] = read();
        if(!used[p[i]])
            cur.push_back(p[i]);
        used[p[i]] = 1;
    }

    for(int i = 1; i <= n; i++)
        if(!used[i])
            cur.push_back(i);

    assert(cur.size() == n);

    int res = 0;
    for(int i = 1; i <= m; i++){
        for(int j = 0; j < n; j++){
            if(cur[j] == p[i]){
                for(int x = j - 1; x >= 0; x--)
                    cur[x + 1] = cur[x];
                cur[0] = p[i];
                break;
            }
            res += a[cur[j]];
        }
    }
    printf("%d\n", res);

    return 0;
}
