///** One Last Try ***///
#include<bits/stdc++.h>
using namespace std;
#define inf ( int )( 1e9 + 10 )
#define mxs (int)( 1e6 + 10 )
#define ll long long int
//#define md  int mid = ( l + r )>>1;
//int dx[]={+1,-1,+0,+0};///Four Directions
//int dy[]={+0,+0,+1,-1};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
int t, n, m, i, j, ans, k, a, b, c, d, e,f, sz, q,mx;
string s, s2, s3, s4, s5, s6;
int ar [ mxs ], ar2 [ mxs ] , cost [ mxs ];
vector < pair < int , int > > graph [ mxs] ;
vector < int > ::iterator it;
queue < int > qu;
bool visited [ mxs ];
void brainfuck();
int dfs( int source , int co )
{
    cost [ source ] = co;
    visited [ source ] = 1;
    int szz = graph [ source ].size();
    for ( int ii = 0 ; ii < szz; ii++ )
    {
        int bb = graph [ source ] [ ii ].first;
        if ( !visited [ bb ] )ar [ source ] = max( ar[ source ] , dfs( bb , co + graph [ source  ] [ ii ].second ) );
    }
    if ( source >= m )
    {
        mx = max( mx , cost [ source ] );
        ar [ source ] = cost [ source ];
        return cost [ source ];
    }
    return ar [ source ];
}
void dfs2 ( int source , int co )
{
    ans += ar [ source ] - co;
    //cout<<source<<"  "<<ar [ source ] <<"  need-> "<<co<<endl;
    visited [ source ] = 1;
    int szz = graph [ source ].size();
    for ( int ii = 0 ; ii < szz; ii++ )
    {
        int bb = graph [ source ] [ ii ].first;
        if ( !visited [ bb ] )
        {
            dfs2( bb , co + ar [ source ] - co );
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>n;
    m = n;
    n = 1;
    for ( i = 1 ; i <= m+1; i++ )n *= 2;
    n--;
    for ( i = 2 ; i <= n; i++ )cin>>ar [ i ];
    a = m;
    m = 1;
    for ( i = 1 ; i <= a; i++ )m *= 2;
    for ( i = 1 ; i < m; i++ )
    {
        graph [ i  ].push_back( { i * 2 , ar [ i * 2 ] } );
        graph [ i * 2 ].push_back( { i , ar [ i * 2 ] } );
        graph [ i * 2 + 1 ].push_back( { i , ar [ i * 2 + 1 ] } );
        graph [ i ].push_back( { i * 2 + 1 , ar [ i * 2 + 1 ] } );
    }
    memset( ar , 0 , sizeof ar );
    ar [ 0 ] = dfs( 1 , 0 );
    //cout<<ar [ 0 ]<<endl;
    for ( i = 1; i <= n; i++ )ar [ i ] = mx - ar [ i ] ;
    //for ( i = 1 ; i <= n ; i++ )cout<<i<<"  ->  "<<ar [ i ]<<endl;
    memset( visited , 0 , sizeof visited );
    dfs2( 1 , 0 );
    cout<<ans;
}
