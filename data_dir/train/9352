#include <bits/stdc++.h>
#define ll long long
#define F first
#define S second
#define Tree int &h,int l,int r
#define Left v[h][1],l,(l+r)/2
#define Right v[h][2],(l+r)/2+1,r
using namespace std;
const int N=2e5+5;
int n,q,Nodes=1,Root,L,R;
int p[N],len[N],ANS[N],v[N*63][4];
vector < pair < int , int > > Query[N];

void Shift(int h,int l,int r) {
	if (!v[h][3]) return ;
	v[h][0]=r-l+1;
	if (l!=r) {
		if (!v[h][1]) v[h][1]=++Nodes;
		if (!v[h][2]) v[h][2]=++Nodes;
		v[v[h][1]][3]=1,v[v[h][2]][3]=1;
	}
	v[h][3]=0;
}

ll Get(Tree) {
	if (!h) h=++Nodes;
	Shift(h,l,r);
	if (r<L || R<l) return 0;
	if (L<=l && r<=R) return v[h][0];
	return Get(Left)+Get(Right);
} 

void Upd(Tree) {
	if (!h) h=++Nodes;
	Shift(h,l,r);
	if (r<L || R<l) return ;	
	if (L<=l && r<=R) { v[h][3]=1; Shift(h,l,r); return ; }
	Upd(Left),Upd(Right);
	v[h][0]=v[v[h][1]][0]+v[v[h][2]][0];
}

main () {
	scanf("%d",&n);
	
	for (int i=1; i<=n; i++) 
		scanf("%d%d",&p[i],&len[i]);
		
	scanf("%d",&q);
	
	for (int i=1; i<=q; i++) {
		int l,r;
		scanf("%d%d",&l,&r);
		Query[l].push_back({r,i});
	}	
	
	for (int i=n; i>=1; i--) {
		L=p[i],R=p[i]+len[i]-1,Root=1;
		Upd(Root,1,p[n]);
		for (int j=0; j<Query[i].size(); j++) {
			L=p[i],R=p[Query[i][j].F],Root=1;
			ANS[Query[i][j].S]=R-L+1-Get(Root,1,p[n]);
		}
	}
	
	for (int i=1; i<=q; i++) 
		printf("%d\n",ANS[i]);
}