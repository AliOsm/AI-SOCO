#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cstring>

using namespace std;

const int MAXN = 2e5;
int coprocessor[MAXN];
int killed[MAXN];
int indeg[MAXN];
vector<int> to[MAXN];
int n;
queue<int> good_q;

int solve_coprocessor(queue<int> &Q) {

    int expanded = 0;
    while(!Q.empty()) {
        int u = Q.front();

        Q.pop();
        killed[u] = 1;

        if(coprocessor[u]) expanded++;

        for(int v: to[u]) {
            indeg[v]--;
            if(!indeg[v]) {
                if(coprocessor[v]) {
                    Q.push(v);
                } else {
                    good_q.push(v);
                }
            }
        }
    }
    return expanded;
}

int toposort() {

    int solved = 0;
    int used = 0;
    queue<int> can_send;
    for(int i = 0; i < n; i++) {
        if(!indeg[i]) {

            if(!coprocessor[i]) {
                killed[i] = 1;
                good_q.push(i);
            }else {
                can_send.push(i);
            }
        }
    }



    while(solved < n) {

        while(!good_q.empty()) {
            int u = good_q.front();
            good_q.pop();
            solved++;

            for(int v: to[u]) {
                indeg[v]--;

                if(!indeg[v]) {
                    if(!coprocessor[v]) {
                        killed[v] = 1;
                        good_q.push(v);
                    } else {
                        can_send.push(v);
                    }
                }
            }
        }

        // now we need to use this shit lol
        int processed = solve_coprocessor(can_send);
        if(processed > 0 ) used++;

        solved += processed;
//        cout << "EXPANDED OTHERS " << processed << endl;

    }

    return used;
}

int main() {

    string w; cin >> w;

    int ans = 0;

    set<char> bad;

    for(char a = '1'; a <= '9'; a += 2) bad.insert(a);

    bad.insert('a');
    bad.insert('e');
    bad.insert('i');
    bad.insert('o');
    bad.insert('u');

    for(int i = 0; i < w.size(); i++) {
        if(bad.count(w[i])) ans++;
    }

    cout << ans << endl;
}
