//#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
           
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
           
using namespace std;
using namespace __gnu_pbds;
           
//#define int long long
  
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
           
using matrix = vector<vector<ll>>;
template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
           
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
  
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("mincost.in", "r", stdin);
    //freopen("mincost.out", "w", stdout);
    #endif
}

const int INF = 1e9 + 7;
const int MAXN = 405;
int dp[MAXN][MAXN];

signed main() {
    FAST_IO();
    int t;
    cin >> t;
    while (t--) {
        string a, b;
        cin >> a >> b;
        int n = a.length(), m = b.length();
        int pos = 0;
        for (char c : b) {
            bool flag = false;
            for (int i = pos; i < n; ++i) {
                if (a[i] == c) {
                    flag = true;
                    pos = i + 1;
                    break;
                }
            }
            if (!flag) {
                pos = -1;
                break;
            }
        }
        if (pos != -1) {
            cout << "YES\n";
            continue;
        }
        bool flag = false;
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j <= n; ++j) {
                for (int k = i; k <= m; ++k) {
                    dp[j][k] = INF;
                }
            }
            dp[0][i] = i;
            for (int j = 1; j <= n; ++j) {
                for (int k = i; k <= m; ++k) {
                    if (dp[j - 1][k] == INF) {
                        continue;
                    }
                    dp[j][k] = min(dp[j][k], dp[j - 1][k]);
                    if (k != m && a[j - 1] == b[k]) {
                        dp[j][k + 1] = min(dp[j][k + 1], dp[j - 1][k]);
                    }
                    if (dp[j - 1][k] != 0 && a[j - 1] == b[i - dp[j - 1][k]]) {
                        dp[j][k] = min(dp[j][k], dp[j - 1][k] - 1);
                    }
                }
            }
            if (dp[n][m] == 0) {
                flag = true;
                break;
            }
        }
        cout << (flag ? "YES\n" : "NO\n");
    }
}  