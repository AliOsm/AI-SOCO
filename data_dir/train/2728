#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int N = 1e6 + 2;
int n, c, cum[N];
vector<vector<int> > g;

inline void update1(int a, int b) {
	++cum[0];
	--cum[c - b + 1];
	++cum[c - a + 1];
	--cum[c];
}

inline void update2(int a, int b) {
	++cum[c - b + 1];
	--cum[c - a + 1];
}

int main() {
//	freopen("in.txt", "r", stdin);
	scanf("%d%d", &n, &c);
	g.resize(n);
	for (int i = 0, m; i < n; ++i) {
		scanf("%d", &m);
		g[i].resize(m);
		for (int j = 0; j < m; ++j)
			scanf("%d", &g[i][j]);
	}
	bool ok = true;
	for (int i = 1; i < n; ++i) {
		bool need = true;
		for (int j = 0;; ++j) {
			if (j == (int) g[i - 1].size())
				break;
			if (j == (int) g[i].size()) {
				ok = false;
				break;
			}
			if (g[i][j] == g[i - 1][j])
				continue;
			if (g[i][j] > g[i - 1][j])
				update1(g[i - 1][j], g[i][j]);
			else
				update2(g[i][j], g[i - 1][j]);
			need = false;
			break;
		}
		if (!ok)
			break;
		if (need) {
			++cum[0];
			--cum[c];
		}
	}
	if (!ok)
		puts("-1");
	else {
		for (int i = 1; i <= c; ++i)
			cum[i] += cum[i - 1];
		int res = -1;
		for (int i = 0; i <= c; ++i)
			if (cum[i] == n - 1) {
				res = i;
				break;
			}
		printf("%d\n", res);
	}
	return 0;
}
