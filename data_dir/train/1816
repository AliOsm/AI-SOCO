#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <memory.h>
#include <string>
#include <set>
#include <cmath>
#include <cassert>
using namespace std;
#define oo 2000000000
#define mod 1000000007
const int N = 1000010;
vector< long long > v;
bool can[N]; 
long long cur, Max = (long long)1e18 + 10 , tmp , tmp2;
long long n;
long long ans;

inline int get(long long l, long long r) {
	if (r < l)
		return 0;
	return upper_bound(v.begin(), v.end(), r) - lower_bound(v.begin(), v.end(), l);
}

int main() { 
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
	for (int i = 2;i < N;i++) {
		if (!can[i]) {
			cur = (long long)i * i;
			while (cur <= Max) {
				v.push_back(cur);
				if (cur < N) {
					can[cur] = true;
				}
				if ((long double)cur * i > Max) break;
				cur *= i;
			}
		}
	}
	sort(v.begin(), v.end());
	int t;
	cin >> t;
	while (t--) {
		scanf("%lld", &n);
		tmp = sqrt(n);
		if ((long long)(tmp + 1) * (tmp + 1) <= n) tmp++;
		ans = n - get(2, n) - 1;
		if (tmp >= N) {
			tmp2 = tmp - N + 1 - get(N, tmp);
			ans -= tmp2;
		}
		printf("%lld\n", ans);
	}
	return 0;
}