/*input

*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define fi first
#define se second
#define mp make_pair
#define int long long
#define N
#define bit(x,y) ((x>>y)&1LL)
#define loop(x) for(int xv=1; xv<=x; xv++)

#define what_is(x) cerr << #x << " is " << x << endl;
#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cerr << *it << " = " << a << endl;
	err(++it, args...);
}
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &a) {
	return os << '(' << a.first << ", " << a.second << ')';
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a) {
	os << '[';
	for (unsigned int i = 0; i < a.size(); i++)
		os << a[i] << (i < a.size() - 1 ? ", " : "");
	os << ']';
	return os;
}
template <class T>
ostream &operator<<(ostream &os, const set<T> &a) {
	os << '{';
	for (typename set<T>::iterator it = a.begin(); it != a.end(); it++) {
		typename set<T>::iterator jt = it;
		os << *it << (++jt != a.end() ? ", " : "");
	}
	os << '}';
	return os;
}
template <class T1, class T2>
ostream &operator<<(ostream &os, map<T1, T2> &a) {
	os << "{\n";
	for (typename map<T1, T2>::iterator it = a.begin(); it != a.end(); it++) {
		typename map<T1, T2>::iterator jt = it;
		os << "  " << it->first << ": " << it->second << (++jt != a.end() ? ",\n" : "\n");
	}
	os << '}';
	return os;
}
#define point pair<int,int>
#define X fi
#define Y se
int n;

int matdis(point A, point B) {
	return abs(A.X - B.X) + abs(A.Y - B.Y);
}

bool ask(point A, point B) {
	cout << "?" << sp << A.X << sp << A.Y << sp << B.X << sp << B.Y << endl;
	string rec; cin >> rec;
	if (rec == "YES") return 1;
	if (rec == "NO") return 0;
	assert(false);
}

vector<point> path;
vector<point> path2;
signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	cin >> n;
	pair<int, int> cur = mp(n, n);
	path.push_back(cur);
	while (matdis(point(1, 1), cur) > n - 1) {
		if (cur.X == 1)
			cur.Y--;
		else if (cur.Y == 1)
			cur.X--;
		else {
			bool rec = ask(point(1, 1), point(cur.X - 1, cur.Y));
			if (rec == 1)
				cur = point(cur.X - 1, cur.Y);
			else
				cur = point(cur.X, cur.Y - 1);
		}
		path.push_back(cur);
	}
	cur = mp(1, 1);
	path2.push_back(cur);
	while (matdis(cur, point(n, n)) > n - 1) {
		if (cur.X == n)
			cur.Y++;
		else if (cur.Y == n)
			cur.X++;
		else {
			bool rec = ask(point(cur.X, cur.Y + 1), point(n, n));
			if (rec == 1)
				cur = point(cur.X, cur.Y + 1);
			else
				cur = point(cur.X + 1, cur.Y);
		}
		path2.push_back(cur);
	}
	path2.pop_back();
	reverse(path2.begin(), path2.end());
	for (auto it : path2) path.push_back(it);
	reverse(path.begin(), path.end());
	string ans;
	for (int i = 0; i < path.size() - 1; i++) {
		if (path[i].X == path[i + 1].X)
			ans += "R";
		else ans += "D";
	}
	cout << "!" << sp << ans << endl;
}