#include<bits/stdc++.h>

#define x first
#define y second
#define pb push_back
#define mp make_pair
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define all(v) v.begin(),v.end()
#define boost ios_base::sync_with_stdio(0),cin.tie(0),cout.tie()

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef pair<ll,ll> pll;

const ll INF = 1e18;
const int inf = INT_MAX;
const ll mod = 1e9 + 7;
const int pi = acos(-1);
const int dx[4] = {0, 0, 1, -1};
const int dy[4] = {1, -1, 0, 0};
const char dir[4] = {'R', 'L', 'D', 'U'};
const int N = 1e6 + 5;

ll t[4 * N], sum[4 * N], p[4 * N];

void push(int v, int tl, int tr) {
	if (p[v] != 0) {
		sum[v] += (tr - tl + 1)	* p[v];
		if (tl != tr) {
			p[v * 2] += p[v];
			p[v * 2 + 1] += p[v];
		}
		if (t[v]) {
    		t[v * 2] = t[v * 2 + 1] = t[v];
  		}
		p[v] = 0;           
	}			
}

void build(int v, int tl, int tr) {
	if (tl == tr) {
		t[v] = tl;
		return;
	}
	int tm = (tl + tr) / 2;
	build(v * 2, tl, tm);
	build(v * 2 + 1, tm + 1, tr);
}

ll get(int v, int tl, int tr, int l, int r) {
	push(v, tl, tr);
	if (tr < l || tl > r) return 0;
	if (l <= tl && tr <= r) return sum[v];
	int tm = (tl + tr) / 2;
	return get(v * 2, tl, tm, l, r) + get(v * 2 + 1, tm + 1, tr, l, r);
} 

void upd(int v, int tl, int tr, int l, int r, int x) {
	push(v, tl, tr);
	if (tr < l || tl > r) return;
	if (l <= tl && tr <= r && t[v]) {
		p[v] += abs(x - t[v]);				
		t[v] = x;
		push(v, tl, tr);
		return;
	}
	int tm = (tl + tr) / 2;
	upd(v * 2, tl, tm, l, r, x);
	upd(v * 2 + 1, tm + 1, tr, l, r, x);
	t[v] = (t[v * 2] == t[v * 2 + 1] ? t[v * 2] : 0);
	sum[v] = sum[v * 2] + sum[v * 2 + 1];
}

int main(){
	int n, m;
	cin >> n >> m;
	build(1, 1, n);
	for(int i = 1; i <= m; i++){
		int type, l, r;
		ll x;
		cin >> type >> l >> r;
		if(type == 1){
			cin >> x;
			upd(1, 1, n, l, r, x);
		}
		else{
			cout << get(1, 1, n, l, r) << endl;
		}
	}
} 
