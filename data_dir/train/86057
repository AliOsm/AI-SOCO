#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <vector>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <queue>
#include <unordered_set>


using namespace std;
const int N = 101;

string s[N];
int G[26][26];
bool flag = true;
int n;
int used[26];
vector < int > ans;

void dfs(int v)
{
	used[v] = 1;
	for (int u = 0; u < 26; ++u)
	{
		if (used[u] == 1 && G[v][u] == 1)
			flag = false;
		if (used[u] == 0 && G[v][u] == 1)
			dfs(u);
	}
	used[v] = 2;
	ans.push_back(v);
}


int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	scanf("%d", &n);
	for (int i = 0; i < n; ++i)
		cin >> s[i];

	for (int i = 1; i < n; ++i)
	{
		int j = 0;
		int len = min(s[i].size(), s[i - 1].size());
		while (j < len && s[i - 1][j] == s[i][j])
			j++;
		if (j == len && len == s[i].size() && len != s[i - 1].size())
			flag = false;
		if (j < len)
			G[s[i - 1][j] - 'a'][s[i][j] - 'a'] = 1;
	}

	memset(used, 0, sizeof(used));
	for (int i = 0; i < 26; ++i)
	{
		if (used[i] == 0)
			dfs(i);
	}

	if (flag == false)
	{
		cout << "Impossible" << endl;
		return 0;
	}
	for (int i = ans.size() - 1; i >= 0; --i)
		cout << char(ans[i] + 'a');





	return 0;
}