# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace std;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 5e6 + 9;
const int N = 1e5 + 3;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
int d, dp[mxn];
string s[N];
int a[N];
vector < int > g[N], gr[mxn];
vector < pair < int, int > > tp;
int timer;
int u[N][52];
int c[N][52];
int was[N];
int x[mxn], col;

inline void dfs1 (int v, int t) {
	u[v][t] = timer;
	t ++;
	t %= d;
	for (auto to : g[v]) {
		if (u[to][t] != timer)
			dfs1(to, t);
	}
	t --;
	if (t < 0) t += d;

	tp.push_back ({v, t});
}

inline void dfs2 (int v, int t) {
	u[v][t] = timer;
	c[v][t] = col;
	if (s[v][t] == '1' && was[v] != col) {
		was[v] = col;
		++ x[col];
	}
	t --;
	if (t < 0) t += d;
	for (auto to : gr[v]) {
		if (u[to][t] != timer)
			dfs2(to, t);
	}      

}


int main () {
	SpeedForce;
	cin >> n >> m >> d;
	For (i, 1, m) {
		int l, r;
		cin >> l >> r;
		g[l].pb(r);
		gr[r].pb(l);
	}
	for (int i = 1;i <= n; i ++) {
		cin >> s[i];
	}
	timer ++;
	for (int i = 1; i <= n; i ++) {
		for (int j = 0; j < d; j ++) {
			if (u[i][j] != timer)
				dfs1(i, j);
		}
	}
	col = 0; 
	reverse(every(tp));
	timer ++;
	for (auto v : tp) {
		if (u[v.F][v.S] != timer) {
			++ col;
			dfs2(v.F, v.S);
		}
	}
	for (int i = 1; i <= n; i ++)gr[i].clear();

	for (int i = 1; i <= n; i ++) {
		for (auto to : g[i]) {
			for (int l = 0, r = 1; l < d; l ++, r++) {
				r %= d;
				if (c[i][l] != c[to][r]) {
					gr[c[i][l]].pb(c[to][r]);
				}
			}
		}
	}

	for (int i = col; i >= 1; i --) {
		for (auto j : gr[i])
			dp[i] = max(dp[i], dp[j]);
		dp[i] += x[i];
	}

	
	cout << dp[c[1][0]] << '\n';

	return Accepted;
}

// B...a