#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<map>
#include<utility>
#include<set>
#include<stack>
#include<list>
#include<deque>
#include<bitset>
#include<iomanip>
#include<cstring>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<climits>
#include<cmath>
#include<cctype>


#define pb push_back
#define mp make_pair
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define ren(i,a,b) for(int i=a;i>=b;i--)
#define ff first
#define ss second
#define pll pair<long long int,long long int>
#define pii pair<int,int>
#define vll vector<long long int>
#define vii vector<int>
#define gi(n) scanf("%d",&n)
#define gll(n) scanf("%lld",&n)
#define gstr(n) scanf("%s",n)
#define gl(n) cin >> n
#define oi(n) printf("%d",n)
#define oll(n) printf("%lld",n)
#define ostr(n) printf("%s",n)
#define ol(n) cout << n
#define os cout<<" "
#define on cout<<"\n"
#define o2(a,b) cout<<a<<" "<<b
#define all(n) n.begin(),n.end()
#define present(s,x) (s.find(x) != s.end())
#define cpresent(s,x) (find(all(s),x) != s.end())
#define tr(container, it) for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++)
using namespace std;

typedef unsigned long long int ull;
typedef long long int ll;
typedef long double ld;
typedef vector<vector<ll> > mat;

ll mulmod(ll a, ll b, ll mod)
{
    ll x = 0,y = a % mod;
    while (b > 0)
    {
        if (b % 2 == 1)
        {    
            x = (x + y) % mod;
        }
        y = (y * 2) % mod;
        b /= 2;
    }
    return x % mod;
}
/* 
 * modular exponentiation
 */
ll modulo(ll base, ll exponent, ll mod)
{
    ll x = 1;
    ll y = base;
    while (exponent > 0)
    {
        if (exponent % 2 == 1)
            x = (x * y) % mod;
        y = (y * y) % mod;
        exponent = exponent / 2;
    }
    return x % mod;
}
 
/*
 * Miller-Rabin primality test, iteration signifies the accuracy
 */
bool Miller(ll p,int iteration)
{
    if (p < 2)
    {
        return false;
    }
    if (p != 2 && p % 2==0)
    {
        return false;
    }
    ll s = p - 1;
    while (s % 2 == 0)
    {
        s /= 2;
    }
    for (int i = 0; i < iteration; i++)
    {
        ll a = rand() % (p - 1) + 1, temp = s;
        ll mod = modulo(a, temp, p);
        while (temp != p - 1 && mod != 1 && mod != p - 1)
        {
            mod = mulmod(mod, mod, p);
            temp *= 2;
        }
        if (mod != p - 1 && temp % 2 == 0)
        {
            return false;
        }
    }
    return true;
}
 
int pp[10000005];
 
 
bool pr(ll n)
{
	if(n<=10000000)return 1-pp[n];
	return Miller(n,7);
}

ll m=998244353;

map<ll,ll> m1,cnt,good;

int main()
{ios_base::sync_with_stdio(false);

pp[0]=1;
pp[1]=1;

for(int i=2;i*i<=10000004;i++)
{
	if(pp[i])continue;
	for(int j=2*i;j<=10000004;j+=i)
	pp[j]=1;
}

int n;
cin>>n;
rep(i,1,n)
{
	ll x;
	cin>>x;
	cnt[x]++;
}
vll bad;
tr(cnt,it)
{
	bad.pb(it->ff);
	ll val=it->ff,cc=it->ss;
	ll sq=sqrt(val);
        while(sq*sq>val)sq--;
	while(sq*sq<val)sq++;
	if(sq*sq==val&&pr(sq))
	{
		m1[sq]+=2*cc;
		good[val]=1;
	}
	ll cb=cbrt(val);
        while(cb*cb*cb>val)cb--;
	while(cb*cb*cb<val)cb++;
	if(cb*cb*cb==val&&pr(cb))
	{
		m1[cb]+=3*cc;
		good[val]=1;
	}
	ll sq1=sqrt(sq);
        while(sq1*sq1*sq1*sq1>val)sq1--;
	while(sq1*sq1*sq1*sq1<val)sq1++;
	if(sq1*sq1*sq1*sq1==val&&pr(sq1))
	{
		m1[sq1]+=4*cc;
		good[val]=1;
	}
	
}

set<ll> prs;
tr(m1,it)prs.insert(it->ff);
int sz=bad.size();
rep(i,0,sz-1)
{
	rep(j,i+1,sz-1)
	{
		ll gg=__gcd(bad[i],bad[j]);
		if(gg>1)
		{
			prs.insert(gg);
			prs.insert(bad[i]/gg);
			prs.insert(bad[j]/gg);
		}
	}
}
ll ans=1;
tr(cnt,it)
{
	ll val=it->ff,cc=it->ss;
	if(present(good,val))continue;
	tr(prs,it1)
	{
		ll pp1=*it1;
		if(val%pp1==0)m1[pp1]+=cc,good[val]=1;
	}
	if(!present(good,val))ans=(ans*(cc+1)*(cc+1))%m;
}
tr(m1,it)
{
        if(it->ff==1)continue;
	ll kk=it->ss;
	ans=(ans*(kk+1))%m;
}
ol(ans);
return 0;
}