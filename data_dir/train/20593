#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>
#define fr first
#define se second

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int a[5005];
int b[5005];

int dp[5005];


unordered_map<int,int> badp;

bool isp[35000];
bool bad[35000];

vi plist;

void seive()
{
  isp[0] = isp[1] = 1;

  for(int i = 2;i*i<= 35000;i++)
  {
    if(!isp[i])
    {
      for(int j = i*i; j < 35000;j+=i)isp[j] = 1;
    }
  }

  afor(i,2,35000 - 1)
  {
    if(!isp[i])plist.pb(i);

  }

}

bool isbad(int pr)
{
  if(pr < 35000)
  {
    return bad[pr];
  }
  else 
  {
    if(badp.count(pr))return true;
    return false;
  }
}

int solve(int x)
{
  int ret = 0;
    for(auto p:plist)
    {
      int ad = 1;
      if(isbad(p))ad = -1;
      while(x%p == 0)
      {
        ret+= ad;
        x/=p;
      }
    }
    if(x > 1)
    {
      if(isbad(x))ret--;
      else ret++;
    }
  return ret;
}

int main()
{
  badp.reserve(1 << 13);
  badp.max_load_factor(0.5);

  finp;
  seive();
  int n,m;
  cin>>n>>m;
  ll score = 0;
  afor(i,1,n)
  {
    cin>>a[i];
    //score+= solve(a[i]);
    dp[i] = __gcd(dp[i - 1],a[i]);
  }


  afor(i,1,m)
  {
    cin>>b[i];
    badp[b[i]] = 1;
    if(b[i] < 35000)bad[b[i]] = true;
  }

  ll todiv = 1;
  afor(i,1,n)score+= solve(a[i]);


  bfor(i,n,1)
  {
    int val = 0 - solve(dp[i]/todiv);

    if(val > 0)
    {
      score+= (ll)val*i;
      todiv*= dp[i]/todiv;
    }
  }
  cout<<score;


  
return 0;
}