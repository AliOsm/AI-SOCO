#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef pair<int, int> pii;

const int maxn = 1e5 + 5;

int main() {
    int n, c, d;
    cin >> n >> c >> d;
    vector<int> cs(maxn);
    vector<int> ds(maxn);
    vector<pii> css, dss;

    for (int i = 0; i < n; i++) {
        int b, p;
        cin >> b >> p;
        string s;
        cin >> s;
        if (s == "C") {
            cs[p] = max(cs[p], b);
            css.push_back({ p, b });
        } else {
            ds[p] = max(ds[p], b);
            dss.push_back({ p, b });
        }
    }

    for (int i = 1; i < maxn; i++) {
        cs[i] = max(cs[i], cs[i - 1]);
        ds[i] = max(ds[i], ds[i - 1]);
    }

    int ans = cs[c] + ds[d];
    if (min(cs[c], ds[d]) == 0)
        ans = 0;

    if (!css.empty()) {
        sort(css.begin(), css.end());
        set< pair<int, int> > st;
        for (int i = 0; i < css.size(); i++)
            st.insert({-css[i].second, i});
        for (int a = 0; a < css.size(); a++) {
            int cost = css[a].first;
            int cras = css[a].second;
            vector<pii> del;
            for (auto it : st) {
                int other = -it.first;
                int index = it.second;
                if (index == a) continue;
                //cerr << css[index].first << " " << cost << endl;
                if (css[index].first + cost > c) {
                    del.push_back(it);
                    continue;
                }
                ans = max(ans, cras + other);
                break;
            }
            for (auto it : del) {
                st.erase(it);
            }
        }
    }

    if (!dss.empty()) {
        sort(dss.begin(), dss.end());
        set< pair<int, int> > st;
        for (int i = 0; i < dss.size(); i++)
            st.insert({-dss[i].second, i});
        for (int a = 0; a < dss.size(); a++) {
            int cost = dss[a].first;
            int cras = dss[a].second;
            vector<pii> del;
            for (auto it : st) {
                int other = -it.first;
                int index = it.second;
                if (index == a) continue;
                if (dss[index].first + cost > d) {
                    del.push_back(it);
                    continue;
                }
                ans = max(ans, cras + other);
                break;
            }
            for (auto it : del) {
                st.erase(it);
            }
        }
    }

    cout << ans << endl;
}
