#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#include <ext/pb_ds/detail/standard_policies.hpp>

using namespace __gnu_pbds; // or pb_ds;
using namespace std;

template<typename T, typename B = null_type>
using oset = tree<T, B, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
// find_by_order / order_of_key


const int N = 400005;
const int L = 26;
const int A = 20000007;

int ft[A];

void add(int x, int val) {
	x++;
	for(; x < A; x += x & -x)
		ft[x] += val;
}
int get(int x) {
	x++;
	x = min(x, A - 1);
	int ans = 0;
	for(; x > 0; x -= x & -x)
		ans += ft[x];
	return ans;
}
int get(int l, int r) {
	return get(r) - get(l - 1);
}

int len;

int n, a[N];
int used[L];
void push(int val, int b) {
	const int cap = val & ((1 << (b + 1)) - 1);
// 	if(b == 1) printf("%d\n", cap);
// 	printf("add b %d val %d: ", b, val);
	int lo = (1 << b) - cap;
	int hi = (1 << (b + 1)) - cap;
	hi--;
	used[b] += get(lo, hi);
	used[b] += get(lo + (1 << (b + 1)), hi + (1 << (b + 1)));
// 	if(cap & (1 << b)) {
// 		// x + cap < (1 << (b + 1))
// 		const int tp = (1 << (b + 1)) - cap;
// 		const int tmp = get(tp - 1);
// 		used[b] += tmp;
// 		printf("%d\n", tmp);
// 	}
// 	else {
// 		// x + cap >= (1 << b)
// 		const int tp = (1 << b) - cap;
// 		const int up = (1 << (b + 1)) - cap;
// 		const int tmp = get(up - 1) - get(tp - 1);
// 		used[b] += tmp;
// 		printf("%d\n", tmp);
// 	}
	add(cap, 1);
	len++;
}

int main() {

	scanf("%d", &n);

	for(int i = 0; i < n; i++) scanf("%d", a + i);

	int ans = 0;
	for(int b = 0; b < L; b++) {
		for(int i = 0; i < n; i++) push(a[i], b);
		memset(ft, 0, sizeof ft);
		len = 0;
		if(used[b] % 2) ans ^= 1 << b;
	}

// 	int t = 0;
// 	for(int i = 0; i < n; i++)
// 		for(int j = i + 1; j < n; j++)
// 			t ^= a[i] + a[j];
// 	
// 	printf("%d\n", t);

	printf("%d\n", ans);

}
