/*input
6 5
1 2
5 4
2 3
3 1
3 6
6
1 3
2 5
1 5
5 5
2 4
3 3
*/
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define int long long
#define N
int n, m;
vector<pair<int, int> > edge;
int parl[10005][505];
int parr[10005][505];

int find(int par[], int u) {
	if (par[u] == u) return u;
	return par[u] = find(par, par[u]);
}

void uni(int par[], int u, int v) {
	u = find(par, u); v = find(par, v);
	if (u == v) return;
	par[v] = u;
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= m; i++) {
		int u, v; cin >> u >> v;
		edge.push_back(mp(u, v));
	}
	for (int i = 1; i <= n; i++) parl[0][i] = i, parr[m + 1][i] = i;
	for (int i = 1; i <= m; i++) {
		for (int j = 1; j <= n; j++) parl[i][j] = parl[i - 1][j];
		int u = find(parl[i], edge[i - 1].fi); int v = find(parl[i], edge[i - 1].se);
		if (u != v) {
			uni(parl[i], u, v);
		}
	}
	for (int i = m; i >= 1; i--) {
		for (int j = 1; j <= n; j++) parr[i][j] = parr[i + 1][j];
		int u = find(parr[i], edge[i - 1].fi); int v = find(parr[i], edge[i - 1].se);
		if (u != v) {
			uni(parr[i], u, v);
		}
	}
	int q; cin >> q;
	while (q--) {
		bool visited[505]; memset(visited, 0, sizeof(visited));
		int par[505];
		int l, r; cin >> l >> r;
		for (int i = 1; i <= n; i++) par[i] = parl[l - 1][i];
		for (int i = 1; i <= n; i++) {
			uni(par, parr[r + 1][i], i);
		}
		int ans = 0;
		for (int i = 1; i <= n; i++) {
			int u = find(par, i);
			if (!visited[u]) ans++;
			visited[u] = true;
		}
		cout << ans << endl;
	}
}