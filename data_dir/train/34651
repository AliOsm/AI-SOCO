#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

ll m, n, x, y, z;

vector < ll > edges[100009];
map < ll, ll > clr_cnt[100009], sum_of_clrs[100009];
ll ans[100009];

void merge(ll node1, ll node2)
{
    if(clr_cnt[node1].size() < clr_cnt[node2].size()){
        clr_cnt[node1].swap(clr_cnt[node2]);
        sum_of_clrs[node1].swap(sum_of_clrs[node2]);
    }

    map < ll , ll > :: iterator it;

    for(it = clr_cnt[node2].begin() ; it != clr_cnt[node2].end(); it++){
        ll cl = it->first;
        ll vl = it->second;

        clr_cnt[node1][cl] += vl;
        sum_of_clrs[node1][clr_cnt[node1][cl]] += cl;
    }


}

void dfs(ll node, ll par)
{
    for(int i = 0; i < edges[node].size(); i++){
        if(edges[node][i] == par) continue;
        dfs(edges[node][i], node);
        merge(node, edges[node][i]);
    }

    map < ll, ll > :: iterator it = sum_of_clrs[node].end();
    it--;
    ans[node] = it->second;

}

int main()
{

    cin >> n;

    for(int i = 1; i <= n; i++) {
        scanf("%I64d", &x);
        clr_cnt[i][x]++;
        sum_of_clrs[i][1] += x;
    }

    for(int i = 1; i < n; i++){
        scanf("%I64d %I64d", &x, &y);

        edges[x].push_back(y);
        edges[y].push_back(x);
    }

    dfs(1, 0);

    for(ll i = 1; i <= n; i++){
        printf("%I64d ", ans[i]);
    }



    return 0;
}
