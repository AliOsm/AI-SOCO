#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <set>
#include <map>
#include <unordered_map>
#include <cassert>
#include <iostream>
#include <iomanip>    
#include <cstring>
#include <cmath>
#include <functional>
#include <utility>

#define pb push_back
#define all(x) (x).begin(), (x).end()
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
#define rep(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define forn(i, n) for (int (i) = 1; (i) <= (n); (i)++)

using namespace std;

template<class T> inline void umax(T &a,T b){if(a < b) a = b;}
template<class T> inline void umin(T &a,T b){if(a > b) a = b;}
template<class T> inline T abs(T a){return a > 0 ? a : -a;}

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 1e6 + 100;

bool sieve[N];
vi primes;

ll phi(ll n) {
	ll nleft = n;
	ll res = n;
	for (int p: primes) {
		if (ll(p) * p > n) {
			break;
		}
		if (n % p == 0) {
			res -= res / p;
			while (nleft % p == 0) {
				nleft /= p;
			}
		}
	}
	if (nleft > 1) {
		res -= res / nleft;
	}
	return res;
}

int main() {
	for (int d = 2; d < N; d++) if (!sieve[d]) {
		primes.pb(d);
		for (int x = d; x < N; x += d) {
			sieve[x] = 1;
		}
	}

	ll n;
	ll k;
	cin >> n >> k;

	ll numF = (k + 1) / 2;
	while (n > 1 && numF > 0) {
		//printf("n = %lld\n", n);
		n = phi(n);
		numF--;
	}
	printf("%lld\n", n % 1000000007ll);

	return 0;     
}