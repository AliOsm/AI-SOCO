#include <bits/stdc++.h>

#define FI(i,a,b) for(int i=(a);i<=(b);i++)
#define FD(i,a,b) for(int i=(a);i>=(b);i--)

#define LL long long
#define Ldouble long double
#define PI 3.1415926535897932384626

#define PII pair<int,int>
#define PLL pair<LL,LL>
#define mp make_pair
#define fi first
#define se second

using namespace std;

int n, m, par[200005];
int u[400005], v[400005], is, it;

vector<int> vs, vt;
int ds, dt;

vector<PII> res;

int f(int x){
	if(par[x] == x) return x;
	return par[x] = f(par[x]);
}

int os[200005], ot[200005];

void gg(){
	printf("No\n");
	exit(0);
}

int main(){
	scanf("%d %d", &n, &m);
	if(m < n - 1) gg();
	
	FI(i, 1, n) par[i] = i;
	FI(i, 1, m) scanf("%d %d", &u[i], &v[i]);
	scanf("%d %d %d %d", &is, &it, &ds, &dt);
	FI(i, 1, m){
		bool gg = false;
		if(u[i] == is) vs.push_back(v[i]), gg = true;
		if(u[i] == it) vt.push_back(v[i]), gg = true;
		if(v[i] == is) vs.push_back(u[i]), gg = true;
		if(v[i] == it) vt.push_back(u[i]), gg = true;
		if(gg) continue;
		int pa = f(u[i]), pb = f(v[i]);
		if(pa != pb){
			par[pa] = pb;
			res.push_back(mp(u[i], v[i]));
		}
	}
	FI(i, 0, (int)vs.size() - 1){
		int cur = vs[i];
		os[f(cur)] = cur;
	}
	FI(i, 0, (int)vt.size() - 1){
		int cur = vt[i];
		ot[f(cur)] = cur;
	}
	
	FI(i, 1, n){
		if(os[i] > 0 && ot[i] == 0 && i != it){
			res.push_back(mp(is, os[i]));
			ds--;
			os[i] = 0;
		}
		if(os[i] == 0 && ot[i] > 0 && i != is){
			res.push_back(mp(it, ot[i]));
			dt--;
			ot[i] = 0;
		}
	}
	
	int tar = -1;
	FI(i, 1, n){
		if(os[i] > 0 && ot[i] > 0){
			if(tar == -1) tar = i;
		}
	}
	
	if(tar == -1){
		if(os[it] > 0){
			ds--;
			dt--;
			os[it] = ot[is] = 0;
			res.push_back(mp(is, it));
		}
		else gg();
	}
	
	FI(i, 1, n) if(os[i] > 0 && ot[i] > 0){
		if(i == tar){
			ds--, dt--;
			res.push_back(mp(is, os[i]));
			res.push_back(mp(it, ot[i]));
		}
		else if(ds > 0){
			ds--;
			res.push_back(mp(is, os[i]));
		}
		else if(dt > 0){
			dt--;
			res.push_back(mp(it, ot[i]));
		}
		else gg();
	}
	if(ds < 0 || dt < 0 || res.size() != n - 1) gg();
	printf("Yes\n");
	FI(i, 0, n - 2) printf("%d %d\n", res[i].fi, res[i].se);
	return 0;
}