#include <bits/stdc++.h>

#define ll long long
#define ld long double

using namespace std;

const ll N = 100000;
const ll inf = (ll)1e18;
const ll MOD = (ll)1e9 + 7;
const ld eps = 1e-6;
const ll ABC = 26;
const ll P = 239;

vector<vector<int> > g;
vector<int> sz, msz;
vector<int> ans;
int xxx;
int n;

void dfs(int u, int par)
{
    sz[u] = 1;
    msz[u] = 0;
    for (int v : g[u])
        if (v != par)
        {
            dfs(v, u);
            sz[u] += sz[v];
            msz[u] = max(msz[u], msz[v]);
        }
    if (sz[u] <= xxx)
        msz[u] = max(msz[u], sz[u]);
}

void dfs2(int u, int par, int best)
{
    int cnt = n - 1;
    int bad = 0;
    for (int v : g[u])
        if (v != par)
        {
            cnt -= sz[v];
            if (sz[v] > xxx)
            {
                if (sz[v] - msz[v] <= xxx)
                    bad++;
                else
                    bad += 2;
            }
        }
    if (cnt > xxx)
    {
        if (cnt - best <= xxx)
            bad++;
        else
            bad += 2;
    }
    if (bad <= 1)
        ans[u] = 1;
    else
        ans[u] = 0;
    cnt = g[u].size();
    vector<int> pref(cnt + 1), suff(cnt + 1);
    pref[0] = 0;
    for (int i = 0; i < cnt; i++)
        if (g[u][i] != par)
            pref[i + 1] = max(pref[i], msz[g[u][i]]);
        else
            pref[i + 1] = max(pref[i], best);
    suff[cnt] = 0;
    for (int i = cnt - 1; i >= 0; i--)
        if (g[u][i] != par)
            suff[i] = max(suff[i + 1], msz[g[u][i]]);
        else
            suff[i] = max(suff[i + 1], best);
    for (int i = 0; i < cnt; i++)
        if (g[u][i] != par)
        {
            int best1 = max(pref[i], suff[i + 1]);
            if (n - sz[g[u][i]] <= xxx)
                best1 = max(best1, n - sz[g[u][i]]);
            dfs2(g[u][i], u, best1);
        }
}

int main()
{
    //freopen("refrain.in", "r", stdin);
    //freopen("refrain.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n;
    xxx = n / 2;
    g.resize(n);
    sz.resize(n);
    msz.resize(n);
    ans.resize(n);
    for (int i = 0; i < n - 1; i++)
    {
        int a, b;
        cin >> a >> b;
        g[a - 1].push_back(b - 1);
        g[b - 1].push_back(a - 1);
    }
    dfs(0, -1);
    dfs2(0, -1, 0);
    for (int i : ans)
        cout << i << " ";
    return 0;
}
