#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long ll;

const int MAXN = 300005;
int N;
ll W[MAXN];
vector<pair<int, ll> > adj[MAXN];
ll ans = 0;

ll dfs(int cur, int prv)
{
    ll best1 = 0, best2 = 0;
    for (auto edge : adj[cur])
    {
        int nxt = edge.first, cost = edge.second;
        if (nxt == prv)
            continue;
        ll dist = dfs(nxt, cur) - cost;
        if (dist > best1)
        {
            best2 = best1;
            best1 = dist;
        }
        else if (dist > best2)
            best2 = dist;
    }
    ans = max(ans, W[cur]);
    ans = max(ans, best1 + W[cur] + best2);
    return max(W[cur], best1 + W[cur]);
}

int main()
{
    ios::sync_with_stdio(0);

    cin >> N;
    for (int i = 1; i <= N; i++)
        cin >> W[i];
    for (int i = 0, a, b, c; i < N - 1; i++)
    {
        cin >> a >> b >> c;
        adj[a].push_back(make_pair(b, c));
        adj[b].push_back(make_pair(a, c));
    }

    dfs(1, 0);
    cout << ans << "\n";

    return 0;
}
