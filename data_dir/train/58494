#include <bits/stdc++.h>
#include <stdio.h>

#define fi first
#define se second

using namespace std;

typedef long long ll;

const ll N = 100000 * 6 + 7;
const ll INF = 1e9 + 7;

const int xi[] = {-1, +1, 0, 0};
const int yi[] = {0, 0, -1, +1};

ll a[N], n, t_gcd[N], t_mn[N];

void build_min(int v, int tl, int tr){

  if(tr == tl){
    t_mn[v] = a[tr];
  }

  else{

    int tm = (tr + tl) / 2;

    build_min(2 * v, tl, tm);
    build_min(2 * v + 1, tm + 1, tr);

    t_mn[v] = min(t_mn[2 * v + 1], t_mn[2 * v]);

  }

}

// l r tl tr
// tl tr l t

// l tl tr r

ll get_mn(int v, int tl, int tr, int l, int r){

  if(r < tl || tr < l){
    return INF;
  }

  if(l <= tl && tr <= r){
    return t_mn[v];
  }

  int tm = (tr + tl) / 2;

  return min(get_mn(2 * v, tl, tm, l, r), get_mn(2 * v + 1, tm + 1, tr, l, r));

}


void build_gcd(int v, int tl, int tr){

  if(tr == tl){
    t_gcd[v] = a[tr];
  }

  else{

    int tm = (tr + tl) / 2;

    build_gcd(2 * v, tl, tm);
    build_gcd(2 * v + 1, tm + 1, tr);

    t_gcd[v] = __gcd(t_gcd[2 * v + 1], t_gcd[2 * v]);

  }

}

// l r tl tr
// tl tr l t

// l tl tr r

ll get_gcd(int v, int tl, int tr, int l, int r){

  if(r < tl || tr < l){
    return 0;
  }

  if(l <= tl && tr <= r){
    return t_gcd[v];
  }

  int tm = (tr + tl) / 2;

  return __gcd(get_gcd(2 * v, tl, tm, l, r), get_gcd(2 * v + 1, tm + 1, tr, l, r));

}

map < int, vector < int > > pos;

int main(){

  cin >> n;

  for(int i = 1; i <= n; i++){
    cin >> a[i];
    pos[a[i]].push_back(i);
  }

  /*

  for(int i = 1; i <= n; i++){
    for(int j = 1; j <= sz[a[i]]; j++){
      cout << pos[a[i]][j] << ' ';
    }
    cout << '\n';
  }

  return 0;

  */

  build_min(1, 1, n);
  build_gcd(1, 1, n);

  int q;
  cin >> q;

  while(q--){

    int l, r;
    cin >> l >> r;

    ll mn = get_mn(1, 1, n, l, r);
    ll gcd = get_gcd(1, 1, n, l, r);

    if(mn != gcd){
      cout << (r - l) + 1 << '\n';
    }

    else{

      ll cur = mn;

      int pos1 = lower_bound(pos[mn].begin(), pos[mn].end(), l) - pos[mn].begin();
      int pos2 = upper_bound(pos[mn].begin(), pos[mn].end(), r) - pos[mn].begin();

      cout << (r - l) + 1 - (pos2 - pos1 + 1) + 1 << '\n';
    }
  }
}
