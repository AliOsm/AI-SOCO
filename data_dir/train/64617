//                             In The Name Of Allah
#include <bits/stdc++.h>
#define ss second
#define ff first
#define use_fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define ret(n) return cout << n, 0
#define se(n) cout << setprecision(n) << fixed
#define pb push_back
#define int long long
#pragma GCC optimize ("Ofast")
#pragma GCC optimize ("unroll-loops")
#define ld long double
using namespace std; 
 
const long long N = 2e6 + 100, T = 130, OO = 1e14, M = 1e9 + 7, M2 = 998244353, sq = 350, lg = 70;
typedef pair <int, int> pii;
int dp[N], is[N], f[N], sum[N];

void kmp(string s, string t) {
	int j = 0;
	f[1] = 0;
	for(int i = 1; i < (int)t.size(); i++) {
		while(t[i] != t[j] && j)
			j = f[j];
		if(t[j] == t[i])
			j++;
		f[i + 1] = j;
	}
	int q = 0, i = 0;
	while(i < (int)s.size()) {
		if(t[q] == s[i]) {
			q++;
			i++;
			if(q == (int)t.size()) {
				is[i] = true;
				q = f[q];
			}
		}
		else {
			if(q == 0)
				i++;
			else
				q = f[q];
		}
	}
} 

int32_t main() {
	use_fast;
	string s, t;
	cin >> s >> t;
	kmp(s, t);
	int en = 0;
	int n = (int)s.size(), m = (int)t.size();
	for(int i = 1; i <= n; i++) {
		if(!is[i] && !en)
			continue;
		if(is[i])
			en = i;
		dp[i] = (dp[i - 1] + sum[en - m] + en - m + 1) % M;
		sum[i] = (sum[i - 1] + dp[i]) % M;
	}
	cout << dp[n] % M << endl;
	return 0;
}
/*
be carefull :
1- if not solve after 20 min, read again twice
2- after submit read the code again
3- fun with contest
4- 915 forever 
5- In queue ...
*/
