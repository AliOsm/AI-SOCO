#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <ext/algorithm>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<ll, ll> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; } 
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; } 
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

const int MAXN = 111;
int dp[MAXN][4][4];

void apply(vector<int> &v, int x, int y) {
	if (x) v[x-1] |= 1<<(1-y);
	if (x+1 < Size(v)) v[x+1] |= 1<<(1-y);
	v[x] = 3;
}

int solve(vector<int>);

int f(int len, int beg, int end) {
	int &res = dp[len][beg][end];
	if (res != -1) return res;

	vector<bool> g(200, false);
	vector<int> v(len+2, 0);
	v[0] = 3;
	v[1] = beg;
	v[len] = end;
	v[len+1] = 3;

	FOR(i, 0, Size(v)) FOR(j, 0, 2) {
		vector<int> land = v;
		if (land[i]&(1<<j)) continue;
		apply(land, i, j);
		int sub = solve(land);
		g[sub] = true;
	}

	res = 0;
	while (g[res]) res++;
	return res;
}

int solve(vector<int> land) {
	int result = 0;

	FOR(i, 1, Size(land)-1) if (land[i-1] == 3 && land[i] != 3) {
		int j = i;
		while (land[j] != 3) j++;
		result ^= f(j-i, land[i], land[j-1]);
	}
	
	return result;
}

int main() {
	memset(dp, -1, sizeof dp);
	int r, n;
	cin >> r >> n;

	vector<int> land(r+2, 0);
	land[0] = land.back() = 3;

	FOR(i, 0, n) {
		int x, y;
		cin >> x >> y;
		y--;
		apply(land, x, y);
	}

	if (solve(land))
		cout << "WIN" << endl;
	else
		cout << "LOSE" << endl;
	return 0;
}

