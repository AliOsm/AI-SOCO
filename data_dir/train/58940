//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC opatimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }

int const maxn = 5005;
vector<int> gr[maxn];


int main() {
//    freopen("in.txt","r", stdin);
//    cout << fixed << setprecision(15);
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);

    int n, m,k;
    cin >> n >> m >> k;

    vector<tuple<int,int,int>> a(n);
    for (auto& tu : a)
        cin >> get<0>(tu) >> get<1>(tu) >> get<2>(tu);

    vector<int> need(n + 1);
    for (int i = n - 1; i >= 0; --i) {
        need[i] = max({0, need[i + 1] - get<1>(a[i]), get<0>(a[i])});
    }

    if (k < need[0])
        FINAL_OUT(-1);

    while (m--) {
        int x,y;
        cin >> x >> y;
        gr[x - 1].push_back(y-1);
    }
    vector<int> can(n, 0);
    for (int i = 0; i < n; ++i) {
        k += get<1>(a[i]);
        can[i] = k - need[i+1];
        k -= can[i];
    }

    int ans = 0;
    vector<bool> inq(n, false);
    set<pair<int,int>, greater<pair<int,int>> > sq;

    for (int i = n - 1; i >= 0; --i) {
        if (!inq[i]) {
            inq[i] = true;
            sq.insert({get<2>(a[i]), i});
        }
        for (int ne : gr[i]) {
            if (!inq[ne]) {
                inq[ne] = true;
                sq.insert({get<2>(a[ne]), ne});
            }
        }
        while (can[i] > 0 && !sq.empty()) {
            ans += sq.begin()->first;
            sq.erase(sq.begin());
            --can[i];
        }
    }

    cout << ans << endl;
}
