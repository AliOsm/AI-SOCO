#include<bits/stdc++.h>
using namespace std;

#define PB push_back
#define ALL(s) s.begin(),s.end()
#define FOR(i, init, n) for(int i = init; i < n; i++)
#define RFOR(i, init, end) for(int i = end-1; i >= init; i--)
#define OUT(a) cout << a << endl
#define OUT2(a,b) cout << a << " " << b << endl
#define ENDL cout << endl;
#define ANS(a) OUT(res.size());for(auto i:a)cout<<i<<" ";ENDL
#define PRINT(a,init,end) FOR(i,init,end) cout<<a[i]<<" ";ENDL
#define PRINTV(a) for(auto i:a)cout<<i<<" ";ENDL
#define F first
#define S second

const int INF=2e9,N=2e6+1;
const double EPS = 0.000000001;
vector<int>g[N];
int n,m,q,a[N];
string s;

int sgn(double x){return x<0?-1:x>0;}
struct pt {
  double x,y;
  pt(){}
  pt(double x,double y):x(x),y(y){}
  pt operator -(pt p){return pt(x-p.x,y-p.y);}
	pt operator +(pt p){return pt(x+p.x,y+p.y);}
	pt operator*(double t){return pt(x*t,y*t);}
	pt operator/(double t){return pt(x/t,y/t);}
	double operator*(pt p){return x*p.x+y*p.y;}
  int operator %(pt p){return sgn(x*p.y-y*p.x);}
	double norm2(){return *this**this;}
	double norm(){return sqrt(norm2());}
  void in(){cin>>x>>y;}
};
struct ln {
	pt p,pq;
	ln(pt p, pt q):p(p),pq(q-p){}
	ln(){}
	bool has(pt r){return dist(r)<EPS;}
	bool seghas(pt r){return has(r)&&(r-p)*(r-(p+pq))-EPS<0;}
	double dist(pt r){return (r-proj(r)).norm();}
	pt proj(pt r){return p+pq*((r-p)*pq/pq.norm2());}
};
struct pol {
	int n;vector<pt> p;
	pol(){}
	pol(vector<pt> _p){p=_p;n=p.size();}
	pt centroid(){ // (barycenter)
		pt r(0,0);double t=0;
		FOR(i,0,n){
			r=r+(p[i]+p[(i+1)%n])*(p[i]%p[(i+1)%n]);
			t+=p[i]%p[(i+1)%n];
		}
		return r/t/3;
	}
	bool has(pt q){ // O(n)
		FOR(i,0,n)if(ln(p[i],p[(i+1)%n]).seghas(q))return true;
		int cnt=0;
		FOR(i,0,n){
			int j=(i+1)%n;
			int k=sgn((q-p[j])%(p[i]-p[j]));
			int u=sgn(p[i].y-q.y),v=sgn(p[j].y-q.y);
			if(k>0&&u<0&&v>=0)cnt++;
			if(k<0&&v<0&&u>=0)cnt--;
		}
		return cnt!=0;
	}
};

pt sq1[4];
pt sq2[4];
int main() {
	ios::sync_with_stdio(false);
	FOR(i,0,4)sq1[i].in();
	FOR(i,0,4)sq2[i].in();
	pol pol1 = pol({sq1[0],sq1[1],sq1[2],sq1[3]});
	pol pol2 = pol({sq2[0],sq2[1],sq2[2],sq2[3]});
	FOR(i,0,4)if(pol1.has(sq2[i]))return!(OUT("YES"));
	FOR(i,0,4)if(pol2.has(sq1[i]))return!(OUT("YES"));
	if (pol1.has(pol2.centroid())||pol2.has(pol1.centroid()))return!(OUT("YES"));
	OUT("NO");
}