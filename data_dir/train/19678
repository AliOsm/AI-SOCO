#include <bits/stdc++.h>
#define endl '\n'

using namespace std;
const int MAXN = (1 << 20);
const int64_t inf = (int64_t)2e18 + 42;

bool is_power_42(int64_t x)
{
	while(x % 42 == 0) x /= 42;
	return x == 1;
}

int64_t pw42[MAXN];

int64_t get_diff(int64_t val)
{
	for(int i = 0; ; i++)
		if(pw42[i] >= val)
			return pw42[i] - val;
}

struct node
{
    int64_t lazy_add, lazy_change, value, mn_diff;
    node() { lazy_add = 0; lazy_change = 0; value = 0; mn_diff = inf; }
	node(int64_t _val) { value = _val; lazy_add = 0; lazy_change = 0; mn_diff = get_diff(_val); }
};

node temp, broken;

node merge(node l, node r)
{
    if(l.value == 0) return r;
    if(r.value == 0) return l;
	if(l.value == r.value) temp.value = l.value;
	else temp.value = -1;
	temp.mn_diff = min(l.mn_diff, r.mn_diff);
	return temp;
}

int64_t a[MAXN];

struct segment_tree
{
	node tr[4 * MAXN];

	void push(int l, int r, int idx)
	{
        if(tr[idx].lazy_change)
        {
            tr[idx].value = tr[idx].lazy_change;
            tr[idx].mn_diff = get_diff(tr[idx].value);

            if(l != r)
            {
            	tr[2 * idx + 1].lazy_add = 0;
            	tr[2 * idx + 2].lazy_add = 0;
            	tr[2 * idx + 1].lazy_change = tr[idx].lazy_change;
            	tr[2 * idx + 2].lazy_change = tr[idx].lazy_change;
            }

            tr[idx].lazy_change = 0;
        }

        if(tr[idx].lazy_add)
        {
			if(tr[idx].value != -1) tr[idx].value += tr[idx].lazy_add;
            if(tr[idx].value != -1) tr[idx].mn_diff = get_diff(tr[idx].value);
            else tr[idx].mn_diff -= tr[idx].lazy_add;

            if(l != r)
            {
            	tr[2 * idx + 1].lazy_add += tr[idx].lazy_add;
            	tr[2 * idx + 2].lazy_add += tr[idx].lazy_add;
            }

            tr[idx].lazy_add = 0;
        }
	}

	void init(int l, int r, int idx)
	{
		if(l == r)
		{
			tr[idx] = node(a[l]);
			return;
		}

		int mid = (l + r) >> 1;
        init(l, mid, 2 * idx + 1);
        init(mid + 1, r, 2 * idx + 2);

        tr[idx] = merge(tr[2 * idx + 1], tr[2 * idx + 2]);
	}

	void update(int qL, int qR, int64_t n_val, int l, int r, int idx)
	{
		push(l, r, idx);

		if(qL <= l && r <= qR)
		{
            tr[idx].lazy_change = n_val;
            tr[idx].lazy_add = 0;
			push(l, r, idx);
			return;
		}

		if(l > qR || r < qL)
			return;

		int mid = (l + r) >> 1;
        update(qL, qR, n_val, l, mid, 2 * idx + 1);
        update(qL, qR, n_val, mid + 1, r, 2 * idx + 2);

        tr[idx] = merge(tr[2 * idx + 1], tr[2 * idx + 2]);
	}

	void add(int qL, int qR, int64_t inc, int l, int r, int idx)
	{
		push(l, r, idx);

		if(qL <= l && r <= qR && tr[idx].value != -1)
		{
            tr[idx].lazy_add += inc;
			push(l, r, idx);
			return;
		}

		if(qL <= l && r <= qR && tr[idx].mn_diff >= inc)
		{
            tr[idx].lazy_add += inc;
			push(l, r, idx);
			return;
		}

		if(l > qR || r < qL)
			return;

		int mid = (l + r) >> 1;
        add(qL, qR, inc, l, mid, 2 * idx + 1);
        add(qL, qR, inc, mid + 1, r, 2 * idx + 2);

        tr[idx] = merge(tr[2 * idx + 1], tr[2 * idx + 2]);
	}

	int64_t query(int pos, int l, int r, int idx)
	{
		push(l, r, idx);
		if(pos < l || pos > r) return 0;
		if(pos == l && r == pos) return tr[idx].value;

		int mid = (l + r) >> 1;
        return query(pos, l, mid, 2 * idx + 1) + query(pos, mid + 1, r, 2 * idx + 2);
	}
};

int n, q;

void read()
{
	cin >> n >> q;
	for(int i = 1; i <= n; i++)
		cin >> a[i];
}

segment_tree t;

void solve()
{
	pw42[0] = 1;
	for(int i = 1; i <= 20; i++)
		pw42[i] = pw42[i - 1] * 42ll;

	t.init(1, n, 0);
	for(int i = 0; i < q; i++)
	{
		int type;
		cin >> type;

		if(type == 1)
		{
			int pos;
			cin >> pos;
			cout << t.query(pos, 1, n, 0) << endl;
		}
		else if(type == 2)
		{
			int l, r, x;
			cin >> l >> r >> x;
			t.update(l, r, x, 1, n, 0);
		}
		else if(type == 3)
		{
			int l, r, x;
			cin >> l >> r >> x;

			t.add(l, r, x, 1, n, 0);
			while(t.tr[0].mn_diff == 0)
				t.add(l, r, x, 1, n, 0);
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}
