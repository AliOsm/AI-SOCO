#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds;   
#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 
#define ld long double
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define all(a) a.begin(),a.end()
#define sz(a) (ll)(a.size())
#define lp(i,st,ed) for(int i=st;i<ed;i++)
#define rlp(i,ed,st) for(int i=ed;i>=st;i--)
#define pll pair<ll,ll>
int main()
{
	ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
	ll n;
	cin >> n;
	set<pll > S;
	lp(i,0,n)
	{
		ll s,d;
		cin >> s >> d;
		ll e=s+d-1;
		ll f=0;
		for(auto it =S.begin();it!=S.end();it++)
		{
			ll cs=(*it).ff;
			ll ce=(*it).ss;
			if(ce<s)
			{
				continue;
			}
			else if(cs>e)
			{
				S.insert(mp(s,e));
				cout<<s<<" "<<e<<endl;
				f=1;
				break;
			}
			else
			{
				ll pre=1;
				f=1;
				// cout<<i<<endl;
				for(auto it2=S.begin();it2!=S.end();it2++)
				{
					cs=(*it2).ff;
					ce=(*it2).ss;
					// cout<<cs<<endl;
					if(cs-pre>=d)
					{
						S.insert(mp(pre,pre+d-1));
						cout<<pre<<" "<<pre+d-1<<endl;
						break;
					}
					else
					{
						auto it3=S.end();
						it3--;
						if(it2==it3)
						{
							S.insert(mp(ce+1,ce+d));
							cout<<ce+1<<" "<<ce+d<<endl;
							break;
						}
						pre=ce+1;
					}
				}
				break;
			}
		}
		if(f==0)
		{
			S.insert(mp(s,e));
			cout<<s<<" "<<e<<endl;
		}

	}
}