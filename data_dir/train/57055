#include <bits/stdc++.h>

using namespace std;

#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define REV(i,j,k) for(int i=j;i>=k;i--)
#define FORR(i,j,k,l) for(int i=j;i<=k;i+=l)
#define inf         freopen("in.txt", "r", stdin)
#define outf        freopen("out.txt", "w", stdout)
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c)    scanf("%d %d %d", &a, &b, &c)
#define clean(mat,n)   FOR(i,0,n) mat[i].clear()
#define minn          (long long)-1000000000000000000
#define maxx          (long long) 1000000000000000000
#define mod          1000000007
#define M_PI           3.14159265358979323846  /* pi */
#define LL           long long
#define NL '\n'
#define cnd tree[idx]
#define lnd (idx<<1)
#define rnd ((idx<<1)+1)
#define PB push_back
#define F first
#define S second
#define MAX 300010
#define MP make_pair
#define valid(nx,ny)  ((nx >= 0) && (nx < row) && (ny >= 0) && (ny < col))
typedef pair<int,int> pr;

LL ar[MAX], ti[MAX], can[MAX], doit[MAX], br[MAX];
int n;

LL val(int p,int b)
{
    LL ret = ti[b];
    if(p != 0) ret -= ti[p - 1];

    return ret;
}

int check(int p)
{
    LL x = ar[p], y, z, ret = p;
    int st = p, en = n - 1, mid;

    while(st <= en)
    {
        mid = (st + en)>>1;
        ///cout << p << ' ' << mid << ' ' << val(p, mid) << endl;
        if(val(p, mid) <= ar[p]) st = mid + 1, ret = max(ret, (LL)mid);
        else en = mid - 1;
    }

    return ret;
}

int main()
{
    ios::sync_with_stdio(false);
    ///inf;
    ///outf;

    LL c = 0, a;

    cin >> n;
    FOR(i,0,n-1) cin >> ar[i];
    FOR(i,0,n-1) cin >> a, c += a, ti[i] = c, br[i] = a;
    ///FOR(i,0,n-1) cout << ti[i] << ' ';
    //cout << endl;

    FOR(i,0,n-1)
    {
        if(br[i] > ar[i]) can[i] += ar[i];
        else
        {
            int x = check(i);
           /// cout << i << ' ' << x << endl;
            LL y = val(i, x);
          //  cout << ar[i] - y << endl;

            can[x + 1] += (ar[i] - y);
            doit[i]++;
            doit[x + 1]--;

            ///cout << i << ' ' << x << endl;
        }
    }

    c = 0;
    FOR(i,0,n-1)
    {
        c += doit[i];
       // cout << i << ' ' << c << endl;
        can[i] += (c * br[i]);

        cout << can[i] << ' ';
    }


    return 0;
}