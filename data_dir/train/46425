#include<bits/stdc++.h>
using namespace std;

#define MOD           998244353
#define pi            acos(-1)
#define int           long long 
#define D             double
#define S             second
#define F             first
#define pb            push_back
#define ff            fflush(stdout)
#define ppb           pop_back
#define B(c)          (c).begin()
#define E(c)          (c).end()
#define all(c)        (c).begin(),(c).end()
#define rall(c)       (c).rbegin(),(c).rend() 
#define lb            lower_bound
#define ub            upper_bound
#define si(c)         (int)((c).size())
#define L(c)           c[si(c)-1]
#define gcd(a,b)      __gcd(a,b)
#define lcm(a,b)      (a*(b/gcd(a,b)))  
#define accuracy      cout << fixed << setprecision(18);
#define inf           (int)2e18
#define pow(i,n)      (int)pow((int)i,n)
#define err           cerr<<"move"<<'\n';
#define print         cout<<"move"<<'\n';
#define en            '\n'

typedef vector<int>                           vi;
typedef pair<int,int>                         pii;
typedef vector<pii>                           vpi;
typedef pair<int,pii>                         pipii;
typedef vector<vector<int> >                  vvi;
typedef map<int,int>                          mp;
typedef map<string,int>                       msi;
typedef priority_queue<pii, vector<pii>, greater<pii> > pq;

inline  void normal(int &a) { a = (a+MOD)%MOD; }
inline  int modMul(int a, int b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a*b)%MOD; }
inline  int modAdd(int a, int b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a+b)%MOD; }
inline  int modSub(int a, int b) { a %= MOD, b %= MOD; normal(a), normal(b); a -= b; normal(a); return a; }
inline  int modPow(int b, int p) { int r = 1; while(p) { if(p&1) r = modMul(r, b); b = modMul(b, b); p >>= 1; } return r; }
inline  int modInv(int a) { return modPow(a, MOD-2); }
inline  int modDiv(int a,int b) { return modMul(a, modInv(b)); }

const int N=1e3+5;
int fac[N],infac[N];

void pre(){
    fac[0]=infac[0]=1;
    for(int i=1;i<N;i++){
        fac[i]=modMul(fac[i-1],i);
        infac[i]=modMul(infac[i-1],modInv(i));
    }
}

int ncr(int n,int r){
    return modMul(fac[n],modMul(infac[n-r],infac[r]));
}

void solve(){
    int n,ans=0;
    cin>>n;
    int a[n+1],dp[n+1]={0};
    for(int i=1;i<=n;i++){
        cin>>a[i];
    }
    dp[n+1]=1;
    for(int i=n-1;i>0;i--){
        if(a[i]<1)continue;
        for(int j=i+a[i]+1;j<=n+1;j++){
            int len=j-i-1;
            dp[i]+=modMul(dp[j],ncr(len,a[i]));
        }
    }
    for(int i=1;i<=n;i++){
        ans=modAdd(ans,dp[i]);
    }
    cout<<ans<<endl;
}
 
signed main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);    
    int t=1;
    //accuracy;
   
   // cin>>t;
    pre();
    while(t--){
        solve();
    }
}