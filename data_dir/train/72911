#include <bits/stdc++.h>
#define ll long long
#define str string
#define rtn return
#define endl '\n'
#define xx first
#define yy second
#define pb push_back
#define db double
#define loop(i,a,b) for(ll i=(a); i<(b); i++)
#define rep(i, b) for(ll i=(0); i<(b); i++)
#define rloop(i, a, b) for(ll i=b-1; i>=a; i--)
#define rrep(i, a) for(ll i=(a-1); i>=0; i--)

using namespace std;

ll seg[808080], a[202020];
ll lazy[808080];
ll n, q;

void build(int node, int st, int en) {
	if (st == en) {
		seg[node] = a[st];
		return;
	}
	int mid = (st + en);
	mid /= 2;
	build(2*node, st, mid);
	build(2*node + 1, mid + 1, en);
	seg[node] = min(seg[2 * node], seg[2*node + 1]);
}

ll query(int node, int st, int en, int i, int j) {
	if(st > j || en < i) return 1e15;
	if (lazy[node] != 0) {
		seg[node] += lazy[node];
		if (st != en){
			lazy[node*2] += lazy[node];
			lazy[node*2+1] += lazy[node];
		}
		lazy[node]=0;
	}
	if (i <= st && en <= j) {
        return seg[node];
	}
	int mid = (st + en);
	mid /= 2;
	ll q1=query(node*2, st, mid, i, j);
	ll q2=query(node*2+1, mid+1, en, i, j);
	return min(q1,q2);
}

void update(int node, int a, int b, int i, int j, ll inc) {
	if (lazy[node]!=0) {
		seg[node]+=lazy[node];
		if (a!=b) {
			lazy[node*2]+=lazy[node];
			lazy[node*2+1]+=lazy[node];
		}
		lazy[node]=0;
	}
	if(a>b||a>j||b<i) return;
	if (i <= a && b <= j) {
		seg[node]+=inc;
		if (a!=b) {
			lazy[node*2]+=inc;
			lazy[node*2+1]+=inc;
		}
		return;
	}
	int mid = (a+b)/2;
	update(node*2, a, mid, i, j, inc);
	update(node*2+1, mid+1, b, i, j, inc);
	seg[node] = min(seg[node*2], seg[node*2+1]);
}

vector<int> parse(str s, int n) {
    vector<int> ans;
    int sp = 0;
    int neg = 0;
    rep (i, n) if (s[i] == ' ') sp++;
    rep (i, n) if (s[i] == '-') neg = 1;
    int i = 0, val = 0;
    if (sp == 1) {
        while (i < n) {
            if (s[i] == ' ') {
                ans.pb(val);
                val = 0;
                i++;
                continue;
            }
            val = val * 10 + s[i] - '0';
            i++;
        }
        ans.pb(val);
    } else if (sp == 2) {
        while (i < n) {
            if (s[i] == ' ') {
                ans.pb(val);
                val = 0;
                i++;
                continue;
            } else if (s[i] == '-') {
                i++;
                continue;
            }
            val = val * 10 + s[i] - '0';
            i++;
        }
        if (neg) val = -val;
        ans.pb(val);
    }
    rtn ans;
}

int main() {
    /*std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);*/
    //stat
    rep (i, 404040) seg[i] = 1e18;
    cin >> n;
    rep (i, n) cin >> a[i+1];
    build (1, 1, n);
    cin >> q;
    getchar();
    while (q--) {
        str s;
        getline(cin, s);
        vector<int> x = parse(s, s.size());
        int ax, bx, cx;
        ax = x[0]+1;
        bx = x[1]+1;
        if (x.size() == 2) {
            if (ax <= bx) cout << query(1, 1, n, ax, bx) << endl;
            else {
                int q1 = query(1, 1, n, ax, n);
                int q2 = query(1, 1, n, 1, bx);
                cout << min(q1, q2) << endl;
            }
        } else {
            cx = x[2];
            if (ax <= bx) {
                update(1, 1, n, ax, bx, cx);
            } else {
                update(1, 1, n, ax, n, cx);
                update(1, 1, n, 1, bx, cx);
            }
        }
    }

    return 0;
}
