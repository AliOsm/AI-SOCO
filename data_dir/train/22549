#include <cstdio>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cctype>
#include <cassert>
#include <ciso646>
#include <climits>
#include <cmath>


#include <algorithm>
#include <utility>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <map>
#include <queue>
#include <stack>
#include <set>
#include <deque>
#include <bitset>

using namespace std;
typedef long long ll;
typedef std::pair< int, int > pii;
typedef std::vector< int > vi;
typedef std::vector< pii > vii ;
 
#define fi first
#define se second
#define all(x)  (x).begin(), (x).end()

double const EPS = 1.0E-9 ;
int const MOD    = (int)1e9 + 7 ;

inline void  read(int&x){  scanf("%d", & ( x ) ); }
inline void read(ll&x){ scanf("%lld",&x); }
inline void read(double &x){ scanf("%lf", &x); }
inline ll gcd(ll x,ll y) { return y == 0 ? x : gcd(y, x%y); }
inline ll lcm(ll x, ll y){ return x == 0 && y == 0  ? 0 : x/gcd(x,y) * y; }
inline ll powmod(ll x, ll n, ll m = MOD ) {
    ll r = 1;
    while(n){
        if (n&1) r = (r*x)%m;
        x = (x*x)%m;
        n/=2;
    }
    return r;
}
int leap(int y){  return y % 4 == 0 && y% 100 != 0  || y % 400 == 0 ; }

int const month[2][12] = { 
    { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 },
    { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
};
  

/********************************************************/
int const MAXN   = 1 << 19  ;
int const MAXV   = 26 * 2 + 10 + 1;
 
char s[MAXN];
int n;


int solve()
{  
    read(n);
    std::map< pii, int > mp;
    for(int i = 0 ; i < n; ++i){
        scanf("%s", s ) ;
       // printf("s = '%s' ", s ) ;
        
        int l = 0, r = 0  ;
        
        for(int j = 0; s[j]; ++j)
        {
            switch(s[j]){
                case '(' : 
                {
                    ++r;
                }
                break;
                case ')' :
                {
                    if ( r > 0 ) 
                        --r;
                    else
                        ++l;
                }
                break;
                default:
                {
         //           printf("unexpected symbol: %c\n", s[j]);
                }
                break;
            }
        } 
       // printf("  l = %d  r = %d\n", l, r) ;
        ++mp[pii(l,r)];
    }
    
    ll ans = 0;
    for(auto p : mp ) {
        
        int l = p.first.first, r = p.first.second;
      //  printf("( %d %d => %d ) \n", l, r, p.second ) ;
        //  s[i] + s[j] .  cur = j.
        // r == 0. and need  (0, l)
        if (r == 0 && mp.count(pii(0,l)) ) {
            ans += mp[ pii( 0, l)  ] * 1ll * p.second ;
        }
        
//        // cur = i.  l == 0  and need (r, 0) 
//        if ( l == 0 && mp.count(pii(r, 0) ) ) {
//            ans += p.second * 1ll * mp[pii(r, 0)] ;
//        }
        
        
    }
    
//    // now l == 0 and r == 0.  we add they twice.
//    if (mp.count(pii(0,0) ) ) {
//        ll cnt = mp[pii(0,0)] ;
//        ans -= cnt * cnt ;
//    }
    
    printf("%lld\n", ans ) ;
    
    
    return 0;
}

int main(int argc, char * argv[] ) 
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
#endif //end online-judge    
  
    
    solve();
    return 0;
}