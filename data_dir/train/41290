#include <bits/stdc++.h>

using namespace std;

const int N = 2e5 + 5;
int n, q, pa[N], t[N], conv[N], treeSz[N];
vector<int> g[N];

int dfsCnt = 1;

int transform(int u = 1, int fa = -1) {
	conv[u] = dfsCnt++;
	int cnta = 1;
	for (int v : g[u]) {
		if (v == fa) continue;
		cnta += transform(v, u);
	}
	return treeSz[conv[u]] = cnta;
}

namespace Seg {
	int s[4 * N], lazy[4 * N], a[4 * N];

	int combine(int value_1, int value_2) {
		return value_1 + value_2;
	}
	
	void build(int l, int r, int id) {
		if (l == r) {
			s[id] = a[l];
		}
		else {
			int mid = (l + r) / 2;
			build(l, mid, id * 2);
			build(mid + 1, r, id * 2 + 1);
			s[id] = combine(s[id * 2], s[id * 2 + 1]);
		}
	}

	void upd(int id, int l, int r, int val) {
		lazy[id] ^= val;
		s[id] = r - l + 1 - s[id]; // s[id] = numChild[id] - s[id]
	}

	void shift(int id, int l, int r) {
		if (lazy[id]) {
			int mid = (l + r) / 2;
			upd(id * 2, l, mid, lazy[id]);
			upd(id * 2 + 1, mid + 1, r, lazy[id]);
			lazy[id] = 0;
		}
	}

	/* xor range [x, y] by val */
	void update(int x, int y, int l, int r, int id, int val) {
		if (l >= x && r <= y) {
			upd(id, l, r, val);
			return;
		}
		if (y < l || x > r) return;
		shift(id, l, r); // pass lazy updates to children
		int mid = (l + r) / 2;
		update(x, y, l, mid, id * 2, val);
		update(x, y, mid + 1, r, id * 2 + 1, val);
		s[id] = combine(s[id * 2], s[id * 2 + 1]);
	}

	int query(int x, int y, int l, int r, int id) {
		if (l >= x && r <= y) {
			return s[id];
		}
		if (y < l || x > r) return 0;
		shift(id, l, r);
		int mid = (l + r) / 2;
		return combine(query(x, y, l, mid, id * 2), query(x, y, mid + 1, r, id * 2 + 1));
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin >> n;
	for (int i = 2; i <= n; i++) {
		cin >> pa[i];
		g[i].push_back(pa[i]);
		g[pa[i]].push_back(i);
	}
	for (int i = 1; i <= n; i++) {
		cin >> t[i];
	}
	transform();
	for (int i = 1; i <= n; i++) {
		Seg::a[conv[i]] = t[i];
	}
	Seg::build(1, n, 1);
	cin >> q;
	for (int j = 0; j < q; j++) {
		string instruction;
		int node;
		cin >> instruction >> node;
		int l = conv[node];
		int r = l + treeSz[l] - 1;
		// cout << l << " " << r << endl;
		if (instruction == "pow") {
			Seg::update(l, r, 1, n, 1, 1);
		}
		else {
			cout << Seg::query(l, r, 1, n, 1) << endl;
		}
	}
	return 0;
}