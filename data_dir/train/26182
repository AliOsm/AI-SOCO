#include <bits/stdc++.h>

using namespace std;

struct point
{
	int x, y, z, idx;
	point(int x, int y, int z, int idx){
		this->x = x; this->y = y;
		this->z = z; this->idx = idx;
	}

	bool operator== (point pt) const {
		return x == pt.x && y == pt.y;
	}

	bool operator< (point pt) const {
		if (x != pt.x) return x < pt.x;
		if (y != pt.y) return y < pt.y;
		return z < pt.z;
	}
};

vector< pair<int, int> > Ans;

int main()
{
	int n;	scanf("%d", &n);

	set<point> pt;
	for (int i = 1; i <= n; i++) {
		int x, y, z;
		scanf("%d%d%d", &x, &y, &z);
	
		pt.insert(point(x, y, z, i));
	}

	point INF = point(-1e9, 0, 0, 0);
	point Last = INF;

	vector<point> del;
	for (auto p : pt) 
		if (Last == p) {
			printf("%d %d\n", p.idx, Last.idx);
			
			del.push_back(p);
			del.push_back(Last);

			Last = INF;
		} else Last = p;

	for (auto i : del)	pt.erase(i);	del.clear();
	
	Last = INF;
	for (auto p : pt) 
		if (p.x == Last.x) {
			printf("%d %d\n", p.idx, Last.idx);
			
			del.push_back(p);
			del.push_back(Last);

			Last = INF;
		} else Last = p;

	for (auto i : del)	pt.erase(i);

	while (pt.size())
	{
		point a = *pt.begin();	pt.erase(pt.begin());
		point b = *pt.begin();	pt.erase(pt.begin());
	
		printf("%d %d\n", a.idx, b.idx);
	}
	
	return 0;
}
