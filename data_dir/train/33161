#pragma comment(linker, "/STACK:134217728")

#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <functional>
#include <map>
#include <set>
#include <memory.h>
#include <cmath>
#include <cstdio>
#include <string>

using namespace std;

typedef long long LL;

int n, m, Q;

vector<int> G[1 << 19];

int qh, qt;
int q[1 << 19];
int d[1 << 19];
int u[1 << 19];
int path[1 << 19];
int used[1 << 19];
int N;

void bfs(int v, int c)
{
	qh = qt = 0;
	q[qt++] = v;
	used[v] = c;
	d[v] = 0;
	N = 0;
	while (qh < qt)
	{
		int v = q[qh++];
		u[N++] = v;
		for(int i = 0; i < G[v].size(); ++i)
		{
			int to = G[v][i];
			if (used[to] != c)
			{
				q[qt++] = to;
				used[to] = c;
				d[to] = d[v] + 1;
			}
		}
	}
}

int p[1 << 19];
int r[1 << 19];

void make(int v)
{
	p[v] = v;
	r[v] = 0;
}

int find(int v)
{
	return p[v] != v ? p[v] = find(p[v]) : v;
}

int update(int a, int b)
{
	if (a & 1)
	{
		if (b & 1)
			return max(max(a, b), (a + 1) / 2 + (b + 1) / 2 + 1);
		else
			return max(max(a, b), (a + 1) / 2 + b / 2 + 1);
	}
	else
	{
		if (b & 1)
			return max(max(a, b), a / 2 + (b + 1) / 2 + 1);
		else
			return max(max(a, b), (a + b) / 2 + 1);
	}
	return -1;
}

void unite(int x, int y)
{
	x = find(x);
	y = find(y);
	if (r[x] > r[y])
	{
		p[y] = x;
		path[x] = update(path[x], path[y]);
	}
	else
	{
		p[x] = y;
		path[y] = update(path[x], path[y]);
		if (r[x] == r[y])
			r[y]++;
	}
}

int main()
{
	scanf("%d%d%d", &n, &m, &Q);
	for(int i = 0; i < m; ++i)
	{
		int u, v;
		scanf("%d%d", &u, &v);
		u--, v--;
		G[u].push_back(v);
		G[v].push_back(u);
	}
	for(int i = 0; i < n; ++i)
		make(i);
	for(int i = 0; i < n; ++i)
	{
		for(int j = 0; j < G[i].size(); ++j)
		{
			int to = G[i][j];
			unite(i, to);
		}
	}
	for(int i = 0; i < n; ++i)
		if (!used[i])
		{
			bfs(i, 1);
			int MAX = i;
			for(int j = 0; j < N; ++j)
				if (d[MAX] < d[u[j]])
					MAX = u[j];
			bfs(MAX, 2);
			MAX = 0;
			for(int j = 0; j < N; ++j)
				MAX = max(MAX, d[u[j]]);
			for(int j = 0; j < N; ++j)
				path[u[j]] = MAX;
		}
	for(int i = 0; i < Q; ++i)
	{
		int t, x, y;
		scanf("%d", &t);
		if (t == 1)
		{
			scanf("%d", &x);
			x--;
			printf("%d\n", path[find(x)]);
		}
		else
		{
			scanf("%d%d", &x, &y);
			x--, y--;
			if (find(x) != find(y))
				unite(x, y);
		}
	}
	return 0;
}