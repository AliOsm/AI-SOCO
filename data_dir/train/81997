                /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
const ll mod=1e9+7;         
const int N=2e5+4;

vector<int> v[N];

int a,b,c,mx=0,total=0;

void dfs1(int node,int par,int dep)
{
    if(dep>mx)
    mx=dep,a=node;
    
    for(int it:v[node])
    if(it!=par)
    dfs1(it,node,dep+1);
}

void dfs2(int node,int par,int dep)
{
    if(dep>mx)
    mx=dep,b=node;
    
    for(int it:v[node])
    if(it!=par)
    dfs2(it,node,dep+1);
}

int dist[N];

vector<int> tv;

void travel_path(int node,int par)
{
    tv.pb(node);
    
    if(node==b)
    {
        for(int it:tv)
        dist[it]=-1;
    }
    
    for(int it:v[node])
    if(it!=par)
    travel_path(it,node);
    
    tv.pop_back();
}

void dfs3(int node,int par)
{
    if(node!=a and node!=b)
    {
        if(dist[node]>=mx)
        mx=dist[node],c=node;
        
    }
    
    for(int it:v[node])
    if(it!=par)
    {
        if(dist[it]!=-1)
        {
            if(dist[node]==-1)
            dist[it]=1;
            else
            dist[it]=dist[node]+1;
        }
        
        dfs3(it,node);
    }
}

int main()
{
    int n;
    
    scn(n);
    
    rep(i,0,n-1)
    {
        int x,y;
        
        scn(x); scn(y);
        
        v[x].pb(y);
        
        v[y].pb(x);
    }
    
    dfs1(1,-1,0);
    
    mx=0;
    
    dfs2(a,-1,0);
    
    travel_path(a,-1);
    
    total=mx;
    
    mx=-1;
    
    dfs3(a,-1);
    
    if(mx>-1)
    total+=mx;
    
    cout<<total<<endl;
    
    cout<<a<<" "<<b<<" "<<c;
    
    return 0;
}