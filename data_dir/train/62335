#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;
const int N = 300001;
const int mod = (int) 1e9 + 7;

int n, q;
vvi adj;
int Enter[N], Exit[N], Level[N];
int cnt = 1;

void dfs(int cur, int lvl) {
    Enter[cur] = cnt++;
    Level[cur] = lvl;
    for (int i = 0; i < SZ(adj[cur]); i++) {
        dfs(adj[cur][i], lvl + 1);
    }
    Exit[cur] = cnt++;
}

ll BIT[2][1 << 20];

void add(int idx, ll val, int p) {
    for (int i = idx; i < 2 * N; i += i & -i)
        (BIT[p][i] += val) %= mod;
}

ll get(int idx, int p) {
    ll val = 0;
    for (int i = idx; i; i -= i & -i)
        (val += BIT[p][i]) %= mod;
    return val;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
#ifndef ONLINE_JUDGE
    freopen("in.txt", "rt", stdin);
//  freopen("out.txt", "wt", stdout);
#endif
    cin >> n;
    adj.resize(n);
    for (int i = 1; i < n; i++) {
        int p;
        cin >> p;
        adj[p - 1].pb(i);
    }
    dfs(0, 0);
    cin >> q;
    while (q--) {
        int t, v, x, k;
        cin >> t >> v;
        v--;
        if (t == 1) {
            cin >> x >> k;
            add(Enter[v], (x + (k * 1LL * Level[v]) % mod) % mod, 0);
            add(Exit[v] + 1, mod - (x + (k * 1LL * Level[v]) % mod) % mod, 0);
            add(Enter[v], k, 1);
            add(Exit[v] + 1, mod - k, 1);
        } else {
            ll res = ((get(Enter[v], 0) - (get(Enter[v], 1) * Level[v]) % mod) % mod + mod) % mod;
            cout << res << "\n";
        }
    }
    return 0;
}
