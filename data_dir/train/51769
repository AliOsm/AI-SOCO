#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <string.h>
#include <vector>
#include <map>
#include <set>
#include <list>
#include <deque>
#include <queue>
#include <sstream>

using namespace std;

#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define ppb pop_back
#define rept(i,c) for (auto i=(c).begin(); i!=(c).end(); i++)

#define task "a"

typedef long long ll;
typedef pair<int,int> pii;

const int maxN=200500;
const int INF=(int)1e9;
const int MOD = 7+(int)1e9;
const double eps = 1e-9;

int P[maxN];

void toP(int n, int d) {
	for (int i = 2; i*i <= n; i++) {
		while (n%i == 0) {
			n /= i;
			P[i] += d;
		}
	}
	if(n > 1) {
		P[n] += d;
	}
}
void fact (int n, int d){ 
	for (int i = 2; i <= n; i++) {
		toP(i, d);
	}
}
void C(int n, int k) {
	fact(n, 1);
	fact(n - k, -1);
	fact(k, -1);
}
map<int,int> A;
map<int,int> B;
map<pii, int> M;
ll mod;
ll pow_(ll a, int q) {
	ll res = 1;
	while(q > 0) {
		if(q&1) {
			res = (res * a) % mod;
		}
		q /= 2;
		a = (a*a)%mod;	
	}
	return res;
}
ll calcP() {
	ll res = 1;
	for (int i = 2; i < maxN; i++) {
		res = (res * pow_(i, P[i]))%mod;
	}
	return res;
}
int main(void){
  //  freopen(task".in", "r",stdin); freopen(task".out","w",stdout);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		int a;
		cin >> a;
		A[a]++;
		M[mp(a,i)]++;
	}
	for (int i = 0; i < n; i++) {
		int b;
		cin >> b;
		B[b]++;
		M[mp(b,i)]++;
	}
	cin >> mod;
	rept(it, A) {
		int a = (*it).fi;
		fact(A[a] + B[a], 1);
		A[a] = 0, B[a] = 0;
	}
	rept(it, B) {
		int a = (*it).fi;
		fact(A[a] + B[a], 1);
		A[a] = 0, B[a] = 0;
	}
	rept(it, M) {
		toP((*it).se, -1);
	}
	cout << calcP() << endl;
	return 0;
}