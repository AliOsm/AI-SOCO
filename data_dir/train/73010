//const int N = 1e5+5;
//ll dp[N];
//ll f(ll n){
//    return dp[n];
//}
//void _(){
//    dp[0] = 1;
//    dp[1] = 1;
//    rep(i,2,N-1)
//        dp[i] = (dp[i-1]+dp[i-2])%MOD;
//    string s;
//    cin >> s;
//    vector<string> splits;
//    string tmp;
//    for(char c : s){
//        if(!tmp.empty() && c != tmp.back()){
//            splits.pb(tmp);
//            tmp.clear();
//        }
//        tmp.pb(c);
//    }
//    if(!tmp.empty())
//        splits.pb(tmp);
//    ll ans = 1;
//    for(string s : splits){
//        if(s[0] == 'n' || s[0] == 'u')
//            ans = ans * f(sz(s)) % MOD;
//        if(s[0] == 'm' || s[0] == 'w')
//            ans = 0;
//    }
//    print(ans);
//
//}
//
#include <iomanip>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define REP_INT(i,l,r) for(int i = l; i <= r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
const ll MOD = 1e9 + 7;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
T1 void print(T x, string end = "\n"){
    cout << x << end;
}
const int N = 1e5+5;
ll dp[N];
ll f(ll n){
    return dp[n];
}
void _(){
    dp[0] = 1;
    dp[1] = 1;
    rep(i,2,N-1)
        dp[i] = (dp[i-1]+dp[i-2])%MOD;
    string s;
    cin >> s;
    vector<string> splits;
    string tmp;
    for(char c : s){
        if(!tmp.empty() && c != tmp.back()){
            splits.pb(tmp);
            tmp.clear();
        }
        tmp.pb(c);
    }
    if(!tmp.empty())
        splits.pb(tmp);
    ll ans = 1;
    for(string s : splits){
        if(s[0] == 'n' || s[0] == 'u')
            ans = ans * f(sz(s)) % MOD;
        if(s[0] == 'm' || s[0] == 'w')
            ans = 0;
    }
    print(ans);
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
