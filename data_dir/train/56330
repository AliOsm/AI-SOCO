//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")
#pragma comment(linker, "/STACK:64777216")

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cassert>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair <int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-9;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 0 && x < n && y >= 0 && y < m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

const int dx8[8] = { -1, -1, 0, +1, +1, +1, 0, -1 };
const int dy8[8] = { 0, +1, +1, +1, 0, -1, -1, -1 };

const int N = int(2e5) + 555;

int n, a[N], b[N];

void gen() {

}

bool read() {
	if (scanf("%d", &n) != 1) return false;
	forn(i, n) assert(scanf("%d %d", &a[i], &b[i]) == 2);
	return true;
}

pt res[N];

li naive() {
	vector<int> p(n);
	set<li> s;
	li ans = INF64;
	forn(i, n) p[i] = i;
	vector<int> v;
	do {
		li cur = 0;
		forn(ii, n) {
			int i = p[ii];
			cur += ii * 1LL * a[i] + (n - ii - 1) * 1LL * b[i];
		}

		ans = min(ans, cur);
		if (ans == cur) v = p;
		//s.insert(cur);
		//cerr << "cur == " << cur << endl;
	} while (next_permutation(all(p)));

	/*
	cout << ans << endl;
	cerr << "szs == " << sz(s) << endl;
	cerr << "v == " << endl;
	forn(i, sz(v)) res[i] = pt(a[v[i]], b[v[i]]);
	forn(i, n) cerr << res[i].x << ' ' << res[i].y << endl;
	*/

	return ans;
}

pair<pt, int> aa[N], bb[N];

bool cmp1(const pair<pt, int>& a, const pair<pt, int>& b) {
	pt p1 = a.x, p2 = b.x;
	if (p1.x != p2.x) return p1.x > p2.x;
	return p1.y < p2.y;
}

bool cmp2(const pair<pt, int>& a, const pair<pt, int>& b) {
	pt p1 = a.x, p2 = b.x;
	if (p1.y != p2.y) return p1.y < p2.y;
	return p1.x > p2.x;
}

bool used[N];

bool cmp3(const pt& a, const pt& b) {
	return a.x + b.y < a.y + b.x;
}

pt ar[N];

li calc2() {
	forn(i, n) ar[i] = pt(a[i], b[i]);
	sort(ar, ar + n, cmp3);
	li ans = 0;
	int ma = 0, mb = n - 1;
	int j = n - 1;
	for (int i = 0; i < n / 2; i++) {
		int s1 = ar[i].x + ar[j].y;
		int s2 = ar[i].y + ar[j].x;
		if (s1 < s2) swap(s1, s2);
		ans += ma * 1LL * s1 + mb * 1LL * s2;
		ma++;
		mb--;
		j--;
	}

	if (n % 2 == 1) ans += (n / 2) * 1LL * ar[j].x + (n / 2) * 1LL * ar[j].y;
	return ans;
}

li calc() {
	forn(i, n) aa[i] = mp(pt(a[i], b[i]), i);
	forn(i, n) bb[i] = aa[i];
	sort(aa, aa + n, cmp1);
	sort(bb, bb + n, cmp2);
	//forn(i, n) cerr << aa[i].x.x << ' ' << aa[i].x.y << endl;
	li ans = 0;
	int ptr = 0;
	int ma = 0, mb = n - 1;
	forn(ii, n) {
		int i = aa[ii].y;
		if (used[i]) continue;
		li sa = 0, sb = 0;
		used[i] = true;
		pt p1 = aa[ii].x;
		//cerr << "p1 == " << p1.x << ' ' << p1.y << endl;
		while (ptr < n && used[bb[ptr].y]) ptr++;
		if (ptr >= n) {
			ans += p1.x * 1LL * ma + p1.y * 1LL * mb;
		}
		else {
			used[bb[ptr].y] = true;
			pt p2 = bb[ptr].x;
			//cerr << "p2 == " << p2.x << ' ' << p2.y << endl;
			int s1 = p1.x + p2.y;
			int s2 = p1.y + p2.x;
			if (s1 < s2) {
				//cerr << "SWAP" << endl;
				swap(s1, s2);
			}
			//cerr << "ma mb s1 s2 == " << ma << ' ' << mb << ' ' << s1 << ' ' << s2 << endl;
			ans += s1 * 1LL * ma + s2 * 1LL * mb;
		}

		ma++;
		mb--;
	}

	return ans;
}

void solve() {
	//li ans = calc();
	li res = calc2();
	//cerr << "res == " << res << endl;
	cout << res << endl;
}

ld gett() {
	return ld(clock()) / CLOCKS_PER_SEC;
}

int main() {
#ifdef _DEBUG
	(freopen("input.txt", "rt", stdin));
	(freopen("output.txt", "wt", stdout));
#endif

	cout << setprecision(15) << fixed;
	cerr << setprecision(15) << fixed;

	int T = 1;
	//T = 10000;

	srand(int(time(NULL)));

	//(scanf("%d", &T) == 1);

	forn(i, T) {
#ifdef _DEBUG
		cerr << "TEST == " << i << endl;
#endif
#ifdef _DEBUG 
		assert(read());
#else
		(read());
#endif
		//cout << "Case #" << i + 1 << ": ";
		solve();
#ifdef _DEBUG
		cerr << "curTime == " << clock() << " ms" << endl;
#endif
		//break;
	}

#ifdef _DEBUG
	cerr << "TIME == " << clock() << " ms" << endl;
#endif

	cerr << "TIME == " << gett() << " s" << endl;
	return 0;
}