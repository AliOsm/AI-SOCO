#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <bitset>
#define f first
#define s second
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define vi vector <int>
#define pii pair<int, int>
using namespace std;          
const int N = int(1e6) + 10; 
int n,q,tin[N],tout[N],T;
vector <int> g[N];
bool used[N];
ll t[4*N], u[4*N];
int c[N];

void dfs(int v){
	used[v] = 1;
	tin[v] = ++T;
	for(int i=0;i<g[v].size();i++){
		int to = g[v][i];
		if(!used[to]){
			dfs(to);
		}
	}
	tout[v] = T;
}

void push(int v,int tl,int tr){
	int tm = (tl + tr) / 2;
	if(u[v] != 0){
		u[v+v] = u[v];
		t[v+v] = u[v];
		u[v+v+1] = u[v];
		t[v+v+1] = u[v];
		u[v] = 0;  
	}
}

void upd(int i,int v,int tl,int tr,int l,int r){
	if(tl > r || l > tr) return;
	push(v,tl,tr);
	if(l <= tl && tr <= r){
		t[v] = (1ll<<i);
		u[v] = t[v];
		return;
	}
	int tm = (tl + tr) / 2;
	upd(i,v*2,tl,tm,l,r);
	upd(i,v*2+1,tm+1,tr,l,r);
	t[v] = t[2*v] | t[2*v + 1];
}

ll sum(int v,int tl,int tr,int l,int r){
	if(tl > r || l > tr) return 0;
	push(v,tl,tr);
	if(l <= tl && tr <= r) return t[v];
	int tm = (tl + tr) / 2;
	return sum(v*2,tl,tm,l,r) | sum(v*2+1,tm+1,tr,l,r);
}



int main () {
	scanf("%d%d",&n,&q);
	memset(u,-1,sizeof(u));
	for(int i=1;i<=n;i++){
		scanf("%d",&c[i]);
	}
	T = 1;
	for(int i=1,u,v;i<n;i++){
		scanf("%d%d",&u,&v);
		g[u].pb(v);
		g[v].pb(u);
	}
	dfs(1);
	for(int i=1;i<=n;i++){
		upd(c[i],1,1,T,tin[i],tin[i]);
	}
	int cv;
	ll res = 0;
	for(int i=1,tp,v;i<=q;i++){
		scanf("%d%d",&tp,&v);
		if(tp == 1){
			scanf("%d",&cv);
			upd(cv,1,1,T,tin[v],tout[v]);
		}
		else{
			res = sum(1,1,T,tin[v],tout[v]);
			printf("%d\n",__builtin_popcountll(res));
		}
	
	}

return 0;
}