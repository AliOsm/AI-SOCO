#include <bits/stdc++.h>
using namespace std;
#define read            freopen("C:\\Users\\Dell\\Desktop\\in.txt", "r", stdin)
#define write           freopen("C:\\Users\\Dell\\Desktop\\out.txt", "w", stdout)
#define pii             pair<int , int >
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pn              printf("\n")
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b ,c)    printf("%d %d %d\n", a, b, c)
#define MP              make_pair
#define vi              vector<int >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define MEM(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)

// Debugger.begin()

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); pn;}
vector<string> split(const string& s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c))
		v.emplace_back(x);
	return move(v);
}

void err(vector<string>::iterator it) {}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

// Debugger.end()

typedef long long LL;
static constexpr int inf = std::numeric_limits<int >::max();
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//int  on(int n, int pos) {return n | (1<<pos);} //typecast 1 in case of int
//int  off(int n, int pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

const int M=5010, N=200000;
int A[M], bad[M], smallest[M], G[M];
bool t[N];
vi p;
map<int, int>isbad;
int gcd(int a, int b)
{
    return b==0?a:gcd(b, a%b);
}
void find_primes()
{
    for (LL i=0; i<N; i++) t[i]=true;
    for (LL i=2; i<N; i++)
    {
        if (t[i])
        {
            p.pb(i);
            for (LL j=i*i; j<N; j+=i) t[j]=false;
        }
    }
}
int find_smallest(int n)
{
    int i=0, f=false;
    while (i<p.sz)
    {
        if (n%p[i]==0) return p[i];
        i++;
    }
    return n;
}
int div(int n)
{
    int i=0, good=0, bad=0;

    while (i<p.sz)
    {
        while (n%p[i]==0)
        {
            n/=p[i];
            isbad[p[i]]?bad++:good++;
        }
        i++;
    }
    if (n>1) isbad[n]?bad++:good++;

    return bad-good;
}
void upgrade(int n, int m)
{
    int i, j, k;

    for (i=n-1; i>=0; i--)
    {
        k=div(G[i]);
        if (k>0)
        {
            for (j=i; j>=0; j--)
            {
                A[j]/=G[i];
            }
            G[0]=A[0];
            for (j=1; j<n; j++) G[j]=gcd(G[j-1], A[j]);
            i=n-1;
        }
    }
}
int main()
{
#ifndef ONLINE_JUDGE
    read;
#endif
    int n, m, i, j, k;

    in2(n, m);
    for (i=0; i<n; i++) in(A[i]);
    for (i=0; i<m; i++)
    {
        in(bad[i]);
        isbad[bad[i]]=true;
    }

    G[0]=A[0];
    for (i=1; i<n; i++) G[i]=gcd(A[i], G[i-1]);

    find_primes();
    upgrade(n, m);

    //for (i=0; i<n; i++) prs(A[i]);pn;

    int sum=0;
    for (i=0; i<n; i++) sum+=-1*div(A[i]);
    pr(sum);
//
//    if (n==193)
//    {
//        pr(bad[0]);
//        for (i=0; i<n; i++)
//        {
//            prs(A[i]);
//            if (i%30==0) pn;
//        }
//    }

return 0;
}
