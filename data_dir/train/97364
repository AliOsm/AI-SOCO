#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1, class T2>inline void gmax(T1 &a, T2 b) { if (b>a)a = b; }
template <class T1, class T2>inline void gmin(T1 &a, T2 b) { if (b<a)a = b; }
const int N = 2020, M = 0, Z = 1e9 + 7, ms63 = 0x3f3f3f3f;
int n,m;
int a[N], b[N];
int ansk; LL ansv;
int P[6];
void update(int k, LL v,int p1,int p2,int p3,int p4)
{
	v = abs(v);
	if (v < ansv)
	{
		ansv = v;
		ansk = k;
		P[1] = p1;
		P[2] = p2;
		P[3] = p3;
		P[4] = p4;
	}
}
struct B
{
	LL v;
	int p2, p4;
	B() {}
	B(LL v_, int p2_, int p4_) { v = v_; p2 = p2_; p4 = p4_; }
	bool operator < (const B&b)const
	{
		return v < b.v;
	}
};
set<B>sot;
set<B>::iterator it;
int main()
{
	while(~scanf("%d",&n))
	{
		ansv = 1e18;
		LL suma = 0, sumb = 0;
		for (int i = 1; i <= n; ++i)scanf("%d", &a[i]), suma += a[i];
		scanf("%d", &m);
		for (int i = 1; i <= m; ++i)scanf("%d", &b[i]), sumb += b[i];
		update(0, suma - sumb,0,0,0,0);
		for (int i = 1; i <= n; ++i)
		{
			for (int j = 1; j <= m; ++j)
			{
				update(1,(suma-a[i]*2)-(sumb-b[j]*2),i,j,0,0);
			}
		}
		sot.clear();
		for (int i = 1; i < m; ++i)
		{
			for (int j = i + 1; j <= m; ++j)
			{
				sot.insert(B(sumb - b[i]*2 - b[j]*2, i, j));
			}
		}
		for (int i = 1; i <= n; ++i)
		{
			for (int j = i + 1; j <= n; ++j)
			{
				it = sot.lower_bound(B(suma - a[i] * 2 - a[j] * 2, -1, -1));
				if (it != sot.end())update(2, (suma - a[i] * 2 - a[j] * 2 - it->v), i, it->p2, j, it->p4);
				if (it != sot.begin())
				{
					--it;
					update(2, (suma - a[i] * 2 - a[j] * 2 - it->v), i, it->p2, j, it->p4);
				}
			}
		}
		printf("%lld\n", ansv);
		printf("%d\n", ansk);
		for (int i = 1; i <= ansk; ++i)
		{
			printf("%d %d\n", P[i*2-1], P[i*2]);
		}
	}
	return 0;
}
/*
【trick&&吐槽】


【题意】


【类型】


【分析】


【时间复杂度&&优化】


【数据】


*/