#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pf push_front
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("board.in");ofstream out("board.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

ll a,k;
vec<ll> m;

ll ga(ll x){
    if(x<=m[0]) return m[k]-x;
    if(x>=m.back()) return x-m[m.size()-1-k];
    ll p= 0;
    for(;p<a; p++) if(m[p]>=x) break;
    ll l=p-1,r=p;
    ll o = 0;
    for(int q=0; q<k+1; q++){
        if(r==a) o = abs(m[l--]-x);
        else if(l==-1) o = abs(m[r++]-x);
        else{
            o = min(abs(m[l]-x),abs(m[r]-x));
            if(abs(m[l]-x)<abs(m[r]-x)) l--;
            else r++;
        }
        cout<<o<<" ";
    }
    cout<<endl;
    return o;
}

int main() {
    fast;
    ll g; cin>>g;
    for(; g; g--){
        cin>>a>>k;
        m = vec<ll>(a);
        for(int q=0; q<a; q++) cin>>m[q];
        ll d  =1e16, o=0;
        for(int q=0; q+k<a; q++){
            if(m[q+k]-m[q]<d){
                d = m[q+k]-m[q];
                o = (m[q+k]+m[q])/2;
            }
        }
        cout<<o<<endl;
    }
}