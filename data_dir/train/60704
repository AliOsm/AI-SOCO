/*
    Author : harshit15
      Before submission
    - Fast IO
    - mx value
    - int overflow
*/
#include <bits/stdc++.h> 
using namespace std;
#define fl(i,a,b) for(int i=a;i<b;i++)
#define ll long long
#define endl '\n'
#define pb push_back
#define ff first
#define ss second
#define mod 1000003
#define mx  400005
#define mx2 15
#define inf 4e18
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
map<int,int> mp;
int tree[2*mx];
multiset<int > s[mx];
int n = mx - 1;
int h[mx];
void add(int p,int val)
{
	for (tree[p += n] = val; p > 1; p >>= 1) tree[p>>1] = max( tree[p] , tree[p^1]);
}
bool find(int l,int val,int r)
{
	int ans = 0;
	for (l += n, r += n; l < r; l >>= 1, r >>= 1)
	{
		if(l&1) ans = max(ans,tree[l++]);
		if(r&1) ans = max(ans,tree[--r]);
	}
	return ans >= val;
}	 
main()
{
	fast;
	int q;
	cin >> q;
	string sq[q];
	vector<int> v;
	int l[q],r[q];
	fl(i,0,q)
	{
		cin >> sq[i] >> l[i] >>  r[i];
		v.pb(l[i]);
		v.pb(r[i]);
	}	
	v.pb(-1);
	sort(v.begin(), v.end());
	int k = 1;

	fl(i,1,v.size())
	{
		if(v[i] == v[i-1])continue;
		h[k] = v[i];
		mp[v[i]] = k++;
	}
	fl(i,0,mx)
	{
		s[i].insert(0);
	}
	fl(i,0,q)
	{
		int x = mp[l[i]];
		int y = mp[r[i]];

		if(sq[i] == "add")
		{
			s[x].insert(-y);
			add(x,-*s[x].begin());
		}
		else if(sq[i] == "remove")
		{
			s[x].erase(s[x].lower_bound(-y));
			add(x,-*s[x].begin());
		}
		else
		{
			int low = x+1 , high = n-2,mid;
			
			while(low < high)
			{
				int mid = (low + high) / 2;
				if(!find(x + 1,y+1,mid+1))
				{
					low = mid + 1;

				}
				else
				{
					high = mid;
				}
			}
			if(low == n-2)
			{
				cout<<-1<<endl;
			}
			else
			{
				multiset<int> :: iterator  itr = s[low].lower_bound(-y);
				itr--;
				cout<<h[low]<<" "<<h[-*itr]<<endl;
			}
			
		}
	}

}