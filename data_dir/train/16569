#include <bits/stdc++.h>
using namespace std;

const int Max = 1e5+3, Log = 20+1;
vector<pair<int, int>> adj[Max];
int memo[Log][Max];
int depth[Max];

int prefix[Max], answer[Max];

void dfs(int node, int prev, int Depth = 0) {
    depth[node] = Depth;
    memo[0][node] = prev;
    for(int i = 1; i < Log; ++i) {
        memo[i][node] = memo[i-1][memo[i-1][node]];
    }
    for(auto to : adj[node]) {
        if(to.first == prev) continue;
        dfs(to.first, node, Depth+1);
    }
}

int LCA(int x, int y) {
    if(depth[x] < depth[y]) swap(x,y);
    int diff = depth[x] - depth[y];
    for(int k = Log-1; k >= 0; --k) {
        if(diff&(1<<k)) {
            x = memo[k][x];
        }
    }
    for(int k = Log-1; k >= 0; --k) {
        if(memo[k][x] != memo[k][y]) {
            x = memo[k][x];
            y = memo[k][y];
        }
    }
    if(x != y) x = memo[0][x];
    return x;
}


bool visited[Max] = {0};

void dfs2(int node) {
    visited[node] = true;
    for(auto x : adj[node]) {
        if(!visited[x.first]) {
            dfs2(x.first);
            prefix[node] += prefix[x.first];
            answer[x.second] = prefix[x.first];
        }
    }
}

int main() {ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    int n;
    cin >> n;
    int a,b;
    for(int i = 0; i < n-1; ++i) {
    //rep(i,n-1) {
        cin >> a >> b;
        adj[a].push_back({b,i});
        adj[b].push_back({a,i});
        //adj[a].pb(mp(b,i));
        //adj[b].pb(mp(a,i));
    }
    //parent[1] = 0;
    dfs(1, 1);
    //memo.resize(n+1, vector<int>(18,0));
    //rep1(i,n) memo[i][0] = parent[i];
    //rep1(k,17) rep1(i,n) memo[i][k] = memo[memo[i][k-1]][k-1];
    int m;
    cin >> m;
    while(m--) {
        cin >> a >> b;
        prefix[a]++;
        prefix[b]++;
        prefix[LCA(a,b)] -= 2;
    }
    //visited.clear();
    //visited.resize(n+1,false);
    dfs2(1);
    for(int i = 0; i < n-1; ++i) cout << answer[i] << ' ';cout << '\n';
    //for(int x : answer) cout << x << ' ';cout << '\n';
    return 0;
}

































































