// Na2a

#include <bits/stdc++.h>

#define llong long long
#define matrix vector<vector<int> >

using namespace std;

const int MAXN = (int) 1e6 + 7;
const int INF = (int) 1e9 + 7;

matrix g;
vector<int> v;

int n, sx, sy, dx, dy;
llong t;

void clr(matrix &a) {
	for (int x = 0; x < a.size(); x++)
		for (int y = 0; y < a[x].size(); y++)
			a[x][y] = 0;
}

matrix create(int N, bool one = 0) {
	matrix res;
	res.resize(N);
	for (int x = 0; x < N; x++)
		res[x].resize(N);

	clr(res);
	if (one) {
		for (int x = 0; x < N; x++)
			res[x][x] = 1;
	}
	return res;
}

matrix mult(matrix a, matrix b) {
	int N = a.size();
	matrix res = create(N);
	for (int k = 0; k < N; k++)
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				res[i][j] = ((res[i][j] + 1LL * a[i][k] * b[k][j]) % n + n) % n;

	return res;
}

matrix binpow(matrix a, llong deg) {
	matrix res = create(a.size(), 1);
	while (deg) {
		if (deg % 2 == 1)
			res = mult(res, a);

		deg /= 2ll;
		a = mult(a, a);
	}
	return res;
}

int main() {
	#ifdef LOCAL
	freopen("in", "r", stdin);
	#endif
	
	cin >> n >> sx >> sy >> dx >> dy >> t;
	--sx, --sy;

	dx %= n;
	dx += n;
	dx %= n;

	dy %= n;
	dy += n;
	dy %= n;
		
	v.push_back(sx);
	v.push_back(sy);
	v.push_back(dx);
	v.push_back(dy);
	v.push_back(0);//add
	v.push_back(1);
	
	g = create(6);

	g[0][0] = 2; g[0][1] = 1; g[0][5] = 2; g[0][2] = 1; g[0][4] = 1; 
	g[1][1] = 2; g[1][0] = 1; g[1][5] = 2; g[1][3] = 1; g[1][4] = 1;
	g[2][2] = g[2][4] = 1; g[2][0] = g[2][1] = 1; g[2][5] = 2;
	g[3][3] = g[3][4] = 1; g[3][0] = g[3][1] = 1; g[3][5] = 2;
	g[4][4] = g[4][5] = 1;
	g[5][5] = 1;

	//g[0] = 101000
	//g[1] = 010100
	//g[2] = 111010 //speedx
	//g[3] = 110110 //speedy
	//g[4] = 000011
	//g[5] = 000001
	
	g = binpow(g, t);
	/*for(int i=0;i<6;i++){
		for(int j=0;j<6;j++){
			cout<<g[i][j]<<' ';
			}
			cout<<endl;
			}
	*/
	for (int i = 0; i < 6; i++) {
		llong cur = 0;
		for (int j = 0; j < 6; j++) {
			cur = (cur + 1ll * g[i][j] * v[j]) % n;
			cur += n;
			cur %= n;
		}
		if (i < 2) cout << cur + 1 << ' ';
		//cout << cur << endl;
	}
	return 0;
}