#include <bits/stdc++.h>
using namespace std;

#define timesaver ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

typedef long long ll;
typedef unsigned long long ull;
typedef long double ldb;

#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound
#define F first
#define S second
#define nl '\n'

#define all(x) x.begin(),x.end()
#define sz(x) (int)(x).size()
#define mem(a,val) memset(a,val,sizeof(a))
#define toUpper(x) transform(x.begin(), x.end(), x.begin(),::toupper);
#define toLower(x) transform(x.begin(), x.end(), x.begin(),::tolower);
#define deci(n)    cout<<fixed<<setprecision(n)
#define bitcount(x) __builtin_popcountll(x)
#define max(a, b) (a < b ? b : a)
#define min(a, b) (a > b ? b : a)

const int MAX = 1000*100+1;
const ll  INF = 1e18;
const int MOD = 1000*1000*1000+7;

const int dx[8] = {-1, -1, -1, 0, 1, 1, 1, 0};
const int dy[8] = {-1, 0, 1, 1, 1, 0, -1, -1};
vector<ll> s[200005],a;
vector<ll> ::iterator it;
 queue<int> q;
 int h[200005]={},n,x;
 int r,arr[200005],b[200005],cnt;
#define rep(a,b) for(int i=(a);i<=(b);i++)
int qinsert(int node){
    h[node] = 1;
    int cnt = 0;
    a.push_back(node);
    for(auto i : s[node]){
        if(!h[i])
        cnt += qinsert(i);
    }
    arr[node] = cnt +1;
    return cnt +1 ;
}



int main()
{
  timesaver;
int i,j,z=0,l,m,k,x,c,y,p=0,sum=0;
 
 cin>>n;
 string s,t;
 cin>>s>>t;
 set<int> v;
 int h[n+1]={};
 for(int i=0;i<(n+1)/2;i++)
 {	v.erase(v.begin(),v.end());
	v.insert(s[i]);
	v.insert(t[i]);
	v.insert(s[n-1-i]);
	v.insert(t[n-i-1]);
 	
 	if(v.size()==4)
 	sum+=2;
 	else if(v.size()==3)
 	{
 		if(s[i]==s[n-1-i] && i!=(n-1-i))
 		sum+=2;
 		else if(s[i]!=s[n-1-i])
 		sum+=1;
 	}
 	else if(v.size()==2)
 	{
 		if((s[i]==t[n-1-i] && s[n-i-1]==t[i]) || (s[n-i-1]==t[n-1-i] && s[i]==t[i]) ||( (s[i]==s[n-1-i] && t[n-i-1]==t[i])&& i!=n-i-1))
 		{}
 		else
 		sum+=1;
 		
 	}
 }
 cout<<sum;
}