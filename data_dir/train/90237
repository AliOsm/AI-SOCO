//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second

template<typename T>
void read(T& val)
{
    std::string tmp = typeid(val).name();
    if (strcmp(tmp.c_str(), "i") == 0)
        scanf("%d", &val);
    else if (strcmp(tmp.c_str(), "x") == 0)
        scanf("%I64d", &val);
    else if (strcmp(tmp.c_str(), "d") == 0)
        scanf("%lf", &val);
    else if (tmp.length() > 2 && tmp.back() == 'c')
        scanf("%s", val);
    else if (strcmp(tmp.c_str(), "c") == 0)
        scanf("%c", &val);
}

template<typename T, typename... Targs>
void read(T& val, Targs&... Fargs)
{
    read(val);
    read(Fargs...);
}

template<typename T>
void print(T val)
{
    std::string tmp = typeid(val).name();
    if (strcmp(tmp.c_str(), "i") == 0)
        printf("%d", val);
    else if (strcmp(tmp.c_str(), "x") == 0)
        printf("%I64d", val);
    else if (strcmp(tmp.c_str(), "d") == 0)
        printf("%.15f", val);
    else if (strcmp(tmp.c_str(), "c") == 0)
        printf("%c", val);
    else if (tmp.length() > 2 && tmp.back() == 'c')
        printf("%s", val);
}

template<typename T, typename... Targs>
void print(T val, Targs... Fargs)
{
    print(val);
    print(Fargs...);
}

typedef long long ll;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e6 + 5;
const double eps = 1e-9;
using namespace std;

struct widget
{
    ll x, y, sp, bo;
    int t;
    widget()
    {
        x = -1, y = -1;
        sp = 0, bo = 0;
    }
    vector<widget*> p;

    void calc()
    {
        if (x != -1)
            return;
        if (p.empty())
        {
            x = 0, y = 0;
            return;
        }
        if (t == 1)
        {
            ll my = 0, sx = -sp;
            for (int i = 0; i < p.size(); i++)
            {
                p[i]->calc();
                my = max(my, p[i]->y);
                sx += p[i]->x + sp;
            }
            x = sx + 2ll * bo, y = my + 2ll * bo;
        }
        else
        {
            ll mx = 0, sy = -sp;
            for (int i = 0; i < p.size(); i++)
            {
                p[i]->calc();
                mx = max(mx, p[i]->x);
                sy += p[i]->y + sp;
            }
            x = mx + 2ll * bo, y = sy + 2ll * bo;
        }
    }
};

map<string, widget*> m;
char str[MAXN], f[MAXN], s[MAXN];

int main()
{
    int n;
    gets(str);
    n = atoi(str);
    for (int i = 0; i < n; i++)
    {
        gets(str);
        int l = strlen(str);
        int j = 0;
        for (; j < l; j++)
            if (str[j] == ' ')
                break;
        if (j < l)
        {
            sscanf(str, "%s %s", f, s);
            widget* w = new widget;
            if (strcmp(f, "Widget") == 0)
            {
                string t1 = s;
                string tmp = t1.substr(0, t1.find("("));
                int x = atoi(t1.substr(t1.find("(") + 1).c_str());
                int y = atoi(t1.substr(t1.find(",") + 1).c_str());
                w->x = x;
                w->y = y;
                w->t = 0;
                m[tmp] = w;
            }
            else if (strcmp(f, "HBox") == 0)
            {
                w->t = 1;
                m[s] = w;
            }
            else
            {
                w->t = 2;
                m[s] = w;
            }
        }
        else
        {
            string t1 = str;
            string tmp = t1.substr(0, t1.find("."));
            string cmd = t1.substr(t1.find(".") + 1, t1.find("(") - t1.find(".") - 1);
            string tar = t1.substr(t1.find("(") + 1, t1.find(")") - t1.find("(") - 1);
            if (cmd == "pack")
                (m[tmp]->p).pb(m[tar]);
            else if (cmd == "set_border")
                m[tmp]->bo = atoi(tar.c_str());
            else
                m[tmp]->sp = atoi(tar.c_str());
        }
    }
    for (map<string,widget*>::iterator it = m.begin(); it != m.end(); it++)
    {
        it->se->calc();
        print(it->fi.c_str(), " ");
        print(it->se->x, " ", it->se->y, "\n");
    }
    return 0;
}
