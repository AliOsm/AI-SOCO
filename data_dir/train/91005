#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>
#include <complex>
#include <cassert>
#include <regex>
#include <random>

#define ll long long
#define ld long double
#define ull unsigned ll
#define mp(x, y) make_pair(x, y)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define pll pair<ll, ll> 
#define vi vector<int>
#define vll vector<ll>
#define vpii vector<pii>
#define vpll vector<pll>
#define vvi vector<vector<int>>
#define forn(it,from,to) for(ll (it)=from; (it)<to; (it)++)
ld pi = acos(-1.0);
using namespace std;

ld dist(ll x1, ll y1, ll x2, ll y2) {
	return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
}

ld dist2(ll x, ll y, pll p1, pll p2) {
	return 0;
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("domino-covering-1.in", "r", stdin);
	//freopen("domino-covering-1.out", "w", stdout);
	//reopen("input.txt", "r", stdin);
	//reopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n;
	cin >> n;
	ll A, cf, cm;
	cin >> A >> cf >> cm;
	ll m;
	cin >> m;
	vector<pair<ll, int>> a(n);
	ll mn = 1e18, mx = -1e18;
	vll b;

	forn(i, 0, n) {
		cin >> a[i].first;
		b.push_back(a[i].first);
		mn = min(mn, a[i].first);
		mx = max(mx, a[i].first);
		a[i].second = i;
	}
	sort(rall(a));
	sort(all(b));
	vll sum = { 0 };
	forn(i, 0, n) {
		sum.push_back(sum.back() + b[i]);
	}

	ll ans = 0;
	int cnt = -1;
	ll MN = mn;
	forn(i, 0, n + 1) {
		ll mm = m;
		mm += sum[n] - sum[n - i] - i * A;
		if (mm < 0) break;
		if (i == n) {
			ans = max(ans, n * cf + A * cm);
			cnt = n;
			MN = A;
		}
		ll l = mn, r = min(A, mx + m);
		while (l < r) {
			ll mid = (l + r + 1) / 2;
			ll mmm = mm;
			int pos = lower_bound(all(b), mid) - b.begin();
			pos = min(pos, n - (int)i);
			mmm += sum[pos] - (ll)pos*mid;
			if (mmm < 0) r = mid - 1;
			else l = mid;
		}
		if ((ll)i * cf + l * cm > ans) {
			ans = (ll)i * cf + l * cm;
			cnt = i;
			MN = l;
		}
	}
	vll anss(n);

	forn(i, 0, n) {
		if (i < cnt) {
			anss[a[i].second] = A;
		}
		else {
			if (a[i].first < MN) {
				anss[a[i].second] = MN;
			}
			else anss[a[i].second] = a[i].first;
		}
	}

	cout << ans << '\n';
	forn(i, 0, n) cout << anss[i] << ' ';
	return 0;
}