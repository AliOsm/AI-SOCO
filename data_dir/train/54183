#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 2e6 + 7;

int n, m, a, q, T[N], sil[N], odw[N];

int POW(LL x, int k, int MOD)
{
    LL w = 1;
    while(k > 0)
    {
        if(k & 1) w = w * x % MOD;
        x = x * x % MOD;
        k >>= 1;
    }
    return w;
}

inline int newton(int x, int k, int MOD)
{
    LL ans = (LL)sil[x] * odw[k] % MOD;
    return ans * odw[x - k] % MOD;
}

int main()
{
    _upgrade
    cin >> n >> m >> a >> q;
    q--; int g = q;
    for(int i = 2; i <= q; i++)
    {
        if(POW(a, i, q + 1) == 1)
        {
            g = min(g, i);
            break;
        }
    }
    q++;
    sil[0] = 1;
    for(int i = 1; i <= m; i++)
        sil[i] = (LL)sil[i - 1] * i % g;
    odw[m] = POW(sil[m], g - 2, g);
    for(int i = m; i; i--)
        odw[i - 1] = (LL)odw[i] * i % g;
    for(int i = 0; i < n; i++)
        if(i <= m) T[i] = newton(m, i, g);
    for(int i = 1; i < n; i++)
        T[i] = (T[i] + T[i - 1]) % g;
    reverse(T, T + n);
    for(int i = 0; i < n; i++)
        T[i] = POW(a, T[i], q);
    for(int i = 0; i < n; i++)
        cout << T[i] << " ";
    return 0;
}
