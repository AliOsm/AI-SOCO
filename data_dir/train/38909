/*
  ------------------------- Hachiikung ---------------------------------
  ---------------------- Worrachate Bosri ------------------------------
  ------ Faculty of Computer Engineering Chulalongkorn University ------
*/
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<stack>
#include<list>
#include<set>
#include<map>
#include<string>
#include<utility>
using namespace std;
#define REP(i,FN) for(int i=0;i<FN;i++)
#define FOR(i,ST,FN) for(int i=ST;i<=FN;i++)
#define FORD(i,FN,ST) for(int i=FN;i>=ST;i--)
#define FORX(i,c) for(typeof(c.begin())i=c.begin();i!=c.end();i++)
#define pause system("pause")
#define S scanf
#define P printf
#define X first
#define Y second
#define pb push_back
#define PII pair<int,int>
#define mp make_pair
#define sz size()
#define eps 1e-8

const int MOD(1000000007);
const int INF((1<<30)-1);
const int MAXN(100005);

vector<PII>a[MAXN];

int n, rail[MAXN];

long long d[MAXN];

struct edge
{
    long long dist;
    int v, type;
    edge(long long dist, int v, int type) : dist(dist), v(v), type(type) {};
    bool operator < (const edge &other) const {
        if(dist != other.dist) return dist > other.dist;
        return type > other.type;
    }
};

int Dijkstra(int s) {

    FOR(i,1,n)
         d[i] = 1e18;

	priority_queue<edge> q;
	q.push(edge(0, s, 0));

	int ans = 0;

	while (!q.empty())
    {
		long long dist = q.top().dist;
		int v = q.top().v, type = q.top().type;
		q.pop();

        if(dist >= d[v]) continue;
        d[v] = dist;

        //P("-> %d %I64d\n",v,d[v]);

        if(type == 1) ans++;

		REP(j,a[v].sz)
		{
			int to = a[v][j].X, len = a[v][j].Y;
			//P("%d %I64d\n",to,d[v]+len);
            q.push(edge(d[v]+len, to, 0));
		}

		if(v == 1)
        {
            FOR(j,2,n)
            {
                if(rail[j] != INF)
                    q.push(edge(d[v]+rail[j], j, 1));
            }
        }
	}

	return ans;
}

int main(){

    int m,k;
    S("%d%d%d",&n,&m,&k);
    REP(i,m)
    {
        int u,v,w;
        S("%d%d%d",&u,&v,&w);
        a[u].pb(PII(v,w));
        a[v].pb(PII(u,w));
    }

    FOR(i,2,n)
        rail[i] = INF;

    REP(i,k)
    {
        int x,y;
        S("%d%d",&x,&y);
        rail[x] = min(rail[x], y);
    }

    P("%d",k-Dijkstra(1));
}
