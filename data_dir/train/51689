#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

ll m, n, x, y, z, p, q, r;
ll dp[30][3][30][30];

vector < ll > digits;

void cnvrt(ll x)
{
    digits.clear();

    for(ll i = 0; i < 20; i++){
        ll tmp = x % 10;
        x = x / 10;
        digits.push_back(tmp);
    }

    reverse(digits.begin(), digits.end());

//    for(ll i = 0; i < digits.size(); i++) cout << digits[i] << ' ';
//    cout << endl;

}

ll fnc(ll pos, ll isAlreadySmall, ll frst, ll lst)
{
    if(pos == 20) {
        if(frst == lst) return 1;
        else return 0;
    }



    if(dp[pos][isAlreadySmall][frst][lst] != -1) return dp[pos][isAlreadySmall][frst][lst];

    ll low = 0, high = digits[pos];

    if(isAlreadySmall == 1) high = 9;

    ll ans = 0;

    for(ll i = low; i <= high; i++){

        ll tmp1 = frst, tmp2 = lst;

        if(pos == 19) tmp2 = i;
        if(tmp1 == 0) tmp1 = i;

        ans += fnc(pos + 1, (isAlreadySmall | (i < digits[pos])), tmp1, tmp2);

    }


    return dp[pos][isAlreadySmall][frst][lst] = ans;
}

int main()
{
    memset(dp, -1, sizeof(dp));
    cin >> m >> n;
    m--;

    p = 9;
    p = min(p, m);
    cnvrt(m);

    ll tmp1 = fnc(0, 0, 0, 20);

    memset(dp, -1, sizeof(dp));

    p = 9;
    p = min(p, n);
    cnvrt(n);

    ll tmp2 = fnc(0, 0, 0, 20);

//    cout << tmp1 << ' ' << tmp2 << endl;

    cout << tmp2 - tmp1 << endl;

    return 0;
}

