//==========================================================================
//
//                   Bismillahir-Rahmanir-Rahim
//
// ==========================================================================
#include <bits/stdc++.h>
#define        ll                              long long int
#define        f(x,y,z)                        for(int x=y;x<z;x++)
#define        pii                             pair<int,int>
#define        pll                             pair<ll,ll>
#define        CLR(a)                          memset(a,0,sizeof(a))
#define        SET(a)                          memset(a,-1,sizeof(a))
#define        N                               1000010
#define        M                               1000000007
#define        pi                              acos(-1.0)
#define        ff                              first
#define        ss                              second
#define        pb                              push_back
#define        inf                             (int)1e9
using namespace std;
int dx[]={0,0,1,-1,-1,-1,1,1};
int dy[]={1,-1,0,0,-1,1,1,-1};
template < class T> inline T biton(T n,T pos){return n |((T)1<<pos);}
template < class T> inline T bitoff(T n,T pos){return n & ~((T)1<<pos);}
template < class T> inline T on(T n,T pos){return (bool)(n & ((T)1<<pos));}
template < class T> inline T gcd(T a, T b){while(b){a%=b;swap(a,b);}return a;}
template <typename T> string NumberToString ( T Number ) { ostringstream ss; ss << Number; return ss.str(); }
inline int nxt(){int aaa;scanf("%d",&aaa);return aaa;}
inline ll lxt(){ll aaa;scanf("%I64d",&aaa);return aaa;}
template <class T> inline T bigmod(T p,T e,T m){T ret = 1;
for(; e > 0; e >>= 1){
    if(e & 1) ret = (ret * p) % m;p = (p * p) % m;
} return (T)ret;}
#define sayed
#ifdef sayed
     #define debug(args...) {cerr<<"Debug: "; dbg,args; cerr<<endl;}
#else
    #define debug(args...)  // Just strip off all debug tokens
#endif
struct debugger{
    template<typename T> debugger& operator , (const T& v){
        cerr<<v<<" ";
        return *this;
    }
}dbg;
///******************************************START******************************************

int level[3005][3005];
vector<int>adj[3005];
bool color[3005];
vector<int>path1, path2;
int par[3005];
bool visited[3005][3005];
void bfs(int u){
	queue<int> q;
	q.push(u);
	int i = u;
	level[i][u] = 0;
	color[u] = 1;
	while (!q.empty()){
		u = q.front(); q.pop();
		for (auto v : adj[u]){
			if (!color[v]){
				color[v] = 1;
				q.push(v);
				level[i][v] = level[i][u] + 1;
			}

		}

	}

}
/*void bfs1(int u, int des){
	queue<int> q;
	q.push(u);
	color[u] = 1;
	while (!q.empty()){
		u = q.front(); q.pop();
		if (u == des) return;
		for (auto v : adj[u]){
			if (!color[v]){
				color[v] = 1;
				q.push(v);
				par[v] = u;
				//cout<<par[v]<<endl;
			}

		}

	}
}*/

int main(){
	// freopen("out.txt","w",stdout);
	//ios_base::sync_with_stdio(false);
	// cin.tie(0);
	int n = nxt();
	int m = nxt();
	f(i, 0, m){
		int a = nxt();
		int b = nxt();
		adj[a].pb(b);
		adj[b].pb(a);
	}
	for (int i = 1; i <= n; i++){
		CLR(color);
		bfs(i);
	}
	// puts("b");
	int s1 = nxt(), t1 = nxt(), l1 = nxt();
	int s2 = nxt(), t2 = nxt(), l2 = nxt();
	if (level[s1][t1]>l1 || level[s2][t2]>l2) {
		puts("-1");
		return 0;
	}
	int ans=inf;
	if(level[s1][t1]<=l1&&level[s2][t2]<=l2) ans=level[s2][t2]+level[s1][t1];
  for(int temp=0;temp<2;temp++){
        swap(s1,t1);
	for(int i=1;i<=n;i++){

        for(int j=1;j<=n;j++){
            int d1=level[s1][i]+level[i][j]+level[j][t1];
            int d2=level[s2][i]+level[i][j]+level[j][t2];
            if(d1<=l1&&d2<=l2) ans=min(ans,d1+d2-level[i][j]);
        }
	}
  }
	ans==inf?ans=m:ans;
	//int temp = level[s1][t1] + level[s2][t2] - common;
	printf("%d\n", m - ans);


	return 0;
}
