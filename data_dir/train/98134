#include<iostream>
#include<cmath>
#include<algorithm>
#include<string>
#include<string.h>
#include<vector>
#include<set>
#include<map>
#include<cstdio>
#include<queue>
#include<sstream>
#include<list>
#include<bitset>
#include<ctime>
using namespace std;

typedef long long Int;
#define FOR(i,a,b) for(int i=(a); i<=(b);++i)
#define mp make_pair
#define pb push_back
#define sz(s) (int)((s).size())
const int inf = 1000000000;
const int MOD = 1000000007;
const double pi=acos(-1.0);

struct fenwick{
	int s[100009];
	void upd(int v, int delta) {
		while(v<=100000) {
			s[v]+=delta;
			v=(v|(v+1));
		}
	}
	int get(int v) {
		int ans=0;
		while(v>=0) {
			ans+=s[v];
			v=(v&(v+1))-1;
		}
		return ans;
	}
	int get(int l, int r) {
		return get(r)-get(l-1);
	}
};

fenwick fn;

int main() {
	//freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
	int n,q;cin>>n>>q;
	int l=0, r=n-1;
	FOR(i,l,r) fn.upd(i, 1);

	while(q--) {
		//FOR(i,min(l,r),max(l,r)) cout<<fn.get(i,i)<<" ";cout<<endl; 
		//cout<<l<<" "<<r<<endl;
		int mode;
		cin>>mode;
		if(mode==1) {
			int p;
			cin>>p;
			int len = abs(r-l)+1;
			if(l<=r) {
				if(p+p>=len) {
					FOR(i,l+p,r) {
						int cur = fn.get(i,i);
						fn.upd(2*l+2*p-1-i, cur);
					}
					r=l;
					l=l+p-1;
				}else {
					FOR(i,l,l+p-1) {
						int cur = fn.get(i,i);
						fn.upd(2*l+2*p-1-i, cur);
					}
					l=l+p;
				}
			}else {
				if(p+p>=len) {
					FOR(i,r,l-p) {
						int cur = fn.get(i,i);
						fn.upd(2*l-2*p+1-i, cur);
					}
					r=l;
					l=l-p+1;
				}else {
					FOR(i,l-p+1,l) {
						int cur = fn.get(i,i);
						fn.upd(2*l-2*p+1-i, cur);
					}
					l=l-p;
				}
			}
		}else {
			int x,y;
			cin>>x>>y;
			if(l<=r) {
				//cout<<fn.get(l,l)<< " "<<fn.get(l+1,l+1)<<endl;
				cout<<fn.get(l+y-1)-fn.get(l+x-1)<<"\n";
			}else {
				++x;
				x=l-r+1-x;
				y=l-r+1-y;
				//cerr<<l<<" "<<r<<" "<<x<<" "<<y<<endl;
				//cout<<fn.get(r,r)<<" "<<fn.get(l,l)<<endl;
				cout<<fn.get(r+x)-fn.get(r+y-1)<<"\n";
			}
		}
	}
	
}