#include "bits/stdc++.h"
#include "ext/pb_ds/tree_policy.hpp"
#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){ 
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

const int maxn = 3010;
int poss[maxn][maxn];
bool win[maxn],defwin[maxn];
int indwin[maxn];
int n,k;	
queue<PII>q;
void add(PII nxt,int le){
	nxt.fi = min(nxt.fi,n+1);
	nxt.se = min(nxt.se,n+1);
	if(poss[nxt.fi][nxt.se]>=le)return;
	poss[nxt.fi][nxt.se]=le;
	if(max(nxt.fi,nxt.se)>n)return;
	q.push(nxt);
}
int main(){
	in(n);in(k);
	if(n==1){
		cout<<1;return 0;
	}
	REP(i,1,n+1){
		int p;cin>>p;
		if(p==100){
			win[i]=defwin[i]=1;
		}else if(p>0){
			win[i] = 1;
		}
		indwin[i] = p;
	}
	RREP(i,n,1){
		if(win[i+1])win[i]=1;
		if(defwin[i+1])defwin[i] = 1;
	}
	mst(poss,-1);
	add(MP(1,2),k);
	while(!q.empty()){
		auto f = q.front();q.pop();
		if(!poss[f.fi][f.se])continue;
		if(indwin[f.fi]==100){
			if(defwin[f.se]){
				add(MP(f.se+1,f.se+2),poss[f.fi][f.se]-1);
			}else if(win[f.se]){
				add(MP(f.se+1,f.se+2),poss[f.fi][f.se]-1);
				add(MP(f.fi,f.se+1),poss[f.fi][f.se]-1);
			}else{
				add(MP(f.fi,f.se+1),poss[f.fi][f.se]-1);
			}
		}else if(indwin[f.fi]>0){
			if(defwin[f.se]){
				add(MP(f.se+1,f.se+2),poss[f.fi][f.se]-1);
				add(MP(f.se,f.se+1),poss[f.fi][f.se]-1);
			}else if(win[f.se]){
				add(MP(f.se,f.se+1),poss[f.fi][f.se]-1);
				add(MP(f.se+1,f.se+2),poss[f.fi][f.se]-1);
				add(MP(f.fi,f.se+1),poss[f.fi][f.se]-1);
			}else{
				add(MP(f.fi,f.se+1),poss[f.fi][f.se]-1);
			}
		}else{
			if(defwin[f.se]){
				add(MP(f.se,f.se+1),poss[f.fi][f.se]-1);
			}else if(win[f.se]){
				add(MP(f.se,f.se+1),poss[f.fi][f.se]-1);
			}else{
			}
		}
	}
	int ans = 0;
	REP(i,0,maxn)REP(j,0,maxn)ans+=poss[i][j]>=0;
	cout<<ans;
	return 0;
}