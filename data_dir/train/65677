#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int n, m, s;
const int MAXN = 100005;
vector<int> adj[MAXN];
vector<int> ans;
bool cycle = false;
bool vis[MAXN][2], on[MAXN];

bool dfs(int curr, int l)
{
	if(adj[curr].size() == 0 && l % 2 == 1)
	{
		ans.push_back(curr);
		return true;
	}
	vis[curr][l % 2] = true;
	on[curr] = true;

	for(int i = 0; i < adj[curr].size(); i++)
	{
		if(vis[adj[curr][i]][(l + 1) % 2])
		{
			if(on[adj[curr][i]])
				cycle = true;
		}
		else if(dfs(adj[curr][i], l + 1))
		{
			ans.push_back(curr);
			return true;
		}
	}
	on[curr] = false;
	return false;
}

int main()
{
	cin >> n >> m;

	for(int i = 1; i <= n; i++)
	{
		int x;
		cin >> x;
		for(int j = 0; j < x; j++)
		{
			int y;
			cin >> y;
			adj[i].push_back(y);
		}
	}

	cin >> s;

	if(dfs(s, 0))
	{
		cout << "Win\n";
		for(int i = ans.size() - 1; i >= 0; i--)
			cout << ans[i] << " ";
		cout << "\n";
	}
	else if(cycle)
		cout << "Draw\n";
	else
		cout << "Lose\n";

	return 0;
}
