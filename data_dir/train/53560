#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); }
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

template <class T> class FenwickTree
{
    int maxn = 1000000;
    vector <T> t;
    T sum(int r)
    {
        int result = 0;
        for (; r >= 0; r = (r & (r + 1)) - 1) {
            result += t[r];
        }
        return result;
    }
    void init(const vector <T> &a)
    {
        init((int) a.size());
        for (unsigned i = 0; i < a.size(); ++i) {
           inc (i, a[i]);
        }
    }
    void init(int n)
    {
        maxn = n;
        t.assign(n, 0);
    }
public:
    FenwickTree (int n)
    {
        maxn = n;
        t.resize(maxn);
    }
    T sum(int l, int r)
    {
        return sum(r) - sum(l - 1);
    }
    void update(int i, int delta)
    {
        for (; i < maxn; i = (i | (i + 1))) {
            t[i] += delta;
        }
    }
};

int main()
{
    LL n, k;
    cin >> n >> k;
    k = min(k, n - k);
    FenwickTree <int> tree(2 * n);
    LL res = 1;
    LL t = 0;
    FOR (i, 0, n) {
        res += tree.sum(t + 1, t + k - 1) + 1;
        cout << res << endl;
        tree.update(t, 1);
        tree.update((t + k) % n, 1);
        tree.update(t + n, 1);
        tree.update((t + k) % n + n, 1);
        t = (t + k) % n;
    }
    return 0;
}

