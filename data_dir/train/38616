#include<iostream>
#include<vector>
#include<map>
#include<set>
#include<cassert>
#include<cassert>
#include<unordered_map>
#include<unordered_set>
#include<functional>
#include<queue>
#include<stack>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<sstream>
#include<iomanip>
#include<cstdio>
#include<cstdlib>
#include<numeric>
#include<random>
#include<chrono>
#include<bitset>
using namespace std;

#define all(x) (x).begin(), (x).end()
#define pb push_back
#define xx first
#define yy second
#define sz(x) (int)(x).size()
#define gc getchar
#define IO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define mp make_pair

#ifndef ONLINE_JUDGE
#  define LOG(x) (cerr << #x << " = " << (x) << endl)
#else
#  define LOG(x) ((void)0)
#endif

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const double PI=3.1415926535897932384626433832795;
const ll INF = 1LL<<62;
const ll MINF = -1LL<<62;

template<typename T> T getint() {
	T val=0;
	char c;
	
	bool neg=false;
	while((c=gc()) && !(c>='0' && c<='9')) {
		neg|=c=='-';
	}

	do {
		val=(val*10)+c-'0';
	} while((c=gc()) && (c>='0' && c<='9'));

	return val*(neg?-1:1);
}

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); uniform_int_distribution<int>(0, n-1)(rng)
int dp1[1<<12][64];
int dp2[1<<12][64];

int main() {
	IO;
	int T;
	cin>>T;
	while(T--) {
		int n,m;
		cin>>n>>m;
		vector<vector<int>> cols(m);
		for(int i=0;i<n;++i) {
			for(int j=0;j<m;++j) {
				int akt;
				cin>>akt;
				cols[j].push_back(akt);
			}
		}
		
		vector<pair<int,int>> ord;
		for(int j=0;j<m;++j) {
			ord.push_back({-*max_element(all(cols[j])), j});
		}
		
		sort(ord.begin(), ord.end());
		int k=min(m, n);
		
		vector<vector<int>> cols2(k);
		for(int i=0;i<k;++i) {
			cols2[i]=cols[ord[i].second];
		}
		
		//dp1[i][j] -> i maskhoz j. cols2-ben max eltolás hogy az összeg max legyen
		for(int i=0;i<(1<<n);++i) {
			for(int j=0;j<k;++j) {
				dp1[i][j]=0;
				for(int l=0;l<n;++l) {
					int szum=0;
					for(int p=l, ind=0;;ind++) {
						if(i&(1<<ind)) szum+=cols2[j][p];
						p=(p+1)%n;
						if(p==l) break ;
					}
					dp1[i][j]=max(dp1[i][j], szum);
				}
			}
		}
		
		//dp2[i][j] -> i maskhoz első j-ben 
		for(int i=0;i<(1<<n);++i) {
			for(int j=0;j<k;++j) {
				dp2[i][j]=dp1[i][j];
			}
		}
		
		for(int j=1;j<k;++j) {
			for(int i=0;i<(1<<n);++i) {
				dp2[i][j]=max(dp2[i][j-1], dp1[i][j]);
				for(int s=i;s>0;s=(s-1)&i) {
					//assert((s|i)==i);
					dp2[i][j]=max(dp2[i][j], dp1[s][j]+dp2[s^i][j-1]);
				}
			}
		}
		
		cout<<dp2[(1<<n)-1][k-1]<<"\n";
	}
	return 0;
}

