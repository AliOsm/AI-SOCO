
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

// expected number of people
// we can put in elevator
// assuming we have p_index ... p_n
// and we have time time left

ld p;
int N, T;

bool was[2010][2010];
ld DP[2010][2010];
// probability that n people in elevator
// after time seconds
ld dp(int n, int time)
{
  if (n == 0 && time == 0) return 1;
  if (time > T || time < 0) return 0;
  if (n < 0 || N < n) return 0;
  ld& x = DP[n][time];
  if (was[n][time]) return x;
  was[n][time]=1;
  x = 0;
  if (n >= 1)
    x += p * dp(n-1,time-1);
  if (n < N)
    x += (1-p) * dp(n,time-1);
  else
    x += dp(n,time-1);
  return x;
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0);
  cin >> N >> p >> T;
//  cout << (T*(T-1)*p*p) << endl;
  ld ans = 0;
  rep1(i,min(N,T))
    ans += i * dp(i,T);
  cout << ans << endl;
}
