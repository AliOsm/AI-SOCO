/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 24-Feb-2019 21:38:47
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 55 + 7;
const int inf = 1e9 + 7;
const int dx[] = {1, 0, -1, 0, 1, 1, -1, -1};
const int dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

int n;
char s[N][N];
bool used[N][N];
vector<pair<int, int>> p[2];

inline bool valid(int r, int c) {
    return r > 0 and r <= n and c > 0 and c <= n and s[r][c] == '0';
}

void dfs(int r, int c, int f) {
    used[r][c] = true;
    p[f].push_back({r, c});
    FOR (i, 0, 3) {
        int nr = r + dx[i];
        int nc = c + dy[i];
        if (valid(nr, nc) and !used[nr][nc]) {
            dfs(nr, nc, f);
        }
    }
}

int sqr(int x) {
    return x * x;
}

int dist(pair<int, int> p1, pair<int, int> p2) {
    return sqr(p1.first - p2.first) + sqr(p1.second - p2.second);
}

int solve() {
    Int(n);
    int r1, c1; Int(r1, c1);
    int r2, c2; Int(r2, c2);

    FOR (i, 1, n) {
        scanf("%s", s[i] + 1);
    }

    dfs(r1, c1, 0);

    if (used[r2][c2]) {
        return printf("0\n");
    }

    dfs(r2, c2, 1);

    int res = inf;
    for (auto p1 : p[0]) {
        for (auto p2 : p[1]) {
            umin(res, dist(p1, p2));
        }
    }

    printf("%d\n", res);

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; //Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}