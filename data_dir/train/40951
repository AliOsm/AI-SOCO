#include<bits/stdc++.h>
using namespace std;

const int N = 555;

vector < int > adj[N] , S;

int p[N];
int color[N];
int n , m;
int U , V;
bool cyc = 0;

void path(int u , int v){

    S.push_back(v);
    while(true){
        S.push_back(u);
        if(v == u)break;
        u = p[u];
    }
}

void getCyc(int u){
    if(cyc)return;
    color[u] = 1;

    for(auto v : adj[u]){
        if(color[v] == 0){
                p[v] = u;
                getCyc(v);
        }
        else if(color[v] == 1 && (cyc == 0)){
            cyc = 1;
            path(u , v);
            return;
        }
    }
    if(cyc)return;
    color[u] = 2;
}

void dfs(int u){
    color[u] = 1;

    for(auto v : adj[u]){
        if(u == U && v == V)continue;

        if(color[v] == 0){
                dfs(v);
        }
        else if(color[v] == 1)cyc = 1;
    }
    color[u] = 2;
}

main(){
    scanf("%d %d" , &n , &m);

    int u , v;
    for(int i = 0 ; i < m ; i ++){
        scanf("%d %d" , &u , &v);

        adj[u].push_back(v);
    }

    for(int i = 1 ; i <= n ; i ++){
        if(color[i] == 0 && (!cyc) ){
            getCyc(i);
        }
    }

    if(cyc == 0){
        printf("YES\n");
        return 0;
    }

    reverse(S.begin() , S.end());

    for(int i = 1 ; i < S.size() ; i ++){
        U = S[i-1];
        V = S[i];

        cyc = 0;
        memset(color , 0 , sizeof color);
        for(int i = 1 ; i <= n ; i ++){
            if(color[i] == 0)
                dfs(i);
        }

        if(cyc == 0){
            printf("YES\n");
            return 0;
        }
    }

    printf("NO\n");


}
