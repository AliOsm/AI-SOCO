#include<bits/stdc++.h>
#define y1 jilfjlifjls
using namespace std;
int n, m, kol[200005], a[200005];
set < pair < int , int > > q;
set < int > g[200005];
int main(){
    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    cin >>n>>m;
    for (int i = 1; i <= n; ++i){
        cin >>a[i];
        g[a[i] % m].insert(i);
    }
    int k = n / m;
    long long ans = 0;
    for (int i = 0; i < m; ++i){
        if (g[i].size() == k)continue;
        if (g[i].size() > k){
            while (g[i].size() > k){
                q.insert(make_pair(i, *g[i].begin()));
                g[i].erase(g[i].begin());
            }
        }else {
            while (g[i].size() < k && q.size() > 0){
                set < pair < int , int > > :: iterator it = q.lower_bound(make_pair(i, 0));
                if (it == q.begin())it = q.end();
                it--;
                int x = it->first;
                int y = it->second;
                q.erase(it);
                if (x < i){
                    ans = ans + (long long)i - x;
                    a[y] += i - x;
                }else {
                    ans = ans + (long long)m - x + i;
                    a[y] += m - x + i;
                }
                g[i].insert(y);
            }
        }
    }
     for (int i = 0; i < m; ++i){
        if (g[i].size() == k)continue;
        if (g[i].size() > k){
            while (g[i].size() > k){
                q.insert(make_pair(i, *g[i].begin()));
                g[i].erase(g[i].begin());
            }
        }else {
            while (g[i].size() < k && q.size() > 0){
                set < pair < int , int > > :: iterator it = q.lower_bound(make_pair(i, 0));
                if (it == q.begin())it = q.end();
                it--;
                int x = it->first;
                int y = it->second;
                q.erase(it);
                if (x < i){
                    ans = ans + (long long)i - x;
                    a[y] += i - x;
                }else {
                    ans = ans + (long long)m - x + i;
                    a[y] += m - x + i;
                }
                g[i].insert(y);
            }
        }
    }
    cout <<ans<<endl;
    for (int i = 1; i <= n; ++i){
        cout <<a[i]<<" ";
    }
}
