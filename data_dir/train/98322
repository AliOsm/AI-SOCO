#include <bits/stdc++.h>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
#define PI 3.14159265358979323846
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;

vector<pii> moves;
pii dlt[4] = {pii(-1, 0), pii(1, 0), pii(0, -1), pii(0, 1)};

set<string> nal;

void Dfs(string from){
  nal.insert(from);
  for(int i = 0;i < sz(moves);++i){
    int a = moves[i].fi;
    int b = moves[i].se;
    if(from[a] == 'X'){
      swap(from[a], from[b]);
      if(!nal.count(from)) Dfs(from);
      swap(from[a], from[b]);
    }
  }
}

int main(){
  string A, B, tmp;
  cin >> tmp, A += tmp;
  cin >> tmp, A += tmp;
  cin >> tmp, B += tmp;
  cin >> tmp, B += tmp;

  for(int x = 0;x < 2;++x)
    for(int y = 0;y < 2;++y)
      for(pii mv : dlt){
        int nx = x + mv.fi;
        int ny = y + mv.se;
        if(nx >= 0 && ny >= 0 && nx < 2 && ny < 2)
          moves.pb(mp(x * 2 + y, nx * 2 + ny));
      }

  Dfs(A);
  puts(nal.count(B) ? "YES" : "NO");
  return 0;
}
