//Link : https://codeforces.com/problemset/problem/914/E

#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define N 200005
#define MAX_COLOR 20
#define BIT (1<<MAX_COLOR)
vector<int> adj[N];

bool vis[N];
int sz[N];

int getSize(int node,int par) {
  int ret = 1;
  for(int ch : adj[node]) {
    if(ch==par || vis[ch]) {
      continue;
    }
    ret += getSize(ch,node);
  }
  return ret;
}
int findCentroid(int node,int par,int n) {
  sz[node] = 1;
  int maxi = 0;
  for(int i=0;i<adj[node].size();++i) {
    int ch = adj[node][i];
    if(ch==par || vis[ch]) {
      continue;
    }
    int r = findCentroid(ch,node,n);
    if( r!=-1) {
      return r;
    }
    maxi = max(maxi,sz[ch]);
    sz[node] += sz[ch];
  }
  maxi = max(maxi,n-sz[node]);
  if(maxi*2<=n) {
    return node;
  }
  return -1;
}
ll ret[N];
ll tmpAll[BIT];
ll tmp[BIT];

ll dval[N];
int color[N];
int state[N];
int vertex[N];


void dfs(int &pos,int node,int par,int st) {
  st ^= (1<<color[node]);
  state[node] = st;
  ++tmp[st];
  vertex[pos++] = node;
  for(int ch : adj[node]) {
    if(ch==par || vis[ch]) {
      continue;
    }
    dfs(pos,ch,node,st);
  }
}

void dfs2(int node,int par) {
  for(int ch : adj[node]) {
    if(ch==par || vis[ch]) {
      continue;
    }
    dfs2(ch,node);
  }
  dval[par] += dval[node];
}
void solveOnCentroid(int cent) {
  vis[cent] = true;
  int pos = 0;
  //state[cent] = (1<<color[cent]);
  state[cent] = 0;
  vertex[pos++] = cent;
  ++tmpAll[state[cent]];
  ++ret[cent];
  for(int ch : adj[cent]) {
    if(vis[ch]) {
      continue;
    }
    int ppos = pos;
    dfs(pos,ch,cent,state[cent]);
    for(int i=ppos;i<pos;++i) {
      int node = vertex[i];
      int st = state[node]^(1<<color[cent]);
      dval[node] -= tmp[st];
      ret[cent] += tmpAll[st];
      //
      for(int j=0;j<MAX_COLOR;++j) {
        int nst = st^(1<<j);
        dval[node] -= tmp[nst];
        ret[cent] += tmpAll[nst];
      }
    }
    for(int i=ppos;i<pos;++i) {
      int node = vertex[i];
      int st = state[node];
      tmp[st] = 0;
      ++tmpAll[st];
    }
  }
  for(int i=1;i<pos;++i) {
    int node = vertex[i];
    int st = state[node]^(1<<color[cent]);
    dval[node] += tmpAll[st];
    for(int j=0;j<MAX_COLOR;++j) {
      int nst = st^(1<<j);
      dval[node] += tmpAll[nst];
    }
  }
  dval[cent] = 0;
  for(int ch : adj[cent]) {
    if(vis[ch]) {
      continue;
    }
    dfs2(ch,cent);
  }
  tmpAll[0] = 0;
  dval[cent] = 0;
  for(int i=1;i<pos;++i) {
    int node = vertex[i];
    ret[node] += dval[node];
    tmpAll[state[node]] = 0;
    dval[node] = 0;
  }

  for(int ch : adj[cent]) {
    if(vis[ch]) {
      continue;
    }
    int size = getSize(ch,cent);
    int u = findCentroid(ch,cent,size);
    solveOnCentroid(u);
  }
}

void solve() {
  int n;scanf("%d ", &n);
  for(int i=0;i<n-1;++i) {
    int a,b;scanf("%d %d ", &a,&b);
    adj[a].push_back(b);adj[b].push_back(a);
  }
  char s[N];
  scanf(" %s", s);
  for(int i=0;i<n;++i) {
    color[i+1] = s[i]-'a';
  }
  int root = findCentroid(1,0,n);
  solveOnCentroid(root);
  for(int i=1;i<=n;++i) {
    printf("%lld ", ret[i]);
  }
  putchar('\n');
}

int main() {
    //freopen("input.txt","r",stdin);
    solve();
    return 0;
}
