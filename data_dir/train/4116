#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1, class T2>inline void gmax(T1 &a, T2 b) { if (b>a)a = b; }
template <class T1, class T2>inline void gmin(T1 &a, T2 b) { if (b<a)a = b; }
const int N = 1010, M = 20010, Z = 1e9 + 7, inf = 0x3f3f3f3f;
template <class T1, class T2>inline void gadd(T1 &a, T2 b) { a = (a + b) % Z; }
int n, m, L, st, ed;
struct node
{
	int x; int dis;
	bool operator < (const node&b)const
	{
		return dis > b.dis;
	}
};
int first[N], id;
int w[M], c[M], nxt[M];
bool e[N];
struct Dijkstra
{
	int f[N];
	priority_queue<node>q;
	void init()
	{
		for (int i = 0; i < n; ++i)first[i] = 0;
		id = 1;
	}
	void ins(int x, int y, int z)
	{
		++id;
		w[id] = y;
		c[id] = z;
		nxt[id] = first[x];
		first[x] = id;
	}
	void inq(int y, int dis)
	{
		if (dis >= f[y])return;
		f[y] = dis;
		q.push({ y,dis });
	}
	int dijkstra(int st, int ed)
	{
		for (int i = 0; i < n; ++i)
		{
			f[i] = inf;
			e[i] = 0;
		}
		while (!q.empty())q.pop();
		inq(st, 0);
		while (!q.empty())
		{
			int x = q.top().x; q.pop();
			if (e[x])continue; e[x] = 1;
			//if (x == ed)return f[ed];
			for (int z = first[x]; z; z = nxt[z])
			{
				inq(w[z], f[x] + c[z]);
			}
		}
		return f[ed];
	}
}go,bk;
int spe[M];
int main()
{
	while(~scanf("%d%d%d%d%d", &n, &m, &L, &st, &ed))
	{
		go.init();
		int g = 0;
		for (int i = 1; i <= m; ++i)
		{
			int x, y, z; scanf("%d%d%d", &x, &y, &z);
			if (z == 0)spe[++g] = i, z = 1;
			go.ins(x, y, z); go.ins(y, x, z);
		}
		bool flag = 1;
		for (int i = 1; i <= g; ++i)
		{
			int o = spe[i] << 1;
			if (flag)
			{
				go.dijkstra(st, ed); 
				bk.dijkstra(ed, st);
				if (go.f[ed] >= L)break;
			}
			int x = w[o | 1];
			int y = w[o];
			int z = c[o];
			if (go.f[x] > go.f[y])swap(x, y);
			int d1 = go.f[x];
			int d2 = bk.f[y];
			if (d1 + d2 + z < L)
			{
				z = L - d1 - d2;
				c[o] = c[o | 1] = z;
				flag = 1;
			}
		}
		int dis = go.dijkstra(st, ed);
		if (dis != L)puts("NO");
		else
		{
			puts("YES");
			for (int i = 1; i <= m; ++i)
			{
				int x = w[i << 1 | 1];
				int y = w[i << 1];
				int z = c[i << 1];
				printf("%d %d %d\n", x, y, z);
			}
		}
	}
	return 0;
}