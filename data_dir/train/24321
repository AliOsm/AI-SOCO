# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace __gnu_pbds;
using namespace std;
 
typedef
tree<pair<int,int>,null_type,less<pair<int,int>>,rb_tree_tag, tree_order_statistics_node_update> ordered_set;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
int cnt[N];
string s;
int a[N];
vector < pair < int, int > > ans;
int b[N];

int get (int x) {
	if(x <= n / 2) return n;
	return 1;
}

void change (int i, int j) {
	if (abs(i - j) * 2 >= n) {
		swap(a[i], a[j]);
		ans.pb({i, j});
		return ;
	}
	int ni = get(i);
	int nj = get(j);
//	cout << "att " << i << ' ' << j << '\n';
		
	if (ni == nj) {
		ans.pb({i, ni});
		ans.pb({ni, j});
		ans.pb({i, ni});
/*		cout << "btt " << i << ' ' << ni << '\n';

		cout << "btt " << ni << ' ' << j << '\n';
		cout << "btt " << i << ' ' << ni << '\n'; */
	

	
	} else {
		ans.pb({i, ni});
		ans.pb({j, nj});

		ans.pb({ni, nj});

		ans.pb({i, ni});
		ans.pb({j, nj});
	/*	cout << "btt " << i << ' ' << ni << '\n';
	   cout << "btt " << j << ' ' << nj << '\n';
	
	   cout << "btt " << ni << ' ' << nj << '\n';
	

	   	
	   cout << "btt " << i << ' ' << ni << '\n';
	 	cout << "btt " << j << ' ' << nj << '\n';  */
	

	
	}

	swap(a[i], a[j]);
}

int main () {
	SpeedForce;
	cin >> n;
	for (int i = 1; i <= n; i ++) {
		cin >> a[i];
		b[i] = a[i];
	}

	for (int i = 1; i <= n; i ++) {
		while (i > a[i]) change(i, a[i]);
	}
//	for (int i = 1; i <= n; i ++)
//		cerr << "err " << a[i] << ' ' ;
   
	cout << ans.size() << '\n';
	for (auto to : ans) {
		cout << to.F << ' ' << to.S << '\n';
		swap(b[to.F], b[to.S]);
	}
	/*for (int i = 1; i <= n; i ++)
		cerr << "err " << b[i] << ' ' ;*/      


	return Accepted;
}

// B...a