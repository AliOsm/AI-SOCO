#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

typedef long long            ll;
typedef unsigned long long   ull;
typedef vector<int>          vi;
typedef vector<ll>           vl;
typedef pair<int, int>       pi;
typedef pair<ll, ll>         pl;
typedef vector<pi>           vpi;
typedef vector<pl>           vpl;
typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define read        freopen("in.c", "r", stdin)
#define write       freopen("out.c", "w", stdout)
#define all(a)      a.begin(), a.end()
#define bye         exit(0)
#define mp          make_pair
#define ff          first
#define ss          second
#define L(x)        ((x) << 1)
#define R(x)        ((x) << 1 | 1)
#define bit(x)      (1LL << (x))
#define SZ(a)       (ll)(a).size()
#define pb          push_back
#define eb          emplace_back
#define pp          pop_back
#define eps         1e-9
#define inf         (1000000000)
#define infl        (1000000000000000000LL)
#define cs(p)       printf("Case %d:", (p)++)
#define ptc(c)      putchar(c)
#define gtc()       getchar()
#define nl          puts("")
#define sp          printf(" ")
#define out(a)      printf("%lld", (ll)(a))
#define ots(s)      printf("%s", s)
#define SET(a)      memset((a), -1, sizeof(a))
#define CLR(a)      memset((a), 0, sizeof(a))
#define dbg(x)      cout << "---- " << #x << " = " << x << '\n'

ll bgm(ll a, ll b, ll m) {
    a %= m;
    ll rem = 1;
    while(b != 0) {
        if(b&1)
            rem = (rem * a) % m;
        a = (a * a)%m;
        b >>= 1;
    }
    return rem;
}

ll inv(ll a, ll mod) {
    return bgm(a, mod - 2, mod);
}

ll in() {
    ll a;
    assert(scanf("%lld", &a) != EOF);
    return a;
}

double dl() {
    double a;
    assert(scanf("%lf", &a) != EOF);
    return a;
}

const int MAX = 100000 + 5;
const int LEN = 50 + 5;
const ll MOD = 998244353;

double ttm;

int n;
int a[MAX];

ll dp[MAX][205][2];

ll solve(int i, int prv, bool f) {
    if(i == n + 1)
        return f;
    ll &ret = dp[i][prv][f];
    if(ret != -1)
        return ret;
    ret = 0;
    if (a[i] == -1) {
        if (f == true) {
            for (int k = 1; k <= 200; k++) {
                ret = (ret + solve(i + 1, k, k <= prv)) % MOD;
            }
        }
        else {
            for (int k = prv; k <= 200; k++) {
                ret = (ret + solve(i + 1, k, k <= prv)) % MOD;
            }
        }
    }
    else {
        if (f == false and a[i] < prv)
            ret = 0;
        else
            ret = solve(i + 1, a[i], a[i] <= prv);
    }
    return ret;
}

ll solve2() {
    CLR(dp);
    for(int j = 1; j <= 200; j++) {
        for(int k = 0; k < 2; k++) {
            dp[n + 1][j][k] = k;
        }
    }
    for(int j = 1; j <= 200; j++) {
        for(int k = 0; k < 2; k++) {
            dp[n + 1][j][k] += dp[n + 1][j - 1][k];
        }
    }
    ll ret;
    for(int i = n; i > 0; i--) {
        for(int prv = 1; prv <= 200; prv++) {
            for(int f = 0; f < 2; f++) {
                ret = 0;
                if (a[i] == -1) {
                    if (f == 1) {
                        // for (int k = 1; k <= 200; k++) {
                        //     ret = (ret + solve(i + 1, k, k <= prv)) % MOD;
                        // }
                        ret = (ret + dp[i + 1][prv][1]) % MOD;
                        ret = (ret + dp[i + 1][200][0] - dp[i + 1][prv][0]) % MOD;
                        ret = (ret + MOD) % MOD;
                    }
                    else {
                        // for (int k = prv; k <= 200; k++) {
                        //     ret = (ret + solve(i + 1, k, k <= prv)) % MOD;
                        // }
                        ret = dp[i + 1][prv][1] - dp[i + 1][prv - 1][1] + dp[i + 1][200][0] - dp[i + 1][prv][0];
                        ret = (ret % MOD + MOD) % MOD;
                    }
                }
                else {
                    if (f == 0 and a[i] < prv)
                        ret = 0;
                    else
                        ret = dp[i + 1][a[i]][a[i] <= prv] - dp[i + 1][a[i] - 1][a[i] <= prv];
                }
                //dbg(i), dbg(prv), dbg(f), dbg(ret), nl;
                dp[i][prv][f] = ret; 
            }
        }
        for(int prv = 1; prv <= 200; prv++)
            dp[i][prv][0] += dp[i][prv - 1][0], dp[i][prv][1] += dp[i][prv - 1][1];
    }
    return dp[1][1][0];
}

int main() {
    #ifndef ONLINE_JUDGE
    read, write;
    ttm = clock();
    #endif

    SET(dp);
    n = in();
    for (int i = 1; i <= n; i++) {
        a[i] = in();
    }
    out(solve2()), nl;
    #ifndef ONLINE_JUDGE
    printf("Runtime = %lf seconds\n", (clock() - ttm)/1000.0);
    #endif

    return 0;
}
