#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)); (v).erase(unique(all(v)), (v).end());
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define umap unordered_map
#define uset unordered_set
#define pqueue priority_queue
#define si(a) scanf("%d", &a)
#define sll(a) scanf("%lld", &a)
#define bitcount(x) __builtin_popcount(x)
#define cps CLOCKS_PER_SEC
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000009
#define MOD 1000000007
#define N 300005
using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;

template<typename T>
using maxpq = priority_queue<T>;

//All indexing is 0-based
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update> ordered_set;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pairs of (value, time_of_insertion)
//to distinguish values which are similar.

template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
//ordered_map<int, int> my_map;


//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }

//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }

// #define int ll
#define trace(...) 42

int n;
struct ans{
    //val: Value at the node in the original st
    //lazy: Value at the node in the lazy st
    ll val=0, lazy=0;
};

ans st[N<<2];
int a[N];

ans op(ans u, ans v) {
    ans w;
    w.val = u.val + v.val;
    return w;
}

void propagate(int i,int l,int r)
{
    st[i].val += st[i].lazy * (r - l + 1);
    int lc = (i<<1) , rc = (i<<1)|1;
    if(l != r){
        st[lc].lazy += st[i].lazy,\
        st[rc].lazy += st[i].lazy;
    }
    st[i].lazy = 0;
}

void update(int ql, int qr, int x, int i, int l,int r)
{
    propagate(i, l, r);

    int m = (l + r) >> 1;
    int lc = i << 1, rc = (i << 1) | 1;
    
    if(ql <= l && qr >= r){
        st[i].lazy += x;
        propagate(i, l, r);
        return;
    }
    
    if(qr < l || ql > r)
        return;
    else{
        update(ql, qr, x, lc, l, m);
        update(ql, qr, x, rc, m+1, r);
        st[i] = op(st[lc], st[rc]);
    }
}

ans query(int ql,int qr, int i, int l, int r)
{
    propagate(i, l, r);
    
    if(ql <= l && qr >= r)
        return st[i];

    if(qr < l || ql > r)
        return ans();

    int m = (l + r) >> 1;
    int lc = i << 1, rc = (i << 1) | 1;
    
    return op(query(ql,qr,lc,l,m), query(ql,qr,rc,m+1,r));
}

/*void print_tree()
{
    for(int i=0;i<n;i++)
        cerr << query(i, i, 1, 0, n-1).val <<'\n';
}*/

set<pii> s; //Set of {Start index, color}

main()
{   
    #ifndef ONLINE_JUDGE
        freopen("/home/tarun/Desktop/input.txt", "r", stdin);
    //  freopen("/home/tarun/Desktop/output.txt", "w", stdout);
    #endif
    sync;
    clock_t clk = clock();
    cerr << "I will return...\n";

    int q; cin >> n >> q;
    rep(i, 0, n) {
        s.insert({i, i+1});
    }
    s.insert({n, -1});

    while(q--) {
        int type, l, r, kk; cin >> type >> l >> r;
        --l;
        kk = l;
        if(type == 1) {
            int x; cin >> x;
            int c;
            auto it = s.lower_bound({l, 0});
            if(it -> fi != l) {
                it = s.insert(it, {l, prev(it) -> se});
            }
            auto it2 = s.lower_bound({r, 0});
            if(it2 -> fi != r) {
                it2 = s.insert(it2, {r, prev(it2) -> se});
            }
            
            while(it != it2) {
                c = it -> se;
                l = it -> fi;
                r = next(it) -> fi;
                trace(l, r-1, abs(c - x));
                update(l, r-1, abs(c - x), 1, 0, n-1);
                s.erase(it++);
            }
            s.insert({kk, x});
        }
        else {
            --r;
            trace(l, r);
            cout << query(l, r, 1, 0, n-1).val << '\n';
        }
    }

    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << double(clock() - clk) * 1000.0 / cps << '\n';
}

//Compile using:
//g++ -o filename.exe --std=c++11 filename.cpp
//Use -D CP for defining a macro CP in the local environment







