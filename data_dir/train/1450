#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <vector>
#include <queue>
#include <memory.h>
#include <deque>
#include <iomanip>
#include <utility>
#include <string>
#include <ext/rope>
#include <iterator>

using namespace std;
using namespace __gnu_cxx;

#define pb push_back
#define mp make_pair
#define F first
#define S second
#define sz size
#define scf scanf
#define prf printf       
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define gcd(a,b) __gcd(a,b)
#define print(x) prf("%d\n", x.sz()); for (int i = 0; i < x.sz(); i++) prf("%d ", x[i]);
#define getBit(x,i) ((x&(1<<i))!=0 ? 1 : 0)
#define For(i,n) for (int i = 0; i < n; ++i)
#define FOR(i,begin,end,move) for (int i = begin; i != end; i += move)

typedef long long ll;

const ll base = 1000000007LL;
const ll INF = 10000000000000LL;

int n, m;
int l[100500], r[100500], q[100500];
int ans[100500];   
int tree[4 * 100500] = {0}; 
int Tree[4 * 100500] = {0};

void upd(int ver)
{
    tree[ver] |= (tree[ver + ver] | tree[ver + ver + 1]);
}

void update(int ver, int l, int r, int pl, int pr, int data)
{
    if (l == pl && r == pr)
    {
        tree[ver] |= data;
        return;
    }
    tree[ver + ver] |= tree[ver];
    tree[ver + ver + 1] |= tree[ver];       
    int mid = (l + r) >> 1;
    if (pr <= mid)
    {
        update(ver + ver, l, mid, pl, pr, data);
//      upd(ver);
        return;
    }
    if (pl > mid)
    {
        update(ver + ver + 1, mid + 1, r, pl, pr, data);
//      upd(ver);
        return;
    }
    update(ver + ver, l, mid, pl, mid, data);
    update(ver + ver + 1, mid + 1, r, mid + 1, pr, data);
//  upd(ver);
}

int get(int ver, int l, int r, int pl, int pr)
{
    if (l == pl && r == pr)
        return tree[ver]; 
    tree[ver + ver] |= tree[ver];
    tree[ver + ver + 1] |= tree[ver];
    int mid = (l + r) >> 1;
    if (pr <= mid)
        return get(ver + ver, l, mid, pl, pr);
    if (pl > mid)
        return get(ver + ver + 1, mid + 1, r, pl, pr);
    return (get(ver + ver, l, mid, pl, mid) | get(ver + ver + 1, mid + 1, r, mid + 1, pr));
}

void build(int ver, int l, int r)
{
    if (l == r)
    {
        Tree[ver] = ans[l];
        return;
    }               
    int mid = (l + r) >> 1;
    build(ver + ver, l, mid);
    build(ver + ver + 1, mid + 1, r);
    Tree[ver] = (Tree[ver + ver] & Tree[ver + ver + 1]);
}

int Get(int ver, int l, int r, int pl, int pr)
{
    if (l == pl && r == pr)
        return Tree[ver];
    int mid = (l + r) >> 1;
    if (pr <= mid)
        return Get(ver + ver, l, mid, pl, pr);
    if (pl > mid)
        return Get(ver + ver + 1, mid + 1, r, pl, pr);
    return (Get(ver + ver, l, mid, pl, mid) & Get(ver + ver + 1, mid + 1, r, mid + 1, pr));
}

int main()
{
//  freopen("input.txt","r",stdin);
    scf("%d%d", &n, &m);
    For(i, m)
    {
        scf("%d%d%d", &l[i], &r[i], &q[i]);
        update(1, 1, n, l[i], r[i], q[i]);
    }
    for (int i = 1; i <= n; i++)
        ans[i] = get(1, 1, n, i, i);
    build(1, 1, n);
    For(i, m)
        if (Get(1, 1, n, l[i], r[i]) != q[i])
        {
            prf("NO\n");
            return 0;
        }
    prf("YES\n");
    for (int i = 1; i <= n; i++)
        prf("%d ", ans[i]);
    prf("\n");
    return 0;
}