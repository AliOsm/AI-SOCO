///                                                     ببِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيم
#include <bits/stdc++.h>
#define br   break
#define off  exit( 0 )
#define cn   continue
#define rt   return
#define do   double
#define cr   char
#define st   string
#define sc   scanf
#define pr   printf
#define mk   make_pair
#define pb   push_back
#define pf   push_front
#define p_f  pop_front
#define p_b  pop_back
#define siz  strlen
#define ff   first
#define ss   second
#define vec  vector
#define gcd  __gcd
#define pi   acos( -1 )
#define ll   long long
#define N    200256
#define M    1000000007
#define I    1000000000000000000
#define pll  pair < ll, ll >
#define pii  pair < int, int >
#define rep( a, b, c, d )  for( int a = b; a <= c; a += d )
#define rvv( a, b, c, d )  for( int a = b; a >= c; a -= d )
#define en                 printf( "\n" )
#define sqr( a )           a * a
#define all( c )           c.begin(), c.end()
#define srt( c )           sort( all( c ) )
#define rev( c )           reverse( all( c ) )
#define revs( c )          sort( c.rbegin(), c.rend() )
#define mxx( x, y, z )     max( x, max( y, z ) )
#define mnn( x, y, z )     min( x, min( y, z ) )
#define mxn( x, y, z )     max( x, min( y, z ) )
#define mnx( x, y, z )     min( x, max( y, z ) )
using namespace std;
ll tests;
int n, m, a[ N ], in[ N ], out[ N ], lvl[ N ], t[ 2 ][ 4 * N ], timer;
vec < int > g[ N ];
void dfs( ll v )
{
    in[ v ] = ++ timer;
    for( int i: g[ v ] )
        if( !in[ i ] )
        {
            lvl[ i ] = lvl[ v ] ^ 1;
            dfs( i );
        }
    out[ v ] = timer;
}

void update( int l, int r, int val, bool type, int v = 1, int tl = 1, int tr = n )
{
    if( tl > r || tr < l )rt;
    if( l <= tl && tr <= r )
    {
        t[ type ][ v ] += val;
        t[ type ^ 1 ][ v ] -= val;
        rt;
    }
    int tm = tl + tr >> 1;
    update( l, r, val, type, v * 2, tl, tm );
    update( l, r, val, type, v * 2 + 1, tm + 1, tr );
}

int get( int pos, bool type, int v = 1, int tl = 1, int tr = n )
{
    if( tl == tr )rt t[ type ][ v ];
    int tm = tl + tr >> 1;
    if( pos <= tm )rt t[ type ][ v ] + get( pos, type, v * 2, tl, tm );
    else rt t[ type ][ v ] + get( pos, type, v * 2 + 1, tm + 1, tr );
}
void solve()
{
    sc( "%d%d", &n, &m );
    rep( i, 1, n, 1 )sc( "%d", &a[ i ] );
    rep( i, 2, n, 1 )
    {
        int u, v;   
        sc( "%d%d", &u, &v );
        g[ u ].pb( v );
        g[ v ].pb( u );
    }
    dfs( 1 );
    rep( i, 1, m, 1 )
    {
        int type, x, val;
        sc( "%d%d", &type, &x );
        if( type == 2 )
            pr( "%d\n", ( a[ x ] + get( in[ x ], lvl[ x ] ) ) );
        else
        {
            sc( "%d", &val );
            update( in[ x ], out[ x ], val, lvl[ x ] );
        }
    }
}
int main()
{
    /*cin >> tests;
    while( tests -- )*/
        solve();

}







