#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define fi first
#define se second
#define pb push_back
#define all(x) x.begin(), x.end()
#define sz(x) (int)x.size()
#define endl '\n'
typedef pair<int,int> pii;
typedef long double f80;

const int N = 3e5 + 5;
ll dsu[N], sz[N], par[N], val[N][2];

int root(int u) {
    while(u != dsu[u]) {
        u = dsu[u];
    }
    return u;
}

int get_par(int u) {
    int x = 0;
    while(u != dsu[u]) {
        x ^= par[u];
        u = dsu[u];
    }
    return x;
}

vector<int> get_set[N];

ll ans = 0;

void add_edge(int u,int v,int x) {
    int uu = root(u), vv = root(v);
    if(sz[uu] > sz[vv]) {
        swap(uu, vv);
        swap(u, v);
    }
    if(uu == vv) return;
    int p1 = get_par(u), p2 = get_par(v);
    ans -= min(val[uu][0], val[uu][1]);
    ans -= min(val[vv][0], val[vv][1]);
    par[uu] = x ^ p1 ^ p2;
    val[vv][0] += val[uu][par[uu]];
    val[vv][1] += val[uu][par[uu] ^ 1];
    ans += min(val[vv][0], val[vv][1]);
    dsu[uu] = vv;
    sz[vv] += sz[uu];
}

void set_active(int u,int x) {
    int p = get_par(u);
    x ^= p;
    int uu = root(u);
    ans -= min(val[uu][0], val[uu][1]);
    val[uu][x ^ 1] = 1e9;
    ans += min(val[uu][0], val[uu][1]);
}

int main() {
    ios :: sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n, k;
    cin >> n >> k;
    string s;
    cin >> s;
    for(int i = 0; i < sz(s); i++) {
        if(s[i] == '0') s[i] = '1';
        else s[i] = '0';
    }
    s = '0' + s;
    for(int i = 1; i <= k; i++) {
        val[i][0] = 0;
        val[i][1] = 1;
        sz[i] = 1;
        dsu[i] = i;
        par[i] = 0;
        int sz;
        cin >> sz;
        for(int j = 1; j <= sz; j++) {
            int x;
            cin >> x;
            get_set[x].pb(i);
        }
    }
    for(int i = 1; i <= sz(s) - 1; i++) {
        if(sz(get_set[i]) == 1) {
            set_active(get_set[i][0], s[i] - '0');
        }
        else if(sz(get_set[i]) == 2) {
            add_edge(get_set[i][0], get_set[i][1], s[i] - '0');
        }
        cout << ans << endl;
    }
    return 0;
}