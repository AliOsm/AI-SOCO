/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>



#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator {
public:
	using value_type = T;
	using difference_type = std::ptrdiff_t;
	using pointer = T*;
	using reference = T;
	using iterator_category = std::input_iterator_tag;

	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	using IteratorType = std::reverse_iterator<IntegerIterator<T>>;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}



#include <random>


namespace impl {
using Random = std::mt19937;
}  // namespace impl

inline impl::Random& randomEngine() {
	static std::random_device device;
	static impl::Random engine(device());
	return engine;
}

inline int randomInteger() {
	std::uniform_int_distribution<int> d;
	return d(randomEngine());
}

inline int randomInteger(int to) {
	SPCPPL_ASSERT(to > 0);
	std::uniform_int_distribution<int> d(0, to - 1);
	return d(randomEngine());
}

inline int randomInteger(int from, int to) {
	return from + randomInteger(to - from);
}


using int64 = int64_t;

using std::vector;
using std::set;
using std::map;
using std::string;
using std::pair;
using std::make_pair;
using std::sort;
using std::unique;
using std::swap;
using std::min;
using std::max;
using std::endl;




class CTwoTeamsComposing {
public:
	static void solveSlow(std::stringstream& in, std::ostream& out) {
		auto solve = [] (vector<int> a) -> int {
			int res = 0;
			sort(a.begin(), a.end());
			do {
				for (int want = 1; want <= a.size() / 2; want++) {
					bool ok = true;
					set<int> left;
					for (int i = 0; i < want; i++) {
						left.insert(a[i]);
					}
					ok &= (left.size() == want);
					set<int> right;
					for (int i = a.size() - 1; i > a.size() - 1 - want; i--) {
						right.insert(a[i]);
					}
					ok &= (right.size() == 1);
					if (ok) {
						res = max(res, want);
					}
				}
			} while (std::next_permutation(a.begin(), a.end()));
			return res;
		};

		int tests; in >> tests;
		for (int test : range(tests)) {
			int n; in >> n;
			vector<int> a(n); for (auto& val : a) in >> val;
			out << solve(a) << "\n";
		}
	}
	static constexpr int kStressIterations = 100;
	static void generateTest(std::ostringstream& in, std::ostringstream& ___) {
		in << 1 << endl;
		int n = randomInteger(1, 9);
		in << n << endl;
		for (int i : range(n)) {
			in << randomInteger(1, n + 1) << " ";
		}
		in << endl;
		auto _____ = std::stringstream(in.str());
		solveSlow(_____, ___);
	}
	static void solve(std::istream& in, std::ostream& out) {
		auto solve = [] (vector<int> a) -> int {
			map<int, int> mm;
			for (int val : a) mm[val]++;
			vector<int> counts;
			for (auto&[key, count] : mm) counts.push_back(count);
			sort(counts.begin(), counts.end());
			reverse(counts.begin(), counts.end());
			int res = 0;
			for (int want : range(1, counts[0] + 1)) {
				int other = counts.size() - 1;
				if (counts[0] - want > 0) {
					other++;
				}
				if (other >= want) {
					res = want;
				}
			}
			return res;
		};

		int tests; in >> tests;
		for (int test : range(tests)) {
			int n; in >> n;
			vector<int> a(n); for (auto& val : a) in >> val;
			out << solve(a) << "\n";
		}
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	CTwoTeamsComposing solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	solver.solve(in, out);
	return 0;
}
