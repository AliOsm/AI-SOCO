#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define f(i, x, n) for(int i = x; i < (int)(n); ++i)

int bad[100000];
vector<int> v[100001], h[100001];

struct G{
	int l, r, u, d;
	G() { l = r = u = d = 0; }
	void P() { printf("%d %d %d %d\n", l, r, u, d); }
}sof[100000];

inline void ad(int x, int y, int i){
	v[x].push_back(i);
	h[y].push_back(i);
}

int main(){
	int d, n, m;
	scanf("%d%d%d", &d, &n, &m);
	f(i, 0, d){
		int a1, b1, a2, b2;
		scanf("%d%d%d%d", &a1, &b1, &a2, &b2);
		ad(a1, b1, i);
		ad(a2, b2, i);
	}
	int s = 0;
	f(i, 1, n + 1){
		int e = 0;
		f(j, 0, v[i].size()){
			if (bad[v[i][j]])++e, sof[v[i][j]].l += s - (bad[v[i][j]] < i ? 1 : 0);
			else bad[v[i][j]] = i;
		}
		s += v[i].size() - e;
	}
	
	s = 0;
	f(i, 0, d)bad[i] = false;
	for (int i = n; i > 0; --i){
		int e = 0;
		f(j, 0, v[i].size()){
			if (bad[v[i][j]])++e, sof[v[i][j]].r += s - (bad[v[i][j]] > i ? 1 : 0);
			else bad[v[i][j]] = i;
		}
		s += v[i].size() - e;
	}
	
	s = 0;
	f(i, 0, d)bad[i] = false;
	f(i, 1, m + 1){
		int e = 0;
		f(j, 0, h[i].size()){
			if (bad[h[i][j]])++e, sof[h[i][j]].d += s - (bad[h[i][j]] < i ? 1 : 0);
			else bad[h[i][j]] = i;
		}
		s += h[i].size() - e;
	}
	
	s = 0;
	f(i, 0, d)bad[i] = false;
	for (int i = m; i > 0; --i){
		int e = 0;
		f(j, 0, h[i].size()){
			if (bad[h[i][j]])++e, sof[h[i][j]].u += s - (bad[h[i][j]] > i ? 1 : 0);
			else bad[h[i][j]] = i;
		}
		s += h[i].size() - e;
	}
	int a, b, c, w;
	scanf("%d%d%d%d", &a, &b, &c, &w);
	f(i, 0, d)if (sof[i].l == a && sof[i].r == b && sof[i].u == w && sof[i].d == c) { printf("%d\n", i + 1); return 0; }
	printf("-1\n");
}