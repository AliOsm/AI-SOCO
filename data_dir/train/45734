#include <bits/stdc++.h>
//#define int long long
using namespace std;

#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less
#include <iostream>
using namespace __gnu_pbds;
using namespace std;

// a new data structure defined. Please refer below
// GNU link : https://goo.gl/WVDL6g
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    OST;


OST x;


const int N = 363304 + 7; long long mod = 1e9 + 7;

long long  dp[N][2];

vector <pair <int, int> > v[N];

int32_t main() {
    int n; cin >> n;
    dp[0][0] = 1;
    v[0].push_back({0, 308983067});
    v[0].push_back({0, 308983067});
    x.insert(0);
    x.insert(308983067);
    int idx = 0;
    for(int i = 1; i <= n; i++) {
        string str; int y; cin >> str >> y;
        if(str == "ACCEPT") { ++idx;
            int l = y, r = *x.find_by_order(x.order_of_key(y) + 1);
            if(l >= v[idx - 1][0].first && r <= v[idx - 1][0].second) dp[idx][0] += dp[idx - 1][0];
            if(l >= v[idx - 1][1].first && r <= v[idx - 1][1].second) dp[idx][0] += dp[idx - 1][1];
            v[idx].push_back({*x.find_by_order(x.order_of_key(y) - 1), r});

            l = *x.find_by_order(x.order_of_key(y) - 1); r = y;
            if(l >= v[idx - 1][0].first && r <= v[idx - 1][0].second) dp[idx][1] += dp[idx - 1][0];
            if(l >= v[idx - 1][1].first && r <= v[idx - 1][1].second) dp[idx][1] += dp[idx - 1][1];
            v[idx].push_back({l, *x.find_by_order(x.order_of_key(y) + 1)});

            x.erase(y);

            dp[idx][0] %= mod;
            dp[idx][1] %= mod;
        } else x.insert(y);
    }
    int l1 = x.order_of_key(v[idx][0].first), r1 = x.order_of_key(v[idx][0].second);
    int l2 = x.order_of_key(v[idx][1].first), r2 = x.order_of_key(v[idx][1].second);
    int aa = r1 - l1, bb = r2 - l2;
    cout << ((dp[idx][0] * aa) % mod + (dp[idx][1] * bb) % mod) % mod << endl;
}
