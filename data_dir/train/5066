#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/STACK:16777216")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef complex<double> num;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

const ll INF = 1e18;
const int MAXN = 1e5 + 100;
int v[MAXN], c[MAXN];
ll dp[MAXN], mx[MAXN];
int n;

ll solve(ll a, ll b) {
    ll ans = 0;
    fill(mx, mx + MAXN, -INF);
    pll A = {-INF, -1};
    pll B = {-INF, -1};
    for (int i = 0; i < n; ++i) {
        dp[i] = v[i] * b;
        if (mx[c[i]] != -INF) {
            dp[i] = max(dp[i], mx[c[i]] + v[i] * a);
        }
        if (A.second != -1) {
            if (c[i] != A.second) {
                dp[i] = max(dp[i], A.first + v[i] * b);
            }
            else if (B.second != -1) {
                dp[i] = max(dp[i], B.first + v[i] * b);
            }
        }
        if (dp[i] > mx[c[i]]) {
            if (A.second == c[i]) {
                A.first = dp[i];
            }
            else if (B.second == c[i]) {
                if (dp[i] <= A.first) {
                    B.first = dp[i];
                }
                else {
                    B.first = dp[i];
                    swap(A, B);
                }
            }
            mx[c[i]] = dp[i];
        }
        if (mx[c[i]] > A.first) {
            B = A;
            A = {mx[c[i]], c[i]};
        }
        else if (mx[c[i]] > B.first && c[i] != A.second) {
            B = {mx[c[i]], c[i]};
        }
        ans = max(ans, dp[i]);
    }
    return ans;
}

signed main() {
    FAST_IO();
    int q;
    cin >> n >> q;
    for (int i = 0; i < n; ++i) {
        cin >> v[i];
    }
    for (int i = 0; i < n; ++i) {
        cin >> c[i];
    }
    while (q--) {
        ll a, b;
        cin >> a >> b;
        cout << solve(a, b) << '\n';
    }
}
