/// I’m not gonna run away,
/// I never go back on my word!
/// That’s my nindo: my ninja way.
/// ICPC next year
/// Naruto F2222

#include<bits/stdc++.h>
using namespace std ;
const int N = 5e5+5 ,mod = 1e9+7 ;
int n ,arr[N] ,best[N] ,diff[N] ;
int spars[20][N] ,LG[N] ;
void build(){
    LG[0] = -1 ;
    for(int i=0;i<n;++i){
        LG[i+1] = LG[i] + !(i&(i+1)) ;
        spars[0][i] = i ;
    }
    for(int lg = 1 ;(1<<lg)<=n ;++lg){
        for(int i =0;i+(1<<lg)<=n;++i){
            int a = spars[lg-1][i] ;
            int b = spars[lg-1][i+(1<<(lg-1))] ;
            spars[lg][i] = diff[a]<=diff[b] ? a : b ;
        }
    }
}
int RMQ(int s,int e){
    if(s>e)swap(s,e) ;
    int siz = e - s + 1 ;
    int lg = LG[siz] ;
    int a = spars[lg][s] ;
    int b = spars[lg][e-(1<<lg)+1] ;
    return diff[a]<=diff[b] ? a : b ;
}
long long solve(int i,int j,int add){
    if(i>j) return 0;
    int k = RMQ(i,j);
    return solve(i,k-1,diff[k]) + solve(k+1,j,diff[k]) + diff[k]-add ;
}
int main(){
    scanf("%d",&n);
    for(int i=0;i<n;++i){
        scanf("%d",arr+i);
        best[i] = arr[i];
        if(i) best[i] = max(best[i],best[i-1]);
        diff[i] = best[i] - arr[i] ;
    }
    build();
    cout << solve(0,n-1,0);
    return 0;
}
