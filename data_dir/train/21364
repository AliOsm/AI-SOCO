#define _CRT_SECURE_NO_WARNINGS
#include <fstream>
#include <string>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <iomanip>
#include <iostream>
#include <list>
#include <sstream>
#include <ctime>
#include <functional>
#include <fstream>
#include <map>
#include <stack>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <queue>
#include <tuple>
#include <fstream>
#include <numeric>
#include <regex>
#include <array>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#include <deque>
#include <complex>
#include <stack>



using namespace std;
typedef long long ll;


const int sze = 1 << 8, psze = 1 << 25, MOD1 = 1e9 + 447, MOD2 = 1e9 + 21, x1 = 139, INF = 1e9 + 1;


int tbl[4][sze][sze];
int check[sze][sze];
int n;


int count(const vector<int> &go, int left)
{
	
	for (int i = 0; i < sze; ++i)
		for (int j = 0; j < sze; ++j)
			check[i][j] = -1;

	check[0][0] = left;

	for (int i = 0; i < 2 * n; ++i)
		for (int j = 0; j < 2 * n; ++j)
		{
			if (check[i][j] != -1)
			{
				check[i + 1][j] = check[i][j] ^ 1;
				check[i][j + 1] = check[i][j] ^ 1;
			}
		}

	int cnt = 0;
	for (int i = 0; i < 2 * n; ++i)
		for (int j = 0; j < 2 * n; ++j)
		{
			if (i < n && j < n)
			{
				if (tbl[go[0]][i][j] != check[i][j])
					cnt++;
			}

			if (i >= n && j >= n)
			{
				if (tbl[go[3]][i - n][j - n] != check[i][j])
					cnt++;
			}
			
			if (i < n && j >= n)
			{
				if (tbl[go[1]][i][j - n] != check[i][j])
					cnt++;
			}

			if (i >= n && j < n)
			{
				if (tbl[go[2]][i - n][j] != check[i][j])
					cnt++;
			}
			
		}

	return cnt;
}


signed main()
{
	cin >> n;

	for (int z = 0; z < 4; ++z)
		for (int i = 0; i < n; ++i)
		{
			string s;
			cin >> s;

			for (int j = 0; j < n; ++j)
				tbl[z][i][j] = s[j] - '0';
		}

	int ans = INF;
	vector<int> go{0, 1, 2, 3};
	do
	{
		ans = min(ans, min(count(go, 0), count(go, 1)));
	} while (next_permutation(go.begin(), go.end()));

	cout << ans;
	return 0;
}