#include<bits/stdc++.h>
using namespace std;

const int N = 2e5+7;
vector<int> adj[N];

int val[N];
int n, m, a, b;


void dfs(int u, int x) {
    val[u] = x;
    for (int v: adj[u]) {
        if (val[v])    continue;
        dfs(v, x);
    }
}

vector<int> solve(int x) {
    for(int i=1; i<=n; i++) val[i] = 0;
    val[x] = -1;

    int cnt = 0;
    for (int i=1; i<=n; i++) {
        if (val[i]) continue;
        dfs(i, ++cnt);
    }

    vector<int> ans(n+1);
    for (int i=1; i<=n; i++)    ans[i] = val[i];
    return ans;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int t;
    cin>>t;

    while (t--) {
        cin>>n>>m>>a>>b;

        for (int i=1; i<=n; i++) {
            adj[i].clear();
        }

        for (int i=1; i<=m; i++) {
            int u, v;
            cin>>u>>v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        vector<int> ga = solve(a);
        vector<int> gb = solve(b);

        long long ans = 1LL*(n-2)*(n-2);

        vector<int> fra(n+1), frb(n+1);
        map<pair<int, int>, int> frab;

        for (int i=1; i<=n; i++)
            if (i!=a && i!=b) {
                fra[ga[i]]++;
                frb[gb[i]]++;
                frab[{ga[i], gb[i]}]++;
            }

        for (int i=1; i<=n; i++) {
            ans -= 1LL*fra[i]*fra[i];
            ans -= 1LL*frb[i]*frb[i];
        }

        for (auto pr: frab)
            ans += 1LL * pr.second * pr.second;

        cout<<ans/2<<"\n";

    }
}
