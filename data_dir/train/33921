//hlp [ siz ] = x ;
// In The Name Of God :
#include <bits/stdc++.h>
using namespace std ;
#define PB push_back 
#define y1 sdfd
#define X first 
#define Y second
#define S string
#define ALL(a) a . begin ( ) , a . end ( ) 
#define print(ab) for(int abc=0;abc<ab.size();abc++)cout<<ab[abc]<< " " ;
#define print_pair(ab) for(int i=0;i<ab.size();i++)cout<<ab[i].X<< " " << ab[i].Y<<endl ;
#define print_set(e) for(set<int>::iterator t=e.begin();t!=e.end();t++)cout<<*t<<" "; 
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define int long long
//#define cout cout << setprecision ( 12 ) 
typedef long long ll;
typedef long double ld;
typedef pair < ll , ll > pii ;
typedef pair < pii , ll> piii;
typedef complex < ld > point ;
const int maxn = 1e6 + 15 ;
const int inf = 1e9 + 5 ;
const int base = 173 ;
const ld pi = 3.1415926535897932384626433832795 ;
int left ( int x ) { return 2 * x ; } ;int right ( int x ) { return 2 * x + 1 ; } ;
int dp [ maxn ] , n , ar [ maxn ] , ind [ maxn ] , ans , mod = 1e9 + 7 , nmdnm [ maxn ] ;
int data [ 4 * maxn ] ;
vector < pii > vc ;

void add ( int p , int val , int st = 0 , int en = n , int id = 1 )
{
  data [ id ] += val ;
  data [ id ] %= mod ;
  if ( en - st < 2 )
    return ;
  int mid = ( st + en ) / 2 ;
  if ( p < mid )
    return add ( p , val , st , mid , left ( id ) ) ;
  return add ( p , val , mid , en , right ( id ) ) ;
} 

int get ( int l , int r , int st = 0 , int en = n , int id = 1 )
{
  if ( r <= st || en <= l )
    return 0 ;
  if ( l <= st && en <= r )
    return data [ id ] ;
  int mid = ( st + en ) / 2 ; 
  return ( get ( l , r , st , mid , left ( id ) ) +
	   get ( l , r , mid , en , right ( id ) ) ) % mod;
} 

main ( )
{
  fast ;
  
  cin >> n ;
  for ( int i = 0 ; i < n ; i ++ )
    cin >> ar [ i ] , vc . push_back ( pii ( ar [ i ] , i ) ) ;
  sort ( vc . begin ( ) , vc . end ( ) ) ;
  for ( int i = 0 ; i < n ; i ++ )
    ind [ vc [ i ] . Y ] = i ;  
  memset ( nmdnm , -1 , sizeof nmdnm ) ;
  for ( int i = 0 ; i < n ; i ++ )
    if ( nmdnm [ vc [ i ] . X ] == -1 )
      nmdnm [ vc [ i ] . X ] = i ;
  for ( int i = 0 ; i < n ; i ++ )
    {
      int cur = 1 + get ( 0 , ind [ i ] ) ;
      cur *= ar [ i ] ;
      cur %= mod ;
      int S = get ( nmdnm [ ar [ i ] ] , ind [ i ] ) ;
      cur -= S ;
      cur += mod ;
      cur %= mod ;
      add ( ind [ i ] , cur ) ;
      ans += cur ;
      ans %= mod ;
    }
  cout << ans << endl ;
}
