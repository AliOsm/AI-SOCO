/*
ye mera template hai
apna khud likho bc :P
*/

/*
Author : Sarvagya Agarwal
*/

#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define rep(i,a,n) for(__typeof(n) i=a;i<=n;++i)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

//templates
template <typename T>T expo(T e, T n){T x=1,p=e;while(n){if(n&1)x=x*p;p=p*p;n>>=1;}return x;}
template <typename T>T power(T e, T n, T m){T x=1,p=e;while(n){if(n&1)x=(x*p)%m;p=(p*p)%m;n>>=1;}return x;}
template <typename T> T InverseEuler(T a, T m){return (a==1? 1 : power(a, m-2, m));}
template <typename T> T gcd(T a, T b){while(a%=b^=a^=b^=a); return b;}
template <typename T> T lcm(T a, T b){return (a*(b/gcd(a,b)));}


//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
		cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
		const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

// DOBARA OVERFLOW KI GALTI HUI TO TU CHUTIYA HAI BC
// update : TU CHUTIYA HAI BC
int n,q;
int parent[400000],big_child[400000],subtree_size[400000];
vector<int>graph[400000];
void dfs(int node)
{
    subtree_size[node] = 1 ;
    for(auto it : graph[node])
    {
        dfs(it);
        subtree_size[node] += subtree_size[it];
        big_child[node] = max(big_child[node],subtree_size[it]);
    }
    return ;
}
int centroid[400000];
void dfs2(int node)
{
    if(graph[node].size()==0)
    {
        //leaf node
        //trace(node);
        centroid[node] = node ;
        return ;
    }
    int biggest = -1 ;
    for(auto it : graph[node])
    {
        dfs2(it);
        if(biggest==-1 || subtree_size[it] > subtree_size[biggest])
           biggest = it ;
    }
    int current = centroid[biggest];
    for(;;)
    {
        if(big_child[current] <= subtree_size[node]/2 && subtree_size[node] - subtree_size[current] <= subtree_size[node]/2)
            break;
        current = parent[current];
    }
    centroid[node] = current ;
}
int32_t main()
{
    fast;
    cin >> n >> q ;
    rep(i,2,n)
    {
        int x;
        cin>>x;
        parent[i] = x ;
        graph[x].pb(i);
    }
    /*rep(i,1,n)
    {
        trace(i);
        for(auto it : graph[i])
            cout  << it << " " ;
        cout << '\n';
    }*/
    dfs(1);
    dfs2(1);
    while(q--)
    {
        int node;
        cin>>node;
        cout<<centroid[node]<<'\n';
    }
    return 0;
}
