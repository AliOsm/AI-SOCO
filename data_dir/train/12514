#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); }
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

vector <int> g;
LL t, s;

int f(LL mid)
{
    int pre = 0;
    LL add = 0;
    FOR (i, 0, g.size()) {
        if (mid < g[i] - pre) {
            return 0;
        }
        add += min(mid - (g[i] - pre), (LL)g[i] - pre);
        pre = g[i];
    }
    return 2 * s - add <= t;
}

int main()
{
    LL n, k;
    cin >> n >> k >> s >> t;
    vector <PLL> v(n);
    FOR (i, 0, n) {
        cin >> v[i].X >> v[i].Y;
    }
    g.resize(k);
    GET(g, k);
    g.push_back(s);
    sort(IT(g));
    LL l = 0;
    LL r = 2e9 + 2;
    while (l < r) {
        LL add = 0;
        LL mid = (l + r) / 2;
        if (!f(mid)) {
            l = mid + 1;
        } else {
            r = mid;
        }
    }
    LL res = INT_MAX;
    FOR (i, 0, n) {
        if (v[i].Y < l) {
            continue;
        }
        res = min(res, v[i].X);
    }
    cout << (res == INT_MAX ? -1 : res);
    return 0;
}

