//              +-- -- --++-- +-In the name of ALLAH-+ --++-- -- --+              \\

#include <bits/stdc++.h>

#define int ll

#define F first
#define S second
#define _sz(x) (int)x.size()
#define pb push_back

#define error(x) cout << #x << " = " << x << endl

using namespace std;
using ll = long long;
using ld = long double;
using pii = pair<int, int>;

const int N = 2000 + 20;
int n, x[N], y[N], c[N], k[N];
bool dead[N];

int par[N], ans;

inline int dist (int i, int j)
{
	return abs(x[i] - x[j]) + abs(y[i] - y[j]);
}

int32_t main()
{
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);

	memset(par, -1, sizeof par);

	cin >> n;

	for (int i = 0; i < n; i++) cin >> x[i] >> y[i];
	for (int i = 0; i < n; i++) cin >> c[i];
	for (int i = 0; i < n; i++) cin >> k[i];

	for (int t = 0; t < n; t++)
	{
		int mn = -1;

		for (int i = 0; i < n; i++)
		{
			if (dead[i]) continue;
			if (mn == -1 || c[i] < c[mn]) mn = i;
		}

		int v = mn;

		dead[v] = 1;

		ans += c[v];
		for (int u = 0; u < n; u++)
		{
			if (dead[u]) continue;
			
			int val = (k[u] + k[v]) * dist(u, v);

			if (val < c[u]) c[u] = val, par[u] = v;
		}
	}

	cout << ans << '\n';

	vector <int> vec;

	for (int i = 0; i < n; i++)
		if (par[i] == -1) vec.pb(i);

	cout << _sz(vec) << '\n';
	for (int x : vec) cout << x + 1 << ' ';
	cout << '\n';

	cout << n - _sz(vec) << '\n';
	for (int i = 0; i < n; i++)
		if (par[i] != -1) cout << par[i] + 1 << ' ' << i + 1 << '\n';
}
