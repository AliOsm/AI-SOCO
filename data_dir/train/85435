#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm) -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
/* @@@ ----------------------------------- */

inline int64_t /* greatest common divisor - Euclid's algo. */
gcd(const int64_t a, const int64_t b){ return !b ? a : gcd(b, a % b); }

template<class T> inline T
str2val(const string & str)
{
    T a;
    istringstream(str, ios_base::in) >> a;
    return a;
}

const char * e676()
{
    size_t n;
    int64_t k;
    cin >> n >> k;

    const int64_t nil = numeric_limits<int64_t>::min();

    vector<int64_t> a(n + 1, nil);
    for(size_t i = 0; i < n + 1; ++i)
    {
        string str;
        cin >> str;
        if(str != "?") a[i] = str2val<int64_t>(str);
    }

    const size_t cnt = count(begin(a), end(a), nil); // how many left!
    const bool flag = ((n + 1 - cnt) & 1) == 0; // if it is computer turn!

    if(k == 0)
    {
        if(a[0] != nil) return a[0] ? "No" : "Yes";
        return flag ? "No" : "Yes";
    }

    if(cnt == 0) // nothing left
    {
        long double q = 0; // a.back();

        for(size_t i = n; 0 < i; -- i)
            q = a[i] + k * q;

        DEBUG(q);

        return k * q + a[0] != 0 ? "No" : "Yes";
    }

    // if the computer goes last
    if((n + 1) & 1) return "No";

    // can always make this work at the very last step!
    // - k a0 == a1 + k a2 + k^2 a3 + k^3 a4 + ...
    return "Yes";
}

int main(const int argc, char * argv [])
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    cout << e676();

    return EXIT_SUCCESS;
}
