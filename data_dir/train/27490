#include<bits/stdc++.h>

using namespace std;

typedef complex<long double> base;

#define pb push_back
#define ll long long
#define ld long double

const int maxn=(int)1e5+5;
ll a[maxn],tree[4*maxn],dp[maxn],pre[maxn];

void build(int node,int s,int e)
{
	if(s>e)
	{
		return;
	}
	
	if(s==e)
	{
		tree[node]=a[s];
	}
	
	else
	{
		int mid=(s+e)>>1;
		
		build(node<<1,s,mid);build(node<<1|1,mid+1,e);
		
		tree[node]=min(tree[node<<1],tree[node<<1|1]);
	}
}

ll query(int node,int s,int e,int l,int r)
{
	if(s>e || l>e || r<s)
	{
		return (ll)(1e15);
	}
	
	if(l<=s && r>=e)
	{
		return tree[node];
	}
	
	else
	{
		int mid=(s+e)>>1;
		
		return min(query(node<<1,s,mid,l,r),query(node<<1|1,mid+1,e,l,r));
	}
}

int main()
{
	int n,c;cin>>n>>c;
	
	for(int i=1;i<=n;i++)
	{
		cin>>a[i];
		
		pre[i]=pre[i-1]+a[i];
	}
	
	if(c==1)
	{
		cout<<0<<endl;
		
		return 0;
	}
	
	build(1,1,n);ll xx=(ll)(1e15);
	
	for(int i=1;i<=n;i++)
	{
		if(i>=c)
		{
			dp[i]=dp[i-c]+pre[i]-pre[i-c]-query(1,1,n,i-c+1,i);
			
			dp[i]=min(dp[i],xx+pre[i]);
		}
		
		else
		{
			dp[i]=pre[i];
		}
		
		xx=min(xx,dp[i]-pre[i]);
	}
	
	/*
	
	for(int i=1;i<=n;i++)
	{
		cout<<dp[i]<<" ";
	}
	
	cout<<endl;
	
	*/
	
	cout<<dp[n]<<endl;
}



