#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const ll N=200011;

vector<ll> v;
ll A[N];
ll anc[N][30];
vector<ll> adj[N];
ll T[N];
ll L[N];
bool vis[N];
ll n,m,k;

void llena(ll u){
	if(u==n+1 || vis[u]) return;
	vis[u]=true;
	ll pos=upper_bound(v.begin(),v.end(),v[u-1]+k)-v.begin();
	adj[pos].push_back(u);
	llena(pos);
	return;
}

void dfs(ll u){
	ll sz=adj[u].size();
	for(ll i=0; i<sz; i++){
		ll v=adj[u][i];
		L[v]=L[u]+1;
		T[v]=u;
		dfs(v);
	}
	return;
}

void build(ll n){
	for(ll i=0; i<n; i++){
		anc[i][0]=T[i];
	}
	for(ll j=1; (1<<j)<n; j++){
		for(ll i=0; i<n; i++){
			if(anc[i][j-1]!=-1){
				anc[i][j]=anc[anc[i][j-1]][j-1];
			}
		}
	}
	return;
}

ll halla(ll u, ll aux){
	if(u==-1) return n-1;
	if(aux==0) return u;
	ll lg=63-(__builtin_clzll(aux));
	return halla(anc[u][lg],aux-(1ll<<lg));
}

int main(){
	
	for(ll i=0; i<N; i++){
		for(ll j=0; j<30; j++){
			anc[i][j]=-1;
		}
	}
	
	scanf("%lld %lld %lld",&n,&m,&k);
	for(ll i=0; i<n; i++){
		scanf("%lld",&A[i]);
	}
	v.push_back(0);
	for(ll i=0; i<n; i++){
		v.push_back(v[i]+A[i]);
	}
	for(ll i=1; i<=n; i++){
		if(!vis[i]){
			llena(i);
		}
	}
	n+=2;
	for(ll i=0; i<n; i++){
		T[i]=-1;
		L[i]=-1;
	}
	L[n-1]=0;
	dfs(n-1);
	build(n);
	ll mx=0;
	for(ll i=1; i<n-1; i++){
		ll aux=halla(i,m);
		if(aux==n-1){
			mx=max(mx,aux-i);
		}
	}
	printf("%lld\n",mx);
	return 0;
}
