#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <vector>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <queue>
#include <unordered_set>
#include <ctime>

using namespace std;

const int N = 500001;

int n;
int a[N];
vector < int > g[N];
int c[N];
long long d[N];
bool used[N];

int gcd(int a, int b)
{
    if (b == 0)
        return a;
    else
        return gcd(b, a % b);
}


int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
/*#else
    freopen(TASK".in", "r", stdin);
    freopen(TASK".out", "w", stdout);*/
#endif
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i)
        scanf("%d", &a[i]);
    for (int i = n + 1; i <= 2 * n; ++i)
        a[i] = a[i % n];
    for (int i = 1; i < n; ++i)
    {
        int k = gcd(i, n);
        g[k].push_back(i);
    }
    long long ans = 0;
    for (int i = 1; i < n; ++i)
    {
        if (g[i].size() == 0)
            continue;
        for (int j = 1; j <= i; ++j)
        {
            int mx = a[j];
            for (int k = j; k <=  2 * n; k += i)
                mx = max(mx, a[k]);
            for (int k = j; k <= 2 * n; k += i)
                c[k] = mx;
        }
        int l = 1; int r = 1;
        while (l <= n)
        {
            if (r == 2 * n)
            {
                for (int j = l; j < min(r, n + 1); ++j)
                {
                    int len = r - j;
                    d[len]++;
                }
                break;
            }
            if (a[r] == c[r])
                r++;
            else
            {
                for (int j = l; j < min(r, n + 1); ++j)
                {
                    int len = r - j;
                    d[len]++;
                }
                l = r + 1;
                r = l;
            }
        }
        for (int j = 0; j < g[i].size(); ++j)
            used[g[i][j]] = true;
        for (int j = 2 * n; j >= 1; --j)
        {
            if (used[j] == true)
                ans += d[j];
            d[j - 1] += d[j];
            d[j] = 0;
        }
        d[0] = 0;
        for (int j = 0; j < g[i].size(); ++j)
            used[g[i][j]] = false;

    }
    cout << ans << endl;

    return 0;
}