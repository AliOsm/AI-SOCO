#include <bits/stdc++.h>
using namespace std;

struct union_find_tree {
    std::vector<int> par, rank;
    union_find_tree(){}
    union_find_tree(int size)
    {
        par=std::vector<int>(size);
        for(int i=0; i<size; ++i) par[i]=i;
    }
    int root(int x)
    {
        if (x==par[x]) return x;
        return par[x]=root(par[x]);
    }
    void unite(int x, int y)
    {
        x=root(x);
        y=root(y);
        if (x==y) return;
        if (rank[x]>rank[y]) {
            par[x]=y;
        }
        else {
            par[y]=x;
        }
    }
    bool same(int x, int y)
    {
        return root(x)==root(y);
    }
};

int main()
{
    cin.sync_with_stdio(0);
    cin.tie(0);

    int n, m; cin>>n>>m;
    vector<int> c(n);
    for(int& e: c) cin>>e;

    union_find_tree t(n);
    t.rank=c;
    while (m--) {
        int a, b; cin>>a>>b;
        t.unite(--a, --b);
    }

    vector<unsigned> x(n, -1);
    for(int i=0; i<n; ++i)
        x[t.root(i)]=min(x[t.root(i)], 0u+c[t.root(i)]);

    auto res=0LL;
    for(auto e: x) if (~e) res+=e;
    cout<<res<<endl;

}
