/* winners never quit and quitters never win.
      #swap                                 */
      
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
using namespace std;
using namespace __gnu_pbds;
#pragma GCC optimize ("-O3")
using ll = long long;
using ld = long double;
const ll mod = 1000000007;
const ll inf = 1000000000000000000;
const ll rk = 256;

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

#define pb push_back
#define mp make_pair
#define vc vector
#define fs first
#define sec second
#define pq priority_queue
#define lb lower_bound
#define ub upper_bound
#define pll pair<ll,ll> 
#define pls pair<ll,string>
#define psl pair<string,ll>
#define plc pair<ll,char>
#define pcl pair<char,ll>
#define pss pair<string,string>
#define all(v) v.begin(),v.end()
#define tol(s) transform(s.begin(),s.end(),s.begin(),::tolower);
#define tou(s) transform(s.begin(),s.end(),s.begin(),::toupper);

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }

void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cerr << *it << " = " << a << endl;
	err(++it, args...);
}

#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define T ll t=0;cin>>t;for(ll test=0;test<t;test++)

ll n,k;
vc<pll> factors;

void find_factors()
{
    for(ll a=2;a*a<=n;a++)
    {
        if(n%a==0)
        {
            ll cnt=0;
            while(n%a==0)
            {
                cnt++;
                n/=a;
            }
            factors.pb({a,cnt});
        }
    }
    if(n>1)
    {
        factors.pb({n,1});
    }
}

ll fast_exp(ll base, ll exp1) {
    base%=mod;
    ll res=1;
    while(exp1>0) {
       if(exp1&1) res=(res*base)%mod;
       base=(base*base)%mod;
       exp1/=2;
    }
    return res%mod;
} 

ll inv[66];

ll solve(ll factor,ll cnt)
{
    ll dp[k+1][cnt+1];
    rep(a,0,k+1)
        rep(b,0,cnt+1)
            dp[a][b]=0;
    dp[0][cnt]=1;
    
    rep(a,0,k)
    {
        rep(b,0,cnt+1)
        {
            rep(c,0,b+1)
            {
                dp[a+1][c]=(dp[a+1][c]+(dp[a][b]*inv[b+1])%mod)%mod;
            }
        }
    }
    //cout<<factor<<" "<<cnt<<endl;
    ll ans=0,x=1;
    rep(a,0,cnt+1){
        ans=(ans+(dp[k][a]*x)%mod)%mod;
        x=(x*factor)%mod;
    }
    //cout<<(2*500000005)%mod<<endl;
    return ans;
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
	//isprime();
	//coeff();
	/*freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);*/
    cin>>n>>k;
    find_factors();
    ll ans=1;
    rep(a,0,66)
    {
        inv[a]=fast_exp(a,mod-2);
    }
    for(auto y:factors)
    {
        //cout<<solve(y.fs,y.sec)<<endl;
        ans=(ans*solve(y.fs,y.sec))%mod;
    }
    cout<<ans<<endl;
	return 0;
}