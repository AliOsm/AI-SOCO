#include <bits/stdc++.h>

using namespace std;

#define long long long
//#define double __float128
#define INF (long) 1e18
#define MOD 1'000'000'007
#define mll map<long, long>
#define pll pair<long, long>
#define umap unordered_map
#define umll umap<long, long>
#define pb push_back
#define FOR(i, a, b) \
  for (long i = a; i < (long) b; i++)
#define SORT(v, atr) \
  stable_sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr < b.atr; });
#define UNSORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr > b.atr; });
#define PRINTV(v) \
  FOR (_i, 0, v.size()) \
    cout << v[_i] << " "; \
  cout << "\n";

set<long> gera_primos(long n)
{
  set<long> primos;
  vector<bool> crivo(n+1);
  primos.insert(2);
  for (long i = 3; i <= n; i += 2) {
    if (crivo[i]) continue;
    primos.insert(i);
    for (long j = i; j <= n; j += i) {
      crivo[j] = true;
    }
  }
  return primos;
}

struct Link
{
  long from, to, color;
};

struct Node
{
  bool visitado = false;
  vector<Link> in, out;
};

int main()
{
  ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

  long n, m;
  cin >> n >> m;

  vector<string> a(n);
  for (auto &x : a) cin >> x;

  vector<set<long>> disp;
  disp.pb(set<long>());
  auto &x = *disp.begin();
  FOR (i, 0, n) {
    x.insert(i);
  }
  long total = 0;
  FOR (j, 0, m) {
    vector<set<long>> novo;
    for (auto &d : disp) {
      set<long> aux;
      char ant = 0;
      for (auto &i : d) {
        if (ant == 0) {
          ant = a[i][j];
          continue;
        }
        if (a[i][j] < ant) {
          total++;
          goto end;
        }
        if (a[i][j] == ant) {
          aux.insert(i-1);
          aux.insert(i);
        } else {
          if (not aux.empty()) novo.pb(aux);
          aux = set<long>();
        }
        ant = a[i][j];
      }
      if (not aux.empty()) novo.pb(aux);
    }
    disp = novo;
  end: ;
  }
  printf("%lld\n", total);
}
