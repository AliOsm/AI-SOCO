#include <bits/stdc++.h>

using namespace std;

using ll = long long;

class problem {
  const int inf = 1e9;

  int n, k;
  struct edge {
    int to, cost;
  };
  vector <vector <edge> > g;
  vector <vector <vector <int> > > dp;

  bool check_inside(int start, int last, int v) {
    return min(start, last) <= v && v <= max(start, last);
  }

  int solve(int start, int last, int rest) {
    if (dp[start][last][rest] != -2) {
      return dp[start][last][rest];
    }
    if (rest <= 1) {
      return dp[start][last][rest] = 0;
    }
    if (start == last) {
      return dp[start][last][rest] = inf;
    }
    dp[start][last][rest] = inf;
    for (auto e: g[start]) {
      if (!check_inside(start, last, e.to))
        continue;
      dp[start][last][rest] = min(dp[start][last][rest],
        min(solve(e.to, last, rest - 1), solve(e.to, (start < last ? start + 1 : start - 1), rest - 1)) + e.cost);
    }
    return dp[start][last][rest];
  }
public:
  problem() {
    cin >> n >> k;
    int m;
    cin >> m;
    g.resize(n);
    for (int i = 0; i < m; ++i) {
      int v, to, cost;
      cin >> v >> to >> cost;
      --v, --to;
      g[v].push_back(edge({to, cost}));
    }
    dp.resize(n, vector <vector <int> > (n, vector <int> (k + 1, -2)));
  }

  void solve() {
    int ans = inf;
    for (int i = 0; i < n; ++i) {
      ans = min({ans, solve(i, n - 1, k), solve(i, 0, k)});
    }
    cout << (ans == inf ? -1 : ans) << endl;
    return;
  }
};

int main() {
#ifdef LOCAL
  freopen("input.txt", "r", stdin);
#endif
  ios_base::sync_with_stdio(0);
  cin.tie(0); cout.tie(0);
  cout.precision(20);
  cout << fixed;
  problem().solve();
}