	#include <bits/stdc++.h>
		    
		    
		    using namespace std;
		
		    #define ll long long
		    #define do double
		    #define ff first
		    #define ss second
		    #define FOR(a,n) for(i=0;i<n;i++){    cin>>a[i];}
		    #define pb push_back
		    #define mp make_pair
		    #define inf LONG_LONG_MAX
		    #define mod  1000000007
		    #define epsilon std::numeric_limits<double>::epsilon()
		    #define FAST ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
		
		    

		ll d,x,y;
		void extendedEuclid(ll A, ll B) 
		{
		    if(B == 0) {
		        d = A;
		        x = 1;
		        y = 0;
		    }
		    else {
		        extendedEuclid(B, A%B);
		        int temp = x;
		        x = y;
		        y = temp - (A/B)*y;
		    }
		}

		ll power(ll x,ll y, ll p) 
		{ 
		    ll res = 1; 
		    x = x % p;
		    while (y > 0) 
		    {  // If y is odd, multiply x with result 
		        if (y & 1) 
		            res = (res*x) % p;
		            
		        y = y>>1; 
		        x = (x*x) % p;   
		    } 
		    return res; 
		} 



	map<ll,ll> par,val;
	void ini()
	{
		for(ll i=0;i<500010;i++)
			{
				par[i]=i;
			}
	}

	ll root(ll x)
	{
		while(par[x]!=x)
		{
			par[x]=par[par[x]];
			x=par[x];
		}
		return x;
	}

	void uni(ll x,ll y)
	{
		x=root(x);
		y=root(y);
			par[y]=par[x];
	}

	int gcdExtended(int a, int b, int *x, int *y) 
	{ 

	    if (a == 0) 
	    { 
	        *x = 0, *y = 1; 
	        return b; 
	    } 
	    int x1, y1;
	    int gcd = gcdExtended(b%a, a, &x1, &y1); 
	    *x = y1 - (b/a) * x1; 
	    *y = x1;
	    return gcd; 
	}  
	int modInverse(int b, int m) 
	{ 
	    int x, y; 
	    int g = gcdExtended(b, m, &x, &y); 
	    if (g != 1) 
	        return -1; 
	    return (x%m + m) % m; 
	}
	ll isPrime(ll n)
	{
	    if(n==0||n==1)
	        return n;
	    if(n%2==0)
	        return (ll)2;
	    if(n%3==0)
	        return (ll)3;
	    else
	    {
	        for(ll i=5;i*i<=n;i+=6)
	        {
	            if(n%i==0)
	                return i;
	            if(n%(i+2)==0)
	                return (i+2);
	        }
	        return n;
	    }
	}
	const ll N=10000010;
	vector<bool> prime(N);
	vector<ll> spf(N);
	void sieve()
	{
		fill(prime.begin(),prime.end(),true);
		prime[1]=false;
		prime[0]=false;
		ll i,j;
		for(i=2;i*i<=N;i++)
		{
			if(prime[i]==true)
			{	spf[i]=i;
				for(j=i*i;j<N;j+=i)
				{
					prime[j]=false;
					if(spf[j]==0)
						spf[j]=i;
				}
			}
		}
	}

const ll NN=1000000000000000;
int main()
{
	FAST;
	ll n,i,j,k;
	cin>>n>>k;
	map<ll,ll> fr;
	ll sum=0,ans=0;
	fr[0]=1;
	for(i=0;i<n;i++)
	{
		ll x;
		cin>>x;
		sum+=x;
		
		for(j=0;pow(k,j)<NN;j++)
		{
			ll t=pow(k,j);
			t=sum-t;
			ans+=fr[t];
			if(k==1)
				break;
			if(k==-1 && j==1)
				break;			
		}
		fr[sum]++;
		//cout<<ans<<endl;
	}
	cout<<ans;


		
}
