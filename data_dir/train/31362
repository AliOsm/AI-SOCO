#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((ll)(1e8))
#define pi (acos(-1))
#define M ((ll)(998244353))
#define NN ((ll)(1e4+2))
#define N ((ll)(1e3 + 5))
#define eps 0
#define log 20
#define xx first
#define yy second



using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long ull;

typedef tree < ll,  null_type,  less < ll >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;
/// typedef tree < pair < ll,ll >,  null_type,  less < pair < ll,ll > >,  rb_tree_tag,  tree_order_statistics_node_update > o_setp;
/// o_set s;
/// s.order_of_key(k) : Number of items strictly smaller than k .
/// *(s.find_by_order(k)) : K-th element in a set (counting from zero).

int vis[2][N][N], dp[2][N][N], gap, arr[N], n, nxt[N], cnt[N], brr[N];

int call(int rem , int i , bool flag)
{
    if(rem<0) return 0;
    if(rem==0){
        vis[flag][rem][i] = gap+1;
        return dp[flag][rem][i] = flag;
    }
    if(i>n) return 0;
    if(vis[flag][rem][i]==gap+1) return dp[flag][rem][i];

    vis[flag][rem][i] = gap+1;

    dp[flag][rem][i] = call(rem,i+1,flag);

    if(gap==arr[nxt[i]]-arr[i]){
        dp[flag][rem][i] += (ll)cnt[i]*cnt[nxt[i]]*call(rem-2,nxt[nxt[i]],1)%M;
        if(dp[flag][rem][i]>=M) dp[flag][rem][i] -= M;
        dp[flag][rem][i] += (ll)cnt[i]*call(rem-1,nxt[i]+1,flag)%M;
        if(dp[flag][rem][i]>=M) dp[flag][rem][i] -= M;
    }
    else{
        dp[flag][rem][i] += (ll)cnt[i]*call(rem-1,nxt[i],flag)%M;
        if(dp[flag][rem][i]>=M) dp[flag][rem][i] -= M;
    }

    return dp[flag][rem][i];
}

int main()
{
    int k;
    scanf("%d %d",&n,&k);
    for(int i = 1; i<=n; i++) scanf("%d",&brr[i]);
    sort(brr+1,brr+1+n);
    int i = 1;
    arr[1] = brr[1];
    cnt[1] = 1;
    for(int j = 2; j<=n; j++){
        if(brr[j]==brr[j-1]){
            cnt[i]++;
        }
        else{
            i++;
            cnt[i] = 1;
            arr[i] = brr[j];
        }
    }
    n = i;
    arr[n+1] = 1e9;
    cnt[n+1] = 1;
    //for(ll i = 1; i<=n; i++) //cout<<arr[i]<<" ";
    //cout<<endl;
    priority_queue < pair < int , int > > q;
    for(int i = 1; i<=n; i++){
        nxt[i] = i+1;
        q.push(make_pair(-arr[nxt[i]]+arr[i],i));
    }
    int ans = 0;
    for(gap = 1; gap<=1e5 ;gap++){
        while(1){
            pair < int , int > p = q.top();
            if(-p.first>=gap) break;
            q.pop();
            int i = p.second;
            while(arr[nxt[i]]-arr[i]<gap) nxt[i]++;
            q.push(make_pair(-arr[nxt[i]]+arr[i],i));
        }
        int c = 0;
        for(int i = 1; i<=n; i = nxt[i]) c++;
        if(c<k) break;
        ans += (ll)gap*call(k,1,0)%M;
        //if(call(k,1,0)) //cout<<gap<<" "<<ans<<endl;
//        if(gap==4){
//
//            for(ll i = 0; i<=k; i++){
//                for(ll j = 1; j<=n; j++){
//                    if(vis[0][i][j]==gap+1) //cout<<0<<" "<<i<<" "<<j<<" "<<dp[0][i][j]<<endl;
//                    if(vis[1][i][j]==gap+1) //cout<<1<<" "<<i<<" "<<j<<" "<<dp[1][i][j]<<endl;
//                }
//            }
//
//        }
        if(ans>=M) ans -= M;
    }

    printf("%d\n",ans);
    return 0;
}
