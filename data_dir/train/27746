//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <iostream>
#include <stdlib.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <unordered_map>
#include <random>
#include <assert.h>
#include <memory.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

inline void setmin(int &x, int y) { if (y < x) x = y; }
inline void setmax(int &x, int y) { if (y > x) x = y; }
inline void setmin(ll &x, ll y) { if (y < x) x = y; }
inline void setmax(ll &x, ll y) { if (y > x) x = y; }

const int N = 100000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int P1 = 31;
const int P2 = 57;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const int MOD2 = 998244353;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

int a[N];
pair<int, int> b[300];
pair<int, int> A[600 + 10];

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n, m;
    cin >> n >> m;
    rep(i, 0, n) {
        cin >> a[i];
    }
    vector<int> diff;
    diff.push_back(0);
    diff.push_back(n);
    rep(i, 0, m) {
        cin >> b[i].fi >> b[i].se;
        b[i].fi--;
        diff.push_back(b[i].fi);
        diff.push_back(b[i].se);
    }
    sort(diff.begin(), diff.end());
    diff.resize(unique(diff.begin(), diff.end()) - diff.begin());
    int len = sz(diff) - 1;
    rep(i, 0, len) {
        A[i] = {inf, -inf};
        rep(j, diff[i], diff[i + 1]) {
            setmin(A[i].fi, a[j]);
            setmax(A[i].se, a[j]);
        }
    }
    rep(i, 0, m) {
        b[i].fi = lower_bound(diff.begin(), diff.end(), b[i].fi) - diff.begin();
        b[i].se = lower_bound(diff.begin(), diff.end(), b[i].se) - diff.begin();
    }
    int best = -1;
    int P_MIN, P_MAX;
    rep(p_min, 0, len) {
        rep(p_max, 0, len) {
            int val = A[p_max].se - A[p_min].fi;
            rep(i, 0, m) {
                if (b[i].fi <= p_min && b[i].se > p_min && !(b[i].fi <= p_max && b[i].se > p_max)) {
                    val++;
                }
            }
            if (val > best) {
                best = val;
                P_MIN = p_min;
                P_MAX = p_max;
            }
        }
    }
    vector<int> out;
    rep(i, 0, m) {
        if (b[i].fi <= P_MIN && b[i].se > P_MIN && !(b[i].fi <= P_MAX && b[i].se > P_MAX)) {
            out.push_back(i);
        }
    }
    cout << best << "\n";
    cout << sz(out) << "\n";
    for (int i : out) {
        cout << i + 1 << " ";
    }
    cout << "\n";
    return 0;
}