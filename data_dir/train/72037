#include<bits/stdc++.h>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); ++i)
#define for1(i, n) for(int i = 1; i < int(n); ++i)
#define fork(i, k, n) for(int i = int(k); i <= int(n); ++i)
#define forft(i, from, to) for(int i = int(from); i < int(to); ++i)
#define forr(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define pb push_back
#define mp make_pair
#define mnp(a, b) make_pair((a) < (b) ? (a) : (b), (a) < (b) ? (b) : (a))
#define sz(d) int(d.size())
#define all(a) a.begin(), a.end()
#define ms(a, v) memset(a, v, sizeof(a))
#define msn(a, v, n) memset(a, v, n * sizeof(a[0]))
#define mcn(dst, src, n) memcpy(dst, src, n * sizeof(src[0]))
#define x first
#define y second
#define correct(x, y, xmax, ymax) ((x) >= 0 && (x) < (xmax) && (y) >= 0 && (y) < (ymax))

template<typename T> T sqr(const T &x) {
    return x * x;
}

template<typename T> T my_abs(const T &x) {
    return x < 0 ? -x : x;
}

typedef long long li;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned long long uli;
typedef long double ld;
typedef pair<int,int> pt;
typedef pair<li,li> pli;
typedef pair<ld,ld> pd;

const int INF = (int)1e9;
const li LINF = (li)4e18;
const li INF64 = LINF;
const li INFLL = LINF;
const ld EPS = 1e-9;
const ld PI = 3.1415926535897932384626433832795;
const int N = 1000 * 1000 + 9;
const int LOGN = 21;
const int MOD = 1000 * 1000 * 1000 + 7;

int n;
pt a[N];
int dp[N][LOGN];
int f[N], invf[N];
int p2[N];

inline int sum(const int &a, const int &b){
    int c = a + b;
    if(c >= MOD)    
        c -= MOD;
    return c;
}

inline int mul(const int &a, const int &b){
    return (a * 1LL * b) % MOD;
}

bool read() {
    if(!(cin >> n))
        return false;
    forn(i, n)
        scanf("%d %d", &a[i].x, &a[i].y);
    return true;
}

int C(int n, int k){
    return mul(f[n], mul(invf[k], invf[n - k]));
}

int C_(int n, int k){
    if(k < 0)
        return 0;
    if(k == 0)
        return 1;
    return C(n + k - 1, k);
}

int bp(int a, int n){
    int res = 1;
    while(n > 0){
        if(n & 1)
            res = mul(res, a);
        a = mul(a, a);
        n >>= 1;
    }
    
    return res;
}

int inv(int a){
    int inva = bp(a, MOD - 2);
    assert(mul(a, inva) == 1);
    return inva;
}

void solve() {
    
    f[0] = invf[0] = 1;
    for(int i = 1; i < N; ++i){
        f[i] = mul(f[i - 1], i);
        invf[i] = inv(f[i]);
    }
    p2[0] = 1;
    for(int i = 1; i < N; ++i)
        p2[i] = sum(p2[i - 1], p2[i - 1]);
        
    
    for(int i = 2; i < N; ++i)
        dp[i][1] = 1;
    
    for(int j = 1; j < LOGN - 1; ++j) 
        forn(i, N){
            if(dp[i][j] == 0)
                continue;
            for(int k = i + i; k < N; k += i)
                dp[k][j + 1] = sum(dp[k][j + 1], dp[i][j]);
        }
    
    forn(i, n){
        int len = a[i].y, p = a[i].x;
        if(p == 1){
            printf("%d\n", p2[len - 1]);
            continue;
        }
        int res = 0;
        forn(i, LOGN)
            res = sum(res, mul(dp[p][i], C_(i + 1, len - i)));
        
        res = mul(res, p2[len - 1]);
        printf("%d\n", res);
    }
}

//#define FILES

#define TASK "taskname"

int main() {

#ifdef SU2_PROJ
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    
    srand((unsigned int)time(NULL));

    cout << setprecision(15) << fixed;

    read();//cout << "FFF";return 0;
    solve();
    
#ifdef SU2_PROJ
    cerr << "time: " << clock() << " ms" << endl;
#endif

    return 0;
}