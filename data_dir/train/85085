#include <bits/stdc++.h>
#include <cctype>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::less<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef unsigned long long uint64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 500'000;
const int LOGN = 19;

int n, m, k;
int t[N * 4];
int a[N], ans[N];

int merge(int l, int r) {
  if (a[l] > a[r]) {
    return r;
  }
  return l;
}

void build(int v, int l, int r) {
  if (l + 1 == r) {
    t[v] = l;
  } else {
    int mid = (l + r) / 2;
    build(v * 2 + 1, l, mid);
    build(v * 2 + 2, mid, r);
    t[v] = merge(t[v * 2 + 1], t[v * 2 + 2]);
  }
}

int get(int v, int l, int r, int ql, int qr) {
  if (l == ql && r == qr) {
    return t[v];
  }
  int mid = (l + r) / 2;
  if (qr <= mid) {
    return get(v * 2 + 1, l, mid, ql, qr);
  }
  if (ql >= mid) {
    return get(v * 2 + 2, mid, r, ql, qr);
  }
  return merge(get(v * 2 + 1, l, mid, ql, mid), get(v * 2 + 2, mid, r, mid, qr));
}

int64 calc(int l, int r) {
  if (l >= r) {
    return 0;
  }
  if (l + 1 == r) {
    return a[l];
  }
  int mn = get(0, 0, n, l, r);
  int64 v1 = calc(l, mn) + a[mn] * 1ll * (r - mn);
  int64 v2 = calc(mn + 1, r) + a[mn] * 1ll * (mn + 1 - l);
  if (v1 > v2) {
    fill(ans + mn, ans + r, a[mn]);
    return v1;
  }
  fill(ans + l, ans + mn + 1, a[mn]);
  return v2;
}

void solve(int) {
  cin >> n;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
    ans[i] = a[i];
  }
  build(0, 0, n);
  calc(0, n);
  for (int i = 0; i < n; ++i) {
    cout << ans[i] << ' ';
  }
  cout << '\n';
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}

