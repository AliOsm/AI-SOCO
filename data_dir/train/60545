#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

#define rep(i,n) for(int i=0;i<(n);++i)
#define REP(i,n) for(int i=1;i<=(n);++i)
#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl
#define tr(it,c) for(VI::iterator it=(c).begin(); it!=(c).end(); ++it)

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long int64;
typedef pair<int,int> pii;

int gcd(int a,int b) { return b==0 ? a : gcd(b,a%b);}
int n,m;

const int maxn=100000;
VI p;
bool isp[maxn+50]={};
bool has[maxn+50];
int ans[maxn+50];

void gp()
{
	memset(isp,true,sizeof(isp));
	isp[0]=isp[1]=true;
	for(int i=2;i<=maxn;i++) if(isp[i])
	{
		p.PB(i);
		for(int64 j=int64(i)*i;j<=maxn;j+=i)
			isp[j]=false;
	}	
}

bool st[maxn+50]={};

int main(void)
{gp();
	scanf("%d%d",&n,&m);
	while(m--)
	{
		char str[5];int a; scanf("%s%d",str,&a);
		if(str[0]=='+')
		{
			if(st[a]) puts("Already on");
			else
			{
				int b=a;
				bool tag=true;
				tr(it,p)
				{
					if(b==1) break;
					if(isp[b])
					{
						if(has[b]) printf("Conflict with %d\n",ans[b]), tag=false;
						break;
					}
					else if(b%(*it)==0)
					{
						if(has[*it]) {printf("Conflict with %d\n",ans[*it]);tag=false;break;}
						while(b%(*it)==0) b/=*it;
					}
				}
				if(!tag) continue;
				puts("Success"); st[a]=true;
				b=a;
				tr(it,p)
				{
					if(isp[b]) has[b]=true,ans[b]=a;
					else if(b%(*it)==0) { has[*it]=true, ans[*it]=a; while(b%(*it)==0) b/=*it;}
				}
			}
		}
		else
		{
			if(!st[a]) puts("Already off");
			else
			{
				int b=a;
				puts("Success");
				st[a]=false;
				tr(it,p)
				{
					if(b==1) break;
					if(isp[b]) has[b]=false;
					else if(b%(*it)==0)
					{
						has[*it]=false;
						while(b%(*it)==0) b/=*it;
					}
				}
			}
		}
	}
	return 0;
}