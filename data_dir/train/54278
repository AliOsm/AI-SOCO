#define _CRT_SECURE_NO_WARNINGS
#include <fstream>
#include <string>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <iomanip>
#include <iostream>
#include <list>
#include <sstream>
#include <ctime>
#include <functional>
#include <fstream>
#include <map>
#include <stack>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <queue>
#include <tuple>
#include <fstream>
#include <numeric>
#include <regex>
#include <array>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#include <deque>
#include <complex>
#include <stack>



using namespace std;
typedef long long ll;


const ll sze = 1 << 11, MOD1 = 1e9 + 447, MOD2 = 1e9 + 21, x1 = 139;


inline ll MOD11(ll v)
{
	if (v < 0)
	{
		if (-v < MOD1)
			return v + MOD1;
		else
			return v % MOD1 + MOD1;
	}

	if (v < MOD1)
		return v;
	else
		return v % MOD1;
}


ll power[sze] = {1};


ll get_substr(int l, int r, const vector<ll> &v)
{
	if (!l)
		return v[r];
	else
		return MOD11(v[r] - v[l - 1] * power[r - l + 1]);
}


int main()
{
	string s, pref, suf;
	cin >> s >> pref >> suf;
	int n = s.size();

	for (int i = 1; i < sze; ++i)
		power[i] = MOD11(power[i - 1] * x1);

	ll first = pref[0], second = suf[0];

	for (int i = 1; i < pref.size(); ++i)
		first = MOD11(first * x1 + pref[i]);

	for (int i = 1; i < suf.size(); ++i)
		second = MOD11(second * x1 + suf[i]);

	vector<ll> my_hash(n);
	my_hash[0] = s[0];

	for (int i = 1; i < n; ++i)
		my_hash[i] = MOD11(my_hash[i - 1] * x1 + s[i]);

	int cnt = 0;
	for (int i = max(pref.size(), suf.size()); i <= n; ++i)
	{
		set<ll> ans;
		for (int j = 0; j + i - 1 < n; ++j)
		{
			if (first == get_substr(j, j + pref.size() - 1, my_hash) && second == get_substr(i + j - suf.size(), i + j - 1, my_hash))
				ans.insert(get_substr(j, i + j - 1, my_hash));
		}

		cnt += ans.size();
	}
		
	cout << cnt;

	return 0;
}