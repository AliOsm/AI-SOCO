#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <cassert>
#include <ctime>


using namespace std;

#ifdef WIN32
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<ll> vll;
typedef vector<vll> vvll;

ll rdtsc() {
    ll tmp;
    asm("rdtsc" : "=A"(tmp));
    return tmp;
}

inline int myrand() {
    return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
    return myrand() % x;
}

#define TASKNAME "text"
#define pb push_back
#define mp make_pair
#define EPS (1e-9)
#define INF ((int)1e9)
#define sqr(x) ((x) * (x))         
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

bool solve() {
    int k, ns[3], ts[3];
    if (scanf("%d", &k) < 1)
        return 0;
    for (int i = 0; i < 3; ++i)
        scanf("%d", &ns[i]);
    for (int i = 0; i < 3; ++i)
        scanf("%d", &ts[i]);
    
    multiset<int> stop[3];
    int tme = 0;
    int ans = 0;
    while (1) {
        if (k && ns[0] && ns[1] && ns[2]) {
            //eprintf("start %d\n", tme);
            for (int i = 0; i < 3; ++i) {
                --ns[i];
                stop[i].insert(tme + ts[i]);
            }
            ans = tme + ts[0] + ts[1] + ts[2];
            --k;
            continue;
        }
        int mn = -1, val = INF;
        for (int i = 0; i < 3; ++i) {
            if (stop[i].begin() != stop[i].end() && val > *stop[i].begin())
                mn = i, val = *stop[i].begin();
        }

        if (mn == -1 && k == 0)
            break;
        assert(mn != -1);
        tme = val;
        //eprintf("return val = %d to %d\n", val, mn);
        stop[mn].erase(stop[mn].begin());
        ++ns[mn];
    }

    printf("%d\n", ans);
    return 1;
}

int main() {
    srand(rdtsc());
#ifdef DEBUG
    freopen(TASKNAME".in", "r", stdin);
    freopen(TASKNAME".out", "w", stdout);
#endif
    
    while (1) {
        if (!solve())
            break;
        #ifdef DEBUG
            eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
        #endif
    }
    return 0;
}
