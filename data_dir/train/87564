/*
 by skydog
 */
#include <iostream>
#include <cstdio>
#include <vector>
#include <utility>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <deque>
#include <cassert>
#include <list>
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> l4;

#define mp make_pair
#define pb push_back

const int maxn = 1e4+1;
ll d[2][maxn];
int f = 0;
int n;
ll w, b, x;
ll c[maxn], cost[maxn];
int main()
{
    scanf("%d %lld %lld %lld", &n, &w, &b, &x);
    for (int i = 1; i <= n; ++i)
        scanf("%lld", c+i);
    for (int i = 1; i <= n; ++i)
        scanf("%lld", cost+i);
    memset(d, -1, sizeof(d));
    d[f][0] = w;
    for (int i = 1; i <= n; ++i)
    {
        for (int j = 0; j < maxn; ++j)
            if (d[f][j] == -1)
                d[f^1][j] = -1;
            else
                d[f^1][j] = min(j*b+w, d[f][j]+x);
        ll all = c[i];
        f ^= 1;
        for (int j = 1; j <= all; j *= 2)
        {
            all -= j;
            ll j_cost = j*cost[i];
            for (int k = maxn-1; k >= j; --k)
            {
                if (d[f][k-j] == -1 || d[f][k-j] < j_cost)
                    continue;
                d[f][k] = max(d[f][k], d[f][k-j]-j_cost);
            }
        }
        ll all_cost = all*cost[i];
        for (int k = maxn-1; k >= all; --k)
        {
            if (d[f][k-all] == -1 || d[f][k-all] < all_cost)
                continue;
            d[f][k] = max(d[f][k], d[f][k-all]-all_cost);
        }
    }
    for (int i = maxn-1; i >= 0; --i)
        if (d[f][i] != -1)
        {
            printf("%d\n", i);
            return 0;
        }
}
