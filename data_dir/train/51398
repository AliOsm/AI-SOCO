#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>

using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

//typedef long double ld;
typedef double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 1e18 + 7;

/*
const int MAX_MEM = 5e6;
int mpos = 0;
char mem[MAX_MEM];
inline void * operator new ( size_t n ) {
  char *res = mem + mpos;
  mpos += n;
  assert(mpos <= MAX_MEM);
  return (void *)res;
}
inline void operator delete ( void * ) { }

inline void * operator new [] ( size_t ) { assert(0); }
inline void operator delete [] ( void * ) { assert(0); }*/

const ll mod = 1e9 + 7;

ll pow(ll a, ll p, ll mod) {
	ll ans = 1;
	while (p) {
		if (p & 1LL) {
			ans *= a;
			ans %= mod;
		}
		a *= a;
		a %= mod;
		p >>= 1;
	}
	return ans;
}
ll get_inv(ll a, ll mod) {
	return pow(a, mod - 2, mod);
}
ll fc[1000500];
ll fc_inv[1000500];
ll get(ll n, ll k) {
	if (n < 0)
		return 0;
	if (k == 0)
		if (n == 0)
			return 1;
		else
			return 0;
	return (((fc[n + k - 1] * fc_inv[n]) % mod) * fc_inv[k - 1]) % mod;
}
ll get(ll n, ll sum, ll h) {
	if (n < 0)
		return 0;
	sum -= n * h;
	if (n < 0)
		return 0;
	return get(sum, n);
}

int main() {
	cin.sync_with_stdio(false);
	cin.tie(0);
	//freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("ufo.in", "r", stdin);freopen("ufo.out", "w", stdout);
	
	fc[0] = 1;
	for (int i = 1; i < 1000500; ++i)
		fc[i] = (fc[i - 1] * i) % mod;
	forn(i, 1000500)
		fc_inv[i] = get_inv(fc[i], mod);

	ll f, w, h;
	cin >> f >> w >> h;
	ll all_cnt = 0;
	ll good = 0;
	forn(q, w + 1) {
		ll d = ((get(q - 1, f, 1) + get(q, f, 1) * 2 + get(q + 1, f, 1)) % mod);
		all_cnt += (get(q, w, 1) * d) % mod;
		all_cnt %= mod;
		good += get(q, w, h + 1) * d;
		good %= mod;
	}
	cout << (good * get_inv(all_cnt, mod)) % mod;

	return 0;
}