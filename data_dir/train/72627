#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define INF (1<<29)

int N,K,L;
int x[30],a[110];
int dist[10010];
int graph[30][30];
int dp[(1<<20)];
queue <int> q;

void add(int pos, int d){
    if(d < dist[pos]){
        dist[pos] = d;
        q.push(pos);
    }
}

void bfs(int start){
    int i;
    
    REP(i,N+1) dist[i] = INF;
    add(start,0);
    
    while(!q.empty()){
        int pos = q.front(); q.pop();
        REP(i,L){
            if(pos-a[i] >= 0) add(pos-a[i],dist[pos]+1);
            if(pos+a[i] <= N) add(pos+a[i],dist[pos]+1);
        }
    }
}

int main(void){
    int mask,i,j;
    
    cin >> N >> K >> L;
    REP(i,K) {cin >> x[i]; x[i]--;}
    REP(i,L) cin >> a[i];
    
    REP(i,K) x[K+i] = x[i] + 1;
    K *= 2;
    
    REP(i,K){
        bfs(x[i]);
        REP(j,K) graph[i][j] = dist[x[j]];
    }
    
    REP(i,(1<<K)) dp[i] = INF;
    dp[0] = 0;
    REP(mask,(1<<K)) if(mask != 0){
        REP(i,K) if(mask&(1<<i)) break;
        REP(j,K) if(mask&(1<<j)) if(i != j) dp[mask] = min(dp[mask], dp[mask^(1<<i)^(1<<j)] + graph[i][j]);
    }
    
    int ans = dp[(1<<K)-1];
    if(ans == INF) cout << -1 << endl; else cout << ans << endl;
    
    return 0;
}
