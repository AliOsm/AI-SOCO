#include <bits/stdc++.h>
using namespace std;

string to_string(string s) {
    return '"' + s + '"';
}

string to_string(const char* s) {
    return to_string((string) s);
}

string to_string(bool b) {
    return (b ? "true" : "false");
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

const int N = 110;

int dp[N][2][N][N];

void test_case() {
    int n;
    cin >> n;
    vector<int> p(n + 1);
    vector<int> done(n + 1);
    for (int i = 1; i <= n; ++i) {
        cin >> p[i];
        done[p[i]] = 1;
    }
    int odd = 0, even = 0;
    for (int i = 1; i <= n; ++i) {
        if (!done[i]) {
            if (i & 1) {
                ++odd;
            } else {
                ++even;
            }
        }
    }
    memset(dp, -1, sizeof dp);
    function<int(int, int, int, int)> solve = [&](int ind, int prv, int rem_o, int rem_e) {
        if (ind == n + 1) {
            return 0;
        }
        auto& ans = dp[ind][prv][rem_o][rem_e];
        if (ans == -1) {
            ans = INT_MAX;
            if (p[ind] != 0) {
                int curr = p[ind] % 2;
                if (ind == 1) {
                    ans = solve(ind + 1, curr, rem_o, rem_e);
                } else {
                    ans = (prv != curr) + solve(ind + 1, curr, rem_o, rem_e);
                }
            } else {
                if (ind == 1) {
                    if (rem_o > 0) {
                        ans = min(ans, solve(ind + 1, 1, rem_o - 1, rem_e));
                    }
                    if (rem_e > 0) {
                        ans = min(ans, solve(ind + 1, 0, rem_o, rem_e - 1));
                    }
                } else {
                    if (rem_o > 0) {
                        ans = min(ans, (prv == 0) + solve(ind + 1, 1, rem_o - 1, rem_e));
                    }
                    if (rem_e > 0) {
                        ans = min(ans, (prv == 1) + solve(ind + 1, 0, rem_o, rem_e - 1));
                    }
                }
            }
        }
        return ans;
    };
    cout << solve(1, 0, odd, even) << "\n";
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    test_case();
    return 0;
}
