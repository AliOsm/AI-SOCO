#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <map>
#include <cassert>
#include <cstring>
#include <set>
using namespace std;

typedef long long Long;
typedef vector<int> VI;
typedef vector<VI> VVI;
//struct Prop {
//  int deep, sum, all, allAndUp, cnt;
//  Prop(){
//      deep = sum = all = allAndUp = cnt = 0;
//  }
//};
//Prop DP[100010];
VVI adj;
int VIS[200010];
int SP[200010];
int dfs(int u){
    VIS[u] = 1;
    int V = -1;
    if(SP[u])V = 0;
    for(int i = 0; i < adj[u].size(); ++i){
        int v = adj[u][i];
        if(VIS[v])continue;
        int l = dfs(v);
        if(l != -1){
            if(V==-1)V = 0;
            V += l+1;
        }
    }
    return V;   
}
int f1, fd;
void far1(int u,int L){
    VIS[u] = 1;
    if(SP[u]){
//      cout << "   " << u  << " " << L << endl;
        if(L > fd){
            f1 = u;
            fd = L;
        }else if(L == fd){
            f1 = min(f1, u);
        }
    }
    for(int i = 0; i < adj[u].size(); ++i){
        int v = adj[u][i];
        if(VIS[v])continue;
        far1(v,L+1);
    }
}

int main()
{
    int N, M;
    cin >> N >> M;
    adj = VVI(N);
    for (int i = 0; i < N-1; ++i) {
        int u,v;
        cin >> u >> v;
        u--;v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    int st = 0;
    for (int i = 0; i < M; ++i) {
        int sp; cin >> sp;
        st = sp-1;
        SP[sp-1] = 1;
    }
    if(M == 1){
        cout << st+1 << endl << 0 << endl;
        return 0;
    }
    int d = dfs(st);
    fd = 0;
    memset(VIS,0,sizeof(VIS));
    far1(st, 0);
    int st1 = f1;
    fd = 0;
    memset(VIS,0,sizeof(VIS));
    far1(st1, 0);
    int st2 = f1;
//  cout << "   " << fd<< endl;
    cout << min(st1,st2)+1 << endl;
    cout << d*2 - fd << endl;
}
/*
 
10
RRRRLRRRR

5000000000000000000 12836292372917 273917263482736253

 */

