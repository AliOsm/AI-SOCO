#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm = " ") -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
template<typename T> vector<T> & operator--(vector<T> & a)
{ for(auto & i: a) --i; return a; }
/* @@@ ----------------------------------- */

template<typename T> inline void /* i should be *strictly* more than zero */
inc(size_t i, T val, vector<T> & fen) {
    for(const auto n = fen.size(); i < n; i += i & -i) fen[i] += val;
}

template<typename T> inline T /* i may be zero, and it will return zero */
acc(size_t i, const vector<T> & fen) {
    T out = 0;
    for(; i; i -= i & -i) out += fen[i];
    return out;
}

int64_t b830()
{
  size_t n;
  cin >> n;
  vector<int> a(n);
  cin >> a;

  map<int, vector<size_t>> obs;
  for(size_t i = 0; i < n; ++i)
    obs[a[i]].push_back(i + 1);

  vector<int64_t> fen(n + 1);
  for(size_t i = 0; i < n; ++i)
    inc(i + 1, (int64_t) 1, fen);

  int64_t out = 0;
  size_t i = 0;

  DEBUG(obs);

  for(auto & pr: obs)
  {
    auto & xs = pr.second;
    {
      const auto iter = lower_bound(begin(xs), end(xs), i);
      if(iter != end(xs)) rotate(begin(xs), iter, end(xs));
    }
    for(const auto j: xs)
    {
      if(i < j)
      {
        DEBUG(acc(j, fen) - acc(i, fen));
        out += acc(j, fen) - acc(i, fen);
      }
      else
      {
        DEBUG(acc(n, fen) - acc(j - 1, fen));
        DEBUG(acc(i, fen));
        // out += acc(n, fen) - acc(j - 1, fen) + acc(i, fen);
        out += acc(n, fen) - acc(i, fen) + acc(j, fen);
      }

      DEBUG(out);
      inc(j, (int64_t) -1, fen);
      i = j;
    }
  }

  return out;
}

int main(const int argc, char * argv [])
{
  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
  cout << b830();

  return EXIT_SUCCESS;
}
