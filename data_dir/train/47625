#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;
int low[5001];
int res[5001];
int vis[5001],vs;
bool cyc[5001];
int mn = (1 << 30);
vector<int>v[5001];
int n, x, y, inc;
void DFS(int src, int par){
    if (vis[src])
        return;
    low[src] = ++inc;
    vis[src] = 1;
    for (int i = 0; i < v[src].size();++i)
    if (!vis[v[src][i]] && v[src][i] != par)
        DFS(v[src][i], src);
    for (int i = 0; i < v[src].size();++i)
    if (v[src][i] != par && low[v[src][i]] <= low[src]){
        cyc[src] = 1;
        low[src] = min(low[src], low[v[src][i]]);
        mn = min(mn, low[src]);
    }
}
int BFS(int src){
    vis[src] = vs;
    queue<int>q;
    int s = 0;
    q.push(src);
    q.push(0);
    while (!q.empty()){
        src = q.front(); q.pop();
        s = q.front(); q.pop();
        if (low[src] == mn)
            return s;
        for (int i = 0; i < v[src].size(); ++i)
        if (vis[v[src][i]] != vs){
            vis[v[src][i]] = vs;
            q.push(v[src][i]);
            q.push(s+1);
        }
    }
    return -1;
}
int main(){
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i){
        scanf("%d%d", &x, &y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    DFS(1, 1);
    vs = 1;
    for (int i = 1; i <= n;++i)
    if (!cyc[i]){
        ++vs;
        res[i] = BFS(i);
    }
    for (int i = 1; i <= n; ++i)
        cout << res[i] << " ";
}