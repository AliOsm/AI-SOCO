#include<bits/stdc++.h>
using namespace std;
const int N = 1e4 + 5;
long long M = 1;
int dp[N];
int n;
string S;
set < long long > st;
map < string , string > mp;
vector < string > ans;
long long compute_hash(string const& s) {
    const int p = 31;
    long long hash_value = 0;
    long long p_pow = 1;
    for (char c : s) {
        hash_value = (hash_value + (c - 'a' + 1) * p_pow) % M;
        p_pow = (p_pow * p) % M;
    }
    return hash_value;
}
bool solve(int i){
    if (i == n)
        return 1;
    if (~dp[i])
        return dp[i];
    bool ret = 0;
    const int p = 31;
    long long s = 0;
    long long p_pow = 1;
    int c = 0;
    for(int j = n - i - 1 ;  j >= max(n - 1 - i - 1000, 0) ; j--){
        s = (s + (S[j] - 'a' + 1) * p_pow) % M;
        p_pow = (p_pow * p) % M;
        c++;
        if (st.find(s) != st.end()){
            ret |= solve(i + c);
        }
    }
    return dp[i] = ret;
}
void print(int i){
   string s = "";
   const int p = 31;
    long long Z = 0;
    long long p_pow = 1;
    int c = 0;
    for(int j = n - i - 1 ;  j >= max(n - 1 - i - 1000, 0) ; j--){
        Z = (Z + (S[j] - 'a' + 1) * p_pow) % M;
        p_pow = (p_pow * p) % M;
        s += S[j];
        if (i + s.size() < n && dp[i + s.size()] == 1 && st.find(Z) != st.end()){
            print(i + s.size());
            ans.push_back(s);
            break;
        }
        if (i + s.size() == n){
            ans.push_back(s);
            break;
        }
    }
}
int main (){
    for(int i = 2 ; i <= 64 ; i++){
        M *= 2;
    }
    ios_base::sync_with_stdio(0);
	cin.tie(0);
    cin >> n >> S;
    int m;
    memset(dp,-1,sizeof dp);
    cin >> m;
    while(m--){
        string s;
        cin >> s;
        string Lo = "";
        char arr[1005] = {};
        int p = 0;
        for(int i = 0 ; i <s.size() ; i++){
            Lo += tolower(s[i]);
            arr[p] = Lo[p];
            p ++;
        }
        mp[Lo] = s;
        st.insert(compute_hash(arr));

    }
    solve(0);
    print(0);
    for(int i = 0 ; i < ans.size() ; i++)
        cout << mp[ans[i]] <<' ' ;
    return 0;
}
