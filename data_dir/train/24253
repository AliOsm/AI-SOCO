#include <bits/stdc++.h>
#define INF (int)1e9;
using namespace std;

const int MAXN = (int)1e5 + 5;

int N, M, K, x, y, S;
int tipe[MAXN], dist[MAXN];
bool sudah[105];
vector<int> arr[MAXN];
queue<int> antri;
vector<int> ambil;

int main() {
  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
  cin >> N >> M >> K >> S;
  for (int i = 0 ; i < N; i++) cin >> tipe[i];
  for (int i = 0 ; i < M; i++) {
    cin >> x >> y;
    x--; y--;
    arr[x].push_back(y);
    arr[y].push_back(x);
  }
  for (int i = 0 ; i < N; i++) dist[i] = INF; 
  for (int i = 0 ; i < N; i++) {
    memset(sudah, false, sizeof sudah);
    ambil.clear();
    if (S == 1) cout << 0 << (i == (N-1) ? '\n' : ' ');
    else {
      antri.push(i);
      dist[i] = 0;
      ambil.push_back(i);
      int cnt = 1;
      int ans = 0;
      sudah[tipe[i]] = true;
      while (!antri.empty()) {
        int depan = antri.front();
        antri.pop();
        for (int j = 0 ; j < arr[depan].size(); j++) {
          if (dist[depan] + 1 < dist[arr[depan][j]]) {
            dist[arr[depan][j]] = dist[depan] + 1;
            ambil.push_back(arr[depan][j]);
            if (!sudah[tipe[arr[depan][j]]]) {
              cnt++;
              ans += dist[arr[depan][j]];
              sudah[tipe[arr[depan][j]]] = true;
            }
            antri.push(arr[depan][j]);
            if (cnt >= S) {
              break;
            }
          }
        }
        if (cnt >= S) break;
      }
      while (!antri.empty()) antri.pop();
      cout << ans << (i == (N-1) ? '\n' : ' ');
      for (int j = 0 ; j < ambil.size(); j++) dist[ambil[j]] = INF;
    }
  }
  return 0;
}