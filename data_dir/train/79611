#include <iostream>
#include <fstream>
#include <algorithm>
#include <iomanip>
#include <random>
#include <ctime>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <cstring>
#include <queue>
#include <deque>
#include <stack>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define ld long double
#define ull unsigned long long
#define ll long long
#define pb push_back
#define pii pair<int, int>
#define pll pair<ll, ll>
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define fast_io cout.tie(0), cin.tie(0), ios_base::sync_with_stdio(0)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
using namespace std;
//using namespace __gnu_pbds;
//typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
ld eps = (ld)1 / 1e9;
ll inf = 1e18, mod2 = 998244353, mod1 = 1e9 + 7;
ll sqr(ll a) { return a * a; }
ll qb(ll a) { return a * a * a; }
ll gcd(ll a, ll b) { return !a ? b : gcd(b % a, a); }
ll binpow(ll a, ll b, ll mod) { return b ? (b % 2 ? (a * (sqr(binpow(a, b / 2, mod)) % mod)) % mod : sqr(binpow(a, b / 2, mod)) % mod) : 1; }
ll binmult(ll a, ll b, ll mod) { return b ? (b % 2 ? (2 * binmult(a, b / 2, mod) + a) % mod : (2 * binmult(a, b / 2, mod)) % mod) : 0; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ll a[200001], b[200001];
vector<ll> vc[200002];
multimap<ll, ll> mmp;

int main()
{
    fast_io;
    ll n, k, i, j, x, y, st = 1;
    cin >> n >> k;
    for (i = 1; i <= n; i++) cin >> a[i];
    sort(a + 1, a + n + 1);
    for (i = 1; i <= k; i++) cin >> b[i];
    for (i = n; i >= 1; i--)
    {
        auto f = mmp.lower_bound(b[a[i]]);
        if (mmp.empty() || f == mmp.begin())
        {
            vc[st].pb(a[i]);
            mmp.insert({1, st});
            st++;
        }
        else
        {
            f--;
            vc[f->second].pb(a[i]);
            x = f->first;
            y = f->second;
            mmp.erase(f);
            mmp.insert({x + 1, y});
        }
    }
    for (i = 1; i <= n + 1; i++)
        if (vc[i].empty()) break;
    cout << i - 1 << '\n';
    for (j = 1; j < i; j++)
    {
        cout << vc[j].size() << ' ';
        for (auto f: vc[j])
            cout << f << ' ';
        cout << '\n';
    }
    return 0;
}