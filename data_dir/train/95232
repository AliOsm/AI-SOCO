#include<bits/stdc++.h>
using namespace std;

int n  , m , x , y , timer;
const int N = 1e5 + 5, mod = 1e9 + 7;
long long cost[N] , ans = 1 , all;
vector<vector<int> > v(N);
vector<vector<int> > cmp;
int dfn[N] , low[N];
bool inStack[N];
stack<int> st;

void tarjan(int node)
{
    low[node] = dfn[node] = timer++;
    inStack[node] = 1;
    st.push(node);

    for(auto i : v[node])
    {
        if(dfn[i] == -1)
        {
            tarjan(i);
            low[node] = min(low[node] , low[i]);
        }
        else if(inStack[i])
            low[node] = min(low[node] , dfn[i]);
    }

    if(dfn[node] == low[node])
    {
        int x = -1;
        cmp.push_back(vector<int>());
        while(x != node)
        {
            x = st.top();
            inStack[x] = 0;
            st.pop();
            cmp.back().push_back(x);
        }
    }
}

int main()
{
    ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);

    memset(dfn , -1 , sizeof dfn);

    cin >> n;
    for(int i = 1 ; i <= n ; i++)
        cin >> cost[i];

    cin >> m;
    while(m--)
    {
        cin >> x >> y;
        v[x].push_back(y);
    }

    for(int i = 1 ; i <= n ; i++)
        if(dfn[i] == -1)
            tarjan(i);

    for(auto i : cmp)
    {
        long long mn = 1e12 , counter = 0;
        for(auto j : i)
        {
            if(cost[j] < mn)
                mn = cost[j] , counter = 1;
            else if(cost[j] == mn)
                counter++;
        }
        all += mn;
        ans = (ans * counter) % mod;
    }

    cout << all << " " << ans;

    return 0;
}
