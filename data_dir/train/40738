#include<iostream>
#include<cstdlib>
#include<vector>
#include<climits>
#include<cctype>
#include<map>
#include<list>
#include<cstdio>
#include<algorithm>
#include<memory.h>
#include<cmath>
#include<queue>
#include<fstream>
#include<sstream>
#include<set>
#include<iomanip>
#define L long long int
#define LD long double
#define pi 3.141592653589793238462643383
#define M 1000000007

using namespace std;

int inv;

struct node1
{
       int v;
       int f;
};

struct node2
{
       int v;
       int p;
       int i;
};

struct node3
{
       int v;
       int i;
};

vector<struct node1> g[500000];

void dfs(int v,int p)
{
     for(int i=0;i<g[v].size();i++)
     {
                               if(g[v][i].v!=p)
                               {
                                             if(!g[v][i].f)
                                             inv++;
                                             dfs(g[v][i].v,v);
                               }
     }
}

bool com(struct node3 a,struct node3 b)
{
     return a.i<b.i;
}

bool check(int a,int b)
{
     for(int i=0;i<g[a].size();i++)
     {
                               if(g[a][i].v==b&&g[a][i].f==1)
                               return 1;
                               else if(g[a][i].v==b&&g[a][i].f==0)
                               return 0;
     }
}

map<pair<int,int>,int> m;

int main()
{
    int t=100,n,a,b,i;
    while(cin>>n)
    {
              inv=0;
              struct node1 temp;
              struct node2 temp2,cv;
              struct node3 temp3;
              for(i=0;i<n-1;i++)
              {
                                cin>>a>>b;
                                temp.v=b-1;
                                temp.f=1;
                                g[a-1].push_back(temp);
                                temp.v=a-1;
                                temp.f=0;
                                g[b-1].push_back(temp);
                                m[pair<int,int>(a-1,b-1)]=1;
              }
              dfs(0,-1);
              //cout<<inv<<"\n";
              /*for(i=0;i<n;i++)
              {
                              inv=0;
                              dfs(i,-1);
                              cout<<inv<<"\n";
              }*/
              list<struct node2> q;
              vector<int> ans;
              vector<struct node3> v;
              temp3.v=0;
              temp3.i=inv;
              v.push_back(temp3);
              temp2.v=0;
              temp2.p=-1;
              temp2.i=inv;
              q.push_back(temp2);
              while(!q.empty())
              {
                               cv=q.front();
                               q.pop_front();
                               for(i=0;i<g[cv.v].size();i++)
                               {
                                               if(g[cv.v][i].v!=cv.p)
                                               {
                                                                     temp2.v=g[cv.v][i].v;
                                                                     temp2.p=cv.v;
                                                                     if(m[pair<int,int>(cv.v,g[cv.v][i].v)]==1)
                                                                     temp2.i=cv.i+1;
                                                                     else
                                                                     temp2.i=cv.i-1;
                                                                     temp3.v=g[cv.v][i].v;
                                                                     temp3.i=temp2.i;
                                                                     //cout<<g[cv.v][i].v+1<<" "<<temp2.i<<"\n";
                                                                     v.push_back(temp3);
                                                                     q.push_back(temp2);
                                               }
                               }
              }
              sort(v.begin(),v.end(),com);
              for(i=0;i<v.size();i++)
              {
                                     if(v[i].i==v[0].i)
                                     ans.push_back(v[i].v+1);
                                     else
                                     break;
              }
              sort(ans.begin(),ans.end());
              cout<<v[0].i<<"\n";
              for(i=0;i<ans.size();i++)
              cout<<ans[i]<<" ";
    }
    return 0;
}
