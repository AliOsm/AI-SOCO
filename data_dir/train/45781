#include <bits/stdc++.h>

using namespace std;

const int N = 2e5 + 5;

int n, k;
char s[N];
unordered_map<char, int> mp = {
        {'R', 0},
        {'G', 1},
        {'B', 2}
};

int solve() {
    int ret[3] = {N, N, N};
    int cnt[3] = {
            k / 3 + (k % 3 > 0),
            k / 3 + (k % 3 > 1),
            k / 3
    };
    int sum[3][3] = {};

    for (int i = 0; i < n; ++i) {
        if (i < k) {
            sum[mp[s[i]]][i % 3]++;
        } else {
            sum[mp[s[i - k]]][0]--;

            for (int c = 0; c < 3; ++c) {
                int tmp = sum[c][0];
                sum[c][0] = sum[c][1];
                sum[c][1] = sum[c][2];
                sum[c][2] = tmp;
            }

            sum[mp[s[i]]][(k - 1) % 3]++;
        }

        if (i + 1 < k) {
            continue;
        }

        for (int c = 0; c < 3; ++c) {
            int tmp = 0;

            for (int j = 0; j < 3; ++j) {
                tmp += max(0, cnt[j] - sum[(c + j) % 3][j]);
            }

            ret[c] = min(ret[c], tmp);
        }
    }

    return *min_element(ret, ret + 3);
}

int main() {
    int T;
    cin >> T;

    while (T--) {
        scanf("%d %d %s", &n, &k, s);
        printf("%d\n", solve());
    }

    return 0;
}