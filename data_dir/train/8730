#include <bits/stdc++.h>
typedef long long ll ;
using namespace std;


double dist(complex < double > c1 , complex < double > c2){

     double x = c1.real() - c2.real() ;
     double y = c1.imag() - c2.imag() ;

     return sqrt(x*x + y*y) ;
}

int main()
{
    ios::sync_with_stdio(false) ;

    int n ; cin >> n ;

    double k , res = 0 ;

    cin >> k ;

    vector < complex < double > > ve ;

    for(int i = 0 ; i < n ; i++){
           double x , y  ;
           cin >> x >> y ;
           ve.push_back({x , y});
    }

    double d = 0 ;

    for(int i = 1 ; i < ve.size() ; i++) {
         d += (dist(ve[i - 1] , ve[i]));
    }

    res =  k * ( d/50 ) ;

    cout << fixed << setprecision(10) << res << endl ;




    return 0;
}
