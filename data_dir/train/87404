#include <bits/stdc++.h>

using namespace std;

const int N = 3e5 + 10;
vector<tuple<int, int, int>> g[N];
long long d[N];

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);

  int n, m, k;
  cin >> n >> m >> k;
  for (int i = 0; i < m; ++i) {
    int u, v, w;
    cin >> u >> v >> w;
    --u, --v;
    g[u].emplace_back(v, w, i);
    g[v].emplace_back(u, w, i);
  }
  memset(d, -1, sizeof(d));
  d[0] = 0;
  priority_queue<tuple<long long, int, int>> q;
  for (auto [to, w, i] : g[0]) {
    q.emplace(-w, to, i);
  }
  vector<int> ans;
  while (!q.empty()) {
    auto [dist, v, i] = q.top();
    q.pop();
    if (d[v] != -1) {
      continue;
    }
    d[v] = -dist;
    ans.push_back(i);
    for (auto [to, w, j] : g[v]) {
      if (d[to] == -1) {
        q.emplace(dist - w, to, j);
      }
    }
  }
  cout << min((int)ans.size(), k) << '\n';
  for (int i = 0; i < min((int)ans.size(), k); ++i) {
    cout << ans[i] + 1 << ' ';
  }

  return 0;
}
