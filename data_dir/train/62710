// C++ implementation of the approach 
#include <bits/stdc++.h> 
using namespace std; 
#define N 200200
#define ll          long long
#define pb          push_back
#define endl       '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii        map<ll,ll>
using namespace std;

#define TIME        cerr << "\nTime elapsed: " << setprecision(5) <<1000.0 * clock() / CLOCKS_PER_SEC << "ms\n";
#define FAST ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
// #define N  100005
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;  
#define ordered_set tree<double, null_type,less<double>, rb_tree_tag,tree_order_statistics_node_update> 

        /***********************************/
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    mt19937_64 generator (seed);
    /***********************************/
vector<int> gr[N]; 

// Function to add edge 
void Add_edge(int x, int y) 
{ 
    gr[x].push_back(y); 
    gr[y].push_back(x); 
} 
set <ll> tmp;
vi nodes;
vi restnodes;
// Function to find the length of 
// the shortest cycle in the graph 
int shortest_cycle(int n) 
{ 
    // To store length of the shortest cycle 
    int ans = INT_MAX; 

    // For all vertices
    ll vis[n]={0}; 
    ll cnt=0;

        vector<int> dist(n, (int)(1e9)); 

        // Take a imaginary parent 
        vector<int> par(n, -1);
        shuffle(all(nodes),generator);
        shuffle(all(restnodes),generator);
    rep(ttt,0,min((int)sqrt(n)+5,n)) { 

        // Make distance maximu 

        ll node=ttt;
        // if(vis[node]) continue;
        cnt++;
        // vis[node]=1;
        rep(i,0,n) dist[i]=1e9,par[i]=-1;
        // Distance of source to source is 0 
        dist[node] = 0; 
        queue<int> q; 
        // cout<<node<<endl;
        // Push the source element 
        q.push(node); 

        // Continue until queue is not empty 
        while (!q.empty()) { 

            // Take the first element 
            int x = q.front(); 
            q.pop(); 

            // Traverse for all it's childs 
            for (int child : gr[x]) { 

                // If it is not visited yet 
                if (dist[child] == (int)(1e9)) { 

                    // Increase distance by 1 
                    dist[child] = 1 + dist[x]; 

                    // Change parent 
                    par[child] = x; 

                    // Push into the queue 
                    q.push(child); 
                } 

                // If it is already visited 
                else if (par[x] != child and par[child] != x) 
                    ans = min(ans, dist[x] + dist[child] + 1);
            } 
        } 
    } 

    // rep(ttt,0,min(3000LL,sz(restnodes))) { 

    //     // Make distance maximu 

    //     ll node=restnodes[ttt];
    //     // if(vis[node]) continue;
    //     cnt++;
    //     // vis[node]=1;
    //     rep(i,0,n) dist[i]=1e9,par[i]=-1;
    //     // Distance of source to source is 0 
    //     dist[node] = 0; 
    //     queue<int> q; 
    //     // cout<<node<<endl;
    //     // Push the source element 
    //     q.push(node); 

    //     // Continue until queue is not empty 
    //     while (!q.empty()) { 

    //         // Take the first element 
    //         int x = q.front(); 
    //         q.pop(); 

    //         // Traverse for all it's childs 
    //         for (int child : gr[x]) { 

    //             // If it is not visited yet 
    //             if (dist[child] == (int)(1e9)) { 

    //                 // Increase distance by 1 
    //                 dist[child] = 1 + dist[x]; 

    //                 // Change parent 
    //                 par[child] = x; 

    //                 // Push into the queue 
    //                 q.push(child); 
    //             } 

    //             // If it is already visited 
    //             else if (par[x] != child and par[child] != x) 
    //                 ans = min(ans, dist[x] + dist[child] + 1);
    //         } 
    //     } 
    // } 
    // If graph contains no cycle 
    if (ans == INT_MAX) 
        return -1; 

    // If graph contains cycle 
    else
        return ans; 
} 
#define N1 1000005
ll spf[N1]; 
vi link(N),ww(N,1),cnt(N,0);
ll find(ll x)
{
    while(x!=link[x]) x=link[x];
    return x;
}
bool same(ll i,ll j)
    {return find(i)==find(j);}
void unite(ll a,ll b)
{
    a=find(a);
    b=find(b);
    if(ww[a]<ww[b]) swap(a,b);
    ww[a]+=ww[b];
    cnt[a]+=cnt[b];
    cnt[a]++;
    link[b]=a;
}

void seive() 
{ 
    spf[1] = 1; 
    for (ll i=2; i<N1; i++) 
        spf[i] = i; 
    for (ll i=4; i<N1; i+=2) 
        spf[i] = 2; 
  
    for (ll i=3; i*i<N1; i++) 
    { 
        if (spf[i] == i) 
        { 
            for (ll j=i*i; j<N1; j+=i) 
                if (spf[j]==j) 
                    spf[j] = i; 
        } 
    } 
} 
vi getFactorization(ll x) 
{ 
    vi ret; 
    while (x != 1) 
    { 
        ll cnt=0;
        ll p=spf[x];
        while(x%p==0) 
            x=x/p,cnt++;
        if(cnt%2)
        ret.pb(p); 
    } 
    return ret; 
} 
signed main()
{
    
 #ifndef ONLINE_JUDGE
      // for getting input from input.txt
     freopen("input.txt", "r", stdin);
//     // for writing output to output.txt
//     freopen("output1.txt", "w", stdout);
 #endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int TESTS=1;
    seive();
//    cin>>TESTS;
    while(TESTS--)
    {
        ll n;
        cin>>n;
        ll a[n];
        map <vi,bool> m;
        ll ans=hell;
        rep(i,0,n) {
            cin>>a[i];
            vi t=getFactorization(a[i]);
            if(sz(t)==0)
            {
                cout<<1;
                // cout<<"here";
                return 0;
            }
            else {
                if(m[t])
                {
                    ans=2;
                }
                else{
                    m[t]=1;
                    if(sz(t)==2)
                    {
                        tmp.insert(t[0]);
                        tmp.insert(t[1]);
                    }
                    else {
                        tmp.insert(0);
                        tmp.insert(t[0]);
                        t.pb(0);
                        reverse(all(t));
                        m[t]=1;

                    }
                }
            }
        }
        ll cur=0;
        map <ll,ll> idx;
        for(auto i:tmp){
            idx[i]=cur++;
        }
        rep(i,0,cur) link[i]=i;
        // for(auto i:idx)cout<<i.F<<' '<<i.S<<endl;
        for(auto i:m){
            if(sz(i.F)>1){
                if(!same(idx[i.F[0]],idx[i.F[1]]))
                    unite(idx[i.F[0]],idx[i.F[1]]);
                else cnt[find(idx[i.F[0]])]++;
            Add_edge(idx[i.F[0]],idx[i.F[1]]);
            
            Add_edge(idx[i.F[1]],idx[i.F[0]]);}
        }
        if(ans==2)
        {
            cout<<2;
            return 0;
        }
        // cout<<find(0)<<' '<<cnt[find(0)]<<' '<<ww[find(0)]<<endl; 
        rep(i,0,cur) if((link[i]==i)&&(cnt[find(i)]>=ww[find(i)]))  nodes.pb(i);
        rep(i,0,cur)  if((link[i]!=i)&&(cnt[find(i)]>=ww[find(i)]))  restnodes.pb(i);

        // cout<<cur<<endl;
    // Number of vertices 

    // Function call 
    cout << shortest_cycle(cur); 
    }
    return 0;
}
