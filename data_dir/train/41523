#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)25;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
int n, a[MAXN], dp[1 << MAXN], k, bad[MAXN];
bool wor[1 << MAXN];
ll getsum(int mask)
{
	ll sm = 0;
	for (int i = 0; i < n; i++)
		if((mask >> i) & 1)
			sm += a[i];
	return sm;
}
bool good(ll sm)
{
	for (int i = 0; i < k; i++)
		if(sm == bad[i])
			return 0;
	return 1;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	cin >> k;
	for (int i = 0; i < k; i++)
		cin >> bad[i];
	for (int i = 0; i < (1 << n); i++)
		wor[i] = good(getsum(i));
	
	
	dp[0] = 1;
	for (int mask = 1; mask < (1 << n); mask++)
	{
		if(wor[mask] == 0)
			continue;
		for (int j = mask; j > 0; j ^= (j & -j))
		{
			dp[mask] += dp[mask ^ (j & -j)];
			if(dp[mask] >= MOD)
				dp[mask] -= MOD;
		}
	}
	cout << dp[(1 << n) - 1];
}
