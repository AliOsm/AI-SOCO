#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <hash_map>
#include <hash_set>
#include <vector>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iterator>
using namespace std;
#define mems(arr, val) memset(arr, val, sizeof(arr))
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define all(A) (A).begin(), A.end()
#define mp(a, b) make_pair(a, b)
#define forit(it, A) for(auto it = A.begin(); it != A.end(); it++)
typedef long long LL;
typedef pair<int, int> pii;
const LL INF = INT_MAX;
const int MAXN = 100100;
const LL MOD = 1000000007;

int main()
{
#ifdef MY_SOL
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("lights.in", "r", stdin); freopen("lights.out", "w", stdout);
#endif
	int n,m;
	cin>>n>>m;
	vector<int> plus(n + 1), minus(n + 1);
	vector<int> a(n + 1);
	int plussum = 0, minussum = 0;
	forn(i, 1, n + 1)
	{
		char c;
		int tmp;
		scanf("\n%c%d", &c, &tmp);
		if (c == '+')
		{
			a[i] = tmp;
			plus[tmp]++;
			plussum++;
		}
		else
		{
			a[i] = -tmp;
			minus[tmp]++;
			minussum++;
		}
	}

	vector<char> canbe(n + 1, 0);
	int kilcount = 0;
	forn(i, 1, n + 1)
	{
		int tmpm = plus[i] + (minussum - minus[i]);
		if (tmpm == m)
		{
			canbe[i] = 1;
			kilcount++;
		}
	}
	vector<string> ans(n + 1, "Not defined");
	if (kilcount == 1)
	{
		for(int i = 1; i < n + 1; ++i)
		{
			if (canbe[i])
			{
				for(int j = 1; j < n + 1; ++j)
				{
					if (a[j] == i) ans[j] = "Truth";
					else
					if (a[j] == -i) ans[j] = "Lie";
					else
					{
						if (a[j] < 0) ans[j] = "Truth";
						if (a[j] > 0) ans[j] = "Lie";
					}
				}
				break;
			}
		}
	}
	else
	{
		for(int i = 1; i < n + 1; ++i)
		{
			if (a[i] < 0 && !canbe[-a[i]]) ans[i] = "Truth";
			if (a[i] > 0 && !canbe[a[i]]) ans[i] = "Lie";
		}
	}

	forn(i, 1, n + 1)
		cout<<ans[i]<<endl;

    return 0;
}