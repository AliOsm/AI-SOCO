#include "bits/stdc++.h"
using namespace std;
 
const int N = 1e6 + 5;
 
int bit[N];
int ans[N];

vector<pair<int,int>> at[N];

void upd(int idx, int val) {
	while(idx < N) {
		bit[idx] += val;
		idx += (idx & (-idx));
	}
}

int query(int idx) {
	int res = 0;
	while(idx > 0) {
		res += bit[idx];
		idx -= (idx & (-idx));
	}
	return res;
}

void solve() {
	ios_base :: sync_with_stdio(false);
	cin.tie(NULL);
	int n;
	cin >> n;
	vector<int> a(n);
	for(int i = 0; i < n; ++i) cin >> a[i];
	vector<pair<int,int>> v;
	for(int i = 0; i < n; ++i) {
		v.push_back({a[i], i});
	}
	sort(v.begin(), v.end(), [&] (pair<int,int>a, pair<int,int> b) {
		if(a.first != b.first) {
			return a.first > b.first;
		}
		return a.second < b.second;
	});
	int m; cin >> m;
	for(int i = 0; i < m; ++i) {
		int k, pos; cin >> k >> pos;
		k--;
		at[k].push_back({pos, i});
	}
	int q = 0;
	for(auto it : v) {
		int idx = it.second;
		upd(idx + 1, 1);
		for(auto val : at[q]) {
			int lo = 0, hi = n - 1;
			int res = hi;
			while(lo <= hi) {
				int mid = (lo + hi) / 2;
				if(query(mid + 1) >= val.first) {
					res = min(res, mid);
					hi = mid - 1;
				} else {
					lo = mid + 1;
				}
			}
			ans[val.second] = a[res];
		}
		q++;
	}
	for(int i = 0; i < m; ++i) cout << ans[i] << endl;
}
 
int main() {
	solve();
	return 0;  
}