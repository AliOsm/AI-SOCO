#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAX = 1e5 + 5;
int n, m;
int color[MAX], status[MAX];
vector<ii> adj[MAX];
vector<int> back[MAX];

bool bfs(int source) {
	queue<int> q;
	q.push(source);
	color[source] = 0;
	while(!q.empty()) {
		int cur = q.front(); q.pop();
		for(auto &each : adj[cur]) {
			int nxt, c;
			tie(nxt, c) = each;
			if(c == 0) {
				if(color[nxt] == -1) {
					color[nxt] = !color[cur];
					q.push(nxt);
				}
				else if(color[nxt] == color[cur]) {
					return false;
				}
			}
			else if(c == 1) {
				if(color[nxt] == -1) {
					color[nxt] = color[cur];
					q.push(nxt);
				}
				else if(color[nxt] != color[cur]) {
					return false;
				}
			}
		}
	}
	return true;
}

int main() {
	ios_base::sync_with_stdio(false);

	cin >> n >> m;
	fori(i, 1, n + 1) {
		cin >> status[i];
	}
	fori(i, 1, m + 1) {
		int total;
		cin >> total;
		while(total--) {
			int cur;
			cin >> cur;
			back[cur].push_back(i);
		}
	}

	fori(i, 1, n + 1) {
		int a = back[i][0], b = back[i][1];
		adj[a].emplace_back(b, status[i]);
		adj[b].emplace_back(a, status[i]);
	}

	memset(color, -1, sizeof color);
	bool good = true;
	fori(i, 1, m + 1) {
		if(color[i] == -1) {
			good &= bfs(i);
		}
	}
	
	cout << (good ? "YES" : "NO") << '\n';

	return 0;
}

