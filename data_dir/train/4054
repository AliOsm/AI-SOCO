//#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops")
//#pragma GCC target("avx,avx2")
//#pragma GCC target("avx2")
//#pragma GCC optimize("O3")

//# include <x86intrin.h>
# include <bits/stdc++.h>

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
 
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

inline void Input_Output () {
	//freopen(".in", "r", stdin);
   //freopen(".out", "w", stdout);
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
 
int n, x, y, z;
int a[N];

ll sum = 0;
	
ll f (int bal) {
	ll need = bal * (ll)n;
	ll res = 0;
	if (need > sum) res += (need - sum) * (ll)x;
	else res += (sum - need) * (ll)y;
	ll dif = 0;
	For (i, 1, n) if (a[i] >= bal) {
		dif += a[i] - bal;
	}
	if (sum > need) dif -= (sum-need);
	res += dif * (ll)z;
	return res;
}

int main () {
	SpeedForce;
	
	cin >> n >> x >> y >> z;
	z = min(z, x+y);

	For (i, 1, n) {
		cin >> a[i];
		sum += a[i];
	}

	sort(a + 1, a + n + 1);
	ll ans = INF;
	//remov and merge

	int l = a[1], r = sum / n;
	while (r - l > 10) {
		int m1 = (l + (r-l)/3);
		int m2 = (r - (r-l)/3);
		if(f(m1) > f(m2))
			l = m1;
		else
			r = m2;
	}

	while (l <= r) {
		ans = min(ans, f(l++));
	}

	//add and merge
	l = (sum + n - 1) / n;
	r = a[n];

	while (r - l > 10) {
		int m1 = (l + (r-l)/3);
		int m2 = (r - (r-l)/3);
		if(f(m1) > f(m2))
			l = m1;
		else
			r = m2;
	}

	while (l <= r) {
		ans = min(ans, f(l++));
	}

	cout << ans << '\n';

	return Accepted;
}

// B...a