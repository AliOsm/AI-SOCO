//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int inf_int = 1e9 + 100;
const ll inf_ll = 1e18;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef long double dbl;
#define pb push_back
const double pi = 3.1415926535898;
#define dout if(debug) cout
#define fi first
#define se second
#define sp setprecision
#define sz(a) (int(a.size()))
#define all(a) a.begin(),a.end()
bool debug = 0;
const int MAXN = 3e5 + 100;
const int LOG = 20;
const int mod = 1e9 + 7;
const int MX = 1e5 + 100;
typedef long long li;
const li MOD = 1000000000949747713ll;

int s[MAXN], t[MAXN];

void solve() {
    int n;
    cin >> n;
    ll sum = 0;
    for (int i = 1; i <= n; ++i) {
        cin >> s[i];
        sum += s[i];
    }
    for (int i = 1; i <= n; ++i) {
        cin >> t[i];
        sum -= t[i];
    }
    if (sum != 0) {
        cout << "NO";
        return;;
    }
    vector<pair<int,int> > cs;
    vector<int> tt;
    for(int i=1;i<=n;++i){
        cs.pb({s[i],i});
        tt.pb(t[i]);
    }
    sort(all(cs));
    sort(all(tt));
    for(int i=0;i<n;++i){
        t[cs[i].se] = tt[i];
    }



    set<pii> smaller;
    set<pii> bigger;
    for (int i = 1; i <= n; ++i) {
        if(s[i] == t[i])
            continue;
        if (s[i] < t[i])
            smaller.insert({s[i], i});
        else
            bigger.insert({s[i], i});
    }


    vector<pair<pii, int> > ccc;
    while (!smaller.empty() && !bigger.empty()) {
        auto x1 = *smaller.rbegin();
        smaller.erase(x1);
        int id1 = x1.se;
        while(true){
            auto it2 = bigger.lower_bound({s[id1]+2, -1});
            if(it2 == bigger.end()){
                cout <<"NO";
                return;
            }
            auto x2 = *it2;
            bigger.erase(x2);
            int id2 = x2.se;
            int k = min(abs(s[id1] - t[id1]), abs(s[id2] - t[id2]));
            k = min(k, (s[id2] - s[id1])/2);

            ccc.pb({{id1,id2}, k});

            s[id1] += k;
            s[id2] -=k;
            if(s[id2] != t[id2])
                bigger.insert({s[id2],id2});
            if(s[id1] == t[id1])
                break;
        }
    }
    if(sz(smaller) || sz(bigger)){
        cout <<"NO";
        return;
    }

    cout << "YES\n";
    cout << ccc.size()<<"\n";
    for(auto x:ccc){
        cout << x.fi.fi<<" "<<x.fi.se<<" "<<x.se<<"\n";
    }

}

signed main() {
#ifdef zxc
    debug = 1;
    freopen("../input.txt", "r", stdin);
    // freopen("../output.txt", "w", stdout);
#else

#endif //zxc
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cout.setf(ios::fixed);
    cout.precision(20);

    int t = 1;
    while (t--)
        solve();
    dout << endl << "time : " << (1.0 * clock() / CLOCKS_PER_SEC) << endl;
}