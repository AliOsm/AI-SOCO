#include<bits/stdc++.h>
//#define int long long int
#define ull unsigned long long int
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD 1000000007
#define f first
#define s second
#define endl '\n'
#define pii pair<int,int>
#define precise(i) cout<<fixed<<setprecision(i)
using namespace std;
const double PI = atan(1.0)*4;
const int64_t INF=100000000000000003;
const int32_t LOG=21;
const int BIG=pow(2,20);
const int N=100005;
char next1[401][401][401];
int dp[401][401][401];
string s,t;
int n1,n2;
int solve(int i,int j,int sum)
{
	if(dp[i][j][sum]!=-1)return dp[i][j][sum];
	if(i==n1 && j==n2)
	{
         if(sum>0)
         {
         	 next1[i][j][sum]=')';
         	 dp[i][j][sum]=solve(i,j,sum-1)+1;
         }
         else if(sum==0)
         {
         	 return dp[i][j][sum];
         }	
	}
	else if(i==n1)
	{
		 if(t[j]==')' && sum>0)
		 {
		 	 next1[i][j][sum]=')';
		 	 dp[i][j][sum]=solve(i,j+1,sum-1)+1;
		 }
		 else if(t[j]=='(')
		 {
		 	next1[i][j][sum]='(';
		 	dp[i][j][sum]=solve(i,j+1,sum+1)+1;
		 }
		 else
		 {
		 	  next1[i][j][sum]='(';
		 	  dp[i][j][sum]=solve(i,j,sum+1)+1;
		 }	
	}
	else if(j==n2)
	{
		 if(s[i]==')' && sum>0)
		 {
		 	 next1[i][j][sum]=')';
		 	 dp[i][j][sum]=solve(i+1,j,sum-1)+1;
		 }
		 else if(s[i]=='(')
		 {
		 	next1[i][j][sum]='(';
		 	dp[i][j][sum]=solve(i+1,j,sum+1)+1;
		 }
		 else
		 {
		 	  next1[i][j][sum]='(';
		 	  dp[i][j][sum]=solve(i,j,sum+1)+1;
		 }		
	}
	else if(s[i]==t[j])
	{
		 if(s[i]=='(')
		 {
		 	next1[i][j][sum]='(';
		 	dp[i][j][sum]=solve(i+1,j+1,sum+1)+1;
		 }
		 else if(s[i]==')' && sum>0)
		 {
		 	next1[i][j][sum]=')';
		 	dp[i][j][sum]=solve(i+1,j+1,sum-1)+1;
		 }
		 else
		 {
		 	next1[i][j][sum]='(';
		 	dp[i][j][sum]=solve(i,j,sum+1)+1;
		 }	
	}
	else if(s[i]=='(')
	{
		 if(sum==0)
		 {
		 	 next1[i][j][sum]='(';
		 	 dp[i][j][sum]=solve(i+1,j,sum+1)+1;
		 }
		 else if(sum>0)
		 {
		 	int x=solve(i+1,j,sum+1);
		 	int y=solve(i,j+1,sum-1);
		 	if(x<=y)
		 	{
                 next1[i][j][sum]='(';
                 dp[i][j][sum]=solve(i+1,j,sum+1)+1;
		 	}
		 	else
		 	{
		 		next1[i][j][sum]=')';
		 		dp[i][j][sum]=solve(i,j+1,sum-1)+1;
		 	}	
		 }	
	}
	else 
	{
		 if(sum==0)
		 {
		 	next1[i][j][sum]='(';
		 	dp[i][j][sum]=solve(i,j+1,sum+1)+1;

		 }
		 else if(sum>0)
		 {
		 	 int x=solve(i+1,j,sum-1);
		 	 int y=solve(i,j+1,sum+1);
		 	 if(x<=y)
		 	{
                 next1[i][j][sum]=')';
                 dp[i][j][sum]=solve(i+1,j,sum-1)+1;
		 	}
		 	else
		 	{
		 		next1[i][j][sum]='(';
		 		dp[i][j][sum]=solve(i,j+1,sum+1)+1;
		 	}	
		 }	
	}
	return dp[i][j][sum];	
}
int32_t main(){
	 getFaster;
     rep(i,0,401)rep(j,0,401)rep(k,0,401)dp[i][j][k]=-1;
     cin>>s>>t;
     n1=s.length(),n2=t.length();
     dp[n1][n2][0]=0;
     next1[n1][n2][0]='*';
     int cur=0;
     int i=0,j=0,k=0;
     int cnt=0;
     solve(0,0,0);
     while(next1[i][j][k]!='*')
     {
     	 cout<<next1[i][j][k];
     	 cnt++;
     	 if(next1[i][j][k]=='(')
     	 {
     	 	  if(i==n1 && j==n2)
     	 	  {
     	 	  	   k++;
     	 	  }
     	 	  else if(i==n1)
     	 	  {
     	 	  	  if(t[j]=='(')j++;
     	 	  	  k++;
     	 	  }
     	 	  else if(j==n2)
     	 	  {
     	 	  	 if(s[i]=='(')i++;
     	 	  	 k++;
     	 	  }
     	 	  else if(s[i]==t[j])
     	 	  {
     	 	  	 if(s[i]=='('){i++;j++;}
     	 	  	 k++;
     	 	  }
     	 	  else if(s[i]=='(')
     	 	  {
     	 	  	  i++;
     	 	  	  k++;
     	 	  }
     	 	  else
     	 	  {
     	 	  	j++;
     	 	  	k++;
     	 	  }	
     	 }
     	 else
     	 {
     	      if(i==n1 && j==n2)
     	 	  {
     	 	  	   k--;
     	 	  }
     	 	  else if(i==n1)
     	 	  {
     	 	  	  if(t[j]==')')j++;
     	 	  	  k--;
     	 	  }
     	 	  else if(j==n2)
     	 	  {
     	 	  	 if(s[i]==')')i++;
     	 	  	 k--;
     	 	  }
     	 	  else if(s[i]==t[j])
     	 	  {
     	 	  	 if(s[i]==')'){i++;j++;}
     	 	  	 k--;
     	 	  }
     	 	  else if(s[i]==')')
     	 	  {
     	 	  	  i++;
     	 	  	  k--;
     	 	  }
     	 	  else
     	 	  {
     	 	  	j++;
     	 	  	k--;
     	 	  }	 
     	 }	
     }
     cout<<endl;	
     return 0;
}