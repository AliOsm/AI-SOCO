#include <bits/stdc++.h>

using namespace std;

/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;
#define ll long long
#undef ll

const int mxN = 300010;

long long K;
int N;

long long solveMin(long long x,long long y,int st) {
//	cerr<<x<<' '<<y<<' '<<st<<'\n';
	if(x <= y) {
		if((x - st) * K < y) return LLONG_MAX;
		return 1;
	}
//	cerr<<x<<' '<<y<<' '<<st<<' '<<max(1ll,x - (y - !st) * K)<<'\n';
	return max(1ll,x - (y - !st) * K);
}

long long dp[mxN][2];
long long X[mxN],Y[mxN];

long long bt(int ind,bool f) {
	if(ind == -1) return 0;
	long long & ref = dp[ind][f];
	if(ref != -1) return ref;
	ref = LLONG_MAX;
	long long A = (f?X[ind]:Y[ind]);
	long long B = (f?Y[ind]:X[ind]);
	for(int nf = 0;nf < 2;nf++) {
		long long cur = bt(ind-1,nf);
		if(cur > K) continue;
		if(cur == K) {
			ref = min(ref,solveMin(A,B,nf != f));
			continue;
		}
		if(A >= B) ref = min(ref,solveMin(A-min(K-(nf == f?cur:0),A-B+1),B,0));
		if(B >= A) ref = min(ref,solveMin(A,B-min(K-(nf == f?0:cur),B-A+1),1));
	}
	return ref;
}

//short mem[100][100][100][100][2];
//bool can(int ind,long long x,long long y,long long sx,bool f) {
//	if(ind >= N) return true;
////	cerr<<ind<<' '<<x<<' '<<y<<' '<<sx<<' '<<f<<'\n';
//	if(x == 0 && y == 0) return can(ind+1,X[ind+1],Y[ind+1],sx,f);
//	if(mem[ind][x][y][sx][f] != -1) return mem[ind][x][y][sx][f];
//	bool res = false;
//	if(x) if(sx < K || f) res |= can(ind,x-1,y,(f?1:sx+1),0);
//	if(y) if(sx < K || !f) res |= can(ind,x,y-1,(f?sx+1:1),1);
//	mem[ind][x][y][sx][f] = res;
//	return res;
//}

int main(int argc, char** argv) {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(0);
	cin.tie(0);
#endif

	srand(time(NULL));
	//	while(true) {
	memset(dp,-1,sizeof dp);
	//		memset(mem,-1,sizeof mem);
	cin>>N>>K;
	//		N = rand()%50 + 1;
	//		K = rand()%40 + 1;
	for(int i = 0;i < N;i++) cin>>X[i]; /*X[i] = rand()%30 + 1;*/
	for(int i = 0;i < N;i++) cin>>Y[i]; /*Y[i] = rand()%30 + 1;*/
	//		if((min(bt(N-1,0),bt(N-1,1)) <= K) != can(0,X[0],Y[0],0,0)) {
	//			cout<<N<<' '<<K<<'\n';
	//			for(int i = 0;i < N;i++) cout<<X[i]<<" \n"[i+1 == N];
	//			for(int i = 0;i < N;i++) cout<<Y[i]<<" \n"[i+1 == N];
	//			cout<<bt(N-1,0)<<' '<<bt(N-1,1)<<'\n';
	//			return 0;
	//		}
	cout<<(min(bt(N-1,0),bt(N-1,1)) <= K?"YES":"NO")<<endl;
	//	}
	return 0;
}
