/**************************************************************
    Problem: ????
    User: Big_Red_Dates
    Language: GNU_C++11
    Result: Accepted
    Time:0 ms
    Memory:0 kb
    length:0 kb
    score: inf
****************************************************************/
//CLOCKS_PER_SEC
using namespace std;
#include<bitset>
#include<deque>
#include<stdint.h>
#include<set>
#include<stack>
#include<cmath>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<iomanip>
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<queue>
#include<cstring>
#include<ctime>
#include<map>
#define sqr(x) (x)*(x)
#define sort stable_sort
#define ll long long
#define mk make_pair
#define pb push_back
#define in insert
#define mtr(x,y,z) mk(mk(x,y),z)
#define fi first
#define se second
#define lch(x) ((x)<<1)
#define rch(x) (((x)<<1)|1)
#define all(x) (x).begin(),(x).end()
#define titose CLOCKS_PER_SEC
#define fpi(x) freopen(x,"r",stdin);
#define fpo(x) freopen(x,"w",stdout);
#define fprio fpi("in.txt");fpo("out.txt");
#define fast ios_base::sync_with_stdio(false);
inline void read(int &x){int v=0,f=1;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=v*10+c-'0';while (isdigit(c=getchar())) v=v*10+c-'0';x=v*f;}
inline void read(ll &x){ll v=0ll,f=1ll;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=v*10+c-'0';while (isdigit(c=getchar())) v=v*10+c-'0';x=v*f;}
inline void readc(char &x){char c;while ((c=getchar())==' ');x=c;}
inline void writes(string s){puts(s.c_str());}
inline void writeln(){writes("");}
inline void writei(int x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
inline void writell(ll x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
/*
#pragma GCC optimize("-funsafe-loop-optimizations")
#pragma GCC optimize("-funroll-loops")
#pragma GCC optimize("-fwhole-program")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("-fthread-jumps")
#pragma GCC optimize("-falign-functions")
#pragma GCC optimize("-falign-jumps")
#pragma GCC optimize("-falign-loops")
#pragma GCC optimize("-falign-labels")
#pragma GCC optimize("-fcaller-saves")
#pragma GCC optimize("-fcrossjumping")
#pragma GCC optimize("-fcse-follow-jumps")
#pragma GCC optimize("-fcse-skip-blocks")
#pragma GCC optimize("-fdelete-null-pointer-checks")
#pragma GCC optimize("-fdevirtualize")
#pragma GCC optimize("-fexpensive-optimizations")
#pragma GCC optimize("-fgcse")
#pragma GCC optimize("-fgcse-lm")
#pragma GCC optimize("-fhoist-adjacent-loads")
#pragma GCC optimize("-finline-small-functions")
#pragma GCC optimize("-findirect-inlining")
#pragma GCC optimize("-fipa-sra")
#pragma GCC optimize("-foptimize-sibling-calls")
#pragma GCC optimize("-fpartial-inlining")
#pragma GCC optimize("-fpeephole2")
#pragma GCC optimize("-freorder-blocks")
#pragma GCC optimize("-freorder-functions")
#pragma GCC optimize("-frerun-cse-after-loop")
#pragma GCC optimize("-fsched-interblock")
#pragma GCC optimize("-fsched-spec")
#pragma GCC optimize("-fschedule-insns")
#pragma GCC optimize("-fschedule-insns2")
#pragma GCC optimize("-fstrict-aliasing")
#pragma GCC optimize("-fstrict-overflow")
#pragma GCC optimize("-ftree-switch-conversion")
#pragma GCC optimize("-ftree-tail-merge")
#pragma GCC optimize("-ftree-pre")
#pragma GCC optimize("-ftree-vrp")
#pragma GCC optimize(2)
#pragma GCC optimize(3)
#pragma GCC optimize(4)
#pragma GCC optimize(5)
#pragma GCC optimize(6)
#pragma GCC optimize(7)
#pragma GCC optimize(8)
#pragma GCC optimize(9)
*/
#define pii pair<int,int>
#define pll pair<ll,ll>
#define vi vector<int>
#define vl vector<ll>
#define si set<int>
//#define sl set<ll>
#define mii map<int,int>
#define mll map<ll,ll>
#define msi map<string,int>
#define msl map<string,ll>
#define piii pair<int,pii >
#define piipi pair<pii,int>
#define plll pair<ll,pll >
#define pllpl pair<pll,ll>
#define pqi priority_queue<int>
#define pql priority_queue<ll>
#define npqi priority_queue<int,vector<int>,greater<int> >
#define npql priority_queue<ll,vector<ll>,greater<ll> >
#define forup(i,csc,lys) for ((i)=(csc);(i)<=(lys);(i)++)
#define fordo(i,csc,lys) for ((i)=(csc);(i)>=(lys);(i)--)
#define rep(i,x) forup ((i),1,(x))
#define repd(i,x) fordo ((i),(x),1)
#define itr iterator
#define lyscsc(itcalc,c) for(__typeof((c).begin()) itcalc=(c).begin();itcalc!=(c).end();itcalc++)
#define NO {cout<<"NO";return 0;}
#define YES {cout<<"YES";return 0;}
#define y0 y000000000000000000000000000
#define y1 y111111111111111111111111111
#define j0 j000000000000000000000000000
#define j1 j111111111111111111111111111
#define cl0(a) memset((a),(0),(sizeof((a))))
#define clz(a) memset((a),(0x16),(sizeof((a))))
#define clf(a) memset((a),(-(0x16)),(sizeof((a))))
#define inf 0x3bbbbbbb
#define lnf 0x1bbbbbbbbbbbbbbbll
#define sqrt divi
#define p2(i) (1ll<<(i))
#define readi read
#define readll read
/*************************************************/
ll n,m,i,j,dis[300005],fa[300005][19],dep[300005],vis[300005],x,y,a,b;
vector<pair<ll,pair<ll,ll> > > e[300005];
priority_queue<pair<ll,ll> > pq;
struct lys
{
	ll a[2][2]; //a[up][down]
	bool operator ==(const lys &x) const
	{
		return a[0][0]==x.a[0][0]&&
			   a[0][1]==x.a[0][1]&&
			   a[1][0]==x.a[1][0]&&
			   a[1][1]==x.a[1][1];
	}
}dp[300005][19],emt;
lys merge(lys x,lys y)
{
	if (x==emt) return y;
	if (y==emt) return x;
	lys ans;
	ans.a[0][0]=min(x.a[0][0]+y.a[0][0],x.a[0][1]+y.a[1][0]);
	ans.a[0][1]=min(x.a[0][0]+y.a[0][1],x.a[0][1]+y.a[1][1]);
	ans.a[1][0]=min(x.a[1][0]+y.a[0][0],x.a[1][1]+y.a[1][0]);
	ans.a[1][1]=min(x.a[1][0]+y.a[0][1],x.a[1][1]+y.a[1][1]);
	return ans;
}
void dfs(ll x,ll p)
{
	fa[x][0]=p;
	lyscsc(it,e[x])
	{
		if (it->fi==p) continue;
		dep[it->fi]=dep[x]+1;dfs(it->fi,x);
		dp[it->fi][0].a[0][0]=it->se.fi;
		dp[it->fi][0].a[1][1]=it->se.se;
		dp[it->fi][0].a[0][1]=min(it->se.fi+dis[it->fi],it->se.se+dis[x]);
		dp[it->fi][0].a[1][0]=min(it->se.se+dis[it->fi],it->se.fi+dis[x]);
	}
}
long long solve(int x,int y,int a,int b)
{
	lys sl=emt,sr=emt;
	int i;
	fordo(i,18,0) if (dep[fa[x][i]]>=dep[y])
	{
		sl=merge(dp[x][i],sl);
		x=fa[x][i];
	}
	fordo(i,18,0) if (dep[fa[y][i]]>=dep[x])
	{
		sr=merge(dp[y][i],sr);
		y=fa[y][i];
	}
	if (x==y) return min(min(sl.a[0][a]+sr.a[0][b],sl.a[1][a]+sr.a[1][b]),min(sl.a[0][a]+sr.a[1][b],sl.a[1][a]+sr.a[0][b])+dis[x]);
	fordo(i,18,0) if (fa[x][i]!=fa[y][i])
	{
		sl=merge(dp[x][i],sl);
		sr=merge(dp[y][i],sr);
		x=fa[x][i];
		y=fa[y][i];
	}
	sl=merge(dp[x][0],sl);
	sr=merge(dp[y][0],sr);
	x=fa[x][0];
	return min(min(sl.a[0][a]+sr.a[0][b],sl.a[1][a]+sr.a[1][b]),min(sl.a[0][a]+sr.a[1][b],sl.a[1][a]+sr.a[0][b])+dis[x]);
}
int main()
{
	emt.a[0][0]=0;
	emt.a[0][1]=lnf;
	emt.a[1][0]=lnf;
	emt.a[1][1]=0;
	read(n);
	rep(i,n)
	{
		read(dis[i]);
	}
	rep(i,n-1)
	{
		read(x);read(y);read(a);read(b);
		e[x].pb(mk(y,mk(a,b)));
		e[y].pb(mk(x,mk(a,b)));
	}
	rep(i,n) pq.push(make_pair(-dis[i],i));
	while (!pq.empty())
	{
		x=pq.top().second;pq.pop();
		if (vis[x]) continue;vis[x]=1;
		lyscsc(it,e[x])
		{
			if (dis[it->fi]>dis[x]+it->se.fi+it->se.se)
			{
				dis[it->fi]=dis[x]+it->se.fi+it->se.se;
				pq.push(mk(-dis[it->fi],it->fi));
			}
		}
	}
	dep[1]=1;
	dfs(1,0);
	rep(j,18) rep(i,n)
	{
		fa[i][j]=fa[fa[i][j-1]][j-1];
		if (fa[i][j]) dp[i][j]=merge(dp[fa[i][j-1]][j-1],dp[i][j-1]);
	}
	read(m);
	while (m--)
	{
		read(x);read(y);
		printf("%I64d\n",solve((x+1)/2,(y+1)/2,!(x&1),!(y&1)));
	}
	return 0;
}