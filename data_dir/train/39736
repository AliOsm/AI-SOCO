#include <iostream>
#include <ctime>
#include <iomanip>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <cmath>
#include <set>
#include <unordered_set>
#include <unordered_map>
#include <chrono>
#include <stack>
#include <cassert>
#include <queue>
#include <deque>
#include <climits>
#include <cstring>
#include <random>
#include <bitset>

using namespace std;

//#define int long long

const int inf = 1e9;

bool ok(int i, int j, int n) {
    return i >= 0 && j >= 0 && i < n && j < n;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    #ifdef LOCAL
    assert(freopen("input.txt", "r", stdin));
    assert(freopen("output.txt", "w", stdout));
    #endif

    int n, k;
    cin >> n >> k;
    vector<vector<char>> a(n, vector<char> (n));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> a[i][j];
        }
    }
    string ans(2 * n - 1, '$');
    vector<vector<int>> cost(n, vector<int> (n, inf));
    if (a[0][0] == 'a') {
        cost[0][0] = 0;
        ans.front() = 'a';
    } else {
        if (k > 0) {
            cost[0][0] = 1;
            ans.front() = 'a';
        } else {
            ans.front() = a[0][0];
            cost[0][0] = 0;
        }
    }
    for (int pos = 1; pos < 2 * n - 1; pos++) {
        
        for (char lt = 'a'; lt <= 'z'; lt++) {
            int best = inf;
            for (int i = 0; i <= pos; i++) {
                int j = pos - i;
                if (!ok(i, j, n)) {
                    continue;
                }
                int f = inf;
                int s = inf;
                if (ok(i - 1, j, n)) {
                    f = min(f, cost[i - 1][j]);
                }
                if (ok(i, j - 1, n)) {
                    s = min(s, cost[i][j - 1]);
                }
                if (a[i][j] != lt) {
                    f++;
                    s++;
                }
                best = min(best, f);
                best = min(best, s);
                
            }
            if (best <= k) {
                ans[pos] = lt;
                
                
//
                for (int i = 0; i <= pos; i++) {
                    int j = pos - i;
                    if (!ok(i, j, n)) {
                        continue;
                    }
                    int f = inf;
                    int s = inf;
                    if (ok(i - 1, j, n)) {
                        f = min(f, cost[i - 1][j]);
                    }
                    if (ok(i, j - 1, n)) {
                        s = min(s, cost[i][j - 1]);
                    }
                    if (a[i][j] != lt) {
                        f++;
                        s++;
                    }
                    cost[i][j] = min(f, s);
                }
                
//
                break;
            }
        }
    }
    cout << ans << '\n';
}
