#include <bits/stdc++.h>

#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define for1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define x first
#define y second


using namespace std;
typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef long long i64;

int nxt() {
    int x;
    scanf("%d", &x);
    return x;
}


const int N = 100 * 1000 + 10;
PII a[N];
int n, m;

vector<int> g[N];

bool used[N];
vector<int> ans;

void dfs (int v) {
    used[v] = true;
    for (size_t i=0; i<g[v].size(); ++i) {
        int to = g[v][i];
        if (!used[to])
            dfs (to);
    }
    ans.push_back (v);
}


void topological_sort() {
    for (int i=0; i<n; ++i)
        used[i] = false;
    ans.clear();
    for (int i=0; i<n; ++i)
        if (!used[i])
            dfs (i);
    reverse (ans.begin(), ans.end());
}

bool check(int w) {
    for (int i = 0; i < n; ++i) {
        g[i].clear();
    }
    set<PII> s;
    for (int i = 0; i < w; ++i) {
        g[a[i].x].push_back(a[i].y);
        s.insert(a[i]);
    }
    topological_sort();
    for (int i = 0; i + 1 < n; ++i) {
        if (!s.count(mp(ans[i], ans[i + 1]))) {
            return false;
        }
    }
    return true;
}

void solve() {
    n = nxt();
    int m = nxt();
    for (int i = 0; i < m; ++i) {
        a[i].x = nxt() - 1;
        a[i].y = nxt() - 1;
    }
    int l = 0, r = m;
    while (l < r) {
        int mid = (l + r) >> 1;
        if (check(mid)) {
            r = mid;
        } else {
            l = mid + 1;
        }
    }
    if (!check(l)) {
        cout << "-1\n";
    } else {
        cout << l << "\n";
    }
}



int main()
{
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
#else
//    #define fname "sequence"
//    freopen(fname".in", "r", stdin);
//    freopen(fname".out", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);


    int t = 1;
    //cin >> t;
    forn(i, t) {
        solve();
    }

    return 0;
}

