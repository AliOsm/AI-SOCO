#include <bits/stdc++.h>
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define SZ(x) ((int)(x).size())
using namespace std;
typedef long long LL;

const int MAXN = 1e5 + 7;

int n;

char str[MAXN];

struct node {
	int cnt[26];
	int laz;
	node() {
		FOR(i, 0, 26) cnt[i] = 0;
		laz = -1;
	}
};

node seg[4 * MAXN];

inline void build(int x = 1, int xl = 0, int xr = n) {
	if (xr - xl == 1) {
		seg[x].cnt[str[xl] - 'a'] = 1;
		return;
	}
	int xm = (xl + xr) >> 1;
	build(x << 1, xl, xm);
	build(x << 1 | 1, xm, xr);
	FOR(i, 0, 26)
		seg[x].cnt[i] = seg[x << 1].cnt[i] + seg[x << 1 | 1].cnt[i];
}

inline void shift(int x, int xl, int xr) {
	if (seg[x].laz != -1) {
		seg[x << 1].laz = seg[x << 1 | 1].laz = seg[x].laz;
		FOR(i, 0, 26)
			seg[x << 1].cnt[i] = seg[x << 1 | 1].cnt[i] = 0;
		int xm = (xl + xr) >> 1;
		seg[x << 1].cnt[seg[x].laz] = xm - xl;
		seg[x << 1 | 1].cnt[seg[x].laz] = xr - xm;
		seg[x].laz = -1;
	}
}

inline node query(int ql, int qr, int x = 1, int xl = 0, int xr = n) {
	if (qr <= xl || ql >= xr) return node();
	if (ql <= xl && qr >= xr) return seg[x];
	shift(x, xl, xr);
	int xm = (xl + xr) >> 1;
	node res = query(ql, qr, x << 1, xl, xm);
	node help = query(ql, qr, x << 1 | 1, xm, xr);
	FOR(i, 0, 26)
		res.cnt[i] += help.cnt[i];
	return res;
}

inline void update(int qv, int ql, int qr, int x = 1, int xl = 0, int xr = n) {
	if (qr <= xl || ql >= xr) return;
	if (ql <= xl && qr >= xr) {
		seg[x].laz = qv;
		FOR(i, 0, 26)
			seg[x].cnt[i] = 0;
		seg[x].cnt[qv] = xr - xl;
		return;
	}
	shift(x, xl, xr);
	int xm = (xl + xr) >> 1;
	update(qv, ql, qr, x << 1, xl, xm);
	update(qv, ql, qr, x << 1 | 1, xm, xr);
	FOR(i, 0, 26)
		seg[x].cnt[i] = seg[x << 1].cnt[i] + seg[x << 1 | 1].cnt[i];
}

inline void makepal(int l, int r) {
	node nod = query(l, r);
	int odx = -1;
	FOR(i, 0, 26)
		if (nod.cnt[i] & 1) {
			if (odx == -1)
				odx = i;
			else
				return;
			nod.cnt[i] --;
		}
	FOR(i, 0, 26) {
		nod.cnt[i] >>= 1;
		update(i, l, l + nod.cnt[i]);
		update(i, r - nod.cnt[i], r);
		l += nod.cnt[i];
		r -= nod.cnt[i];
	}
	if (odx != -1)
		update(odx, l, r);
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	int m;
	scanf("%d %d", &n, &m);
	scanf("%s", str);
	build();
	while (m --) {
		int l, r;
		scanf("%d %d", &l, &r);
		l --;
		makepal(l, r);
	}
	FOR(i, 0, n) {
		node nod = query(i, i + 1);
		FOR(j, 0, 26)
			if (nod.cnt[j]) {
				printf("%c", char(j + 'a'));
				break;
			}
	}
	puts("");
	return 0;
}
