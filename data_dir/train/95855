#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

struct myCout {
} mycout;

myCout& operator << (myCout &s, const string &str) { printf("%s", str.c_str()); }
myCout& operator << (myCout &s, int x) { printf("%d", x); }
myCout& operator << (myCout &s, long long int x) { printf("%I64d", x); }
myCout& operator << (myCout &s, double x) { printf("%.10lf", x); }
myCout& operator << (myCout &s, char c) { printf("%c", c); }
template <typename T> myCout& operator << (myCout& s, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) s << v[i] << ' '; s << endl; return s; }
// #define cout mycout

int ans[40][40][40][40];

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(int, m);
	next(int, q);
	
	auto v = readVector<string>(n);
	
	FORD (y1, n - 1, 0) FOR (y2, y1, n) FORD (x1, m - 1, 0) FOR (x2, x1, m) {
		if (y2 > y1)			ans[y1][x1][y2][x2] += ans[y1][x1][y2 - 1][x2];
		if (x2 > x1)			ans[y1][x1][y2][x2] += ans[y1][x1][y2][x2 - 1];
		if (y2 > y1 && x2 > x1) ans[y1][x1][y2][x2] -= ans[y1][x1][y2 - 1][x2 - 1];
		
		if (v[y2][x2] == '0') {
			int w = 1;
			while (w < x2 - x1 + 1 && v[y2][x2 - w] == '0') w++;
			int h = 1;
			while (h <= y2 - y1 + 1) {
				if (h > 1) while (w && ans[y2 - h + 1][x2 - w + 1][y2 - h + 1][x2] < w * (w + 1) / 2) w--;
				
				ans[y1][x1][y2][x2] += w;
				h++;
			}
		}
	}
	
	while (q --> 0) {
		next(int, y1); y1--;
		next(int, x1); x1--;
		next(int, y2); y2--;
		next(int, x2); x2--;
		
		cout << ans[y1][x1][y2][x2] << endl;
	}
}