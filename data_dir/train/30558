#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <cmath>
#include <cstdio>
#include <set>
using namespace std;
#define inf 1000000000
#define ll long long
#define eps 1e-9
#define L(s) (int)((s).size())
int a[111111];
int k, n, m;
multiset<int> opt_pos, opt_neg, oth_pos, oth_neg;
ll sum_pos, sum_neg, rest_pos, rest_neg, ans;
inline void put_it(multiset<int> &opt_pos, multiset<int> &oth_pos, ll &sum_pos, ll &rest_pos, int x) {
	if (L(opt_pos) < k) {
		opt_pos.insert(x); 
		sum_pos += x;
	} else
		if (k && x > *opt_pos.begin()) {
			sum_pos -= *opt_pos.begin();
			sum_pos += x;
			rest_pos += *opt_pos.begin();
			oth_pos.insert(*opt_pos.begin());
			opt_pos.erase(opt_pos.begin());
			opt_pos.insert(x);
		} else {
			rest_pos += x;
			oth_pos.insert(x);
		}
}
inline void take_it(multiset<int> &opt_pos, multiset<int> &oth_pos, ll &sum_pos, ll &rest_pos, int x) {
	if (oth_pos.find(x) != oth_pos.end()) {
		oth_pos.erase(oth_pos.find(x));
		rest_pos -= x;
		return;
	}
	opt_pos.erase(opt_pos.find(x));
	sum_pos -= x;
	if (L(oth_pos)) {
		multiset<int>::iterator it = oth_pos.end(); --it; x = *it;
		opt_pos.insert(x);
		sum_pos += x;
		oth_pos.erase(oth_pos.find(x));
		rest_pos -= x;
	}
}
int main() {
	scanf("%d%d", &n, &m);
	for(int i = 0; i < n; ++i) scanf("%d", &a[i]);
	scanf("%d", &k);
	ans = 0;
	for(int i = 0; i < n; ++i) {
		if (a[i] > 0) put_it(opt_pos, oth_pos, sum_pos, rest_pos, a[i]);
		else
			if (a[i] < 0) put_it(opt_neg, oth_neg, sum_neg, rest_neg, -a[i]);
		if (i >= m) {
				if (a[i - m] > 0) take_it(opt_pos, oth_pos, sum_pos, rest_pos, a[i - m]);
				else
					if (a[i - m] < 0) take_it(opt_neg, oth_neg, sum_neg, rest_neg, -a[i - m]);
		}
		if (i >= m - 1) {
			ll v1 = rest_pos - rest_neg + sum_pos + sum_neg;
			if (v1 < 0) v1 *= -1;
			ll v2 = rest_pos - rest_neg - sum_pos - sum_neg;
			if (v2 < 0) v2 *= -1;
			ans = max(ans, max(v1, v2));
		}
	}
	cout << ans << endl;
	return 0;
}