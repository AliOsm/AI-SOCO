/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
/* FOR ACM-ICPC WF*/
#include <bits/stdc++.h>

using namespace std;
using ll = long long;
using vi = vector<int>;
using vvi = vector<vi>;
using pii = pair<int, int>;

#define pb push_back

constexpr auto MOD = 1000000007LL;
constexpr auto LINF = (1LL << 60);
constexpr auto INF = 2147483647LL;
constexpr auto PI = 3.1415926535897932384626433;
constexpr auto EPS = 1E-9;

template<typename T1, typename T2>
ostream &operator<<(ostream &out, const pair<T1, T2> p) {
    out << p.first << ' ' << p.second;
    return out;
}

template<typename T1, typename T2>
istream &operator>>(istream &in, pair<T1, T2> &p) {
    in >> p.first >> p.second;
    return in;
}

template<typename T>
istream &operator>>(istream &in, vector<T> &v) {
    for (auto &x: v)
        in >> x;
    return in;
}

template<typename T>
ostream &operator<<(ostream &out, vector<T> v) {
    for (int i = 0; i < v.size(); i++)
        out << v[i] << (i + 1 == v.size() ? '\n' : ' ');
    out.flush();
    return out;
}

#if __cplusplus < 201703L
#define mp make_pair
#endif

int a[1010], b[1010], n;
vi e[1010];

int dfs(int x, int prv){
    if(a[x]) return x;
    for(auto y: e[x])
        if(y != prv){
            int ret = dfs(y, x);
            if(ret != -1)
                return ret;
        }
    return -1;
}

int main() {
#ifdef LOCAL
//    freopen("../input.txt","r",stdin);
//		freopen("output.txt","w",stdout);
    freopen("../debug.txt", "w", stderr);
#endif
    ios_base::sync_with_stdio(false);

    int T; cin >> T;
    while(T--){
        int n; cin >> n;
        fill(a+1, a+n+1, 0);
        fill(b+1, b+n+1, 0);
        fill(e+1, e+n+1, vi());

        for(int i = 1, x, y; i < n; i++){
            cin >> x >> y;
            e[x].push_back(y);
            e[y].push_back(x);
        }

        int k, x; cin >> k;
        for(int i = 0; i < k; i++){
            cin >> x;
            a[x] = 1;
        }

        cin >> k;
        for(int i = 0; i < k; i++){
            cin >> x;
            b[x] = 1;
        }

        cout << "B " << max_element(b, b+1010)-b << endl;
        int root; cin >> root;
        int node = dfs(root, root);
        int in;
        cout << "A " << node << endl;
        cin >> in;

        cout << "C " << (b[in]? node: -1) << endl;
    }

    return 0;
}
