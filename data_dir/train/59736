//Solution by Tima
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <cstring>
#include <map>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <bitset>
#define f first
#define s second
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define vi vector <int>
#define ld long double
#define pii pair<int, int>
#define y1 sda
using namespace std;    
const int N = int(1e5) + 20, mod = int(1e9)  + 7; 

int n,s,L, a[N];

int mn[N][20], mx[N][20], f[N], t[2*N];

int dp[N];

int getmn(int l,int r){
	int j = f[r - l + 1];
	return min(mn[l][j], mn[r - (1<<j) + 1][j]);
}

int getmx(int l,int r){
	int j = f[r - l + 1];
	return max(mx[l][j], mx[r - (1<<j) + 1][j]);
}

void upd(int v,int res){
	v += n - 1;
	t[v] = res;
	while(v > 1){
		v >>= 1;
		t[v] = min(t[v + v], t[v + v + 1]);
	}
}

int get(int l,int r){
	l += n - 1;
	r += n - 1;
	int res = mod;
	while(l <= r){
		if(l & 1) res = min(res, t[l]);
		if(!(r & 1)) res = min(res, t[r]);
		l = (l + 1) >> 1;
		r = (r - 1) >> 1;
	}
	return res;
}

int main () {
	scanf("%d%d%d", &n, &s, &L);

	for(int i = 1; i <= n; i++){
		scanf("%d", &a[i]);
		mx[i][0] = mn[i][0] = a[i];
		dp[i] = mod;
	}

	f[1] = 0;
	for(int i = 2; i <= n; i++){
		f[i] = f[i / 2] + 1;
	}

	for(int j = 1; j <= 17; j++){
		for(int i = 1; i + (1<<j) - 1 <= n; i++){
			mx[i][j] = max(mx[i][j - 1], mx[i + (1<<(j - 1))][j - 1]);
			mn[i][j] = min(mn[i][j - 1], mn[i + (1<<(j - 1))][j - 1]);
		}
	}


	for(int i = 1; i <= n; i++){
	    int l = 0, r = i;
	    while(r - l > 1){
	    	int m = (l + r) >> 1;
	    	if(getmx(m,i) - getmn(m,i) <= s) r = m;
	    	else l = m;
	    }
	    if(i - r + 1 < L) dp[i] = mod;
	    else{
	    	if(r == 1) dp[i] = 1;
	    	else dp[i] = min(dp[i], get(r - 1, i - L) + 1);
	    }
	    upd(i, dp[i]);
	}
	if(dp[n] == mod) dp[n] = -1;
	printf("%d", dp[n]);

return 0;
}