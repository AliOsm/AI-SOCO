// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")
 
#define MP make_pair
#define PB push_back
#define ST first
#define ND second
 
using namespace __gnu_pbds;
using namespace std;
 
template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
 
//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k
 
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;
 
void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = 503;

int n, m, k;
vector<pair<int, string>> steps;

void kon() {
  cout<<steps.size()<<"\n";
  for (auto p: steps)
    cout<<p.ST<<" "<<p.ND<<"\n";
  exit(0);
}

int main() {
  init_ios();
  cin >> n >> m >> k;
  if (k > 4*n*m-2*n-2*m) {
    cout<<"NO\n";
    return 0;
  }
  cout<<"YES\n";
  if (n == 1) {
    if (k <= m-1) {
      steps.PB({k, "R"});
      kon();
    }
    steps.PB({m-1, "R"});
    k -= m-1;
    steps.PB({k, "L"});
    kon();
  }
  if (m == 1) {
    if (k <= n-1) {
      steps.PB({k, "D"});
      kon();
    }
    steps.PB({n-1, "D"});
    k -= n-1;
    steps.PB({k, "U"});
    kon();
  }
  if (k < n-1) {
    steps.PB({k, "D"});
    kon();
  }
  steps.PB({n-1, "D"});
  k -= n-1;
  if (k == 0)
    kon();
  if (k < n-1) {
    steps.PB({k, "U"});
    kon();
  }
  steps.PB({n-1, "U"});
  k -= n-1;
  int kol = 0;
  while (kol+1 < m && k >= 1+4*(n-1)) {
    steps.PB({1, "R"});
    steps.PB({n-1, "DLR"});
    steps.PB({n-1, "U"});
    k -= 1+4*(n-1);
    ++kol;
  }
  if (k == 0)
    kon();
  if (kol+1 == m) {
    steps.PB({k, "L"});
    kon();
  }
  else {
    steps.PB({1, "R"});
    --k;
    if (k == 0)
      kon();
    if (k < 3*(n-1)) {
      int cnt = k/3;
      if (cnt > 0) {
        steps.PB({cnt, "DLR"});
        k -= 3*cnt;
      }
      if (k == 2)
        steps.PB({1, "DL"});
      else if (k == 1)
        steps.PB({1, "D"});
      kon();
    }
    else {
      steps.PB({n-1, "DLR"});
      k -= 3*(n-1);
      if (k == 0)
        kon();
      steps.PB({k, "U"});
      kon();
    }
  }
}