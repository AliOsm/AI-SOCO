#include <bits/stdc++.h>

using namespace std;

const int N = 210;

int n, m;
int mat[N][N], g[N][N];
int block[N];
int path[N * N + N];
vector<int> a;
vector<pair<int, int> > ans;

void findpathu(int n, int mat[][N], int now, int &step, int *path) {
  int i;
  //printf("findpath %d\n", now);
  for (i = n - 1; i >= 0; --i) {
    if (mat[now][i]) {
      mat[now][i]--;
      mat[i][now]--;
      findpathu(n, mat, i, step, path);
    }
  }
  path[step++] = now;
}

int euclibpath(int n, int mat[][N], int start, int *path) {
  int ret = 0;
  findpathu(n, mat, start, ret, path);
  return ret;
}
/*
void dfs(int v, vector<int> &a) {
  printf("dfs %d\n", v);
  a.push_back(v);
  if (!block[v])
    vis[v] = 1;
  else
    vis[v] = 2;
  if (block[v]) return;
  for (int i = 0; i < n; ++i) {
    if (mat[v][i]) {
      if (!vis[i])
        dfs(i, a);
    }
  }
}*/

int main() {
  int t;
  scanf("%d", &t);
  while (t--) {
    scanf("%d%d", &n, &m);
    ans.clear();
    a.clear();
    memset(mat, 0, sizeof(mat));
    memset(g, 0, sizeof(g));
    memset(block, 0, sizeof(block));
    for (int i = 0, v, u; i < m; ++i) {
      scanf("%d%d", &v, &u);
      --v, --u;
      g[v][u] = 1;
      g[u][v] = 1;
      mat[v][u] = 1;
      mat[u][v] = 1;
    }
    /*
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j)
        printf("%d ", mat[i][j]);
      puts("");
    }*/
    for (int i = 0; i < n; ++i) {
      int c = 0;
      for (int j = 0; j < n; ++j) {
        c += mat[i][j];
      }
      if (c & 1) {
        block[i] = 1;
        a.push_back(i);
      }
      else {
      }
    }
    for (int i = 0; i + 1 < a.size(); i += 2) {
      mat[a[i]][a[i + 1]]++;
      mat[a[i + 1]][a[i]]++;
    }
    for (int i = 0; i < n; ++i) {
      int c = euclibpath(n, mat, i, path);
      //printf("path: ");
      //for (int i = 0; i < c; ++i) printf("%d ", path[i]); puts("");
      for (int i = 0; i < c; ++i) {
        if (g[path[i]][path[(i + 1) % c]]) {
          ans.push_back(make_pair(path[i], path[(i + 1) % c]));
          g[path[i]][path[(i + 1) % c]]--;
          g[path[(i + 1) % c]][path[i]]--;
        }
      }
    }
    int cc = 0;
    for (int i = 0; i < n; ++i) if (!block[i]) cc++;
    printf("%d\n", cc);
    for (auto p : ans) {
      printf("%d %d\n", p.first + 1, p.second + 1);
    }
  }
  return 0;
}
