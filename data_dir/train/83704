#include <bits/stdc++.h>
using namespace std;

template <int mod>
struct ModInt {
  int val;
  int trim(int x) const { return x >= mod ? x - mod : x < 0 ? x + mod : x; }
  ModInt(int v = 0) : val(trim(v % mod)) {}
  ModInt(long long v) : val(trim(v % mod)) {}
  ModInt &operator=(int v) { return val = trim(v % mod), *this; }
  ModInt &operator=(const ModInt &oth) { return val = oth.val, *this; }
  ModInt operator+(const ModInt &oth) const { return trim(val + oth.val); }
  ModInt operator-(const ModInt &oth) const { return trim(val - oth.val); }
  ModInt operator*(const ModInt &oth) const { return 1LL * val * oth.val % mod; }
  ModInt operator/(const ModInt &oth) const {
    function<int(int, int, int, int)> modinv = [&](int a, int b, int x, int y) {
      if (b == 0) return trim(x);
      return modinv(b, a - a / b * b, y, x - a / b * y);
    };
    return *this * modinv(oth.val, mod, 1, 0);
  }
  bool operator==(const ModInt &oth) const { return val == oth.val; }
  ModInt operator-() const { return trim(mod - val); }
  template<typename T> ModInt pow(T pw) {
    bool sgn = false;
    if (pw < 0) pw = -pw, sgn = true;
    ModInt ans = 1;
    for (ModInt cur = val; pw; pw >>= 1, cur = cur * cur) {
      if (pw&1) ans = ans * cur;
    }
    return sgn ? ModInt{1} / ans : ans;
  }
};
const int MOD = 1e9 + 7;
using mint = ModInt<MOD>;

template<typename F>
struct Lagrange_poly {
  vector<F> fac, p;
  int n;
  Lagrange_poly(vector<F> p) : p(p) { // f(i) = p[i]
    n = p.size();
    fac.resize(n), fac[0] = 1;
    for (int i = 1; i < n; ++i) fac[i] = fac[i - 1] * F(i);
  }
  F operator()(F x) const {
    F ans(0), to_mul(1);
    for (int j = 0; j < n; ++j) to_mul = to_mul * (F(j) - x);
    assert(not(to_mul == F(0)));
    for (int j = 0; j < n; ++j) {
      ans = ans + p[j] * to_mul / (F(j) - x) /
            fac[n - 1 - j] / (j&1 ? -fac[j] : fac[j]);
    }
    return ans;
  }
};



int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);
  int n, k; cin >> n >> k;
  vector<mint> h(k + 2);
  h[0] = 0;
  for (int i = 1; i < k + 2; ++i) {
    h[i] = h[i - 1] + mint(i).pow(k);
  }
  if (n < k + 2) cout << h[n].val << '\n';
  else cout << Lagrange_poly<mint>(h)(n).val << '\n';
}
