#pragma GCC optimize ("Ofast")
#include "bits/stdc++.h"
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
using namespace __gnu_pbds;
using namespace std;
typedef long long int ll;
#define int long long int
#define pb push_back
#define fi first
#define se second
#define deb cerr << "Line no." << __LINE__
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define sz(x) (int)x.size()
const int mod = 1e9 + 7;
const int mod1 = 998244353;
typedef long double f80;
#ifndef LOCAL
#define endl '\n'
#endif

template<typename T>
using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
	uniform_int_distribution<int> uid(l, r);
	return uid(rng);
}
int pwr(int a,int b){
	int ans = 1;
	while(b){
		if(b & 1) ans = (ans * a) % mod1;
		a = (a * a) % mod1;
		b >>= 1;
	}
	return ans;
}
const int N = 1e5;
int fact[N], ifact[N];
int ncr(int n,int r){
	if(n < 0 || r > n) return 0;
	int ans = (fact[n] * ifact[n - r]) % mod1;
	return (ans * ifact[r]) % mod1;
}
int g(int s,int p,int m){
	if(p == 0) return s == 0;
	int ans = 0;
	int cc = 1;
	fr(i, 0, p){
		ans += (ncr(p, i) * ((cc * ncr(s + p - 1 - i * (m + 1), p - 1)) % mod1)) % mod1;
		if(ans >= mod1) ans -= mod1;
		cc = mod1 - cc;
	}
	return ans;
}
void solve(){
	fact[0] = 1;
	fr(i, 1, N - 1)
		fact[i] = (i * fact[i - 1]) % mod1;
	ifact[N - 1] = pwr(fact[N - 1], mod1 - 2);
	for(int i = N - 2; i >= 0; i--) ifact[i] = (ifact[i + 1] * (i + 1)) % mod1;
	int r, s, p;
	cin >> p >> s >> r;
	int ans = 0;
	fr(i, r, s){
		fr(j, 1, p){
			ans += (((ncr(p - 1, j - 1) * pwr(j, mod1 - 2)) % mod1) * (g(s - j * i, p - j, i - 1))) % mod1;
			if(ans >= mod1) ans -= mod1;
		}
	}
	ans = (ans * pwr(g(s - r, p, s), mod1 - 2)) % mod1;
	cout << ans;
}
signed main(){
  	IO;
// 	freopen("inp.txt","r", stdin);
// 	freopen("out.txt", "w", stdout);
 	clock_t clk = clock();
  	int t = 1;
  	// cin >> t;
  	while(t--){
    	solve();
  	}
  	cerr << (double)(clock() - clk) / CLOCKS_PER_SEC;
  	return 0;
}