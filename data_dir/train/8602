#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
typedef long long       ll;
#define all(A)          A.begin(),A.end()
#define rall(A)         A.rbegin(),A.rend()
#define SP              setprecision
#define mem(A,B)        memset(A,B,sizeof A)
#define sorta(A)        sort(all(A))
#define sortd(A)        sort(rall(A))
#define sortf(A,F)      sort(all(A),F)
#define Get(mask,bit)   (mask&(1LL<<bit))
#define Set(mask,bit)   (mask|(1LL<<bit))
#define Reset(mask,bit) (mask&(~(1LL<<bit)))
#define Flib(mask,bit)  (mask^(1LL<<bit))
#define LowOn(mask,bit) (mask&-mask)
#define PI              (acos(0.) * 2)
#define exp             2.71828182845904523536028747135266249775724709369995
#define eps             .000000001
#define oo              1000000000
#define endl            '\n'
template <class T> inline void remax(T& A, T B){ if (A < B)A = B; }
template <class T> inline void remin(T& A, T B){ if (A > B)A = B; }
string ToString(ll num){ string ret; do{ ret += ((num % 10) + '0'); num /= 10; } while (num); reverse(all(ret)); return ret; }
ll ToNumber(string s){ ll r = 0, p = 1; for (int i = s.size() - 1; i >= 0; --i)r += (s[i] - '0') * p, p *= 10; return r; }
ll Gcd(ll a, ll b){ while (a %= b ^= a ^= b ^= a);  return b; }
ll Power(ll base, ll power){ ll ret = 1; while (power){ if (power & 1)ret *= base; power >>= 1; base *= base; } return ret; }
ll PowerMod(ll base, ll power, ll mod){ if (!power)return 1; if (power & 1)return (base * PowerMod(base, power - 1, mod)) % mod; return PowerMod((base * base) % mod, power >> 1, mod); }
int Log(ll num, ll base){ int ret = 0; while (num){ ++ret; num /= base; } return ret; }
int Count(ll mask){ int ret = 0; while (mask){ if (mask & 1)++ret; mask >>= 1; } return ret; }


map <string, int> m;
string table[] = { "H", "He", "Li", "Be", "B", "C", "N", "O", "F", "Ne",
                   "Na", "Mg", "Al", "Si", "P", "S", "Cl", "Ar", "K", "Ca",
                   "Sc", "Ti", "V", "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn",
                   "Ga", "Ge", "As", "Se", "Br", "Kr", "Rb", "Sr", "Y", "Zr",
                   "Nb", "Mo", "Tc", "Ru", "Rh", "Pd", "Ag", "Cd", "In", "Sn",
                   "Sb", "Te", "I", "Xe", "Cs", "Ba", "La", "Ce", "Pr", "Nd",
                   "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", "Ho", "Er", "Tm", "Yb",
                   "Lu", "Hf", "Ta", "W", "Re", "Os", "Ir", "Pt", "Au", "Hg",
                   "Tl", "Pb", "Bi", "Po", "At", "Rn", "Fr", "Ra", "Ac", "Th",
                   "Pa", "U", "Np", "Pu", "Am", "Cm", "Bk", "Cf", "Es", "Fm", "Md" };
char memo[1 << 17][17][101];
int arr[17];
int arr2[17];
vector <int> ans;
int n, k;
bool f(int mask = 0, int ind = 0, int sum = 0){
    if (sum > 100)return 0;
    if (ind == k)return 1;
    if (sum > arr2[ind])return 0;
    char &ret = memo[mask][ind][sum];
    if (~ret)return ret;
    ret = false;
    if (sum == arr2[ind])
        return ret = f(mask, ind + 1);
    for (int i = 0; i < n; ++i)
    if (!(mask & (1 << i)))
        ret |= f(mask | (1 << i), ind, sum + arr[i]);
    return ret;
}
void f2(int mask = 0, int ind = 0, int sum = 0){
    if (sum > 100)return;
    if (ind == k)return;
    if (sum > arr2[ind])return;
    if (sum == arr2[ind])
    if (f(mask, ind + 1)){
        int sz = (int)ans.size();
        for (int i = 0; i < sz; ++i){
            if (i)putchar('+');
            cout << table[arr[ans[i]] - 1];
        }
        printf("->");
        cout << table[arr2[ind] - 1];
        puts("");
        ans.clear();
        return f2(mask, ind + 1);
    }
    for (int i = 0; i < n; ++i)
    if (!(mask & (1 << i)))
    if (f(mask | (1 << i), ind, sum + arr[i])){
        ans.emplace_back(i);
        return f2(mask | (1 << i), ind, sum + arr[i]);
    }
}
inline void run(){
    scanf("%d%d", &n, &k);
    for (int i = 0; i < 100; ++i)
        m[table[i]] = i + 1;
    for (int i = 0; i < n; ++i){
        string s;
        cin >> s;
        arr[i] = m[s];
    }
    for (int i = 0; i < k; ++i){
        string s;
        cin >> s;
        arr2[i] = m[s];
    }
    mem(memo, ~0);
    if (f()){
        puts("YES");
        f2();
    }
    else puts("NO");
}
int main(){
    FILE *input = stdin;
    FILE *output = stdout;
#ifdef LOCAL
    input = freopen("input.txt", "r", stdin);
    output = freopen("output.txt", "w", stdout);
#endif
    while (!feof(input)){
        run();
#ifdef LOCAL
        puts("");
#else
        break;
#endif
    }
#ifdef LOCAL
    fprintf(output, "\n\nTime: %d ms\n", (int)(clock() * 1000. / CLOCKS_PER_SEC));
#endif
    return 0;
}