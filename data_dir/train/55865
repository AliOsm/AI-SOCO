// g++ -std=c++14

/*

Today might be the chance to grasp the chance to let your talent bloom.
May be tomorrow, the day after, or next year...
May be even when you are 30. I'm not sure if physique has anything to do with it
but if you think that it will never come, it probably never will.

- Tooru Oikawa.

*/


#include<bits/stdc++.h>

typedef long long ll;
typedef long double lld;
using namespace std;

#define sd(x) scanf("%d",&x)
#define sd2(x,y) scanf("%d%d",&x,&y)
#define sd3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define endl "\n"
#define fi first
#define se second
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)
#define LET(x, a)  __typeof(a) x(a)
#define foreach(it, v) for(LET(it, v.begin()); it != v.end(); it++)
#define MEMS(a,b) memset(a,b,sizeof(a))
#define _ ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define __ freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define all(c) c.begin(),c.end()
#define inf 1000000000000000001

#define tr(...) cout<<__FUNCTION__<<' '<<__LINE__<<" = ";trace(#__VA_ARGS__, __VA_ARGS__)

template<typename S, typename T>
ostream& operator<<(ostream& out,pair<S,T> const& p){out<<'('<<p.fi<<", "<<p.se<<')';return out;}

template<typename T>
ostream& operator<<(ostream& out,vector<T> const& v){
ll l=v.size();for(ll i=0;i<l-1;i++)out<<v[i]<<' ';if(l>0)out<<v[l-1];return out;}

template<typename T>
void trace(const char* name, T&& arg1){cout<<name<<" : "<<arg1<<endl;}

template<typename T, typename... Args>
void trace(const char* names, T&& arg1, Args&&... args){
const char* comma = strchr(names + 1, ',');cout.write(names, comma-names)<<" : "<<arg1<<" | ";trace(comma+1,args...);}

#define int ll

const int N = 2e5 + 100;
const int MAX_IND = 2e5 + 10;

int bit[2 * N][3];

int n, q;
set<int> r, p, s;
string st;
int rc, sc, pc;


void update(int ind, int val, int typ){
    ind++;
    while(ind <= MAX_IND){
        bit[ind][typ] += val;
        ind += (ind & -ind);
    }
}

int query(int ind, int typ){
    ind++;
    int ans = 0;
    while(ind > 0){
        ans += bit[ind][typ];
        ind -= (ind & -ind);
    }
    return ans;
}

int get(int l, int r, int typ){
    int ans = query(r, typ);
    if(l != 0){
        ans -= query(l - 1, typ);
    }
    return ans;
}

int get_r(){
    if(sc == 0){
        if(rc == n){
            return n;
        }
        else{
            return 0;
        }
    }
    if(rc == 0){
        return 0;
    }
    int ans = 0;
    int l = *s.begin();
    int rr = *(s.rbegin());
    // tr(l, rr);
    ans += get(l, rr, 0);
    if(!p.empty()){
        l = min(l, *p.begin());
        rr = max(rr, *p.rbegin());
        // tr(l, rr, ans);
    }
    ans += get(0, l, 0);
    ans += get(rr, n - 1, 0);
    return ans;
}
int get_p(){
    if(rc == 0){
        if(pc == n){
            return n;
        }
        else{
            return 0;
        }
    }
    if(pc == 0){
        return 0;
    }
    int ans = 0;
    int l = *r.begin();
    int rr = *(r.rbegin());
    ans += get(l, rr, 1);
    if(!s.empty()){
        l = min(l, *s.begin());
        rr = max(rr, *s.rbegin());
    }
    ans += get(0, l, 1);
    ans += get(rr, n - 1, 1);
    return ans;
}
int get_s(){
    if(pc == 0){
        if(sc == n){
            return n;
        }
        else{
            return 0;
        }
    }
    if(sc == 0){
        return 0;
    }
    int ans = 0;
    int l = *p.begin();
    int rr = *(p.rbegin());
    ans += get(l, rr, 2);
    if(!r.empty()){
        l = min(l, *r.begin());
        rr = max(rr, *r.rbegin());
    }
    ans += get(0, l, 2);
    ans += get(rr, n - 1, 2);
    return ans;
}

int gett_ans(){
    int ans = 0;
    ans = get_r() + get_p() + get_s();
    return ans;
}

int32_t main(){ _
    cin >> n >> q;
    cin >> st;
    for(int i = 0; i < n; i++){
        if(st[i] == 'R'){
            r.insert(i);
        }
        else if(st[i] == 'P'){
            p.insert(i);
        }
        else{
            s.insert(i);
        }
    }
    // r.insert(-1);
    // p.insert(-1);
    // s.insert(-1);
    // 0 - rock
    // 1 - paper
    // 2 - scissor
    for(int i = 0; i < n; i++){
        if(st[i] == 'R'){
            rc++;
            update(i, 1, 0);
        }
        else if(st[i] == 'P'){
            pc++;
            update(i, 1, 1);
        }
        else{
            sc++;
            update(i, 1, 2);
        }
    }
    cout << gett_ans() << endl;
    for(int i = 0; i < q; i++){
        int ind;
        char val;
        cin >> ind >> val;
        ind--;
        if(st[ind] == 'R'){
            rc--;
            update(ind, -1, 0);
            r.erase(ind);
        }
        else if(st[ind] == 'P'){
            pc--;
            p.erase(ind);
            update(ind, -1, 1);
        }
        else{
            sc--;
            s.erase(ind);
            update(ind, -1, 2);
        }
        st[ind] = val;
        // tr(st);
        if(st[ind] == 'R'){
            rc++;
            r.insert(ind);
            update(ind, 1, 0);
        }
        else if(st[ind] == 'P'){
            pc++;
            p.insert(ind);
            update(ind, 1, 1);
        }
        else{
            sc++;
            s.insert(ind);
            update(ind, 1, 2);
        }
        cout << gett_ans() << endl;
    }
    return 0;
}
