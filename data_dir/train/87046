#include<bits/stdc++.h>
using namespace std;
const int mod=1000000007;
inline int add(int a,int b)
{
	if((a+=b)>=mod)a-=mod;
	return a;
}
inline int mult(int a,int b)
{
	long long t=1ll*a*b;
	if(t>=mod)t%=mod;
	return t;
}
inline int dec(int a,int b)
{
	if((a-=b)<0)a+=mod;
	return a;
}
inline int power(int a,int b)
{
	int out=1;
	while(b)
	{
		if(b&1)out=mult(out,a);
		a=mult(a,a);
		b>>=1;
	}
	return out;
}
inline int lowbit(int x)
{
	return x&(-x);
}
int n,a[10][10],ch[70010][128],idcnt=0,q[10][128],dp[10][70010];
unordered_map<bitset<128>,int> id;
int dfs(bitset<128> s)
{
	if(id.find(s)!=id.end())return id[s];
	id[s]=++idcnt;
	for(int i=0;i<(1<<n);i++)
	{
		bitset<128> tmp=s;
		for(int j=0;j<(1<<n);j++)
		{
			if(!tmp[j])
			{
				int x=i&j;
				while(x)
				{
					int t=lowbit(x);
					if(s[j^t])
					{
						tmp[j]=1;
						break;
					}
					x-=t;
				}
			}
		}
		ch[id[s]][i]=dfs(tmp);
	}
	return id[s];
}
int main()
{
	scanf("%d",&n);
	dfs(1);
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			scanf("%d",&a[i][j]);
			a[i][j]=mult(a[i][j],power(100,mod-2));
		}
	}
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<(1<<n);j++)
		{
			q[i][j]=1;
			for(int k=0;k<n;k++)
			{
				if((j>>k)&1)q[i][j]=mult(q[i][j],a[i][k]);
				else q[i][j]=mult(q[i][j],dec(1,a[i][k]));
			}
		}
	}
	dp[0][1]=1;
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=idcnt;j++)
		{
			for(int k=0;k<(1<<n);k++)
			{
				dp[i][ch[j][k]]=add(dp[i][ch[j][k]],mult(dp[i-1][j],q[i-1][k]));
			}
		}
	}
	bitset<128> bt;
	for(int i=0;i<(1<<n);i++)bt[i]=1;
	printf("%d\n",dp[n][id[bt]]);
	return 0;
}