#include <bits/stdc++.h>

using namespace std;

using ll = long long;

const int mx = 1000005;

int state[3*mx];
int divisors[mx];
long long arr[mx];
long long tree[3*mx];

void seive()
{
    int i , j;
    for(i = 1 ; i < mx ; i++)
    {
        for(j = i ; j < mx ; j += i)
        {
            divisors[j]++;
        }
    }
}
void buildtree(int l , int r , int idx)
{
    if(l == r)
    {
        tree[idx] =(long long) arr[l];
        if(arr[l] == divisors[arr[l]])state[idx] = 0;
        else state[idx] = 1;
        return;
    }
    int lc , rc , mid;
    lc = 2*idx;
    rc = lc+1;
    mid = (l+r)/2;

    buildtree(l,mid,lc);
    buildtree(mid+1,r,rc);

    tree[idx] = tree[lc] + tree[rc];
    state[idx] = state[lc] + state[rc];
    return;
}
void update(int l , int r ,int left , int right , int idx)
{
    if(l > right || r < left) return;

    if(state[idx] == 0)
    {
        return;
    }
    if(l == r)
    {
        tree[idx] = divisors[tree[idx]];
        if(tree[idx] == divisors[tree[idx]]) state[idx] = 0;
        else state[idx] = 1;
        return;
    }
    int lc , rc , mid;
    lc = 2*idx;
    rc = lc+1;
    mid = (l+r)/2;
    update(l,mid,left,right,lc);
    update(mid+1,r,left,right,rc);
    tree[idx] = tree[lc] + tree[rc];
    state[idx] = state[lc] + state[rc];
}
long long query(int l , int r ,int left , int right , int idx)
{
    if(l > right || r < left) return 0LL;

    if(l >= left && r <= right)
    {
        return tree[idx];
    }
    int lc , rc , mid;
    lc = 2*idx;
    rc = lc+1;
    mid = (l+r)/2;

    long long a , b;

    a = query(l,mid,left,right,lc);
    b = query(mid+1,r,left,right,rc);
    return a+b;
}

int main()
{
    seive();
    int i , j , k , n , m , t , l , r;
    scanf("%d %d",&n,&m);
    for(i = 1 ; i <= n ; i++)
    {
        scanf("%lld",arr+i);
    }
    buildtree(1,n,1);
    while(m--)
    {
        scanf("%d %d %d",&t,&l,&r);
        if(t == 1)update(1,n,l,r,1);
        else printf("%lld\n",query(1,n,l,r,1));
    }

    return 0;
}
