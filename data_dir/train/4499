#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<ll> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;
const int di[] = { 0, 0, 1, -1 };
const int dj[] = { 1, -1, 0, 0 };
const ll MOD = 1e9 + 9;
const ll INF = 1e9;
const long double EPS = 1e-6;
#define all(x) x.begin(),x.end()

#define LSOne(S) (S & (-S))

class BIT {
private:
	vi ft;

public:
	BIT() {}
	// initialization: n + 1 zeroes, ignore index 0
	BIT(int n) { ft.assign(n + 2, 0); }
	void build(int n) { ft.assign(n + 2, 0); }

	int rsq(int b) {
		int sum = 0; for (; b; b -= LSOne(b)) sum += ft[b];
		return sum;
	}

	int rsq(int a, int b) {
		return rsq(b) - (a == 1 ? 0 : rsq(a - 1));
	}

	// adjusts value of the k-th element by v (v can be +ve/inc or -ve/dec)
	void adjust(int k, int v) {
		for (; k < (int)ft.size(); k += LSOne(k)) ft[k] += v;
	}

	void adjustRange(int a, int b, int v) {
		adjust(a, v);
		adjust(b, -v);
	}
};

struct Range {
	int a, b;
	int edge = 0;

	int getPos() {
		if (edge == 0) {
			if ((b - a) % 2 == 0)
				return (a + b) / 2 - 1;
			return (a + b) / 2;
		}
		if (edge == 1) return a;
		return b - 1;
	}

	int dist() const {
		if (edge) return b - a;
		return (b - a + 1) / 2;
	}

	bool operator < (Range other) const {
		int x = dist();
		int y = other.dist();
		if (x != y)
			return x > y;
		if (a != other.a)
			return a < other.a;
		return b < other.b;
	}
};

int n, m;
BIT st, ed;
set<Range> range;

inline void insertRange(int a, int b) {
	int edge = 0;
	if (a == 1) edge = 1;
	else if (b == n + 1) edge = 2;

	st.adjustRange(a, b, a);
	ed.adjustRange(a, b, b);
	range.insert(Range{ a,b, edge });
}

inline void removeRange(int a, int b) {
	int edge = 0;
	if (a == 1) edge = 1;
	else if (b == n + 1) edge = 2;

	st.adjustRange(a, b, -a);
	ed.adjustRange(a, b, -b);
	range.erase(Range{ a,b, edge });
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> m;
	st.build(n);
	ed.build(n);
	vi idx(1e6 + 6);
	insertRange(1, n + 1);

	while (m--) {
		int t, id; cin >> t >> id;
		if (t == 1) {
			Range rng = *range.begin();
			int pos = rng.getPos();
			idx[id] = pos;
			cout << pos << endl;

			removeRange(rng.a, rng.b);
			insertRange(rng.a, pos);
			insertRange(pos + 1, rng.b);
		}
		else {
			int pos = idx[id];
			Range rngA, rngB;
			rngA.a = st.rsq(pos - 1);
			rngA.b = pos;
			rngB.a = pos + 1;
			rngB.b = ed.rsq(pos + 1);

			if (rngA.a)
				removeRange(rngA.a, rngA.b);
			if (rngB.b)
				removeRange(rngB.a, rngB.b);
			insertRange(
				rngA.a ? rngA.a : pos,
				rngB.b ? rngB.b : pos + 1);
		}
	}

	cin.ignore(), cin.get();
}
