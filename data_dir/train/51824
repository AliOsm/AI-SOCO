#include<bits/stdc++.h>
using namespace std;

#define fi first
#define se second
#define long long long
typedef pair<int,int> ii;

const int INF = 1e9;
int n, m, k;
int mx[5003];
int A[5003], B[5003], C[5003];
int dp[5003][5003];
vector<int> vec[5003];

void count()
{
	for(int i = 0; i <= 5001; i++)
		for(int j = 0; j <= 5001; j++)
			dp[i][j] = -INF;

	dp[0][k] = 0;
	for(int i = 0; i < n; i++)
	{
		for(int j = 0; j <= 5000; j++)
		{
			if(dp[i][j] == -INF) continue;
			
			int _j = j+B[i+1];
			// printf("%d %d %d %d\n", i, j, _j, dp[i][j]);

			if(j < A[i+1]) continue;
			dp[i+1][_j] = max(dp[i+1][_j], dp[i][j]);
			// printf("dp : %d\n", dp[i+1][_j]);

			int sum = 0;
			for(int idx = 0; idx < vec[i+1].size(); idx++)
			{
				sum += vec[i+1][idx];
				if(_j-1-idx < 0) break;
				dp[i+1][_j-1-idx] = max(dp[i+1][_j-1-idx], dp[i][j]+sum);
			}
		}
		// printf("i : %d\n", i);
		// for(int j = 0; j <= 15; j++)
		// 	printf("	%d %d\n", j, dp[i][j]);
	}
}

void getvec()
{
	for(int i = 1; i <= n; i++)
	{
		// printf("%d %d\n", mx[i], i);
		vec[mx[i]].push_back(C[i]);
	}
	for(int i = 1; i <= n; i++)
	{
		sort(vec[i].begin(), vec[i].end(), greater<int>());
		// printf("i : %d\n", i);
		// for(auto x : vec[i])
		// 	printf("%d ", x); printf("\n");
	}
}

int main()
{
	// freopen("input.in", "r", stdin);

	scanf("%d %d %d", &n, &m, &k);
	for(int i = 1; i <= n; i++)
	{
		mx[i] = i;
		scanf("%d %d %d", &A[i], &B[i], &C[i]);
	}
	for(int i = 1; i <= m; i++)
	{
		int u, v;
		scanf("%d %d", &u, &v);
		mx[v] = max(u, mx[v]);
	}
	getvec();
	count();
	int mx = -INF;
	for(int i = 0; i <= 5000; i++)
		mx = max(dp[n][i], mx);
	printf("%d\n", (mx == -INF)? -1 : mx);
}