#include<bits/stdc++.h>
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;
#define pb push_back
#define lb lower_bound
#define ub upper_bound
#define ins insert
#define fi first
#define se second
#define pi pair<int,int>
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v) ((ll)((v).size()))
#define reset(v,val) memset(v,val,sizeof(v));
#define forn(i, x, n) for ( i = x; i<=(ll)(n); i++)
#define iforn(i, x, n) for( i = x; i<(ll)(n); i++)
#define rep(i, x, n) for ( i =x; i>=(ll)(n); i--)
#define irep(i, x, n) for( i =x; i>(ll)(n); i--)
using namespace std;
typedef  long long int  ll;
const long long  mod=1e9+7;
ll n,k,m,res=0,ans=0,sm=0,edge=-1,W;
ll a[500005],dp[500050],vis[500005]={0};
set< pi >st,st1,st2;
set<ll>stres;
string s,s1,s2,s3,s4;
vector<ll>v[500005],vnode,vans,v3;
vector< pi >vv,vv1,adj,v1,v2;
vector< pair< int,pi> > vvv;
priority_queue <ll> q;
map<  pair<ll,ll> ,ll > mp;
set< pi > ::iterator it,it1,it2;
int voyel(char c){
	if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='y')return 1;
	return 0;
}

void dfs(ll x,ll p){
  vis[x]=1;
  for(ll y:v[x]){
    if(!vis[y]){
            dfs(y,x);
         if(y!=p)dp[x]=min(dp[x],a[y]);
       }
    }
 }


int main(){
In_the_name_of_allah_the_merciful
	ll i=0,j=0,x,y,z=0,mx=0,nb0=0,nb1=0,nbmax=0,nbinf=0,mm=5e9,idx=0,ok=0,l,r,negatif=0,positif=0,q,d,res1=0;
	char c;
   // freopen("a.in","r",stdin);
   cin>>n;
   ll flag=1;
   ll root=1;
   for(i=1;i<=n;i++){
      cin>>x>>a[i];
      dp[i]=1;
      if(x==-1){
        root=i;
        continue;
      }
      v[x].pb(i);
      v[i].pb(x);
   }
   memset(vis,0,sizeof(vis));
   dfs(root,-1);
 //  for(i=1;i<=n;i++)cout<<a[i]<<" ";cout<<endl;
 //  for(i=1;i<=n;i++)cout<<dp[i]<<" ";cout<<endl;
   for(i=1;i<=n;i++){
    if(dp[i]&&a[i]||a[i]&&v[i].size()==1){
        cout<<i<<" ";
        flag=0;
     }
   }
   if(flag)cout<<"-1";
Alhamdulillah
 }
