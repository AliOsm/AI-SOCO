#include <bits/stdc++.h>
using namespace std;
#define SZ(v) int((v).size())
#define ALL(vec) begin(vec), end(vec)
typedef long long i64;
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
#ifdef Rahul
# define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#else
# define error(...) 42;
#endif
string to_string(char c) { return "'" + string(1, c) + "'";}
string to_string(string s) { return '"' + s + '"';}
string to_string(const char* s) { return to_string((string) s);}
template<typename A> string to_string(A);
template<typename A, typename B> string to_string(pair<A, B> p){
  return "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}
template<typename A> string to_string(A v) {bool f = false; string r = "{"; 
  for (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}
template<typename A> string to_string(vector<vector<A>> v) {string r; 
  for (auto x: v) r += "\n" + to_string(x); return r;}
int Nerr;
template<typename A> string to_string(A *p) {return to_string(vector<A>(p, p + Nerr));}
void err(istream_iterator<string>) { cerr << endl; }
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << to_string(a) << "; "; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
#define Lu(...) [&] (auto &&u) { return __VA_ARGS__; }
#define Luv(...) [&] (auto &&u, auto &&v) { return __VA_ARGS__; }
int const MOD = 1e9 + 7;
long long const INF = 1e18 + 42;
/***********************************************************************/
namespace IO {
  const int BUFFER_SIZE = 1 << 15;
  char input_buffer[BUFFER_SIZE];
  int input_pos = 0, input_len = 0;
  char output_buffer[BUFFER_SIZE];
  int output_pos = 0;
  char number_buffer[100];
  uint8_t lookup[100];
  void _update_input_buffer() {
    input_len = fread(input_buffer, sizeof(char), BUFFER_SIZE, stdin);
    input_pos = 0;
    if (input_len == 0)
      input_buffer[0] = EOF;
  }
  inline char next_char(bool advance = true) {
    if (input_pos >= input_len)
      _update_input_buffer();
    return input_buffer[advance ? input_pos++ : input_pos];
  }
  template<typename T>
  inline void read_int(T &number) {
    bool negative = false;
    number = 0;
    while (!isdigit(next_char(false)))
      if (next_char() == '-')
        negative = true;
    do {
      number = 10 * number + (next_char() - '0');
    } while (isdigit(next_char(false)));
    if (negative)
      number = -number;
  }
  template<typename T, typename... Args>
  inline void read_int(T &number, Args &... args) {
    read_int(number);
    read_int(args...);
  }
  inline void read_double(double &number) {
    bool negative = false;
    number = 0;
    while (!isdigit(next_char(false)))
      if (next_char() == '-')
        negative = true;
    do {
      number = 10 * number + (next_char() - '0');
    } while (isdigit(next_char(false)));
    if (next_char(false) == '.') {
      next_char();
    for (double multiplier = 0.1; isdigit(next_char(false)); multiplier *= 0.1)
      number += multiplier * (next_char() - '0');
    }
    if (negative)
      number = -number;
  }
  void _flush_output() {
    fwrite(output_buffer, sizeof(char), output_pos, stdout);
    output_pos = 0;
  }
  inline void write_char(char c) {
    if (output_pos == BUFFER_SIZE)
      _flush_output();
    output_buffer[output_pos++] = c;
  }
  template<typename T>
  inline void write_int(T number, char after = '\0') {
    if (number < 0) {
      write_char('-');
      number = -number;
    }
    int length = 0;
    while (number >= 10) {
      uint8_t lookup_value = lookup[number % 100];
      number /= 100;
      number_buffer[length++] = (lookup_value & 15) + '0';
      number_buffer[length++] = (lookup_value >> 4) + '0';
    }
    if (number != 0 || length == 0)
      write_char(number + '0');
    for (int i = length - 1; i >= 0; i--)
      write_char(number_buffer[i]);
    if (after)
      write_char(after);
  }
  inline void write_double(double number, char after = '\0', int places = 6) {
    if (number < 0) {
      write_char('-');
      number = -number;
    }
    assert(number <= 9e18);
    // Round up the number according to places.
    number += 0.5 * pow(0.1, places);
    long long floored = (long long) number;
    write_int(floored);
    if (places > 0) {
      number = (number - floored) * pow(10.0, places);
      floored = (long long) number;
      if (floored != 0) {
        write_char('.');
        int length = 0;
        for (int i = 0; i < places / 2; i++) {
          uint8_t lookup_value = lookup[floored % 100];
          floored /= 100;
          number_buffer[length++] = (lookup_value & 15) + '0';
          number_buffer[length++] = (lookup_value >> 4) + '0';
        }
        if (places % 2)
          number_buffer[length++] = floored + '0';
        assert(length == places);
        for (int i = places - 1; i >= 0; i--)
          write_char(number_buffer[i]);
      }
    }
    if (after)
      write_char(after);
  }
  void init() {
    // Make sure _flush_output() is called at the end of the program.
    bool exit_success = atexit(_flush_output) == 0;
    assert(exit_success);
    for (int i = 0; i < 100; i++)
      lookup[i] = (i / 10 << 4) + i % 10;
  }
}
int32_t main() {
  cin.tie(nullptr) -> sync_with_stdio(false);
  
  IO::init();
  using namespace IO;
  int n; read_int(n);
  using ld = long double;
  vector<ld> p(n + 1), s(n + 1);
  for (int i = 1; i <= n; ++i) {
    double x; read_double(x);
    p[i] = x;
    p[i] += p[i - 1];
  }
  for (int i = 0; i < n; ++i) {
    double x; read_double(x);
    s[i] = x;
  }
  for (int i = n - 1; i >= 0; --i) {
    s[i] += s[i + 1];
  }
  vector<ld> pa(n + 1), pb(n + 1);
  pa[n] = 1, pb[n] = 1;
  for (int i = 1; i < n; ++i) {
    ld sum = 1 + p[i] - s[i];
    ld sq = sqrt(sum * sum - 4 * p[i] + 1e-8);
    pa[i] = (sum + sq) / 2;
    pb[i] = (sum - sq) / 2;
  }
  for (int i = 1; i <= n; ++i) {
    write_double(pa[i] - pa[i - 1], ' ', 6);
  }
  write_char('\n');
  for (int i = 1; i <= n; ++i) {
    write_double(pb[i] - pb[i - 1], ' ', 6);
  }
  write_char('\n');
}
