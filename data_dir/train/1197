#include <bits/stdc++.h>
using namespace std;
using lld = int64_t;
const lld INF = 1LL<<62;

inline lld mul( lld a, lld b ) {
	if ( a > INF / b ) return INF;
	return a * b;
}

inline lld qPow( lld a, lld k ) {
	lld ret = 1;
	while ( k ) {
		if ( k & 1 ) ret = mul( ret, a );
		k >>= 1; a = mul( a, a );
	}
	return ret;
}

int main() {
	ios_base::sync_with_stdio( false );
	cin.tie( nullptr );
	int t; cin >> t;
	while ( t -- ) {
		int64_t n, k; cin >> n >> k;
		if ( qPow( 4, n ) - 1 < k * 3 ) {
			cout << "NO\n";
			continue;
		}
		if ( n == 2 and k == 3 ) {
			cout << "NO\n";
			continue;
		}
		int64_t num = 0, len = 2;
		while ( len - 1 <= k ) {
			k -= len - 1;
			len <<= 1; num++;
		}
		cout << "YES " << max( static_cast<int64_t>( 0 ), n - num ) << '\n';
	}
	return 0;
}
/*
1, 4, 16, 32, 64...
 S = 4^0 + 4^1 + 4^2 + ... + 4^{n-1}
4S =       4^1 + 4^2 + ... + 4^{n-1} + 4^{n}
--------------------------------------------
 S = (4^n - 4^0)/3
*/