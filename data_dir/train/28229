/**
* The New Programming Style
*
* Only for you, my friend
*
* By PloadyFree
* PloadyFree@gmail.com
*
* 2015
*/

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iterator>
#include <set>
#include <cmath>
#include <ctime>
#include <stack>
#include <fstream>
#include <array>
#include <map>

using namespace std; 
#pragma comment(linker, "/STACK:66777216")

#define all(a)      begin(a), end(a)
#define rall(a)     rbegin(a), rend(a)

typedef long double     ld;
typedef long long       ll;
typedef vector<ll>      vll;
typedef vector<int>     vi;
typedef vector<vi>      vvi;
typedef vector<bool>    vb;
typedef vector<vb>      vvb;
typedef pair<int, int>  pii;
typedef pair<ll, int>   pli;
typedef pair<int, ll>   pil;
typedef pair<ll, ll>    pll;
typedef vector<pii>     vpii;
typedef vector<string>  vs;
typedef vector <vector<char>> vvc;

void prepare(string s = "") {
#ifdef _DEBUG
    if (s.size() != 0) {
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    }
#else
    if (s.size() != 0) {
        freopen((s + ".in").c_str(), "r", stdin);
        freopen((s + ".out").c_str(), "w", stdout);
    }
#endif // _DEBUG
}

void pause() {
#ifdef _DEBUG
    cout << "\n\n"; system("pause"); cout << "\n\n";
#endif // _DEBUG
}

int nextN[4] = { -1, 0, +1, 0 };
int nextM[4] = { 0, +1, 0, -1 };

void recurs(int n, int m, vvc& pole, vvi& iWasHere, int rightNowIWasN, int rightNowIWasM) {
    for (int i = 0; i < 4; i++) {
        if ((iWasHere[n + nextN[i]][m + nextM[i]]) && (n + nextN[i] != rightNowIWasN) && (m + nextM[i] != rightNowIWasM)) {
            cout << "Yes";
            exit(0);
        }
        if ((n + nextN[i] == rightNowIWasN) && (m + nextM[i] == rightNowIWasM))
            continue;
        if (pole[n][m] == pole[n + nextN[i]][m + nextM[i]]) {
                iWasHere[n][m] = 1;

                recurs(n + nextN[i], m + nextM[i], pole, iWasHere, n, m);

                iWasHere[n][m] = 0;
        }
    }
}

void solve() {
    int n, m;
    cin >> n >> m;

    vector<vector<char> > pole(n + 2, vector<char>(m + 2, '$'));
    vector<vector<int> > iWasHere(n + 2, vector<int>(m + 2, 0));

    for (int i = 1; i < n + 1; i++)
        for (int j = 1; j < m + 1; j++)
            cin >> pole[i][j];

    for (int i = 1; i < n + 1; i++)
        for (int j = 1; j < m + 1; j++)
            recurs(i, j, pole, iWasHere, i, j);

    cout << "No";
}

int main() {
    prepare();
    solve();
    pause();
    return 0;
}