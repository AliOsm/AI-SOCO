//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i, n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n;
int a[10000005];
int p[1000005];
int res = 0;

int root(int x){
  return p[x] == x ? x : p[x] = root(p[x]);
}

void unite(int x, int y){
  if(x > 1e7 || y > 1e7) return;
  if(!a[x] || !a[y]) return;
  if(__gcd(x, y) > 1) return;
  x = a[x], y = a[y];
  x = root(x), y = root(y);
  if(x != y){
    p[y] = x;
    --res;
  }
}

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  scanf("%d", &n);
  for(int i = 1; i <= n; ++i){
    int x; scanf("%d", &x);
    a[x] = i;
    p[i] = i;
    ++res;
  }
  for(int i = 1; i <= 5000; ++i){
    for(int j = 1; j < i; ++j){
      int a = i * i - j * j, b = 2 * i * j, c = i * i + j * j;
      unite(a, b);
      unite(a, c);
      unite(b, c);
    }
  }
  printf("%d\n", res);
  return 0;
}
