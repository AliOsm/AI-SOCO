#include <bits/stdc++.h>

using namespace std;

const int N = 111;
const int L = 100010;

int firp[N], lstp[N];
bool can[L], park[L];
int l, b, f;
set <int> fir;
set <int> lst;

void update()
{
	int cur = 0;
	bool flag = false;
	for (int i = l - 1; i >= 0; --i)
	{
		can[i] = cur >= f || !flag;
		if (park[i])
			cur = 0, flag = true;
		else
			cur ++;
	}
}

int main()
{
	cin >> l >> b >> f;
	update();
	int n;
	cin >> n;
	int cnt = 0;
	for (int q = 0; q < n; ++q)
	{
		int t, x;
		cin >> t >> x;
		if (t == 1)
		{
			int cur = 0;
			bool flag = false;
			for (int i = 0; i <= l - x && !flag; ++i)
			{
				if ((cur >= b || i == 0) && can[i + x - 1])
				{
					auto it = fir.lower_bound(i);
					if (it != fir.end() && *it <= i + x - 1)
						goto hell;
					it = lst.lower_bound(i);
					if (it != lst.end() && *it <= i + x - 1)
						goto hell;
					for (int j = 0; j < x; ++j)
						park[i + j] = 1;
					firp[cnt] = i;
					lstp[cnt] = i + x - 1;
					fir.insert(i);
					lst.insert(i + x - 1);
					update();
					flag = true;
					cout << i << '\n';
				}
				hell:
				if (park[i])
					cur = 0;
				else
					cur ++;
			}
			if (!flag)
			{
				cout << "-1\n";
				firp[cnt] = lstp[cnt] = -1;
			}
		}
		else
		{
			x --;
			if (firp[x] == -1)
				continue;
			for (int i = firp[x]; i <= lstp[x]; ++i)
				park[i] = false;
			fir.erase(firp[x]);
			lst.erase(lstp[x]);
			update();
		}
		cnt ++;
	}
	return 0;
}