#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> PI;
struct DisjointSet{
	int par[1000010],size[1000010];
	inline void init(int n){
		for(int i=1;i<=n;i++){
			par[i]=i;
			size[i]=1;
		}
	}
	int find(int x){
		if(par[x]==x) return x;
		return par[x]=find(par[x]);
	}
	inline void unite(int x,int y){
		x=find(x),y=find(y);
		if(x==y) return;
		par[x]=y;
		size[y]+=size[x];
	}
	inline bool same(int u,int v){
		return find(u)==find(v);
	}
} dic;
vector<int> g[1000010];
int a[1000010];
PI sort_tmp[1000010];
int main(){
	int n,u,v;
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		scanf("%d",a+i);
		sort_tmp[i]=PI(a[i],i);
	}
	sort(sort_tmp+1,sort_tmp+1+n);
	for(int i=1;i<n;i++){
		scanf("%d%d",&u,&v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	ll ans=0;
	dic.init(n);
	for(int i=1;i<=n;i++){
		int u=sort_tmp[i].second;
		for(int v:g[u]){
			if(a[v]<=a[u] && !dic.same(u,v)){
				ans+=(ll)dic.size[dic.find(v)]*dic.size[dic.find(u)]*a[u];
				dic.unite(v,u);
			}
		}
	}
	dic.init(n);
	for(int i=n;i>=1;i--){
		int u=sort_tmp[i].second;
		for(int v:g[u]){
			if(a[v]>=a[u] && !dic.same(u,v)){
				ans-=(ll)dic.size[dic.find(v)]*dic.size[dic.find(u)]*a[u];
				dic.unite(v,u);
			}
		}
	}
	printf("%I64d\n",ans);
	return 0;
}