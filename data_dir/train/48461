/*
    STARK_BOY
*/
#include <bits/stdc++.h>
#include <fstream>
using namespace std;
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define repe(i,a,b) for(ll i=a;i<=b;i++)
#define bac(i,a,b) for(ll i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define F first
#define S second
typedef long long ll;
typedef vector< ll > vi;
typedef vector<pair<ll,ll> > vpii;
typedef pair<ll,ll> pii;
#define all(c) c.begin(),c.end()
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define setbitc(x) __builtin_popcount(x)
#define init(x,a) memset(x,a,sizeof(x))
#define INF 1000000000  
#define MOD 1000000007
#define MO 1000000006
#define M 998244353
#define PI           3.14159265358979323846  /* pi */
mt19937 rng32(chrono::steady_clock::now().time_since_epoch().count());

ll modExpo(ll x,ll n)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return modExpo((x*x)%MOD,n/2);
    else                             //n is odd
        
        return (x*modExpo((x*x)%MOD,(n-1)/2))%MOD;

}
ll modInverse(ll n) 
{ 
    return modExpo(n,MOD-2); 
}
#define N 300005
//Variables Start   
ll n,m,k,ar[N],vis[N];
string s,s1;
vi v;
//Variables End

string findSum(string str1, string str2) 
{ 
    // Before proceeding further, make sure length 
    // of str2 is larger. 
    if (str1.length() > str2.length()) 
        swap(str1, str2); 
  
    // Take an empty string for storing result 
    string str = ""; 
  
    // Calculate length of both string 
    int n1 = str1.length(), n2 = str2.length(); 
  
    // Reverse both of strings 
    reverse(str1.begin(), str1.end()); 
    reverse(str2.begin(), str2.end()); 
  
    int carry = 0; 
    for (int i=0; i<n1; i++) 
    { 
        // Do school mathematics, compute sum of 
        // current digits and carry 
        int sum = ((str1[i]-'0')+(str2[i]-'0')+carry); 
        str.push_back(sum%10 + '0'); 
  
        // Calculate carry for next step 
        carry = sum/10; 
    } 
  
    // Add remaining digits of larger number 
    for (int i=n1; i<n2; i++) 
    { 
        int sum = ((str2[i]-'0')+carry); 
        str.push_back(sum%10 + '0'); 
        carry = sum/10; 
    } 
  
    // Add remaining carry 
    if (carry) 
        str.push_back(carry+'0'); 
  
    // reverse resultant string 
    reverse(str.begin(), str.end()); 
  
    return str; 
} 
bool comp(string s1,string s2)
{
    if(s1.length()==s2.length())return s1<s2;
    else return s1.length()<s2.length();
}
int main()
{
    ios
    int ti=1;
    //cin>>ti;
    while(ti--)
    {
        cin>>n;
        cin>>s;
        if(n&1)
        {
            ll l=n/2;
            ll r=l+1;
            string temp1="",temp2="";
            while(1)
            {
                if(s[l]=='0' && s[r]=='0'){l--;r++;continue;}
                if(s[l]!='0')
                {
                    //cout<<s.substr(0,l)<<" "<<s.substr(l)<<endl;
                    temp1=findSum(s.substr(0,l),s.substr(l));
                }
                if(s[r]!='0')
                {
                    temp2=findSum(s.substr(0,r),s.substr(r));   
                }
                if(temp1.empty())cout<<temp2;
                else if(temp2.empty())cout<<temp1;
                else if(temp1<temp2)cout<<temp1;
                else cout<<temp2;
                return 0;
            }
        }
        else
        {
            ll l=n/2;
            if(s[l]!='0'){cout<<findSum(s.substr(0,l),s.substr(l));return 0;}
            ll r=l+1;
            l--;
            string temp1="",temp2="";
            while(1)
            {
                if(s[l]=='0' && s[r]=='0'){l--;r++;continue;}
                if(s[l]!='0')
                {
                    temp1=findSum(s.substr(0,l),s.substr(l));
                }
                if(s[r]!='0')
                {
                    temp2=findSum(s.substr(0,r),s.substr(r));   
                }
                if(temp1.empty())cout<<temp2;
                else if(temp2.empty())cout<<temp1;
                else if(temp1<temp2)cout<<temp1;
                else cout<<temp2;
                return 0;
            }
        }

    }
    return 0;
        
}