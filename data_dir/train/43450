#include<bits/stdc++.h>
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#include <sstream>
#include<iostream>
#include<algorithm>
#include<vector>
#include<set>
#include<ctime>
#include<cmath>
#include<map>
#include<unordered_map>
#include<stack>
#include<random>
#include<queue>
#include<list>
#include<math.h>
#include<bitset>
#include<fstream>
#include <bits/extc++.h>
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>,
rb_tree_tag, tree_order_statistics_node_update>;

#define ll long long int
#define ld long double
#define key pair<ld,ld>
#define ii pair<int,int>
#define si set<int>
#define vii vector<pair<int,int> >
#define vi vector<int>
#define vll vector<ll>
#define vb vector<bool>
#define vvi vector<vector<int> >
#define vs vector<string>
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define nu 100001
#define mul(x,y) ((ll)(x)*(y))%mod
#define tr(c,i) for(auto i = (c).begin(); i != (c).end(); i++)
#define fastio  ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define forn(i, n) for (int i = 0; i < int(n); i++)


const ll INF=9223372036854775807;
const ll mod=1e9+7;

ll  max3(ll  a,ll  b, ll  c)
{
    return max(c,max(a,b));
}
ll min3(ll  a,ll  b,ll  c)
{
    return min(a,min(b,c));
}
ll  power(ll  x,ll  y,ll mod1)
{
    ll res = 1;
    while (y > 0)
    {
        if (y & 1)
            res = (res*x)%mod1;
        y = y>>1;
        x = (x*x)%mod1;
    }
    return res;
}
ll  power1(ll  x,ll  y)
{
    ll res = 1;
    while (y > 0)
    {
        if (y & 1)
            res = (res*x);
        y = y>>1;
        x = (x*x);
    }
    return res;
}
ll logg(ll  a)
{
    ll  x=0;
    while(a>1)
    {
        x++;
        a/=2;
    }
    return x;
}
ll  gcd(ll  a,ll   b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}
ll abso(ll x)
{
    if(x<0)
    {
        return -x;
    }
    return x;
}
ll ceiling (ll  a,ll  b)
{
    if(a%b==0)
    {
        return a/b;
    }
    else
    {
        return a/b+1;
    }
}
ll modinv(ll x,ll p)
{
    return power(x,p-2,p);
}
struct point
{
    ll x;ll y;
};
ll cross(point a,point b)
{
    return a.x*b.y-b.x*a.y;
}
bool ccw1(point p1,point p2)
{
    /* point n1;n1.x=p1.x-p0.x;n1.y=p1.y-p0.y;
     point n2;n2.x=p2.x-p0.x;n2.y=p2.y-p0.y;*/
    if(cross(p1,p2)>0)
    {
        return true;
    }
    else
    {
        return false;
        //No need to worry about cross=0 case in this question;
    }
}
bool comp(point p1,point p2)
{
    if(p1.x<p2.x)
    {
        return true;
    }
    else
    {
        if(p1.x>p2.x)
        {
            return false;
        }
        else
        {
            if(p1.y<=p2.y)
            {
                return true;
            }
            return false;
        }
    }
}
long long ccw(point p1, point p2, point p3)
{
    // See 10th slides from following link for derivation
    // of the formula
    ll val = (p2.y - p1.y) * (p3.x - p2.x) -
              (p2.x - p1.x) * (p3.y - p2.y);
  
   /* if (val == 0) return 0;  // colinear
  
    return (val > 0)? 1: 2; // clock or counterclock wise*/
    return val;
}

void ccw_sort(vector<point> &v)
{
    vector<point> v1,v2;
    for(int i=0;i<v.size();i++)
    {
        if(v[i].y>0)
        {
            v1.push_back(v[i]);
        }
        else
        {
            v2.push_back(v[i]);
        }
    }
    sort(all(v1),ccw1);
    sort(all(v2),ccw1);
    for(int i=0;i<v2.size();i++)
    {
        v1.push_back(v2[i]);
    }
    v=v1;
}
//Type cast .size() etc. to int or long long int
//Always assume there is an empty subtree in tree stuff like centroid decomp etc.
int main()
{
    fastio;
    int n;
    cin>>n;
    vll x(n);
    for(int i=0;i<n;i++)
    {
        cin>>x[i];
    }
    vll v(n);vector<pair<ll,ll>> g;
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
        g.push_back(mp(v[i],x[i]));
    }
    sort(all(g));
    ordered_set<int> g1;ll ans=0;
    for(ll i=0;i<n;i++)
    {
        if(i>0)
        {
            ll cur=(ll)g1.order_of_key(g[i].s);
            ans=ans+(cur)*g[i].s;
        }
        g1.insert(g[i].s);
    }
    reverse(all(g));
    ordered_set<int> g2;
    for(ll i=0;i<n;i++)
    {
        if(i>0)
        {
            ll cur=(ll)g2.order_of_key(g[i].s+1);
            ans=ans-(i-cur)*g[i].s;
        }
        g2.insert(g[i].s);
    }
    /*
    map<ll,vector<ll>> g;
    for(int i=0;i<n;i++)
    {
        g[v[i]].push_back(x[i]);
    }
    ll ans=0;
    for(auto it=g.begin();it!=g.end();it++)
    {
        sort(all((*it).s));
        ll cnt=0;
        ll sm=0;
        for(int j=0;j<(*it).s.size();j++)
        {
            ans=ans+(((*it).s)[j]*cnt-sm);
            cnt++;
            sm+=(*it).s[j];
        }
    }
    vector<ll> v1,v2;ll sm2=0;
    for(int j=0;j<n;j++)
    {
        if(v[j]<0)
        {
            v1.push_back(x[j]);
        }
        else
        {
            if(v[j]>0){
            v2.push_back(x[j]);
            sm2+=x[j];
            }
        }
    }
    sort(all(v1));sort(all(v2));ll j=0;ll sm1=0;
    for(ll i=0;i<(ll)v1.size();i++)
    {
        while(j<v2.size()&&v2[j]<v1[i])
        {
            j++;
            sm1+=v2[j];
        }
        ans=ans+j*v1[i]-sm1+sm2-sm1-((ll)v2.size()-j)*v1[i];
    }*/
    cout<<ans<<endl;
    
}
