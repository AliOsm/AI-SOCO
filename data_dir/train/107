#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <algorithm>
#include <iterator>
#include <stdio.h>
#include <stdint.h>
using namespace std;

struct task
{
    void solve()
    {
        int64_t inf = 100000000000000000;
        int n, m, s = 0;
        scanf("%d%d", &n, &m);
        vector<vector<pair<int, int>>> g(n);
        for (int i = 0; i != m; ++i)
        {
            int v, u, w;
            scanf("%d%d%d", &v, &u, &w);
            --v, --u;
            g[v].push_back(make_pair(u, w));
            g[u].push_back(make_pair(v, w));
        }
        vector<int64_t> d(n, inf);
        vector<int> p(n);
        d[s] = 0;
        auto cmp = [&](int l, int r)
        {
            return make_pair(d[l], l) < make_pair(d[r], r);
        };
        set<int, decltype(cmp)> q(cmp);
        q.insert(0);
        while (!q.empty())
        {
            int v = *q.begin();
            q.erase(q.begin());
            for (size_t i = 0; i < g[v].size(); ++i)
            {
                int to = g[v][i].first, len = g[v][i].second;
                if (d[v] + len < d[to])
                {
                    q.erase(to);
                    d[to] = d[v] + len;
                    p[to] = v;
                    q.insert(to);
                }
            }
        }
        if (d[n - 1] == inf)
        {
            printf("-1\n");
        }
        else
        {
            vector<int> path;
            for (int v = n - 1; v != s; v = p[v])
                path.push_back(v + 1);
            path.push_back(s + 1);
            for (int i = (int)path.size() - 1; i >= 0; --i)
            {
                printf("%d ", path[i]);
            }
        }
    }
};

int main(void)
{
    ios_base::sync_with_stdio(false);
    task().solve();
    return 0;
}