//#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
           
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
           
using namespace std;
using namespace __gnu_pbds;
           
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
           
using matrix = vector<vector<ll>>;
template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
           
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
//#define int long long;
           
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("kek.in", "r", stdin);
    //freopen("kek.out", "w", stdout);
    #endif
}

const int MAXN = 1020;
vector<int> g[MAXN];
int comp[MAXN], cnt[MAXN], sz[MAXN];
bool used[MAXN], s[MAXN], kek[MAXN];

void dfs(int u, int id) {
    used[u] = true;
    comp[u] = id;
    sz[id]++;
    for (int to : g[u]) {
        if (!used[to]) {
            dfs(to, id);
        }
    }
}

signed main() {
    FAST_IO(); 
    int n, m, k;
    cin >> n >> m >> k;
    for (int i = 0; i < k; ++i) {
        int u;
        cin >> u;
        u--;
        s[u] = true;
    }
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        u--;
        v--;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    int id = 0;
    for (int i = 0; i < n; ++i) {
        if (!used[i]) {
            dfs(i, id++);
        }
    }
    for (int i = 0; i < n; ++i) {
        if (s[i]) {
            kek[comp[i]] = true;
        }
        for (int to : g[i]) {
            if (i < to) {
                cnt[comp[i]]++;
            }
        }
    } 
    int ans = 0;
    int dimas1 = 0, dimas2 = 0;
    int pos = -1;
    for (int i = 0; i < id; ++i) {
        if (kek[i] && (pos == -1 || sz[i] > sz[pos])) {
            pos = i;
        }
        if (!kek[i]) {
            dimas1 += sz[i];
            dimas2 += cnt[i];
        }
        else {
            ans += (sz[i] * (sz[i] - 1)) / 2 - cnt[i];
        }
    }
    ans -= (sz[pos] * (sz[pos] - 1)) / 2 - cnt[pos];
    dimas1 += sz[pos];
    dimas2 += cnt[pos];
    ans += (dimas1 * (dimas1 - 1)) / 2 - dimas2;
    cout << ans << '\n';
} 