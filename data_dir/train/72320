#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
#include <stack>
#include <vector>
#include <queue>
#include <functional>
#include <stdio.h>
#include <map>
#include <algorithm>
#include <set>
#include <string>
#include <cstring>
#include <sstream>
#include <cmath>
#include <iomanip>
#include <cstdio>
#include <numeric>
#include <utility>

using namespace std;

typedef long long ll;
typedef unsigned int uint;
#define sc(x)           scanf("%d",&x)
#define all(v)				((v).begin()), ((v).end())
#define sz(v)				(v.size())
#define clr(v, d)			memset(v, d, sizeof(v))
#define rep(i, v)		for(int i=0;i<sz(v);++i)
#define lop(i, n)		for(int i=0;i<n;++i)
#define lpi(i, j, n)	for(int i=(j);i<(int)(n);++i)
#define lpd(i, j, n)	for(int i=(j);i>=(int)(n);--i)
#define repa(v)				lpi(i, 0, sz(v)) lpi(j, 0, sz(v[i]))
#define pb					push_back
#define MP					make_pair
#define mem(x,d)			memset(x,d,sizeof(x))
const int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
const int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
const int N = 100005;
vector<int>adj[N]; bool vis[N]; int mx,node;
void dfs(int cur,int cnt=0)
{
	vis[cur] = 1;
	for (int i = 0; i < sz(adj[cur]); ++i)
	{
		int c = adj[cur][i];
		if (!vis[c]) dfs(c,cnt+1);		
	}
	if (cnt > mx) node = cur,mx = cnt;
}
int main()
{
	//#ifndef ONLINE_JUDGE
		//freopen("input.txt", "r", stdin);
		//freopen("output.txt", "w", stdout);
	//#endif
	int n, u, v, m; sc(n); sc(m);
	for (int i = 0; i < m; ++i) sc(u), sc(v), adj[u].push_back(v), adj[v].push_back(u);
	dfs(1); mem(vis, 0);
	mx = 0;
	dfs(node); printf("%d", mx);
	return 0;
}