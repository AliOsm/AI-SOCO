#include <vector>
#include <map>
#include <numeric>
#include <queue>
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cassert>
#include <cstring>
#include <algorithm>
#include <ctime>
#include <stack>
using namespace std;
typedef long long ll;
#define REP(i,n) for(int i=0;i<(n);i++)
const double EPS=1e-7;

int n,k;
vector<int> c;

const int MAXN=512;

char dp[MAXN][MAXN][MAXN];
//
//int solve(int cnt, int left1, int left2)
//{
//	if(left1<0 || left2<0)
//		return false;
//	if(cnt==-1)
//		return left1==0 && left2==0;
//	char& res=dp[cnt][left1][left2];
//	if(res==-1)
//	{
//		res=false;
//		res|=solve(cnt-1, left1, left2);
//		res|=solve(cnt-1, left1-c[cnt-1], left2);
//		res|=solve(cnt-1, left1-c[cnt-1], left2-c[cnt-1]);
//	}
//	return res;
//}

int main()
{
	scanf("%d%d",&n,&k);
	c.resize(n);
	REP(i,n)
		scanf("%d",&c[i]);
	vector<int> res;
	dp[0][0][0]=1;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<=k;j++)
			for(int l=0;l<=k;l++)
				if(dp[i][j][l])
				{
					dp[i+1][j][l]=true;
					if(j+c[i]<=k)
					{
						dp[i+1][j+c[i]][l]=true;
						if(l+c[i]<=k)
						{
							dp[i+1][j+c[i]][l+c[i]]=true;
						}
					}
				}
	}
	for(int i=0;i<=k;i++)
		if(dp[n][k][i])
			res.push_back(i);
	printf("%u\n",res.size());
	REP(i,res.size())
		printf("%d ",res[i]);
	puts("");
	return 0;
}
