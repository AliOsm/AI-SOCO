//██████╗ ██╗   ██╗██╗      ██████╗ ███████╗
//██╔══██╗██║   ██║██║      ██╔══██╗██╔════╝
//██████╔╝██║   ██║██║█████╗██║  ██║█████╗
//██╔══██╗██║   ██║██║╚════╝██║  ██║██╔══╝
//██║  ██║╚██████╔╝██║      ██████╔╝███████╗
//╚═╝  ╚═╝ ╚═════╝ ╚═╝      ╚═════╝ ╚══════╝
#include <bits/stdc++.h>

// #pragma GCC target("sse,sse2,sse3,ssse3,sse4")
#pragma GCC optimize("Ofast")
// #pragma GCC optimize("unroll-loops")
using namespace std;

#define fst first
#define snd second
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define eb emplace_back

#define all(v) (v).begin(), (v).end()
#define sz(v) ((int)(v).size())
#define sqr(x) ((x) * (x))

#define ADD_OPERATORS_IN(T, COMP) \
    bool operator < (const T& ot) const { return COMP(ot) == -1; } \
    bool operator > (const T& ot) const { return COMP(ot) == 1; } \
    bool operator == (const T& ot) const { return COMP(ot) == 0; } \
    bool operator != (const T& ot) const { return COMP(ot) != 0; }

#define ADD_OPERATORS_OUT(T, COMP) \
    bool operator < (const T& a, const T& b) const { return COMP(a, b) == -1; } \
    bool operator > (const T& a, const T& b) const { return COMP(a, b) == 1; } \
    bool operator == (const T& a, const T&b) const { return COMP(a, b) == 0; } \
    bool operator != (const T& a, const T&b) const { return COMP(a, b) != 0; }


typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef vector<int> vi;

#define next ajksdslk
#define prev aklsfjk

mt19937_64 mt_rand(chrono::system_clock::now().time_since_epoch().count());

template<typename T1, typename T2> inline bool upmax(T1& a, T2 b) { return (a < b ? (a = b, true) : false); }
template<typename T1, typename T2> inline bool upmin(T1& a, T2 b) { return (b < a ? (a = b, true) : false); }

const int maxn = (int) 2e5 + 100;
const int maxlog = 21;
// const int base = (int) 1e9 + 7;
const ld eps = (ld) 1e-9;
const ld PI = acos(-1.);
//const int pp = 41;
const int inf = 1e9;
const ll llinf = 1e18;


int n, m, k, q;

int le[maxn], ri[maxn];
int r[maxn], c[maxn];
map<int, int> szh;
int obr[maxn];
int sz = 0;

vector<int> g[maxn];
set<int> b;

ll f[maxn][2];

ll dist(int x1, int y1, int x2, int y2) {
  if (x1 == x2) {
    return abs(y1 - y2);
  }
  auto it = b.lower_bound(y1);
  ll ans = llinf;
  if (it != b.end()) {
    upmin(ans, abs(y1 - *it) + abs(y2 - *it) + x2 - x1);
  }

  if (it != b.begin()) {
    --it;
    upmin(ans, abs(y1 - *it) + abs(y2 - *it) + x2 - x1);
  }
  return ans;
}

int main() {
  // freopen("input.txt", "r", stdin);
  ios_base::sync_with_stdio(0);
  cin.tie(nullptr);

  cin >> n >> m >> k >> q;

  for (int i = 0; i < k; i ++) {
    cin >> r[i] >> c[i];
    szh[r[i]] = 42;
  }
  for (auto & it : szh) {
    it.snd = sz;
    obr[sz] = it.fst;
    sz++;
  }

  for (int i = 0 ; i < k; i ++) {
    g[szh[r[i]]].pb(c[i]);
  }
  for (int i = 0; i < sz; i ++) {
    sort(all(g[i]));
  }
  for (int i = 0; i < q; i ++) {
    int x; cin >> x; b.insert(x);
  }
  ll curD = g[0].back() - g[0].front();
  f[0][1] = dist(1, 1, obr[0], g[0].front()) + curD;
  f[0][0] = dist(1, 1, obr[0], g[0].back()) + curD;

  for (int i = 0; i + 1 < sz; i ++) {
    ll nxtD = g[i + 1].back() - g[i + 1].front();
    ll d1 = dist(obr[i], g[i].front(), obr[i + 1], g[i + 1].back()) + nxtD;
    ll d2 = dist(obr[i], g[i].back(), obr[i + 1], g[i + 1].back()) + nxtD;
    f[i + 1][0] = min(d1 + f[i][0], d2 + f[i][1]);
    d1 = dist(obr[i], g[i].front(), obr[i + 1], g[i + 1].front()) + nxtD;
    d2 = dist(obr[i], g[i].back(), obr[i + 1], g[i + 1].front()) + nxtD;
    f[i + 1][1] = min(d1 + f[i][0], d2 + f[i][1]);
  }
  cout << min(f[sz - 1][0], f[sz - 1][1]) << '\n';

  return 0;
}

