#include <bits/stdc++.h>

using namespace std;

#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define REV(i,j,k) for(int i=j;i>=k;i--)
#define FORR(i,j,k,l) for(int i=j;i<=k;i+=l)
#define inf         freopen("in.txt", "r", stdin)
#define outf        freopen("out.txt", "w", stdout)
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c)    scanf("%d %d %d", &a, &b, &c)
#define clean(mat,n)   FOR(i,0,n) mat[i].clear()
#define minn          (long long)-1000000000000000000
#define maxx          (long long) 1000000000000000000
#define mod          1000000007
#define M_PI           3.14159265358979323846  /* pi */
#define LL           long long
#define NL '\n'
#define cnd tree[idx]
#define lnd (idx<<1)
#define rnd ((idx<<1)+1)
#define PB push_back
#define F first
#define S second
#define MAX 200010
#define MP make_pair
#define valid(nx,ny)  ((nx >= 0) && (nx < row) && (ny >= 0) && (ny < col))
typedef pair<int,int> pii;
typedef pair<pii,int> piii;

const int IT_MAX = 1 << 18;
const int INF = -1;

LL bit[IT_MAX + 10];
void update(int p, LL dv) ///change value of position p to v
{
	for (; p <= IT_MAX; p += p & (-p)) bit[p] += dv;
}
LL query(int p)
{
	LL rv = 0;
	for (; p; p -= p & (-p)) rv += bit[p];
	return rv;
}
int largerpos(LL v)
{
	if (bit[IT_MAX] <= v) return INF;

	LL p = 0;
	LL s = 0;
	for (int i = 17; i >= 0; i--) {
		if (s + bit[p + (1 << i)] <= v) {
			s += bit[p + (1 << i)];
			p |= (1 << i);
		}
	}
	return p + 1;
}

LL value(int p)
{
    return query(p) - query(p - 1);
}


LL ara[MAX], bra[MAX], prin, org[MAX];
piii vovo[MAX];

LL getVal()
{
    LL ret = 0, p, t;

    cin >> p >> t; p = org[p];

    while(t)
    {
        if(value(p) >= t)
        {
            ret += t * bra[p];
            update(p, -t);
            return ret;
        }
        else
        {
            LL x = value( p );
            ret += x * bra[p];
            update(p, -x);
            t -= x;
        }

        p = largerpos( 0 );
        if(p == -1) return 0;
    }
}


int main()
{
    ios::sync_with_stdio(false);
    //inf;
    //outf;
    int n, m;

    cin >> n >> m;
    FOR(i,1,n) cin >> ara[i];
    FOR(i,1,n) cin >> bra[i];

    FOR(i,1,n) vovo[i] = MP(MP(bra[i], ara[i]), i);
    sort(vovo, vovo + n + 1);
    FOR(i,1,n) ara[i] = vovo[i].F.S, bra[i] = vovo[i].F.F;

    FOR(i,1,n) org[ vovo[i].S ] = i;

    FOR(i,1,n) update(i, vovo[i].F.S);
    FOR(i,0,m-1)
    {
        cout << getVal() << endl;
//        FOR(i,1,n) cout << value( i ) << ' ';
//        cout << endl;
    }

    return 0;
}