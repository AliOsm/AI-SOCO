#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;

const int maxn = 1e3 + 4;
char arr[maxn][maxn];
int n, m, t;
ll sp[maxn][maxn];
int x[] = { -1, 0, 1, 0}, y[] = {0, 1, 0, -1};
set<pair<int, pair<int, int>>> s;
const ll infy = 2e18;
int main()
{
	fastread;
	cin >> n >> m >> t;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			cin >> arr[i][j];
			sp[i][j] = infy;
			if (i != 1 && arr[i][j] == arr[i - 1][j]) {
				sp[i][j] = 0;
				sp[i - 1][j] = 0;
				s.insert({0, {i - 1, j}});
				s.insert({0, {i, j}});
			}
			if (j != 1 && arr[i][j] == arr[i][j - 1]) {
				sp[i][j] = 0;
				sp[i][j - 1] = 0;
				s.insert({0, {i, j - 1}});
				s.insert({0, {i, j}});
			}
		}
	}
	while (!s.empty()) {
		pair<int, pair<int, int>> cur = *s.begin();
		s.erase(s.begin());
		if (cur.x > sp[cur.y.x][cur.y.y])
			continue;
		for (int i = 0; i < 4; i++) {
			int ntx = cur.y.x + x[i];
			int nty = cur.y.y + y[i];
			if (ntx < 1 || ntx > n || nty < 1 || nty > m)
				continue;
			if (sp[ntx][nty] <= (cur.x + 1))
				continue;
			sp[ntx][nty] = cur.x + 1;
			s.insert({cur.x + 1, {ntx, nty}});
		}
	}
	while (t--) {
		ll i, j, p;
		cin >> i >> j >> p;
		if (sp[i][j] >= p)
			cout << arr[i][j] << '\n';
		else
			cout << ((char)((arr[i][j] - '0') ^ ((p - sp[i][j]) % 2) + '0')) << '\n';
	}
	return 0;
}