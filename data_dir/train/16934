#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 1003;
typedef vector<int> node;
vector<node> t;
vector<int> id;
string s, cs;
int n, m;
ll k;
int lex[N][N];
void insert()
{
    int cur = 0;
    for (auto c : cs)
    {
        c -= 'a';
        if (t[cur][c] == -1)
        {
            t[cur][c] = t.size();
            t.push_back(node(26, -1));
            id.push_back(-1);
        }
        cur = t[cur][c];
    }
}
int cid = 0;
void DFS(int u)
{
    if (u)
        id[u] = cid++;
    for (int i = 0; i < 26; ++i)
        if (t[u][i] != -1)
        {
            DFS(t[u][i]);
        }
}
int res;
void print(int u)
{
    if (id[u] == res)
    {
        cout << cs << endl;
        exit(0);
    }
    for (int i = 0; i < 26; ++i)
        if (t[u][i] != -1)
        {
            cs += char(i + 'a');
            print(t[u][i]);
            cs.pop_back();
        }
}
int nxt[N];
ll dp[N][N];
const ll oo = 2e18;
ll calc(int L)
{
    for (int i = 0; i < n; ++i)
    {
        nxt[i] = n;
        for (int j = i; j < n; ++j)
            if (lex[i][j] >= L)
            {
                nxt[i] = j;
                break;
            }
    }
    for (int g = 1; g <= m; ++g)
    {
        for (int i = n - 1; i >= 0; --i)
        {
            if (g == 1)
            {
                dp[g][i] = lex[i][n - 1] >= L;
                continue;
            }
            dp[g - 1][i] = min(oo, dp[g - 1][i] + dp[g - 1][i + 1]);
            dp[g][i] = dp[g - 1][nxt[i] + 1];
        }
    }
    return dp[m][0];
}
int main()
{
    t.push_back(node(26, -1));
    id.push_back(-1);
    cin >> n >> m >> k;
    cin >> s;
    for (int i = 0; i < s.size(); ++i)
    {
        cs = s.substr(i);
        insert();
    }
    DFS(0);
    for (int i = 0; i < n; ++i)
    {
        int cur = 0;
        for (int j = i; j < n; ++j)
        {
            char c = s[j] - 'a';
            cur = t[cur][c];
            lex[i][j] = id[cur];
        }
    }
    int l = 0, r = cid - 1, mid;
    res = cid;
    while (l <= r)
    {
        mid = (l + r) / 2;
        if (calc(mid) < k)
        {
            res = mid;
            r = mid - 1;
        }
        else
        {
            l = mid + 1;
        }
    }
    --res;
    cs = "";
    print(0);
    return 0;
}