#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl

const int maxn = 1e6 + 5;

int n, m;
vector<string> g;
vector<vector<int>> dp;


int rq(int x, int y, int side) {
  int res = dp[x][y];
  if (x-side>=0) res-=dp[x-side][y];
  if (y-side>=0) res-=dp[x][y-side];
  if (x-side>=0 && y-side>=0) res+=dp[x-side][y-side];
  return res;
}


pair<bool, vector<string>> go(int t) {
  vector<string> res(n);
  vector<string> origins(n);
  for (int i=0; i<n; i++) res[i] = string(m, '.');
  for (int i=0; i<n; i++) origins[i] = string(m, '.');
  queue<pair<int,pair<int,int>>> qq;
  for (int i=0; i<n; i++) {
    for (int j=0; j<m; j++) {
      int side = 2*t+1;
      int area = side*side;
      if (rq(i,j,side) == area) {
	origins[i-side/2][j-side/2] = 'X';
	qq.push({0, {i-side/2,j-side/2}});
      }
    }
  }

  while (qq.size()) {
    auto cur = qq.front(); qq.pop();
    int T = cur.first; int x = cur.second.first; int y = cur.second.second;
    if (T>t || x<0 || x>=n || y<0 || y>=m || res[x][y]=='X') continue;
    res[x][y] = 'X';
    for (int dx=-1; dx<=1; dx++) {
      for (int dy=-1; dy<=1; dy++) {
	qq.push({T+1,{x+dx,y+dy}});
      }
    }
    
  }

  bool same = true;
  for (int i=0; i<n; i++) {
    if (res[i] != g[i]) {
      same = false; break;
    }
  }

  return {same, origins};
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);

  cin>>n>>m;
  g.resize(n);
  dp.resize(n);
  for (int i=0; i<n; i++) {
    cin>>g[i];
    dp[i].resize(m);
    for (int j=0; j<m; j++) {
      dp[i][j] = (g[i][j] == 'X');
    }
  }

  
  for (int i=0; i<n; i++) {
    for (int j=0; j<m; j++) {
      if (i) dp[i][j] += dp[i-1][j];
      if (j) dp[i][j] += dp[i][j-1];
      if (i && j) dp[i][j] -= dp[i-1][j-1];
    }
  }


  int ans = 0;
  vector<string> gans = g;

  int lo = 0;
  int hi = n*m;
  while (hi - lo > 1) {
    int mid = hi+lo>>1;

    auto res = go(mid);
    if (res.first) {
      lo = mid;
      ans = mid; gans = res.second;
    } else {
      hi = mid;
    }
  }

  cout<<ans<<endl;
  for (auto x: gans) {
    cout<<x<<"\n";
  }

  return 0;
}
// don't forget to read in the input :^)
