/*
 _     _                             
| |__ | |__   __ _  __ _ _   _  __ _ 
| '_ \| '_ \ / _` |/ _` | | | |/ _` |
| |_) | | | | (_| | (_| | |_| | (_| |
|_.__/|_| |_|\__,_|\__, |\__, |\__,_|
                   |___/ |___/       
*/
#include<bits/stdc++.h>

#define ll          long long
#define pb          push_back
#define ppb         pop_back
#define	endl		'\n'
#define mii         map<ll int,ll int>
#define msi         map<string,ll int>
#define mis         map<ll int, string>
#define mpi         map<pair<ll int,ll int>,ll int>
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define vs          vector<string>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define what_is(x)  cerr << #x << " is " << x << endl;
using namespace std;

#define N  100005

ll int a[N],seg[4*N];
ll int k[N],prefix[N],prefix_i[N];
pii lazy[4*N]; //  { idx , val }

void build(ll int node,ll int start,ll int end){
	lazy[node]={0,0};
    if(start==end){
        seg[node]=a[start];
        return;
    }
    ll int mid=(start+end)>>1;
    build(node<<1,start,mid);
    build(node<<1|1,mid+1,end);
    seg[node]=seg[node<<1]+seg[node<<1|1];
}

ll int sum(ll int l,ll int r,pii p)
{
	ll int num=r-l+1;
	ll int ret=p.S*num;
	ret+=num*(prefix[l-1]-prefix[p.F-1]);
	ret+=(num-1)*(prefix[r-1]-prefix[l-1])-((prefix_i[r-1]-prefix_i[l-1])-l*(prefix[r-1]-prefix[l-1]));
	// for(ll int i=l;i<=r;i++)
	// {
	// 	ret+=prefix[i-1]-prefix[p.F-1];
	// }
	return ret;
}

void update(ll int node,ll int start,ll int end,ll int l,ll int r,ll int idx,ll int val){ // val = a[idx]+x
    if(lazy[node]!=mp(0ll,0ll)){
    	seg[node]=sum(start,end,lazy[node]);
        // seg[node]+=(end-start+1)*lazy[node];
        if(start!=end){
            lazy[node<<1]=lazy[node];
            lazy[node<<1|1]=lazy[node];
        }
        lazy[node]={0,0};
    }
    if(start>end || start>r || end<l) return;
    if(l<=start && end<=r){
    	pii tmp={idx,val};
        seg[node]=sum(start,end,tmp);
        if(start!=end){
            lazy[node<<1]=tmp;
            lazy[node<<1|1]=tmp;
        }
        return;
    }
    ll int mid=(start+end)>>1;
    update(node<<1,start,mid,l,r,idx,val);
    update(node<<1|1,mid+1,end,l,r,idx,val);
    seg[node]=seg[node<<1]+seg[node<<1|1];
}

ll int query(ll int node,ll int start,ll int end,ll int l,ll int r)
{
    if(start>end || start>r || end<l) return 0;
    if(lazy[node]!=mp(0ll,0ll)){
    	seg[node]=sum(start,end,lazy[node]);
        // seg[node]+=(end-start+1)*lazy[node];
        if(start!=end){
            lazy[node<<1]=lazy[node];
            lazy[node<<1|1]=lazy[node];
        }
        lazy[node]={0,0};
    }
    if(start>=l && end<=r) return seg[node];
    ll int mid=(start+end)>>1;
    ll int q1=query(node<<1,start,mid,l,r);
    ll int q2=query(node<<1|1,mid+1,end,l,r);
    return q1+q2;
}

void init(ll int n)
{
	prefix_i[0]=prefix[0]=0;
	for(ll int i=1;i<n;i++)
	{
		prefix[i]=prefix[i-1]+k[i];
		prefix_i[i]=prefix_i[i-1]+k[i]*i;
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		ll int n;
		cin>>n;
		for(ll int i=1;i<=n;i++)
		{
			cin>>a[i];
		} 
		for(ll int i=1;i<n;i++)
		{
			cin>>k[i];
		}
		init(n);
		build(1,1,n);
		int q;
		cin>>q;
		// cout<<"> ";for(int i=1;i<=n;i++) cout<<query(1,1,n,i,i)<<" "; cout<<endl;
		while(q--)
		{
			char c;
			cin>>c;
			if(c=='+')
			{
				ll int i,x;
				cin>>i>>x;
				ll int val=query(1,1,n,i,i)+x;
				ll int low=i,high=n;
				ll int ans=-1;
				while(low<=high)
				{
					ll int mid=(low+high)/2;
					ll int tmp=prefix[mid-1]-prefix[i-1];
					if(tmp+query(1,1,n,i,i)+x>query(1,1,n,mid,mid))
					{
						ans=mid;
						low=mid+1;
					}
					else
					{
						high=mid-1;
					}
				}
				// cout<<"#  "<<ans<<" "<<val<<endl;
				update(1,1,n,i,ans,i,val);
				// cout<<"> ";for(int i=1;i<=n;i++) cout<<query(1,1,n,i,i)<<" "; cout<<endl;
			}
			else
			{
				ll int l,r;
				cin>>l>>r;
				cout<<query(1,1,n,l,r)<<endl;
			}
		}
	}
	return 0;
}	