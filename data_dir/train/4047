#include<bits/stdc++.h>
#define REP(i,j,k) for(int i=j;i<k;++i)
#define RREP(i,j,k) for(int i=(int)j-1;i>=k;--i)
#define int long long
#define pb emplace_back
#define P pair<int,int>
#define F first
#define S second
#define ALL(x) x.begin(),x.end()
#define sz(a) (int)(a).size()
#define MX 35005
#define oo 1e18
#define L d*2
#define R d*2+1
#define mid (l+r>>1)
#define Ls l,mid,d*2
#define Rs mid+1,r,d*2+1
#define MIN(x,y) (x=min(x,(y)))
#define MAX(x,y) (x=max(x,(y)))
#define mo (int)(1e9+7)
#define IOS cin.tie(0) ,cout.tie(0), cout.sync_with_stdio(0)
#define ESP 1e-9
using namespace std;
int n,m,a,p[MX],la[MX],st[MX*4],tag[MX*4],dp[MX];
void build(int l,int r,int d){
	tag[d] = 0;
	if(l==r) st[d] = dp[l];
	else{
		build(Ls), build(Rs);
		st[d] = max(st[L],st[R]);
	}
}
void push(int l,int r,int d){
	if(l!=r && tag[d]){
		tag[L] += tag[d], st[L] += tag[d];
		tag[R] += tag[d], st[R] += tag[d];
		tag[d] = 0;
	}
}
void update(int l,int r,int d,int ql,int qr){
	push(l,r,d);
	if(ql<=l && r<=qr) tag[d]++, st[d]++;
	else{
		if(ql<=mid) update(Ls,ql,qr);
		if(mid<qr) update(Rs,ql,qr);
		st[d] = max(st[L],st[R]);
	}
}
int query(int l,int r,int d,int ql,int qr){
	push(l,r,d);
	if(ql<=l && r<=qr) return st[d];
	else if(qr<=mid) return query(Ls,ql,qr);
	else if(mid<ql) return query(Rs,ql,qr);
	return max(query(Ls,ql,qr),query(Rs,ql,qr));
}
main(){
	IOS;
	cin>>n>>m;
	REP(i,1,n+1) cin>>a,p[i] = la[a],la[a] = i;
	REP(j,1,m+1){
		build(0,n,1);
		REP(i,1,n+1){
			update(0,n,1,p[i],i-1);
			dp[i] = query(0,n,1,0,i-1);
		}
	}
	cout<<dp[n];
}


