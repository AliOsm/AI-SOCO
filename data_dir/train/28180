#include <bits/stdc++.h>
 
using namespace std;
 
#define SPEED ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define fileio freopen("in.in", "r", stdin),freopen("out.out", "w", stdout);
#define ll long long int
#define FF first
#define SS second
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define pll pair<long long int,long long int>
#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%lld",&x)
#define pd(x) printf("%d\n",x)
#define plld(x) printf("%lld\n",x)
#define pss printf
#define MOD 1000000007
#define INF 1e18
#define eps 0.00001
#define endl '\n'
#define debug(n1) cout<<n1<<endl
ll n,m,a[105];
ll par[50000];
ll cur=1;
ll val[50000];
ll lnk[105][105];
ll inn[50000];
ll grp[105];
vector<ll>A,B,adj[105];
void Dfs(ll i,ll p,ll t)
{
	grp[i]=t+1;
	for(auto j:adj[i])
		if(j!=p&&!grp[j])
			Dfs(j,i,(t^1));
}

const int MAXN1 = 50000;
const int MAXN2 = 50000;
const int MAXM = 150000;

int n1, n2, edges, last[MAXN1], prv[MAXM], head[MAXM];
int matching[MAXN2], dist[MAXN1], Q[MAXN1];
bool used[MAXN1], vis[MAXN1];

void init(int _n1, int _n2) {
    n1 = _n1;
    n2 = _n2;
    edges = 0;
    fill(last, last + n1, -1);
}

void addEdge(int u, int v) {
    head[edges] = v;
    prv[edges] = last[u];
    last[u] = edges++;
}

void bfs() {
    fill(dist, dist + n1, -1);
    int sizeQ = 0;
    for (int u = 0; u < n1; ++u) {
        if (!used[u]) {
            Q[sizeQ++] = u;
            dist[u] = 0;
        }
    }
    for (int i = 0; i < sizeQ; i++) {
        int u1 = Q[i];
        for (int e = last[u1]; e >= 0; e = prv[e]) {
            int u2 = matching[head[e]];
            if (u2 >= 0 && dist[u2] < 0) {
                dist[u2] = dist[u1] + 1;
                Q[sizeQ++] = u2;
            }
        }
    }
}

bool dfs(int u1) {
    vis[u1] = true;
    for (int e = last[u1]; e >= 0; e = prv[e]) {
        int v = head[e];
        int u2 = matching[v];
        if (u2 < 0 || !vis[u2] && dist[u2] == dist[u1] + 1 && dfs(u2)) {
            matching[v] = u1;
            used[u1] = true;
            return true;
        }
    }
    return false;
}

int maxMatching() {
    fill(used, used + n1, false);
    fill(matching, matching + n2, -1);
    for (int res = 0;;) {
        bfs();
        fill(vis, vis + n1, false);
        int f = 0;
        for (int u = 0; u < n1; ++u)
            if (!used[u] && dfs(u))
                ++f;
        if (!f)
            return res;
        res += f;
    }
}



void process(ll i)
{
	ll x=a[i];
	for(int j=2;j*j<=x;j++)
	{
		while(x%j==0)
		{
			par[cur]=i;
			val[cur]=j;
			cur++;
			x/=j;
		}
	}
	if(x>=2)
	{
		par[cur]=i;
		val[cur]=x;
		cur++;
	}
}
int main() {
SPEED;
cin>>n>>m;
for(int i=1;i<=n;i++)
	cin>>a[i];
for(int i=1;i<=n;i++)
	process(i);
cur--;
for(int i=1;i<=m;i++)
{
	ll x,y;
	cin>>x>>y;
	lnk[x][y]=1;
	lnk[y][x]=1;
	adj[x].pb(y);
	adj[y].pb(x);
}

for(int i=1;i<=n;i++)
{
	if(!grp[i])
		Dfs(i,i,0);
}
ll ga=1,gb=1;

for(int i=1;i<=cur;i++)
{
	if(grp[par[i]]==1)
		inn[i]=ga++;
	else
		inn[i]=gb++;
}
init(ga,gb);

for(int i=1;i<=cur;i++)
{
	for(int j=1;j<=cur;j++)
	{
		if(lnk[par[i]][par[j]]&&val[i]==val[j]&&grp[par[i]]==1)
			addEdge(inn[i],inn[j]);
	}
}
ll ans=maxMatching();
cout<<ans<<endl;
	return 0;
           } 