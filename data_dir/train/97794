#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair

typedef pair<int, int> pii;

int n;
int c[24];
set<vector<pii>> dp[25];

void upd(vector<pii> &a, vector<pii> &b, int rest, int idx, int sons = 0, int pos = 0) {
  if ((int)a.size() == pos) {
    if (!rest && sons != 1) {
      vector<pii> to;
      for (auto it : b) {
        if (it.second) {
          to.pb(it);
        }
      }
      if (!to.empty() && to.back().first == c[idx]) ++to.back().second;
      else to.pb(mp(c[idx], 1));
      dp[idx].insert(to);
    }
    return;
  }
  for (int i = 0; i <= a[pos].second; ++i) {
    if (rest >= a[pos].first * i) {
      b.pb(mp(a[pos].first, a[pos].second - i));
      upd(a, b, rest - a[pos].first * i, idx, sons + i, pos + 1);
      b.pop_back();
    }
  }
}

int main() {
#ifdef LOCAL
  freopen("input.txt", "r", stdin);
#endif
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", c + i);
  }
  sort(c, c + n);
  dp[0].insert(vector<pii>(1, mp(c[0], 1)));
  for (int i = 1; i < n; ++i) {
    for (auto forest : dp[i - 1]) {
      /*vector<pii> p = forest;
      if (p.back().first == c[i]) ++p.back().second;
      else p.pb(mp(c[i], 1));
      dp[i].insert(p);*/
      vector<pii> tmp;
      upd(forest, tmp, c[i] - 1, i);
    }
  }
  for (auto it : dp[n - 1]) {
    if (it.size() == 1 && it[0].first == n && it[0].second == 1) {
      cout << "YES";
      return 0;
    }
  }
  cout << "NO";
  return 0;
}