//besmellah
#include <bits/stdc++.h>
using namespace std;

const int maxn = 3e5 + 5;
int n;
int dp[maxn], dp2[maxn];
vector <int> adj[maxn];

void dfs(int v, int p = -1){
	dp[v] = 1;
	dp2[v] = 1;
	int mx1 = 0, mx2 = 0, ch = 0;
	for (auto u: adj[v]){
		if (u != p){
			dfs(u, v);
			if (dp2[u] > mx1){
				mx2 = mx1;
				mx1 = dp2[u];
			}
			else{
				mx2 = max(mx2, dp2[u]);
			}
			ch ++;
		}
	}
	dp[v] += mx1 + mx2;
	dp2[v] += mx1;
	dp[v] += max(0, ch - 2);
	dp2[v] += max(0, ch - 1);
	if (p != -1)
		dp[v] ++;
}

void vitex(){
	for (int i = 0; i < n; i ++){
		adj[i].clear();
		dp[i] = 0;
		dp2[i] = 0;
	}
}

int main(){
	ios::sync_with_stdio(false);
	cin.tie(0);
	int Q;
	cin >> Q;
	while (Q --){
		cin >> n;
		for (int i = 0; i < n - 1; i ++){
			int x, y;
			cin >> x >> y;
			x --;
			y --;
			adj[x].push_back(y);
			adj[y].push_back(x);
		}
		dfs(0);
		cout << *(max_element(dp, dp + n)) << '\n';
		vitex();
	}
}
