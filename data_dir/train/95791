#include <bits/stdc++.h>
using namespace std;
#define all(x) (x).begin(), (x).end()
#define clr(x) memset((x), 0, sizeof(x))
#define clr1(x) memset((x), -1, sizeof(x))
#define pb push_back
#define mp make_pair
#define x first
#define y second
typedef long long ll;
typedef long double ld;
typedef pair<ll, int> PII;
typedef pair<ll, ll> PLL;
typedef pair<ld, ld> PDD;
template<class T = int>
inline T nxt() { T x = 0;int c = getchar();int minus = 0;while (c != '-' && !isdigit(c)) { c = getchar(); }if (c == '-') { minus = 1;c = getchar(); }while (isdigit(c)) { x = x * 10 + c - '0';c = getchar(); }return (minus ? -x : x); }
template<class T>
inline T sqr(T x) { return x * x; }
inline ll isSqr(ll v) { ll t = (ll) sqrt(v);for (ll i = t - 1; i <= t + 1; ++i) { if (i * i == v) return i; }return -1; }
inline ll gcd(ll a, ll b) { a = abs(a);b = abs(b);while (b) { a %= b;swap(a, b); } return a; }

const int mod = 1000 * 1000 * 1000 + 7;
ll pw(ll a, ll n) {
    ll ret = 1;
    while (n) {
        if (n & 1) ret = ret * a % mod;
        a = a * a % mod;
        n >>= 1;
    }
    return ret;
}

const int N = 5010;
int dp[N][N];
int add[N][N];
int sum[N][N];
bool ok[N][N];

int n;
string S;

vector<int> zf (string s) {
    int n = (int) s.length();
    vector<int> z (n);
    for (int i=1, l=0, r=0; i<n; ++i) {
        if (i <= r)
            z[i] = min (r-i+1, z[i-l]);
        while (i+z[i] < n && s[z[i]] == s[i+z[i]])
            ++z[i];
        if (i+z[i]-1 > r)
            l = i,  r = i+z[i]-1;
    }
    return z;
}

void solve() {
    cin >> n;
    cin >> S;
    for (int i = 0; i < n; ++i) {
        vector<int> z = zf(S.substr(i));
        for (int len = 1; i + 2 * len <= n; ++len) {
            if (S[i + len] == '0') continue;
            if (z[len] >= len) continue;
            if (S[i + z[len]] < S[i + len + z[len]]) {
                ok[i + len][len] = 1;
            }
        }
    }

    for (int i = 0; i < n; ++i) {
        dp[i + 1][i + 1] = 1;
    }
    for (int i = 1; i <= n; ++i) {
        for (int len = 1; len <= i; ++len) {
            dp[i][len] += sum[i][len];
            if (dp[i][len] >= mod) dp[i][len] -= mod;
            if (S[i] == '0') continue;
            if (i + len <= n) {
                if (ok[i][len]) {
                    add[i + len][len] += dp[i][len];
                    if (add[i + len][len] >= mod) {
                        add[i + len][len] -= mod;
                    }
                } else {
                    add[i + len + 1][len + 1] += dp[i][len];
                    if (add[i + len + 1][len + 1] >= mod) {
                        add[i + len + 1][len + 1] -= mod;
                    }
                }
            }
        }
        for (int len = 1; len <= i + 1; ++len) {
            sum[i + 1][len] = sum[i][len - 1] + add[i + 1][len];
            if (sum[i + 1][len] >= mod) {
                sum[i + 1][len] -= mod;
            }
        }
    }
    ll ans = 0;
    for (int i = 1; i <= n; ++i) {
        ans += dp[n][i];
    }
    ans %= mod;
    cout << ans << "\n";
}


int main() {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    solve();

#ifdef LOCAL
    cerr << "time: " << clock() / (double) CLOCKS_PER_SEC << "s." << endl;
#endif
    return 0;
}