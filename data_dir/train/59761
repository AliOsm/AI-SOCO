#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000003;

// ----------------------------------------------------------------------------------------------------------

int DP[257], K;
string S;
vector<string> Sent;

void parse()
{
    int n = SZ(S);
    string temp;
    f(i,0,n-1)
    {
        if(SZ(temp) > 0 || S[i] != ' ') temp += S[i];

        if(S[i] == '.' || S[i] == '?' || S[i] == '!')
        {
            Sent.pb(temp);
            temp = "";
        }
    }
}

int main()
{
    cin >> K;
    getline(cin,S);
    getline(cin,S);
    parse();
    int n = SZ(Sent);
    f(i,0,255) DP[i] = INF;
    f(i,0,n-1) f(j,i,n-1)
    {
        int s = j-i;
        f(p,i,j) s += SZ(Sent[p]);
        if(s>K) continue;
        if(i > 0) DP[j] = min(DP[j], DP[i-1] + 1);
        else DP[j] = 1;
    }
    if(DP[n-1] < INF) cout << DP[n-1];
    else cout << "Impossible";
}
