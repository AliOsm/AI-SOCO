/// In The Name Of God

#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>

#define f first
#define s second

#define pb push_back
#define pp pop_back
#define mp make_pair

#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const int N = (int)1e6 + 7;
const int inf = (int)1e9 + 7;
const int mod = (int)1e9 + 7;
const ll linf = (ll)1e14 + 7;

const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1};
const int dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

using namespace std;

int lp[N];

vector <int> f(int x) {
	vector <int> res;
	while (x > 1) {
		int p = lp[x];
		while (x % p == 0) x /= p;
		res.pb(p);
	}
	return res;
}

int k, p, x;

vector <int> now;

ll count(ll mid) {
	ll total = 0;
	for (int mask = 1; mask < (1 << sz(now)); mask++) {
		ll m = 1;
		for (int i = 0; i < sz(now); i++) {
			if (mask & (1 << i)) m *= now[i];
		}
		if (__builtin_popcount(mask) & 1) total += mid / m;
		else total -= mid / m;
	}
	return total;
}
ll gcd(int x, int y) {
	while (y) {
		x %= y;
		swap(x, y);
	}
	return x | y;
}
void solve() {
	cin >> x >> p >> k;
	now = f(p);
	ll l = x + 1, r = linf, res = linf;
	ll cX = count(x);
	while (l <= r) {
		ll mid = (l + r) / 2;
		ll total = (mid - x) - count(mid) + cX;
		if (total >= k) res = mid, r = mid - 1;
		else l = mid + 1;
	}
	cout << res << nl;
}
int main() {
	#ifdef IOI2018
		freopen ("in.txt", "r", stdin);
	#endif
	Kazakhstan
	for (int i = 2; i < N; i++) {
		if (!lp[i]) {
			lp[i] = i;
			for (int j = i + i; j < N; j += i) {
				if (!lp[j]) lp[j] = i;
			}
		}
	}
	int t = 1;
	cin >> t;
	while (t--) {
		solve();
	}
	ioi
}
