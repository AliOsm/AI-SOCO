#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>
#include <complex>
#include <cassert>
#include <regex>
#include <random>

#define ll long long
#define ld long double
#define ull unsigned ll
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vector<int>>
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const int  Inf = 2 * 1000 * 1000 * 1000;
ll LINF = (ll)4e18;
using namespace std;
#define M_PI       3.14159265358979323846   // pi

const int maxn = 5 * 1000 * 100 + 5;

vector<int>g[maxn];
ll depth[maxn];

void precalc(int v, int d, int p = -1) {	
	for (auto to : g[v]) {
		if (to == p) continue;
		depth[to] = depth[v] + 1;
		precalc(to, d + 1, v);
	}
}

void get_leaves(int v, int p, vector<int>&leaves) {
	bool is_leaf = 1;

	for (auto to : g[v]) {
		if (to == p) continue;
		is_leaf = 0;
		get_leaves(to, v, leaves);
	}
	if (is_leaf) {
		leaves.emplace_back(v);
	}
}

ll a[maxn];
vector<int>leaves;

ll solve(int v) {
	leaves.clear();
	get_leaves(v, 0, leaves);
	
	sort(all(leaves), [&](int i, int j) {
		return depth[i] < depth[j];
	});

	a[0] = depth[leaves[0]];
	ll mx = a[0];

	for (int i = 0; i + 1 < (int)leaves.size(); i++) {
		a[i + 1] = max(a[i] + 1, depth[leaves[i + 1]]);
		mx = max(mx, a[i + 1]);
	}

	return mx;
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("sum.in", "r", stdin);
	//freopen("sum.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n;
	cin >> n;
	for (int i = 0; i + 1 < n; i++) {
		int a, b;
		cin >> a >> b;
		a--, b--;
		g[a].emplace_back(b);
		g[b].emplace_back(a);
	}
	precalc(0, 0);

	ll ans = -1;

	for (auto &v : g[0]) {
		ans = max(ans, solve(v));
	}
	cout << ans;
 	return 0;
}