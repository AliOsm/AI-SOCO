#include <bits/stdc++.h>

#ifdef DEBUG
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
#define eprintf(...)
#endif

using namespace std;
using ll = long long;

const int N = 200005;

int n;
vector<int> g[N];
int subsize[N];
int cnt[N][2];
int calc_size(int u, int p) {
	subsize[u] = 1;
	for(int v : g[u]) if(v != p) {
		subsize[u] += calc_size(v, u);
		cnt[u][0] += cnt[v][1];
		cnt[u][1] += cnt[v][0];
		cnt[u][1]++;
	}
	return subsize[u];
}

ll dfs(int u, int p) {

	ll ans = cnt[u][1];

	for(int v : g[u]) if(v != p) {
		cnt[u][1]--;
		cnt[u][1] -= cnt[v][0];
		cnt[u][0] -= cnt[v][1];

		cnt[v][0] += cnt[u][1];
		cnt[v][1] += cnt[u][0];
		cnt[v][1]++;
		ans += dfs(v, u);

		cnt[v][1]--;
		cnt[v][1] -= cnt[u][0];
		cnt[v][0] -= cnt[u][1];

		cnt[u][0] += cnt[v][1];
		cnt[u][1] += cnt[v][0];
		cnt[u][1]++;
	}

	return ans;
}

int main() {

	scanf("%d", &n);
	for(int i = 1; i < n; i++) {
		int u, v;
		scanf("%d %d", &u, &v);
		g[u].push_back(v);
		g[v].push_back(u);
	}

	calc_size(1, 1);
	ll ans = 0;
	for(int i = 1; i <= n; i++) {
		ans += 2LL * (n - subsize[i]) * subsize[i];
		eprintf("vertice %d; subsize %d\n", i, subsize[i]);
	}

	eprintf(">>> %lld\n", ans);

	ans += dfs(1, 1);

	assert(ans % 4 == 0);

	printf("%lld\n", ans / 4);
}
