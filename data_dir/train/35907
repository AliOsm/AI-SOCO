#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
#define piii pair<int, pair<int, int> >
using namespace std;


/**------------------------------------BITMASK------------------------------------------**/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/**-----------------------------------------------------------------------------------------------**/

/**-----------------------------DIRECTION_ARRAY-------------------------**/
///------FOUR_DIRECTION---------///
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


///------EIGHT_DIRECTION---------///
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/**--------------------------------------------------------------------------------------**/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}


/*****int exgcd(int A, int B, int *X, int *Y){


    int x2, y2, x1, y1, x, y, r, r1, r2, q;
    x2=1; y2=0;
    x1=0; y1=1;
    for(r2=A, r1=B; r1!=0 ; r2=r1, r1=r, x2=x1, y2=y1, x1=x, y1=y){

        q=r2/r1;
        r=r2%r1;
        x=x2-(x1*q);

        y=y2-(y1*q);
    }
    *X=x2;
    *Y=y2;
    return r2;

}******/




///-----------------------------START FROM HERE--------------------------------------///

vector<piii>edge;
vector<pii>qr;

int par[200005];
ll cnt[200005];
ll ans[200005];

int Find(int u){

    if(par[u]==u)return u;
    return par[u]=Find(par[u]);

}

int main(){

    int n, m;
    scanf("%d %d", &n, &m);

    for(int i=1; i<n; i++){

        int u, v, w;
        scanf("%d %d %d", &u, &v, &w);
        edge.pb(make_pair(w, make_pair(u, v)));

    }

    for(int i=1; i<=m; i++){
        int x;
        scanf("%d", &x);
        qr.pb(make_pair(x, i));

    }
    ll total=0;
    for(int i=1; i<=n; i++){
        par[i]=i;
        cnt[i]=1;
    }
    int i=0, j=0;
    sort(all(edge));
    sort(all(qr));
    while(i<edge.size() && j<qr.size()){

        if(edge[i].ff<=qr[j].ff){

            int u=edge[i].ss.ff;
            int v=edge[i].ss.ss;
            int U=Find(u);
            int V=Find(v);
            if(U!=V){
                total-=((cnt[U])*(cnt[U]-1))/2;
                total-=((cnt[V])*(cnt[V]-1))/2;

                cnt[U]+=cnt[V];
                total+=((cnt[U])*(cnt[U]-1))/2;
                par[V]=U;

            }
            i++;
            }else{
                ans[qr[j].ss]=total;

                j++;
            }

        }


    while(j<qr.size()){

        ans[qr[j].ss]=total;
        j++;
    }
    for(int i=1; i<=m; i++)printf("%lld ", ans[i]);


}
