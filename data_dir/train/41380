/**
 * @author khokharnikunj8
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class DAromasSearch {
public:
    long long dist(long long x1, long long y1, long long x2, long long y2) {
        return abs(x1 - x2) + abs(y1 - y2);
    }

    void solve(std::istream &in, std::ostream &out) {
        long long x0, y0, ax, ay, bx, by;
        in >> x0 >> y0 >> ax >> ay >> bx >> by;
        long long xs, ys, t;
        in >> xs >> ys >> t;
        vector<pair<long long, long long>> allPoints;
        long long tempX = x0, tempY = y0;
        while (true) {
            allPoints.push_back({tempX, tempY});
            double tX = ((double) tempX) * ax + bx;
            double tY = ((double) tempY) * ay + by;
            if (tX > 1e17 || tY > 1e17) break;
            tempX = tempX * ax + bx;
            tempY = tempY * ay + by;
        }
        int ans = 0;
        for (int i = 0; i < allPoints.size(); i++) {
            pair<long long, long long> cur = allPoints[i];
            if (dist(cur.first, cur.second, xs, ys) > t) continue;
            {
                long long rem = t - dist(cur.first, cur.second, xs, ys);
                int temp = 1;
                int j = i + 1;
                while (j < allPoints.size() &&
                       rem >= dist(cur.first, cur.second, allPoints[j].first, allPoints[j].second)) {
                    rem -= dist(cur.first, cur.second, allPoints[j].first, allPoints[j].second);
                    cur = allPoints[j];
                    temp++;
                    j++;
                }
                ans = max(ans, temp);
            }
            cur = allPoints[i];
            {
                long long rem = t - dist(cur.first, cur.second, xs, ys);
                int temp = 1;
                int j = i - 1;
                while (j >= 0 &&
                       rem >= dist(cur.first, cur.second, allPoints[j].first, allPoints[j].second)) {
                    rem -= dist(cur.first, cur.second, allPoints[j].first, allPoints[j].second);
                    cur = allPoints[j];
                    temp++;
                    j--;
                }
                ans = max(ans, temp);
            }
        }
        out << ans << "\n";

    }
};


int main() {
    DAromasSearch solver;
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
