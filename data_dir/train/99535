#include <bits/stdc++.h>
using namespace std;
const int N = 1005;
int n, m;
long long dp[4][N][N];
int g[N][N];

long long calc(int in, int tx1, int ty1, int tx2, int ty2, int x, int y, int dx,
		int dy) {

	if (x < 1 || x > n || y < 1 || y > m) return 0;
	if (x == dx && y == dy) {
		return dp[in][x][y] = g[x][y];
	}
	if (dp[in][x][y] != -1) return dp[in][x][y];
	dp[in][x][y] = 0;
	dp[in][x][y] = g[x][y]
			+ max(calc(in, tx1, ty1, tx2, ty2, x + tx1, y + ty1, dx, dy),
					calc(in, tx1, ty1, tx2, ty2, x + tx2, y + ty2, dx, dy));
	return dp[in][x][y];
}

int main() {

//	freopen("readin.txt", "r", stdin);

	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			scanf("%d", &g[i][j]);
		}
	}
	memset(dp, -1, sizeof dp);
	calc(0, 1, 0, 0, 1, 1, 1, n, m);
	calc(1, -1, 0, 0, -1, n, m, 1, 1);
	calc(2, -1, 0, 0, 1, n, 1, 1, m);
	calc(3, 1, 0, 0, -1, 1, m, n, 1);

	long long ans = 0;
	vector<pair<int, int> > mv1;
	vector<pair<int, int> > mv2;
	mv1.push_back( { 0, 1 });
	mv1.push_back( { 1, 0 });
	mv2.push_back( { 0, 1 });
	mv2.push_back( { -1, 0 });

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {

			for (int s1 = 0; s1 < 2; s1++) {
				int sx1 = i - mv1[s1].first;
				int sy1 = j - mv1[s1].second;
				if (sx1 < 1 || sx1 > n || sy1 < 1 || sy1 > m) continue;
				for (int s2 = 0; s2 < 2; s2++) {
					int sx2 = i - mv2[s2].first;
					int sy2 = j - mv2[s2].second;
					if (sx2 < 1 || sx2 > n || sy2 < 1 || sy2 > m
							|| (sx1 == sx2 && sy1 == sy2)) continue;
					for (int e1 = 0; e1 < 2; e1++) {
						int ex1 = i + mv1[e1].first;
						int ey1 = j + mv1[e1].second;
						if (ex1 < 1 || ex1 > n || ey1 < 1 || ey1 > m
								|| (sx2 == ex1 && sy2 == ey1)) continue;
						for (int e2 = 0; e2 < 2; e2++) {
							int ex2 = i + mv2[e2].first;
							int ey2 = j + mv2[e2].second;
							if (ex2 < 1 || ex2 > n || ey2 < 1 || ey2 > m
									|| (ex1 == ex2 && ey1 == ey2)
									|| (sx1 == ex2 && sy1 == ey2)) continue;
							ans = max(ans,
									dp[1][sx1][sy1] + dp[0][ex1][ey1]
											+ dp[3][sx2][sy2]
											+ dp[2][ex2][ey2]);
							if (dp[1][sx1][sy1] + dp[0][ex1][ey1]
									+ dp[3][sx2][sy2] + dp[2][ex2][ey2] == 42) {

							}
						}
					}
				}
			}
		}
	}
	printf("%I64d\n", ans);
	return 0;
}
