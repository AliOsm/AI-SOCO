#include<bits/stdc++.h>

#define SZ(x) ((int(x.size())))

typedef long long ll;

using namespace std;

const int maxn = 50*1000+10, SQ = 895, maxq = 250*1000+10;
int n, m, q, u, v, o, num[maxn], deg[maxn], pos, bish[SQ], ans, cnt[maxn], qry[maxq][2];
char c[maxq];
bool on[maxn], vsl[maxn][SQ];
unordered_set <int> s[maxn];

int main()
{
    scanf("%d %d %d %d", &n, &m, &q, &o);
    for (int i = 0; i < o; i++)
    {
        scanf("%d", &u);
        u--;
        on[u] = 1;
    }
    for (int i = 0; i < m; i++)
    {
        scanf("%d %d", &u, &v);
        u--;
        v--;
        deg[u]++;
        deg[v]++;
        s[u].insert (v);
        s[v].insert (u);
        if (on[u])
            cnt[v]++;
        if (on[v])
            cnt[u]++;
    }
    for (int i = 0; i < q; i++)
    {
        scanf(" %c", &c[i]);
        if (c[i] == 'A')
        {
            scanf("%d %d", &qry[i][0], &qry[i][1]);
            qry[i][0]--;
            qry[i][1]--;
            deg[qry[i][0]]++;
            deg[qry[i][1]]++;
        }
        else if (c[i] == 'D')
        {
            scanf("%d %d", &qry[i][0], &qry[i][1]);
            qry[i][0]--;
            qry[i][1]--;
        }
        else
        {
            scanf("%d", &qry[i][0]);
            qry[i][0]--;
        }
    }
    for (int i = 0; i < n; i++)
    {
        if (deg[i] >= SQ)
        {
            bish[pos] = i;
            pos++;
            num[i] = pos;
        }
    }
    for (int i = 0; i < n; i++)
    {
        for (auto j : s[i])
        {
            if (num[j] > 0)
                vsl[i][num[j] - 1] = 1;
        }
    }
    for (int i = 0; i < q; i++)
    {
        if (c[i] == 'O')
        {
            on[qry[i][0]] = 1;
            for (int j = 0; j < pos; j++)
            {
                if (vsl[qry[i][0]][j])
                    cnt[bish[j]]++;
            }
        }
        else if (c[i] == 'F')
        {
            on[qry[i][0]] = 0;
            for (int j = 0; j < pos; j++)
            {
                if (vsl[qry[i][0]][j])
                    cnt[bish[j]]--;
            }
        }
        else if (c[i] == 'A')
        {
            s[qry[i][0]].insert (qry[i][1]);
            s[qry[i][1]].insert (qry[i][0]);
            if (num[qry[i][0]] > 0)
            {
                vsl[qry[i][1]][num[qry[i][0]] - 1] = 1;
                if (on[qry[i][1]])
                    cnt[qry[i][0]]++;
            }
            if (num[qry[i][1]] > 0)
            {
                vsl[qry[i][0]][num[qry[i][1]] - 1] = 1;
                if (on[qry[i][0]])
                    cnt[qry[i][1]]++;
            }
        }
        else if (c[i] == 'D')
        {
            s[qry[i][0]].erase (qry[i][1]);
            s[qry[i][1]].erase (qry[i][0]);
            if (num[qry[i][0]] > 0)
            {
                vsl[qry[i][1]][num[qry[i][0]] - 1] = 0;
                if (on[qry[i][1]])
                    cnt[qry[i][0]]--;
            }
            if (num[qry[i][1]] > 0)
            {
                vsl[qry[i][0]][num[qry[i][1]] - 1] = 0;
                if (on[qry[i][0]])
                    cnt[qry[i][1]]--;
            }
        }
        else
        {
            if (num[qry[i][0]] == 0)
            {
                ans = 0;
                for (auto j : s[qry[i][0]])
                {
                    if (on[j])
                        ans++;
                }
                printf("%d\n", ans);
            }
            else
                printf("%d\n", cnt[qry[i][0]]);
        }
    }
	return 0;
}
