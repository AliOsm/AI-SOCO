#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <chrono>

using namespace std;
typedef int mt;
//#define mt int
#define rep(a, b, i) for(register mt i = a; i < b; ++i)
#define repe(a, b, i) for(register mt i = a; i <= b; ++i)
#define repd(a, b, i) for(register mt i = a; i > b; --i)
#define repde(a, b, i) for(register mt i = a; i >= b; --i)

#define N 2101
#define K 57
#define P 2
#define M (10001)
#define INF 8600000000000000007ll
#define MOD 1000000007ll
#define EPS 1e-6
#define MAX 1000000000000000001ll
//#pragma comment(linker, "/STACK:200000000")

mt n;
mt a[N];
mt dp[N][N][2];
mt d[N], u[N];
mt c[2];
mt answ;
int main(void)
{
#ifdef _DEBUG
	freopen("in.txt", "r", stdin);
#endif
	scanf("%d", &n);
	rep(0, n, i)
		scanf("%d", a + i);
	d[0] = a[0] == 1;
	rep(1, n, i) {
		if (a[i] == 1) d[i] = 1 + d[i - 1];
		else d[i] = d[i - 1];
	}
	u[n - 1] = a[n - 1] == 2;
	repde(n - 2, 0, i) {
		if (a[i] == 2) u[i] = 1 + u[i + 1];
		else u[i] = u[i + 1];
	}
	repde(n - 1, 0, i) {
		repde(i, 0, j) {
			if (a[j] == 1) dp[i][j][0] = 1 + dp[i][j + 1][0], dp[i][j][1] = dp[i][j + 1][1];
			else dp[i][j][1] = 1 + max(dp[i][j + 1][1], dp[i][j + 1][0]), dp[i][j][0] = dp[i][j + 1][0];

			mt x = max(dp[i][j][0], dp[i][j][1]);
			answ = max(answ, (j ? d[j - 1] : 0) + x + u[i + 1]);
		}
	}


	/*rep(0, n, i) {
		rep(i, n, j) {
			mt l = i, r = j;
			while (r > l)
				swap(a[l++], a[r--]);
			c[0] = c[1] = 0;
			rep(0, n, k) {
				if (a[k] == 1) ++c[0];
				else c[1] = max(c[1], c[0]) + 1;
			}
			l = i, r = j;
			while (r > l)
				swap(a[l++], a[r--]);
			answ = max(answ, max(c[0], c[1]));
		}
	}*/
	printf("%d\n", answ);
	
	return 0;
}