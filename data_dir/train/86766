#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define mp make_pair
#define mod 1000000007
#define pi 3.141592653589793
const int N = 200001;
using namespace std;

vector<int> nodes;
vector<int> a[N];
int b[20 * N], lazy[20 * N];
void f(int u, int p) {
    nodes.pb(u);
    for (int v : a[u]) {
        if (v != p) {
            f(v, u);
        }
    }
    nodes.pb(u);
}


void build(int ind, int l, int r, int ar[]) {
    if (l == r) {
        b[ind] = ar[r];
        return;
    }

    int mid = (l + r) / 2;
    build(2 * ind + 1, l, mid, ar);
    build(2 * ind + 2, mid + 1, r, ar);
    b[ind] = b[2 * ind + 1] + b[2 * ind + 2];
}

void upd(int ql, int qr, int ind, int l, int r) {
    if (lazy[ind]) {
        b[ind] = r - l + 1 - b[ind];
        if (l != r) {
            lazy[2 * ind + 1] = 1 - lazy[2 * ind + 1];
            lazy[2 * ind + 2] = 1 - lazy[2 * ind + 2];
        }
        lazy[ind] = 0;
    }

    if (ql > r || l > qr) return;
    if (ql <= l && r <= qr) {
        b[ind] = r - l + 1 - b[ind];
        if (l != r) {
            lazy[2 * ind + 1] = 1 - lazy[2 * ind + 1];
            lazy[2 * ind + 2] = 1 - lazy[2 * ind + 2];
        }
        return;
    }

    int mid = (l + r) / 2;
    upd(ql, qr, 2 * ind + 1, l, mid);
    upd(ql, qr, 2 * ind + 2, mid + 1, r);
    b[ind] = b[2 * ind + 1] + b[2 * ind + 2];
}


ll query(int ql, int qr, int ind, int l, int r) {
    if (lazy[ind]) {
        b[ind] = r - l + 1 - b[ind];
        if (l != r) {
            lazy[2 * ind + 1] = 1 - lazy[2 * ind + 1];
            lazy[2 * ind + 2] = 1 - lazy[2 * ind + 2];
        }
        lazy[ind] = 0;
    }

    if (ql > r || l > qr) return 0;

    if (ql <= l && r <= qr) {
        return b[ind];
    }

    int mid = (l + r) / 2;
    return query(ql, qr, 2 * ind + 1, l, mid) + query(ql, qr, 2 * ind + 2, mid + 1, r);

}


int main() {
//    cout << fixed << setprecision(10);
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);


    int n;
    cin >> n;
    for (int i = 2; i < n + 1; i++) {
        int p;
        cin >> p;
        a[p].pb(i);
    }

    f(1, -1);
    int val[n + 1];
    for (int i = 1; i < n + 1; i++) {
        cin >> val[i];
    }

    memset(b, 0, sizeof b);
    memset(lazy, 0, sizeof lazy);
    int fir[n + 1], last[n + 1];
    memset(fir, -1, sizeof fir);
    int bf[nodes.size()];
    for (int i = 0; i < nodes.size(); i++) {
        if (fir[nodes[i]] == -1) {
            fir[nodes[i]] = i;
        }
        else {
            last[nodes[i]] = i;
        }
        bf[i] = val[nodes[i]];
    }

    build(0, 0, nodes.size() - 1, bf);

    int q;
    cin >> q;
    while (q--) {
        string s;
        int i;
        cin >> s >> i;
        if (s == "pow") {
            upd(fir[i], last[i], 0, 0, nodes.size() - 1);
        }
        else {
            cout << query(fir[i], last[i], 0, 0, nodes.size() - 1) / 2 << '\n';
        }
    }

}
