#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
ordered_set;	

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<pii, int> para;
const ll inf = 1e18 + 7;
const ll maxN = 1e6 + 5;
const ll MOD = 1e9 + 7;

ll pow(ll a, ll b) {
	if (b == 0) return 1;
	ll d = pow(a, b / 2);
	ll z = 1;
	if (b % 2) z = a;
	return (((d * d) % MOD) * z) % MOD;
}

int n, arr[maxN];
ll sumLeft[maxN], sumRight[maxN];
int res[maxN];
set<int> s;
map<int, int> m;
int main() {
	ios_base::sync_with_stdio(0);
	cin >> n;
	RI(i, n) cin >> arr[i];
	int minim = arr[1];
	ll sum = 0;
	RI(i, n) {
		minim = min(minim, arr[i]);
		if (i == 1) {
			s.insert(arr[i]);
			m[arr[i]] = 1;
			sum = arr[i];
			sumLeft[i] = sum;
		} else {
			auto it = s.upper_bound(arr[i]);
			if (it != s.end()) {
				while (it != s.end()) {
					auto it2 = it;
					int x = m[*it];
					sum -= (ll)(*it) * x;
					sum += (ll)arr[i] * x;
					m[arr[i]] += x;
					m[*it] = 0;
					it++;
					s.erase(it2);
				}
			}
			sum += arr[i];
			s.insert(arr[i]);
			m[arr[i]]++;
			sumLeft[i] = sum;
		}
	}
	s.clear();
	m.clear();
	sum = 0;
	minim = arr[n - 1];
	FORD(i, n, 1) {
		if (i == n) {
			s.insert(arr[i]);
			m[arr[i]] = 1;
			sum = arr[i];
			sumRight[i] = sum;
		} else {
			auto it = s.upper_bound(arr[i]);
			if (it != s.end()) {
				while (it != s.end()) {
					auto it2 = it;
					int x = m[*it];
					sum -= (ll)(*it) * x;
					sum += (ll)arr[i] * x;
					m[arr[i]] += x;
					m[*it] = 0;
					it++;
					s.erase(it2);
				}
			}
			sum += arr[i];
			s.insert(arr[i]);
			m[arr[i]]++;
			sumRight[i] = sum;
		}
	}
	ll ans = 0;
	int pos = -1;
	RI(i, n) {
		//cout << sumLeft[i - 1] << " " << sumRight[i] << endl;
		if (sumLeft[i - 1] + sumRight[i] > ans) {
			ans = sumLeft[i - 1] + sumRight[i];
			pos = i;
		}
	}
	res[pos] = arr[pos];
	minim = arr[pos];
	FORD(i, pos - 1, 1) {
		minim = min(minim, arr[i]);
		res[i] = minim;
	}
	minim = arr[pos];
	FOR(i, pos + 1, n) {
		minim = min(minim, arr[i]);
		res[i] = minim;
	}
	RI(i, n) cout << res[i] << " ";
	return 0;
}
