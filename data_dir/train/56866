//raja1999
#include <bits/stdc++.h>
#include <vector>
#include <set>
#include <map>
#include <string> 
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <utility>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iomanip> 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
//setbase - cout << setbase (16)a; cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 <<endl;prints xxx77
//setprecision - cout << setprecision (14) << f << endl; Prints x.xxxx
//cout.precision(x)  cout<<fixed<<val;  // prints x digits after decimal in val

using namespace std;
using namespace __gnu_pbds;
#define f(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) f(i,0,n)
#define fd(i,a,b) for(i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define vi vector< int >
#define vl vector< ll >
#define ss second
#define ff first
#define ll long long
#define pii pair< int,int >
#define pll pair< ll,ll >
#define sz(a) a.size()
#define inf (1000*1000*1000+5)
#define all(a) a.begin(),a.end()
#define tri pair<int,pii>
#define vii vector<pii>
#define vll vector<pll>
#define viii vector<tri>
#define mod (1000*1000*1000+7)
#define pqueue priority_queue< int >
#define pdqueue priority_queue< int,vi ,greater< int > >
#define int ll

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

//std::ios::sync_with_stdio(false);
vi gg,gg1;
int pos[30],done[200005];
vector<vi>vec(30);
vii ans;
signed main(){
	std::ios::sync_with_stdio(false); cin.tie(NULL);
	int n,i,lol;
	cin>>n;
	string l,r;
	cin>>l>>r;
	rep(i,r.length()){
		if(r[i]=='?'){
			gg.pb(i);
		}
		else{
			vec[r[i]-'a'].pb(i);
		}
	}	
	rep(i,26){
		pos[i]=(int)vec[i].size();
		pos[i]--;
	}
	lol=(int)gg.size();
	lol--;
	rep(i,l.length()){
		if(l[i]=='?'){
			gg1.pb(i);
		}
		else{
			if(pos[l[i]-'a']!=-1){
				ans.pb(mp(i,vec[l[i]-'a'][pos[l[i]-'a']]));
				done[vec[l[i]-'a'][pos[l[i]-'a']]]=1;
				pos[l[i]-'a']--;
			}
			else{
				if(lol!=-1){
					ans.pb(mp(i,gg[lol]));
					done[gg[lol]]=1;
					lol--;
				}
			}
		}
	}
	lol=(int)gg1.size();
	lol--;
	rep(i,r.length()){
		if(done[i]==0&&lol!=-1){
			ans.pb(mp(gg1[lol],i));
			lol--;
		}
	}
	cout<<ans.size()<<endl;
	rep(i,ans.size()){
		cout<<ans[i].ff+1<<" "<< ans[i].ss+1<<endl;
	}
	return 0;
} 
	