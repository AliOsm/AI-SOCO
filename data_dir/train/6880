#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL_CHECK
#define trace(x) cerr << #x << ": " << x << " ";
#define trnl cerr << "\n";
#else
#define trace(x) {}
#define trnl {}
#endif
typedef long long lolo;
typedef unsigned long long ulolo;
typedef pair<int, int> pii;
#define F(i,a,b) for(int i=(a);i<(b);++i)
#define R(i,n) F(i,0,n) 
#define FD(i,n) for(int i=(n-1);i>=0;--i)
#define SZ(x) ((int)(x).size())
#define ALL(x) (x).begin(),(x).end()
#define fi first
#define se second
#define M_PI           3.14159265358979323846

const int INF = 1e9 + 23;
const int MOD = 1e9 + 7;
const int N = 1e5 + 10;

int a[N];
int onpos[2][N];
int sump[2][N];

int main()
{
  ios_base::sync_with_stdio(0);
  int n;
  cin >> n;
  F(i, 1, n+1) {
    cin >> a[i];
    --a[i];
  }

  int cnt[] = {0, 0};
  F(i, 1, n+1) {
    ++cnt[a[i]];
    onpos[0][i] = cnt[0];
    onpos[1][i] = cnt[1];
    sump[a[i]][cnt[a[i]]] = i;
  }

  vector<pii > ans;
  F(t, 1, n+1) {
    int sc[] = {0, 0};
    int pos = 0;
    while (pos < n) {
      int nxtp[2];
      R(i, 2) {
        int need = onpos[i][pos] + t;
        if (need > cnt[i]) {
          nxtp[i] = INF;
          continue;
        }
        nxtp[i] = sump[i][need];
      }
      if (nxtp[0] == INF && nxtp[1] == INF) {
        break;
      }
      
      if (nxtp[0] < nxtp[1]) ++sc[0], pos = nxtp[0];
      else ++sc[1], pos = nxtp[1];
    }
    
    if (pos == n && sc[a[n]] > sc[1 - a[n]]) {
      ans.emplace_back(sc[a[n]], t);
    }
  }

  sort(ALL(ans));
  cout << SZ(ans) << "\n";
  for (auto &it : ans) cout << it.fi << " " << it.se << "\n";
}
// g++ -W -Wall -Wextra -pedantic -std=c++0x -o p main.cpp
