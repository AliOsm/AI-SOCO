// in the name of Allah

#include <bits/stdc++.h>

using namespace std;

#define endl '\n'
#define pb push_back
#define sz(x) ((int) (x.size()))

int n;
int dist[123456];
int dp[123456][22];
vector <int> g[123456];

void bfs() {
	memset(dist, 127, sizeof dist);
	dist[1] = 0;
	queue <int> q;
	q.push(1);
	while(q.size()) {
		int u = q.front();
		q.pop();
		for(int i=0; i<g[u].size(); i++) {
			int v = g[u][i];
			if(dist[v] > dist[u]+1) {
				dp[v][0] = u;
				dist[v] = dist[u] + 1;
				q.push(v);
			}
		}
	}
}

void calc() {
	bfs();
	dp[1][0] = 1;
	for(int j=1; j<20; j++)
		for(int i=1; i<=n; i++) 
			dp[i][j] = dp[dp[i][j-1]][j-1];
}

int lca(int a, int b) {
	if(dist[a] > dist[b]) swap(a, b);
	int d = dist[b] - dist[a];
	for(int i=0; i<20; i++) if((d&(1<<i)) > 0) b = dp[b][i];
	if(a == b) return a;
	for(int i=19; i>=0; i--) {
		if(dp[a][i] != dp[b][i]) {
			a = dp[a][i];
			b = dp[b][i];
		}
	}
	return dp[a][0];
}

int distance(int u,int v) {
	return dist[u] + dist[v] - 2*dist[lca(u,v)];
}

int a, b, x, y, k;

bool solve() {
	int d = distance(a, b);
	// cout << d << endl;
	if(d <= k && (k - d) % 2 == 0) return 1;
	d = min(distance(x, a) + 1 + distance(y, b), distance(x, b) + 1 + distance(y, a));
	// cout << d << endl;
	if(d <= k && (k - d) % 2 == 0) return 1;
	return 0;
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);

	cin >> n;
	int xx, yy;
	for(int i=1; i<n; i++) {
		cin >> xx >> yy;
		g[xx].pb(yy);
		g[yy].pb(xx);
	}
	calc();
	int q;
	cin >> q;
	while(q--) {
		cin >> x >> y >> a >> b >> k;
		if(solve()) cout << "YES" << endl;
		else cout << "NO" << endl;
	}

	return 0;
}