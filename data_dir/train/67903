//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }
inline int safe_mul(const int x, const int y) __attribute__ ((warn_unused_result));

bool good(const vector<int>& a, int from, int hp, const int to) {
    int step = from <= to ? 1 : -1;
    while (from != to) {
        hp += a[from += step];
        if (hp < 0)
            return false;
    }
    return true;
}

vector<int> solve(vector<int> a, vector<tuple<int, int,int> > hero, const int center) {
    vector<int> result;
    vector<bool> used(hero.size(), false);

    auto iter = lower_bound(begin(hero), end(hero), make_tuple(center, -1, -1));
    int ind = iter - begin(hero);

    for (int i = ind - 1; i >= 0; --i) {
        if (good(a, get<0>(hero[i]), get<1>(hero[i]), center)) {
            result.push_back(get<2>(hero[i]));
            used[i] = true;
            fill(begin(a) + get<0>(hero[i]), begin(a) + center + 1, 0);
        }
    }

    for (int i = ind - 1; i >= 0; --i) {
        if (!used[i] && good(a, get<0>(hero[i]), get<1>(hero[i]), center)) {
            result.push_back(get<2>(hero[i]));
            used[i] = true;
        }
    }

    for (int i = ind; i < hero.size(); ++i) {
        if (!used[i] && good(a, get<0>(hero[i]), get<1>(hero[i]), center)) {
            result.push_back(get<2>(hero[i]));
            used[i] = true;
            fill(begin(a) + center, begin(a) + get<0>(hero[i]) + 1, 0);
        }
    }

    for (int i = ind; i < hero.size(); ++i) {
        if (!used[i] && good(a, get<0>(hero[i]), get<1>(hero[i]), center)) {
            result.push_back(get<2>(hero[i]));
            used[i] = true;
        }
    }

    if (result.size() == hero.size())
        return result;
    return vector<int>();
}

int main()
{
//    freopen("in.txt","r", stdin);
//    freopen("out.txt", "w", stdout);
//    cout << fixed << setprecision(15);
    ios_base::sync_with_stdio(false);

    int n,m;
    cin >> n >> m;
    vector<tuple<int,int, int> > hero;
    for(int i = 1; i <= m; ++i) {
        int s,t;
        cin >> s >> t;
        hero.emplace_back(s-1, t, i);
    }

    sort(begin(hero), end(hero));

    vector<int> a(n);
    for(int& x : a)
        cin >> x;

    for(int i = 0; i < n; ++i) {
        auto vec = solve(a, hero, i);
        if (!vec.empty()) {
            cout << i + 1 << endl;
            for(int x : vec)
                cout << x << ' ';
            return 0;
        }
    }

    cout << -1 << endl;
}
