#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <queue>
#include <cmath>
#include <iomanip>
#include <cstdio>
#include <cstring>

using namespace std;

//#define DEBUG

#define prev prev_

int u[300000];
pair<int, int> g[300000];
int cnt[300000];
int prev[300000];
int Next[300000];
int L[300000];
vector<int> Q;

long long Gcd(long long a, long long b, long long & x, long long & y) {
    if (a == 0) {
        x = 0; y = 1;
        return b;
    }
    long long x1, y1;
    long long d = Gcd(b%a, a, x1, y1);
    x = y1 - (b / a) * x1;
    y = x1;
    return d;
}

bool Find(long long a, long long b, long long c, long long & x0, long long & y0, long long & g) {
    g = Gcd(abs(a), abs(b), x0, y0);
    if (c % g != 0)
        return false;
    x0 *= c / g;
    y0 *= c / g;
    if (a < 0)   x0 *= -1;
    if (b < 0)   y0 *= -1;
    return true;
}

int main() {   
    ios_base::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        u[x] = 1;
    }
    for (int i = 0; i < m; i++) {
        int x = i;
        int y = m;
        while (x && y) {
            if (x > y) {
                x %= y;
            }
            else {
                y %= x;
            }
        }
        x += y;
        g[i] = make_pair(x, i);
    }
    sort(g, g + m);
    int lst = 0;
    int ans = 0, uk = -1;
    for (int i = 0; i < m; i++) {
        int x = g[i].first, y = g[i].second;
        if (u[y]) {
            continue;
        }
        int temp = 1, pred = -1;
        for (int j = 0; j < lst; j++) {     
            if (x % L[j] == 0) {
                if (cnt[L[j]] + 1 > temp) {
                    temp = cnt[L[j]] + 1;
                    pred = prev[L[j]];
                }
            }
        }

        Next[i] = pred;

        cnt[x] = temp;        
        prev[x] = i;

        if (temp > ans) {
            ans = temp;
            uk = i;
            //cout << x << " " << y << endl;
        }

        if (lst == 0 || L[lst - 1] != x) {
            L[lst++] = x;
        }
    }
    cout << ans << endl;
    while (uk >= 0) {
        Q.push_back(uk);        
        uk = Next[uk];
    }
    if (Q.size() >= 1) {
        reverse(Q.begin(), Q.end());
    }

    long long pn = 1, gcd = 1;
    for (int i = 0; i < Q.size(); i++) {
        long long x = g[Q[i]].second;
        long long y = g[Q[i]].first;
        long long ans, trash, G;
        Find(pn, -m, x, ans, trash, G);
        if (ans < 0) {
            ans %= (m / G);
        }
        while (ans < 0) {
            ans += m / G;
        }
        if (ans >= m) {
            ans = m + (ans - m) % (m / G);
        }
        while (ans >= m) {
            ans -= m / G;
        }
        
        cout << ans;
        if (i + 1 < Q.size()) {
            cout << " ";
        }
        else {
            cout << endl;
        }
        pn = x;
        gcd = y;
    }
    
    //system("pause");
    return 0;
}