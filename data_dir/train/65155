#include<bits/stdc++.h>
using namespace std;
const int N = 1e5 + 10;
int n, r, t, l, le, c, A[N], B[N];
map < int , int > M;
set < int > S[N];
vector < pair < int , int > > P;
bool Check(int p)
{
    if (!p)
        return (1);
    return (Check(p / 10) && (p % 10 == 4 || p % 10 == 7));
}
int main()
{
    scanf("%d", &n);
    for (int i = 1; i <= n; i++)
    {
        scanf("%d", &A[i]);
        B[i] = A[i];
        if (!M[A[i]])
            M[A[i]] = ++ c;
        if (r != 0 || !Check(A[i]))
            S[M[A[i]]].insert(i);
        else
            r = i;
    }
    sort(B + 1, B + n + 1);
    for (int i = 1; i <= n; i++)
        if (A[i] != B[i])
            t = 1;
    if (!t)
        return !printf("0");
    if (!r)
        return !printf("-1");
    l = lower_bound(B + 1, B + n + 1, A[r]) - B;
    for (int i = 1; i <= n; i++)
    {
        if (i == l)
            continue;
        if (A[i] == B[i] && i != r)
        {
            S[M[A[i]]].erase(i);
            continue;
        }
        if (i != r)
        {
            P.push_back({i, r});
            S[M[A[i]]].erase(i); S[M[A[i]]].insert(r);
            swap(A[r], A[i]); r = i;
        }
        P.push_back({r, *S[M[B[i]]].begin()});
        swap(A[r], A[*S[M[B[i]]].begin()]);
        r = *S[M[B[i]]].begin();
        S[M[B[i]]].erase(S[M[B[i]]].begin());
    }
    printf("%d\n", P.size());
    for (auto X : P)
        printf("%d %d\n", X.first, X.second);
    return (0);
}
