#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
#define  int long long int
typedef complex<long double> cd;
const long double pi=acos(-1);
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <db, db> pdd;
typedef vector<int> vi;
typedef vector<vector<int> > matrix;
#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))
#define sz(x) (int)(x.size())
#define ff first
#define ss second
#define endl "\n"
#define debug(x) (cerr << #x << ": " << x << "\n")
#define setbits(x) __builtin_popcount(x)
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p;}
const ll MOD =998244353;
const ll hell=1000000007;
const int INF = 1e17;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;

typedef tree<int, null_type, less<int>, rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;
const int N=5e5+5;pair<int,int> pr;
void solve()
{
    int n;
    cin>>n;
    int k;
    int fr[n],y;int cnt[1000001]={0};vi v[n];
    for(int i=0;i<n;i++)
    {
        cin>>k;
        v[i].resize(k);
        fr[i]=power(k,MOD-2,MOD);
        for(int j=0;j<k;j++)
        {
            cin>>v[i][j];
            cnt[v[i][j]]++;
        }
    }
    int ans=0,z,x;
    for(int i=0;i<n;i++)
    {
        z=0;
        for(int j=0;j<v[i].size();j++)
        {
            x=cnt[v[i][j]];
            z=(z+x)%MOD;
            
        }
        z=(z*fr[i])%MOD;
        ans=(ans+z)%MOD;
    }
    n=(n*n)%MOD;
    ans=(ans*power(n,MOD-2,MOD))%MOD;
    cout<<ans<<endl;
}
int32_t main()
{
    IOS;
    int t;
    t=1;
   // cin>>t;
    while(t--)
    {
        solve();
    }
    return 0;
}


