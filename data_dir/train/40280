#include <iostream>
#include <set>
#include <vector>
#include <map>
using namespace std;

const int N = 100005;
int n, m, a[105], range[105], u[N], ucs=1;
set<int> s;
map<int, int> fac[105];
vector<int> adj[105], r[N];
int yx[N], nL, nR;

void factorize(int v, map<int, int> &f) {
  for (int i = 2; i*i<=v; i++)
    while(v%i==0) v/=i, s.insert(i), f[i]++;
  if(v>1) s.insert(v), f[v]++;
}

bool dfs(int x) {
  u[x] = ucs;
  for (auto &&y : r[x]) if (yx[y] == -1) {
    yx[y] = x;
    return true;
  }
  for (auto &&y : r[x]) if (u[yx[y]] != ucs && dfs(yx[y])) {
    yx[y] = x;
    return true;
  }
  return false;
}

int main() {
  cin >> n >> m;
  for (int i = 1; i <= n; i++) cin >> a[i];
  for (int i = 0; i < m; i++) {
    int x, y;
    cin >> x >> y;
    adj[x].push_back(y);
    adj[y].push_back(x);
  }
  for (int i = 1; i <= n; i++) factorize(a[i], fac[i]);
  for (auto &&p : s) {
    for (int i = 1; i <= n; i++) {
      range[i] = (i%2? nL : nR);
      (i%2? nL : nR) += fac[i][p];
    }
    for (int i = 1; i <= n; i += 2)
      for (auto &&j : adj[i])
        for (int x = range[i]; x < range[i] + fac[i][p]; x++)
          for (int y = range[j]; y < range[j] + fac[j][p]; y++)
            r[x].push_back(y);
  }
  int ans = 0;
  for (int i = 0; i < nR; i++) yx[i] = -1;
  for (int i = 0; i < nL; i++, ucs++) {
    if (dfs(i))
      ++ans;
  }
  cout << ans << endl;
  return 0;
}
