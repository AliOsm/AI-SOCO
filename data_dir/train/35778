// 45
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define IOS ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0)
inline int in(){int32_t x ; scanf("%d",&x) ; return x ;}
inline long long lin(){long long x ; scanf("%lld",&x) ; return x;}
const int maxn = 1e6 + 10;
const int inf = 1e18 + 10;
int c[maxn],cur;
inline int where(int x) {return lower_bound(c,c+cur,x)-c;}
int fen[maxn];
inline int get(int p)
{
    int ret = 0;
    for (p += 4 ; p > 0 ; p -= p & - p )
        ret = max(ret,fen[p]);
    return ret;
}
inline void update(int p , int val)
{
    for (p += 4 ; p  < maxn ; p += p & - p)
        fen[p] = max(fen[p],val);
}
struct RING
{
    int a , b , h;
    inline bool operator <(const RING &B) const
    {
        if (b - B.b)
            return b > B.b;
        return a > B.a;
    }
}ring[maxn];
int res;
int32_t main()
{
    int n = in();
    for (int i = 0 ; i < n ; i ++){
        ring[i].a = in() , ring[i].b = in() , ring[i].h = in();
        c[cur ++] = ring[i].a;
        c[cur ++] = ring[i].b;
    }
    sort(c,c+cur);
    sort(ring,ring+n);
    for (int i = 0 ; i < n ; i ++)
    {
        int whereisit = where(ring[i].b);
        int value = get(whereisit - 1) + ring[i].h;
        update(where(ring[i].a),value);
        res = max(res,value);
    }
    cout << res << endl;
}