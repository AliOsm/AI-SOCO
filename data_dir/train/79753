#pragma comment(linker, "/stack:20000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>

//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/detail/standard_policies.hpp>

#define f first
#define s second

#define pb push_back
#define pp pop_back
#define mp make_pair

#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define rep(i, l, r) for (int i = l; i <= r; i++)
#define per(i, l, r) for (int i = l; i >= r; i--)

#define dbg(x) cerr << (#x) << " --> " << (x) << nl;
#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

#define Toktama //""

using namespace std;
//using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
//typedef tree < pair <int, int>, null_type, less < pair <int, int> >, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 1e5 + 7, inf = 1e9 + 7, mod = 1e9 + 7;
const ll linf = (ll)1e18 + 7;
const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1}, dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

int get_int() {
  char x = getchar();
  bool mns = 0;
  while (!isdigit(x)) mns |= x == '-', x = getchar();
  int res = 0;
  while (isdigit(x)) res = res * 10 + x - '0', x = getchar();
  if (mns) res = -res;
  return res;
}
void add(int &x, int y) {
  x += y;
  if (x >= mod) x -= mod;
  if (x < 0) x += mod;
}
int mult(int x, int y) {
  return x * 1ll * y % mod;
}
int sum(int x, int y) {
  add(x, y);
  return x;
}

const int p1 = 997, p2 = 2017;

int n, m, can;
int dp[N][31];
char s[N], t[N];
vector <int> pos[26];

struct node {
  int h1;
  ull h2;
  node() {}
  node(int h1, ull h2) : h1(h1), h2(h2) {}
  bool operator == (const node &x) {
    return h1 == x.h1 && h2 == x.h2;
  }
} dg[N];
struct _hash {
  node h[N];
  void init(char *s) {
    int len = strlen(s + 1);
    rep(i, 1, len) {
      h[i + 1].h1 = sum(mult(h[i].h1, p1), s[i]);
      h[i + 1].h2 = h[i].h2 * p2 + s[i];
    }
  }
  node get(int l, int r) {
    return node(sum(h[r + 1].h1, -mult(dg[r - l + 1].h1, h[l].h1)), h[r + 1].h2 - dg[r - l + 1].h2 * h[l].h2);
  }
} t1, t2;
void solve() {
  Kazakhstan
  cin >> n >> s + 1 >> m >> t + 1 >> can;
  dg[0] = node(1, 1);
  rep(i, 0, N - 1) {
    dg[i + 1].h1 = mult(dg[i].h1, p1);
    dg[i + 1].h2 = dg[i].h2 * p2;
  }
  t1.init(s);
  t2.init(t);
  rep(i, 0, can) {
    rep(j, 0, n) {
      int rp = dp[j][i];
      int l = 1, r = min(n - j, m - rp), res = -1;
      while (l <= r) {
        int mid = l + r >> 1;
        if (t1.get(j + 1, j + mid) == t2.get(rp + 1, rp + mid)) res = mid, l = mid + 1;
        else r = mid - 1;
      }
      if (res != -1) dp[j + res][i + 1] = max(dp[j + res][i + 1], dp[j][i] + res);
      dp[j + 1][i] = max(dp[j + 1][i], dp[j][i]);
    }
  }
  rep(i, 1, n)
    rep(j, 1, can)
      if (dp[i][j] == m) cout << "YES", ioi
  cout << "NO";
}
int main() {
  #ifndef Toktama
    freopen (Toktama".in", "r", stdin);
    freopen (Toktama".out", "w", stdout);
  #endif
  int test = 1;
  while (test--)
    solve();
  ioi
}
