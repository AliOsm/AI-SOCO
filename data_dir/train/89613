#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define DEBUG
#ifdef DEBUG
#define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
	template <typename Arg1>
	void __f(const char* name, Arg1&& arg1){
		cerr << name << " : " << arg1 << std::endl;
	}
	template <typename Arg1, typename... Args>
	void __f(const char* names, Arg1&& arg1, Args&&... args){
		const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
	}
#else
#define debug(...)
#endif
#define FOR(i,a,b) 	for(int i=a;i<b;++i)
#define RFOR(i,a,b) 	for(int i=a;i>=b;--i)
#define ln 		"\n"
#define mp make_pair
#define pb push_back
#define sz(a)	ll(a.size())
#define F first
#define S second
#define all(c)	c.begin(),c.end()
#define rall(c) c.rbegin(), c.rend()
#define trace(c,x) for(auto &x:c)
#define pii pair<ll,ll>
#define init(a, x) memset(a,x,sizeof(a))
typedef long long ll;
typedef long double ld;
typedef	priority_queue<pii,std::vector<pii>,greater<pii> > revpr;

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> pbds;
// ordered_set X
//K-th smallest
//*X.find_by_order(k-1)
//NO OF ELEMENTS < A
//X.order_of_key(A)

const int L=1e6+7;
map<ll,ll> counter;
ll fastexpo(ll x,ll y,ll m)
{
	ll temp=1;
	while(y>0)
	{
		if(y&1)temp = ((temp%m)*(x%m))%m;
		x = ((x%m)*(x%m))%m;
		y>>=1;
	}return temp;
}
int n, a[L], b[L];
bool check()
{
	int prv = a[0], f = 0;
	// FOR(i,0,n)cout<<a[i]<<" ";
	// cout<<ln;
	FOR(i,1,n)
	{
		if(a[i] == prv || a[i] < 0)return 0;
		if(!f)
		{
			if(a[i] > prv)prv = a[i];
			else f = 1, prv = a[i];
		}
		else
		{
			if(a[i] < prv)prv = a[i];
			else return 0;
		}
	}
	return 1;
}
void solve1()
{
	int prv = 1e9+1, f = 1;
	FOR(i,0,n)
	{
			if(a[i] >= prv)
			{
				a[i] = prv - 1;
				prv = a[i];
			}
			else
			{
				prv = a[i];
			}
	}
}
void solve()
{
	int prv = -1, f = 0;
	cin >> n;
	FOR(i,0,n)
	{
		cin >> a[i];
		b[i] = a[i];
	}
	if(check())
	{
		cout<<"Yes\n";
		return;
	}
	int idx = n;
	FOR(i,0,n)
	{
		if(a[i] < i)
		{
			idx = i-1;
			break;
		}
	}
	FOR(i,idx,n)
	{
		if(a[i] < n - i - 1)
		{
			cout<<"No\n";
			return;
		}
	}
	cout<<"Yes\n"; 
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	int t;cin >> t;while(t--)
	solve();
	return 0;
}