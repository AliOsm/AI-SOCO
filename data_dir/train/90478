#include <iostream>
#include <utility>
#include <algorithm>
#include<cmath>
#include<algorithm>
#include<vector>
#include<cstring>
#include <math.h>
#include <map>
#include <vector>
#include <iomanip>
#include <set>
#include <deque>
#define ss second
#define ff first
#define use_fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define ret(n) return cout << n, 0
#define se(n) cout << setprecision(n) << fixed
#define ll long long
#define pb push_back
using namespace std;

const ll N = 2e6, OO = 1e18 + 1000, M = 1e9 + 7;
typedef pair <int, int> pii;
ll dp[30][200], c[200][200], f[200][200];
bool b[30];

int main() {
	use_fast;
	ll n, m;
	cin >> n >> m;
	string s;
	cin >> s;
	for(int k = 0; k < 30; k++)
		for(int i = 0; i < 200; i++)
			dp[k][i] = -1;
	for(int i = 0; i < n; i++)
		c[0][i] = 1;
	for(int k = 0; k < n; k++) {
		if(k != 0)
			c[1][k] = c[1][k - 1];
		if(!b[s[k] - '0']) {
			b[s[k] - '0'] = true;
			c[1][k]++;
		}
	}
	for(int i = 2; i <= n; i++) {
		for(int j = i - 1; j < n; j++) {
			if(dp[s[j] - 'a'][i] == -1) {
				c[i][j] = c[i - 1][j - 1] + c[i][j - 1];
				dp[s[j] - 'a'][i] = j - 1;
			}
			else {
				c[i][j] = c[i][j - 1];
				c[i][j] += c[i - 1][j - 1] - c[i - 1][dp[s[j] - 'a'][i]];
				dp[s[j] - 'a'][i] = j - 1;
			}
		}
	}
	ll ans = 0;
	for(int i = n; i >= 0; i--) {
		if(m <= c[i][n - 1]) {
			ans += m * (n - i);
			m = 0;
			break;
		}
		else {
			m -= c[i][n - 1];
			ans += c[i][n - 1] * (n - i);
		}
	}
	if(m != 0)
		ret(-1);
	cout << ans;
	return 0;
}
