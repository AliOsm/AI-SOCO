#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;

const int maxn=2e6;
const ll mod=1e9+7;
ll fact[maxn],inv[maxn],ifact[maxn];
void calcInv(){
    for(int i=0;i<2;i++){
        fact[i]=1;
        ifact[i]=1;
        inv[i]=1;
    }
    for(int i=2;i<maxn;i++){
        fact[i]=(i*fact[i-1])%mod;
        ll q=mod/i,r=mod%i;
        inv[i]=(-q*inv[r])%mod;
        inv[i]=(inv[i]+mod)%mod;
        ifact[i]=(inv[i]*ifact[i-1])%mod;
    }
}


//modulo op


ll add(ll a,ll b){
    return (a+b)%mod;
}

ll sub(ll a,ll b){
    return ((a-b)%mod+mod)%mod;
}

ll mul(ll a,ll b){
    return (a*b)%mod;
}

ll DIV(ll a,ll b){
	return (a*inv[b])%mod;
}

//end of modulo op


const int maxlen=1e5+7;
int s[maxlen],t[maxlen];
int m,n;
ll ans=0;

void solve(int pos,ll val){
	if(pos>n)
		return;
	if(s[pos]!=0 && t[pos]!=0){
		if(s[pos]<t[pos])
			return;
		if(s[pos]>t[pos]){
			ans=add(ans,val);
			return;
		}else{
			solve(pos+1,val);
		}
	}else if(s[pos]==0 && t[pos]==0){
		ans=add(ans,mul(val,DIV(m-1LL,mul(2LL,m))));
		solve(pos+1,mul(val,DIV(1LL,m)));
	}else if(s[pos]==0){
		int rem=m-t[pos];
		ans=add(ans,mul(val,DIV(rem,m)));
		solve(pos+1,mul(val,DIV(1LL,m)));
	}else if(t[pos]==0){
		int rem=s[pos]-1;
		ans=add(ans,mul(val,DIV(rem,m)));
		solve(pos+1,mul(val,DIV(1LL,m)));
	}
}


int main()
{
	fastread;
	calcInv();
	cin>>n>>m;
	for(int i=1;i<=n;i++){
		cin>>s[i];
	}	
	for(int i=1;i<=n;i++){
		cin>>t[i];
	}
	solve(1,1);
	cout<<ans;
	return 0;
}