#include <bits/stdc++.h>
using namespace std;

using ll = long long;
const int inf = 1e9;
int n, arr[200010];
string s;
ll dp[200010][3];

ll DP(int pos, int cur) {
	if(pos <= 0) return cur != arr[0];
	if(dp[pos][cur] != -1) return dp[pos][cur];	

	ll ret = inf;
	for(int i = 0; i < 3; i++) {
		if(i == cur) continue;
		ret = min(ret, DP(pos-1, i) + (arr[pos] != cur));
	}
	return dp[pos][cur] = ret;
}

void construct(int pos, int cur) {
	if(cur == 0) s[pos] = 'R';
	else if(cur == 1) s[pos] = 'G';
	else s[pos] = 'B';
	if(pos == 0) return;
	for(int i = 0; i < 3; i++) {
		if(i == cur) continue;
		if(DP(pos,cur) == DP(pos-1,i) + (arr[pos] != cur)) {
			construct(pos-1, i);
			return;
		}
	}
}

int main() {
	cin >> n >> s;
	for(int i = 0; i < n; i++) {
		if(s[i] == 'R') arr[i] = 0;
		else if(s[i] == 'G') arr[i] = 1;
		else arr[i] = 2;
	}
	memset(dp,-1,sizeof dp);
	ll ans = inf;
	for(int i = 0; i < 3; i++)
		ans = min(ans, DP(n-1,i));
	for(int i = 0; i < 3; i++)
		if(DP(n-1,i) == ans) { construct(n-1,i); break; }
	cout << ans << "\n" << s;
	return 0;
}