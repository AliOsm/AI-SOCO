/// In The Name Of God

#include <bits/stdc++.h>

#define f first
#define s second

#define pb push_back
#define pp pop_back
#define mp make_pair

#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define rep(i, l, r) for (int i = (l); i <= (r); i++)
#define per(i, l, r) for (int i = (l); i >= (r); i--)

#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const int N = (int)2e5 + 7;
const int inf = (int)1e9 + 7;
const int mod = (int)1e9 + 7;
const ll linf = (ll)1e18 + 7;

const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1};
const int dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

using namespace std;

int n;
int a[N], p[N];

struct trie {
	int sz = 1;
	int nxt[N * 30][2], t[N * 30];

	void proc(int val, int x) {
		int v = 1;
		per(i, 29, 0) {
			int b = (val >> i) & 1;
			if (!nxt[v][b]) nxt[v][b] = ++sz;
			v = nxt[v][b];
			t[v] += x;
		}
	}
	int get_min(int x) {
		int val = 0, v = 1;
		per(i, 29, 0) {
			int b = (x >> i) & 1;
			if (t[nxt[v][b]]) {
				val += (1 << i) * b;
				v = nxt[v][b];
			}
			else {
				b ^= 1;
				val += (1 << i) * b;
				v = nxt[v][b];
			}
		}
		return val;
	}
} bor;

set <int> st;
vector <int> cmp[N];
int root(int v) {
	if (p[v] == v) return v;
	return p[v] = root(p[v]);
}
bool merge(int v, int u) {
	v = root(v), u = root(u);
	if (v == u) return 0;
	if (sz(cmp[v]) > sz(cmp[u])) swap(v, u);
	p[v] = u;
	cmp[u].insert(cmp[u].end(), all(cmp[v]));
	cmp[v].clear();
	st.erase(v);
	return 1;
}
int main() {
	#ifdef wws
		freopen ("in.txt", "r", stdin);
	#endif
	Kazakhstan
	cin >> n;
	rep(i, 1, n) {
		cin >> a[i];
	}
	sort (a + 1, a + 1 + n);
	rep(i, 1, n) {
		if (i && a[i] == a[i - 1]) continue;
		p[i] = i;
		st.insert(i);
		bor.proc(a[i], 1);
		cmp[i].pb(a[i]);
	}
	ll ans = 0;
	while (sz(st) > 1) {
		vector <pair <int, pair<int, int>>> connect;
		for (auto i : st) {
			for (auto it : cmp[i]) {
				bor.proc(it, -1);
			}
			int mn = INT_MAX;
			pair <int, int> edge = {-1, -1};
			for (auto it : cmp[i]) {
				int val = bor.get_min(it);
				if ((it ^ val) < mn) {
					mn = (it ^ val);
					edge = {it, val};
				}
			}
			for (auto it : cmp[i]) {
				bor.proc(it, 1);
			}
			assert(edge.s != -1);
			int ind = lower_bound(a + 1, a + 1 + n, edge.s) - a;
			connect.pb({mn, {i, root(ind)}});
		}
		for (auto it : connect) {
			if (merge(it.s.f, it.s.s)) {
				ans += it.f;
			}
		}
	}
	cout << ans;
	ioi
}
