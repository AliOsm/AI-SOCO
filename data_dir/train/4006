#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
#define all(x) (x).begin(), (x).end()
#define fi first
#define se second

const int maxN = 1 << 17;

const double eps = 1e-1;

struct Point {
    int x, y;
    Point(int xx, int yy) {
        x = xx, y = yy;
    }
    Point() {
        x = y;
    }
    Point operator + (Point b) {
        return Point(x + b.x, y + b.y);
    }
    Point operator - (Point b) {
        return Point(x - b.x, y - b.y);
    }
    ll operator * (Point b) {
        return 1ll * x * b.x + 1ll * y * b.y;
    }
    ll operator % (Point b) {
        return 1ll * x * b.y - 1ll * y * b.x;
    }
    double dist() {
        return sqrtl(1ll * x * x + 1ll * y * y);
    }
};


vector<Point> A, B;

int n, m;

int inSeg(Point a, Point b, Point c) {
    return fabs((a - c).dist() + (b - c).dist() - (a - b).dist()) < eps;
}

bool check(Point a) {
    int l = 0, r = n;
    while (r - l > 1) {
        int m = (r + l) / 2;
        if (A[m] % a > 0 && a % A[n - 1] > 0) {
            l = m;
        } else {
            r = m;
        }
    }
    if (l == 0 || l == n - 1) {
        return 0;
    }
    return (a - A[l]) % (A[l + 1] - A[l]) < 0;
}

int main() {
    cin >> n;
    A.resize(n);
    for (auto &a : A) {
        cin >> a.x >> a.y;
    }
    reverse(all(A));
    cin >> m;
    B.resize(m);
    Point aa = A[0];
    for (auto &b : B) {
        cin >> b.x >> b.y;
        b = b - A[0];
    }
    for (auto &a : A) {
        a = a - aa;
    }
    A.push_back(A[0]);
    for (auto &b : B) {
        if (!check(b)) {
            cout << "NO" << endl;
            return 0;
        }
    }
    cout << "YES" << endl;
    return 0;
}
