using namespace std;
#include<bits/stdc++.h>
#define ll long long
#define pr pair<ll,ll>
#define fir first
#define sec second
#define mp make_pair
#define pb push_back
#define sz(c) ((int)c.size())
#define all(c) (c).begin(),(c).end()
#define fn "463D"  /// ___FILE_NAME_HERE___
#define rep(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define __rep(c,it) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();it++)
#define ford(i,a,b) for(int i=a;i<=b;i++)
#define __ford(i,a,b) for(int i=a;i>=b;i--)

const int MAXN=1e3+33;
const int inf=1e9+7;
vector <int> adj[MAXN],f;
int mark[MAXN],topo[MAXN],pos[6][MAXN];
int n,k,t,ans=-inf;

inline void dfs(int u)
{
    mark[u]=true;
    for(int i=0; i<sz(adj[u]); i++)
    {
        int v=adj[u][i];
        if(!mark[v])dfs(v);
    }
    topo[t--]=u;
}

inline int process(int start)
{
    f.assign(n+2,-inf);
    for(int i=1; i<=n; i++)
    {
        int u=topo[i];
        if(u==start)f[u]=1;
        if(f[u]==-inf)continue;
        for(int j=0; j<sz(adj[u]); j++)
        {
            int v=adj[u][j];
            f[v]=max(f[v],f[u]+1);
        }
    }
    return *max_element(all(f));
}

inline void buildGraph()
{
    for(int i=1; i<=n; i++)
        for(int j=1; j<=n; j++)
        {
            bool can=true;
            for(int it=1; it<=k; it++)
                if(pos[it][i] >= pos[it][j])
                {
                    can=false;
                    break;
                }
            if(can)adj[i].pb(j);
        }
}

int main(void)
{
#ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
#endif // ONLINE_JUDGE
    scanf("%d%d",&n,&k);
    t=n;
    for(int i=1; i<=k; i++)
        for(int x,j=1; j<=n; j++)
            scanf("%d",&x),pos[i][x]=j;
    buildGraph();
    for(int i=1; i<=n; i++)if(!mark[i])dfs(i);
    for(int i=1; i<=n; i++)
        ans=max(ans,process(i));
    printf("%d",ans);
}
