#include <bits/stdc++.h>
using namespace std;
vector<vector<pair<long long,long long>>> graph;
vector<pair<long long,pair<long long,long long>>> v;
long long n,m,k;

int main(){
    ios_base::sync_with_stdio(false);
    cout.tie(NULL);
    cin.tie(NULL);
    cin >> n >> m >> k;
    graph.resize(n+1);
    for(long long i = 0 ; i < m ; i += 1){
        int a,b,c;
        cin >> a >> b >> c;
        v.push_back({c,{a,b}});
    }
    sort(v.begin(),v.end());
    for(long long i = 0 ; i < min(m,k) ; i += 1){
        graph[v[i].second.first].push_back({v[i].second.second,v[i].first});
        graph[v[i].second.second].push_back({v[i].second.first,v[i].first});
    }
    vector<long long> vals;
    for(long long i = 1 ; i <= n ; i += 1){
        map<long long,long long> mp;
        priority_queue<pair<long long,long long>> pq;
        pq.push({0,i});
        while(pq.size() > 0){
            pair<long long,long long> next = pq.top();
            pq.pop();
            if(mp.find(next.second) == mp.end()){
                mp[next.second] = -next.first;
            }
            if(-next.first > mp[next.second]){
                continue;
            }
            for(pair<long long,long long> j : graph[next.second]){
                if(mp.find(j.first) == mp.end() || -next.first+j.second < mp[j.first]){
                    pq.push({next.first-j.second,j.first});
                }
            }
        }
        for(auto j : mp){
            if(j.second == 0){
                continue;
            }
            vals.push_back(j.second);
        }
    }
    sort(vals.begin(),vals.end());
    cout << vals[k+k-1];
}