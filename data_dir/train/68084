#include <iostream>
#include <vector>
#include <bits/stdc++.h>

using namespace std;
typedef  long long ll;
typedef unsigned long long ull;
const int inf_int=1e9+100;
const ll inf_ll=1e16;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef long double dbl;
#define pb push_back
const double pi=3.1415926535898;
#define dout if(debug) cout
#define fi first
#define se second
#define sp setprecision
#define sz(a) (int(a.size()))
#define all(a) a.begin(),a.end()
bool debug = 0;
const int MAXN = 1e5+100;
const int LOG = 20;
const ll mod =998244353;
const int MX = 1e6+100;

#define next ngpgl
int next[MX][26];
int suflink[MX];
int leaf[MX];
void init(){
    memset(next,-1,sizeof next);
}

struct Fenwick_tree{
    int t[MX];
    Fenwick_tree(){
        memset(t,0,sizeof t);
    }

    void add(int l,int r,int val){
        add(l,val);
        add(r+1,-val);
    }

    void add(int pos,int val){

        for(;pos<MX;pos=(pos|(pos+1))){
            t[pos]+=val;
        }
    }

    int get(int r){
        int res = 0;
        for(;r>=0;r=(r&(r+1))-1){
            res+=t[r];
        }
        return res;
    }

} tree;



int top = 1;
int pos[MAXN];
int cnt[MAXN];
int add_string(string& s){
    int v = 0;
    for(char c:s){
        c = c -'a';
        if(next[v][c]==-1){
            next[v][c] = top++;
        }
        v = next[v][c];
    }
    return v;

}
vector<int> g[MX];

void build_aho(){
    queue<int> q;
    q.push(0);
    while(!q.empty()){
        int v = q.front(); q.pop();
        for(int c=0;c<26;++c){
            int sufVal = v==0?0:next[suflink[v]][c];
            int to = next[v][c];
            if(to == -1){
                next[v][c] = sufVal;
            } else{
                suflink[to] = sufVal;
                q.push(to);
                g[sufVal].pb(to);
                dout <<"Add_ edge "<< sufVal <<" "<<to<<endl;
            }
        }
    }
}

int tin[MX],tout[MX],timer;
void dfs(int v){
    tin[v] = ++timer;
    for(int to:g[v]){
        dfs(to);
    }
    tout[v] = timer;
}


void solve(){
    init();
    int n,q;
    cin >> q >> n;
    for(int i=1;i<=n;++i){
        string x;
        cin >> x;
        int v = add_string(x);
        pos[i] = v;
        cnt[i] = 1;
        dout <<"pos i : "<<v<<endl;
    }
    dout <<"strings addede " <<endl;
    build_aho();
    dout <<"aho builded " <<endl;
    dfs(0);
    dout <<"dfs "<<endl;
    for(int i=1;i<=n;++i){
        dout <<"add "<<i <<" - "<<pos[i]<<" : "<< tin[pos[i]]<<" "<<tout[pos[i]]<<endl;
        tree.add(tin[pos[i]],tout[pos[i]],1);
    }

    for(int j=1;j<=q;++j){
        char c;
        cin >> c;
        if(c=='?'){
            string x;
            cin >> x;
            dout << "ask "<<x<<endl;
            int v = 0;
            ll res = 0;
            for(char c:x){
                v = next[v][c-'a'];
                dout <<"go "<<c <<" "<<v <<" - "<<tree.get(tin[v])<<endl;
                res += tree.get(tin[v]);
            }
            cout << res<<"\n";
        } else if(c=='-'){

            int v;
            cin >> v;
            dout <<"change "<<v<<endl;
            if(cnt[v]==0)
                continue;
            dout <<"added -1"<<endl;
            tree.add(tin[pos[v]],tout[pos[v]],-1);
            cnt[v]^=1;
        } else{
            int v;
            cin >> v;
            dout <<"change "<<v<<endl;
            if(cnt[v]==1)
                continue;
            dout <<"added 1"<<endl;
            tree.add(tin[pos[v]],tout[pos[v]],+1);
            cnt[v]^=1;
        }
    }




}

signed main()
{
        #ifdef zxc
            debug = 1;
           freopen("input.txt","r",stdin);
            //freopen("output1.txt","w",stdout);
        #else
        #endif //zxc
        ios_base::sync_with_stdio(0);
        cin.tie(0); cout.tie(0);
        cout.setf(ios::fixed);
        cout.precision(20);
        int t = 1;
        while(t--)
            solve();
}
