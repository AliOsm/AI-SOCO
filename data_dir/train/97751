#include <cstdio>
#include <cstring>
#include <vector>

using namespace std;

char passage[3010];
int szPassage;

std::vector<int> points;



bool isVowel(char ch)
{
     if (ch == 'a')
          return true;
     if (ch == 'e')
          return true;
     if (ch == 'i')
          return true;
     if (ch == 'o')
          return true;
     if (ch == 'u')
          return true;
     return false;
}

bool isOneRow(int start, int end)  //[)
{
     char ch = passage[start];
     
     for (int i = start + 1 ; i < end ; i++)
          if (passage[i] != ch)
               return false;
     
     return true;
}

void doSplit(int start, int end)	//[)
{
	int ps, pe;
	ps = start;
	pe = ps + 1;
	char formerP;
     
     while (pe < end)
     {
     	formerP = passage[ps];
     	while (pe < end && passage[pe] == formerP)	//is in A row?
     	{
     		pe++;
		}
		
		if (pe < end)
		{
			int len = pe - ps;
			while (pe < end && (pe - ps) < 2)
				pe++;
				
			if (pe < end && ((pe - ps) >= 2))
				points.push_back(pe);
			ps = pe;
		}
	}
}

int main()
{
     gets(passage);
     szPassage = strlen(passage);
     
     int start = 0, end = 0;
     for (int i = 0 ; i < szPassage ; i++)
     {
          if (isVowel(passage[i]))
          {
               doSplit(start, end);          	
/*               if (!isOneRow(start, end))    //[)
               {
                    if ((end - start) > 2)   //must split
                    {
                         int p = start + 2;
                         while (p < end)
                         {
                              points.push_back(p);
                              p = p + 2;
                         }
                    }
               }*/
               
               start = i + 1;
               end = i + 1;
          }
          else
          {
               end++;
          }
     }
     
     doSplit(start, end);

     /*if (!isOneRow(start, end))    //[)
     {
          if ((end - start) > 2)   //must split
          {
               bool inOneRow = true;
               char formerP = ;
               
               int p = start;
               while (p < end)
               {
               		int nextP;
               		if (canCombine(p))
               		{
                    	
                    	
               		}
               		else
               		{
               			points.push_back(p);
               			nextP = p + 2;
					}
					p = nextP;
                    
               }
          }
     }*/
     
     int former = 0, next;
     bool isFirst = true;
     for (int i = 0 ; i < points.size() ; i++)
     {
          next = points[i];   //[)
          
          if (isFirst)
               isFirst = false;
          else
               printf(" ");
          
          for (int j = former ; j < next ; j++)
               printf("%c", passage[j]);
          
          former = next;
     }
     
     if (former < szPassage)
     {
          if (!isFirst)
               printf(" ");
          
          for (int j = former ; j < szPassage ; j++)
               printf("%c", passage[j]);          
     }
     
     printf("\n");
     
     return 0;
}
