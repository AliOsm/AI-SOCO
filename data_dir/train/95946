//besmellah
#include <bits/stdc++.h>
using namespace std;

typedef tuple <int, int, int> tii;

const int maxn = 5e5 + 1;
vector <tii> vec;
vector <int> compress;
map <int, int> M;
int seg[4 * maxn];

void add(int id, int L, int R, int idx, int val) {
	if (idx < L || idx >= R)
		return;
	if (R == L + 1) {
		seg[id] = max(seg[id], val);
		return;
	}
	int mid = (L + R) / 2;
	add(2 * id + 0, L, mid, idx, val);
	add(2 * id + 1, mid, R, idx, val);
	seg[id] = max(seg[2 * id], seg[2 * id + 1]);
}

int get(int id, int L, int R, int l, int r) {
	if (R <= l || r <= L)
		return 0;
	if (L >= l && R <= r)
		return seg[id];
	int mid = (L + R) / 2;
	return max(get(2 * id, L, mid, l, r), get(2 * id + 1, mid, R, l, r));
}

int main() {
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		int tmp;
		cin >> tmp;
		vec.push_back(tii(tmp, 0, 0));
	}
	for (int i = 0; i < n; i++) {
		int tmp;
		cin >> tmp;
		get<1>(vec[i]) = tmp;
		compress.push_back(tmp);
	}
	for (int i = 0; i < n; i++) {
		int tmp;
		cin >> tmp;
		get<2>(vec[i]) = tmp;
	}
	sort(vec.begin(), vec.end());
	reverse(vec.begin(), vec.end());
	sort(compress.begin(), compress.end());
	compress.resize(unique(compress.begin(), compress.end()) - compress.begin());
	int sz = compress.size();
	for (int i = 0; i < sz; i++) {
		M[compress[i]] = i;
	}
	int ans = 0, ptr = 0;
	for (auto T: vec) {
		int B = get<0>(T), I = get<1>(T), R = get<2>(T);
		while (get<0>(vec[ptr]) > B) {
			add(1, 0, sz, M[get<1>(vec[ptr])], get<2>(vec[ptr]));
			ptr++;
		}
		if (get(1, 0, sz, M[I] + 1, sz) > R)
			ans++;
	}
	cout << ans;
}
