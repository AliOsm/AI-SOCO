#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/STACK:16777216")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

int rg[30];

ll solve(string s) {
    int n = s.length();
    ll ans = 0;
    ans += s[0] - '0';
    ll c = s[0] - '0' - 1;
    bool flag = false;
    for (int i = 1; i < n; ++i) {
        ans += 9 * c;
        if (!flag) {
            ans += s[i] - '0';
        }
        else {
            ans += 9;
        }
        flag |= (s[i] != '0');
    }
    rg[n] = -1;
    for (int i = n - 1; i >= 0; --i) {
        if (s[i] == '0') {
            rg[i] = rg[i + 1];
        }
        else {
            rg[i] = i;
        }
    }
    flag = false;
    for (int i = 1; i < n; ++i) {
        ans += 81 * c * (n - i - 1);
        if (flag) {
            ans += 81 * (n - i - 1);
        }
        else if (s[i] != '0') {
            ans += 9 * (s[i] - '0' - 1) * (n - i - 1);
            if (rg[i + 1] != -1) {
                ans += (s[rg[i + 1]] - '0');
                ans += (n - rg[i + 1] - 1) * 9;
            }
        }
        flag |= (s[i] != '0');
    }
    return ans;
}

signed main() {
    FAST_IO();
    int q;
    cin >> q;
    while (q--) {
        ll l, r;
        cin >> l >> r;
        string L = to_string(l - 1);
        string R = to_string(r);
        ll ans = 0;
        ans += solve(R);
        int len = R.length();
        len--;
        while (len >= 1) {
            string s = "";
            for (int i = 0; i < len; ++i) {
                s += '9';
            }
            ans += solve(s);
            len--;
        }
        ans -= solve(L);
        len = L.length();
        len--;
        while (len >= 1) {
            string s = "";
            for (int i = 0; i < len; ++i) {
                s += '9';
            }
            ans -= solve(s);
            len--;
        }
        cout << ans << '\n';
    }
}
