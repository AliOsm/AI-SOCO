#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 
#define ll long long

#ifdef sarthak
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
int begtime = clock();
#else
#define trace(...)
#endif

#ifndef sarthak
    #pragma GCC optimize("Ofast")
    #pragma GCC optimize("unroll-loops")
    // #pragma GCC target ("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#endif

#define foreach(it,ar) for (auto it = ar.begin(); it != ar.end(); it++)
#define fort(i,v) for(auto i:v)
#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) rep(i,sizeof(ar)/sizeof(ll)) ar[i]=val
#define fill2(ar,val) rep(i,sizeof(ar)/sizeof(ar[0])) rep(j,sizeof(ar[0])/sizeof(ll)) ar[i][j]=val
#define fill0(ar) memset(ar,0,sizeof(ar))
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%lld",&x)
#define sd2(x,y) scanf("%d %d",&x,&y)
#define slld2(x,y) scanf("%lld %lld",&x,&y)
#define pd(x) printf("%d\n",x)
#define plld(x) printf("%lld\n",x)
#define pd2(x,y) printf("%d %d\n",x,y)
#define plld2(x,y) printf("%lld %lld\n",x,y)
#define all(ar) ar.begin(), ar.end()
#define endl '\n'
#define sz(x) (int)x.size()
#define len(x) (int)x.length()

typedef pair<ll, ll> ii;
typedef pair<ii, ll> iii;
typedef vector<ii> vii;
typedef vector<ll> vi;

#define INF 1000000000000000000
#define PI 3.14159265358979323846L

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rngb(chrono::steady_clock::now().time_since_epoch().count()); // can give negative values too

// TrieNode* root = getNode(); in the main function !!
#define LL_SIZE 64

struct TrieNode { 
    ll value;  
    ll x;
    bool com;
    TrieNode* Child[2]; 
}; 
  
TrieNode* getNode() 
{ 
    TrieNode* newNode = new TrieNode; 
    newNode->value = 0; 
    newNode->x = 0;
    newNode->com = 0;
    newNode->Child[0] = newNode->Child[1] = NULL; 
    return newNode; 
} 
  
// inserting a value in a binary trie !!
void insert(TrieNode* root, ll key) 
{ 
    TrieNode* temp = root; 
  
    for (ll i = LL_SIZE - 1; i >= 0; i--) { 
        bool current_bit = (key & (1ll << i)); 
  
        if (temp->Child[current_bit] == NULL) 
            temp->Child[current_bit] = getNode(); 
  
        temp = temp->Child[current_bit];
        temp->x++; 
    } 
    
    temp->com = 1;
    temp->value = key; 
}

// finding the max xor that pre_xor can have !!
ll query(TrieNode *root, ll pre_xor) 
{ 
    TrieNode *temp = root; 
    bool hu = 0;
    ll ans = 0;

    for (ll i=LL_SIZE-1; i>=0; i--) 
    { 
        bool val = pre_xor & (1ll<<i); 
        if(!hu)
        {
            if(temp->Child[val]==NULL)
            {
                ans = ans*2 + val;
                hu = 1;
            }
            else
            {
                if(!temp->Child[val]->com)
                {
                    ans = ans*2 + val;
                    temp = temp->Child[val];
                }
                else
                {
                    if(temp->Child[1-val]==NULL)
                    {
                        ans = ans*2 + (1-val);
                        hu = 1;
                    }
                    else
                    {
                        ans = ans*2 + (1-val);
                        temp = temp->Child[1-val];
                    }
                }
            }
        }
        else
        {
            ans = ans*2 + val;
        }
    }  

    return pre_xor^ans;
}

void DFS(TrieNode* root)
{
    bool x = 1;
    if(root->Child[0]!=NULL)
    {
        DFS(root->Child[0]);
        x = x&root->Child[0]->com;
    }
    if(root->Child[1]!=NULL)
    {
        DFS(root->Child[1]);
        x = x&root->Child[1]->com;
    }

    if(root->Child[0]==NULL && root->Child[1]==NULL)
    {
        x = 1;
        root->com = x;
        return;
    }
    if(root->Child[0]!=NULL && root->Child[1]!=NULL)
    {
        root->com = x;
        return;
    }

    root->com = 0;
    return;
}

void solve()
{
    TrieNode* root = getNode();
    ll n,m;
    cin >> n >> m;

    ll a[n];
    rep(i,n)
    {
        cin >> a[i];
        insert(root,a[i]);
    }
    DFS(root);

    ll now = 0;
    while(m--)
    {
        ll x;
        cin >> x;
        now = now^x;

        cout << query(root,now) << endl;
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout << fixed;
    cout << setprecision(10);
    #ifdef sarthak
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll t = 1;
    // cin >> t;
    while(t--)
    {
        solve();
    }

    #ifdef sarthak
    cerr << "Time elapsed: " << (clock() - begtime)*1000/CLOCKS_PER_SEC << " ms\n\n";
    #endif
}
