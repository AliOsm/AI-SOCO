#include <bits/stdc++.h>

using namespace std;

#define mx 200005
#define int long long
#define pii pair <int, int>
#define piii pair <int, pii>
#define fi first
#define se second
#define mod 1000000007
#define inf 1e18+19
#define pb push_back
#define si(x) scanf("%lld", &x)
#define mem(ara, x) memset(ara, x, sizeof ara)
#define read() freopen("in.txt", "r", stdin)
#define write() freopen("out.txt", "w", stdout)
#define fst ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

struct node{
    int prop, sum;
}tree[mx*5];

void update(int node, int b, int e, int i, int j, int val){
    if(tree[node].prop!=0){
        int tp = tree[node].prop;
        tree[node].prop = 0;
        tree[node].sum += tp;
        if(b!=e){
            tree[node*2].prop += tp;
            tree[node*2+1].prop += tp;
        }
    }
    if (i > e || j < b)
        return;
    if (b >= i && e <= j){
        tree[node].sum += val;
        if(b!=e){
            tree[node*2].prop += val;
            tree[node*2+1].prop += val;
        }
        return;
    }
    int Left = node * 2;
    int Right = (node * 2) + 1;
    int mid = (b + e) / 2;
    update(Left, b, mid, i, j, val);
    update(Right, mid + 1, e, i, j, val);
    tree[node].sum = max(tree[Left].sum, tree[Right].sum);
}

int query(int node, int b, int e, int i, int j){
    if(tree[node].prop!=0){
        int tp = tree[node].prop;
        tree[node].prop = 0;
        tree[node].sum += tp;
        if(b!=e){
            tree[node*2].prop += tp;
            tree[node*2+1].prop += tp;
        }
    }
    if (i > e || j < b)
        return 0;

    if (b >= i and e <= j)
        return tree[node].sum;

    int Left = node << 1;
    int Right = (node << 1) + 1;
    int mid = (b + e) >> 1;

    int p1 = query(Left, b, mid, i, j);
    int p2 = query(Right, mid + 1, e, i, j);
    tree[node].sum = max(tree[Left].sum, tree[Right].sum);
    return max(p1, p2);
}

int x[mx], y[mx], z[mx], arm[mx];
vector <pii> def;
priority_queue <pii, vector<pii>, greater <pii> > q;

int32_t main(){
    //read();
    fst;
    int n, m, p;
    while(cin >> n >> m >> p){
        for(int i=0;i<n;i++){
            int a;
            cin >> a >> arm[i];
            q.push({a, -i-1});
        }
        for(int i=0;i<m;i++){
            int b, cb;
            cin >> b >> cb;
            def.pb({b, cb});
        }
        sort(def.begin(), def.end());
        mem(tree, 0);
        for(int i=0;i<m;i++){
            update(1, 1, m, i+1, i+1, -def[i].se);
        }
        int ans = -inf;
        for(int i=0;i<p;i++){
            cin >> x[i] >> y[i] >> z[i];
            q.push({x[i], i+1});
        }
        while(!q.empty()){
            pii d = q.top();
            q.pop();
            if(d.se > 0){
                int temp = mod;
                int idx = upper_bound(def.begin(), def.end(), make_pair(y[d.se-1], temp)) - def.begin();
                if(idx >= m) continue;
                //cout << def[idx].fi << " " << y[d.se-1] << " " << idx << endl;
                update(1, 1, m, idx+1, m, z[d.se-1]);
            }
            else{
                int idx = - d.se - 1;
                ans = max(ans, query(1, 1, m, 1, m) - arm[idx]);
            }
        }
        cout << ans << endl;
        def.clear();
    }
    return 0;
}














