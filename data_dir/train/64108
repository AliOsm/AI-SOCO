#include <cstring>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <math.h>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <vector>
#include <set>
#include <complex>
#include <list>
#include <climits>
#include <cctype>
#include <bitset>

using namespace std;

#define all(v)              ((v).begin()), ((v).end())
#define allr(v)             ((v).rbegin()), ((v).rend())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define MP                  make_pair
#define lpv(i, v)           for(int i=0;i<sz(v);++i)
#define lpn(i, n)           for(int i=0;i<(int)(n);++i)
#define lps(i, j, n)        for(int i=(j);i<(int)(n);++i)
#define lpb(i, j, n)        for(int i=(j);i>=(int)(n);--i)
#define nul                 puts("")
#define PI                  3.14159265358979323846
#define EP                  1e-7

typedef long long                   ll;
typedef long double                 LD;
typedef vector<bool>                vb;
typedef vector<int>                 vi;
typedef vector<ll>                  vl;
typedef vector<string>              vs;
typedef vector<double>              vd;
typedef vector<pair<int, int> >     vpi;
typedef vector<pair<ll, ll> >       vpl;
typedef vector<pair<string, int> >  vsi;
typedef multiset<int>               mls;
typedef vector< vi >                vvi;
typedef vector< vl >                vvl;
typedef complex<double>             point;
vector<bool>vist;
vector<vector<int> >adj;
int n, m;

void dfs(int node)
{
    vist[node] = true;
    lpv(i, adj[node])
        if (!vist[adj[node][i]])
            dfs(adj[node][i]);
}

int main()
{
//  dfs(0);
    cin >> n >> m;
    adj.resize(m);
    int cnt = 0,z=0;
    for (int i = 0; i < n; i++)
    {
        int r;
        cin >> r;
        vi v(r);
        if (r == 0)
            z++;
        
        lpn(j, r) cin >> v[j],v[j]--;
        lpn(j, r - 1) adj[v[j]].push_back(v[j + 1]), adj[v[j + 1]].push_back(v[j]);
        lpn(j, r){
            adj[v[0]].push_back(v[j]);
        }
    }
    vist.resize(m);
    for (int i = 0; i < m; i++)
        if (!vist[i]&&adj[i].size()!=0)
            cnt++, dfs(i);

    cout << max(0,cnt - 1) + z << endl;

    //system("pause");
    return 0;
}


