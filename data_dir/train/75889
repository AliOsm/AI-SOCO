#include <cstdio>

#include <cmath>

#include <cstring>

#include <iostream>

#include <algorithm>

#include <queue>

#include <vector>

#include <map>



using namespace std;



typedef long long LL;


struct Node
{
    int nxt[26];
    int w;
}tree[1000005];
int num,len;
char str[10005];
string s[100005],ss[100005];
bool f[10005];
int g[10005];
int n;
void insert(int id)
{
    int dq,l;
    dq=0;
    l=s[id].size();
    for (int i=l-1;i>=0;--i)
    {
        if (tree[dq].nxt[s[id][i]-'a']==0)
        {
            ++num;tree[dq].nxt[s[id][i]-'a']=num;
        }
        dq=tree[dq].nxt[s[id][i]-'a'];
    }
    tree[dq].w=id;
}
void work(int st)
{
    int dq;
    dq=0;
    for (int i=st+1;i<=len;++i)
    {
        if (tree[dq].nxt[str[i]-'a']==0) return;
        dq=tree[dq].nxt[str[i]-'a'];
        if (tree[dq].w==0) continue;
        f[i]=true;g[i]=tree[dq].w;
    }
}

int main()

{
    scanf("%d",&len);
    scanf("%s",str+1);
    scanf("%d",&n);
    for (int i=0;i<=1000000;++i) tree[i].w=0;
    for (int i=0;i<=1000000;++i)
        for (int j=0;j<26;++j) tree[i].nxt[j]=0;
    for (int i=1;i<=n;++i)
        cin>>s[i];
    for (int i=1;i<=n;++i) ss[i]=s[i];
    for (int i=1;i<=n;++i)
    {
        int l=s[i].size();
        for (int j=0;j<l;++j)
            if (s[i][j]>='A'&&s[i][j]<='Z') s[i][j]=s[i][j]-'A'+'a';
    }
    for (int i=1;i<=n;++i) insert(i);
    memset(f,false,sizeof(f));
    memset(g,0,sizeof(g));
    f[0]=true;
    for (int i=0;i<=len;++i)
    {
        if (!f[i]) continue;
        work(i);
    }
    int dq=len,dqlen=0;
    int ans[100005];
    while (dq!=0)
    {
        ++dqlen;
        ans[dqlen]=g[dq];
        dq-=s[g[dq]].size();
    }
    for (int i=dqlen;i>=1;--i)
        cout<<ss[ans[i]]<<" ";

    return 0;

}