#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>

using namespace std;

#define int long long
#define ll long long
//#define double long double
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()

const int INF = 1e9;
const int MB = 30;
const int MOD = 1e9 + 7;

int n;
vector<vector<int>> g;
vector<int> pr;
vector<bool> good;

void dfs(int v, vector<int>& d, int p = -1) {
    for (int u : g[v]) {
        if (u != p) {
            d[u] = d[v] + 1;
            pr[u] = v;
            dfs(u, d, v);
        }
    }
}

vector<int> getD(int x) {
    vector<int> d(n);
    pr[x] = -1;
    dfs(x, d);
    return d;
}

void dfs(int v, int one, int two, vector<int>& d1, vector<int>& d2, vector<pair<int, int>>& res, int& ans, int p = -1) {
    good[v] = true;
    
    for (int u : g[v]) {
        if (u != p && !good[u]) {
            dfs(u, one, two, d1, d2, res, ans, v);
        }
    }
    if (d1[v] > d2[v]) {
        res.push_back({ one, v });
        ans += d1[v];
    }
    else {
        res.push_back({ two, v });
        ans += d2[v];
    }
}

void solve() {
    cin >> n;
    g.resize(n);
    for (int i = 0; i < n - 1; i++) {
        int from, to;
        cin >> from >> to;
        from--; to--;
        g[from].push_back(to);
        g[to].push_back(from);
    }

    pr.resize(n);

    vector<int> d1 = getD(0);
    int v = max_element(all(d1)) - d1.begin();
    d1 = getD(v);
    int u = max_element(all(d1)) - d1.begin();
    vector<int> d2 = getD(u);

    good.resize(n);
    int x = v;
    while (x != -1) {
        good[x] = true;
        x = pr[x];
    }
    vector<pair<int, int>> res;
    int ans = 0;
    x = v;
    while (x != -1) {
        for (int y : g[x]) {
            if (!good[y]) dfs(y, v, u, d1, d2, res, ans);
        }
        x = pr[x];
    }

    while (pr[v] != -1) {
        ans += d2[v];
        res.push_back({ u, v });
        v = pr[v];
    }

    cout << ans << '\n';
    for (auto& p : res) cout << p.first + 1 << " " << p.second + 1 << " " << p.second + 1 << '\n';
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    //int t;
    //cin >> t;
    int t = 1;
    //srand(time(0));
    while (t--) solve();
}