#include <bits/stdc++.h>

using namespace std;

const int N=100005;
const int inf=1000000000;

int a[N];
pair<int,int> t[4*N];

void build(int v, int tl, int tr){
    if(tl>tr)return;
    if(tl==tr)return void(t[v]={a[tl],tl});
    int tm=(tl+tr)>>1;
    build(v+v,tl,tm);
    build(v+v+1,tm+1,tr);
    t[v]=max(t[v+v],t[v+v+1]);
}

pair<int,int> get_max(int v, int tl, int tr, int l, int r){
    if(tl>tr || l>r || l>tr || tl>r)return {-inf,-inf};
    if(tl>=l && tr<=r)return t[v];
    int tm=(tl+tr)>>1;
    return max(get_max(v+v,tl,tm,l,r),get_max(v+v+1,tm+1,tr,l,r));
}

signed main()
{
#ifdef files
	ifstream cin("input.txt");
	ofstream cout("output.txt");
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin >> n;
    for(int i=0; i<n-1; i++){
        cin >> a[i];
        a[i]--;
    }
    a[n-1]=n-1;
    build(1,0,n-1);
    vector<long long> dp(n);
    long long sum=0;
    for(int i=n-2; i>=0; i--){
        int pos=get_max(1,0,n-1,i+1,a[i]).second;
        dp[i]=dp[pos]-(a[i]-pos)+n-1-i;
        sum+=dp[i];
    }
    cout << sum;
}
