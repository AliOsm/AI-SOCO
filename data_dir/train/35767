#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

//#define PB push_back
#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template < typename F, typename S > ostream& operator << ( ostream& os, const pair< F, S > & p ) { return os << "(" << p.first << ", " << p.second << ")"; }
template < typename T > ostream &operator << ( ostream & os, const vector< T > &v ) { os << "{";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "}";}
template < typename T >ostream &operator << ( ostream & os, const set< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename T >ostream &operator << ( ostream & os, const multiset< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename F, typename S >ostream &operator << ( ostream & os, const map< F, S > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << it -> first << " = " << it -> second ;}return os << "]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
clock_t tStart = clock();
#define timeStamp dbg("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)
void faltu () {cerr << endl;}
template <typename T>void faltu( T a[], int n ) {for(int i = 0; i < n; ++i) cerr << a[i] << ' ';cerr << endl;}
template <typename T, typename ... hello>
void faltu( T arg, const hello &... rest) {cerr << arg << ' ';faltu(rest...);}
//#else
//#define dbg(args...)

#define ld long double

const int mx = 1e5+5;
int n;
int x[mx], y[mx];
int cur_x, cur_y;
int temp_x1, temp_y1;
int temp_x2, temp_y2;
int ans[mx];
vi v;

ld dist( ll p, ll q )
{
    ld ans = (ld)(p*p) + (ld)(q*q);
    ans = sqrt(ans);
    return ans;
}

int main()
{
    optimize();
    cin >> n;
    for( int i = 0; i < n; ++i ) {
        cin >> x[i] >> y[i];
        v.PB(i);
    }
    while(1) {
        bool ok = 0;
        temp_x1 = temp_y1 = temp_x2 = temp_y2 = 0;
        cur_x = 0, cur_y = 0;
        for( int i = n-1; i >= 0; --i ) {
            temp_x1 = cur_x + x[v[i]];
            temp_y1 = cur_y + y[v[i]];
            temp_x2 = cur_x - x[v[i]];
            temp_y2 = cur_y - y[v[i]];
            if( dist( temp_x1, temp_y1 ) < dist( temp_x2, temp_y2 ) ) {
                cur_x += x[v[i]];
                cur_y += y[v[i]];
                ans[v[i]] = 1;
            }
            else {
                cur_x -= x[v[i]];
                cur_y -= y[v[i]];
                ans[v[i]] = -1;
            }
        }
        if( dist( cur_x, cur_y ) > 1500000 ) random_shuffle( v.begin(), v.end() );
        else break;
    }
    for( int i = 0; i < n; ++i ) cout << ans[i] << " ";

}








