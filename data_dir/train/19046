#define _CRT_SECURE_NO_WARNINGS

#include <string>
#include <sstream>
#include <cstring>
#include <sstream>
#include <vector>
#include <algorithm>
#include <iostream>
#include <stdio.h>
#include <fstream>
#include <ctime>
#include <cmath>
#include <math.h>
#include <set>
#include <map>
#include <list>
using namespace std;

#define pp system("pause");
#define ct double ttme = clock()
#define p_ct cout << (clock() - ttme) / CLOCKS_PER_SEC << endl
#define all(c) (c).begin(),(c).end()
#define fft ifstream fin("input.txt"); ofstream fout("output.txt")
#define fft_c FILE *fin, *fout
#define fft_c_open fin = fopen("input.txt","r"); fout = fopen("output.txt","w")
#define fft_c_cl fclose(fin); fclose(fout)
#define pii pair<ll,ll>
#define pff pair<float,float>
#define piii pair<int,pair<int,int>>
#define M_PI 3.14159265358979323846
typedef unsigned long long ull;
typedef signed long long ll;
const int INF = 1e9;
const int MAXM = 1000000007;
const int MAX = 1e7;
const int des = 10000;


const int maxn = 6005;


int n, p;
string s;

bool check(int index, char ch) {
	if(index >= s.size())
		return true;
	if(index < 0)
		return true;
	return (s[index] != ch);
}


bool dfs(int index) {

	if(s[index] >= (int)('a') + p && index == 0)
		return false;

	if(s[index] >= (int)('a') + p) {
		s[index] = '?';
		s[index - 1]++;
		if(!dfs(index - 1))
			return false;
		else
			s[index] = 'a';
	}

	for(int i = s[index]; i < (int)('a') + p; i++) {
		s[index] = (char)(i);

		if(check(index - 1, s[index]) && check(index - 2, s[index]) && 
			check(index + 1, s[index]) && check(index + 2, s[index]))
			return true;
	}

	s[index] = '?';
	s[index - 1]++;

	if(!dfs(index - 1))
		return false;
	else
		s[index] = 'a';

	return dfs(index);
}


int main(int argc, char *argv[])
{
	cin >> n >> p;
	cin >> s;

	s[s.size() - 1]++;
	if(!dfs(s.size() - 1)) {
		cout << "NO";
	} else {
		cout << s;
	}

	//pp;
}
