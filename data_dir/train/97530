#include <bits/stdc++.h>
using namespace std;
typedef long long int64;
typedef complex<double> cmplx;
const double pi = 3.14159265358979323846;
const int inf = (int)2e+9 + 2;
const int mod = (int)1e+9 + 7;
const double eps = 1e-8;
const int N = 200'000;

int n, m, k;

void solve()
{
    int64 n;
    cin >> n;
    if (n <= 10) {
        cout << n;
        return;
    }
    int64 a = 9;
    while (a * 10 + 9 <= n)
        a = a * 10 + 9;
    int64 ans = 0;
    int64 b = n - a;
    while (b) {
        ans += b % 10;
        b /= 10;
    }
    while (a) {
        ans += a % 10;
        a /= 10;
    }
    cout << ans;
}

void precalc()
{

}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    precalc();
    int test = 1;
    //cin >> test;
    for (; test; --test)
        solve();
    return 0;
}
