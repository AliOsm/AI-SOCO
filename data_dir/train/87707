#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int)1e9 + 1;
const ld EPS = 1e-9;

void precalc() {
}

const int maxn = 500 + 10;
int a[maxn][maxn];
int n, m, q;
const int maxq = 5000 + 10;
int change[maxq][2];

bool read() {
  if (scanf("%d%d%d", &n, &m, &q) < 3) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      scanf("%d", &a[i][j]);
    }
  }
  for (int i = 0; i < q; ++i) {
    scanf("%d%d", &change[i][0], &change[i][1]);
    --change[i][0], --change[i][1];
  }
  return 1;
}

int values[maxn];

int countValue(int x) {
  int *ar = a[x];
  int start = -1;
  int res = 0;
  for (int i = 0; i < m; ++i) {
    if (!ar[i]) {
      start = -1;
      continue;
    }
    if (start == -1) {
      start = i;
    }
    res = max(res, i - start + 1);
  }
  return res;
}

void solve() {
  for (int i = 0; i < n; ++i) {
    values[i] = countValue(i);
    //eprintf("values[%d] = %d\n", i, values[i]);
  }
  for (int iter = 0; iter < q; ++iter) {
    int x = change[iter][0], y = change[iter][1];
    a[x][y] ^= 1;
    values[x] = countValue(x);
    int res = 0;
    for (int i = 0; i < n; ++i) {
      res = max(res, values[i]);
    }
    printf("%d\n", res);
  }
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
