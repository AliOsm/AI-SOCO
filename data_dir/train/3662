//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
#define mem(a,v) memset((a), (v), sizeof (a))
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pil pair<int, long long>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vil vector<pil>
#define vll vector<pll>
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> oset;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e6 + 5;
const double eps = 1e-9;
pii a[MAXN], b[MAXN];
int m, n, ans[MAXN];
ll dp[MAXN];

ll f(int o) {
	if (~dp[o]) return dp[o];
	ll ret = 0;
	for (int i = 1; i <= n; i++)
		ret += abs(b[i].fi - a[i+o].fi);
	return dp[o] = ret;
}

int main() {
	mem(dp, -1);
	scanf("%d %d", &m, &n);
	vii tmp;
	for (int i = 1; i <= n; i++) {
		ni(a[i].fi);
		a[i].se = i;
	}
	for (int i = 1; i <= n; i++) {
		ni(b[i].fi);
		b[i].se = i;
	}
	sort(a+1, a+n+1);
	sort(b+1, b+n+1);
	for (int i = 1; i <= 3*n; i++) {
		if (i <= n)
			a[i].fi -= m;
		else {
			a[i].fi += a[i-n].fi + m;
			a[i].se = a[i-n].se;
		}
	}
	int lo = 0, hi = 2*n;
	while (lo < hi) {
		int mi = (lo+hi) / 2;
		if (f(mi) < f(mi+1))
			hi = mi;
		else
			lo = mi + 1;
	}
	prl(f(lo));
	//cerr << f(lo) << "\n";
	for (int i = 1; i <= n; i++)
		ans[a[i+lo].se] = b[i].se;
	for (int i = 1; i <= n; i++)
		printf("%d ", ans[i]);
	return 0;
}
