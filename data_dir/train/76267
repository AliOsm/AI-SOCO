#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <bitset>
#include <random>
#include <cassert>

using std::ios_base;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::fixed;

using std::vector;
using std::string;
using std::stack;
using std::queue;
using std::deque;
using std::map;
using std::set;
using std::unordered_map;
using std::unordered_set;
using std::bitset;

using std::tuple;
using std::make_tuple;
using std::pair;
using std::make_pair;

using std::sort;
using std::reverse;
using std::nth_element;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()

#define forn(i, n) for (int i = 0; i < (n); i++)
#define fornr(i, n) for (int i = (n) - 1; i >= 0; i--)
#define forab(i, a, b) for (int i = (a); i < (b); i++)

const int N = 100005;

int n, s;
int k[N];
int64_t dp[N];
vector<int> g[N];

void dfs(int v, int p = -1) {
    auto x = std::find(all(g[v]), p);
    if (x != g[v].end())
        g[v].erase(x);

    dp[v] = 0;
    for (int u : g[v])
        dfs(u, v);

    sort(all(g[v]), [](int i, int j) {
        return dp[i] > dp[j];
    });

    for (int u : g[v]) {
        if (k[u] == 0 || dp[u] == 0)
            continue;
        if ((p == -1 && k[v] > 0) || (p != -1 && k[v] > 1)) {
            k[u]--;
            k[v]--;
            dp[v] += dp[u] + 2;
        }
    }

    for (int u : g[v]) {
        if (k[u] == 0)
            continue;
        if ((p == -1 && k[v] > 0) || (p != -1 && k[v] > 1)) {
            int x = std::min(k[u], k[v] - (p == -1 ? 0 : 1));
            k[u] -= x;
            k[v] -= x;
            dp[v] += 2 * x;
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> k[i];
    }
    for (int i = 0; i < n - 1; ++i) {
        int v, u;
        cin >> v >> u;
        v--, u--;
        g[v].pb(u);
        g[u].pb(v);
    }
    cin >> s;
    s--;

    dfs(s);
    cout << dp[s] << '\n';


#ifdef LOCAL
    cerr << "\n== " << 1.0 * clock() / CLOCKS_PER_SEC << " sec.\n";
#endif
    return 0;
}
