#include <bits/stdc++.h>

using namespace std;

#define mpr make_pair
typedef long long ll;
typedef pair <ll, ll> pll;

const int maxn = 200100;
ll t, n;
ll arr[maxn];
ll st[maxn];
ll sumt;
map <ll, vector <pll> > mp;
ll ans[maxn];

void extend_gcd(long long num1, long long num2, long long &a, long long &b) {
	long long i, j;
 	if(!(num1 % num2)) {
		a = 1;
		b = -num1 / num2 + 1;
		return;
	}
	extend_gcd(num2, num1 % num2, i, j);
	a = j;
	b = i - j * (num1 / num2);
}

ll get_multi(ll multi, ll mod, ll remain) {
	ll ra, rb;
	extend_gcd(multi, mod, ra, rb);
	if (ra < 0) {
		ll m = -ra / mod;
		m++;
		ra += mod * m;
		rb -= m * multi;
	}
	return ra * remain % mod;
}

int main() {
	scanf("%I64d%I64d", &t, &n);
	for (int i = 0; i < n; i++) {
		scanf("%I64d", arr + i);
	}

	sumt = arr[0];
	for (int i = 1; i < n; i++) {
		st[i] = st[i - 1] + arr[i];
		sumt += arr[i];
	}
	if (sumt == t) {
		for (int i = 0; i < n; i++) {
			cout << 1 << ' ';
		}
		cout << endl;
		return 0;
	}
	ll rgcd = __gcd(sumt, 1ll * t);
	for (int i = 0; i < n; i++) {
		mp[st[i] % rgcd].push_back(mpr(st[i] / rgcd, i));
	}
	t /= rgcd; sumt /= rgcd;
	ll bei = t / sumt, yut = t % sumt, rstep = yut - sumt % yut;
	for (auto &rit : mp) {
		vector <pll> &rarr = rit.second;
		vector <pair <pll, int>> rstat;
		rstat.reserve(rarr.size());
		for (auto it : rarr) {
			rstat.push_back(mpr(mpr(get_multi(rstep, yut, it.first % yut), it.first), it.second));
		}
		sort(rstat.begin(), rstat.end());
		for (int i = 0; i < (int)rstat.size(); i++) {
			int nxt = i + 1;
			if (nxt == (int)rstat.size()) {
				nxt = 0;
			}
			ll nxtfirst = rstat[nxt].first.first;
			if (nxt == 0) {
				nxtfirst += yut;
			}
			if (rstat[i].first.first == nxtfirst) {
				ans[rstat[nxt].second] = (rstat[nxt].first.second - rstat[i].first.second) / yut * bei;
			} else {
				ans[rstat[nxt].second] = ((sumt / yut + 1) * bei + 1) * (nxtfirst - rstat[i].first.first) -
							               (rstat[i].first.second % yut + rstep * (nxtfirst - rstat[i].first.first)) / yut * bei;
				ans[rstat[nxt].second] += (rstat[nxt].first.second / yut - rstat[i].first.second / yut) * bei;
			}
		}
	}
	for (int i = 0; i < n; i++)
		cout << ans[i] << " ";
	cout << endl;

    return 0;
}

