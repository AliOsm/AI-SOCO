#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

using namespace std;

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

template<typename T> inline void swap(pair<T, T> &p) { swap(p.first , p.second ); }

#define all(v) v.begin(),v.end()

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) { if (i) os << ' '; os << v[i]; } os << endl; return os; }
template <typename T1, typename T2> ostream& operator << (ostream& os, const vector<pair<T1, T2>> &v) { for (int i = 0 ; i < v.size() ; i++) { os << v[i] << endl; } return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, const pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	fixed(cout); cout << setprecision(10);
	
	next(int, n);
	next(LL, b);

	vector<LL> c(n);
	vector<LL> d(n);
	vector<vector<int>> children(n);

	FOR (i, 0, n) {
		cin >> c[i] >> d[i];
		if (i > 0) {
			next(int, p); p--; 
			children[p].push_back(i);
		}
	}

	vector<vector<LL>> min_costs_with_coupon(n);
	vector<vector<LL>> min_costs_without_coupon(n);

	FORD (v, n - 1, 0) {
		min_costs_with_coupon[v].push_back(0);
		min_costs_with_coupon[v].push_back(c[v] - d[v]);
		for (auto c : children[v]) {
			auto next_costs = min_costs_with_coupon[v];
			FOR (take_current, 1, min_costs_with_coupon[v].size()) FOR (take_other, 0, min_costs_with_coupon[c].size()) {
				while (take_current + take_other >= next_costs.size()) next_costs.push_back(LongMaxVal);
				minimize(next_costs[take_current + take_other], min_costs_with_coupon[v][take_current] + min_costs_with_coupon[c][take_other]);
			}
			min_costs_with_coupon[v] = next_costs;
		}

		min_costs_without_coupon[v].push_back(c[v]);
		for (auto c : children[v]) {
			for (auto x : min_costs_without_coupon[c]) min_costs_without_coupon[v].push_back(x);
		}
		sort(all(min_costs_without_coupon[v]));

		LL acc = 0;
		FOR (i, 0, min_costs_without_coupon[v].size()) {
			acc += min_costs_without_coupon[v][i];

			minimize(min_costs_with_coupon[v][i + 1], acc);
		}
		// cerr << v << ": " << min_costs_with_coupon[v];
	}

	FORD (cnt, min_costs_with_coupon[0].size() - 1, 0) if (min_costs_with_coupon[0][cnt] <= b) {
		cout << cnt;
		return 0;
	}
}