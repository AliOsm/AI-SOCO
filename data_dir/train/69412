#define _CRT_SECURE_NO_WARNINGS
#include<bits\stdc++.h>

using namespace std;

#define Files


#define rdi(i)          scanf("%d", &i)
#define rdii(i, j)      scanf("%d%d", &i, &j)
#define rep(i, v)       for(int i=0;i<v.size();++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define all(v)          ((v).begin()), ((v).end())
#define clr(v, d)       memset(v, d, sizeof(v))
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
typedef unsigned long long   ull;
const ll OO = 1e8;
const ll OOL = 1e16;
const ll MOD = 1e9 + 7;
const double EPS = 1e-9;

#define pb                  push_back
#define MP                  make_pair
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef pair<int, int>    pii;
typedef pair<ll, ll>      pll;
typedef vector<pair<int, int> > vii;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;
typedef vector<ll>        vl;
typedef vector<vector<ll> >     vvl;
typedef vector<pair<ll, ll> >   vll;

ull gcd(ull a, ull b) { return (b == 0 ? a : gcd(b, a % b)); }
ull lcm(ull a, ull b) { return (a * (b / gcd(a, b))); }
ull power(ull a, ull b){ if (b == 0) return 1; ull ans = power(a, b / 2); ans = (ans * ans) % MOD; if (b & 1) ans = (ans * a) % MOD; return ans; }
typedef pair<ll, ll > pp;

vector<vector<string> > quatrine;

bool isVowel(char c){
	if (c == 'a') return 1;
	if (c == 'e') return 1;
	if (c == 'i') return 1;
	if (c == 'o') return 1;
	if (c == 'u') return 1;
	return 0;
}

int getRhyme(int line){
	int mask = 1;
	set<string> RhymeCnt;
	RhymeCnt.insert(quatrine[line][0]);
	lpi(i, 1, 4){
		RhymeCnt.insert(quatrine[line][i]);
		if (quatrine[line][i] == quatrine[line][0]) mask |= (1 << i);
	}
	if (RhymeCnt.size() > 2) return -1;
	if (mask != 15 && mask != 3 && mask != 5 && mask != 9) return -1;
	return mask;
}

vector<int> rhyme;

int main() {
#ifdef Filesx
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif
	ios::sync_with_stdio(0);

	int n, k; cin >> n >> k;
	quatrine.resize(n);
	lp(i, n){
		lp(j, 4){
			string s; cin >> s;
			int vowel = 0;
			lpd(now, s.size() - 1, 0){
				if (isVowel(s[now])) vowel++;
				if (vowel == k){
					quatrine[i].push_back(s.substr(now));
					break;
				}
			}
			if (vowel != k) return cout << "NO" << endl, 0;
		}
	}
	
	set<int> valid;
	lp(i, n){
		int mask = getRhyme(i);
		if (mask == -1) return cout << "NO" << endl, 0;
		rhyme.push_back(mask);
		if (mask != 15) valid.insert(mask);
	}
	if (valid.size() > 1) return cout << "NO" << endl, 0;
	if (valid.size() == 0) return cout << "aaaa" << endl, 0;
	int mask = (*valid.begin());
	lp(i, 4){
		if (mask & (1 << i)) cout << "a";
		else cout << "b";
	}
	cout << endl;

	return 0;

}