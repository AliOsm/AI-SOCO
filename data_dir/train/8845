#include "bits/stdc++.h"
using namespace std;

char EMPTY = '.', AISLE = '-', STATUS = 'S', NEW_PERSON = 'x';
pair<int, vector<string>> solve(const vector<string>& tab, int k) {
    vector<queue<pair<int, int>>> cost_to_positions(3);
    for (int row = 0; row < tab.size(); row++) {
        for (int col = 0; col < tab[row].size(); col++) {
            if (tab[row][col] != EMPTY) continue;
            int status_neighbors = 0;
            if (col > 0 && tab[row][col - 1] == STATUS) status_neighbors++;
            if (col + 1 < tab[row].size() && tab[row][col + 1] == STATUS) status_neighbors++;
            cost_to_positions[status_neighbors].push(make_pair(row, col));
        }
    }
    auto res = tab;
    for (int iter = 0; iter < k; iter++) {
        for (int cost = 0; cost < cost_to_positions.size(); cost++) {
            if (!cost_to_positions[cost].empty()) {
                auto position = cost_to_positions[cost].front(); 
                cost_to_positions[cost].pop();
                int row = position.first;
                int col = position.second;
                res[row][col] = NEW_PERSON;
                break;
            }
        }
    }
    int cost = 0;
    for (int row = 0; row < res.size(); row++) {
        for (int col = 0; col < res[row].size(); col++) {
            if (res[row][col] == STATUS) {
                if (col > 0 && res[row][col - 1] != EMPTY && res[row][col - 1] != AISLE) cost++;
                if (col + 1 < res[row].size() && res[row][col + 1] != EMPTY && res[row][col + 1] != AISLE) cost++;
            }
        }
    }
    return make_pair(cost, res);
}

int main() {
    int n; cin >> n;
    int k; cin >> k;
    vector<string> tab(n);
    for (int i = 0; i < tab.size(); i++) cin >> tab[i];
    auto res = solve(tab, k);
    cout << res.first << endl;
    for (const auto row : res.second) {
        cout << row << endl;
    }
}