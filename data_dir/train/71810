#include <iostream>
#include <stack>
#include <algorithm>
#include <string.h>
#include <queue>
#include <iomanip>
#include <map>
#include <cmath>
#include <set>
#include <climits>
#include <complex>
#define fi first
#define FI first
#define SE second.first
#define TH second.second
#define se second
using namespace std;
typedef long double LD;
//typedef complex<double> cd;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<vector<vector<ll>>> Matrix;
typedef pair<int, ii> iii;
const int maxN = 2e5 + 9, maxV = 20, MOD = 998244353, LG = 11, BASE = 29;

ll A, n, m, PAI, arr[maxN];

ll fastPow(ll a, ll b){
    ll ret = 1;
    while(b){
        if(b & 1) ret = ret * a % MOD;
        b >>= 1, a = a * a % MOD;
    }
    return ret;
}

ll geoSum(ll base, ll exp){//base will never be one, shit it will
    
    if(base == 1){
        return (exp + 1) % MOD;
    }
    
    ll numerator = (fastPow(base, exp + 1) - 1 + MOD) % MOD;
    ll denominator = (base - 1 + MOD) % MOD;
    
    return numerator * fastPow(denominator, MOD - 2) % MOD;
}

ll getComb(ll x){
    x--;
    
    ll constantCoefficient = PAI * fastPow(A, x * 2) % MOD;
    
    ll inverseOfA = fastPow(A, MOD - 2);
    
    ll sumatoria = geoSum(inverseOfA, x);
    
    ll equalPairs = fastPow(A, x + 1) % MOD;
    
    ll unequalPairs =  sumatoria * constantCoefficient % MOD;//distinct pairs
    
    //cout << PAI << ' ' << constantCoefficient << ' ' << sumatoria << ' ' << equalPairs << ' ' << unequalPairs << '\n';
    
    return (equalPairs + unequalPairs) % MOD;
    
}


int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    cin >> n >> m >> A;
    
    PAI = A * (A - 1) / 2 % MOD;
    
    arr[0] = 0;
    for(int i = 1; i <= m; i++){
        cin >> arr[i];
    }
    
    ll answer = fastPow(A, n - arr[m] * 2);
    
    for(int i = 1; i <= m; i++){
        answer = answer * getComb(arr[i] - arr[i - 1]) % MOD;
    }
    cout << answer << '\n';
    
}

/*
    let P = pairs of A (a, b) such that a < b
    let x = SAIZ - 1
    (A ^ i) * (A ^ (x - i)) ^ 2
    A ^ i * A ^ (2x - 2i)
    A ^ (i + 2x - 2i)
    P * A ^ (2x - i)
    [P * A ^ 2x] * (A ^ -1) ^ i
 
    B = A ^ -1
 
 SUM i: 0 -> x
    B ^ i
    =====
 
 
 */




