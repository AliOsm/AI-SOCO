#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    int x,y;

    bool operator<(const P &a)const{
        if(x!=a.x)
              return x>a.x;
        return y>a.y;
    }

};

vector<int> v[533333];

//bitset<4001000> b;
int a,i,b,n,d,c,m,k;


int o[532221];
int l[532221];
int j[533331];
int e;


//int dx[10]={2,2,-2,-2,1,1,-1,-1},dy[10]={1,-1,1,-1,2,-2,2,-2};

int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[555552][23];
stack<int> s;
//set<int> s[222][22];
//priority_queue<int,vector<int>,greater<int> > q;
queue<int> q;
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p,p1;
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
//list<int> l;

string r2;
char r[13];
//deque<int> de;
//srand((int)time(NULL));
/*bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}*/

bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}


int main()
{
    scanf("%d",&a);
    o[0]=d=1087654321;
    for(int t=1;t<=a;t++)
    {
        scanf("%d",&o[t]);
        if(o[t]<d)
            d=o[t],e=t;
    }
    for(int t=1;t<a;t++)
    {
        scanf("%d %d",&n,&m);
        v[n].push_back(m);
        v[m].push_back(n);
    }
    u[0][0]={0,o[0]};
    //u[1][0].x=0;
    u[e][0]={0,o[e]};
    q.push(e);
    for(;q.size();q.pop())
    for(int h=0;h<v[q.front()].size();h++)
    if(v[q.front()][h]!=u[q.front()][0].x)
    {
        //printf("%d %d\n",q.front(),v[q.front()][h]);
        u[v[q.front()][h]][0]={q.front(),min(o[v[q.front()][h]],o[q.front()])};
        q.push(v[q.front()][h]);
    }
    for(int h=1;h<=20;h++)
    for(int t=0;t<=a;t++)

        {
        u[t][h]={u[u[t][h-1].x][h-1].x,min(u[t][h-1].y,u[u[t][h-1].x][h-1].y)};
        //printf("%d ",u[t][h].y);
        }
    for(int t=1;t<=a;t++)
    if(t!=e)
    {
        x+=o[t];
        long long p=3987654321987654321;
        for(long long h=0;h<=20;h++)
            p=min(p,(h+1)*u[t][h].y);
        x+=p;
        //printf("%lld\n",x);
    }
    printf("%lld",x);
}




