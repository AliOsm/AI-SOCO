/*

dp[0][i] means we take stairs to come to floor i from floor i-1
dp[1][i] means we take elevator to come to floor i from floor i-1

dp[0][i] = st[i-1] + min ( dp[1][i-1] , dp[0][i-1] )
    Now dp[1][i-1] means we were in elevator on the i-1th floor ; and now we take stairs
    dp[0][i-1] means we were not in elevator at floor i-1 ; and now we take stairs ;

dp[1][i] = el[i-1] + min ( dp[0][i-1] + c , dp[1][i-1] ) ;
    dp[0][i-1] means we were not in elevator in the i-1 th floor ; and so now ; to use elevator to reach from i-1
    to floor i ; we need to pay that extra cost = 'c'

    dp[1][i-1] means that we were already in the elevator at floor i-1 ; and so now to use elevator ; we don't need
    to pay 'c' again

These were the explanation of the transition states of dp
Answer for each floor 'i' is min ( dp[0][i] , dp[1][i] )

*/

#include<bits/stdc++.h>
using namespace std;

# define C continue;
# define R return

# define D double
# define I insert
# define ll long long
# define ld long double

# define ull unsigned long long
# define ui unsigned int

# define pb push_back
# define pf push_front

# define vi vector < int >
# define vc vector < char >
# define vs vector < string >
# define vb vector < bool >
# define vd vector < D >
# define vll vector < ll >
# define vull vector < ull >
# define vld vector < ld >

# define vvi vector < vector < int > >
# define vvb vector < vector < bool > >
# define vvc vector < vector < char > >
# define vvll vector < vector < ll > >
# define vvd vector < vector < D > >
# define vvld vector < vector < ld > >

# define all(v) (v).begin() , (v).end()
# define allrev(v) (v).rbegin() , (v).rend()
# define allcomp(v) v.begin() , v.end() , comp
# define allrevcomp(v) v.rbegin() , v.rend() , comp

# define pii pair < int , int >
# define pll pair < ll , ll >
# define pld pair < ld , ld >
# define pDD pair < D , D >

# define vpld vector < pld >
# define vpii vector < pii >
# define vpll vector < pll >
# define vpDD vector < pDD >

# define vvpii vector < vector < pii > >
# define F first
# define S second
# define mp make_pair

# define fast ios_base::sync_with_stdio(false) ; cin.tie(0) ; cout.tie(0);
# define dist(a,b,p,q) sqrt((p-a)*(p-a) + (q-b)*(q-b))

# define pp(n) printf("%.10Lf",n);
# define line cout<<"\n";

string vow = "aeiou";
const ld pie = 3.14159265358979 ;

const int dxhorse[] = {-2, -2, -1, -1, 1, 1, 2, 2};
const int dyhorse[] = {1, -1, 2, -2, 2, -2, 1, -1};
const ll mod = 1e9 + 7 ;

void solve ( int test_case )
{
    int n , c ;
    cin >> n >> c ;

    vi st ( n-1 ) ;
    for ( int i=0 ; i < n-1 ; i++ ) cin >> st[i] ;

    vi el ( n-1 ) ;
    for ( int i=0 ; i < n-1 ; i++ ) cin >> el[i] ;

    vvi dp ( 2 , vi ( n ) ) ;

    dp[1][0] = c ;
    for ( int i=1 ; i < n ; i++ )
    {
        dp[0][i] = st[i-1] + min ( dp[1][i-1] , dp[0][i-1] ) ;
        dp[1][i] = el[i-1] + min ( dp[0][i-1] + c , dp[1][i-1] ) ;
    }

    for ( int i=0 ; i < n ; i++ )
        cout << min ( dp[0][i] , dp[1][i] ) << " " ;
}

int main()
{fast
    int t = 1;
    //cin >> t;

    for ( int i=0 ; i < t ; i++ ) solve(i);
    return 0;
}
