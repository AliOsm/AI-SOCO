#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

const int mx = 5e5+5;
int ans[mx];
pii tree[mx * 4];
int divv[mx];

void init( int node, int l, int r )
{
	if( l == r ) {
		tree[node] = MP( divv[l], l );
		return;
	}
	int mid = (l + r)/2;
	init( 2*node, l, mid );
	init( 2*node+1, mid+1, r );
	tree[node] = max( tree[2*node], tree[2*node+1] );
}

void update( int node, int l, int r, int b )
{
	if( l == r ) {
		tree[node] = MP(0, l);
		return;
	}
	int mid = (l + r)/2;
	if( mid >= b ) update( 2*node, l, mid, b );
	else update( 2*node+1, mid+1, r, b );
	tree[node] = max( tree[2*node], tree[2*node+1] );
}

pii query( int node, int l, int r, int b, int e )
{
	if( l > e || r < b ) return MP(0, 0);
	if( l >= b && r <= e ) return tree[node];
	int mid = (l + r)/2;
	return max( query( 2*node, l, mid, b, e ), query( 2*node+1, mid+1, r, b, e ) );
}

int main()
{
	optimize();
	int n;
	cin >> n;
	for( int i = 1; i <= n; ++i ) {
		for( int j = i+i; j <= n; j += i ) {
			divv[j] = i;
		}
	}
	init(1, 1, n);
	for( int i = n; i >= 2; --i ) {
		pii temp = query( 1, 1, n, 1, n );
		ans[i] = temp.F;
		update( 1, 1, n, temp.S );
	}
	for( int i = 2; i <= n; ++i ) {
		cout << ans[i] << " ";
	}
	cout << endl;
}





















