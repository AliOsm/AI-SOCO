#include <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
using namespace std;
typedef long long ll; 
typedef long double ld;
typedef pair<ll, ll> pll;

const ll N = 2e5 + 30, Mod = 1e9 + 7;
const ll SQ = 330 ;

ll n, m, k;
vector<ll> G[N];
ll p[N], deg[N];
vector<ll> V;
struct Ed{
	ll v, u, id;
	ll w;
}E[N];
bool WE(Ed a, Ed b) {
	if(a.w != b.w)
		return a.w < b.w;
	return a.id < b.id;
}
ll Get(ll x) {
	return (p[x] ^ x ? p[x] = Get(p[x]) : x);
}
ll Comb(ll v, ll u) {
	v = Get(v);
	u = Get(u);
	if (v == u)
		return 0;
	p[u] = v;
	return 1;
}
ll check(ll x) {
	for (int i = 0; i < m; i ++) {
		if (min(E[i].v, E[i].u) == 1) {
			E[i].w += x;
		}
	}
	iota(p, p + N, 0);
	V.clear();
	sort(E, E + m, WE);
	memset(deg, 0, sizeof deg);
	for (int i = 0; i < m; i ++) {
		ll cur = Comb(E[i].v, E[i].u);
		deg[E[i].v] += cur;
		deg[E[i].u] += cur;
		if (cur)V.pb(E[i].id + 1);
	}
	for (int i = 0; i < m; i ++) {
		if (min(E[i].v, E[i].u) == 1) {
			E[i].w -= x;
		}
	}
	if (V.size() != n - 1) {
		cout << -1;
		exit(0);
	}
	return deg[1];
}
int main () {
    ios::sync_with_stdio(0), cin.tie(0);
	cin >> n >> m >> k;
	for (int i = 0; i < m; i ++) {
		ll v, u, w;
		cin >> v >> u >> w;
		w *= 2;
		G[v].pb(u);
		G[u].pb(v);
		E[i] = {v, u, i, w};
	}
	if (G[1].size() < k)
		return cout << -1, 0;
	ll L = -1e12, H = 1e12, M;
	if (check(L) < k || check(H) > k)
		return cout << -1, 0;
	vector<pll> s;
	//check(-4);
	for (int mask = 0; mask < (1 << 10); mask ++) {
		M = (H + L) / 2;
		ll res = check(M);
		s.pb({res, M});
		//cout << res << ' ' << M << endl;
		if (res == k) {
			cout << V.size() << '\n';
			for (auto u : V) {
				cout << u << ' ';
			}
			exit(0);
		}
		if (res < k) {
			H = M;
		}
		else {
			L = M;
		}
	}
	for (auto u : s) {
		cout << u.F << ' ' << u.S << endl;
	}
	cout << - 77;
    return (0);
}