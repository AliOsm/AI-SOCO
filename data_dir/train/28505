#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<thread>
using namespace std;

#define MAX 1000002

int n;
int a[MAX];

#define MOD 1000000007LL
long long int dp[MAX][3];

int main(){
	cin >> n;
	for (int i = 0; i < n; i++){
		scanf("%d", &a[i]);
		a[i]--;
	}
	dp[0][0] = 1;
	for (int i = 0; i < n; i++){
		for (int j = 0; j < 3; j++){
			if (j == 0){
				long long int lim = LLONG_MAX;
				if (i + 1 < n){
					lim = a[i+1];
				}
				long long int k = min(a[i + 1], a[i]);
				dp[i + 1][1] += k;
				dp[i + 1][1] %= MOD;
				dp[i + 1][2] += a[i];
				dp[i + 1][2] %= MOD;
				continue;
			}
			if (j == 1){
				if (dp[i][j]){
					long long int lim = min(a[i - 1], a[i]);
					dp[i + 1][2] += lim*dp[i][1];
					dp[i + 1][2] %= MOD;
					if (i + 1 < n){
						lim = min(lim, (long long int)a[i + 1]);
					}
					dp[i + 1][1] += lim*dp[i][1];
					dp[i + 1][1] %= MOD;
				}
			}
			if (j == 2){
				dp[i + 1][2] += dp[i][2];
				dp[i + 1][2] %= MOD;
			}
		}
	}
	long long int ans = dp[n][2];
	printf("%I64d\n", ans);
	return 0;
}