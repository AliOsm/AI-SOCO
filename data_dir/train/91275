#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

int n;
int a[1 << 20];
int m;
vector < pair< int, int > > b;
int cur;
ll sum[2][21];
int fen[1 << 20];

void upd(int pos, int val){
    for(; pos <= cur; pos |= (pos + 1)) fen[pos] += val;
}

int getsum(int r){
    int result = 0;
    for(; r >= 0; r = (r & (r + 1)) - 1) result += fen[r];
    return result;
}

int main()
{
    scanf("%d", &n);
    int k = (1 << n);
    for(int i = 0; i < k; i++) scanf("%d", a + i);
    for(int i = 0; i < k; i++) b.emplace_back(a[i], i);
    sort(b.begin(), b.end());
    for(int i = 0; i < k; i++){
        if(i && b[i].first != b[i-1].first) cur++;
        a[b[i].second] = cur;
    }
    for(int i = 0; i <= n; i++){
        for(int j = 0; j < (1 << (n - i)); j++){
            int left = j * (1 << i);
            int right = (j + 1) * (1 << i) - 1;
            for(int k = right; k >= left; k--){
                sum[0][i] += getsum(a[k] - 1);
                upd(a[k], 1);
            }
            for(int k = right; k >= left; k--){
                upd(a[k], -1);
            }
            for(int k = left; k <= right; k++){
                sum[1][i] += getsum(a[k] - 1);
                upd(a[k], 1);
            }
            for(int k = left; k <= right; k++){
                upd(a[k], -1);
            }
        }
    }
    scanf("%d", &m);
    int curmask = 0;
    for(int i = 0; i < m; i++){
        int t;
        scanf("%d", &t);
        curmask ^= (1 << t);
        ll an = sum[0][n];
        int sw = 0;
        for(int j = n; j >= 0; j--){
            if(curmask & (1 << j)){
                an -= sum[sw][j];
                an += sum[sw^1][j];
                sw ^= 1;
            }
        }
        printf("%I64d\n", an);
    }
    return 0;
}
