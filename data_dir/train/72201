#include "omp.h"
#include <iostream>
#include <iomanip>
#include <string>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <vector>	
#include <cassert>
#include <fstream>
#include <algorithm>
#include <list>
#include <random>
#include <ctime>
#include <random>
#include <bitset>
#include <unordered_map>
#include <cassert>
#include <list>


using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;
#define ALL(a) a.begin(), a.end()


const int sze = 1e5 + 10, INF = 1e9, root = 0;


int cnt(vector<int> a)
{
	vector<int> dp(a.size(), 1);
	int ans = 0;

	for (int i = 1; i < a.size(); ++i)
		for (int j = 0; j < i; ++j)
			if (a[i] > a[j])
			{
				dp[i] = max(dp[i], dp[j] + 1);
				ans = max(ans, dp[i]);
			}

	int ans2 = 0;

	reverse(a.begin(), a.end());
	fill(dp.begin(), dp.end(), 1);

	for (int i = 1; i < a.size(); ++i)
		for (int j = 0; j < i; ++j)
			if (a[i] > a[j])
			{
				dp[i] = max(dp[i], dp[j] + 1);
				ans2 = max(ans2, dp[i]);
			}

	return ans + ans2;
}


signed main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, ans = 0, cnt = INF;
	cin >> n;

	for (int x = 1; x <= n; ++x)
	{
		int b = (n + x - 1) / x;
		int cur = x + b;

		if (cur < cnt)
		{
			cnt = cur;
			ans = x;
		}
	}

	int b = (n + ans - 1) / ans;
	vector<int> values;

	for (int i = 1; i < b; ++i)
	{
		for (int j = 0; j < ans; ++j)
			values.push_back(n - ans + 1 + j);

		n -= ans;
	}

	for (int j = 0; j < n; ++j)
		values.push_back(j + 1);

	for (int v : values)
		cout << v << ' ';
	return 0;
}