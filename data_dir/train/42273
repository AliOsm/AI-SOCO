#include<bits/stdc++.h>

#define ll long long
using namespace std;
int n, m;
const int N = 1e3 + 5, M = 1e5 + 5;
int res[N], b[N][N];
struct qur {
	int t, i, j;
	qur(int t, int i, int j) :
			t(t), i(i), j(j) {
	}
	qur() {
		t = i = j = 0;
	}
};
qur q[M];
vector<int> g[M];
int ans[M];
void dfs(int node, int cnt) {
	ans[node] = cnt;
	for (int i = 0; i < g[node].size(); i++) {
		int u = g[node][i];
		bool f = 0;
		int r = q[u].i, c = q[u].j;
		if (q[u].t == 1) {
			if (!b[r][c]) f = b[r][c] = 1, res[r]++, cnt++;
		} else if (q[u].t == 2) {
			if (b[r][c]) f = 1, b[r][c] = 0, res[r]--, cnt--;
		} else if (q[u].t == 3) {
			f = 1;
			cnt -= res[r];
			res[r] = m - res[r];
			cnt += res[r];
			for (int j = 1; j <= m; j++)
				b[r][j] ^= 1;
		}
		dfs(u, cnt);
		if (q[u].t == 1) {
			if (f) f = b[r][c] = 0, res[r]--, cnt--;
		} else if (q[u].t == 2) {
			if (f) b[r][c] = 1, res[r]++, cnt++;
		} else if (q[u].t == 3) {
			cnt -= res[r];
			res[r] = m - res[r];
			cnt += res[r];
			for (int j = 1; j <= m; j++)
				b[r][j] ^= 1;
		}
	}
}
int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int qt;
	cin >> n >> m >> qt;
	vector<int> T(qt);
	for (int i = 1, t, l, r; i <= qt; i++) {
		cin >> t;
		T[i - 1] = i;
		if (t == 1) {
			cin >> l >> r;
			g[i - 1].push_back(i);
		} else if (t == 2) {
			cin >> l >> r;
			g[i - 1].push_back(i);
		} else if (t == 3) {
			cin >> l;
			g[i - 1].push_back(i);
		} else {
			cin >> r;
			T[i - 1] = r;
			g[r].push_back(i);
		}
		q[i] = qur(t, l, r);
	}
	dfs(0, 0);
	for (int i = 1; i <= qt; i++)
		cout << ans[T[i - 1]] << '\n';

	return 0;
}
