#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define f(i, x, n) for (int i = x; i < (int)(n); ++i)

int const N = 100, md = 1e9 + 7;
ll md2 = (ll)md * md;
char s[N + 1];
int kmp[N];

inline void ad(int &x, int y) { if ((x += y) >= md)x -= md; }
inline void ad2(ll &x, ll y) { if ((x += y) >= md2)x -= md2; }

struct M{
	int n, m, x[N + 1][N + 1];
	M(int a, int b):n(a), m(b) { f(i, 0, n)f(j, 0, m)x[i][j] = 0; }
	int* operator [](int i) { return x[i]; }
	M operator *(M o){
		M an(n, o.m);
		f(i, 0, n)f(j, 0, o.m){
			ll t = 0;
			f(k, 0, m)ad2(t, (ll)x[i][k] * o[k][j]);
			an[i][j] = t % md;
		}
		return an;
	}
	void pr(){
		f(i, 0, n){
			f(j, 0, m)printf("%d ", x[i][j]);
			printf("\n");
		}
	}
};

inline int go(int k, char c){
	while (k && c != s[k])k = kmp[k - 1];
	if (s[k] == c)++k;
	return k;
}

int main(){
	int n, x;
	scanf("%d%d%s", &n, &x, s);
	int k = 0;
	f(i, 1, n){
		while (k && s[i] != s[k])k = kmp[k - 1];
		if (s[i] == s[k])++k;
		kmp[i] = k;
	}
	
	vector<M> F(x + 1, M(n + 1, n + 1));
	
	f(i, 0, n){
		int t = go(i, '0');
		F[0][t][i] = 1;
	}
	F[0][n][n] = 2;
	if (s[n - 1] == '0')ad(F[0][kmp[n - 1]][n - 1], 1);
	f(i, 0, n)ad(F[0][i][i], 1);
	
	f(i, 0, n){
		int t = go(i, '1');
		F[1][t][i] = 1;
	}
	F[1][n][n] = 2;
	if (s[n - 1] == '1')ad(F[1][kmp[n - 1]][n - 1], 1);
	f(i, 0, n)ad(F[1][i][i], 1);
	
	f(i, 2, x + 1)F[i] = F[i - 2] * F[i - 1];
	M t(n + 1, 1);
	t[0][0] = 1;
	printf("%d\n", (F[x] * t)[n][0]);
}