#include <bits/stdc++.h>
using namespace std;

const int inf = 0x3f3f3f3f, N = 3e5;

struct RMQ {
        vector <int> t;
        int n;
        RMQ(int n) : n(n) {
                t.resize(2 * n);
        }
        void build(int a[]) {
                for(int i = 0; i < n; i++) t[n + i] = a[i];
                for(int i = n - 1; i > 0; --i) t[i] = min(t[i << 1], t[i << 1 | 1]);
        }
        void modify(int p, int v) {
                for(t[p += n] = v; p > 1; p >>= 1) t[p >> 1] = min(t[p], t[p ^ 1]);
        }
        int query(int l, int r) { int res = inf;
                for(l += n, r += n; l < r; l >>= 1, r >>= 1) {
                        if(l & 1) res = min(res, t[l++]);
                        if(r & 1) res = min(res, t[--r]);
                }
                return res;
        }
};

int a[N], b[N];

queue <int> Q[N + 7];


void solve() {

        int n; scanf("%d", &n);
        for(int i = 0; i <= n; i++) {
                while(!Q[i].empty())
                        Q[i].pop();
        }
        RMQ SegTree(n);
        for(int i = 0; i < n; i++) scanf("%d", &a[i]), Q[a[i]].push(i);
        for(int i = 0; i < n; i++) scanf("%d", &b[i]);
        SegTree.build(a);
        for(int i = 0; i < n; i++) {
                if(!Q[b[i]].size()) {
                        puts("NO");
                        return;
                }
                int r = Q[b[i]].front() + 1; Q[b[i]].pop();
                if(SegTree.query(0, r) != b[i]) {
                        puts("NO");
                        return;
                }
                SegTree.modify(r - 1, inf);
        }
       puts("YES");
}



int main() {
        int test; scanf("%d", &test);
        while(test--) {
               solve();
        }
}
