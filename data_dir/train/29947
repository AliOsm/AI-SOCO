
// ~/Wiley/Atypon/RedLink/Developers/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <functional>
#include <assert.h>
#include <complex>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

const int N = 200005, M = 1005;
const ll MOD = 1e9 + 7;
const double eps = 1e-9;
const double PI = acos(-1.0);

int n, f[N];
vector<int> q[N];
map<pair<int,int>, vector<int> > v;
vector<int> p;
bool used[N];

inline int get(int a,int b) {
    if(a>b) swap(a,b);
    if(v.find(make_pair(a,b)) != v.end()) {
        vector<int> v2 = v[make_pair(a,b)];
        for(auto it=v2.begin(); it!=v2.end(); it++)
            if(!used[*it])
                return *it;
        return -1;
    }
    return -1;
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.in", "r", stdin);
#endif
    cin>>n;
    for(int i=0; i<n-2; i++) {
        q[i].resize(3);
        for(int j=0; j<3; j++) {
            cin>>q[i][j];
            f[q[i][j]]++;
        }
        for(int msk=0; msk<(1<<3); msk++) {
            int bt = 0, a = -1, b = -1;
            for(int j=0; j<3; j++) 
                if(msk & (1<<j)) {
                    bt++;
                    if(a==-1) a = q[i][j];
                    else b = q[i][j];
                }
            if(bt==2) {
                if(a>b) swap(a,b);
                if(v.find(make_pair(a,b))==v.end()) v[make_pair(a,b)] = vector<int>();
                v[make_pair(a,b)].push_back(i);
            }
        }
    }
    int st = -1, at = -1;
    for(int i=1; i<=n; i++)  {
        if(f[i]==1) {
            st = i;
            for(int j=0; j<n-2; j++)
                if(q[j][0]==i || q[j][1]==i || q[j][2]==i) {
                    if(q[j][1]==i) swap(q[j][1], q[j][0]);
                    else if(q[j][2]==i) swap(q[j][2], q[j][0]);
                    at = j;
                    break;
                }
            break;
        }
    }
    for(int it=0; it<2; it++) {
        p.clear();
        memset(used, 0, sizeof used);
        used[at] = 1;
        int cnt = 1;
        p.push_back(q[at][0]);
        p.push_back(q[at][1]);
        p.push_back(q[at][2]);
        while(cnt < n-2) {
            int i = get(p[p.size()-1], p[p.size()-2]);
            if(i==-1) break;
            used[i] = 1;
            cnt++;
            for(int j=0; j<3; j++)
                if(q[i][j] != p[p.size()-1] && q[i][j] != p[p.size()-2]) {
                    p.push_back(q[i][j]);
                    break;
                }
        }
        cout<<endl;
        if(cnt==n-2) {
            for(int i=0; i<p.size(); i++)
                cout<<p[i]<<" ";
            cout<<endl;
            return 0;
        }
        swap(q[at][1], q[at][2]);
    }
    return 0;
}