#pragma optimize("", off)
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/STACK:36777216")
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define pii pair<ll,ll>
#define pb push_back
#define ff first
#define ss second
#define FAST ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);srand(time(NULL))

const ll N = 2e5+5;

multiset<ll> g[N];
map<ll,ll> encode , decode;
vector<ll> eular;
multiset<pii> ee;
ll p1 = -1, p2 = -1;
ll n;

void eular_walk()
{
    stack<ll> st;
    st.push(1);
    while(!st.empty())
    {
        ll p = st.top();
        if(g[p].empty())
        {
            eular.pb(p);
            st.pop();
        }
        else
        {
            ll v = *g[p].begin();
            g[v].erase(g[v].find(p));
            g[p].erase(g[p].find(v));
            st.push(v);
        }
    }
    
    if(p1 != -1)
    {
        ll l = eular.size();
        vector<ll> temp;
        for(ll i = 0 ; i < l - 1 ; i++ )
        {
            bool f = 0;
            if((eular[i] == p1 && eular[(i+1)] == p2) || (eular[(i+1)] == p1 && eular[i] == p2))
            {
                for(ll j = i + 1 ; j < l ; j++ )
                    temp.pb(eular[j]);
                for(ll j = 1 ; j <= i ; j++ )
                    temp.pb(eular[j]);
                f = 1;
            }
            if(f)
                break;
        }
        if(temp.empty())
        {
            for(ll i = 0 ; i < l -1 ; i++ )
                temp.pb(eular[i]);
        }
        eular = temp;
    }
    return;
}

int main()
{
    FAST;
    ll cnt = 0;
    cin >> n;
    vector<ll> b(n-1),c(n-1);
    for(ll i = 0 ; i < n-1 ; i++ ) cin >> b[i],  encode[b[i]];
    for(ll i = 0 ; i < n-1 ; i++ ) 
    {
        cin >> c[i] ;
        encode[c[i]] ;
        if(c[i] < b[i]) 
            return cout << "-1",0;
    }
    for(auto &it : encode)
    {
        it.ss = ++cnt;
        decode[cnt] = it.ff;
    }
    for(ll i = 0 ; i < n-1 ; i++ ) 
    {
        if(b[i]<=0 || b[i] > 1000000000)
            return cout << "-1",0;
        if(c[i]<=0 || c[i] > 1000000000)
            return cout << "-1",0;
        b[i] = encode[b[i]] , c[i] = encode[c[i]];
        g[c[i]].insert(b[i]);
        g[b[i]].insert(c[i]);
        ee.insert({b[i],c[i]});
    }
    for(ll i = 1 ; i <= cnt ; i++ )
    {
        if(g[i].empty())
            return cout << "-1" , 0;
        else if(g[i].size() & 1)
        {
            if(p1 == -1)
                p1 = i;
            else if(p2 == -1)
                p2 = i;
            else
                return cout << "-1" ,0;
        }
    }
    if(p1 != -1)
    {
        if(p2 == -1)
            return cout << "-1",0;
        else
        {
            g[p1].insert(p2);
            g[p2].insert(p1);
        }
    }
    eular_walk();
    for(ll i = 0 ; i < n - 1 ; i++ )
    {
        ll x = min(eular[i],eular[i+1]);
        ll y = max(eular[i],eular[i+1]);
        if(ee.find({x,y}) == ee.end())
            return cout << "-1" , 0;
        ee.erase(ee.find({x,y}));
    }
    for(ll i = 0 ; i < n ; i++ )
        cout << decode[eular[i]] << " ";
}