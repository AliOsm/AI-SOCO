#include <string.h>
#include <unordered_map>

#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include   <stdlib.h>    
#include   <time.h> 
#include <stack>
#include <queue>
#include <set>

#include <map>
#include <vector>
#include <string>
#include <stdlib.h>

#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf

#define pf printf
#define mp make_pair

using namespace std;
const int N = 110;
int mod = 998244353;

int p[100],pos[100];
int n,q;

void add(int t, int id) {
	for(int i = 20; i >=0; --i) {
		if((1<<i)&t) {
			if(!p[i]){
				p[i] = t;
				pos[i] = id;
				return;
			}
			else {
				if(pos[i]<id) {
					swap(p[i],t);
					swap(pos[i],id);
				}
				t ^=p[i];
			}
		}
	}
}

int query(int id) {

	int res = 0;
	for(int i = 20; i >=0;--i) {
		if(p[i]&&pos[i]>=id) {
			if((res ^ p[i]) > res) res ^=p[i];
		}
	}
	return res;
}

int a[1000010];
struct Info{
	int l,r;
	int id;
};

Info ft[1000010];
int ans[1000010];

void sol(){
	clr(pos);
	clr(p);
	auto cmp = [&](const Info &a, const Info &b) {
		return a.r < b.r;
	};

	sort(ft,ft+q,cmp);
	int idx = 1;
	for(int i = 0; i < q; ++i) {
		while(idx <= ft[i].r)  {
			add(a[idx],idx);
			idx++;
		}

		ans[ft[i].id] = query(ft[i].l);
	}
}


int main() {
	sf("%d",&n);
	fr(i,1,n+1) {
		sf("%d",&a[i]);
	}
	sf("%d",&q);
	fr(i,0,q) {
		sf("%d%d",&ft[i].l, &ft[i].r);
		ft[i].id = i;
	}
	sol();
	fr(i,0,q) {
		pf("%d\n",ans[i]);
	}
}


