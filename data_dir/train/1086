// by tmt514
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <string>
#include <vector>
#define SZ(x) ((int)(x).size())
#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
using namespace std;
typedef long long LL;

char s[105];
int dp[1<<20][78];
const int MOD = 1e9+7;
int num[78][78];

void add(int &x, int v) {
  x+=v;
  if(x>=MOD) x-=MOD;
}

int go(int l, int r) {
  int m=0;
  for(int i=l;i<=r;i++) {
    m=m*2+(s[i]=='1');
    if(m>=21) return 21;
  }
  return m;
}
int main(void) {
  int n;
  scanf("%d", &n);
  scanf("%s", s+2);
  s[1] = '0';
  s[n+2] = '0';
  s[n+3] = 0;
  n += 2;
  for(int i=1;i<=n;i++)
    for(int j=i;j<=n;j++)
      num[i][j] = go(i, j);
  dp[0][0] = 1;
  for(int state=0;state<(1<<20);state++) {
    for(int i=0;i<=n;i++) {
      if(dp[state][i]!=0) {
//        printf("state=%x, i=%d, dp=%d\n", state, i, dp[state][i]);
        for(int j=i+1;j<=n;j++)
          if(num[i+1][j]<=20 && num[i+1][j]>=1) {
            if(i==0)
              add(dp[state][j], dp[state][i]);
            else if(j==n)
              add(dp[state][j], dp[state][i]);
            else
              add(dp[state|(1<<(num[i+1][j]-1))][j], dp[state][i]);
          } else {
            if(i==0 || j==n)
              add(dp[state][j], dp[state][i]);
          }
      }
    }
  }

  int ans=0;
  //nt ans[21]={};
  for(int state=1;state<(1<<20);state=state*2+1) {
//    int m=0;while(m<20 && (state&(1<<m))!=0)++m;
    add(ans, dp[state][n]);
  }
  printf("%d\n", ans);

  return 0;
}
