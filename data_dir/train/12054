#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define double long double
#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << (x) << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-13
//#define endl "\n"
#define pdd pair<double, double>

const int MAXN = 1500+100;
int n, m;
int dir[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
string b[MAXN];
int been[MAXN][MAXN];
pii mark[MAXN][MAXN];

inline pii st(int i, int j) {
	return mark[(i%n+n)%n][(j%m+m)%m];
}

void dfs(int i, int j) {
	int x = (i%n+n)%n;
	int y = (j%m+m)%m;
	if (b[x][y] == '#') return;
	if (been[x][y]) {
		cout << "YES" << endl;
		exit(0);
		return;
	}
	been[x][y]++;
	mark[x][y] = pii(i, j);
	FOR(d, 0, 4) {
		pii tmp(i+dir[d][0], j+dir[d][1]);
		if (st(tmp.X, tmp.Y) == tmp)  continue;
		dfs(tmp.X, tmp.Y);
	}
}

int main() {
	FOR(i, 0, MAXN) FOR(j, 0, MAXN) mark[i][j] = pii(1e9, 1e9);
	cin >> n >> m;
	FOR(i, 0, n) cin >> b[i];
	int x, y;
	FOR(i, 0, n) FOR(j, 0, m) if (b[i][j] == 'S') { x = i; y = j; }
	dfs(x, y);
	cout << "NO" << endl;
	return 0;
}
