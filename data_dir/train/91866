#include<bits/stdc++.h>
using namespace std;

#define fi                      first
#define se                      second
#define pb                      push_back
#define endl                    '\n'
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

#define FOR(i,a,b)              for(int i = a; i < b; ++i)

template <typename A, typename B>
string to_string(pair<A, B> p);
 
string to_string(const string& s) {
        return '"' + s + '"';
}
 
string to_string(const char* s) {
        return to_string((string) s);
}
 
string to_string(bool b) {
        return (b ? "true" : "false");
}
 
string to_string(vector<bool> v) {
        bool first = true;
        string res = "{";
        for (int i = 0; i < static_cast<int>(v.size()); i++) {
                if (!first) {
                        res += ", ";
                }
                first = false;
                res += to_string(v[i]); 
        }
        res += "}";
        return res;
}
 
template <size_t N>
string to_string(bitset<N> v) {
        string res = "";
        for (size_t i = 0; i < N; i++) {
                res += static_cast<char>('0' + v[i]);
        }
        return res;
}
 
template <typename A>
string to_string(A v) {
        bool first = true;
        string res = "{";
        for (const auto &x : v) {
                if (!first) {
                        res += ", ";
                }
                first = false;
                res += to_string(x);
        }
        res += "}";
        return res;
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
        return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
void debug_out() { 
        cerr << endl; 
}
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
        cerr << " " << to_string(H);
        debug_out(T...);
}
 
#ifdef IGM
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif


const int Max_node = 31 *(1e6+2);
const int MSB = 32;

int trie[Max_node][2];
bool is_leaf[Max_node];
long long int cnt[Max_node];
int node = 0;

void insert(std::vector<int> &s) {
	int v = 0;
	cnt[v]++;
	FOR(i,0,32) {
		if(trie[v][s[i]] == -1) {
			node++;
			trie[v][s[i]] = node;	
		}
		v = trie[v][s[i]];
		cnt[v]++;
	}
	is_leaf[v] = true;
}

void tobinary(long long int no, std::vector<int> &v) {
	fill(v.begin(), v.end(), 0);
	for(int i = 31; i >= 0; i--) {
		int cur = (1 << (31-i));
		if((cur & no)) {
			v[i] = 1;
		}
	}
}

long long int subarrays(std::vector<int> &V,long long int k) {
	int v = 0;
	long int cur = 0;
	long int sum = 0;
	FOR(i,0,32) {
		if(v == -1) {
			break;
		}
		if(V[i] == 0) {
			// cout << "HERe" << k << endl;
			if(cur + (1ll << (31-i)) >= k) {
				// cout << "here" << endl;
				if(trie[v][1] != -1) {
					sum += cnt[trie[v][1]];
					// cout << trie[v][1] << " " << i << " " << cur << endl;
				}
				// cout << v << " " << trie[v][0] << " " << i << endl;
				v = trie[v][0]; 
			}
			else {
				// cout << " here" << endl;
				v = trie[v][1];
				cur += (1ll << (31-i));
			}
		}
		else {
			// cout << cur << " " << (cur + (1 << (31-i))) << endl;
			if( cur + (1ll << (31-i)) >= k ) {
				// cout << "here" << endl;
				if(trie[v][0] != -1) {
					sum += cnt[trie[v][0]];
					// cout << trie[v][0] << " " << i  << " " << cur << endl;
				}
				v = trie[v][1];
				
			}
			else {
				v = trie[v][0];
				cur += (1ll << (31-i));
			}
		}
	}
	return sum;
}

int main () {
	memset(trie,-1,sizeof(trie));
	memset(is_leaf,0,sizeof(is_leaf));
	memset(cnt,0,sizeof(cnt));
	int n;
	cin >> n;
	long long int k;
	cin >> k;
	std::vector<long long int> a(n);
	std::vector<int> v(32,0);
	long long int tot = 0;	
	insert(v);
	FOR(i,0,n) {
		cin >> a[i];
		if( i - 1 >= 0) {
			a[i] = (a[i-1]^a[i]);
		}
		tobinary(a[i],v);
		// debug(i,a[i],v);
		tot += subarrays(v,k);
		// cout << tot << " " << i << endl; 
		insert(v);
	}
	cout << tot << endl;
}