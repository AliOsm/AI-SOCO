//

#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <algorithm>
#include <iterator>
#include <map>

using namespace std;

string alph = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
int size_n;
map <char, int> myMap;

vector <string> str(0);

bool isFirst(string s);
int find_row(string s);
int find_col(string s);
string find_row_first(string s);

int main()
{
	int ii, jj;
	
	cin >> size_n;

	cin.ignore();

	str.resize(size_n);

	for (ii = 0; ii < size_n; ii++)
		getline(cin, str[ii]);

	for (ii = 1; ii < 27; ii++)
		myMap.insert(make_pair(alph[ii - 1], ii));

	for (ii = 0; ii < size_n; ii++)
	{
		if (isFirst(str[ii]))
		{
			cout << find_row_first(str[ii]);

			for (jj = 1; (str[ii][jj] - '0') < 10; jj++)
				cout << str[ii][jj];

			cout << endl;
		}
		else
		{
			cout << "R" << find_col(str[ii]) << "C" << find_row(str[ii]) << endl;
		}
	}
}

bool isFirst(string s)
{
	int ii, len;

	if (s[0] == 'R')
	{
		len = s.size();

		for (ii = 1; ii < len; ii++)
		{
			if (s[ii] == 'C')
			{
				if (s[ii - 1] < 'A')
					return 1;
			}
		}
	}

	return 0;
}

int find_row(string s)
{
	int ii, len;
	int result = 0;
	string tmp;

	len = s.size();

	for (ii = 0; (ii < len) && (s[ii] > '9'); ii++)
	{
		tmp += s[ii];
	}

	len = tmp.size();

	for (ii = 0; ii < len; ii++)
	{
		result *= 26;

		result += tmp[ii] - 'A' + 1;
	}

	return result;
}

int find_col(string s)
{
	int ii, len;
	int result = 0;

	len = s.size();

	for (ii = 0; ii < len; ii++)
	{
		if ((s[ii] - '0') < 10)
		{
			break;
		}
	}

	for (; ii < len; ii++)
	{
		result *= 10;

		result += s[ii] - '0';
	}

	return result;
}

string find_row_first(string s)
{
	int ii, len; 
	int row = 26, col = 0;
	string result = "";

	len = s.size();

	for (ii = 2; ii < len; ii++)
	{
		if (s[ii] == 'C')
		{
			ii++;

			break;
		}
	}

	for (; ii < len; ii++)
	{
		col *= 10;

		col += s[ii] - '0';
	}

	while (col > row)
	{
		col -= row;

		row *= 26;
	}

	col--;

	while (row != 1)
	{
		row /= 26; 

		if ((static_cast<char>(col / row) + 'A') > '@')
			result += static_cast<char>(col / row) + 'A';

		col %= row;
	}

	return result;
}