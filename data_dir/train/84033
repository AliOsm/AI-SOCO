# include <iostream>
# include <cmath>
# include <vector>
# include <algorithm>

# define FILEs
using namespace std;

const int N = 2e5 + 100;

long long answers[N], res;
int n, m;
int p[N], sz[N];
vector < pair < int, pair < int, int > > > edges;
vector < pair < int, int > > queries;

int get( int x ){
    if( p[x] == x )
        return x;
    else
        return p[x] = get( p[x] );
}
void unin( int x, int y ){
    x = get( x );
    y = get( y );
    if( x == y ) return;
    res += (1ll*sz[x]*sz[y]);
    sz[x] += sz[y];
    p[y] = x;
}
int main(){
    # ifdef FILE
        freopen( "input.txt", "r", stdin );
        freopen( "output.txt", "w", stdout );
    # endif // FILE
    ios_base::sync_with_stdio( false );

    cin >> n >> m;
    for( int i = 1; i <= n-1; i ++ ){
        int v, u, w;
        cin >> v >> u >> w;
        edges.push_back( make_pair( w, make_pair( u, v ) ) );
    }
    sort( edges.begin(), edges.end() );
    for( int i = 1; i <= m; i ++ ){
        int q; cin >> q;
        queries.push_back( make_pair( q, i ) );
    }
    sort( queries.begin(), queries.end() );
    for( int i = 1; i <= n; i ++ ){
        p[i] = i;
        sz[i] = 1;
    }
    int id = 0;
    for( auto qu: queries ){
        while( id < edges.size() && edges[id].first <= qu.first ){
            unin( edges[id].second.first, edges[id].second.second );
            id ++;
        }
        answers[qu.second] = res;
    }
    for( int i = 1; i <= m; i ++ ){
        cout << answers[i] << ' ';
    }
    return 0;
}
