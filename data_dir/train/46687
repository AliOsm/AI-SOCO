//g++ -std=c++11 -g -O2 -o ./a ./A.cpp
#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define ff first
#define ss second
#define rz resize
#define nl '\n'
typedef long long ll;
typedef pair<int,int> pii;
////////////////////////////////////////////////////////////////////////////////

const int N = 300100;
int n,m,q;

struct dsds{
  int p,e1,e2;
} ds[N];

int find(int x){return ds[x].p!=x?ds[x].p=find(ds[x].p):x;}
void mg(int x,int y){
  x=find(x),y=find(y);
  if(x==y)return;
  if(ds[x].e1<ds[y].e1)swap(x,y);
  if(ds[x].e1 == ds[y].e1){
    ds[x].e2=ds[y].e1;
    ds[x].e1++;
  }else{//ds[x].e1 > ds[y].e1;
    if(1+ds[y].e1==ds[x].e1){
      ds[x].e2 = ds[x].e1;
    }else if(1+ds[y].e1>ds[x].e2){
      ds[x].e2 = 1+ds[y].e1;
    }
  }
  ds[y].p=x;
}

vector<int> g[N];
bool vis[N];
int deg[N];
queue<int> Q;
vector<int> mids;

pii dfs(int x,int &root,int p=0){//ecc,v
  ds[x].p = root;
  int ecc=0,v=x;
  for(auto&it:g[x])
    if(it!=p){
      pii to = dfs(it,root,x);
      if(to.ff+1>ecc){
	ecc=to.ff+1;v=to.ss;
      }
    }
  return {ecc,v};
}

int d2(int x,int p=0){
  int ecc=0;
  for(auto&it:g[x])
    if(it!=p){
      int to = d2(it,x);
      ecc=max(ecc,to+1);
    }
  return ecc;
}

void f(int x){//cc
  pii t = dfs(x,x);
  ds[x].e1 = t.ff;
  int v = t.ss;
  ds[x].e2 = d2(v)-ds[x].e1;
}

int main(){
  ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
  
  cin>>n>>m>>q;
  for(int i=1;i<=n;i++){
    ds[i] = {i,0,0};
  }
  
  for(int u,v,i=1;i<=m;++i){
    cin>>u>>v;
    g[u].pb(v);g[v].pb(u);
  }
  
  memset(vis,0,sizeof vis);
  for(int i=1;i<=n;i++)deg[i]=g[i].size();
  for(int i=1;i<=n;i++)
    if(deg[i]==1){
      Q.push(i);
    }

  while(!Q.empty()){
    int fr = Q.front();Q.pop();
    vis[fr]=1;
    int par = 0;
    for(auto&it:g[fr])
      if(!vis[it]){
	par = it;
	deg[par]--;
	if(deg[par]==1)Q.push(par);
	break;
      }
    if(par==0)mids.pb(fr);
  }

  for(auto&it:mids)
    f(it);
  
  while(q--){
    int ty,u,v;cin>>ty>>u;
    if(ty==1){
      u=find(u);
      //cerr<<"~1:"<<u<<endl;
      cout<<ds[u].e1+ds[u].e2<<nl;
    }else{
      cin>>v;
      //cerr<<"~2:"<<u<<','<<v<<endl;
      mg(u,v);
    }
  }
  
  return 0;
};
