#include<bits/stdc++.h>
#define int long long int
#define ll long long int
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD1 998244353
#define f first
#define s second
#define endl '\n'
#define pii pair<int,int>
#define precise(i) cout<<fixed<<setprecision(i)
using namespace std;
const double PI = atan(1.0)*4;
const int64_t INF=100000000000000003;
const int32_t LOG=21;
const int MOD=1e9+7;
int power(int x,int y)
{
	if(y==0)return 1;
	int mul=power(x,y/2);
	mul=(mul*mul)%MOD;
	if(y&1)mul=(mul*x)%MOD;
	return mul;
}
int inv(int x)
{
	return power(x,MOD-2);
}
int32_t main()
{
	getFaster;
	int n,m;
	cin>>n>>m;
	int a[n],b[n];
	rep(i,0,n)cin>>a[i];
	rep(i,0,n)cin>>b[i];
	int ans=0;
	int mul=1;
	int inverse=inv(m);
	if(m==1)
	{
		cout<<0<<endl;
		return 0;
	}	
	rep(i,0,n)
	{
		 int x=a[i],y=b[i];
		 if(x==0 && y==0)
		 {
               int temp=(m*m-m)/2;
               int val=(inverse*inverse)%MOD;
               val=(val*temp)%MOD;
               val=(val*mul)%MOD;
               mul=(mul*inverse)%MOD;
               ans=ans+val;
               if(ans>=MOD)ans-=MOD;
		 }
		 else if(x==0)
		 {
             int temp=(m-y);
             int val=mul;
             val=(val*temp)%MOD;
             val=(val*inverse)%MOD;
             ans=ans+val;
             if(ans>=MOD)ans-=MOD;
             mul=(mul*inverse)%MOD; 
		 }
		 else if(y==0)
		 {
		 	int temp=x-1;
            int val=mul;
            val=(val*temp)%MOD;
            val=(val*inverse)%MOD;
            ans=ans+val;
            if(ans>=MOD)ans-=MOD;
            mul=(mul*inverse)%MOD;
		 }	
         else
         {
         	 if(x<y)break;
         	 if(x>y)
         	 {
         	 	ans=ans+mul;
         	 	if(ans>=MOD)ans-=MOD;
         	 	break;
         	 }	
         }	
	}
	cout<<ans<<endl;
	return 0;
}