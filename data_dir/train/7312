#pragma GCC optimize("O3")

#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <random>
#include <cmath>
#include <chrono>
#include <bitset>

#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()

#define int long long
using namespace std;

const int INF = 2e9;
const int MOD = 998244353;
const int MB = 20;
const int maxN = 2e5 + 1;

bool check(vector<int> a, vector<vector<int>>& b, int mid, int n) {
	vector<vector<int>> d(maxN);
	for (int i = 0; i < n; i++) {
		if (b[i].empty() || b[i][0] > mid) continue;
		for (int j = 0; j < b[i].size(); j++) {
			if (j == b[i].size() - 1 || b[i][j + 1] > mid) {
				d[b[i][j]].pb(i);
			}
		}
	}

	int now = 0;
	for (int i = 1; i < min(mid + 1, (int)d.size()); i++) {
		now++;
		for (int j : d[i]) {
			int x = min(a[j], now);
			now -= x;
			a[j] -= x;
		}
	}

	now += max(0LL, mid - (int) d.size() + 1);
	for (int i = 0; i < n; i++) {
		if (a[i] * 2 - now > 0) return false;
		else now -= a[i] * 2;
	}
	return true;
}

void solve() {
	int n, m;
	cin >> n >> m;
	vector<int> a(n);
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}

	vector<vector<int>> b(n);
	for (int i = 0; i < m; i++) {
		int c, num;
		cin >> c >> num;
		b[num - 1].pb(c);
	}

	for (int i = 0; i < n; i++) {
		sort(all(b[i]));
	}


	int l = 0;
	int r = INF;
	while (r - l > 1) {
		int mid = (r + l) >> 1;
		if (check(a, b, mid, n)) r = mid;
		else l = mid;
	}
	cout << r;
}

signed main() {
	/*
	freopen("search.in", "r", stdin);
	freopen("search.out", "w", stdout);
	*/
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}