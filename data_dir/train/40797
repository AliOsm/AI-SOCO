#ifdef DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <bits/stdc++.h>

using namespace std;

mt19937 mrand(random_device{} ()); 

int rnd(int x) {
  return mrand() % x;
}

typedef long double ld;
typedef long long ll;

#ifdef DEBUG
#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#else
#define eprintf(...) ;
#endif

#define pb push_back
#define mp make_pair
#define sz(x) ((int) (x).size())
#define TASK "text"

const int inf = (int) 1.01e9;
const ld eps = 1e-9;
const ld pi = acos((ld) -1.0);

void precalc() {
}

const int maxn = 30 + 5, maxt = 5 + 1;
int n;
int b[maxn];

int read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d", b + i);
  }
  return 1;
}

const int gox[4] = {1, 0, -1, 0}, goy[4] = {0, 1, 0, -1};

const int maxx = maxn * maxt * 2;
int a[maxx][maxx];

void gen(int iter, int x0, int y0, int dx, int dy) {
  if (iter == n) {
    return;
  }
  int x1 = x0 + dx * (b[iter] - 1), y1 = y0 + dy * (b[iter] - 1);
  for (int it = 0; it < 4; ++it) {
    int ndx = dx + gox[it], ndy = dy + goy[it];
    if (abs(ndx) <= 1 && abs(ndy) <= 1 && abs(ndx) + abs(ndy) == 1 + !(abs(dx) + abs(dy) - 1)) {
      eprintf("%d, %d\n", ndx, ndy);
      gen(iter + 1, x1 + ndx, y1 + ndy, ndx, ndy);
      break;
    }
  }
  for (int i = 0; i < maxx; ++i) {
    for (int j = 0; j < maxx; ++j) {
      if (!a[i][j]) {
        continue;
      }
      int px = i - x0, py = j - y0;
      int sc = dx * px + dy * py;
      int ni = 2 * dx * sc, nj = 2 * dy * sc;
      ni /= dx * dx + dy * dy;
      nj /= dx * dx + dy * dy;
      ni -= px, nj -= py;
      ni += x0, nj += y0;
      a[ni][nj] = 1;
    }
  }
  for (int i = 0; i < b[iter]; ++i) {
    a[x0 + dx * i][y0 + dy * i] = 1;
  }
  if (0) {
    eprintf("iter = %d\n", iter);
    const int c = 10;
    for (int i = -c; i <= c; ++i) {
      for (int j = -c; j <= c; ++j) {
        eprintf("%d", a[i + x0][j + y0]);
      }
      eprintf("\n");
    }
  }
}

void solve() {
  memset(a, 0, sizeof(a));
  gen(0, maxx / 2, maxx / 2, 1, 0);
  int res = 0;
  for (int i = 0; i < maxx; ++i) {
    for (int j = 0; j < maxx; ++j) {
      res += a[i][j];
    }
  }
  printf("%d\n", res);
}

int main() {
  precalc();
#ifdef LOCAL
  freopen(TASK ".out", "w", stdout);
  assert(freopen(TASK ".in", "r", stdin));
#endif

  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time %.2f\n", (double) clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
