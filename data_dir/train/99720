#include "bits/stdc++.h"
using namespace std;
#ifdef ONLINE_JUDGE
#define trace(...)
#endif

using LL = long long;
const int INF = 1e8;

vector<string> grid;
string ans;
int n, m;

void check_row(string a, string b, int& prev_best) {
	string curr = "-" + a + b;
	int cost = 0;
	for (int i = 0; i < n; i++) {
		int val1 = 0, val2 = 0;
		for (int j = 0; j < m; j++) {
			if (grid[i][j] != a[j & 1]) val1++;
			if (grid[i][j] != a[(j + 1) & 1]) val2++;
		}
		cost += min(val1, val2);
		swap(a, b);
	}

	if (cost < prev_best) {
		prev_best = cost;
		ans = curr;
	}
}

void check_col(string a, string b, int& prev_best) {
	string curr = "|" + a + b;
	int cost = 0;
	for (int i = 0; i < m; i++) {
		int val1 = 0, val2 = 0;
		for (int j = 0; j < n; j++) {
			if (grid[j][i] != a[j & 1]) val1++;
			if (grid[j][i] != a[(j + 1) & 1]) val2++;
		}
		cost += min(val1, val2);
		swap(a, b);
	}

	if (cost < prev_best) {
		prev_best = cost;
		ans = curr;
	}
}

void answer() {
	string a = ans.substr(1, 2);
	string b = ans.substr(3, 2);
	if (ans[0] == '-') {
		for (int i = 0; i < n; i++) {
			int val1 = 0, val2 = 0;
			for (int j = 0; j < m; j++) {
				if (grid[i][j] != a[j & 1]) val1++;
				if (grid[i][j] != a[(j + 1) & 1]) val2++;
			}
			if (val2 < val1) swap(a[0], a[1]);
			for (int j = 0; j < m; j++) grid[i][j] = a[j & 1];
			if (val2 < val1) swap(a[0], a[1]);
			swap(a, b);
		}
	} else {
		for (int i = 0; i < m; i++) {
			int val1 = 0, val2 = 0;
			for (int j = 0; j < n; j++) {
				if (grid[j][i] != a[j & 1]) val1++;
				if (grid[j][i] != a[(j + 1) & 1]) val2++;
			}
			if (val2 < val1) swap(a[0], a[1]);
			for (int j = 0; j < n; j++) grid[j][i] = a[j & 1];
			if (val2 < val1) swap(a[0], a[1]);
			swap(a, b);
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		string s; cin >> s;
		grid.push_back(s);
	}

	int cost = INF;
	check_row("AT", "GC", cost);
	check_row("AG", "TC", cost);
	check_row("AC", "TG", cost);
	check_row("TG", "AC", cost);
	check_row("TC", "AG", cost);
	check_row("GC", "AT", cost);

	check_col("AT", "GC", cost);
	check_col("AG", "TC", cost);
	check_col("AC", "TG", cost);
	check_col("TG", "AC", cost);
	check_col("TC", "AG", cost);
	check_col("GC", "AT", cost);
	trace(cost);
	answer();
	for (int i = 0; i < n; i++) {
		cout << grid[i] << '\n';
	}

	return 0;
}
