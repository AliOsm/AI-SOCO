#include <iostream>
#include <algorithm>
#include <time.h>
#include <stack>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <cassert>

using namespace std;

const int N = 1000005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;

int n,m,k;
vector < pair<int,long long> > g[N];
long long pref[N] , suf[N];
long long Toms[N];

int main(){
    scanf("%d%d%d",&n,&m,&k);
    for(int i=1;i<=m;i++){
        int d,a,b;
        long long c;
        scanf("%d%d%d%lld",&d,&a,&b,&c);
        if(a == 0)
            g[d].push_back(make_pair(-b , c));
        else
            g[d].push_back(make_pair(a , c));
    }
    for(int i=1;i<=n;i++) Toms[i] = -1;
    int sz = 0;
    long long sum = 0;
    for(int i=1;i<=1000*1000;i++){
        for(int j=0;j<(int)g[i].size();j++){
            int to = g[i][j].first;
            long long len = g[i][j].second;
            if(to < 0)continue;
            if(Toms[to] == -1){
                Toms[to] = len;
                sum += len;
                sz++;
            }
            else{
                sum -= Toms[to];
                Toms[to] = min(Toms[to] , len);
                sum += Toms[to];
            }
        }
        if(sz == n)
            pref[i] = sum;
        else
            pref[i] = -1;
    }
    for(int i=1;i<=n;i++) Toms[i] = -1;
    sz = 0;
    sum = 0;
    for(int i=1000*1000;i>=1;i--){
        for(int j=0;j<(int)g[i].size();j++){
            int to = g[i][j].first;
            long long len = g[i][j].second;
            if(to > 0)continue;
            to *= -1;
            if(Toms[to] == -1){
                Toms[to] = len;
                sum += len;
                sz++;
            }
            else{
                sum -= Toms[to];
                Toms[to] = min(Toms[to] , len);
                sum += Toms[to];
            }
        }
        if(sz == n)
            suf[i] = sum;
        else
            suf[i] = -1;
    }
    long long answ = -1;
    for(int i=1;i<=1000*1000;i++){
        if(i + k + 1 > 1000 * 1000)break;
        if(pref[i] == -1 || suf[i + k + 1] == -1)continue;
        if(answ == -1 || pref[i] + suf[i + k + 1] < answ)
            answ = pref[i] + suf[i + k + 1];
    }
    cout<<answ<<endl;
    return 0;
}
