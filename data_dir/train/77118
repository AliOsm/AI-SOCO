#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
#ifdef _WIN32
  return abs((rand() << 15) ^ rand());
#else
  return rand();
#endif
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int inf = (int) 1.01e9;
const ld eps = 1e-9;
const ld pi = acos(-1.0L);

const int bigK = 13;
int prec[1 << bigK];

void precalc() {
  for (int i = 0; i < (1 << bigK); ++i) {
    prec[i] = __builtin_popcount(i);
  }
}

const int maxm = (int) 1e5 + 10;
int a[maxm];

int n, m;

char s[maxm];

bool read() {
  if (scanf("%d%d", &n, &m) < 2) {
    return 0;
  }
  for (int i = 0; i < m; ++i) {
    a[i] = 0;
  }
  for (int i = 0; i < n; ++i) {
    scanf("%s", s);
    for (int j = 0; j < m; ++j) {
      a[j] ^= ((s[j] - '0') << i);
    }
  }
  return 1;
}

const int maxn = 20;
int cnt[bigK + 1][1 << (maxn - bigK)];

void solve() {
  int K = min(n, bigK);
  int res = inf;
  for (int mask = 0; mask < (1 << K); ++mask) {
    memset(cnt, 0, sizeof(cnt));
    for (int i = 0; i < m; ++i) {
      cnt[prec[mask ^ (a[i] & ((1 << K) - 1))]][a[i] >> K] += 1;
    }
    for (int lmask = 0; lmask < (1 << (n - K)); ++lmask) {
      int value = 0;
      for (int dig = 0; dig <= K; ++dig) {
        for (int mask = 0; mask < (1 << (n - K)); ++mask) {
          int cur = cnt[dig][mask];
          if (!cur) {
            continue;
          }
          int val = (dig + prec[mask ^ lmask]);
          value += cur * min(val, n - val);
        }
      }
      res = min(res, value);
    }
  }
  printf("%d\n", res);
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

#ifdef DEBUG
  if (0) {
    n = 20, m = 100000;
    for (int j = 0; j < m; ++j) {
      a[j] = rnd(1 << n);
    }
    solve();
    eprintf("Time: %.18lf\n", (double)clock() / CLOCKS_PER_SEC);
    return 0;
  }
#endif
  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time: %.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
