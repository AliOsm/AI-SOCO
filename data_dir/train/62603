#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <cassert>
#include <set>  
#include <utility>
#include <functional>
#include <climits>

#ifndef ONLINE_JUDGE
#include <chrono>
#endif  // ONLINE_JUDGE


int solve();

int main(int argc, char* argv[] )
{
#ifndef ONLINE_JUDGE
	(void)freopen("input.txt", "r", stdin);
	(void)freopen("output.txt", "w", stdout);
#endif // ONLINE_JUDGE


#ifndef ONLINE_JUDGE
	auto a = std::chrono::steady_clock::now();
#endif  // ONLINE_JUDGE
	

/*****************************************/
	int Q = 1;

	(void)scanf("%d", &Q);
	
	while(Q--)
		solve() ;

/******************************************/


#ifndef ONLINE_JUDGE
	auto b = std::chrono::steady_clock::now();

	__int64 n = std::chrono::duration_cast< std::chrono::microseconds >( b - a ).count() ;

	printf("elapsed: %ld\n", (long int) n);
#endif  // ONLINE_JUDGE


	return 0;
}




static int readInt()
{
	int x = 0;
	if (1 == scanf("%d", &x))
		return x;
	return 0;
}
 
static const int N = (1 << 18);


int solve()
{  
	const int n = readInt();
	
	std::vector<int> a(n);
	
	for (int i = 0; i < n; ++i)a[i] = readInt();
	
	std::sort(a.begin(), a.end());

	std::vector< int > p;
	for (int i = 0; i < n; ++i) {
		if (i == 0 || a[i] != a[i - 1]) {
			p.push_back(  1 );
		}
		else {
			++p.back() ;
		}
	}

	std::sort(p.begin(), p.end());

	int ans = 0;
	int last = INT_MAX;

	while (!p.empty() && last > 0 ) {
		int e = p.back();
		p.pop_back();

		last = std::min(last, e);
		ans += last;
		--last;
	}

	printf("%d\n", ans);


	return 0;
}
