#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define ndl '\n'
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<int, ll> pil;
typedef pair<ll, int> pli;
typedef pair<int, ull> piu;
typedef vector<vector<int>> matrix;

const ll INF = 1e18 + 123;
const ld EPS = 1e-9;
const int inf = 1e9 + 123;
const int MOD = 1e9 + 7;
const int N = 3333;
const int M = 1e6 + 123;
const double pi = acos(-1.0);
const int dx[] = {0, 0, 1, -1};
const int dy[] = {1, -1, 0, 0};

bool b[N];

void solve(){
    int n, k;
    cin >> n >> k;
    for (int i = 1; i <= n; i++){
        char c;
        cin >> c;
        b[i] = c == 'R';
    }
    vector<int> cur, x;
    int cnt = 0;
    for (int i = 1; i < n; i++){
        if (b[i] && !b[i+1]){
            cur.pb(i);
        //    cout << i << endl;
            i++;
            cnt++;
        }
    }
    vector<vector<int>> ans;
    ans.pb(cur);
    while (sz(ans) <= k){
        x.clear();
        swap(x, cur);
        for (int i = 0; i < sz(x); i++){
            b[x[i]] = 0;
            b[x[i]+1] = 1;
            if (b[x[i]-1] == 1){
                cur.pb(x[i]-1);
                //cout << x[i]-1 << endl;
            }
            if (x[i]+2 <= n && b[x[i]+2] == 0){
                cur.pb(x[i]+1);
                //cout << x[i]+2 << endl;
            }
        }
        if (cur.empty())break;
        cnt += sz(cur);
        ans.pb(cur);
    }
    if (sz(ans) > k || cnt < k){
        cout << -1;
        return;
    }
    for (int i = 0, j = 0;k; k--){
        if (j == sz(ans[i])){
            i++;
            j = 0;
        }
        if (sz(ans)-i == k){
            cout << sz(ans[i])-j;
            for (;j < sz(ans[i]); j++) cout << " " << ans[i][j];
            cout << ndl;
            continue;
        }
        cout << 1 << " " << ans[i][j] << ndl;
        j++;
    }

}

int main(){
    #ifdef KAZAKH
        freopen("input.txt", "r", stdin);
    #endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t = 1;
    //cin >> t;
    for (int i = 1; i <= t; i++){
        //cout << "case #" << i << ": ";
        solve();
    }
    return 0;
}
