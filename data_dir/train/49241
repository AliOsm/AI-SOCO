#include "bits/stdc++.h"
#define FI first.first
#define SE first.second
#define TH second
#define fi first
#define se second
#define th second

using namespace std;

void debug_out() { cerr << endl; }
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
 
#ifdef DEBUG
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

class DebugStream {}LOG;
template <typename T>DebugStream &operator<<(DebugStream &s, const T&) { return s; }
#ifdef DEBUG
#define LOG clog
#endif

typedef long long ll;
typedef pair<ll, ll> ii;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());

const int maxN = 2e3 + 9, maxV = 1e6 + 9, MOD = 1e9 + 7, SQ = 335, lg = 20, bs = 29;

int dp[maxN][maxN], nxtk[maxN][maxN], n, k;
const string nms[10] = {"1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011"};
int kys[10], arr[maxN];

int prend(int x) {
	int ret = 0;
	while(x) {
		if(x & 1) ret++;
		x >>= 1;
	}
	return ret;
}

int cnv(string str) {
	assert(str.size() == 7);
	int ret = 0;
	for(int j = 0; j < 7; j++)
		ret = ret * 2 + str[j] - '0';
	return ret;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	#ifdef DEBUG
	freopen("input.txt", "r", stdin);
	#endif

	for(int i = 0; i < 10; i++)
		for(int j = 0; j < 7; j++)
			kys[i] = cnv(nms[i]);

	cin >> n >> k;
	for(int i = 0; i < n; i++) {
		string inp;
		cin >> inp;
		arr[i] = cnv(inp);
	}

	for(int i = 0; i <= n; i++)
		for(int j = 0; j <= k; j++)
			dp[i][j] = -1;
	dp[n][0] = 0;

	for(int i = n - 1; i >= 0; i--) {
		for(int d = 0; d < 10; d++) {
			if((kys[d] | arr[i]) != kys[d]) continue;
			int costo = prend(kys[d]) - prend(arr[i]);
			for(int j = costo; j <= k; j++)
				if(dp[i + 1][j - costo] != -1)
					dp[i][j] = d, nxtk[i][j] = j - costo;
		}
	}

	if(dp[0][k] == -1) {
		cout << "-1\n"; return 0;
	}

	for(int i = 0; i < n; k = nxtk[i][k], i++) cout << dp[i][k];
	cout << '\n';
}

