#include <stdio.h>
#include <vector>
#define pb push_back
using namespace std;

const int MAXN = (int)1e5 + 5;

vector <int> g[MAXN];
int label[MAXN];
int sum[MAXN];

int DFS(int node, int p = -1) {
    sum[node] = 1;
    for (int i = 0; i < (int)g[node].size(); i++) {
        int viz = g[node][i];
        if (viz != p && label[viz] == 0) {
            sum[node] += DFS(viz, node);
        }
    }
    return sum[node];
}

int DFS2(int node, int n, int p = -1) {
    for (int i = 0; i < (int)g[node].size(); i++) {
        int viz = g[node][i];
        if (viz != p && label[viz] == 0 && sum[viz] > n / 2) {
            return DFS2(viz, n, node);
        }
    }
    return node;
}

void decompose(int node, int n, int next_label) {
    DFS(node);
    int cent = DFS2(node, n);
    label[cent] = next_label;

    for (int i = 0; i < (int)g[cent].size(); i++) {
        int viz = g[cent][i];
        if (label[viz] == 0) {
            decompose(viz, sum[viz], next_label + 1);
        }
    }
    return;
}

int main(void) {
    int n;
    int x, y;

    scanf(" %d", &n);
    for (int i = 1; i < n; i++) {
        scanf(" %d %d", &x, &y);
        g[x].pb(y);
        g[y].pb(x);
    }
    decompose(1, n, 1);

    for (int i = 1; i <= n; i++) {
        if (i != 1) {
            printf(" ");
        }
        printf("%c", label[i] + 'A' - 1);
    }
    printf("\n");
    return 0;
}
