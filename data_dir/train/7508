#include <bits/stdc++.h>
using namespace std;
#define mod 998244353
#define oo 2000000000
const int N = 200010;
long long sum[N] , sum2[N];
long long num[N];
vector< int > g[N];
int n , arr[N];
int u , v;

void DFS(int node,int prnt){
	num[node] = arr[node];
	sum[node] = 0;
	for(int i=0;i<(int)g[node].size();i++){
		if(g[node][i] == prnt) continue;
		DFS(g[node][i],node);
		sum[node] += sum[g[node][i]] + num[g[node][i]];
		num[node] += num[g[node][i]];
	} 
}

void DFS2(int node,int prnt,long long s,long long num2){
	sum2[node] = s;
	num2 += num[node];
	s += sum[node];
	for(int i=0;i<(int)g[node].size();i++){
		if(g[node][i] == prnt) continue;
		s -= sum[g[node][i]] + num[g[node][i]];
		num2 -= num[g[node][i]];
		DFS2(g[node][i],node,s + num2,num2);
		s += sum[g[node][i]] + num[g[node][i]];
		num2 += num[g[node][i]];
	}
}

int main(){
	scanf("%d",&n);
	for(int i = 1;i<=n;i++){
		scanf("%d",&arr[i]);
	}
	for(int i=0;i<n-1;i++){
		scanf("%d%d",&u,&v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	DFS(1,-1);
	DFS2(1,-1,0,0);
	long long ans = 0;
	for(int i=1;i<=n;i++){
		ans = max(ans,sum[i] + sum2[i]);
	}
	cout << ans << endl;
    return 0;
}