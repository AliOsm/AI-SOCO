#include <bits/stdc++.h>

using namespace std;

typedef unsigned uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ldbl;
typedef pair<int, int> pii;
typedef pair<uint, uint> puu;
typedef pair<ll, ll> pll;
typedef pair<ull, ull> pull;
typedef vector<int> vi;
typedef vector<uint> vu;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<pii> vpii;
typedef vector<puu> vpuu;
typedef vector<pll> vpll;
typedef vector<pull> vpull;
typedef vector<string> vstr;
typedef vector<double> vdbl;
typedef vector<ldbl> vldbl;
#define pb push_back
#define ppb pop_back
#define pfr push_front
#define ppfr pop_front
#define emp emplace
#define empb emplace_back
#define be begin
#define rbe rbegin
#define all(x) (x).be(), (x).end()
#define rall(x) (x).rbe(), (x).rend()
#define fir first
#define sec second
#define mkp make_pair
#define brif(cond) if (cond) break
#define ctif(cond) if (cond) continue
#define retif(cond) if (cond) return
static inline void canhazfast() {ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}
template<typename T> T gcd(T a, T b) {return b ? gcd(b, a%b) : a;}
template<typename T> T extgcd(T a, T b, T &x, T &y)
{
    T x0 = 1, y0 = 0, x1 = 0, y1 = 1;
    while (b) {
        T q = a/b; a %= b; swap(a, b);
        x0 -= q*x1; swap(x0, x1);
        y0 -= q*y1; swap(y0, y1);
    }
    x = x0; y = y0; return a;
}
int ctz(uint x) {return __builtin_ctz(x);}
int ctzll(ull x) {return __builtin_ctzll(x);}
int clz(uint x) {return __builtin_clz(x);}
int clzll(ull x) {return __builtin_clzll(x);}
int popcnt(uint x) {return __builtin_popcount(x);}
int popcntll(ull x) {return __builtin_popcountll(x);}
int bsr(uint x) {return 31^clz(x);}
int bsrll(ull x) {return 63^clzll(x);}

#define MX 128
#define up -1, 0
#define down 1, 0
#define left 0, -1
#define right 0, 1

const int dx[] = {-1, 0, 0, 1};
const int dy[] = {0, -1, 1, 0};
bool sx, sy;
int n, m;
int xf, yf;
int xcur, ycur;
int xold, yold;
bool vis[MX][MX];
char a[MX][MX];

bool safe(int x, int y) { return a[x][y] != '*'; }

void go(int dx, int dy)
{
    if (sx) dx = -dx;
    if (sy) dy = -dy;
    char mv = dx ? (dx < 0 ? 'U' : 'D') : (dy < 0 ? 'L' : 'R');
    xold = xcur; yold = ycur;
    cout << mv << endl;
    cin >> xcur >> ycur;
    if (xcur < 0 && ycur < 0) exit(0);
    --xcur; --ycur;
    if (xcur == xf && ycur == yf) exit(0);
}

bool dfs(int x, int y, int xt, int yt)
{
    retif(x == xt && y == yt) true;
    vis[x][y] = true;
    for (int k = 0; k < 4; ++k) {
        int xx = x+dx[k], yy = y+dy[k];
        ctif(xx < 0 || xx >= n);
        ctif(yy < 0 || yy >= m);
        ctif(!safe(xx, yy) || vis[xx][yy]);
        retif(dfs(xx, yy, xt, yt)) go(x-xx, y-yy), true;
    }
    return false;
}

int main()
{
    canhazfast();

    cin >> n >> m;
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        for (int j = 0; j < m; ++j) {
            if (a[i][j] == 'F') xf = i, yf = j;
        }
    }
    //cerr << "(xf, yf) = (" << xf << ", " << yf << ")\n";
    if (n == 1) {
        go(right);
        if (ycur == yold) sy = true;
        for (;;) go(right);
    }
    if (m == 1) {
        go(down);
        if (xcur == xold) sx = true;
        for (;;) go(down);
    }

    if (safe(1, 0)) {
        go(down);
        if (xcur == xold) sx = true;
        else go(up);
        while (!safe(xcur, 1)) go(down);
        go(right);
        if (ycur == yold) sy = true;
    } else {
        go(right);
        if (ycur == yold) sy = true;
        else go(left);
        while (!safe(1, ycur)) go(right);
        go(down);
        if (xcur == xold) sx = true;
    }
    //cerr << "flip x = " << sx << '\n';
    //cerr << "flip y = " << sy << '\n';
    dfs(xf, yf, xcur, ycur);

    return 0;
}
