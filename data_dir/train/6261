#include <bits/stdc++.h>
using namespace std;
const int maxn = (int)1e5 + 10;
vector<int> v[maxn];
int a[maxn];
int dpl[maxn], dpr[maxn];
int f[maxn];
void put(int pos, int val) {
	for (int i = pos; i < maxn; i |= i + 1) {
		f[i] = max(f[i], val);
	}
}
int get(int pos) {
	int res = 0;
	for (int i = pos; i >= 0; i = (i & (i + 1)) - 1) {
		res = max(res, f[i]);
	}
	return res;
}
int main() {
	#ifdef LOCAL
	freopen("a.in", "r", stdin);
	freopen("a.out", "w", stdout);
	#endif
	int n,m; cin >> n >> m;
	for (int i = 0; i < n; i++) {
		int l,r; scanf("%d%d",&l,&r);
		v[l].push_back(r);
	}
	multiset<int> st;
	for (int i = 1; i <= m; i++) {
		for (int j = 0; j < v[i].size(); j++) st.insert(v[i][j]);
		while(!st.empty() && *st.begin() < i) {
			st.erase(st.begin());
		}
		a[i] = st.size();
	}
	for (int i = 1; i <= m; i++) {
		dpl[i] = get(a[i]) + 1;
		put(a[i], dpl[i]);
	}
	memset(f, 0, sizeof(f));
	for (int i = m; i >= 1; i--) {
		dpr[i] = get(a[i]) + 1;
		put(a[i], dpr[i]);
	}
	int res = 0;
	for (int i = 1; i <= m; i++) {
		res = max(res, dpl[i] + dpr[i] - 1);
	}
	cout << res << endl;
	return 0;
}