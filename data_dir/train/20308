#include <bits/stdc++.h>

    using namespace std;
    typedef long long ll;
    typedef vector<ll> vl ;

    #define mp make_pair
    #define pb push_back
    #define f first
    #define s second
    #define all(v) (v).begin(),(v).end()


    const int MOD = 1000000007;
    const int N = 1000005;
    const double PI =4*atan(1);
    const double eps = 1e-7;

    ll n;
    ll dp[1005][256];
    bool vis[1005][256];
    ll a[1005];
    ll troll[1005][1005];
    ll t[12];

    ll solve(ll pos, ll mask, ll toul){
        if(pos>=n){
            if(toul==0){
                return 0;
            }else{
                if(mask!=(1<<8)-1)return -1e18;
                return 0;
            }
        }
        if(vis[pos][mask])return dp[pos][mask];
        vis[pos][mask]=1;
        ll to_return = solve(pos+1,mask, toul);
        if(((1<<a[pos]) & mask) == 0){
            ll x=troll[pos][toul];
            if(x!=-1){
                to_return =max(to_return , toul + solve(x+1,mask+(1<<a[pos]),toul));
            }
            x=troll[pos][toul+1];
            if(x!=-1){
                to_return =max(to_return , toul + 1 + solve(x+1,mask+(1<<a[pos]),toul));
            }
        }
        return dp[pos][mask]=to_return;
    }

    ll possible(ll u){
        memset(dp,-1,sizeof(dp));
        memset(vis,0,sizeof(vis));
        ll ans = solve(0,0,u);
        return ans;
    }

    
    int main(){
        ios::sync_with_stdio(0);
        //freopen("easy.txt","r",stdin);
        memset(dp,-1,sizeof(dp));
        memset(troll,-1,sizeof(troll));
        cin >> n;
        ll ma=10000;
        for(int i=0;i<n;i++){
            cin >> a[i];
            a[i]--;
            t[a[i]]++;
        }
        for(int i=0;i<n;i++){
            ll cnt=0;
            for(int j=i;j<n;j++){
                if(a[j]==a[i]){
                    cnt++;
                    troll[i][cnt]=j;
                }
            }
        }
        for(int i=0;i<8;i++){
            ma=min(ma,t[i]);
        }
        ll l = 0;
        ll r = ma;
        while(l<r-1){
            ll mid=(l+r)/2;
            if(possible(mid)>=0){
                l=mid;
            }else{
                r=mid-1;
            }
        }
        ll x=possible(r);
        if(x>=0){
            cout << x;
        }else{
            x=possible(l);
            cout << x << endl;
        }
        return 0;
    }
