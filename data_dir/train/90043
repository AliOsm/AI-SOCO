#include <iostream>
#include <math.h>
#include <sstream>

using namespace std;

int** A;
int t;
stringstream sout;

int findEmptyCol(int n)
{
	int i, j;
	for (i = 0; i < n; i++)
	{
		bool s = true;
		for (j = 0; j < n; j++)
		{
			if (A[j][i] == 1)
			{
				s = false;
				break;
			}
		}
		if (s)
			return i;
	}
}

void replace(int n, int a, int b, int type)
{
	// t = 1 -> swap rows ...
	// t = 2 -> swap column ...

	sout << type << ' ' << a+1 << ' ' << b+1 << endl;
	t++;

	if (type == 1)
	{
		int i, j;
		for (i = 0; i < n; i++)
		{
			int c = A[a][i];
			A[a][i] = A[b][i];
			A[b][i] = c;
		}
	}
	else
	{
		int i;
		for (i = 0; i < n; i++)
		{
			int c = A[i][a];
			A[i][a] = A[i][b];
			A[i][b] = c;
		}
	}

}

int findOneInRow(int n)
{
	int i, j;
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			if (A[i][j] == 1)
			{
				return i;
			}
		}
	}
	return -1;
}

void solve(int n)
{
	if (n == 1)
		return;
	else
	{
		int emptyCol = findEmptyCol(n);
		if (n-1 != emptyCol)
			replace(n, emptyCol, n-1, 2);
		int r = findOneInRow(n);
		if (r != -1)
			if (r != n-1)
				replace(n, r, n-1, 1);
		else
			return;
		solve(n-1);
	}
}

int main()
{
	int N, i, j;
	cin >> N;

	A = new int*[N];
	for (i = 0; i < N; i++)
	    A[i] = new int[N];

	for (i = 0; i < N-1; i++)
	{
		int r, c;
		cin >> r >> c;
		A[r-1][c-1] = 1;
	}
	solve(N);
	cout << t << endl;
	cout << sout.str();

	return 0;
}
