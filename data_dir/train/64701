#include <bits/stdc++.h>
#include <ctime>
using namespace std;
typedef pair<int,int> pii;
typedef long long ll;
typedef pair<ll,ll> pll;
#define pb push_back
#define dout if(debug) cerr <<"  $ "
#define fi first
#define se second
#define sz(x) (int)x.size()
#define x1 asdflasdfl
#define y1 ldfadz
typedef double dbl;
const int MAXN = 1e6+100;
const int inf_int = 1e9+100;
const ll inf_ll = 1e18;
const dbl PI = 3.1415926535898;
bool debug = 0;
const int MOD = 1e9+7;
int n,k;
int less1[MAXN];
int bigg1[MAXN];

inline int add(int a,int b){
    a = a + b;
    if(a>=MOD)
        a-=MOD;
    return a;
}
inline int mul(int a,int b){
    return (1ll * a * b)%MOD;
}

int dp[2020][2020];
int pref[2020][2020];
void solve(){
    cin >> n >> k;
    string s;
    cin >> s;
    s = "#"+ s;
    for(int i=1;i<sz(s);++i){
        less1[i] = s[i]-'a';
        bigg1[i] = 'z' - s[i];
    }
    dp[0][0] = 1;
    pref[0][0] = 1;
    int ans = 0;
    for(int i=1;i<=n;++i){
        for(int e=0;e<=k;++e){
            dp[i][e] = mul(add(dp[i][e],pref[i-1][e]),less1[i]);
            dout << i <<" "<<e <<" "<<dp[i][e]<<endl;
            for(int eq = 0; e - 1ll * (1 + eq) * (n-i+1)>=0 && i-eq-1>=0 ; eq++){
                dout <<"try "<<i-eq-1<<" "<<e - (1+eq) * (n-i+1)<<" " <<endl;
                dp[i][e] = add(dp[i][e], mul(dp[i-eq-1][e - (1+eq) * (n-i+1) ] , bigg1[i]));
            }

            dout << i <<" "<<e <<" "<<dp[i][e]<<endl;

            pref[i][e] = add(pref[i-1][e],dp[i][e]);
        }
    }
    if(k==0)
        ans++;
    for(int i=1;i<=n;++i){
        ans = add(ans,dp[i][k]);
    }
    cout << ans;

}

#define FILE "refrain"
int main(){
    #ifdef zxc
        debug = 1;
        freopen("input.txt","r",stdin);
       // freopen("output.txt","w",stdout);
    #else
      //  freopen(FILE".in","r",stdin);
     //   freopen(FILE".out","w",stdout);
    #endif // zxc
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cout <<setprecision(15);
    solve();
}
