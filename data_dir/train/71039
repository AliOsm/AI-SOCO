/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
//#pragma comment(linker, "/STACK:1024000000,1024000000")
#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <list>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>
#include <functional>
#include <sstream>

using namespace std;

#define mpr make_pair
typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vll;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;

const double pi = acos(0.0) * 2.0;
const double eps = 1e-12;
const int step[8][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}
template <class T> inline T max1(T a, T b, T c = -1234567, T d = -1234567) {
	T ans =  a > b ? a : b;
	if(c != -1234567) ans = max1(ans, c);
	if(d != -1234567) ans = max1(ans, d);
	return ans;
}
template <class T> inline T min1(T a, T b, T c = -1234567, T d = -1234567) {
	T ans = a < b ? a : b;
	if(c != -1234567) ans = min(ans, c);
	if(d != -1234567) ans = min(ans, d);
	return ans;
}
template <class T> inline T gcd1(T a, T b) {
	if(a < b) swap(a, b);
	if(a % b == 0) return b;
	return gcd1(b, a % b);
}
template <class T> inline T lowb(T num) {return num & (-num); }
inline int jud(double a, double b){
	if(abs(a) < eps && abs(b) < eps) return 0;
	else if(abs1(a - b) / abs1(a) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
template <typename t>
inline int jud(t a, t b){
	if(a < b) return -1;
	if(a == b) return 0;
	return 1;
}
template <typename it, typename t1>
inline int find(t1 val, it a, int na, bool f_small = 1, bool f_lb = 1){
	int be = 0, en = na - 1;
	if(*a <= *(a + na - 1)){
		if(f_lb == 0) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != 1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != -1) en = mid;
			else be = mid + 1;
		}
		if(f_small && jud(*(a + be), val) == 1) be--;
		if(!f_small && jud(*(a + be), val) == -1) be++;
	} else {
		if(f_lb) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != -1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != 1) en = mid;
			else be = mid + 1;
		}
		if(!f_small && jud(*(a + be), val) == -1) be--;
		if(f_small && jud(*(a + be), val) == 1) be++;
	}
	return be;
}
inline int bitnum(ull nValue){
    nValue = ((0xaaaaaaaaaaaaaaaaull & nValue)>>1) + (0x5555555555555555ull & nValue);
    nValue = ((0xccccccccccccccccull & nValue)>>2) + (0x3333333333333333ull & nValue);
    nValue = ((0xf0f0f0f0f0f0f0f0ull & nValue)>>4) + (0x0f0f0f0f0f0f0f0full & nValue);
    nValue = ((0xff00ff00ff00ff00ull & nValue)>>8) + (0x00ff00ff00ff00ffull & nValue);
    nValue = ((0xffff0000ffff0000ull & nValue)>>16) + (0x0000ffff0000ffffull & nValue);
    nValue = ((0xffffffff00000000ull & nValue)>>32) + (0x00000000ffffffffull & nValue);
	return nValue;
}
long long pow(long long n, long long m, long long mod = 0){
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}
// debug

//.........................mi.......feng.......xian.......wai.......jin.......zhi.......challenge...............................................

const int maxn = 1000100;
struct edge {
	int to, nxt;
} e[maxn * 2];
int head[maxn], le;
int trans[maxn], arr[maxn * 3], larr, deep[maxn];
int n, nop;
int fa[maxn][22], to[maxn];

//inline void dfs(int no) {
//	arr[larr] = deep[no];
//	trans[no] = larr++;
//	for(int i = head[no]; i != -1; i = e[i].nxt) if(e[i].to != fa[no]) {
//		dfs(e[i].to);
//		arr[larr++] = deep[no];
//	}
//}
inline void initfa() {
	for(int i = 1; i <= 20; i++) {
		for(int j = 0; j < n; j++) {
			if(fa[j][i - 1] == -1) fa[j][i] = -1;
			fa[j][i] = fa[fa[j][i - 1]][i - 1];
		}
	}
}
inline int getfa(int no, int l) {
	for(int i = 0; l; l >>= 1, i++)
		if(l & 1) no = fa[no][i];
	return no;
}
inline int getlca(int a, int b) {
	if(deep[a] > deep[b]) swap(a, b);
	b = getfa(b, deep[b] - deep[a]);
	if(b == a) return a;
	for(int i = 20; i >= 0; i--)
		if(fa[a][i] != fa[b][i]){
			a = fa[a][i];
			b = fa[b][i];
		}
	return fa[a][0];
}
inline void addedge(int a, int b){
	e[le].to = b;
	e[le].nxt = head[a];
	head[a] = le++;
}
inline int getl(int a, int b) {
	int faa = getlca(a, b);
	return deep[a] + deep[b] - deep[faa] * 2;
}
int main(){
	ios_base::sync_with_stdio(0);
//	freopen("input.txt", "r", stdin);
	n = 4;
	fa[0][0] = -1;
//	addedge(0, 1); addedge(1, 0);
//	addedge(0, 2); addedge(2, 0);
//	addedge(0, 3); addedge(3, 0);
	fa[1][0] = fa[2][0] = fa[3][0] = 0;
	deep[1] = deep[2] = deep[3] = 1;
	scanf("%d", &nop);
	for(int i = 0; i < nop; i++) {
		scanf("%d", to + i);
		to[i]--;
//		addedge(to[i], 4 + i * 2);
//		addedge(4 + i * 2, to[i]);
//		addedge(to[i], 4 + i * 2 + 1);
//		addedge(4 + i * 2 + 1, to[i]);
		fa[4 + i * 2][0] = fa[4 + i * 2 + 1][0] = to[i];
		deep[4 + i * 2] = deep[4 + i * 2 + 1] = deep[to[i]] + 1;
		n += 2;
	}
//	dfs(0);
	initfa();
	int a = 1, b = 2, l = 2;
	int rn = 4;
	for(int i = 0; i < nop; i++, rn += 2) {
		int rl = getl(a, rn), rl1 = getl(b, rn);
		if(l < rl) {
			if(rl < rl1) {
				a = rn;
				l = rl1;
			}else {
				b = rn;
				l = rl;
			}
		} else if(l < rl1) {
			a = rn;
			l = rl1;
		}
		printf("%d\n", l);
	}

	return 0;
}



