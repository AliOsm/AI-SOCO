/*
    Author: @aliencoder22
    Anil Bansal, DTU
*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define PSET(x,y) fixed<<setprecision(y)<<x
#define pb push_back
#define pf push_front
#define mp make_pair
#define pii pair<int,int>
#define pid pair<int,double>
#define vi vector<int>
#define ff first
#define ss second
#define int long long
#define ull unsigned long long
#define SIZE 200010
#define mod 1000000007
#define BIG 998244353
#define s(t) scanf("%d",&t)
#define p(t) printf("%d\n",t)
#define mii map<int,int>
#define TC int tc;cin>>tc;while(tc--)
#define MSET(table,i) memset(table, i, sizeof(table))
#define N 31607
#define INF 1e18
#define endl '\n'
#define tc int t;cin>>t;while(t--)

int  max3(int  a,int  b,int c)
{
    return max(c,max(a,b));
}
int min3(int a,int  b,int  c)
{
    return min(a,min(b,c));
}
int  power(int  x,int  y )
{
    int res = 1;
    while (y > 0)
    {
        if (y & 1)
            res = (res*x);
        y = y>>1;
        x = (x*x);
    }
    return res;
}
int  powermod(int  x,int  y,int p )
{
    int res = 1;
    while (y > 0)
    {
        if (y & 1)
            res = (res*x)%p;
        y = y>>1;
        x = (x*x)%p;
    }
    return res%p;
}
int logg(int  a)
{
    int  x=0;
    while(a>1)
    {
        x++;
        a/=2;
    }
    return x;
}
int  gcd(int  a,int   b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}
int ceiling (int  a,int  b)
{
    if(a%b==0)
        return a/b;
    else
        return a/b+1;
}
int modinv(int x)
{
    return powermod(x,mod-2,mod);
}

bool check(int maxbooks,int *prefix,int n,int t)
{
    if(maxbooks==0)
        return true;
    if(prefix[maxbooks-1]<=t)
        return true;
    for(int i=maxbooks;i<n;i++)
    {
        if((prefix[i]-prefix[i-maxbooks])<=t)
            return true;
    }
    return false;
}

int solve(int *arr,int *prefix,int start,int end,int n,int t)
{
    while(start<=end)
    {
        int mid=(start+end)/2;
        if(check(mid,prefix,n,t))
        {
            if(!check(mid+1,prefix,n,t))
                return mid;
            else
                start=mid+1;
        }
        else
            end=mid-1;
    }
}

int32_t main()
{
    int n,t;cin>>n>>t;
    int *arr=new int[n];
    for(int i=0;i<n;i++)
        cin>>arr[i];
    int prefix[n];
    prefix[0]=arr[0];
    for(int i=1;i<n;i++)
        prefix[i]=prefix[i-1]+arr[i];
    cout<<solve(arr,prefix,0,n,n,t);
}