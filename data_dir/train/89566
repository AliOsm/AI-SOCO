#include <bits/stdc++.h>

#define pb push_back
#define all(x) (x).begin(), (x).end()

#ifdef KAZAR
  #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
  #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a < b) a = b;}
template<class T> inline void umin(T &a,T b){if(a > b) a = b;}
template<class T> inline T abs(T a){return a > 0 ? a : -a;}

typedef unsigned long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 10100;

ll f[N], tmp[N];
int l[N], r[N];

int get(int x,int l,int r) {
  if (x < l) return l - x;
  if (x > r) return x - r;
  return 0;
}

int main(){

#ifdef KAZAR
  freopen("f.input","r",stdin);
  freopen("f.output","w",stdout);
  freopen("error","w",stderr);
#endif

  int n = read();
  int xstart = read();

  vi xs;
  xs.pb(xstart);
  for (int i = 0; i < n; i++) {
    l[i] = read();
    r[i] = read();
    xs.pb(l[i]);
    xs.pb(r[i]);
  }

  sort(all(xs));
  xs.erase(unique(all(xs)), xs.end());

  xstart = lower_bound(all(xs), xstart) - xs.begin();

  int sz = xs.size();

  for (int i = 0; i < sz; i++)
    f[i] = longinf;
  f[xstart] = 0ll;
  for (int i = 0; i < n; i++) {
    ll mn = longinf;
    for (int x = 0; x < sz; x++) {
      umin(mn, f[x]);
      tmp[x] = mn + get(xs[x], l[i], r[i]);
      if (x + 1 < sz)
        mn += xs[x + 1] - xs[x];
    }
    mn = longinf;
    for (int x = sz - 1; x >= 0; x--) {
      umin(mn, f[x]);
      f[x] = min(tmp[x], mn + get(xs[x], l[i], r[i]));
      if (x - 1 >= 0)
        mn += xs[x] - xs[x - 1];
    }
  }
  ll ans = longinf;
  for (int i = 0; i < sz; i++)
    umin(ans, f[i]);
  printf("%I64d\n", ans);

  return 0;
}
