#include <bits/stdc++.h>
#ifdef DEBUG
#include "_debug.cpp"
#include "callable.hpp/callable.hpp"
#endif
#define endl '\n'
using namespace std;
using ll = long long;
#define N 200'000
ll a[N], s[N];
template <typename T, typename Function>
T bsearch(T L, T R, const Function& can, bool left_feasible = true) {
#ifdef DEBUG
    using actual_type = typename callable_traits<Function>::function_type;
    using expected_type = typename callable_traits<bool(T)>::function_type;
    static_assert(is_same<actual_type, expected_type>::value, "bsearch \"can\" must be bool(T)");
#endif
    T& feasible = left_feasible ? L : R;
    T& infeasible = left_feasible ? R : L;
    while(R - L > 1) {
        T M = (L + R) / 2;
        (can(M) ? feasible : infeasible) = M;
    }
    return feasible;
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n, q;
    cin >> n >> q;
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
    partial_sum(a, a + n, s);
    int L = 0;
    ll ds = 0;
    while(q--) {
        ll k;
        cin >> k;
        if(s[n-1] + ds <= k) {
            L = 0;
            ds = 0;
        } else {
            L = bsearch(L - 1, n - 1, [&](int i) {
                return s[i] + ds > k;
            }, false);
            ds = (L == 0 ? 0 : -s[L-1]) - (k - ((L == 0 ? 0 : s[L-1]) + ds));
        }
        cout << n - L << endl;
    }
    return 0;
}
