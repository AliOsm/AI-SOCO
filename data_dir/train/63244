#include <bits/stdc++.h>
using LL = long long ;
#define ALL(v) (v).begin(),(v).end()
#define showtime printf("time = %.15f\n",clock() / (double)CLOCKS_PER_SEC)

struct Point {
    int x,y;
    Point(int _x = 0,int _y = 0) : x(_x),y(_y) {}
    Point operator + (const Point &rhs) const {
        return Point(x + rhs.x,y + rhs.y);
    }
    Point operator - (const Point &rhs) const {
        return Point(x - rhs.x,y - rhs.y);
    }
};

LL det(const Point &a,const Point &b) {
    return a.x * 1ll * b.y - a.y * 1ll * b.x;
}

LL dot(const Point &a,const Point &b) {
    return a.x * 1ll * b.x + a.y * 1ll * b.y;
}

const LL Inf = (LL)3e18;
const int N = 300000 + 5;
LL result[N];
int n;
Point points[N];

void calc(std::vector<int> &P,std::vector<int> &Q) {
    if (P.empty() || Q.empty()) return ;
    auto cmp = [&](int a,int b) {
        return points[a].x < points[b].x;
    };
    std::sort(ALL(P),cmp);
    std::sort(ALL(Q),cmp);

    std::vector<Point> stack;
    for (int x : P) {
        Point p = points[x];
        while (stack.size() >= 2 && det(p - stack[stack.size() - 2],stack.back() - stack[stack.size() - 2]) <= 0) stack.pop_back();
        stack.push_back(p);
    }

    for (int i = 0,j = 0; i < (int)Q.size(); ++ i) {
        Point p = points[Q[i]];
        while (j + 1 < stack.size() && dot(stack[j],p) <= dot(stack[j + 1],p)) ++ j;
        result[Q[i]] = std::max(result[Q[i]],dot(stack[j],p));
    }
}

int del[N];

void divide(const std::vector<int> &vec) {
    if (vec.size() <= 1) return ;
    int m = vec.size();
    int mid = m >> 1;
    divide(std::vector<int>(vec.begin(),vec.begin() + mid));
    divide(std::vector<int>(vec.begin() + mid,vec.end()));

    for (int x : vec) {
        if (x > 0) {
            del[x >> 1] = x & 1 ? 2 : 0;
        }
    }
    std::vector<int> P,Q;
    for (int i = 0; i < mid; ++ i) {
        if (vec[i] > 0) {
            if (del[vec[i] >> 1] == 0) {
                P.push_back(vec[i] >> 1);
            }
            del[vec[i] >> 1] = 1;
        }
    }
    for (int i = mid; i < m; ++ i) {
        if (vec[i] < 0) {
            Q.push_back(-vec[i]);
        }
    }
    calc(P,Q);

    std::vector<int> V;
    int c1 = 0,c2 = 0;
    for (int i = m - 1; i >= mid; -- i) {
        if (vec[i] > 0 && (vec[i] & 1) && del[vec[i] >> 1] == 1) {
            V.push_back(vec[i] ^ 1);
            c1 ++;
        } else if (vec[i] < 0) {
            V.push_back(vec[i]);
            c2 ++;
        }
    }
    if (c1 && c2) {
        divide(V);
    }
}

int main() {
    scanf("%d",&n);
    std::vector<int> vec;
    for (int i = 1; i <= n; ++ i) {
        int op;
        scanf("%d",&op);
        int tag;
        if (op == 1) {
            int x,y;
            scanf("%d%d",&x,&y);
            points[i] = Point(x,y);
            tag = i << 1;
        } else if (op == 2) {
            int p;
            scanf("%d",&p);
            tag = p << 1 | 1;
        } else {
            int q;
            scanf("%d",&q);
            points[i] = Point(q,1);
            tag = -i;
        }
        vec.push_back(tag);
    }
    std::fill(result + 1,result + n + 1,-Inf);
    divide(vec);
    for (int i = 1; i <= n; ++ i) {
        if (vec[i - 1] < 0) {
            if (result[i] == -Inf) {
                puts("EMPTY SET");
            } else {
                printf("%I64d\n",result[i]);
            }
        }
    }
}
