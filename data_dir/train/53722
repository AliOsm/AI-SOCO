#include <bits/stdc++.h>

using namespace std;

map<long long, pair<long long,long long>> m;

int kol(long long x) {
    int ans = 0;
    while (x != 0) {
        ++ans;
        x /= 2;
    }
    return ans;
}


int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int q;
    cin >> q;
    for (int i = 0; i < q; ++i) {
        int t;
        cin >> t;
        if (t == 2) {
            long long u, v;
            cin >> u >> v;
            if (u > v) {
                swap(u, v);
            }

            long long v1, u1;
            int a = kol(u);
            int b = kol(v);

            u1 = u;
            v1 = v;
            vector<int> path;
            for (int i = 0; i < b - a; ++i) {
                if (v1 % 2 == 1)
                    path.push_back(1);
                else
                    path.push_back(0);
                v1 /= 2;
            }

            long long ans = 0;

            while (u1 != v1) {
                if (u1 % 2 == 1) {
                    u1 /= 2;
                    ans += m[u1].second;
                } else {
                    u1 /= 2;
                    ans += m[u1].first;
                }
                if (v1 % 2 == 1)
                    path.push_back(1);
                else
                    path.push_back(0);
                v1 /= 2;
            }
            reverse(path.begin(), path.end());
            for (int i = 0; i < (int)path.size(); ++i) {
                if (path[i] == 0) {
                    ans += m[v1].first;
                    v1 *= 2;
                } else {
                    ans += m[v1].second;
                    v1 *= 2;
                    ++v1;
                }
            }
            cout << ans << '\n';
        } else {

            long long u, v, w;
            cin >> u >> v >> w;
            if (u > v) {
                swap(u, v);
            }

            long long v1, u1;
            int a = kol(u);
            int b = kol(v);

            u1 = u;
            v1 = v;
            vector<int> path;
            for (int i = 0; i < b - a; ++i) {
                if (v1 % 2 == 1)
                    path.push_back(1);
                else
                    path.push_back(0);
                v1 /= 2;
            }
            while (u1 != v1) {
                if (u1 % 2 == 1) {
                    u1 /= 2;
                    m[u1].second += w;
                } else {
                    u1 /= 2;
                    m[u1].first += w;
                }
                if (v1 % 2 == 1)
                    path.push_back(1);
                else
                    path.push_back(0);
                v1 /= 2;
            }
            reverse(path.begin(), path.end());
            for (int i = 0; i < (int)path.size(); ++i) {
                if (path[i] == 0) {
                    m[v1].first += w;
                    v1 *= 2;
                } else {
                    m[v1].second += w;
                    v1 *= 2;
                    ++v1;
                }
            }

        }

    }
    return 0;
}
