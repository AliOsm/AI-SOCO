#include <bits/stdc++.h>
#define err(args...) {}
#ifdef DEBUG
#include "_debug.cpp"
#include "callable.hpp/callable.hpp"
#endif
#define endl '\n'
using namespace std;
using ll = long long;
void commit_branch(vector<int>& branch, vector<pair<int, int>>& edges, int n) {
    if(not branch.empty()) {
        sort(branch.begin(), branch.end());
        edges.push_back({branch[0], n});
        for(int i = 1; i < branch.size(); i++) {
            edges.push_back({branch[i], branch[i - 1]});
        }
    }
    vector<int>().swap(branch);
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    cin >> n;
    vector<pair<int, int>> v(n);
    v[0] = {0, 0};
    bool can = true;
    for(int i = 1; i < n; i++) {
        cin >> v[i].first >> v[i].second;
        can &= v[i].second == n;
    }
    if(can) {
        sort(v.begin(), v.end());
        bool can = true;
        vector<pair<int, int>> edges;
        set<int> unused;
        for(int i = 1; i <= n; i++) {
            unused.insert(i);
        }
        vector<int> branch;
        for(int i = 1; i < n and can; i++) {
            if(v[i].first == v[i-1].first) {
                if(unused.empty() or *unused.begin() > v[i].first) {
                    can = false;
                } else {
                    branch.push_back(*unused.begin());
                    unused.erase(unused.begin());
                }
            } else {
                commit_branch(branch, edges, n);
                branch.push_back(v[i].first);
                unused.erase(v[i].first);
            }
        }
        if(can) {
            commit_branch(branch, edges, n);
            cout << "YES" << endl;
            for(auto& e : edges) {
                cout << e.first << " " << e.second << endl;
            }
        } else {
            cout << "NO" << endl;
        }
    } else {
        cout << "NO" << endl;
    }
    return 0;
}
