#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>
#include <queue>
#include <bitset>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <string>
#include <random>
using namespace std;

int k;
long long h[20];
long long d[5010][5010];

long long rec(int cards, int lovers) {
    if (d[cards][lovers] != -1)
        return d[cards][lovers];
    if (cards == 0 || lovers == 0)
        return d[cards][lovers] = 0;
    d[cards][lovers] = 0;
    for (int lastCards = 1; lastCards <= cards && lastCards <= k; lastCards++) {
        d[cards][lovers] = max(d[cards][lovers], rec(cards - lastCards, lovers - 1) + h[lastCards]);
    }
    return d[cards][lovers];
}

int main() {
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    int n;
    cin >> n >> k;

    unordered_map<int, int> cards;
    for (int i = 0; i < n * k; i++) {
        int x;
        cin >> x;
        cards[x]++;
    }

    unordered_map<int, int> lovers;
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        lovers[x]++;
    }

    for (int i = 1; i <= k; i++) {
        cin >> h[i];
    }


    for (int i = 0; i < 5010; i++) {
        fill(d[i], d[i] + 5010, -1);
    }

    long long res = 0;
    for (auto it = cards.begin(); it != cards.end(); it++) {
        int x = it->first;
        if (lovers.count(x))
            res += rec(it->second, lovers[x]);
    }
    cout << res;
}