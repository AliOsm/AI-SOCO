#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const ll inf = 1e18+5;

int n;
ll dp[100005][5];
vector <ll> cost;
string a, b;

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);

    cin >> n;
    for (int i = 0; i < n; i++){
        ll a;
        cin >> a;
        cost.push_back(a);
    }

    for (int i = 1; i < n; i++){
        dp[i][0] = dp[i][1] = dp[i][2] = dp[i][3] = inf;
    }

    ///First string
    cin >> a;
    ///Second string
    cin >> b;

    ///4 possible states
    ///A - normal, B - normal
    if (b.compare(a) >= 0){
        dp[1][0] = 0;
    }

    ///A - normal, B - flip
    reverse(b.begin(), b.end());
    if (b.compare(a) >= 0){
        dp[1][1] = cost[1];
    }

    ///A - flip, B - flip
    reverse(a.begin(), a.end());
    if (b.compare(a) >= 0){
        dp[1][2] = cost[0] + cost[1];
    }

    ///A - flip, B - normal
    reverse(b.begin(), b.end());
    if (b.compare(a) >= 0){
        dp[1][3] = cost[0];
    }


    for (int i = 2; i < n; i++){
        a = b;
        cin >> b;

        ///A - normal, B - normal
        if (b.compare(a) >= 0){
            dp[i][0] = min(dp[i-1][0], dp[i-1][3]);
        }

        ///A - normal, B - flip
        reverse(b.begin(), b.end());
        if (b.compare(a) >= 0){
            dp[i][1] = min(dp[i-1][0]+cost[i], dp[i-1][3]+cost[i]);
        }

        ///A - flip, B - flip
        reverse(a.begin(), a.end());
        if (b.compare(a) >= 0){
            dp[i][2] = min(dp[i-1][1]+cost[i], dp[i-1][2]+cost[i]);
        }

        ///A - flip, B - normal
        reverse(b.begin(), b.end());
        if (b.compare(a) >= 0){
            dp[i][3] = min(dp[i-1][1], dp[i-1][2]);
        }

        if (min(min(dp[i][0], dp[i][1]), min(dp[i][2], dp[i][3])) == inf){
            cout << -1 << endl;
            return 0;
        }
    }

    /*for (int i = 0; i < n; i++){
        for (int j = 0; j < 4; j++){
            cout << dp[i][j] << " ";
        }
        cout << endl;
    }*/
    cout << (min(min(dp[n-1][0], dp[n-1][1]), min(dp[n-1][2], dp[n-1][3])) == inf ? -1 : min(min(dp[n-1][0], dp[n-1][1]), min(dp[n-1][2], dp[n-1][3]))) << endl;
    return 0;
}
