#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

const long int MOD = 1e9 + 7;

vector<long int> z_function(string s){
  long int n = s.size();
  vector<long int> z(n);
  for(long int i = 1,l = 0,r = 0; i < n; i++){
    if(i <= r)
      z[i]=min(r -i +1, z[i-l]);

    while(i + z[i] < n && s[z[i]] == s[i + z[i]])
      z[i]++;
    
    if(i + z[i] -1 > r)
      l = i, r = i + z[i] -1;
  }
  return z;
}


int main(){
   IOS;
 /*    #ifndef ONLINE_JUDGE
         freopen("in.txt",  "r",  stdin);
         freopen("out.txt", "w", stdout);
     #endif */
   
   long int n,m;
   cin>>n>>m;

   string p,s;
   cin>>p;


   vector<long int> v(m);
   for(long int i = 0; i < m; i++){
      cin>>v[i];
      v[i]--;
   }

   long int idx = 0,ques = 0;

   while(s.size() < n){
      
      while(idx < m && v[idx] <= s.size()){
   
        long int sizeReq = p.size();
        long int sizeAllowed = n - s.size();

        if(idx < m - 1)
          sizeAllowed = min(sizeAllowed,v[idx + 1] - v[idx]);
   
        sizeReq = min(sizeReq,sizeAllowed);
   
        if(sizeReq)
          s.append(p.substr(0,sizeReq));    

        idx++;
      }

      if(s.size() == n)
        break;
      
      s.push_back('?');
      ques++;
   }



   string temp = p;
   temp.push_back('$');
   temp.append(s);

   vector<long int> z = z_function(temp);
   idx = 0;

   for(long int i = 0; i < v.size(); i++){
      long int effectiveIdx = p.size() + 1 + v[i];
      if(effectiveIdx < z.size() && z[effectiveIdx] >= p.size())
        continue;
      return cout<<"0",0;
   }
   
   long int ans = 1;

   for(long int i = 0; i < ques; i++)
      ans = (ans * 26) % MOD;

   cout<<ans;

   return 0;
}