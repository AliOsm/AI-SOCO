#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cassert>
#include <vector>
#include <queue>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;

struct AutoInt
{
	int n;
	AutoInt()
	{
		scanf("%d",&n);
	}
	operator int() const
	{
		return n;
	}
};
const int MAXN=200000;

int arr[MAXN];

vector<vector<int> > v;

int getmaxH(int cur, int p)
{
	int res=0;
	for(int i=0;i<v[cur].size();i++)
	{
		int to=v[cur][i];
		if(to!=p)
			res=max(res, 1+getmaxH(to, cur));
	}
	return res;
}

int used[MAXN];

int getdiam(int n)
{
	queue<int> q;
	int last=-1;
	memset(used,-1,sizeof(used));
	q.push(0);
	used[0]=0;
	while(!q.empty())
	{
		int cur=q.front(); q.pop();
		last=cur;
		for(int i=0;i<v[cur].size();i++)
		{
			int to=v[cur][i];
			if(used[to]==-1)
			{
				q.push(to);
				used[to]=used[cur]+1;
			}
		}
	}
	memset(used,-1,sizeof(used));
	q.push(last);
	used[last]=0;
	while(!q.empty())
	{
		int cur=q.front(); q.pop();
		last=cur;
		for(int i=0;i<v[cur].size();i++)
		{
			int to=v[cur][i];
			if(used[to]==-1)
			{
				q.push(to);
				used[to]=used[cur]+1;
			}
		}
	}
	return *max_element(used,used+n);
}

int main()
{
	AutoInt n;
	AutoInt d;
	AutoInt h;

	{
		v.resize(n);
		int pos=d-h;
		memset(arr,-1,sizeof(arr));
		arr[pos]=0;
		int top=1;
		for(int i=0;i<=d;i++)
			if(arr[i]==-1)
				arr[i]=top++;
		for(int i=0;i+1<=d;i++)
		{
			v[arr[i]].push_back(arr[i+1]);
			v[arr[i+1]].push_back(arr[i]);
		}

//			printf("%d %d\n",arr[i]+1, arr[i+1]+1);
		while(top<n)
		{
			v[arr[1]].push_back(top);
			v[top].push_back(arr[1]);
			top++;
		}
		if(getmaxH(0,-1)!=h || getdiam(n)!=d)
			puts("-1");
		else
		{
			REP(i,n) REP(j,v[i].size())
				if(i<v[i][j])
					printf("%d %d\n",i+1, v[i][j]+1);
		}
	}
	return 0;
}
