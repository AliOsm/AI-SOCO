#include <algorithm>
#include <vector>
#include <iostream>
#include <string>
#include <random>
#include <set>
#include <stack>
#include <ctime>
#include <map>
#include <fstream>

using namespace std;
#define ll long long
const int MOD = 1000000007;
const double PI = 3.141592653528;
const ll INF = 10000000000000000;
/*
#define cin in
#define cout out
ifstream in("input.txt");
ofstream out("output.txt");
/**/

int v[1111111];
const int N = 100000;
int lp[N+1];

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int n, a, b;
	scanf("%d%d%d", &n, &a, &b);
	//cin >> n >> a >> b;
	
	for(int i = 1; i <= n; ++i)
		scanf("%d", &v[i]);
		//cin >> v[i];

	vector<int> pr;
 
	for (int i=2; i<=N; ++i) 
	{
		if (lp[i] == 0) 
		{
			lp[i] = i;
			pr.push_back (i);
		}
		for (int j=0; j<(int)pr.size() && pr[j]<=lp[i] && i*pr[j]<=N; ++j)
			lp[i * pr[j]] = pr[j];
	}

	//vector<int> divisors[6];
	int i0 = 0;
	set<int> st;
	for(int i = -1; i <= 1; ++i)
	{
		int p = v[1] + i;
		for(int j = 0; j < pr.size(); ++j)
		{
			if(p % pr[j] == 0)
			{
				st.insert(pr[j]);
				while(p % pr[j] == 0)
					p /= pr[j];
			}
		}
		if(p != 1)
			st.insert(p);
	}
	for(int i = -1; i <= 1; ++i)
	{
		int p = v[n] + i;
		for(int j = 0; j < pr.size(); ++j)
		{
			if(p % pr[j] == 0)
			{
				st.insert(pr[j]);
				while(p % pr[j] == 0)
					p /= pr[j];
			}
		}
		if(p != 1)
			st.insert(p);
	}

	ll mn = 1ll * (n-1) * a;
	for(set<int>::iterator it = st.begin(); it != st.end(); ++it)
	{
		int p = *it;
		bool ok = 1;
		for(int k = 1; k <= n; ++k)
			if(v[k] % p != 0)
				ok = 0;
		if(ok)
		{
			mn = 0;
			break;
		}
		vector<vector<ll> > dp(n+1, vector<ll>(3, INF));
		dp[0][0] = 0;
		dp[0][1] = 0;
		dp[0][2] = 0;
		for(int k = 1; k <= n; ++k)
		{
			int mod = v[k] % p;
			if(mod == 0)
			{
				dp[k][0] = dp[k-1][0];
				dp[k][1] = min(dp[k-1][0], dp[k-1][1]) + a;
				dp[k][2] = min(dp[k-1][2], dp[k-1][1]);
			}
			else
			{
				if(mod != 1 && mod != p-1)
					dp[k][1] = min(dp[k-1][0] + a, dp[k-1][1] + a);
				else
				{
					dp[k][0] = dp[k-1][0] + b;
					dp[k][2] = min(dp[k-1][1], dp[k-1][2]) + b;
					dp[k][1] = min(dp[k-1][1], dp[k-1][0]) + a;
				}
			}
			/*for(int l = 0; l < 3; ++l)
				dp[k][l] = min(dp[k][l], INF);*/
		}
		mn = min(mn, min(dp[n][0], min(dp[n][1], dp[n][2])));
	}
	printf("%lld", mn);
	//cout << mn;
	return 0;
}
/*

6 11
1 2
1 4
1 6
2 3
2 4 
2 5
2 6
3 5
3 6
4 6
5 6

*/