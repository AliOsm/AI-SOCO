#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOR(i, a, b) for (int i = a; i < int(b); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define llint long long
#define pii pair<int, int>
#define MAX_N 200010
char T[MAX_N];
int n;
int RA[MAX_N], tempRA[MAX_N];
int SA[MAX_N], tempSA[MAX_N];
int c[MAX_N];
// second approach: O(n log n)
// the input string, up to 100K characters
// the length of input string
// rank array and temporary rank array
// suffix array and temporary suffix array
// for counting/radix sort
void countingSort(int k) {
// O(n)
int i, sum, maxi = max(300, n);
// up to 255 ASCII chars or length of n
memset(c, 0, sizeof c);
// clear frequency table
for (i = 0; i < n; i++)
// count the frequency of each integer rank
c[i + k < n ? RA[i + k] : 0]++;
for (i = sum = 0; i < maxi; i++) {
int t = c[i]; c[i] = sum; sum += t; }
for (i = 0; i < n; i++)
// shuffle the suffix array if necessary
tempSA[c[SA[i]+k < n ? RA[SA[i]+k] : 0]++] = SA[i];
for (i = 0; i < n; i++)
// update the suffix array SA
SA[i] = tempSA[i];
}


void constructSA() {
// this version can go up to 100000 characters
int i, k, r;
for (i = 0; i < n; i++) RA[i] = T[i];
// initial rankings
for (i = 0; i < n; i++) SA[i] = i;
// initial SA: {0, 1, 2, ..., n-1}
for (k = 1; k < n; k <<= 1) {
// repeat sorting process log n times
countingSort(k); // actually radix sort: sort based on the second item
countingSort(0);
// then (stable) sort based on the first item
tempRA[SA[0]] = r = 0;
// re-ranking; start from rank r = 0
for (i = 1; i < n; i++)
// compare adjacent suffixes
tempRA[SA[i]] = // if same pair => same rank r; otherwise, increase r
(RA[SA[i]] == RA[SA[i-1]] && RA[SA[i]+k] == RA[SA[i-1]+k]) ? r : ++r;
for (i = 0; i < n; i++)
// update the rank array RA
RA[i] = tempRA[i];
if (RA[SA[n-1]] == n-1) break;
// nice optimization trick
} }

char s[500500];
int N;
int k, acc;
int id, len;

bool dfs(int l, int r, int lvl) {
	if(lvl != -1) {
		acc += (r - l + 1);
		if(acc >= k) {
			id = l;
			len = lvl + 1;
			//printf("l = %d, r = %d, lvl = %d\n", l, r, lvl);
			return true;
		}
	}
	//printf("l = %d, r = %d, lvl = %d, acc = %d\n", l, r, lvl, acc);
	int a = l, b = l;
	while(a != r + 1) {
		char c = T[SA[a] + lvl + 1];
		while(b + 1 <= r && T[SA[b + 1] + lvl + 1] == c) b++;
		
		//printf("a = %d, b = %d, c = %c\n", a, b, c);
		
		if(c != '*') if(dfs(a, b, lvl + 1)) return true;
		a = b + 1;
	}
	return false;
}

int main() {
	scanf("%s", T);
	n = N = (int)strlen(T);
	// input T as per normal, without the ‘$’
	T[n++] = '$';
	// add terminating chaSActer
	constructSA();
	scanf("%d", &k);
	REP(i, N) SA[i] = SA[i + 1];
	//N = strlen(s);
	/*printf("AA\n");
	REP(i, N) printf("%d ", SA[i]);
	printf("\n");*/
	REP(i, N + 5) T[N + i] = '*';
	if(dfs(0, N - 1, -1)) {
		
		/*if(T[SA[id]] == 'j' && T[SA[id] + 1] == 'j') {
			T[N] = 0;
			printf("%d %d\n", N, k);
			REP(i, 1) printf("%s\n", T + SA[i]);
		}
		else {*/
			T[SA[id] + len] = 0;
			printf("%s\n", T + SA[id]);
		//}
	}
	else printf("No such line.\n");
}