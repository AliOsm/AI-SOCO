#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 500 + 10;
int64 dp[N][N];

int main() {
  int n;
  scanf("%d", &n);
  vector<int64> v(n * 2);
  for (int i = 0; i < n; ++i) {
    v[i] = v[i + n] = i + 1;
  }
  for (int i = 0; i < n; ++i) {
    dp[i][2] = v[i] * v[i + 1] * v[i + 2];
  }
  for (int k = 3; k < n; ++k) {
    for (int i = 0; i < n; ++i) {
      dp[i][k] = INF;
      for (int j = i + 1; j < i + k; ++j) {
        dp[i][k] = min(dp[i][k], v[i] * v[j] * v[i + k] +
                       dp[i][j - i] + dp[j % n][i + k - j]);
      }
    }
  }
  printf("%lld\n", dp[0][n - 1]);
  return 0;
}
