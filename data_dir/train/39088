#pragma comment(linker, "/STACK:10240000")
#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <queue>
#include <string>
#include <set>
#include <queue>
#include <map>
#include <math.h>
#include <stack>
#include <sstream>
#include <bitset>
#include <ctime>


using namespace std;

vector<int> g[1234567];
vector<int> gg[1234567];
int colors[1244567];

vector<int> obhod;
bool used[12345677];
void dfs(int v)
{
	used[v] = 1;
	obhod.push_back(v);
	for(int i = 0; i < gg[v].size(); ++i)
	{
		int to = gg[v][i];
		if (!used[to])
			dfs(to);
	}
}


int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie();
    int n, m;
    cin >> n >> m;
    int ans = 0;
    for(int i = 1; i <= n; ++i)
    {
        int t;
        cin >> t;
        ans = max(ans, t);
        while(t--)
        {
            int a;
            cin >> a;
            g[i].push_back(a);
        }
    }
	for(int i = 0; i < n-1;++i)
	{
		int u, v;
		cin >> u >> v;
		gg[u].push_back(v);
		gg[v].push_back(u);
	}

	dfs(1);

    ans = max(ans, 1);
    cout << ans << endl;

    set<int> st;
    for(int i = 1; i <= ans; ++i)
        st.insert(i);
    for(int ii = 0; ii < n; ++ii)
    {
		int i = obhod[ii];
        vector<int> newColors;
        for(int j = 0; j < g[i].size(); ++j)
        {
            int v = g[i][j];
            if (colors[v] != 0)
            {
                st.erase(colors[v]);
                newColors.push_back(colors[v]);
            }
        }
        for(int j = 0; j < g[i].size(); ++j)
        {
            int v = g[i][j];
            if (colors[v] == 0)
            {
                colors[v] = *st.begin();
                newColors.push_back (colors[v]);
                st.erase(colors[v]);
            }
        }
        for(int j = 0; j < newColors.size(); ++j)
            st.insert(newColors[j]);
    }
    for(int i = 1; i <= m; ++i)
        cout << max(colors[i], 1) << " ";
}