#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             1e9
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())

#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);
#ifdef VAMP
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cout << name << " = " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cout.write(names, comma - names) << " = " << arg1 <<" | ";
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif

const int N = 200005;
vector<int>g[N];
int n , pr[N];
void dfs1(int node,int pre,int dis,int &maxdis,int &maxnode)
{
    pr[node] = pre;
    if(dis > maxdis){
        maxdis = dis;
        maxnode = node;
    }
    for(int i : g[node]){
        if(i == pre)continue;
        dfs1(i,node,dis + 1,maxdis,maxnode);
    }
}
int D[N];
int main()
{
    #ifdef VAMP
        clock_t tStart = clock();
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif

    cin >> n;
    for(int i = 1;i < n;i++){
        int a , b;
        cin >> a >> b;
        g[a].pb(b);
        g[b].pb(a);
    }
    int di1 , di2;
    int mxdis = 0;
    dfs1(1,0,0,mxdis,di1);
    mxdis = 0;
    dfs1(di1,0,0,mxdis,di2);

    vector<int>nodes;
    int node = di2;
    while(node != di1){
        nodes.push_back(node);
        node = pr[node];
    }
    nodes.push_back(node);

    if(nodes.size() == n){
        for(int i : nodes){
            if(i == di1 or i == di2)continue;
            cout << n - 1 << "\n";
            cout << di1 << " " << di2 << " " << i << "\n";
            return 0;
        }
    }
    queue<int>Q;
    for(int i : nodes)Q.push(i),D[i] = 1;
    int ans;
    mxdis = 0;
    while(!Q.empty()){
        int node = Q.front();
        Q.pop();
        for(int i : g[node]){
            if(D[i])continue;
            D[i] = D[node] + 1;
            if(D[i] > mxdis){
                mxdis = D[i];
                ans = i;
            }
            Q.push(i);
        }
    }
    int d = nodes.size() - 1 + mxdis - 1;
    cout << d << "\n";
    cout << di1 << " " << di2 << " " << ans << "\n";

    #ifdef VAMP
        fprintf(stderr, "\n>> Runtime: %.10fs\n", (double) (clock() - tStart) / CLOCKS_PER_SEC);
    #endif
}
