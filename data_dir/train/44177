#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
#include <iterator>
using namespace std;

#define PB push_back
#define MP make_pair

#define rep(i,n) for(int i=0;i<(n);++i)
#define REP(i,n) for(int i=1;i<=(n);++i)
#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl
#define tr(it,c) for(auto it=(c).begin(); it!=(c).end(); ++it)
#define all(c) (c).begin(), (c).end()

typedef long long ll;
typedef pair<int,int> pii;

const int MAXN = 510;
int height;
int width;
char photo[MAXN][MAXN];
int sum[MAXN][MAXN];

int countStar(int col, int loRow, int hiRow) {
	if (loRow > hiRow) return 0;
	hiRow++;
	return sum[hiRow][col] - sum[loRow][col];
}

bool isStarCenter(int i, int j) {
	return i > 0 && i < height - 1 && j > 0 && j < width - 1
		&& photo[i][j] == '1' && photo[i - 1][j] == '1' && photo[i + 1][j] == '1' && photo[i][j - 1] == '1' && photo[i][j + 1] == '1';
}

int main(void)
{
	cin >> height >> width;
	if (height < 3 || width < 3) {
		cout << 0 << endl;
		return 0;
	}
	int starNeeded;
	cin >> starNeeded;
	rep(i, height) cin >> photo[i];
	memset(sum, 0, sizeof sum);
	for (int i = 0; i < height; i++) {
		for (int j = 0; j < width; j++) {
			sum[i + 1][j] = sum[i][j] + (isStarCenter(i, j) ? 1 : 0);
		}
	}
	ll answer = 0;
	for (int loRow = 0; loRow < height; loRow++) {
		for (int hiRow = loRow + 1; hiRow < height; hiRow++) {
			int loCol = 0;
			int hiCol = 1;
			int currentStar = 0;
			ll count = 0;
			while (hiCol < width) {
				bool tag = false;
				while (currentStar < starNeeded) {
					if (hiCol == width - 1) {tag = true; break;} 
					currentStar += countStar(hiCol, loRow + 1, hiRow - 1);
					hiCol++;
				}
				if (tag) break;
				while (currentStar >= starNeeded) {
					count += width - hiCol;
					currentStar -= countStar(loCol + 1, loRow + 1, hiRow - 1);
					loCol++;
				}
			}
			answer += count;
		}
	}
	cout << answer << endl;
	return 0;
}
