#define _CRT_SECURE_NO_DEPRECATE
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <cmath>
#ifndef __GNUC__
#include <intrin.h>
#endif // !__GNUC__
#include <random>
#include <vector>
#include <cstdio>
#include <string>
#include <cstdlib>
#include <numeric>
#include <cstring>
#include <complex>
#include <cassert>
#include <iostream>
#include <algorithm>
#include <functional>
#define rep(i, b, e) for (auto i = b; i < e; ++i)

int bsf(int x) {
#ifdef __GNUC__
    return __builtin_ctz(x);
#else
    unsigned long i;
    _BitScanForward(&i, x);
    return i;
#endif
}
int bsr(int x) {
#ifdef __GNUC__
    return 31 - __builtin_clz(x);
#else
    unsigned long i;
    _BitScanReverse(&i, x);
    return i;
#endif
}

using namespace std;
typedef long long int64;
const double pi = 3.14159265358979323846;
const int inf = (int)2e+9 + 2;
const int mod = (int)1e+9 + 7;
const double eps = 1e-8;
const int N = 100;

struct edge {
    edge(int to, char c) : to(to), c(c) {}
    int to;
    int c;
};

int n, m, k;
vector<edge> g[N];
char was[N][N][26][2];
char a[N][N];

char foo(int x, int y, int c, int p)
{
    int v = p == 0 ? x : y;
    if (was[x][y][c][p])
        return was[x][y][c][p];
    for (auto e : g[v]) {
        if (e.c >= c) {
            if (p) {
                if (foo(x, e.to, e.c, 0) == 2)
                    was[x][y][c][p] = 1;
            }
            else {
                if (foo(e.to, y, e.c, 1) == 2)
                    was[x][y][c][p] = 1;
            }
        }
    }
    if (!p && was[x][y][c][p] == 1)
        a[x][y] = 'A';
    if (!was[x][y][c][p])
        was[x][y][c][p] = 2;
    return was[x][y][c][p];
}

void solve()
{
    cin >> n >> m;
    rep(i, 0, m) {
        int x, y;
        char c;
        cin >> x >> y >> c;
        c -= 'a'; --x; --y;
        g[x].emplace_back(y, c);
    }
    rep(i, 0, n) {
        rep(j, 0, n) {
            foo(i, j, 0, 0);
        }
    }
    rep(i, 0, n) {
        rep(j, 0, n) {
            if (a[i][j] == 'A')
                cout << a[i][j];
            else
                cout << 'B';
        }
        cout << '\n';
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    int test = 1;
    //cin >> test;
    for (; test; --test)
        solve();
    return 0;
}