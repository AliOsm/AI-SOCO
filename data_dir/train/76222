//    _____ _     _                _           _     _ _     _     
//    \_   \ |_  (_)___  __      _| |__   __ _| |_  (_) |_  (_)___ 
//     / /\/ __| | / __| \ \ /\ / / '_ \ / _` | __| | | __| | / __|
//  /\/ /_ | |_  | \__ \  \ V  V /| | | | (_| | |_  | | |_  | \__ \
//  \____/  \__| |_|___/   \_/\_/ |_| |_|\__,_|\__| |_|\__| |_|___/
//                                                                 
#include <bits/stdc++.h>
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define all(x) x.begin(), x.end()
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
const int sz=2e5+9;
int n;
int a[sz];
int U,V;
int dp[sz];
bool visited[sz];
vector<int> v[sz];
int par[sz];

void dfs(int idx,int p=1){
	par[idx]=p;
	visited[idx]=1;
	dp[idx]=(a[idx]==1?1:-1);
	for(auto u:v[idx]){
		if(u==p) continue;
		if(visited[u]) continue;
		dfs(u,idx);
		if(dp[u]>0) dp[idx]+=dp[u];
	}
	return;
}

void solve(int idx,int p=1){
	visited[idx]=1;
	if(idx!=1){
		int can=dp[p]-(dp[idx]>0?dp[idx]:0);
		dp[idx]=dp[idx]+max(can,0);
	}
	for(auto u:v[idx]){
		if(u==p||visited[u]) continue;
		solve(u,idx);
	}
}

int main(){
	cin>>n;
	for(int i=1;i<=n;i++){
		cin>>a[i];
	}	
	for(int i=1;i<n;i++){
		cin>>U>>V;
		v[U].pb(V);
		v[V].pb(U);
	}
	dfs(1);
	memset(visited,0,sizeof(visited));
	solve(1);
	for(int i=1;i<=n;i++){
		cout<<dp[i]<< " ";
	}
	return 0;
}