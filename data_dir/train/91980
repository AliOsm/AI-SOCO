#include "bits/stdc++.h"

using namespace std;

typedef long long ll;
typedef pair < int, int > ii;

const int N = 1e5 + 5;

int n;
int a[N], t[N << 2], lazy[N << 2];

void push(int x) {
    t[x + x] += lazy[x];
    t[x + x + 1] += lazy[x];
    lazy[x + x] += lazy[x];
    lazy[x + x + 1] += lazy[x];
    lazy[x] = 0;
}

void update(int x, int l, int r, int x1, int x2, int v) {
    if(x2 < l or r < x1)
        return;
    if(x1 <= l and r <= x2) {
        t[x] += v;
        lazy[x] += v;
        return;
    }
    push(x);
    int m = (l + r) >> 1;
    update(x + x, l, m, x1, x2, v);
    update(x + x + 1, m + 1, r, x1, x2, v);
    t[x] = max(t[x + x], t[x + x + 1]);
}

int query(int x, int l, int r, int x1, int x2) {
    if(x2 < l or r < x1 or t[x] <= 0)
        return -1;
    if(l == r)
        return l;
    push(x);
    int m = (l + r) >> 1;
    int res = query(x + x + 1, m + 1, r, x1, x2);
    if(res != -1)
        return res;
    return query(x + x, l, m, x1, x2);
}

int main() {
    
    scanf("%d", &n);
    
    for(int i = 1; i <= n; i++) {
        int p, op;
        scanf("%d %d", &p, &op);
        if(op == 1) {
            int x;
            scanf("%d", &x);
            a[p] = x;
            update(1, 1, n, 1, p, +1);
        }
        else
            update(1, 1, n, 1, p, -1);
        int res = query(1, 1, n, 1, n);
        if(res == -1)
            puts("-1");
        else
            printf("%d\n", a[res]);
    }
    
    return 0;
    
}
