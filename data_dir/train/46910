#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;


int main(){
   IOS;
 /*    #ifndef ONLINE_JUDGE
         freopen("in.txt",  "r",  stdin);
         freopen("out.txt", "w", stdout);
     #endif */
  long int n;
  cin>>n;

  vector<long int> v(n),ans(n);
  for(long int i = 0; i < n; i++)
    cin>>v[i];


  queue<long int> songsProcessing;
  long int songsListened =  0;
  map<long int,long int> pleasure;
  pleasure[0] = -1;

  for(long int i = 0; i < n; i++){
      long int mostPleasure = pleasure.rbegin()->first;
      long int val = v[i];

      while(mostPleasure > 2 * val){
          ans[songsProcessing.front()] = songsListened;
          songsListened--;
          pleasure[v[songsProcessing.front()]]--;
          
          if(pleasure[v[songsProcessing.front()]] == 0)
            pleasure.erase(v[songsProcessing.front()]);

          mostPleasure = pleasure.rbegin()->first;
          songsProcessing.pop();
      }

      pleasure[val]++;
      songsProcessing.push(i);
      songsListened++;
  }
  
  for(long int i = 0; i < n; i++){
      long int mostPleasure = pleasure.rbegin()->first;
      long int val = v[i];

      while(mostPleasure > 2 * val){
          if(!ans[songsProcessing.front()])
            ans[songsProcessing.front()] = songsListened;  
          songsListened--;
          pleasure[v[songsProcessing.front()]]--;
          if(pleasure[v[songsProcessing.front()]] == 0)
            pleasure.erase(v[songsProcessing.front()]);
          mostPleasure = pleasure.rbegin()->first;
          songsProcessing.pop();
      }

      pleasure[val]++;
      songsProcessing.push(i);
      songsListened++;
  }

  
  for(long int i = 0; i < n; i++){
      long int mostPleasure = pleasure.rbegin()->first;
      long int val = v[i];

      while(mostPleasure > 2 * val){
          if(!ans[songsProcessing.front()])
            ans[songsProcessing.front()] = songsListened;  
          songsListened--;
          pleasure[v[songsProcessing.front()]]--;
          if(pleasure[v[songsProcessing.front()]] == 0)
            pleasure.erase(v[songsProcessing.front()]);
          mostPleasure = pleasure.rbegin()->first;
          songsProcessing.pop();
      }

      pleasure[val]++;
      songsProcessing.push(i);
      songsListened++;
  }

  while(songsProcessing.size()){
    if(!ans[songsProcessing.front()])
       ans[songsProcessing.front()] = -1;
     songsProcessing.pop();
  }


  for(auto ele : ans)
    cout<<ele<<" ";

   return 0;
}