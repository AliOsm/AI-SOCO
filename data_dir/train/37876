#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 10;
const long long inf = 1ll * 2000 * 1000 * 1000 * 1000 * 1000;
struct Save {
	long long mx[5] = {0, 0}, rang[5] = {-1, -1};
	Save () {
		mx[0] = mx[1] = 0;
		rang[0] = rang[1] = -1;
	}
	void update(long long val, long long tmp) {
		if (tmp != rang[0]) {
			if (val >= mx[0]) {
				mx[1] = mx[0], rang[1] = rang[0], mx[0] = val, rang[0] = tmp;
				return;
			}
			if (val > mx[1])
				mx[1] = val, rang[1] = tmp;
		}
		else {
			if (val > mx[0])
				mx[0] = val, rang[0] = tmp;
		}
		return;
	}
	long long getAns(long long tmp) {
		if (tmp == rang[0])
			return mx[1];
		else
			return mx[0];
	}
};
long long n, q;
long long r[N], c[N], a, b, sr[N], dp[N];
long long solve() {
	Save save;
	save.mx[0] = save.mx[1] = 0;
	save.rang[0] = save.rang[1] = -1;
	for (int i = 0; i < n; i++) {
		if (sr[r[i]] != -inf)
			dp[i] = sr[r[i]] + 1ll * c[i] * a;
		dp[i] = max(dp[i], 1ll * save.getAns(r[i]) + 1ll * c[i] * b);
		save.update(dp[i], r[i]);
		sr[r[i]] = max(sr[r[i]], dp[i]);
	}
	long long rtr = 0;
	for (int i = 0; i < n; i++)
		rtr = max(rtr, dp[i]);
	return rtr;
}
int main() {
	ios_base::sync_with_stdio (false);
	cin.tie(0);
	cout.tie(0);
	cin >> n >> q;
	for (int i = 0; i < n; i++)
		cin >> c[i];
	for (int i = 0; i < n; i++)
		cin >> r[i];
	while (q--) {
		fill(sr, sr + n + 1, 1ll * -inf);
		fill(dp, dp + n + 1, 1ll * -inf);
		cin >> a >> b;
		cout << solve() << endl;
	}
	return 0;
}
