#include<bits/stdc++.h>
#define int long long int
#define ld long double
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD2 998244353
#define MOD1 1e9+7
#define f first
#define s second
#define endl '\n'
#define pii pair<int,int>
#define piii pair<pii,int>
#define precise(i) cout<<fixed<<setprecision(i)
#define codejam cout<<"Case #"<<ii+1<<": ";
#define impossible cout<<"IMPOSSIBLE"<<endl;
using namespace std;
const long double PI = atan(1.0)*4;
const int64_t INF=1000000000000003;
const int32_t LOG=21;
const int MOD=MOD1;

vector<int> v[300005];
vector<pii> queries[300005];
int level[600005];
int ans[300005];
int toAdd=0;
void dfs(int i,int prev,int d)
{
    for(auto it:queries[i])
    {
         level[d]+=it.s;
         level[d+it.f+1]-=it.s;
    }
    toAdd+=level[d];
    ans[i]=toAdd;
    for(auto it:v[i])
    {
         if(it!=prev)
         dfs(it,i,d+1);   
    }
    toAdd-=level[d];
    for(auto it:queries[i])
    {
         level[d]-=it.s;
         level[d+it.f+1]+=it.s;
    }    
}

int32_t main()
{ 
      getFaster;
      int tests=1;
      //cin>>tests;
      rep(ii,0,tests)
      {
           int n;
           cin>>n;
           rep(i,0,n-1)
           {
              int x,y;
              cin>>x>>y;
              v[x].push_back(y);
              v[y].push_back(x);
           }
           int m;
           cin>>m;
           rep(i,0,m)
           {
               int ver,d,add;
               cin>>ver>>d>>add;
               d=min(d,(int)300001);
               queries[ver].push_back({d,add});
           }
           dfs(1,-1,1);
           rep(i,1,n+1)cout<<ans[i]<<" ";
           cout<<endl;
      }     
      return 0;                         
}

/*
 TIPS(FOR ME):
 1.) Check for corner cases (like 0 is exception case)
 2.) Check for global memory sizes,memory refreshments and its complexity 
 3.) Check for sorting criteria (if used 1-based indexing)
 4.) Check for numbers overflow (while multiplying and doing MOD)
 5.) Check for typecasting issues like int to float( while dividing numbers)
*/