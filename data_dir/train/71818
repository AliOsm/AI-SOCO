#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

const int N = 1e6 + 10;

struct node {
	int ans, dp[2];
	node() {
		ans = dp[0] = dp[1] = 0;
	}
}seg[N << 2];

int n, q;
string s;

node merge(node a, node b) {
	node res;
	int t = min(a.dp[0], b.dp[1]);
	res.ans = a.ans + b.ans + t;
	res.dp[0] = a.dp[0] - t + b.dp[0];
	res.dp[1] = a.dp[1] + b.dp[1] - t;
	return res;
}

void build(int id = 1, int b = 0, int e = n) {
	if(e - b == 1) {
		if(s[b] == '(')
			seg[id].dp[0] = 1;
		else
			seg[id].dp[1] = 1;
		return;
	}
	int mid = (b + e) >> 1, lc = id * 2, rc = lc | 1;
	build(lc, b, mid);
	build(rc, mid, e);
	seg[id] = merge(seg[lc], seg[rc]);
}

node get(int l, int r, int id = 1, int b = 0, int e = n) {
	if(l >= e || b >= r) {
		node v;
		return v;
	}
	if(l <= b && e <= r)
		return seg[id];
	int mid = (b + e) >> 1, lc = id * 2, rc = lc | 1;
	return merge(get(l, r, lc, b, mid), get(l, r, rc, mid, e));
}

int main() {
	cin >> s >> q;
	n = s.size();
	build();
	while(q--) {
		int l, r;
		cin >> l >> r;
		l--;
		node res = get(l, r);
		cout << res.ans * 2 << "\n";
	}
}
