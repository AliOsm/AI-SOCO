#include <bits/stdc++.h>

using namespace std;

typedef long long LL;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<double> vd;
#define pb push_back
#define loop(i,n) for(int i = 0; i < n; i++)

const int N = 2 * 1e5 + 5;

bool palindrome(string s) {
    int len = s.length();
    for (int i = 0; i < s.length() / 2; ++i) {
        if (s[i] != s[len - i - 1]) return false;
    }
    return true;
}

int main() {
#ifdef DEBUG
    freopen("in.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);
    int n, m, a, b;
    vector<pii> v1, v2;
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        cin >> a >> b;
        if (a > b) swap(a, b);
        v1.push_back({a, b});
    }
    for (int i = 0; i < m; i++) {
        cin >> a >> b;
        if (a > b) swap(a, b);
        v2.push_back({a, b});
    }
    set<int> finalCommon;
    for (int i = 0; i < n; i++) {
        set<int> vcommon;
        for (int j = 0; j < m; j++) {
            int common = -1;
            if ((v1[i].first == v2[j].first &&
                    v1[i].second == v2[j].second) || 
                    (v1[i].first == v2[j].second &&
                    v1[i].second == v2[j].first)) continue;
            if (v1[i].first == v2[j].first || v1[i].first == v2[j].second) {
                common = v1[i].first;
            }
            else if (v1[i].second == v2[j].second || v1[i].second == v2[j].first) {
                common = v1[i].second;
            }
            if (common != -1) {
                vcommon.insert(common);
                if (vcommon.size() > 1) {
                    cout << -1 << endl;
                    return 0;
                }
            }
        }
        for (int num : vcommon) finalCommon.insert(num);
    }
    swap(n, m);
    swap(v1, v2);
    for (int i = 0; i < n; i++) {
        set<int> vcommon;
        for (int j = 0; j < m; j++) {
            int common = -1;
            if ((v1[i].first == v2[j].first &&
                    v1[i].second == v2[j].second) || 
                    (v1[i].first == v2[j].second &&
                    v1[i].second == v2[j].first)) continue;
            if (v1[i].first == v2[j].first || v1[i].first == v2[j].second) {
                common = v1[i].first;
            }
            else if (v1[i].second == v2[j].second || v1[i].second == v2[j].first) {
                common = v1[i].second;
            }
            if (common != -1) {
                vcommon.insert(common);
                if (vcommon.size() > 1) {
                    cout << -1 << endl;
                    return 0;
                }
            }
        }
        for (int num : vcommon) finalCommon.insert(num);
    }
    if (finalCommon.size() == 1) {
        cout << *finalCommon.begin() << endl;
    }
    else if (finalCommon.size() > 1) {
        cout << 0 << endl;
    }
    else {
        cout << -1 << endl;
    }
    return 0;
}