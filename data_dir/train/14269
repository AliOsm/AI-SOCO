#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<valarray>
using namespace std;

set<int> ind;
int n;
#define MAX 100001
int a[100001];
vector<pair<int, int> > nex;
vector<pair<int, int> > k;
int main(){
    scanf("%d", &n);
    for (int i = 0; i < n; i++){
        ind.insert(i);
    }
    for (int i = 0; i < n; i++){
        scanf("%d", &a[i]);
    }
    for (int i = 0; i + 1 < n; i++){
        if (a[i] > a[i + 1]){
            nex.push_back(make_pair(i, i + 1));
        }
    }
    int countt = 0;
    set<int>::iterator ite;
    set<int>::iterator it;
    while (nex.size()){
        countt++;
        k.clear();
        for (int i = 0; i < nex.size(); i++){
            if (ind.count(nex[i].second)){
                ind.erase(nex[i].second);
            }
        }
        for (int i = 0; i < nex.size(); i++){
            ite = ind.lower_bound(nex[i].second);
            if (ite == ind.begin()){
                continue;
            }
            if (ite == ind.end()){
                continue;
            }
            it = ite;
            it--;
            if (a[(*it)] > a[(*ite)]){
                k.push_back(make_pair((*it), (*ite)));
            }
        }
        if (k.size() == 0){
            break;
        }
        sort(k.begin(), k.end());
        k.erase(unique(k.begin(), k.end()),k.end());
        nex = k;
    }
    printf("%d\n", countt);
    return 0;
}