#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <chrono>
#include <assert.h>
#include <memory>
#include <cstddef>
#include <iterator>

#pragma comment(linker, "/stack:20000000")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

using namespace std;
typedef int mt;
typedef double fl;

template<typename T>
constexpr mt infValue = std::is_same<T, int>::value ? 2000100007 : 8600000000000000007ll;
template<typename T>
constexpr mt maxValue = std::is_same<T, int>::value ? 1000000007 : 1000000000000000001ll;

#define rep(a, b, i) for(mt i = a; i < b; ++i)
#define repe(a, b, i) for(mt i = a; i <= (b); ++i)
#define repd(a, b, i) for(mt i = a; i > b; --i)
#define repde(a, b, i) for(mt i = a; i >= b; --i)

const mt INF = infValue<mt>;
const long long MOD = 1000000007ll;//998244353ll;
const double EPS = 1e-6;
const mt MAX = maxValue<mt>;
using pr = pair<mt, mt>;

#define N 200111
#define K 26
#define P 3
#define M (N * N)
#define p2(x) ((((x) * (x)) % (MOD)))
#define mxy(x, y) ((((x) * (y)) % (MOD)))
#define p2p(x) ((((x) * (x))))

mt n, m, d, cnt, mcnt, add;
vector<mt> g[N];
mt u[N], cv = 1;
bool fnd;
void dfs(mt v) {
	u[v] = cv;
	for (const mt& to : g[v]) {
		if (to == 1) ++mcnt, cnt += fnd, fnd = false;
		else if (u[to] != cv) dfs(to);
	}
}

bool dfsBuild(mt v) {
	bool r = false;
	u[v] = cv;
	for (const mt& to : g[v]) {
		if (to == 1) {
			if (fnd) printf("%d %d\n", to, v), r = true;
			else if (add) printf("%d %d\n", to, v), --add, r = true;
			fnd = false;
			break;
		}
	}

	for (const mt& to : g[v]) {
		if (to != 1 && u[to] != cv) {
			bool rv = dfsBuild(to);
			if (r) {
				if (!rv) printf("%d %d\n", to, v);
			}
			else printf("%d %d\n", to, v), r = rv;
		}
	}
	return r;
}

int main(void) {
#ifdef _DEBUG
	freopen("in.txt", "r", stdin);
#endif
	scanf("%d %d %d", &n, &m, &d);
	while (m--) {
		mt u, v;
		scanf("%d %d", &u, &v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	repe(2, n, i) if (u[i] != cv) fnd = true, dfs(i);
	if (d < cnt || d > mcnt) puts("NO");
	else {
		puts("YES");
		add = d - cnt, ++cv;
		repe(2, n, i) if (u[i] != cv) fnd = true, dfsBuild(i);
	}

	return 0;
}