// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = 2*(int)1e5 + 10;

int n, p[N];
string s[N];
VI ind[30];
set<int> se;

int Find(int x) {
	if (x == p[x])
		return x;
	return p[x] = Find(p[x]);
}

void Union(int x, int y) {
	x = Find(x);
	y = Find(y);
	p[x] = y;
}

int main() {
  init_ios();
  cin >> n;
  for (int i = 1; i <= n; ++i) {
  	p[i] = i;
  	cin >> s[i];
  	for (char c: s[i])
  		ind[c-'a'].PB(i);
  }
  for (int i = 0; i < 30; ++i)
  	for (int j = 1; j < ind[i].size(); ++j)
  		Union(ind[i][0], ind[i][j]);
  for (int i = 1; i <= n; ++i)
  	se.insert(Find(i));
  cout<<se.size()<<"\n";
}