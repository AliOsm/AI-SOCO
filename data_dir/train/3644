using namespace std;
#include<bits/stdc++.h>
#define ll long long
#define pr pair<ll,ll>
#define pii pair<int,int>
#define fir first
#define sec second
#define mp make_pair
#define pb push_back
#define sz(c) ((int)c.size())
#define all(c) (c).begin(),(c).end()
#define inf(type) numeric_limits <type> :: max()
#define fn "359D"  /// ___FILE_NAME_HERE___
#define rep(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define __rep(c,it) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();it++)

template <class T,class U>
void maximize(T &x,U y)
{
    if(x < y)x=y;
}
template <class T,class U>
void minimize(T &x,U y)
{
    if(x > y)x=y;
}
template <class T>
T Abs(T x)
{
    return (x < 0 ? -x : x);
}
template <class T>
T safe_sqrt(T x)
{
    return sqrt(max(x,(T)0));
}
template <class T,class U,class V>
T addmod(T x,U k,V __base)
{
    return ((x+k)%__base + __base)%__base;
}
template <class T,class U,class V>
T submod(T x,U k,V __base)
{
    return ((x-k)%__base + __base)%__base;
}
template <class T,class U,class V>
T mul(T x,U y,V __base)
{
    return (ll)x*y%__base;
}
/*------------------------------------------END_OF_TEMPLATE------------------------------------------*/

const int N=3e5+5;
vector <int> lf;
int a[N];
int n,ans=1;
struct segmentTree
{
    vector <int> gcdTree,minTree;
    segmentTree()
    {
        gcdTree.resize(4*N+44,0);
        minTree.resize(4*N+44,0);
    }
    void buildTree(int l=1,int r=n,int node=1)
    {
        if(l > r)return ;
        if(l==r)
        {
            gcdTree[node]=minTree[node]=a[l];
            return ;
        }
        int mid=(l+r)>>1;
        buildTree(l,mid,node<<1);
        buildTree(mid+1,r,node<<1|1);
        gcdTree[node]=__gcd(gcdTree[node<<1],gcdTree[node<<1|1]);
        minTree[node]=min(minTree[node<<1],minTree[node<<1|1]);
    }
    pii query(int lef,int rig,int l=1,int r=n,int node=1)
    {
        if(l > r or r < lef or l > rig)return mp(inf(int),0);
        if(lef<=l and r<=rig)return mp(minTree[node],gcdTree[node]);
        int mid=(l+r)>>1;
        pii q1=query(lef,rig,l,mid,node<<1);
        pii q2=query(lef,rig,mid+1,r,node<<1|1);
        return mp(min(q1.fir,q2.fir),__gcd(q1.sec,q2.sec));
    }
}seg;

void loadData()
{
    scanf("%d",&n);
    for(int i=1;i<=n;i++)scanf("%d",a+i);
}

bool ok(int len)
{
    int l=1,r=len;
    for(;r<=n;l++,r++)
    {
        pii p=seg.query(l,r);
        int minX=p.fir,gcd=p.sec;
        if(minX==gcd)return true;
    }
    return false;
}

void solve()
{
    seg.buildTree();
    int l=0,r=n;
    while(l <= r)
    {
        int mid=(l+r)>>1;
        if(ok(mid))l=mid+1,ans=mid;
        else r=mid-1;
    }
    l=1,r=ans;
    for(;r<=n;l++,r++)
    {
        pii p=seg.query(l,r);
        int minX=p.fir,gcd=p.sec;
        if(minX==gcd)lf.pb(l);
    }
    printf("%d %d\n",sz(lf),ans-1);
    for(auto it : lf)printf("%d ",it);
}

int main(void)
{
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    loadData();
    solve();
}
