#include <cstdio>
#include <algorithm>

typedef long long ll;

int const N = 200200;
ll const INFL = 3e12;

ll k[N], b[N], from[N];
int cnt;

void addLine(ll K, ll B) {
	while (cnt > 0 && k[cnt - 1] * from[cnt - 1] + b[cnt - 1] <= K * from[cnt - 1] + B) {
		--cnt;
	}
	from[cnt] = cnt == 0 ? -INFL : (
		(b[cnt - 1] - B + K - k[cnt - 1] - 1) / (K - k[cnt - 1])
	);
	k[cnt] = K;
	b[cnt++] = B;
}

ll getMax(ll x) {
	int l = -1;
	int r = cnt;
	while (r - l > 1) {
		int m = (l + r) / 2;
		if (from[m] <= x) {
			l = m;
		} else {
			r = m;
		}
	}
	return k[l] * x + b[l];
}

ll a[N], s[N], p[N];

int main() {
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) {
		scanf("%I64d", a + i);
	}
	s[0] = p[0] = 0;
	for (int i = 1; i <= n; ++i) {
		s[i] = s[i - 1] + a[i - 1];
		p[i] = p[i - 1] + a[i - 1] * i;
	}
	ll ans = 0;
	for (int i = 0; i < n; ++i) {
		addLine(i, i * s[i] - p[i]);
		ans = std::max(ans, p[i + 1] + getMax(-s[i + 1]));
	}
	printf("%I64d\n", ans);
}