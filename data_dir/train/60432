/*
 The Glow of the fire
 will light up the niiiiiiiiiight
 */

#include "bits/stdc++.h"
using namespace std;


#define FOR(i,a,b) for(int i = a; i < b; i++)
#define FORB(i,a,b) for(int i = a; i >= b; --i)
#define pb push_back
#define ios ios_base::sync_with_stdio(0);cin.tie(0);
#define debug(x) cerr << #x << " : " << x << '\n';

using ii = pair<int, int>;
using ll = long long;
using db = long double;
using mat = vector<vector<int>>;
using ull = unsigned long long;

const int mod = 1e9 + 7;
const int N = 2e5+5;

int n, m, s, t, ds, dt, u, v;
int p[N];
int state[N];
vector<int>adj[N];
int get(int i){return i == p[i] ? i : p[i] = get(p[i]);}
bool mrg(int u, int v){
  u = get(u) ;  v = get(v);
  if(u == v)return false;
  p[u] = v;
  return true;
}
int main() {

  scanf("%d%d", &n, &m);

  FOR(i,0,m){

    scanf("%d%d", &u, &v);
    adj[u].pb(v);
    adj[v].pb(u);

  }

  scanf("%d%d%d%d", &s, &t, &ds, &dt);
  vector<ii>edges;

  FOR(i,1,n+1)p[i] = i;

  FOR(i,1,n+1)if(i != s && i != t)
    for(auto v : adj[i])if(v != s && v != t){
      if(mrg(i,v)){
        edges.pb(ii(v,i));
      }
    }

  bool Mwgoda_O_O = find(adj[s].begin(),adj[s].end(), t) != adj[s].end();

  for(auto v : adj[s])
    if(v != t)
      state[get(v)] |= 1;

  for(auto v : adj[t])
    if(v != s)
      state[get(v)] |= 2;

  for(auto i : adj[s])if(get(s) != get(i) && state[get(i)] == 1){
    ds--;
    edges.pb(ii(s,i));
    mrg(s,i);
  }
  for(auto i : adj[t])if(get(t) != get(i) && state[get(i)] == 2){
    dt--;
    mrg(t,i);
    edges.pb(ii(t,i));
  }
  sort(adj[s].begin(),adj[s].end());
  sort(adj[t].begin(),adj[t].end());
  FOR(i,1,n+1)if(get(i) != get(s) && get(i) != get(t) && state[get(i)] == 3){
    if(ds > dt){
      if(binary_search(adj[s].begin(),adj[s].end(), i)){
      edges.pb(ii(s,i));
      mrg(s,i);
      ds--;}
    } else {
      if(binary_search(adj[t].begin(),adj[t].end(),i)){
      mrg(t,i);
      edges.pb(ii(t,i));
      dt--;}
    }
  }
  if(min(ds,dt) < 0)
    cout << "NO\n";

  if(ds && dt){
    if(Mwgoda_O_O){
      edges.pb(ii(s,t));
      goto found;
    }
  }

  if(ds){
    for(auto v : adj[s]){
      if(get(v) == get(t) && v != t){
        edges.pb(ii(s,v));
        goto found;
      }
    }
  }
  if(dt){
    for(auto v : adj[t]){
      if(get(v) == get(s) && v != s){
        edges.pb(ii(t,v));
        goto found;
      }
    }
  }

  cout << "No\n";
  return 0;

  found:;

  cout << "Yes\n";
  assert(edges.size() == n-1);

  for(auto e : edges)cout << e.first << ' ' << e.second << '\n';

	return 0;
}
