//g++ -std=c++14 -g -O2 -o ./a ./A.cpp
#include <bits/stdc++.h>
using namespace std;
#define ff first
#define ss second
#define nl '\n'
typedef long long ll;
//////////////////////////////////////////////////////////////////////

const double eps = 1e-9;
typedef ll ty;//win win
struct Point{
  ty x,y;
  Point(){x=y=-1e9;};
  Point(ty xx,ty yy):x(xx),y(yy){}
  Point operator+(Point p){return {x+p.x,y+p.y};}
  Point operator-(Point p){return {x-p.x,y-p.y};}
  Point operator*(ty t){return {t*x,t*y};}
  ty operator^(Point p){return x*p.y - y*p.x;}
};
ostream& operator<<(ostream &os,const Point&p){
  os << p.x << ' ' << p.y;
  return os;
}
ty dist2(Point p,Point q)
{return (p.x-q.x)*(p.x-q.x)+(p.y-q.y)*(p.y-q.y);}
ty dist(Point p,Point q)
{return sqrt((p.x-q.x)*(p.x-q.x)+(p.y-q.y)*(p.y-q.y));} 

struct Line {//ax+by=c
  ty a,b,c;
  Line(Point p,Point q){
    a = q.y-p.y;b = p.x-q.x;
    ty g = __gcd(a,b);a/=g,b/=g;
    c = a*p.x+b*p.y;
  }
  Line(ty aa=0,ty bb=0,ty cc=0):a(aa),b(bb),c(cc){}
  ty potential(Point p){return a*p.x+b*p.y;}
  inline ty norm(){return a*a+b*b;}
};
ostream& operator<<(ostream &os,const Line&l){
  os << "Line x*("<< l.a << ") + y*(" << l.b << ") = "<< l.c;
  return os;
}

int main(){
  ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
  
  Point p1,p2;
  cin>>p1.x>>p1.y;
  cin>>p2.x>>p2.y;
  
  int n;cin>>n;
  int ans = 0;
  for(int i=0;i<n;i++){
    ll aa,bb,cc;cin>>aa>>bb>>cc;
    Line ln(aa,bb,-cc);
    if( ((ln.potential(p1)-ln.c)^(ln.potential(p2)-ln.c)) < 0 )
      ans++;
  }
  cout << ans << nl;  
  
  return 0;
}
