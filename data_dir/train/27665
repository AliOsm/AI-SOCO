#include<bits/stdc++.h>

#define ssync ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define F first
#define S second
#define mp make_pair
#define pb push_back

using namespace std;

typedef long long int ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef vector<vs> vvs;
typedef vector<ll> vll;
typedef vector<vll> vvl;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,ll> pll;
const ll MOD = 1e9+7;
const long double PI = 3.14159265;

ll powerWithMod(ll base, ll exponent, ll modulus = LLONG_MAX)
{
	ll result = 1;
	base %= modulus;
	while(exponent > 0)
	{
		if(exponent % 2 == 1)
			result =(result * base) % modulus;
		exponent >>= 1;
		base =(base * base) % modulus;
	}
	return result;
}

ll modInverse(ll a, ll m = MOD)
{
	return powerWithMod(a, m-2, m);
}

void stringToUpper(string& strToConvert)
{
	transform(strToConvert.begin(), strToConvert.end(), strToConvert.begin(), ::toupper);
}

void stringToLower(string& strToConvert)
{
	transform(strToConvert.begin(), strToConvert.end(), strToConvert.begin(), ::tolower);
}

int w, h, n;
set<int> hor, ver;
stack<pair<char, int> > steps;
stack<ll> ans;
ll max_h;
ll max_v;

int main()
{
	ssync;
	cin >> w >> h >> n;
	char ch;
	int x;
	int arr1[] = {0, h};
	hor.insert(arr1, arr1+2);
	int arr[] = {0, w};
	ver.insert(arr, arr+2);
	while (n--) {
		cin >> ch >> x;
		steps.push({ch, x});
		switch(ch) {
			case 'H':
				hor.insert(x);
				break;
			case 'V':
				ver.insert(x);
				break;
		}
	}
	set<int>::iterator it1 = hor.begin();
	auto it2 = it1;
	it2++;
	max_h = 0; max_v = 0;
	while (it2 != hor.end()) {
		max_h = max(max_h, (ll)(*it2)-(*it1));
		it1++;
		it2++;
	}
	it1 = ver.begin();
	it2 = it1;
	it2++;
	while (it2 != ver.end()) {
		max_v = max(max_v, (ll)(*it2)-(*it1));
		it1++;
		it2++;
	}
	while (!steps.empty()) {
		ans.push(max_h*max_v);
		if (steps.top().first == 'H') {
			auto it = hor.find(steps.top().S);
			auto it_prev = it;
			it_prev--;
			auto it_next = it;
			it_next++;
			max_h = max(max_h, (ll)(*it_next)-(*it_prev));
			hor.erase(it);
		} else {
			auto it = ver.find(steps.top().S);
			auto it_prev = it;
			it_prev--;
			auto it_next = it;
			it_next++;
			max_v = max(max_v, (ll)(*it_next)-(*it_prev));
			ver.erase(it);
		}
		steps.pop();
	}
	while (!ans.empty()) {
		cout << ans.top() << "\n";
		ans.pop();
	}
	return 0;

}
