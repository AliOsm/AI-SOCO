/*
    STARK_BOY
*/
#include <bits/stdc++.h>
#include <fstream>
using namespace std;
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define repe(i,a,b) for(ll i=a;i<=b;i++)
#define bac(i,a,b) for(ll i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define F first
#define S second
typedef long long ll;
typedef vector< ll > vi;
typedef vector<pair<ll,ll> > vpii;
typedef pair<ll,ll> pii;
#define all(c) c.begin(),c.end()
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define setbitc(x) __builtin_popcount(x)
#define init(x,a) memset(x,a,sizeof(x))
#define INF 10000000000000
#define MOD 1000000007
#define M 998244353
#define N 100005

ll i,j,k,l,n,m,p,q,r,d,su,sx,sy,prod=1,maxi,a,b,c,w,x,y,o,e,f,mini=INF,t,cnt;
string s,s1,s2;
ll ar[N]; 
//ll L[N],R[N],val[N],ar[N],op[N],br[N];
ll modularExponentiation(ll x,ll n)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return modularExponentiation((x*x)%M,n/2);
    else                             //n is odd
        
        return (x*modularExponentiation((x*x)%M,(n-1)/2))%M;

}
bool sortbysec(const pair<ll,ll> &a,const pair<ll,ll> &b) 
{ 
    return (a.second < b.second); 
}
bool check(string s ,ll m)
{
    ll t=s.length();
    rep(i,0,t)
    {
        if(s1[i%m]!=s[i])
            return false;
    }
    return true;
}
int main()
{
    
    
    ios
    int ti=1;
    //cin>>ti;

    while(ti--)
    {
        vi v;
        ll remain_paint;
        cin>>remain_paint;
        rep(i,1,10)
        {
            cin>>x;
            v.pb(x);

        }
        ll min_val=*min_element(all(v));
        ll dig_max=remain_paint/min_val;
        if(dig_max<1){
            cout<<"-1";
            return 0;
        }
        //cout<<dig_max;
        //for(auto i:v)cout<<i<<" ";
        bac(i,9,1)
        {
            ll lo=0;
            ll hi=dig_max;
            while(hi>lo)
            {

                ll mid=(hi+lo)/2;
                //cout<<hi<<" "<<lo<<" "<<mid<<" ";
                if((remain_paint-mid*v[i-1])>=0 and ((remain_paint-mid*v[i-1])/min_val==(dig_max-mid)))
                    lo=mid+1;
                else
                    hi=mid-1;
            }
            if((remain_paint-lo*v[i-1])>=0 and ((remain_paint-lo*v[i-1])/min_val==(dig_max-lo)))
            ;
            else
            lo--;
            //cout<<lo<<" ";
            rep(j,0,lo)cout<<i;
            if(lo>0)
            {
            dig_max-=lo;
            remain_paint-=(v[i-1]*lo);
            //cout<<" "<<remain_paint<<" ";
            }

        }

    }

    
    return 0;
        
}