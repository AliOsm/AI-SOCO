#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2
#define v(x) (int)(x)

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int mod = 1e9 + 7;
const int pri = 43;
const int N = 301;
const int M = 1e5 + 500;
ll ln[N];
ll ht[M];
ll pw[M];
ll n;

string t;

void calc_hash() {
    for(int i = 0; i < len(t); ++i) {
        ht[i] = (i? ht[i - 1]: 0) * pri + v(t[i]);
        ht[i] %= mod;
    }
    for(int i = 0; i < M; ++i) {
        pw[i] = (i? pw[i - 1] * pri: 1);
        pw[i] %= mod;
    }
}

void input() {
    cin >> n;
    for(int i = 1; i <= n; ++i) {
        string tmp; cin >> tmp;
        t += tmp;
        t += " ";
        ln[i] = len(t) - 2;
    }
    t.pop_back();
}

int hash_query(int l, int r) {
    return (ht[r] - 1ll * (l? ht[l - 1]: 0) * pw[r - l + 1] % mod + mod) % mod;
}

void solve() {
    calc_hash();
    int ans = len(t);
    for(int i = 1; i <= n; ++i) {
        for(int j = i; j <= n; ++j) {
            int l = (i == 1? 0: ln[i - 1] + 2);
            int r = ln[j];
            int cnt = 1;
            int dif = r - l - (j - i);
            int val = hash_query(l, r);
            for(int k = j + 1; k <= n; ) {
                if(k + j - i > n) {
                    break;
                }
                int x = k + j - i;
                int L = ln[k - 1] + 2;
                int R = ln[x];
                if(R - L == r - l && hash_query(L, R) == val) {
                    cnt++, k += j - i + 1;
                } else {
                    k++;
                }
            }
            if(cnt >= 2) {
                ans = min(ans, len(t) - cnt * dif);
            }
        }
    }
    cout << ans << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
