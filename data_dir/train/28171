#include <bits/stdc++.h>
using namespace std;

int n, m;
vector<pair<int, int> > e;
vector<vector<int> > g;
map<pair<int, int>, bool> mp;
vector<int> arr;
vector<char> used;

void dfs(int v) {
	used[v] = true;
	for(int i = 0; i < g[v].size(); ++i) {
		int to = g[v][i];
		if(!used[to]) {
			dfs(to);
		}
	}
	arr.push_back(v);
}

bool check(int num) {
	g.clear();
	mp.clear();
	arr.clear();
	used.assign(n, false);
	for(int i = 0; i < num; ++i) {
		int from = e[i].first,
			to = e[i].second;
		g[to].push_back(from);
		mp[make_pair(from, to)] = true;
	}
	for(int i = 0; i < n; ++i) {
		if(!used[i]) {
			dfs(i);
		}
	}
	for(int i = 0; i + 1 < n; ++i) {
		if(!mp[make_pair(arr[i], arr[i + 1])]) {
			return false;
		}
	}
	return true;
}

int main (int argc, char *argv[])
{
	scanf("%d%d", &n, &m);
	e.resize(m);
	g.resize(n);
	for(int i = 0; i < m; ++i) {	
		int from, to;
		scanf("%d%d", &from, &to);
		--from;
		--to;
		e[i].first = from;
		e[i].second = to;
	}
	if(!check(m)) {
		printf("-1");
		return 0;
	}
	int l = 1, 
		r = m;
	while(l != r) {
		int mid = (l + r) >> 1;
		if(check(mid)) {
			r = mid;
		} else {
			l = mid + 1;
		}
	}
	printf("%d", l);

	return 0;
}

