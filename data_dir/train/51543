/* Author: Dhruv Rastogi */
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define all(sdk) sdk.begin(),sdk.end()
#define mll map<int, int>
#define pb push_back
#define rep(i,a,b) for(int i=a;i<b;++i)
#define repd(i,a,b) for(int i=a;i>=b;--i)
#define mp make_pair
#define hell 1000000007
#define endl '\n'
#define vvll vector<vector<int> >
#define vll vector<int>
#define mint map<int,int> 
#define sz(x) (int)x.size()
#define sll set<int>
#define pll pair<int,int>
#define F first
#define S second
const long double PI = acos(-1.0);

int dp[16][1<<15][16];
pair<int,int> pt[16][1<<15][16];
int a[15];
int sm[1<<15];

void solve(){ 
    int n;
    cin>>n;
    rep(i,0,n){
        cin>>a[i];
    }
    rep(i,0,1<<n){
        sm[i]=0;
        rep(j,0,n){
            if((i>>j)&1) sm[i]+=a[j];
        }
        rep(j,0,n+1){
            rep(k,0,n+1){
                dp[j][i][k]=hell;
            }
        }
    }

    dp[0][0][0]=0;
    rep(cnt,0,n){
        rep(mask,0,(1<<n)-1){
            rep(pos,0,n){
                if(dp[cnt][mask][pos]==hell) continue;
                int m =(((1<<n)-1)^mask);
                for(int nmask=m;nmask;nmask=(nmask-1)&m){
                    if(sm[nmask]>dp[cnt][mask][pos] && (nmask>>pos)){
                        int npos=pos+__builtin_ctz(nmask>>pos)+1;
                        if(dp[cnt+1][mask|nmask][npos] > sm[nmask]){
                            dp[cnt+1][mask|nmask][npos]=sm[nmask];
                            pt[cnt+1][mask|nmask][npos]=mp(mask,pos);
                        }
                    }
                }
            }
        }
    }
    int mxcnt=0;
    int mxpos=0;
    rep(i,1,n+1){
        rep(j,1,n+1){
            if(dp[i][(1<<n)-1][j]!=hell){
                mxcnt=i;
                mxpos=j;
            }
        }
    }
    int curmask=(1<<n)-1;
    vector<pll> ans;
    vector<pll> finans;
    repd(i,mxcnt,1){
      //  cout << i << ' ' << curmask << ' ' << mxpos << endl;
        auto par=pt[i][curmask][mxpos];
        int prevmask=par.first;
        int prevpos=par.second;
        int extra = curmask^prevmask;
        rep(i,0,n){
            if((extra>>i)&1 and i!=mxpos-1){
                ans.pb(mp(i+1,mxpos));
            }
        }
        mxpos = prevpos;
        curmask = prevmask;
    }
    // for(auto i:ans){
    //     cout<<i.first<<' '<<i.second<<endl;
    // }
    vector<int> v(n);
    iota(all(v),1);
    for(auto i:ans){
        int f=0,s=0;
        rep(j,0,sz(v)){
            if(v[j]==i.first){
                f=j+1;
            }
            else if(v[j]==i.second){
                s=j+1;
            }
        }
        v.erase(v.begin()+f-1);
        finans.pb(mp(f,s));
    }
    cout<<sz(finans)<<endl;
    for(auto i:finans){
        cout<<i.F<<' '<<i.S<<endl;
    }
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t=1;
    cin>>t;
    while(t--){
        solve();
    }
    return 0;
}