#include <bits/stdc++.h>

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)((x).size())

using namespace std;

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

const int maxn = (int)1010;
const int inf = (int)1e9;
const int mod = (int)1e9 + 7;
const ll INF = (ll)1e18;
const double eps = 1e-9;

int n, m;
int a[maxn][maxn];
int d[maxn][maxn];
int lg[maxn];
int mx[10][10][maxn][maxn];


void build_sparse() {

	for(int i = 2; i <= n || i <= m; ++i)
		lg[i] = lg[i>>1] + 1;

	for(int i = 1; i <= n; ++i)
		for(int j = 1; j <= m; ++j)
			mx[0][0][i][j] = d[i][j];
				
	for(int x = 0; x <= lg[n]; ++x) {
		for(int y = 0; y <= lg[m]; ++y) {

			if(x + y == 0) 
				continue;
			for(int i = 1; i + (1<<x) - 1 <= n; ++i) {
				for(int j = 1; j + (1<<y) - 1 <= m; ++j) {

					int res = 0;
					if(x == 0) {
						res = max(mx[x][y - 1][i][j], mx[x][y - 1][i][j + (1 << (y - 1))]);
					}                                                                
					else {
						res = max(mx[x - 1][y][i][j], mx[x - 1][y][i + (1 << (x - 1))][j]);
					}
					
					mx[x][y][i][j] = res;
				}
			}
		}
	}
}

inline int Max(int xa, int ya, int xb, int yb) {
	int x = lg[xb - xa + 1], y = lg[yb - ya + 1];
	int res = mx[x][y][xa][ya];
	res = max(res, mx[x][y][xb - (1<<x) + 1][ya]);
	res = max(res, mx[x][y][xa][yb - (1<<y) + 1]);
	res = max(res, mx[x][y][xb - (1<<x) + 1][yb - (1<<y) + 1]);
	return res;
}

void solve() {

	int xa, ya, xb, yb;
	scanf("%d%d%d%d", &xa, &ya, &xb, &yb);

	int l = 0, r = min(xb-xa+1, yb-ya+1);
	int ans = 0;

	while(l <= r) {

		int mid = (l + r) >> 1;
		if( Max(xa+mid-1, ya+mid-1, xb, yb) >= mid ) 
			l = mid + 1, ans = mid;
		else 
			r = mid - 1;
    }

	printf("%d\n", ans);
}

int main()
{
	#ifndef ONLINE_JUDGE
		freopen("in", "r", stdin);
		freopen("out", "w", stdout);
	#endif

	scanf("%d%d", &n, &m);

	for(int i = 1; i <= n; ++i) 
		for(int j = 1; j <= m; ++j)
			scanf("%d", &a[i][j]);

   	for(int i = 1; i <= n; ++i) {
   		for(int j = 1; j <= m; ++j) {

	   		d[i][j] = min( min(d[i-1][j], d[i][j-1]), d[i-1][j-1] ) + 1;
	   		d[i][j] *= a[i][j];
   		}
   	}

 	build_sparse();
   	
   	int T;
   	scanf("%d", &T);

   	while(T--) {
   		solve();
   	}

	return 0;
}


