#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
typedef long long ll;
typedef double D;
const ll inf=(1ll<<60);
const ll mod=1e9+7;
const int MX=2e5+9;
const int SQ=300;
int n,m,bit[MX*3],l,r,del[MX];
string s,tmp;
void add(int x,int v){
    while(x<MX){
        bit[x]+=v;
        x+=x&-x;
    }
}
int get(int x){
    int ret=0;
    while(x){
        ret+=bit[x];
        x-=x&-x;
    }
    return ret;
}
int bn(int x){
    int ans=0,l=1,r=n;
    while(l<=r){
        int mid=(l+r)/2;
        if(get(mid)>x){
            ans=mid;
            r=mid-1;
        }
        else l=mid+1;
    }
    return ans;
}
set<int>S[80];
char c[100];
int main(){
    cin>>n>>m>>s;
    for(int i=0;i<n;i++){
        add(i+1,1);
        if(isdigit(s[i]))S[s[i]-'0'].insert(i+1);
        else if(s[i]>='a'&&s[i]<='z')S[s[i]-'a'+10].insert(i+1);
        else S[s[i]-'A'+36].insert(i+1);
    }
    int b;
    while(m--){
        scanf("%d%d%s",&l,&r,&c);
        l--;r--;
        tmp=c;
        if(isdigit(tmp[0]))b='0';
        else if(tmp[0]>='a'&&tmp[0]<='z')b='a'-10;
        else b=+'A'-36;
        l=bn(l);
        r=bn(r);
        int id=tmp[0]-b;
        while(1){
            auto it=S[id].lower_bound(l);
            if(it==S[id].end()||*it>r)break;
            add(*it,-1);
            del[*it]=1;
            S[id].erase(it);
        }
    }
    for(int i=1;i<=n;i++){
        if(!del[i])cout<<s[i-1];
    }
    puts("");
}
