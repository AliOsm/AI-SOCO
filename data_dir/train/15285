#include<bits/stdc++.h>
#define MAXN 100010
#define pb push_back
#define ll long long
using namespace std;

vector<int>adj[MAXN];
long long int mxm,cnt,tme;
long long int col[MAXN],actv[MAXN],ans[MAXN],arr[MAXN],st[MAXN],en[MAXN],sz[MAXN],heavy[MAXN];

void dfsst(int node,int p){
	int mx=0;
	sz[node]=1;st[node]=++tme;arr[tme]=node;
	for(int i=0;i<adj[node].size();i++){
		int child=adj[node][i];
		if(p!=child){
			dfsst(child,node);
			sz[node]+=sz[child];
			if(sz[child]>mx){
				heavy[node]=child;
				mx=sz[child];
			}
		}
	}
	en[node]=tme;
}

void updmx(int col){
	if(actv[col]>mxm){
		mxm=actv[col];cnt=col;
	}
	else if(actv[col]==mxm)
		cnt+=col;
}

void upd(int node,int val){
	for(int i=st[node];i<=en[node];i++){
		actv[col[arr[i]]]+=val;
		if(val!=-1)
			updmx(col[arr[i]]);
	}
}

void dfs(int node,int p,bool keep){
	for(int i=0;i<adj[node].size();i++){
		int child=adj[node][i];
		if(p!=child && child!=heavy[node]){
			dfs(child,node,0);
		}
	}
	if(heavy[node])
		dfs(heavy[node],node,1);
	actv[col[node]]++;
	updmx(col[node]);
	for(int i=0;i<adj[node].size();i++){
		int child=adj[node][i];
		if(p!=child && child!=heavy[node]){
			upd(child,1);
		}
	}
	ans[node]=cnt;
	if(keep==0){
		upd(node,-1);
		mxm=cnt=0;
	}
}

int main()
{

	int n,u,v;
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		scanf("%d",&col[i]);
	}
	for(int i=0;i<n-1;i++){
		scanf("%d %d",&u,&v);
		adj[u].pb(v);
		adj[v].pb(u);
	}
	dfsst(1,-1);
	dfs(1,-1,1);
	for(int i=1;i<=n;i++){
		printf("%I64d ",ans[i]);
	}
	return 0;
}