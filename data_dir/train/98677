#include<bits/stdc++.h>
using namespace std;

struct nilai {
	int x;
	
	nilai operator - (nilai lain) const {
		nilai ret;
		ret.x=x-lain.x;
		
		return ret;
	}
	
	bool operator < (nilai lain) const {
		return x<lain.x;
	}
	
	bool operator != (nilai lain) const {
		if (x!=lain.x) {
			return 1;
		}
		
		return 0;
	}
	
	void hapus() {
		x=0;
		
		return;
	}
}
;

template <typename data>
struct priorityQueue {
	int size;
	vector <data> contain;
	
	void balanceUp(int now) {
		if (now==0) {
			return;
		}
		
		int parent;
		parent=(now-1)>>1;
		
		if (contain[now]<contain[parent]) {
			swap(contain[now],contain[parent]);
			
			balanceUp(parent);
		}
		
		return;
	}
	
	void masuk(data x) {
		size++;
		contain.push_back(x);
		
		balanceUp(size-1);
		
		return;
	}
	
	data terbesar() {
		return contain[0];
	}
	
	void balanceDown(int now) {
		int child;
		child=now<<1|1;
		
		if (child>=size) {
			return;
		}
		
		if (child==size-1) {
			if (contain[child]<contain[now]) {
				swap(contain[child],contain[now]);
			}
			
			return;
		}
		
		if (contain[child+1]<contain[child]) {
			child++;
		}
		
		if (contain[child]<contain[now]) {
			swap(contain[child],contain[now]);
			
			balanceDown(child);
		}
		
		return;
	}
	
	void hapus() {
		if (size==0) {
			return;
		}
		
		size--;
		contain[0]=contain[size];
		contain.pop_back();
		
		balanceDown(0);
		
		return;
	}
}
;

template <typename data>
struct peringkat {
	priorityQueue <data> isi;
	priorityQueue <data> hapus;
	
	int size() {
		return isi.size-hapus.size;
	}
	
	void push(data x) {
		isi.masuk(x);
		
		return;
	}
	
	void pop(data x) {
		hapus.masuk(x);
		
		return;
	}
	
	data top() {
		while (isi.size>0&&hapus.size>0) {
			if (hapus.terbesar()<isi.terbesar()) {
				hapus.hapus();
				
				continue;
			}
			
			if (isi.terbesar()!=hapus.terbesar()) {
				break;
			}
			
			isi.hapus();
			hapus.hapus();
		}
		
		return isi.terbesar();
	}
	
	bool empty() {
		if (size()==0) {
			return 1;
		}
		
		return 0;
	}
}
;

const int MAXN=3e5+5;

int N, Q;
nilai A[MAXN];

void input() {
	cin>>N;
	
	for (int i=0;i<N;i++) {
		cin>>A[i].x;
	}
	
	return;
}

peringkat <nilai> daftar;

long long ans;

void soal() {
	for (int i=0;i<N;i++) {
		daftar.push(A[i]);
		
		if (daftar.top()<A[i]) {
			ans+=(A[i]-daftar.top()).x;
			daftar.pop(daftar.top());
			daftar.push(A[i]);
		}
	}
	
	return;
}

void output() {
	cout<<ans<<'\n';
	
	return;
}

int main () {
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	
	input();
	soal();
	output();
	
	return 0;
}
