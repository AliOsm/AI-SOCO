
#include <bits/stdc++.h>

using namespace std;

#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define REV(i,j,k) for(int i=j;i>=k;i--)
#define FORR(i,j,k,l) for(int i=j;i<=k;i+=l)
#define inf         freopen("in.txt", "r", stdin)
#define outf        freopen("out.txt", "w", stdout)
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c)    scanf("%d %d %d", &a, &b, &c)
#define clean(mat,n)   FOR(i,0,n) mat[i].clear()
#define minn          (long long)-1000000000000000000
#define maxx          (long long) 1000000000000000000
#define mod          1000000007
#define M_PI           3.14159265358979323846  /* pi */
#define LL           long long
#define NL '\n'
#define cnd tree[idx]
#define lnd (idx<<1)
#define rnd ((idx<<1)+1)
#define PB push_back
#define F first
#define S second
#define MAX 210
#define MP make_pair
#define valid(nx,ny)  ((nx >= 0) && (nx < row) && (ny >= 0) && (ny < col))
typedef pair<int,int> PR;

string pattern, str;
int lps[MAX], m, ss[MAX], n, k;

void make_lps(string pattern)
{
    int n = pattern.size();

    lps[0] = lps[1] = 0;
    FOR(i,2,n)
    {
        int p = lps[i-1];
        while(true)
        {
            if(pattern[i - 1] == pattern[p]) {lps[i] = p + 1; break;}
            if(p == 0) break; else p = lps[p];
        }
    }

}

int getPos(int c,char ch)
{
    int a;
    for(a = c; pattern[a] != ch; a = lps[a])
            if(a == 0) { a = -1; break;}
    return a + 1;
}

int dp[MAX][MAX];
int rec(int p,int c)
{
    if(p == n) return 1;

    int &temp = dp[p][c];
    if(temp != -1) return temp;

    temp = 0;
    FOR(i,0,k-1)
    {
        char ch = 'a' + i;
        int nc = getPos(c, ch);

        if(ss[p] == 0 && nc == m) continue;
        else if(ss[p] == 1 && nc != m) continue;

        temp = max(temp, rec(p + 1, nc));
    }
    return temp;
}

void prin(int p,int c)
{
    if(p == n) return;

    int &temp = dp[p][c];

    temp = 0;
    FOR(i,0,k-1)
    {
        char ch = 'a' + i;
        int nc = getPos(c, ch);

        if(ss[p] == 0 && nc == m) continue;
        else if(ss[p] == 1 && nc != m) continue;

        if(rec(p + 1, nc))
        {
            cout << ch;
            prin(p + 1, nc);
            return;
        }
    }
    return;
}

int main()
{
    ios::sync_with_stdio(false);
    //inf;
    //outf;

    cin >> n >> k;
    cin >> pattern >> str; m = pattern.size();

    FOR(i,0,str.size()-1)
        if(str[i] == '1') ss[i + m - 1] = 1;
//    FOR(i,0,n-1) cout << ss[i] << ' ';
//    cout << endl;

    make_lps( pattern );
    mem(dp, -1);
    if(rec(0, 0)) prin(0, 0);
    else cout << "No solution" << endl;
    return 0;
}
