//██████╗ ██╗   ██╗██╗      ██████╗ ███████╗
//██╔══██╗██║   ██║██║      ██╔══██╗██╔════╝
//██████╔╝██║   ██║██║█████╗██║  ██║█████╗
//██╔══██╗██║   ██║██║╚════╝██║  ██║██╔══╝
//██║  ██║╚██████╔╝██║      ██████╔╝███████╗
//╚═╝  ╚═╝ ╚═════╝ ╚═╝      ╚═════╝ ╚══════╝
#include <bits/stdc++.h>

//#pragma GCC target("sse,sse2,sse3,ssse3,sse4")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#include <algorithm>
using namespace std;

#define fst first
#define snd second
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define eb emplace_back

#define all(v) (v).begin(), (v).end()
#define sz(v) ((int)(v).size())
#define sqr(x) ((x) * (x))

#define ADD_OPERATORS_IN(T, COMP) \
    bool operator < (const T& ot) const { return COMP(ot) == -1; } \
    bool operator > (const T& ot) const { return COMP(ot) == 1; } \
    bool operator == (const T& ot) const { return COMP(ot) == 0; } \
    bool operator != (const T& ot) const { return COMP(ot) != 0; }

#define ADD_OPERATORS_OUT(T, COMP) \
    bool operator < (const T& a, const T& b) const { return COMP(a, b) == -1; } \
    bool operator > (const T& a, const T& b) const { return COMP(a, b) == 1; } \
    bool operator == (const T& a, const T&b) const { return COMP(a, b) == 0; } \
    bool operator != (const T& a, const T&b) const { return COMP(a, b) != 0; }


typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef vector<int> vi;

mt19937_64 mt_rand(chrono::system_clock::now().time_since_epoch().count());

template<typename T1, typename T2> inline bool upmax(T1& a, T2 b) { return (a < b ? (a = b, true) : false); }
template<typename T1, typename T2> inline bool upmin(T1& a, T2 b) { return (b < a ? (a = b, true) : false); }

const int maxn = (int) 5e5+10;
const int maxlog = 21;
const int base = 998244353;
const ld eps = (ld) 1e-9;
const ld PI = acos(-1.);
const int pp = 41;
const int INF = (int) 2e9;
const ll llinf = (ll) 1e18;

//#define next asdksakc

struct state {
  int len, link;
  vector<int> nxt;

  state() : nxt(26, -1), len(0), link(-1) {}
};

const int MAXLEN = 5555;
state st[MAXLEN*2];
int sz, last;

int n, a, b;


void sa_init() {
  sz = last = 0;
  st[0].len = 0;
  st[0].link = -1;
  ++sz;
  /*
  // этот код нужен, только если автомат строится много раз для разных строк:
  for (int i=0; i<MAXLEN*2; ++i)
    st[i].next.clear();
  */
}

void sa_extend (int c) {
  int cur = sz++;
  st[cur].len = st[last].len + 1;
  int p;
  for (p=last; p!=-1 && st[p].nxt[c] == -1; p=st[p].link)
    st[p].nxt[c] = cur;
  if (p == -1)
    st[cur].link = 0;
  else {
    int q = st[p].nxt[c];
    if (st[p].len + 1 == st[q].len)
      st[cur].link = q;
    else {
      int clone = sz++;
      st[clone].len = st[p].len + 1;
      st[clone].nxt = st[q].nxt;
      st[clone].link = st[q].link;
      for (; p!=-1 && st[p].nxt[c] == q; p=st[p].link)
        st[p].nxt[c] = clone;
      st[q].link = st[cur].link = clone;
    }
  }
  last = cur;
}

int f[maxn];

void amax(int & a, int b) {
  if (a == -1) a = b;
  else a= min(a, b);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
//  freopen("input.txt", "r", stdin);

  cin >> n >> a >> b;
  sa_init();
  string s;
  cin >> s;
  memset(f, -1, sizeof(f));
  f[0] = 0;
  for (int i = 0; i < n; i ++) {
    int v = 0;
    for (int j = i; j < n; j ++) {
      int c = s[j] - 'a';
      if (v != -1) {
        v = st[v].nxt[c];
      }
      if (v != -1) {
        amax(f[j + 1], f[i] + b);
      }
      amax(f[j + 1], f[i] + a * (j - i + 1));
    }
    sa_extend(s[i] - 'a');
  }
  cout << f[n] << '\n';


  return 0;
}