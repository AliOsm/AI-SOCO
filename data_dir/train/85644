#include <bits/stdc++.h>

using namespace std;

const int INF = (int) 1e4 + 7;
const int MAXN = (int) 2e5 + 7;

int n, m;
int sz[MAXN], lvl[MAXN], up[20][MAXN];

vector<int> g[MAXN];

void dfs(int v, int p = 0) {
  if (!p) {
    lvl[v] = 0;
    for (int i = 0; i < 20; i++)
      up[i][v] = v;
  }
  else {
    up[0][v] = p;
    for (int i = 1; i < 20; i++)
      up[i][v] = up[i - 1][up[i - 1][v]];
   
    lvl[v] = lvl[p] + 1;
  }
  sz[v] = 1;
  for (auto to : g[v]) {
    if (to != p) {
      dfs(to, v);
      sz[v] += sz[to];
    }
  }
}

int lca(int u, int v) {
  if (lvl[u] < lvl[v])
    swap(v, u);

  for (int i = 19; i >= 0; i--) {
    if (lvl[up[i][u]] >= lvl[v])
      u = up[i][u];
  }
  for (int i = 19; i >= 0; i--) {
    if (up[i][u] != up[i][v]) {
      u = up[i][u];
      v = up[i][v];
    }
  }
  if (u != v) 
    u = up[0][u];
  
  return u;  
}

int anc(int v, int cnt) {
  for (int i = 19; i >= 0; i--) {
    if ((cnt >> i) & 1)
      v = up[i][v];
  }
  return v;
}

int main() {
  #ifdef LOCAL
  freopen("in", "r", stdin);
  #endif
  
  scanf("%d", &n);
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    scanf("%d%d", &u, &v);
    g[u].push_back(v);
    g[v].push_back(u);
  }
  dfs(1);
  scanf("%d", &m);
  while (m--) {
    int u, v;
    scanf("%d%d", &u, &v);
    if (u == v) {
      printf("%d\n", n);
      continue;
    }
    int p = lca(u, v);
    int d1 = lvl[u] - lvl[p];
    int d2 = lvl[v] - lvl[p];
    int dist = d1 + d2;
    if (dist & 1) {
      printf("0\n");
      continue;
    }
    if (lvl[v] == lvl[u]) {
      printf("%d\n", n - sz[anc(v, d1 - 1)] - sz[anc(u, d2 - 1)]);
    }
    else {
      int half = dist / 2;
      if (d1 > d2) printf("%d\n", sz[anc(u, half)] - sz[anc(u, half - 1)]);
      else printf("%d\n", sz[anc(v, half)] - sz[anc(v, half - 1)]);
    }
  }
  return 0;
}