// in the name of god 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
#include <bits/stdc++.h>
//#include <unistd.h>
using namespace std ;
using namespace __gnu_pbds;
void operator+=(vector<int>&in1,const vector<int>&in2){for(int i=0;i<in2.size();i++)in1.push_back(in2[i]);}
#define y2 sdfklgjsdkfd
#define y1 sdfklgjsdkafd
#define L first 
#define R second
#define X first 
#define Y second
#define int  long long 
typedef long long ll ;
typedef long double ld ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
typedef pair < int , int > pii ; 
typedef pair < int , pii > pi_ii ;
typedef pair < pii , int > pii_i ;
typedef pair < pii , pii > pii_ii ;
#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%I64d
const int mod = 1e9+7 ;
const int maxL = 19 ;
const ll inf = 1e16 ;
const int baze = 850 ;
const int maxn = 2e3 +10 ;
const int base = 401 ;
#define y0 sdfgh
int n , ar [ maxn ] [ maxn ] , x0 , x1 , y0 , y1 ; 
int  mp0 [ maxn * 2 + 100 ];
int  mp1 [ maxn * 2 + 100 ];

main ( )
{
  fast ;
  cin >> n ;
  for ( int i = 0 ; i < n ;i ++ )
    for ( int j = 0 ; j < n ; j ++)
      cin >> ar [ i ] [j ] , mp0 [ i + j ] += ar [ i ] [ j ] , mp1 [ i - j + maxn ] += ar [ i ] [ j ] ;
  int ans0 = 0 , ans1 = 0 ;
  for ( int i = 0 ; i < n ;i ++ )
    for ( int j = 0 ; j < n ; j ++)
      if ( (i+j)&1 )
	if ( mp0 [ i + j ] + mp1[i-j+maxn]-ar[i][j] >= ans0 )
	  x0 = i , y0 = j , ans0 = max ( ans0 , mp0 [ i + j ] + mp1[maxn+i-j]-ar[i][j] ) ;
	else
	  ;
      else
	if ( mp0 [ i + j ] + mp1[maxn+i-j]-ar[i][j] >= ans1 )
	  x1 = i , y1 = j , ans1 = max ( ans1 , mp0 [ i + j ] + mp1[i-j+maxn]-ar[i][j] ) ;
	else
	  ;
  x0 ++ ;
  y0 ++ ;
  x1 ++ ;
  y1 ++ ;
  cout << ans1 + ans0 << endl << x0 << ' ' << y0 << ' ' << x1 << ' ' << y1 << endl ;
} 
