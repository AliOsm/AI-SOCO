#include<bits/stdc++.h>
using namespace std;

typedef int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;

#define endl '\n'
#define ff first
#define ss second
#define pb push_back
#define f(i,l,r) for(ll i=l;i<=r;i++)
#define rf(i,r,l) for(ll i=r;i>=l;i--)
#define Max 5000001
#define inf 2147483647
#define llinf 9223372036854775807
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcountll(n)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)

#define d0(a) cout<<a<<' ';
#define d1(a) cout<<a<<endl;
#define d2(a,b) cout<<a<<' '<<b<<endl;
#define d3(a,b,c) cout<<a<<' '<<b<<' '<<c<<endl;
#define d4(a,b,c,d) cout<<a<<' '<<b<<' '<<c<<' '<<d<<endl;
#define d5(a,b,c,d,e) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<endl;

const ll N=1e6+5,mod=1e9+7,bit=61;

ll sz[N],depth[N],ans[N],fq[N],n;
vector<ll> adj[N];

void dfs(ll u,ll p,ll dep)
{
    sz[u]=1;
    depth[u]=dep;
    for(auto v:adj[u])
    {
        if(v==p)
        {
            continue;
        }
        dfs(v,u,dep+1);
        sz[u]+=sz[v];
    }
}

map<ll,ll> hld(ll u,ll p)
{
    ll x=-1,mx=0;
    for(auto v:adj[u])
    {
        if(v==p)
        {
            continue;
        }
        if(sz[v]>mx)
        {
            mx=sz[v];
            x=v;
        }
    }
    map<ll,ll> mp;
    if(x!=-1)  // Assuming answer of special child
    {
        mp=hld(x,u);
        fq[u]=fq[x];
        ans[u]=ans[x];
    }
    for(auto v:adj[u])
    {
        if(v==p or v==x)
        {
            continue;
        }
        map<ll,ll> add=hld(v,u);
        for(auto it:add)  // When every element if merged into other it almost doubles size
        {
            mp[it.ff]+=it.ss;
            if(mp[it.ff]>fq[u])
            {
                fq[u]=mp[it.ff];
                ans[u]=it.ff;
            }
            else if(mp[it.ff]==fq[u])
            {
                ans[u]=min(ans[u],it.ff);
            }
        }
    }
    mp[depth[u]]++;
    if(mp[depth[u]]>fq[u])
    {
        fq[u]=mp[depth[u]];
        ans[u]=depth[u];
    }
    else if(mp[depth[u]]==fq[u])
    {
        ans[u]=min(ans[u],depth[u]);
    }
    return mp;
}

signed main()
{
    fast;

    ll t=1;
    //cin>>t;
    while(t--)
    {
        scanf("%d",&n);
        f(i,1,n-1)
        {
            ll u,v;
            scanf("%d",&u);
            scanf("%d",&v);
            adj[u].pb(v);
            adj[v].pb(u);
        }
        dfs(1,0,1);
        hld(1,0);
        f(i,1,n)
        {
            printf("%d\n",ans[i]-depth[i]);
        }
        cout<<endl;
    }
    return 0;
}
















