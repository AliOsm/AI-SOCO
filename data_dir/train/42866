#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

const int N = 14;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const ld eps = 1e-9;
const ld pi = atan2(0, -1);
const int ABC = 26;

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    int n;
    cin >> n;
    string s;
    cin >> s;
    int m;
    cin >> m;
    int* cnt_a_0 = new int[n + 1];
    cnt_a_0[0] = 0; cnt_a_0++;
    int* cnt_a_1 = new int[n + 1];
    cnt_a_1[0] = 0; cnt_a_1++;
    int* cnt_b_0 = new int[n + 1];
    cnt_b_0[0] = 0; cnt_b_0++;
    int* cnt_b_1 = new int[n + 1];
    cnt_b_1[0] = 0; cnt_b_1++;
    int* cnt = new int[n + 1];
    cnt[0] = 0; cnt++;
    rep(i, 0, n)
    {
        cnt_a_0[i] = cnt_a_0[i - 1];
        cnt_a_1[i] = cnt_a_1[i - 1];
        cnt_b_0[i] = cnt_b_0[i - 1];
        cnt_b_1[i] = cnt_b_1[i - 1];
        if (i % 2 == 0)
        {
            if (s[i] == 'a')
                cnt_a_0[i]++;
            if (s[i] == 'b')
                cnt_b_0[i]++;
        }
        else
        {
            if (s[i] == 'a')
                cnt_a_1[i]++;
            if (s[i] == 'b')
                cnt_b_1[i]++;
        }
        cnt[i] = cnt[i - 1];
        if (s[i] != '?')
            cnt[i]++;
    }
    pair<int, int>* dp = new pair<int, int>[n + 1];
    fill(dp, dp + n + 1, mp(0, 0));
    dp++;
    rep(i, m - 1, n)
    {
        dp[i] = dp[i - 1];
        if (i % 2 == 0)
        {
            if (m % 2 == 1)
            {
                if (cnt_a_1[i] - cnt_a_1[i - m] == 0 && cnt_b_0[i] - cnt_b_0[i - m] == 0)
                    dp[i] = max(dp[i], {dp[i - m].fi + 1, dp[i - m].se - (m - (cnt[i] - cnt[i - m]))});
            }
            else
            {
                if (cnt_a_0[i] - cnt_a_0[i - m] == 0 && cnt_b_1[i] - cnt_b_1[i - m] == 0)
                    dp[i] = max(dp[i], {dp[i - m].fi + 1, dp[i - m].se - (m - (cnt[i] - cnt[i - m]))});
            }
        }
        else
        {
            if (m % 2 == 0)
            {
                if (cnt_a_1[i] - cnt_a_1[i - m] == 0 && cnt_b_0[i] - cnt_b_0[i - m] == 0)
                    dp[i] = max(dp[i], {dp[i - m].fi + 1, dp[i - m].se - (m - (cnt[i] - cnt[i - m]))});
            }
            else
            {
                if (cnt_a_0[i] - cnt_a_0[i - m] == 0 && cnt_b_1[i] - cnt_b_1[i - m] == 0)
                    dp[i] = max(dp[i], {dp[i - m].fi + 1, dp[i - m].se - (m - (cnt[i] - cnt[i - m]))});
            }
        }
    }
    cout << -dp[n - 1].se << "\n";
    return 0;
}
