#pragma GCC optimize "-O1"
#pragma GCC optimize "-O2"
#pragma GCC optimize "-O3"
 
#include<bits/stdc++.h>
 
//#include "rubo.h"
#define MP make_pair
#define PB push_back
#define in int
#define ll long long
#define ull unsigned long long
#define vc vector
#define SQ(j) (j)*(j)
#define x first
#define y second
 
//#define ld long double
#define dbl long double
#define pll pair<long long,long long>
#define pii pair<int,int>
#define all(j) j.begin(), j.end()
#define loop(xxx, yyy) for(int xxx = 0; xxx < yyy; xxx++)
//#define printf(fmt, ...) (0)
//#define HOME
//#define y0 ngacaleiebinvoaeu
//#define y1 gnarpipipaigare
#define j1 adsfndnasfafoasp
 
using namespace std;
//#define printf(...) (0)
#define db(x)if(DEBUG){ cout << #x << " = " << x << endl;}
#define dbCont(x) if(DEBUG) {cout << #x << ": "; for(auto shun: x) cout << shun << ' '; cout<<endl;}
// template<class T, class Container> ostream& operator << (ostream& out, Container<T>& cont) { for(auto& elem : cont) out << elem << " "; return out; }
template<class T, class V> ostream& operator << (ostream& out, pair<T, V>& elem) { out << "{ " << elem.first << ", " << elem.second << " }"; return out; }
 
 
 
const int DEBUG = 0;
using namespace std;
const int INF = 1000 * 1000 * 1000;
const int N = 400 * 1000 + 5;
 
 
int k;
vector<set<ll>> v;
vector<ll> sums;
unordered_map<ll, int> mapping;
ll sm;
 
vector<pair<pair<int, int>, int> > possible[40000];
bool is_done[40000];
 
bool check(int ind, int mask){
    return (1 << ind) & mask;
}
 
void solve(int mask){
    
    if (mask == 0 || is_done[mask]){
        return;
    }
    is_done[mask]=true;
    db(mask);
    int ind;
    for (ind = 0; !check(ind, mask); ind++) {}
    ll my_sm = sums[ind];
    for (int e: v[ind]) {
        ll delta = sm - (my_sm - e);
        int msk = mask;
        int lst = ind;
        ll starte = e;
        db(e);
        db(ind);
        db(msk);
        db(delta);
        db(mapping.count(delta));
        vector<pair<pair<int, int> , int> > anss;
        while(msk){
            if (mapping.count(delta) == 0)
                break;
            db(mapping[delta]);
            if (mapping[delta] == ind){
                if (delta != starte)
                    break;
                msk ^= (1 << ind);
                anss.push_back(MP(MP(ind, starte), lst));
                solve(msk);
                if (!possible[msk].empty() || msk == 0){
                    for(auto curE: possible[msk]){
                        anss.push_back(curE);
                    }
                    msk = 0;
                    break;
                }
            }
 
            int nd = mapping[delta];
            db(msk);
            db(nd);
            if (check(nd, msk)){
                anss.push_back(MP(MP(nd, delta), lst));
                lst = nd;
                delta = sm - (sums[lst] - delta);
                msk ^= (1<<nd);
            } else
                break;
        }
        if(msk == 0){
            possible[mask] = anss;
            break;
        }
    }
}
 
int main() {
    cin >> k;
    v = vector<set<ll> >(k);
    sums = vector<ll>(k);
    for (int i = 0; i < k; ++i) {
        int n;
        cin >> n;
        for (int j = 0; j < n; ++j) {
            int x;
            cin >> x;
            v[i].insert(x);
            sm += x;
            sums[i] += x;
            mapping[x] = i;
        }
    }
    if (sm % k != 0){
        cout << "No" << endl;
        return 0;
    }
    sm /= k;
    int msk = (1<<k)-1;
    solve(msk);
    if (possible[msk].size() == k){
        sort(all(possible[msk]));
        cout << "Yes\n";
        for (int i = 0; i < k; ++i) {
            cout << possible[msk][i].first.second << " " << possible[msk][i].second + 1 << endl;
        }
    }
    else{
        cout << "No" << endl;
    }
    return 0;
}
 
/*
 2
 2 1 2
 1 3
 
 4
3 1 7 4
2 3 2
2 8 5
1 10
 
2
2 3 -2
2 -1 5
 
 2
2 -10 10
2 0 -20
 
 */