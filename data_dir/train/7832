#include<bits/stdc++.h>
#define lf double
#define ll long long
#define ull unsigned ll
#define ii pair<int,int>
#define il pair<int,ll>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define pll pair<ll,ll>
#define ld long int
#define heap priority_queue
#define mp make_pair
#define st first
#define nd second
#define pb push_back
#define pp pop_back
#define all(x) x.begin(),x.end()
#define len(x) strlen(x)
#define sz(x) (int) x.size()
#define orta ((bas+son)/2)
#define min3(x,y,z) min(min(x,y),z)
#define max3(x,y,z) max(max(x,y),z)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 1000000007
#define inf 1000000009
#define N 100005
#define LOG 23
#define K 1700
#define M 110005
#define EPS 0.0000001
using namespace std; 

int n,m,x,y,ans=N-1;
int si[N],ata[N],dp[N],tut[N];

int bul(int node) {

   if(node==ata[node]) return node;

   return ata[node]=bul(ata[node]);

}

bool lucky(int val) {

   while(val) {

      int rem=val%10;

      if(rem!=4 && rem!=7) return false;

      val/=10;

   }

   return true;

}

int main() {

   scanf("%d %d",&n,&m);

   for(int i=1;i<=n;i++) {

      si[i]=1;
      ata[i]=i;

   }

   for(int i=1;i<=m;i++) {

      scanf("%d %d",&x,&y);

      int atax=bul(x);
      int atay=bul(y);

      if(atax!=atay) {

         ata[atax]=atay;
         si[atay]+=si[atax];

      }

   }

   for(int i=1;i<=n;i++) {

      if(bul(i)==i) {

         tut[si[i]]++;

      }

   }

   for(int i=1;i<N;i++) {

      dp[i]=N;

   }

   for(int i=1;i<=n;i++) {

      int count=0;

      while(tut[i]) {

         int dec=1<<count;

         dec=min(dec,tut[i]);

         tut[i]-=dec;

         for(int j=n-dec*i;j>=0;j--) {

            dp[j+i*dec]=min(dp[j+i*dec],dp[j]+dec);

         }

         count++;

      }      

   }

   for(int i=1;i<=n;i++) {

      if(lucky(i)) {

         ans=min(ans,dp[i]-1);

      }

   }

   if(ans==N-1) ans=-1;

   printf("%d",ans);

}