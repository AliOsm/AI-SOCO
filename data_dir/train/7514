#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
const ll oo= 1e9+7;

const ll N=1e5+5;
vector < ll > edge[N];

ll power(ll x, ll y, ll p)
{
    ll res = 1;      // Initialize result

    x = x % p;  // Update x if it is more than or
                // equal to p

    while (y > 0)
    {
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res*x) % p;

        // y must be even now
        y = y>>1; // y = y/2
        x = (x*x) % p;
    }
    return res;
}
ll vis[N];
ll bfs(ll u)
{
    queue < ll > q;
    q.push(u);
    vis[u]=1;
    ll tot=0;
    while(!q.empty())
    {
        u= q.front();
        q.pop();
        tot++;
        for(ll i=0;i<edge[u].size();i++)
        {
            ll v= edge[u][i];
            if(vis[v]==1) continue;
            vis[v]=1;
            q.push(v);
        }
    }
    return tot;
}


int  main()
{
    ll n,k;
    cin>>n>>k;
    ll ans=power(n,k,oo);
    for(ll i=0;i<n-1;i++)
    {
        ll u,v,w;
        cin>>u>>v>>w;
        if(w==0)
        {
            edge[u].push_back(v);
            edge[v].push_back(u);
        }
    }
    for(ll i=1;i<=n;i++)
    {
        if(vis[i]==0)
        {
            ans-=power(bfs(i),k,oo);
            ans%=oo;
        }
    }
    ans+=oo;
    ans%=oo;
    cout<<ans<<endl;
}
