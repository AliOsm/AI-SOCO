//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
typedef long long ll;
const double pi = acos(-1);
const ll MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e5 + 5;
const double eps = 1e-9;
using namespace std;
vi pr[MAXN];
int cnt[MAXN], vis[MAXN], a[MAXN];
ll pw[205][MAXN];

int main()
{
    int n;
    ni(n);
    nai(a, n);
    for (ll i = 1; i <= 200; i++)
    {
        pw[i][0] = 1;
        for (int j = 1; j < MAXN; j++)
            pw[i][j] = pw[i][j - 1] * i % MOD;
    }
    for (int i = 0; i < n; i++)
        vis[a[i]]++;
    for (int k = 1; k < MAXN; k++)
    {
        for (int i = 1; i * i <= k; i++)
            if (k % i == 0)
            {
                cnt[k] += 1 + (i * i != k);
                pr[k].pb(i);
                if (i * i != k)
                    pr[k].pb(k / i);
            }
        sort(pr[k].begin(), pr[k].end());
        vis[k] += vis[k - 1];
    }
    int ans = 1;
    for (int mx = 2; mx < MAXN; mx ++)
    {
        ll cur = 1;
        for (int j = 0; j < cnt[mx] - 1; j++)
        {
            int tmp = vis[pr[mx][j + 1] - 1] - vis[pr[mx][j] - 1];
            cur = cur * pw[j + 1][tmp] % MOD;
        }
        int tmp = n - vis[pr[mx].back() - 1];
        cur = (cur * (pw[cnt[mx]][tmp] - pw[cnt[mx] - 1][tmp] + MOD)) % MOD;
        ans = (ans + cur) % MOD;
    }
    pri(ans);
    return 0;
}
