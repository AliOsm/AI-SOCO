#include<cstdio>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;
const int maxn = 100010;
struct node {
    int v, id;
    bool operator < (const node& cmp) const {
        return v < cmp.v;
    }
}in[maxn];
int ind[maxn*3];
vector<int> edge[maxn*3];
int main()
{
    int n , m , k = 0;;
    scanf("%d%d",&n,&m);
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            scanf("%d",&in[j].v);
            in[j].id  = j;
        }
        sort(in,in+m);
        for(int j = 0; j < m; j++) if(in[j].v != -1)
        {
            if(j == 0 || in[j].v != in[j-1].v) k ++;
            edge[in[j].id].push_back(m+k);
            edge[m+k-1].push_back(in[j].id);
            //printf("%d %d\n",in[j].id,m+k);
        }
        k ++;
        //puts("");
    }   
    for(int i = 0; i < m+k; i++)  for(int j = 0; j < edge[i].size(); j++) ++ind[edge[i][j]];
    queue<int> Q;
    for(int i = 0; i < m+k; i++) if(ind[i] == 0) Q.push(i);
    vector<int> ans;
    while(!Q.empty())
    {
        int h = Q.front() ; Q.pop();
        if(h < m) ans.push_back(h);
        for(int i = 0; i < edge[h].size(); i++) if((--ind[edge[h][i]])==0) Q.push(edge[h][i]);
    }
    if(ans.size() < m) puts("-1");
    else for(int i = 0; i < ans.size(); i++) printf("%d ",ans[i]+1);
    return 0;
}