#include <bits/stdc++.h>
using namespace std;

class segtree {
	public:
		struct node {
			long long ad = 0, ma = 0;
			void apply(int l, int r, long long v) {
				ad += v;
				ma += v;
			}
		};
		node unite(const node &a, const node &b) const {
			node res;
			res.ma = max(a.ma, b.ma);
			return res;
		}
		inline void push(int x, int l, int r) {
			int y = (l + r) >> 1;
			int z = x + ((y - l + 1) << 1);
			if (tree[x].ad != 0) {
				tree[x + 1].apply(l, y, tree[x].ad);
				tree[z].apply(y + 1, r, tree[x].ad);
				tree[x].ad = 0;
			}
		}
		inline void pull(int x, int z) {
			tree[x] = unite(tree[x + 1], tree[z]);
		}
		int n;
		vector<node> tree;
		void build(int x, int l, int r) {
			if (l == r) {
				return;
			}
			int y = (l + r) >> 1;
			int z = x + ((y - l + 1) << 1);
			build(x + 1, l, y);
			build(z, y + 1, r);
			pull(x, z);
		}
		template <typename M>
			void build(int x, int l, int r, const vector<M> &v) {
				if (l == r) {
					tree[x].apply(l, r, v[l]);
					return;
				}
				int y = (l + r) >> 1;
				int z = x + ((y - l + 1) << 1);
				build(x + 1, l, y, v);
				build(z, y + 1, r, v);
				pull(x, z);
			}
		node get(int x, int l, int r, int ll, int rr) {
			if (ll <= l && r <= rr) {
				return tree[x];
			}
			int y = (l + r) >> 1;
			int z = x + ((y - l + 1) << 1);
			push(x, l, r);
			node res{};
			if (rr <= y) {
				res = get(x + 1, l, y, ll, rr);
			} else {
				if (ll > y) {
					res = get(z, y + 1, r, ll, rr);
				} else {
					res = unite(get(x + 1, l, y, ll, rr), get(z, y + 1, r, ll, rr));
				}
			}
			pull(x, z);
			return res;
		}
		template <typename... M>
			void modify(int x, int l, int r, int ll, int rr, const M&... v) {
				if (ll <= l && r <= rr) {
					tree[x].apply(l, r, v...);
					return;
				}
				int y = (l + r) >> 1;
				int z = x + ((y - l + 1) << 1);
				push(x, l, r);
				if (ll <= y) {
					modify(x + 1, l, y, ll, rr, v...);
				}
				if (rr > y) {
					modify(z, y + 1, r, ll, rr, v...);
				}
				pull(x, z);
			}
		segtree() {}
		segtree(int _n) : n(_n) {
			assert(n > 0);
			tree.resize(2 * n - 1);
			build(0, 0, n - 1);
		}
		template <typename M>
			segtree(const vector<M> &v) {
				n = v.size();
				assert(n > 0);
				tree.resize(2 * n - 1);
				build(0, 0, n - 1, v);
			}
		node get(int ll, int rr) {
			assert(0 <= ll && ll <= rr && rr <= n - 1);
			return get(0, 0, n - 1, ll, rr);
		}
		node get(int p) {
			assert(0 <= p && p <= n - 1);
			return get(0, 0, n - 1, p, p);
		}
		template <typename... M>
			void modify(int ll, int rr, const M&... v) {
				assert(0 <= ll && ll <= rr && rr <= n - 1);
				modify(0, 0, n - 1, ll, rr, v...);
			}
};
int main() {
	ios::sync_with_stdio(false);
	cin.tie(nullptr);
	int n, m, p;
	cin >> n >> m >> p;
	vector< pair<int, int> > a(n), b(m);
	for (auto &[x, y] : a) {
		cin >> x >> y;
	}
	for (auto &[x, y] : b) {
		cin >> x >> y;
		x--;
	}
	vector< tuple<int, int, int> > c(p);
	for (auto &[x, y, z] : c) {
		cin >> x >> y >> z;
	}
	sort(a.begin(), a.end());
	sort(b.begin(), b.end());
	sort(c.begin(), c.end());
	segtree seg(m);
	for (int i = 0; i < m; i++) {
		seg.modify(i, i, -b[i].second);
	}
	long long ans = numeric_limits<long long>::min();
	for (int i = 0, j = 0; i < n; i++) {
		for (; j < p; j++) {
			if (a[i].first <= get<0>(c[j])) {
				break;
			}
			int low = 0, high = m;
			while (low < high) {
				int mid = (low + high) >> 1;
				if (b[mid].first >= get<1>(c[j])) {
					high = mid;
				} else {
					low = mid + 1;
				}
			}
			if (low == m) continue;
			seg.modify(low, m - 1, get<2>(c[j]));
		}
		ans = max(ans, -a[i].second + seg.get(0, m - 1).ma);
	}
	cout << ans << '\n';
	return 0;
}