#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define ll long long
#define sz(s) int(s.size())
#define ull unsigned long long
#define sc(s) scanf("%d",&s)
#define pr(s) printf("%d ",s)
#define all(s) s.begin(),s.end()
#define start ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;

const int MAXN = 1e5 + 256;
const char nxt = '\n';
inline void in (string Q) {Q += ".in";freopen (Q.c_str(), "r", stdin);}
inline void out (string Q) {Q += ".out";freopen (Q.c_str(), "w", stdout);}
inline void open_file (string Q) {in (Q);out (Q);}
inline bool Pal (const string& s) {
	return equal(s.begin(), s.end(), s.rbegin());
}
vector < string > taxi, pizza, frienD;
string change (string &X) {
	string ret = "";
	for (auto to : X)
		if (to != '-')
			ret.pb (to);
	return ret;
}
int check (string x) {
	x = change (x);
	if (sz (x) != 6)
		return 2;
	string cur = "";
	cur += x[0];
	for (auto to : x) {
		if (to != cur.back ())
			cur.pb (to);
	}
	if (sz (cur) == 1)
		return 1;
	cur = x;
	sort (all (cur));
	reverse (all (cur));
	char last = '.';
	bool ok = 1;
	for (auto to : cur) {
		if (to == last) {
			ok = 0;
			break;
		}
		last = to;
	}
	if (cur == x && ok)
		return 0;
	return 2;
}
map < string, int > M[10], tax, piz, fr;
vector < string > nm;

int main () {
	start
	#ifdef accepted
		in ("");
	#endif
	if (0)
		open_file ("");
	int n; cin >> n;

	while (n--) {
		int kol; string name, phone; cin >> kol >> name;
		nm.pb (name);
		M[0][name] = M[1][name] = M[2][name] = 0;
		while (kol--) {
			cin >> phone;
			int D = check (phone);
			M[D][name]++;
//			cout << name << ' '<< D << ' '<<M[D][name] << nxt;
		}
	}
	for (int i = 0; i < 3; ++i) {
		int mx = 0;
		for (auto to : M[i]) {
		    mx = max (mx, to.second);
		}
		//cout << mx << ' '<< i << nxt;
		if (!mx) {
			for (auto it : nm) {
				if (!tax[it] && i == 1) { tax[it] = 1; taxi.pb (it); } if (!piz[it] && !i) { pizza.pb (it);  piz[it] = 1; } if (!fr[it] && i == 2) { fr[it] = 1; frienD.pb (it);}
			}
			continue;
		}
		if (i == 1) {
			for (auto it : nm) {
				for (auto to : M[i]) {
					if (to.second == mx && it == to.first && !tax[it]) {
						taxi.pb (it); tax[it] = 1; }
				}
			}
		}
		if (i == 0) {
			for (auto it : nm) {
				for (auto to : M[i]) {
					if (to.second == mx && it == to.first && !piz[it]) {
						pizza.pb (it); piz[it] = 1; }
				}
			}
		}
		if (i == 2) {
			for (auto it : nm) {
				for (auto to : M[i]) {
					if (to.second == mx && it == to.first && !fr[it]) {
						frienD.pb (it); fr[it] = 1; }
				}
			}
		}
	}
	cout << "If you want to call a taxi, you should call:";
	string ans = "";
	for (auto to : taxi)
		ans += " " + to + ",";
	ans.pop_back ();
	ans += ".";
	cout << ans;
	ans = "";
	cout << nxt << "If you want to order a pizza, you should call:";
	for (auto to : pizza)
		ans += " " + to + ",";
	ans.pop_back ();
	ans += ".";
	cout << ans;
	ans = "";
	cout << nxt << "If you want to go to a cafe with a wonderful girl, you should call:";
	for (auto to : frienD)
		ans += " " + to + ",";
	ans.pop_back ();
	ans += ".";
	cout << ans;
	return 0;
}