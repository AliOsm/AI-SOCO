#include <bits/stdc++.h>
using namespace std;
#define INF 1e18
#define ll long long
#define pi pair<ll, ll>
#define pii pair<int, pi>
#define fr first
#define sc second

vector <vector <pi> > vc;
vector <bool> vis;
vector <pi> path;
vector <ll> road;

ll Dijkstra(ll src, ll goal)
{
    priority_queue <pi, vector <pi>, greater <pi> > pq;
    pq.push({0,src});
    while(!pq.empty())
    {
        pi p = pq.top(); pq.pop();
        ll node = p.sc, cost = p.fr;
        if(node == goal)  return cost;
        if(vis[node]) continue;
        vis[node] = 1;
        for(int i=0;i<vc[node].size();i++)
        {
            ll child = vc[node][i].sc, weight = vc[node][i].fr;
            if(!vis[child])
            {
                if(path[child].sc > weight + cost)
                {
                    path[child].fr = node;
                    path[child].sc = weight + cost;
                }
                pq.push({weight + cost, child});
            }
        }
    }
    return -1;
}

int main()
{
    ll n,m;
    cin >> n >> m;
    vc.resize(n+1); vis.resize(n+1); path.resize(n+1,{INF, INF});
    for(ll i=0;i<m;i++)
    {
        ll x,y,z;
        cin >> x >> y >> z;
        vc[x].push_back({z,y});
        vc[y].push_back({z,x});
    }
    ll res = Dijkstra(1,n);
    if(res + 1)
    {
        ll index = n;
        while(index != 1)
        {
            road.push_back(index);
            index = path[index].fr;
        }
        cout << "1 ";
        for(int i=road.size()-1;i>=0;i--)
            cout << road[i] << " ";
    }
    else
        cout << res;

    return 0;
}