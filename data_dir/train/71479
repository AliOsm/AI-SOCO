#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define read(x) scanf( "%lld" , &x )
#define forq(i , a , b) for (int i = (a); i <= (b); ++i)
#define forr(i , b) forq( i , 0 , b - 1 )
#define carr( n , array ) forr(i , n) read(array[i])
#define coutarr(n , array ) cout << "\n" ; forr (i , n) printf("%lld " , array[i]) ; cout << "\n" ;
#define F first
#define S second
#define IF ->first
#define IS ->second
#define qqmemset(array , val) memset (array , val , sizeof(array))
#define ALLV(vect) vect.begin() , vect.end()
#define sizee(vec) (ll)vec.size()

ll R = 7 + 1e9 , NUMTESTCASE ;
const int NN = 10 + 1e5 ;
const double pi = acos(-1.0) ;
int di [4] = {1 , 0 , -1 , 0} , dj [4] = {0 , 1 , 0 , -1} , DI [8] = {1 , 1 , 0 , -1 , -1 , -1 , 0 , 1} , DJ [8] = {0 , 1 , 1 , 1 , 0 , -1 , -1 , -1} ;
using namespace std;
vector <ll> primes ;
bool PPP [(ll) 1e7 + 1] ;
void PPPRIMES () {
    qqmemset(PPP , true) ;
    for (ll p = 2 ; p * p <= (ll) 1e7 ; p++)
        if (PPP[p])
        for (int i = p * p ; i <= (ll) 1e7 ; i += p) PPP[i] = false ;
    forq (i , 2 , (ll) 1e7) if (PPP[i]) primes.pb(i) ;
}
void solve (map <ll , ll> &a) {
    if (a.size () == 3 || !a.size()) return ;
    if (a.size () == 1) {
        if (a.begin() IS < 6) return ;
        ll flag2 = 1 , flag = a.begin() IF ;
        a[flag] -= 5 ;
        a[flag * flag * flag] = 1 ;
        a[flag * flag] = 1 ;
        while (a[flag]--) {
            flag2 *= flag ;
        }
        a.erase (a.find(flag)) ; a[flag2] = 1 ;
        return ;
    }
    for (auto &it : a) {
        if (it.S >= 3) {
            a[it.F * it.F] = 1 ;
            a[it.S] -= 2 ;
            break ;
        }
    }
    vector <ll> er ;
    for (auto &it : a) {
        if (it.S == 1) continue ;
        ll x = 1 ;
        while (it.S --) x *= it.F ;
        er.pb(it.F) ; a[x] = 1 ;
    }
    for (auto it : er) {
        a.erase(a.find(it)) ;
    }
}
int main()
{
    PPPRIMES() ;
    ios_base::sync_with_stdio(false); cin.tie(NULL);
    for (cin >> NUMTESTCASE ; NUMTESTCASE ; NUMTESTCASE --) {
        ll x ; cin >> x ;
        set <ll> ans ;
        for (auto it : primes) {
            if (ans.size() == 2 || it > x) break ;
            if (x % it == 0) {
                ans.insert(it) ;
                x /= it ;
                if ( ans.size() == 1 && x % (it * it) == 0 ) {
                    ans.insert(it * it) ;
                    x /= it ; x /= it ;
                }
            }
        }
        if (x != 1) ans.insert(x) ;
        if (ans.size() != 3) {cout << "NO" << endl ; continue ;}
        cout << "YES" << endl ;
        for (auto it : ans) cout << it << " " ;
        cout << endl ;
    }
    return 0;
}
