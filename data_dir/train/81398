#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

class connection {
	public:
	
	int dest;
	LL len;
	bool isRailway;
	
	connection(int dest, LL len, bool isRailway) {
		this->dest = dest;
		this->len = len;
		this->isRailway = isRailway;
	}
};

bool sortConnection(connection &c1, connection &c2) {
	if (c1.len != c2.len) return c1.len > c2.len;
	return !c2.isRailway;
}

class way {
	public:
	int from, to, len;
	bool isRailway;
	
	int getDest(int f) {
		return f == from ? to : from;
	}
};

vector<way> ways_all;

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(int, m);
	next(int, k);
	
	vector<vector<int>> ways(n);
	while (m --> 0) {
		next(int, u); u--;
		next(int, v); v--;
		next(int, x);
		
		ways[u].push_back(ways_all.size());
		ways[v].push_back(ways_all.size());
		
		way w;
		w.from = u;
		w.to = v;
		w.len = x;
		w.isRailway = false;
		ways_all.push_back(w);
	}
	while (k --> 0) {
		int u = 0;
		next(int, v); v--;
		next(int, x);
		
		ways[u].push_back(ways_all.size());
		ways[v].push_back(ways_all.size());
		
		way w;
		w.from = u;
		w.to = v;
		w.len = x;
		w.isRailway = true;
		ways_all.push_back(w);
	}
	
	vector<LL> minDist(n, LongMaxVal);
	int res = 0;
	
	vector<connection> q = { connection(0, 0, false) };
	
	while (q.size()) {
		pop_heap(all(q), sortConnection);
		auto con = q.back();
		q.pop_back();
		
		if (LongMaxVal == minDist[con.dest]) {
			minDist[con.dest] = con.len;
			for (auto ei : ways[con.dest]) {
				int nextDest = ways_all[ei].getDest(con.dest);
				LL nextLen = con.len + ways_all[ei].len;
				if (minDist[nextDest] == LongMaxVal) {
					q.push_back( connection(nextDest, nextLen, ways_all[ei].isRailway) );
					push_heap(all(q), sortConnection);
				} 
			}
		} else if (con.isRailway) res++;
	}
	
	cout << res;
}