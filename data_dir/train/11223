#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <cstdio>
#include <string>
#include <stdlib.h>
#include <set>
#include <vector>
#include <list>
#include <algorithm>
#include <regex>
#include <math.h>
#include <map>
#include <iterator>
#include <climits>
#include <numeric>
#include <bitset>
#include <unordered_map>
#include <unordered_set>
#include <iomanip>
#include <queue>
#include <deque>
#include <stack>
#include <array>
#include <valarray>
#include <complex>
#include <random>

using namespace std;

typedef array<int, 2> hv;
typedef int integer;
#define int long long
#define double long double
#define make(type, x) type x; cin>>x
#define make2(type, x, y) type x, y; cin>>x>>y
#define make3(type, x, y, z) type x, y, z; cin>>x>>y>>z
#define make4(type, x, y, z, q) type x, y, z, q; cin>>x>>y>>z>>q
#define ALL(x) (x).begin(), (x).end()
#define FORIT(p) for(auto it = p.begin(); it != p.end(); it++)
#define FOR(b) for(int i = 0; i <(b); i++)
#define VI vector<int>
#define VVI vector<vector<int>>
#define PII pair<int, int>
#define PPII pair<PII, int>
#define M7 1000000007l
#define M9 1000000009l
#define make_v(a, n) VI a(n); FOR(n) cin >> a[i];
#define get_bit(mask, pos) ((mask >> pos) & 1)
#define set_bit_0(mask, pos) (mask & (~(1 << pos)))
#define set_bit_1(mask, pos) (mask | (1 << pos))




void Solve() {
	make3(int, a, b, m);
	make3(int, x, y, z);
	double t = (m + 0.0l) / -y;
	double dx = x * t + (a + 0.0l) / 2;
	double dz = z * t;
	dx = dx - 2*a * floorl(dx / (2 * a));
	dz = dz - 2*b * floorl(dz / (2 * b));
	if (dx > a) dx = 2 * a - dx;
	if (dz > b) dz = 2 * b - dz;
	cout << setprecision(10) << fixed<< dx << ' ' << dz;
}


integer main() {
	ios_base::sync_with_stdio(0);
	cin.tie();
#if  _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	Solve();
	while (!cin.eof()) {
		string s = "_";
		do getline(cin, s);
		while (!cin.eof() && !s.empty());
		if (cin.eof()) return 0;
		FOR(2) cout << endl;
		Solve();
	}
#else
	Solve();
#endif
	return 0;
}