#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <sstream>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <map>
#include <algorithm>

#include <cassert>

using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
typedef pair<PII, int> PII2;
typedef vector<int> VI;
typedef vector<VI> VVI;

template<class T1, class T2>
ostream& operator << (ostream &out, pair<T1, T2> pair) {
return out << "(" << pair.first << ", " << pair.second << ")"; }

#define DEBUGGER // show debugging message
#ifdef DEBUGGER // require C11 (g++ -O2 -std=gnu++0x -Wall -Wshadow)
template <class T>
void _printcoll (T const& coll){ int first = 1; cout << "[";
for (auto a : coll) { if (!first) printf(", "); cout << a; first = false; } cout << "]" << endl; }
template <class T>
void _printcoll (T const& coll, int len){ int first = 1; cout << "[";for (auto a : coll) {
if (!first) printf(", "); cout << a; first = false; len--; if (!len) break; } cout << "]" << endl; }
#define DBG(vari) cout<<#vari<<" = "<<(vari)<<endl;
#define DBGC(vari) cout<<#vari<<" = ";_printcoll(vari);
#define DBGCN(vari, len) cout<<#vari<<" = ";_printcoll(vari, len);
#else
#define DBG(vari)
#define DBGC(vari)
#define DBGCN(vari, len)
#endif

double dist(PII a, PII b) {
    double dx = a.first - b.first;
    double dy = a.second - b.second;
    return sqrt(dx * dx + dy * dy);
}
PII points[20000];
int main() {
    int X, Y;
    cin >> X >> Y;
    if (X > 0 && Y > 0) {
        PII a1 = PII(0, Y);
        PII a2 = PII(X, 0);
        int sz = 0;
        for (int i = 0; i <= X && i < 10; i++) {
            for (int j = Y; j >= 0 && j > Y - 10; j--) {
                points[sz++] = PII(i, j);
            }
        }
        for (int i = X; i >= 0 && i > X - 10; i--) {
            for (int j = 0; j <= Y && j < 10; j++) {
                points[sz++] = PII(i, j);
            }
        }
        PII a3, a4;
        double maxx = -1;
        PII s1, s2, s3, s4;
        for (int i = 0; i < sz; i++) {
            for (int j = i + 1; j < sz; j++) {
                PII a = points[i];
                PII b = points[j];
                if (a == b) continue;
                if (a == a1 || a == a2) continue;
                if (b == a1 || b == a2) continue;
                PII x[] = {a1, a2, a, b};
                sort(x, x + 4);
                do {
                    double temp = dist(x[0], x[1]) + dist(x[1], x[2]) + dist(x[2], x[3]);
                    if (temp > maxx) {
                        maxx = temp;
                        s1 = x[0], s2 = x[1], s3 = x[2], s4 = x[3];
                    }
                } while (next_permutation(x, x + 4));
            }
        }
        printf("%d %d\n%d %d\n%d %d\n%d %d\n", s1.first, s1.second, s2.first, s2.second, s3.first, s3.second, s4.first, s4.second);
    } else if (X == 0) {
        printf("%d %d\n%d %d\n%d %d\n%d %d\n", 0, 1, 0, Y, 0, 0, 0, Y - 1);
    } else {
        printf("%d %d\n%d %d\n%d %d\n%d %d\n", 1, 0, X, 0, 0, 0, X - 1, 0);
    }

        

    
    return 0;
}
