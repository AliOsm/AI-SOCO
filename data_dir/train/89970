#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
map<ll,ll> dp1;
ll solve(ll x)
{
  if(x <= 1)return 1;
  if(dp1.count(x))return dp1[x];
  return dp1[x] = 2*solve(x/2) + 1;
}

ll solve2(ll x,ll l,ll r)
{
  if(x == 0)return 0;
  if(x == 1)return 1;

  if(r <= solve(x/2))return solve2(x/2,l,r);
  else if(r == solve(x/2) + 1)
  {
    ll ret = x%2;
    if(l<=solve(x/2))ret+=solve2(x/2,l,r-1);
    return ret;
  }
  else 
  {
    ll ret = 0;
    if(l <= solve(x/2) + 1)ret+= x%2;
    if(l <= solve(x/2))ret+= solve2(x/2,l,solve(x/2));
    ret+= solve2(x/2,max(1LL,l - solve(x/2) - 1),r - solve(x/2) - 1);
    return ret;
  }
}


int main()
{
  finp;
  ll n,l,r;
  cin>>n>>l>>r;
  
  cout<<solve2(n,l,r);
  
return 0;
}