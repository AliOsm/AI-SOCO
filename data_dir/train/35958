#include <bits/stdc++.h>
// #pragma GCC optimize ("Ofast")
// #pragma GCC target ("sse4")
// #pragma GCC optimize ("unroll-loops")
#define ll          long long
#define ld          long double
#define pb          push_back
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        998244353
#define endl        '\n'
using namespace std;
vector<pii> adj[300005];
int mini[300005],disc[300005],t,A[300005],d[300005];
pii edges[300005];
bool bridge[300005];
void dfs(int u,int p,int i){
    t++;
    mini[u]=disc[u]=t;
    for(auto x:adj[u])
        if(x.F!=p){
            if(disc[x.F])
                mini[u]=min(mini[u],disc[x.F]);
            else{
                dfs(x.F,u,x.S);
                mini[u]=min(mini[u],mini[x.F]);
            }
        }
    if(p and mini[u]>disc[p])
        bridge[i]=1;
}
int Find(int x){
    int root=x,tmp;
    while(A[root]>0)
        root=A[root];
    while(x!=root){
        tmp=A[x];
        A[x]=root;
        x=tmp;
    }
    return root;
}
void Union(int x,int y){
    x=Find(x),y=Find(y);
    if(x==y)
        return;
    if(A[x]>A[y])
        swap(x,y);
    A[x]+=A[y];
    A[y]=x;
}
void dfs1(int u,int p){
    d[u]=d[p]+1;
    for(auto x:adj[u])
        if(x.F!=p)
            dfs1(x.F,u);
}
int main(){
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n,m,u,v,i,maxi;
    cin>>n>>m;
    for(i=0;i<m;i++){
        cin>>u>>v;
        edges[i]={u,v};
        adj[u].pb({v,i});
        adj[v].pb({u,i});
    }
    dfs(1,0,0);
    for(i=1;i<=n;i++){
        A[i]=-1;
        adj[i].clear();
    }
    for(i=0;i<m;i++)
        if(!bridge[i])
            Union(edges[i].F,edges[i].S);
    for(i=0;i<m;i++)
        if(bridge[i]){
            u=edges[i].F;
            v=edges[i].S;
            u=Find(u);
            v=Find(v);
            adj[u].pb({v,0});
            adj[v].pb({u,0});
        }
    dfs1(Find(1),0);
    for(i=1,maxi=0;i<=n;i++)
        if(d[i]>d[maxi])
            maxi=i;
    dfs1(maxi,0);
    for(i=1,maxi=0;i<=n;i++)
        if(d[i]>d[maxi])
            maxi=i;
    cout<<d[maxi]-1;
    return 0;
}