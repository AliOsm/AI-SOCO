#include<bits/stdc++.h>
#include<map>
using namespace std;
#define ll long long
#define mk(a,b) make_pair(a,b)
//#define pb push_back
#define pii pair<int ,int >
#define pli pair<ll,int>
#define INF 1ll<<40
#define MOD 1000000007
#define MAX 4*(int)1e5+5
#define FI freopen("in.txt","r",stdin);
#define FO freopen("out.txt","w",stdout);
#define edge pair<pair<int,int>,int>
//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
ll n, m, k, q;
vector<int>v;
int main() {
	cin >> n >> k;
	v.resize(n);
	int neg = 0;
	int a = -1;
	for (int i = 0; i < n; i++) {
		cin >> v[i];
		if (v[i] < 0) {
			if (a == -1)a = i;
			neg++;
		}

	}
	if (neg == 0)cout << 0 << endl;
	else if (k < neg)
		cout << -1 << endl;
	else {
		priority_queue < pii, vector<pii>, greater<pii>> pq;
		int en = a + 1, len = 0;
		bool pos = 0;
		while (a < n&&en < n) {
			if (a == en)en++;
			else if (v[en] < 0 && pos) {
				pq.push({ len,a });
				a = en;
				en++;
				len = 0;
				pos = 0;
			}
			else if (v[en] >= 0) {
				len++;
				pos = 1;
				en++;
			}
			else a = en, en++;
		}
		
		k -= neg;
		while (k && !pq.empty()) {
			pii p = pq.top();
			pq.pop();
			if (k >= p.first) {
				int cnt = 0;
				for (int i = p.second; i <= p.second + p.first; i++) {
					cnt += v[i] >= 0;
					v[i] = -1;
				}
				k -= p.first;
			}
			else break;

		}
		if (a != n - 1 && pos)
		{
			if (k >= len) {
				for (int i = a; i <= a + len; i++) {
					v[i] = -1;
				}
			}
			else {

			}
		}
		pos = 1;
		int total = 0;
		for (int i = 0; i < n; i++) {
			if (v[i] < 0 && pos) {
				pos = 0;
				total++;
			}
			else if (v[i] < 0 && !pos) {
				continue;
			}
			else if (v[i] >= 0 && pos) {
				continue;;
			}
			else {
				pos = 1;
				total++;
			}

		}
		cout << total << endl;
	}
	return 0;
}