/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskB {
private:
    bool test(const vector<string>& grid) {
        for (int i = 0; i < 10; ++i) {
            for (int j = 0; j + 4 < 10; ++j) {
                bool is = true;
                for (int k = j; k < j + 5; ++k) {
                    if (grid[i][k] != 'X') {
                        is = false;
                    }
                }
                if (is) {
                    return true;
                }
            }
        }
        for (int i = 0; i + 4 < 10; ++i) {
            for (int j = 0; j < 10; ++j) {
                bool is = true;
                for (int k = i; k < i + 5; ++k) {
                    if (grid[k][j] != 'X') {
                        is = false;
                    }
                }
                if (is) {
                    return true;
                }
            }
        }
        for (int i = 0; i + 4 < 10; ++i) {
            for (int j = 0; j + 4 < 10; ++j) {
                bool is = true;
                for (int k = 0; k < 5; ++k) {
                    if (grid[i + k][j + k] != 'X') {
                        is = false;
                    }
                }
                if (is) {
                    return true;
                }
            }
        }
        for (int i = 0; i + 4 < 10; ++i) {
            for (int j = 4; j < 10; ++j) {
                bool is = true;
                for (int k = 0; k < 5; ++k) {
                    if (grid[i + k][j - k] != 'X') {
                        is = false;
                    }
                }
                if (is) {
                    return true;
                }
            }
        }
        return false;
    }
public:
    void solve(istream& in, ostream& out) {
        vector<string> grid(10);
        for (int i = 0; i < 10; ++i) {
            in >> grid[i];
        }
        
        for (int i = 0; i < 10; ++i) {
            for (int j = 0; j < 10; ++j) {
                if (grid[i][j] == '.') {
                    grid[i][j] = 'X';
                    if (test(grid)) {
                        out << "YES\n";
                        return;
                    }
                    grid[i][j] = '.';
                }
            }
        }
        out << "NO\n";
    }
};


int main() {
	std::ios::sync_with_stdio(false); cin.tie(nullptr);

	TaskB solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
