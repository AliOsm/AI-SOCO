#include<bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define PB push_back
#define all(x) x.begin(), x.end()

typedef long long ll; 
typedef double ld;

const int N = 100 + 10, M = 1000 + 10; 

ld dp[N][N][M];
pair<int, int> p[N];
int n;
ld c, T, t = 10.0 / 9.0;

void solve()
{
	cin>> n;
	cin>> c >> T;
	for(int i = 1; i <= n; i++)
		cin>> p[i].F >> p[i].S;
	sort(p+1, p+n+1);
	for(int i = 0; i <= n; i++) for(int j = 0; j <= n; j++) for(int k = 0; k <= n * 10; k++) dp[i][j][k] = 1e18;
	dp[0][0][0] = 0;
	for(int i = 1; i <= n; i++) for(int j = 0; j <= i; j++) for(int k = 0; k <= j * 10; k++) 
	{
		dp[i][j][k] = dp[i-1][j][k];
		if(k<p[i].S || !j) continue;
		dp[i][j][k] = min(dp[i][j][k], dp[i-1][j-1][k-p[i].S] * t + p[i].F * t);
	}
	int ans = 0;
	for(int j = 1; j <= n; j++) for(int k = 0; k <= j * 10; k++)
	{
		if(k<=ans) continue;
		ld val = dp[n][j][k];
		ld l = 0, r = T;
		bool f = 0;
		for(int _ = 0; _ < 70; _++)
		{
			ld mid1 = (2*l+r) / 3;
			ld mid2 = (l+2*r) / 3;
			ld x1 = val - (T-mid1-10.0*j) * (1+c*mid1);
			ld x2 = val - (T-mid2-10.0*j) * (1+c*mid2);
			if(min(x1, x2) < 0)
			{
				f = 1;
				break;
			}
			if(x1 < x2)
				r = mid2;
			else
				l = mid1;
		}
		if(f) ans = max(ans, k);
	}	
	cout<< ans << '\n';
}

int32_t main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	int t;
	cin>> t;
	while(t--)
		solve();
}
