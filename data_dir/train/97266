#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

// Order Statistic Tree

/* Special functions:

        find_by_order(k) --> returns iterator to the kth largest element counting from 0
        order_of_key(val) --> returns the number of items in a set that are strictly smaller than our item
*/

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>
ordered_set;

const int MAXN = 1003;
int a[MAXN][MAXN];

ordered_set rost[MAXN];
ordered_set cost[MAXN];

int solve(int x, int y)
{
    int i1 = 1+rost[x].order_of_key(a[x][y]);
    int i2 = 1+cost[y].order_of_key(a[x][y]);
    int s1 = rost[x].size(), s2 = cost[y].size();
    int ans = max(s1, s2);
    if (i1 < i2) {
        swap(i1, i2);
        swap(s1, s2);
    }
    ans = max(ans, i1+s2-i2);
    return ans;
}

int main(void)
{
    std::ios::sync_with_stdio(false);
    cin.tie(0);

    int n, m;
    cin >> n >> m;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> a[i][j];
            rost[i].insert(a[i][j]);
            cost[j].insert(a[i][j]);
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cout << solve(i, j) << " ";
        }
        cout << "\n";
    }


    return 0;
}

