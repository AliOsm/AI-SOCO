#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> pii;
#define pb push_back 
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz(v) (int((v).size()))
const ll INF = 1e18;
const int MOD = 1e9+7;
const int N = 100;
int grid[6][N];
vector<int> _id, _r, _c;
void move_car(int r1, int c1, int r2, int c2){
	if(grid[r1][c1] == 0)
		return;
	_id.pb(grid[r1][c1]);
	_r.pb(r2);
	_c.pb(c2);
	if(r2 == 1 || r2 == 4)
		grid[r1][c1] = 0;
	else
		swap(grid[r1][c1],grid[r2][c2]);
}
int n,k;
void trivial(){
	for(int i = 1; i <= n; ++i){
		if(grid[1][i] == grid[2][i])
			move_car(2,i,1,i);
		if(grid[4][i] == grid[3][i])
			move_car(3,i,4,i);
	}
}
int main(){
	cin >> n >> k;
	for(int i = 1; i <= 4; ++i)
		for(int j = 1; j <= n; ++j){
			cin >> grid[i][j];
			if(i != 2 && i != 3 && grid[i][j] == 0)
				grid[i][j] = -1;
		}
	trivial();
	int sr = -1, sc;
	for(int i = 1; i <= n; ++i){
		if(grid[2][i] == 0){
			sr = 2;
			sc = i;
		}
		if(grid[3][i] == 0){
			sr = 3;
			sc = i;
		}
	}
	if(sr == -1){
		puts("-1");
		return 0;
	}
	for(int times = 0; times < 2*n-1; ++times){
		for(int inner = 0; inner < 2*n-1; ++inner){
			if(sr == 2){
				if(sc == n){
					move_car(3,n,2,n);
					sr = 3;
				}
				else{
					move_car(sr,sc+1,sr,sc);
					sc = sc+1;
				}
			}
			else
				if(sc == 1){
					move_car(2,1,3,1);
					sr = 2;
				}
				else{
					move_car(sr,sc-1,sr,sc);
					sc = sc-1;
				}
		}
		trivial();
	}
	cout << _id.size() << '\n';
	for(int i = 0; i < _id.size(); ++i)
		cout << _id[i] << ' ' << _r[i] << ' ' << _c[i] << '\n';
}

