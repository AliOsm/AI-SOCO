#include <stdio.h>
#include <iostream>
#include <vector>
#include <assert.h>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <stack>
#include <string>
#include <sstream>
#include <memory.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;
typedef long long ll;
const int N = 100001;
int n, m, h, dfs, low[N], idx[N], t[N];
vector<vector<int> > g, G;
vector<vector<int> > cs;
int comp[N];
vector<int> S;
bool vis[N];
void DFS(int u) {
	idx[u] = low[u] = ++dfs;
	vis[u] = true;
	S.push_back(u);
	for (int i = 0; i < g[u].size(); ++i) {
		int v = g[u][i];
		if (!idx[v])
			DFS(v);
		if (vis[v])
			low[u] = min(low[u], low[v]);
	}
	if (low[u] == idx[u]) {
		cs.push_back(vector<int>());
		while (true) {
			int v = S.back();
			S.pop_back();
			vis[v] = false;
			comp[v] = cs.size() - 1;
			cs.back().push_back(v);
			if (v == u)
				break;
		}
	}
}
int main()
{
	set<pair<int, int> > e;
	scanf("%d%d%d", &n, &m, &h);
	cs.reserve(n);
	g.resize(n);
	for (int i = 0; i < n; ++i)
		scanf("%d", &t[i]);
	for (int i = 0; i < m; ++i) {
		int x, y;
		scanf("%d%d", &x, &y);
		--x; --y;
		if ((t[x] + 1) % h == t[y]) {
			if (e.insert({ x,y }).second)
				g[x].push_back(y);
		}
		swap(x, y);
		if ((t[x] + 1) % h == t[y]) {
			if (e.insert({ x,y }).second)
				g[x].push_back(y);
		}
	}
	for (int i = 0; i < n; ++i)
		if (!idx[i])
			DFS(i);
	G.resize(cs.size());
	e.clear();
	for(int i=0;i<n;++i)
		for (int j = 0; j < g[i].size(); ++j) {
			int u = comp[i];
			int v = comp[g[i][j]];
			if (u != v && e.insert({ u,v }).second)
				G[u].push_back(v);
		}
	int mn = 1e9, at;
	for(int i=0;i<G.size();++i)
		if (G[i].empty()) {
			int cur = cs[i].size();
			if (mn > cur) {
				mn = cur;
				at = i;
			}
		}
	printf("%d\n", mn);
	for (auto x : cs[at])
		printf("%d ", x + 1);
	return 0;
}