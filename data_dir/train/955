// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define int long long

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = 2*(int)1e5 + 3;
const int INF = 1e15;

int t, n, a, b, dp[N][2];
string s;

signed main() {
  init_ios();
  cin >> t;
  while (t--) {
    cin >> n >> a >> b >> s;
    for (int i = 0; i < n; ++i)
      dp[i][0] = dp[i][1] = INF;
    dp[0][0] = a+2*b;
    dp[0][1] = 2*a+3*b;
    for (int i = 1; i < n; ++i) {
      if (s[i-1] == '1') {
        if (s[i] == '1') {
          dp[i][0] = INF;
          dp[i][1] = dp[i-1][1]+a+2*b;
        }
        else {
          dp[i][0] = dp[i-1][1]+2*a+b;
          dp[i][1] = dp[i-1][1]+a+2*b;
        }
      }
      else {
        if (s[i] == '1') {
          dp[i][0] = INF;
          dp[i][1] = dp[i-1][1]+a+2*b;
        }
        else {
          dp[i][0] = min(dp[i-1][0]+a+b, dp[i-1][1]+2*a+b);
          dp[i][1] = min(dp[i-1][0]+2*a+2*b, dp[i-1][1]+a+2*b);
        }
      }
      dp[i][0] = min(dp[i][0], INF);
      dp[i][1] = min(dp[i][1], INF);
    }
    cout<<dp[n-1][0]<<"\n";
  }
}