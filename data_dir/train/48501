/*input
4 3 1
3 4 1 3 12
2 2 3 4 10
1 2 4 16
*/
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define int long long
#define N 100005

int n, q, s;
int h[2][4 * N];
vector<vector<pair<int, int> > > a(9 * N);
int times = 0;
int dis[9 * N];
priority_queue<pair<int, int> , vector<pair<int, int> >, greater<pair<int, int> > > pq;

int init(int k, int l, int r, int T) {
	if (l == r) {
		return h[T][k] = l;
	}
	h[T][k] = ++times;
	int mid = (l + r) / 2;
	int lid = init(k * 2, l, mid, T);
	int rid = init(k * 2 + 1, mid + 1, r, T);
	if (!T) {
		a[h[T][k]].push_back(mp(lid, 0));
		a[h[T][k]].push_back(mp(rid, 0));
	}
	else {
		a[lid].push_back(mp(h[T][k], 0));
		a[rid].push_back(mp(h[T][k], 0));
	}
	return h[T][k];
}

void update(int k, int l, int r, int L, int R, int u, int w, int T) {
	if (r < L || R < l) return;
	if (L <= l && r <= R) {
		int v = h[T][k];
		if (T == 0)
			a[u].push_back(mp(v, w));
		else
			a[v].push_back(mp(u, w));
		return;
	}
	int mid = (l + r) / 2;
	update(k * 2, l, mid, L, R, u, w, T); update(k * 2 + 1, mid + 1, r, L, R, u, w, T);
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> q >> s;
	times = n;
	init(1, 1, n, 0); init(1, 1, n, 1);
	while (q--) {
		int type; cin >> type;
		if (type == 1) {
			int u, v, w;
			cin >> u >> v >> w;
			a[u].push_back(mp(v, w));
		}
		else {
			int u, l, r, w;
			cin >> u >> l >> r >> w;
			update(1, 1, n, l, r, u, w, type - 2);
		}
	}
	memset(dis, 127, sizeof(dis));
	dis[s] = 0;
	pq.push(mp(0, s));
	while (!pq.empty()) {
		int u = pq.top().se; int w = pq.top().fi;
		pq.pop();
		if (w != dis[u]) continue;
		for (int i = 0; i < a[u].size(); i++) {
			int v = a[u][i].fi; int d = a[u][i].se;
			if (dis[v] > dis[u] + d) {
				dis[v] = dis[u] + d;
				pq.push(mp(dis[v], v));
			}
		}
	}
	for (int i = 1; i <= n; i++) {
		if (dis[i] > 1e18) cout << -1 << sp;
		else cout << dis[i] << sp;
	}
	cout << endl;
}