#include <bits/stdc++.h>
using namespace std;
#define forr(i, a, b) for(ll i = (a); i < (ll) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define forall(it, v) for(auto it = v.begin(); it != v.end(); ++it)
#define dforn(i, n) for(ll i = ((ll) n) - 1; i >= 0; i--)
#define db(v) cerr << #v << " = " << v << endl
#define pb push_back
typedef long long ll;
const ll MAXN = 2000050;

ll n, x, y, A[MAXN], B[MAXN], S[MAXN], C[MAXN], SS[MAXN], ans;
vector<ll> P;
bool primo[MAXN];

ll sum(ll a, ll b){
  if(a >= b) return 0LL;
  return SS[b] - SS[a];
}

ll cnt(ll a, ll b){
  if(a >= b) return 0LL;
  return S[b] - S[a];
}

void calc(){
  
}

int main() {
  //~ freopen("caso.in", "r", stdin);
  scanf("%lld %lld %lld", &n, &x, &y);
  forn(i, n){
    scanf("%lld", &A[i]);
    B[ A[i] ]++;
    C[ A[i] ] += A[i];
  }
  forn(i, MAXN - 1){
    S[i + 1] = S[i] + B[i];
    SS[i + 1] = SS[i] + C[i];
  }
  
  memset(primo, true, sizeof primo);
  primo[0] = primo[1] = false;
  forr(i, 2, MAXN){
    if(primo[i]){
      for(ll j = i * i; j < MAXN; j += i){
        primo[j] = false;
      }
      P.pb(i);
    }
  }

  ll t = x / y;

  ans = min(n*x, n*y);
  forn(z, P.size()){
    //~ printf("Con primo %lld\n", P[z]);
    ll cost = 0;
    for(ll k = P[z]; k < MAXN - 1; k += P[z]){
      // k = p, 2p, 3p, ...
      // los rangos son [k - p + 1, k]
      ll l = k - P[z] + 1;
      ll r = k;
      
      ll L = max(l, r - t);
      // L es el min a partir del cual 
      // quiero incrementar inclusive...
      
      // Desde [l, L - 1] quito
      // Desde [L, r] sumo
      
      cost += x*cnt(l, L) + y*(cnt(L, r + 1)*k - sum(L, r + 1));
    }
    assert(cost >= 0);
    if(cost < ans){
      ans = cost;
    }
  }
  
  printf("%lld\n", ans);
  return 0;
}
