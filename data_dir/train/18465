/*<<head>> {{{*/
#include <bits/stdc++.h>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <string>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
using namespace std;
typedef double db;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
#define dd(x) cout << #x << " = " << x << ", "
#define de(x) cout << #x << " = " << x << endl
#define rep(i,a,b) for(int i=(a);i<(b);++i)
#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define fi first
#define se second
//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;
//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;
const int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1
const ll LINF = 0x3f3f3f3f3f3f3f3f;
/*}}}*/                         // zr, zm
const int MOD = (int)1e9+7;     // when MOD = 1e9+7, inv2 = 500000004
const int N = (int)2e5+7;
 
// ------- 变量 ------- //
 
int n, m;
int a[N], b[N], pos[N];
 
// ------- 函数 ------- //

int no;
#define lson t[rt].l
#define rson t[rt].r
struct Node { int l, r, val, rnd, sz; } t[10000007];
struct treap {
    int rt;
    inline int newnode(int val) { t[++no] = (Node){ 0, 0, val, rand(), 1 }; return no; }
    inline void up(int rt) { t[rt].sz = t[lson].sz + t[rson].sz + 1; }
    inline void split(int rt, int k, int &x, int &y) {  // 将 rt 对应的一段区间分成元素值 小于等于 k 和 大于 k 的两段，根结点分别为 x 和 y
        if (!rt) { x = y = 0; return ; }
        if (t[rt].val <= k) { x = rt; split(rson, k, rson, y); }
        else { y = rt; split(lson, k, x, lson); }
        up(rt);
    }
    inline int merge(int x, int y) {  // 将 x 和 y 对应的区间按 x 区间在左， y 区间在右的顺序合并起来，返回合并后的根结点
        if (!x || !y) return x + y;
        if (t[x].rnd < t[y].rnd) {
            t[x].r = merge(t[x].r, y);
            up(x); return x;
        } else {
            t[y].l = merge(x, t[y].l);
            up(y); return y;
        }
    }
    inline void ins(int val) {  // 在 最后一个 值小于等于 val 的元素后面插入 值为 val 的元素
        int x, y;
        split(rt, val, x, y);
        rt = merge(merge(x, newnode(val)), y);
    }
    inline void del(int val) {  // 删除 随机一个 值等于 val 的元素，如果不存在则没有影响
        int x, y, z;
        split(rt, val-1, x, y); split(y, val, y, z);
        rt = merge(merge(x, merge(t[y].l, t[y].r)), z);
    }
    inline void upd(int val, int ty) {
        if (ty == 1) {
            ins(val);
        } else {
            del(val);
        }
    }
    inline int qry(int val) { return RANK(val+1)-1; }
    inline int RANK(int val) {  // 查询值为 val 的元素的排名 ( 排名定义为 值比 val 小的元素 的个数 + 1 , 即最前面的 值为 val 的元素 的位置 )
        int x, y, rank;
        split(rt, val-1, x, y);
        rank = t[x].sz + 1;
        rt = merge(x, y);
        return rank;
    }
} v[N];
 
inline void upd(int pos, int ty, int val) {
    for (int i = pos; i < N; i += i&-i)
        v[i].upd(val, ty);
}
 
inline int qry(int pos, int val) {
    int res = 0;
    for (int i = pos; i; i -= i&-i)
        res += v[i].qry(val);
    return res;
}
 
inline void Init() {
    no = 0;
    t[0] = (Node){ 0, 0, 0, rand(), 0 };
    rep(i, 1, n+1) scanf("%d", a+i);
    rep(i, 1, n+1) scanf("%d", b+i);
    rep(i, 1, n+1) pos[a[i]] = i;
    rep(i, 1, n+1) b[i] = pos[b[i]];
}
 
inline int Solve() {
    rep(i, 1, n+1) v[i].rt = 0;
    rep(i, 1, n+1) upd(i, +1, b[i]);
    while (m--) {
        int op; scanf("%d", &op);
        if (op == 1) {
            int l1, r1, l2, r2;
            scanf("%d%d%d%d", &l1, &r1, &l2, &r2);
            int num11 = qry(r2, r1);
            int num12 = qry(l2-1, r1);
            int num21 = qry(r2, l1-1);
            int num22 = qry(l2-1, l1-1);
            printf("%d\n", num11-num12 - (num21-num22));
        } else {
            int l, r;
            scanf("%d%d", &l, &r);
            upd(l, -1, b[l]);
            upd(r, +1, b[l]);
            upd(r, -1, b[r]);
            upd(l, +1, b[r]);
            swap(b[l], b[r]);
        }
    }
    return 0;
}
 
// ------- main ------- //
 
int main ()
{
    //ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
 
    //Pre();
    //int t; scanf("%d", &t); while (t--) {
    while (~scanf("%d%d", &n, &m)) {
    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符
        //if (n == 0) break;
        //static int kase = 0; printf("Case %d: ", ++kase);
        Init();
        Solve();
        //if (t) puts("");
    }
    return 0;
}