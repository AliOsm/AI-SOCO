#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>

using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)
#define all(a) a.begin(), a.end()

//typedef long double ld;
typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 1e18 + 7;

/*
const int MAX_MEM = 5e6;
int mpos = 0;
char mem[MAX_MEM];
inline void * operator new ( size_t n ) {
  char *res = mem + mpos;
  mpos += n;
  assert(mpos <= MAX_MEM);
  return (void *)res;
}
inline void operator delete ( void * ) { }

inline void * operator new [] ( size_t ) { assert(0); }
inline void operator delete [] ( void * ) { assert(0); }*/

vector<int> all_mask;
int cnt_bit[1 << 14];
int ar[100500];
int cnt[1 << 14];
int main() {
	cin.sync_with_stdio(false);
	cin.tie(0);
	//freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("ufo.in", "r", stdin);freopen("ufo.out", "w", stdout);
	/*cout << 100000 << ' ' << 7 << endl;
	forn(i, 100000) {
		cout << rand() % 10001 << ' ';
	}
	return 0;*/
	int n, k;
	cin >> n >> k;
	for (int i =1; i < (1 << 14); ++i)
		cnt_bit[i] = cnt_bit[i >> 1] + (i & 1);
	forn(mask, (1 << 14)) {
		if (cnt_bit[mask] == k)
			all_mask.push_back(mask);
	}
	forn (i, n)
		cin >> ar[i];
	int m = all_mask.size();
	ll ans = 0;
	forn(i, n) {
		int a = ar[i];
		forn(j,  m)
			ans += cnt[a ^ all_mask[j]];
		++cnt[a];
	}
	cout << ans << endl;
	//cout << 1.0 * clock() / CLOCKS_PER_SEC << endl;

	return 0;
}