#include <stdio.h>
#include <vector>
#define pb push_back
using namespace std;

const int MAXN = (int)1e5 + 5;

vector<pair<int, int>> g[MAXN];
int edge_cost[MAXN];
int sz[MAXN];
double fat[MAXN];
int p_edge[MAXN];

double comb(int n) {
    if (n < 3) return 0;

    double num = 1.0 * n * (n - 1) * (n - 2);
    double den = 6.0;
    return num / den;
}

double edge_trip_cost(int sz1, int sz2, double cost) {
    double ways = comb(sz1 + sz2) - comb(sz1) - comb(sz2);
    return 2 * cost * ways;
}

int DFS(int node, int p = -1) {
    sz[node] = 1;

    for (int i = 0; i < (int)g[node].size(); i++) {
        int viz = g[node][i].first;
        if (viz != p) {
            int edge_idx = g[node][i].second;
            p_edge[edge_idx] = viz;
            sz[node] += DFS(viz, node);
        }
    }
    return sz[node];
}

double solve(int n) {
    double ans = 0;
    for (int i = 1; i < n; i++) {
        int sub_sz = sz[p_edge[i]];
        ans += edge_trip_cost(sub_sz, n - sub_sz, edge_cost[i]);
    }
    return ans;
}

int main(void) {
    int n;
    int a, b, l;
    int q;

    scanf(" %d", &n);

    for (int i = 1; i < n; i++) {
        scanf(" %d %d %d", &a, &b, &l);
        edge_cost[i] = l;
        g[a].pb({b, i});
        g[b].pb({a, i});
    }

    DFS(1);
    double ans = solve(n);

    scanf(" %d", &q);
    while(q--) {
        int r, w;
        scanf(" %d %d", &r, &w);
        int sub_sz = sz[p_edge[r]];
        ans -= edge_trip_cost(sub_sz, n - sub_sz, edge_cost[r]);
        edge_cost[r] = w;
        ans += edge_trip_cost(sub_sz, n - sub_sz, edge_cost[r]);
        printf("%.12f\n", ans / comb(n));
    }

    return 0;
}
