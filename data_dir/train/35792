#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <set>
#include <algorithm>

using namespace std;

typedef size_t index_t;
typedef vector< index_t > index_vector;

typedef vector< char > bool_vector;

typedef int mask_t;
typedef int digit_t;

typedef long long long_t;

#define safe_forin(i,n) for (int (i) = 0, __size = (n); (i) < __size; ++(i))
#define forin(i,n) for (index_t (i) = 0, __size = (n); (i) < __size; ++(i))
#define forstep(i,n,step) for (index_t (i) = 0, __size = (n); (i) < __size; i += (step))
#define all(x) (x).begin(), (x).end()

#define zero_bit(x) ((x) & 1)
#define is_even(x) (zero_bit(x) == 0)
#define is_odd(x) (zero_bit(x) == 1)

#define digit(s,i) (s[i] - '0')

#define space ' '
#define nl '\n'
#define newline cout << nl;
	
int read_int()
{
	int value;
	scanf("%d", &value);
	
	return value;
}


string read_string()
{
	string s;
	cin >> s;
	
	return s;
}

string fast_read_string()
{
	char buffer[200500];
	scanf("%s", buffer);
	
	return string(buffer);
}

void fast_println(const int & value)
{
	printf("%d\n", value);
}

void fast_println(const string & value)
{
	printf("%s\n", value.c_str());
}

template < class T > 
void println(const T & value)
{
	cout << value << nl;
}

template < class T >
void print_vector(const vector< T > & values)
{
	forin(i, values.size())
		cout << values[i] << space;
		
	newline;
}

void print_indexes(const index_vector & indexes)
{
	forin(i, indexes.size())
		cout << indexes[i] + 1 << space;
	
	newline;
}

bool check_index(const index_t index, const size_t size)
{
	return (0 <= index && index < size);
}

bool check_indexes(
	const index_t x, const size_t x_size, 
	const index_t y, const size_t y_size)
{
	return check_index(x, x_size) && check_index(y, y_size);
}

template< int binary_value >
struct binary
{
	static const int decimal_value = 
		(binary_value % 10) 
		+ (binary< binary_value / 10> :: decimal_value << 1);
};

template< >
struct binary< 2 >
{
	static const int decimal_value = 0;
};

#define bin(x) (binary<x> :: decimal_value)

bool get_bit(const mask_t & mask, const index_t bit_index)
{
	return (mask & (1 << bit_index)) != 0;
}

mask_t set_bit(mask_t & mask, const index_t bit_index)
{
	return mask = (mask | (1 << bit_index));
}

//vector<int> sieve() {
//	bool_vector used(1000 * )
//}

bool isPrime(int i)
{
	if (i == 1) return false;
	if (i == 2) return true;
	
	if (is_even(i)) return false;
	
	for (int d = 3; d * d <= i; ++d, ++d)
		if (i % d == 0) return false;
	
	return true;
}

vector<int> number(32);
bool isRub(int i)
{
	int length = 0;
	for (index_t j = 0; i > 0; ++j, ++length, i /= 10)
		number[j] = (i % 10);
	
	for (index_t j = 0, k = length - 1; j < k; ++j, --k)
		if (number[j] != number[k]) return false;
	
	return true;
}

int main()
{
	//cin.sync_with_stdio(0);
	//cin.tie(0);
	
	cout.precision(15);
	
	long long p = read_int();
	long long q = read_int();
	
	//vector<int> primes = sieve();
	size_t primes_count = 0;
	size_t rub_count = 0;
	
	int last_i = -1;
	for (int i = 1; i <= 1000 * 1000 * 5; ++i)
	{
		if (isPrime(i)) ++primes_count;
		if (isRub(i)) ++rub_count;
		
		if (q * primes_count <= p * rub_count)
			last_i = i;
	}
	
	if (last_i == -1)
		println("Palindromic tree is better than splay tree");
	else
		println(last_i);
	return 0;
}