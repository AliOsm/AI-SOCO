#include <stdio.h>
#include <math.h>
#include <string.h>
#include <vector>

using namespace std;

#define fi first
#define se second
#define long long long
typedef vector<int> vi;

vi vec[1000003], ans;
int n, k;
int ml[1000003], mr[1000003], parent[1000003];
int visited[1000003];

// FENWICK TREE POINT QUERY RANGE UPDATE
int ft[2000003];
void update(int x, int val)
{
	while(x <= 2*n)
	{
		ft[x] += val;
		x += x&(-x);
	}
}
void update(int x, int y, int val)
{
	update(x, val);
	update(y+1, -val);
}

int query(int x)
{
	int res = 0;
	while(x)
	{
		res += ft[x];
		x -= x&(-x);
	}
	return res;
}
// FENWICK TREE POINT QUERY RANGE UPDATE


void epath(int u)
{
	static int time = 0;
	ml[u] = ++time;
	for(int v : vec[u])
		if(!ml[v])
			epath(v);
	mr[u] = ++time;
}

void dfs(int u)
{
	visited[u] = 1;
	for(int v : vec[u])
	{
		if(!visited[v])
		{
			parent[v] = u;
			update(ml[v], mr[v], 1);
			dfs(v);
		}
	}
}


int main()
{
    // ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	// freopen("input.in", "r", stdin);

	scanf("%d %d", &n, &k);
	for(int i = 1; i < n; i++)
	{
		int u, v; scanf("%d %d" , &u, &v);
		vec[u].push_back(v);
		vec[v].push_back(u);
	}
	
	epath(n);
	dfs(n);
	memset(visited, 0, sizeof visited);
	visited[n] = 1;
	int curr = n-1;
	k = n-k; k--;
	// printf("HELO\n"); fflush(stdout);
	while(k && curr)
	{
		int temp = curr;
		// printf("curr %d k : %d ft : %d\n", curr, k, query(ml[curr]));
		// printf("FT : "); for(int i = 1; i <= 2*n; i++) printf("%d ", query(i)); printf("\n");
		if(query(ml[curr]) <= k && !visited[curr])
		{
			k -= query(ml[curr]);
			update(ml[curr], mr[curr], -1);
			visited[curr] = 1;
			while(!visited[parent[curr]])
			{
				curr = parent[curr];
				visited[curr] = 1;
				update(ml[curr], mr[curr], -1);
			}
		}
		curr = temp;
		curr--;
	}
	for(int i = 1; i <= n; i++)
		if(!visited[i])	ans.push_back(i);

	// printf("ML : "); for(int i = 1; i <= n; i++) printf("%d ", ml[i]); printf("\n");
	// printf("MR : "); for(int i = 1; i <= n; i++) printf("%d ", mr[i]); printf("\n");
	// printf("PAR : "); for(int i = 1; i <= n; i++) printf("%d ", parent[i]); printf("\n");
	// printf("FT : "); for(int i = 1; i <= 2*n; i++) printf("%d ", query(i)); printf("\n");

	for(int i = 0; i < ans.size(); i++)
	{
		printf("%d", ans[i]);
		if(i < ans.size()-1) printf(" ");
	} printf("\n");
}









