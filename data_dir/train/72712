//marico el que lo lea
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <stdlib.h>
#include <assert.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> ii;

void fastIO() {
	std::ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
}

#define FOR(i,f,t) for(int i=f; i<(int)t; i++)
#define FORR(i,f,t) for(int i=f; i>(int)t; i--)
#define FORE(i,c) for(auto i = (c).begin(); i != (c).end(); i++)
#define pb push_back
#define all(obj) obj.begin(), obj.end()
#define ms(obj, val) memset(obj, val, sizeof(obj))
#define ms2(obj, val, sz) memset(obj, val, sizeof(obj[0])*sz)

#define fst first
#define snd second

template<typename T, typename U> inline void mnze(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void mxze(T &x, U y) { if(x < y) x = y; }

void _scan( int &x ) { scanf("%d",&x); }
void _scan( long long &x ) { scanf("%lld",&x); }
void _scan( double &x ) { scanf("%lf",&x); }
void _scan( char &x ) { scanf(" %c",&x); }
void _scan( char *x ) { scanf("%s",x); }
void scan() {}
template<typename T, typename... U>
void scan( T& head, U&... tail ) { _scan(head); scan(tail...);}

template<typename T> void _dbg(const char* sdbg, T h) { cerr<<sdbg<<"="<<h<<"\n"; }
template<typename T, typename... U> void _dbg(const char* sdbg, T h, U... t) {
	while(*sdbg != ',')cerr<<*sdbg++; cerr<<"="<<h<<","; _dbg(sdbg+1, t...);
}

#ifdef LOCAL
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#define debugv(x) {{cerr <<#x <<" = "; FORE(_i, (x)) cerr <<*_i <<", "; cerr <<"\n"; }}
#define debuga(x, sz) {{cerr <<#x <<" = "; FOR(_i, 0, sz) cerr << x[_i] <<", "; cerr <<"\n"; }}
#else
#define debug(...) (__VA_ARGS__)
#define debugv(x)
#define debuga(x, sz)
#define cerr if(0)cout
#endif

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

const int MAXN = 1e5+5, MAXLOG = 20;

vi G[MAXN];
int n, p[MAXN];

int H[MAXN];
int anc[MAXN][MAXLOG];
void dfs_anc(int u, int p = -1){
	anc[u][0] = p;
	if(p != -1) H[u] = H[p] + 1;
	else H[u]=0;

	FOR(i,1,MAXLOG) if(anc[u][i-1] != -1)
		anc[u][i] = anc[anc[u][i-1]][i-1];

	FOR(i,0,G[u].size()){
		int v=G[u][i];
		if(p != v) dfs_anc(v,u);
	}
}

int LCA(int u,int v){
	if(H[v] < H[u]) swap(v,u);

	for(int i=MAXLOG-1; i>-1; i--)
		if(anc[v][i] != -1 && H[anc[v][i]] >= H[u])
			v = anc[v][i];

	if(v == u) return v;

	for(int i=MAXLOG-1; i>-1; i--)
		if(anc[v][i] != anc[u][i])
			v = anc[v][i], u = anc[u][i];
		
	return anc[v][0];
}

int dist(int v, int u){
	int w=LCA(v,u);
	return H[v]+H[u]-2*H[w];
}

int main(){
	int q;
	scan(n,q);
	FOR(i,1,n){
		scan(p[i]); p[i]--;
		G[p[i]].pb(i);
	}
	ms(anc,-1);
	dfs_anc(0);
	while(q--){
		int a,b,c; scan(a,b,c); a--; b--; c--;
		int x[3] = {LCA(a,b), LCA(a,c), LCA(b,c)};
		debug(a,b,c);
		debug(x[0],x[1],x[2]);
		int y = x[0];
		FOR(i,0,3) if(H[x[i]]>H[y]) y=x[i];
		printf("%d\n",max(dist(a,y), max(dist(b,y), dist(c,y)))+1);
	}
}