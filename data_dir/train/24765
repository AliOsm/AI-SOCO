#pragma comment (linker, "/STACK:256000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>
 
//#include <random>
 
using namespace std;
 
double E = 2.71828182846;
double PI = 3.1415926535897932384626433832795;
double EPS = 1e-9;
 
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
 
typedef pair<int64, int64> pii;
const int MAXN = 100100;

int n, m;

vector < vector < int > > gr;

int col[MAXN];
int was[MAXN];

void show(vector <int> & ans)
{
	cout << ans.size() << endl;
	for(int i = 0; i < ans.size(); ++i)
		cout << ans[i] + 1 << ' ';
	cout << endl;
}

void dfs(int u, int q)
{
	if (col[u] != -1 && col[u] != q)
	{
		cout << -1;
		exit(0);
	}
	if (col[u] == q)
		return;
	col[u] = q;
	for(int i = 0; i < gr[u].size(); ++i)
	{
		dfs(gr[u][i], q ^ 1);
	}
}

void solve()
{
	cin >> n >> m;
	gr.resize(n);
	for(int i = 0; i < m; ++i)
	{
		int u, v;
		cin >> u >> v;
		u--, v--;
		gr[u].push_back(v);
		gr[v].push_back(u);
	}
	memset(col, -1, sizeof col);
	for(int i = 0; i < n; ++i)
	{
		if (col[i] == -1)
		{
			dfs(i, 0);
		}
	}

	vector < int > ans, ans1;
	for(int i = 0; i < n; ++i)
		if (col[i])
			ans.push_back(i);
		else
			ans1.push_back(i);
	show(ans);
	show(ans1);
}
 
int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
    srand(1313);
	
	int t;
	
	solve();
	
    return 0;
}