#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define Fit(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define inf 1000000005
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))
#define mod 1000000000
#define sz(a) ((int)(a).size())

template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcountll(s);}
#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)

typedef unsigned long long ull;
typedef long long ll;
typedef double ld;
#define eps 1e-9
typedef pair<int, int> II;
template<class T> T gcd(T a, T b){ T r; while (b != 0) { r = a % b; a = b; b = r; } return a;}
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
#define PI 2 * acos(0)

#define maxn 1005

string res;
int n;
int l[maxn], r[maxn];
bool can[maxn][maxn];

void go(int lo, int hi){
    if(lo == hi){
        res += "()";
        return;
    }
    if(l[lo] <= hi - lo + 1 && hi - lo + 1 <= r[lo] && can[lo + 1][hi]){
        res += "(";
        go(lo + 1, hi);
        res += ")";
        return;
    }

    for(int i = lo + 1; i <= hi; i++) if(can[lo][i - 1] && can[i][hi]){
        go(lo, i - 1);
        go(i, hi);
        return;
    }
}

int main()
{
//  freopen("in.txt", "r", stdin);

    ms(can, 0);
    cin >> n;
    For(i, 1, n) {
        cin >> l[i] >> r[i];
        l[i] = l[i] / 2 + 1;
        r[i] = (r[i] + 1) / 2;
    }

    For(i, 1, n) if(l[i] > r[i]){
        cout << "IMPOSSIBLE";
        return 0;
    }

    For(i, 1, n){
        if(l[i] == 1) can[i][i] = 1;
    }

    For(add, 1, n - 1) For(i, 1, n - add){
        int j = i + add;
        if(can[i + 1][j] && l[i] <= add + 1 && add + 1 <= r[i]) can[i][j] = 1;
        For(k, i + 1, j) if(can[i][k - 1] && can[k][j]){
            can[i][j] = 1;
        }
    }

    if(!can[1][n]){
        cout << "IMPOSSIBLE";
        return 0;
    }

    res = "";
    go(1, n);
    cout << res << endl;

    return 0;
}
