#include <bits/stdc++.h>
using namespace std;
const int MAX = 100008;
int n,m;
vector<vector<int> > g;

int dp[MAX];
int D[MAX];

int DFS(int u){
    if(dp[u]!=-1)
        return dp[u];
    dp[u] = 1;
    for(int i=0;i<(int)g[u].size();i++){
        int v = g[u][i];
        dp[u] = max(dp[u],1+DFS(v));
    }
    return dp[u];
}

int main()
{
    ios::sync_with_stdio(false);
    cin >> n >> m;
    g.resize(n);
    memset(D,0,sizeof D);
    for(int i=0;i<m;i++){
        int a,b;
        cin >> a >> b;
        --a , --b;
        if(a<b)
            swap(a,b);
        g[a].push_back(b);
        D[a]++; D[b]++;
    }
    memset(dp,-1,sizeof dp);
    long long ans = 0LL ;
    for(int i=0;i<n;i++)
        ans = max(ans,1LL * D[i] * DFS(i));
    cout << ans << endl;
    return 0;
}
