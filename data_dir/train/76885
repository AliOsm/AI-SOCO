#include <bits/stdc++.h>

using namespace std;

using int64 = long long;
const int mod = 1e9 + 7;

const int64 infll = (1LL << 62) - 1;
const int inf = (1 << 30) - 1;

struct IoSetup {
  IoSetup() {
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(10);
    cerr << fixed << setprecision(10);
  }
} iosetup;


template< typename T1, typename T2 >
ostream &operator<<(ostream &os, const pair< T1, T2 > &p) {
  os << p.first << " " << p.second;
  return os;
}

template< typename T1, typename T2 >
istream &operator>>(istream &is, pair< T1, T2 > &p) {
  is >> p.first >> p.second;
  return is;
}

template< typename T >
ostream &operator<<(ostream &os, const vector< T > &v) {
  for(int i = 0; i < (int) v.size(); i++) {
    os << v[i] << (i + 1 != v.size() ? " " : "");
  }
  return os;
}

template< typename T >
istream &operator>>(istream &is, vector< T > &v) {
  for(T &in : v) is >> in;
  return is;
}

template< typename T1, typename T2 >
inline bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }

template< typename T1, typename T2 >
inline bool chmin(T1 &a, T2 b) { return a > b && (a = b, true); }

template< typename T = int64 >
vector< T > make_v(size_t a) {
  return vector< T >(a);
}

template< typename T, typename... Ts >
auto make_v(size_t a, Ts... ts) {
  return vector< decltype(make_v< T >(ts...)) >(a, make_v< T >(ts...));
}

template< typename T, typename V >
typename enable_if< is_class< T >::value == 0 >::type fill_v(T &t, const V &v) {
  t = v;
}

template< typename T, typename V >
typename enable_if< is_class< T >::value != 0 >::type fill_v(T &t, const V &v) {
  for(auto &e : t) fill_v(e, v);
}

template< typename F >
struct FixPoint : F {
  FixPoint(F &&f) : F(forward< F >(f)) {}

  template< typename... Args >
  decltype(auto) operator()(Args &&... args) const {
    return F::operator()(*this, forward< Args >(args)...);
  }
};

template< typename F >
inline decltype(auto) MFP(F &&f) {
  return FixPoint< F >{forward< F >(f)};
}


const string latte = "RSP";

int main() {
  int T;
  cin >> T;
  while(T--) {
    int N, A, B, C;
    cin >> N >> A >> C >> B;
    string S;
    cin >> S;
    vector< int > idx;
    for(auto &s : S) {
      int p = latte.find(s);
      if(p == 0 && C > 0) {
        --C;
        idx.emplace_back(2);
      } else if(p == 1 && A > 0) {
        --A;
        idx.emplace_back(0);
      } else if(p == 2 && B > 0) {
        --B;
        idx.emplace_back(1);
      } else {
        idx.emplace_back(-1);
      }
    }
    if((N + 1) / 2 <= N - (A + B + C)) {
      cout << "YES\n";
      for(auto &p : idx) {
        if(p == -1) {
          if(A > 0) --A, p = 0;
          else if(B > 0) --B, p = 1;
          else if(C > 0) --C, p = 2;
        }
        cout << latte[p];
      }
      cout << endl;
    } else {
      cout << "NO\n";
    }
  }
}



