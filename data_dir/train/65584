#include <bits/stdc++.h>
#define base 1000000007LL
#define ll long long
#define ld double
#define X first
#define Y second
#define pb push_back
#define EPS 1e-9
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
using namespace std;
typedef pair<ll, ll> II;
typedef pair<II, int> III;

struct point {
    ll x, y;
    point(ll x = 0, ll y = 0) {
        this->x = x;
        this->y = y;
    }
} a[255];

struct line {
    ll a, b, c;
    point A, B;

    line(ll a, ll b, ll c) : a(a), b(b), c(c) {}

    line(point A, point B) : A(A), B(B) {
        a = B.y - A.y;
        b = A.x - B.x;
        c = - (a * A.x + b * A.y);
    }
};

struct vecto {
    ll x, y;
    vecto(ll x = 0, ll y = 0) {
        this->x = x;
        this->y = y;
    }
    bool operator== (vecto& v) {
        return v.x == x && v.y == y;
    }
    bool operator< (const vecto& v) const {
        if (v.x == x) return y < v.y;
        return x < v.x;
    }
};

vecto toVec(point a, point b) { return vecto(b.x - a.x, b.y - a.y); }
ll crossProduct(vecto a, vecto b) { return a.x * b.y - a.y * b.x; }

int res[1000010];
int n, m;


int main()
{
    ios::sync_with_stdio(0);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    cin >> n >> m;
    FOR(i,1,m) cin >> a[i].x >> a[i].y;
    FOR(i,1,n) res[i] = 1;
    FOR(i,1,m)
        FOR(j,i+1,m) {
            line l = line(a[i], a[j]);
            //out << l.a << " " << l.b << " " << l.c << endl;
            vecto v = toVec(a[i], a[j]);
            int cnt = 2;
            FOR(k,1,m)
                if (k != i && k != j && crossProduct(v, toVec(a[i], a[k])) == 0) cnt++;
            if (l.a == 0) continue;
            if (l.c % l.a) continue;
            ll x = -l.c / l.a;
            //cout << x << endl;
            if (x >= 1 && x <= n) res[x] = max(res[x], cnt);
        }
    int kq = 0;
    FOR(i,1,n) kq += res[i];
    cout << kq;
    return 0;
}
