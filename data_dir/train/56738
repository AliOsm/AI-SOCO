#include<bits/stdc++.h>

using namespace std;

#define ll long long

ll root(ll x){
    ll rt = sqrt(x);
    if(rt * rt == x)return rt;
    ++rt;
    if(rt * rt == x)return rt;
    return -1;
}
ll cubic(ll x){
    ll ans = pow(x , 1.0/3.0);
    if(ans * ans * ans == x)return ans;
    ans++;
    if(ans * ans * ans == x)return ans;
    return -1;
}

const int M = 998244353;

int main()
{
    int n;
    cin >> n;
    map<ll , int>semiprimes;
    vector<ll>primes;
    map<ll , int >fr;
    for(int i = 1; i<=n; i++){
        ll x; cin >> x;
        ll cb = cubic(x);
        if(cb != -1){
            fr[cb] += 3;
            continue;
        }
        ll rt = root(x);
        if(rt == -1)semiprimes[x]++;
        else{
            ll fourth = root(rt);
            if(fourth == -1)fr[rt] += 2, primes.push_back(rt);
            else fr[fourth] += 4 , primes.push_back(fourth);
        }
    }
    for(auto u : semiprimes){
        for(auto v : semiprimes){
            if(u.first != v.first){
                ll g = __gcd(u.first , v.first);
                if(g == 1)continue;
                primes.push_back(g);
            }
        }
    }
    primes.erase(unique(primes.begin(),primes.end()),primes.end());
    vector<int>hidden;
    for(auto u : semiprimes){
        ll x = u.first;
        ll cnt = u.second;
        bool found = false;
        for(auto p : primes){
            if(x % p)continue;
            ll q = x/p;
            fr[p] += cnt;
            fr[q] += cnt;
            found = true;
            break;
        }
        if(found)continue;
        hidden.push_back(cnt);
        hidden.push_back(cnt);
    }
    ll ans = 1;
    for(auto pr : fr){
        ans = (ans*(1+pr.second))%M;
    }
    for(auto x : hidden){
        ans = (ans * (1 + x))%M;
    }
    cout << ans << endl;
    return 0;

}
