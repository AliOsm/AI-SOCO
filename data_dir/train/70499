#include <bits/stdc++.h>

using namespace std;

#define x first
#define y second
#define mp make_pair
#define pb push_back
#define sqr(a) ((a) * (a))
#define sz(a) int(a.size())
#define all(a) a.begin(), a.end()
#define forn(i, n) for(int i = 0; i < int(n); i++) 
#define fore(i, l, r) for(int i = int(l); i < int(r); i++)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template <class A, class B> ostream& operator << (ostream& out, const pair<A, B> &a) {
	return out << "(" << a.x << ", " << a.y << ")";
}

template <class A> ostream& operator << (ostream& out, const vector<A> &v) {
	out << "[";
	forn(i, sz(v)) {
		if(i) out << ", ";
		out << v[i];
	}
	return out << "]";
}

mt19937 rnd(time(NULL));

const int INF = int(1e9);
const li INF64 = li(1e18);
const int MOD = INF + 7;
const ld EPS = 1e-13;
const ld PI = acos(-1.0);

const int N = 20 * 1000 + 13;
const int M = 4000;

struct circle{
	int x, y, r;
	circle(){};
	circle(int x, int y, int r) : x(x), y(y), r(r) {};
};

struct point{
	ld x, y;
	point(){};
	point(ld x, ld y) : x(x), y(y) {};
};

int n, d;
circle a[N];

bool read () {
	if (scanf("%d%d", &n, &d) != 2)
		return false;
	forn(i, n)
		scanf("%d%d%d", &a[i].x, &a[i].y, &a[i].r);
	return true;
}

point operator -(const point &a, const point &b){
	return point(a.x - b.x, a.y - b.y);
}

point operator +(const point &a, const point &b){
	return point(a.x + b.x, a.y + b.y);
}

point operator /(const point &a, const ld &b){
	return point(a.x / b, a.y / b);
}

point operator *(const point &a, const ld &b){
	return point(a.x * b, a.y * b);
}

li sdist(pt a, pt b){
	return sqr(li(a.x - b.x)) + sqr(li(a.y - b.y));
}

ld dist(point a, point b){
	return sqrtl(sqr(a.x - b.x) + sqr(a.y - b.y));
}

bool inter(circle &a, circle &b){
	li k = sdist(mp(a.x, a.y), mp(b.x, b.y));
	return k >= sqr(li(a.r - b.r)) && k <= sqr(li(a.r + b.r));
}

vector<point> get(circle a, circle b){
	vector<point> res;
	ld d = dist(point(a.x, a.y), point(b.x, b.y));
	ld A = (sqr(ld(a.r)) - sqr(ld(b.r)) + sqr(d)) / (2 * d);
	ld h = sqrtl(sqr(a.r) - sqr(A));
	point p2 = point(a.x, a.y) + (point(b.x, b.y) - point(a.x, a.y)) * A / d;
	point p0 = p2 + point(h * (b.y - a.y) / d, -h * (b.x - a.x) / d);
	point p1 = p2 + point(-h * (b.y - a.y) / d, h * (b.x - a.x) / d);
	res.pb(p0);
	res.pb(p1);
	return res;
}

bool comp(ld a, ld b){
	if (fabsl(a - b) > EPS)
		return a < b;
	return false;
}

bool eq(ld a, ld b){
	return fabsl(a - b) < EPS;
}

void solve() {
	vector<pair<ld, ld>> res;
	
	fore(k, 1, M){
		circle D(0, 0, d * k);
		forn(i, n)
			if (inter(a[i], D)){
				auto v = get(a[i], D);
				res.pb(mp(atan2l(v[0].y, v[0].x), atan2l(v[1].y, v[1].x)));
				ld dist = res.back().y - res.back().x;
				if (dist < 0) dist += 2 * PI;
				
				if (dist > PI)
					swap(res.back().x, res.back().y);
			}
	}
	
	vector<ld> nums;
	for (auto it : res){
		nums.pb(it.x);
		nums.pb(it.y);
	}
	nums.pb(-PI);
	nums.pb(PI);
	sort(all(nums));
	nums.resize(unique(all(nums), eq) - nums.begin());
	
	vector<pt> ires;
	
	for (auto it : res){
		int l = lower_bound(all(nums), it.x, comp) - nums.begin();
		int r = lower_bound(all(nums), it.y, comp) - nums.begin();
		
		if (l > r)
			ires.pb(mp(0, 0));
		ires.pb(mp(l, 0));
		ires.pb(mp(r, 1));
	}
	
	sort(all(ires));
	
	int cur = 0;
	int ans = 0;
	
	forn(i, sz(ires)){
		if (ires[i].y == 0)
			++cur;
		else
			--cur;
		ans = max(ans, cur);
	}
	
	printf("%d\n", ans);
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	
	int tt = clock();
	
#endif
	
	cerr.precision(15);
	cout.precision(15);
	cerr << fixed;
	cout << fixed;

	while(read()) {	
		solve();
		
#ifdef _DEBUG
	cerr << "TIME = " << clock() - tt << endl;
	tt = clock();
#endif

	}
}