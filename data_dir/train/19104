#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

bool check(vector<vector<int>> &f) {
	for (auto &v : f) FOR (x, 0, v.size() - 1) if (abs(v[x] - v[x + 1]) < 2) return false;
	FOR (y, 0, f.size() - 1) FOR (x, 0, f[0].size()) if (abs(f[y][x] - f[y + 1][x]) < 2) return false;
	return true;
}

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(int, m);
	
	if (n <= 3 && m <= 3) {
		vector<int> perm(n * m);
		FOR (i, 0, perm.size()) perm[i] = i + 1;
		
		vector<vector<int>> field(n, vector<int>(m));
		do {
			FOR (y, 0, n) FOR (x, 0, m) field[y][x] = perm[y * m + x];
			if (check(field)) {
				FOR (y, 0, n) cout << field[y];
				return 0;
			}
		} while (next_permutation(all(perm)));
		cout << -1;
	} else {
		if (n <= 3) {
			vector<int> row;
			for (int i = 2 ; i <= m ; i += 2) row.push_back(i);
			for (int i = 1 ; i <= m ; i += 2) row.push_back(i);
			cout << row;
			FOR (j, 0, n - 1) {
				for (auto &x : row) x += m;
				cout << row;
			}
		} else {
			vector<vector<int>> field(n);
			vector<int> row;
			for (int i = 2 ; i <= n ; i += 2) row.push_back(i);
			for (int i = 1 ; i <= n ; i += 2) row.push_back(i);
			FOR (i, 0, row.size()) field[i].push_back(row[i]);
			for (auto &v : field) while (v.size() < m) v.push_back(v.back() + n);
			FOR (y, 0, n) cout << field[y]; 
		}
	}
};