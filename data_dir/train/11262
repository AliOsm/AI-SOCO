/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Harshad
 */

#include <bits/stdc++.h>

#include <bits/stdc++.h>
#define int long long

using namespace std;

typedef struct lyric {
    int a, b, c, d;
    lyric(int w, int x, int y, int z){
        a = w, b = x, c = y, d = z;
    }
};


class CBeautifulLyrics {
public:
    string vowels = "aeiou";
    bool isVowel(char c) {
        return (vowels.find(c) != string::npos);
    }
	void solve(std::istream& in, std::ostream& out) {
        int n; in >> n;
        vector<string> arr(n+1);
        map<int, map<char, int>> Map;
        vector<pair<int, int>> set1, set2;

        for(int i = 1; i <= n; ++i) {
            in >> arr[i];
            int cnt = 0;
            for(char c: arr[i]) if(isVowel(c)) ++cnt;
            char last_vowel = '.';
            for(int j = arr[i].length() - 1; j >= 0; --j) {
                if(isVowel(arr[i][j])){
                    last_vowel = arr[i][j];
                    break;
                }
            }
            if(Map[cnt][last_vowel]) {
                set2.emplace_back(Map[cnt][last_vowel], i);
                Map[cnt][last_vowel] = 0;
            }
            else Map[cnt][last_vowel] = i;
        }

        for(auto w: Map) {
            int prev = -1;
            for(auto ch: w.second) {
                if(ch.second == 0) continue;
                if(prev != -1) {
                    set1.emplace_back(prev, ch.second);
                    prev = -1;
                }
                else prev = ch.second;
            }
        }

        vector<lyric> res;

        while(set1.size() and set2.size()) {
            auto a = set1.back(), b = set2.back();
            set1.pop_back(), set2.pop_back();
            res.emplace_back(a.first, b.first, a.second, b.second);
        }

        while(set2.size() >= 2) {
            auto a = set2.back();
            set2.pop_back();
            auto b = set2.back();
            set2.pop_back();
            res.emplace_back(a.first, b.first, a.second, b.second);
        }

        out << res.size() << '\n';
        for(lyric l: res) {
            out << arr[l.a] << ' ' << arr[l.b] << '\n';
            out << arr[l.c] << ' ' << arr[l.d] << '\n';
        }

	}
};


int32_t main() {
	CBeautifulLyrics solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
