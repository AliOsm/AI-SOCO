#include <stdio.h>
#include <math.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <utility>
#include <stack>
#include <queue>
#include <set>

using namespace std;

const int ROOT = 1;

int n, k;
bool visited[200003];
long long res = 0;
long long dp[200003][6];
long long ep[200003][6];
vector<int> vec[200003];

void dfs1(int u)
{
	visited[u] = 1;
	for(int v : vec[u])
	{
		if(!visited[v])
		{
			dfs1(v);
			for(int i = 2; i <= k; i++)
			{
				dp[u][i] += dp[v][i-1];
				ep[u][i] += ep[v][i-1];
			}
			dp[u][1] += dp[v][k] + ep[v][k];
			ep[u][1] += ep[v][k];
		}
	}
	ep[u][k]++;
	// printf("NODE : %d\n", u);
	// printf("	DP : "); for(int i = 1; i <= k; i++) printf("%lld ", dp[u][i]); printf("\n");
	// printf("	EP : "); for(int i = 1; i <= k; i++) printf("%lld ", ep[u][i]); printf("\n");
}

void dfs2(int u, vector<long long> pd, vector<long long> pe)
{
	for(int i = 1; i <= k; i++)
	{
		res += dp[u][i];
		res += pd[i];
	}
	res += pe[k];
	visited[u] = 1;
	for(int v : vec[u])
	{
		if(!visited[v])
		{
			vector<long long> tmd, tme;
			tmd = tme = {0,0,0,0,0,0};
			for(int i = 2; i <= k; i++) 
			{
				tmd[i] -= dp[v][i-1];
				tme[i] -= ep[v][i-1];
				tmd[i] += pd[i-1];
				tme[i] += pe[i-1];
			}
			tmd[1] -= dp[v][k] + ep[v][k];
			tme[1] -= ep[v][k];
			tmd[1] += pd[k] + pe[k]; 
			tme[1] += pe[k];

			for(int i = 1; i <= k; i++)
			{
				tme[i] += ep[u][i];
				tmd[i] += dp[u][i];
			}
			
			dfs2(v, tmd, tme);
		}
	}
}

int main()
{
    // ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	// freopen("input.in", "r", stdin); freopen("output.out", "w", stdout);
	scanf("%d %d", &n, &k);
	for(int i = 1; i < n; i++)
	{
		int u, v;
		scanf("%d %d", &u, &v);
		vec[u].push_back(v);
		vec[v].push_back(u);
	}
	vector<long long> pd = {0,0,0,0,0,0};
	vector<long long> pe = {0,0,0,0,0,0};
	dfs1(ROOT);
	memset(visited, 0, sizeof visited);
	dfs2(ROOT, pd, pe);
	printf("%lld\n", res/2);
}




