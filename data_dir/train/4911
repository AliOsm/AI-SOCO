#ifdef DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <bits/stdc++.h>

using namespace std;

typedef long double ld;

#ifdef DEBUG
#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#else
#define eprintf(...) ;
#endif

#define sz(x) ((int) (x).size())
#define TASK "text"

const int inf = (int) 1.01e9;
const ld eps = 1e-9;
const ld pi = acos((ld) -1);

mt19937 mrand(random_device{} ()); 

int rnd(int x) {
  return mrand() % x;
}

void precalc() {
}

const int maxn = (int) 2e5 + 5;
int n, m;
vector<int> g[maxn];

int read() {
  if (scanf("%d%d", &n, &m) < 2) {
    return false;
  }
  for (int i = 0; i < n; i++) {
    g[i].clear();
  }
  for (int i = 0; i < m; i++) {
    int v, u;
    scanf("%d%d", &v, &u);
    v--;
    u--;
    g[v].push_back(u);
    g[u].push_back(v);
  }
  return true;
}

int used[maxn];
int c[maxn];

void solve() {
  for (int i = 0; i < n; i++) {
    used[i] = false;
    c[i] = false;
  }
  for (int s = 0; s < n; s++) {
    if (used[s]) {
      continue;
    }
    c[s] = true;
    for (int i = 0; i < sz(g[s]); i++) {
      int v = g[s][i];
      c[v] = true;
    }
    for (int i = 0; i < sz(g[s]); i++) {
      int v = g[s][i];
      if (sz(g[v]) != sz(g[s])) {
        printf("NO\n");
        return;
      }
      for (int j = 0; j < sz(g[v]); j++) {
        if (!c[g[v][j]]) {
          printf("NO\n");
          return;
        }
      }
    }
    c[s] = false;
    used[s] = true;
    for (int i = 0; i < sz(g[s]); i++) {
      int v = g[s][i];
      c[v] = false;
      used[v] = true;
    }
  }
  printf("YES\n");
}

int main() {
  precalc();
#ifdef DEBUG
  assert(freopen(TASK ".in", "r", stdin));
  assert(freopen(TASK ".out", "w", stdout));
#endif
  while (read()) {
    solve();
#ifdef DEBUG
    eprintf("Time %.2f\n", (double) clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
