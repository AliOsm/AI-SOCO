#include <bits/stdc++.h>
using namespace std;

const int N = 202, K = 202;

int n, k, a[N], dp[N][K];
vector<int> nei[N];

void dfs(int v = 0, int par = -1) {
	int f[2][k + 2];
	memset(f, false, sizeof f);
	auto last = f[1], now = f[0];
	now[0] = a[v];
	for (int u: nei[v])
		if (u ^ par) {
			dfs(u, v);
			swap(now, last);
			for (int i = k; i; i--) {
				now[i] = max(last[i] + dp[u][max(k - i - 1, i - 1)], last[max(k - i, i)] + dp[u][i - 1]);
				now[i] = max(now[i], now[i + 1]);
			}
			now[0] = last[0] + dp[u][k - 1];
			now[0] = max(now[0], now[1]);
			/*cerr << v + 1 << " on " << u + 1 << ":\n";
			for (int i = 0; i <= k; i++)
				cerr << i << " -> " << now[i] << '\n';*/
		}
	copy(now, now + k + 1, dp[v]);
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> k;
	k++;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	for (int i = 0; i < n - 1; i++) {
		int u, v;
		cin >> u >> v;
		nei[--u].push_back(--v);
		nei[v].push_back(u);
	}
	dfs();
	cout << dp[0][0];
	return 0;
}
