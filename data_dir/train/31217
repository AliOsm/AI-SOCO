#include <bits/stdc++.h>
using namespace std;
const int N = 6e5 + 30 ;


int Seg[N]  , B[N] , A[N] , n , P[N] , F[N] ;
void Build(int id = 1 , int s = 0 ,int e = n) {
	if (e - s == 1) {
		Seg[id] = F[s] = 1  ;
		return ;
	}
	int m = (s + e) >> 1 ;
	Build(id << 1 , s , m) ;
	Build(id << 1 | 1 , m , e) ;
	Seg[id] = Seg[id * 2] + Seg[id * 2 + 1] ;
}
void Update(int x , int val , int id = 1  , int s = 0 , int e = n) {
	Seg[id] += val ;
	if (e - s== 1) {
		F[x] += val ;
		return ;
	}
	int m = (s + e) >> 1 ;
	if (x < m) Update(x , val , id << 1 , s , m) ;
	else Update(x , val , id << 1 | 1 , m , e) ;
}
int Get(int l , int r , int id = 1 , int s = 0 , int e = n) {
	if (l == r) return 0 ;
	if (l >= e || s >= r) return 0 ;
	if (l <= s && e <= r) return Seg[id] ;
	int m = (s + e) >> 1 ;
	return Get(l , r , id * 2 , s , m) + Get(l , r , id * 2 + 1 , m , e) ;
	
}
int main () {
    ios::sync_with_stdio(0), cin.tie(0) ;
    cin >> n ;
    Build() ; 
    for (int i = 0 ; i < n ; i ++) cin >> A[i] ;
    reverse(A, A + n) ;
    for (int i = 0 ; i < n ; i ++) P[A[i] - 1 ] = i  ;
    int ans = 0 ;
    for (int i = 0 ; i < n ; i ++) {
    	cin >> B[i] ;
    	B[i] -- ;
    	if (P[B[i]] == n - 1) {
    		Update(n - 1 , -1) ;
    		continue ;
		}
    	int x = Get(P[B[i]] + 1 , n) ;
    	if (x) ans ++ ;
    	Update(P[B[i]] , -1) ;
	}
	cout << ans ;
    
    return (0) ;
}
