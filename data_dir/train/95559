#include <bits/stdc++.h>
using namespace std;

const int N = 5555;

vector <pair<int,int> > e[N];

int low[N], dfn[N], tot, top;
bool in[N];
int stk[N], ans[N];
int k = 1;

//将所有的树边都染成1颜色
//由于非树边之间也可能成环,非树边成环需要前向边, 横叉边, 返祖边
//有环的情况下只要这三种边不标记成一种颜色就可以了
//下面是将环内的返祖边与横插边都标记成了一类颜色
void dfs(int u) {
    in[u] = true;
    low[u] = dfn[u] = ++tot;
    stk[++top] = u;
    for (auto it: e[u]) {
        int v = it.first;
        int id = it.second;
        if (!dfn[v]) {
            ans[id] = 1;
            dfs(v);
            low[u] = min(low[u], low[v]);
        } else if (in[v]) { //有环
            if(dfn[v] < dfn[u])
                ans[id] = 2;
            else //前向边标记成1, 其他边标记成2
                ans[id] = 1;
            k = 2;//答案肯定是2
            low[u] = min(low[u], dfn[v]);
        } else {
            ans[id] = 1;
        }
    }
    if (low[u] == dfn[u]) {
        int s = -1;
        do {
            s = stk[top--];
            in[s] = false;
        }while(s != u);
    }
}

int main() {
    int n, m;
    scanf("%d%d", &n, &m);
    int a, b;
    for (int i = 0; i < m; i++) {
        scanf("%d%d", &a, &b);
        e[a].push_back(make_pair(b, i));
    }

    for (int i = 1; i <= n; i++) {
        if (!dfn[i]) {
            dfs(i);
        }
    }
    cout << k <<endl;
    for (int i = 0; i < m; i++) {
        printf("%d ", ans[i]);
    }
    return 0;
}
