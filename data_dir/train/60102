/****************************************************************************
 *                                                                          *
 *                    ==>> BG_PeaceMind(BISHAL)                             *
 *                   try=0; while(!success) try++;                          *
 ****************************************************************************/
#include<bits/stdc++.h>
#define PI acos(-1.0)
#define nl cout<<endl;
#define SZ(x) x.size()
#define pb(x) push_back(x)
#define X first
#define Y second
#define pii pair<ll,ll>
#define all(v) v.begin(),v.end()
#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define fr(i,a,n) for(i=a;i<=n;i++)
#define rf(i,n,a) for(i=n;i>=a;i--)
#define LB(v,k) lower_bound(v.begin(),v.end(),k)
#define _cin ios_base::sync_with_stdio(0),cin.tie(0)
#define ct(x) cerr<<__LINE__<< ":: "<<#x<<"= "<<x<<endl
#define fi(it,n) for(__typeof(n.begin()) it=n.begin();it!=n.end();it++)
using namespace std;
typedef long long ll;
/// atoi( str.c_str() ); // char string to int
/// sprintf(str,"%d",num);// num to char string
///int month[]={-1,31,28,31,30,31,30,31,31,30,31,30,31}; //Not Leap Yr
///int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Dir
///int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 Dir
///int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Kngt
/************************************************************************
 * /////////////////////////////////////////////////////////////////////*
 ************************************************************************/
/// [ Look at my code below, My code is so amazing !! :P ]
///Dgt       0123456789
#define MX   209
#define inf  100000009
#define eps  1e-9
#define MD   1000000007

const int CHR=30;///Tot distinct char in a text

struct node {
    int nxt[CHR];
    node() {
        CLR(nxt);
    }
};
node T[MX];
int fl[MX];
int nw;
int val[MX];

void init() {
    CLR(T);
    CLR(fl);
    CLR(val);
    T[1]=node();
    nw=1;
}

void Ins(string s,int ln,int vl) {
    int p=1;
    for(int i=0; i<ln; i++) {
        int k=s[i]-'A';
        if(T[p].nxt[k]==0) {
            T[p].nxt[k]=(++nw);
            T[nw]=node();
        }
        p=T[p].nxt[k];
    }
    val[p]+=vl;
}

void fail_bfs() {
    queue<int>Q;
    Q.push(1);
    for(int i=0; i<CHR; i++) T[0].nxt[i]=1;
    while(!Q.empty()) {
        int u=Q.front();
        Q.pop();
        for(int i=0; i<CHR; i++) {
            int v=T[u].nxt[i];
            if(v==0) { /// If there is no child from this node ,give failure link to it.
                T[u].nxt[i]= T[ fl[u] ].nxt[i];
                continue;
            }
            fl[v]= T[ fl[u] ].nxt[i];/// set failure node to each valid nodes.
            Q.push(v);
        }
    }
}

string vrs,a,b;
int la,lb,lv;
int dp[MX][MX][MX];

int go(int i,int j,int id) {
    if(i==la || j==lb) return 0;
    int &ret=dp[i][j][id];
    if(ret!=-1) return ret;
    ret=0;
    int op1=go(i+1,j,id);
    int op2=go(i,j+1,id);
    int op3=0;
    if(a[i]==b[j]) {
        int cst=0,nid=T[id].nxt[ a[i]-'A' ];
        int tmp=nid;
        while(tmp)cst+=val[tmp],tmp=fl[tmp];
        if(!cst)op3=1+go(i+1,j+1,nid==0?1:nid);
    }
    ret=max(ret,max( max(op1,op2),op3 ) );
    return ret;
}

void po(int i,int j,int id) {
    if(i==la || j==lb) return;
    int &ret=dp[i][j][id];
    if(ret==go(i+1,j,id)) {
        po(i+1,j,id);
        return;
    } else if( ret==go(i,j+1,id) ) {
        po(i,j+1,id);
        return;
    } else if(a[i]==b[j]) {
        int cst=0,nid=T[id].nxt[ a[i]-'A' ];
        int tmp=nid;
        while(tmp)cst+=val[tmp],tmp=fl[tmp];
        if(!cst) {
            if( ret=1+go(i+1,j+1,nid)) {
                cout<<a[i];
                po(i+1,j+1,nid);
                return;
            }
        }
    }
    return;
}

int main() {
    int i,j,k;
    _cin;
    cin>>a>>b>>vrs;
    init( );
    la=SZ(a);
    lb=SZ(b);
    lv=SZ(vrs);
    Ins(vrs,lv,2);
    fail_bfs();
    SET(dp);
    int ans=go(0,0,1);
    if(ans==0)cout<<0<<endl;
    else    po(0,0,1),nl;

    return 0;
}
