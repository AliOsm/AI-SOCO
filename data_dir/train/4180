#include <bits/stdc++.h>
#define endl '\n'
using namespace std;
typedef long long ll;
#define N 400
typedef long long ll;
vector<int> adj1[N+1], adj2[N+1];
void link(vector<int> adj[], int u, int v) {
    adj[u].push_back(v);
    adj[v].push_back(u);
}
int d1[N+1], d2[N+1];
int p1[N+1], p2[N+1];
void bfs(int d[], int p[], vector<int> adj[], int s, int n = N) {
    fill(d, d + n + 1, -1);
    d[s] = 0;
    p[s] = -1;
    queue<int> q;
    q.push(s);
    while(not q.empty()) {
        int u = q.front(); q.pop();
        for(int v : adj[u]) {
            if(d[v] == -1) {
                d[v] = d[u] + 1;
                p[v] = u;
                q.push(v);
            }
        }
    }
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n, m;
    cin >> n >> m;
    bool adj[N+1][N+1];
    memset(adj, false, sizeof adj);
    for(int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        link(adj1, u, v);
        adj[u][v] = true;
        adj[v][u] = true;
    }
    for(int u = 1; u <= n; u++) {
        for(int v = u + 1; v <= n; v++) {
            if(!adj[u][v]) {
                link(adj2, u, v);
            }
        }
    }
    bfs(d1, p1, adj1, 1);
    bfs(d2, p2, adj2, 1);
    cout << (d1[n] == -1 or d2[n] == -1 ? -1 : max(d1[n], d2[n])) << endl;
    return 0;
}
