#define _CRT_SECURE_NO_WARNINGS

#include <string>
#include <sstream>
#include <cstring>
#include <sstream>
#include <vector>
#include <algorithm>
#include <iostream>
#include <stdio.h>
#include <fstream>
#include <ctime>
#include <cmath>
#include <math.h>
#include <set>
#include <map>
#include <list>
#include <iomanip>
#include <cstdio>
#include <algorithm>
using namespace std;

#define pp system("pause");
#define ct double ttme = clock()
#define p_ct cout << (clock() - ttme) / CLOCKS_PER_SEC << endl
#define all(c) (c).begin(),(c).end()
#define fft ifstream fin("input.txt"); ofstream fout("output.txt")
#define fft_c FILE *fin, *fout
#define fft_c_open fin = fopen("input.txt","r"); fout = fopen("output.txt","w")
#define fft_c_cl fclose(fin); fclose(fout)
#define pii pair<ll,ll>
#define pff pair<float,float>
#define piii pair<int,pair<int,int>>
#define M_PI 3.14159265358979323846
#define mem0(m) memset((m), 0, sizeof(m));
#define memb(m) memset((m), false, sizeof(m));
#define memi(m) memset((m), 0, sizeof(m));
typedef unsigned long long ull;
typedef signed long long ll;
const int INF = 1e8;
const int MAXM = 100000007;
const int MAX = 1e7;
const int des = 10000;


const int maxn = 100005;


vector<int> g[maxn];
bool used[maxn];
int init[maxn];
int goal[maxn];
vector<int> ans;

void dfs(int v, bool invBlack, bool invWhite, bool isWhite) {

	if(isWhite) {
		if((init[v] == goal[v]) == invWhite) {
			invWhite = !invWhite;
			ans.push_back(v);
		}
	} else {
		if((init[v] == goal[v]) == invBlack) {
			invBlack = !invBlack;
			ans.push_back(v);
		}
	}

	isWhite = !isWhite;
	for(int i = 0; i < g[v].size(); i++) {
		if(used[g[v][i]])
			continue;
		used[g[v][i]] = true;
		dfs(g[v][i], invBlack, invWhite, isWhite);
	}

}


int main() {
	memb(used);
	used[0] = true;

	int n;
	cin >> n;

	for(int i = 0; i < n - 1; i++) {
		int a, b;
		cin >> a >> b;
		a--;
		b--;
		g[a].push_back(b);
		g[b].push_back(a);
	}

	for(int i = 0; i < n; i++) {
		cin >> init[i];
	}

	for(int i = 0; i < n; i++) {
		cin >> goal[i];
	}
	
	dfs(0, false, false, true);

	cout << ans.size() << endl;
	for(int i = 0; i < ans.size(); i++) {
		cout << ans[i] + 1 << endl;
	}

	//pp;
}