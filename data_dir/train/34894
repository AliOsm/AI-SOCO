#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

int Dp[105][3];
int N;
vector<int> vec;

int solve(int index, int pre)
{
    if(index == N)
        return 0;
    int &ans = Dp[index][pre];
    if(ans != -1)
        return ans;
    switch(vec[index])
    {
    case 0:
        return ans = 1 + solve(index + 1, 0);
    case 1:
        if(pre == 1)
            return ans = 1 + solve(index + 1, 0);
        else
            return ans = min(solve(index + 1, 1), 1 + solve(index + 1, 0));
    case 2:
        if(pre == 2)
            return ans = 1 + solve(index + 1, 0);
        else
            return ans = min(solve(index + 1, 2), 1 + solve(index + 1, 0));
    case 3:
        if(pre == 1)
            return ans = min(solve(index + 1, 2), 1 + solve(index + 1, 0));
        else if(pre == 2)
            return ans = min(solve(index + 1, 1), 1 + solve(index + 1, 0));
        else
            return ans = min(solve(index + 1, 1), min(solve(index + 1, 2), 1 + solve(index + 1, 0)));
    }
}

int main()
{
    memset(Dp, -1, sizeof(Dp));
    cin >> N;
    vec.resize(N);
    for(auto &x: vec)
    {
        cin >> x;
    }
    cout << solve(0, 0);
    return 0;
}
