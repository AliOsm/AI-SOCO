#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cassert>
#include <queue>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define pb push_back
#define fst first
#define snd second
#define SZ(x) ((int)x.size())
typedef long long ll;
#define dforn(i, n) for(int i = n - 1; i >= 0; i--)

const int MAXN = -1;

const int MOD = 1e9 + 7;

struct Mat {
  vector<vector<int>> vec;
  Mat(): vec(1, vector<int>(1,0)){}
  Mat(int n): vec(n, vector<int>(n)) {}
  Mat(int n, int m): vec(n, vector<int>(m)){}
  vector<int> &operator[](int f){ return vec[f];}
  const vector<int> &operator[](int f) const { return vec[f];}
  int size() const { return vec.size(); }
};
Mat operator *(Mat A, Mat B){
  int n=A.size(),m=A[0].size(),t=B[0].size();
  Mat ans(n, t);
  forn(i,n)forn(j,t)forn(k,m){
    ans[i][j]=(ans[i][j]+(ll)A[i][k]*B[k][j]%MOD)%MOD;
  }
  return ans;
}

int n, b, k, x, D[10];
Mat T[35];

int main() {
  //~ freopen("input.in", "r", stdin);
  while( scanf("%d %d %d %d", &n, &b, &k, &x) >= 1 ){
    memset(D, 0, sizeof(D));
    forn(i, n){
      int a; scanf("%d", &a);
      D[a]++;
    }
    T[0] = Mat(x);
    forn(i, x){
      forn(j, 10){
        int t = (10*i + j) % x;
        //~ printf("10*%d + %d %% %d = %d\n", i, j, x, t);
        T[0][i][t] += D[j];
      }
    }
    //~ forn(i, x){
      //~ forn(j, x){
        //~ printf("%d ", T[0][i][j]);
      //~ }
      //~ puts("");
    //~ }
    forr(i, 1, 31){
      T[i] = T[i-1]*T[i-1];
    }
    Mat V(1, x);
    V[0][0] = 1;
    forn(i, 31){
      if(b & (1 << i))
        V = V * T[i];
    }
    printf("%d\n", V[0][k]);
  }
  return 0;
}
