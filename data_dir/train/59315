#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
#define  int long long int
typedef complex<long double> cd;
const long double pi=acos(-1);
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <db, db> pdd;
typedef vector<int> vi;
typedef vector<vector<int> > matrix;
#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))
#define sz(x) (int)(x.size())
#define fi first
#define se second
#define endl "\n"
#define debug(x) (cerr << #x << ": " << x << "\n")
#define setbits(x) __builtin_popcount(x)
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p;}
const ll MOD =998244353;
const ll hell=1000000007;
const int INF = 1e18;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;

typedef tree<int, null_type, less<int>, rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;
int par(int x)
{
    return x%2;
}
int32_t main()
{
    IOS;
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
        cin>>a[i];
    set<pair<int,int> >s;vi parent[n+1];int ans[n];
    memset(ans,-1,sizeof(ans));
    for(int i=0;i<n;i++)
    {
        int i1=i-a[i];
        int i2=i+a[i];//pos=0;
        if(i1>=0)
        {
            if(par(a[i])!=par(a[i1]))
            {
                s.insert(m1(1,i));
                ans[i]=1;
            }
            else
            {
                parent[i1].pb(i);
            }
        }
        if(i2<n)
        {
            if(par(a[i])!=par(a[i2]))
            {
                s.insert(m1(1,i));
                ans[i]=1;
            }
            else
            {
                parent[i2].pb(i);
            }
        }
    }
    set<pair<int,int> >::iterator it;int u,v;bool is[n+1]={0};
    while(!s.empty())
    {
        it=(s.begin());
        //ans[(*it).second]=(*it).first;
        u=(*it).second;
        is[u]=1;
        s.erase(s.begin());
        for(int j=0;j<parent[u].size();j++)
        {
            v=parent[u][j];
            if(!is[v]&&s.find(m1(ans[v],v))==s.end())
            {
                ans[v]=1+ans[u];
                s.insert(m1(ans[v],v));
            }
        }
    }
    for(int i=0;i<n;i++)
        cout<<ans[i]<<" ";
    cout<<endl;
    return 0;
}
