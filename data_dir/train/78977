#include <bits/stdc++.h>
using namespace std;

int main() {
#ifdef LOCAL_DEFINE
	// freopen("data.in", "rt", stdin);
	// freopen("data.out", "w", stdout);
	auto _start = chrono::high_resolution_clock::now();
#endif

	ios::sync_with_stdio(false);
	cin.tie(0);
	cout << fixed << setprecision(15);
	auto to_string = [&](long long x) {
		char s[20];
		sprintf(s, "%lld", x);
		return string(s);
	};
	int T;
	cin >> T;
	while (T--) {
		long long l, r;
		cin >> l >> r;
		string s = to_string(r);
		int n = s.length();
		vector<vector<vector<long long>>> dp(n, vector<vector<long long>>(4, vector<long long>(2)));
		function<long long(int, int, int)> dfs = [&](int cur, int cnt, int limit) {
			if (cur == n) {
				return 1LL;
			}
			if (dp[cur][cnt][limit]) {
				return dp[cur][cnt][limit];
			}
			long long res = 0;
			int sz = limit ? s[cur] - '0' : 9;
			if(cnt == 3) sz = 0;
			for (int i = 0; i <= sz; i++) {
				res += dfs(cur + 1, cnt + (i != 0), limit && i == (s[cur] - '0'));
			}
			return dp[cur][cnt][limit] = res;
		};
		long long ans = dfs(0, 0, 1);
		s = to_string(l - 1);
		n = s.length();
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < 4; j++) {
				for(int k = 0; k < 2; k++) {
					dp[i][j][k] = 0;
				}
			}
		}
		ans -= dfs(0, 0, 1);
		cout << ans << '\n';
	}

#ifdef LOCAL_DEFINE
	auto _end = chrono::high_resolution_clock::now();
	cerr << "elapsed time: " << chrono::duration<double, milli>(_end - _start).count() << " ms\n";
#endif
	return 0;
}