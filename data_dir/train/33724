#include<stdio.h>
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<functional>
#include<string>
#include<algorithm>
#include<time.h>
#include<bitset>
void fre(){freopen("c://test//input.in","r",stdin);freopen("c://test//output.out","w",stdout);}
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T> inline void gmax(T &a,T b){if(b>a)a=b;}
template <class T> inline void gmin(T &a,T b){if(b<a)a=b;}
using namespace std;
const int N=55,M=0,Z=1e9+7,maxint=2147483647,ms31=522133279,ms63=1061109567,ms127=2139062143;const double eps=1e-8,PI=acos(-1.0);//.0
map<int,int>mop;
struct A{};
int n,d;
int l[N],r[N];
int main()
{
	while(~scanf("%d%d",&n,&d))
	{
		int ans=0;
		for(int i=1;i<=n;i++)scanf("%d%d",&l[i],&r[i]),ans+=r[i]-l[i]+1;
		for(int i=1;i<=n;i++)
		{
			int len=l[i]-r[i-1]-1;
			ans+=len%d;
		}
		printf("%d\n",ans);
	}
	return 0;
}
/*
【题意】
我们现在所在的电影时刻是1，
我们必须要看一部电影的n个片段，第i个片段的时刻是[l[i],r[i]]
如果我们现在的时刻是t，那么我们可以选择——
1，把这个时刻的电影看完，时刻变成t+1
2，跳过长度为d的时刻，时刻变成t+d
问你，如何操作才能看最少时长的电影，并输出这个最少的时长。

【类型】
贪心模拟

【分析】
读题最重要！
我们把一个片段看完之后，时刻是r[x]+1
距离下一个必须看的时刻l[x+1]，中间的时长是l[x+1]-r[x]-1
时长是d倍数的，可以直接跳过。
其他时间必须看。这样就得出答案啦

【时间复杂度&&优化】
O(n)

【trick】

【数据】
Input
2 3
5 6
10 12
Output

6
Input
1 1
1 100000
Output
100000

*/