#pragma comment(linker, "/STACK:640000000")
#include<iostream>
#include<cstdio>
#include<cassert>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<cmath>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<bitset>
#include<algorithm>

#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define ll long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)

using namespace std;

typedef pair<int, int> pii;

const double eps = 1e-9;
const double pi = acos(-1.0);

const int maxn = (int)1e5 + 10;

int n;
int u[maxn],v[maxn];
int dp[maxn];
int deg[maxn];
vector<int> g[maxn];

int calc(int pos) {
	for (int i = 0; i < n; i++) {
		dp[i] = 1;
		deg[i] = 0;
		g[i].clear();
	}
	for (int i = 0; i <= pos; i++) {
		g[u[i]].pb(v[i]);
		deg[v[i]]++;
	}
	queue<int> q;
	for (int i = 0; i < n; i++) if (deg[i] == 0) {
		q.push(i);
	}
	int res = 0;
	while(!q.empty()) {
		int v = q.front(); q.pop();
		res = max(res,dp[v]);
		for (int i = 0; i < sz(g[v]); i++) {
			int to = g[v][i];
			dp[to] = max(dp[to],dp[v] + 1);
			deg[to]--;
			if (deg[to] == 0) q.push(to);
		}
	}
	return res;
}

int main() {
	#ifdef LOCAL
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	
	int m; cin >> n >> m;
	
	for (int i = 0; i < m; i++) {
		scanf("%d%d",&u[i],&v[i]);
		--u[i];
		--v[i];
	}
	
	if (calc(m - 1) != n) {
		cout << -1 << endl;
		return 0;
	}
	
	int l = -1;
	int r = m - 1;
	while(l < r - 1) {
		int mid = (l + r) >> 1;
		if (calc(mid) == n) {
			r = mid;
		} else {
			l = mid;
		}
	}
	
	cout << r + 1 << endl;
		
	return 0;
}
