#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

template <typename T>
using ordered_set_of_pairs = tree<pair<T, size_t>, null_type, less<pair<T, size_t>>, rb_tree_tag, tree_order_statistics_node_update>; ///set of pairs in ascending order


ordered_set_of_pairs<int> st;

const int mx = 2e5+5;
int a[mx], b[mx];

/*vector<int> vec;

int bin( int key )
{
	int lo = 0, hi = (int)vec.size()-1, mid;
	while( lo <= hi ) {
		mid = (lo + hi)/2;
		if( vec[mid] >= key ) hi = mid-1;
		else lo = mid+1;
	}
	return lo;
}
*/

int main()
{
	optimize();
	int n;
	cin >> n;
	for( int i = 1; i <= n; ++i ) cin >> a[i];
	for( int i = 1; i <= n; ++i ) cin >> b[i];
	ll ans = 0;
	int nxt = 3;
	for( int i = 1; i <= n; ++i ) {
		int aa = a[i]-b[i];
		int temp = st.order_of_key( MP(aa, 0) );
		//dbg(temp);
		//for( auto x : st ) {
		//	dbg(x);
		//}
		ans += temp;
		st.insert( MP(b[i]-a[i], nxt++) );
	}
	cout << ans << endl;
}





















