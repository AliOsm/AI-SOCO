#pragma GCC optimize("O3")
#include <bits/stdc++.h>

#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define files(name) name!=""?freopen(name".in","r",stdin),freopen(name".out","w",stdout):0
#define files_ds(name) name!=""?freopen(name".dat","r",stdin),freopen(name".sol","w",stdout):0
#define all(a) a.begin(),a.end()
#define len(a) (int)(a.size())
#define elif else if
#define mp make_pair
#define pb push_back
#define fir first
#define sec second

using namespace std;
///#define int long long

typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef long double ld;
typedef long long ll;

const int arr=2e5+10;
const int ar=2e3+10;
const ld pi=acos(-1);
const ld eps=1e-10;
const ll md=1e9+7;

///---program start---///

#define dec dec_____

const int bsize=300;

struct block
{
    vi d;
    int min_val;
    block* next;

    void recalc()
    {
        min_val=2e9;
        for (auto i:d){
            min_val=min(min_val,i);
        }
    }

    block(vi a)
    {
        d=a;
        next=0;
        recalc();
    }
};

int a[arr];

block* first=0;
block* last=0;

void rebuild()
{
    vi all_a(0);
    block* cur1=first;
    while (cur1){
        for (auto i:cur1->d){
            all_a.pb(i);
        }
        cur1=cur1->next;
    }

    first=0;
    vi cur(0);
    for (auto i:all_a){
        cur.pb(i);
        if (cur.size()==bsize){
            block* current=new block(cur);
            if (last){
                last->next=current;
            }
            last=current;
            if (!first){
                first=last;
            }
            cur.clear();
        }
    }
    if (!cur.empty()){
        block* current=new block(cur);
        if (last){
            last->next=current;
        }
        last=current;
        if (!first){
            first=last;
        }
        cur.clear();
    }
}

void debug_all()
{
    block* cur1=first;
    while (cur1){
        for (auto i:cur1->d){
            cerr<<i<<" ";
        }
        cur1=cur1->next;
        cerr<<"|| ";
    }
    cerr<<"\n";
}

main()
{
    #ifdef I_love_Maria_Ivanova
        files("barik");
        freopen("debug.txt","w",stderr);
    #else
        files("");
        files_ds("");
    #endif

    int n;
    scanf("%d",&n);
    vi cur(0);
    for (int i=0;i<n;i++){
        scanf("%d",&a[i]);
        cur.pb(a[i]);
        if (cur.size()==bsize){
            block* current=new block(cur);
            if (last){
                last->next=current;
            }
            last=current;
            if (!first){
                first=last;
            }
            cur.clear();
        }
    }
    if (!cur.empty()){
        block* current=new block(cur);
        if (last){
            last->next=current;
        }
        last=current;
        if (!first){
            first=last;
        }
        cur.clear();
    }

    sort(a,a+n);
    ll ans=0;
    for (int i=0;i<n;i++){
//        debug_all();

        if (i%bsize==0){
//            cerr<<"rebuild"<<"\n";
            rebuild();
//            cerr<<"aftre rebuild :::\n";
//            debug_all();
        }

        int cnt=0;
        block* cur=first;
        while (cur->min_val!=a[i]){
            cnt+=cur->d.size();
            cur=cur->next;
        }
        for (int j=0;j<cur->d.size();j++){
            cnt++;
            if (cur->d[j]==a[i]){
//                cerr<<"cnt :: "<<cnt<<"\n";
                ans+=cnt;
                cur->d.erase(cur->d.begin()+j);
                vi right(0);
                for (int k=j;k<cur->d.size();k++){
                    right.pb(cur->d[k]);
                }
                while (cur->d.size()>j){
                    cur->d.pop_back();
                }
                block* current=new block(right);
                last->next=first;
                current->next=cur->next;
                cur->next=current;
                first=current;
                last=cur;
                cur->next=0;
                cur->recalc();
                current->recalc();
                break;
            }
        }
    }
    cout<<ans<<"\n";
}