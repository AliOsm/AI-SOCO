//#pragma GCC optimize ("Ofast")
//#pragma GCC optimize ("unroll-loops")
//#pragma GCC target("avx,avx2,fma")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/rope>
#define pb push_back
#define F first
#define S second
#define ins insert
#define mp make_pair
#define fo(i, n1, n, x) for(int i = n1; i <= n; i += x)
#define foo(i, n, n1, x) for(int i = n; i >= n1; i -= x)
#define bit __builtin_popcount
#define md (l + ((r - l) / 2))
#define all(x) x.begin(),x.end()
#define eb emplace_back
#define ub upper_bound
#define lb lower_bound
#define ios ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define file(s) if (fopen(s".in", "r")) freopen(s".in", "r", stdin), freopen(s".out", "w", stdout)

using namespace std;
using namespace __gnu_pbds;
//using namespace __gnu_cxx;


using ll = long long;

//#define int ll

using pii = pair<int,int>;
using pll = pair<ll,ll>;
using vi = vector<int>;



const int N = 5e3 + 11, mod = 1e9 + 7, mod2 = 998244353;
const int MAX = 1e5 + 11;
const int INF1 = 2e9 + 11;
const ll INF2 = 6e18 + 11;
const double INF3 = 1e8 + 11;
const int base = 500;
const int P = 31;
const int dx[] = {1, -1, 0, 0, 1, 1, -1, -1};
const int dy[] = {0, 0, 1, -1, 1, -1, 1, -1};
const double EPS = 1e-4;
const double PI = acos(-1.0);


template<typename T> using ordered_set = tree <T, null_type, less <T>, rb_tree_tag, tree_order_statistics_node_update>;
template<typename T1, typename T2> inline void chmin(T1 &a, T2 b) { if (a > b) a = b; }
template<typename T1, typename T2> inline void chmax(T1 &a, T2 b) { if (a < b) a = b; }


mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int n, m, ct1, ct2, ct3, cnt1, cnt2, ptr, a[N][N];
bitset<5050> dp[N];
bool us[N], col[N];
vi g[N], vec;
bool flag;
void dfs(int v) {
  us[v] = 1;
  vec.eb(v);
  if (col[v]) ++cnt1;
  else ++cnt2;
  for (int to : g[v]) {
    if (!us[to]) {
      col[to] = (col[v] ^ 1);
      dfs(to);
    } else {
      if (col[v] == col[to]) flag = 1;
    }
  }
}
main() {
  file("threesum");
  ios;
  cin >> n >> m >> ct1 >> ct2 >> ct3;
  fo(i, 1, m, 1) {
    int u, v;
    cin >> u >> v;
    g[u].eb(v);
    g[v].eb(u);
  }
  int ct = ct2;
  dp[0][0] = 1;
  vector<vi> comp;
  fo(i, 1, n, 1) {
    if (!us[i]) {
      vec.clear();
      flag = cnt1 = cnt2 = 0;
      dfs(i);
      if (flag) return !(cout << "NO");
      comp.eb(vec);
      ++ptr;
      fo(j, 0, ct - cnt1, 1) {
        if (dp[ptr - 1][j]) dp[ptr][j + cnt1] = 1, a[ptr][j + cnt1] = cnt1;
      }
      swap(cnt1, cnt2);
      fo(j, 0, ct - cnt1, 1) {
        if (dp[ptr - 1][j]) dp[ptr][j + cnt1] = 1, a[ptr][j + cnt1] = cnt1;
      }
    }
  }
  if (!dp[ptr][ct]) return !(cout << "NO");
  cout << "YES\n";
  int f = ptr, s = ct;
  vector<char> ans(n + 1, '5');
  while (f) {
    int cnt = a[f][s];
    cnt1 = 0, cnt2 = 0;
    for (int i = 0; i < comp[f - 1].size(); ++i) {
      if (col[comp[f - 1][i]]) ++cnt1;
      else ++cnt2;
    }
    if (cnt1 == cnt) {
      for (int i = 0; i < comp[f - 1].size(); ++i) {
        if (col[comp[f - 1][i]]) {
          ans[comp[f - 1][i]] = '2';
        }
      }
    } else {
      for (int i = 0; i < comp[f - 1].size(); ++i) {
        if (!col[comp[f - 1][i]]) {
          ans[comp[f - 1][i]] = '2';
        }
      }
    }
    s -= a[f][s];
    --f;
  }
  for (int i = 1; i <= n; ++i) {
    if (ans[i] != '2') {
      if (ct1) cout << 1, --ct1;
      else cout << 3;
    } else {
      cout << 2;
    }
  }
  return 0;
}
/**
1 2 3 2 1
*/
