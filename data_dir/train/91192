
/*\
 * ...
 * ......
 * In the name of ALLAH
 * ......
 * ...
\*/

#include <bits/stdc++.h>

using namespace std;
#define Size(x) ((int)(x).size())
#define pb push_back
#define LD_OUT setprecision(12) << fixed
typedef long long ll;
typedef long double ld;
typedef pair<int,int>pii;
const int INF = 1e9 + 10 , MN = 105;

vector<int>vec;

int dx[4] = {-1 , 0 , 1 , 0};
int dy[4] = { 0 , 1 , 0 , -1};

int n , m;
pii par[MN][MN];
string s[MN];
pii q[MN * MN];
int L , R;
bool mk[MN][MN];
pii Fin;

char pre[4] = {'U' , 'R' , 'D' , 'L'};

bool valid(int r,int c){
	if(min(r , c) >= 0 && r < n && c < m && s[r][c] != '*') return true;
	return false;
}

void bfs(int r,int c)
{
	mk[r][c] = true;
	q[R++] = {r , c};
	while(L < R){
		pii v = q[L++];
		int tr = v.first , tc = v.second;
		for(int d=0;d<4;++d){
			if(valid(tr + dx[d] , tc + dy[d]) && !mk[tr + dx[d]][tc + dy[d]]){
				mk[tr + dx[d]][tc + dy[d]] = true;
				par[tr + dx[d]][tc + dy[d]] = {tr , tc};
				q[R++] = {tr + dx[d] , tc + dy[d]};
			}
		}
	}
}

int f(pii a,pii b){
	if(make_pair(a.first - 1 , a.second) == b) return 0;
   	if(make_pair(a.first , a.second + 1) == b) return 1;
	if(make_pair(a.first + 1 , a.second) == b) return 2;
	if(make_pair(a.first , a.second - 1) == b) return 3;
}

int main()
{
	ios_base :: sync_with_stdio(false) ,cin.tie(0) , cout.tie(0);
	cin >> n >> m;
	for(int i=0;i<n;++i)
		cin >> s[i];
	for(int i=0;i<n;++i)
		for(int j=0;j<m;++j)
			if(s[i][j] == 'F') Fin = {i , j};
	bfs(0 , 0);
	pii sv = Fin;
	while(max(Fin.first , Fin.second)){
		vec.pb(f(par[Fin.first][Fin.second] , Fin));
		Fin = par[Fin.first][Fin.second];
	}
	reverse(vec.begin() , vec.end());
	int p = 0;
	while(Fin != sv){
		cout << pre[vec[p]] << endl;
		int respX,respY;cin>>respX;
		bool my = false;
		if(respX == -1) my = true;
		cin >> respY;
		if(make_pair(respX-1 , respY - 1) == Fin) my = true;
		if(my){
			if(vec[p] < 2) swap(pre[vec[p]] , pre[vec[p] + 2]);
			else swap(pre[vec[p]] , pre[vec[p] - 2]);
			continue;
		}
		Fin = make_pair(respX-1 , respY-1);
		++p;
	}
	cout << flush << endl;
	return 0;
}

