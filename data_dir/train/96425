#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>
#include <random>
#include <bitset>
#include <iomanip>


typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define debug(x) cout << #x << " = "  << x << endl

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}



int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n,T;
	while (cin >> n >> T)
	{
		vector<vector<pair<tint,tint> > > t (n);
		forn(i,n)
		{
			tint a,ti;
			cin >> a >> ti;
			t[a-1].push_back({ti,i});
		}
		multiset<pair<tint,tint> > sol;
		tint s = 0;
		for (tint a = n-1; a >= 0; a--)
		{
			for (auto ti : t[a])
			{
				if (tint(sol.size()) <= a)
				{
					sol.insert(ti);
					s += ti.first;
				}
				else if (!sol.empty())
				{
					pair<tint,tint> r = *sol.rbegin();
					sol.erase(sol.find(r));
					s -= r.first;
					r = min(r,ti);
					sol.insert(ti);
					s += r.first;
				}
			}
			while (!sol.empty() && s > T)
			{
				pair<tint,tint> r = *sol.rbegin();
				sol.erase(sol.find(r));
				s -= r.first;
			}
			if (tint(sol.size()) >= a)
				break;
		}
		tint q = tint(sol.size());
		cout << q << "\n";
		cout << q << "\n";
		tint w = 0;
		for (auto x : sol)
		{
			if (w++)
				cout << " ";
			cout << x.second+1;
		}
		cout << "\n";
		
		
	}
	return 0;
}



