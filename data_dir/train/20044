#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
//using namespace __gnu_pbds;

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native,avx2,fma")
//#pragma GCC target("popcnt")
//#pragma GCC optimize("unroll-loops")

#define ll long long
#define ld double long
#define endl '\n'
#define pb push_back
#define F first
#define S second
#define nosign unsigned

//tree <int, null_type, less<int>,rb_tree_tag,tree_order_statistics_node_update> st;

//mt19937 gen(chrono::high_resolution_clock::now().time_since_epoch().count());

int kx[55];
int ky[55];

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //freopen("strings.in", "r", stdin);
    //freopen("strings.out", "w", stdout);
#endif // LOCAL
    int n;
    cin >> n;
    pair<int, int> a[4*n+1];
    for (int i = 0; i <= 4*n; ++i) {
      int x, y;
      cin >> x >> y;
      ++kx[x], ++ky[y];
      a[i] = {x, y};
    }
    vector<int> ansx;
    vector<int> ansy;
    for (int i = 0; i < 55; ++i)
      if (kx[i] >= n) ansx.pb(i);
    for (int i = 0; i < 55; ++i)
      if (ky[i] >= n) ansy.pb(i);
    //cout << ansx[0] << " " << ansy[0] << " " << ansx[1] << " " << ansy[1] << endl;
    if (ansx.size() > 2) swap(ansx[1], ansx[ansx.size()-1]);
    if (ansy.size() > 2) swap(ansy[1], ansy[ansy.size()-1]);
    //cout << ansx[0] << " " << ansy[0] << " " << ansx[1] << " " << ansy[1] << endl;
    for (auto to : a) {
      if ((to.S == ansy[0] || to.S == ansy[1]) && (to.F < ansx[0] || to.F > ansx[1])) {
        cout << to.F << " " << to.S << endl;
        return 0;
      }
      if ((to.F == ansx[0] || to.F == ansx[1]) && (to.S < ansy[0] || to.S > ansy[1])) {
        cout << to.F << " " << to.S << endl;
        return 0;
      }
      if (to.F != ansx[0] && to.F != ansx[1] && to.S != ansy[0] && to.S != ansy[1]) {
        cout << to.F << " " << to.S << endl;
        return 0;
      }
    }
    return 0;
}