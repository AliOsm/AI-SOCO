#include <bits/stdc++.h>
#include <ext/hash_map>

using namespace std;
using namespace __gnu_cxx;

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define mp make_pair
#define pb push_back
#define oo (1<<30)
#define sz(v) (int)v.size()
#define all(c) (c).begin(),(c).end()
#define rall(c) (c).rbegin(),(c).rend()
#define mem(s,v) memset(s,v,sizeof(s))
#define ppc(x) __builtin_popcount((x))
#define mt make_tuple // you can ignore
#define eb emplace_back

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<double> vd;
typedef vector<string> vs;
typedef pair<int, int> pi;

//int dx[] = { 0, 0, 1, -1 };
//int dy[] = { 1, -1, 0, 0 };

int inv[5005][5005];

int main() {
  ios::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("test.in", "rt", stdin);
//  freopen("o.txt", "wt", stdout);
#endif
  int n, res = 0, c = 0;
  cin >> n;
  vi v(n);
  FOR (i , 0 , n)
    cin >> v[i];
  FOR (i , 0 , n) {
    for (int j = n - 2; j >= 0; j --) {
      inv[i][j] += inv[i][j + 1] + (v[j] < i);
    }
  }
  int mx = 0;
  FOR (i , 0 , n)
  {
    FOR (j , i + 1 , n)
    {
      if (v[i] > v[j]) {
        int a = inv[v[j]][j] + inv[v[i]][i];
        int b = inv[v[i]][j] + inv[v[j]][i] - 1;
        mx = max(mx, a - b);
      }
    }
  }
  FOR (i , 0 , n)
  {
    FOR (j , 0 , n)
    {
      if (v[i] > v[j]) {
        int a = inv[v[j]][j] + inv[v[i]][i];
        int b = inv[v[i]][j] + inv[v[j]][i] - 1;
        if (a - b == mx)
          c++;
      }
    }
  }
  FOR (i , 0 , n)
  {
    FOR (j , 0 , n)
    {
      if (v[i] > v[j]) {
        int a = inv[v[j]][j] + inv[v[i]][i];
        int b = inv[v[i]][j] + inv[v[j]][i] - 1;
        if (a - b == mx) {
          swap(v[i], v[j]);
          for (int i = 1; i < n; i = i + 1) {
            int j = i;
            while (j > 0 && v[j] < v[j - 1]) {
              swap(v[j], v[j - 1]);
              j = j - 1;
              res ++;
            }
          }
          cout << res << " " << c << endl;
          return 0;
        }
      }
    }
  }
  return 0;
}
