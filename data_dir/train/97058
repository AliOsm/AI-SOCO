#pragma GCC target("avx2")
#pragma GCC optimize("O3")
   
#include <x86intrin.h>
#include <bits/stdc++.h>   
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;

template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair                                     
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)3e5 + 123;
const ll inf = (ll)1e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

ll n, k;
map <int, int> cnt;

void calc (int x) {
   if (x == 0) return;
   cnt[x] ++;
   if (x & 1) calc (x - 1);
   else calc (x / 2);
}

int dfs (int v, int cl) {
   if (v > n) return 0;
   int res = 0;
   if (v + cl - 1 <= n) res += cl;
   if (v + cl - 1 > n) res += n - v + 1;
   return res + dfs (v + v, cl + cl);
}

inline bool check (int x) {
   return (dfs (x, 2 - (x & 1)) >= k);
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> n >> k;
   int l = 1, r = n / 2, ans1 = 0, ans2 = 0;
   while (l <= r) {
      int mid = l + r >> 1;
      if (check (2 * mid)) l = mid + 1, ans1 = 2 * mid;
      else r = mid - 1;
   }
   l = 0, r = n / 2;
   while (l <= r) {
      int mid = l + r >> 1;
      if (check (2 * mid + 1)) l = mid + 1, ans2 = 2 * mid + 1;
      else r = mid - 1;   
   }
   cout << max (ans1, ans2);/*
   for (int i = 1; i <= n; i ++) {
      cout << cnt[i] << ' ' << dfs (i, 2 - (i & 1)) << endl;
   }                          */
}

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
   //cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
                          