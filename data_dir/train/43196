#include <bits/stdc++.h>
  
using namespace std;
  
template<class T> void ckmin(T &a, T b) { a = min(a, b); }
template<class T> void ckmax(T &a, T b) { a = max(a, b); }
  
#define pb push_back
#define mp make_pair
#define cotu cout
#define itn int
#define Red ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define F first
#define S second
#define sz(x) (int)x.size()
#define all(x) (x).begin(), (x).end()
#define rep(i, n) for(int i = 0; i < n; ++i)
#define repr(i,n) for(int i = n - 1; i >= 0; --i)
#define Rep(i, a, n) for(int i = (a); i <=(n); ++i)
#define repst(i, n) for(auto it = n.begin(); it != n.end(); ++it)
#define Repr(i, a, n) for(int i = (n); i >= (a); --i)
  
#define ordered_set tree<int , null_type,less<int >, rb_tree_tag,tree_order_statistics_node_update> 
  
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
  
typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
  
const int inf = int(1e9);
const int mod = inf + 7;
const int N = 1e6 + 555; // TL MB
const double PI = acos(-1.0);
const int maxn = 1e6;

int ST[4* N], SP[4* N], Add[4* N];
void Update(int k, int L, int R, int i, int j, int v)
{
    if (L > j || R < i) return;
    if (i <= L && R <= j)
    {
        SP[k] += v;
        Add[k] += v;
        return;
    }
 
    Add[k << 1] += Add[k];
    Add[(k << 1) + 1] += Add[k];
    SP[k << 1] += Add[k];
    SP[(k << 1) + 1] += Add[k];
    Add[k] = 0;
 
    int mid = (L + R) >> 1;
    Update(k << 1, L, mid, i, j, v);
    Update((k << 1) + 1, mid + 1, R, i, j, v);
    SP[k] = min(SP[k << 1], SP[(k << 1) + 1]);
}

void solve()
{
	int n;
	char c[N];
	scanf("%d", &n);
	scanf("%s", &c);
	string s = c;
	int bal = 0;
	for(int i = 0; i < s.size(); ++i){
		if(s[i] == '('){
			bal++;
			Update(1, 0, n - 1, i, n - 1, 1);
		}
		else{
			bal--;
			Update(1, 0, n - 1, i, n - 1, -1);
		}
	}
	int cnt = 0;
	for(int i = 0; i < s.size(); ++i){
		if(s[i] == '('){
			Update(1, 0, n - 1, i, n - 1, -2);
			bal-=2;
		}
		else{
			Update(1, 0, n - 1, i, n - 1, 2);
			bal+=2;
		}
		if(SP[1] == 0 && bal == 0) cnt++; 
		if(s[i] == '('){
			Update(1, 0, n - 1, i, n - 1, 2);
			bal+=2;
		}
		else{
			Update(1, 0, n - 1, i, n - 1, -2);
			bal-=2;
		}	
	}
	printf("%d\n", cnt);
}
 
int main()
{
    // Red;
    solve();
    return 0;
}