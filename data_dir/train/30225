#include <bits/stdc++.h>
#define fast ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define pb push_back
#define endl '\n'
#define MOD 1000000007
#define MOD2 998244353
using namespace std;
typedef long long int ll;

const int N = 200020;

int parent[N], sz[N];
int comp[N];
int repr[N];
bool mark[N];

void dfs(vector<vector<int>> &g, int u, int v, int k)
{
	comp[u] = k;
	for (auto x : g[u])
	{
		if (x == v or comp[x]) continue;
		dfs(g, x, u, k);
	}
}

void dfs2(vector<vector<int>> &g, int u)
{
	mark[u] = true;
	for (auto x : g[u])
	{
		if (mark[x]) continue;
		cout << u+1 << ' ' << x+1 << endl;
		dfs2(g, x);
	}
}

int main(void)
{
	fast;
	#ifdef LOCAL
	freopen("in", "r", stdin);
	freopen("out", "w", stdout);
	#endif

	int n, m, D; cin >> n >> m >> D;
	vector<vector<int>> g(n);
	vector<vector<int>> g2(n);
	for (int i = 0; i < m; ++i)
	{
		int u, v; cin >> u >> v;
		g[--u].pb(--v);
		g[v].pb(u);

		if (u and v)
		{
			g2[u].pb(v);
			g2[v].pb(u);
		}
	}

	if ((int)g[0].size() < D)
	{
		cout << "NO\n";
		return 0;
	}

	for (int i = 0; i < n; ++i)
	{
		parent[i] = i;
		sz[i] = 1;
	}

	int k = 1;
	for (int i = 1; i < n; ++i)
	{
		if (!comp[i])
		{
			dfs(g2, i, -1, k++);
		}
	}

	--k;
	if (D < k)
	{
		cout << "NO\n";
		return 0;
	}

	vector<int> v;
	cout << "YES\n";
	for (auto x : g[0])
	{
		if (mark[comp[x]]) continue;
		v.pb(x);
		cout << 1 << ' ' << x+1 << endl;
		mark[comp[x]] = true;
	}
	memset(mark, 0, sizeof mark);
	
	mark[0] = true;
	for (auto it : v)
		mark[it] = true;
	int done = k;
	for (auto x : g[0])
	{
		if (done == D) break;
		if (mark[x]) continue;

		v.pb(x);
		mark[x] = true;
		++done;
		cout << 1 << ' ' << x+1 << endl;
	}

	for (auto it : v)
		dfs2(g, it);
}