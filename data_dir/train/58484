#include <iostream>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <vector>
#include <cmath>
#include <algorithm>
#include <map>
#include <queue>
#include <set>
#include <cstdio>
#include <climits>
using namespace std;
#define ll long long
#define x first
#define y second
#define pii pair<int, int>
#define pdd pair<double, double>
#define L(s) (int)(s).size()
#define VI vector<int>
#define all(s) (s).begin(), (s).end()
#define pb push_back
#define mp make_pair
#define inf 1000000000
int n;
pii a, b, t;
pii c[111111];
pair<double, double> dst[111111];
double dc[111111];
int ua[111111], ub[111111];
int main() {

  scanf("%d%d%d%d%d%d", &a.x, &a.y, &b.x, &b.y, &t.x, &t.y);
  scanf("%d", &n);

  double alld = 0;
  for(int i = 0; i < n; ++i) {
    scanf("%d%d", &c[i].x, &c[i].y);
    double d1 = sqrt((1. * a.x - c[i].x) * (a.x - c[i].x) + (1. * a.y - c[i].y) * (a.y - c[i].y));
    double d2 = sqrt((1. * b.x - c[i].x) * (b.x - c[i].x) + (1. * b.y - c[i].y) * (b.y - c[i].y));
    dst[i] = mp(d1, d2);
    double dt = sqrt((1. * t.x - c[i].x) * (t.x - c[i].x) + (1. * t.y - c[i].y) * (t.y - c[i].y));
    dc[i] = dt;
    alld += dt * 2;
  }

  double ans = 1e20;
  for(int i = 0; i < n; ++i) {
    ans = min(ans, alld - dc[i] + dst[i].x);
    ans = min(ans, alld - dc[i] + dst[i].y);
  }

  VI idx(0);
  for(int act = 0; act < 2 && act < n; ++act) {
    double bx = 1e20, by = 1e20;
    int bxi = -1, byi = -1;
    for(int i = 0; i < n; ++i) {
      if (dst[i].x - dc[i] < bx && !ua[i]) {
        bx = dst[i].x - dc[i];
        bxi = i;
      }
      if (dst[i].y - dc[i] < by && !ub[i]) {
        by = dst[i].y - dc[i];
        byi = i;
      }
    }
    ua[bxi] = 1;
    ub[byi] = 1;
    idx.pb(bxi);
    idx.pb(byi);
  }
  sort(all(idx));
  idx.resize(unique(all(idx)) - idx.begin());

  for(int i = 0; i < L(idx); ++i) {
    for(int j = 0; j < L(idx); ++j) {
      if (i == j) continue;
      ans = min(ans, alld - dc[idx[i]] - dc[idx[j]] + dst[idx[i]].x + dst[idx[j]].y);
    }
  }

  printf("%0.9lf\n", ans);
}
