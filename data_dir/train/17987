/*
.....   .   .   .   .
  .    . .   . .   . .
  .   .....   .   .....
  .  .     .  .  .     .
*/
#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <stdio.h>
#include <cstdio>
#include <math.h>
#include <cmath>
#include <string>
#include <cstring>
#include <queue>
#include <deque>
#include <random>
#include <iomanip>
#include <bitset>
 
using namespace std;
 
template<typename T> void uin(T &a, T b) {
    if (b < a) {
        a = b;
    }
}
 
template<typename T> void uax(T &a, T b) {
    if (b > a) {
        a = b;
    }
}

// #define int long long
#define left left228
#define right right228

const int maxn = 1000 * 1000 + 228;

int dp[maxn][3][5];

int a[maxn];

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    for (int i = 1; i <= n; ++i) {
        int A;
        cin >> A;
        ++a[A];
    }
    if (m == 1) {
        cout << a[1] / 3 << endl;
        return 0;
    }
    for (int fir = 0; fir <= min(2, a[1]); ++fir) {
        for (int sec = 0; sec <= min(4, a[2]); ++sec) {
            dp[2][fir][sec] = (a[1] - fir) / 3 + (a[2] - sec) / 3;
        }
    }
    int res = 0;
    for (int i = 3; i <= m; ++i) {
        for (int fir = 0; fir <= min(2, a[i - 1]); ++fir) {
            for (int sec = 0; sec <= min(4, a[i]); ++sec) {
                int up = min(2, a[i] - sec);
                uin(up, a[i - 1] - fir);
                uin(up, a[i - 2]);
                for (int take = 0; take <= up; ++take) {
                    uax(dp[i][fir][sec], dp[i - 1][take][fir + take] + take + (a[i] - take - sec) / 3);
                }
                if (i == m) {
                    uax(res, dp[i][fir][sec]);
                }
            }
        }
    }
    cout << res << '\n';
    return 0;
}




/*
2 0 3
 
 
3 1 2
1 2
 
*/