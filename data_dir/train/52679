#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <iostream>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
const ll MOD = 998244353;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v;

ll dp[2][201][2];
ll psum[201][2];
int vec[100001];

int main() {
	int n;
	scanf("%d", &n);

	for (int i = 1; i <= n; i++)
		scanf("%d", &vec[i]);

	// 0은 이전보다 이하라는 소리. 1은 이전보다 크다는 소리.
	// dp[i][0] = sum(dp[i ~ 200][0]) + dp[i][1];
	// dp[i][1] = sum(dp[1 ~ i-1][0]) + sum(dp[1 ~ i-1][1]);

	if (vec[1] == -1)
		for (int i = 1; i <= 200; i++)
			dp[1][i][1] = 1;
	else dp[1][vec[1]][1] = 1;

	for (int j = 1; j <= 200; j++)
		for (int k = 0; k < 2; k++) {
			psum[j][k] = dp[1][j][k] + psum[j - 1][k];
			psum[j][k] %= MOD;
		}

	for (int i = 2; i <= n; i++) {
		for (int j = 1; j <= 200; j++) {
			dp[i & 1][j][0] = psum[200][0] - psum[j - 1][0] + dp[i & 1 ^ 1][j][1];
			dp[i & 1][j][0] += MOD;
			dp[i & 1][j][0] %= MOD;

			dp[i & 1][j][1] = psum[j - 1][0] + psum[j - 1][1];
			dp[i & 1][j][1] %= MOD;
		}

		if (vec[i] != -1)
			for (int j = 1; j <= 200; j++)
				for (int k = 0; k < 2; k++)
					if (vec[i] != j)
						dp[i & 1][j][k] = 0;

		for (int j = 1; j <= 200; j++)
			for (int k = 0; k < 2; k++) {
				psum[j][k] = dp[i & 1][j][k] + psum[j - 1][k];
				psum[j][k] %= MOD;
			}

		memset(dp[i & 1 ^ 1], 0, sizeof(dp[i & 1 ^ 1]));
	}

	printf("%lld\n", psum[200][0]);
}