#pragma GCC optimize ("Ofast")
#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define ll long long int
#define pb push_back
#define fi first
#define se second
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
const int mod = 1e9 + 7;
typedef long double f80;
#ifndef LOCAL
#define endl '\n'
#endif
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

const int N = 5e4 + 5;
const int NN = 1e6 + 5;
const int B = 730;

struct node{
    int cnt[2], tot;
    vector<int> ss[2];
    node *pt[2];
    node(){
        for(int i = 0; i < 2; i++)
            cnt[i] = 0, pt[i] = NULL;
        tot = 0;
    }
};
struct trie_bits{
    node *tr;
    int bits;
    trie_bits(int b): bits(b) { tr = new node(); } // b -> number of bits
    void insert(int x,int lol){
        insert(tr, x, lol, bits - 1);
    }
    void del(int x,int lol){
        del(tr, x, lol, bits - 1);
    }
    bool insert(node *cur, int x, int lol, int b, bool find = 0){
        if(b == -1){
            cur -> tot++;
            return 1;
        }
        bool c = (x & (1 << b)) ? 1 : 0;
        if(find){
            if(!cur -> cnt[c])
                return 0;
        }
        else{
            if(cur -> pt[c] == NULL)
                cur -> pt[c] = new node();
            cur -> cnt[c]++;
            int mini = lol;
            if(!cur -> ss[c].empty())
                mini = min(mini, lol);
            cur -> ss[c].pb(mini);
            cur -> tot++;
        }
        bool f = insert(cur -> pt[c], x, lol, b - 1, find);
        return f;
    }
    void del(node *cur, int x, int lol, int b){
        if(b == -1){
            cur -> tot--;
            return;
        }
        bool c = (x & (1 << b)) ? 1 : 0;
        cur -> cnt[c]--;
        cur -> ss[c].pop_back();
        cur -> tot--;
        del(cur -> pt[c], x, lol, b - 1);
    }
    int max_xor(int x,int lol){
        return max_xor(tr, x, lol, bits - 1);
    }
    int max_xor(node *cur, int x, int lol, int b){ 
        if(b == -1)
            return 0;
        bool c = (x & (1 << b)) ? 1 : 0;
        c ^= 1;
        if(cur -> cnt[c] && (cur -> ss[c]).back() <= lol)
            return (1 << b) + max_xor(cur -> pt[c], x, lol, b - 1);
        else
            return max_xor(cur -> pt[(c ^ 1)], x, lol, b - 1);
    }
} b(20), b1(20);
int p[NN], a[N];
vector<pair<pii,int>> q[N / B + 5];
int ans[N];
int blk(int i){
    return (i - 1) / B + 1;
}
void solve(){
    int n, m;
    cin >> n >> m;
    // n = 5e4, m = 5e3;
    fr(i, 1, n){
        cin >> a[i];
        // a[i] = rand() % NN;
    }
    fr(i, 1, NN - 1)
        p[i] = p[i - 1] ^ i;
    fr(i, 1, m){
        int l, r;
        cin >> l >> r;
        // l = 1, r = n;
        q[blk(l)].pb({{r, l}, i});
    }
    fr(i, 1, blk(n)){
        sort(all(q[i]));
        int r = min(i * B, n);
        int gans = 0;
        int be = min(i * B, n);
        for(auto x : q[i]){
            if(x.fi.fi <= be){
                int anss = 0;
                fr(j, x.fi.se, x.fi.fi){
                    b.insert(p[a[j] - 1], a[j]);
                    b1.insert(p[a[j]], -a[j]);
                    anss = max(anss, b.max_xor(p[a[j]], a[j]));
                    anss = max(anss, b1.max_xor(p[a[j] - 1], -a[j]));
                }
                ans[x.se] = anss;
                fr(j, x.fi.se, x.fi.fi){
                    b.del(p[a[j] - 1], a[j]);
                    b1.del(p[a[j]], -a[j]);
                }
            }
            else{
                int anss = 0;
                fr(j, r + 1, x.fi.fi){
                    b.insert(p[a[j] - 1], a[j]);
                    b1.insert(p[a[j]], -a[j]);
                    gans = max(gans, b.max_xor(p[a[j]], a[j]));
                    gans = max(gans, b1.max_xor(p[a[j] - 1], -a[j]));
                }
                r = x.fi.fi;
                fr(j, x.fi.se, be){
                    b.insert(p[a[j] - 1], a[j]);
                    b1.insert(p[a[j]], -a[j]);
                    anss = max(anss, b.max_xor(p[a[j]], a[j]));
                    anss = max(anss, b1.max_xor(p[a[j] - 1], -a[j]));
                }
                anss = max(anss, gans);
                fr(j, x.fi.se, be){
                    b.del(p[a[j] - 1], a[j]);
                    b1.del(p[a[j]], -a[j]);
                }
                ans[x.se] = anss;
            }
        }
        fr(j, be + 1, r){
            b.del(p[a[j] - 1], a[j]);
            b1.del(p[a[j]], -a[j]);
        }
    }
    fr(i, 1, m){
        cout << ans[i] << endl;
    }
}
signed main()
{
    IO;
    #ifdef LOCAL
     freopen("inp.txt", "r", stdin);
     freopen("out.txt", "w", stdout);
    #endif
    clock_t clk = clock();
    int t;
    // cin >> t;
    t = 1;
    fr(i, 1, t){
        solve();
    }
    cerr << endl << setprecision(10) << fixed << (double)(clock() - clk) / CLOCKS_PER_SEC;
    return 0;
}