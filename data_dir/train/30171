# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace std;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
            
int n, m;
set < pair < int, int > > s;
int g[N], p[N];
int del[N];
int mx = 0;

void build () {
	s.clear();
	mx = 0;
	vector < int > v;
	For (i, 1, n * 2) {
		if (del[i]) continue;
		if (!g[i]) {
			s.insert(mp(p[i], i));
			v.pb(p[i]);
		} else {
			if (p[i] - p[g[i]] > 0) mx += p[i] - p[g[i]];
		}
	}

	sort(every(v));
	int c = 1;
	while (v.size()) {
		mx += v.back() * c;
		v.pop_back();
		c *= -1;
	}

	For (i, 1, n * 2) {
		if (del[i]) continue;
		if (g[i]) {
			if (del[g[i]]) {
				s.insert(mp(p[i] - mx, i));
				continue;
			}
			s.insert(mp(mx + p[i] - p[g[i]], i));
		}
	}
}
int main () {
	cin >> n >> m;
	For (i, 1, 2 * n) {
		int x;
		cin >> x;
		p[i] = x;
	}
	

	For (i, 1, m) {
		int l, r;
		cin >> l >> r;
		g[l] = r;
		g[r] = l;
	}
    int t;
    cin >> t;
    int last = 0;
    if (t == 2) {
    	cin >> last;
    	del[last] = 1;
    }

    For (i, 1, n) {
    	
    	if (g[last] && !del[g[last]]) {
    		cout << g[last] << '\n';
    		del[g[last]] = 1;
    		last = 0;
    		build ();
    	} else {
    		if (s.empty() || del[s.rbegin() -> S]) build();
    		cout << s.rbegin() -> S << '\n';
    		del[s.rbegin() -> S] = 1;
    		s.erase(*s.rbegin());
    	}
    	if (t == 2 && n == i) break;
    	cin >> last;
    	del[last] = 1;
    }


	return Accepted;
}

// Coded By OB