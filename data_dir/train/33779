#include <bits/stdc++.h>
#define int long long 
using namespace std;
    long long powmod(long long a,long long b,long long mod) {
        if (b==0 || a==1)  {if (mod==1) return 0; else return 1; }
       
        if (b%2==0) { long long k=powmod(a,b/2,mod); return (k*k)%mod; }
        else {long long k=powmod(a,b/2,mod); return ( (k*k) %mod *a)% mod; }
    }
    long long gcd(long long a, long long b) {
        if (a==0) return b;
        if (b==0) return a;
        if (a>b) return gcd(a%b,b); else return gcd(b%a,a);
    }
      int prime(int p) { // 1 - простое
        for (int i=2;i*i<=p;i++) {
            if (p%i==0 && i<p) return i;  
        }
        return 1;
    }
    
     int inv(int a, int mod) {
        return powmod(a,mod-2,mod); 
    }
  
  
 int m[100000];
 int n[100000];
 
    void solve () {
       
       
         /* --------- */
    int a;
    int mod=998244353; 
   // cout<<(inv(8,mod)*7)%mod<<" "; 
    cin>>a;
    map <int,int> nums;
    int sum=0; 
    vector <vector<int>> m(a); 
    
    for (int i=0;i<a;i++) {
        int k;
        cin>>k; for (int j=0;j<k;j++) {int x; cin>>x; m[i].push_back(x); nums[x]++;  }
    }
    int qq=1;
    qq*=inv(a,mod);
    qq*=inv(a,mod);
    qq%=mod; 
    int cur=0; 
    for (int i=0;i<a;i++) {
        int u=m[i].size(); 
        int inv1=qq*inv(u,mod);
        inv1%=mod; 
        for (int j=0;j<m[i].size();j++) {
          int lol=inv1*nums[m[i][j]]; 
          lol%=mod; 
             
            cur+=lol; 
            cur%=mod; 
        }
    }
    cout<<cur; 
         /* --------- */  
            return;
    }
     
     
     
    signed main() {
       
         ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
       
       //  cout<<fixed<<setprecision(10); 
       
          int tututu;
          tututu=1;
          
       // cin>>tututu; // если нет запросов, то закоментить
        
          for (int qwerty=0;qwerty<tututu;qwerty++) solve();
      
       
        return 0;
    }