#include <iostream>
#include <cmath>
using namespace std;

const int N = 5005;
const int MOD = 1000000007;
int n;
int p[N][3];

bool bipartite(int v, int col, int sol)
{
	p[v][2] = col;
	for (int i = 0; i < n; ++i)
		if (abs(p[v][0]-p[i][0])+abs(p[v][1]-p[i][1]) > sol)
		{
			if (p[i][2] == p[v][2] || (p[i][2] == 0 && !bipartite(i, -col, sol)))
				return 0;
		}
	return 1;
}

int valid(int sol)
{
	for (int i = 0; i < n; ++i)
		p[i][2] = 0;
	int cnt = 0;
	for (int i = 0; i < n; ++i)
		if (!p[i][2])
		{
			if (!bipartite(i, 1, sol))
				return -1;
			cnt ++;
		}
	return cnt;
}

int main()
{
	cin >> n;
	for (int i = 0; i < n; ++i)
		cin >> p[i][0] >> p[i][1];
	int l = -1, r = 2*N+10;
	while (r-l > 1)
	{
		int mid = (r+l)/2;
		if (valid(mid) != -1)
			r = mid;
		else
			l = mid;
	}
	int ans = 1, k = valid(r);
	for (int i = 0; i < k; ++i)
		(ans *= 2) %= MOD;
	cout << r << '\n' << ans << '\n';
	return 0;
}
