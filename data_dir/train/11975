#include <iostream>
#include <algorithm>
#include <cmath>

using namespace std;

const int limit=5000000;

typedef long long int ll;

struct elem {
  int i,j;
  ll s;
  elem() {}
  elem(int i,int j,ll s):i(i),j(j),s(s) {}
};

bool operator<(elem e1,elem e2)
{
  if (e1.s!=e2.s) return e1.s<e2.s;
  if (e1.j!=e2.j) return e1.j<e2.j;
  return e1.i>e2.i;
}

int n;
int a[limit];
ll sa[limit];
int nlista;
elem lista[limit];
int nlis;
elem lis[limit];
int sol;
pair<int,int> vsol[limit];

void compute()
{
  int ind=nlis;
  int solact=0;
  while (ind>=1) {
    solact++;
    int i=lis[ind].i-1;
    while (i<lis[ind].j) ind--;
  }
  if (solact<=sol) return;
  sol=solact;
  ind=nlis;
  int nsol=0;
  while (ind>=1) {
    vsol[nsol++]=pair<int,int> (lis[ind].i,lis[ind].j);
    int i=lis[ind].i-1;
    while (i<lis[ind].j) ind--;
  }
  /*
  for (int i=1;i<=nlis;i++) {
    while (ind<i-1 and lis[ind+1].j<lis[i].i) ind++;
    computed[i]=1+computed[ind];
  }
  maximize(sol,computed[nlis]);
  */
}

int main()
{
  cin>>n;
  for (int i=1;i<=n;i++) {
    cin>>a[i];
    sa[i]=sa[i-1]+a[i];
  }
  for (int i=1;i<=n;i++)
    for (int j=i;j<=n;j++)
      lista[nlista++]=elem(i,j,sa[j]-sa[i-1]);
  sort(lista,lista+nlista);
  for (int i=0;i<nlista;i++) {
    if (i==0 or lista[i].s!=lista[i-1].s) {
      nlis=0;
      for (int j=i;j<nlista and lista[j].s==lista[i].s;j++) 
	if ((j==i or lista[j].j!=lista[j-1].j) and (nlis==0 or lis[nlis].i<lista[j].i))
	  lis[++nlis]=lista[j];
      compute();
    }
  }
  cout<<sol<<endl;
  for (int i=0;i<sol;i++)
    cout<<vsol[i].first<<" "<<vsol[i].second<<endl;
}
