//ITNOG
#include<bits/stdc++.h>

using namespace std;
#define int long long


const int maxN = 50 + 5;
const int mod = 1000*1000*1000 + 7;
int a[maxN];
double dp[maxN][maxN][maxN];
int p[maxN];
int c[maxN][maxN];

double power(double x, int k)
{
    if(!k) return 1;
    
    double ans = power(x, k / 2);
    
    ans *= ans;
    
    if(k & 1) ans  *= x;

    return ans;
}

main() 
{
    ios::sync_with_stdio(0); cin.tie(0);
    for(int i = 0; i < maxN; i ++) c[i][0] = 1;

    for(int i = 1; i < maxN; i ++)
	  for(int j = 1; j < maxN; j ++)
		c[i][j] = c[i - 1][j - 1] + c[i - 1][j];
    

    int n, m; cin >> n >> m;

    for(int i = 1; i <= m; i ++)
	  cin >> a[i];

    for(int i = 0; i <= n; i ++)
	  dp[0][i][n] = 1;
    
    
    for(int i = 1; i <= m; i ++)
	  for(int j = 1; j <= n; j ++)
		for(int k = 0; k <= n; k ++)
		{
		    for(int t = k; t <= n; t ++)
		    {
			  //cout << i << ' ' << j << ' ' << k << ' ' << t << endl;
			  int tmp = t - k; if(tmp > j * a[i]) continue;
//			  if(i == 2 && j == 2 && k == 0 && t == 2) cout << 
			  dp[i][j][k] += power(1.0 / m, tmp) * c[t][tmp] * dp[i - 1][j][t];
		    }
		}

//    cout << dp[1][2][2] << endl;
    double res = 0;
    for(int i = 1; i <= n; i ++)
	  res += (dp[m][i][0] - dp[m][i - 1][0]) * i; //cout << dp[m][i][0] << ' '; cout << endl;

    cout << fixed << setprecision(14) << res << endl;
    return 0;
}
