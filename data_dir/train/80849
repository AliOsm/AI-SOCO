/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
#define mod 1000000007
#define OS //single input use oeis
lli INF=1e17;
lli eps=1e-8;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,x,c,m;
const double pi=3.14159265358979323846;
lli add(lli a, lli b) {
 	lli res = a + b;
 
 	while (res >= mod) res -= mod;
 
 	while (res < 0) res += mod;
 
 	return res;
}
// Thi
//matrix exponentiation is associative and distributive
template <typename T>
class Matrix {

public:

    vector < vector <T> > A;
    int r,c;

    //Default Constructor
    Matrix()
    {
        this->r = 0;
        this->c = 0;
    }

    //Matrix with given dimensions and random values
    Matrix(int r,int c)
    {
        this->r = r;
        this->c = c;
        A.assign(r , vector <T> (c));
    }

    //Matrix with given value and dimensions
    Matrix(int r,int c,T val)
    {

        this->r = r;
        this->c = c;
        A.assign(r , vector <T> (c , val));
    }

    //Identity matrix with given dimension
    Matrix(int n)
    {
        this->r = this->c = n;
        A.assign(n , vector <T> (n));
        for(int i=0;i<n;i++)
            A[i][i] = (T)1;
    }

    //Print the matrix
    void display()
    {
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
                cout << A[i][j] << " ";

            cout << endl;
        }
    }

    //Input called to get input
    //Put custom code
    void input()
    {
        // for(int i=0;i<r;i++)
        //     for(int j=0;j<c;j++)
        //         define inout here
    }

    //Overloaded * operator to multiply 2 matrices
    //with conformable dimensions
    Matrix& operator * (Matrix &B)
    {
        
        assert(c == B.r);
        int i,j,k;
        int x = r;
        int y = c;
        int z = B.c;

        Matrix <T> &C = *(new Matrix<T>(x,z,0));

        for(i=0 ; i<x ; i++)
            for(j=0 ; j<z ; j++)
                for(k=0 ; k<y ; k++)
                {
                    C[i][j] = (C[i][j] + ( (long long )A[i][k] * (long long)B[k][j] ) );
                    #ifdef mod
                    C[i][j] %= mod;
                    #endif
                }

        return C;
    }

    //Overloaded *= operator to add 2 matrices
    //of conformable dimensions
    //and save result in first matrix
    void operator *= (Matrix &B)
    {
        assert(c == B.r);
        lli i,j,k;
        lli x = r;
        lli y = c;
        lli z = B.c;

        Matrix <T> &C = *(new Matrix<T>(x,z,0));

        for(i=0 ; i<x ; i++)
            for(j=0 ; j<z ; j++)
                for(k=0 ; k<y ; k++)
                {
                    C[i][j] = (C[i][j] + ( (long long)A[i][k] * (long long)B[k][j] ) );
                    #ifdef mod
                    C[i][j] %= mod;
                    #endif
                }
        this->r = C.r;
        this->c = C.c;
        this->A = C.A;
        delete &C;
    }

    //Overloaded + operator to add 2 matrices
    //with same dimensions
    Matrix& operator + (Matrix &B)
    {
        assert(r == B.r);
        assert(c == B.c);

        Matrix <T> &C = *(new Matrix<T>(r,c,0));
        int i,j;
        for(i=0;i<r;i++)
            for(j=0;j<c;j++)
            {
                C[i][j] = A[i][j] + B[i][j];
                #ifdef mod
                C[i][j] %= mod;
                #endif
            }

        return C;
    }

    //Overloaded += operator to add 2 matrices
    //of same dimensions
    //and save result in first matrix
    void operator += (Matrix &B)
    {
        assert(r == B.r);
        assert(c == B.c);

        int i,j;
        for(i=0;i<r;i++)
            for(j=0;j<c;j++)
            {
                A[i][j] = A[i][j] + B[i][j];
                #ifdef mod
                A[i][j] %= mod;
                #endif
            }
    }

    //Overload unary - to get negative of a matrix
    Matrix& operator - ()
    {
        Matrix <T> &C = *(new Matrix<T>(r,c,0));
        int i,j;
        for(i=0;i<r;i++)
            for(j=0;j<c;j++)
            {
                C[i][j] = -A[i][j];
                #ifdef mod
                C[i][j] %= mod;
                if(C[i][j] < 0)
                    C[i][j] += mod;
                #endif
            }

        return C;
    }

    //Overload binary - to subtract a matrix
    //from other with same dimensions
    Matrix& operator - (Matrix &B)
    {
        assert(r == B.r);
        assert(c == B.c);

        Matrix <T> &C = *(new Matrix<T>(r,c,0));
        int i,j;
        for(i=0;i<r;i++)
            for(j=0;j<c;j++)
            {
                C[i][j] = A[i][j] - B[i][j];
                #ifdef mod
                C[i][j] %= mod;
                if(C[i][j] < 0)
                    C[i][j] += mod;
                #endif
            }

        return C;
    }

    //Overload binary - to subtract a matrix
    //from other with same dimensions
    //and save result in first matrix
    void operator -= (Matrix &B)
    {
        assert(r == B.r);
        assert(c == B.c);

        int i,j;
        for(i=0;i<r;i++)
            for(j=0;j<c;j++)
            {
                A[i][j] = A[i][j] - B[i][j];
                #ifdef mod
                A[i][j] %= mod;
                if(A[i][j] < 0)
                    A[i][j] += mod;
                #endif
            }
    }

    //Overload ^ operator to raise a square matrix to a power
    //Using binary matrix exponentiation
    Matrix& operator ^ (long long n)
    {
        assert(r == c);

        int i,j;
        Matrix <T> &C = *(new Matrix<T>(r));

        Matrix <T> &X = *(new Matrix<T>(r,c,0));
        for(i=0;i<r;i++)
            for(j=0;j<c;j++)
                X[i][j] = A[i][j];

        while(n)
        {
            if(n&1)
                C *= X;

            X *= X;
            n /= 2;
        }
        delete &X;
        return C;
    }

    //overloaded ^= operator to raise square matrix to power
    //Using binary exponentiation and store the result
    //in same matrix
    void operator ^= (long long n)
    {
        assert(r == c);

        int i,j;
        Matrix <T> &C = *(new Matrix<T>(r));

        Matrix <T> &X = *(new Matrix<T>(r,c,0));
        for(i=0;i<r;i++)
            for(j=0;j<c;j++)
                X[i][j] = A[i][j];

        while(n)
        {
            if(n&1)
                C *= (*this);

            (*this) *= (*this);
            n /= 2;
        }
        this->A = C.A;
        delete &C;
    }

    //transpose operation
    Matrix& transpose()
    {
        Matrix <T> &C = *(new Matrix<T>(c,r));

        int i,j;
        for(i=0;i<r;i++)
            for(j=0;j<c;j++)
                C[j][i] = A[i][j];

        return C;
    }

    //transpose inplace
    void transposeInplace()
    {
        Matrix <T> &C = *(new Matrix<T>(c,r));

        int i,j;
        for(i=0;i<r;i++)
            for(j=0;j<c;j++)
                C[j][i] = A[i][j];

        this->r = C.r;
        this->c = C.c;
        this->A = C.A;
        delete &C;
    }

    //Overload to access/set elements without using dot operator
    //Example :
    // Matrix m(5,3);
    // m.A[i][j] is valid to access
    // m[i][j] is valid as well
    vector<T>& operator [](int i)
    {
        assert(i < r);
        assert(i >= 0);
        return A[i];
    }

    //outstream has been overloaded to quickly print the matrix 
    //help quicken the debugging process
    //eg) cout << M <<endl;
    friend ostream& operator << (ostream &out, Matrix &M)
    {
        for (int i = 0; i < M.r; ++i) {
            for (int j = 0; j < M.c; ++j) {
                out << M[i][j] << " ";
            }
            out << '\n';
        }
        return out;
    }

};
Matrix<lli> me(Matrix<lli> &a,lli b)
{
    Matrix <lli> res=a;
    // Matrix<lli> bb(2,2,0);
    // bb[0][0]=1;
    // bb[0][1]=0;
    // bb[1][0]=0;
    // bb[1][1]=1;
    // a=a*bb;
    while(b)
    {
        if(b&1)
        res=(res*a);
        a=a*a;
        b=b>>1;
    }
    return res;
}
vector<lli> dp(5,0);
int main()
{
 IO;
 OS;
 lli t;
 cin>>t;
//  string ss="\0";
 for(int i=1;i<=t;i++)
 {
     lli n,b;
     cin>>n>>b;
     lli dd=b;
     lli gg=__gcd(n,b);
     dd=dd/gg;
    //  dd++;
    //  lli de=n+b-1;
    //  lli gf=b;
    // cout<<dd<<" ";
    lli ans=dd;
    // cout<<gg<<" ";
    lli jk=dd;
     vector<lli> vv;
        for(lli j=2;j<=sqrt(dd);j++)
     {
         if(dd%j==0)
         {
             vv.push_back(j);
             while(dd%j==0)
             dd/=j;
         }
     } 
     if(dd>1)
     vv.push_back(dd);
    //  cout<<dd<<"\n";
    // cout<<vv.size()<<" ";
    lli len=vv.size();
    // cout<<ans<<" ";
     for(int j=1;j<(1ll<<len);j++)
     {
         bitset<40> bb(j);
         lli cc=0;
         lli ff=1;
         for(int jj=0;jj<40;jj++)
         {
             if(bb[jj]==0)
             continue;
             ff=ff*vv[jj];
             cc++;
            //  cout<<cc<<" ";
         }
        //  cout<<cc<<" "<<j<<" "<<bb<<" ";
         if(cc&1)
         ans-=(jk/ff);
         else
         ans+=(jk/ff);
     }
     cout<<ans<<"\n";
    //  cout<<dd<<" "<<gg<<"\n";
 }
}