/*﹄﹃﹄﹃﹄﹃﹄﹃﹄﹃﹄﹃﹄﹃﹄﹃﹄﹃★☆
 |Author: WiYR
 |Created Time.: 2013/9/29 11:04:13
 |File Name: Apple Tree.cpp
 |Description: 
★☆﹄﹃﹄﹃﹄﹃﹄﹃﹄﹃﹄﹃﹄﹃﹄﹃*/
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
typedef __int64 i64;
typedef long long ll;
const double eps=1e-7;
const int inf=0x7FFFFFFF;
#define rep(i,n) for(int i=0;i<n;i++)
#define mset(a,i) memset(a,i,sizeof(a))
#define PB(i) push_back(i)
#define lson l,m,o<<1
#define rson m+1,r,o<<1|1

using namespace std;
const int maxn=2e5+10;
const i64 lim=10000000000000LL;
vector<int>G[maxn];
int w[maxn],b[maxn],cnt[maxn];
i64 sum,a[maxn];
int tmp;
int gcd(int x,int y){
    return x==0?y:gcd(y%x,x);
}
bool dfs(int u,int f){
    rep(i,G[u].size()){
        int v=G[u][i];
        if(v!=f){
            cnt[u]++;
            if(!dfs(v,u)) return false;
        }
    }
    if(!cnt[u]){
        a[u]=1;
        return true;
    }
    i64 lcm=1;
    rep(i,G[u].size()){
        int v=G[u][i];
        if(v==f) continue;
        lcm=lcm/gcd(lcm,a[v])*a[v];
        if(lcm>=lim) 
            return false;
    }
    a[u]=cnt[u]*lcm;
    return a[u]<lim;
}
void down(int u,int f){
    rep(i,G[u].size()){
        int v=G[u][i];
        if(v!=f){
            b[v]=b[u]/cnt[u];
            down(v,u);
        }
    }
}
int main() {
//  freopen("input.txt","r",stdin); 
    int n,u,v;
    scanf("%d",&n);
    rep(i,n) scanf("%d",&w[i+1]),sum+=w[i+1];
    rep(i,n-1){
        scanf("%d%d",&u,&v);
        G[u].PB(v);
        G[v].PB(u);
    }
    if(!dfs(1,-1))
        printf("%I64d\n",sum);
    else {
        b[1]=a[1];
       // cout<<a[1]<<endl;
        down(1,-1);
        tmp=inf;
        for(int i=1;i<=n;i++)if(cnt[i]==0){
            tmp=min(tmp,w[i]/b[i]);
        }    
        for(int i=1;i<=n;i++)if(cnt[i]==0){
            sum-=tmp*b[i];
        }
        printf("%I64d\n",sum);
    }
    return 0;
}
