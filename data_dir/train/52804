//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#include <iomanip>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define INF (100000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef pair<ll, int> pli;


#define matrix vector< vector<ll> >

matrix matmul(matrix &a, matrix &b){
    int i, j, k, n = a.size();
    matrix ans (n, vector<ll>(n));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            ll temp = 0;
            for(k=0;k<n;k++)    temp = (temp + a[i][k] * b[k][j]) % MOD;
            ans[i][j] = temp;
        }

    return ans;
}

matrix matpwr(matrix &a, ll p){
    int n = a.size();
    matrix ans(n, vector<ll> (n));
    for(int i=0;i<n;i++)    ans[i][i] = 1;

    while(p){
        if(p&1) ans = matmul(ans, a);

        a = matmul(a, a);
        p >>= 1;
    }
    return ans;
}


ll pwr(ll base, ll p, ll mod = MOD){
    ll ans = 1;
    while(p){
        if(p & 1)   ans = (ans * base) % mod;
        base = (base * base) % mod;
        p /= 2;
    }
    return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


ll lcm(ll a, ll b){
    return (a*b) / gcd(a, b);
}


ll invMod(ll n, ll mod = MOD){
    return pwr(n, mod-2);
}


int n, dist[403];
bool roads[403][403], railways[405][403];
bool reach_by_road[403][403], reach_by_rail[403][403];


int main()
{
    ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    int m;
    cin>>n>>m;

    if(n == 2){
        cout<<"-1";
        return 0;
    }

    for(int i=1;i<=n;i++){
        dist[i] = INF;
        for(int j=1;j<=n;j++)
            if(i != j)
                roads[i][j] = true;
    }

    while(m--){
        int a, b;
        cin>>a>>b;
        roads[a][b] = roads[b][a] = false;
        railways[a][b] = railways[b][a] = true;
    }

    priority_queue<ii> pq;
    dist[1] = 0;
    pq.push(ii (0, 1));

    int ans = 0;
    while(!pq.empty()){

        int d = -pq.top().ff;
        int v = pq.top().ss;
        pq.pop();

        if(d > dist[v]) continue;

        for(int i=1;i<=n;i++)
            if(roads[v][i] && dist[i] > d+1){
                dist[i] = d+1;
                pq.push(ii (-dist[i], i));
            }
    }

    ans = max(ans, dist[n]);

// for(int i=1;i<=n;i++)   cout<<dist[i]<<" ";cout<<endl;
// cout<<ans<<endl;

    for(int i=1;i<=n;i++)
        dist[i] = INF;

    dist[1] = 0;
    pq.push(ii (0, 1));
    while(!pq.empty()){

        int d = -pq.top().ff;
        int v = pq.top().ss;
        pq.pop();

        if(d > dist[v]) continue;

        for(int i=1;i<=n;i++)
            if(railways[v][i] && dist[i] > d+1){
                dist[i] = d+1;
                pq.push(ii (-dist[i], i));
            }
    }

    ans = max(ans, dist[n]);

    if(ans == INF)  ans = -1;
    cout<<ans;
    return 0;
}










