#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

const int maxn = 2e5 + 5;

vector<int> g[maxn];
int pi[maxn], deg[maxn], cnt;
bool used[maxn];

void dfs(int u, int p){
	used[u] = true;
	pi[u] = p;
	if(p == 0) cnt++;
	for(auto &v : g[u])
		if(!used[v])
			dfs(v, u);
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	int n, m, d;
	cin >> n >> m >> d;
	for(int i = 0, a, b; i < m; i++){
		cin >> a >> b;
		a--;
		b--;
		g[a].push_back(b);
		g[b].push_back(a);
		deg[a]++;
		deg[b]++;
	}
	
	dfs(0, -1);
	
	if(deg[0] < d || cnt > d){
		cout << "NO" << endl;
		return 0;
	}
	
	for(auto &v : g[0]){
		if(pi[v] == 0) continue;
		if(cnt < d){
			pi[v] = 0;
			cnt++;
		}
	}
	
	cout << "YES" << endl;
	for(int i = 1; i < n; i++)
		cout << i + 1 << " " << pi[i] + 1 << endl;

	return 0;
}
