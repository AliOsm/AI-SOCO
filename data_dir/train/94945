#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

bool isNumber(char c) {
    return (c >= '0' && c <= '9');
}

bool type(string s) {
    return (s[0] == 'R' && s.find('C') != -1 && isNumber(s[1]));
}

int to_int(string s) {
    int ans = 0;
    for(int i = 0; i < s.size(); i++) {
        ans *= 10;
        ans += (s[i] - '0');
    }
    return ans;
}

map<int, string> my_map;

void build(string s) {
    int x = 0, p = 1;
    for(int i = s.size() - 1; i >= 0; i--) {
        x += ((s[i] - 'A') + 1) * p;
        p *= 26;
    }
    if(x > 1000000) return;
    //cout << s << " " << x << endl;
    my_map[x] = s;
    for(char i = 'A'; i <= 'Z'; i++) {
        build(s + i);
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    build("");
    int n;
    cin >> n;
    for(int i = 0; i < n; i++) {
        string s;
        cin >> s;
        if(type(s)) {
            //RXCY
            //0123
            int c = s.find('C');
            string x = s.substr(1, c - 1);
            string y = s.substr(c + 1, s.size() - (c + 1));
            int t = to_int(y);
            cout << my_map[t] << x << endl;
        }
        else {
            int idx = 0, x = 0, p = 1;
            while(!isNumber(s[idx])) {
                idx++;
            }
            for(int i = idx - 1; i >= 0; i--) {
                x += ((s[i] - 'A') + 1) * p;
                p *= 26;
            }
            string y = s.substr(idx, s.size() - idx);
            cout << "R" << y << "C" << x << endl;
        }
    }
}

