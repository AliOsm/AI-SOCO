#include<bits/stdc++.h>

#define MAX 300005
#define MOD 1000000007
#define eps 1e-7

using namespace std;

typedef long long ll;
typedef complex <double> point;

#define pii pair<int, int>

struct item {
    int t, d, p, idx;

    item() {}
    item(int t, int d, int p, int idx) : t(t), d(d), p(p), idx(idx) {}

    bool operator < (const item &it) {
        if (d == it.d)
            return t < it.t;
        return d < it.d;
    }
};

int n;
vector<item> ve;

int dp[405][4005];

int solve(int i, int t) {
    if (i >= n)
        return 0;

    int &ret = dp[i][t];
    if (ret + 1)
        return ret;
    ret = 0;

    int sol1 = solve(i + 1, t), sol2 = 0;

    if (ve[i].t + t < ve[i].d)
        sol2 = ve[i].p + solve(i + 1, t + ve[i].t);

    return ret = max(sol1, sol2);
}

vector<int> res;

void road(int i, int t) {
    if (i >= n)
        return;

    int sol1 = solve(i + 1, t), sol2 = 0;

    if (ve[i].t + t < ve[i].d)
        sol2 = ve[i].p + solve(i + 1, t + ve[i].t);

    if (sol2 > sol1) {
        res.push_back(ve[i].idx);
        road(i + 1, t + ve[i].t);
    }
    else
        road(i + 1, t);
}

int main() {

#ifdef Adel_SaadEddin_PC
    freopen("input.in", "r", stdin);
    freopen("output.out", "w", stdout);
#endif //Adel_SaadEddin_PC

    ios_base::sync_with_stdio(false);

    memset(dp, -1, sizeof(dp));
    cin >> n;

    for (int i = 0; i < n; i++) {
        int t, d, p; cin >> t >> d >> p;
        ve.push_back(item(t, d, p, i));
    }

    sort(ve.begin(), ve.end());

    cout << solve(0, 0) << "\n";
    road(0, 0);

    cout << res.size() << "\n";
    for (auto x : res)
        cout << x + 1 << " ";

    return 0;
}




