#include <iostream>
#include <string>
#include <cstring>
using namespace std;
int dp[110][110][110];
int prev[110][110][110];
void update(int &a, int d, int &b, int k) {
	if (a < d) {
		a = d;
		b = k;
	}
}
int f[110];
int next[110][30];
int main() {
	string s, t, v;
	cin >> s >> t >> v;
	memset(dp, 0, sizeof(dp));
	memset(prev, -1, sizeof(prev));
	int l = s.size(), m = t.size(), n = v.size();
	f[0] = -1;
	for (int i = 1; i <= n; i++) {
		int j = f[i-1];
		while (j >= 0 && v[j] != v[i-1]) j = f[j];
		f[i] = ++j;
	}
	for (int i = 0; i <= l; i++) {
		for (int j = 0; j <= m; j++) {
			for (int k = 1; k < n; k++) {
				dp[i][j][k] = -101010;
			}
		}
	}
	for (int i = 0; i < l; i++) {
		for (int j = 0; j < m; j++) {
			for (int k = 0; k < n; k++) {
				dp[i+1][j+1][k] = dp[i+1][j][k];
				prev[i+1][j+1][k] = prev[i+1][j][k];
				update(dp[i+1][j+1][k], dp[i][j+1][k], prev[i+1][j+1][k], prev[i][j+1][k]);
			}
			if (s[i] != t[j]) continue;
			for (int k = 0; k < n; k++) {
				if (s[i] != v[k]) {
					int tmp = k;
					while (tmp >= 0 && s[i] != v[tmp]) {
						tmp = f[tmp];
					}
					++tmp;
					update(dp[i+1][j+1][tmp], dp[i][j][k]+1, prev[i+1][j+1][tmp], i*m*n+j*n+k);
				} else if (k != n - 1) {
					update(dp[i+1][j+1][k+1], dp[i][j][k]+1, prev[i+1][j+1][k+1], i*m*n+j*n+k);

				}
			}
		}
	}
	int ansl = -1, ansk = -1;
	for (int k = 0; k < n; k++) {
		if (dp[l][m][k] > ansl) {
			ansl = dp[l][m][k];
			ansk = k;
		}
	}
	if (ansl == 0) {
		cout << 0 << endl;
		return 0;
	}
	string ans;
	int ii = l, jj = m, kk = ansk;
	while (1) {
		int tmp = prev[ii][jj][kk];
		if (tmp == -1) break;
		kk = tmp % n; tmp /= n;
		jj = tmp % m; ii = tmp / m;
		ans = s[ii] + ans;
	}
	cout << ans << endl;
	return 0;
}
