#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <unordered_set>
#include <iterator> 
#include <bitset>
#include <complex>
#include <random>
#include <chrono>
#include <functional>
using namespace std;
typedef complex<double> cd;
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf INT_MAX
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pli pair<ll, int>
#define pil pair<int, ll>
#pragma GCC optimize("O3")
//#define x first
//#define y second
const int mods[10] = { 1000000007, 999999937, 999999929, 999999893, 999999883, 999999797, 999999761, 999999757, 999999751, 999999739 };
const int mod = 1000000007, mod2 = 998244353;
int rand_mods[2];
const long double eps = 1e-10;
const int siz = 1e3 + 5, siz2 = 3e5 + 5, lg = 20, block = 300, block2 = 1000, mxv = 1e5 + 1, sqrt_mod = 31630;
const int alpha_sz = 26;

int t, arr[3];
 
int main()
{
    scanf("%d", &t);
    while(t--) {
        for(int i=0; i<3; i++) {
            scanf("%d", &arr[i]);
        }
        sort(arr, arr+3, greater<int>());
        int tot = arr[1] - arr[2];
        arr[0] -= tot;
        arr[1] -= tot;
        int d = arr[0] - arr[1];
        if(arr[1] - d < 0) {
            tot += arr[1] + arr[2];
        } 
        else {
            tot += d*2;
            arr[1] -= d;
            tot += arr[1]/2*3 + arr[1]%2;
        }
        printf("%d\n", tot);
    }
	return 0;
}