#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <iterator>
#include <cmath>
#include <deque> 

using namespace std;


int n;
char l[150010];
char r[150010];
std::queue<int> lBoots[26];
std::queue<int> lAnyPos;	//?
std::queue<int> rBoots[26];
std::queue<int> rAnyPos;	//?

std::vector<int> lAns, rAns;

void checkBoots(std::queue<int> &lBoot, std::queue<int> &rBoot)
{
	while (lBoot.empty() == false && rBoot.empty() == false)
	{
		lAns.push_back(lBoot.front());
		lBoot.pop();
		rAns.push_back(rBoot.front());
		rBoot.pop();
	}
}


int main()
{
	scanf("%d\n", &n);
	scanf("%s\n", &l);
	scanf("%s", &r);
	
	for (int i = 0 ; i < n ; i++)
	{
		if (l[i] == '?')
			lAnyPos.push(i + 1);
		else
			lBoots[l[i] - 'a'].push(i + 1);
	}
	
	for (int i = 0 ; i < n ; i++)
	{
		if (r[i] == '?')
			rAnyPos.push(i + 1);
		else
			rBoots[r[i] - 'a'].push(i + 1);
	}
	
	for (int i = 0 ; i < 26 ; i++)
	{
		checkBoots(lBoots[i], rBoots[i]);
	}
	
	for (int i = 0 ; i < 26 ; i++)
	{
		if (lBoots[i].empty() == true)
			continue;

		checkBoots(lBoots[i], rAnyPos);
		
		if (rAnyPos.empty() == true)
			break;
	}
	
	for (int i = 0 ; i < 26 ; i++)
	{
		if (rBoots[i].empty() == true)
			continue;

		checkBoots(lAnyPos, rBoots[i]);
		
		if (lAnyPos.empty() == true)
			break;
	}
	
	checkBoots(lAnyPos, rAnyPos);
	
	printf("%d\n", lAns.size());
	for (int i = 0 ; i < lAns.size() ; i++)
		printf("%d %d\n", lAns[i], rAns[i]);
	
	return 0;
}

