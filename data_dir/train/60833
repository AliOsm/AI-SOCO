#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>

#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mod 1000000007
#define PI 3.14159265
#define pll pair<ll, ll>
using namespace std;

typedef unsigned long long ull;

bool is_prime(int n) {

    for (int i = 2; i * i <= n; ++i) {
            if (n % i == 0) {
                  return false;
            }
    }
    return true;
}

inline ll getPow(ll a,ll b){
    ll res = 1ll,tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
           res %= mod;
       }
       tp *= tp;
       tp %= mod;
       b >>= 1ll;
    }
    return res;
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

void ok() {
    puts("YES");
    exit(0);
}

void no() {
    puts("NO");
    exit(0);
}

ll xx[] = {-1, 1, 0, 0};
ll yy[] = {0, 0, -1, 1};

// please, accepted!

const int N=1e5+3;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
    ll n = nxt();
    map<string, vector<pll>> mp;
    vector<ll> mas(n);
    for(int i = 0; i < n; i++) {
           ll t = nxt();
           string s;
           cin >> s;
           sort(all(s));
           if(s.find("A") != string::npos) {
                 mp["A"].push_back({t, i});
           }
           if(s.find("B") != string::npos) {
                 mp["B"].push_back({t, i});
           }
           if(s.find("C") != string::npos) {
                 mp["C"].push_back({t, i});
           }
           if(s == "ABC") {
                 mp["ABC"].push_back({t, i});
           }
           if(s == "AB") {
                 mp["AB"].push_back({t, i});
           }
           if(s == "AC") {
                 mp["AC"].push_back({t, i});
           }
           if(s == "BC") {
                 mp["BC"].push_back({t, i});
           }
           mas[i] = t;
    }
    sort(all(mp["C"]));
    sort(all(mp["B"]));
    sort(all(mp["A"]));
    sort(all(mp["ABC"]));
    sort(all(mp["AB"]));
    sort(all(mp["AC"]));
    sort(all(mp["BC"]));
    ll ans = LONG_MAX;
    if(mp["C"].size() && mp["B"].size() && mp["A"].size()) {
           set<ll> indxs;
           indxs.insert(mp["C"][0].second);
           indxs.insert(mp["B"][0].second);
           indxs.insert(mp["A"][0].second);
           ll cur = 0;
           for(auto v : indxs) {
                  cur += mas[v];
           }
           ans = min(ans, cur);
    }
    if(mp["ABC"].size()) {
           ll cur = mp["ABC"][0].second;
           ans = min(ans, mas[cur]);

    }
    if(mp["AB"].size() && mp["C"].size()) {
           set<ll> indxs;
           indxs.insert(mp["AB"][0].second);
           indxs.insert(mp["C"][0].second);
           ll cur = 0;
           for(auto v : indxs) {
                  cur += mas[v];
           }
           ans = min(ans, cur);
    }
    if(mp["AC"].size() && mp["B"].size()) {
           set<ll> indxs;
           indxs.insert(mp["AC"][0].second);
           indxs.insert(mp["B"][0].second);
           ll cur = 0;
           for(auto v : indxs) {
                  cur += mas[v];
           }
           ans = min(ans, cur);
    }
    if(mp["BC"].size() && mp["A"].size()) {
           set<ll> indxs;
           indxs.insert(mp["BC"][0].second);
           indxs.insert(mp["A"][0].second);
           ll cur = 0;
           for(auto v : indxs) {
                  cur += mas[v];
           }
           ans = min(ans, cur);
    }
    if(ans == LONG_MAX) ans = -1;
    cout << ans;
    return 0;
}
