//#pragma GCC optimize("Ofast,no-stack-protector")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
//#pragma GCC target("avx,tune=native")


#include<bits/stdc++.h>

using namespace std;

typedef complex<long double> base;
typedef long double ld;
typedef long long ll;

#define pb push_back

const int maxn=(int)2e5+5;
pair< ll, pair<ll,ll> > a[maxn];
unordered_map<ll,ll> m1;

bool f1(pair<ll,pair<ll,ll> > a,pair<ll,pair<ll,ll> > b)
{
	if(a.first==b.first)
	{
		return (a.second.first<b.second.first);
	}
	
	return a.first<b.first;
}

bool f2(pair<ll,pair<ll,ll> > a,pair<ll,pair<ll,ll> > b)
{
	if(a.first==b.first)
	{
		return (a.second.second<b.second.second);
	}
	
	return a.first<b.first;
}

bool f3(pair<ll,pair<ll,ll> > a,pair<ll,pair<ll,ll> > b)
{
	if(a.first==b.first)
	{
		if(a.second.first==b.second.first)
		{
			return (a.second.second<b.second.second);
		}
		
		return (a.second.first<b.second.first);
	}
	
	return a.first<b.first;
}

int main()
{
	ios_base::sync_with_stdio(0);
	
	int n;ll x,y;
	
	cin>>n>>x>>y;
	
	ll res=0;
	
	for(int i=0;i<n;i++)
	{
		ll xi,sxi,syi;
		
		cin>>xi>>sxi>>syi;
		
		ll now=syi-(x*sxi);
		
		a[i]={now,{sxi,syi}};
		
		res=res+m1[now];
		
		m1[now]++;
	}
	
	//cout<<res<<endl;
	
	sort(a,a+n,f1);ll sub=0;
	
	for(int i=1;i<n;i++)
	{
		int low=1,high=i;
		
		while(low<high)
		{
			int mid=(low+high+1)>>1;
			
			if(a[i-mid].first==a[i].first && a[i-mid].second.first==a[i].second.first)
			{
				low=mid;
			}
			
			else
			{
				high=mid-1;
			}
		}
		
		if(a[i-low].first==a[i].first && a[i-low].second.first==a[i].second.first)
		{
			sub=sub-low;
		}
	}
	
	sort(a,a+n,f2);
	
	for(int i=1;i<n;i++)
	{
		int low=1,high=i;
		
		while(low<high)
		{
			int mid=(low+high+1)>>1;
			
			if(a[i-mid].first==a[i].first && a[i-mid].second.second==a[i].second.second)
			{
				low=mid;
			}
			
			else
			{
				high=mid-1;
			}
		}
		
		if(a[i-low].first==a[i].first && a[i-low].second.second==a[i].second.second)
		{
			sub=sub-low;
		}
	}
	
	sort(a,a+n,f3);
	
	for(int i=1;i<n;i++)
	{
		int low=1,high=i;
		
		while(low<high)
		{
			int mid=(low+high+1)>>1;
			
			if(a[i-mid].first==a[i].first && a[i-mid].second.second==a[i].second.second && a[i-mid].second.first==a[i].second.first)
			{
				low=mid;
			}
			
			else
			{
				high=mid-1;
			}
		}
		
		if(a[i-low].first==a[i].first && a[i-low].second.second==a[i].second.second && a[i-low].second.first==a[i].second.first)
		{
			sub=sub+low;
		}
	}
	
	cout<<(2ll*(res+sub))<<endl;
	
	return 0;
}



