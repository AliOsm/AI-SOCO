#include "bits/stdc++.h"
#include "ext/pb_ds/tree_policy.hpp"
#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

ll r = 0;
int n;
const int maxn = 10000010;
ll cnt[maxn];
bool sp[maxn];
int primes[664579];

bool check(ll f){
	for(int i = 0;i<664579;i++){
		if(cnt[primes[i]]==0)return true;
		ll cur = primes[i];
		ll val = 0;
		while(cur<=f){
			val+=f/cur;
			if(1.0*cur*primes[i]>1e15)break;

			cur*=primes[i];
		}
		if(val<cnt[primes[i]])return false;
	}
	return true;
}
int main(){
	in(n);
	REP(i,0,n){
		int c;in(c);
		r+=c;
		cnt[c]++;
	}
	RREP(i,maxn-10,0)cnt[i]+=cnt[i+1];
	int p = 0;
	for(int i = 2;i<maxn;i++){
		if(sp[i]==0){	
			ll temp = cnt[i];
			primes[p++] = i;
			ll cur = i;
			while(cur<maxn){
				for(int j = cur;j<maxn;j+=cur){
					if(!sp[j])sp[j] = 1;
					cnt[i]+=cnt[j];
				}
				cur*=i;
			}
			cnt[i]-=temp;
		}
	}

	ll l = 1;
	while(l<r){
		ll mid = (l+r)/2;
		if(check(mid)){
			r = mid;
		}else{
			l = mid+1;
		}
	}
	cout<<l;









	return 0;
}
