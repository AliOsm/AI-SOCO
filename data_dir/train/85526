/*
author: madhav_1999 aka orthodoxparadox
21 March 2020 at 6:38 AM
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define pii pair<int, int>
#define len(x) (int) x.size()
#define rev(a) reverse(all(a))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#define inf 2e18
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef MADHAV
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...) 42
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
template <typename T, typename S> ostream& operator << (ostream& os, const map<T, S>& v) { for (auto it : v) os << it.first << "=>" << it.second << endl; return os; }
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int MOD = 1e9 + 7;

int takemod(int a, int mod = MOD){a%=mod;if(a<0)a+=mod;return a;}

int fast_exp(int base, int expo, int mod = MOD) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a, int mod = MOD){return takemod(fast_exp(takemod(a), mod-2, mod), mod);}


void solve()
{
	int n, A, cf, cm, m;
	cin >> n >> A >> cf >> cm >> m;
	pii p[n + 1]{};
	for(int i = 0; i < n; i++) {
		cin >> p[i + 1].ff;
		p[i + 1].ss = i + 1;
	}
	sort(p + 1, p + n + 1, greater<pii>());
	int sf[n + 2]{};
	for(int i = n; i >= 0; i--) {
		sf[i] = sf[i + 1] + p[i].ff;
	}
	int ans = -1, which = -1, till = -1, res = -1;
	if(A*n - sf[1] <= m) {
		cout << n * cf + A*cm << endl;
		for(int i = 1; i <= n; i++) {
			cout << A << " ";
		}
		return;
	}
	int needed = 0;
	for(int i = 0; i <= n - 1; i++) {
		if(i) {
			needed += (A - p[i].ff);
		}
		int left = m - needed;
		dbg(p[i], m, i, needed, left);
		if(left < 0) break;
		int s = i + 1, e = n;
		int x = n + 1;
		while(s <= e) {
			int mid = (s + e) >> 1;
			if(p[mid].ff*(n - mid + 1) - sf[mid] <= left) {
				e = mid - 1;
				x = min(x, mid);
			}
			else {
				s = mid + 1;
			}
		}
		int curans = cf * i;
		int finleft = left - (p[x].ff*(n - x + 1) - sf[x]);
		int distribute = n - x + 1;
		int mini = p[x].ff + (finleft/distribute);
		curans += cm * mini;
		if(curans > res) {
			res = curans;
			ans = i;
			which = x;
			till = mini;
		}
	}
	int finans[n + 1]{};
	for(int i = 1; i <= ans; i++) {
		finans[p[i].ss] = A;
	}
	for(int i = ans + 1; i <= n; i++) {
		if(p[i].ff > till) {
			finans[p[i].ss] = p[i].ff;
		}
		else {
			finans[p[i].ss] = till;
		}
	}
	cout << res << endl;
	for(int i = 1; i <= n; i++) {
		cout << finans[i] << " ";
	}
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef MADHAV
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	clock_t t1, t2;
	t1 = clock();

	int tt = 1;
	// cin >> tt;
	while(tt--)
	{
		solve();
	}
	#ifdef MADHAV
	t2 = clock(); cerr << "time taken: " << (t2-t1)/(dbl)CLOCKS_PER_SEC;
	#endif
	return 0;
}