//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }

int const maxn = 10005;
long long que[maxn];
int l,r;

void cle()
{
    fill(begin(que), end(que), numeric_limits<long long>::min());
    que[0] = numeric_limits<long long>::max();
    l = 1;
    r = 0;
}

inline long long get()
{
    return que[l];
}

inline void add(const long long val)
{
    while (val > que[r]) --r;
    que[++r] = val;
}

inline void del(const long long val)
{
    if (que[l] == val)
        que[l++] = numeric_limits<long long>::max();
}


int main()
{
//    freopen("in.txt","r", stdin);
//    freopen("out.txt", "w", stdout);
    ios_base::sync_with_stdio(false);

    int n;
    long long w,b,x;
    cin >> n >> w >> b >> x;
    vector<int> c(n);
    vector<long long> cost(n);
    for(auto& y : c)
        cin >> y;

    for(auto& y : cost)
        cin >> y;

    vector<long long> d(maxn, -1);
    d[0] = w;
    for(int i = 0; i < n; ++i)
    {
        cle();
        vector<long long> nd(maxn, -1);
        for(int j = 0; j < maxn; ++j)
        {
            add(d[j] + j * cost[i]);
            nd[j] = get() - j * cost[i];
            if (j >= c[i])
                del(d[j - c[i]] + cost[i] * (j - c[i]));
        }
        for(int j = 0; j < maxn; ++j)
            if (nd[j] >= 0)
                d[j] = min(w + b * j, nd[j] + x);
    }
    int ans = 0;
    while (d[ans] >= 0)
        ++ans;
    cout << ans - 1 << endl;
}
