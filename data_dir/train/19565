#include <bits/stdc++.h>
using namespace std;

const int N = 510;
int n, dp[N][N][2];
string s;

int DP(int l, int r, int add) {
	if(l == r) return 1;
	if(l > r) return 0;
	if(dp[l][r][add] != -1) return dp[l][r][add];
	dp[l][r][add] = DP(l,r-1,1) + add;
	int prev = r, sum = 0;
	for(int i = r; i >= l; i--) if(s[i] == s[r]) {
		sum += DP(i+1,prev-1,1);
		dp[l][r][add] = min(dp[l][r][add], sum + add + DP(l,i-1,1));
		prev = i;
	}
	for(int i = l; i < r; i++) if(s[i] == s[r]) {
		dp[l][r][add] = min(dp[l][r][add], DP(l,i-1,1) + add + DP(i+1,r,0));
	} return dp[l][r][add];
}

int main() {
	ios_base::sync_with_stdio(0);cin.tie(0);
	cin >> n >> s;
	for(int i = 1; i < s.size(); i++) {
		if(s[i] == s[i-1]) {
			s.erase(s.begin()+i);
			i--;
		}
	} memset(dp,-1,sizeof dp);
	printf("%d\n", DP(0,s.size()-1,1));
	return 0;
}