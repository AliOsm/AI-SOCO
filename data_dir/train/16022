// in the name of Allah
// and begin ... 

#include <bits/stdc++.h>

#define max_n 123456

using namespace std;

bool cmpH(const pair < pair <int, int>, int > &a, const pair < pair <int, int>, int > &b) {
	return ( a.first.second < b.first.second );
}

bool cmpV(const pair < pair <int, int>, int > &a, const pair < pair <int, int>, int > &b) {
	return ( a.first.first < b.first.first );
}

int n, w, h;
map < int, vector < pair < pair <int, int>, int > > > V;
map < int, vector < pair < pair <int, int>, int > > > H;
pair <int, int> p[max_n];

void get(vector < pair < pair <int, int>, int > > &a, vector < pair < pair <int, int>, int > > &b) {
	sort(a.begin(), a.end(), cmpH);
	sort(b.begin(), b.end(), cmpV);
	for(int i=0; i<a.size(); i++) {
		pair <int, int> pos = a[i].first;
		if(i >= b.size()) {
			int j = i - b.size();
			int id = a[j].second;
			p[id] = make_pair(w, pos.second);
		}
		else {
			int j = b.size() - 1 - i;
			int id = b[j].second;
			p[id] = make_pair(w, pos.second);
		}
	}
	for(int i=0; i<b.size(); i++) {
		pair <int, int> pos = b[i].first;
		if(i >= a.size()) {
			int j = i - a.size();
			int id = b[j].second;
			p[id] = make_pair(pos.first, h);
		}
		else {
			int j = a.size() - 1 - i;
			int id = a[j].second;
			p[id] = make_pair(pos.first, h);
		}
	}
}

void getH(vector < pair < pair <int, int>, int > > &a) {
	for(auto e : a) {
		int id = e.second;
		p[id] = make_pair(w, e.first.second);
	}
}

void getV(vector < pair < pair <int, int>, int > > &a) {
	for(auto e : a) {
		int id = e.second;
		p[id] = make_pair(e.first.first, h);
	}
}

int main() {
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	cin >> n >> w >> h;
	set <int> st;
	for(int i=0; i<n; i++) {
		int g, pos, t;
		cin >> g >> pos >> t;
		if(g == 1) V[pos-t].push_back(make_pair(make_pair(pos, -t), i));
		else H[pos-t].push_back(make_pair(make_pair(-t, pos), i));
		st.insert(pos-t);
	}
	for(int e : st) {
		bool f1 = H.count(e);
		bool f2 = V.count(e);
		if(f1 && f2) {
			get(H[e], V[e]);
		}
		else if(f1) {
			getH(H[e]);
		}
		else {
			getV(V[e]);
		}
	}
	for(int i=0; i<n; i++) {
		cout << p[i].first << ' ' << p[i].second << '\n';
	}
	return 0;
}