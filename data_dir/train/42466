#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((ll)(1e19 + 5))
#define MAXL ((ll)(1e10 + 5))
#define MAX_X ((int)(1e6 + 2))
#define pi (2.0*acos(0))
#define M ((int)(1e9 + 7))
#define NN ((ll)(305))
#define N ((int)(1e6 + 5))
#define eps (0)
#define fastio ios_base::sync_with_stdio(false),cin.tie(NULL)
#define log 29
#define endl "\n"
#define int ll


using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long ull;

/*fast io
ios_base::sync_with_stdio(false);
cin.tie(NULL);
*/


typedef tree < pair < int, int >,  null_type,  less < pair < int, int > >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;
/// o_set s;
/// s.order_of_key(k) : Number of items strictly smaller than k .
/// *(s.find_by_order(k)) : K-th element in a set (counting from zero).

///sieve of eratosthenes
int status[(N/32)+2];  /// mx = maximum prime
vector < int > prime;
bool Check(int n,int pos){
    return (bool)(n & (1<<pos));
}
int Set(int n,int pos){
    return (n | (1<<pos));
}
void sieve(int n){
     for(int i = 3; i*i <= n; i += 2){
		 if( Check(status[i>>5],i&31)==0){
	 		 for(int j = i*i; j <= n; j += (i<<1) ){
				 status[j>>5]=Set(status[j>>5],j & 31);
	 		 }
		 }
	 }
	 prime.push_back(2);
	 for(int i=3;i<=n;i+=2) if( Check(status[i>>5],i&31)==0) prime.push_back(i);
}

int arr[N], brr[N];

main()
{
    fastio;
    sieve(N-5);
    //cout<<prime.size()<<endl;
    int n;
    cin>>n;
    ll sum = 0;
    for(int i = 1; i<=n; i++){
        cin>>brr[i];
        sum += brr[i];
    }
    if(sum==1){
        cout<<"-1\n";
        return 0;
    }
    vector < ll > v;
    for(int a:prime){
        if(sum%a==0){
            v.push_back(a);
            while(sum%a==0) sum /= a;
        }
    }
    if(sum>1) v.push_back(sum);
    ll ans = MAX;
    for(ll a:v){
        ll tmp = 0;
        for(int i = 1; i<=n; i++) arr[i] = brr[i]%a;
        for(int i = 1; i<=n; i++){
            if(arr[i]!=0){
                ll cnt = arr[i], pos = (ll)i*arr[i], pos2 = 0;
                //cout<<i<<" "<<pos<<"\n";
                for(int j = i+1; j<=n; j++){
                    if(arr[j]==0) continue;
                    cnt += arr[j];
                    if(cnt>=a){
                        ll rem = cnt - a, ttmp = MAX;
                        cnt = 0;
                        pos += (ll)j*(arr[j]-rem);
                        //cout<<pos<<endl;
                        for(int k = i; k<=j; k++){
                            pos -= (ll)k*arr[k];
                            //cout<<pos<<" "<<pos2<<endl;
                            ll val = pos - pos2;
                            if(k!=j) val += k*(cnt - (a-arr[k]-cnt));
                            else{

                                val += (ll)k*rem + (ll)k*(cnt - (a-arr[k]+rem-cnt));

                            }
                            ttmp = min(ttmp,val);
                            pos2 += (ll)k*arr[k];

                            cnt += arr[k];

                        }
                        arr[j] = rem;
                        tmp += ttmp;
                        i = j-1;
                        break;
                    }
                    pos += (ll)j*arr[j];
                    //cout<<pos<<endl;
                }
            }
        }
        //cout<<a<<" "<<tmp<<endl;
        ans = min(ans,tmp);
    }

    cout<<ans<<endl;
    return 0;
}
