//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, r;
pair<int, int> x[3005];
int sz = 0;

bool cmp(pair<int, int> x, pair<int, int> y){
  return x.F * x.F + x.S * x.S > y.F * y.F + y.S * y.S;
}

vector<pair<int, int> > now, out;
int res = 0;

void rec(int v){
  if(now.size() == n){
    ll x = 0;
    forn(i, now.size()) forn(j, i){
      x += sqr(now[i].F - now[j].F) + sqr(now[i].S - now[j].S);
    }
    if(x > res){
      res = x;
      out = now;
    }
    return;
  }
  if(v == sz){
    return;
  }
  now.pb(x[v]);
  rec(v);
  now.pop_back();
  rec(v + 1);
}

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  scanf("%d %d", &n, &r);
  int cnt = 0;
  for(int i = -100; i <= 100; ++i){
    for(int j = -100; j <= 100; ++j){
      int val = i * i + j * j;
      if(val <= r * r){
        x[sz++] = mp(i, j);
      }
    }
  }
  sort(x, x + sz, cmp);
  sz = min(sz, 150 / n);
  rec(0);
  cout << res << "\n";
  forn(i, out.size()){
    printf("%d %d\n", out[i].F, out[i].S);
  }
  return 0;
}
