/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=998244353;
lli INF=1e17;
lli eps=1e-8;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,m,x;
const double pi=3.14159265358979323846;
//matrix exponentiation is associative and distributive
lli me(lli a,lli b)
{
    lli res=1;
    while(b)
    {
        if(b&1)
        res=(res%mod*a%mod)%mod;
        a=a*a;
        a%=mod;
        b=b>>1;
    }
    return res;
}
lli mI(lli a)
{
    return (me(a,mod-2)%mod+mod)%mod;
}
bool cmp(ll a,ll b)
{
    if(a.second==b.second)
    return a.first<b.first;
    return a.second<b.second;
}
struct pt
{
    double x,y,z,u,v;
    pt() {}
    pt(double _x, double _y,double _z,double _u,double _v) : x(_x), y(_y),z(_z),u(_u),v(_v) {}
    pt operator-(const pt& p) const { return pt(x - p.x, y - p.y,z-p.z,u-p.u,v-p.v); }
    long long dot(const pt& p) const { return x * p.x + y * p.y + z*p.z + u*p.u +v*p.v; }
};

bool operator < (pt p, pt q)
{
 if(p.x!=q.x)
 return p.x<q.x;
 if(p.y!=q.y)
 return p.y<q.y;
 if(p.z!=q.z)
 return p.z<q.z;
 if(p.u!=q.u)
 return p.u<q.u;
 return p.v<q.v;
}

struct seg
{
    pt p,q;
};

double get_distance(pt p,pt q)
{
    return sqrt(pow(p.x-q.x,2.0) + pow(p.y-q.y,2.0) + pow(p.z-q.z,2.0) +pow(p.u-q.u,2.0) + pow(p.v-q.v,2.0));
}

double get_area(pt p1,pt p2,pt p3)
{
    return (p2.x - p1.x) * (p3.y - p2.y) - (p3.x - p2.x) * (p2.y - p1.y);
}

double get_area(double r)
{
    return pi*(r*r);
}

bool equall_to(pt p , pt q)
{
    if(p.x==q.x&&p.y==q.y&&p.z==q.z&&p.u==q.u&&p.v==q.v)
    return true;
    return false;
}
int main()
{
 cin>>n;
 pt p[n+1];
 set<pt> ss;
 for(int i=1;i<=n;i++)
 {
     cin>>p[i].x>>p[i].y>>p[i].z>>p[i].u>>p[i].v;
     ss.insert(p[i]);
 }
 set<pt> ds;
 ds=ss;
 for(int i=1;i<=n;i++)
 {
     pt p1=p[i];
     lli flag=0;
     for(int p2=1;p2<=n;p2++)
     {
         if(!equall_to(p1,p[p2]))
         {
             for(int p3=1;p3<=n;p3++)
             {
                 if((!equall_to(p1,p[p3]))&&(!equall_to(p[p2],p[p3])))
                 {
                    pt res1=p[p2]-p1;
                    pt res2=p[p3]-p1;
                    double mod1=get_distance(p[p2],p1);
                     double mod2=get_distance(p[p3],p1);
                     double dd=res1.dot(res2);
                     dd = dd/(mod1*mod2);
                     dd=acos(dd);
                     double cc=pi/2.0;
                     dd-=cc;
                     if(dd<0)
                     {
                         flag=1;
                         break;
                     }
                 }
             }
             if(flag)
             break;
         }
     }
     if(flag)
     ds.erase(p1);
 }
 cout<<ds.size()<<"\n";
 vector<lli> oo;
 for(auto &i: ds)
 {
     for(int j=1;j<=n;j++)
     {
         if(equall_to(i,p[j]))
         {
             oo.push_back(j);
             break;
         }
     }
 }
 sort(oo.begin(),oo.end());
 for(auto &i: oo)
 cout<<i<<"\n";
}