#include <bits/stdc++.h>

#define pb push_back
#define all(x) (x).begin(), (x).end()

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a < b) a = b;}
template<class T> inline void umin(T &a,T b){if(a > b) a = b;}
template<class T> inline T abs(T a){return a > 0 ? a : -a;}

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 454545;
const int K = 5555;

int a[N];
ll f[K][K];

void upd(ll &x, ll y){
    if (x == -1 || x > y) {
        x = y;
    }
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    int n = read();
    int k = read();

    for (int i = 0; i < n; i++) {
        a[i] = read();
    }

    sort(a, a + n);
    reverse(a, a + n);
/*
    if (n / k <= 1) {
        assert(n / k == 1);
        ll sum = 0;
        for (int i = 0; i < n; i++) {
            sum += a[i];
        }
        cout << sum << endl;
        return 0;
    }
*/
    int have1 = 0, have2 = 0;
    for (int i = 0; i < k; i++) {
        int x = i;
        int c = 1;
        while (x + k < n) {
            x += k;
            ++c;
        }
        if (c == n / k + 1) {
            have1++;
        } else {
            have2++;
        }
    }

    eprintf("%d %d\n", have1, have2);

    memset(f, -1, sizeof f);

    f[0][0] = 0ll;

    for (int i = 0; i < k; i++) {
        for (int j = 0; j < k; j++) {
            if (f[i][j] != -1) {
                int now = i * (n / k + 1) + j * (n / k);
                if (now + n / k < n)
                    upd(f[i + 1][j], f[i][j] + a[now] - a[now + n / k]);
                if (now + n / k - 1 < n && n / k >= 1)
                    upd(f[i][j + 1], f[i][j] + a[now] - a[now + n / k - 1]);
            }
        }
    }

    cout << f[have1][have2] << endl;

    return 0;
}

