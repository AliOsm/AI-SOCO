#include<bits/stdc++.h>
using namespace std;
#define int long long int
#define ld long double
#define pb 	push_back
#define endl '\n'
#define all(x) (x).begin(),(x).end()
#define F first
#define S second
#define fuck() cout<<"--------"<<endl
#define see(x) cout<<#x<<" = "<<x<<endl
#define hell 1000000007
const int N=2e5+5;
vector<int>g[N];
int dista[N],distb[N],parent[N],distv[N];
int n,x,maxi=0,lastv;
void dfs(int v,int p,int dist[]){
	dist[v]=dist[p]+1;
	for(auto next:g[v]){
		if(next==p)continue;
		dfs(next,v,dist);
	}
}
void dfs2(int v,int p){
	parent[v]=p;
	for(auto next:g[v]){
		if(next==p)continue;
		dfs2(next,v);
	}
}
int dfs3(int v,int p){
	distv[v]=distv[p]+1;
	if(distv[v]>=maxi){
		maxi=distv[v];
		lastv=v;
	}
	for(auto next:g[v]){
		if(next==p)continue;
		dfs3(next,v);
	}
}
int32_t main()
{
	ios_base::sync_with_stdio(0); cin.tie(0);cout.tie(0);
	cin>>n>>x;
	for(int i=0;i<n-1;i++){
		int u,v;
		cin>>u>>v;
		g[u].pb(v);
		g[v].pb(u);
	}
	dista[0]=-1;
	distb[0]=-1;
	dfs(1,0,dista);
	dfs(x,0,distb);
	dfs2(1,0);
	int mx=0,vertex=x,v=x;
	while(parent[v]!=0){
		if(dista[v]>distb[v]){
			if(distb[v]>mx){
				vertex=v;
				mx=distb[v];
			}
		}
		v=parent[v];
	}
	distv[parent[vertex]]=-1;
	dfs3(vertex,parent[vertex]);
	cout<<2*dista[lastv];
	cerr<<"Time elapsed : "<<clock()*1000.0/CLOCKS_PER_SEC<<"ms"<<'\n';
}