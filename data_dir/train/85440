#include <bits/stdc++.h>

using namespace std;

vector<int> is_prime;
vector<int> primes;

int main()
{
	ios_base::sync_with_stdio;
	cin.tie(NULL);

	is_prime = vector<int>(200000, 1);
	for(int i = 2; i < is_prime.size(); i++) {
		if(is_prime[i]) {
			primes.push_back(i);
		}
		for(int j = i; j < is_prime.size(); j+=i) {
			is_prime[j] = 0;
		}
	}

	int n, m; cin >> n >> m;
	vector<vector<int>> board;

	for(int i = 0; i < n; i++) {
		vector<int> row;
		for(int j = 0; j < m; j++) {
			int ele; cin >> ele;
			int pos = lower_bound(primes.begin(), primes.end(), ele) - primes.begin();
			row.push_back(primes[pos] - ele);
		}
		board.push_back(row);
	}
	long long ans = -1;
	for(int i = 0; i < n; i++) {
		long long temp_ans = 0;
		for(int j = 0; j < m; j++) {
			temp_ans += board[i][j];
		}
		if(ans == -1) ans = temp_ans;
		ans = (ans < temp_ans ? ans : temp_ans);
	}
	for(int i = 0; i < m; i++) {
		long long temp_ans = 0;
		for(int j = 0; j < n; j++) {
			temp_ans += board[j][i];
		}
		ans = (ans < temp_ans ? ans : temp_ans);
	}
	cout << ans << endl;

	return 0;
}






















