#include<bits/stdc++.h>
using namespace std;
int k,n,m;
char s[11][11][11];
bool visited[11][11][11];
vector< pair < pair<int ,int> , int > > a[11][11][11];
int cnt=0;
void dfs(int x,int y,int z){
    cnt++;
    visited[x][y][z] = true;
    for(auto q:a[x][y][z]){
        if(visited[q.first.first][q.first.second][q.second] == false){
            dfs(q.first.first , q.first.second , q.second);
        }
    }
}

int main(){
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    cin>>k>>n>>m;
    for(int i=0;i<k;i++){
        for(int j=0;j<n;j++)cin>>s[i][j];
    }
    for(int i=0;i<k;i++){
        for(int j=0;j<n;j++){
            for(int l=0;l<m;l++){
                if(s[i][j][l]=='.'){
                    if(i!=0){
                        if(s[i-1][j][l] == '.'){a[i][j][l].push_back(make_pair(make_pair(i-1,j),l)); a[i-1][j][l].push_back(make_pair(make_pair(i,j),l));}
                    }
                    if(i!=k-1){
                        if(s[i+1][j][l] == '.'){a[i][j][l].push_back(make_pair(make_pair(i+1,j),l)); a[i+1][j][l].push_back(make_pair(make_pair(i,j),l));}
                    }
                    if(j!=0){
                        if(s[i][j-1][l] == '.'){a[i][j][l].push_back(make_pair(make_pair(i,j-1),l)); a[i][j-1][l].push_back(make_pair(make_pair(i,j),l));}
                    }
                    if(j!=n-1){
                        if(s[i][j+1][l] == '.'){a[i][j][l].push_back(make_pair(make_pair(i,j+1),l)); a[i][j+1][l].push_back(make_pair(make_pair(i,j),l));}
                    }
                    if(l!=0){
                        if(s[i][j][l-1] == '.'){a[i][j][l].push_back(make_pair(make_pair(i,j),l-1)); a[i][j][l-1].push_back(make_pair(make_pair(i,j),l));}
                    }
                    if(l!=m){
                        if(s[i][j][l+1] == '.'){a[i][j][l].push_back(make_pair(make_pair(i,j),l+1)); a[i][j][l+1].push_back(make_pair(make_pair(i,j),l));}
                    }
                }
            }
        }
    }
    int c,d; cin>>c>>d;
    dfs(0,c-1,d-1);
    cout<<cnt;
}
