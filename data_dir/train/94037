#define _CRT_SECURE_NO_WARNINGS
#include<algorithm>
#include<iostream>
#include<numeric>
#include<iomanip>
#include<cassert>
#include<chrono>
#include<string>
#include<vector>
#include<random>
#include<cmath>
#include<ctime>
#include<deque>
#include<queue>
#include<array>
#include<set>
#include<map>

using namespace std;

typedef long long ll;

void tokitsukaze() {
	printf("tokitsukaze\n");
	exit(0);
}

void quailty() {
	printf("quailty\n");
	exit(0);
}

void draw() {
	printf("once again\n");
	exit(0);
}

const int mx = 202020;

char a[mx];
int n, k;
vector<int> one, zer;

bool wins0(int i) {
	if(one[0] < i && one.back() > i + k - 1) {
		return false;
	}
	if(one[0] >= i) {
		int j = upper_bound(one.begin(), one.end(), i + k - 1) -  one.begin();
		return (one.back() - one[j] < k);
	} else {
		int j = upper_bound(one.rbegin(), one.rend(), i, greater<int>()) - one.rbegin();
		j = (int)one.size() - j - 1;
		return (one[j] - one[0] < k);
	}
}

bool wins1(int i) {
	if(zer[0] < i && zer.back() >  i + k - 1) {
		return false;
	}
	if(zer[0] >= i) {
		int j = upper_bound(zer.begin(), zer.end(), i + k - 1) - zer.begin();
		return (zer.back() - zer[j] < k);
	} else {
		int j = upper_bound(zer.rbegin(), zer.rend(), i, greater<int>()) - zer.rbegin();
		j = (int)zer.size() - j - 1;
		return (zer[j] - zer[0] < k);
	}
}

int main() {
	scanf("%d %d %s", &n, &k, a);
	for(int i = 0; i < n; i++) {
		if(a[i] == '1') {
			one.push_back(i);
		} else {
			zer.push_back(i);
		}
	}
	if(one.empty() || zer.empty() || one.back() - one[0] < k || zer.back() - zer[0] < k) {
		tokitsukaze();
	}
	if(k == 1) {
		draw();
	}
	bool everytime_wins = true;
	for(int i = 0; i < n - k + 1; i++) {
		everytime_wins &= wins0(i);
		everytime_wins &= wins1(i);
	}
	if(everytime_wins) {
		quailty();
	}
	draw();
	return 0;
}