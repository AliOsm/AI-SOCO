#include <bits/stdc++.h>
using namespace std;

int n,c1,c2,c3,c4,a[5][1010],F[1010][4100];
bool Free[1010][4100];

int ID(int i,int j)
{
    return (i-1)*3+j-1;
}

int GetBit(int x,int k)
{
    return (x>>k)&1;
}

int Del(int mask,int u1,int v1,int u2,int v2)
{
    for(int i=u1;i<=u2;i++)
        for(int j=v1;j<=v2;j++)
            if(GetBit(mask,3*i+j)==1)
                mask-=(1<<(3*i+j));
    return mask;
}

int f(int i,int mask)
{
    if(i==3&&mask==0)
        int h=0;
    if(Free[i][mask]==true)
        return F[i][mask];
    Free[i][mask]=true;
    if(i>n)
        F[i][mask]=0;
    else
    if(GetBit(mask,0)+GetBit(mask,3)+GetBit(mask,6)+GetBit(mask,9)==0)
    {
        int newmask=mask>>1;
        newmask+=a[1][i+3]*(1<<2)+a[2][i+3]*(1<<5)+a[3][i+3]*(1<<8)+a[4][i+3]*(1<<11);
        F[i][mask]=f(i+1,newmask);
    }
    else
    {
        F[i][mask]=1e9;
        F[i][mask]=min(F[i][mask],f(i,Del(mask,0,0,0,0))+c1);
        F[i][mask]=min(F[i][mask],f(i,Del(mask,1,0,1,0))+c1);
        F[i][mask]=min(F[i][mask],f(i,Del(mask,2,0,2,0))+c1);
        F[i][mask]=min(F[i][mask],f(i,Del(mask,3,0,3,0))+c1);
        F[i][mask]=min(F[i][mask],f(i,Del(mask,0,0,1,1))+c2);
        F[i][mask]=min(F[i][mask],f(i,Del(mask,1,0,2,1))+c2);
        F[i][mask]=min(F[i][mask],f(i,Del(mask,2,0,3,1))+c2);
        F[i][mask]=min(F[i][mask],f(i,Del(mask,0,0,2,2))+c3);
        F[i][mask]=min(F[i][mask],f(i,Del(mask,1,0,3,2))+c3);
        int newmask=a[1][i+4]*(1<<2)+a[2][i+4]*(1<<5)+a[3][i+4]*(1<<8)+a[4][i+4]*(1<<11);
        F[i][mask]=min(F[i][mask],f(i+2,newmask)+c4);
    }
    return F[i][mask];
}

int main()
{
    ios_base::sync_with_stdio(false);
    //freopen("903F.INP","r",stdin);
    cin>>n>>c1>>c2>>c3>>c4;
    char c;
    for(int i=1;i<=4;i++)
        for(int j=1;j<=n;j++)
        {
            cin>>c;
            if(c=='*')
                a[i][j]=1;
        }
    int mask=0;
    for(int i=1;i<=4;i++)
        for(int j=1;j<=3;j++)
            mask+=a[i][j]*(1<<ID(i,j));
    cout<<f(1,mask);
}
