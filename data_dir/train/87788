#include "bits/stdc++.h"
using namespace std;
vector<int> Graph[100005];
set<int> V1 , V2 , V3;
set<int>::iterator V1_it , V2_it , V3_it;
int Ans[100005] , Degree[100005];

bool CheckIfCorrect( int N ){
    int i , u , v;

    for( V1_it = V1.begin() ; V1_it != V1.end() ; ++V1_it ){
        u = *V1_it;
        Ans[u] = 1;

        for( i = 0 ; i < int(Graph[u].size()) ; ++i ){
            v = Graph[u][i];
            V2_it = V1.find( v );
            if( V2_it != V1.end() ) return false;
        }

        if( Degree[u] != int(V2.size()) + int(V3.size()) ) return false;
    }

    for( V2_it = V2.begin() ; V2_it != V2.end() ; ++V2_it ){
        u = *V2_it;
        Ans[u] = 2;

        for( i = 0 ; i < int(Graph[u].size()) ; ++i ){
            v = Graph[u][i];
            V3_it = V2.find( v );
            if( V3_it != V2.end() ) return false;
        }

        if( Degree[u] != int(V1.size()) + int(V3.size()) ) return false;
    }

    for( V3_it = V3.begin() ; V3_it != V3.end() ; ++V3_it ){
        u = *V3_it;
        Ans[u] = 3;

        for( i = 0 ; i < int(Graph[u].size()) ; ++i ){
            v = Graph[u][i];
            V1_it = V3.find( v );
            if( V1_it != V3.end() ) return false;
        }

        if( Degree[u] != int(V1.size()) + int(V2.size()) ) return false;
    }

    return true;    
}

bool FormVertexSets( int N ){
    int i , u , v;

    for( i = 1 ; i <= N ; ++i )
        V1.insert( i );

    for( i = 0 ; i < int(Graph[1].size()) ; ++i ){
        V1.erase( Graph[1][i] );
        V2.insert( Graph[1][i] );
    }
    
    if( int(V1.size()) == 0 || int(V2.size()) == 0 ) return false;
    u = *(V2.begin());

    for( i = 0 ; i < int(Graph[u].size()) ; ++i ){
        v = Graph[u][i];
        V1_it = V1.find( v );
        if( V1_it == V1.end() ){ 
            V3.insert( v );
            V2.erase( v );
        }
    }

    if( int(V2.size()) == 0 || int(V3.size()) == 0 ) return false;
    return CheckIfCorrect( N );
}

int main(){
    int N , m , i , u , v;
    scanf( "%d%d" , &N , &m );

    for( i = 1 ; i <= m ; ++i ){
        scanf( "%d%d" , &u , &v );
        Graph[u].emplace_back( v );
        Graph[v].emplace_back( u );
        ++Degree[u];
        ++Degree[v];
    }

    if( FormVertexSets( N ) ){
        for( i = 1 ; i <= N ; ++i )
            printf( "%d " , Ans[i] );
        
        puts( "" );
    }
    else puts( "-1" );
    return 0;
}