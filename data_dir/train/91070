#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef double db;
typedef pair<int,int> pii;
typedef vector<int> vi;
#define dd(x) cout << #x << " = " << x << ", "
#define de(x) cout << #x << " = " << x << endl
#define rep(i,a,b) for(int i=(a);i<(b);++i)
#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define fi first
#define se second
//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;
//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3f;
const int MOD = (int)1e9+7;
const int N = (int)1e5+7;

//常用函数
char read_char() {char c;for(;;){c=getchar();if(c == '#' || c == '.')return c;}}
ll powmod(ll a,ll b) {ll res=1;a%=MOD;for(;b;b>>=1){if(b&1)res=res*a%MOD;a=a*a%MOD;}return res;}
ll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}
int add(int a, int b) { if ((a += b) >= MOD) a -= MOD; return a; }
int mul(int a, int b) { return 1ll * a * b % MOD; }

//--------变量--------//

int n, m, a[N], id[N], dp[1<<22];
char opr[25][5];

//--------函数--------//

bool cmp(int a, int b) { return a > b; }

void Init()
{
    rep(i, 1, n+1) scanf("%d", a + i);
    scanf("%d", &m);
    rep(i, 1, m+1) scanf("%s%d", opr[i], id + i);
    sort(a+1, a + n+1, cmp);
}

int Solve()
{
    //1表示可操作（p / b）的英雄，0表示不可操作的英雄
    per(mask, 0, (1<<m)) {
        int one = __builtin_popcount(mask);     ////__builtin_popcount(x) 返回 x 二进制下 1 的个数
        if (one == m) {
            dp[mask] = 0;   //刚开始所有英雄都可操作，这个状态下实力差为 0
            continue;
        }
        //dd(one); de(opr[one+1][0]);
        //用 one + 1 的原因：
        //当前的dp[x]是由上一个dp[y]转移过来 （count(y) = count(x) + 1）
        //最终 000000 是由 000001 000010 000100 ... 100000 转移过来的
        //可供选择的英雄是最多的  所以应该让m个操作中，第一个操作来进行
        //以此类推，one的个数越多，说明可供转移的0的个数越少，则为越靠后的操作
        //所以，当one == m时，没有0，无法转移，为最初状态
        //当 one == m-1 时，有一个可供转移的状态，则这个状态应该由最后一个操作，即第 m 个操作，来执行，所以是 one + 1
        int op = (opr[one+1][0] == 'p') ? 1 : 0;
        int idx = id[one+1];
        int res = (idx == 1) ? -INF : INF;
        rep(bit, 0, m) {
            if (!(mask & (1 << bit))) {     //当前位，即当前英雄可操作
                
                //dd(mask); dd(bit); dd(idx); dd(res); dd((mask|(1<<bit))); de(dp[mask|(1<<bit)]);
                if (idx == 1)
                    res = max(res, dp[mask | (1 << bit)] + (op ? a[bit+1] : 0));
                else
                    res = min(res, dp[mask | (1 << bit)] + (op ? -a[bit+1] : 0));
            }
        }
        dp[mask] = res;
    }
    printf("%d\n", dp[0]);
}

//--------main--------//

int main ()
{
    while (~scanf("%d", &n)) {
        Init();
        Solve();
    }
    return 0;
}