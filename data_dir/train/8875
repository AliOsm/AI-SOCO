#include <cstdio>
#include <cmath>
#include <cassert>
#include <vector>
#include <algorithm>
using namespace std;

const int MAXN=160;

struct Poly
{
	vector<int> p;
	Poly(vector<int> p={}):
		p(p)
	{}
	Poly operator*(const Poly& q) const
	{
		Poly res;
		res.p.resize(p.size()+q.p.size()-1);
		for(int i=0;i<p.size();i++)
			for(int j=0;j<q.p.size();j++)
				res.p[i+j]+=p[i]*q.p[j];
		return res;
	}
	Poly operator+(const Poly& q) const
	{
		Poly res;
		res.p.resize(max(p.size(), q.p.size()));
		for(int i=0;i<p.size();i++)
			res.p[i]+=p[i];
		for(int i=0;i<q.p.size();i++)
			res.p[i]+=q.p[i];
		return res;
	}
	Poly operator-(const Poly& q) const
	{
		Poly res;
		res.p.resize(p.size() + q.p.size());
		for(int i=0;i<p.size();i++)
			res.p[i]+=p[i];
		for(int i=0;i<q.p.size();i++)
			res.p[i]-=q.p[i];
		return res;
	}
	bool is_nice() const
	{
		for(int i=0;i<p.size();i++)
			if(abs(p[i]) >1)
				return false;
		return true;
	}
	void print()
	{
		if(p.back()==-1)
		{
			for(int i=0;i<p.size();i++)
				p[i]*=-1;
		}
		for(int i=0;i<p.size();i++)
			printf("%d ",p[i]);
		puts("");
	}
};


Poly res[MAXN];

bool brute(int i)
{
	if(i==MAXN) return true;
	for(int mul1=-1;mul1<=1 ;mul1++)
		for(int mul2=-1;mul2<=1 ;mul2++)
		{
			if(mul2==0) continue;
			res[i] = res[i-1]*Poly({mul1, mul2}) + res[i-2];
			if(res[i].is_nice() && abs(res[i].p.back())==1 && brute(i+1))
				return true;
		}
	return false;
}

int main()
{
	res[0]=Poly({1});
	res[1]=Poly({-1,1});

	assert(brute(2));

	for(int i=0;i<MAXN;i++)
		for(int j=0;j<=i;j++)
			assert(abs(res[i].p[j])<=1);

	int n;
	scanf("%d",&n);

	printf("%d\n",n);
	res[n].print();
	printf("%d\n",n-1);
	res[n-1].print();


	return 0;
}
