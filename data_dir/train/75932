//In The Name of Allah
#include <bits/stdc++.h>

using namespace std;

#define X first
#define Y second

const int N = 1010;
const int inf = N * N;

bool mark[N][N];
int cost[N][N];
char g[N][N];

bool valid(int x, int y, int r, int c)
{
    return (-1 < x && x < r && -1 < y && y < c && (!mark[x][y]) && g[x][y] != 'T');
}

void BFS(int x, int y, int r, int c)
{
    queue < pair < int , int > > q;
    mark[x][y] = 1;
    cost[x][y] = 0;
    q.push({x, y});
    while (!q.empty())
    {
        x = q.front().X;
        y = q.front().Y;
        q.pop();
        if (valid(x - 1, y, r, c))
        {
            mark[x - 1][y] = 1;
            cost[x - 1][y] = cost[x][y] + 1;
            q.push({x - 1, y});
        }
        if (valid(x + 1, y, r, c))
        {
            mark[x + 1][y] = 1;
            cost[x + 1][y] = cost[x][y] + 1;
            q.push({x + 1, y});

        }
        if (valid(x, y - 1, r, c))
        {
            mark[x][y - 1] = 1;
            cost[x][y - 1] = cost[x][y] + 1;
            q.push({x, y - 1});

        }
        if (valid(x, y + 1, r, c))
        {
            mark[x][y + 1] = 1;
            cost[x][y + 1] = cost[x][y] + 1;
            q.push({x, y + 1});

        }
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    int r, c, a, b, d, e;
    cin >> r >> c;
    for (int i = 0; i < r; i ++)
    {
        for (int j = 0; j < c; j ++)
        {
            cin >> g[i][j];
            if (g[i][j] == 'E')
                a = i, b = j;
            if (g[i][j] == 'S')
                d = i, e = j;
        }
    }
    for (int i = 0; i < N; i ++)
        for (int j = 0; j < N; j ++)
            cost[i][j] = inf;
    BFS(a, b, r, c);
    int t = cost[d][e], ans = 0;
    for (int i = 0; i < r; i ++)
        for (int j = 0; j < c; j ++)
            if (cost[i][j] <= t)
                if (0 < g[i][j] - '0' && g[i][j] - '0' < 10)
                    ans += g[i][j] - '0';
    cout << ans;
    return 0;
}
