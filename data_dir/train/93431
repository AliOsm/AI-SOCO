#include <bits/stdc++.h>

using namespace std;

#define sz(a) int(a.size())

const int INF = 1<<30;

struct Edge {
	int u, v;
	long long w;
	bool operator <(const Edge &x) const {
		return w > x.w;
	}
};

int P [200010];
int R [200010];

int find (int x) {return x == P[x] ? x : P[x] = find(P[x]); }

bool unionS (int x, int y) {
	x = find(x), y = find(y);
	if (x == y) return false;
	if (R[x] > R[y]) swap(x,y);
	P[x] = y;
	R[y] += R[x];
	return true;
}

int main () {
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; i++) P[i] = i, R[i] = 1;
	
	vector <long long> a (n);
	for (auto &t : a) scanf("%I64d", &t);
	
	int p = min_element(a.begin(),a.end())-a.begin();
	
	priority_queue <Edge> pq;
	for (int i = 0; i < n; i++) {
		if (i != p) pq.push({p, i, a[p] + a[i]});
	}
	
	for (int i = 0; i < m; i++) {
		int u, v;
		long long w;
		scanf("%d%d%I64d",&u,&v,&w);
		u--,v--;
		pq.push({u,v,w});
	}
	long long ans = 0;
	while (!pq.empty()) {
		auto e = pq.top();
		pq.pop();
		if (unionS(e.u, e.v)) ans += e.w;
	}
	cout << ans << endl;
}
