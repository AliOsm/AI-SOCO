#include<bits/stdc++.h>


#define ll long long
#define pb push_back
using namespace std;
ll n, m;
ll MOD1 = 420861271;
ll MOD2 = 900024341;
string s[1000010];
vector<ll> dp[1000010], dp2[1000010], dp3[1000010], dp4[1000010];
ll solve(int i, int j)
{
	if (i == n - 1 && j == m - 1)
		return 1;
	if (i >= n)return 0;
	if (j >= m)return 0;
	if (dp[i][j] != -1)return dp[i][j];
	if (s[i][j] != '.')return dp[i][j] = 0;
	ll sol = solve(i + 1, j);
	sol += solve(i, j + 1);
	return dp[i][j] = sol%MOD1;
}
ll solve2(int i, int j)
{
	if (i == 0 && j == 0)
		return 1;
	if (i < 0)return 0;
	if (j < 0)return 0;
	if (dp2[i][j] != -1)return dp2[i][j];
	if (s[i][j] != '.')return dp2[i][j] = 0;
	ll sol = solve2(i - 1, j);
	sol += solve2(i, j - 1);
	return dp2[i][j] = sol%MOD1;
}

ll solve3(int i, int j)
{
	if (i == n - 1 && j == m - 1)
		return 1;
	if (i >= n)return 0;
	if (j >= m)return 0;
	if (dp3[i][j] != -1)return dp3[i][j];
	if (s[i][j] != '.')return dp3[i][j] = 0;
	ll sol = solve3(i + 1, j);
	sol += solve3(i, j + 1);
	return dp3[i][j] = sol%MOD2;
}
ll solve4(int i, int j)
{
	if (i == 0 && j == 0)
		return 1;
	if (i < 0)return 0;
	if (j < 0)return 0;
	if (dp4[i][j] != -1)return dp4[i][j];
	if (s[i][j] != '.')return dp4[i][j] = 0;
	ll sol = solve4(i - 1, j);
	sol += solve4(i, j - 1);
	return dp4[i][j] = sol%MOD2;
}
int main()
{
	ios::sync_with_stdio(false);
	
	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		cin >> s[i];
		dp[i].resize(m + 1,-1);
		dp2[i].resize(m + 1, -1);
		dp3[i].resize(m + 1, -1);
		dp4[i].resize(m + 1, -1);
	}
	ll sol = solve(0, 0);
	ll soll = solve3(0, 0);
	if (sol == 0&&soll==0)
	{
		cout << 0 << endl;
		return 0;
	}
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if ((i == 0 && j == 0) || (i == n - 1 && j == m - 1))
				continue;
			ll sol1 = solve(i, j);
			ll sol2 = solve2(i, j);
			ll sol3 = solve3(i, j);
			ll sol4 = solve4(i, j);
			//cout << i << "  " << j << " " << sol1 << "  " << sol2 << endl;
			if (sol1 >= 0 && sol2 >= 0 && sol == ((sol1*sol2)%MOD1) &&sol3 >= 0 && sol4 >= 0 && soll == ((sol3*sol4)%MOD2))
			{
				cout << 1 << endl;
				return 0;
			}
		}
	}
	cout << 2 << endl;

//	system("pause");
	return 0;
}