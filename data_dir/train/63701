#include<stdio.h>
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<functional>
#include<string>
#include<algorithm>
#include<time.h>
void fre(){freopen("c://test//input.in","r",stdin);freopen("c://test//output.out","w",stdout);}
template <class T> inline void scand(T &x){char c;x=0;while((c=getchar())<'0');while(c>='0'&&c<='9')x=x*10+(c-48),c=getchar();}
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned int UI;
template <class T> inline void gmax(T &a,T b){if(b>a)a=b;}
template <class T> inline void gmin(T &a,T b){if(b<a)a=b;}
using namespace std;
const int N=606,M=0,Z=1e9+7,maxint=2147483647,ms31=522133279,ms63=1061109567,ms127=2139062143;
const double eps=1e-8,PI=acos(-1.0);//.0
struct A{};
map<int,int>mop;
int casenum,casei;
int n,m,t,i,j,x;
bool a[N];
int b[N];
int main()
{
	while(~scanf("%d%d%d",&n,&t,&m))
	{
		MS(a,0);MS(b,0);
		for(i=1;i<=n;i++)scanf("%d",&x),a[x]=1;
		if(t<m)
		{
			printf("-1\n");
			continue;
		}
		int ans=0;
		for(i=1;i<=300;i++)if(a[i])//这点有鬼魂
		{
			if(b[i]<m)//蜡烛数少于需要的
			{
				int need=m-b[i];//还需要多少根蜡烛
				ans+=need;
				for(int st=i-1;st>=i-need;st--)//点蜡烛的起点
				{
					for(j=st+1;j<=st+t;j++)if(j>0)b[j]++;
				}
			}
		}
		printf("%d\n",ans);
	}
	return 0;
}
/*
【题意】
有n个鬼魂拜访她
每个蜡烛可以产生t秒的光
每秒可以点一支蜡烛，燃烧t秒
每个鬼魂拜访时至少有m个蜡烛
时间轴在[1,300]

【类型】


【分析】
如果t<m，肯定-1
o11
 o11
第一个鬼魂出现的时间设为a[0]
a[0]-1,a[0]-2,a[0]-m都必须点蜡烛
然后呢，第二个鬼魂呢？看它这个点延续过来多少个蜡烛，如果少，就相应在提前位置点蜡烛

【优化】


【trick】


【数据】


*/