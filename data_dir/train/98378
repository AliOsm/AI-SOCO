/*
digu_J - Digvijay Janartha
NIT Hamirpur - INDIA
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#pragma GCC optimize("O3")

using namespace std;
using namespace __gnu_pbds;

template < typename T > using ordered_set = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
    cout << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
    const char* comma = strchr(names + 1, ',');
    int len = comma - names;
    for (int i = 0; i < len; ++i) {
        cout << names[i];
    }
    cout <<  " : " << arg1 << " | ";
    __f(comma + 1, args...);
}
#else
#define trace(...)
#endif

typedef double db;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair < ll, ll > pll;
typedef pair < int, int > pii;
typedef vector < ll > vll;
typedef vector < int > vi;
typedef gp_hash_table < int, int > fast;

#define eb emplace_back
#define pb push_back
#define F first
#define S second
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define unique_sort(x) (sort(x.begin(), x.end()), x.resize(distance(x.begin(), unique(x.begin(), x.end()))))
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const ll LINF = LLONG_MAX, base = 1e9, MOD = 1e9 + 7, N = 1e5 + 5, M = 1e3 + 5;
const int INF = INT_MAX;
const db PI = acos(-1);

void test();

int main() {
    fast_io();
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    cout << fixed << setprecision(15);
    test();
    #ifndef ONLINE_JUDGE
        cout << "Time: " << (int)(clock() * 1000. / CLOCKS_PER_SEC) << "ms";
    #endif
    return 0;
}

void test() {
    int n;
    cin >> n;
    int r, c;
    cin >> r >> c;
    vector < pair < pii, char > > d1, d2, ro, co;
    for (int i = 0, x, y; i < n; ++i) {
        char ch;
        cin >> ch >> x >> y;
        if (x - y == r - c) {
            d1.pb({{x, y}, ch});
        }
        if (x + y == r + c) {
            d2.pb({{x, y}, ch});
        }
        if (r == x) {
            ro.pb({{x, y}, ch});
        }
        if (c == y) {
            co.pb({{x, y}, ch});
        }
    }
    int mn = INF, mx = -INF, val1 = 0, val2 = 0;
    for (auto &x: d1) {
        if (x.F.F < r) {
            if (x.F.F > mx) {
                mx = x.F.F;
                if (x.S == 'R') {
                    val1 = 0;
                } else {
                    val1 = 1;
                }
            }
        } else {
            if (x.F.F < mn) {
                mn = x.F.F;
                if (x.S == 'R') {
                    val2 = 0;
                } else {
                    val2 = 1;
                }
            }
        }
    }
    if (val1 or val2) {
        cout << "YES\n";
        return;
    }
    mn = INF, mx = -INF, val1 = 0, val2 = 0;
    for (auto &x: d2) {
        if (x.F.F < r) {
            if (x.F.F > mx) {
                mx = x.F.F;
                if (x.S == 'R') {
                    val1 = 0;
                } else {
                    val1 = 1;
                }
            }
        } else {
            if (x.F.F < mn) {
                mn = x.F.F;
                if (x.S == 'R') {
                    val2 = 0;
                } else {
                    val2 = 1;
                }
            }
        }
    }
    if (val1 or val2) {
        cout << "YES\n";
        return;
    }
    mn = INF, mx = -INF, val1 = 0, val2 = 0;
    for (auto &x: co) {
        if (x.F.F < r) {
            if (x.F.F > mx) {
                mx = x.F.F;
                if (x.S == 'B') {
                    val1 = 0;
                } else {
                    val1 = 1;
                }
            }
        } else {
            if (x.F.F < mn) {
                mn = x.F.F;
                if (x.S == 'B') {
                    val2 = 0;
                } else {
                    val2 = 1;
                }
            }
        }
    }
    if (val1 or val2) {
        cout << "YES\n";
        return;
    }
    mn = INF, mx = -INF, val1 = 0, val2 = 0;
    for (auto &x: ro) {
        if (x.F.S < c) {
            if (x.F.S > mx) {
                mx = x.F.S;
                if (x.S == 'B') {
                    val1 = 0;
                } else {
                    val1 = 1;
                }
            }
        } else {
            if (x.F.S < mn) {
                mn = x.F.S;
                if (x.S == 'B') {
                    val2 = 0;
                } else {
                    val2 = 1;
                }
            }
        }
    }
    if (val1 or val2) {
        cout << "YES\n";
        return;
    }
    cout << "NO\n";
}
