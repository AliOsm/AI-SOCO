#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)1e4 + 7;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
vector<int> seg[4 * MAXN];
bitset<MAXN> tmp[4 * MAXN], ans;
void push(int node, int st, int en, int l, int r, int x)
{
	if(st >= r || l >= en)
		return;
	if(l <= st && en <= r)
	{
		seg[node].push_back(x);
		return;
	}
	int mid = (st + en) >> 1;
	push(node << 1, st, mid, l, r, x);
	push(node << 1 | 1, mid, en, l, r, x);
}
void seg_bin(int node, int st, int en)
{
	for (auto u : seg[node])
		tmp[node] |= (tmp[node] << u);
	if(en - st < 2)
	{
		ans |= tmp[node];
		return;
	}
	tmp[node << 1] |= tmp[node];
	tmp[node << 1 | 1] |= tmp[node];
	int mid = (st + en) >> 1;
	seg_bin(node << 1, st, mid);
	seg_bin(node << 1 | 1, mid, en);
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    int n, q;
    cin >> n >> q;
    //vector segment.
    for (int i = 0; i < q; i++)
    {
    	int l, r, x;
    	cin >> l >> r >> x;
    	l--;
    	push(1, 0, n, l, r, x);
	}
	tmp[1][0] = 1;
	seg_bin(1, 0, n);
	vector<int> A;
	for (int i = 1; i <= n; i++)
		if(ans[i])
			A.push_back(i);
	cout << A.size() << "\n";
	for (auto u : A)
		cout << u << " ";
}