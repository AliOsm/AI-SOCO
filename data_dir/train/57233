#include <bits/stdc++.h>
#define int long long
#define inf 2e9
#define all(v) v.begin(), v.end()
using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;

const int N = 500000 + 3;
int n, a[N], b[N], fenw[N];
ll sum[2][N];
unordered_map <int, int> code;

void clr(){
    for (int i = 0; i <= n; i++)
        fenw[i] = -1;
}

void add(int x, int ind){
    for (int i = ind; i <= n; i |= i + 1)
        fenw[i] = max(fenw[i], x);
}

int get(int ind){
    int res = -1;
    for (int i = ind; i >= 0; i = (i & (i + 1)) - 1)
        res = max(res, fenw[i]);
    return res;
}


void clr1(){
    for (int i = 0; i <= n; i++)
        fenw[i] = n;
}

void add1(int x, int ind){
    for (int i = ind; i <= n; i |= i + 1)
        fenw[i] = min(fenw[i], x);
}

int get1(int ind){
    int res = n;
    for (int i = ind; i >= 0; i = (i & (i + 1)) - 1)
        res = min(res, fenw[i]);
    return res;
}

int ans[N];

void print_ans(int ind){
    int mn = inf;
    for (int i = ind; i >= 0; i--){
        mn = min(mn, a[i]);
        ans[i] = mn;
    }
    mn = inf;
    for (int i = ind + 1; i < n; i++){
        mn = min(mn, a[i]);
        ans[i] = mn;
    }
    for (int i = 0; i < n; i++)
        cout << ans[i] << " ";
}

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    #ifdef LOCAL
        freopen("input.txt", "r", stdin);
    #endif // LOCAL
    cin >> n;
    for (int i = 0; i < n; i++){
        cin >> a[i];
        b[i] = a[i];
    }
    sort(b, b + n);
    int sz = unique(b, b + n) - b;
    for (int i = 0; i < sz; i++)
        code[b[i]] = i;

    clr();
    for (int i = 0; i < n; i++){
        int lst = get(code[a[i]] - 1);
        if (lst == -1)
            sum[0][i] = (i + 1) * a[i];
        else
            sum[0][i] = sum[0][lst] + (i - lst) * a[i];
        add(i, code[a[i]]);
    }

    clr1();
    for (int i = n - 1; i >= 0; i--){
        int lst = get1(code[a[i]] - 1);
        sum[1][i] = sum[1][lst] + (lst - i) * a[i];
        add1(i, code[a[i]]);
    }

    pair <ll, int> ans = {-1, -1};
    for (int i = 0; i < n; i++)
        ans = max(ans, {sum[0][i] + sum[1][i + 1], i});
    print_ans(ans.second);
}
