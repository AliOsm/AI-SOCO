#include <bits/stdc++.h>
#include <ctime>

using namespace std;

#define ALL(x) x.begin(), x.end()
#define bits(x) __builtin_popcount(x)
#define bitsll(x) __builtin_popcountll(x)
#define precision(a) fixed << setprecision(a)

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef vector <int> vi;

template <class T>
inline T sqr (T x) {
	return x * x;
}

template <class T>
inline bool isSquare (T x) {
	T y = sqrt(x + 0.5);
	return (y * y) == x;
}

template <class T1, class T2>
inline T1 gcd (T1 a, T2 b) {
	return b ? gcd(b, a % b) : a;
}

template <class T1, class T2>
inline T1 eqMin (T1 & x, const T2 & y) {
	if (T1(y) < x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 eqMax (T1 & x, const T2 & y) {
	if (T1(y) > x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 min (const T1 & x, const T2 & y) {
	return x < (T1) y ? x : (T1) y;
}

template <class T1, class T2>
inline T1 max (T1 & x, const T2 & y) {
	return x > (T1) y ? x : (T1) y;
}

template <typename T>
inline T getint () {
	T x = 0, p = 1;
	char ch;
	do {
		ch = getchar();
	} while (ch <= ' ');
	if (ch == '-')
		p = -1, ch = getchar();
	while (ch >= '0' && ch <= '9')
		x = x * 10 + ch - '0', ch = getchar();
	return x * p;
}

struct _flag_t {
	string val;
}
const _1d{", "}, _2d{"\n  "};
_flag_t _flag = _1d;

ostream & operator<< (ostream & os, _flag_t flag) {
	_flag = flag;
	return os;
}

template <class It>
ostream & _out (ostream & os, It f, It l) {
	if (f == l) return os << "{}";
	_flag_t cur_flag = _flag;
	os << _1d << "{ " << *f;
	for (; ++f != l; os << cur_flag.val << *f);
	return os << " }";
}

template <class C>
auto operator<< (ostream & os, C const & cont)
-> decltype(begin(cont), end(cont), cont.size(), declval <ostream &>()) {return _out(os, begin(cont), end(cont));}

ostream & operator<< (ostream & os, string const & s) {return os << s.data();}

template <class X, class Y>
ostream & operator<< (ostream & os, pair <X, Y> const & p) {return os << "[" << p.first << ", " << p.second << "]";}

const double PI = acos(-1);
const double EPS = 1e-8;
const int INF = (int) 2e9;
const int MOD = (int) 1e9 + 7;
const int MAXN = (int) 2e5 + 10;

int n, k;
ll a[MAXN];
int c[MAXN];
int lst[MAXN];
ll b[MAXN];

bool can (ll x) {
	fill(c + 1, c + n + 1, 0);;
	using P = pair <ll, int>;
	priority_queue <P, vector <P>, greater <P>> q;
	for (int i = 1; i <= n; i++) {
		q.push({a[i] / b[i], i});
	}
	for (int i = 0; i < k; i++) {
		P v = q.top();
		q.pop();

		int id = v.second;

		if (a[id] + x * c[id] - b[id] * i < 0) return false;

		c[id]++;
		q.push({(a[id] + x * c[id]) / b[id], id});
	}
	return true;
}

int main () {
	ios_base::sync_with_stdio(false);
	cin >> n >> k;
	for (int i = 1; i <= n; i++) {
		cin >> a[i];
	}
	for (int i = 1; i <= n; i++) {
		cin >> b[i];
	}

	ll l = -1, r = (ll) 1e13;
	while (r - l > 1) {
		ll md = (l + r) >> 1;
		if (can(md)) {
			r = md;
		} else {
			l = md;
		}
	}


	if (!can(r)) return cout << -1, 0;

	cout << r;
}