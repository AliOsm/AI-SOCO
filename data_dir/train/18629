#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;

struct node {
    int left, right, sum, best;
    node() {}
    node(int _left, int _right, int _sum, int _best) : left(_left), right(_right), sum(_sum), best(_best) {}
};

node merge(const node &a, const node &b) {
    node c;
    c.sum = a.sum + b.sum;
    c.left = max(a.left, a.sum + b.left);
    c.right = max(b.right, b.sum + a.right);
    c.best = max({a.right + b.left, a.best, b.best});
    return c;
}

const int MAX = 5e5 + 5;
node st[4 * MAX];
vector<int> pos[MAX];
int n, c;

void update(int p, int l, int r, const int &idx, const int &val) {
    if(idx < l || idx > r) {
        return;
    }
    else if(l == r) {
        st[p] = node(val, val, val, val);
        return;
    }
    int mid = (l + r) / 2;
    update(p * 2, l, mid, idx, val);
    update(p * 2 + 1, mid + 1, r, idx, val);
    st[p] = merge(st[p * 2], st[p * 2 + 1]);
}

int main() {
    scanf("%d %d", &n, &c);
    int app_c = 0;
    fori(i, 1, n + 1) {
        int cur;
        scanf("%d", &cur);
        pos[cur].push_back(i);
        if(cur == c) {
            update(1, 1, n, i, -1);
            app_c++;
        }
    }
    int best_diff = 0;
    fori(i, 1, MAX) {
        if(i == c) {
            continue;
        }
        for(auto &p : pos[i]) {
            update(1, 1, n, p, 1);
        }
        int cur_diff = st[1].best;
        for(auto &p : pos[i]) {
            update(1, 1, n, p, 0);
        }
        best_diff = max(best_diff, cur_diff);
    }
    printf("%d\n", app_c + best_diff);
    return 0;
}
