#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <map>
#include <iterator>
#include <queue>
#include <list>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef list < int > :: iterator IteratorList;

const int NMax = 1000001;
const int cntTree = 2 * 262145;
const ld eps = 1e-9;
const double PI = 3.141592653589793238462;
const int MD = (int) (1 << 30 + 1);

#define MIN(x,y) ((x) > (y) ? (y) : (x))
#define MAX(x,y) ((x) > (y) ? (x) : (y))
#define SQR(x) ((x) * (x))
#define ABS(x) ((x) < (0) ? (-(x)) : (x))
#define SZ(x) (int) (x).size()

int dp[NMax],a[10];
int v;
string ans = "";

int solve(int v)
{
	//if (v == 0) return 0;
	if (dp[v] != -1) return dp[v];
	dp[v] = 0;
	for (int i = 1;i <= 9;i++)
		if (a[i] <= v) dp[v] = MAX(dp[v],solve(v - a[i]) + 1);
	return dp[v];
}

void recovery()
{
	while (true)
	{
		bool flag = false;
		for (int i = 9;i > 0;i--)
		    if (a[i] <= v && dp[v] == dp[v - a[i]] + 1)
		    {
				ans += i + '0';
				v -= a[i];
				flag = true;
				break;
			}
		if (!flag) break;
	}
}

int main()
{
	//freopen("input.txt","r",stdin);
//	freopen("output.txt","w",stdout);
	scanf("%i", &v);
	for (int i = 1;i <= 9;i++) cin >> a[i];
	for (int i = 1;i <= v;i++) dp[i] = -1;
	dp[v] = solve(v);
	if (dp[v] == 0)
	{
		cout << -1 << endl;
		return 0;
	}
	recovery();
	cout << ans << endl;

}
