// in the name of god 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
#include <bits/stdc++.h>
//#include <unistd.h>
using namespace std ;
using namespace __gnu_pbds;
/*
  struct Mat{int n;int a[maxn][maxn];Mat(bool x=0){for(int i=0;i<maxn;i++)for(int j=0;j<maxn;j++)a[i][j]=((i==j)?x:0);}};
  inline Mat operator*(const Mat&m1,const Mat&m2){Mat ret;int n=m1.n;ret.n=n;
  for(int i=0;i<n;i++)
  for(int j=0;j<n;j++)
  for(int k=0;k<n;k++)
  ret.a[i][j]=(0LL+ret.a[i][j]+1LL*m1.a[i][k]*m2.a[k][j])%mod;return ret;}inline Mat operator*=(Mat&m1,const Mat&m2){m1=m1*m2;} 
  inline Mat operator^(Mat mat,int k){Mat ret(1);ret.n=mat.n;while(k){if(k&1)ret*=mat;k/=2;mat*=mat;}return ret;}
  inline void operator^=(Mat m1, int k){m1=m1^k;} 
  inline ostream&operator<<(ostream&os,const Mat&mat){for(int i=0;i<mat.n;i++)for(int j=0;j<mat.n;j++)cout<<mat.a[i][j]<<((j+1==mat.n)?'\n':' ');}
*/
void operator+=(vector<int>&in1,const vector<int>&in2){for(int i=0;i<in2.size();i++)in1.push_back(in2[i]);}
#define y2 sdfklgjsdkfd
#define y1 sdfklgjsdkafd
#define X first 
#define Y second
//#define int long long  
typedef long long ll ;
typedef long double ld ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
typedef pair < int , int > pii ; 
typedef pair < int , pii > pi_ii ;
typedef pair < pii , int > pii_i ;
typedef pair < pii , pii > pii_ii ;
#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%I64d
const int mod0 = 1e9+7 ;
const int mod1 = 1e9+9 ;
const int maxL = 20 ;
const ll  inf = 1e18 ;
const int baze = 450 ;
const int maxn = 1e6 + 100 ;
const int base0 = 421 ;
const int base1 = 427 ;
int n , ar [ maxn ] , pos [ maxn ] , dp [ maxn ] , ans ;
vector < int > vc [ maxn ] ; 

main ( )
{
  scanf ( "%d" , &n ) ;
  for ( int i = 0 ; i < n ; i ++ )
    scanf ( "%d" , ar + i ) ;
  for ( int i = 0 ; i < maxn ; i ++ )
    pos [ i ] = -1 ; 
  for ( int i = 0 ; i < n ; i ++ )
    pos [ ar [ i ] ] = i ; 
  for ( int i = 2 ; i < maxn ; i ++ )
    if ( vc [ i ] . size ( ) == 0 ) 
      for ( int j = i ; j < maxn ; j += i )
	vc [ j ] . push_back ( i ) ;
  for ( int i = 1 ; i < maxn ; i ++ )
    {
      dp [ i ] = ( pos [ i ] != -1 );
      for ( int j : vc [ i ] ) 
	dp [ i ] = max ( dp [ i ] , dp [ i/j ] + ( pos [ i ] != -1 ) ) ;
    }
  for ( int i = 0 ; i < maxn ; i ++ )
    ans = max ( ans , dp [ i ] ) ; 
  printf ( "%d" , ans ) ;
}
