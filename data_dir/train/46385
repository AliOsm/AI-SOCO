#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm) -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
/* @@@ ----------------------------------- */

string xsolve(vector<size_t> & cnt,
              map<vector<size_t>, string> & cache)
{
    {
        const auto iter = cache.find(cnt);
        if(iter != end(cache)) return iter->second;
    }

    if(accumulate(begin(cnt), end(cnt), 0) == 1)
    {
        const auto i = find(begin(cnt), end(cnt), 1) - begin(cnt);
        return cache[cnt] = "BGR"[i];
    }

    set<char> out;

    for(size_t i = 0; i < 3; ++ i)
    {
        if(1 < cnt[i])
        {
            -- cnt[i];
            const auto val = xsolve(cnt, cache);
            for(const auto j: val) out.insert(j);
            ++ cnt[i];
        }

        if(0 < cnt[i])
        {
            -- cnt[i];
            for(size_t j = i + 1; j < 3; ++ j)
                if(0 < cnt[j])
                {
                    -- cnt[j];
                    ++ cnt[3 - i - j];
                    const auto val = xsolve(cnt, cache);
                    for(const auto k: val) out.insert(k);

                    ++ cnt[j];
                    -- cnt[3 - i - j];
                }

            ++ cnt[i];
        }
    }

    return cache[cnt] = string(begin(out), end(out));
}


string probB()
{
    size_t n;
    cin >> n;

    string str;
    cin >> str;

    vector<size_t> cnt({0, 0, 0});
    for(const auto i: str)
        ++ cnt[i == 'B' ? 0 : i == 'G' ? 1 : 2];

    cnt[0] = min(cnt[0], (size_t) 5);
    cnt[1] = min(cnt[1], (size_t) 5);
    cnt[2] = min(cnt[2], (size_t) 5);

    map<vector<size_t>, string> cache;
    return xsolve(cnt, cache);
}

int main(const int argc, char * argv [])
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    cout << probB();

    return EXIT_SUCCESS;
}
