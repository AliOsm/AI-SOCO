#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int lz[2000004];
int seg1[2000004],seg2[2000004];
int a[500005];
int lft[500005],rgt[500005];
void build(int ver,int tl,int tr)
{
   if(tl>tr)
      return ;
   else if(tl==tr)
   {
      seg1[ver]=a[tl];
      seg2[ver]=a[tl];
   }
   else
   {
      int tm=(tl+tr)/2;
      build(2*ver,tl,tm);
      build(2*ver+1,tm+1,tr);
      seg1[ver]=max(seg1[2*ver],seg1[2*ver+1]);
      seg2[ver]=(seg2[2*ver]+seg2[2*ver+1]);      
   }
}

void push_lz(int ver,int tl,int tm,int tr)
{
   lz[2*ver]=lz[ver];
   lz[2*ver+1]=lz[ver];
   seg1[2*ver]=lz[ver];
   seg1[2*ver+1]=lz[ver];
   seg2[2*ver]=lz[ver]*(tm+1-tl);
   seg2[2*ver+1]=lz[ver]*(tr-tm);
   lz[ver]=0;
}

void upd(int ver,int tl,int tr,int l,int r,int val)
{
   if(tl>tr||l>r||tr<l||r<tl)
      return ;
   else if(tl==l && tr==r)
   {
      seg1[ver]=val;
      seg2[ver]=val*(tr-tl+1);
      lz[ver]=val;
   }
   else
   {
      int tm=(tl+tr)/2;
      if(lz[ver])
         push_lz(ver,tl,tm,tr);
      upd(2*ver,tl,tm,l,min(tm,r),val);
      upd(2*ver+1,tm+1,tr,max(tm+1,l),r,val);
      seg1[ver]=max(seg1[2*ver],seg1[2*ver+1]);
      seg2[ver]=(seg2[2*ver]+seg2[2*ver+1]);      
   }     
}

int get(int ver,int tl,int tr,int l,int r,int k)
{
   if(tl>tr||l>r||tr<l||r<tl)
      return 0;
   else if(tl==tr)
   {
      return 1;
   }
   else
   {
      int tm=(tl+tr)/2;
      if(lz[ver])
         push_lz(ver,tl,tm,tr);
      seg1[ver]=max(seg1[2*ver],seg1[2*ver+1]);
      seg2[ver]=(seg2[2*ver]+seg2[2*ver+1]);      
      if(seg1[2*ver]<=k)
         return tm+1-tl+get(2*ver+1,tm+1,tr,max(tm+1,l),r,k);
      else
         return get(2*ver,tl,tm,l,min(tm,r),k);
   }   
}

int sum(int ver,int tl,int tr,int l,int r)
{
   if(tl>tr||l>r||tr<l||r<tl)
      return 0;
   else if(tl==l && tr==r)
      return seg2[ver];
   else
   {
      int tm=(tl+tr)/2;
      if(lz[ver])
         push_lz(ver,tl,tm,tr);
      seg1[ver]=max(seg1[2*ver],seg1[2*ver+1]);
      seg2[ver]=(seg2[2*ver]+seg2[2*ver+1]);      
      return sum(2*ver,tl,tm,l,min(tm,r))+sum(2*ver+1,tm+1,tr,max(tm+1,l),r);
   }   
}

int mmx(int ver,int tl,int tr,int l,int r)
{
   if(tl>tr||l>r||tr<l||r<tl)
      return 0;
   else if(tl==l && tr==r)
      return seg1[ver];
   else
   {
      int tm=(tl+tr)/2;
      if(lz[ver])
         push_lz(ver,tl,tm,tr);
      seg1[ver]=max(seg1[2*ver],seg1[2*ver+1]);
      seg2[ver]=(seg2[2*ver]+seg2[2*ver+1]);      
      return max(mmx(2*ver,tl,tm,l,min(tm,r)),mmx(2*ver+1,tm+1,tr,max(tm+1,l),r));
   }   
}

signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
   
 #ifndef ONLINE_JUDGE
    if(fopen("INPUT.txt","r"))
    {
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
    }
 #endif

// -------------------------------------Code starts here---------------------------------------------------------------------     

   int n;
   cin>>n;
   for(int i=1;i<=n;i++)
   {
      cin>>a[i];
   }
   build(1,1,n);
   for(int i=1;i<=n;i++)
   {
      int mx=mmx(1,1,n,1,i-1);
      if(mx>a[i])
      {
      int ind=get(1,1,n,1,i-1,a[i]);
      if(ind!=0)
         upd(1,1,n,ind,i-1,a[i]);
      }
      lft[i]=sum(1,1,n,1,i-1)+a[i];
   }
   reverse(a+1,a+n+1);
   build(1,1,n);
   for(int i=1;i<=2000000;i++)
   {
      lz[i]=0;
   }
   for(int i=1;i<=n;i++)
   {
      int mx=mmx(1,1,n,1,i-1);
      if(mx>a[i])
      {
      int ind=get(1,1,n,1,i-1,a[i]);
      if(ind!=0)
         upd(1,1,n,ind,i-1,a[i]);
      }
      rgt[n-i+1]=sum(1,1,n,1,i-1)+a[i];
   }
   reverse(a+1,a+n+1);
   int mx=0,ind=1;
   for(int i=1;i<=n;i++)
   {
      if(lft[i]+rgt[i]-a[i]>mx)
      {
         mx=lft[i]+rgt[i]-a[i];
         ind=i;
      }      
   }

   for(int i=ind-1;i>=1;i--)
   {
      a[i]=min(a[i],a[i+1]);
   }
   for(int i=ind+1;i<=n;i++)
   {
      a[i]=min(a[i],a[i-1]);
   }
   for(int i=1;i<=n;i++)
      cout<<a[i]<<" ";


// -------------------------------------Code ends here------------------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
    clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }