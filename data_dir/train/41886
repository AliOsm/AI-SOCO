#include <bits/stdc++.h>
using namespace std;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl





typedef long long ll;
const ll mod = 1e9+7;
const int maxn = 1e6 + 5;



int n; ll x,y;
ll a[maxn];


ll mp[maxn]; //freq
ll have[maxn];
bool sieve[maxn];

int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);
    cin>>n>>x>>y;
    bool allone=true;
    for (int i=0; i<n; i++) {
	cin>>a[i];
	have[a[i]]++;
	if (a[i]>1) allone=false;
    }

    // sort(a,a+n);
    // for (int i=0; i<n; i++) {
    // 	cout<<a[i]<<" ";
    // }
    // cout<<endl;

    if (allone) {

	ll cost = min(x*n, y*n);
	out(cost);
	
    }

    for (ll i=2; i<=(int)1e6; i++) {
	if (!sieve[i]) {
	    for (ll j=i; j<=(int)1e6; j+=i) {
		sieve[j]=true;
		mp[i] += have[j];
	    }
	}
    }


    
    ll tot = x*n;

    {
	//make all odds even, or remove them
	ll odd=0;
	for (int i=0; i<n; i++) {
	    if (a[i]%2) odd++;
	}

	ll cur = odd*min(x,y);
	tot = min(cur, tot);
    }
    
    ll fac=-1;

    // try top 10 prime facs
    vector<pair<ll,ll>> best;

    for (int i=2; i<=(int)1e6; i++) {
	if (mp[i]) {
	    best.push_back({mp[i],i});
	}
    }
    
    sort(best.rbegin(), best.rend());
    best.resize(min((int)best.size(), 10));
    
    
    for (auto p: best) {
	fac=p.second;
	ll cur = 0;
	for (int i=0; i<n; i++) {
	    if (a[i]%fac == 0) continue;
	    ll nxt = (a[i]/fac + 1)*fac;
	    ll cost = y*(nxt-a[i]);
	    cur += min(cost, x);
	}
	tot = min(cur, tot);
    }
    
    cout<<tot<<endl;
    return 0;
}
