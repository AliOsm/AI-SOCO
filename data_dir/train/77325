
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

// A red-black tree table storing ints and their order
// statistics. Note that since the tree uses
// tree_order_statistics_node_update as its update policy, then it
// includes its methods by_order and order_of_key.

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

#define pii             pair<int , int >
#define inf             1111111111
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pn              printf("\n")
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b, c)    printf("%d %d %d\n", a, b, c)
#define pcs(a)          printf("Case %d: ", a)
#define mp              make_pair
#define vi              vector<int >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define mem(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
#define x               first
#define y               second
#define lc              (2*i)
#define rc              (2*i+1)

typedef long long LL;
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1,0};int dy[]={0,1,1,1,0,-1,-1,-1,0};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//int  on(int n, int pos) {return n | (1<<pos);} //typecast 1 in case of int
//int  off(int n, int pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

const int M = 100010;

ordered_set S;
int nxt[M];
int last[M];
int taken[M];
int A[M];
int f[M];
int ans[M];
vector<int>diff[M];

int main()
{
#ifndef ONLINE_JUDGE
    freopen("/home/riaz/Documents/in.txt", "r", stdin);
//    freopen("/home/riaz/Documents/out.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);

    int n, i, j, k;

    in(n);
    for (i = 1; i <= n; i++) in(A[i]);

    mem(last, -1);
    for (i = n; i > 0; i--)
    {
        if (last[A[i]] == -1) nxt[i] = -1;
        else nxt[i] = last[A[i]];
        last[A[i]] = i;
    }

    for (i = 1; i <= n; i++)
    {
        if (!taken[A[i]])
        {
            S.insert(i);
            taken[A[i]] = true;
            f[i] = true;
        }
    }

    for (i = 1; i <= n; i++) diff[1].pb(i);

    for (i = 1; i <= n; i++)
    {
        for (int k : diff[i])
        {
            if (S.find_by_order(k) != S.end())
            {
                int p = *S.find_by_order(k);
                diff[p].pb(k);
                ans[k]++;
            }
        }

        f[i] = 0;
        S.erase(i);
        if (nxt[i] != -1)
        {
            f[nxt[i]] = 1;
            S.insert(nxt[i]);
        }
    }

    for (i = 1; i <= n; i++) prs(ans[i]+1);
    pn;


return 0;
}
