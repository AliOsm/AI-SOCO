#include <bits/stdc++.h>

using namespace std;

const int maxn = 1e5 + 10;

vector <int> g[maxn];
vector <int> comp[maxn];
bool used[maxn];

int cnt = 0;

void dfs(int v) {
    used[v] = true;
    comp[cnt].push_back(v);
    for (auto u : g[v]) {
        if (!used[u]) {
            dfs(u);
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int n = 0;
    int m = 0;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int x, y;
        cin >> x >> y;
        x--; y--;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    for (int i = 0; i < n; i++) {
        if (!used[i]) {
            dfs(i);
            cnt++;
        }
    }
    int ans = 0;
    for (int i = 0; i < cnt; i++) {
        int v_s = comp[i].size();
        int edg_s = 0;
        for (auto x : comp[i]) {
            edg_s += g[x].size();
        }
        edg_s /= 2;
        if (edg_s + 1 == v_s)
            ans++;
    }
    cout << ans << endl;
    return 0;
}