/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-01 19:52:06
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 31;
const ll INF = 8e18;
const ll MOD = 998244353; // 1e9 + 9;

struct Mat{
    ll n , m;
    vector<vector<ll>> mat;
    Mat(ll N = 1 , ll M = 1){
        n = N , m = M;
        mat = vector<vector<ll>>(n , vector<ll>(m , 0));
    }
    friend Mat Mul(const Mat &A , const Mat &B){
        assert(A.m == B.n);
        Mat res(A.n , B.m);
        for(ll i = 0 ; i < A.n ; i++){
            for(ll j = 0 ; j < A.m ; j++){
                for(ll k = 0 ; k < B.m ; k++){
                    res.mat[i][k] = (res.mat[i][k] + A.mat[i][j] * B.mat[j][k]) % MOD;
                }
            }
        }
        return res;
    }
};

ll n , m , cur , A[MAXN] , f[3][3] , cnt[MAXN][4] , dp[MAXN][4];
vector<pll> vec[MAXN];
Mat col[3] , tot , pw[LOG] , res;

void build(ll x){
    col[x] = Mat(64 , 64);
    for(ll i = 0 ; i < 64 ; i++){
        ll mark[4] = {0 , 0 , 0 , 0} , g = 0;
        for(ll j = 0 ; j < 3 ; j++){
            if(f[x][j]) mark[(i >> (2 * (2 - j))) & 3] = 1;
        }
        while(mark[g])  g++;
        col[x].mat[(g << 4) | (i >> 2)][i] = 1;
        //cout << ((g << 4) | (i >> 2)) << sep << i << endl;
    }
    /*for(ll i = 0 ; i < 64 ; i++){
        for(ll j = 0 ; j < 64 ; j++)    cout << col[x].mat[i][j] << sep;
        cout << endl;
    }
    cout << endl << endl;*/
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n;
    for(ll i = 1 ; i <= n ; i++)    cin >> A[i] , vec[i].push_back({0 , 0});
    cin >> m;
    for(ll i = 1 ; i <= m ; i++){
        ll x , y , c;
        cin >> x >> y >> c;
        vec[x].push_back({y , c - 1});
    }
    for(ll i = 0 ; i < 3 ; i++) for(ll j = 0 ; j < 3 ; j++) cin >> f[i][j];
    
    build(0) ; build(1) ; build(2);
    tot = Mat(64 , 64);
    for(ll i = 0 ; i < 64 ; i++)    for(ll j = 0 ; j < 64 ; j++)    tot.mat[i][j] = col[0].mat[i][j] + col[1].mat[i][j] + col[2].mat[i][j];
//    for(ll i = 0 ; i < 64 ; i++ , cout << endl)    for(ll j = 0 ; j < 64 ; j++)    cout << tot.mat[i][j] << sep;
    pw[0] = tot;
//   for(ll i = 0 ; i < 64 ; i++ , cout << endl) for(ll j = 0 ; j < 64 ; j++)    cout << pw[0].mat[i][j] << sep;
    for(ll i = 1 ; i < LOG ; i++)   pw[i] = Mul(pw[i - 1] , pw[i - 1]);
//    for(ll i = 0 ; i < 64 ; i++ , cout << endl) for(ll j = 0 ; j < 64 ; j++)    cout << pw[1].mat[i][j] << sep; 

    for(ll i = 1 ; i <= n ; i++){
        res = Mat(64 , 1);
        Sort(vec[i]);
//        for(ll j = 0 ; j < 64 ; j++)    cout << res.mat[j][0] << sep;
//        cout << endl;
        res.mat[63][0] = 1;
        for(ll j = 1 ; j < SZ(vec[i]) ; j++){
            ll x = vec[i][j].X - vec[i][j - 1].X - 1;
//            cout << x << endl;
            for(ll k = 0 ; k < LOG ; k++)   if(x & (1 << k))    res = Mul(pw[k] , res);
            res = Mul(col[vec[i][j].Y] , res);
        }
        ll x = A[i] - vec[i].back().X;
//        cout << x << endl;
//        for(ll j = 0 ; j < 64 ; j++)    cout << res.mat[j][0] << sep;
//        cout << endl;
        for(ll j = 0 ; j < LOG ; j++)   if(x & (1 << j))    res = Mul(pw[j] , res);
//        for(ll j = 0 ; j < 64 ; j++)    cout << res.mat[j][0] << sep;
//        cout << endl;
        for(ll j = 0 ; j < 64 ; j++){
            cnt[i][(j >> 4)] += res.mat[j][0];
        }
//        cout << i << sep << cnt[i][0] << sep << cnt[i][1] << sep << cnt[i][2] << sep << cnt[i][3] << endl;
//        for(ll j = 0 ; j < 4 ; j++) for(ll k = 0 ; k < 4 ; k++) for(ll l = 0 ; l < 4 ; l++) cout << j << sep << k << sep << l << sep << res.mat[(j << 4) + (k << 2) + l][0] << endl;
        for(ll j = 0 ; j < 4 ; j++) cnt[i][j] %= MOD;
    }

    dp[0][0] = 1;
    for(ll i = 1 ; i <= n ; i++){
        for(ll j = 0 ; j < 4 ; j++){
            for(ll k = 0 ; k < 4 ; k++){
                dp[i][j] = (dp[i][j] + dp[i - 1][j ^ k] * cnt[i][k]) % MOD;
            }
        }
    }
    cout << dp[n][0] % MOD << endl;

    return 0;
}
/*

*/
