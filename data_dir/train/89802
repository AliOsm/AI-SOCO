#include "bits/stdc++.h"
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
using namespace __gnu_pbds;
using namespace std;
typedef long long ll;
// #define int long long
#define pb push_back
#define fi first
#define se second
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define sz(x) (int)x.size()
const int mod = 1e9 + 7;
// const int mod1 = 998244353;
typedef double f80;
 
#ifndef LOCAL
#pragma GCC optimize ("O2")
#define endl '\n'
#endif
 
template<typename T>
using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
 
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
    uniform_int_distribution<int> uid(l, r);
    return uid(rng);
}
 
ll pwr(ll a,ll b, ll mod){
    a %= mod;
    int ans = 1;
    while(b){
        if(b & 1) ans = (ans * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ans;
}
 
string to_string(string s) {
  return '"' + s + '"';
}
 
string to_string(const char* s) {
  return to_string((string) s);
}
 
string to_string(bool b) {
  return (b ? "true" : "false");
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
 
void debug_out() { cerr << endl; }
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
 
#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

void debug1(int a[], int l,int r) {
	#ifdef LOCAL
		vector<int> temp(a + l, a + r + 1);
		debug(temp);
	#endif
}

const int N = 5005;
f80 dp[2][N];
int n, T;
int p[N];
int t[N];
f80 pw[105][N];

void solve(){
	cin >> n >> T;
	fr(i, 0, 100) {
		f80 pp = i / 100.0;
		pw[i][0] = 1;
		fr(j, 1, T)
			pw[i][j] = pw[i][j - 1] * pp;
	}
	fr(i, 1, n) {
		cin >> p[i] >> t[i];
	}
	dp[0][0] = 1;
	f80 ans = 0;
	fr(i, 0, n) {
		int i1 = i & 1;
		int i2 = i1 ^ 1;
		fr(j, 0, T) 
			dp[i2][j] = 0;
		f80 cur_val = 0;
		f80 pp = p[i + 1] / 100.0;
		f80 lol = pw[100 - p[i + 1]][t[i + 1] - 1];
		fr(j, 0, T) {
			if(j + t[i + 1] > T) {
				ans += pw[100 - p[i + 1]][T - j] * dp[i1][j] * i;
			}
			if(i == n) {
				ans += dp[i1][j] * n;
				continue;
			}
			if(j + t[i + 1] <= T) {
				dp[i2][j + t[i + 1]] += dp[i1][j] * lol;
			}
			if(j > 0) {
				cur_val = cur_val * (1 - pp) + dp[i1][j - 1] * pp;
			}
			if(j >= t[i + 1]) {
				cur_val -= lol * dp[i1][j - t[i + 1]] * pp;
			}
			dp[i2][j] += cur_val;
		}
	}
	cout << ans;
}
signed main(){
    IO;
    #ifdef LOCAL
        freopen("inp.txt","r", stdin);
        freopen("out.txt", "w", stdout);
    #endif
    cout << setprecision(10) << fixed;
    int t = 1;
    // cin >> t;
    fr(tt, 1, t){
        solve();
    }
    return 0;
} 