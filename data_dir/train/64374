#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <time.h>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <unordered_set>
#include <map>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>
#include <complex>
#include <cassert>
#include <regex>
#include <random>
#include <omp.h>
#include <fstream>
 
#define ll long long
#define ld long double
#define ull unsigned ll
#define mp(xx, yy) make_pair(xx, yy)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define pll pair<ll, ll> 
#define vi vector<int>
#define vll vector<ll>
#define vpii vector<pii>
#define vpll vector<pll>
#define vvi vector<vector<int>>
#define vvll vector<vll>
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
//#define endl '\n'
ld pi = acos(-1.0);
const int mod = 998244353;
using namespace std;
 
 
int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("garbling.in", "r", stdin);
	//freopen("garbling.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cout.precision(20); cout.setf(ios::fixed);
	int tt;
	cin >> tt;
	while (tt--) {
		int n;
		cin >> n;
		vvi pos(201);
		int ans = 0;
		forn(i, 0, n) {
			int x;
			cin >> x;
			x--;
			pos[x].push_back(i);
			ans = max(ans, (int)pos[x].size());
		}
		forn(i, 0, 200) {
			if (pos[i].size() == 0) continue;
			forn(j, 0, 200) {
				if (i == j) continue;
				if (pos[j].size() == 0) continue;
				vpii p;
				for (auto &x : pos[i]) {
					p.push_back({ x, i });
				}
				for (auto &x : pos[j]) {
					p.push_back({ x, j });
				}
				
				sort(all(p));
				int cur = 0;
				int l = 0, r = p.size() - 1;
				int cntj = pos[j].size();
				int cnti = 0;
				while (l < r) {
					while (l < p.size() && p[l].second != i) {
						cntj--;
						l++;
					}
					while (r >= 0 && p[r].second != i) {
						cntj--;
						r--;
					}
					if (l >= r) break;
					cnti += 2;
					ans = max(ans, cntj + cnti);
					l++, r--;
				}
			}
		}
		cout << ans << '\n';
	}
	return 0;
}