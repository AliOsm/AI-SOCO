/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
#define mod 1000000007
#define OS //single input use oeis
lli INF=1e17;
lli eps=1e-8;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,z,k,x,m,d,y,q;
const double pi=3.14159265358979323846;
lli add(lli a, lli b) {
 	lli res = a + b;
 
 	while (res >= mod) res -= mod;
 
 	while (res < 0) res += mod;
 
 	return res;
}
 lli me(lli a,lli b)
{
    lli res=1;
    while(b)
    {
        if(b&1)
        res=(res%mod*a%mod)%mod;
        a=a*a;
        a%=mod;
        b=b>>1;
    }
    return res;
}
lli mI(lli a)
{
    return (me(a,mod-2)%mod+mod)%mod;
}
lli a[200005];
lli timer;
vector<lli> v[200005];
lli begi[200005];
lli en[200005];
// lli discover[100005];
lli vis[200005];
lli val[200005];
lli parity[200005];
void dfs(lli i,lli pp)
{
    ++timer;
    val[timer]=a[i];
    begi[i]=timer;
    parity[timer]=pp;
    vis[i]=1;
    for(auto &j: v[i])
    {
        if(!vis[j])
        dfs(j,(!pp));
    }
    en[i]=timer;
}

lli ans[1000005][2];
lli par[1000005];
lli marked[1000005];
void update(lli v,lli tl,lli tr,lli val,lli l,lli r,lli parity)
{
	if(l>r)
	return;
	if(tl>=l&&tr<=r)
	{
	     ans[v][parity]+=val;
	   //  cout<<marked[v]<<"\n";
	 
	   //push(v);
	}
	else
	{
// 	 push(v);
	 lli tm=(tl+tr)/2ll;
	 update(2*v,tl,tm,val,l,min(tm,r),parity);
	 update(2*v+1,tm+1,tr,val,max(l,tm+1),r,parity);
	}
}

lli get(lli v,lli tl,lli tr,lli l,lli r,lli parity)
{
	if(l>r)
	return 0;
	if(tl==tr)
	{
	   // cout<<tl<<" "<<tr<<" "<<ans[v]<<" "<<v<<"\n";
	    return ans[v][parity];
	}
// 	push(v);
// 	cout<<v<<" "<<ans[v]<<" "<<
	lli tm=(tl+tr)/2ll;
	return ans[v][parity] + get(2*v,tl,tm,l,min(l,tm),parity) + get(2*v+1,tm+1,tr,max(tm+1,l),r,parity);
}

int main()
{
 IO;
 OS;
 cin>>n>>q;
 for(int i=1;i<=n;i++)
 cin>>a[i];
 
 for(int i=1;i<n;i++)
 {
     cin>>x>>y;
     v[x].push_back(y);
     v[y].push_back(x);
 }
 
 dfs(1,0);
//  build(1,1,n);
//  cout<<get1(1,1,n,1,1)<<"\n";
// cout<<q<<"\n";
 for(int i=1;i<=q;i++)
 {
    //  cout<<i<<" ";
     cin>>x;
    //  cout<<x<<"\n";
     if(x==1)
     {
         cin>>y>>z;
         if(parity[begi[y]])
         {
         update(1,1,n,z,begi[y],en[y],1);
         update(1,1,n,-z,begi[y],en[y],0);
         }
         else
         {
             update(1,1,n,-z,begi[y],en[y],1);
         update(1,1,n,z,begi[y],en[y],0);
         }
     }
     else
     {
        //  cout<<i<<" ";
        cin>>y;
         if(parity[begi[y]])
         cout<<a[y]+get(1,1,n,begi[y],begi[y],1)<<"\n";
         else
         cout<<a[y]+get(1,1,n,begi[y],begi[y],0)<<"\n";
     }
    //  cout<<i<<" "<<q<<" "<<x<<"\n";
 }
 
}