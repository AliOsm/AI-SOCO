
// ~/BAU/ACM-ICPC/Teams/Rampage/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <functional>
#include <assert.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const int N = 6;
const ll MOD = 1e9 + 7;
const double eps = 1e-9;

int n, mn, h[4][4];
vector<vector<double> > m;
vector<double> ans, cur;

int gauss() {
	for (int i = 0, v; i < n; i++) {
		v = i + 2;
		int at = i;
		for (int j = i + 1; j < n; j++)
			if (abs(m[j][v]) > abs(m[at][v]))
				at = j;
		swap(m[i], m[at]);
		double tmp = m[i][v];
		for (int j = 2; j <= 8; j++)
			m[i][j] /= tmp;
		for (int j = i + 1; j < n; j++) {
			tmp = -m[j][v];
			for (int k = 2; k <= 8; k++)
				m[j][k] += tmp * m[i][k];
		}
	}
	for (int i = n - 1, v = i + 2; i >= 0; i--, v--) {
		cur[v] = m[i][8];
		for (int j = 7; j > v; j--)
			cur[v] -= cur[j] * m[i][j];
	}
	for (int i = 2; i <= 7; i++) {
		if (cur[i] < 0.0) 
			return 1e9;
		if (int(cur[i]) < cur[i] - eps)
			return 1e9;
	}
	int cnt = 0;
	for (int i = 1; i <= 7; i++)
		cnt += int(cur[i]);
	return cnt;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif
	n = 6;
	for (int i = 0; i < 4; i++)
		for (int j = i + 1; j < 4; j++)
			scanf("%d", &h[i][j]);
	mn = 1e9;
	ans.resize(8);
	bool f;
	for (int x1 = 0; x1 <= 100000; x1++) {
		f = 1;
		m.clear();
		m.resize(6, vector<double>(9));
		for (int i = 0, k = 0; i < 4; i++)
			for (int j = i + 1; j < 4; j++, k++) {
				m[k][8] = h[i][j];
				for (int msk = 1; msk <= 7; msk++) 
					m[k][msk] = ((msk & (1 << i)) > 0) ^ ((msk & (1 << j)) > 0);
			}
		for (int i = 0; i < n; i++) {
			m[i][8] -= x1 * m[i][1];
			if (m[i][8] < 0.0) {
				f = 0;
				break;
			}
		}
		if (!f) continue;
		cur.resize(8, 0);
		cur[1] = x1;
		int res = gauss();
		if (res < mn) {
			mn = res;
			ans = cur;
		}
	}
	if (mn >= 1e9) puts("-1");
	else {
		printf("%d\n", mn);
		for (int i = 0; i < 4; i++) {
			for (int msk = 1; msk <= 7; msk++) {
				char c = (msk & (1 << i)) ? 'a' : 'b';
				for (int j = 0; j < ans[msk]; j++)
					printf("%c", c);
			}
			puts("");
		}
	}
	return 0;
}