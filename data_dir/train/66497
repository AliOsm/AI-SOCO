#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;
#define MOD 1000000007ll

int X,Y,K;
int filled[20][20];
int a[20][20];
int b[20][20];
int p[20];
bool exist[20];

ll count_matchings(void){
    int i,j;
        
    REP(i,K) p[i] = -1;
    REP(i,K) exist[i] = false;
    REP(i,X) REP(j,Y) if(filled[i][j] != -1){
        int x = filled[i][j];
        int y = a[i][j];
        if(p[y] != -1 && p[y] != x) return false;
        p[y] = x;
    }
    REP(i,X) REP(j,Y) exist[a[i][j]] = true;
    
    REP(i,K) REP(j,i) if(p[i] == p[j] && p[i] != -1) return 0;
    
//  REP(i,K) cout << exist[i] << ' ' << p[i] << endl;
    
    int n = K, k = 0;
    REP(i,K){
        if(p[i] != -1) n--;
        if(p[i] == -1 && exist[i]) k++;
    }
    
    ll ans = 1;
    REP(i,k) ans = ans * (n-i) % MOD;
    return ans;
}

bool check(int x, int y){
    b[x][y] = 0;
    if(x != 0) b[x][y] |= b[x-1][y];
    if(y != 0) b[x][y] |= b[x][y-1];
    if(b[x][y] & (1<<a[x][y])) return false;
    b[x][y] |= (1<<a[x][y]);
    return true;
}

ll dfs(int x, int y, int used){ // cout << x << ' ' << y << endl;
    if(x == X) return count_matchings();
    
    int x2 = x, y2 = y+1;
    if(y2 == Y) {x2++; y2 = 0;}
    
    ll ans = 0;
    int i;
    REP(i,used+1) if(i < K){
        a[x][y] = i;
        if(check(x, y)){
            ans += dfs(x2, y2, max(used, i+1));
            if(ans >= MOD) ans -= MOD;
        }
        a[x][y] = -1;
    }
    
    return ans;
}

int main(void){
    int i,j;
    
    cin >> X >> Y >> K;
    REP(i,X) REP(j,Y){
        cin >> filled[i][j];
        filled[i][j]--;
    }
    
    if(K < X + Y - 1){
        cout << 0 << endl;
        return 0;
    }
    
    ll ans = dfs(0, 0, 0);
    cout << ans << endl;
    
    return 0;
}
