#include <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
using namespace std;
typedef long long ll; 
typedef long double ld;
typedef pair<ll, ll> pll;

const ll N = 2e5 + 30, Mod = 1e9 + 7;
const ll SQ = 330 ;

ll a[N];
map<ll, ll> C;
ll spf[N];
vector<ll> vec[N];
int main () {
    	ios::sync_with_stdio(0), cin.tie(0);
    	iota(spf, spf + N, 0);
	for (ll i = 2; i < N; i ++)
		for (int j = i; j < N; j += i)
			spf[j] = min(spf[j], i);
    	ll n;
    	cin >> n;
    	for (int i = 0; i < n; i ++) {
    		cin >> a[i];
	}
	random_shuffle(a, a + n);
	ll x = a[0], y = a[1];
	ll l = x * y / __gcd(x, y);
	if (n == 2) {
		return cout << l, 0;
	}
	vector<ll> D;
	for (ll i = 1; i * i <= l; i ++) {
		if (l % i) continue;
		D.pb(i);
		D.pb(l / i);
	}
	for (int i = 0; i < n; i ++) {
		ll x;
		x = a[i];
		while (x != 1) {
			ll res = spf[x];
			ll cnt = 0;
			while (x % res  == 0) {
				x /= res;
				cnt ++;
			}
			vec[res].pb(cnt);
		}
	}
	for (int i = 0; i < N; i ++) {
		sort(all(vec[i]));
		if (vec[i].size() < 2) continue;
		ll x = vec[i][1];
		if (i == 3) {
			for (auto x : vec[3]) {
				//cout << x << ' ';
			}
			//cout << endl;
		}
	}
	ll ans = 1e18;
	sort(all(D));
	reverse(all(D));
	for (auto d : D) {
		x = d;
		C.clear();
		for (ll i = 2; i * i <= x; i ++) {
			if (x % i) continue;
			ll cnt = 0;
			while (x % i == 0) {
				x /= i;
				cnt ++;
			}
			C[i] = cnt;
		}
		if (x > 1) {
			C[x] = 1;
		}
	
		ll res = 1;
		for (int i = 0; i < N; i ++) {
			if (!C[i]) continue;
			if (vec[i].size() < 2 && C[i] > 0) {
				res = 0;
				break;
			}
			if (vec[i].size() < n - 1) {
				res = 0;
				break;
			}
			if (vec[i].size() == n - 1 && vec[i][0] < C[i]) {
				res = 0;
				break;
			} 
			//if (vec[i].size() < 2) continue;
			ll r = max(vec[i][0], vec[i][1]);
			if (r < C[i]) {
				res = 0;
				break;
			}
		}
		if (res) {
			return cout << d, 0;
		}
	}
    	
}
