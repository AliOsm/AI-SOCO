/*
▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄██████████████▒▒▐▌
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐
  
*/
#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>
  
using namespace std;





template<typename T1, typename T2>inline void chkmin(T1 &x, T2 y) { if (x > y) x = y; }
template<typename T1, typename T2>inline void chkmax(T1 &x, T2 y) { if (x < y) x = y; }
/** Interface */
     
inline int readChar();
template <class T = int> inline T readInt(); 
template <class T> inline void writeInt( T x, char end = 0 );
inline void writeChar( int x ); 
inline void writeWord( const char *s );
     
/** Read */
     
static const int buf_size = 4096;
     
inline int getChar() {
    static char buf[buf_size];
    static int len = 0, pos = 0;
    if (pos == len) {
        pos = 0, len = fread(buf, 1, buf_size, stdin);
    }
    if (pos == len) {
        return -1;
    }
    return buf[pos++];
}
     
inline int readChar() {
    int c = getChar();
    while (c <= 32) {
        c = getChar();
    }
    return c;
}
     
template <class T>
inline T readInt() {
    int s = 1, c = readChar();
    T x = 0;
    if (c == '-')
        s = -1, c = getChar();
    while ('0' <= c && c <= '9')
        x = x * 10 + c - '0', c = getChar();
    return s == 1 ? x : -x;
}
     
/** Write */
     
static int write_pos = 0;
static char write_buf[buf_size];
     
inline void writeChar( int x ) {
    if (write_pos == buf_size)
        fwrite(write_buf, 1, buf_size, stdout), write_pos = 0;
    write_buf[write_pos++] = x;
}
     
template <class T> 
inline void writeInt( T x, char end ) {
    if (x < 0)
        writeChar('-'), x = -x;
     
    char s[24];
    int n = 0;
    while (x || !n)
        s[n++] = '0' + x % 10, x /= 10;
    while (n--)
        writeChar(s[n]);
    if (end)
        writeChar(end);
}
     
inline void writeWord( const char *s ) {     while (*s)
writeChar(*s++); }
     
struct Flusher {
    ~Flusher() {
        if (write_pos)
            fwrite(write_buf, 1, write_pos, stdout), write_pos = 0;
    }
} flusher;  


#define ll long long
#define ld long double
#define null NULL
#define prev prev228
#define count count228
#define index index228
#define left left228
#define right right228
#define hash hash228


char _mem[300 * 1024LL * 1024LL];
size_t _ptr = 0;
inline void* operator new (size_t _x) { _ptr += _x; return _mem + _ptr - _x; }
inline void operator delete (void*) { }


const int N = 4096, INF = 1e9 + 228;

int n, k;

int u[N][N], sum[N][N], pref[N][N];



int prev[N], dp[N], opt[N];

// L, R for optimal

int cur_k = 0;

void go(int l, int r, int L, int R) {
	if (l > r) return ;
	int m = (l + r) >> 1;
	dp[m] = prev[m];
	int optimal = m;
	for (int p = max(L, cur_k); p <= min(R, m); ++p) {
		// dp[m] = min(dp[m], prev[p]);
		if (prev[p] + sum[p + 1][m] < dp[m]) {
			dp[m] = prev[p] + sum[p + 1][m];
			optimal = p;
		}
	}

	go(l, m - 1, L, optimal);
	go(m + 1, r, optimal, R);
}


signed main() {
	n = readInt(), k = readInt();
	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= n; ++j) {
			u[i][j] = readInt();
		}
	}
	for (register int i = 1; i <= n; ++i) {
		for (register int j = 1; j <= i; ++j) {
			pref[i][j] = pref[i][j - 1] + u[i][j];
		}
	}
	for (register int i = 1; i <= n; ++i) {
		for (register int j = i + 1; j <= n; ++j) {
			sum[i][j] = sum[i][j - 1] + (pref[j][j] - pref[j][i - 1]);
		}
	}
	for (register int i = 1; i <= n; ++i) {
		prev[i] = sum[1][i];
		dp[i] = prev[i];
	}
	cur_k = 1;
	for (register int it = 0; it < k - 1; ++it) {
		for (register int i = 1; i <= n; ++i) {
			dp[i] = INF;
		}
		go(1, n, 1, n);
		++cur_k;
		for (register int i = 1; i <= n; ++i) {
			prev[i] = dp[i];
		}
	}
	writeInt(dp[n]);
    return 0;
}















