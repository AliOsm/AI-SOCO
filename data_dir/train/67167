/* 
chirag11032000
Chirag Thakur
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using db = double;
using pii = pair < int, int >;
using pll = pair < ll, ll >;

template < typename T > using OrderedSet = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
	cerr << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << " | ";
	__f(comma + 1, args...);
}
#else
#define trace(...)
#endif

#define eb emplace_back
#define mp make_pair
#define mt make_tuple
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()

const db PI = acos(-1);
const ll LINF = LLONG_MAX;
const int INF = INT_MAX, MOD = 1e9 + 7, N = 1e3 + 10;

namespace ModFunctions {
	inline void add(int &a, int b) {
		a += b;
		if (a >= MOD) {
			a -= MOD;
		}
	}

	inline void sub(int &a, int b) {
		a -= b;
		if (a < 0) {
			a += MOD;
		}
	}

	inline int mul(int a, int b) {
		return int((1ll * a * b) % MOD);
	}

	inline int power(int a, ll b) {
		int res = 1;
		while (b > 0) {
			if (b & 1) {
				res = mul(res, a);
			}
			a = mul(a, a);
			b >>= 1;
		}
		return res;
	}

	inline int inv(int a) {
		a %= MOD;
		if (a < 0) {
			a += MOD;
		}
		int b = MOD, u = 0, v = 1;
		while (a) {
			int t = b / a;
			b -= t * a;
			swap(a, b);
			u -= t * v;
			swap(u, v);
		}
		assert(b == 1);
		if (u < 0) {
			u += MOD;	
		}
		return u;
	}
}

using namespace ModFunctions;

int n, en;
int dp[N][2 * N][2];

void testCase();
int solve(int sum, int depth, int st);

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	testCase();
	cerr << "Time taken: " << int((clock() * 1000.) / CLOCKS_PER_SEC) << "ms\n";
	return 0;
}

void testCase() {
	int n;
	cin >> n;
	en = 2 * n;
	memset(dp, -1, sizeof(dp));
	cout << max(solve(1, en - 1, 0), solve(1, en - 1, 1)) << "\n";
}

int solve(int sum, int depth, int st) {
	if (depth == 0) {
		assert(sum == 0);
		return st == 1;
	}
	auto &ans = dp[sum][depth][st];
	if (ans == -1) {
		if (st == 1) {
			ans = 1;
			for (auto &d: {1, -1}) {
				int nxt = sum + d;
				if (nxt >= 0 && nxt - (depth - 1) <= 0) {	
					add(ans, solve(nxt, depth - 1, 0));
				}
			}
		} else {
			ans = 0;
			int cand1 = 0, cand2 = 0, cand3 = 0;
			for (auto &d: {1, -1}) {
				int nxt = sum + d;
				if (nxt >= 0 && nxt - (depth - 1) <= 0) {
					if (d == 1) {
						add(cand1, solve(nxt, depth - 1, 1));
						add(cand2, solve(nxt, depth - 1, 0));
						add(cand3, solve(nxt, depth - 1, 0));
					} else {
						add(cand1, solve(nxt, depth - 1, 0));
						add(cand2, solve(nxt, depth - 1, 1));
						add(cand3, solve(nxt, depth - 1, 0));
					}
				}
			}
			ans = max({cand1, cand2, cand3});
		}
	}
	return ans;
}