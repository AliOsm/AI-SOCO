#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;
using namespace std;
typedef tree<pair<int,int> ,null_type,less<pair<int,int> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
long long MOD = 1e9+7;
pair<int,int> dx[4] = {{1,0},{-1,0},{0,1},{0,-1}};
long long fastpow(long long x,long long k)
{
    if(!k)
        return 1;
    if(k & 1)
        return ((x * fastpow(x,k-1) % MOD) % MOD) % MOD;
    long long ans = fastpow(x,k/2);
    ans %= MOD;
    ans *= ans;
    ans %= MOD;
    return ans;
}
long long sumF(long long x)
{
    int s = 0;
    while(x)
        s += x%10,x /= 10;
    return s;
}
map<int,int> totalDiff;
int bad[500005];
int main()
{
    int n;
    cin >> n;
    vector<string> arr(n);
    for(int i = 0;i < n;i++)
    {
        cin >> arr[i];
        int diff = 0;
        for(int j = 0;j < arr[i].length();j++)
        {
            if(arr[i][j] == '(')
                diff++;
            else
                diff--;
        }
        bool g1 = true;
        bool g2 = true;
        int decider = 0;
        for(int j = 0;j < arr[i].length();j++)
        {
            if(arr[i][j] == '(')
                decider++;
            else
                decider--;
            if(decider < 0)
                g1 = false;
        }
        decider = 0;
        for(int j = arr[i].length()-1;j >= 0;j--)
        {
            if(arr[i][j] == '(')
                decider++;
            else
                decider--;
            if(decider > 0)
                g2 = false;
        }
        if(g1 || g2)
            totalDiff[diff]++;
        bad[i] = 2 - (g1+g2);
    }
    long long good = 0;
    for(int i = 0;i < n;i++)
    {

        if(bad[i] == 2)
            continue;
        int curDiff = 0;
        for(int j = 0;j < arr[i].length();j++)
        {
            if(arr[i][j] == '(')
                curDiff++;
            else
                curDiff--;
        }
        if(totalDiff[curDiff] <= 0)
            continue;
        if(curDiff == 0)
        {
            if(totalDiff[curDiff] > 1)
            {
                good++;
                totalDiff[curDiff] -= 2;
            }
        } else if(curDiff != 0)
        {
            if(totalDiff[-curDiff] > 0)
            {
                good++;
                totalDiff[curDiff]--;
                totalDiff[-curDiff]--;
            }
        }
    }
    cout << good;
    return 0;
}
