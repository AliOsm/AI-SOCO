//satyaki3794
#include <bits/stdc++.h>
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define LEFT(n) (2*(n))
#define RIGHT(n) (2*(n)+1)
 
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;
 
ll pwr(ll base, ll p, ll mod=MOD){
ll ans = 1;while(p){if(p&1)ans=(ans*base)%mod;base=(base*base)%mod;p/=2;}return ans;
}
 
 
ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


int n, qarr[2][5005], P[5005], B[5005], ans[5005];
set<int> distinct_;

int query(int i, int j){
	cout<<"? "<<i<<" "<<j<<endl;
	int a;
	cin>>a;
	return a;
}

 
int main(){
 
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin>>n;
    for(int i=0;i<n;i++)	qarr[0][i] = query(0, i);
    for(int i=0;i<n;i++)	qarr[1][i] = query(i, 0);


    int cnt = 0;
    for(int val=0;val<n;val++){
    	
    	P[0] = val;
    	for(int i=1;i<n;i++)
    		P[i] = val ^ qarr[1][0] ^ qarr[1][i];
    	B[P[0]] = 0;
    	for(int i=0;i<n;i++)
    		if(i != P[0])
    			B[i] = 0 ^ qarr[0][P[0]] ^ qarr[0][i];

    	distinct_.clear();
    	// for(int i=0;i<n;i++)
    	// 	distinct_.insert(P[i]);
    	// if((int)distinct_.size() != n)	continue;
    	// if((*distinct_.begin()) != 0)	continue;
    	// if((*distinct_.rbegin()) != n-1)	continue;
    	if((P[0]^B[0]) != qarr[0][0])	continue;

    	bool bad = false;
    	for(int i=0;i<n;i++)
    		if(B[P[i]] != i || P[i] >= n)
    			bad = true;
    	if(bad)	continue;

// cout<<"found shit:\n";
// for(int i=0;i<n;i++)	cout<<P[i]<<" ";cout<<endl;
// for(int i=0;i<n;i++)	cout<<B[i]<<" ";cout<<endl;
// cout<<endl;

    	cnt++;
    	for(int i=0;i<n;i++)
    		ans[i] = P[i];
    }

    cout<<"!"<<endl;
    cout<<cnt<<endl;
    if(cnt > 0){
    	cout<<ans[0];
    	fflush(stdout);
    	for(int i=1;i<n;i++){
    		cout<<" "<<ans[i];
    		fflush(stdout);
    	}
    	cout<<endl;
    }

    return 0;
}







