#include <bits/stdc++.h>
using namespace std;
struct P
{
    int x,y,z;
    bool operator<(const P &a)const{
        if(y!=a.y) return y>a.y;
        return x>a.x;
    }

};
vector<P> v;
//bitset<4001000> b;
int i,n,d,m,k,a,b,c;
long long o[3221][3333];
int l[3331];
long long j[3331];
int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[1];
//stack<int> s;
//set<long long> s;
//priority_queue<int> q1,q2;
queue<int> q;
string r;
//char r[1];
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_map<int,bool> p;

/*struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> p;//safe_map;
*/
bool as(P a,P b)
{
    //return a.x<b.x;
}

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//rng();

bool g(int n)
{
    //return 1;
    if(l[n]==0&&l[n+1]==0&&l[n+2]==1&&l[n+3]==1)
        return 0;
    if(l[n]==0&&l[n+1]==1&&l[n+2]==0&&l[n+3]==1)
        return 0;
    if(l[n]==1&&l[n+1]==1&&l[n+2]==1&&l[n+3]==0)
        return 0;
        if(l[n]==1&&l[n+1]==1&&l[n+2]==1&&l[n+3]==1)
        return 0;
    return 1;
}

long long f(int n,int m)
{
    if(n==m+1) return 1;
    if(n>m) return 0;
    if(o[n][m]) return o[n][m];
    long long x=0;
    for(int t=0;t<3;t++)
    x+=f(n+t+1,m),x%=mod;
    if(g(n))
        x+=f(n+4,m),x%=mod;
    return o[n][m]=x;
}

int main()
{
    scanf("%d",&a);
    for(int t=1;t<=a;t++)
        scanf("%d",&l[t]);
    v.push_back({0,0});
    for(int t=1;t<=a;t++)
    {
        //long long p1=0,p2=0;
        int n=0,h=t;
        for(;h<=a;h++)
        {
            /*p1*=3,p1+=(l[h]+1),p1%=mod;
            p2*=3,p2+=(l[h]+1),p2%=mod2;
            if(p.find(p1)==p.end())
            {
                p.insert(pair<int,bool>(p1,1));
                x+=f(h,t),x%=mod;
            }*/
            if((l[h]&&!v[n].x)||(!l[h]&&!v[n].y))
                break;
            if(l[h])n=v[n].x;
            else n=v[n].y;
        }
        for(;h<=a;h++)
        {
            //printf("%d %d\n",t,h);
            j[h]+=f(t,h),j[h]%=mod;
            if(l[h])
            {
                v[n].x=v.size();
                n=v.size();
                v.push_back({0,0});
            }
            else
            {
                v[n].y=v.size();
                n=v.size();
                v.push_back({0,0});
            }
        }

        //printf("%lld\n",x);
    }
    for(int t=1;t<=a;t++,j[t]+=j[t-1],j[t]%=mod)
            printf("%lld\n",j[t]);
}

//¼ö¿­°ú Äõ¸® 13
