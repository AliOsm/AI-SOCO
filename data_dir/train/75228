#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>

using namespace std;

typedef size_t index_t;
typedef vector< index_t > index_vector;

typedef vector< char > bool_vector;

#define safe_forin(i,n) for (int (i) = 0, __size = (n); (i) < __size; ++(i))
#define forin(i,n) for (index_t (i) = 0, __size = (n); (i) < __size; ++(i))
#define all(x) (x).begin(), (x).end()

#define zero_bit(x) ((x) & 1)
#define is_even(x) (zero_bit(x) == 0)
#define is_odd(x) (zero_bit(x) == 1)

#define space ' '
#define nl '\n'
#define newline cout << nl;
	
int read_int()
{
	int value;
	cin >> value;
	
	return value;
}

template < class T > 
void println(const T & value)
{
	cout << value << nl;
}

template < class T >
void print_vector(const vector< T > & values)
{
	forin(i, values.size())
		cout << values[i] << space;
		
	newline;
}

void print_indexes(const index_vector & indexes)
{
	forin(i, indexes.size())
		cout << indexes[i] + 1 << space;
	
	newline;
}

bool check_index(const index_t index, const size_t size)
{
	return (0 <= index && index < size);
}

bool check_indexes(
	const index_t x, const size_t x_size, 
	const index_t y, const size_t y_size)
{
	return check_index(x, x_size) && check_index(y, y_size);
}

typedef char pixel_t;
typedef vector< pixel_t > pixel_vector;
typedef vector< pixel_vector > image_t;

typedef int mask_t;

mask_t set_bit(mask_t & mask, const index_t bit_index)
{
	return mask = (mask | (1 << bit_index));
}

typedef string::size_type pixel_type_t;

const pixel_type_t NONE = string::npos;

const string FACE = "face";

const mask_t CORRECT_FACE_MASK = (1 << FACE.size()) - 1;

const size_t STEPS_COUNT = 4;
const index_t X = 0, Y = 1, STEP_SIZE = Y + 1;

const int STEPS[STEPS_COUNT][STEP_SIZE] = {
	{ 0, 0 },
	{ 0, 1 },
	{ 1, 0 },
	{ 1, 1 }
};

int main()
{
	size_t rows = read_int();
	size_t columns = read_int();
	
	image_t image(rows, pixel_vector(columns));
	forin(row, rows)
		forin(column, columns)
			cin >> image[row][column];
			
	size_t faces_count = 0;
	forin(row, rows)
		forin(column, columns)
		{
			mask_t mask = 0;
			
			forin(step_index, STEPS_COUNT)
			{
				index_t x = row + STEPS[step_index][X];
				index_t y = column + STEPS[step_index][Y];
				
				if (check_indexes(x, rows, y, columns))
				{
					pixel_t pixel = image[x][y];
					pixel_type_t face_pixel_type = FACE.find(pixel);
					
					if (face_pixel_type != NONE)
						set_bit(mask, face_pixel_type);
				}
			}
			
			if (mask == CORRECT_FACE_MASK)
				++faces_count;
		}
		
	println(faces_count);
	
	return 0;
}