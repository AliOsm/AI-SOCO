#include "omp.h"
#include <iostream>
#include <iomanip>
#include <string>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <vector>
#include <cassert>
#include <fstream>
#include <algorithm>
#include <list>
#include <random>
#include <ctime>
#include <random>
#include <bitset>
#include <unordered_set>
#include <cassert>
#include <list>


using namespace std;

typedef long long ll;
typedef long double ld;


const int sze = 1 << 17, psze = 20;



signed main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n;
	cin >> n;
	vector<int> values(n);

	for (int i = 0; i < n; ++i)
		cin >> values[i];

	sort(values.begin(), values.end());
	int ans = 0;
	multiset<int> there;

	for (int v : values)
		there.insert(v);

	for (int v : values)
	{
		if (there.upper_bound(v) != there.end())
		{
			ans++;
			there.erase(there.upper_bound(v));
		}
	}

	cout << ans;
	return 0;
}