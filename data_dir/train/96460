//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,avx,avx2")
#include <bits/stdc++.h>
 
using namespace std;
 
#define PB push_back
#define MP make_pair
#define EB emplace_back
#define f first
#define s second
#define FOR(i,a,b) for (int i = a; i < (b); ++i)
#define RFOR(i, b, a) for (int i = b-1; i>=a; --i)
#define FILL(a, b) memset(a, b, sizeof a)
#define ALL(a) a.begin(), a.end()
#define SZ(a) ((int)a.size())
#define bitc(n) __builtin_popcount(n)
 
typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
 
const int INF = 1000 * 1000 * 1000 + 7;
const LL LINF = 1LL * INF*INF;
const int MAX = 1e5 + 7;
const double PI = acos(-1.);
const double EPS = 1e-7;
const int MOD = 998244353;
const int MAXN = 2e5 + 7;
 
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());

VI divisors(int n)
{
	VI d;
	for(LL i = 1;i * i <= n;++i)
	{
		if (n % i == 0)
		{
			d.PB(i);
			if (i != n / i)
			{
				d.PB(n / i);
			} 
		}
	}
	sort(ALL(d));
	return d;
}

LL solve(int n, int m, int k)
{
	auto a = divisors(n);
	auto b = divisors(m);
	LL ans = 1;
	if (k == 1)
	{
		ans = max({ans, (LL)(n / 2) * m, (LL)(m / 2) * n});
		cout << ans << "\n";
		exit(0);
	}
	for(auto d1 : a)
	{
		int ost = k - d1 + 1;
		if (ost < m && ost >= 0)
		{
			ans = max(ans, (LL)(n / d1) * (m / (ost + 1)));
		}	
	}
	return ans;
}

int main()
{
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
//	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	int n, m, k;
	cin >> n >> m >> k;
	if (k > n + m - 2)
	{
		cout << "-1\n";
		return 0;
	}
		
	cout << max(solve(n, m, k), solve(m, n, k)) << "\n";
	
	return 0;
}