#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair

typedef long long ll;
typedef pair<int, int> pii;

int n;
vector<int> g[200005];
int cnt[200005];
int color[200005];
int check[200005];
size_t idx[200005];
vector<int> path;

inline void add (int v) {
	path.pb (v);
	color[v] ^= 1;
	assert (path.size () <= 10000000u);
}

void err_back () {
	color[path.back ()] ^= 1;
	path.pop_back ();
}

void addEdge (int a, int b) {
	g[a].pb (b);
	g[b].pb (a);
}

void calc (int v, int p = -1) {
	cnt[v] = 1 - color[v];
	for (int i = 0; i < (int) g[v].size (); i++) {
		int to = g[v][i];
		if (to == p) continue;
		calc (to, v);
		cnt[v] += cnt[to];
	}
}

void dfs (int v, int p = -1) {
	add (v);
	for (auto &i = idx[v]; i < g[v].size (); i++) {
		int to = g[v][i];
		if (to == p) continue;
		if (cnt[to] || -1 == p) {
			dfs (to, v);
			add(v);
		}
	}
	if (!color[v]) {
		if (p == -1)
			err_back ();
		else {
			add (p);
			add (v);
		}
	}
}

void load () {
	cin >> n;
	for (int i = 1; i <= n; i++) {
		cin >> color[i];
		color[i] = max (color[i], 0);
	}
	for (int i = 1, a, b; i < n; i++) {
		cin >> a >> b;
		addEdge (a, b);
	}
		
	for (int i = 1; i <= n; i++)
		check[i] = color[i];
}

void solve () {
	calc (1);
	color[1] ^= 1;
		
	if (!cnt[1]) {
		add (1);
	}
	else {
		dfs (1);
	}
}

bool C () {
	for (int i = 1; i < (int) path.size (); i++)
		check[path[i]] ^= 1;
	for (int i = 1; i <= 1; i++) {
		if (!check[i]) return false;
	}
	return true;
}

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	
	load ();
	solve ();
	assert (C ());
	
	for (auto it : path)
		cout << it << ' ';
	cout << endl;

	return 0;
}