#include <iostream>
#include<memory.h>
#include <map>
#include <list>
#include <string>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <cmath>
#include <set>
using namespace std;

/*
*/

vector<vector<vector<pair<double, pair<double, double> > > > >dp;
pair<double, pair<double, double> > sol(int i, int j, int k)
{
	if (i < 0 || j < 0 || k < 0)
		return make_pair(0.0, make_pair(0,0));
	if (i > 0 && j == 0 && k == 0) return make_pair(1.0, make_pair(0,0));
	if (i == 0 && j > 0 && k == 0) return make_pair(0, make_pair(1.0,0));
	if (i == 0 && j == 0 && k > 0) return make_pair(0, make_pair(0,1.0));
	if (dp[i][j][k].first > -1) return dp[i][j][k];
	pair<double, pair<double, double> > a, b, c;
	a=sol(i, j-1, k);
	b=sol(i, j, k-1);
	c=sol(i-1, j, k);
	double all = i+j+k;
	double A = 2*(i*j)/(all*(all-1));	
	double B = 2*(j*k)/(all*(all-1));	
	double C = 2*(k*i)/(all*(all-1));
	double D = (A+B+C);
	A/=D;
	B/=D;
	C/=D;
	a.first *= A;
	a.second.first *= A;
	a.second.second *= A;
	
	b.first *= B;
	b.second.first *= B;
	b.second.second *= B;
	
	c.first *= C;
	c.second.first *= C;
	c.second.second *= C;
	return dp[i][j][k] = make_pair(a.first+b.first+c.first, make_pair(a.second.first+b.second.first+c.second.first, a.second.second+b.second.second+c.second.second));
}

int main()
{
	int r, s, p;
	cin>>r>>s>>p;
	dp = vector<vector<vector<pair<double, pair<double, double> > > > >(r+1, vector<vector<pair<double, pair<double, double> > > > (s+1, vector<pair<double, pair<double, double> > > (p+1, make_pair(-2, make_pair(-2, -2)))));
	pair<double, pair<double, double> > res = sol(r, s, p);
	cout<<fixed<<setprecision(15)<<res.first<<" "<<res.second.first<<" "<<res.second.second<<endl;
}