#include<bits/stdc++.h>
using namespace std;

const int N = 200010;

int n, m, s, mark[N];
vector<int> g[N];
bool ok[N];
long long w[N], d[N], ans;

void dfs(int v, int p) {
	mark[v] = 1;
	ok[v] = false;
	for (auto &u : g[v]) {
		if (u != p) {
			if (!mark[u]) {
				dfs(u, v);
				ok[v] |= ok[u];
			} else {
				if (mark[u] == 1) {
					ok[v] = true;
				}
			}
		}
	}
	if (ok[v]) {
		ans += w[v];
		w[v] = 0;
	}
	mark[v] = 2;
}

void dfs(int v) {
	mark[v] = 1;
	for (auto &u : g[v]) {
		if (!mark[u]) {
			d[u] = d[v] + w[u];
			dfs(u);
		}
	}
}

int main() {
	ios::sync_with_stdio(0); 
	cin.tie(0);
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		cin >> w[i];
	}
	while (m--) {
		int v, u;
		cin >> v >> u;
		v--;
		u--;
		g[v].push_back(u);
		g[u].push_back(v);
	}
	cin >> s;
	s--;
	dfs(s, s);
	for (int i = 0; i < n; i++) {
		mark[i] = 0;
	}
	d[s] = w[s];
	dfs(s);
	long long best = 0;
	for (int i = 0; i < n; i++) {
		best = max(best, d[i]);
	}
	cout << ans + best;
	return 0;
}