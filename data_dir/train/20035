#pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define mod 1000000007
#define int long long
#define inf (1LL << 30)
const int maxnodes=1005;
#define ll long long

struct MatrixExpo{
    int N;
    vector<vector<int>> v;
    vector<vector<int>> res;
    vector<vector<int>> dummy;
    MatrixExpo(int N): N(N){v.resize(N,vector<int>(N,0));res.resize(N,vector<int>(N,0));dummy.resize(N,vector<int>(N,0));}

    void multiply(vector<vector<int>> &a,vector<vector<int>> &b,vector<vector<int>> &c)
    {
        for(int i = 0;i < N;i++)
        {
            for(int j = 0;j < N;j++)
                dummy[i][j] = 0;
        }
        for(int i = 0;i < N;i++)
        {
            for(int j = 0;j < N;j++)
            {
                for(int k = 0;k < N;k++)
                {
                    dummy[i][k] = (dummy[i][k] +  a[i][j] * b[j][k])%mod;
                }
            }
        }
        for(int i = 0;i < N;i++)
        {
            for(int j = 0;j < N;j++)
                c[i][j] = dummy[i][j];
        }
    }

    void exponentiate(int k)
    {
        for(int i = 0;i < N;i++)
            res[i][i] = 1;
        while(k)
        {
            if(k % 2)
                multiply(res,v,res);
            multiply(v,v,v);
            
            k/=2;
        }
    }
};



int32_t main()
{
    IOS;
    #ifndef ONLINE_JUDGE
    freopen("int.txt","r",stdin);
    freopen("out.txt","w",stdout);
    #endif
    int n,m;
    cin >> n >> m;
    if(n < m)
    {
        cout << 1;
        return 0;
    }
    MatrixExpo me(m);
    for(int i = 0;i < m - 1;i++)
    {
        me.v[i+1][i] = 1;
        // if(i < m - 1)
        //     me.v[i+1][i] = 1;
    }
    //me.v[0][0] = 1;
    me.v[0][m-1] = 1;
    me.v[m-1][m-1] = 1;
    // for(int i = 0;i < m;i++)
    // {
    //     for(int j = 0;j < m;j++)
    //     {
    //         cerr << me.v[i][j] << " ";
    //     }
    //     cerr << endl;
    // }
    // cerr << endl;
    int ans = 0;
    me.exponentiate(n - m + 1);
    // for(int i = 0;i < m;i++)
    // {
    //     for(int j = 0;j < m;j++)
    //     {
    //         cerr << me.res[i][j] << " ";
    //     }
    //     cerr << endl;
    // }
    for(int i = 0; i < m;i++)
    {
        ans = (ans + me.res[m-1][i])%mod;
    }
    cout << ans;

    return 0;
}