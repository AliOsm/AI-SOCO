#include <bits/stdc++.h>
using namespace std;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl




typedef long long ll;
const ll mod = 1e9+7;
const int maxn = 1e6 + 5;




int n;
vector<int> g[maxn];

int depth[maxn];
int hi = 0, lo = -1;



void dfs(int at, int p=0, int d=0) {
    depth[at]=d;
    for (int to: g[at]) {
	if (to==p) continue;
	dfs(to,at,d+1);
    }
}



bool go(int at, int p=0) {
    bool isleaf=true;
    int leaves = 0;
    int ch=0;
    
    for (int to: g[at]) {
	if (p==to) continue;
	isleaf=false;
	leaves += go(to,at);
	ch++;
    }

    if (isleaf) return true;

    if (leaves>0) {
	hi++;//all leaves are same
    }
    ch -= leaves;
    hi += ch;
    
    return false;
}


int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);
    cin>>n;
    for (int i=0; i<n-1; i++) {
	int u,v; cin>>u>>v;
	g[u].push_back(v);
	g[v].push_back(u);
    }


    int x=1;
    while (x<n && (int)g[x].size()==1) x++;
    assert((int)g[x].size()>1);

    dfs(x);

    {
	set<int> st;
	for (int i=1; i<=n; i++) {
	    if ((int)g[i].size() == 1) {
		st.insert(depth[i]%2);
	    }
	}
	if ((int)st.size()==1) {
	    lo=1;
	} else {
	    lo=3;
	}
    }


    go(x);
  

    cout<<lo<<" "<<hi<<endl;

    return 0;
}
