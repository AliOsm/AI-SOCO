#pragma GCC optimize ("O3")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) (((n%m) + m)%m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

const int N = 1500 + 1;
map<string, bool> mp;
string arr[N];
string temp = "SET";

struct trie
{
	trie* child[3];
	int cnt;

	trie()
	{
		reset(child, 0);
		cnt = 0;
	}
};

void insert(trie* root, const string &x)
{
	for(auto c : x)
	{
		rep(i, 0, 3)
		{
			if (c == temp[i])
			{
				if (!root->child[i])
					root->child[i] = new trie();
				root = root->child[i];
			}
		}
	}
	root->cnt++;
}

int get(trie* root, const string &x)
{
	for(auto c : x)
	{
		rep(i, 0, 3)
		{
			if (c == temp[i])
			{
				if (!root->child[i])
					return 0;
				root = root->child[i];
			}
		}
	}
	return root->cnt;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int n, k;
	cin >> n >> k;

	trie *root = new trie();

	rep(i, 0, n)
	{
		cin >> arr[i];
		insert(root, arr[i]);
	}
	int sum = 0;
	rep(i, 0, n)
	{
		rep(j, i + 1, n)
		{
			string y = "";

			rep(a, 0, k)
			{
				if (arr[i][a] == arr[j][a])
				{
					y.push_back(arr[i][a]);
				}
				else
				{
					rep(aa, 0, 3)
					{
						if (arr[i][a] == temp[aa] || arr[j][a] == temp[aa])
							continue;
						y.push_back(temp[aa]);
						break;
					}
				}
			}

			sum += get(root, y);
		}

	}

	cout << sum / 3 << endl;

	return 0;
}
