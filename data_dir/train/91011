#include <bits/stdc++.h>
using namespace std;

int n, m;
int trie[2000055][2];
int cnt[2000055];

int read_int() {
	char ch = 0;

	while ((ch < '0' || ch > '9') && ch != '-') ch = getchar();

	int res = 0;
	int sign = 1;

	if (ch == '-') {
		sign = -1;
		ch = getchar();
	}

	while (ch >= '0' && ch <= '9') {
		res = res * 10 + (ch - '0');
		ch = getchar();
	}

	return sign * res;
}

int cur = 1;

inline void add(string s) {
	int n = s.length();
	int pt = 0;
	int v = 0;

	while (pt < n) {
		if (trie[v][(s[pt] - '0') % 2] == 0) v = trie[v][(s[pt] - '0') % 2] = cur++;
		else v = trie[v][(s[pt] - '0') % 2];

		pt++;
	}

	cnt[v]++;
}
inline void erase(string s) {
	int n = s.length();
	int pt = 0;
	int v = 0;

	while (pt < n) {
		if (trie[v][(s[pt] - '0') % 2] == 0) v = trie[v][(s[pt] - '0') % 2] = cur++;
		else v = trie[v][(s[pt] - '0') % 2];

		pt++;
	}

	cnt[v]--;
}
inline int go(string s) {
	int n = s.length();
	int pt = 0;
	int v = 0;

	while (pt < n) {
		if (trie[v][(s[pt] - '0') % 2] == 0) {
			return 0;
			v = trie[v][(s[pt] - '0') % 2] = cur++;
		}
		else v = trie[v][(s[pt] - '0') % 2];

		pt++;
	}

	return cnt[v];
}
int main() {
	int t;

	scanf("%d", &t);

	char ope;
	char buf[20];

	while (t--) {
		scanf("\n%c %s", &ope, buf);

		string s(buf);

		while (s.size() < 18) s = "0" + s;

		if (ope == '+') add(s);
		else if (ope == '-') erase(s);
		else printf("%d\n", go(s));
	}

	return 0;
}
