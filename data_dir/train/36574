#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ull = unsigned long long;
const ll mod = 1e9 + 7;
const int sz = 1e6 + 10;
const ull hsh = 3797;

int n;
int ans[sz];
int ar[sz];
int l[sz], r[sz];
int f[sz], t[sz];

int dfs( int u ) {
        if( t[u] == 0 ) return f[u] = ar[u];
        else if( t[u] == 1 ) return f[u] = !dfs( l[u] );
        else if( t[u] == 2 ) return f[u] = dfs( l[u] ) & dfs( r[u] );
        else if( t[u] == 3 ) return f[u] = dfs( l[u] ) | dfs( r[u] );
        else if( t[u] == 4 ) return f[u] = dfs( l[u] ) ^ dfs( r[u] );
        return f[u];
}

void solve( int u ) {
        if( t[u] == 0 ) ans[u] = 1;
        else if( t[u] == 1 ) solve( l[u] );
        else if( t[u] == 2 ) {
                if( f[ r[u] ] ) solve( l[u] );
                if( f[ l[u] ] ) solve( r[u] );
        }
        else if( t[u] == 3 ) {
                if( !f[ r[u] ] ) solve( l[u] );
                if( !f[ l[u] ] ) solve( r[u] );
        }
        else if( t[u] == 4 ) {
                solve( l[u] );
                solve( r[u] );
        }
}

int main() {
#ifdef CLown1331
        freopen( "in.txt", "r", stdin );
#endif /// CLown1331

        while( cin >> n ) {

                for( int i=0; i<n; i++ ) {
                        string s;
                        cin >> s;
                        if( s == "IN" ) {
                                t[i] = 0;
                                scanf( "%d", &ar[i] );
                        }
                        if( s == "NOT" ) {
                                t[i] = 1;
                                scanf( "%d", &l[i] );
                                --l[i];
                        }
                        else {
                                if( s == "AND" ) t[i] = 2;
                                if( s == "OR" ) t[i] = 3;
                                if( s == "XOR" ) t[i] = 4;
                                scanf( "%d %d", &l[i], &r[i] );
                                --l[i]; --r[i];
                        }
                }

                dfs( 0 );

                solve( 0 );

                for( int i=0; i<n; i++ ) if( t[i] == 0 )  printf( "%d", f[0] ^ ans[i] ); printf( "\n" );

        }

        return 0;
}
