#include <bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-12, PI = acos(-1);
const int N = 2e5 + 9, M = 1e7 + 9, OO = 1e9 + 7, MOD = 1e9 + 7, MOD2 = 998244353;
const ll inf = 1e18;

int need[2*N], cnt[2*N], temp[2*N];
int n, m;
set<int> st[2*N];
vector<int> day[2*N], vec[N];

bool can(int mid) {
	for (int i = 1; i <= n; ++i)
		temp[i] = need[i];
	vector<int> last(n + 1, -1);
	for (int i = 1; i <= mid; ++i) {
		for(auto it: day[i])
			last[it] = i;
		vec[i].clear();
	}
	for (int i = 1; i <= n; ++i) {
		if(last[i] == -1) continue;
		vec[last[i]].push_back(i);
	}
	int money = 0;
	for (int i = 1; i <= mid; ++i) {
		++money;
		for(auto it: vec[i]) {
			int mn = min(money, temp[it]);
			money -= mn;
			temp[it] -= mn;
		}
	}
	int left = 0;
	for (int i = 1; i <= n; ++i)
		left += temp[i];
	left *= 2;
	return money >= left;
}

int main() {
	fastIO;
#ifdef LOCAL
//	freopen("input.in", "rt", stdin);
#endif
	ll d, t, left = 0;
	cin >> n >> m;
	for (int i = 1; i <= n; ++i)
		cin >> need[i], left += need[i];
	for (int i = 0; i < m; ++i) {
		cin >> d >> t;
		st[d].insert(t);
	}
	for (int i = N; i > 0; --i)
		for(auto it: st[i])
			day[i].push_back(it);
	ll start = 0, end = left * 2, mid, ans = left * 2;
	while(start <= end) {
		mid = start + (end - start) / 2;
		if(can(mid)) {
			ans = mid;
			end = mid - 1;
		} else {
			start = mid + 1;
		}
	}
	cout << ans;
	return 0;
}
