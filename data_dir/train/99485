#pragma GCC optimize(2)
#pragma GCC optimize(3)
#pragma GCC optimize(4)
#include<bits/stdc++.h>
using namespace std;
#define y1 y11
#define fi first
#define se second
#define pi acos(-1.0)
#define LL long long
#define ls rt<<1, l, m
#define rs rt<<1|1, m+1, r
//#define mp make_pair
#define pb push_back
#define ULL unsigned LL
#define pll pair<LL, LL>
#define pli pair<LL, int>
#define plii pair<LL,pii>
#define pii pair<int, int>
#define piii pair<pii, pii>
#define pdi pair<double, int>
#define pdd pair<double, double>
#define mem(a, b) memset(a, b, sizeof(a))
#define debug(x) cerr << #x << " = " << x << "\n";
#define fio ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
//head

const int N = 1e5 + 5;
struct Node {
    int a, b, s;
    bool operator < (const Node & rhs) const {
       return a-b > rhs.a-rhs.b;
    }
}a[N];
int n, S;
LL ans, cnt, tot = 0;
void solve(LL c) {
    LL c1 = c*S, c2 = cnt*S-tot, res = 0;
    priority_queue<pii> q;
    for (int i = 1; i <= n; ++i) {
        if(c1) {
            if(a[i].s <= c1) {
                c1 -= a[i].s;
                res += a[i].s*1LL*a[i].a;
                if(a[i].a < a[i].b) q.push({a[i].b-a[i].a, a[i].s});
            }
            else {
                res += c1*a[i].a;
                if(a[i].a < a[i].b) q.push({a[i].b-a[i].a, c1});
                res += (a[i].s-c1)*a[i].b;
                c1 = 0;
            }
        }
        else res += a[i].s*1LL*a[i].b;
    }
    while(c2 && !q.empty()) {
    	pii p = q.top();
    	p.se = min(1LL*p.se, c2);
    	res += p.se*1LL*p.fi;
        q.pop();
        c2 -= p.se;
    }
    ans = max(ans, res);
}
int main() {
    scanf("%d %d", &n, &S);
    for (int i = 1; i <= n; ++i) scanf("%d %d %d", &a[i].s, &a[i].a, &a[i].b), tot += a[i].s;
    sort(a+1, a+1+n);
    cnt = (tot+S-1)/S;
    LL cnt1 = cnt, sum = 0;
    for (int i = 1; i <= n; ++i) {
        if(a[i].a-a[i].b < 0) {
            cnt1 = (sum+S-1)/S;
            break;
        }
        sum += a[i].s;
    }
    solve(cnt1);
    if(cnt1) solve(cnt1-1);
    printf("%lld\n", ans);
    return 0;
}