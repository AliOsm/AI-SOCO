#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>

#include <cstdint>
#include <cstdlib>
#include <cassert>
#include <cctype>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-11;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 1 && x <= n && y >= 1 && y <= m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

template <typename T1, typename T2>
inline ostream& operator <<(ostream& out, const pair<T1, T2>& p) {
	return out << "(" << p.x << ", " << p.y << ")";
}

template <typename T>
inline ostream& operator <<(ostream& out, const vector<T>& a) {
	out << sz(a) << " : ";
	for (int i = 0; i + 1 < sz(a); i++) out << a[i] << ' ';
	if (a.empty()) out << "EMPTY";
	else out << a.back();
	return out << endl;
}

template <typename T>
inline ostream& operator <<(ostream& out, const set<T>& a) {
	out << sz(a) << " : ";
	if (a.empty()) return out << "EMPTY" << endl;
	for (auto it = a.begin(); it != (--a.end()); it++) out << *it << ' ';
	return out << *(--a.end()) << endl;
}

template <typename T1, typename T2>
inline ostream& operator <<(ostream& out, const map<T1, T2>& a) {
	out << sz(a) << " : ";
	if (a.empty()) return out << "EMPTY" << endl;
	for (const pair<T1, T2>& p : a) out << "[ " << p.x << " ] --> " << p.y << endl;
	return out;
}

const int N = int(2e6) + 555;

int n, k;
pt a[N];

const int MOD = INF + 7;

inline int sum(int a, int b) {
	int res = a + b;
	if (res >= MOD) res -= MOD;
	return res;
}

inline void add(int& a, int b) {
	a = sum(a, b);
}

inline int mul(int a, int b) {
	li res = a * 1LL * b;
	if (res >= MOD) res %= MOD;
	return int(res);
}

int binPow(int a, int n) {
	int res = 1;
	while (n) {
		if (n & 1) res = mul(res, a);
		a = mul(a, a);
		n >>= 1;
	}

	return res;
}

inline void gen() {
	return;
}

inline bool read() {
	if (scanf("%d %d", &n, &k) != 2) return false;
	forn(i, n) assert(scanf("%d %d", &a[i].x, &a[i].y) == 2);
	return true;
}

int realVal[N];
int f[N];

inline int cnk(int n, int k) {
	if (k > n) return 0;
	if (k == n) return 1;
	if (k == 0) return 1;
	int num = f[n];
	int denom = mul(f[k], f[n - k]);
	return mul(num, binPow(denom, MOD - 2));
}

int t[4 * N];

inline int lf(int v) {
	return (v << 1) + 1;
}

inline int rg(int v) {
	return (v << 1) + 2;
}

void add(int v, int l, int r, int pos) {
	if (l == r) {
		t[v]++;
		return;
	}

	int mid = (l + r) >> 1;

	if (pos <= mid) add(lf(v), l, mid, pos);
	else add(rg(v), mid + 1, r, pos);
	t[v] = t[lf(v)] + t[rg(v)];
}

int get(int v, int l, int r, int L, int R) {
	if (l == L && r == R) return t[v];
	int res = 0;
	int mid = (l + r) >> 1;
	if (L <= mid) res += get(lf(v), l, mid, L, min(R, mid));
	if (R > mid) res += get(rg(v), mid + 1, r, max(mid + 1, L), R);
	return res;
}

inline void solve() {
	f[0] = 1;
	for (int i = 1; i < N; i++) f[i] = mul(f[i - 1], i);
	vector<int> goodPts;
	set<int> allVals;
	map<int, int> id;
	sort(a, a + n);

	forn(i, n) {
		int x = a[i].x;
		allVals.insert(x);
		allVals.insert(x - 1);
		allVals.insert(x + 1);

		x = a[i].y;
		allVals.insert(x);
		allVals.insert(x - 1);
		allVals.insert(x + 1);
	}

	int val = 0;
	for (const int& x : allVals) {
		id[x] = val;
		realVal[val] = x;
		val++;
	}

	forn(i, n) {
		goodPts.push_back(a[i].x);
		goodPts.push_back(a[i].y);
	}

	sort(all(goodPts));
	goodPts.erase(unique(all(goodPts)), goodPts.end());

	vector<pt> goodSegs;
	for (int i = 0; i + 1 < sz(goodPts); i++) {
		int lf = goodPts[i] + 1, rg = goodPts[i + 1] - 1;
		if (lf <= rg) goodSegs.push_back(pt(lf, rg));
	}

	int ans = 0;
	int ptr = 0;
	while (ptr < n && a[ptr].x <= goodPts[0]) {
		add(0, 0, N - 1, id[a[ptr].y]);
		ptr++;
	}

	goodPts.push_back(2 * INF);

	for (int i = 0; i + 1 < sz(goodPts); i++) {
		int x = goodPts[i];
		x = id[x];
		int cnt = get(0, 0, N - 1, x, N - 1);
		int mult = cnk(cnt, k);
		add(ans, mult);
		while (ptr < n && a[ptr].x <= goodPts[i + 1]) {
			add(0, 0, N - 1, id[a[ptr].y]);
			ptr++;
		}
	}

	memset(t, 0, sizeof(t));

	goodSegs.push_back(pt(2 * INF, 2 * INF));

	ptr = 0;
	while (ptr < n && a[ptr].x <= goodSegs[0].x) {
		add(0, 0, N - 1, id[a[ptr].y]);
		ptr++;
	}

	for (int i = 0; i + 1 < sz(goodSegs); i++) {
		int lf = goodSegs[i].x, rg = goodSegs[i].y;
		int len = rg - lf + 1;
		int r = id[rg];
		int cnt = get(0, 0, N - 1, r, N - 1);
		int mult = cnk(cnt, k);
		add(ans, mul(mult, len));
		while (ptr < n && a[ptr].x <= goodSegs[i + 1].x) {
			add(0, 0, N - 1, id[a[ptr].y]);
			ptr++;
		}
	}

	printf("%d\n", ans);
	return;
}

int main() {
#ifdef _DEBUG
	assert(freopen("input.txt", "rt", stdin));
	assert(freopen("output.txt", "wt", stdout));
#endif

	cout << setprecision(10) << fixed;
	cerr << setprecision(10) << fixed;

	srand(int(time(NULL)));

	int nTests = 1;
	//assert(cin >> nTests);
	//#define MULTITEST
#ifdef MULTITEST
	assert(scanf("%d", &nTests) == 1);
#endif

	forn(i, nTests) {
		//cerr << "TEST == " << i << endl;
		assert(read());
		solve();
	}

#ifdef _DEBUG
	cerr << "TIME == " << clock() << " ms" << endl;
#endif
	return 0;
}