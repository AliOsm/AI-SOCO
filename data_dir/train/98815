#include<set>
#include<map>
#include<list>
#include<iomanip>
#include<cmath>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<complex>
#include<sstream>
#include<iostream>
#include<fstream>
#include<algorithm>
#include<numeric>
#include<utility>
#include<functional>
#include<stdio.h>
#include<assert.h>
#include<memory.h>
#include<bitset>

using namespace std;

#define Filesx


#define rdi(i)          scanf("%d", &i)
#define rdii(i, j)      scanf("%d%d", &i, &j)
#define rep(i, v)       for(int i=0;i<v.size();++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define all(v)          ((v).begin()), ((v).end())
#define clr(v, d)       memset(v, d, sizeof(v))
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
typedef unsigned long long   ull;
const ll OO = 1e8;
const ll OOL = 1e16;
const ll MOD = 1e9 + 7;

const double EPS = (1e-7);
int dcmp(double x, double y) { return fabs(x - y) <= EPS ? 0 : x < y ? -1 : 1; }

#define pb                  push_back
#define MP                  make_pair
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef pair<int, int>    pii;
typedef pair<ll, ll>      pll;
typedef vector<pair<int, int> > vii;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;
typedef vector<ll>        vl;
typedef vector<vector<ll> >     vvl;
typedef vector<pair<ll, ll> >   vll;

ull gcd(ull a, ull b) { return (b == 0 ? a : gcd(b, a % b)); }
ull lcm(ull a, ull b) { return (a * (b / gcd(a, b))); }
ull power(ull a, ull b){ if (b == 0) return 1; ull ans = power(a, b / 2); ans = ans * ans; if (b % 2 != 0) ans *= a; return ans; }

string G[1000];
int dist[1000][1000];

int main() {
#ifdef Files
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);

	int n, m; cin >> n >> m;
	int exitx = -1, exity = -1, enterx, entery;
	lp(i, n){
		cin >> G[i];
		lp(j, m){
			if (G[i][j] == 'E') exitx = i, exity = j;
			if (G[i][j] == 'S') enterx = i, entery = j;
		}
	}
	
	
	queue<pair<int, pair<int, int> > > q;
	q.push(make_pair(0, make_pair(exitx, exity)));
	clr(dist, -1);
	dist[exitx][exity] = 0;
	int dx[4] = { 0, 0, -1, 1 };
	int dy[4] = { -1, 1, 0, 0 };
	while (!q.empty()){
		int cost = q.front().first;
		int x = q.front().second.first;
		int y = q.front().second.second;
		q.pop();
		lp(k, 4){
			int u = x + dx[k];
			int v = y + dy[k];
			if (u < 0 || u >= n || v < 0 || v >= m) continue;
			if (dist[u][v] > -1) continue;
			if (G[u][v] == 'T') continue;
			dist[u][v] = cost + 1;
			q.push(make_pair(cost + 1, make_pair(u, v)));
		}
	}
	int mydist = dist[enterx][entery];
	int ans = 0;
	lp(i, n){
		lp(j, m){
			if (G[i][j] == 'T') continue;
			if (G[i][j] == 'E') continue;
			if (G[i][j] == 'S') continue;
			if (dist[i][j] > -1 && dist[i][j] <= mydist) ans += (G[i][j] - '0');
		}
	}
	cout << ans << endl;

	return 0;
}