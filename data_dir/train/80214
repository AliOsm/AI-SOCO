#include<bits/stdc++.h>
using namespace std;

#define ll           long long
#define pii          pair<ll,ll>
#define bug(a)       cerr << #a << " : " << a << endl;
#define FastRead     ios_base::sync_with_stdio(false);cin.tie(NULL);

const int MAX = 5e5+10;

int a[MAX] , p[MAX] , s[MAX] , mx[MAX];

int main()
{
#ifdef Aaman007
    freopen("output.txt","r",stdin);
    // freopen("output.txt","w",stdout);
#endif // Aaman007

    FastRead

    int t;

    cin >> t;

    while(t--)
    {
        int n,m,mx1=0,mx2=0;

        cin >> n;

        for(int i=1;i<=n;i++)
            cin >> a[i] , mx1 = max(mx1,a[i]);


        cin >> m;

        set<pii>ss;
        vector<pii>v;
        map<int,int>mp;
        for(int i=1;i<=m;i++)
        {
            cin >> p[i] >> s[i] , mx2 = max(mx2,p[i]);

            mp[s[i]] = max(mp[s[i]],p[i]);
        }
        for(int i=1;i<=n;i++)
        {
            if(!mp[i])
                continue;
            ss.insert({mp[i],i});
        }
        for(auto i : ss)
            v.push_back(i);
        reverse(v.begin(),v.end());
        m = v.size();

        if(mx2 < mx1)
            cout << -1 << endl;
        else
        {
            int ans = 0 , cc = 0;
            for(int i=0;i<m;i++)
                p[i] = v[i].first , s[i] = v[i].second;
            for(int i=1;i<=n;i++)
            {
                int cur = 0 , taken = 0 , mxx = a[i];
               // bug(i)
                while(cur < m && i+taken <= n && p[cur] >= mxx)
                {
                    if(s[cur] <= taken)
                        cur++;
                    else
                    {
                        //cout << taken << "--" << s[cur] << " ::::: " << p[cur] << "---" << a[i+taken] << endl;
                        taken++;
                        mxx = max(mxx,a[i+taken]);
                    }
                }
                ans++;
                i += (taken-1);
            }
            cout << ans << endl;
        }
    }
}
