#include "bits/stdc++.h"

using namespace std;
using LL = long long;

constexpr int N = 1005;

string s[N];
int L[N][N], R[N][N], U[N][N], D[N][N];
int val[N][N], seen[N][N];

int main() {
	ios::sync_with_stdio(false); cin.tie(nullptr);

	int n, m;
	cin >> n >> m;

	for (int i = 0; i < n; i++) cin >> s[i];

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (s[i][j] == '.') continue;

			U[i][j] = L[i][j] = 1;
			if (i > 0) U[i][j] += U[i - 1][j];
			if (j > 0) L[i][j] += L[i][j - 1];
		}
	}

	for (int i = n - 1; i >= 0; i--) {
		for (int j = m - 1; j >= 0; j--) {
			if (s[i][j] == '.') continue;

			D[i][j] = R[i][j] = 1;
			if (i + 1 < n) D[i][j] += D[i + 1][j];
			if (j + 1 < m) R[i][j] += R[i][j + 1];
		}
	}

	vector< tuple<int, int, int>> ans;

	for (int i = 1; i + 1 < n; i++) {
		for (int j = 1; j + 1 < m; j++) {
			if (s[i][j] == '.') continue;

			int d = min({L[i][j - 1], U[i - 1][j], D[i + 1][j], R[i][j + 1]});
			if (d > 0) {
				ans.push_back(make_tuple(i, j, d));
				val[i][j] = d + 1;
			}
		}
	}

	for (int i = 0; i < n; i++) {
		int x = 0;

		for (int j = 0; j < m; j++) {
			x = max(x, val[i][j]);
			if (x > 0) {
				x--;
				seen[i][j] = 1;
			}
		}

		x = 0;
		for (int j = m - 1; j >= 0; j--) {
			x = max(x, val[i][j]);
			if (x > 0) {
				x--;
				seen[i][j] = 1;
			}
		}
	}

	for (int j = 0; j < m; j++) {

		int x = 0;
		for (int i = 0; i < n; i++) {
			x = max(x, val[i][j]);
			if (x > 0) {
				x--;
				seen[i][j] = 1;
			}
		}

		x = 0;
		for (int i = n - 1; i >= 0; i--) {
			x = max(x, val[i][j]);
			if (x > 0) {
				x--;
				seen[i][j] = 1;
			}
		}
	}

	////
/*	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cout << val[i][j] << " \n"[j == m - 1];
		}
	}

	cout << endl << string(50, '*') << endl;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cout << seen[i][j] << " \n"[j == m - 1];
		}
	}*/

	////


	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (s[i][j] == '*') {
				if (seen[i][j] == 0) {
					cout << -1;
					return 0;
				}
			}
		}
	}

	cout << ans.size() << "\n";

	for (const auto &t : ans) {
		cout << get<0>(t) + 1 << ' ' << get<1>(t) + 1 << ' ' << get<2>(t)<< "\n";
	}
}