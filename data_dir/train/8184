#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <typeindex>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>

using namespace std;

int32_t main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(false);
    int n, k;
    cin >> n >> k;
    deque<int> dq;
    unordered_set<int> q;
    for(int i = 0; i < n; i++){
        int x;
        cin >> x;
        if(!q.count(x)){
            if(dq.size() < k){
                dq.push_back(x);
                q.insert(x);
            }
            else{
                int fi = dq.front();
                dq.pop_front();
                q.erase(fi);
                dq.push_back(x);
                q.insert(x);
            }
        }
    }
    reverse(dq.begin(), dq.end());
    cout << dq.size() << '\n';
    for(auto u : dq){
        cout << u << ' ';
    }
    cout << '\n';
    return 0;
}