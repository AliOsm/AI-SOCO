#pragma comment (linker, "/STACK:256000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>
//#include <random>
 
using namespace std;
 
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<pii, pii> piiii;
typedef pair<int64, int> pli;
 
#define pb push_back
#define sq(x) ((x)*(x))
#define cube(x) (((x)*(x))*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define bit(mask, b) ((mask >> b) & 1)
#define biton(mask, bit) (mask | (((uint64)(1)) << bit))
#define bitoff(mask, bit) (mask & (~(((uint64)(1)) << bit)))
#define bitputon(mask, bit) (mask |= (((uint64)(1)) << bit))
#define bitputoff(mask, bit) (mask &= (~(((uint64)(1)) << bit)))
#define FAIL() (*((int*)(0)))++
#define INF ((int)(1e9) + 1337)
#define EPS (1e-9)
#define y1 yy1
#define y0 yy0
#define j0 jj0

const long double PI = acosl((long double)-1.0);
const int64 LINF = ((1ull << 63) - 1ull);
const int MOD = 1000000007;

vector <int64> mn;
vector <int64> s;
int64 m;

void init()
{
	scanf ("%I64d", &m);
}

void solve()
{
	init();
	int64 sum = 0LL;
	for (int64 c = 1LL; ; c++)
	{
		if (cube(c) > m - sum)
		{
			break;
		}
		int64 cnt = min((m - sum), cube(c + 1) - 1 - sum) / cube(c);
		for (int64 i = 1; i <= cnt; i++)
		{
			mn.push_back(c);
			sum += cube(c);
		}
	}
	s.resize(mn.size());
	for (int i = 0; i < s.size(); i++)
	{
		if (i)
		{
			s[i] = s[i - 1];
		}
		s[i] += cube(mn[i]);
	}
	for (int i = mn.size() - 1; i >= 0; i--)
	{
		bool fail = false;
		do
		{
			mn[i]++;
			//fprintf(stderr, "i %d mn %I64d\n", i, mn[i]);
			for (int j = i; j < mn.size(); j++)
			{
				s[j] = (j ? s[j - 1] : 0LL) + cube(mn[j]);
				if (s[j] >= cube(mn[j] + 1LL) || s[j] > m)
				{
					fail = true;
					break;
				}
			}
		}
		while (!fail);
		mn[i]--;
		for (int j = i; j < mn.size(); j++)
		{
			s[j] = (j ? s[j - 1] : 0LL) + cube(mn[j]);
		}
	}
	printf("%d %I64d\n", mn.size(), s[s.size() - 1]);
}

void precalc()
{
	
}

int main()
{
    //ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
    srand(25);

	precalc();
	int tests = 1;
	
	//scanf ("%d", &tests);
	for (int i = 1; i <= tests; i++)
	{
		solve();
	}
	
    return 0;
}