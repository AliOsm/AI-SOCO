//Be Name Khoda
//no comment...
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)1e5 + 7;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
ll dist[MAXN], s[MAXN], t[MAXN];
vector<pair<int, int> > G[MAXN];
vector<int> del[MAXN];
vector<pair<int, int> > P;
int n;
void dijkstra()
{
	dist[1] = 0;
	for (int i = 2; i <= n; i++)
		dist[i] = inf;
	set<pair<ll, ll> > S;
	for (int i = 1; i <= n; i++)
		S.insert({dist[i], i});
	for (int i = 1; i <= n; i++)
	{
		pair<ll, ll> P = *S.begin();
		S.erase(*S.begin());
		for (auto u : G[P.second])
		{
			if(dist[u.first] > P.first + u.second)
			{
				S.erase({dist[u.first], u.first});
				dist[u.first] = P.first + u.second;
				S.insert({P.first + u.second, u.first});
			}
		}
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int m, k;
	cin >> n >> m >> k;
	for (int i = 0; i < m; i++)
	{
		int u, v, w;
		cin >> u >> v >> w;
		G[u].push_back({v, w});
		G[v].push_back({u, w});
	}
	dijkstra();
	int ans = 0;
	for (int i = 0; i < k; i++)
	{
		cin >> s[i] >> t[i];
		del[s[i]].push_back(t[i]);
	}
	for (int i = 1; i <= n; i++)
	{
		if(del[i].size() == 0)
			continue;
		sort(del[i].begin(), del[i].end());
		if(dist[i] <= del[i][0])
			ans += del[i].size();
		else
		{
			ans += del[i].size() - 1;
			P.push_back({i, del[i][0]});
			G[1].push_back({i, del[i][0]});
			G[i].push_back({1, del[i][0]});
		}
	}
	dijkstra();
	for (auto u : P)
	{
		bool c = false; int cnt = 0;
		for (auto v : G[u.first])
			if(dist[v.first] + v.second == dist[u.first])
			{
				if(v.first != 1 || v.second != u.second)
					c = true;
				else
					cnt++;
			}
		ans += (c | (cnt > 1));
	}
	cout << ans;
}
