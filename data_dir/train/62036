#include <bits/stdc++.h>

using namespace std;

const int MAX = 3e5+5 ;

vector< vector<int> >adjlist ;
vector< vector< pair<int , int> > >query ;
vector<bool>visited ;

long long arr[MAX] , cnt[MAX];

long long ans = 0ll ;
int n , m ;

void dfs(int node , int distance)
{
    visited[node] = 1 ;
    for(int i = 0 ; i < query[node].size() ; ++i)
    {
        long long y = query[node][i].first * 1ll, z = query[node][i].second*1ll ;
        ans += z ;
        y = min(distance+y+1 , n*1ll) ;
        cnt[y] += z ;
    }
    ans -= cnt[distance] ;
    arr[node] = ans ;
    for(int i = 0 ; i < adjlist[node].size() ; ++i)
    {
        int child = adjlist[node][i] ;
        if(visited[child])
            continue;
        dfs(child , distance+1);
    }
    ans += cnt[distance] ;
    for(int i = 0 ; i < query[node].size() ; ++i)
    {
        long long y = query[node][i].first * 1ll , z = query[node][i].second * 1ll ;
        ans -= z ;
        y = min(distance+y+1 , n*1ll) ;
        cnt[y] -= z ;
    }
    return ;
}

int main()
{
    scanf("%d" , &n);
    adjlist = vector< vector<int> >(n+2);
    visited = vector<bool>(n+2) ;
    for(int i = 0 ; i < n-1 ; ++i)
    {
        int x , y ;
        scanf("%d %d" , &x , &y);
        adjlist[x].push_back(y) ;
        adjlist[y].push_back(x) ;
    }
    scanf("%d" , &m);
    query = vector< vector< pair<int , int> > >(n+2) ;
    while(m--)
    {
        int x , y , z ;
        scanf("%d %d %d" , &x , &y , &z);
        query[x].push_back({y , z}) ;
    }
    dfs(1 , 0);
    for(int i = 1 ; i <= n;  ++i)
        printf("%I64d " , arr[i]);
    return 0 ;
}
