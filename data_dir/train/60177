#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const ll N=1000011;
const ll M=100011;
void snum(ll &a){scanf("%lld",&a);}
void snum(ll &a, ll &b){scanf("%lld %lld",&a,&b);}
void snum(ll &a, ll &b, ll &c){scanf("%lld %lld %lld",&a,&b,&c);}
void snum(ll &a, ll &b, ll &c, ll &d){scanf("%lld %lld %lld %lld",&a,&b,&c,&d);}

vector<ll> ini[N],fin[N];
ll cnt[N];
ll pre[N];
ll tree_cnt[N];
ll tree_ac[N];

ll query_cnt(ll pos){
	ll sum=0;
	while(pos>0){
		sum+=tree_cnt[pos];
		pos-=(-pos&pos);
	}
	return sum;
}

void update_cnt(ll pos, ll val){
	while(pos<N){
		tree_cnt[pos]+=val;
		pos+=(-pos&pos);
	}
	return;
}

ll query_ac(ll pos){
	ll sum=0;
	while(pos>0){
		sum+=tree_ac[pos];
		pos-=(-pos&pos);
	}
	return sum;
}

void update_ac(ll pos, ll val){
	while(pos<N){
		tree_ac[pos]+=val;
		pos+=(-pos&pos);
	}
	return;
}

void modifica(ll pos, ll val){
	if(val==0){
		ll sz=fin[pos].size();
		for(ll i=0; i<sz; i++){
			//cout<<"quita "<<fin[pos][i]<<" "<<cnt[fin[pos][i]]<<" "<<pre[fin[pos][i]]<<endl;
			update_cnt(pre[fin[pos][i]],-cnt[fin[pos][i]]);
			update_ac(pre[fin[pos][i]],-cnt[fin[pos][i]]*pre[fin[pos][i]]);
		}
	}else{
		ll sz=ini[pos].size();
		for(ll i=0; i<sz; i++){
			//cout<<"agerga "<<ini[pos][i]<<" "<<cnt[ini[pos][i]]<<" "<<pre[ini[pos][i]]<<endl;
			update_cnt(pre[ini[pos][i]],cnt[ini[pos][i]]);
			update_ac(pre[ini[pos][i]],cnt[ini[pos][i]]*pre[ini[pos][i]]);
		}
	}
	return;
}

ll upb(ll l, ll r, ll k){
	while(r!=l){
		ll med=(l+r)/2;
		if(query_cnt(med)<=k){
			l=med+1;
		}else{
			r=med;
		}
	}
	return l;
}

int main(){
	ll n,k,m;
	snum(n,k,m);
	ll l,r,c,p;
	for(ll i=0; i<m; i++){
		snum(l,r,c,p);
		cnt[i]=c;
		pre[i]=p;
		ini[l].push_back(i);
		fin[r+1].push_back(i);
	}
	ll ans=0;
	for(ll i=1; i<=n; i++){
		modifica(i,0);
		modifica(i,1);
		ll aux=query_cnt(N-1);
		if(aux<=k){
			ans+=query_ac(N-1);
		}else{
			ll pos=upb(0,N-1,k);
			ll can=query_cnt(pos);
			ans+=query_ac(pos)-((can-k)*pos);
		}
	}
	printf("%lld\n",ans);
	return 0;
}

