#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); }
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

int check(LL h, LL w, const vector <LL> &v)
{
    vector <LL> divisors = {1};
    LL res = 1;
    FOR (i, 0, v.size()) {
        vector <LL> new_divisors = divisors;
        if ((LD)res * v[i] >= 1e18) {
            return i + 1;
        }
        res *= v[i];
        for (LL divisor: divisors) {
            new_divisors.push_back(divisor * v[i]);
        }
        sort(IT(new_divisors));
        new_divisors.resize(unique(IT(new_divisors)) - new_divisors.begin());
        auto used_greater_h_it = lower_bound(IT(new_divisors), h);
        LL used_greater_h = used_greater_h_it == new_divisors.end() ? 2e18 : *used_greater_h_it;
        if (res >= h * w && res / used_greater_h >= w) {
            return i + 1;
        }
        divisors = new_divisors;
    }
    return INT_MAX;
}

LL solve(LL a, LL b, LL h, LL w, LL n, vector <LL> v)
{
    sort(IT(v));
    reverse(IT(v));
    if (a <= h && b <= w) {
        return 0;
    }
    LL h_need = (a + h - 1) / h;
    LL w_need = (b + w - 1) / w;
    return check(h_need, w_need, v);
}

int main()
{
    LL a, b, h, w, n;
    cin >> a >> b >> h >> w >> n;
    vector <LL> v(n);
    GET(v, n);
    LL res = min(solve(a, b, h, w, n, v), solve(a, b, w, h, n, v));
    cout << (res == INT_MAX ? -1 : res);
    return 0;
}

