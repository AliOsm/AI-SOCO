#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define INF 2000000000
#define MOD 1000000007
#define ll long long
#define vi vector<int>
#define pb push_back
#define ii pair<int,int>
#define vii vector<ii>
#define si set<int>
#define msi map<string,int>
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define TRvi(c,it) for(vi::iterator it=(c).begin();it!=(c).end();it++)
#define TRvii(c,it) for(vii::iterator it=(c).begin();it!=(c).end();it++)
#define TRmsi(c,it) for(msi::iterator it=(c).begin();it!=(c).end();it++)


using namespace std;

ll gcd(ll a, ll b)
{
    if (a == 0)
        return b;
    return gcd(b%a, a);
}


ll power(ll x, unsigned ll y, unsigned ll m)
{
    if (y == 0)
        return 1;
    ll p = power(x, y/2, m) % m;
    p = (p * p) % m;
 
    return (y%2 == 0)? p : (x * p) % m;
}
 

ll modInverse(ll a, ll m)
{
   	return power(a, m-2, m);
}


ll tree[400001],lazy[400001];
int n,m;

void updateRange(int node,int start,int end,int l,int r,ll val)
{
	if(start>end)
		return;
	if(lazy[node]!=0)
	{
		tree[node]|=lazy[node];
		if(start!=end)
		{
			lazy[2*node]|=lazy[node];
			lazy[2*node+1]|=lazy[node];
		}
		lazy[node]=0;
	}
	if(start>r or end<l or start>end or l>r)
		return;
	if(start>=l && end<=r)
	{
		tree[node]|=val;
		if(start!=end)
		{
			lazy[2*node]|=val;
			lazy[2*node+1]|=val;
		}
		return;
	}
	int mid=(start+end)/2;
	updateRange(2*node,start,mid,l,r,val);
	updateRange(2*node+1,mid+1,end,l,r,val);
	tree[node]=(tree[2*node]&tree[2*node+1]);
}

ll queryRange(int node,int start,int end,int l,int r)
{
	if(start>end or start>r or end<l or l>r)
		return (power(2,30,INF)-1);
	if(lazy[node]!=0)
	{
		tree[node]|=lazy[node];
		if(start!=end)
		{
			lazy[2*node]|=lazy[node];
			lazy[2*node+1]|=lazy[node];
		}
		lazy[node]=0;
	}
	if(start>=l&&end<=r)
		return tree[node];
	int mid=(start+end)/2;
	ll p=queryRange(2*node,start,mid,l,r);
	ll q=queryRange(2*node+1,mid+1,end,l,r);
	return (p&q);

}

int main()
{
    IOS;
    #ifndef ONLINE_JUDGE
        // for getting input from input.txt
        freopen("input.txt", "r", stdin);
        // for writing output to output.txt
        freopen("output.txt", "w", stdout);
    #endif
    cin >> n >> m;
    vector<pair<pair<int,int>,ll>>v;
    REP(i,1,m)
    {
    	int l,r;
    	ll q;
    	cin >> l >> r >> q;
    	v.pb(make_pair(make_pair(l,r),q));
    	updateRange(1,1,n,l,r,q);
    }
    REP(i,0,m-1)
    {
    	if(queryRange(1,1,n,v[i].first.first,v[i].first.second)!=v[i].second)
    	{
    		cout << "NO";
    		return 0;
    	}
    }
    cout << "YES\n";
    REP(i,1,n)
    	cout << queryRange(1,1,n,i,i) << " ";
}