#include <iostream>
#include <map>
#include <vector>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>
#include <set>
typedef long long ll;
const int inf=0x7FFFFFFF;
#define show(x) cout << x << endl
#define rep(i,n) for(int i=0;i<n;i++)
#define mset(a,i) memset(a,i,sizeof(a))
#define PB(i) push_back(i)

using namespace std;
int pos[8][3], a[8][3];
int ok;
map<long long, bool> dist;
vector<long long> d;
long long sqr(int x) {
	return 1LL * x * x;
}
bool dfs(int i) {
	if(i == 8) {
		dist.clear();
		int cnt = 0;
		for(int o = 0; o < 8; o ++) {
			d.clear();
			for(int oo = 0; oo < 8; oo ++) {
				if(o == oo)	continue;
				long long sum = 0;
				for(int _ = 0; _ < 3; _ ++) 
					sum += sqr(pos[o][a[o][_]] - pos[oo][a[oo][_]]);
				d.PB(sum);
	/*			if(!dist.count(sum)) {
					cnt ++;
					dist[sum] = 1;	
					if(cnt > 3)
						return false;
				} */
			}
	//		if(cnt != 3)		return false;
			sort(d.begin(), d.end());
			if(d[0] == 0)		return false;
			if(d[0] != d[2] || d[3] != d[5])	return false;
			if(d[0] * 2 != d[3] || d[0] + d[3] != d[6])
				return false;
		}
		return true;
	}
	for(int o = 0; o < 3; o ++)
		a[i][o] = o;
	do {
		if(dfs(i + 1))
			return true;
	}while(next_permutation(a[i], a[i] + 3));
	return false;
}
			
				
				
int main() {
	for(int i = 0; i < 8; i ++)
		for(int j = 0; j < 3; j ++)
			scanf("%d", pos[i] + j);
	if(!dfs(0)) {
		puts("NO");
	} else {
		puts("YES");
		for(int i = 0; i < 8; i ++)
			for(int j = 0; j < 3; j ++)
				printf("%d%c", pos[i][a[i][j]], " \n"[j == 2]);
	}
	return 0;
}
