/**
 * Dont raise your voice, improve your argument.
 * --Desmond Tutu
 */

#include <bits/stdc++.h>
using namespace std;

#define DEBUG
#ifndef DEBUG
#define endl "\n"
#define log(args...)
#else
#define log(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); logf(_it, args); cout<<endl; }
void logf(istream_iterator<string> it) {
}
template<typename T, typename ... Args>
void logf(istream_iterator<string> it, T a, Args ... args) {
    cout << *it << "=" << a << " ";
    logf(++it, args...);
}
#endif

const double PI = acos(-1);
typedef long long ll;
#define fori(n) for(int i=0; i<(n); i++)

#define cins(s) string s; cin>>s;
#define cini(i) int i; cin>>i;
#define cinll(l) ll l; cin>>l;
#define cind(d) double d; cin>>d;
#define cinai(a, n) vi a(n); fori(n) { cin>>a[i]; }
#define cinall(a, n) vll a(n); fori(n) { cin>>a[i]; }
#define cinas(s, n) vs s(n); fori(n) { cin>>s[i]; }
#define cinad(a, n) vd a(n); fori(n) { cin>>a[i]; }

typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<double> vd;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<string> vs;
typedef vector<ll> vll;


/*
 * see tutorial.
 * we solve goups of {x,y} by z until max one z per
 * {x,y} exists. Then we can throw away z, and do 
 * the same for groups of x, solve by y.
 */
void solve() {
    cini(n);

    map<pii, vector<pii>> m1; // <x,y><vector<z,i>>

    for(int i=0; i<n; i++)  {
        cini(x);
        cini(y);
        cini(z);
        m1[{x,y}].emplace_back(z,i+1);
    }

    for(auto &ent : m1) {
        sort(ent.second.begin(), ent.second.end());
        while(ent.second.size()>1) {
            pii p1=ent.second.back();
            ent.second.pop_back();
            pii p2=ent.second.back();
            ent.second.pop_back();
            cout<<p1.second<<" "<<p2.second<<endl;
        }
    }

    // throw away z and reapeat...
    map<int, vector<pii>> m2;
    for(auto &ent : m1)
        if(ent.second.size()>0)
            m2[ent.first.first].emplace_back(ent.first.second, ent.second[0].second);

    for(auto &ent : m2) {
        sort(ent.second.begin(), ent.second.end());
        while(ent.second.size()>1) {
            pii p1=ent.second.back();
            ent.second.pop_back();
            pii p2=ent.second.back();
            ent.second.pop_back();
            cout<<p1.second<<" "<<p2.second<<endl;
        }
    }
    
    vector<pii> vx;
    for(auto ent : m2)
        if(ent.second.size()>0)
            vx.emplace_back(ent.first, ent.second[0].second);
    
    sort(vx.begin(), vx.end());
    for(size_t i=0; i<vx.size(); i+=2)
        cout<<vx[i].second<<" "<<vx[i+1].second<<endl;


}

int main() {
    cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    solve();
}

