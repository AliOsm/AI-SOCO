
#pragma GCC optimize("O3")
#include<bits/stdc++.h>
#include<map>
#include<iostream>
#include <cstring>
#include <iomanip>
#include <algorithm>
#define forr(i,a,b) for(int i=a;i<=b;i++)
#define F first
#define S second
#define input ios_base::sync_with_stdio(0);cin.tie(0);

//const double PI  = acos(-1.0);
using namespace std;
//typedef pair<double,double>pdd;
typedef long long  ll;
//typedef pair<ll, ll>pii;
//typedef complex<double> point;
//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};
//char rv[4]={'D','R','L','U'};
const double EPS = 1e-9;
const int N = 1e6 + 9;
int n,a[N],p[N],cnt[N],ans=1e9,vid,vis[N],dis[N];
vector<int>adj[N];
set<int>ff[N];
map<int,int>s;
int bfs(int st)
{
    queue<int>q;
    q.push(st);
    vis[st]=vid;
    dis[st]=0;
    while(q.size())
    {
        auto u=q.front();
        q.pop();

        if(u!=st&&s.count(u))return dis[u];
        for(auto v:adj[u])
        {
            if(v==u)continue;
            if(vis[v]!=vid)
            {
                vis[v]=vid;
                dis[v]=dis[u]+1;
                q.push(v);
            }
        }
    }
    return 1e9;
}

void bfs2(int st)
{
    queue<pair<int,int>>q;
    q.push({st,-1});
    vis[st]=vid;
    dis[st]=0;
    while(q.size())
    {
        auto u=q.front();
        if(dis[u.F]*2>=ans)return;
        q.pop();
        for(auto v:adj[u.F])
        {
            if(v==u.S)continue;
            if(vis[v]!=vid)
            {
                vis[v]=vid;
                dis[v]=dis[u.F]+1;
                q.push({v,u.F});
            }
            else{

               ans=min(ans,dis[u.F]+dis[v]+1);
               return;
            }
        }
    }
}

 int main()
{
//freopen("circles.in ","r",stdin);
//freopen("circles.out","w",stdout);
//__builtin_popcount()
input
        cin>>n;
        forr(i,1,n)
        {
            cin>>a[i];
            cnt[a[i]]++;
            if(a[i]==1)ans=1;
            if(cnt[a[i]]>1)ans=min(ans,2);
        }

        for(int i=2;i<=1e6;i++)
        {
            if(p[i]==0){
            for(int j=i;j<=1e6;j+=i)p[j]=i;
            }
        }

        forr(i,1,n)
        {
            ll x=a[i];
            if(x==1)continue;
            map<int,int>m;
            while(x!=1)m[p[x]]++,x/=p[x];

            if((int)m.size()==1)
            {
                auto a=*m.begin();
                if(a.S%2==0)ans=1;
                else s[a.F]++;
            }
            else if((int)m.size()==2)
            {
                auto a=*m.begin();
                auto b=*(++m.begin());
                if(a.S==2)s[b.F]++;
                else if(b.S==2)s[a.F]++;
                else {
                    adj[a.F].push_back(b.F);
                    adj[b.F].push_back(a.F);
                }
            }
        }
        if(ans<=2)
        {
            cout<<ans;
            return 0;
        }

        for(auto k:s)
        {
            if(k.S>1)
            {
                cout<<"2";
                return 0;
            }
        }



        for(auto x:s)
        {
            vid++;
            int f=bfs(x.F);
            ans=min(ans,2+f);
        }

        forr(i,2,1e6)
        {
            if((int)adj[i].size()>1){
            vid++;
            bfs2(i);
            }
        }
        if(ans>=1e9)cout<<"-1";
        else cout<<ans;

return 0;
}
