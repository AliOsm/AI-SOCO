#pragma GCC optimize("O3")

#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <random>
#include <cmath>
#include <chrono>
#include <bitset>

#define ld long double
#define pb push_back
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()

//#define int long long
using namespace std;

const int INF = 2e9;
const int MOD = 1e9 + 7;
const int MB = 20;

vector<int> get(int x) {
	vector<int> res;
	while (x) {
		res.pb(x % 2);
		x /= 2;
	}
	reverse(all(res));
	return res;
}

int get(vector<int>& one, vector<int>& two) {
	int id = -1;
	for (int i = 0; i < min(one.size(), two.size()); i++) {
		if (two[i] != one[i]) {
			id = i;
			break;
		}
	}
	if (id == -1) return max(one.size(), two.size()) - min(two.size(), one.size());
	return one.size() + two.size() - id * 2;
}
void solve() {
	int n;
	cin >> n;
	vector<vector<int>> a(n);
	for (int i = 0; i < n; i++) {
		int x;
		cin >> x;
		a[i] = get(x);
	}

	int id = 0;
	for (int i = 0; i < MB; i++) {
		bool good = true;
		int now = -1;
		for (int j = 0; j < n; j++) {
			if (a[j].size() == id) {
				good = false;
				break;
			}
			if (now == -1) now = a[j][i];
			else if (now != a[j][i]) good = false;
 		}
		if (!good) break;
		id++;
	}

	vector<int> q;
	for (int i = 0; i < id; i++) q.pb(a[0][i]);

	int ans = INF;
	for (int i = id; i < MB; i++) {
		int res = 0;
		for (int j = 0; j < n; j++) {
			res += get(q, a[j]);
		}
		ans = min(ans, res);
		q.pb(0);
	}
	cout << ans;
}
signed main() {
	/*
	freopen("search.in", "r", stdin);
	freopen("search.out", "w", stdout);
	*/
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}