#include <bits/stdc++.h>
using namespace std;
int parent[1005];
int findParent(int node)
{
    if(parent[node] == node)
        return node;

    return parent[node] = findParent(parent[node]);
}
set<int> good[1005];
bool visited[1005];
bool f = false;
void dfs(int toBeFound,int node)
{
    if(node == toBeFound)
    {
        f = true;
        return;
    }
    if(visited[node])
        return;

    visited[node] = true;
    for(set<int>::iterator it = good[node].begin();it != good[node].end();it++)
        dfs(toBeFound,*it);
}
vector<pair<int,int> > ToPrint;
int main()
{
    int n;
    cin >> n;
    for(int i = 1;i <= n;i++)
        parent[i] = i;

    vector<pair<int,int> > BadBoysWatchaYouGonnaDoWhenWeComeForYouxD;
    for(int i = 1;i <= n-1;i++)
    {
        int u,v;
        cin >> u >> v;
        int u1 = findParent(u);
        int v1 = findParent(v);
        if(u1 == v1)
        {
            BadBoysWatchaYouGonnaDoWhenWeComeForYouxD.push_back({u,v});
            continue;
        }
        parent[u1] = v1;
        good[u].insert(v);
        good[v].insert(u);
    }
    int needed = BadBoysWatchaYouGonnaDoWhenWeComeForYouxD.size();
    for(int i = 1;i <= n && needed > 0;i++)
    {
        for(int j = i+1;j <= n && needed > 0;j++)
        {
            dfs(j,i);
            if(!f)
            {
                ToPrint.push_back({i,j});
                good[i].insert(j);
                good[j].insert(i);
                needed--;
            }
            memset(visited,false,sizeof visited);
            f = false;
        }
    }
    cout << BadBoysWatchaYouGonnaDoWhenWeComeForYouxD.size() << endl;
    for(int i = 0;i < BadBoysWatchaYouGonnaDoWhenWeComeForYouxD.size();i++)
    {
        cout << BadBoysWatchaYouGonnaDoWhenWeComeForYouxD[i].first << " " << BadBoysWatchaYouGonnaDoWhenWeComeForYouxD[i].second << " " << ToPrint[i].first << " " << ToPrint[i].second << endl;
    }
    return 0;
}
