//#pragma GCC optimize("Ofast")
#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES

#include <bits/stdc++.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;

const int INF = (int)(1e9+1e5);
const int64 LINF = (int64)(4e18);
const double EPS = 1e-10;
const int MOD = (int)1e9 + 7;
#define sq(x) ((x)*(x))
#define FAIL() ((*(int*)0)++)

inline int add(int a, int b)
{
	a += b;
	if (a >= MOD)
	{
		a -= MOD;
	}
	return a;
}

inline int sub(int a, int b)
{
	a -= b;
	if (a < 0)
	{
		a += MOD;
	}
	return a;
}

inline int mul(int a, int b)
{
	return int64(a) * b % MOD;
}

inline int binpow(int a, int b)
{
	int res = 1;
	while (b)
	{
		if (b & 1)
		{
			res = mul(res, a);
		}
		a = mul(a, a);
		b >>= 1;
	}
	return res;
}

const int MAXN = 1005;

int n, m;
int a[MAXN];
double p[2][MAXN];
vector <pii> qu;
int ans[MAXN];

void init()
{
	scanf ("%d%d", &n, &m);
	for (int i = 1; i <= m; i++)
	{
		scanf ("%d", &a[i]);
	}
}

void solve()
{
	init();
	for (int i = 1; i <= m; i++)
	{
		qu.push_back(pii(a[i], i));
	}
	sort (qu.begin(), qu.end());
	p[0][0] = 1;
	int ptr = 0;
	for (int i = 1; ptr < m; i++)
	{
		int x = i & 1;
		p[x][0] = 0;
		for (int j = 1; j <= n; j++)
		{
			p[x][j] = p[x ^ 1][j] * j / n + p[x ^ 1][j - 1] * (n - j + 1) / n;
			///printf("%.2lf ", p[x][j]);
		}
		double y = p[x][n];
		while (ptr < m && y + EPS >= (double)qu[ptr].first / 2000)
		{
			ans[qu[ptr++].second] = i;
		}
		//cerr << ptr << endl;
	}
	for (int i = 1; i <= m; i++)
	{
		printf("%d\n", ans[i]);
	}
}

int main()
{
	//srand(time(0)); testgen(10, 5, 30);
    ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif
//    n = 1000;
//    printf("%d %d\n", n, n);
//    for (int i = 1; i <= n; i++)
//    {
//    	printf("%d\n", i);
//    }
//    return 0;
    double st = clock();
    int t = 1;
    //scanf ("%d", &t);
    for (int i = 0; i < t; i++)
    {
    	solve();
    }

    fprintf(stderr, "%.3lf\n", (clock() - st) / CLOCKS_PER_SEC);
    return 0;
}
