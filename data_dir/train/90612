#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 2e5 + 7;
int sq = 450;

bool cmp(const pair < PII, int > &A, const pair < PII, int > &B)
{
    if(A.first.first / sq == B.first.first / sq) {
        if((A.first.first / sq) & 1)
            return A.first.second > B.first.second;
        else
            return A.first.second < B.first.second;
    }
    return A < B;
}

int n, qu;
LL cnt[10 * N], res = 0, T[N], ans[N];
vector < pair < PII, int > > Q;

inline void add(int id)
{
    LL x = T[id];
    res += x * (2 * cnt[x] + 1);
    cnt[x]++;
}

inline void remove(int id)
{
    LL x = T[id];
    res += x * (-2 * cnt[x] + 1);
    cnt[x]--;
}

int main()
{
    scanf("%d%d", &n, &qu);
    sq = max(1, int(sqrt(n)));
    for(int i = 1; i <= n; i++)
        scanf("%lld", &T[i]);
    for(int i = 0; i < qu; i++)
    {
        int l, r; scanf("%d%d", &l, &r);
        Q.push_back({{l, r}, i});
    }
    stable_sort(all(Q), cmp);
    int L = 0, R = 0;
    for(auto q: Q)
    {
        int l = q.first.first, r = q.first.second;
        while(R < r) add(++R);
        while(L < l) remove(L++);
        while(L > l) add(--L);
        while(R > r) remove(R--);
        ans[q.second] = res;
    }
    for(int i = 0; i < qu; i++)
        printf("%lld\n", ans[i]);
    return 0;
}
