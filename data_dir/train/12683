//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 100005

struct gauss
{
    ll basis[31];
    void reset()
    {
        mem(basis,0);
    }
    void add(ll num)
    {
        for(ll i=30;i>=0;i--)
        {
            if(num&(1<<i))
            {
                if(basis[i])
                num=num^basis[i];
                else
                {
                    basis[i]=num;
                    return;
                }
            }
        }
        return;
    }
}gausian;
vector<pair<ll,ll> >v[maxn];
ll value[maxn],vis[maxn];

void dfs(ll cur,ll par)
{
	vis[cur]=1;
	for(ll i=0;i<v[cur].size();i++)
	{
		ll x=v[cur][i].F;
		ll y=v[cur][i].S;
		if(x==par)
		continue;
		if(!vis[x])
		{
			value[x]=value[cur]^y;
			dfs(x,cur);
		}
		else
		gausian.add(value[cur]^value[x]^y);
	}
}
int main()
{
	boost1;boost2;
	ll i,j,n,m,x,y,ans,z;
	cin>>n>>m;
	for(i=1;i<=m;i++)
	{
		cin>>x>>y>>z;
		v[x].pb({y,z});
		v[y].pb({x,z});
	}
	dfs(1,-1);
	ans=value[n];
	for(i=30;i>=0;i--)
	{
		if(!(ans&(1<<i)))
		continue;
		ans=ans^gausian.basis[i];
	}
	cout<<ans;
	return 0;
}
