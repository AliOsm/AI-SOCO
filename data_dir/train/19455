#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define V vector
#define MP make_pair
#define MAX INT_MAX
#define MIN INT_MIN
#define all(v)  ((v).begin()), ((v).end())
#define allr(v) ((v).rbegin()), ((v).rend())
#define clr(v, d) memset(v, d, sizeof(v))
#define sf(x) scanf("%d", &x)
#define sf2(x, y) scanf("%d %d", &x, &y)
#define sf3(x, y, z) scanf("%d %d %d", &x, &y, &z)
#define sfll(x) scanf("%I64d", &x)
#define sfll2(x, y) scanf("%I64d %I64d", &x, &y)
#define sfll3(x, y, z) scanf("%I64d %I64d %I64d", &x, &y, &z)
//ios_base::sync_with_stdio(0);cin.tie(0); cout.tie(0);
int dx[]{1, -1, 0, 0, 1, -1, 1, -1};
int dy[]{0, 0, 1, -1, 1, -1, -1, 1};
typedef unsigned long long          ull;
typedef long long                   ll;
typedef long double                 LD;
ll suf(ll x) { return (x * (x + 1)) / 2; }
const ll mod = 1e9 + 7, size = 1000006;
V<int>v;
int n, m;
ll dp[2000][100];
ll go(int i, int last = 5){
	if (i >= n)	return 0;
	ll &ret = dp[i][last];
	if (ret != -1) return ret;
	ret = MAX;
	if (v[i] == 1){
		bool add = int(v[i] == last);
		ret = min(ret , go(i + 1, (add ? 5 : v[i])) + add);
	}
	else if (v[i] == 2){
		bool add = int(v[i] == last);
		ret = min(ret, go(i + 1, (add ? 5 : v[i])) + add);
	}
	else if (v[i] == 3){
		bool add1 = int(1 == last);
		bool add2 = int(2 == last);
		ret = min(ret, go(i + 1, (add1 ? 5 : 1)) + add1);
		ret = min(ret, go(i + 1, (add2 ? 5 : 2)) + add2);
	}
	else  ret = min(ret, go(i + 1, 5) + 1);
	return ret;

}
int main()
{

	while (cin >> n){
		clr(dp, -1);
		v.resize(n);
		for (int i = 0; i < n; i++){
			cin >> v[i];
		}
		cout << go(0) << endl;
	}

	return 0;
}