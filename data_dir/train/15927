#include <bits/stdc++.h>

using namespace std ;


int n ;
int a[400010] ;
int child[400010] ;
vector < vector < pair < int , long long > > > V ;
long long Dist[400010] ;
int st[400010] ;
int en[400010] ;
int cnt ;
vector < int > nodes ;
void dfs(int idx ,long long di )
{
    Dist[cnt] = di ;
    st[idx] = cnt++ ;
    nodes.push_back(idx) ;
    //Dist[idx] = di ;
    for ( int i = 0 ; i < V[idx].size() ; i++ )
        dfs(V[idx][i].first,V[idx][i].second+di) ;
    nodes.push_back(idx) ;
    Dist[cnt] = di ;
    en[idx] = cnt++ ;
}
vector < long long > tree[8000010] ;
void build(int idx , int l , int r)
{
    if ( l == r )
    {
        tree[idx].push_back(Dist[l]-a[nodes[l]]) ;
        return ;
    }
    int mid = (l+r)/2 ;
    build(idx*2+1,l,mid) ;
    build(idx*2+2,mid+1,r) ;
    int i = 0 , j = 0 ;
    for ( ; i < tree[idx*2+1].size() && j < tree[idx*2+2].size() ; )
    {
        if ( tree[idx*2+1][i] <= tree[idx*2+2][j] )
            tree[idx].push_back(tree[idx*2+1][i]),
            i++ ;
        else
            tree[idx].push_back(tree[idx*2+2][j]),
            j++ ;
    }
    for (  ; i < tree[idx*2+1].size() ; i++ )
        tree[idx].push_back(tree[idx*2+1][i]);
    for (  ; j < tree[idx*2+2].size() ; j++ )
        tree[idx].push_back(tree[idx*2+2][j]);
}
int II;
long long d ;
int la, fi ;
int que(int idx, int l , int r , int A , int b )
{
    if ( l > b || r < A ) return 0 ;
    if ( l >= A && r <= b )
    {
        la = upper_bound(tree[idx].begin(),tree[idx].end(),d) - tree[idx].begin() ;
        fi = lower_bound(tree[idx].begin(),tree[idx].end(),-1e15) - tree[idx].begin() ;
        return la-fi ;
    }
    int mid = (l+r)/2 ;
    return que(idx*2+1,l,mid,A,b)
            +
                que(idx*2+2,mid+1,r,A,b) ;
}
int main()
{
    scanf("%d",&n) ;
    for ( int i = 0 ; i < n ; i++ )
        scanf("%d",&a[i]) ;
    V.resize(n+10) ;
    int  p , w ;
    for ( int i =1 ; i < n ; i++ )
    {
        scanf("%d %d",&p,&w) ;
        p-- ;
        V[p].push_back({i,w}) ;
    }
    dfs(0,0) ;
    build(0,0,2*n-1) ;

    for ( int i = 0 ; i < n ; i++ )
    {
        d = Dist[st[i]] ;
        II = i ;
        printf("%d ",que(0,0,2*n-1,st[i]+1,en[i]-1)/2);
    }
    return 0 ;
}
