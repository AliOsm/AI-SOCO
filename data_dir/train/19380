#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("board.in");ofstream out("board.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid u1(5, 10); u1(rnd);

int main() {
    fast;
    int a; cin>>a;
    if(a==1){
        cout<<1;
        return 0;
    }
    vec<int>m(a);
    for(int q=0; q<a; q++) cin>>m[q];
    int o=0;
    set<int> s;
    map<int,int>mp, mp2;
    for(int q=0; q<a; q++){
        int k = mp[m[q]];
        mp[m[q]]++;
        if(k==0) mp2[1]++;
        else{
            mp2[k+1]++;
            mp2[k]--;
            if(mp2[k]==0) mp2.erase(k);
        }
       // cout<<q<<endl;
        //for(pii p : mp2) cout<<p.F<<" "<<p.S<<endl;
        if(mp.size()==1) o=q;
        else if(mp2.size()==1 && (*mp2.begin()).F==1) o=q;
        else if(mp2.size()==2){
            auto it = mp2.begin(); it++;
            pii p1 = *mp2.begin(), p2 = *it;
            if(p1.F==p2.F) cout<<1/0;
            if(p1.F>p2.F) swap(p1,p2);
            if(p1.F*p1.S==1 || (p2.S==1 && p2.F-p1.F==1)) o=q;
        }
    }
    cout<<o+1;
}