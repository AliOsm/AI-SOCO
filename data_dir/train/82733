#include<bits/stdc++.h>
using namespace std;
typedef  long long int ll;
const long long int mod=1e9 +7;
ll n,m,k,a[200005],lg[200005]={0},rem[200005],dp[3][200005];
set<ll>st,st1;
string s,s1="";
map<ll,ll>red;
struct node{
	string ch="";
	ll x=-1000000005;
	node(string ss){
		this->ch=ss;
	}
	node(string ss,ll nb){
		this->ch=ss;
		this->x=nb;
	}
};
vector< node > vv;
vector<ll> v;



int main(){
	ios::sync_with_stdio(false);
    cin.tie(NULL);
	ll i,j,x,y,res=0,ans=0,mx=0,nb=0,nb2=0,mm=5e9,idx=0;
//	freopen("a.txt","r",stdin);  
    cin>>n;
    set<ll>::iterator it;
    
    for(k=1;k<=n;k++){
    	cin>>s;
    	if(s=="insert"){
    		cin>>x;
    		vv.push_back(node(s,x));
    		red[x]++;
    		st.insert(x);
		}
    	else if(s=="removeMin"){
    		if(!st.size()){
    			vv.push_back(node("insert",-1000000000));
    			vv.push_back(node("removeMin"));
    			continue;
			}
    		vv.push_back(node(s));
    		it=st.begin();
    		st.erase(y=*it);
    		red[y]--;
    		if(red[y])st.insert(y);
		}
		else if(s=="getMin"){
			cin>>x;
			if(!st.size()){
    			vv.push_back(node("insert",x));
    			vv.push_back(node("getMin",x));
    			st.insert(x);red[x]++;
    			continue;
			}
		    nb=0;
			v.clear();
			for(it=st.begin();it!=st.end();it++){
				if(*it<x){
					nb+=red[*it];
					v.push_back(*it);
				}
				else {
					break;
				}
			}
			for(j=0;j<nb;j++)vv.push_back(node("removeMin"));
				for(i=0;i<v.size();i++){
					       st.erase(v[i]);	
						   red[v[i]]=0;
				}
			if(st.find(x)==st.end()||!st.size()){
				vv.push_back(node("insert",x));
				vv.push_back(node("getMin",x));
				st.insert(x);red[x]++;
				continue;
			}
			vv.push_back(node("getMin",x));
	     }
	}
	cout<<vv.size()<<endl;
	for(i=0;i<vv.size();i++){
		cout<<vv[i].ch<<" ";
		x=vv[i].x;
		if(x!=-1000000005)cout<<x<<endl;
		else cout<<endl;
	}
	
 }