#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse2")
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
//
int n, q, a[200010], st[800010][110];

void build (int p, int l, int r) {
   if (l == r) {
      for (int i = 1; i <= 100; i++)
         st[p][i] = i;
   } else {
      for (int i = 1; i <= 100; i++)
         st[p][i] = i;
      build (2 * p, l, (l + r) / 2);
      build (2 * p + 1, (l + r) / 2 + 1, r);
   }
}

inline void push_down (int p, int l, int r) {
   if (l >= r) return;
   for (int i = 1; i <= 100; i++) {
      st[2 * p][i] = st[p][st[2 * p][i]];
      st[2 * p + 1][i] = st[p][st[2 * p + 1][i]];
   }
   for (int i = 1; i <= 100; i++)
      st[p][i] = i;
}

void update (int p, int l, int r, int L, int R, int x, int y) {
   push_down(p, l, r);
   if (l > r || l > R || r < L) return;
   if (l >= L && r <= R) {
      for (int i = 1; i <= 100; i++) {
         if (st[p][i] == x) {
            st[p][i] = y;
         }
      }
      push_down(p, l, r);
      return;
   }
   update (2 * p, l, (l + r) / 2, L, R, x, y);
   update (2 * p + 1, (l + r) / 2 + 1, r, L, R, x, y);
}

void print (int p, int l, int r) {
   push_down (p, l, r);
   if (l == r) printf ("%d ", st[p][a[r]]);
   else {
      print (2 * p, l, (l + r) / 2);
      print (2 * p + 1, (l + r) / 2 + 1, r);
   }
}

signed main () {
   scanf("%d", &n);
   for (int i = 0; i < n; i++) scanf("%d", a + i);
   build (1, 0, n - 1);
   scanf("%d", &q);
   while (q--) {
      int l, r, x, y;
      scanf("%d%d%d%d", &l, &r, &x, &y);
      l -= 1; r -= 1;
      update (1, 0, n - 1, l, r, x, y);
   }
   print(1, 0, n - 1);
   return 0;
}

