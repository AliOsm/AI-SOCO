#include <bits/stdc++.h>
using namespace std;

#define VIC ios::sync_with_stdio(0);cin.tie(0);ios_base::sync_with_stdio(0);
#define wtf(s) freopen((s), "w", stdout)
#define rff(s) freopen((s), "r", stdin)
#define pi (2 * acos(0))
typedef long double ld;
typedef long long ll;
#define endl '\n'
#define matrix vector<vector<ll>>

const int N = 2e5 + 10, mod = 1000000007;
bool vis[3][N][3];
int n, dx[] = {1, -1, 0}, dy[] = {0, 0, 1};
string a[2];

bool safe(int x, int y, int dir)
{
    return x > -1 && x < 2 && y > -1 && y < n && !vis[x][y][dir];
}

bool solve()
{
    for (int i = 0; i <= n; i++)
        for (int j = 0; j < 3; j++)
            vis[0][i][j] = vis[1][i][j] = false;
    queue<pair<pair<int, int>, int>> q;
    q.push({{0, 0}, 1});
    vis[0][0][1] = true;
    while (!q.empty())
    {
        int x = q.front().first.first, y = q.front().first.second, dir = q.front().second;
        q.pop();
        if (a[x][y] < '3' && safe(x, y + 1, 1) && dir == 1)
            q.push({{x, y + 1}, 1}), vis[x][y + 1][1] = true;
        else if (a[x][y] > '2')
        {
            for (int i = (dir == 2? 2: 0); i < 3 - (dir == 1); i++)
            {
                int nx = x + dx[i], ny = y + dy[i], nd = (dir == 1? 2: 1);
                if (safe(nx, ny, nd))
                    vis[nx][ny][nd] = true,
                    q.push({{nx, ny}, nd});
            }
        }
    }
    return ((vis[1][n - 1][2] && a[1][n - 1] > '2') || (vis[1][n - 1][1] && a[1][n - 1] < '3'));
}

int main()
{
    int q;
    cin >> q;
    while (q--)
    {
        cin >> n >> a[0] >> a[1];
        if (solve())
            cout << "YES\n";
        else
            cout << "NO\n";
    }
    return 0;
}