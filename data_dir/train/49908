#include <cstdio>
#include <sstream>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <vector>
#include <iostream>
#include <cassert>
#include <cstring>
#include <set>
#include <bitset>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)
typedef long long ll;

const int SZ=1000;

int n,m;
int v[SZ][SZ];
ll dp[4][SZ][SZ];
int dx[4][2]={{1,0},{1,0},{-1,0},{-1,0}};
int dy[4][2]={{0,1},{0,-1},{0,1},{0,-1}};

int testbit(int n, int m)
{
	return (n>>m)&1;
}

const ll INF=10000000000LL;

ll solve(int type, int x, int y)
{
	if(x<0 || x>=n  || y<0 || y>=m) return -INF;
	if(dp[type][x][y]==-1)
	{
		dp[type][x][y]=0;
		if(x!=(testbit(type,0)?n:0) || y!=(testbit(type,1)?m:0))
			REP(j,2)
					dp[type][x][y]=max(dp[type][x][y],solve(type,x-dx[type][j],y-dy[type][j]));
		dp[type][x][y]+=v[x][y];
	}
	return dp[type][x][y];
}

int main()
{
	scanf("%d%d",&n,&m);
	REP(i,n) REP(j,m)
		scanf("%d",&v[i][j]);
	memset(dp,-1,sizeof(dp));
	ll res=-INF;
//	REP(type,4)
//	{
//		REP(i,n)
//		{
//			REP(j,m)
//			{
//				cout<<solve(type,i,j)<<" ";
//			}
//			cout<<endl;
//		}
//		cout<<endl;
//	}
	REP(i,n) REP(j,m)
	{
		res=max(res, solve(0,i,j-1)+solve(3,i,j+1)+solve(1,i-1,j)+solve(2,i+1,j) );
		res=max(res, solve(0,i-1,j)+solve(3,i+1,j)+solve(1,i,j+1)+solve(2,i,j-1) );
	}
	cout<<res<<endl;
	return 0;
}
