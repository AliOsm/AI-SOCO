#include "bits/stdc++.h"
#define FI first.first
#define SE first.second
#define TH second
#define fi first
#define se second
#define th second

using namespace std;

class DebugStream {}LOG;
template <typename T>DebugStream &operator<<(DebugStream &s, const T&) { return s; }
#ifdef DEBUG
#define LOG clog
#endif

typedef long long ll;
typedef pair<ll, ll> ii;
typedef long double ld;

const int maxN = 1e5 + 9, maxV = 1e6 + 9, MOD = 1e9 + 7, SQ = 335, lg = 20, bs = 29;

ll vatos[maxN], morras[maxN];
int n, m;

ll ans;
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	#ifdef DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	#endif

	cin >> n >> m;
	for(int i = 0; i < n; i++) {
		cin >> vatos[i];
		ans += vatos[i] * m;
	}
	for(int i = 0; i < m; i++) cin >> morras[i];
	sort(vatos, vatos + n);

	ll mi = MOD;
	set<int> mys;
	for(int i = 0; i < m; i++) {
		int ind = int(upper_bound(vatos, vatos + n, morras[i]) - vatos) - 1;
		if(ind == -1) {
			cout << "-1\n";
			return 0;
		}
		mi = min(mi, morras[i]);
		mys.insert(ind);
		ans += morras[i] - vatos[ind];
	}

	if(mi < vatos[n - 1]) {
		cout << "-1\n";
		return 0;
	}
	if(mys.size() == 1 && find(morras, morras + m, vatos[*mys.begin()]) == (morras + m)) {
		if(*mys.begin() == 0) {
			cout << "-1\n";
			return 0;
		}
		ans += vatos[*mys.begin()] - vatos[*mys.begin() - 1];
	}

	cout << ans << '\n';
}
