#include<bits/stdc++.h>
using namespace std;

#define scl(x) scanf("%lld",&x)
#define sc(x)  scanf("%d",&x)
#define ll long long
#define lop(i,n) for(int i=0;i<n;++i)
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;

const double EPS=1e-9;
bool dcmp(double a,double b){
	return fabs(a-b)<EPS;
}
const int N=1e5+100;
int n,q;
double arr[N],lazyx[4*N],lazyy[4*N],sum[4*N];
void build(int idx,int s,int e){
	lazyx[idx]=1;
	lazyy[idx]=0;
	if(s==e){
		sum[idx]=arr[s];
		return;
	}
	int m=s+((e-s)>>1),L=(idx<<1)|1,R=L+1;
	build(L,s,m);
	build(R,m+1,e);
	sum[idx]=sum[L]+sum[R];
}
void upd(int idx,int s,int e,double x,double y){
	sum[idx]=sum[idx]*x+y*(e-s+1);
	lazyx[idx]*=x;
	lazyy[idx]=x*lazyy[idx]+y;
}
void shift(int idx,int s,int e){
	if(dcmp(lazyx[idx],1)&&dcmp(lazyy[idx],0))return;
	int m=s+((e-s)>>1),L=(idx<<1)|1,R=L+1;
	upd(L,s,m,lazyx[idx],lazyy[idx]);
	upd(R,m+1,e,lazyx[idx],lazyy[idx]);
	lazyx[idx]=1,lazyy[idx]=0;
}
double getSum(int idx,int s,int e,int l,int r){
	if(e<l||s>r)return 0;
	if(s>=l&&e<=r)return sum[idx];
	shift(idx,s,e);
	int m=s+((e-s)>>1),L=(idx<<1)|1,R=L+1;
	return getSum(L,s,m,l,r)+getSum(R,m+1,e,l,r);
}
void query(int idx,int s,int e,int l,int r,double x,double y){
	if(e<l||s>r)return ;
	if(s>=l&&e<=r){
		upd(idx,s,e,x,y);
		return ;
	}
	shift(idx,s,e);
	int m=s+((e-s)>>1),L=(idx<<1)|1,R=L+1;
	query(L,s,m,l,r,x,y);
	query(R,m+1,e,l,r,x,y);
	sum[idx]=sum[L]+sum[R];

}
int main(){
#ifndef ONLINE_JUDGE
	freopen("i.txt","r",stdin);
#endif
	sc(n),sc(q);
	lop(i,n)scanf("%lf",&arr[i]);
	build(0,0,n-1);
	while(q--){
		int type;
		sc(type);
		if(type==1){
			int l1,l2,r1,r2;
			sc(l1),sc(r1),sc(l2),sc(r2);
			--l1,--r1,--l2,--r2;
			double sum1=getSum(0,0,n-1,l1,r1);
			double sum2=getSum(0,0,n-1,l2,r2);
			double x=(r1-l1)/(r1-l1+1.0);
			double y=sum2/(r2-l2+1)/(r1-l1+1);
			double x2=(r2-l2)/(r2-l2+1.0);
			double y2=sum1/(r1-l1+1)/(r2-l2+1);
			query(0,0,n-1,l1,r1,x,y);
			query(0,0,n-1,l2,r2,x2,y2);

		}
		else{
			int l,r;
			sc(l),sc(r);
			--l,--r;
			printf("%.9lf\n",getSum(0,0,n-1,l,r));

		}

	}
}
