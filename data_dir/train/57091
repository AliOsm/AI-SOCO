#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

int main() {
  int n, m;
  scanf("%d%d", &n, &m);
  deque<int> a(n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", &a[i]);
  }
  int maxa = *max_element(a.begin(), a.end());
  int k;
  for (k = 0; k < n && a[k] != maxa; ++k);
  // trace(k);
  vector<ii> q(m);
  for (int i = 0; i < m; ++i) {
    int64 len;
    scanf("%lld", &len);
    if (len > k) {
      q[i].first = (len - k) % (n - 1);
      if (q[i].first == 0) q[i].first = n - 1;
      q[i].first += k;
    } else {
      q[i].first = len;
    }
    q[i].second = i;
    // trace(i, len, q[i].first);
  }
  sort(q.begin(), q.end());
  vector<ii> ret(m);
  int last = 0, x = a[0], y = a[1];
  for (int i = 0; i < m; ++i) {
    while (last != q[i].first) {
      x = a[0], y = a[1];
      a.pop_front();
      a.pop_front();
      a.push_front(max(x, y));
      a.push_back(min(x, y));
      ++last;
    }
    ret[q[i].second] = {x, y};
  }
  for (int i = 0; i < m; ++i) {
    printf("%d %d\n", ret[i].first, ret[i].second);
  }
  return 0;
}
