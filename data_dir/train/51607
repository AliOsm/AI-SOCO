#include <bits/stdc++.h>
using namespace std;

const int md = (int)1e9 + 7;
inline void add(int &a, int b) {
	a += b;
	if (a >= md) a -= md;
}
inline void sub(int &a, int b) {
	a -= b;
	if (a < 0) a += md;
}
inline int mul(int a, int b) {
	return (int) ((long long) a * b % md);
}
inline int power(int a, long long b) {
	int res = 1;
	while (b > 0) {
		if (b & 1) {
			res = mul(res, a);
		}
		a = mul(a, a);
		b >>= 1;
	}
	return res;
}
inline int inver(int a) {
	a %= md;
	if (a < 0) a += md;
	int b = md, u = 0, v = 1;
	while (a) {
		int t = b / a;
		b -= t * a; swap(a, b);
		u -= t * v; swap(u, v);
	}
	assert(b == 1);
	if (u < 0) u += md;
	return u;
}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n;
	string s;
	cin >> n >> s;
	if (count(s.begin(), s.end(), '(') != count(s.begin(), s.end(), ')')) {
		cout << "0\n1 1\n";
		return 0;
	}
	int ans = 0, l = 0, r = 0;
	for (int i = 0; i < n; i++) {
		for (int j = i; j < n; j++) {
			swap(s[i], s[j]);
			vector<int> seq(n);
			seq[0] = (s[0] == '(' ? 1 : -1);
			for (int i = 1; i < n; i++) {
				seq[i] = seq[i - 1] + (s[i] == '(' ? 1 : -1);
			}	
			int res = count(seq.begin(), seq.end(), *min_element(seq.begin(), seq.end()));
			if (res > ans) {
				ans = res;
				l = i;
				r = j;
			}
			swap(s[i], s[j]);
		}
	}
	cout << ans << '\n';
	cout << l + 1 << ' ' << r + 1 << '\n';
	return 0;
}
