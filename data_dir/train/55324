using namespace std;
#include<bits/stdc++.h>
#define debug(x) clog<<#x<<" = "<<x<<'\n'
#define ll long long
#define pll pair<ll,ll>
#define pii pair<int,int>
#define fir first
#define sec second
#define mp make_pair
#define pb push_back
#define sz(c) ((int)c.size())
#define all(c) (c).begin(),(c).end()
#define MASK(i) (1LL<<(i))
#define BIT(x,i) (((x)>>(i))&1)
#define fn "D"  /// ___FILE_NAME_HERE___
#define rep(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define __rep(c,it) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();it++)

template <class T,class U>
void maximize(T &x,U y)
{
    if(x < y)x=y;
}
template <class T,class U>
void minimize(T &x,U y)
{
    if(x > y)x=y;
}
template <class T>
T Abs(T x)
{
    return (x < 0 ? -x : x);
}
template <class T>
T safe_sqrt(T x)
{
    return sqrt(max(x,(T)0));
}
template <class T,class U,class V>
T addmod(T x,U k,V MOD)
{
    return ((x+k)%MOD + MOD)%MOD;
}
template <class T,class U,class V>
T submod(T x,U k,V MOD)
{
    return ((x-k)%MOD + MOD)%MOD;
}
template <class T,class U,class V>
T mul(T x,U y,V MOD)
{
    return (ll)x*y%MOD;
}
/*------------------------------------------END_OF_TEMPLATE------------------------------------------*/

namespace task{

const int N=5e3+5;
int dp[N][N],ans[N];
int n;
char s[N];

void solve()
{
    scanf("%s",s+1);
    for(int i=1;s[i];++i)++n;
    for(int diff=1;diff <= n;++diff)
        for(int l=1,r=diff;r <= n;++r,++l)
    {
        if(diff==1)
        {
            dp[l][r]=1;
            continue;
        }
        else if(diff==2)
        {
            if(s[l]==s[r])
            {
                dp[l][r]=2;
                continue;
            }
        }
        if(s[l]!=s[r] or !dp[l+1][r-1])continue;
        dp[l][r]=1;
        int mid = (r - l + 1)>>1;
        if(dp[l][l + mid - 1] and dp[r-mid+1][r])
            dp[l][r] = dp[l][l + mid - 1] + 1;
    }
    for(int diff=1;diff <= n;++diff)
        for(int l=1,r=diff;r <= n;++r,++l)
          ++ans[dp[l][r]];
    for(int i=n-1;i>=1;--i)ans[i]+=ans[i+1];
    for(int i=1;i<=n;++i)printf("%d ",ans[i]);
}}

int main(void)
{
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    task::solve();
}
