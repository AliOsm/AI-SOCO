#include <iostream>
#include <cstdio>
#include <algorithm>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <cstring>
#include <fstream>
#include <memory.h>
#include <iomanip>
#include <omp.h>
#include <bitset>
#include <string>
#include <list>

using namespace std;

#define right asfdsg
#define left asfdsvs
#define MAXN 1000000000
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define x1 asicvlid
#define y1 ascnsdkn

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair < int, int > pii;
typedef pair < ll, ll > pll;

int n;
bool findx = false;
int x1, x2, y1, y2;

int getQuery() {
    if (x1 > x2 || y1 > y2) return 0;
    printf ("? %d %d %d %d\n", x1, y1, x2, y2);
    fflush(stdout);
    int c; scanf ("%d", &c);
    return c;
}

int query(int x, bool ri) {
    if (findx) {
        if (ri)
            x1 = x;
        else x2 = x;
    }
    else {
        if (ri) y1 = x;
        else y2 = x;
    }
    return getQuery();
}

int bin_se(int l, int r, int expected, bool ri = false) {
    while ( l != r ) {
        int m = (l + r + ri) >> 1;
        if (query(m, ri) < expected)
            if (ri) r = m - 1; else l = m + 1;
        else if (ri) l = m; else r = m;
    }
    return l;
}

void find_in() {
    findx = 1;
    x2 = bin_se(x1, x2, 1);
    x1 = bin_se(x1, x2, 1, 1);
    findx = 0;
    y2 = bin_se(y1, y2, 1);
    y1 = bin_se(y1, y2, 1, 1);
}

int main() {
    scanf ("%d", &n);
    x1 = y1 = 1;
    x2 = y2 = n;
    findx = 1;
    x2 = bin_se(x1, x2, 1);
    int c = getQuery();
    if (c == 2) {
        x1 = 1;
        findx = 0;
        y2 = bin_se(y1, y2, 1);
    }
    find_in();
    int fx1 = x1;
    int fx2 = x2;
    int fy1 = y1;
    int fy2 = y2;
    x1 = 1; y1 = 1;
    x2 = fx1 - 1; y2 = n;
    if (getQuery() == 1) {
        find_in();
        printf ("! %d %d %d %d %d %d %d %d", fx1, fy1, fx2, fy2, x1, y1, x2, y2);
        return 0;
    }
    x1 = fx2 + 1; y1 = 1;
    x2 = n; y2 = n;
    if (getQuery() == 1) {
        find_in();
        printf ("! %d %d %d %d %d %d %d %d", fx1, fy1, fx2, fy2, x1, y1, x2, y2);
        return 0;
    }
    x1 = 1; y1 = 1;
    x2 = n; y2 = fy1 - 1;
    if (getQuery() == 1) {
        find_in();
        printf ("! %d %d %d %d %d %d %d %d", fx1, fy1, fx2, fy2, x1, y1, x2, y2);
        return 0;
    }
    x1 = 1; y1 = fy2 + 1;
    x2 = n; y2 = n;
    if (getQuery() == 1) {
        find_in();
        printf ("! %d %d %d %d %d %d %d %d", fx1, fy1, fx2, fy2, x1, y1, x2, y2);
        return 0;
    }

}
