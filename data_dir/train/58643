#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

int main() {
  int64 n, k;
  cin >> n >> k;
  vector<int64> a(k);
  a[0] = (n - k * (k - 1) / 2) / k;
  // trace(a[0]);
  if (a[0] <= 0) {
    puts("NO");
    return 0;
  }
  bool found = false;
  int64 rem = n - a[0];
  for (int64 i = 1; i < k; ++i) {
    int64 low = a[i - 1] + 1, high = 2 * a[i - 1] + 1;
    while (low != high) {
      int64 mid = (low + high) / 2;
      bool flag = false;
      if (k - i < 30) {
        flag |= ((1LL << (k - i)) - 1) < rem / mid;
        flag |= rem % mid && ((1LL << (k - i)) - 1) == rem / mid;
      }
      if (flag) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    a[i] = high;
    // trace(i, a[i]);
    if (a[i] > a[i - 1] * 2) {
      found = true;
      break;
    }
    rem -= a[i];
  }
  if (found) {
    puts("NO");
    return 0;
  }
  puts("YES");
  for (int i = 0; i < k; ++i) {
    printf("%lld%c", a[i], " \n"[i + 1 == k]);
  }
  return 0;
}
