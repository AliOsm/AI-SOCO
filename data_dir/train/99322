#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define en "\n"
#define pair <int, int> pii
#define all(x) x.begin(),x.end()
#define loop(i,q,n) for(int i=q;i<n;i++)
#define dloop(i,a,b) for(int i=a;i>=b;i--)
#define speed ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL)
const ld PI = 3.14159265358979323;
const ll mod = 1e9+7;
const int N=150000;
//******************************************************************************
int ar[N];
struct data
{
    int x;
    bool h;
};
data tree[4*N];
data build(int node,int l,int r)
{
    if(l==r)
    {
        tree[node].x=ar[l];
        tree[node].h=0;
        return tree[node];
    }
    int mid=(l+r)>>1;
    build(2*node,l,mid);
    build(2*node+1,mid+1,r);
    if(tree[2*node].h==0)
    {
        tree[node].x=tree[2*node].x|tree[2*node+1].x;
        tree[node].h=1;
    }
    else
    {
        tree[node].x=tree[2*node].x^tree[2*node+1].x;
        tree[node].h=0;
    }
    return tree[node];
}
void update(int l,int r,int node,int idx,int val)
{
    if(idx<l||idx>r)return;
    if(l==r)
    {
        tree[node].x=val;
        return;
    }
    int mid=(l+r)>>1;
    update(l,mid,2*node,idx,val);
    update(mid+1,r,2*node+1,idx,val);
    if(tree[2*node].h==0)
        tree[node].x=tree[2*node].x|tree[2*node+1].x;
    else
        tree[node].x=tree[2*node].x^tree[2*node+1].x;
    return;
}
int main()
{
    int n,m;
    cin>>n>>m;
    int n1=1<<n;
    loop(i,0,n1)cin>>ar[i];
    build(1,0,n1-1);
    while(m--)
    {
        int idx,val;
        cin>>idx>>val;
        update(0,n1-1,1,idx-1,val);
        cout<<tree[1].x<<endl;
    }
}