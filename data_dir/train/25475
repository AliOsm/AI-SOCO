#include<bits/stdc++.h>
using namespace std;
#define C            1000000007
#define MOD          998244353
#define int          long long        
#define D            double
#define S            second
#define F            first
#define pb           push_back
#define ppb          pop_back()
#define B(c)         (c).begin()
#define E(c)         (c).end()
#define all(c)       (c).begin(),(c).end()
#define rall(c)      (c).rbegin(),(c).rend()
#define SORT(v)       sort(ALL(v))  
#define debug         cerr<<"bhau"<<endl
#define debugv(x)     cerr<<x<<endl
#define inputarr(a,n)  for(int i=0;i<n;++i) cin>>a[i]
#define printarr(a,n)  for(int i=0;i<n;++i) cout<<a[i]<<" "
#define lb           lower_bound
#define ub           upper_bound
#define si(c)        (int)((c).size())
#define gcd(a,b)      __gcd(a,b)
#define lcm(a,b)     (a*(b/gcd(a,b)))
#define sqr(a)       ((a) * (a))
#define accuracy     cout << fixed << setprecision(18);
#define optimize()   ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
typedef pair<int,int>                         pii;
typedef pair<int,pii>                         pipii;
typedef vector<vector<int> >                  vvi;
typedef map<int,int>                          mp;
typedef priority_queue<int, vector<int>, greater<int> > pq;
typedef vector<int>::iterator                  vit;
typedef set<int>::iterator                     sit;
typedef map<int,int>::iterator                mit;
inline  bool checkBit(int n, int i) { return n&((int)1<<i); }
inline  int setBit(int n, int i) { return n|((int)1<<i);; }
inline  int resetBit(int n, int i) { return n&(~((int)1<<i)); }
inline  bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }
inline  bool isLeapYear(int year) { return (year%400==0) || (year%4==0 && year%100!=0); }
inline  void normal(int &a) { a %= MOD; (a < 0) && (a += MOD); }
inline  int modMul(int a, int b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a*b)%MOD; }
inline  int modAdd(int a, int b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a+b)%MOD; }
inline  int modSub(int a, int b) { a %= MOD, b %= MOD; normal(a), normal(b); a -= b; normal(a); return a; }
inline  int modPow(int b, int p) { int r = 1; while(p) { if(p&1) r = modMul(r, b); b = modMul(b, b); p >>= 1; } return r; }
inline  int modInverse(int a) { return modPow(a, MOD-2); }
inline  int modDiv(int a,int b) { return modMul(a, modInverse(b)); }
const int N=2e5+10;
//int a[N],segtree[N],n,b[N];
vector<int>g[N];
bool visited[N];
int ans[N],cnt=0,sst[N],sure_ans,n;
/*vector<bool>visited(N);
int n,m,qua;
int R[N];
int root(int x){
	return R[x]==x?x:root(R[x]);
}
void union1(int x,int y){
	x=root(x),y=root(y);
	R[y]=R[x];
}*/
void dfs(int v){
	visited[v]=1;
	sst[v]=1;
	for(int i=0;i<si(g[v]);i++){
		if(!visited[g[v][i]]){
			int to=g[v][i];
			dfs(to);
			sst[v]+=sst[to];
		}
	}
	cnt+=sst[v];
}/*
int  kruskal(pipi p[]){
	int x,y,cost=0,minimumcost=0;
	for(int i=0;i<m;i++){
		x=p[i].S.F,y=p[i].S.S;cost=p[i].F;
		if(root(x)!=root(y)&&root(y)==y){
			minimumcost+=cost;
			visited[y]=true;
			union1(x,y);
		}
	}return minimumcost;
}/*
int sum(int k,int bintree[]){
	int s=0;
	while(k>0){
		s+=bintree[k];
		k-=k&-k;
	}return s;
}
int add(int k,int x,int bintree[],int n){
	while(k<=n){
        bintree[k]+=x;
        k+=k&-k;
	}
}
int update(int k,int x,int a[],int bintree[],int n){
	int i=k;
	while(k<=n){
		bintree[k]-=a[i]-x;
		k+=k&-k;
	}a[i]-=a[i]-x;
}
void initialize(){
	for(int i=0;i<N;i++)R[i]=i;
}/*
int prism(int x){
	pq q;
	q.push({(int)0,x});
	int minimumcost=0;
	while(!q.empty()){
		pii p=q.top();
		q.pop();
		if(visited[p.S])continue;
		minimumcost+=p.F;cout<<p.S<<endl;
		visited[p.S]=true;
		for(int i=0;i<si(G[p.S]);i++){
			if(!visited[G[p.S][i].S])
			q.push(G[p.S][i]);
		}
	}return minimumcost;
}
void build(int start,int end,int node ){
	if(start==end){
		segtree[node]=a[start];
	}else{
		int mid=(start+end)/2;
		build(start,mid,2*node);
		build(mid+1,end,2*node+1);
		segtree[node]=min(segtree[2*node],segtree[2*node+1]);
	}
}
int query(int l,int r,int start,int end,int node){
	if(l>end||r<start)return 2e18;
	else if(l<=start&&r>=end){
		return segtree[node];
	}
	else{
	    int mid=(start+end)/2;
		int left=query(l,r,start,mid,2*node);
		int right=query(l,r,mid+1,end,2*node+1);
		return min(left,right);	
	}
}
void update(int i,int start,int end,int node){
	if(start==end){
		segtree[node]=2e18;
		a[i]=2e18;
	}
	else{
	    int mid=(start+end)/2;
		if(start<=i&&i<=mid)
		update(i,start,mid,2*node);
		else
		update(i,mid+1,end,2*node+1);	
		segtree[node]=min(segtree[2*node],segtree[2*node+1]);
	}
}
int rangequery(int l,int r,int start,int end,int node){
	if(start>end||start>r||end<l)return 0;
	if(lazy[node]){
		segtree[node]+=(end-start+1)*lazy[node];
		if(start!=end){
			lazy[2*node]+=lazy[node];
			lazy[2*node+1]+=lazy[node];
		}lazy[node]=0;
	}
	if(start>=l&&end<=r)return segtree[node];
	int mid=(start+end)/2;
	int left=rangequery(l,r,start,mid,2*node);
	int right=rangequery(l,r,mid+1,end,2*node+1);
	return left+right;
}
void rangeupdate(int l,int r,int value,int start,int end,int node){
	if(start>end||l>end||start>r)return;
	if(lazy[node]){
		segtree[node]+=(end-start+1)*lazy[node];
		if(start!=end){
			lazy[2*node]+=lazy[node];
			lazy[2*node+1]+=lazy[node];
		}lazy[node]=0;
	}
	if(l<=start&&r>=end){
		segtree[node]+=(end-start+1)*value;
		if(start!=end){
			lazy[2*node]+=value;
			lazy[2*node+1]+=value;
		}return;
	}
	int mid=(start+end)/2;
	rangeupdate(l,r,value,start,mid,2*node);
	rangeupdate(l,r,value,mid+1,end,2*node+1);
	segtree[node]=segtree[2*node]+segtree[2*node+1];
}*/
void dfs1(int v,int u){
	if(u==-1)ans[v]=cnt;
	else ans[v]=ans[u]+n-2*sst[v];
	for(int i=0;i<si(g[v]);i++){
		if(g[v][i]!=u){
			dfs1(g[v][i],v);
		}
	}
	sure_ans=max(sure_ans,ans[v]);
}
void solve(){
    cin>>n;
    for(int i=0;i<n-1;i++){
    	int x,y;cin>>x>>y;
    	g[x].pb(y);
    	g[y].pb(x);
	}
    dfs(1);
    dfs1(1,-1);
    cout<<sure_ans<<endl;
}
signed main(){   
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
	int t=1;
	//accuracy;
    //cin>>t;
	while(t--){
		solve();
	}
}