/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-06 10:32:21
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 2e5 + 10;
const ll LOG = 20;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , lab[MAXN] , val[MAXN] , ans[MAXN] , ps[MAXN] , mark[MAXN] , sz[MAXN] , cnt[1 << LOG];
string s;
vector<ll> V , subtree , adj[MAXN];

void PreDFS(ll v , ll p = 0){
    val[v] = val[p] ^ lab[v];
    for(ll u : adj[v])  if(!mark[u] && u != p)  PreDFS(u , v);
}

void DFSSize(ll v , ll p = -1){
    sz[v] = 1;
    for(ll u : adj[v])  if(!mark[u] && u != p)  DFSSize(u , v) , sz[v] += sz[u];
}

ll centroid(ll v , ll p , ll root){
    for(ll u : adj[v])  if(!mark[u] && u != p && sz[u] > sz[root] / 2)  return centroid(u , v , root);
    return v;
}

void CalcDFS(ll v , ll p , ll t , ll root){
    if(v != root)   V.push_back(v);
    subtree.push_back(v);
    if(__builtin_popcount(val[v] ^ val[root] ^ lab[root]) <= 1) ps[v] += t;
    for(ll u : adj[v])  if(!mark[u] && u != p)  CalcDFS(u , v , t , root);
    if(p == root){
        for(ll u : V){
            ps[u] += cnt[val[u] ^ lab[root]];
            for(ll i = 0 ; i < LOG ; i++)   ps[u] += cnt[val[u] ^ (1 << i) ^ lab[root]];
            ans[root] -= (1 - t) * ps[u];
        }
        for(ll u : V)   cnt[val[u]]++;
        V = {};
    }
}

void SolveDFS(ll v , ll p = -1){
    for(ll u : adj[v])  if(!mark[u] && u != p)  SolveDFS(u , v) , ps[v] += ps[u];
    ans[v] += ps[v];
}

void decompose(ll v){
//    cout << v << endl;
    DFSSize(v);
    v = centroid(v , -1 , v);
    PreDFS(v);
    CalcDFS(v , -1 , 0 , v);
//    cout << v << endl;
//    for(ll i : subtree) cout << i << sep << cnt[val[i]] << sep << ps[i] << endl , cnt[val[i]] = 0;
    for(ll i : subtree) cnt[val[i]] = 0;
    subtree = {};
    reverse(all(adj[v]));
    CalcDFS(v , -1 , 1 , v);
//    for(ll i : subtree) cout << i << sep << ps[i] << endl;
    SolveDFS(v);
//    for(ll i : subtree) cout << i << sep << cnt[val[i]] << sep << ps[i] << endl , cnt[val[i]] = ps[i] = 0;
    for(ll i : subtree) cnt[val[i]] = ps[i] = 0;
    mark[v] = 1;
//    cout << "==============" << endl << endl;
    for(ll u : adj[v])  if(!mark[u])    decompose(u);
}

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n;
    for(ll i = 1 ; i < n ; i++){
        ll v , u;
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    cin >> s; s = "." + s;
//    PreDFS(1);
//    for(ll i = 1 ; i <= n ; i++)    cout << val[i] << sep;
//    cout << endl << endl;
    for(ll i = 1 ; i <= n ; i++)    lab[i] = (1 << ll(s[i] - 97));
    decompose(1);
    for(ll i = 1 ; i <= n ; i++)    cout << ans[i] << sep;

    return 0;
}
/*

*/
