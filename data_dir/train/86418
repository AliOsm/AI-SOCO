#include <bits/stdc++.h>
#include <ctime>

#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")

using namespace std;

#define space ' '
#define enter "\n"
#define fi first
#define se second
#define mp make_pair
#define ALL(x) x.begin(), x.end()
#define bits(x) __builtin_popcount(x)
#define bitsll(x) __builtin_popcountll(x)
#define crr(a) cerr << #a << " = " << a << "\n"
#define precision(a) fixed << setprecision(a)

typedef long long ll;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef set <int> si;
typedef map <int, int> mii;
typedef pair <ll, ll> pll;
typedef vector <int> vi;
typedef vector <pii> vii;

inline bool isDigit (char c) {
	return '0' <= c && c <= '9';
}

template <class T>
inline T sqr (T x) {
	return x * x;
}

template <class T>
inline bool isSquare (T x) {
	T y = sqrt(x + 0.5);
	return (y * y) == x;
}

template <class T1, class T2>
inline T1 gcd (T1 a, T2 b) {
	return b ? gcd(b, a % b) : a;
}

template <class T1, class T2>
inline T1 eqMin (T1 & x, const T2 & y) {
	if (T1(y) < x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 eqMax (T1 & x, const T2 & y) {
	if (T1(y) > x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 min (const T1 & x, const T2 & y) {
	return x < (T1) y ? x : (T1) y;
}

template <class T1, class T2>
inline T1 max (T1 & x, const T2 & y) {
	return x > (T1) y ? x : (T1) y;
}

template <typename T>
inline T getint () {
	T x = 0, p = 1;
	char ch;
	do {
		ch = getchar();
	} while (ch <= ' ');
	if (ch == '-')
		p = -1, ch = getchar();
	while (ch >= '0' && ch <= '9')
		x = x * 10 + ch - '0', ch = getchar();
	return x * p;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const pair <T1, T2> & p) {
	return os << '(' << p.fi << ", " << p.se << ')';
}

template <class T>
ostream & operator << (ostream & os, const vector <T> & v) {
	os << '{';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '}';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const set <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const multiset <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const map <T1, T2> & m) {
	os << '<';
	bool was = false;
	for (const auto & x : m) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '>';
	return os;
}

template <size_t sz>
ostream & operator << (ostream & os, const bitset <sz> & bit) {
	os << '/';
	for (int i = 0; i < sz; i++)
		os << bit[i];
	os << '\\';
	return os;
}

const double PI = acos(-1);
const double EPS = 1e-8;
const int INF = (int) 2e9;
const ll LINF = (ll) 2e18;
const int MOD = (int) 1e9 + 7;
const int MAXN = (int) 2010;

int n;
int dp[2][10][10][10][10][10];
int a[MAXN], b[MAXN];
int dist[100][19];

int solve () {
	int k = 0;
	for (int day = 0; day <= n; day++, k ^= 1) {
		int nxt = day + 1;
		memset(dp[k ^ 1], 1, sizeof(dp[k ^ 1]));
		for (int p1 = 0; p1 < 10; p1++) {
			for (int p2 = 0; p2 < 10; p2++) {
				for (int p3 = 0; p3 < 10; p3++) {
					for (int p4 = 0; p4 < 10; p4++) {
						for (int lvl = 0; lvl < 9; lvl++) {
							if (p1 == 9)
								eqMin(dp[k ^ 1][a[nxt]][b[nxt]][p2][p3][p4],
									  dp[k][lvl][p1][p2][p3][p4] + dist[lvl][a[nxt]]);
							else
								eqMin(dp[k][p1][9][p2][p3][p4], dp[k][lvl][p1][p2][p3][p4] + dist[lvl][p1]);
							if (p2 == 9)
								eqMin(dp[k ^ 1][a[nxt]][p1][b[nxt]][p3][p4],
									  dp[k][lvl][p1][p2][p3][p4] + dist[lvl][a[nxt]]);
							else
								eqMin(dp[k][p2][p1][9][p3][p4], dp[k][lvl][p1][p2][p3][p4] + dist[lvl][p2]);
							if (p3 == 9)
								eqMin(dp[k ^ 1][a[nxt]][p1][p2][b[nxt]][p4],
									  dp[k][lvl][p1][p2][p3][p4] + dist[lvl][a[nxt]]);
							else
								eqMin(dp[k][p3][p1][p2][9][p4], dp[k][lvl][p1][p2][p3][p4] + dist[lvl][p3]);
							if (p4 == 9)
								eqMin(dp[k ^ 1][a[nxt]][p1][p2][p3][b[nxt]],
									  dp[k][lvl][p1][p2][p3][p4] + dist[lvl][a[nxt]]);
							else
								eqMin(dp[k][p4][p1][p2][p3][9], dp[k][lvl][p1][p2][p3][p4] + dist[lvl][p4]);
						}
					}
				}
			}
		}
	}

	k = n % 2;

	int ans = INF;
	for (int lvl = 0; lvl < 9; lvl++) {
		eqMin(ans, dp[k][lvl][9][9][9][9]);
	}
	return ans + 2 * n;
}

int main () {
	ios_base::sync_with_stdio(false);
	cin >> n;
	for (int i = 1; i <= n; i++) {
		cin >> a[i] >> b[i], a[i]--, b[i]--;
	}

	memset(dp[0], 1, sizeof(dp[0]));
	dp[0][0][9][9][9][9] = 0;

	for (int i = 0; i < 15; i++) {
		for (int j = 0; j < 15; j++) {
			dist[i][j] = abs(i - j);
		}
	}

	cout << solve();
}