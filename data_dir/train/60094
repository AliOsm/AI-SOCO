#include <sstream>
#include<iostream>
#include<algorithm>
#include<vector>
#include<set>
#include<ctime>
#include<cmath>
#include<map>
#include<stack>
#include<random>
#include<queue>
#include<list>
#include<math.h>
using namespace std;
#define ll long long int
#define ld long double
#define key pair<ld,ld>
#define ii pair<int,int>
#define si set<int>
#define vii vector<pair<int,int> >
#define vi vector<int>
#define vll vector<ll>
#define vb vector<bool>
#define vvi vector<vector<int> >
#define vs vector<string>
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define nu 100001
//#define mod 1000000007
#define mul(x,y) ((ll)(x)*(y))%mod
#define tr(c,i) for(auto i = (c).begin(); i != (c).end(); i++)
#define fastio  ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define forn(i, n) for (int i = 0; i < int(n); i++)
const ll INF=1000000000000000000;
const ll mod=998244353;
int  MOD(int  a, int  b)
{
    if(a>b)
        return a-b;
    else
        return b-a;
}
int  max3(int  a,int  b, int  c)
{
    return max(c,max(a,b));
}
int  min3(int  a,int  b,int  c)
{
    return min(a,min(b,c));
}
ll  power(ll  x,ll  y )
{
    ll res = 1;
    while (y > 0)
    {
        if (y & 1)
            res = (res*x)%mod;
        y = y>>1;
        x = (x*x)%mod;
    }
    return res%mod;
}
ll logg(ll  a)
{
    ll  x=0;
    while(a>1)
    {
        x++;
        a/=2;
    }
    return x;
}
ll  gcd(ll  a,ll   b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}
ll abso(ll x)
{
    if(x<0)
    {
        return -x;
    }
    return x;
}
ll ceiling (ll  a,ll  b)
{
    if(a%b==0)
    {
        return a/b;
    }
    else
    {
        return a/b+1;
    }
}
ll modinv(ll x)
{
    return power(x,mod-2);
}
ll dp[1001][2001][4];
int main()
{
    int n,k;
    cin>>n>>k;
    for(int i=0;i<=1000;i++)
    {
        for(int j=0;j<=1000;j++)
        {
            for(int k=0;k<4;k++)
            {
                dp[i][j][k]=0;
            }
        }
    }
    dp[0][0][0]=1;
    dp[0][0][1]=0;
    dp[0][0][2]=0;
    dp[0][0][3]=1;
    for(int i=1;i<=n;i++)
    {
        for(int j=0;j<=k;j++)
        {
            if(j==0)
            {
                dp[i][j][0]=0;
                dp[i][j][1]=0;
                dp[i][j][2]=0;
                dp[i][j][3]=0;
                continue;
            }
            if(i==1)
            {
                if(j>2)
                {
                    dp[i][j][0]=0;
                    dp[i][j][1]=0;
                    dp[i][j][2]=0;
                    dp[i][j][3]=0;
                }
                else
                {
                    if(j==2)
                    {
                        dp[i][j][0]=0;
                        dp[i][j][1]=1;
                        dp[i][j][2]=1;
                        dp[i][j][3]=0;
                    }
                    else
                    {
                        dp[i][j][0]=1;
                        dp[i][j][1]=0;
                        dp[i][j][2]=0;
                        dp[i][j][3]=1;
                    }
                }
                continue;
            }
            dp[i][j][0]=dp[i-1][j][0]+dp[i-1][j][1]+dp[i-1][j][2]+dp[i-1][j-1][3];
            dp[i][j][1]=dp[i-1][j-1][0]+dp[i-1][j][1]+dp[i-1][j-1][3];
            if(j>=2)
            {
                 dp[i][j][1]+=dp[i-1][j-2][2];
            }
            dp[i][j][2]=dp[i-1][j-1][0]+dp[i-1][j][2]+dp[i-1][j-1][3];
            if(j>=2)
            {
                dp[i][j][2]+=dp[i-1][j-2][1];
            }
            dp[i][j][3]=dp[i-1][j-1][0]+dp[i-1][j][1]+dp[i-1][j][2]+dp[i-1][j][3];
            for(int m=0;m<4;m++)
            {
                dp[i][j][m]=dp[i][j][m]%mod;
            }
        }
    }
    ll ans=0;
    for(int h=0;h<4;h++)
    {
        ans+=dp[n][k][h];
        ans=ans%mod;
    }
    cout<<ans%mod;
}
