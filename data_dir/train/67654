#include<stdio.h>
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<functional>
#include<string>
#include<algorithm>
#include<time.h>
#include<bitset>
void fre(){freopen("c://test//input.in","r",stdin);freopen("c://test//output.out","w",stdout);}
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T> inline void gmax(T &a,T b){if(b>a)a=b;}
template <class T> inline void gmin(T &a,T b){if(b<a)a=b;}
using namespace std;
const int N=1e5+10,M=0,Z=1e9+7,maxint=2147483647,ms31=522133279,ms63=1061109567,ms127=2139062143;const double eps=1e-8,PI=acos(-1.0);//.0
map<int,int>mop;
struct A
{
	int l,r;
	int min,max;
	int w;
}a[1<<18];
int n,s,l;
int v[N];
void build(int o,int l,int r)
{
	a[o].l=l;
	a[o].r=r;
	a[o].w=1e9;//w表示段数最小值
	if(l==r)
	{
		a[o].min=a[o].max=v[l];
		return;
	}
	int m=(l+r)>>1;
	build(ls,l,m);
	build(rs,m+1,r);
	a[o].min=min(a[ls].min,a[rs].min);
	a[o].max=max(a[ls].max,a[rs].max);
}
int minn,maxx;
void getit(int o,int l,int r)//找区间段的最大值和最小值
{
	if(a[o].l==l&&a[o].r==r)
	{
		gmax(maxx,a[o].max);
		gmin(minn,a[o].min);
		return;
	}
	int m=(a[o].l+a[o].r)>>1;
	if(r<=m)getit(ls,l,r);
	else if(l>m)getit(rs,l,r);
	else
	{
		getit(ls,l,m);
		getit(rs,m+1,r);
	}
}
int findw(int o,int l,int r)
{
	if(a[o].l==l&&a[o].r==r)
	{
		return a[o].w;
	}
	int m=(a[o].l+a[o].r)>>1;
	if(r<=m)return findw(ls,l,r);
	else if(l>m)return findw(rs,l,r);
	else return min(findw(ls,l,m),findw(rs,m+1,r));
}
void update(int o,int p,int w)
{
	if(a[o].l==a[o].r)
	{
		a[o].w=w;
		return;
	}
	int m=(a[o].l+a[o].r)>>1;
	if(p<=m)update(ls,p,w);
	else update(rs,p,w);
	a[o].w=min(a[ls].w,a[rs].w);
}
int main()
{
	while(~scanf("%d%d%d",&n,&s,&l))
	{
		for(int i=1;i<=n;i++)scanf("%d",&v[i]);
		build(1,1,n);
		for(int i=l;i<=n;i++)//以i位置为结尾
		{
			int rgt=i-l+1;//状态转移前驱的最右端，rgt最小为1
			//也就是当前区间应该是[最大延展位置，rgt]

			//当次状态转移的左端，l~位置我们可以取
			int l=1;
			int r=rgt;
			while(l<r)
			{
				int m=(l+r)>>1;
				minn=1e9+10;
				maxx=-1e9-10;
				getit(1,m,i);
				if(maxx-minn<=s)r=m;
				else l=m+1;
			}
			bool flag=0;
			if(l<rgt)flag=1;
			else
			{
				minn=1e9+10;
				maxx=-1e9-10;
				getit(1,l,i);
				if(maxx-minn<=s)flag=1;
			}
			//现在，l~i是合法范围，[l-1,rgt]是转移范围

			if(flag)
			{
				int w;
				if(l==1)w=0;
				else w=findw(1,l-1,rgt-1);
				if(w<1e9)update(1,i,w+1);//单点更新
			}
		}
		int ans=findw(1,n,n);
		if(ans==1e9)ans=-1;
		printf("%d\n",ans);
	}
	return 0;
}
/*
【题意】
n个数
我们想分成尽可能少的段数
对于同一段上的数，要求——
1，至少为l个
2，最大-最小不能超过s

【类型】


【分析】
4 4 2
1 1 5 9
我们会贪心到（1 1 5）（9），就GG了

我们可以想一个暴力点的DP
设f[i]表示前i个数字分成的最小段数
那么f[i]=min(f[j])+1,j∈[0~i-s]且(j+1~i)之间最大值-最小值<=s

我们可以用线段树维护区间最小值。

【时间复杂度&&优化】


【trick】


【数据】


*/