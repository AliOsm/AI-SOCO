#include "bits/stdc++.h"
using namespace std;
#ifndef LOCAL
#define endl '\n'
#endif

#define fr(i, a, b) for(int i = a; i <= b; i++)
#define rf(i, a, b) for(int i = a; i >= b; i--)
#define pf push_front
#define pb push_back
#define eb emplace_back
#define fi first
#define se second
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define sz(x) (int)x.size()
#define rsz resize()
#define lb lower_bound
#define ub upper_bound
#define br cout << endl

typedef long long ll;
typedef long double f80;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;

int pct(int x) { return __builtin_popcount(x); }
int pct(ll x) { return __builtin_popcountll(x); } 
int bt(int x) { return 31 - __builtin_clz(x); } // floor(log2(x))
int bt(ll x) { return 63 - __builtin_clzll(x); } // floor(log2(x))
int cdiv(int a, int b) { return a / b + !(a < 0 || a % b == 0); }
ll cdiv(ll a, ll b) { return a / b + !(a < 0 || a % b == 0); }
int nxt_C(int x) { int c = x & -x, r = x + c; return (((r ^ x) >> 2) / c) | r; }
ll nxt_C(ll x) { ll c = x & -x, r = x + c; return (((r ^ x) >> 2) / c) | r; }

vector<int> get_bits(int mask) {
	vector<int> bb;
	while(mask) { int b = bt(mask); bb.pb(b); mask ^= (1 << b); }
	reverse(all(bb));
	return bb;
}

int get_mask(vector<int> v) {
	int mask = 0;
	for(int x : v) { mask ^= (1 << x); }
	return mask;
}

template<typename T>
void uniq(vector<T> &v) { sort(all(v)); v.resize(unique(all(v)) - v.begin()); }
template<typename T>
void leftShift(vector<T> &v, ll k) { k %= sz(v); if(k < 0) k += sz(v); rotate(v.begin(), v.begin() + k, v.end()); }
template<typename T>
void rightShift(vector<T> &v, ll k) { leftShift(v, sz(v) - k); }

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll rand(ll l, ll r){
	uniform_int_distribution<ll> uid(l, r);
	return uid(rng);
}

void sc() {}

template <typename Head, typename... Tail>
void sc(Head &H, Tail &... T) { cin >> H; sc(T...); }

#ifdef LOCAL
#define debug(...) cerr << "[L:" << __LINE__ << "][" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

#ifndef LOCAL
string to_string(__int128 x) {
	string s = "";
	bool neg = 0;
	if(x < 0) { s += "-"; neg = 1; x = -x; }
	if(!x) s += '0';
	while(x) {
		int rem = x % 10;
		s += to_string(rem);
		x /= 10;
	}
	reverse(s.begin() + neg, s.end());
	return s;
}
#endif

const int mod = 1e9 + 7; // 998244353;

int pwr(int a,int b) {
	int ans = 1;
	while(b) {
		if(b & 1) ans = (ans * 1LL * a) % mod;
		a = (a * 1LL * a) % mod;
		b >>= 1;
	}
	return ans;
}

/*
	Lookout for overflows!!
	Check array sizes!!
	Clear before test cases!!
	Use the correct modulo!!
	Check for corner cases!!
	Are you forgetting something?!
	Read problem statement carefully!!!
*/

const int N = 1005;
char a[N][N];
set<int> row[N], col[N];
int dist[N][N];

queue<pii> q;

void go(set<int> &s, int l,int r,int d,int xx, bool lol) {
    auto it = s.lower_bound(l);
    auto it1 = it;
    while((*it1) <= r) {
        int yy = (*it1);
        if(!lol) {
            if(a[xx][yy] == '#') break;
            if(dist[xx][yy] > d) {
                dist[xx][yy] = d;
                q.push({xx, yy});
            }
        }
        else {
            if(a[yy][xx] == '#') break;
            if(dist[yy][xx] > d) {
                dist[yy][xx] = d;
                q.push({yy, xx});
            }
        }
        it1++;
    }
    s.erase(it, it1);
}

void go1(set<int> &s, int l,int r,int d,int xx, bool lol) {
    auto it = s.upper_bound(r);
    auto it1 = it;
    while(1) {
        it1--;
        int yy = (*it1);
        if(yy < l) break;
        if(!lol) {
            if(a[xx][yy] == '#') break;
            if(dist[xx][yy] > d) {
                dist[xx][yy] = d;
                q.push({xx, yy});
            }
        }
        else {
            if(a[yy][xx] == '#') break;
            if(dist[yy][xx] > d) {
                dist[yy][xx] = d;
                q.push({yy, xx});
            }
        }
    }
    it1++;
    s.erase(it1, it);
}

void solve() {
	int n, m, k;
    sc(n, m, k);
    fr(i, 0, n + 1) {
        fr(j, 0, m + 1) {
            a[i][j] = '#';
            row[i].insert(j);
            col[j].insert(i);
        }
    }
    fr(i, 1, n) {
        fr(j, 1, m) {
            sc(a[i][j]);
            dist[i][j] = 1e9;
        }
    }
    int x1, y1, x2, y2;
    sc(x1, y1, x2, y2);
    q.push({x1, y1});
    dist[x1][y1] = 0;
    row[x1].erase(y1);
    col[y1].erase(x1);
    while(!q.empty()) {
        pii u = q.front();
        q.pop();
        int d = dist[u.fi][u.se];
        go(row[u.fi], u.se, min(m, u.se + k), d + 1, u.fi, 0);
        go(col[u.se], u.fi, min(n, u.fi + k), d + 1, u.se, 1);
        go1(row[u.fi], max(u.se - k, 1), u.se, d + 1, u.fi, 0);
        go1(col[u.se], max(u.fi - k, 1), u.fi, d + 1, u.se, 1);
    }
    if(dist[x2][y2] == 1e9) dist[x2][y2] = -1;
    cout << dist[x2][y2];
}

signed main() {
	ios :: sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int t = 1;
	// cin >> t;
	for(int tt = 1; tt <= t; tt++) {
		solve();
	}
	return 0;
}