#include<bits/stdc++.h>

using namespace std;
#define ll long long
#define dbug printf("I am here\n");
const int maxn = 2e5+100;

void answer(int u){
    cout << "! " << u << endl;
    exit(0);
}
int dist(int u){
    cout << "d " << u << endl;
    int ret  ; cin >> ret; return ret;
}
int second(int u){
    cout << "s " << u << endl;
    int ret ; cin >> ret; return ret;
}
int n ,  lvl[maxn] , par[maxn];
vector < int > g[maxn];
int s[maxn] , vis[maxn] , xlvl;

void precalc(int u , int parent){
    par[u] = parent;
    if(parent) lvl[u] = lvl[parent] + 1;
    else lvl[u] = 0;
    for(auto v : g[u])if(v != parent){
        precalc(v , u);
    }
}

void calc(int u , int parent){
    s[u] = 1;
    for(auto v : g[u])if(v != parent and !vis[v]){
        calc(v , u);
        s[u] += s[v];
    }
}

int centroid(int u , int parent , int req){
    for(auto v : g[u])if(v != parent and !vis[v] and s[v] > req)
        return centroid(v , u , req);
    return u;
}

void solve(int u){
    calc(u , 0);
    if(s[u] == 1)answer(u);
    int ctr = centroid(u , 0 , s[u]/2) , to;
    if(abs(lvl[ctr]-xlvl) != dist(ctr)){
        to = par[ctr];
    }
    else to = second(ctr);
    vis[ctr] = 1;
    solve(to);
}

int main()
{
    cin >> n;
    for(int i = 1; i<n; i++){
        int u , v ; cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    precalc(1 , 0);
    {
        xlvl = dist(1);
        if(!xlvl) answer(1);
        for(int i = 1; i<=n; i++){
            if(lvl[i] > xlvl){
                vis[i] = 1;
            }
        }
    }
    vis[1] = 1;
    solve(second(1));
    return 0;

}

