#define _CRT_SECURE_NO_DEPRECATE
#include <ctime>
#include <float.h>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <cstring>
#include <cstdio>
using namespace std;
#define pi 3.1415926535897932384626433832795
#define pb push_back
#define inf 1000000000
#define L(s) (int)(s).size()
#define rp(i,n) for(int (i)=0;(i)<(n);++(i))
//#define C(a) memset((a),0,sizeof(a))
#define ll long long
#define all(c) (c).begin(), (c).end()
#define VI vector<int>
#define mp make_pair
#define pii pair<int,int>
#define pdd pair<double,double>
#define x first
#define y second
#define uint unsigned int
#define eps 1e-9
#define INF 1000000000000000001LL
struct E
{
	int tp;
	ll val;
	int num;
};
inline bool operator<(const E&a, const E&b)
{
	if (a.val!=b.val) return a.val<b.val;
	if (a.tp!=b.tp)
		return a.tp<b.tp;
	return a.num<b.num;
}
E ev[111111*2+(1<<19)];
ll lucky[1<<19];
ll lco[1<<19];
ll rco[1<<19];
int n,m,l;
ll k;
pair<ll,ll> lt,rt;
int lc,rc=0;
inline void add(pair<ll,ll> &p, ll x)
{
	p.x+=x;
	if (p.x>=INF)
	{
		p.y++;
		p.x-=INF;
	}
	if (p.x<0)
	{
		p.y--;
		p.x+=INF;
	}
}
inline pair<ll,ll> mulmod(ll a,ll b)
{
	pair<ll,ll> ans=mp(0,0);
	while(a)
	{
		if (a%2==1)
		{
			add(ans,b);
			a--;
		}
		a/=2;
		b*=2;
		if (b>=INF)
		{
			ans.y+=a;
			b-=INF;
		}
	}
	return ans;
}
int main()
{
	for(int len=1;len<=18;++len)
		for(int mask=0;mask<(1<<len);++mask)
		{
			ll val=0;
			rp(i,len)
				if (mask&(1<<i))
				val=val*10+4;
			else
				val=val*10+7;
			ev[m].tp=0;
			ev[m].val=val;
			ev[m].num=m;
			lucky[l++]=val;
			m++;
		}
	scanf("%d%I64d",&n,&k);
	rt.x=rt.y=0;
	lt.x=lt.y=0;
	ll mlen=INF;
	rp(i,n)
	{
		ll lft,rgt;
		scanf("%I64d%I64d",&lft,&rgt);
		ev[m].tp=-1;
		ev[m].val=lft;
		ev[m].num=m;
		m++;
		ev[m].tp=1;
		ev[m].val=rgt;
		ev[m].num=m;
		m++;
		rc++;
		add(rt,lft);
		mlen=min(mlen,rgt-lft+1);
	}
	sort(ev,ev+m);
	sort(lucky,lucky+l);
	rp(i,m)
	{
		if (ev[i].tp==-1)
		{
			rc--;
			add(rt,-ev[i].val);
		}
		else
			if (ev[i].tp==0)
			{
			//	cerr<<ev[i].val<<" "<<lc<<" "<<rc<<endl;
				pair<ll,ll> cl=mulmod(lc,ev[i].val);
				pair<ll,ll> cr=mulmod(rc,ev[i].val);
				pair<ll,ll> now1=mp(cl.x-lt.x,cl.y-lt.y);
				if (now1.x<0) {now1.x+=INF; now1.y--;};
				pair<ll,ll> now2=mp(rt.x-cr.x,rt.y-cr.y);
				if (now2.x<0) {now2.x+=INF; now2.y--;};
				pair<ll,ll> now=mp(now1.x+now2.x,now1.y+now2.y);
				if (now.x>=INF) {now.x-=INF; now.y++;}
				int pos=lower_bound(lucky,lucky+l,ev[i].val)-lucky;
				if (now.y==0 && now.x<=k)
				{
					lco[pos]=now1.x;
					rco[pos]=now2.x;
				}
				else
				{
					lco[pos]=k+1;
					rco[pos]=k+1;
				}
			}
			else
			{
				lc++;
				add(lt,ev[i].val);
			}
	}
//	rp(i,l) cerr<<lucky[i]<<" "<<lco[i]<<" "<<rco[i]<<endl;
	int pos=0;
	int ans=0;
	rp(i,l)
	{
		if (pos<i) pos=i;
		while(pos<l && lucky[pos]-lucky[i]+1<=mlen && rco[i]+lco[pos]<=k)
			pos++;
		ans=max(ans,pos-i);
	}
	cout<<ans<<endl;
}
