#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int sz = 1e5 + 10;
const int inf = 1 << 25;

int n, ans;
int ar[sz];
int br[sz];
int cr[sz];
int cnt[sz];
int pos[sz];
int pr[sz];
int cc[sz];
int koita;

int find_rep( int x ) {
        return pr[x] == x ? x : pr[x] = find_rep( pr[x] );
}

multiset < int > st;
set < int > sst;

void remove( int x ) {
        st.erase( st.find( x ) );
        if( st.find( x ) == st.end() ) {
                sst.erase( x );
        }
}

void add( int x ) {
        st.insert( x );
        sst.insert( x );
}


void uni( int x, int y ) {
        if( cr[x] == 0 ) return;
        if( cr[y] == 0 ) return;
        x = find_rep( x );
        y = find_rep( y );
//        cerr << x << " " << y << "\n";
        if( x != y ) {
                remove( cc[x] );
                remove( cc[y] );
                pr[x] = pr[y];
                cc[y] += cc[x];
                add( cc[y] );
        }
}

int main() {
#ifdef CLown1331
        freopen( "in.txt","r",stdin );
#endif /// CLown1331

        while( scanf( "%d", &n ) == 1 ) {

                for( int i=0; i<n; i++ ) {
                        scanf( "%d", &ar[i] );
                        br[i] = ar[i];
                }

                sort( br, br + n );

                memset( pos, 0, sizeof pos );

                memset( cnt, 0, sizeof cnt );

                memset( cr, 0, sizeof cr );

                memset( cc, 0, sizeof cc );

                for( int i=0; i<n; i++ ) {
                        ar[i] = lower_bound( br, br + n, ar[i] ) - br;
                        pos[ ar[i] ] = i;
                }

                ans = 0;

                koita = 0;

                int mx = 0;

                st.clear();

                sst.clear();

                for( int i=0; i<n; i++ ) {
                        cr[ pos[i] ] = 1;
                        pr[ pos[i] ] = pos[i];
                        cc[ pos[i] ] = 1;
                        add( 1 );
                        if( pos[i] - 1 >= 0 ) uni( pos[i], pos[i] - 1 );
                        if( pos[i] + 1 < n ) uni( pos[i], pos[i] + 1 );
                        if( sst.size() == 1 ) {
                                if( st.size() > mx ) {
                                        ans = i;
                                        mx = st.size();
                                }
                        }
//                        cerr << br[i] << ": " << st.size() << " " << sst.size() << " " << (*st.begin()) << "\n";
                }

                br[n] = br[n - 1] + 1;

                ans = br[ans];

//                if( ans == br[n] ) ans = 1;

                printf( "%d\n", ans + 1 );
        }

        return 0;
}
