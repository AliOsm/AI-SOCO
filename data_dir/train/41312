#include <bits/stdc++.h>
using namespace std;
typedef int ll;
const ll N = 1e5 + 5;
vector<ll> adj[N];
ll n,m,k,s,u,v,i,j;
ll type[N];
ll dist[105][N];
/*set< pair<ll,ll> >q;
set< pair<ll,ll> >::iterator itr;
void bfs(ll t, ll s){
    for(i = 0; i < adj[s].size() ; i++){
        ll v = adj[s][i];
        if(dist[t][s]+1 < dist[t][v]){
            itr = q.find(make_pair(dist[t][v],v));
            q.erase(itr);
            dist[t][v]=dist[t][s]+1;
            q.insert(make_pair(dist[t][v],v));
        }
    }

    if(q.size()==0)
        return;
    itr = q.begin();
    int nxt = itr->second;
    q.erase(itr);
    bfs(t,nxt);
}
*/

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin>>n>>m>>k>>s;

    for(i=0;i<n;i++)
        cin>>type[i];

    for(i = 0 ; i <  m ; i++){
        cin>>u>>v;
        u-=1;v-=1;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    for(ll t=1;t<=k;t++){
        queue<ll> q;
        for(i = 0 ; i< n ;i++){
            if(type[i]==t)
                dist[t][i]=0 , q.push(i);
            else
                dist[t][i]=1e6 ;
        }

        while(!q.empty()){
            ll src = q.front();
            q.pop();
            for(ll i = 0 ; i<adj[src].size();i++){
                ll v = adj[src][i];
                if(dist[t][v]>dist[t][src]+1)
                    dist[t][v] = dist[t][src] + 1 , q.push(v);
            }
        }
    }
    vector<ll> mn;
    for(i = 0 ; i<n;i++){
        for(j = 1 ; j <= k; j++)
            mn.push_back(dist[j][i]);
        sort(mn.begin() , mn.end());
        ll sum = 0;
        for(j = 0 ; j<s ; j++)
            sum+=mn[j];
        cout<<sum<<" ";
        mn.clear();
    }
}
