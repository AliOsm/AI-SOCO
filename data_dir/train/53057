#include<bits/stdc++.h>

using namespace std;

#define in(a,x,y) (a>=x && a<=y)
#define out(a,x,y) (!in(a,x,y))
#define sz(a) ((int)a.size())
#define repv(i,a) for(int i=0;i<sz(a);i++)
#define revv(i,a) for(int i=sz(a)-1;i>=0;i--)
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define rev(i,a,b) for(int i=a;i>=b;i--)
#define countbit(x) __builtin_popcount(x)
#define all(a) a.begin(),a.end()
#define pb(a) push_back(a)

//----------01234567890123456789
#define MOD 1000000007
#define lmt 60
#define MX (lmt + 20 )
#define inf 1000000000000000000LL
#define eps 1e-9
#define ll long long

struct Matrix
{
    ll m[MX][MX];

    int row,col;

    Matrix()    // default constructor
    {
        memset(m , 0  , sizeof m);
    }

    Matrix(ll m2[MX][MX],int row2,int col2)    // initialize with m2
    {
        row=row2;
        col=col2;
        rep(i,0,row-1)
            rep(j,0,col-1)
                m[i][j] = m2[i][j]%MOD;
    }

    Matrix operator * (const Matrix& obj) // multiplication
    {
        Matrix ret;

        ret.row=row;
        ret.col=obj.col;

        rep(k,0,col-1)
            rep(i,0,row-1)
                rep(j,0,obj.col-1)
                    ret.m[i][j] = (ret.m[i][j] + m[i][k]*obj.m[k][j])%MOD;

        return ret;
    }

    Matrix operator ^ (ll p) // exponentiation
    {
        Matrix ret, temp(this->m,this->row,this->col);  // init temp with 'this' matrix

        ret.row=row;
        ret.col=col;

        rep(i,0,temp.row-1) // initialize ret with identity matrix
            ret.m[i][i] = 1;

        while(p)
        {
            if(p&1) ret = ret*temp;

            temp = temp*temp;
            p >>= 1;
        }

        return ret;
    }
};

int main()
{
    long long int n , m , k ;
    char s[3];
    Matrix mat;
    mat.row = 60;
    mat.col = 60;


    cin>>n>>m>>k;
    rep(i,0,m-1){
        rep(j,0,m-1){
            mat.m[i][j] = 1;
        }
    }

    rep(i,1,k){
        scanf("%s",s);
        int fst , snd;
        if('a'<=s[0] && s[0] <= 'z') fst = s[0] - 'a';
        if('A'<=s[0] && s[0] <= 'Z') fst = 26 + s[0] - 'A';

        if('a'<=s[1] && s[1] <= 'z') snd = s[1] - 'a';
        if('A'<=s[1] && s[1] <= 'Z') snd = 26 + s[1] - 'A';

        mat.m[ fst ][ snd ] = 0 ;
    }

//    rep(i,0,m-1){
//        rep(j,0,k-1){
//            cout<<mat.m[i][j]<<" ";
//        }
//        cout<<endl;
//    }

//return 0;
    mat = mat ^ (n-1);

    long long ans =  0 ;
    rep(i,0,m-1){
        rep(j,0,m-1){
            ans = (ans + mat.m[i][j]);
        }
        if(ans >= MOD) ans %= MOD;
    }

    cout<<ans<<endl;

    return 0;
}
