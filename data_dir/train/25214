//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000005
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 1000005

int arr[maxn],table[maxn][25],n,tree[4*maxn],lazy[4*maxn],type[maxn],lft[maxn],rght[maxn],value[maxn],store_index[maxn];
map<int,int>assign;
vector<int>temp;
set<int>s;

void build_sparse()
{
	for(int i=1;i<=n;i++)
	table[i][0]=arr[i];
	for(int j=1;j<=20;j++)
	{
		for(int i=1;i<=n-(1<<j)+1;i++)
		table[i][j]=min(table[i][j-1],table[i+(1<<(j-1))][j-1]);
	}
}
inline int query_sparse(int l,int r)
{
	assert(l<=r);
	int len=r-l+1;
	int k=log2(len);
	return min(table[l][k],table[r+1-(1<<k)][k]);
}
int block(int x)
{
	if(x%n==0)
	return x/n;
	return x/n+1;
}
int helper(int l,int r)
{
	if(l>r)
	return inf;
	if(r-l+1>=n)
	return query_sparse(1,n);
	int bl=block(l);
	int br=block(r);
	int x,y;
	if(bl==br)
	{
		x=l%n;
		if(x==0)
		x=n;
		y=r%n;
		if(y==0)
		y=n;
		return query_sparse(x,y);
	}
	if(br==bl+1)
	{
		x=l%n;
		if(x==0)
		x=n;
		y=r%n;
		if(y==0)
		y=n;
		return min(query_sparse(x,n),query_sparse(1,y));
	}
	assert(false);
}
void build(int node,int a,int b)
{
	if(a==b)
	{
		tree[node]=arr[a];
		return;
	}
	int mid=(a+b)/2;
	build(2*node,a,mid);
	build(2*node+1,mid+1,b);
	tree[node]=min(tree[2*node],tree[2*node+1]);
}
void update(int node,int a,int b,int l,int r,int val)
{
	if(lazy[node]!=-1)
	{
		tree[node]=lazy[node];
		if(a!=b)
		{
			lazy[2*node]=lazy[node];
			lazy[2*node+1]=lazy[node];
		}
		lazy[node]=-1;
	}
	if(a>b || a>r || b<l)
	return;
	if(a>=l && b<=r)
	{
		tree[node]=val;
		if(a!=b)
		{
			lazy[2*node]=val;
			lazy[2*node+1]=val;
		}
		lazy[node]=-1;
		return;
	}
	int mid=(a+b)/2;
	update(2*node,a,mid,l,r,val);
	update(2*node+1,mid+1,b,l,r,val);
	tree[node]=min(tree[2*node],tree[2*node+1]);
}
int query(int node,int a,int b,int l,int r)
{
	if(lazy[node]!=-1)
	{
		tree[node]=lazy[node];
		if(a!=b)
		{
			lazy[2*node]=lazy[node];
			lazy[2*node+1]=lazy[node];
		}
		lazy[node]=-1;
	}
	if(a>b || a>r || b<l)
	return inf;
	if(a>=l && b<=r)
	return tree[node];
	int mid=(a+b)/2;
	return min(query(2*node,a,mid,l,r),query(2*node+1,mid+1,b,l,r));
}
int main()
{
	boost1;boost2;
	int i,j,x,y,k,q,l,r,val,ctr,last;
	cin>>n>>k;
	for(i=1;i<=n;i++)
	cin>>arr[i];
	build_sparse();
	cin>>q;
	for(i=1;i<=q;i++)
	{
		cin>>type[i];
		if(type[i]==1)
		{
			cin>>lft[i]>>rght[i]>>value[i];
			s.insert(lft[i]);
			s.insert(rght[i]);
		}
		else
		{
			cin>>lft[i]>>rght[i];
			s.insert(lft[i]);
			s.insert(rght[i]);
		}
	}
	ctr=0;
	for(auto it:s)
	{
		ctr++;
		assign[it]=ctr;
	}
	for(auto it:s)
	temp.pb(it);
	ctr=0;
	last=-1;
	for(i=0;i<temp.size();i++)
	{
		if(last!=-1 && last+1<=temp[i]-1)
		{
			ctr++;
			arr[ctr]=helper(last+1,temp[i]-1);
		}
		ctr++;
		arr[ctr]=helper(temp[i],temp[i]);
		store_index[assign[temp[i]]]=ctr;
		last=temp[i];
	}
	/*cout<<endl;
	for(i=1;i<=ctr;i++)
	cout<<arr[i]<<" ";
	cout<<endl;*/
	for(i=0;i<4*maxn;i++)
	lazy[i]=-1;
	build(1,1,ctr);
	for(i=1;i<=q;i++)
	{
		if(type[i]==1)
		{
			l=lft[i];
			r=rght[i];
			val=value[i];
			l=assign[l];
			r=assign[r];
			l=store_index[l];
			r=store_index[r];
			//cout<<l<<" "<<r<<endl;
			update(1,1,ctr,l,r,val);
		}
		else
		{
			l=lft[i];
			r=rght[i];
			l=assign[l];
			r=assign[r];
			l=store_index[l];
			r=store_index[r];
			//cout<<l<<" "<<r<<endl;
			cout<<query(1,1,ctr,l,r)<<endl;
		}
	}
	return 0;
}