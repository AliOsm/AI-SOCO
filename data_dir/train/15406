#include<bits/stdc++.h>
#include<ctime>
#include <stdlib.h>
#define time  ios_base::sync_with_stdio(false);cin.tie(NULL);
#define mm(o,k) memset(o,k,sizeof o)
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int oo=0x3f3f3f3f ;
ll mod=1e9+7;
double eps=1e-9;
double pi=acos(-1);
//bool composite[(int)1e7+1];
//bool isprime(ll value){int cnt=0;for (ll i=1; i*i<=value; i++){if (value%i==0){cnt++;if (i*i!=value){cnt++;}}}if (cnt==2){return true;}else{return false;}}
ll fastpower(ll b,ll p){double ans=1;while(p){if (p%2){ans=(ans*b);}b=b*b;p/=2;}return ans;}
//string  makeitstring(ll n){string ans;bool ch=0;if (n<0){n*=-1;ch=1;}if (n==0){ans="0";};while (n){ll mod=n%10;mod+=48;char m=mod;ans=m+ans;n/=10;}if (ch){ans='-'+ans;}return ans;}
//ll makeitnumber(string s){ll ans=0;for (ll i=0; i<s.size(); i++){if(s[i]!='-'){ll num=s[i]-'0';ans+=(num*fastpower(10,(ll)s.size()-i-1));}}if(s[0]=='-'){return ans*-1;}else {return ans;}}
//void sieve(){composite[0]=composite[1]=true;
//for (int i=2; i*i<=1e7; i++){for (int j=i*i; j<=1e7; j+=i){composite[j]=true;}}}
// gold bach (using induction)theory any number can be expressed as the sum of three prime numbers
// if num>2 and any even number greater than two can be expressed as the sum of two prime numbers
//bool valid(int x,int y,int n,int m){if (x>=0&&x<n&&y>=0&&y<m){return true;}else {return false;}}
//ll ny[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};
//ll ly[13]={0,31,29,31,30,31,30,31,31,30,31,30,31};
bool valid(int x,int y,int n,int m){return (x>=0&&y<m&&x<n&&y>=0);}
//ll ncr(ll n,ll r){ll ans=1;r=min(r,n-r);for (int i=1;i<=r;i++){ans*=(n-r+i);ans/=i;}return ans;}
//bool checksqrt(double f){return (sqrt(f)*sqrt(f)==f);}
//ll distance(ll x,ll y,ll x2,ll y2){ll dis=0;dis+=((x-x2)*(x-x2));dis+=((y-y2)*(y-y2));return dis;}
//ll lcm(ll a,ll b){return (a/__gcd(a,b))*b;}
//struct element{ll l,r,index;};
//bool cmp(element a,element b){if (a.l==b.l){return a.r>b.r;}else {return a.l<b.l ;}}
//bool isPowerOfTwo(ll x){return (x && !(x & (x - 1)));}
//bool checkpower(long double n){long double f=sqrt(n);return !(f-floor(f));}
//string multiply(string one,string two){string s;int cnt=0;if (one[0]=='-'){reverse(one.begin(),one.end());one.pop_back();reverse(one.begin(),one.end());cnt++;}if (two[0]=='-'){reverse(two.begin(),two.end());two.pop_back();reverse(two.begin(),two.end());cnt++;}int n1=one.size();int n2=two.size();vector<int>ans(n1+n2,0);int pos1=0;int pos2=0;for (int i=n1-1; i>=0; i--){int carry=0;int digit1=one[i]-'0';pos2=0;for (int j=n2-1; j>=0; j--){int digit2=two[j]-'0';int sum=(digit1*digit2)+ans[pos1+pos2]+carry;carry=sum/10;ans[pos1+pos2]=sum%10;pos2++;}if (carry>0){ans[pos1+pos2]+=carry;}pos1++;}bool check=0;for (int i=ans.size()-1; i>=0; i--){if (ans[i]){check=true;}if (check){s+=makeitstring(ans[i]);}}if(!check){s+='0';}if (cnt%2){s='-'+s;}return s;}
//string maxistring(string one,string two){if (one[0]=='-'&&two[0]!='-'){return two;}else if (one[0]!='-'&&two[0]=='-'){return one;}else{if (one.size()>two.size()&&one[0]!='-'){return one;}else if (one.size()<two.size()&&one[0]!='-'){return two;}else if (one.size()>two.size()&&one[0]=='-'){return two;}else if (one.size()<two.size()&&one[0]=='-'){return one;}else{for (int i=0; i<one.size(); i++){if (one[0]!='-'&&(one[i]-'0')>(two[i]-'0')){return one;}else if (one[0]!='-'&&(one[i]-'0')<(two[i]-'0')){return two;}else if (one[0]=='-'&&(one[i]-'0')>(two[i]-'0')){return two;}else if (one[0]=='-'&&(one[i]-'0')<(two[i]-'0')){return one;}}return one;}}}
//double eps =1e-9;
//void comparing_doubles(double f,double s){if (f-s>eps){cout<<">"<<endl;}else if (f-s<-eps){cout<<"<"<<endl;}else{// if (abs(f-s)<eps)cout<<"=";}}
//bool cmp(const pair<int,int> &a,const pair<int,int> &b){}
//ll gcd(ll a,ll b){while(b!=0){ll a2=a;a=b;b=a2%b;}return a;}
using namespace std;

int main()
{
 time;

 string s;

 cin>>s;
int cnt=0;
int cnt1=0;
int cnt2=0;
for( int i=0;i<s.size();i++)
 {
 if (s[i]=='1'){cnt1++;s[i]='3';}
 }
 for (int i=0;i<s.size();i++)
 {
     if (s[i]=='2'){break;}
     if (s[i]=='0'){cnt++;s[i]='3';}

 }
 while(cnt){cout<<'0';cnt--;}
 while(cnt1){cout<<'1';cnt1--;}
 for (int i=0;i<s.size();i++)
 {
     if (s[i]!='3'){cout<<s[i];}
 }

   return 0;

}
