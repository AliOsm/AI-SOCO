#include <bits/stdc++.h>
using namespace std;
const int Maxn = 1e5 + 10;
const int Sqrt = 350 + 10;
int Cnt[Sqrt][Maxn], Arr[Maxn], Div[Maxn], Mod[Maxn], n, q, t, l, r, k, ans;
deque<int> Dq[Sqrt];
void Preprocess();
void Input();
void Solve();
void Shift() {
	int res = Dq[Div[r]][Mod[r]];
	Dq[Div[l]].insert(Dq[Div[l]].begin() + Mod[l], res);
	Cnt[Div[l]][res] ++;
	int cur = Mod[r] + (Div[l] == Div[r]);
	Dq[Div[r]].erase(Dq[Div[r]].begin() + cur);
	Cnt[Div[r]][res] --;
	for (int b = Div[l]; b < Div[r]; b ++) {
		int v = Dq[b].back();
		Dq[b].pop_back();
		Dq[b + 1].push_front(v);
		Cnt[b][v] --;
		Cnt[b + 1][v] ++;
	}
}
void Get() {
	ans = 0;
	for (int b = Div[l]; b < Div[r]; b ++)
		ans += Cnt[b][k];
	for (int i = 0; i <= Mod[r]; i ++)
		ans += (Dq[Div[r]][i] == k);
	if (Mod[l]) {
		for (int i = 0; i < Mod[l]; i ++)
			ans -= (Dq[Div[l]][i] == k);
	}
}
int main () {
	Preprocess();
    Input();
    Solve();
}
void Preprocess() {
	iota(Mod, Mod + Sqrt, 0);
	for (int i = Sqrt; i < Maxn; i ++) {
		Div[i] = Div[i - Sqrt] + 1;
		Mod[i] = Mod[i - Sqrt];
	}
}
void Input() {
	cin >> n;
	for (int i = 0; i < n; i ++) {
		cin >> Arr[i];
		Cnt[Div[i]][Arr[i]] ++;
		Dq[Div[i]].push_back(Arr[i]);
	}
}
void Solve() {
	cin >> q;
	while (q --) {
		cin >> t >> l >> r;
		switch(t) {
			case 1 : 
				l = (l + ans - 1) % n;
				r = (r + ans - 1) % n;
				if (l > r)
					swap(l, r);
				Shift();
				break;
			case 2 :
				cin >> k;
				l = (l + ans - 1) % n;
				r = (r + ans - 1) % n;
				k = (k + ans - 1) % n;
				k ++;
				if (l > r)
					swap(l, r);
				Get();
				cout << ans << '\n';
		}
	}
}