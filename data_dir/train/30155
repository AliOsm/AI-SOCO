//void _(){
//    int n,m;
//    cin >> n >> m;
//    map<pii,int> cnt;
//    vpii edges(m);
//    cin >> edges;
//    for(auto &_ : edges){
//        if(_.X > _.Y)
//            swap(_.X,_.Y);
//        cnt[mp(_.X,_.Y)]++;
//    }
//    vpii found;
//    for(int i = 1; i <= n; ++i)
//        for(int j = i+1; j <= n; ++j){
//            if(cnt[mp(i,j)])
//                continue;
//            found.pb({i,j});
//            break;
//        }
//    if(sz(found)){
//        int a = found[0].X, b = found[0].Y;
//        print("YES");
//        vi other_nodes;
//        for(int i = 1; i <= n; ++i)
//            if(i != a && i != b)
//                other_nodes.pb(i);
//        vi ans(n);
//        ans[a-1] = 1;
//        ans[b-1] = 1;
//        for(int j = 0; j < sz(other_nodes); ++j)
//            ans[other_nodes[j]-1]=j+3;
//        ans[b-1] = 2;
//        print(ans);
//        ans[b-1] = 1;
//        print(ans);
//    }
//    else
//        print("NO");
//}
#include <map>
#include <iomanip>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define X first
#define Y second
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
template <typename F, typename S> static
istream& operator>>(istream& stream, pair<F, S>& t){
    return stream >> t.first >> t.second;
}
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T b, T e, istream& stream = cin){
    for(T it = b; it != e; ++it)
        stream >> *it;
    return stream;
}
T1 istream& operator>>(istream& stream, vector<T>& t){
    return read(all(t), stream);
}
T1 void print(T x, string end = "\n"){
    cout << x << end;
}
T1 ostream& print(T b, T e, string sep = " ", ostream& stream = cout){
    for(T it = b; it != e; ++it){
        stream << *it;
        if(it + 1 != e)
            stream << sep;
    }
    return stream;
}
T1 void print(vector<T> arr, string sep = " "){
    if(arr.empty()){
        return;
    }
    print(arr.begin(), arr.end(), sep);
    cout << '\n';
}
void _(){
    int n,m;
    cin >> n >> m;
    map<pii,int> cnt;
    vpii edges(m);
    cin >> edges;
    for(auto &_ : edges){
        if(_.X > _.Y)
            swap(_.X,_.Y);
        cnt[mp(_.X,_.Y)]++;
    }
    vpii found;
    for(int i = 1; i <= n; ++i)
        for(int j = i+1; j <= n; ++j){
            if(cnt[mp(i,j)])
                continue;
            found.pb({i,j});
            break;
        }
    if(sz(found)){
        int a = found[0].X, b = found[0].Y;
        print("YES");
        vi other_nodes;
        for(int i = 1; i <= n; ++i)
            if(i != a && i != b)
                other_nodes.pb(i);
        vi ans(n);
        ans[a-1] = 1;
        ans[b-1] = 1;
        for(int j = 0; j < sz(other_nodes); ++j)
            ans[other_nodes[j]-1]=j+3;
        ans[b-1] = 2;
        print(ans);
        ans[b-1] = 1;
        print(ans);
    }
    else
        print("NO");
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
    }
