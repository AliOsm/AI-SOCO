#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

const int N = 3e5 + 10;
char s[N];

int main() {
  scanf("%s", s);
  int n = strlen(s);
  vector<ii> a;
  for (int i = 0, j; i < n; i = j) {
    for (j = i + 1; j < n && s[j] == s[i]; ++j);
    a.emplace_back(s[i] - 'A', j - i);
  }
  int m = a.size();
  if (m % 2 == 0) {
    puts("0");
    return 0;
  }
  bool found = false;
  for (int i = 0; i < m / 2; ++i) {
    if (a[i].first != a[m - 1 - i].first) found = true;
    if (a[i].second + a[m - 1 - i].second < 3) found = true;
  }
  if (found || a[m / 2].second < 2) {
    puts("0");
    return 0;
  }
  printf("%d\n", a[m / 2].second + 1);
  return 0;
}
