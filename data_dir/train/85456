/*
LANG: C++
TASK: snail
*/
#include <iostream>
#include <fstream>
#include <algorithm>
#include <iomanip>
#include <random>
#include <ctime>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <climits>
#include <cstring>
#include <queue>
#include <deque>
#include <list>
#include <stack>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma GCC optimize("O3")
#define ld long double
#define ull unsigned long long
#define ll long long
#define pb push_back
#define pii pair<int, int>
#define pll pair<ll, ll>
#define all(x) x.begin(), x.end()
#define fast_io cout.tie(0), cin.tie(0), ios_base::sync_with_stdio(0)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
using namespace std;
ld eps = (ld)1 / 1e9;
ll sqr(ll a) { return a * a; };
ll gcd(ll a, ll b) { return !a ? b : gcd(b % a, a); }
ll binpow(ll a, ll b, ll mod) { return b ? (b % 2 ? (a * (sqr(binpow(a, b / 2, mod)) % mod)) % mod : sqr(binpow(a, b / 2, mod)) % mod) : 1; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ll a[300001], pr[300001], ans[300001], ind[300001];

int main()
{
    //freopen("snail.in", "r", stdin), freopen("snail.out", "w", stdout);
    fast_io;
    ll n, i, j, m, k, mnm, mj, mnmind, ans1 = 0;
    cin >> n >> m >> k;
    for (i = 1; i <= n; i++) cin >> a[i], pr[i] = pr[i - 1] + a[i];
    ind[1] = 0, ans[1] = pr[1] - k, ans1 = max(ans1, ans[1]);
    for (i = 2; i <= n; i++)
    {
        for (j = i - 1, mnm = 1e18; j >= 0 && i - j <= m; j--)
            if (pr[j] < mnm) mnm = pr[j], mnmind = j;
        if (i > m) mj = ceil((ld)(i - ind[i - m]) / m);
        if (i > m && mj * k + pr[ind[i - m]] < mnm + k)
        {
            ans[i] = pr[i] - mj * k - pr[ind[i - m]];
            ind[i] = ind[i - m];
        }
        else
        {
            ans[i] = pr[i] - mnm - k;
            ind[i] = mnmind;
        }
        //cout << i << ' ' << ans[i] << '\n';
        ans1 = max(ans1, ans[i]);
    }
    cout << ans1;
    return 0;
}