#include <iostream>
#include <stdio.h>
#include <cstdlib>
#include <string>
#include <memory.h>
#include <sstream>
#include <stack>
#include <deque>
#include <queue>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int, int> ii;
#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end()
#define present(c,x) ((c).find(x) != (c).end())
const int N = 100000 + 10;
const int M = 1000000007;
const double PI = atan(1) * 4;
/*
vvi v;
vector<set<int> >st;
int main(){
	#ifndef ONLINE_JUDGE
		freopen("input.txt", "r", stdin);
	#endif
	int n;
	cin>>n;
	st.resize(n);
	v.resize(n);
	for(int i=0; i<n; ++i){
		v[i].resize(n);
		for(int j=0; j<n; ++j){
			scanf("%d",&v[i][j])
			st[j].insert(i);
		}
	}
	for(int i=0; i<n; ++i){
		for(int j=0; j<n; ++j){

		}
	}
}
*/
int n;
vvi v;
bool vis[1001];
vector<pair<int,int> > toAdd, toRem;
set<pair<int,int> >st;
void dfs(int u, int p){
	vis[u]=true;
	for(int i=0; i<v[u].size(); ++i){
		int q = v[u][i];
		if(q==p)
			continue;
		if(!vis[q])
			dfs(q,u);
		else if(st.find(make_pair(min(u,q),max(u,q)))==st.end()){
			toRem.pb(make_pair(u+1,q+1));
			st.insert(make_pair(min(u,q), max(u,q)));
		}
	}
}
int main(){
	#ifndef ONLINE_JUDGE
		freopen("input.txt", "r", stdin);
	#endif
	cin>>n;
	v.resize(n);
	for(int a,b,i=0; i<n-1; ++i){
		scanf("%d%d",&a, &b);
		--a;--b;
		v[a].pb(b);
		v[b].pb(a);
	}
	vector<int> p;
	for(int i=0; i<n; ++i)
		if(!vis[i]){
			p.pb(i);
			dfs(i,-1);
		}
	for(int i=1; i<p.size(); ++i)
		toAdd.pb(make_pair(p[0]+1, p[i]+1));
	cout<<toAdd.size()<<endl;
	for(int i=0; i<toAdd.size(); ++i)
		printf("%d %d %d %d\n", toRem[i].first, toRem[i].second, toAdd[i].first, toAdd[i].second);
}