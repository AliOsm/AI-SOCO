
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const ll MOD = ;

int N, M;
int A[200100];
class segTree
{
  vector<int> lazy;
  int N;
  int add(int l, int r, int value, int a, int b, int n)
  {
    if (r < a || b < l) return 0;
    if (l <= a && b <= r) 
    {
      lazy[n] += value;
    }
    else
    {
      int m = (a + b) / 2;
      add(l, r, value, a, m, n*2);
      add(l, r, value, m+1, b, n*2+1);
    }
  }
  int q(int index, int a, int b, int n)
  {
    if (index < a || b < index) return 0;
    if (a < b)
    {
      int m = (a + b) / 2;
      if (index <= m)
        return lazy[n] + q(index, a, m, n*2);
      else 
        return lazy[n] + q(index, m+1, b, n*2+1);
    }
    else
    {
      return lazy[n];
    }
  }
  public:
  int add(int l, int r, int value)
  {
    add(l, r, value, 1, N, 1);
  }
  int q(int index)
  {
    return q(index, 1, N, 1);
  }
  int init(int n)
  {
    N = n;
    rep(i,3*n)
    {
      lazy.pb(0);
    }
  }
};
vector<int> adj[200100];
int curtime, tin[200100], tout[200100], P[200100];
int dfs(int u, int p)
{
  curtime ++;
  tin[u] = curtime;
  P[u] = p;
  rep(i,sz(adj[u]))
  {
    int v = adj[u][i];
    if (v == p) continue;
    dfs(v,u);
  }
  curtime ++;
  tout[u] = curtime;
}
segTree oddst, evenst;
int add(int nodenumber, int value)
{
  int n = tin[nodenumber];
  int m = tout[nodenumber];
  if (n&1)
  {
    oddst.add(n,m,value);
    rep(i,sz(adj[nodenumber]))
    {
      int v = adj[nodenumber][i];
      if (v == P[nodenumber]) continue;
      evenst.add(tin[v],tout[v],-value);
    }
  }
  else
  {
    evenst.add(n,m,value);
    rep(i,sz(adj[nodenumber]))
    {
      int v = adj[nodenumber][i];
      if (v == P[nodenumber]) continue;
      oddst.add(tin[v],tout[v],-value);
    }
  }
}
int get(int nodenumber)
{
  int n = tin[nodenumber];
  if (n&1) 
    return oddst.q(n);
  else
    return evenst.q(n);
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0);
  cin >> N >> M;
  rep1(i,N) cin >> A[i];
  rep1(i,N-1)
  {
    int u, v;
    cin >> u >> v;
    adj[u].pb(v);
    adj[v].pb(u);
  }
  dfs(1,-1);
  oddst.init(N*2+10);
  evenst.init(N*2+10);
//  dba(tin, 1, N);
//  dba(tout, 1, N);
  rep1(i,N)
  {
    int n = tin[i];
    if (n&1)
    {
      oddst.add(n,n,A[i]);
//      db(oddst.q(n));
    }
    else
    {
      evenst.add(n,n,A[i]);
//      db(evenst.q(n));
    }
  }
//  rep1(i,N)
//  db(get(i));
//  exit(0);
  rep1(mmm,M)
  {
    int t, x, value;
    cin >> t;
    if (t == 1)
    {
      cin >> x >> value;
      add(x, value);
    }
    if (t == 2)
    {
      cin >> x;
      cout << get(x) << endl;
    }
  }
}
