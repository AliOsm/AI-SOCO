#include <bits/stdc++.h>
using namespace std;
 
#define F first
#define S second
#define PB push_back
#define size(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define FR(i, a, b) for(int i = a; i < b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define debug(x) cerr<< #x << ": " << x << endl;
#define fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
 
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
 
//const int mod = 1000 * 1000 * 1000 + 7;
const int N = 1000 * 1000 + 10;
vector <int> vec[N], cev[N];
bool mark[N];
int cnt;
int cmp[N];
vector <int> topol;
 
void dfs(int v)
{
	mark[v] = true;
	for(int u: vec[v])
		if(!mark[u])
			dfs(u);
	topol.PB(v);
}
 
void sfd(int v)
{
	cmp[v] = cnt;
	mark[v] = true;
	for(int u: cev[v])
		if(!mark[u])
			sfd(u);
}
 
 
int main()
{
	fast;
	int n, k;
	cin>> n >> k;
	int b = 0;
	FR(j, 0, 2)
		FR(i, 0, n)
		{
			int a;
			cin>> a;
			a--;
			if(i)
			{
				vec[b].PB(a);
				cev[a].PB(b);
			}
			b = a;
		}
 
	FR(i, 0, n)
		if(!mark[i])
			dfs(i);
 
	memset(mark, false, sizeof(mark));
 
	ROF(i, size(topol) - 1, 0)
		if(!mark[topol[i]])
		{
			sfd(topol[i]);
			cnt++;
		}
 
	if(cnt < k)
	{
		cout<< "NO\n";
		return 0;
	}
 
	cout<< "YES\n";
	FR(i, 0, n)
		cout<< (char)(min(cmp[i], 25) + 'a');
	cout<< endl;
	return 0;
}
