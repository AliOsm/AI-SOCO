#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

#define rep(i,n) for(int i=0;i<(n);++i)
#define REP(i,n) for(int i=1;i<=(n);++i)
#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl
#define tr(it,c) for(auto it=(c).begin(); it!=(c).end(); ++it)
#define all(c) (c).begin(), (c).end()

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long int64;
typedef pair<int,int> pii;

const int maxn=100050;
vector<pii> buf[maxn];
pii edges[maxn];
bool isBridge[maxn]={};
bool vis[maxn]={};
int dfn[maxn], low[maxn];
int p[maxn];
int num=0;
int n,m,k;

int fd(int x) {return p[x]==x ? x : p[x]=fd(p[x]);}
inline void un(int a,int b) {p[fd(a)]=fd(b);}

void tarjan(int x)
{
	vis[x]=true;
	dfn[x]=low[x]=++num;
	tr(it,buf[x]) 
	{
		if(!vis[it->first])
		{
			p[it->first]=it->second;
			tarjan(it->first);
			low[x]=min(low[x],low[it->first]);
		}
		else if(p[x]!=it->second)
		{
			low[x]=min(low[x],dfn[it->first]);
		}
	}
	if(p[x]>=0 && low[x]==dfn[x]) isBridge[p[x]]=true;
}

namespace MM{
	VI buf[maxn];
	int d[maxn];
	pii query[maxn];
	vector<pii> relate[maxn];
	int ans[maxn];
	int k;
	//bool vis[maxn]={};

	void lca(int x,int pr)
	{
		if(pr==-1) d[x]=0;
		else d[x]=d[pr]+1;
		tr(it,relate[x])
		{
			if(vis[it->first]) ans[it->second]=d[x]+d[it->first]-2*d[fd(it->first)];
		}
		vis[x]=true;
		tr(it,buf[x]) if(*it!=pr) lca(*it,x);
		p[x]=pr;
	}
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin>>n>>m;
	rep(i,m)
	{
		int a,b;cin>>a>>b;--a;--b;
		buf[a].PB(MP(b,i)); buf[b].PB(MP(a,i));
		edges[i]=MP(a,b);
	}
	p[0]=-1;
	tarjan(0);
	rep(i,n) p[i]=i;
	rep(i,m) if(!isBridge[i]) un(edges[i].first, edges[i].second);
	rep(i,m) if(isBridge[i])
	{
		int a=fd(edges[i].first), b=fd(edges[i].second);
		MM::buf[a].PB(b); MM::buf[b].PB(a);
	}
	cin>>MM::k;
	rep(i,MM::k)
	{
		int a,b;cin>>a>>b;--a;--b;a=fd(a);b=fd(b);
		if(a==b) MM::ans[i]=0;
		else MM::relate[a].PB(MP(b,i)); MM::relate[b].PB(MP(a,i));
		MM::query[i]=MP(a,b);
	}
	int zero=fd(0);
	rep(i,n) p[i]=i;
	memset(vis,false,sizeof vis);
	MM::lca(zero,-1);
	rep(i,MM::k) cout<<MM::ans[i]<<endl;
	return 0;
}
