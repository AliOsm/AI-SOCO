#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) (((n%m) + m)%m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

ll maximum_power_of_p_in_fac(ll p, ll n)
{
	ll mu = 0;
	while (n / p > 0)
	{
		mu += n / p;
		n /= p;
	}
	return mu;
}

ll maximum_power_of_pq_in_fac(ll p, ll q, ll n)
{
	return maximum_power_of_p_in_fac(p, n) / q;
}

ll factorize(ll base, ll n)
{

	ll ret = LLONG_MAX;
	for (ll p = 2; p * p <= base; ++p)
	{
		if (base % p == 0)
		{ // if base is divisible by p, p is a prime factor
			ll q = 0;
			while (base % p == 0)
			{ // compute q and get rid of all the p factors
				q++;
				base /= p;
			}
			ret = min(ret, maximum_power_of_pq_in_fac(p, q, n));
			// do something with factor p^q
		}
		// proceed with next candidate divisor
	}

	if (base > 1)
	{
		ll p = base;
		ll q = 0;
		while (base % p == 0)
		{ // compute q and get rid of all the p factors
			q++;
			base /= p;
		}
		ret = min(ret, maximum_power_of_pq_in_fac(p, q, n));
	}

	return ret;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	ll n, b;
	cin >> n >> b;
	cout << factorize(b, n) << endl;
//	ll k = b;
//	ll mn = LLONG_MAX;
//	vector<ll> divs;
//	for (ll i = 2; i * i <= k; i++)
//	{
//		if (k % i == 0)
//		{
//			divs.push_back(i);
//			while (k % i == 0)
//				k /= i;
//		}
//	}
//
//	if (k != 1)
//		divs.push_back(k);
//
//	for (ll i : divs)
//	{
//		ll temp = n, curr = 0, c = 0;
////		cout << i << endl;
//		while (temp)
//		{
//			c++;
//			curr += (temp / i);
//			temp /= i;
//		}
//		if (i * i == b)
//			curr /= 2;
//		mn = min(mn, curr);
//	}
//	cout << mn << endl;

	return 0;
}
