#include <bits/stdc++.h>
using namespace std;

#define loop(i,n) for(int i = 0;i < int(n);i++)
#define rloop(i,n) for(int i = int(n);i >= 0;i--)
#define range(i,a,b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1,v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1,v2,v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1,v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1,v2,v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3)
#define endl "\n"

typedef vector<int> vi;
typedef vector<pair<int,int> > vii;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 3e5 + 5;
int f[N] , cnt[N];
bool par[N];
vi adj[N];
int n , leaves;

bool can(int u , int p){
    if(!par[u])return true;
    if(!f[u])return false;
    for(int nxt : adj[u]){
        if(nxt == p)continue;
        if(can(nxt,u))return true;
    }
    return false;
}

int solve(int u , int p){
    if(!par[u])return 0;
    int mx = -n , sum = 0;
    for(int nxt : adj[u]){
        if(nxt == p)continue;
        int cur = solve(nxt,u);
        mx = max(mx , cur);
        sum += cur;
    }
    int ret = f[u] ? mx : sum - cnt[u] + 1;
    //cout << u+1 << " " << ret << endl;
    return f[u] ? mx : sum - cnt[u] + 1;
}

int main()
{

#ifndef ONLINE_JUDGE
	//freopen("in.in", "r", stdin);
	//freopen("out.in", "w", stdout);
#endif
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin >> n;
    loop(i,n)cin >> f[i];
    int x;
    range(i,1,n-1){
        cin >> x;
        x--;
        par[x] = true;
        cnt[x]++;
        adj[x].pb(i);
        adj[i].pb(x);
    }

    loop(i,n)if(!par[i])leaves++;
    loop(i,n)if(cnt[i] == 1)f[i] = true;
    if(f[0] && can(0,-1)){
        cout << leaves << endl;
        return 0;
    }

    cout << leaves + solve(0,-1) << endl;



    return 0;
}
