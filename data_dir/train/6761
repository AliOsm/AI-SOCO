#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// ----------------------------------------------------------------------------------------------------------

int A[205], B[205], ID[205], Q, L, N;
ll DP[3005][205];
vector<int> E[205];

int main()
{
    cin >> Q >> L;
    f(i,1,Q)
    {
        int a,b;
        cin >> a >> b;
        A[++N] = a;
        B[N] = b;
        ID[N] = i;
        if(a != b)
        {
            A[++N] = b;
            B[N] = a;
            ID[N] = i;
        }
    }
    DP[0][0] = 1;
    f(i,1,N)
    {
        E[0].pb(i);
        f(j,1,N) if(ID[i] != ID[j] && B[j] == A[i]) E[i].pb(j);
    }
    f(l,0,L) f(i,0,N)
    {
        for(int nx : E[i])
        {
            int nl = l + B[nx];
            if(nl > L) continue;
            DP[nl][nx] += DP[l][i];
            DP[nl][nx] %= MOD;
        }
    }
    ll ans = 0;
    f(i,1,N) ans += DP[L][i];
    ans %= MOD;
    cout << ans;
}
