#include <bits/stdc++.h>
using namespace std;
#define int long long
typedef long long ll;

const int N = 2e5+10;
int n, m;
int amount[N], amountCopy[N];
pair<int, int> sales[N];//day, item type

bool possible(int day) {
    int cnt = 0;
    for(int i = 1; i <= n; ++i) {
        cnt += amount[i];
        amountCopy[i] = amount[i];
    }
    if(cnt > day) return false;
    if(2*cnt <= day) return true;
    int singles = 0;
    int prevDay = 0;
    int money = 0;
    vector<bool> seenSale(n+1, false);
    vector<bool> useSale(m+1, false);
    for(int i = m; i >= 1; --i) {
        if(sales[i].first > day) continue;
        if(seenSale[sales[i].second]) continue;
        seenSale[sales[i].second] = true;
        useSale[i] = true;
    }
    for(int i = 1; i <= m; ++i) {
        if(!useSale[i]) continue;
        const int saleDay = sales[i].first;
        const int type = sales[i].second;
        if(saleDay > day) break;
        money += saleDay-prevDay;
        prevDay = saleDay;
        int numSingles = min(money, amountCopy[type]);
        singles += numSingles;
        money -= numSingles;
        amountCopy[type] -= numSingles;
    }
    money += day-prevDay;
    return (singles + 2*(cnt-singles) <= day);
}

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m;
    int sum = 0;
    for(int i = 1; i <= n; ++i) {
        cin >> amount[i];
        sum += amount[i];
    }
    if(sum == 0) {
        cout << 0 << '\n';
        return 0;
    }
    for(int i = 1; i <= m; ++i) {
        cin >> sales[i].first >> sales[i].second;
    }
    sort(sales+1, sales+1+m);
    int start = 0, end = N*2, mid;
    while(start+1 < end) {
        mid = (start+end)/2;
        if(possible(mid)) end = mid;
        else start = mid;
    }
    cout << end << endl;
}