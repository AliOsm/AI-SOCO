#include <iostream>
#include <ctime>
#include <iomanip>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <cmath>
#include <set>
#include <unordered_set>
#include <unordered_map>
#include <chrono>
#include <stack>
#include <cassert>
#include <queue>
#include <deque>
#include <climits>
#include <cstring>
#include <random>
#include <bitset>
#include <functional>

using namespace std;

typedef long long ll;

const int mod = 998244353;

int add(int a, int b) {
    ll res = (ll)a + (ll)b;
    return res % mod;
}

int mul(int a, int b) {
    ll res = (ll)a * b;
    return res % mod;
}

vector<int> color;
vector<int> used;
vector<int> comp;
vector<vector<int>> g;
vector<vector<int>> dp;

bool cyc = false;

void dfs(int cur, int clr) {
    used[cur] = true;
    color[cur] = clr;
    for (auto t : g[cur]) {
        if (!used[t]) {
            dfs(t, clr ^ 1);
        } else {
            if (color[t] != -1 && color[t] == clr) {
                cyc = true;
            }
        }
    }
}

void dfs_dp(int cur) {
    used[cur] = 1;
    vector<int> sons;
    for (auto t : g[cur]) {
        if (!used[t]) {
            sons.push_back(t);
            dfs_dp(t);
        }
    }
    for (int j = 1; j < 4; j++) {
        int cnt = 1;
        for (auto t : sons) {
            int uu = 0;
            for (int i = 1; i < 4; i++) {
                if ((j + i) % 2 == 1) {
                    uu = add(uu, dp[t][i]);
                }
            }
            cnt = mul(cnt, uu);
        }
        dp[cur][j] = cnt;
    }
}

void solve() {
    int n, m;
    cin >> n >> m;
//
    cyc = false;
    g.clear();
    comp.clear();
    used.clear();
    color.clear();
    dp.clear();
//
    dp.resize(n, vector<int> (4));
    g.resize(n);
    comp.resize(n, -1);
    used.resize(n, false);
    color.resize(n, -1);
//
    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        a--;
        b--;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    
    vector<int> roots;
    for (int i = 0; i < n; i++) {
        if (!used[i]) {
            dfs(i, 0);
            roots.push_back(i);
        }
    }
    if (cyc) {
        cout << 0 << '\n';
        return;
    }
    used.clear();
    used.resize(n);
    int ans = 1;
    for (auto t : roots) {
        dfs_dp(t);
        int cur = 0;
        for (int i = 1; i < 4; i++) {
            cur = add(cur, dp[t][i]);
        }
        ans = mul(ans, cur);
    }
    cout << ans << '\n';
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    #ifdef LOCAL
    assert(freopen("input.txt", "r", stdin));
    assert(freopen("output.txt", "w", stdout));
    #endif
    
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
    
