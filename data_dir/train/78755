#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
#define abdelrahman010 ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
typedef long long ll;
using namespace std;
const int N = 1e5 + 5 , lg = 20;
int n , m;
int in[N] , out[N] , id = 1;
int lvl[N];
int sp[N][lg];
vector<int> g[N];
vector<int> roots;
vector<int> lvl_nodes[N];
void dfs(int node , int par)
{
	lvl[node] = lvl[par] + 1;
	in[node] = id++;
	lvl_nodes[lvl[node]].push_back(in[node]);
	sp[node][0] = par;
	for(int i = 1;i < lg;i++)
	{
		int tmp = sp[node][i - 1];
		sp[node][i] = sp[tmp][i - 1];
	}
	for(auto &i : g[node])
		if(i != node)
			dfs(i , node);
	out[node] = id;
}
int get(int node , int k)
{
	for(int i = 0;i < lg;i++)
		if((1 << i) & k)
			node = sp[node][i];
	return node;
}
int solve(int v , int p)
{
	int anc = get(v , p);
	if(!anc)
		return 0;
	int ans = upper_bound(lvl_nodes[lvl[v]].begin() , lvl_nodes[lvl[v]].end() , out[anc]) -
				lower_bound(lvl_nodes[lvl[v]].begin() , lvl_nodes[lvl[v]].end() , in[anc]);
	return ans - 1;
}
int main()
{
	abdelrahman010
	cin >> n;
	for(int i = 1;i <= n;i++)
	{
		int u;
		cin >> u;
		if(u == 0)
			roots.push_back(i);
		else
			g[u].push_back(i);
	}
	for(auto i : roots)
		dfs(i , 0);
	cin >> m;
	while(m--)
	{
		int v , p;
		cin >> v >> p;
		cout << solve(v , p) << ' ';
	}
	return 0;
}
