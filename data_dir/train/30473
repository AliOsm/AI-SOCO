#include <bits/stdc++.h>

using namespace std;

#define int long long 

const int N = 2e5 + 5 ; 

const int offset = N + 1 ; 

const int MAX = N + offset + 1 ; 

int bit[MAX] ;

int read(int i) {
	int ans = 0 ; i += offset ;
	while(i > 0) {
		ans += bit[i] ;
		i -= (i & (-i)) ;
	}
	return ans;
}

void update(int i) {
	i += offset ; 
	while(i < MAX) {
		bit[i] += 1 ; 
		i += (i & (-i)) ;
	}
	return ;
}

int n, arr[N] ;
int pref[N] ;

int brute(int m) {
    vector<pair<int,int> > subs ;
    int cnt = 0 ;
    for(int i = 1 ; i <= n ; ++i) {
        vector<int> temp ;
        for(int j = i ; j <= n ; ++j) {
            temp.push_back(arr[j]) ;
            sort(temp.begin(),temp.end());
            int idx = (temp.size() - 1)/2 ;
            if(temp[idx] >= m) {
                ++cnt ;
                subs.push_back({i,j});
            }
        }
    }
    //for(auto it : subs) cout << "(" << it.first << " " << it.second << ")," ;
    //cout << "\n" ;
    return cnt ;
}
int calc(int m) {
	for(int i = 1 ; i < n + 1 ; ++i) {
		int temp = (arr[i] >= m) ? 1 : -1 ; 
		pref[i] = pref[i - 1] + temp ;
		//cout << pref[i] << " " ;
	}
	//cout << "\n" ;
	memset(bit,0,sizeof(bit));
	update(0) ;
	int ans = 0 ;
	for(int i = 1 ; i <= n ; ++i) {
	    int got = read(pref[i] - 1);
	    //cout << got << " " ;
		ans = ans + got ;
		update(pref[i]);
	}
	//cout << "\n" ;
	//cout << brute(m) << "\n" ;
	
	return ans ;
}
int32_t main() {
	int m ; cin >> n >> m ; 
	for(int i = 1 ; i <= n ; ++i) cin >> arr[i] ;
	int ans = calc(m) ;
	//cout << ans << endl ;
	ans -= calc(m + 1) ; 	
	cout << ans << endl ;
}