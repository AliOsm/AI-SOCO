//void _(){
//    int n;
//    cin >> n;
//    vs grid(n);
//    cin >> grid;
//    for(auto &_ : grid) for(auto &c : _) c -= '0';
//    {
//        vi sum_row(n),sum_col(n);
//        for(int d = 0; d < n; ++d){
//            for(int i = 0; i <= d; ++i){
//                int j = n-1-d+i;
//                grid[i][j] ^= sum_row[i]^sum_col[j];
//                if(grid[i][j]){
//                    sum_row[i] ^= 1;
//                    sum_col[j] ^= 1;
//                }
//            }
//        }
//    }
//    {
//        vi sum_row(n),sum_col(n);
//        for(int d = 0; d < n; ++d){
//            for(int j = 0; j <= d; ++j){
//                int i = n-1-d+j;
//                grid[i][j] ^= sum_row[i]^sum_col[j];
//                if(grid[i][j]){
//                    sum_row[i] ^= 1;
//                    sum_col[j] ^= 1;
//                }
//            }
//        }
//    }
//    int ans = 0;
//    for(int i = 0; i < n; ++i)
//        for(int j = 0; j < n; ++j)
//            ans += grid[i][j];
//    print(ans);
//    for(auto &_ : grid) for(auto &c : _) c += '0';
//    //print(grid,"\n");
//}
#include <iomanip>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define all(v) (v).begin(), (v).end()
#define T1 template<typename T> static
using namespace std;
typedef vector<int> vi;
typedef vector<string> vs;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T b, T e, istream& stream = cin){
    for(T it = b; it != e; ++it)
        stream >> *it;
    return stream;
}
T1 istream& operator>>(istream& stream, vector<T>& t){
    return read(all(t), stream);
}
T1 void print(T x, string end = "\n"){
    cout << x << end;
}
void _(){
    int n;
    cin >> n;
    vs grid(n);
    cin >> grid;
    for(auto &_ : grid) for(auto &c : _) c -= '0';
    {
        vi sum_row(n),sum_col(n);
        for(int d = 0; d < n; ++d){
            for(int i = 0; i <= d; ++i){
                int j = n-1-d+i;
                grid[i][j] ^= sum_row[i]^sum_col[j];
                if(grid[i][j]){
                    sum_row[i] ^= 1;
                    sum_col[j] ^= 1;
                }
            }
        }
    }
    {
        vi sum_row(n),sum_col(n);
        for(int d = 0; d < n; ++d){
            for(int j = 0; j <= d; ++j){
                int i = n-1-d+j;
                grid[i][j] ^= sum_row[i]^sum_col[j];
                if(grid[i][j]){
                    sum_row[i] ^= 1;
                    sum_col[j] ^= 1;
                }
            }
        }
    }
    int ans = 0;
    for(int i = 0; i < n; ++i)
        for(int j = 0; j < n; ++j)
            ans += grid[i][j];
    print(ans);
    for(auto &_ : grid) for(auto &c : _) c += '0';
    //print(grid,"\n");
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
    }
