//IOI 2021
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define ff first
#define ss second

typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 5 * 100 * 10000 + 17;

int fen[MAXN], n, b[MAXN], a[MAXN], r[MAXN], c[MAXN], ans;
vector<int> all, tmp;

void compress() {
	map<int, int> mp;
	sort(all.begin(), all.end());
	all.resize(unique(all.begin(), all.end()) - all.begin());
	reverse(all.begin(), all.end());
	for (int i = 0; i < all.size(); i++)
		mp[all[i]] = i + 1;
	for (int i = 1; i <= n; i++)
		a[i] = mp[a[i]];
}

void upd(int x, int y) {
	for (; x <= n; x += x & (-x))
		fen[x] = max(fen[x], y);
}
int get(int x) {
	int res = 0;
	for (; x; x -= x & (-x))
		res = max(res, fen[x]);
	return res;
}

int main() {
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> b[i];
	for (int i = 1; i <= n; i++)
		cin >> a[i], all.pb(a[i]);
	for (int i = 1; i <= n; i++)
		cin >> r[i], c[i] = i;
	compress();
	sort(c + 1, c + n + 1, [](int i, int j) { return b[j] < b[i]; });
	b[0] = -1;
	for (int i = 1; i <= n; i++) {
		int ind = c[i];
		tmp.pb(ind);
		ans += (get(a[ind] - 1) > r[ind]);
		if (b[ind] != b[c[i + 1]]) {
			for (auto j : tmp)
				upd(a[j], r[j]);
			tmp.clear();
		}
	}
	cout << ans << endl;
	return 0;
}
