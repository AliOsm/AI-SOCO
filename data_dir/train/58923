#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 30;
const int MOD = 1e9 + 7;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

int main() {
  int cas;
  scanf("%d", &cas);
  while (cas--) {
    int n, m;
    scanf("%d%d", &n, &m);
    ++m;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
      scanf("%d", &a[i]);
    }
    int low = 0, high = 1e9;
    while (low != high) {
      int mid = (low + high) / 2;
      bool found = false;
      for (int i = 0; i + m <= n; ++i) {
        ii range = {a[i + m - 1] - mid, a[i] + mid};
        if (range.second >= range.first) found = true;
      }
      if (!found) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    int ret = -1;
    for (int i = 0; i + m <= n; ++i) {
      ii range = {a[i + m - 1] - high, a[i] + high};
      if (range.second >= range.first) {
        ret = range.first;
        break;
      }
    }
    printf("%d\n", ret);
  }
  return 0;
}
