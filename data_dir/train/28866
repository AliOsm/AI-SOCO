

#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>

using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)
#define all(a) a.begin(), a.end()
#define vi vector<int>
#define v(a) vector<a>

//typedef long double ld;
typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 2e18 + 7;

int ar[200500];
vector<int> tree[600500];
void build(int i, int tl, int tr) {
	if (tl == tr) {
		tree[i].pb(ar[tl]);
		return;
	}
	int mid = (tl + tr) >> 1;
	build(i * 2, tl, mid);
	build(i * 2 + 1, mid + 1, tr);
	tree[i].resize(tr - tl + 1);
	merge(all(tree[i * 2]), all(tree[i * 2 + 1]), tree[i].begin());
	return;
}
int get(int i, int tl, int tr, int l, int r, int x) {
	if (l > r)
		return 0;
	if (tl == l && tr == r) {
		int j = lower_bound(all(tree[i]), x) - tree[i].begin();
		return tree[i].size() - j;
	}
	int mid = (tl + tr) >> 1;
	return get(i * 2, tl, mid, l, min(mid, r), x) +
		get(i * 2 + 1, mid + 1, tr, max(mid + 1, l), r, x);
}


int main() {
	ios_base::sync_with_stdio(false);
	//cin.sync_with_stdio(false);
	cin.tie(0);
//	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("suftree.in", "r", stdin); freopen("suftree.out", "w", stdout);
	int n;
	cin >> n;
	forn(i, n)
		cin >> ar[i];
	build(1, 0, n - 1);
	ll ans = 0;
	forn(i, n) {
		int a = ar[i] - 1;
		a = min(a, n - 1);
		ans += get(1, 0, n - 1, 0, a, i + 1);
		if (i + 1 <= ar[i])
			--ans;
	}
	cout << ans / 2;
	
	
	return 0;
}