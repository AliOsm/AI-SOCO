#include <bits/stdc++.h>
using namespace std;
#define sc(a)           scanf("%d", &a)
#define sc2(a, b)       scanf("%d%d", &a, &b)
#define sc3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pr(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); puts("");}
vector<string> split(const string& s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c))
		v.emplace_back(x);
	return move(v);
}
void err(vector<string>::iterator it) {}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << a << ' ';
	err(++it, args...);
}
#define MP              make_pair
#define sz              size()
#define pb              push_back
#define mem(a, b)       memset((a), (b), sizeof(a))
#define x first
#define y second
typedef pair<int , int > pii;
typedef map<int , int > mii;
typedef vector<int > vi;
typedef long long LL;
static constexpr int inf = std::numeric_limits<int >::max();
const int M=100100;
vi A[M], B[M];
map<pii, int>ok;
int visited[M], group[M], level[M];
int disc[M], low[M], parent[M], n, Size[M];
void find_bridges(int u)
{
    static int time = 0;
    visited[u] = true;
    disc[u] = low[u] = ++time;
    int i, v;

    for (i=0; i<A[u].sz; i++)
    {
        v=A[u][i];
        if (!visited[v])
        {
            parent[v] = u;
            find_bridges(v);

            low[u]  = min(low[u], low[v]);
            if (low[v] > disc[u])
            {
                ok[MP(u, v)]=ok[MP(v, u)]=true;
            }
        }
        else if (v != parent[u]) low[u]  = min(low[u], disc[v]);
    }
}
void find_groups(int u, int p)
{
    visited[u]=true;
    group[u]=p;
    Size[p]++;

    for (int i=0; i<A[u].sz; i++)
    {
        int v=A[u][i];
        if (ok[MP(u, v)]||visited[v]) continue;
        find_groups(v, p);
    }
}
pii dfs(int u)
{
    int i, v, nsum=0, stsum=0;
    visited[u]=true;

    for (i=0; i<B[u].sz; i++)
    {
        v=B[u][i];
        if (visited[v]) continue;

        pii t=dfs(v);
        nsum+=t.first;
        stsum+=t.second;
    }

    return MP(nsum+1, stsum+Size[u]);
}
int main()
{
//    freopen("input.txt", "r", stdin);

    int m, i, j, k, x, y;

    sc2(n, m);
    while (m--)
    {
        sc2(i, j);
        A[i].pb(j);
        A[j].pb(i);
    }
    mem(Size, 0);
    ok.clear();
    mem(visited, false);
    mem(parent, -1);
    for (i=1; i<=n; i++) if (!visited[i]) find_bridges(i);

    mem(visited, 0);
    for (i=1; i<=n; i++) if (!visited[i]) find_groups(i, i);

    for (i=1; i<=n; i++)
        for (j=0; j<A[i].sz; j++)
            if (ok[MP(i, A[i][j])])
            {
                B[group[i]].pb(group[A[i][j]]);
            }

    mem(visited, false);
    int sum=0;
    for (i=1; i<=n; i++)
    {
        if (group[i]==i&&!visited[i])
        {
            pii t=dfs(i);
            if (t.first==t.second) sum++;
        }
    }

    cout<<sum<<endl;

return 0;
}