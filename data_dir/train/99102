#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <map>
#include <queue>
#include <set>
#include <iomanip>
#include <deque>
#include <cassert>
#include <ctime>
#include <cstring>
#include <cstdlib>
#include <chrono>
#include <ctime>
#include <random>
#include <stack>
#include <unordered_set>
#include <unordered_map>
#include <iterator>
#include <climits>
using namespace std;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
typedef long long ll;
typedef long double ld;
#define INF 2001001001
#define MOD 1000000007

int N,M;
vector<int>adj[100001];
int a[300001],b[300001];
vector<int>tree[100001];
vector<int> backUp[100001],backDown[100001];
int depth[100001];
bool vis[100001];
int dp[100001];
bool bridge=false;
map<pair<int,int>,bool>mp;

void dfs(int node, int par){
  vis[node]=true;
  for (int x:adj[node]){
    if (x==par) continue;
    if (vis[x]){
      if (depth[x]>depth[node])
	backDown[node].push_back(x);
      else{
	//cout<<"Back: "<<node<<' '<<x<<endl;
	backUp[node].push_back(x);
	mp[{node,x}]=true;
      }
    }
    else{
      depth[x]=depth[node]+1;
      //cout<<"Tree: "<<node<<' '<<x<<endl;
      dfs(x,node);
      mp[{node,x}]=true;
      dp[node]+=dp[x];
    }
  }
  dp[node]+=(int)backUp[node].size()-(int)backDown[node].size();
  //cout<<"DP: "<<node<<' '<<dp[node]<<endl;
  if (!dp[node] && node!=1)
    bridge=true;
}

int main()
{
  //ios_base::sync_with_stdio(0);cin.tie(0);
  //freopen (".in","r",stdin);
  //freopen (".out","w",stdout);
  cin>>N>>M;
  for (int i=0;i<M;i++){
    cin>>a[i]>>b[i];
    adj[a[i]].push_back(b[i]);
    adj[b[i]].push_back(a[i]);
  }
  dfs(1,1);
  if (bridge){
    cout<<0<<endl;
    return 0;
  }
  for (int i=0;i<M;i++){
    if (mp.count({a[i],b[i]}))
      cout<<a[i]<<' '<<b[i]<<endl;
    else
      cout<<b[i]<<' '<<a[i]<<endl;
  }
  return 0;
}
