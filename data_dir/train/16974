#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stdint.h>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef long double real;

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

using namespace std;

const int MAX_N = 103;
const int NA = -1;
const int MAX_C = 0x3F3F3F3F;

int p [MAX_N];
int q [MAX_N];
int r [MAX_N];
int s [MAX_N];
int t [MAX_N];
bool u [MAX_N];
bool v [MAX_N];
int k, n;

bool same (int * p, int * q, int n)
{
 for (int i = 0; i < n; i++)
  if (p[i] != q[i])
   return false;

 return true;
}

bool check (void)
{
 assert (k >= 1);
 if (u[0])
  return false;
 if (k == 1)
  return (u[1] || v[1]);
 assert (k >= 2);
 if (u[1] && v[1])
  return false;

 int i;
 for (i = 1; i <= k; i++)
  if (u[i])
   break;
 if ((i <= k) && ((i & 1) == (k & 1)))
  return true;
 for (i = 1; i <= k; i++)
  if (v[i])
   break;
 if ((i <= k) && ((i & 1) == (k & 1)))
  return true;

 return false;
}

int main (void)
{
 while (scanf (" %d %d", &n, &k) != EOF)
 {
  for (int i = 0; i < n; i++)
  {
   scanf (" %d", &r[i]);
   r[i]--;
  }
  for (int i = 0; i < n; i++)
  {
   scanf (" %d", &s[i]);
   s[i]--;
  }
  for (int i = 0; i < n; i++)
   t[r[i]] = i;

  for (int i = 0; i < n; i++)
   p[i] = i;
  u[0] = same (p, s, n);
  for (int j = 1; j < MAX_N; j++)
  {
   for (int i = 0; i < n; i++)
    q[i] = p[r[i]];
   for (int i = 0; i < n; i++)
    p[i] = q[i];
   u[j] = same (p, s, n);
  }

  for (int i = 0; i < n; i++)
   p[i] = i;
  v[0] = same (p, s, n);
  for (int j = 1; j < MAX_N; j++)
  {
   for (int i = 0; i < n; i++)
    q[i] = p[t[i]];
   for (int i = 0; i < n; i++)
    p[i] = q[i];
   v[j] = same (p, s, n);
  }

  printf ("%s\n", check () ? "YES" : "NO");
 }

 return 0;
}
