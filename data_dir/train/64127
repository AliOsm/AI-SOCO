#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <memory.h>
#include <cstring>
#include <stack>
#include <unordered_set>
#pragma comment (linker, "/STACK:667177216")
#define ll long long
#define ull unsigned long long
#define INF 1000000007;
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define mp make_pair
#define vI vector<int>
#define vvI vector<vector<int>>
#define vLL vector<LL>
#define vS vector<string>
#define fori(i, n) for(int (i)=0; (i)<n; (i)++)
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
#define forI(tmp) for(auto(it)=(tmp).begin();(it)!=(tmp).end();(it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%d", &(a))
#define scLL(a) scanf("%I64d", &(a))
#define mems(a, val) memset(a, val, sizeof(a))
typedef long long LL;
using namespace std;
const LL MOD = 1000000000 + 7;
const LL MAXN = 2000000 + 10;

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(0);
	cin.tie(0);

	int n, m;
	scanf("%d%d", &n, &m);
	vector<int> a(n);
	forn(i, 0, n) scanf("%d", &a[i]);

	bool erat[1000001];
	mems(erat, true);
	for (int i = 2; i * i <= 1000001; ++i) {
		if (erat[i]) {
			for (int j = i + i; j < 1000001; j += i) {
				erat[j] = false;
			}
		}
	}

	vector<int> primes;
	for (int i = 2; i < 1000001; ++i) {
		if (erat[i]) primes.push_back(i);
	}

	vector<int> d(1000001);
	d[1] = 1;
	forn(v, 2, d.size()) {
		int k = v;
		if (erat[k]) {
			d[k] = 2;
			continue;
		}


		d[v] = 1;

		for (int i = 0; primes[i] * primes[i] <= k; ++i) {
			int count = 0;		

			if (k % primes[i] == 0) {
				while (k % primes[i] == 0) {
					k /= primes[i];
					count++;
				}

				d[v] *= (count + 1);
			}

			if (k == 1) {
				break;
			}

			if (erat[k]) {
				d[v] *= 2;
				break;
			}
		}
	}

	set<int> alive;
	forn(i, 0, n)alive.insert(i);

	vector<LL> fw(n);
	forn(i, 0, n) {
		for (int j = i; j < n; j += (j + 1) & -(j + 1)) {
			fw[j] += a[i];
		}
	}


	forn(i, 0, m) {
		int type, l, r;
		scanf("%d%d%d", &type, &l, &r);
		l--;
		r--;
		if (type == 1) {
			vector<int> rem;
			auto cur = alive.lower_bound(l);
			while (cur != alive.end() && *cur <= r) {
				int index = *cur;

				for (int j = index; j < n; j += (j + 1) & -(j+1)) {
					fw[j] -= a[index];
				}

				a[index] = d[a[index]];

				for (int j = index; j < n; j += (j + 1) & -(j + 1)) {
					fw[j] += a[index];
				}

				if (a[index] <= 2) {
					rem.push_back(index);
				}

				cur++;
			}

			for (auto it : rem) {
				alive.erase(it);
			}
		}
		else {
			LL sum = 0;
			for (int j = r; j >= 0; j -= (j + 1) & -(j + 1)) {
				sum += fw[j];
			}

			for (int j = l - 1; j >= 0; j -= (j + 1) & -(j + 1)) {
				sum -= fw[j];
			}

			printf("%I64d\n", sum);
		}
	}

	return 0;
}