#include <bits/stdc++.h>

using namespace std;

const int N = 567;

int n, m;
set<int> graph[N];
vector<int> rgraph[N];
int color[N];

bool dfs(int v = 0, int c = 0) {
  color[v] = c;
  for (int to : rgraph[v]) {
    if (color[to] == -1) {
      if (!dfs(to, 1 - c)) return false;
    } else if (color[to] == color[v]) return false;
  }
  return true;
}

bool ok(int x, int y) {
  if ((int) rgraph[x].size() != (int) rgraph[y].size()) return false;
  sort(rgraph[x].begin(), rgraph[x].end());
  sort(rgraph[y].begin(), rgraph[y].end());
  for (int i = 0; i < (int) rgraph[x].size(); i++) {
    if (rgraph[x][i] != rgraph[y][i]) return false;
  }
  return true;
}

int main() {
  scanf("%d %d", &n, &m);
  for (int i = 0; i < m; i++) {
    int a, b; scanf("%d %d", &a, &b); a--, b--;
    graph[a].insert(b);
    graph[b].insert(a);
  }
  for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) {
    if (i == j) continue;
    if (!graph[i].count(j)) rgraph[i].push_back(j);
  }
  memset(color, -1, sizeof color);
  for (int i = 0; i < n; i++) {
    if (!rgraph[i].empty()) {
      if (color[i] == -1 && !dfs(i, 0)) {
        puts("No");
        return 0;
      }
    }
  }
  for (int i = 0; i < n; i++) for (int j = i + 1; j < n; j++) {
    if (color[i] == color[j]) {
      if (!ok(i, j)) {
        puts("No");
        return 0;
      }
    }
  }
  puts("Yes");
  for (int i = 0; i < n; i++) {
    if (color[i] == 0) putchar('a');
    else if (color[i] == 1) putchar('c');
    else if (color[i] == -1) putchar('b');
  }
  puts("");
  return 0;
}