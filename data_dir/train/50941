#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define fi first
#define se second
using namespace std;
#define sd(x) scanf("%d",&x)
#define pd(x) printf("%d",x)
#define sl(x) scanf("%lld",&x)
#define pl(x) printf("%lld",x)
#define mem(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define all(v) v.begin(),v.end()
#define N (int)(2e5+50)
int a[N],mark[N];
bool vis[N];
vector<int> G[N];
vector<pii> ans;
vector<pii> edges;
void add(int x,int y){
    if(x>y)swap(x,y);
    G[x].pb(y);
    G[y].pb(x);
    ans.pb(mp(x,y));
}
void dfs(int x,int p){
    if(vis[x])return;
    vis[x]=1;
    if(p!=0){
        edges.pb(mp(min(x,p),max(x,p)));
    }
    for(int i=0;i<G[x].size();i++){
        int to=G[x][i];
        if(to!=p){
            dfs(to,x);
        }
    }
}
void solve(){
    int n,m,k;
    sd(n);sd(m);sd(k);
    for(int i=1;i<=k;i++){
        sd(a[i]);
        mark[a[i]]=1;
    }
    if(n==k){
        printf("-1");
        return;
    }
    for(int i=1;i<=n;i++){
        for(int j=i+1;j<=n;j++){
            if(i==a[1]||j==a[2]||i==a[2]||j==a[1])continue;
            add(i,j);
        }
    }
    for(int i=1;i<=n;i++){
        if(!mark[i]){
            add(i,a[1]);
            add(i,a[2]);
        }
        else{
            if(i!=a[1]&&i!=a[2])
                add(i,a[1]);
        }
    }
    if(ans.size()<m){
        printf("-1");
        return;
    }
    for(int i=1;i<=n;i++){
        if(!mark[i]){
            dfs(i,0);
            sort(all(edges));
            break;
        }
    }
    for(int i=0;i<ans.size();i++){
        if(!binary_search(edges.begin(),edges.begin()+n-1,ans[i])&&edges.size()<m){
            edges.pb(ans[i]);
        }
    }
    for(int i=0;i<edges.size();i++){
        pd(edges[i].fi);printf(" ");pd(edges[i].se);
        printf("\n");
    }
}
int main(){
    //freopen("input.txt","r",stdin);
   //freopen("out.txt","w",stdout);
    int t=1;
    //sd(t);
   for(int i=1;i<=t;i++){
       //printf("Case #%d:\n",i);
       solve();
   }
   return 0;
}
