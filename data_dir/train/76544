
#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<LL, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
#define LL                  long long
#define ull                 unsigned long long
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%I64\n",n)
#define pfs(s)              printf("%s\n",s)
#define dist2D(x1,y1,x2,y2)         ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))
#define dist3D(x1,y1,z1,x2,y2,z2)   ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2))
#define print(x)            for(int i=0;i<x.size();i++) cout<<x[i]<<" ";
#define deb(x)              cout<<#x<<" "<<x<<endl

#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e18
#define EPS                 1e-8
#define Pi                  3.14
//int Set(int mask,int pos){return mask=mask | (1<<pos);}
//int reset(int mask,int pos){return mask= mask & ~(1<<pos);}
//bool check(int mask,int pos){return (bool)(mask & (1<<pos));}
LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}

#define N 5006

vector<int>v[N];
int no[N][N];
int par[N];
struct info
{
    int s,t,w;
};
int val[N];
bool cmp(info a,info b)
{
    return a.w<b.w;
}

void make_path(int a, int b)
{
    par[a]=a;
    queue<int>q,p;
    q.push(a);
    p.push(a);

    while(q.size())
    {
        int from=q.front();
        if(from==b) break;
        q.pop();
        int pr=p.front();
        p.pop();

        for(int now:v[from])
        {
            if(now==pr) continue;
            par[now]=from;
            q.push(now);
            p.push(from);
        }


    }
}

void assign_value(int a, int b, int c)
{
    while(par[b]!=b)
    {
        val[ no[b][par[b]] ]=c;
        b=par[b];
    }
}


bool ok(int a, int b, int c)
{
    int mn=INT_MAX;
    while(par[b]!=b)
    {
        mn=min(mn,val[ no[b][par[b]] ]);
        b=par[b];
    }

    if(mn==c) return true;
    else return false;
}

int main()
{
    int n;
    cin>>n;

    for(int i=1;i<n;i++)
    {
        int a,b;
        cin>>a>>b;
        v[a].pb(b);
        v[b].pb(a);
        no[a][b]=i;
        no[b][a]=i;
        val[i]=1e6;

    }
    int m;
    cin>>m;
    info arr[m];
    for(int i=0;i<m;i++)
    {
        cin>>arr[i].s>>arr[i].t>>arr[i].w;
    }
    sort(arr,arr+m,cmp);

    for(int i=0;i<m;i++)
    {
        int a=arr[i].s;
        int b=arr[i].t;
        int c=arr[i].w;
        make_path(a,b);
        assign_value(a,b,c);
    }

    for(int i=0;i<m;i++)
    {
        int a=arr[i].s;
        int b=arr[i].t;
        int c=arr[i].w;
        make_path(a,b);
        if(ok(a,b,c)==false)
        {
            cout<<"-1"<<"\n";
            return 0;
        }
    }
    for(int i=1;i<n;i++)
        cout<<val[i]<<" ";
    cout<<"\n";


   return 0;
}

/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
