#include<bits/stdc++.h>
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define LB lower_bound
#define UB upper_bound
#define SP fixed << setprecision(10)

using namespace std;

typedef long long ll;
typedef pair <int, int> pii;
typedef double DB;

const int N = 100100 , L = 18;
const int INF = 1000*1000*1000LL;

vector <pii> adj[N];
vector <int> vc;

int lazy[N*4], st[N] , en[N] , p[N][L] , ans[N] , dp[N] , ds[N] , dist[N] , a[N] , h[N] , rst[N] , start , n;
bool mark[N];
pii mi[2][N*4];

void shift(int ind){
	
	int a = lazy[ind];
	for(int z = 0 ; z < 2 ; z++){
	   mi[0][ind*2+z].F += a;
	   mi[1][ind*2+z].F += a;
	   lazy[ind*2+z] += a;
	}
	
	lazy[ind] = 0;
	return;
}

void add(int l , int r , int val , int b = 0 , int e = N , int ind = 1){

	if(l <= b && e <= r){
	   	lazy[ind] += val;
		mi[0][ind].F += val;
		mi[1][ind].F += val;
		return;
	}
	
	int mid = (b + e)/2;
	shift(ind);

	if(l < mid)
	   add(l , r , val , b , mid , ind*2);
	if(r > mid)
	   add(l , r , val , mid , e , ind*2 + 1);
	
	mi[0][ind] = (mi[0][ind*2].F == mi[0][ind*2 + 1].F ? mi[0][ind*2] : max(mi[0][ind*2] , mi[0][ind*2 + 1]));
	mi[1][ind] = max(mi[1][ind*2] , mi[1][ind*2 + 1]);

	return;
}

pii get(int sgn , int l , int r , int b = 0 , int e = N , int ind = 1){

	if(l <= b && e <= r)
	   return mi[sgn][ind];

	int mid = (b + e)/2;
	shift(ind);
	pii ret = {-INF -10 , -INF} , a;

	if(l < mid)
	   ret = get(sgn , l , r , b , mid , ind*2);
	if(r > mid){
	   pii a = get(sgn , l , r , mid , e , ind*2 + 1);
	   if(a.F > ret.F)
		  ret = a;
		else if(a.F == ret.F && sgn)
		   ret = a;
	}
	
	return ret;
}

int LCA(int u , int v){

	if(h[u] < h[v])
	   swap(u , v);
	
	int t = h[u] - h[v];
	for(int i = 0 ; i < L ; i++)
	   if(((1 << i) & t))
		  u = p[u][i];
	
	if(u == v)
	   return u;
	
	for(int i = L-1 ; i >= 0 ; i--)
	   if(p[u][i] != p[v][i])
		  u = p[u][i] , v = p[v][i];
	
	return p[u][0];
}

void DFS0(int v , int par , int w){   
	
	st[v] = start;
	rst[start++] = v;
	h[v] = h[par]+1;
	dist[v] = dist[par] + w;
	p[v][0] = par;

	for(int i = 1 ; i < L ; i++)
	   p[v][i] = p[p[v][i-1]][i-1];

	for(auto u : adj[v])
	   if(u.F != par)
		  DFS0(u.F , v , u.S);

	en[v] = start;
	add(st[v] , en[v] , w);
	return;
}

void DFS1(int v , int par , int w){	
	
	add(0 , n , w);
	add(st[v] , en[v] , -2*w);

	pii mns = get(0 , st[v] , en[v]) , mxs = get(1 , st[v] , en[v]);
	pii a = get(0 , 0 , st[v]) , b = get(0 , en[v] , n) , mnt = (a.F == b.F ? a : max(a , b));
	pii mxt = max(get(1 , 0 , st[v]) , get(1 ,en[v] , n));
	dp[v] = mns.F , ds[v] = mnt.F;
	
	if(!mark[v])
	   int tmp = 0;
	else if(mxs.F > mxt.F){
	   	int x = rst[mns.S] , y = rst[mxs.S] , z = LCA(x , y);
		ans[z]++;
		ans[v]--;
	}
	else if(mxt.F > mxs.F){
	   	pii x = get(1 , 0 , st[v]) , y = get(0 , st[v] , n);
		int z;
		if(x.F > y.F)
		   z = LCA(rst[x.S] , v);
		else if(y.F > x.F)
		   z = LCA(rst[y.S] , v);
		else{
			int xx = LCA(v , rst[x.S]) , yy = LCA(v , rst[y.S]);
			if(h[xx] < h[yy])
			   z = yy;
			else
			   z = xx;
		}
		
		if(z)
		   ans[p[z][0]]--;
		ans[v]++;

		if(ds[z] + dist[v] - dist[z] < mxt.F){
			int a = rst[get(0 , st[z] , en[z]).S] , b = rst[get(1 , st[z] , en[z]).S] , c = LCA(a , b);
			ans[c]++ , ans[z]--;
//			cerr << "!! " << v << " " << z << " " << c << endl;  
		}

	}

	for(auto u : adj[v])
		if(u.F != par)
		   DFS1(u.F , v , u.S);	

	add(0 , n , -w);
	add(st[v] , en[v] , 2*w);	

	return;
}

void DFS2(int v , int par){	
	for(auto u : adj[v])
	   if(u.F != par)
		  DFS2(u.F , v) , ans[v] += ans[u.F];
	
	return;
}

void build(int b = 0 , int e = N , int ind = 1){
	
	mi[0][ind] = {0 , b};
	mi[1][ind] = {0 , e-1};

	if(b+1 == e)
	   return;
	
	int mid = (b+e)/2;
	build(b , mid , ind*2);
	build(mid , e , ind*2 + 1);
	
	return;
}

int main(){

	ios_base::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);
	
	int m , u , v , w;
	cin >> n >> m;

	for(int i = 0 ; i < m ; i++){
	   cin >> a[i];
	   mark[--a[i]] = 1;
	}

	for(int i = 1 ; i < n ; i++){
	   	cin >> u >> v >> w;
		adj[--u].PB({--v , w});
		adj[v].PB({u , w});
	}
	
	build();
	DFS0(0 , 0 , 0);
	
	for(int i = 0 ; i < n ; i++)
	   if(!mark[i])
		   add(st[i] , st[i] + 1 , -INF);

	DFS1(0 , 0 , 0);
	DFS2(0 , 0);

	int mx(0) , cnt(0);
	for(int i = 0 ; i < n ; i++){
	   if(!mark[i]){
		   if(ans[i] > mx)
			  mx = ans[i] , cnt = 1;
		   else if(ans[i] == mx)
			  cnt++;
			
	   }

	}
	
	cout << mx << " " << cnt << endl;
	return 0;
}
