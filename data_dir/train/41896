#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x, y) memset(x, y, sizeof(x))
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1, class T2>inline void gmax(T1 &a, T2 b) { if (b > a)a = b; }
template <class T1, class T2>inline void gmin(T1 &a, T2 b) { if (b < a)a = b; }
const int N = 1e5 + 10, M = 0, Z = 1e9 + 7, inf = 0x3f3f3f3f;
template <class T1, class T2>inline void gadd(T1 &a, T2 b) { a = (a + b) % Z; }
int casenum, casei;
int n, m;
char a[N];
int cnt[N * 50];
int nxt[N * 50][5];
int dfn[N * 50], tim;
int ID;
void ins(char s[])
{
    int k = 0;
    for(int i = 0; s[i]; ++i)
    {
        int x = s[i] - 'a';
        if(!nxt[k][x])
        {
            nxt[k][x] = ++ID;
        }
        k = nxt[k][x];
    }
    ++cnt[k];
}
int check(int k, char s[])
{
    for(int i = 0; s[i]; ++i)
    {
        if(s[i] == '?')
        {
            int rtn = check(k, s + (i + 1));
            for(int x = 0; x < 5; ++x)if(nxt[k][x])
            {
                rtn += check(nxt[k][x], s + (i + 1));
            }
            return rtn;
        }

        int x = s[i] - 'a';
        if(!nxt[k][x])return 0;
        k = nxt[k][x];
    }
    if(dfn[k] == tim)return 0;
    dfn[k] = tim;
    return cnt[k];
}
char s[55];
int main()
{
	while(~scanf("%d%d", &n, &m))
	{
	    ID = 0;
	    MS(nxt, 0);
	    MS(cnt, 0);
        for(int i = 1; i <= n; ++i)
        {
            scanf("%s", s);
            ins(s);
        }
        for(int i = 1; i <= m; ++i)
        {
            ++tim;
            scanf("%s", s);
            printf("%d\n", check(0, s));
        }
	}

	return 0;
}
/*
【trick&&吐槽】


【题意】


【分析】


【时间复杂度&&优化】
3 3
a
aa
abc
??

*/

