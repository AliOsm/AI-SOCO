#include <bits/stdc++.h>
#define fr first
#define sc scanf
#define pf printf
#define se second
#define sq(x) x * x
#define ll unsigned long long
#define pb push_back
#define mk make_pair
#define ld long double
#define pr pair<ll,ll>
#define sz(s) int(s.size())
#define piip pair< pair<ll,ll>,ll >
#define fin(s) freopen( s, "r", stdin )
#define fout(s) freopen( s, "w", stdout )
#define TIME ios_base::sync_with_stdio(0)
using namespace std;

const ll INF = 1e18;
const ll N = 3e5 + 1;
const ll mod = 1e9 + 7;
const long double eps = 1E-7;

set<pr>s;
ll x, y, z;
char us[N];
vector<pr>g[N];
map<pr,int>mp;
ll n, m, h, d[N];
int main()
{
    TIME;
    cin >> n >> m >> h;
    for( int i = 1; i <= m; i ++ )
    {
        cin >> x >> y >> z;
        g[x].pb( { y, z } );
        g[y].pb( { x, z } );
        mp[{x, y}] = mp[{y, x}] = i;
    }
    for( int i = 2; i <= n; i ++ )
        d[i] = INF;
    s.insert( { 0, 1 } );
    while( !s.empty() )
    {
        x = s.begin()->se;
        s.erase( s.begin() );
        for( auto k: g[x] )
        {
            if( d[k.fr] > d[x] + k.se )
            {
                s.erase( { d[k.fr], k.fr } );
                d[k.fr] = d[x] + k.se;
                s.insert( { d[k.fr], k.fr } );
            }
        }
    }
    vector<int>V;
    queue<int>q;
    us[1] = 1;
    q.push( 1 );
    while( !q.empty() )
    {
        x = q.front(); q.pop();
        for( auto k: g[x] )
            if( !us[k.fr] && d[x] + k.se == d[k.fr] )
                V.pb( mp[{x, k.fr}] ), us[k.fr] = 1, q.push( k.fr );
    }
    while( V.size() > h )
        V.pop_back();
    cout << V.size() << endl;
    for( auto k: V )
        cout << k << " ";
}
