#include <bits/stdc++.h>
#define ll  long long
using namespace std;
const int N = 5002;
int mate[N << 1], a[N][N], c[N], p[N], l[N];
vector<int> g[N];
int vis[N << 1], id = 1;
bool dfs(int node) {
	for (int i = 0; i < g[node].size(); i++) {
		int v = g[node][i] + N;
		if (vis[v] == id) continue;
		vis[v] = id;
		if (mate[v] == -1 || dfs(mate[v])) {
			mate[node] = v, mate[v] = node;
			return 1;
		}
	}
	return 0;
}
int n, m;
void solve(int &indx) {
	while (indx < n) {
		id++;
		if (dfs(indx)) indx++;
		else break;
	}
}
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	memset(mate, -1, sizeof mate);
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> p[i];
	for (int i = 0; i < n; i++) {
		cin >> c[i];
		c[i]--;
		a[p[i]][c[i]]++;
	}
	int d;
	cin >> d;
	for (int i = 0; i < d; i++) {
		cin >> l[i];
		l[i]--;
		a[p[l[i]]][c[l[i]]]--;
	}
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (a[i][j]) g[i].push_back(j);
	vector<int> res(d);
	int ans = 0;
	for (int i = d - 1; i >= 0; i--) {
		solve(ans);
		res[i] = ans;
		int &x = a[p[l[i]]][c[l[i]]];
		x++;
//		cout << l[i] << ' ' << p[l[i]] << ' ' << c[l[i]] << endl;
		if (x == 1) g[p[l[i]]].push_back(c[l[i]]);
	}
	for (auto &a : res)
		cout << a << '\n';

	return 0;
}
