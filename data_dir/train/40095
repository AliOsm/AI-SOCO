#include "bits/stdc++.h"
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,avx,avx2")
#define MAXN 100009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(__typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second
#define my_little_dodge 46
#define debug(x)  cerr<< #x <<" = "<< x<<endl;
using namespace std;

typedef long long ll;
typedef pair<int,int> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
const int N=1e7+3;
int lp[N];
PII val[N],tmp,kerim;
ll ans=ll(1e17);
int vis[N];
vector<PII>v;
void save(int mul){
	if(umin(ans,(val[mul].ff*1LL*tmp.ff)/mul))
		kerim=mp(val[mul].ss,tmp.ss);
}
void tap(int x,int mul){
	if(x==v.size()){
		if(val[mul].ff!=INF)
			save(mul);
		return;
	}
	int pw=1;
	for(int i=0;i<=v[x].ss;i++){
		tap(x+1,mul*pw);
		pw*=v[x].ff;
	}
}
void upd(int x,int mul){
	if(x==v.size()){
		umin(val[mul],tmp);
		return;
	}
	int pw=1;
	for(int i=0;i<=v[x].ss;i++){
		upd(x+1,mul*pw);
		pw*=v[x].ff;
	}
}
void f(int x,int y){
    if(vis[x]){
        if(umin(ans,x*1LL))
            kerim=mp(vis[x],y);
        return;
    }
    vis[x]=y;
	tmp=mp(x,y);
	v.clear();
	int last=-1,cnt=0;
	while(x>1){
		if(last!=lp[x]){
			if(~last)
				v.pb(mp(last,cnt));	
			last=lp[x];cnt=1;
		}
		else
			cnt++;
		x/=lp[x];	
	}
	if(~last)
		v.pb(mp(last,cnt));
	tap(0,1);upd(0,1);	
}
int main(){
	val[1].ff=INF;
	for(int i=2;i<N;i++){
		val[i].ff=INF;
		if(lp[i])
			continue;
		for(int j=i;j<N;j+=i)
			if(!lp[j])
				lp[j]=i;	
	}
	int n;
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		int x;
		scanf("%d",&x);
		f(x,i);	
	}
	printf("%d %d\n",kerim.ff,kerim.ss);
	return 0;
}