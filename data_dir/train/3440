#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007LL
#define IN freopen("leapfrog_ch_.txt","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2

using namespace __gnu_pbds;
using namespace std ;

typedef tree< int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<i64,i64> pii;

#define maxn 1000005

pair<int,int> pr[maxn] ;
int L[maxn] , sum[maxn] , score[maxn] ;
set<int> st ;

int main()
{
    int n , k ;
    scanf("%d %d",&n,&k) ;

    for(int i=1 ; i<=k-1 ; i++) score[i] = 0;

    for(int i=k ; i<=n ; i++)
    {
        score[i] = score[i-1] ;
        score[i] += ( 1 + (i-k)/(k-1) ) ;
        score[i] %=mod ;
    }

    for(int i=1 ; i<=n ; i++)
    {
        scanf("%d",&pr[i].xx) ;
        pr[i].yy = i ;
    }

    st.insert(n) ;
    L[n] = 1 ;

    sort(pr+1,pr+n+1) ;

    int ans = 0 ;

    for(int i=n ; i>=1 ; i--)
    {
        int idx = pr[i].yy , val = pr[i].xx ;
        int id2 = *st.lower_bound(idx) ;
        int id1 = L[id2] ;

        if( idx!=id2 ) L[id2] = idx+1 ;
        else st.erase( st.find( idx ) ) ;

        if( idx!=id1 )
        {
            L[idx-1] = id1 ;
            st.insert( idx-1 ) ;
        }

        int len = id2-id1+1 ;

        int ret = ( 1LL*score[ id2-id1+1 ] - score[id2-idx] - score[idx-id1])%mod ;

      //  printf("%d %d: %d\n",idx,val,ret) ;

        ans = ( ans + 1LL*ret*val )%mod ;
    }

    printf("%d\n",ans) ;

    return 0 ;
}
