#include <bits/stdc++.h>
using namespace std;

/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______
 * |\  \|\  \  |\  ___ \  |\  ___ \
 * \ \  \/  /|_\ \   __/| \ \   __/|
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

const int mxN = 100010;
const int mxM = 450;

int num[mxN];
int dp[mxM][mxN];
int cur = 1;

long long fact[mxN],inv[mxN], _25[mxN], _26[mxN];

long long pow_mod(long long base, long long power) {
	long long res = 1;
	while(power) {
		if(power&1) res = res * base % mod;
		base = base * base % mod;
		power >>= 1;
	}
	return res;
}

long long ncr(long long N,long long r) {
	if(r > N) return 0;
	return (fact[N] * inv[r] % mod) * inv[N-r] % mod;
}

void solve(int L) {
	if(num[L] != 0) return;
	num[L] = cur++;
	dp[num[L]][L] = 1;
	long long cur = 1;
	for(int i = L+1;i < mxN;i++) {
		cur = cur * _26[1] % mod;
		cur = (cur+ (ncr(i-1,L-1) * _25[i-L] % mod));
		if(cur >= mod) cur -= mod;
		dp[num[L]][i] = (int) cur;
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	fact[0] = fact[1] = _25[0] = _26[0] = inv[1] = inv[0] = 1;
	_25[1] = 25;
	_26[1] = 26;
	for(int i = 2;i < mxN;i++) fact[i] = i * fact[i-1] % mod, _25[i] = _25[i-1] * 25 % mod, _26[i] = _26[i-1] * 26 % mod, inv[i] = pow_mod(fact[i],mod-2);
	
	int M,t,N,L;
	string s;
	cin>>M>>s;
	L = (int)s.size();
	solve(L);
	while(M--) {
		cin>>t;
		if(t == 1) {
			cin>>s;
			L = (int)s.size();
			solve(L);
		} else {
			cin>>N;
			cout<<dp[num[L]][N]<<'\n';
		}
	}
	return 0;
}
