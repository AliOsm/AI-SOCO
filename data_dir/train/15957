#include<bits/stdc++.h>

#define x first
#define y second
#define y0 hi1
#define y1 hi2
#define ll long long
#define mp make_pair
#define pb push_back
#define sqr(a) (a)*(a)
#define ld long double
#define all(a) (a).begin(), (a).end()

using namespace std;

const int N = 100005;
const int inf = 2000000000;

#define int ll

int n, m, st[N];
vector<pair<int, int> > g[N];

set<pair<int, int> > s;

void dfs(int v, int x){
}

bool can(int x){
    s.clear();
    memset(st, 0, sizeof(st));
    for(int i = 1; i <= n; i++){
        for(int j = 0; j < g[i].size(); j++){
            if(g[i][j].y <= x){
                st[g[i][j].x]++;
            }
        }
    }
    for(int i = 1; i <= n; i++){
        s.insert(pair<int, int>(st[i], i));
    }
    while(true){
        pair<int, int> v = *s.begin();
        int val = v.x;
        int node = v.y;

        if(s.size() == 1){
            return(val == 0);
        }

        s.erase(s.begin());
        if(val != 0){
            return false;
        }

        pair<int, int> nxt = *s.begin();
        if(nxt.x == 0){
            return false;
        }


        for(int i = 0; i < g[node].size(); i++){
            int to = g[node][i].x;
            if(g[node][i].y <= x){
                pair<int, int> tmp(st[to], to);
                s.erase(tmp);

                st[to]--;
                tmp.x--;

                s.insert(tmp);
            }
        }
    }
}

main(){
    cin.tie(0);
    ios_base::sync_with_stdio(0);
    cin >> n >> m;
    for(int i = 1; i <= m; i++){
        int x, y;
        cin >> x >> y;
        g[x].pb(mp(y, i));
    }

    int l = 1;
    int r = m;
    while(r - l > 1){
        int mid = (l + r) / 2;
        if(can(mid)) r = mid;
                else l = mid + 1;
    }

    if(can(l)){
        cout << l;
    } else
    if(can(r)){
        cout << r;
    } else {
        cout << -1;
    }
}
