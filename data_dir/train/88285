#include <bits/stdc++.h>
using namespace std;
//#define ll long long int
#define m1 make_pair   
#define ll long long int


struct s
{
    int u,v,w;
    
};
bool compare(s s1,s s2)
{
    if(s1.w<s2.w)
    return 1;
    else
    return 0;
}
//ll mn=10000000000000;
int compute(int x)
{
    int l=1,u=10000;int ans=1;int m;
    while(u>=l)
    {
        m=(l+u)/2;
        if((((m)*(m+1))/2)<=x)
        {
            ans=m;
            l=m+1;
        }
        else
        u=m-1;
    }
    return ans;
}

void dfs(vector<int> adj[],int u,bool visited[],ll dp[],ll dp2[],ll mx[])
{
    visited[u]=1;
    mx[u]=-10000000000000;
    for(int i=0;i<adj[u].size();i++)
    {
       if(!visited[adj[u][i]])
       {
        dfs(adj,adj[u][i],visited,dp,dp2,mx);
        dp[u]+=dp[adj[u][i]];
        mx[u]=max(mx[u],mx[adj[u][i]]);
       }
    }
    mx[u]=max(mx[u],dp[u]);
}
ll ans=0,ans1=-1000000000000;
void dfs1(vector<int> adj[],int u,bool visited[],ll dp[],ll dp2[],ll mx[])
{
    visited[u]=1;int cnt=0;ll mx1=-100000000000000000,mx2=-10000000000000000;
    for(int i=0;i<adj[u].size();i++)
    {
        if(!visited[adj[u][i]])
        {
            cnt++;
            if(mx[adj[u][i]]>mx1)
            {
                mx2=mx1;
                mx1=mx[adj[u][i]];
            }
            else if(mx[adj[u][i]]>mx2)
            {
                mx2=mx[adj[u][i]];
            }
           // dfs1(adj,adj[u][i],visited,dp,dp2,mx);
        }
        
        
    }
    ans1=max(ans1,mx1+mx2);
    for(int i=0;i<adj[u].size();i++)
    if(!visited[adj[u][i]])
    dfs1(adj,adj[u][i],visited,dp,dp2,mx);
    if(cnt>=2)
    ans=1;
}
int main()
{
    int n;
    cin>>n;
    ll a[n+1];
    for(int i=1;i<=n;i++)
    cin>>a[i];
    vector<int> adj[n+1];int u,v;
    for(int i=0;i<n-1;i++)
    {
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    ll dp[n+1]={0};
    for(int j=1;j<=n;j++)
    dp[j]=a[j];
    bool visited[n+1]={0};ll dp2[n+1];ll mx[n+1];
  dfs(adj,1,visited,dp,dp2,mx);
  for(int i=1;i<=n;i++)
  visited[i]=0;
  dfs1(adj,1,visited,dp,dp2,mx);
  if(!ans)
  cout<<"Impossible";
  else
  cout<<ans1<<endl;
  //cout<<mx1<<" "<<mx2;
  //  cout<<dp[s];
}