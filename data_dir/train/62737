#include <bits/stdc++.h>
using namespace std;

const int md = (int) 1e9 + 7;


void add(long long &x, long long y) {
    x += y;
    x %= md;
}

long long Add(long long x, long long y) {
    return (x + y)  % md;
}

long long mul(long long x, long long y) {
    return x * y % md;
}

long long sub(long long x, long long y) {
    x -= y;
    return (x%md+md)%md;
}

int pow_mod(int a, int b) {
    int ret = 1;
    while (b) {
        if (b & 1) {
            ret = 1LL * ret * a % md;
        }
        a = 1LL * a * a % md;
        b >>= 1;
    }
    return ret;
}

//odd 
long long get0(long long start, long long cnt) {
    long long first = sub(start * 2 % md, 1);
    long long last = sub( (start % md + cnt%md - 1) % md * 2 % md, 1);
    long long ret = Add(first, last)  * (cnt % md) % md * pow_mod(2, md-2) % md;
    return ret;
}

//even
long long get1(long long start, long long cnt) {
    long long first = start * 2 % md;
    long long last = (start%md + cnt%md - 1) % md * 2 % md;
    long long ret= Add(first, last)  * (cnt % md) % md * pow_mod(2, md-2) % md;
    return ret;
}


long long solve(long long n) {
    if (n == 0) return 0;
    long long now = 1;
    long long cnt = 0;
    int step = 1;
    long long pt0 = 1;
    long long pt1 = 1;

    long long sum = 0;
    while (cnt + now < n) {
        if (step & 1) {
            add(sum, get0(pt0, now));
            pt0 += now;
        } else {
            add(sum, get1(pt1, now));
            pt1 += now;
        }
        cnt += now;
        now <<= 1;
        step++;
    //    cout << sum << endl;
    }

    long long left = n - cnt;
    //cout << "left:" <<left <<" "<<step <<  endl;
    if (step & 1) {
        add(sum, get0(pt0, left));
    } else {
        add(sum, get1(pt1, left));
    }

    //cout << sum <<endl;
    return sum;
}
int main() {
    long long l, r;
    cin >> l >> r;
    cout << ((solve(r) - solve(l - 1)) % md+ md) % md << endl;
    return 0;
}
