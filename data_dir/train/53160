// --------------------<optimizations>--------------------
#pragma GCC optimize("O3")

//(UNCOMMENT WHEN HAVING LOTS OF RECURSIONS)\
#pragma comment(linker, "/stack:200000000")
//(UNCOMMENT WHEN TRYING TO BRUTEFORCE WITH A LOT OF LOOPS)\
#pragma GCC optimize("unroll-loops")

// -------------------</optimizations>--------------------
#include<bits/stdc++.h>
using namespace std;
//#define int long long
//#define d long double
#define pii pair<int,int>
#define pb push_back
#define cases int tc;cin>>tc;while(tc--)
#define N 10
#define M 103
#define inf 1e9
#define Arena ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
//int mod=1e9+7;
int n,k;

string patience(int i, string s, vector<int> g[N])
{
    vector<int> v, rv;
    int x=i-1, y=i+1, j;
    while(x>=0 and y<=9)
    {   
        if(g[i].size()+v.size()+rv.size()>=k)
        {
            sort(rv.begin(), rv.end());
            j=0;
            while(g[i].size()<k and j<rv.size())
                g[i].pb(rv[j++]), s[rv[j-1]]=(char)('0'+i);
            sort(v.begin(),v.end(), greater<int>());
            j=0;
            while(g[i].size()<k)
                g[i].pb(v[j++]), s[v[j-1]]=(char)('0'+i);
            return s;
        }  
        for(auto it:v)
            g[i].pb(it), s[it]=(char)('0'+i);
        for(auto it:rv)
            g[i].pb(it), s[it]=(char)('0'+i);

        v=g[x];
        rv=g[y];
        --x, ++y;
    }
    if(g[i].size()+v.size()+rv.size()>=k)
    {
        sort(rv.begin(), rv.end());
        j=0;
        while(g[i].size()<k and j<rv.size())
            g[i].pb(rv[j++]), s[rv[j-1]]=(char)('0'+i);
        sort(v.begin(),v.end(), greater<int>());
        j=0;
        while(g[i].size()<k)
            g[i].pb(v[j++]), s[v[j-1]]=(char)('0'+i);
        return s;
    }  
    for(auto it:v)
        g[i].pb(it), s[it]=(char)('0'+i);
    for(auto it:rv)
        g[i].pb(it), s[it]=(char)('0'+i);
    v.clear();
    rv.clear();

    while(y<=9)
    {
        if(g[i].size()+rv.size()>=k)
        {
            sort(rv.begin(),rv.end());
            j=0;
            while(g[i].size()<k)
                g[i].pb(rv[j++]), s[rv[j-1]]=(char)('0'+i);
            return s;
        }   
        for(auto it:rv)
            g[i].pb(it), s[it]=(char)('0'+i);
        
        rv=g[y];
        ++y;
    }   
    if(g[i].size()+rv.size()>=k)
    {
        sort(rv.begin(),rv.end());
        j=0;
        while(g[i].size()<k)
            g[i].pb(rv[j++]), s[rv[j-1]]=(char)('0'+i);
        return s;
    } 
    
    while(x>=0)
    {
        if(g[i].size()+v.size()>=k)
        {
            sort(v.begin(),v.end(), greater<int>());
            j=0;
            while(g[i].size()<k)
                g[i].pb(v[j++]), s[v[j-1]]=(char)('0'+i);
            return s;
        }  
        for(auto it:v)
            g[i].pb(it), s[it]=(char)('0'+i);
        
        v=g[x];
        --x;
    } 
    if(g[i].size()+v.size()>=k)
    {
        sort(v.begin(),v.end(), greater<int>());
        j=0;
        while(g[i].size()<k)
            g[i].pb(v[j++]), s[v[j-1]]=(char)('0'+i);
        return s;
    }  
}   

signed main()
{
    Arena
    
    vector<int> g[N], g2[N];
    cin>>n>>k;
    string s;
    cin>>s;
    int i,j,x,y,co,cnt,mi=inf,minn;
    vector<int> ind;
    for(i=0;i<n;++i)
        g[s[i]-'0'].pb(i);
    
    for(i=0;i<=9;++i)
    {
        if(g[i].size()<k)
        {
            x=i-1, y=i+1;
            co=0;
            cnt=g[i].size();
            while(x>=0 and y<=9)
            {
                minn=min(k-cnt,(int)g[x].size());
                cnt+=minn, co+=(minn*(i-x));
                
                minn=min(k-cnt,(int)g[y].size());
                cnt+=minn, co+=(minn*(y-i));
                --x, ++y;
            }   
            while(x>=0)
            {
                minn=min(k-cnt,(int)g[x].size());
                cnt+=minn, co+=(minn*(i-x));
                --x;
            }
            while(y<=9)
            {
                minn=min(k-cnt,(int)g[y].size());
                cnt+=minn, co+=(minn*(y-i));
                ++y;
            }  
            if(co<mi)
                mi=co, ind.clear(), ind.pb(i);
            else if(co==mi)
                ind.pb(i);
        }   
        else
            return cout<<"0\n"<<s, 0;
    }   
    
    string ans("z");
    for(i=0;i<N;++i)
        g2[i]=g[i];
    cout<<mi<<'\n';
    for(auto it:ind)
    {
        for(i=0;i<N;++i)
            g[i]=g2[i];
        ans=min(ans,patience(it, s, g));
    }
    cout<<ans;
     
    
    return 0;
}
