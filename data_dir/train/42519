#pragma GCC omptimize("unroll-loops")
#pragma optimize("SEX_ON_THE_BEACH")
#pragma GCC optimize("no-stack-protector")
#pragma comment(linker, "/STACK:1000000000")
#include<bits/stdc++.h>

using namespace std;

//#define need_tree

#ifdef need_tree
    #include<ext/pb_ds/assoc_container.hpp>
    using namespace __gnu_pbds;
    template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#endif // need_tree

using ll = long long int;
using ull = unsigned long long int;
using dd = long double;
using ldd = long double;
using si = short int;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

ll get_seed(string s)
{
    ll ans = 0;
    for (int i = 0; i < s.size(); ++i)
        ans += s[i];
    return ans;
}

int popcount(int x)
{
    return __builtin_popcount(x);
}

ll popcountll(ll x)
{
    return __builtin_popcountll(x);
}

#define all(x) (x).begin(), (x).end()
#define ff first
#define ss second

// debug defines
#ifdef HOME
    int jjj;
    #define PO cout << "Pomelo" << endl;
    #define OL cout << "Oliva" << endl;
    #define debug(x) cout << #x << " " << x << endl;
    #define debug_p(x) cout << #x << " " << x.ff << " " << x.ss << endl;
    #define debug_v(x) cout << #x << " "; for (auto iii : x) cout << iii << " "; cout << endl;
    #define debug_vp(x) cout << #x << " "; for (auto ii : x) cout << '[' << ii.ff << " " << ii.ss << ']'; cout << endl;
    #define wait() cin >> jjj;
#else
    #define PO 0;
    #define OL 0;
    #define debug(x) 0;
    #define debug_p(x) 0;
    #define debug_vp(x) 0;
    #define debug_v(x) 0;
    #define debug_vp(x) 0;
    #define wait() 0;
#endif // HOME
// end of debug definess


void solve(int test_num)
{
    int n, m;
    cin >> n >> m;
    vector<vector<char>> arr(n, vector<char>(m));
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j)
            cin >> arr[i][j];
    vector<vector<bool>> was(n, vector<bool>(m));
    vector<vector<ll>> cnt(n, vector<ll>(m));
    ll mod = 1e9 + 7;
    cnt[0][0] = 1;
    was[0][0] = 1;
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j)
        {
            if (arr[i][j] == '#')
                continue;
            if (i && cnt[i - 1][j]) {
                cnt[i][j] += cnt[i - 1][j];
                was[i][j] = (was[i][j] | was[i - 1][j]);
            }
            if (j && cnt[i][j - 1]) {
                cnt[i][j] += cnt[i][j - 1];
                was[i][j] = (was[i][j] | was[i][j - 1]);
            }
            cnt[i][j] %= mod;
        }
    vector<vector<ll>> cnt2(n,vector<ll>(m));
    debug(cnt.back().back());
    cnt2[n - 1][m - 1] = 1;
    if (was[n - 1][m - 1] == 0){
        cout << 0;
        return;
    }
    for (int i = n - 1; i >= 0; --i)
        for (int j = m - 1; j >= 0; --j)
        {
            if (arr[i][j] == '#')
                continue;
            if (i != n -1)
                cnt2[i][j] += cnt2[i + 1][j];
            if (j != m - 1)
                cnt2[i][j] += cnt2[i][j + 1];
            cnt2[i][j] %= mod;
            if (cnt2[i][j] * cnt[i][j] % mod == cnt.back().back())
            {
                if (i == 0 && j == 0)
                    continue;
                if (i == n - 1 && j == m - 1)
                    continue;
                cout << 1;
                return;
            }
        }
    cout << 2;
}


int main()
{
    ios_base::sync_with_stdio(0);
    cout.tie(0);
    cin.tie(0);
    int t;
    t = 1;
   // cin >> t;
    for (int i = 0; i < t; ++i)
        solve(i);

    return 0;
}
