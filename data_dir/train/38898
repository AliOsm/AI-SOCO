#include <bits/stdc++.h>
using namespace std;

#define loop(i,n) for(int i = 0;i < int(n);i++)
#define rloop(i,n) for(int i = int(n);i >= 0;i--)
#define range(i,a,b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1,v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1,v2,v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1,v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1,v2,v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3)
#define endl '\n'

typedef vector<int> vi;
typedef vector<pair<int,int> > vii;
typedef long long ll;
typedef pair<int, int> pii;


const int MAGIC = 360360;
int dis[MAGIC*3+3];
int k;

int BFS(int a , int b){
    queue<int> q;
    memset(dis,-1,sizeof dis);
    dis[a] = 0;
    q.push(a);
    while(dis[b] == -1){
        if(q.empty())assert(0);
        int u = q.front();
        q.pop();
        range(i,2,k){
            int nxt = u - u % i;
            if(dis[nxt] == -1){
                dis[nxt] = dis[u]+1;
                q.push(nxt);
            }
        }

        if(u && dis[u-1] == -1){
            dis[u-1] = dis[u]+1;
            q.push(u-1);
        }
    }
    return dis[b];
}

int main()
{

#ifndef ONLINE_JUDGE
	//freopen("in.in", "r", stdin);
	//freopen("out.in", "w", stdout);
#endif
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    ll a , b;
    cin >> a >> b >> k;
    if(a / MAGIC == b / MAGIC){
        cout << BFS(a % MAGIC , b % MAGIC) << endl;
    }else if(a / MAGIC == b / MAGIC + 1){
        cout << BFS(a % MAGIC + MAGIC , b % MAGIC) << endl;
    }else{
        ll one = BFS(a % MAGIC + MAGIC, b % MAGIC);
        ll two = BFS(a % MAGIC + MAGIC + MAGIC, b % MAGIC);
        ll dif = two - one;
        ll blocks = a / MAGIC - b / MAGIC - 1;
        cout << dif * blocks + one << endl;
    }

    return 0;
}
