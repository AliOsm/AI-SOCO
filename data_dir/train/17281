// Let's bring the sky down :)
#include<bits/stdc++.h>
#define ll long long
using namespace std;
const int N = 1e5 + 5;
ll a[N];
ll tree[4 * N][25];
ll lazy[4 * N];
void yo(int node){
    for(int i = 0; i < 23; i++){
            if(tree[node][24] & (1LL << i)){
                tree[node][i]++;
            }
        }
}
void foo(int node, ll e, ll n){
    int cnt = 0;
    ll go = e;
    while(go){
        cnt++;
        go /= 2;
    }
    for(int i = 0; i < cnt; i++){
        if(e & (1LL << i)){
            tree[node][24] += ((n - (tree[node][i] << 1LL)) * (1LL << i));
            tree[node][i] = n - tree[node][i];
        }
    }
}
void build(int node, int st, int end){
    if(st > end)return;
    if(st == end){
        tree[node][24] = a[st];
        yo(node);
        return;
    }
    ll mid = st + end >> 1;
    build(node << 1, st, mid);
    build((node << 1) + 1, mid + 1, end);
    for(int i = 0; i <= 24; i++)
    tree[node][i] = tree[node << 1][i] + tree[(node << 1) + 1][i];
}
void update(int node, int st, int end, int l , int r, int x){
    if(lazy[node]){
        foo(node, lazy[node], (end - st + 1));
        if(st != end){
            lazy[node << 1] ^= lazy[node];
            lazy[(node << 1) + 1] ^= lazy[node];
        }
        lazy[node] = 0;
    }
    if(st > end || l > end || r < st)
        return;
    if(l <= st && end <= r){
        foo(node, x, (end - st + 1));
        if(st != end){
            lazy[node << 1] ^= x;
            lazy[(node << 1) + 1] ^= x;
        }
        return;
    }
    ll mid = st + end >> 1;
    update(node << 1, st, mid, l, r, x);
    update((node << 1) + 1, mid + 1, end, l, r, x);
    for(int i = 0; i <= 24; i++)
        tree[node][i] = tree[node << 1][i] + tree[(node << 1) + 1][i];
}
ll query(int node, int st, int end, int l, int r){
    if(lazy[node]){
        foo(node, lazy[node], (end - st + 1));
        if(st != end){
            lazy[node << 1] ^= lazy[node];
            lazy[(node << 1) + 1] ^= lazy[node];
        }
        lazy[node] = 0;
    }
    ll mid = st + end >> 1;
    if(st > end || r < st || l > end)
        return 0;
    if(l <= st && end <= r)
        return tree[node][24];
    return (query(node << 1, st, mid, l, r) + query((node << 1) + 1, mid + 1, end, l, r));
}
int main()
{
    ios_base ::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    ll n, m, l, r, x, t;
    cin >> n;
    for(int i = 1; i <= n; i++) cin >> a[i];
    cin >> m;
    build(1, 1, n);
    while(m--){
        cin >> t >> l >> r;
        if(t - 1){
            cin >> x;
            update(1, 1, n, l, r, x);
        }
        else{
            cout << query(1, 1, n, l, r) << endl;
        }
    }
return 0;
}
