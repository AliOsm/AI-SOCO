#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <queue>


using namespace std;

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pii;
typedef pair<pii, int> para;
typedef pair<string, string> pss;
const ll inf = 1e18 + 7;
const int maxN = 305;

int n, m, q, p;
string s[maxN];
queue<pii> Q;
vector<pii> begins;
vector<pii> neighbours = {
	{0, 1},
	{1, 0},
	{0, -1},
	{-1, 0}
};

pii operator+(const pii l, const pii r) {
	return {l.st + r.st, l.nd + r.nd};
}

bool inRange(pii p) {
	return p.st >= 0 && p.st < n && p.nd >= 0 && p.nd < m;
}

int used[maxN][maxN], sum[maxN][maxN], dist[maxN][maxN];
vector<pii> usedAll;

void BFS(pii p) {
	Q.push(p);
	int add = q * (s[p.st][p.nd] - 'A' + 1);
	//cout<<add<<endl;
	int distAll = 0;
	used[p.st][p.nd] = true;
	usedAll.pb(p);
	sum[p.st][p.nd] += add;
	dist[p.st][p.nd] = 0;
	while (!Q.empty()) {
		pii p = Q.front(); Q.pop();
		//cout<<p.st<<" "<<p.nd<<" "<<sum[p]<<" "<<dist[p]<<endl;
		if (dist[p.st][p.nd] != distAll) {
			add /= 2;
			if (add == 0) return;
			distAll++;
		}
		for (auto neigh : neighbours) {
			pii newPair = p + neigh;
			//cout<<"To "<<newPair.st<<" "<<newPair.nd<<" "<<inRange(newPair)<<" "<<used[newPair]<<" "<<s[newPair.st][newPair.nd]<<endl;
			if (inRange(newPair) && !used[newPair.st][newPair.nd]
				&& s[newPair.st][newPair.nd] != '*') {
				used[newPair.st][newPair.nd] = 1;
				usedAll.pb(newPair);
				dist[newPair.st][newPair.nd] = distAll + 1;
				sum[newPair.st][newPair.nd] += add / 2;
				Q.push(newPair);
			}
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin>>n>>m>>q>>p;
	REP(i, n) {
		cin>>s[i];
		REP(j, m) {
			if (s[i][j] >= 'A' && s[i][j] <= 'Z') {
				begins.pb(pii(i, j));
			}
		}
	}
	for (auto v : begins) {
		BFS(v);
		for (auto v : usedAll) {
			dist[v.st][v.nd] = 0;
			used[v.st][v.nd] = 0;
		}
		usedAll.clear();
		while (!Q.empty()) Q.pop();
	}
	int ans = 0;
	REP(i, n) {
		REP(j, m)
			ans += (sum[i][j] > p);
	}
	cout<<ans;
	return 0;
}
