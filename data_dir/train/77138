#include<iostream>
#include<stdio.h>
#include<cassert>
#include<cstring>
#include<time.h>
#include<cstdlib>
#include<cmath>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = (int)1e4 + 10;
LL a[maxn],v[maxn],b[maxn];
LL gcd(LL A, LL B) {
    A = abs(A);
    B = abs(B);
    while(B != 0) {
        A %= B;
        swap(A,B);
    }
    return A;
}
bool gcdEx(LL A, LL &X, LL B, LL &Y, LL C) {
    LL lastX = 0; LL lastY = 1;
    X = 1; Y = 0;
    while(B != 0) {
        LL sub = A / B;
        X -= lastX * sub;
        Y -= lastY * sub;
        A -= B * sub;
        swap(A,B);
        swap(X,lastX);
        swap(Y,lastY);
    }
    if (C % A != 0) return false;
    X *= C / A;
    Y *= C / A;
    return true;
}
int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    LL n,m; int k; cin >> n >> m >> k;
    LL lcm = 1;
    for (int i = 0; i < k; i++) {
        cin >> a[i]; b[i] = a[i];
        LL g = gcd(lcm,a[i]);
        if (a[i] / g > n / lcm) {
            puts("NO");
            return 0;
        }
        lcm = a[i] / g * lcm;
    }
    for (int i = 0; i < k; i++) {
        v[i] = (-i % a[i] + a[i]) % a[i];
    }
    for (int i = 0; i < k - 1; i++) {
        LL A = a[i];
        LL B = -a[i + 1];
        LL C = v[i + 1] - v[i];
        LL G = gcd(A,B);
        LL x,y;
        if (!gcdEx(A,x,B,y,C)) {
            puts("NO");
            return 0;
        }
        assert(A * x + B * y == C);
        LL X = (LL)1e18;
        if (x < 0) {
            LL add = (-x - B / G - 1) / (-B / G);
            x += add * (-B / G);
            y -= add * (-A / G);
        }
        LL sub = x / (-B / G);
        x -= sub * (-B / G);
        y += sub * (-A / G);
        assert(x >= 0);
        assert(B < 0 && -B == a[i + 1]);
        assert(A * x + B * y == C);
        assert(A * x >= 0);
        assert(C < a[i + 1]);
        //assert(y >= 0);
        if (y >= 0) {
            X = min(X,a[i] * x + v[i]);
        }
        if (y < 0) {
            LL add = (-y + A / G - 1) / (A / G);
            y += add * (A / G);
            x -= add * (B / G);
        }
        if (y >= 0) {
            LL sub = y / (A / G);
            y -= sub * (A / G);
            x += sub * (B / G);
        }
        if (x >= 0) {
            X = min(X,a[i + 1] * y + v[i + 1]);
        }
        if (X == (LL)1e18) {
            puts("NO");
            return 0;
        }
        /*cout << endl;
        cout << v[i] << " " << a[i] << endl << v[i + 1] << " " << a[i + 1] << endl;
        cout << a[i] << " " << x << " " << -a[i + 1] << " " << y << " " << v[i + 1] - v[i] << endl;
        cout << X << endl << endl;*/
        if (X > m - k + 1) {
            puts("NO");
            return 0;
        }
        assert(X % a[i + 1] == v[i + 1]);
        a[i + 1] = a[i] / gcd(a[i],a[i + 1]) * a[i + 1];
        //assert(0 <= X && X < a[i + 1]);
        v[i + 1] = X;
    }
    LL X = v[k - 1];
    if (X == 0) X = a[k - 1];
    if (X > m - k + 1) {
        puts("NO");
        return 0;
    }
    for (int i = 0; i < k; i++) {
        //cout << gcd(lcm,X + i) << " " << b[i] << endl;
        if (gcd(lcm,X + i) != b[i]) {
            puts("NO");
            return 0;
        }
    }
    puts("YES");
    return 0;
}
