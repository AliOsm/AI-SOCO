#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <math.h>
#include <iomanip>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <sstream>

using namespace std;

pair<pair<int, int>, int> finder(set<int> &a) {
    for (int i1 = 1; i1 < 260; ++i1) {
        for (int i2 = i1 + 1; i2 < 260; ++i2) {
            for (int i3 = i2 + 1; i3 < 260; ++i3) {
                if ((i1 ^ i2 ^ i3) == 0 && a.find(i1) == a.end() && a.find(i2) == a.end() && a.find(i3) == a.end()) {
                    a.insert(i1);
                    a.insert(i2);
                    a.insert(i3);
                    return make_pair(make_pair(i1, i2), i3);
                }
            }
        }
    }
}

pair<pair<long long, long long>, long long> findTriplet(long long p, long long n) {
    if (p == 1) {
        return make_pair(make_pair(1, 2), 3);
    }

    auto ans = findTriplet(p / 4, n / 4);

    if (n % 4 == 0) {
        return make_pair(make_pair(ans.first.first * 4, ans.first.second * 4), ans.second * 4);
    }

    if (n % 4 == 1) {
        return make_pair(make_pair(ans.first.first * 4 + 1, ans.first.second * 4 + 2), ans.second * 4 + 3);
    }

    if (n % 4 == 2) {
        return make_pair(make_pair(ans.first.first * 4 + 2, ans.first.second * 4 + 3), ans.second * 4 + 1);
    }

    if (n % 4 == 3) {
        return make_pair(make_pair(ans.first.first * 4 + 3, ans.first.second * 4 + 1), ans.second * 4 + 2);
    }
}


int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    /**
    vector<int> s;
    set<int> a;
    for (int i = 0; i < 85; ++i) {
        auto z = finder(a);
        s.push_back(z.first.first);
        s.push_back(z.first.second);
        s.push_back(z.second);
    }

    for (int i = 0; i < s.size(); ++i) {
        if (i % 3 == 1) {
            cout << s[i - 1] << ' ' << s[i] << ' ' << s[i + 1] << '\n';
        }
    } **/


    int t;
    cin >> t;
    while (t--) {
        long long n;
        cin >> n;
        long long p = 1;
        while (p * 3 < n) {
            n -= p * 3;
            p *= 4;
        }

        long long numTriplet = (n - 1) / 3;
        auto ans = findTriplet(p, numTriplet);

        if (n % 3 == 1) {
            cout << ans.first.first << '\n';
        }
        if (n % 3 == 2) {
            cout << ans.first.second << '\n';
        }
        if (n % 3 == 0) {
            cout << ans.second << '\n';
        }
    }

    return 0;
}