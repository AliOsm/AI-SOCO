#include<bits/stdc++.h>
using namespace std;

#define si(n) scanf("%d",&n)
#define MAX 100005
#define f first
#define s second
#define ll long long

pair<int,int>tree[4*MAX];

pair<int,int>combine(pair<int,int>a,pair<int,int>b )
{
    if(a.f>=b.f)return a;
    return b;
}


pair<int,int> sum(int node,int tl,int tr,int l,int r)
{
    if(l>r)
        return {0,0};
    if(l==tl && r==tr)
        return tree[node];
    int mid=(tl+tr)/2;

    return combine(sum(node*2,tl,mid,l,min(r,mid))
        , sum(node*2+1,mid+1,tr,max(l,mid+1),r));
}

void update(int node,int l,int r,int pos,int val)
{
    if(l==r){
        if(val>tree[node].f)
            tree[node]={val,pos};
    }
    else{
        int mid=(l+r)/2;
        if(pos<=mid)
            update(node*2,l,mid,pos,val);
        else
            update(node*2+1,mid+1,r,pos,val);
        tree[node]=combine(tree[node*2],tree[node*2+1]);
    }
}

int n,d;
ll h[MAX];
set<ll>myset;
map<ll,int>mp;
ll rev_mp[MAX];
int dp[MAX];
int nxt[MAX];
map<ll,int>haha;

int main()
{
    //freopen("input.txt","r",stdin);
    int i,j;
    si(n);si(d);
    for(i=1;i<=n;i++){
        scanf("%lld",&h[i]);
        myset.insert(h[i]);
    }

    i=1;
    for(auto xx : myset){
        mp[xx]=i;
        rev_mp[i]=xx;
        i++;
    }

    memset(nxt,-1,sizeof(nxt));

    for(i=n;i>=1;i--){
        auto it=myset.upper_bound(h[i]-d);
        if(it==myset.begin()){
            dp[i]=1;
            nxt[i]=-1;
        }
        else{
            it--;
            int pos=mp[*it];
            pair<int,int>now=sum(1,1,n,1,pos);
            dp[i]=1+now.f;
            nxt[i]=haha[rev_mp[now.s]];
        }
        it=myset.lower_bound(h[i]+d);
        if(it!=myset.end()){
            int pos=mp[*it];
            pair<int,int>now=sum(1,1,n,pos,n);
            if(now.f+1>dp[i]){
                dp[i]=1+now.f;
                nxt[i]=haha[rev_mp[now.s]];
            }
        }

        update(1,1,n,mp[h[i]],dp[i]);
        haha[h[i]]=i;
    }
    int ans=0,pos=0;

    for(i=1;i<=n;i++){
        if(dp[i]>ans){
            ans=dp[i];
            pos=i;
        }
    }
    printf("%d\n",ans);
    for(i=1;i<=ans;i++){
        printf("%d ",pos);
        pos=nxt[pos];
    }
    printf("\n");

}
