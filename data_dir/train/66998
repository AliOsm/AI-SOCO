// I can't tell you what it really is,
// I can only tell you what it feels like.
#include "bits/stdc++.h"
using namespace std;

const int N = 2e5 + 2;

vector<int> adj[N];
bool vis[N], f;
int par[N], k;
map<int,bool> mp;
vector<pair<int,int>> ans;

int find(int x) {
  if (x != par[x]) return par[x] = find(par[par[x]]);
  return x;
}

void join(int x, int y) {
  int px = find(x), py = find(y);
  if (px != py) {
    if (rand()&1) swap(px, py);
    par[px] = py;
  }
}

int K;
void dfs(int v) {
  vis[v] = 1;
  if (!f && binary_search(adj[1].begin(),adj[1].end(), v)) {
    mp[v] = f = true;
    join(1,v); ++K;--k;
    // cout << "in 1 " << v << endl;
    ans.push_back({1,v});
  }  
  for (int to: adj[v]) {
    if (to == 1 || vis[to]) continue;
    if (!vis[to]) {
      dfs(to);
    } 
  }
}

signed main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  srand(rand());
  int n, m, l, r;
  cin >> n >> m >> k;
  for (int i = 1; i <= n; ++i) par[i] = i;
  vector<pair<int,int>> v;
  for (int i = 1; i <= m; ++i) {
    cin >> l >> r;
    if (l > r) swap(l,r);
    adj[l].push_back(r);
    adj[r].push_back(l);
    if (l != 1) v.push_back({l,r});
  }
  sort(adj[1].begin(), adj[1].end());
  int cnt = 0;
  for (int i = 2; i <= n; ++i) {
    if (!vis[i]) {
      f = 0;
      dfs(i);      
      cnt += 1;      
    }
  }
  // cout << cnt << '\n';
  if (cnt > k+K) return cout << "NO",0;  
  for (auto i: adj[1]) {
    if (k && !mp.count(i)) {
      int px = find(1), py = find(i);
      if (px != py) {
        // cout << "out 1 " << i << endl;
        join(px,py);
        --k;
        ans.push_back({1,i});
      }
    }
  }
  // cout << k << '\n';
  for (auto i:v) {
    int px = find(i.first), py = find(i.second);
    if (px != py) {
      join(px,py);
      ans.push_back({i.first,i.second});
    }
  }
  if (k>0) return cout << "NO",0;

  // cout << k << endl;
  cout << "YES\n";
  for (auto [x,y]: ans) cout << x << ' ' << y << '\n';
  return 0;
}
// 1). Try forming/rearranging the equations if any
// 2). If problem asks to count, try counting in reverse(it can be easier sometimes)