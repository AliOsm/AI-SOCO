#include<bits/stdc++.h>
#define int long long int
#define ld long double
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD2 998244353
#define MOD1 1e9+7
#define f first
#define s second
#define endl '\n'
#define pii pair<int,int>
#define piii pair<pii,int>
#define precise(i) cout<<fixed<<setprecision(i)
#define error(s) throw runtime_error(s)
using namespace std;
const long double PI = atan(1.0)*4;
const int64_t INF=8e18;
const int32_t LOG=21;
const int MOD=MOD2;

int power(int x,int y)
{
    if(y==0)return 1;
    int temp=power(x,y/2);
    temp=(temp*temp)%MOD;
    if(y&1)temp=(temp*x)%MOD;
    return temp;
}

int fact[5005];
int inv[5005];
int inv_val[5005];

void init()
{
    fact[0]=inv[0]=1;
    rep(i,1,5002)
    {
        fact[i]=(fact[i-1]*i)%MOD;
        inv[i]=power(fact[i],MOD-2);
        inv_val[i]=power(i,MOD-2);
    } 
}

int a[5005];
int helper[5005];
int cnt[5005];
int dp[5005][5005];
int loc[5005];
vector<int> vals;

int ncr(int n,int r)
{
     if(n<r)return 0;
     int ans=(fact[n]*inv[r])%MOD;
     ans=(ans*inv[n-r])%MOD;
     return ans;
}

int inv1(int i)
{
     return power(i,MOD-2);
}

int32_t main()
{ 
      getFaster;
      int tests=1;
      //cin>>tests;
      rep(ii,0,tests)
      {
          init();
          int n;
          cin>>n;
          rep(i,0,n)
          {
              cin>>a[i];
              vals.push_back(a[i]);
              cnt[a[i]]++;
          }

          sort(a,a+n);
          sort(vals.begin(),vals.end());
          
          vals.resize(distance(vals.begin(),unique(vals.begin(),vals.end())));
          int siz=vals.size();
          loc[vals[0]]=0;

          rep(i,1,siz){helper[vals[i]]=i;loc[vals[i]]=i;}
         
          dp[0][0]=1;
          dp[0][1]=(cnt[vals[0]]*inv_val[n])%MOD; 
          
          rep(i,1,siz)
          {
                rep(j,0,siz+1)
                {
                     if(j==0)
                     {
                        dp[i][j]=1;
                        continue;
                     }
                     if(i+1<j)
                     {
                         dp[i][j]=0;
                         continue;
                     }
                     dp[i][j]=(cnt[vals[i]]*inv_val[n-j+1])%MOD;
                     dp[i][j]=(dp[i][j]*dp[i-1][j-1])%MOD;
                     dp[i][j]=(dp[i][j]+dp[i-1][j])%MOD; 
                }
          }

          int ans=0;
          rep(i,2,n+1)
          {
               rep(j,1,n+1)
               {
                    if(cnt[j]<2)continue;
                    int mul=(cnt[j]*inv_val[n-i+2])%MOD;
                    int mul1=((cnt[j]-1)*inv_val[n-i+1])%MOD;
                    int mul2=1;

                    if(loc[j]==0)
                    {
                         if(i-2!=0)continue;
                    }
                    else
                    {
                        mul2=(mul2*dp[loc[j]-1][i-2])%MOD;
                    }    
       
                    int val=(mul1*mul2)%MOD;
                    val=(val*mul)%MOD;
                    ans+=val;
                    while(ans>=MOD)ans-=MOD;          
               }
          }
          
          cout<<ans<<endl;
      }

      return 0;                         
}

/*
 TIPS:
 1.) Check for corner cases (like 0 is exception case)
 2.) Check for global memory sizes,memory refreshments and its complexity 
 3.) Check for sorting criteria (if used 1-based indexing)
 4.) Check for numbers overflow (while multiplying and doing MOD)
 5.) Check for typecasting issues like int to float( while dividing numbers)
*/