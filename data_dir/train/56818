#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int MX = (1<<20);
typedef long long ll;
vector < int > v[MX];
int sz[MX] , good[MX] , fromp[MX] , needp[MX];
int ans[MX];
int n , lim;
void dfs1(int x , int p){
    sz[x] = 1;
    int mx = 0;
    for(auto nxt : v[x]){
        if(nxt == p) continue;

        dfs1(nxt , x);
        sz[x] += sz[nxt];
        mx = max(mx , sz[nxt]);
        good[x] = max(good[x] , good[nxt]);
    }
    mx = max(mx , n - sz[x]);
    if(mx <= lim) ans[x] = 1;
    if(mx > lim){
        bool feh = 0;
        for(auto nxt : v[x]){
            if(nxt == p) continue;
            if(sz[nxt] == mx){
                feh = 1;
                int need = mx - lim;
                if(good[nxt] >= need)
                    ans[x] = 1;
            }
        }
        if(!feh) {
            fromp[x] = 1;
            needp[x] = mx - lim;
        }
    }
    if(sz[x] <= lim) good[x] = max(good[x] , sz[x]);
}
void go(int x , int p , int load){
    if(fromp[x] && load >= needp[x]) ans[x] = 1;
    multiset < int > S;
    for(auto nxt : v[x]){
        if(nxt == p) continue;
        S.insert(good[nxt]);
    }
    for(auto nxt : v[x]){
        if(nxt == p) continue;
        int nload = load;
        S.erase(S.find(good[nxt]));
        if(!S.empty()) nload = max(nload , *S.rbegin());
        if( (n - sz[nxt]) <= lim) nload = max(nload , n - sz[nxt]);
        go(nxt , x , nload);
        S.insert(good[nxt]);
    }
}
int main(){
    scanf("%d",&n);
    for(int j = 1 ; j < n ; j++){
        int a , b;
        scanf("%d %d",&a,&b);
        v[a].push_back(b);
        v[b].push_back(a);
    }
    lim = n/2;
    dfs1(1 , -1);
    go(1 , -1 , 0);
    for(int j = 1 ; j <= n ; j++) cout<<ans[j]<<' ';
}
