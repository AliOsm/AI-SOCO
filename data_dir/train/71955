#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

//#define PB push_back
#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

const int mx = 2e5+5;

int n;
vector<int> vec00, vec01, vec10, vec11;
vector<int> vec;
bool b[mx];
string ss[mx];


struct node {
	bool leaf = 0;
	int edge[2];
	node() {memset(edge, -1, sizeof(edge));}
};

vector<node> trie;

void add( string s )
{
	int cur = 0;
	for( char ch : s ) {
		if( trie[cur].edge[ch-'0'] == -1 ) {
			trie[cur].edge[ch-'0'] = trie.size();
			trie.PB(node());
		}
		cur = trie[cur].edge[ch-'0'];
	}
	trie[cur].leaf = 1;
}

bool isHere( string s )
{
	int cur = 0;
	for( char ch : s ) {
		if( trie[cur].edge[ch-'0'] == -1 ) return 0;
		cur = trie[cur].edge[ch-'0'];
	}
	if( !trie[cur].leaf ) return 0;
	return 1;
}

vector<int> store;

int main()
{
	optimize();
	int t;
	cin >> t;
	for( int test = 1; test <= t; ++test ) {
		trie.clear();
		trie.PB(node());
		vec00.clear(); vec01.clear(); vec10.clear(); vec11.clear(); vec.clear();
		cin >> n;
		for( int i = 0; i < n+3; ++i ) b[i] = 0;
		for( int i = 0; i < n; ++i ) {
			cin >> ss[i];
			add(ss[i]);
			if( ss[i][0] == '0' && ss[i][ss[i].size()-1] == '0' ) vec00.PB(i);
			else if( ss[i][0] == '1' && ss[i][ss[i].size()-1] == '1' ) vec11.PB(i);
			else if( ss[i][0] == '0' && ss[i][ss[i].size()-1] == '1' ) vec01.PB(i);
			else if( ss[i][0] == '1' && ss[i][ss[i].size()-1] == '0' ) vec10.PB(i);
		}
		for( int i = 0; i < n; ++i ) {
			string temp = ss[i];
			reverse(temp.begin(), temp.end());
			if( !isHere(temp) ) b[i] = 1;
		}
		if( (int)vec00.size() > 0 && (int)vec11.size() > 0 && ((int)((int)vec10.size()+(int)vec01.size()) == 0) ) {
			cout << -1 << endl;
			continue;
		}
		if( (int)vec10.size() > (int)vec01.size() ) {
			if( (int)((int)vec10.size()+(int)vec01.size()-2*(int)vec01.size())/2 > 0 ) {
				store.clear();
				int ans = (int)(vec10.size()+vec01.size()-2*(int)vec01.size())/2;
				for( int i = 0; i < vec10.size() && store.size() < ans; ++i ) {
					if( b[vec10[i]] ) store.PB(vec10[i]);
				}
				if( store.size() < ans ) {
					cout << -1 << endl;
					continue;
				}
				else {
					cout << ans << endl;
					for( int i = 0; i < store.size(); ++i ) {
						cout << store[i]+1 << " ";
					}
					cout << endl;
				}
				continue;
			}
			cout << 0 << endl;
			cout << endl;
			continue;
		}
		else {
			if( (int)((int)vec01.size()+(int)vec10.size()-2*(int)vec10.size())/2 > 0 ) {
				store.clear();
				int ans = (int)((int)vec01.size()+(int)vec10.size()-2*(int)vec10.size())/2;
				for( int i = 0; i < vec01.size() && store.size() < ans; ++i ) {
					if( b[vec01[i]] ) store.PB(vec01[i]);
				}
				if( store.size() < ans ) {
					cout << -1 << endl;
					continue;
				}
				else {
					cout << ans << endl;
					for( int i = 0; i < store.size(); ++i ) {
						cout << store[i]+1 << " ";
					}
					cout << endl;
				}
				continue;
			}
			cout << 0 << endl;
			cout << endl;
			continue;
		}
	}
}
