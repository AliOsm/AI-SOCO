#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define double long double
#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << (x) << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-12
//#define endl "\n"
#define pdd pair<double, double>
bool gt(double a, double b) { return a > b+EPS; }

int n, m;
vector<pair<bool, pii> > pt, org;
pii o;

inline bool left_turn(const pii &a, const pii &b, const pii &c) {
	return 1LL*(b.X-a.X)*(c.Y-b.Y)-1LL*(b.Y-a.Y)*(c.X-b.X) > 0;
}

inline bool cmp(pair<bool, pii> a, pair<bool, pii> b) {
	return left_turn(o, a.Y, b.Y);
}

inline bool by_Y(pair<bool, pii> a, pair<bool, pii> b) {
	return a.Y.Y < b.Y.Y;
}

int main() {
	ios::sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	org.resize(n+m);
	FOR(i, 0, n) cin >> org[i].Y.X >> org[i].Y.Y, org[i].X = 0;
	FOR(i, 0, m) cin >> org[i+n].Y.X >> org[i+n].Y.Y, org[i+n].X = 1;
	int tot = 0;
	sort(all(org), by_Y);
	FOR(rep, 0, Size(org)) if (org[rep].X == 0) {
		pt.clear();
		FOR(i, 0, Size(org)) if (org[rep].Y <= org[i].Y && i != rep) pt.pb(org[i]);
		o = org[rep].Y;
		sort(all(pt), cmp);
		FOR(oth, 0, Size(pt)) if (pt[oth].X == 0) {
			pii worst;
			bool wfound = false;
			FOR(i, 1, Size(pt)) {
				pair<bool, pii> next = pt[(oth+i)%Size(pt)];
				if (!left_turn(o, pt[oth].Y, next.Y)) break;
				if (next.X == 1 && (wfound == false  || left_turn(pt[oth].Y, worst, next.Y))) worst = next.Y, wfound = true;//, cout << "+";
				if (next.X == 0 && (wfound == false || left_turn(pt[oth].Y, worst, next.Y))) tot++;
			}
		}
	}
	cout << tot << endl;
	return 0;
}

