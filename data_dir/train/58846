#include <bits/stdc++.h>
using namespace std;
#define ll  long long
#define pb  push_back
#define vi  vector<ll >
#define vvi vector<vi >
#define all(x) x.begin(), x.end()
#define eps 1e-8

struct line {
	ll a, k;
	line() {}
	line(ll a, ll k) : a(a), k(k) {}
};
long double inter(line a, line b) {
	return (a.a - b.a + 0.0) / (a.k - b.k);
}
vector<line> z;
void add(line l) {
	if (l.a <= z.back().a)
		return;
	if (z.size() > 1 && !(inter(l, z.back()) + eps < inter(z.back(), z[z.size() - 2]))) {
		z.pop_back();
		add(l);
	}
	else
		z.pb(l);
}

struct rect {
	ll x, y, a;
	rect() {}
	rect(ll x, ll y, ll a) : x(x), y(y), a(a) {}
};
bool operator<(rect a, rect b) { return a.x < b.x; }

int n;
vector<rect> v;
vi  dp;

int main() {
	ios_base::sync_with_stdio(false);
	cin >> n;
	v.resize(n);
	for (int i = 0; i < n; ++i)
		cin >> v[i].x >> v[i].y >> v[i].a;
	v.pb(rect(0, 0, 0)); ++n;
	sort(all(v));
	
	dp.assign(n, 0);
	z.pb(line(0, 0));
	for (int i = 1; i < n; ++i) {
		int l = 0;
		int r = z.size() - 1;
		if (z.size() == 1 || inter(z[0], z[1]) < v[i].y + eps)
			r = 0;
		else {
			while (r - l > 1) {
				int mid = (r + l) / 2;
				(inter(z[mid], z[mid + 1]) < v[i].y + eps ? r : l) = mid;
			}
		}
		dp[i] = v[i].x * v[i].y - v[i].a + z[r].a - z[r].k * v[i].y;
		add(line(dp[i], v[i].x));
	}
	cout << *max_element(all(dp));
	
	return 0;
}