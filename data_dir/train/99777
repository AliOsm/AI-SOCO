//#pragma comment(linker, "/STACK:640000000")

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <cassert>
#include <bitset>
 
using namespace std;
 
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define forn1(i, n) for(int i = 1; i <= (int)(n); i++)
#define forr(i, l, r) for(int i = int(l); i <= int(r); i++)
#define all(a) (a).begin(), (a).end()
#define sz(a) (int)((a).size())
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define y1 __y1
#define sqr(x) ((x) * (x))
 
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
 
const int INF = (int)(1e9);
const li INF64 = (li)(INF) * (li)(INF);
const ld eps = 1e-9;
const ld pi = ld(3.1415926535897932384626433832795);
 
inline bool in(int i, int j, int n, int m) {
    return i >= 1 && i <= n && j >= 1 && j <= m;
}
 
inline int myrand() {
    return (rand() ^ (rand() << 15));
}
 
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, 1, 0, -1};
 
const int N = 1e5 + 777;

int n, a[N], t;

inline void gen() {
    return;
}

inline bool read() {
    if(!(cin >> n >> t)) return false;
    forn1(i, n) assert(cin >> a[i]);
    return true;
}

int dp[N];
const int M = 111;
int cnt[M];
int z1[N], z2[N];

inline int naive() {
    for(int i = n + 1; i <= n * t; i++) a[i] = a[i - n];
    n *= t;
    forn(i, M) cnt[i] = 0;
    forn1(i, n) dp[a[i]] = 1;
    forn1(i, n) {
        int val = a[i];
        //int cur = dp[val];
        for(int j = val; j >= 1; j--) {
            if(cnt[j]) dp[val] = max(dp[val], dp[j] + 1);
        }

        cnt[val]++;
    }

    int ans = 0;
    forn1(i, 100) ans = max(ans, dp[i]);
    return ans;
}

int Cnt[M];
int dp2[M];
int cntb[N];
int Max[M][M];

inline void solve() {
    set<int> s;
    map<int, int> id;
    forn1(i, n) s.insert(a[i]);
    int c = 0;
    for(set<int>::iterator it = s.begin(); it != s.end(); it++) {
        c++;
        id[*it] = c;
    }

    forn1(i, n) a[i] = id[a[i]];

    if(t <= 222) {
        cout << naive() << endl;
        return;
    }

    int tt = 110;
    int nn = n * tt;
    for(int i = n + 1; i <= nn; i++) {
        a[i] = a[i - n];
    }

    forn1(i, n) Cnt[a[i]]++;

    forn1(i, 100) {
        for(int j = i; j <= 100; j++) {
            int cur = 0;
            for(int k = i; k <= j; k++) cur = max(cur, Cnt[k]);
            Max[i][j] = cur;
        }
    }

    forn1(i, nn) dp[a[i]] = 1;
    forn1(i, nn) {
        int val = a[i];
        for(int j = val; j >= 1; j--) {
            if(cnt[j]) dp[val] = max(dp[val], dp[j] + 1);
        }
        z1[i] = dp[val];
        cnt[val]++;
    }

    forn(i, N) {
        int c = i / n + 1;
        if(i % n == 0) c--;
        cntb[i] = c;
    }

    forn(i, M) cnt[i] = 0, dp2[i] = 0;
    forn1(i, n) dp2[a[i]] = 1;
    for(int i = nn; i >= 1; i--) {
        int val = a[i];
        for(int j = val; j <= 100; j++) {
            if(cnt[j]) dp2[val] = max(dp2[val], dp2[j] + 1);
        }
        z2[i] = dp2[val];
        cnt[val]++;
    }

    int ans = 0;

    forn1(i, nn) {
        int c1 = a[i];
        int cntB = cntb[i];
        //cntB = tt - cntB;
        for(int i2 = 1; i2 <= nn; i2++) {
            if(a[i2] < c1) continue;
            int cntB2 = cntb[i2] - 1;
            cntB2 = tt - cntB2;
            int cur = z1[i] + z2[i2] + (t - cntB - cntB2) * Max[c1][a[i2]];
            ans = max(ans, cur);
        }
    }

    cout << ans << endl;
    return;
}
 
int main() {
#ifdef _DEBUG
    assert(freopen("input.txt", "rt", stdin));
    assert(freopen("output.txt", "wt", stdout));
#endif
 
    cout << setprecision(10) << fixed;
    cerr << setprecision(10) << fixed;
 
    srand(int(time(NULL)));

    int T = 1;
    //assert(scanf("%d", &T) == 1);

    forn(i, T) {
        //cerr << "TEST == " << i + 1 << endl;
        assert(read());
        solve();
    }
 
#ifdef _DEBUG
    cerr << "TIME == " << clock() << " ms" << endl;
#endif
    return 0;
}