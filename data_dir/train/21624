#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC optimization ("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define rep(i,a,b) for(int i = (a); i < (b); i++)
#define iter(it,c) for(auto it = (c).begin(); it != (c).end();++it)
#define pb push_back
#define fs first
#define sc second
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;

const int INF = ~(1<<31);
const double pi = acos(-1);
const double EPS = 1e-9;
typedef unsigned long long ull;

template <class T> T smod(T a, T b) {
  return (a % b + b) % b; }

int main() {
    cin.sync_with_stdio(false);
    int t;
    cin >> t;
    rep(test,0,t) {
        string s;
        cin >> s;
        vi PR(size(s)+10,0);
        rep(i,0,size(s)) {
            PR[i+1] = PR[i]+(s[i]-'0');
        }
        set<int> T;
        set<int> _T;
        rep(i,0,size(s)) if(s[i] == '1') T.insert(-i);
        rep(i,0,size(s)) if(s[i] == '1') _T.insert(i);
        int n = size(s);
        ll tts = 0;
        int tr = 0;
        rep(i,0,size(s)) {
            int at = 0;
            int nm = i+1;
            while(at+i < n) {
                int l = at;
                int r = max(l,at+i-20);
                if(PR[at+i+1]-PR[at] == 0) {
                    auto it = _T.lower_bound(at+i);
                    if(it == _T.end()) break;
                    at = *it-i;
                }
                if(l != r) {
                    if(PR[r+1]-PR[l] != 0) {
                        auto it = T.lower_bound(-(at+i-20));
                        at = (-*it)+1;
                        continue;
                    }
                }
                int cnt = 0;
                ll sm = 0;
                for(int j = at+i; j >= at; j--) {
                    if(cnt > 21) {
                        break;
                    }
                    if(s[j] == '1') sm += (1LL<<cnt);
                    cnt++;
                }
                if(sm == nm) {
                    tts++;
                }
                at++;
            }
        }
        cout << tts << endl;
    }
    return 0;
}


