#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#if (_win32 || __win32__)
#define LLD "%i64d"
#else
#define LLD "%lld"
#endif

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-13
#define endl "\n"

const int MAXN = 128;

int n, k, par[MAXN][MAXN], next[MAXN][MAXN], what[MAXN][MAXN];
bool dp[MAXN][MAXN];
string p, can;

int main() {
	cin >> n >> k;
	cin >> p;
	cin >> can;
	FOR(i, 0, Size(p)+1) FOR(j, 0, k) {
		string tmp = p.substr(0, i); tmp += 'a'+j;
		while (Size(tmp) > Size(p) || p.substr(0, Size(tmp)) != tmp) tmp = tmp.substr(1);
		next[i][j] = Size(tmp);
	}
	dp[0][0] = true;
	FOR(i, 0, n) {
		FOR(j, 0, Size(p)+1) if (dp[i][j]) FOR(add, 0, k) {
			dp[i+1][next[j][add]] = true;
			par[i+1][next[j][add]] = j;
			what[i+1][next[j][add]] = add+'a';
		}
		FOR(j, 0, Size(p)+1) {
			if (i+1-Size(p) >= 0 && can[i+1-Size(p)] == '1' && j != Size(p)) dp[i+1][j] = false;
			if (i+1-Size(p) >= 0 && can[i+1-Size(p)] == '0' && j == Size(p)) dp[i+1][j] = false;
		}
	}
	int i = n, j = 0;
	while (j <= Size(p) && !dp[i][j]) j++;
	if (j > Size(p)) {
		cout << "No solution" << endl;
		return 0;
	}
	string ret;
	while (i || j) {
		ret += what[i][j];
		j = par[i][j];
		i--;
	}
	reverse(all(ret));
	cout << ret << endl;
	return 0;
}

