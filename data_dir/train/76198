// practice with Dukkha
#include <algorithm>
#include <iostream>

using namespace std;

const int N = 100000;

int xx[N], cc[N];
int pq[1 + N], iq[N], cnt;

bool les(int u, int v) {
	return cc[u] < cc[v];
}

int i2(int i) {
	return (i *= 2) > cnt ? 0 : i < cnt && les(pq[i + 1], pq[i]) ? i + 1 : i;
}

void pq_up(int u) {
	int i, j, v;
	for (i = iq[u]; (j = i / 2) > 0 && les(u, v = pq[j]); i = j)
		pq[iq[v] = i] = v;
	pq[iq[u] = i] = u;
}

void pq_dn(int u) {
	int i, j, v;
	for (i = iq[u]; (j = i2(i)) > 0 && les(v = pq[j], u); i = j)
		pq[iq[v] = i] = v;
	pq[iq[u] = i] = u;
}

void pq_add(int u) {
	iq[u] = ++cnt, pq_up(u);
}

int pq_remove_first() {
	int u = pq[1], v = pq[cnt--];
	if (v != u)
		iq[v] = 1, pq_dn(v);
	iq[u] = 0;
	return u;
}

int main() {
	int n, k; cin >> n >> k;
	for (int i = 0; i < n; i++)
		cin >> xx[i];
	int a; cin >> a;
	for (int i = 0; i < n; i++)
		cin >> cc[i];
	long long ans = 0;
	for (int i = 0; i < n; i++) {
		pq_add(i);
		while (k < xx[i]) {
			if (cnt == 0) {
				cout << "-1\n";
				return 0;
			}
			int j = pq_remove_first();
			ans += cc[j];
			k += a;
		}
	}
	cout << ans << '\n';
	return 0;
}
