#include <bits/stdc++.h>
using namespace std;
#define pii             pair<int , int >
#define INF             111111111
#define linf            9111111111111111111
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pn              printf("\n");
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b ,c)    printf("%d %d %d\n", a, b, c)
#define MP              make_pair
#define vi              vector<int >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define SZ sz
#define pb              push_back
#define PB pb
#define OP(a, b)        MP(min(a, b), max(a, b))
#define MEM(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
enum {Free, Some, All, None};
string xvcx[]={"Free", "at least one", "any", "none"};
typedef long long LL;
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//int  on(int n, int pos) {return n | (1<<pos);} //typecast 1 in case of int
//int  off(int n, int pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue
const int M=100100;
struct edge {
    int u, v, id;
};
map<int, vector<edge> >E;
map<int, vector<edge> >::iterator it;
int group[M], ans[M];
int visited[M], parent[M], low[M], disc[M], Tem=0;
vi G[M], index[M];
int f(int u)
{
    return group[u]=group[u]==u?u:f(group[u]);
}
void add(int x, int y)
{
    int u=f(x), v=f(y);
    if (u!=v) group[u]=v;
}
void bridge(int u)
{
    visited[u] = true;
    disc[u] = low[u] = ++Tem;

    for (int i = 0 ; i < G[u].sz ; i++)
    {
        int v = G[u][i], k=index[u][i];

        if (!visited[v])
        {
            parent[v] = u;
            bridge(v);

            low[u]  = min(low[u], low[v]);

            if (low[v] > disc[u])
            {
//                pr3(u, v, k);
                if (ans[k]==Free){ ans[k]=All;}
            }
        }
        else if (v != parent[u])
            low[u]  = min(low[u], disc[v]);
    }
}
void solve_for(int w, vector<edge>&A)
{
    map<pii, int>used;
    int i, j, k;
    set<int>nodes;
    set<int>::iterator it;

    for (i=0; i<A.sz; i++)
    {
        int u=f(A[i].u), v=f(A[i].v);
        if (u==v) {ans[A[i].id]=None;}
        else
        {
            G[u].pb(v);
            G[v].pb(u);
            index[u].pb(A[i].id);
            index[v].pb(A[i].id);
            nodes.insert(u);
            nodes.insert(v);

        }
    }
    for (i=0; i<A.sz; i++)
    {
        int u=f(A[i].u), v=f(A[i].v);
        if (ans[A[i].id]==Free)
        {
            if (used[OP(u, v)]==0) used[OP(u, v)]=A[i].id;
            else
            {
                ans[A[i].id]=Some;
                ans[used[OP(u, v)]]=Some;
            }
        }
    }

    iter(it, nodes) visited[*it]=false;
    iter(it, nodes)
    {
        Tem=0;
        if (!visited[*it]) bridge(*it);
    }
    iter(it, nodes)
    {
        G[*it].cl;
        index[*it].cl;
    }

    for (i=0; i<A.sz; i++)
    {
        if (ans[A[i].id]==Free) ans[A[i].id]=Some;
        add(A[i].u, A[i].v);
    }
}
int main()
{
//    freopen("in.txt", "r", stdin);
    int i, j, k, n, m;
    edge t;

    in2(n, m);
    for (i=1; i<=m; i++)
    {
        in3(t.u, t.v, k);
        t.id=i;
        E[k].pb(t);
    }
    for (i=0; i<M; i++) group[i]=i;
    MEM(ans, Free);
    iter(it, E)
    {
        solve_for(it->first, it->second);
    }

    for (i=1; i<=m; i++)
    {
        cout<<xvcx[ans[i]]<<endl;
    }

    return 0;
}
