#include <bits/stdc++.h>

#define int long long

using namespace std;

int timer;
int tin[800001];
int tout[800001];
int u[800001];
int a[800001];
vector <int> g[800001];
int pw[800001];

struct node {
	int val, to;
	bool need;
} t[4000001];

void dfs (int v) {
	u[v] = 1;
	tin[v] = ++timer;
	for (int i = 0;i < g[v].size ();i ++) {
		if (!u[g[v][i]]) {
			dfs (g[v][i]);
		}
	}
	tout[v] = ++timer;
}

void push (int v, int tl, int tr) {
	if (!t[v].need) return;
	t[v].val = t[v].to;
	if (tl != tr) {
		t[v + v].to = t[v].to;
		t[v + v + 1].to = t[v].to;
		t[v + v].need = 1;
		t[v + v + 1].need = 1;
	}
	t[v].to = 0;
	t[v].need = 0;
}

void upd (int l, int r, int x, int v = 1, int tl = 1, int tr = timer) {
	push (v, tl, tr);
	if (tr < l || tl > r) return;
	if (tl >= l && tr <= r) {
		t[v].to = x;
		t[v].need = 1;
		push (v, tl, tr);
		return;
	}
	int tm = (tl + tr) / 2;
	upd (l, r, x, v + v, tl, tm);
	upd (l, r, x, v + v + 1, tm + 1, tr);
	t[v].val = t[v + v].val | t[v + v + 1].val;
}

int get (int l, int r, int v = 1, int tl = 1, int tr = timer) {
	push (v, tl, tr);
	if (tr < l || tl > r) return 0;
	if (tl >= l && tr <= r) return t[v].val;
	int tm = (tl + tr) / 2;
	return get (l, r, v + v, tl, tm) | get (l, r, v + v + 1, tm + 1, tr);
}
         
 main () {
 	ios_base::sync_with_stdio (0);
 	cin.tie (0), cout.tie (0);
	int n, m;
	cin >> n >> m;
	for (int i = 1;i <= n;i ++) {
		cin >> a[i];
	}   
	pw[1] = 1;
	for (int i = 2;i <= 60;i ++) {
		pw[i] = pw[i - 1] * 2;
	}     
	for (int i = 1;i <= n - 1;i ++) {
		int x, y;
		cin >> x >> y;
		g[x].push_back (y);
		g[y].push_back (x);
	}
	dfs (1);
//	cout << "asd";
	for (int i = 1;i <= n;i ++) {
//		cout << pw[a[i]] << endl;
//		cout << tin[i] << ' '<< tout[i] << endl;
		upd (tin[i], tin[i], pw[a[i]]);
		upd (tout[i], tout[i], pw[a[i]]);
	//	cout << "asd";
	}
	while (m --) {
		int type;
		cin >> type;
		if (type == 1) {
			int x;
			cin >> x;
			int c;
			cin >> c;
			upd (tin[x], tout[x], pw[c]);
		}
		else {           
			int x;
			cin >> x;                              
			int qwe = get (tin[x], tout[x]);  
			int almas = 0;
			while (qwe) {
				if (qwe % 2 == 1) {
					almas ++;
				}
				qwe /= 2;
			}
			cout << almas << endl;
		}
	}
	return 0;
}