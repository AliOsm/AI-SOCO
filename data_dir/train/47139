#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>   
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;                                  
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;
                                       
const double pi = acos(-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};                             
const int dy[] = {0, 1, 0, -1, 0};        
 
int n, m, l[301], r[301], a[301], b[301], ans; 
vector <int> pos;

inline void boost () {
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}

inline void Solve () {
   cin >> n >> m;
   for (int i = 1; i <= n; i ++) cin >> a[i], b[i] = a[i];
   ans = *max_element (a + 1, a + n + 1) - *min_element (a + 1, a + n + 1);
   for (int i = 1; i <= m; i ++) cin >> l[i] >> r[i];
   for (int i = 1; i <= n; i ++) {
      vector <int> cur;
      for (int j = 1; j <= n; j ++) a[j] = b[j];
      for (int j = 1; j <= m; j ++) {
         if (l[j] <= i && i <= r[j]) {
            cur.pb (j);
            for (int k = l[j]; k <= r[j]; k ++)
               a[k] --;
         }
      }
      int x = *max_element (a + 1, a + n + 1) - *min_element (a + 1, a + n + 1);
      if (ans < x) ans = x, pos = cur;
   }
   cout << ans << endl << sz (pos) << endl;
   for (auto it : pos) cout << it << ' ';
}
                  
main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);             
   boost ();
   int tt = 1;
// cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}                                                               