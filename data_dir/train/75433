//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,avx,avx2")
#include <bits/stdc++.h>

using namespace std;

#define PB push_back
#define MP make_pair
#define EB emplace_back
#define f first
#define s second
#define FOR(i,a,b) for (int i = a; i < (b); ++i)
#define RFOR(i, b, a) for (int i = b-1; i>=a; --i)
#define FILL(a, b) memset(a, b, sizeof a)
#define ALL(a) a.begin(), a.end()
#define SZ(a) ((int)a.size())
#define bitc(n) __builtin_popcount(n)
#define MAGIC0 mt19937 rnd(time(0)); //rnd()

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;

const int INF = 1000 * 1000 * 1000 + 7;
const LL LINF = 1LL * INF*INF;
const int MAX = 1e5 + 7;
const double PI = acos(-1.);
const double EPS = 1e-7;
const int MOD = 998244353;

struct Node
{
	long double pref, suf, sum, res;
	Node():pref(-1e18), suf(-1e18), sum(-1e18), res(-1e18){}
	Node(long double p, long double s, long double ss, long double r):pref(p), suf(s), sum(ss), res(r){}
};

struct SegmentTree
{
	Node t[8 * MAX];
	Node combine(Node a, Node b)
	{
		Node res;
		if (a.res == -1e18)
		{
			return b;
		}
		if (b.res == -1e18)
		{
			return a;
		}
		res.pref = max(a.pref, a.sum + b.pref);
		res.suf = max(b.suf, a.suf + b.sum);
		res.sum = a.sum + b.sum;
		res.res = max({a.res, b.res, a.suf + b.pref});
		return res;
	}
	void update(int v, int vl, int vr, int pos, long double value)
	{
		if (vl == vr)
		{
			t[v].pref = t[v].suf = t[v].res = max((long double) 0, value);
			t[v].sum = value;
			return ;
		}
		int mid = (vl +vr) >> 1;
		if (pos <= mid)
		{
			update(v + v, vl, mid, pos, value);
		}
		else
		{
			update(v + v + 1, mid + 1, vr, pos, value);
		}
		t[v] = combine(t[v + v], t[v + v + 1]);
	}
	Node Get(int v, int vl, int vr, int l, int r)
	{
		if (vl > r || l > vr)
		{
			return Node(-1e18, -1e18, -1e18, -1e18);
		}
		if (vl >= l && vr <= r)
		{
			return t[v];
		}
		int mid = (vl + vr) >> 1;
		return combine(Get(v + v, vl, mid, l ,r), Get(v + v + 1,mid + 1, vr,l , r));
	}
} t;

int main()
{
	ios_base::sync_with_stdio(0);
//	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);

	int n, m, c;
	cin >> n >> m >> c;
	VI x(n), p(n-1);
	FOR(i, 0, n)
	{
		cin >> x[i];
	}
	FOR(i, 0, n-1)
	{
		x[i] = x[i + 1] - x[i];
//		cout << x[i] << ' ';
	}
	--n;
	FOR(i, 0, n)
	{
		cin >> p[i];
	}
	vector<long double> vec(n);
	FOR(i, 0, n)
	{
		vec[i] = (long double)x[i] / 2 - p[i] * 1.0 / 100.0 * c;
//		cout << vec[i] << ' ';
		t.update(1, 0, n-1, i, vec[i]);
//		cout << t.Get(1, 0, n-1, 0, i).res << endl;
	}

	long double ans = 0;
//	cout << endl;
	FOR(i, 0, m)
	{
		int l, r;
		cin >> l >> r;
		--l;
		--r,--r;
//		cout << t.Get(1, 0, n-1, l, r).res << endl;
		ans += max((long double)0, t.Get(1, 0, n-1, l, r).res);
	}

	cout << fixed << setprecision(12) << ans << endl;

	return 0;
}







