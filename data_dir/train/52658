#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>
using namespace std;
using namespace __gnu_cxx;

#define EPS      1e-6
#define F        first
#define S        second
#define pi       acos(-1)
#define ll       long long
#define oo       0x3f3f3f3f
#define sz(x)    (int)x.size()
#define sc(x)    scanf("%d",&x)
#define all(x)   x.begin(),x.end()
#define rall(x)  x.rbegin(),x.rend()

int n, k;
int arr[100100];
const int mod = 1000000007;
vector<int> lucky;
int notLucky;
int cnt[1030];
int dp[1030][1030];
int fac[100100];

void go(ll x) {
  if (x > 1000000000)
    return;
  if (x)
    lucky.push_back(x);
  go(x * 10 + 4);
  go(x * 10 + 7);
}

void init() {
  go(0);
  sort(all(lucky));
  fac[0] = 1;
  for (int i = 1; i < 100100; i++)
    fac[i] = (fac[i - 1] * 1LL * i) % mod;
}

int pwr(int base, int pw) {
  int res = 1;
  while (pw) {
    if (pw & 1)
      res = (res * 1LL * base) % mod;
    base = (base * 1LL * base) % mod;
    pw >>= 1;
  }
  return res;
}

int nCr(int N, int R) {
  if (R > N)
    return 0;
  return ((fac[N] * 1LL * pwr(fac[R], mod - 2)) % mod * 1LL
      * pwr(fac[N - R], mod - 2)) % mod;
}

bool isLucky(int x) {
  while (x) {
    if (x % 10 != 4 && x % 10 != 7)
      return false;
    x /= 10;
  }
  return true;
}

void solve() {
  for (int i = 0; i < 1023; i++)
    dp[i][0] = 1;
  for (int i = 1; i < 1023; i++)
    for (int j = 1; j <= sz(lucky); j++)
      dp[j][i] = (dp[j - 1][i] + (dp[j - 1][i - 1] * 1LL * cnt[j - 1]) % mod)
          % mod;
}

int main() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
#endif
  init();
  scanf("%d%d", &n, &k);
  for (int i = 0; i < n; i++) {
    scanf("%d", &arr[i]);
    if (isLucky(arr[i]))
      cnt[lower_bound(all(lucky), arr[i]) - lucky.begin()]++;
    else
      notLucky++;
  }
  solve();
  int ans = 0;
  for (int i = 0; i <= min(sz(lucky), k); i++) {
    ans += (dp[sz(lucky)][i] * 1LL * nCr(notLucky, k - i)) % mod;
    if (ans >= mod)
      ans -= mod;
  }
  cout << ans;
}
