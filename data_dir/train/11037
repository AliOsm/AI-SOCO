//ITNOA
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <fstream>
#include <cstring>
#include <cstdlib>
#include <iomanip>
#include <cassert>
#include <random>
#include <stack>
#include <bitset>

using namespace std;

typedef long long ll;
typedef long double ld;

#define X first
#define Y second

const int base = 727;
const int maxN = 1000 + 5;

vector<int> a[maxN];
int w[maxN];
int b[maxN];
bool mark[maxN];

int W[maxN];
int B[maxN];
vector< pair<int,int> > g[maxN];

void dfs(int v, int x) {
    mark[v] = 1;
    W[x] += w[v];
    B[x] += b[v];
    g[x].push_back(make_pair(w[v], b[v]));

    for(int i = 0; i < a[v].size(); i ++) {
        int u = a[v][i];
        if(mark[u]) continue;
        dfs(u, x);
    }
}

int dp[maxN];

int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    int n, m, ww; cin >> n >> m >> ww;
    for(int i = 0; i < n; i ++)
        cin >> w[i];
    for(int i = 0; i < n; i ++)
        cin >> b[i];

    for(int i = 0; i < m; i ++) {
        int v, u; cin >> v >> u;
        v --; u --;
        a[v].push_back(u);
        a[u].push_back(v);
    }

    int x = 0;
    for(int i = 0; i < n; i ++) {
        if(mark[i] == 0)
            dfs(i, x++);
    }

    for(int i = 0; i < x; i ++) {
        for(int j = ww; j >= 0; j --) {
            if(j >= W[i])
                dp[j] = max(dp[j], dp[j-W[i]] + B[i]);
            for(int k = 0; k < g[i].size(); k ++) {
                int ws = g[i][k].first, bs = g[i][k].second;
                if(j >= ws)
                    dp[j] = max(dp[j], dp[j-ws] + bs);
            }
        }

    }

    cout << dp[ww] << endl;
    return 0;
}
