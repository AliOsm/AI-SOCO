#include <bits/stdc++.h>

using namespace std;

const int N = 2e2 + 7;

vector<int> in[N], out[N], ts;
int x[N], y[N], col[N];
bool ans[N], mark[N];

void make_clause(int v, int u)
{
	out[u ^ 1].push_back(v);
	out[v ^ 1].push_back(u);
	in[v].push_back(u ^ 1);
	in[u].push_back(v ^ 1);
}

void dfs(int v)
{
	mark[v] = 1;
	for (int i=0; i<out[v].size(); i++)
		if (!mark[out[v][i]])
			dfs(out[v][i]);
	ts.push_back(v);
}

void sfd(int v, int c)
{
	mark[v] = 1;
	col[v] = c;
	for (int i=0; i<in[v].size(); i++)
		if (!mark[in[v][i]])
			sfd(in[v][i], c);
}

int main()
{
	ios::sync_with_stdio(false), cin.tie(0);

	int n, m;
	cin >> n >> m;

	for (int i=0; i<m; i++)
	{
		cin >> x[i] >> y[i];
		if (x[i] > y[i])
			swap(x[i], y[i]);
	}

	for (int i=0; i<m; i++)
		for (int j=i+1; j<m; j++)
			if ((x[i] < x[j] && y[i] < y[j] && y[i] > x[j]) || (x[j] < x[i] && y[j] < y[i] && y[j] > x[i]))	
			{
				int v = 2 * i;
				int u = 2 * j;
				make_clause(v, u);
				make_clause(v ^ 1, u ^ 1);
			}

	for (int i=0; i<2*m; i++)
		if (!mark[i])
			dfs(i);

	int cnt = 0;
	memset(mark, 0, sizeof mark);
	for (int i=2*m-1; i>=0; i--)
		if (!mark[ts[i]])
			sfd(ts[i], cnt++);

	for (int i=0; i<2*m; i+=2)
	{
		if (col[i] == col[i ^ 1])
		{
			cout << "Impossible\n";
			return 0;
		}
		else if (col[i] < col[i ^ 1])
			ans[i ^ 1] = 1;
		else
			ans[i] = 1;
	}

	for (int i=0; i<2*m; i+=2)
		if (ans[i])
			cout << "i";
		else
			cout << "o";
	cout << "\n";
	return 0;	
}
