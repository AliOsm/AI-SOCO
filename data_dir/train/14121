#include<bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define x first
#define y second

const int N = 2e5 + 5;
const int inf = 2e9;

int root = -1, mx = -inf;
vector<int> g[N];

void dfs1(int v, int d = 0, int pr = -1){
    if(d > mx){
        mx = d;
        root = v;
    }
    for(int i = 0; i < g[v].size(); i++){
        int to = g[v][i];
        if(to == pr){
            continue;
        }
        dfs1(to, d + 1, v);
    }
}

void dfs2(int v, int d = 0, int pr = -1){
    if(d > mx){
        mx = d;
    }
    for(int i = 0; i < g[v].size(); i++){
        int to = g[v][i];
        if(to == pr){
            continue;
        }
        dfs2(to, d + 1, v);
    }
}

int main(){
    int n, k;
    cin >> n >> k;
    int h = n / k;

    vector<pair<int, int> > a;
    for(int i = 1; i <= h * k - k; i++){
        a.pb({i, i + k});
    }

    if(n % k == 0){
        for(int i = 1; i < k; i++){
            a.pb({i, k});
        }
    } else {
        int l = h * k + 1;
        for(int i = l; i < n; i++){
            a.pb({i, i - l + 1});
        }
        for(int j = n % k; j <= k; j++){
            a.pb({n, j});
        }
        for(int i = l; i < n; i++){
            a.pb({i, n});
        }
    }

    for(int i = 0; i < a.size(); i++){
        g[a[i].x].pb(a[i].y);
        g[a[i].y].pb(a[i].x);
    }

    dfs1(1);
    mx = -inf;
    dfs2(root);

    cout << mx << "\n";
    for(int i = 0; i < a.size(); i++){
        cout << a[i].x << " " << a[i].y << "\n";
    }
}
