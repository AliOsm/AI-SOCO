// start of CP 3.0
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
//____By:sirjan13____
 
#define int long long
#define ld long double
#define mod 1000000007
#define mod1 mod
#define mod2 100000009
#define show(a) for(int i=0;i<a.size();i++) cout<<a[i & 1]<<" ";
#define fi first
#define se second
#define vi vector<int>
#define vs vector<string>
#define vll vector<ll>
#define pb push_back
#define pi pair<int,int>
#define si set<int>
#define sll set<ll>
#define pll pair<ll, ll>
#define sci(x) scanf("%d",&x)
#define scs(x)  scanf("%s", x)
#define scll(x) scanf("%I64d",&x)
#define all(v) v.begin(),v.end()
#define sot(v) sort(v.begin(), v.end())
#define maxheap priority_queue<int>
#define minheap priority_queue<int,vector<int>,greater<int>>
#define mp make_pair
#define fast_io() cin.sync_with_stdio(false);cout.sync_with_stdio(false);
#define PI 3.1415926535
#define long_zero 0ll
#define long_one 1ll
 
inline int sbt(int x){return __builtin_popcount(x);}
 
using namespace std;
//using namespace __gnu_pbds;
 
#define TRACE
#ifdef TRACE
#define deb(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << std::endl;
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define deb(...)
#endif
#define N 200013
 
//map<int, int> freq;
bool ok;
int n, pichla, ek, x, g, bd, m1, m2, curr, place22, place4, nb, maxi, chosen1, chosen2, chosen3, inplace, xs, /*a*/ b, c, r, res2, m, k, K, sabka_baap;
//multiset<pair<int, pi>> events;
// string res;
//int dp[(1 << 21)], v, b[N], a[N], swaps[22][22];
//string s[N];
// int res, h, adc[N];
// string s;
// bool oksd;
//string s[N], ss[N];
//si segments;
vector<pi> adj[N];
//vi buff;
//vi a, b;
//sii conf[2][2];
//map<int, vector<pi>> m[2];
//vector<pair<int, pair<int, pi>>> v[2];
 
vector<int> prefix_function (string s, int n) {
    vi dp(n);
    dp[0] = 0;
    for(int i = 1; i < n; i++) {
        int j = dp[i - 1];
        while(j > 0 && (s[i] != s[j]))
            j = dp[j - 1];
        if(s[i] == s[j]) j++;
        dp[i] = j;
    }
    return dp;
}
 
bool cmp(pair<int, pair<int, pi>> x, pair<int, pair<int, pi>> y) {
    return x.se.fi < y.se.fi;
}
 
inline int mul(int a, int b, int m = mod) { return (a * b) % m; }
inline int add(int a, int b, int m = mod) { return (a + b) % m; }
inline int sub(int a, int b, int m = mod) { return (a - b + m) % m; }
 
int fastpow(int a, int b) {
    int res = 1;
    while(b > 0) {
        if(b & 1) res = res * a;
        a = (a * a);
        b >>= 1;
    }
    return res;
}
 
int modinv(int a) {
    return fastpow(a, mod - 2);
}
 
 
int tmp, a[N]; //, row[N], col[N];
//string s[N];
int res;
 
 
 
// Segment Tree Template Â© :P
 
#define MAXN N
 
int tree[MAXN << 2];
int lazy[MAXN << 2]; 
 
// Problem Specific
inline int merge(int lval, int rval) {
    return min(lval, rval); 
}
 
// Problem Specific
inline int get_val(int i) {
    return a[i];
}
 
inline void build(int l, int r, int node = 1){
    if(l == r){
        // Problem Specific Node INIT
        tree[node] = get_val(l);
        return;
    }
    int mid = (l + r) >> 1, lc = 2 * node, rc = lc + 1;
    build(l , mid, lc);
    build(mid + 1, r, rc);
    tree[node] = merge(tree[lc], tree[rc]);
}
 
inline void push_down(int l, int r, int node){
    if(lazy[node] == 0) return;
    tree[node] += lazy[node];
    if(l != r) {
        lazy[2 * node] += lazy[node];
        lazy[(2 * node) + 1] += lazy[node];
    }
    lazy[node] = 0;
}
 
inline void update(int l, int r, int qs, int qe, int val, int node = 1){
    push_down(l, r, node);
    if(l > qe or r < qs) return;
    if(l >= qs and r <= qe){
        lazy[node] = val;
        push_down(l, r, node);
        return;
    }
    int mid = (l + r) >> 1, lc = 2 * node, rc = lc + 1;
    update(l , mid , qs , qe , val, lc);
    update(mid + 1 , r , qs , qe, val, rc);
    tree[node] = merge(tree[lc], tree[rc]);
}
 
inline int query(int l, int r, int qs, int qe, int node = 1){
    push_down(l, r, node);
    if(l > qe or r < qs) return (int) 1e15;
    if(l >= qs and r <= qe) return tree[node];
    int mid = l + r >> 1, lc = 2 * node , rc = lc + 1;
    return merge(query(l, mid, qs, qe, lc), query(mid + 1, r, qs, qe, rc));
}
 
// Problem
 
vi parse(string s) {
    stringstream ss(s);
    int x;
    vi v;
    while (ss >> x){
        v.pb(x);
    }
    return v;
}
 
int32_t main() {
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    fast_io()
    cin >> n;
    for(int i = 1; i <= n; i++) cin >> a[i];
    cin >> m;
    build(1, n);
    string s;
    getline(cin, s);
    //deb(n);
    while(m--) {
        getline(cin, s);
        //deb(s);
        auto qu = parse(s);
 
        if(qu.size() == 2) {
            res = 0;
            int l = qu[0];
            int r = qu[1];
            l++;
            r++;
            if(l > r) {
                int res1 = query(1, n, l, n);
                int res2 = query(1, n, 1, r);
                res = min(res1, res2);
            }
            else res = query(1, n, l, r);
            cout << res << endl;
        }
        else {
            int l = qu[0];
            int r = qu[1];
            int v = qu[2];
            l++;
            r++;
            if(l > r) {
                update(1, n, l, n, v);
                update(1, n, 1, r, v);
            }
            else {
                update(1, n, l, r, v);
            }
        }
    }
    return 0;
}