#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define ndl '\n'
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<int, ll> pil;
typedef pair<ll, int> pli;
typedef pair<int, ull> piu;
typedef vector<vector<int>> matrix;

const ll INF = 1e18 + 123;
const ld EPS = 1e-9;
const int inf = 1e9 + 123;
const int MOD = 1e9 + 7;
const int N = 1e5 + 123;
const int M = 1e6 + 123;
const double pi = acos(-1.0);
const int dx[] = {0, 0, 1, -1};
const int dy[] = {1, -1, 0, 0};

vector<int>g[N];

ll st[N][18], x[N];

int n, lg[N];

ll ans;

ll get(int l, int r){
    int k = lg[r-l+1];
    return __gcd(st[r][k], st[l + (1 << k) - 1][k]);
}

void upd(int i, ll x){
    st[i][0] = x;
    for (int j = 1; j < 18 && i - (1 << (j-1)) >= 0; j++){
        st[i][j] = __gcd(st[i][j-1], st[i - (1 << (j-1))][j-1]);
    }
}

void dfs(int v = 1, int p = 0, int i = 0){
    upd(i, x[v]);
    int j = i;
    ll last;
    while (~j){
        last = get(j, i);
        int l = -1, r = j;
        while (l + 1 != r){
            int mid = l + r >> 1;
            if (get(mid, i) != last){
                l = mid;
            }
            else{
                r = mid;
            }
        }
        ans = (ans + 1ll * (j - l) * last) % MOD;
        j = l;
    }
    for (int to : g[v]){
        if (to != p){
            dfs(to, v, i+1);
        }
    }
}

int main(){
    #ifdef KAZAKH
        freopen("input.txt", "r", stdin);
    #endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n;
    lg[0] = -1;
    for (int i = 1; i <= n; i++){
        cin >> x[i];
        lg[i] = lg[i/2]+1;
    }
    int u, v;
    for (int i = 1; i < n; i++){
        cin >> u >> v;
        g[u].pb(v);
        g[v].pb(u);
    }
    dfs();
    cout << ans;
    return 0;
}
