/*
author: orthodoxparadox
23-Oct-2018
04:17:36
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define pii pair<int, int>
#define fup(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define fnu for(ll i = 0; i < n; i++)
#define rev(Y) reverse(all(Y))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb emplace_back
#define mp make_pair
#define ff first
#define ss second
typedef pair<int, pii> piii;
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("O2")
#pragma GCC optimize("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef __APPLE__
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...)
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int mod = 1e9 + 7;

int takemod(int a){return ((a%mod)+mod)%mod;}

int fast_exp(int base, int expo) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a){return takemod(fast_exp(takemod(a), mod-2));}

const int N = 2010;
char C[N][N];
vector<pii> nodes;
bool vis[N][N];
string res;


bool dijkstra(int n, int k)
{
	priority_queue<piii, vector<piii>, greater<piii>> pq;
	int best = -1;
	pq.push(mp(C[1][1] != 'a', mp(1LL, 1LL)));
	while(!pq.empty())
	{
		auto t = pq.top(); pq.pop();
		if(vis[t.ss.ff][t.ss.ss]) continue;
		vis[t.ss.ff][t.ss.ss] = 1;
		if(t.ss.ff == n && t.ss.ss == n)
		{
			//ALL a's
			for(int i = 0; i < 2*n -1; i++)
			{
				cout << 'a';
			}
			return true;
		}
		if(t.ff == k)
		{
			//add nodes to vector
			if(best == -1)
			{
				best = 2*n - t.ss.ff - t.ss.ss;
				nodes.pb(t.ss);
			}
			else if(2*n - t.ss.ff - t.ss.ss < best)
			{
				best = 2*n - t.ss.ff - t.ss.ss;
				nodes.clear();
				nodes.pb(t.ss);
			}
			else if(2*n - t.ss.ff - t.ss.ss == best)
			{
				nodes.pb(t.ss);
			}
		}
		if (t.ss.ff != n && !vis[t.ss.ff + 1][t.ss.ss])
		{
			if (C[t.ss.ff + 1][t.ss.ss] == 'a')
			{
				pq.push(mp(t.ff, mp(t.ss.ff + 1, t.ss.ss)));
			}
			else if (t.ff < k)
			{
				pq.push(mp(t.ff + 1, mp(t.ss.ff + 1, t.ss.ss)));
			}
		}
		if (t.ss.ss != n && !vis[t.ss.ff][t.ss.ss + 1])
		{
			if (C[t.ss.ff][t.ss.ss + 1] == 'a')
			{
				pq.push(mp(t.ff, mp(t.ss.ff, t.ss.ss + 1)));
			}
			else if (t.ff < k)
			{
				pq.push(mp(t.ff + 1, mp(t.ss.ff, t.ss.ss + 1)));
			}
		}
	}
	return false;
}


void pathfinder(int n, int k)
{
	dbg("hmm");
	//multisource bfs, well, of sorts
	for(;;)
	{
		set<pii> nextnodes;
		char bestchar;
		for(pii p : nodes)
		{
			dbg(p.ff, p.ss);
			if (p.ff != n)
			{
				if (nextnodes.empty())
				{
					bestchar = C[p.ff + 1][p.ss];
					nextnodes.insert(mp(p.ff + 1, p.ss));
				}
				else if (C[p.ff + 1][p.ss] < bestchar)
				{
					nextnodes.clear();
					bestchar = C[p.ff + 1][p.ss];
					nextnodes.insert(mp(p.ff + 1, p.ss));
				}
				else if (C[p.ff + 1][p.ss] == bestchar)
				{
					nextnodes.insert(mp(p.ff + 1, p.ss));
				}
			}
			if (p.ss != n)
			{
				if (nextnodes.empty())
				{
					bestchar = C[p.ff][p.ss + 1];
					nextnodes.insert(mp(p.ff, p.ss + 1));
				}
				else if (C[p.ff][p.ss + 1] < bestchar)
				{
					nextnodes.clear();
					bestchar = C[p.ff][p.ss + 1];
					nextnodes.insert(mp(p.ff, p.ss + 1));
				}
				else if (C[p.ff][p.ss + 1] == bestchar)
				{
					nextnodes.insert(mp(p.ff, p.ss + 1));
				}
			}
		}
		dbg("hello", nextnodes.size());
		if (nextnodes.empty())
		{
			return;
		}
		nodes.clear();
		for (pii p : nextnodes)
		{
			nodes.pb(p);
			dbg("2");
		}
		dbg(bestchar);
		res += bestchar;
	}
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef __APPLE__
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	time_t t1, t2;
	t1 = clock();

	int n, k;
	cin >> n >> k;
	for(int i = 1; i <= n; i++)
	{
		for(int j = 1; j <= n; j++)
		{
			cin >> C[i][j];
		}
	}
	if(k == 0 && C[1][1] != 'a')
	{
		nodes.pb(mp(1LL, 1LL));
		res += C[1][1];
		pathfinder(n, k);
	}
	else
	{
		if(dijkstra(n, k)) return 0;
		dbg("check", nodes.size());
		dbg(nodes);
		res += 'a';
		pathfinder(n, k);
	}
	rev(res);
	int l = res.length();
	for(int i = 0; i < 2*n-1-l; i++)
	{
		res += 'a';
	}
	rev(res);
	assert(res.length() == 2*n-1);
	cout << res;
	t2 = clock(); cerr << "time taken: " << t2-t1;
	return 0;
}