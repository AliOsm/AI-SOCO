#include<bits/stdc++.h>
using namespace std;
#define fr first
#define sc second
typedef long long ll ;
typedef double ld;
typedef pair<int,int> p2;
typedef pair<ll ,p2> p3;
typedef vector<ll > vi;
const ll  Mod = 7 + 1e9;
const ll  INF32 = 5 + 2e9;
const ll  INF64 = 5 + 1e18;
const ll  MAX = 5+ 4e5;

int N,M,c[MAX],s[MAX],e[MAX],a[MAX];
ll T[5*MAX],LAZY[10*MAX];
vi G[MAX];

void PushLAZY(int x)
{
    int c1 = x<<1;
    int c2 = c1 +1;
    T[x] = LAZY[x];
    LAZY[c1] = LAZY[x];
    LAZY[c2] = LAZY[x];
    LAZY[x] = 0;
}
ll build(int x = 1,int l = 1,int r = N)
{
    if( l == r )
        return T[x] = ( 1LL<< a[l] );
    int mid = l+r>>1,c1 = x<<1,c2 = x<<1 |1;
    return T[x] = ( build(c1,l,mid) | build(c2,mid+1,r) );
}
ll update(int CO,int L,int R,int x = 1,int l = 1,int r = N)
{
    if( LAZY[x] )
        PushLAZY(x);
    if( L > r || R < l )
        return T[x];
    if( L <= l && r <= R )
    {
        LAZY[x] = (1LL<<CO);
        PushLAZY(x);
        return T[x];
    }
        int mid = l+r>>1,c1 = x<<1,c2 = x<<1 |1;
    return T[x] = ( update(CO,L,R,c1,l,mid) | update(CO,L,R,c2,mid+1,r) );
}
ll query(int L,int R,int x = 1,int l = 1,int r = N)
{
    if( LAZY[x] )
        PushLAZY(x);
    if( L > r || R < l )
        return 0;
    if( L <= l && r <= R )
        return T[x];
    int mid = l+r>>1,c1 = x<<1,c2 = x<<1 |1;
    return ( query(L,R,c1,l,mid) | query(L,R,c2,mid+1,r) );
}
int DFSNumber;
void DFS(int u,int pre)
{
    s[u] = ++DFSNumber;
    for(int v : G[u])
        if( v != pre )
        DFS(v,u);
    e[u] = DFSNumber;
}
int main()
{
    cin >> N >> M;
    for(int i=1;i<=N;i++)
        scanf("%d" ,&c[i] );
    for(int i=1;i<N;i++)
    {
        int x,y; cin >>x >> y;
        G[x].push_back(y);
        G[y].push_back(x);
    }
    DFS(1,1);
    for(int i=1;i<=N;i++)
        a[ s[i] ] = c[i];
    build();
    while(M--)
    {
        int t,u,cc;
        scanf("%d" , &t );
        if( t == 1 )
        {
            scanf("%d%d" ,&u ,&cc );
            update(cc,s[u],e[u]);
        }
        else {
            scanf("%d" ,&u );
            ll ans = query(s[u] ,e[u]);
            ans = __builtin_popcountll( ans );
            printf("%d\n" , ans );
        }
    }
    return 0;
}
