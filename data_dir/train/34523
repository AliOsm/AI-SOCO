//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i, n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

string a, b;
string s;
int p[200005];
bool End[200005];
int f[100005];
int t[100005];

void add(int &x, int y) {
    x += y;
    if (x >= mod) {
        x -= mod;
    }
}

void upd(int x, int y) {
    for (int i = x; i <= a.size(); i += i & -i) {
        add(t[i], y);
    }
}

int go(int x) {
    int res = 0;
    for (int i = x; i > 0; i -= i & -i) {
        add(res, t[i]);
    }
    return res;
}

int main(void) {
    #ifdef nobik
        freopen("input.txt", "rt", stdin);
        freopen("output.txt", "wt", stdout);
    #endif
    cin >> a >> b;
    s = b + "#" + a;
    for (int i = 1, j = 0; i < s.size(); ++i) {
        while(j > 0 && s[i] != s[j]) {
            j = p[j - 1];
        }
        if (s[i] == s[j]) {
            ++j;
        }
        p[i] = j;
    }
    for (int i = b.size() + 1, j = 0; i < s.size(); ++i, j++) {
        if (p[i] == b.size()) {
            End[j + 1] = true;
        }
    }
    int last = -1;
    for (int i = 1; i <= a.size(); ++i) {
        if (End[i]) {
            last = i;
        }
        if (last != -1) {
            f[i] = (last - (int)b.size() + 1);
            add(f[i], f[i - 1]);
            add(f[i], go(last - (int)b.size()));
            upd(i, f[i]);
        }
        // Debug
        // cout << i << " " << f[i] << endl;
    }
    printf("%d\n", f[a.size()]);
    return 0;
}
