#include <bits/stdc++.h>
using namespace std;

typedef long long ll;



vector<int> prefix_function (string s) {
	int n = (int) s.length(); vector<int> pi (n);
	for (int i=1; i<n; ++i) {
		int j = pi[i-1];
		while (j > 0 && s[i] != s[j]) j = pi[j-1];
		if (s[i] == s[j])  ++j;
		pi[i] = j;
	}
	return pi;
}

vector<int> kmp(string s, string t) {
    vector<int> occ((int)s.size() + 1, 0);
    int n = s.size(), m = t.size();
    s = t + "&" + s;
    vector<int> pref = prefix_function(s);
    for(int i = 0; i < pref.size(); i++) {
        if(pref[i] == m) {
            occ[i-m] = 1;
        }
    }
    return occ;
}

const int N = 1e5 + 100;

ll mod = 1e9 + 7;
ll F[N], G[N], H[N];

int main() {
    string s, t;
    cin >> s >> t;
    vector<int> occ = kmp(s, t);
    int n = s.size(), m = t.size();
    int last = -1;
    F[0] = G[0] = H[0] = 1;
    for(int i = 1; i <= n; i++) {
        if(occ[i]) last = i;
        if(last != -1) {
            F[i] = H[last-m];
        }
        G[i] = (G[i-1] + F[i])%mod;
        H[i] = (H[i-1] + G[i])%mod;
    }
    ll ans = G[n] - 1;
    ans %= mod;
    if(ans < 0) ans += mod;
    ans %= mod;
    cout << ans << endl;
}
