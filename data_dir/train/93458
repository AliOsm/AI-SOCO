#include <bits/stdc++.h>

using namespace std;

const int N = 6e5 + 5;

int a[N], n, m, pos[N];
pair<int, int> ans[N];

int add[N << 2];
void build(int id = 1, int l = 0, int r = n+m) {
  if (r-l < 2) {
    add[id] = max(0, l - m + 1);
    return;
  }
  int mid = (l + r) >> 1, il = id << 1, ir = il | 1;
  build(il, l, mid);
  build(ir, mid, r);
  add[id] = 0;
}

int get(int x, int id = 1, int l = 0, int r = n + m) {
  if (r-l < 2 )
    return add[id];
  int mid = (l + r) >> 1, il = id << 1, ir = il | 1;
  return add[id] + (x < mid ? get(x, il, l, mid) : get(x, ir, mid, r));
}

void update1(int x, int y, int id = 1, int l = 0, int r = n+m) {
  if (x >= r || l >= y) return;
  if (x <= l && r <= y) {
    ++add[id];
    return;
  }
  int mid = (l + r) >> 1, il = id << 1, ir = il | 1;
  update1(x, y, il, l, mid);
  update1(x, y, ir, mid, r);
}

int main() {
  scanf("%d %d", &n, &m);
  for (int i = m-1; i >= 0; --i)
    scanf("%d", a+i);
  for (int i = 0; i < n; ++i) {
    a[m+i] = i+1;
    pos[i+1] = m + i;
    ans[i+1] = make_pair(i+1, i+1);
  }
  for (int i = 0; i < m; ++i)
    ans[a[i]].first = 1;
  build();
  for (int i = m-1; i >= 0; --i) {
    int now = a[i];
    ans[now].second = max(ans[now].second, get(pos[now]));
    update1(i, pos[now]);
    pos[now] = i;
  }
  for (int i = 1; i <= n; ++i) {
    ans[i].second = max(ans[i].second, get(pos[i]));
    printf("%d %d\n", ans[i].first, ans[i].second);
  }
  return 0;
}
