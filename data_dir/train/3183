#include <bits/stdc++.h>

using namespace std;

int n , m , t;
int x , y , c ;
int a[5001][5001] ;
int dp[5001][5001] ;
bool vis[5001] ;
vector < int > V[5001] ;
bool vis2[5001] ;
vector < int > B;
void dfs(int idx)
{
    if ( vis2[idx] ) return ;
    vis2[idx] = 1 ;
    for ( int i = 0 ; i < V[idx].size() ; i++ )
        dfs(V[idx][i]) ;
    B.push_back(idx) ;
}
int main()
{
    ios_base::sync_with_stdio(0) ;
    cin.tie(0) ;

    cin >> n >> m >> t ;
    for ( int i = 0 ; i < m ; i++ )
        cin >> x>> y>> c, a[x][y] = c ,
        V[y].push_back(x);
    for ( int i = 0 ; i < 5001 ; i++ )
        for ( int j = 0 ; j < 5001 ; j++ )
            dp[i][j] = 1e9+1;
    dp[1][1] = 0;
    dfs(n) ;
    for ( int i : B )
    {
        if ( vis[i] ) continue ;
        vis[i] = 1 ;
        for ( int k = 0 ; k < V[i].size() ; k++)
            for ( int j = 1 ; j <= n ; j++ )
                dp[i][j] = min(dp[i][j],dp[V[i][k]][j-1]+a[V[i][k]][i]) ;
    }
    int ans ;
    for ( int i = n ; i >= 0 ; i-- )
        if ( dp[n][i] <= t )
        {
            ans = i ;
            break;
        }
    cout << ans << "\n" ;
    int p = n ;
    vector < int> A;
    A.push_back(n) ;
    while (ans)
    {
        for ( int j = 1 ; j <= n ; j++ )
            if ( a[j][p] && dp[j][ans-1] + a[j][p] == dp[p][ans] )
            {
                A.push_back(j) ;
                p = j ;
                break;
            }
        ans-- ;
    }
    for ( int i = A.size()-1 ; i >= 0 ; i-- )
        cout << A[i] << " " ;
    return 0 ;
}
