#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>
#include <random>
 
using namespace std;

#define int long long

const int MAXN = 2e5 + 239;
const int MOD = 998244353;

int add(int a, int b) {
	a %= MOD;
	b %= MOD;
	return (a + b) % MOD;
}

int mul(int a, int b) {
	a %= MOD;
	b %= MOD;
	return (a * b) % MOD;
}

int binpow(int a, int b) {
	int res = 1;
	while (b > 0) {
		if (b & 1) {
			res = mul(res, a);
		}
		a = mul(a, a);
		b /= 2;
	}
	return res;
}

int divv(int a, int b) {
	return mul(a, binpow(b, MOD - 2));
}

int F[MAXN];

void init() {
	F[0] = 1;
	for (int i = 1; i < MAXN; i++) {
		F[i] = mul(F[i - 1], i);
	}
}

int C(int n, int k) {
	return divv(F[n], mul(F[n - k], F[k]));
}

int solve(int x, int k) {
	int ans = 0;
	for (int i = 0; 2 * i <= x; i++) {
		int f = C(x, 2 * i);
		int s = C(2 * i, i);
		int all = mul(f, s);
		int left = x - 2 * i;
		int cur = mul(all, binpow(k - 2, left));
		ans = add(ans, cur);
	}
	return ans;
} 

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    
    init();

    int n, k;
    cin >> n >> k;
    if (k == 1) {
    	cout << 0 << endl;
    	exit(0);
    }
    int nm = 0;
    int m = 0;
    vector<int> a(n);
    for (auto &t : a) {
    	cin >> t;
    }
    for (int i = 0; i < n; i++) {
    	if (a[i] == a[(i + 1) % n]) {
    		nm++;
    	} else {
    		m++;
    	}
    }
    int all = binpow(k, m);
    all -= solve(m, k);
    all += MOD;
    all %= MOD;
    all = divv(all, 2);
    cout << mul(all, binpow(k, nm)) << endl;
}
