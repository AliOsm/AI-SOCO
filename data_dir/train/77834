#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
 
#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2
 
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound
 
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;
 
template <class T1, class cmp = less <T1>> using Tree = tree <T1, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2> using um = unordered_map <T1, T2>;
template <class T> using us = unordered_set <T>;
template <class T> using vec = vector <T>;
 
const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 501;
int n;
int arr[N];
int ans[N][N];

int dp[N][N];

void input() {
    cin >> n;
    for(int i = 1; i <= n; ++i) {
        cin >> arr[i];
    }
}

int calc(int l, int r) {
    if(ans[l][r] != -1) {
        return ans[l][r];
    }
    if(l == r) {
        return arr[l];
    }
    for(int i = l; i < r; ++i) {
        int a = calc(l, i);
        int b = calc(i + 1, r);
        if(a && a == b) {
            return ans[l][r] = a + 1;
        }
    }
    return ans[l][r] = 0;
}

int get(int i, int j) {
    if(i > n) {
        return j == i? 0: inf;
    }
    if(dp[i][j] != -1) {
        return dp[i][j];
    }
    int res = get(i + 1, j);
    if(calc(j, i)) {
        res = min(res, get(i + 1, i + 1) + 1);
    }
    return dp[i][j] = res;
}

void solve() {
    memset(ans, -1, sizeof ans);
    memset(dp, -1, sizeof dp);
    cout << get(1, 1) << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
