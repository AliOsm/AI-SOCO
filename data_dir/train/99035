#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <string>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
const int mod = 1000000007;

bool b[100005] = {};
int d[100005], e[100005];
ll z;
vector<int> g[100005];

void dfs(int x, int p) {
    ll s = 0, t = 0;
    for (int i : g[x]) if (i != p) {
        dfs(i, x);
        d[x] += d[i];
        e[x] += e[i];
        if (b[x]) s += 1ll * d[i] * d[i], t += 1ll * e[i] * e[i];
        else s += 1ll * d[i] * e[i];
    }
    if (b[x]) z += (1ll * d[x] * d[x] - s + 1ll * e[x] * e[x] - t) / 2 + d[x] + 1;
    else z += 1ll * d[x] * e[x] - s + e[x];
    if (b[x]) swap(d[x], e[x]), e[x]++;
    else d[x]++;
}

int main() {
    ios::sync_with_stdio(false);
    int n, a[100005] = {}, u, v;
    ll y = 0;
    cin >> n;
    for (int i = 1; i <= n; i++) cin >> a[i];
    for (int i = 1; i < n; i++) cin >> u >> v, g[u].push_back(v), g[v].push_back(u);
    for (int i = 0; i < 20; i++) {
        for (int j = 1; j <= n; j++) b[j] = ((a[j] & (1 << i)) != 0), d[j] = e[j] = 0;
        z = 0;
        dfs(1, 1);
        //for (int j = 1; j <= n; j++) cout << d[j] << ' '; cout << '\n';
        //for (int j = 1; j <= n; j++) cout << e[j] << ' '; cout << '\n';
        //cout << z << '\n';
        y += (1 << i) * z;
    }
    cout << y;
}
