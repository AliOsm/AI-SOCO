#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <assert.h>
using namespace std;

#define ll long long
#define MP make_pair

#define sce() scanf("\n");
#define sc(n) scanf("%d", &n)
#define sc2(a,b) scanf("%d%d", &a, &b)
#define sc3(a,b,c) scanf("%d%d%d", &a, &b, &c)

const int mod = 1e9 + 7;

bool is_edge(const string &a, const string &b) {
    int col = 0;
    for (int i = 0; i < a.size(); ++i) {
        if (a[i] != b[i]) {
            col++;
        }
    }
    return col == 1;
}

vector<string> get_edges(const string &a, const string &t1, const string &t2) {
    int k = a.size();
    vector<string> b;

    for (int i = 0; i < k; ++i) {
        string t = a;
        if (a[i] == '0') {
            t[i] = '1';
        } else {
            t[i] = '0';
        }

        if (t != t1 && t != t2) {
            b.push_back(t);
        }
    }

    sort(b.begin(), b.end());
    return b;
}

pair<int, int> p[111111];
int t[111111][3];

int main()
{
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w+", stdout);

    ios_base::sync_with_stdio(false);

    /*string t1 = "";
    string t2 = "";

    t1 = "000";
    t2 = "111";

//    cin >> t1 >> t2;

    int k = t1.size();
    int c = k;
    if (is_edge(t1, t2)) {
        cout << t1 << " " << t2 << endl;
        c--;
    }

    vector<string> v1 = get_edges(t1, t1, t2);
    vector<string> v2 = get_edges(t2, t1, t2);

    for (int i = 0; i < v1.size(); ++i) {
        for (int j = 0; j < v2.size(); ++j) {
            if (v1[i] == v2[j]) {
                cout << t1 << " " << v1[i] << " " << v2[j] << " " << t2 << endl;
                c--;
            }
        }
    }


    cout << "YES" << endl;*/

    int n = 0;
    cin >> n;

    for (int i = 0; i < n; ++i) {
        cin >> p[i].first >> p[i].second;
    }

    sort(p, p + n);
    p[n] = MP(2e9+20, 1);

    t[0][1] = 1;
    if (p[0].first + p[0].second < p[1].first) {
        t[0][2] = 1;
    }

    vector<int> x(n + 1);
    vector<int> h(n + 1);
    for (int i = 0; i <= n; ++i) {
        x[i] = p[i].first;
        h[i] = p[i].second;
    }

    for (int i = 1; i < n; ++i) {
        t[i][0] = max(t[i - 1][0], t[i - 1][1]);
        t[i][0] = max(t[i][0], t[i - 1][2]);

        if (x[i] - h[i] > x[i - 1]) {
            t[i][1] = max(t[i - 1][0], t[i - 1][1]);
            if (x[i] - h[i] > x[i - 1] + h[i - 1]) {
                t[i][1] = max(t[i][1], t[i - 1][2]);
            }
            t[i][1]++;
        }

        if (x[i] + h[i] < x[i + 1]) {
            t[i][2] = max(t[i - 1][0], t[i - 1][1]);
            t[i][2] = max(t[i][2], t[i - 1][2]);
            t[i][2]++;
        }
    }

    int ans = max(max(t[n - 1][0], t[n - 1][1]), t[n - 1][2]);
    cout << ans << endl;

    return 0;
}

















