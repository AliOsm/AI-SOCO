//http://codeforces.com/contest/899/problem/F

#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <algorithm>
#include <iterator>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <iomanip>
#include <fstream>

using namespace std;

typedef pair <int, int> pii;
typedef pair <long long, long long> pll;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

#define endl "\n"
#define mp make_pair

const int mod = 1000000007;
const int INF = 1000000000;

int n, m, d[200005];
set <int> pos[256];
vector <int> cur;
vector <pair <int, char>> result;

void update(int index);
int getSum(int index);
int getShift(int index);
int getPrimaryValue(int x);

int main() {
    int l, r;
    char c;
    string str;

    ios::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n >> m >> str;

    for (int i = 0; i < n; i++)
        pos[str[i]].insert(i + 1);

    for (int i = 1; i <= m; i++) {
        cin >> l >> r >> c;

        set <int>::iterator it = pos[c].end(), it1;

        int L = 1, R = n, mid, f;

        for (int j = 0; (j < 20) && (L <= R); j++) {
            mid = (L + R) / 2;
            it1 = pos[c].lower_bound(mid);

            if (it1 == pos[c].end())
                R = mid - 1;
            else {
                f = *it1;
                f -= getSum(f);

                if (f < l)
                    L = mid + 1;
                else {
                    it = it1;
                    R = mid - 1;
                }
            }
        }

        cur.clear();

        while ((it != pos[c].end()) && (*it - getSum(*it) <= r)) {
            cur.push_back(*it);
            it = pos[c].erase(it);
        }

        for (int j = 0; j < cur.size(); j++)
            update(cur[j]);
    }

    for (int i = 0; i < 256; i++) {
        for (set<int>::iterator it = pos[i].begin(); it != pos[i].end(); it++)
            result.push_back(mp(*it, char(i)));
    }

    sort(result.begin(), result.end());

    for (int i = 0; i < result.size(); i++)
        cout << result[i].second;

    cout << endl << endl;

    return 0;
}

void update(int index) {
    for (; index <= n; index |= index + 1)
        d[index]++;
}

int getSum(int index) {
    int res = 0;

    for (; index > 0; index = (index & (index + 1)) - 1)
        res += d[index];

    return res;
}

int getPrimaryValue(int x) {
    int l = 0, r = n - x, mid, f, result = x;

    for (int i = 0; i < 20; i++) {
        mid = (l + r) / 2;
        f = getSum(x + mid);

        if (f >= mid) {
            result = f + x;
            r = mid - 1;
        }
        else
            l = mid + 1;
    }

    return result;
}