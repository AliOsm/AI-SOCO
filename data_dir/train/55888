#include <bits/stdc++.h>
using namespace std;

typedef long double ld;
typedef complex<ld> point;
typedef pair<ld, ld> line;

#define X real()
#define Y imag()

const ld PI = acos(-1);
const ld eps = 1e-10;
const ld inF = 1e18;
const int N = 2e5 + 100;

void YES();
void NO();
void get_len();
void get_theta();
void input();
void read(point &a);
void check(point, point);
bool lie_on(point, line);
bool same(ld, ld);
ld DEG(ld);
ld RAD(ld);
ld dis(point, point);
point to_point(ld, ld);
point rot(point, point, ld);
line LINE(point, point);

int n;
point p[N];

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		read(p[i]);
	line x = LINE(p[0], p[1]);
	check(p[0], p[1]);
	for (int i = 2; i < n; i++)
		if (lie_on(p[i], x) == false) {
			check(p[0], p[i]);
			check(p[1], p[i]);
			NO();
			break;
		}
}

void YES() {
	cout << "YES\n";
	exit(0);
}
void NO() {
	cout << "NO\n";
	exit(0);
}
void check(point a, point b) {
	line x = LINE(a, b);
	vector<int> vec;
	for (int i = 0; i < n; i++)
		if (lie_on(p[i], x) == false)
			vec.push_back(i);
	if (vec.size() <= 2)
		YES();
	line y = LINE(p[vec[0]], p[vec[1]]);
	for (int x: vec)
		if (lie_on(p[x], y) == false)
			return;
	YES();
}
void read(point &a) {
	ld x, y;
	cin >> x >> y;
	a = point(x, y);
}
bool lie_on(point a, line l) {
	if (same(l.first, inF))
		return same(a.X, l.second);
	return same(a.Y, l.first * a.X + l.second);
}
bool same(ld a, ld b) {
	return fabs(a - b) < eps;
}
ld dis(point a, point b) {
	return sqrt(pow(real(a - b), 2) + pow(imag(a - b), 2));
}
ld DEG(ld x) {
	return x * 180 / PI;
}
ld RAD(ld x) {
	return x * PI / 180;
}
point to_point(ld len, ld theta) {
	return len * point(cos(RAD(theta)), sin(RAD(theta)));
}
point rot(point a, point b, ld theta) {
	return (a - b) * to_point(1, theta) + b;
}
line LINE(point a, point b) {
	line x;
	if (same(a.X, b.X))
		x = line(inF, a.X);
	else {
		x.first = (b - a).Y / (b - a).X;
		x.second = a.Y - a.X * x.first;
	}
	return x;
}
