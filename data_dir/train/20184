#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <fstream>
#include <math.h>
#include <string>
#include <algorithm>
#include <sstream>
#include <cmath>
#include <queue>
#include <time.h>
#include <stdio.h>
#include <list>
#include <stdlib.h>

using namespace std;

#define JUDJE 1488

#ifndef JUDJE

ifstream in("input.txt");
//ofstream out("numbers.txt");
#define cin in
//#define cout out

#endif

#define ll long long
#define MOD 1000000007
#define mp(a, b) make_pair(a, b)
#define PI 3.1415926535
#define EPS 0.000001
#define pii pair<ll, ll>
const int INF = 1000000001;

char getNe(char a, char b)
{
    if('a' != a && b != 'a')
        return 'a';
    if('b' != a && b != 'b')
        return 'b';
    return 'c';
}

int main()
{
    int n, t;
    cin >> n >> t;
    string s1, s2;
    cin >> s1 >> s2;
    vector<int> neravni;
    vector<int> ravni;
    for(int i = 0; i < n; ++i)
        if(s1[i] != s2[i])
            neravni.push_back(i);
        else
            ravni.push_back(i);
    if(neravni.size() > 2*t)
    {
        cout << -1;
        return 0;
    }
    string ans(s1.size(), 'a');
    if(neravni.size() & 1)
    {
        ans[neravni.back()] = getNe(s1[neravni.back()], s2[neravni.back()]);
        neravni.pop_back();
        --t;
    }
    if(neravni.size() > 2*t)
    {
        cout << -1;
        return 0;
    }
    for(int i = 0; i < neravni.size(); i += 2)
    {
        if(neravni.size() - i + ravni.size() > t)
        {
            ans[ neravni[i] ] = s1[neravni[i]];
            ans[ neravni[i+1] ] = s2[neravni[i+1]];
            --t;
        }
        else
        {
            ans[neravni[i]] = getNe( s1[neravni[i]], s2 [neravni[i]]);
            ans[neravni[i+1]] = getNe( s1[neravni[i+1]], s2 [neravni[i+1]]);
            t -= 2;
        }
    }

    for(int i = 0; i < ravni.size(); ++i)
    {
        if(t)
        {
            ans[ ravni[i] ] = getNe(s1[ravni[i]], s2[ravni[i]]);
            --t;
        }
        else
        {
            ans[ ravni[i] ] = s1[ravni[i]];
        }
    }
    cout << ans;

}
/*

*/
