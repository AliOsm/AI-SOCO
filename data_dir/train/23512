#include <bits/stdc++.h>

using namespace std;

const int C = -2e9;

struct P {
  int x, y;
  char type;
  bool operator<(const P& p) const {
    if (x == C || p.x == C) {
      return y < p.y;
    }
    return x < p.x;
  }
};

bool cmpCols(const P& a, const P& b) {
  return a.y < b.y;
}

bool cmpRows(const P& a, const P& b) {
  return a.x < b.x;
}

int main() {
#ifndef ONLINE_JUDGE
  freopen("input.in", "r", stdin);
#endif
  int n, x0, y0;
  scanf("%d %d %d\n", &n, &x0, &y0);
  map<int, vector<P>> rows, cols, di1s, di2s;
  for (int i = 0; i < n; ++i) {
    char type;
    int x, y;
    scanf("%c %d %d\n", &type, &x, &y);
    rows[x].push_back({x, y, type});
    cols[y].push_back({x, y, type});
    di1s[x - y].push_back({x, y, type});
    di2s[x + y].push_back({x, y, type});
  }

  bool check = false;

  // row
  auto &row = rows[x0];
  sort(row.begin(), row.end(), cmpCols);
  auto after0 = upper_bound(row.begin(), row.end(), P{C, y0, 0});
  if (after0 != row.end() && (after0->type == 'R' || after0->type == 'Q')) {
    check = true;
  }
  if (after0 != row.begin()) {
    --after0;
    if (after0->type == 'R' || after0->type == 'Q') {
      check = true;
    }
  }

  // col
  auto &col = cols[y0];
  sort(col.begin(), col.end(), cmpRows);
  auto after1 = upper_bound(col.begin(), col.end(), P{x0, C, 0});
  if (after1 != col.end() && (after1->type == 'R' || after1->type == 'Q')) {
    check = true;
  }
  if (after1 != col.begin()) {
    --after1;
    if (after1->type == 'R' || after1->type == 'Q') {
      check = true;
    }
  }

  // di1
  auto &di1 = di1s[x0 - y0];
  sort(di1.begin(), di1.end(), cmpCols);
  auto after2 = upper_bound(di1.begin(), di1.end(), P{C, y0, 0});
  if (after2 != di1.end() && (after2->type == 'B' || after2->type == 'Q')) {
    check = true;
  }
  if (after2 != di1.begin()) {
    --after2;
    if (after2->type == 'B' || after2->type == 'Q') {
      check = true;
    }
  }

  // di2
  auto &di2 = di2s[x0 + y0];
  sort(di2.begin(), di2.end(), cmpCols);
  auto after3 = upper_bound(di2.begin(), di2.end(), P{C, y0, 0});
  if (after3 != di2.end() && (after3->type == 'B' || after3->type == 'Q')) {
    check = true;
  }
  if (after3 != di2.begin()) {
    --after3;
    if (after3->type == 'B' || after3->type == 'Q') {
      check = true;
    }
  }

  puts(check ? "YES" : "NO");
}


