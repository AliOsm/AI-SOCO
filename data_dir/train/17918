#include <cstdio>
#include <iostream>
#include <algorithm>
#include <map>
#include <set>
#include <vector>
#include <deque>
#include <string>
#include <cmath>
#include <cctype>
#include <locale>
#include <queue>
#include <utility>
#include <iomanip>

#define forn(n) for(int i = 0; i < n; i++)
#define fornm(n, m) for(int i = 0; i < n; i++) for(int j = 0; j < m; j++)
#define pb push_back
#define pf push_front
#define ll long long
#define ld long double
#define pi 3.141592653589793238462643383

using namespace std;

string s;
int n;
int memo[2][2][51][101][400];
int off = 200;
int oo = -123456789;
int solve(int inv, int dir, int num, int idx, int loc)
{
   if(idx == s.length())
   {
      if(num == 0) return abs(loc);
      else return oo;
   }
   int ret = memo[inv][dir][num][idx][loc+off];
   if(ret != -1) return ret;
   ret = 0;
   if(num > 0) ret = max(ret, solve(1^inv, dir, num-1, idx, loc));
   if(inv == 0)
   {
	   if(dir == 0)
	   {
	      if(s[idx] == 'F') ret = max(ret, solve(0, dir, num, idx+1, loc+1));
	      else ret = max(ret, solve(0, 1^dir, num, idx+1, loc));
	   }
	   else
	   {
	      if(s[idx] == 'F') ret = max(ret, solve(0, dir, num, idx+1, loc-1));
	      else ret = max(ret, solve(0, 1^dir, num, idx+1, loc));
	   }
   }
   else
   {
	   if(dir == 0)
	   {
	      if(s[idx] == 'T') ret = max(ret, solve(0, dir, num, idx+1, loc+1));
	      else ret = max(ret, solve(0, 1^dir, num, idx+1, loc));
	   }
	   else
	   {
	      if(s[idx] == 'T') ret = max(ret, solve(0, dir, num, idx+1, loc-1));
	      else ret = max(ret, solve(0, 1^dir, num, idx+1, loc));
	   }
   }
   return memo[inv][dir][num][idx][loc+off] = ret;
}

int main() 
{
   s; cin >> s;
   n; cin >> n;
   for(int i = 0; i < 2; i++)
   {
      for(int j = 0; j < 2; j++)
      {
         for(int k = 0; k < 51; k++)
         {
            for(int ii = 0; ii < 101; ii++)
            {
               for(int jj = 0; jj < 400; jj++)
               {
                  memo[i][j][k][ii][jj] = -1;
               }
            }
         }
      }
   }
   cout << solve(0, 0, n, 0, 0) << endl;
   return 0;
}
