#include <bits/stdc++.h>
using namespace std;
//using lint = long long;



struct P
{
    int x,y,z;

    bool operator<(const P &a)const{

        if(x!=a.x) return x>a.x;
        return y>a.y;
    }

};

vector<int> v;

//bitset<4001000> b;
int i,n,d,m,k,a,b,c;

int o[222221];
int l[222221];
int j[1];
int e;


//int dx[10]={2,2,-2,-2,1,1,-1,-1},dy[10]={1,-1,1,-1,2,-2,2,-2};

int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000009,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[1];
stack<int> s;
//set<int> se;
priority_queue<int> q;
//queue<int> q;
//string r,r1;
char r[233331];
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
map<int,int> p;
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
//list<int> l;


//deque<int> de;
//srand((int)time(NULL));




bool as(P a,P b)
{
    if(a.x!=b.x)
       return a.x>b.x;
    return a.y<b.y;


}



int main()
{
    scanf("%d %d",&a,&b);
    for(int t=1;t<=a;t++)
    {
        scanf("%d",&o[t]);
    }
    scanf("%s",r+1);
    for(int t=1;t<=a;t++)
    if(r[t]==r[t+1])
    {
        q.push(o[t]);
    }
    else
    {
        q.push(o[t]);
        for(int t=1;q.size()&&t<=b;t++)
        {

        //printf("%d\n",q.top());
        x+=q.top(),q.pop();

        }
        for(;q.size();q.pop());
    }
    printf("%lld",x);
}



