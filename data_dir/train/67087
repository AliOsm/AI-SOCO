#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_set>
#include <bitset>


using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)
#define all(a) a.begin(), a.end()
#define vi vector<int>
#define v(a) vector<a>

//typedef long double ld;
typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 2e18 + 7;

/*
template <class T1, class T2>
istream & operator >> (istream &in, pair<T1, T2> a) {
return in >> a.first >> a.second;
}*/

/*
const int MAX_MEM = 9e8;
int mpos = 0;
char mem[MAX_MEM];
inline void * operator new ( size_t n ) {
char *res = mem + mpos;
mpos += n;
assert(mpos <= MAX_MEM);
return (void *)res;
}
inline void operator delete ( void * ) { }

inline void * operator new [] ( size_t ) { assert(0); }
inline void operator delete [] ( void * ) { assert(0); }
*/


struct node {
	node *l, *r;
	int y, sz, mn;
	int val;
	node() {}
	node(int val) : val(val) {
		l = r = 0;
		y = (rand() << 15) | rand();
		sz = 1, mn = val;
	}
};
typedef node * pnode;
int get_size(pnode v) {
	if (v)
		return v->sz;
	return 0;
}
void upd(int &a, int b) {
	a = min(a, b);
}
void rec(pnode t) {
	if (!t)
		return;
	t->sz = 1;
	t->mn = t->val;
	if (t->l) {
		t->sz += t->l->sz;
		upd(t->mn, t->l->mn);
	}
	if (t->r) {
		t->sz += t->r->sz;
		upd(t->mn, t->r->mn);
	}

}
void merge(pnode &t, pnode l, pnode r) {
	if (!l || !r) {
		t = max(l, r);
		rec(t);
		return;
	}
	if (l->y > r->y) {
		t = l;
		merge(l->r, l->r, r);
	}
	else {
		t = r;
		merge(r->l, l, r->l);
	}
	rec(t);
	return;
}
void split(pnode t, pnode &l, pnode &r, int x) {
	if (!t)  {
		l = 0, r = 0;
		return;
	}
	int sz = get_size(t->l);
	if (sz >= x) {
		r = t;
		split(t->l, l, r->l, x);
	}
	else {
		l = t;
		split(t->r, l->r, r, x - sz - 1);
	}
	rec(t);
	return;
}
int find_min(pnode t) {
	if (t->l && (t->mn == t->l->mn)) {
		return find_min(t->l);
	}
	if (t->val == t->mn)
		return get_size(t->l);
	return find_min(t->r) + get_size(t->l) + 1;
}

int main() {
	cin.sync_with_stdio(false);
	cin.tie(0);

//	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("delicious.in", "r", stdin);freopen("delicious.out", "w", stdout);
	int n;
	cin >> n;
	pnode t = 0;
	forn(i, n) {
		int a;
		cin >> a;
		merge(t, t, new node(a));
	}
	ll ans = 0;
	while (t) {
		int k = find_min(t);
		ans += k + 1;
		pnode l, r;
		split(t, l, r, k);
		pnode mid;
		split(r, mid, r, 1);
		merge(t, r, l);
	}
	cout << ans;

	return 0;
}