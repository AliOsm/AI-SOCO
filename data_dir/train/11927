#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

char s[10000 + 10];
int main() {
  int n;
  scanf("%d%s", &n, s);
  bool found = false;
  for (int i = 1; i < n; ++i) {
    if (s[i - 1] == '1' && s[i] == '1') {
      found = true;
    }
  }
  for (int i = 0, j; i < n; i = j) {
    for (; i < n && s[i] == '1'; ++i);
    if (i == n) break;
    for (j = i + 1; j < n && s[j] == '0'; ++j);
    if (j - i > 2) found = true;
    if (j - i == 2 && (i == 0 || j == n)) found = true;
    if (j - i == n) found = true;
  }
  puts(!found  ? "Yes" : "No");
  return 0;
}
