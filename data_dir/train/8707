#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int N = 1000;
int n, m, w, a[N], b[N], p[N], A[N], B[N], c[N << 1], d[N << 1], nxt[N << 1], dp[N << 1][N + 1], size;
vector<pair<int, int> > at[N];

int find(int x) {
  if (x == p[x]) {
    return x;
  }
  return p[x] = find(p[x]);
}

int calc(int at, int can) {
  if (at == size) {
    return 0;
  }
  int &res = dp[at][can];
  if (res != -1) {
    return res;
  }
  res = max(res, calc(at + 1, can));
  if (c[at] <= can) {
    res = max(res, calc(nxt[at], can - c[at]) + d[at]);
  }
  return res;
}

int main() {
  // freopen("in.txt", "r", stdin);
  scanf("%d%d%d", &n, &m, &w);
  for (int i = 0; i < n; ++i) {
    scanf("%d", &a[i]);
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d", &b[i]);
  }
  for (int i = 0; i < n; ++i) {
    p[i] = i;
    A[i] = a[i];
    B[i] = b[i];
  }
  int u, v;
  for (int i = 0; i < m; ++i) {
    scanf("%d%d", &u, &v);
    u = find(u - 1);
    v = find(v - 1);
    if (u != v) {
      p[u] = v;
      A[v] += A[u];
      B[v] += B[u];
    }
  }
  for (int i = 0; i < n; ++i) {
    if (find(i) == i) {
      at[i].push_back(make_pair(A[i], B[i]));
    }
    at[find(i)].push_back(make_pair(a[i], b[i]));
  }
  for (int i = 0; i < n; ++i) {
    int go = size + at[i].size();
    for (int j = 0; j < at[i].size(); ++j) {
      c[size] = at[i][j].first;
      d[size] = at[i][j].second;
      nxt[size++] = go;
    }
  }
  memset(dp, -1, sizeof dp);
  printf("%d\n", calc(0, w));
  return 0;
}
