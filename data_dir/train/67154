#include<bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define per(i, a, b) for(int i=(b)-1; i>=(a); i--)
#define sz(a) (int)a.size()
#define de(a) cout << #a << " = " << a << endl
#define dd(a) cout << #a << " = " << a << " "
#define all(a) a.begin(), a.end()
#define pw(x) (1ll<<(x))
#define endl "\n"
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef double db;

void file_put() {
    freopen("filename.in", "r", stdin);
    freopen("filename.out", "w", stdout);
}

namespace GaussDB{
	static const int N = 505;
	db a[N][N], x[N];
	bool ok[N];
	int free[N], free_num;
	const db eps = 1e-14;
	int Gauss(int equ, int var){
		int k, col, p;
		fill_n(ok, var, 0); free_num = 0;
		fill_n(x, var, 0);
		for(k = col = 0; k < equ && col < var; ++k, ++col){
			p = k;
			rep(i, k+1, equ) if(fabs(a[i][col]) > fabs(a[p][col])) p = i;
			if (p != k) rep(j, k, var+1) swap(a[p][j], a[k][j]);
			if(fabs(a[k][col]) < eps) {k--; continue;}
			rep(i, k+1, equ){
				if(fabs(a[i][col]) < eps) continue;
				db t = a[i][col] / a[k][col];
				rep(j, col, var+1) a[i][j] -= a[k][j] * t;
			}
		}
		rep(i, k, equ) if (fabs(a[i][var]) > eps) return -1;
		if(k < var) return var - k;
		per(i, 0, var) {
			db t = a[i][var];
			rep(j, i+1, var) if (fabs(a[i][j]) > eps) t -= x[j] * a[i][j];
			x[i] = t / a[i][i];
		}
		return 0;
	}
}

const int N=25;
int n,m,a,b,x,y; double p[N],q[N]; vi V[N];

inline int h(int x,int y) { return (x-1)*n+y-1; }
inline void link(int x,int y,double p) {
	GaussDB::a[y][x]+=p;
} 

int main() {
	//file_put();
	
	scanf("%d%d%d%d",&n,&m,&a,&b);
	rep(i,1,m+1) scanf("%d%d",&x,&y),V[x].pb(y),V[y].pb(x);
	rep(i,1,n+1) scanf("%lf",&p[i]),q[i]=(1-p[i])/sz(V[i]);
	rep(i,1,n+1) rep(j,1,n+1) {
		GaussDB::a[h(i,j)][h(i,j)]+=-1;
		if (i==j) continue;
		for (auto yi:V[i]) for (auto yj:V[j]) link(h(i,j),h(yi,yj),q[i]*q[j]);
		for (auto yj:V[j]) link(h(i,j),h(i,yj),p[i]*q[j]);
		for (auto yi:V[i]) link(h(i,j),h(yi,j),q[i]*p[j]);	
		link(h(i,j),h(i,j),p[i]*p[j]);
	}
	//de(233); return 0;
	GaussDB::a[h(a,b)][n*n]+=-1;
	GaussDB::Gauss(n*n,n*n);
	rep(i,1,n+1) printf("%.12f ",GaussDB::x[h(i,i)]);
	printf("\n");
	
	return 0;
}

