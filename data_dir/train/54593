#include <bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
using namespace std;
int tree[5000000],lazy[5000000],pre[1500000];
pii A[1500000];
pair<pii,int> Q[300005];
void build(int pos,int l,int r){
	if(l==r){
		tree[pos]=A[l].S-A[l].F+1;
		return;
	}
	int mid=(l+r)/2;
	build(pos*2,l,mid);
	build(pos*2+1,mid+1,r);
	tree[pos]=tree[pos*2]+tree[pos*2+1];
}
void update(int pos,int l,int r,int a,int b,int k){
	if(lazy[pos]){
		tree[pos]=(pre[r]-pre[l-1])*(lazy[pos]-1);
		if(l!=r)
			lazy[pos*2]=lazy[pos*2+1]=lazy[pos];
		lazy[pos]=0;
	}
	if(r<a or l>b)
		return;
	if(l>=a and r<=b){
		tree[pos]=(pre[r]-pre[l-1])*(k-1);
		if(l!=r)
			lazy[pos*2]=lazy[pos*2+1]=k;
		return;
	}
	int mid=(l+r)/2;
	update(pos*2,l,mid,a,b,k);
	update(pos*2+1,mid+1,r,a,b,k);
	tree[pos]=tree[pos*2]+tree[pos*2+1];
}
int query(int pos,int l,int r,int a,int b){
	if(lazy[pos]){
		tree[pos]=(pre[r]-pre[l-1])*(lazy[pos]-1);
		if(l!=r)
			lazy[pos*2]=lazy[pos*2+1]=lazy[pos];
		lazy[pos]=0;
	}
	if(r<a or l>b)
		return 0;
	if(l>=a and r<=b)
		return tree[pos];
	int mid=(l+r)/2;
	return query(pos*2,l,mid,a,b)+query(pos*2+1,mid+1,r,a,b);
}
int main()
{
	//ios_base::sync_with_stdio(false);
	//cin.tie(0);
	//cout.tie(0);
	int n,q,i,sz,p;
	vector<pii> v;
	scanf("%d%d",&n,&q);
	for(i=1;i<=q;i++){
		scanf("%d%d%d",&Q[i].F.F,&Q[i].F.S,&Q[i].S);
		v.pb({Q[i].F.F,i});
		v.pb({Q[i].F.S,-i});
	}
	sort(all(v));
	sz=0,p=1;
	for(auto x:v){
		if(p<x.F)
			A[++sz]={p,x.F-1};
		if(p-1<x.F)
			A[++sz]={x.F,x.F};
		p=x.F+1;
		if(x.S>0)
			Q[x.S].F.F=sz;
		else
			Q[-x.S].F.S=sz;
	}
	if(p<=n)
		A[++sz]={p,n};
	for(i=1;i<=sz;i++)
		pre[i]=pre[i-1]+A[i].S-A[i].F+1;
	build(1,1,sz);
	for(i=1;i<=q;i++){
		update(1,1,sz,Q[i].F.F,Q[i].F.S,Q[i].S);
		printf("%d\n",query(1,1,sz,1,sz));
	}
	return 0;
}