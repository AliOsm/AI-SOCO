#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>   
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

char c[1001], s[51], t[51];
int nxt_s[1001][26], nxt_t[1001][26], dp[1001][51][51], p[51];

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> c + 1 >> s + 1 >> t + 1;
   int n = strlen (s + 1), m = strlen (t + 1), k = strlen (c + 1);            
   for (int i = 2; i <= n; i ++) {
      int j = p[i - 1];
      while (j > 0 && s[j + 1] != s[i]) j = p[j];   
      if (s[j + 1] == s[i]) j ++;
      p[i] = j;
   }
   for (int i = 0; i <= n; i ++) {
      for (char d = 'a'; d <= 'z'; d ++) {
         int j = i;
         while (j > 0 && s[j + 1] != d) j = p[j];
         if (s[j + 1] == d) j ++;
         nxt_s[i][d - 'a'] = j;
      }
   }
   memset (p, 0, sizeof p);
   for (int i = 2; i <= m; i ++) {
      int j = p[i - 1];
      while (j > 0 && t[j + 1] != t[i]) j = p[j];
      if (t[j + 1] == t[i]) j ++;
      p[i] = j;
   }
   for (int i = 0; i <= m; i ++) {
      for (char d = 'a'; d <= 'z'; d ++) {
         int j = i;
         while (j > 0 && t[j + 1] != d) j = p[j];
         if (t[j + 1] == d) j ++;
         nxt_t[i][d - 'a'] = j;
      }
   }
   for (int i = 0; i <= k; i ++)
      for (int j = 0; j <= n; j ++)
         for (int l = 0; l <= m; l ++)
            dp[i][j][l] = -mod;
   dp[0][0][0] = 0;
   for (int i = 0; i < k; i ++) {
      for (int ks = 0; ks <= n; ks ++) {
         for (int kt = 0; kt <= m; kt ++) {
            for (char d = 'a'; d <= 'z'; d ++) {
               if (c[i + 1] != '*' && c[i + 1] != d) continue;
               int new_s = nxt_s[ks][d - 'a'], new_t = nxt_t[kt][d - 'a'];
               dp[i + 1][new_s][new_t] = max (dp[i + 1][new_s][new_t], dp[i][ks][kt] + (new_s == n) - (new_t == m));
            }
         }
      }
   }
   int ans = -mod;             
   for (int i = 0; i <= n; i ++)
      for (int j = 0; j <= m; j ++)
         ans = max (ans, dp[k][i][j]); 
   cout << ans;
}                                     

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
// cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
