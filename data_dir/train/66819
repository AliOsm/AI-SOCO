#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
using namespace std;
template<class T> inline T sqr(T x) { return x * x; }
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const LL INF = (LL)1e18;
const int maxn = (int)1e5 + 10;
vector<pii> g[maxn];
int p[maxn],path[maxn];
LL d[maxn];
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	int n,m,a,b,c;
	cin>>n>>m;
	for(int i = 0; i < m; i++)
	{
		scanf("%d%d%d",&a,&b,&c);
		--a;
		--b;
		g[a].pb(mp(b,c));
		g[b].pb(mp(a,c));
	}
	memset(p,-1,sizeof(p));
	for(int i = 0; i < n; i++)
		d[i] = INF;
	d[0] = 0;
	priority_queue< pair<LL, int> > q;
	q.push(mp(-d[0],0));
	while(!q.empty())
	{
		LL dd = -q.top().first;
		int v = q.top().second;
		q.pop();
		if (dd > d[v]) continue;
		for(int i = 0; i < sz(g[v]); i++)
		{
			int to = g[v][i].first;
			int cost = g[v][i].second;
			if (dd + cost < d[to])
			{
				d[to] = dd + cost;
				p[to] = v;
				q.push(mp(-d[to],to));
			}
		}
	}
	if (d[n - 1] == INF) cout<<-1<<endl; else
	{
		int cur = n - 1,len = 0;
		while(cur != -1)
		{
			path[len++] = cur;
			cur = p[cur];
		}
		for(int i = len - 1; i >= 0; i--)
			cout<<path[i] + 1<<" ";
	}
	return 0;
}

