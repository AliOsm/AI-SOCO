#include <iostream>
#include <cstdio>
#include <cmath>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <ctime>
#include <memory.h>
#include <assert.h>
#include <complex>
#include <ctime>  
#include <cstdlib>
using namespace std;

#pragma comment(linker, "/STACK:100000000")

#define mp make_pair
#define pb push_back
#define sz(x) (int)(x).size()
#define ll long long
#define ull unsigned long long

vector<int> v[100100];

int vis[100100];

bool endd = false;

int stackk[100100];

bool a[100100];
void dfs(int s) {
    if(a[s]) return;
    a[s] = true;
    for(int i = 0, maxi = sz(v[s]); i < maxi; i++) dfs(v[s][i]);
}

void go(int cur, int last, int dist) {
    if(endd) return;
    stackk[dist] = cur;
    if(vis[cur] != 0) { // значит я в этой вершине уже был
        int pos = dist;
        int c = stackk[pos];
        int cnt = 0;
        do {
            if(sz(v[c]) > 0) cnt++;
            pos--;
            c = stackk[pos];
        } while(c != cur);
        if(cnt >= 3) {
            endd = true;
            printf("FHTAGN!\n");
            return;
        }
        else {
            endd = true;
            printf("NO\n");
            return;
        }
    }
    vis[cur] = dist;
    for(int i = 0, maxi = sz(v[cur]); i < maxi; i++) {
        if(endd) return;
        if(v[cur][i] != last) go(v[cur][i], cur, dist + 1);
    }
}

int main() {
    //freopen("input.txt", "rt", stdin);
    //freopen("cycle2.out", "wt", stdout);
    
    int n, m;
    scanf("%d %d", &n, &m);
    
    if(n != m) {
        printf("NO\n");
        return 0;
    }

    for(int i = 0; i < n; i++) {
        int a, b;
        scanf("%d %d", &a, &b);
        a--;
        b--;
        v[a].pb(b);
        v[b].pb(a);
    }

    for(int i = 0; i < n; i++) {
        if(sz(v[i]) < 1) {
            printf("NO\n");
            return 0;
        }
    }
    dfs(0);
    for(int i = 0; i < n; i++) {
        if(!a[i]) {
            printf("NO\n");
            return 0;
        }
    }

    for(int i = 0; i < n; i++) {
        if(endd) break;
        for(int j = 0; j < n; j++) vis[j] = 0;
        go(i, -1, 1);
    }
    if(!endd) printf("NO\n");

    return 0;
}