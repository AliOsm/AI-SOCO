#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <set>
#include <map>
#include <queue>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define ll long long
#define pb push_back
#define sz size()
#define mp make_pair
#define f first
#define s second

using namespace std;

const int maxn = int(1e5) + 7;
const int inf = 1<<30;
const int mod = int(1e9) + 7;

int n, m, a[maxn];
int t[4*maxn], mn[4*maxn];
int Prev[maxn], par[maxn], last[maxn], ans[maxn];
vector < pair < int, int > > v[maxn];

void upd(int v, int l, int r, int pos, int val) {
	if(l == r) { t[v] = val; return; }
	int mid = (l + r) >> 1;
	if(pos <= mid) upd(v+v, l, mid, pos, val);
	else upd(v+v+1, mid+1, r, pos, val);
	t[v] = t[v+v] + t[v+v+1];
}

int getsum(int v, int l, int r, int L, int R) {
	if(r < L || R < l) return 0;
	if(L <= l && r <= R) return t[v];
	int mid = (l + r) >> 1;
	return getsum(v+v, l, mid, L, R) + getsum(v+v+1, mid+1, r, L, R);
}

void update_min(int v, int l, int r, int pos, int val) {
	if(l == r) { mn[v] = val; return; }
	int mid = (l + r) >> 1;
	if(pos <= mid) update_min(v+v, l, mid, pos, val);
	else update_min(v+v+1, mid+1, r, pos, val);
	mn[v] = min(mn[v+v], mn[v+v+1]);
}

int getmin(int v, int l, int r, int L, int R) {
	if(r < L || R < l) return inf;
	if(L <= l && r <= R) return mn[v];
	int mid = (l + r) >> 1;
	return min(getmin(v+v, l, mid, L, R), getmin(v+v+1, mid+1, r, L, R));
}

void walk(int v, int l, int r) {
	if(l == r) {
		cout << mn[v] << " ";	
		if(l == n) cout << endl;
	}
	else {
		int mid = (l + r) >> 1;
		walk(v+v, l, mid);
		walk(v+v+1, mid+1, r);
	}
}

int main () { _
	#ifndef ONLINE_JUDGE
	freopen("in", "r", stdin);
	freopen("out", "w", stdout);
	#endif
		cin >> n;
		for(int i = 1; i <= n; i++)
			cin >> a[i];
		cin >> m;
		for(int i = 1; i <= m; i++) {		
			int l, r;
			cin >> l >> r;
			v[r].pb(mp(l, i));
		}	
		for(int i = 1; i <= n; i++) {
			par[i] = last[a[i]];	
		
			if(par[i]) upd(1, 1, n, last[a[i]], 0);	
			last[a[i]] = i;
			upd(1, 1, n, last[a[i]], 1);
			
			if(par[i] == 0 || par[par[i]] == 0) 
				Prev[i] = 0;
			else if(i - par[i] == par[i] - par[par[i]])
				Prev[i] = Prev[par[i]];
			else
				Prev[i] = par[par[i]] + 1;
				
			update_min(1, 1, n, i, Prev[i]);
			if(par[i]) update_min(1, 1, n, par[i], inf);
			
			sort(v[i].begin(), v[i].end());
			for(int j = 0; j < v[i].sz; j++) {
				int l = v[i][j].f;
				if(getmin(1, 1, n, l, i) > l) 
					ans[v[i][j].s] = 1;
				ans[v[i][j].s] += getsum(1, 1, n, l, i);
			}
		}
		for(int i = 1; i <= m; i++)
			cout << ans[i] << endl;
	return 0;
}
