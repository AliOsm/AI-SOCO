//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 3000001

ll tree[maxn],power[40],arr[maxn],flip[maxn];

void update(ll id,ll val,ll bit)
{
	if(id!=1)
	tree[id]++;
	if(bit<0)
	return;
	if(val&(1LL<<bit))
	update(2*id+1,val,bit-1);
	else
	update(2*id,val,bit-1);
}
set<ll>s;

int main()
{
	boost1;boost2;
	ll i,j,n,x,y,q,val,cur,level,ans,tot;

	power[0]=1;
	for(i=1;i<=25;i++)
	power[i]=2*power[i-1];
	cin>>n>>q;
	for(i=1;i<=n;i++)
	{
		cin>>arr[i];
		if(s.find(arr[i])==s.end())
		update(1,arr[i],20);
		s.insert(arr[i]);
	}
	//cout<<tree[2]<<" "<<tree[3]<<" "<<tree[5]<<" "<<tree[7]<<endl;
	while(q--)
	{
		cin>>val;
		for(i=20;i>=0;i--)
		{
			if(val&(1<<i))
			flip[i]=1-flip[i];
		}
		cur=1;
		ans=0;
		level=20;
		for(i=20;i>=0;i--)
		{
			tot=power[i];
			if(flip[level])
			x=2*cur+1;
			else
			x=2*cur;
			y=tree[x];
			//assert(y<=tot);
			if(y==tot)
			{
				ans=ans|(1<<i);
				if(flip[level])
				cur=2*cur;
				else
				cur=2*cur+1;
			}
			else
			{
				if(flip[level])
				cur=2*cur+1;
				else
				cur=2*cur;
			}
			level--;
		}
		cout<<ans<<endl;
	}
	return 0;
}

