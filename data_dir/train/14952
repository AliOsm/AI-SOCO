#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
vector<int>adj[100001];
int N,color[100001];
bool good[100001];

void dfs(int node, int parent){
  good[node]=true;
  for (int i=0;i<adj[node].size();i++){
    if ((adj[node][i]!=parent && color[adj[node][i]]==color[node]) || node==parent)
      dfs(adj[node][i],node);
  }
}
int main()
{
  int x[100001],y[100001];
  cin>>N;
  for (int i=1;i<N;i++){
    cin>>x[i]>>y[i];
    adj[x[i]].push_back(y[i]);
    adj[y[i]].push_back(x[i]);
  }
  for (int i=1;i<=N;i++)
    cin>>color[i];
  int X=-1,Y=-1;
  for (int i=1;i<N;i++){
    if (color[x[i]]!=color[y[i]]){
      X=x[i];
      Y=y[i];
      break;
    }
  }
  if (X==-1){
    cout<<"YES"<<endl<<1<<endl;
    return 0;
  }
  dfs(X,X);
  bool flag=true;
  for (int i=1;i<=N;i++){
    if (good[i]==false){
      flag=false;
      break;
    }
  }
  if (flag){
    cout<<"YES"<<endl<<X<<endl;
    return 0;
  }
  for (int i=1;i<=N;i++)
    good[i]=false;
  dfs(Y,Y);
  flag=true;
  for (int i=1;i<=N;i++){
    if (good[i]==false){
      flag=false;
      break;
    }
  }
  if (flag){
    cout<<"YES"<<endl<<Y<<endl;
    return 0;
  }
  cout<<"NO"<<endl;
  return 0;
}
