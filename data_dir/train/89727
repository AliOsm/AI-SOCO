#include <bits/stdc++.h>

//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

//using namespace __gnu_pbds;
using namespace std;

//template<typename T>
//using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef vector<int> vi;
typedef long long ll;

#define pb push_back
#define inf 0x3f3f3f3f
#define all(v) (v).begin() , (v).end()
#define ones(n) __builtin_popcount(n)
#define watch(x) cout << (#x) << " is " << (x) << endl

int di[] = {0, 0, 1, -1, 1, 1, -1, -1};
int dj[] = {1, -1, 0, 0, -1, 1, 1, -1};

struct planet {
    int a , b;
};

int n , rocket;
vector<planet> trip;

bool good(double fuel) {
    double rocketMass = fuel + rocket;
    for (int i = 1 ;i < trip.size() ;i++) {
        double f = rocketMass / trip[i - 1].a;
        if(f > fuel)
            return 0;

        fuel -= f;
        rocketMass = fuel + rocket;

        f = rocketMass / trip[i].b;
        if(f > fuel)
            return 0;

        fuel -= f;
        rocketMass = fuel + rocket;
    }

    return 1;
}
int main() {
#ifndef ONLINE_JUDGE
    freopen("input.in", "r", stdin);
#endif
    scanf("%d%d",&n,&rocket);

    int a , b;
    for (int i = 0 ;i < n ;i++) {
        scanf("%d%d",&a,&b);
        trip.pb({a , b});
    }

    trip.pb(trip[0]);

    double l = 0 , r = 1e9 , ans = -1;
    for (int i = 0 ;i < 200 ;i++) {
        double mid = (r + l) / 2;
        if(good(mid)) {
            ans = mid;
            r = mid;
        } else
            l = mid;
    }

    if(ans == -1)
        puts("-1");
    else
        printf("%.8f" , ans);
}