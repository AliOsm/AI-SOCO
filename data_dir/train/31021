#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define MAXN (1 << 20)

using namespace std;
using namespace __gnu_pbds;

template <typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int n;
int a[MAXN];

void read()
{
	scanf("%d", &n);

	for(int i = 0; i < n; i++)
		scanf("%d", &a[i]);
}

int dp[MAXN];

void solve()
{	
	for(int i = 0; i < n; i++)
	{
		int x = a[i], bak = a[i];
		for(int div = 1; div * div <= x; div++)
		{
			if(x % div == 0)
			{
				dp[x] = max(dp[x], dp[x / div] + 1);
				if(div != 1) dp[x] = max(dp[x], dp[div] + 1);
			}

			while(div != 1 && bak % div == 0)
				bak /= div;
		}

		if(x == bak)
			dp[x] = 1;
		else if(bak != 1)
		{
			dp[x] = max(dp[x], dp[x / bak] + 1);
			dp[x / bak] = max(dp[x / bak], dp[x]);
			dp[bak] = max(dp[x], dp[bak]);
		}

		for(int div = 1; div * div <= x; div++)
			if(x % div == 0)
			{
				dp[x / div] = max(dp[x / div], dp[x]);
				if(div != 1) dp[div] = max(dp[div], dp[x]);
			}

		//printf("%d:  \n", a[i]);
		//for(int z = 0; z <= x; z++)
		//printf("dp[%d] = %d\n", z, dp[z]);
		//printf("\n");
	
	}

	int ans = 0;
	for(int i = 0; i < n; i++)
		ans = max(ans, dp[a[i]]);

	printf("%d\n", ans);
}

int main()
{
	read();
	solve();
	return 0;
}

