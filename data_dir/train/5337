#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
//using namespace __gnu_pbds;

template <class T> void mini(T &l, T r) {l = min(l, r);}
template <class T> void maxi(T &l, T r) {l = max(l, r);}

//template <class T> using Tree = tree <T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

string to_string(string s) {
    return '"' + s + '"';
}

string to_string(bool a) {
    return a ? "T" : "F";
}

string to_string(const char* s) {
    return to_string((string) s);
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

#define X first
#define Y second

using ll = long long;
using ld = long double;

int h;

map <int, int> mem;

int op(int x) {
	int nx = x + h;
	if (nx > 2 * h)
		nx -= 2 * h;
	return nx;
}

int _ask(int x) {
	printf("? %d\n", x);
	fflush(stdout);
	int t;
	scanf("%d", &t);
	return t;
}

int ask(int x) {
	if (mem[x]) return mem[x];
	if (mem[op(x)]) return mem[x] = -mem[op(x)];
	int t = _ask(x);
	int t2 = _ask(op(x));
	return mem[x] = t2 - t;
}

int sgn(int x) {
	if (x > 0) return 1;
	if (x < 0) return -1;
	return 0;
}

void ans(int x) {
	printf("! %d\n", x);
	fflush(stdout);
	exit(0);
}

void run() {
	int n;
	scanf("%d", &n);
	h = n / 2;
	int l = 1, r = op(1);
	while (l != r) {
		debug(l, r);
		int dif = ask(l);
		int dif2 = ask(r);
		int md = (l + r) / 2;
		if (l > r) {
			md = op(md);
		}
		if (dif == 0) {
			ans(1);
			break;
		} else if (abs(dif) % 2 == 1) {
			ans(-1);
			break;
		} else {
			int difm = ask(md);
			if (difm == 0) {
				ans(md);
			}
			if (sgn(dif) * sgn(difm) == -1) {
				r = md;
			} else {
				l = md;
			}
		}
	}
}

int main() {
    run();
    return 0;
}

