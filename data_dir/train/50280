#include <bits/stdc++.h>

const int N = 200000 + 5;
int n,m;
int belong[N];

struct Event {
	int l,r,K,id;
	Event(int l_=0,int r_=0,int K_=0,int id_=0) 
		: l(l_),r(r_),K(K_),id(id_) {}
	bool operator < (const Event &t) const {
		if (r != t.r) return r < t.r;
		return K < t.K;
	}
}events[N];

bool work() {
	std::sort(events,events+n+m);
	std::set<std::pair<int,int> > set;
	std::set<std::pair<int,int> >::iterator it;
	for (int i = 0; i < n+m; ++ i) {
		Event &e = events[i];
		if (e.K == 0) {
			set.insert(std::make_pair(e.l,e.id));
			continue;
		}
		it = set.lower_bound(std::make_pair(e.l,-1));
		while (it != set.end() && e.K != 0) {
			belong[it->second] = e.id;
			e.K --;
			set.erase(it++);
		}
	}
	if (!set.empty()) return false;
	return true;
}

int main() {
	scanf("%d",&n);
	for (int i = 0; i < n; ++ i) {
		int a,b;
		scanf("%d%d",&a,&b);
		events[i] = Event(a,b,0,i);
	}
	scanf("%d",&m);
	for (int i = 0; i < m; ++ i) {
		int a,b,K;
		scanf("%d%d%d",&a,&b,&K);
		events[n+i] = Event(a,b,K,i);
	}
	if (!work()) {
		puts("NO");
		return 0;
	} else {
		puts("YES");
		for (int i = 0; i < n; ++ i) {
			printf("%d%c",belong[i]+1," \n"[i==n-1]);
		}
	}
	return 0;
}
