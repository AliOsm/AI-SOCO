/**
 *      link:   https://codeforces.com/problemset/problem/961/D
 *
 *      - if we reduced this problem into just one line so I think it's much easier so we are sure that the line will be
 *      the line between any pair of points the rest of points must lie on this line.
 *
 *      - If the number of points is less than 3, then the answer is obviously YES.
 *      Else let's fix first 3 points. Check if there is a solution if 1-st and 2-nd points lie on the same line.
 *      Just erase all points which lie on this line and check the remaining points if they belong to one line.
 *      If we didn't find the answer, let's check points 1 and 3 in the same way.
 *      If its failed again then line which contains point 1 can't contain points 2 and 3, so points 2 and 3 must lie on one line. I
 *      f we didn't succeed again, then there is no way to do it, so the answer is NO.
 *      Checking that points a, b and c belong to the same line can be done by checking slopes
 *      or calculating 2d version of cross product (b - a) × (c - a). It equals to 0 if vectors (b - a) and (c - a) are collinear.
 */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define pb push_back
#define all(v) (v).begin() , (v).end()
#define popcnt(x) __builtin_popcount(x)
#define inf 0x3f3f3f3f
#define watch(x) cout << (#x) << " is " << (x) << endl
#define rand() (rand() << 15 | rand())
using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set =
tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long  ll;
#define EPS 1e-9
#define PI acos(-1.0)
const int N = 2e5 + 4 , MOD = 1e9 + 7;

int mul(int a , int b , int m = MOD){
   return (1LL * (a % m) * (b % m)) % m;
}

int add(int a , int b , int m = MOD){
   a += b;
   while (a >= MOD) a -= MOD;
   while(a < 0)a += MOD;
   return a;
}

int powMOD(int x , int n , int m = MOD){
   if(!n)return 1;
   int ret = 1;
   if(n & 1)ret = mul(x , powMOD(x , n - 1 , m) , m);
   else{
      int y = powMOD(x , n / 2 , m);
      ret = mul(y , y , m);
   }
   return ret;
}

int n , to[N] , vis[N] , theOne = -1 , res = 1 , sz = 0;
bool cycle = false;

void dfs(int u){
   vis[u] = 1;
   if(!vis[to[u]])
      dfs(to[u]);
   if(vis[to[u]] == 1){
      cycle = true;
      theOne = to[u];
   }
   if(cycle){
      sz++;
      if(u == theOne) {
         cycle = false;
         res = mul(res, add(powMOD(2, sz) , -2));
         sz = 0;
      }
   }
   else{
      res = mul(res , 2);
   }
   vis[u] = 2;
}

int main() {
#ifndef ONLINE_JUDGE
   freopen("input.txt", "r", stdin);
#endif
   ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
   cin >> n;
   for(int i = 0 ; i < n ; ++i)
      cin >> to[i] , to[i]--;

   for(int i = 0 ; i < n ; ++i){
      if(!vis[i])
         dfs(i);
   }
   cout << res << "\n";
}