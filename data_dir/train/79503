#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace std;
using namespace __gnu_pbds;
#define PI                      3.1415926535897932384626
#define MOD                     998244353
#define int                     long long int
#define fi                      first
#define se                      second
#define pq                      priority_queue
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define fill(x,y)               memset(x,y,sizeof(x));
#define rep(x,y,z)              for(int x = y; x < z; ++x)
#define repr(x,y,z)             for(int x = y; x > z; --x)
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define hash                    _H
                                    

typedef tree<pii,null_type,less<pii>,rb_tree_tag,
tree_order_statistics_node_update> ordered_set;

template<typename T> T pow(T a,T b, int m){T ans=1; while(b>0){ if(b%2==1) ans=(ans*a)%m; b/=2; a=(a*a)%m; } return ans%m; }
template<typename T> void swap(T &a,T &b){T temp = a;a = b;b = temp;return ;}
template<typename T>T InverseMod(T a,int m){return pow(a,m-2,m);}

string n;
void read()
{
    cin >> n;
}
signed main()
{
    read();
    int len = n.length();
    string ans = "";
    ans += n[0];
    int j = 0;
    bool f = false;
    rep(i,1,len-3)
    {
        j = i;
        string temp = n.substr(i,3);
        if(temp == "dot")
        {
            ans += '.';
            i += 2;
            j = i+1;
            continue;
        }
        temp = temp.substr(0,2);
        if(temp == "at" and !f)
        {
            ans += '@';
            f = true;
            i += 1;
            j = i+1;
            continue;
        }
        ans += n[i];
    }
    j  = len-j;
    string temp = n.substr(len-3,2);
    if(temp == "at" and j >= 3 and !f)
    {
        ans += '@';
        ans += n[len-1];
    }
    else
    {
        repr(i,min(3LL,j),0) ans += n[len-i];
    }
    cout << ans << endl;
} 