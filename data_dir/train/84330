#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 
#define ll long long

#ifdef sarthak
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>  
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
int begtime = clock();
#else
#define trace(...)
#endif

#ifndef sarthak
    #pragma GCC optimize("Ofast")
    #pragma GCC optimize("unroll-loops")
    // #pragma GCC target ("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#endif

#define foreach(it,ar) for (auto it = ar.begin(); it != ar.end(); it++)
#define fort(i,v) for(auto i:v)
#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) rep(i,sizeof(ar)/sizeof(ll)) ar[i]=val
#define fill2(ar,val) rep(i,sizeof(ar)/sizeof(ar[0])) rep(j,sizeof(ar[0])/sizeof(ll)) ar[i][j]=val
#define fill0(ar) memset(ar,0,sizeof(ar))
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%lld",&x)
#define sd2(x,y) scanf("%d %d",&x,&y)
#define slld2(x,y) scanf("%lld %lld",&x,&y)
#define pd(x) printf("%d\n",x)
#define plld(x) printf("%lld\n",x)
#define pd2(x,y) printf("%d %d\n",x,y)
#define plld2(x,y) printf("%lld %lld\n",x,y)
#define all(ar) ar.begin(), ar.end()
#define endl '\n'
#define sz(x) (int)x.size()
#define len(x) (int)x.length()

typedef pair<ll, ll> ii;
typedef pair<ii, ll> iii;
typedef vector<ii> vii;
typedef vector<ll> vi;

#define INF 2000000000000000000
#define PI 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679L

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rngb(chrono::steady_clock::now().time_since_epoch().count()); // can give negative values too

const ll N = 100000;
ll mu[N+1];
ll mod = 1000000007;

void init()
{
    mu[1] = 1;

    fr(i,2,N)
    {
        mu[i] = 2;    
    }

    fr(i,2,N)
    {
        if(mu[i]==2)
        {
            mu[i] = -1;
            for(ll j=i+i; j<=N; j+=i)
            {
                if(mu[j]==2)
                    mu[j] = -3;
                else
                    mu[j] = mu[j]*(-1);
            }
            for(ll j=i*i; j<=N; j=j+(i*i))
            {
                mu[j] = 0;
            }
        }
    }
    fr(i,2,N)
    {
        if(mu[i]==-3)
            mu[i] = -1;
        if(mu[i]==3)
            mu[i] = 1;
    }
}

ll gcdExtended(ll a, ll b, ll *x, ll *y) 
{ 
    if (a == 0) 
    { 
        *x = 0, *y = 1; 
        return b; 
    } 
  
    ll x1, y1; 
    ll gcd = gcdExtended(b%a, a, &x1, &y1); 
  
    *x = y1 - (b/a) * x1; 
    *y = x1; 
  
    return gcd; 
} 

ll modInverse(ll a, ll m) 
{ 
    ll x, y; 
    ll g = gcdExtended(a, m, &x, &y); 
    ll res = (x%m + m) % m; 
    return res; 
} 

ll dp[100001];

void solve()
{
    ll m;
    cin >> m;

    init();
    ll ans = 0;

    frr(i,m,2)
    {
        ll x = m/i;
        ll t = 2*x;
        ll t2 = modInverse(m,mod);
        t = t*t2;
        t %= mod;
        ll y = x*x;
        y %= mod;
        ll z = m*(m-x);
        z %= mod;
        z = modInverse(z,mod);
        y = y*z;
        y %= mod;

        t = t+y;
        t %= mod;

        dp[i] = t;
        for(ll j=i+i; j<=m; j+=i)
        {
            dp[i] = dp[i] - dp[j];
            if(dp[i]<0)
                dp[i] += mod;
        }

        // cout << dp[i] << endl;
    }
    
    fr(i,2,m)
    {
        ans = ans + dp[i];
        ans %= mod;
    }
    ll xx = modInverse(m,mod);
    ans = ans + xx;
    ans %= mod;

    cout << ans << endl;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout << fixed;
    cout << setprecision(10);
    #ifdef sarthak
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll t = 1;
    // cin >> t;
    while(t--)
    {
        solve();
    }

    #ifdef sarthak
    cerr << "Time elapsed: " << (clock() - begtime)*1000/CLOCKS_PER_SEC << " ms\n\n";
    #endif
}
