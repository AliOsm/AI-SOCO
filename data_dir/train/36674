/*
    The bigger the rocks
                       the greater the chance 
                                            to find high value tokens!! */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=1e9+7;   
#define INF 100000000
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctz(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clz(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffs(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,x,y,k,m;
const double pi=3.14159265358979323846;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
lli tot=0;
vector<int> pf(string s) {
    int n = (int)s.length();
    vector<int> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
int main()
{
cin>>n;
lli mx=-1;
vector<int> s;
lli vis[5000008];
mem1(vis,0);
lli cnt=1;
for(int i=1;i<=n;i++)
{
    cin>>x;
    mx=max(mx,x);
    if(vis[x]==0)
    {
    s.push_back(x);
    vis[x]=1;
    }
    //cout<<x<<endl;
}
sort(s.begin(),s.end());
lli mi=-1;
lli dp[2000007];
for(int i = s[0]+1, j = 0; i <= 2*mx; i++){
		while(j < s.size() and s[j] < i) j++;
		j--;
		dp[i] = s[j];
	}
for(int i=1;i<=1000000;i++)
{
    if(vis[i])
    {
        for(int j=2*i;j<=1000000+i;j+=i)
        {
            lli dd=dp[j];
            mi=max(mi,dd%i);
        }
    }
}
cout<<mi;
}