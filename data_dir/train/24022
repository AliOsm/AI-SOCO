#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
using namespace std;
#define pi 3.141592653589793
#define ii pair<int,int>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf\n", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s ", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define inf 10000000000000000
#define ninf -10000000000000000;
#define eps 1e-7
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
/*ll power(ll base, ll exp) {
base %= mod;
ll result = 1;
while (exp > 0) {
if (exp & 1)
result = (result * base) % mod;
base = (base * base) % mod;
exp >>= 1;
}
return result;
}
*/
long long gcd(long long a, long long b)
{
if (b == 0)return a; return gcd(b, a%b);
}
/*long long lcm(long long a, long long b) {
return  a * b / gcd(a, b);
}
*/

int n;
int st[18][100010];
int nearstlog[100010];
int strength[100010];
map<int, vector<int>>mp;
void buildlog()
{
	nearstlog[0] = -1;
	for (int i = 1; i <= n; ++i)nearstlog[i] = nearstlog[i - 1] + !(i&(i - 1));
}
void buildst()
{
	for (int i = 1; i<=n; ++i)st[0][i] = strength[i];
	for (int i = 1; i <= 18; ++i)
	{
		for (int j = 1; j<=(n-(1<<i)+1); ++j)
		{
			st[i][j] = gcd(st[i - 1][j], st[i - 1][j + (1 << (i - 1))]);
		}
	}
}
int getans(int l,int r)
{
	int sizee = r - l + 1;
	int logg = nearstlog[sizee];
	return gcd(st[logg][l], st[logg][r - (1 << logg)+1]);
}
int main()
{
	sci(n);
	for (int i = 1; i <= n; ++i) { sci(strength[i]); 
	mp[strength[i]].push_back(i);
	}
	buildlog();
	buildst();
	int t;
	sci(t);
	int l, r;
	while (t--)
	{
		sci(l); sci(r);
		int ans = getans(l, r);
		int awl = upper_bound(mp[ans].begin(), mp[ans].end(),l-1) - mp[ans].begin();
		int a5er = upper_bound(mp[ans].begin(), mp[ans].end(), r) - mp[ans].begin();
		pr(r-l+1-(a5er - awl));
	}
	
	return 0;
}

