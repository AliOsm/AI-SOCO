/*
Nahid Hossain
Jahangirnagar University
Roll:54
*/
#include<bits/stdc++.h>
#define ll          long long int
#define db          double
#define pf          printf
#define sf          scanf
#define ff          first
#define ss          second
#define clr         clear()
#define sz          size()
#define pb          push_back
#define mk          make_pair
#define pi          acos(-1)
#define inf         200000000
#define mod         1000000007
#define ull         unsigned long long int
#define f(i,k,n)    for(ll i=k;i<n;i++)
#define fr(i,n,k)   for(i=n;i>=k;i--)
#define ent(a)      scanf("%lld",&a)
#define ent2(a,b)   scanf("%lld%lld",&a,&b)
#define ent3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define mem(a)      memset(a,0,sizeof(a))
#define vec(v,s)    vector<ll>v[s]
#define arr(a,s)    ll a[s];
//#define check(n,pos) (n&(1<<pos))
//#define set(n,pos)  (n|(1<<pos))
//knight and king//
int dr[]={2, 2, -2, -2, 1, -1, 1, -1};
int dc[]={1,-1,  1, -1, 2,  2,-2, -2};
int dr1[]={0, 0, 0, 1, 1, 1, -1, -1, -1};
int dc1[]={-1,0, 1,-1, 0, 1, -1, 0,   1};
int dr2[]={0, 0, 1, -1};
int dc2[]={1,-1, 0,  0};
////////////////////////////
using namespace std;

#define ma 200006


///***********//////////////////////////////////
struct state {
    int to[26] ;
    int depth ;
    int suffLink ;
    int par ;
    int parLet ;
    int cnt ;
    int nxt[26] ;
};
vector <int> g[ma] ;

state states[ma];

ll totNodes;

int add (string &str) {
    int cur = 1 ; // root with a empty string
    int len = str.size() ;
    for (int i = 0 ; i < len ; i++) {
        char c = str[i] ;
        if (!states[cur].to[c-'a']) {
            states[cur].to[c-'a'] = ++totNodes ;
            states[totNodes].par = cur ;
            states[totNodes].depth = states[cur].depth + 1 ;
            states[totNodes].parLet = c-'a' ;
        }
        cur = states[cur].to[c-'a'] ;
    }
    states[cur].cnt++;
    return cur ;
}

void pushLinks() {
    queue <int> Q ; Q.push(1) ;
    while (!Q.empty()) {
        int node = Q.front() ;
        Q.pop() ;
        if (states[node].depth <= 1) {
            states[node].suffLink = 1 ;
        }
        else {
            int cur = states[states[node].par].suffLink ;
            int parLet = states[node].parLet ;
            while (cur > 1 and !states[cur].to[parLet]) {
                cur = states[cur].suffLink ;
            }
            if (states[cur].to[parLet]) {
                cur = states[cur].to[parLet] ;
            }
            states[node].suffLink = cur ;
        }
        if (node != 1) g[states[node].suffLink].push_back(node) ;
        for (int i = 0 ; i < 26 ; i++) {
            if (states[node].to[i]) {
                Q.push(states[node].to[i]) ;
            }
        }
    }
}

void dfs (int u , int p) {
    if(p != -1) states[u].cnt += states[p].cnt;
    for (int i = 0 ; i < g[u].size() ; i++) {
        int v = g[u][i] ;
        if (v == p) continue ;
        dfs(v,u) ;
    }
}


int Next (int from , char ch) {
    if (states[from].nxt[ch-'a']) return states[from].nxt[ch-'a'] ;
    int cur = from ;
    int c = ch - 'a' ;
    while (cur > 1 and !states[cur].to[c]) {
        cur = states[cur].suffLink ;
    }
    if (states[cur].to[c]) {
        cur = states[cur].to[c] ;
    }
    return states[from].nxt[ch-'a'] = cur;
}

/////****************//////////////////////


string t[ma];
ll a[ma],b[ma];
int main()
{
 ll i,j,n;

 string t1;

 cin>>t1;

 cin>>n;

 totNodes=1;

 for(i=1;i<=n;i++)
 {
  cin>>t[i];
  add(t[i]);
 }
 pushLinks();
 dfs(1,-1);

 ll now=1;

 for(i=0;i<t1.sz;i++)
 {
  now=Next(now,t1[i]);
  a[i]+=states[now].cnt;
 }



 memset(states,0,sizeof(states));



 for(i=0;i<=totNodes;i++)g[i].clr;
 totNodes=1;

 for(i=1;i<=n;i++)
 {
  reverse(t[i].begin(),t[i].end());
  add(t[i]);
 }
 pushLinks();
 dfs(1,-1);
 now=1;

for(i=t1.sz-1;i>=0;i--)
{
 now=Next(now,t1[i]);
 b[i]=states[now].cnt;
}
 ll ans=0;


 for(i=0;i+1<t1.sz;i++)
 {
  ans+=(a[i]*b[i+1]);
 }
 cout<<ans<<endl;




}
