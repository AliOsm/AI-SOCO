#include <bits/stdc++.h>
using namespace std;

string s, p;

int pre[1<<11];
int dp[1<<11][1<<11];

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);

  cin >> s >> p;
  int n = s.size();
  memset(pre, -1, sizeof(pre));

  for (int i = 0; i < n; ++i) {
    int cur = p.size() - 1, x = 0;
    for (int j = i; cur != -1 and j >= 0; --j) {
      if (p[cur] == s[j]) --cur;
      ++x;
    }
    if (cur == -1) pre[i] = x;
    else pre[i] = 1e9;
  }
  fill(dp[0] + 1, dp[0] + (1<<11), -(1e9));
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j <= n; ++j) {
      dp[i + 1][j] = max(dp[i][j], j ? dp[i][j - 1] : INT_MIN);
      int rm = pre[i] - p.size();
      if (i - pre[i] + 1 >= 0 and j - rm >= 0) {
        dp[i + 1][j] = max(dp[i + 1][j], dp[i - pre[i] + 1][j - rm] + 1);
      }
    }
  }
  for (int i = 0; i <= n; ++i) cout << dp[n][i] << " \n"[i == n];
}
