#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>

using namespace std;
using ll = long long;

struct Bit {
	Bit(int n) {
		tree.assign(n + 1, 0);
	}

	void update(int x, int d) {
		while(x < tree.size()) {
			tree[x] += d;
			x += x & -x;
		}
	}

	ll sum(int x) {
		ll s = 0;
		while(x > 0) {
			s += tree[x];
			x -= x & -x;
		}
		return s;
	}

	ll sum(int l, int r) {
		return sum(r) - sum(l - 1);
	}
	vector<int> tree;
};

inline int find(const vector<ll>& a, ll x) {
	int lo = -1, hi = a.size();
	while(hi - lo > 1) {
		int m = lo + (hi - lo) / 2;
		if (a[m] < x) {
			lo = m;
		} else {
			hi = m;
		}
	}
	return hi;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(nullptr);
	int n;
	cin >> n;
	ll t;
	cin >> t;
	ll T = t;
	vector<ll> p(n, 0);
	vector<ll> a(n, 0);
	for(int i = 0; i < n; ++i) {
		cin >> a[i];
	}
	p[0] = a[0];
	for(int i = 1; i < n; ++i) {
		p[i] = p[i - 1] + a[i];
	}

	vector<ll> b;
	for(int i = 1; i < n; ++i) {
		b.push_back(p[i]);
	}
	b.push_back(t);
	ll s = t;
	for(int i = 1; i < n - 1; ++i) {
		s += a[i - 1];
		b.push_back(s);
	}
	sort(b.begin(), b.end());
	b.erase(unique(b.begin(), b.end()), b.end());

	Bit bit(b.size() + 1);
	for(int i = 1; i < n; ++i) {
		int at = find(b, p[i]) + 1;
		bit.update(at, 1);
	}

	int x = find(b, t) + 1;
	ll ret = bit.sum(0, x - 1);
	for(int i = 1; i < n - 1; ++i) {
		t += a[i - 1];
		x = find(b, t) + 1;
		int y = find(b, p[i]) + 1;
		bit.update(y, -1);
		ret += bit.sum(0, x - 1);
	}

	// multiset<ll> st;
	// for(int i = 1; i < n; ++i) {
	// 	st.insert(p[i]);
	// }
	// auto it = st.lower_bound(t);
	// ll ret = distance(st.begin(), it);
	// for(int i = 1; i < n - 1; ++i) {
	// 	t += a[i - 1];
	// 	st.erase(p[i]);
	// 	it = st.lower_bound(t);
	// 	// cout << i << " " << t << " " << distance(st.begin(), it) << endl;
	// 	ret += distance(st.begin(), it);
	// }
	for(int i = 0; i < n; ++i) {
		if (a[i] < T) {
			++ret;
		}
	}
	
	cout << ret << endl;
	return 0;
}
