#include <algorithm>
#include <iostream>
#include <cmath>
#include <fstream>
#include <vector>
#include <iomanip>
#include <string>
#include <queue>
#include <map>
#include <stack>
#include <set>

using namespace std;

typedef long long ll;
typedef long double ld;

template <typename T>
T gcd(T a, T b) {
	while (a > 0 && b > 0) {
		if (a > b) a %= b; else b %= a;
	}
	return (a + b);
}

template <typename T>
bool prime(T n) {
	if (n <= 1) {
		return false;
	}
	T i = 2;
	while (i * i <= n) {
		if (n % i == 0) {
			return false;
		}
		++i;
	}
	return true;
}

vector<vector<int> > g;
vector<int> c;

void dfs(int v, int cv, int p, int cp) {
	c[v] = cv;
	int cnt = 0;
	for (int i = 0; i < g[v].size(); ++i) {
		int next = g[v][i];
		if (next == p) {
			continue;
		}
		while (cnt == c[v] || cnt == c[p]) {
			++cnt;
		}
		dfs(next, cnt, v, c[v]);
		++cnt;
	}
}

void solveTask() {	
	int n;
	cin >> n;
	g.resize(n, vector<int> ());
	c.resize(n, 0);
	for (int i = 1; i < n; ++i) {
		int x, y;
		cin >> x >> y;
		--x;
		--y;
		g[x].push_back(y);
		g[y].push_back(x);
	}
	dfs(0, 1, 0, -1);
	int cntColor = 0;
	for (int i = 0; i < n; ++i) {
		cntColor = max(cntColor, c[i]);
	}
	cout << cntColor + 1 << endl;
	for (int i = 0; i < n; ++i) {
		cout << c[i] + 1 << " ";	
	}
	cout << endl;
}

int main() {	
	//freopen("input.txt", "r", stdin);	
	ios_base::sync_with_stdio(false);
	solveTask();
	return 0;
}