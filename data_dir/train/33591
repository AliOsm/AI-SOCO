#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_popcount

#ifndef D
	#define dbg(x) 0
	#define dbgs(x) 0
#else
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#endif

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 1e5 + 5;

int n, l, w, x, y, k, child[N], fen[N];

ll ans;

bool h[N];

vector < pii > v[N];

vector < pair < ll, int > > all;

int f(int root, int x) {

	child[x] = 1;

	foreach(it, v[x])
		if(it -> F != root and !h[it -> F])
			child[x] += f(x, it -> F);

	return child[x];

}

int calc(int root, int x, int t) {

	foreach(it, v[x])
		if(it -> F != root and !h[it -> F] and child[it -> F] * 2 >= t)
			return calc(x, it -> F, t);

	return x;

}

void dfs2(int root, int x, int l, int w) {

	all.pb(mp(w, l));

	foreach(it, v[x])
		if(it -> F != root and !h[it -> F])
			dfs2(x, it -> F, l + 1, w + it -> S);

}

void up(int x, int k) {

	for(x++; x < N; x += x & (-x))
		fen[x] += k;

}

int qu(int x) {

	int sum = 0;

	for(x++; x > 0; x -= x & (-x))
		sum += fen[x];

	return sum;

}

ll calc() {

	ll ans = 0;

	int j = all.size() - 1;

	sort(all.begin(), all.end());

	foreach(it, all)
		up(it -> S, 1);

	FOR(i, 0, (int) all.size() - 1)
	{
		while(j >= i and all[i].F + all[j].F > w)
		{
			up(all[j].S, -1);

			j--;
		}

		if(j < i)
			break;

		up(all[i].S, -1);

		ans += qu(l - all[i].S);
	}

	return ans;

}

void dfs(int x) {

	int p = calc(0, x, f(0, x));

	h[p] = 1;

	all.clear();

	dfs2(0, p, 0, 0);

	ans += calc();

	foreach(it, v[p])
		if(!h[it -> F])
		{
			all.clear();

			dfs2(0, it -> F, 1, it -> S);

			ans -= calc();
		}

	foreach(it, v[p])
		if(!h[it -> F])
			dfs(it -> F);

}

int main() {

	ios :: sync_with_stdio(0);

	cin >> n >> l >> w;

	FOR(i, 2, n)
	{
		cin >> x >> k;

		v[x].pb(mp(i, k));
		v[i].pb(mp(x, k));
	}

	dfs(1);

	cout << ans << endl;

	return 0;

}
