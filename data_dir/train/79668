#include <cstdio>
#include <algorithm>
#include <vector>
#include <iostream>
#include <set>
#include <string>
#include <cstring>
#include <map>
#include <cmath>
using namespace std;
#define kfokefref y1;
typedef long long ll;
const int mod = 1e9 + 7;
int b[305];
string fnd_big(int n, int sum){
    string ans = "";
    if(sum % 9 == 0 && sum == n * 9){
        return string(n, '9');
    }
    else if(sum % 9 == 0){
        ans += '1';
        int cur = sum / 9;
        for(int i = 1; i <= n - cur - 1; ++i){
            ans += '0';
        }
        ans += '8';
        for(int i = 1; i <= cur - 1; ++i){
            ans += '9';
        }
        return ans;
    }
    else{
        int cur = sum / 9;
        if(cur + 1 == n){
            ans += char('0' + sum % 9);
            for(int i = 1; i <= n - cur - 1; ++i){
                ans += '0';
            }
            for(int i = 1; i <= cur; ++i)
                ans += '9';
        }
        else{
            ans += '1';
            for(int i = 1; i <= n - cur - 2; ++i){
                ans += '0';
            }
            ans += (sum - 1) % 9 + '0';
            for(int i = 1; i <= cur; ++i)
                ans += '9';
        }
        return ans;
    }
}
string find_big(int sum, int prev_sum, string s){
    int n = (int)s.size();
    int pos = -1;
    int cur_sum = 0;
    for(int i = n - 1; i >= 0; --i){
        cur_sum += s[i] - '0';
        if(s[i] - '0' < 9){
            int mn_sm = prev_sum - cur_sum + s[i] - '0' + 1;
            int mx_sm = prev_sum - cur_sum + 9 * (n - i);
            if(mn_sm <= sum && sum <= mx_sm){
                pos = i;
                break;
            }
        }
    }
    if(pos == -1){
        int sz = max(n + 1, (sum + 8) / 9);
        return fnd_big(sz, sum);
    }
    else{
        for(int i = pos + 1; i < n; ++i){
            s[i] = '0';
        }
        s[pos]++;
        int sm = prev_sum - cur_sum + s[pos] - '0';
        for(int i = n - 1; i >= 0; --i){
            if(sm == sum) return s;
            while(s[i] < '9' && (sm != sum)) ++s[i], ++sm;
        }
        return s;
    }
}
int n, k;
int main(){
    cin >> n;
    for(int i = 1; i <= n; ++i){
        cin >> b[i];
    }
    string s = "0";
    for(int i = 1; i <= n; ++i){
        s = find_big(b[i], b[i - 1], s);
        cout << s << "\n";
    }
    return 0;
}
