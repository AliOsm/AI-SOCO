#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#if (_win32 || __win32__)
#define LLD "%i64d"
#else
#define LLD "%lld"
#endif

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-13
#define endl "\n"

const int MAXN = 11*1000;

int n, m, mark[MAXN], tt = 0, st[MAXN], ft[MAXN], edge[MAXN], same[MAXN], parent[MAXN];
vector<pii> E;
vector<int> adj[MAXN], id[MAXN];

void dfs(int pos, int color = 0, int par = -1, int par_edge = -1) {
	if (mark[pos]) return;
	parent[pos] = par;
	edge[pos] = par_edge;
	mark[pos] = color+1;
	st[pos] = tt++;
	FOR(i, 0, Size(adj[pos])) dfs(adj[pos][i], color^1, pos, id[pos][i]);
	ft[pos] = tt++;
}

inline bool a_is_father_of_b(int a, int b) {
	return st[a] <= st[b] && ft[b] <= ft[a];
}

int main() {
	ios::sync_with_stdio(false);
	cin >> n >> m;
	FOR(i, 0, m) {
		int x, y;
		cin >> x >> y;
		x--; y--;
		E.pb(pii(x, y));
		adj[x].pb(y);
		id[x].pb(i);
		adj[y].pb(x);
		id[y].pb(i);
	}
	FOR(i, 0, n) if (!mark[i]) dfs(i);
	int last_bad = -1;
	FOR(i, 0, Size(E)) if (mark[E[i].X] == mark[E[i].Y]) same[i] = true, last_bad = i;
	if (last_bad == -1) {
		cout << m << endl;
		FOR(i, 0, m) cout << i+1 << " ";
		cout << endl;
		return 0;
	}
	set<int> res;
	if (count(same, same+m, true) == 1) res.insert(last_bad);
	FOR(i, 0, n) if (edge[i] != -1) {
		bool OK = true;
		for (int j = 0; j < m && OK; j++) if (j != edge[i]) OK &= same[j] ^ a_is_father_of_b(i, E[j].X) ^ a_is_father_of_b(i, E[j].Y) ^ 1;
		if (OK) res.insert(edge[i]);
	}
	cout << Size(res) << endl;
	FOREACH(it, res) cout << *it+1 << " ";
	cout << endl;
	return 0;
}

