#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define pll pair<ll, ll>
#define mp(x, y) make_pair(x, y)
using namespace std;

const ll MAX_N = 2e5 + 5, inf = 1e18, mod = 1000000007;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       tp %= mod; res %= mod;
       b >>= 1ll;
    }
    return res;
}

ll vec_mult(const pll &t1, const pll &t2, const pll &t3) {
   const ll &x1 = t1.first, y1 = t1.second;
   const ll &x2 = t2.first, y2 = t2.second;
   const ll &x3 = t3.first, y3 = t3.second;
   return ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
   cout << "YES" << endl;
}

void no() {
   cout << "NO" << endl;
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    int n = nxt();
    vector<ll> a(n);
    for (int i = 0; i < n; i++) {
        a[i] = nxt();
    }

    vector<vector<ll>> buf;
    vector<ll> cur;
    for (int i = 0; i < n; i++) {
        if (cur.size() == 0) {
            cur.push_back(a[i]);
        } else if (cur.back() < a[i]) {
            cur.push_back(a[i]);
        } else {
            buf.push_back(cur);
            cur.clear();
            cur.push_back(a[i]);
        }
    }
    if (cur.size()) buf.push_back(cur);

    ll ans = 0;
    for (auto& x : buf) ans = max(ans, 1LL * x.size());
    for (int i = 0; i < buf.size() - 1; i++) {
        if (buf[i + 1].size() == 1) {
            if (i + 2 < buf.size()) {
                if (buf[i].back() < buf[i + 2][0]) {
                    ans = max(1LL * buf[i].size() + buf[i + 2].size() - 1, ans);
                }
            }
        }
        if (buf[i + 1].size() >= 2) {
            if (buf[i].back() < buf[i + 1][1]) {
                ans = max(1LL * buf[i].size() + buf[i + 1].size() - 1, ans);
            }
        }
        if (buf[i].size() >= 2) {
            if (buf[i][buf[i].size() - 2] < buf[i + 1][0]) {
                ans = max(1LL * buf[i].size() + buf[i + 1].size() - 1, ans);
            }
        }
    }
    cout << ans;
    return 0;
}
