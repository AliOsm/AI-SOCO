#include <bits/stdc++.h>	
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound          	
#define ub upper_bound
#define pb push_back
#define pf push_front  
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcount                                                                                        
#define sqr(x) ((x) * (x))
#define al 0x3F3F3F3F
#define sz(x) x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;                                  
const int N = (int)2e5 + 123;
const ll inf = 3e18 + 1;
                                       
const double pi = acos(-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};   																																					
const int dy[] = {0, 1, 0, -1, 0};                                                                                                                                                                                                                 

int n, x[N], y[N], sz[N], k;
vector <int> g[N];

void dfs (int v = 1, int p = 0) {
	sz[v] = 1;
	for (auto to : g[v]) {
		if (to == p) continue;
		dfs (to, v);
		sz[v] += sz[to];
		if (sz[to] % 2 == 0) k ++, sz[v] -= sz[to];
	}
}

inline void boost () {
    ios_base :: sync_with_stdio(NULL);
    cin.tie(NULL), cout.tie(NULL);
}                                                                    
                                       
inline void Solve () {  
	boost ();
	cin >> n;
	for (int i = 1; i < n; i ++) {
		cin >> x[i] >> y[i];
		g[x[i]].pb (y[i]);
		g[y[i]].pb (x[i]);
	}
	dfs ();
	if (sz[1] & 1) cout << -1, exit (0);
	cout << k;
}                               

int main () { 
//  freopen("sparse.in", "r", stdin);    
//  freopen("sparse.out", "w", stdout);          
	int tt = 1;
//	cin >> tt;
	while (tt --) {
		Solve ();
	}        
	return 0;
}