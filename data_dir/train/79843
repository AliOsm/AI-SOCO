// In the name the Allah the Most Merciful.

#include<bits/stdc++.h>
using namespace std;

typedef long long ll;

int matrix[1005][1005];

bool cmp(pair< int , int> A , pair<int , int > B)
{
    return A.second>B.second;
}

int main(void)
{
    ios::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);

    int n;
    cin >> n;
    map<int , int>mp;
    for(int i=0;i<n*n;i++){

        int in;
        cin >> in;
        mp[in]++;
    }

    int one = 0 , four = 0 , val = -1;
    bool check = true;
    queue<int>current;
    vector<pair<int , int> > v;

    for(auto it : mp){

        if(it.second%4==1){
            if(val!=-1)check = false;
            val = it.first;
            it.second--;

        }
        else if(it.second%4==2){

            v.push_back({it.first , 2});
            it.second-=2;
        }
        else if(it.second%4==3){
            if(val!=-1)check = false;
            val = it.first;
            v.push_back({it.first , 2});
            it.second-=3;
        }
        if(it.second>0)v.push_back({it.first , it.second});

    }

    if(check==false){

        cout << "NO" << endl;
        return 0;
    }

    sort(v.begin() , v.end() , cmp);
    for(int i=0;i<v.size();i++){

        for(int j=0;j<v[i].second;j++)current.push(v[i].first);
    }

    if(n%2==1){

        for(int i=0;i<n/2;i++){

            for(int j=0;j<n/2;j++){

                matrix[i][j] = current.front();
                current.pop();
                matrix[n-i-1][j] = current.front();
                current.pop();
                matrix[i][n-j-1] = current.front();
                current.pop();
                matrix[n-i-1][n-j-1] = current.front();
                current.pop();

                if(matrix[i][j]!=matrix[n-i-1][j])check = false;
                if(matrix[i][j]!=matrix[i][n-j-1])check = false;
                if(matrix[i][j]!=matrix[n-i-1][n-j-1])check = false;
            }
        }
        for(int i=0;i<n/2;i++){

            matrix[n/2][i] = current.front();
            current.pop();
            matrix[n/2][n-i-1] = current.front();
            current.pop();
            if(matrix[n/2][i]!=matrix[n/2][n-i-1])check = false;
        }

        for(int i=0;i<n/2;i++){

            matrix[i][n/2] = current.front();
            current.pop();
            matrix[n-i-1][n/2] = current.front();
            current.pop();
            if(matrix[i][n/2]!=matrix[n-i-1][n/2])check = false;
        }

        matrix[n/2][n/2] = val;
    }
    else{

        for(int i=0;i<n/2;i++){

            for(int j=0;j<n/2;j++){

                matrix[i][j] = current.front();
                current.pop();
                matrix[n-i-1][j] = current.front();
                current.pop();
                matrix[i][n-j-1] = current.front();
                current.pop();
                matrix[n-i-1][n-j-1] = current.front();
                current.pop();

                if(matrix[i][j]!=matrix[n-i-1][j])check = false;
                if(matrix[i][j]!=matrix[i][n-j-1])check = false;
                if(matrix[i][j]!=matrix[n-i-1][n-j-1])check = false;
            }
        }
    }

    if(check==false){
        cout << "NO" << endl;
        return 0;
    }
    cout << "YES" << endl;

    for(int i=0;i<n;i++){

        for(int j=0;j<n;j++)cout << matrix[i][j] << " ";
        cout << endl;
    }

    return 0;
}
