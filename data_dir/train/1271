#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int maxn = 5500;

ll dp[maxn][maxn];

struct myQue {
   stack <pair<ll, ll>> s1, s2;
   int size() {
      return s1.size() + s2.size();
   }
   bool isEmpty() {
      return size() == 0;
   }
   ll getMax() {
      if (isEmpty()) {
         return -1;
      }
      if (!s1.empty() && !s2.empty()) {
         return max(s1.top().second, s2.top().second);
      }
      if (!s1.empty()) {
         return s1.top().second;
      }
      return s2.top().second;
   }
   void push(ll val) {
      if (s2.empty()) {
         s2.push(make_pair(val, val));
      }
      else {
         s2.push(make_pair(val, max(val, s2.top().second)));
      }
   }
   void pop() {
      if (s1.empty()) {
         while (!s2.empty()) {
            if (s1.empty()) {
               s1.push(make_pair(s2.top().first, s2.top().first));
            }
            else {
               s1.push(make_pair(s2.top().first, max(s2.top().first, s1.top().second)));
            }
            s2.pop();
         }
      }
      s1.pop();
   }
};

myQue q[maxn];
queue <int> pos[maxn];

int main() {
   ios_base::sync_with_stdio(false);
   cin.tie(0);
   ll n, k, x;
   cin >> n >> k >> x;
   vector < ll > a(n + 1);
   for (int i = 1; i <= n; ++i) {
      cin >> a[i];
   }
   fill_n(&dp[0][0], maxn * maxn, -1);
   dp[0][0] = 0;
   q[0].push(0);
   pos[0].push(0);
   for (int i = 1; i <= n; ++i) {
      for (int j = 1; j <= x; ++j) {
         int _l = max(0, (int) (i - k));
         int _r = i;
         while (!pos[j - 1].empty() && pos[j - 1].front() < _l) {
            q[j - 1].pop();
            pos[j - 1].pop();
         }
         if (pos[j - 1].empty()) {
            continue;
         }
         ll g = q[j - 1].getMax();
         if (g == -1) continue;
         dp[i][j] = g + a[i];
      }
      for (int j = 1; j <= x; ++j) {
         if (dp[i][j] != -1) {
            pos[j].push(i);
            q[j].push(dp[i][j]);
         }
      }
   }
   ll bst = -1;
   for (int i = n; i >= n - k + 1; --i) {
      bst = max(bst, dp[i][x]);
   }
   cout << bst << endl;
   return 0;
}