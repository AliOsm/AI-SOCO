#include <bits/stdc++.h>
#define INF 0x3f3f3f3f
#define VI vector<int>
#define LL long long
#define pb push_back
#define pii pair<int,int>
#define mp make_pair
using namespace std;
LL memo[3][11][300010];
VI g[100010];
int A[300010], B[300010], S[100010];
int n, m, x, k;
const int MOD = (1e9)+7;
LL dp(int type, int X, int edge){
	LL& ans = memo[type][X][edge];
	if(ans >= 0LL) return ans;
	ans = 0LL;
	int cur = A[edge], next = B[edge];
	if(next == -1) return ans = (X == 0);
	for(int i = 0; i <= X; i++){
		LL d1 = 0LL, d2 = 0LL, d3 = 0LL;
		LL V = dp(type, X - i, edge+1);
		if(type == 1){
			d1 = (k-1)*dp(0, i, S[next]);
		}else if(type == 0){
			d1 = (k-1)*dp(0, i, S[next]);
			if(i) d2 = dp(1, i-1,S[next]);
			d3 = (m-k)*dp(2, i,S[next]);
		}else{
			d1 = (k-1)*dp(0, i,S[next]);
			d3 = (m-k)*dp(2, i,S[next]);
		}
		ans += ((d1 + d2 + d3)%MOD)*V;
		ans %= MOD;
	}
	return ans;
}
int e;
void dfs(int cur, int prev){
	S[cur] = e;
	for(int i = 0;  i < g[cur].size(); i++){
		if(g[cur][i] == prev) continue;
		A[e] = cur; B[e] = g[cur][i];
		e++;
	}
	A[e] = cur; B[e] = -1;
	e++;
	for(int i = 0; i < g[cur].size(); i++){
		if(g[cur][i] == prev) continue;
		dfs(g[cur][i], cur);
	}
}
int main(){
	scanf("%d %d", &n, &m);
	for(int i = 0; i < n - 1; i++){
		int u, v;
		scanf("%d %d", &u, &v);
		g[u].pb(v); g[v].pb(u);
	}
	e = 0;
	dfs(1,1);
	memset(memo, -1, sizeof(memo));
	scanf("%d %d", &k, &x);
	LL ans = 0LL;
	for(int i = 0; i <= x; i++){
		LL d1 = 0LL, d2 = 0LL, d3 = 0LL;
		d1 = (k-1)*dp(0,i,0);
		if(i) d2 = dp(1,i-1,0);
		d3 = (m-k)*dp(2,i,0);
		d1 %= MOD; d2 %= MOD; d3 %= MOD;
		ans += (d1 + d2 + d3);
		ans %= MOD;
	}
	printf("%lld\n", ans);
	return 0;
}