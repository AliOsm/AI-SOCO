#include <bits/stdc++.h>
#define mk make_pair
#define fs first
#define sc second
using namespace std;
typedef long long ll;
typedef long double ld;
pair<int, int> mem[102][3][2][2][2];
int x[101], y[101], b[11][11], n;
vector <int> dx[3], dy[3], un;
void init(){
    for(int k=0; k<=n*n+1; ++k){
        for(int f=0; f<3; ++f){
            for(int l=0; l<2; ++l){
                for(int d=0; d<2; ++d){
                    for(int s=0; s<2; ++s){
                        mem[k][f][l][d][s].fs=-1;
                    }
                }
            }
        }
    }
}
pair<int, int> dp(int nxt, int kn, bool b0, bool b1, bool b2){
    if(nxt==(n*n+1))
        return mk(0,0);
    if(mem[nxt][kn][b0][b1][b2].fs!=-1){
        return mem[nxt][kn][b0][b1][b2];
    }
    int now=nxt-1;
    pair<int, int> res=mk(1000, 1000);
    int xx=x[now], yy=y[now];
    int x1, y1;
    pair<int, int> tmp;
    if(!b0){
        tmp=dp(nxt, 0, 1, 1, 1);
        ++tmp.fs;++tmp.sc;
        res=min(res, mk(tmp.fs, tmp.sc));
    }
    if(!b1){
        tmp=dp(nxt, 1, 1, 1, 1);
        ++tmp.fs;++tmp.sc;
        res=min(res, mk(tmp.fs, tmp.sc));
    }
    if(!b2){
        tmp=dp(nxt, 2, 1, 1, 1);
        ++tmp.fs;++tmp.sc;
        res=min(res, mk(tmp.fs, tmp.sc));
    }
    int x2, x3, x4, y2, y3, y4;
    if(kn==0){
        for(int i=0; i<dx[0].size(); ++i){
            x1=xx+dx[kn][i];
            y1=yy+dy[kn][i];
            if(x1<n && x1>=0&& y1<n && y1>=0){
                if(b[x1][y1]==nxt){
                    tmp=dp(nxt+1, kn, 1, 0, 0);
                    res=min(res, mk(1+tmp.fs, tmp.sc));
                }
                else{
                    for(int j=0; j<dx[1].size(); ++j){
                        x2=x1+dx[1][j];
                        y2=y1+dy[1][j];
                        if(x2<n && x2>=0&& y2<n && y2>=0){
                            if(b[x2][y2]==nxt){
                                tmp=dp(nxt+1, 1, 0, 1, 0);
                                res=min(res, mk(3+tmp.fs, 1+tmp.sc));
                            }
                        }
                    }
                    for(int j=0; j<dx[0].size(); ++j){
                        x2=x1+dx[kn][j];
                        y2=y1+dy[kn][j];
                        if(x2<n && x2>=0&& y2<n && y2>=0){
                            if(b[x2][y2]==nxt){
                                tmp=dp(nxt+1, kn, 1, 0, 0);
                                res=min(res, mk(2+tmp.fs, tmp.sc));
                            }
                            else{
                                for(int h=0; h<dx[0].size(); ++h){
                                    x3=x2+dx[kn][h];
                                    y3=y2+dy[kn][h];
                                    if(x3<n && x3>=0&& y3<n && y3>=0){
                                        if(b[x3][y3]==nxt){
                                            tmp=dp(nxt+1, kn, 1, 0, 0);
                                            res=min(res, mk(3+tmp.fs, tmp.sc));
                                        }
                                        else{
                                            for(int k=0; k<dx[0].size(); ++k){
                                                x4=x3+dx[kn][k];
                                                y4=y3+dy[kn][k];
                                                if(x4<n && x4>=0&& y4<n && y4>=0){
                                                    if(b[x4][y4]==nxt){
                                                        tmp=dp(nxt+1, kn, 1, 0, 0);
                                                        res=min(res, mk(4+tmp.fs, tmp.sc));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else if(kn==1){
        for(int i=0; i<dx[1].size(); ++i){
            x1=xx+dx[kn][i];
            y1=yy+dy[kn][i];
            if(x1<n && x1>=0&& y1<n && y1>=0){
                if(b[x1][y1]==nxt){
                    tmp=dp(nxt+1, kn, 0, 1, 0);
                    res=min(res, mk(1+tmp.fs, tmp.sc));
                }
                else{
                    for(int i=0; i<dx[0].size(); ++i){
                        x2=x1+dx[0][i];
                        y2=y1+dy[0][i];
                        if(x2<n && x2>=0&& y2<n && y2>=0){
                            if(b[x2][y2]==nxt){
                                tmp=dp(nxt+1, 0, 1, 0, 0);
                                res=min(res, mk(3+tmp.fs, 1+tmp.sc));
                            }
                        }
                    }
                }
            }
        }
        if((x[nxt]+y[nxt])%2 == (x[now]+y[now])%2){
            tmp=dp(nxt+1, kn, 0, 1, 0);
            res=min(res, mk(2+tmp.fs, tmp.sc));
        }
    }
    else{
        bool l=0;
        for(int i=0; i<dx[2].size(); ++i){
            x1=xx+dx[kn][i];
            y1=yy+dy[kn][i];
            if(x1<n && x1>=0&& y1<n && y1>=0){
                if(b[x1][y1]==nxt){
                    tmp=dp(nxt+1, kn, 0, 0, 1);
                    res=min(res, mk(1+tmp.fs, tmp.sc));
                    l=1;
                    break;
                }
            }
        }
        if(!l){
            tmp=dp(nxt+1, kn, 0, 0, 1);
            res=min(res, mk(2+tmp.fs, tmp.sc));
        }
    }
    mem[nxt][kn][b0][b1][b2]=res;
    return res;

}
int main(){
  dx[0].push_back(-2);
  dx[0].push_back(-2);
  dx[0].push_back(-1);
  dx[0].push_back(1);
  dx[0].push_back(2);
  dx[0].push_back(2);
  dx[0].push_back(1);
  dx[0].push_back(-1);

  dy[0].push_back(-1);
  dy[0].push_back(1);
  dy[0].push_back(2);
  dy[0].push_back(2);
  dy[0].push_back(1);
  dy[0].push_back(-1);
  dy[0].push_back(-2);
  dy[0].push_back(-2);
  for(int i=-10; i<=10; ++i){
    if(i==0)
        continue;
    dx[1].push_back(i);
    dy[1].push_back(i);
    dx[1].push_back(i);
    dy[1].push_back(-i);
  }
  for(int i=-10; i<=10; ++i){
    if(i==0)
        continue;
    dx[2].push_back(i);
    dy[2].push_back(0);
  }
  for(int i=-10; i<=10; ++i){
    if(i==0)
        continue;
    dy[2].push_back(i);
    dx[2].push_back(0);
  }
  while(cin>>n){
        for(int i=0; i<n; ++i){
            for(int j=0; j<n; ++j){
                cin>>b[i][j];
                x[b[i][j]]=i;
                y[b[i][j]]=j;
            }
        }
        pair<int, int> ans, tmp;
        init();
        ans=dp(2, 0, 1, 0, 0);
        tmp=dp(2, 1, 0, 1, 0);
        ans=min(ans, tmp);
        tmp=dp(2, 2, 0, 0, 1);
        ans=min(ans, tmp);
        cout<<ans.fs<<" "<<ans.sc<<endl;
  }
  return 0;
}


