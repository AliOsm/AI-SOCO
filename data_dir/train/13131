#include <set>
#include <map>
#include <list>
#include <cmath>
#include <queue>
#include <stack>
#include <cstdio>
#include <string>
#include <vector>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <fstream>
#include <ctime>
#include <deque>
#include <bitset>
#include <cctype>
#include <utility>
#include <cassert>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef unsigned int ui;
typedef unsigned long long ull;

#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)
#define Fit(i,v) For(__typeof((v).begin()) i = (v).begin(); i != (v).end(); ++i)
#define Fitd(i,v) For(__typeof((v).rbegin()) i = (v).rbegin(); i != (v).rend(); ++i)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define sz(a) ((int)(a).size())
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))

template<class F, class T> T convert(F a, int p = -1) { stringstream ss; if (p >= 0) ss << fixed << setprecision(p); ss << a; T r; ss >> r; return r; }
template<class T> T gcd(T a, T b) { T r; while (b != 0) { r = a % b; a = b; b = r; } return a; }
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
template<class T> T sqr(T x) { return x * x; }
template<class T> T cube(T x) { return x * x * x; }
template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcount(s); }
const int bfsz = 1 << 16; char bf[bfsz + 5]; int rsz = 0;int ptr = 0;
char gc() { if (rsz <= 0) { ptr = 0; rsz = (int) fread(bf, 1, bfsz, stdin); if (rsz <= 0) return EOF; } --rsz; return bf[ptr++]; }
void ga(char &c) { c = EOF; while (!isalpha(c)) c = gc(); }
int gs(char s[]) { int l = 0; char c = gc(); while (isspace(c)) c = gc(); while (c != EOF && !isspace(c)) { s[l++] = c; c = gc(); } s[l] = '\0'; return l; }
template<class T> bool gi(T &v) {
    v = 0; char c = gc(); while (c != EOF && c != '-' && !isdigit(c)) c = gc(); if (c == EOF) return false; bool neg = c == '-'; if (neg) c = gc();
    while (isdigit(c)) { v = v * 10 + c - '0'; c = gc(); } if (neg) v = -v; return true;
}

typedef pair<int, int> II;

const ld PI = acos(ld(-1.0));
const ld eps = 1e-9;

const int inf = (int)1e9 + 5;
const ll linf = (ll)1e17 + 5;
int dr[4] = {-1, +1, 0, 0};
int dc[4] = {0, 0, +1, -1};
const ll mod = 1000000007;

#define maxn 500005

struct rbtree {
    struct node {
        int key, size, red, alive;
        node *l, *r;
        void update() { size = alive + l->size + r->size; }
    } *root, *nil;

    node *create(int key) {
        node *x = new node();
        x->key = key; x->size = 1;
        x->red = x->alive = 1;
        x->l = x->r = nil;
        return x;
    }

    rbtree() {
        root = nil = new node();
        nil->size = 0; nil->red = nil->alive = 0;
        nil->l = nil->r = nil;
    }

    node *rotate(node *x, node *y) {
        if (y == x->l) { x->l = y->r; y->r = x; }
        else { x->r = y->l; y->l = x; };
        y->red = x->red; x->red = 1;
        x->update(); y->update();
        return y;
    }

    node *insert(node *x, int &key) {
        if (x == nil) return create(key);
        if (x->l->red && x->r->red) {
            x->l->red = x->r->red = 0;
            x->red ^= 1;
        }
        if (key == x->key) x->alive = 1;
        else key < x->key ? x->l = insert(x->l, key) : x->r = insert(x->r, key);
        x->update();
        if (x->r->red) x = rotate(x, x->r);
        if (x->l->red && x->l->l->red) x = rotate(x, x->l);
        return x;
    }

    void erase(node *x, int &key) {
        if (x == nil) return;
        if (key == x->key) x->alive = 0;
        else key < x->key ? erase(x->l, key) : erase(x->r, key);
        x->update();
    }

    int size() { return root->size; }

    void insert(int key) { root = insert(root, key); }

    void erase(int key) { erase(root, key); }

    int count_lower(int key) {
        node *x = root;
        int total = 0;
        while (x != nil) {
            if (x->key >= key) x = x->l;
            else {
                total += x->l->size + x->alive;
                x = x->r;
            }
        }
        return total;
    }

    int find_kth(int k) {
        node *x = root;
        int pos = 0;
        while (x != nil) {
            pos = x->l->size + x->alive;
            if (pos == k && x->alive) break;
            if (pos >= k) x = x->l;
            else {
                k -= pos;
                x = x->r;
            }
        }
        return x->key;
    }
};

rbtree R[30];

int k, q, num[30], vt[30][maxn], run[30];
string s;
bool color[maxn];

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
//    freopen("in.txt", "r", stdin);

    cin >> k >> s >> q;
    ms(num, 0); ms(run, 0);
    int n = sz(s);

    Rep(i, n){
        int c = s[i] - 'a';
        num[c]++;
    }

    Rep(i, n){
        int c = s[i] - 'a';
        run[c]++;
        Rep(t, k){
            vt[c][num[c] * t + run[c]] = n * t + i + 1;
        }
    }

    For(i, 0, 'z' - 'a') {
        For(j, 1, num[i] * k) R[i].insert(j);
    }

    ms(color, 1);

    Rep(run, q){
        int u, v, c;
        string str;
        cin >> u >> str;
        c = str[0] - 'a';
        v = R[(int)c].find_kth(u);
        R[(int)c].erase(v);
        color[vt[(int)c][v]] = 0;
    }

    string res = "";
    For(i, 1, n * k) if(color[i]){
        res.pb(s[(i - 1) % n]);
    }

    cout << res << endl;

    return 0;
}
