//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp> 
#include <bits/stdc++.h>
#include <unistd.h>
using namespace std ;
//using namespace __gnu_pbds;
void operator+=(vector<int>&in1,const vector<int>&in2){for(int i=0;i<in2.size();i++)in1.push_back(in2[i]);}
#define y2 sdfklgjsdkfd
#define y1 sdfklgjsdkafd
#define X first 
#define Y second
#define int long long 
typedef long long ll ;
typedef long double ld ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
typedef pair < int , int > pii ; 
typedef pair < int , pii > pi_ii ;
typedef pair < pii , int > pii_i ;
typedef pair < pii , pii > pii_ii ;
#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%I64d"
const int maxn =  1e5 +30 ;
const int maxL = 22 ;
const ll inf = 1e16 ;
const int mod = 1e9+7 ;
const int baze = 707 ;
int n , q , dp [ maxn ] ;
pii edge [ maxn ] ;
int vazn [ maxn ] ;
bool mark [ maxn ] ; 
vector < pii_i > vc [ maxn ] ; 

void dfs ( int x ) 
{ 
  mark [ x ] = 1 ;
  for ( int i = 0 ; i < vc [ x ] . size ( ) ; i ++ )
    if ( mark [ vc [ x ] [ i ] . X . X ] == 0 ) 
      dfs ( vc [ x ] [ i ] . X . X ) , dp [ x ] += dp [ vc [ x ] [ i ] . X . X ] ;
  dp [ x ] ++ ; 
} 

int hlp ( int x ) 
{
  return (x*(x-1))/2;
} 

main ( ) 
{  
  fast ;
  cin >> n ;
  int u , v , w ;
  for ( int i = 1 ; i < n ; i ++ )
    { 
      cin >> u >> v >> w ;
      u -- , v -- ;
      vc [ u ] . push_back ( pii_i ( pii ( v , w ) , i ) ) ; 
      vc [ v ] . push_back ( pii_i ( pii ( u , w ) , i ) ) ; 
    }
  dfs ( 0 ) ; 
  for ( int i = 0 ; i < n ; i ++ ) 
    for ( int j = 0 ; j < vc [ i ] . size ( ) ; j ++ )
      { 
	u = vc [ i ] [ j ] . X . X ;  
	w = vc [ i ] [ j ] . X . Y ;  
	edge [ vc [ i ] [ j ] . Y ] = pii ( min ( dp [ u ] , dp [ i ] ) , n - min ( dp [ u ] , dp [ i ] ) ) ; 
	vazn [ vc [ i ] [ j ] . Y ] = w ; 
      }
  ld ans = 0 ;
  // (n*(n-1)*(n-2)) ;
  //ans /= 6 ;
  for ( int i = 1 ; i < n ; i ++ ) 
    {  
      ans += hlp ( edge [ i ] . X ) * edge [ i ] . Y * vazn [ i ] * 2 ;  
      ans += hlp ( edge [ i ] . Y ) * edge [ i ] . X * vazn [ i ] * 2 ;  
    } 
  cin >> q ; 
  while ( q -- ) 
    { 
      cin >> u >> w ;
      ans += hlp ( edge [ u ] . X ) * edge [ u ] . Y * ( w - vazn [ u ] ) * 2 ;  
      ans += hlp ( edge [ u ] . Y ) * edge [ u ] . X * ( w - vazn [ u ] ) * 2 ;  
      vazn [ u ] = w ;
      cout << fixed << setprecision ( 12 ) << (6*ans) / (n*(n-1)*(n-2))<< endl ;
    } 
} 
