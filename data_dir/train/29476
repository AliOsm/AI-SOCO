#include <bits/stdc++.h>
using namespace std;

const int N = 2e5 + 10;
typedef long long ll;

vector <int> adj[N], vec[N];
ll n, color[N], cnt[N], dp[N], ans[N], res[N];

void prep(int v, int p = -1) {
	dp[v] = 1;
	for (auto u : adj[v]) {
		if(u == p)	continue;
		prep(u, v);
		dp[v] += dp[u];
	}
	return;
}

ll dfs(int v, int p = -1, bool keep = 0) {
	ll maxi = 0, mx = -1, bigchild = -1;
	for (auto u : adj[v]) {
		if(u == p)	continue;
		if(mx < dp[u]) {
			mx = dp[u];
			bigchild = u;
		}
	}
	for (auto u : adj[v]) {
		if(u == p || u == bigchild) continue;
		dfs(u, v, 0);
	}
	if(bigchild != -1) {
		maxi = max(dfs(bigchild, v, 1), maxi);
		swap(vec[v], vec[bigchild]);
	}
	ans[cnt[color[v]]] -= color[v];
	vec[v].push_back(v);
	cnt[color[v]]++;
	ans[cnt[color[v]]] += color[v];
	maxi = max(maxi, cnt[color[v]]);
	for (auto u : adj[v]) {
		if(u == p || u == bigchild)	continue;
		for (auto x : vec[u]) {
			vec[v].push_back(x);
			ans[cnt[color[x]]] -= color[x];
			cnt[color[x]]++;
			ans[cnt[color[x]]] += color[x];
			maxi = max(maxi, cnt[color[x]]);
		}
	}
	res[v] = ans[maxi];
	if(keep == 0) {
		for (auto u : vec[v]) {
			ans[cnt[color[u]]] -= color[u];
			cnt[color[u]]--;
			ans[cnt[color[u]]] += color[u];
		}
	}
	return maxi;
}

int main() {
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> color[i];
	for (int i = 0; i < n - 1; i++) {
		int v, u;
		cin >> v >> u;
		v--, u--;
		adj[v].push_back(u), adj[u].push_back(v);
	}
	prep(0);
	dfs(0);
	for (int i = 0; i < n; i++)
		cout << res[i] << " ";
	cout << endl;
}