#include <cstdio>
#include <cstring>

typedef long long ll;
const ll MOD = 1000000007LL;

ll dp[2][5005];
ll cs[5005];

inline int abs(int x) {
    return x < 0 ? -x : x;
}

inline int min(int x, int y) {
    return x < y ? x : y;
}

inline int max(int x, int y) {
    return x > y ? x : y;
}

int main() {
    int n, a, b, k;
    ll ans = 0LL;
    
    memset(dp, 0, sizeof dp);
    
    scanf("%d%d%d%d", &n, &a, &b, &k);
    dp[0][a] = 1LL;
    for (int i = 0; i < k; i++) {
        memset(cs, 0, sizeof cs);
        for (int j = 1; j <= n; j++) {
            int mn = max(1, j - abs(j - b) + 1);
            int mx = min(n, j + abs(j - b) - 1);
            cs[mn] += dp[i&1][j];
            if (cs[mn] >= MOD)
                cs[mn] -= MOD;
            cs[j] += MOD - dp[i&1][j];
            if (cs[j] >= MOD)
                cs[j] -= MOD;
            cs[j+1] += dp[i&1][j];
            if (cs[j+1] >= MOD)
                cs[j+1] -= MOD;
            cs[mx+1] += MOD - dp[i&1][j];
            if (cs[mx+1] >= MOD)
                cs[mx+1] -= MOD;
        }
        ll sum = 0LL;
        for (int j = 1; j <= n; j++) {
            sum += cs[j];
            if (sum >= MOD)
                sum -= MOD;
            dp[i&1^1][j] = sum;
        }
        dp[i&1^1][b] = 0LL;
    }
    for (int i = 1; i <= n; i++)
        if (i != b) {
            ans += dp[k&1][i];
            if (ans >= MOD)
                ans -= MOD;
        }

    printf("%I64d\n", ans);
    
    return 0;
}
