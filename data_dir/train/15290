#include <algorithm>
#include <cassert>
#include <iostream>
#include <vector>
using namespace std;

namespace IO {
    const int BUFFER_SIZE = 1 << 15;

    char input_buffer[BUFFER_SIZE];
    int input_pos = 0, input_len = 0;

    void _update_input_buffer() {
        input_len = fread(input_buffer, sizeof(char), BUFFER_SIZE, stdin);
        input_pos = 0;

        if (input_len == 0)
            input_buffer[0] = EOF;
    }

    inline char next_char(bool advance = true) {
        if (input_pos >= input_len)
            _update_input_buffer();

        return input_buffer[advance ? input_pos++ : input_pos];
    }

    template<typename T>
    inline void read_int(T &number) {
        bool negative = false;
        number = 0;

        while (!isdigit(next_char(false)))
            if (next_char() == '-')
                negative = true;

        do {
            number = 10 * number + (next_char() - '0');
        } while (isdigit(next_char(false)));

        if (negative)
            number = -number;
    }

    template<typename T, typename... Args>
    inline void read_int(T &number, Args &... args) {
        read_int(number);
        read_int(args...);
    }
}


const int MAX = 1e5 + 5;

bool have[MAX];
vector<int> divisors[MAX];
int8_t mobius[MAX];
int count_multiples[MAX];

int count_relatively_prime_with(int x) {
    int sum = 0;

    for (int d : divisors[x])
        sum += mobius[d] * count_multiples[d];

    return sum;
}

void remove(int x) {
    for (int d : divisors[x])
        count_multiples[d]--;
}

int main() {
    for (int i = 1; i < MAX; i++)
        for (int j = i; j < MAX; j += i)
            divisors[j].push_back(i);

    mobius[1] = 1;

    for (int i = 1; i < MAX; i++)
        for (int j = 2 * i; j < MAX; j += i)
            mobius[j] -= mobius[i];

    int N;
    IO::read_int(N);
    long long answer = 0;

    for (int i = 0; i < N; i++) {
        int a;
        IO::read_int(a);
        have[a] = true;
        answer = max(answer, (long long) a);
    }

    for (int i = MAX - 1; i > 0; i--)
        if (!have[i])
            for (int j = 2 * i; j < MAX; j += i)
                if (have[j]) {
                    have[i] = true;
                    break;
                }

    for (int i = 1; i < MAX; i++)
        for (int j = i; j < MAX; j += i)
            count_multiples[i] += have[j];

    vector<int> numbers;

    for (int i = MAX - 1; i > 0; i--)
        if (have[i])
            numbers.push_back(i);

    for (int i = 0; i < (int) numbers.size(); i++) {
        int relatively_prime = count_relatively_prime_with(numbers[i]);

        while ((int) numbers.size() - 1 > i && relatively_prime > 0) {
            if (__gcd(numbers[i], numbers.back()) == 1) {
                answer = max(answer, (long long) numbers[i] * numbers.back());
                relatively_prime--;
            }

            remove(numbers.back());
            numbers.pop_back();
        }

        remove(numbers[i]);
    }

    cout << answer << '\n';
}
