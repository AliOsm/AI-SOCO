#include <iomanip>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <ctime>
#include <cstdio>
#include <cmath>
#include <queue>
#include <bitset>
#include <string>
 
#define ll long long
#define mp make_pair
#define pb push_back
 
using namespace std;
 
const int N = 1010;
const int INF = 1e9;
const int MOD = 1e9+7;

int sum(int a, int b) {
    return (a + b) % MOD;
}

void add(int &a, int b) {
    a += b;
    if (a >= MOD) a -= MOD;
}

void mult(int &a, int b) {
    a = (1ll * a * b) % MOD;
}

int product(int a, int b) {
    return (1ll * a * b) % MOD;
}

int diff(int a, int b) 
{
    return (MOD + a - b) % MOD;
}

int n, k;
int pows1[N], pows2[N];
int c[N][N];
int dp[N][N];

void calc() {
    pows1[0] = 1;
    for (int i = 1; i <= n; i++) pows1[i] = product(pows1[i - 1], k);
    pows2[0] = 1;
    for (int i = 1; i <= n; i++) pows2[i] = product(pows2[i - 1], k - 1);
    c[0][0] = 1;
    for (int i = 1; i <= n; i++) {
        c[i][0] = 1;
        c[i][i] = 1;
        for (int j = 1; j < i; j++) {
            c[i][j] = sum(c[i - 1][j - 1], c[i - 1][j]);
        }
    }
}

int solve(int row, int cnt) {
    if (dp[row][cnt] != -1) return dp[row][cnt];
    if (row > n) return dp[row][cnt] = (cnt == 0 ? 1 : 0);
    int res = 0;
    for (int i = 0; i <= cnt; i++) {
        int x = 1;
        if (i > 0) {
            mult(x, c[cnt][i]);
            mult(x, pows1[n - cnt]);
            mult(x, pows2[cnt - i]);
        }
        else {
            mult(x, pows2[cnt]);
            mult(x, diff(pows1[n - cnt], pows2[n - cnt]));
        }
        add(res, product(x, solve(row + 1, cnt - i)));
    }
    //cout << row << " " << cnt << " " << res << endl;
    return dp[row][cnt] = res;
}

int res;
int a[N][N];

bool check() {
    for (int i = 1; i <= n; i++) {
        bool ok = false;
        for (int j = 1; j <= n; j++) {
            if (a[i][j] == 1) ok = true;
        }
        if (!ok) return false;
    }
    for (int j = 1; j <= n; j++) {
        bool ok = false;
        for (int i = 1; i <= n; i++) {
            if (a[i][j] == 1) ok = true;
        }
        if (!ok) return false;
    }
    return true;
}

void stup(int x, int y) {
    if (x > n) {
        if (check()) res++;
        return;
    }
    for (int i = 1; i <= k; i++) {
        a[x][y] = i;
        if (y < n) stup(x, y + 1);
        else stup(x + 1, 1);
    }
}


int stupsolve() {
    res = 0;
    stup(1, 1);
    return res;
}

int main() {
    cin >> n >> k;
    calc();
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) dp[i][j] = -1;
    }
    //cout << stupsolve() << endl;
    cout << solve(1, n);
    return 0;
}