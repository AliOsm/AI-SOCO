#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
using namespace std;
#define ll long long
#define mp make_pair
#define pb push_back
//#define ld long double
const double sn = 1e-6;
const int siz = 200005;
set<int> gs[siz];
vector<int> adj[siz], child[siz];
int n;
int arr[siz];
bool vis[siz];
int ans[siz];
int gcd(int a, int b) {
	return (b==0?a:gcd(b, a%b));
}
void root(int i) {
	vis[i] = true;
	int sz = adj[i].size();
	for (int j = 0; j < sz; j++) {
		if (!vis[adj[i][j]]) {
			child[i].push_back(adj[i][j]);
			root(adj[i][j]);
		}
	}
}
void solve(int i, int p, int cur) {
	if (p != 0) {
		for (auto v : gs[p])
			gs[i].insert(gcd(arr[i], v));
	}
	int val = gcd(cur, arr[i]);
	gs[i].insert(val);
	gs[i].insert(cur);
	ans[i] = *gs[i].rbegin();
	int sz = child[i].size();
	for (int j = 0; j < sz; j++) {
		solve(child[i][j], i, val);
	}
}
int main() {
	scanf("%d", &n);
	for (int i = 1; i <= n; i++) {
		scanf("%d", &arr[i]);
	}
	for (int i = 0; i < n - 1; i++) {
		int a, b;
		scanf("%d%d", &a, &b);
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	root(1);
	solve(1,0,0);
	for (int i = 1; i <= n; i++) {
		printf("%d", ans[i]);
		if (i != n)
			printf(" ");
		else
			printf("\n");
	}
	return 0;
}