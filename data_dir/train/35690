// https://codeforces.com/contest/1260/problem/C

/*

Approach :
1 : Let r <= b ( If not then swap )
2 : Divide r and b both by their gcd

3 : Then we will always find a position pos for which pos is colored blue and pos + 1 is colored red
4 : This can be proven from the fact that r*x - b*y = 1 always has a solution ( using r*x = 1 ( mod b ) always holds
    a solution if gcd ( r , b ) divides 1 ( Which it does since gcd of r and b now = 1 ( After step 2 ) ) ).

5 : This is the most dangerous position. Since this will have the max chance of a lot of consecutive red balls

Eg : r = 3 , b = 5.
So it will be E E R E B R E E R B
where E - empty
R - red and B - blue

So if we remove E - RB [RR] B : Danger position in [] ( Where configuration[pos] = B and configuration[pos+1] = R

So if we can satisfy such dangerous window ; then we can satisfy all other as well
This dangerous window will always have b - 1 positions where we will not be able to fill color blue
Out of these b - 1 positions which can't be filled using Blue ; we can fill ceil ( (b - 1)/a ) with red.

So if ceil ( (b-1)/a ) >= k : We will always have at least a k sized window with red colored balls ; thus answer - REBEL
else - ans = OBEY.

*/

#include<bits/stdc++.h>
using namespace std;

# define ld long double

void solve()
{
    int r , b , k ;
    cin >> r >> b >> k ;

    int g = __gcd ( r , b ) ;
    r /= g ; b /= g ;

    if ( r > b ) swap ( r , b ) ;

    ld num = b - 1 ;
    ld den = r ;

    int temp = ceil ( num / den ) ;

    if ( temp >= k )
        cout << "REBEL" ;

    else
        cout << "OBEY" ;

    cout << "\n" ;
}

int main()
{
    int t ; cin >> t ;
    while ( t -- ) solve() ;
    return 0 ;
}
