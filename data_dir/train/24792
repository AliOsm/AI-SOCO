#include<bits/stdc++.h>
#define int long long int
#define ld long double
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD2 998244353
#define MOD1 1e9+7
#define f first
#define s second
#define endl '\n'
#define pii pair<int,int>
#define piii pair<pii,int>
#define precise(i) cout<<fixed<<setprecision(i)
#define codejam cout<<"Case #"<<ii+1<<": ";
#define impossible cout<<"IMPOSSIBLE"<<endl;
#define error(s) throw runtime_error(s)
using namespace std;
const long double PI = atan(1.0)*4;
const int64_t INF=8e18;
const int32_t LOG=21;
const int MOD=MOD1;

vector<int> v[2005];
vector<pair<int,pii>> edges;
int dist1[2005][2005];
int dist[2005][2005];
int edge[2005][2005];
int parent[2005];
int root=-1;

void dfs(int i,int prev,int weight=0)
{
       dist1[root][i]=weight;
       for(auto it:v[i])
       {
            if(it!=prev)
            {
                dfs(it,i,edge[i][it]+weight);
            }
       }  
}

int find(int v)
{
    if(parent[v]<0)
    return v;
    else
    return find(parent[v]);    
}
bool cycle(int v1,int v2)
{
    int parent1=find(v1);
    int parent2=find(v2);
    if(parent2==parent1)
    return true;
    else
    return false; 
}
void merge(int v1,int v2)
{
   int parent1=find(v1);
   int parent2=find(v2);
   int temp1=parent[parent1];
   int temp2=parent[parent2];
   if(temp1<=temp2)
   {
     parent[parent2]=parent1;
     parent[v1]=parent1;
     parent[v2]=parent1;
     parent[parent1]=temp1+temp2;  
   } 
   else
   {
     parent[parent1]=parent2;
     parent[v1]=parent2;
     parent[v2]=parent2;
     parent[parent2]=temp1+temp2;  
   }     
}

int32_t main()
{ 
      getFaster;
      int tests=1;
      //cin>>tests;
      rep(ii,0,tests)
      {
         fill(parent,parent+2003,-1);
         int n;
         cin>>n;
         rep(i,1,n+1)rep(j,1,n+1)cin>>dist[i][j];
         rep(i,1,n+1)rep(j,1,n+1)edges.push_back({dist[i][j],{i,j}});
         sort(edges.begin(),edges.end());
         int cnt=0;
         rep(i,0,edges.size())
         {
             int x=edges[i].s.f,y=edges[i].s.s;
             if(edges[i].f==0)continue;
             if(!cycle(x,y))
             {
                  cnt++;
                  merge(x,y);
                  v[x].push_back(y);
                  v[y].push_back(x);
                  edge[x][y]=edge[y][x]=edges[i].f;
             }
         }

         if(cnt!=n-1)
         {
            cout<<"NO"<<endl;
            return 0;
         }

         rep(i,1,n+1){root=i;dfs(i,-1);}

         rep(i,1,n+1)rep(j,1,n+1)
         {
             if(dist[i][j]!=dist1[i][j])
             {
                cout<<"NO"<<endl;
                return 0;
             }
         }
         cout<<"YES"<<endl;
      
      }     
      return 0;                         
}

/*
 TIPS:
 1.) Check for corner cases (like 0 is exception case)
 2.) Check for global memory sizes,memory refreshments and its complexity 
 3.) Check for sorting criteria (if used 1-based indexing)
 4.) Check for numbers overflow (while multiplying and doing MOD)
 5.) Check for typecasting issues like int to float( while dividing numbers)
*/