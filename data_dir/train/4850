#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace std;
using namespace __gnu_pbds;
#define PI                      3.1415926535897932384626
#define MOD                     998244353
#define int                     long long int
#define fi                      first
#define se                      second
#define pq                      priority_queue
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define fill(x,y)               memset(x,y,sizeof(x));
#define rep(x,y,z)              for(int x = y; x < z; ++x)
#define repr(x,y,z)             for(int x = y; x > z; --x)
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define hash                    _H
#define lg                      long double         

typedef tree<pii,null_type,less<pii>,rb_tree_tag,
tree_order_statistics_node_update> ordered_set;

template<typename T> T pow(T a,T b, int m){T ans=1; while(b>0){ if(b%2==1) ans=(ans*a)%m; b/=2; a=(a*a)%m; } return ans%m; }
template<typename T>T InverseMod(T a,int m){return pow(a,m-2,m);}
template<typename T>int SquareDist(T a,T b){int x = abs(a.fi - b.fi),y = abs(a.se - b.se); return x*x + y*y;}


struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};


void solve()
{
    string s;
    cin >> s;
    bool mi = false;
    if(s[0] == '-')
    {
        mi = true;
    }
    std::vector<char> v;
    bool dot = false;
    for(auto i:s){ if(i != '-')v.pb(i) ; if(i == '.') dot = true;};
    string f = "",in = "";
    while(dot and v.back() != '.')
    {
        f += v.back();
        v.pop_back();
    }
    f += '.';
    if(dot)
        v.pop_back();
    reverse(all(f));
    while(f.length() < 3)
    {
        f += '0';
    }
    while(f.size() > 3)
    {
        f.pop_back();
    }
    int count = 0;
    while(v.size() > 0)
    {
        in += v.back();
        v.pop_back();
        count++;
        if(count%3 == 0 and v.size())
            in += ',';
    }
    reverse(all(in));
    string ans = "$" + in + f;
    if(mi)
    {
        ans = "($" + in + f + ")";
    }
    cout << ans << endl;
}       




signed main()
{
    fast;
    solve();
} 