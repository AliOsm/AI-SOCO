using namespace std;
#include<bits/stdc++.h>
#define ll long long
#define pll pair<ll,ll>
#define pii pair<int,int>
#define fir first
#define sec second
#define mp make_pair
#define pb push_back
#define sz(c) ((int)c.size())
#define all(c) (c).begin(),(c).end()
#define MASK(i) (1LL<<(i))
#define BIT(x,i) (((x)>>(i))&1)
#define fn "MULTISET"  /// ___FILE_NAME_HERE___
#define rep(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define __rep(c,it) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();it++)

template <class T,class U>
void maximize(T &x,U y)
{
    if(x < y)x=y;
}
template <class T,class U>
void minimize(T &x,U y)
{
    if(x > y)x=y;
}
template <class T>
T Abs(T x)
{
    return (x < 0 ? -x : x);
}
template <class T>
T safe_sqrt(T x)
{
    return sqrt(max(x,(T)0));
}
template <class T,class U,class V>
T addmod(T x,U k,V MOD)
{
    return ((x+k)%MOD + MOD)%MOD;
}
template <class T,class U,class V>
T submod(T x,U k,V MOD)
{
    return ((x-k)%MOD + MOD)%MOD;
}
template <class T,class U,class V>
T mul(T x,U y,V MOD)
{
    return (ll)x*y%MOD;
}
/*------------------------------------------END_OF_TEMPLATE------------------------------------------*/

namespace task{

const int maxk=30;
int q;
struct node
{
    int cnt;
    node *child[2];
    node()
    {
        cnt=0;
        child[0]=child[1]=NULL;
    }
};
node *root=new node;

void ins(int x)
{
    node *cur=root;
    for(int k=maxk;k>=0;--k)
    {
        if(!cur->child[BIT(x,k)])
            cur->child[BIT(x,k)]=new node;
        cur=cur->child[BIT(x,k)];
        cur->cnt++;
    }
}

void del(int x)
{
    node *cur=root;
    for(int k=maxk;k>=0;--k)
    {
        cur=cur->child[BIT(x,k)];
        cur->cnt--;
    }
}

int query(int x)
{
    int res=0;
    node *cur=root;
    for(int k=maxk;k>=0;--k)
    {
        if(cur->child[BIT(x,k)^1] and cur->child[BIT(x,k)^1]->cnt)
        {
            res+=MASK(k);
            cur=cur->child[BIT(x,k)^1];
        }
        else
        {
            if(!cur->child[BIT(x,k)] or !cur->child[BIT(x,k)]->cnt)return 0;
            cur=cur->child[BIT(x,k)];
        }
    }
    return res;
}

void solve()
{
    scanf("%d",&q);
    ins(0);
    while(q--)
    {
        char c;
        int x;
        scanf(" %c",&c);
        scanf("%d",&x);
        if(c=='+')ins(x);
        else if(c=='-')del(x);
        else printf("%d\n",query(x));
    }
}}

int main(void)
{
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    task::solve();
}
