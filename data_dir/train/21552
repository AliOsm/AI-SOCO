#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define ndl '\n'
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<int, ll> pil;
typedef pair<ll, int> pli;
typedef pair<int, ull> piu;
typedef vector<vector<int>> matrix;

const ll INF = 1e18 + 123;
const ld EPS = 1e-9;
const int inf = 1e9 + 123;
const int MOD = 1e9 + 7;
const int N = 3e6 + 123;
const int M = 1e6 + 123;
const double pi = acos(-1.0);
const int dx[] = {0, 0, 1, -1};
const int dy[] = {1, -1, 0, 0};

int a[N], d[N];

int l[N], r[N];

void upd(int i){
    if (!i) return;
    int lf = i<<1;
    int rf = i<<1|1;
    r[i] = 0;
    if (a[lf]){
        r[i] = r[lf];
    }
    if (a[rf]){
        r[i] = max(r[i], r[rf]);
    }

    if (a[lf] > a[rf]){
        l[i] = l[lf];
    }
    else if (a[lf] < a[rf]){
        l[i] = l[rf];
    }

    else{
        l[i] = r[i] =d[i];
    }
    //cout << "~ " << i << " " << l[i] << " " << r[i] << endl;
}

void go(int i){
    int lf = i<<1;
    int rf = i<<1|1;
    if (!a[lf] && !a[rf]){
        a[i] = 0;
        r[i] = 0;
        l[i] = 0;
        //cout << i << endl;
        return;
    }
    if (a[lf] > a[rf]){
        a[i] = a[lf];
        go(lf);
    }
    else{
        a[i] = a[rf];
        go(rf);
    }
    upd(i);
}

int g;
set<pii> q;

void dfs(int v){
    //cout <<"~ " << v << endl;
    if (l[v] > g){
        q.insert({a[v], v});
        return;
    }
    int lf = v<<1;
    int rf = v<<1|1;
   // cout << r[lf] << " " << r[rf] << endl;
    if (a[lf] && r[lf] > g) dfs(lf);
    if (a[rf] && r[rf] > g) dfs(rf);
}

void solve(){
    int h;
    cin >> h >> g;
    int n = (1 << h);
    ll sum = 0;
    for (int i = 1; i < n; i++){
        cin >> a[i];
        sum += a[i];
        d[i] = d[i/2]+1;
        l[i] = r[i] = h;
    }

    //set<pii> q;
    q.insert({a[1], 1});
    vector<int> ans;
    while (!q.empty()){
        int v = q.begin()->y;
        q.erase(q.begin());
        ans.pb(v);
        sum -= a[v];
        go(v);
        upd(v>>1);
        if (v > 1 && l[v>>1] > g){
            q.insert({a[v>>1], v>>1});
        }
        else{
            dfs(v);
        }
    }
    for (int i = 1; i < n; i++){
        a[i] = l[i] = r[i] = d[i] = 0;
    }
    cout << sum << endl;
    for (int x : ans){
        cout << x << " ";
    }
    cout << endl;
}

int main(){
    #ifdef KAZAKH
        freopen("input.txt", "r", stdin);
    #endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t = 1;
    cin >> t;
    for (int i = 1; i <= t; i++){
        //cout << "case #" << i << ": ";
        solve();
    }
    return 0;
}
