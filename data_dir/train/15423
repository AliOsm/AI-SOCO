#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
const int N = 2e5 + 7;
const int INF = 1e9 + 7;

#define sz(x) ((ll)(x.size()))


int fen[N];

void add(int p, int val)
{
	for (p++; p<N; p += p & -p)
		fen[p] += val;
}
int get(int p, int res = 0)
{
	for (; p; p -= p & -p)
		res += fen[p];
	return res;
}

vector<int> cp;
pair<int, int> p[N];
set<int> st;

int main()
{
	ios::sync_with_stdio(false);

	int n;
	cin >> n;
	for (int i=0; i<n; i++)
	{
		cin >> p[i].second >> p[i].first;
		cp.push_back(p[i].second);
	}
	sort(cp.begin(), cp.end());
	cp.resize(unique(cp.begin(), cp.end()) - cp.begin());

	sort(p, p+n);
	ll ans = 0;
	for (int i=n-1; i>=0; i--)
	{
		int ind = lower_bound(cp.begin(), cp.end(), p[i].second) - cp.begin();
		if (get(ind+1) - get(ind) == 0)
			add(ind, 1);
		st.insert(p[i].second);
		if (i == 0 || p[i].first != p[i-1].first)
		{
			ll aa = get(cp.size());
			ans += 1LL * (aa) * (aa+1) / 2;
			int prv = 0;
			st.insert(INF);
			for (auto x : st)
			{
				int jnd = lower_bound(cp.begin(), cp.end(), x) - cp.begin();
				int all = get(jnd) - get(prv);
				ans -= 1LL * all * (all + 1) / 2;
				prv = jnd + 1;
			}
			st.clear();
		}
	}
	cout << ans << "\n";
		

	return 0;
}
