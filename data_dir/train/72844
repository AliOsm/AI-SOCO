#include<bits/stdc++.h>
using namespace std;
const int inf=1e9;
const int N=200004;
char s[N];
int a[N],sum[N];
int tree[4*N];
void update(int nd,int l,int r,int idx,int val)
{
    if(l==r)
    {
        tree[nd]=val;
        return ;
    }
    int mid=(l+r)/2;
    if(idx<=mid)
        update(2*nd,l,mid,idx,val);
    else update(2*nd+1,mid+1,r,idx,val);
    tree[nd]=max(tree[2*nd],tree[2*nd+1]);
}
int query(int nd,int l,int r,int ql,int qr,int val)
{
    if(tree[nd]<val) return -1;
    if(l>r || ql>r || qr<l) return -1;
    if(l==r)
        return l;
    int mid=(l+r)/2;
    if(tree[2*nd+1]>=val)
        return query(2*nd+1,mid+1,r,ql,qr,val);
    else if(tree[2*nd]>=val) return query(2*nd,l,mid,ql,qr,val);
    else return -1;
}
vector<pair<int,int> >vec;
bool compare(pair<int,int> a,pair<int,int>b)
{
    if(a.first!=b.first)
        return a.first>b.first;
    else return a.second>b.second;
}
int main()
{
    int n;
    scanf("%s",s+1);
    n=strlen(s+1);
    int i,j;
    for(i=1;i<=4*n;i++)
        tree[i]=-inf;
    for(i=1;i<=n;i++)
    {
        if(s[i]=='a' || s[i]=='e' || s[i]=='i' ||  s[i]=='o' || s[i]=='u' || s[i]=='A' || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U')
            a[i]=-1;
        else a[i]=2;
    }
    vec.push_back({0,0});
    for(i=1;i<=n;i++)
    {
        sum[i]=sum[i-1]+a[i];
        vec.push_back(make_pair(sum[i],i));
    }
    sort(vec.begin(),vec.end(),compare);
    int ans=0;
    for(i=0;i<vec.size();i++)
    {
        int lt=query(1,1,n,vec[i].second,n,vec[i].first);
        if(lt!=-1)
            ans=max(ans,lt-vec[i].second);
        update(1,1,n,vec[i].second,vec[i].first);
    }
    int cnt=0;
    for(i=1;i<=n-ans+1;i++)
    {
        j=i+ans-1;
        if(sum[j]>=sum[i-1])
            cnt++;
    }
    if(ans>0)
      printf("%d %d\n",ans,cnt);
    else
        printf("No solution\n");
    return 0;

}
