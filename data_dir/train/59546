#include <bits/stdc++.h>
using namespace std;
typedef signed long long ll;

#undef _P
#define _P(...) (void)printf(__VA_ARGS__)
#define FOR(x,to) for(x=0;x<(to);x++)
#define FORR(x,arr) for(auto& x:arr)
#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)
#define ALL(a) (a.begin()),(a.end())
#define ZERO(a) memset(a,0,sizeof(a))
#define MINUS(a) memset(a,0xff,sizeof(a))
//-------------------------------------------------------

template<class V,int NV> class SegTree_1 {
public:
	vector<V> val;
	static V const def=0;
	V comp(V l,V r){ return max(l,r);};
	
	SegTree_1(){val=vector<V>(NV*2,def);};
	V getval(int x,int y,int l=0,int r=NV,int k=1) { // x<=i<y
		if(r<=x || y<=l) return def;
		if(x<=l && r<=y) return val[k];
		return comp(getval(x,y,l,(l+r)/2,k*2),getval(x,y,(l+r)/2,r,k*2+1));
	}
	void update(int entry, V v) {
		entry += NV;
		val[entry]=comp(v,val[entry]);
		while(entry>1) entry>>=1, val[entry]=comp(val[entry*2],val[entry*2+1]);
	}
};
SegTree_1<ll,1<<21> st;

int N,K;
int A[1010101];
vector<int> C[1010101];
ll mo=1000000007;

void solve() {
	int i,j,k,l,r,x,y; string s;
	
	scanf("%d%d",&N,&K);
	FOR(i,N) {
		scanf("%d",&A[i]);
		st.update(i,A[i]);
		if(i+K<=N) C[i%(K-1)].push_back(i);
	}
	ll ret=0;
	//random_shuffle(C, C + K);
	FOR(i,K) {
	  //random_shuffle(ALL(C[i]));
		//reverse(ALL(C[i]));
		map<ll,ll> M;
		ll tot=0;
		FORR(c,C[i]) {
			ll ma=st.getval(c,c+K);
			(tot+=ma)%=mo;
			M[ma]++;
			//cout << ma << endl;
			while(M.begin()->first<ma) {
				(tot+=(ma-M.begin()->first)*M.begin()->second)%=mo;
				M[ma]+=M.begin()->second;
				M.erase(M.begin());
			}
            //cout << c << ' ' << tot << endl;
			(ret+=tot)%=mo;
		}
	}
	cout<<ret<<endl;
}


int main(int argc,char** argv){
	string s;int i;
	if(argc==1) ios::sync_with_stdio(false), cin.tie(0);
	FOR(i,argc-1) s+=argv[i+1],s+='\n'; FOR(i,s.size()) ungetc(s[s.size()-1-i],stdin);
	cout.tie(0); solve(); return 0;
}
