using namespace std;
#include<bits/stdc++.h>

#define BG begin()
#define ED end()
#define st first
#define nd second
#define PB push_back
#define PF push_front
#define FOR(i,a,b) for (long long i=a;i<b;i++)
#define FORE(i,a,b) for (long long i=a;i<=b;i++)
#define FORD(i,a,b) for (long long i=a;i>=b; i--)
#define TR(c, it) for(typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
#define PI 2 * acos(0)
#define ri(n)({\
    int neg=0;\
    n=0;\
    char ch;\
    for(ch=getchar(); ch<'0' || ch>'9'; ch=getchar()) if (ch=='-') neg=1-neg;\
    n=ch-48;\
    for(ch=getchar(); ch>='0' && ch<='9'; ch=getchar()) n=(n<<3)+(n<<1)+ch-48;\
    if (neg) n=-n;\
})

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> II;
typedef pair<ll,ll> LL;
const ll INF=1000000000+7;
const double esp=1e-13;

struct PT {
    double x, y;
    PT (){}
    PT (double x, double y) : x(x), y(y){}
    PT (const PT &p) : x(p.x), y(p.y){}
    PT operator - (const PT &p){ return PT(x - p.x, y - p.y);}
    PT operator + (const PT &p){ return PT(x + p.x, y + p.y);}
    PT operator * (double c){ return PT(x * c, y * c); }
    PT operator / (double c){ return PT(x/c, y/c); }
    bool operator == (const PT &p) {return x == p.x && y == p.y; }
    bool operator != (const PT &p) {return x != p.x || y != p.y; }
};

double dot(PT p, PT q){ return p.x*q.x+p.y*q.y; }
double dist2(PT p, PT q){ return dot(p-q,p-q); }
double cross(PT p, PT q){ return p.x*q.y-p.y*q.x; }
ostream &operator<< (ostream &os, const PT &p){
os << "("<< p.x << ","<< p.y << ")";
}

ll power(ll a, ll n, ll m){
    ll ans=1;
    while (n){
        if (n%2) ans=ans*a%m;
        a=a*a%m;
        n/=2;
    }
    return ans;
}

ll a[100000+10],d,sum,n;

int main(){
 //   freopen("codeforces.inp", "r", stdin);
 //   freopen("codeforces.out", "w", stdout);
    ios_base::sync_with_stdio (false);
    cin.tie();
    cin >> n;
    FORE(i,1,n){
        cin >> a[i];
        sum+=a[i];
    }
    sort(a+1,a+n+1);
    FOR(i,1,n) sum+=2*i*(n-i)*(a[i+1]-a[i]);

    d=__gcd(sum,n);
    sum/=d;
    n/=d;
    cout << sum << " " << n;
}


