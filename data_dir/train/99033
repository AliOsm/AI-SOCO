#include <iostream>
#include <algorithm>
#include <map>
#include <set>
#include <vector>
#include <string>
#include <sstream>
#include <time.h>
#include <stdlib.h>
#include <queue>
#include <random>
#include <stack>
#include <cmath>

using namespace std;

int main()
{
	cin.tie(0);
	ios_base::sync_with_stdio(0);

	int n, b;
	cin >> n >> b;
	vector<pair<long long, long long> > v;
	for(int i = 0; i < n; ++i)
	{
		int t, d;
		cin >> t >> d;
		v.push_back(make_pair(t, d));
	}
	long long curtime = -1;
	queue<pair<pair<long long, long long>, int> > st;
	vector<long long> ans(n, -1);
	st.push(make_pair(make_pair(v[0].first, v[0].first + v[0].second), 0));
	ans[0] = st.front().first.second;
	curtime = v[0].first + v[0].second;
	for(int i = 1; i < n; ++i)
	{
		if(st.size() && st.front().first.second <= v[i].first)
		{
			curtime = st.front().first.second;
			st.pop();
			--i;
		}
		else
			if(st.size() && st.front().first.first <= v[i].first && st.front().first.second > v[i].first)
			{
				if(st.size() <= b)
				{
					ans[i] = st.back().first.second + v[i].second;
					st.push(make_pair(make_pair(ans[i]-v[i].second, ans[i]), i));
				}
			}
			else
			{
				if(st.size() == 0)
				{
					ans[i] = max(curtime, long long(v[i].first)) + v[i].second;
					st.push(make_pair(make_pair(ans[i]-v[i].second, ans[i]), i));
				}
			}
	}
	for(int i = 0; i < n; ++i)
		cout << ans[i] << " ";
	cout << endl;
	return 0;
}