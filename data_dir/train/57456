#include <iostream>
#include <queue>
#include <vector>
#include <map>
using namespace std;

const int MAXN = 100005;

int nodes = 3;
vector< pair<int, int> > edges;
int k;

vector<int> bastards;

void solve_mini(int root){

	int start = root;
	int finish = root + k;

	for(int i = start; i <= finish; i++){
		for(int j = i + 1; j <= finish; j++){
			if( i == j ) continue;

			if( i == start && finish == j ) continue;

			edges.push_back( make_pair(i, j) );
		}
	}

	bastards.push_back(finish);

	nodes = finish + 1;
}
void solve(int root){

	for(int i = 1; i <= k - 1; i++){
		edges.push_back( make_pair(root, nodes) );
		solve_mini( nodes );
	}

	for(int i =0; i < bastards.size(); i+= 2){
		edges.push_back( make_pair( bastards[i], bastards[i+1] ) );
	}
	bastards.clear();
}

int main() {
ios::sync_with_stdio(0);
cin.tie(0);
cout.tie(0);

	cin >> k;

	if( k % 2 == 0){
		cout << "NO" << endl;
		return 0;
	}

	edges.push_back( make_pair(1, 2) );
	
	if( k > 1 ){

	solve(1);
	solve(2);
	}
 	cout << "YES" << '\n';
	cout << nodes-1 << " " << edges.size() << '\n';

	for(int i = 0 ; i < edges.size(); i++)
		cout << edges[i].first << " " << edges[i].second << '\n';

	return 0;
}