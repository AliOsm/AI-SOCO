#include<bits/stdc++.h>
#define __ ios_base::sync_with_stdio(0); cin.tie(0);

using namespace std;

const int N = 1001000;

vector<int> L(4 * N, 0), R(4 * N, 0), ans(4 * N, 0);
string s;

struct node {
  int x,y,c;

  node () {};
  node (int _x, int _y, int _c) : x(_x), y(_y), c(_c) {};
};

node segmentTree (int x, int y, int id, int l, int r) {
  if (l >= y || x >= r) return node(0, 0, 0);
  if(x <= l && r <= y)
    return node(L[id], R[id], ans[id]);

  int mid = (l + r) / 2;
  node a = segmentTree (x, y, 2 * id, l, mid);
  node b = segmentTree (x, y, 2 * id + 1, mid, r);

  int res, tmp, left, right;
  tmp = min(a.x , b.y);
  res = a.c + b.c + tmp;
  left = a.x + b.x - tmp;
  right = a.y + b.y - tmp;
  return node(left, right, res);
}

void init (int id, int l, int r) {
  if (r - l < 2) {
    if (s[l] == '(')
      L[id] = 1;
    else
      R[id] = 1;

    return;
  }

  int mid = (r + l) / 2;
  init (2 * id, l, mid);
  init (2 * id + 1, mid, r);

  int tmp = min(L[2 * id], R[2 * id + 1]);
  ans[id] = ans[2 * id] + ans[2 * id + 1] + tmp;
  L[id] = L[2 * id] + L[2 * id + 1] - tmp;
  R[id] = R[2 * id] + R[2 * id + 1] - tmp;
}

int main() { __
  cin >> s;

  int n = s.size();
  init (1, 0, n);

  int q;
  cin >> q;
  for (int i = 0; i < q; ++i) {
    int l, r;
    cin >> l >> r;
    node res = segmentTree(l - 1, r, 1, 0, n);
    cout << 2 * res.c << endl;
  }

  return 0;
}