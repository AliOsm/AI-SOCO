#include <bits/stdc++.h>
using namespace std;
const int sz=105;
int q;
char s[sz],t[sz],p[sz];
int have[26];
int target[26];
int need[26];
int can[26];
int ns,nt,np;
deque<int> ps[26],pt[26],pp[26];

int main()
{
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    scanf("%d",&q);
    while(q--){
        scanf("%s %s %s",s,t,p);
        memset(have,0,sizeof(have));
        memset(target,0,sizeof(target));
        memset(can,0,sizeof(can));
        memset(need,0,sizeof(need));
        ns=strlen(s);
        nt=strlen(t);
        np=strlen(p);
        for(int i=0;i<26;i++){
            ps[i].clear();
            pt[i].clear();
            pp[i].clear();
        }
        for(int i=0;i<ns;i++){
            have[s[i]-'a']++;
            ps[s[i]-'a'].push_back(i);
        }
        for(int i=0;i<nt;i++){
            target[t[i]-'a']++;
            pt[t[i]-'a'].push_back(i);
        }
        for(int i=0;i<np;i++){
            can[p[i]-'a']++;
            pp[p[i]-'a'].push_back(i);
        }
        bool done=0;
        int lst=-1;
        for(int i=0;i<ns;i++){
            int my=s[i]-'a';
            if(pt[my].empty()){
                puts("NO");
                done=1;
                break;
            }else{
                while(!pt[my].empty()&&pt[my].front()<lst) pt[my].pop_front();
                if(pt[my].empty()){
                    puts("NO");
                    done=1;
                    break;
                }
                lst=pt[my].front();
                pt[my].pop_front();
            }
        }
        if(done) continue;
        for(int i=0;i<26;i++){
            if(have[i]>target[i]){
                puts("NO");
                done=1;
                break;
            }
        }
        if(done) continue;
        done=1;
        for(int i=0;i<26;i++){
            if(target[i]>have[i]){
                need[i]=target[i]-have[i];
                done=0;
            }
        }
        if(done){
            puts("YES");
            continue;
        }
        done=0;
        for(int i=0;i<26;i++){
            if(need[i]>can[i]){
                puts("NO");
                done=1;
                break;
            }
        }
        if(done) continue;
        else puts("YES");
    }
    return 0;
}
