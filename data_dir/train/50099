#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define DEBUG
#ifdef DEBUG
#define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
	template <typename Arg1>
	void __f(const char* name, Arg1&& arg1)
	{
		cerr << name << " = " << arg1 << endl;
	}
	template <typename Arg1, typename... Args>
	void __f(const char* names, Arg1&& arg1, Args&&... args)
	{
		const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " = " << arg1 << " || ";
		__f(comma+1, args...);
	}
#else
#define debug(...)
#endif

template <class Ch, class Tr, class Container>
basic_ostream <Ch, Tr> & operator << (basic_ostream <Ch, Tr> & os, Container const& x) {
    os << "{ ";
    for(auto& y : x) os << y << " ; ";
    return os << "}";
}

template <class X, class Y>
ostream & operator << (ostream & os, pair <X, Y> const& p) {
	return os << "[ " << p.first << ", " << p.second << "]" ;
}

#define FAST_IO std::ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()
#define endl "\n"

// priority_queue<ll, vector<ll>, less<ll>>pq;     // Max Heap
// priority_queue<ll, vector<ll>, greater<ll>>pq;  // Min Heap

typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth (1 based indexing) smallest: " << *A.find_by_order(k - 1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

const int MAXN = 2e5 + 5;

ll n, k, a[MAXN], cum[MAXN], ind, mx = 1e18;
vector<pair<ll,ll>>v;

int main()
{
	FAST_IO;

 	cin >> n >> k;   
 	for(int i=0;i<n;i++) cin >> a[i];
 	sort(a, a + n);
 	cum[0] = a[0];
 	for(int i=1;i<n;i++) cum[i] = cum[i - 1] + a[i];
 	ll curr = a[0], val = 1;
 	for(int i=1;i<n;i++)
 	{
 		if(a[i] != curr)
 		{
 			v.pb(mp(curr, val));
 			curr = a[i];
 			val = 1;
 		}
 		else val += 1;
 	}
 	v.pb(mp(curr, val));
 	for(int i=0;i<sz(v);i++)
 	{
 		if(v[i].second >= k)
 		{
 			cout << 0 << endl;
 			return 0;
 		}
 	}
 	for(int i=0;i<sz(v);i++)
 	{
 		ll c1 = 0, c2 = 0;
 		if(ind > 0) c1 = (v[i].first - 1) * ind - cum[ind - 1];
 		if(ind + v[i].second < n) c2 = (cum[n - 1] - cum[ind + v[i].second - 1]) - (v[i].first + 1) * (n - ind - v[i].second);
 		if(ind + v[i].second >= k) mx = min(mx, c1 + k - v[i].second);
 		if(n - ind >= k) mx = min(mx, c2 + k - v[i].second);
 		mx = min(mx, c1 + c2 + k - v[i].second);
 		ind += v[i].second;
 	}
 	cout << mx << endl;
    return 0;
}