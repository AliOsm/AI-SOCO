#include <bits/stdc++.h>
using namespace std;
#define read            freopen("C:\\Users\\Dell\\Desktop\\in.txt", "r", stdin)
#define write           freopen("C:\\Users\\Dell\\Desktop\\out.txt", "w", stdout)
#define pii             pair<LL , LL >
#define in(a)           scanf("%I64d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%I64d%I64d", &a, &b)
#define in3(a, b, c)    scanf("%I64d%I64d%I64d", &a, &b, &c)
#define pn              printf("\n")
#define pr(a)           printf("%I64d\n", a)
#define prs(a)          printf("%I64d ", a)
#define pr2(a, b)       printf("%I64d %I64d\n", a, b)
#define pr3(a, b ,c)    printf("%I64d %I64d %I64d\n", a, b, c)
#define MP              make_pair
#define vi              vector<LL >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define MEM(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)

// Debugger.begin()

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); pn;}
vector<string> split(const string& s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c))
		v.emplace_back(x);
	return move(v);
}

void err(vector<string>::iterator it) {}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

// Debugger.end()

typedef long long LL;
static constexpr LL inf = std::numeric_limits<LL >::max();
//LL  dx[]={1,0,-1,0};LL dy[]={0,1,0,-1}; //4 Direction
//LL  dx[]={1,1,0,-1,-1,-1,0,1};LL dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//LL  dx[]={2,1,-1,-2,-2,-1,1,2};LL dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(LL n, LL pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//LL  on(LL n, LL pos) {return n | (1<<pos);} //typecast 1 in case of int
//LL  off(LL n, LL pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

const LL M=500010;
LL parent[M], size[M], visited[M];
vi A[M];
pii S[M];
map<pii, int>done;
LL f(LL u)
{
    return parent[u]=parent[u]==u?u:f(parent[u]);
}
void join(LL x, LL y)
{
    LL u=f(x), v=f(y);
    if (u!=v)
    {
        parent[u]=v;
        size[v]+=size[u];
    }
}
int main()
{
#ifndef ONLINE_JUDGE
    read;
#endif
    LL i, j, k, n, m;

    in2(n, m);
    for (i=1; i<=n; i++)
    {
        parent[i]=i;
        size[i]=1;
        in(k);
        S[i-1]=MP(k, i);
    }
    sort(S, S+n, greater<pii>());
    while (m--)
    {
        in2(i, j);
        A[i].pb(j);
        A[j].pb(i);
    }

    LL total, sum=0, nodes;
    MEM(visited, false);
    for (i=0; i<n; i++)
    {
        LL u=S[i].second, c=S[i].first;
        total=nodes=0;

        for (j=0; j<A[u].sz; j++)
        {
            LL v=A[u][j], p=f(v);
            if (visited[v]&&!done[MP(u, p)])
            {
                //pr3(u, v, p);
                total+= nodes*size[p];
                nodes+=size[p];
                //pr2(total, nodes);
                done[MP(u, p)]=true;
                join(u, p);
            }
        }
        total+=nodes;
        visited[u]=true;
        sum+= total*c;
    }

    printf("%.9f\n", (double)(2*sum)/(n*(n-1)));

return 0;
}
