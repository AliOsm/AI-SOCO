#include<bits/stdc++.h>
using namespace std;

#define si(n) scanf("%lld",&n)
#define f first
#define s second
#define mp(a,b) make_pair(a,b)
#define MAX 1000006
#define ll long long

pair<pair<ll,ll>,ll >quary[MAX];
ll arr[MAX],cnt[MAX];
ll n,t,q,block;
ll ret[MAX];

bool cmp(pair<pair<ll,ll>,ll> a,pair<pair<ll,ll>,ll> b)
{
	if (a.first.first/block==b.first.first/block)
	{
		if (a.first.first/block%2) return a.first.second>b.first.second;
		return a.first.second<b.first.second;
	}
	return a.first.first<b.first.first;
}

inline int getnum()
{
    char c = getchar();
    int num,sign=1;
    for(;c<'0'||c>'9';c=getchar())if(c=='-')sign=-1;
    for(num=0;c>='0'&&c<='9';)
    {
        c-='0';
        num = num*10+c;
        c=getchar();
    }
    return num*sign;
}

int main()
{
    //freopen("input.txt","r",stdin);
    ll i,j,k;
    n=getnum();q=getnum();
    for(i=0;i<n;i++)
        arr[i]=getnum();
    for(i=0;i<q;i++){
        ll l,r;
        l=getnum();r=getnum();
        l--;r--;
        quary[i]={{l,r},i};
    }
    block=450;
    sort(quary,quary+q,cmp);
    ll curr_l=0,curr_r=0;
    cnt[arr[0]]++;
    long long ans=arr[0];
    for(ll i=0;i<q;i++){
        ll l=quary[i].f.f,r=quary[i].f.s;
        while(curr_l<l){
            ans-=arr[curr_l]*cnt[arr[curr_l]]*cnt[arr[curr_l]];
            cnt[arr[curr_l]]--;
            ans+=arr[curr_l]*cnt[arr[curr_l]]*cnt[arr[curr_l]];
            curr_l++;
        }
            while(curr_l>l){
                curr_l--;
                ans-=arr[curr_l]*cnt[arr[curr_l]]*cnt[arr[curr_l]];
                cnt[arr[curr_l]]++;
                ans+=arr[curr_l]*cnt[arr[curr_l]]*cnt[arr[curr_l]];
            }

            while(curr_r<r){
                curr_r++;
                ans-=arr[curr_r]*cnt[arr[curr_r]]*cnt[arr[curr_r]];
                cnt[arr[curr_r]]++;
                ans+=arr[curr_r]*cnt[arr[curr_r]]*cnt[arr[curr_r]];
            }
            while(curr_r>r){
                ans-=arr[curr_r]*cnt[arr[curr_r]]*cnt[arr[curr_r]];
                cnt[arr[curr_r]]--;
                ans+=arr[curr_r]*cnt[arr[curr_r]]*cnt[arr[curr_r]];
                curr_r--;
            }
            ret[quary[i].s]=ans;
        }
        for(ll i=0;i<q;i++){
            printf("%lld\n",ret[i]);
        }
    return 0;
}
