//==================================
//==========   WARNING   ===========
//==================================
//===   Contains too many bugs   ===
//==================================
#include <deque>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cmath>
#include <set>
#include <functional>
#include <queue>
#include <iomanip>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pr;
typedef pair<ll,ll> prl;

#define double long double
#define NAME ""

const ll mod7 = 1000000007;


ll dp[2001][1<<12];

int main()
{
    //freopen(NAME".in","r",stdin); freopen(NAME".out","w",stdout);
    ios::sync_with_stdio(false);

    int n,k;
    cin >> n >> k;
    int mask = (1<<(k+1))-1;
    dp[0][0] = 1;
    for(int i=0;i<n;++i)
    {
        int t;
        cin >> t;
        if(t==0)
        {
            for(int t=2;t<=4;t+=2)
            {
                for(int p=0;p<(1<<k);++p)
                {
                    int cross = mask & (~(t-1));
                    int next = p + t;
                    if((t-1) & p)
                    {
                        cross = mask;
                        next = t;
                    }
                    dp[i+1][cross & next] += dp[i][p];
                    dp[i+1][cross & next] %= mod7;
                }
                dp[i+1][1<<k] += dp[i][1<<k];
                dp[i+1][1<<k] %= mod7;
            }
        }
        else
        {
            for(int p=0;p<(1<<k);++p)
            {
                int cross = mask & (~(t-1));
                int next = p + t;
                if((t-1) & p)
                {
                    cross = mask;
                    next = t;
                }
                dp[i+1][cross & next] += dp[i][p];
                dp[i+1][cross & next] %= mod7;
            }
            dp[i+1][1<<k] += dp[i][1<<k];
            dp[i+1][1<<k] %= mod7;
        }
    }
    
    cout << dp[n][1<<k];
    return 0;
}