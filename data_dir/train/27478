#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <assert.h>
#include <numeric>
#include <cstring>
#include <queue>
#include <functional>

#define TAKE 1
#define IGNORE 3
#define BASE 2
using namespace std;

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long Long;
typedef pair<int,int> PII;
typedef long double Double;

struct Distance {
    int d, r;
    bool operator<(const Distance &s) const {
        return d != s.d ? d < s.d : r < s.r;
    }
    bool operator>(const Distance &s) const {
        return d != s.d ? d > s.d : r > s.r;
    }
};
struct State {
    int i, j, id, p;
    Distance d;
    bool operator<(const State &s) const {
        return d < s.d;
    }
    bool operator>(const State &s) const {
        return d > s.d;
    }
};
Distance D[3][20][20][400];
int MA[20][20];
int HX[] = {-2, -2, -1, -1,  1, 1,  2, 2};
int HY[] = {-1,  1, -2,  2, -2, 2, -1, 1};
int BX[] = {-1, -1, 1, 1};
int BY[] = {-1,  1,-1, 1};
int RX[] = {-1, 0, 0, 1};
int RY[] = {0,  1,-1, 0};

Distance ditra(int N, int M) {
    priority_queue<State, vector<State>, greater<State>> PQ;
    for (int id = 1; id < 400; ++id) {
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                for (int k = 0; k < 3; ++k) {
                    D[k][i][j][id] = (Distance) {1000000000, 1000000000};
                    if (MA[i][j] == 1 && id == 1) {
                        D[k][i][j][id] = (Distance){ 0, 0 };
                        PQ.push((State){ i, j, 1, k, (Distance){ 0, 0 } });
                    }
                }
            }
        }
    }
    while (PQ.size()) {
        State c = PQ.top(); PQ.pop();
        if (D[c.p][c.i][c.j][c.id] < c.d) continue;
        if (c.id == N * M) return c.d;
        if (c.p == 0) { // horse
            for (int a = 0; a < 8; ++a) {
                State ns = c;
                ns.i += HX[a];
                ns.j += HY[a];
                ns.d.d++;
                if (ns.i >= 0 && ns.i < N && ns.j >= 0 && ns.j < M) {
                    if (MA[ns.i][ns.j] == ns.id+1) {
                        ns.id++;
                    }
                    if (ns.d < D[ns.p][ns.i][ns.j][ns.id]) {
                        D[ns.p][ns.i][ns.j][ns.id] = ns.d;
                        PQ.push(ns);
                    }
                }
            }
        } else if (c.p == 1) {
            for (int a = 0; a < 4; ++a) {
                for (int b = 1; b < 10; ++b) {
                    State ns = c;
                    ns.i += BX[a] * b;
                    ns.j += BY[a] * b;
                    ns.d.d++;
                    if (ns.i >= 0 && ns.i < N && ns.j >= 0 && ns.j < M) {
                        if (MA[ns.i][ns.j] == ns.id + 1) {
                            ns.id++;
                        }
                        if (ns.d < D[ns.p][ns.i][ns.j][ns.id]) {
                            D[ns.p][ns.i][ns.j][ns.id] = ns.d;
                            PQ.push(ns);
                        }
                    }
                }
            }
        } else if (c.p == 2) {
            for (int a = 0; a < 4; ++a) {
                for (int b = 1; b < 10; ++b) {
                    State ns = c;
                    ns.i += RX[a] * b;
                    ns.j += RY[a] * b;
                    ns.d.d++;
                    if (ns.i >= 0 && ns.i < N && ns.j >= 0 && ns.j < M) {
                        if (MA[ns.i][ns.j] == ns.id + 1) {
                            ns.id++;
                        }
                        if (ns.d < D[ns.p][ns.i][ns.j][ns.id]) {
                            D[ns.p][ns.i][ns.j][ns.id] = ns.d;
                            PQ.push(ns);
                        }
                    }
                }
            }
        }
        // change piece
        {
            for (int i = 0; i < 3; ++i) {
                if (i != c.p) {
                    State ns = c;
                    ns.d.d++;
                    ns.d.r++;
                    ns.p = i;
                    if (ns.d < D[ns.p][ns.i][ns.j][ns.id]) {
                        D[ns.p][ns.i][ns.j][ns.id] = ns.d;
                        PQ.push(ns);
                    }
                }
            }
        }
    }
}



int main() {
    int N, M;
    cin >> N;
    M = N;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            cin >> MA[i][j];
        }
    }
    Distance d = ditra(N, M);
    cout << d.d << " " << d.r << endl;


}