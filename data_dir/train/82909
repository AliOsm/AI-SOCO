#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define pdd pair<double,double>
#define uint unsigned int
#define LL long long
#define ULL unsigned LL
#define VI vector<int>
#define X first
#define Y second
#define reads(_s) getline(cin,_s)
#define sz(_v) ((int)_v.size())
#define all(_v) (_v).begin(),(_v).end()
#define FOR(_i,a,b) for (int _i(a),_l(b); _i<=_l; ++_i)
#define rept(i,a) FOR(i,0,(int)(a)-1)
#define x1 X1
#define y1 Y1
#define sqr(a) ((a)*(a))
#define C(a) memset((a),0,sizeof (a))
#define MS(a,x) memset((a),(x),sizeof (a))
#define INF 1050000000
#define INFL INF*1ll*INF
#define PI 3.141592653589
#define eps 1e-9
#define MOD 1000000007
#define PRIME 312427

using namespace std;

vector<pii> en;
int pts[10005];
LL dyn[10005];
int k;

int dst(int p, int l, int r) {
  if (p>=l && p<=r) return 0;
  return min(abs(p-l),abs(p-r));
}

void out() {
  rept(i,k) printf("%d%c",dyn[i],i+1==k?'\n':' ');
}

void solve() {
  int n,x;
  scanf("%d%d",&n,&x);
  pts[k++]=x;
  rept(i,n) {
    int l,r;
    scanf("%d%d",&l,&r);
    pts[k++]=l;
    pts[k++]=r;
    en.pb(mp(l,r));
  }
  sort(pts,pts+k);
  k=unique(pts,pts+k)-pts;
  // rept(i,k) printf("%d%c",pts[i],i+1==k?'\n':' ');
  rept(i,k) dyn[i]=abs(x-pts[i]);
  // out();
  rept(i,n) {
    rept(j,k) dyn[j]+=dst(pts[j],en[i].X,en[i].Y);
    // out();
    LL nw(INFL);
    int cur(0);
    rept(j,k) {
      if (dyn[j]<nw+pts[j]-cur) {
        nw=dyn[j];
        cur=pts[j];
      } else {
        dyn[j]=nw+pts[j]-cur;
      }
    }
    cur=INF;
    nw=INFL;
    for (int j(k-1); j>=0; --j) {
      if (dyn[j]<nw+cur-pts[j]) {
        nw=dyn[j];
        cur=pts[j];
      } else {
        dyn[j]=nw+cur-pts[j];
      }
    }
    // out();
  }
  cout<<*min_element(dyn,dyn+k)<<endl;
}

int main() {
#ifdef yeti
  // freopen("input.txt","r",stdin); // freopen("output.txt","w",stdout);
#endif

#ifdef yeti
  clock_t tm = clock();
  cout<<setprecision(10);
#endif
  solve();
#ifdef yeti
  cerr<<setprecision(3)<<(clock()-tm+0.)/CLOCKS_PER_SEC<<endl;
#endif
  return 0;
}