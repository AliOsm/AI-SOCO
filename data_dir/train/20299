#define _USE_MATH_DEFINES 
#define _CRT_SECURE_NO_DEPRECATE 
#include <iostream> 
#include <cstdio> 
#include <cstdlib> 
#include <vector> 
#include <sstream> 
#include <string> 
#include <map> 
#include <set> 
#include <algorithm> 
#include <cmath> 
#include <cstring> 
#include <queue>
#include <time.h>
using namespace std; 
#define mp make_pair 
#define pb push_back 
#define all(C) (C).begin(), (C).end() 
#define sz(C) (int)(C).size() 
#define PRIME 123 
#define PRIME1 31415 
typedef long long int64; 
typedef unsigned long long uint64; 
typedef pair<int, int> pii; 
typedef vector<int> vi; 
typedef vector<vector<int> > vvi; 
//------------------------------------------------------------ 
#define y1 asdf
#define y2 asdqwer
const int N = 200010;
int n, m;

int mas[N], was[N], cnt[N];
vector < vi > blo;
vector < vi > var;
priority_queue <pii> qq;
int ans[N];



void solve()
{
    memset(ans, -1, sizeof ans);
    cin >> n >> m;
    blo.resize(n + 1);
    var.resize(m + 1);
    for(int i = 1; i <= n; ++i)
    {
        int k;
        cin >> k;
        blo[i].resize(k);
        for(int j = 0; j < k; ++j)
        {
            cin >> blo[i][j];
            var[abs(blo[i][j])].push_back(i);
        }
        cnt[i] = k;
        qq.push(pii(-k, i));
    }
    
    while(!qq.empty())
    {
        int t = qq.top().second;
        qq.pop();
        if (was[t])
            continue;
        was[t] = 1;
        int q = 0;
        for(int i = 0; i < blo[t].size(); ++i)
        {
            if (blo[t][i] > 0)
            {
                if (ans[blo[t][i]] == 1)
                    q = 1;
            }
            else
            {
                if (ans[-blo[t][i]] == 0)
                    q = 1;
            }
        }
        if (q)
            continue;
        
        for(int i = 0; i < blo[t].size(); ++i)
        {
            if (blo[t][i] > 0)
            {
                if (ans[blo[t][i]] != -1)
                    continue;
                ans[blo[t][i]] = 1;
                q = 1;
                for(int j = 0; j < var[blo[t][i]].size(); ++j)
                {
                    cnt[var[blo[t][i]][j]]--;
                    qq.push(pii(-cnt[var[blo[t][i]][j]], var[blo[t][i]][j]));
                }
                break;
            }
            else
            {
                if (ans[-blo[t][i]] != -1)
                    continue;
                ans[-blo[t][i]] = 0;
                for(int j = 0; j < var[-blo[t][i]].size(); ++j)
                {
                    cnt[var[-blo[t][i]][j]]--;
                    qq.push(pii(-cnt[var[-blo[t][i]][j]], var[-blo[t][i]][j]));
                }
                q = 1;
                break;
            }
        }
        
        if (!q)
        {
            cout << "NO";
            return;
        }
        for(int i = 0; i < blo[t].size(); ++i)
        {
            int zn = abs(blo[t][i]);
            if (ans[zn] != -1)
                continue;
            ans[zn] = !(blo[t][i] > 0);
            for(int j = 0; j < var[zn].size(); ++j)
            {
                cnt[var[zn][j]]--;
                qq.push(pii(-cnt[var[zn][j]], var[zn][j]));
            }
        }
    }

    cout << "YES\n";
    for(int i = 1; i <= m; ++i)
    {
        if (ans[i] == -1)
            ans[i] = 1;
        cout << ans[i]; 
    }
}

int main()
{
    ios_base::sync_with_stdio(false);cin.tie(0);
    #ifdef WIN32
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    
    solve();
        
} 