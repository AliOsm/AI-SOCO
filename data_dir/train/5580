// Bismillahirrahmanir Rahim
//NAMOMIZARAHID
#include<bits/stdc++.h>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<string>

#define nl printf("\n")
#define sp printf(" ")

#define rep(i,a,b) for(i=a;i<=b;i++)
#define rev(i,a,b) for(i=a;i>=b;i--)

#define fil freopen("input.txt","r",stdin)

#define pf printf
#define sf scanf


typedef long long l;
typedef unsigned long long ul;

using namespace std;

#define pi acos(-1.0)
#define mp make_pair
#define pb push_back
#define p_q priority_queue


#define dis( a ,b ) abs( a - b )
#define dis2d( x1 ,y1 ,x2 ,y2 )    sqrt( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) )
#define dis3d( x1 ,y1 ,z1 ,x2 ,y2 ,z2 )    sqrt( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) + ( z1 - z2 ) * ( z1 - z2 ) )


#define C(i) pf("Case %I64d: ",i)


typedef pair< l ,l > pll;
typedef pair< string ,l > psl;
typedef pair< l ,string > pls;
typedef pair< string ,string > pss;
typedef pair< char ,l > pcl;
typedef pair< l ,char > plc;


#define Inf 0x7f7f7f
#define Max 200000001
#define Min -100000000001
#define mod 1000000007

#define ms0(a) memset(a,0,sizeof(a))
#define ms1(a) memset(a,1,sizeof(a))
#define ms_1(a) memset(a,-1,sizeof(a))


#define DBG pf("I am here\n")

#define valid(nx,ny,r,c) nx>=0&&nx<=r-1 && ny>=0&&ny<=c-1

#define ck_bt( v , p ) ( ( v >> p ) & 1 )



int inline in(){int x;sf("%d",&x);return x;}
l inline lin(){l x;sf("%I64d",&x);return x;}
void P(l x){pf("%I64d",x);}


l fx[]={0,0,-1,1,-1,-1,1,1};
l fy[]={-1,1,0,0,-1,1,-1,1};

/*
struct info
{
    l x,y;
    info() {};
    info(l _x, l _y) {x = _x; y = _y;};

    bool operator < (const info &p) const
    {
		if(x == p.x) return y > p.y;
		else
			return x > p.x;
    }
};
*/


/*
    rep( i , 1 , n )
    {
        a[i] = lin() ;
    }

*/

#define rng 200010


//set< l > na ;

vector< l > V[rng] , cost[rng] ;


bool vis[rng] ;
stack< l > st ;

l level[rng] , a[rng] , rslt[rng] , b[rng] , c[rng] , dis[rng] , cum[rng] , child[rng] ;

l id = 1 ;

//l a[rng][rng] , b[rng][rng] ;

//char s[rng] ;

l F( l last_m , l val )
{
    l first = 1 , mid , last = last_m , res = last_m ;
    while( first <= last )
    {
        mid = ( first + last ) >> 1 ;

        if( dis[last_m + 1] - dis[mid] <= val )
        {
            res = mid - 1 ;
            last = mid - 1 ;
        }
        else
        {
            first = mid + 1 ;
        }
    }

    return res ;
}

void dfs( l u )
{
    //c[level[u] - 1] += 1 ;
    l d = V[u].size() , i , j ;

    rep( i , 0 , d - 1 )
    {
        l v = V[u][i] ;
        if( vis[v] == 0 )
        {
            vis[v] = 1 ;
            level[v] = level[u] + 1 ;
            //par[v] = u ;
            dis[level[v]] = dis[level[u]] + cost[u][i] ;
            dfs( v ) ;
            if( d > 1 )
            {
                c[level[v]-1] +=c[level[v]] ;
                c[level[v]] = 0 ;
            }
        }

    }

    //P(level[u]) ; sp ; P( dis[level[u]] ) ; nl ;

    c[level[u]] = c[ level[u] + 1 ] + c[level[u]] ;
    //P( level[u] ) ; sp ; P(u) ; nl ;
    rslt[u] = c[level[u]] ;

    l last_pos = level[u] - 1 ;
    l pos = F( last_pos , a[u] ) ;

    //P(last_pos) ; sp ; P( pos ) ; sp ; P( - dis[pos + 1] + dis[last_pos+1] ) ; nl ;

    c[pos] -- ;
    c[last_pos] ++ ;
    c[level[u] + 1] = 0 ;



}


int main()
{
    l i , j , r = 0 ;
    //fil;
    //freopen("out.txt","w",stdout);

    //pf("%d",'1' - 48 ) ; nl ;

    //sf("%s",&s) ;

    l n = lin() ;

    rep( i , 1 , n )
        a[i] = lin() ;

    rep( i , 2 , n )
    {
        l u = lin() ;
        l v = lin() ;

        V[u].pb(i) ;
        cost[u].pb(v) ;
    }
/*
    rep( i , 1 , n )
    {
        P( i ) ; sp ; pf(">") ; sp ;
        l d = cost[i].size() ;
        rep( j , 0 , d - 1 )
        {
            P( cost[i][j] ) ; sp ;
        }
        nl ;
    }
*/
    level[1] = 1 ;
    vis[1] = 1 ;

    dfs( 1 ) ;

    rep( i , 1 , n )
    {
        P(rslt[i] ) ; sp ;
    }


    //sort( a + 1 , a + n + 1 ) ;


    //P( pos ) ; nl ;

    //gets(s);
    return 0;
}
