#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

pair<int,int>a[100005];
int temp[100005][10];
int s[100005][10];
const int lim=pow(2,7);
int dp[100005][lim];
int power[10];
int bits[lim];
signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
   
 #ifndef ONLINE_JUDGE
    if(fopen("INPUT.txt","r"))
    {
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
    }
 #endif

// -------------------------------------Code starts here---------------------------------------------------------------------     

   power[0]=1;
   for(int i=1;i<=9;i++)
      power[i]=power[i-1]*2;
   int n,p,t;
   cin>>n>>p>>t;
   for(int i=1;i<=n;i++)
   {
      cin>>a[i].first;
      a[i].second=i;
   }
   int xan=power[p];
   for(int i=0;i<xan;i++)
   {
      int z=i,cnt=0;
      while (z!=0)
      {
         cnt+=z%2;
         z=z>>1;
      }      
      bits[i]=cnt;
      // cout<<i<<" "<<bits[i]<<'\n';
   }

   for(int i=1;i<=n;i++)
      for(int j=1;j<=p;j++)
         cin>>s[i][j];
   sort(a+1,a+n+1,greater<>());
   for(int i=1;i<=n;i++)
   {
      for(int j=1;j<=p;j++)
      {
         temp[i][j]=s[a[i].second][j];
      }
   }

   fill_n(&dp[0][0],100005*lim,-1e17);
   dp[0][0]=0;
   for(int i=1;i<=n;i++)
   {
      for(int j=1;j<=p;j++)
      {
         for(int k=0;k<xan;k++)
         {
            dp[i][k]=max(dp[i-1][k],dp[i][k]);
            if((k&power[j-1])==0)
            {
               dp[i][(k|power[j-1])]=max(dp[i][(k|power[j-1])],dp[i-1][k]+temp[i][j]);               
            }
            if(i-bits[k]<=t)
               dp[i][k]=max(dp[i][k],dp[i-1][k]+a[i].first);
         }
      }
   }
   cout<<dp[n][xan-1];

// -------------------------------------Code ends here------------------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
    clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }
