#include<bits/stdc++.h>
#define all(v) (v).begin(),(v).end()
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ri(x) scanf("%d",&(x))
#define ri2(x,y) scanf("%d %d",&(x),&(y))
#define ri3(x,y,z) scanf("%d %d %d",&(x),&(y),&(z))
#define rll(x) scanf("%lld",&(x))
#define rll2(x,y) scanf("%lld %lld",&(x),&(y))
#define rll3(x,y,z) scanf("%lld %lld %lld",&(x),&(y),&(z))
#define gc(x) ((x) = getchar())
using namespace::std;

const long double PI = acos(-1);
const long long MOD = 1000000000 +7;

typedef long long ll;
typedef pair<ll,ll> pll;
typedef pair<ll,pll> tll;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef vector<ll> vll;
typedef vector<pll> vpll;
typedef vector<tll> vtll;
typedef vector<string> vs;
typedef set<int> si;
typedef set<ii> sii;
typedef set<iii> siii;

ll gcd(ll a, ll b){ return b==0?a:gcd(b,a%b);}

ll add(ll a, ll b, ll m = MOD){
	if(a >= m) a %= m;
	if(b >= m) b %= m;
	if(a < 0) a += m;
	if(b < 0) b += m;
	ll res = a+b;
	if(res >= m or res <= -m) res %= m;
	if(res < 0) res += m;
	return res;
}

ll mul(ll a, ll b, ll m = MOD){
	if(a >= m) a %= m;
	if(b >= m) b %= m;
	if(a < 0) a += m;
	if(b < 0) b += m;
	ll res = a*b;
	if(res >= m or res <= -m) res %= m;
	if(res < 0) res += m;
	return res;
}

ll pow_mod(ll a, ll b, ll m = MOD){
	ll res = 1LL;
	a = a%m;
	while(b){
		if(b&1) res = mul(res,a,m);
		b >>= 1;
		a = mul(a,a,m);
	}
	return res;
}

ll fastexp(ll a, ll b){
	ll res = 1LL;
	while(b){
		if(b&1) res = res*a;
		b >>= 1;
		a *= a;
	}
	return res;
}

int gcdExtendido(int a, int b, int *x, int *y){
	if(a == 0){
		*x = 0;
		*y = 1;
		return b;
	}
	int x1, y1;
	int gcd = gcdExtendido(b%a,a,&x1,&y1);
	
	*x = y1-(b/a)*x1;
	*y = x1;
	return gcd;
}

int modInverso(int a, int m){
	int x, y;
	int g = gcdExtendido(a,m,&x,&y);
	if(g!=1) return -1;
	else return (x%m + m)%m;
}

/****************************************
*************P*L*A*N*T*I*L*L*A************
*****************************************/

const int N = 300000 + 5;

int n;
vi mayores, menores;
deque<int> Q[4];
char s[N];
int needed;
int ans[N];

void solve(){
	if(menores.size() == 0 and mayores.size() == 0) return;
	if(menores.size() == 1){
		// Solo uno a reemplazar
		// A lo mucho habra 2 mayores
		// Si el único menor x:
		// x < mayores[i], me conviene mandarlo a la izquierda
		// x > mayores[i], me conviene mandarlo a la derecha
		int x = menores[0];
		for(int i=0; i<mayores.size(); i++){
			// Al 0 ya le sacamos n/3 posiciones
			// asi que no necesitamos restar n/3
			// y nunca entrará al primer if, asi
			// que es safe 
			int take = mayores[i] == 0 ? Q[mayores[i]].size() : Q[mayores[i]].size() - needed;
			if(x < mayores[i]){
				for(int times = 0; times < take; times++){
					int pos = Q[mayores[i]].front();
					Q[mayores[i]].pop_front();
					ans[pos] = x;
				}
			}
			else{
				for(int times = 0; times < take; times++){
					int pos = Q[mayores[i]].back();
					Q[mayores[i]].pop_back();
					ans[pos] = x;
				}
			}
		}
	}
	else{
		// Hay 2 por reemplazar
		// Existe un mayor
		// Si x es el mayor, entonces
		// Si x es 0, entonces se vuelve
		// una competencia de posiciones
		// entre los dos menores, así que
		// le damos prioridad al mas pequeño
		// ordenando y agarrando a la izquierda
		// Si no, usamos el mismo método
		// que con solo 1 menor para cada uno
		// dado que ya están ordenados
		sort(all(menores));
		int x = mayores[0];
		for(int i=0; i<menores.size(); i++){
			int take = needed - Q[menores[i]].size();
			if(menores[i] < x or x == 0){
				for(int times = 0; times < take; times++){
					int pos = Q[x].front();
					Q[x].pop_front();
					ans[pos] = menores[i];
				}
			}
			else{
				for(int times = 0; times < take; times++){
					int pos = Q[x].back();
					Q[x].pop_back();
					ans[pos] = menores[i];
				}
			}
		}
	}
}

int main(){
	ri(n);
	scanf("%s",s);
	for(int i=0; i<n; i++){
		Q[s[i]-'0'].push_back(i);
		ans[i] = s[i]-'0';
	}
	needed = n/3;
	for(int i=0; i<3; i++){
	    if(Q[i].size() < needed) menores.pb(i);
	    else if(Q[i].size() > needed) mayores.pb(i);
	}
	if(Q[0].size() >= needed){
		// Asegurar las primeras n/3 posiciones del 0 si ya hay
		for(int i=0; i<needed; i++){
			Q[0].pop_front();
		}
	}
	solve();
	for(int i=0; i<n; i++){
		putchar('0'+ans[i]);
	}
	puts("");
	return 0;
}
