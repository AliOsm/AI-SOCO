/*
 _____ _             _              _           _ 
|_   _| |__   ___   / \   _ __  ___| |__  _   _| |
  | | | '_ \ / _ \ / _ \ | '_ \/ __| '_ \| | | | |
  | | | | | |  __// ___ \| | | \__ \ | | | |_| | |
  |_| |_| |_|\___/_/   \_\_| |_|___/_| |_|\__,_|_|                                                

*/
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
// Including tree_order_statistics_node_update
#include <ext/pb_ds/tree_policy.hpp>
#define ll          long long
#define pb          push_back
#define ppb         pop_back
#define	endl		'\n'
#define mii         map<ll int,ll int>
#define msi         map<string,ll int>
#define mis         map<ll int, string>
#define rep(i,a,b)    for(ll int i=a;i<b;i++)
#define mpi         map<pair<ll int,ll int>,ll int>
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define vii         vector<pair<ll int, ll int>>
#define vs          vector<string>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define add(p1,p2)	{p1.F+p2.F,p1.S+p2.S}
#define what_is(x)  cerr << #x << " is " << x << endl;
#define time        cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
using namespace __gnu_pbds;
#define PI 3.141592653589793
#define N  200005
/************************************/
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse2")
/************************************/
ll n,l,r;
ll m,t;
pii seg[4*N];
ll v[N];
pii a[N];



void build(ll cur,ll st,ll end)
{
	if(st==end)
	{
		seg[cur]={0,0};
		return;
	}
	ll mid=(st+end)>>1;
	build(2*cur,st,mid);
	build(2*cur+1,mid+1,end);
	seg[cur]=add(seg[2*cur],seg[2*cur+1]);	/*  1-change here  */
}
pii query(ll cur,ll st,ll end,ll l,ll r)
{
	if(l<=st&&r>=end)
	return seg[cur];
	if(r<st||l>end)
	return {0,0};                           /*  2-change here  */
	ll mid=(st+end)>>1;
	pii ans1=query(2*cur,st,mid,l,r);
	pii ans2=query(2*cur+1,mid+1,end,l,r);
	return add(ans1,ans2);                 /*  3-change here  */
}
void update(ll cur,ll st,ll end,ll pos,pii upd)
{
	if(st==end)
	{
		seg[cur]=upd;					/*  5-change here  */
		return;
	}
	ll mid=(st+end)>>1;
	if(st<=pos&&pos<=mid)
		update(2*cur,st,mid,pos,upd);
	else
		update(2*cur+1,mid+1,end,pos,upd);
	seg[cur]=add(seg[2*cur],seg[2*cur+1]);	/*  6-change here  */
}



void solve()
{
	cin>>n>>m>>t;
	ordered_set vakasv;
	rep(i,0,n)
	{
		cin>>v[i];
		a[i]={v[i],i};
	}
	sort(a,a+n);
	build(1,0,n-1);
	ll mx=0,ps=1,l,r,mid,tm,timerem,prev,excnt;
	pii num,pst;
	for(ll i=0;i<n;i++)
	{
		vakasv.insert(a[i].S+1);
		update(1,0,n-1,a[i].S,{a[i].F,1});
		if(i!=n-1 && a[i].F==a[i+1].F)
			continue;
		l=0,r=n;
		while(l<=r)
		{
			mid=(l+r)/2;
			if(2*query(1,0,n-1,0,mid).F<=t)
				l=mid+1;
			else
				r=mid-1;
		}
		num=query(1,0,n-1,0,l-1);
		tm=num.S-num.S%m;
		if (tm==0) l=0;
		else l=*vakasv.find_by_order(tm-1);
		pst=query(1,0,n-1,0,l-1);
		timerem=t-pst.F*2;
		prev=l;
		l=l,r=n;
		while(l<=r)
		{
			mid=(l+r)/2;
			if(query(1,0,n-1,prev,mid).F<=timerem)
				l=mid+1;
			else
				r=mid-1;
		}
		excnt=min(m,query(1,0,n-1,0,l-1).S-pst.S);
		if(excnt+tm>mx)
		{
			mx=excnt+tm;
			ps=a[i].F;
		}
	}
	cout<<mx<<" "<<ps<<endl;
	vakasv.clear();
	return;
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
	cin>>TESTS;
	while(TESTS--)
	{
		solve();
	}
	time
	return 0;
}