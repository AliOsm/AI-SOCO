/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=999983;
lli INF=1e17;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,m;
const double pi1=3.14159265358979323846;
//matrix exponentiation is associative and distributive
lli me(lli a,lli b)
{
    lli res=1;
    while(b)
    {
        if(b&1)
        res=(res%mod*a%mod)%mod;
        a=a*a;
        a%=mod;
        b=b>>1;
    }
    return res;
}
lli mI(lli a)
{
    return (me(a,mod-2)%mod+mod)%mod;
}
bool cmp(ll a,ll b)
{
    if(a.first==b.first)
    return a.second<b.second;
    return a.first<b.first;
}

lli parent[20005];
lli ran[20005];
void make_set(int v) {
    parent[v] = v;
    ran[v] = 0;
}
lli find_set(lli v)
{
if(v==parent[v])
return v;
return parent[v]=find_set(parent[v]);
}
void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        if (ran[a] < ran[b])
            swap(a, b);
        parent[b] = a;
        if (ran[a] == ran[b])
            ran[a]++;
    }
}

map<lli,lli> vis;
lli timer;
set<lli> ans;
vector<lli> low,tin;
vector<lli> adj[100006];
map<ll,lli> ml;
void dfs(lli v,lli p)
{
    // cout<<v<<" "<<p<<"\n";
    vis[v]=1;
    low[v]=tin[v]=timer++;
    lli children=0;
    for(auto &to: adj[v])
    {
        if(to==p)
        continue;
        if(vis[to])
        low[v]=min(low[v],tin[to]);
        else
        {
            dfs(to,v);
            low[v]=min(low[v],low[to]);
            if(low[to]>=tin[v]&&(p!=-1))
            {
                ans.insert(v);
            }
            children++;
        }
    }
    if(p==-1&&children>1)
    ans.insert(v);
}

void find_bridges()
{
    timer=0;
    low.assign(100004,-1);
    tin.assign(100004,-1);
    vis.clear();
    for(int i=1;i<=n;i++)
    {
        if(!vis[i])
        dfs(i,-1);
    }
}

lli fact[16];
void fac()
{
    fact[0]=1;
    for(lli i=1;i<=15;i++)
    fact[i]=fact[i-1]*i;
}

lli dp[16][16];
int main()
{
 lli t;
 cin>>t;
 for(int i=1;i<=t;i++)
 {
     lli x,y;
     cin>>x>>y;
     lli ans=min(x%y,y/2ll);
     ans+=(x/y)*y;
     cout<<ans<<"\n";
 }
}