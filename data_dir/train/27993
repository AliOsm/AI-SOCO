#include <bits/stdc++.h>

#define fore(i, l, r) for(int i = int(l); i < int(r); i++)
#define forn(i, n) fore(i, 0, n)

#define all(a) (a).begin(), (a).end()
#define sqr(a) ((a) * (a))
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back

#define x first
#define y second

using namespace std;

template<class A, class B> ostream& operator << (ostream &out, const pair<A, B> &p) {
	return out << "(" << p.first << ", " << p.second << ")";
}

template<class A> ostream& operator << (ostream &out, const vector<A> &v) {
	out << "[";
	forn(i, sz(v)) {
		if(i > 0)
			out << ", ";
		out << v[i];
	}
	return out << "]";
}

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

inline int gett() {
	return clock() * 1000 / CLOCKS_PER_SEC;
}

const ld EPS = 1e-9;
const int INF = int(1e9);
const li INF64 = li(INF) * INF;
const ld PI = 3.1415926535897932384626433832795;

map<string, int> ids;
vector<string> nm;

map<pt, int> id;
vector<pt> p;

inline int getId(const string &s, int vs) {
	if(!ids.count(s)) {
		ids[s] = sz(nm);
		nm.pb(s);
	}
	pt cv = {ids[s], vs};
	
	if(!id.count(cv)) {
		id[cv] = sz(p);
		p.pb(cv);
	}
	return id[cv];
}

const int N = 1111;

int n;
vector<int> g[N];

inline bool read() {
	if(!(cin >> n))
		return false;
		
	ids.clear();
	nm.clear();
	
	id.clear();
	p.clear();
		
	char buf[21];
	forn(i, n) {
		int cid; assert(scanf("%s%d", buf, &cid) == 2);
		int v = getId(buf, cid);
		
		int cnt; assert(scanf("%d", &cnt) == 1);
		forn(j, cnt) {
			int pid; assert(scanf("%s%d", buf, &pid) == 2);
			int p = getId(buf, pid);
			
			g[v].pb(p);
		}
	}
	
	return true;
}

inline bool cmp(int a, int b) {
	if(nm[p[a].x] == nm[p[b].x])
		return p[a].y > p[b].y;
	return nm[p[a].x] < nm[p[b].x];
}

inline void solve() {
	vector<int> q, nq;
	vector<int> d(n, INF);
	
	d[0] = 0;
	q.pb(0);
	
	vector<int> ans;
	set<int> was;
	
	while(!q.empty()) {
		sort(all(q), cmp);
		nq.clear();
		
		for(auto v : q) {
			int nid = p[v].x;
			if(was.count(nid))
				continue;
			
			was.insert(nid);
			ans.pb(v);
				
			for(int to : g[v])
				if(d[to] > d[v] + 1) {
					d[to] = d[v] + 1;
					nq.pb(to);
				}
		}
		
		swap(q, nq);
	}
	assert(ans[0] == 0);
	ans.erase(ans.begin());
	
	sort(all(ans), cmp);
	cout << sz(ans) << endl;
	for(auto v : ans)
		printf("%s %d\n", nm[p[v].x].c_str(), p[v].y);
}

int main(){
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	int t = gett();
#endif

	srand(time(NULL));
	cout << fixed << setprecision(10);

	while(read()) {
		solve();	
		
#ifdef _DEBUG
		cerr << "TIME = " << gett() - t << endl;
		t = gett();
#endif
	}
	return 0;
}
