#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
#define YESNO(cond) cout << ((cond) ? "Yes" : "No") << endl;
#define UMAX(left, right) left = max(left, right);
#define UMIN(left, right) left = min(left, right);
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void yes() { cout << "Yes" << endl;}
void no() { cout << "No" << endl;}
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

S Z
{
    int x;
    int y;
    int size;
};

int main()
{
    int n, m;
    cin >> n >> m;
    vector<string> v(n);
    GET(v, n);
    vector<vector<int>> a(n, vector<int> (m));
    FOR (i, 0, n) {
        FOR (j, 0, m) {
            a[i][j] = v[i][j] == '*';
        }
    }
    vector<vector<int>> left = a;
    vector<vector<int>> right = a;
    vector<vector<int>> up = a;
    vector<vector<int>> down = a;
    FOR (i, 1, n) {
        FOR (j, 0, m) {
            up[i][j] = up[i][j] ? up[i - 1][j] + 1 : 0;
        }
    }
    FORR (i, n - 2, -1) {
        FOR (j, 0, m) {
            down[i][j] = down[i][j] ? down[i + 1][j] + 1 : 0;
        }
    }
    FOR (i, 0, n) {
        FOR (j, 1, m) {
            left[i][j] = left[i][j] ? left[i][j - 1] + 1 : 0;
        }
    }
    FOR (i, 0, n) {
        FORR (j, m - 2, -1) {
            right[i][j] = right[i][j] ? right[i][j + 1] + 1 : 0;
        }
    }
    vector<vector<int>> vert(n + 1, vector<int> (m));
    vector<vector<int>> hor(n, vector<int> (m + 1));
    vector<Z> res;
    FOR (i, 0, n) {
        FOR (j, 0, m) {
            int size = min({left[i][j], right[i][j], up[i][j], down[i][j]});
            if (size < 2) {
                continue;
            }
            --size;
            res.push_back({i + 1, j + 1, size});
            ++vert[i - size][j];
            --vert[i + size + 1][j];
            ++hor[i][j - size];
            --hor[i][j + size + 1];
        }
    }
    FOR (i, 0, n) {
        FOR (j, 1, m + 1) {
            hor[i][j] += hor[i][j - 1];
        }
    }
    FOR (i, 1, n + 1) {
        FOR (j, 0, m) {
            vert[i][j] += vert[i - 1][j];
        }
    }
    vector<vector<int>> ans(n, vector<int> (m));
    FOR (i, 0, n) {
        FOR (j, 0, m) {
            ans[i][j] = hor[i][j] || vert[i][j];
        }
    }
    if (a != ans) {
        cout << -1;
        return 0;
    }
    cout << res.size() << endl;
    for (const auto &elem: res) {
        cout << elem.x << " " << elem.y << " " << elem.size << endl;
    }
}

