#include <bits/stdc++.h>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)
typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + inf;

const int N = 400 + 5;

int n, m;
bool road[N][N];
int dp[N][N][2], dist1[N][N], dist2[N][N];

int f(int x, int y, bool w) {
	if(x == n)
		return dist1[y][n];
	if(y == n)
		return dist2[x][n] - w;
	int &r = dp[x][y][w];
	if(r != -1) return r;
	r = inf;
	if(!w) {
		for(int i = 1; i <= n; i++)
			if(road[y][i])
				r = min(r, f(x, i, 1) + 1);
	}
	if(w) {
		for(int i = 1; i <= n; i++)
			if(!road[x][i] and (i == n or i != y))
				r = min(r, f(i, y, 0));
	}
	return r;
}

int main() {

	scanf("%d %d", &n, &m);

	for(int i = 1; i <= m; i++) {
		int x, y;
		scanf("%d %d", &x, &y);
		road[x][y] = road[y][x] = 1;
	}

	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= n; j++) {
			int x = 1, y = inf;
			if(road[i][j])
				swap(x, y);
			dist1[i][j] = y;
			dist2[i][j] = x;
		}
	}

	for(int i = 1; i <= n; i++)
		dist1[i][i] = dist2[i][i] = 0;

	for(int k = 1; k <= n; k++)
		for(int i = 1; i <= n; i++)
			for(int j = 1; j <= n; j++) {
				dist1[i][j] = min(dist1[i][j], dist1[i][k] + dist1[k][j]);
				dist2[i][j] = min(dist2[i][j], dist2[i][k] + dist2[k][j]);
			}

	memset(dp, -1, sizeof(dp));

	int res = f(1, 1, 0);

	if(res == inf)
		res = -1;

	printf("%d\n", res);

	return 0;

}
