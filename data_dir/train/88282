#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_popcount

#ifndef D
	#define dbg(x) 0
	#define dbgs(x) 0
#else
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#endif

#define time something_stupid

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 1e6 + 5;

int n, m, k, x, time, trie[26][N], fail[N], cnt[N], start[N], finish[N], fen[N], h[N], end[N];
char c, a[N];
vector < int > v[N];

void dfs(int x) {

	start[x] = ++time;

	foreach(it, v[x]) {
		cnt[*it] += cnt[x];
		dfs(*it);
	}

	finish[x] = time;

}

void up(int x, int k) {
	for(; x < N; x += x & (-x))
		fen[x] += k;
}

void up(int x, int y, int k) {
	up(x, k);
	up(y + 1, -k);
}

int qu(int x) {
	int sum = 0;
	for(; x; x -= x & (-x))
		sum += fen[x];
	return sum;
}

int main() {
	
	cin >> m >> k;

	int size = 0;

	FOR(i, 1, k) {
		scanf("%s", a + 1);
		n = strlen(a + 1);

		int root = 0;

		FOR(i, 1, n) {
			if(!trie[a[i] - 'a'][root]) {
				trie[a[i] - 'a'][root] = ++size;
			}
			root = trie[a[i] - 'a'][root];
		}

		end[i] = root;

		cnt[root]++;
	}

	queue < int > Q;

	Q.push(0);

	while(!Q.empty()) {
		int x = Q.front();
		Q.pop();

		FOR(i, 0, 26 - 1)
			if(trie[i][x]) {
				int q = fail[x];

				while(q and !trie[i][q])
					q = fail[q];

				if(x != q and trie[i][q])
					fail[trie[i][x]] = trie[i][q];

				Q.push(trie[i][x]);
			}
	}

	FOR(i, 1, size)
		v[fail[i]].pb(i);

	dfs(0);

	FOR(i, 1, size)
		up(start[i], start[i], cnt[i]);

	FOR(i, 1, k)
		h[i] = 1;

	FOR(i, 1, m) {
		cin >> c;
		if(c == '?') {
			scanf("%s", a + 1);
			n = strlen(a + 1);

			int q = 0;
			ll ans = 0;

			FOR(i, 1, n) {
				while(q and !trie[a[i] - 'a'][q])
					q = fail[q];

				if(trie[a[i] - 'a'][q])
					q = trie[a[i] - 'a'][q];

				ans += qu(start[q]);
			}

			cout << ans << endl;
		}
		else {
			cin >> x;
			if(c == '+' and h[x] > 0) continue;
			if(c == '-' and h[x] < 0) continue;

			h[x] = 1 - 2 * (c == '-');

			up(start[end[x]], finish[end[x]], h[x]);
		}
	}

	return 0;

}
