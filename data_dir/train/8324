#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>

using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL

typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 1e18;
const double eps = 1e-7;

/*
const int MAX_MEM = 4e8;
int mpos = 0;
char mem[MAX_MEM];
inline void * operator new ( size_t n ) {
  char *res = mem + mpos;
  mpos += n;
  assert(mpos <= MAX_MEM);
  return (void *)res;
}
inline void operator delete ( void * ) { }

inline void * operator new [] ( size_t ) { assert(0); }
inline void operator delete [] ( void * ) { assert(0); }
*/

int st[100500];
int snm[100500];
int find(int a) {
	if (a == snm[a])
		return a;
	return snm[a] = find(snm[a]);
}
void merge(int a,int b) {
	a = find(a), b = find(b);
	if (a == b)
		return;
	snm[a] = b;
}
int step[100500];
int sum_st[100500];
int ex_stol[100500];
int sz[100500];

int main() {
	cin.sync_with_stdio(false);
	cin.tie(0);
//	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("kaleidoscope.in", "r", stdin);freopen("kaleidoscope.out", "w", stdout);
	int n, m, k;
	cin >> n >> m >> k;
	for (int i = 0; i < k; ++i) {
		int a;
		cin >> a;
		--a;
		st[a] = 1;
	}
	for (int i = 0; i < n; ++i)
		snm[i] = i;
	for (int i = 0; i < m; ++i) {
		int a, b;
		cin >> a >> b;
		--a, --b;
		++step[a], ++step[b];
		merge(a, b);
	}
	for (int i = 0; i < n; ++i) {
		int p = find(i);
		sz[p]++;
		sum_st[p] += step[i];
		if (st[i])
			ex_stol[p] = 1;
	}
	int ans = 0;
	int mx = 0;
	int sum1 = 0;
	for (int i = 0; i < n; ++i) {
		if (!sz[i])
			continue;
		int edge = sum_st[i] / 2;
		int all_edge = sz[i] * (sz[i] - 1) / 2;
		ans += all_edge - edge;
		if (ex_stol[i]) {
			mx = max(mx, sz[i]);
		}
		else {
			ans += sum1 * sz[i];
			sum1 += sz[i];
		}
	}
	ans += sum1 * mx;
	cout << ans;

	return 0;
}