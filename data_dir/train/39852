#include<bits/stdc++.h>
#define si(x) scanf("%d",&x)
#define sii(x,y) scanf("%d %d",&x,&y)
#define siii(x,y,z) scanf("%d %d %d",&x,&y,&z)
#define su(x) scanf("%u",&x)
#define sl(x) scanf("%ld",&x)
#define sli(x) scanf("%lld",&x)
#define slii(x,y) scanf("%lld %lld",&x,&y)
#define sliii(x,y,z) scanf("%lld %lld %lld",&x,&y,&z)
#define slu(x) scanf("%llu",&x)
#define sf(x) scanf("%f",&x)
#define slf(x) scanf("%lf",&x)
#define slff(x,y) scanf("%lf %lf",&x,&y)
#define slfff(x,y,z) scanf("%lf %lf %lf",&x,&y,&z)
#define sc(x) scanf("%c",&x)
#define ss(x) scanf("%s",x)
#define pf printf
#define fpf fprintf
#define pb push_back
#define f(i,x,y,z) for(int i=x;i<y;i=i+z)
#define f1(i,x,y,z) for(int i=x;i>y;i=i-z)
#define MAX ((int)(1e8))
#define pi (2*acos(0))
#define mp make_pair
#define M ((int)(1e5 + 1))
#define xx first
#define yy second
#define NN ((int)(2e5+5))
#define N ((int)(1e5 + 5))
#define vc vector
#define pq priority_queue
///#define Q queue
#define eps 0
#define logn 25


using namespace std;

typedef long long int ll;
typedef unsigned long long int lu;

int pos[N*4], neg[N*4], pc[N*4], nc[N*4], a[N], b[N], posb[N], posa[N];

void init(int n, int b, int e)
{
    if(b==e){
        if(b-posb[a[b]]>=0){
            pos[n] = posa[b]-posb[b];
            neg[n] = -MAX;
        }
        else{
            neg[n] = posa[b]-posb[b];
            pos[n] = MAX;
        }
        return;
    }
    int l, r, m;
    m = (b+e)>>1;
    l = n<<1;
    r = l+1;
    init(l,b,m);
    init(r,m+1,e);
    pos[n] = min(pos[l],pos[r]);
    neg[n] = max(neg[l],neg[r]);
}

void update(int n, int b, int e, int i, int j, int v)
{
    if(e<i || j<b) return;
    if(i<=b && j>=e){
        pc[n] += v;
        nc[n] += v;
        if(pos[n]!=MAX) pos[n] += v;
        if(neg[n]!=-MAX) neg[n] += v;
        return;
    }
    int l, r, m;
    m = (b+e)>>1;
    l = n<<1;
    r = l+1;
    update(l,b,m,i,j,v);
    update(r,m+1,e,i,j,v);
    pos[n] = min(pos[l],pos[r]);
    neg[n] = max(neg[l],neg[r]);
    if(pos[n]!=MAX) pos[n] += pc[n];
    if(neg[n]!=-MAX) neg[n] += nc[n];
}

void walk(int n, int b, int e, bool c)
{
    if(b==e){
        if(c){
            pos[n] = neg[n];
            neg[n] = -MAX;
        }
        else{
            neg[n] = pos[n];
            pos[n] = MAX;
        }
        return;
    }
    int l, r, m;
    m = (b+e)>>1;
    l = n<<1;
    r = l+1;
    if(c){
        if(neg[l]>neg[r]) walk(l,b,m,c);
        else walk(r,m+1,e,c);
    }
    else{
        if(pos[l]<pos[r]) walk(l,b,m,c);
        else walk(r,m+1,e,c);
    }
    pos[n] = min(pos[l],pos[r]);
    neg[n] = max(neg[l],neg[r]);
    pos[n] += pc[n];
    neg[n] += nc[n];
}

int main()
{
    int n, i, ans;
    scanf("%d",&n);
    for(i = 1; i<=n; i++){
        scanf("%d",&a[i]);
        posa[a[i]] = i;
    }
    ans = n+1;
    for(i = 1; i<=n; i++){
        scanf("%d",&b[i]);
        posb[b[i]] = i;

    }
    for(i = 1; i<=n; i++){
        ans = min(ans,abs(i-posb[a[i]]));
    }
    printf("%d\n",ans);
    init(1,1,n);

    for(i = 1; i<n; i++){
        if(b[i]<n){
            update(1,1,n,b[i]+1,n,1);
        }
        if(b[i]>1){
            update(1,1,n,1,b[i]-1,1);
        }
        update(1,1,n,b[i],b[i],1-n);
        while(pos[1]<0) walk(1,1,n,0);
        while(neg[1]>0) walk(1,1,n,1);

        printf("%d\n",min(pos[1],-neg[1]));
    }
    return 0;

}
