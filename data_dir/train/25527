#include <bits/stdc++.h>
#define MOD 1000000007
#define Nmax 1000005
#define VAL 100005
#define INF 2000000000
#define eps 0.000000000001

using namespace std;

int n,NOD;
int dp[Nmax],st[Nmax],dr[Nmax],cost[Nmax];

struct edge
{
    int nod,cost;
};
vector <edge> L[Nmax];

struct nr
{
    int val;
    bool operator <(const nr A) const
    {
        return dp[val]>dp[A.val];
    }
};
priority_queue <nr> Q;

inline void Dijkstra()
{
    nr w;
    int nod;
    vector <edge>::iterator it;
    w.val=NOD; Q.push(w);
    while(!Q.empty())
    {
        w=Q.top(); nod=w.val; Q.pop();
        for(it=L[nod].begin();it!=L[nod].end();++it)
            if(dp[it->nod]>dp[nod]+it->cost)
            {
                dp[it->nod]=dp[nod]+it->cost;
                w.val=it->nod;
                Q.push(w);
            }
    }
}

int main()
{
    int i,j,m,p;
    edge w;
    #ifndef ONLINE_JUDGE
        freopen ("date.in","r",stdin);
        freopen ("date.out","w",stdout);
    #endif
    cin>>n>>m>>NOD;
    for(i=1;i<=m;++i)
    {
        cin>>st[i]>>dr[i]>>w.cost;
        cost[i]=w.cost;
        w.nod=dr[i];
        L[st[i]].push_back(w);
        w.nod=st[i];
        L[dr[i]].push_back(w);
    }
    scanf("%d", &p);
    for(i=1;i<=n;++i) dp[i]=INF;
    dp[NOD]=0;
    Dijkstra();
    int sol=0;
    for(i=1;i<=n;++i)
        if(dp[i]==p) ++sol;
    for(i=1;i<=m;++i)
    {
        int ok=0;
        if(dp[st[i]]<p && cost[i]+dp[st[i]]>p && p<=dp[dr[i]]+cost[i]-(p-dp[st[i]]))
        {
            ++sol;
            ++ok;
        }
        if(dp[dr[i]]<p && cost[i]+dp[dr[i]]>p && p<=dp[st[i]]+cost[i]-(p-dp[dr[i]]))
        {
            ++sol;
            ++ok;
        }
        if(ok==2 && (p-dp[st[i]])+(p-dp[dr[i]])==cost[i]) --sol;
    }
    printf("%d\n", sol);
    return 0;
}
