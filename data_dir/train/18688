#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
#include <cassert>
using namespace std;
#define F first
#define S second
#define pb push_back
#define MP make_pair
#define MS0(I) memset(I, 0, sizeof(I));
#define ALL(x) begin(x),end(x)
#define SZ(x) ((int)(x).size())
#define rep(i, n) for(int i = 0; i < n; i ++)
#define rep1(i, a, b) for(int i = a; i < b; i ++)
#define per1(i, a, b) for(int i = a; i >= b; i --)
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
typedef long long LL;
typedef long double LDB;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
//////////////////////
const long double eps = 1e-7;
const long double PI = acos(-1);
const int INF = (int)1e9;
const LL  INFF = (LL)1e18;
const int mod = (int)1e9 + 7;
const int MXN = (int)2e5 + 7;
int a[MXN];
PII b[MXN];
vector<int>buf;
int rr[MXN];
set<int>st;
int n, m;
struct Bit{
	LL a[MXN];
	void md(int p, LL v){
		for(int i = p; i <= n; i += i & (-i))
			a[i] += v;
		return ;
	}
	LL qy(int p){
		LL res = 0;
		for(int i = p; i > 0; i -= i & (-i))
			res += a[i];
		return res;
	}
}bit;
bool cmp(const PII &u, const PII &v){
	return u.S < v.S;
}
int main(void){
	scanf("%d %d", &n, &m);
	rep1(i, 1, n+1) scanf("%d", a + i);
	rep1(i, 1, m+1) scanf("%d", &b[i].F);
	rep1(i, 1, m+1) scanf("%d", &b[i].S);
	rep1(i, 1, n+1) buf.pb( a[i] );
	rep1(i, 1, m+1) buf.pb( b[i].F );
	sort( ALL(buf) );
	buf.resize( unique( ALL(buf) ) - buf.begin() );
	rep1(i, 1, n+1) a[i] = lower_bound( ALL(buf), a[i] ) - buf.begin() + 1;
	rep1(i, 1, m+1) b[i].F = lower_bound( ALL(buf), b[i].F ) - buf.begin() + 1;
	int ans = 0;
	sort(b + 1, b + m + 1);
	int p = 1;
	int sum = 0;
	per1(i, n, 1){
		while(p <= m && a[i] >= b[p].F) rr[ b[p++].F ] = i;
	}
	sort(b + 1, b + m + 1, cmp);
	rep1(i, 1, n+1){
		bit.md(i, buf[a[i] - 1]);
		st.insert(i);
	}
	rep1(i, 1, m+1){
		LL v = bit.qy( rr[ b[i].F ] );
		if( v < b[i].S ) continue;
		ans++;
		auto it = --st.upper_bound( rr[b[i].F] );
		while(b[i].S){
			v = bit.qy(*it) - bit.qy((*it) - 1);
			if(v > b[i].S){
				bit.md( *it, -b[i].S );
				break;
			}
			else if(v == b[i].S){
				bit.md( *it, -b[i].S );
				st.erase(it);
				break;
			}
			else{
				b[i].S -= v;
				bit.md( *it, -v );
				auto it2 = it;
				it2--; st.erase(it);
				it = it2;
			}
		}
	}
	printf("%d\n", ans);
	return 0;
}
