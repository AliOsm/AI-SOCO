#include <bits/stdc++.h>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
typedef pair<char, int> pci;
typedef pair<int, char> pic;
const ll MOD = (ll)1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int>> pq;
vector<int> v[5001];

int n, d;
int num[5001];
int cap[5001];
int pp[5001];

int main() {
    int tc;
    scanf("%d", &tc);

    while(tc--) {
        fill(cap, cap + 5001, 2);
        memset(num, 0, sizeof(num));
        scanf("%d %d", &n, &d);
        int mav = n * (n - 1) / 2;

        for (int i = 0; i < n; i++)
            v[i].clear();

        if (d > mav) {
            printf("NO\n");
            continue;
        }
        int miv = 0, cnt = 0, t = 1, cmd = 0;
        for (int i = 0; i < n; i++) {
            cnt++;
            num[cmd]++;
            miv += cmd;

            if (t == cnt) {
                t *= 2;
                cnt = 0;
                cmd++;
            }
        }
        if (miv > d) {
            printf("NO\n");
            continue;
        }

        // 이제 균형을 맞춘다..
        // 뒤에 있는 거부터 하나씩 뺀다.
        // 끝층부터 맞춰준다..
        // 대충 복잡하게 한다.
        // 하나씩 올려..
        // 1층에서부터..
        // 변경 가능해?

        for (int i = d - miv - 1; i >= 0; i--) {
            for (int j = 1; j < n; j++) {
                if ((num[j] - 1) * 2 >= (num[j + 1] + 1)) {
                    num[j]--;
                    num[j + 1]++;
                    break;
                }
            }
        }

        // 복원을 해준다.
        // x층 벡터 목록..
        v[0].push_back(1);
        cnt = 1;
        printf("YES\n");

        for (int i = 1; i < n; i++) {
            while (num[i]--) {
                cnt++;
                v[i].push_back(cnt);

                for (int j : v[i - 1]) {
                    if (cap[j]) {
                        cap[j]--;
                        printf("%d ", j);
                        break;
                    }
                }
            }
        }
        printf("\n");
    }
}