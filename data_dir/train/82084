#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdio>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define type(x) __typeof((x).begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;
const long long longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 101000;

int x[N], y[N];
vector<int> vx[N], vy[N];

inline bool get(vector<int> &v,int x){
    type(v) it = lower_bound(v.begin(), v.end(), x);
    return it != v.end() && (*it) == x;
}

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#endif

    int n = read();

    for(int i = 1; i <= n; i++){
        x[i] = read();
        y[i] = read();
        vx[x[i]].push_back(y[i]);
        vy[y[i]].push_back(x[i]);
    }

    for(int i = 0; i < N; i++){
        sort(vx[i].begin(), vx[i].end());
        sort(vy[i].begin(), vy[i].end());
    }

    int res = 0;
    for(int i = 1; i <= n; i++){
        if(vx[x[i]].size() < vy[y[i]].size()){
            foreach(it, vx[x[i]]){
                if(*it >= y[i])
                    break;
                int d = y[i] - *it;
                if(x[i] + d >= 0 && x[i] + d < N && get(vx[x[i] + d], y[i]) && get(vx[x[i] + d], y[i] - d))
                    res++;
            }
        }else{
            foreach(it, vy[y[i]]){
                if(*it <= x[i])
                    continue;
                int d = *it - x[i];
                if(y[i] - d >= 0 && y[i] - d < N && get(vy[y[i] - d], x[i]) && get(vy[y[i] - d], x[i] + d))
                    res++;
            }
        }
    }
    printf("%d\n",res);

    return 0;
}
