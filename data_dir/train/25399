// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = 3*(int)1e5 + 3;

int n, m, q, p[N], dia[N];
PII wie;
bool vis[N];
VI bla, child[N];

int Find(int x) {
  if (x == p[x])
    return x;
  return p[x] = Find(p[x]);
}

void Union(int x, int y) {
  x = Find(x);
  y = Find(y);
  if (x == y)
    return;
  int res = max(dia[x], dia[y]);
  res = max(res, (dia[x]+1)/2+1+(dia[y]+1)/2);
  p[x] = y;
  dia[y] = res;
}

void dfs(int v, int h) {
  vis[v] = true;
  bla.PB(v);
  if (h >= wie.ND)
    wie = {v, h};
  for (int x: child[v])
    if (!vis[x]) {
      p[x] = p[v];
      dfs(x, h+1);
    }
}

int main() {
  init_ios();
  cin >> n >> m >> q;
  for (int i = 1; i <= n; ++i)
    p[i] = i;
  for (int i = 1; i <= m; ++i) {
    int a, b;
    cin >> a >> b;
    child[a].PB(b);
    child[b].PB(a);
  }
  for (int i = 1; i <= n; ++i)
    if (!vis[i]) {
      bla.clear();
      dfs(i, 0);
      for (int x: bla)
        vis[x] = false;
      wie.ND = 0;
      dfs(wie.ST, 0);
      dia[Find(i)] = wie.ND;
      wie = {0, 0};
    }
  while (q--) {
    int op, x, y;
    cin >> op;
    if (op == 1) {
      cin >> x;
      cout<<dia[Find(x)]<<"\n";
    }
    else {
      cin >> x >> y;
      Union(x, y);
    }
  }
}