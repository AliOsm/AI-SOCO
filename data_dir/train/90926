#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm = " ") -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
template<typename T> vector<T> & operator--(vector<T> & a)
{ for(auto & i: a) --i; return a; }
/* @@@ ----------------------------------- */

typedef struct {
    int64_t balloon;
    int64_t weight;
} value_t;


size_t d725()
{
    size_t n;
    cin >> n;

    vector<value_t> t(n);
    for(size_t i = 0; i < n; ++ i)
        cin >> t[i].balloon >> t[i].weight;

    auto self = t[0];

    // one heap for the folks above sorted in min required number of balloons
    // one heap for the folks at or below sorted in max holding number of balloons

    const auto comp_above = [](const value_t & a, const value_t & b) {
        return b.weight - b.balloon < a.weight - a.balloon;
    };

    const auto comp_bellow = [](const value_t & a, const value_t & b) {
        return a.balloon < b.balloon;
    };

    priority_queue<value_t, vector<value_t>, decltype(comp_above)> heap_above(comp_above);
    priority_queue<value_t, vector<value_t>, decltype(comp_bellow)> heap_bellow(comp_bellow);

    for(size_t i = 1; i < n; ++i)
        if(self.balloon < t[i].balloon)
            heap_above.push(t[i]);
        else
            heap_bellow.push(t[i]);

    auto out = heap_above.size();

    while(!heap_above.empty())
    {
        const auto next = heap_above.top();
        heap_above.pop();

        const auto inc = next.weight - next.balloon + 1;
        if(self.balloon < inc)
            break;

        self.balloon -= inc;

        while(!heap_bellow.empty() && self.balloon < heap_bellow.top().balloon)
        {
            heap_above.push(heap_bellow.top());
            heap_bellow.pop();
        }

        out = min(out, heap_above.size());
    }

    return out + 1;
}

int main(const int argc, char * argv [])
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    cout << d725();

    return EXIT_SUCCESS;
}
