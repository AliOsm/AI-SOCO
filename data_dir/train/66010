#define __USE_MINGW_ANSI_STDIO 0
#include <bits/stdc++.h>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
#define INF 1000000007
#define ff first
#define ss second
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define int long long
#define all(a) a.begin(), a.end()
#define inf (1LL<<61)
#define ull unsigned long long
#define debug1(x) cerr << #x << ": " << x <<'\n'
#define debug2(x, y) cerr << #x << ": " << x << '\t' << #y << ": " << y <<'\n'
#define debug3(x, y, z) cerr << #x << ": " << x << '\t' << #y << ": " << y << '\t' << #z << ": " << z <<'\n'
using namespace std;
int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
int gcd(int x,int y)
{
    if(y==0)
	return x;
    else
	return gcd(y,x%y);
}
int expo(int n,int m,int p)   //modULAR EXPONENTIATION
{
    int r=1;
    n=n%p;
    while(m>0)
    {
	if(m%2)
	    r=(r*n)%p;
	n=(n*n)%p;
	m=m/2;
    }
    return r%p;
}
bool isPrime(int n)
{
    // Corner cases
    if (n <= 1)  return false;
    if (n <= 3)  return true;
 
    // This is checked so that we can skip 
    // middle five numbers in below loop
    if (n%2 == 0 || n%3 == 0) return false;
 
    for (int i=5; i*i<=n; i=i+6)
	if (n%i == 0 || n%(i+2) == 0)
	   return false;
 
    return true;
}
vector<int>a(500005);
int n,b[]={4,8,15,16,23,42};
//4 4 8 8 15 15 16 16 23 23 42 42
set<int>adj[50];
int solve(int i,int j)
{
	if(j==6)
		return 1;
	if(adj[b[j]].lower_bound(i)==adj[b[j]].end())
		return 0;
	int k=*adj[b[j]].lower_bound(i);
	adj[b[j]].erase(adj[b[j]].lower_bound(i));
	return solve(k,j+1);
}
int32_t main()
{
   IOS;
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin); 
   freopen("output.txt","w",stdout);
   #endif
   /********************* Code starts here ***********************/   
   //int n;
   cin>>n;
   for(int i=0;i<n;i++)
   {
   	cin>>a[i];
   	adj[a[i]].insert(i);
   }
   int c=0;
   while(adj[4].size())
   {
   	int p = *adj[4].begin();
   	adj[4].erase(adj[4].begin());
   	c=c+solve(p,1);
   }
   int ans=n-6*(c);
   cout<<ans<<endl;
   return 0;
   // int l=0,h=n/6;
   // while(l<h)
   // {
   // 	int m=(l+h)/2;
   // 	int 
   // }
}	