#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

#define P_B push_back
#define M_P make_pair
#define F first
#define S second

typedef pair <int, int> pii;
const int MAXN = 1000 * 1000 + 50, MX =  1000 * 1000 + 10;
vector <int> seg[MAXN * 4];

void add(int x, int y, int v, int s, int e)
{
	if(e - s <= 1)
	{
		seg[v].P_B(y);
		return;
	}
	int mid = (s + e) / 2;
	if(x < mid)
		add(x, y, v * 2, s, mid);
	else
		add(x, y, v * 2 + 1, mid, e);
}

void merge(int v)
{
	int a = v * 2, b = v * 2 + 1;
	int i = 0, j = 0;
	while(i < (int)seg[a].size() && j < (int)seg[b].size())
	{
		if(seg[a][i] < seg[b][j])
			seg[v].P_B(seg[a][i]), i++;
		else
			seg[v].P_B(seg[b][j]), j++;
	}
	while(i < (int)seg[a].size())
		seg[v].P_B(seg[a][i]), i++;
	while(j < (int)seg[b].size())
		seg[v].P_B(seg[b][j]), j++;
}

void build(int v, int s, int e)
{
	if(e - s <= 1)
	{
		sort(seg[v].begin(), seg[v].end());
		return;
	}
	int mid = (s + e) / 2;
	build(v * 2, s, mid);
	build(v * 2 + 1, mid, e);
	merge(v);
}

int get(int l, int r, int v, int s, int e)
{
	if(r <= s || e <= l)
		return 0;
	if(l <= s && e <= r)
	{
		if(!seg[v].empty())
		{
			int k = lower_bound(seg[v].begin(), seg[v].end(), r) - seg[v].begin();
			return k;
		}
		else
			return 0;
	}
	int mid = (s + e) / 2;
	return get(l, r, v * 2, s, mid) + get(l, r, v * 2 + 1, mid, e);
}

int main()
{
	ios::sync_with_stdio(false), cin.tie(0);
	int n, m;
	cin >> n >> m;
	for(int i = 0; i < n; i++)
	{
		int a, b;
		cin>> a >> b;
		add(a, b, 1, 0, MX);
	}
	build(1, 0, MX);

	while(m--)
	{
		int t;
		cin>> t;
		int ans = 0, b = -1;
		for(int i = 0; i < t; i++)
		{
			int a;
			cin>> a;
			int k = get(b + 1, a, 1, 0, MX);
			ans += k;
			b = a;
		}
		ans += get(b + 1, MX, 1, 0, MX);
		cout<< n - ans << endl;
	}
}
