#include <bits/stdc++.h>

#define clr(x) memset((x), 0, sizeof((x)))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp std::make_pair
#define itn int
#define x first
#define y second

typedef std::pair<int, int> PII;
typedef int64_t ll;
typedef std::pair<ll, ll> PLL;
typedef long double ld;
typedef std::pair<ld, ld> PLD;
typedef std::pair<double, double> PDD;
template <typename T, typename U>
inline std::ostream & operator << (std::ostream &os, const std::pair<T, U> &r) {os << "(" << r.x << "," << r.y << ")";return os;}
template <typename T>
inline std::pair<T, T> operator + (const std::pair<T, T> &l, const std::pair<T, T> &r) {return mp(l.x + r.x, l.y + r.y);}
template <typename T>
inline std::pair<T, T> operator - (const std::pair<T, T> &l, const std::pair<T, T> &r) {return mp(l.x - r.x, l.y - r.y);}
template <typename T, typename U>
inline std::pair<T, T> operator * (const std::pair<T, T> &l, const U &r) {return mp(T(l.x * r), T(l.y * r));}
template <typename T>
inline T cross(const std::pair<T, T> &l, const std::pair<T, T> &r) {return l.x * r.y - l.y * r.x;}
template <typename T>
inline T dot(const std::pair<T, T> &l, const std::pair<T, T> &r) {return l.x * r.x + l.y * r.y;}
template <typename T>
inline T sq_len(const std::pair<T, T> &l) {return l.x * l.x + l.y * l.y;}
template <typename T>
inline ld len(const std::pair<T, T> &l) {return sqrtl(sq_len(l));}
inline int nxt() {int x;scanf("%d", &x);return x;}
inline ll gcd(ll a, ll b) {a = std::abs(a); b = std::abs(b); while (b) {a %= b;std::swap(a, b);}return a;}
typedef PII pt_int;typedef PLL pt_ll;typedef PLD pt_ld;typedef PDD pt_d;

using namespace std;

const int N = 10 * 1000 * 1000;
char pr[N];
char pa[N];
int spr[N + 1];
int spa[N + 1];


bool is_pal(int n) {
    char dig[20];
    int sz = 0;
    while (n) {
        dig[sz++] = n % 10;
        n /= 10;
    }
    for (int i = 0; i < sz; ++i) {
        if (dig[i] != dig[sz - 1 - i]) return false;
    }
    return true;
}

inline void solve() {
    for (int i = 1; i < N; ++i) {
        if (is_pal(i)) {
            pa[i] = 1;
        }
        pr[i] = 1;
    }
    pr[1] = 0;
    for (int i = 2; i < N; ++i) {
        if (pr[i]) {
            for (int j = i + i; j < N; j += i) {
                pr[j] = 0;
            }
        }
    }
    spr[0] = 0;
    spa[0] = 0;
    for (int i = 0; i < N; ++i) {
        spr[i + 1] = spr[i] + pr[i];
        spa[i + 1] = spa[i] + pa[i];
    }
    int p = nxt();
    int q = nxt();
    int ans = 1;
    for (int i = N; i >= 2; --i) {
        if (spr[i] * 1ll * q <= spa[i] * 1ll * p) {
            ans = i - 1;
            break;
        }
    }
    cout << ans << "\n";
}

int main() {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
#endif


    int t = 1;//nxt();
    for (int i = 0; i < t; ++i) {
        solve();
    }

    return 0;
}