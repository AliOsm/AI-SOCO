/* 
chirag11032000
Chirag Thakur
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using db = double;
using pii = pair < int, int >;
using pll = pair < ll, ll >;

template < typename T > using OrderedSet = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
	cerr << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << " | ";
	__f(comma + 1, args...);
}
#else
#define trace(...)
#endif

#define eb emplace_back
#define mp make_pair
#define mt make_tuple
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()

const db PI = acos(-1);
const ll LINF = LLONG_MAX;
const int INF = INT_MAX, MOD = 1e9 + 7, N = 50 + 10;

int n, r1, c1, r2, c2;
char grid[N][N];
bool seen[N][N];
int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};
vector < pii > loc[2];

void testCase();
void dfs(int r, int c, int ind);
bool isInside(int r, int c);

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	testCase();
	cerr << "Time taken: " << int((clock() * 1000.) / CLOCKS_PER_SEC) << "ms\n";
	return 0;
}

void testCase() {
	cin >> n >> r1 >> c1 >> r2 >> c2;
	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= n; ++j) {
			cin >> grid[i][j];
		}
	}
	dfs(r1, c1, 0);
	if (seen[r2][c2]) {
		cout << 0 << "\n";
	} else {
		dfs(r2, c2, 1);
		ll cost = LINF;
		for (auto &[a, b]: loc[0]) {
			for (auto &[x, y]: loc[1]) {
				int d1 = a - x, d2 = b - y;
				cost = min(cost, 1ll * d1 * d1 + 1ll * d2 * d2);
			}
		}
		cout << cost << "\n";
	}
}

void dfs(int r, int c, int ind) {
	seen[r][c] = true;
	loc[ind].eb(r, c);
	for (int i = 0; i < 4; ++i) {
		int _r = r + dy[i];
		int _c = c + dx[i];
		if (isInside(_r, _c) && !seen[_r][_c] && grid[_r][_c] == '0') {
			dfs(_r, _c, ind);
		}
	}
}

bool isInside(int r, int c) {
	return r >= 1 && r <= n && c >= 1 && c <= n;
}