#include <bits/stdc++.h>
#define pb push_back
#define pf push_front
#define acm ios::sync_with_stdio(0), ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define ll long long
#define F first
#define S second
#define f(x) return cout << x << "\n", 0;
using namespace std;
ll arr[(int)2e5 + 5] = {};
vector<ll> segTree[(int)1e6];
void add(int idx, int l, int r)
{
    if (l == r)
    {
        segTree[idx].pb(arr[l]);
        return;
    }
    int mid = (l + r) /2;
    add(idx * 2, l, mid);
    add(idx * 2 + 1, mid + 1, r);
    segTree[idx].resize(segTree[idx * 2].size() + segTree[idx * 2 + 1].size());
    merge(segTree[2 * idx].begin(), segTree[2 * idx].end(), segTree[2 * idx + 1].begin(), segTree[2 * idx + 1].end(), segTree[idx].begin());
}
ll get(int idx, int l, int r, int rl, int rr, ll val)
{
    //cout<<idx<<" "<<l<<" "<<r<<" "<<rl<<" "<<rr<<" "<<val<<"\n";
    if (rl > r || rr < l)
        return 0;
    if (rl <= l && rr >= r)
    {
        if (segTree[idx].size())
        {
            auto it = upper_bound(segTree[idx].begin(), segTree[idx].end(), val);
            if (it == segTree[idx].end())
                return 0;
            int ans = it - segTree[idx].begin();
            return segTree[idx].size() - ans;
        }
        return 0;
    }
    int mid = (l + r) /2;
    ll z = get(idx * 2, l, mid, rl, rr, val);
    ll q = get(idx * 2 + 1, mid+1, r, rl, rr, val);
    return (z + q);
}
int main()
{
    acm;
    int n;
    ll t;
    cin >> n >> t;
    for (int i = 1; i <= n; ++i)
    {
        cin >> arr[i];
        arr[i] += arr[i - 1];
        //cout<<arr[i]<<"\n";
    }
    ll ans = 0;
    add(1, 0, n);
    //cout << get(1, 0, n, 0, 2, 1);
    //cout<<"ana\n";
    for (int i = 1; i <= n; ++i)
    {
        ll v = arr[i] - t;
        ll x = get(1, 0, n, 0, i - 1, v);
        ans += x;
    }
    cout<<ans<<"\n";
    return 0;
}