#include<bits/stdc++.h>
using namespace std;

#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")

#define fi                      first
#define se                      second
#define pb                      push_back
#define endl                    '\n'
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

#define FOR(i,a,b)              for(int i = a; i < b; ++i)

typedef long long ll;

void solve();

int32_t main()
{
        fast;
        solve();
}

#define int ll

const int K = 18;
const int N = 150000+ 2;
int lg[N];
ll A[N];
int n,m,d;
ll DP[N];
int a[302], b[302], t[302];
deque<int > q;

void add(int idx) {
        while(q.size() and A[q.back()] < A[idx]) {
                q.pop_back();
        }
        q.push_back(idx);
}

void rem(int idx) {
        if(q.size() and q.front() <= idx) {
                q.pop_front();
        }
}


void solve() {
        lg[1] = 0;
        FOR(i,2,N) {
                lg[i] = lg[i/2] + 1;
        }
        cin >> n >> m >> d;
        t[0] = t[1];
        ll ans = -1e18;
        FOR(j,1,m+1) {
                cin >> a[j] >> b[j] >> t[j];
                q.clear();
                int R = 0;
                FOR(i,1,n+1) {
                        int l = max(1ll,i - d * (t[j] - t[j-1]));
                        int r = min(n, i + d *(t[j] - t[j-1]));
                        while(R <= r) {
                                add(R);
                                ++R;
                        }
                        rem(l-1);
                        DP[i] = A[q.front()] + (b[j] - abs(a[j] - i));
                        if(j == m) {
                                ans = max(ans,DP[i]);
                        }
                }
                FOR(i,0,n+1) {
                        A[i] = DP[i];
                }
        }
        cout << ans << endl;
}