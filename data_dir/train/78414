#include<bits/stdc++.h>
using namespace std;
#define ll long long
void primeDivisor(vector<ll>& sieveArr,vector<ll>& divList,vector<ll>& primeDivList, ll n)
{
    ll i,j;
    for(ll i=0; i<divList.size(); i++)
        if(sieveArr[divList[i]]==0)
            primeDivList.push_back(divList[i]);
}
void sieve(vector<ll>& sieveArr, vector<ll>& primeList, ll n)
{
    ll i,j;
    sieveArr[1]=1;
    for(ll i=2; i<=sqrt(n); i++)
        for(ll j=i+i; j<=n; j+=i)
            sieveArr[j]=1;
    for(ll i=1; i<=n; i++)
        if(sieveArr[i]==0)
            primeList.push_back(i);
}
void allDivisor(vector<ll>& divList,ll n)
{
    ll i,j;
    for(ll i=1; i<=sqrt(n); i++)
    {
        if(n%i==0)
            divList.push_back(i);
        if(n%i==0 && i!=n/i)
            divList.push_back(n/i);
    }
    sort(divList.begin(),divList.end());
}
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    ll i,j,n=1000000;
    vector<ll> sieveArr(n+1),primeList,divList,primeDivList;
    sieve(sieveArr,primeList,n);
    ll x2;
    cin>>x2;
    allDivisor(divList,x2);
    primeDivisor(sieveArr,divList,primeDivList,x2);
    ll x1left=(x2+1-primeDivList.back()),x1right=x2;
    ll m=x1left;
    ll it=0;
    for(i=x1left; i<=x1right; i++)
    {
        vector<ll> myDivList, myPrimeDivList;
        allDivisor(myDivList,i);
        primeDivisor(sieveArr,myDivList,myPrimeDivList,i);
        if(myPrimeDivList.back()==i)
            myPrimeDivList.pop_back();
        if(myPrimeDivList.size()>0)
        {
            m=min(m,i+1-myPrimeDivList.back());
            //cout<<i+1-myPrimeDivList.back()<<" ";
        }
        if(it==1000)
            break;
        else it++;
    }
    cout<<m<<endl;
}

