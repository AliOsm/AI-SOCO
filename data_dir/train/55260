#include <cmath>
#include <vector>
#include <iostream>
#include <limits>
#include <iostream>
#include <vector>
#include <cassert>
#include <complex>
#include <cstdio>
#include <cstring>
#include <map>
#include <cmath>
#include <set>
#include <algorithm>
#include <queue>

using namespace std;
typedef long long Long;
typedef long double LDouble;

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<Long,int> PII;

struct Edge{
	int u,v,sp;
	Long c;
	int getV(int u){
		return u==this->u ? this->v : this->u;
	}
};
vector<Edge> V;
VVI adj;
#define INF 1000000000000000000LL
Long ditra(int s,int t){
	priority_queue< PII,vector<PII>,greater<PII> > PQ;
	PQ.push(PII(0,s));
	vector<Long> D(adj.size(),INF);
	D[s] = 0;
	while(PQ.size()){
		PII c = PQ.top(); PQ.pop();
		Long u = c.second, d = c.first;
		if(D[u] < d)continue;
		if(u == t)return d;
		for(int e : adj[u]){
			Edge &ed = V[e];
			Long v = ed.getV(u), nd = d + ed.c;
			if(D[v] > nd){
				D[v] = nd;
				PQ.push(PII(nd,v));
			}
		}
	}
	return INF;
}

int main()
{
	int N,M,s,t;
	Long L;
	cin >> N >> M >> L >> s >> t;
	adj = VVI(N);
	for (int i = 0; i < M; ++i) {
		Edge e;
		cin >> e.u >> e.v >> e.c;
		if(e.c == 0)e.sp = 1, e.c = 1;
		else e.sp = 0;
		V.push_back(e);
		adj[e.u].push_back(i);
		adj[e.v].push_back(i);
	}
	if(ditra(s,t) < L)
	for(Edge &e : V){
		if(e.sp == 0)continue;
		e.c = 1000000000;
		if(ditra(s,t) < L)continue;
		int lo = 1, hi = 1000000000;
		while(lo < hi){
			int mi = (lo+hi+1)/2;
			e.c = mi;
			Long d = ditra(s,t);
			if(d <= L){
				lo = mi;
			}else{
				hi = mi - 1;
			}
		}
		e.c = lo;
		break;
	}
	if(ditra(s,t) == L){
		cout << "YES" << endl;
		for(Edge &e : V){
			cout << e.u << " " << e.v << " " << e.c << endl;
		}
	}else{
		cout << "NO" << endl;
	}
	
	
}

/*

2 -> 4
(i-1)*(i-1)*i -> i*(i+1)*(i+1)
2 -> 18


5
1 2 2 4
2
2 1
1 4



 */
