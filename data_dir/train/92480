		//			- -- --- ---- -----be name khoda----- ---- --- -- -			\\

#include <bits/stdc++.h>

using namespace std;

const int N = 20002;

long long h[N + 1], jad[N + 1][20], x[N + 1], y[N + 1], cx[N + 1], cy[N + 1], r[N + 1], inC[N + 1], p[N + 1], f[N], n, m, k;
vector <int> g[N + 1];

long long dist(long long x, long long y, long long xx, long long yy)
{
	return (x - xx) * (x - xx) + (y - yy) * (y - yy);
}

void dfs(int v = 0, int dad = 0, int dep = 0)
{
//	cerr << "h[" << v << "] = " << dep << endl;
	h[v] = dep;
	jad[v][0] = dad;
	for(int i = 1; i < 20; i++)
		jad[v][i] = jad[jad[v][i - 1]][i - 1];
	for(auto u : g[v])
		dfs(u, v, dep + 1);
}

int lca(int u, int v)
{
//	cerr << "LCA(" << u << ", " << v << ")\n";
	if(h[v] < h[u])
		swap(v, u);
	for(int i = 19; i >= 0; i--)
		if(h[jad[v][i]] > h[u])
			v = jad[v][i];
	while(h[v] != h[u])
		v = jad[v][0];
	if(v == u)
		return v;
	assert(h[v] == h[u]);
	for(int i = 19; i >= 0; i--)
		if(jad[v][i] != jad[u][i])
		{
			v = jad[v][i];
			u = jad[u][i];
		}
	assert(jad[v][0] == jad[u][0]);
	return jad[v][0];
}

bool cmp(int ll, int rr)
{
	return r[ll] < r[rr];
}

int main()
{
	cin >> n >> m >> k;
	for(int i = 1; i <= n; i++)
		cin >> x[i] >> y[i];
	for(int i = 1; i <= m; i++)
	{
		cin >> r[i] >> cx[i] >> cy[i];
		p[i] = i;
	}
	sort(p + 1, p + m + 1, cmp);
	for(int j = 1; j <= m; j++)
		for(int i = j + 1; i <= m; i++)
			if(dist(cx[p[i]], cy[p[i]], cx[p[j]], cy[p[j]]) <= r[p[i]] * r[p[i]])
			{
				g[p[i]].push_back(p[j]);
				inC[p[j]] = 1;
				break;
			}
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= m; j++)
			if(dist(cx[p[j]], cy[p[j]], x[i], y[i]) <= r[p[j]] * r[p[j]])
			{
				f[i] = p[j];
				break;
			}
	for(int i = 1; i <= m; i++)
		if(!inC[i])
			g[0].push_back(i);
	dfs(0);
	while(k--)
	{
		int a, b;
		cin >> a >> b;
		a = f[a];
		b = f[b];
		int dist = h[a] + h[b] - 2 * (h[lca(a, b)]);
		cout << dist << endl;
	}
}
