//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC optimize(3)
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC target("sse3","sse2","sse")
//#pragma GCC target("avx","sse4","sse4.1","sse4.2","ssse3")
//#pragma GCC target("f16c")
//#pragma GCC optimize("inline","fast-math","unroll-loops","no-stack-protector")
//#pragma GCC diagnostic error "-fwhole-program"
//#pragma GCC diagnostic error "-fcse-skip-blocks"
//#pragma GCC diagnostic error "-funsafe-loop-optimizations"
//#pragma GCC diagnostic error "-std=c++14"
#include "bits/stdc++.h"
#include "ext/pb_ds/tree_policy.hpp"
#include "ext/pb_ds/assoc_container.hpp"

#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x, l, u) for(ll x = l;x<u;x++)
#define RREP(x, l, u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x, a) memset(x,a,sizeof(x))
#define all(a) begin(a),end(a)
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define lowbit(x) ((x)&(-(x)))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define sz(x) ((int)x.size())
#define EX0 exit(0);

typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace __gnu_pbds; //required
using namespace std;
template<typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef vector<ll> VLL;
typedef vector<int> VI;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9 + 7;
const ll inf = 1e9 + 7;
const ld eps = 1e-9;
const db PI = atan(1) * 4;

template<typename T>
inline int sign(const T &a) {
    if(a < 0)return -1;
    if(a > 0)return 1;
    return 0;
}

string to_string(string s) { return '"' + s + '"'; }

string to_string(const char *s) { return to_string((string) s); }

string to_string(bool b) { return (b ? "true" : "false"); }

template<typename A, typename B>
string to_string(pair<A, B> p) { return "(" + to_string(p.first) + ", " + to_string(p.second) + ")"; }

template<typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for(const auto &x : v) {
        if(!first) { res += ", "; }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

void debug_out() { cerr << endl; }

template<typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}

#ifndef ONLINE_JUDGE
#define dbg(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define dbg(...) {}
#endif

template<typename T, typename S>
inline bool upmin(T &a, const S &b) { return a > b ? a = b, 1 : 0; }

template<typename T, typename S>
inline bool upmax(T &a, const S &b) { return a < b ? a = b, 1 : 0; }

template<typename T>
inline void in(T &x) {
    x = 0;
    T f = 1;
    char ch = getchar();
    while(!isdigit(ch)) {
        if(ch == '-') f = -1;
        ch = getchar();
    }
    while(isdigit(ch)) {
        x = x * 10 + ch - '0';
        ch = getchar();
    }
    x *= f;
}

ull twop(ll x) { return 1ULL << x; }

ll MOD(ll a, ll m) {
    a %= m;
    if(a < 0)a += m;
    return a;
}

ll inverse(ll a, ll m) {
    a = MOD(a, m);
    if(a <= 1)return a;
    return MOD((1 - inverse(m, a) * m) / a, m);
}

template<typename A, typename B>
inline void in(A &x, B &y) {
    in(x);
    in(y);
}

template<typename A, typename B, typename C>
inline void in(A &x, B &y, C &z) {
    in(x);
    in(y);
    in(z);
}

template<typename A, typename B, typename C, typename D>
inline void in(A &x, B &y, C &z, D &d) {
    in(x);
    in(y);
    in(z);
    in(d);
}

template<typename T>
T sqr(T x) { return x * x; }

ll gcd(ll a, ll b) {
    while(b != 0) {
        a %= b;
        swap(a, b);
    }
    return abs(a);
}

ll fast(ll a, ll b, ll mod) {
    if(b < 0)a = inverse(a, mod), b = -b;
    ll ans = 1;
    while(b) {
        if(b & 1) {
            b--;
            ans = ans * a % mod;
        } else {
            a = a * a % mod;
            b /= 2;
        }
    }
    return ans % mod;
}

/**
 * z[i] = lcp(s[i:], s[0:])
 *
 * time complexity: O(n)
 **/
std::vector<int> ext_kmp(const char *s, int n) {
    std::vector<int> z(n, 0);
    for(int i = 1, x = 0, y = 0; i < n; ++i) {
        if(i <= y) z[i] = std::min(y - i, z[i - x]);
        while(i + z[i] < n && s[i + z[i]] == s[z[i]]) ++z[i];
        if(y <= i + z[i]) x = i, y = i + z[i];
    }
    z[0] = n;
    return z;
}

template<class T>
struct FenwickTree : std::vector<T> {// [0, n)
    typedef std::vector<T> S;
    int n;
    
    FenwickTree(int _n = 0) : S(_n), n(_n) {}
    
    void clr(int _n) {
        n = _n;
        S::assign(n, T());
    }
    
    void add(int i, T v) {
        if(i == 0)return;
        for(; i < n; i |= i + 1) S::operator[](i) += v;
    }
    
    inline T sum(int r) {// [0, r)
        T s = T();
        if(r <= 0)return 0;
        for(; r; r &= r - 1) s += S::operator[](r - 1);
        return s;
    }
    
    T sum(int l, int r) {// [l, r)
        return sum(r) - sum(l);
    }
    
    int lower_bound(T x) { // argmin_i x <= [0, i]
        int i = 1, j = 0;
        T s = T();
        while(i < n) i <<= 1;
        for(; i; i >>= 1) {
            if(i + j <= n && s + S::operator[](i + j - 1) < x) {
                s += S::operator[](i + j - 1);
                j += i;
            }
        }
        return j;
    }
};

namespace SOLVE {
    int n, m;
    string tx[2];
    string pat;
    VI lcp, lcs;
    FenwickTree<ll> tree[2];
    
    void get() {
        {
            auto tmp = pat + "$" + tx[0];
            auto tv = ext_kmp(tmp.c_str(), sz(tmp));
            lcp.resize(n + 1);
            REP(i, 1, n + 1) {
                lcp[i] = tv[i + m];
            }
        }
        {
            reverse(all(tx[1]));
            reverse(all(pat));
            auto tmp = pat + "$" + tx[1];
            auto tv = ext_kmp(tmp.c_str(), sz(tmp));
            lcs.resize(n + 1);
            RREP(i, n, 1) {
                lcs[i] = tv[(n - i + 1) + m];
            }
            dbg(lcs);
        }
        REP(i, 1, n + 1)upmin(lcp[i], m - 1);
        REP(i, 1, n + 1)upmin(lcs[i], m - 1);
    }
    
    void main() {
        cin >> n >> m;
        REP(i, 0, 2)cin >> tx[i];
        cin >> pat;
        get();
        ll ans = 0;
        dbg(111);
        REP(i,0,2)tree[i].clr(n+m+10);
        REP(i, 1, n + 1) {
            dbg(i);
            int rem = i - m + 2 - 1;
            dbg(rem);
            if(rem > 0) {
                int len = lcp[rem];
                int diff = m - len;
                tree[0].add(len, -1);
                tree[1].add(len, -diff);
            }
            {
                int len = lcp[i];
                int diff = m - len;
                tree[0].add(len, 1);
                tree[1].add(len, diff);
            }
            dbg(111);
            
            int len = m - lcs[i];
            dbg(len);
            ans += (lcs[i] + 1) * tree[0].sum(len, m);
            ans -= tree[1].sum(len, m);
        }
        dbg(114514);
        cout<<ans<<endl;
    }
}


signed main() {
#ifndef ONLINE_JUDGE
    fr("/Users/zhangqingchuan/Desktop/cp/cp/input.txt");
    fw("/Users/zhangqingchuan/Desktop/cp/cp/output.txt");
#endif
    
    
    int t = 1;
//    in(t);
    for(int i = 1; i <= t; i++) {
//        cout<<"Case #"<<i<<":";
        SOLVE::main();
        
    }








//    clock_t st = clock();
//    while(clock() - st < 3.0 * CLOCKS_PER_SEC){
//
//    }
    
    
    
    
    
    
    return 0;
}
