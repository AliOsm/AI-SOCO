#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOR(i, a, b) for (int i = a; i < int(b); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>

const int MAX = 500200;
int l[MAX], r[MAX], x[MAX], y[MAX];
vector<int> bck[MAX], adj[MAX], add[MAX], rm[MAX], q[MAX];
int ans[MAX], p[MAX];

vector<int> path;

void dfs(int u){
    //printf("u = %d\n", u);
    path.pb(p[u]);
    /*if(p[u] != MAX - 1){
        printf("u = %d, p = %d\n", u, p[u]);
        REP(i, SIZE(path)) printf("%d%c", path[i], i == SIZE(path) - 1  ? '\n' : ' ');
    }*/
    int len = SIZE(bck[u]);
    REP(i, len){
        int l = 0, m, r = SIZE(path) - 1;
        while(l != r){
            m = (l + r + 1)/2;
            if(path[m] >= bck[u][i]) l = m;
            else r = m - 1;
        }
        if(path[l] == MAX - 1) ans[q[u][i]] = -1;
        else ans[q[u][i]] = SIZE(path) - l;
    }
    FOREACH(v, adj[u]) dfs(*v);
    path.pop_back();
}

int main(){
    int n, m; scanf("%d %d", &n, &m);
    REP(i, n) scanf("%d %d", l + i, r + i), rm[l[i]].pb(r[i]), add[r[i]].pb(r[i]);
    REP(i, m) scanf("%d %d", x + i, y + i), bck[x[i]].pb(y[i]), q[x[i]].pb(i);
    map<int, int> dic;
    int len;
    for(int i = MAX - 2; i >= 0; i--){
        len = SIZE(add[i]);
        if(dic.empty()){
            p[i] = MAX - 1;
        }
        else{
            p[i] = dic.rbegin()->st;
        }
        adj[p[i]].pb(i);
        if(len != 0) dic[i] += len;
        len = SIZE(rm[i]);
        REP(j, len){
            dic[rm[i][j]]--;
            if(dic[rm[i][j]] == 0) dic.erase(rm[i][j]);
        }
    }
    p[MAX - 1] = MAX - 1;
    //printf("End\n");
    dfs(MAX - 1);
    REP(i, m) printf("%d\n", ans[i]);
}