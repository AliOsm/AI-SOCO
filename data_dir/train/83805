//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define foreach(it, v) for(auto it=(v).begin(); it != (v).end(); ++it)

#define _ ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define __ freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);

#define tr(...) cout<<__FUNCTION__<<' '<<__LINE__<<" = ";trace(#__VA_ARGS__, __VA_ARGS__)

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;

template<typename S, typename T> 
ostream& operator<<(ostream& out,pair<S,T> const& p){out<<'('<<p.fi<<", "<<p.se<<')';return out;}

template<typename T>
ostream& operator<<(ostream& out,vector<T> const& v){
int l=v.size();for(int i=0;i<l-1;i++)out<<v[i]<<' ';if(l>0)out<<v[l-1];return out;}

template<typename T>
void trace(const char* name, T&& arg1){cout<<name<<" : "<<arg1<<endl;}

template<typename T, typename... Args>
void trace(const char* names, T&& arg1, Args&&... args){
const char* comma = strchr(names + 1, ',');cout.write(names, comma-names)<<" : "<<arg1<<" | ";trace(comma+1,args...);}

const int N = 1001000;
const ll MOD = 1e9 + 7;

ll fast(ll a, ll b){
  ll ret = 1;
  while(b){
    if(b & 1) ret = ret * a % MOD;
    a = a * a % MOD;
    b >>= 1;
  }
  return ret;
}

ll add(ll x, ll y){
  x += y;
  if(x >= MOD) x -= MOD;
  return x;
}

ll f[N];
ll invf[N];

ll C(int n, int k){
  if(n == 0) return k == 0;
  if(k < 0 or k > n) return 0;
  return f[n] * (invf[k] * invf[n-k] % MOD) % MOD;
}

void pre(){
  f[0] = 1;
  for(int i = 1; i < N; i++) f[i] = f[i-1] * i % MOD;
  
  invf[N-1] = fast(f[N-1], MOD-2);
  for(int i = N-2; i >= 0; i--) invf[i] = invf[i+1] * (i+1) % MOD;
}

ll dp[N];
ll sum[N];

int main(){ _
  pre();
  
  int n, k;
  cin >> n >> k;
  
  if(k >= n-1){
    cout << 0 << endl;
    return 0;
  }
  
  dp[0] = sum[0] = 1;
  for(int i = 1; i <= k; i++){
    dp[i] = f[i];
    sum[i] = add(sum[i-1], dp[i] * invf[i] % MOD);
  }
  
  for(int i = k+1; i <= n; i++){
    dp[i] = ((sum[i-1] - sum[i-k-1] + MOD) % MOD) * f[i-1] % MOD;
    sum[i] = add(sum[i-1] , dp[i] * invf[i] % MOD);
  }
  
  ll ans = 0;
  for(int i = 1; i <= n; i++){
    ans = add(ans, f[n-i] * (C(n-1, i-1) * dp[i-1] % MOD) % MOD);
  }
  ans = (f[n] - ans + MOD) % MOD;
  
  cout << ans << endl;
  
  return 0;
}
