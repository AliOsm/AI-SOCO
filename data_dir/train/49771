#include <string>
#include <iostream>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <sstream>


using namespace std;

struct Edge
{
    int c1, v, c2, i;
};

vector<int> g[123];
bool used[123];
Edge edges[123];
char matr[5][5];
int sums[5][5];
bool usedVerts[123];
int cnt[5];

void dfs(int v)
{
    usedVerts[v] = 1;
    for (int i = 0; i < g[v].size(); ++i)
    {
        int t = g[v][i];
        if (used[t])
            continue;
        int to = (edges[t].c1 == v ? edges[t].c2 : edges[t].c1);

        if (!usedVerts[to])
            dfs(to);
    }
}


bool connected(vector<int> & verts, int usedEdge = 100)
{
    for (int i = 1; i <= 4; ++i)
        usedVerts[i] = 1;

    for (int i = 0; i < verts.size(); ++i)
        usedVerts[verts[i]] = 0;

    for (int i = 0; i < 100; ++i)
        used[i] = 0;

    used[usedEdge] = 1;

    dfs(verts[0]);

    for (int i = 1; i <= 4; ++i)
        if (!usedVerts[i])
            return false;

    return true;
}

int main()
{
    int n;
    cin >> n;
    int sum = 0;
    for (int i = 0; i < n; ++i)
    {
        int c1, v, c2;
        cin >> c1 >> v >> c2;
        if (c1 > c2)
            swap(c1, c2);

        matr[c1][c2] = matr[c2][c1] = 1;
        sums[c1][c2] += v;
        cnt[c1]++;
        cnt[c2]++;

        sum += v;
        g[c1].push_back(i);
        g[c2].push_back(i);
        edges[i].c1 = c1;
        edges[i].c2 = c2;
        edges[i].v = v;
        edges[i].i = i;
    }

    int ans = 0;
    for (int i = 1; i < 15; ++i)
    {
        vector<int> verts;
        for (int j = 0; j < 4; ++j)
        {
            if (i & (1 << j))
                verts.push_back(j+1);
        }

        if (connected(verts))
        {
            int curans = 0;
            for (int j = 0; j < verts.size(); ++j)
            {
                for (int k = j; k < verts.size(); ++k)
                {
                    int f = verts[j];
                    int s = verts[k];
                    curans += sums[f][s];
                }
            }
            ans = max(ans, curans);
        }
    }
    vector<int> verts;
    for (int i = 1; i <= 4; ++i)
        verts.push_back(i);


    if (connected(verts))
    {
        if (!(cnt[1] & cnt[2] & cnt[3] & cnt[4] & 1))
        {
            cout << sum << endl;
            return 0;
        }

        for (int i = 0; i < n; ++i)
        {
            if (connected(verts, i))
            {
                int c1 = edges[i].c1;
                int c2 = edges[i].c2;
                cnt[c1]--;
                cnt[c2]--;
                int asdf = 0;
                for (int k = 1; k <= 4; ++k)
                {
                    if (cnt[k] & 1)
                        asdf++;
                }
                if (asdf != 4)
                    ans = max(ans, sum - edges[i].v);

                cnt[c1]++;
                cnt[c2]++;
            }
        }
    }
    cout << ans;
}

/*

6
1 10 1
1 2 2
2 10 3
2 20 3
3 1 4
4 10 4
*/
