#include <bits/stdc++.h>
#define pb push_back

using namespace std;
using ll = long long int;

void solve()
{
	int n, p, s; cin >> n >> p >> s;
	vector<array<int, 3>> v(n);
	for (int i = 0; i < n; ++i)
	{
		cin >> v[i][0];
	}
	for (int i = 0; i < n; ++i)
	{
		cin >> v[i][1];
		v[i][2] = i;
	}
	sort(v.begin(), v.end(), [](auto a, auto b) {return a[0] - a[1] < b[0] - b[1];});
	priority_queue<array<int, 2>> prog, spor;
	ll pref[n] = {0}, suf[n] = {0}, cur = 0;
	for (int i = 0; i < n; ++i)
	{
		if ((int)spor.size() < s)
		{
			spor.push({-v[i][1], v[i][2]});
			cur += v[i][1];
		}
		else
		{
			if (v[i][1] > -spor.top()[0])
			{
				cur += v[i][1] + spor.top()[0];
				spor.pop();
				spor.push({-v[i][1], v[i][2]});
			}
		}
		pref[i] = cur;
	}
	cur = 0;
	for (int i = n-1; i >= 0; --i)
	{
		if ((int)prog.size() < p)
		{
			prog.push({-v[i][0], v[i][2]});
			cur += v[i][0];
		}
		else
		{
			if (v[i][0] > -prog.top()[0])
			{
				cur += v[i][0] + prog.top()[0];
				prog.pop();
				prog.push({-v[i][0], v[i][2]});
			}
		}
		suf[i] = cur;
	}
	ll M = 0, ind = -1;
	for (int i = s; i <= n - p; ++i)
	{
		cur = 0;
		if (i < n) cur += suf[i];
		if (i) cur += pref[i-1];
		if (cur > M)
		{
			M = cur;
			ind = i;
		}
	}
	cout << M << '\n';
	while (!prog.empty()) prog.pop();
	while (!spor.empty()) spor.pop();
	cur = 0;
	for (int i = n-1; i >= ind; --i)
	{
		if ((int)prog.size() < p)
		{
			prog.push({-v[i][0], v[i][2]});
			cur += v[i][0];
		}
		else
		{
			if (v[i][0] > -prog.top()[0])
			{
				cur += v[i][0] + prog.top()[0];
				prog.pop();
				prog.push({-v[i][0], v[i][2]});
			}
		}
	}
	cur = 0;
	for (int i = 0; i < ind; ++i)
	{
		if ((int)spor.size() < s)
		{
			spor.push({-v[i][1], v[i][2]});
			cur += v[i][1];
		}
		else
		{
			if (v[i][1] > -spor.top()[0])
			{
				cur += v[i][1] + spor.top()[0];
				spor.pop();
				spor.push({-v[i][1], v[i][2]});
			}
		}
	}
	while (!prog.empty())
	{
		cout << prog.top()[1] + 1 << ' ';
		prog.pop();
	}
	cout << endl;
	while (!spor.empty())
	{
		cout << spor.top()[1] + 1 << ' ';
		spor.pop();
	}
}

//  ---------------------Template---------------------------
void InputSetup()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	#ifdef LOCAL
	freopen("in", "r", stdin);
	freopen("out", "w", stdout);
	#endif
}

int main(void)
{
	auto start = chrono::high_resolution_clock::now();

	InputSetup();
	solve();

	auto finish = chrono::high_resolution_clock::now();
	cerr << "Time elapsed: " << (chrono::duration<long double>(finish-start)).count() << "s\n";
}
//  ---------------------Template---------------------------