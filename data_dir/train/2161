#include <bits/stdc++.h>

using namespace std;

struct vec
{
    long double x,y;
    bool operator ==(const vec &a) const{
        return x==a.x&&y==a.y;
    }
    bool operator <(const vec &a) const{
        if(a.x!=x) return x<a.x;
        return y<a.y;
    }
    vec operator +(const vec &a) const{
        return {x+a.x,y+a.y};
    }
    vec operator *(const long double &a) const{
        return {x*a,y*a};
    }
    vec operator -(const vec &a) const{
        return {x-a.x,y-a.y};
    }
    vec operator /(const long double &a) const{
        return {x/a,y/a};
    }
    long double len() const{
        return sqrt(x*x+y*y);
    }
    long double dot(const vec &a) const{
        return x*a.x+y*a.y;
    }
    long double crs(const vec &a) const{
        return x*a.y-y*a.x;
    }
    vec proj(const vec &a) const{
        return (a/a.len())*(*this).dot(a)/a.len();
    }
};


struct P
{
    int x,y;
    bool operator <(const P&a) const{
        return x<a.x;
    }
};

bool as(P a,P b)
{
    return a.x<b.x;
}
long long x,y,z,mod=998244353;
vector<int> v;
int i,n,m,k,a,d,b,c;
int dx[10]={0,1,0,-1,0},dy[10]={0,0,1,0,-1};
int e;
int o[311111];
int l[211111];
int j[1];
//set<int>s;
stack<int> s;
//multiset<int> s[5111];
priority_queue<int> q;
P u[311111];
char r[1];


int main()
{
    scanf("%d",&a);
    for(int t=1;t<=a;t++)
    {
        vector<int> v;
        map<int,int> p;
        scanf("%d",&b);
        for(int t=1;t<=b;t++)
        {
            scanf("%d",&o[t]);
            v.push_back(o[t]);
        }
        sort(v.begin(),v.end());
        v.resize(unique(v.begin(),v.end())-v.begin());
        for(int t=0;t<v.size();t++)
            p[v[t]]=t+1,u[t+1]={987654321,-987654321};
        for(int t=1;t<=b;t++)
        {
            o[t]=p[o[t]];
            u[o[t]]={min(t,u[o[t]].x),max(t,u[o[t]].y)};
        }
        n=987654321;
        m=-987654321;
        k=i=0;
        e=1;
        for(int t=1;t<=v.size();t++)
        if(m<u[t].x)
        {
            i++;
            e=max(e,i);
            m=u[t].y;
        }
        else
        {
            i=1;
            m=u[t].y;
        }
        printf("%d\n",v.size()-e);
    }

}
