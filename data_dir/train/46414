#include <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
using namespace std;
typedef long long ll ; 
typedef long double ld ;
typedef pair<ll , ll> pll ;

const ll N = 1e6 + 30 , Mod = 1e9 + 7 ;
const ll SQ = 330 ;
const ll LOG = 24 ;

ll dp[LOG][N] , spf[N]; 
inline ll sum (ll x , ll y) {
	return (x + y) % Mod;
}
inline ll sub(ll x , ll y) {
	return (x - y + Mod) % Mod ;
}
inline ll mul (ll x , ll y) {
	return (x * y) % Mod ;
}
int main () {
	dp[0][0] = 1 ; 
    for (int i = 1 ; i < LOG ; i ++) dp[i][0] = 2 ;
    for (int i = 1 ; i < N ; i ++) {
    	dp[0][i] = dp[0][i - 1] ;
    	for (int j = 1 ; j < LOG ; j ++) 
    		dp[j][i] = sum(dp[j][i - 1] , dp[j - 1][i]) ;
	}
	memset(spf , -1 , sizeof(spf)) ;
	for (ll i = 2 ; i < N ; i ++)
		for (ll j = i * 2 ; j < N ; j += i)
			if (spf[j] == -1) 
				spf[j] = i ;
	ll q ;
	//printf(" 4 \n") ;
	scanf("%lld" , &q) ;
	while (q --) {
		ll ans = 1 ;
		ll n , r ;
		scanf("%lld%lld" , &r , &n) ;
		while (n > 1) {
			ll f = spf[n] ;
			if (f == -1) {
				n = 1 ;
				ans = mul(ans , dp[1][r]) ;
				continue ;
			}
			ll cur = 0 ;
			while (n % f == 0) {
				n /= f ;
				cur ++ ;
			}
			ans = mul(ans , dp[cur][r]) ;
		}
		printf("%lld" , ans) ;
		printf("\n") ;
	}
    return (0) ;
}