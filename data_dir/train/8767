//#include <cstdio>
#include <iostream>

#include <cstring>

#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
//#include <queue>
//#include <stack>
#include <cassert>

using namespace std;

#define SZ(a) int((a).size())
#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

#define DEBUG(x) cerr << #x << ": " << x << endl

typedef long long llong;
typedef vector<int> VI;
typedef vector<VI> VVI;

#define MAXN 504
int N;
int A[MAXN];

int memo2[MAXN][MAXN];
// go2(L, R) = number that interval [L, R] can be shrinked into
//           = 0 if not possible
int go2(int L, int R) {
   if (L == R)
      return A[L];
   int& res = memo2[L][R];
   if (res < 0) {
      res = 0;
      for (int m = L+1; m <= R; ++m) {
         int left_half  = go2(L, m-1);
         if (left_half == 0) continue;
         int right_half = go2(m, R);
         if (right_half == 0) continue;
         if (left_half == right_half) {
            res = left_half+1;
            break;
         }
      }
   }
   return res;
}

// can_shrink(L, R): is it possible to shrink interval into a single number?
bool can_shrink(int L, int R) {
   return go2(L, R) > 0;
}

const int INF = 1000000000;

// go1(R): minimum number of partitions of subarray [1..R]
int memo1[MAXN];
int go1(int R) {
   if (R == 0)
      return 0;
   int& res = memo1[R];
   if (res < 0){
      res = INF;
      for (int i = R; i >= 1; --i) {
         if (can_shrink(i, R)) {
            int cur = go1(i-1)+1;
            res = min(res, cur);
         }
      }
   }
   return res;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(nullptr);

   cin >> N;
   FOR(i, 1, N)
      cin >> A[i];

   memset(memo1, -1, sizeof(memo1));
   memset(memo2, -1, sizeof(memo2));

   int res = go1(N);
   cout << res << '\n';

   return 0;
}
