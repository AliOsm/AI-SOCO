#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace std;
using namespace __gnu_pbds;
#define PI                      3.1415926535897932384626
#define MOD                     998244353
#define int                     long long int
#define fi                      first
#define se                      second
#define pq                      priority_queue
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define fill(x,y)               memset(x,y,sizeof(x));
#define rep(x,y,z)              for(int x = y; x < z; ++x)
#define repr(x,y,z)             for(int x = y; x > z; --x)
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define hash                    _H
                                    

typedef tree<pii,null_type,less<pii>,rb_tree_tag,
tree_order_statistics_node_update> ordered_set;

template<typename T> T pow(T a,T b, int m){T ans=1; while(b>0){ if(b%2==1) ans=(ans*a)%m; b/=2; a=(a*a)%m; } return ans%m; }
template<typename T> void swap(T &a,T &b){T temp = a;a = b;b = temp;return ;}
template<typename T>T InverseMod(T a,int m){return pow(a,m-2,m);}

int n;
int arr[100+2][100+2];
void read()
{
    cin >> n;
    char ch;
    rep(i,0,n) rep(j,0,n) cin >> ch,arr[i][j] = ch-'0';
}

void swp(int col)
{
    rep(i,0,n)
    {
        arr[i][col] = 1 - arr[i][col];
    }
}

int cleanRow()
{
    int ans = 0;
    rep(i,0,n)
    {
        ans += 1;
        rep(j,0,n)
        {
            if(arr[i][j] == 0)
            {
                ans -= 1;
                break;
            }
        }
    }
    return ans;
}

signed main()
{
    read();
    int out = cleanRow();
    rep(i,0,n)
    {
        rep(j,0,n)
        {
            if(arr[i][j] == 0)
            {
                swp(j);
            }
        }
        out = max(out,cleanRow());
    }
    cout << out << endl;
} 