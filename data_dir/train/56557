#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
#define N 500010
#define ll long long
#define pb push_back
#define mp make_pair
 
using namespace __gnu_pbds;
using namespace std;
 
typedef
tree<
  int,
  null_type,
  less<int>,
  rb_tree_tag,
  tree_order_statistics_node_update>
order_set;
map<int, vector<int> > df;
int ct[N], ans[N];
int main(){
	order_set A;
	int n, m, q;
	cin >> n >> m >> q;
	for(int i = 0; i < n; i++){
		int x;
		cin >> x;
		ct[x]++;
	}
	for(int i = 1; i <= m; i++){
		df[ct[i]].pb(i);
	}
	vector<pair<ll, int> > quer;
	for(int i = 0; i < q; i++){
		ll x;
		cin >> x;
		quer.pb(mp(x, i));
	}
	sort(quer.begin(), quer.end());
	auto it = df.begin();
	ll prev = it->first;
	ll prevval = n + 1;
	for(auto val: it->second)
		A.insert(val);
	df.erase(df.begin());
	for(auto val: df){
		ll x = val.first;
		ll lst = prevval + (x - prev) * A.size();
		int ind = lower_bound(quer.begin(), quer.end(), mp(prevval, -1)) - quer.begin();
		while(ind < quer.size() && quer[ind].first < lst){
			ll rt = quer[ind].first;
			rt -= prevval;
			rt = rt % A.size();
			ans[quer[ind].second] = *A.find_by_order(rt);
			ind++;
		}
		for(auto elem: val.second)
			A.insert(elem);
		prev = val.first;
		prevval = lst;
	}
	int ind = lower_bound(quer.begin(), quer.end(), mp(prevval, -1)) - quer.begin();
	while(ind < quer.size()){
		ll rt = quer[ind].first;
		rt -= prevval;
		rt = rt % A.size();
		ans[quer[ind].second] = *A.find_by_order(rt);
		ind++;
	}
	for(int i = 0; i < q; i++)
		cout << ans[i] << '\n';
}