#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2
#define v(x) (int)(x - 'a')

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 1e5 + 1;
const int L = 26;
int n;

int lef[N];
int rig[N];
int ans[N][L];
int cur[L];

string t[N];

void input() {
    cin >> n;
    for(int i = 0; i < n; ++i) {
        cin >> t[i];
    }
    for(int i = 0; i < n; ++i) {
        int l = 0;
        int c = 0;
        int r = len(t[i]) - 1;
        for(; l < len(t[i]) && t[i][l] == t[i][0]; ++l);
        for(; r >= 0 && t[i][r] == t[i].back(); --r);
        for(int j = 0; j < len(t[i]); ) {
            int k = j;
            while(k < len(t[i]) && t[i][j] == t[i][k]) {
                k++;
            }
            ans[i][v(t[i][j])] = max(ans[i][v(t[i][j])], k - j);
            j = k;
        }
        lef[i] = l;
        rig[i] = len(t[i]) - 1 - r;
    }
}

void solve() {
    for(int i = 0; i < L; ++i) {
        cur[i] = ans[0][i];
    }
    for(int i = 1; i < n; ++i) {
        int x = v(t[i][0]);
        int y = v(t[i].back());
        if(lef[i] == len(t[i])) {
            cur[x] = cur[x] + (cur[x] + 1) * lef[i];
        } else {
            if(x == y) {
                cur[x] = min(cur[x], 1) + lef[i] + rig[i];
            } else {
                cur[x] = min(cur[x], 1) + lef[i];
                cur[y] = min(cur[y], 1) + rig[i];
            }
        }
        for(int j = 0; j < L; ++j) {
            if(j != x && j != y) {
                cur[j] = min(cur[j], 1);
            }
            cur[j] = max(cur[j], ans[i][j]);
        }
    }
    int res = 0;
    for(int i = 0; i < L; ++i) {
        res = max(res, cur[i]);
    }
    cout << res << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
