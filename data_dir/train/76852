#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define sc second
using namespace std;

struct MinCostMaxFlow{
	struct Node {
	    int x, y, cap, cost;// x->y, v
	    int next;
	} edge[1000005];
	int e, head[10005], dis[10005], prev[10005], record[10005], inq[10005];
	void addEdge(int x, int y, int cap, int cost) {
	    edge[e].x = x, edge[e].y = y, edge[e].cap = cap, edge[e].cost = cost;
	    edge[e].next = head[x], head[x] = e++;
	    edge[e].x = y, edge[e].y = x, edge[e].cap = 0, edge[e].cost = -cost;
	    edge[e].next = head[y], head[y] = e++;
	}
	void clear(){
		memset(head,-1,sizeof(head));
		e=0;
	}
	pair<int,int> mincost(int s, int t) {
	    int mncost = 0, flow, totflow = 0;
	    int i, x, y;
	    while(1) {
	        memset(dis, 63, sizeof(dis));
	        int oo = dis[0];
	        dis[s] = 0;
	        deque<int> Q;
	        Q.push_front(s);
	        while(!Q.empty()) {
	            x = Q.front(), Q.pop_front();
	            inq[x] = 0;
	            for(i = head[x]; i != -1; i = edge[i].next) {
	                y = edge[i].y;
	                if(edge[i].cap > 0 && dis[y] > dis[x] + edge[i].cost) {
	                    dis[y] = dis[x] + edge[i].cost;
	                    prev[y] = x, record[y] = i;
	                    if(inq[y] == 0) {
	                        inq[y] = 1;
	                        if(Q.size() && dis[Q.front()] > dis[y])
	                            Q.push_front(y);
	                        else
	                            Q.push_back(y);
	                    }
	                }
	            }
	        }
	        if(dis[t] == oo)
	            break;
	        flow = oo;
	        for(x = t; x != s; x = prev[x]) {
	            int ri = record[x];
	            flow = min(flow, edge[ri].cap);
	        }
	        for(x = t; x != s; x = prev[x]) {
	            int ri = record[x];
	            edge[ri].cap -= flow;
	            edge[ri^1].cap += flow;
	            edge[ri^1].cost = -edge[ri].cost;
	        }
	        totflow += flow;
	        mncost += dis[t] * flow;
	    }
	    return make_pair(totflow,mncost);
	}
}mcmf;

int main(){
	mcmf.clear();
	int n,m,o,a[3010],b[3010];
	scanf("%d %d %d",&n,&m,&o);
	for(int i=1;i<=n;i++) scanf("%d",&a[i]);
	for(int i=1;i<=n;i++) scanf("%d",&b[i]);
	for(int i=1;i<=n;i++){
		mcmf.addEdge(0,i,1,0);
		mcmf.addEdge(i,n+1,1,-a[i]);
		mcmf.addEdge(i,n+2,1,-b[i]);
	}
	mcmf.addEdge(n+1,n+3,m,0);
	mcmf.addEdge(n+2,n+3,o,0);
	pair<int,int> ans = mcmf.mincost(0,n+3);
	printf("%d\n",ans.sc*-1);
	// cout<<mcmf.e<<endl;
	vector<int> v,vv;
	for(int i=0;i<n*6;i+=2){
		// cout<<mcmf.edge[i].x<<" "<<mcmf.edge[i].y
		// <<" "<<mcmf.edge[i].cap<<" "<<mcmf.edge[i].cost<<endl;
		if(mcmf.edge[i].cap==0){//cout<<mcmf.edge[i].x<<endl;
			if(mcmf.edge[i].y==n+1) v.pb(mcmf.edge[i].x);
			else if(mcmf.edge[i].y==n+2) vv.pb(mcmf.edge[i].x);
		}
	}
	for(int i=0;i<v.size();i++){
		if(i) printf(" ");
		cout<<v[i];
	}
	cout<<endl;
	for(int i=0;i<vv.size();i++){
		if(i) printf(" ");
		cout<<vv[i];
	}
	
	
	return 0;
}
