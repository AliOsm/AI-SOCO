#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

const int MAX = 30;
double chanceGo[MAX][MAX][MAX][MAX];

double chanceInv[MAX][MAX];
double chanceInv2[MAX][MAX];

vector<pair<int, int>> canGoTo[MAX][MAX];

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(int, k);
	assert(n <= MAX);
	
	auto p = readVector<int>(n);
	for (auto &x : p) x--;
	
	double chance = 1.0 / (n * (n - 1) / 2 + n);
	
	FOR (l, 0, n) FOR (r, l, n) {
		vector<int> mapping(n);
		FOR (i, 0, n) mapping[i] = i;
		int p1 = l;
		int p2 = r;
		while (p1 < p2) swap(mapping[p1++], mapping[p2--]);
		FOR (a, 0, n) FOR (b, 0, n)
		{
			chanceGo[a][b][mapping[a]][mapping[b]] += chance;
		}
	}
	
	while (k --> 0) {
		FOR (i, 0, n) FOR (j,0 ,n) chanceInv2[i][j] = 0;
		
		FOR (l, 0, n) FOR (r, l, n) {
			vector<int> mapping(n);
			FOR (i, 0, n) mapping[i] = i;
			int p1 = l;
			int p2 = r;
			while (p1 < p2) swap(mapping[p1++], mapping[p2--]);
			
			FOR (i, 0, n) FOR (j, i + 1, n) {
				double c2 = chanceInv[mapping[i]][mapping[j]];
				if (mapping[i] > mapping[j]) c2 = 1 - chanceInv[mapping[j]][mapping[i]];
				chanceInv2[i][j] += chance * c2;
			}
		}		
		FOR (i, 0, n) FOR (j,0 ,n) chanceInv[i][j] = chanceInv2[i][j];
	}
		
	double res = 0;
	FOR (i, 0, n) FOR (j, i + 1, n)
		res += p[i] < p[j] ? chanceInv[i][j] : 1 - chanceInv[i][j];
		
	cout << setprecision(10);
	fixed(cout);
	cout << res;
}