#include "iostream"
#include "algorithm"
#include "vector"
#include "set"
#include "map"
#include "cstring"
#include "string"
#include "vector"
#include "cassert"
#include "queue"
#include "cstdio"
#include "cstdlib"
#include "ctime"
#include "cmath"
#include "bitset"
#include "numeric"
#include "iomanip"

using namespace std;

typedef long long ll;
typedef pair < int, int > ii;

const int N = 2e5 + 5;
const int mod = 1e9 + 7;

int n, k;
int fact[N], inv[N];

inline int add(int x, int y) {
    return x + y >= mod ? x + y - mod : x + y;
}

inline int mul(int x, int y) {
    return (ll) x * y % mod;
}

inline int fe(int x, int k) {
    int res = 1;
    while(k) {
        if(k & 1)
            res = mul(res, x);
        x = mul(x, x);
        k >>= 1;
    }
    return res;
}

inline int C(int n, int m) {
    if(n < m)
        return 0;
    return mul(fact[n], mul(inv[m], inv[n - m]));
}

int main () {
    
    fact[0] = 1;
    
    for(int i = 1; i < N; i++)
        fact[i] = mul(fact[i - 1], i);
    
    for(int i = 0; i < N; i++)
        inv[i] = fe(fact[i], mod - 2);
    
    scanf("%d %d", &n, &k);
    
    map < int, int > M;
    
    for(int i = 1; i <= n; i++) {
        int l, r;
        scanf("%d %d", &l, &r);
        M[l]++;
        M[r + 1]--;
    }
    
    vector < ii > v;
    
    int sum = 0;
    
    for(auto tmp : M)
        v.push_back({tmp.first, sum = tmp.second += sum});
    
    int ans = 0;
    
    for(int i = 0; i + 1 < v.size(); i++)
        ans = add(ans, mul(v[i + 1].first - v[i].first, C(v[i].second, k)));
    
    printf("%d\n", ans);
    
    return 0;
    
}