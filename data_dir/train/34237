#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;
int dp[110][2050];
vector<int> q[110];
int dfs(int dep, int k) {
	if (!k || dep > 100) {
		return 0;
	}
	if (dp[dep][k] != -1) {
		return dp[dep][k];
	}
	int &res = dp[dep][k];
	res = 0;
	if (k >= 1024) {
		for (int i = dep; i <= 100; i++) {
			for (int j = 0; j < q[i].size(); j++) {
				res += q[i][j];
			}
		}
		return res;
	}
	int s = 0;
	res = dfs(dep + 1, k * 2);
	for (int i = 0; i < min(k, (int)q[dep].size()); i++) {
		s += q[dep][i];
		res = max(res, s + dfs(dep + 1, (k - i - 1) * 2));
	}
	return res;
}
int main() {
	int n, T;
	scanf("%d%d", &n, &T);
	for (int i = 0; i < n; i++) {
		int t, x;
		scanf("%d%d", &t, &x);
		q[T-t].push_back(x);
	}
	for (int i = 0; i <= 100; i++) {
		sort(q[i].begin(), q[i].end());
		reverse(q[i].begin(), q[i].end());
		for (int j = 0; j < 2050; j++) {
			dp[i][j] = -1;
		}
	}
	printf("%d\n", dfs(0, 1));
	return 0;
}
