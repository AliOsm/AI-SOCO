#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 1e18+7;
const long long mod = 1e9+7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0;(i)<(ll)(n);(i)++)
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n;

int p[1005];

ll f[1005];

void add(ll &x, ll y){
  x += y;
  while(x >= mod){
    x -= mod;
  }
  while(x < 0){
    x += mod;
  }
}

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  scanf("%d", &n);
  forn(i, n){
    scanf("%d", p + i + 1);
  }
  f[1] = 2;
  for(int i = 2; i <= n; ++i){
    add(f[i], f[i - 1]);
    if(p[i] == i){
      add(f[i], 2);
    } else {
      add(f[i], ((f[i - 1] - f[p[i] - 1] + 2) % mod + mod) % mod);
    }
  }
  printf("%I64d\n", f[n]);
  return 0;
}
