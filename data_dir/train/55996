#include<bits/stdc++.h>
using namespace std;
const int M=1e+5;
int tree[4*M][27],type[4*M],ca[26];
void cunt(int n,int s,int e,int l,int r)
{
    if(s>e || e<l || s>r)
        return ;
    if(s>e || s>r || e<l)
	    return ;
	 int m=(s+e)/2;
	if(s!=e && type[n]>0)
	{
		if(type[n]==1)
		{
			int tot=m-s+1;
			for(int i=0;i<26;i++)
			{
				tree[2*n][i]=min(tree[n][i],tot);
				tot-=tree[2*n][i];
			}
			tot=e-m;
			for(int i=25;i>=0;i--)
			{
				tree[2*n+1][i]=min(tree[n][i],tot);
				tot-=tree[2*n+1][i];
			}
		}
		if(type[n]==2)
		{
			int tot=e-m;
			for(int i=0;i<26;i++)
			{
				tree[2*n+1][i]=min(tree[n][i],tot);
				tot-=tree[2*n+1][i];
			}
			tot=m-s+1;
			for(int i=25;i>=0;i--)
			{
				tree[2*n][i]=min(tree[n][i],tot);
				tot-=tree[2*n][i];
			}
		}
		type[2*n+1]=type[n];
		type[2*n]=type[n];
		type[n]=0;
	}
	if(s>=l && e<=r)
	{
	    for(int i=0;i<26;i++)
	    {
	        ca[i]+=tree[n][i];
	        tree[n][i]=0;
	    }
	    return ;
	}
	cunt(2*n,s,m,l,r);
	cunt(2*n+1,m+1,e,l,r);
}
void update(int n,int s,int e,int l,int r,int v)
{
	int m=(s+e)/2;
	if(s>e || s>r || e<l)
	    return ;
	if(s!=e && type[n]>0)
	{
		if(type[n]==1)
		{
			int tot=m-s+1;
			for(int i=0;i<26;i++)
			{
				tree[2*n][i]=min(tree[n][i],tot);
				tot-=tree[2*n][i];
			}
			tot=e-m;
			for(int i=25;i>=0;i--)
			{
				tree[2*n+1][i]=min(tree[n][i],tot);
				tot-=tree[2*n+1][i];
			}
		}
		if(type[n]==2)
		{
			int tot=e-m;
			for(int i=0;i<26;i++)
			{
				tree[2*n+1][i]=min(tree[n][i],tot);
				tot-=tree[2*n+1][i];
			}
			tot=m-s+1;
			for(int i=25;i>=0;i--)
			{
				tree[2*n][i]=min(tree[n][i],tot);
				tot-=tree[2*n][i];
			}
		}
		type[2*n+1]=type[n];
		type[2*n]=type[n];
		type[n]=0;
	}
	if(s>=l && e<=r)
	{
		if(v==1)
		{
		    int total=e-s+1;
		    for(int i=0;i<26;i++)
		    {
		        tree[n][i]=min(ca[i],total);
		        ca[i]-=tree[n][i];
		        total-=tree[n][i];
		    }
		    
		}
		if(v==2)
		{
		    int total=e-s+1;
		    for(int i=25;i>=0;i--)
		    {
		        tree[n][i]=min(ca[i],total);
		        ca[i]-=tree[n][i];
		        total-=tree[n][i];
		    }
		    
		}
		type[n]=v;
		if(s!=e && type[n]>0)
		{
			if(type[n]==1)
			{
				int tot=m-s+1;
				for(int i=0;i<26;i++)
				{
					tree[2*n][i]=min(tree[n][i],tot);
					tot-=tree[2*n][i];
				}
				tot=e-m;
				for(int i=25;i>=0;i--)
				{
					tree[2*n+1][i]=min(tree[n][i],tot);
					tot-=tree[2*n+1][i];
				}
			}
			if(type[n]==2)
			{
				int tot=e-m;
				for(int i=0;i<26;i++)
				{
					tree[2*n+1][i]=min(tree[n][i],tot);
					tot-=tree[2*n+1][i];
				}
				tot=m-s+1;
				for(int i=25;i>=0;i--)
				{
					tree[2*n][i]=min(tree[n][i],tot);
					tot-=tree[2*n][i];
				}
			}
			type[2*n+1]=type[n];
			type[2*n]=type[n];
		}
		type[n]=0;
		return ;
	}
	update(2*n,s,m,l,r,v);
  	update(2*n+1,m+1,e,l,r,v);
  	for(int i=0;i<26;i++)
	{
	    tree[n][i]=tree[2*n+1][i]+tree[2*n][i];
	}
}
string st;
void print(int n,int s,int e)
{
	if(s==e)
	{
		for(int i=0;i<26;i++)
		{
			if(tree[n][i])
			cout<<(char)(i+'a');
		}
		return ;
	}
	int m=(s+e)/2;
	if(type[n]==1)
	{
		int tot=m-s+1;
		for(int i=0;i<26;i++)
		{
			tree[2*n][i]=min(tree[n][i],tot);
			tot-=tree[2*n][i];
		}
		tot=e-m;
		for(int i=25;i>=0;i--)
		{
			tree[2*n+1][i]=min(tree[n][i],tot);
			tot-=tree[2*n+1][i];
		}
	}
	if(type[n]==2)
	{
		int tot=e-m;
		for(int i=0;i<26;i++)
		{
			tree[2*n+1][i]=min(tree[n][i],tot);
			tot-=tree[2*n+1][i];
		}
		tot=m-s+1;
		for(int i=25;i>=0;i--)
		{
			tree[2*n][i]=min(tree[n][i],tot);
			tot-=tree[2*n][i];
		}
	}
	if(type[n]!=0)
	{
	    type[2*n+1]=type[n];
	    type[2*n]=type[n];
	}
	type[n]=0;
	print(2*n,s,m);
	print(2*n+1,m+1,e);

}
void build(int n,int s,int e)
{
	if(s==e)
	{
		tree[n][st[s-1]-'a']=1;
		return ;
	}
	int m=(s+e)/2;
	build(2*n,s,m);
	build(2*n+1,m+1,e);
	for(int i=0;i<26;i++)
		tree[n][i]=tree[2*n][i]+tree[2*n+1][i];

}
int32_t main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    int n,q;
    cin>>n>>q>>st;
    build(1,1,n);
    while(q--)
    {
    	int l,r,v;
    	cin>>l>>r>>v;
    	v^=1;
    	cunt(1,1,n,l,r);
    	update(1,1,n,l,r,v+1);
    }
    print(1,1,n);

}