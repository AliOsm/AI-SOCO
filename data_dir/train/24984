#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <chrono>
#include <assert.h>

#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

using namespace std;
typedef long long mt;

template<typename T>
constexpr mt infValue = std::is_same<T, int>::value ? 2000100007 : 8600000000000000007ll;
template<typename T>
constexpr mt maxValue = std::is_same<T, int>::value ? 1000000007 : 1000000000000000001ll;

#define rep(a, b, i) for(register mt i = a; i < b; ++i)
#define repe(a, b, i) for(register mt i = a; i <= (b); ++i)
#define repd(a, b, i) for(register mt i = a; i > b; --i)
#define repde(a, b, i) for(register mt i = a; i >= b; --i)

const mt INF = 10000000007;// infValue<mt>;
const long long MOD = 1000000007ll;//1000000007ll;
const double EPS = 1e-6;
const mt MAX = maxValue<mt>;

#define N 100100
#define K 2
#define P 256
#define M (1000111)

mt n, k;
pair<mt, pair<mt, mt>> p[N];
mt answ[N], s;
priority_queue<mt, vector<mt>, greater<mt>> q;
int main(void)
{
#ifdef _DEBUG
	freopen("in.txt", "r", stdin);
#endif
	scanf("%d %d", &n, &k);
	rep(0, n, i) scanf("%d", &p[i].first);
	rep(0, n, i) scanf("%d", &p[i].second.first), p[i].second.second = i;
	sort(p, p + n);
	mt g = min(k, n);
	rep(0, g, i) {
		q.push(p[i].second.first);
		s += p[i].second.first;
		answ[p[i].second.second] = s;
	}

	rep(g, n, i) {
		answ[p[i].second.second] = s + p[i].second.first;

		if (k) {
			mt x = q.top();
			if (x < p[i].second.first) {
				q.pop();
				q.push(p[i].second.first);

				s -= x;
				s += p[i].second.first;
			}
		}
	}
	rep(0, n, i)
		printf("%lld ", answ[i]);
	putc('\n', stdout);

	return 0;
}