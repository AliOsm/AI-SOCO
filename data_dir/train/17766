/*
ID: hamed_51
PROG: ?
LANG: C++
*/

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#if (_win32 || __win32__)
#define LLD "%i64d"
#else
#define LLD "%lld"
#endif

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-8
#define endl "\n"

inline void read(register int *n) {
	register char c; *n = 0;
	do { c = getchar(); } while (c < '0' || c > '9');
	do { *n = c-'0'+*n*10; c = getchar(); } while (c >= '0' && c <= '9');
}

ll faf(ll m, ll k, ll where) {
	if (k >= 2*m-2) return k-k%(2*m-2) + faf(m, k%(2*m-2), where);
	if (k < where) return where-1;
	else if (k <= 2*m-1-where) return 2*m-1-where;
	else return where-1+2*m-2;
}

int tester(ll m, ll s, ll f, int t) {
	vector<int> V;
	FOR(i, 1, m+1) V.pb(i);
	for (int i = m-1; i >= 2; i--) V.pb(i);
	int tot = t;
	t %= Size(V);
	while (V[t] != s) t = (t+1)%Size(V), tot++;
	while (V[t] != f) t = (t+1)%Size(V), tot++;
	return tot;
}

int main() {
	ios::sync_with_stdio(false);
	ll n, m;
	cin >> n >> m;
	while (n--) {
		ll t, s, f;
		cin >> s >> f >> t;
		if (s == f) {
			cout << t << endl;
			continue;
		}
		cout << faf(m, faf(m, t, s), f) << endl;
	}
	return 0;
}

