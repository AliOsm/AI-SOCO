/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 10-Jul-2019 02:18:41
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 3e5 + 7;
const int inf = 1e9 + 7;

set <int> res;
int d[N], used[N];
vector <pair <int, int> > g[N];

bool dfs(int u) {
    used[u] = 1;
    int degree = 0;
    for (auto v : g[u]) {
        if (!used[v.first]) {
            if (!dfs(v.first)) {
                ++degree;
                res.insert(v.second);
            }
        }
    }
    return d[u] == -1 or d[u] == degree % 2;
}

int solve() {
    int n, m; Int(n, m);
    FOR (i, 1, n) {
        Int(d[i]);
    }
    FOR (i, 1, m) {
        int u, v; Int(u, v);
        g[u].push_back({v, i});
        g[v].push_back({u, i});
    }

    int root = 1;
    FOR (i, 1, n) {
        if (d[i] == -1) {
            root = i; break;
        }
    }

    if (!dfs(root)) {
        return printf("-1\n");
    }

    printf("%d\n", len(res));
    for (int idx : res) {
        printf("%d\n", idx);
    }

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; //Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}