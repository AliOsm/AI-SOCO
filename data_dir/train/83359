//adamant problems are easy
#include<bits/stdc++.h>
using namespace std;
typedef long long int uli;
const int mx=3e5+10;
const int sq=548;
//const int sq=0;
vector<string>d;
bool e[mx];
char buf[mx];
vector<string>add,rem;

int to[mx][26];
int link[mx];
int cnt[mx];
int f[mx];
string s;
set<string>D;
void build(){
  for(string x:add)D.insert(x);
  for(string x:rem)D.erase(x);
  add.clear();
  rem.clear();
  memset(to,0,sizeof to);
  memset(cnt,0,sizeof cnt);
  int sz=1;
  for(string w:D){
    int u=0;
    for(char ch:w){
      int x=ch-'a';
      if(!to[u][x])to[u][x]=sz++;
      u=to[u][x];
    }
    cnt[u]++;
  }
  queue<int>q;
  q.push(0);
  while(!q.empty()){
    int u=q.front();
    q.pop();
    for(int x=0;x<26;x++)if(to[u][x]){
      int v=to[u][x];
      int lv=link[u];
      while(lv && !to[lv][x])lv=link[lv];
      lv=to[lv][x];
      if(lv==v)lv=0;
      link[v]=lv;
      cnt[v]+=cnt[lv];
      q.push(v);
    }
  }
}
int aho(){
  int u=0;
  int ans=0;
  for(char ch:s){
    int x=ch-'a';
    while(u && !to[u][x])u=link[u];
    u=to[u][x];
    ans+=cnt[u];
  }
  return ans;
}
int nhay(string &t,string &p){
  int fi=0;
  for(int i=1;i<int(p.size());i++){
    while(fi-1>=0 && p[fi]!=p[i])fi=f[fi-1];
    if(p[fi]==p[i])fi++;
    f[i]=fi;
  }
  int i=0;
  int ans=0;
  for(char x:t){
    while(i-1>=0 && p[i]!=x)i=f[i-1];
    if(p[i]==x)i++;
    if(i==int(p.size()))ans++;
  }
  return ans;
}
int main(){
  int m,t;
  scanf("%d",&m);
  while(m--){
    scanf("%d %s",&t,buf);
    s=buf;
    if(t==1){
      add.push_back(s);
    }
    else if(t==2){
      rem.push_back(s);
    }
    else if(t==3){
      int ans=0;
      if(int(add.size()+rem.size())<=sq){
        for(string w:add)ans+=nhay(s,w);
        for(string w:rem)ans-=nhay(s,w);
      }
      else build();      
      ans+=aho();
      cout<<ans<<endl;
    }
  }
  return 0;
}
