#include <bits/stdc++.h>
#define fio ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ll int
#define en cin.close();return 0;
#define INF ((ll)(1e18))
#define N (ll)(998244353)
#define pb push_back
#define fi first//printf ("%lli\n",cur);
#define se second//scanf ("%lli",&n);
using namespace std;
struct tree
{
    ll csize = 0;//correct size
    ll open = 0;// '(' count
    ll closed = 0;// ')' count
}segt[(ll)(4e6)+2];
string str;
void constr(ll l, ll r, ll pos)
{
    if(l==r)
    {
        if(str[l]=='(')segt[pos].open++;
        else segt[pos].closed++;
    }
    else
    {
        ll mid = (l+r)/2;
        constr(l, mid, pos*2+1);
        constr(mid+1, r, pos*2+2);
        segt[pos].csize=segt[pos*2+1].csize+segt[pos*2+2].csize;
        ll mi = min(segt[pos*2+1].open, segt[pos*2+2].closed);
        segt[pos].open=segt[pos*2+1].open-mi+segt[pos*2+2].open;
        segt[pos].closed=segt[pos*2+2].closed-mi+segt[pos*2+1].closed;
        segt[pos].csize+=mi*2;
    }
}
tree gsum(ll bl, ll br, ll l, ll r, ll pos)
{
    if(r<bl||l>br)return {0, 0, 0};
    if(bl<=l&&r<=br)return segt[pos];
    ll mid=(l+r)/2;
    tree pth = gsum(bl, br, l, mid, pos*2+1);
    tree pth2 = gsum(bl, br, mid+1, r, pos*2+2);
    tree ret = {0, 0, 0};
    ret.csize=pth.csize+pth2.csize;
    ll mi = min(pth.open, pth2.closed);
    ret.csize+=mi*2;
    ret.open=pth2.open+pth.open-mi;
    ret.closed=pth.closed+pth2.closed-mi;
    return ret;
}
int main()
{
    fio
    //ifstream cin("in.inn");
    cin >> str;
    constr(0, str.size()-1, 0);
    //for(ll i = 0;i<5;i++)cout << segt[i].csize << "\n";en
    ll q;
    cin >> q;
    while(q--)
    {
        ll l, r;
        cin >> l >> r;l--, r--;
        tree res = gsum(l, r, 0, str.size()-1, 0);
        cout << res.csize << "\n";
    }
    //cin.close();
    return 0;
}
