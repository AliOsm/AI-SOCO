#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

ll read_long() {
    ll ans = 0;
    char c;
    bool started = false;
    bool is_negative = false;
    while (true) {
        c = getchar();
        if ((c < '0' || c > '9') && c != '-' && !started) continue;
        if ((c < '0' || c > '9') && c != '-' && started) break;
        if (started) {
            ans = ans * 10;
        }
        started = true;
        if (c == '-') is_negative = true;
        else ans += c - '0';
    }
    if (is_negative) ans *= -1;
    return ans;
}

int dp[2][27][111][111];
int a[111][111];
int n;

int calc(int hod, int last, int x, int y) {
    int &res = dp[hod][last][x][y];
    if (res != -1) return res;
    res = 0;
    if (hod == 0) {
        for (int i = 0; i < n; i++) {
            if (a[x][i] >= last) res |= !calc(1, a[x][i], i, y);
        }
    } else {
        for (int i = 0; i < n; i++) {
            if (a[y][i] >= last) res |= !calc(0, a[y][i], x, i);
        }
    }
    return res;
}

int get(int x, int y) {
    return calc(0, 1, x, y);
}

int main(){

    int m;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int x, y;
        char c;
        cin >> x >> y >> c;
        int cc = c - 'a' + 1;
        x--; y--;
        a[x][y] = cc;
    }

    memset(dp, -1, sizeof dp);

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (get(i, j)) printf("A");
            else printf("B");
        }
        printf("\n");
    }

    return 0;
}
