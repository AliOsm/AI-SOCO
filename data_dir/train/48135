#include <bits/stdc++.h>
using namespace std;

#define fr(i,n)    for(int i=0;i<n;i++)
#define fru(i,a,b) for(int i=a;i<=b;i++)
#define frd(i,a,b) for(int i=a;i>=b;i--)

typedef long long   ll;
typedef long double ld;
	
const int INF = 2e9 + 10;
const int MOD = 1e9 + 7;
const int N   = 1505;

int n, q;
string s;
unordered_map<int, int> mp[27];

int main() {
   ios_base::sync_with_stdio(0);
   cout.tie(0); cin.tie(0);
   
   cin >> n;
   cin >> s;
   cin >> q;
   
   fr(M, 27)
   {
      if(s.find(char(M + 'a')) == string::npos)
         continue;
         
      vector<pair<int, int>> vec;
      
      int le = 0;
      while(le < n)
      {
         if(s[le] != char(M + 'a'))
         {
            le++;
            continue;
         }
         
         int ri = le;
         while(ri < n && s[le] == s[ri])
            ri++;
         ri--;
         
         vec.push_back({le, ri});
         le = ri + 1;
      }
      
      mp[M][0] = vec[0].second - vec[0].first + 1;
      fr(i, (int)vec.size()) 
      {
         int consist = 0;
         fru(j, i + 1, (int)vec.size() - 1)
         {
            int dst = vec[j].first - vec[i].second - 1 - consist;
            int tot = vec[j].second - vec[i].first + 1;
            
            mp[M][0] = max(mp[M][0], vec[j].second - vec[j].first + 1);
            
            if(mp[M].count(dst) == 0)
               mp[M][dst] = tot;
            else
               mp[M][dst] = max(mp[M][dst], tot);
            
            consist += vec[j].second - vec[j].first + 1;
         } 
      }
   }
   
   fru(Q, 1, q)
   {
      int m; char c;
      cin >> m >> c;
      
      int ind = c - 'a';
      int ans = m;
      for(auto it = mp[ind].begin(); it != mp[ind].end(); it++)
      {
         if(it->first > m)
            continue;
         
         ans = max(ans, min(n, m - it->first + it->second));
      }
      cout << ans << "\n";
   }
   
   return 0;
}