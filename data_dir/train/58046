#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>
#include <complex>
#include <cassert>
#include <regex>
#include <random>

#define ll long long
#define ld long double
#define ull unsigned ll
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vector<int>>
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const int  Inf = 2 * 1000 * 1000 * 1000;
ll LINF = (ll)4e18;
using namespace std;
//ll mod = 1e9 + 7;
#define M_PI       3.14159265358979323846   // pi

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("domino-covering-1.in", "r", stdin);
	//freopen("domino-covering-1.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n;
	cin >> n;
	vector<pair<char, int>>a(n), b(n);

	map<char, vector<int>>pos1;
	map<char, vector<int>>pos2;

	vector<int>q1, q2;

	for (int i = 0; i < n; i++) {
		cin >> a[i].first;
		a[i].second = i;
		if (a[i].first != '?') pos1[a[i].first].push_back(i);
		else {
			q1.push_back(i);
		}
	}

	for (int i = 0; i < n; i++) {
		cin >> b[i].first;
		b[i].second = i;
		if (b[i].first != '?') pos2[b[i].first].push_back(i);
		else {
			q2.push_back(i);
		}
	}
	vector<pair<int, int>>ans;

	for (auto &x : pos1) {
		while (x.second.size() > 0U && pos2[x.first].size() > 0U) {
			ans.emplace_back(x.second.back(), pos2[x.first].back());
			x.second.pop_back();
			pos2[x.first].pop_back();
		}
	}
	vector<int>idx1, idx2;
	for (auto &x : pos1) {
		while (x.second.size()) {
			idx1.push_back(x.second.back());
			x.second.pop_back();
		}
	}

	for (auto &x : pos2) {
		while (x.second.size()) {
			idx2.push_back(x.second.back());
			x.second.pop_back();
		}
	}

	while (q1.size() > 0U) {
		if (idx2.size() > 0U) {
			ans.emplace_back(q1.back(), idx2.back());
			q1.pop_back();
			idx2.pop_back();
		}
		else if (q2.size() > 0U) {
			ans.emplace_back(q1.back(), q2.back());
			q1.pop_back();
			q2.pop_back();
		}
		else break;
	}

	while (q2.size() > 0U) {
		if (idx1.size() > 0U) {
			ans.emplace_back(idx1.back(), q2.back());
			q2.pop_back();
			idx1.pop_back();
		}
		else if (q1.size() > 0U) {
			ans.emplace_back(q1.back(), q2.back());
			q1.pop_back();
			q2.pop_back();
		}
		else break;
	}
	cout << ans.size() << '\n';
	for (auto &x : ans) cout << x.first + 1 << ' ' << x.second + 1 << '\n';
	return 0;
}