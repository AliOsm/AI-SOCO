#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

template<typename T>
using ordered_set = __gnu_pbds::tree<T, __gnu_pbds::null_type, less<T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>; // find_by_order(), order_of_key()
using ll = long long int;
using i64 = long long int;
#define all(vec) (vec).begin(),(vec).end()
template <typename T> inline void ckmax(T &x, T y) {if (y > x) x = y; }
template <typename T> inline void ckmin(T &x, T y) {if (y < x) x = y; }
#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
    cerr << *it << " =: " << a << endl;
    err(++it, args...);
}
template <typename T1, typename T2>
inline std::ostream& operator << (std::ostream& os, const std::pair<T1, T2>& buf) {
    return os << "(" << buf.first << ": " << buf.second << ")";
}
template<typename T>
inline std::ostream &operator << (std::ostream & os,const std::vector<T>& v) {
    bool first = true;
    os << "[";
    for(unsigned int i = 0; i < v.size(); i++) {
        if(!first) os << ", ";
        os << v[i];
        first = false;
    }
    return os << "]";
}
template<typename T>
inline std::ostream &operator << (std::ostream & os,const std::set<T>& v) {
    bool first = true;
    os << "{";
    for (typename std::set<T>::const_iterator ii = v.begin(); ii != v.end(); ++ii) {
        if(!first) os << ", ";
        os << *ii;
        first = false;
    }
    return os << "}";
}
template<typename T1, typename T2>
inline std::ostream &operator << (std::ostream & os,const std::map<T1, T2>& v) {
    bool first = true;
    os << "{";
    for (typename std::map<T1, T2>::const_iterator ii = v.begin(); ii != v.end(); ++ii) {
        if(!first) os << ", ";
        os << *ii ;
        first = false;
    }
    return os << "}";
}
template<typename T>
inline std::ostream &operator << (std::ostream & os,const vector<vector<T>>& v) {
    os << '\n';
    for (auto &u: v) os << u << '\n';
    return os;
}

const int MOD = 998244353;
const long long INF = 1e18;
const double EPS = 1e-6;
/***********************************************************************/

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    cin >> n;
    string s;
    cin >> s;
    vector<i64> a(n);
    for (auto &i: a) cin >> i;
    vector<vector<i64>> dp(n + 1, vector<i64>(4, 1000000000000000LL));
    for (int i = 0; i < 4; ++i) dp[0][i] = 0;
    for (int i = 1; i <= n; ++i) {
        dp[i][0] = dp[i - 1][0];
        if ('h' == s[i - 1]) dp[i][0] += a[i - 1];
    }
    for (int i = 1; i <= n; ++i) {
        dp[i][1] = dp[i - 1][1];
        if ('a' == s[i - 1]) {
            dp[i][1] = min(dp[i][1] + a[i - 1], dp[i][0]);
        }
    }
    for (int i = 1; i <= n; ++i) {
        dp[i][2] = dp[i - 1][2];
        if ('r' == s[i - 1]) {
            dp[i][2] = min(dp[i][2] + a[i - 1], dp[i][1]);
        }
    }
    for (int i = 1; i <= n; ++i) {
        dp[i][3] = dp[i - 1][3];
        if ('d' == s[i - 1]) {
            dp[i][3] = min(dp[i][3] + a[i - 1], dp[i][2]);
        }
    }
    cout << dp[n][3] << '\n';
    
    return 0;
}
