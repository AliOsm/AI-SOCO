#include <algorithm>
#include <iostream>
#include <iomanip>
#include <complex>
#include <cstring>
#include <cstdlib>
#include <string>
#include <vector>
#include <cstdio>
#include <cmath>
#include <map>
#include <set>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,102400000")

int n, m, k;
bool cover[301];
int linked[301][301];

int MAIN()
{
	vector <int> coverSet;
	memset(cover, false, sizeof(cover));
	cin >> n >> m >> k;
	
	for(int i = 1; i <= k; i ++)
	{
		int node;
		cin >> node;
		cover[node] = true;
		coverSet.push_back(node);
	}
	for(int i = 1; i <= n; i++)
		if(!cover[i])
			coverSet.push_back(i);

	if(k == n)
	{
		cout << "-1" << endl;
	}
	else
	{
		int c = 1;
		while(cover[c]) c ++;

		int a = 0, b = 0;
		while(coverSet[a] == c) a ++;
		while(coverSet[b] == coverSet[a] || coverSet[b] == c) b ++;
		a = coverSet[a];
		b = coverSet[b];
		memset(linked, false, sizeof(linked));
		int remain = m;
		linked[a][c] = 1, remain --;
		linked[b][c] = 1, remain --;
		for(int i = 1; i <= n; i++)
			if(i != a && i != b && i != c)
			{
				linked[i][a] = 1, remain --;
			}

		for(int i = 1; i <= n; i++)
			if(i != a && i != b && i != c)
			{
				if(remain > 0)
					linked[i][c] = 1, remain --;
				if(remain > 0 && cover[i] == false)
					linked[i][b] = 1, remain --;
				for(int j = 1; j < i; j++)
					if(j != a && j != b && j != c)
						if(remain > 0)
							linked[i][j] = 1, remain --;
			}		
		if(remain > 0)
			cout << -1 << endl;
		else
		{
			for(int i = 1; i <= n; i++)
				for(int j = 1; j <= n; j++)
					if(linked[i][j])
						cout << i << " " << j << endl;
		}

	}
	
	return 0;
}

int main()
{
	#ifdef LOCAL_TEST
		freopen("in.txt", "r", stdin);
		freopen("out.txt", "w", stdout);
	#endif
	ios :: sync_with_stdio(false);
	cout << fixed << setprecision(16);
	return MAIN();
}