#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define FILE "series"
#define ld long double
#define endl '\n'
#define pii pair <int, int>
//#define int long long

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

typedef tree <int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 5e2 + 5;
const int mod = 1e9 + 7;
const int rx[4] = {1, -1, 0, 0};
const int ry[4] = {0, 0, 1, -1};

char a[3][N];
vector <pair <int, pii>> all;
bool used[3][N], good[3][N];
pii pr[3][N];

bool check(int x, int y, int f) {
    if (x < 0 || x > 2) return 0;
    for (auto t : all) {
        int tx = t.F, tl = t.S.F, tr = t.S.S;
        if (tx == x) {
            tl -= 2 * y;
            tr -= 2 * y;
            tl += 2 * f;
            tr += 2 * f;
            if (tl <= y && y <= tr) return 0;
        }
    }
    return 1;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    srand(time(0));
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //   freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
#endif // LOCAL
    int t;
    cin >> t;
    while (t--) {
        int n, k;
        cin >> n >> k;
        int sx = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < n; j++) {
                cin >> a[i][j];
                if (a[i][j] == 's') {
                    sx = i;
                    a[i][j] = '.';
                }
            }
        }
        all.clear();
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < n; j++) {
                if (a[i][j] != '.') {
                    int pos = j + 1;
                    while (pos < n && a[i][pos] == a[i][j]) pos++;
                    all.pb({i, {j, pos - 1}});
                    for (int i1 = j; i1 < pos; i1++) a[i][i1] = '.';
                }
            }
        }
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j < 3; j++) {
                good[j][i] = 0;
                used[j][i] = 0;
                pr[j][i] = {-1, -1};
            }
        }
        good[sx][0] = 1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                if (good[j][i]) {
                    if (check(j, i + 1, 1)) {
                        if (check(j - 1, i + 1, 1) && check(j - 1, i + 1, 0)) {
                            good[j - 1][i + 1] = 1;
                        }
                        if (check(j + 1, i + 1, 1) && check(j + 1, i + 1, 0)) {
                            good[j + 1][i + 1] = 1;
                        }
                        if (check(j, i + 1, 0)) {
                            good[j][i + 1] = 1;
                        }
                    }
                }
            }
        }
        if (good[0][n] || good[1][n] || good[2][n]) cout << "YES";
        else cout << "NO";
        cout << endl;
    }
    return 0;
}
