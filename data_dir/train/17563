/*
author: madhav_1999 aka orthodoxparadox
23-Jul-2019
16:33:29
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define sz(x) ((long long) x.size())
#define pii pair<int, int>
#define fup(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define len(x) sz(x)
#define fnu for(ll i = 0; i < n; i++)
#define trav(x, v) for(auto &x : v)
#define rev(Y) reverse(all(Y))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#define inf 2e18
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef MADHAV
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...)
#endif
template <typename X> ostream& operator << (ostream& x,const vector<X>& v){for(int i=0;i<v.size();++i) x<<v[i]<<" ";return x;} 
template <typename X> ostream& operator << (ostream& x,const set<X>& v){for(auto it:v) x<<it<<" ";return x;} 
template <typename X, typename Y> ostream& operator << (ostream& x, const pair<X,Y>& v) {x<<v.ff<<" "<<v.ss;return x;} 
template <typename T, typename S> ostream& operator << (ostream& os, const map<T, S>& v) { for (auto it : v) os << it.first << "=>" << it.second << endl; return os; }
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int MOD = 1e9 + 7;

int takemod(int a, int mod = MOD){a%=mod;if(a<0)a+=mod;return a;}

int fast_exp(int base, int expo, int mod = MOD) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a, int mod = MOD){return takemod(fast_exp(takemod(a), mod-2, mod), mod);}

vector<int> v;
map<int, int> m;
const int N = 1040;


int dp[N][N];
int cnt[N];
int take[100010];
int choose[100010];


void generate_lucky()
{
	set<int> lucky;
	lucky.insert(4);
	lucky.insert(7);
	set<int> cur_lucky, new_lucky;
	cur_lucky.insert(4); cur_lucky.insert(7);
	while(true)
	{
		for(int i : cur_lucky)
		{
			new_lucky.insert(10*i + 4);
			new_lucky.insert(10*i + 7);
		}
		int sz = lucky.size();
		for(int i : new_lucky)
		{
			if(i <= 1000000000)
			{
				lucky.insert(i);
			}
		}
		if(sz == lucky.size()) break;
		cur_lucky = new_lucky;
	}
	v.pb(-1);
	int id = 1;
	for(int i : lucky)
	{
		v.pb(i);
		m[i] = id++;
	}
}




void initchoose(int n)
{
	choose[0] = 1;
	for(int i = 1; i < n; i++)
	{
		choose[i] = takemod(choose[i - 1] * takemod((n-(i - 1))* modinv(i)));
		dbg(i, n, choose[i]);
	}
	choose[n] = 1;
}


void solve()
{
	int n, k;
	cin >> n >> k;
	int a[n];
	for(int i = 0; i < n; i++) cin >> a[i];
	generate_lucky();
	int cntu = 0;
	for(int i = 0; i < n; i++)
	{
		if(m[a[i]] == 0) cntu++;
		else
		{
			cnt[m[a[i]]]++;
		}
	}
	initchoose(cntu);
	dp[0][0] = 1;
	for(int i = 1; i < N; i++)
	{
		for(int j = 0; j <= i; j++)
		{
			dp[i][j] = takemod(dp[i][j] + dp[i - 1][j]);
			dp[i][j] = takemod(dp[i][j] + takemod(cnt[i] * dp[i - 1][j - 1]));
			// dbg(i, j, dp[i][j]);
		}
	}
	for(int j = 0; j < N; j++)
	{
		take[j] = takemod(take[j] + dp[N - 1][j]);
	}
	int ans = 0;
	for(int i = 0; i <= k; i++)
	{
		ans = takemod(ans + takemod(choose[k - i] * take[i]));
	}
	cout << ans << endl;
}

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef MADHAV
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	clock_t t1, t2;
	t1 = clock();

	int t = 1;
	// cin >> t;
	while(t--)
	{
		solve();
	}
	t2 = clock(); cerr << "time taken: " << (t2-t1)/(dbl)CLOCKS_PER_SEC;
	return 0;
}