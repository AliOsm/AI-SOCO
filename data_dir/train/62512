#include <iostream>
#include <complex>
#include <vector>
#include <sstream>
#include <string>
#include <math.h>
#include <iomanip>
#include <algorithm>
#include <map>
#include <set>

using namespace std;

pair<long long, long long> f(long long x1, long long y1, long long x2, long long y2) {
	long long w = 0, b = 0;
	w += ((x2 - x1 + 2) / 2) * (y2 - y1 + 1);
	if ((x2 - x1 + 1) % 2 == 1) {
		w -= (y2 - y1 + 1) / 2;
	}
	b += ((x2 - x1 + 2) / 2) * (y2 - y1 + 1);
	if ((x2 - x1 + 1) % 2 == 1) {
		b -= (y2 - y1 + 2) / 2;
	}
	if (x1 % 2 == y1 % 2)
		return make_pair(w, b);
	else
		return make_pair(b, w);

}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);		

	int t;
	cin >> t;
	for (int i = 0; i < t; ++i) {
		long long n, k;
		cin >> n >> k;
		if (n >= 35) {
			cout << "YES " << n - 1 << '\n';
			continue;
		}
		vector<long long> m(n + 1, 0);
		m[0] = 0;
		m[1] = 1;
		int ans = -1;
		for (int j = 2; j <= n; ++j) {
			m[j] = 4 * m[j - 1] + 1;
			if (m[j] >= k - 1 && j != n) {
				ans = j;
				break;
			}
		}
		if (ans != -1) {
			cout << "YES " << n - 1 << '\n';
			continue;
		}
		if (m[n] < k) {
			cout << "NO\n";
			continue;
		}
		long long x = 1;
		int z = n;
		ans = -1;
		long long sum = 0;
		while (k >= x && z > 0) {
			k -= x;			
			--z;
			sum += 2 * (x - 1) * m[z] + m[z];
			if (sum >= k) {
				ans = z;
				break;
			}
			x = 2 * x + 1;			
		}
		if (ans == -1) {
			cout << "NO\n";
		}
		else {
			cout << "YES " << ans << '\n';
		}
	}
	return 0;
}