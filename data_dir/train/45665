

#include <bits/stdc++.h>
using namespace std;
typedef long long int lli;

string s; lli sl;
const int LOG = 20;
const int LEN = 1e6 + 5;
int score[LOG][LEN];
int depth = 0;

struct tuple
{
	int first , second , index;
	
	bool friend operator < ( tuple p , tuple q )
	{
		if ( p.first == q.first ) return p.second < q.second;
		return p.first < q.first;
	}
	
} L[LEN];

void buildSuffixArray()
{
	depth = 0;
	for ( int i=0 ; i<sl ; i++ )
		score[0][i] = s[i];
	
	for ( int step=1 , cnt=1 ; cnt<sl ; step++ , cnt*=2 )
	{
		for ( int i=0 ; i<sl ; i++ )
		{
			L[i].first  = score[step-1][i];
			L[i].second = i+cnt < sl ? score[step-1][i+cnt] : -1;
			L[i].index  = i;
		}
		sort( L , L + sl );
		
		int now = 0;
		score[step][ L[0].index ] = now;
		for ( int i=1 ; i<sl ; i++ )
		{
			if ( L[i].first != L[i-1].first || L[i].second != L[i-1].second )
				now++;
			score[step][ L[i].index ] = now;
		}
		
		depth = step;
	}
}

int lcp( int x , int y )
{
	if ( x == y ) return sl - x;
	int ret = 0;
	for ( int k=depth ; k>=0 && x<sl && y<sl ; k-- )  //  "&& x<sl && y<sl" is necessary !
	{
		if ( score[k][x] == score[k][y] )
		{
			int cnt = 1 << k;
			ret += cnt;
			x += cnt , y += cnt;
		}
	}
	return ret;
}

void printSuffixArray()
{
    cerr<<"Suffix Array : \n";
    for ( int i=0 ; i<sl ; i++ )
    {
        int x = L[i].index;
        cerr<<x<<"\t"<<s.substr( x )<<"\n";
    }
    cerr<<"\n";
}

int main()
{	
	cin>>s;
	sl = s.length();
	buildSuffixArray();
	// printSuffixArray();
	
	set<int> m;
	for ( int i=0 ; i<sl ; i++ ) m.insert( i );     // all indices are included
	
	int i = 0 , j = sl - 1;                         // move from top and bottom
	vector< pair<int,int> > v;
	for ( int len = 1,x,k=sl-1 ; len <= sl ; len++,k-- )    // k : index of suffix
    {
        while ( x=L[i].index , (lcp( x , 0 ) < len) ) { m.erase(x); i++; }      // if lcp < len go down
        while ( x=L[j].index , (lcp( x , 0 ) < len) ) { m.erase(x); j--; }      // if lcp < len go up
        
        // cerr<<len<<" "<<i<<" "<<j<<"\n";
        if ( m.find( k ) != m.end() )       // suffix index must be included
            v.push_back( make_pair( len , m.size() ) );
    }
    
    int vs = v.size();
    cout<<vs<<"\n";
    for ( int i=0 ; i<vs ; i++ )
        cout<<v[i].first<<" "<<v[i].second<<"\n";
	
	return 0;
}