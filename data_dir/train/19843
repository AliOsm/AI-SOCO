#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const int MAXN = 1005;
int N, M;
int grid[MAXN][MAXN];
map<int, int> mpR[MAXN];
map<int, int> mpC[MAXN];
int szR[MAXN];
int szC[MAXN];

int main()
{
    scanf("%d%d", &N, &M);
    for (int i = 0; i < N; i++)
        for (int j = 0; j < M; j++)
        {
            scanf("%d", &grid[i][j]);
            mpR[i][grid[i][j]] = 1;
            mpC[j][grid[i][j]] = 1;
        }

    for (int i = 0; i < N; i++)
        for (map<int, int>::iterator it = mpR[i].begin(); it != mpR[i].end(); it++)
            it->second = ++szR[i];
    for (int i = 0; i < M; i++)
        for (map<int, int>::iterator it = mpC[i].begin(); it != mpC[i].end(); it++)
            it->second = ++szC[i];

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            int r = mpR[i][grid[i][j]], c = mpC[j][grid[i][j]];
            if (r >= c)
                printf("%d ", max(szR[i], szC[j] + max(0, r - c)));
            else
                printf("%d ", max(szC[j], szR[i] + max(0, c - r)));
        }
        printf("\n");
    }

    return 0;
}
