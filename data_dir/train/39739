#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __,_______,_______, 
 * |\  \|\  \  |\  ___ \  |\  ___ \,
 * \ \  \/  /|_\ \   __/| \ \   __/|,
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *,\ \__\\ \__\\ \_______\\ \_______\
 *,\|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

struct PT {
	long long x, y;
	PT() :
		x(0), y(0) {
	}
	PT(long long _x, long long _y) :
		x(_x), y(_y) {
	}
	PT(const PT &p) :
		x(p.x), y(p.y) {
	}
	PT operator +(const PT &p) const {
		return PT(x + p.x, y + p.y);
	}
	PT operator -(const PT &p) const {
		return PT(x - p.x, y - p.y);
	}
	PT operator *(long long c) const {
		return PT(x * c, y * c);
	}
	bool operator<(const PT &p) const {
		return make_pair(x, y) < make_pair(p.x, p.y);
	}
};
long long dot(PT p, PT q) {
	return p.x * q.x + p.y * q.y;
}
long long dist2(PT p, PT q) {
	return dot(p - q, p - q);
}
long long cross(PT p, PT q) {
	return p.x * q.y - p.y * q.x;
}
istream &operator>>(istream &is, PT &p) {
	return is >> p.x >> p.y;
}
ostream &operator<<(ostream &os, const PT &p) {
	return os << "(" << p.x << "," << p.y << ")";
}
/*around the origin*/
PT RotateCCW90(PT p) {
	return PT(-p.y, p.x);
}
PT RotateCW90(PT p) {
	return PT(p.y, -p.x);
}

long long solve(vector<PT> & p, int l, int r) {
	if (l == r)
		return LLONG_MAX;
	if (l + 1 == r)
		return dist2(p[l], p[r]);
	int md = (l + r) >> 1;
	long long a = solve(p, l, md);
	long long b = solve(p, md + 1, r);
	long long res = min(a, b);
	vector<PT> L,R;
	for (int i = l; i <= r; i++) {
		if ((md - i) * (md - i) >= res)
			continue;
		if(i <= md) L.push_back(PT(p[i].y,p[i].x));
		else R.push_back(PT(p[i].y,p[i].x));
	}
	sort(L.begin(),L.end());
	sort(R.begin(),R.end());
	int st = 0,en = 0;
	for(auto lp : L) {
		while(st < (int)R.size() && R[st].x <= lp.x && dist2(R[st],lp) >= res) st++;
		en = max(en,st);
		while(en < (int)R.size() && (R[en].x <= lp.x || dist2(R[en],lp) < res)) en++;
		for(int i = st;i < en;i++) res = min(res,dist2(lp,R[i]));
	}
	return res;
}

int main(int argc, char** argv) {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	int N;
	long long s = 0, a;
	cin >> N;
	vector<PT> p(N);
	for (int i = 0; i < N; i++) {
		cin >> a;
		s += a;
		p[i].x = i;
		p[i].y = s;
	}
	cout << solve(p, 0, N - 1) << '\n';
	return 0;
}
