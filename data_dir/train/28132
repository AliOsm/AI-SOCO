#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 7;


int a[N][6], ans[6];



const int inf = 0x3f3f3f3f;

struct RMQ {
        vector <int> t;
        int n;
        void init(int x) { n = x;
                t.resize(n << 1);
        }
        RMQ() {
        }
        void build(int a[]) {
                for(int i = 0; i < n; i++) t[n + i] = a[i];
                for(int i = n - 1; i > 0; --i) t[i] = max(t[i << 1], t[i << 1 | 1]);
        }
        void modify(int p, int v) {
                for(t[p += n] = v; p > 1; p >>= 1) t[p >> 1] = max(t[p], t[p ^ 1]);
        }
        int query(int l, int r) { int res = 0;
                for(l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {
                        if(l & 1) res = max(res, t[l++]);
                        if(r & 1) res = max(res, t[--r]);
                }
                return res;
        }
};

int main() {
    ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int n, m, k; cin >> n >> m >> k;
    RMQ SegTree[m + 1];
    for(int i = 1; i <= m; i++) SegTree[i].init(n + 1);
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
            cin >> a[i][j];
            SegTree[j].modify(i, a[i][j]);
        }
    }
    int len = 0;

    for(int i = 1; i <= n; i++) {
        int l = i, r = n, pos = -1;
        while(l <= r) {
            int mid = (l + r) >> 1;
            int sum = 0;
            for(int j = 1; j <= m; j++) sum += SegTree[j].query(i, mid);
            if(sum <= k) pos = mid, l = mid + 1;
            else r = mid - 1;
        }
        if(pos >= i && (pos - i + 1) > len) {
            len = pos - i + 1;
            for(int j = 1; j <= m; j++) ans[j] = SegTree[j].query(i, pos);
        }
    }
    for(int i = 1; i <= m; i++) cout << ans[i] << " "; cout << endl;
}
