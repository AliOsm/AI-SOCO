#include <bits/stdc++.h>

using namespace std;

#define all(x) begin(x), end(x)

using ll = long long;
using ld = long double;
using pii = pair<int, int>;
using vi = vector<int>;

constexpr int MAXN = 3003;
int n;
vector<int> tree[MAXN];
int par[MAXN][MAXN];
int sub_sz[MAXN][MAXN];

int dfs_sz(int root, int u, int p) {
    sub_sz[root][u] = 1;
    for (int v : tree[u]) {
        if (v == p) continue;
        par[root][v] = u;
        sub_sz[root][u] += dfs_sz(root, v, u);
    }

    return sub_sz[root][u];
}

ll dp[MAXN][MAXN];
ll solve(int u, int v) {
    if (u == v) return 0;
    if (u > v) swap(u, v);
    ll& res = dp[u][v];
    if (res != -1) return res;
    int sz1 = sub_sz[v][u];
    int sz2 = sub_sz[u][v];
    return res = 1LL * sz1 * sz2 + max(solve(par[v][u], v), solve(u, par[u][v]));
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);

    cin >> n;
    for (int i = 1; i < n; ++i) {
        int u, v;
        cin >> u >> v;
        --u; --v;
        tree[u].push_back(v);
        tree[v].push_back(u);
    }

    for (int i = 0; i < n; ++i) {
        dfs_sz(i, i, -1);
    }

    memset(dp, -1, sizeof(dp));
    ll ans = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            ans = max(ans, solve(i, j));
        }
    }

    cout << ans << '\n';

    return 0;
}
