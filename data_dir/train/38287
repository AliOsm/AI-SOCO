///Bismillahir Rahmanir Rahim
#include<bits/stdc++.h>
#define int long long
#define M 1009
using namespace std;
int number_of_devices;
int device[2][M+2];
int par[2][2*M+2],dep[2][2*M+2],dp_lca[2][2*M+2][2*M+2];
int dp[2*M+2][2*M+2][2],dp_lvl[2][2*M+2];

int fnd_lvl(int tre,int node)
{
    if(node==1)return 0;
    if(dp_lvl[tre][node]!=(-1))return dp_lvl[tre][node];
    return dp_lvl[tre][node]=fnd_lvl(tre,par[tre][node])+1;
}
int fnd_lca(int tre,int p,int q)
{
    if(p==q)return p;
    if(fnd_lvl(tre,p)>fnd_lvl(tre,q))swap(p,q);
    if(dp_lca[tre][p][q]!=(-1))return dp_lca[tre][p][q];
    return dp_lca[tre][p][q]=fnd_lca(tre,p,par[tre][q]);
}

//state 1 : current device to process
//state 2 : previous un_used tree ar sathe connected last device
//state 3 : previous used tree

int solve(int cur,int un_ptlast,int pre)
{
    if(cur==number_of_devices+1)return 0;
    if(dp[cur][un_ptlast][pre]!=(-1))return dp[cur][un_ptlast][pre];
    int last[2];
    last[pre]=device[pre][cur-1];
    last[1-pre]=un_ptlast;
    int ret=INT_MAX;
    for(int i=0;i<=1;i++)
    {
        int nw_un_ptlast=last[1-i];
        int lca=fnd_lca(i,device[i][cur],last[i]);
        ret=min(ret,solve(cur+1,nw_un_ptlast,i)+fnd_lvl(i,device[i][cur])-fnd_lvl(i,lca));
    }
    return dp[cur][un_ptlast][pre]=ret;
}

main()
{

    cin>>number_of_devices;
    int ft,st;
    cin>>ft;
    for(int i=2;i<=ft;i++)
    {
        cin>>par[0][i];
        // mane i er parent holo par[0][i]
    }
    for(int i=1;i<=number_of_devices;i++)
    {
        cin>>device[0][i];
        // mane ith device first tree er kon noder sathe attached
    }
    cin>>st;
    for(int i=2;i<=st;i++)
    {
        cin>>par[1][i];
    }
    for(int i=1;i<=number_of_devices;i++)
    {
        cin>>device[1][i];
    }
    device[0][0]=1;device[1][0]=1;
    memset(dp_lvl,-1,sizeof dp_lvl);
    memset(dp_lca,-1,sizeof dp_lca);
    memset(dp,-1,sizeof dp);
    int ses=(ft-1)+(st-1)-solve(1,1,1);
    cout<<ses<<endl;
    return 0;
}
































