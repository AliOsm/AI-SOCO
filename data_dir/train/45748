#include <bits/stdc++.h>
using namespace std;
#define pii             pair<LL , LL >
#define inf             111111111111111111
#define in(a)           scanf("%lld", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%lld%lld", &a, &b)
#define in3(a, b, c)    scanf("%lld%lld%lld", &a, &b, &c)
#define pn              printf("\n")
#define pr(a)           printf("%lld\n", a)
#define prs(a)          printf("%lld ", a)
#define pr2(a, b)       printf("%lld %lld\n", a, b)
#define pr3(a, b, c)    printf("%lld %lld %lld\n", a, b, c)
#define pcs(a)          printf("Case %lld: ", a)
#define mp              make_pair
#define vi              vector<LL >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define mem(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
#define x               first
#define y               second
#define lc              (2*i)
#define rc              (2*i+1)

typedef long long LL;
//LL  dx[]={1,0,-1,0};LL dy[]={0,1,0,-1}; //4 Direction
//LL  dx[]={1,1,0,-1,-1,-1,0,1,0};LL dy[]={0,1,1,1,0,-1,-1,-1,0};//8 direction
//LL  dx[]={2,1,-1,-2,-2,-1,1,2};LL dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(LL n, LL pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//LL  on(LL n, LL pos) {return n | (1<<pos);} //typecast 1 in case of int
//LL  off(LL n, LL pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

const LL M = 100010;

vector < pii > xf, yf;
LL n, del;

pii rev(pii a)
{
    return mp(a.y, a.x);
}

LL inhere(pii a, vector < pii > &deleted, LL vis[])
{
    for (LL i = 0; i < deleted.size(); i++) if (!vis[i] && deleted[i] == a) return i;
    return -1;
}

LL processY(LL del, vector < pii > &deleted)
{
    LL i, j, k, l, r, vis[15];
    vector<pii>sh;
    mem(vis, false);

//    for (auto d : deleted) prr(d.x, d.y);pn;

    for (l = 0; l < min((LL)yf.size(), 50ll); l++)
    {
        k = inhere(rev(yf[l]), deleted, vis);

//        prr(rev(yf[l]).x, rev(yf[l]).y, k);

        if (k == -1) sh.pb(yf[l]);
        else vis[k] = 1;
    }
    for (r = yf.size()-1; r >= max(l, (LL)yf.size()-50); r--)
    {
        k = inhere(rev(yf[r]), deleted, vis);
        if (k == -1) sh.pb(yf[r]);
        else vis[k] = 1;
    }

    sort(all(sh));

//    prr("dy:", del, "sh_size:", sh.size());
//    for (auto d : sh) prr(d.x, d.y);pn;


    LL minn = inf;
    for (i = del, j = sh.size()-1; i >= 0; i--, j--)
    {
//        prr("--", i, j, (sh[j].x - sh[i].x + 1) / 2);
        minn = min(minn, (sh[j].x - sh[i].x + 1) / 2);
    }

    return max(minn, 1ll);
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("/home/riaz/Documents/in.txt", "r", stdin);
//    freopen("/home/riaz/Documents/in.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);

    LL i, j, k;
    LL a, b, c, d;

    in2(n, del);
    for (i = 0; i < n; i++)
    {
        in2(a, b);
        in2(c, d);
        xf.pb(mp(c+a, b+d));
        yf.pb(mp(b+d, c+a));
    }

    sort(all(xf));
    sort(all(yf));

//    for (auto a : xf) pr2(a.x, a.y);pn;
//    for (auto a : yf) pr2(a.x, a.y);pn;

    LL minn = max(1ll, ((xf.back().x-xf[0].x+1)/2) * ((yf.back().x-yf[0].x+1)/2));

    for (LL dx = 0; dx <= del; dx++)
    {
        LL dy = del - dx;

        for (i = dx, j = n - 1; i >= 0; i--, j--)
        {
            vector < pii > deleted;
            for (k = 0; k < i; k++) deleted.pb(xf[k]);
            for (k = j + 1; k < n; k++) deleted.pb(xf[k]);
            LL xx = max(1ll, (xf[j].x - xf[i].x + 1) / 2);
            LL yy = processY(dy, deleted);

            minn = min(minn, xx * yy);
//            prr(dx, i, j, dy, xx * yy);
        }
    }

    pr(minn);

return 0;
}

