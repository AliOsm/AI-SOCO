//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }

int main()
{
//    freopen("in.txt","r", stdin);
//    freopen("out.txt", "w", stdout);
    ios_base::sync_with_stdio(false);

    int n, l;
    cin >> n >> l;
    long long const INF = 1000000000000000000LL;
    vector<long long> a(31, INF);
    for(int i = 0; i < n; ++i)
        cin >> a[i];

    for(int i = 1; i < a.size(); ++i)
        a[i] = min(a[i - 1] * 2, a[i]);

    for(int i = a.size() - 1; i > 0; --i)
        a[i - 1] = min(a[i - 1], a[i]);

    int nmask = 1 << 16;

    vector<pair<long long, long long> > have;
    for(int mask = 0; mask < nmask; ++mask)
    {
        long long curw = 0;
        long long curc = 0;
        for(int i = 0; i < 16; ++i)
        {
            if (mask & (1 << i))
            {
                curw += 1 << i;
                curc += a[i];
            }
        }
        have.emplace_back(curw, curc);
    }

    sort(begin(have), end(have));
    for(int i = have.size() - 1; i > 0; --i)
    {
        have[i - 1].second = min(have[i - 1].second, have[i].second);
    }

    long long ans = INF;
    nmask = 1 << 15;
    for(int mask = 0; mask < nmask; ++mask)
    {
        long long curw = 0;
        long long curc = 0;
        for(int i = 0; i < 15; ++i)
        {
            if (mask & (1 << i))
            {
                curw += 1 << (i + 16);
                curc += a[i + 16];
            }
        }
        auto it = lower_bound(begin(have), end(have), make_pair(l - curw, 0LL));
        if (it != have.end())
        {
            ans = min(ans, it->second + curc);
        }
    }
    cout << ans << endl;
}
