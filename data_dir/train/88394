
// ~/BAU/ACM-ICPC/Teams/Rampage/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const int N = 5001;
const ll MOD = 1e9 + 7;
const double eps = 1e-8;

int n, m, s, idx[N], low[N], cnt, cmp[N], c, in[N];
bool vis[N];
vector<vector<int> > g;
vector<int> S;

void dfs(int u) {
	idx[u] = low[u] = ++cnt;
	vis[u] = 1;
	S.push_back(u);

	for (int i = 0; i < g[u].size(); i++) {
		if (idx[g[u][i]] == -1)
			dfs(g[u][i]);
		if (vis[g[u][i]])
			low[u] = min(low[u], low[g[u][i]]);
	}
	if (idx[u] == low[u]) {
		while (1) {
			int v = S.back();
			S.pop_back();
			cmp[v] = c;
			vis[v] = 0;
			if (v == u) break;
		}
		c++;
	}
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif
	
	scanf("%d%d%d", &n, &m, &s);
	g.resize(n);
	memset(idx, -1, sizeof idx);
	s--;
	for (int i = 0, a, b; i < m; i++) {
		scanf("%d%d", &a, &b);
		a--, b--;
		g[a].push_back(b);
	}
	for (int i = 0; i < n; i++)
		if (idx[i] == -1) 
			dfs(i);
		
	for (int i = 0; i < n; i++)
		for (int j = 0; j < g[i].size(); j++)
			if (cmp[i] != cmp[g[i][j]]) 
				in[cmp[g[i][j]]]++;

	int ans = 0;
	for (int i = 0; i < c; i++) 
		if (!in[i] && i != cmp[s])
			ans++;
	printf("%d\n", ans);

	return 0;
}