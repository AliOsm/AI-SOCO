#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>

const int MAX = 100;

int cnt[MAX], aux[MAX];

int d[MAX][MAX];

int main() {
	int n; scanf("%d", &n);
	REP(i, n)
		REP(j, 6) {
			int a;
			scanf("%d", &a);
			d[i][a]++;
		}
	
	int mx = 1;
	REP(i, n) mx *= 10;
	
	int ans = 0;
	for(int i = 1; i < mx; i++) {
		REP(j, 10) aux[j] = 0;
		int ii = i;
		int s = 0;
		while(ii != 0) aux[s++] = ii%10, ii /= 10;
		
		int p[3];
		REP(j, n) p[j] = j;
		bool possible = false;
		do {
			
			/*printf("B\n");
			REP(j, n) printf("%d%c", p[j], j == n - 1 ? '\n' : ' ');
			REP(j, n) printf("%d%c", aux[j], j == n - 1 ? '\n' : ' ');
			
			REP(j, n) REP(k, 10) printf("%d%c", d[j][k], k == 9 ? '\n' : ' ');*/
			
			bool q = true;
			REP(j, s) if(d[p[j]][aux[j]] == 0) q = false;
			if(q) {
				possible = true;
				break;
			}
		}
		while(next_permutation(p, p + n));
		if(!possible) break;
		ans++;
	}
	printf("%d\n", ans);
}