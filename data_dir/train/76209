#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <functional>
#include <iomanip>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <hash_set>
#include <hash_map>
#include <algorithm>

//define NDEBUG
#include <cassert>

#define FILE_READER assert(freopen("input.txt", "r", stdin)); assert(freopen("output.txt", "w", stdout));
#define FAST_READER ios::sync_with_stdio(false); cin.tie(nullptr);
#define all_(v) (v).begin(), (v).end()
#define for_(i, a, b) for (int i = (a); i < (int)(b); i++)
#define ford_(i, a, b) for (int i = (a); i > (int)(b); i--)
#define foreach_(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)
#define sz_(v) ((int)(v).size())
#define mp_ make_pair
#define pb_ push_back
typedef long long LL_;
typedef long double LD_;
template<class T> T sqr_(T a) {return a * a;}
template<class T> T abs_(T a) {return a > 0 ? a : -a;}
template<class T> T sgn_(T a) {return a > 0 ? 1 : (a < 0 ? -1 : 0);}

using namespace std;

int main() {

#ifndef ONLINE_JUDGE 
	FILE_READER 
#endif 	
	
	FAST_READER;
	
	int n, m;
	cin >> n >> m;
	vector<string> v(n);
	for_(i,0 ,n) {
		cin >> ws >> v[i];
	}
	vector<int> buf(max(m, n));
	vector<int> vert(m);
	bool flag[2][2];
	for_(j, 0, m) {
		for_(i,0,n){
			if(v[i][j] == '2' || v[i][j] == '3') {
				buf[i] = 0;
			} else 
			if (v[i][j] == '.') {
				buf[i] = 2;
			} else {
				buf[i] = 1;
			}
		}
		memset(flag, 0, sizeof(flag));
		for_(i,0,n) {
			if (buf[i] != 2) {
				flag[buf[i]][i&1] = true;
			}
		}
		if (flag[0][0] && flag[0][1] || flag[1][0] && flag[1][1] || flag[0][0] && flag[1][0] || flag[0][1] && flag[1][1]) {
			vert[j] = 0;
		} else
		if (flag[0][0] || flag[0][1] || flag[1][0] || flag[1][1]) {
			vert[j] = 1;
		} else {
			vert[j] = 2;
		}
	}
	vector<int> hor(n);
	for_(i,0,n) {
		for_(j,0,m){
			if(v[i][j] == '2' || v[i][j] == '1') {
				buf[j] = 0;
			} else 
			if (v[i][j] == '.') {
				buf[j] = 2;
			} else {
				buf[j] = 1;
			}
		}
		memset(flag, 0, sizeof(flag));
		for_(j,0,m){
			if(buf[j]!=2){
				flag[buf[j]][j&1]=true;
			}
		}
		if (flag[0][0] && flag[0][1] || flag[1][0] && flag[1][1] || flag[0][0] && flag[1][0] || flag[0][1] && flag[1][1]) {
			hor[i] = 0;
		} else
		if (flag[0][0] || flag[0][1] || flag[1][0] || flag[1][1]) {
			hor[i] = 1;
		} else {
			hor[i] = 2;
		}
	}
	const int mod = (int)1e6 + 3;
	int answer = 1;
	for_(i,0,n){
		answer = (answer * hor[i]) % mod;
	}
	for_(j,0,m){
		answer = (answer * vert[j]) % mod;
	}
	cout << answer;
	return 0;
}