#include<bits/stdc++.h> 
#include <bitset>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#include <chrono>
#include <random>
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define MOD 1000000007
#define MOD2 1000000009
#define INF 2000000000
#define DESPACITO 1000000000000000000
#define PI acos(-1)
#define E 998244853
#define pb push_back
#define mp make_pair
#define double long double
#define pdd pair<double,double>
#define ll long long
 
using namespace std;
//using namespace __gnu_pbds;
 
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;

ll sum[4000001],lazy[4000001];
int n,w;
vector<int>vals[1000001];
multiset<int>values;

void updateRange(int node,int start,int end,int l,int r,ll val)
{
	if(start>end or l>r or start>r or end<l)
		return;
	if(lazy[node])
	{
		sum[node]+=(end-start+1)*lazy[node];
		if(start!=end)
		{
			lazy[2*node]+=lazy[node];
			lazy[2*node+1]+=lazy[node];
		}
		lazy[node]=0;
	}
	if(start>=l && end<=r)
	{
		sum[node]+=(end-start+1)*val;
		if(start!=end)
		{
			lazy[2*node]+=val;
			lazy[2*node+1]+=val;
		}
		return;
	}
	int mid=(start+end)/2;
	updateRange(2*node,start,mid,l,r,val);
	updateRange(2*node+1,mid+1,end,l,r,val);
	sum[node]=sum[2*node]+sum[2*node+1];
}

ll queryRange(int node,int start,int end,int l,int r)
{
	if(start>end or start>r or end<l or l>r)
		return 0;
	if(lazy[node])
	{
		sum[node]+=(end-start+1)*lazy[node];
		if(start!=end)
		{
			lazy[2*node]+=lazy[node];
			lazy[2*node+1]+=lazy[node];
		}
		lazy[node]=0;
	}
	if(start>=l && end<=r)
		return sum[node];
	int mid=(start+end)/2;
	ll p=queryRange(2*node,start,mid,l,r);
	ll q=queryRange(2*node+1,mid+1,end,l,r);
	return (p+q);
}

int main()
{
	IOS;
	#ifndef ONLINE_JUDGE
		freopen("input.txt","r",stdin);
		freopen("output.txt","w",stdout);
	#endif
	cin >> n >> w;	
	REP(i,1,n)
	{
		int x;
		cin >> x;
		vals[i].pb(0);
		REP(j,1,x)
		{
			int v;
			cin >> v;
			vals[i].pb(v);
		}
	}
	REP(i,1,n)
	{
		int sz=vals[i].size()-1;
		values.clear();
		int l=0;
		values.insert(0);
		REP(j,1,sz)
		{
			values.insert(vals[i][j]);
			while(j+(sz-l)>w)
			{
				values.erase(values.find(vals[i][l]));
				l++;
			}
			updateRange(1,1,w,j,j,(*values.rbegin()));
		}
		ll mn=(*values.rbegin());
		mn=max(mn,0);
		int pos=l+(w-sz);
		updateRange(1,1,w,sz+1,pos,mn);
		REP(j,max(sz+1,pos+1),w)
		{
			while(j+(sz-l)>w)
			{
				values.erase(values.find(vals[i][l]));
				l++;
			}
			ll mx=max((*values.rbegin()),0);
			updateRange(1,1,w,j,j,mx);
		}
	}
	REP(i,1,w)
		cout << queryRange(1,1,w,i,i) << " ";
}	