#include <bits/stdc++.h>
using namespace std;

#define mt make_tuple
#define mkp make_pair
#define pb push_back
#define pii pair<ll,ll>
#define pss pair<string,string>
#define pdd pair<ld,ld>
#define pff pair<float,float>
#define piii pair<ll, pair<ll,ll> >
#define pddd pair<ld, pair<ld,ld> >
#define ff first
#define ss second
typedef long long int ll;
typedef long double ld;





const int N = 2 * 100000 + 5;
const ll MOD = 1000000007;


typedef tuple<ll, ll, ll> tt;

int main() {
    int n, m;
    cin >> n >> m;
    pii ms[N];
    vector<tt> st;
    set<tt> kek;
    set<pii> most;
    for(int i = 0; i < n; i++)
        cin >> ms[i].ff >> ms[i].ss;
    for(int i = 0; i < n - 1; i++) {
        ll mini = ms[i + 1].ff - ms[i].ss;
        ll maxi = ms[i + 1].ss - ms[i].ff;
        st.pb(mt(mini, maxi, i));
    }
    sort(st.begin(), st.end());

    int ans[N];
    fill(ans, ans + N, -1);

    for(int i = 0; i < m; i++) {
        ll z;
        cin >> z;
        most.insert(mkp(z, i));
    }

    int z = 0;
    int cnt = n - 1;
    for(auto it : most) {
        while(z < st.size() && get<0>(st[z]) <= it.ff) {
            kek.insert(mt(get<1>(st[z]), get<0>(st[z]), get<2>(st[z])));
            z++;
        }
        if(kek.size() == 0) continue;
        tt ank = *kek.begin();
        if(get<0>(ank) >= it.ff) {
            ans[get<2>(ank)] = it.ss;
            kek.erase(ank);
            cnt--;
            if(cnt == 0)
                break;
        } else {
            cout << "No";
            return 0;
        }
    }

    if(cnt) {
        cout << "No";
        return 0;
    }

    cout << "Yes\n";
    for(int i = 0; i < n - 1; i++)
        cout << ans[i] + 1 << " ";
}








