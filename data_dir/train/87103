#include<bits/stdc++.h>
using namespace std;

#define ll long long

#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) memset(ar, val, sizeof(ar))
#define fill0(ar) fill((ar), 0)
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef pair<ll, ll> ii;
typedef pair<ii, ll> iii;
typedef vector<ii> vii;
typedef vector<ll> vi;

#define INF 1000000000000000000
#define PI 3.14159265358979323846L

vector<ll> ed[400001];
vector<ll> arr;
pair<ll, ll> ran[400001];
ll timer = 1;
ll tre[3200001];
ll lazy[3200001];

void DFS(ll src, ll par)
{
	arr.pb(src);
	ran[src].ff = timer;
	timer++;

	rep(i,ed[src].size())
	{
		if(ed[src][i]!=par)
		{
			DFS(ed[src][i],src);
		}
	}

	arr.pb(src);
	ran[src].ss = timer;
	timer++;
}

void updateRange(ll node, ll start, ll end, ll l, ll r, ll val)
{
    if(lazy[node] != 0)
    { 
        // This node needs to be updated
        tre[node] = lazy[node];    // Update it
        if(start != end)
        {
            lazy[node*2] = lazy[node];                  // Mark child as lazy
            lazy[node*2+1] = lazy[node];                // Mark child as lazy
        }
        lazy[node] = 0;                                  // Reset it
    }
    if(start > end or start > r or end < l)              // Current segment is not within range [l, r]
        return;
    if(start >= l and end <= r)
    {
        // Segment is fully within range
        tre[node] = val;
        if(start != end)
        {
            // Not leaf node
            lazy[node*2] = val;
            lazy[node*2+1] = val;
        }
        return;
    }
    ll mid = (start + end) / 2;
    updateRange(node*2, start, mid, l, r, val);        // Updating left child
    updateRange(node*2 + 1, mid + 1, end, l, r, val);   // Updating right child
    tre[node] = (tre[node*2] | tre[node*2+1]);        // Updating root with max value 
}

ll queryRange(ll node, ll start, ll end, ll l, ll r)
{
    if(start > end or start > r or end < l)
        return 0;         // Out of range
    if(lazy[node] != 0)
    {
        // This node needs to be updated
        tre[node] = lazy[node];            // Update it
        if(start != end)
        {
            lazy[node*2] = lazy[node];         // Mark child as lazy
            lazy[node*2+1] = lazy[node];    // Mark child as lazy
        }
        lazy[node] = 0;                 // Reset it
    }
    if(start >= l and end <= r)             // Current segment is totally within range [l, r]
        return tre[node];
    ll mid = (start + end) / 2;
    ll p1 = queryRange(node*2, start, mid, l, r);         // Query left child
    ll p2 = queryRange(node*2 + 1, mid + 1, end, l, r); // Query right child
    return (p1 | p2);
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll n,m;
    cin >> n >> m;

    ll c[n];
    rep(i,n)
    {
    	cin >> c[i];
    }

    rep(i,n-1)
    {
    	ll x,y;
    	cin >> x >> y;
    	ed[x].pb(y);
    	ed[y].pb(x);
    }

    DFS(1,0);

    ll x = arr.size();
    rep(i,arr.size())
    {
    	updateRange(1,1,x,i+1,i+1,((1ll<<c[arr[i]-1])));
    }

    while(m--)
    {
    	ll t;
    	cin >> t;

    	if(t==1)
    	{
    		ll v,c1;
    		cin >> v >> c1;

    		updateRange(1,1,x,ran[v].ff,ran[v].ss,(1ll<<c1));
    	}
    	else
    	{
    		ll v;
    		cin >> v;

    		ll num = queryRange(1,1,x,ran[v].ff,ran[v].ss);
    		ll ans = 0;
    		while(num!=0)
    		{
    			if(num%2==1)
    				ans++;
    			num = num/2;
    		}

    		cout << ans << endl;
    	}
    }
}
