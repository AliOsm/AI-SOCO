///https://www.youtube.com/watch?v=9eAkWlZQBH4&list=RD9eAkWlZQBH4&start_radio=1
#include<bits/stdc++.h>

using namespace std;
#define ll long long
#define dbug printf("I am here\n");
#define fast ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
const int maxn = 2e5+100;

const ll inf = 1e18;
vector < int > roots , G[maxn];
map< string , int > mp;
vector < pair < int , int > > que[maxn];
#define ss second
#define ff first
int n , m;
int ara[maxn] , L[maxn] , answer[maxn];
void dfs(int node , int deep){
    L[node] = deep;
    for(auto i : G[node]){
        dfs(i , deep+1);
    }
}

void dsu(int node , map < int , set < int > > &g){
    g[L[node]].insert(ara[node]);
    for(auto i : G[node]){
        map < int , set < int > > s;
        dsu(i , s);
        if(s.size() > g.size())swap(g,s);
        for(auto it : s){
            g[it.ff].insert(it.ss.begin() , it.ss.end());
        }
    }
    for(auto i : que[node]){
        answer[i.ss] = g[i.ff].size();
    }
}

int main()
{
    fast;
    cin >> n;
    for(int i = 1; i<=n; i++){
        string s;  int p;
        cin >> s >> p;
        static int id = 0;
        if(mp[s] == 0)mp[s] = ++id;
        ara[i] = mp[s];
        if(p == 0)roots.push_back(i);
        else G[p].push_back(i);
    }
    for(auto i : roots)dfs(i,0);
    cin >> m;
    for(int i = 1; i<=m; i++){
        int v , k;
        cin >> v >> k;
        int lev = L[v] + k;
        que[v].push_back(make_pair(lev,i));
    }
    map < int , set < int > > g;
    for(auto i : roots){
        dsu(i , g);
        g.clear();
    }
    for(int i = 1; i<=m; i++)cout << answer[i] << " ";
    return 0;
}
/*



*/

