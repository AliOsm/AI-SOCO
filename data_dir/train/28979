#include<bits/stdc++.h>

using namespace std;

int const N = 1e5+5, W = 2e6;

int n, q, a[N], ans[N], prof[N];
unordered_map<int,int> pos;
vector<int> adj[N], prime;
stack<int> stk[150000];
bitset <W+5> mrk;

void dfs(int v, int par){
  ans[v] = -1;
  vector<int> vec;
  
  int x = a[v];
  
  for(int i = 0; i < prime.size() && (long long)(prime[i]*prime[i]) <= x; i++){
    
    if(x % prime[i] == 0){
      
      while(x % prime[i] == 0) x /= prime[i];
      
      int id = pos[prime[i]];
      
      vec.push_back(id);
      
      if(!stk[id].empty()){
        int Top = stk[id].top();
        if(ans[v] == -1 || prof[Top] > prof[ans[v]]) ans[v] = Top;
      }
      
      stk[id].push(v);
      
    }
    
  }
  
  if(x > 1){
    
    int id = pos[x];
    
    vec.push_back(id);
    
    if(!stk[id].empty()){
      int Top = stk[id].top();
      if(ans[v] == -1 || prof[Top] > prof[ans[v]]) ans[v] = Top;
    }
    
    stk[id].push(v);
    
  }
  
  for(auto i: adj[v])
   if(i != par) prof[i] = prof[v]+1, dfs(i,v);
  
  for(auto i: vec)
   stk[i].pop();
  
}

int main(){
  
  cin.sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  
  mrk[1] = true;
  for(long long i = 2; i*i <= W; i++)
   for(int j = i*i; j <= W; j += i)
    mrk[j] = true;
  
  for(int i = 1; i <= W; i++)
   if(!mrk[i])
    prime.push_back(i), pos[i] = prime.size()-1;
  
  cin >> n >> q;
  for(int i = 1; i <= n; i++) cin >> a[i];
  for(int i = 1; i <= n-1; i++){
    int u, v;
    cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  
  dfs(1,1);
  
  while(q--){
    int type, v, x;
    cin >> type >> v;
    if(type == 1) cout << ans[v] << '\n';
    if(type == 2){
      cin >> x;
      a[v] = x;
      dfs(1,1);
    }
  }
  
  return 0;
    
}
