//This Time Fire Is Different

#include<bits/stdc++.h>
using namespace std;

#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
#define ll long long
#define ld long double
#define pb push_back
#define fe first
#define se second
#define nl "\n"
#define pp pair < ll , ll > 
#define sz(x) (ll)x.size()
#define st(x) sort(x.begin(),x.end())
#define rst(x) sort(x.rbegin(), x.rend())
#define all(x) x.begin(),x.end()
long double pi = 3.14159265358979323;
 
const double EPS = 1e-12;
const int N = 1e6 + 5;
const int mod = 1e9 + 7;
 
 
 
 
int main()
{
    fast;
    ll n ,k;
    cin >> n >> k ;
    vector < ll > m(n);
    for(int i = 0 ; i < n ;i++ ){
            cin >> m[i];  
    }
    ll c[k+1];
    for(int i = 1 ; i <= k ;i++ ){
            cin >> c[i];  
    }

    rst(m);
    ll sum = 0 ;
    vector < ll > ans[n+1];
    ll tc = 0 ;
    vector < ll > v;
    set < pair < ll , ll >  > s;
    //s.insert({-1,0});
    for(int i = 0 ; i < n ;i++ ){
            //sum++;
           // ans[tc].pb(m[i]);
            //mp[tc]++;
            if(s.empty()){
                tc++;
                ans[tc].pb(m[i]);
               //cout << m[i] << " " << sz(ans[tc]) << "\n";
               // ll val = ans[tc].back();
                //ans[tc].pop_back();
                s.insert({sz(ans[tc]),tc});}
            else{
                auto itr = s.begin();

            
            //}
            //auto itr = s.begin();
            if(c[m[i]] <= itr -> fe){   
                tc++;
                ans[tc].pb(m[i]);
               //cout << m[i] << " " << sz(ans[tc]) << "\n";
               // ll val = ans[tc].back();
                //ans[tc].pop_back();
                s.insert({sz(ans[tc]),tc});}
                else{
                    // itr = s.begin();
                    ans[itr -> se].pb(m[i]);
                    s.insert({sz(ans[itr -> se]),itr->se});
                    s.erase(itr);
                }
            }
                //cout << sz(ans[tc]) << "\n";
              //  mp[tc]--;

                /*if(s.empty()){
                    ans[++tc].pb(m[i]);
                    s.insert({1,tc});
                    continue;
                }*/
                /*auto itr = s.lower_bound({c[m[i]],-1});

                auto itrr = itr;
                itrr--;
                //if(itrr ==  s.end())cout << "dkf";
               // cout << 
                //cout << s.size() << " ";
                //cout << itr -> fe << " ";
                //cout << itrr -> fe << " ";
                if(itrr -> fe != -1){
                   // cout << "lkdf";
                    ll tst = itrr -> se;

                    ans[itrr -> se].pb(m[i]);
                    //auto itrr = s.begin();
                    //itrr--;
                    s.erase(itrr);
                    s.insert({sz(ans[tst]),tst});
                }
                else{
                    //cout << "hello";
                    ans[++tc].pb(m[i]);
                }*/
                //s.insert({mp[tc],tc});
                //ans[tc++] = v;
                //v.clear();
                //v.pb(val);
                //sum = 1;
          //  }      
    }

    //ans[tc++] = v;

    cout << tc << "\n";

    for(int i = 1 ; i <= tc ; i++ ){
            cout << sz(ans[i]) << " ";
            for(auto it : ans[i])cout << it << " ";
                cout << "\n"; 
    }   




    





















    
    return 0;
    
}