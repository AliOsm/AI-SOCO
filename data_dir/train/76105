#include <bits/stdc++.h>
#define mp make_pair
#define f first
#define s second
using namespace std;
const int N = 1001;
int parent[N], n,m;
void makeSet() {
    for(int i = 1;i<=n;i++)
        parent[i] = i;
}

int findParent(int x) {
    if(x == parent[x])
        return x;
    return parent[x] = findParent(parent[x]);
}

void mergeSet(int x,int y) {
    int px = findParent(x), py = findParent(y);
    if(px == py)
        return;
    parent[px] = py;
}

typedef pair<int,int> pii;
typedef pair<int,pii> piii;
vector <vector < piii> >adjList(N);
vector <pii> edges;
bool check(int st, int e) {
    if(e < st)
        return false;
    makeSet();
    for(int i = 1;i<=n;i++) {
        for(piii p : adjList[i]) {
            if(p.s.f <= st && p.s.s >= e)
                mergeSet(i,p.f);
        }
    }
    if(findParent(1) == findParent(n))
        return true;
    return false;
}
int main()
{
    scanf("%d %d",&n,&m);
    vector<int> lf,rr;
    for(int i = 0;i<m;i++) {
        int x,y,l,r;
        scanf("%d%d%d%d",&x,&y,&l,&r);
        adjList[x].push_back(mp(y,mp(l,r)));
        adjList[y].push_back(mp(x,mp(l,r)));
        lf.push_back(l);
        rr.push_back(r);
    }
    sort(lf.begin(),lf.end());
    sort(rr.begin(),rr.end());
    int ans = 0;
    for(int s : lf) {
        int left = 0, right = rr.size()-1, currAns = 0;
        while(left <= right) {
            int mid = (left+right)/2;
            if(check(s,rr[mid])) {
                currAns = rr[mid]-s+1;
                left = mid+1;
            } else {
                right = mid-1;
            }
        }
        ans = max(ans,currAns);

    }
    if(ans)
        printf("%d",ans);
    else
        printf("Nice work, Dima!");
    return 0;
}
