#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <iterator>
#include <cmath>
#include <set>
#include <deque> 
#include <string>


using namespace std;

struct Section
{
	int operLeft;
	
	int minNum;
	int maxNum;
};

Section secA, secB;

int n;
char s[200010];

void secCopy(Section &a, const Section &b)
{
	a.maxNum = b.maxNum;
	a.minNum = b.minNum;
	a.operLeft = b.operLeft;
}

void doHead(Section &s, int &aTimes)
{
	if (s.operLeft <= aTimes)
	{
		s.minNum = s.minNum + 9 * s.operLeft;
		aTimes = aTimes - s.operLeft;
		s.operLeft = 0;
	}
	else
	{
		s.minNum = s.minNum + 9 * aTimes;
		s.operLeft = s.operLeft - aTimes;
		aTimes = 0;
	}
}

void doTail(Section &s, int &aTimes)
{
	if (s.operLeft <= aTimes)
	{
		s.maxNum = s.maxNum - 9 * s.operLeft;
		aTimes = aTimes - s.operLeft;
		s.operLeft = 0;
	}
	else
	{
		s.maxNum = s.maxNum - 9 * aTimes;
		s.operLeft = s.operLeft - aTimes;
		aTimes = 0;
	}
}


int main()
{
	scanf("%d\n", &n);
	scanf("%s\n", s);
	
	secA.minNum = 0;
	secA.maxNum = 0;
	secA.operLeft = 0;
	for (int i = 0 ; i < n / 2 ; i++)
	{
		if (s[i] == '?') {
			secA.operLeft++;			
		} else {
			secA.minNum = secA.minNum + s[i] - '0';
		}
	}
	secA.maxNum = secA.minNum + 9 * secA.operLeft;

	secB.minNum = 0;
	secB.maxNum = 0;
	secB.operLeft = 0;
	for (int i = n / 2 ; i < n ; i++)
	{
		if (s[i] == '?') {
			secB.operLeft++;			
		} else {
			secB.minNum = secB.minNum + s[i] - '0';
		}
	}
	secB.maxNum = secB.minNum + 9 * secB.operLeft;
	
	int totalOps = secA.operLeft + secB.operLeft;
	
	int aTimes, bTimes;
	aTimes = totalOps / 2 + totalOps % 2;
	bTimes = totalOps / 2;
	
	if ((secA.minNum > secB.minNum) || ((secA.minNum == secB.minNum) && (secA.maxNum < secB.maxNum)))
	{
		Section temp;
		temp.maxNum = secA.maxNum;
		temp.minNum = secA.minNum;
		temp.operLeft = secA.operLeft;
		
		secA.maxNum = secB.maxNum;
		secA.minNum = secB.minNum;
		secA.operLeft = secB.operLeft;
		
		secB.maxNum = temp.maxNum;
		secB.minNum = temp.minNum;
		secB.operLeft = temp.operLeft;
	}

	Section sA, sB;
	int tempTimes;
	//策略1，移动末尾 
	secCopy(sA, secA);
	secCopy(sB, secB);
	tempTimes = aTimes;
	doHead(sB, tempTimes);
	doTail(sA, tempTimes);
	if (sA.maxNum < sB.minNum)
	{
		printf("Monocarp\n");
		return 0;
	}
	
	//策略2，移动头 
	secCopy(sA, secA);
	secCopy(sB, secB);
	tempTimes = aTimes;
	doHead(sA, tempTimes);	
	doTail(sB, tempTimes);
	if (sA.minNum > sB.maxNum)
	{
		printf("Monocarp\n");
		return 0;
	}
	
	printf("Bicarp\n");
	
	return 0;
}
