
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = 3500;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int N, M;
int dist[3001][3001];
int was[3001];
vector<int> adj[3001];
int S[3];
int T[3];
int L[3];
int dijkstra(int from)
{
  rep(i,3001) dist[from][i] = INF;
  dist[from][from] = 0;
  priority_queue< pair<int,int> > pq;
  pq.push( mp( -0, from ) );
  clr(was);
  while (!pq.empty())
  {
    int u = pq.top().second;
    pq.pop();
    if (was[u]) continue;
    was[u] = 1;
    rep(i,sz(adj[u]))
    {
      int v = adj[u][i];
      int alt = dist[from][u] + 1;
      if (alt < dist[from][v])
      {
        dist[from][v] = alt;
        pq.push( mp( -alt, v ) );
      }
    }
  }
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  cin >> N >> M;
  rep1(i,M)
  {
    int a, b;
    cin >> a >> b;
    adj[a].pb(b);
    adj[b].pb(a);
  }
  rep1(i,N) dijkstra(i);
//  rep1(i,N) rep1(j,N) cout << dist[i][j] << (j+1<=N?' ':'\n') ;
  rep1(i,2) cin >> S[i] >> T[i] >> L[i];
  int best = -1;
  rep1(hello,2)
  {
    swap(S[1],T[1]);
    rep1(u,N) rep1(v,N)
    {
      int tot = 0;
      int okay = 1;
      rep1(i,2)
      {
        // S[i] -> u
        // u -> v
        // v -> T[i]
        tot += dist[S[i]][u];
        tot += dist[v][T[i]];
        ll len= 0;
        len += dist[S[i]][u];
        len += dist[u][v];
        len += dist[v][T[i]];
        if (len > L[i])
          okay = 0;
      }
      //    if (u == 3 && v == 3)
      //    {
      //      db(tot);
      //      db(okay);
      //    }
      if (!okay) continue;
      tot += dist[u][v];
      if (tot < INF)
      {
        best = max(best,M - tot);
      }
    }
  }
  int okay = 1;
  rep1(i,2)
  okay &= (dist[S[i]][T[i]] <= L[i]);
  if (okay)
  {
    int sum = 0;
    rep1(i,2) 
    sum += dist[S[i]][T[i]];
    best = max(best, M - sum);
  }
  
  cout << best << endl;
}
