#include<bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
int n, deep[N], tin[N], tout[N], lp[N][20], t, pr[N];
vector < int > g[N], a[N];

void dfs(int x, int p){
    tin[x] = ++t;
    deep[x] = deep[p] + 1;
    a[deep[x]].push_back(tin[x]);
    lp[x][0] = p;
    for (int i = 1; i < 20; ++i){
        lp[x][i] = lp[lp[x][i - 1]][i - 1];
    }
    for (int i = 0; i < g[x].size(); ++i){
        int y = g[x][i];
        if (y != p)dfs(y, x);
    }
    tout[x] = t;
}

int main(){
    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    cin >>n;
    int x = 0;
    for (int i = 1; i <= n; ++i){
        int p;
        cin >>p;
        pr[i] = p;
        if (p != 0)g[p].push_back(i);
    }
    for (int i = 1; i <= n; ++i){
        if (pr[i] == 0)dfs(i, 0);
    }
    int m;
    cin >>m;
    while (m--){
        int v, p;
        cin >>v>>p;
        for (int i = 0; i < 20; ++i){
            if (p & (1 << i))v = lp[v][i];
        }
        if (v == 0){
            cout <<0<<" ";
            continue;
        }
        int d = deep[v] + p;
        cout <<upper_bound(a[d].begin(), a[d].end(), tout[v]) - lower_bound(a[d].begin(), a[d].end(), tin[v]) - 1<<" ";
    }
}
