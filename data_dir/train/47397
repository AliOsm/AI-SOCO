#include <bits/stdc++.h>
using namespace std;

vector<int> digits;
vector<long long> powers;

// int CALLS = 0;

long long count(int idx, long long s, bool lessThan) {
    if (idx == digits.size()) return s >= 0 ? 1 : 0;
    if (s < 0) return 0;
    long long quick = -1;
    if (lessThan) {
        long long badPoss = 0;
        for (int i = idx; i < digits.size(); i++) {
            badPoss += 9 * powers[i] - 9;
        }
        if (badPoss <= s) {
            // quick = powers[idx] * 10;
            return powers[idx] * 10;
        } 
    }
    // CALLS++;
    long long power = powers[idx];
    long long res = 0;
    for (int here = 0; here < 10; here++) {
        if (!lessThan && here > digits[idx]) break;
        bool nLessThan = lessThan;
        if (here < digits[idx]) nLessThan = true;
        long long val = here * power - here; 
        res += count(idx + 1, s - val, nLessThan);
    }
    // cout << idx << " " << s << " " << lessThan << " : " << res << "=" << quick << endl;
    return res;
}

int main() { 
    long long n, s; cin >> n >> s;
    long long nMem = n;
    // diff is less that or equal to s - 1
    long long power = 1;
    while (n > 0) {
        digits.push_back(n % 10);
        n /= 10;
        powers.push_back(power);
        power *= 10;
    }
    reverse(digits.begin(), digits.end());
    reverse(powers.begin(), powers.end());
    long long less = count(0, s - 1, false);
    cout << nMem - less + 1 << endl;
    // cerr << CALLS << endl;
} 