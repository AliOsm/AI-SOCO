#include <bits/stdc++.h>
using namespace std;

#define mp make_pair
#define pb push_back

typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 100100;

int n, m;
int a[MAXN], b[MAXN];
int srt[MAXN];
int deg[MAXN];
int p[MAXN];
struct cmpdeg {
  bool operator()(int x, int y) {
    return deg[x] == deg[y] ? x < y : deg[x] < deg[y];
  }
};
set<int, cmpdeg> inComp[MAXN];
set<int> comps;
pii ans[MAXN];
set<pii> was;

bool cmp(int x, int y) {
  if (a[x] != a[y])
    return a[x] < a[y];
  return b[x] > b[y];
}

inline int root(int x) {
  return x == p[x] ? x : p[x] = root(p[x]);
}

void merge(int x, int y) {
  assert(x == p[x]);
  assert(y == p[y]);
  if (inComp[x].size() < inComp[y].size()) {
    inComp[x].swap(inComp[y]);
  }
  p[y] = x;
  for (auto it : inComp[y]) {
    inComp[x].insert(it);
  }
  inComp[x].erase(x);
  inComp[x].erase(y);
  ++deg[x]; ++deg[y];
  inComp[x].insert(x);
  inComp[x].insert(y);
}

int main() {
  //freopen("input.txt", "r", stdin);
  //ios_base::sync_with_stdio(false); cin.tie(NULL);
  scanf("%d%d", &n, &m);
  for (int i = 0; i < m; ++i) {
    scanf("%d%d", a + i, b + i);
    srt[i] = i;
  }
  sort(srt, srt + m, cmp);
  for (int i = 1; i <= n; ++i) {
    p[i] = i;
    inComp[i].insert(i);
    if (i > 1)
      comps.insert(i);
  }
  for (int i = 0; i < m; ++i) {
    int idx = srt[i];
    if (b[idx] == 0) {
      int v = root(1);
      if (deg[*inComp[v].begin()] + 1 == (int)inComp[v].size()) {
	cout << "-1" << endl;
	return 0;
      }
      assert((int)inComp[v].size() > 1);
      int x = *inComp[v].begin();
      inComp[v].erase(inComp[v].begin());
      int y = -1;
      for (auto it : inComp[v]) {
	int xx = x;
	int yy = it;
	if (xx > yy) swap(xx, yy);
	if (was.find(mp(xx, yy)) == was.end()) {
	  y = it;
	  break;
	}
      }
      inComp[v].erase(y);
      ++deg[x]; ++deg[y];
      inComp[v].insert(x);
      inComp[v].insert(y);
      ans[idx] = (mp(x, y));
    } else {
      if ((int)comps.size() < 1) {
	assert(false);
      }
      int x = root(1);
      int y = *comps.begin();
      comps.erase(comps.begin());
      merge(x, y);
      ans[idx] = (mp(x, y));
    }
    if (ans[idx].first > ans[idx].second)
      swap(ans[idx].first, ans[idx].second);
    was.insert(ans[idx]);
  }
  for (int i = 0; i < m; ++i) {
    printf("%d %d\n", ans[i].first, ans[i].second);
  }
  return 0;
}
