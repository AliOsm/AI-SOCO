#include<bits/stdc++.h>
using namespace std;

#define rep(i,n) for(int i=0;i<n;i++)
#define repi(i,a,n) for(int i=a;i<n;i++)

#define mp make_pair
#define fastIO ios::sync_with_stdio(false)
#define read freopen("in.in","r",stdin)
#define write freopen("out.out","w",stdout)
#define scf(xx) scanf("%d",&xx)
#define scfl(xx) scanf("%I64d",&xx)
#define All(a) a.begin(), a.end()


typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef long double ld;


int dx[] = { 0, 1, 0, -1, -1, -1, 1, 1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };


double INF = 1e100;
double EPS = 1e-5;


// This library wrote by : Noor Alasadi 

struct PT {
    double x, y;

    PT() {
    }

    PT(double x, double y) : x(x), y(y) {
    }

    PT(const PT &p) : x(p.x), y(p.y) {
    }

    PT operator+(const PT &p) const {
        return PT(x + p.x, y + p.y);
    }

    PT operator-(const PT &p) const {
        return PT(x - p.x, y - p.y);
    }

    PT operator*(double c) const {
        return PT(x*c, y * c);
    }

    PT operator/(double c) const {
        return PT(x / c, y / c);
    }
};
bool equal(PT a , PT b){
    return fabs(a.x - b.x)<EPS && fabs(a.y - b.y) < EPS ;
}
double dot(PT p, PT q) {
    return p.x * q.x + p.y * q.y;
}

double dist2(PT p, PT q) {
    return dot(p - q, p - q);
}

double cross(PT p, PT q) {
    return p.x * q.y - p.y * q.x;
}
// rotate a point CCW or CW around the origin

PT RotateCCW90(PT p) {
    return PT(-p.y, p.x);
}

PT RotateCW90(PT p) {
    return PT(p.y, -p.x);
}

PT RotateCCW(PT p, double t) {
    return PT(p.x * cos(t) - p.y * sin(t), p.x * sin(t) + p.y * cos(t));
}
// project point c onto line through a and b
// assuming a != b
PT ComputeLineIntersection(PT a, PT b, PT c, PT d) {
    b = b - a;
    d = c - d;
    c = c - a;
    assert(dot(b, b) > EPS && dot(d, d) > EPS);
    return a + b * cross(c, d) / cross(b, d);
}
PT ComputeCircleCenter(PT a, PT b, PT c) {
    b = (a + b) / 2;
    c = (a + c) / 2;
    return ComputeLineIntersection(b, b + RotateCW90(a - b), c, c + RotateCW90(a - c));
}
int main() {
    fastIO;
    //read;
    PT a,b,c;
    cin>>a.x >> a.y;
    cin>>b.x >> b.y;
    cin>>c.x >> c.y;
    PT p = ComputeCircleCenter(a,b,c);
    for(int i = 3 ; i <= 100 ; i ++ ){
        double angle  = 2.0*acos(-1.0)/ (double)i ;
        PT x= a;
        bool aa = 0 , bb = 0 ,cc= 0;
        for(int j = 0 ; j < i ; j ++ ){
            if(equal(a,x))aa =1;
            if(equal(b,x))bb=1;
            if(equal(c,x))cc = 1;
            x = RotateCCW(x-p,angle ) + p;
        }
        if(aa && bb && cc ){
            x=a;
            x = RotateCCW(x-p,angle ) + p;
            double d1 = sqrt(dist2(x,a));
            double d2 = sqrt(dist2(p , (x+a)/2.0));
            cout<<fixed<<setprecision(8) <<d1*d2*i/2.0 ;
            return 0;
        }
    }
    cout<<"fuck";
    return 0;
}

