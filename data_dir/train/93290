#include <bits/stdc++.h>
using namespace std;

const int MOD = 998244353;
const int MAX = 2e5 + 5;

#define dbg(x) cout << "-> " << #x << " = " << x << endl

using ll = long long;

ll s[MAX], ns[MAX];

ll add(ll a, ll b) {
    return (a + b) % MOD;
}

ll sub(ll a, ll b) {
    return ((a - b) % MOD + MOD) % MOD;
}

ll mul(ll a, ll b) {
    return (a * b) % MOD;
}

ll bigMod(ll a, ll b) {
    ll ret = 1;
    while(b != 0) {
        if(b % 2 == 1) {
            ret = mul(ret, a);
        }
        b /= 2;
        a = mul(a, a);
    }
    return ret;
}

ll solve(vector<int> V, int k) {
    for(int i = 1; i < (int) V.size(); i++) {
        if(V[i] == V[i - 1] and V[i] != -1) {
            return 0;
        }
    }
    ll ret = 1;
    int n = V.size();
    for(int i = 0; i < n; i++) {
        if(V[i] != -1) {
            continue;
        }
        int l = i, r = i;
        while(r < n and V[r] == -1) {
            ++r;
        }
        if(l == 0 and r == n) {
            ret = mul(ret, mul(k, bigMod(k - 1, n - 1)));
        }
        else if(l == 0 or r == n) {
            ret = mul(ret, bigMod(k - 1, r - l));
        }
        else {
            if(V[l - 1] == V[r]) {
                ret = mul(ret, s[r - l]);
            }
            else {
                ret = mul(ret, ns[r - l]);
            }
        }
        i = r - 1;
    }
    return ret;
}

void makeDp(int k) {
    s[0] = 0, s[1] = k - 1;
    ns[0] = 1, ns[1] = k - 2;
    for(int i = 2; i < MAX; i++) {
        s[i] = add(mul(s[i - 1], k - 2), mul(s[i - 2], k - 1));
        ns[i] = add(mul(ns[i - 1], k - 2), mul(ns[i - 2], k - 1));
    }
}

int main() {
    int n, k;
    scanf("%d %d", &n, &k);
    makeDp(k);
    vector<int> a[2];
    for(int i = 0; i < n; i++) {
        int x;
        scanf("%d", &x);
        a[i & 1].push_back(x);
    }
    printf("%lld\n", mul(solve(a[0], k), solve(a[1], k)));
    return 0;
}
