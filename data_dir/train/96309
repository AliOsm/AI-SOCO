#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007
#define maxn 5005
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 5000000000000000000LL
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2
#define sq(x) ((x)*(x))

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

int dpSingle[maxn] , a[maxn] , Next[4][5005] , pos[100005] ;
int dp[maxn][maxn] , n , DP[5005][7] ;
vector <int> Mod[8] ;

int f(int x ,int y)
{
    if(x==y) return 0 ;
    if(x>=n+1) return dpSingle[y] ;
    if(y>=n+1) return dpSingle[x] ;
    if(dp[x][y]!=-1) return dp[x][y] ;

    int ret = 0 ;
    if( x<y )
    {
        if(Next[0][x]==y) ret = max( ret , f(Next[3][y] , y) ) ;
        else ret = max(ret , f( Next[0][x] , y ) ) ;
        if(Next[1][x]==y) ret = max( ret , f(Next[3][y] , y) ) ;
        else ret = max(ret , f( Next[1][x] , y ) ) ;
        ret = max(ret , f( Next[2][x] , y ) ) ;
        ret = max(ret , dpSingle[y]) ;
        ret = max(ret , DP[y][a[x]%7]) ;
        DP[ x ][a[y]%7 ] = max( ret+1 , DP[ x ][a[y]%7 ] ) ;
    }
    else{
        if( Next[0][y]==x ) ret = max(ret , f( x , Next[3][x] ) ) ;
        else ret = max(ret , f( x, Next[0][y]  ) ) ;
        if( Next[1][y]==x ) ret = max(ret , f( x , Next[3][x] ) ) ;
        else ret = max(ret , f( x, Next[1][y] ) ) ;
        ret = max(ret , f( x, Next[2][y] ) ) ;
        ret = max(ret , dpSingle[x]) ;
        ret = max(ret , DP[x][a[y]%7]) ;
        DP[ y ][a[x]%7 ] = max( ret+1 , DP[ y ][a[x]%7 ] ) ;
    }

    return dp[x][y] = 1 + ret ;
}
/*
12
7 20 21 22 23 24 25 26 27 28 29 35
*/
int main()
{
    int i , j , k , l , m ;

    sf("%d",&n) ;
    for(i=1 ; i<=n ; i++) sf("%d",&a[i]) ;

    for(i=0 ; i<=100002 ; i++) pos[i] = n+1 ;
    for(i=0 ; i<7; i++) Mod[i].pb(n+1) ;

    for(i=n ; i>=1 ; i--)
    {
        Next[0][i] = pos[ a[i]-1 ] ;
        Next[1][i] = pos[ a[i]+1 ] ;
        Next[3][i] = pos[ a[i] ] ;
        int m = a[i]%7 ;
        int sz = (int)Mod[m].size() ;
        Next[2][i] = Mod[m][sz-1] ;
        pos[ a[i] ] = i ;
        Mod[m].pb(i) ;
    }

    dpSingle[n+1] = 0 ;

    for(i=n; i>=1 ; i--)
    {
        dpSingle[i] = 1 + max( dpSingle[Next[0][i]] , max( dpSingle[Next[1][i]] ,dpSingle[Next[2][i]] ) ) ;
    }
    memset(dp,-1,sizeof(dp)) ;
    int ans = 0 ;
    for(i=n ; i>=1 ; i--)
    {
        for(j=n ; j>=1 ; j--)
        {
             if(f(i,j)>ans){
                k = i ; l = j ;
                ans = f(i,j) ;
             }
        }
    }
    printf("%d\n",ans) ;
 /*   for(i=1 ; i<=n+1 ; i++)
    {
        for(j=1 ; j<=n+1 ; j++) printf("%d %d----->%d\n",i,j,f(i,j)) ;
    }
*/
    return 0 ;
}
