/*input
5 7 2
1 2
1 3
1 4
2 3
2 4
3 4
1 5
1 4
2 5


*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define __builtin_popcount __builtin_popcountll
#define bit(x,y) ((x>>y)&1LL)
#define loop(i,l,r) for(int i=(l); i<=(r); i++)
#define rloop(i,l,r) for(int i=(l); i>=(r); i--)
const int N = 100005;
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &a) {
	return os << '(' << a.first << ", " << a.second << ')';
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a) {
	os << '[';
	for (unsigned int i = 0; i < a.size(); i++)
		os << a[i] << (i < a.size() - 1 ? ", " : "");
	os << ']';
	return os;
}

struct NewTree {
	int n;
	vector<vector<int> > a;
	vector<vector<int> > par;
	vector<int> depth;
	NewTree(int _n) {
		n = _n;
		a.assign(n + 5, vector<int>()); par.assign(n + 5, vector<int>(21, 0)); depth.assign(n + 5, 0);
	}
	void addEdge(int u, int v) {
		a[u].push_back(v); a[v].push_back(u);
	}
	void dfs(int u, int p) {
		par[u][0] = p;
		for (int i = 0; i < a[u].size(); i++) {
			int v = a[u][i];
			if (v != p) {
				depth[v] = depth[u] + 1;
				dfs(v, u);
			}
		}
	}
	int lca(int p, int q) {
		if (depth[p] < depth[q]) swap(p, q);
		for (int i = 20; i >= 0; i--) {
			if (depth[par[p][i]] >= depth[q]) {
				p = par[p][i];
			}
		}
		if (p == q) return p;
		for (int i = 20; i >= 0; i--) {
			if (par[p][i] != par[q][i]) {
				p = par[p][i];
				q = par[q][i];
			}
		}
		return par[p][0];
	}
	void makelca() {
		dfs(1, 1);
		for (int i = 1; i <= 20; i++) {
			for (int j = 1; j <= n; j++) {
				par[j][i] = par[par[j][i - 1]][i - 1];
			}
		}
	}
	int distance(int u, int v) {
		int p = lca(u, v);
		return depth[u] - depth[p] + depth[v] - depth[p];
	}
};

// Problem: Output the maximum size of a biconnected component
// use normally, vertex starts from 1
vector<vector<int> > a(N);
int n, m, q;
struct BiconnectedComponent {
	vector<int> low, num, s;
	vector< vector<int> > components;
	int counter;

	BiconnectedComponent() : low(n + 1, -1), num(n + 1, -1), counter(0) {
		for (int i = 1; i <= n; i++)
			if (num[i] < 0)
				dfs(i, 1);
	}

	void dfs(int x, int isRoot) {
		low[x] = num[x] = ++counter;
		if (a[x].empty()) {
			components.push_back(vector<int>(1, x));
			return;
		}
		s.push_back(x);

		for (int i = 0; i < a[x].size(); i++) {
			int y = a[x][i];
			if (num[y] > -1) low[x] = min(low[x], num[y]);
			else {
				dfs(y, 0);
				low[x] = min(low[x], low[y]);

				if (isRoot || low[y] >= num[x]) {
					components.push_back(vector<int>(1, x));
					while (1) {
						int u = s.back();
						s.pop_back();
						components.back().push_back(u);
						if (u == y) break;
					}
				}
			}
		}
	}
};



signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> m >> q;
	loop(i, 1, m) {
		int u, v; cin >> u >> v;
		a[u].push_back(v); a[v].push_back(u);
	}
	BiconnectedComponent bcc;
	NewTree tree(bcc.components.size() + n);
	loop(i, 0, bcc.components.size() - 1) {
		for (auto it : bcc.components[i]) {
			tree.addEdge(it, n + i + 1);
		}
	}
	tree.makelca();
	loop(i, 1, q) {
		int u, v; cin >> u >> v;
		cout << tree.distance(u, v) / 2 << endl;
	}
}