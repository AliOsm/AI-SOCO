#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define size(x) (int) x.size()

const int maxn = 1005;
const int logn = 30;
const int inf = (int) 1e9 + 5;
const long long mod = (int) 1e9 + 7;
const long long base = 2204234849;
const long long l_inf = (long long) 4e18;
const long double pi = acos(-1.0);
const long double eps = 1e-12;

int n;
int a[1005], cnt1 = 0;
bool prime[2000005];
vector<int> best;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.precision(12);
	cout << fixed;
	srand(566);

	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
		cnt1 += a[i] == 1;
	}

	memset(prime, true, sizeof prime);
	prime[0] = prime[1] = false;
	for (int i = 2; i * i < 2000005; i++)
		if (prime[i])
			for (int j = i * i; j < 2000005; j += i)
				prime[j] = false;

	bool found = false;
	for (int i = 0; i < n && !found; i++) {
		for (int j = i + 1; j < n && !found; j++) {
			if (prime[a[i] + a[j]]) {
				best.pb(a[i]);
				best.pb(a[j]);
				found = true;
			}
		}
	}

	if (cnt1 > 2) {
		best.clear();
		for (int i = 0; i < cnt1; i++)
			best.pb(1);
	}

	if (cnt1 > 1) {
		for (int i = 0; i < n; i++) {
			if (a[i] == 1)
				continue;
			if (prime[1 + a[i]]) {
				best.clear();
				for (int j = 0; j < cnt1; j++)
					best.pb(1);
				best.pb(a[i]);
			}
		}
	}

	if (best.empty())
		best.pb(a[0]);

	cout << size(best) << '\n';
	for (int x : best)
		cout << x << ' ';

	return 0;
}
