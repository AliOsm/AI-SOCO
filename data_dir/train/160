/* ****revpro**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl	   '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii	    map<ll,ll>
using namespace std;

#define N  10000005
ll divisor[N][3];
vi factors[N];
ll cnt[N][3];
ll spf[N]; 
void seive() 
{ 
    spf[1] = 1; 
    for (ll i=2; i<N; i++) 
        spf[i] = i; 
    for (ll i=4; i<N; i+=2) 
        spf[i] = 2; 
  
    for (ll i=3; i*i<N; i++) 
    { 
        if (spf[i] == i) 
        { 
            for (ll j=i*i; j<N; j+=i) 
                if (spf[j]==j) 
                    spf[j] = i; 
        } 
    } 
} 
vi getFactorization(ll x) 
{ 
    vi ret; 
    while (x != 1) 
    { 
        ret.pb(spf[x]);
        ll p=spf[x];
        while(x%p==0) 
            x=x/p; 
    } 
    return ret; 
} 
ll ans=1e18;
void get(ll n,ll x,ll idx)
{
	if(idx==sz(factors[x]))
	{
		if(divisor[n][0]<2)
			divisor[n][++divisor[n][0]]=x;
		else{
			if(divisor[n][2]<divisor[n][1])
				swap(divisor[n][1],divisor[n][2]);
			if(divisor[n][1]>x)
			{
				divisor[n][2]=divisor[n][1];
				divisor[n][1]=x;
			}
			else if(divisor[n][2]>x)
				divisor[n][2]=x;
		}
		if(divisor[n][0]==2)
		{
			ans=min(ans,divisor[n][1]*divisor[n][2]/n);
		}
		return ;
	}
	if(divisor[n][0]==2&&divisor[n][2]<=x) return ;
	if(divisor[n][0]==1&&divisor[n][1]==x) return ;
	while(n%factors[x][idx]==0)
	{
		get(n,x,idx+1);
		n/=factors[x][idx];
	}
	get(n,x,idx+1);
}
int main()
{
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		ll n;
		cin>>n;
		set <ll> s;
		ll a[2];
		seive();
		rep(i,0,n){
			ll x;
			cin>>x;
			if(cnt[x][0]<2)
				cnt[x][++cnt[x][0]]=i;
		}
		rep(i,1,N)
		{
			if(i>ans) break;
			if(cnt[i][0]>=2)
			{
				ans=i;
				a[0]=i;
				a[1]=i;
				break;
			}
			else if(cnt[i][0]==1)
			{
				factors[i]=getFactorization(i);
				get(i,i,0);
			}
		}
		rep(i,1,N)
		{
			if(divisor[i][0]==2)
			{
				if(ans>=divisor[i][1]*divisor[i][2]/i)
				{
					ans=divisor[i][1]*divisor[i][2]/i;
					a[0]=divisor[i][1];
					a[1]=divisor[i][2];
				}
			}	
		}
		vi ans1;
		if(a[0]==a[1])
		{
			rep(i,0,2) ans1.pb(cnt[a[0]][i+1]+1);
		}
		else 
		{
			ans1.pb(cnt[a[0]][1]+1);
			ans1.pb(cnt[a[1]][1]+1);
		}
		if(ans1[0]>ans1[1]) swap(ans1[0],ans1[1]);
		for(auto i:ans1) cout<<i<<' ';
	}
	return 0;
}