# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace __gnu_pbds;
using namespace std;
 
typedef
tree<pair<int,int>,null_type,less<pair<int,int>>,rb_tree_tag, tree_order_statistics_node_update> ordered_set;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 3e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
int a[N], u[N];

int lp[maxn];
vector < int > pr, ans, pos[mxn];

int main () {
	SpeedForce;

	for (int i = 2; i < maxn; ++ i) {
		if (lp[i] == 0) {
			lp[i] = i;
			pr.push_back (i);
		}
		for (int j = 0; j < pr.size() && pr[j] <= lp[i] && i * pr[j] < maxn; ++ j)
			lp[i * pr[j]] = pr[j];
	}
	
	cin >> n;
	for (int i = 1; i <= 2 * n; i ++) {
		cin >> a[i];
	}
	sort(a + 1, a + 2 * n + 1);
	for (int i = 1; i <= 2 * n; i ++) {
		pos[a[i]].pb(i);
	}
	for (int i = 2 * n; i >= 1; i --) { 
		if (u[i]) {
			continue;
		}
		if (lp[a[i]] == a[i]) {	
			continue;
		}
		int x = a[i] / lp[a[i]];
		if (!pos[x].size()) {
			assert(0);
		}

		u[pos[x].back()] = 1;
		pos[x].pop_back();
		ans.pb(a[i]);
	}
	for (int i = 1; i <= 2 * n; i ++) if (lp[a[i]] == a[i]) {
		if (u[i]) continue;
		int x = pr[a[i] - 1];
		if (!pos[x].size()) {
			assert(0);
		}
		u[pos[x].back()] = 1;
		pos[x].pop_back();
		ans.pb(a[i]);
	}
	for (int i = 0; i < n; i ++)
		cout << ans[i] << ' ';
	

	return Accepted;
}

// B...a