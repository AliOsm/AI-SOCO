#include<iostream>
#include<vector>
#include<map>
#include<set>
#include<cassert>
#include<cassert>
#include<unordered_map>
#include<unordered_set>
#include<functional>
#include<queue>
#include<stack>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<sstream>
#include<iomanip>
#include<cstdio>
#include<cstdlib>
#include<numeric>
#include<random>
#include<chrono>
#include<bitset>
using namespace std;

#define all(x) (x).begin(), (x).end()
#define pb push_back
#define xx first
#define yy second
#define sz(x) (int)(x).size()
#define gc getchar
#define IO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define mp make_pair

#ifndef ONLINE_JUDGE
#  define LOG(x) (cerr << #x << " = " << (x) << endl)
#else
#  define LOG(x) ((void)0)
#endif

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

const double PI=3.1415926535897932384626433832795;
const ll INF = 1LL<<62;
const ll MINF = -1LL<<62;

template<typename T> T getint() {
	T val=0;
	char c;
	
	bool neg=false;
	while((c=gc()) && !(c>='0' && c<='9')) {
		neg|=c=='-';
	}

	do {
		val=(val*10)+c-'0';
	} while((c=gc()) && (c>='0' && c<='9'));

	return val*(neg?-1:1);
}

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); uniform_int_distribution<int>(0, n-1)(rng)


int main() {
	IO;
	string a,b;
	cin>>a>>b;
	a="#"+a;
	a.push_back('#');
	int len=0;
	for(int i=20;i>=0;i--) {
		int akt=len+(1<<i);
		if(akt>=(int)a.size()) continue ;
		//cerr<<akt<<"\n";
		vector<int> dp0(a.size());
		vector<int> dp1(a.size());
		int mx=0;
		for(int j=0;j<(int)a.size();++j) {
			if(j==0) {
				dp0[j]=(a[j]==b[0]?1:0);
			}else {
				if(dp0[j-1]==(int)b.size()) dp0[j]=b.size();
				else {
					if(a[j]==b[dp0[j-1]]) dp0[j]=dp0[j-1]+1;
					else dp0[j]=dp0[j-1];
				}
			}
			
			if(j>=akt+1) {
				mx=max(mx, dp0[j-akt-1]);
				dp1[j]=max((j>0?dp1[j-1]:0), mx);
				if(dp1[j]<(int)b.size() && b[dp1[j]]==a[j]) dp1[j]++;
			}
		}
		
	//	for(auto i:dp0) cerr<<i<<" ";cerr<<"\n";
		//for(auto i:dp1) cerr<<i<<" ";cerr<<"\n";
		//cerr<<"\n";
		
		if(dp1[a.size()-1]==(int)b.size()) len=akt;
	}
	
	cout<<len<<"\n";
	return 0;
}
