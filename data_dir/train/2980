#include <bits/stdc++.h>
using namespace std;
#define read            freopen("C:\\Users\\Dell\\Desktop\\in.txt", "r", stdin)
#define write           freopen("C:\\Users\\Dell\\Desktop\\out.txt", "w", stdout)
#define pii             pair<int , int >
#define inf             111111111
#define linf            9111111111111111111
#define in(a)           scanf("%d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%d%d", &a, &b)
#define in3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pn              printf("\n");
#define pr(a)           printf("%d\n", a)
#define prs(a)          printf("%d ", a)
#define pr2(a, b)       printf("%d %d\n", a, b)
#define pr3(a, b ,c)    printf("%d %d %d\n", a, b, c)
#define MP              make_pair
#define vi              vector<int >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pb              push_back
#define MEM(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)

// Debugger.begin()

#define error(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); pn;}
vector<string> split(const string& s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c))
		v.emplace_back(x);
	return move(v);
}

void err(vector<string>::iterator it) {}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << '\n';
	err(++it, args...);
}

// Debugger.end()

typedef long long LL;
//int  dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int  dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int  dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(int n, int pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//int  on(int n, int pos) {return n | (1<<pos);} //typecast 1 in case of int
//int  off(int n, int pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

/* ***************************************************************************************
   *************************************************************************************** */
const int M=100010, LOGN=20;
vi A[M], B[M];
map<pii, int>ok;
int visited[M], group[M], pt[M][LOGN], level[M];
int disc[M], low[M], parent[M], n;
void find_bridges(int u)
{
    static int time = 0;
    visited[u] = true;
    disc[u] = low[u] = ++time;
    int i, v;

    for (i=0; i<A[u].sz; i++)
    {
        v=A[u][i];
        if (!visited[v])
        {
            parent[v] = u;
            find_bridges(v);

            low[u]  = min(low[u], low[v]);
            if (low[v] > disc[u])
            {
                ok[MP(u, v)]=ok[MP(v, u)]=true;
            }
        }
        else if (v != parent[u]) low[u]  = min(low[u], disc[v]);
    }
}
void find_groups(int u, int p)
{
    visited[u]=true;
    group[u]=p;

    for (int i=0; i<A[u].sz; i++)
    {
        int v=A[u][i];
        if (ok[MP(u, v)]||visited[v]) continue;
        find_groups(v, p);
    }
}
void initialize(int n)
{
    MEM(visited, false);
    MEM(pt, -1);
}
void dfs(int u, int l)
{
    int i, v;
    visited[u]=true;
    level[u]=l;
    for (i=0; i<B[u].size(); i++)
    {
        v=B[u][i];
        if (!visited[v])
        {
            pt[v][0]=u;
            dfs(v, l+1);
        }
    }
}
void make_pt(int n)
{
    int i, j;
    for (i=1; i<LOGN; i++)
    {
        for (j=1; j<=n; j++)
        {
            if (pt[j][i-1]!=-1) pt[j][i]=pt[pt[j][i-1]][i-1];
        }
    }
}
int LCA(int p, int q)
{
    int i, j, temp;

    if (level[p]<level[q]) swap(p, q);

    for (i=LOGN-1; i>=0; i--)
    {
        if (level[p]-(1<<i)>=level[q])
            p=pt[p][i];
    }

    if (p==q) return p;

   for (i=LOGN-1; i>=0; i--)
   {
       if (pt[p][i]!=-1&&pt[p][i]!=pt[q][i])
       {
           p=pt[p][i];
           q=pt[q][i];
       }
   }
return pt[p][0];

}
int dist(int u, int v)
{
    int l=LCA(u, v);
    return level[u]+level[v]-2*level[l];
}
int main()
{
#ifndef ONLINE_JUDGE
    read;
#endif
    int m, i, j, k, x, y;

    in2(n, m);
    while (m--)
    {
        in2(i, j);
        A[i].pb(j);
        A[j].pb(i);
    }

    ok.cl;
    MEM(visited, false);
    MEM(parent, -1);
    for (i=1; i<=n; i++) if (!visited[i]) find_bridges(i);

    MEM(visited, 0);
    for (i=1; i<=n; i++) if (!visited[i]) find_groups(i, i);

    for (i=1; i<=n; i++)
        for (j=0; j<A[i].sz; j++)
            if (ok[MP(i, A[i][j])])
            {
                B[group[i]].pb(group[A[i][j]]);
            }

    initialize(n);
    dfs(group[1], 0);
    make_pt(n);

    int q, u, v;
    in(q);
    while (q--)
    {
        in2(u, v);
        pr(dist(group[u], group[v]));
    }

return 0;
}
