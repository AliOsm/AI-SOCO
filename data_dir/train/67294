#pragma comment(linker, "/stack:640000000")

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define scanl(a) scanf("%lld",&a)
#define scanii(a,b) scanf("%d%d",&a,&b)
#define scaniii(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define scanll(a,b) scanf("%lld%lld",&a,&b)
#define scanlll(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define scani(a) scanf("%d",&a)
#define clr(a) memset(a,0,sizeof(a))
#define clr_(a) memset(a,-1,sizeof(a))
#define pb(a) push_back(a)
#define pii pair<int,int>
#define sqr(a) a*a
#define eps 1e-9
#define inf INT_MAX
#define pi acos(-1.0)
#define ff first
#define ss second
#define INF 1e18
#define siz 100010
#define vsort(v) sort(v.begin(),v.end())
int Set(int n,int pos){return n=n | (1<<pos);}///sets the pos bit
int reset(int n,int pos){return n=n & ~(1<<pos);}///resets the pos bit
bool check(int n,int pos){return (bool)(n & (1<<pos));}///return pos bit
ll power(ll x,ll n)
{
    ///complexity O(logn)
    if(n==0)return 1;
    else if(n%2==0)
    {
        ll y=power(x,n/2);
        return y*y;
    }
    else
        return x*power(x,n-1);
}
int strTOint(string s)
{
    stringstream ss;
    int x;
    ss<<s;
    ss>>x;
    return x;
}
double geo_dist(int a,int b,int c,int d)
{
    double dd=(double)(a-c)*(a-c)+(b-d)*(b-d);
    double r=sqrt(dd)+eps;
    return r;
}
ll bigmod(ll a,ll p,ll m)
{
    if(p==0)return 1%m;
    if(p%2==0)
    {
        ll y=bigmod(a,p/2,m);
        return (y*y)%m;
    }
    else
    {
        return (a*bigmod(a,p-1,m))%m;
    }
}
ll euclid_x,euclid_y,euclid_d,euclid_g;
void ext_gcd(ll a,ll b)
{
    if(b==0)
    {
        euclid_x=1;euclid_y=0;euclid_d=a;return;
    }
    ext_gcd(b,a%b);
    ll x1=euclid_y;
    ll y1=euclid_x-(a/b)*euclid_y;
    euclid_x=x1;
    euclid_y=y1;
}
ll modInv (ll a,ll m ) {

    ///if m prime
    ///ll x = bigmod( a, m - 2, m ); ///(ax)%m = 1
   /// i m not prime;
    ext_gcd( a, m);
    ///Process x so that it is between 0 and m-1
    euclid_x %= m;
    if ( euclid_x < 0 ) euclid_x += m;
    return euclid_x;
}
vector<int>num;
void input(string s)
{
    ///declare a gloabl vector num & values will be in num
    istringstream ss(s);
    int n;
    while(ss>>n)
    {
        num.pb(n);
    }
}
int fx[]={0,0,-1,1,-1,1,1,-1};
int fy[]={1,-1,0,0,1,1,-1,-1};
///FOR KNIGHT MOVE
///int fx[]={2,1,-1,-2,-2,-1,1,2};
///int fy[]={1,2,2,1,-1,-2,-2,-1};
map<string,int>mp;
vector<int>v;
#define mx 1000001
ll arr[mx];
int val;
struct info
{
    ll sum,prop;
}tree[mx*4];
info call(info a,info b)
{
    info temp;
    ///merge two info
    temp.sum=a.sum+b.sum;
  //  temp.prop=0;
    return temp;
}
void propagate(int node,int b,int e)
{
    if(b==e)
    {
        tree[node].prop=0;
        return;
    }
    int Left=node<<1;
    int Right=(node<<1)+1;
    int mid=(b+e)>>1;
    ///update propagation
    ll prop=tree[node].prop;
    tree[Left].prop+=tree[node].prop;
    tree[Right].prop+=tree[node].prop;
    tree[node].prop=0;
    ///update Left node
    tree[Left].sum+=(mid-b+1)*prop;
    ///update Right node
    tree[Right].sum+=(e-mid)*prop;
}
void build(int node,int b,int e)
{
    tree[node].sum=0;
    tree[node].prop=0;
    if(b==e)
    {
        ///Do Something
        return;
    }
    int mid=(b+e)/2;
    int Left=node*2,Right=node*2+1;
    build(Left,b,mid);
    build(Right,mid+1,e);
    ///tree[node]=call(tree[Left],tree[Right]);
}
void update(int node,int b,int e,int i)
{
   // if(tree[node].prop)propagate(node,b,e);
    //if(i>e || j<b)return;
    if(b==i && i==e)
    {
       // tree[node].prop+=val;
        tree[node].sum+=1;
  //      cout<<b<<" io "<<tree[node].sum<<endl;
        return;
    }
    int mid=(b+e)/2;
    int Left=node*2,Right=node*2+1;

    if(i<=mid)
    update(Left,b,mid,i);
    else
    update(Right,mid+1,e,i);
    tree[node]=call(tree[Left],tree[Right]);
}
ll query(int node,int b,int e,int i,int j)
{
    if(i>e || j<b)return 0;
   // if(tree[node].prop)propagate(node,b,e);
    if(b>=i && e<=j)
    {
        ///Do something
      //  cout<<i<<" "<<j<<" "<<tree[node].sum<<endl;
        return tree[node].sum;
    }
    int mid=(b+e)/2;
    int Left=node*2,Right=node*2+1;
    return (query(Left,b,mid,i,j)+query(Right,mid+1,e,i,j));

}

int main()
{
    /// ios_base::sync_with_stdio(0);
    /// cin.tie(0);
    ///freopen("in.txt","r",stdin);
    ///freopen("out.txt","w",stdout);
    int n,k;
    scanii(n,k);
    k=min(k,n-k);
    ll ans=1;
    int from=1,to;
    for(int i=1;i<=n;i++)
    {
        ans++;
        ll cnt;
        to=from+k;
        if(to>n)to-=n;
     //   cout<<from<<" "<<to<<endl;
        if(from<to)cnt=query(1,1,n,from+1,to-1);
        else
        {
            cnt=query(1,1,n,from+1,n);
            cnt+=query(1,1,n,1,to-1);
        }
      //  cout<<endl<<"k  "<<cnt<<endl;
       ans+=cnt;
       printf("%lld",ans);
        if(i!=n)printf(" ");
        else printf("\n");
        update(1,1,n,from);
        update(1,1,n,to);
        from=to;
      //  cout<<"****"<<cnt<<endl;
     //   for(int j=8;j<=9;j++)cout<<tree[j].sum<<" ";
       //  for(int j=5;j<=7;j++)cout<<tree[j].sum<<" ";
    }
    return 0;
}

