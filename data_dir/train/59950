#include <ext/rope>
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define ll long long
#define ull unsigned long long
typedef vector<vector<ll>> mat;

const int N = 2e5 + 5;
vector<pair<int , int> > v;
set<pair<int , pair<int , int> > > se;
int n , pre , cnt , L[N] , R[N] , x , out;

int main()
{
    ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);

    cin >> n;
    for(int i = 0 ; i < n ; i++)
    {
        cin >> x;
        if(!i)
        {
            pre = x;
            cnt = 1;
            continue;
        }

        if(x != pre)
        {
            v.push_back({cnt , pre});
            pre = x;
            cnt = 1;
        }
        else cnt++;
    }
    v.push_back({cnt , pre});

    for(int i = 0 ; i < v.size() ; i++)
        R[i] = i + 1 , L[v.size() - i - 1] = v.size() - i - 2 , se.insert({ -v[i].first , {i , v[i].second} } );

    while(!se.empty())
    {
        out++;
        int idx = se.begin()->second.first;
        se.erase(se.begin());

        if(R[idx] != v.size() && L[idx] != -1)
        {
            if(v[R[idx]].second == v[L[idx]].second)
            {
                se.erase({-v[R[idx]].first , {R[idx] , v[R[idx]].second} });
                se.erase({-v[L[idx]].first , {L[idx] , v[L[idx]].second} });

                v[L[idx]].first += v[R[idx]].first;
                se.insert({ -v[L[idx]].first , { L[idx] , v[R[idx]].second} });

                R[L[idx]] = R[R[idx]];
                L[R[R[idx]]] = L[idx];
            }
            else
            {
                R[L[idx]] = R[idx];
                L[R[idx]] = L[idx];
            }
        }
        else if(R[idx] != v.size())
        {
            L[R[idx]] = L[idx];
        }
        else if(L[idx] != -1)
        {
            R[L[idx]] = R[idx];
        }
    }

    cout << out;

    return 0;
}
