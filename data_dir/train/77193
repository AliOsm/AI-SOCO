#include <bits/stdc++.h>
#define F first
#define S second
using namespace std;

const int N=1e5+5;

int n,m,k,l,ans;
bool f[N];
int a[N],b[N],c[N],d[N];
vector < pair < int , int > > v[N];
priority_queue < pair < int , int > > q;

main () {
  scanf("%d%d%d",&n,&m,&k);

  for (int i=1; i<=m; i++) {
    scanf("%d%d%d",&a[i],&b[i],&c[i]);
    v[a[i]].push_back({b[i],c[i]});
    v[b[i]].push_back({a[i],c[i]});
  }

  for (int i=1; i<=n; i++)
    d[i]=1e9;

  d[k]=0;

  q.push({d[k],k});

  while (!q.empty()) {
    int x=q.top().S;
    q.pop();
    if (f[x]) continue;
    f[x]=1;
    for (int i=0; i<v[x].size(); i++) {
      int to=v[x][i].F,cost=v[x][i].S;
      if (!f[to] && d[x]+cost<d[to]) {
        d[to]=d[x]+cost;
        q.push({-d[to],to});
      }
    }
  }

  scanf("%d",&l);

  for (int i=1; i<=n; i++)
    if (d[i]==l) ans++;

  for (int i=1; i<=m; i++) {
    int cost=c[i],x=a[i],y=b[i];
    if (d[x]>d[y]) swap(x,y);
    if (d[x]<l && l<d[x]+cost && cost-(l-d[x])+d[y]>l) ans++;
    if (d[y]<l && l<d[y]+cost && cost-(l-d[y])+d[x]>l) ans++;
    if (d[x]<l && d[y]<l && d[x]+d[y]+cost==2*l) ans++;
  }

  printf("%d\n",ans);
}