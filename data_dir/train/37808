#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair <ll,int> pll;

const int N = 1001000;
const ll Inf = 1e18;

template <typename type>
struct SegmentTreeWithLazyPropagation
{
    #define Miid ((L + R) >> 1)
    #define Leeft (Node << 1)
    #define Riight (Node << 1 | 1)

    private : const type E = pll(-Inf, -1);   /// identity element      /// Check this
    private : const ll EL = 0;          /// identity element for lazy   /// Check this
    private : static const int Nax = 4 * N;                             /// Check this

    private : int n;    /// Array length
    private : type Tree[Nax];
    private : ll Lazy[Nax];

    public : SegmentTreeWithLazyPropagation(int n = 0) : n(n)
    {
        for(int Node = 0; Node < Nax; Node++)
            Tree[Node] = E, Lazy[Node] = EL;
    }

    private : type Unite(type x, type y)    /// Check this
    {
        return max(x, y);
    }

    private : void Merge(int Node)
    {
        Tree[Node] = Unite(Tree[Leeft], Tree[Riight]);
    }

    private : void PushLazy(int Node, int Len)
    {
        if(Lazy[Node] != EL)
        {
            Tree[Node].first += Lazy[Node];   /// Check this

            if(Len > 1)
            {
                Lazy[Leeft] += Lazy[Node];   /// Check this
                Lazy[Riight] += Lazy[Node];  /// Check this
            }

            Lazy[Node] = EL;
        }
    }

    public : void Build(const vector <type>& a)
    {
        Clear();
        n = a.size();
        Build(a, 1, 0, n - 1);
    }

    private : void Build(const vector <type>& a, int Node, int L, int R)
    {
        Tree[Node] = E, Lazy[Node] = EL;

        if(L == R)  return void(Tree[Node] = a[L]);

        Build(a, Leeft, L, Miid);
        Build(a, Riight, Miid + 1, R);

        Merge(Node);
    }

    public : void Update(int i, int j, ll x)
    {
        if(n <= 0 || i > j) return ;
        Update(i, j, x, 1, 0, n - 1);
    }

    private : void Update(int i, int j, ll x, int Node, int L, int R)
    {
        PushLazy(Node, R - L + 1);

        if(j < L || R < i)      return ;
        if(i <= L && R <= j)    return Lazy[Node] = x, PushLazy(Node, R - L + 1);

        Update(i, j, x, Leeft, L, Miid);
        Update(i, j, x, Riight, Miid + 1, R);

        Merge(Node);
    }

    public : type Query(int i, int j)
    {
        if(n <= 0 || i > j) return E;
        return Query(i, j, 1, 0, n - 1);
    }

    private : type Query(int i, int j, int Node, int L, int R)
    {
        PushLazy(Node, R - L + 1);

        if(j < L || R < i)      return E;
        if(i <= L && R <= j)    return Tree[Node];

        return Unite(Query(i, j, Leeft, L, Miid), Query(i, j, Riight, Miid + 1, R));
    }

    public : void Clear()
    {
        for(int Node = 0; Node <= 4 * n; Node++)
            Tree[Node] = E, Lazy[Node] = EL;
        n = 0;
    }
};

SegmentTreeWithLazyPropagation <pll> myTree;

int main()
{
    int n;  cin >> n;

    vector <int> x(n);
    vector <int> y(n);
    vector <int> c(n);

    map <int,int> A;
    for(int i = 0; i < n; i++)  scanf("%d%d%d", &x[i], &y[i], &c[i]), A[x[i]], A[y[i]];

    int m = 0;
    for(pair <int,int> p : A)    A[p.first] = m++;

    vector <int> B(m);
    for(pair <int,int> p : A)   B[p.second] = p.first;

    vector <vector <int>> Have(m);

    for(int i = 0; i < n; i++)
    {
        x[i] = A[x[i]];
        y[i] = A[y[i]];

        if(x[i] > y[i]) swap(x[i], y[i]);

        Have[x[i]].push_back(i);
    }

    ll Ans = 0;
    int x1 = 2e9, y1 = 2e9;
    int x2 = 2e9, y2 = 2e9;

    {
        vector <pll> Temp;
        for(int i = 0; i < m; i++)  Temp.emplace_back(-B[i], i);
        myTree.Build(Temp);
    }

    for(int X = m - 1; ~X; --X)
    {
        for(int i : Have[X])    myTree.Update(y[i], m - 1, c[i]);

        pll Current = myTree.Query(X, m - 1);
        Current.first += B[X];

        if(Current.first > Ans)
        {
            Ans = Current.first;
            x1 = y1 = B[X];
            x2 = y2 = B[Current.second];
        }
    }

    cout << Ans << endl;
    cout << x1 << " " << y1 << " " << x2 << " " << y2 << endl;
}
