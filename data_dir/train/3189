#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/*------------------------------------BITMASK------------------------------------------*/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/*-----------------------------------------------------------------------------------------------*/

/*-----------------------------DIRECTION_ARRAY-------------------------*/
//------FOUR_DIRECTION---------//
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


//------EIGHT_DIRECTION---------//
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/*--------------------------------------------------------------------------------------*/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}

///-----------------------------START FROM HERE--------------------------------------///

int arr[200005];

ll total[1000006];

struct query{

    int l,r,id;



};
query vv[200005];
int sq;
ll ans[200005];
ll cnt;

void add(int p){

    cnt-=total[p]*total[p]*p;
    total[p]++;
    cnt+=total[p]*total[p]*p;

}
void Remove(int p){

    cnt-=total[p]*total[p]*p;
    total[p]--;
    cnt+=total[p]*total[p]*p;

}

bool comp(query a, query b){

    if(a.l/sq==b.l/sq)return a.r<b.r;
    return a.l/sq<b.l/sq;

}

int main(){

    int n,t;
    scanf("%d %d", &n, &t);

    sq=sqrt(n);

    for(int i=1; i<=n; i++){

        scanf("%d", &arr[i]);

    }
    for(int i=1; i<=t; i++){


        scanf("%d %d", &vv[i].l, &vv[i].r);
        vv[i].id=i;

    }
    sort(vv+1, vv+t+1, comp);
    int L,R;

    for(int i=1; i<=t; i++){

        if(i==1){

            L=vv[i].l;
            R=vv[i].l;
            add(arr[L]);

        }
        while(L<vv[i].l){

            Remove(arr[L]);
            L++;
            if(R<L){
                R=L;
                add(arr[L]);
            }

        }
        while(L>vv[i].l){

               L--;
               add(arr[L]);

        }

        while(R<vv[i].r){

            R++;
            add(arr[R]);

        }
        while(R>vv[i].r){
            Remove(arr[R]);
            R--;
        }
        ans[vv[i].id]=cnt;

    }
    for(int i=1; i<=t; i++)printf("%I64d\n", ans[i]);

}
