#include<bits/stdc++.h>
#define P(x,y) make_pair(x,y)
using namespace std;
const int MX = 300009;
struct node{
    int prefc , suffc , pref , suff , ans , sz;
    node(){}
    node(long long V){
        sz = 1;
        if(V < 0){
            prefc = suffc = -1;
            pref = suff = 1;
            ans = 1;
        }
        if(V == 0){
            prefc = suffc = 0;
            pref = suff = 0;
            ans = 0;
        }
        if(V > 0){
            prefc = suffc = 1;
            pref = suff = 1;
            ans = 1;
        }
    }
}tree[MX*4];
int idx[MX];
long long arr[MX];
node merge_(node left , node right){
    node ret;
    ret.sz = left.sz + right.sz;
    ret.prefc = left.prefc;
    ret.suffc = right.suffc;
    ret.pref = left.pref;
    if( (left.suffc == 1 || (left.suffc == -1 && right.prefc == -1)) && left.ans == left.sz )
        if(right.prefc != 0)
            ret.pref += right.pref;
    ret.suff = right.suff;
    if( (right.prefc == -1 || (right.prefc == 1 && left.suffc == 1)) && right.ans == right.sz )
        if(left.suffc != 0)
            ret.suff += left.suff;
    ret.ans = max(left.ans , right.ans);
    if( (left.suffc == 1 || (left.suffc == -1 && right.prefc == -1) ))
        if(right.prefc != 0)
            ret.ans = max(ret.ans , left.suff + right.pref);
    return ret;
}
void build(int x , int a , int b){
    if(a == b){
        idx[a] = x;
        tree[x] = node(arr[a]);
        return;
    }
    build(x*2 , a , (a+b)/2);
    build(x*2+1 , (a+b)/2+1 , b);
    tree[x] = merge_(tree[x*2] , tree[x*2+1]);
}
void nk7(int pos){
    //cout<<"#"<<pos<<' '<<idx[pos]<<endl;
    int x = idx[pos];
    tree[x] = node(arr[pos]);
    x/=2;
    while(x > 0){
        tree[x] = merge_(tree[x*2] , tree[x*2+1]);
        x/=2;
    }
}
int A[MX] , n , QN;
int main(){
    scanf("%d",&n);
    for(int j=1;j<=n;j++) scanf("%d",&A[j]);
    scanf("%d",&QN);
    if(n == 1){
        while(QN--){
            puts("1");
        }
        return 0;
    }
    for(int j=1;j<n;j++)
        arr[j] = A[j+1] - A[j];
    --n;
    build(1,1,n);
    while(QN--){
        int l , r , K;
        scanf("%d %d %d",&l,&r,&K);
        if(l != 1){
            arr[l-1] += K;
            nk7(l-1);
        }
        if(r != n + 1){
            arr[r] -= K;
            nk7(r);
        }
/*        for(int j=1;j<=n;j++)
            cout<<arr[j]<<' ';
        cout<<endl; */
        printf("%d\n",tree[1].ans + 1);
    }
}
