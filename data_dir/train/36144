#include <bits/stdc++.h>
 
using namespace std;
 
#define SPEED ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define fileio freopen("in.in", "r", stdin),freopen("out.out", "w", stdout);
#define ll long long int
#define FF first
#define SS second
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define pll pair<long long int,long long int>
#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%lld",&x)
#define pd(x) printf("%d\n",x)
#define plld(x) printf("%lld\n",x)
#define pss printf
#define MOD 1000000007
#define INF 1e18
#define eps 0.00001
#define endl '\n'
#define debug(n1) cout<<n1<<endl
ll n;
ll a[200005];
struct line 
{
    ll k, b;
    line(ll _k = 0,ll _b = 0) {
        k = _k; b = _b;
    }
    ll get(ll x) 
    {
        return k * x + b;
    }
} tree[800005];
bool vis[800005];
void add(ll l,ll r,ll i,line a)
{
	if(!vis[i])
	{
		vis[i]=1;
		tree[i]=a;
		return;
	}
	if(tree[i].get(l)>a.get(l)&&tree[i].get(r)>a.get(r))
		return;
	if(tree[i].get(l)<=a.get(l)&&tree[i].get(r)<=a.get(r))
	{	
		tree[i]=a;
		return;
	}
	ll mid=(l+r)>>1;
	if(tree[i].get(l)<a.get(l))
		swap(tree[i],a);
	if(tree[i].get(mid)>a.get(mid))
		add(mid+1,r,2*i+1,a);
	else
	{
		swap(tree[i],a);
		add(l,mid,2*i,a);
	}
}
ll qur(ll l,ll r,ll i,ll x)
{
	if(!vis[i])
		return -INF;
	if(l==r)
		return tree[i].get(x);
	ll mid=(l+r)>>1;
	ll ans=tree[i].get(x);
	if(x<=mid)
		ans=max(ans,qur(l,mid,2*i,x));
	else
		ans=max(ans,qur(mid+1,r,2*i+1,x));
	return ans;
}
int main()
{
	
	SPEED;
	cin>>n;
	ll ans=0;
	for(int i=1;i<=n;i++)
		cin>>a[i],ans+=a[i]*i;
	for(int i=1;i<=n;i++)
		a[i]+=a[i-1];
	ll oans=ans;
	for(int i=1;i<=n;i++)
	{
		line y=line(a[i]-a[i-1],-i*(a[i]-a[i-1])+a[i]);
		add(1,n,1,y);
		ll x=qur(1,n,1,i)-a[i];
		ans=max(ans,oans+x);		
	}
	memset(vis,0,sizeof vis);
	for(int i=n;i>=1;i--)
	{
		line y=line(a[i]-a[i-1],a[i-1]-i*(a[i]-a[i-1]));
		add(1,n,1,y);
		ll x=qur(1,n,1,i)-a[i-1];
		ans=max(ans,oans+x);
	}
	cout<<ans<<endl;
}