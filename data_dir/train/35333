#include<bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; ++i )
#define clr( t , val ) memset( t , val , sizeof( t ) ) 

#define pb push_back
#define all( v ) v.begin() , v.end()
#define SZ( v ) ((int)(v).size())

#define fi first
#define se second
#define mp make_pair

#define MOD 1000000007LL
#define N 100000

typedef long long ll;
typedef vector< ll > vll;

ll F[ N + 5 ] , FP[ N + 5 ];
ll TEN[ N + 5 ];
ll pow( ll a , ll b , ll c ){
    ll ans = 1;
    while( b ){
        if( b & 1 ) ans = ( ans * a )%c;
        a = ( a * a )%c;
        b >>= 1;
    }
    return ans;
}
ll mod_inv( ll a , ll p ){
    return pow( a , p - 2 , p );
}
void init(){
    F[ 0 ] = 1;
    for( int i = 1 ; i <= N ; ++i ) 
        F[ i ] = ( (ll) i * F[ i - 1 ] )%MOD;
    FP[ N ] = mod_inv( F[ N ] , MOD ) ;
    for( int i = N - 1 ; i >= 0 ; --i ) 
        FP[ i ] = ( (ll)FP[ i + 1 ]*( i + 1 ) )%MOD;
    TEN[ 0 ] = 1;
    for( int i = 1 ; i <= N ; ++i ) TEN[ i ] = ( TEN[ i - 1 ] * 10LL ) %MOD;
}
ll comb( int n , int k ){
    if( k > n ) return 0;
    ll ans = F[ n ];
    ans = ( ans * FP[ k ] )%MOD;
    ans = ( ans * FP[ n - k ] )%MOD;
    return ans;
}
int main(){
    ios_base :: sync_with_stdio( 0 );
    init();
    int n , k;
    string s;
    while( cin >> n >> k >> s ){
        vll d( n ) , sd( n );
        REP( i , n ) d[ i ] = s[ i ] - '0';
        sd[ 0 ] = d[ 0 ];
        for( int i = 1 ; i < n ; ++i ) sd[ i ] = d[ i ] + sd[ i - 1 ];
        ll ans = 0;
        REP( i , n ) {
            ll x = d[ i ];
            x = ( x * TEN[ n - 1 - i ] )%MOD;
            x = ( x * comb( i , k ) )%MOD;
            ans = ( ans + x )%MOD;
        }
        for( int L = 0 ; L <= n - 2 ; ++L ){
            ll x = sd[ n - 2 - L ];
            x = ( x * TEN[ L ] )%MOD;
            x = ( x * comb( n - L - 2 , k - 1 ) )%MOD;
            ans = ( ans + x )%MOD;
        }
        cout << ans << '\n';
    }   
}
