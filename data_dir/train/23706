#ifdef DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <random>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

mt19937 mrand(random_device{} ()); 

int rnd(int x) {
  return mrand() % x;
}

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;
typedef long long ll;

#ifdef DEBUG
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
#define eprintf(...) ;
#endif

#define pb push_back
#define mp make_pair
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int inf = (int) 1.01e9;
const ld eps = 1e-9;
const ld pi = acos((ld) -1.0);

void precalc() {
}

int n;

int read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  return 1;
}

map<long long, long long> added;

long long getPath(long long s, long long t, long long toadd) {
  long long res = 0;
  while (s != t) {
    if (s < t) {
      swap(s, t);
    }
    res += added[s];
    added[s] += toadd;
    s /= 2;
  }
  return res;
}

void solve() {
  added.clear();
  for (int iter = 0; iter < n; ++iter) {
    int type;
    long long s, t;
    scanf("%d" LLD LLD, &type, &s, &t);
    if (type == 1) {
      int toadd;
      scanf("%d", &toadd);
      getPath(s, t, toadd);
    } else {
      long long res = getPath(s, t, 0);
      printf(LLD "\n", res);
    }
  }
}

int main() {
  precalc();
#ifdef LOCAL
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time %.2f\n", (double) clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
