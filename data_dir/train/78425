//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 300005

struct st
{
	ll forward[2],backward[2];
	int size;
	st()
	{
		size=0;
		forward[0]=forward[1]=backward[0]=backward[1]=0;
	}
}tree[4*maxn];
ll power1[maxn],power2[maxn];
int n,arr[maxn],base1=127,base2=129,mod1=mod,mod2=mod+2;
vector<int>ranges;

ll add1(ll x,ll y)
{
	return (x+y)%mod1;
}
ll add2(ll x,ll y)
{
	return (x+y)%mod2;
}
ll mul1(ll x,ll y)
{
	return (x*y)%mod1;
}
ll mul2(ll x,ll y)
{
	return (x*y)%mod2;
}
void init(int node,int a,int b)
{
	tree[node].size=b-a+1;
	if(a==b)
	return;
	int mid=(a+b)/2;
	init(2*node,a,mid);
	init(2*node+1,mid+1,b);
}
void update(int node,int a,int b,int ind)
{
	if(a>b || a>ind || b<ind)
	return;
	if(a==b)
	{
		tree[node].forward[0]=1;
		//tree[node].forward[1]=1;
		tree[node].backward[0]=1;
		//tree[node].backward[1]=1;
		return;
	}
	int mid=(a+b)/2;
	if(ind<=mid)
	update(2*node,a,mid,ind);
	else
	update(2*node+1,mid+1,b,ind);
	
	tree[node].forward[0]=tree[2*node+1].forward[0];
	tree[node].forward[0]=add1(tree[node].forward[0],mul1(tree[2*node].forward[0],power1[tree[2*node+1].size]));
	//tree[node].forward[1]=tree[2*node+1].forward[1];
	//tree[node].forward[1]=add2(tree[node].forward[1],mul2(tree[2*node].forward[1],power2[tree[2*node+1].size]));

	tree[node].backward[0]=tree[2*node].backward[0];
	tree[node].backward[0]=add1(tree[node].backward[0],mul1(tree[2*node+1].backward[0],power1[tree[2*node].size]));
	//tree[node].backward[1]=tree[2*node].backward[1];
	//tree[node].backward[1]=add2(tree[node].backward[1],mul2(tree[2*node+1].backward[1],power2[tree[2*node].size]));
}
void query(int node,int a,int b,int l,int r)
{
	if(a>b || a>r || b<l)
	return;
	if(a>=l && b<=r)
	{
		ranges.pb(node);
		return;
	}
	int mid=(a+b)/2;
	query(2*node,a,mid,l,r);
	query(2*node+1,mid+1,b,l,r);
}
ll get_forward()
{
	ll res1=0;
	//ll res2=0;
	int size=0;
	for(int i=ranges.size()-1;i>=0;i--)
	{
		res1=add1(res1,mul1(tree[ranges[i]].forward[0],power1[size]));
		//res2=add2(res2,mul2(tree[ranges[i]].forward[1],power2[size]));
		size+=tree[ranges[i]].size;
	}
	//return {res1,res2};
	return res1;
}
ll get_backward()
{
	ll res1=0;
	//ll res2=0;
	int size=0;
	for(int i=0;i<ranges.size();i++)
	{
		res1=add1(res1,mul1(tree[ranges[i]].backward[0],power1[size]));
		//res2=add2(res2,mul2(tree[ranges[i]].backward[1],power2[size]));
		size+=tree[ranges[i]].size;
	}
	//return {res1,res2};
	return res1;
}
int palindrome(int l,int r)
{
	if(l>=r)
	return 1;
	ranges.clear();
	query(1,1,n,l,r);
	ll forw=get_forward();
	ll backw=get_backward();
	return forw==backw;
}
int main()
{
	boost1;boost2;
	int i,j,x;
	power1[0]=1;
	power2[0]=1;
	for(i=1;i<maxn;i++)
	{
		power1[i]=mul1(base1,power1[i-1]);
		power2[i]=mul2(base2,power2[i-1]);
	}
	cin>>n;
	init(1,1,n);
	for(i=1;i<=n;i++)
	cin>>arr[i];
	/*for(i=1;i<=3;i++)
	update(1,1,n,arr[i]);
	cout<<palindrome(1,3)<<endl;*/
	for(i=1;i<=n;i++)
	{
		update(1,1,n,arr[i]);
		x=min(arr[i]-1,n-arr[i]);
		if(!palindrome(arr[i]-x,arr[i]+x))
		{
			//cout<<i<<endl;
			cout<<"YES";
			return 0;
		}
	}
	cout<<"NO";
	return 0;
}
