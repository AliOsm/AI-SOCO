#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <map>
#include <queue>
#include <set>
#include <iomanip>
#include <deque>
#include <cassert>
#include <ctime>
#include <cstring>
#include <cstdlib>
#include <chrono>
#include <ctime>
#include <random>
#include <stack>
#include <unordered_set>
#include <unordered_map>
#include <iterator>
#include <climits>
using namespace std;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
typedef long long ll;
typedef long double ld;
#define INF 2001001001
#define MOD 1000000007

int dp[2001][2001];
int N,H,L,R;
int A[2001];

int main()
{
  //ios_base::sync_with_stdio(0);cin.tie(0);
  //freopen (".in","r",stdin);
  //freopen (".out","w",stdout);
  cin>>N>>H>>L>>R;
  for (int i=0;i<N;i++)
    cin>>A[i];
  for (int j=0;j<=N;j++)
    for (int i=0;i<H;i++)
      dp[j][i]=-INF;
  dp[0][0]=0;
  for (int i=0;i<N;i++)
    for (int j=0;j<H;j++){
      if ((j+A[i])%H>=L && (j+A[i])%H<=R)
	dp[i+1][(j+A[i])%H]=max(dp[i+1][(j+A[i])%H],dp[i][j]+1);
      else
	dp[i+1][(j+A[i])%H]=max(dp[i+1][(j+A[i])%H],dp[i][j]);
      A[i]--;
      if ((j+A[i])%H>=L && (j+A[i])%H<=R)
	dp[i+1][(j+A[i])%H]=max(dp[i+1][(j+A[i])%H],dp[i][j]+1);
      else
	dp[i+1][(j+A[i])%H]=max(dp[i+1][(j+A[i])%H],dp[i][j]);
      A[i]++;
    }
  int ans=0;
  for (int i=0;i<H;i++){
    ans=max(ans,dp[N][i]);
  }
  cout<<ans<<endl;
  return 0;
}
