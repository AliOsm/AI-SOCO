/*
 by skydog
 */
#include <iostream>
#include <cstdio>
#include <vector>
#include <utility>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <deque>
#include <cassert>

using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> l4;

#define mp make_pair
#define pb push_back

const int maxn = 2e5+1;
int n, m;
vector<int> g[maxn];
multiset<int> sz_set;
int sz;
set<int> unvis;
void dfs(int cur)
{
    ++sz;
    for (int i = 0; i+1 < g[cur].size(); ++i)
    {
        for (;;)
        {
            auto it = unvis.upper_bound(g[cur][i]);
            if (it == unvis.end() || *it >= g[cur][i+1])
                break;
            int nxt = *it;
            unvis.erase(it);
            dfs(nxt);
        }
    }
    
}
int main()
{
    scanf("%d %d", &n, &m);
    for (int i = 0; i < m; ++i)
    {
        int x, y;
        scanf("%d %d", &x, &y);
        g[x].pb(y);
        g[y].pb(x);
    }
    for (int i = 1; i <= n; ++i)
    {
        unvis.insert(i);
        g[i].pb(0);
        sort(g[i].begin(), g[i].end());
        g[i].pb(n+1);
    }
    while (!unvis.empty())
    {
        int cur = *unvis.begin();
        unvis.erase(unvis.begin());
        sz = 0;
        dfs(cur);
        sz_set.insert(sz);
    }
    printf("%d\n", sz_set.size());
    for (auto e : sz_set)
        printf("%d ", e);
    puts("");
}
