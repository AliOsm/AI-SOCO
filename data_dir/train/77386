//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
#define mem(a,v) memset((a), (v), sizeof (a))
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int i = 0; i < (n); i++) ni(a[i])
#define nal(a, n) for (int i = 0; i < (n); i++) nl(a[i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pil pair<int, long long>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vil vector<pil>
#define vll vector<pll>
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> oset;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const ll INF = 1e16 + 7;
const int MAXN = 3e5 + 5;
const double eps = 1e-9;
int seg[MAXN*4];

void upd(int l, int r, int k, int a, int v) {
	if (r < a || a < l) return;
	if (l == r) { seg[k] = v; return; }
	int m = (l+r) / 2;
	upd(l,m,k*2,a,v); upd(m+1,r,k*2+1,a,v);
	seg[k] = min(seg[k*2],seg[k*2+1]);
}

int qry(int l, int r, int k, int a) {
	if (a < l) return INF;
	if (r <= a) return seg[k];
	int m = (l+r) / 2;
	return min(qry(l,m,k*2,a),qry(m+1,r,k*2+1,a));
}

int a[MAXN], b[MAXN];

void solve() {
	int n; ni(n);
	set<pii> cur;
	for (int i = 0; i < n; i++) {
		ni(a[i]);
		upd(0,n-1,1,i,a[i]);
		cur.insert(mp(a[i],i));
	}
	nai(b, n);
	for (int i = 0; i < n; i++) {
		auto it = cur.lower_bound(mp(b[i],-1));
		if ((*it).fi != b[i] || qry(0,n-1,1,(*it).se) < b[i]) {
			printf("NO\n");
			return;
		}
		upd(0,n-1,1,(*it).se,INF);
		cur.erase(it);
	}
	printf("YES\n");
}

int main() {
	int t; ni(t);
	while (t--) solve();
    return 0;
}
