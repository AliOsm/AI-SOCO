#include<bits/stdc++.h>
using namespace std;
const int MAXN = 2e5  + 1;

int n, cnt, deg[MAXN];
vector<int> g[MAXN];
bool used[MAXN];
vector<int> comp;

void dfs (int v) {
	used[v] = true;
	comp.push_back (v);
	for (size_t i=0; i<g[v].size(); ++i) {
		int to = g[v][i];
		if (! used[to])
			dfs (to);
	}
}

void find_comps() {
	for (int i=1; i<=n; ++i)
		used[i] = false;
	for (int i=1; i<=n; ++i)
		if (!used[i]) {
			comp.clear();
			dfs (i);
			bool ok = true;
			for (auto v : comp) ok &= deg[v] == 2;
			if (ok) ++cnt;
		}
}
int main()
{
      int m;
      cin >> n >> m;
      while(m--)
      {
            int a, b;
            cin >> a >> b;
            g[a].push_back(b);
            g[b].push_back(a);
            ++deg[a];
            ++deg[b];
      }
      find_comps();
      cout << cnt;
}
