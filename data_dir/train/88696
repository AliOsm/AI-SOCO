#include<bits/stdc++.h>
using namespace std;
class edge
{
    public:
        int e,nxt,w,cap;
        edge(int e1=-1,int nxt1=-1,int w1=0,int cap1=0)
        {
            e=e1,nxt=nxt1,w=w1,cap=cap1;
        }
};
int dis[710],inflow[710],last[710],tot=0;
int ss,tt;
class graph
{
    public:
        edge g[100000];
        int head[710],tmpcnt;
        void init()
        {
            memset(head,255,sizeof(head));
            tmpcnt=0;
        }
        void addedge(int s,int e,int cap,int w)
        {
            g[tmpcnt]=edge(e,head[s],w,cap),head[s]=tmpcnt++;
            g[tmpcnt]=edge(s,head[e],-w,0),head[e]=tmpcnt++;
        }
        bool spfa()
        {
            queue<int> q;
            memset(dis,0x3f,sizeof(dis));
            dis[ss]=0;
            inflow[ss]=0x3f3f3f3f;
            q.push(ss);
            while(!q.empty())
            {
                int fr=q.front();q.pop();
                for(int i=head[fr];i!=-1;i=g[i].nxt)
                {
                    if(g[i].cap>0&&dis[g[i].e]>dis[fr]+g[i].w)
                    {
                        dis[g[i].e]=dis[fr]+g[i].w;
                        inflow[g[i].e]=min(inflow[fr],g[i].cap);
                        last[g[i].e]=i;
                        q.push(g[i].e);
                    }
                }
            }
            return dis[tt]!=0x3f3f3f3f;
        }
        void update()
        {
            int np=tt;
            while(np!=ss)
            {
                g[last[np]].cap-=inflow[tt];
                g[last[np]^1].cap+=inflow[tt];
                np=g[last[np]^1].e;
            }
            tot+=dis[tt]*inflow[tt];
        }
        void ek()
        {
            while(spfa())
                update();
        }
}G;
int a[100],c[100],pre[100],L[100],n,K;
int main()
{
	G.init();
	scanf("%d%d",&n,&K);
	ss=n*2+1;tt=n*2+2;
	for(int i=1;i<=n;i++)scanf("%d",&a[i]);
	for(int i=1;i<=n;i++)scanf("%d",&c[i]);
	for(int i=1;i<=n;i++)
	{
		G.addedge(ss,i,1,c[a[i]]);
		G.addedge(i,i+n,1,0);
		G.addedge(i+n,tt,1,0);
		if(i<n&&K>1)G.addedge(i,i+1,K-1,0);
		if(L[a[i]])G.addedge(i-1,L[a[i]]+n,1,-c[a[i]]);
		L[a[i]]=i;
	}
	G.ek();
	printf("%d\n",tot);
	return 0;
}