//AC PLS
 
#include <bits/stdc++.h>
using namespace std;
 
int n, visited[100005];
long long a[100005];
vector<int> adj[70];
 
int solve(int asal, int tujuan) {
	queue<int> q;
	q.push(asal);
	visited[asal] = 0;
 
	while (!q.empty()) {
		int u = q.front();
		q.pop();

		for (int i = 0; i <= 61; i++) {
			if (a[u] & (1LL << i)) {
				for (auto &v : adj[i]) {
					if (v == asal && u == tujuan || u == asal && v == tujuan) continue;
	 
					if (visited[v] == -1) {
						q.push(v);
						visited[v] = visited[u] + 1;
					}
				}
			}
		}
	}

	if (visited[tujuan] != -1) {
		return visited[tujuan] + 1;
	} else {
		return INT_MAX;
	}
}
 
int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%lld", &a[i]);
 
		for (int j = 0; j <= 61; j++) {
			if (a[i] & (1LL << j)) {
				adj[j].push_back(i);
			}
		}
	}

	for (int i = 0; i <= 61; i++) {
		if (adj[i].size() >= 3) {
			printf("3\n");
			return 0;
		}
	}

	int res = INT_MAX;
	for (int i = 0; i <= 61; i++) {
		if (adj[i].size() == 2) {
			memset(visited, -1, sizeof(visited));
			res = min(res, solve(adj[i][0], adj[i][1]));
		}
	}

	if (res == INT_MAX) {
		printf("%d\n", -1);
	} else {
		printf("%d\n", res);
	}
 
	return 0;
}