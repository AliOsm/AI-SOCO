#include <bits/stdc++.h>

using namespace std;
typedef  long long ll;
typedef unsigned long long ull;
int inf_int=1e8;
ll inf_ll=1e17;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
#define pb push_back
const double pi=3.1415926535898;
#define dout if(debug) cout
#define fi first
#define se second
#define sp setprecision
#define siz(a) a.size()

const ll mod = 1e9+9;
const int MAXN =5e5+10;
bool debug = false;

typedef long double dbl;

struct vertex{
   vertex *l,*r;
   int val = 0;

   vertex(int x){
      val = x;
      l = r = NULL;
   }

   vertex(vertex* L,vertex* R){
      l = L, r = R;
      val = 0;
      if(L)
        val+=l->val;
      if(R)
        val+=r->val;
   }
};

vertex* build(int tl,int tr){
    if(tl==tr){
        return new vertex(0);
    } else {
        int tm = (tl+tr)>>1;
        return new vertex(
                build(tl,tm),
                          build(tm+1,tr));
    }
}

vertex* update(vertex* v,int tl,int tr,int pos,int val){
    if(tl==tr){
        return new vertex(v->val + val);
    } else {
        int tm=(tl+tr)>>1;
        if(pos<=tm){
            return new vertex(update(v->l,tl,tm,pos,val),v->r);
        } else {
            return new vertex(v->l,update(v->r,tm+1,tr,pos,val));
        }
    }
}

int get(vertex* v,int tl,int tr,int l,int r){
    if(l>r){
        return 0;
    } else if(tl==l && tr==r){
        return v->val;
    } else{
        int tm=(tl+tr)>>1;
        return get(v->l,tl,tm,l,min(r,tm))+get(v->r,tm+1,tr,max(tm+1,l),r);
    }
}

vector<int> pos[MAXN];
int a[MAXN];

vertex* tree[MAXN];
void solve()
{
    int n,k;
    cin >> n >> k;
    tree[0] = build(1,n);
    for(int i=1;i<=n;++i){
        int x;
        cin >> x;
        pos[x].pb(i);
        tree[i] = update(tree[i-1],1,n,i,1);
        if(pos[x].size()>k){
            tree[i] = update(tree[i],1,n,pos[x][pos[x].size()-k-1],-1);
        }

    }
    int q;
    cin >> q;
    int ans = 0;
    for(int i=1;i<=q;++i){
        int x,y;
        cin >> x >> y;
        int l = (x+ans)%n+1,r =(y+ans)%n+1;
        if(l>r)
            swap(l,r);

        ans = get(tree[r],1,n,l,r);
        cout << ans <<"\n";
    }

}



#define FILE "close-vertices"
int main()
{
        #ifdef zxc
            freopen("input.txt","r",stdin);
            //freopen("output.txt","w",stdout);
        #else

        #endif // zxc


         ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);



        int t=1;
        while(t--)
           solve();
        return 0;
}
