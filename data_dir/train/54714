/*input
2 3
1 2 1
2 1 2
*/

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll , ll> PLL;
typedef long double ld;

#define pb push_back
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
int mod = 1000000007;
#define PI 3.14159265
#define endl '\n'
#define debug(x) cout << #x << " = " << x << endl;
#define MAX 100001

template < typename T > T GCD(T a, T b)            { ll t; while(a) { t = a; a = b % a; b = t; } return b; }
template < typename T > string toString(T a)       { return to_string(a); }
template < typename T > void toInt(string s, T &x) { stringstream str(s); str >> x;}
inline int add(ll a, ll b) {a += b; if (a < 0) a += mod; return a;}
inline int sub(ll a, ll b) {a -= b; if (a < 0) a += mod; return a;}
inline int mul(ll a, ll b) {return (a * 1ll * b) % mod;}
inline int pwr(ll x, ll y) {
    int ans = 1 % mod;
    while (y) {
        if (y & 1) ans = mul(ans, x);
        x = mul(x, x);
        y >>= 1;
    }
    return ans;
}
inline int inv(int a) {return pwr(a, mod - 2);}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n, m;
    cin >> n >> m;
    vector <vector <int> > vec(n, vector <int> (m)), ans(n, vector <int> (m));
    vector <int> row[n + 1], col[m + 1];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> vec[i][j];
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            row[i].pb(vec[i][j]);
        }
        sort(all(row[i]));
        row[i].resize(unique(all(row[i])) - row[i].begin());
    }
    for (int j = 0; j < m; j++) {
        for (int i = 0; i < n; i++) {
            col[j].pb(vec[i][j]);
        }
        sort(all(col[j]));
        col[j].resize(unique(all(col[j])) - col[j].begin());
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            int x = vec[i][j];
            int rl = lower_bound(all(row[i]), x) - row[i].begin();
            int cl = lower_bound(all(col[j]), x) - col[j].begin();
            int rg = row[i].size() - rl;
            int cg = col[j].size() - cl;
            ans[i][j] = max(rl, cl) + max(rg, cg);
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++)
            cout << ans[i][j] << " ";
        cout << endl;
    }


    return 0;
}