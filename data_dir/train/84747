#include <cassert>
#include <cstdio>
#include <cstring>

int const MAX_N = 502;
int const MAX_L = MAX_N * MAX_N * 5;

bool a [MAX_N] [MAX_N];
bool b [MAX_N] [MAX_N];
int ansr [MAX_L];
int ansc [MAX_L];
char ansd [MAX_L];
int ansk;

int const DIRS = 4;
int const DR [DIRS] = {-1,  0, +1,  0};
int const DC [DIRS] = { 0, -1,  0, +1};

void add (int r, int c, char d)
{
	assert (ansk < MAX_L);
	ansr[ansk] = r;
	ansc[ansk] = c;
	ansd[ansk] = d;
	ansk++;
}

void recur (int r, int c, bool f)
{
	if (!a[r][c] || b[r][c])
	{
		return;
	}
	b[r][c] = true;

	add (r, c, 'B');
	for (int d = 0; d < DIRS; d++)
	{
		int nr = r + DR[d];
		int nc = c + DC[d];
		recur (nr, nc, true);
	}

	if (f)
	{
		add (r, c, 'D');
		add (r, c, 'R');
	}
}

int main (void)
{
	int n, m;
	while (scanf (" %d %d", &n, &m) > 0)
	{
		memset (a, 0, sizeof (a));
		for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= m; j++)
			{
				char ch;
				scanf (" %c", &ch);
				a[i][j] = (ch == '.');
			}
		}

		ansk = 0;
		memset (b, 0, sizeof (b));
		for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= m; j++)
			{
				recur (i, j, false);
			}
		}

		printf ("%d\n", ansk);
		for (int k = 0; k < ansk; k++)
		{
			printf ("%c %d %d\n", ansd[k], ansr[k], ansc[k]);
		}
	}
	return 0;
}
