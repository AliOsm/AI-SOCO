#include <bits/stdc++.h>
using namespace std;

#ifdef SG
	#include <debug.h>
#else
	#define show(...)
	#define debug(...)
	#define deepen(...)
	#define timer(...)
#endif

#define ARG4(_1,_2,_3,_4,...) _4

#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)

#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)

#define forv(i,v) for (auto i = v.begin(); i != v.end(); ++i)
#define forr(i,v) for (auto i = v.end(); i != v.begin() && (--i, 1); )
#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T> inline T abs (T x) {return x > T() ? x : -x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 1000100;
int a[N];
double ans[N];
ll pref[N];

double one_point(int i) {
	return 1.0 * pref[i + 1] / (i + 1);
}

double two_points(int i, int l) {
	return 1.0 * (pref[i + 1] - pref[l + 1]) / (i - l);
}

int main () {
	std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
	cout.setf(ios::showpoint | ios::fixed);
	cout.precision(20);
#ifdef SG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
#endif
	int n;
	cin >>  n;
	pref[0] = 0ll;
	forn(i, n) {
		cin >> a[i];
		pref[i + 1] = pref[i] + a[i];
    }
    vi st;
    forn(i, n) {
    	while (!st.empty()) {
    		if (st.size() == 1) {
    			if (one_point(st.back()) > one_point(i)) { 
    				st.pop_back();
    				continue;
    			}
    		} else {
    			int prev = st[sz(st) - 2];
    		    if (two_points(st.back(), prev) > two_points(i, prev)) { 
    				st.pop_back();
    				continue;
    			}
    		}
    		break;
    	}
    	st.push_back(i);
    }
    int last = 0;
    forn(i, st.size()) {
    	int l = last;
    	int r = st[i] + 1;
    	last = r;
    	double mean = 1.0 * (pref[r] - pref[l]) / (r - l);
    	for (int j = l; j < r; ++j) {
    		ans[j] = mean;
    	}
    }
    forn(i, n) {
    	cout << ans[i] << '\n';
    }
    cout << endl;

	return 0;
}
