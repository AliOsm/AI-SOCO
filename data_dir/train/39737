#include <bits/stdc++.h>
using namespace std;

signed main() {
  ios::sync_with_stdio(false);

  int Te;
  cin >> Te;
  
  while (Te--) {
    int N;
    cin >> N;

    vector<vector<int>> G(N);
    for (int i = 0; i + 1 < N; ++i) {
      int a, b;
      cin >> a >> b;
      G[a - 1].push_back(b - 1);
      G[b - 1].push_back(a - 1);
    }

    vector<int> X; {
      int K1;
      cin >> K1;
      X.resize(K1);
      for (int i = 0; i < K1; ++i) {
        cin >> X[i];
        --X[i];
      }
    }

    vector<int> Y; {
      int K2;
      cin >> K2;
      Y.resize(K2);
      for (int i = 0; i < K2; ++i) {
        cin >> Y[i];
        --Y[i];
      }
    }

    auto query = [](int r, int u) {
      assert(r < 2);
      cout << char('A' + r) << " " << u + 1 << endl;
      int res;
      cin >> res;
      return res - 1;
    };

    auto nearest_nbr = [&](int s) {
      set<int> bag(X.begin(), X.end());
      if (bag.count(s)) return s;
      vector<bool> vis(N);
      queue<int> que;
      que.push(s);
      vis[s] = 1;
      while (que.size()) {
        int u = que.front();
        que.pop();
        for (int v : G[u]) {
          if (vis[v]) continue;
          if (bag.count(v)) return v;
          vis[v] = 1;
          que.push(v);
        }
      }
      assert(false);
      return -1;
    };

    int u1 = Y[0];
    int u0 = query(1, u1);
    int v0 = nearest_nbr(u0);
    int v1 = query(0, v0);
    if (count(Y.begin(), Y.end(), v1)) {
      int r = query(1, v1);
      cout << "C " << r + 1 << endl;
    } else {
      cout << "C -1" << endl;
    }
  }

  return 0;
}
