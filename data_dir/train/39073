#include <bits/stdc++.h>
#define ll long long
#define pll pair <ll,ll>

using namespace std;

#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "

const ll N = 110;
const ll K = 26;

char s[N];
vector <ll> v[K];

ll Dp[N][N];
bool Vis[N][N];
queue <pll> q;

int main()
{
    ll n,k; cin >> n >> k;

    scanf("%s",s+1);

    for(ll i = 1; i <= n; i++)  s[i] -= 'a', v[s[i]].push_back(i);

    q.push(pll(0,0));
    Vis[0][0] = 1;
    Dp[0][0] = 1;

    while(!q.empty())
    {
        pll p = q.front();  q.pop();

        ll Node = p.first;
        ll Dist = p.second;

        assert(Vis[Node][Dist]);

        for(ll i = 0; i < K; i++)
        {
            auto nxt = upper_bound(v[i].begin(),v[i].end(),Node);

            if(nxt != v[i].end())
            {
                ll Goal = *nxt;

                if(!Vis[Goal][Dist+1])
                {
                    q.push(pll(Goal,Dist+1));
                    Vis[Goal][Dist+1] = true;
                }

                Dp[Goal][Dist+1] += Dp[Node][Dist];
                Dp[Goal][Dist+1] = min(Dp[Goal][Dist+1],k);
            }
        }
    }

    ll Ans = 0;
    ll Rem = k;

    for(ll Dist = n; ~Dist; Dist--)
    {
        ll Sum = 0;

        for(ll i = 0; i <= n; i++)  Sum += Dp[i][Dist];

        ll Need = min(Rem,Sum);
        Rem -= Need;
        Ans += (n - Dist)* Need;
    }

    if(Rem > 0) Ans = -1;

    cout << Ans;
}