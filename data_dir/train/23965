#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <hash_map>
#include <hash_set>
#include <vector>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iterator>
using namespace std;
#define mems(arr, val) memset(arr, val, sizeof(arr))
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define all(A) (A).begin(), A.end()
#define mp(a, b) make_pair(a, b)
#define forit(it, A) for(auto it = A.begin(); it != A.end(); it++)
typedef long long LL;
typedef pair<int, int> pii;
const LL INF = INT_MAX;
const int MAXN = 1001000;
const LL MOD = 1000000009;
int n,m;
vector<vector<int>> A(105);
int D[105][10005];
int rec(int N, int M)
{
	if (N == n)
	{
		if (M >= A[N].size()) return -999999999;
		return A[N][M];
	}

	int result = -999999999;
	if (D[N + 1][M] == -1)
	{
		D[N + 1][M] = rec(N + 1, M);
	}

	result = max(result, D[N + 1][M]);
	for(int i = 1; i <= min(M, (int)A[N].size() - 1); ++i)
	{
		if (D[N + 1][M - i] == -1)
		{
			D[N + 1][M - i] = rec(N + 1, M - i);
		}

		result = max(result, D[N + 1][M - i] + A[N][i]);
	}

	return result;

}

int main()
{
#ifdef MY_SOL
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("lights.in", "r", stdin); freopen("lights.out", "w", stdout);
#endif
	cin>>n>>m;
	for(int i = 1; i <= n; ++i)
	{
		int count;
		cin>>count;
		vector<int> tmp(count);
		forn(j, 0, count)
			cin>>tmp[j];
		A[i] = vector<int> (count + 1);
		vector<int> l(count + 1);
		l[0] = 0;
		forn(j, 0, count)
			l[j + 1] = l[j] + tmp[j];

		for(int j = 1; j <= count; ++j)
		{
			int maxval = 0;
			for(int k = 0; k <= j; ++k)
			{
				maxval = max(l[k] + (l[count] - l[count - (j - k)]), maxval);
			}

			A[i][j] = maxval;
		}

	}
	mems(D, -1);
	cout<<rec(1, m);

    return 0;
}