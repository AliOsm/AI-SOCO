#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update


#define f first
#define s second
#define pb push_back
#define mp make_pair
#define clr(dp,i) memset(dp,i,sizeof(dp))
#define opt     ios_base::sync_with_stdio(NULL);cin.tie(NULL);cout.tie(NULL);

using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> oset;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair<int, int> pii;
const long long mod = 1e9+7;
const ld pi = 3.14159265358979323846264338327950288;

//========================================

int main()
{
	int n, m;
	cin >> n >> m;
	int a[n];
	vector<int> vec[m];
	for(int i=0; i<n; i++)
	{
		cin >> a[i];
		vec[a[i]%m].pb(i);
	}
	ll ans = 0;
	vector<int> excess;
	for(int i=0; i<m*2; i++)
	{
		while(vec[i%m].size() > n/m)
		{
			excess.pb(vec[i%m].back());
			vec[i%m].pop_back();
		}
		while(vec[i%m].size() < n/m && !excess.empty())
		{
			int x = excess.back();
			excess.pop_back();
			vec[i%m].pb(x);
			ans += (i-(a[x]%m));
			a[x] += i - (a[x]%m);
		}
	}
	cout << ans << endl;
	for(int i=0; i<n; i++)
	cout << a[i] << " ";
	cout << endl;
}