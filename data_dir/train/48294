#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>*/
 
#define pb push_back
#define mp make_pair
#define sz(s) ((int)(s.size()))
#define all(s) s.begin(), s.end()
#define rep(i, a, n) for (int i = a; i <= n; ++i)
#define per(i, n, a) for (int i = n; i >= a; --i)
#define onlycin ios_base::sync_with_stdio(false); cin.tie(0) 
#define F first
#define S second
using namespace std;
// using namespace __gnu_pbds;
typedef long long ll;
typedef unsigned long long ull;
/*typedef tree<
pair < int, int >,
null_type,
less< pair < int, int > >,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;*/
// find_by_order() order_of_key()
const int MAXN = (int)5e5+228;
const char nxtl = '\n';
const int mod = (int)1e9+7;
const double eps = (double)1e-7;
template<typename T> inline bool updmin(T &a, const T &b) {return a > b ? a = b, 1 : 0;}
template<typename T> inline bool updmax(T &a, const T &b) {return a < b ? a = b, 1 : 0;}

string s, k;
bool similar(char c1, char c2) {
	if(isalpha(c1))
		c1 = tolower(c1); 
	if(isalpha(c2))
		c2 = tolower(c2);
	if(c1 == c2) return 1;
	if(c1 == '0' && c2 == 'o') return 1;
	if(c1 == 'o' && c2 == '0') return 1;
	vector < char > tmp = {'1', 'l', 'i'};
	for(auto &to : tmp) for(auto &it : tmp) if(c1 == to && c2 == it) return 1;
	return 0;
}

int main() {
	#ifdef accepted
		freopen(".in", "r", stdin);
		freopen(".out", "w", stdout);
	#endif
	onlycin;
	cin >> s;
	int n; cin >> n;
	rep(i, 1, n) {
		cin >> k;
		if(sz(k) != sz(s)) continue;
		bool ok = 0;
		rep(j, 0, sz(s)-1) if(!similar(s[j], k[j])) {
			ok = 1; break;
		}
		if(!ok) {
			cout << "No\n"; return 0;
		}
	}
	cout << "Yes\n";
	
	return 0;
}