#include <bits/stdc++.h>

#define pii pair<int, int>

#define pb push_back
#define mp make_pair

#define f first
#define s second

using namespace std;
typedef vector<int> big;

const double EPS = 1e-9;
const double PI = acos(-1);

const int MAXN = (int) 3000 + 7;
const int INF = (int) 1e9 + 7;

int n, m;

int f1, t1, len1;
int f2, t2, len2;

int d[MAXN][MAXN];

int from;
int ans = INF;

vector<int> g[MAXN];

void go() {
  queue<int> q;
  queue<int> clen;
  bool used[MAXN];
  memset(used, false, sizeof used);

  q.push(from);
  clen.push(0);
  used[from] = true;
  while (!q.empty()) {
    int v = q.front();
    int len = clen.front();
    
    if (d[f1][from] + len + d[t1][v] <= len1 && d[f2][from] + len + d[t2][v] <= len2) 
      ans = min(ans, len + d[f1][from] + d[f2][from] + d[t1][v] + d[t2][v]);
    if (d[f1][from] + len + d[t1][v] <= len1 && d[f2][v] + len + d[t2][from] <= len2) 
      ans = min(ans, len + d[f1][from] + d[f2][v] + d[t1][v] + d[t2][from]);
    
    q.pop(); clen.pop();
    for (auto to : g[v]) {
      if (!used[to]) {
        used[to] = true;
        q.push(to);
        clen.push(len + 1);
      }
    }
  }
}

void bfs(int st) {
  queue<int> q;
  bool used[MAXN];
  memset(used, false, sizeof used);

  q.push(st);
  used[st] = true;
  while (!q.empty()) {
    int v = q.front();
    q.pop();
    for (auto to : g[v]) {
      if (!used[to]) {
        used[to] = true;
        d[st][to] = d[st][v] + 1;
        q.push(to);
      }
    }
  }
}

int main() {
  #ifdef LOCAL
  freopen("in", "r", stdin);
  #endif

  scanf("%d%d", &n, &m);
  for (int i = 1; i <= m; i++) {
    int u, v;
    scanf("%d%d", &u, &v);
    g[u].pb(v), g[v].pb(u);
  }                        
  scanf("%d%d%d", &f1, &t1, &len1);
  scanf("%d%d%d", &f2, &t2, &len2);
  
  bfs(f1);
  bfs(f2);
  bfs(t1);
  bfs(t2);

  for (from = 1; from <= n; from++) {
    go();
  }
  if (d[f1][t1] <= len1 && d[f2][t2] <= len2)
    ans = min(ans, d[f1][t1] + d[f2][t2]);

  if (ans == INF)
    ans = m + 1;

  cout << m - ans;
  return 0;
}