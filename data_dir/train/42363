#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;
const int mod = 1000000007;
int a[1000010], b[1000010];
int dp[1000010][20][2], n;
inline void add(int &x, long long t) {
	x += t;
	if (x >= mod) x -= mod;
}
int go(int x, int f, int t) {
	for (int i = 0; i <= n; i++) {
		for (int j = 0; j <= f; j++) {
			for (int k = 0; k <= t; k++) {
				dp[i][j][k] = 0;
			}
		}
	}
	dp[1][0][0] = 1;
	for (int i = 1; i < n; i++) {
		int y = 1;
		for (int j = 0; j <= f; j++) {
			for (int k = 0; k <= t; k++) {
				if (!dp[i][j][k]) continue;
				int z = y;
				if (k) z *= 3;
				z = x / z;
				long long u = n / z - i, v = 0, w = 0;
				if (j < f) v = n / (z / 2) - n / z;
				if (k < t) w = n / (z / 3) - n / z;
				if (u) add(dp[i+1][j][k], dp[i][j][k] * u % mod);
				if (v) add(dp[i+1][j+1][k], dp[i][j][k] * v % mod);
				if (w) add(dp[i+1][j][k+1], dp[i][j][k] * w % mod);
			}
			y *= 2;
		}
	}
	return dp[n][f][t];
}
int main() {
	scanf("%d", &n);
	for (int i = 2; i <= n; i++) {
		if (a[i]) continue;
		for (int j = i; j <= n; j += i) {
			a[j] = i;
		}
	}
	b[1] = 1;
	for (int i = 2; i <= n; i++) {
		b[i] = b[i/a[i]] + 1;
	}
	int m = *max_element(b + 1, b + n + 1);
	int ans = 0;
	for (int i = n; i >= 1; i--) {
		if (b[i] != m) continue;
		int x = i % 3 == 0;
		ans += go(i, b[i] - x - 1, x);
		if (ans >= mod) ans -= mod;
	}
	printf("%d\n", ans);
	return 0;
}
