#include <iostream>
#include <vector>
#include <string.h>
#include <deque>
#include <queue>
#include <algorithm>
#include <set>
#include <map>
#include <sstream>
#include <stack>
#include <iomanip>
#include <fstream>
#include <assert.h>
#include <cmath>
#include <climits>
#include <complex>
#include <cmath>
#define fi first
#define se second
#define th second
#define FI first
#define SE second.first
#define TH second.second

using namespace std;

typedef long long ll;
typedef pair<ll, ll> ii;
typedef pair<ll, ii> iii;
typedef long double ld;
typedef complex<double> cd;

const int maxN = 2e3 + 9, lg = 19, MOD = 998244353, maxV = 1e6 + 9;

int n, m, k;
ll dp[maxN][maxN];

ll getsum(int i){
    ll sm = 0;
    for(int j = 0; j < m; j++)
        sm = (sm + dp[i][j]) % MOD;
    return sm;
}

ll fdp(){
    
    for(int i = k; i >= 0; i--){
        ll sm = getsum(i + 1);
        if(i == k) sm = 1;
        
        for(int j = 0; j < m; j++)
            dp[i][j] = (sm + MOD - dp[i + 1][j]) % MOD;
    }
    return getsum(0);
}

ll sdp(){
    memset(dp, 0, sizeof dp);
    
    dp[n][0] = 1;
    
    for(int i = n - 1; i >= 0; i--)
        for(int j = 1; j <= k + 1; j++)
            dp[i][j] = (dp[i + 1][j] + dp[i + 1][j - 1]) % MOD;
    return dp[0][k + 1];
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    cin >> n >> m >> k;
    
    cout << fdp() * sdp() % MOD << '\n';
    
}

/*
 y = ax + b
 y = cx + d
 
 ax + b = cx + d
 ax - cx = d - b
 x(a - c) = d - b
 x = (d - b) / (a - c)
 
 4
 1 6 2
 2 4 3
 5 3 8
 6 2 4
 
 
 3
 1 9 0
 2 6 0
 3 3 2
 
 
 */
