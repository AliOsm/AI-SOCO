#include <bits/stdc++.h>
#define endl '\n'
using namespace std;
int n;
long long x, y;
long long a[500'000];
long long rs[500'001];
long long rsum(int start, int end) {
    if(start > end) return 0;
    return rs[end] - (start == 0 ? 0 : rs[start-1]);
}
int mem[3'000'001];
int num_elems_upto(int val) {
    if(val < 0) return 0;
    if(mem[val] == -1) {
        auto lb = lower_bound(a, a + n, val);
        mem[val] = distance(a, lb);
    }
    return mem[val];
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> x >> y;
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
    sort(a, a + n);
    for(int i = 0; i < n; i++) {
        rs[i] = (i == 0 ? 0 : rs[i-1]) + a[i];
    }
    memset(mem, -1, sizeof mem);
    long long min_cost = x * n;
    for(long long g = 2; g <= 2 * a[n-1]; g++) {
        long long curr_cost = 0;
        int total_deleted = 0;
        for(long long ig = g; ig <= a[n-1] + g; ig += g) {
            int inc_start = max(num_elems_upto(((y * ig - x) + (y-1)) / y), ig == g ? 0 : num_elems_upto(ig - g + 1));
            int elems_to_inc = num_elems_upto(ig) - inc_start;
            curr_cost += (elems_to_inc * ig - rsum(inc_start, inc_start + elems_to_inc - 1)) * y;
            int elems_to_del = inc_start - (ig == g ? 0 : num_elems_upto(ig - g + 1));
            curr_cost += elems_to_del * x;
        }
        min_cost = min(min_cost, curr_cost);
    }
    cout << min_cost << endl;
    return 0;
}
