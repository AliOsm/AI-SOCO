#include <bits/stdc++.h>
#define nmax 1005
using namespace std;
bool a[nmax][nmax];
char ch;
bool drawn[nmax][nmax];
int down[nmax][nmax], rgh[nmax][nmax];
int n, m, x, y, r;
int dpu[nmax][nmax], dpl[nmax][nmax], dpr[nmax][nmax], dpd[nmax][nmax];
vector<pair<int,pair<int,int>>>ans;
bool equall()
{
    for (int i=1; i<=n; ++i)
        for (int j=1; j<=m; ++j)
            if (a[i][j] != drawn[i][j]) return false;
    return true;
}
void printt(bool mat[nmax][nmax])
{
    for (int i=1;i<=n;++i)
    {
        for (int j=1;j<=m;++j)
            cout<<mat[i][j];
        cout<<'\n';
    }
    cout<<'\n';
}
int main()
{
    scanf("%d %d",&n,&m);
    for (int i=1; i<=n; ++i)
    {
        scanf("\n");
        for (int j=1; j<=m; ++j)
        {
            scanf("%c",&ch);
            if (ch == '*')
                a[i][j] = true;
        }
    }
    for (int i=1; i<=n; ++i)
        for (int j=1; j<=m; ++j)
        {
            if (a[i][j])
            {
                dpu[i][j] = dpl[i][j] = 1;
                if (i > 1)
                    dpu[i][j] = 1 + dpu[i-1][j];
                if (j > 1)
                    dpl[i][j] = 1 + dpl[i][j-1];
            }
        }
    for (int i=n; i>=1; --i)
        for (int j=m; j>=1; --j)
        {
            if (a[i][j])
            {
                dpd[i][j] = dpr[i][j] = 1;
                if (i < n)
                    dpd[i][j] = 1 + dpd[i+1][j];
                if (j < m)
                    dpr[i][j] = 1 + dpr[i][j+1];
            }
        }
    for (int i=1; i<=n; ++i)
        for (int j=1; j<=m; ++j)
        {
            if (a[i][j])
            {
                int r = min(min(dpu[i][j],dpl[i][j]),min(dpd[i][j],dpr[i][j])) - 1;
                if (r >= 1)
                    ans.push_back(make_pair(r,make_pair(i,j)));
            }
        }
    for (int i=0; i<ans.size(); ++i)
    {
        x = ans[i].second.first;
        y = ans[i].second.second;
        r = ans[i].first;
        ++down[x-r][y];
        --down[x+r+1][y];
        ++rgh[x][y-r];
        --rgh[x][y+r+1];
    }
    for (int i=1; i<=n; ++i)
    {
        // desenez stanga -> dreapta
        int sum = 0;
        for (int j=1; j<=m; ++j)
        {
            sum += rgh[i][j];
            if (sum >= 1)
                drawn[i][j] = 1;
        }
    }
    for (int j=1; j<=m; ++j)
    {
        // desenez sus -> jos
        int sum = 0;
        for (int i=1; i<=n; ++i)
        {
            sum += down[i][j];
            if (sum >= 1)
                drawn[i][j] = 1;
        }
    }
    //printt(drawn);
    if (!equall())
        printf("-1\n");
    else
    {
        printf("%d\n", ans.size());
        for (auto x:ans)
            printf("%d %d %d\n", x.second.first, x.second.second, x.first);
    }
    return 0;
}
