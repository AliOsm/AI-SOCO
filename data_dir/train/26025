
#include<queue>
#include <cmath>
#include <complex>
#include<map>
#include <string>
#include<iostream>
#include<bits/stdc++.h>


#define pi 3.141592654
#define forr(i,a,b) for(int i=a;i<=b;i++)
#define F first
#define S second
#define input ios_base::sync_with_stdio(0);cin.tie(0);


using namespace std;
typedef pair<double,double>pdd;
typedef long long  ll;
typedef pair<ll, ll>pii;
typedef complex<double> point;
//template<typename T>T gcd(T x, T y) { if(y == 0)return x; else return gcd(y, x%y); }
//typedef bitset<30> mask;
//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};
//#define var(x) ((x)<<1)
//#define nvar(x) ((x)^1)
const int N=500005,M=1000000;
const double EPS= 1e-9;


int q,n,k;
char x;
 int main()
{
//freopen("travel.in","r",stdin);
//freopen("travel.out","w",stdout);
input;

cin>>q;
while(q--)
{
    cin>>n>>k;
    vector<int>a[3][3];
    forr(i,0,n-1)
    {
        cin>>x;
        if(x=='R')a[0][i%3].push_back(i);
        else if(x=='G')a[1][i%3].push_back(i);
        else a[2][i%3].push_back(i);
    }
    int ans=1e9;
    forr(i,0,n-1)
    {
        int g=0;
        auto a1=lower_bound(a[0][i%3].begin(),a[0][i%3].end(),i);
        auto a2=lower_bound(a[0][i%3].begin(),a[0][i%3].end(),(i+k));
        g+=k/3+(k%3?1:0)-(a2-a1);

        a1=lower_bound(a[1][(i+1)%3].begin(),a[1][(i+1)%3].end(),i+1);
        a2=lower_bound(a[1][(i+1)%3].begin(),a[1][(i+1)%3].end(),(i+k));
        g+=k/3+(k%3==2?1:0)-(a2-a1);

        a1=lower_bound(a[2][(i+2)%3].begin(),a[2][(i+2)%3].end(),i+2);
        a2=lower_bound(a[2][(i+2)%3].begin(),a[2][(i+2)%3].end(),(i+k));
        g+=k/3-(a2-a1);
        ans=min(ans,g);


        g=0;
        a1=lower_bound(a[1][i%3].begin(),a[1][i%3].end(),i);
        a2=lower_bound(a[1][i%3].begin(),a[1][i%3].end(),(i+k));
        g+=k/3+(k%3?1:0)-(a2-a1);

        a1=lower_bound(a[2][(i+1)%3].begin(),a[2][(i+1)%3].end(),i+1);
        a2=lower_bound(a[2][(i+1)%3].begin(),a[2][(i+1)%3].end(),(i+k));
        g+=k/3+(k%3==2?1:0)-(a2-a1);

        a1=lower_bound(a[0][(i+2)%3].begin(),a[0][(i+2)%3].end(),i+2);
        a2=lower_bound(a[0][(i+2)%3].begin(),a[0][(i+2)%3].end(),(i+k));
        g+=k/3-(a2-a1);
        ans=min(ans,g);



        g=0;
        a1=lower_bound(a[2][i%3].begin(),a[2][i%3].end(),i);
        a2=lower_bound(a[2][i%3].begin(),a[2][i%3].end(),(i+k));
        g+=k/3+(k%3?1:0)-(a2-a1);

        a1=lower_bound(a[0][(i+1)%3].begin(),a[0][(i+1)%3].end(),i+1);
        a2=lower_bound(a[0][(i+1)%3].begin(),a[0][(i+1)%3].end(),(i+k));
        g+=k/3+(k%3==2?1:0)-(a2-a1);

        a1=lower_bound(a[1][(i+2)%3].begin(),a[1][(i+2)%3].end(),i+2);
        a2=lower_bound(a[1][(i+2)%3].begin(),a[1][(i+2)%3].end(),(i+k));
        g+=k/3-(a2-a1);
        ans=min(ans,g);

    }

    cout<<ans<<endl;
}







return 0;
}
