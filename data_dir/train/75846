#include<bits/stdc++.h>
using namespace std;

#pragma GCC optimize("Ofast")
#define fast ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define f first
#define s second
#define pb push_back
#define popb pop_back
#define pf push_front
#define popf pop_front
#define mp make_pair
#define endl "\n"
#define int long long
typedef long long ll;
typedef long double ld;
const int mod = 1000000007;

int power(int x,int y){int res=1;x=x%mod;while(y>0){if(y&1)res=(res*x)%mod;y=y>>1;x=(x*x)%mod;}return res;}
int gcd(int a,int b){if (a==0)return b;return gcd(b%a,a);}
int max(int a,int b){int ans=a>b?a:b;return ans;}
int min(int a,int b){int ans=a<b?a:b;return ans;}
//cout<<fixed<<setprecision(8)<<x<<endl;

signed main()
{
	int n,q;
	cin>>n>>q;
	int a[n];
	int m=-1,im=-1;
	for(int i=0;i<n;i++)
	{
		cin>>a[i];
		if(a[i]>m)
		{
			m=a[i];
			im=i;
		}
	}
	
	deque<int> dq;
	deque<int>::iterator it; 
	vector<pair<int,int> > v;
		v.pb(mp(0,0));
	int f=0;
	for(int i=0;i<n;i++)
		dq.pb(a[i]);
	
	vector<int> va; //va.pb(0);
	int x,y,arr[n-1];
	for(int i=0;i<im+n;i++)
	{
		
	/*	cout<<i<<" "<<im<<endl;
		for (it = dq.begin(); it != dq.end(); ++it) 
			cout<<*it<<" "; 
			cout<<endl;*/
			
			
		x=dq.at(0);
		y=dq.at(1);
		v.pb(mp(x,y));
		dq.popf();
		dq.popf();
		if(x>y)
		{
			dq.pf(x);
			dq.pb(y);
		}
		else
		{
			dq.pf(y);
			dq.pb(x);
		}
		//if(i==im-1)
	/*	if(dq.front()==m)
		{
			//cout<<"dq.at(0) "<<dq.at(0)<<" m"<<m;
			//cout<<"Break";
			f=1;
		//	break;	
		}
		else if(f)
			break;*/
		if(i==im-1)
		for (it = dq.begin()+1; it != dq.end(); ++it)
		{
			va.pb(*it);
		} 
	}
	//for(int i=0;i<v.size();i++)
	//	cout<<i<<" "<<v[i].f<<" "<<v[i].s<<endl;

	/*cout<<"**********\n";
	for(int i=0;i<va.size();i++)
		cout<<va[i]<<" ";
		cout<<endl;*/

	n--;
	int k;
	while(q--)
	{
		cin>>k;
		if(k<=im+1)
			cout<<v[k].f<<" "<<v[k].s<<endl;
		else
			cout<<v[im+1].f<<" "<<v[(k-im-1)%n+im+1].s<<endl;
			
	}
	
	
	
    return 0;
}

