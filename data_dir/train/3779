#include<bits/stdc++.h>
#define int long long int
#define ull unsigned long long int
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD 998244853
#define f first
#define s second
#define endl '\n'
using namespace std;
const double PI = atan(1.0)*4;
const int INF=100000000000000003;
const int32_t LOG=21;
int table[200005]={0};
int n,m;
vector<pair<int,pair<int,int>>> edges;
vector<pair<int,int>> queries;
int ans[200005]={0};
int parent[200005]={0};
void update(int i,int delta)
{
  while(i<=n)
  {
       table[i]+=delta;
       i+=(i&-i);
  } 
}
int pref_sum(int i)
{
  int sum1=0;
  while(i>0)
  {
    sum1+=table[i];
    i-=i&-i;
  }
  return sum1; 
}
int sum(int l,int r)
{
  if(l>r) return 0;
  return pref_sum(r)-pref_sum(l-1);
}
int find(int v)
{
    if(parent[v]<0)
    return v;
    else
    return find(parent[v]);    
}
void merge(int v1,int v2)
{
   int parent1=find(v1);
   int parent2=find(v2);
   int temp1=parent[parent1];
   int temp2=parent[parent2];
   if(temp1<=temp2)
   {
     parent[parent2]=parent1;
     parent[v1]=parent1;
     parent[v2]=parent1;
     parent[parent1]=temp1+temp2;
     int x=sum(parent2,parent2);
     x=-x;
     update(parent2,x);
     int y=sum(parent1,parent1);
     y=-y;
     update(parent1,y);
     int temp=-(temp1+temp2);
     int toAdd=(temp*(temp-1))/2;
     update(parent1,toAdd);
   } 
   else
   {
     parent[parent1]=parent2;
     parent[v1]=parent2;
     parent[v2]=parent2;
     parent[parent2]=temp1+temp2;  
     int x=sum(parent2,parent2);
     x=-x;
     update(parent2,x);
     int y=sum(parent1,parent1);
     y=-y;
     update(parent1,y);
     int temp=-(temp1+temp2);
     int toAdd=(temp*(temp-1))/2;
     update(parent2,toAdd);
   }     
}
signed main(){
     getFaster;
     cin>>n>>m;
     fill(parent,parent+n+1,-1);
     rep(i,1,n)
     {
        int x,y,w;
        cin>>x>>y>>w;
        edges.push_back({w,{x,y}});
     }
     sort(edges.begin(),edges.end());
     rep(i,0,m)
     {
       int q;
       cin>>q;
       if(n==1)cout<<0<<" ";
       queries.push_back({q,i});
     }
     if(n==1){cout<<endl;return 0;}
     sort(queries.begin(),queries.end());
     int ptr=0;
     rep(i,0,edges.size())
     {
          int v1=edges[i].s.f;
          int v2=edges[i].s.s;
          int w=edges[i].f;
          int val=pref_sum(n);
          while(ptr<m && w>queries[ptr].f)
          {
             ans[queries[ptr].s]=val;
             ptr++;
          }
          if(ptr>=m)break;
          merge(v1,v2);  
     }
     int val=pref_sum(n);
     int w=edges[n-2].f;
     while(ptr<m && queries[ptr].f>=w)
     {
         ans[queries[ptr].s]=val;
         ptr++;
     }
     rep(i,0,m)cout<<ans[i]<<" ";
     cout<<endl;
     return 0;
}