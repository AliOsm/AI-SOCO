#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
constexpr int inf = 0x3f3f3f3f;
constexpr double EPS = 1e-30;
constexpr double PI = atan(1) * 4;

template <typename T> inline bool chmax(T& x, T y) {return x < y ? x = y, 1 : 0;}
template <typename T> inline bool chmin(T& x, T y) {return x > y ? x = y, 1 : 0;}
inline int LSB(int i) {return (i & -i);}

int n, sx, sy, ex, ey, flood[55][55], cnt;
char grid[55][55];
ll res = 1e18;
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
bool vis[55][55];

bool check(int x, int y){
    return x >= 1 && y >= 1 && x <= n && y <= n && grid[x][y] == '0';
}

void dfs(int x, int y){
    if (vis[x][y]) return;
    vis[x][y] = true;
    flood[x][y] = cnt;

    for (int i = 0; i < 4; i++){
        int nx = x + dx[i];
        int ny = y + dy[i];
        if (check(nx, ny)) dfs(nx, ny);
    }
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);

    cin >> n >> sx >> sy >> ex >> ey;
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= n; j++){
            cin >> grid[i][j];
        }
    }

    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= n; j++){
            if (!vis[i][j] && grid[i][j] == '0') ++cnt, dfs(i, j);
        }
    }

    if (flood[sx][sy] == flood[ex][ey]) cout << 0 << endl;
    else {
        for (int i = 1; i <= n; i++){
            for (int j = 1; j <= n; j++){
                for (int k = 1; k <= n; k++){
                    for (int l = 1; l <= n; l++){
                        if (flood[i][j] == flood[sx][sy] && flood[k][l] == flood[ex][ey]){
                            chmin(res, (1LL * (i - k) * (i - k)) + (1LL * (j - l) * (j - l)));
                        }
                    }
                }
            }
        }

        cout << res << endl;
    }

    return 0;
}
