#include<bits/stdc++.h>

using namespace std;
const int MAXA = 2000100;
const int MAXN = 200100;

vector<int> grafo[MAXN];
unordered_map<int, deque<int>> d;
int v[MAXN];
bool comp[MAXA];
int resp[MAXN];
vector<int> primo[MAXA];
bool process[MAXN];
int niv[MAXN];

void crivo(){
	for(int i = 2;i < MAXA;i++){
		if(comp[i] == true) continue;
		for(int j = i;j < MAXA;j += i) primo[j].push_back(i) , comp[j] = true; 
	}
}

void dfs(int x){
	process[x] = true;
	
	for(int i = 0;i < primo[v[x]].size();i++){
		int at = primo[v[x]][i];
		
		if(d[at].size() > 0){
			//cout << "AA " << x << " " << at << endl;
			if(resp[x] == -1) resp[x] = d[at].front();
			else if(niv[resp[x]] < niv[d[at].front()]) resp[x] = d[at].front();
		}
	}
	
	for(int i = 0;i < primo[v[x]].size();i++){
		int at = primo[v[x]][i];
		//cout << "// " << v[x]  << " " << at << endl;
		d[at].push_front(x);
	}
	
	for(int i = 0;i < grafo[x].size();i++){
		int at = grafo[x][i];
		if(process[at] == true) continue;
		
		niv[at] = niv[x] + 1;
		dfs(at);
	}

	for(int i = 0;i < primo[v[x]].size();i++){
		int at = primo[v[x]][i];
		d[at].pop_front();
	}
	
}

int main(){
	memset(process,false,sizeof process);
	memset(comp,false,sizeof comp);
	memset(resp, -1, sizeof resp);
	
	int n,m;
	scanf("%d %d",&n,&m);
	
	for(int i = 1;i <= n;i++) cin >> v[i];
	for(int i = 1;i < n;i++){
		int x,y;
		scanf("%d %d",&x,&y);
		grafo[x].push_back(y);
		grafo[y].push_back(x);
	}
	
	crivo();

	niv[1] = 0;
	dfs(1);
	
	for(int i = 1;i <= m;i++){
		int x;
		scanf("%d",&x);
		
		if(x == 2){
			int y,z;
			scanf("%d %d",&y,&z);
			
			v[y] = z;
			
			memset(process,false,sizeof process);
			memset(resp,-1,sizeof resp);
			dfs(1);
		}
		if(x == 1){
			int y;
			scanf("%d",&y);
			
			printf("%d\n",resp[y]);
		}
	}
}