#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
using namespace std;
#define pi 3.141592653589793
#define ii pair<int,int>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf\n", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s ", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define inf 10000000000000000
#define ninf -10000000000000000;
#define eps 1e-7
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
/*ll power(ll base, ll exp) {
base %= mod;
ll result = 1;
while (exp > 0) {
if (exp & 1)
result = (result * base) % mod;
base = (base * base) % mod;
exp >>= 1;
}
return result;
}
*/
/*long long gcd(long long a, long long b)
{
if (b == 0)return a; return gcd(b, a%b);
}
*/
/*long long lcm(long long a, long long b) {
return  a * b / gcd(a, b);
}
*/
int arr[110][110][15];
int main()
{
	int n, q, c;
	sci(n); sci(q); sci(c);
	int x, y, s;
	for (int i = 0; i < n; ++i)
	{
		sci(x); sci(y); sci(s);
		++arr[x][y][s];
	}
	++c;
	for (int i = 1; i <= 100; ++i)
	{
		for (int j = 1; j <= 100; ++j)
		{
			for (int k = 0; k < c; ++k)
			{
				arr[i][j][k] += arr[i - 1][j][k] + arr[i][j - 1][k] - arr[i - 1][j - 1][k];
			}
		}
	}
	int t, x1, y1, x2, y2;
	while (q--)
	{
		sci(t); sci(x1); sci(y1); sci(x2); sci(y2);
		ll ans = 0;
		for (int i = 0; i < c; ++i)
		{
			int cnt = arr[x2][y2][i] - arr[x1 - 1][y2][i] - arr[x2][y1 - 1][i] + arr[x1 - 1][y1 - 1][i];
			ans += (1LL * cnt*((i + t) % c));
		}
		pll(ans);
	}
}
