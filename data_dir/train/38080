#include<bits/stdc++.h>

using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

#define endl '\n'
#define MAX

typedef long long ll;
typedef pair<int,int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

const int maxn = 2e5 + 5;
int n, t, k, a[maxn];
set<int> child[maxn];
vector<int> level[maxn];

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	cin >> n >> t >> k;
	
	t++;
	
	a[1] = 1;
	for(int i = 2; i <= t; i++)
		cin >> a[i];
	
	int leaves = 0;
	for(int i = 1; i <= t; i++)
		leaves += max(0, a[i] - a[i + 1]);
		
	if(leaves > k){
		cout << -1 << endl;
		return 0;
	}
	
	level[1].push_back(1);
	int node = 2;
	for(int i = 2; i <= t; i++){
		int pos = 0;
		for(int j = 0; j < a[i]; j++){
			int prv = level[i - 1][pos];
			child[prv].insert(node);
			level[i].push_back(node);
			node++;
			if(pos + 1 != (int)level[i - 1].size())
				pos++;
		}
	}
	
	for(int i = t - 1; i >= 2 && leaves < k; i--){
		int mx = -1, pos = -1;
		for(auto &x : level[i]){
			if((int)child[x].size() > mx){
				mx = child[x].size();
				pos = x;
			}
		}
		for(int j = 0; j < (int)level[i].size() && leaves < k; j++){
			int x = level[i][j];
			if(x == pos || child[x].size() == 0)
				continue;
			leaves++;
			while(!child[x].empty()){
				child[pos].insert(*(child[x].begin()));
				child[x].erase(child[x].begin());
			}
		}
	}
	
	if(leaves < k){
		cout << -1 << endl;
		return 0;
	}
	
	cout << n << endl;
	for(int i = 1; i <= n; i++)
		for(auto &x : child[i])
			cout << i << " " << x << endl;

	return 0;
}