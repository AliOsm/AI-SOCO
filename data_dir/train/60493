#include <bits/stdc++.h>
using namespace std;

const int N = 20;

int n;
int m;
int M[N][N];
long long memo[(1<<N)][N];

int LSO(int x){
	return (-x) & x;
}

int main() {
	scanf("%d %d",&n,&m);
	int a, b;
	for(int i=0; i<m; i++){
		scanf("%d %d",&a,&b);
		a -= 1;
		b -= 1;
		M[a][b] = M[b][a] = true;
	}
	for(int i=0; i<n; i++){
		memo[1<<i][i] = 1;
	}
	for(int mask = 1; mask < 1<<n; mask++){
		if(__builtin_popcount(mask) <= 1) continue;
		for(int last=0; last<n; last++){
			for(int i=0; i<n; i++){
				if(M[i][last] and mask & (1<<i)){
					if(__builtin_popcount(mask) == 2 or (__builtin_popcount(mask) > 2 and LSO(mask) != (1<<i)))
					memo[mask][last] += memo[mask^(1<<last)][i];
				}
			}
		}
	}
	long long ans = 0LL;
	for(int mask = 1; mask < 1<<n; mask++){
		if(__builtin_popcount(mask) < 3) continue;
		for(int i=0; i<n; i++){
			if(M[31 - __builtin_clz(mask & (-mask))][i]) ans += memo[mask][i];
		}
	}
	ans >>= 1;
	cout << ans << endl;
	return 0;
}