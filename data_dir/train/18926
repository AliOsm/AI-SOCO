#include <vector>
#include <list>
#include <unordered_map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#define MAXN 100000
#define MODD 1000000007
#define ll long long
using namespace std;


// endpt

void Update1(set<pair<int,int>>* X,int *sz,int L,int R) {
    
    
    while(1) {
        set<pair<int,int>>::iterator it = X->lower_bound({L,-1});
        if (it == X->end() || it->first-it->second+1 > R)
            break;
        
        // (it->first-it->second+1,it->first) and (L,R)
        
        int LL = it->first-it->second+1;
        int RR = it->first;
        
        //printf("L=%d,R=%d LL=%d,RR=%d\n",L,R,LL,RR);
        
        // (LL,RR) and (L,R)
        
        X->erase(it);
        (*sz)-=RR-LL+1;
        
        if (L<=LL && R>=RR) {
        } else if (L<=LL && R<=RR) {
            if (RR-R>0) {
                X->insert({RR,RR-R});
                (*sz)+=RR-R;
            }
        } else if (L>=LL && R<=RR) {
            // LL TO L-1
            // R+1 to RR
            if (L-LL>0) {
                X->insert({L-1,L-LL});
                (*sz)+=L-LL;
            }
            if (RR-R>0) {
                X->insert({RR,RR-R});
                (*sz)+=RR-R;
            }
        }else if (LL<=L && RR <= R) {
            // LL to L-1
            if (L-LL>0) {
                X->insert({L-1,L-LL});
                (*sz)+=L-LL;
            }
        }
    }
}


void Update2(set<pair<int,int>>* X,int* sz,int L,int R) {
    while(1) {
        set<pair<int,int>>::iterator it = X->lower_bound({L,-1});
        if (it == X->end() || it->first-it->second+1 > R)
            break;
        
        set<pair<int,int>>::iterator itf = it;
        
        while(it != X->end() && it->first-it->second+1 <= R) {
            int LL = it->first-it->second+1;
            int RR = it->first;
            L=min(L,LL);
            R=max(R,RR);
            (*sz)-=RR-LL+1;
            it++;
        }
        
        X->erase(itf,it);

    }
    
    // min(L,LL) to max(R,RR)
    X->insert({R,R-L+1});
    (*sz)+=R-L+1;
    
}


char buf[58000000];


int readint() {
    int m;
    static char *bp=buf;
    if(*bp<'0' || *bp>'9')
        *bp++;
    
    for(m=*bp++-48; *bp>=48; bp++) m = m*10+*bp-48;
    bp++;
    return m;
}


int main() {
    fread(buf, 1, 51000100, stdin);

    int n,Q;
    n=readint();
    Q=readint();
    
    
    set<pair<int,int>> X;
    X.insert({n,n});
    int sz=n;
    
    for(int q=1;q<=Q;q++) {
        
        int L,R,K;
        L=readint();
        R=readint();
        K=readint();
        if (L>R)
            swap(L,R);
        
        if (K==1) {
            Update1(&X,&sz,L,R);
        } else {
            Update2(&X,&sz,L,R);
        }
        printf("%d\n",sz);
        
        
    }
    
}
