#include <bits/stdc++.h>

using namespace std;

int modPow(int a, int b, int c) {
    long long x = 1, y = a;
    while (b > 0) {
        if (b % 2 == 1) {
            x = (x * y) % c;
        }
        y = (y * y) % c;
        b /= 2;
    }
    return x % c;
}

int dfs(int u, const vector<vector<int>> &g, vector<int> &vis) {
    vis[u] = 1;
    int sz = 1;
    for (int v : g[u]) {
        if (!vis[v]) {
            sz += dfs(v, g, vis);
        }
    }
    return sz;
}

int main() {
    std::ios::sync_with_stdio(false); 
    cin.tie(nullptr);
    
    constexpr int MOD = 1'000'000'007;

    int n, k;
    cin >> n >> k;
    vector<vector<pair<int, int>>> g(n);
    vector<vector<int>> red_g(n);
    for (int i = 0; i < n - 1; ++i) {
        int u, v, x;
        cin >> u >> v >> x;
        g[u - 1].emplace_back(v - 1, x);
        g[v - 1].emplace_back(u - 1, x);
        if (x == 0) {
            red_g[u - 1].push_back(v - 1);
            red_g[v - 1].push_back(u - 1);
        }
    }
    int res = modPow(n, k, MOD);

    vector<int> vis(n, 0);
    for (int u = 0; u < n; ++u) {
        if (!vis[u]) {
            int sz = dfs(u, red_g, vis);
            res = ((res - modPow(sz, k, MOD)) % MOD + MOD) % MOD;
        }
    }
    cout << res << "\n";

    return 0;
}