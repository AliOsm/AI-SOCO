#include <string.h>
#include <unordered_map>

#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include   <stdlib.h>    
#include   <time.h> 
#include <stack>
#include <queue>
#include <set>

#include <map>
#include <vector>
#include <string>
#include <stdlib.h>

#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf

#define pf printf
#define mp make_pair

using namespace std;
const int N = 3000;
int mod = 998244353;

int n,m;
string s[N];

struct Info{
	int s[30];
	int ok;
	void init() {
		clr(s);
		ok = 0;
	}
	void add(int t) {
		s[t]++;
		if(s[t]&1) ok++;
		else ok--;
	}
}info[N];

bool operator==(const Info &a, const Info &b) {
	if(a.ok>1||b.ok>1) return false;
	for(int i = 0; i < 26; ++i) {
		if(a.s[i]!=b.s[i]) return false;
	}
	return true;
}


int len[N];
ll manacher(int n){
	//printf("n = %d\n",n);
	ll ans = 0;
	int mx = 0, p = 0;
	for(int i = 1; i <=n; ++i) {
		if(mx>i) {
			len[i] = min(mx-i,len[2*p-i]);
		}
		else {
			len[i] = 0;
		}
		while(i-len[i]>0&&i+len[i]<=n&&info[i-len[i]]==info[i+len[i]])len[i]++;
		if(len[i]+i>mx) {
			mx = len[i]+i;
			p = i;
		}
		if(len[i]>0) {
			int l = (i-1)/2-(len[i]-1)/2;
			int r = (i-1)/2+(len[i]-1)/2;
			if(len[i]&1)r--;
			ans += (r-l+2)/2;
			//printf("i = %d len = %d l = %d r = %d\n",i,len[i],l,r);
		}
	}
	return ans;
}

int main() {
	cin>>n>>m;
	fr(i,0,n) {
		cin>>s[i];
	}

	ll ans = 0;
	for(int i = 0; i <= 2*n+1;++i) {
		info[i].init();
	}
	for(int i = 0; i < m; ++i) {
		for(int k = 0; k < n; ++k) {
			info[2*(k+1)].init();
		}
		for(int j = i; j < m; ++j) {
			int ret = 0;
			for(int k = 0; k < n; ++k) {
				info[2*(k+1)].add(s[k][j]-'a');
				//printf("k = %d ok = %d\n",k,info[2*(k+1)].ok);
			//	if(info[2*(k+1)].ok>1)ret++;
			}
			ans += manacher(2*n+1)-ret;
			//printf("i = %d j = %d ans = %lld\n",i,j,ans);
		}
	}
	cout<<ans<<endl;
}

