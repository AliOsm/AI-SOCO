#include<iostream>

using namespace std;

const int nmax = 71, kmax = (int)1e5 + 11;
const int pcnt = 19;
const int maskmax = (1 << pcnt), mod = (int)1e9 + 7;
const int primes[pcnt] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67};

int madd(int a, int b) {
	a += b;
	if (a >= mod) 
		a -= mod;
	return a;
}

int msub(int a, int b) {
	a -= b;
	if (a < 0)
		a += mod;
	return a;
}

int mmul(int a, int b) {
	return (long long)a * b % mod;
}

int n, a[nmax], num[nmax];
int dp[nmax][maskmax], odd[kmax], even[kmax];

void prep() {
	even[0] = 1;
	odd[0] = 0;
	for (int i = 1; i <= n; i++) {
		odd[i] = madd(even[i - 1], odd[i - 1]);
		even[i] = madd(even[i - 1], odd[i - 1]);
	}
}

void solve() {
	cin >> n;
	prep();
	while (n--) {
		int k;
		cin >> k;
		a[k]++;
	}
	for (int i = 1; i < nmax; i++) {
		int cur = i;
		for (int pind = 0; pind < pcnt; pind++) {
			while (cur % primes[pind] == 0) {
				cur /= primes[pind];
				num[i] ^= (1 << pind);
			}
		}
	}
	dp[0][0] = 1;
	for (int i = 1; i < nmax; i++) {
		for (int mask = 0; mask < maskmax; mask++) {
			dp[i][mask] = madd(mmul(dp[i - 1][mask], even[a[i]]), mmul(dp[i - 1][mask ^ num[i]], odd[a[i]]));
		}
	}
	cout << msub(dp[nmax - 1][0], 1);
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	solve();
	return 0;
}
