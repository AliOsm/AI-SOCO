//In the name of God

#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <cstring>
#include <cmath>
using namespace std;
#define mp make_pair
#define lol long long
const int MAXN=1e5+10,MAXL=20;
vector <int> g[MAXN],ng[MAXN];
int par[MAXN][MAXL],h[MAXN],st[MAXN],en[MAXN],a[MAXN],ans,now;
bool mark[MAXN],red[MAXN];
vector <pair <int,int> > tmp;

void dfs(int v,int p=0,int hei=0)
{
  st[v]=now++;
  h[v]=hei;
  par[v][0]=p;
  for(int i=1;i<MAXL;i++)
    par[v][i]=par[par[v][i-1]][i-1];
  for(int i=0;i<g[v].size();i++)
    {
      int u=g[v][i];
      if(u!=p)
	dfs(u,v,hei+1);
    }
  en[v]=now;
}

int parent(int v,int d)
{
  for(int i=0;i<MAXL;i++)
    if(d&(1<<i))
      v=par[v][i];
  return v;
}

int LCA(int v,int u)
{
  if(h[v]>h[u])
    swap(v,u);
  u=parent(u,h[u]-h[v]);
  if(u==v)
    return u;
  for(int i=MAXL-1;i>=0;i--)
    if(par[v][i]!=par[u][i])
      v=par[v][i],u=par[u][i];
  return par[v][0];
}

void make_graph()
{
  vector <int> t;
  for(int i=0;i<tmp.size();i++)
    {
      int v=tmp[i].second;
      if(mark[v])
	continue;
      while(!t.empty() and en[t.back()]<=st[v])
	t.pop_back();
      if(!t.empty())
	{
	  int u=t.back();
	  ng[u].push_back(v);
	  ng[v].push_back(u);
	}
      t.push_back(v);
      mark[v]=true;
    }
}

bool sdfs(int v,int p=0)
{
  int cnt=0;
  for(int i=0;i<ng[v].size();i++)
    {
      int u=ng[v][i];
      if(u!=p)
	cnt+=sdfs(u,v);
    }
  bool has;
  if(!red[v] and cnt>1)
    ans++,has=0;
  else if(!red[v] and cnt>0)
    has=1;
  else if(!red[v] and cnt==0)
    has=0;
  else if(red[v] and cnt>0)
    ans+=cnt,has=1;
  else if(red[v])
    has=1;
  return has;
}

int main()
{
  ios::sync_with_stdio(false);
  int n,q;
  cin>>n;
  for(int i=1;i<n;i++)
    {
      int v,u;
      cin>>v>>u;
      v--;u--;
      g[v].push_back(u);
      g[u].push_back(v);
    }
  dfs(0);
  cin>>q;
  while(q--)
    {
      int k;
      cin>>k;
      for(int i=0;i<k;i++)
	{
	  cin>>a[i];
	  a[i]--;
	  tmp.push_back(mp(st[a[i]],a[i]));
	  red[a[i]]=true;
	}
      bool can=true;
      for(int i=0;i<k;i++)
	{
	  int v=a[i];
	  if(v!=0 and red[par[v][0]])
	    {
	      can=false;
	      break;
	    }
	}
      if(can==false)
	{
	  cout<<-1<<'\n';
	  for(int i=0;i<k;i++)
	    red[a[i]]=false;
	  tmp.clear();
	  continue;
	}
      sort(tmp.begin(),tmp.end());
      for(int i=1;i<k;i++)
	{
	  int v=tmp[i].second,u=tmp[i-1].second;
	  int l=LCA(v,u);
	  tmp.push_back(mp(st[l],l));
	}
      sort(tmp.begin(),tmp.end());
      make_graph();
      sdfs(a[0],a[0]);//solve dfs :D
      cout<<ans<<'\n';
      //reset:
      for(int i=0;i<tmp.size();i++)
	{
	  int v=tmp[i].second;
	  ng[v].clear();
	  mark[v]=false;
	}
      for(int i=0;i<k;i++)
	red[a[i]]=false;
      tmp.clear();
      ans=0;
    }
  return 0;
}
