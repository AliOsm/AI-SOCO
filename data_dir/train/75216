#include<bits/stdc++.h>
#define ll long long int
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define repl(i,init,n) for(ll i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 600005
using namespace std;
const double PI = atan(1.0)*4;
const ll MOD=998244353;
ll max(ll a,ll b)
{
  if(a<=b) return b;
  return a;
}
int n;
int deg[200005];
vector<int> v[200005];
int siz[200005]={0};
bool checked[200005]={false};
bool check1[200005]={false};
ll ans=0;
ll fin=0; // this is the answer
int dfs1(int root)
{
     check1[root]=true;
     if(deg[root]==1){siz[root]=1;ans++;return 1;}
     rep(i,0,v[root].size())
     {
        if(!check1[v[root][i]])
        {
           siz[root]+=dfs1(v[root][i]);
        }  
     }
     siz[root]++;
     ans+=siz[root];
     return siz[root];
}
void dfs2(int root,ll cur)
{
     checked[root]=true;
     if(deg[root]==1) return;
     rep(i,0,v[root].size())
     {
          int vertex=v[root][i];
          ll cur1=cur+n-2*siz[vertex];
          if(!checked[v[root][i]])
          {
             fin=max(fin,cur1);
             dfs2(vertex,cur1);
          }  
     }     
}
int main()
{
    getFaster;
    cin>>n;
    if(n==2)
    {
      cout<<3<<endl;
      return 0;
    }
    int root=-1;  
    rep(i,1,n)
    {
        int a,b;
        cin>>a>>b;
        v[a].push_back(b);
        v[b].push_back(a);
        deg[a]++;
        deg[b]++;
        if(deg[a]==2 && root==-1) root=a;
        if(deg[b]==2 && root==-1) root=b;
    }
    dfs1(root);
    fin=ans;
    dfs2(root,ans);
    cout<<fin<<endl;
    return 0;
}