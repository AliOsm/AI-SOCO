#include <bits/stdc++.h>
     
using namespace std;
typedef long long ll;
typedef vector<ll> vl ;
typedef pair<ll,ll> pl;
     
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define all(v) (v).begin(),(v).end()
#define max(a,b) (a>b ? a : b)
#define min(a,b) (a<b ? a : b)
     
const int MOD = 998244353;
const int N = 1000005;
const double PI =4*atan(1);
const double eps = 1e-7;
const long long oo = 1e18;
 
ll n;
vl adj[N];
ll indeg[N];
ll child[N];
vl can[N];
ll pare[N];
ll ma[N];
ll ans[N];

void dfs(ll src, ll par){
	child[src]=1;
	for(auto t: adj[src]){
		if(t==par)continue;
		dfs(t,src);
		child[src]+=child[t];
	}
}

void bfs(){
	queue<ll> q;
	for(int i=0;i<n;i++){
		if(indeg[i]==0){
		//	cout << i << endl;
			q.push(i);
			can[i].pb(i);
		}
	}
	while(!q.empty()){
		ll ras=q.front();
		q.pop();
		bool cond=false;
		ll z= child[ras];
		ll true_can=-1;
		for(auto u:can[ras]){
			ll y=u;
			while(true){
				//cout << ras << " " <<"y = "<<y << endl;
				ll w = ma[y];
				ll o = z - child[y];
				//cout << w << " " << o << " " << z << endl;
				if(max(w,o)<=z/2){
					cond=true;
					true_can = y;
					break;
				}
				if(y==ras)break;
				y=pare[y];
			}
			if(cond)break;
		}
		//cout << "ras = " << ras << " " << true_can << endl;
		ans[ras]=true_can;
		for(auto t: adj[ras]){
			if(indeg[t]){
				indeg[t]--;
				can[t].pb(true_can);
				if(indeg[t]==0)q.push(t);
			}
		
		}
		can[ras].clear();
	}
}

ll q;

int main(){
    ios::sync_with_stdio(0);
    //freopen("easy.txt","r",stdin);
    cin >> n >>q;
    for(int i=0;i<n-1;i++){
    	ll x;
    	cin >> x;
    	x--;
    	pare[i+1]=x;
    	indeg[x]++;
    	adj[x].pb(i+1);
    	adj[i+1].pb(x);
    }
    dfs(0,-1);
    for(int i=0;i<n;i++){
    	for(auto t:adj[i]){
    		if(t==pare[i])continue;
    		ma[i]=max(ma[i],child[t]);
    	}
    }
    bfs();
    for(int i=0;i<q;i++){
    	ll x;
    	cin >> x;
    	x--;
    	cout << ans[x]+1 << endl;
    }

    
    
    return 0;
}