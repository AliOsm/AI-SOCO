#pragma comment(linker, "/STACK:536870912")
#pragma warning(disable:4996)

#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include<iostream>
#include<algorithm>
#include<queue>
#include<string>
#include<vector>
#include<map>
#include<list>
#include<set>
#include<cstring>
#include<ctime>
#include<cmath>
#include<limits>
#include<iterator>
#include<functional>
#include<unordered_map>
#include<unordered_set>
#include<stack>
#include<bitset>
#include<complex>

#define all(v) v.begin(), v.end()
#define setv(ar, val) memset(ar, val, sizeof(ar));
#define ll long long int
#define ull unsigned long long int
#define PI 3.1415926535897932384626433832795
using namespace std;

const int N = 4e5 + 100, L = 20;
ll mx[N][L], sum[N][L], p[N][L], w[N], h[N];

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int q, c = 1;
	scanf("%d", &q);

	int last = 0;
	while (q--) {
		int t, r;
		scanf("%d%d", &t, &r);

		r ^= last;
		r--;
		if (t == 1) {
			scanf("%lld", &w[c]);
			w[c] ^= last;
			int t = r;

			if (w[r] < w[c]) {
				for (int i = L - 1; i >= 0; i--) {
					if (mx[t][i] < w[c]) {
						t = p[t][i];
					}
				}
				if (t == p[t][0])
					t = -1;
				else
					t = p[t][0];
			}

			if (t == -1) {
				for (int i = 0; i < L; i++)
					p[c][i] = c;
			}
			else {
				h[c] = h[t] + 1;
				p[c][0] = t;
				sum[c][0] = w[t];
				mx[c][0] = w[t];
				for (int i = 1; i < L; i++) {
					p[c][i] = p[p[c][i - 1]][i - 1];
					mx[c][i] = max(mx[c][i - 1], mx[p[c][i - 1]][i - 1]);
					sum[c][i] = sum[c][i - 1] + sum[p[c][i - 1]][i - 1];
				}
			}
			c++;
		}
		else {
			ll x;
			scanf("%lld", &x);
			x ^= last;
			ll ans = 0;
			if (w[r] <= x) {
				ans++;
				x -= w[r];
				int t = r, g = h[r];
				for (int i = L - 1; i >= 0; i--) {
					if (sum[t][i] <= x && (1 << i) <= g) {
						x -= sum[t][i];
						ans += 1 << i;
						g -= 1 << i;
						t = p[t][i];
					}
				}
			}
			printf("%lld\n", ans);
			last = ans;
		}
	}
	return 0;
}