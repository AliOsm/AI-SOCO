//g++  5.4.0

#include<bits/stdc++.h>
using namespace std;

#define ff first
#define ss second
#define int long long
#define pb push_back
#define pii pair< int,int >
#define fast ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0) ;
const int inf = 1e18;
struct FlowEdge {
    int v, u;
    int cap, flow = 0;
    FlowEdge(int v, int u, int cap) : v(v), u(u), cap(cap) {}
};

struct Dinic {
    
    vector<FlowEdge> edges;
    vector<vector<int>> adj;
    int n, m = 0;
    int s, t;
    vector<int> level, ptr;
    queue<int> q;

    Dinic(int n, int s, int t) : n(n), s(s), t(t) {
        adj.resize(n+1);
        level.resize(n+1);
        ptr.resize(n+1);
    }

    void add_edge(int v, int u, int cap) {
        edges.emplace_back(v, u, cap);
        edges.emplace_back(u, v, 0);
        adj[v].push_back(m);
        adj[u].push_back(m + 1);
        m += 2;
    }

    bool bfs() {
        while (!q.empty()) {
            int v = q.front();
            q.pop();
            for (int id : adj[v]) {
                if (edges[id].cap - edges[id].flow < 1)
                    continue;
                if (level[edges[id].u] != -1)
                    continue;
                level[edges[id].u] = level[v] + 1;
                q.push(edges[id].u);
            }
        }
        return level[t] != -1;
    }

    int dfs(int v, int pushed) {
        if (pushed == 0)
            return 0;
        if (v == t)
            return pushed;
        for (int& cid = ptr[v]; cid < (int)adj[v].size(); cid++) {
            int id = adj[v][cid];
            int u = edges[id].u;
            if (level[v] + 1 != level[u] || edges[id].cap - edges[id].flow < 1)
                continue;
            int tr = dfs(u, min(pushed, edges[id].cap - edges[id].flow));
            if (tr == 0)
                continue;
            edges[id].flow += tr;
            edges[id ^ 1].flow -= tr;
            return tr;
        }
        return 0;
    }

    int maxflow() {
        int f = 0;
        while (true) {
            fill(level.begin(), level.end(), -1);
            level[s] = 0;
            q.push(s);
            if (!bfs())
                break;
            fill(ptr.begin(), ptr.end(), 0);
            while (int pushed = dfs(s, inf)) {
                f += pushed;
            }
        }
        return f;
    }
    void work()
    {
        int nax = n/2;
        int ans[nax+1][nax+1];
        memset( ans,0,sizeof(ans) );
        for(int i=0 ; i <m ; i++ )
        {
            int u = edges[i].u;
            int v = edges[i].v;
            if( v>=1 && v<=nax && u>=1+nax && u<=2*nax )
                ans[v][u-nax] = edges[i].flow;
        }
        for(int i=1 ; i<=nax ; i++ )
        {
            for(int j=1; j <=nax ; j++ )
                cout << ans[i][j] << " ";
            cout << "\n";
        }
        return ;
    }
};

signed main()
{
    fast;
    int n , m;
    cin >> n >> m;
    Dinic dinic(2*n+1,0,2*n+1);
    // logical question
    int ip = 0;
    for(int i=1 ; i<= n ; i++ )
    {
        int x;
        cin >> x;
        ip += x;
        dinic.add_edge( 0,i,x );
        dinic.add_edge( i,i+n,inf );
    }
    int op = 0;
    for(int i=1 ; i<= n ; i++ )
    {
        int x;
        cin >> x;
        op += x;
        dinic.add_edge( i+n,2*n+1,x );
    }
    if( ip != op ) return  cout << "NO\n",0;
    for(int i=1 ; i<=m ; i++ )
    {
        int u, v;
        cin >> v >> u ;
        dinic.add_edge( v,u+n,inf );
        dinic.add_edge( u,v+n,inf );
    }
    if(dinic.maxflow()!=ip) return  cout << "NO\n",0;
    cout << "YES\n";
    dinic.work();
}



