#include <bits/stdc++.h>

using namespace std;

const int MOD = 1e9 + 7;

typedef long long ll;

int add(int a, int b) {
	ll res = (ll)a + b;
	return res % MOD;
}

int sub(int a, int b) {
	ll res = (ll)a - b;
	res %= MOD;
	res += MOD;
	return res % MOD;
}

int mul(int a, int b) {
	ll res = (ll)a * b;
	return res % MOD;
}

int binpow(int a, int b) {
	int res = 1;
	while (b > 0) {
		if (b & 1) {
			res = mul(res, a);
		}
		a = mul(a, a);
		b >>= 1;
	}
	return res;
}

int divv(int a, int b) {
	return mul(a, binpow(b, MOD - 2));
}

vector<int> fact(int x) {
	vector<int> ans;
	int wx = x;
	for (int i = 2; i * i <= wx; i++) {
		if (x % i == 0) {
			ans.push_back(i);
		}
		while (x % i == 0) {
			x /= i;	
		}
	}		
	if (x > 1) {
		ans.push_back(x);	
	}
	return ans;
}

int get_cnt(int i, int k, int m) {
	//cnt j <= m, gcd(i, j) == k 
	assert(i % k == 0);
	//i = a * k
	//j = b * k
	int a = i / k;
	int lim = m / k;
	//1 <= b <= lim, gcd(a, b) = 1
	auto f = fact(a);
	int ans = 0;
	for (int mask = 1; mask < (1 << (int)f.size()); mask++) {
		int mul = 1;
		for (int i = 0; i < (int)f.size(); i++) {
			if ((mask >> i) & 1) {
				mul *= f[i];
			}
		}
		int cur = lim / mul;
		if (__builtin_popcount(mask) & 1) {
			ans += cur;
		} else {
			ans -= cur;
		}		
	}
	//cerr << i << ' ' << k << ' ' << m << endl;
	
	return lim - ans;
		
}
           
signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	#ifdef LOCAL
	assert(freopen("input.txt", "r", stdin));
	#endif

	int m;
	cin >> m;
	vector<int> dp(m + 1);
	dp[1] = 0;
	for (int i = 2; i <= m; i++) {
		dp[i] = 0;
		int val = 0;
		int cnt = m / i;
		vector<int> f = {};
		for (int j = 2; j * j <= i; j++) {
			if (i % j == 0) {
				f.push_back(j);
				if (j * j < i) {
					f.push_back(i / j);
				}
			}
		}
		for (auto k : f) {
			if (k != i) {
				int cur_cnt = get_cnt(i, k, m);
				val = add(val, mul(cur_cnt, dp[k]));
			}
		}
		val = divv(val, m);	
		dp[i] = divv(add(1, val), sub(1, divv(cnt, m)));
		//cerr << dp[i] << endl;
	}
	int ans = 0;
	for (int i = 1; i <= m; i++) {
		ans = add(ans, dp[i]);
	}
	ans = divv(ans, m);
	ans = add(ans, 1);
	cout << ans << endl;
	
}

