#include <bits/stdc++.h>
using namespace std;

using ll = long long;
const int N = 1e5+10;

int n, m; ll a[N];

ll t[N << 2], mx[N << 2];
void build(int node, int L, int R) {
	if(L == R) {
		t[node] = mx[node] = a[L];
		return; 
	} int mid = (L + R) >> 1, lc = node << 1, rc = lc | 1;
	build(lc, L, mid); build(rc, mid + 1, R);
	t[node] = t[lc] + t[rc];
	mx[node] = max(mx[lc], mx[rc]);
}

void updmod(int node, int L, int R, int l, int r, ll x) {
	if(r < L || R < l) return;
	if(mx[node] < x) return;
	if(L == R) {
		t[node] = t[node] % x;
		mx[node] = t[node];
		return;
	} int mid = (L + R) >> 1, lc = node << 1, rc = lc | 1;
	updmod(lc, L, mid, l, r, x); updmod(rc, mid + 1, R, l, r, x);
	t[node] = t[lc] + t[rc];
	mx[node] = max(mx[lc], mx[rc]);
}

void updset(int node, int L, int R, int pos, ll x) {
	if(L == R) {
		t[node] = x;
		mx[node] = x;
		return;
	} int mid = (L + R) >> 1, lc = node << 1, rc = lc | 1;
	if(pos <= mid) updset(lc, L, mid, pos, x);
	else updset(rc, mid + 1, R, pos, x);
	t[node] = t[lc] + t[rc];
	mx[node] = max(mx[lc], mx[rc]);
}

ll get(int node, int L, int R, int l, int r) {
	if(r < L || R < l) return 0;
	if(l <= L && R <= r) return t[node];
	int mid = (L + R) >> 1, lc = node << 1, rc = lc | 1;
	return get(lc, L, mid, l, r) + get(rc, mid + 1, R, l, r);
}

int main() {
	scanf("%d %d", &n, &m);
	for(int i = 1; i <= n; i++) scanf("%lld", &a[i]);
	build(1, 1, n);
	while(m--) {
		int ty; scanf("%d", &ty);
		if(ty == 1) {
			int l, r; scanf("%d %d", &l, &r);
			printf("%lld\n", get(1, 1, n, l, r));
		}
		else if(ty == 2) {
			int l, r, x; scanf("%d %d %d", &l, &r, &x);
			updmod(1, 1, n, l, r, x);
		}
		else {
			int k, x; scanf("%d %d", &k, &x);
			updset(1, 1, n, k, x);
		}
	} return 0;
}