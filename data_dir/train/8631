#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <cstdio>
#include <vector>
#include <cmath>
#include <ctime>
#include <set>
#include <map>


typedef long long ll;

using namespace std;
int n, q, m, t, N;
int a[505555], b[1111], inf = 1000000001;
set<pair<int, int> > A[1111];
set<pair<int, int> > :: iterator it;
void upd(int l, int r, int x){
	for(int i = l; i <= r;)
		if(i % m == 0 && i + m <= r){
			if(b[i / m] < inf)
				b[i / m] += x;
			i += m;
		}
		else{
			if(a[i]<inf){
				A[i / m].erase(A[i / m].lower_bound(make_pair(a[i], i)));
				a[i] += x;
				if(a[i]<inf)
					A[i / m].insert(make_pair(a[i], i));
			}
			i++;
		}
}
int X;
int found(int ind, int y){
	X = -1;
	it = A[ind].lower_bound(make_pair(y, -1));
	if(it -> first == y)
		X = it -> second;
	return X;
}
int Found(int ind, int y){
	X = -1;
	it = A[ind].lower_bound(make_pair(y, 1111111));
	if((it!=A[ind].begin())&&((--it) -> first == y))	
			X = it -> second;
	return X;
}
int ft, last;
void show(int y){
	ft = -1, last = -2;
	for(int i = 0; i < t; i++)
		if(!A[i].empty()){
	    	it = A[i].begin();
			if(b[i] + (it -> first) <= y ){
				ft = found(i, y - b[i]);					
				if(ft + 1)
					break;
			}
		}
	if(ft > -1)
	for(int i = t-1; i >=0; i--)
		if(!A[i].empty()){
			it = A[i].begin();
			if(b[i] + (it -> first) <= y){
				last = Found(i, y - b[i]);					
				if(last + 1)
					break;
			}
		}
	printf("%d\n", last - ft);
}
int main()
{
	scanf("%d %d\n", &n, &q);
	m = (int) sqrt(n);
	for(int i = 0; i < n; i++){
		scanf("%d ", a + i);
		A[i / m].insert(make_pair(a[i], i));
	}
	t = n / m + 1;
	int l, r, x, c;
	scanf("\n");
	while(q--){
	    scanf("%d ", &c);
	    if(c == 1){
	    	scanf("%d %d %d\n", &l, &r, &x);
	    	l--, r--;
	    	upd(l, r, x);
	    }
	    else{
	    	scanf("%d\n", &x);
	    	show(x);
	    }
	}
	return 0;
}
