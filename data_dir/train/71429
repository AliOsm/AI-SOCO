// Sky's the limit :)
#include<bits/stdc++.h>
using namespace std;
#define int long long

const int N = 1e6 + 5;

int n, x, y;
int a[N];
int ip[N];
int lpf[N];
int cnt[2][N];

void sett(int x, int i) {
    while(lpf[x] > 1) {
        if(lpf[x] != lpf[x / lpf[x]]) 
            cnt[i][lpf[x]]++;
        x /= lpf[x];
    }
}

int tryy(int p) {
    int res = 0;
    for(int i = 1; i <= n; i++) {
        int q = p - a[i] % p;
        if(p == q) 
            q = 0;
        res += min(x, q * y);
    }
    return res;
}

signed main() 
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    //int t; cin >> t; while(t--)
    {
        for(int i = 2; i < N; i++)
            ip[i]=1;
        for(int i = 2; i < N; i++) {
            if(ip[i]) {
                lpf[i] = i;
                for(int j = 2 * i; j < N; j += i) {
                    ip[j] = 0;
                    lpf[j]=i;
                }
            }
        }
        
        cin >> n >> x >> y;
        for(int i = 1; i <= n; i++)
            cin >> a[i];
        
        for(int i = 1; i <= n; i++) {
            sett(a[i], 0);
            sett(a[i] + 1, 1);
        }
        
        int ans = tryy(2);
        for(int i = 3; i < N; i++) {
            if(ip[i] && cnt[0][i] + cnt[1][i]) {
                ans = min(ans, (n - cnt[0][i]) * x);
                ans = min(ans, (n - cnt[0][i] - cnt[1][i]) * x + cnt[1][i] * y);
                
                if(2 * (cnt[0][i] + cnt[1][i]) >= n)
                    ans = min(ans, tryy(i));
            }
        }
        cout << ans << '\n';
    }
    
    return 0;
}