#include <iostream>
#include <stdio.h>
#include <string>
#include <memory.h>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <time.h>
#include <assert.h>
#include <cmath>
#include <stack>
#include <string.h>
#include <sstream>
#include <functional>
#include <algorithm>
#include <list>
using namespace std;
typedef long long ll;
const int M = 1000000007;
int mask, bad[4] = { 15,7,10,12 };
vector<vector<int> > v;
int dp[3000][3000];
int res = 0;
void add(char *s, int len, int j) {
	int cur = 0;
	bool added = false;
	for (int i = 0; i < len; ++i) {
		int x = s[-i] - '0';
		if (v[cur][x] == -1) {
			v[cur][x] = v.size();
			v.push_back({ -1,-1 });
			added = true;
		}
		cur = v[cur][x];
		if (added) {
			res += dp[j - i][j];
			if (res >= M)
				res -= M;
		}
	}
}
int main() {
	for (int i = 0; i < 4; ++i)
		mask |= 1 << bad[i];
	int n;
	cin >> n;
	string s(n, '0');
	for (int i = 0; i < n; ++i)
		cin >> s[i];
	for (int len = 1; len <= n; ++len)
		for (int i = 0; i + len - 1 < n; ++i) {
			int j = i + len - 1;
			dp[i][j] = 0;
			int cur = 0;
			for (int k = 0; k < 4; ++k) {
				if (j - k < i)
					break;
				cur = cur * 2 + s[j - k] - '0';
				if (k == 3 && ((mask >> cur) & 1))
					continue;
				if (i > j - k - 1)
					++dp[i][j];
				else
					dp[i][j] += dp[i][j - k - 1];
				if (dp[i][j] >= M)
					dp[i][j] -= M;
			}
		}
	v.push_back({ -1,-1 });
	for (int i = 0; i < s.size(); ++i) {
		add(&s[i], i + 1, i);
		printf("%d\n", res);
	}
	return 0;
}