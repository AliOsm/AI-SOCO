#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define all(v) (v).begin() , (v).end()
#define popcnt(x) __builtin_popcount(x)
#define inf 0x3f3f3f3f
#define watch(x) cout << (#x) << " is " << (x) << endl
#define F first
#define S second

using namespace std;
//using namespace __gnu_pbds;
typedef long long  ll;

//template <typename T>
//using ordered_set = tree<T, null_type, less<T> , rb_tree_tag, tree_order_statistics_node_update>;

const double EPS = 1e-9;
const double pi = acos(-1.0);

int dx[] = {0 , 0 , 1 , -1 , 1 , 1 , -1 , -1};
int dy[] = {1 ,-1 , 0 , 0 , -1 , 1 ,  1 , -1};
const int N = 2e5 + 44;

vector<int> adj[N];

int st[4 * N] , n , a[N] , q;
bool notvalid = false;

int left(int p){return p << 1;}
int right(int p){return (p << 1) + 1;}
int combine(int a , int b){
    if(a == 0 && b == 0)return inf;
    if(a == 0)return b;
    if(b == 0)return a;
    return min(a , b);
}

void build(int p , int l , int r){
    if(l == r){
        st[p] = a[l];
        return;
    }
    int mid = (l + r) / 2;
    build(left(p) , l , mid);
    build(right(p) , mid + 1 , r);
    st[p] = combine(st[left(p)] , st[right(p)]);
}

int query(int p , int l , int r , int i , int j){
    if(i > r || j < l)return inf;
    if(l >= i && r <= j)return st[p];

    int mid = (l + r) / 2;
    int p1 = query(left(p) , l , mid , i , j);
    int p2 = query(right(p) , mid + 1 , r , i , j);
    return combine(p1 , p2);
}



int main(){
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
#endif

    cin >> n >> q;
    bool allzeros = true , anyzero = false , anyq = false;
    for(int i = 0 ; i < n ; ++i)
        cin >> a[i] , allzeros &= (a[i] == 0) , anyzero |= (a[i] == 0) , anyq |= (a[i] == q);

    if(!anyzero && !anyq){
        cout << "NO\n";
        return 0;
    }
    if(allzeros){
        cout << "YES\n";
        for(int i = 0 ; i < n ; ++i)
            cout << q << ' ';
        cout << '\n';
        return 0;
    }
    build(1 , 0 , n - 1);
    for(int i = 0 ; i < n ; ++i){
        adj[a[i]].pb(i);
    }
    bool ok = true;
    for(int i = 0 ; i < n ; ++i){
        if(i == adj[a[i]][0] || a[i] == 0)continue;
        int mn = query(1 , 0 , n - 1 , adj[a[i]][0] , i);
        if(mn < a[i])ok = false;
    }

    if(!ok){
        puts("NO");
        return 0;
    }
    puts("YES");
    bool can = false;
    for(int i = 0 ; i < n ; ++i)can |= (a[i] == q);
    for(int i = 0 ; i < n ; ++i){
        if(a[i] == 0){
            if(!can)a[i] = q , can = true;
        }
    }
    int top = -1;
    for(int i = 0 ; i < n ; ++i){
        
        if(a[i] == 0 && ~top){
            if(i == 0){
               a[i] = top;
            }
            else{
                a[i] = top;
            }
        }
        if(a[i])top = a[i];
    }
    top = -1;
    for(int i = n - 1 ; ~i ; --i){
        
        if(a[i] == 0 && ~top){
            if(i == 0){
               a[i] = top;
            }
            else{
                a[i] = top;
            }
        }
        if(a[i])top = a[i];
    }
    for(int i = 0 ; i < n ; ++i)
        cout << a[i] << ' ';
    cout << '\n';
}
