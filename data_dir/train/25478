#pragma comment(linker, "/STACK:640000000")
#include<iostream>
#include<cstdio>
#include<cassert>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<cmath>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<bitset>
#include<algorithm>

#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define ll long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)

using namespace std;

typedef pair<int, int> pii;

const double eps = 1e-9;
const double pi = acos(-1.0);

const int maxn = (int)1e5 + 10;
const int maxq = 5010;

int a[maxn];
int l[maxq],r[maxq];
double p[maxq];
int mav[maxq];
double e[maxq][maxq];

struct tree {
    int ma;
    int lf,rg;
    tree *L;
    tree *R;
    tree(int l, int r, int *a) {
        lf = l;
        rg = r;
        if (l == r) {
            ma = a[l];
        } else {
            int m = (l + r) >> 1;
            L = new tree(l,m,a);
            R = new tree(m + 1,r,a);
            ma = max(L -> ma,R -> ma);
        }
    }
    int get(int a, int b) {
        if (a <= lf && rg <= b) return ma;
        int m = (lf + rg) >> 1;
        if (b <= m) return L -> get(a,b);
        if (m + 1 <= a) return R -> get(a,b);
        return max(L -> get(a,b),R -> get(a,b));
    }
};

tree *root;

vector<int> g[maxq];

void dfs(int v) {
    mav[v] = root -> get(l[v],r[v]);
    for (int i = 0; i <= 5000; i++) {
        e[v][i] = 0.0;
    }
    e[v][0] = 1.0;
    for (int i = 0; i < sz(g[v]); i++) {
        int to = g[v][i];
        dfs(to);
        if (mav[to] + 5000 < mav[v]) continue;
        double prob1 = 1.0;
        double prob2 = 1.0;
        for (int j = 5000; j >= 0; j--) {           
            double tmp = e[v][j];
            if (mav[to] + 5000 >= mav[v] + j) {
                e[v][j] = e[v][j] * prob2 + (prob1 - e[v][j]) * e[to][mav[v] + j - mav[to]];
                prob2 -= e[to][mav[v] + j - mav[to]];
            }           
            prob1 -= tmp;
        }       
    }
    /*cout << v << " " << mav[v] << ":" << endl;
    for (int i = 0; i <= 5; i++) {
        cout << e[v][i] << " ";
    }
    cout << endl;*/
    for (int i = 5000; i > 0; i--) {
        e[v][i] = e[v][i - 1] * p[v] + e[v][i] * (1.0 - p[v]);
    }
    e[v][0] = (1.0 - p[v]) * e[v][0];   
    /*for (int i = 0; i <= 5; i++) {
        cout << e[v][i] << " ";
    }
    cout << endl;*/
}

int main() {
    #ifdef LOCAL
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    
    int n,q; cin >> n >> q;
    
    for (int i = 0; i < n; i++) scanf("%d",&a[i]);
    
    root = new tree(0,n - 1,a);
    
    for (int i = 0; i < q; i++) {
        scanf("%d%d%lf",&l[i],&r[i],&p[i]);
        l[i]--;
        r[i]--;
    }   
    
    for (int i = 0; i < q; i++) {
        for (int j = i + 1; j < q; j++) {
            if (r[i] - l[i] > r[j] - l[j]) {
                swap(l[i],l[j]);
                swap(r[i],r[j]);
                swap(p[i],p[j]);
            }
        }
    }
    
    l[q] = 0;
    r[q] = n - 1;
    p[q] = 0.0; 
    q++;
    
    for (int i = 0; i < q; i++) {
        for (int j = i + 1; j < q; j++) if (l[j] <= l[i] && r[i] <= r[j]) {
            g[j].pb(i);
            break;
        }
    }
    
    dfs(q - 1);
    
    double res = 0.0;
    
    for (int i = 0; i <= 5000; i++) {
        res += (mav[q - 1] + i) * e[q - 1][i];
    }
    
    printf("%.12f\n",res);
    
    return 0;
}
