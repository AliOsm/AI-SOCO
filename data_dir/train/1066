#include <bits/stdc++.h>
using namespace std;
#define pf push_front
#define pb push_back
#define FOR(i,begin,end) for (LL i=begin;i<=end;i++)
#define rep(i,t) for (LL i=0;i<t;i++)
#define pii pair<LL,LL>
#define pi pair<pii,pii>
#define X first
#define Y second 
#define fast cin.tie(0),cout.tie(0),ios::sync_with_stdio(false) 
typedef long long LL;
const LL maxN=1e3+7,MOD=1e9+7,INF=1e9+7,N=1e6+17,sqr=75;
vector<LL>a[maxN],vc[maxN];
LL wey[maxN],bey[maxN],ans,cur,x,y,n,m,w,pointer,dp[maxN][maxN];
pii p[maxN];
bool v[maxN];
void dfs(LL x, LL num)
{
    vc[num].pb(x);
    v[x]=true;
    bey[num]+=p[x].Y;
    wey[num]+=p[x].X;
    rep(i,a[x].size())
    {
        if(!v[a[x][i]])
            dfs(a[x][i],num);
    }
}
main()
{
    fast;
    cin>>n>>m>>w;
    FOR(i,1,n)
        cin>>p[i].X;
    FOR(i,1,n)
        cin>>p[i].Y;
    FOR(i,1,m)
        cin>>x>>y,a[x].pb(y),a[y].pb(x);
    FOR(i,1,n)
    {
        if(!v[i])
            dfs(i,++pointer);
    }
    FOR(i,1,pointer)
    {
        FOR(j,0,w)
            dp[i][j]=dp[i-1][j];
        FOR(j,0,w)
        {
            if(wey[i]+j<=w)
                dp[i][wey[i]+j]=max(dp[i-1][j]+bey[i],dp[i][wey[i]+j]);
        }
        rep(z,vc[i].size())
        {
            cur=vc[i][z];
            FOR(j,0,w)
            {
                if(p[cur].X+j<=w)
                    dp[i][p[cur].X+j]=max(dp[i][p[cur].X+j],dp[i-1][j]+p[cur].Y);
            }
        }
    }
    FOR(i,1,w)
        ans=max(ans,dp[pointer][i]);
    return cout<<ans<<'\n',0;
}