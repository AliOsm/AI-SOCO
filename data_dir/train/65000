#include <map>
#include <set>
#include <stdio.h>
#include <cstring>
#include <algorithm>

using namespace std;

const int N = 3228228;

long long g[N], t[N], l, r, x;
int n, m;
char buf[228];


void push(int l, int r, int k)
{
    if(g[k] == 0)
        return;
    if(r - l > 1)
        g[(k << 1) + 0] += g[k],
        g[(k << 1) + 1] += g[k];
    t[k] += g[k];
    g[k] = 0;
}

void modify(int ll, int rr, int l, int r, int k, long long f)
{
    push(l, r, k);
    if(r <= ll || l >= rr)
        return;
    if(ll <= l && r <= rr)
    {
        g[k] += f;
        push(l, r, k);
        return;
    }
    int c = (l + r + 1) >> 1;
    modify(ll, rr, l, c, (k << 1) + 0, f);
    modify(ll, rr, c, r, (k << 1) + 1, f);
    t[k] = min(t[(k << 1) + 0], t[(k << 1) + 1]);
}

long long get(int ll, int rr, int l, int r, int k)
{
    push(l, r, k);
    if(r <= ll || l >= rr)
        return (long long)1e18;
    if(ll <= l && r <= rr)
        return t[k];
    int c = (l + r + 1) >> 1;
    return min(get(ll, rr, l, c, (k << 1) + 0), get(ll, rr, c, r, (k << 1) + 1));
}

int main()
{
    //freopen("temp", "r", stdin);
    scanf("%d", &n);
    for(int i = 0; i < n; i++)
        scanf("%I64d", &x),
        modify(i, i + 1, 0, n, 1, x);
    scanf("%d\n", &m);
    int k;
    for(int i = 0; i < m; i++)
    {
        gets(buf);
        k = 0;
        for(int j = 0; buf[j] != '\0'; j++)
            k += (buf[j] == ' ');

        if(k == 2)
        {
            sscanf(buf, "%I64d %I64d %I64d", &l, &r, &x);
            if(l > r)
                modify(l, n, 0, n, 1, x),
                modify(0, r + 1, 0, n, 1, x);
            else
                modify(l, r + 1, 0, n, 1, x);
        }
        else
        {
            sscanf(buf, "%I64d %I64d", &l, &r);
            if(l > r)
                printf("%I64d\n", min(get(l, n, 0, n, 1), get(0, r + 1, 0, n, 1)));
            else
                printf("%I64d\n", get(l, r + 1, 0, n, 1));
        }
    }
    return 0;
}
