
// ~/BAU/ACM-ICPC/Teams/Rampage/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <functional>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const int N = 2001;
const ll MOD = 1e9 + 7;
const double eps = 1e-9;

struct point {
	int x, y;
	point() {};
	point(int x, int y) {
		this->x = x;
		this->y = y;
	}
	point operator-(const point &o) const {
		point res;
		res.x = x - o.x;
		res.y = y - o.y;
		return res;
	}
	ll operator*(const point &o) const {
		return 1ll * x * o.y - 1ll * y * o.x;
	}
	double angle() {
		return atan2(y, x);
	}
} p[N];

int n;
vector<pair<double, point> > v;

inline ll nC2(ll n) {
	return n * (n - 1) / 2;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		scanf("%lld%lld", &p[i].x, &p[i].y);
	ll ans = 0;
	for (int i = 0; i < n; i++) {
		v.clear();
		for (int j = 0; j < n; j++) 
			if (j != i) {
				v.push_back(make_pair(0.0, p[j] - p[i]));
				v.back().first = v.back().second.angle();
			}
		sort(v.begin(), v.end(),[](const pair<double,point> &a, const pair<double,point> &b){
			return a.first < b.first;
		});
		int k = 0, ubove = 0;
		for (int j = 0; j < v.size(); j++) {
			while (1) {
				if ((v[k].second * v[j].second) > 0) break;
				k++;
				ubove++;
				if (k == v.size()) k = 0;
				if (k == j) break;
			}
			ans += nC2(ubove - 1) * nC2(v.size() - ubove);
			ubove--;
		}
	}
	printf("%lld\n", ans / 2);
	return 0;
}