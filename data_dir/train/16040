#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#define P_B push_back
#define M_P make_pair
#define F first
#define S second
#define size(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define FR(i, a, b) for(int i = a; i < b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define mod (1000 * 1000 * 1000 + 7)
#define fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

const int MAXN = 1000 + 10;
int mn[MAXN], t[MAXN];
vector <int> q[MAXN];
bool mark[MAXN];

void solve(int a, int b, int c, int d, int t)
{
	if(b - a <= 1)
		return;
	int m1 = (a + b) / 2;
	int m2 = (c + d) / 2;
	if((b - a) % 2 == 0)
	{
		FR(i, a, m1)
			q[t].P_B(i + 1);
		FR(i, m1, b)
			q[t + 1].P_B(i + 1);
		if(b - a <= 2)
			return;
		solve(a, m1, c, m2, t + 2);
		solve(m1, b, m2, d, t + 2);
	}
	else
	{
		FR(i, a, m1)
			q[t].P_B(i + 1);
		FR(i, m1 + 1, b)
			q[t + 1].P_B(i + 1);
		q[t + 2].P_B(m1 + 1);
		q[t + 3].P_B(m1 + 1);
		solve(a, m1, c, m2, t + 2);
		solve(m1 + 1, b, m2 + 1, d, t + 2);
	}
}

int main()
{
	int n;
	cin>> n;
	solve(0, n, 0, n, 0);
	FR(i, 0, n)
		mn[i] = INT_MAX;
	FR(i, 0, 20)
	{
		if(!size(q[i]))
			break;
		sort(all(q[i]));
		q[i].resize(unique(all(q[i])) - q[i].begin());
		cout<< size(q[i]) << endl;
		FR(j, 0, size(q[i]))
		{
			cout<< q[i][j] << " ";
			mark[q[i][j] - 1] = true;
		}
		cout<< endl;
		fflush(stdout);
		FR(i, 0, n)
			cin>> t[i];
		FR(i, 0, n)
			if(!mark[i])
				mn[i] = min(mn[i], t[i]);
		FR(i, 0, n)
			mark[i] = false;
	}
	cout<< -1 << endl;
	FR(i, 0, n)
		cout<< mn[i] << " ";
	cout<< endl;
	fflush(stdout);

	return 0;
}
