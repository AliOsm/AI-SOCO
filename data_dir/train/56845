#include <bits/stdc++.h>
#include <ctime>

using namespace std;

#define space ' '
#define enter "\n"
#define fi first
#define se second
#define mp make_pair
#define ALL(x) x.begin(), x.end()

typedef long long ll;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef set <int> si;
typedef map <int, int> mii;
typedef pair <ll, ll> pll;
typedef vector <int> vi;
typedef vector <pii> vii;
typedef long double ld;

template <class T>
T sqr (T x) {
	return x * x;
}

template <class T>
T gcd (T a, T b) {
	return b ? gcd(b, a % b) : a;
}

template <class T1, class T2>
T1 chmin (T1 & x, const T2 & y) {
	if (T1(y) < x)
		return x = y;
	return x;
}

template <class T1, class T2>
T1 chmax (T1 & x, const T2 & y) {
	if (T1(y) > x)
		return x = y;
	return x;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const pair <T1, T2> & p) {
	return os << '(' << p.fi << ", " << p.se << ')';
}

template <class T>
ostream & operator << (ostream & os, const vector <T> & v) {
	os << '{';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '}';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const set <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const multiset <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const map <T1, T2> & m) {
	os << '<';
	bool was = false;
	for (const auto & x : m) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '>';
	return os;
}

const ll INF = (ll) 2e9;
const int MOD = (int) 1e9 + 7;
const int MAXN = (int) 2e5 + 10;

int n, maxStep = 0;
vi d[MAXN];
bool us[MAXN];
int clr[MAXN];

void dfs (int x, int lst) {
	us[x] = true;
	int T = 1;
	int lstGood = 0;
	for (auto to : d[x]) {
		if (to != lst) {
			while (T == clr[x] || T == clr[lst] || T == lstGood)
				T++;
			clr[to] = T;
			lstGood = T;
		}
	}
	for (auto to : d[x]) {
		if (to != lst) {
			dfs(to, x);
		}
	}
}

int main () {
	ios_base::sync_with_stdio(false);
	cin >> n;
	for (int i = 1; i < n; i++) {
		int x, y;
		cin >> x >> y;
		d[x].push_back(y);
		d[y].push_back(x);
		if (maxStep < d[x].size())
			maxStep = d[x].size();
		if (maxStep < d[y].size())
			maxStep = d[y].size();
	}
	clr[1] = 1;
	maxStep++;
	dfs(1, 0);
	cout << maxStep << enter;
	for (int i = 1; i <= n; i++) {
		cout << clr[i] << space;
	}
}

