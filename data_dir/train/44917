
/*
 * Author    : raj1307 - Raj Singh
 * Date      : 23.03.2020
 */

#pragma GCC optimize("Ofast")
// #pragma GCC optimize("unroll-loops")
// #define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
using namespace std;

//#define DEBUG
#ifdef DEBUG
#define deb(...) cerr<<"Line:"<<__LINE__<<" "; __f(#__VA_ARGS__, __VA_ARGS__)
#define debarr(a,n) cerr<<#a<<" : ";for(int i=0;i<n;i++) cerr<<a[i]<<" "; cerr<<endl;
#define print(arr) for (auto it = arr.begin(); it != arr.end(); ++it) cerr << *it << " "; cerr << endl;
#define debmat(mat,row,col) cerr<<#mat<<" :\n";for(int i=0;i<row;i++) {for(int j=0;j<col;j++) cerr<<mat[i][j]<<" ";cerr<<endl;}
template<typename Arg1>
void __f(const char *name, Arg1 &&arg1) {
	cerr<<name<<" : "<<arg1<<endl;
}
template<typename Arg1, typename ... Args>
void __f(const char *names, Arg1 &&arg1, Args &&... args) {
	const char *comma=strchr(names+1,',');
	cerr.write(names,comma-names)<<" : "<<arg1<<" | ";
	__f(comma+1,args...);
}

#else
#define deb(...) {}
#define debarr(a,n) {}
#define debmat(mat,row,col) {}
#define debarr(a,n) {}
#endif

#define fio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define fr(i, a, b) for(int i = (a); i < (b); ++i)
#define fb(i, b, a) for(int i = (b); i > (a); --i)
#define rr return 
#define mp make_pair
#define pb push_back
#define sz(x) ((int)x.size())
#define int long long
#define ll long long
#define ld long double
#define endl "\n"
#define all(v) (v).begin(), (v).end()
typedef pair<int, int> ii;;
int max(int a,int b){if(a>b) return a; else return b;}
int min(int a,int b){if(a>b) return b; else return a;}
int gcd(int a,int b){ return (b == 0) ? a : gcd(b, a % b);}
inline int lcm(int a,int b){ return a / gcd(a, b) * b;}
inline int normalize(int x,int mod){ x %= mod; if (x < 0) x += mod; return x;}

int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};
string abc="abcdefghijklmnopqrstuvwxyz";
const double PI=acosl(-1);
const int mod = 1000*1000*1000+7;
//const int mod = 998244353;
const int inf = 1e18 +5;

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }

int floor1(int n,int k){
    if(n%k == 0 || n >= 0)return n/k;
    return (n/k)-1;
}

int ceil1(int n,int k){
    return floor1(n+k-1,k);
}

int powm(int a, int b) {
	int res=1;
	while(b) {
		if(b&1)
			res=(res*a)%mod;
		a=(a*a)%mod;
		b>>=1;
	}
	return res;
}


const int N = 5000 + 5;
 

int n;
string s;
 
int gen_base(const int before, const int after) {
    auto seed = std::chrono::high_resolution_clock::now().time_since_epoch().count();
    std::mt19937 mt_rand(seed);
    int base = std::uniform_int_distribution<int>(before+1, after)(mt_rand);
    return base % 2 == 0 ? base-1 : base;
}

struct StringHash {
    int base;
 
    string s;
    int n;
    vector<int> pre; //hash of prefix of length i.
    vector<int> powb; //base ^ i (mod mods)
 
    //O(n)
    StringHash(string s,int p=255){
    	base=p;
        n = s.size();
        pre.resize(n + 1); 
        powb.resize(n + 1);
        pre[0] = 0;
        powb[0] = 1;
        for(int i = 0; i < n; i++) {
            pre[i+1] = add(mul(pre[i], base, mod), s[i], mod);
            powb[i+1] = mul(powb[i], base, mod);
        }
    }
 
    //Returns hash of the substring of length len starting at pos. i
    //O(1)
    int hash(int i, int len) {
        if(!len) return 0;
        len = min(len, n - i);   //Note
        int j = i + len - 1;
        int ans;
        ans = sub(pre[j+1], mul(pre[i], powb[len], mod), mod);
        return ans;
    }
};
 
int dp1[N];
int dp2[N][N];
 


void solve(){     

	
	cin>>s;
	n=sz(s);
	string t=s;
	reverse(all(t));
 	int p=gen_base(256,mod);
	StringHash hash1(s,p),hash2(t,p);
 
	fr(i,0,n){
		fr(j,i,n){
			
			
			int len=j-i+1;
			int h1=hash1.hash(i,len/2);
			int h2=hash2.hash(n-j-1,len/2);
			int c=0;
			// if(j-i==2 and h1==h2){

			// 	c=dp2[i][i];
			// 	++dp1[c+1];					
			// 	dp2[i][j]=c+1;	

			// }

			if(h1==h2){
		
				
				if(len%2==0){
					c=dp2[i][max(i+len/2-1,0)];
				}
				else{
					if((i+len/2-1)<0){
						c=0;
					}
					else{
						c=dp2[i][max(i+len/2-1,0)];
					}
				}
		
				++dp1[c+1];					
				dp2[i][j]=c+1;	
			}	
 
		}
	}

 
	fb(i,n-1,-1) dp1[i]+=dp1[i+1];
 
	fr(i,1,n+1) cout<<dp1[i]<<" ";
 
 
 
 
 
 
 


















    
}




signed main() {
	fio;
	#ifndef ONLINE_JUDGE 
    	freopen("input.txt", "r", stdin); 
    	freopen("output.txt", "w", stdout); 
    	//freopen("error.txt", "w", stderr); 
	#endif 
	cout<<fixed<<setprecision(10);
	int t=1;
	//cin>>t;  // UNCOMMENT FOR TEST-CASES
    //precompute();
    //int tot=t;
	while(t--) {
		//cout<<"Case #"<<tot-t<<": ";
		solve();

	}
	
	
	return 0;
}


