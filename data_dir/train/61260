#include <bits/stdc++.h>
using namespace std;
long double p[20][20],dp[(1 << 18) + 5],ans[20];
bool vis[(1 << 18) + 5];
int n;
long double solve(int mask){
    if(mask == (1 << n) - 1)
        return 1;
    if(vis[mask])
        return dp[mask];
    vis[mask] = 1;
    bitset<18> b = mask;
    int N = (b.count() * (b.count() + 1)) / 2;
    long double &ans = dp[mask];
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            if(b[i] && !b[j])
                ans += p[i][j] / (long double) N * solve(mask ^ (1 << j));
    return ans;
}
int main()
{
    ios::sync_with_stdio(0);
    cout << fixed << setprecision(8);
    cin >> n;
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
        cin >> p[i][j];
    for(int i = 0; i < n; i++)
        cout << solve(1 << i) << " ";
    return 0;
}
