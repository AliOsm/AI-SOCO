#include<bits/stdc++.h>

using namespace std;

typedef long long ll;

const int N=200005;

vector<int> tree[N];
bool vis[N];
bool vis2[N];
int col[N];
int sum[N];
int mx=0;

int dfs(int root)
{
    if(vis[root])
        return 0;
    vis[root]=1;
    int cnt=1;
    sum[col[root]]++;
    if(sum[col[root]]>mx)
        mx=sum[col[root]];
    for(int i=0;i<tree[root].size();i++)
        cnt+=dfs(tree[root][i]);
    return cnt;
}

void dfs2(int root)
{
    if(vis2[root])
        return;
    vis2[root]=1;
    sum[col[root]]--;
    for(int i=0;i<tree[root].size();i++)
        dfs2(tree[root][i]);
    return;
}


int main()
{
    int n,m,k;
    cin>>n>>m>>k;
    for(int i=1; i<=n; i++)
        cin>>col[i];
    for(int i=0; i<m; i++)
    {
        int u,v;
        cin>>u>>v;
        tree[u].push_back(v);
        tree[v].push_back(u);
    }
    ll ans=0;
    for(int i=1; i<=n; i++)
        if(!vis[i])
        {
            mx=0;
            int tot=dfs(i);
            dfs2(i);
            ans+=tot-mx;
        }
    cout<<ans<<endl;
    return 0;
}
