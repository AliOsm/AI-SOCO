#include<bits/stdc++.h>

using namespace std;

#define fRead(x)  freopen(x,"r",stdin)
#define fWrite(x) freopen (x,"w",stdout)

#define LL long long
#define ULL unsigned long long
#define ff first
#define ss second
#define pb push_back
#define INF 2e16
#define PI acos(-1.0)
#define mk make_pair

#define min3(a,b,c) min(a,min(b,c))
#define max3(a,b,c) max(a,max(b,c))
#define min4(a,b,c,d) min(a,min(b,min(c,d)))
#define max4(a,b,c,d) max(a,max(b,max(c,d)))
#define SQR(a) ((a)*(a))
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define REP(i,b) for(int i=0;i<b;i++)
#define ROF(i,a,b) for(int i=a;i>=b;i--)
#define MEM(a,x) memset(a,x,sizeof(a))
#define ABS(x) ((x)<0?-(x):(x))

#define scanI(a) scanf("%d",&a)
#define scanI2(a,b) scanI(a) , scanI(b)
#define scanI3(a,b,c) scanI(a), scanI(b), scanI(c)
#define scanI4(a,b,c,d) scanI(a), scanI(b), scanI(c), scanI(d)

#define scanL(a) scanf("%I64d",&a)
#define scanL2(a,b) scanL(a) , scanL(b)
#define scanL3(a,b,c) scanL(a), scanL(b), scanL(c)
#define scanL4(a,b,c,d) scanL(a), scanL(b), scanL(c), scanL(d)

#define SORT(v) sort(v.begin(),v.end())
#define REV(v) reverse(v.begin(),v.end())

#define FastRead ios_base::sync_with_stdio(0);cin.tie(nullptr);

const int N = 300005;
int ara[N];
int n,k,s;
LL dp[5005][5005];

LL call(int x,int y,int pos)
{
    if(pos == n + 1){
        return 0;
    }
    if(dp[x][y] != -1)return dp[x][y];
    LL ret = 1e18;
    if(x > 0){
        int g = pos + s - 1;
        LL sum = 0;
        for(int i = pos;i < g;i++)sum += ara[i + 1] - ara[i];
        ret = min(ret,sum + call(x - 1,y,g + 1));
    }
    if(y > 0){
        int g = pos + s;
        LL sum = 0;
        for(int i = pos;i < g;i++)sum += ara[i + 1] - ara[i];
        ret = min(ret,sum + call(x,y - 1,g + 1));
    }
    return dp[x][y] = ret;
}
int main()
{
    MEM(dp,-1);
    cin >> n >> k;

    FOR(i,1,n)cin >> ara[i];
    sort(ara + 1,ara + n + 1);
    s = n/k;
    LL ans = call(k - n % k,n % k,1);
    cout << ans << "\n";
}
