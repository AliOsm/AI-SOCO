#include <bits/stdc++.h>
#define endl '\n'

using namespace std;
const int MAXN = (int)3e3 + 42;

struct edge
{
	int u, v, w;
	edge() { u = 0; v = 0; w = 0; }
	edge(int _u, int _v, int _w)
	{
		u = _u;
		v = _v;
		w = _w;
	}
};

bool cmp(edge f, edge s) { return f.w < s.w; }

int n;
edge e[MAXN];
int cnt[MAXN];

void read()
{
	cin >> n;
	for(int i = 0; i < n - 1; i++)
		cin >> e[i].u >> e[i].v >> e[i].w;

	for(int i = 1; i <= n; i++)
		cin >> cnt[i];
}

int par[MAXN], cnt_tree[MAXN];
vector<int> vers[MAXN];

void init(int sz) 
{ 
	for(int i = 1; i <= sz; i++)
	{
		vers[i].clear();
		vers[i].push_back(i);
		cnt_tree[i] = cnt[i];
		par[i] = i;
	}
}

int root(int x) { return x == par[x] ? x : (par[x] = root(par[x])); }

void unite(int u, int v)
{
	u = root(u), v = root(v);
	if(vers[u].size() < vers[v].size())
		swap(u, v);

	par[v] = u;
	cnt_tree[u] += cnt_tree[v];

	for(int x: vers[v])
		vers[u].push_back(x);
	vers[v].clear();
}

bool connected(int u, int v) { return root(u) == root(v); }

bool check(int d)
{
	init(n);
	int cnt_all = 0;
	for(int i = 1; i <= n; i++) cnt_all += cnt[i];
	
	for(int i = 0; i < n - 1; i++)
		if(e[i].w < d && !connected(e[i].u, e[i].v))
		{
			unite(e[i].u, e[i].v);
			if(cnt_all - cnt_tree[root(e[i].u)] < vers[root(e[i].u)].size())
				return false;
		}

	return true;
}


void solve()
{
	int low = 1, high = (int)1e9 + 42, mid, ans = 0;
	
	while(low <= high)
	{
		mid = (low + high) >> 1;

		if(check(mid)) 
			ans = mid, low = mid + 1;
		else
			high = mid - 1;
	}
	
	if(ans >= (int)1e9 + 42)
		ans = 0;

	cout << ans << endl;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}

