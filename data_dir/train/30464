#include<bits/stdc++.h>
using namespace std;


const int N = 2e5 + 5, M = 1e6 + 5, MOD = 1e9 + 7;


int n, m, k, a[N], phi[M + 5], cnt[M + 5];
bool used[M];
vector < int > divs[M + 5];
int f[M + 5], of[M + 5];

inline int binpow(int a, int n){
    int res = 1;
    while(n){
        if(n & 1){
            res= (1LL * res * a) % MOD;
        }
        a = (1LL * a * a) % MOD;
        n >>= 1;
    }
    return res;
}

inline int C(int n, int k){
    if(n < k){
        return 0;
    }
    return 1LL * f[n] * of[n - k] % MOD * of[k] % MOD;
}
int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin >> n >> k >> m;
    for(int i = 1; i <= n + m; i++){
        cin >> a[i];
        used[a[i]] = true;
    }
    for(int i = 1; i <= M; i++){
        phi[i] = i;
    }
    for(int i = 1; i <= M; i++){
        for(int j = i; j <= M; j += i){
            if(j > i){
                phi[j] -= phi[i];
            }
            if(used[j]){
                divs[j].push_back(i);
            }
        }
    }
    f[0] = of[0] = 1;
    for(int i = 1; i <= M; i++){
        f[i] = (1LL * f[i - 1] * i) % MOD;
    }
    of[M] = binpow(f[M], MOD - 2);
    for(int i = M - 1; i >= 1; i--){
        of[i] = (1LL * of[i + 1] * (i + 1)) % MOD;
    }
    int ans = 0;
    for(int i = 1; i <= n + m; i++){
        for(auto d : divs[a[i]]){
            ans = (ans + 1LL * phi[d] * C(cnt[d], k - 1)) % MOD;
            cnt[d]++;
        }
        if(i > n){
            cout << ans << "\n";
        }
    }
}
