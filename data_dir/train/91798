#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 110;
char s[N];
int64 dp[N][N][N];
int v[N];

int64 solve(int i, int j, int k) {
  int64& ret = dp[i][j][k];
  if (ret >= 0) return ret;
  if (i == j) return v[k];
  ret = v[k + 1] + solve(i + 1, j, 0);
  for (int u = i + 1; u < j; ++u) {
    if (s[u] == s[i]) {
      int64 cur = solve(i + 1, u, 0) + solve(u, j, k + 1);
      ret = max(ret, cur);
    }
  }
  return ret;
}

int main() {
  int n;
  scanf("%d", &n);
  scanf("%s", s);
  v[0] = 0;
  for (int i = 1; i <= n; ++i) {
    scanf("%d", &v[i]);
  }
  memset(dp, 255, sizeof(dp));
  int64 ret = solve(0, n, 0);
  printf("%lld\n", ret);
  return 0;
}
