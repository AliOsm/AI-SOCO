#pragma GCC optimize("O3", "unroll-loops")
#pragma GCC target("avx2")
 
#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <cmath>
#include <string>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <bitset>
#include <sstream>
#include <deque>
#include <queue>
#include <random>
#include <cassert>
 
using namespace std;
 
#define FAST ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define FIXED cout << fixed << setprecision(12)
#define RANDOM srand(94385)
#define ll long long
#define ld long double
#define pii pair<int, int>
#define pll pair<ll, ll>
#define graph vector<vector<int>>
#define pb push_back
#define pf push_front
#define popb pop_back
#define popf pop_front
#define f first
#define s second
#define hashmap unordered_map
#define hashset unordered_set
#define eps 1e-9
#define mod 1000000007
#define inf 3000000000000000007ll
#define sz(a) signed(a.size())
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
 
template<class T, class U> inline void checkmin(T &x, U y) { if (y < x) x = y; }
template<class T, class U> inline void checkmax(T &x, U y) { if (y > x) x = y; }
template<class T, class U> inline bool ifmax(T &x, U y) { if (y > x) return x = y, true; return false; }
template<class T, class U> inline bool ifmin(T &x, U y) { if (y < x) return x = y, true; return false; }
template<class T> inline void sort(T &a) { sort(all(a)); }
template<class T> inline void rsort(T &a) { sort(rall(a)); }
template<class T> inline void reverse(T &a) { reverse(all(a)); }
template<class T, class U> inline istream& operator>>(istream& str, pair<T, U> &p) { return str >> p.f >> p.s; }
template<class T> inline istream& operator>>(istream& str, vector<T> &a) { for (auto &i : a) str >> i; return str; }
template<class T> inline T sorted(T a) { sort(a); return a; }
 
int n, k;
vector<int> a;
graph G;
vector<vector<int>> dp;
 
void countdp(int v, int p = -1) {
    vector<int> sons;
    for (auto i : G[v])
        if (i != p) {
            countdp(i, v);
            sons.pb(i);
        }
    dp[v][0] = a[v];
    for (auto i : sons)
        dp[v][0] += dp[i][k];
    for (int h = 0; h + h < n; ++h) {
        int other = max(max(h, k / 2), k - h - 1);
        int sum = 0;
        for (auto i : sons) sum += dp[i][other];
        for (auto i : sons)
            checkmax(dp[v][h + 1], sum - dp[i][other] + dp[i][h]);
    }
    for (int i = n - 1; i >= 0; --i) checkmax(dp[v][i], dp[v][i + 1]);
}
 
signed main() {
    FAST; FIXED; RANDOM;
    cin >> n >> k;
    checkmin(k, n);
    a = vector<int>(n);
    cin >> a;
    G = graph(n);
    for (int i = 1; i < n; ++i) {
        int u, v;
        cin >> u >> v;
        --u, --v;
        G[u].pb(v);
        G[v].pb(u);
    }
    dp = vector<vector<int>>(n, vector<int>(n + 1));
    countdp(0);
    int ans = 0;
    for (int i = 0; i < n; ++i)
        for (int j = 0; j <= n; ++j)
            checkmax(ans, dp[i][j]);
    cout << ans;
    return 0;
}
