#pragma comment (linker, "/STACK:64000000")

#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>

#define pb push_back
#define int64 long long
#define pll pair<ll, ll>
#define pii pair<int, int>
//#define mp make_pair
#define sq(x) ((x)*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
//#define _MOD 1000000007LL
//#define MOD(x) (((x) + 2LL * (_MOD)) % (_MOD))
#define INF ((int)(1e9))
#define LINF ((long long)(1e16))
#define EPS (1e-8)
#define PI (3.1415926535897932384626433832795)
#define y1 asdf_1
#define y0 asdf_2
#define j0 jj0
#define LMOD 1000000007
#define HMOD 536870911
//#define HMOD ((long long)(1e18) + 3LL)
//#ifdef _MY_DEBUG
//#define HMOD 1000000007
//#endif
#define MAX 2000000000
#define HBASE 1009
#define MAXN 300000
#define pib pair<int, bool>
typedef unsigned long long ull;
typedef long double ldd;

using namespace std;

int n, m, k, q;
vector<pib> g[200500];
vector<pib> v[200500];
bool ans[200500];
bool fix[200500];
bool done[200500];
int cnt[200500];

void dfs_var(int var)
{
	if (fix[var])
	{
		return;
	}
	fix[var] = true;
	for (int i = 0; i < v[var].size(); i++)
	{
		int exp = v[var][i].first;
		if (done[exp])
		{
			continue;
		}
		done[exp] = true;
		for (int j = 0; j < g[exp].size(); j++)
		{
			int var2 = g[exp][j].first;
			if (fix[var2] || v[var2].size() < 2)
			{
				continue;
			}
			if (v[var2][0].first == exp)
			{
				swap(v[var2][0], v[var2][1]);
			}
			ans[var2] = v[var2][0].second;
			dfs_var(var2);
		}
	}
}

void dfs_exp(int exp)
{
	for (int i = 0; i < g[exp].size(); i++)
	{ 
		if (!fix[g[exp][i].first])
		{
			done[exp] = true;
			fix[g[exp][i].first] = true;
			ans[g[exp][i].first] = g[exp][i].second;
			for (int j = 0; j < v[g[exp][i].first].size(); j++)
			{
				int exp2 = v[g[exp][i].first][j].first;
				if (done[exp2])
				{
					continue;
				}
				cnt[exp2]--;
				if (cnt[exp2] <= 1)
				{
					dfs_exp(exp2);
				}
			}
		}
	}
	if (!done[exp])
	{
		printf ("NO\n");
		exit(0);
	}
}

void init()
{
	scanf ("%d%d", &n, &m);
	for (int j = 1; j <= n; j++)
	{
		scanf ("%d", &k);
		for (int i = 0; i < k; i++)
		{
			scanf ("%d", &q);
			if (q > 0)
			{
				g[j].pb(pib(q, true));
				v[q].pb(pib(j, true));
			}
			else
			{
				g[j].pb(pib(-q, false));
				v[-q].pb(pib(j, false));
			}
		}
	}
}

void solve()
{
	init();
	for (int j = 1; j <= m; j++)
	{
		if (fix[j])
		{
			continue;
		}
		if (v[j].empty())
		{
			fix[j] = true;
			continue;
		}
		if (v[j].size() == 1)
		{
			ans[j] = v[j][0].second;
			dfs_var(j);
		}
		else
		{
			if (v[j][0].second == v[j][1].second)
			{
				ans[j] = v[j][0].second;
				dfs_var(j);
			}
		}
	}
	for (int j = 1; j <= n; j++)
	{
		cnt[j] = g[j].size();
	}
	for (int j = 1; j <= m; j++)
	{
		if (fix[j])
		{
			for (int i = 0; i < v[j].size(); i++)
			{
				cnt[v[j][i].first]--;
			}
		}
	}
	for (int j = 1; j <= n; j++)
	{
		if (done[j])
		{
			continue;
		}
		if (cnt[j] <= 1)
		{
			dfs_exp(j);
		}
	}
	for (int j = 1; j <= n; j++)
	{
		if (done[j])
		{
			continue;
		}
		dfs_exp(j);
	}
	printf ("YES\n");
	for (int j = 1; j <= m; j++)
	{
		if (ans[j])
		{
			printf ("1");
		}
		else
		{
			printf ("0");
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
	freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif

	solve();

	return 0;
}