/*
digu_J - Digvijay Janartha
NIT Hamirpur - INDIA
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

template < typename T > using ordered_set = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
    cout << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
    const char* comma = strchr(names + 1, ',');
    int len = comma - names;
    for (int i = 0; i < len; ++i) {
        cout << names[i];
    }
    cout <<  " : " << arg1 << " | ";
    __f(comma + 1, args...);
}
#else
#define trace(...)
#endif

typedef double db;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair < ll, ll > pll;
typedef pair < int, int > pii;
typedef vector < ll > vll;
typedef vector < int > vi;

#define eb emplace_back
#define pb push_back
#define F first
#define S second
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const ll LINF = LLONG_MAX, base = 1e9, MOD = 1e9 + 7, N = 2e5 + 10, M = 1e3 + 10;
const int INF = INT_MAX;
const db PI = acos(-1);

int sz[N], p[N];

struct edge {
    int u, v;
    ll w;
    bool operator<(edge const& oth) {
        return w < oth.w;
    }
};

void test();
int find_set(int v);
void union_sets(int a, int b);

int main() {
    fast_io();
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    test();
    #ifndef ONLINE_JUDGE
        cout << "Time: " << (int)(clock() * 1000. / CLOCKS_PER_SEC) << "ms";
    #endif
    return 0;
}

void test() {
    int n, m;
    cin >> n >> m;
    for (int i = 1; i <= n; ++i) {
        sz[i] = 1;
        p[i] = i;
    }
    ll a[n + 1], mn = LINF;
    int id = 0;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        if (a[i] < mn) {
            id = i;
            mn = min(mn, a[i]);
        }
    }
    vector < edge > e;
    for (int i = 1; i <= n; ++i) {
        if (i != id) {
            e.pb({id, i, a[id] + a[i]});
        }
    }
    for (int i = 0, x, y; i < m; ++i) {
        ll w;
        cin >> x >> y >> w;
        e.pb({x, y, w});
    }
    sort(all(e));
    ll ans = 0;
    for (edge x: e) {
        if (find_set(x.u) != find_set(x.v)) {
            ans += x.w;
            union_sets(x.u, x.v);
        }
    }
    cout << ans << "\n";
}

int find_set(int v) {
    return (v == p[v] ? v : p[v] = find_set(p[v]));
}

void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        if (sz[a] < sz[b]) {
            swap(a, b);
        }
        p[b] = a;
        sz[a] += sz[b];
    }
}
