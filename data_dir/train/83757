#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

ll read_long() {
    ll ans = 0;
    char c;
    bool started = false;
    bool is_negative = false;
    while (true) {
        c = getchar();
        if ((c < '0' || c > '9') && c != '-' && !started) continue;
        if ((c < '0' || c > '9') && c != '-' && started) break;
        if (started) {
            ans = ans * 10;
        }
        started = true;
        if (c == '-') is_negative = true;
        else ans += c - '0';
    }
    if (is_negative) ans *= -1;
    return ans;
}

int n, m;
string a[1010];
char tmp[1010];
int par[1010 * 3];
vector<int> g[2020], gr[2020];
vector<int> parents, order;
int used[2020];

int get_parent(int v) {
    if (v == par[v]) return v;
    return par[v] = get_parent(par[v]);
}

void merge(int a, int b) {
    a = get_parent(a);
    b = get_parent(b);
    if (a == b) return;
    if (rand() & 1) par[a] = b;
    else par[b] = a;
}

void dfs(int v) {
    if (used[v]) return;
    used[v] = 1;
    forit (it, g[v]) {
        dfs(*it);
    }
    order.pb(v);
}

int main(){

    scanf("%d %d\n", &n, &m);
    for (int i = 0; i < n; i++) {
        scanf("%s\n", tmp);
        a[i] = tmp;
    }

    for (int i = 0; i < n + m; i++) par[i] = i;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (a[i][j] == '=') {
                merge(i, j + n);
            }
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (a[i][j] != '=') {
                int x = get_parent(i);
                int y = get_parent(j + n);
                if (x == y) {
                    printf("No\n");
                    return 0;
                }
            }
        }
    }

    for (int i = 0; i < n + m; i++) {
        if (par[i] == i) parents.pb(i);
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            int x = get_parent(i);
            int y = get_parent(j + n);
            if (a[i][j] == '>') {
                g[y].pb(x);
                gr[x].pb(y);
            } else if (a[i][j] == '<') {
                g[x].pb(y);
                gr[y].pb(x);
            }
        }
    }

    forit (it, parents) {
        int x = *it;
        dfs(x);
    }

    reverse(all(order));

    vector<int> pos(n + m, 0);
    for (int i = 0; i < sz(order); i++) pos[order[i]] = i;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            int x = get_parent(i);
            int y = get_parent(j + n);
            if (a[i][j] == '<') {
                if (pos[x] > pos[y]) {
                    cout << "No" << endl;
                    return 0;
                }
            } else if (a[i][j] == '>') {
                if (pos[x] < pos[y]) {
                    cout << "No" << endl;
                    return 0;
                }
            }
        }
    }

    vector<int> ans(n + m, 0);
    for (int i = 0; i < sz(order); i++) {
        int v = order[i];
        ans[v] = 0;
        forit (it, gr[v]) {
            ans[v] = max(ans[v], ans[*it]);
        }
        ans[v]++;
    }

    cout << "Yes" << endl;
    for (int i = 0; i < n; i++) {
        if (i) printf(" ");
        printf("%d", ans[get_parent(i)]);
    }
    printf("\n");
    for (int i = 0; i < m; i++) {
        if (i) printf(" ");
        printf("%d", ans[get_parent(i + n)]);
    }
    printf("\n");


    return 0;
}

