#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef long double real;

#ifdef WIN32
#define INT64 "%I64d"
#define UINT64 "%I64u"
#else
#define INT64 "%lld"
#define UINT64 "%llu"
#endif

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

const int MaxN = 4, MaxC = 0x3F3F3F3F, NA = -1, MOD = 1000000007;
const int64 MOD2 = (int64) MOD * MOD;

typedef int matrix [MaxN] [MaxN];

matrix a, b;
int n;

void matmul (matrix & a, const matrix & b, const matrix & c)
{
 matrix t;
 int i, j, k;
 int64 cur;

 for (i = 0; i < MaxN; i++)
  for (j = 0; j < MaxN; j++)
  {
   cur = 0;
   for (k = 0; k < MaxN; k++)
   {
    cur += (int64) b[i][k] * c[k][j];
    if (cur >= MOD2)
     cur -= MOD2;
   }
   t[i][j] = cur % MOD;
  }

 memmove (a, t, sizeof (a));
}

int main (void)
{
 int i, j;

 while (scanf (" %d", &n) != EOF)
 {
  for (i = 0; i < MaxN; i++)
   for (j = 0; j < MaxN; j++)
   {
    a[i][j] = (i == j);
    b[i][j] = (i != j);
   }
  for ( ; n > 0; n >>= 1)
  {
   if (n & 1)
    matmul (a, a, b);
   matmul (b, b, b);
  }
  printf ("%d\n", a[3][3]);
 }

 return 0;
}
