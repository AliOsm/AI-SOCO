#include<bits/stdc++.h>
using namespace std;
	
struct Node{
	vector< int > adj;
	long long dp[505], level[505];
	Node(){
		memset(dp, 0, sizeof dp);
		memset(level, 0, sizeof level);
	}
};

int n, k, u, v;	
Node graph[50005];

void solve(int node, int parent){
	graph[node].level[0] = 1;	
	for(int i = 0; i < (int)graph[node].adj.size(); i++){
		int child = graph[node].adj[i];
		if(child == parent) continue;
		solve(child, node);
		for(int ii = 0; ii < 501; ii ++){
			if(graph[node].level[ii] == 0) break;
			for(int jj = 0; jj < 501; jj++){
				if(graph[child].level[jj] == 0 || ii + jj > 500) break;	
				graph[node].dp[ii+jj+1] += graph[node].level[ii] * graph[child].level[jj];
			}
		}
		for(int ii = 1; ii < 501; ii ++) graph[node].level[ii] += graph[child].level[ii-1], graph[node].dp[ii] += graph[child].dp[ii];
	}
}

int main(){
	ios_base :: sync_with_stdio(0);
	cin >> n >> k;
	for(int i = 0; i < n-1; i++) cin >> u >> v, graph[u].adj.push_back(v), graph[v].adj.push_back(u);		
	solve(1, 0);
	cout << graph[1].dp[k] << '\n';
	return 0;
}