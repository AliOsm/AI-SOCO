#include <bits/stdc++.h>
using namespace std;

#ifdef SG
    #include <debug.h>
#else
    #define show(...)
    #define debug(...)
    #define deepen(...)
    #define timer(...)
#endif

#define forn(i,n) for (int i = 0; i < int(n); ++i)
#define ford(i,n) for (int i = int(n) - 1; i >= 0; --i)
#define forv(i,v) for (auto i = v.begin(); i != v.end(); ++i)
#define forr(i,v) for (auto i = v.end(); i != v.begin() && (--i, 1); )
#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T> inline T abs (T x) {return x > T() ? x : -x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 100100, M = 500100;

struct Input {
    int n, m;
    vector <pair<int, int> > a[N];  

    bool read () {
        if (scanf ("%d %d", &n, &m) != 2)
            return 0;
        forn(i, m) {
            int u, v;
            scanf ("%d %d", &u, &v);
            u--, v--;
            a[u].pb(mp(v, i));
            a[v].pb(mp(u, i));
        }
        return 1;
    }

    void init (const Input &input) {
        *this = input;
    }
};

struct Data: Input {
    vector <pair<int, int> > e;

    void write () {
        cout << int(e.size()) << endl;
        forn(i, e.size()) {
            //printf ("%d %d\n", e[i].fs + 1, e[i].sc + 1);
            cout << e[i].fs + 1 << ' ' << e[i].sc + 1;
            puts("");
        }
    }
    
    virtual void solve () {}
    
    virtual void clear () {
        *this = Data();
    }
};

struct Solution: Data {

    bool use[M];
    vector <int> ord;

    void dfs (int v) {
        forn(i, a[v].size()) {
            int to = a[v][i].fs, idx = a[v][i].sc;
            if (use[idx]) {
                swap(a[v][i], a[v][(int)a[v].size() - 1]);
                a[v].pop_back();
                i--;
                continue;
            }
            use[idx] = 1;
            dfs(to);
        }
        ord.pb(v);
    }

    void solve () {
        int lst = -1;
        int kol = 0;
        forn(i, n) {
            if ((int)a[i].size() & 1) {
                if (lst < 0) {
                    lst = i;
                } else {
                    a[i].pb(mp(lst, m + kol));
                    a[lst].pb(mp(i, m + kol++));
                    lst = -1;
                }
            }
        }   
        if ((m + kol) & 1) {
            a[0].pb(mp(0, m + kol));
        }
        dfs(0);
        forn(i, ord.size() - 1) {
            if (i & 1) {
                e.pb(mp(ord[i + 1], ord[i]));
            } else {
                e.pb(mp(ord[i], ord[i + 1]));
            }
        }
    }
    
    void clear () {
        *this = Solution();
    }
};

Solution sol;

int main () {
    cout.setf(ios::showpoint | ios::fixed);
    cout.precision(20);
#ifdef SG
    freopen("c.in", "r", stdin);
//  freopen(".out", "w", stdout);
    while (sol.read()) {
        sol.solve();
        sol.write();
        sol.clear();
    }
#else
    sol.read();
    sol.solve();
    sol.write();
#endif

    return 0;
}
