#include <bits/stdc++.h>
using namespace std;
#define pb  push_back
#define ll  long long
#define vi  vector<ll >
#define vvi vector<vi >
#define all(x) x.begin(), x.end()

int n;
vector<map<int, int> > ma;
map<int, int>::iterator it;
vector<set<pair<int, int> > > se;
set<pair<int, int> >::iterator is;
vi  c, u, sum, res;
vvi g;

void dfs(int v) {
    u[v] = 1;
    ma[v][c[v]] = 1;
    se[v].insert(make_pair(-1, c[v]));
    sum[v] = c[v];
    for (int i = 0; i < g[v].size(); ++i) {
        int to = g[v][i];
        if (u[to]) continue;
        dfs(to);
        if (ma[to].size() > ma[v].size()) {
            swap(ma[to], ma[v]);
            swap(se[to], se[v]);
            swap(sum[to], sum[v]);
        }
        int mav = -se[v].begin()->first;
        int maa = max(mav, -se[to].begin()->first);
        ll  add = 0;
        for (it = ma[to].begin(); it != ma[to].end(); ++it) {
            int col = it->first;
            int num = it->second;
            int old = 0;
            if (ma[v].count(col)) {
                old = ma[v][col];
                se[v].erase(make_pair(-old, col));
            }
            se[v].insert(make_pair(-(num + old), col));
            ma[v][col] += num;
            if (num + old == maa)
                add += col;
        }
        if (maa == -se[v].begin()->first)
            sum[v] = (mav == maa ? sum[v] + add : add);
        else {
            maa = se[v].begin()->first;
            sum[v] = 0;
            for (is = se[v].begin(); is != se[v].end(); ++is) {
                if (is->first == maa)
                    sum[v] += is->second;
                else
                    is = (--se[v].end());
            }
        }
    }
    res[v] = sum[v];
}

int main() {
    ios_base::sync_with_stdio(false);
    cin >> n;
    c.resize(n);
    for (int i = 0; i < n; ++i)
        cin >> c[i];
    g.resize(n);
    for (int i = 0; i < n - 1; ++i) {
        int a, b; cin >> a >> b; --a; --b;
        g[a].pb(b); g[b].pb(a);
    }
    ma.resize(n);
    se.resize(n);
    res.resize(n);
    sum.resize(n);
    u.assign(n, 0);
    dfs(0);
    for (int i = 0; i < n; ++i)
        cout << res[i] << " ";
    cout << endl;

    return 0;
}