#include<bits/stdc++.h>
using namespace std;

#define fi                      first
#define se                      second
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define pll                     pair< long long int, long long int> 
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define SZ(x)                   ((int)x.size())

#define FOR(i,a,b)              for(int i = a; i < b; ++i)
#define REV(i,a,b)              for(int i = a; i >= b; --i)
#define FORE(i,a,b)             for(int i = a; i <= b; ++i)

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

void solve();

template <typename A, typename B>
string to_string(pair<A, B> p);
 
string to_string(const string& s) {
        return '"' + s + '"';
}
 
string to_string(const char* s) {
        return to_string((string) s);
}
 
string to_string(bool b) {
        return (b ? "true" : "false");
}
 
string to_string(vector<bool> v) {
        bool first = true;
        string res = "{";
        for (int i = 0; i < static_cast<int>(v.size()); i++) {
                if (!first) {
                        res += ", ";
                }
                first = false;
                res += to_string(v[i]); 
        }
        res += "}";
        return res;
}
 
template <size_t N>
string to_string(bitset<N> v) {
        string res = "";
        for (size_t i = 0; i < N; i++) {
                res += static_cast<char>('0' + v[i]);
        }
        return res;
}
 
template <typename A>
string to_string(A v) {
        bool first = true;
        string res = "{";
        for (const auto &x : v) {
                if (!first) {
                        res += ", ";
                }
                first = false;
                res += to_string(x);
        }
        res += "}";
        return res;
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
        return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
void debug_out() { 
        cerr << endl; 
}
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
        cerr << " " << to_string(H);
        debug_out(T...);
}
 
#ifdef IGM
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...)
#endif

int main()
{
        fast;
        solve();
}

const int N = 1e5+2;
const int K = 1e3+2;
int pos[N][K];
int ans[N];
std::vector<std::vector<bool> > up(N,std::vector<bool> (K));
int n,m,Q;
void solve() {
        cin >> n >> m >> Q;
        ans[0] = 0;
        fill(all(up[0]),0);
        memset(pos,0,sizeof(pos));
        FOR(q,1,Q+1) {
                int t;
                cin >> t;
                // debug(up[q]);
                if(t == 1) {
                        int i,j;
                        cin >> i >> j;
                        FOR(x,1,n+1) pos[q][x] = pos[q-1][x];
                        up[q] = up[pos[q-1][i]];
                        ans[q] = ans[q-1];
                        ans[q] -= up[q][j];
                        up[q][j] = 1;
                        ans[q] += up[q][j];
                        pos[q][i] = q;
                }
                else if(t == 2) {
                        int i,j;
                        cin >> i >> j;
                        FOR(x,1,n+1) pos[q][x] = pos[q-1][x];
                        up[q] = up[pos[q-1][i]];
                        ans[q] = ans[q-1];
                        ans[q] -= up[q][j];
                        up[q][j] = 0;
                        ans[q] += up[q][j];
                        pos[q][i] = q;
                }
                else if(t == 3) {
                        int i;
                        cin >> i;
                        FOR(x,1,n+1) pos[q][x] = pos[q-1][x];
                        up[q] = up[pos[q-1][i]];
                        ans[q] = ans[q-1];
                        FOR(x,1,m+1) {
                                ans[q] -= up[q][x];
                                up[q][x] = (up[q][x]^1);
                                ans[q] += up[q][x];
                        }
                        pos[q][i] = q;
                }
                else {
                        int j;
                        cin >> j;
                        FOR(x,1,n+1) {
                                pos[q][x] = pos[j][x];
                        }
                        ans[q] = ans[j];
                }
                // debug(up[q]);
                cout << ans[q] << endl;
        }
}