/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=1e9;
#define OS //single input use oeis
lli INF=9223372036854775807;
lli eps=1e-8;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less_equal<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,z,k,x,m,d,y,q,b,c;
const double pi=3.14159265358979323846;
lli me(lli a,lli b)
{
    lli res=1;
    while(b)
    {
        if(b&1)
        res=(res%mod*a%mod)%mod;
        a=a*a;
        a%=mod;
        b=b>>1;
    }
    return res;
}
lli mI(lli a)
{
    return (me(a,mod-2)%mod+mod)%mod;
}
struct qq
{
    lli x1,x2,y1,y2;
    bool operator<(const qq &rhs) const{
        // your main logic for the comparator goes here
        return make_pair(x1,y1) < make_pair(rhs.x1, rhs.y1);
    }
};
bool check(lli x,lli y,lli x1,lli y1,lli x2,lli y2)
{
    if(x>=x1&&x<=x2&&y>=y1&&y<=y2)
        return true;
    return false;
}
int main()
{
 #ifndef ONLINE_JUDGE
 freopen("input.txt", "r", stdin);
 freopen("output.txt", "w", stdout);
 #endif
 IO;
 OS;
 cin>>n;
 ll p[n+1];
 for(int i=1;i<=n;i++)
 {
    cin>>p[i].first>>p[i].second;
 }
 // cout<<p[1].first<<" "<<p[1].second<<"\n";
 if(p[1].first>p[1].second)
 swap(p[1].first,p[1].second);


 // cout<<p[1].first<<" "<<p[1].second<<"\n";
 for(int i=2;i<=n;i++)
 {
    lli w=p[i].first;
    lli h=p[i].second;
    
    lli mx=max(w,h);
    lli mi=min(w,h);
    // cout<<mx<<" "<<mi<<"\n";
    if(mx<=p[i-1].second)
    {
        p[i].first=mi;
        p[i].second=mx;
    }
    else if(mi<=p[i-1].second)
    {
        p[i].first=mx;
        p[i].second=mi;
    }
    else
        return cout<<"NO",0;

 }
 cout<<"YES";

}
//cout<<"Case #"<<i<<": "<<rec<<"\n";