#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<ll> vll;
typedef pair<int, int> pii;
typedef vector<string> vs;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vector<int> > vvi;
typedef vector<pii> vii;
typedef vector<vector<pii> > vvii;
typedef long double ld;
typedef map<int, int> mapii;
typedef map<string, int> mapsi;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define INF  LLONG_MAX
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define pi  acos(-1)
#define mod(n,m) ((n % m + m) % m)
#define eps (1e-9)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'
#define output freopen("output.txt", "w", stdout)
#define mp(x, y, z) {x, {y, z}}

const int N = 2e6 + 5;
int sv[N], par[N];
int n, q;
int arr[N], ans[N], depth[N];
vvi node;
multiset<pii> divs[N];

void factorize(int n, vector<int> &v)
{
	if (n == 1)
		return;
	if (sv[n] == 0)
		sv[n] = n;
	v.push_back(sv[n]);
	if (sv[n] == n)
		return;
	factorize(n / sv[n], v);
}

void dfs(int v, int p)
{
	depth[v] = 1 + depth[p];
	vi send;
	factorize(arr[v], send);

	pii mx = {-1, -1};
	for(auto i : send)
	{
		if (!divs[i].empty())
		{
			auto it = divs[i].end();
			it--;
			mx = max(mx, *it);
		}
	}
	ans[v] = mx.second;
	for(auto i : send)
		divs[i].insert({depth[v], v});

	for(auto i : node[v])
		if (i != p)
			dfs(i, v);

	for(auto i : send)
		divs[i].erase(divs[i].find({depth[v], v}));
}


int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	for (int i = 2; i * i < N; i++)
		if (sv[i] == 0)
			for (int j = i; j < N; j += i)
				if (sv[j] == 0)
					sv[j] = i;

	cin >> n >> q;
	node = vvi(n + 1);
	erep(i, 1, n)
		cin >> arr[i];
	rep(i, 0, n-1)
	{
		int u, v;
		cin >> u >> v;
		node[u].push_back(v);
		node[v].push_back(u);
	}

	dfs(1, 0);

	while (q--)
	{
		int t, v, w;
		cin >> t >> v;
		if (t == 1)
			cout << ans[v] << endl;
		else
		{
			cin >> w;
			arr[v] = w;
			dfs(1, 0);
		}
	}

	return 0;
}

//4 1
//10 8 4 3
//1 2
//2 3
//3 4
//1 2
