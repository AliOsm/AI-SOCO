#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
typedef pair<LD, LD> PDD;

#define _upgrade                  \
    ios_base::sync_with_stdio(0); \
    cin.tie(0);                   \
    cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template <typename _T>
inline void _DBG(const char *s, _T x)
{
    cerr << s << " = " << x << "\n";
}
template <typename _T, typename... args>
void _DBG(const char *s, _T x, args... a)
{
    while (*s != ',')
        cerr << *s++;
    cerr << " = " << x << ',';
    _DBG(s + 1, a...);
}

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr \
    if (0)   \
    cout
#endif

// ********************** CODE ********************** //

const int N = 2e6 + 7;

int n, q, rev[N];
vector<int> G[N];
vector<PII> E;
vector<PII> vec;
bool vis[N];
int mx = 0, mx2 = 0;

int dfs(int v)
{
    n++;
    if (v > mx)
    {
        mx2 = mx;
        mx = v;
    }
    else if (v > mx2)
    {
        mx2 = v;
    }
    vis[v] = true;
    int ans = sz(G[v]);
    for (auto u : G[v])
    {
        if (!vis[u])
        {
            ans += dfs(u);
        }
    }
    return ans;
}

int main()
{
    _upgrade
    cin >> q;
    for (int i = 0; i < q; i++)
    {
        int a, b;
        cin >> a >> b;
        E.push_back({a, b});
        vec.push_back({a, -i - 1});
        vec.push_back({b, i + 1});
    }
    sort(all(vec));
    int cnt = 1;
    for(int i = 0; i < sz(vec); i++)
    {
        if(i > 0 && vec[i].first != vec[i - 1].first)
            cnt++;
        rev[cnt] = vec[i].first;
        int id = 0;
        if(vec[i].second > 0)
        {
            id = vec[i].second - 1;
            E[id].second = cnt;
        }
        else
        {
            id = -vec[i].second - 1;
            E[id].first = cnt;
        }
    }
    for (auto &p : E)
    {
        G[p.first].push_back(p.second);
        G[p.second].push_back(p.first);
    }
    int ans = 0;
    for (int i = 1; i <= cnt; i++)
    {
        if (vis[i])
            continue;
        mx = mx2 = n = 0;
        int m = dfs(i) / 2;
        if (m > n)
        {
            cout << "-1\n";
            return 0;
        }
        if (n - 1 == m)
        {
            ans = max(ans, rev[mx2]);
        }
        else
        {
            ans = max(ans, rev[mx]);
        }
    }
    cout << ans << "\n";
    return 0;
}
