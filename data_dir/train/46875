// Bismillahirrahmanir Rahim
#include<bits/stdc++.h>
#define nl printf("\n")
#define sp printf(" ")
#define rep(i,a,b) for(i=a;i<=b;i++)
#define rev(i,a,b) for(i=a;i>=b;i--)
#define fil freopen("input.txt","r",stdin)
#define pf printf
#define sf scanf
using namespace std;

typedef long long l;
typedef unsigned long long ul;

//// Ordered set> Finding nth position element in a set in logn complexity
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template<typename T> using orderset = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
////*X.find_by_order(1)
////X.order_of_key(-5)

#define pi acos(-1.0)
#define mp make_pair
#define pb push_back
#define p_q priority_queue

int inline in(){int x;sf("%d",&x);return x;}
l inline lin(){l x;sf("%lld",&x);return x;}
void P(l x){pf("%lld",x);}
void Pi(int x){pf("%d",x);}

#define C(i) pf("Case %lld: ",i)
#define Ci(i) pf("Case %d: ",i)

#define Inf 0x7f7f7f
#define mod 1000000007

#define ms(a,b) memset(a,b,sizeof(a))
#define DBG pf("I am here\n")

#define dis( a ,b ) abs( a - b )
#define dis2d( x1 ,y1 ,x2 ,y2 )    sqrt( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) )
#define dis3d( x1 ,y1 ,z1 ,x2 ,y2 ,z2 )    sqrt( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) + ( z1 - z2 ) * ( z1 - z2 ) )

#define valid(nx,ny,r,c) nx>=1&&nx<=r && ny>=1&&ny<=c

#define ck_bt( v , p ) ( ( v >> p ) & 1 )

char tochar( int x ){return x + '0' ;}
int toint( char x ){return x - '0' ;}

l fx[]= {0,0,-1,1,-1,-1,1,1};
l fy[]= {-1,1,0,0,-1,1,-1,1};

l dx[]= {0,0,-1,1};
l dy[]= {-1,1,0,0};

l n , m ;

l a[100010] , I[100010] , L[100010] ;

l lis( )
{
    l i ;
    I[0] = LLONG_MIN ;
    rep( i , 1 , n )
        I[i] = LLONG_MAX ;
    l lislength = 0 , left , right , mid ;
    rep( i , 1 , n )
    {
        left = 0 , right = lislength ;
        while( left <= right )
        {
            mid = left + ( right - left ) / 2 ;
            if( I[mid] < a[i] )
            {
                left = mid + 1 ;
            }
            else
            {
                right = mid - 1 ;
            }
        }
        if( left > lislength )
            lislength = left ;
        I[left] = a[i] ;
        L[i] = left ;
    }
    return lislength ;
}


int main()
{

    l i , j , j1 , k ;

    n = lin() ;

    rep( i , 1 , n )
    {
        a[i] = lin() ;
    }

    l res = lis() ;
    P( res ) ; nl ;


    return 0;
}
