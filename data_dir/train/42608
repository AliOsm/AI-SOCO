//#pragma GCC optimize("Ofast")
//#pragma GCC target("avx,avx2,fma")
#include <bits/stdc++.h>
#define all(x) std::begin(x), std::end(x)
#define isz(x) (int)std::size(x)
const auto io_sync_off = [](){std::ios_base::sync_with_stdio(0);std::cin.tie(0);return 0;}();
// Debug defines:
#define watch(x) std::cerr << std::setw(12) << #x << " = " << std::setw(12) << x
#define watchln(x) watch(x) << std::endl
#define watchsp(x) watch(x) << " "
#define cerr cerr && debug && std::cerr
const int debug = 1;
namespace std {
    // Vector:
    template<typename T> auto size(const std::vector<T>& vec) { return vec.size(); }
    template<typename T> auto begin(const std::vector<T>& vec) { return vec.begin(); }
    template<typename T> auto end(const std::vector<T>& vec) { return vec.end(); }
    // 2D arrays:
    template<typename T, int N, int M> auto size(const T (&a)[N][M]) { return N * M; }
    template<typename T, int N, int M> auto begin(T (&a)[N][M]) { return &a[0][0]; }
    template<typename T, int N, int M> auto end(T (&a)[N][M]) { return &a[0][0] + N * M; }
    // 3D arrays:
    template<typename T, int N, int M, int K> auto size(const T (&a)[N][M][K]) { return N * M * K; }
    template<typename T, int N, int M, int K> auto begin(T (&a)[N][M][K]) { return &a[0][0][0]; }
    template<typename T, int N, int M, int K> auto end(T (&a)[N][M][K]) { return &a[0][0][0] + N * M * K; }
    // Algorithms:
    template<typename C> void reuniq(C& c) { c.erase(unique(all(c)), end(c)); }
    template<typename C, typename X> int lowpos(C& c, X& x) {
        return int(lower_bound(all(c), x) - begin(c));
    }
    template<typename X, typename Y> X& remin(X& x, const Y& y) { return x = (y < x) ? y : x; }
    template<typename X, typename Y> X& remax(X& x, const Y& y) { return x = (x < y) ? y : x; }
}
// Comparators:
template<typename A, typename B> bool operator >(const A& a, const B& b) { return b < a; }
template<typename A, typename B> bool operator<=(const A& a, const B& b) { return !(a > b); }
template<typename A, typename B> bool operator>=(const A& a, const B& b) { return !(a < b); }
template<typename A, typename B> bool operator!=(const A& a, const B& b) { return a < b || b < a; }
template<typename A, typename B> bool operator==(const A& a, const B& b) { return !(a != b); }
// Input:
template<typename T> std::istream& operator>>(std::istream& is, std::vector<T>& vec) {
    for (auto &it : vec) is >> it;
    return is;
}
// Output:
template<typename A, typename B> std::ostream& operator<<(std::ostream& os, const std::pair<A,B>& pt) {
    return os << "{" << pt.first << ", " << pt.second << "}";
}
template<typename T> std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    os << "{";
    for (int i = 0; i < isz(vec); i++) {
        if (i > 0) os << ", ";
        os << vec[i];
    }
    return os << "}";
}
template<typename T> std::ostream& operator<<(std::ostream& os, const std::set<T>& vec) {
    os << "{";
    for (auto it = vec.begin(); it != vec.end(); it++) {
        if (it != vec.begin()) { os << ", "; }
        os << *it;
    }
    return os << "}";
}
template<typename T> std::ostream& operator<<(std::ostream& os, const std::deque<T>& vec) {
    os << "{";
    for (auto it = vec.begin(); it != vec.end(); it++) {
        if (it != vec.begin()) { os << ", "; }
        os << *it;
    }
    return os << "}";
}
// Defines:
using ll = long long;
using ull = unsigned long long;
using ld = long double;
using vi = std::vector<int>;
using vl = std::vector<ll>;
using vvi = std::vector<vi>;
using vvl = std::vector<vl>;
using pii = std::pair<int,int>;
using pil = std::pair<int,ll>;
using pli = std::pair<ll,int>;
using pll = std::pair<ll,ll>;
// -----------------------------------------------------------------------------
struct PrefSum {
    vl s;
    PrefSum(const vl& a) {
        s.assign(isz(a) + 1, 0);
        for (int i = 0; i < isz(a); i++) {
            s[i+1] = s[i] + a[i];
        }
    }
    ll operator()(ll i, ll j) const {
        assert(0 <= i && i <= j && j+1 < isz(s));
        return s[j+1] - s[i];
    }
};
pii brute(const vi& x) {
    const int limit = (int)std::pow(3, isz(x));
    vi set;
    int max = INT_MIN, min = INT_MAX;
    for (int mask = 0; mask < limit; mask++) {
        set.clear();
        for (int item = 0, tmp = mask; item < isz(x); item++) {
            int move = tmp % 3 - 1;
            tmp /= 3;
            set.push_back(x[item]+move);
        }
        std::sort(all(set));
        std::reuniq(set);
        std::remax(max, isz(set));
        std::remin(min, isz(set));
    }
    return pii{min,max};
}
int getMin(vi input) {
    std::sort(all(input));
    std::set<int> x, ready;
    for (auto it : input) x.insert(it);
    while (isz(x)) {
        auto a = x.begin();
        auto b = x.find(*a+1);
        auto c = x.find(*a+2);
        if (c != x.end()) {
            if (b != x.end()) {
                ready.insert(*b);
                x.erase(a);
                x.erase(b);
                x.erase(c);
            } else {
                ready.insert(*a+1);
                x.erase(a);
                x.erase(c);
            }
        } else if (b != x.end()) {
            ready.insert(*a);
            x.erase(a);
            x.erase(b);
        } else {
            ready.insert(*a);
            x.erase(a);
        }
    }
    return isz(ready);
}
int getMax(vi input) {
    std::sort(all(input));
    std::set<int> ready;
    std::deque<int> deque;
    for (auto it : input) {
        deque.push_back(it);
    }
    while (isz(deque)) {
        auto front = deque.front();
        if (!ready.count(front-1)) {
            ready.insert(front-1);
            deque.pop_front();
            continue;
        }
        auto back = deque.back();
        if (!ready.count(back+1)) {
            ready.insert(back+1);
            deque.pop_back();
            continue;
        }
        if (!ready.count(front)) {
            ready.insert(front);
            deque.pop_front();
            continue;
        }
        if (!ready.count(back)) {
            ready.insert(back);
            deque.pop_back();
            continue;
        }
        ready.insert(front+1);
        deque.pop_front();
    }
    return isz(ready);
}
void test() {
    for (int total = 1; total <= 10; total++) {
        //watchln(total);
        vi x(total, 1);
        while (true) {
            //watchln(x);
            auto slow = brute(x);
            pii fast{getMin(x), getMax(x)};
            if (slow != fast) {
                watchln(x);
                watchln(slow);
                watchln(fast);
                std::exit(0);
            }
            int i = 0;
            while (i < total && x[i] == 5) {
                x[i] = 1;
                i++;
            }
            if (i == total) {
                break;
            } else {
                x[i]++;
            }
        }
    }
}
int main() {
    // test();
    // solution
    int n;
    while(std::cin >> n) {
        vi x(n); std::cin >> x;
        std::sort(all(x));
        std::cout << getMin(x) << ' ' << getMax(x) << '\n';
    }
    return 0;
}