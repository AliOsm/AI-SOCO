#include<bits/stdc++.h>

#define ll long long
#define Add_Speed ios_base::sync_with_stdio(0);cin.tie(NULL);
#define pb push_back
#define mp make_pair
#define F first
#define sz size()
#define S second
#define all(s) s.begin(), s.end()
#define file(s) freopen(s".in","r",stdin); freopen(s".out","w",stdout);
#define INF INT_MAX

using namespace std;

const int maxn = (int)1e5 + 100;
const int mod = (int)1e9 + 7;
const int P = mod;

inline int getint() {
  char _c = getchar();
  int _x = 0, _s = 1;
  while (_c <= 32) _c = getchar();
  if (_c == '-') _s = -1, _c = getchar();
  while ('0' <= _c && _c <= '9') _x = _x * 10 + _c - '0', _c = getchar();
  return _x * _s;
}

struct node{
  int sum;
  node *l, *r;
  node(int x) {
    sum = x;
    l = r = NULL;
  }
  node(node *_l, node *_r) {
    l = _l;
    r = _r;
    sum = (l ? l -> sum : 0) + (r ? r -> sum : 0);
  }
};

typedef node* pnode;
pnode build(int tl = 0, int tr = maxn){
  if(tl == tr)
    return new node(0);
  int tm = (tl + tr) >> 1;
  return new node(build(tl, tm), build(tm + 1, tr));
}
int get(pnode t, int l, int r, int tl = 0, int tr = maxn){
  if(!t || l > r || tr < l || tl > r)
    return 0;
  if(l <= tl && tr <= r)
    return t -> sum;
  int tm = (tl + tr) >> 1;
  return get(t -> l, l, r, tl, tm) + get(t -> r, l, r, tm + 1, tr);
}
pnode upd(pnode t, int pos, int val, int tl = 0, int tr = maxn){
  if(tl == tr)
    return new node(t -> sum + val);
  else{
    int tm = (tl + tr) >> 1;
    if(pos <= tm)
      return new node(upd(t -> l, pos, val, tl, tm), t -> r);
    else
      return new node(t -> l, upd(t -> r, pos, val, tm + 1, tr));
  }
}
pnode root[maxn];

int n, a[maxn], m, k, q, b[maxn], ans;
vector<int> g[maxn];
int Get(int l, int r, int k){
  return get(root[r], 0, k - 1) - get(root[l - 1], 0, k - 1);
}
int Ans(int l, int r){
  return Get(l, r, l);
}
int main () {
  n = getint(), k = getint();
  for(int i = 1; i <= n; i++){
    a[i] = getint();
    g[a[i]].pb(i);
    if(g[a[i]].sz > k){
      b[i] = g[a[i]][g[a[i]].sz - k - 1];
    }
  }
  root[0] = build();
  for(int i = 1; i <= n; i++){
    root[i] = upd(root[i - 1], b[i], 1);
  }
  cout << endl;
  q = getint();
  while(q--){
    int l, r;
    l = getint(), r = getint();
    l = (l + ans) % n + 1;
    r = (r + ans) % n + 1;
    if(l > r)
      swap(l, r);
    ans = Ans(l, r);
    cout << ans << endl;
  }
}
