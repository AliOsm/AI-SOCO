#include <algorithm>
#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
using namespace std;

#define F first
#define S second
#define P_B push_back
#define size(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define FR(i, a, b) for(int i = a; i < b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define debug(x) cerr<< #x << ": " << x << endl;
#define fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

//const int mod = 1000 * 1000 * 1000 + 7;
const int MAXN = 200 * 1000 + 10;
int num[110], a[110], dp[110][MAXN], par[110][MAXN];

int main()
{
	fast;
	vector <int> vec;
	FR(i, 2, 60)
	{
		vec.P_B(i);
		FR(j, 2, i)
			if(i % j == 0)
			{	
				vec.pop_back(); 
				break;
			}
	}

	FR(i, 2, 60)
		FR(j, 0, size(vec))
			if(i % vec[j] == 0)
				num[i] += (1 << j);

	int n;
	cin>> n;
	FR(i, 0, n)
		cin>> a[i];
	
	FR(i, 0, n)
		FR(mask, 0, (1 << size(vec)))
		{
			dp[i][mask] = a[i] - 1;
			if(i > 0)
				dp[i][mask] += dp[i - 1][mask];
			par[i][mask] = 1;
			FR(j, 2, 60)
				if((num[j] | mask) == mask)
				{
				//	cout<< (bitset<20>(mask)) << " " << j << ": " << (bitset<20>(num[j])) << " -> " << (bitset<20>(mask ^ num[j])) <<endl;
					int new_dp = abs(a[i] - j);
					if(i > 0)
						new_dp += dp[i - 1][mask ^ num[j]];
					if(new_dp < dp[i][mask])
						dp[i][mask] = new_dp, par[i][mask] = j;
				}
		}

	//cout<< dp[n - 1][(1 << size(vec)) - 1] << endl;

	int mask = (1 << size(vec)) - 1, m = n - 1;
	while(m >= 0)
	{
//		cout<< m << " " << (bitset<20>(mask)) << " " << dp[m][mask] << " " << par[m][mask] << endl;
		a[m] = par[m][mask];
		mask = mask ^ num[a[m]];
		m--;
	}

	FR(i, 0, n)
		cout<< a[i] << " \n"[i == n - 1];
	return 0;
}

