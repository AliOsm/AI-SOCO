#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=1000000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int n;
vi adj[N + 5];
int tot;
int temp[N + 5];
int dpsum[N + 5];
int dpcand[N + 5];
int par[N + 5];
int root;


void dfs1(int pos)
{
  dpsum[pos] = temp[pos];
  for(auto i:adj[pos])
  {
    dfs1(i);
    dpsum[pos]+= dpsum[i];
    if(dpcand[i])dpcand[pos] = dpcand[i];
  }
  if(dpsum[pos] == tot/3)dpcand[pos] = pos;
}

bool ff;
vi fans;
void dfs2(int pos,map<int,int> &poss)
{
  if(ff)return;
  if(!ff && dpsum[pos]==tot/3 && poss.count(tot/3))
  {
    ff = true;
    fans.pb(pos);
    fans.pb(poss[tot/3]);
    return;
  }
  int val = tot - dpsum[pos];
  if(val==tot/3 && par[pos]!=-1)
  {
    if(!poss.count(tot - dpsum[pos]))poss[tot - dpsum[pos]] = pos;
  }

  for(auto i:adj[pos])
  {
    dfs2(i,poss);
  }

  if(val==tot/3 && par[pos]!=-1)
  {
    if(poss[tot - dpsum[pos]] == pos)poss.erase(tot - dpsum[pos]);
  }
}

void dfs3(int pos)
{
  if(ff)return;
  vi v;
  int px = -1;
  for(auto i:adj[pos])
  {
    if(dpcand[i])
    {
      v.pb(dpcand[i]);
      px = i;
    }
  }
  if(v.size() >= 2)
  {
    ff = true;
    fans.pb(v[0]);
    fans.pb(v[1]);
  }
  else if(px!=-1)
  {
    dfs3(px);
  }
}

int main()
{
  finp;
  cin>>n;
  afor(i,1,n)
  {
    int pr;
    cin>>pr;
    par[i] = pr;
    if(!pr)root = i,par[i] = -1;
    else adj[pr].pb(i);
    cin>>temp[i];
    tot+=temp[i];
  }

  if(tot % 3) // not possible
  {
    cout<<"-1";
    return 0;
  }

  dfs1(root);

  
  dfs3(root);

  if(ff) //found
  {
    cout<<fans[0]<<" "<<fans[1];
    return 0;
  }

  ff = false;
  fans.clear();

  map<int,int> poss;// possible sums from root to parent's parent

  dfs2(root,poss);

  if(!ff)
  {
    cout<<"-1";
  }
  else
  {
    cout<<fans[0]<<" "<<fans[1];
  }
  
return 0;
}