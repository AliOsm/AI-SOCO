#include <bits/stdc++.h>
using namespace std;

#define fi first
#define se second
#define all(x) (x).begin(), (x).end()
typedef long long ll;

const int maxN = 1 << 18;

struct segTree {
    vector<int> T;
    segTree() {
        T = vector<int>(2 * maxN);
    }
    void upd(int v, int x) {
        for (v += maxN, T[v] = x; v; v /= 2) {
            T[v / 2] = max(T[v], T[v ^ 1]);
        }
    }
    int get(int l, int r) {
        int ans = 0;
        for (l += maxN, r += maxN; l <= r; l = (l + 1) / 2, r = (r - 1) / 2) {
            if (l % 2 == 1) ans = max(ans, T[l]);
            if (r % 2 == 0) ans = max(ans, T[r]);
        }
        return ans;
    }
};

int ans[maxN];
int sums[maxN];

int main () {
    int n;
    cin >> n;
    vector<pair<pair<int,int>, int> > a;
    map<int,int> m;
    for (int i = 0; i < n; i++) {
        int x, h;
        cin >> x >> h;
        a.push_back({{x, x + h - 1}, i});
        m[x], m[x + h - 1];
    }
    int i = 0;
    for (auto &x : m) {
        x.se = i;
        i++;
    }
    sort(all(a));

    for (int i = 0; i < n; i++) {
        a[i].fi.fi = m[a[i].fi.fi];
        a[i].fi.se = m[a[i].fi.se];
        sums[a[i].fi.fi + 1] = 1;
    }
    segTree T;
    for (int i = 1; i < maxN; i++) {
        sums[i] += sums[i - 1];
    }
    for (int i = n - 1; i >= 0; i--) {
        int l = a[i].fi.fi;
        int r = a[i].fi.se;
        T.upd(l, r);
        int rl = -1;
        while (rl != r) {
            rl = r;
            r = T.get(l,r);
        }
        T.upd(l, r);
        ans[a[i].se] = sums[r + 1] - sums[l];
    }
    for (int i = 0; i < n; i++) {
        cout << ans[i] << " ";
    }
    cout << endl;
    return 0;
}
