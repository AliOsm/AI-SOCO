#include <bits/stdc++.h>

using namespace std;

#define maxn 100010
typedef long long ll;

int n;
ll arr[maxn];
vector<int> adj[64], g[maxn];
vector<pair<int,int>> edges;
int cnt[64], dis[maxn];

ll bfs(int u, int v) {
  queue<int> q;
  for (int i = 1; i <= n; ++i) dis[i] = INT_MAX;
  dis[u] = 0;
  q.push(u);
  while(!q.empty()) {
    int s = q.front();
    q.pop();
    for (auto p: g[s]) {
      if (dis[p] > dis[s] + 1) {
        dis[p] = dis[s] + 1;
        q.push(p);
      }
    }
  }
  return dis[v];
}

int main() {
  scanf("%d", &n);
  for (int i = 1; i <= n; ++i) scanf("%lld", &arr[i]);
  for (int j = 62; j >= 0; --j) {
    for (int i = 1; i <= n; ++i) {
      if (arr[i] & (1LL << j)) {
        cnt[j]++;
        adj[j].push_back(i);
      }
    }
  }
  for (int j = 62; j >= 0; --j) {
    if (cnt[j] > 2) {
      cout << "3" << endl;
      return 0;
    }
  }
  for (int j = 0; j <= 62; ++j) {
    if (cnt[j] > 1) {
      int u = adj[j][0];
      int v = adj[j][1];
      g[u].push_back(v);
      g[v].push_back(u);
      edges.emplace_back(u, v);
    }
  }
  ll ans = INT_MAX;
  for (auto e: edges) {
    int u = e.first;
    int v = e.second;
    g[u].erase(remove(g[u].begin(), g[u].end(), v), g[u].end()); 
    g[v].erase(remove(g[v].begin(), g[v].end(), u), g[v].end()); 
    ans = min(ans, bfs(u, v));
  }
  ans++;
  if (ans >= INT_MAX) ans = -1;
  printf("%lld\n", ans);
}

