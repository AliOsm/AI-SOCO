#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>

using namespace std;
using namespace __gnu_pbds;

const int MAXN = 300005;

typedef
tree<
  pair<int,int>,
  null_type,
  less<pair<int,int>>,
  rb_tree_tag,
  tree_order_statistics_node_update>
ordered_set;

ordered_set st;

int bg[MAXN], End[MAXN], c[MAXN];

int main()
{
	int n, m;
	cin >> n >> m;
	for(int i = 0; i < n; i++)
	{
		c[i] = i;
		End[i] = i;
		st.insert({c[i], i});
	}
	int ind = 0;
	for(int i = 0; i < m; i++)
	{
		int x;
		cin >> x;
		x--;
		bg[x] = 1;
		int tmp = st.order_of_key({c[x], x});
		End[x] = max(End[x], tmp);
		st.erase({c[x], x});
		c[x] = --ind;	
		st.insert({c[x], x});
	}
	int i = 0;
	while(st.size())
	{
		int x = st.begin()-> second;
		End[x] = max(End[x], i);
		i++;
		st.erase(st.begin());
	}
	for(int i = 0; i < n; i++)
	{
		if(bg[i] == 0)
			cout << i + 1 << ' ';
		else
			cout << bg[i] << ' ';
		cout << End[i] + 1 << endl;
	}

	return 0;
}
