/*
    In the name of
        "ALLAH"
    And say "AL-HAMD-U-LILLAH"
*/

#include<bits/stdc++.h>
#define   ll   long long
#define   llu  unsigned long long
#define   _    printf("\n")
int      take() {
    int n;
    scanf("%d",&n);
    return n;

}
double  ttake() {
    double n;
    scanf("%lf",&n);
    return n;
}
ll     takes() {
    ll n;
    scanf("%lld",&n);
    return n;

}

#define  Int             take()
#define  Dnt             ttake()
#define  LL              takes()
#define  done            {return 0;}
#define  fr(i,x,n,a)     for(int i=x;i<=n;i+=a)
#define  FR(a,b,x)       for(int i=(a);i<=(b);i+=(x))
#define  rfr(i,x,n,a)    for(int i=x;i>=n;i--)
int      cas;
#define  print           printf("Case %d:",++cas)
#define  vi              vector<int>
#define  vl              vector<ll>
#define  pb              push_back
#define  pii             pair<int,int>
#define  vii             vector<pii>
#define  pll             pair<ll,ll>
#define  pil             pair<int,ll>
#define  pli             pair<ll,int>
#define  pipii           pair<int,pii>
#define  piipi           pair<pii,int>
#define  mk              make_pair
#define  fill(x,v)       memset(x,v,sizeof x)

using    namespace       std;

bool     approximatelyEqual(float a, float b, float epsilon) {
    return fabs(a - b) <= ( (fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
}

bool     essentiallyEqual(float a, float b, float epsilon) {
    return fabs(a - b) <= ( (fabs(a) > fabs(b) ? fabs(b) : fabs(a)) * epsilon);
}

bool     definitelyGreaterThan(float a, float b, float epsilon) {
    return (a - b) > ( (fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
}

bool     definitelyLessThan(float a, float b, float epsilon) {
    return (b - a) > ( (fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
}
#define  STR             {struct info}
#define  dbg(x)          {cout<<"ekhane"<<x<<endl;}
#define  SS              second
#define  FF              first
#define  PQ              priority_queue
#define  great           greatest
#define  less            lesser
#define  mii             map<int,int>
#define  mil             map<int,ll>
#define  mll             map<ll,ll>
#define  msb             map<string,bool>
#define  V               vector
#define  M               100005
#define  pf              printf
#define  inf             INT_MAX
//////////////////////////////////////////
int tr[ 4 * M ] , b[ M ] , l[ 4 * M ] ;

void built( int s , int e , int n ){
    if( s > e ) return ;
    if( s == e ){
        tr[ n ] = s ;
        return ;
    }
    int  m = s + ( e - s ) / 2;
    built( s , m , 2 * n ) ;
    built( m + 1 , e , 2 * n + 1 ) ;
    tr[ n ] = max( tr[ 2 *n ] , tr[ 2 *n + 1 ] ) ;
}
int ind ;
void upd( int s , int e , int p , int q , int n ){
    if( l[ n ] ){
        tr[ n ] = l[ n ] ;
        if( s != e ){
            l[ 2 * n ] = l[ n ] ;
            int add = ( s + ( e - s ) / 2 ) + 1 ;
            l[ 2 * n + 1 ] = l[ n ] + ( add - s ) ;
        }
     l[ n ] = 0 ;
    }
    if( s > e || e < p || s > q ) return ;
    if( s >= p && e <= q ){
        tr[ n ] = ind ;
        l[ n ] = ind ;
        ind += ( e - s + 1 ) ;
         if( s != e ){
            l[ 2 * n ] = l[ n ] ;
            int add = ( s + ( e - s ) / 2 ) + 1 ;
            l[ 2 * n + 1 ] = l[ n ] + ( add - s ) ;
        }
        l[ n ] = 0 ;
        return ;
    }
    int  m = s + ( e - s ) / 2;
    upd( s , m , p , q , 2 * n ) ;
    upd( m + 1 , e , p , q , 2 * n + 1 ) ;
    tr[ n ] = max( tr[ 2 *n ] , tr[ 2 *n + 1 ] ) ;
}
int query( int s , int e , int p , int q , int n ){
    if( l[ n ] ){
        tr[ n ] = l[ n ] ;
        if( s != e ){
            l[ 2 * n ] = l[ n ] ;
            int add = ( s + ( e - s ) / 2 ) + 1 ;
            l[ 2 * n + 1 ] = l[ n ] + ( add - s ) ;
        }
     l[ n ] = 0 ;
    }
    if( s > e || e < p || s > q ) return 0 ;
    if( s >= p && e <= q ){
        return tr[ n ] ;
    }
    int  m = s + ( e - s ) / 2;
    return max( query( s , m , p , q , 2 * n ) , query( m + 1 , e , p , q , 2 * n + 1 ) );
}

int main( ){
    int tc = 1 ;
    while( tc-- ){
        int n = Int , q = Int , arr[ n + 1 ] ;
        fr( i , 1 , n , 1 ) arr[ i ] = Int ;
        fr( i , 1 , n , 1 ) b[ i ] = Int ;
        while( q-- ){
            int ty = Int , x = Int ;
            if( ty == 2 ){
                int id = query( 1 , n , x , x , 1 ) ;
                if( !id ) id = b[ x ] ;
                else id = arr[ id ] ;
                pf("%d\n",id) ;
            }else{
                int y = Int , k = Int ;
                ind = x ;
                upd( 1 , n , y , y + k - 1 , 1 ) ;
            }
        }
    }
    done ;
}
