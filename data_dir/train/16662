#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")
 
//#include<bits/stdc++.h>
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>
 
#define _USE_MATH_DEFINES
#define ll long long
#define ins Not Needed Thing
#define ull unsigned long long
#define ld long double
#define Accepted 0
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define mp make_pair
#define sz(x) (int)(x.size())
#define all(x) x.begin(),x.end()
#define F first
#define S second
#define SORRY FUL Accepted
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0)
#define Toktama Kazakhstan
#define int long long 
using namespace std;
 
const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 5e5 + 123;                                          
const int PRI = 555557;
const int pri = 997;
 
int tests = 1;
 
int n, m;
int a[N];
int lp[N];
bool is[N];
int cnt[N];
ll ans;
 
inline precalc () {
    for (int i = 2; i < N; i ++) {
        if (!lp[i]) {
            for (int j = i; j < N; j += i) {
                lp[j] = i;
            }
        }
    }
}
vector < int > v;
inline void fun (int x) {
    v.clear();
 
    while (x > 1) {
        int cur = lp[x];
        v.pb(cur);
        while (x % cur == 0) x /= cur;
    }
    if(x > 1)
        v.pb(x);
    sort(all(v));
    v.resize(unique (all(v)) - v.begin());
}
 
inline int add (int x){
    fun(x);
    int sz = v.size(), res = 0;
    for (int mask = 0; mask < (1 << sz); mask ++) {
        int bbp = __builtin_popcount(mask);
        ll now = 1;
        for (int i = 0; i < sz; i ++) {
            if (mask & (1 << i)) {
                now *= v[i];
            }
        }
    //  cnt[now] --;
        if (bbp & 1) res -= cnt[now];
        else res += cnt[now];
        cnt[now] ++;
    }
   
    return res;
}
 
int del (int x) {
    fun(x);
    int sz = v.size(), res = 0;
    for (int mask = 0; mask < (1 << sz); mask ++) {
        int bbp = __builtin_popcount(mask);
        ll now = 1;
        for (int i = 0; i < sz; i ++) {
            if (mask & (1 << i)) {
                now *= v[i];
            }
        }
        cnt[now] --;
        if (bbp & 1) res -= cnt[now];
        else res += cnt[now];
    //  cnt[now] ++;
    }
    return res;
}
 
inline void Solve () {
    //easy
 
    precalc();
 
    cin >> n >> m;
    for (int i = 1; i <= n; i ++) {
        cin >> a[i];
    }
    int ans = 0;
   
    while (m --) {
        int x;
        cin >> x;
        if(!is[x]) ans += add(a[x]);
        else ans -= del(a[x]);
        cout << ans << '\n';
        is[x] ^= 1;
    }
}
 
 main () {
    SpeedForce;
//  freopen(".in", "r", stdin);
//  freopen(".out", "w", stdout);  
    // cin >> tests;
    while(tests --) {
        Solve ();
        // Ee Zadrot
    }
 
    return Accepted ;
}