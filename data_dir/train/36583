//ITNOG
#include<bits/stdc++.h>
 
using namespace std;
 
#define scan(x) do{while((x=getchar_unlocked())<'0'); for(x-='0'; '0'<=(_=getchar_unlocked()); x=(x<<3)+(x<<1)+_-'0');}while(0)
char _;

//#define int long long
#define rep(i, s, e) for(int i = s; i < e; i ++)
typedef double ld;

const int maxN = 1000 + 5;
const int mod = 1000*1000*1000+7;
const int base = 701;
const int maxL = 14;
typedef long long ll;
#define X first
#define Y second

int a[maxN][maxN];
ll u[maxN][maxN], l[maxN][maxN];
int mnu[maxN][maxN], mnl[maxN][maxN];

int fen[maxN][maxN];

int add(int x, int y)
{
    for(; x < maxN; x += x & (-x)) 
	  for(int i = y; i < maxN; i += i & (-i))
		fen[x][i] ++;
}
int get(int x, int y)
{
    int res = 0;
    for(; x > 0; x -= x & (-x))
	  for(int i = y; i > 0; i -= i & (-i))
		res += fen[x][i];
    return res;
}

pair<ll,int> de[maxN];

main()
{
//    ios::sync_with_stdio(0); cin.tie(0);
    int n, m, x, y; scanf("%d%d%d%d", &n, &m, &x, &y);
    rep(i,1,n+1) rep(j,1,m+1) scanf("%d", &a[i][j]);

    rep(i,1,n+1) 
    {
	  int st = 0, en = 0;
	  rep(j,1,m+1)
	  {
		l[i][j] = l[i][j-1] + a[i][j];
		if(j >= y) l[i][j] -= a[i][j-y];

		while(st < en && de[en-1].X >= a[i][j]) en--;
		if(st < en && de[st].Y == j-y) st ++;
		de[en++] = {a[i][j], j};
		mnl[i][j] = de[st].X;
	  }
    }

    rep(j,1,m+1) 
    {
	  int st = 0, en = 0;
	  rep(i,1,n+1)
	  {
		u[i][j] = u[i-1][j] + l[i][j];
		if(i >= x) u[i][j] -= l[i-x][j];
	     
		while(st < en && de[en-1].X >= mnl[i][j]) en --;
		if(st < en && de[st].Y == i-x) st ++;
		de[en++] = {mnl[i][j], i};
		mnu[i][j] = de[st].X;
	  }
    }

    

    priority_queue<pair<ll,pair<int,int> > > s;
    rep(i,x,n+1) rep(j,y,m+1)
	  s.push({-u[i][j] + (1LL)*x*y*mnu[i][j], {-i, -j}});

    vector<pair<pair<int,int>, ll> > ans;
    while(s.size())
    {
	  auto it = s.top(); s.pop(); it.X *= -1; it.Y.X *= -1; it.Y.Y *= -1;
	  auto pss = it.Y;
	  
	  int x1 = pss.X - x, x2 = pss.X;
	  int y1 = pss.Y - y, y2 = pss.Y;
	  
	  if(get(x2,y2) - get(x1,y2) - get(x2,y1) + get(x1,y1) == 0)
	  {
		ans.push_back({pss, it.X});
		x1 ++; y1 ++;
		rep(j,x1,x2+1) rep(k,y1,y2+1)
		    add(j,k);
	  }
    }

    printf("%d\n", (int)ans.size());
    rep(i,0,ans.size()) printf("%d %d% I64d\n", ans[i].X.X-x+1, ans[i].X.Y-y+1, ans[i].Y);
    return 0;
}
