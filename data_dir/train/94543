#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>

#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mod 1000000007
#define PI 3.14159265
#define pll pair<ll, ll>
using namespace std;

typedef unsigned long long ull;

bool is_prime(int n) {

    for (int i = 2; i * i <= n; ++i) {
            if (n % i == 0) {
                  return false;
            }
    }
    return true;
}

inline ll getPow(ll a,ll b){
    ll res = 1ll,tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
           res %= mod;
       }
       tp *= tp;
       tp %= mod;
       b >>= 1ll;
    }
    return res;
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

void ok() {
    puts("YES");
    exit(0);
}

void no() {
    puts("NO");
    exit(0);
}

ll xx[] = {-1, 1, 0, 0};
ll yy[] = {0, 0, -1, 1};

// please, accepted!

const int N=1e5+3;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
    ll n = nxt();
    vector<int> ct(15000000 + 5, 0);
    ll g = 0;
    vector<ll> mas(n);
    for(int i = 0; i < n; i++) {
           ll t = nxt();
           g = __gcd(g, t);
           mas[i] = t;
    }
    for(int i = 0; i < n; i++) {
           mas[i] /= g;
           ct[mas[i]]++;
    }
    if(ct[1] == n) return cout << -1, 0;
    vector<int> used(15000000 + 5, 0);
    map<ll, ll> te;
    for(int i = 2; i <= 15000000; i++) {
           if(!used[i]) {
                for(int j = i; j <= 15000000; j += i) {
                       if(ct[j]) {
                             te[i] += ct[j];
                       }
                       used[j] = 1;
                }
           }
    }
    ll mx = -1;
    ll ans = 0;
    for(auto x : te) {
           mx = max(mx, x.second);
    }
    if(mx == -1) mx += n + 2;
    ans = n - mx;
    cout << ans;
    return 0;
}
