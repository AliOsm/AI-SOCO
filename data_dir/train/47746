#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

typedef long long ll;
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 2000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

ll L, R, X, Y;
set<pair<ll,ll>> S;
vector<ll> A, B;

void doit(ll m, vector<ll> &vec)
{
    ll x = 1;
    while(true)
    {
        vec.pb(x);
        ll d = INFLL / x;
        if(d < m) return;
        x *= m;
    }
}

void split(ll x)
{
    auto it = S.upper_bound({x,INFLL});
    if(it == S.begin()) return;
    it--;
    if(it->second < x) return;
    ll al = it->first, ar = x-1, bl = x+1, br = it->second;
    S.erase(it);
    if(al <= ar) S.insert({al,ar});
    if(bl <= br) S.insert({bl,br});
}

int main()
{
    cin >> X >> Y >> L >> R;
    doit(X,A);
    doit(Y,B);
    S.insert({L,R});
    for(ll a : A) for(ll b : B) if(a+b >= L && a+b <= R) split(a+b);
    ll hi = 0;
    for(pair<ll,ll> p : S) hi = max(hi, p.second - p.first + 1);
    cout << hi;
}
