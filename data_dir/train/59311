#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

int N;
vector <int> graph[300010];
int a[300010];
int bad[300010];

set <pair <int, int> > s;

char ans[300010];

void func(int x){
    s.erase(make_pair(-bad[x], x));
    bad[x] = 0;
    int i;
    REP(i,graph[x].size()) if(a[x] == a[graph[x][i]]) bad[x]++;
    s.insert(make_pair(-bad[x], x));
}

int main(void){
    int M,x,y,i;
    
    cin >> N >> M;
    REP(i,M){
        scanf("%d%d", &x, &y); x--; y--;
        graph[x].push_back(y);
        graph[y].push_back(x);
    }
    
    REP(i,N) bad[i] = graph[i].size();
    REP(i,N) s.insert(make_pair(-bad[i], i));
    
    while(1){
        int x = (s.begin()->second);
        if(bad[x] <= 1) break;
        a[x] = (a[x] ^ 1);
        func(x);
        REP(i,graph[x].size()) func(graph[x][i]);
    }
    
    REP(i,N) ans[i] = ((a[i] == 0) ? '0' : '1');
    ans[N] = '\0';
    printf("%s\n", ans);
    
    return 0;
}
