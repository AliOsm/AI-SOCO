#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
    #define EXPECT(expr)
#endif
#define NO_IO_TIE ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for( auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for( auto & u: a) fin >> u; return fin; }
/* @@@ ----------------------------------- */

int64_t
cost(const int64_t a,
     const int64_t b,
     const int64_t n,
     const int64_t m)
{
    if(n < 1 ) return 0;
    const auto acc = n * a + b * n * (n - 1) / 2;
    return max( a + (n - 1) * b, (acc + m - 1) / m);
}

void a536()
{
    int64_t a, b;
    size_t n;
    cin >> a >> b >> n;

    for(; 0 < n; -- n)
    {
        int64_t l, t, m;
        cin >> l >> t >> m;
        const int64_t x = a  + b * (l - 1);
        int64_t lb = -1, ub = 1;
        while(cost(x, b, ub, m) < t + 1)
            ub *= 2;

        while(lb + 1 < ub)
        {
            const auto r = (lb + ub) >> 1;
            (cost(x, b, r, m) < t + 1 ? lb : ub) = r;
        }

        if(0 < lb )
            cout << l + lb - 1 << '\n';
        else
            cout << -1 << '\n';
    }
}

int main( const int argc, char * argv [])
{
    // NO_IO_TIE;
    a536();

    return EXIT_SUCCESS;
}
