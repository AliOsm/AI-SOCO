#include <bits/stdc++.h>

using namespace std;
int const N = 5050;
int OO = 1e7;
int n,m;
vector<int> G[N][2];

vector<int> dij(int st,int d){

    vector<int> dist(n,-OO);
    queue<int> q;

    dist[st]=0;
    q.push(st);

    while(q.size()){
        int u = q.front();
        q.pop();

        for(int v:G[u][d]){
            if(dist[v]==-OO || dist[v]> dist[u]+1){
                dist[v]=dist[u]+1;
                q.push(v);
            }
        }
    }
    return dist;
}
vector<int> best[N][2], dist[N][2];
int main(){
    cin >> n >> m;
    for(int i = 0;i < m;i++){
        int a,b;
        cin >> a >> b;
        a--;
        b--;
        G[a][0].push_back(b);
        G[b][1].push_back(a);
    }

    for(int i=0;i<n;i++){
        for(int d=0;d<2;d++){
            dist[i][d] = dij(i,d);

            for(int j=0;j<n;j++)best[i][d].push_back(j);

            sort(best[i][d].begin(),best[i][d].end(),[&](int const &id1,int const &id2){
                 return dist[i][d][id1]>dist[i][d][id2];
            });
        }
    }

    int ans = 0;
    vector<int> Best;
    for(int b=0;b<n;b++){

        for(int c=0;c<n;c++){
            if(b==c)continue;

            for(int i=0;i<=3;i++){
                int a = best[b][1][i];
                if(a==b || a == c)continue;

                for(int j=0;j<=3;j++){
                    int d = best[c][0][j];
                    if(d==a || d==b || d==c)continue;

                    int cur = dist[a][0][b] + dist[b][0][c] + dist[c][0][d];
                    if(cur > ans){
                        ans = cur;
                        Best = {a,b,c,d};
                    }
                }
            }
        }
    }
//    cout << ans << endl;
    for(int x:Best)cout << x + 1 << " " ;
    cout << endl;
    return 0;
}
