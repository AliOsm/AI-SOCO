#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
#include <random>
#include <cassert>
#include <sstream>
using namespace std;
#define F first
#define S second
#define pb push_back
#define MP make_pair
#define ALL(x) begin(x),end(x)
#define SZ(x) ((int)(x).size())
typedef long long LL;
typedef double DB;
typedef long double LDB;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
const int INF = (int)1e5;
const int MXN = (int)1e6 + 7;
const int mod = (int)1e9 + 7;
char s[MXN];
int sb(char ch) {
	if (ch == 'R') return 0;
	else if (ch == 'G') return 1;
	else return 2;
}
int sum[3][3];
void sol() {
	int n, k; scanf("%d %d %s", &n, &k, s);
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 3; j++)
			sum[i][j] = 0;
	int ans = k;
	for (int i = 0; i < k; i++) {
		int v = sb(s[i]);
		sum[i%3][v]++;
	}
	for (int i = k - 1; i < n; i++) {
		for (int p1 = 0; p1 < 3; p1++) {
			int v = k;
			for (int p2 = 0; p2 < 3; p2++) {
				int p = (p1 + p2) % 3;
				v -= sum[p2][p];
			}
			ans = min(ans, v);
		}
		if (i != n - 1) {
			sum[ (i - k + 1) % 3][sb(s[i-k+1])]--;
			sum[ (i+1) % 3 ][ sb(s[i+1]) ]++;
		}
	}
	printf("%d\n", ans);
}
int main() {
	int t; scanf("%d", &t);
	while (t--) sol();
	return 0;
}
