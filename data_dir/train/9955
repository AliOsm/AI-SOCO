/*
Till the roof comes off, till the lights go out
Till my legs give out, canâ€™t shut my mouth.
Till the smoke clears out. Am I high? Perhaps
I'ma rip this shit till my bones collapse.
*/
#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <stack>
#include <string.h>
#include <map>
#include <vector>
#include <queue>
#include <math.h>
#include <stack>
#include <complex>


#define ll long long
#define X real()
#define Y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define lngth(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)

using namespace std;

const int N=150005;
typedef pair<ll,ll>ii;
typedef pair<ii,int>event;
typedef complex<double>point;

const double EPS = 1e-9;
const double PI = acos(-1);
int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); }


ll best[5005];
int idx[5005];
int main()
{  //freopen("test.in","r",stdin);
  // freopen("test.out","w",stdout);
   int n;
   scanf("%d",&n);
   vector<ll>v(n);
   vector<ll>acc(n);
   for(int i=0;i<n;i++){
    cin>>v[i];
    acc[i]=v[i];
    if(i)acc[i]+=acc[i-1];
   }
   for(int i=0;i<=n;i++){
      best[i]=-1e16;
      ll cur=0,total=acc[n-1];
      if(i)total-=acc[i-1];
      for(int j=i;j<=n;j++){
          if(cur-total>best[i]){
            best[i]=cur-total;
            idx[i]=j;
          }
         if(j<n){
          total-=v[j];
          cur+=v[j];
         }
      }
   }
  ll mx=-1e16,cur=0;
   int x=0,y=0,z=0;
   for(int a=0;a<=n;a++){
    ll cur2=0;
    for(int b=a;b<=n;b++){
       if(cur-cur2+best[b]>mx){
        x=a;
        y=b;
        z=idx[b];
        mx=cur-cur2+best[b];
       }
       if(b<n)
        cur2+=v[b];
    }
    if(a<n)cur+=v[a];
   }
   cout<<x<<' '<<y<<' '<<z;
   return 0;
}

