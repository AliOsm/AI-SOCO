#include<iostream>
#include<algorithm>

using namespace std;

const int MAXN = 1e5 + 5;
int l[MAXN], r[MAXN], q[MAXN];
const int SEG = 4 * MAXN;
int ans[SEG], lazy[SEG];
int n, m;

void set(int ql, int qr, int val, int x = 1, int il = 0, int ir = n)
{
	if(ql <= il && ir <= qr)
	{
		lazy[x] |= val;
		ans[x] |= val;
		return;
	}
	int mid = (il + ir) / 2;
	if(ql < mid)
		set(ql, qr, val, 2 * x, il, mid);
	if(qr > mid)
		set(ql, qr, val, 2 * x + 1, mid, ir);
}

void shift(int x)
{
	int r = lazy[x];
	lazy[2 * x] |= r;
	lazy[2 * x + 1] |= r;
	ans[2 * x] |= r;
	ans[2 * x + 1] |= r;
	lazy[x] = 0;
}

int get(int ql, int qr, int x = 1, int il = 0, int ir = n)
{
	if(ql <= il && ir <= qr)
		return ans[x];
	int mid = (il + ir) / 2;
	shift(x);
	int ret = (1 << 30) - 1;
	if(ql < mid)
		ret = get(ql, qr, 2 * x, il, mid);
	if(qr > mid)
		ret = ret & get(ql, qr, 2 * x + 1, mid, ir);
	ans[x] = ans[2 * x] & ans[2 * x + 1];
	return ret;
}

int main()
{
	cin >> n >> m;
	for(int i = 0; i < m; i++)
	{
		cin >> l[i] >> r[i] >> q[i];
		l[i]--;
		set(l[i], r[i], q[i]);
	}
	for(int i = 0; i < m; i++)
		if(get(l[i], r[i]) != q[i])
		{
			cout << "NO" << endl;
			return 0;
		}
	cout << "YES" << endl;
	for(int i = 0; i < n; i++)
		cout << get(i, i + 1) << ' ';
	cout << endl;
	return 0;
}
