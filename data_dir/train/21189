#include<bits/stdc++.h>

using namespace std;

#define MEM(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define inf freopen("in.txt", "r", stdin)
#define out freopen("out.txt", "w", stdout)
#define pf printf
#define sf(a) scanf("%d",&a)
#define LL long long
#define MAX 200010
#define cnd tree[idx]
#define lnd (idx<<1)
#define rnd ((idx<<1) + 1)
#define NL '\n'

int tree[MAX*4];

void init(int idx,int b,int e)
{
    if(b==e)
    {
        ///cout<<b<<' '<<1<<NL;
        cnd = 1;
        return;
    }

    int mid = (b+e)>>1;

    init(lnd, b, mid);
    init(rnd, mid+1, e);

    cnd = tree[lnd] + tree[rnd];
}

void update(int idx,int b,int e,int st)
{
    if(e<st || b>st) return;
    if(b==e)
    {
        cnd = 0;
        return;
    }

    int mid = (b+e)>>1;
    update(lnd, b, mid, st);
    update(rnd, mid+1, e, st);

    cnd = tree[lnd] + tree[rnd];
}

int query(int idx,int b,int e,int v)
{
    if(b == e) return b;
    if(tree[idx] < v) return -1;

    int y, x;
    x = tree[lnd]; y = tree[rnd];

    int mid = (b+e)>>1;
    if(x >= v) return query(lnd, b, mid, v);
    else  return query(rnd, mid+1, e, v-x);
}

string str;
map<char,int> mopa;
map<int,char> pamo;
int p, ar[MAX], can[MAX];
set<int>sota[100];
set<int>:: iterator it;



int main()
{
    ios::sync_with_stdio(false);

    int n, m, a, b, x, y;
    char ch;

    cin>>n>>m;
    cin>>str;

    init(1,0,n);
    FOR(i,0,n-1)
    {
        char ch = str[i];
        if(mopa[ch] == 0)
        {
            mopa[ch] = ++p;
            pamo[p] = ch;
           /// p++;
        }
        ar[i] = mopa[ch];
        sota[ar[i]].insert(i);
    }

    FOR(i,0,m-1)
    {
        cin>>x>>y>>ch;

        x = query(1,0,n,x);
        y = query(1,0,n,y);

       /// cout<<x<<' '<<y<<NL;

        if(mopa[ch] != 0)
        {
            a = mopa[ch];
           /// cout<<a<<'l'<<NL;
            while(true)
            {
                it = sota[a].lower_bound(x);

                if(it == sota[a].end()) break;
                else
                {
                    b = *(it);
               //     cout<<b<<NL;
                    if(b > y) break;
                    else
                    {
                        sota[a].erase(b);
                        update(1,0,n,b);
                        can[b] = 1;
                    }
                }
            }
        }
    }

    FOR(i,0,n-1)
        if(can[i]==0) cout<<str[i];



    return 0;
}
