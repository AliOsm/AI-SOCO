#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_pop_bcount

#ifndef D
    #define dbg(x) 0
    #define dbgs(x) 0
#else
    #define dbg(x) cerr << (#x) << " --> " << (x) << endl
    #define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#endif

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 1e5 + 5;

const int mod = 1e9 + 7;

int n, k;

ll c1[N], c2[N], power[N], dp[N];

char a[N];

ll fe(int x, int k) {

    if(!k) return 1;

    ll t = fe(x, k / 2);

    return k & 1 ? t * t % mod * x % mod : t * t % mod;

}

ll inv(int x) {

    return fe(x, mod - 2);

}

int main() {

    cin >> n >> k;

    scanf("%s", a + 1);

    FOR(i, 1, n)
        a[i] -= '0';

    c1[k - 1] = 1;

    FOR(i, k, n - 2)
        c1[i] = c1[i - 1] * i % mod * inv(i - k + 1) % mod;

    c2[k] = 1;

    FOR(i, k + 1, n - 1)
        c2[i] = c2[i - 1] * i % mod * inv(i - k) % mod;

    power[0] = 1;

    FOR(i, 1, n)
        power[i] = power[i - 1] * 10 % mod;

    ROF(i, n - 2, k - 1)
        dp[i] = (dp[i + 1] + c1[i] * power[n - 2 - i]) % mod;

    int ans = 0;

    FOR(i, 1, n - 1)
        ans = (ans + dp[max(k - 1, i - 1)] * a[i]) % mod;

    FOR(i, k + 1, n)
        ans = (ans + c2[i - 1] * power[n - i] % mod * a[i]) % mod;

    cout << ans << endl;

    return 0;

}