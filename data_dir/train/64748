#include <bits/stdc++.h>
#define fst first
#define snd second
#define fore(i,a,b) for(int i=a,ThxDem=b;i<ThxDem;++i)
#define pb push_back
#define ALL(s) s.begin(),s.end()
#define FIN ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define SZ(n) ((int)(n).size())
using namespace std;
typedef long long ll;
typedef pair<int,int> ii;

const int MAXN=5e5;
int dep[MAXN], mx[MAXN],sz[MAXN],p[MAXN],depx;
vector<int> g[MAXN],chain;

int dfs(int pos, int par=-1,int d=0){
	dep[pos]=d; sz[pos]=1, p[pos]=par;
	for(auto x:g[pos]) if(x!=par) sz[pos]+=dfs(x,pos,d+1);
	return sz[pos];
}

void gen(int x){
	chain.pb(x);
	ii now={-1,-1};
	for(auto y:g[x]) if(y!=p[x]) now=max(now,{sz[y],y});
	if(now.snd>=0) gen(now.snd);
} 

int ask(char t, int x){
	cout << t << " " << x+1 << endl;
	if(t=='!') exit(0);
	int ans; cin >> ans;
	return ans;
}

int get(int pos){
	chain.clear(); gen(pos);
	int my=chain.back();
	int dxy=ask('d',my);
	if(!dxy) ask('!',my);
	//cout << dxy << " " << dep[my] << " " << depx << endl;
	int whe=(dep[my]+depx-dxy)/2;
	if(whe==depx) ask('!',chain[whe-dep[pos]]);
	return chain[whe-dep[pos]];
}




int main(){FIN;
	int n,now=0; cin >> n;
	fore(i,1,n){
		int x,y; cin >> x >> y; x--; y--;
		g[x].pb(y); g[y].pb(x);
	}
	dfs(0);
	depx=ask('d',0);
	while(1){
		int lc=get(now);
//		cout << "got lc " << lc <<endl;
		now=ask('s',lc)-1;
//		cout << "jumped and now node is " << now << endl;
	}
}