// I can't tell you what it really is,
// I can only tell you what it feels like.
#include "bits/stdc++.h"
using namespace std;

#define F first
#define S second
#define sz(x) (int)x.size() - 1
#define rep(i,a,n) for (int i = a; i <= n; ++i)
#define fo(i, n)   for (int i = 1; i <= n; ++i)
#define all(v)  v.begin(), v.end()
#define pb push_back
#define P pair < int, int >
#define E cout << '\n'

const int mod = 1e9 + 7;
const int N = 3e5 + 5;

int a[N], tree[N<<2];
int vis[N];

void build(int l, int r, int node)  {
	if(l == r) {
		tree[node] = l;
		return;
	}
	int mid = l + r >> 1LL, lc = node + node;
	int rc = lc + 1;
	build(l, mid, lc);
	build(mid + 1, r, rc);
	if(a[tree[lc]] > a[tree[rc]])
		tree[node] = tree[lc];
	else
		tree[node] = tree[rc];
 }
 int query(int l, int r, int ql, int qr, int node) { 	
 	if(qr < l || r < ql)
 		return -1;
 	if(ql <= l && r <= qr)
 		return tree[node];
 	int mid = l + r >> 1LL, lc = node + node;
	int rc = lc + 1;
	int idx1 = query(l, mid, ql, qr, lc);
	int idx2 = query(mid + 1, r, ql, qr, rc);
	if(idx1 == -1)
		return idx2;
	if(idx2 == -1)
		return idx1;
	if(a[idx1] > a[idx2])
		return idx1;
	return idx2;
 }
void update(int l, int r, int pos, int x) {
	if(pos < l || r < pos)
		return;
	if(l == r && r == pos) {
		// cout << l << ' ';
		a[pos] = 0;
		return;
	}
 	int mid = l + r >> 1LL, lc = x + x;
	int rc = lc + 1;
	update(l, mid, pos, lc);
	update(mid + 1, r, pos, rc);
	if(a[tree[lc]] > a[tree[rc]])
		tree[x] = tree[lc];
	else
		tree[x] = tree[rc];

}

inline void solve() {
	int n, k;
	set < int > s;
	cin >> n >> k;
	fo(i, n) {		
		cin >> a[i];	
		s.insert(a[i]);	
	}
	build(1, n, 1);
	memset(vis, -1, sizeof vis);
	int cnt = 1;
	while(1) {
		int x = query(1, n, 1, n, 1);
		// cout << x  << '\n';
		if(a[x] == 0)
			break;
		int put = 2;
		if(cnt & 1)
			put = 1;		
		
		vector < int > v;
		auto it = s.lower_bound(x);
		auto it2 = it;
		int temp = k + 1;
		while(temp--){
			// cout << "in ";
			if(it == s.end())
				break;
			int idx = *it;
			vis[idx] = put;			
			update(1, n, idx, 1);
			v.pb(idx);++it;
		}
		it = it2;
		temp = k;
		if(it != s.begin()) {	
		--it;		
			while(temp--) {				
				if(it == s.begin()) {
					int idx = *it;/*cout << idx << ' ';*/vis[idx] = put;
					update(1, n, idx, 1);
					v.pb(idx);break;
				}				
				else {
					int idx = *it;/*cout << idx << ' ';*/vis[idx] = put;
					update(1, n, idx, 1);
					v.pb(idx);
				}
				--it;
			}
		}for(auto i : v)
			s.erase(i);










		/*fo(i, n)
			cout << a[i] << ' ';E;*/
		++cnt;
	}
	fo(i, n)
		cout << vis[i];
}

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t; while(t--)
                solve();
    return 0;
}