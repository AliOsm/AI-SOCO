#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre(){freopen("c://test//input.in","r",stdin);freopen("c://test//output.out","w",stdout);}
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1,class T2>inline void gmax(T1 &a,T2 b){if(b>a)a=b;}
template <class T1,class T2>inline void gmin(T1 &a,T2 b){if(b<a)a=b;}
const int N=2e5+10,Z=1e9+7,ms63=0x3f3f3f3f;
int n,m;
int first[N],w[N*2],cc[N*2],nxt[N*2];
int fa[N],son[N],dep[N],size[N],pos[N],top[N];
struct C
{
	int l,r,maxv;
}c[1<<19];
struct WW
{
	int x,y,z;
	bool operator < (const WW& b)const
	{
		return z<b.z;
	}
}W[N],M[N];
int id,tim;
int f[N],pp[N];
void ins(int x,int y,int z)
{
	id++;
	w[id]=y;
	cc[id]=z;
	nxt[id]=first[x];
	first[x]=id;
}
int find(int x)
{
	return f[x]==x?x:f[x]=find(f[x]);
}
int len[N];
void build(int o,int l,int r)
{
	c[o].l=l;
	c[o].r=r;
	if(l==r)
	{
		c[o].maxv=len[pp[l]];
		return;
	}
	int m=(l+r)>>1;
	build(ls,l,m);
	build(rs,m+1,r);
	c[o].maxv=max(c[ls].maxv,c[rs].maxv);
}
void dfs1(int x)
{
	size[x]=1;
	son[x]=0;
	for(int z=first[x];z;z=nxt[z])
	{
		int y=w[z];
		if(y==fa[x])continue;
		fa[y]=x;
		len[y]=cc[z];
		dep[y]=dep[x]+1;
		dfs1(y);
		size[x]+=size[y];
		if(size[y]>size[son[x]])son[x]=y;
	}
}
void dfs2(int x,int chain)
{
	pos[x]=++tim;
	pp[tim]=x;
	top[x]=chain;
	if(son[x]==0)return;
	dfs2(son[x],chain);
	for(int z=first[x];z;z=nxt[z])
	{
		int y=w[z];
		if(y!=fa[x]&&y!=son[x])dfs2(y,y);
	}
}
int Qmax(int o,int l,int r)
{
	if(c[o].l==l&&c[o].r==r)return c[o].maxv;
	int m=(c[o].l+c[o].r)>>1;
	if(r<=m)return Qmax(ls,l,r);
	else if(l>m)return Qmax(rs,l,r);
	else return max(Qmax(ls,l,m),Qmax(rs,m+1,r));
}
int QMAX(int x,int y)
{
	int maxv=-1e9;
	while(top[x]!=top[y])
	{
		if(dep[top[x]]<dep[top[y]])swap(x,y);
		gmax(maxv,Qmax(1,pos[top[x]],pos[x]));
		x=fa[top[x]];
	}
	if(pos[x]>pos[y])swap(x,y);
	if(pos[x]<pos[y])gmax(maxv,Qmax(1,pos[x]+1,pos[y]));
	return maxv;
}
int main()
{
	while(~scanf("%d%d",&n,&m))
	{
		id=0;
		for(int i=1;i<=n;++i)
		{
			f[i]=i;
			first[i]=0;
		}
		for(int i=1;i<=m;++i)scanf("%d%d%d",&W[i].x,&W[i].y,&W[i].z);
		MC(M,W);
		sort(W+1,W+m+1);
		LL sum=0;
		for(int i=1;i<=m;++i)
		{
			int x=W[i].x;
			int y=W[i].y;
			int fx=find(W[i].x);
			int fy=find(W[i].y);
			if(fx!=fy)
			{
				f[fy]=fx;
				ins(x,y,W[i].z);
				ins(y,x,W[i].z);
				sum+=W[i].z;
			}
		}
		fa[1]=0;dep[1]=0;dfs1(1);
		tim=0;dfs2(1,1);
		build(1,1,n);
		for(int i=1;i<=m;++i)
		{
			LL ans=sum-QMAX(M[i].x,M[i].y)+M[i].z;
			printf("%lld\n",ans);
		}
	}
	return 0;
}
/*
【trick&&吐槽】


【题意】


【类型】


【分析】


【时间复杂度&&优化】


【数据】


*/