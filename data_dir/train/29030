#include <bits/stdc++.h>
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
using namespace std;

const int N = 1800000;
int tree[8*N], lazy[8*N], lft[8*N], rght[8*N], idx;

void newNode(int &node, int l, int r) {
	if (!node) {
		node = ++idx;
		tree[node] = (r - l + 1), lazy[node] = -1;
	}
}

void propagate(int idx, int l, int r, int v) {
	lazy[idx] = v;
	tree[idx] = (r - l + 1) * v;
}

void update(int idx, int start, int end, int l, int r, bool v) {
	if (start >= l && end <= r) {
		return propagate(idx, start, end, v);
	}
	int mid = (start + end) / 2;
	newNode(lft[idx], start, mid);
	newNode(rght[idx], mid + 1, end);
	if (lazy[idx] != -1) {
		propagate(lft[idx], start, mid, lazy[idx]);
		propagate(rght[idx], mid + 1, end, lazy[idx]);
		lazy[idx] = -1;
	}
  if(mid >= l) {
  	update(lft[idx], start, mid, l, r, v);
  }
  if(mid+1 <= r) {
  	update(rght[idx], mid + 1, end, l, r, v);
  }

	tree[idx] = tree[lft[idx]] + tree[rght[idx]];
}
int main() {
	fastIO;
#ifdef LOCAL
	freopen("input.in", "rt", stdin);
#endif
	int n,q, l, r, k = 0;
	cin >> n >> q;
	int root = 0;
	newNode(root, 1, n);
	while (q--) {
		cin >> l >> r >> k;
		update(root, 1, n, l, r, k - 1);
		cout << tree[1] << '\n';
	}
	return 0;
}
