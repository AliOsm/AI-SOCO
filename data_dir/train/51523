#include <bits/stdc++.h>

using namespace std;

const int N = 6010;

vector<int> lis;
int n;
int ans;
int r[N];
vector<int> g[N];

void dfs(int v, int p) {
  int ps = lower_bound(lis.begin(), lis.end(), r[v]) - lis.begin();
  int old = -1;
  if (ps == lis.size())
    lis.push_back(r[v]);
  else {
    old = lis[ps];
    lis[ps] = r[v];
  }
  ans = max(ans, (int)lis.size());
  for (int i = 0; i < g[v].size(); ++i)
    if (g[v][i] != p)
      dfs(g[v][i], v);
  if (old == -1)
    lis.pop_back();
  else
    lis[ps] = old;
}

int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; ++i)
    scanf("%d", r + i);
  for (int i = 0, u, v; i < n - 1; ++i) {
    scanf("%d%d", &u, &v);
    --u, --v;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  for (int i = 0; i < n; ++i)
    dfs(i, -1);
  printf("%d\n", ans);
  return 0;
}
