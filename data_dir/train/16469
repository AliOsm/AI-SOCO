#include <iostream>
#include <set>
#include <utility>
#include <algorithm>
using namespace std;

const int MAXN=215;
int n;
int a[MAXN];
int b[MAXN];
int result;

struct pair_imitate
{
	int first, second;
};

bool operator < (const pair_imitate &A, const pair_imitate &B)
{
	return A.first < B.first;
}

void solve(void)
{
    pair_imitate val_ind[MAXN];
    for(int q=0; q<2*n; q++)
	{
		val_ind[q].first=a[q];
		val_ind[q].second=q;
	}
    sort(val_ind, val_ind+(2*n));

    int i=0;
    int count[2]={0,0};
    int res[2]={0,0};

    while(i<2*n)
    {
        int j=i;
        while(j+1<2*n && val_ind[j+1].first==val_ind[i].first) j++;

        int c=j-i+1;

		if(c==1)
		{
			int choice=res[0]<res[1] ? 0 : 1;
			count[choice]++;
			res[choice]++;
			b[val_ind[i].second]=choice+1;
		}

		i=j+1;
    }

	i=0;
	while(i<2*n)
    {
        int j=i;
        while(j+1<2*n && val_ind[j+1].first==val_ind[i].first) j++;

        int c=j-i+1;

		if(c!=1) // c>=2
		{
			res[0]++;
			res[1]++;

			count[0]++;
			count[1]++;

			b[val_ind[i].second]=1;
			b[val_ind[i+1].second]=2;

			for(int k=i+2; k<=j; k++)
			{
				int choice=count[0] <=count[1] ? 0 : 1;
				count[choice]++;
				b[val_ind[k].second]=choice+1;
			}
		}

		i=j+1;
    }

    result=res[0]*res[1];
}

int main()
{
    cin >> n;
    for(int i=0; i<2*n; i++) cin >> a[i];
    solve();
    cout << result << '\n';

	set<int> first;
	set<int> second;

    for(int i=0; i<2*n; i++)
	{
		cout << b[i] << ' ';
		if(b[i]==1) first.insert(a[i]);
		else second.insert(a[i]);
	}


    return 0;
}
