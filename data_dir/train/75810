#include <bits/stdc++.h>
using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
//#define int ll

typedef pair<int, int> pii;
typedef pair<pii, pii> piii;
typedef vector<piii> vpii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector< vi > vvi;
typedef vector< vvi > vvvi;
typedef vector<pii> vpi;
typedef vector<short> vs;
typedef vector<vs> vvs;
typedef vector<vvs> vvvs;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vvl> vvvl;
typedef vector<ld> vld;
typedef vector<vld> vvld;
typedef vector<vvld> vvvld;
typedef vector<string> vst;
typedef vector<vst> vvst;
typedef pair<ld, ld> pld;
typedef complex<double> base;

#define inmin(a, b) a = min(a, (b))
#define inmax(a, b) a = max(a, (b))
#define mp(a, b) make_pair(a, (b))
#define ALL(a) a.begin(),a.end()
#define RALL(a) a.rbegin(),a.rend()
#define sqr(x) ((x) * (x))
#define fori(i, n) for(int i = 0; i < int(n); ++i)
#define SZ(a) ((int)((a).size()))
#define triple(T) tuple<T, T, T>
#define quad(T) tuple<T, T, T, T>
#define watch(x) cout << (#x) << " = " << x << endl;
#ifdef MAX_HOME
#define cerr cout
#else
#define cerr if (false) cerr
#endif


void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
    cerr << *it << " = " << a << endl;
    err(++it, args...);
}

const double PI = 2 * acos(0.0);

const string DIGITS = "0123456789";
const string ALPH = "abcdefghijklmnopqrstuvwxyz";


istream &operator >> (istream &in, pii &a)
{
    in >> a.first >> a.second;
    return in;
}


ostream &operator << (ostream &out, pii &a)
{
    out << a.first << ' ' << a.second;
    return out;
}


template <class T0, class T1>
inline ostream & operator << (ostream &out, pair<T0, T1> &a) {
    return out << "{" << a.first << ", " << a.second << "}";
}

template <class T0, class T1, class T2>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) << ", " << get<2>(a) << "}";
}

template <class T0, class T1, class T2, class T3>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2, T3> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) <<
               ", " << get<2>(a) << ", " <<  get<3>(a) << "}";
}

template<class T>
inline ostream & operator << (ostream &out, vector<T> &a) {
    out << "[";
    fori (i, a.size())
        out << a[i] << vector<string>{", ", "]  "}[i + 1 == a.size()];
    return out;
}


void smain();

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

#ifdef ART_HOME
    freopen("input.txt", "r", stdin);
    clock_t start = clock();
#endif
    cout << setprecision(12) << fixed;
    smain();
#ifdef ART_HOME
    cout << "\n\n\n\nTOTAL EXECUTION TIME: " << float( clock () - start ) /  CLOCKS_PER_SEC << endl;
#endif
}


const int N = 1 << 18, zero = 1 << 17;

int t[N << 1];
int upd[N << 1];
int xorr[N << 1];
int lol[N];


void push(int ind)
{
    if (ind >= N)
    {
        if (ind - N + 1 == zero + 5)
            int a = 1;

        if (upd[ind] == 1)
            lol[ind - N + 1] = 1;
        else if (upd[ind] == 0)
            lol[ind - N + 1] = 0;

        if (xorr[ind])
            lol[ind - N + 1] ^= 1;


        xorr[ind] = 0;
        upd[ind] = -1;
        return;
    }

    if (xorr[ind])
    {
        if (upd[ind << 1] != -1)
            upd[ind << 1] ^= 1;
        else
            xorr[ind << 1] ^= 1;

        if (upd[ind << 1 | 1] != -1)
            upd[ind << 1 | 1] ^= 1;
        else
            xorr[ind << 1 | 1] ^= 1;
    }
    else if (upd[ind] != -1)
    {
        xorr[ind << 1] = 0;
        xorr[ind << 1 | 1] = 0;

        upd[ind << 1] = upd[ind << 1 | 1] = upd[ind];
    }

    xorr[ind] = 0;
    upd[ind] = -1;
}


void update(int l, int r, int lb, int rb, int ind, int v)
{
    push(ind);

    if (l == lb && r == rb)
    {
        upd[ind] = v;
        push(ind);
        return;
    }


    int m = (lb + rb) >> 1;

    if (l <= m)
        update(l, min(m, r), lb, m, ind << 1, v);

    if (r > m)
        update(max(l, m + 1), r, m + 1, rb, ind << 1 | 1, v);

}


void xore(int l, int r, int lb, int rb, int ind)
{
    push(ind);

    if (l == lb && r == rb)
    {
        xorr[ind] ^= 1;
        push(ind);
        return;
    }


    int m = (lb + rb) >> 1;

    if (l <= m)
        xore(l, min(m, r), lb, m, ind << 1);

    if (r > m)
        xore(max(l, m + 1), r, m + 1, rb, ind << 1 | 1);
}




void smain()
{
    fill(upd, upd + (N << 1), -1);

    int n, q;
    cin >> n >> q;

    vi kek(n);
    for (int i = 0; i < n; ++i)
        cin >> kek[i];
    
    for (int i = 0; i < q; ++i) {
        string s;
        cin >> s;
        int x;
        cin >> x;

        if (s == ">") {
            if (x >= 0) {
                update(1, zero - x - 1, 1, N, 1, 0);
                update(zero + x + 1, N, 1, N, 1, 1);
            } else {
                x = abs(x);

                update(1, zero - x, 1, N, 1, 0);
                update(zero + x, N, 1, N, 1, 1);

                if (x != 0)
                    xore(zero - x + 1, zero + x - 1, 1, N, 1);
            }
        } else {
            if (x >= 0) {

                update(1, zero - x, 1, N, 1, 1);
                update(zero + x, N, 1, N, 1, 0);
                
                if (x != 0)
                    xore(zero - x + 1, zero + x - 1, 1, N, 1);


            } else {
                x = abs(x);

                update(1, zero - x - 1, 1, N, 1, 1);
                update(zero + x + 1, N, 1, N, 1, 0);

            }

        }
    }
        for (int i = 1; i < (N << 1); ++i)
            push(i);

        for (int v : kek)
            cout << v * int(pow(-1, lol[v + zero])) << ' ';
        cout << endl;

}
