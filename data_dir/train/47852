#include <bits/stdc++.h>
using namespace std;
struct P
{
    long long x,y;
    bool operator<(const P &a)const{
        if(y!=a.y) return y>a.y;
        return x>a.x;
    }

};
vector<int> v;
//bitset<4001000> b;
int i,n,d,m,k,a,b,c;
int o[2051111];
int l[1];
int j[1];
int e;
int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[11];
//stack<int> s;
//set<int> se;
//priority_queue<int> q;
//queue<int> q;
string r,r1;
//char r[11];
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p;
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
bool as(P a,P b)
{
    return a.x<b.x;
}

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//rng();

P f(int x1,int y1,int x2,int y2)
{
    if(x1>x2||y1>y2) return {0,0};
    long long x=0,y=0,p=(long long)(x2-x1+1)*(y2-y1+1);

    if(p%2)
    {
        if((x1+y1)%2) y++;
        else x++;
    }
    x+=p/2;
    y+=p/2;
    return {x,y};
}

int main()
{
    scanf("%d",&a);
    for(int t=1;t<=a;t++)
    {
        scanf("%d %d",&m,&n);
        for(int t=1;t<=4;u[t]={c,d},t++)
            scanf("%d %d",&c,&d);
        x=y=0;
        x=f(1,1,m,n).x;
        y=f(1,1,m,n).y;
        x+=f(u[1].x,u[1].y,u[2].x,u[2].y).y;
        x-=f(max(u[1].x,u[3].x),max(u[1].y,u[3].y),min(u[2].x,u[4].x),min(u[2].y,u[4].y)).y;
        y-=f(u[1].x,u[1].y,u[2].x,u[2].y).y;
        y+=f(max(u[1].x,u[3].x),max(u[1].y,u[3].y),min(u[2].x,u[4].x),min(u[2].y,u[4].y)).y;
        x-=f(u[3].x,u[3].y,u[4].x,u[4].y).x;
        y+=f(u[3].x,u[3].y,u[4].x,u[4].y).x;
        printf("%lld %lld\n",x,y);
    }
}

