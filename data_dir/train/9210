#include <bits/stdc++.h>
#define err(args...) {}
#ifdef DEBUG
#include "_debug.cpp"
#include "callable.hpp/callable.hpp"
#endif
#define endl '\n'
using namespace std;
using ll = long long;
template <typename T>
string int_to_string(T n, int radix = 10) {
    if(n == 0) {
        return "0";
    } else {
        string ans;
        while(n > 0) {
            ans += n % radix <= 9 ? n % radix + '0' : n % radix - 10 + 'A';
            n /= radix;
        }
        while(ans.back() == '0') {
            ans.pop_back();
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
}
template <typename T>
T string_to_int(string& s, int radix = 10) {
    T ans = 0, pow = 1;
    for(int i = s.length() - 1; i >= 0; i--) {
        ans += ('0' <= s[i] and s[i] <= '9' ? s[i] - '0' : 10 + s[i] - 'A') * pow;
        pow *= radix;
    }
    return ans;
}
string R[] = { "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I" };
int H[] = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };
template <typename T>
string int_to_roman(T n) {
    string ans;
    for(int i = 0; i < 13; i++) {
        while(n >= H[i]) {
            ans += R[i];
            n -= H[i];
        }
    }
    return ans;
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int a; string b;
    cin >> a >> b;
    string c;
    cin >> c;
    ll cc = string_to_int<ll>(c, a);
    cout << (b == "R" ? int_to_roman<ll>(cc) : int_to_string(cc, string_to_int<int>(b))) << endl;
    return 0;
}
