#include <bits/stdc++.h>
 
using namespace std;
 
int main() {
    int n, m, k;
    char mp[55][55];
    int dx[] = {0, 1, 0, -1};
    int dy[] = {1, 0, -1, 0};
    int visited[55][55] = {};
    vector<pair<int, pair<int, int> > > V;
    cin >> n >> m >> k;
    for (int i = 0; i < n; i++) {
        // scanf("%s", mp[i]);
        string tmp;
        cin >> tmp;
        for (int j = 0; j < m; j++) {
            mp[i][j] = tmp[j];
            if (mp[i][j] == '*') visited[i][j] = 1;
        }
    }
    // cout << "go" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (visited[i][j] == 1) {
                continue;
            }
            queue<pair<int, int> > Q;
            Q.push(make_pair(i, j));
            visited[i][j] = 1;
            int count = 1;
            int isborder = 0;
            while (!Q.empty()) {
                int x = Q.front().first;
                int y = Q.front().second;
                Q.pop();
                for (int f = 0; f < 4; f++) {
                    int mx = x + dx[f];
                    int my = y + dy[f];
                    if (mx >= 0 && mx < n && my >= 0 && my < m) {
                        if (visited[mx][my] == 0) {
                            count++;
                            visited[mx][my] = 1;
                            Q.push(make_pair(mx, my));
                        }
                    } else {
                        isborder = 1;
                    }
                }
            }
            if (isborder == 0)
                V.push_back(make_pair(count, make_pair(i, j)));
        }
    }
    // cout << V.size() << endl;
    sort(V.begin(), V.end());
    int ans = 0;
    for (int i = 0; i < V.size() - k; i++) {
        ans += V[i].first;
        queue<pair<int, int> > Q;
        Q.push(make_pair(V[i].second.first, V[i].second.second));
        mp[Q.front().first][Q.front().second] = '*';
        while (!Q.empty()) {
            int x = Q.front().first;
            int y = Q.front().second;
            Q.pop();
            for (int f = 0; f < 4; f++) {
                int mx = x + dx[f];
                int my = y + dy[f];
                if (mx >= 0 && mx < n && my >= 0 && my < m) {
                    if (mp[mx][my] == '.') {
                        mp[mx][my] = '*';
                        Q.push(make_pair(mx, my));
                    }
                }
            }
        }
    }
    cout << ans << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            printf("%c", mp[i][j]);
        }
        cout << endl;
    }
    return 0;
}