// Sakhiya07 - Yagnik Sakhiya
 
#include <bits/stdc++.h>
using namespace std;
 
#define ll long long 
#define ld long double
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define bp __builtin_popcountll
#define MOD  998244353
const int N = 100000;
 
#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);srand(time(NULL));
 
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
#define ordered_set tree<pair<ll,ll>, null_type,less<pair<ll,ll>>, rb_tree_tag,tree_order_statistics_node_update>
ll modularExponentiation(ll x,ll n)
{
    int result=1;
    while(n>0)
    {
        if(n % 2 ==1)
            result=(result * x);
        x=(x*x);
        n=n/2;
    }
    return result;
}
map<ll,ll> y;
int main()
{
    ll t;
    cin >> t;
    while(t--)
    {
       ll n;
       cin >> n;
       y.clear();
       ll temp = n;
       while(temp%2==0)   temp/=2,y[2]++;
       for(ll i=3;i*i<=n;i+=2)
       {
           if(temp%i==0)   temp/=i,y[i]++;
       }
       if(temp!=1)    y[temp]++;
       ll extra = 1;
       ll ans[3];
       for(ll i=0;i<3;i++)   ans[i] = 1;
       ll j=0;
       for(auto X:y)
       {
           ll temp = X.ss;
           ll cnt = 1;
           while(temp>=cnt && j<=2)
           {
               ans[j++] = modularExponentiation(X.ff,cnt);
               temp -= cnt;
               cnt++;
           }
           extra *= modularExponentiation(X.ff,temp);
       }
       ans[2] *= extra;
       ll chk = 1;
       for(ll i=0;i<3;i++)    if(ans[i]==1)   chk =0;
       if(ans[2]==ans[1] || ans[2]==ans[0] )  chk = 0;
       if(chk)
       {
           cout<<"YES\n";
           for(ll i=0;i<3;i++)   cout<<ans[i]<<" ";
           cout<<"\n";
       }
       else
       {
           cout<<"NO\n";
       }
    }
}