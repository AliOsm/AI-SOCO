///Bismillahir Rahmanir Rahim
#include<bits/stdc++.h>

#define                           fi                          first
#define                           si                          second
#define                           mp                          make_pair
#define                           pb                          push_back
#define                           pi                          pair<int,int>
#define                           f(i,l,r)                    for(int i=l;i<=r;i++)
#define                           rf(i,r,l)                   for(int i=r;i>=l;i--)
#define                           done(i)                     cout<<"done = "<<i<<endl;
#define                           fast                        ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);




using namespace std;

const int inf=1e18;
const int mod=1e9+7;
const int M=100009;
inline int bigmod(int B,int P){int R=1;while(P>0){if(P&1){R=(R*B)%mod;}P>>=1;B=(B*B)%mod;}return R;}

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set1;


inline int id(char ch)
{
    if(ch=='A')return 0;
    else if(ch=='T')return 1;
    else if(ch=='G')return 2;
    else return 3;
}

ordered_set1 box[12][12][4];

 main()

{
    fast
    string s;
    cin>>s;
    int sz=s.size();
    f(i,0,sz-1)
    {
        f(j,1,10)
        {
            box[j][i%j][id(s[i])].insert(i);
        }
    }
    int q;
    cin>>q;
    while(q--)
    {
        int typ;
        cin>>typ;
        if(typ==1)
        {
            int x;
            char ch;
            cin>>x>>ch;x--;
            f(j,1,10)
            {
                box[j][x%j][id(s[x])].erase(x);
            }
            s[x]=ch;
            f(j,1,10)
            {
                box[j][x%j][id(s[x])].insert(x);
            }
        }
        else
        {
            int lft,rgt;
            string p;
            cin>>lft>>rgt>>p;
            lft--;rgt--;
            int m=p.size();
            int ses=0;
            f(i,0,m-1)
            {
                ses+=(box[m][(lft+i)%m][id(p[i])].order_of_key(rgt+1)-box[m][(lft+i)%m][id(p[i])].order_of_key(lft));
            }
            cout<<ses<<endl;
        }
    }
    return 0;

}
