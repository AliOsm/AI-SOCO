#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <deque>
#include <numeric>
#include <iterator>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <climits>
using namespace std;
typedef unsigned long long ULong;


typedef pair<int,int> PII;
short T[20000010];
short T2[20000010];
short F[20000010];
int main() 
{
    int k,n1,n2,n3,t1,t2,t3;
    cin >> k >> n1 >> n2 >> n3 >> t1 >> t2 >> t3;
    int ma = 0;
    T[0] = k;
    {
        int f = n1;
        int ca = 0;
        for(int i = 0; i < 15000010; ++i)
        {
            ca += T[i];
            f += F[i];
            int cntWillWork = min(ca , f);
            f -= cntWillWork;
            ca -= cntWillWork;
            if(cntWillWork == 0)continue;
            F[i+t1] += cntWillWork;
            T2[i+t1] += cntWillWork;
            ma = max(ma , i+t1);
        }
        memcpy(T,T2,sizeof(T2));
        memset(T2,0,sizeof(T2));
        memset(F,0,sizeof(F));
    }
    {
        int f = n2;
        int ca = 0;
        for(int i = 0; i < 15000010; ++i)
        {
            ca += T[i];
            f += F[i];
            int cntWillWork = min(ca , f);
            f -= cntWillWork;
            ca -= cntWillWork;
            if(cntWillWork == 0)continue;
            F[i+t2] += cntWillWork;
            T2[i+t2] += cntWillWork;
            ma = max(ma , i+t2);
        }
        memcpy(T,T2,sizeof(T2));
        memset(T2,0,sizeof(T2));
        memset(F,0,sizeof(F));
    }
    {
        int f = n3;
        int ca = 0;
        for(int i = 0; i < 15000010; ++i)
        {
            ca += T[i];
            f += F[i];
            int cntWillWork = min(ca , f);
            f -= cntWillWork;
            ca -= cntWillWork;
            if(cntWillWork == 0)continue;
            F[i+t3] += cntWillWork;
            T2[i+t3] += cntWillWork;
            ma = max(ma , i+t3);
        }
        memcpy(T,T2,sizeof(T2));
        memset(T2,0,sizeof(T2));
        memset(F,0,sizeof(F));
    }
    cout << ma << endl;
    
}
// [0, 1, 2, 3, 4]
/*
 * if(A < B)


P(A|B) = P(AnB)/P(B)

*/
