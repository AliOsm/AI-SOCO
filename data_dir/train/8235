/*
Nahid Hossain
Jahangirnagar University
Roll:54
*/
#include<bits/stdc++.h>
#include<string.h>
#define ll long long
#define pf printf
#define sf scanf
#define ff first
#define ss second
#define clr clear()
#define sz size()
#define pb push_back
#define mk make_pair
#define pi acos(-1)
#define inf 2000000000
#define mod 998244353
#define ull unsigned long long int
#define f(i,k,n) for(i=k;i<n;i++)
#define fr(i,n,k) for(i=n;i>=k;i--)
#define ent(a) scanf("%lld",&a)
#define ent2(a,b) scanf("%lld%lld",&a,&b)
#define ent3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define mem(a) memset(a,0,sizeof(a))
#define vec(v,s) vector<ll>v[s]
#define arr(a,s) ll a[s];
//knight and king//
int dr[]= {2,2,-2,-2,1,-1,1,-1};
int dc[]= {1,-1,1,-1,2,2,-2,-2};
int dr1[]= {0,0,1,1,1,-1,-1,-1};
int dc1[]= {1,-1,1,0,-1,0,1,-1};
int dr2[]= {0,0,1,-1};
int dc2[]= {1,-1,0,0};
////////////////////////////
using namespace std;
#define ma 200005
ll a[ma],cum[ma];
const ll mxt=2e18+5;
ll tr[ma*3],laz[ma*3];

void make_update(ll n,ll b,ll e)
{
  ll mid=(b+e)>>1,l=n*2,r=l+1;
  ll x=laz[n];
  tr[l]+=x;
  tr[r]+=x;
  laz[l]+=x;
  laz[r]+=x;
  laz[n]=0;
}




void update(ll n,ll b,ll e,ll x,ll y,ll val)
{
    if(b>y||e<x)return;
    if(b>=x&&e<=y)
    {
        tr[n]+=val;
        laz[n]+=val;
        return;
    }
    ll mid=(b+e)>>1,l=n*2,r=l+1;
    make_update(n,b,e);
    update(l,b,mid,x,y,val);
    update(r,mid+1,e,x,y,val);
    tr[n]=max(tr[l],tr[r]);
}

ll query(ll n,ll b,ll e,ll x,ll y)
{

    if(b==e)
    {
        if(tr[n]==0)return b;
        return -1;
    }
    make_update(n,b,e);
    ll mid=(b+e)>>1,l=n*2,r=l+1;
    if(tr[l]>=0)
    {
        ll p=query(l,b,mid,x,y);
        if(p!=-1)return p;

    }
    if(tr[r]>=0)
    {
        ll p=query(r,mid+1,e,x,y);
        if(p!=-1)return p;
    }
    return -1;
}



int main()
{
    ll n,k,i,j,x,q,y;
    while(cin>>n>>q)
    {
        for(i=1;i<=n;i++)
        {
            cin>>a[i];
            cum[i]=cum[i-1]+a[i];
        }

        for(i=1;i<=n;i++)
        {
            update(1,1,n,i,i,a[i]-cum[i-1]);
        }

        while(q--)
        {
            cin>>x>>y;
            ll d=y-a[x];
            update(1,1,n,x,x,d);
            update(1,1,n,x+1,n,-d);
            a[x]=y;
            cout<<query(1,1,n,1,n)<<endl;

        }

    }
    return 0;
}
