#include <bits/stdc++.h>

using namespace std;

#ifdef DGC
#include "debug.h"
#else
#define debug(...) 9715
#endif
typedef long long ll;
typedef long double ld;
typedef complex<ld> point;
#define F first
#define S second

const int mod = 1e9+7;

inline void add(int &x, int y)
{
	x += y;
	if (x >= mod) x -= mod;
}

inline int add2(int x, int y)
{
	add(x, y);
	return x;
}

int dp[2005][2005], dp2[2005][2005], dp3[2005][2005];

int main()
{
	#ifdef DGC
		//freopen("a.in", "r", stdin);
		//freopen("b.out", "w", stdout);
	#endif

	ios_base::sync_with_stdio(0), cin.tie(0);

	for (int k = 1; k <= 2001; ++k)
	{
		for (int i = 2; i <= 2000; ++i)
		{
			dp2[k-1][i] = (ll)dp[k-1][i] * (2001-i) % mod;
			add(dp2[k-1][i], dp2[k-1][i-1]);
			add(dp[k-1][i], dp[k-1][i-1]);
		}

		for (int i = 2; i <= 2000; ++i)
		{
			add(dp[k][i], 1);
			add(dp[k][i], dp2[k-1][i]);
			add(dp[k][i], mod - (ll)dp[k-1][i] * (2001-i-1) % mod);

			dp3[k][i] = dp[k][i];
			add(dp3[k][i], mod - dp[k-1][i]);
			add(dp3[k][i], dp[k-1][i-1]);
		}
	}

	auto get = [&](int k, int i)
	{
		return add2(dp[k][i], mod-dp[k][i-1]);
	};

	int n, m;
	cin >> n >> m;

	int ans = 0;
	for (int p = 1; p <= n; ++p)
		for (int j = 2; j <= m; ++j)
			add(ans, (ll)(m-j+1) * dp3[p][j] % mod * get(n-p+1, j) % mod);

	cout << ans << "\n";

	return 0;
}
