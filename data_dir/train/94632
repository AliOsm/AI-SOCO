/*input
13
1 1 1 2 2 2 3 3 3 4 4 4 5

*/

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll , ll> PLL;
typedef long double ld;

#define pb push_back
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
int mod = 1000000007;
#define PI 3.14159265
#define endl '\n'
#define debug(x) cout << #x << " = " << x << endl;

template < typename T > T GCD(T a, T b)            { ll t; while(a) { t = a; a = b % a; b = t; } return b; }
template < typename T > string toString(T a)       { return to_string(a); }
template < typename T > void toInt(string s, T &x) { stringstream str(s); str >> x;}
inline int add(int x, int y){ x += y; if(x >= mod) x -= mod; return x;}
inline int sub(int x, int y){ x -= y; if(x < 0) x += mod; return x;}
inline int mul(int x, int y){ return (x * 1ll * y) % mod;}
inline int powr(int a, ll b){
    int x = 1 % mod;
    while(b){
        if(b & 1) x = mul(x, a);
        a = mul(a, a);
        b >>= 1;
    }
    return x;
}
inline int inv(int a){ return powr(a, mod - 2);}

int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  cin >> n;
  int v;
  vector <int> vec;
  int ans = 0;
  int cnt[100001];
  int c = 0;
  memset(cnt, 0, sizeof(cnt));
  for (int i = 0; i < n; i++) {
    cin >> v;
    vec.pb(v);
  }
  for (int i = 0; i < n; i++) {
    c += (vec[i] == vec[0]);
  }
  set <int> temp;
  int mp[100001];
  memset(mp, 0, sizeof(mp));
  for (int i = 0; i < n; i++) {
    if (mp[cnt[vec[i]]] == 1) {
      temp.erase(cnt[vec[i]]);
      mp[cnt[vec[i]]]--;
    }
    else {
      mp[cnt[vec[i]]]--;
    }
    cnt[vec[i]]++;
    temp.insert(cnt[vec[i]]);
    mp[cnt[vec[i]]]++;
    if (temp.size() == 1 && *temp.begin() == 1) {
      ans = i + 1;
      continue;
    }
    if (temp.size() == 1 && i == n - 1 && c == n) {
      ans = i + 1;
      continue;
    }
    if (temp.size() == 2) {
      auto it = temp.begin();
      int v1 = *it;
      it++;
      int v2 = *it;
      int c1 = mp[v1], c2 = mp[v2];
      // debug(i);
      // cout << v1 << " " << v2 << " " << c1 << " " << c2 << endl;
      if ((c1 == 1 || c2 == 1)) {
        if (v1 == 1 && c1 == 1) {
          ans = i + 1;
        }
        else if (c2 == 1 && abs(v2 - v1) == 1) {
          ans = i + 1;
        }
      }
    }
  }
  cout << ans << endl;
  
  return 0;
}
