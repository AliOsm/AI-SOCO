#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

const int maxn = 1000 + 5;

char a[maxn][maxn];

bool flags[maxn][maxn];

int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};
int n, m;

bool valid(int x, int y){
	return x >= 0 && x < n && y >= 0 && y < m;
}

void dfs(int x, int y){
	flags[x][y] = true;
	for(int i = 0; i < 4; i++){
		int nx = x + dx[i];
		int ny = y + dy[i];
		if(valid(nx, ny) && !flags[nx][ny] && a[nx][ny] == '#'){
			dfs(nx, ny);
		}
	}
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	//mt19937 rng(5);
	//srand(time(0));
	
	
	
	cin >> n >> m;
	
	for(int i = 0; i < n; i++)
		cin >> a[i];
	
	vector<vector<int>> R(n), C(m);
	
	for(int i = 0; i < n; i++){
		for(int j = 0; j < m; j++){
			if(a[i][j] == '#'){
				R[i].push_back(j);
				C[j].push_back(i);
			}
		}
	}
	
	for(int i = 0; i < n; i++){
		for(int j = 1; j < R[i].size(); j++){
			if(R[i][j] != R[i][j - 1] + 1){
				cout << -1 << endl;
				return 0;
			}
		}
	}
	
	for(int i = 0; i < m; i++){
		for(int j = 1; j < C[i].size(); j++){
			if(C[i][j] != C[i][j - 1] + 1){
				cout << -1 << endl;
				return 0;
			}
		}
	}
	
	int r = 0, c = 0;
	for(int i = 0; i < n; i++)
		if(R[i].empty())
			r++;
	
	for(int i = 0; i < m; i++)
		if(C[i].empty())
			c++;
	
	int ans = 0;
	for(int i = 0; i < n; i++)
		for(int j = 0; j < m; j++)
			if(a[i][j] == '#' && !flags[i][j]){
				++ans;
				dfs(i, j);
			}
	
	if(c == 0 && r == 0)
		cout << ans << endl;
	else if(c == 0 && r > 0)
		cout << -1 << endl;
	else if(c > 0 && r == 0)
		cout << -1 << endl;
	else
		cout << ans << endl;
	
	return 0;
}

