#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <bitset>
#include <random>
#include <cassert>

using std::ios_base;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::fixed;

using std::vector;
using std::string;
using std::stack;
using std::queue;
using std::deque;
using std::map;
using std::set;
using std::unordered_map;
using std::unordered_set;
using std::bitset;

using std::tuple;
using std::make_tuple;
using std::pair;
using std::make_pair;

using std::sort;
using std::reverse;
using std::nth_element;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define sqr(x) ((x) * (x))

#define forn(i, n) for (int i = 0; i < (int) (n); i++)
#define fornr(i, n) for (int i = (int) (n) - 1; i >= 0; i--)
#define forab(i, a, b) for (int i = (int) (a); i < (int) (b); i++)

struct __Timestamp {
    ~__Timestamp() {
        #ifdef LOCAL
        cerr << "\n== " << 1.0 * clock() / CLOCKS_PER_SEC << " sec.\n";
        #endif
    }
} __timestamp;

template<typename T>
void debug(T t) {
    #ifdef LOCAL
    cerr << t;
    #endif
}

template<typename T, typename... Args>
void debug(T t, Args... args) {
    #ifdef LOCAL
    debug(t);
    cerr << " ";
    debug(args...);
    #endif
}

const int N = 10005;

int n;
int a[N], b[N];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    cin >> n;
    forn(i, n) {
        cin >> a[i] >> b[i];
    }

    int cnt = 0;
    forn(i, n) {
        bool f = false;
        forn(j, n) {
            if (i == j)
                continue;
            if (a[i] == b[j])
                f = true;
        }
        cnt += !f;
    }

    cout << cnt << '\n';

    return 0;
}

