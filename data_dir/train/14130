/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

const int N = 1e5 + 5;
vector<int> Add[N << 1], Rem[N << 1];
pair<int, int> a[N], b[N];
multiset<int> s[2];
int n;
 
void read_input() {
	cin >> n;
	for (int i = 0; i < n; i++)
		for (auto x: {&a[i], &b[i]})
			cin >> x->first >> x->second;
}
 
void solve() {
	for (int i = 0; i < n; i++)
		Add[a[i].first].push_back(i), Rem[a[i].second].push_back(i);
	for (int i = 0; i <= n << 1; i++) {
		for (auto x: Rem[i]) {
			if ((!s[1].empty() && *s[1].begin() <= b[x].first) || (!s[0].empty() && *--s[0].end() >= b[x].second))
				cout << "NO", exit(0);
			s[0].erase(s[0].find(b[x].first)), s[1].erase(s[1].find(b[x].second));
		}
		for (auto x: Add[i])
			s[0].insert(b[x].first), s[1].insert(b[x].second);
		Rem[i].clear(), Add[i].clear();
	}
	for (int i = 0; i < n; i++)
		swap(a[i], b[i]);
}
 
void write_output() {
	vector<int> help;
	for (int i = 0; i < n; i++)
		for (auto x: {a[i], b[i]})
			help.push_back(x.first);
	sort(help.begin(), help.end()), help.resize(unique(help.begin(), help.end()) - help.begin());
	for (int i = 0; i < n; i++)
		for (auto x: {&a[i], &b[i]}) {
			x->first = lower_bound(help.begin(), help.end(), x->first) - help.begin();
			x->second = upper_bound(help.begin(), help.end(), x->second) - help.begin();
		}
	solve(), solve(), cout << "YES";
}
 
int main() {
	ios:: sync_with_stdio(0), cin.tie(0), cout.tie(0);
	read_input(), write_output();
	return 0;
} 
