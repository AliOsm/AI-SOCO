#include<bits/stdc++.h>
using namespace std;

const int N = 2e5 + 5;
const long long INF = 2e18;


int n, k, a[N], nxt[N];
long long pref[N];

inline long long get(int l, int r){
    if(l > r){
        return 0;
    }
    return pref[r] - pref[l - 1];
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin >> n >> k;
    for(int i = 1; i <= n; i++){
        cin >> a[i];
        pref[i] = pref[i - 1] + a[i];
    }
    nxt[n + 1] = n + 1;
    for(int i = n; i >= 1; i--){
        if(a[i] == 1){
            nxt[i] = nxt[i + 1];
        }
        else{
            nxt[i] = i;
        }
    }
    int ans = 0;
    for(int i = 1; i <= n; i++){
        long long p = 1;
        for(int j = i; j <= n; j = (a[j] == 1 ? nxt[j] : j + 1)){
            if(p >=
                INF / a[j]){
                break;
            }
            p *= a[j];
            long long s = get(i, j);
            if(p % k == 0 && s <= (p / k) && (p / k) <= s + get(j + 1, nxt[j] - 1)){
                ans++;
            }
        }
    }
    cout << ans;
}
