#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <functional>
#include <cmath>
#include <climits>
#include <memory.h>

#if !defined(__GNUC__)
#include <hash_set>
#include <hash_map>
typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef signed short int16_t;
typedef unsigned short uint16_t;
typedef signed long int32_t;
typedef unsigned long uint32_t;
typedef signed long long int64_t;
typedef unsigned long long uint64_t;
#else // !defined(__GNUC__)
#include <ext/hash_set>
#include <ext/hash_map>
namespace stdext = __gnu_cxx;
#define _CrtDbgBreak()
#endif // !defined(__GNUC__)

#if defined(ONLINE_JUDGE)
#define LOCAL_TEST 0
#else 
#define LOCAL_TEST 1
#endif

#if LOCAL_TEST
#define LOCAL_ASSERT(expr) if (!(expr)) {std::cout << "ASSERT FAILED: '" << #expr << "'" << std::endl; _CrtDbgBreak(); }
#else
#define LOCAL_ASSERT(expr)
#endif

typedef long double double_t;
typedef std::string string8_t;

typedef std::vector<size_t> vector_size_t;
typedef std::vector<uint64_t> vector_uint64_t;
typedef std::vector<int32_t> vector_int32_t;
typedef std::vector<vector_size_t> vector_2d_size_t;
typedef std::vector<string8_t> vector_string8_t;
typedef std::set<uint64_t> set_uint64_t;
typedef stdext::hash_set<size_t> hash_set_size_t;
typedef std::multiset<string8_t> multiset_string8_t;

// Auxiliary functions definition
// 
template<typename T> inline T Abs(const T a) { return a < 0 ? -a : a; }
template<typename T> inline T Min(const T a, const T b) {return a < b ? a : b;}
template<typename T> inline T Max(const T a, const T b) {return a > b ? a : b;}
template<typename T> inline void UpdateMin(T& a, const T b) {a = Min(a, b);}
template<typename T> inline void UpdateMax(T& a, const T b) {a = Max(a, b);}

static const double_t eps = 1.0e-09;
template<typename T> inline bool IsEqual(const T a, const T b) { return Abs(a - b) < eps; }
template<typename T> inline bool IsGreater(const T a, const T b) { return a > b + eps; }
template<typename T> inline bool IsLess(const T a, const T b) { return a + eps < b; }

template<typename T> inline string8_t ToStr(const T& val) { std::ostringstream ostr; ostr << val; return ostr.str(); }
template<typename T> inline bool FromStr(const string8_t& str, T& val) {std::istringstream istr(str); istr >> val; return !!istr; }

#if defined(ONLINE_JUDGE)
template<size_t id> class StopWatch { };
#elif !defined(__GNUC__)
#include <library/lib_stopwatch.h>
#else 
#include "../../library/library/lib_stopwatch.h"
#endif

struct ans_t
{
    uint64_t a;
    uint64_t b;
    uint64_t c;

    bool operator<(const ans_t& rv) const
    {
        if (a < rv.a)
            return true;
        if (a > rv.a)
            return false;
        if (b < rv.b)
            return true;
        if (b > rv.b)
            return false;
        if (c < rv.c)
            return true;
        return false;
    }

    bool operator==(const ans_t& rv) const
    {
        return (a == rv.a) && (b == rv.b) && (c == rv.c);
    }
};

typedef std::set<ans_t> set_ans_t;
typedef std::vector<ans_t> vector_ans_t;

void SolveSQ(const int64_t a, const int64_t b, const int64_t c, vector_uint64_t& roots)
{
    roots.clear();
    const int64_t d = b * b - a * c * 4;
    if (d < 0)
        return;

    const double_t fsq = sqrt((double_t)d);
    const int64_t sq = (int64_t)(fsq + 0.5);
    if (sq * sq != d)
        return;

    const int64_t r1 = -b + sq;
    if ((r1 > 0) && (r1 % (2 * a) == 0))
    {
        roots.push_back((uint64_t)(r1 / (2 * a)));
    }

    if (sq != 0)
    {
        const int64_t r2 = -b - sq;
        if ((r2 > 0) && (r2 % (2 * a) == 0))
        {
            roots.push_back((uint64_t)(r2 / (2 * a)));
        }
    }
}

uint64_t GetPositiveRoot(const int64_t a, const int64_t b, const int64_t c)
{
    const int64_t d = b * b - a * c * 4;
    if (d < 0)
        return 0;

    const double_t fsq = sqrt((double_t)d);
    const int64_t sq = (int64_t)(fsq + 0.5);
    if (sq * sq != d)
        return 0;

    const int64_t r1 = -b + sq;
    if ((r1 > 0) && (r1 % (2 * a) == 0))
    {
        return (uint64_t)(r1 / (2 * a));
    }

    return 0;
}

bool Solve(std::istream& ist, std::ostream& ost, const bool multipleTestMode)
{
    StopWatch<1> sw;

    // 
    uint64_t n;
    ist >> n;

    if (multipleTestMode && !ist)
        return false;

    if (n % 3 != 0)
    {
        ost << "0" << std::endl;
        return multipleTestMode;
    }

    n /= 3;
    vector_ans_t answers;
    vector_uint64_t roots;
    for (uint64_t x = 2; x * x * x <= n; x++)
    {
        if (n % x == 0)
        {
            const uint64_t y = n / x;
            for (uint64_t a = 1; 2 * a <= x; a++)
            {
                const uint64_t b = x - a;

                const int64_t sqa = 1;
                const int64_t sqb = a + b;
                const int64_t sqc = a * b - y;
                                
                const uint64_t c = GetPositiveRoot(sqa, sqb, sqc);
                if (c == 0)
                    continue;

                uint64_t v[3] = {a, b, c};
                std::sort(v, v + 3);
                do 
                {
                    ans_t ans;
                    ans.a = v[0];
                    ans.b = v[1];
                    ans.c = v[2];
                    answers.push_back(ans);
                } while (std::next_permutation(v, v + 3));
            }
        }
    }

    std::sort(answers.begin(), answers.end());
    answers.erase(std::unique(answers.begin(), answers.end()), answers.end());

    ost << answers.size() << std::endl;
    return multipleTestMode;
}

int main()
{
    std::ios_base::sync_with_stdio(false);
    std::istream& ist = std::cin;
    std::ostream& ost = std::cout;
#if defined(ONLINE_JUDGE)
    Solve(ist, ost, false);
#else
    while(Solve(ist, ost, true)) {};
#endif
}
