#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <algorithm>
#include <map>
#include <queue>
#include <clocale>
#include <bitset>
#include <cstring>
#include <memory.h>
#include <numeric>
#include <iomanip>
#include <stack>
#include <list>

using namespace std;

#pragma comment (linker, "/STACK:667177216")
#define ll long long
#define LL long long
#define ull unsigned long long
#define ld long double
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pb push_back
const ll mod = 998244353;
#define INF (int)(2e9)
#define LINF (ll)(4e18)
#define forit(mas) for(auto(it)=(mas).begin();(it)!=(mas).end();(it)++)
#define pii pair<int,int>


ll n, k;
ll D[2010][2010][2][2];

ll dinam(ll pos, ll sz, ll a, ll b) {
	if (pos == n) {
		if (sz == k) return 1LL;
		return 0;
	}
	if (D[pos][sz][a][b] != -1) return D[pos][sz][a][b];
	D[pos][sz][a][b] = 0;
	if (a == 0 && b == 0) {
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz, 0, 0) % mod) % mod;
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz + 1, 1, 1) % mod) % mod;
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz + 1, 0, 1) % mod) % mod;
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz + 1, 1, 0) % mod) % mod;
		return D[pos][sz][a][b] % mod;
	}
	if (a == 1 && b == 1) {
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz + 1, 0, 0) % mod) % mod;
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz, 1, 1) % mod) % mod;
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz + 1, 0, 1) % mod) % mod;
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz + 1, 1, 0) % mod) % mod;
		return D[pos][sz][a][b] % mod;
	}
	if (a == 0 && b == 1) {
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz, 0, 0) % mod) % mod;
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz, 1, 1) % mod) % mod;
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz, 0, 1) % mod) % mod;
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz + 2, 1, 0) % mod) % mod;
		return D[pos][sz][a][b] % mod;
	}
	if (a == 1 && b == 0) {
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz, 0, 0) % mod) % mod;
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz, 1, 1) % mod) % mod;
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz + 2, 0, 1) % mod) % mod;
		D[pos][sz][a][b] = (D[pos][sz][a][b] % mod + dinam(pos + 1, sz, 1, 0) % mod) % mod;
		return D[pos][sz][a][b] % mod;
	}
}

int main() {

#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> k;
	memset(D, -1, sizeof(D));
	ll ans = 0;
	ans = (ans % mod + dinam(1, 1, 0, 0) % mod) % mod;
	ans = (ans % mod + dinam(1, 1, 1, 1) % mod) % mod;
	ans = (ans % mod + dinam(1, 2, 0, 1) % mod) % mod;
	ans = (ans % mod + dinam(1, 2, 1, 0) % mod) % mod;
	cout << ans;
	return 0;
}