#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <class T>
using ordered_set =
       tree <T,null_type,less <T>,rb_tree_tag,tree_order_statistics_node_update> ;

template <class T,class U>
void maximize(T &x,U y)
{
    if(x < y)x=y;
}
template <class T,class U>
void minimize(T &x,U y)
{
    if(x > y)x=y;
}
template <class T>
T Abs(T x)
{
    return (x < (T)0 ? -x : x);
}
template <class T>
T safe_sqrt(T x)
{
    return sqrt(max(x,(T)0));
}
template <class T,class U,class V>
T addmod(T x,U k,V MOD)
{
    return ((x+k)%MOD + MOD)%MOD;
}
template <class T,class U,class V>
T submod(T x,U k,V MOD)
{
    return ((x-k)%MOD + MOD)%MOD;
}
template <class T,class U,class V>
T mul(T x,U y,V MOD)
{
    return (long long)x*y%MOD;
}

#define ll long long
#define pll pair <ll,ll>
#define pii pair <int,int>
#define fir first
#define sec second
#define mp make_pair
#define pb push_back
#define MASK(i) ((1LL)<<(i))
#define BIT(x,i) (((x)>>(i))&1)
#define all(c) (c).begin(),(c).end()
#define sz(c) (c).size()
#define fn "test"    ///FILE_NAME_HERE

/*------------------------------------------END_OF_TEMPLATE------------------------------------------*/

namespace task{

const int N=2e5+5;
int c[N],tr[N],a[N],minCost[N];
vector <int> adj[N],gr[N];
int vis[N],g[N];
int n,cur_com = 0;
ll ans = 0;

void cyc(int u,int v)
{
    for(int t = u;t != v;t = tr[t])
        minimize(minCost[cur_com],c[t]);
    minimize(minCost[cur_com],c[v]);
}

void dfs(int u)
{
    vis[u] = 1;
    for(auto v : adj[u])
    {
        if(!vis[v])
            tr[v] = u,dfs(v);
        else if(vis[v] == 1)
        {
            cyc(u,v);
            return ;
        }
    }
    vis[u] = 2;
}

void _dfs(int u)
{
    g[u] = true;
    for(auto v : gr[u])
        if(!g[v])
          _dfs(v);
}

void solve()
{
    cin>>n;
    for(int i = 1;i <= n;++i)
        cin>>c[i];
    for(int i = 1;i <= n;++i)
        minCost[i] = numeric_limits <int> :: max();
    for(int i = 1;i <= n;++i)
    {
        cin>>a[i];
        adj[i].pb(a[i]);
        gr[i].pb(a[i]);
        gr[a[i]].pb(i);
    }
    for(int i = 1;i <= n;++i)
        if(!g[i])
    {
        ++cur_com;
        dfs(i);
        _dfs(i);
        ans += 1LL*minCost[cur_com];
    }
    cout<<ans;
}}

int main(void)
{
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    task::solve();
}
