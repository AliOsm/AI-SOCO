#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <stdio.h>
#include <cstdio>
#include <math.h>
#include <cmath>
#include <string>
#include <cstring>
#include <queue>
#include <deque>
#include <random>
#include <iomanip>
#include <bitset>

using namespace std;

template<typename T> void uin(T &a, T b) {
    if (b < a) {
        a = b;
    }
}

template<typename T> void uax(T &a, T b) {
    if (b > a) {
        a = b;
    }
}

#define left left228
#define right right228
#define ld long double
// #define prev prev228
#define mp make_pair
#define all(v) v.begin(), v.end()
#define forn(i, n) for (int i = 0; i < (int)n; ++i)
#define firn(i, n) for (int i = 1; i < (int)n; ++i)

const int N = 1000 * 1000 + 228;
const int M = 1000 * 1000 * 10 + 7;

int cnt[M], ans[M];
bool pr[M];

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int n;
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        int x;
        cin >> x;
        ++cnt[x];
    }
    memset(pr, 1, sizeof pr);
    pr[0] = pr[1] = 0;
    for (int i = 2; i < M; ++i) {
        if (pr[i]) {
            for (int j = i; j < M; j += i) {
                ans[i] += cnt[j];
                pr[j] = 0;
            }
        }
    }
    for (int i = 1; i < M; ++i) {
        ans[i] += ans[i - 1];
    }
    int m;
    cin >> m;
    while(m--) {
        int l, r;
        cin >> l >> r;
        if (l >= M) {
            cout << 0 << "\n";
        } else {
            uin(r, M - 1);
            cout << ans[r] - ans[l - 1] << '\n';
        }
    }
    return 0;

}

/*
3
1 1 2
2 2 2
3 3 2
2 1 1
3 2 1


2 2
1 1 2
2 2 2
1 2 3
2 1 1

2
2 1 2 2 3
2 2 2 1 1

5
1 2
2 3
3 4
3 5
1
2 3
1 2
4 3
2 3 5

*/