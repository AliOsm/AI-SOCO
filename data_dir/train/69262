#include<bits/stdc++.h>
#define ll unsigned long long
#define acm ios::sync_with_stdio(0),ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
#define pb push_back
#define F first
#define S second
#define mod 1000000007
using namespace std;
int arr[705]= {},n,dp[705][705][2]= {},gcds[705][705]= {};
int solve(int l,int r,bool parent)
{
    if (l==r-1)
    {
        int z=gcds[l][r];
        if (z==1)
            return 1;
        int c=1;
        for (int i=l; i<=r; ++i)
        {
            if (parent)
                c=max(c,gcds[i][r+1]);
            else
                c=max(c,gcds[l-1][i]);
        }
        if (c==1)
            return 1;
        return min(c,z);
    }
    if (l==r)
    {
        if (parent)
            return gcds[r+1][r];
        return gcds[l-1][l];
    }
    int &ret=dp[l][r][parent];
    if (~ret)
        return ret;
    ret=0;
    int g;
    for (int i=l; i<=r; ++i)
    {
        g=-1;
        if (l!=1||r!=n)
        {
            if (parent)
                g=gcds[r+1][i];
            else
                g=gcds[l-1][i];
        }
        if (g!=1)
        {
            int ansl=INT_MAX,ansr=INT_MAX;
            if (i-1>=l)
                ansl=solve(l,i-1,true);
            if (i+1<=r)
                ansr=solve(i+1,r,false);
            int mn=min(ansl,ansr);
            if (g!=-1)
                mn=min(mn,g);
            ret=max(ret,mn);
            if (ret>1) return ret;
        }
    }
    return ret;
}
int main()
{
    acm;
    cin>>n;
    for (int i=1; i<=n; ++i)
        cin>>arr[i];
    for (int i=1; i<=n; ++i)
    {
        for (int j=1; j<=n; ++j)
            gcds[i][j]=__gcd(arr[i],arr[j]);
    }
    if (n==2)
    {
        if (__gcd(arr[1],arr[2])==1)
            return cout<<"No\n",0;
        return cout<<"Yes\n",0;
    }
    memset(dp,-1,sizeof(dp));
    int ans=solve(1,n,0);
    if (ans==1)
        return cout<<"No\n",0;
    cout<<"Yes\n";
    return 0;
}