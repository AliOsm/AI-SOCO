#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>

#define N	200000
#define INF	0x3f3f3f3f

int min(int a, int b) { return a < b ? a : b; }
int max(int a, int b) { return a > b ? a : b; }

void srand_() {
	struct timeval tv;

	gettimeofday(&tv, NULL);
	srand(tv.tv_sec ^ tv.tv_usec);
}

int rand_(int n) {
	return (rand() * 76543LL + rand()) % n;
}

int aa[N], ll[N], rr[N];

int compare(const void *a, const void *b) {
	int i = *(int *) a;
	int j = *(int *) b;

	return ll[j] - ll[i];
}

void sort(int *ii, int n) {
	int i;

	for (i = 0; i < n; i++) {
		int j = rand_(i + 1), tmp;

		tmp = ii[i], ii[i] = ii[j], ii[j] = tmp;
	}
	qsort(ii, n, sizeof *ii, compare);
}

int ft[N];

void ft_update(int i, int n, int x) {
	while (i < n) {
		ft[i] = min(ft[i], x);
		i |= i + 1;
	}
}

int ft_query(int i) {
	int x = INF;

	while (i >= 0) {
		x = min(x, ft[i]);
		i &= i + 1, i--;
	}
	return x;
}

int st_min[N * 2], st_max[N * 2], n_;

int min_(int i, int j) {
	if (i == -1)
		return j;
	if (j == -1)
		return i;
	return aa[i] < aa[j] ? i : j;
}

int max_(int i, int j) {
	if (i == -1)
		return j;
	if (j == -1)
		return i;
	return aa[i] > aa[j] ? i : j;
}

void st_build(int n) {
	int i;

	n_ = n;
	for (i = 0; i < n; i++)
		st_min[n_ + i] = st_max[n_ + i] = i;
	for (i = n_ - 1; i > 0; i--) {
		st_min[i] = min_(st_min[i << 1], st_min[i << 1 | 1]);
		st_max[i] = max_(st_max[i << 1], st_max[i << 1 | 1]);
	}
}

int i_, j_;

void st_query(int l, int r) {
	i_ = j_ = -1;
	for (l += n_, r += n_; l <= r; l >>= 1, r >>= 1) {
		if ((l & 1) == 1) {
			i_ = min_(i_, st_min[l]);
			j_ = max_(j_, st_max[l]);
			l++;
		}
		if ((r & 1) == 0) {
			i_ = min_(i_, st_min[r]);
			j_ = max_(j_, st_max[r]);
			r--;
		}
	}
}

int main() {
	static int ii[N], lu[N], ld[N], ru[N], rd[N], qu[N], i1[N], i2[N], i3[N], j1[N], j2[N], j3[N], j4[N];
	int n, q, h, i, cnt;

	srand_();
	scanf("%d%d", &n, &q);
	for (i = 0; i < n; i++)
		scanf("%d", &aa[i]);
	cnt = 0;
	for (i = 0; i < n; i++) {
		while (cnt && aa[qu[cnt - 1]] <= aa[i])
			cnt--;
		lu[i] = cnt ? qu[cnt - 1] : -1;
		qu[cnt++] = i;
	}
	cnt = 0;
	for (i = 0; i < n; i++) {
		while (cnt && aa[qu[cnt - 1]] >= aa[i])
			cnt--;
		ld[i] = cnt ? qu[cnt - 1] : -1;
		qu[cnt++] = i;
	}
	cnt = 0;
	for (i = n - 1; i >= 0; i--) {
		while (cnt && aa[qu[cnt - 1]] <= aa[i])
			cnt--;
		ru[i] = cnt ? qu[cnt - 1] : n;
		qu[cnt++] = i;
	}
	cnt = 0;
	for (i = n - 1; i >= 0; i--) {
		while (cnt && aa[qu[cnt - 1]] >= aa[i])
			cnt--;
		rd[i] = cnt ? qu[cnt - 1] : n;
		qu[cnt++] = i;
	}
	memset(i3, 0x3f, n * sizeof *i3);
	for (i = 0; i < n; i++) {
		if (lu[i] >= 0) {
			int l = lu[i], r = ru[i];

			if (i3[l] > r)
				i1[l] = l, i2[l] = i, i3[l] = r;
		}
		if (ld[i] >= 0) {
			int l = ld[i], r = rd[i];

			if (i3[l] > r)
				i1[l] = l, i2[l] = i, i3[l] = r;
		}
		ll[i] = min(lu[i], ld[i]);
		rr[i] = max(ru[i], rd[i]);
	}
	for (i = 0; i < n; i++)
		ii[i] = i;
	sort(ii, n);
	st_build(n);
	memset(ft, 0x3f, n * sizeof *ft);
	for (i = n - 1, h = 0; i >= 0; i--) {
		int j;

		while (h < n && ll[ii[h]] > i) {
			ft_update(n - 1 - ii[h], n, ii[h]);
			h++;
		}
		j = ft_query(n - 1 - (rr[i] + 1));
		j1[i] = i, j4[i] = j;
		if (j != INF) {
			int tmp;

			st_query(i + 1, j - 1);
			if (i_ > j_)
				tmp = i_, i_ = j_, j_ = tmp;
			j2[i] = i_, j3[i] = j_;
		}
	}
	for (i = n - 2; i >= 0; i--)
		if (i3[i] > i3[i + 1])
			i1[i] = i1[i + 1], i2[i] = i2[i + 1], i3[i] = i3[i + 1];
	for (i = n - 2; i >= 0; i--)
		if (j4[i] > j4[i + 1])
			j1[i] = j1[i + 1], j2[i] = j2[i + 1], j3[i] = j3[i + 1], j4[i] = j4[i + 1];
	while (q--) {
		int l, r;

		scanf("%d%d", &l, &r), l--, r--;
		if (j4[l] <= r) {
			printf("4\n");
			printf("%d %d %d %d\n", j1[l] + 1, j2[l] + 1, j3[l] + 1, j4[l] + 1);
		} else if (i3[l] <= r) {
			printf("3\n");
			printf("%d %d %d\n", i1[l] + 1, i2[l] + 1, i3[l] + 1);
		} else
			printf("0\n");
	}
	return 0;
}
