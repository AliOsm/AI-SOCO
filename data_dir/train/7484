#include <bits/stdc++.h>
#include <bits/extc++.h>
using namespace std;
/* nichijou */
#define REP(i,a,b) for (int i(a); i < (b); ++i)
#define RP(i,n) REP(i,0,n)
#define PER(i,a,b) for(int i((a)-1); i >= (b); --i)
#define PR(i,n) PER(i,n,0)
#define REP1(i,a,b) REP(i,a,(b)+1)
#define RP1(i,n) REP1(i,1,n)
#define PER1(i,a,b) PER(i,(a)+1,b)
#define PR1(i,n) PER1(i,n,1)
#define DO(n) RP(__i,n)
template<class T,class U>
bool cmax(T & a, const U & b) {return a < b ? a = b, 1 : 0;}
template<class T,class U>
bool cmin(T & a, const U & b) {return b < a ? a = b, 1 : 0;}
/* data type */
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
#define F first
#define S second
/* STL container */
typedef vector<int> vi;
typedef vector<ll> vll;
#define SZ(a) ((int)(a).size())
#define ALL(a) begin(a), end(a)
#define CLR(a) (a).clear()
#define BK(a) ((a).back())
#define FT(a) ((a).front())
#define DB(a) (a).pop_back()
#define DF(a) (a).pop_front()
#define PB push_back
#define EB emplace_back
/* pb_ds */
#define umap_t __gnu_pbds::gp_hash_table
// umap_t<key_type,value_type,key_hasher_functor>
#define heap_t __gnu_pbds::priority_queue
// heap_t<value_type,compare_functor>
// h1.join(h2); assert(h2.empty());
template<class T>
using set_t = __gnu_pbds::tree<T,__gnu_pbds::null_type,less<T>,__gnu_pbds::rb_tree_tag,__gnu_pbds::tree_order_statistics_node_update>;
// s.order_of_key(k) number of element less than k
// s.find_by_order(k) 0-based
/* I gave you my heart and then you turned around. */
void _BG(const char * s) {cerr<<s<<endl;}
template<class T, class ... TT>
void _BG(const char * s,T a, TT...b)
{
    for (size_t c = 0; *s && (c || *s != ','); cerr << *s++)
        c += count(ALL("([{"),*s) - count(ALL(")]}"),*s);
    cerr << " = " << a;
    if (*s) {
        cerr << ", ";
        ++s;
    }
    _BG(s,b...);
}
#ifdef PR3PONY
#define BG(...) do { \
    cerr << __PRETTY_FUNCTION__ << ':' << __LINE__ << ": "; \
    _BG(#__VA_ARGS__,__VA_ARGS__); \
} while(0)
#else
#define BG(...)
#endif
/* Reading input is now 20% cooler! */
bool RD() {return 1;}
bool RD(char & a) {return scanf(" %c", &a) == 1;}
bool RD(char * a) {return scanf("%s", a) == 1;}
bool RD(double & a) {return scanf("%lf", &a) == 1;}
bool RD(int & a) {return scanf("%d", &a) == 1;}
bool RD(ll & a) {return scanf("%lld", &a) == 1;}
template<class T, class ... TT>
bool RD(T & a, TT & ... b) {return RD(a) && RD(b...);}
/* Do princesses dream of magic sheep? */
#define DR(T,...) T __VA_ARGS__; RD(__VA_ARGS__)
#define RI(...) DR(int,__VA_ARGS__)
/* For it's time for you to fulfill your output. */
void PT(const char & a) {putchar(a);}
void PT(char const * const & a) {fputs(a, stdout);}
void PT(const double & a) {printf("%.16f", a);}
void PT(const int & a) {printf("%d", a);}
void PT(const ll & a) {printf("%lld", a);}
/* The line will last forever! */
template<char s = ' ', char e = '\n'>
void PL() {if (e) PT(e);}
template<char s = ' ', char e = '\n', class T, class ... TT>
void PL(const T & a, const TT & ... b)
{PT(a); if (sizeof...(b) && s) PT(s); PL<s,e>(b...);}
/* Good Luck && Have Fun ! */
const int N = 5e5+87;
int n,k;
vector<pii> g[N];
ll dp[N][2];
void dfs(int p,int u)
{
    dp[u][0] = dp[u][1] = 0;
    priority_queue<ll> pq;
    for (const auto & e : g[u]) {
        int w,v;
        tie(w,v) = e;
        if (v == p) continue;
        dfs(u,v);
        pll a(dp[v][0]+w, dp[v][1]);
        dp[u][0] += a.S;
        dp[u][1] += a.S;
        if (a.F > a.S) {
            ll x = a.F - a.S;
            pq.push(x);
        }
    }
    for (int i = 1; i <= k && pq.size(); ++i) {
        ll x = pq.top();
        pq.pop();
        dp[u][1] += x;
        if (i < k)
            dp[u][0] += x;
    }
}
void solve()
{
    cin >> n >> k;
    RP1(i,n) g[i].clear();
    RP(i,n-1) {
        int u,v,w;
        cin >> u >> v >> w;
        g[u].EB(w,v);
        g[v].EB(w,u);
    }
    dfs(0,1);
    cout << max(dp[1][0],dp[1][1]) << '\n';
}
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    int q;
    cin >> q;
    while (q--) {
        solve();
    }
}
