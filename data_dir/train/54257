#include <bits/stdc++.h>
#define ll long long
#define IO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
using namespace std;
#define mat vector<ll>
const int N = 1e5 + 50, mod = 1e9 + 7;

int f[N], inv[N];
vector<vector<int> > d(N);

int add(int x, int y)
{
    return ((x + y) % mod + mod) % mod;
}

int mul(int x, int y)
{
    return ((x * 1ll * y) % mod + mod) % mod;
}

int c(int n, int r)
{
    if(n < r || r < 0)
        return 0;
    return mul(f[n], mul(inv[n - r], inv[r]));
}

int pw(int b, int p)
{
    if(!p)
        return 1;
    int ret = pw(b, p / 2);
    ret = mul(ret, ret);
    if(p & 1)
        ret = mul(ret, b);
    return ret;
}

map<pair<int, int>, int> dp;

int solve(int n, int f)
{
    if(f > n)
        return 0;
    if(f == n)
        return 1;
    if(dp.find({n, f}) != dp.end())
        return dp[{n, f}];
    int ret = c(n - 1, f - 1);
    for(auto i : d[n])
        ret = add(ret, -solve(i, f));
    return dp[{n, f}] = ret;
}

int main()
{
    IO;
    f[0] = inv[0] = 1;
    for(int i = 1; i < N; i++)
    {
        f[i] = mul(f[i - 1], i);
        inv[i] = pw(f[i], mod - 2);
    }
    for(int i = 1; i < N; i++)
        for(int j = 2 * i; j < N; j += i)
            d[j].push_back(i);
    int q, n, f;
    cin >> q;
    while(q--)
    {
        cin >> n >> f;
        cout << solve(n, f) << '\n';
    }
}