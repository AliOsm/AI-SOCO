#include <bits/stdc++.h>
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
#define ll long long int
using namespace std;
const long double pi = 3.14159265358979323;
const double EPS = 1e-9;
const int N = 1e6 + 5;
const int MOD = 1e9 + 7;

ll tree[N];
ll h[N], a[N], b[N];
void build(ll node, ll st, ll end){
	if(st > end) return;
	if(st == end){
		tree[node] = b[st];
		return;
	}
	ll mid = (st + end) >> 1;
	build(node * 2, st, mid);
	build(node * 2 + 1, mid + 1, end);
	tree[node] = min(tree[node * 2], tree[node * 2 + 1]);
}

ll querry(ll node, ll st, ll end, ll l, ll r){
	if(st > end || l > r || l > end || r < st) return 1e12;
	if(l <= st && end <= r) return tree[node];
	ll mid = (st + end) >> 1;
	ll t = querry(node * 2, st, mid, l, r);
	ll tt = querry(node * 2 + 1, mid + 1, end, l, r);
	return min(t, tt);	
}

int main(){
	fast;
	ll n, k, m = 1, flag = 0, pos = -1, prev;
	cin >> n >> k;
	for(int i = 0; i < n; i++){
		cin >> a[i];
		if(a[i]){
			b[m++] = a[i];
		}
		if(a[i] == k){
			flag = 1;
		}
	}
	if(m == 1){
		cout << "YES\n";
		for(int i = 0; i < n; i++) cout << k << " ";
		return 0;
	}
	build(1, 1, m - 1);
	for(int i = 1; i < m; i++){
		if(h[b[i]]){
			if(h[b[i]] + 1 <= i - 1){
				ll t = querry(1, 1, m - 1, h[b[i]] + 1, i - 1);
				if(t < b[i])
					return cout << "NO", 0;
			}
		}
		h[b[i]] = i;
	}
	prev = -1;
	for(int i = 0; i < n; i++){
		if(!a[i] && pos == -1)
			pos = i;
		if(!a[i] && prev != -1)
			a[i] = prev;
		else if(a[i])
			prev = a[i];
	}
	prev = -1;
	for(int i = n - 1; i >= 0; i--){
		if(!a[i] && prev != -1) a[i] = prev;
		else if(a[i]) prev = a[i];
	}
	if(!flag){
		if(pos == -1)
			return cout << "NO", 0;
		a[pos] = k;
	}
	cout << "YES\n";
	for(int i = 0; i < n; i++) cout << a[i] << " ";
	return 0;
}
