#include <bits/stdc++.h>
#define rep(i,a,b) for(int i = (a); i <= (b); i++)
#define rng(a) a.begin(), a.end()
#define sz(x) (int)(x).size()
#define se second
#define fi first
#define prev            :oyhhhhhhyo:    
#define next         .sdNNNmNNNNNNNmds. 
#define y0          -hNNNNy`yNNNNNN`/Nh-
#define y1          mNNNNNd+dNNNNNN+sNNm
#define yn          mNNNNNNNNy--:smNNNms
#define tm          .+oooooosyysooooo+- 
#define read               :yhy/        
#define rank              :mNmo         
#define index              ... 
#define pb push_back
#define pcnt __builtin_popcountll
#define rrep(i,a,b) for(int i = (b); i >= (a); i--)
#define rall(x,a) for(auto x : a)
#define MOD 1000000007
#define endl "\n"
#define int long long
typedef long long ll;
using namespace std;

const int X = 222222, N = 111111;
bool isp[X];
vector<int> primes;
int f[N], g[N];
int n, m;

int powmod(int x, int n, int mod) {
    int ans = 1;
    while(n) {
        if(n & 1) {
            ans = ans * x % mod;
        }
        x = x * x % mod;
        n >>= 1;
    }
    return ans;
}

void calcg(int d) {
    fill(g, g + d, 0);
    rep(i, 0, n - 1) {
        int ii = i % d;
        g[ii] += f[i];
    }
}

int evalg(int r, int d, int p) {
    int ans = 0, po = 1;
    rep(i, 0, d - 1) {
        ans = (ans + g[i] * po) % p;
        po = po * r % p;
    }
    return ans;
}

int findr(int p, int k) {
    int r;
    do {
        r = powmod(rand() % (p - 1) + 1, k, p);
    } while(r == 1 || r > p - 2);
    return r;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    srand(time(NULL));
    cin >> n >> m;
    string s, t;
    cin >> s >> t;
    rep(i, 0, n - 1) {
        f[i] = s[i] - t[i];
    }
    fill(isp + 2, isp + X, true);
    rep(i, 2, X - 1) {
        if(isp[i]) {
            primes.pb(i);
            for(int j = 2 * i; j < X ; j += i) {
                isp[j] = false;
            }
        }
    }
    for(int i = 1; ; i++) {
        int d = primes[i];
        calcg(d);
        for(int k = (m + d - 2) / d; d * k + 1 < X; k++) {
            int p = d * k + 1;
            if(!isp[p]) continue;
            int rb = findr(p, k), r = 1;
            rep(i, 1, d) {
                r = r * rb % p;
                if(!evalg(r, d, p)) {
                    cout << p << " " << r << endl;
                    return 0;
                }
            }
        }
    }
    return 0;
}
