#include<iostream>
#include<algorithm>
#include<vector>
#include<set>

#define F first
#define S second

using namespace std;

const int MAXN = 50005;
int x[MAXN], y[MAXN], g[MAXN], s[MAXN];
set<pair<int, int> > st;
vector<pair<int, int> > v[MAXN];
bool mark[MAXN];

int DFS(int n, int t)
{
	mark[n] = true;
	if(n == t)
		return 0;
	for(auto x : v[n])
		if(!mark[x.F])
		{
			int y = DFS(x.F, t);
			if(y != -1)
				if(s[x.S] > s[y])
					return x.S;
				else
					return y;
		}
	return -1;
}

int main()
{
	s[0] = 0;
	int n, m;
	cin >> n >> m;
	int G, S;
	cin >> G >> S;
	for(int i = 1; i <= m; i++)
	{
		cin >> x[i] >> y[i] >> g[i] >> s[i];
		if(x[i] != y[i])
			st.insert({g[i], i});
	}
	int edge = 0;
	long long ans = 2e18 + 5;
	for(auto x : st)
	{
		int i = x.S;
		fill(mark, mark + n + 1, 0);
		int j = DFS(::x[i], y[i]);
		if(j != -1)
		{
			if(s[j] <= s[i])
				continue;
			for(int t = 0; t < 2; t++)
			{
				swap(::x[j], y[j]);
				for(int k = 0; k < v[::x[j]].size(); k++)
				{
					int z = v[::x[j]][k].F;
					if(z == y[j])
					{
						swap(v[::x[j]][k], v[::x[j]].back());
						v[::x[j]].pop_back();
					}
				}
			}
		}
		else
			edge++;
		v[::x[i]].push_back({y[i], i}), v[y[i]].push_back({::x[i], i});
		if(edge == n - 1)
		{
			int MAXG = 0, MAXS = 0;
			for(int i = 0; i < n; i++)
				for(auto x : v[i])
				{
					MAXG = max(MAXG, g[x.S]);
					MAXS = max(MAXS, s[x.S]);
				}
			ans = min(ans, 1ll * MAXG * G + 1ll * MAXS * S);
		}
	}
	if(ans == 2e18 + 5)
		cout << -1 << endl;
	else
		cout << ans << endl;
	return 0;
}
