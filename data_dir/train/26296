//besmellah
#include <bits/stdc++.h>
using namespace std;

#pragma GCC optimize("O3,Ofast,no-stack-protector,unroll-loops,fast-math,-ffp-contract=off")

#define left LL
#define right RR
#define prev PREV

const int maxn = 1e5 + 2, SQ = sqrt(maxn) + 1;
int cnt[maxn], a[maxn], left[maxn], right[maxn], prev[maxn], nxt[maxn], PR[maxn], NX[maxn];
unordered_map <int, int> dist[maxn];
int idx[maxn];
int ans[maxn];
int can = 0, ANS;

inline bool cmp(int id1, int id2){
	if (left[id1] / SQ != left[id2] / SQ)
		return left[id1] < left[id2];
	if (left[id1] / SQ % 2 == 0)
		return right[id1] < right[id2];
	return right[id2] < right[id1];
}
//
int main(){
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	int q;
	cin >> q;
	for (int i = 0; i < n; i++){
		prev[i] = PR[a[i]];
		PR[a[i]] = i;
	}
	for (int i = n - 1; i >= 0; i--){
		nxt[i] = NX[a[i]];
		NX[a[i]] = i;
	}
	for (int i = 0; i < q; i++){
		cin >> left[i] >> right[i];
		left[i] --;
		right[i] --;
		idx[i] = i;
	}
	sort(idx, idx + q, cmp);
	int MO_right = 0, MO_left = 0;
	cnt[a[0]]++;
	can ++;
	ANS++;
	for (int i = 0; i < q; i++){
		int id = idx[i];
		int L = left[id], R = right[id];
		while (MO_right < R){
			MO_right ++;
			int x = a[MO_right];
			if (!cnt[x]){
				can ++;
			}
			else{
				bool f = false;;
				if (cnt[x] > 1) f = dist[x].size() == 1;
				dist[x][MO_right - prev[MO_right]]++;
				if (dist[x].size() != 1){
					if (f)
						can--;
				}
			}
			cnt[x]++;
			if (cnt[x] == 1)
				ANS++;
		}
		while (MO_left > L){
			MO_left --;
			int x = a[MO_left];
			if (!cnt[x]){
				can ++;
			}
			else{
				bool f = false;
				if (cnt[x] > 1) f = dist[x].size() == 1;
				dist[x][nxt[MO_left] - MO_left]++;
				if (dist[x].size() != 1){
					if (f)
						can --;
				}
			}
			cnt[x]++;
			if (cnt[x] == 1)
				ANS++;
		}
		while (MO_right > R){
			int x = a[MO_right];
			if (cnt[x] == 1){
				can --;
			}
			else{
				bool f = dist[x].size() == 1;
				auto y = dist[x].find(MO_right - prev[MO_right]);
				y->second--;
				if (y->second == 0)
					dist[x].erase(y);
				if (cnt[x] == 2 && !f)
					can ++;
				else if (dist[x].size() == 1)
					if (!f)
						can ++;
			}
			cnt[x]--;
			if (!cnt[x])
				ANS--;
			MO_right --;
		}
		while (MO_left < L){
			int x = a[MO_left];
			if (cnt[x] == 1){
				can --;
			}
			else{
				bool f = dist[x].size() == 1;
				auto y = dist[x].find(nxt[MO_left] - MO_left);
				y->second--;
				if (y->second == 0)
					dist[x].erase(y);
				if (cnt[x] == 2 && !f)
					can ++;
				else if (dist[x].size() == 1)
					if (!f)
						can ++;
			}
			cnt[x]--;
			if (!cnt[x])
				ANS--;
			MO_left ++;
		}
		ans[id] = ANS;
		if (!can)
			ans[id] ++;
	}
	for (int i = 0; i < q; i++){
		cout << ans[i] << '\n';
	}
}
