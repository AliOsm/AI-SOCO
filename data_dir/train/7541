#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define INF 2000000000
#define MOD 1000000007
#define ll long long
#define vi vector<int>
#define pb push_back
#define ii pair<int,int>
#define vii vector<ii>
#define si set<int>
#define msi map<string,int>
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define TRvi(c,it) for(vi::iterator it=(c).begin();it!=(c).end();it++)
#define TRvii(c,it) for(vii::iterator it=(c).begin();it!=(c).end();it++)
#define TRmsi(c,it) for(msi::iterator it=(c).begin();it!=(c).end();it++)
 
 
using namespace std;

vector<pair<int,int>>adj[100001];
bool visited[100001];
int parr[100001];

bool dfs(int node)
{
	visited[node]=true;
	REP(i,0,adj[node].size()-1)
	{
		int e=adj[node][i].first;
		int w=adj[node][i].second;
		if(visited[e])
		{
			if(((parr[node]+parr[e])%2)!=w)
			{
				return false;
			}
		}
		else
		{
			int x=(parr[node]+w)%2;
			parr[e]=x;
			if(!dfs(e))
			{ 
				return false;
			}
		}
	}
	return true;
}

int main()
{
    IOS;
    #ifndef ONLINE_JUDGE
        // for getting input from input.txt
        freopen("input.txt", "r", stdin);
        // for writing output to output.txt
        freopen("output.txt", "w", stdout);
    #endif
    int n,m;
    cin >> n >> m;
    int arr[n+1];
    REP(i,1,n)
    {
    	cin >> arr[i];
    	if(arr[i])
    		arr[i]--;
    	else
    		arr[i]++;
    }
    vector<int>rooms[n+1];
    REP(i,1,m)
    {
    	int p;
    	cin >> p;
    	REP(j,1,p)
    	{
    		int x;
    		cin >> x;
    		rooms[x].pb(i);
    	}
    }
    map<pair<int,int>,int>edges;
    REP(i,1,n)
    {
    	pair<int,int>p=make_pair(min(rooms[i][0],rooms[i][1]),max(rooms[i][0],rooms[i][1]));
    	if(edges.find(p)==edges.end())
    		edges[p]=arr[i];
    	else
    	{
    		if(edges[p]!=arr[i])
    		{
    			cout << "NO";
    			return 0;
    		}
    	}
    }
   	for(auto it:edges)
   	{
   		int a=it.first.first,b=it.first.second,w=it.second;
   		adj[a].pb(make_pair(b,w));
   		adj[b].pb(make_pair(a,w));
   	}
   	REP(i,1,m)
   		parr[i]=-1;
   	REP(i,1,m)
   	{
   		if(!visited[i])
   		{
   			parr[i]=0;
   			if(!dfs(i))
   			{
   				cout << "NO";
   				return 0;
   			}
   		}
   	}
   	cout << "YES";
}