/*input
aa
2
*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;
#define REP(i,j,k)     for(int i = j ; i < k ; ++i)
#define RREP(i,j,k)    for(int i = j ; i >=k ; --i)
#define A    first
#define B    second
#define mp   make_pair
#define pb   emplace_back
#define PII pair<int , int>
#define MEM(i,j)   memset(i , j , sizeof i)
#define ALL(i)     i.begin() , i.end()
#define DBGG(i,j)     cout << i << " " << j << endl
#define DB4(i,j,k,l)  cout << i << " " << j << " " << k << " " << l << endl
#define IOS cin.tie() , cout.sync_with_stdio(0)
#define endl "\n"
///------------------------------------------------------------
#define MAX 100090
#define INF 0x3f3f3f3f

string s;
int sa[MAX] , lcp[MAX] , rk[MAX];
int tma[2][MAX] , c[MAX] , sp[MAX][20];
void getsa(){
	int *x = tma[0] , *y = tma[1] , m = 200 , n = s.size();
	REP(i , 0 , m) c[i] = 0;
	REP(i , 0 , n) c[x[i] = s[i]] ++;
	REP(i , 1 , m) c[i] += c[i - 1];
	RREP(i , n - 1 , 0) sa[--c[x[i]]] = i;

	for(int k = 1 ; k < n ; k <<= 1){
		REP(i , 0 , m) c[i] = 0;
		REP(i , 0 , n) c[x[i]] ++;
		REP(i , 1 , m) c[i] += c[i - 1];
		int p = 0;
		REP(i , n - k , n) y[p ++] = i;
		REP(i , 0 , n) if(sa[i] >= k) y[p ++] = sa[i] - k;
		RREP(i , n - 1 , 0) sa[--c[x[y[i]]]] = y[i];

		y[sa[0]] = p = 0;
		REP(i , 1 , n){
			int a = sa[i] , b = sa[i - 1];
			if(x[a] == x[b] && a + k < n && b + k < n && x[a + k] == x[b + k]);
			else p ++;
			y[sa[i]] = p;
		}
		if(n == p + 1) break;
		swap(x , y) , m = p + 1;
	}
}
int getlcp(){
	int n = s.size() , tmp = 0;
	REP(i , 0 , n) rk[sa[i]] = i;
	REP(i , 0 , n){
		if(rk[i] == 0) lcp[0] = 0;
		else {
			if(tmp) tmp --;
			int po = sa[rk[i] - 1];
			while(tmp + i < n && tmp + po < n && s[tmp + i] == s[tmp + po]) tmp ++;
			lcp[rk[i]] = tmp;
		}
	}
}
void getsp(){
    int n = s.size();
    REP(i , 0 , n) sp[rk[i]][0] = s.size() - i;
    REP(i , 1 , n) sp[i - 1][1] = lcp[i];
    REP(i , 2 , 20){
        REP(j , 0 , n){
            if(j + (1 << (i - 2)) >= s.size()) continue;
            sp[j][i] = min(sp[j][i - 1] , sp[j + (1 << (i - 2))][i - 1]);
        }
    }
}
int Query(int L , int R){
    int tmp = (L == R) ? 0 : 32 - __builtin_clz(R - L);
    return min(sp[L][tmp] , sp[R - (1 << (tmp - 1))][tmp]);
}
int solve(int id , int len){
	int now = id;
	RREP(i , 19 , 0){
		int to = now + (1 << i);
		if(to < s.size() && Query(now , to) >= len) now = to;
	}
	return now;
}
int32_t main(){
	IOS;
	int cnt = 0 , k;
	cin >> s >> k;
	getsa() , getlcp() , getsp();
	// REP(i , 0 , s.size()) cout << sa[i] << " " ; cout << endl;
	// REP(i , 0 , s.size()) cout << rk[i] << " " ; cout << endl;
	REP(i , 0 , s.size()){
		REP(ii , sa[i] + lcp[i] , s.size()){
			cnt += solve(i , ii - sa[i] + 1) - i + 1;
		// DB4("cnt = " , cnt , sa[i] , ii - sa[i] + 1);
		// c
		// cc
		// ccc
		// cccc
			if(cnt >= k){
				REP(jj , sa[i] , ii + 1){
					cout << s[jj];
				}
				cout << endl;
				return 0;
			}
		}
	}
	cout << "No such line." << endl;
	// DBGG("cnt = " , cnt);
    return 0;
}