#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define size(x) (int) x.size()
#define abs(x) x < 0 ? -x : x
#define sqr(x) 1ll * (x) * (x)

const int maxn = 100005;
const int inf = (int) 1e9;
const long long mod = (int) 1e9 + 7;
const long long l_inf = (long long) 8e18;

int n;
pair<int, int> pt[maxn];
long long S = l_inf, D = l_inf;
int a = -1, b = -1, c = -1;

long long vp(pair<int, int> A, pair<int, int> B) {
	return 1ll * A.first * B.second - 1ll * A.second * B.first;
}

pair<int, int> operator -(pair<int, int> A, pair<int, int> B) {
	return mp(A.first - B.first, A.second - B.second);
}

long long countS(int i, int j, int k) {
	pair<int, int> A = pt[j] - pt[i], B = pt[k] - pt[i];
	long long newS = abs(vp(A, B));
//	cout << newS << '\n';
	return newS;
}

long long dist(int i, int j) {
	return sqr(pt[i].first - pt[j].first) + sqr(pt[i].second - pt[j].second);
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> pt[i].first >> pt[i].second;

	a = rand() % n;
	for (int i = 0; i < n; i++) {
		if (i == a)
			continue;
		long long newD = dist(a, i);
		if (newD < D) {
			D = newD;
			b = i;
		}
	}

	for (int i = 0; i < n; i++) {
		if (i == a || i == b)
			continue;
		long long newS = countS(a, b, i);
		if (newS < S && newS > 0) {
			S = newS;
			c = i;
		}
	}

	a++, b++, c++;
	cout << a << ' ' << b << ' ' << c;

	return 0;
}
