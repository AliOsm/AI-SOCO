#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>

using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")
#define null NULL
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define fornr(i, n) for (int i = (n); i >= 0; --i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 1e18 + 7;
/*
const int MAX_MEM = 2e8;
int mpos = 0;
char mem[MAX_MEM];
inline void * operator new ( size_t n ) {
  char *res = mem + mpos;
  mpos += n;
  assert(mpos <= MAX_MEM);
  return (void *)res;
}
inline void operator delete ( void * ) { }

inline void * operator new [] ( size_t ) { assert(0); }
inline void operator delete [] ( void * ) { assert(0); }*/

int nxt[100500][26];
int prv[100500][26];
int lst[26];
int dp1[100500];
int dp2[100500];
string s, t;

int main() {
	cin.sync_with_stdio(false);
	cin.tie(0);
//	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("ufo.in", "r", stdin);freopen("ufo.out", "w", stdout);
	cin >> s >> t;
	int n = s.size(), m = t.size();
	forn(i, 26)
		lst[i] = -1;
	forn(i, n) {
		forn(j, 26)
			prv[i][j] = lst[j];
		lst[s[i] - 'a'] = i;
	}
	forn(i, 26)
		lst[i] = -1;
	for (int i = n - 1; i >= 0; --i) {
		forn(j, 26)
			nxt[i][j] = lst[j];
		lst[s[i] - 'a'] = i;
	}
	if (s[0] == t[0]) {
		dp1[0] = 0;
	}
	else {
		dp1[0] = nxt[0][t[0] - 'a'];
	}
	for (int i = 1; i < m; ++i) {
		if (dp1[i - 1] == -1)
			dp1[i] = -1;
		else {
			int j = dp1[i - 1];
			dp1[i] = nxt[j][t[i] - 'a'];
		}
	}
	forn(i, m) {
		if (dp1[i] == -1)
			dp1[i] = infi;
	}
	if (s[n - 1] == t[m - 1]) {
		dp2[m - 1] = n - 1;
	}
	else
		dp2[m - 1] = prv[n - 1][t[m - 1] - 'a'];
	for (int i = m - 2; i >= 0; --i) {
		int j = dp2[i + 1];
		if (j == -1)
			dp2[i] = -1;
		else {
			dp2[i] = prv[j][t[i] - 'a'];
		}
	}
	pii ans = mp(0, m - 1);
	int i = 0, j = 0;
	while (j < m && dp2[j] < 0)
		++j;
	if (j != m)
		ans = mp(0, j - 1);
	for (; i < m; ++i) {
		if (dp1[i] > n)
			break;
		for (; j < m && dp1[i] >= dp2[j]; ++j);
		if (ans.second - ans.first + 1 > (j - 1) - (i + 1) + 1)
			ans = mp(i + 1, j - 1);
	}
	int flag = 1;
	forn(i, m) {
		if (i < ans.first || i > ans.second)
			cout << t[i], flag = 0;
	}
	if (flag)
		cout << '-';

	return 0;
}