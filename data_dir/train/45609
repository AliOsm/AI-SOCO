#include <bits/stdc++.h>

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")


//#include "rubo.h"
//#define mp make_pair
//#define pb push_back
#define in int
#define ll long long
#define ull unsigned long long
#define vc vector
//#define in ll
#define SQ(x) (x)*(x)
#define F first
//#define S second
//#define ld long double
#define dbl  double
#define pll pair<ll,ll>
#define pii pair<int,int>
#define pdd pair<dbl,dbl>
#define all(x) x.begin(), x.end()
#define loop(xxx, yyy) for(int xxx = 0; xxx < yyy; xxx++)
//#define printf(fmt, ...) (0)
//#define HOME
//#define y0 ngacaleiebinvoaeu
//#define y1 gnarpipipaigare
#define j1 adsfndnasfafoasp


using namespace std;

const int N = 503;

int n, m;
int NU = -1,NV = -1;
vc<int> g[N];

char color[N];


int back_edges;

int v1,v2;

int par[N];

void dfs(int u, int p) {
    if(color[u] == 2) return;
    if (color[u] == 1) {
//        printf("back %d\n",u);
        back_edges++;
        v1 = u;
        v2 = p;
        return;
    }


//    printf("dfs %d\n",u);
    par[u] = p;
    color[u] = 1;
    for (int v : g[u]) {
        if (u != NU || v != NV) {
            dfs(v,u);
        }
    }
    color[u] = 2;
}


int main() {
    scanf("%d%d", &n, &m);

    for (int i = 0; i < m; i++) {
        int u, v;
        scanf("%d%d", &u, &v);
        u--, v--;
        g[u].push_back(v);
    }

    for(int i = 0; i < N; i++) {
        color[i] = 0;
        par[i] = -1;
    }


    back_edges = 0;
    for(int v = 0; v < n; v++){
        if(color[v] == 0) {
            dfs(v,-1);
        }
    }

    if(back_edges == 0)
        return 0*printf("YES\n");

    vc<int> cycle;
    int v = v2;
    while(true){
        cycle.push_back(v);
        if(v == v1) break;
        v = par[v];
    }
    reverse(all(cycle));

    for(int i = 0; i < cycle.size(); i++){
        NU = cycle[i];
        NV = cycle[(i+1)%cycle.size()];

        for(int j= 0 ; j < n; j++) color[j] = 0;

        back_edges=0;
        for(v = 0; v < n; v++){
            if(color[v] == 0){
//                printf("\n");
                dfs(v,-1);
            }
        }

        if(back_edges == 0){
            return 0*printf("YES\n");
        }
    }
    printf("NO\n");
    return 0;
}
