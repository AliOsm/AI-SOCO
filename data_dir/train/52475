#include<bits/stdc++.h>
using namespace std;


using ll = long long;
typedef pair < int , int > ii;
typedef vector < int > vi;
typedef vector < ii > vii;
const int N = 2e5 + 5;
const ll INF = (int)1e9;
const double eps = 1e-9;

struct node{
    int mx , dx;

    node(){
        mx = dx = 0;
    }
};

node st[N << 2];
int lft[N] , rght[N];
int team[N];
int a[N];

node mrg(node a , node b){
    if(a.mx > b.mx)return a;
    return b;
}

void build(int p , int l , int r){
    if(l == r){
        st[p].mx  = a[l];
        st[p].dx  = l;
        return;
    }
    int mid = (l + r) >> 1;

    build(p << 1 , l , mid);
    build(p << 1 | 1 , mid + 1 , r);

    st[p] = mrg(st[p << 1] , st[p << 1 | 1]);
}

void update(int p , int l , int r , int dx){
    if(l == r){
        st[p].mx = -1;
        return;
    }
    int mid = (l + r) >> 1;
    if(dx <= mid)update(p << 1 , l , mid , dx);
    else update(p << 1 | 1 , mid + 1 , r , dx);

    st[p] = mrg(st[p << 1] , st[p << 1 | 1]);
}

main(){
   int n , k;

   scanf("%d %d" , &n , &k);

      lft[0] = 0;
     rght[0] = 0;
    lft[n+1] = n+1;
   rght[n+1] = n+1;

   for(int i = 1 ; i <= n ; i ++){
        scanf("%d" , &a[i]);
         lft[i] = i - 1;
        rght[i] = i + 1;
   }

   build(1 , 1 , n);


   int turn = 0;
   while(st[1].mx != -1){
        node nd = st[1];
        turn ^= 1;

        int dx  = nd.dx;
        int dx2 = dx;
        update(1 , 1 , n , dx);
        for(int i = 1 ; i <= k+1 ; i ++){
            team[dx]  = turn;
            team[dx2] = turn;

            if( (dx <= 0 || dx > n) && (dx2 <= 0 || dx2 > n))break;

            update(1 , 1 , n , dx);
            update(1 , 1 , n , dx2);

            rght[lft[dx2]] = rght[dx];
             lft[rght[dx]] = lft[dx2];
            dx  = rght[dx];
            dx2 = lft[dx2];
        }
   }

   for(int i = 1 ; i <= n ; i ++){
        printf("%d" , team[i] == 1 ? team[i] : 2);
   }

}

