#pragma comment(linker, "/stack:20000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>

#define f first
#define s second

#define pb push_back
#define pp pop_back
#define mp make_pair

#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define rep(i, l, r) for (int i = l; i <= r; i++)
#define per(i, l, r) for (int i = l; i >= r; i--)

#define dbg(x) cerr << (#x) << " --> " << (x) << nl;
#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

using namespace std;

#ifdef superset
  #include <ext/pb_ds/assoc_container.hpp>
  #include <ext/pb_ds/tree_policy.hpp>
  #include <ext/pb_ds/detail/standard_policies.hpp>

  using namespace __gnu_pbds;
  typedef tree < pair <int, int>, null_type, less < pair <int, int> >, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#endif

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const int N = 5e5 + 7, inf = 1e9 + 7, mod = 1e9 + 7;
const ll linf = (ll)1e18 + 7;
const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1}, dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

int get_int() {
  char x = getchar();
  bool mns = 0;
  while (!isdigit(x)) mns |= x == '-', x = getchar();
  int res = 0;
  while (isdigit(x)) res = res * 10 + x - '0', x = getchar();
  if (mns) res = -res;
  return res;
}
void add(int &x, int y) {
  x += y;
  if (x >= mod) x -= mod;
  if (x < 0) x += mod;
}
int mult(int x, int y) {
  return x * 1ll * y % mod;
}
int sum(int x, int y) {
  add(x, y);
  return x;
}

int n, m, S;
int w[N], c[N];
bool in[N];

ll cur[N];

vector < pair <int, int> > g[N];

struct edge {
  int v, to, id;
  bool operator < (const edge &x) {
    return w[id] < w[x.id];
  }
};
struct dsu {
  int p[N], lvl[N];
  void init() {
    rep(i, 1, n) p[i] = i, lvl[i] = 1;
  }
  int get(int v) {
    if (p[v] == v) return v;
    return p[v] = get(p[v]);
  }
  bool merge(int v, int u) {
    int pv = get(v), pu = get(u);
    if (pv == pu) return 0;
    if (rand() & 1) p[pv] = pu;
    else p[pu] = pv;
    return 1;
    if (lvl[pv] > lvl[pu]) p[pu] = pv;
    else if (lvl[pv] < lvl[pu]) p[pv] = pu;
    else p[pu] = pv, lvl[pv]++;
    return 1;
  }
} mot;

vector <edge> all;

int timer;
int tin[N], tout[N];
int up[N][20], mx[N][20];

int from[N];

void dfs(int v = 1, int p = 0) {
  tin[v] = ++timer;
  up[v][0] = p;
  rep(i, 1, 19) {
    if (up[v][i - 1]) {
      up[v][i] = up[up[v][i - 1]][i - 1];
      mx[v][i] = max(mx[v][i - 1], mx[up[v][i - 1]][i - 1]);
    }
  }
  for (auto to : g[v]) {
    if (to.f == p) continue;
    mx[to.f][0] = w[to.s];
    from[to.f] = to.s;
    dfs(to.f, v);
  }
  tout[v] = timer;
}
bool upper(int v, int u) {
  return tin[v] <= tin[u] && tout[u] <= tout[v];
}
int lca(int v, int u) {
  if (upper(v, u)) return v;
  if (upper(u, v)) return u;
  per(i, 19, 0) {
    if (up[v][i] && !upper(up[v][i], u)) v = up[v][i];
  }
  return up[v][0];
}
int get(int v, int u) {
  if (v == u) return 0;
  int res = 0;
  per(i, 19, 0)
    if (up[v][i] && !upper(up[v][i], u)) {
      res = max(res, mx[v][i]);
      v = up[v][i];
    }
  return max(mx[v][0], res);
}
void solve() {
  n = get_int(), m = get_int();
  rep(i, 1, m) w[i] = get_int();
  rep(i, 1, m) c[i] = get_int();
  rep(i, 1, m) {
    int v = get_int(), u = get_int();
    all.pb({v, u, i});
  }
  S = get_int();
  sort(all(all));
  mot.init();
  ll total = 0;
  for (auto to : all) {
    if (mot.merge(to.v, to.to)) {
      g[to.v].pb({to.to, to.id});
      g[to.to].pb({to.v, to.id});
      total += w[to.id];
      in[to.id] = 1;
    }
  }
  dfs();
  ll mn = linf, id = -1;
  int v = -1, u = -1, dw = -1;
  for (auto it : all) {
    if (in[it.id]) {
      cur[it.id] = total - S / c[it.id];
      if (cur[it.id] < mn) {
        mn = cur[it.id], v = it.v, u = it.to, id = it.id;
      }
    }
    else {
      int batya = lca(it.v, it.to), maxp = max(get(it.v, batya), get(it.to, batya));
      cur[it.id] = total - maxp + w[it.id] - S / c[it.id];
      if (cur[it.id] < mn) {
        mn = cur[it.id], v = it.v, u = it.to, id = it.id, dw = maxp;
      }
    }
  }
  if (!in[id]) {
    int del = 0, batya = lca(v, u);
    while (v != batya) {
      int cur = w[from[v]];
      if (cur == dw && !del) {
        del = 1, in[from[v]] = 0;
      }
      v = up[v][0];
    }
    while (u != batya) {
      int cur = w[from[u]];
      if (cur == dw && !del) {
        del = 1, in[from[u]] = 0;
      }
      u = up[u][0];
    }
    in[id] = 1;
  }
  w[id] -= S / c[id];
  printf ("%I64d\n", mn);
  rep(i, 1, m) {
    if (!in[i]) continue;
    printf ("%d %d\n", i, w[i]);
  }
}
int main() {
  #ifdef IOI2018
    #define Toktama ""
    freopen (Toktama".in", "r", stdin);
    //freopen (Toktama".out", "w", stdout);
  #endif
  srand(time(0));
  int T = 1;
  while (T--)
    solve();
  ioi
}
