#include <bits/stdc++.h>
using namespace std;

int a[505][505];
int b[505][505];

int v[505];
int w[505];
int vv[505];
int ww[505];

int main() {
	ios::sync_with_stdio(0);
	int n, m; cin >> n >> m;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++) {
			cin >> a[i][j];
			b[j][i] = a[i][j];
		}

	int ans = 0;
	for (int i = 0; i < n; i++) {
		int x = a[i][0];
		for (int j = 0; j < m; j++)
			x = min(x, a[i][j]);
		for (int j = 0; j < m; j++)
			v[j] = max(v[j], a[i][j] - x);
	}

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++) {
			a[i][j] -= v[j];
			if (a[i][j] < 0) {
				puts("-1");
				return 0;
			}
		}

	for (int i = 0; i < n; i++) {
		int x = a[i][0];
		for (int j = 0; j < m; j++)
			if (x != a[i][j]) {
				puts("-1");
				return 0;
			}
		w[i] = x;
	}

	for (int i = 0; i < n; i++)
		ans += w[i];
	for (int j = 0; j < m; j++)
		ans += v[j];



	swap(n, m);
	int anss = 0;
	for (int i = 0; i < n; i++) {
		int x = b[i][0];
		for (int j = 0; j < m; j++)
			x = min(x, b[i][j]);
		for (int j = 0; j < m; j++)
			vv[j] = max(vv[j], b[i][j] - x);
	}

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++) {
			b[i][j] -= vv[j];
			if (b[i][j] < 0) {
				puts("-1");
				return 0;
			}
		}

	for (int i = 0; i < n; i++) {
		int x = b[i][0];
		for (int j = 0; j < m; j++)
			if (x != b[i][j]) {
				puts("-1");
				return 0;
			}
		ww[i] = x;
	}

	for (int i = 0; i < n; i++)
		anss += ww[i];
	for (int j = 0; j < m; j++)
		anss += vv[j];


	if (ans <= anss) {
		swap(n, m);
	printf("%d\n", ans);
	for (int i = 0; i < n; i++)
		while (w[i] > 0)
			w[i]--, printf("row %d\n", i + 1);

	for (int j = 0; j < m; j++)
		while (v[j] > 0)
			v[j]--, printf("col %d\n", j + 1);

	}
	else {
		printf("%d\n", anss);
		for (int i = 0; i < n; i++)
			while (ww[i] > 0)
				ww[i]--, printf("col %d\n", i + 1);

		for (int j = 0; j < m; j++)
			while (vv[j] > 0)
				vv[j]--, printf("row %d\n", j + 1);
	}




	return 0;
}
