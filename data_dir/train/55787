
#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
#include <unordered_map>
#include <queue>
using namespace std;

#define FOR(i, a, b) for (int i = a; i <= b; ++i)
#define ROF(i, a, b) for (int i = b; i >= a; --i)

#define sz(a) (int)a.size()
#define mp make_pair

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pi;
typedef pair<ll, ll> pl;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;

const int INT_INF = (int)2e9;
const ll LL_INF = (ll)1e18;

template <typename T> int ckmin(T &a, T b) {
	if (a > b){
		a = b;
		return 1;
	}
	return 0;
}

template <typename T> int ckmax(T &a, T b){
	if (a < b){
		a = b;
		return 1;
	}
	return 0;
}

void setIO(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#endif
	ios::sync_with_stdio(0);
	cin.tie(0);
}

const int N = 3e5;
int d[N], n, m;
vi a[N], b[N], w;

int main (){
	setIO();

	cin >> n >> m;

	for (int i = 0; i < m; ++i){
		int u, v;
		cin >> u >> v;
		a[u].push_back(v);
		b[v].push_back(u);
	}

	fill(d, d + N, INT_INF);

	int sz;
	cin >> sz;
	w.resize(sz);

	for (int i = 0; i < sz; ++i) cin >> w[i];

	queue<int> q;
	q.push(w.back());
	d[w.back()] = 0;

	while (q.size()){
		int me = q.front();
		q.pop();
		for (int i = 0; i < sz(b[me]); ++i){
			int to = b[me][i];
			if (d[to] > d[me] + 1){
				d[to] = d[me] + 1;
				q.push(to);
			}
		}
	}

	int best=0, worst=0;
	for (int i = 0; i + 1 <sz; ++i){
		if (d[w[i+1]]+1!=d[w[i]]) best++;
		for (int j = 0; j < sz(a[w[i]]); ++j){
			int c = a[w[i]][j];
			if (c != w[i+1] && d[c] + 1 == d[w[i]]){
				worst++;
				break;
			}
		}
	}

	cout << best << " " << worst << "\n";

	return 0;
}