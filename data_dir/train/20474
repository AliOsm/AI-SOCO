#include <bits/stdc++.h>

using namespace std;

template<class T>
class monotonic_queue {
	queue<T> qu;
	deque<T> mx;

public:
	void push(T v) {
		qu.push(v);
		while (mx.size() && mx.back() < v) mx.pop_back();
		mx.push_back(v);
	}

	void pop() {
		if (mx.front() == qu.front()) mx.pop_front();
		qu.pop();
	}

	T max() {
		return mx.front();
	}

	int size() {
		return qu.size();
	}
};

const int N = 1e6 + 5;

int h, w, n;
monotonic_queue<int> q;
long long out[N], sum[N];

void update(int i) {
	sum[i] += (i + n <= w || i > n) ? max(0, q.max()) : q.max();

	if (i + n > w) {
		q.pop();
	}
}

void solve() {
	scanf("%d", &n);

	for (int i = 1; i <= n; ++i) {
		int a;
		scanf("%d", &a);
		q.push(a);
		update(i);
	}

	int l = n + 1, r = w - n + 1;

	if (l < r) {
		out[l] += max(0, q.max());
		out[r] -= max(0, q.max());
	}

	for (int i = w - q.size() + 1; i <= w; ++i) {
		update(i);
	}
}

int main() {
	cin >> h >> w;

	while (h--) {
		solve();
	}

	for (int i = 1; i <= w; ++i) {
		printf("%lld ", (out[i] += out[i - 1]) + sum[i]);
	}

	return 0;
}