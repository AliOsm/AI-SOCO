/////////////////////////   _LeMur_
#define _CRT_SECURE_NO_WARNINGS
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 1005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;
mt19937 myrand(chrono::steady_clock::now().time_since_epoch().count());

int n, m, qq;

bool a[N][N];
int d[N][N];

int dx[] = {1, -1, 0, 0};
int du[] = {0, 0, 1, -1};
queue < pair<int, int> > q;

int calc(bool val, bool rev) {
    if (rev) {
        if (val) return 0;
        return 1;
    }
    if (val) return 1;
    return 0;
}

int main() {
    cin >> n >> m >> qq;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            char val;
            scanf(" %c", &val);
            if (val == '1') {
                a[i][j] = true;
            } else {
                a[i][j] = false;
            }
            d[i][j] = -1;
        }
    }

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            for (int h = 0; h < 4; h++) {
                int nx = i + dx[h];
                int nu = j + du[h];
                if (nx < 1 || nu < 1 || nx > n || nu > m) continue;
                if (a[i][j] == a[nx][nu]) {
                    d[i][j] = 0;
                    q.push(make_pair(i, j));
                }
            }
        }
    }

    while (!q.empty()) {
        int x = q.front().first;
        int u = q.front().second;
        q.pop();
        for (int h = 0; h < 4; h++) {
            int nx = x + dx[h];
            int nu = u + du[h];
            if (nx < 1 || nu < 1 || nx > n || nu > m) continue;
            if (a[x][u] == a[nx][nu] || d[nx][nu] != -1) continue;
            d[nx][nu] = d[x][u] + 1;
            q.push(make_pair(nx, nu));
        }
    }

    while (qq--) {
        int x, u;
        long long p;
        scanf("%d%d%lld", &x, &u, &p);
        if (d[x][u] == -1 || p <= 1ll * d[x][u]) {
            printf("%d\n", calc(a[x][u], false));
        } else {
            if ((p - d[x][u]) % 2 == 0) {
                printf("%d\n", calc(a[x][u], false));
            } else {
                printf("%d\n", calc(a[x][u], true));
            }
        }
    }
    return 0;
}
