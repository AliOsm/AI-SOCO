///Foxi_Doree
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define gcd __gcd
#define time { ios::sync_with_stdio(0); ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); srand(time(0)); }

using namespace std;
using namespace __gnu_pbds;

//ifstream in("stdin.txt");
//ofstream out("stdout.txt");
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef pair < ll, ll > pll;
typedef pair < double, double > pdd;
typedef vector < ll > vll;
typedef set < ll > sll;
/*
    find_by_order()
    order_of_key()
*/
typedef tree <
ll, null_type,
less < ll >, rb_tree_tag,
tree_order_statistics_node_update > set_t;
const ll inf = 998244353, oo = 1e6 + 2, o = 4e5 + 2;
const ld E = 0.000001;

bool check(string a, string b, ll k)
{
    if(k == 1)
        return bool(a.substr(0, b.size()) == b);
    return bool(a.substr(a.size() - b.size(), a.size()) == b);
}

int main()
{
    time

    ll n, i, j;

    cin >> n;

    vector < vector < pair < string, ll > > > p;
    p.resize(n);
    for(i = 0; i < 2 * n - 2; ++i) {
        string a;
        cin >> a;
        p[a.size()].pb({a, i});
    }

    ll cnt = 0;
    vector < char > ans(o);
    bool access = true;
    while(cnt < 2) {
        string sp = p[n - 1][0].first;
        string sf = p[n - 1][1].first;
        ll t1 = p[n - 1][0].second;
        ll t2 = p[n - 1][1].second;
        ans[t1] = 'P';
        if(cnt == 1) {
            fill(ans.begin(), ans.begin() + 2 * n - 2, ' ');
            swap(sf, sp);
            swap(t1, t2);
            ans[t1] = 'P';
        }
        for(i = n - 2; i >= 1; --i) {
            for(j = 0; j < 2; ++j) {
                if(check(sp, p[i][j].first, 1) == true) {
                    ans[p[i][j].second] = 'P';
                    break;
                }
                else {
                    if(j == 1) access = false;
                }
            }
        }
        if(access == false) {
            ++cnt;
        }
        else {
            for(i = n - 2; i >= 1; --i) {
                for(j = 0; j < 2; ++j) {
                    if(ans[p[i][j].second] != 'P') {
                       if(check(sf, p[i][j].first, 2) == true) {
                           ans[p[i][j].second] = 'S';
                           break;
                       }
                       else {
                           if(j == 1) access = false;
                       }
                   }
               }
           }
           if(access == false) {
              ++cnt;
           }
           else break;
        }
    }

    for(i = 0; i < 2 * n - 2; ++i) {
        if(ans[i] != 'P') cout << 'S';
        else cout << ans[i];
    }
}
