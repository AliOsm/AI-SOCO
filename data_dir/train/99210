/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

const int N = 1e3 + 5;
int n, m, q, a[N][N];

inline int get_val(int u, int v, int x, int y) {
	return __builtin_popcount(u ^ v) & 1? (n - x) * (m - y) - a[x][y]: a[x][y];
}

inline long long calc(int x, int y) {
	if (x < 0 || y < 0)
		return 0;
	int id_x = x / n, id_y = y / m;
	long long ans = get_val(id_x, id_y, ++(x %= n), ++(y %= m));
	ans -= (id_y + 1LL) / 2 * (n - x) * m + (~id_y & 1) * get_val(id_x, id_y, x, 0);
	ans -= (id_x + 1LL) / 2 * n * (m - y) + (~id_x & 1) * get_val(id_x, id_y, 0, y);
	ans += (id_x + 1LL) * (id_y + 1) / 2 * n * m + (~id_x & ~id_y & 1) * get_val(id_x, id_y, 0, 0);
	return ans;
}

inline long long get(int x1, int y1, int x2, int y2) {
	return calc(x2, y2) - calc(x1 - 1, y2) - calc(x2, y1 - 1) + calc(x1 - 1, y1 - 1);
}

int main() {
	cin >> n >> m >> q;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++) {
			char x;
			cin >> x;
			a[i][j] = x - '0';
		}
	for (int i = n - 1; ~i; i--)
		for (int j = m - 1; ~j; j--)
			a[i][j] += a[i][j + 1] + a[i + 1][j] - a[i + 1][j + 1];
	while (q--) {
		int x1, y1, x2, y2;
		cin >> x1 >> y1 >> x2 >> y2;
		cout << get(--x1, --y1, --x2, --y2) << endl;
	}
}
