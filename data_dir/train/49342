/*
    Author: Nguyen Tan Bao
    Status:
    Idea:
*/
 
#include <bits/stdc++.h>
#define FI first
#define SE second
#define EPS 1e-9
#define ALL(a) a.begin(),a.end()
#define SZ(a) int((a).size())
#define MS(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
//__builtin_ffs(x) return 1 + index of least significant 1-bit of x
//__builtin_clz(x) return number of leading zeros of x
//__builtin_ctz(x) return number of trailing zeros of x
 
using namespace std;
using ll = long long;
using ld = double;
typedef pair<int, int> II;
typedef pair<II, int> III;
typedef complex<ld> cd;
typedef vector<cd> vcd;
 
const ll MODBASE = 1000000007LL;
const int MAXN = 110;
const int MAXM = 1000;
const int MAXK = 16;
const int MAXQ = 200010;

ll n, m, L, R;
ll MOD = 998244353;

ll binPowMod(ll a, ll b) {
    a %= MOD;
    ll res = 1;
    while (b > 0) {
        if (b & 1LL) res = res * a % MOD;
        a = a * a % MOD;
        b >>= 1LL;
    }
    return res;
}

ll add(ll a, ll b) {
    return (a + b) % MOD;
}

ll sub(ll a, ll b) {
    return (a - b + MOD) % MOD;
}

ll mul(ll a, ll b) {
    return a * b % MOD;
}

ll rev(ll a) {
    return binPowMod(a, MOD-2);
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(nullptr);
    cin >> n >> m >> L >> R;
    ll diff = R - L + 1;
    ll res = binPowMod(diff, n*m);
    if (n * m % 2 == 0) {
         if (diff % 2 == 0) {
            // chia 2
            cout << mul(res, rev(2));
        }
        else {
            int l = 1;
            if (L % 2 == 0) l = 0;
            if (n % 2 == 0) l = 0;
            if (m % 2 == 0) l = 0;
            if (n * m % 2) {
                if (l) {
                    // chia 2 + 1
                    cout << add(mul(sub(res, 1), rev(2)), 1);
                }
                else {
                    // chia 2 - 1
                    ll chan = add(mul(sub(res, 1), rev(2)), 1);
                    cout << sub(res, chan);
                }
            }
            else {
                if (l) {
                    // chia 2 - 1
                    ll le = add(mul(sub(res, 1), rev(2)), 1);
                    cout << sub(res, le);
                }
                else {
                    // chia 2 + 1
                    cout << add(mul(sub(res, 1), rev(2)), 1);
                }
            }
        }
    }
    else {
        cout << res << "\n";
    }
    return 0;
}
