#include <bits/stdc++.h>

#define long long long

using namespace std;

vector<int > w ;

vector<int> primes;
vector<int > isComposite;

void sieve(int N) {
    isComposite.assign( N + 1 , 0) ;

    isComposite[0] = isComposite[1] = 1;

    for (int i = 2; i <= N; ++i)
        if (isComposite[i] == 0) {
            primes.push_back(i);
            if (1ll * i * i <= N)
                for (int j = i * i; j <= N; j += i)
                    isComposite[j] = 1;
        }
}



int phi(int N)
{
    int ans = N, idx = 0, p = primes[0];
    while(1ll * p * p <= N)
    {
        if(N % p == 0)
            ans -= ans / p;
        while(N % p == 0)
            N /= p;
        p = primes[++idx];
    }

    if(N != 1)
        ans -= ans / N;
    return ans;
}

long modPow(long a, long e, long mod) {
    long ans = 1;
    while (e > 0) {
        if ((e & 1) != 0) {

            if (ans >= mod / a)
                ans = (ans * a) % mod + mod;
            else
                ans = (ans * a) ;
        }

        if(a  >= mod / a)
            a = (a * a) % mod + mod ;
        else
            a = (a * a) ;

        e >>= 1;
    }
    return (ans );
}

long tower( long mod , int l , int r)
{
    if(mod == 1 || l == r) return w[l] >= mod ? w[l] % mod + mod : w[l];

    long ans = 0;

    long x = tower(phi(mod), l + 1, r) ;

    ans = modPow(w[l], x  , mod) ; // a ^ (phi(m) + x mod phi(m))   mod m ->>// (phi(m) + x mod phi(m)) should be updated when x >= phi(m)

    return ans ;


}



int main()
{
    ios_base :: sync_with_stdio(false) , cin.tie(nullptr) , cout.tie(nullptr);
    sieve(int(1e7)) ;

    int n , m ;

    cin >> n >> m ;

    w.assign(n + 1 , 0) ;

    for(int i = 1 ; i <= n ; i++) cin >> w[i] ;

    int q ; cin >> q ;

    while(q--)
    {
        int l , r ; cin >> l >> r ;

        if(l == r)
            cout << w[l] % m << '\n';
        else
            cout << tower( m , l, r ) % m << '\n' ;

    }


    return 0 ;
}