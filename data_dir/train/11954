// CodeForces.cpp : Defines the entry point for the console application.
//

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;
typedef long long Long;
typedef pair<Long, Long> PLL;

struct Node
{
    int op, cl, sz;
    Node(int op=0,int cl=0,int sz=0){
        this->op = op;
        this->cl = cl;
        this->sz = sz;
    }
    Node operator+(const Node &N)
    {
        Node ret;
        ret.sz = sz + N.sz;
        ret.op = N.op + max(op - N.cl, 0);
        ret.cl = cl + max(N.cl - op,0);
        return ret;
    }
};

string S;
int N;
Node tree[4000010];
void create(int n = 1 ,int b = 0,int e = N-1)
{
    if (b == e)
    {
        tree[n] = Node( S[b] == '(', S[b] == ')', 1 );
    }
    else
    {
        create(2 * n, b, (b + e) / 2);
        create(2 * n + 1, (b + e) / 2 + 1, e);
        tree[n] = tree[2 * n] + tree[2 * n + 1];
    }
}

Node query(int l, int r, int n = 1, int b = 0, int e = N - 1)
{
    if (l <= b && e <= r)
        return tree[n];
    else if (e < l || r < b)
        return Node( 0, 0, 0 );
    else
    {
        return query(l, r, 2 * n, b, (b + e) / 2) +
            query(l, r, 2 * n + 1, (b + e) / 2 + 1, e);
    }

}

int main()
{
    cin >> S;
    N = S.size();
    create();
    int M;
    cin >> M;
    for (int i = 0; i < M; ++i)
    {
        int l, r;
        cin >> l >> r;
        l--; r--;
        Node a = query(l, r);
        cout << a.sz - a.op - a.cl << endl;
    }

}