// In the Name of Allah
#include <bits/stdc++.h>

using namespace std;

typedef long double LD;
typedef long long int LL;
typedef pair <int,int> pii;

#define L first
#define R second

const int maxn = 2e5 + 100, maxd = 200;
int dp[maxn][maxd], a[maxn], ans;
vector <int> adj[maxn], d[maxn];

int get(int val,int num) {
	return lower_bound(d[val].begin(), d[val].end(), num) - d[val].begin();
}

void dfs(int v,int par = -1) {
	for (int i = 1; i < d[a[v]].size(); i++)
		dp[v][i] = 1;

	vector <int> child[maxd];
	for (auto u : adj[v])
		if (u != par) {
			dfs(u, v);
			for (int i = 0; i < d[a[v]].size(); i++) {
				int val = __gcd(a[u], d[a[v]][i]);
				int idx = get(a[u], val);
				if (val != 1) {
					dp[v][i] = max(dp[v][i], dp[u][idx] + 1);
					child[i].push_back(dp[u][idx]);
				}
			}
		}

	for (int i = 0; i < d[a[v]].size(); i++) {
		sort (child[i].begin(), child[i].end());
		reverse(child[i].begin(), child[i].end());

		if (child[i].size() > 1)
			ans = max(ans, child[i][0] + child[i][1] + 1);
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);

	for (int i = 1; i < maxn; i++)
		for (int j = i; j < maxn; j += i)
			d[j].push_back(i);

	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	for (int i = 1; i < n; i++) {
		int v, u;
		cin >> v >> u;
		v--, u--;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs(0);
	for (int v = 0; v < n; v++)
		for (int i = 0; i < d[a[v]].size(); i++)
			ans = max(ans, dp[v][i]);
	cout << ans << endl;

	return 0;
}