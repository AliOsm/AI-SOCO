#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")

#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>
#include <random>
 
using namespace std;

inline bool can(vector<int> &v, vector<int> &a, vector<int> &b) {
    if (min({a[0], a[1], a[2]}) + min({b[0], b[1], b[2]}) < v[7]) {
        return false;
    }
    if (a[0] + b[0] < v[7] + v[1]) {
        return false;
    }
    if (a[1] + b[1] < v[7] + v[2]) {
        return false;
    }
    if (a[2] + b[2] < v[7] + v[4]) {
        return false;
    }
    return true;
}

void recover(vector<int> v, vector<int> a, vector<int> b, vector<int> &tk) {
    assert(can(v, a, b));
    tk[7] += min({a[0], a[1], a[2], v[7]}); 
    a[0] -= tk[7];
    a[1] -= tk[7];
    a[2] -= tk[7];
    tk[1] += min(a[0], v[1]);
    tk[2] += min(a[1], v[2]);
    tk[4] += min(a[2], v[4]);
}

void solve() {
    vector<int> a(3);
    for (auto &t : a) {
        cin >> t;
    }
    vector<int> b(3);
    for (auto &t : b) {
        cin >> t;
    }
    vector<int> v(8);
    //math prog pe
    cin >> v[7] >> v[3] >> v[5] >> v[1] >> v[6] >> v[2] >> v[4];
    for (int t3 = 0; t3 <= v[3]; t3++) {
        for (int t5 = 0; t5 <= v[5]; t5++) {
            for (int t6 = 0; t6 <= v[6]; t6++) {
                a[0] -= t3;
                a[1] -= t3;
                a[0] -= t5;
                a[2] -= t5;
                a[1] -= t6;
                a[2] -= t6;
                b[0] -= (v[3] - t3);
                b[1] -= (v[3] - t3);
                b[0] -= (v[5] - t5);
                b[2] -= (v[5] - t5);
                b[1] -= (v[6] - t6);
                b[2] -= (v[6] - t6);
                if (min({a[0], a[1], a[2]}) < 0 || min({b[0], b[1], b[2]}) < 0) {
                    //
                } else {
                    if (can(v, a, b)) {
                        vector<int> ans(8);
                        ans[3] = t3;
                        ans[5] = t5;
                        ans[6] = t6;
                        recover(v, a, b, ans);
                        cout << ans[7] << ' ' << ans[3] << ' ' << ans[5] << ' ' << ans[1] << ' ' << ans[6] << ' ' << ans[2] << ' ' << ans[4] << '\n';
                        return;   
                    }
                }
                a[0] += t3;
                a[1] += t3;
                a[0] += t5;
                a[2] += t5;
                a[1] += t6;
                a[2] += t6;
                b[0] += (v[3] - t3);
                b[1] += (v[3] - t3);
                b[0] += (v[5] - t5);
                b[2] += (v[5] - t5);
                b[1] += (v[6] - t6);
                b[2] += (v[6] - t6);
            }
        }
    }
    cout << -1 << '\n';
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    
    int q;
    cin >> q;
    while (q--) {
        solve();
    }
}
