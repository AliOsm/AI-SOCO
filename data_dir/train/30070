#include <bits/stdc++.h>

#define fore(i, l, r) for(int i = int(l); i < int(r); ++i)
#define forn(i, n) fore(i, 0, n)
#define nfor(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define for1(i, n) for(int i = 1; i < int(n); ++i)

#define mp make_pair
#define pb push_back
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define x first
#define y second

#define correct(x, y, xmax, ymax) ((x) >= 0 && (x) < (xmax) && (y) >= 0 && (y) < (ymax))
#define max(a, b) ((a > b)? a : b)
#define min(a, b) ((a < b)? a : b)
#define abs(a) ((a < 0) ? -a : a)
#define sqr(a) (a * a)

using namespace std;
    
template<class T> T gcd(T a, T b) { while(a > 0){ b %= a; swap(a, b);} return b; }
template<class T> T lcm(T a, T b) { return a / gcd (a, b) * b; }
template<class T> T sign(T a) { return a > 0 ? 1 : (a < 0 ? -1 : 0); }

template<class A, class B> ostream& operator <<(ostream &out, const pair<A, B> &p) {
    return out << "(" << p.x << ", " << p.y << ")";
};

template<class A> ostream& operator <<(ostream &out, const vector<A> &v) {
    out << "[";
    forn(i, sz(v)) {
        if(i)
            out << ", ";
        out << v[i];
    }
    return out << "]";
}

mt19937 myRand(time(NULL)); // [0, 2^32)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
typedef vector <int> vi;

const int dx[] = {-1, 0, 1,  0};
const int dy[] = { 0, 1, 0, -1};
const int dxK[] = {-1, -1, 0, 1, 1,  1,  0, -1};
const int dyK[] = { 0,  1, 1, 1, 0, -1, -1, -1};
const int dxKn[] = {-2, -1, 1, 2,  2,  1, -1, -2};
const int dyKn[] = { 1,  2, 2, 1, -1, -2, -2, -1};

const int INF = int(1e9) + 100;
const li INF64 = li(1e18) + 100;
const ld EPS = 1e-9;
const ld PI = acosl(-1.0);
const int N = 100 * 1000 + 9;

int n, k;
vector <int> rb[N];

inline bool read() {
    if(!(cin >> n >> k))
    	return false;
    forn(i, n){
    	int x, r, iq;
    	cin >> x >> r >> iq;
    	rb[i] = {x, r, iq};
    } 
    return true;
}

vector <int> pf[N];
vector <int> iqs;
vector <int> f[N];

void upd(vector <int> &f, int pos){
	for(; pos < sz(f); pos |= pos + 1)
		++f[pos];
}

int get(vector <int> &f, int r){
	int res = 0;
	for(; r >= 0; r = (r & (r + 1)) - 1)
		res += f[r];
	return res;
}

int get(vector <int> &f, int l, int r){
	return get(f, r) - (l == 0? 0 : get(f, l - 1));
}

bool cmp(const vector <int> &a, const vector <int> &b){
	return a[1] > b[1];
}

inline void solve() {
	forn(i, n) iqs.pb(rb[i][2]);
	sort(all(iqs));
	iqs.erase(unique(all(iqs)), iqs.end());
	forn(i, n)
		rb[i][2] = int(lower_bound(all(iqs), rb[i][2]) - iqs.begin());
	
	forn(i, n)
		pf[rb[i][2]].pb(rb[i][0]);
	forn(id, n){
		sort(all(pf[id]));
		pf[id].erase(unique(all(pf[id])), pf[id].end());
		f[id].resize(sz(pf[id]));
	}
	
	li res = 0;
	sort(rb, rb + n, cmp);
	forn(i, n){
		auto r = rb[i];
		for(int iq = iqs[r[2]] - k; iq <= iqs[r[2]] + k; ++iq){
			int pos = int(lower_bound(all(iqs), iq) - iqs.begin());
			if(pos == sz(iqs) || iqs[pos] != iq) continue;
			int lf = r[0] - r[1], rg = r[0] + r[1];
			int L = int(lower_bound(all(pf[pos]), lf) - pf[pos].begin());
			int R = int(upper_bound(all(pf[pos]), rg) - pf[pos].begin());
			--R;
			if(L <= R)
				res += get(f[pos], L, R);			
		}
		
		int iq = rb[i][2];
		int pos = int(lower_bound(all(pf[iq]), rb[i][0]) - pf[iq].begin());
		upd(f[iq], pos);
	}
	
	cout << res << endl;
}

int main() {
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    int tt = clock();
#endif
    cout << fixed << setprecision(15);
    cerr << fixed << setprecision(15);

	ios_base::sync_with_stdio(false);
    cin.tie(NULL);    
    
    int tc = 1;
	//cin >> tc;
    while(tc--) {
    	read();
        solve();

#ifdef _DEBUG
        cerr << "TIME = " << clock() - tt << endl;
        tt = clock();
#endif
    }

    return 0;
}