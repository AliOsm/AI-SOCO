#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

//template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)((x).size())
#define pb push_back
#define T first
#define P second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
#define debug(x) cerr << #x << " : " << (x) << endl
const double PI = 3.14159265358979323846;
const double eps = (1e-10);
int isGreater(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}
const int H = 21, MAX_N = (1<<21) + 5;
// node info
int a[MAX_N], canDelete[MAX_N];
int g, h;

vector<int> active, out;
void clear()
{
    for (int i = 1; i <= ((1<<h) - 1) * 2 + 1; ++i)
    {
        a[i] = 0;
        canDelete[i] = 0;
    }

    out.clear();
    active.clear();
}

void preCanDelete(int u, int countDelete)
{
    if (a[u] == 0)
        return;
    canDelete[u] = countDelete;
    preCanDelete(2 * u, countDelete/2);
    preCanDelete(2 * u + 1, countDelete/2);
}

int getGo(int u)
{
    if (a[2 * u] > a[2 * u + 1])
        return 2 * u;
    return 2 * u + 1;
}

bool can(int u)
{
    if (a[u] == 0)
        return true;
    if (canDelete[u] == 0)
    {
        active.pop_back();
        return false;
    }
    int go = getGo(u);
    if (!can(go))
    {
        active.push_back(go^1);
        return false;
    }
    return true;
}

void updateChildren(int u)
{
    int go = getGo(u);
    canDelete[u]--;
    if (a[go] == 0)
        a[u] = 0;
    else
    {
        a[u] = a[go];
        updateChildren(go);
    }
}

void _main()
{
    cin >> h >> g;
    clear();
    long long sum = 0;
    for (int i = 1; i < (1<<h); ++i)
    {
        cin >> a[i];
        sum += a[i];
    }
    int countDelete = (1<<h) - (1<<g);
    preCanDelete(1, countDelete);
    active.push_back(1);

    while(!active.empty())
    {
        int u = active.back();
        if (can(u))
        {
            sum -= a[u];
            updateChildren(u);
            out.push_back(u);
        }
    }

    cout << sum << '\n';
    for (int item : out)
        cout << item << " ";
    cout << '\n';
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("AC.txt", "w", stdout);
#endif
    int tc;
    cin >> tc;
    while(tc--)
        _main();
    return 0;
}