#include <bits/stdc++.h>
#define pb push_back

using namespace std;
using ll = long long int;
const int MOD = 1e9 + 7;

const int N = 105;

int main()
{
	ios::sync_with_stdio(0); cin.tie(0);
	int n; cin >> n;
	int a[n], p[n], nxt[n];
	int prev = -1;
	int even = n/2, odd = n-n/2;
	for (int i = 0; i < n; ++i)
	{
		cin >> a[i];
		if (a[i]) {a[i] %= 2; prev = a[i]; if (a[i]) --odd; else --even;}
		else {a[i] = 2; p[i] = prev;}
	}
	if (n == 1)
	{
		cout << 0;
		return 0;
	}
	if (even + odd == n)
	{
		cout << 1;
		return 0;
	}
	prev = -1;
	for (int i = n-1; i >= 0; --i)
	{
		if (a[i] < 2) prev = a[i];
		else nxt[i] = prev;
	}
	vector<int> Even, Odd;
	int ans = 0;
	int pref = 0, suf = 0;
	for (int i = 0; i < n; ++i)
	{
		if (a[i] < 2)
		{
			if (i+1 < n and a[i+1] < 2 and a[i] != a[i+1]) ++ans;
			continue;
		}
		int j = i;
		while (j < n and a[j] == 2) ++j;
		if (nxt[i] == 0 and p[i] == 0) Even.pb(j-i);
		else if (nxt[i] == 1 and p[i] == 1) Odd.pb(j-i);
		else if (nxt[i] + p[i] == 1) ++ans;
		if (i == 0) pref = j-i;
		if (j == n) suf = j-i;
		i = j-1;
	}
	sort(begin(Even), end(Even)); reverse(begin(Even), end(Even));
	sort(begin(Odd), end(Odd)); reverse(begin(Odd), end(Odd));
	while (even and !Even.empty())
	{
		if (even < Even.back()) break;
		even -= Even.back();
		Even.pop_back();
	}
	while (odd and !Odd.empty())
	{
		if (odd < Odd.back()) break;
		odd -= Odd.back();
		Odd.pop_back();
	}
	if (pref and suf)
	{
		if (nxt[0] == p[n-1])
		{
			if (pref > suf) swap(pref, suf);
			if (nxt[0] == 0)
			{
				if (even < pref) ans += 2;
				else if (even < pref + suf) ++ans;
			}
			else
			{
				if (odd < pref) ans += 2;
				else if (odd < pref + suf) ++ans;
			}
		}
		else
		{
			if (nxt[0] == 1) swap(pref, suf);
			if (even < pref) ++ans;
			if (odd < suf) ++ans;
		}
	}
	else
	{
		if (pref)
		{
			if (nxt[0] == 0 and even < pref) ++ans;
			if (nxt[0] == 1 and odd < pref) ++ans;
		}
		if (suf)
		{
			if (p[n-1] == 0 and even < suf) ++ans;
			if (p[n-1] == 1 and odd < suf) ++ans;
		}
	}
	ans += 2*(Even.size() + Odd.size());
	cout << ans;
}