#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, c;
int a[200200], b[200200];
int pr[200200];
int dp[200200];

int main(){

    scanf("%d%d", &n, &c);
    for (int i = 0; i < n - 1; i++) scanf("%d", a + i);
    for (int i = 0; i < n - 1; i++) scanf("%d", b + i);
    pr[0] = b[0];
    for (int i = 1; i < n - 1; i++) pr[i] = b[i] + pr[i - 1];

    // dp[i] = dp[i - 1] + a[i - 1]
    // dp[i] = dp[j] + c + pr[i - 1] - pr[j - 1]     j < i

    dp[0] = 0;
    int mx = 0;
    for (int i = 1; i < n; i++) {
        dp[i] = dp[i - 1] + a[i - 1];
        dp[i] = min(dp[i], mx + c + pr[i - 1]);
        mx = min(mx, dp[i] - pr[i - 1]);
    }

    for (int i = 0; i < n; i++) {
        if (i) printf(" ");
        printf("%d", dp[i]);
    }
    printf("\n");

    return 0;
}
