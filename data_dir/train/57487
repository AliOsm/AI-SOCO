#include <iostream>
#include <cmath>
#include <cstdlib>

using namespace std;

const int limit=1000000;

void minimize(int &a,int b)
{
  a=min(a,b);
}

int absolut(int x)
{
  if (x<0) return -x;
  return x;
}

struct point {
  int x,y;
  point() {x=y=0;}
  point(int x,int y):x(x),y(y) {}
};

int absolut(point p)
{
  return absolut(p.x)+absolut(p.y);
}

point operator-(point p1,point p2)
{
  return point(p1.x-p2.x,p1.y-p2.y);
}

int dist(point p1,point p2)
{
  return absolut(p1-p2);
}

point operator+(point p1,point p2)
{
  return point(p1.x+p2.x,p1.y+p2.y);
}

int n;
point positions[limit];
point pfin;

bool can(int i,int j)
{
  return dist(positions[n]-positions[j]+positions[i-1],pfin)<=j-i+1;
}

int main()
{
  ios::sync_with_stdio(false);
  cin>>n;
  for (int i=1;i<=n;i++) {
    char c;
    cin>>c;
    if (c=='R') positions[i]=positions[i-1]+point(1,0);
    if (c=='L') positions[i]=positions[i-1]+point(-1,0);
    if (c=='U') positions[i]=positions[i-1]+point(0,1);
    if (c=='D') positions[i]=positions[i-1]+point(0,-1);
  }
  cin>>pfin.x>>pfin.y;
  if (n%2!=(absolut(pfin.x)+absolut(pfin.y))%2) {
    cout<<-1<<endl;
    exit(0);
  }
  if (dist(positions[0],pfin)>n) {
    cout<<-1<<endl;
    exit(0);
  }
  int sol=n;
  if (dist(positions[n],pfin)==0) sol=0;
  int j=1;
  for (int i=1;i<=n;i++) {
    if (not can(i,n)) break;
    j=max(j,i);
    while (not can(i,j)) j++;
    minimize(sol,j-i+1);
  }
  cout<<sol<<endl;
}
