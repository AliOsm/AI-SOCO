#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 

#define ll long long

#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) memset(ar, val, sizeof(ar))
#define fill0(ar) fill((ar), 0)
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;
typedef vector<int> vi;

#define INF 1000000000000000000
#define PI 3.14159265358979323846L

ll dp[250100];

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll n,m;
    cin >> n >> m;

    ll k;
    cin >> k;
    ll tot = 0;

    string s[n];

    fr(i,1,25000)
    {
    	dp[i] = INF;
    }

    rep(i,n)
    {
    	cin >> s[i];
    	
    	ll num = 0;
    	vector<ll> places;

    	rep(j,m)
    	{
    		if(s[i][j]=='1')
    		{
    			places.pb(j);
    			num++;
    		}
    	}

    	ll hours = 0;
    	if(num==0)
    		continue;

    	hours = places[places.size()-1]-places[0]+1;
    	
    	// dp[0] += hours;

    	ll attend[num+1];
    	attend[0] = 0;
    	fr(j,1,num)
    		attend[j] = INF;

    	fr(j,1,num)
    	{
    		rep(kk,places.size())
    		{
    			if(kk+j-1>=places.size())
    				break;
    			ll ind = kk+j-1;
    			attend[j] = min(attend[j],places[ind]-places[kk]+1);
    		}
    	}

    	frr(j,k,0)
    	{
    		ll xx = dp[j] + attend[num];
    		fr(kk,0,num)
    		{
    			if(kk>j)
    				break;
    			xx = min(xx,dp[j-kk]+attend[num-kk]);
    		}
    		dp[j] = xx;
    	}

    }

    fr(i,1,k)
    {
    	dp[i] = min(dp[i],dp[i-1]);
    }

    cout << dp[k] << endl;
}
