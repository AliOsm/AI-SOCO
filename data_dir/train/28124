#include <bits/stdc++.h>

using namespace std;

int btree[2*100005*3];
int arr[2*100005];
vector<int> ind[2*100005];
int n;

void update(int node,int l,int r,int ind)
{
	if(ind<l||ind>r) return;
	if(l==r)
	{
		btree[node]++;
		return;
	}
	int mid=(l+r)/2;
	update(node*2,l,mid,ind);
	update(node*2+1,mid+1,r,ind);
	btree[node]=btree[node*2]+btree[node*2+1];
}

int query(int node,int l,int r,int ql,int qr)
{
	if(qr<l||r<ql) return 0;
	if(ql<=l&&r<=qr) return btree[node];
	int mid=(l+r)/2;
	return query(node*2,l,mid,ql,qr)+query(node*2+1,mid+1,r,ql,qr);
}

int main()
{
	cin >> n;
	for(int i=1;i<=n;i++)
	{
		cin >> arr[i];
		arr[i]=min(arr[i],n);
		ind[arr[i]].push_back(i);
	}
	long long ans=0;
	for(int i=n;i>=1;i--)
	{
		for(int j=0;j<ind[i].size();j++)
		{
			update(1,0,n+1,ind[i][j]);
		}
		ans+=query(1,0,n+1,1,arr[i]);
		if(arr[i]>=i) ans--;
	}
	cout << ans/2 << endl;
}