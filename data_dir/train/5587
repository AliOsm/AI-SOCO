// We only fail when we stop trying
#include <bits/stdc++.h>
#define X first
#define Y second
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
using namespace std;
typedef long long ll;
const int mod = (int) 1e9 + 7;
const int oo = (int) 1e9;

const int N = 1e5 + 1;

int n, q;
int arr[N];
int st[N*4];
map<int, vector<int> > pos;

void build(int cur, int s, int e)
{
  if(s == e){
    st[cur] = arr[s];
    return;
  }
  int l = 2 * cur + 1;
  int r = 2 * cur + 2;
  int mid = (s+e)/2;
  build(l, s, mid);
  build(r, mid+1, e);
  st[cur] = __gcd(st[l], st[r]);
}

int get(int cur, int s, int e, int i, int j)
{
  if(s > j || e < i)
    return 0;
  if(s >= i && e <= j)
    return st[cur];
  int l = 2 * cur + 1;
  int r = 2 * cur + 2;
  int mid = (s+e)/2;
  return __gcd(get(l, s, mid, i, j), get(r, mid+1, e, i, j));
}

int calc(int i, int j, int val)
{
  vector<int>& v = pos[val];
  int f = lower_bound(all(v), i) - v.begin();
  int s = lower_bound(all(v), j+1) - v.begin();
  return s - f;
}

int main()
{
  scanf("%d", &n);
  for(int i = 0 ; i < n ; i++){
    scanf("%d", &arr[i]);
    pos[arr[i]].pb(i);
  }
  build(0, 0, n-1);
  scanf("%d", &q);
  while(q--){
    int l, r;
    scanf("%d%d", &l, &r);
    int g = get(0, 0, n-1, --l, --r);
    printf("%d\n", r-l+1 - calc(l, r, g));
  }
  return 0;
}
