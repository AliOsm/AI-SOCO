/////////////////////////   _LeMur_
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 1000005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;

struct line{
    long long k , b;
    line(long long _k , long long _b){
        k = _k;
        b = _b;
    }
};

int n;

int x[N] , u[N];
long long a[N];

pair <int,int> p[N];
long long dp[N];

vector < line > mas;

void add(long long k,long long b){
    line p = line(k , b);
    while((int)mas.size() > 1){
        line p1 = mas[(int)mas.size() - 1];
        line p2 = mas[(int)mas.size() - 2];
        if((long double)(p.b - p2.b) / (p2.k - p.k) < (long double)(p1.b - p2.b) / (p2.k - p1.k))
            mas.pop_back();
        else
            break;
    }
    mas.push_back(p);
}

int pos;

long long get(long long x){
    pos = min(pos , (int)mas.size() - 1);
    while(pos < (int)mas.size() - 1){
        line a = mas[pos];
        line b = mas[pos + 1];
        long long q = b.k - a.k;
        long long p = a.b - b.b;
        if((long double) p / q <= x)
            ++pos;
        else
            break;
    }
    return mas[pos].k * x + mas[pos].b;
}

int main(){
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
        scanf("%d%d%lld",&x[i],&u[i],&a[i]);
        p[i] = make_pair(x[i] , i);
    }
    sort(p + 1 , p + n + 1);
    add(0 , 0);
    long long answ = 0;
    for(int i=1;i<=n;i++){
        int id = p[i].second;
        dp[i] = get(-u[id]) + x[id] * 1ll * u[id] - a[id];
        add(x[id] , dp[i]);
        answ = max(answ , dp[i]);
    }
    cout<<answ<<endl;
    return 0;
}
