#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;

//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/rope>
//using namespace __gnu_pbds;
//using namespace __gnu_cxx;
//
//template<class T> using Tree = tree<T, null_type, less<T>, rb_t_tag,t_order_statistics_node_update>;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;
//const long long mod = 998244353;
mt19937 rng((int) chrono::steady_clock::now().time_since_epoch().count());

// watch this
//using ll = long long;
//typedef long long LL;
#define ll long long
#undef ll

const int mxN = 100010;

vector<int> at[mxN];
int idx[mxN];

int N;
int diff(int a, int b) {
	int res = a + N - b;
	if (res > N)
		res -= N;
	return res;
}

int main(int argc, char** argv) {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
//	freopen("highways.in", "r", stdin);
//	freopen("highways.out", "w", stdout);
#endif

	int M, a, b;
	cin >> N >> M;
	for (int i = 0; i < M; i++) {
		cin >> a >> b;
		at[a].push_back(b);
	}
	for (int i = 1; i <= N; i++) {
		sort(begin(at[i]), end(at[i]), [&](int f,int s) {
			return diff(f, i) > diff(s, i);
		});
	}
	for (int s = 1; s <= N; s++) {
		set<int> hv;
		for (int i = 1; i <= N; i++) {
			idx[i] = 0;
			if (!at[i].empty())
				hv.insert(hv.end(), i);
		}
		int id = s;
		int to = 0;
		int res = 0;
		while (!hv.empty()) {
			if (id == to)
				to = 0;
			if (idx[id] < (int) at[id].size()) {
				int cto = at[id][idx[id]++];
				if ((int) at[id].size() == idx[id])
					hv.erase(id);
				if (!to || diff(cto, id) > diff(to, id)) {
					to = cto;
				}
			}
			if (!hv.empty()) {
				auto it = hv.upper_bound(id);
				if (it == hv.end())
					it = hv.begin();
				if (*it != id) {
					if (to && diff(*it, id) >= diff(to, id))
						to = 0;
					res += diff(*it, id);
					id = *it;
				} else {
					to = 0;
					res += N;
				}
			}
		}
		if (to) {
			res += diff(to, id);
		}
		cout << res << '\n';
	}
	return 0;
}
