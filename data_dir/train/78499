#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
using namespace std;
typedef long long mt;
#define rep(a, b, i) for(register mt i = a; i < b; ++i)
#define repe(a, b, i) for(register mt i = a; i <= b; ++i)
#define repd(a, b, i) for(register mt i = a; i > b; --i)
#define repde(a, b, i) for(register mt i = a; i >= b; --i)

#define N 100010
#define K 510
#define M (2000010)
#define INF 10000000000000007//1e16 + 7
#define MOD 998244353ll //1000000007//1e9 + 7
#define EPS 1e-9

mt n, m, k;
bool used[N];
mt c[K];
mt a[K][K];
vector<pair<mt, mt>> g[N];
mt group[N];

bool ok = true;

mt parent[N], dsize[N];

void make_set(mt v) 
{
	parent[v] = v;
	dsize[v] = 1;
}

mt find_set(mt v) 
{
	if (parent[v] == v)
		return v;
	return parent[v] = find_set(parent[v]);
}

void union_set(mt v, mt u) 
{
	mt a = find_set(v);
	mt b = find_set(u);
	if (a != b) {
		if (dsize[a] < dsize[b])
			swap(a, b);
		parent[b] = a;
		dsize[a] += dsize[b];
	}
}

int main()
{
#ifdef _DEBUG	
	freopen("in.txt", "r", stdin);
#endif
	scanf("%I64d %I64d %I64d", &n, &m, &k);
	repe(1, n, i)
		make_set(i);
	rep(0, k, i)
		rep(0, k, j)
			a[i][j] = INF;
	mt pg = 0;
	rep(0, k, i)
		scanf("%I64d", c + i), a[i][i] = 0ll, pg += c[i], group[pg + 1] = 1;
	rep(1, N, i)
		group[i] += group[i - 1];
	while (m--) 
	{
		mt u, v, x;
		scanf("%I64d %I64d %I64d", &u, &v, &x);
		mt i = group[u], j = group[v];

		if(i != j) 
			a[i][j] = a[j][i] = min(a[i][j], x);

		if(!x) 
			union_set(u, v);
	}
	mt l = 1, r = 0;
	
	rep(0, k, i) {
		r += c[i];
		repe(l, r, j)
			if (find_set(l) != find_set(j))
				ok = false;
		l += c[i];
	}
	rep(0, k, s) {
		rep(0, k, i)
			rep(0, k, j)
			if (a[i][s] < INF && a[s][j] < INF)
				a[i][j] = min(a[i][j], a[i][s] + a[s][j]);
	}

	if (ok) {
		puts("Yes");
		rep(0, k, i) {
			rep(0, k, j) {
				printf("%I64d ", a[i][j] == INF ? (-1ll) : a[i][j]);
			}
			putc('\n', stdout);
		}
	}
	else
		puts("No");
	return 0;
}