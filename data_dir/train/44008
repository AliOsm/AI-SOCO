#include <bits/stdc++.h>
#define int long long
using namespace std;

const int N = 2e5 + 7;

vector <pair <int, int> > adj[N];

multiset <int> a;

int limit;

unordered_map <int, int> dis;

void dijkstra(int s, int k) {
        dis.clear();
        set < pair <int, int> > PQ;
        PQ.insert({0, s}); dis[s] = 0;
        while(k > 0 && !PQ.empty()) {
                if(PQ.begin() -> second > s) {
                        --k;
                        if(a.size() >= limit && *a.rbegin() <= PQ.begin() -> first)
                                break;
                        a.insert(PQ.begin() -> first);
                }
                int v = PQ.begin() -> second; PQ.erase(PQ.begin());
                for(auto x: adj[v]) {
                        if(!dis.count(x.first) || dis[x.first] > dis[v] + x.second) {
                                if(dis.count(x.first))
                                        PQ.erase({dis[x.first], x.first});
                                dis[x.first] = dis[v] + x.second;
                                PQ.insert({dis[x.first], x.first});
                        }
                }
        }
}

int32_t main() {
        ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0);
        int n, m, k; cin >> n >> m >> k; limit = k;
        vector < tuple <int, int, int> > t;
        for(int i = 1; i <= m; i++) {
                int u, v, w; cin >> u >> v >> w; t.push_back(make_tuple(w, u, v));
//                adj[u].push_back({v, w});
//                adj[v].push_back({u, w});
        }
        sort(t.begin(), t.end());
        for(int i = 0; i < t.size() && i < k; i++) {
                int u, v, w; tie(w, u, v) = t[i];
                    adj[u].push_back({v, w});
                    adj[v].push_back({u, w});

        }
        for(int i = 1; i <= n; i++) dijkstra(i, k);--k;
        while(k--) {
                a.erase(a.begin());
        }
        cout << *a.begin() << endl;
}
