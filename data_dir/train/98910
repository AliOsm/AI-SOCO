#include <bits/stdc++.h>
#include <tr1/unordered_map>

using namespace std;
vector < int > v ;
tr1::unordered_map <int, bool> freq;
int f[200001] , s[200001] ;
void add (int x )
{
    if (!freq[x]) v.push_back(x);
    if (!freq[x - 1]) v.push_back(x - 1);
    if (!freq[x + 1]) v.push_back(x+1);
    freq[x] = true  ,  freq[x+1] = true ,  freq[x-1] = true;
}
int Binary_Search(int a[] , int start , int e , int k )
{
    int mid , res = 0 ;
    while (start <= e)
    {
        int mid = ( start + e ) / 2  ;
        if (a[mid] <= k)
            start = mid ;
        else if (a[mid] > k )
            e = mid ;
        if (start + 1 >= e)
        {
            if (a[e] <= k )
                res = e ;
            else if (a[start] > k )
                res = start - 1 ;
            else res = start ;
            break ;
        }
    }
    return res ;
}
int main()
{
    long long scoreA = 0 , scoreB = 0 , mx = -987654321  , pA  = 0, pB = 0 ;
    int n , m ;
    cin >> n ;
    for (int i = 0 ; i <  n ; i++ )
    {
        cin >> f[i] ;
        add(f[i]);
    }
    cin >> m ;
    for (int i = 0 ; i < m; i++ )
    {
        cin >> s[i] ;
        add(s[i]);
    }
    sort(f,f+n) ;
    sort(s,s+m) ;
    int d ;
    for (int i = 0 ; i < v.size() ; i++ )
    {
        pA = Binary_Search(f,0,n-1,v[i]) ;
        pB = Binary_Search(s,0,m-1,v[i]) ;
        long long  nwA = (pA+1) * 2 + (n - (pA+1)) * 3 ,
        nwB = (pB+1) * 2 + (m - (pB+1)) * 3 ,
        gap =  nwA - nwB ;
        if ( gap > mx || (gap == mx && nwA > scoreA) )
        {
            scoreA = nwA , scoreB = nwB , mx = gap  , d = v[i];
        }
    }
    cout << scoreA << ':' << scoreB ;
}
