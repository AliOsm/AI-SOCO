#include <bits/stdc++.h>

using namespace std;
const int N = 1e6 + 3;
bool isPrime[N];
vector<int> primes;
void sieve() {
	fill(isPrime, isPrime + N, 1);
	for (int i = 2; i < N; ++i) {
		if (!isPrime[i])
			continue;
		primes.push_back(i);
		if (1LL * i * i < N)
			for (int j = i * i; j < N; j += i)
				isPrime[j] = false;
	}
}
int deg[N];
int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif
	sieve();
	int n;
	scanf("%d", &n);
	int edges = -1;
	for (int i = n; i <= n * (n - 1) / 2; ++i) {
		if (isPrime[i]) {
			edges = i;
			break;
		}
	}
	printf("%d\n", edges);
	edges *= 2;
	for (int i = 1; i <= n; ++i) {
		deg[i] += 2;
		edges -= 2;
	}
	for (int i = 1; i <= n && edges; ++i) {
		++deg[i];
		--edges;
	}
	priority_queue<pair<int, int>> pq;
	for (int i = 1; i <= n; ++i)
		pq.push({deg[i], i});
	assert(edges == 0);
	while (pq.size()) {
		auto cur = pq.top();
		pq.pop();
		vector<pair<int, int>> nxt;
		while (cur.first) {
			auto p = pq.top();
			pq.pop();
			printf("%d %d\n", cur.second, p.second);
			++edges;
			--cur.first;
			if (--p.first)
				nxt.push_back(p);
		}
		for (auto p: nxt)
			pq.push(p);
	}
	assert(isPrime[edges]);
	return 0;
}
