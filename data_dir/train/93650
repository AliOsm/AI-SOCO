#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma comment(linker, "/stack:200000000")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;     
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;

template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
}

const int MAXN = 31;
multiset<int> setik[MAXN];
ll sum[MAXN];

void add(int x) {
    for (int i = 0; i < MAXN; ++i) {
        if (x >= (1 << i) && (i + 1 == MAXN || x < (1 << (i + 1)))) {
            setik[i].insert(x);
            sum[i] += x;
            break;
        }
    }
}

void del(int x) {
    for (int i = 0; i < MAXN; ++i) {
        if (x >= (1 << i) && (i + 1 == MAXN || x < (1 << (i + 1)))) {
            setik[i].erase(setik[i].lower_bound(x));
            sum[i] -= x;
            break;
        }
    }
}

int solve() {
    int ans = 0;
    ll s = 0;
    for (int i = 0; i < MAXN; ++i) {
        if (*setik[i].begin() > 2 * s) {
            ans++;
        }
        s += sum[i];
    }
    return ans;
}

signed main() {
    FAST_IO();
    int n = 0;
    int q;
    cin >> q;
    while (q--) {
        char t;
        int x;
        cin >> t >> x;
        if (t == '+') {
            add(x);
            n++;
        }
        else {
            del(x);
            n--;
        }
        cout << n - solve() << '\n';
    }
    return 0;
}