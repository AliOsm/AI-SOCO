#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;

#define endl '\n'
#define ff first
#define ss second
#define int long long
#define pb push_back
#define f(i,l,r) for(ll i=l;i<=r;i++)
#define rf(i,r,l) for(ll i=r;i>=l;i--)
#define Max 1000001
#define inf 2147483647
#define llinf 9223372036854775807
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcount(n)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)

#define d1(a) cout<<a<<endl;
#define d2(a,b) cout<<a<<' '<<b<<endl;
#define d3(a,b,c) cout<<a<<' '<<b<<' '<<c<<endl;
#define d4(a,b,c,d) cout<<a<<' '<<b<<' '<<c<<' '<<d<<endl;
#define d5(a,b,c,d,e) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<endl;

const ll N=5e2+5,mod=1e9+7,bit=61;

struct dat
{
    ll l,r,len;
};

dat dp[N][N];
bool v[N][N];
ll a[N],n;

dat solve(ll l,ll r)
{
    if(l==r)
    {
        dat ans;
        ans.l=a[l];
        ans.r=a[r];
        ans.len=1;
        return ans;
    }
    if(v[l][r])
    {
        return dp[l][r];
    }
    v[l][r]=1;
    dat &ans=dp[l][r];
    ans.len=r-l+1;
    ans.l=a[l];
    ans.r=a[r];
    for(ll mid=l;mid+1<=r;mid++)
    {
        dat lans=solve(l,mid);
        dat rans=solve(mid+1,r);
        dat cans;
        cans.len=lans.len+rans.len-(lans.r==rans.l);
        if(cans.len<ans.len)
        {
            ans.len=cans.len;
            ans.l=lans.l;
            ans.r=rans.r;
            if(lans.len==1 and  lans.r==rans.l)
            {
                ans.l++;
            }
            if(rans.len==1 and lans.l==rans.l)
            {
                ans.r++;
            }
        }
    }
    return ans;
}

signed main()
{
    fast;

    ll t=1;
    //cin>>t;
    while(t--)
    {
        cin>>n;
        f(i,1,n)
        {
            cin>>a[i];
        }
        memset(v,0,sizeof(v));
        cout<<solve(1,n).len<<endl;
    }
    return 0;
}




















