/*
    NO 
        TIME 
            TO 
                DIE
                    --007
                            */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli mod=1e9+7;
#define OS //single input use oeis
lli INF=1e17;
lli eps=1e-8;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,z,k,x,m,d,y,q,b,c;
const double pi=3.14159265358979323846;
lli add(lli a, lli b) {
 	lli res = a + b;
 
 	while (res >= mod) res -= mod;
 
 	while (res < 0) res += mod;
 
 	return res;
}
 lli me(lli a,lli b)
{
    lli res=1;
    while(b)
    {
        if(b&1)
        res=(res%mod*a%mod)%mod;
        a=a*a;
        a%=mod;
        b=b>>1;
    }
    return res;
}
lli mI(lli a)
{
    return (me(a,mod-2)%mod+mod)%mod;
}
int main()
{
 IO;
 OS;
 lli t;
 cin>>t;
 for(int i=1;i<=t;i++)
 {
     cin>>n;
     lli a[n+1];
     for(int j=1;j<=n;j++)
     cin>>a[j];
     lli start=1;
     lli end=n;
     
     
     lli sum=0;
     lli cnt=0;
     lli vis[n+1];
     mem1(vis,0);
    //  lli k=a[1];
    vector<lli> vv;
     for(int j=start;j<=end;j++)
     {
         if(a[j]==-1)
         {
             if(j>1&&a[j-1]>=0&&vis[j-1]==0)
             vv.push_back(a[j-1]),cnt++,vis[j-1]=1;
             if(j<n&&a[j+1]>=0&&vis[j+1]==0)
             vv.push_back(a[j+1]),cnt++,vis[j+1]=1;
         }
     }
     sort(vv.begin(),vv.end());
    //  cout<<vv.size()<<"\n";
    if(vv.size())
    {
        lli val =(vv[0]+vv[vv.size()-1])/2ll;
        lli mi=0;
        for(int i=1;i<=n;i++)
        {
            if(a[i]==-1)
            a[i]=val;
            if(i>1)
            mi=max(mi,(lli)abs(a[i]-a[i-1]));
        }
        cout<<mi<<" "<<val<<"\n";
    }
    else
    cout<<0<<" "<<0<<"\n";
 }
}