#pragma GCC target("avx2")
#pragma GCC optimize("O3")
   
#include <x86intrin.h>
#include <bits/stdc++.h>   
 
using namespace std;
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)3e5 + 123;
const ll inf = (ll)1e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, k, t[4 * N], add[4 * N], ans, dp[N];
vector <int> v;
char s[N];

inline void push (int v, int tl, int tr) {
   if (add[v] == inf) return;
   t[v] = min (t[v], add[v]);
   if (tl != tr) {
      add[v + v] = min (add[v + v], add[v]);
      add[v + v + 1] = min (add[v + v + 1], add[v]);
   }
   add[v] = inf;

}

void upd (int l, int r, int val, int v = 1, int tl = 0, int tr = n) {
   push (v, tl, tr);
   if (tl > r || tr < l) return;
   if (l <= tl && tr <= r) {
      add[v] = val;
      push (v, tl, tr);
      return;
   }
   int tm = tl + tr >> 1;
   upd (l, r, val, v + v, tl, tm);
   upd (l, r, val, v + v + 1, tm + 1, tr);
   t[v] = min (t[v + v], t[v + v + 1]);
}

void build (int v = 1, int tl = 0, int tr = n) {
   if (tl == tr) {
      if (tl == 0) t[v] = 0;
      else t[v] = inf;
      return;
   }
   int tm = tl + tr >> 1;
   build (v + v, tl, tm);
   build (v + v + 1, tm + 1, tr);
   t[v] = min (t[v + v], t[v + v + 1]);
}

int get (int l, int r, int v = 1, int tl = 0, int tr = n) {
   push (v, tl, tr);
   if (tl > r || tr < l) return inf;
   if (l <= tl && tr <= r) return t[v];
   int tm = tl + tr >> 1;
   return min (get (l, r, v + v, tl, tm), get (l, r, v + v + 1, tm + 1, tr));
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> n >> k >> s + 1;
   for (int i = 1; i < 4 * N; i ++) add[i] = inf;
   build ();
   for (int i = 1; i <= n; i ++) {
      upd (i, i, get (i - 1, i - 1) + i);
      if (s[i] == '1') {
         int l = max (1ll, i - k), r = min (n, i + k);
         upd (i, r, get (l - 1, i - 1) + i);
      }
   }
   cout << get (n, n);
}

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
   //cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
                          