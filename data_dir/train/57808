#include<bits/stdc++.h>
using namespace std;
//#define endl '\n'
#define dbg(x) cout << #x << ": " << x << endl
const long long oo = 1000000007LL;

int get_m(pair<int,int> a, pair<int,int> b) {
  int y = a.first - b.first;
  int x = a.second - b.second;
  if(abs(x) == abs(y)) return 1;
  if(x == 0 || y == 0) return 2;
  return 0;
}

int get_dir(pair<int,int> a, pair<int,int> b) {
  int y = a.first - b.first;
  int x = a.second - b.second;
  if (abs(x) == abs(y)) {
    if(x < 0 && y < 0) return 1;
    if(x > 0 && y < 0) return 3;
    if(x < 0 && y > 0) return 7;
    if(x > 0 && y > 0) return 5;
  }
  if (x == 0 || y == 0) {
    if (x == 0) {
      if (y < 0) return 2;
      else return 6;
    }else{
      if (x < 0) return 0;
      else return 4;
    }
  }
  return 0;
}

double get_dist(pair<int,int> a, pair<int,int> b) {
  double x = a.first - b.first;
  double y = a.second - b.second;
  return sqrt(x * x + y * y);
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  int n;
  long long x, y, xt, yt;
  char c;
  while (cin >> n >> x >> y) {
    pair<long long, long long> in(x, y), tm;
    vector<double> dist(8, oo * oo);
    vector<pair<long long, long long> > possible[8];
    for (int i = 0; i < n; i++) {
      cin >> c >> tm.first >> tm.second;
      int m = get_m(in, tm);
      //cout << m << endl;
      if (m) {
        int dir = get_dir(in, tm);
        if (c == 'R') {
          if (m == 1) dist[dir] = min(dist[dir], get_dist(tm, in));
          if (m == 2) possible[dir].push_back(tm);
        }
        else if(c== 'B') {
          if (m == 2) dist[dir] = min(dist[dir], get_dist(tm, in));
          if (m == 1) possible[dir].push_back(tm);
        }else{
          possible[dir].push_back(tm);
        }
      }
    }
    bool ok = false;
    for (int i = 0; i < 8 && !ok; i++) {
      for (int j = 0; j < possible[i].size() && !ok; j++) {
        if(get_dist(possible[i][j], in) < dist[i]) ok = true;
      }
    }
    cout << (ok ? "YES" : "NO") << endl;
  }
}