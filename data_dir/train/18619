#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma comment(linker, "/STACK:2000000")

#include "bits/stdc++.h"

using namespace std;

template<int D, typename T>
struct Vec : public vector<Vec<D - 1, T>> {
  static_assert(D >= 1, "Vector dimension must be greater than zero!");
  template<typename... Args>
  Vec(int n = 0, Args... args) : vector<Vec<D - 1, T>>(n, Vec<D - 1, T>(args...)) {
  }
};
template<typename T>
struct Vec<1, T> : public vector<T> {
  Vec(int n = 0, T val = T()) : vector<T>(n, val) {
  }
};

#define pb push_back
#define F first
#define S second
#define f(i,a,b)  for(int i = a; i < b; i++)
// #define endl '\n'
using ll = long long;
using db = long double;
using ii = pair<int, int>;

const int N = 2e6+5, LG = 19, MOD = 998244353;
const int SQ =320;
const long double EPS = 1e-7;
int a[305][305];
int n, m, q;
int dx[] = {-1,1,0,0};
int dy[] = {0,0,-1,1};
bool in(int x, int y){
  return 0 <= x && x < n && 0 <= y && y < m;
}
int p[305 * 305];
int r[305 * 305];
int get(int i){
  return p[i] == i ? i : p[i] = get(p[i]);
}
bool mrg(int u, int v){
  u = get(u);
  v = get(v);
  if(u == v)return false;
  if(r[u] < r[v])swap(u,v);
  p[v] = u;
  r[u] += r[v];
  return true;
}
vector<ii> add[N], del[N];
int ans[N];
void solve(const vector<ii> & evs, int c){
  f(i,0,n)  f(j,0,m)  a[i][j] = 0;
  f(i,0,n * m)p[i] = i, r[i] = 1;
  for(auto p : evs){
    int cur = 1;
    int x = p.F / m;
    int y = p.F % m;
    a[x][y] = 1;
    f(k,0,4){
      int nx = dx[k] + x;
      int ny = y + dy[k];
      if(in(nx,ny) && a[nx][ny] == 1)
        cur -= mrg(x*m+y,nx*m+ny);
    }
    ans[p.S] += cur * c;
  }

}
int32_t main(){
#ifdef ONLINE_JUDGE
    ios_base::sync_with_stdio(0);
    cin.tie(0);
#endif // ONLINE_JUDGE

  cin >> n >> m >> q;

  int cnt = 0;

  f(i,0, q){
    int x, y, c;
    cin >> x >> y >> c;
    --x, --y;
    if(a[x][y] != c){
      cnt = c + 1;
      add[c].pb(ii(x * m + y, i));
      del[a[x][y]].pb(ii(x * m + y, i));
      a[x][y] = c;
    }
  }

  f(i,0,n)
    f(j,0,m)
      del[a[i][j]].pb(ii(i * m + j, q));

  f(i,0,cnt)
    reverse(del[i].begin(), del[i].end());

  f(i,0,cnt)solve(add[i], 1);
  f(i,0,cnt)solve(del[i], -1);

  ans[0]++;
  f(i,0,q){
    if(i)ans[i] += ans[i-1];
    cout << ans[i] << '\n';
  }


  return 0;
}
