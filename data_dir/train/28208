//Solution by Tima
#include <bits/stdc++.h>
 
#define f first
#define s second
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define vi vector <int>
#define ld long double
#define pii pair<int, int>
#define y1 sda
 
using namespace std;    
const int N = int(3e3) + 12, mod = int(1e9)  + 7; 
 
int n, sz[N],pr[N], ls[N], len[N], mx[N], c[N][N], d[N][N];

ll dp[N][N];
 
vector <int> g[N];

vector <pair<int,int> > e[N];
 
void dfs(int v,int p,int l){
	sz[v] = 1;
	len[v] = l;
	for(int to : g[v]){
		if(to == p) continue;
		if(p == -1) pr[to] = to;
		else pr[to] = pr[v];
		dfs(to,v,l + 1);
		sz[v] += sz[to];
	}
}
 
int main () {
	scanf("%d", &n);
 
	for(int i = 1,u,v; i < n; i++){
		scanf("%d%d", &u, &v);
		g[u].pb(v);
		g[v].pb(u);
	}
 
	for(int i = 1; i <= n; i++){
		dfs(i,-1,0);
		for(int j = 1; j <= n; j++) if(j != i){
			c[i][j] = sz[j] * (n - sz[pr[j]]);
			if(i < j) e[len[j]].pb(mp(i,j));
			d[i][j] = len[j];
		}
	}
	ll ans = 0;
	for(int i = 1; i <= n; i++){
		for(auto p : e[i]){
			int u = p.f, v = p.s;
			ll res = 0;
			for(int to : g[u]){
				if(d[to][v] < d[u][v]){
					res = max(res, dp[to][v] + c[u][v]);
				}
			}
			for(int to : g[v]){
				if(d[to][u] < d[u][v]){
					res = max(res, dp[to][u] + c[u][v]);
				}
			}
			dp[v][u] = dp[u][v] = res;
			ans = max(ans, res);
		}
	}
	cout << ans;
 
 
 
return 0;
}