#include<bits/stdc++.h>
#define P(x,y) make_pair(x,y)
using namespace std;
const int MX=(1<<20);
int n;
bool lucky(int x){
    while(x>0){
        if(x%10 != 4 && x%10 != 7) return 0;
        x/=10;
    }
    return 1;
}
map < int , set < int > > where;
int get(int x){
    if(where[x].empty()) return -1;
    int p = *where[x].begin();
    where[x].erase(where[x].begin());
    return p;
}
int arr[MX] , sorted[MX];
int main(){
    scanf("%d",&n);
    int luck = -1 , spec;
    for(int j=1;j<=n;j++){
        scanf("%d",&arr[j]);
        where[arr[j]].insert(j);
        sorted[j] = arr[j];
        if(lucky(arr[j])) luck = j;
    }
    sort(sorted+1 , sorted+1+n);
    bool all = 1;
    for(int j=1;j<=n;j++) all&=(arr[j] == sorted[j]);
    if(luck == -1){
        if(all) puts("0");
        else puts("-1");
        return 0;
    }
    spec = arr[luck];
    vector < pair < int , int > > sol;
    for(int j=1;j<=n;j++){
        if(arr[j] == sorted[j]) continue;
        vector < int > cycle;
        cycle.push_back(j);
        where[arr[j]].erase(j);
        int cur = j , in = -1;
        if(lucky(arr[j])) in = 0;
        while(1){
            int nxt = get(sorted[cur]);
            if(nxt == -1) break;
            cycle.push_back(nxt);
            if(lucky(arr[nxt])) in = cycle.size();
            cur = nxt;
        }
     //   for(auto pp : cycle) cout<<pp<<' '; cout<<endl;
        bool ujds =0;
        if(count(cycle.begin() , cycle.end() , luck)) ujds = 1;
        if(in == -1)
            sol.push_back(P(luck , cycle[0]));
        else if(in) rotate(cycle.begin() , cycle.begin() + in -1 , cycle.end());
        for(int j = 0 ; j + 1 < cycle.size() ; j++){
            sol.push_back(P(cycle[j] , cycle[j+1]));
            swap(arr[cycle[j]] , arr[cycle[j+1]]);
        }
        if(in == -1)
            sol.push_back(P(luck , cycle.back()));
        if(ujds)
            for(auto pp : cycle)
                if(arr[pp] == spec)
                    luck = pp;
    }
    cout<<sol.size()<<endl;
    for(auto pp : sol)
        cout<<pp.first<<' '<<pp.second<<endl;
    //for(int j=1;j<=n;j++)
     //   cout<<arr[j]<<' '; cout<<endl;
}

