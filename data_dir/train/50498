#include <iostream>
#include <stdio.h>
#include <string>
#include <memory.h>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <time.h>
#include <assert.h>
#include <cmath>
#include <stack>
#include <string.h>
#include <sstream>
#include <algorithm>
using namespace std;
typedef long long ll;
const int N = 200003*6;
vector<int> mp;
int n;
int l[N], r[N];
vector<int>  in[N];
int main()
{
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i) {
		scanf("%d%d", l + i, r + i);
		mp.push_back(l[i]);
		mp.push_back(r[i]);
		mp.push_back(l[i] - 1);
		mp.push_back(l[i] + 1);
		mp.push_back(r[i] - 1);
		mp.push_back(r[i] + 1);
	}
	sort(mp.begin(), mp.end());
	mp.resize(unique(mp.begin(), mp.end()) - mp.begin());
	for (int i = 1; i <= n; ++i) {
		l[i] = lower_bound(mp.begin(), mp.end(), l[i]) - mp.begin();
		r[i] = lower_bound(mp.begin(), mp.end(), r[i]) - mp.begin();
		in[l[i]].push_back(i);
		in[r[i] + 1].push_back(-i);
	}
	vector<bool> bad(n + 1);
	set<int> q;
	for (int i = 0; i < mp.size(); ++i) {
		for (auto &x : in[i]) {
			if (x < 0)
				q.erase(-x);
			else
				q.insert(x);
		}
		if (q.size() == 1)
			bad[*q.begin()] = true;
	}
	for(int i=1;i<=n;++i)
		if (!bad[i]) {
			printf("%d\n", i);
			return 0;
		}
	puts("-1");
	return 0;
}