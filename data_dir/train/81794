#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

typedef tree<int, null_type, less<int>, rb_tree_tag,
        tree_order_statistics_node_update>
        new_data_set;

#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define PSET(x,y) fixed<<setprecision(y)<<x
#define pb push_back
#define pf push_front
#define pii pair<int,int>
#define mp make_pair
#define vi vector<int>
#define vip vector<pair<int,int> >
#define ff first
#define ss second
#define int long long
#define SIZE 200010
#define mod 1000000007
#define BIG 998244353
#define s(t) scanf("%d",&t)
#define p(t) printf("%d\n",t)
#define mii map<int,int>
#define MSET(table,i) memset(table, i, sizeof(table))
#define endl '\n'
#define tc int t;cin>>t;while(t--)
#define pi  3.1415926358
#define print(x) for(auto el: x) cout<<el<<" ";cout<<endl
#define bits(x) __builtin_popcount(x)
#define minimum(a,n) min_element(a,a+n)-a
#define maximum(a,n) max_element(a,a+n)-a
#define pqbig priority_queue<int>
#define pqsmall priority_queue<int,vector<int>,greater<int> >
#define all(v) v.begin(),v.end()
#define sitr set<int>:: iterator
#define mitr map<int,int>:: iterator

#define trace1(x)                cerr<<#x<<": "<<x<<endl
#define trace2(x, y)             cerr<<#x<<": "<<x<<" | "<<#y<<": "<<y<<endl
#define trace3(x, y, z)          cerr<<#x<<":" <<x<<" | "<<#y<<": "<<y<<" | "<<#z<<": "<<z<<endl
#define trace4(a, b, c, d)       cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<endl
#define trace5(a, b, c, d, e)    cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<endl
#define trace6(a, b, c, d, e, f) cerr<<#a<<": "<<a<<" | "<<#b<<": "<<b<<" | "<<#c<<": "<<c<<" | "<<#d<<": "<<d<<" | "<<#e<< ": "<<e<<" | "<<#f<<": "<<f<<endl

const int N=2e5+5;
int st[4*N];
int arr[N];
int n;

void build(int l,int r,int node)
{
    if(l==r)
    {
        st[node]=l;
        return;
    }
    int mid=(l+r)/2;
    build(l,mid,2*node);
    build(mid+1,r,2*node+1);
    st[node]=st[2*node]+st[2*node+1];
}

int query(int l,int r,int start,int end,int node)
{
    if(l>end or start>r or start>end)
        return 0;

    if(start<=l and end>=r)
        return st[node];

    int mid=(l+r)/2;
    int p1=query(l,mid,start,end,2*node);
    int p2=query(mid+1,r,start,end,2*node+1);

    return p1+p2;
}

void update(int l,int r,int id,int node)
{
    if(l==r)
    {
        st[node]=0;
        return;
    }
    int mid=(l+r)/2;
    if(id>=l and id<=mid)
        update(l,mid,id,2*node);
    else
        update(mid+1,r,id,2*node+1);

    st[node]=st[2*node]+st[2*node+1];
}

int32_t main()
{
    fast;
    cin>>n;
    for(int i=1;i<=n;i++)
        cin>>arr[i];

    build(1,n,1);
    vi v;
    for(int i=n;i>=1;i--)
    {
        int l=1,r=n;
        int ans=0;
        while(l<=r)
        {
            int mid=(l+r)/2;
            int val=query(1,n,1,mid,1);
            //trace3(i,val,mid);
            if(val<=arr[i])
                ans=mid,l=mid+1;
            else
                r=mid-1;
        }
        v.pb(ans+1);
        update(1,n,ans+1,1);
    }

    reverse(all(v));
    for(int i=0;i<v.size();i++)
        cout<<v[i]<<' ';

}