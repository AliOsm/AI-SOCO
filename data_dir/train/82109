#include <iostream>
#include <set>
#include <stack>
using namespace std;
int n, m, ans;
set<int> graph[105];
bool used[105];
stack<pair<int, int>> stor;
int dfs(int v){
    used[v] = true;
    for (auto it: graph[v]){
        int cur = it;
        if (used[cur] == false){
            dfs(cur);
        }
    }
    for (auto it: graph[v]){
        int cur = it;
        if (graph[cur].size() == 1){
            stor.push({v, cur});
        }
    }
}
int main(){
    cin>>n>>m;
    for (int i=1; i<=m; i++){
        int from, to;
        cin>>from>>to;
        graph[from].insert(to);
        graph[to].insert(from);
    }
    for (int i=1; i<=m; i++){
        for (int j=1; j<=n; j++){
            used[j] = false;
        }
        for (int j=1; j<=n; j++){
            if (used[j] == false){
                dfs(j);
            }
        }
        if (stor.empty()){
            break;
        }
        if (!stor.empty()){
            ans++;
        }
        while (!stor.empty()){
            int from = stor.top().first;
            int to = stor.top().second;
            graph[from].erase(to);
            graph[to].erase(from);
            stor.pop();
        }
    }
    cout<<ans;
}