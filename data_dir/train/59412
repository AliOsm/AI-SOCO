#include<bits/stdc++.h>
#define N 1000005
using namespace std;
int n,ata[N],val[N],top,dp[N];
vector<int> nnn,v[N];
void yaz(int x,int y) {

	printf("%d %d",x,y);
	exit(0);
	
}
int dfs(int node) {
	
	int ret=0;
	for(int i=0;i<v[node].size();i++) 
		ret+=dfs(v[node][i]);
	return dp[node]=ret+val[node];
	
}
void dfs1(int node) {

	if(dp[node]==top/3*2) {
		nnn.push_back(node);
	}
	for(int i=0;i<v[node].size();i++) {
		dfs1(v[node][i]);
	}
	if(dp[node]==top/3) {
		for(int i=0;i<nnn.size();i++) {
			yaz(nnn[i],node);
		}
	}
	
	if(dp[node]==top/3*2) {
		nnn.pop_back();
	}
	
}
int dfs2(int node) {

	vector<int> now;
	for(int i=0;i<v[node].size();i++) {
		int ret=dfs2(v[node][i]);
		if(~ret) {
			now.push_back(ret);
		}
	}
	if(now.size()>=2) {
		yaz(now[0],now[1]);
	}
	if(now.size()==1) {
		return now[0];
	}
	if(dp[node]==top/3) {
		return node;
	}
	return -1;
	
}
int main() {
	
	scanf("%d",&n);
	for(int i=1;i<=n;i++) {
		scanf("%d %d",&ata[i],&val[i]);
		top+=val[i];
		v[ata[i]].push_back(i);
	}
	if(top%3) {
		printf("-1");
		return 0;
	}
	dfs(0);
	if(top) 
	    dfs1(0);
	dfs2(0);
	printf("-1");
}