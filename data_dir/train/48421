#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <cstdlib>
#include <memory>
#include <queue>
#include <cassert>
#include <cmath>
#include <ctime>
#include <complex>
#include <bitset>

using namespace std;

#define pb push_back
#define fst first
#define snd second
#define mp make_pair 
#define sz(C) ((int) (C).size())
#define forn(i, n) for (int i = 0; i < (int) n; ++i)
#define ford(i, n) for (int i = ((int) n) - 1; i >= 0; --i)
#define y1 gftxdtrtfhyjfctrxujkvbhyjice
#define y0 ehfoiuvhefroerferjhfjkehfjke
#define left sdhfsjkshdjkfsdfgkqqweqweh
#define right yytrwtretywretwreytwreytwr
#define next jskdfksdhfjkdsjksdjkgf
#define prev koeuigrihjdkjdfj
#define hash kjfdkljkdhgjdkfhgurehg
#define all(C) begin(C), end(C)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;
typedef vector <ll> vll;
typedef vector <int> vi;
typedef vector <vector <int> > vvi;
typedef vector <pii> vii;
typedef long double ld;
typedef complex<double> cd;
typedef vector<cd> vcd;

#define FILE_NAME ""

const ld EPS = 1e-9;
const int MAXN = 50 + 10;

char a[2*MAXN][2*MAXN];
bool bad[2*MAXN][2*MAXN];
int n;

char res[2*MAXN][2*MAXN];

int main() {
#ifdef LOCAL
  freopen(FILE_NAME ".in", "r", stdin);
//  freopen(FILE_NAME ".out", "w", stdout);
#endif

  scanf("%d\n", &n);
  forn(i, n) {
    gets(a[i]);
  }

  forn(i, n) forn(j, n)
    if  (a[i][j] == 'o') {
      forn(ii, n) forn(jj, n) {
        if  (a[ii][jj] == '.') {
          int dx = jj - j;
          int dy = ii - i;
          bad[dx + MAXN][dy + MAXN] = true;
        }
      }
    }

  forn(i, 2 * n - 1) forn(j, 2 * n - 1) res[i][j] = '.';

  forn(i, n) forn(j, n) {
    if  (a[i][j] != 'x') {
      continue;
    }

    bool ok = false;

    forn(ii, n) forn(jj, n) {
      if  (a[ii][jj] != 'o') {
        continue;
      }
      int dx = j - jj;
      int dy = i - ii;
      if  (!bad[dx + MAXN][dy + MAXN]) {
        ok = true;
        res[n - 1 + dy][n - 1 + dx] = 'x';
      }
    }

    if  (!ok) {
      puts("NO");
      return 0;
    }
  }

  puts("YES");
  res[n - 1][n - 1] = 'o';
  forn(i, 2 * n - 1) {
    forn(j, 2 * n - 1) {
      putchar(res[i][j]);
    }     
    puts("");
  }

  return 0;
}
