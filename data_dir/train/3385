#include <bits/stdc++.h>

using namespace std;

int n;
vector<int> p;

vector<int> mul(vector<int> a, vector<int> b) {
  vector<int> c(a.size());
  for (int i = 0; i < n; ++i) {
    c[i] = b[a[i]];
  }
  return c;
}

vector<int> pwr(int x) {
  if (x == 1) {
    return p;
  }
  auto a = pwr(x / 2);
  a = mul(a, a);
  if (x & 1) {
    a = mul(a, p);
  }
  return a;
}

void solve() {
  cin >> n;
  vector<int> c(n);
  p.resize(n);
  for (int i = 0; i < n; ++i) {
    cin >> p[i];
    --p[i];
  }
  for (int i = 0; i < n; ++i) {
    cin >> c[i];
  }
  vector<int> par(n, -1);
  int ans = 1e9;
  function<void(int)> dfs = [&](int v) {
    int u = p[v];
    if (par[u] == -1) {
      par[u] = v;
      dfs(u);
    } else {
      int w = v;
      vector<int> kek;
      while (true) {
        kek.push_back(w);
        if (w == u) {
          break;
        }
        w = par[w];
      }
      int nn = kek.size();
      for (int i = 1; i <= nn; ++i) {
        if (nn % i) {
          continue;
        }
        for (int j = 0; j < i; ++j) {
          bool ok = true;
          for (int k = j; k < nn; k += i) {
            ok &= c[kek[k]] == c[kek[j]];
          }
          if (ok) {
            ans = min(ans, i);
          }
        }
      }
    }
  };
  for (int i = 0; i < n; ++i) {
    if (par[i] == -1) {
      par[i] = i;
      dfs(i);
    }
  }
  cout << ans;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);

  int t;
  cin >> t;
  while (t--) {
    solve();
    cout << '\n';
  }

  return 0;
}
