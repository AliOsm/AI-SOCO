#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <memory.h>
#pragma comment (linker, "/STACK:167177216")
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define vI vector<int>
#define vvI vector<vector<int>>
#define vLL vector<LL>
#define vS vector<string>
#define fori(i, n) for(int (i)=0; (i)<n; (i)++)
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
#define forI(tmp) for(auto(it)=(tmp).begin();(it)!=(tmp).end();(it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%d", &(a))
#define scLL(a) scanf("%I64d", &(a))
const ull mod = 1000000007;
int Inf = (int)2e9;
using namespace std;

vector<pair<int, int>> dist;
int n, m;
vector<string> a;
int mx = -1;
int dp[15][111];

int rec(int idx, int idy)
{
	if (idx == mx)
	{
		if (idy == 0)
			return dist[idx].second;
		else
			return idy - dist[idx].first;
	}
	if (dp[idx][idy] != -1)
		return dp[idx][idy];
	int tmp = Inf;
	if (idy == 0)
	{
		tmp = min(tmp, rec(idx - 1, m + 1) + m + 1);
		if (dist[idx].first == 0)
		{
			tmp = min(rec(idx - 1, idy), tmp);
		}
		else
		{
			tmp = min(tmp, rec(idx - 1, 0) + 2 * dist[idx].second);
		}
	}
	else
	{
		tmp = min(tmp, rec(idx - 1, 0) + m + 1);
		if (dist[idx].first == 0)
		{
			tmp = min(tmp, rec(idx - 1, idy));
		}
		else
		{
			tmp = min(tmp, rec(idx - 1, idy) + 2 * (idy - dist[idx].first));
		}
	}
	return dp[idx][idy] = tmp;
}
int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif 
	memset(dp, -1, sizeof(dp));
	cin >> n >> m;
	a.resize(n);
	dist.resize(n);
	fori(i, n)
	{
		cin >> a[i];
		int l = 0, r = m + 1;
		for (int j = 0; j < m + 2; j++)
		{
			if (a[i][j] == '1')
			{
				if (l == 0)
				{
					l = j;
				}
				r = j;
			}
		}
		if (l != 0)
		{
			if (mx == -1)
				mx = i;
		}
		dist[i].first = l;
		dist[i].second = r;
	}
	if (mx == -1)
	{
		cout << 0;
		exit(0);
	}
	int ans = rec(n - 1, 0);
	cout << rec(n - 1, 0) + n - mx - 1;



	return 0;
}