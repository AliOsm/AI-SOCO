#include <bits/stdc++.h>
#include <variant>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef unsigned char ubyte;

const ld EPS = 1e-9;
const ld PI = acos(-1.0);
const int INF = (int)1e9 + 5;
const ll LINF = (ll)1e18 + 5;

bool eq(ld a, ld b) {
	return fabs(a - b) < EPS;
}

template<class T>
T sqr(const T & x) { return x * x; }

template<class T> 
ll abs(const T & x) { return x < 0 ? -x : x; }

template<class T>
ll myround(const T & x) { return x < 0 ? x - 0.5 : x + 0.5; }

template<class T> 
bool chmin(T & x, const T & y) {
	if (y < x) {
		x = y;
		return true;
	}
	return false;
}

template<class T>
ostream & operator <<(ostream & os, const vector<T> & v) {
	os << "{";
	for (typename vector<T>::const_iterator it = v.begin(); it != v.end(); ++it) {
		os << *it;
		if ((it + 1) != v.end()) os << ", ";
	}
	os << "}";
	return os;
}

template<class P, class Q>
ostream & operator <<(ostream & os, const pair<P, Q> & p) {
	return os << "(" << p.first << ", " << p.second << ")";
}

template<class T> 
bool chmax(T & x, const T & y) {
	if (x < y) {
		x = y;
		return true;
	}
	return false;
}

template<class IntegerType = int>
IntegerType nextInt() {
	IntegerType x = 0;
	bool p = false;
	char c;
	do {
		c = getchar();
	} while (c <= 32);
	if (c == '-') {
		p = true;
		c = getchar();
	}
	while (c >= '0' && c <= '9') {
		x = x * 10 + c - '0';
		c = getchar();
	}
	return (p ? -x : x);
}

string nextToken() {
  static constexpr size_t MAX_LEN = 500500;
  static char str[MAX_LEN];
  scanf("%s", str);
  return str;
}

template<class... Ts> struct overloaded : Ts... { using Ts::operator()...; };
template<class... Ts> overloaded(Ts...) -> overloaded<Ts...>;

#define all(a) (a).begin(), (a).end()

const int N = (int)1e5 + 5;

vector<int> g[N];
bool used[N];
int cnt = 0;

void dfs(int v) {
	used[v] = true;
	cnt++;
	for (int to : g[v]) {
		if (!used[to]) {
			dfs(to);
		}
	}
}

int main() {
#ifdef LOCAL
  freopen("input.txt", "r", stdin);
#endif

	int n = nextInt();
	int k = nextInt();

	for (int i = 0; i < k; i++) {
		int x, y;
		x = nextInt();
		y = nextInt();
		g[x].push_back(y);
		g[y].push_back(x);
	}

	int satisfied = 0;

	for (int v = 0; v < n; v++) {
		if (!used[v]) {
			cnt = 0;
			dfs(v);
			satisfied += cnt - 1;
		}
	}

	cout << k - satisfied << endl;

}
