#include <bits/stdc++.h>
#define pb push_back
#define inf 0x3f3f3f3f
#define all(v) (v).begin() , (v).end()
#define ones(n) __builtin_popcount(n)
using namespace std;

typedef vector<int> vi;
typedef long long ll;

int di[] = {0 , 0 , 1 , -1 , 1 , 1 , -1 , -1};
int dj[] = {1 , -1 , 0 , 0 , -1 , 1 ,  1 , -1};

string getTheOne(string s) {
    set<char> uni;
    for (char c : s) {
        if (uni.count(c))
            return string(1 , c);
        uni.insert(c);
    }
}

void modi(int &i ,int &j) {
    if(i == 0) {
        if(j == 12)
            i++;
        else
            j++;
    } else {
        if(j == 0)
            i--;
        else
            j--;
    }
}
char grid[3][14];
int main(){
#ifndef ONLINE_JUDGE
    freopen("input.in", "r", stdin);
#endif
    string s;
    cin >> s;

    string c = getTheOne(s);

    int pos = s.find(c) , secPos = s.find(c , pos + 1);

    if(pos > s.size()-1-secPos) {
        reverse(all(s));
        pos = s.find(c) , secPos = s.find(c , pos + 1);
    }

    if(secPos == pos + 1) {
        puts("Impossible");
        return 0;
    }

    int cnt = secPos - pos - 1;
    int cols = (cnt+1) / 2;

    int i = 0 , j = 13-cols-pos - (cnt % 2 == 0);
    for (int k = 0 ;k < s.size() ;k++) {
        if(k == secPos) continue;
        grid[i][j] = s[k];
        modi(i , j);
    }

    for (int i = 0 ;i < 2 ;i++)
        printf("%s\n",grid[i]);
}