#include <bits/stdc++.h>
using namespace std;

const int N = 4e5;

vector<int> g[N], gg[N];
int fr[N], to[N], itr[N];
bool used[N], rev[N];
int low[N], ord[N], step;
stack<int> stk;
int max_cnt, max_v;

void dfs(int u, int p) {
	ord[u] = low[u] = ++step;
	stk.push(u);
	for (int v : g[u]) {
		if (ord[v] == 0) {
			dfs(v, u);
			low[u] = min(low[u], low[v]);
		} else if (v != p) {
			low[u] = min(low[u], ord[v]);
		}
	}

	if (p == -1 || ord[p] < low[u]) {
		int cnt = 0;
		while (true) {
			cnt++;
			int v = stk.top(); stk.pop();
			if (v == u) break;
		}
		if (max_cnt < cnt) {
			max_cnt = cnt;
			max_v = u;
		}
	}
}

void dfs2(int u) {
	for (int &i = itr[u]; i < gg[u].size(); i++) {
		int id = gg[u][i];
		if (used[id]) continue;
		used[id] = true;
		if (fr[id] == u) {
			dfs2(to[id]);
			rev[id] = true;
		} else {
			dfs2(fr[id]);
			rev[id] = false;
		}
	}
}

int main() {
	int n, m;
	cin >> n >> m;

	for (int i = 0; i < m; i++) {
		int u, v;
		scanf("%d %d", &u, &v);
		u--; v--;
		g[u].push_back(v);
		g[v].push_back(u);
		gg[u].push_back(i);
		gg[v].push_back(i);
		fr[i] = u;
		to[i] = v;
	}

	dfs(0, -1);
	dfs2(max_v);

	cout << max_cnt << endl;

	for (int i = 0; i < m; i++) {
		if (rev[i]) swap(fr[i], to[i]);
		printf("%d %d\n", fr[i] + 1, to[i] + 1);
	}
}