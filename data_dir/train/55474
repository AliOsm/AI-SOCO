#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define FILE "series"
#define ld long double
#define endl '\n'
//#define int long long
#define pii pair <int, int>

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

typedef tree <int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 2e5 + 5;
const int mod = 1e9 + 7;
const int rx[4] = {1, -1, 0, 0};
const int ry[4] = {0, 0, 1, -1};

int a[N], need[N], cnt[N];

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    srand(1488);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //   freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
#endif // LOCAL
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        a[i]--;
    }
    int all = 0, res = 1e9, good = 0;
    for (int i = 0; i < m; i++) {
        cin >> need[i];
        if (!need[i]) good++;
        all += need[i];
    }
    int l = 0;
    for (int i = 0; i < n; i++) {
        cnt[a[i]]++;
        if (cnt[a[i]] == need[a[i]]) good++;
        while (l <= i && cnt[a[l]] > need[a[l]]) {
            cnt[a[l]]--;
            l++;
        }
        if (good == m) {
            res = min(res, i - l + 1 - all);
        }
    }
    if (res == 1e9) cout << -1;
    else cout << res << endl;
    return 0;
}
