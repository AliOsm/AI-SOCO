#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>
#include <complex>

using namespace std;
int dx[8]={1,-1,0,0,1,-1,1,-1};
int dy[8]={0,0,-1,1,1,-1,-1,1};
const double EPS=1e-8;
const int N=100005;
typedef complex<double> point;
#define X real()
#define Y imag()
#define cp(a,b) (conj(a)*b).imag()
#define dp(a,b) (conj(a)*b).real()
#define lengthsq(a)    dp(a,a)
/*
 -- Valid
 -- const (10^9>sz)
 -- array index
 -- less or more , check if
 -- even or odd
 -- inequality
 */
int n , a ,b ,t;
vector<int> e[N],lf,ans;
map<pair<int,int > ,int >mp;
int last;
int vis[N];
void dfs(int idx){
    vis[idx]=1;
    bool l=1;
    for(int i=0;i<e[idx].size();i++){
        int to=e[idx][i];
        if(!vis[to]){
            if(mp.count(make_pair(min(idx,to),max(idx,to)))){
                last=to;
            }
            l=0;
            dfs(to);
        }
    }
    if(l){
        lf.push_back(idx);
    }
    if(idx==last){
        ans.push_back(lf.back());
        lf.clear();last=-1;
    }
    
    
}

int main(){
    scanf("%d",&n);
    for(int i=1;i<n;i++){
        scanf("%d%d%d",&a,&b,&t);
        e[a].push_back(b);
        e[b].push_back(a);
        if(t==2){
            mp[make_pair(min(a,b),max(a,b))]=1;
        }
    }
    dfs(1);
    cout<<ans.size()<<endl;
    for(int i=0;i<ans.size();i++){
        if(i){
            cout<<" ";
        }
        cout<<ans[i];
    }
    
    
    
    
    return 0;//rev Ab steps
}