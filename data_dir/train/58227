#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>*/
 
#define pb push_back
#define mp make_pair
#define sz(s) ((int)(s.size()))
#define all(s) s.begin(),s.end()
#define rep(i,a,n) for(int i=a;i<=n;++i)
#define per(i,n,a) for(int i=n;i>=a;--i)
#define onlycin ios_base::sync_with_stdio(false); cin.tie(0) 
using namespace std;
// using namespace __gnu_pbds;
typedef long long ll;
typedef unsigned long long ull;
/*typedef tree<
pair < int, int >,
null_type,
less< pair < int, int > >,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;*/
// find_by_order() order_of_key()
const int MAXN = (int)5e5+228;
const char nxtl = '\n';
const int mod = (int)1e9+7;
const double eps = (double)1e-7;
template<typename T> inline bool updmin(T &a, const T &b) {return a > b ? a = b, 1 : 0;}
template<typename T> inline bool updmax(T &a, const T &b) {return a < b ? a = b, 1 : 0;}

int n, m, s[MAXN], clr[MAXN];
bool used[MAXN];
vector < int > g[MAXN], v[MAXN], go[MAXN];

void dfs(int x, int pr = -1) {
	set < int > mex;
	for(auto &to : v[x]) {
		if(clr[to]) mex.insert(clr[to]);
	}
	int cur = 0;
	for(auto &to : v[x]) {
		if(clr[to]) continue;
		cur++;
		while(mex.count(cur)) cur++;
		clr[to] = cur;
	}
	for(auto &to : g[x]) {
		if(to != pr) dfs(to,x);
	}
}

int main() {
	#ifdef accepted
		freopen(".in", "r", stdin);
		freopen(".out", "w", stdout);
	#endif
	onlycin;
	cin >> n >> m;
	rep(i,1,n) {
		cin >> s[i];
		rep(j,1,s[i]) {
			int x; cin >> x;
			v[i].pb(x);
		}
	}
	rep(i,2,n) {
		int x, y; cin >> x >> y;
		g[x].pb(y);
		g[y].pb(x);
	}
	dfs(1);
	cout << max(*max_element(clr+1,clr+1+m),1) << nxtl;
	rep(i,1,m) cout << max(1,clr[i]) << ' ';
	
	return 0;
}