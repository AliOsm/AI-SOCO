#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

enum {UP, DOWN};
const int MAX = 1e2 + 5;
ll grid[MAX][MAX];

inline bool overflow(ll a, ll b) {
	return (a * b) / b != a;
}

int main() {
	ios_base::sync_with_stdio(false);

	ll n, m, k, x, y;
	cin >> n >> m >> k >> x >> y;
	if(n == 1) {
		ll q = k / m;
		ll r = k % m;
		fori(i, 1, r + 1) {
			grid[1][i] = q + 1;
		}
		fori(i, r + 1, m + 1) {
			grid[1][i] = q;
		}
	}
	else if(k <= n * m) {
		for(int i = 1; i <= n && k; i++) {
			for(int j = 1; j <= m && k; j++, k--) {
				grid[i][j] = 1;
			}
		}
	}
	else {
		ll left = 1, right = (ll) 1e17;
		ll smallest = -1;
		while(left <= right) {
			ll mid = (left + right) / 2;
			ll cur = 2 * m * mid + (n - 2) * m * (2 * mid - 1);
			if(!overflow(2 * m, mid) && !overflow((n - 2) * m, (2 * mid - 1)) && cur >= 0 && cur <= k) {
				smallest = mid;
				left = mid + 1;
			}
			else {
				right = mid - 1;
			}
		}
		assert(smallest != -1);
		k -= 2 * m * smallest + (n - 2) * m * (2 * smallest - 1);
		fori(i, 1, m + 1) {
			grid[1][i] = grid[n][i] = smallest;
		}
		fori(i, 2, n) {
			fori(j, 1, m + 1) {
				grid[i][j] = 2 * smallest - 1;
			}
		}
		int dir = UP;
		int row = n - 1;
		while(k > 0) {
			for(int i = 1; k && i <= m; i++, k--) {
				grid[row][i]++;
			}
			if(dir == UP) {
				row--;
			}
			else {
				row++;
			}
			if(row == 0) {
				row = 2;
				dir = DOWN;
			}
			else if(row == n + 1) {
				row = n - 1;
				dir = UP;
			}
		}
	}
	ll minn = 1LL << 60, maxx = -(1LL << 60);
	fori(i, 1, n + 1) {
		fori(j, 1, m + 1) {
			minn = min(minn, grid[i][j]);
			maxx = max(maxx, grid[i][j]);
		}
	}
	printf("%lld %lld %lld\n", maxx, minn, grid[x][y]);

	return 0;
}

