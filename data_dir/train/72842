/* ****revpro**** */
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")
#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl	   '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii	    map<ll,ll>
using namespace std;

#define TIME        cerr << "\nTime elapsed: " << setprecision(5) <<1000.0 * clock() / CLOCKS_PER_SEC << "ms\n";
#define FAST ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define N  100005
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;  
#define ordered_set tree<double, null_type,less<double>, rb_tree_tag,tree_order_statistics_node_update> 
void solve()
{
	ll n,k;
	cin>>n>>k;
	ll a[n];
	ll cnt=0;
	rep(i,0,n) {
		char c;
		cin>>c;
		a[i]=(c=='1');
		cnt+=a[i];
	}
	ll last[k]={0};
	vi v[k];
	rep(i,0,n){
		if(a[i])v[i%k].pb(i);
		if(a[i]) last[i%k]=i;
		if(i<k) continue;
		else a[i]+=a[i-k];
	}
	ll ans=cnt;
	rep(i,0,k){
		if(sz(v[i])){
			ll j=v[i][0]+k;
			ll l=1;
			ll cost=0,cnt1=1;
			ans=min(ans,cost+cnt-a[j-k]);
			while((l<sz(v[i]))){
				ll cnt2=0;
				while(j<v[i][l]){
					cnt2++;
					j+=k;
				}
				l++;
				j+=k;
				if(cost+cnt2<cnt1){
					cost+=cnt2;
				}
				else {
					cost=cnt1;
				}
				cnt1++;
				ans=min(ans,cost+cnt-a[j-k]);
			}
		}
		else ans=min(ans,cnt);
	}
	
	cout<<ans<<endl;
}
signed main()
{
	
		/***********************************/
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    mt19937_64 generator (seed);
    /***********************************/
 #ifndef ONLINE_JUDGE
      // for getting input from input.txt
     freopen("input.txt", "r", stdin);
//     // for writing output to output.txt
//     freopen("output1.txt", "w", stdout);
 #endif
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
	cin>>TESTS;
	while(TESTS--)
	{
		solve();
		
	}
	TIME
	return 0;
}