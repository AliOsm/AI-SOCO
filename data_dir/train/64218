
#include<bits/stdc++.h>
using namespace std;
#define LL                  long long
#define ull                 unsigned long long LL
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9
#define EPS                 1e-8
#define Pi                  acos(-1.0)

LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}
#define N 1006

LL n,m,x,y;
LL dp[N][N][2];
LL cnt[N][2];

LL solve(int pos,int freq, int last_clr)
{
    if(pos==m)
    {
        if(freq>=x && freq<=y)
            return 0;
        else
            return INF;
    }

    if(dp[pos][freq][last_clr]!=-1)
    {
        return dp[pos][freq][last_clr];
    }

    LL ans;
    if(freq<x)
        ans=cnt[pos][1-last_clr]+solve(pos+1,freq+1,last_clr);
    else if( freq>=x && freq<y)
    {
        LL ans1=cnt[pos][1-last_clr]+solve(pos+1,freq+1,last_clr);
        LL ans2=cnt[pos][last_clr]+solve(pos+1,1,1-last_clr);
        ans=min(ans1,ans2);
    }
    else
        ans=cnt[pos][last_clr]+solve(pos+1,1,1-last_clr);

    dp[pos][freq][last_clr]=ans;
    return ans;

}

int main()
{
    cin>>n>>m>>x>>y;

    string str[n];
    for(int i=0;i<n;i++)
        cin>>str[i];

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(str[i][j]=='#')
                cnt[j][0]++;
            else
                cnt[j][1]++;
        }
    }
    memo(dp,-1);

    LL ans=min(solve(0,0,0),solve(0,0,1));
    cout<<ans<<endl;

    return 0;
}



/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
