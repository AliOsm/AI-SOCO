#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

const int N = 100100;

int dsu[N], sz[N];

ll dp[N];

int n;

int dsu_get(int v){
    if (v == dsu[v])
        return v;
    return dsu[v] = dsu_get(dsu[v]);
}

void dsu_unite(int a, int b){
    a = dsu_get(a);
    b = dsu_get(b);
    if (a == b)
        return;
    if (sz[a] < sz[b])
        swap(a, b);
    sz[a] += sz[b];
    dp[a] += dp[b];
    dsu[b] = a;
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    cin >> n;
    ll ans = 0;
    for (ll i = 2; i <= n; i++){
        sz[i] = 1;
        dsu[i] = i;
    }
    for (ll i = 2; i <= n; i++){
        for (ll x = 2; x * x <= i; x++){
            if (i % x == 0){
                if (i / x != 1){
                    dsu_unite(i, i/x);
                    dp[dsu_get(i)] += x;
                }
                if (i / (i/x) != 1 && x * x != i){
                    dsu_unite(i, i/(i/x));
                    dp[dsu_get(i)] += i/x;
                }
            }
        }
    }

    for (int i = 1; i <= n; i++){
        ans = max(ans, dp[dsu_get(i)]);
    }

    cout << ans*4;

}
