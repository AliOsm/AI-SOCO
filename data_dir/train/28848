#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define endl '\n'
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int , int >
#define Endl '\n'

#pragma GCC optimize("Ofast")

using namespace std;
using namespace __gnu_pbds;

template <typename T> using ordered_set = tree <T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 gen(chrono::system_clock::now().time_since_epoch().count());

const ll mod = 1000000007;
const int FFTM = 2e9 + 9;
const int N =  2e5 + 5;

const int SX[4] = {0 , 1 ,  - 1 , 0};
const int SY[4] = {1 , 0 , 0 ,  - 1};
const int rx[8] = {1,  - 1, 0, 0, 1, 1,  - 1,  - 1};
const int ry[8] = {0, 0, 1,  - 1, 1,  - 1, 1,  - 1};
const int kx[8] = {1, 1,  - 1,  - 1, 2, 2,  - 2,  - 2};
const int ky[8] = {2,  - 2, 2,  - 2, 1,  - 1, 1,  - 1};

typedef cc_hash_table< int, int, hash<int>, equal_to<int>, direct_mask_range_hashing<int>, hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

ll n, m, a, b, g, x, y, z;
ll ans = 0;
deque< pair < ll, int > > q[3005];
deque< pair < ll, int> > qc;
void add(deque< pair < ll, int > > &qx, ll v, int p, int pl){
	while(!qx.empty() && qx.back().F >= v) qx.pop_back();
	qx.push_back({v, p});
	if(qx.front().S == pl)qx.pop_front();
}

int32_t main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
    cin >> n >> m >> a >> b;
	cin >> g >> x >> y >> z;
	for(int i = 0;i < n;i++){
		qc.clear();
		for(int j = 0;j < m;j++){
			add(q[j], g, i, i - a);
			g = (g * x + y) % z;
			if(i < a - 1) continue;
			add(qc, q[j].front().F, j, j - b);
			if(j < b - 1) continue;
			ans += qc.front().F;
		}
	}
	cout<<ans;
    return 0;
}
