#include <bits/stdc++.h>
#define F first
#define S second
using namespace std;
typedef long long ll;
typedef pair<ll, ll>pll;
typedef pair<pll, pll>pff;
const int N = 200000;
ll n;
pff arr[N], a[N], b[N];
pff intersect(pff g, pff h)
{
    ll x1 = g.F.F, y1 = g.F.S, x2 = g.S.F, y2 = g.S.S;
    ll x3 = h.F.F, y3 = h.F.S, x4 = h.S.F, y4 = h.S.S;
	ll x5 = max(x1, x3), y5 = max(y1, y3), x6 = min(x2, x4), y6 = min(y2, y4);
	if (x5 > x6 || y5 > y6)
		return {{LONG_MIN, LONG_MIN}, {LONG_MIN, LONG_MIN}};
	return {{x5, y5}, {x6, y6}};
}
bool valid(pff x)
{
    return (x.F.F != LONG_MIN);
}
void out(pff x)
{
    cout << x.F.F << ' ' << x.F.S;
}
int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    cin >> n;
    for(int i = 0;i < n;++i)
        cin >> arr[i].F.F >> arr[i].F.S >> arr[i].S.F >> arr[i].S.S;
    for(int i = 0;i < n;++i)
    {
        a[i] = arr[i];
        if(i)   a[i] = intersect(a[i], a[i - 1]);
    }
    for(int i = n - 1;i >= 0;--i)
    {
        b[i] = arr[i];
        if(i < n - 1)   b[i] = intersect(b[i], b[i + 1]);
    }
    for(int i = 0;i < n;++i)
    {
        if(!i)
        {
            if(valid(b[1]))
            {
                out(b[1]);
                return 0;
            }
        }
        if(i == n - 1)
        {
            if(valid(a[n - 2]))
            {
                out(a[n - 2]);
                return 0;
            }
        }
        pff tmp = intersect(a[i - 1], b[i + 1]);
        if(valid(tmp))
        {
            out(tmp);
            return 0;
        }
    }
    return 0;
}
