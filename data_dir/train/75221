#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cassert>
#include <queue>
#include <bitset>
#include <ctime>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define pb push_back
#define fst first
#define snd second
#define SZ(x) ((int)x.size())
typedef long long ll;
#define dforn(i, n) for(int i = n - 1; i >= 0; i--)
const int MAXN=64;

int n,m;
bool miente[MAXN];

int ask(int v){
  assert(1<=v&&v<=m);
  printf("%d\n",v);
  fflush(stdout);
  int ans;scanf("%d",&ans);
  //~ printf("READ AFTER QUERY %d\n",ans);
  if(ans==-2)exit(-1);
  if(ans==0)exit(0);
  return ans;
}

int P(int c){
  return ask(c);
}

int main() {
  //~ freopen("input.in","r",stdin);
  while(scanf("%d%d",&m,&n)>=1){
    memset(miente,false,sizeof(miente));
    forn(i,n){
      int t=ask(1);
      if(t==-1){
        miente[i]=true;
      }
    }
    int q=60-n;
    int p=0;
    int a=1;
    int b=m+1;
    while(q--){
      int c=(a+b)/2;
      int r=P(c);
      //~ printf("r antes de ver si miente %d\n",r);
      if(miente[p])r=-r;
      //~ printf("p=%d, miente[p]=%d => r=%d\n",p,miente[p],r);
      // r es la respuesta correcta a la pregunta
      if(r==-1) b=c;
      else      a=c;
      p=(p+1)%n;
    }
    printf("y bueno... que se yo...\n");
  }
  return 0;
}
