/*
    we can use trie in the bits of numbers , when we add a number we will add it's index in each bit ,
    and keep them in sorted way .
    when we query we will check if our interval exist in the zero branch or the one branch and choose
    the one that maximize our answer .
*/
#pragma GCC optimize("O3")
#include<bits/stdc++.h>
#define forr(i,a,b) for(int i=a;i<=b;i++)
#define F first
#define S second
#define input ios_base::sync_with_stdio(0);cin.tie(0);

const double PI  = acos(-1.0);
using namespace std;
typedef pair<double,double>pdd;
typedef long long  ll;
typedef pair<ll, ll>pii;
typedef complex<double> point;
//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};
const int N = 2e5 + 9;
ll n,p[N],ex[N], mod=998244353;

ll fPower(ll b, ll p, ll m){    //O(log(p))
  ll res = 1;
  while(p){
    if(p&1) res = (res * b)%m;
    b = (b * b)%m;
    p >>= 1;
  }
  return res;
}

inline ll modInversePrime(ll a, ll p){     //O(log(p))
  return fPower(a, p-2, p);
}


 int main()
{
//freopen("product.in","r",stdin);
//freopen("travel.out","w",stdout);
//__builtin_popcount()
input
    ll a=1,b=1;
    ex[0]=1;
    cin>>n;
    forr(i,1,n)
    {
        cin>>p[i];
        p[i]*=modInversePrime(100,mod);
        p[i]%=mod;
        ex[i]=(ex[i-1]*p[i])%mod;
        if(i<n)a=(a+ex[i])%mod;
        b=(b*p[i])%mod;
    }
    cout<<(a*modInversePrime(b,mod)+mod)%mod<<endl;




return 0;
}
