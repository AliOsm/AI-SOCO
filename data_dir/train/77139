#include<bits/stdc++.h>

using namespace std;
const int MAXN = 100100;
const int INF = 0x3f3f3f3f;

struct seg{
	seg *fe,*fd;
	int meio,l,r,mex,minx;
	
	seg(int x,int y){
		meio = (x + y)/2;
		l = x , r = y;
		mex = 0;
		minx = INF;
		
		if(l == r) return;
		
		fe = new seg(x,meio);
		fd = new seg(meio + 1,y);
	}	
	
	void up(int pos,int novo){
		if(l == r){
			mex = novo;
			minx = novo;
			return;
		}
		if(pos <= meio) fe->up(pos,novo);
		else fd->up(pos,novo);
		mex = max(fe->mex,fd->mex);
		minx = min(fe->minx,fd->minx);
	}
	
	int get(int x,int y){
		if(l >= x && r <= y) return mex;
		if(l > y || r < x) return 0;
		return max(fe->get(x,y),fd->get(x,y));
	}
	
	int getmin(int x,int y){
		if(l >= x && r <= y) return minx;
		if(l > y || r < x) return INF;
		return min(fe->getmin(x,y),fd->getmin(x,y));
	}
};

pair<int,int> v[MAXN];

bool comp(pair<int,int> a,pair<int,int> b){
	if(a.first != b.first) return a.first > b.first;
	else return a.second < b.second;
}

bool comp2(pair<int,int> a,pair<int,int> b){
	if(a.first != b.first) return a.first < b.first;
	else return a.second > b.second;
}

seg sd(1,MAXN) , se(1,MAXN) , sr(1,MAXN);

int md[MAXN];
int me[MAXN];
int resp[MAXN];
int vo[MAXN];
int resposta[MAXN];

int main(){
	int n;
	cin >> n;
	
	for(int i = 1;i <= n;i++) resposta[i] = 1;
	
	for(int i = 1;i <= n;i++) cin >> v[i].first , vo[i] = v[i].first , v[i].second = i;
	
	sort(v + 1,v + n + 1,comp);

	for(int i = 1;i <= n;i++){
		md[v[i].second] = sd.get(v[i].second + 1,n) + 1;
		sd.up(v[i].second,md[v[i].second]);
		//cout << "// " << i << " " << v[i].second << " " << md[v[i].second] << endl;
		resp[v[i].second] = md[v[i].second];
	}
	
	//cout << endl;
	
	sort(v + 1,v + n + 1,comp2);
	int res = 0;
	
	for(int i = 1;i <= n;i++){
		me[v[i].second] = se.get(1,v[i].second - 1) + 1;
		se.up(v[i].second,me[v[i].second]);
		//cout << "// " << i << " " << v[i].second << " " << me[v[i].second] << endl;
		resp[v[i].second] += me[v[i].second] - 1;
		res = max(res,resp[v[i].second]);
	}
	
	vector<int> vec;
	
	for(int i = 1;i <= n;i++) if(resp[i] == res) vec.push_back(i) ,sr.up(i,vo[i]);
	
	int cnt = 0; 
	
	for(int i = 0;i < vec.size();i++){
		//cout << "| " << vec[i] << endl;
		
		//cout << "// " << vec[i] << " range " << vec[i] + 1 << " " << n << " // " << sr.getmin(vec[i] + 1,n) << " " << sr.get(1,vec[i] - 1) << endl;
		if(sr.getmin(vec[i] + 1,n) > vo[vec[i]] && sr.get(1,vec[i] - 1) < vo[vec[i]]) cnt ++ , resposta[vec[i]] = 3;
		else resposta[vec[i]] = 2;
	}
	
	//cout << cnt << endl;
	
	for(int i = 1;i <= n;i++) cout << resposta[i];
	
	
}