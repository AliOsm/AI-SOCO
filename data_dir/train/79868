/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e4 + 10;
const ll LOG = 51;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n, k, ans, inv[MAXN], dp[MAXN][LOG][LOG];
vector<ll> dv;
vector<pll> primes;

int main() {
    fast_io;

    inv[1] = 1;
    for (ll i = 2; i < MAXN; i++) inv[i] = (-(MOD / i) * inv[MOD % i] % MOD + MOD) % MOD;

    for (ll i = 0; i < LOG; i++) dp[0][i][i] = 1;
    for (ll i = 1; i < MAXN; i++) {
        for (ll j = 0; j < LOG; j++) {
            ll ans = 0;
            for (ll k = LOG - 1; k >= 0; k--) {
                ans += dp[i - 1][j][k] * inv[k + 1];
                ans %= MOD;
                dp[i][j][k] = ans;
            }
        }
    }

    cin >> n >> k;
    for (ll i = 1; i * i <= n; i++) {
        if (n % i == 0) {
            dv.push_back(i);
            if (i * i != n) dv.push_back(n / i);
        }
    }
    for (ll i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            ll cnt = 0;
            while (n % i == 0) n /= i, cnt++;
            primes.push_back({i, cnt});
        }
    }
    if (n != 1) primes.push_back({n, 1});

    for (ll i : dv) {
        ll x = i;
        ll prob = 1;
        for (pll j : primes) {
            ll y = j.X;
            ll cnt = 0;
            while (x % y == 0) x /= y, cnt++;
            prob *= dp[k][j.Y][cnt];
            prob %= MOD;
        }
        ans = (ans + prob * (i % MOD)) % MOD;
    }
    cout << ans << endl;

    return 0;
}
/*

*/
