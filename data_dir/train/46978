#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <ctime>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <algorithm>
#include <math.h>
#include <stack>
#include <sstream>
#include <utility>
#include <map>
#include <cassert>
#include <functional>
#include <numeric>

using namespace std;

const int INF = 1000000007;
const int MINF = -1000000007;
const double Pi = 3.141592653;

typedef long long ll;
typedef string str;
typedef unsigned int uint;
typedef vector<int> vi;
typedef pair<int, int> pi;

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

int ToInt(const string &buff) {
	int res;
	stringstream st;
	st << buff;
	st >> res;
	return res;
}

string ToString(const int &buff) {
	string res;
	stringstream st;
	st << buff;
	st >> res;
	return res;
}

bool IsPrime(const int &buff) {
	for (int i = 2; i*i <= buff; ++i)
		if (buff % i == 0)
			return false;
	return true;
}

int maxTree[1000];
int minTree[1000];

void BuildTree(int n)
{
    for (int i = 0; i < 1000; ++i)
    {
        maxTree[i] = 0;
        minTree[i] = 0;
    }
    int treeSize = 1 << int(log2(n - 1) + 1);

    for (int i = treeSize; i < treeSize + n; ++i)
    {
        maxTree[i] = i;
        minTree[i] = i;
    }

    char ans;
    int sz = treeSize;

    while(sz > 1)
    {
        for (int i = sz; i < 2 * sz; i += 2)
        {
            if (maxTree[i]!=0 && maxTree[i + 1]!=0)
            {
                cout << "? " << maxTree[i] - treeSize + 1 << " " << maxTree[i + 1] - treeSize + 1 << endl;
                fflush(stdout);
                cin >> ans;
                maxTree[i/2] = ans == '>' ? maxTree[i] : maxTree[i + 1];
                if (sz == treeSize)
                    minTree[i/2] = ans == '<' ? maxTree[i] : maxTree[i + 1];
            }
            else
            {
                if (maxTree[i] != 0)
                    maxTree[i/2] = maxTree[i];
                else
                     maxTree[i/2] = 0;
                 minTree[i/2] = sz == treeSize ? minTree[i] : 0;
            }
        }
        if (sz != treeSize)
        {
            for (int i = sz; i < 2 * sz; i += 2)
            {
                if (minTree[i]!=0 && minTree[i + 1]!=0)
                {
                    cout << "? " << minTree[i] - treeSize + 1 << " " << minTree[i + 1] - treeSize + 1 << endl;
                    fflush(stdout);
                    cin >> ans;
                    minTree[i/2] = ans == '<' ? minTree[i] : minTree[i + 1];
                }
                else
                {
                    if (minTree[i] != 0)
                        minTree[i/2] = minTree[i];
                    else
                         minTree[i/2] = 0;
                }
            }
        }
        sz /= 2;
    }

    cout << "! " << minTree[1] - treeSize + 1 << " " << maxTree[1] - treeSize + 1 << endl;
    fflush(stdout);
}

void solve()
{
    int t;
    cin >> t;
    for (int i = 0; i < t; ++i)
    {
        int n;
        cin >> n;
        BuildTree(n);
    }
    return;
}

int main()
{
#ifdef _DEBUG
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif

	solve();

#ifdef _DEBUG
	printf("Time: %.3f\n", (double)clock() / CLOCKS_PER_SEC);
#endif
}
