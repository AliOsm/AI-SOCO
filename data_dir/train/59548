#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>

#ifdef PRINTERS
#include "printers.hpp"
using namespace printers;
#define tr(a)		cerr<<#a<<" : "<<a<<endl;
#else
#define tr(a)    
#endif
#define int 		long long
#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)	for(int i=a;i<b;i++)
using namespace std;

int BIT[1000005];
void update(int idx,int val){
	for(;idx<1000005;idx+=idx&-idx){
		BIT[idx]+=val;
	}
}
int query(int idx){
	int ans=0;
	for(;idx;idx-=idx&-idx){
		ans+=BIT[idx];
	}
	return ans;
}
void solve(){
	int n;
	cin>>n;
	ll cursum=0;
	rep(i,1,n+1){
		int temp;
		cin>>temp;
		cursum+=abs(temp-i);
		int reach1=n-i+1;
		int reachorigin=(temp-i+n)%n;
		if(reach1>reachorigin){
			update(1,-1);
			update(reachorigin+1,1);
			update(reachorigin+1,1);
			update(reach1,-1);
			update(reach1,abs(temp-1)-abs(temp-n));
			update(reach1+1,-abs(temp-1)+abs(temp-n));
			update(reach1+1,-1);
			update(n,1);
		}
		else{
			update(1,1);
			update(reach1,-1);
			update(reach1,abs(temp-1)-abs(temp-n));
			update(reach1+1,-abs(temp-1)+abs(temp-n));
			update(reach1+1,-1);
			update(reachorigin+1,1);
			update(reachorigin+1,1);
			update(n,-1);
		}
	}
	int shifts=0,mindiff=cursum;
	rep(i,1,n){
		cursum+=query(i);
		if(cursum<mindiff){
			mindiff=cursum;
			shifts=i;
		}
	}
	cout<<mindiff<<" "<<shifts<<endl;
}

signed main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t=1;
//	cin>>t;
	while(t--){
		solve();
	}
	return 0;
}