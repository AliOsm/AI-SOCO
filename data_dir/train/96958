/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
/* FOR ACM-ICPC WF*/
#include <bits/stdc++.h>

using namespace std;
using ll = long long;
using vi = vector<int>;
using vvi = vector<vi>;
using pii = pair<int, int>;

#define pb push_back

constexpr auto MOD = 1000000007LL;
constexpr auto LINF = (1LL<<60);
constexpr auto INF = 2147483647LL;
constexpr auto PI = 3.1415926535897932384626433;
constexpr auto EPS = 1E-9;

template<typename T1, typename T2>
ostream& operator<<(ostream& out, const pair<T1, T2> p){
	out << p.first << ' ' << p.second;
	return out;
}

template <typename T1, typename T2>
istream& operator>>(istream& in, pair<T1, T2> &p){
	in >> p.first >> p.second;
	return in;
}

auto printVector = []<typename T>(ostream& out, vector<T> v){
	copy(v.begin(), v.end(), ostream_iterator<T>(out, " "));
};

const int SIGMA = 26;
const int OFFSET = 97;

int res = 0;

struct Node{
    Node *nxt[SIGMA], *suf;
    int len, count;
    Node(void){
    	count = 0;
        fill(nxt, nxt+SIGMA, nullptr);
        suf = nullptr;
        len = -1;
        return;
    }
    Node(Node *suf, int len): suf(suf), len(len){
    	count = 0;
        fill(nxt, nxt+SIGMA, nullptr);
        res = max(res, len);
        return;
    }  
};


class PalindromicTree{
    private:
        Node* step(Node *now, char ch) const{
            while(getPrv(now->len+2) != ch || now->len+2 > str.length())
                now = now->suf;
            return now;
        }
        char getPrv(int pos) const{
            pos = str.length()-pos;
            if(pos < 0) return '\0';
            return str[pos];
        }
        void bfs(void) const{
        	queue<Node*> q; q.push(oddRoot), q.push(evenRoot);
        	stack<Node*> st; 
        	while(q.size()){
        		st.push(q.front());
        		q.pop();
        		
        		for(int i = 0; i < SIGMA; i++)
        			if(st.top()->nxt[i])
        				q.push(st.top()->nxt[i]);
			}
			while(st.size()){
				Node *now = st.top();
				if(now->suf) now->suf->count += now->count;
				st.pop();
			}
			
			return;
		}
    public:
		Node *oddRoot;
		Node *evenRoot;
        Node *now; string str;
        PalindromicTree(void){
            oddRoot = new Node();
            evenRoot = new Node(oddRoot, 0);
            now = evenRoot;
            return;
        }
        void insert(char ch){
        	int kx = ch-OFFSET;
            str += ch;
            now = step(now, ch);
            Node *suf = step(now->suf? now->suf: now, ch);
        	if(now->len == -1)
        		suf = evenRoot;
			else if(suf->nxt[kx])
        		suf = suf->nxt[kx];
        	else
        		suf = (suf->nxt[kx] = new Node(suf, now->len+2));
            if(now->nxt[kx])
            	now = now->nxt[kx];
            else
                now = (now->nxt[kx] = new Node(suf, now->len+2));
            now->count++;
            return;
        }
        void pushall(void){
        	this->bfs();
        	oddRoot->count = evenRoot->count = 0;
		}
};

int main(){
	#ifdef LOCAL
		freopen("input.txt","r",stdin);
//		freopen("output.txt","w",stdout);
	#endif
	ios_base::sync_with_stdio(false);
	
	string str; cin >> str;
	PalindromicTree PT;
	int res = 0;
	for(int i = 0; i < str.length(); i++){
		PT.insert(str[i]);
		if(PT.now->len != i+1)
			res = i+1;
	}
	
	cout << res << endl;
	
	return 0;
}

