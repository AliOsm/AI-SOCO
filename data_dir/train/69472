#include<bits/stdc++.h>
#define lf double
#define ll long long
#define ull unsigned ll
#define ii pair<int,int>
#define lolo pair<ll,ll>
#define il pair<int,ll>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define pll pair<ll,ll>
#define ld long int
#define heap priority_queue
#define mp make_pair
#define st first
#define nd second
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define all(x) x.begin(),x.end()
#define len(x) strlen(x)
#define sz(x) (int) x.size()
#define orta ((bas+son)/2)
#define min3(x,y,z) min(min(x,y),z)
#define max3(x,y,z) max(max(x,y),z)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define pw(x) (1<<(x))
#define MOD 1000000007
#define inf 1000000000000009
#define N 300005
#define LOG 20
#define M 1000000000000000000
#define KOK 400
#define EPS 0.0000001
#define B 10
#define pw(x) (1<<(x))
#define PI 3.1415926535
#define log sfeefw
using namespace std;

int n,log,len,able;
int rnk[LOG][N],pre[4][N],ata[N];
iii suf[N];
int ans[N];
string s1,s2,s3,all;
ii sz[N];
vector<ii> tut[N];

void print() {

	for(int i=1;i<=able;i++) {

		cout<<ans[i]<<' ';

	}

}

void merge(int n1,int n2,int &cev) {

	int c1=1;
	int c2=1;
	int c3=1;

	for(int i=1;i<=3;i++) {

		c1=1ll*c1*(pre[i][sz[n1].nd]-pre[i][sz[n1].st-1])%MOD;
		c2=1ll*c2*(pre[i][sz[n2].nd]-pre[i][sz[n2].st-1])%MOD;
		c3=1ll*c3*(pre[i][sz[n2].nd]-pre[i][sz[n1].st-1])%MOD;

	}

	cev=((1ll*cev+c3-c1+MOD)%MOD-c2+MOD)%MOD;

	sz[n2].st=sz[n1].st;
	ata[n1]=n2;

}

int bul(int node) {

	if(node==ata[node]) return node;

	return ata[node]=bul(ata[node]);

}

int get_lcp(int x,int y) {

	int res=0;

	for(int i=log;i>=0;i--) {

		int tut=pw(i);

		if(y+tut-1>n) continue ;

		if(rnk[i][x]==rnk[i][y]) {

			res+=tut;
			x+=tut;
			y+=tut;

		}

	}

	return res;

}

void solve() {

	int cev=0;

	able=min3(sz(s1),sz(s2),sz(s3));

	for(int i=1;i<n;i++) {

		int lcp=get_lcp(suf[i].nd,suf[i+1].nd);

		tut[lcp].pb({i,i+1});

	}

	for(int i=1;i<=n;i++) {

		ata[i]=i;
		sz[i]={i,i};

	}

	for(int lcp=n;lcp>=1;lcp--) {

		for(ii i:tut[lcp]) {

			int n1=i.st;
			int n2=i.nd;

			if(bul(n1)!=bul(n2)) {

				merge(ata[n1],ata[n2],cev);

			}

		}

		ans[lcp]=cev;

	}

}

void cs() {

	for(int i=1;i<=n;i++) {
		
		for(int j=1;j<=3;j++) {

			pre[j][i]+=pre[j][i-1];

		}

		if(all[suf[i].nd]>'z' || all[suf[i].nd]<'a') continue ;

		if(suf[i].nd<=sz(s1)) {

			pre[1][i]++;

		}
		else if(suf[i].nd<=sz(s1)+sz(s2)+1) {

			pre[2][i]++;

		}
		else {

			pre[3][i]++;

		}

	}

}

void suffix_array() {

	log=0;
	len=1;

	for(int i=1;i<=n;i++) {

		suf[i]={{all[i]-'a'+1,all[i]-'a'+1},i};

	}

	while(1) {

		sort(suf+1,suf+1+n);

		int cnt=0;

		for(int i=1;i<=n;i++) {

			cnt++;

			while(i+1<=n && suf[i].st==suf[i+1].st) {

				rnk[log][suf[i].nd]=cnt;

				i++;

			}

			rnk[log][suf[i].nd]=cnt;

		}

		if(len>=n) break ; 

		for(int i=1;i<=n;i++) {

			suf[i]={{rnk[log][i],i+len<=n?rnk[log][i+len]:0},i};

		}

		len*=2;
		log++;

	}

}

void init() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);

	cin>>s1>>s2>>s3;

	n=sz(s1)+sz(s2)+sz(s3)+2;

	all="$"+s1+"#"+s2+"!"+s3;

}

int main() {

	init();

	suffix_array();

	cs();

	solve();

	print();

}
