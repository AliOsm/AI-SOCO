#include <cstdio> 
#include <cstring> 
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <iostream>
#include <algorithm> 
#include <string> 
#include <vector> 
#include <set>
#include <map> 
#include <queue>
#include <complex>
using namespace std; 
typedef long long ll;
typedef double D;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vii> vvii;

#define MP make_pair 
#define A first 
#define B second 

#define PB push_back 
#define FR(i, a, b) for(int i=(a); i<(b); i++) 
#define FOR(i, n) FR(i, 0, n) 
#define RF(i, a, b) for(int i=(b)-1; i>=(a); i--) 
#define ROF(i, n) RF(i, 0, n) 
#define EACH(it,X) for(__typeof((X).begin()) it=(X).begin(); it!=(X).end(); ++it) 

vector<vector<int>> mem;

int get(int rows, int cols){
  if (cols == 0 || rows == 0) return 0;
  if (cols == 1) return rows / 2;
  if (rows == 1) return cols / 2;
  if (mem[rows][cols] != -1) return mem[rows][cols];
  int filltworows = cols + get(rows - 2, cols);
  swap(rows, cols);
  int filltwocols = cols + get(rows - 2, cols);
  return mem[rows][cols] = mem[cols][rows] = max(filltworows, filltwocols);
}

int main() {   ios::sync_with_stdio(0);
  int m, n; cin >> m >> n;
  mem = vector<vector<int>>(max(n, m) + 1, vector<int>(max(n, m) + 1, -1));
  cout << max(get(n, m),get(m, n)) << endl;
}
