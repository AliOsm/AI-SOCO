/*
doge
░░░▄░░░░░░░░░░░░░░▄
░░░░░░░░▌▒█░░░░░░░░░░░▄▀▒▌
░░░░░░░░▌▒▒█░░░░░░░░▄▀▒▒▒▐
░░░░░░░▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐
░░░░░▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐
░░░▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌
░░▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒▌
░░▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐
░▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄▌
░▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒▌
▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒
*/
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
  
using namespace std;
  
#define ll long long
#define ld long double
#define null NULL

string t[100100];

int k[100100];

char s[2000001];



struct q {
	int l, r, color;
	q() {}
	q(int _l, int _r, int _color) {
		l = _l;
		r = _r;
		color =_color;
	}
};

bool operator<(q a, q b) {
	return a.l < b.l || (a.l == b.l && a.r > b.r);
}


signed main() {
	int n;
	scanf("%d", &n);
	int len = 0;
	for (int i = 0; i < 2000001; ++i) {
		s[i] = '.';
	}
	vector< q > v;
	for (int ev = 1; ev <= n; ++ev) {
		cin >> t[ev];
		int sz = (int)t[ev].size();

		scanf("%d", &k[ev]);
		for (int i = 0; i < k[ev]; ++i) {;
			int x;
			scanf("%d", &x);
			len = max(len, x + sz - 1);
			v.push_back({x, x + sz - 1, ev});
		}
	}
	sort(v.begin(), v.end());

	vector<q> S;
	int i = 0;
	int sz = (int)v.size();
	while (i < sz) {
		int j = i + 1;
		S.push_back(v[i]);
		while (j < sz && v[j].r < v[i].r) {
			++j;
		}
		i = j;
	}
	for (int ev = 0; ev < (int)S.size(); ++ev) {
		int l = S[ev].l;
		int r = S[ev].r;
		int num = S[ev].color;
		if (ev == (int)S.size() - 1) {
			;
		} else {
			r = min(r, S[ev + 1].l - 1);
		}
		for (int i = l; i <= r; ++i) {
			s[i] = t[num][i - l];
		}
	}
	for (int i = 1; i <= len; ++i) {
		if (s[i] == '.') {
			s[i] = 'a';
		}
	}
	for (int i = 1; i <= len; ++i) {
		cout << s[i];
	}
	cout << '\n';
    return 0;
}











