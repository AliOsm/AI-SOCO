#include <bits/stdc++.h>

using namespace std;
using namespace placeholders;

template <class T> void mini(T &l, T r) {l = min(l, r);}
template <class T> void maxi(T &l, T r) {l = max(l, r);}

template <class TH> void _dbg(const char *sdbg, TH h) {
  cerr << sdbg << "=" << h << "\n";
}
template <class TH, class ...TA> void _dbg(const char *sdbg, TH h, TA ...a) {
  while (*sdbg != ',') cerr << *sdbg++; cerr << "=" << h << ","; _dbg(sdbg + 1, a...);
}
template <class T> ostream &operator<<(ostream &os, vector <T> v) {
  os << "[";
  for (auto vv : v) os << vv << ",";
  return os << "]";
}
template <class L, class R> ostream &operator<<(ostream &os, pair <L, R> p) {
  return os << "(" << p.first << "," << p.second << ")";
}

#define eput(...) _dbg(#__VA_ARGS__, __VA_ARGS__)

const int N = 1e6 + 10, B = 1e9 + 7;

int a[N];
int f[N];
int g[N];

void run() {
  int n;
  scanf("%d", &n);
  for (int i = 1; i <= n; i += 2) {
    a[i] = 1;
  }

  for (int i = 1; i <= n; ++i) {
    //eput(i, g[i - 1]);
    f[i] = (1 + g[i - 1]) % B;
    g[i] = ((i - 2 >= 0 ? g[i - 2] : 0) + f[i]) % B;
  }
  
  int ans = 0;
  for (int i = 1; i <= n; ++i) {
    //eput(i, f[i]);
    ans = (ans + f[i]) % B;
  }

  printf("%d\n", ans);

}

int main() {
  run();
  return 0;
}
