#include <bits/stdc++.h>
using namespace std;
typedef long long LL;

class Solution {
  struct Envelop {
    int w, h;
    int id;
    Envelop(int w, int h, int id) : w(w), h(h), id(id) {}
  };
  vector<Envelop> Es;
  int dp[6000], pre[6000];
  int n, W, H;
public:
  void run() {
    cin >> n >> W >> H;
    for (int i = 0; i < n; ++i) {
      int w, h; cin >> w >> h;
      if (W < w and H < h) Es.emplace_back(w, h, i);
    }
    n = Es.size();
    sort(Es.begin(), Es.end(), [](Envelop A, Envelop B) { return A.w < B.w; });
    for (int i = 0; i < n; ++i) {
      dp[i] = 1, pre[i] = -1;
      for (int j = 0; j < i; ++j) {
        if (Es[j].w < Es[i].w and Es[j].h < Es[i].h and dp[i] < dp[j] + 1) {
          dp[i] = dp[j] + 1, pre[i] = j;
        }
      }
    }
    int st = max_element(dp, dp + n) - dp;
    vector<int> ans;
    cout << dp[st] << '\n';
    if (dp[st] == 0) return;
    while (st != -1) ans.push_back(st), st = pre[st];
    while (ans.size()) 
      cout << Es[ans.back()].id + 1 << " \n"[ans.size() == 1], ans.pop_back();
  }
};

int main() {
  ios::sync_with_stdio(0); cin.tie(0);
  Solution().run();
}
