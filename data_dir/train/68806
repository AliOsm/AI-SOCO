#include<bits/stdc++.h>
using namespace std;
long long n, dp[105][105], opt[105][105][105], c[105], kol1[105], kol0[105];
string s;
int main(){
    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    for (long long i = 0; i < 105; ++i){
        for (long long j = 0; j < 105; ++j){
            for (long long k = 0; k < 105; ++k){
                opt[i][j][k] = -1e18;
            }
        }
    }

    cin >>n;
    cin >>s;
    s = '#' + s;
    for (long long i = 1; i <= n; ++i){
        kol0[i] = kol0[i - 1];
        kol1[i] = kol1[i - 1];
        if (s[i] == '0')kol0[i]++;else kol1[i]++;
        cin >>c[i];
        for (long long j = 1; j < i; ++j){
            c[i] = max(c[i], c[j] + c[i - j]);
        }
        dp[i][i] = c[1];
    }
    for (long long len = 2; len <= n; ++len){
        for (long long l = 1; l <= n; ++l){
            if (l + len - 1 > n)break;
            long long r = l + len - 1;
            if (s[l] == s[r]){
                opt[l][r][2] = dp[l + 1][r - 1];
                long long mxk = 0;
                if (s[l] == '1')mxk = kol1[r] - kol1[l - 1];else mxk = kol0[r] - kol0[l - 1];
                for (long long k = 3; k <= mxk; ++k){
                    for (long long pos = l + 1; pos < r; ++pos){
                        if (s[pos] != s[l])continue;
                        opt[l][r][k] = max(opt[l][r][k], opt[l][pos][k - 1] + dp[pos + 1][r - 1]);
                    }
                }
                for (long long k = 2; k <= n; ++k){
                    dp[l][r] = max(dp[l][r], opt[l][r][k] + c[k]);
                }
            }
            for (long long k = l; k < r; ++k){
                dp[l][r] = max(dp[l][r], dp[l][k] + dp[k + 1][r]);
            }
        }
    }
    cout <<dp[1][n];
}
