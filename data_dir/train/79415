#include <cstdio>
#include <vector>
#include <set>
#include <map>
using namespace std;
int a[34010];
vector<int> p;
map<int, vector<int> > m;
typedef map<int, vector<int> >::iterator I;
const int N = 20;
int t[1<<N];
int dfs(int x) {
	if (t[x] != -1) return t[x];
	int s[N] = {}, hi = 0;
	for (int i = 0; i < N; i++) {
		s[i] = x >> i & 1;
		if (s[i]) hi = i;
	}
	set<int> S;
	for (int j = 1; j <= hi; j++) {
		int to[N] = {};
		int z = 0;
		for (int i = 0; i < N; i++) {
			if (s[i]) {
				to[i>=j?i-j:i] = 1;
			}
		}
		for (int i = 0; i < N; i++) {
			z |= to[i] << i;
		}
		S.insert(dfs(z));
	}
	int opt = 0;
	while (S.count(opt)) opt++;
	return t[x] = opt;
}
int get(int x) {
	if (x < 1<<N) return dfs(x);
	int b[30] = {}, hi = 0;
	for (int i = 0; i < 30; i++) {
		b[i] = x >> i & 1;
		if (b[i]) hi = i;
	}
	set<int> S;
	for (int j = 1; j <= hi; j++) {
		int to[30] = {};
		int z = 0;
		for (int i = 0; i <= hi; i++) {
			if (b[i]) {
				to[i>=j?i-j:i] = 1;
			}
		}
		for (int i = 0; i <= hi; i++) {
			z |= to[i] << i;
		}
		S.insert(get(z));
	}
	int opt = 0;
	while (S.count(opt)) opt++;
	return opt;
}
int b[30];
int go(vector<int> &v) {
	for (int i = 0; i < 30; i++) {
		b[i] = 0;
	}
	for (int i = 0; i < v.size(); i++) {
		b[v[i]] = 1;
	}
	int x = 0;
	for (int i = 0; i < 30; i++) {
		x |= b[i] << i;
	}
	return get(x);
}
int main() {
	int n;
	for (int i = 2; i < 34010; i++) {
		a[i] = 1;
		p.push_back(i);
		for (int j = i + i; j < 34010; j += i) {
			a[j] = 1;
		}
	}
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		int x;
		scanf("%d", &x);
		for (int j = 0; j < p.size(); j++) {
			if (x % p[j] == 0) {
				int c = 0;
				while (x % p[j] == 0) {
					x /= p[j];
					c++;
				}
				m[p[j]].push_back(c);
			}
		}
		if (x != 1) {
			m[x].push_back(1);
		}
	}
	for (int i = 0; i < 1 << N; i++) {
		t[i] = -1;
	}
	t[0] = t[1] = 0;
	int f = 0;
	for (I it = m.begin(); it != m.end(); it++) {
		f ^= go(it->second);
	}
	puts(f ? "Mojtaba" : "Arpa");
	return 0;
}
