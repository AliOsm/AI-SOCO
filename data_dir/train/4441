#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <bitset>
#include <complex>
#include <unordered_map>

//#pragma comment(linker, "/STACK:512000000")

using namespace std;

#define pb emplace_back
#define mp make_pair
#define all(a) (a).begin(), (a).end()
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int infi = 1e9 + 7;
const ll infl = (ll)1e18 + (ll)7;

vector<vector<int> > ar;
int s[100500];
vector<int> ind;
void erase(int &sum, int i) {
    int j = ind[i];
    sum -= s[i];
    swap(ind[i], ind.back());
    ar.pop_back();
}
int main() {
    cin.sync_with_stdio(false);
    cin.tie(0);
   // freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    //freopen("customs.in", "r", stdin); freopen("customs.out", "w", stdout);
    int n, m;
    cin >> n >> m;
    ar.resize(m);
    
    forn(i, m)
        ind.pb(i);
    forn(i, n) {
        int s, r;
        cin >> s >> r;
        --s;
        ar[s].pb(r);
    }
    forn(i, m) {
        sort(all(ar[i]));
        reverse(all(ar[i]));
    }
    int ans = 0;
    int sum = 0;
    for (int q = 0; ind.size(); ++q) {
        forn(qwe, ind.size()) {
            int i = ind[qwe];
            if (q >= ar[i].size()) {
                sum -= s[i];
                swap(ind[qwe], ind.back());
                ind.pop_back();
                --qwe;
                continue;
            }
            s[i] += ar[i][q];
            sum += ar[i][q];
            if (s[i] <= 0) {
                sum -= s[i];
                swap(ind[qwe], ind.back());
                ind.pop_back();
                --qwe;
                continue;
            }
        }
        if (ind.empty())
            break;
        ans = max(ans, sum);
    }
    cout << ans << endl;

    return 0;
}