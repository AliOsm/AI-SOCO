#include <iostream>
#include <vector>
#include <cstdlib>
#include <algorithm>
using namespace std;

typedef long long ll;
const int MX=100*1000+9;
ll a[MX];
vector<ll> pos[MX];
int n, m;

const ll INF=1000LL*1000LL*1000LL*1000LL;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> m;
    for(int i=0; i<m; i++)
    {
        cin >> a[i];
        pos[a[i]].push_back(i);
    }

    ll ans_begin=0LL;
    for(int i=0; i+1<m; i++) ans_begin+=abs(a[i+1]-a[i]);

    ll best_gain=0;
    for(int i=1; i<=n; i++)
    {
        if(pos[i].empty()) continue;
        ll current_sum=0LL;

        vector<int> current;
        for(size_t j=0; j<pos[i].size(); j++)
        {
            int posit=pos[i][j];
            if(0<=posit-1 && a[posit-1]!=i)
            {
                current.push_back(a[posit-1]);
                current_sum+=abs(a[posit-1]-i);
            }
            if(posit+1<m && a[posit+1]!=i)
            {
                current.push_back(a[posit+1]);
                current_sum+=abs(a[posit+1]-i);
            }
        }

        if(current.empty()) continue;
        sort(current.begin(), current.end());
        ll best_sum=0;
        int sz=current.size();
        ll best_val=current[sz/2];
        for(int j=0; j<sz; j++) best_sum+=abs(current[j]-best_val);
        best_gain=max(best_gain, current_sum-best_sum);
    }
    cout << ans_begin-best_gain;

    return 0;
}
