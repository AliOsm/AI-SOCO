/*input
10 5
XXXX....XX
XXXX.XX.X.
....XXXX..
XXX...X...
XXX..XXXXX
X..XX.....
XXXXXX...X
XX...XXX.X
.X..X....X
..XX...XXX
*/
#include <iostream>
#include <cstdio>
#include <vector>
#include <functional>
#include <math.h>
#include <string.h>
#include <utility>
#include <algorithm>
#include <iomanip>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <stdlib.h>
#include <list>
#include <assert.h>
#include <time.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define ll long long
#define tick {cout << "HERE" << endl; }
#define N 505
#define dot '.'
template<class T>
void maximize(T &x, T y) {
	if (x < y) x = y;
}
template<class T>
void minimize(T &x, T y) {
	if (x > y) x = y;
}

int n, k;
char grid[N][N];
int cur_cc = 0, times = 0;
int cc_size[N * N];
int cc[N][N], when_added[N * N];
int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};
int best_ans = 0;
void loadgrid() {
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			cin >> grid[i][j];
		}
	}
}

bool inside(int x, int y) {
	if (min(x, y) >= 1 && max(x, y) <= n) return true;
	return false;
}

void dfs(int x, int y, int pos) {
	cc[x][y] = pos;
	cc_size[pos]++;
	for (int i = 0; i < 4; i++) {
		int ax = x + dx[i];
		int ay = y + dy[i];
		if (inside(ax, ay) && cc[ax][ay] == 0 && grid[ax][ay] == dot) {
			dfs(ax, ay, pos);
		}
	}
}

void add(int x, int y, int &answer, int cur_time) {
	if (inside(x, y) && grid[x][y] == dot) {
		if (when_added[cc[x][y]] != cur_time) {
			when_added[cc[x][y]] = cur_time;
			answer += cc_size[cc[x][y]];
		}
	}
}
int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> k;
	loadgrid();
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			if (grid[i][j] == dot && cc[i][j] == 0) {
				dfs(i, j, ++cur_cc);
			}
		}
	}
	for (int low_y = 1; low_y + k <= n + 1; low_y++) {
		for (int x = 1; x <= k; x++) {
			for (int y = low_y; y < low_y + k; y++) {
				cc_size[cc[x][y]]--;
			}
		}
		for (int low_x = 1; low_x + k <= n + 1; low_x++) {
			++times;
			int answer = k * k;
			for (int x = low_x; x < low_x + k; x++) {
				add(x, low_y - 1, answer, times);
				add(x, low_y + k, answer, times);

			}
			for (int y = low_y; y < low_y + k; y++) {
				add(low_x - 1, y, answer, times);
				add(low_x + k, y, answer, times);
			}
			maximize(best_ans, answer);
			if (low_x + k != n + 1) {
				for (int y = low_y; y < low_y + k; y++) {
					++cc_size[cc[low_x][y]];
					--cc_size[cc[low_x + k][y]];
				}
			}
		}
		for (int x = n - k + 1; x <= n; x++) {
			for (int y = low_y; y < low_y + k; y++) {
				cc_size[cc[x][y]]++;
			}
		}
	}
	cout << best_ans << endl;
}