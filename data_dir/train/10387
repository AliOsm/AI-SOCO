#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <cstdio>
#include <map>
#include <unordered_map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <unordered_set>
#include <stack> 
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
#define sz(a) (int)a.size()
#define pb push_back
const int MAXN = 35 * 1000;
const double EPS = 1e-9;
typedef long long LL;


int main(int argc, char* argv[]) {

#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("numbers.in", "r", stdin); freopen("numbers.out", "w", stdout);
#endif
	int n;
	scanf("%d", &n);
	vector<int> a(n);
	forn(i, 0, n) {
		scanf("%d", &a[i]);
	}

	int ans = 0;
	int bad = -1;
	forn(i, 0, n) {
		if (a[i] == i + 1) {
			if (bad != -1) {
				a[i] = bad + 1;
				ans++;
			}
			else {
				bad = i;
			}
		}
	}

	vector<char> used(n);
	if (bad != -1) {
		used[bad] = 2;
	}

	vector<int> olda = a;

	for (int i = 0; i < n; ++i) {
		if (used[i]) continue;

		int v = i;
		while (true) {
			if (used[v]) break;
			used[v] = 1;
			v = a[v] - 1;
		}

		if (v == bad) {
			v = i;
			while (true) {
				if (used[v] == 2) break;
				used[v] = 2;
				v = a[v] - 1;
			}
			continue;
		}
		else {
			if (used[v] == 2) {
				v = i;
				while (true) {
					if (used[v] == 2) break;
					used[v] = 2;
					v = a[v] - 1;
				}
				continue;
			}
		}

			ans++;

			if (bad == -1) {
				bad = v;
			}

			a[v] = bad + 1;
			v = i;
			while (true) {
				if (used[v] == 2) break;
				used[v] = 2;
				v = olda[v] - 1;
			}
			continue;
	}

	printf("%d\n", ans);
	forn(i, 0, n) {
		printf("%d ", a[i]);
	}

	return 0;
}
