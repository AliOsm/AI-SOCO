
#include <bits/stdc++.h>
using namespace std;
typedef long long int lli;

string s; lli sl;
const int LOG = 20 , LEN = 1e6 + 5;
int score[LOG][LEN];
int depth = 0;

struct tuple
{
	int first , second , index;
	bool friend operator < ( tuple  p , tuple q )
	{
		if ( p.first == q.first  ) return p.second  < q.second;
		return p.first < q.first;
	}
} L [LEN];

void buildSuffixArray()
{
	depth = 0;
	for ( int i=0 ; i<sl ; i++ ) score[0][i] = s[i];
	
	for ( int step = 1 , cnt=1 ; cnt<sl ; step++ , cnt*=2 )
	{
		for ( int i=0 ; i<sl ; i++ )
		{
			L[i].first = score[step-1][i];
			L[i].second = i+cnt < sl ? score[step-1][i+cnt] : -1;
			L[i].index = i;
		}
		sort( L , L+sl );
		
		int now = 0;
		score[step][L[0].index] = now;
		for ( int i=1 ; i<sl ; i++ )
		{
			if ( L[i].first != L[i-1].first || L[i].second != L[i-1].second )
				now++;
			score[step][L[i].index] = now;
		}
		depth = step;
	}
}

int lcp( int x , int y )
{
	if ( x == y ) return sl - x;
	int ret = 0;
	for ( int k = depth ; k>=0 && x<sl && y<sl ; k-- )
	{
		if ( score[k][x] == score[k][y] )
		{
			int cnt = 1 << k;
			ret += cnt;
			x += cnt , y += cnt;
		}
	}
	return ret;
}

int main()
{
	cin>>s;
	s = s + s;
	sl = s.length();
	
	buildSuffixArray();
	
	int len = sl / 2;
	int ans = 1 , last = -1;
	for ( int i=0 ; i<sl ; i++ )
	{
		int ind = L[i].index;
		// cout<<L[i].index<<" : "<<s.substr( ind )<<"\n";
		
		if ( ind < len )
		{
			if ( last != -1 )
			{
				int sz = lcp( last , ind );
				if ( sz < len ) ans++; 
			}
			last = ind;
		}
	}
	
	cout<<ans<<"\n";
	return 0;
}


