#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace std;
using namespace __gnu_pbds;
typedef tree<
        pair<int, int> , // change type
        null_type,
        less<pair<int, int> >, // change type
        rb_tree_tag,
        tree_order_statistics_node_update>
        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define per(i, start, end) for(int i = (int)start-1; i >= end; --i)
#define sz(x) (int)(x).size()
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-8);

int n, m;
bool grid[105][10005];
int closestOne[105][10005];
void findClosestOne(int st, int en, int mv) //[st, en)
{
    for (int i = 0; i < n; ++i)
    {
        int lastOne = -1, firstOne = -1;
        bool allZeros = true;
        for (int j = st; j != en; j += mv)
        {
            if (grid[i][j] == 1)
            {
                closestOne[i][j] = 0;
                lastOne = j;
                if (firstOne == -1)
                    firstOne = j;
                allZeros = false;
            }
            else if (lastOne != -1)
            {
                closestOne[i][j] = min(closestOne[i][j], min(abs(j - lastOne), m - abs(j - lastOne)));
                closestOne[i][j] = min(closestOne[i][j], m - abs(j - firstOne));
            }
        }
        if (allZeros)
        {
            cout << -1 << '\n';
            exit(0);
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
/*
 * Traverse each row, Find closest one to each index
 * Traverse column by column, answer is minimum sum of all closestOne array of each row of this index
 * if any row is all zeros answer -1, terminate
 */
    clr(closestOne, 0x7F);
    cin >> n >> m;
    for (int i = 0; i < n; ++i)
    {
        string s;
        cin >> s;
        for (int j = 0; j < m; ++j)
            grid[i][j] = (s[j] - '0');
    }

    findClosestOne(0, m, 1);
    findClosestOne(m - 1, -1, -1);

    int ans = INT_MAX;
    for (int j = 0; j < m; ++j)
    {
        int sum = 0;
        for (int i = 0; i < n; ++i)
        {
            sum += closestOne[i][j];
        }
        ans = min(ans, sum);
    }
    cout << ans << '\n';
    return 0;
}