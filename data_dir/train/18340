#include <bits/stdc++.h>

using namespace std;

int n;

void add(int *f, int x, int v) {
  while (x <= n + n) {
    f[x] += v;
    x = (x | (x - 1)) + 1;
  }
}

int get(int *f, int x) {
  int res = 0;
  while (x > 0) {
    res += f[x];
    x &= x - 1;
  }
  return res;
}

int x[100010];
int r[100010];
vector <int> a[10010];
int f[2][200010];
int pos[100010];
int was[100010];

int main() {
  int k;
  scanf("%d %d", &n, &k);
  for (int i = 0; i < 10000; ++i) {
    a[i].clear();
  }
  for (int i = 0; i < n; ++i) {
    int foo;
    scanf("%d %d %d", x + i, r + i, &foo);
    a[foo - 1].push_back(i);
  }
  memset(f, 0, sizeof f);
  memset(was, 0, sizeof was);
  int st = 0;
  long long ans = 0;
  for (int i = 0; i < 10000; ++i) {
    if (a[i].size() == 0) {
      continue;
    }
    vector < pair < int, pair <int, int> > > byx;
    for (int id : a[i]) {
      byx.push_back({x[id], {id, 0}});
    }
    for (int j = max(0, i - k); j < i; ++j) {
      for (int id : a[j]) {
        byx.push_back({x[id], {id, 1}});
      }
    }
    sort(byx.begin(), byx.end());
    for (int j = 0; j < byx.size(); ++j) {
      pos[byx[j].second.first] = j + 1;
    }
    set < pair < int, pair <int, int> > > s;
    ++st;
    for (int j = 0; j < byx.size(); ++j) {
      int id = byx[j].second.first;
      while (!s.empty()) {
        int id2 = (*s.begin()).second.first;
        if (x[id2] + r[id2] >= x[id]) {
          break;
        }
        int t = (*s.begin()).second.second;
        add(f[t], pos[id2], -1);
        was[id2] = st;
        s.erase(s.begin());
      }
      int t = byx[j].second.second;
      int ll = -1, rr = j;
      while (rr - ll > 1) {
        int ss = (ll + rr) / 2;
        if (x[id] - r[id] <= byx[ss].first) {
          rr = ss;
        } else {
          ll = ss;
        }
      }
      ans += get(f[0], j) - get(f[0], rr);
      if (t == 0) {
        ans += get(f[1], j) - get(f[1], rr);
      }
      add(f[t], j + 1, 1);
      s.insert({x[id] + r[id], {id, t}});
    }
    for (auto e : byx) {
      int id = e.second.first;
      if (was[id] != st) {
        int t = e.second.second;
        add(f[t], pos[id], -1);
      }
    }
  }
  printf("%lld", ans);
}