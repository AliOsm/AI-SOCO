#include <bits/stdc++.h>

#define eb emplace_back
#define pb push_back
#define ll long long
#define ld long double
#define mp make_pair
#define ull unsigned long long
#define all(s) s.begin(), s.end()
#define sz(a) (int)a.size()

const int INF = (int)1e9 + 7;
const int N = (int)7070 + 7;
const int MAXN = (int)5e5 + 228;

using namespace std;

vector<pair<ll, int> > a;

bitset<N> better[N];
int cnt[N];
bool ban[N], ok;
int ver, n;
ll sum;

void dfs(int v) {
  if (ban[v]) return;
  if (cnt[v] >= ver - 1) {
    ban[v] = 1;
    ok = 1;
    sum -= a[v].second;
    ver--;
    for (int i = 0; i < n; ++i) {
      if (better[i][v]) cnt[i]--;
    }
    for (int i = 0; i < n; ++i) {
      if (!ban[i] && cnt[i] >= ver - 1) dfs(i);
    }
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);

#ifdef Local
  freopen(".in", "r", stdin);
#else
  // freopen("sum.in", "r", stdin);
  // freopen("sum.out", "w", stdout);
#endif
  cin >> n;
  for (int i = 0; i < n; ++i) {
    ll x;
    cin >> x;
    a.push_back({x, 0});
  }
  for (int i = 0; i < n; ++i) {
    int y;
    cin >> y;
    a[i].second = y;
  }
  sort(all(a));
  vector<pair<int, int> > S;
  for (int i = 0; i < n; ++i) {
    sum += a[i].second;
    for (int j = 0; j < n; ++j) {
      ll x = a[i].first, y = a[j].first;
      if ((x & (x ^ y)) > 0) better[i][j] = 1;
      if (better[i][j]) cnt[i]++;
    }
    S.push_back({cnt[i], i});
  }
  bitset<N> rem;
  sort(all(S));
  reverse(all(S));
  ver = n;
  do {
    ok = 0;
    for (auto &to : S) {
      if (ban[to.second]) continue;
      dfs(to.second);
    }
  } while (ok);
  cout << sum << endl;

  return 0;
}