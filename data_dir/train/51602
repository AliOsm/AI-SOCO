#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const ll inf = 2e18;

int n , m , t;
vector< bitset<1000> > g;

int dx[4] = {0,0,-1,1};
int dy[4] = {-1,1,0,0};

char f[1001];
ll dist[1001][1001];
int vis[1001][1001];


queue< pair<int,int >  > v;

void bfs(int a , int b){
	memset(vis,-1,sizeof vis);
	for(int i = 0 ; i < n ;++i){
		for(int j = 0 ; j < m;++j){
			if(g[i][j] == a && (i+j)%2 == b){
				vis[i][j] = 0;
				v.push(make_pair(i,j));
			}
		}
	}
	while(v.size()){
		pair<int,int> fr = v.front();
		v.pop();
		for(int dir = 0 ; dir < 4 ; ++dir){
			int newX = dx[dir]+fr.first;
			int newY = dy[dir]+fr.second;
			if(newX >= 0 && newY >= 0 && newX < n && newY < m && vis[newX][newY] == -1){
				vis[newX][newY] = vis[fr.first][fr.second]+1;
				v.push(make_pair(newX,newY));
			}
		}
	}
	for(int i = 0 ; i < n ;++i){
		for(int j = 0 ; j < m;++j){
			if(g[i][j] == a && (i+j)%2 != b && vis[i][j] != -1){
				dist[i][j] = min(dist[i][j],1ll*vis[i][j]);
			}
		}
	}
	for(int i = 0 ; i < n ;++i){
		for(int j = 0 ; j < m;++j){
			if(g[i][j] != a && (i+j)%2 == b && vis[i][j] != -1){
				dist[i][j] = min(dist[i][j],1ll*vis[i][j]);
			}
		}
	}
}
int main(){
	cin >> n >> m >> t;
	for (int i = 0; i < n; ++i){
		for(int j = 0 ; j < m ;++j){
			dist[i][j] = inf;
		}
	}
	g.resize(n);
	for (int i = 0; i < n; ++i){
		scanf("%s",f);
		for(int j = 0; j < m;++j){
			g[i][j]= (f[j] == '1');
		}
	}

	for(int it = 0;it < 2;++it){
		for(int ev = 0 ; ev < 2 ;++ev){
			bfs(it,ev);
		}
	}


	for (int a,b,i = 0; i < t; ++i){
		ll c;
		scanf("%d%d%lld",&a,&b,&c);
		--a,--b;
		if(dist[a][b] == -1){
			printf("%d\n",g[a][b]*1);
		}else if(dist[a][b] > c){
			printf("%d\n",g[a][b]*1);
		}else{
			bool change = (c-dist[a][b])%2;
			if(!change){
				printf("%d\n",(!g[a][b])*1);
			}else{
				printf("%d\n",g[a][b]*1);
			}
		}
	}
  return 0;
}