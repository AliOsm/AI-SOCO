#pragma comment(linker, "/stack:20000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>

//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/detail/standard_policies.hpp>

#define f first
#define s second

#define pb push_back
#define pp pop_back
#define mp make_pair

#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define rep(i, l, r) for (int i = l; i <= r; i++)
#define per(i, l, r) for (int i = l; i >= r; i--)

#define dbg(x) cerr << (#x) << " --> " << (x) << nl;
#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

#define Toktama ""

using namespace std;
//using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
//typedef tree < pair <int, int>, null_type, less < pair <int, int> >, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 2e6 + 7, inf = 1e9 + 7, mod = 1e9 + 7;
const ll linf = (ll)1e18 + 7;
const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1}, dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

int get_int() {
  char x = getchar();
  bool mns = 0;
  while (!isdigit(x)) mns |= x == '-', x = getchar();
  int res = 0;
  while (isdigit(x)) res = res * 10 + x - '0', x = getchar();
  if (mns) res = -res;
  return res;
}
void add(int &x, int y) {
  x += y;
  if (x >= mod) x -= mod;
  if (x < 0) x += mod;
}
int mult(int x, int y) {
  return x * 1ll * y % mod;
}
int sum(int x, int y) {
  add(x, y);
  return x;
}

int n;
int a[N];
int cnt[N];
int slow(int l, int r) {
  int res = 0;
  rep(i, l, r)
    res += abs(a[i] - (i - l + 1));
  return res;
}
int calc_L(int l, int r) {
  int res = 0;
  rep(i, l, r)
    if (a[i] - (i - l + 1) < 0) res += abs(a[i] - (i - l + 1));
  return res;
}
int calc_R(int l, int r) {
  int res = 0;
  rep(i, l, r)
    if (a[i] - (i - l + 1) > 0) res += abs(a[i] - (i - l + 1));
  return res;
}
int cnt_L(int l, int r) {
  int res = 0;
  rep(i, l, r)
    if (a[i] - (i - l + 1) < 0) res++;
  return res;
}
int cnt_R(int l, int r) {
  int res = 0;
  rep(i, l, r)
    if (a[i] - (i - l + 1) > 0) res++;
  return res;
}
void solve() {
  n = get_int();
  rep(i, 1, n)
    a[i] = get_int(), a[i + n] = a[i];
  ll sol = 0, on = 0;
  int l = 0, r = 0, mid = 0;
  rep(i, n + 1, 2 * n) {
    int id = i - n;
    if (a[i] - id < 0) sol += abs(a[i] - id), l++;
    else if (a[i] - id > 0) on += a[i] - id, r++, cnt[a[i] - id]++;
    else mid++;
  }
  ll mn = linf;
  int ans = -1;
  for (int L = n + 1, R = 2 * n, now = 0, ptr = 1; now < n; now++, ptr++) {
    //cerr << L << ' ' << R << ' ' << sol + on << ' ' << slow(L, R) << " -> " << sol << ' ' << on << " check " << calc_L(L, R) << ' ' << calc_R(L, R) << nl;
    //cerr << " Look -> " << l << ' ' << r << " -> " << cnt_L(L, R) << ' ' << cnt_R(L, R) << nl;
    if (sol + on < mn) mn = sol + on, ans = now;
    if (a[R] - n == 0) mid--;
    else if (a[R] - n > 0) on -= a[R] - n, cnt[a[R] - n]--, r--;
    else sol -= abs(a[R] - n), l--;
    R--;
    on -= r;
    r -= cnt[ptr];
    sol += mid;
    sol += l;
    l += mid;
    mid = cnt[ptr];
    L--;
    //if (L == 3) cerr << " -> " << sol + on << nl;
    if (a[L] - 1 == 0) mid++;
    else on += a[L] - 1, cnt[a[L] - 1 + ptr]++, r++;
  }
  cout << mn << ' ' << ans;
}
int main() {
  #ifndef Toktama
    freopen (Toktama".in", "r", stdin);
    freopen (Toktama".out", "w", stdout);
  #endif
  int t = 1;
  while (t--)
    solve();
  ioi
}
