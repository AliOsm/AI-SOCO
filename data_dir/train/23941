#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

ll read_long() {
    ll ans = 0;
    char c;
    bool started = false;
    bool is_negative = false;
    while (true) {
        c = getchar();
        if ((c < '0' || c > '9') && c != '-' && !started) continue;
        if ((c < '0' || c > '9') && c != '-' && started) break;
        if (started) {
            ans = ans * 10;
        }
        started = true;
        if (c == '-') is_negative = true;
        else ans += c - '0';
    }
    if (is_negative) ans *= -1;
    return ans;
}

int n;
vector<pair<int, pii> > e;
int p[100100];

int get_parent(int a) {
    if (a == p[a]) return a;
    return p[a] = get_parent(p[a]);
}

bool merge(int a, int b) {
    a = get_parent(a);
    b = get_parent(b);
    if (a == b) return false;
    if (rand() & 1) p[a] = b;
    else p[b] = a;
    return true;
}

int solve(int n) {
    e.clear();
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            e.pb(mp(i^j, mp(i, j)));
        }
        p[i] = i;
    }
    sort(all(e));
    int ans = 0;
    forit (it, e) {
        int len = it->f;
        int x = (*it).s.f;
        int y = (*it).s.s;
        int ver = merge(x, y);
        if (ver) ans += len;
    }
    return ans;
}

ll calc(ll n) {
    if (n <= 5) return solve(n + 1);
    return 2ll * calc(n / 2) + (n + 1) / 2;
}

int main(){

    ll n;

    cin >> n;

    cout << calc(n - 1) << endl;

    return 0;
}
