#include<bits/stdc++.h>
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define INF 2000000000
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)

using namespace std;

int dist[81];
int adj[81][81];
vector<pair<int,int>>best[81][81];
int n,k;
bool present[81];
vector<int>selected;
vector<int>other;
int ans = INF;

void solve()
{
	other.clear();
	for(int i = 1; i <= n; i++)
		dist[i] = INF;
	for(int p = 0;p < selected.size();p++)
	{	
		int a = selected[p];
		for(int q = 0; q < selected.size();q++)
		{
			int b = selected[q];
			for(int i = 0; i < best[a][b].size();i++)
			{
				if(present[best[a][b][i].second])
					continue;
				other.push_back(best[a][b][i].second);
				break;
			}
		}
	}
	dist[1] = 0;
	if(other.size() == 0)
	{
		dist[1] = INF;
		return;
	}
    for(int turn = 1; turn <= k; turn++)
    {
    	if(turn%2)
    	{
    		for(auto node:other)
    		{
    			dist[node] = INF;
    			for(auto it:selected)
    			{
    				if(turn == 1 && (it != 1))
    					continue;
    				dist[node] = min(dist[node],dist[it] + adj[it][node]);
    			}
    		}
    	}
    	else
    	{
    		for(auto it:selected)
    		{
    			dist[it] = INF;
    			for(auto node:other)
    				dist[it] = min(dist[it],dist[node] + adj[node][it]);
    		}
    	}
    }
}

int main()
{
    IOS;
    #ifndef ONLINE_JUDGE
    	freopen("input.txt", "r", stdin);
    	freopen("output.txt", "w", stdout);
    #endif
    cin >> n >> k;
    for(int i = 1; i <= n; i++)
    {
    	for(int j = 1; j <= n; j++)
    		cin >> adj[i][j];
    }
    for(int i = 1; i<=n; i++)
    {
    	for(int j = 1; j<=n; j++)
    	{
    		for(int u = 1; u <= n;u++)
    		{
    			if(u == i || u == j)
    				continue;
    			int val = adj[i][u] + adj[u][j];
    			best[i][j].push_back({val,u});
    		}
    		sort(best[i][j].begin(),best[i][j].end());
    	}
    }
    selected.push_back(1);
    present[1] = true;
    solve();
    ans = min(ans,dist[1]);
	if(k == 4)
    {
	    for(int i = 2; i <= n; i++)
	    {
	    	present[i] = true;
	    	selected.push_back(i);
		    solve();
		    ans = min(ans,dist[1]);
		    present[i] = false;
		    selected.pop_back();
	    }
	}
    if(k == 6)
    {
	    for(int i = 2; i <= n; i++)
	    {
	    	present[i] = true;
	    	selected.push_back(i);
	    	solve();
		    ans = min(ans,dist[1]);
		    for(int j = i+1; j<=n; j++)
		    {
		    	present[j] = true;
		    	selected.push_back(j);
		    	solve();
		    	ans = min(ans,dist[1]);
		    	present[j] =false;
		    	selected.pop_back();
		    }
		    present[i] = false;
		    selected.pop_back();
	    }
	}
	if(k == 8)
    {
	    for(int i = 2; i <= n; i++)
	    {
	    	present[i] = true;
	    	selected.push_back(i);
	    	solve();
		    ans = min(ans,dist[1]);
		    for(int j = i+1; j<=n; j++)
		    {
		    	present[j] = true;
		    	selected.push_back(j);
		    	solve();
		    	ans = min(ans,dist[1]);
		    	for(int p = j+1; p<=n; p++)
			    {
			    	present[p] = true;
			    	selected.push_back(p);
			    	solve();
			    	ans = min(ans,dist[1]);
			    	present[p] = false;
			    	selected.pop_back();
			    }
		    	present[j] =false;
		    	selected.pop_back();
		    }
		    present[i] = false;
		    selected.pop_back();
	    }
	}
	if(k == 10)
    {
	    for(int i = 2; i <= n; i++)
	    {
	    	present[i] = true;
	    	selected.push_back(i);
	    	solve();
		    ans = min(ans,dist[1]);
		    for(int j = i+1; j<=n; j++)
		    {
		    	present[j] = true;
		    	selected.push_back(j);
		    	solve();
		    	ans = min(ans,dist[1]);
		    	for(int p = j+1; p<=n; p++)
			    {
			    	present[p] = true;
			    	selected.push_back(p);
			    	solve();
			    	ans = min(ans,dist[1]);
			    	for(int q = p+1; q<=n; q++)
				    {
				    	present[q] = true;
				    	selected.push_back(q);
				    	solve();
				    	ans = min(ans,dist[1]);
				    	present[q] =false;
				    	selected.pop_back();
				    }
			    	present[p] =false;
			    	selected.pop_back();
			    }
		    	present[j] =false;
		    	selected.pop_back();
		    }
		    present[i] = false;
		    selected.pop_back();
	    }
	}
	cout << ans;
}  	 	

