#include<bits/stdc++.h>
using namespace std;
#define M 100005

struct node
{
    int u, in;
    node() {}
    node(int u, int in): u(u), in(in) {}
};

struct edge
{
    int u, v;
}ara[M];

int n, m, in[M];

struct cmp
{
    bool operator()(const node& a, const node& b) const
    {
        if(a.in != b.in) return a.in > b.in;
        else a.u > b.u;
    }
};

bool cck(int val)
{
    int i, j, k, p, q, x, y;
    vector<int>vec[M];
    priority_queue<node, vector<node>, cmp>pq;

    memset(in, 0, sizeof(in));

    for(i = 1; i <= val; i++)
    {
        int u = ara[i].u, v = ara[i].v;
        vec[u].push_back(v);
        in[v]++;
    }

    for(i = 1; i <= n; i++) pq.push(node(i, in[i]));

    for(j = 1; j <= n; j++)
    {
        node temp = pq.top();
        p = temp.u;
        pq.pop();

        if(!pq.empty() && pq.top().in == 0) return false;
        for(i = 0; i < vec[p].size(); i++)
        {
            in[vec[p][i]]--;
            pq.push(node(vec[p][i], in[vec[p][i]]));
        }
    }
    return true;

}

int main()
{
    int i, j, k, p, q, x, y, st, ed, mid;

    cin>>n>>m;
    for(i = 1; i <= m; i++) cin>>ara[i].u>>ara[i].v;

    st = 0, ed = m+1;
    while(st+1 != ed)
    {
        mid = (st+ed)>>1;
        if(cck(mid)) ed = mid;
        else st = mid;
    }
    if(ed == m+1) ed = -1;

    cout<<ed<<endl;

    return 0;
}
