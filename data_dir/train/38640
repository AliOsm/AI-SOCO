#include <bits/stdc++.h>
using namespace std;

// Template Headers {{{
using pii = pair<int, int>; using vpii = vector<pii>;
using vi = vector<int>; using vvi = vector<vi>;
using ll = long long; using vll = vector<long long>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
template <class T, class U> istream &operator>>(istream &, pair<T, U> &);
template <class T, class U> ostream &operator<<(ostream &, const pair<T, U> &);
constexpr int INF = 0x3f3f3f3f; constexpr ll BINF = 0x3f3f3f3f3f3f3f3fLL;
// mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
// }}}

int solve() {
	int h, w; cin >> h >> w;
	vector<string> v(h); cin >> v;
	int mnx = INF, mny = INF, mxx = -INF, mxy = -INF;
	int cx = -1, cy = -1;
	for (int i=1;i+1<h;i++) for (int j=1;j+1<w;j++) {
		if (v[i][j] == '.') continue;
		if (v[i-1][j] == '*' && v[i+1][j] == '*' && v[i][j-1] == '*' && v[i][j+1] == '*') {
			if (cx != -1) {
				cout << "NO" << endl;
				return 0;
			}
			cx = i; cy = j;
		}
	}
	if (cx == -1) {
		cout << "NO" << endl;
		return 0;
	}
	for (int i=0;i<h;i++) for (int j=0;j<w;j++) {
		if (v[i][j] == '.') continue;
		mnx = min(mnx, i);
		mxx = max(mxx, i);
		mny = min(mny, j);
		mxy = max(mxy, j);
	}
	for (int i=mnx;i<=mxx;i++) for (int j=mny;j<=mxy;j++) {
		if (i == cx || j == cy) {
			if (v[i][j] == '.') {
				cout << "NO" << endl;
				return 0;
			}
		} else {
			if (v[i][j] == '*') {
				cout << "NO" << endl;
				return 0;
			}
		}
	}
	cout << "YES" << endl;
	return 0;
}

// Template Main {{{
int main() {
	ios::sync_with_stdio(0);
	// precompute();
	// int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << (solve() ? "YES" : "NO") << endl;
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it, os << " \n"[++it==v.end()];
	return os;
}

template <class T, class U> istream &operator>>(istream &is, pair<T, U> &p) {
	return is >> p.first >> p.second;
}

template <class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) {
	return os << p.first << ' ' << p.second;
}
// }}}

// vim: fdm=marker
