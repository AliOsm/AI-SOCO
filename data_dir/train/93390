/*****Enigma27*****/
#include<bits/stdc++.h>
#define start_routine clock_t begin = clock();
#define end_routine clock_t end = clock(); double elapsed_secs = double(end - begin) /CLOCKS_PER_SEC;return cerr<<"\nTime elapsed : "<<elapsed_secs<<" seconds\n",0;
#define ll          long long
#define pb          push_back
#define endl        '\n'
#define pll         pair<ll int,ll int>
#define vll          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define x           first
#define y           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll int i=a;i<b;i++)
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define gcd(a,b)    __gcd((a),(b))
#define lcm(a,b)    ((a)*(b)) / gcd((a),(b))
#define ios     ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
using namespace std;
ll n,i,j,k,l,t,sum=0,flag=0,dp[505][505],a[505][505],b[505];
stack<ll> vertex,ans;
vll v;
int main()
{
    ios
    for(int i=0;i<=500;i++) for(int j=0;j<=500;j++) if(i!=j)dp[i][j]=hell;
    cin>>n;
    for(int i=1;i<=n;i++){
    	for(int j=1;j<=n;j++){
    		cin>>a[i][j];
    	}
    }
    for(int t=0;t<n;t++){
    	cin>>k;
    	vertex.push(k);
    }
    while(!vertex.empty()){
    	int node = vertex.top();
    	vertex.pop();
    	ll temp=0;
    	v.pb(node);
    	for(int i=1;i<=n;i++) dp[i][node]=min(a[i][node],dp[i][node]),dp[node][i]=min(a[node][i],dp[node][i]);
    	for(int i=1;i<=n;i++){
    		for(int j=1;j<=n;j++){
    			if(dp[i][node]<hell && dp[node][j]<hell)
    				dp[i][j]=min(dp[i][j],dp[i][node]+dp[node][j]);
    		}
    	}
    	for(auto i:v) for(auto j:v) temp+=dp[i][j];
    	ans.push(temp);
    }
    while(!ans.empty()){
    	cout<<ans.top()<<" ";
    	ans.pop();
    }
    return 0;
}