#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
#define dbl(k, x) fixed << setprecision(k) << (x)

template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define _upgrade ios_base::sync_with_stdio(0);
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 2e5 + 7;

int n, T[N];
char s[N];

int col[N];

void solve()
{
    cin >> n >> (s + 1);
    for(int i = 1; i <= n; i++)
        T[i] = s[i] - '0';
    
    for(int c = 0; c < 10; c++)
    {
        bool can = true;

        for(int i = 1; i <= n; i++)
            col[i] = 2;

        int last = 0, pos = 0;
        for(int i = 1; i <= n; i++)
        {
            if(T[i] < last)
            {
                can = false;
                break;
            }
            if(last <= T[i] && T[i] < c)
            {
                col[i] = 1;
                last = T[i];
                pos = i;
            }
        }

        for(int i = pos + 1; i <= n; i++)
        {
            if(T[i] == c)
            {
                col[i] = 1;
            }
        }

        last = c;
        for(int i = 1; i <= n; i++)
        {
            if(col[i] == 2)
            {
                if(last > T[i])
                {
                    can = false;
                    break;
                }
                last = T[i];
            }
        }

        if(can)
        {
            for(int i = 1; i <= n; i++)
                cout << col[i];
            cout << "\n";
            return;
        }
    }
    cout << "-\n";
}

int main()
{
    _upgrade
    
    int t; cin >> t;
    while(t--)
    {
        solve();
    }

	return 0;
}