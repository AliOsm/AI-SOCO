#include <bits/stdc++.h>

using namespace std;

#define endl '\n'
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define fi first
#define se second
#define mp make_pair
#define pb push_back


int n, m, p;
char arr[1005][1005];
queue<pair<int, int>> cells[10]; //remove from here

int free_cells, current_player;

int ans[10], s[10];

int dx[4] = {0, 0, 1, -1};
int dy[4] = {1, -1, 0, 0};

bool valid(int x, int y){
    return (x >= 0 && x < n && y >= 0 && y < m && arr[x][y] == '.');
}

void bfs(){
    queue<pair<pair<int, int>, int>>tempqueue;
    while(!cells[current_player].empty()){
        int x = cells[current_player].front().first;
        int y = cells[current_player].front().second;
        cells[current_player].pop();
        tempqueue.push({{x, y}, 0});
    }
    while(!tempqueue.empty()){
        int x = tempqueue.front().fi.fi;
        int y = tempqueue.front().fi.se;
        int turn = tempqueue.front().se;
        tempqueue.pop();
        for(int i = 0; i < 4; ++i){
            if(!valid(x + dx[i], y + dy[i]))continue;
            arr[x + dx[i]][y + dy[i]] = char(current_player + '0');
            free_cells--;
            if(turn == s[current_player] - 1){
                cells[current_player].push({x + dx[i], y + dy[i]});
            }
            else{
                tempqueue.push({{x + dx[i], y + dy[i]}, turn + 1});
            }            
        }

    }
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
 
    scanf("%d%d%d",&n,&m,&p);
    for(int i = 1; i <= p; ++i){
        scanf("%d",&s[i]);
    }

    for(int i = 0; i < n; ++i){
        for(int j = 0; j < m; ++j){
            scanf(" %c",&arr[i][j]);
            if(arr[i][j] >= '1' && arr[i][j] <= '9'){
                int x = arr[i][j] - '0';
                cells[x].push({i, j});
            }
            if(arr[i][j] == '.')free_cells++;
        }
    }

    current_player = 1;
    int prev = free_cells;
    int ctr = 0;

    while(1){
        bfs();

        if(prev == free_cells)ctr++;
        else ctr = 0;
        if(ctr >= p)break;
        
        prev = free_cells;

        current_player = current_player + 1;
        if(current_player > p)current_player = 1;
    }

    for(int i = 0; i < n; ++i){
        for(int j = 0; j < m; ++j){
            if(arr[i][j] >= '1' && arr[i][j] <= '9'){
                ans[arr[i][j] - '0']++;
            }    
        }
    }

    for(int i = 1; i <= p; ++i) printf("%d ",ans[i]);
    cout << endl;

    return 0;
}