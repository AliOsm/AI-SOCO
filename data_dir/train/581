#include <bits/stdc++.h>
using namespace std;
const int N = 2e5+1;
int n, c[N], a[N];
int disc[N], low[N], t, cp, comp[N], cost[N];
bool mark[N], inStack[N];
vector<int> adj[N];
stack<int> st;
void dfs(int u)
{
	disc[u] = low[u] = ++t;
	inStack[u] = 1;
	st.push(u);
	for(int i=0; i<adj[u].size(); i++)
	{
		int v = adj[u][i];
		if(disc[v] == -1)
		{
			dfs(v);
			low[u] = min(low[v], low[u]);
		}
		else if(inStack[v])
		low[u] = min(low[u], disc[v]);
	}
	if(low[u] == disc[u])
	{
		++cp;
		while(st.top() != u)
		{
			int node = st.top();
			st.pop();
			comp[node] = cp;
			cost[cp] = min(cost[cp], c[node]);
			inStack[node] = 0;
		}
		int node = st.top();
		st.pop();
		comp[node] = cp;
		cost[cp] = min(cost[cp], c[node]);
		inStack[node] = 0;
	}
}
void tarjan()
{
	memset(low, -1, sizeof low);
	memset(disc, -1, sizeof disc);
	memset(inStack, 0, sizeof inStack);
	for(int i=0; i<n; i++)
	if(disc[i] == -1)
	dfs(i);
}

int main()
{
	memset(cost, 0x3f3f3f3f, sizeof cost);
	cin >> n;
	for(int i=0; i<n; i++) cin >> c[i];
	for(int i=0; i<n; i++)
	{
	 	cin >> a[i], a[i]--;
		if(i != a[i])adj[i].push_back(a[i]);
	}
	int ans = 0;
	tarjan();
	for(int i=0; i<n; i++)
	{
		if(comp[i] == comp[a[i]])
		{
			mark[comp[i]] = 1;
		}
	}
	for(int i=1; i<=n; i++)
	{
		if(mark[i])
		ans += cost[i];
	}
	cout << ans << endl;
}