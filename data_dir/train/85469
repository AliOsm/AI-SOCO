#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((ll)(1e19 + 5))
#define MAXL ((ll)(1e10 + 5))
#define MAX_X ((int)(1e6 + 2))
#define pi (2.0*acos(0))
#define M ((int)(998244353))
#define NN ((ll)(305))
#define N ((int)(1e5 + 5))
#define eps (0)
#define fastio ios_base::sync_with_stdio(false),cin.tie(NULL)
#define log 29
#define endl "\n"
//#define int ll


using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long ull;

/*fast io
ios_base::sync_with_stdio(false);
cin.tie(NULL);
*/


typedef tree < int ,  null_type,  less < int >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;
/// o_set s;
/// s.order_of_key(k) : Number of items strictly smaller than k .
/// *(s.find_by_order(k)) : K-th element in a set (counting from zero).

struct info{
    int a, b , c;
};

int main()
{
    fastio;
    int n;
    vector < info > edg;
    vector < int > v[2];
    cin>>n;
    priority_queue < pair < int , int > > pqq[2];
    int nod[2], hvy[2];
    nod[0] = nod[1] = -1;
    for(int i = 1; i<=n; i++){
        bool col;
        int val;
        cin>>col>>val;
        nod[col] = i;
        //cout<<col<<" "<<val<<endl;
        if(val==0){
            v[col].push_back(i);
        }
        else{
            pqq[col].push({-val,i});
        }
    }

    map < pair < int , int > , bool > mmm;

    for(int i = 0; i<2; i++){
        for(int a:v[i]){
            if(!mmm[{a,nod[!i]}]){
                edg.push_back({a,nod[!i],0});
                mmm[{a,nod[!i]}] = mmm[{nod[!i],a}] = 1;
            }
        }
    }

    while(!pqq[0].empty() && !pqq[1].empty()){

        pair < int, int > p[2];
        p[0] = pqq[0].top();
        p[1] = pqq[1].top();
        pqq[0].pop();
        pqq[1].pop();

        int a = max(p[0].first,p[1].first);

        edg.push_back({p[0].second,p[1].second,-a});
        p[0].first -= a;
        p[1].first -= a;
        if(p[0].first!=0) pqq[0].push(p[0]);
        else pqq[1].push(p[1]);

    }

    //assert(edg.size()==n-1);

    for(auto p:edg) cout<<p.a<<" "<<p.b<<" "<<p.c<<endl;
    return 0;

}
