#include <bits/stdc++.h>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef double ld;
#define int ll
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector< vi > vvi;
typedef vector< vvi > vvvi;
typedef vector<pii> vpi;
typedef vector<short> vs;
typedef vector<vs> vvs;
typedef vector<vvs> vvvs;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vvl> vvvl;
typedef vector<ld> vld;
typedef vector<vld> vvld;
typedef vector<vvld> vvvld;
typedef vector<string> vst;
typedef vector<vst> vvst;
typedef pair<ld, ld> pld;
typedef complex<double> base;

#define inmin(a, b) a = min(a, (b))
#define inmax(a, b) a = max(a, (b))
#define mp(a, b) make_pair(a, (b))
#define ALL(a) a.begin(),a.end()
#define RALL(a) a.rbegin(),a.rend()
#define sqr(x) ((x) * (x))
#define fori(i, n) for(int i = 0; i < int(n); ++i)
#define SZ(a) ((int)((a).size()))
#define triple(T) tuple<T, T, T>
#define quad(T) tuple<T, T, T, T>
#define watch(x) cout << (#x) << " = " << x << endl;
#ifdef MAX_HOME
#define cerr cout
#else
#define cerr if (false) cerr
#endif


void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
    cerr << *it << " = " << a << endl;
    err(++it, args...);
}

const double PI = 2 * acos(0.0);

const string DIGITS = "0123456789";
const string ALPH = "abcdefghijklmnopqrstuvwxyz";


istream &operator >> (istream &in, pii &a)
{
    in >> a.first >> a.second;
    return in;
}


template <class T0, class T1>
inline ostream & operator << (ostream &out, pair<T0, T1> &a) {
    return out << "{" << a.first << ", " << a.second << "}";
}

template <class T0, class T1, class T2>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) << ", " << get<2>(a) << "}";
}

template <class T0, class T1, class T2, class T3>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2, T3> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) <<
               ", " << get<2>(a) << ", " <<  get<3>(a) << "}";
}

template<class T>
inline ostream & operator << (ostream &out, vector<T> &a) {
    out << "[";
    fori (i, a.size())
        out << a[i] << vector<string>{", ", "]  "}[i + 1 == a.size()];
    return out;
}



void smain();

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

#ifdef ART_HOME
    freopen("input.txt", "r", stdin);
    clock_t start = clock();
#endif
    cout << setprecision(12) << fixed;
    smain();
#ifdef ART_HOME
    cout << "\n\n\n\nTOTAL EXECUTION TIME: " << float( clock () - start ) /  CLOCKS_PER_SEC << endl;
#endif
}

const ll M = 1e9 + 7, x = 139;
const int N = 2e5 + 100;


void smain() {
    int n;
    cin >> n;
    string s, f;

    cin >> s >> f;

    vi first, second;
    vi _0, _1, _2, _3;

    for (int i = 0; i < n; ++i)
    {
        if (s[i] == '1' && f[i] == '1')
        {
            _0.push_back(i);
        }
        else if (s[i] == '1')
            _1.push_back(i);
        else if (f[i] == '1')
            _2.push_back(i);
        else
            _3.push_back(i);
    }

    for (int i = 0; i < SZ(_0) + 1; ++i)
    {
        first.clear(), second.clear();

        for (int j = 0; j < i; ++j)
            first.push_back(_0[j]);

        for (int j = i; j < SZ(_0); ++j)
            second.push_back(_0[j]);

        vi kek = _1, lol = _2, cp = _3;

        while (SZ(first) > SZ(second) && SZ(lol))
        {
            second.push_back(lol.back());
            lol.pop_back();
        }

        while (SZ(second) > SZ(first) && SZ(kek))
        {
            first.push_back(kek.back());
            kek.pop_back();
        }

        if (SZ(first) != SZ(second))
            continue;

        while (min(SZ(kek), SZ(lol)))
        {
            second.push_back(lol.back());
            lol.pop_back();
            first.push_back(kek.back());
            kek.pop_back();
        }

        if (max(SZ(kek), SZ(lol)) <= SZ(cp))
        {
            while (SZ(first) != n / 2)
            {
                if (SZ(kek))
                {
                    second.push_back(kek.back());
                    kek.pop_back();
                    first.push_back(cp.back());
                    cp.pop_back();
                } else if (SZ(lol))
                {
                    second.push_back(cp.back());
                    cp.pop_back();
                    first.push_back(lol.back());
                    lol.pop_back();
                } else
                {
                    first.push_back(cp.back());
                    cp.pop_back();
                }
            }

            for (int v : first)
                cout << v + 1 << ' ';

            return;
        }
    }

    cout << "-1";
}
