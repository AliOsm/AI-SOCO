#include <bits/stdc++.h>
using namespace std;
typedef pair<int,int> ii;

vector<int> adj[100005];
int dep[100005], dp[100005][20], res[100005], add[100005];
map<ii, int> mapa, idx;

void dfs(int u, int p, int d){
    dep[u] = d;
    dp[u][0] = p;
    for(int v : adj[u])
        if(v != p)
            dfs(v, u, d+1);
}

int lca(int u, int v){
    if(dep[u] < dep[v]) swap(u, v);
    int diff = dep[u]-dep[v];
    for(int i = 0; i < 20; i++)
        if((1 << i)&diff)
            u = dp[u][i];
    if(u == v) return u;
    for(int i = 19; i >= 0; i--)
        if(dp[u][i] != dp[v][i]){
            u = dp[u][i];
            v = dp[v][i];
        }
    return dp[u][0];
}

void solve(int u, int p){
    for(int v : adj[u])
        if(v != p){
            solve(v, u);
            add[u] += add[v];
        }
    mapa[{u,p}] += add[u];
}

int main(){

    int n; scanf("%d", &n);
    for(int i = 0; i < n-1; i++){
        int u, v; scanf("%d %d", &u, &v);
        idx[{u,v}] = idx[{v,u}] = i;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1, 0, 0);
    for(int j = 1; j < 20; j++)
        for(int i = 1; i <= n; i++)
            dp[i][j] = dp[dp[i][j-1]][j-1];

    int m; scanf("%d", &m);
    while(m--){
        int u, v; scanf("%d %d", &u, &v);
        int l = lca(u, v);
        add[u]++; add[v]++;
        add[l] -= 2;
    }
    solve(1, 0);
    for(auto par : mapa)
        res[idx[par.first]] = par.second;
    for(int i = 0; i < n-1; i++)
        printf("%d ", res[i]);
    printf("\n");
    return 0;
}