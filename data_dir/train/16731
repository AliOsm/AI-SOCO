#include<stdio.h>
#include<iostream>
#include<string.h>
#include<queue>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#include<fstream>
#include<cmath>
#include<iomanip>
#include<time.h>
using namespace std;
#define ll long long
#define ull unsigned long long
#define inf 1000000007
#define mod 1000000007
#define pii pair<int,int>
#define vi vector<int>
#define VS vector<string>
#define all(x) x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define N 1010
#define pi 3.14159265358979323846
#define DBG(vari) cerr<<#vari<<"="<<(vari)<<endl;
#define FOREACH(i,t) for(__typeof(t.begin()) i=t.begin();i!=t.end();i++)

int a[N][N],ans,top,top1,u[N][N],d[N][N],l[N][N],r[N][N],n,m;
pii q[N],q1[N];
void solve()
{
                for(int i=0,j=0;i<=top&&j<=top1;)
                {
                    if(q[i].x<q1[j].x)
                    {
                        ans=max(ans,q[i].x*(q1[j].y-q[i].y+1));
                        i++;
                    }
                    else if(q[i].x==q1[j].x)
                    {
                        ans=max(ans,q[i].x*(q1[j].y-q[i].y+1));
                        i++,j++;
                    }
                    else 
                    {
                        ans=max(ans,q1[j].x*(q1[j].y-q[i].y+1));
                        j++;
                    }
                }
}
void fun(int x,int y,int l[][N])
{
    top=top1=-1;
    int i,j;
    for(i=x;i>=1&&l[i][y];i--);
                for(i++;i<=x;i++)
                {
                    int z=i;
                    while(top>=0&&q[top].x>=l[i][y])
                    z=q[top].y,top--;
                    if(l[i][y])q[++top]=mp(l[i][y],z);
                }
                for(i=x;i<=n&&l[i][y];i++);
                for(i--;i>=x;i--)
                {
                    int z=i;
                    while(top1>=0&&q1[top1].x>=l[i][y])
                    z=q1[top1].y,top1--;
                    if(l[i][y])q1[++top1]=mp(l[i][y],z);
                }
                solve();
}
void fun1(int x,int y,int d[][N])
{
    top=top1=-1;
    int i,j;
    for(i=y;i>=1&&d[x][i];i--);
                for(i++;i<=y;i++)
                {
                    int z=i;
                    while(top>=0&&q[top].x>=d[x][i])
                    z=q[top].y,top--;
                    if(d[x][i])q[++top]=mp(d[x][i],z);
                }
                for(i=y;i<=m&&d[x][i];i++);
                for(i--;i>=y;i--)
                {
                    int z=i;
                    while(top1>=0&&q1[top1].x>=d[x][i])
                    z=q1[top1].y,top1--;
                    if(d[x][i])q1[++top1]=mp(d[x][i],z);
                }
                solve();
}
int main()
{
    int T,i,j,ca=0,k,Q;
    while(~scanf("%d%d%d",&n,&m,&Q))
    {   
        for(i=1;i<=n;i++)
        for(j=1;j<=m;j++)scanf("%d",&a[i][j]);
        for(i=n;i>=1;i--)
        {
            for(j=1;j<=m;j++)
            d[i][j]=(a[i][j]==0?0:1+d[i+1][j]),l[i][j]=(a[i][j]==0?0:1+l[i][j-1]);
        }
        for(i=1;i<=n;i++)
        {
            for(j=m;j>=1;j--)
            r[i][j]=(a[i][j]==0?0:1+r[i][j+1]),u[i][j]=(a[i][j]==0?0:1+u[i-1][j]);
        }
        while(Q--)
        {
            int x,y;
            scanf("%d%d%d",&k,&x,&y);
            if(k==1)
            {
                a[x][y]=1-a[x][y];
                for(i=x,j=y;i>=1;i--)
                {
                    d[i][j]=(a[i][j]==0?0:1+d[i+1][j]);
                }
                for(j=y,i=x;j<=m;j++)
                {
                    l[i][j]=(a[i][j]==0?0:1+l[i][j-1]);
                }
                for(i=x,j=y;i<=n;i++)
                {
                    u[i][j]=(a[i][j]==0?0:1+u[i-1][j]);
                }
                for(j=y,i=x;j;j--)
                {
                    r[i][j]=(a[i][j]==0?0:1+r[i][j+1]);
                }
            }
            else
            {
                if(a[x][y]==0){puts("0");continue;}
                ans=0;
                fun(x,y,l);
                fun(x,y,r);
                fun1(x,y,d);
                fun1(x,y,u);
                printf("%d\n",ans);
            }
        }
    }
    return 0;
}