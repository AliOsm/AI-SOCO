#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <iostream>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
#define BASE 10007LL
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
const ll MOD = (ll)1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v[100005], ck[100005];

int n;
int check[100005];

const ll p[2] = { 1000000009, 1000000021 };
int two[2][200005];
int ha[2][200005];

ll cal(int i, int j) {
	ll a = ((ha[0][i - 1] - ha[0][j] + p[0]) % p[0]) * two[0][i] % p[0];
	ll b = ((ha[1][i - 1] - ha[1][j] + p[1]) % p[1]) * two[1][i] % p[1];

	return a * p[1] + b;
}

void init(int nn, vector<int> &s) {
	for (int i = 0; i < 2; i++) {
		for (int j = 1; j <= nn; j++)
			ha[i][j] = (ha[i][j - 1] + (s[j] * (ll)two[i][nn - j]) % p[i]) % p[i];
	}
}

void gg(int o) {
	init(sz(ck[o]) - 1, ck[o]);

	int pt = sz(ck[o]) / 2;
	ll tt = cal(1, 1 + pt - 1);
	int kk = ck[o][1];

	for (int i = 2; i + pt - 1 < sz(ck[o]); i++) {
		if (cal(i, i + pt - 1) == tt) check[kk]++;
		kk += ck[o][i];
	}
}

int main() {
	int m;
	scanf("%d %d", &n, &m);

	for (int i = 0; i < 2; i++) {
		two[i][0] = 1;
		for (int j = 1; j <= 2 * n; j++)
			two[i][j] = two[i][j - 1] * BASE % p[i];
	}

	int a, b;
	for (int i = 0; i < m; i++) {
		scanf("%d %d", &a, &b);
		a--; b--;
		if (((b - a + n) % n) * 2 > n) swap(a, b);
		if (((b - a + n) % n) * 2 == n) {
			v[((b - a + n) % n)].push_back(a);
			v[((a - b + n) % n)].push_back(b);
		}
		else v[((b - a + n) % n)].push_back(a);
	}

	int cnt = 0;
	for (int i = 0; i < n; i++) {
		sort(all(v[i]));
		ck[i].push_back(0);

		int kk = sz(v[i]);
		for (int j = 0; j < kk; j++)
			v[i].push_back(v[i][j] + n);

		for (int j = 1; j < sz(v[i]) - 1; j++)
			ck[i].push_back(v[i][j] - v[i][j - 1]);

		if (sz(ck[i]) > 1) gg(i);
		if (sz(v[i])) cnt++;
		// printf("pass");
	}

	for (int i = 0; i <= n; i++)
		if (check[i] == cnt) return !printf("Yes");
	printf("No");
}