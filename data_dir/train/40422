#include <iostream>
#include <vector>
#include <string>
#include <cassert>
#include <cstring>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <algorithm>
#include <map>
#include <cmath>
#include <numeric>
#include <functional>
#include <ctime>
#include <unordered_map>
#include <sstream>
#include <bitset>

using namespace std;
typedef long long Long;
typedef long double Double;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef pair<Long,Long> PLL;

int read(int &x) { return scanf("%d", &x); }
int read(int &x, int &y) { return scanf("%d%d", &x, &y); }
int read(int &x, int &y, int &z) { return scanf("%d%d%d", &x, &y, &z); }
int read(Long &x) { return scanf("%lld", &x); }
int read(Long &x, Long &y) { return scanf("%lld%lld", &x, &y); }
int read(double &x) { return scanf("%lf", &x); }
char buff[2000010];
int read(string &s) { int r = scanf("%s", buff); s = buff; return r; }

string S, T;
short mem[401][401][401];
short tes[401][401][401], testCase;
int dp(int it, int jt, int is) {
    if (is == S.size()) {
        return jt == T.size() ? 0 : -1000;
    }
    if (tes[it][jt][is] == testCase) return mem[it][jt][is];
    int w = -1000;
    if (jt < T.size() && S[is] == T[jt]) {
        w = max(w, dp(it, jt+1, is+1) + 1);
    }
    if (it < T.size() && S[is] == T[it]) {
        w = max(w, dp(it+1, jt, is+1) + 1);
    }
    w = max(w, dp(it, jt, is+1));
    tes[it][jt][is] = testCase;
    return mem[it][jt][is] = w;
}

int main() {

    int TC;
    read(TC);
    while (TC-->0) {
        testCase++;
        read(S); read(T);
        bool ok = false;
        for (int i = 0; i < T.size() && !ok; ++i) {
            int t = max(dp(0, i, 0), 0);
            if (t >= int(T.size())) {
                ok = true;
            }
        }
        cout << (ok ? "YES": "NO") << endl;

    }








}





