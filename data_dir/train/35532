#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

int toNumber (string s)
{
	int Number;
	if ( ! (istringstream(s) >> Number) ) Number = 0; // el string vacio lo manda al cero
	return Number;
}

string toString (int number)
{    
    ostringstream ostr;
    ostr << number;
    return  ostr.str();
}

struct Par
{
	Par()
	{
		x = 0;
		y = 0;
	}
	Par(tint xx, tint yy)
	{
		x = xx;
		y = yy;
	}
	tint x,y;

};

struct Casilla
{
	Casilla(char tt, bool pp, Par coord)
	{
		tipo = tt;
		pase = pp;
		coordenadas = coord;
	}
	char tipo;
	bool pase;
	Par coordenadas;
};



struct Recorrido
{
	Recorrido(tint pict, vector<Par> list)
	{
		pictures = pict;
		lista = list;
	}
	tint pictures;
	vector<Par> lista;
};

Recorrido bfs (vector<vector<Casilla> > &table, Par nodoInicial)
{
	vector<tint> movimientosX = {1,-1,0,0};
	vector<tint> movimientosY = {0,0,1,-1};
	deque<Casilla> vecinos = {table[nodoInicial.x][nodoInicial.y]};
	vector<Par> historia = {nodoInicial};  
	tint total = 0;
	while (!vecinos.empty())
	{
		Casilla nodoActual = vecinos.front();
		vecinos.pop_front();
		if (!table[nodoActual.coordenadas.x][nodoActual.coordenadas.y].pase)
		{
			historia.push_back(nodoActual.coordenadas);
			table[nodoActual.coordenadas.x][nodoActual.coordenadas.y].pase = true;
			forn(i,4)
			{
				Casilla vecino = table[nodoActual.coordenadas.x + movimientosX[i]][nodoActual.coordenadas.y + movimientosY[i]];
				if (vecino.tipo == '.' && !vecino.pase)
					vecinos.push_back(vecino);
				else if (vecino.tipo == '*')
					total++;
			}
			//debug(nodoActual.coordenadas.x);
			//debug(nodoActual.coordenadas.y);
			//debug(total);
			//cout << "----" << endl;
		}
	}
	return Recorrido(total, historia);
	
	
}


int main()
{
	ios_base::sync_with_stdio(0);
	tint n,m,k;
	cin >> n >> m >> k;
	vector<vector<Casilla> > table (n,vector<Casilla> (m,Casilla(0,0,Par(0,0))));
	forn(i,n)
	{
		string fila;
		cin >> fila;
		forn(j,m)
			table[i][j] = Casilla(fila[j],false,Par(i,j));
	}
	vector<vector<tint> > ans (n, vector<tint> (m,0));
	forn(i,n)
	{
		forn(j,m)
		{
			if (table[i][j].tipo == '.' && !table[i][j].pase)
			{
				Recorrido r = bfs(table,Par(i,j));
				for(auto p : r.lista)
					ans[p.x][p.y] = r.pictures;
			}
		}
	}
				
	
	forn(i,k)
	{
		tint a,b;
		cin >> a >> b;
		cout << ans[a-1][b-1] << endl;
	}
			
	return 0;
}



