//#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

const int N = 2010;

struct Edge
{
    int v, u, w;
    Edge(int v, int u, int w) : v(v), u(u), w(w) {};
    Edge() {};
    bool operator < (const Edge& other) const
    {
        return w < other.w;
    }
};


int n;
int d[N][N];
int parent[N];
int cnt[N];
vector < Edge > a;
vector < pair < int, int > > G[N];
bool used[N];

void make(int v)
{
    parent[v] = -1;
    cnt[v] = 1;
}

int find(int v)
{
    while (parent[v] != -1)
        v = parent[v];
    return v;
}

void Union(int v, int u)
{
    if (cnt[v] > cnt[u])
    {
        cnt[v] += cnt[u];
        parent[u] = v;
    }
    else
    {
        cnt[u] += cnt[v];
        parent[v] = u;
    }
}

bool dfs(int v, int root, int dist)
{
    used[v] = true;
    bool flag = (dist == d[v][root]);
    for (int i = 0; i < G[v].size(); ++i)
    {
        if (used[ G[v][i].first ] == false)
            flag &= dfs( G[v][i].first, root, dist + G[v][i].second);
    }
    return flag;
}

int main()
{
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i)
    {
        for (int j = 1; j <= n; ++j)
            scanf("%d", &d[i][j]);
    }
    for (int i = 1; i <= n; ++i)
    {
        for (int j = i + 1; j <= n; ++j)
        {
            if (d[i][j] != d[j][i] || d[i][i] != 0 || d[i][j] == 0) 
            {
                cout << "NO" << endl;
                return 0;
            }
        }
    }

    for (int i = 1; i <= n; ++i)
    {
        make(i);
        for (int j = i + 1; j <= n; ++j)
            a.push_back(Edge(i, j, d[i][j]));
    }

    sort(a.begin(), a.end());

    for (int i = 0; i < a.size(); ++i)
    {
        int u = find(a[i].u);
        int v = find(a[i].v);
        if (u == v)
            continue;
        Union(u, v);
        G[a[i].u].push_back(make_pair(a[i].v, a[i].w));
        G[a[i].v].push_back(make_pair(a[i].u, a[i].w));
    }

    for (int i = 1; i <= n; ++i)
    {
        memset(used, false, sizeof(used));
        if (dfs(i, i, 0) == false)
        {
            cout << "NO" << endl;
            return 0;
        }
    }
    cout << "YES" << endl;




    return 0;
}
