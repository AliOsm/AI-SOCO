#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define int ll
#define endl '\n';
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define floop(i,a,b) for(int i=a;i<=b;++i)
const ll mod=1e9+7;
const int maxn=1e5+5;
pair<int,int> t[4*maxn];
void update(int v,int l,int r,int x,pair<int,int>val){
	if(l>r) return ;
	if(l>x or r<x) return ;
	if(l==x and r==x) {
		if(t[v].first > val.first) return ;
		t[v]=val;
		return ;
	}
	update(2*v, l, (l+r)/2 , x, val);
	update(2*v+1, (l+r)/2+1, r, x, val);
	if(t[v].first < t[2*v].first) t[v] = t[2*v];
	if(t[v].first < t[2*v+1].first) t[v] = t[2*v+1];
}
pair<int,int> find(int v,int l,int r,int x,int y){
	if(l>r) return {0,0};
	if(l>y or r<x) return {0,0};
	if(x<=l and y>=r) return t[v];
	auto i=find(2*v, l, (l+r)/2, x,y);
	auto j=find(2*v+1, (l+r)/2+1 , r, x, y);
	if(i.first > j.first) return i;
	else return j;
}
int32_t main(){
	IOS;	
	int n,d;
	cin>>n>>d;
	int h[n],nextid[n];
	set<int>s;
	for (int i = 0; i < n; ++i)
	{
		cin>>h[i];
		s.insert(h[i]);
	}
	map<int,int> m;
	int j=0;
	for(auto &it:s){
		m[it]=j;
		j++;
	}
	j--;
	int ans=0,startindex=n;
	for(int i=n-1;i>=0;i--){
		auto it=s.lower_bound(h[i]+d);
		int val=1;
		nextid[i]=-1;
		if(it!=s.end()){
			auto temp = find(1,0,j, m[*it],j);
			if(val < 1+temp.first){
				val = 1+temp.first;
				nextid[i] = temp.second;
			}
		}
		it = s.upper_bound(h[i]-d);
		if(it!=s.begin()){
			it--;
			auto temp = find(1,0,j,0,m[*it]);
			if(val < 1+ temp.first){
				val = 1+ temp.first;
				nextid[i] = temp.second;
			}
		}
		update(1,0,j,m[h[i]],{val,i});
		if(ans<val){
			ans = val;
			startindex = i;
		}
		ans=max(ans,val);
	}
	cout<<ans<<endl;
	while(startindex!=-1){
		cout<<startindex+1<<' ';
		startindex = nextid[startindex];
	}
	cout<<endl;
	return 0;
}