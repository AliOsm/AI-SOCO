#include <algorithm>
#include <iostream>
#include <cstring>
#include <climits>
#include <cassert>
#include <iomanip>
#include <cstdio>
#include <vector>
#include <string>
#include <stack>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 121212;

int n, m, s;
int b[N], c[N];
pair<int,int> a[N];

struct data{
    int b,c,id;
    bool operator <(const data &a) const{
        return c < a.c;
    }
};
int ans[N];
data st[N];
vector<pair<int,int> > Out;

bool can(int k,bool out){
    set<pair<int,int> > vals;
    for(int i = m; i > 0; i -= k){
        vals.insert(make_pair(a[i].first,i));
    }
    long long pass = 0;
    if(out) Out.clear();
    for(int i = 1; i <= n; i++){
        __typeof(vals.begin()) it = vals.upper_bound(make_pair(st[i].b,inf));
        if(it != vals.begin() && vals.size() > 0){
            --it;
            if(out){
                Out.push_back(make_pair(st[i].id,it->second));
            }
            vals.erase(it);
            pass += st[i].c;
        }
    }
    if(out){
        foreach(it,Out){
            for(int i = it->second; i >= 0 && i > it->second - k; i--)
                ans[a[i].second] = it->first;
        }
    }
    return pass <= s && vals.size() == 0;
}

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#endif

    n = read();
    m = read();
    s = read();

    for(int i = 1; i <= m; i++){
        a[i].first = read();
        a[i].second = i;
    }

    sort(a + 1, a + 1 + m);

    for(int i = 1; i <= n; i++)
        b[i] = read();
    for(int i = 1; i <= n; i++)
        c[i] = read();

    for(int i = 1; i <= n; i++){
        st[i] = (data){b[i],c[i],i};
    }

    sort(st + 1, st + 1 + n);

    int l = 0, r = 1e5 + 5;

    while(l + 1 < r){
        int mid = (l + r) >> 1;
        if(can(mid,false)) r = mid;
        else l = mid;
    }

    eprintf("L : %d\n",r);

    if(can(r,false)){
        puts("YES");
        can(r,true);
        for(int i = 1; i <= m; i++)
            printf("%d ",ans[i]);
    }else{
        puts("NO");
    }

    return 0;

}
