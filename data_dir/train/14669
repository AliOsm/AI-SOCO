#include <bits/stdc++.h>
#pragma GCC optimize("O3")
using namespace std;

const int MAXN = 100000;
vector<int> ban[MAXN];
vector<pair<int, long long>> g[MAXN];
long long in[MAXN], out[MAXN];


class Solution {
  int n, m;
  const long long INF = 1e18;
  void init() {
    fill(in, in + MAXN, INF);
    fill(out, out + MAXN, INF);
    cin >> n >> m;
    while (m--) {
      int a, b; cin >> a >> b;
      long long c; cin >> c;
      --a, --b;
      g[a].emplace_back(b, c);
      g[b].emplace_back(a, c);
    }
    for (int i = 0; i < n; ++i) {
      int k; cin >> k;
      while (k--) {
        int a; cin >> a;
        ban[i].push_back(a);
      }
      sort(ban[i].rbegin(), ban[i].rend());
    }
  }
public:
  void run() {
    init();
    priority_queue<pair<long long, int>, vector<pair<long long, int>>, 
                   greater<pair<long long, int>>> pq;
    out[0] = in[0] = 0;
    pq.emplace(in[0], 0);

    while (pq.size()) {
      long long D; int u; tie(D, u) = pq.top(); pq.pop();
      if (D != in[u]) continue;
      while (ban[u].size() and ban[u].back() < out[u]) ban[u].pop_back();
      while (ban[u].size() and ban[u].back() == out[u]) ++out[u], ban[u].pop_back();
      for (auto P : g[u]) {
        int v; long long w; tie(v, w) = P;
        if (w + out[u] >= in[v]) continue;
        in[v] = out[v] = out[u] + w;
        pq.emplace(in[v], v);
      }
    }
    cout << (in[n - 1] == INF ? -1 : in[n - 1]) << '\n';
  }
};

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);
  Solution().run();
}
