#include <bits/stdc++.h>

using namespace std;
typedef long long ll;

const int N = 100005;
const ll mod = 998244353;

map<ll, int> fac;

ll sq(ll x){
    ll ans = (ll)sqrt(double(x));
    for(ll w = max(1LL, ans - 5); w <= ans + 5; w++)
        if(w * w == x) return w;
    return -1;
}

ll cb(ll x){
    ll ans = (ll)cbrt(double(x));
    for(ll w = max(1LL, ans - 5); w <= ans + 5; w++)
        if(w * w * w == x) return w;
    return -1;
}



vector<ll> v;

void solve(ll x){
    ll p = sq(x);

    if(p != -1){
        ll t = sq(p);
        if(t == -1) fac[p] += 2;
        else fac[t] += 4;
        return;
    }

    p = cb(x);
    if(p != -1){
        fac[p] += 3;
        return;
    }
    v.push_back(x);
}

int del[N];

int main(){


    int n;
    scanf("%d", &n);

    ll x;
    for(int i = 1; i <= n; i++){
        scanf("%lld", &x);
        solve(x);
    }

    n = (int)v.size();

    for(int i = 0; i < n; i++) if(!del[i]){
        for(auto w : fac){
            ll g = __gcd(v[i], w.first);
            if(g == 1) continue;
            fac[g]++;
            fac[v[i] / g]++;
            del[i] = 1;
            break;
        }
    }

    for(int i = 0; i < n; i++) if(!del[i]){
        for(int j = i+1; j < n; j++) if(!del[j]){
            if(v[i] == v[j]) continue;
            ll g = __gcd(v[i], v[j]);
            if(g == 1) continue;
            fac[g] += 2;
            fac[v[i]/g]++;
            fac[v[j]/g]++;
            del[i] = 1;
            del[j] = 1;
            break;
        }
    }
    
    for(int i = 0; i < n; i++) if(!del[i]){
        for(auto w : fac){
            ll g = __gcd(v[i], w.first);
            if(g == 1) continue;
            fac[g]++;
            fac[v[i] / g]++;
            del[i] = 1;
            break;
        }
    }

    map<ll, int> cnt;

    for(int i = 0; i < n; i++) if(!del[i])
        cnt[ v[i] ]++;

    ll ans = 1;

    for(auto w : fac) ans = (ans * (w.second + 1)) % mod;

    for(auto w : cnt){
        ans = (ans * (w.second + 1)) % mod;
        ans = (ans * (w.second + 1)) % mod;
    }

    printf("%lld\n", ans);
    fflush(stdout);
}
