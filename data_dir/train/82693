#include<iostream>
#include<cstring>
#include<algorithm>
#include<vector>
#include<queue>
#include<cmath>
#include<map>
using namespace std ;
#define ll long long 
#define all(x) x.begin() , x.end()
const int N = 3e5+1; 
int n , m ;
ll k ;
vector<pair<int,ll> > g[N];
ll cost[N];
map<ll , bool> vis , vis2;
void dijkstra(){
priority_queue< pair<ll,ll>, vector <pair<ll,ll> > , greater<pair<ll,ll> > > q;
//  priority_queue < pair < ll , int > > q;
    for( int i = 2 ; i <= n ; i++){
        if(cost[i] != 1e18)q.push(make_pair(cost[i] , i));
    }
     q.push(make_pair(0,1));
    cost[1]=0;
    while(!q.empty()){
        int current = q.top().second;
        ll cst = q.top().first;
        q.pop();
        if(cst > cost[current])continue;
        for( int i = 0 ; i<g[current].size();i++){
            int newnode = g[current][i].first;
            ll wight = g[current][i].second;
            if(cost[newnode] >= wight+cst)
                    vis2[newnode] = 0;
            if(cost[newnode] > wight+cst){
                cost[newnode]=wight+cst;
                q.push(make_pair(cost[newnode],newnode));
            }
        }
    }
 
}
int main(){
 //freopen("input.txt" ,"r",stdin);
 scanf("%d%d%lld",&n,&m,&k);
 for(int i=0;i<m;++i){
     int a ,b ,c ;
     scanf("%lld%lld%lld",&a,&b,&c);
     g[a].push_back(make_pair(b,c));
     g[b].push_back(make_pair(a,c));
 }
 for(int i=0;i<=n;++i)cost[i]=1e18;
 for(int i=0;i<k;++i){
     ll a , c ;
     scanf("%d%lld",&a,&c);
     vis2[a]=true;
     cost[a]=min((ll)cost[a],c);
 }
 dijkstra();
 ll an=k;
 for(int i=0;i<=n;++i)if(vis2[i])--an;
 
 cout << an << "\n";
}