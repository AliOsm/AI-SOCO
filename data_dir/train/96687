#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;

//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/rope>
//using namespace __gnu_pbds;
//using namespace __gnu_cxx;
//
//template<class T> using Tree = tree<T, null_type, less<T>, rb_t_tag,t_order_statistics_node_update>;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;
//const long long mod = 998244353;

// watch this
//using ll = long long;
//typedef long long LL;
#define ll long long
//#undef ll

int main(int argc, char** argv) {
#ifdef ONLINE_JUDGE
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
#endif

	int t;
	cin >> t;
	while (t--) {
		int N;
		long long l, r, x, y, z, b1, b2;
		cin >> N >> l >> r >> x >> y >> z >> b1 >> b2;
		long long a;
		vector<long long> neg(N + 1);
		long long md = (1ll << 32) - 1;
		long long sm = LLONG_MAX, lg = LLONG_MIN;
		long long res = LLONG_MAX;
		for (int i = 1; i <= N; i++) {
			long long b;
			if (i == 1)
				b = b1;
			else if (i == 2)
				b = b2;
			else {
				b = (b1 * x + b2 * y + z) & md;
				b1 = b2;
				b2 = b;
			}
			a = b % (r - l + 1) + l;
			if (a >= 0) {
				if (sm < a)
					res = min(res, a * sm);
			}
			neg[i] = a;
			sm = min(sm, a);
		}
		for (int i = N; i >= 1; i--) {
			if (lg > neg[i]) {
				res = min(res, neg[i] * lg);
			}
			lg = max(lg, neg[i]);
		}
		if (res == LLONG_MAX)
			cout << "IMPOSSIBLE\n";
		else
			cout << res << '\n';
	}

	return 0;
}
