//#inclue<AMID>
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define endl '\n'
#define Endl '\n'
#define fi first
#define ii pair<int, int>
#define se second
#define mod 1000000007
using namespace std;
int n, q;
const int MX=200020;
int st[MX], en[MX], depth[MX];
vector<int>v[MX];
bool vis[MX];
int a[MX];
int cnt=1;
void dfs(int node, int d){
    depth[node]=d%2;
    vis[node]=1;
    st[node]=cnt++;
    int sz=v[node].size();
    for(int i=0;i<sz;i++){
        int nx=v[node][i];
        if(!vis[nx])dfs(nx, d+1);
    }
    en[node]=cnt-1;
}
int bit[MX][2];
void u(int idx, int val, int id){
    while(idx<=n){
        bit[idx][id]+=val;
        idx+=idx&-idx;
    }
}
int quer(int idx, int id){
    int ret=0;
    while(idx){
        ret+=bit[idx][id];
        idx-=idx&-idx;
    }
    return ret;
}
int main() {
    cin>>n>>q;
    for(int i=1;i<=n;i++)cin>>a[i];
    for(int i=1;i<n;i++){
        int x, y;
        scanf("%d%d",&x, &y);
        v[x].pb(y);
        v[y].pb(x);
    }
    dfs(1,0);
    int ty, node, val;
    while(q--){
        scanf("%d%d",&ty, &node);
        if(ty==2){      // print query
            int ans=a[node]+quer(st[node], depth[node]);
            printf("%d\n",ans);
            continue;
        }
        int val;
        scanf("%d",&val);
        int d=depth[node];
        u(st[node]  ,  val ,  d  );
        u(en[node]+1,  -val,  d  );
        u(st[node]  ,  -val,  !d );
        u(en[node]+1,  val ,  !d );
    }
}

/*
5 1545
1 2 1 1 2
1 2
1 3
2 4
2 5
*/
