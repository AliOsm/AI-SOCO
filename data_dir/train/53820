#include<bits/stdc++.h>
using namespace std;
map<string, vector<int> >mp;
map<string, bool> pali;
vector<string>vec, palivec;
int dp[100100][2];

int solve(int idx, int odd)
{
	if (idx == palivec.size()) return 0;
	if (dp[idx][odd] != -1) return dp[idx][odd];
	int & ret = dp[idx][odd];
	ret = 0;
	string s = palivec[idx];
	int sum = 0;
	vector<int>values = mp[s];
	reverse(values.begin(), values.end());
	ret = max(ret, solve(idx + 1, odd));
	for (int i = 0; i < values.size(); i++)
	{
		sum += values[i];
		if (i % 2 == 0 && !odd) ret = max(ret, solve(idx + 1, 1) + sum);
	    if(i%2) ret = max(ret, solve(idx + 1, odd) + sum);
	}
	
	return	ret;
}
int main()
{
	int k, n;
	cin >> k >> n;
	string s, q;
	for (int i = 0; i <k; i++)
	{
		int x;
		cin >> s >> x;
		q = s;
		reverse(q.begin(), q.end());
		if (s == q) pali[s] = 1;
		mp[s].push_back(x);
		vec.push_back(s);
	}
	map<string, vector<int> >::iterator it = mp.begin();
	for (; it != mp.end(); it++) sort((it->second).begin(), (it->second).end());
	int ans = 0;
	for (int i = 0; i<vec.size(); i++)
	{
		s = vec[i];
		if (pali.count(s) && pali[s])
		{
			palivec.push_back(s);
			pali[s] = 0;
		}
		else if (pali.count(s) == 0)
		{
			q = s;
			reverse(q.begin(), q.end());
			if (mp.count(q) == 0 || mp[q].size() == 0 || mp[s].size() == 0) continue;
			int x = mp[s].back(), y = mp[q].back();
			if (ans + x + y >= ans) ans += (x + y), mp[s].pop_back(), mp[q].pop_back();
		}
	}
	memset(dp, -1, sizeof dp);
	int x = solve(0, 0);
	if (ans + x >= ans) ans += x;
	cout << ans << endl;
	return 0;
}
