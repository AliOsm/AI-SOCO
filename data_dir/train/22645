#include<bits/stdc++.h>
#define all(v) (v).begin(),(v).end()
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ri(x) scanf("%d",&(x))
#define ri2(x,y) scanf("%d %d",&(x),&(y))
#define ri3(x,y,z) scanf("%d %d %d",&(x),&(y),&(z))
#define rll(x) scanf("%lld",&(x))
#define rll2(x,y) scanf("%lld %lld",&(x),&(y))
#define rll3(x,y,z) scanf("%lld %lld %lld",&(x),&(y),&(z))
#define rc(x) scanf("%c",&(x))
using namespace::std;

const long double PI = acos(-1);
const int MOD = 1000000000 +7;

typedef long long ll;
typedef pair<ll,ll> pll;
typedef pair<ll,pll> tll;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef vector<ll> vll;
typedef vector<pll> vpll;
typedef vector<tll> vtll;
typedef vector<string> vs;
typedef set<int> si;
typedef set<ii> sii;
typedef set<iii> siii;

ll gcd(ll a, ll b){ return b==0?a:gcd(b,a%b);}

int add(ll a, ll b){ return (a%MOD + b%MOD+2*MOD)%MOD;}

int mul(ll a, ll b){ return ((a%MOD+MOD)*(b%MOD+MOD))%MOD;}

ll pow_mod(ll a, ll b){
	ll res = 1LL;
	a = add(a,0);
	while(b){
		if(b&1) res = mul(res,a);
		b >>= 1;
		a = mul(a,a);
	}
	return res;
}

ll fastexp(ll a, ll b){
	ll res = 1LL;
	while(b){
		if(b&1) res = res*a;
		b >>= 1;
		a *= a;
	}
	return res;
}

int gcdExtendido(int a, int b, int *x, int *y){
	if(a == 0){
		*x = 0;
		*y = 1;
		return b;
	}
	int x1, y1;
	int gcd = gcdExtendido(b%a,a,&x1,&y1);
	
	*x = y1-(b/a)*x1;
	*y = x1;
	return gcd;
};

int modInverso(int a, int m){
	int x, y;
	int g = gcdExtendido(a,m,&x,&y);
	if(g!=1) return -1;
	else return (x%m + m)%m;
}

/****************************************
*************P*L*A*N*T*I*L*L*A************
*****************************************/

int n;
int len;
string s;
int memo[105][55][300][3][3];
int v[3];

int dp(int pos, int k, int x, int dir, int next){
	if(k == 0){
		int carry = x;
		int carryd = dir;
		if(next) carry += v[carryd];
		else carryd = 1-carryd;
		for(int i=pos+1; i<len; i++){
			if(s[i]=='F') carry+=v[carryd];
			else carryd = 1-carryd;
		}
		return memo[pos][0][x][dir][next] = abs(150-carry);
	}
	if(pos==len-1){
		k %= 2;
		if(k){
			if(next) return abs(x-150);
			else return abs(x+v[dir]-150);
		}
		else{
			if(next) return abs(x+v[dir]-150);
			else return abs(x-150);
		}
	}
	if(memo[pos][k][x][dir][next]!=-1) return memo[pos][k][x][dir][next];
	int ans;
	if(next){
		ans = dp(pos+1,k,x+v[dir],dir,s[pos+1]=='F');
		ans = max(ans,dp(pos,k-1,x,dir,1-next));
	}
	else{
		ans = dp(pos+1,k,x,1-dir,s[pos+1]=='F');
		ans = max(ans,dp(pos,k-1,x,dir,1-next));
	}
	return memo[pos][k][x][dir][next] = ans;
}

int main(){
	memset(memo,-1,sizeof memo);
	v[0] = 1;
	v[1] = -1;
	cin >> s >> n;
	len = s.size();
	int ans = dp(0,n,150,0,s[0]=='F');
	cout << ans << endl;
	return 0;
}