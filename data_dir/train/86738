#pragma GCC optimize("Ofast,unroll-loops")
#pragma GCC target("avx,avx2")
#include <cstdio>
#include <vector>
#include <bitset>
#include <algorithm>
using namespace std;
int a[10010], mg[10010];
int main() {
	int n, m, r, g;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++) {
		scanf("%d", &a[i]);
	}
	sort(a, a + m);
	scanf("%d%d", &g, &r);
	for (int i = 0; i < m; i++) {
		mg[i] = 1001001001;
	}
	vector<int> v;
	v.push_back(0);
	mg[0] = 0;
	int cnt = 0;
	while (v.size()) {
		vector<int> nv;
		int p = *max_element(v.begin(), v.end());
		if (n - a[p] <= g) {
			printf("%d\n", cnt * (r + g) + n - a[p]);
			return 0;
		}
		for (int i = 0; i < v.size(); i++) {
			bitset<2010> b[2], c;
			b[0][1005] = 1;
			b[1][1005] = 1;
			int x = v[i], l = x - 1, r = x + 1;
			while (l >= 0 && a[x] - a[l] <= g) {
				c[1005-a[x]+a[l]] = 1;
				--l;
			}
			++l;
			while (r < m && a[r] - a[x] <= g) {
				c[1005+a[r]-a[x]] = 1;
				++r;
			}
			c[1005] = 1;
			for (int j = 0; j < g; j++) {
				bitset<2010> t = (b[0] | b[1]) & c;
				b[0] |= t;
				b[0] <<= 1;
				b[1] |= t;
				b[1] >>= 1;
			}
			for (int j = l; j < r; j++) {
				if (b[0][1005+a[j]-a[x]] | b[1][1005+a[j]-a[x]]) {
					if (mg[j] == 1001001001) {
						mg[j] = cnt + 1;
						nv.push_back(j);
					}
				}
			}
		}
		v.swap(nv);
		cnt++;
	}
	puts("-1");
	return 0;
}
