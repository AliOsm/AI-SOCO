#include <bits/stdc++.h>
using namespace std ;
// centroid decomposition
const int MAXN = 1e5 + 1 ;
const int MAXQ = 1e5 + 1 ;
const int LOGN = 18 ;
const int INF = 1e7 + 5 ;
int sub[MAXN] , dad[MAXN] ,sz , depth[MAXN] , n , q ,parent[MAXN][LOGN];
int ans[MAXN] ;
set<int> graph[MAXN] ;
void dfs(int node = 1 , int par = 0 , int dep = 0)
{
    parent[node][0] = par ;
    depth[node] = dep ;
    for(auto &child : graph[node]) {
        if(child != par) {
            dfs(child,node,dep+1);
        }
    }
}
void pre()
{
    dfs() ;
    for(int j = 1 ; j < LOGN ; ++j) {
        for(int i = 1 ; i <= n ; ++i) {
            parent[i][j] = parent[parent[i][j-1]][j-1] ;
        }
    }
}
int get_lca(int p,int q)
{
    int i,temp;
    //p should be deeper
    if(depth[p]<depth[q])
        swap(p,q);
    //now p is deeper
    //calculate log now
    int log;
    for(log=1; (1<<log) <= depth[p];log++);
    log--;
    //bring p to the same level as q
    for(i=log;i>=0;i--)
    {
        if(depth[p] - (1<<i) >= depth[q])
            p=parent[p][i];
    }
    if(p==q)return p;
    //now compute lca using dp table(P)
    for(i=log;i>=0;i--)
    {
        if(parent[p][i]!=-1&&parent[p][i]!=parent[q][i])
            p=parent[p][i],q=parent[q][i];
    }
    return parent[p][0];
}
void dfs1(int node,int par)
{
    sub[node] = 1 ;
    sz++ ;
    for(auto &child : graph[node]) {
        if(child != par) {
            dfs1(child,node) ;
            sub[node] += sub[child] ;
        }
    }
}
int find_centroid(int node,int par)
{
    for(auto &child : graph[node]) {
        if(child != par && sub[child] > sz/2)
            return find_centroid(child,node) ;
    }
    return node ;
}
void decompose(int node,int par)
{
    sz = 0 ;
    // calculate subtree sizes assuming node is the new root
    dfs1(node,0) ;
    // find centroid of this tree
    int centroid = find_centroid(node,0) ;
    dad[centroid] = par ;
    for(auto it : graph[centroid]) {
        graph[it].erase(centroid) ;
        decompose(it,centroid) ;
    }
    graph[centroid].clear() ;
}
int dis(int a,int b)
{
    int lca = get_lca(a,b) ;
    return depth[a] + depth[b] - 2*depth[lca] ;
}
void update(int node)
{
    // paint this node red
    int curr = node ;
    for(;;)
    {
        if(curr==0)return ;
        ans[curr] = min(ans[curr],dis(node,curr)) ;
        curr = dad[curr] ;
    }
}
int query(int node)
{
    // return distance to the closest red node
    int res = INF ;
    int curr = node ;
    for(;;)
    {
        if(curr==0)return res ;
        int distance = dis(node,curr) ;
        res = min(res , distance + ans[curr]) ;
        curr = dad[curr] ;
    }
}
int main()
{
    /* Centroid Decomposition is awesome */
    scanf("%d %d",&n,&q) ;
    for(int i = 1 ; i < n ; ++i) {
        int u , v ;
        scanf("%d %d",&u,&v) ;
        graph[u].insert(v) ;
        graph[v].insert(u) ;
    }
    pre() ;
    decompose(1,0) ;
    for(int i = 1 ; i <= n ; ++i ) {
        ans[i] = INF ;
    }
    update(1);
    while(q--)
    {
        int type,node ;
        scanf("%d%d",&type,&node) ;
        if(type==1) {
            update(node) ;
        }
        else {
            printf("%d\n",query(node)) ;
        }
    }
    return 0 ;
}
