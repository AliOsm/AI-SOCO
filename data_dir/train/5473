#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template<class T> using OS = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define ll long long
#define ld double
#define ull unsigned long long

typedef double T;
typedef complex<T> PT;
#define x real()
#define y imag()

double w, h, a;

PT rot(PT p, double a) { return p * polar(1.0, a); }

double get(PT p, double bY) {
    p = rot(p, a);
    double nY = p.y - bY;

    return nY * nY / sin(a) / cos(a);
}

int main() {
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);

    cin >> w >> h >> a;
    if (w < h) swap(w, h);
    a = min(a, 180 - a);
    if(a == 90) {
        return cout << fixed << setprecision(10) << min(w, h) * min(w, h), 0;
    } 
    if(a == 0) {
        return cout << fixed << setprecision(10) << w * h, 0;
    }

    a *= acos(-1) / 180;
    if (a < 2 * atan(h / w)) {
        cout << fixed << setprecision(10) << w * h - get(PT(w / 2, h / 2), h / 2) - get(PT(h / 2, w / 2), w / 2);
    } else {
        cout << fixed << setprecision(10) << h * h / sin(a);
    }

    return 0;
}