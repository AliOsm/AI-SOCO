#ifdef DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <random>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

mt19937 mrand(random_device{} ()); 

int rnd(int x) {
  return mrand() % x;
}

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;
typedef long long ll;

#ifdef DEBUG
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#else
#define eprintf(...) ;
#endif

#define pb push_back
#define mp make_pair
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int inf = (int) 1.01e9;
const ld eps = 1e-9;
const ld pi = acos((ld) -1.0);


const int mod = (int) 1e9 + 7;

int mult(int x, int y) {
  return (long long) x * y % mod;
}

void add(int &x, int y) {
  if ((x += y) >= mod) {
    x -= mod;
  }
}

int sum(int x, int y) {
  add(x, y);
  return x;
}

int myPower(int x, int pw) {
  int res = 1;
  for (; pw; pw >>= 1) {
    if (pw & 1) {
      res = mult(res, x);
    }
    x = mult(x, x);
  }
  return res;
}

int inv2, inv4;

void precalc() {
  inv2 = myPower(2, mod - 2);
  inv4 = mult(inv2, inv2);
}

const int maxn = (int) 1e5 + 10;

int n;

int read() {
  if (scanf("%d", &n) < 1) {
    return 0;
  }
  return 1;
}

int func(int xk) {
  return mult(inv4, mult(sum(1, mod - xk), myPower(sum(1, mod - inv4), mod - 2)));
}

void solve() {
  int whole = inv2;
  bool odd = 1;
  for (int i = 0; i < n; ++i) {
    long long x;
    scanf(LLD, &x);
    whole = myPower(whole, x % (mod - 1));
    if (!(x & 1)) {
      odd = 0;
    }
  }
  if (odd) {
    int cur = mult(whole, 2);
    printf("%d/%d\n", mult(func(cur), myPower(cur, mod - 2)), myPower(cur, mod - 2));
  } else {
    printf("%d/%d\n", mult(sum(1, mult(func(whole), myPower(whole, mod - 2))), inv2), mult(inv2, myPower(whole, mod - 2)));
  }
}

int main() {
  precalc();
#ifdef LOCAL
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time %.2f\n", (double) clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
