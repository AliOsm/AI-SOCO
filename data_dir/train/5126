#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
using namespace std;
#define MS0(I) memset(I, 0, sizeof(I));
#define MS1(I) memset(I, -1, sizeof(I));
#define rep(i, n) for(int i = 0; i < (n); ++i)
#define rep1(i, s, n) for(int i = (s); i < (n); ++i)
#define per1(i, a, b) for(int i = a; i >= b; --i)
#define DRI(A) int A; scanf("%d", &A);
#define DRII(A, B) int A, B; scanf("%d %d", &A, &B);
#define DRIII(A, B, C) int A, B, C; scanf("%d %d %d", &A, &B, &C);
#define DRL(A) long long A; scanf("%lld", &A);
#define DRLL(A, B) long long A, B; scanf("%lld %lld", &A, &B);
#define DRLLL(A, B, C) long long A, B, C; scanf("%lld %lld %lld", &A, &B, &C);
#define SZ(x) ((int)x.size() )
#define MP make_pair 
#define pb push_back
#define F first
#define S second
#define ALL(I) (I).begin(), (I).end()
#define ios std::ios::sync_with_stdio(false); std::cin.tie(0);
typedef const void CV;
typedef long long LL;
typedef unsigned long long ULL;
typedef double DB;
typedef long double LDB;
typedef pair<int, int> PII; 
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;
const double eps = 1e-13;
const double PI = acos(-1);
//////////////////////////////
const LL INFF = 1e18;
const int INF = 1e9;
const int mod = 1e9+7;
const int MAX = 1e6+7;
vector<LL>a;
int in[MAX];
int cnt[MAX];
int main(void){
  DRI(_t);
  while(_t--){
    DRI(n);
    a.resize(n);
    rep(i, n) scanf("%lld", &a[i]);
    LL v1 = 0, v2 = 0;
    sort(ALL(a));
    bool gg = 0;
    rep(i, n){
      if(in[ a[i] ] != _t){
        in[ a[i] ] = _t;
        cnt[ a[i] ] = 1;
      }
      else cnt[ a[i] ]++;
      if(cnt[ a[i] ] == 4){
        v1 = a[i], gg = 1; break;
      }
    }
    if(gg){
      rep1(i, 1, 5) printf("%lld%c", v1, " \n"[i == 4]);
      continue;
    }
    a.resize( unique(ALL(a)) - a.begin() );
    rep(i, SZ(a)){
      if(cnt[ a[i] ] <= 1){
        swap(a[i], a.back());
        a.pop_back();
        i--;
      }
    }
    sort(ALL(a));
    v1 = a[0], v2 = a[1];
    rep1(i, 1, SZ(a) - 1){
      if( (v1*v1 + v2*v2)*a[i]*a[i+1] > (a[i]*a[i] + a[i+1]*a[i+1])*v1*v2){
        v1 = a[i], v2 = a[i+1];
      }
    }
    printf("%lld %lld %lld %lld\n", v1, v1, v2, v2);
  }
  return 0;
}
