#include <bits/stdc++.h>

using namespace std;
#define mkp make_pair
const int MAXN = 100100;
const long long INF = 0x3f3f3f3f3f3f3f3f;
int n, c[3][MAXN], a[MAXN], ans[MAXN];
vector<int> g[MAXN];

long long cost(int k)
{
	ans[a[1]] = k % 3, ans[a[2]] = k / 3;
	long long ret = c[ans[a[1]]][a[1]] + c[ans[a[2]]][a[2]];
	for(int i = 3; i <= n; ++i)
		ans[a[i]] = 3 - ans[a[i - 1]] - ans[a[i - 2]], ret += c[ans[a[i]]][a[i]];
	return ret;
}

int main()
{
	scanf("%d", &n);
	for(int i = 0, j; i < 3; ++i)
		for(j = 1; j <= n; ++j)
			scanf("%d", &c[i][j]);
	for(int i = 1, u, v; i < n; ++i)
		scanf("%d %d", &u, &v), g[u].push_back(v), g[v].push_back(u);
	for(int i = 1; i <= n; ++i)
		if(g[i].size() > 2)
			printf("-1\n"), exit(0);
		else if(g[i].size() == 1)
			a[1] = i;

	for(int i = 1; i <= n; ++i)
		for(const int& x : g[a[i]])
			if(x != a[i - 1])
				a[i + 1] = x;

	int x = 0;
	long long cx = INF, aux;
	for(int i = 0; i < 3 * 3; ++i)
		if(i % 3 != i / 3 && (aux = cost(i)) < cx)
			x = i, cx = aux;
	cost(x);
	printf("%lld\n", cx);
	for(int i = 1; i <= n; ++i)
		printf("%d ", ans[i] + 1);
}