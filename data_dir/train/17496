//
//  main.cpp
//  Contests
//
//  Created by Bandarchuk, Yury on 9/4/17.
//  Copyright Â© 2017 Bandarchuk, Yury. All rights reserved.
//

#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <cstdlib>
#include <utility>
#include <memory.h>
#include <cassert>
#include <iterator>
#include <bitset>
#include <iomanip>
#include <complex>
#include <queue>
#include <ctime>
#include <deque>
#include <stack>
#include <set>
#include <map>

using namespace std;

#define pb push_back
#define mp make_pair
#define F first
#define S second

const int N = 500500;

struct node {
    node * left;
    node * right;
    int val;
    node () {
        left = right = NULL;
        val = 0;
    }
    node (node * left, node * right) : left(left), right(right) {
        val = 0;
        if (left != NULL) val += left -> val;
        if (right != NULL) val += right -> val;
    }
    
};


int n, q;
int y[N];

node * build(int l, int r) {
    if (l == r) return new node();
    int mid = (l + r) >> 1;
    return new node(build(l, mid), build(mid + 1, r));
}

node * update(node * ver, int l, int r, int pos) {
    if (l == r){
        node * result = new node();
        result -> val = ver -> val + 1;
        return result;
    }
    int mid = (l + r) >> 1;
    if (pos <= mid) {
        return new node(update(ver -> left, l, mid, pos), ver -> right);
    } else {
        return new node(ver -> left, update(ver -> right, mid + 1, r, pos));
    }
}

int getSum(node * ver, int l, int r, int pl, int pr) {
    if (!ver) return 0;
    if (pl > pr) return 0;
    if (l == pl && r == pr) return ver -> val;
    int mid = (l + r) >> 1;
    return getSum(ver -> left, l, mid, pl, min(pr, mid)) + getSum(ver -> right, mid + 1, r, max(pl, mid + 1), pr);
}

int main() {
    scanf("%d%d", &n, &q);
    vector<node*> roots;
    roots.pb(build(1, n));
    for (int i = 1; i <= n; i++) {
        int t;
        scanf("%d", &t);
        t = n - t + 1;
        roots.pb(update(roots.back(), 1, n, t));
    }
    while (q--) {
        int l, d, r, u;
        scanf("%d%d%d%d", &l, &d, &r, &u);
        u = n - u + 1;
        d = n - d + 1;
        if (d > u) swap(d, u);
        int sum = getSum(roots[r], 1, n, d, u) - getSum(roots[l - 1], 1, n, d, u);
        long long ans = 1LL * sum * (sum - 1);
        ans /= 2LL;
        
        
        int up_up = getSum(roots[r], 1, n, 1, d - 1) - getSum(roots[l - 1], 1, n, 1, d - 1);
        
        
        
        int up_left = getSum(roots[l - 1], 1, n, 1, d - 1);
        int up_mid = getSum(roots[l - 1], 1, n, d, u);
        int up_bottom = l - 1 - up_left - up_mid;
        
        int up_right = getSum(roots[n], 1, n, 1, d - 1) - getSum(roots[r], 1, n, 1, d - 1);
        int up_midd = getSum(roots[n], 1, n, d, u) - getSum(roots[r], 1, n, d, u);
        int up_bottomm = n - r - up_right - up_midd;
        
        
        ans = ans + 1LL * up_left * (up_midd + up_bottomm) + 1LL * up_mid  * (up_right + up_midd + up_bottomm) + 1LL * up_bottom * (up_right + up_midd);
        
        ans = ans + 1LL * up_up * (up_mid + up_bottom + up_midd + up_bottomm);
        
        int dd =getSum(roots[r], 1, n, u + 1, n) - getSum(roots[l - 1], 1, n, u + 1, n);
        ans = ans + 1LL * dd * (up_left + up_right + up_mid + up_midd + up_up);
        
        int rem = n - sum;
        ans = ans + 1LL * rem * sum;
        
        printf("%I64d\n", ans);
    }
    return 0;
}