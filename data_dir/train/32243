// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define int long long

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = (int)1e5 + 3;

int n;
PII pkt[N];

int len(PII x) {
  return x.ST*x.ST+x.ND*x.ND;
}

bool check(PII x, PII y) {
  return len(x) == len(y) && x.ST*y.ND == x.ND*y.ST;
}

PII operator-(PII x, PII y) {
  return {x.ST-y.ST, x.ND-y.ND};
}

signed main() {
  init_ios();
  cin >> n;
  for (int i = 0; i < n; ++i)
    cin >> pkt[i].ST >> pkt[i].ND;
  if (n&1) {
    cout<<"NO\n";
    return 0;
  }
  for (int i = 0; i+1 < n/2; ++i)
    if (!check(pkt[i+1]-pkt[i], pkt[i+n/2+1]-pkt[i+n/2])) {
      cout<<"NO\n";
      return 0;
    }
  cout<<"YES\n";
}