#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

vector<vector<int> >adj;
int dis[200006][5];
int cnt[200005][5];
int n,k;
int ans=0;
int chin=0;
void dfs(int ver,int p)
{
   for(auto i:adj[ver])
   {
      if(i!=p)
      {
         dfs(i,ver);
         for(int j=0;j<k;j++)
         {
            dis[ver][j]+=dis[i][(j-1+k)%k]+cnt[i][(j-1+k)%k];
            cnt[ver][j]+=cnt[i][(j-1+k)%k];
         }
      }
   }

   for(auto i:adj[ver])
   {
      if(i!=p)
      {
         for(int j=0;j<k;j++)
         {
            int zz1=dis[ver][j]-dis[i][(j-1+k)%k]-cnt[i][(j-1+k)%k];
            int zz2=cnt[ver][j]-cnt[i][(j-1+k)%k];
            
            for(int l=0;l<k;l++)
            {
            int zz=dis[i][(l-1+k)%k]+cnt[i][(l-1+k)%k];
            int dd=zz1*cnt[i][(l-1+k)%k]+zz*zz2;
            int xx=(j+l)%k;
            xx=(k-xx)%k;
            dd+=xx*zz2*cnt[i][(l-1+k)%k];
            ans+=dd/k;
            }
         }         
      }
   }
   for(int j=0;j<k;j++)
   {
            int zz=dis[ver][(j)%k];
            int xx=(k-j)%k;
            zz+=cnt[ver][(j)%k]*xx;
            chin+=zz/k;
   }

   cnt[ver][0]++;
}

signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
 #ifndef ONLINE_JUDGE
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
 #endif

// -------------------------------------Code starts here---------------------------------------------------------------------     

   cin>>n>>k;
   adj.resize(n+1);
   int x,y;
   for(int i=0;i<n-1;i++)
   {
      cin>>x>>y;
      adj[x].push_back(y);
      adj[y].push_back(x);
   }
   dfs(1,0);
   cout<<ans/2+chin;

// -------------------------------------Code ends here------------------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
    clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }