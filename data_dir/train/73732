#include <bits/stdc++.h>
using namespace std;
#define SZ(v) int((v).size())
#define ALL(vec) begin(vec), end(vec)
typedef long long i64;
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
#ifdef Rahul
# define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#else
# define error(...) 42;
#endif
string to_string(char c) { return "'" + string(1, c) + "'";}
string to_string(string s) { return '"' + s + '"';}
string to_string(const char* s) { return to_string((string) s);}
template<typename A> string to_string(A);
template<typename A, typename B> string to_string(pair<A, B> p){
  return "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}
template<typename A> string to_string(A v) {bool f = false; string r = "{"; 
  for (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}
template<typename A> string to_string(vector<vector<A>> v) {string r; 
  for (auto x: v) r += "\n" + to_string(x); return r;}
int Nerr;
template<typename A> string to_string(A *p) {return to_string(vector<A>(p, p + Nerr));}
void err(istream_iterator<string>) { cerr << endl; }
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << to_string(a) << "; "; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
#define Lu(...) [&] (auto &&u) { return __VA_ARGS__; }
#define Luv(...) [&] (auto &&u, auto &&v) { return __VA_ARGS__; }
int const MOD = 1e9 + 7;
i64 const INF = 1e18 + 42;
/***********************************************************************/
const int N = 2e5 + 42, LN = 19;
struct Node {
  int lc, rc, val;
  Node(int v = 0, int lc0 = 0, int rc0 = 0) : 
    lc(lc0), rc(rc0), val(v) {};
};
int n;
vector<int> g[N];
int ent[N];
int ext[N];
int dep[N];
int par[LN][N];
int segs[N];
Node nodes[N << 6];
int nptr = 1;

void upd(int &nid, int pos, int val, int l, int r) {
  if (r < pos or pos < l) return;
  nodes[nptr] = nodes[nid];
  nid = nptr++;
  if (l < r) {
    upd(nodes[nid].lc, pos, val, l, (l + r) / 2);
    upd(nodes[nid].rc, pos, val, (l + r) / 2 + 1, r);
  }
  nodes[nid].val += val;
}
void upd(int &nid, int pos, int val) {
  upd(nid, pos, val, 0, 2 * n - 1);
}
int ask(int nid, int l, int r, int ql, int qr) {
  if (!nid or qr < l or ql > r) return 0;
  if (ql <= l && r <= qr) return nodes[nid].val;
  return ask(nodes[nid].lc, l, (l + r) / 2, ql, qr)
    + ask(nodes[nid].rc, (l + r) / 2 + 1, r, ql, qr);
}
int ask(int nid, int l, int r) {
  return ask(nid, 0, 2 * n - 1, l, r);
}
int lca(int u, int v) {
  if (ent[u] > ent[v]) swap(u, v);
  if (ent[u] < ent[v] && ext[v] < ext[u]) return u;
  for (int i = LN - 1; ~i; --i) {
    if (ent[par[i][u]] < ent[v] && ext[v] < ext[par[i][u]]) continue;
    u = par[i][u];
  }
  return par[0][u];
}
int kth(int u, int k) {
  for (int i = 0; i < LN; ++i) if (k >> i & 1) u = par[i][u];
  return u;
}
vector<int> ord;
void dfs(int u) {
  static int tick = 0;
  ent[u] = tick++;
  for (int v : g[u]) dep[v] = 1 + dep[u], dfs(v);
  ext[u] = tick++;
}
int32_t main() {
  cin.tie(nullptr) -> sync_with_stdio(false);
  
  int root = -1;
  cin >> n;
  for (int i = 0; i < n; ++i) {
    int p; cin >> p, --p;
    if (~p) g[p].push_back(i);
    else root = i, p = root;
    par[0][i] = p;
  }
  for (int i = 1; i < LN; ++i) {
    for (int j = 0; j < n; ++j) par[i][j] = par[i - 1][par[i - 1][j]];
  }
  dfs(root);
  int now = 0;
  for (int i = 0; i < n; ++i) {
    upd(now, ent[i], +1);
    upd(now, ext[i], -1);
  }
  int q; cin >> q;
  for (int i = 1; i <= q; ++i) {
    int qt; cin >> qt;
    segs[i] = segs[i - 1];
    if (qt == 1) {
      int c; cin >> c, --c;
      upd(now, ent[c], -1);
      upd(now, ext[c], +1);
      upd(segs[i], ent[c], +1);
      upd(segs[i], ext[c], -1);
    } else {
      int u, v, k, j; cin >> u >> v >> k >> j;
      --u, --v;
      auto calc = [&] (int l, int r) {
        return ask(now, l, r) + ask(segs[j], l, r);
      };
      int w = lca(u, v);
      int uval = calc(ent[w] + (w == v), ent[u] - 1);
      int vval = calc(ent[w] + 1, ent[v] - 1);
      int ans = -2;
      if (k <= uval) {
        int lo = 1, hi = abs(dep[w] - dep[u]) - (w == v);
        while (lo < hi) {
          int md = (lo + hi) >> 1;
          int x = kth(u, md);
          if (calc(ent[x], ent[u] - 1) < k) lo = md + 1;
          else hi = md;
        }
        ans = kth(u, lo);
      } else if (k <= uval + vval) {
        k -= uval;
        int lo = 1, hi = abs(dep[w] - dep[v]) - 1;
        while (lo < hi) {
          int md = (lo + hi + 1) >> 1;
          int x = kth(v, md);
          if (calc(ent[w] + 1, ent[x]) < k) hi = md - 1;
          else lo = md;
        }
        ans = kth(v, lo);
      }
      cout << 1 + ans << '\n';
    }
  }
}
