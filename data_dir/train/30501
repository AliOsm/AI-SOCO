#include <bits/stdc++.h>
using namespace std;

const int maxn = 1e5+5, INF = 2e9;
int n, m, s, l;
struct Edge
{
    int to, w;
};
vector<Edge> adj[maxn];

int dijkstra(int source) {
    vector<int> dist(n+1,INF);
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
    dist[source] = 0;
    pq.push({0,source});
    while (!pq.empty()) {
        pair<int,int> p = pq.top(); pq.pop();
        int u = p.second;
        int d = p.first;
        for (const Edge& e: adj[u]) {
            int v = e.to;
            int weight = e.w;
            if (dist[v] > dist[u] + weight) {
                dist[v] = dist[u] + weight;
                pq.push({dist[v],v});
            }
        }
    }
    for (int i = 1; i <= n; i++) {
        //cout << i << ": " << dist[i] << '\n';
    }
    //now dist array is filled
    int res = 0;
    int extras = 0;
    for (int i = 1; i <= n; i++) {
        if (dist[i] == l) ++res;
        for (const Edge& e: adj[i]) {
            int v = e.to;
            int w = e.w;
            if (0 < l - dist[i] && l - dist[i] < w) {
                int p = l - dist[i];
                if (dist[i] + p < dist[v] + (w - p)) ++res;
                else if (dist[i] + p == dist[v] + (w - p)) extras++; 
            }
        }
    }
    //printf("Extras = %d\n",extras/2);
    res += extras/2;
    return res;
}

int main()
{
    cin >> n >> m >> s;
    for (int i = 0; i < m; i++) {
        int u, v, w; cin >> u >> v >> w;
        adj[u].push_back({v,w});
        adj[v].push_back({u,w});
    }
    cin >> l;
    cout << dijkstra(s) << '\n';
}