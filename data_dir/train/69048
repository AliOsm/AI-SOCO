#include <bits/stdc++.h>

using namespace std;

const int MOD = 1e9 + 7;

const int MaxN = 2e5 + 25;

int fact[MaxN], rfact[MaxN];
int a[MaxN];

int bpow(int x, int y)
{
    if(!y)
        return 1;
    int res = bpow(x, y >> 1);
    res = (res * 1ll * res) % MOD;
    if(y & 1)
        res = (res * 1ll * x) % MOD;
    return res;
}

int cnk(int n, int k)
{
    int a = fact[n];
    int b = (rfact[k] * 1ll * rfact[n - k]) % MOD;
    return (a * 1ll * b) % MOD;
}

int get(vector <int> v, int k)
{
    if(v.size() == 1)
        return v[0];
    vector <int> newV;
    {
        for(int i = 1; i < v.size(); ++i)
        {
            if(k == 0)
                newV.push_back(v[i - 1] + v[i]);
            else
                newV.push_back(v[i - 1] - v[i]);
            k = 1 - k;
        }
    }
    return get(newV, k);
}

void preprocess()
{
    fact[0] = fact[1] = rfact[0] = rfact[1] = 1;
    for(int i = 2; i < MaxN; ++i)
    {
        fact[i] = (fact[i - 1] * 1ll * i) % MOD;
        rfact[i] = bpow(fact[i], MOD - 2);
    }
}

void solve(int n)
{
    for(int i = 0; i < n; ++i)
        cin >> a[i];

    if(n % 4 == 0)
    {
        int res = 0;
        for(int i = 0; i < n; ++i)
        {
            if(i % 2 == 0)
            {
                int N = n / 2 - 1;
                int K = i / 2;
                res = (res + cnk(N, K) * 1ll * a[i]) % MOD;
                if(res < 0)
                    res += MOD;
            }
            else
            {
                int N = n / 2 - 1;
                int K = i / 2;
                res = (res - cnk(N, K) * 1ll * a[i]) % MOD;
                if(res < 0)
                    res += MOD;
            }
        }
        cout << res << '\n';
    }else
    if(n % 4 == 1)
    {
        int res = 0;
        for(int i = 0; i < n; ++i)
        {
            if(i % 2 == 0)
            {
                int N = n / 2;
                int K = i / 2;
                res = (res + cnk(N, K) * 1ll * a[i]) % MOD;
                if(res < 0)
                    res += MOD;
            }
        }
        cout << res << '\n';
    }else
    if(n % 4 == 2)
    {
        int res = 0;
        for(int i = 0; i < n; ++i)
        {
            int N = n / 2 - 1;
            int K = i / 2;
            res = (res + cnk(N, K) * 1ll * a[i]) % MOD;
            if(res < 0)
                res += MOD;
        }
        cout << res << '\n';
    }else
    if(n % 4 == 3)
    {
        int res = 0;
        for(int i = 0; i < n; ++i)
        {
            if(i % 2 == 1)
            {
                int N = n / 2 - 1;
                int K = i / 2;
                res = (res + cnk(N, K) * 2ll * a[i]) % MOD;
                if(res < 0)
                    res += MOD;
            }
            else
            {
                int x = cnk(n / 2 - 1, i / 2);
                if(i)
                    x -= cnk(n / 2 - 1, i / 2 - 1);

                if(x < 0)
                    x += MOD;
                res = (res + x * 1ll * a[i]) % MOD;

                if(res < 0)
                    res += MOD;
            }
        }
        cout << res << '\n';
    }
}

int main()
{
//    freopen("input.txt", "r", stdin);
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);

    preprocess();

    int n;
    cin >> n;
    solve(n);
}
