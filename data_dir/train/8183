#include <string>
#include <iostream>
#include <iomanip>
#include <vector>
#include <set>
#include <map>
#include <hash_set>
#include <hash_map>
#include <algorithm>
#include <functional>

typedef unsigned long long  uint64_t;
typedef   signed long long  int64_t;
typedef unsigned long       uint32_t;
typedef   signed long       int32_t;
typedef unsigned short      uint16_t;
typedef   signed short      int16_t;
typedef unsigned char       uint8_t;
typedef   signed char       int8_t;

typedef std::vector<int32_t>        IntVector;
typedef std::vector<IntVector>      IntVector2d;

typedef std::vector<size_t>         SizeTVector;
typedef std::vector<SizeTVector>    SizeTVector2d;

typedef std::set<size_t>            SizeTSet;
typedef stdext::hash_set<size_t>    SizeTHashSet;

template <typename T>
inline T ABS(const T v) {return v > 0 ? v : (-v);}

template <typename T>
inline T MIN(const T v1, const T v2) {return v1 < v2 ? v1 : v2;}

bool Solve(std::istream& ist, std::ostream& ost, bool multipleTestMode)
{
    // first input operation
    //
    uint64_t n;
    ist >> n;

    // /////////////////////

    if (multipleTestMode && !ist)
    {
        return false;
    }

    // other input operation and calculations
    //
    const std::string Names[] = {"Sheldon", "Leonard", "Penny", "Rajesh", "Howard"};
    const size_t cnt = 5;

    uint64_t i = 0;
    uint64_t mult = 1;
    
    size_t ansIdx = 5;
    
    while (i < n)
    {
        uint64_t next_i = i + mult * cnt;
        if (next_i < n)
        {
            i = next_i;
            mult *= 2;
        }
        else
        {
            ansIdx = cnt - (next_i - n) / mult - 1;
            break;
        }
    }

    ost << Names[ansIdx] << std::endl;

    // /////////////////////

    return multipleTestMode;
}

int main()
{
    std::istream& ist = std::cin;
    std::ostream& ost = std::cout;
#if 1
    Solve(ist, ost, false);
#else
    while(Solve(ist, ost, true)) {};
#endif
}
