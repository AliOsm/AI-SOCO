#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 100;

int n, m, x[N], y[N], ans[N], cnt[N];

map<int, vector<int>> a, b, c, d; //  I - \ /

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		cin >> x[i] >> y[i];
		a[y[i]].push_back(i);
		b[x[i]].push_back(i);
		c[x[i] - y[i]].push_back(i);
		d[x[i] + y[i]].push_back(i);
	}
	for (auto p: a) {
		vector<int> vec = p.second;
		if(vec.size() <= 1)
			continue;
		sort(vec.begin(), vec.end(), [](int a, int b) {
			return x[a] < x[b];
		});
		for (int i = 1; i < vec.size() - 1; i++)
			ans[vec[i]] += 2;
		ans[vec[0]]++;
		ans[vec.back()]++;
	}
	
	for (auto p: b) {
		vector<int> vec = p.second;
		if(vec.size() <= 1)
			continue;
		sort(vec.begin(), vec.end(), [](int a, int b) {
			return y[a] < y[b];
		});
		for (int i = 1; i < vec.size() - 1; i++)
			ans[vec[i]] += 2;
		ans[vec[0]]++;
		ans[vec.back()]++;
	}
	
	for (auto p: c) {
		vector<int> vec = p.second;
		if(vec.size() <= 1)
			continue;
		sort(vec.begin(), vec.end(), [](int a, int b) {
			return x[a] < x[b];
		});
		for (int i = 1; i < vec.size() - 1; i++)
			ans[vec[i]] += 2;
		ans[vec[0]]++;
		ans[vec.back()]++;
	}
	
	for (auto p: d) {
		vector<int> vec = p.second;
		if(vec.size() <= 1)
			continue;
		sort(vec.begin(), vec.end(), [](int a, int b) {
			return x[a] < x[b];
		});
		for (int i = 1; i < vec.size() - 1; i++)
			ans[vec[i]] += 2;
		ans[vec[0]]++;
		ans[vec.back()]++;
	}
	
	for (int i = 0; i < m; i++)
		cnt[ans[i]]++;
	
	for (int i = 0; i <= 8; i++)
		cout << cnt[i] << ' ';
	return 0;
}
