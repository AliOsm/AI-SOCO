#include <cstdio>
#include <iostream>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
#include <memory.h>
#include <string.h>
#include <time.h>
using namespace std;
#pragma comment(linker, "/STACK:100000000")

#define mp make_pair
#define pb push_back 
#define ll long long
#define sz(x) (int)(x).size()

set<pair<int, int> > W, H;
multiset<int> WS, HS;

int main()
{
    //freopen("input.txt","rt",stdin);
    //freopen("output.txt","wt",stdout);
    //freopen("a.in","rt",stdin);
    //freopen("a.out","wt",stdout);

    int w, h, n;
    scanf("%d %d %d", &w, &h, &n);
    
    W.insert(mp(0, w));
    H.insert(mp(0, h));
    WS.insert(w);
    HS.insert(h);

    for(int i = 0; i < n; i++) {
        string s;
        cin >> s;
        int a;
        scanf("%d", &a);
        if(s == "H") {
            set<pair<int, int> >::iterator it = (--H.lower_bound(mp(a, 1e9)));
            int pos = it->first;
            int len = it->second;
            H.erase(it);
            HS.erase(HS.find(len));
            int pos1 = pos;
            int len1 = a - pos1;
            int pos2 = a;
            int len2 = len - len1;
            H.insert(mp(pos1, len1));
            H.insert(mp(pos2, len2));
            HS.insert(len1);
            HS.insert(len2);
        }
        else {
            set<pair<int, int> >::iterator it = (--W.lower_bound(mp(a, 1e9)));
            int pos = it->first;
            int len = it->second;
            W.erase(it);
            WS.erase(WS.find(len));
            int pos1 = pos;
            int len1 = a - pos1;
            int pos2 = a;
            int len2 = len - len1;
            W.insert(mp(pos1, len1));
            W.insert(mp(pos2, len2));
            WS.insert(len1);
            WS.insert(len2);
        }
        int maxw = *(--WS.end());
        int maxh = *(--HS.end());
        printf("%lld\n", (ll)maxw * (ll)maxh);
    }

    return 0;
}