#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define time { ios::sync_with_stdio(0); ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); srand(time(0)); }

using namespace std;
using namespace __gnu_pbds;
    long long MxV = 3000001;
    long long MnV = 30001;
typedef long long ll;

    vector < set < ll > >  gr;
    vector < pair < ll, ll > > amount(200002);
    map < ll, pair < ll, ll > > ans1, ans2;
    ll value = 0;

ll dfs(ll v)
{
    ++value;

    amount[v].first = value;

    for(auto i = gr[v].begin(); i != gr[v].end(); ++i) {
        ll to = *i;
        if(amount[to].first == 0) {
            dfs(to);
        }
    }

    amount[v].second = value;
}

int main()
{
    time

    ll n, m, i;

    cin >> n >> m;
    gr.resize(n);

    for(i = 1; i < n; ++i) {
        ll a;
        cin >> a;
        gr[--a].insert(i);
    }

    /*cout << endl;
    for(i = 0; i < n; ++i) {
        cout << i + 1 << ' ' << ' ';
        for(auto it = gr[i].begin(); it != gr[i].end(); ++it) {
            cout << *it + 1 << ' ';
        }
        cout << endl;
    }*/


    dfs(0);
    //cout << endl;
    for(i = 0; i < n; ++i) {
        ans1[i + 1] = {amount[i].first, amount[i].second};
        ans2[amount[i].first] = {i + 1, amount[i].second};
        //cout << i + 1 << ' ' << amount[i].first << ' ' << amount[i].second << endl;
    }


    while(m --> 0) {
        pair < ll, ll > request;
        cin >> request.first >> request.second;

        --request.second;
        map < ll, pair < ll, ll > > ::iterator to = ans1.find(request.first);

        pair < ll, ll > now = to -> second;
        if(now.first + request.second <= now.second) {
            map < ll, pair < ll, ll > > ::iterator com = ans2.find(now.first + request.second);
            now = com -> second;
            cout << now.first << endl;
        }
        else cout << -1 << endl;
    }

}
