
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int N, M;
vector<int> pdivisors[100100];
int isOn[100100];
multiset<int> A[100100];
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  cin >> N >> M;
  for (int i = 2; i <= N; i++)
  {
    int cur = i;
    for (int d = 2; d * d <= cur; d++)
    {
      if (cur % d == 0)
      {
        pdivisors[i].pb(d);
        while (cur % d == 0)
        {
          cur /= d;
        }
      }
    }
    if (cur > 1)
      pdivisors[i].pb(cur);
  }
  rep1(i,M)
  {
    string s;
    int x;
    cin >> s >> x;
    if (s == "+")
    {
      if (isOn[x] == 1)
      {
        cout << "Already on" << endl;
        continue;
      }
      int conflict = -1;
      rep(i,sz(pdivisors[x]))
      {
        int d = pdivisors[x][i];
        if (!A[d].empty())
        {
          conflict = *(A[d].begin());
        }
      }
      if (conflict >= 1)
      {
        cout << "Conflict with " << conflict << endl;
        continue;
      }
      rep(i,sz(pdivisors[x]))
      {
        int d = pdivisors[x][i];
        A[d].insert(x);
      }
      isOn[x] = 1;
      cout << "Success" << endl;
    }
    else
    {
      if (isOn[x] == 0)
      {
        cout << "Already off" << endl;
        continue;
      }
      isOn[x] = 0;
      rep(i,sz(pdivisors[x]))
      {
        int d = pdivisors[x][i];
        A[d].erase(x);
      }
      cout << "Success" << endl;
    }
  }
}
