// rc.cpp
//

#include <math.h>
#include <string.h>

#include <iterator>
#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <list>
#include <stack>
#include <algorithm>
#include <numeric>
#include <functional>

using namespace std;

typedef unsigned char uchar;
typedef unsigned int uint;
typedef unsigned long long uint64;

#define PI 3.1415926535897932384626433832795
#define EPS 1E-8

bool nx[48][48],
	 w[48];

uint cmd[30][3],
     ncmd[39],
	 nc;

int main(int argc, char* argv[])
{
	uint n, m;
	cin >> n >> m;

	for (uint i = 0; i < m; ++i)
	{
		uint a, b;
		cin >> a >> b;
		--a, --b;

		nx[a][b] = true;
		nx[b][a] = true;
	}

	vector<uint> o;
	for (uint i = 0; i < n; ++i)
	{
		if (!w[i])
		{
			uint cc[3],
				 ncc = 0;

			stack<uint> v;
			v.push(i);

			while (!v.empty())
			{
				if (ncc == 3)
				{
					cout << -1 << endl;
					return 0;
				}

				uint c = v.top();
				w[c] = true;
				cc[ncc++] = c;
				v.pop();

				for (uint j = 0; j < n; ++j)
				{
					if (!w[j] && nx[j][c])
					{
						v.push(j);
						w[j] = true;
					}
				}
			}

			if (ncc == 1)
				o.push_back(i);
			else
			{
				for (uint j = 0; j < ncc; ++j)
					cmd[nc][j] = cc[j];

				ncmd[nc++] = ncc;
			}
		}
	}

	uint i = 0;
	for (vector<uint>::iterator it = o.begin(); it != o.end(); ++it)
	{
		while (ncmd[i] == 3)
			++i;

		cmd[i][ncmd[i]++] = *it;
		if (ncmd[i] == 3)
			++i;
	}

	if (i > nc)
		nc = i;
	for (i = 0; i < nc; ++i)
	{
		if (ncmd[i] != 3)
		{
			cout << -1 << endl;
			return 0;
		}
	}

	for (i = 0; i < nc; ++i)
		cout << cmd[i][0] + 1 << ' ' << cmd[i][1] + 1 << ' ' << cmd[i][2] + 1 << endl;

	return 0;
}
