#include<iostream>
#include<vector>
#include<bitset>
using namespace std;
const int N = 5005;
vector<int> g[N];
vector<int> sz[N];
int n;
int dfs(int v, int p){
	int sum = 1;
	for (int i = 0; i < g[v].size(); i++){
		int to = g[v][i];
		if (to == p)continue;
		int val=dfs(to, v);
		sum += val;
		sz[v].push_back(val);
	}
	if (v != 0){
		sz[v].push_back(n - sum);
	}
	return sum;
}
bitset<N> dp,res;
int main() {
	int a, b;
	cin >> n;
	for (int i = 0; i < n - 1; i++){
		cin >> a >> b;
		--a, --b;
		g[a].push_back(b);
		g[b].push_back(a);
	}
	dfs(0,-1);
	for (int i = 0; i < n; i++){
		dp.reset();
		dp[0] = 1;
		for (int j = 0; j < sz[i].size(); j++){
			dp |= (dp << sz[i][j]);
		}
		res |= dp;
	}
	cout << res.count() - 2 << endl;
	for (int i = 1; i < n - 1; i++){
		if (res[i]) cout << i << " " << n - 1 - i << endl;
	}
	return 0;
}