#define _USE_MATH_DEFINES 
#define _CRT_SECURE_NO_DEPRECATE 
#include <iostream> 
#include <cstdio> 
#include <cstdlib> 
#include <vector> 
#include <sstream> 
#include <string> 
#include <map> 
#include <set> 
#include <algorithm> 
#include <cmath> 
#include <cstring> 
#include <queue>
using namespace std; 
#define mp make_pair 
#define pb push_back 
#define all(C) (C).begin(), (C).end() 
#define sz(C) (int)(C).size() 
#define PRIME 123 
#define PRIME1 31415 
typedef long long int64; 
typedef unsigned long long uint64; 
typedef pair<int, int> pii; 
typedef vector<int> vi; 
typedef vector<vector<int> > vvi; 
//------------------------------------------------------------ 
#define y1 asdf
#define y2 asdqwer
const int N = 500002;
int n, q;
int a1 = 0, a2 = 0;
int64 dm[1000];
pii m[N];
pair<int64, int> sm[N];
int ro = 1 << 10;

void add(int l, int r, int del)
{
    
    int tl = l >> 10;
    int tr = r >> 10;
    int pl = tl << 10, pr = tr << 10;
    if (tl == tr)
    {
        for(int i = l; i <= r; ++i)
            sm[m[i].second].first += del;
        
        sort(sm + pl, sm + min(n, ro + pl));
        for(int i = pl; i < min(n, ro + pl); ++i)
            m[sm[i].second].second = i;

        return;
    }

    for(int i = tl + 1; i < tr; i++)
        dm[i] += del;

    for(int i = l; i < min(pl + ro, n); i++)
        sm[m[i].second].first += del;

    for(int i = pr; i <= r; i++)
        sm[m[i].second].first += del;

   sort(sm + pl, sm + min(n, ro + pl));
    for(int i = pl; i < min(n, ro + pl); ++i)
        m[sm[i].second].second = i;
    
    sort(sm + pr, sm + min(pr + ro, n));
    for(int i = pr; i < min(pr + ro, n); ++i)
        m[sm[i].second].second = i;
}


int fin(int y)
{
    int la = 1e9, lr = -2; 
    for(int i = 0; (i << 10) < n; ++i)
    {
        int64 ty = y - dm[i];
        int l = i << 10, r = min(((i + 1) << 10), n) - 1, mid;
        
        while(l <= r)
        {
            mid = (l + r) >> 1;
            int64 x = sm[mid].first;
            if (x >= ty)
            {
                r = mid - 1;
                if (x == ty)
                    la = min(la, sm[mid].second);
            }
            else
                l = mid + 1;
        }
    }

    for(int i = 0; (i << 10) < n; ++i)
    {
        int64 ty = y - dm[i];
        int l = i << 10, r = min(((i + 1) << 10), n) - 1, mid;
        while(l <= r)
        {
            mid = (l + r) >> 1;
            int64 x = sm[mid].first;
            if (x > ty)
                r = mid - 1;
            else
            {
                if (x == ty)
                    lr = max(lr, sm[mid].second);
                l = mid + 1;
            }
        }
    }
  
    if (lr < la)
        return -1;
    return lr - la;
}

int main()
{
    ios_base::sync_with_stdio(false);cin.tie(0);
#ifdef WIN32
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    scanf("%d", &n);
    int q = 0;
    scanf("%d", &q);
    for(int i = 0; i < n; ++i)
    {
        scanf("%d", &m[i].first);
        sm[i] = mp(m[i].first, i);
    }

    for(int i = 0; (i << 10) < n; i++)
        sort(sm + ro * i, sm + min(n, ro * (i + 1)));
    for(int i = 0; i < n; ++i)
        m[sm[i].second].second = i; 
    
    for(int i = 0; i < q; ++i)
    {
        int typ;
        scanf("%d", &typ);
        if (typ == 1)
        {
            int l, x, r;
            scanf("%d %d %d", &l, &r, &x);
            add(l - 1, r - 1, x);
        }
        else
        {
            int y;
            scanf("%d", &y);
            printf("%d\n", fin(y));
        }
    }
}