#include <stdio.h>
 
#define N	1000000
#define N_	(1 << 20)	/* N_ = pow2(ceil(log2(N))) */
 
int max(int a, int b) { return a > b ? a : b; }
 
int st[N_ * 2], lz[N_], h_, n_;
 
void put(int i, int x) {
	st[i] += x;
	if (i < n_)
		lz[i] += x;
}
 
void pus(int i) {
	if (lz[i]) {
		put(i << 1, lz[i]), put(i << 1 | 1, lz[i]);
		lz[i] = 0;
	}
}
 
void pul(int i) {
	if (!lz[i])
		st[i] = max(st[i << 1], st[i << 1 | 1]);
}
 
void push(int i) {
	int h;
 
	for (h = h_; h > 0; h--)
		pus(i >> h);
}
 
void pull(int i) {
	while (i > 1)
		pul(i >>= 1);
}
 
void update(int l, int r) {
	int l_ = l += n_, r_ = r += n_;
 
	push(l_), push(r_);
	for ( ; l <= r; l >>= 1, r >>= 1) {
		if ((l & 1) == 1)
			put(l++, 1);
		if ((r & 1) == 0)
			put(r--, 1);
	}
	pull(l_), pull(r_);
}
 
int query(int l, int r) {
	int x;
 
	push(l += n_), push(r += n_);
	x = 0;
	for ( ; l <= r; l >>= 1, r >>= 1) {
		if ((l & 1) == 1)
			x = max(x, st[l++]);
		if ((r & 1) == 0)
			x = max(x, st[r--]);
	}
	return x;
}
 
int main() {
	static int aa[N], qu[N];
	int n, k, i, cnt;
 
	scanf("%d%d", &n, &k);
	for (i = 0; i < n; i++)
		scanf("%d", &aa[i]);
	h_ = 0;
	while (1 << h_ < n)
		h_++;
	n_ = 1 << h_;
	cnt = 0;
	for (i = 0; i < n; i++) {
		while (cnt && aa[qu[cnt - 1]] < aa[i])
			cnt--;
		update(cnt == 0 ? 0 : qu[cnt - 1] + 1, i);
		qu[cnt++] = i;
		if (i >= k - 1)
			printf("%d ", query(i - k + 1, i));
	}
	printf("\n");
	return 0;
}
