#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")
#pragma comment(linker, "/STACK:64777216")

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cassert>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair <int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-9;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 1 && x <= n && y >= 1 && y <= m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

const int dx8[8] = { -1, -1, 0, +1, +1, +1, 0, -1 };
const int dy8[8] = { 0, +1, +1, +1, 0, -1, -1, -1 };

const int N = int(2e5) + 555;

li u, v;

void gen() {
}

bool read() {
	cin >> u >> v;
	return true;
}

void brute() {
	forn(i, 20) forn(j, 20) forn(k, 20) {
		if ((i ^ j ^ k) == u && i + j + k == v) {
			cout << i << ' ' << j << ' ' << k << endl;
			return;
		}
	}
}

void solve() {
	//brute();
	if (u == 0 && u == v) {
		cout << 0 << endl;
		return;
	}

	if (u == v) {
		cout << 1 << endl;
		cout << u << endl;
		return;
	}

	if (u > v) {
		cout << -1 << endl;
		return;
	}

	li a = u, b = 0;
	li dif = v - u;
	for (int i = 60; i >= 0; i--) {
		if ((u & (1LL << i)) == 0) {
			li x = (1LL << i);
			if (dif >= x + x) {
				dif -= x + x;
				a += x;
				b += x;
			}
		}
	}

	if ((a ^ b) == u && a + b == v) {
		cout << 2 << endl;
		cout << a << ' ' << b << endl;
		return;
	}

	a = u;
	dif = v - u;
	if (dif % 2 == 0) {
		cout << 3 << endl;
		cout << a << ' ' << dif / 2 << ' ' << dif / 2 << endl;
		return;
	}

	cout << -1 << endl;
}

ld gett() {
	return ld(clock()) / CLOCKS_PER_SEC;
}

int main() {
#ifdef _DEBUG
	(freopen("input.txt", "rt", stdin));
	(freopen("output.txt", "wt", stdout));
#endif

	cout << setprecision(15) << fixed;
	cerr << setprecision(15) << fixed;

	int T = 1;
	//T = 10000;

	srand(int(time(NULL)));

	//gen();

	//(scanf("%d", &T) == 1);
	//cin >> T;

	forn(i, T) {
#ifdef _DEBUG
		cerr << "TEST == " << i << endl;
#endif
		assert(read());
		//cout << "Case #" << i + 1 << ": ";
		solve();
		//#ifdef _DEBUG
		cerr << "curTime == " << clock() << " ms" << endl;
		//#endif
		//break;
	}

#ifdef _DEBUG
	cerr << "TIME == " << clock() << " ms" << endl;
#endif

	//cerr << "TIME == " << gett() << " s" << endl;
	return 0;
}