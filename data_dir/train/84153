#include <bits/stdc++.h>

using namespace std;

const int N = 505;
int t[N][N];
int pr[N][N][4];
int cnt[N][N][N];
int n, m;

bool check(int i1, int j1, int i2, int j2, int c) {
  if (i1 <= 0 or i1 > n) {
    return false;
  }
  if (i2 <= 0 or i2 > n) {
    return false;
  }
  if (j1 <= 0 or j1 > m) {
    return false;
  }
  if (j2 <= 0 or j2 > m) {
    return false;
  }
  for (int i = 0; i < 4; ++i) {
    if (i == c) {
      continue;
    }
    if (pr[i2][j2][i] - pr[i2][j1 - 1][i] - pr[i1 - 1][j2][i] + pr[i1 - 1][j1 - 1][i]) {
      return false;
    }
  }
  return true;
}

bool check2(int i1, int j1, int i2, int j2, int k) {
  if (i2 < i1 or j2 < j1) {
    return false;
  }
  return cnt[i2][j2][k] - cnt[i2][j1 - 1][k] - cnt[i1 - 1][j2][k] + cnt[i1 - 1][j1 - 1][k] > 0;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);

  int q;
  cin >> n >> m >> q;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= m; ++j) {
      char c;
      cin >> c;
      if (c == 'R') {
        t[i][j] = 0;
      } else if (c == 'G') {
        t[i][j] = 1;
      } else if (c == 'Y') {
        t[i][j] = 2;
      } else {
        t[i][j] = 3;
      }
      for (int c = 0; c < 4; ++c) {
        pr[i][j][c] = pr[i - 1][j][c] + pr[i][j - 1][c] - pr[i - 1][j - 1][c];
      }
      ++pr[i][j][t[i][j]];
    }
  }
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= m; ++j) {
      for (int k = 0; i + 2 * k + 1 <= n and j + 2 * k + 1 <= m; ++k) {
        bool ok = true;
        ok &= check(i, j, i + k, j + k, 0);
        ok &= check(i, j + k + 1, i + k, j + k + 1 + k, 1);
        ok &= check(i + k + 1, j, i + k + 1 + k, j + k, 2);
        ok &= check(i + k + 1, j + k + 1, i + k + 1 + k, j + k + 1 + k, 3);
        if (ok) {
          ++cnt[i][j][k + 1];
        }
      }
    }
  }
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= m; ++j) {
      for (int k = 1; k <= 500; ++k) {
        cnt[i][j][k] += cnt[i - 1][j][k] + cnt[i][j - 1][k] - cnt[i - 1][j - 1][k];
      }
    }
  }
  while (q--) {
    int i1, j1, i2, j2;
    cin >> i1 >> j1 >> i2 >> j2;
    int l = 0, r = min(i2 - i1 + 1, j2 - j1 + 1) / 2 + 1;
    while (l + 1 < r) {
      int mid = l + r >> 1;
      if (check2(i1, j1, i2 - 2 * mid + 1, j2 - 2 * mid + 1, mid)) {
        l = mid;
      } else {
        r = mid;
      }
    }
    cout << 4 * l * l << '\n';
  }

  return 0;
}