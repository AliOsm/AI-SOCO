//      ——By DD_BOND 

#include<bits/stdc++.h>

#define fi first
#define se second
#define MP make_pair
#define pb push_back
#define INF 0x3f3f3f3f
#define pi 3.1415926535898
#define lowbit(a)  (a&(-a))
#define lson l,(l+r)/2,rt<<1
#define rson (l+r)/2+1,r,rt<<1|1
#define Min(a,b,c)  min(a,min(b,c))
#define Max(a,b,c)  max(a,max(b,c))
#define debug(x)  cerr<<#x<<"="<<x<<"\n";

//#pragma GCC optimize(3)
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

using namespace std;

typedef long long ll;
typedef pair<int,int> P;
typedef pair<ll,ll> Pll;
typedef unsigned long long ull;

const int seed=131;
const ll LLMAX=2e18;
const int MOD=1e9+7;
const double eps=1e-8;
const int MAXN=1e6+10;
const int hmod1=0x48E2DCE7;
const int hmod2=0x60000005;

inline ll sqr(ll x){ return x*x; }
inline int sqr(int x){ return x*x; }
inline double sqr(double x){ return x*x; }
ll gcd(ll a,ll b){ return b==0? a: gcd(b,a%b); }
ll exgcd(ll a,ll b,ll &x,ll &y){ ll d; (b==0? (x=1,y=0,d=a): (d=exgcd(b,a%b,y,x),y-=a/b*x)); return d; }
ll qpow(ll a,ll n){ll sum=1;while(n){if(n&1)sum=sum*a%MOD;a=a*a%MOD;n>>=1;}return sum;}
inline int dcmp(double x){  if(fabs(x)<eps) return 0;   return (x>0? 1: -1); }

int a[MAXN];

struct Matrix{
    int a[5][5];
    void Init(){
        memset(a,INF,sizeof(a));
        for(int i=0;i<5;i++)    a[i][i]=0;
    }
    void build(int x){
        Init();
        if(x==2)    a[0][1]=0,a[0][0]=1;
        if(x==0)    a[1][2]=0,a[1][1]=1;
        if(x==1)    a[2][3]=0,a[2][2]=1;
        if(x==7)    a[3][4]=0,a[3][3]=1;
        if(x==6)    a[4][4]=1,a[3][3]=1;
    }
    Matrix operator *(const Matrix &n)const{
        Matrix tmp;     tmp.Init();
        for(int i=0;i<5;i++)    tmp.a[i][i]=INF;
        for(int i=0;i<5;i++)
            for(int j=0;j<5;j++)
                for(int k=0;k<5;k++)
                    tmp.a[i][j]=min(tmp.a[i][j],a[i][k]+n.a[k][j]);
        return tmp;
    }
}mat[MAXN];

void pushup(int rt){
    mat[rt]=mat[rt<<1]*mat[rt<<1|1];
}

void build(int l,int r,int rt){
    if(l==r)    mat[rt].build(a[l]);
    else{
        build(lson);
        build(rson);
        pushup(rt);
    }
}

Matrix query(int l,int r,int rt,int a,int b){
    if(a<=l&&r<=b)  return mat[rt];
    else{
        int mid=(l+r)>>1;
        if(b<=mid)      return query(lson,a,b);
        else if(a>mid)  return query(rson,a,b);
        else            return query(lson,a,mid)*query(rson,mid+1,b);
    }
}

int main(void)
{
    //ios::sync_with_stdio(false);    cin.tie(0);   cout.tie(0);   
    // freopen("/My_Mac/Resource/Project__C++/testdata.in","r",stdin);
    //freopen("/My_Mac/Resource/Project__C++/testdata.out","w",stdout);
    int n,q;    scanf("%d%d",&n,&q);
    for(int i=1;i<=n;i++)   scanf("%1d",&a[i]);
    build(1,n,1);
    while(q--){
        int l,r;    scanf("%d%d",&l,&r);
        Matrix ans=query(1,n,1,l,r);
        printf("%d\n",ans.a[0][4]==INF? -1: ans.a[0][4]);
    }
    return 0;
}