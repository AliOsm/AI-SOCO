#include <bits/stdc++.h>

#define pb push_back
#define all(x) (x).begin(), (x).end()

#ifdef KAZAR
  #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
  #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a < b) a = b;}
template<class T> inline void umin(T &a,T b){if(a > b) a = b;}
template<class T> inline T abs(T a){return a > 0 ? a : -a;}

typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 12555;

int n, m, x;
int a[N], b[N], c[N];

int getCnt(int c, double k) {
  int l = 0, r = x + 1;
  while (l + 1 < r) {
    int m = (l + r) / 2;
    if (m * k <= c) {
      l = m;
    } else {
      r = m;
    }
  }
  return l;
}

const int MAXE = 15005;

int E;
int last[N], pr[MAXE], to[MAXE], cap[MAXE];

void init_edge() {
  E = 0;
  for (int i = 1; i <= n; i++) {
    last[i] = -1;
  }
}

void add_edge(int u, int v, int c) {
  pr[E] = last[u]; last[u] = E; to[E] = v; cap[E] = c; E++;
  pr[E] = last[v]; last[v] = E; to[E] = u; cap[E] = 0; E++;
}

bool was[N];

int dfs(int u, int flow) {
  if (u == n)
    return flow;
  was[u] = true;
  for (int i = last[u]; i >= 0; i = pr[i]) {
    int v = to[i];
    if (!was[v] && cap[i] > 0) {
      int t = dfs(v, min(flow, cap[i]));
      if (t > 0) {
        cap[i] -= t;
        cap[i ^ 1] += t;
        return t;
      }
    }
  }
  return 0;
}

int getFlow(double k) {
  init_edge();
  for (int i = 0; i < m; i++) {
    int cap = getCnt(c[i], k);
    add_edge(a[i], b[i], cap);
  }
  int tot = 0;
  for (;;) {
    for (int i = 1; i <= n; i++)
      was[i] = false;
    int flow = dfs(1, inf);
    if (!flow)
      break;
    tot += flow;
  }
  return tot;
}

int main(){

#ifdef KAZAR
  freopen("f.input", "r", stdin);
  freopen("f.output", "w", stdout);
  freopen("error", "w", stderr);
#endif

  n = read();
  m = read();
  x = read();

  for (int i = 0; i < m; i++) {
    a[i] = read();
    b[i] = read();
    c[i] = read();
  }

  double l = 0, r = 1e6 + 100;
  for (int it = 0; it < 200; it++) {
    double mid = (l + r) / 2.0;
    if (getFlow(mid) >= x) {
      l = mid;
    } else {
      r = mid;
    }
  }
  printf("%.10f\n", l * x);

  return 0;
}
