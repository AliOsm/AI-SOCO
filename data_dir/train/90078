#include <bits/stdc++.h>
using namespace std;
#define SZ(v) int((v).size())
#define ALL(vec) begin(vec), end(vec)
typedef long long i64;
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
#ifdef Rahul
# define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#else
# define error(...) 42;
#endif
string to_string(char c) { return "'" + string(1, c) + "'";}
string to_string(string s) { return '"' + s + '"';}
string to_string(const char* s) { return to_string((string) s);}
template<typename A> string to_string(A);
template<typename A, typename B> string to_string(pair<A, B> p){
  return "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}
template<typename A> string to_string(A v) {bool f = false; string r = "{"; 
  for (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}
template<typename A> string to_string(vector<vector<A>> v) {string r; 
  for (auto x: v) r += "\n" + to_string(x); return r;}
int Nerr;
template<typename A> string to_string(A *p) {return to_string(vector<A>(p, p + Nerr));}
void err(istream_iterator<string>) { cerr << endl; }
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << to_string(a) << "; "; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
#define Lu(...) [&] (auto &&u) { return __VA_ARGS__; }
#define Luv(...) [&] (auto &&u, auto &&v) { return __VA_ARGS__; }
int const MOD = 1e9 + 7;
long long const INF = 1e18 + 42;
/***********************************************************************/
struct Fen {
  int n;
  vector<int> t;
  Fen(int _n) : n(_n + 1), t(n) {}
  void add(int p, int x) {
    for (p += 1; p < n; p += p & -p) t[p] += x;
  }
  int ask(int p) {
    int res = 0;
    for (p += 1; p; p -= p & -p) res += t[p];
    return res;
  }
};

int32_t main() {
  cin.tie(nullptr) -> sync_with_stdio(false);
  
  int q; cin >> q;
  map<int, vector<array<int,3>>> m;
  vector<int> ans(q, -1);
  for (int i = 0; i < q; ++i) {
    int a, tm, x; cin >> a >> tm >> x;
    m[x].push_back({i, tm, a});
  }
  for (auto &[k, v] : m) {
    map<int,int> b;
    for (auto &x : v) b[x[1]];
    int sz = 0;
    for (auto &[kk, vv] : b) vv = sz++;
    Fen fen(sz);
    for (auto &x : v) {
      if (x[2] == 1) {
        fen.add(b[x[1]], 1);
      } else if (x[2] == 2) {
        fen.add(b[x[1]], -1);
      } else {
        ans[x[0]] = fen.ask(b[x[1]]);
      }
    }
  }
  for (int x : ans) {
    if (~x) cout << x << '\n';
  }
}
