#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <stdio.h>
#include <cstdio>
#include <math.h>
#include <cmath>
#include <string>
#include <cstring>
#include <queue>
#include <deque>
#include <random>
#include <iomanip>
#include <bitset>
 
 
using namespace std;
 
template<typename T> void uin(T &a, T b) {
    if (b < a) {
        a = b;
    }
}
 
template<typename T> void uax(T &a, T b) {
    if (b > a) {
        a = b;
    }
}

#define int long long
#define left left228
#define right right228
#define prev prev228
#define list list228
#define mp make_pair
#define all(v) v.begin(), v.end()
#define forn(i, n) for (int i = 0; i < (int)n; ++i)
#define firn(i, n) for (int i = 1; i < (int)n; ++i)
#define x first
#define y second

const int N = 350 * 1000 + 228;
const int INF = 1e9 + 228;

int n, m;
int a[N], ans[N];
int st[N][20];
int lg[N];

void pre() {
    lg[1] = 0;
    for (int i = 2; i <= m; ++i) {
        lg[i] = lg[i >> 1] + 1;
    }
    for (int i = 1; i <= m; ++i) {
        st[i][0] = a[i];
    }
    for (int k = 1; (1 << k) <= m; ++k) {
        for (int i = 1; i <= m - (1 << k) + 1; ++i) {
            st[i][k] = max(st[i][k - 1], st[i + (1 << (k - 1))][k - 1]);
        }
    }
}

int get_max(int l, int r) {
    int k = lg[r - l + 1];
    return max(st[l][k], st[r - (1 << k) + 1][k]);
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
    
    }
    m = 3 * n + 7;
    for (int i = n + 1; i <= m; ++i) {
        a[i] = a[i - n];
    }
    pre();
    for (int i = 1; i <= n; ++i) {
        ans[i] = ans[i - 1];
        uax(ans[i], i - 1);
        while (ans[i] <= m && a[ans[i] + 1] * 2 >= get_max(i, ans[i] + 1)) {
            ++ans[i];
        }
    }
    for (int i = 1; i <= n; ++i) {
        if (ans[i] >= m) {
            cout << -1 << ' ';
        } else {
            cout << ans[i] - i + 1 << ' ';
        }
    }
    cout << endl;
    return 0;
}