#include <vector>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <stdio.h>

using namespace std;

#define pb push_back

typedef long long ll;

const int N = 2510;

int n, m, k, sum[N][N];
char s[N][N];

int Sum(int x1, int y1, int x2, int y2){
	return sum[x2][y2] - sum[x2][y1 - 1] - sum[x1 - 1][y2] + sum[x1 - 1][y1 - 1];
}

ll Cal(int up, int down, int left, int right){
	//cout << up << " " << down << " " << left << " " << right << endl;
	if(up == down && left == right){
		return s[up][left] - '0' == k;
	}
	ll ret = 0;
	if(down - up >= right - left){
		int mid = (down + up) >> 1;
		for(int i = left; i <= right; i++){
			int u[7] = {}, d[7] = {};
			for(int j = 0; j <= k; j++)
				u[j] = up, d[j] = down;
			for(int j = i; j <= right; j++){
				for(int x = 0; x <= k; x++){
					while(u[x] <= mid && Sum(u[x], i, mid, j) > x) u[x]++;
					while(d[x] > mid && Sum(mid + 1, i, d[x], j) > x) d[x]--;
				}
				for(int x = 0; x <= k; x++){
					if(u[x] > mid || d[k - x] <= mid) continue;
					if(Sum(u[x], i, mid, j) != x) continue;
					if(Sum(mid + 1, i, d[k - x], j) != k - x) continue;
					ret += (((x == 0) ? mid + 1: u[x - 1]) - u[x]) * (d[k - x] - ((k - x == 0) ? mid : d[k - x - 1]));
				}
			}
		}
		ret += Cal(up, mid, left, right);
		ret += Cal(mid + 1, down, left, right);
	}
	else{
		int mid = (left + right) >> 1;
		for(int i = up; i <= down; i++){
			int l[7] = {}, r[7] = {};
			for(int j = 0; j <= k; j++)
				l[j] = left, r[j] = right;
			for(int j = i; j <= down; j++){
				for(int x = 0; x <= k; x++){
					while(l[x] <= mid && Sum(i, l[x], j, mid) > x) l[x]++;
					while(r[x] > mid && Sum(i, mid + 1, j, r[x]) > x) r[x]--;
				}
				for(int x = 0; x <= k; x++){
					if(l[x] > mid || r[k - x] <= mid) continue;
					if(Sum(i, l[x], j, mid) != x) continue;
					if(Sum(i, mid + 1, j, r[k - x]) != k - x) continue;
					ret += (((x == 0) ? mid + 1 : l[x - 1]) - l[x]) * (r[k - x] - ((k - x == 0) ? mid : r[k - x - 1]));
				}
			}
		}
		ret += Cal(up, down, left, mid);
		ret += Cal(up, down, mid + 1, right);
	}
	return ret;
}

int main(){
	scanf("%d%d%d", &n, &m, &k);
	for(int i = 1; i <= n; i++)
		scanf("%s", s[i] + 1);
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= m; j++)
			sum[i][j] = sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1] + s[i][j] - '0';
	cout << Cal(1, n, 1, m) << endl;
	return 0;
}
