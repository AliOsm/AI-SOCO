
#include<bits/stdc++.h>


using namespace std;

using ll   = long long;
using ii   = pair   < int , int >;
using i3   = pair   < int , ii  >;
using li   = pair   < ll  , int >;
using lii  = pair   < ll  , ii  >;
using pll  = pair   < ll  , ll  >;
using vi   = vector < int       >;
using vl   = vector < ll        >;
using vii  = vector < ii        >;
using vli  = vector < li        >;
using vpll = vector < pll       >;
using vi3  = vector < i3        >;
using vlii = vector < lii       >;


const int N = 1000 + 5;
const ll INF = 1e17 + 7;
const double eps = 1e-9 , PI = acos(-1);



int n , m;

int a[N][N];
int compressSmalle[N][N];
int compressBig   [N][N];

void solve(int testCase){

    scanf("%d %d" , &n , &m);

    for(int i = 1 ; i <= n ; i ++){
            for(int j = 1 ; j <= m ; j ++){
                    scanf("%d" , &a[i][j]);
            }
    }

    for(int i = 1 ; i <= n ; i ++){

            map < int , int > mp;
            set < int > st;

            for(int j = 1 ; j <= m ; j ++){
                    st.insert(a[i][j]);
            }

            int cnt = 0;
            for(int S : st)mp[S] = ++ cnt;

            for(int j = 1 ; j <= m ; j ++){
                    compressSmalle[i][j] = max(compressSmalle[i][j] , mp[ a[i][j] ]);
                    int bigger = st.size() - mp[a[i][j]];
                    compressBig[i][j] = max(compressBig[i][j] , bigger);
            }
    }

    for(int j = 1 ; j <= m ; j ++){

            map < int , int > mp;
            set < int > st;

            for(int i = 1 ; i <= n ; i ++){
                    st.insert(a[i][j]);
            }

            int cnt = 0;
            for(int S : st)mp[S] = ++ cnt;

            for(int i = 1 ; i <= n ; i ++){
                    compressSmalle[i][j] = max(compressSmalle[i][j] , mp[ a[i][j] ]);
                    int bigger = st.size() - mp[a[i][j]];
                    compressBig[i][j] = max(compressBig[i][j] , bigger);
            }
    }



    for(int i = 1 ; i <= n ; i ++){
            for(int j = 1 ; j <= m ; j ++){
                    printf("%d%c" , compressSmalle[i][j] + compressBig[i][j] , j == m ? '\n' : ' ');
            }
    }

}

main(){

    int t = 1;
    // scanf("%d" , &t);

    for(int testCase = 1 ; testCase <= t ; testCase ++){
            solve(testCase);
    }

    return 0;
}
