#include <bits/stdc++.h>

using namespace std ;

const int inf = 1e9 + 5 ;
const int MAX = 1e5 + 10 ;

long long pref[MAX] , suff[MAX] ,  prefcnt[MAX] , suffcnt[MAX] ;
int n ;
long long a , r , m ;

vector<long long>v ;
map<long long , int>freq ;

long long f(long long x)
{
	int idx = lower_bound(v.begin() , v.end() , x) - v.begin() ;
	idx-- ;
	long long cnt1 = prefcnt[idx] + freq[v[idx]] ;
	long long y = pref[idx] + cnt1 * (x - v[idx]) ;
	long long cost = y * a ;
	idx++ ;
	long long cnt2 = suffcnt[idx] + freq[v[idx]] ;
	long long z = suff[idx] + cnt2 * (v[idx] - x) ;
	cost += z * r ;
	long long cost2 = 0 ;
	long long cnt = min(y , z) ;
	cost2 = cnt * m ;
	cost2 += (y - cnt) * a ;
	cost2 += (z - cnt) * r ;
	cost = min(cost , cost2) ;
	return cost ; 
}

int main()
{
	ios_base::sync_with_stdio(0) ;
	cin.tie(0) ;
	cin>>n>>a>>r>>m ;
	for(int i = 0 ; i < n ; ++i)
	{
		long long x ;
		cin>>x ;
		v.push_back(x) ;
		freq[x]++ ;
	}
	v.push_back(-1) ;
	v.push_back(inf) ;
	sort(v.begin() , v.end()) ;
	v.erase(unique(v.begin() , v.end()) , v.end()) ;
	long long cnt = 0ll ;
	for(int i = 2 ; i < v.size() ; ++i)
	{
		cnt += freq[v[i-1]] ;
		prefcnt[i] = cnt ;
		pref[i] = pref[i-1] + (v[i] - v[i-1]) * cnt ;
	}
	cnt = 0 ;
	for(int i = v.size()-3 ; i >= 0 ; --i)
	{
		cnt += freq[v[i+1]] ;
		suffcnt[i] = cnt ;
		suff[i] = suff[i+1] + (v[i+1] - v[i]) * cnt ;
	}
	long long ans = 4e18 ;
	long long l = -1 , r = 1e9+1 ;
	while(r - l > 1)
	{
		long long mid = (l + r) >> 1 ;
		if(f(mid) < f(mid+1))
			r = mid ;
		else
			l = mid ;
	}
	return cout<<f(l+1)<<"\n" , 0 ;
}		