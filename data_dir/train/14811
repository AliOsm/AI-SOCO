/*"Everything in the universe is balanced. Every disappointment
   you face in life will be balanced by something good for you!
                Keep going, never give up."            */

#include "bits/stdc++.h"
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
ordered_set<int>  os;
#define up_bound(i) os.order_of_key(i) << endl; // the number of elements in the os less than i
#define access_idx(i) *os.find_by_order(i) // print the i-th smallest number in os(0-based)

#define ll long long int
#define ld double 
#define rep(i,a,b) for(int i=a; i<=b; ++i)
#define repd(i,a,b) for(int i=a; i>=b; --i)
#define deb cerr << "Line no." << __LINE__
#define nl '\n'
#define pb push_back
#define all(a) a.begin(),a.end()
#define P pair<ll,ll> 
#define F first
#define S second
const ll p_mod=9999999999999983;
const long double pi = 3.14159265358979323;
const ll N=1e6+9;
const ll mod=1e9+7;
typedef double f80;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){uniform_int_distribution<int> uid(l, r); return uid(rng); }
ll powerk(ll x, ll y);
ll mul(ll x, ll y);
ll add(ll x, ll y);
ll sub(ll x, ll y);

ll a[N],vis[N],parent[N],sizee[N];

vector<P> vv;
vector<pair<ll,P> >v;
queue<P> q;
ll ans;

ll find(ll x)
{
  if(parent[x]!=x)return parent[x] = find(parent[x]);
  return parent[x];
}

void join(ll l, ll r, ll w)
{
  l = find(l);
  r = find(r);
  if(l==r)return;
  if(sizee[l]>sizee[r])swap(l,r);
  parent[l] = r;
  sizee[r]+=sizee[l];
  ans+=w;
}

void solve()
{    
  ll n,m;
  cin>>n>>m;
  rep(i,1,n)parent[i]=i,sizee[i]=1,cin>>a[i],vv.pb({a[i],i});
  sort(all(vv));
  ll mm = vv[0].S;

  rep(i,1,m)
  {
    ll l,r,w;
    cin>>l>>r>>w;
    v.pb({w,{l,r}});
  }
  sort(all(v));
  ll i=0,j=1;
  while(i<m && j<n)
  {
    ll l = v[i].S.F, r = v[i].S.S, w = v[i].F;
    if(w<vv[j].F+vv[0].F)
    {
      //cout<<w<<" ";
      join(l,r,w);
      i++;
    }
    else
    {
      //cout<<vv[j].S<<" "<<vv[j].F+vv[0].F<<" " ;
      join(vv[0].S,vv[j].S,vv[j].F+vv[0].F);
      j++;
    }
    //cout<<i<<" "<<j<<nl;
  }
  while(i<m)join(v[i].S.F,v[i].S.S,v[i].F),i++;
  while(j<n)join(vv[0].S,vv[j].S,vv[0].F+vv[j].F),j++;
 // cout<<ans<<nl;
  //for(int i=1; i<n; i++)join(vv[0].S,vv[i].S,vv[i].F+vv[0].F);//,cout<<i<<" "<<ans<<nl;
  cout<<ans<<nl;



/*

  ll cur=1, ans=0 , cnt=1;
   vis[1]=1;
  while(cnt<n)
  {
    auto it= q.front();
    cout<<it.F<<" "<<it.S<<nl;
    ll minm = 1e18 , val;
    for(auto iit: v[cur])
    {
      if(!vis[iit.S] && minm > iit.F)
      {
        minm = iit.F;
        val = iit.S;
      }
    }
    cout<<minm<<" "<<val<<nl;
    if(minm<it.F+a[cur])
    {
      cur = val;
      ans+=minm;
      vis[cur] = 1;
    }
    else {
      ans+= it.F+a[cur];
      cur = it.S;
      vis[cur] = 1;
    }
    cout<<ans<<nl;
    q.pop();
    cnt++;
  }
  cout<<ans<<nl;

*/


}


int main() {
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    ll t=1;
    //pre();
    //cin>>t;
    while(t--)
    {
      solve();
    }  
}
ll mul(ll x, ll y){return (x*y)%mod;}
ll add(ll x, ll y){return (x+y)%mod;}
ll sub(ll x, ll y){return (x-y+mod)%mod;}
ll powerk(ll x, ll y)
{
  if(y==0)return 1;
  if(y==1)return x%mod;
  if(y&1)
    return ((powerk((x*x)%mod, y/2)%mod)*x)%mod;
  else return powerk((x*x)%mod,y/2)%mod;
}

// Xorawar