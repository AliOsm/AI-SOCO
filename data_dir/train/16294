#include <bits/stdc++.h>
using namespace std;

template <typename T>
class fenwick {
	public:
		vector<T> fenw;
		int n;
		fenwick(int _n) : n(_n) {
			fenw.resize(n);
		}
		void modify(int x, T v) {
			while (x < n) {
				fenw[x] += v;
				x |= (x + 1);
			}
		}
		T get(int x) {
			T v{};
			while (x >= 0) {
				v += fenw[x];
				x = (x & (x + 1)) - 1;
			}
			return v;
		}
};
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int t;
	cin >> t;
	while (t--) {
		int n, m;
		cin >> n >> m;
		vector<int> a(n), b(m);
		vector<int> pos_a(n);
		for (int i = 0; i < n; i++) {
			cin >> a[i];
			a[i]--;
			pos_a[a[i]] = i;
		}
		vector<int> pos_b(n);
		for (int i = 0; i < m; i++) {
			cin >> b[i];
			b[i]--;
			pos_b[b[i]] = i;
		}
		vector<int> pre(m);
		pre[0] = pos_a[b[0]];
		for (int i = 1; i < m; i++) {
			pre[i] = max(pre[i - 1], pos_a[b[i]]);
		}
		fenwick<int> fen(n);
		vector<int> cnt(m);
		for (int i = 0; i < m; i++) {
			cnt[i] = fen.get(pos_a[b[i]]);
			fen.modify(pos_a[b[i]], 1);
		}
		long long ans = 0;
		for (int i = m - 1; i >= 0; i--) {
			if (pre[i] > pos_a[b[i]]) {
				ans += 1;
			} else {
				ans += (pos_a[b[i]] - cnt[i]) * 2 + 1;
			}
		}
		cout << ans << '\n';
	}
	return 0;
}
