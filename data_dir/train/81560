#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <list>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> ii;
typedef vector<int> vi;

#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(),(x).end()
#define clr(t,v) memset((t),(v),sizeof(t))
#define endl ('\n')

const int inf=1999999999;
const double pi=acos(-1.0);
const double eps=1e-10;
char gc(){char c;while(isspace(c=getchar()));return c;}
int gs(char* s){gets(s);int l=strlen(s);while(l && isspace(s[l-1]))s[--l]=0;return l;}

int gcd(int a,int b){return (b==0)?a:gcd(b,a%b);}

vi p;
set<int> dp;
void gen(int a,vi used)
{
    if(!dp.insert(a).se)
        return;
    for(int i=0;i<sz(used);i++)
        if(!used[i])
        {
            used[i]=true;
            gen(a*p[i],used);
            used[i]=false;
        }
}
int main()
{
    ios::sync_with_stdio(false);
//  freopen("i.txt","r",stdin); freopen("o.txt","w",stdout);
    int a,b;
    cin>>a>>b;
    {
        int t=gcd(a,b);
        for(int i=2;i*i<=t;i++)
            while((t%i)==0)
            {
                p.pb(i);
                t/=i;
            }
        if(t!=1)
            p.pb(t);
    }
    {
        vi t(sz(p),false);
        gen(1,t);
    }
    {
        int n;
        cin>>n;
        vi d(dp.begin(),dp.end());
        for(int i=0;i<n;i++)
        {
            int a,b;
            cin>>a>>b;
            vi::iterator it=upper_bound(all(d),b);
            if(it==d.begin())
                cout<<-1<<endl;
            else
            {
                --it;
                cout<<((*it>=a)?*it:-1)<<endl;
            }
        }
    }
    return 0;
}
