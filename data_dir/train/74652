#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(string, s);
	next(string, p);
	int n = s.length();
	int m = p.length();
	
	vector<vector<int>> max_match(n + 1, vector<int>(n + 1));
	
	deque<pair<int, int>> ps;
	FOR (i, 0, n) {
		int end = i;
		int ptr = 0;
		while (ptr < m && end < n) {
			if (s[end] == p[ptr]) ptr++;
			end++;
		}
		if (ptr != m) break;
		end--;
		if (ps.size() && ps.back().second == end) continue;
		
		ptr = m - 1;
		i = end;
		while (ptr != -1) {
			if (s[i] == p[ptr]) ptr--;
			i--;
		}
		i++;
		ps.push_back( { i , end } );
	}
	FOR (len, 1, n + 1) {
		FOR (removed, 0, len + 1) {
			maximize(max_match[len][removed] , max_match[len - 1][removed]);
			if (removed) maximize(max_match[len][removed] , max_match[len - 1][removed - 1]);
			if (ps.size() && ps.front().second == len - 1) {
				int needToRemove = ps.front().second - ps.front().first + 1 - m;
				if (needToRemove <= removed && removed - needToRemove <= ps.front().first) {
					int prev = 1;
					if (ps.front().first) prev += max_match[ps.front().first][removed - needToRemove];
					maximize(max_match[len][removed] , prev);
				}
			}
		}
		if (ps.size() && ps.front().second == len - 1)
			ps.erase(ps.begin());
	}
	
	// for (auto &v : max_match) cout << v;
	
	FOR (i, 0, n + 1) cout << max_match[n][i] << ' ';
}