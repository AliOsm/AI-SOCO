#include <cstdlib>
#include <iostream>
#include <map>
#include <stdio.h>
#include <vector>
#include<bits/stdc++.h>
#include <ctype.h>
#include <list>
#include <stack>
#include <queue>
#include <string.h>
#include <iomanip>
#include <string>
#include <algorithm>
#include <cmath>
#define _CRT_SECURE_NO_DEPRECATE
#define INF 1000000000
#define Set(a, s) memset(a, s, sizeof (a))
#define forpos(i,j,k) for (int i=0 ; i<j ; i+=k)
#define forneg(i,j,k) for (int i=j ;i>=0 ;i-=k)
#define upcase(x) transform(x.begin(), x.end(), x.begin(), ::toupper)
#define locase(x) transform(x.begin(), x.end(), x.begin(), ::tolower)
#define PI 3.14159265358979323846
#define pf printf
#define SSTR( x ) dynamic_cast< std::ostringstream & >( \
       ( std::ostringstream() << std::dec << x ) ).str()


using namespace std;

typedef long long ll;
typedef std::pair<int,int> ii;
typedef std::pair<std::string,int> si;
typedef vector<int> vi;
typedef vector<ii> vii;

unsigned power( unsigned val, unsigned _pow=0 ) {
	if ( _pow <= 0 )
		return 1;
	return val * power( val, _pow-1 );
}

//string to integer-->stoi(str)
//int dx[]={-1,1,0,0,1,1,-1,-1};
//int dy[]={0,0,1,-1,1,-1,1,-1};
vector<vi> adjList;
vector <int>color;
queue<int>q;


bool comp(pair<int,int>x,pair<int,int>y)
{
    return x.first>y.first;
}

  long rec(long i)
{
    if(i==1)return 1;
    else if(i%2==1)return 1+rec((3*i)+1);
    else return 1+rec(i/2);
}

int main()
{
     int r,c;cin>>r>>c;
     char arr[r][c];
     int sum=0;
     forpos(i,r,1)
     {
         bool emp=true;
         forpos(j,c,1)
         {
             char c;cin>>c;
             if(c=='S')emp=false;
                arr[i][j]=c;
         }
         if(emp)sum++;
     }
     int tsum=sum*c;
     forpos(j,c,1)
     {
         bool emp=true;
         forpos(i,r,1)
         {
             if(arr[i][j]=='S')
             {
                 emp=false;

                 break;
             }
         }
         if(emp)tsum+=r-sum;
     }
    cout<<tsum;
}
