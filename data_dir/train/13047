#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair

typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 1 << 19;
const int INF = 1e9;

int n;
int t[2][MAXN];
int a[MAXN];
int q;
vector<int> pos[MAXN];
int cnt[MAXN];

void update(int id, int pos, int val) {
  pos += MAXN / 2;
  t[id][pos] = val;
  while (pos >>= 1) {
    t[id][pos] = min(t[id][pos << 1], t[id][pos << 1 | 1]);
  }
}

int get_min(int id, int l, int r) {
  int res = INF;
  for (l += MAXN / 2, r += MAXN / 2; l < r; l >>= 1, r >>= 1) {
    if (l & 1) res = min(res, t[id][l++]);
    if (r & 1) res = min(res, t[id][--r]);
  }
  return res;
}

int main() {
#ifdef LOCAL
  freopen("input", "r", stdin);
#endif
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cin >> n;
  for (int i = 1; i <= n; ++i) {
    cin >> a[i];
    ++cnt[a[i]];
  }                            
  fill(t[0], t[0] + MAXN, INF);
  fill(t[1], t[1] + MAXN, INF);
  for (int i = 1; i <= n; ++i) {
    pos[a[i]].pb(i);
    if (cnt[a[i]] == 1) continue;
    if (pos[a[i]].size() == 1) {
      update(0, a[i], i);   
    } else if (pos[a[i]].size() == 2) {
      update(1, a[i], i);
    }
  }
  for (int i = 1; i <= n; ++i) {
    reverse(pos[i].begin(), pos[i].end());
  }
  for (int x = 1; x <= n; ++x) {
    if (pos[x].empty()) {
      ++q;
      int i = get_min(0, x + 1, n + 1);
      int j = get_min(1, 1, x);
      int p = min(i, j);
      pos[a[p]].pop_back();
      if (pos[a[p]].size() > 1u) {
        update(0, a[p], pos[a[p]].back());
        update(1, a[p], pos[a[p]][(int)pos[a[p]].size() - 2]);
      } else {               
        update(0, a[p], INF);
        update(1, a[p], INF);
      }
      a[p] = x;
    }
  }
  cout << q << '\n';
  for (int i = 1; i <= n; ++i) {
    cout << a[i] << ' ';
  }        
  cout << endl;
  return 0;
}