#include<stdio.h>
#include<math.h>
#include<vector>
#include<string.h>
#define pb push_back
using namespace std;

vector<int> data;
const long long MOD = 1e9+7;
long long n1;
long long bfac[100003], b[100003];
bool prima[100003];

void sieve()
{
	prima[1] = 0;
	for(int i = 2; i < sqrt(100000); i++)
	{
		if(prima[i])
		{
			int j = i;
			while(i*j <= 100000) prima[i*j] = 0, j++;
		}
	}
}

long long pw(long long a, long long b)
{
	long long res = 1;
	while(b)
	{
		long long x=a, y=1;
		while(y*2 <= b)
		{
			x *= x; x %= MOD;
			y += y;
		}
		res = (res*x)%MOD;
		b -= y;
	}
	return res;
}

int main()
{
//	freopen("f.debug", "w", stdout);
	memset(prima, 1, sizeof prima);
	sieve();
	int n; scanf("%d", &n);
	for(int i = 1; i <= n; i++)
	{
		int x; scanf("%d", &x);
		data.clear();
		n1 += (x!=1);
		for(int j = 1; j <= sqrt(x); j++)
		{
			if(x%j == 0)
			{
				if(prima[j])
				{
					int temp = data.size();
					for(int k = 0; k < temp; k++)
					{
	//					printf("%d %d %d\n", x, j, j*data[k]);
						b[j*data[k]]++;
						data.pb(j*data[k]);
					}
					data.pb(j);
					b[j]++;
				}
				if(prima[x/j] && j != x/j)
				{
					int temp = data.size();
					for(int k = 0; k < temp; k++)
					{
	//					printf("%d %d %d\n", x, x/j, x/j*data[k]);
						b[x/j*data[k]]++;
						data.pb(x/j*data[k]);
					}
					data.pb(x/j);
					b[x/j]++;
				//	data.push(i/j);
				}
			}
		}
	}
	for(int i = 1; i <= 100000; i++)
	{
		for(int j = 1; j <= sqrt(i); j++)
		{
			if(i%j == 0)
			{
				if(prima[j]) bfac[i]++;
				if(prima[i/j] && j != i/j) bfac[i]++;
			}
		}
	}
//	for(int i = 1; i <= 300; i++) printf("%d %d\n", i, bfac[i]);
	long long res = pw(2,(long long)n)-1-n1;
	for(int i = 2; i <= 100000; i++)
	{
		long long cnt = pw(2,b[i])-1-b[i];
		if(bfac[i]&1) res -= cnt;
		else res += cnt;
		res = (res + 100*MOD) % MOD;
	//	if(b[i]) printf("%d %d %d %lld\n", i, b[i], bfac[i], cnt);
	}
	printf("%lld\n", res);
}
