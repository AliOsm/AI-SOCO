#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
int col[N],n,root[N],num,last,rem,k,lst[N];
struct node{
	int sum,l,r;
	node(int a = 0,int b = 0,int c = 0){
		sum = a;l = b;r = c;
	}
}seg[40*N];
int build(int c,int l,int r){
	if((l > num || r < num) && (l > rem || r < rem))return c;
	int at = ++last;
	if(l == r){
		seg[at].sum = l == num;
		return at;
	}
	seg[at].l = build(seg[c].l,l,(l + r)/2);
	seg[at].r = build(seg[c].r,(l + r)/2 + 1,r);
	seg[at].sum = seg[seg[at].l].sum + seg[seg[at].r].sum;
	return at;
}
int get(int c,int l,int r){
	if(seg[c].sum <= k)return r;
	if(l == r){return seg[c].sum > k ? -1 : r;}
	if(seg[seg[c].l].sum > k)return get(seg[c].l,l,(l + r)/2);
	else if(seg[seg[c].l].sum < k){
		k-=seg[seg[c].l].sum;
		return get(seg[c].r,(l + r)/2 + 1,r);
	}
	int x = get(seg[c].l,l,(l + r)/2);
	k-=seg[seg[c].l].sum;
	int y = get(seg[c].r,(l + r)/2 + 1,r);
	return max(x,y);
}
int main(){
// 	freopen("readin.txt","r",stdin);
	scanf("%d",&n);
	for(int i = 1;i <= n;i++)scanf("%d",col + i);
	for(int i = n;i;i--){
		rem = lst[col[i]];
		num = i;
		root[i] = build(root[i + 1],1,n);
		lst[col[i]] = i;
	}
	int lol = 0;
	for(int k = 1;k <= n;k++){
		int l = 1,ans = 0;;
		while(l <= n){
			::k = k;
			l = get(root[l],1,n) + 1;
			ans++;
		}
		printf("%d ",ans);
	}
}