#include <bits/stdc++.h>
using namespace std;
int n,x;
deque<int>dq,tmp;
string ans;
int solveleft(deque<int>dq, int last){
    int res = 1;
    last = dq.front();
    dq.pop_front();
    while(!dq.empty()){
        int l = dq.front();
        int r = dq.back();
        if(l > last && r > last){
            if(l <= r)
                last = l, dq.pop_front(),res++;
            else if(r <= l)
                last = r, dq.pop_back(),res++;
        }
        else if(l > last)
            last = l, dq.pop_front(),res++;
        else if(r > last)
            last = r, dq.pop_back(),res++;
        else
            break;
    }
    return res;
}
int solveright(deque<int>dq, int last){
    int res = 1;
    last = dq.back();
    dq.pop_back();
    while(!dq.empty()){
        int l = dq.front();
        int r = dq.back();
        if(l > last && r > last){
            if(l <= r)
                last = l, dq.pop_front(),res++;
            else if(r <= l)
                last = r, dq.pop_back(),res++;
        }
        else if(l > last)
            last = l, dq.pop_front(),res++;
        else if(r > last)
            last = r, dq.pop_back(),res++;
        else
            break;
    }
    return res;
}
int main()
{
    ios::sync_with_stdio(0);
    cin >> n;
    for(int i = 0; i < n; i++)
        cin >> x, dq.push_back(x);
    x = -1;
    while(!dq.empty()){
        int l = dq.front();
        int r = dq.back();
        if(l == r && l > x){
            tmp = dq;
            int ll = solveleft(tmp, x);
            tmp = dq;
            int rr = solveright(tmp,x);
            if(ll >= rr){
                ans += 'L', x = l, dq.pop_front();
            }
            else{
                ans += 'R', x = r, dq.pop_back();
            }
            continue;
        }
        if(l > x && r > x){
            if(l <= r)
                ans += 'L', x = l, dq.pop_front();
            else if(r <= l)
                ans += 'R', x = r, dq.pop_back();
        }
        else if(l > x)
            ans += 'L', x = l, dq.pop_front();
        else if(r > x)
            ans += 'R', x = r, dq.pop_back();
        else
            break;
    }
    cout << ans.size() << endl;
    cout << ans << endl;
    return 0;
}
