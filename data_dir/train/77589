#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

const int N = 1000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

vector<int> dx = {0, 0, -1, 1};
vector<int> dy = {-1, 1, 0, 0};

int n, m;
string a[N];
int d[N][N];

void bfs(int x, int y)
{
    rep(i, 0, n)
        rep(j, 0, m)
            d[i][j] = inf;
    d[x][y] = 0;
    queue<pair<int, int> > q;
    q.push({x, y});
    while (!q.empty())
    {
        x = q.front().fi; y = q.front().se;
        q.pop();
        for (int i = 0; i < 4; i++)
            if (x + dx[i] >= 0 && x + dx[i] < n && y + dy[i] >= 0 && y + dy[i] < m && a[x + dx[i]][y + dy[i]] != 'T' && d[x + dx[i]][y + dy[i]] == inf)
            {
                d[x + dx[i]][y + dy[i]] = d[x][y] + 1;
                q.push({x + dx[i], y + dy[i]});
            }
    }
}

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cin >> n >> m;
    rep(i, 0, n)
        cin >> a[i];
    rep(i, 0, n)
        rep(j, 0, m)
            if (a[i][j] == 'E')
                bfs(i, j);
    int min_dist;
    rep(i, 0, n)
        rep(j, 0, m)
            if (a[i][j] == 'S')
                min_dist = d[i][j];
    int ans = 0;
    rep(i, 0, n)
        rep(j, 0, m)
            if (a[i][j] >= '0' && a[i][j] <= '9' && d[i][j] <= min_dist)
                ans += (a[i][j] - '0');
    cout << ans << "\n";
    return 0;
}
