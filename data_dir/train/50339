#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = (int)1e7 + 10;
int a[maxn],p[maxn];
LL cnt[maxn],add[maxn];
int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    int k; cin >> k;
    for (int i = 0; i < k; i++) {
        int x; scanf("%d",&x);
        a[x]++;
    }
    for (int i = 2; i * i < maxn; i++) {
        if (p[i] != 0) continue;
        p[i] = i;
        for (int j = i * i; j < maxn; j += i) {
            if (p[j]) continue;
            p[j] = i;
        }
    }
    for (int i = 2; i < maxn; i++) {
        if (p[i] != 0) continue;
        p[i] = i;
    }
    int cur = 0;
    for (int i = maxn - 1; i >= 2; i--) {
        cur += a[i];
        if (cur == 0) continue;
        LL now = add[i] + cur;
        int x = i;
        int w = p[x];
        int r = 0;
        while(p[x] == w) {
            x /= p[x];
            r++;
        }
        cnt[w] = cnt[w] + r * now;
        add[x] += now;
    }   
    LL ma = 1;
    for (int i = 2; i < maxn; i++) {
        if (cnt[i] == 0) continue;
        LL lf = 0;
        LL rg = (LL)1e18;
        while(lf < rg - 1) {
            LL mm = (lf + rg) / 2;
            LL cc = 0;
            LL x = mm;
            while(x > 0) {
                x /= i;
                cc += x;
            }
            if (cc >= cnt[i]) rg = mm; else lf = mm;
        }
        ma = max(ma,rg);
    }
    cout << ma << endl;
    return 0;
}
