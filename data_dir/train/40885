#include <bits/stdc++.h>
using namespace std;
#define ll long long
struct node
{
	node *child[27];
	bool end;
	priority_queue<int> pq;
	node()
	{
		memset(child, 0, sizeof child);
		end = 0;
	}
};
int n;
node *root = new node();
void insert(string &s)
{
	node *cur = root;
	for (int i = 0; i < s.size(); i++)
	{
		if (!cur->child[s[i] - 'a'])
			cur->child[s[i] - 'a'] = new node();
		cur = cur->child[s[i] - 'a'];
	}
	cur->end = 1;
}
int solve(node *cur, int lvl)
{
	for (int i = 0; i < 26; i++)
	{
		if (!cur->child[i])
			continue;
		solve(cur->child[i], lvl + 1);
		while (cur->child[i]->pq.size())
		{
			cur->pq.push(cur->child[i]->pq.top());
			cur->child[i]->pq.pop();
		}
	}
	if (!lvl)
	{
		int ret = 0;
		while (cur->pq.size())
			ret += cur->pq.top(), cur->pq.pop();
		return ret;
	}
	if (!cur->end)
	{
		if (cur->pq.size())
		{
			cur->pq.pop();
			cur->pq.push(lvl);
		}
	}
	else
		cur->pq.push(lvl);
	return 0;
}
int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		string s;
		cin >> s;
		insert(s);
	}
	cout << solve(root, 0) << endl;
	return 0;
}

