#include <iostream>
#include <fstream>
#include <algorithm>
#include <iomanip>
#include <random>
#include <ctime>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <cstring>
#include <queue>
#include <deque>
#include <stack>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define ld long double
#define ull unsigned long long
#define ll long long
#define pb push_back
#define pii pair<int, int>
#define pll pair<ll, ll>
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define fast_io cout.tie(0), cin.tie(0), ios_base::sync_with_stdio(0)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
using namespace std;
//using namespace __gnu_pbds;
//typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
ld eps = (ld)1 / 1e14;
ll inf = 1e18, mod2 = 998244353, mod1 = 1e9 + 7;
ll sqr(ll a) { return a * a; }
ll qb(ll a) { return a * a * a; }
ll gcd(ll a, ll b) { return !a ? b : gcd(b % a, a); }
ll binpow(ll a, ll b, ll mod) { return b ? (b % 2 ? (a * (sqr(binpow(a, b / 2, mod)) % mod)) % mod : sqr(binpow(a, b / 2, mod)) % mod) : 1; }
ll binmult(ll a, ll b, ll mod) { return b ? (b % 2 ? (2 * binmult(a, b / 2, mod) + a) % mod : (2 * binmult(a, b / 2, mod)) % mod) : 0; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ll kl[26];

int main()
{
    fast_io;
    ll q, n, k, i, j, s, p1, p, mx, sm;
    string a;
    cin >> q;
    while (q--)
    {
        cin >> n >> k >> a;
        s = 0;
        p = (k % 2 ? k / 2 : k / 2 - 1);
        for (i = 0; i <= p; i++)
        {
            for (j = 0; j < 26; j++) kl[j] = 0;
            for (j = i, p1 = k - 1; j < n; j += k, p1 += k)
            {
                kl[a[j] - 'a']++;
                if (j != p1 - i) kl[a[p1 - i] - 'a']++;
            }
            sm = 0, mx = 0;
            for (j = 0; j < 26; j++)
            {
                sm += kl[j];
                mx = max(mx, kl[j]);
            }
            s += sm - mx;
        }
        cout << s << '\n';
    }
    return 0;
}