#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <functional>
#include <cmath>
#include <climits>
#include <memory.h>

#if !defined(__GNUC__)
#include <hash_set>
#include <hash_map>
typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef signed short int16_t;
typedef unsigned short uint16_t;
typedef signed long int32_t;
typedef unsigned long uint32_t;
typedef signed long long int64_t;
typedef unsigned long long uint64_t;
#else // !defined(__GNUC__)
#include <ext/hash_set>
#include <ext/hash_map>
namespace stdext = __gnu_cxx;
#define _CrtDbgBreak()
#endif // !defined(__GNUC__)

#if defined(ONLINE_JUDGE)
#define LOCAL_TEST 0
#else 
#define LOCAL_TEST 1
#endif

#if LOCAL_TEST
#define LOCAL_ASSERT(expr) if (!(expr)) {std::cout << "ASSERT FAILED: '" << #expr << "'" << std::endl; _CrtDbgBreak(); }
#else
#define LOCAL_ASSERT(expr)
#endif

typedef long double double_t;
typedef std::string string8_t;

typedef std::vector<size_t> vector_size_t;
typedef std::vector<uint32_t> vector_uint32_t;
typedef std::vector<uint64_t> vector_uint64_t;
typedef std::vector<int32_t> vector_int32_t;
typedef std::vector<vector_size_t> vector_2d_size_t;
typedef std::vector<string8_t> vector_string8_t;
typedef std::set<size_t> set_size_t;
typedef std::set<string8_t> set_string8_t;
typedef stdext::hash_set<size_t> hash_set_size_t;
typedef std::multiset<string8_t> multiset_string8_t;

// Auxiliary functions definition
// 
template<typename T> inline T Abs(const T a) { return a < 0 ? -a : a; }
template<typename T> inline T Min(const T a, const T b) {return a < b ? a : b;}
template<typename T> inline T Max(const T a, const T b) {return a > b ? a : b;}
template<typename T> inline void UpdateMin(T& a, const T b) {a = Min(a, b);}
template<typename T> inline void UpdateMax(T& a, const T b) {a = Max(a, b);}

static const double_t eps = 1.0e-09;
template<typename T> inline bool IsEqual(const T a, const T b) { return Abs(a - b) < eps; }
template<typename T> inline bool IsGreater(const T a, const T b) { return a > b + eps; }
template<typename T> inline bool IsLess(const T a, const T b) { return a + eps < b; }

template<typename T> inline string8_t ToStr(const T& val) { std::ostringstream ostr; ostr << val; return ostr.str(); }
template<typename T> inline T FromStr(const string8_t& str) {std::istringstream istr(str); T val; istr >> val; return val; }

#if defined(ONLINE_JUDGE)
template<size_t id> class StopWatch { };
#elif !defined(__GNUC__)
#include <library/lib_stopwatch.h>
#else 
#include "../../library/library/lib_stopwatch.h"
#endif

string8_t MakePal1(const string8_t& s)
{
    string8_t d(s);
    for (size_t i = 0; i + 1 < s.size(); i++)
    {
        d += s[s.size() - 2 - i];
    }
    return d;
}

string8_t MakePal2(const string8_t& s)
{
    string8_t d(s);
    for (size_t i = 0; i < s.size(); i++)
    {
        d += s[s.size() - 1 - i];
    }
    return d;
}

string8_t MakeAnswer(const string8_t& s, size_t l1, size_t l2, size_t l3, size_t l4)
{
    string8_t ans;
    ans.append(s.substr(0, l1));
    ans.push_back('.');
    ans.append(s.substr(l1, l2));
    ans.push_back('.');
    ans.append(s.substr(l1 + l2, l3));
    ans.push_back('.');
    ans.append(s.substr(l1 + l2 + l3, l4));
    return ans;
}

string8_t MakeAnswer(const string8_t& s1, const string8_t& s2, const string8_t& s3, const string8_t& s4)
{
    string8_t ans;
    ans.append(s1);
    ans.push_back('.');
    ans.append(s2);
    ans.push_back('.');
    ans.append(s3);
    ans.push_back('.');
    ans.append(s4);
    return ans;
}

bool IsValid(const string8_t& s)
{
    if (s.length() == 1)
        return true;

    if (s[0] == '0')
        return false;

    if (FromStr<uint64_t>(s) > 255)
        return false;

    return true;
}

void AppendAnswers(const string8_t& s, vector_string8_t& ans)
{
    const size_t n = s.size();

    for (size_t l1 = 1; l1 <= 3; l1++)
    {
        if (l1 + 3 > n)
            continue;

        const string8_t& s1 = s.substr(0, l1);
        if (!IsValid(s1))
            continue;

        for (size_t l2 = 1; l2 <= 3; l2++)
        {
            if (l1 + l2 + 2 > n)
                continue;

            const string8_t& s2 = s.substr(l1, l2);
            if (!IsValid(s2))
                continue;

            for (size_t l3 = 1; l3 <= 3; l3++)
            {
                if (l1 + l2 + l3 + 1 > n)
                    continue;

                const string8_t& s3 = s.substr(l1 + l2, l3);
                if (!IsValid(s3))
                    continue;

                const size_t l4 = n - l1 - l2 - l3;

                const string8_t& s4 = s.substr(l1 + l2 + l3, l4);
                if (!IsValid(s4))
                    continue;

                const string8_t& v = MakeAnswer(s1, s2, s3, s4);
                ans.push_back(v);
            }
        }
    }
}

bool CheckPresense(const string8_t& s, const string8_t& chars)
{
    for (size_t i = 0; i < chars.size(); i++)
    {
        if (s.find(chars[i]) == string8_t::npos)
            return false;
    }
    return true;
}

void GenerateAnswers(const string8_t& chars, const size_t len, const size_t maxLen, string8_t& currStr, vector_string8_t& ans)
{
    if (len > maxLen)
        return;

    {
        const string8_t& dupl1 = MakePal1(currStr);
        if (CheckPresense(dupl1, chars))
        {
            AppendAnswers(dupl1, ans);
        }
    }

    {
        const string8_t& dupl2 = MakePal2(currStr);
        if (CheckPresense(dupl2, chars))
        {
            AppendAnswers(dupl2, ans);
        }
    }

    for (size_t i = 0; i < chars.size(); i++)
    {
        currStr.push_back(chars[i]);
        GenerateAnswers(chars, len + 1, maxLen, currStr, ans);
        currStr.erase(currStr.size() - 1);
    }
}

bool Solve(std::istream& ist, std::ostream& ost, const bool multipleTestMode)
{
    StopWatch<1> sw;

    // 
    size_t n;
    ist >> n;

    if (multipleTestMode && !ist)
        return false;

    // 
    vector_uint32_t a(n);
    string8_t chars(n, '0');
    for (size_t i = 0; i < n; i++)
    {
        ist >> a[i];
        chars[i] = (char)('0' + a[i]);
    }   

    if (n > 6)
    {
        ost << "0" << std::endl;
        return multipleTestMode;
    }

    vector_string8_t ans;
    string8_t currStr;
    GenerateAnswers(chars, 0, 6, currStr, ans);
    
    ost << ans.size() << std::endl;
    //set_string8_t ansS(ans.begin(), ans.end());
    //ost << ansS.size() << std::endl;
    //for (set_string8_t::const_iterator pi = ansS.begin(); pi != ansS.end(); ++pi)
    for (vector_string8_t::const_iterator pi = ans.begin(); pi != ans.end(); ++pi)
    {
        ost << *pi << std::endl;
    }

    return multipleTestMode;
}

int main()
{
    std::ios_base::sync_with_stdio(false);
    std::istream& ist = std::cin;
    std::ostream& ost = std::cout;
#if defined(ONLINE_JUDGE)
    Solve(ist, ost, false);
#else
    while(Solve(ist, ost, true)) {};
#endif
}
