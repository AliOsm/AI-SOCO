#include <bits/stdc++.h>
using namespace std;

vector<int> g[100005];
int parent[100005];
int type[100005];

void setTree(int node, int p) {
    parent[node] = p;
    int cnt[3] = { 0, 0, 0 };
    for (int i = 0; i < int(g[node].size()); i++) {
        int child = g[node][i];
        if (child == parent[node])
            continue;
        setTree(child, node);
        cnt[type[child]]++;
    }
    if (cnt[0] > 2)
        type[node] = 2;
    else if (cnt[1] || cnt[2])
        type[node] = 2;
    else if (cnt[0] == 2)
        type[node] = 1;
    else
        type[node] = 0;
//  cout << node + 1 << " " << type[node] << endl;
}

int solve(int node, int directions) {
    int cnt[3] = { 0, 0, 0 };
    for (int i = 0; i < int(g[node].size()); i++) {
        int child = g[node][i];
        if (child == parent[node])
            continue;
        cnt[type[child]]++;
    }
//  cout << node << " " << cnt[2] << "!!" << endl;
    if (type[node] != 2)
        return true;
    if (cnt[2] > directions)
        return false;

    if (cnt[2] < directions) {
        for (int i = 0; i < int(g[node].size()); i++) {
            int child = g[node][i];
            if (child == parent[node] || type[child] != 2)
                continue;
            return solve(child, 1);
        }
    } else {
        for (int i = 0; i < int(g[node].size()); i++) {
            int child = g[node][i];
            if (child == parent[node] || type[child] != 2)
                continue;
            if (solve(child, 1) == false)
                return false;
        }
    }
    return true;
}

int main() {
    ios::sync_with_stdio(false);
    //freopen("/home/ahmed/testing.in", "r", stdin);
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n - 1; i++) {
        int u, v;
        scanf("%d%d", &u, &v);
        --u;
        --v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    int r = 0;
    for (int i = 0; i < n; i++)
        if (g[i].size() > g[r].size())
            r = i;

    for (int x = 0; x < 50; x++) {
        r = rand() % n;
        setTree(r, -1);
        if (solve(r, 2)) {
            cout << "Yes\n";
            return 0;
        }

    }cout << "No\n";

    return 0;
}
