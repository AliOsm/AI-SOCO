#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>

#define ll long long
#define ld long double
#define ull unsigned ll
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vector<int>>
#define endl '\n'
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const int  Inf = 1e9;
ll LINF = (ll)4e18;
using namespace std;
ll mod = 1e9 + 7;
ll mod2 = 1e9 + 123;
#define M_PI       3.14159265358979323846   // pi
int n;
bool ok(int x, int y) {
	return x >= 0 && x < n && y >= 0 && y < n;
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("divisors.in", "r", stdin);
	//freopen("divisors.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	
	cin >> n;
	pair<int, int> dp[10][10][3];
	vector<pii> xy(n*n);
	forn(i, 0, n) {
		forn(j, 0, n) {
			int x;
			cin >> x;
			x--;
			xy[x] = mp(i, j);
		}
	}
	forn(i, 0, n) {
		forn(j, 0, n) {
			forn(k, 0, 3) dp[i][j][k] = { -1, -1 };
		}
	}
	pii curst = xy[0];
	dp[curst.first][curst.second][0] = { 0, 0 };
	dp[curst.first][curst.second][1] = { 0, 0 };
	dp[curst.first][curst.second][2] = { 0, 0 };
	forn(qwe, 1, n*n + 1) {
		queue<pair<pii, int>> q;
		forn(i, 0, n) {
			forn(j, 0, n) {
				forn(k, 0, 3) {
					if (i == curst.first && j == curst.second) {
						q.push({ {i,j}, k });
						continue;
					}
					dp[i][j][k] = { -1, -1 };
				}
			}
		}
		int asdasd = 0;
		while (!q.empty()) {
			pair<pii, int> v = q.front();
			q.pop();
			int f = v.second;
			int x = v.first.first;
			int y = v.first.second;
			if (f == 0) { /////kon'
				vi dx = { -2, -2, 2, 2, -1, -1, 1, 1 };
				vi dy = { 1, -1, 1, -1, -2, 2, 2, -2 };
				forn(lol, 0, 8) {
					int nx = v.first.first + dx[lol];
					int ny = v.first.second + dy[lol];
					if (ok(nx, ny)) {
						if (dp[nx][ny][f] == mp(-1, -1) || (dp[nx][ny][f].first > dp[x][y][f].first + 1) || ((dp[nx][ny][f].first == dp[x][y][f].first + 1) && (dp[nx][ny][f].second > dp[x][y][f].second))) {
							q.push({ {nx, ny}, f });
							dp[nx][ny][f].first = dp[x][y][f].first + 1;
							dp[nx][ny][f].second = dp[x][y][f].second;
						}
					}
				}
				//// to 1
				if (dp[x][y][1] == mp(-1, -1) || (dp[x][y][1].first > dp[x][y][f].first + 1) || ((dp[x][y][1].first == dp[x][y][0].first + 1) && (dp[x][y][f].second + 1 < dp[x][y][1].second))) {
					q.push({ { x, y }, 1 });
					dp[x][y][1].first = dp[x][y][f].first + 1;
					dp[x][y][1].second = dp[x][y][f].second + 1;
				}

				//// to 2
				if (dp[x][y][2] == mp(-1, -1) || (dp[x][y][2].first > dp[x][y][f].first + 1) || ((dp[x][y][2].first == dp[x][y][0].first + 1) && (dp[x][y][f].second + 1 < dp[x][y][2].second))) {
					q.push({ { x, y }, 2 });
					dp[x][y][2].first = dp[x][y][f].first + 1;
					dp[x][y][2].second = dp[x][y][f].second + 1;
				}

			}

			if (f == 1) { /////slon
				vi dx = { -1, 1, 1, -1};
				vi dy = { -1, -1, 1, 1};
				forn(lol, 1, n) {
					forn(kek, 0, 4) {
						int nx = v.first.first + lol*dx[kek];
						int ny = v.first.second + lol*dy[kek];
						if (ok(nx, ny)) {
							if (dp[nx][ny][f] == mp(-1, -1) || (dp[nx][ny][f].first > dp[x][y][f].first + 1) || ((dp[nx][ny][f].first == dp[x][y][f].first + 1) && (dp[nx][ny][f].second > dp[x][y][f].second))) {
								q.push({ { nx, ny }, f });
								dp[nx][ny][f].first = dp[x][y][f].first + 1;
								dp[nx][ny][f].second = dp[x][y][f].second;
							}
						}
					}
				}
				//// to 0
				if (dp[x][y][0] == mp(-1, -1) || (dp[x][y][0].first > dp[x][y][f].first + 1) || ((dp[x][y][0].first == dp[x][y][f].first + 1) && (dp[x][y][f].second + 1 < dp[x][y][0].second))) {
					q.push({ { x, y }, 0 });
					dp[x][y][0].first = dp[x][y][f].first + 1;
					dp[x][y][0].second = dp[x][y][f].second + 1;
				}

				//// to 2
				if (dp[x][y][2] == mp(-1, -1) || (dp[x][y][2].first > dp[x][y][f].first + 1) || ((dp[x][y][2].first == dp[x][y][f].first + 1) && (dp[x][y][f].second + 1 < dp[x][y][2].second))) {
					q.push({ { x, y }, 2 });
					dp[x][y][2].first = dp[x][y][f].first + 1;
					dp[x][y][2].second = dp[x][y][f].second + 1;
				}

			}

			if (f == 2) { ///// ladya
				vi dx = { -1, 1, 0, 0 };
				vi dy = { 0, 0, 1, -1 };
				forn(lol, 1, n) {
					forn(kek, 0, 4) {
						int nx = v.first.first + lol*dx[kek];
						int ny = v.first.second + lol*dy[kek];
						if (ok(nx, ny)) {
							if (dp[nx][ny][f] == mp(-1, -1) || (dp[nx][ny][f].first > dp[x][y][f].first + 1) || ((dp[nx][ny][f].first == dp[x][y][f].first + 1) && (dp[nx][ny][f].second > dp[x][y][f].second))) {
								q.push({ { nx, ny }, f });
								dp[nx][ny][f].first = dp[x][y][f].first + 1;
								dp[nx][ny][f].second = dp[x][y][f].second;
							}
						}
					}
				}
				//// to 1
				if (dp[x][y][1] == mp(-1, -1) || (dp[x][y][1].first > dp[x][y][f].first + 1) || ((dp[x][y][1].first == dp[x][y][f].first + 1) && (dp[x][y][f].second + 1 < dp[x][y][1].second))) {
					q.push({ { x, y }, 1 });
					dp[x][y][1].first = dp[x][y][f].first + 1;
					dp[x][y][1].second = dp[x][y][f].second + 1;
				}

				//// to 0
				if (dp[x][y][0] == mp(-1, -1) || (dp[x][y][0].first > dp[x][y][f].first + 1) || ((dp[x][y][0].first == dp[x][y][f].first + 1) && (dp[x][y][f].second + 1 < dp[x][y][0].second))) {
					q.push({ { x, y }, 0 });
					dp[x][y][0].first = dp[x][y][f].first + 1;
					dp[x][y][0].second = dp[x][y][f].second + 1;
				}
			}
			if (qwe<n*n) curst = xy[qwe];
		}
	}
	int ans1 = 1e9, ans2 = 1e9;
	forn(kk, 0, 3) {
		if (dp[curst.first][curst.second][kk] != mp(-1, -1) &&
			dp[curst.first][curst.second][kk].first < ans1 ||
			(dp[curst.first][curst.second][kk].first == ans1 &&
				dp[curst.first][curst.second][kk].second < ans2)) {
			ans1 = dp[curst.first][curst.second][kk].first;
			ans2 = dp[curst.first][curst.second][kk].second;
		}
	}
	cout << ans1 << " " << ans2;
	return 0;
}