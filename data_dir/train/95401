#include <bits/stdc++.h>
using namespace std;

using pii = pair<int, int>; using vi = vector<int>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
using ll = long long; using vll = vector<long long>;
constexpr int INF = 0x3f3f3f3f; constexpr ll BINF = 0x3f3f3f3f3f3f3f3fLL;

int solve() {
	int n, m; cin >> n >> m;
	vector<vi> a(n, vi(m));
	vector<vi> b{a};
	cin >> a >> b;
	for (int i=0;i<n;i++) for (int j=0;j<m;j++) if (a[i][j] > b[i][j]) swap(a[i][j], b[i][j]);
	for (int i=0;i<n;i++) for (int j=0;j<m;j++) {
		bool needFix = false;
		if (i > 0) needFix |= a[i][j] <= a[i - 1][j];
		if (j > 0) needFix |= a[i][j] <= a[i][j - 1];
		if (needFix) swap(a[i][j], b[i][j]);
		bool needFixAgain = false;
		if (i > 0) needFixAgain |= a[i][j] <= a[i - 1][j] || b[i][j] <= b[i - 1][j];
		if (j > 0) needFixAgain |= a[i][j] <= a[i][j - 1] || b[i][j] <= b[i][j - 1];
		if (needFixAgain) return cout << "Impossible" << endl, 0;
	}
	cout << "Possible" << endl;
	return 0;
}

int main() {
	ios::sync_with_stdio(0);
	// precompute();
	// int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << (solve() ? "YES" : "NO") << endl;
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it, os << " \n"[++it==v.end()];
	return os;
}
