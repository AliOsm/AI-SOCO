#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    long long x,y;

    bool operator<(const P &a)const{

        if(y!=a.y) return y>a.y;
        return x>a.x;
    }

};

vector<P> v;

//bitset<4001000> b;
int i,n,d,m,k,a,b,c;

int o[2][5111][5111];
int l[5111];
int j[1];
int e;

//int dx[10]={2,2,-2,-2,1,1,-1,-1},dy[10]={1,-1,1,-1,2,-2,2,-2};

int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000009,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[1];
//stack<int> s;
//set<int> se;
//priority_queue<int> q;
//queue<int> q;
string r,r1;
//char r[1];
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
map<int,int> p;
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
//list<int> l;


//deque<int> de;
//srand((int)time(NULL));




bool as(P a,P b)
{
    return a.x<b.x;
}

int f(int i,int n,int m)
{
    if(n<1||m>a) return 9876543;
    if(n==1&&m==a) return 0;
    if(o[i][n][m]>=0) return o[i][n][m];
    int p;
    if(i==0) p=l[n];
    else p=l[m];
    if(l[n-1]==p) return o[i][n][m]=f(i,n-1,m);
    if(l[m+1]==p) return o[i][n][m]=f(i,n,m+1);
    return o[i][n][m]=min(f(0,n-1,m),f(1,n,m+1))+1;
}

int main()
{
    memset(o,-1,sizeof(o));
    scanf("%d",&a);
    for(int t=1;t<=a;t++)
        scanf("%d",&l[t]);
    k=987654321;
    for(int t=1;t<=a;t++)
    {
        k=min(k,f(0,t,t));
    }
    printf("%d",k);
}

