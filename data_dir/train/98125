#include <algorithm>
#include <vector>
#include <iostream>
#include <string>
#include <random>
#include <set>
#include <stack>
#include <map>
#include <fstream>

using namespace std;
#define ll long long
const int MOD = 51123987;
const double PI = 3.141592653528;
const int INF = 1000000000;
/*
#define cin in
#define cout out
ifstream in("input.txt");
ofstream out("output.txt");
/**/

vector<int> g[223456];
vector<int> newg[223456];
int dp[223456][3];
bool used[1234567];
int p[223456];
void dfs(int v, int par)
{
	used[v] = 1;
	p[v] = par;
	for(int i = 0; i < g[v].size(); ++i)
	{
		int to = g[v][i];
		if(!used[to])
		{
			newg[v].push_back(to);
			dfs(to, v);
		}
	}

	dp[v][0] = dp[v][1] = dp[v][2] = 0;
	for(int i = 0; i < newg[v].size(); ++i)
	{
		int to = newg[v][i];
		dp[v][0] += dp[to][2];
	}
	if(newg[v].size() == 0)
		return;
	if(newg[v].size() == 1)
	{
		dp[v][1] = dp[newg[v][0]][1] + 1;
		dp[v][2] = dp[v][1];
		return;
	}
	vector<int> t;
	for(int i = 0; i < newg[v].size(); ++i)
	{
		int to = newg[v][i];
		t.push_back(dp[to][1] - dp[to][2]);
	}
	sort(t.begin(), t.end());
	dp[v][2] = dp[v][0] + t[t.size() - 1] + t[t.size() - 2] + 2;
	dp[v][1] = dp[v][0] + t[t.size() - 1] + 1;
}

int pp[223456];



int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n;
	ll x, y;
	
	cin >> n >> x >> y;
	
	for(int i = 1; i < n; ++i)
	{
		int u, v;
		cin >> u >> v;
		++pp[u];
		++pp[v];
		g[u].push_back(v);
		g[v].push_back(u);
	}

	if(x > y)
	{
		for(int i = 1; i <= n; ++i)
			if(pp[i] == n-1)
			{
				cout << (n-2)*y+x;
				return 0;
			}
		cout << (n-1)*y;
		return 0;
	}

	dfs(1, 0);
	int k = max(dp[1][0], max(dp[1][1], dp[1][2]));
	cout << k * x + (n-1-k)*y;
	return 0;
}