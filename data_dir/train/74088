#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define FILE "t9"
#define ld long double
#define endl '\n'
#define pii pair <int, int>
#define last fedgfre
#define ull unsigned long long
//#define int long long

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

typedef tree <pii,null_type,less<pii>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 3e3 + 5;
const ll mod = 1e9 + 7;
const int rx[8] = {1, -1, 0, 0, 1, 1, -1, -1 };
const int ry[8] = {0, 0, 1, -1, 1, -1, 1, -1 };
const ld pi = acos(-1.0);
const int B = 9e3;
const ld eps = 1e-11;

const int kx[8] = {1, 1, -1, -1, 2, 2, -2, -2};
const int ky[8] = {2, -2, 2, -2, 1, -1, 1, -1};

mt19937 gen(chrono::high_resolution_clock::now().time_since_epoch().count());

int d[N][N];
bitset <N> bs[N];
int x[N];
int y[N];
int n;

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //  srand(time(0));
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //  freopen(FILE".in", "r", stdin);
//   freopen(FILE".out", "w", stdout);
#endif // LOCAL
    cin >> n;
    for (int i = 0; i < n; i++) cin >> x[i] >> y[i];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            d[i][j] = (x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]);
        }
    }
    vector <pair <int, pii>> e;
    for (int i = 0; i < n; i++){
        for (int j = i + 1; j < n; j++){
            e.pb({d[i][j], {i, j}});
        }
    }
    sort(e.rbegin(), e.rend());
    for (auto p : e){
        if ((bs[p.S.F] & bs[p.S.S]).any()){
            cout << fixed << setprecision(10) << sqrt(p.F) * 0.5 << endl;
            return 0;
        }
        bs[p.S.F][p.S.S] = 1;
        bs[p.S.S][p.S.F] = 1;
    }
    return 0;
}