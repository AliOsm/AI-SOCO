#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")

#include "bits/stdc++.h"
using namespace std;

#define pb push_back
#define F first
#define S second
#define f(i,a,b)  for(int i = a; i < b; i++)
#define endl '\n'

using ll = long long;
using db = long double;
using ii = pair<int, int>;

const int N = 3e5 + 5, LG = 19, MOD = 1e9 + 7;
const int SQ =225;
const long double EPS = 1e-7;
int n, m, k, q, a[1005][1005];
char dist[44][1005][1005];
vector<ii> go[44];
bool vis[44];
int dx[] = {-1,1,0,0};
int dy[] = {0,0,-1,1};
void bfs(int color){
  memset(vis,0,sizeof vis);
  memset(dist[color], -1, sizeof dist[color]);
  queue<ii> qu;
  for(auto x : go[color]){
    dist[color][x.F][x.S]=0;
    qu.push(x);
  }

  while(qu.size()){

    auto cell = qu.front(); qu.pop();
    if(!vis[a[cell.F][cell.S]]){
      vis[a[cell.F][cell.S]]=true;
      for(auto cell2 : go[a[cell.F][cell.S]]){
        if(dist[color][cell2.F][cell2.S] == -1){
          dist[color][cell2.F][cell2.S]=dist[color][cell.F][cell.S]+1;
          qu.push(cell2);
        }
      }
    }

    f(i,0,4){
      auto cell2 = ii(cell.F+dx[i],cell.S+dy[i]);
      if(min({cell2.F,cell2.S,n-cell2.F+1,m-cell2.S+1})==0)continue;
      if(dist[color][cell2.F][cell2.S] == -1){
        dist[color][cell2.F][cell2.S]=dist[color][cell.F][cell.S]+1;
        qu.push(cell2);
      }
    }

  }

}

int32_t main(){
#ifdef ONLINE_JUDGE
    ios_base::sync_with_stdio(0);
    cin.tie(0);
#endif

  cin >> n >> m >> k;

  f(i,1,n+1)
    f(j,1,m+1){
      cin >> a[i][j];
      go[a[i][j]].push_back(ii(i,j));
    }

  f(i,1,k+1)
    bfs(i);

  cin >> q;

  while(q--){

    int x1,y1,x2,y2;
    cin >> x1 >> y1 >> x2 >> y2;
    int ans = abs(x1-x2)+abs(y1-y2);
    f(i,1,k+1)ans=min(ans,1+dist[i][x1][y1]+dist[i][x2][y2]);
    cout<<ans<<'\n';
  }

  return 0;
}
