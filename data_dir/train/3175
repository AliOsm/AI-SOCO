#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 1e5 + 1;
const int B = 320;
int n, q;

int arr[N];
int cnt[B][N];

deque <int> con[B];

void input() {
    cin >> n;
    for(int i = 0; i < n; ++i) {
        cin >> arr[i];
        cnt[i / B][arr[i]]++;
        con[i / B].push_back(arr[i]);
    }
}

int query(int l, int r, int k) {
    int res = 0;
    for(int i = l; i <= r; ) {
        if(i % B == 0 && i + B <= r + 1) {
            res += cnt[i / B][k];
            i += B;
        } else {
            res += (con[i / B][i % B] == k);
            i++;
        }
    }
    return res;
}

void update(int l, int r) {
    int x = con[r / B][r % B];
    con[r / B].erase(con[r / B].begin() + r % B);
    con[l / B].insert(con[l / B].begin() + l % B, x);
    cnt[r / B][x]--;
    cnt[l / B][x]++;
    for(int i = l / B; i < r / B; ++i) {
        int x = con[i].back();
        con[i].pop_back();
        cnt[i][x]--;
        con[i + 1].push_front(x);
        cnt[i + 1][x]++;
    }
}

void solve() {
    cin >> q;
    int last = 0;
    for(int i = 0; i < q; ++i) {
        int t; cin >> t;
        int l; cin >> l;
        int r; cin >> r;
        l = (l + last - 1) % n;
        r = (r + last - 1) % n;
        if(l > r) {
            swap(l, r);
        }
        if(t == 1) {
            update(l, r);
        } else {
            int k; cin >> k;
            k = (k + last - 1) % n + 1;
            last = query(l, r, k);
            cout << last << "\n";
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
