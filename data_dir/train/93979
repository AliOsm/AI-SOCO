// Template Headers {{{
#include <bits/stdc++.h>
using namespace std;

using pii = pair<int, int>; using vpii = vector<pii>;
using vi = vector<int>; using vvi = vector<vi>;
using ll = long long;
using pll = pair<ll, ll>; using vpll = vector<pll>;
using vll = vector<long long>; using vvll = vector<vll>;
template <class T> using min_queue = priority_queue<T, vector<T>, greater<T>>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
template <class T, class U> istream &operator>>(istream &, pair<T, U> &);
template <class T, class U> ostream &operator<<(ostream &, const pair<T, U> &);
template <class T> struct Inf { static constexpr T inf() { return std::numeric_limits<T>::has_infinity ? std::numeric_limits<T>::infinity() : std::numeric_limits<T>::max(); } };
template <> struct Inf<int> { static constexpr int inf() { return 0x3f3f3f3f; } };
template <> struct Inf<long long> { static constexpr long long inf() { return 0x3f3f3f3f3f3f3f3fLL; } };
constexpr int INF = Inf<int>::inf(); constexpr ll BINF = Inf<ll>::inf();
// mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
// }}}
// Preprocessing & "Global" variables {{{
struct Solver {
	Solver() {}
	int solve();
};
// }}}

#define JUDGE_MULTI_CASE

int Solver::solve() {
	int n, k; cin >> n >> k;
	string s; cin >> s;
	vector<string> v(k);
	for (int i = 0; i < n; i++) v[i % k].push_back(s[i]);
	auto sol = [] (const string &s) {
		// 0000111000
		int n = s.size();
		vvi dp(n, vi(3));
		for (int i = 0; i < n; i++) {
			if (i > 0) {
				dp[i][0] = dp[i - 1][0] + (s[i] != '0');
				dp[i][1] = min(dp[i - 1][0], dp[i - 1][1]) + (s[i] != '1');
				dp[i][2] = min(min(dp[i - 1][0], dp[i - 1][1]), dp[i - 1][2]) + (s[i] != '0');
			} else {
				dp[i][0] = s[i] != '0';
				dp[i][1] = s[i] != '1';
				dp[i][2] = s[i] != '0';
			}
		}
		return min(dp[n - 1][0], min(dp[n - 1][1], dp[n - 1][2]));
	};
	auto cnt = [] (const string &s) {
		return count(s.begin(), s.end(), '1');
	};
	vi tcnt(k);
	int ans = 0;
	for (int i = 0; i < k; i++) tcnt[i] = cnt(v[i]), ans += tcnt[i];
	int mnd = 0;
	for (int i = 0; i < k; i++) {
		int d = sol(v[i]) - tcnt[i];
		mnd = min(mnd, d);
	}
	cout << ans + mnd << endl;
	return 0;
}

// Template Main {{{
int main() {
	ios::sync_with_stdio(0); cin.tie(0);
	Solver solver;
	#ifdef JUDGE_MULTI_CASE
		int t; cin >> t; for (int i = 1; i <= t; i++)
	#endif
	solver.solve();
	// cout << "Case #" << i << ": ", solve();
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it, os << " \n"[++it==v.end()];
	return os;
}

template <class T, class U> istream &operator>>(istream &is, pair<T, U> &p) {
	return is >> p.first >> p.second;
}

template <class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) {
	return os << p.first << ' ' << p.second;
}
// }}}

// vim: fdm=marker
