#include<bits/stdc++.h>
using namespace std;

#define endl '\n'
#define D(x) cout << #x << " = " << (x) << endl;

bool check (int x, int y, int n, int m) {
  return x < n && x >= 0 && y < m && y >= 0;
}

int main() {
#ifdef ONLINE_JUDGE
  ios_base::sync_with_stdio(0); cin.tie(0);
#endif

  int dx[] = {-1, 0, 1,  0};
  int dy[] = { 0, 1, 0, -1};

  int n, m;
  while (cin >> n >> m) {
    int cnt = 0;
    vector<string> mat(n);
    for (int i = 0; i < n; ++i) {
      cin >> mat[i];
      for (int j = 0; j < m; ++j) {
        cnt += (mat[i][j] == '*');
      }
    }

    map<pair<int, int>, int> visited;
    vector<int> ans;
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < m; ++j) {
        if (mat[i][j] != '*') continue;

        bool ok = true;
        int size = 0;
        vector<int> coor;
        for (int k = 1; k < 1000 && ok; ++k) {
          for (int l = 0; l < 4; ++l) {
            int x = i + dx[l] * k;
            int y = j + dy[l] * k;
            if (!check(x, y, n, m) || mat[x][y] != '*') {
              ok = false;
              break;
            }
            coor.push_back(x);
            coor.push_back(y);
          }
          if (ok)
            size ++;
        }

        if (size) {
          ans.push_back(i + 1);
          ans.push_back(j + 1);
          ans.push_back(size);

          visited[{i, j}] ++;
          for (int p = 0; p < coor.size(); p += 2) {
            visited[{coor[p],coor[p + 1]}] ++;
          }
        }
      }
    }

    if (cnt == visited.size()) {
      cout << ans.size() / 3 << endl;
      for (int i = 0; i < ans.size(); i += 3) {
        cout << ans[i] << " " << ans[i + 1] << " " << ans[i + 2] << endl;
      }
    }
    else cout << -1 << endl;
  }

  return 0;
}