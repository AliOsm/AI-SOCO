#include <bits/stdc++.h>

#define IO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

typedef long long ll;

using namespace std;

int ind;
bool rep[5005][5005];
void LCP(string s){
//	cerr << "ind " << ind << endl;
	int n = s.size(), j = 0;
	vector<int>lcp(n);
	for(int i = 1; i < n; i++){
		while(j && s[i] != s[j])
			j = lcp[j - 1];
		if(s[i] == s[j])
			++j, rep[ind][j] = rep[ind + i - j + 1][j] = 1;
		lcp[i] = j;
//		cerr << j << " " << i << " " << rep[ind][j] << " " << rep[ind + i - j + 1][j] << endl;
	}
}
vector<int> LCP2(string s){
	int n = s.size(), j = 0;
	vector<int>lcp(n);
	for(int i = 1; i < n; i++){
		while(j && s[i] != s[j])
			j = lcp[j - 1];
		if(s[i] == s[j])
			j++;
		lcp[i] = j;
	}
	return lcp;
}
vector<int> KMP(string s, string p){
	int n = s.size(), m = p.size(), j = 0;
	vector<int> lcp = LCP2(p);
	vector<int> len(m + 1);
	for(int i = 0; i < n; i++){
		while(j && s[i] != p[j])
			j = lcp[j - 1];
		if(s[i] == p[j])
			j++;
		len[j]++;
		if(j == m)
			j = lcp[j - 1];
	}
	return len;
}

int main(){
	IO;

	string s1, s2;
	cin >> s1 >> s2;
	int ans = 1e9;
	memset(rep, 0, sizeof rep);

	for(int i = 0; i < s1.size(); i++){
		ind = i;
		LCP(s1.substr(i));
	}

	for(int i = 0; i < s1.size(); i++){
		vector<int>len = KMP(s2, s1.substr(i));
		for(int j = 1; j < len.size(); j++){
			if(len[j] == 1 && !rep[i][j])
				ans = min(ans, j);
		}
	}
	if(ans == 1e9)
		ans = -1;

	cout << ans << endl;

	return 0;
}
