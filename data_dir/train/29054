/* practice with Dukkha */
#include <stdio.h>

#define N	100000
#define S	20

int max(int a, int b) { return a > b ? a : b; }

int aa[N], bb[N];
int x;

int get_next_x() {
	return (x = (x * 37LL + 10007) % 1000000007);
}

void init_AB(int n, int d) {
	int i, j, tmp;

	for (i = 0; i < n; i++)
		aa[i] = i + 1;
	for (i = 0; i < n; i++) {
		j = get_next_x() % (i + 1);
		tmp = aa[i], aa[i] = aa[j], aa[j] = tmp;
	}
	for (i = 0; i < n; i++)
		bb[i] = i < d;
	for (i = 0; i < n; i++) {
		j = get_next_x() % (i + 1);
		tmp = bb[i], bb[i] = bb[j], bb[j] = tmp;
	}
}

int main() {
	static int ii[S + 1], jj[N];
	int n, d, h, i, k, c;

	scanf("%d%d%d", &n, &d, &x);
	init_AB(n, d);
	k = 0;
	for (i = 0; i < n; i++) {
		h = i < S ? i : S;
		while (h > 0 && aa[ii[h - 1]] < aa[i]) {
			ii[h] = ii[h - 1];
			h--;
		}
		ii[h] = i;
		if (bb[i])
			jj[k++] = i;
		c = 0;
		for (h = 0; h <= i && h < S; h++)
			if (bb[i - ii[h]]) {
				c = aa[ii[h]];
				break;
			}
		if (c == 0)
			for (h = 0; h < k; h++)
				c = max(c, aa[i - jj[h]]);
		printf("%d\n", c);
	}
	return 0;
}
