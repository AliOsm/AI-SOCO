#include <bits/stdc++.h>

using namespace std;

#define SZ(x) ((int)(x).size())
#define PB(x) push_back(x)
#define MEMSET(x,v) memset(x,v,sizeof(x))
#define REP(i,n) for(int i=0;(i)<(n);++(i))
#define x first
#define y second
#define INF (0x3f3f3f3f)

typedef long long LL;
typedef pair<int, int> P2;
template<class A, class B> inline bool mina(A &x, B y) {return (x > y)?(x=y,1):0;}
template<class A, class B> inline bool maxa(A &x, B y) {return (x < y)?(x=y,1):0;}



template<typename Int,Int mod>
class ModInt {
public:
    static const Int Mod = mod;
    Int x;
    ModInt() { x = 0; }
    ModInt(int a) { Int t = a % mod; if(t < 0) t += mod; x = t; }
    ModInt(long long a) { Int t = a % mod; if(t < 0) t += mod; x = t; }
    Int get() const { return x; }

    ModInt &operator += (ModInt that) { if((x += that.x) >= mod) x -= mod; return *this; }
    ModInt &operator -= (ModInt that) { if((x += mod - that.x) >= mod) x -= mod; return *this; }
    ModInt &operator *= (ModInt that) { x = (long long)(x) * that.x % mod; return *this; }
    bool operator == (ModInt that) const { return x == that.x; }
    ModInt operator + (ModInt that) const { return ModInt(*this) += that; }
    ModInt operator - (ModInt that) const { return ModInt(*this) -= that; }
    ModInt operator * (ModInt that) const { return ModInt(*this) *= that; }
    ModInt operator - () const { return ModInt(-this->x); }
    inline friend ostream& operator << (ostream &out, ModInt m) {return out << m.x;}

    ModInt power(long long k) const {
        ModInt r(1); ModInt b = *this;
        if (k <= 0) return r;
        while (k) { if (k & 1) r *= b; b *= b; k >>= 1; }
        return r;
    }
    ModInt inverse() const {
        long long a = x, b = mod, u = 1, v = 0;
        while(b) { long long t = a / b; a -= t * b; swap(a, b); u -= t * v; swap(u, v); }
        return ModInt(u);
    }
};

#define MOD (1000000007)
typedef ModInt<int, MOD> Mint;

const int MAXN = 2005;

int N, H;
int in[MAXN];
Mint dp[MAXN][MAXN / 2];
int main() {
    scanf("%d %d", &N, &H);
    REP(i, N) {
        scanf("%d", &in[i]);
    }

    if (in[0] == H) {
        dp[0][0] = 1;
    } else if (in[0] + 1 == H) {
        dp[0][1] = 1;
        dp[0][0] = 1;
    } else {
        printf("0\n");
        return 0;
    }

    for (int i = 1; i < N; i++) {
        int diff = H - in[i];
        if (diff < 0 || diff >= MAXN / 2) {
            cout << 0 << endl;
            return 0;
        } else if (diff == 0) {
            dp[i][0] += dp[i - 1][0];
        } else {
            // close here
            dp[i][diff - 1] += dp[i - 1][diff] * diff;
            // open here
            dp[i][diff] += dp[i - 1][diff - 1];
            // open and close here
            dp[i][diff - 1] += dp[i - 1][diff - 1] * diff;
            // nothing
            dp[i][diff] += dp[i - 1][diff];
        }
    }
    cout << dp[N - 1][0] << endl;
    return 0;
}
