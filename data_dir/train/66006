// Author - Rahil Malhotra
#include <bits/stdc++.h>
using namespace std;
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
#define int long long
#define double long double

int tree[700005];
int lazy[700005];
int arr[200005];
int ans[200005];
void propogate(int i,int l,int r)
{
    tree[i]=max(tree[i],lazy[i]);
    if(l!=r)
        lazy[i*2]=max(lazy[i*2],lazy[i]),lazy[i*2+1]=max(lazy[i*2+1],lazy[i]);
    lazy[i]=0;
}
void build(int i,int l,int r)
{
    if(l==r)
    {
        tree[i]=arr[l];
        return;
    }
    int mid=(l+r)/2;
    build(i*2,l,mid);
    build(i*2+1,mid+1,r);
    tree[i]=min(tree[i*2],tree[i*2+1]);
}
void updatept(int i,int l,int r,int pt,int val)
{
    if(lazy[i])
        propogate(i,l,r);
    if(l==r)
    {
        if(pt==l)
            tree[i]=val;
        return ;
    }
    int mid=(l+r)/2;
    if(pt<=mid)
        updatept(i*2,l,mid,pt,val);
    else
        updatept(i*2+1,mid+1,r,pt,val);
    tree[i]=min(tree[i*2],tree[i*2+1]);
}
void update(int i,int l,int r,int val)
{
    if(lazy[i])
        propogate(i,l,r);
    if(l==r)
    {
        tree[i]=max(tree[i],val);
        return;
    }
    if(tree[i]<=val)
    {
        tree[i]=max(tree[i],val);
        lazy[i*2]=max(val,lazy[i*2]),lazy[i*2+1]=max(val,lazy[i*2+1]);
    }
    return;
}
int query(int i,int l,int r,int l1,int r1)
{
    if(l1>r1 || l>r1 || l1>r)
        return 1e12;
    if(lazy[i])
        propogate(i,l,r);
    if(l1<=l && r<=r1)
        return tree[i];
    int mid=(l+r)/2;
    if(l1<=mid)
        return query(i*2,l,mid,l1,r1);
    return query(i*2+1,mid+1,r,l1,r1);
}
int32_t main()
{
    IOS;
    int n;
    cin>>n;
    for(int i=1;i<=n;i++)
        cin>>arr[i];
    build(1,1,n);
    int q;cin>>q;
    while(q--)
    {
        int t;cin>>t;
        if(t==2)
        {
            int x;cin>>x;
            update(1,1,n,x);
        }
        else
        {
            int pt,val;cin>>pt>>val;
            updatept(1,1,n,pt,val);
        }
    }
    for(int i=1;i<=n;i++)
        cout<<query(1,1,n,i,i)<<" ";
}   