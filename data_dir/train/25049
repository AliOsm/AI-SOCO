/////////////////////////   _LeMur_
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 10005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;

long long n;
int k;

vector < pair<long long,int> > d;

long long dp[N][100];
long long inv[100];

long long binpow(long long a,long long b){
    if(b == 0)return 1;
    if(b % 2)return a * binpow(a , b - 1) % mod;
    long long t = binpow(a , b / 2);
    return t * t % mod;
}

int main(){
    cin>>n>>k;
    for(long long i=2;i*i<=n;i++){
        int z = 0;
        while(n % i == 0){
            n /= i;
            z++;
        }
        if(z){
            d.push_back(make_pair(i , z));
        }
    }
    if(n != 1){
        d.push_back(make_pair(n , 1));
    }
    for(int i=0;i<=100;i++){
        inv[i] = binpow(i + 1 , mod - 2);
    }
    long long answ = 1;
    for(int i=0;i<(int)d.size();i++){
        long long x = d[i].first % mod;
        int l = d[i].second;
        for(int h=0;h<=l;h++){
            dp[0][h] = 0;
        }
        dp[0][l] = 1;
        for(int j=1;j<=k;j++){
            for(int h=0;h<=l;h++){
                dp[j][h] = 0;
                for(int t=h;t<=l;t++){
                    dp[j][h] += inv[t] * dp[j - 1][t] % mod;
                    dp[j][h] %= mod;
                }
            }
        }
        long long pw = 1;
        long long sum = 0;
        for(int j=0;j<=l;j++){
            sum += dp[k][j] * pw % mod;
            sum %= mod;
            pw = pw * x % mod;
        }
        answ = answ * sum % mod;
    }
    cout<<answ<<endl;
    return 0;
}
