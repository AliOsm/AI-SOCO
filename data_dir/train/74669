#include <iostream>
#include <vector>

using namespace std;

const int N = 100;

string ss[N];
char cc[N][N];
int n, m;

void dfs(int i, int j, char c) {
	if (i < 0 || i >= n || j < 0 || j >= m || ss[i][j] == '*' || cc[i][j])
		return;
	cc[i][j] = c;
	dfs(i - 1, j, 'U');
	dfs(i + 1, j, 'D');
	dfs(i, j - 1, 'L');
	dfs(i, j + 1, 'R');
}

int main() {
	cin >> n >> m;
	int i, j;
	for (i = 0; i < n; i++)
		cin >> ss[i];
	for (i = 0; i < n; i++)
		for (j = 0; j < m; j++)
			if (ss[i][j] == 'F')
				goto out;
out:
	dfs(0, 0, ' ');
	string path;
	while (i != 0 || j != 0) {
		char c = cc[i][j];
		path.insert(0, 1, c);
		if (c == 'U')
			i++;
		else if (c == 'D')
			i--;
		else if (c == 'L')
			j++;
		else if (c == 'R')
			j--;
	}
	bool R = false, D = false, swapLR = false, swapUD = false;
	int k = path.length();
	for (int h = 0; h < k; h++) {
		char c = path[h];
		if (!R && c == 'R') {
			R = true;
			cout << 'R' << endl;
			cin >> i >> j; i--, j--;
			if (j == 0) {
				swapLR = true;
				h--;
				continue;
			}
		} else if (!D && c == 'D') {
			D = true;
			cout << 'D' << endl;
			cin >> i >> j; i--, j--;
			if (i == 0) {
				swapUD = true;
				h--;
				continue;
			}
		} else {
			if (swapLR) {
				if (c == 'L')
					c = 'R';
				else if (c == 'R')
					c = 'L';
			}
			if (swapUD) {
				if (c == 'U')
					c = 'D';
				else if (c == 'D')
					c = 'U';
			}
			cout << c << endl;
			cin >> i >> j;
		}
	}
	return 0;
}
