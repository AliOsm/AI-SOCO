#include <bits/stdc++.h>

using namespace std;

template<typename C>
class fenwick {
  vector<C> t;
  int n;
public:
  fenwick(int _n) : n(_n) {
    t.resize(n);
  }
  fenwick(const vector<C>& a) : n(a.size()) {
    t.resize(n);
    for (int i = 0; i < n; ++i) {
      upd(i, a[i]);
    }
  }

  C get(int k) {
    C res = 0;
    for (k; k >= 0; k = (k & (k + 1)) - 1) {
      res += t[k];
    }
    return res;
  }

  void upd(int k, C x) {
    for (k; k < n; k |= k + 1) {
      t[k] += x;
    }
  }

  C get(int l, int r) {
    return get(r) - get(l - 1);
  }
};

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);

  int n, m;
  cin >> n >> m;
  vector<int> mn(n), mx(n), pos(n);
  iota(mn.begin(), mn.end(), 0), iota(mx.begin(), mx.end(), 0);
  iota(pos.begin(), pos.end(), m);
  fenwick<int> tr(n + m);
  vector<int> a(m);
  for (int i = 0; i < m; ++i) {
    cin >> a[i];
    --a[i];
    mn[a[i]] = 0;
  }
  for (int i = 0; i < n; ++i) {
    tr.upd(pos[i], 1);
  }
  for (int i = 0; i < m; ++i) {
    int x = a[i];
    mx[x] = max(mx[x], tr.get(pos[x]) - 1);
    tr.upd(pos[x], -1);
    pos[x] = m - i - 1;
    tr.upd(pos[x], 1);
  }
  for (int i = 0; i < n; ++i) {
    mx[i] = max(mx[i], tr.get(pos[i]) - 1);
  }
  for (int i = 0; i < n; ++i) {
    cout << mn[i] + 1 << ' ' << mx[i] + 1 << '\n';
  }

  return 0;
}