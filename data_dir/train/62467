//void _(){
//    int n;
//    cin >> n;
//    vi arr(n);
//    cin >> arr;
//    vi cnt(max(arr)+1);
//    for(int x : arr) ++cnt[x];
//    int b = 0;
//    rep(i,n)
//        if(cnt[arr[i]] > cnt[arr[b]])
//            b = i;
//    vvi op;
//    rep(i,b+1,n-1)
//        if(arr[i] != arr[b])
//            op.pb({arr[i] < arr[b] ? 1 : 2,i+1,i});
//    for(int i = b-1; i >= 0; --i)
//        if(arr[i] != arr[b])
//            op.pb({arr[i] < arr[b] ? 1 : 2,i+1,i+2});
//    print_n sz(op);
//    print_vn op;
//
//}
#include <iomanip>
#include <algorithm>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define REP_INT(i,l,r) for(int i = l; i <= r; ++i)
#define REP_ZERO_INT(i,r) for(int i = 0; i < r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT,REP_ZERO_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
T1 istream& operator>>(istream& stream, vector<T>& t){
    return read(all(t), stream);
}
T1 istream& read(T b, T e, istream& stream){
    for(T it = b; it != e; ++it)
        stream >> *it;
    return stream;
}
T1 T max(const vector<T> arr){
    assert(!arr.empty());
    T ans = arr[0];
    for(auto& cur : arr)
        ans = max(ans, cur);
    return ans;
}
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout)
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }
    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
struct _print2{
    string s1,s2,end;
    bool space;
    ostream &stream;
    _print2(string _s1 = " ", string _s2 = " ", string _end="\n", ostream &_stream = cout)
        :s1(_s1),s2(_s2),end(_end),space(false),
        stream(_stream) {}
    ~_print2() { stream << end; }
    template <typename T>
        _print2 &operator , (const T &t) {
            for(auto _ : t){
                if (space) stream << s1;
                space = true;
                _print p(s2,"",stream);
                    p,_;
            }
            return *this;
        }
};
#define print_n _print("\n"),
#define print_vn _print2("\n"," ","\n"),
T1 ostream& operator<<(ostream& stream, const vector<T>& t){
    for(int i = 0; i < sz(t); ++i){
        stream << t[i];
        if(i+1 < sz(t))
            stream << ' ';
    }
    return stream;
}
void _(){
    int n;
    cin >> n;
    vi arr(n);
    cin >> arr;
    vi cnt(max(arr)+1);
    for(int x : arr) ++cnt[x];
    int b = 0;
    rep(i,n)
        if(cnt[arr[i]] > cnt[arr[b]])
            b = i;
    vvi op;
    rep(i,b+1,n-1)
        if(arr[i] != arr[b])
            op.pb({arr[i] < arr[b] ? 1 : 2,i+1,i});
    for(int i = b-1; i >= 0; --i)
        if(arr[i] != arr[b])
            op.pb({arr[i] < arr[b] ? 1 : 2,i+1,i+2});
    print_n sz(op);
    print_vn op;
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
