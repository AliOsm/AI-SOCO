#include <cstdio>
#include <vector>
using namespace std;
int gcd(int x, int y) {
	return y ? gcd(y, x % y) : x;
}
int a[300010], b[300010], v[300010];
vector<int> f[300010];
int r[64], u[64], dp[64], pa[64];
int main() {
	int n;
	scanf("%d", &n);
	int g = 0;
	for (int i = 0; i < n; i++) {
		int x = i + 1;
		scanf("%d", &x);
		g = gcd(x, g);
		b[x] = 1;
	}
	if (g != 1) {
		puts("-1");
		return 0;
	}
	if (b[1]) {
		puts("1");
		return 0;
	}
	for (int i = 2; i < 300010; i++) {
		if (a[i]) continue;
		for (int j = i; j < 300010; j += i) {
			a[j] = i;
		}
	}
	for (int i = 2; i < 300010; i++) {
		int j = i, y = 1;
		while (j > 1) {
			int x = a[j];
			while (j % x == 0) {
				j /= x;
			}
			f[i].push_back(x);
			y *= x;
		}
		if (b[i] && y != i) {
			b[y] = 1;
			b[i] = 0;
		}
	}
	for (int i = 1; i < 300010; i++) {
		for (int j = i; j < 300010; j += i) {
			v[i] += b[j];
		}
	}
	int ans = 100;
	pa[0] = 0;
	for (int i = 1; i < 64; i++) {
		pa[i] = !pa[i&(i-1)];
	}
	for (int i = 2; i < 300010; i++) {
		if (!b[i]) continue;
		int m = f[i].size(), M = 1 << m;
		for (int j = 0; j < M; j++) {
			r[j] = 1;
			for (int k = 0; k < m; k++) {
				if (j >> k & 1) r[j] *= f[i][k];
			}
		}
		for (int j = M - 1; j >= 0; j--) {
			u[j] = v[r[j]];
			for (int k = j + 1; k < M; k++) {
				if ((j & k) == j) {
					int y = v[r[k]];
					u[j] -= pa[j^k] ? y : -y;
				}
			}
		}
		for (int j = 0; j < M; j++) {
			dp[j] = u[j] > 0 ? 1 : 100;
		}
		for (int j = 1; j < M; j++) {
			if (!u[j]) continue;
			dp[j] = 1;
			for (int k = 0; k < M; k++) {
				if (dp[j&k] > dp[k] + 1) {
					dp[j&k] = dp[k] + 1;
				}
			}
		}
		if (ans > dp[0] + 1) {
			ans = dp[0] + 1;
		}
	}
	printf("%d\n", ans);
	return 0;
}
