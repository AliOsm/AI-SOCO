#include <bits/stdc++.h>

using namespace std;

#define fr first
#define sc second
#define pb push_back
#define ins insert
#define input freopen("input.txt","r",stdin)
#define output freopen("output.txt","w",stdout)
#define mp make_pair
#define fast_io ios_base::sync_with_stdio(0);
#define forn() for(int i=0;i<n;i++)
#define fori(n) for(ll i=0;i<(ll)n;i++)
#define forj(n) for(ll j=0;j<(ll)n;j++)
#define form(i,a,n) for (int i=(a);i<(n);i++)
//iterator , unsigned, begin, end, count, continue
// fixed setprecision

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pii;

string itosm(ll x){
    if(x == 0)
        return "0";
    string ans = "";
    while(x > 0){
        ans +=((x%10) + '0');
        x/=10;
    }
    reverse(ans.begin(), ans.end());
    return ans;
}

ll stoim(string str){
    ll ans = 0;
    ll k = 1;
    for(int i = str.length()-1; i >= 0; i--){
        ans+=(str[i]-'0')*k;
        k*=10;
    }
    return ans;
}

const ll infll = 1e18 + 3;
const int inf = 1009000999;
const double eps = 1e-6;
const int maxn = 1505;
const int baseint = 1000200013;
const ll basell = 1e18 + 3;
const ld PI = acos(-1.0);

int dp[maxn][maxn][27];
int ans[maxn][27];
int n;
string s;

void inline solve(){
    form(i, 0, 'z' - 'a' + 1){
        dp[n - 1][1][i] = 1;
        ans[1][i] = max(ans[1][i], 1);
    }
    dp[n - 1][1][s[n - 1] - 'a'] = 0;
    ans[1][s[n - 1] - 'a']  = max(ans[1][s[n - 1] - 'a'], 1);
    for(int i = n - 2; i >= 0; i--){
        form(j, 0, 'z' - 'a' + 1){
            dp[i][1][j] = 1;
            ans[1][j] = max(ans[1][j], 1);
        }
        dp[i][1][s[i] - 'a'] = 0;
        ans[1][s[i] - 'a'] = max(ans[1][s[i] - 'a'] , 1);
        for(int j = 2; j <= n - i; j++){
            form(g, 0, 'z' - 'a' + 1){
                dp[i][j][g] = dp[i + 1][j - 1][g] + dp[i][1][g];
                ans[dp[i + 1][j - 1][g] + dp[i][1][g]][g] = max(ans[dp[i + 1][j - 1][g] + dp[i][1][g]][g], j);
            }
        }
    }
    form(i, 0, 'z' - 'a' + 1){
        form(j, 1, n + 1)
            ans[j][i] = max(ans[j][i], ans[j - 1][i]);
    }
}

int main(){
    srand(time(NULL));
    fast_io;
    cin >> n;
    cin >> s;
    solve();
    int q;
    cin >> q;
    while(q--){
        int m;
        char c;
        cin >> m >> c;
        cout << ans[m][c - 'a'] << "\n";
    }
    return 0;
}