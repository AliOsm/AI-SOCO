#include <iostream>
#include <cstdio>
#include <list>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstring>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <deque>
#include <queue>
#include <climits>
#define all(v) v.begin(), v.end()
#define ll long long
#define READ(f) freopen (f, "r", stdin)
#define WRITE(f) freopen (f, "w", stdout)
#define pb push_back
#define mp make_pair
#define endl "\n"
#define foreach(it, S) for(__typeof (S.begin()) it = S.begin(); it != S.end(); it++)
#define inll(n) scanf("%I64", &n);
#define outll(n) printf("%I64", n);
#define sc(n) scanf("%d", &n);
#define pr(n) printf("%d", n);
#define F first
#define S second
#define vii vector < int >
#define vsi vector < string >
#define vchi vector < char >
#define vlli vector < ll >
 
using namespace std;
 
const int MAXN = 1e5 + 256;
const int N = 1256;
const int INF = int (1e9);
int n, m, clr;
int arr[] = {1, 0, -1, 0};
int ar[] = { 0, 1, 0 , -1};
char c[N][N];
int u[N][N];
void dfs (int x, int y, int lx, int ly) {
	u[x][y] = clr;

	for (int i = 0; i < 4; ++i) {
		if (c[x + arr[i]][y + ar[i]] == c[x][y] && u[x + arr[i]][y + ar[i]] != clr) {
			dfs (x + arr[i], y + ar[i], x, y);
		}
		if (c[x + arr[i]][y + ar[i]] == c[x][y] && u[x + arr[i]][y + ar[i]] == clr && x + arr[i] != lx && y + ar[i] != ly) {
			cout << "Yes";
			exit (0);
		}
	}
	u[x][y] = 0;
}

int main () {
    cin >> n >> m;

    for (int i = 1; i <= n; ++i) {
    	for (int j = 1; j <= m; ++j) {
    		cin >> c[i][j];
    	}
    }
    for (int i = 1; i <= n; ++i) {
    	for (int j = 1; j <= m; ++j) {
    		clr++;
    		dfs (i, j, 0, 0);
    	}
    }
    cout << "No";

    return 0;
}