#include<bits/stdc++.h>
#define x first
#define y second
using namespace std;
const int MXN = 1e4 + 10;
int n = MXN - 10, m, r, t;
vector < int > T, Odds, Tour;
vector < vector < int > > Path;
set < pair < int , int > > V[MXN];
void EuTour(int v)
{
    int u, id;
    while (V[v].size() != 0)
    {
        u = (*V[v].begin()).x;
        id = (*V[v].begin()).y;
        V[v].erase(make_pair(u, id));
        V[u].erase(make_pair(v, id));
        EuTour(u);
        Tour.push_back(id);
    }
}
void Render()
{
    int j = 0;
    for (int i = 0; i < (int)Tour.size(); i++)
        if (Tour[i] == 0)
            j = i + 1;
    if (j == 0)
        Tour.push_back(0);
    for (int i = 1; i <= (int)Tour.size(); i++, j++)
    {
        if (Tour[j % (int)Tour.size()] != 0)
        {
            T.push_back(Tour[j % (int)Tour.size()]);
            continue;
        }
        if (T.size() > 0)
        {
            Path.push_back(T);
            T.clear();
        }
    }
}
int main()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    scanf("%d", &m);
    for (int i = 1; i <= m; i++)
    {
        scanf("%d%d", &r, &t);
        V[r].insert(make_pair(t, i));
        V[t].insert(make_pair(r, i));
    }
    for (int i = 1; i <= n; i++)
        if (V[i].size() & 1)
            Odds.push_back(i);
    for (int i = 0; i < (int)Odds.size(); i += 2)
    {
        V[Odds[i]].insert(make_pair(Odds[i + 1], 0));
        V[Odds[i + 1]].insert(make_pair(Odds[i], 0));
    }
    for (int i = 1; i <= n; i++)
    {
        EuTour(i);
        Render();
        Tour.clear();
    }
    if (Path.size() == 1 && Path[0].size() > 1)
    {
        printf("1\n%d\n%d\n", Path[0][0], (int)Path[0].size() - 1);
        for (int i = 1; i < (int)Path[0].size(); i++)
            printf("%d ", Path[0][i]);
        return (0);
    }
    if (Path.size() == 2)
    {
        printf("%d\n", (int)Path[0].size());
        for (int i = 0; i < (int)Path[0].size(); i++)
            printf("%d ", Path[0][i]);
        printf("\n%d\n", (int)Path[1].size());
        for (int i = 0; i < (int)Path[1].size(); i++)
            printf("%d ", Path[1][i]);
        return (0);
    }
    printf("-1");
    return (0);
}
