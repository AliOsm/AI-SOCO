#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<valarray>
//#include<bits/stdc++.h>
using namespace std;

int __gcd(int a, int b){
    if (a > b){
        swap(a, b);
    }
    while (a){
        swap(a, b);
        a %= b;
    }
    return b;
}

#define MAX 300001
int seg[MAX * 4];
int a[MAX];
int n;
inline void init(int b, int l, int r){
    if (l + 1 == r){
        seg[b] = a[l];
        return;
    }
    init(b * 2 + 1, l, (l + r) / 2);
    init(b * 2 + 2, (l + r) / 2, r);
    seg[b] = __gcd(seg[b * 2 + 1], seg[b * 2 + 2]);
}
inline int q(int b, int l, int r, int ll, int rr){
    if (ll <= l&&r <= rr){
        return seg[b];
    }
    if (r <= ll || rr <= l){
        return 0;
    }
    return __gcd(q(b * 2 + 1, l, (l + r) / 2, ll, rr), q(b * 2 + 2, (l + r) / 2, r, ll, rr));
}
int l2[MAX];
vector<int> v[MAX];
#define MAX_LOG 19
int rr[MAX_LOG][MAX];
int ge(int l, int r){
    int len = r - l + 1;
    int ll = l2[len];
    return __gcd(rr[ll][l], rr[ll][r - (1 << ll) + 1]);
}
int main(){
    scanf("%d", &n);
    for (int i = 0; i <= n; i++){
        l2[i] = log2(i);
    }
    for (int i = 0; i < n; i++){
        scanf("%d", &a[i]);
        rr[0][i] = a[i];
    }
    for (int i = 0; i + 1 < MAX_LOG; i++){
        for (int j = 0; j + (1 << i) < n; j++){
            rr[i + 1][j] = __gcd(rr[i][j], rr[i][j + (1 << i)]);
        }
    }
//  init(0, 0, n);
    for (int i = 0; i < n; i++){
        int mint = i;
        int maxt = n - 1;
        while (mint + 1 < maxt){
            int mid = (mint + maxt) / 2;
            //int val = q(0, 0, n, i, mid + 1);
            int val = ge(i, mid);
            if (val%a[i] == 0){
                mint = mid;
            }
            else{
                maxt = mid;
            }
        }
        if (mint != maxt){
            int mid = maxt;
            //int val = q(0, 0, n, i, mid + 1);
            int val = ge(i, mid);
            if (val%a[i] == 0){
                mint = mid;
            }
            else{
                maxt = mid;
            }
        }
        int r = mint;
        mint = 0;
        maxt = i;
        while (mint + 1 < maxt){
            int mid = (mint + maxt) / 2;
        //  int val = q(0, 0, n, mid,i+1);
            int val = ge(mid, i);
            if (val%a[i] == 0){
                maxt = mid;
            }
            else{
                mint = mid;
            }
        }
        if (mint != maxt){
            int mid = mint;
            //int val = q(0, 0, n,mid,i+1);
            int val = ge(mid, i);
            if (val%a[i] == 0){
                maxt = mid;
            }
            else{
                mint = maxt;
            }
        }
        int l = mint;
        v[r-l].push_back(l);
    }
    for (int i = MAX - 1; i >= 0; i--){
        if (v[i].size()){
            sort(v[i].begin(), v[i].end());
            v[i].erase(unique(v[i].begin(), v[i].end()), v[i].end());
            printf("%d %d\n", v[i].size(), i);
            for (int j = 0; j < v[i].size(); j++){
                if (j){
                    printf(" ");
                }
                printf("%d", v[i][j]+1);
            }
            puts("");
            return 0;
        }
    }
    return 0;
}