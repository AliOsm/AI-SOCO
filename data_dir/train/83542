#include <iostream>
#include <stdio.h>
#include <vector>
#include <algorithm>

using namespace std;

const int N = 400000;
const long long md = (long long)(1e9 + 7);


long long ft[N], oft[N], k;
int l, r, n;
vector<pair<long long, long long> > ev;

long long pw(long long x, long long a) {
    if(a == 0)
        return 1;
    if(a == 1)
        return x % md;

    if((a % 2LL) == 1) {
        return (pw(x, a - 1LL) * x) % md;
    } else {
        long long t = pw(x, a / 2LL);
        return (t * t) % md;
    }
}


long long c(long long n, long long k) {
    if(n < k) {
        return 0;
    }
    return (ft[n] * ((oft[k] * oft[n - k]) % md)) % md;
}

int main() {
    scanf("%d%I64d", &n, &k);
    ft[0] = 1;
    oft[0] = 1;
    for(int i = 1; i <= n; i++) {
        ft[i] = (ft[i - 1] * (long long)(i)) % md;
        oft[i] = pw(ft[i], md - 2LL);
    }
//    cout << ft[n] << "\n";
    for(int i = 0; i < n; i++) {
        scanf("%d%d", &l, &r);
        ev.push_back(make_pair(l, +1));
        ev.push_back(make_pair(r + 1, -1));
    }
    sort(ev.begin(), ev.end());

    long long it = ev[0].first, cnt = 0;
    long long ans = 0;
    for(int i = 0; i < ev.size();) {
        ans += (c(cnt, k) * (long long)(ev[i].first - it)) % md;
        ans %= md;

        it = ev[i].first;

        while(i < ev.size() && ev[i].first == it)
            cnt += ev[i].second,
            i++;
    }
    printf("%I64d\n", ans);
    return 0;
}
