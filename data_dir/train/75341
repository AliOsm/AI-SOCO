// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define int long long

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = 2003;

int n, res, c[N], k[N], pa[N];
bool zap[N];
VI wzap;
VII wyb;
vector<pair<int, PII>> edg;
PII p[N];

int Find(int x) {
  if (x == pa[x])
    return x;
  return pa[x] = Find(pa[x]);
}

void Union(int x, int y) {
  x = Find(x);
  y = Find(y);
  if (x == y)
    return;
  pa[x] = y;
}

signed main() {
  init_ios();
  cin >> n;
  for (int i = 1; i <= n; ++i)
    cin >> p[i].ST >> p[i].ND;
  for (int i = 1; i <= n; ++i) {
    pa[i] = i;
    cin >> c[i];
    edg.PB({c[i], {i, i}});
  }
  for (int i = 1; i <= n; ++i)
    cin >> k[i];
  for (int i = 1; i <= n; ++i)
    for (int j = i+1; j <= n; ++j) {
      int cena = (k[i]+k[j])*(abs(p[i].ST-p[j].ST)+abs(p[i].ND-p[j].ND));
      edg.PB({cena, {i, j}});
    }
  sort(edg.begin(), edg.end());
  for (auto el: edg) {
    int val = el.ST;
    int u = el.ND.ST;
    int v = el.ND.ND;
    if (u == v) {
      if (zap[Find(u)])
        continue;
      zap[Find(u)] = true;
      res += val;
      wzap.PB(u);
    }
    else {
      int uu = Find(u);
      int vv = Find(v);
      if (uu == vv)
        continue;
      if (zap[uu] && zap[vv])
        continue;
      if (zap[uu] || zap[vv])
        zap[uu] = zap[vv] = true;
      res += val;
      wyb.PB({u, v});
      Union(uu, vv);
    }
  }
  cout<<res<<"\n"<<wzap.size()<<"\n";
  for (int x: wzap)
    cout<<x<<" ";
  cout<<"\n"<<wyb.size()<<"\n";
  for (auto el: wyb)
    cout<<el.ST<<" "<<el.ND<<"\n";
}