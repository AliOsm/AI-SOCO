/* 431C */
#include <iostream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <functional>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define pb 				push_back
#define mp 				make_pair
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1

const int maxn = 205;
const int mod = 1e9+7;
__int64 dp1[maxn];
__int64 dp2[maxn];

void solve(int n, int k, __int64 dp1[]) {
	int i, j;
	
	// k tree
	dp1[0] = 1;
	for (i=0; i<n; ++i) {
		for (j=1; j<=k; ++j)
			dp1[i+j] = (dp1[i+j] + dp1[i]) % mod;
	}
}

int main() {
	ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif
	
	int n, k, d;
	int i, j;
	
	scanf("%d %d %d", &n, &k, &d);
	// k tree
	memset(dp1, 0, sizeof(dp1));
	solve(n, k, dp1);
	
	// d-1 tree	
	memset(dp2, 0, sizeof(dp2));
	solve(n, d-1, dp2);
	
	__int64 ans = ((dp1[n] - dp2[n]) % mod + mod) % mod;
	printf("%I64d\n", ans);
	
	#ifndef ONLINE_JUDGE
		printf("time = %d.\n", (int)clock());
	#endif
	
	return 0;
}
