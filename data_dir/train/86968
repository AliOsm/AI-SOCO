#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cassert>
#include <ctime>
#include <deque>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); ++i)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; --i)
#define mp make_pair
#define pb push_back
#define fs first
#define sc second
#define pi 3.1415926535897932384626433832795l

typedef long long ll;
typedef long double ld;

const int N = 100100;
int p[N];
set<pair<int, int> > s;
vector <int> a[2 * N], reva[2 * N];
bool use[2 * N];
vector <int> ord;
int color[2 * N];
int cnt;

void dfs (int v) {
    use[v] = 1;
    forn(i, a[v].size()) {
        int to = a[v][i];
        if (use[to]) continue;
        dfs(to);
    }
    ord.pb(v);
}

void calc (int v) {
    color[v] = cnt;
    forn(i, reva[v].size()) {
        int to = reva[v][i];
        if (color[to] >= 0)
            continue;
        calc(to);
    }
}

int main() {
#ifdef SG
    freopen ("input.txt", "r", stdin);
//  freopen ("output.txt", "w", stdout);
#endif
    int n, a1, b1;
    cin >> n >> a1 >> b1;
    forn(i, n) {
        scanf ("%d", &p[i]);
        s.insert(mp(p[i], i));
    }
    forn(i, n) {
        set <pair<int, int> >::iterator it = s.lower_bound(mp(a1 - p[i], -1));
        if (it == s.end() || it->fs != a1 - p[i]) {
            a[2 * i].pb(2 * i + 1);    
        } else {
            a[2 * i].pb(2 * it->sc);
            a[2 * i + 1].pb(2 * it->sc + 1);
        }
        it = s.lower_bound(mp(b1 - p[i], -1));
        if (it == s.end() || it->fs != b1 - p[i]) {
            a[2 * i + 1].pb(2 * i);    
        } else {
            a[2 * i + 1].pb(2 * it->sc + 1);
            a[2 * i].pb(2 * it->sc);
        }
    } 
    /*forn(i, 2 * n) {
        forn(j, a[i].size()) {
            printf ("%d %d\n", i, a[i][j]); 
        } 
    }*/
    forn(i, 2 * n) {
        if (!use[i]) {
            dfs(i);
        }
    }
    forn(i, 2 * n) {
        forn(j, a[i].size()) {
            reva[a[i][j]].pb(i);
        }
    }
    memset(color, -1, sizeof(color));
    cnt = 0;
    ford(i, 2 * n) {
        int v = ord[i];
        if (color[v] < 0) {
            //cerr << v << endl;
        
            calc(v);
            cnt++;
        }
    }
    forn(i, n) {
        if (color[2 * i] == color[2 * i + 1]) {
            puts("NO");
            return 0;    
        }
    }
    puts("YES");
    forn(i, n) {
        if (color[2 * i] < color[2 * i + 1]) 
            printf ("1 ");
        else
            printf ("0 "); 
    }
    cout << endl;
    



    return 0;
}
