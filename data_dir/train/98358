#include<bits/stdc++.h>
using namespace std;
typedef vector<int> vi;
typedef vector<pair<int,int> > vp;
#define pb push_back
#define mp make_pair
#define ll long long
#define rep(i,n) for(int i=0;i<n;i++)
#define MOD 1000000007
string get_only_alpha(string s){
	string res="";
	for(int i=0;i<s.length();i++)
		if(isalpha(s[i]))
			res += s[i];
	return res;
}
pair<int,pair<string,string> > parse_it(string s, int t){
	int st = -1, ed = -1;
	for(int i=0;i<s.length();i++)
		if(s[i] == '(')
			st = i;
	for(int i=0;i<s.length();i++)
		if(s[i] == ')')
			ed = i;
	if(t == 1){
		string rt = s.substr(st+1,ed-st-1);
		return mp(0,mp(get_only_alpha(rt),""));
	}
	else{
		int cm = -1;
		for(int i=0;i<s.length();i++){
			if(s[i] == ',')
				cm = i;
		}
		string rt = s.substr(st+1,cm-st-1);
		int lc = 10000,uc = -1;
		for(int i=0;i<s.length();i++)
			if(s[i] == '"')
				lc = min(lc, i), uc = max(uc,i);
		string st = s.substr(lc+1,uc-lc-1);
		return mp(-1,mp(get_only_alpha(rt),st));
	}
}
string get_first_two(string s){
	int mk = 0;
	string res = "";
	for(int i=0;i<s.length();i++){
		if(isalpha(s[i]) && mk < 2){
			mk++;
			res += s[i];
		}
	}		
	return res;
}
int mat[100010];
int main(){
	ios::sync_with_stdio(false);
	//cin.tie(NULL);
	int n;
	cin>>n;
	cin.ignore();
	vector<pair<int,pair<string,string> > > dp;
	int x = n;
	while(x--){
		string s =" ";
		char x[60];
		getline(cin,s);
		if(get_first_two(s) == "tr")
			dp.pb(mp(1,mp("","")));
		else if(get_first_two(s) == "th")
			dp.pb(parse_it(s,1));
		else if(get_first_two(s) == "ca")
			dp.pb(parse_it(s,2));
		//cout<<dp.back().first<<" "<<dp.back().second.first<<" "<<dp.back().second.second<<'\n';
		//cout<<x<<'\n';
	}
	stack<int> ry;
	for(int i=0;i<dp.size();i++){
		if(dp[i].first == 1)
			ry.push(i);
		else if(dp[i].first == -1)
			mat[i] = ry.top(), ry.pop();
	}
	int mk =0;
	for(int i=0;i<dp.size();i++){
		if(dp[i].first == 0){
			for(int j=i+1;j<dp.size();j++){
				if(dp[j].first == -1 && mat[j] < i && dp[j].second.first == dp[i].second.first){
					cout<<dp[j].second.second<<'\n';
					mk = 1;
					break;
				}
			}
		}
	}
	if(!mk)
		cout<<"Unhandled Exception\n";


	
}