#include "bits/stdc++.h"
#define MAXN 300009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second
#define my_little_dodge 46
#define left cep
#define right sag
using namespace std;

typedef long long ll;
typedef pair<int,int> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
int arr[MAXN],pos[MAXN];
struct node{
	int lazy,mn0,mn1,cnt0,cnt1;
}s[MAXN<<2],emp;
node merge(node x,node y){
	//~ assert(x.mn0!=x.mn1);
	//~ assert(y.mn0!=y.mn1);
	node z;z.lazy=0;
	if(x.mn0==y.mn0){
		z.mn0=x.mn0;
		z.cnt0=x.cnt0+y.cnt0;
		z.mn1=min(x.mn1,y.mn1);
		if(min(x.mn1,y.mn1)<INF){
			if(x.mn1==y.mn1)
				z.cnt1=x.cnt1+y.cnt1;
			else if(x.mn1>y.mn1)
				z.cnt1=y.cnt1;
			else
				z.cnt1=x.cnt1;
		}
		else
			z.cnt1=0;
	}
	else if(x.mn0<y.mn0){
		z.mn0=x.mn0;
		z.cnt0=x.cnt0;
		z.mn1=min(x.mn1,y.mn0);
		if(x.mn1==y.mn0)
			z.cnt1=x.cnt1+y.cnt0;
		else if(x.mn1>y.mn0)
			z.cnt1=y.cnt0;
		else
			z.cnt1=x.cnt1;
	}
	else{
		z.mn0=y.mn0;
		z.cnt0=y.cnt0;
		z.mn1=min(x.mn0,y.mn1);
		if(x.mn0==y.mn1)
			z.cnt1=x.cnt0+y.cnt1;
		else if(x.mn0>y.mn1)
			z.cnt1=y.cnt1;
		else
			z.cnt1=x.cnt0;
	}
	return z;
}
void shift(int nd){
	int &ret=s[nd].lazy;
	if(!ret)
		return;
	s[nd<<1|1].lazy+=ret;s[nd<<1|1].mn0+=ret;s[nd<<1|1].mn1+=ret;
	s[nd<<1].lazy+=ret;s[nd<<1].mn0+=ret;s[nd<<1].mn1+=ret;ret=0;
}
void inc(int l,int r,int v,int nd,int x,int y){
	if(l>y or x>r)
		return;
	if(l<=x and y<=r){
		s[nd].lazy+=v;
		s[nd].mn0+=v;
		s[nd].mn1+=v;
		return;
	}
	shift(nd);
	int mid=(x+y)>>1;
	inc(l,r,v,nd<<1,x,mid);
	inc(l,r,v,nd<<1|1,mid+1,y);
	s[nd]=merge(s[nd<<1],s[nd<<1|1]);
}
node tap(int l,int r,int nd,int x,int y){
	if(l>y or x>r)
		return emp;
	if(l<=x and y<=r)
		return s[nd];
	shift(nd);
	int mid=(x+y)>>1;
	node i1=tap(l,r,nd<<1,x,mid);
	node i2=tap(l,r,nd<<1|1,mid+1,y);
	if(i1.mn0==INF)
		return i2;
	if(i2.mn0==INF)
		return i1;
	return merge(i1,i2);	
}
void build(int nd,int x,int y){
	if(x==y){
		s[nd].lazy=0;
		s[nd].mn0=0;s[nd].cnt0=1;
		s[nd].mn1=INF;s[nd].cnt1=0;
		return;
	}
	int mid=(x+y)>>1;
	build(nd<<1,x,mid);
	build(nd<<1|1,mid+1,y);
	s[nd]=merge(s[nd<<1],s[nd<<1|1]);
}
int main(){
	#ifndef ONLINE_JUDGE
    freopen("file.in", "r", stdin);
	#endif	
	emp.mn0=INF;
	int n;
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		scanf("%d",arr+i);
		pos[arr[i]]=i;
	}
	build(1,1,n);
	inc(n,n,1,1,1,n);ll ans=1;
	for(int i=n-1;i>=1;i--){
		int ind=pos[i];
		//~ cout<<ind<<endl;
		int right=-1,left=-1;
		if(ind<n and arr[ind+1]>i)
			right=arr[ind+1];
		if(ind>1 and arr[ind-1]>i)
			left=arr[ind-1];
		//~ cout<<i<<" "<<left<<" "<<right<<endl;	
		if(~left and ~right){
			inc(i,min(left,right)-1,+1,1,1,n);
			inc(max(left,right),n,-1,1,1,n);
		}
		else if(~left or ~right)
			inc(i,max(left,right)-1,+1,1,1,n);
		else
			inc(i,n,+1,1,1,n);
		node res=tap(i,n,1,1,n);
		if(res.mn0==1)
			ans+=res.cnt0;
		if(res.mn1==2)
			ans+=res.cnt1;
		//~ cout<<res.mn0<<" "<<res.cnt0<<endl;
		//~ cout<<res.mn1<<" "<<res.cnt1<<endl;
		//~ for(int j=1;j<=n;j++){
			//~ res=tap(j,j,1,1,n);
			//~ printf("%d ",res.mn0);
			//~ assert(res.mn1>=INF);
		//~ }	
		//~ puts("");
	}	
	printf("%lld\n",ans-n);
	return 0;
}
