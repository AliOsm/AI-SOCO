#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair < int, int > ii;

const int N = 65;

int nn, n;
int a[N][N];
double prob[7][N], dp[N], dp2[N];

int main() {

	scanf("%d", &nn);

	n = 1 << nn;

	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++)
			scanf("%d", a[i] + j);

	for(int i = 1; i <= n; i++)
		prob[nn][i] = 1;

	vector < int > v;

	for(int i = 1; i <= n; i++) {
		v.push_back(i);
		dp[i] = 0;
	}

	double ans = 0;

	for(int i = nn - 1; i >= 0; i--) {
		int c = 1 << (nn - i);
		for(int j = 1; j <= n; j++)
			dp2[j] = 0;
		for(int j = 1; j <= n; j++) {
			for(int k = 1; k <= n; k++) {
				if(k != j and (k - 1) / c == (j - 1) / c and (k - 1) / (c / 2) != (j - 1) / (c / 2)) {
					prob[i][j] += prob[i + 1][j] * prob[i + 1][k] * a[j][k] / 100;
				}
			}
			for(int k = 1; k <= n; k++) {
				if(k != j and (k - 1) / c == (j - 1) / c and (k - 1) / (c / 2) != (j - 1) / (c / 2)) {
					dp2[j] = max(dp2[j], dp[j] + dp[k] + prob[i][j] * c / 2);
				}
			}
		}
		for(int j = 1; j <= n; j++)
			dp[j] = dp2[j];
	}

	for(int i = 1; i <= n; i++)
		ans = max(ans, dp[i]);

	printf("%.12lf\n", ans);

    return 0;

}

