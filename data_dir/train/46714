#include <bits/stdc++.h>




using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;


#define int ll


typedef pair<int, int> pii;
typedef pair<string, string> pst;
typedef pair<pii, pii> piii;
typedef vector<piii> vpii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector< vi > vvi;
typedef vector< vvi > vvvi;
typedef vector<pii> vpi;
typedef vector<short> vs;
typedef vector<vs> vvs;
typedef vector<vvs> vvvs;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vvl> vvvl;
typedef vector<ld> vld;
typedef vector<vld> vvld;
typedef vector<vvld> vvvld;
typedef vector<string> vst;
typedef vector<vst> vvst;
typedef pair<ld, ld> pld;
typedef vector<pld> vpd;
typedef complex<double> base;


#define inmin(a, b) a = min(a, (b))
#define inmax(a, b) a = max(a, (b))
#define my_abs(a) ((a >= 0) ? a : -a)
#define mp(a, b) make_pair(a, (b))
#define ALL(a) a.begin(),a.end()
#define RALL(a) a.rbegin(),a.rend()
#define sqr(x) ((x) * (x))
#define fori(i, n) for(int i = 0; i < int(n); ++i)
#define SZ(a) ((int)((a).size()))
#define MODIK(a) (a >= M ? a - M : a)
#define triple(T) tuple<T, T, T>
#define quad(T) tuple<T, T, T, T>
#define watch(x) cout << (#x) << " = " << x << endl;
#ifdef MAX_HOME
#define cerr cout
#else
#define cerr if (false) cerr
#endif


const double PI = 2 * acos(0.0);

const string DIGITS = "0123456789";
const string ALPH = "abcdefghijklmnopqrstuvwxyz";

istream &operator >> (istream &in, pii &a)
{
    in >> a.first >> a.second;
    return in;
}


ostream &operator << (ostream &out, pii &a)
{
    out << a.first << ' ' << a.second;
    return out;
}


istream &operator >> (istream &in, pld &a)
{
    in >> a.first >> a.second;
    return in;
}


ostream &operator << (ostream &out, pld &a)
{
    out << a.first << ' ' << a.second;
    return out;
}


template <class T0, class T1>
inline ostream & operator << (ostream &out, pair<T0, T1> &a) {
    return out << "{" << a.first << ", " << a.second << "}";
}

template <class T0, class T1, class T2>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) << ", " << get<2>(a) << "}";
}

template <class T0, class T1, class T2, class T3>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2, T3> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) <<
               ", " << get<2>(a) << ", " <<  get<3>(a) << "}";
}

template<class T>
inline ostream & operator << (ostream &out, vector<T> &a) {
    out << "[";
    fori (i, a.size())
        out << a[i] << vector<string>{", ", "]  "}[i + 1 == a.size()];
    return out;
}


void print(vi lel, int C)
{
    ofstream cout("output.txt");
    cout << SZ(lel) << ' ' << C << '\n';
    for (int v : lel)
        cout << v << ' ';
}


void smain();

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

#ifdef ART_HOME
    freopen("input.txt", "r", stdin);
    clock_t start = clock();
#endif
    cout << setprecision(10) << fixed;
    smain();
#ifdef ART_HOME
    cout << "\n\n\n\nTOTAL EXECUTION TIME: " << float( clock () - start ) /  CLOCKS_PER_SEC << endl;
#endif
}



const int N = 1 << 17, oo = 1e9 + 10, LOG = 20, B = 1, M = 998244353;
const ld pi = 2 * atan2(1, 0), EPS = 1e-9;


vi vertices[N];


bool prime(int m)
{
    for (int i = 2; i * i <= m; ++i)
    {
        if (m % i == 0)
            return 0;
    }

    return 1;
}


bool solution(int n) {

    for (int i = 0; i < N; ++i)
        vertices[i].clear();

    for (int i = 1; i < n; ++i)
        vertices[i].push_back(i + 1);

    vertices[1].push_back(n);

    if (prime(n))
        return 1;

    int m = n;
    for (int i = 1; i < n; i++)
    {
        if (i + 1 >= (n - i))
            break;

        vertices[i].push_back(n - i);
        m++;

        if (prime(m))
            return 1;
    }

    return prime(m);
}


void smain() {
    int n;
    cin >> n;


    assert(solution(n));
    int cnt = 0;

    for (int i = 1; i <= n; ++i)
        cnt += SZ(vertices[i]);

    cout << cnt << '\n';
    for (int i = 1; i <= n; ++i)
        for (int v : vertices[i])
            cout << i << ' ' << v << '\n';
}