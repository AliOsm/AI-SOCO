#include <bits/stdc++.h>

using namespace std;

#define f first
#define s second
#define mp make_pair
#define pb push_back
#define sz(x) ((int)((x).size()))
#define all(x) (x).begin(),(x).end()
#define deb(x) cerr << "(" << #x << " = " << x << ")\n";
#define bp(x) __builtin_popcount(x)

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<int> vi;

#define ROOT 1,1,n
#define LS v+v,l,mid
#define RS v+v+1,mid+1,r
#define mid ((l+r)>>1)

const int INF = 1e9;

char s[200200];
int a[200200];
int n;

int was[200200];
int t[2][200200 * 4];

void bad() {
	cout << "-1\n";
	exit(0);
}

void build(int x, int v, int l, int r) {
	if(l == r) {
		t[x][v] = (x == a[l] ? l : INF);
		return;
	}
	build(x, LS);
	build(x, RS);
	t[x][v] = min(t[x][v+v], t[x][v+v+1]);
}

void rem(int x, int v, int l, int r, int pos) {
	if(l == r) {
		t[x][v] = INF;
		return;
	}
	if(pos <= mid)
		rem(x, LS, pos);
	else
		rem(x, RS, pos);
	t[x][v] = min(t[x][v+v], t[x][v+v+1]);
}

int get(int x, int v, int l, int r, int L, int R) {
	if(r < L || R < l) return INF;
	if(L <= l && r <= R) return t[x][v];
	return min(get(x, LS, L, R), get(x, RS, L, R));
}

int find_left(int x, int pos) {
	return get(x, ROOT, 1, pos - 1);
}

int find_right(int x, int pos) {
	return get(x, ROOT, pos + 1, n);
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> (s + 1);
    n = strlen(s + 1);

    for(int i = 1; i <= n; ++i) {
    	a[i] = s[i] - '0';
    }
    for(int i = 0; i < 2; ++i) {
    	build(i, ROOT);
    }

    vector < vi > ans;
    int zo = n;
    for(int i = 1; i <= n; ++i) {
    	if(a[i] == 0) continue;
    	if(was[i]) continue;

    	vi res;
    	int j = i;
    	bool lm = 1;
    	while(j <= n) {
    		was[j] = 1;
    		if(lm) {
    			int l = find_left(0, j);
    			if(l == INF) bad();
    			lm = 0;
    			res.pb(l);
    			was[l] = 1;
    			rem(0, ROOT, l);
    		} 
    		int r = find_right(0, j);
    		if(r == INF) bad();
    		res.pb(j);
    		res.pb(r);
    		was[j] = was[r] = 1;
    		rem(1, ROOT, j);
    		rem(0, ROOT, r);
    		j = find_right(1, r);
    	}

    	ans.pb(res);
    }
    for(int i = 1; i <= n; ++i) {
    	if(!was[i]) {
    		vi vec;
    		vec.pb(i);
    		ans.pb(vec);
    	}
    }

    cout << sz(ans) << "\n";
    for(int i = 0; i < sz(ans); ++i) {
    	cout << sz(ans[i]) << " ";
    	for(int j = 0; j < sz(ans[i]); ++j) {
    		cout << ans[i][j] << " ";
    	}
    	cout << "\n";
    }
    
    return 0;
}
