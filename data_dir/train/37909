#include "bits/stdc++.h"
using namespace std;
 
const int N = 2e5 + 5;
 
int n;
long long k;
int a[N];
long long pref[N];
 
bool can(int mn, int mx) {
	long long lft = 0;
	int lo = 1, hi = n;
	int ret = -1;
	while(lo <= hi) {
		int mid = (lo + hi) / 2;
		if(a[mid] < mn) {
			ret = max(ret, mid);
			lo = mid + 1;
		} else {
			hi = mid - 1;
		}
	}
	if(ret != -1) {
		lft += 1LL * ret * mn;
		lft -= pref[ret];
	}
	if(lft > k) return false;
	long long rgt = 0;
	lo = 1, hi = n;
	ret = n + 1;
	while(lo <= hi) {
		int mid = (lo + hi) / 2;
		if(a[mid] > mx) {
			ret = min(ret, mid);
			hi = mid - 1;
		} else {
			lo = mid + 1;
		}
	} 
	if(ret != (n + 1)) {
		rgt += (pref[n] - pref[ret - 1]);
		rgt -= 1LL * (n - ret + 1) * mx;
	}
	return (lft + rgt) <= k;
}

bool ok(int x) {
	// mx - mn <= x
	for(int i = 1; i <= n; ++i) {
		int mx = a[i];
		int mn = a[i] - x;
		if(can(a[i] - x, a[i])) {
			return true;
		}
		if(can(a[i], a[i] + x)) {
			return true;
		}
	}
	return false;
}
 
void solve() {
	ios_base :: sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n >> k;
	for(int i = 1; i <= n; ++i) {
		cin >> a[i];
	}
	sort(a + 1, a + n + 1);
	int mn = a[1], mx = a[n];
	pref[1] = a[1];
	for(int i = 2; i <= n; ++i) {
		pref[i] += pref[i - 1] + a[i];
	}
	int lo = 0, hi = mx - mn;
	int ans = hi;
	while(lo <= hi) {
		int mid = (lo + hi) / 2;
		if(ok(mid)) {
			ans = min(ans, mid);
			hi = mid - 1;
		} else {
			lo = mid + 1;
		}
	}
	cout << ans << endl;
}
 
int main() {
	solve();
	return 0;  
}
