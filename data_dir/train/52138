#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

typedef long long ll;
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 2000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

int N,Q;
set<pii,greater<pii>> S;
vector<int> Bids[200005];

int main()
{
    cin >> N;
    f(i,1,N)
    {
        int id, bid;
        scanf("%d %d", &id, &bid);
        Bids[id].pb(bid);
    }
    f(i,1,N) if(!Bids[i].empty()) S.insert({Bids[i].back(),i});
    cin >> Q;
    while(Q--)
    {
        int k;
        scanf("%d", &k);
        vector<int> del;
        f(kk,1,k)
        {
            int id;
            scanf("%d", &id);
            if(!Bids[id].empty()) S.erase({Bids[id].back(),id}), del.pb(id);
        }
        if(SZ(S) == 0) printf("0 0\n");
        else if(SZ(S) == 1)
        {
            int id = S.begin()->second;
            printf("%d %d\n", id, Bids[id][0]);
        }
        else
        {
            int id = S.begin()->second;
            auto it = S.begin();
            it++;
            int id2 = it->second;
            int hi = Bids[id2].back();
            int idx = lower_bound(all(Bids[id]),hi) - Bids[id].begin();
            printf("%d %d\n", id, Bids[id][idx]);
        }
        for(int id : del) S.insert({Bids[id].back(),id});
    }

}
