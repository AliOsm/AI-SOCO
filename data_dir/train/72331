/*---> 07 May 2020 <--- > 12:42:55 <---*/
// #pragma GCC optimize("Ofast")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
// #pragma GCC optimize("unroll-loops")
// #pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("O3")
//#pragma GCC target ("sse4")
#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
using namespace std;
//template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
#define int long long
#define F first
#define S second
#define mod 1000000007
#define inf (int)1e14+5
#define sz(x) (int)x.size()
#define PI 3.141592653589793238510
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define __ ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define vi vector<int>
#define vpii vector<pair<int,int> > 
#define vvi vector<vector<int> >
#define PRINT_TIME cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s." <<endl;
#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename   enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "
typedef long double ld;
typedef pair<int,int> pii;
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
const int N=1e5+5;

int32_t main(){__
	int n,m,k;
	cin>>n>>m>>k;
	vector<string> v(n);
	for(int i=0;i<n;i++){
		cin>>v[i];
	}
	vector<vector<int> > dp(n,vector<int> (k+1,inf));
	vector<vector<int> > dp1(n,vector<int> (k+1,inf));
	for(int i=0;i<n;i++){
		vector<int> suff(m+1);
		suff[m-1]=((v[i][m-1]=='1') ?  1 : 0);
		for(int j=m-2;j>=0;j--){
			suff[j]=v[i][j]-'0';
			suff[j]+=suff[j+1];
		}
		vector<vector<int> > pp(m+1,vector<int> (m+1));
		for(int j=m-1;j>=0;j--){
			if(v[i][j]=='1')
			for(int l=j;l<m;l++){
				if(v[i][l]=='1')
					pp[j][l]=l-j+1;
				else
					pp[j][l]=pp[j][l-1];
			}
			else
			for(int l=j;l<m;l++){
				pp[j][l]=pp[j+1][l];
			}
			
		}
		// debug()<< imie(pp);
		int cnt=0;
		for(int j=0;j<m;j++){

			for(int l=m-1;l>=j;l--){
				if(cnt+suff[l+1]<=k)
				dp1[i][cnt+suff[l+1]]=min(dp1[i][cnt+suff[l+1]],pp[j][l]);
			}
			if(v[i][j]=='1')
				cnt++;
		}
		
		if(i>0){
			for(int j=0;j<=k;j++){
				for(int l=0;l<=j;l++){
					dp[i][j]=min(dp[i][j],dp1[i][l]+dp[i-1][j-l]);
				}
			}
		}
		if(i==0)
			dp[i]=dp1[i];
		// dp1[i]=dp[i];
		// debug()<< imie(dp1[i]);
	}
	// debug()<< imie(dp);
	cout<<(dp[n-1][k]>=inf ? 0 : dp[n-1][k])<<"\n";
return 0;
}