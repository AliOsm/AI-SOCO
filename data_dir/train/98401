#include <bits/stdc++.h>

using namespace std;

#define ok printf("ok\n");
#define pf printf
#define sc scanf
#define br printf("\n")

#define scs(a) scanf("%s",a)
#define sc1(a) scanf("%d",&a)
#define sc2(a,b) scanf("%d %d",&a,&b)
#define sc3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define sc1l(a) scanf("%lld",&a)
#define sc2l(a,b) scanf("%lld %lld",&a,&b)
#define sc3l(a,b,c) scanf("%lld %lld %lld",&a,&b,&c)
#define sc1d(a) scanf("%lf",&a)
#define sc2d(a,b) scanf("%lf %lf",&a,&b)
#define sc3d(a,b,c) scanf("%lf %lf %lf",&a,&b,&c)
#define pfs(a) printf("%s",a)
#define pf1(a) printf("%d",a)
#define pf2(a,b) printf("%d %d",a,b)
#define pf1l(a) printf("%lld",a)
#define pf2l(a,b) printf("%lld %lld",a,b)
#define pf1d(a) printf("%lf",a)
#define pf2d(a,b) printf("%lf %lf",a,b)

#define pii pair<int,int>
#define pll pair<long long,long long>
#define mp make_pair
#define F first
#define S second
#define pb push_back

#define mem0(a) memset(a,0,sizeof(a))
#define mem1(a) memset(a,-1,sizeof(a))

#define read freopen("input.txt","r",stdin)
#define write freopen("output.txt","w",stdout)

long long inline gcd(long long x,long long y){return !y?(long long)abs(x):gcd(y,x%y);}  //returns always positive gcd
long long inline lcm(long long a,long long b){return ((long long)abs((a/gcd(a,b))*b));} //returns always positive lcm
double inline cartesian_dist(double x1,double y1,double x2,double y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}

long long bigmod(long long b,long long p,long long m){              //for both positive and negative base
    if(!p)return 1%m;
    else if(p&1)return (((b%m)+m)%m*bigmod(b,p-1,m))%m;
    else {long long ret=bigmod(b,p/2,m);return (ret*ret)%m;}
}
// inverse will exist if and only if gcd(a,m) is 1
long long inverse(long long a,long long m){return bigmod(a,m-2,m);}  //if Mod is prime
long long extended(long long a,long long m){
    long long oldr=a,r=m,oldans=1,ans=0,quotient;
    while(r){
        quotient=oldr/r;
        oldr=oldr-r*quotient;
        swap(oldr,r);
        oldans=oldans-ans*quotient;
        swap(oldans,ans);
    }
    return ((oldans%m)+m)%m;
}

//int inline set_bit(int mask,int i){return mask=mask|(1<<i);}
//int inline reset_bit(int mask,int i){return mask=mask&~(1<<i);}
//bool inline check_bit(int mask,int i){return mask&(1<<i);}

typedef long long ll;
const double PI=acos(-1.0);
const double eps=10E-12;

int n,x;
vector<pair<pii,int> >vec;
vector<multiset<pair<int,pii> > >pq((int)2e5+5);
int main(){
    sc2(n,x);
    for(int i=0,l,r,c;i<n;i++){
        sc3(l,r,c);
        vec.pb(mp(mp(l,r),c));
        pq[r-l+1].insert(mp(c,mp(l,r)));
    }
    sort(vec.begin(),vec.end());

    /*br;
    for(int i=0;i<n;i++)pf("%d %d %d\n",vec[i].F.F,vec[i].F.S,vec[i].S);
    br;
    for(multiset<pair<int,pii> >::iterator it=pq[2].begin();it!=pq[2].end();++it)pf("%d %d %d\n",it->F,it->S.F,it->S.S);
    br;
    for(multiset<pair<int,pii> >::iterator it=pq[3].begin();it!=pq[3].end();++it)pf("%d %d %d\n",it->F,it->S.F,it->S.S);
    br;*/
    int ans=INT_MAX;
    for(int i=0;i<n;i++){
        int f1=vec[i].F.S-vec[i].F.F+1;
        int need=x-f1;
        if(need<=0)continue;
        //cout<<f1<<" "<<need<<endl;
        while(pq[need].size() && pq[need].begin()->S.F<=vec[i].F.S)pq[need].erase(pq[need].begin());
        if(pq[need].size())ans=min(ans,vec[i].S+pq[need].begin()->F);
    }
    if(ans==INT_MAX)ans=-1;
    pf1(ans);br;

    return 0;
}
