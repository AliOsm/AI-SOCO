#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAX = 1e6;
const int MOD = 1e9 + 7;
vector<int> primes, exponents[MAX + 5];
bool prime[MAX + 5];
int dp[MAX + 5][21];

void sieve() {
	memset(prime, true, sizeof prime);
	primes.push_back(2);
	for(int i = 3; i <= MAX; i += 2) {
		if(prime[i]) {
			primes.push_back(i);
			for(ll j = 1LL * i * i; j <= MAX; j += 2 * i) {
				prime[j] = false;
			}
		}
	}
}

int main() {
	sieve();

	dp[0][0] = 1;
	fori(i, 1, 21) {
		dp[0][i] = 2;
	}
	fori(i, 1, MAX + 1) {
		dp[i][0] = dp[i - 1][0];
		fori(j, 1, 21) {
			dp[i][j] = (dp[i][j - 1] + dp[i - 1][j]) % MOD;
		}
	}
	int q;
	scanf("%d", &q);
	fori(t, 0, q) {
		int r, n;
		scanf("%d %d", &r, &n);
		int ans = 1;
		if(n == 1) {
			puts("1");
			continue;
		}
		if(exponents[n].empty()) {
			int _n = n;
			for(int i = 0; i < (int) primes.size() && primes[i] * primes[i] <= _n; i++) {
				int k = 0;
				while(_n % primes[i] == 0) {
					_n /= primes[i];
					k++;
				}
				if(k) {
					exponents[n].push_back(k);
				}
			}
			if(_n != 1) {
				exponents[n].push_back(1);
			}
		}
		for(auto &each : exponents[n]) {
			ans = (1LL * ans * dp[r][each]) % MOD;
		}
		printf("%d\n", ans);
	}

	return 0;
}

