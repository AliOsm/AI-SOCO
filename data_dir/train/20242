#include <functional>
#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cstdlib>
#include <numeric>
#include <iomanip>
#include <stdio.h>
#include <cstring>
#include <cassert>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;

template <typename T>
T nextInt() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;
}

const int maxN = (int)4e5 + 10;
const int INF = (int)1e9;
const int mod = (int)1e9 + 7;
const ll LLINF = (ll)1e18;

int n, m, p;
int a[maxN];
int b[maxN];

int eq;

int P[maxN];
int Q[maxN];

void add(int x, int d) {
    if (P[x] == Q[x]) eq--;
    P[x] += d;
    if (P[x] == Q[x]) eq++;
}

int main() {

   // freopen(".in", "r", stdin);
   // freopen(".out", "w", stdout);

    n = nextInt<int>();
    m = nextInt<int>();
    p = nextInt<int>();

    vector <int> x;
    for (int i = 0; i < n; ++i) {
        a[i] = nextInt<int>();
        x.push_back(a[i]);
    }

    for (int i = 0; i < m; ++i) {
        b[i] = nextInt<int>();
        x.push_back(b[i]);
    }

    sort(x.begin(), x.end());
    x.erase(unique(x.begin(), x.end()), x.end());

    for (int i= 0; i< n; ++i) {
        a[i] = lower_bound(x.begin(), x.end(), a[i]) - x.begin();
    }

    for (int i = 0; i < m; ++i) {
        b[i] = lower_bound(x.begin(), x.end(), b[i]) - x.begin();
        ++Q[b[i]];
    }

    sort(b, b + m);
    int S = unique(b, b + m) - b;

    vector <int> result;
    for (int i = 0; i < p; ++i) {
        vector <int> seq;
        for (int j = i; j < n; j += p) {
            seq.push_back(a[j]);
        }
        for (int j = 0; j < (int)seq.size(); ++j) {
            add(seq[j], +1);
            if (j - m >= 0) add(seq[j - m], -1);
            if (eq == S) result.push_back(i + j * p - p * (m - 1));
        }
        for (int j = 0; j < (int)seq.size(); ++j) {
            P[seq[j]] = 0;
        }
        eq = 0;
    }

    printf("%d\n", result.size());
    sort(result.begin(), result.end());
    for(int i = 0; i < result.size(); ++i) {
        printf("%d ", result[i] + 1);
    }
    return 0;
}
