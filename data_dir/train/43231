#include <bits/stdc++.h>

using namespace std;
using ll = long long;
const int N = 1005;

int n;
int mat[N][N][2];

int dp[N][N][2];

int f(int i, int j, int k) {
	if(i >= n or j >= n) return 1e9;
	if(i == n - 1 and j == n - 1) return mat[i][j][k];
	int &ans = dp[i][j][k];
	if(~ans) return ans;
	ans = mat[i][j][k];

	ans += min(f(i + 1, j, k), f(i, j + 1, k));

	return ans;
}

int main() {
	memset(dp, -1, sizeof dp);

	scanf("%d", &n);

	int zi = -1, zj = -1;
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < n; j++) {
			int x;
			scanf("%d", &x);
			if(x == 0) {
				mat[i][j][0] = mat[i][j][1] = 1e8;
				zi = i, zj = j;
			}
			else {
				while(x % 2 == 0) x /= 2, mat[i][j][0]++;
				while(x % 5 == 0) x /= 5, mat[i][j][1]++;
			}
		}
	}

	int i = 0, j = 0, k = 0;
	if(f(0, 0, 1) < f(0, 0, 0)) k = 1;

	if(f(i, j, k) > 1 and zi != -1) {
		printf("1\n");
		while(i < zi) {
			printf("D");
			i++;
		}
		while(j < n-1) {
			printf("R");
			j++;
		}
		while(i < n-1) {
			printf("D");
			i++;
		}
		printf("\n");
		return 0;
	}

	printf("%d\n", f(i, j, k));
	for(int w = 0; w < 2 * (n - 1); w++) {
		if(f(i, j, k) == mat[i][j][k] + f(i+1, j, k)) {
			printf("D");
			i++;
		}
		else {
			printf("R");
			j++;
		}
	}
	printf("\n");
}
