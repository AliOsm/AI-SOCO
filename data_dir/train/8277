#include <bits/stdc++.h>
#include <cctype>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::less<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef unsigned long long uint64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 300'000;
const int LOGN = 19;

int n, m, k;

void solve(int) {
  int64 n;
  cin >> n >> m;
  vector<int> a(65, 0);
  for (int i = 0; i < m; ++i) {
    int x;
    cin >> x;
    ++a[__builtin_ctz(x)];
  }
  for (int i = 0; n; n /= 2, ++i) {
    a[i] -= n & 1;
  }
  int ans = 0, p = 0;
  for (int i = 0; i < 64; ++i) {
    p = max(p, i);
    while (p < 64 && a[p] <= 0) {
      ++p;
    }
    if (a[i] < 0) {
      if (p < 64) {
        --a[p];
        for (int j = p - 1; j >= i; --j) {
          ++a[j];
          ++ans;
        }
      } else {
        cout << "-1\n";
        return;
      }
    }
    a[i + 1] += a[i] / 2;
  }
  cout << ans << '\n';
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  precalc();
  int test = 1;
  cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}

