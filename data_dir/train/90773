#include "omp.h"
#include <iostream>
#include <cmath>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <map>
#include <string>
#include <set>
#include <cassert>
#include <deque>


using namespace std;


typedef long double ld;
typedef long long ll;


const int psze = 30, sze = 1 << 17, INF = 1e9 + 1, root = 1;
int n, d, b;

#define int ll

vector<int> my_values;
int values[sze];


bool left_right(int l1, int r1)
{
	bool ans = 1;
	deque<pair<int, int>> segments;

	segments.push_back(make_pair(0, min(n - 1LL, l1 + (l1 + 1LL) * d)));
	int previous_l = 0, previous_r = min(n - 1LL, l1 + (l1 + 1LL) * d);

	for (int i = l1; i <= r1; ++i)
	{
		int cnt = 0;
		while (segments.size() && cnt < b)
		{
			pair<int, int> cur = segments.front();
			while (cur.first <= cur.second && cnt < b)
			{
				cnt += values[cur.first];

				if (cnt < b)
					values[cur.first] = 0;
				else
					values[cur.first] = cnt - b;

				if (cnt < b)
					cur.first++;
			}

			if (cnt < b)
				segments.pop_front();
			else
				segments[0] = cur;
		}

		if (cnt < b)
			ans = 0;

		if (i != r1)
		{
			if (previous_r + 1 != n)
			{
				segments.push_back(make_pair(previous_r + 1, min(n - 1LL, i + 1 + (i + 2LL) * d)));
				previous_r = min(n - 1LL, i + 1 + (i + 2LL) * d);
			}
		}

	}

	return ans;
}


bool right_left(int l2, int r2)
{
	bool ans = 1;
	deque<pair<int, int>> segments;

	segments.push_back(make_pair(max(0LL, r2 - (n - r2) * d), n - 1LL));
	int previous_l = max(0LL, r2 - (n - r2) * d), previous_r = n - 1LL;

	for (int i = r2; i >= l2; --i)
	{
		int cnt = 0;
		while (segments.size() && cnt < b)
		{
			pair<int, int> cur = segments.back();
			while (cur.first <= cur.second && cnt < b)
			{
				cnt += values[cur.second];

				if (cnt < b)
					values[cur.second] = 0;
				else
					values[cur.second] = cnt - b;
				
				if (cnt < b)
					cur.second--;
			}

			if (cnt < b)
				segments.pop_back();
			else
				segments[(int)segments.size() - 1] = cur;
		}

		if (cnt < b)
			ans = 0;

		if (i != l2)
		{
			if (previous_l)
			{
				segments.push_front(make_pair(max(0LL, i - 1 - (n - i + 1) * d), previous_l - 1));
				previous_l = max(0LL, i - 1 - (n - i + 1) * d);
			}
		}

	}

	return ans;
}


bool check(int m)
{
	int r1, l2, l1, r2;
	l1 = m, r2 = n - m - 1;

	if (n & 1)
		r1 = n / 2, l2 = n / 2 + 1;
	else
		r1 = n / 2 - 1, l2 = n / 2;
	
	for (int i = 0; i < n; ++i)
		values[i] = my_values[i];

	bool test1 = min(left_right(l1, r1), right_left(l2, r2));

	for (int i = 0; i < n; ++i)
		values[i] = my_values[i];

	bool test2 = min(right_left(l2, r2), left_right(l1, r1));
	

	return max(test1, test2);
}


signed main()
{
	cin >> n >> d >> b;

	my_values.resize(n);
	for (int i = 0; i < n; ++i)
		cin >> my_values[i];

	int l = -1, r = n / 2;
	while (r - l > 1)
	{
		int m = (l + r) >> 1;

		if (check(m))
			r = m;
		else
			l = m;

	}

	cout << r << '\n';
	return 0;
}