/**
 * @author khokharnikunj8
 */

#include <bits/stdc++.h>

using namespace std;

class AGarland {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vector<int> ar(n + 1);
        for (int i = 1; i <= n; i++) in >> ar[i];
        vector<bool> done(n + 1);
        for (int i : ar) done[i] = true;
        vector<int> cnt(2);
        for (int i = 1; i <= n; i++)if (!done[i]) cnt[i & 1]++;
        vector<vector<vector<vector<int>>>> dp(n + 1,
                                               vector<vector<vector<int>>>(cnt[0] + 1, vector<vector<int>>(cnt[1] + 1,
                                                                                                           vector<int>(
                                                                                                                   2,
                                                                                                                   1000000))));
        dp[0][0][0][0] = 0;
        dp[0][0][0][1] = 0;
        for (int i = 1; i <= n; i++) {
            if (ar[i] != 0) {
                for (int j = 0; j <= cnt[0]; j++) {
                    for (int k = 0; k <= cnt[1]; k++) {
                        dp[i][j][k][ar[i] & 1] = min(dp[i][j][k][ar[i] & 1], dp[i - 1][j][k][ar[i] & 1]);
                        dp[i][j][k][ar[i] & 1] = min(dp[i][j][k][ar[i] & 1], dp[i - 1][j][k][(ar[i] & 1) ^ 1] + 1);
                    }
                }
            } else {
                for (int j = 0; j <= cnt[0]; j++) {
                    for (int k = 0; k <= cnt[1]; k++) {
                        if (j - 1 >= 0) {
                            dp[i][j][k][0] = min(dp[i][j][k][0], dp[i - 1][j - 1][k][0]);
                            dp[i][j][k][0] = min(dp[i][j][k][0], dp[i - 1][j - 1][k][1] + 1);
                        }
                        if (k - 1 >= 0) {
                            dp[i][j][k][1] = min(dp[i][j][k][1], dp[i - 1][j][k - 1][1]);
                            dp[i][j][k][1] = min(dp[i][j][k][1], dp[i - 1][j][k - 1][0] + 1);
                        }
                    }
                }
            }
        }
        out << min(dp[n][cnt[0]][cnt[1]][0], dp[n][cnt[0]][cnt[1]][1]) << endl;
    }
};


int main() {
	AGarland solver;
	std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
