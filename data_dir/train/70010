//  Copyright Â© 2020 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 205
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
#define forn(i,a,b) for (int i = a; i <= b; i ++ )
#define mod(n,k) (((n%k)+k)%k)
using namespace std;
typedef long long ll;
 
int T, N;
int mp[MAX];
int ans[MAX];
bool ok[MAX];
 
bool isOk( vector < vector < int > > & v ) {
    for( int i = 2; i <= N; i ++ ) 
        ok[i] = 0;
    for( int i = 0; i < v.size(); i ++ ) {
        vector < int > corr = v[i];
        for( int j = 0; j + corr.size() - 1 < N; j ++ ) {
            vector < int > tmp;
            for( int k = 0; k < corr.size(); k ++ )
                tmp.push_back( ans[j + k + 1] );
            sort( tmp.begin() , tmp.end() );
            if( tmp == corr )
                ok[j + corr.size()] = 1;
        }
    }
    for( int i = 2; i <= N; i ++ )
        if( ! ok[i] )
            return false;
    return true;
}
 
bool check( int lst , int fst , vector < vector < int > > & v ) {
    
    // Copy mp
    set < int > s[MAX];
    for( int i = 0; i < v.size(); i ++ ) {
        for( int j = 0; j < v[i].size(); j ++ ) {
            s[v[i][j]].insert( i );
        }
    }
    
    /* for( int i = 1; i <= N; i ++ )
        cout << s[i].size() << " \n"[i == N]; */
        
    if( fst != -1 ) {
        ans[1] = fst;
        s[ans[1]].clear();
    }
    
    int r = N;
    while( r > 2 ) {
        int nxt = -1;
        if( lst == -1 )
            return false;
        ans[r] = lst;
        int i = *s[lst].begin();
        for( int j = 0; j < v[i].size(); j ++ ) {
            s[v[i][j]].erase( i );
            if( s[v[i][j]].size() == 1 ) { 
                if( nxt == -1 or mp[v[i][j]] > mp[nxt] )
                nxt = v[i][j];
            }
        }
        lst = nxt;
        r--;
    }        
    
    for( int i = 1; i <= N; i ++ )
            if( ! s[i].empty() )
                ans[r--] = i;
    if( fst == -1 ) {
        if( mp[ans[1]] > mp[ans[2]] )
            swap( ans[1] , ans[2] );
    }
    
    if( ! isOk( v ) )
        return false;
    
    for( int i = 1; i <= N; i ++ )
        cout << ans[i] << " ";
    cout << "\n";
    return true;
}
 
 
 
void solve() {
 
    memset( mp , 0 , sizeof mp );
    
    cin >> N;
    vector < vector < int > > v;
    for( int i = 0; i < N-1; i ++ ) {
        int t;
        cin >> t;
        vector < int > v2(t);
        for( int j = 0; j < t; j ++ ) {
            cin >> v2[j];
            mp[v2[j]]++;
        }
        v.push_back( v2 );
    }
    
    int f = -1, s = -1;
    for( int i = 1; i <= N; i ++ )
        if( mp[i] == 1 ) {
            if( f == -1 )
                f = i;
            else
                s = i;
        }
    if( check( f , s , v ) )
        return;
    check( s , f , v );
    
    // CLEAR
}
 
int main()
{
    optimiza_io
    cin >> T;
    while( T -- )   
        solve();
    return 0;
}
 
// CHECAR LIMITES 
 
/*

1
5
2 1 4
2 1 2
4 1 2 3 4
3 2 3 5
 
*/ 