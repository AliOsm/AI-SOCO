#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <ll>::max() >> 1;
const ll N = 1e6 + 1;
ll n;
ll h[N];

struct Node {
    ll l, r;
    ll mask;
} node[N << 2];

inline ll lg(ll x) {
    return 31 - __builtin_clz(x);
}

void build(ll id, ll l, ll r) {
    node[id].l = l;
    node[id].r = r;
    if(l == r) {
        return;
    }
    ll q = l + r >> 1;
    build(l(id), l, q);
    build(r(id), q + 1, r);
}

ll query(ll id, ll l, ll r) {
    if(node[id].l == l && node[id].r == r) {
        return node[id].mask;
    }
    ll res = 0;
    ll q = node[id].l + node[id].r >> 1;
    if(l <= q) {
        res |= query(l(id), l, min(q, r));
    }
    if(r > q) {
        res |= query(r(id), max(q + 1, l), r);
    }
    return res;
}

void update(ll id, ll i, ll mask) {
    if(node[id].l == node[id].r) {
        node[id].mask = mask;
        return;
    }
    ll q = node[id].l + node[id].r >> 1;
    if(i <= q) {
        update(l(id), i, mask);
    } else {
        update(r(id), i, mask);
    }
    node[id].mask = node[l(id)].mask | node[r(id)].mask;
}

void input() {
    cin >> n;
    build(0, 1, N);
    for(ll i = 1; i < N; ++i) {
        ll l = ceil(pow(i, 0.25));
        ll r = floor(sqrt(i));
        ll mask = query(0, l, r);
        ll mexx = lg(lsb(~mask));
        update(0, i, 1 << mexx);
    }
}

void solve() {
    ll ans = 0;
    for(ll i = 0; i < n; ++i) {
        ll x; cin >> x;
        ll l = ceil(pow(x, 0.25));
        ll r = floor(sqrt(x));
        if(r == x) {
            continue;
        }
        ll mask = query(0, l, r);
        ll mexx = lg(lsb(~mask));
        ans ^= mexx;
    }
    cout << (ans? "Furlo": "Rublo") << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
