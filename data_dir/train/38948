#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("sumsqr.in");ofstream out("sumsqr.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

ll lower_or_eq(vec<ll> &m, ll X){
    int l = -1, r = m.size();
    for(; l+1<r;){
        int md = (l+r)/2;
        if(m[md]>X) r = md;
        else l = md;
    }
    return l==-1 ? -1 : m[l];
}

ll greater_or_eq(vec<ll> &m, ll X){
    int l = -1, r = m.size();
    for(; l+1<r;){
        int md = (l+r)/2;
        if(m[md]<X) l = md;
        else r = md;
    }
    return r==m.size() ? -1 : m[r];
}

ll gmn(vec<ll> &m, vec<ll> &n, vec<ll> &u){
    ll o = 6e18;
    for(int q=0; q<n.size(); q++){
        ll c1 = lower_or_eq(m, n[q]);
        ll c2 = greater_or_eq(u, n[q]);
        if(c1==-1 || c2==-1) continue;
        o = min(o, (n[q]-c1)*(n[q]-c1) + (n[q]-c2)*(n[q]-c2) + (c1-c2)*(c1-c2));
    }
    return o;
}

int main() {
    fast;
    int z; cin>>z;
    for(; z--;){
        ll a,b,c; cin>>a>>b>>c;
        ll o = 6e18;
        vec<ll> m(a), n(b), u(c);
        for(int q=0; q<a; q++) cin>>m[q];
        for(int q=0; q<b; q++) cin>>n[q];
        for(int q=0; q<c; q++) cin>>u[q];
        sort(m.begin(), m.end());
        sort(n.begin(), n.end());
        sort(u.begin(), u.end());
        o = min(o, gmn(m,n,u));
        o = min(o, gmn(m,u,n));
        o = min(o, gmn(n,m,u));
        o = min(o, gmn(n,u,m));
        o = min(o, gmn(u,n,m));
        o = min(o, gmn(u,m,n));
        cout<<o<<"\n";
    }
}