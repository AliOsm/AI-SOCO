#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds ;
#define ll int
#define pp pair<ll,ll>
#define rep(i,a,b) for(ll i=a;i<b;i+=1)
#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(a) int((a).size())
#define present(c,x) ((c).find(x) != (c).end())
#define mp make_pair
#define hell 1000000007
#define F first
#define S second
#define sll(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
typedef tree<pp , null_type , less<pp> , rb_tree_tag , tree_order_statistics_node_update > ordered_set ;
ll t=1 ;
void solve()
{
    ll n ;
    cin >> n ;
    vector<pair<ll,ll> > safe , piece ;
    char mat[n][n] , ans[2*n-1][2*n-1];
    rep( i , 0 , 2*n-1 )rep( j , 0 , 2*n-1 )ans[i][j]='x';
    ans[n-1][n-1]='o';
    rep( i , 0 , n )
    {
        rep( j , 0 , n )
        {
            cin >> mat[i][j] ;
            if( mat[i][j] == '.' )
                safe.pb( {i,j} ) ;
            else if( mat[i][j] == 'o' )
                piece.pb( {i,j} ) ;
        }
    }
    rep( i , 0 , sz(safe) )
    {
        rep( j , 0 , sz( piece ) )
        {
            ll x = safe[i].F - piece[j].F , y = safe[i].S - piece[j].S ;
            ans[n-1+x][n-1+y]='.';
        }
    }
    vector<pair<ll,ll> > unsafe1 ;
    rep( i , 0 , 2*n-1 )
    {
        rep( j , 0 , 2*n-1 )
        {
            if( ans[i][j] == 'x' )
                unsafe1.pb({i-(n-1),j-(n-1)});
        }
    }
    char cpy[n][n] ;
    rep( i , 0 , n )rep( j , 0 , n )cpy[i][j]='.';
    rep( i , 0 , sz(piece ) )
    {
        cpy[piece[i].F][piece[i].S]='o';
        rep( j , 0 , sz(unsafe1) )
        {
            ll x = piece[i].F + unsafe1[j].F , y = piece[i].S + unsafe1[j].S ;
            if(x>=0&&x<n&&y>=0&&y<n)
                if(cpy[x][y]=='.')
                    cpy[x][y]='x';
        }
    }
    /*cout << "\n" ;
    rep( i , 0 , n )
    {
        rep( j , 0 , n )
        cout << mat[i][j] ;
        cout << '\n';
    }
    cout << "\n" ;
    rep( i , 0 , n )
    {
        rep( j , 0 , n )
        cout << cpy[i][j] ;
        cout << "\n" ;
    }*/
    rep( i , 0 , n )
    {
        rep( j , 0 , n )
        {
            if(cpy[i][j]!=mat[i][j])
            {
                cout << "NO";return;
            }
        }
    }
    cout << "YES\n" ;
    rep( i , 0 , 2*n - 1 )
    {
        rep( j , 0 , 2*n - 1 )
            cout << ans[i][j];
        cout << "\n" ;
    }
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //cin>>t;
    while(t--)
        solve() ;
    return 0 ;
}
