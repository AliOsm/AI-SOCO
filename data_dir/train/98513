#include<bits/stdc++.h>
using namespace std;

int main()
{
    ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);

    int n , m ;
    cin >> n >> m;
    int arr[n];
    for(int i = 0 ; i < n ;i++)
        cin >> arr[i];

    vector<int> Q(m+1);
    int x = 0;
    for(int i = 1 ; i <= m ; i++)
        cin >> Q[i] , x += Q[i];

    int l = x , h = n , mid;

    int mn = 1e9;
    while(l <= h)
    {

        mid = (l+h)/2;

        vector<int> temp (m+1,0);

        int good = 0;
        bool check[m+1] = {};

        for(int i = 0 ; i < mid ; i++)
            temp[arr[i]]++;

        for(int i = 1; i <= m ; i++)
            if(temp[i] >= Q[i] )
                good++ , check[i] = 1;

        long long tempdif = 1e9;
        bool last = 0;
        if(good == m)
        {
            tempdif =0;
            for(int i = 1; i <= m ; i++)
                if(temp[i] >= Q[i] )
                    tempdif += temp[i] - Q[i];
            last = 1;
        }

        long long mnmn = 1e9;
        mnmn = min(mnmn , tempdif);

        if(!last)
            tempdif = 0;
        for(int i = 0 ; i < n-mid ; i++)
        {
            tempdif -= temp[arr[i]] - Q[arr[i]];
            tempdif -= temp[arr[i+mid]]- Q[arr[i+mid]];
            temp[arr[i]]--;
            temp[arr[i+mid]]++;

            if(temp[arr[i]] >= Q[arr[i]] && !check[arr[i]])
                good++ , check[arr[i]] = 1;
            else if(check[arr[i]] && temp[arr[i]] < Q[arr[i]])
                good-- , check[arr[i]] =0;

            if(temp[arr[i+mid]] >= Q[arr[i+mid]] && !check[arr[i+mid]])
                good++ , check[arr[i+mid]] = 1;
            else if(check[arr[i+mid]] && temp[arr[i+mid]] < Q[arr[i+mid]])
                good-- , check[arr[i+mid]] =0;

            if(good == m)
            {
                if(last)
                {
                    tempdif += temp[arr[i]] - Q[arr[i]];
                    tempdif += temp[arr[i+mid]]-Q[arr[i+mid]];

                    mnmn = min(mnmn , tempdif);
                }
                else
                {
                    tempdif = 0;
                    for(int i = 1; i <= m ; i++)
                        if(temp[i] >= Q[i] )
                            tempdif += temp[i] - Q[i];
                    mnmn = min(mnmn , tempdif);
                }

                last = 1;
            }
            else last = 0 , tempdif = 0;
        }

        tempdif = 0;
        if(good == m)
        {
            tempdif = 0;
            for(int i = 1; i <= m ; i++)
                if(temp[i] >= Q[i] )
                    tempdif += temp[i] - Q[i];
            mnmn = min(mnmn , tempdif);
        }

        if(mnmn < 1e9)
        {
            mn = min((long long)mn , mnmn);
            h = mid-1;
        }
        else
        {
            l = mid+1;
        }
    }


    if(mn == 1e9)
        cout << -1;
    else
        cout << mn;


    return 0;
}
