#include <bits/stdc++.h>

using namespace std;

typedef vector<double> VD;
typedef vector<VD> VVD;

VVD V;
struct Chance {
	double best;
	int w;
};
vector<Chance> go(int lo, int hi){
	if(lo == hi)return { (Chance){ 1, lo } };
	int m = (lo+hi)/2;
	vector<Chance> f = go(lo, m);
	vector<Chance> s = go(m+1, hi);
	vector<Chance> t;
	for (int i = 0; i < f.size(); ++i) {
		double best = 0;
		for (int j = 0; j < s.size(); ++j) {
			
		}
	}
}

typedef long double Double;
Double mem[64][64][64];
int cat[64][64][64];
Double prob(int lo, int hi, int w){
	if(lo == hi)return 1;
	if(cat[lo][hi][w])return mem[lo][hi][w];
	int m = (lo+hi)/2;
	if(w <= m){
		Double r = 0;
		for (int j = m+1; j <= hi; ++j) {
			Double t1 = prob(m+1, hi, j);
			Double t2 = prob(lo, m, w);
			r += V[w][j] * t1 * t2;
		}
		cat[lo][hi][w] = 1;
		return mem[lo][hi][w] = r;
	}else{
		Double r = 0;
		for (int j = lo; j <= m; ++j) {
			Double t1 = prob(m+1, hi, w);
			Double t2 = prob(lo, m, j);
			r += V[w][j] * t1 * t2;
		}
		cat[lo][hi][w] = 1;
		return mem[lo][hi][w] = r;
	}
}

Double mem2[64][64][64];
int cat2[64][64][64];
Double bestVal(int lo, int hi, int w){
	if(lo == hi)return 0;
	if(cat2[lo][hi][w])return mem2[lo][hi][w];
	int sz = hi-lo+1;
	assert(sz % 2 == 0);
	int m = (lo+hi)/2;
	int P = (hi-lo+1)/2;
	if(w <= m){
		Double r = 0, mv = 0;
		Double v1 = bestVal(lo, m, w);
		for (int j = m+1; j <= hi; ++j) {
			Double v2 = bestVal(m+1, hi, j);
			Double p1 = prob(lo, m, w);
			Double p2 = prob(m+1, hi, j);
			r += P * V[w][j] * p1 * p2;
			mv = max(mv, v2);
		}
		cat2[lo][hi][w] = 1;
		return mem2[lo][hi][w] = r + v1 + mv;
	}else{
		Double r = 0, mv = 0;
		Double v2 = bestVal(m+1, hi, w);
		for (int j = lo; j <= m; ++j) {
			Double v1 = bestVal(lo, m, j);
			Double p1 = prob(lo, m, j);
			Double p2 = prob(m+1, hi, w);
			r += P * V[w][j] * p1 * p2;
			mv = max(mv, v1);
		}
		cat2[lo][hi][w] = 1;
		return mem2[lo][hi][w] = r + v2 + mv;
	}
}

int main(int argc,char *argv[]) {
	int N;
	cin >> N;
	N = 1<<N;
	V = VVD(N, VD(N));
	for (int i = 0; i < N; ++i) {
		for (int j = 0; j < N; ++j) {
			cin >> V[i][j];
			V[i][j] /= 100;
		}
	}
	Double an = 0;
	for (int i = 0; i < N; ++i) {
		an = max(an, bestVal(0, N-1, i));
	}
	cout << setprecision(15) << fixed << an << endl;
}
	
/*

2
0 40 100 100
60 0 40 40
0 60 0 45
0 60 55 0


 */
