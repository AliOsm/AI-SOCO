# include <bits/stdc++.h>
# define int long long 
using namespace std;
const int N = 2e5 + 10, INF = 1e9 + 100;
int fix[N], a[N], ans = INF, n; 
vector < int > bit[64], v, edges[N];
map < pair < int, int >, int > mp;
int bfs(int x, int y){
    queue < pair < int, int > > q; 
    q.push({x, 0});
    while(q.size()){
        int a = q.front().first;
        int b = q.front().second;
        q.pop();
        if(a == y && b > 1)return b + 1;
        if(a == y)continue;
        if(fix[a])continue;
        fix[a] = 1;
        for(int i = 0; i < edges[a].size(); i ++)
            q.push({edges[a][i], b + 1});
    }
    return INF;
}
main(){
    cin >> n;
    for(int i = 1; i <= n; i ++){
        cin >> a[i];
        int x = a[i];
        for(int j = 63; j >= 0; j --){
            if(1ll << j & x)bit[j].push_back(i);
            if(bit[j].size() > 2){
                cout << "3\n";
                return 0;
            }
        }
    }
    for(int i = 0; i <= 63; i ++){
        if(bit[i].size() > 1){
            int x = bit[i][0], y = bit[i][1];
            if(mp[{x, y}])continue;
            bool ok1 = true, ok2 = true;
            for(int i = 0; i < v.size(); i ++){
                if(v[i] == x) ok1 = false;
                if(v[i] == y) ok2 = false;
            }
            edges[x].push_back(y);
            edges[y].push_back(x);
            mp[{x, y}] = mp[{y, x}] = 1;
            if(ok1)v.push_back(x);
            if(ok2)v.push_back(y);
        }
    }
    for(int i = 0; i < v.size(); i ++){
        for(int j = 0; j < edges[v[i]].size(); j ++){
            ans = min(ans, bfs(v[i], edges[v[i]][j])); 
            for(int k = 0; k < v.size(); k ++)fix[v[k]] = 0;
        }
    }
    if(ans == INF)ans = -1;
    cout << ans << '\n';
}  