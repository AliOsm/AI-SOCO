#include <bits/stdc++.h>
using namespace std;

int n;
int x[1005][1005], y[1005][1005];
char G[1005][1005];

void dfs(int l, int r, char c)
{
	if(G[l][r] != '.') return;
	G[l][r] = c;
	if(x[l][r] == x[l + 1][r] and y[l][r] == y[l + 1][r])
		dfs(l + 1, r, 'U');
	if(x[l][r] == x[l - 1][r] and y[l][r] == y[l - 1][r])
		dfs(l - 1, r, 'D');
	if(x[l][r] == x[l][r + 1] and y[l][r] == y[l][r + 1])
		dfs(l, r + 1, 'L');
	if(x[l][r] == x[l][r - 1] and y[l][r] == y[l][r - 1])
		dfs(l, r - 1, 'R');
}

int32_t main()
{
	cin >> n;
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++)
			scanf(" %d %d", &x[i][j], &y[i][j]);

	memset(G, '.', sizeof(G));
	
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++)
			if(x[i][j] == i and y[i][j] == j)
				dfs(i, j, 'X');
			else if(x[i][j] == -1 and y[i][j] == -1)
			{
				int l = i, r = j;
				char c = '.';
				if(x[l][r] == x[l + 1][r] and y[l][r] == y[l + 1][r])
					c = 'D';
				if(x[l][r] == x[l - 1][r] and y[l][r] == y[l - 1][r])
					c = 'U';
				if(x[l][r] == x[l][r + 1] and y[l][r] == y[l][r + 1])
					c = 'R';
				if(x[l][r] == x[l][r - 1] and y[l][r] == y[l][r - 1])
					c = 'L';
				if(c == '.') return puts("INVALID"), 0;
				dfs(i, j, c);
			}
	
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++)
			if(G[i][j] == '.')
				return puts("INVALID"), 0;
				
	puts("VALID");
	for(int i = 1; i <= n; i++)
	{
		for(int j = 1; j <= n; j++)
			printf("%c", G[i][j]);
		puts("");
	}
				
	return 0;
}