// amiD
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define endl '\n'
#define Endl '\n'
#define fi first
#define ii pair<ll,ll>
#define se second
#define ld long double
#define mod 1000000007
#define popcount __builtin_popcountll
#define PI acos(-1.0)
using namespace std;
int n;
vector<int>v[100010];
bool done[100010];
int siz[100010];
int par[100010];
void cal(int node, int p){
    par[node]=p;
    siz[node]=1;
    int sz=v[node].size();
    for(int i=0;i<sz;i++){
        int nx=v[node][i];
        if(nx!=p && !done[nx]){
            cal(nx, node);
            siz[node]+=siz[nx];
        }
    }
}
int get(int node){
    int centroid=node, mx=siz[node];
    queue<int>q;
    // cout<<node<<"        sdcs       "<<mx<<endl;
    q.push(node);
    while(!q.empty()){
        int cur=q.front();
        q.pop();
        int sz=v[cur].size();
        int s=siz[node]-siz[cur];
        for(int i=0;i<sz;i++){
            int nx=v[cur][i];
            if(nx==par[cur] || done[nx])continue;
            q.push(nx);
            s=max(s, siz[nx]);
        }
        if(s<mx){
            mx=s;
            centroid=cur;
        }
    }
    return centroid;
}
int cnt[505];
int k;
vector<int>vv;
void dfs(int node, int p, int c){
    if(c>k)return;
    vv.pb(c);
    int sz=v[node].size();
    for(int i=0;i<sz;i++){
        int nx=v[node][i];
        if(nx!=p && !done[nx]){
            dfs(nx, node, c+1);
        }
    }
}
ll solve(int node){
    for(int i=0;i<=k;i++)cnt[i]=0;
    ll ret=0;
    cnt[0]=1;
    int sz=v[node].size();
    for(int i=0;i<sz;i++){
        int nx=v[node][i];
        if(done[nx])continue;
        vv.clear();
        dfs(nx,nx,1);
        int szz=vv.size();
        for(int j=0;j<szz;j++){
            int x=vv[j];
            ret+=cnt[k-x];
        }
        for(int j=0;j<szz;j++){
            int x=vv[j];
            cnt[x]++;
        }
    }
    return ret;
}
ll go(int node){
    cal(node, node);
    int centroid=get(node);
    // cout<<"centroid is "<<centroid<<endl;
    done[centroid]=1;
    ll ret=solve(centroid);
    int sz=v[centroid].size();
    for(int i=0;i<sz;i++){
        int nx=v[centroid][i];
        if(!done[nx])ret+=go(nx);
    }
    return ret;
}
int main(){
    cin>>n>>k;
    for(int i=1;i<n;i++){
        int x, y;
        scanf("%d%d",&x, &y);
        v[x].pb(y);
        v[y].pb(x);
    }
    ll amid=go(1);
    cout<<amid<<endl;
}
