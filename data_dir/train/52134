///*** One Last Try ***///
#include<bits/stdc++.h>
using namespace std;
#pragma comment(linker, "/stack:200000000")
#define ll long long int
#define inf ( int )( 1e9 + 1e9 )
#define mxs (int)( 1e6 + 10 )
#define md  int mid = ( l + r )>>1;
#define mod (ll)(1e9)+7
//int dx[]={+1,0,+0,-1};///Four Directions
//int dy[]={+0,-1,+1,+0};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
ll t, n, m, j, ans, k,a, b, c, d, e,f ,sum , i,sz,cases ;
string s, s2, s3, s4;
vector < ll > graph [ mxs ];
ll ar [ mxs ] , ar2 [ mxs ] , ar3 [ mxs ] , parent [ mxs ] ;
void brainfuck();
ll dfs( ll source , ll pre )
{
    //cout<<source<<endl;
    ll szz = graph [ source ].size();
    if ( !szz && ar [ source ] == -1 )
    {
        ar2 [ source ] = 0;
        return 0;
    }
    if ( ar [ source ] != -1 && ar [ source ] < pre )return -1;
    ll cc = INT_MAX , dd;
    for ( ll ii = 0 ; ii < szz; ii++ )
    {
        ll bb = graph [ source ] [ ii ];
        cc = min( cc , ar [ bb ] );
    }
    //cout<<source<<"  "<<cc<<" lol\n";
    if ( source == 1 )ar2 [ source ] = ar [ 1 ];
    else if ( ar [ source ] == -1 && cc < ar [ parent [ source ] ] )return -1;
    else if( ar [ source ] == -1 )ar2 [ source ] = cc - ar [ parent [ source ] ] ;
    else ar2 [ source ] = ar [ source ] - ar [ parent [ source ] ];
    if ( ar [ source ] == -1 )ar [ source ] = ar2 [ source ] + ar [ parent [ source ] ];
    for ( ll ii = 0 ; ii < szz; ii++ )
    {
        ll bb = graph [ source ] [ ii ];
        cc = dfs( bb , pre + ar2 [ source ] );
        if ( cc == -1 )return -1;
    }
    //cout<<source<<"  "<<ar2 [ source ]<<" "<<pre<<endl;
    if ( ar [ source ] != -1 && pre + ar2 [ source ] != ar [ source ] )return -1;
    return 0;
}
int main()
{
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>n;
    parent [ 1 ] = 1;
    for ( i = 2; i <= n; i++ )
    {
        cin>>a;
        graph [ a ].push_back( i );
        parent [ i ] = a;
    }
    for ( i = 1 ; i <= n; i++ )cin>>ar [ i ];
    a = dfs( 1 , 0 );
    if ( a == -1 )cout<<"-1";
    else
    {
        a = 0;
        //for ( i = 1 ; i <= n; i++ )cout<<ar2 [ i ]<<" ";
        for ( i = 1 ; i <= n; i++ )a += ar2 [ i ];
        cout<<a;
    }
}
