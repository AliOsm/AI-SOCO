#include <bits/stdc++.h>
using namespace std;


template <int mod>
struct ModInt {
  int val;
  int trim(int x) const { return x >= mod ? x - mod : x < 0 ? x + mod : x; }
  ModInt(int v = 0) : val(trim(v % mod)) {}
  ModInt(long long v) : val(trim(v % mod)) {}
  ModInt &operator=(int v) { return val = trim(v % mod), *this; }
  ModInt &operator=(const ModInt &oth) { return val = oth.val, *this; }
  ModInt operator+(const ModInt &oth) const { return trim(val + oth.val); }
  ModInt operator-(const ModInt &oth) const { return trim(val - oth.val); }
  ModInt operator*(const ModInt &oth) const { return 1LL * val * oth.val % mod; }
  ModInt operator/(const ModInt &oth) const {
    function<int(int, int, int, int)> modinv = [&](int a, int b, int x, int y) {
      if (b == 0) return trim(x);
      return modinv(b, a - a / b * b, y, x - a / b * y);
    };
    return *this * modinv(oth.val, mod, 1, 0);
  }
  bool operator==(const ModInt &oth) const { return val == oth.val; }
  ModInt operator-() const { return trim(mod - val); }
  template<typename T> ModInt pow(T pw) {
    bool sgn = false;
    if (pw < 0) pw = -pw, sgn = true;
    ModInt ans = 1;
    for (ModInt cur = val; pw; pw >>= 1, cur = cur * cur) {
      if (pw&1) ans = ans * cur;
    }
    return sgn ? ModInt{1} / ans : ans;
  }
};

using mint = ModInt<int(1e9 + 7)>;

int main () {
  ios_base::sync_with_stdio(false); cin.tie(0);
  long long n, l, k; cin >> n >> l >> k;
  vector<vector<mint>> dp(k + 1, vector<mint>(n, 0));
  vector<int> a(n), b;
  for (int i = 0; i < n; ++i) cin >> a[i];
  b = a;
  sort(b.begin(), b.end());
  fill(dp[1].begin(), dp[1].end(), mint(1));
  for (int i = 2; i <= k; ++i) {
    mint acc = 0;
    for (int j = 0, l = 0; j < n; ) {
      while (l < n and b[l] == b[j]) acc = acc + dp[i - 1][l], ++l;
      while (j != l) dp[i][j] = acc, ++j;
    }
  }
  mint ans = l % n;
  for (int i = 1; i <= k; ++i) {
    ans = ans + accumulate(dp[i].begin(), dp[i].end(), mint(0)) * 
          mint(max(0ll, l / n - i + 1));
  }


  vector<mint> ch(n, mint(0)), pch(n + 1, mint(0));
  for (int i = 0; i < n; ++i) {
    for (int j = 1; j <= min(k - 1, l / n); ++j) {
      ch[i] = ch[i] + dp[j][i];
    }
  }
  for (int i = 0; i < n; ++i) pch[i + 1] = pch[i] + ch[i]; 
  for (int j = 0; j < l % n; ++j) {
    int i = upper_bound(b.begin(), b.end(), a[j]) - b.begin();
    ans = ans + pch[i];
  }
  cout << ans.val << '\n';
}

