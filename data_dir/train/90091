#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     std::begin(_obj), std::end(_obj)
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
    #define debug(_x)                 std::cerr << (#_x) << " = " << (_x) << '\n'; std::cerr.flush();
#else
    #define debug(_x)                 ;
#endif
#define endl                          "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = int64_t;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
ll arr[100];

inline int Add(int x, int y) {
    return (ll(x) + y) % MOD;
}

inline int Mul(int x, int y) {
    return 1LL * x * y % MOD;
}

struct TMatr {
    int Size;
    int Data[100][100];

    TMatr(int n)
        : Size(n)
    {
        memset(Data, 0, sizeof(Data));
    }

    static TMatr E(int n) {
        TMatr res(n);
        loop(n) {
            res.Data[i][i] = 1;
        }
        return res;
    }
};

TMatr operator*(const TMatr& lhs, const TMatr& rhs) {
    const int n = lhs.Size;
    TMatr res(n);
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            for (int k = 0; k < n; ++k) {
                res.Data[i][j] = Add(res.Data[i][j], Mul(lhs.Data[i][k], rhs.Data[k][j]));
            }
        }
    }
    return res;
}

template<typename TType>
TType FastPow(TType x, ll p, TType e) {
    TType res = e;
    while (p) {
        if (p & 1) {
            res = res * x;
        }
        p >>= 1;
        x = x * x;
    }
    return res;
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int n;
    ll k;
    cin >> n >> k;
    TMatr can = TMatr::E(n);
    loop(n) {
        cin >> arr[i];
        for (int j = 0; j < i; ++j) {
            can.Data[i][j] = can.Data[j][i] = __builtin_popcountll(arr[i] ^ arr[j]) % 3 == 0;
        }
    }
    TMatr g = FastPow(can, k - 1, TMatr::E(n));
    int ans = 0;
    loop(n) {
        for (int j = 0; j < n; ++j) {
            ans = Add(ans, g.Data[i][j]);
        }
    }
    cout << ans << endl;

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}