#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>

using namespace std;
void Emsawy(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
}

#define sz(v)			((int)((v).size()))
#define all(v)			((v).begin()), ((v).end())
#define allr(v)			((v).rbegin()), ((v).rend())
#define clr(v,d)		memset(v, d, sizeof(v))
#define sf(x)			scanf("%d", &x)
#define sf2(x,y)		scanf("%d %d", &x, &y)
#define sf3(x,y,z)		scanf("%d %d %d", &x, &y, &z)
#define sfll(x)			scanf("%I64d", &x)
#define sfll2(x,y)		scanf("%I64d %I64d", &x, &y)
#define sfll3(x,y,z)		scanf("%I64d %I64d %I64d", &x, &y, &z)
#define angle(a)		(atan2((a).imag(), (a).real()))
#define vec(a,b)		((b)-(a))
#define length(a)		(hypot((a).imag(), (a).real()))
#define dp(a,b)			((conj(a)*(b)).real()) // if zero prep
#define cp(a,b)			((conj(a)*(b)).imag()) // if zero parl
#define same(p1,p2)		(dp(vec(p1,p2),vec(p1,p2)) <= EPS)
#define rotate0(p,ang)		((p)*exp(Point(0,ang)))
#define rotateA(p,ang,about)	(rotate0(vec(about,p),ang)+about)
#define reflect0(v,m)		(conj((v)/(m))*(m))
#define normalize(a)		(a)/length(a)
#define lengthSqr(p)		dp(p,p)
#define pii			pair<int,int>
#define V			vector
#define MP			make_pair
#define X			real()
#define Y			imag()

typedef complex<double> 	point;
typedef long long ll;

const double PI = acos(-1.0);
const double EPS = 1e-10;
const ll mod = ll(1e9 + 7), oo = ll(1e9);

V<V<int > > adj;
int n, m, k, c;


int sp[1 << 21][21], dis[1 << 21];

void dfs(int u,int par = -1){
	for (int v : adj[u]){
		if (v == par) continue;
		dis[v] = dis[u] + 1;
		sp[v][0] = u;
		dfs(v, u);
	}
}

void build(){
	dfs(1, 0);
	for (int j = 1; (1 << j) <= n; j++)
		for (int i = 1; i <= n; i++)
				sp[i][j] = sp[sp[i][j - 1]][j - 1];	
}

int lca(int p, int q){
	if (dis[p] < dis[q]) swap(q, p);
	for (int i = 20; i >= 0; i--){
		if (dis[p] - (1 << i) >= dis[q])
			p = sp[p][i];
	}
	if (p == q) return p;
	for (int i = 20; i >= 0; i--){
		if (sp[p][i] != sp[q][i])
			p = sp[p][i], q = sp[q][i];
	}
	return sp[p][0];
}

void inputs(){
	adj.clear();
	adj.resize(n + 1);
	int u, v;
	for (int i = 2; i <= n; i++){
		sf(u);
		v = i;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	build();
}
int dist(int a, int b){
	int lc = lca(a, b);
	return dis[a] - dis[lc] + dis[b] - dis[lc];
}
int solve(tuple<int, int, int> x){
	int s, f, t;
	tie(s, f, t) = x;
	return (dist(s, f) + dist(f, t) - dist(s, t) + 1) / 2;
}
int main()
{
	Emsawy();
	while (cin >> n >> m){
		inputs();
		int a, b, c;
		V<tuple<int, int, int> > query;
		for (int i = 0; i < m; i++){
			sf3(a, b, c);
			query.push_back(make_tuple(a, b, c));
			query.push_back(make_tuple(b, c, a));
			query.push_back(make_tuple(c, a, b));
		}
		for (int i = 0; i < query.size(); i+= 3){
			int mx = 0;
			mx = max(mx, solve(query[i]));
			mx = max(mx, solve(query[i + 1]));
			mx = max(mx, solve(query[i + 2]));
			cout << mx + 1 << endl;
		}
	}
	return 0;
}