#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
 
#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2
 
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound
 
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;
 
template <class T1, class cmp = less <T1>> using Tree = tree <T1, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2> using um = unordered_map <T1, T2>;
template <class T> using us = unordered_set <T>;
template <class T> using vec = vector <T>;
 
const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 1e5 + 1;
int n, cur;

struct Graph {
    int par[N];
    pii ans[N];
    vec <int> adj[N];
} graph;

void input() {
    cin >> n; cur = n - 1;
    for(int i = 1; i < n; ++i) {
        int u; cin >> u;
        int v; cin >> v;
        graph.adj[u].pb(v);
        graph.adj[v].pb(u);
    }
}

void dfs(int u, int x, int y, int p) {
    graph.ans[u] = {x, y};
    int ind = 0;
    for(int v: graph.adj[u]) {
        if(graph.par[u] == v) {
            continue;
        }
        graph.par[v] = u;
        if(ind == p) ind++;
        if(ind == 0) {
            dfs(v, x + (1 << cur--), y, 1);
        } else if(ind == 1) {
            dfs(v, x - (1 << cur--), y, 0);
        } else if(ind == 2) {
            dfs(v, x, y + (1 << cur--), 3);
        } else if(ind == 3) {
            dfs(v, x, y - (1 << cur--), 2);
        }
        ind++;
    }
}

void solve() {
    for(int i = 1; i <= n; ++i) {
        if(len(graph.adj[i]) > 4) {
            cout << "NO\n";
            return;
        }
    }
    dfs(1, 0, 0, -1);
    cout << "YES\n";
    for(int i = 1; i <= n; ++i) {
        cout << graph.ans[i].xx << " " << graph.ans[i].yy << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
