#include <iostream>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

const int limite=1000000;

typedef long long int ll;

ll sq(ll x)
{
  return x*x;
}

int esprimo[limite];
vector<int> primo;

vector<int> get(int x)
{
  int sign=1;
  if (x<0) {
    sign=0;
    x=-x;
  }
  vector<int> sol;
  for (int i=0;i<int(primo.size()) and sq(primo[i])<=x;i++) {
    int p=primo[i];
    int e=0;
    for (;x%p==0;e++,x/=p) ;
    if (e%2) sol.push_back(p);
  }
  if (x>1) sol.push_back(x);
  sol.push_back(sign);
  return sol;
}

int n;
int v[limite];
vector<int> v2v[limite];
int v2c[limite];
int sol[limite];
int amount[limite];
int ndif;
map<vector<int>,int> mapa;
int nc=0;

void write(vector<int> v)
{
  for (int i=0;i<int(v.size());i++)
    cout<<v[i]<<",";
  cout<<endl;
}

int main()
{
  for (int i=2;i<limite;i++)
    esprimo[i]=1;
  for (int i=2;i<limite;i++) {
    if (esprimo[i]) {
      primo.push_back(i);
      for (int j=i+i;j<limite;j+=i)
	esprimo[j]=0;
    }
  }
  cin>>n;
  for (int i=1;i<=n;i++) {
    cin>>v[i];
    if (v[i]!=0) {
      v2v[i]=get(v[i]);
      //write(v2v[i]);
      mapa[v2v[i]];
    }
  }
  {
    for (map<vector<int>,int>::iterator it=mapa.begin();it!=mapa.end();it++,nc++)
      it->second=nc;
  }
  for (int i=1;i<=n;i++)
    if (v[i]!=0)
      v2c[i]=mapa[v2v[i]];
  /*
  cout<<"v2c: ";
  for (int i=1;i<=n;i++)
    cout<<v2c[i]<<",";
  cout<<endl;
  */
  for (int i=1;i<=n;i++) {
    for (int j=0;j<nc;j++)
      amount[j]=0;
    ndif=0;
    for (int j=i;j<=n;j++) {
      if (v[j]!=0) {
	int c=v2c[j];
	if (not amount[c]) ndif++;
	amount[c]++;
      }
      if (ndif<=1) sol[1]++;
      else sol[ndif]++;
    }
  }
  for (int i=1;i<=n;i++) {
    if (i>1) cout<<" ";
    cout<<sol[i];
  }
  cout<<endl;
}
