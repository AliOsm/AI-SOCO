// Aggressive Play

#include<bits/stdc++.h>
#define ll long long
#define F first
#define S second
using namespace std;

void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(long long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\"' << x << '\"';}
void __print(const string &x) {cerr << '\"' << x << '\"';}
void __print(bool x) {cerr << (x ? "true" : "false");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}
void _print() {cerr << "]\n";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}
#ifndef ONLINE_JUDGE
#define debug(x...) cerr << "[" << #x << "] = ["; _print(x)
#else
#define debug(x...)
#endif

const int N = 1e6 + 5;
int n, m;
string s[N];
vector<int> v[N];

bool isValid(int x, int y){
    return(x >= 0 && y >= 0 && x < n && y < m && s[x][y] == '.');
}
vector<pair<int, int> > get(int dx, int dy){
    int x = n - 1, y = m - 1;
    vector<pair<int, int> > ret;
    while(x || y){
        ret.push_back({x, y});
        if(isValid(x - dx, y - dy) && v[x - dx][y - dy]){
            x = x - dx, y = y - dy;
            continue;
        }
        x = x - dy, y = y - dx;
    }
    ret.push_back({0, 0});
    reverse(ret.begin(), ret.end());
    return ret;
}
int main()
{
    ios_base ::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    cin >> n >> m;
    for(int i = 0; i < n; i++){
        cin >> s[i];
        v[i].resize(m, 0);
    }
    v[0][0] = 1;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            v[i][j] |= (isValid(i, j) && ((isValid(i - 1, j) && v[i - 1][j]) || (isValid(i, j - 1) && v[i][j - 1])));
        }
    }
    if(v[n - 1][m - 1] == 0)
        return cout << 0, 0;

    vector<pair<int, int> > x = get(1, 0);  // x dominating
    vector<pair<int, int> > y = get(0, 1);  // y dominating
    vector<pair<int, int> > w = x;  // we just want to allocate max space to it.
    auto it = set_intersection(x.begin(), x.end(), y.begin(), y.end(), w.begin());  // iterator to 1 next to the last element, or let's say w.end()
    if(it != w.begin() + 2){    // if intersecting at more than 2 places. (2 places is  at least there (0, 0), (n - 1, m - 1))
        cout << 1;
    }
    else{
        cout << 2;
    }
return 0;
}
