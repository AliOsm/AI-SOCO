#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

int main() {
  int m, n;
  scanf("%d%d", &m, &n);
  vector<vector<int>> a(n, vector<int>(m));
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      scanf("%d", &a[i][j]);
    }
  }
  vector<ii> A(n);
  vector<int> ret;
  for (int j = 0; j < m - 1; ++j) {
    for (int i = 0; i < n; ++i) {
      A[i] = {a[i][m - 1] - a[i][j], i};
    }
    sort(A.begin(), A.end());
    int sum = 0;
    vector<int> cur;
    for (int i = 0; i < n; ++i) {
      if (sum + A[i].first > 0) break;
      sum += A[i].first;
      cur.push_back(A[i].second);
    }
    if (cur.size() > ret.size()) {
      swap(ret, cur);
    }
  }
  vector<bool> visit(n);
  for (auto& it : ret) visit[it] = true;
  vector<int> ret2;
  for (int i = 0; i < n; ++i) if (!visit[i]) ret2.push_back(i + 1);
  printf("%d\n", (int)ret2.size());
  for (int i = 0; i < (int)ret2.size(); ++i) {
    printf("%d%c", ret2[i], " \n"[i + 1 == ret2.size()]);
  }
  return 0;
}
