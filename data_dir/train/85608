#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <list>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> ii;
typedef vector<int> vi;

#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(),(x).end()
#define clr(t,v) memset((t),(v),sizeof(t))

const int inf=1999999999;
const double pi=acos(-1.0);
const double eps=1e-10;
char gc(){char c;while(isspace(c=getchar()));return c;}
int gs(char* s){gets(s);int l=strlen(s);while(l && isspace(s[l-1]))s[--l]=0;return l;}

map<string,int> m;
string str[50];
int geti(string& s)
{
    map<string,int>::iterator it=m.find(s);
    if(it!=m.end())
        return it->second;
    int t=m.size();
    m[s]=t;
    str[t]=s;
    return t;
}
struct cmp
{
    int win,ptn,o;
    vi winn;
    cmp():
        win(0),
        ptn(0),
        winn(50,0)
    {}
};
bool comp1(cmp& a,cmp& b)
{
    if(a.ptn!=b.ptn)
        return a.ptn>b.ptn;
    if(a.win!=b.win)
        return a.win>b.win;
    return a.winn>b.winn;
}
bool comp2(cmp& a,cmp& b)
{
    if(a.win!=b.win)
        return a.win>b.win;
    if(a.ptn!=b.ptn)
        return a.ptn>b.ptn;
    return a.winn>b.winn;
}
cmp drivers[1000];
int pts[50]={25, 18, 15, 12, 10, 8, 6, 4, 2, 1};
int main()
{
//  freopen("i.txt","r",stdin); freopen("o.txt","w",stdout);
    int t;
    cin>>t;
    for(int i=0;i<t;i++)
    {
        int n;
        cin>>n;
        for(int j=0;j<n;j++)
        {
            string s;
            cin>>s;
            int a=geti(s);
            drivers[a].ptn+=pts[j];
            if(j==0)
                drivers[a].win++;
            drivers[a].winn[j]++;
        }
    }
    cmp best=drivers[0];
    string bests=str[0];
    for(int i=0;i<1000;i++)
    {
        if(comp1(drivers[i],best))
        {
            best=drivers[i];
            bests=str[i];
        }
    }
    cout<<bests<<'\n';
    best=drivers[0];
    bests=str[0];
    for(int i=0;i<1000;i++)
    {
        if(comp2(drivers[i],best))
        {
            best=drivers[i];
            bests=str[i];
        }
    }
    cout<<bests<<'\n';
}
