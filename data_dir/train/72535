#include <iostream>
#include <fstream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <bitset>
#include <algorithm>
#include <complex>
#include <array>
using namespace std;
 
#define REP(i,n) for(int i=0; i<n; ++i)
#define FOR(i,a,b) for(int i=a; i<=b; ++i)
#define FORR(i,a,b) for (int i=a; i>=b; --i)
#define ALL(c) (c).begin(), (c).end()
 
typedef long long ll;
typedef vector<int> VI;
typedef vector<ll> VL;
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef pair<int,int> P;
typedef pair<ll,ll> PL;
typedef vector<double> VD;
typedef vector<VD> VVD;

template<typename T> void chmin(T &a, T b) { if (a > b) a = b; }
template<typename T> void chmax(T &a, T b) { if (a < b) a = b; }

int in() { int x; scanf("%d", &x); return x; }
ll lin() { ll x; scanf("%lld", &x); return x; }

int main() {
    int n, m;
    cin >> n >> m;
    VI a(n);
    int sum = 0;
    REP(i,n){
        a[i] = in();
        sum += a[i];
    }
    vector<set<int>> ds(n);
    REP(i,m){
        int p = in() - 1, q = in() - 1;
        ds[q].insert(p);
    }

    int ok = 2 * sum, ng = sum - 1;
    while (ok - ng > 1){
        int x = (ok + ng) / 2;
        VI p(x);
        REP(i,n){
            auto itr = ds[i].lower_bound(x);
            if (itr == ds[i].begin()) continue;
            itr--;
            p[*itr] += a[i];
        }
        // cout << x << endl;
        // REP(i,x){
        //     cout << p[i] << " ";
        // }
        // cout << endl;
        int cnt = 0;
        REP(i,x){
            int r = min(p[i], i + 1 - cnt);
            cnt += r;
        }
        if (cnt + 2 * (sum - cnt) <= x) ok = x;
        else ng = x;
    }
    cout << ok << endl;
    return 0;
}
