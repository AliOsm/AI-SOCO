/*
digu_J - Digvijay Janartha
NIT Hamirpur - INDIA
*/

#include <bits/stdc++.h>
using namespace std;

typedef double db;
typedef long long ll;
typedef pair < ll, ll > pll;
typedef vector < ll > vll;
typedef map < ll, ll > mll;
typedef set < ll > sll;
typedef vll lnum;

#define pb push_back
#define F first
#define S second
#define debug(x) cout << (#x) << " is " << (x) << endl
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const ll INF = LLONG_MAX;
const ll base = 1e9;
const db PI = acos(-1);
const ll MOD = 1e9 + 7;
const ll N = 1e5 + 10;

vll g[N];
ll n, s[N], w[N], p[N], d[N], mn[N];
bool vis[N];

void solve();
void bfs(ll s);
void find_min(ll s);

int main() {
    fast_io();
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
        for (int i = 0; i < 1; ++i) {
            solve();
        }
    #endif
    #ifdef ONLINE_JUDGE
        solve();
    #endif
    #ifndef ONLINE_JUDGE
            cout << "Time: " << (int)(clock() * 1000. / CLOCKS_PER_SEC) << "ms";
    #endif
    return 0;
}

void solve() {
    cin >> n;
    for (ll i = 0, x; i < n - 1; ++i) {
        cin >> x;
        g[x].pb(i + 2);
        g[i + 2].pb(x);
    }
    for (ll i = 1; i <= n; ++i) {
        cin >> s[i];
    }
    find_min(1);
    bfs(1);
    return;
}

void find_min(ll k) {
    fill(mn, mn + n + 1, INF);
    queue < ll > q;
    q.push(k);
    vis[k] = true;
    d[k] = 1;
    while (!q.empty()) {
        ll v = q.front();
        q.pop();
        for (auto &x : g[v]) {
            if (!vis[x]) {
                vis[x] = true;
                q.push(x);
                d[x] = d[v] + 1;
                if (d[x] & 1) {
                    mn[v] = min(mn[v], s[x]);
                }
            }
        }
    }
    return;
}

void bfs(ll k) {
    fill(vis, vis + n + 1, false);
    queue < ll > q;
    q.push(k);
    vis[k] = true;
    p[k] = -1;
    w[k] = s[k];
    while (!q.empty()) {
        ll v = q.front();
        q.pop();
        for (auto &x : g[v]) {
            if (!vis[x]) {
                vis[x] = true;
                q.push(x);
                p[x] = v;
                if (d[x] & 1) {
                    if (s[x] < s[p[v]]) {
                        cout << "-1\n";
                        return;
                    }
                    w[v] = mn[v] - s[p[v]];
                    w[x] = s[x] - mn[v];
                }
            }
        }
    }
    ll ans  = 0;
    for (ll i = 1; i <= n; ++i) {
        ans += w[i];
    }
    cout << ans << "\n";
    return;
}
