#include <bits/stdc++.h>

using namespace std;

const long long INF = 1e18;

long long n, m, k, q;
long long dp[200002][2], v[200002][2], b[200002], aux;

long long func (int i, int x, int j, int y) {
  long long t1, t2;
  t1 = t2 = INF;
  int p = lower_bound(b + 1, b + q + 1, v[j][y]) - b;
  if (p <= q)
    t1 = abs(v[j][y] - b[p]) + abs(v[i][x] - v[i][1 - x]) + abs(b[p] - v[i][1 - x]);
  p = upper_bound(b + 1, b + q + 1, v[j][y]) - b - 1;
  if (p)
    t2 = abs(v[j][y] - b[p]) + abs(v[i][x] - v[i][1 - x]) + abs(b[p] - v[i][1 - x]);
  return min(t1, t2);
}

int main()
{
  cin >> n >> m >> k >> q;
  for (int i = 1; i <= k; i++) {
    long long x, y;
    cin >> x >> y;
    if (!v[x][0])
      v[x][0] = v[x][1] = y;
    else {
      v[x][1] = max(v[x][1], y);
      v[x][0] = min(v[x][0], y);
    }
  }
  for (int i = 1; i <= q; i++)
    cin >> b[i];
  sort(b + 1, b + q + 1);
  aux = v[1][0];
  v[1][0] = 1; v[1][1] = max(1ll, v[1][1]);
  for (int i = 1; i <= n; i++)
    dp[i][0] = dp[i][1] = INF;
  dp[1][0] = (v[1][1] - 1) + (v[1][1] - 1);
  dp[1][1] = (v[1][1] - 1);
  int last = 1;
  for (int i = 2; i <= n; i ++) {
    if (v[i][0] == 0)
      continue;
    for (int x = 0; x < 2; x++)
      for (int y = 0; y < 2; y++)
        dp[i][x] = min(dp[i][x], dp[last][y] + func(i, x, last, y) + i - last);
    last = i;
  }
  cout << min(dp[last][0], dp[last][1]);
  return 0;
}
