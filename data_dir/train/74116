#include <bits/stdc++.h>
using namespace std;/*
int n,m,seg[1200009],arr[300009];
void laz(int pos,int lo,int hi)
{
    if(!seg[pos])return;
    if(lo==hi)
    {
        if(arr[lo])return;
        if(lo==seg[pos]-1)return;
        else arr[lo]=seg[pos];
        seg[pos]=0;
        return;
    }
    int mid=(lo+hi)/2;
    laz(2*pos+1,lo,mid);
    seg[2*pos+1]=seg[pos];
    laz(2*pos+2,mid+1,hi);
    seg[2*pos+2]=seg[pos];
    seg[pos]=0;
    return;
}
void upd(int pos,int lo,int hi,int b,int e,int val)
{
    laz(pos,lo,hi);
    if(b<=lo&&hi<=e)
    {
        seg[pos]=val;
        return;
    }
    int mid=(lo+hi)/2;
    if(b<=mid)upd(2*pos+1,lo,mid,b,e,val);
    if(mid<e)upd(2*pos+2,mid+1,hi,b,e,val);
    return;
}
void build(int pos,int lo,int hi)
{
    laz(pos,lo,hi);
    if(lo==hi)return;
    int mid=(lo+hi)/2;
    build(2*pos+1,lo,mid);
    build(2*pos+2,mid+1,hi);
    return;
}
void nod(int pos,int lo,int hi,int nd)
{
    laz(pos,lo,hi);
    if(lo==hi)
        return;
    int mid=(lo+hi)/2;
    if(nd<=mid)nod(2*pos+1,lo,mid,nd);
    else nod(2*pos+2,mid+1,hi,nd);
    return;
}
int x,y,z;
int main()
{
    //memset(arr,-1,sizeof(arr));
    cin>>n>>m;
    for(int i=0; i<m; i++)
    {
        scanf("%d %d %d", &x, &y, &z);
        x--;
        y--;
        upd(0,0,n-1,x,y,z);
    }
    build(0,0,n-1);
    for(int i=0; i<n; i++)
    {
        //nod(0,0,n-1,i);
        printf("%d ",arr[i]);
    }
}*/

set<int> alive;
int n,m,answer[300009];
int main()
{
    cin>>n>>m;
    memset(answer,-1,sizeof(answer));
    for (int i = 0; i < n; i++)
        alive.insert(i);

    for (int i = 0; i < m; i++)
    {
        int l, r, x;
        scanf("%d%d%d", &l, &r, &x);
        l--, r--, x--;
        set<int>::iterator it = alive.lower_bound(l);
        vector<int> toErase;
        while(it != alive.end())
        {
            int cur = *it;
            if(cur > r)
                break;
            if(cur != x)
            {
                toErase.push_back(cur);
                answer[cur] = x;
            }
            it++;
        }

        for (size_t j = 0; j < toErase.size(); j++)
            alive.erase(toErase[j]);
    }
    for(int i=0;i<n;i++)
    {
        printf("%d ", answer[i]+1);
    }
}
