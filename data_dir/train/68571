#include <bits/stdc++.h>

using namespace std;

class segtree {
  struct node {
    node(long long x = -1e18) : val(x) {}
    long long val, lz = 0;
    void apply(int l, int r, long long x) {
      val += x, lz += x;
    }
  };

  node merge(const node& a, const node& b) const {
    return node(max(a.val, b.val));
  }

  int n;
  vector<node> t;

  void push(int v, int l, int r) {
    int m = l + r >> 1;
    t[v << 1].apply(l, m, t[v].lz);
    t[v << 1 | 1].apply(m + 1, r, t[v].lz);
    t[v].lz = 0;
  }

  template<typename... M> void modify(int v, int tl, int tr, int l, int r, const M&... m) {
    if (l <= tl and tr <= r) {
      t[v].apply(tl, tr, m...);
      return;
    }
    if (tl > r or l > tr) {
      return;
    }
    push(v, tl, tr);
    int tm = tl + tr >> 1;
    modify(v << 1, tl, tm, l, r, m...), modify(v << 1 | 1, tm + 1, tr, l, r, m...);
    t[v] = merge(t[v << 1], t[v << 1 | 1]);
  }

  node get(int v, int tl, int tr, int l, int r) {
    if (l <= tl and tr <= r) {
      return t[v];
    }
    if (tl > r or l > tr) {
      return node();
    }
    push(v, tl, tr);
    int tm = tl + tr >> 1;
    return merge(get(v << 1, tl, tm, l, r), get(v << 1 | 1, tm + 1, tr, l, r));
  }

  node getElem(int v, int tl, int tr, int k) {
    if (tl == tr) {
      return t[v];
    }
    push(v, tl, tr);
    int tm = tl + tr >> 1;
    if (k <= tm) {
      return getElem(v << 1, tl, tm, k);
    } else {
      return getElem(v << 1 | 1, tm + 1, tr, k);
    }
  }

public:
  segtree(int _n) {
    int p = 1;
    while ((1 << p) < _n) {
      ++p;
    }
    n = 1 << p;
    t.resize(n << 1);
    for (int i = n - 1; i >= 1; --i) {
      t[i] = merge(t[i << 1], t[i << 1 | 1]);
    }
  }

  template<class T> segtree(const vector<T>& a) {
    int p = 1;
    while ((1 << p) < a.size()) {
      ++p;
    }
    n = 1 << p;
    t.resize(n << 1);
    for (int i = 0; i < a.size(); ++i) {
      t[i + n] = a[i];
    }
    for (int i = n - 1; i >= 1; --i) {
      t[i] = merge(t[i << 1], t[i << 1 | 1]);
    }
  }

  template<typename... M> void modify(int l, int r, const M&... m) {
    modify(1, 0, n - 1, l, r, m...);
  }

  node get(int l, int r) {
    return get(1, 0, n - 1, l, r);
  }

  node getElem(int k) {
    return getElem(1, 0, n - 1, k);
  }
};

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);

  int n, m, p;
  cin >> n >> m >> p;
  vector<pair<int, int>> a(n);
  for (int i = 0; i < n; ++i) {
    cin >> a[i].first >> a[i].second;
  }
  sort(a.begin(), a.end());
  int A = a.back().first;
  int cost = 1e9;
  vector<int> at(A);
  for (int i = n - 1, j = A - 1; j >= 0; --j) {
    while (i >= 0 and a[i].first > j) {
      cost = min(cost, a[i].second);
      --i;
    }
    at[j] = -cost;
  }
  segtree tr(at);
  vector<pair<int, int>> b(m);
  for (int i = 0; i < m; ++i) {
    cin >> b[i].first >> b[i].second;
  }
  sort(b.begin(), b.end());
  vector<tuple<int, int, int>> ms;
  for (int i = 0; i < p; ++i) {
    int x, y, z;
    cin >> y >> x >> z;
    ms.emplace_back(x, y, z);
  }
  sort(ms.begin(), ms.end());
  long long ans = -1e18;
  for (int i = 0, j = 0; i < m; ++i) {
    while (j < p and get<0>(ms[j]) < b[i].first) {
      if (get<1>(ms[j]) < A) {
        tr.modify(get<1>(ms[j]), A - 1, get<2>(ms[j]));
      }
      ++j;
    }
    ans = max(ans, tr.get(0, A - 1).val - b[i].second);
  }
  cout << ans;


  return 0;
}