#define _CRT_SECURE_NO_WARNINGS
#pragma GCC optimize("O3")
#include <iostream>
#include <string>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <map>
#include <list>
#include <ctime>
#include <bitset>
#include <random>
#include <complex>
#include <tuple>
#include <iomanip>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cstdio>
#include <cassert>
#include <fstream>
#define fastio ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define ff first
#define ss second
#define add push_back
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define rev(x) reverse(all(x))
#define seg(s,x,i) s.substr(x,i)
using namespace std;
template<class C> void print_v(C &v) { for (auto element : v) cout << element << ' '; cout << '\n'; }
template<class C> void print_vv(C &vv) { for (auto v : vv) print_v(v); }
template<class C> void mini(C &a, C b) { a = min(a, b); }
template<class C> void maxi(C &a, C b) { a = max(a, b); }
template<class C> C min3(C a, C b, C c) { return min(min(a, b), c); }
template<class C> C max3(C a, C b, C c) { return max(max(a, b), c); }
template<class C> C sq(C a) { return a * a; };
typedef long long ll; typedef long double ld;
typedef pair<int, int> pii; typedef pair<ll, ll> pll;
typedef vector<int> vi; typedef vector<ll> vll; typedef vector<vi> vvi;
typedef vector<string> vs; typedef vector<pii> vpi; typedef vector<char> vc;

char m[52][52];
int n;
vpi start_area, finish_area;
bool used[52][52];

void dfs_start(int x, int y)
{
	used[x][y] = true;
	start_area.add({ x,y });
	for (int i = -1; i <= 1; i += 2)
	{
		if (used[x + i][y] == 0 and m[x + i][y] == '0')
			dfs_start(x + i, y);
		if (used[x][y + i] == 0 and m[x][y + i] == '0')
			dfs_start(x, y + i);
	}
}

void dfs_finish(int x, int y)
{
	used[x][y] = true;
	finish_area.add({ x,y });
	for (int i = -1; i <= 1; i += 2)
	{
	    if (used[x + i][y] == 0 and m[x + i][y] == '0')
			dfs_finish(x + i, y);
		if (used[x][y + i] == 0 and m[x][y + i] == '0')
			dfs_finish(x, y + i);
	}
}

inline void Problem()
{
	int sx, sy, fx, fy;
	cin >> n;
	for (int i = 0; i < 52; ++i)
	{
		for (int j = 0; j < 52; ++j)
		{
			m[i][j] = '1';
		}
	}
	cin >> sx >> sy >> fx >> fy;
	for (int i = 1; i <= n; ++i)
	{
		for (int j = 1; j <= n; ++j)
		{
			cin >> m[i][j];
		}
	}
	dfs_start(sx, sy);
	for (int i = 0; i < 52; ++i)
	{
		for (int j = 0; j < 52; ++j)
		{
			used[i][j] = false;
		}
	}
	dfs_finish(fx, fy);
	int ans = 1e9;
	for (auto s : start_area)
	{
		for (auto f : finish_area)
		{
			mini(ans, sq(s.ff - f.ff) + sq(s.ss - f.ss));
		}
	}
	cout << ans;
}

int main()
{
	fastio;
	Problem();
	return 0;
}