#include <bits/stdc++.h>
#define REP(i, n) for (long long i = 0; i < n; i++)
using namespace std;
typedef long long Long;

const Long N = 100;

Long A[N][N];
Long B[N][N];
Long C[N][N];
Long D[N][N];

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.precision(10);
	cout << fixed;
    
    Long n, m;
    cin >> n >> m;
    for(Long i = 0; i < n; i++){
    	for(Long j = 0; j<  m; j++){
    		cin >> A[i][j];
		}
	}
	for(Long i = 0; i < n; i++){
    	for(Long j = 0; j<  m; j++){
    		cin >> B[i][j];
		}
	}
	for(Long i = 0; i < n; i++){
    	for(Long j = 0; j<  m; j++){
    		C[i][j] = min(A[i][j],B[i][j]);
		}
	}
	for(Long i = 0; i < n; i++){
    	for(Long j = 0; j<  m; j++){
    		D[i][j] = max(A[i][j],B[i][j]);
		}
	}
	
	for(Long i = 0; i < n; i++){
    	for(Long j = 0; j<  m; j++){
    		bool ok = true;
    		if(i+1 < n){
    			if(C[i][j] >= C[i+1][j]){
    				ok = false;
				}
			}
			if(j+1 < m){
    			if(C[i][j] >= C[i][j+1]){
    				ok = false;
				}
			}
			if(!ok){
				cout << "Impossible" << endl;
				return 0;
			}
		}
	}
	for(Long i = 0; i < n; i++){
    	for(Long j = 0; j<  m; j++){
    		bool ok = true;
    		if(i+1 < n){
    			if(D[i][j] >= D[i+1][j]){
    				ok = false;
				}
			}
			if(j+1 < m){
    			if(D[i][j] >= D[i][j+1]){
    				ok = false;
				}
			}
			if(!ok){
				cout << "Impossible" << endl;
				return 0;
			}
		}
	}
	cout << "Possible" << endl;
	return 0;
}

