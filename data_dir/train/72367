#include <bits/stdc++.h>
using namespace std;

#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()

using ll = long long;
using ld = long double;

using pt = complex<int>;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int n, m, p;
    cin >> n >> m >> p;
    vector<int> s(p);
    for (int i = 0; i < p; i++) {
        cin >> s[i];
    }
    vector<vector<int>> field(n + 2, vector<int>(m + 2, -2));
    vector<vector<vector<int>>> dist(p, vector<vector<int>>(n + 2, vector<int>(m + 2, 0x3FFFFFFF)));
    vector<queue<pair<int, int>>> qs(p);
    vector<int> res(p);
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            char c;
            cin >> c;
            if (c == '.') {
                field[i][j] = -1;
            } else if (c == '#') {
                //field[i][j] = -2;
            } else {
                res[c - '1']++;
                field[i][j] = c - '1';
                dist[c - '1'][i][j] = 0;
            }
        }
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (field[i][j] >= 0) {
                for (int d : {-1, 1}) {
                    if (field[i + d][j] == -1 && 1 < dist[field[i][j]][i + d][j]) {
                        dist[field[i][j]][i + d][j] = 1;
                        qs[field[i][j]].push({i + d, j});
                    }
                    if (field[i][j + d] == -1 && 1 < dist[field[i][j]][i][j + d]) {
                        dist[field[i][j]][i][j + d] = 1;
                        qs[field[i][j]].push({i, j + d});
                    }
                }
            }
        }
    }
    for (int i = 1;; i++) {
        bool update = false;
        for (int j = 0; j < p; j++) {
            while (!qs[j].empty() && dist[j][qs[j].front().first][qs[j].front().second] <= i * s[j]) {
                auto c = qs[j].front();
                qs[j].pop();
                if (field[c.first][c.second] != -1) continue;
                update = true;
                field[c.first][c.second] = j;
                res[j]++;
                int curDist = dist[j][c.first][c.second];
                for (int d : {-1, 1}) {
                    if (field[c.first + d][c.second] == -1 && curDist + 1 < dist[j][c.first + d][c.second]) {
                        dist[j][c.first + d][c.second] = curDist + 1;
                        qs[j].push({c.first + d, c.second});
                    }
                    if (field[c.first][c.second + d] == -1 && curDist + 1 < dist[j][c.first][c.second + d]) {
                        dist[j][c.first][c.second + d] = curDist + 1;
                        qs[j].push({c.first, c.second + d});
                    }
                }
            }
        }
        if (!update) break;
    }
    for (int i = 0; i < p; i++) {
        cout << res[i] << " ";
    }
    cout << endl;
}
