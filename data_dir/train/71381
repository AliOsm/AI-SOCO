#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <string>
#include <stack>
#include <queue>
#include <map>
#include <ctime>
#include <cmath>
#include <set>
 
using namespace std;
 
#define SZ(x) (int) (x).size()

const int INF = (int) 1e9;

int ans = INF;
int n, xs, ys;
bool used[30];
int x[30], y[30];
int dp[(1 << 24)], t[30];
pair <int, int> parent[(1 << 24)];

int dist(int _x1, int _y1, int _x2, int _y2)
{
	return (_x1 - _x2) * (_x1 - _x2) + (_y1 - _y2) * (_y1 - _y2);
}

int solve(int mask, int len)
{


	if (len == n)
		return 0;
	if (dp[mask] != -1)
		return dp[mask];
	dp[mask] = INF;
	for (int i = 0; i < n; ++i)
		if ((mask | t[i]) != mask)
		{
			int cur = solve(mask | t[i], len + 1) + 2 * dist(xs, ys, x[i], y[i]);
			if (dp[mask] > cur)
			{
				dp[mask] = cur;
				parent[mask].first = i;
				parent[mask].second = i;
			}
		
			for (int j = i + 1; j < n; ++j)
				if ((mask | t[j]) != mask)
				{
					int d = dist(xs, ys, x[i], y[i]) + dist(x[i], y[i], x[j], y[j]) + dist(xs, ys, x[j], y[j]);
					int cur = solve(mask | t[i] | t[j], len + 2) + d;
					if (dp[mask] > cur)
					{
						dp[mask] = cur;
						parent[mask].first = i;
						parent[mask].second = j;
					}
				}
			break;
		}
	return dp[mask];
}
			





int main()
{
	scanf("%d%d%d", &xs, &ys, &n);
	for (int i = 0; i < n; ++i)
		scanf("%d%d", &x[i], &y[i]);
	t[0] = 1;
	for (int i = 1; i < 30; ++i)
		t[i] = t[i - 1] * 2;
	memset(dp, -1, sizeof(dp));
	cout << solve(0, 0) << endl;
	int mask = 0;
	int len = 0;
	while (len < n)
	{
		int i = parent[mask].first + 1;
		int j = parent[mask].second + 1;
		len++;
		printf("0 %d ", i);
		if (i != j)
		{
			len++;
			printf("%d ", j);
		}
		mask = (mask | t[i - 1] | t[j - 1]);
	}
	printf("0");

	
	return 0;
}
