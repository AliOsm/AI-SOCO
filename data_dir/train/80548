/**************************************************************
 Problem: 3224
 User: suda1230705082
 Language: C++
 Result: Runtime_Error
 ****************************************************************/

#include<stdio.h>
#include<string.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<deque>
#include<vector>
#include<set>
//#include<bits/stdc++.h>
//#include<tr1/unordered_map>
using namespace std;
long long MODA = 100000909770901ll;
long long MODB = 100000002135407ll;
const int MAXN = 200050;

inline void print(char pt) {
	printf("%c\n", pt);
}
inline void print(int pt) {
	printf("%d\n", pt);
}
inline void print(long long pt) {
	printf("%I64d\n", pt);
}
inline void print(double pt) {
	printf("%.20f\n", pt);
}
inline void print(char pt[]) {
	printf("%s\n", pt);
}
inline void print() {
	printf("\n");
}

inline void scan(int &pt) {
	scanf("%d", &pt);
}
inline void scan(char &pt) {
	scanf("%c", &pt);
}
inline void scan(long long &pt) {
	scanf("%I64d", &pt);
}
inline void scan(double &pt) {
	scanf("%lf", &pt);
}
inline void scan(char pt[]) {
	scanf("%s", pt);
}

struct str {
	char val[108];
	str() {
		memset(val, 0, sizeof(val));
	}
	friend int operator<(str a, str b) {
		return strcmp(a.val, b.val) < 0;
	}
};

//int gcd(int x, int y) {
//    return y ? gcd(y, x % y) : x;
//}
//int lcm(int x, int y) {
//    return x * (y / gcd(x, y));
//}
long long gcd(long long x, long long y) {
	return y ? gcd(y, x % y) : x;
}
long long lcm(long long x, long long y) {
	return x * (y / gcd(x, y));
}

int bits[50];
void getbits() {
	for (int i = 0; i < 30; i++) {
		bits[i] = 1 << i;
	}
}

long long Q_pow(long long x, long long y) {
	long long res = 1;
	while (y) {
		if (y % 2 == 1) {
			res *= x;
			res %= MODA;
		}
		x = x * x;
		x %= MODA;
//        if(x<=1e-5){
//            return 0;
//        }
		y /= 2;
	}
	return res;
}

struct pii {
	int x;
	int y;
	int i;
	friend int operator<(pii a, pii b) {
		if (a.x != b.x)
			return a.x < b.x;
		return a.y < b.y;
	}
};

struct node {
	node* father;
	node* sons[2];
	int size;
	int howmany;
	node() {
		sons[0] = NULL;
		sons[1] = NULL;
		father = NULL;
		size = 0;
		howmany = 0;
	}
};

node nodes[10000000];
int nodecnt;
char cmd[100];
int num;
int n;
int main() {
	nodes[0] = node();
	nodecnt = 1;
	scan(n);

	for (int i = 0; i < n; i++) {
		scan(cmd);
		scan(num);
		//print(!(!(num & (1 << 30))));
		node* nowplace = nodes;

		if (cmd[0] == '+') {
			if (num == 0)
				continue;
			for (int i = 30; i >= 0; i--) {
				if (nowplace->sons[!(!(num & (1 << i)))] == NULL) {
					nowplace->sons[!(!(num & (1 << i)))] = nodes + nodecnt;
					nowplace->sons[!(!(num & (1 << i)))]->father = nowplace;
					nodecnt++;

					nowplace = nowplace->sons[!(!(num & (1 << i)))];
				} else {
					nowplace = nowplace->sons[!(!(num & (1 << i)))];
				}
			}
			nowplace->howmany++;
			while (nowplace != NULL) {
				nowplace->size++;
				nowplace = nowplace->father;
			}
		} else if (cmd[0] == '-') {
			if (num == 0)
				continue;
			for (int i = 30; i >= 0; i--) {
				nowplace = nowplace->sons[!(!(num & (1 << i)))];
			}
			nowplace->howmany--;
			while (nowplace != NULL) {
				nowplace->size--;
				nowplace = nowplace->father;
			}
		} else {
			if (nodes[0].size == 0) {
				print(num ^ 0);
				continue;
			}

			int ansa = 0;
			int i = 30;
			for (; i >= 0; i--) {
//				if (!((nowplace->sons[0] != NULL && nowplace->sons[0]->size)
//						|| (nowplace->sons[1] != NULL && nowplace->sons[1]->size)))
//					break;
				if (nowplace->sons[(!(num & (1 << i)))] != NULL
						&& nowplace->sons[(!(num & (1 << i)))]->size) {
					nowplace = nowplace->sons[(!(num & (1 << i)))];
					ansa++;
				} else {
					nowplace = nowplace->sons[!(!(num & (1 << i)))];
				}
				if (i)
					ansa *= 2;
			}
			print(max(ansa, num ^ 0));
		}

	}

	return 0;
}
