#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
#include <map>
using namespace std;

struct edge
{
	int s,t;
	edge(int _s=0,int _t=0): s(_s),t(_t) {}
	bool operator <(const edge& b)
	{
		if(s!=b.s)
			return s<b.s;
		return t<b.t;
	}
};

vector<int> actual;
vector<edge> e;
vector<vector<int> > v;
int dp[500000];
long long sum[500000];
const int MOD=1000000007;

int findsum(int l,int r)
{
	return (sum[r+1]-sum[l]+MOD)%MOD;
}

int main()
{
	int n,m;
	scanf("%d%d",&n,&m);
	e.resize(m);
	actual.push_back(0);
	actual.push_back(n);
	for(int i=0;i<m;i++)
	{
		scanf("%d%d",&e[i].s,&e[i].t);
		actual.push_back(e[i].s);
		actual.push_back(e[i].t);
	}
	sort(actual.begin(),actual.end());

	vector<int>:: iterator it=unique(actual.begin(),actual.end()),it2=actual.begin();
//	for(int i=0;i<actual.size();i++)
//			printf("%d\n",actual[i]);
	map<int,int> shrink;
	int n2;
	for(int i=0;it2!=it;i++,it2++)
	{
		n2=i;
		shrink[actual[i]]=i;
//		printf("actual[%d]=%d\n",i,actual[i]);
	}
	v.resize(actual.size());
	for(int i=0;i<m;i++)
	{
		e[i].s=shrink[e[i].s];
		e[i].t=shrink[e[i].t];
		v[e[i].t].push_back(e[i].s);
	}
	dp[0]=1;
	sum[0]=0;
	sum[1]=1;
	for(int i=1;i<=n2;i++)
	{
		for(int j=0;j<v[i].size();j++)
			dp[i]=(dp[i]+findsum(v[i][j],i-1))%MOD;
		sum[i+1]=(sum[i]+dp[i])%MOD;
	}
	printf("%d\n",dp[n2]);
}
