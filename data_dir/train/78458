#pragma GCC optimize ("O3")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;
#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) (((n%m) + m)%m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

const int N = 1e5 + 5;
map<int, int> cnt;
int n;
ll k;

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> k;
	vector<int> arr(n);
	rep(i, 0, n)
		cin >> arr[i], cnt[arr[i]]++;
	sort(all(arr));
	arr.erase(unique(all(arr)), arr.end());

	ll st = arr[0], en = arr.back();
	int i = 0, j = sz(arr) - 1;

	while (k > 0 && i < j)
	{
		ll a = cnt[arr[i]], b = cnt[arr[j]];
		if (a <= b)
		{
			ll steps = a * 1ll * (arr[i + 1] - arr[i]);
			if (steps <= k)
			{
				k -= steps;
				cnt[arr[i + 1]] += cnt[arr[i]];
				st = arr[i + 1];
				i++;
			}
			else
			{
				st += (k / a);
				k = 0;
			}
		}
		else
		{
			ll steps = b * 1ll * (arr[j] - arr[j - 1]);
			if (steps <= k)
			{
				k -= steps;
				cnt[arr[j - 1]] += cnt[arr[j]];
				en = arr[j - 1];
				j--;
			}
			else
			{
				en -= (k / b);
				k = 0;
			}
		}
	}

	cout << max(0ll, en - st) << endl;

	return 0;
}
