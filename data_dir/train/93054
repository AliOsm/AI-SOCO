//#pragma GCC optimize("Ofast,no-stack-protector")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
//#pragma GCC target("avx,tune=native")
// Anand Jaisingh

#include<bits/stdc++.h>

using namespace std;

typedef complex<double> base;
typedef long double ld;
typedef long long ll;

#define pb push_back
#define pii pair<int,int>
#define pll pair< ll , ll >
#define vi vector<int>
#define vvi vector< vi >
const int maxn=(int)(1e5+5);
const ll mod=(ll)(1e9+7);
int fact[maxn],inv_fact[maxn];

int add(int a,int b)
{
    int ret=a+b;

    if(ret>=mod)
    {
        ret-=mod;
    }

    return ret;
}

int sub(int a,int b)
{
    int ret=a-b;

    if(ret<0)
    {
        ret+=mod;
    }

    return ret;
}

int mul(ll a,ll b)
{
    return (a*b)%mod;
}

int poww(int a,int b)
{
    int x=1,y=a;

    while(b>0)
    {
        if(b%2==1)
        {
            x=mul(x,y);
        }

        y=mul(y,y);b/=2;
    }

    return x;
}

void build()
{
    fact[0]=1;

    for(int i=1;i<maxn;i++)
    {
        fact[i]=mul(fact[i-1],i);
    }

    inv_fact[maxn-1]=poww(fact[maxn-1],mod-2);

    for(int i=maxn-2;i>=0;i--)
    {
        inv_fact[i]=mul(inv_fact[i+1],i+1);
    }
}

int C(int n,int r)
{
    if(n<r || r<0)
    {
        return 0;
    }

    int ret=mul(fact[n],mul(inv_fact[r],inv_fact[n-r]));

    return ret;
}

int main()
{
    ios_base::sync_with_stdio(0);cin.tie(0);

    int n,k;cin>>n>>k;

    build();int tot1=poww(k,n*n),tot2=0;

   // cout<<tot1<<endl;

    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=n;j++)
        {
            int now=mul(C(n,i),C(n,j));

            int cells_gone=i*n+j*n-(i*j);

            int remain=n*n-cells_gone;

            int val=mul(poww(k-1,cells_gone),poww(k,remain));

            now=mul(now,val);

            int zz=poww(mod-1,i+j+1);now=mul(now,zz);

            if(i+j>=1)
            {
                tot2=add(tot2,now);
            }
        }
    }

   // cout<<tot2<<endl;

    int res=sub(tot1,tot2);

    cout<<res<<endl;

    return 0;
}
