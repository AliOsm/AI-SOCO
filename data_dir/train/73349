//#pragma GCC optimize("Ofast")
//#pragma GCC target("avx,avx2,fma")
#include <bits/stdc++.h>
#define all(x) std::begin(x), std::end(x)
#define isz(x) (int)std::size(x)
const auto io_sync_off = [](){std::ios_base::sync_with_stdio(0);std::cin.tie(0);return 0;}();
// Debug defines:
#define watch(x) std::cerr << std::setw(12) << #x << " = " << std::setw(12) << x
#define watchln(x) watch(x) << std::endl
#define watchsp(x) watch(x) << " "
#define cerr cerr && debug && std::cerr
const int debug = 0;
namespace std {
    // 2D arrays:
    template<typename T, int N, int M> auto size(const T (&a)[N][M]) { return N * M; }
    template<typename T, int N, int M> auto begin(T (&a)[N][M]) { return &a[0][0]; }
    template<typename T, int N, int M> auto end(T (&a)[N][M]) { return &a[0][0] + N * M; }
    // 3D arrays:
    template<typename T, int N, int M, int K> auto size(const T (&a)[N][M][K]) { return N * M * K; }
    template<typename T, int N, int M, int K> auto begin(T (&a)[N][M][K]) { return &a[0][0][0]; }
    template<typename T, int N, int M, int K> auto end(T (&a)[N][M][K]) { return &a[0][0][0] + N * M * K; }
    // Algorithms:
    template<typename C> void reuniq(C& c) { c.erase(unique(all(c)), end(c)); }
    template<typename C, typename X> int lowpos(const C& c, X x) {
        return int(lower_bound(all(c), x) - begin(c));
    }
    template<typename X, typename Y> X& remin(X& x, const Y& y) { return x = (y < x) ? y : x; }
    template<typename X, typename Y> X& remax(X& x, const Y& y) { return x = (x < y) ? y : x; }
}
// Comparators:
template<typename A, typename B> bool operator >(const A& a, const B& b) { return b < a; }
template<typename A, typename B> bool operator<=(const A& a, const B& b) { return !(a > b); }
template<typename A, typename B> bool operator>=(const A& a, const B& b) { return !(a < b); }
template<typename A, typename B> bool operator!=(const A& a, const B& b) { return a < b || b < a; }
template<typename A, typename B> bool operator==(const A& a, const B& b) { return !(a != b); }
// Input:
template<typename T> std::istream& operator>>(std::istream& is, std::vector<T>& vec) {
    for (auto &it : vec) is >> it;
    return is;
}
// Output:
template<typename A, typename B> std::ostream& operator<<(std::ostream& os, const std::pair<A,B>& pt) {
    return os << "{" << pt.first << ", " << pt.second << "}";
}
template<typename Iterator>
std::ostream& print_range(std::ostream& os, Iterator begin, Iterator end) {
    os << "{";
    for (auto it = begin; it != end; it++) {
        if (it != begin) { os << ", "; }
        os << *it;
    }
    return os << "}";
}
template<typename T> std::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {
    return print_range(os, vec.begin(), vec.end());
}
template<typename T> std::ostream& operator<<(std::ostream& os, const std::set<T>& set) {
    return print_range(os, set.begin(), set.end());
}
// Defines:
using ll = long long;
using ull = unsigned long long;
using ld = long double;
using vi = std::vector<int>;
using vl = std::vector<ll>;
using vvi = std::vector<vi>;
using vvl = std::vector<vl>;
using pii = std::pair<int,int>;
using pil = std::pair<int,ll>;
using pli = std::pair<ll,int>;
using pll = std::pair<ll,ll>;
// -----------------------------------------------------------------------------
const int OPEN = 0, CLOSE = 1;
struct State {
    int pos, id, type;
    State(int pos_ = 0, int id_ = 0, int type_ = 0)
        : pos(pos_), id(id_), type(type_) { }
};
bool operator<(State a, State b) {
    if (a.pos < b.pos) return true;
    if (a.pos > b.pos) return false;
    if (a.type < b.type) return true;
    if (a.type > b.type) return false;
    return a.id < b.id;
}
std::ostream& operator<<(std::ostream& os, const State& st) {
    return os << "{x=" << st.pos << ",i=" << st.id << ", " << (st.type == CLOSE ? "CLOSE" : "OPEN") << "}";
}
template<typename T>
struct Fenwick {
    std::vector<T> data;
    Fenwick(int n) : data(n, T(0)) { }
    T operator()(int r) const {
        T res(0);
        for (int i = r; i >= 0; i = (i & (i + 1)) - 1) res += data[i];
        return res;
    }
    T operator()(int l, int r) const {
        if (l > r) return T(0);
        return (*this)(r) - (*this)(l-1);
    }
    void inc(int p, T x) {
        for (int i = p; i < isz(data); i |= i+1) data[i] += x;
    }
};
/*
bool naive(const vi& sa, const vi& ea, const vi& sb, const vi& eb) {
    const int n = isz(sa);
    for (int i = 0; i < n; i++) {
        for (int j = i+1; j < n; j++) {
            if (eb[j] < sb[i] && 
        }
    }
}
*/
bool solve(vi sa, vi ea, vi sb, vi eb) {
    const int n = isz(sa);
    vi x;
    x.reserve(n * 12);
    for (int i = 0; i < n; i++) {
        int a = sa[i];
        int b = ea[i];
        int c = sb[i];
        int d = eb[i];
        for (int it : {a,b,c,d}) {
            for (int diff = -1; diff <= 1; diff++) {
                x.push_back(it+diff);
            }
        }
    }
    std::sort(all(x));
    std::reuniq(x);
    std::priority_queue<State, std::vector<State>, std::greater<State>> queue;
    for (int i = 0; i < n; i++) {
        sa[i] = std::lowpos(x, sa[i]);
        ea[i] = std::lowpos(x, ea[i]);
        sb[i] = std::lowpos(x, sb[i]);
        eb[i] = std::lowpos(x, eb[i]);
        queue.push(State(sa[i], i,  OPEN));
        queue.push(State(ea[i], i, CLOSE));
    }
    Fenwick<ll> left(isz(x)+10), right(isz(x)+10);
    int total = 0;
    bool ok = true;
    while (isz(queue)) {
        auto top = queue.top(); queue.pop();
        watchln(top);
        if (top.type == CLOSE) {
            left.inc(sb[top.id], -1);
            right.inc(eb[top.id], -1);
            total--;
        } else {
            auto cntLeft = right(sb[top.id]-1);
            auto cntRight = left(eb[top.id]+1, isz(x));
            watchln(cntLeft);
            watchln(cntRight);
            watchln(total);
            if (cntLeft + cntRight != 0) {
                ok = false;
                break;
            }
            left.inc(sb[top.id], +1);
            right.inc(eb[top.id], +1);
            total++;
        }
    }
    return ok;
}
int main() {
    // solution
    int n;
    while (std::cin >> n) {
        vi sa(n), ea(n), sb(n), eb(n);
        for (int i = 0; i < n; i++) {
            int a, b, c, d;
            std::cin >> a >> b >> c >> d;
            sa[i] = a;
            ea[i] = b;
            sb[i] = c;
            eb[i] = d;
        }
        bool ok = solve(sa, ea, sb, eb) && solve(sb, eb, sa, ea);
        std::cout << (ok ? "YES\n" : "NO\n");
    }
    return 0;
}