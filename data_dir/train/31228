#include <bits/stdc++.h>
using namespace std;

int n, m;
vector<string> s;
int x, y;

int dx[] = {0, -1, 0, 1};
int dy[] = {1, 0, -1, 0};
char cdir[] = "RULD";
int R = 0, U = 1, L = 2, D = 3;
bool okLR, okUD;

vector<int> find_path() {
    vector<vector<int>> par(n, vector<int>(m, -1));
    vector<pair<int, int>> q = {{0, 0}};
    par[0][0] = -1000;
    for (int i = 0; i < (int)q.size(); ++i) {
        int x = q[i].first, y = q[i].second;
        for (int d = 0; d < 4; ++d) {
            int nx = x + dx[d], ny = y + dy[d];
            if (nx >= 0 && nx < n && ny >= 0 && ny < m && s[nx][ny] != '*' && par[nx][ny] == -1) {
                par[nx][ny] = d;
                q.emplace_back(nx, ny);
            }
        }
    }
    int x = -1, y = -1;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (s[i][j] == 'F') {
                x = i, y = j;
            }
        }
    }
    vector<int> ret;
    while (par[x][y] >= 0) {
        int d = par[x][y];
        ret.push_back(d);
        x -= dx[d];
        y -= dy[d];
    }
    reverse(ret.begin(), ret.end());
    return ret;
}

bool go(int dir) {
    cout << cdir[dir] << endl;
    int i, j;
    cin >> i >> j;
    --i, --j;
    if (i < 0 || j < 0)
        exit(1);
    if (s[i][j] == 'F')
        exit(0);
    bool ret = i != x || j != y;
    x = i, y = j;
    return ret;
}

int main() {
    cin >> n >> m;
    s.resize(n);
    for (auto &x: s) {
        cin >> x;
    }
    x = 0, y = 0;
    okLR = okUD = false;
    if (s[x][y] == 'F') {
        return 0;
    }
    auto path = find_path();
    for (int dir : path) {
        if (!okLR && dir == R) {
            if (!go(R)) {
                swap(cdir[L], cdir[R]);
                go(R);
            }
            okLR = true;
            continue;
        }
        if (!okUD && dir == D) {
            if (!go(D)) {
                swap(cdir[U], cdir[D]);
                go(D);
            }
            okUD = true;
            continue;
        }
        if (dir == L || dir == R) assert(okLR);
        if (dir == U || dir == D) assert(okUD);
        go(dir);
    }
}
