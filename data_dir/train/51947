#include <iostream>
#include <cmath>
#include <string>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <fstream>
#include <cassert>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <stack>
#include <functional>
#include <numeric>
#include <ctime>
#include <cstdlib>
#include <sstream>

using namespace std;

#define f first
#define s second
#define mp make_pair
#define pb push_back
#define pii pair<int, int>
#define pll pair<long long, long long>
#define y1 stupid_y1
#define ll long long
#define vi vector<int>
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x)*(x))
#define sz(a) (int)a.size()
#define file "a"

const int inf = (int)1e9;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, m;

void show(vector < int > p){
    for (int i=1;i<=n;i++) cout <<p[i]<<" ";
    cout <<endl;
}

int main () {
    #ifdef LOCAL
    freopen(file".in", "r", stdin);
    freopen(file".out", "w", stdout);
    #endif

    cin >>n>>m;
    
    vector < int > p(n+1,0);
    for (int i=1;i<=n;i++) p[i] = i;


    vector < int > a(n+1, 0);
    int M = -inf;
    do {
        
        int sum = 0;
        for (int i=1;i<=n;i++){
            int mini = p[i];
            for (int j=i;j<=n;j++){
                mini = min(mini, p[j]);
                sum += mini;                
            }
        }
        if ( sum > M ){
            M = sum;
        }

    }while(next_permutation(p.begin() + 1, p.end()));

    for (int i=1;i<=n;i++) p[i] = i;

    int cnt = 0;
    do {
        int sum = 0;
        for (int i=1;i<=n;i++){
            int mini = p[i];
            for (int j=i;j<=n;j++){
                mini = min(mini, p[j]);
                sum += mini;                
            }
        }
        if ( sum == M ){
            cnt++;
            if ( cnt == m ){
                for (int i=1;i<=n;i++){
                    cout <<p[i]<<" ";
                }
                return 0;
            }
        }   
    }while(next_permutation(p.begin() + 1, p.end()));



    #ifdef LOCAL
    cerr << (double)clock() * 1.0 / CLOCKS_PER_SEC << endl;
    #endif

    return 0;
}
