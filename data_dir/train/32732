#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>
#include <map>

const int N = 100000 + 5;
int n,a,b,A[N],color[N];
std::map<int,int> map,now;

void dfs(int val) {
	std::map<int,int>::iterator itr;
	itr = map.find(val);
	now.insert(*itr);
	map.erase(itr);
	if (map.find(a-val) != map.end())
		dfs(a-val);
	if (map.find(b-val) != map.end())
		dfs(b-val);
}

bool check(std::map<int,int> map,int a) {
	for (std::map<int,int>::iterator it = map.begin(); it != map.end();\
			++ it) {
		if (map.find(a-it->first) == map.end()) {
			return false;
		}
	}
	return true;
}

int main() {
	scanf("%d%d%d",&n,&a,&b);
	for (int i = 0; i < n; ++ i) {
		scanf("%d",A+i);
		map[A[i]] = i;
	}
	if (a == b) {
		for (int i = 0; i < n; ++ i) {
			if (map.find(a-A[i]) == map.end()) {
				puts("NO");
				return 0;
			}
		}
		puts("YES");
		for (int i = 0; i < n; ++ i) {
			printf("0 ");
		}
		puts("");
		return 0;
	}
	memset(color,-1,sizeof(color));
	for (int i = 0; i < n; ++ i) {
		if (color[i] >= 0) continue;
		now.clear();
		dfs(A[i]);
		int flag = -1;
		if (check(now,a)) flag = 0;
		else if (check(now,b)) flag = 1;
		else {
			puts("NO");
			return 0;
		}
		for (std::map<int,int>::iterator it = now.begin(); it != now.end();\
				++ it) {
			color[it->second] = flag;
		}
	}
	puts("YES");
	for (int i = 0; i < n; ++ i) {
		printf("%d ",color[i]);
	}
	puts("");
	return 0;
}
