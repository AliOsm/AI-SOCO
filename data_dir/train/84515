#include <bits/stdc++.h>
using namespace std;
 
struct Point {
	int x, y;
	bool red;
};
 
long long cp(Point a, Point b) {
	return a.x * 1LL * b.y - a.y * 1LL * b.x;
}
int getCategory(Point p) {
	if (p.x == 0) {
		if (p.y > 0) return 0;
		return 2;
	}
	if (p.x > 0) return 1;
	return 3;
}
bool operator< (Point a, Point b) {
	int aa = getCategory(a);
	int bb = getCategory(b);
	if (aa != bb) return aa < bb;
	return cp(a, b) < 0;
}
 
Point operator+ (Point a, Point b) {
	a.x += b.x;
	a.y += b.y;
	return a;
}
Point operator- (Point a, Point b) {
	a.x -= b.x;
	a.y -= b.y;
	return a;
}
 
int main()
{
	int n, m;
	ignore = scanf("%d %d", &n, &m);
	
	vector<Point> red_pts, blue_pts;
	
	for (int i = 0; i < n; i++) {
		Point p;
		ignore = scanf("%d %d", &p.x, &p.y);
		p.red = true;
		red_pts.push_back(p);
	}
	
	for (int i = n; i < n + m; i++) {
		Point p;
		ignore = scanf("%d %d", &p.x, &p.y);
		p.red = false;
		blue_pts.push_back(p);
	}
	
	int ans = 0;
	
	while (red_pts.size() >= 3) {
		Point pivot = red_pts.back();
		red_pts.pop_back();
		
		vector<Point> V;
		for (auto p : red_pts) V.push_back(p - pivot);
		for (auto p : blue_pts) V.push_back(p - pivot);
		
		sort(V.begin(), V.end());
		
		for (int v = 0; v < (int)V.size(); v++) {
			if (!V[v].red) continue;
			
			Point x;
			bool any = false;
			for (int i = (v + 1) % V.size(); i != v; i = (i + 1) % V.size()) {
				if (cp(V[v], V[i]) >= 0) break;
						
				if (!any || cp(x - V[v], V[i] - V[v]) < 0) {
					if (V[i].red) {
						ans++;
					}
					else any = true, x = V[i];
				}
			}
		} 
	}

	printf("%d\n", ans);
}
