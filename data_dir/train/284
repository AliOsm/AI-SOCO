#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
    #define EXPECT(expr)
#endif
#define NO_IO_TIE ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
if(!a.size()){ size_t n; fin >> n; a.resize(n); }
for( auto & u: a) fin >> u; return fin; }
/* @@@ ----------------------------------- */

int64_t gcd(const int64_t a, const int64_t b){ return !b ? a : gcd(b, a % b); }

int64_t c542()
{
    vector< size_t > a;
    cin >> a;
    const auto n = a.size();
    transform( begin(a), end(a), begin(a),
               bind( minus<size_t>(), placeholders::_1, 1 ));

    vector< int64_t > m( n ), w( n );
    const size_t inf = numeric_limits< size_t >::max() >> 3;

    for( size_t root = 0; root < n; ++ root )
    {
        vector< size_t > dist( n, inf );
        dist[ root ] = 0;
        for( size_t u = root; ; u = a[u] )
        {
            const auto v = a[ u ];
            if( dist[ v ] != inf )
            {
                m[ root ] = dist[ u ] - dist[ v ] + 1;
                w[ root ] = ( dist[ v ] + m[ root ] - 1 )/ m[ root ];
                break;
            }
            else
                dist[ v ] = dist[ u ] + 1;
        }
    }

    DEBUG( m );
    DEBUG( w );

    int64_t lcm = 1;
    for( const auto i: m )
        lcm = lcm / gcd( lcm, i ) * i;

    DEBUG( lcm );
    int64_t mul = 1;
    for( size_t i = 0; i < n; ++ i )
    {
        const auto f = lcm / gcd(m[ i ], lcm);
        mul = max( mul, (w[ i ] + f - 1) / f);
        // mul = max( mul, ( w[ i ] * m[ i ] + lcm - 1 )/ lcm );
    }

    DEBUG( mul );
    return mul * lcm;
}

int main( const int argc, char * argv [])
{
    NO_IO_TIE;
    cout << c542();
    return EXIT_SUCCESS;
}
