#include <bits/stdc++.h>

using namespace std;

#define long long long
#define INF (long) 1e18
#define MOD ((long) 1e9 + 7)
#define vec(x) vector<x>
#define vecl vector<long>
#define READ(v) for (auto &x : v) cin >> x;
#define mll map<long, long>
#define umll umap<long, long>
#define pll pair<long, long>
#define umap unordered_map
#define uset unordered_set
#define pb push_back
#define pf push_front
#define FOR(i, a, b) \
  for (long i = a; i < (long) b; i++)
#define REP(i, n) FOR(i, 0, n-1)
#define SORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr < b.atr; });
#define UNSORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr > b.atr; });
#define PRINTV(v) \
  if (not v.empty()) { \
    printf("%lld", v[0]); \
    for (long _i = 1; _i < (long) v.size(); _i++) { \
      printf(" %lld", v[_i]); \
    } \
    printf("\n"); \
  }

set<long> gera_primos(long n)
{
  set<long> primos;
  vector<bool> crivo(n);
  primos.insert(2);
  for (long i = 3; i <= n; i += 2) {
    if (crivo[i]) continue;
    primos.insert(i);
    for (long j = i; j <= n; j += i) {
      crivo[j] = true;
    }
  }
  return primos;
}

struct Link
{
  long from, to, d;
  string cor;
};

struct Node
{
  long id, ord, altura = -1, total;
  bool visitado;
  long pai, dist;
  set<long> out;

  Node() {
    static long i = 0;
    id = i++;
  }
};

pair<char, uset<long>> pos[30];

int main()
{
  //ios_base::sync_with_stdio(false);

  long n, m;
  string s;
  cin >> n >> m >> s;

  FOR (i, 0, 26) {
    pos[i].first = 'a' + i;
  }
  FOR (i, 0, n) {
    pos[s[i] - 'a'].second.insert(i);
  }
  FOR (i, 0, m) {
    string a, b;
    cin >> a >> b;
    long ai, bi;
    FOR (i, 0, 26) {
      if (a[0] == pos[i].first) ai = i;
      if (b[0] == pos[i].first) bi = i;
    }
    swap(pos[ai].first, pos[bi].first);
  }
  string resp;
  FOR (i, 0, n) {
    FOR (j, 0, 26) {
      if (pos[j].second.count(i)) {
        resp += pos[j].first;
      }
    }
  }
  cout << resp << "\n";
}
