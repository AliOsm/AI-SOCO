#include <cstdio>
#include <vector>
#include <unordered_set>
using namespace std;

int n, m;
vector<int> g[100000];
int edge[600000][2];
bool used[600000];
int e = 0;
int deg[100000];
int sz = -1;
vector<int> ans;
int stopped[100000];

void addEdge(int v1, int v2) {
    sz++;
    edge[sz][0] = v1;
    edge[sz][1] = v2;
    g[v1].push_back(sz);
}

void dfs(int v) {
    while(stopped[v] < g[v].size()) {
        int curr = g[v][stopped[v]];
        if (used[curr]) {
            stopped[v]++;
            continue;
        } else {
            used[curr] = used[curr ^ 1] = 1;
            dfs(edge[curr][1]);
        }
    }
   
    ans.push_back(v);
}


int main() {
    scanf("%d %d", &n, &m);
    e = m;
    for(int i = 0; i < 100000; i++) {
        deg[i] = 0;
        used[i] = used[i + 100000] = 0;
        stopped[i] = 0;
    }

    for(int i = 0; i < m; i++) {
        int a, b;
        scanf("%d %d", &a, &b);
        a--;
        b--;
        addEdge(a, b);
        addEdge(b, a);
        deg[a]++;
        deg[b]++;
    }
    int prev = -1;
    for(int i = 0; i < n; i++) {
        if (deg[i] & 1) {
            if (prev == -1) prev = i;
            else {
                e++;
                addEdge(prev, i);
                addEdge(i, prev);
                prev = -1;
            }
        }
    }
    
    
    if (e & 1) {
        addEdge(0, 0);
        addEdge(0, 0);
    }
    dfs(0);
    
    
    printf("%d\n", ans.size() - 1);
    for(int i = 1; i < ans.size(); i += 2) {
        printf("%d %d\n", ans[i - 1] + 1, ans[i] + 1);
        printf("%d %d\n", ans[i + 1] + 1, ans[i] + 1);
    }
    return 0;
}

