#define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
#include<unordered_map>
using namespace std;
typedef long long ll;
#define N 1001000

vector<ll>prime;
bool mat[N * 20] = { 0 };
const int M = 2;
ll val[N];
ll val2[N];
ll MOD = 1e9 + 7;
vector<ll> inv;
map<ll, ll> have;
vector<int> G[N];

pair<ll, pair<ll, ll> > extendedEuclid(ll a, ll b) {
	if (a == 0) return make_pair(b, make_pair(0, 1));
	pair<ll, pair<ll, ll> > p;
	p = extendedEuclid(b % a, a);
	return make_pair(p.first, make_pair(p.second.second - p.second.first*(b / a), p.second.first));
}

ll modInverse(ll a, ll m) {
	return (extendedEuclid(a, m).second.first + m) % m;
}

void generate_primes(int n)
{
	prime.clear();
	prime.push_back(2);
	for (int i = 3; i*i <= n; i += 2)
	{
		if (mat[i] == 0)
		{
			for (int j = i*i; j<n; j += 2 * i)
				mat[j] = 1;
		}
	}
	for (int i = 3; i <= n; i += 2)
	if (!mat[i])
		prime.push_back(i);
	for (int i = 0; i < prime.size(); i++){
		inv.push_back(modInverse(prime[i], MOD));
	}
}

ll rem(int i, int j){
	return ((val[i] * inv[j]) % MOD + MOD) % MOD;
}

void add(int i, int j){
	val[i] *= prime[j];
	val[i] %= MOD;
}

int main(){
//	freopen("in.in", "r", stdin);
//	freopen("out.out", "w", stdout);
	ios::sync_with_stdio(0); cin.tie(); cout.tie(); srand(time(0));
		
	generate_primes(N * 20);
	int n, m; cin >> n >> m;
	for (int i = 0; i < n; i++) val2[i] = 1, val[i] = 1;
	while (m--){
		int a, b; cin >> a >> b; a--, b--;
		add(a, b); add(b, a);
		val2[a] *= prime[b]; val2[b] *= prime[a];
		G[a].push_back(b);
		G[b].push_back(a);
	}
	ll ans1 = 0, ans2 = 0;
	for (int i = 0; i < n; i++){
		ans1 += have[val2[i]];
		have[val2[i]]++;

		for (int j = 0; j < G[i].size(); j++){
			int nxt = G[i][j];
			ll a = rem(i, nxt), b = rem(nxt, i);
			if (a == b) ans2++;
		}
	}
	cout << ans1 + ans2 / 2 << endl;

	return 0;
}