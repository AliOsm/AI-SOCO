#include"bits/stdc++.h"
#include<valarray>
#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;

#define MAX 312

int n;
int t;

vector<int> v;

int query(int a,int b){
	int A=-1;
	bool pf=((b+1)&1);
	bool ps=pf^true;
	bool f=false;
	bool s=false;
	int pv=t;
	while(true){
		printf("? %d %d\n",a+1,b+1);
		fflush(stdout);
		int ret;
		scanf("%d",&ret);
		bool par=(abs(pv-ret)&1);
		if(pf==par){
			f^=true;
		}
		else{
			s^=true;
		}
		if(A!=-1&&f==false&&s==false){
			break;
		}
		if(f==true&&s==false){
			A=ret;
		}
		pv=ret;
	}
	return A;
}

int check(int l,int r){  //return number of {0,r}
	int cur=t;
	int nex=query(l,r);
	int rng=r+1;
	int dif=nex-cur;
	//(rng-X)-X=dif
	//rng-2X=dif
	//rng-dif=2X
	int wa=rng-dif;
	wa/=2;
	return wa;
}

int query2(int a,int b){
	int A=-1;
	bool pf=((b+1)&1);
	bool ps=pf^true;
	bool f=false;
	bool s=false;
	int pv=t;
	while(true){
		printf("? %d %d\n",a+1,b+1);
		fflush(stdout);
		int ret;
		scanf("%d",&ret);
		bool par=(abs(pv-ret)&1);
		if(pf==par){
			f^=true;
		}
		else{
			s^=true;
		}
		if(A!=-1&&f==false&&s==false){
			break;
		}
		if(f==false&&s==true){
			A=ret;
		}
		pv=ret;
	}
	return A;
}

int check2(int l,int r){
	int cur=t;
	int nex=query2(l,r);
	int rng=n-l;
	int dif=nex-cur;
	//(rng-X)-X=dif
	//rng-2X=dif
	//rng-dif=2X
	int wa=rng-dif;
	wa/=2;
	return wa;
}

int ans[MAX];

int main(){
	cin>>n>>t;
	if(n==1){
		if(t==1){
			puts("! 1");
			return 0;
		}
		puts("! 0");
		return 0;
	}
	memset(ans,-1,sizeof(ans));
	if(n%2){
		int pv=-1;
		for(int i=0;i+1<n;i++){
			int tmp=check(i,i+1);
			if(i==0){
				pv=tmp;
				continue;
			}
			ans[i+1]=tmp-pv;
			pv=tmp;
		}
		int g=check2(1,2);
		for(int j=2;j<n;j++){
			g-=ans[j];
			t-=ans[j];
		}
		ans[1]=g;
		t-=g;
		ans[0]=t;
	}
	else{
		int pv=0;
		for(int i=0;i<n;i++){
			int tmp=check(i,i);
			ans[i]=tmp-pv;
			pv=tmp;
		}
	}
		printf("! ");
	for(int i=0;i<n;i++){
		printf("%d",ans[i]);
	}
	puts("");
	fflush(stdout);
	return 0;
}
