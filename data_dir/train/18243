#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
#endif

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class FwdIter> inline auto
dump(FwdIter first, FwdIter last, const char * dlm) -> void {
typedef typename iterator_traits<FwdIter>::value_type value_type;
copy(first, last, ostream_iterator<value_type>(cout, dlm)); }
/* @@@ ----------------------------------- */

pair<size_t, size_t> // 1st is optimal, 2nd is with root node open
count(const size_t r,
      const vector<size_t> & par,
      const vector<vector<size_t>> & adj)
{
    typedef pair<size_t, size_t> value_t;
    static const auto comp = [](const value_t & a, const value_t & b){
        return a.first + b.second < b.first + a.second;
    };

    vector<value_t> val;
    for(const auto i: adj[r])
        if(i != par[r]) val.push_back(count(i, par, adj));

    sort(begin(val), end(val), comp);
    size_t acc = 0;

    // root node by itself
    for(const auto & pr: val)
        acc += pr.first;

    size_t fst = acc;

    // root node by a single child
    if(!val.empty() && val[0].first == val[0].second)
        ++fst;

    const auto snd = fst;

    // root node by two child nodes
    if(1 < val.size() &&
            val[0].first + val[1].first < 2 + val[0].second + val[1].second)
        fst = max(fst, acc + 2 + val[0].second + val[1].second
                - val[0].first - val[1].first);

    return {fst, snd};
}

int64_t d618()
{
    size_t n;
    int64_t x, y;
    cin >> n >> x >> y;

    vector<vector<size_t>> adj(n);

    for(size_t i = 0, u, v; i + 1 < n; ++ i)
    {
        cin >> u >> v;
        -- u; -- v;

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    if(n == 2)
        return x;
    else if (n == 3)
        return x + min(x, y);
    else if (y < x + 1)
    {
        const auto fail =
            any_of(begin(adj), end(adj), [n](const vector<size_t> & r){
                    return r.size() == n - 1;
                    });

        return (fail ? x : y) + (n - 2) * y;
    }

    vector<size_t> par(n, (size_t)-1);
    {
        queue<size_t> q;
        for(q.push(0); !q.empty(); q.pop())
        {
            const auto u = q.front();
            for(const auto i: adj[u])
                if(i != par[u]) par[i] = u, q.push(i);
        }
    }

    const auto acc = (n - 1) * y;
    const auto inc = y - x;

    DEBUG(count(0, par, adj));

    return acc - inc * count(0, par, adj).first;
}

int main(const int argc, char * argv [])
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    cout << d618();

    return EXIT_SUCCESS;
}
