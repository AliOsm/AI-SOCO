#include <bits/stdc++.h>

using namespace std;
string s;
int k;
int dp[205][205][55][2];
int solve(int idx,int place,int commands,bool dir)
{
    if(commands < 0)
        return -1000;

    if(idx == s.length())
    {
        if(commands % 2 == 0)
            return abs(100 - place);
        else
            return -1000;
    }
    if(dp[idx][place][commands][dir] != -1)
        return dp[idx][place][commands][dir];

    int C1 = solve(idx + 1,s[idx] == 'F' ? place + (dir == true ? 1 : -1) : place,commands,s[idx] == 'T' ? !dir : dir);
    int C2 = solve(idx + 1,s[idx] == 'T' ? place + (dir == true ? 1 : -1) : place,commands - 1,s[idx] == 'F' ? !dir : dir);
    return dp[idx][place][commands][dir] = max(C1,C2);
}
int main()
{
    memset(dp,-1,sizeof dp);
   cin >> s >> k;
   cout << solve(0,100,k,false);
}
