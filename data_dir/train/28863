//AUTHOR : TIRTH JARSANIA
//COLLEGE : DAIICT

#include<bits/stdc++.h>
using namespace std;

#define ll long long int
#define FAST ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);srand(time(NULL))

const ll N = 3e5+5;
vector<ll> g[N] , sz(N) , par(N) , ans(N,0) , temp , dep(N,0);
vector< bool > vis(N , 0 );
ll fp( ll x )
{
    if( x == par[x] ) return x;
    return par[x] = fp( par[x] ) ;
}

void Union( ll a, ll b )
{
    ll pa = fp(a);
    ll pb = fp(b);
    if( pa != pb )
    {
        if( sz[pa] < sz[pb] ) swap(pa,pb);
        par[ pb ] = pa ;
        sz[ pa ] += sz[ pb ];
        sz[ pb ] = 0;
        ans[ pa ] = max ( ans[ pb ] , max (  ans[ pa ] , (ans[pb]/2 + ans[pa]/2) + (ans[pb]%2==1) + (ans[pa]%2==1) + 1 ));
        ans[ pb ] = 0;
    }
    
    return ;
}
void dfs(ll v,ll p )
{
    temp.push_back(v);
    vis[v] = 1;
    dep[v] = dep[p] + 1;
    for( auto &it : g[v] )
    {
        if( it != p )
            dfs( it , v) ; 
    }
    return ;
}

int main()
{
    FAST;
    ll n , m , q;
    cin >> n >> m >> q;
    for( ll i = 1; i <= n ; i++ ) par[i] = i , sz[i] = 1;
    for( ll i = 1; i <= m ; i++ ) 
    {
        ll u , v;
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
        Union( u , v );
    }
    dep[0] = -1;
    for( ll i = 1 ; i <= n ; i++ )
    {
        if( !vis[i] )
        {
            dfs( i , 0 );
            ll maxi = 0;
            ll id = i;
            for( auto &v : temp )
            {
                vis[v] = 0;
                if( maxi < dep[v] )
                    maxi = dep[v] , id = v ;
                dep[v] = 0;
            }
            ll p = fp(i);
            temp.clear();
            dfs( id , 0 );
            maxi = 0;
            for( auto &v : temp )
            {
                if( maxi < dep[v] )
                    maxi = dep[v] ;
            }
            
            ans[ p ] = maxi ;
            temp.clear() ;
        }
    }
    
    while( q-- )
    {
        ll type;
        cin >> type ;
        if( type == 1 )
        {
            ll v ;
            cin >> v;
            cout << ans[ fp(v) ] << "\n";
        }
        else
        {
            ll u  ,v ;
            cin >> u >> v;
            Union( u , v );
        }
    }
   
}