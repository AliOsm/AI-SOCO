#include"bits/stdc++.h"
using namespace std;
#define fs first
#define sc second
#define mp make_pair
#define pb push_back
typedef long long int ll;
const ll N=2e5+2,inf=1e9+7;
void _run();
void no(){cout<<"NO\n",exit(0);}
int main()
{
	ios_base::sync_with_stdio(0);cin.tie(0);
	_run();
	return 0;
}
vector<int>vec[N],rs[N];
int id,vs[N],com[N],siz[N],pr[N];
void dfs(int u)
{
    com[u]=id;vs[u]=1;
    for(auto v:vec[u])
    {
        if(vs[v])continue;
        dfs(v);
    }
}
int _find(int x)
{
    if(pr[x]==x)return x;
    return pr[x]=_find(pr[x]);
}
void _union(int p,int q)
{
    if(siz[q]>siz[p])swap(p,q);
    pr[q]=p;siz[p]+=siz[q];
}
void _run()
{
    int n,m,k,dg=0;cin>>n>>m>>k;
    set<int>nod;
    while(m--)
    {
        int u,v;cin>>u>>v;
        if(u==1||v==1)
        {
            if(u==1)nod.insert(v);
            else nod.insert(u);
            dg++;
        }
        else vec[u].pb(v),vec[v].pb(u);
    }
    for(int i=2;i<=n;i++)
    {
        if(vs[i])continue;
        ++id;dfs(i);
    }
    if(id>k||k>dg)no();
    memset(vs,0,sizeof vs);
    for(int i=2;i<=n&&k;i++)
    {
        if(vs[com[i]]==0&&nod.find(i)!=nod.end())vs[com[i]]=1,k--,vec[1].pb(i),vec[i].pb(1),nod.erase(i);
    }
    for(auto x:nod)
    {
        if(k==0)break;
        vec[1].pb(x);vec[x].pb(1);
        k--;
    }
    for(int i=1;i<=n;i++)pr[i]=i,siz[i]=1;
    for(auto x:vec[1])_union(1,x),rs[1].pb(x);
    for(int i=2;i<=n;i++)
    {
        for(auto x:vec[i])
        {
            int p=_find(i),q=_find(x);
            if(p!=q)_union(p,q),rs[i].pb(x);
        }
    }
    cout<<"YES\n";
    for(int i=1;i<=n;i++)
    {
        if((int)rs[i].size()==0)continue;
        for(auto x:rs[i])
            cout<<i<<" "<<x<<"\n";
    }
}
