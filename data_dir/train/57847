/**************************************************************
    Problem: ????
    User: little_Bear_c
    Language: GNU_C++11
    Result: Accepted
    Time:0 ms
    Memory:0 kb
    length:0 kb
    score: inf
****************************************************************/
//CLOCKS_PER_SEC
using namespace std;
#include<bitset>
#include<deque>
#include<stdint.h>
#include<set>
#include<stack>
#include <iostream>
#include <algorithm>
#include<cmath>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<iomanip>
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<queue>
#include<cstring>
#include<ctime>
#include<map>
#define sqr(x) (x)*(x)
#define sort stable_sort
#define ll long long
#define mk make_pair
#define pb push_back
#define in insert
#define mtr(x,y,z) mk(mk(x,y),z)
#define fi first
#define se second
#define lch(x) ((x)<<1)
#define rch(x) (((x)<<1)|1)
#define all(x) (x).begin(),(x).end()
#define titose CLOCKS_PER_SEC
#define fpi(x) freopen(x,"r",stdin);
#define fpo(x) freopen(x,"w",stdout);
#define fprio fpi("in.txt");fpo("out.txt");
#define fast ios_base::sync_with_stdio(false);
void read(int &x){int v=0,f=1;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=v*10+c-'0';while (isdigit(c=getchar())) v=v*10+c-'0';x=v*f;}
void read(ll &x){ll v=0ll,f=1ll;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=v*10+c-'0';while (isdigit(c=getchar())) v=v*10+c-'0';x=v*f;}
void readc(char &x){char c;while ((c=getchar())==' ');x=c;}
void writes(string s){puts(s.c_str());}
void writeln(){writes("");}
void writei(int x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
void writell(ll x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
/*
#pragma GCC optimize("-funsafe-loop-optimizations")
#pragma GCC optimize("-funroll-loops")
#pragma GCC optimize("-fwhole-program")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("-fthread-jumps")
#pragma GCC optimize("-falign-functions")
#pragma GCC optimize("-falign-jumps")
#pragma GCC optimize("-falign-loops")
#pragma GCC optimize("-falign-labels")
#pragma GCC optimize("-fcaller-saves")
#pragma GCC optimize("-fcrossjumping")
#pragma GCC optimize("-fcse-follow-jumps")
#pragma GCC optimize("-fcse-skip-blocks")
#pragma GCC optimize("-fdelete-null-pointer-checks")
#pragma GCC optimize("-fdevirtualize")
#pragma GCC optimize("-fexpensive-optimizations")
#pragma GCC optimize("-fgcse")
#pragma GCC optimize("-fgcse-lm")
#pragma GCC optimize("-fhoist-adjacent-loads")
#pragma GCC optimize("-finline-small-functions")
#pragma GCC optimize("-findirect-inlining")
#pragma GCC optimize("-fipa-sra")
#pragma GCC optimize("-foptimize-sibling-calls")
#pragma GCC optimize("-fpartial-inlining")
#pragma GCC optimize("-fpeephole2")
#pragma GCC optimize("-freorder-blocks")
#pragma GCC optimize("-freorder-functions")
#pragma GCC optimize("-frerun-cse-after-loop")
#pragma GCC optimize("-fsched-interblock")
#pragma GCC optimize("-fsched-spec")
#pragma GCC optimize("-fschedule-insns")
#pragma GCC optimize("-fschedule-insns2")
#pragma GCC optimize("-fstrict-aliasing")
#pragma GCC optimize("-fstrict-overflow")
#pragma GCC optimize("-ftree-switch-conversion")
#pragma GCC optimize("-ftree-tail-merge")
#pragma GCC optimize("-ftree-pre")
#pragma GCC optimize("-ftree-vrp")
#pragma GCC optimize(2)
#pragma GCC optimize(3)
#pragma GCC optimize(4)
#pragma GCC optimize(5)
#pragma GCC optimize(6)
#pragma GCC optimize(7)
#pragma GCC optimize(8)
#pragma GCC optimize(9)
*/
inline long long inc(int &x){return ++x;}
inline long long inc(long long &x){return ++x;}
inline long long inc(int &x,long long y){return x+=y;}
inline long long inc(long long &x,long long y){return x+=y;}
inline double inc(double &x,double y){return x+=y;}
inline long long dec(int &x){return --x;}
inline long long dec(long long &x){return --x;}
inline long long dec(int &x,long long y){return x-=y;}
inline long long dec(long long &x,long long y){return x-=y;}
inline double dec(double &x,double y){return x-=y;}
inline long long mul(int &x){return x=((long long)x)*x;}
inline long long mul(long long &x){return x=x*x;}
inline long long mul(int &x,long long y){return x*=y;}
inline long long mul(long long &x,long long y){return x*=y;}
inline double mul(double &x,double y){return x*=y;}
inline long long divi(const int &x)
{
    long long ans,l,r,mid;
    ans=0;l=0;r=0x3fffffff;
    while (l<r)
    {
        mid=(l+r)/2;
        if (mid*mid<=x)
        {
            ans=mid;
            l=mid+1;
        }
        else r=mid;
    }
    return ans;
}
inline long long divi(const long long &x)
{
    long long ans,l,r,mid;
    ans=0;l=0;r=0x3fffffff;
    while (l<r)
    {
        mid=(l+r)/2;
        if (mid*mid<=x)
        {
            ans=mid;
            l=mid+1;
        }
        else r=mid;
    }
    return ans;
}
inline long long divi(int &x,long long y){return x/=y;}
inline long long divi(long long &x,long long y){return x/=y;}
inline double divi(double &x,double y){return x/=y;}
inline long long mod(int &x,long long y){return x%=y;}
inline long long mod(long long &x,long long y){return x%=y;}
#define pii pair<int,int>
#define pll pair<ll,ll>
#define vi vector<int>
#define vl vector<ll>
#define si set<int>
#define sl set<ll>
#define mii map<int,int>
#define mll map<ll,ll>
#define msi map<string,int>
#define msl map<string,ll>
#define piii pair<int,pii >
#define piipi pair<pii,int>
#define plll pair<ll,pll >
#define pllpl pair<pll,ll>
#define pqi priority_queue<int>
#define pql priority_queue<ll>
#define npqi priority_queue<int,vector<int>,greater<int> >
#define npql priority_queue<ll,vector<ll>,greater<ll> >
#define forup(i,x,y) if ((x)<=(y)) for ((i)=(x);(i)<=(y);(i)++)
#define fordo(i,x,y) if ((x)>=(y)) for ((i)=(x);(i)>=(y);(i)--)
#define rep(i,x) forup ((i),1,(x))
#define repd(i,x) fordo ((i),(x),1)
#define itr iterator
#define forcsc(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define NO {cout<<"NO";return 0;}
#define YES {cout<<"YES";return 0;}
#define y0 y000000000000000000000000000
#define y1 y111111111111111111111111111
#define j0 j000000000000000000000000000
#define j1 j111111111111111111111111111
#define cl0(a) memset((a),(0),(sizeof((a))))
#define clz(a) memset((a),(0x16),(sizeof((a))))
#define clf(a) memset((a),(-(0x16)),(sizeof((a))))
#define inf 0x3bbbbbbb
#define lnf 0x1bbbbbbbbbbbbbbbll
#define sqrt divi
#define p2(i) (1ll<<(i))
#define readi read
#define readll read
/*************************************************/
int n,m,i,j,k,sa[400005],rk[400005],lcp[400005],lcp2[400005],c[400005],x[400005],y[400005],l[400005],r[400005],f[400005],lst,cnt,g[400005];
stack<int> stk;
long long ans;
string st;
char ss[400005],cc;
int main()
{
    scanf("%d",&n);
    scanf(" %s",ss);st=ss;reverse(all(st));scanf(" ");
    ans=0;
    repd(i,n)
    {
        scanf("%c",&cc);
        f[i]=cc-'0';
        if (!f[i]) ans=max(ans,1ll*(n-i+1));
        f[i]=1-f[i];
    }
    n=st.length();m='{';st=" "+st;
    rep(i,m) c[i]=0;
    rep(i,n) c[x[i]=st[i]]++;
    rep(i,m) c[i]+=c[i-1];
    rep(i,n) sa[c[x[i]]--]=i;
    for (k=1;k<=n;k<<=1)
    {
        cnt=0;
        for (i=n-k+1;i<=n;i++) y[++cnt]=i;
        rep(i,n) if (sa[i]>k) y[++cnt]=sa[i]-k;
        rep(i,m) c[i]=0;
        rep(i,n) c[x[i]]++;
        rep(i,m) c[i]+=c[i-1];
        repd(i,n) sa[c[x[y[i]]]--]=y[i];
        swap(x,y);
        cnt=1;
        rep(i,n)
        {
            if (i>1&&(y[sa[i]]!=y[sa[i-1]]||y[sa[i]+k]!=y[sa[i-1]+k])) cnt++;
            x[sa[i]]=cnt;
        }
        if (cnt>=n) break;
        m=cnt;
    }
    rep(i,n) rk[sa[i]]=i;
    lst=0;cnt=0;
    rep(i,n)
    {
        if (rk[i]==1)
        {
            lst=0;
            continue;
        }
        j=sa[rk[i]-1];
        if (lst) lst--;
        while (st[i+lst]==st[j+lst]) lst++;
        lcp[rk[i]]=lst;
    }
    rep(i,n)
    {
        lcp2[cnt]=min(lcp2[cnt],lcp[i]);
        if (f[sa[i]])
        {
            cnt++;
            lcp2[cnt]=inf;
        }
    }
    m=cnt;
    rep(i,m-1)
    {
        while (!stk.empty()&&lcp2[stk.top()]>=lcp2[i])
        {
            r[stk.top()]=i-1;
            stk.pop();
        }
        stk.push(i);
    }
    while (!stk.empty())
    {
        r[stk.top()]=m-1;
        stk.pop();
    }
    repd(i,m-1)
    {
        while (!stk.empty()&&lcp2[stk.top()]>lcp2[i])
        {
            l[stk.top()]=i+1;
            stk.pop();
        }
        stk.push(i);
    }
    while (!stk.empty())
    {
        l[stk.top()]=1;
        stk.pop();
    }
    rep(i,m-1) ans=max(ans,1ll*lcp2[i]*(r[i]-l[i]+2));
    cout<<ans<<endl;////
    return 0;
}