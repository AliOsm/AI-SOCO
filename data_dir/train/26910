#include <bits/stdc++.h>
using namespace std;
#define double long double
#define int long long
#define f first
#define s second
#define x(i) v[i].f
#define y(i) v[i].s
double getarea(vector<pair<double,double> > &v)
{
    v.push_back(v[0]);
    double ans = 0;
    for(int i=0;i<v.size()-1;i++)
    {
        ans += (x(i)-x(0))*(y(i+1)-y(0)) - (x(i+1)-x(0))*(y(i)-y(0));
    }
    ans /= 2.l;
    ans = abs(ans);
    v.pop_back();
    return ans;
}
double getangle(double x1, double y1, double x2, double y2)
{
    double dot = x1*x2+y1*y2;
    double cross = x1*y2-x2*y1;
    return atan2l(cross,dot); 
}
pair<double,double> getcentroid(vector<pair<double,double> > &v)
{
    double area = getarea(v);
    double den = (6*area);
    v.push_back(v[0]);
    double ansx = 0, ansy = 0;
    for(int i=0;i<v.size()-1;i++)
    {
        ansx += (x(i)+x(i+1)-2*x(0))*((x(i)-x(0))*(y(i+1)-y(0)) - (x(i+1)-x(0))*(y(i)-y(0)));
        ansy += (y(i)+y(i+1)-2*y(0))*((x(i)-x(0))*(y(i+1)-y(0)) - (x(i+1)-x(0))*(y(i)-y(0)));
    }
    ansx /= den;
    ansy /= den;
    ansx += x(0);
    ansy += y(0);
    v.pop_back();
    return make_pair(ansx,ansy);
}
pair<double,double> getcent(double cx1, double cy1, double x2, double y2)
{
    double ansx = x2;
    double dist = sqrtl(((cx1-x2)*(cx1-x2) + (cy1-y2)*(cy1-y2)));
    double ansy = y2-dist;
    return make_pair(ansx,ansy);
}
pair<double,double> rotate(pair<double,double> p,double angle)
{
    pair<double,double> ans;
    ans.f = p.f*cosl(angle)-p.s*sinl(angle);
    ans.s = p.s*cosl(angle)+p.f*sinl(angle);
    return ans;
}
int32_t main() {
    ios::sync_with_stdio(false);cin.tie(0);
    cout<<fixed<<setprecision(10);
    int n,m;
    cin>>n>>m;
    vector<pair<double,double> > pts(n);
    int p1 = 0, p2 = 1;
    for(auto &i:pts) cin>>i.f>>i.s;
    pair<double,double> centroid = getcentroid(pts);
    vector<pair<double,double> > ptscent(n);
    for(int i=0;i<n;i++)
    {
        ptscent[i].f = pts[i].f-centroid.f;
        ptscent[i].s = pts[i].s-centroid.s;
    }
    int type,x,y;
    double rotangle = 0;
    while(m--)
    {
        cin>>type>>x;
        if(type == 1)
        {
            cin>>y;
            x--;
            if(x == p1)
            {
                swap(p1,p2);
            } 
            auto rot = rotate(ptscent[p1],rotangle);
            pts[p1] = make_pair(centroid.f+rot.f,centroid.s+rot.s);    
            p2 = y-1;
            centroid = getcent(centroid.f,centroid.s,pts[p1].f,pts[p1].s);
            rotangle = getangle(ptscent[p1].f,ptscent[p1].s,pts[p1].f-centroid.f,pts[p1].s-centroid.s);
        }
        else
        {
            auto rot = rotate(ptscent[x-1],rotangle);
            cout<<centroid.f+rot.f<<" "<<centroid.s+rot.s<<'\n';
        }
    }
    return 0;
}