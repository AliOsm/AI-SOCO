#include <bits/stdc++.h>

using namespace std;

typedef pair<int,int> pii;
typedef long long ll;

const int N = 5*100000+1;

int n , m , c , c0,q;

vector< pair<int,pii> > cur;
vector<int> cord;

multiset< pii > pq;

int main(){
	cin >> q;
	while(q--){
		scanf("%d%d%d%d",&n,&m,&c,&c0);
		cur.clear();
		cord.clear();
		pq.clear();
		for (int t,a,b,i = 0; i < n; ++i){
			scanf("%d%d%d",&t,&a,&b);
			cord.push_back(t);
			cur.push_back(make_pair(t,make_pair(a,b)));
		}
		cur.push_back(make_pair(0,make_pair(c0,0)));
		cur.push_back(make_pair(m,make_pair(0,0)));
		cord.push_back(0);
		cord.push_back(m);
		sort(cur.begin(),cur.end());
		sort(cord.begin(),cord.end());
		cord.resize(unique(cord.begin(),cord.end())-cord.begin());
		int idx = 0;
		ll sum = 0,ans = 0;
		for (int i = 0; i < cord.size(); ++i){
			ll ds = (cord[i] - (i?cord[i-1]:0));
			while(ds > 0 && pq.size()){
				pii tp = *pq.begin();
				pq.erase(pq.begin());
				ll rm = min(ds,(ll)tp.second);
				ds -= rm;
				sum -= rm;
				ans += rm*tp.first;
				if(rm != tp.second){
					pq.insert(make_pair(tp.first,tp.second-rm));
				}
			}
			while(idx < cur.size() && cur[idx].first <= cord[i]){
				pq.insert(make_pair(cur[idx].second.second,cur[idx].second.first));
				sum += cur[idx].second.first;
				idx++;
			}
			while(sum > c){
				pii tp = *--pq.end();
				ll rm = min(sum-c,(ll)tp.second);
				sum -= rm;
				pq.erase(--pq.end());
				if(rm != tp.second){
					pq.insert(make_pair(tp.first,tp.second-rm));
				}
			}

			if(ds > 0){
				ans = -1;
				break;
			}
		}
		printf("%lld\n", ans);

	}
	return 0;
}