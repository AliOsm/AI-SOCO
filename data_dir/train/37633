#define _USE_MATH_DEFINES

#include <iostream>
#include <cstdio>
#include <string>
#include <cstdlib>
#include <set>
#include <utility>
#include <vector>
#include <list>
#include <algorithm>
#include <regex>
#include <cmath>
#include <map>
#include <iterator>
#include <climits>
#include <numeric>
#include <bitset>
#include <unordered_map>
#include <unordered_set>
#include <iomanip>
#include <queue>
#include <deque>
#include <stack>
#include <array>
#include <valarray>
#include <complex>
#include <random>
#include <functional>
#include <cassert>
#include <chrono>
#include <memory>

using namespace std;

//#define int long long
//region TEMPLATE
#define double long double
typedef long long ll;
typedef unsigned long long ull;

template<typename T>
void __read(T &a) { cin >> a; }

template<typename T, typename ... Args>
void __read(T &a, Args &... args) {
    cin >> a;
    __read(args...);
}

#define make(t, ...) t __VA_ARGS__; __read(__VA_ARGS__)
#define makev(a, n) VI a(n); FOR(n) cin >> a[i];
#define ALL(x) (x).begin(), (x).end()
#define RALL(x) (x).rbegin(), (x).rend()
#define FORIT(p) for(auto it = p.begin(); it != p.end(); it++)
#define FOR(b) for(signed i = 0; i <(b); i++)
#define FORE(i, l, r) for(int i = (l); i < (r); i++)
#define NFOR(i, n) for(int i = (((int) n)-1); i >= 0; i--)
typedef vector<int> VI;
typedef vector<vector<int>> VVI;
typedef pair<int, int> PII;
typedef pair<pair<int, int>, int> PPII;
constexpr ll M7 = 1000000007ll;
constexpr ll M9 = 1000000009ll;
constexpr ll MFFT = 998244353ll;
template<class T>
void outv(T &a) { for (auto &x : a) cout << x << ' '; }
static mt19937 rnd(static_cast<unsigned>(chrono::steady_clock::now().time_since_epoch().count())); // NOLINT(cert-err58-cpp)
template<class T>
static auto __super_speed__ = (ios_base::sync_with_stdio(0), cin.tie(
        0)); // NOLINT(cert-err58-cpp,cppcoreguidelines-interfaces-global-init)
//endregion

VVI g;
VI c;

VI dfs(int v){
    VI d;
    for(int u : g[v]){
        auto t = dfs(u);
        if (t.empty()){
            return {};
        }
        d.insert(d.end(), ALL(t));
    }
    if (d.size() < c[v]){
        return {};
    }
    d.insert(d.begin() + c[v], v);
    return d;
}

int32_t main() {
    make(int, n);
    int root = -1;
    g = VVI(n);
    c = VI(n);
    for(int i = 0; i < n; ++i){
        make(int, p);
        cin >> c[i];
        if (p == 0){
            root = i;
        }else{
            g[p - 1].push_back(i);
        }
    }
    auto res = dfs(root);
    if (res.empty()){
        cout << "NO";
    }else{
        cout << "YES\n";
        VI ans(n);
        for(int i = 0; i < n; ++i){
            ans[res[i]] = i;
        }
        for(auto& val : ans){
            cout << val + 1 << ' ';
        }
    }
    return 0;
}