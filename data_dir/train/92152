#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#define lch a[n].lc
#define rch a[n].rc
using namespace std;
const long long inf=1e9+1;
const int maxn=100010;
int n,m,root,topt;
long long v[maxn],x,l,r,ans;
struct da{int lc,rc,sum;}a[50*maxn];
inline void updata(int n){a[n].sum=a[lch].sum+a[rch].sum;}
void tree_add(int &n,long long l,long long r,long long lc)
{
	if (!n) n=++topt;
	if (l==r) {a[n].sum=1; return;}
	int mid=(l+r)>>1;
	if (lc<=mid) tree_add(lch,l,mid,lc);else tree_add(rch,mid+1,r,lc);
	updata(n);
}
int qury(int n,long long L,long long R,long long l,long long r)
{
	if (!n) return 0;
	if (L==l && R==r) return a[n].sum;
	int mid=(L+R)>>1;
	if (r<=mid) return qury(lch,L,mid,l,r);
	else if (l>=mid+1) return qury(rch,mid+1,R,l,r);
	else return qury(lch,L,mid,l,mid)+qury(rch,mid+1,R,mid+1,r);
}
bool ok(long long r)
{
	for (int i=1;i<=n;i++) 
	 if (qury(root,1,2e9+1,max(v[i]-r,1ll),min(v[i]+r,2ll*inf))==0) return 0;
return 1;
}
int main()
{
	scanf("%d%d",&n,&m);
	for (int i=1;i<=n;i++) scanf("%lld",&v[i]),v[i]+=inf;
	for (int i=1;i<=m;i++) scanf("%lld",&x),tree_add(root,1,2e9+1,x+inf);
	l=0; r=2e9+1; ans=r;
	while (l<=r)
	{
		long long mid=(l+r)>>1;
		if (ok(mid)) {ans=min(ans,mid); r=mid-1;}else l=mid+1;
	}
	printf("%lld\n",ans);
return 0;
}