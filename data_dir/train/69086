#include <bits/stdc++.h>
using namespace std;

struct Segment {
  int l, r;
  
  int len() {
    if (l > r) {
      return 0;
    }
    return r - l + 1;
  }
  
  friend Segment operator +(const Segment& a, int x) {
    return {a.l + x, a.r + x};
  }
  
  friend Segment operator -(const Segment& a, int x) {
    return {a.l - x, a.r - x};
  }
};

Segment intersect(const Segment& a, const Segment& b) {
  return {max(a.l, b.l), min(a.r, b.r)};
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int l[2], r[2], t[2];
  for (int i = 0; i < 2; ++i) {
    cin >> l[i] >> r[i] >> t[i];
  }
  
  int rs = 0;
  for (int i = 0; i < 2; ++i) {
    swap(l[0], l[1]);
    swap(r[0], r[1]);
    swap(t[0], t[1]);
    
    Segment f = {0, r[0] - l[0]};
    Segment s = {0, r[1] - l[1]};
    
    int d = l[0] - l[1];
    int g = __gcd(t[0], t[1]);
    d %= g;
    if (d < 0) d += g;
    
    rs = max(rs, intersect(f, s - d).len());
    rs = max(rs, intersect(f, s + g - d).len());
    
    f = {l[0] - r[0], 0};
    s = {l[1] - r[1], 0};
    
    d = r[0] - r[1];
    g = __gcd(t[0], t[1]);
    d %= g;
    if (d < 0) d += g;
    
    rs = max(rs, intersect(f, s - d).len());
    rs = max(rs, intersect(f, s + g - d).len());
  }
  
  cout << rs << '\n';
  
}
