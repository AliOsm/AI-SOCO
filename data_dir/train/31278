#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;
const int N = 100010;

inline int in() {int x; scanf("%d",&x); return x;}
inline ll lin() {ll x; scanf("%I64d",&x); return x;}

int fx[] = {1,-1,0,0};
int fy[] = {0,0,1,-1};

char s[1005][1005];

int row, col;
int dist[1005][1005];

pii start;
pii mine;

int Valid(int x, int y){
    if(x < 0 || y < 0) return 0;
    if(x >= row || y >= col) return 0;
    return 1;
}

void BFS(){
    for(int i = 0;i < 1005; i++){
        for(int j = 0;j < 1005; j++){
            dist[i][j] = 1e9;
        }
    }

    queue < pii > Q;
    Q.push(start);
    dist[start.fs][start.se] = 0;

    while(!Q.empty()){
        pii u = Q.front();
        Q.pop();

        for(int i = 0;i <= 3; i++){

                int x = fx[i] + u.fs, y = fy[i] + u.se;
                if(Valid(x,y)){
                    if(s[x][y] != 'T'){
                        if(dist[u.fs][u.se] + 1 < dist[x][y]){
                            dist[x][y] = dist[u.fs][u.se] + 1;
                            Q.push(mp(x,y));
                        }
                    }
                }
        }
    }
}

int main(){
    row = in(); col = in();
    for(int i = 0;i < row; i++){
        scanf("%s",s[i]);
    }

    for(int i = 0;i < row; i++){
        for(int j = 0;j < col; j++){
            if(s[i][j] == 'E') start = mp(i , j);
            if(s[i][j] == 'S') mine = mp(i , j);
        }
    }

    BFS();

    int x = dist[mine.fs][mine.se], ans = 0;
    for(int i = 0;i < row; i++){
        for(int j = 0;j < col; j++){
            if(s[i][j] == 'T' || s[i][j] == 'E' || s[i][j] == 'S') continue;
            if(dist[i][j] <= x){
                ans += (s[i][j] - '0');
            }
        }
    }

    printf("%d\n",ans);
}
