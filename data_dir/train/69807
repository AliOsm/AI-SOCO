#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define ndl '\n'
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<int, ll> pil;
typedef pair<ll, int> pli;
typedef pair<int, ull> piu;
typedef vector<vector<int>> matrix;

const ll INF = 1e18 + 123;
const ld EPS = 1e-9;
const int inf = 1e9 + 123;
const int MOD = 1e9 + 7;
const int N = 1e5 + 123;
const int M = 1e6 + 123;
const double pi = acos(-1.0);
const int dx[] = {0, 0, 1, -1};
const int dy[] = {1, -1, 0, 0};

int a[N], m = 1, x[N];

int t[N*8];

void upd(int pos, int val, int v = 0, int tl = 0, int tr = m){
    if (tl + 1 == tr){
        t[v] = val;
        return;
    }
    int tm = tl + tr >> 1;
    if (pos <= tm){
        upd(pos, val, v+v+1, tl, tm);
    }
    else{
        upd(pos, val, v+v+2, tm, tr);
    }
    t[v] = min(t[v+v+1], t[v+v+2]);
}

int get(int r, int v = 0, int tl = 0, int tr = m){
    if (r <= tl){
        return inf;
    }
    if (tr <= r){
        return t[v];
    }
    int tm = tl + tr >> 1;
    return min(get(r, v+v+1, tl, tm),
               get(r, v+v+2, tm, tr));
}

map<int, int> id;

int ans[N];

int main(){
    #ifdef KAZAKH
        freopen("input.txt", "r", stdin);
    #endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n;
    cin >> n;
    int mn = inf, mx = 0;
    for (int i = 0; i < n; i++){
        cin >> a[i];
        mx = max(mx, a[i]);
        mn = min(mn, a[i]);
        id[a[i]];
        id[(a[i] + 1) / 2];
    }
    if ((mx + 1) / 2 <= mn){
        while (n--){
            cout << "-1 ";
        }
        return 0;
    }
    for (auto & p : id){
        p.y = m++;
    }
    for (int i = 0; i < m; i++){
        upd(i, inf);
    }
    int l = inf;
    for (int i = n-1; i >= 0; i--){
        l = min(l, get(id[(a[i] + 1) / 2]-1));
        x[i] = l;
       // cout << id[a[i]] << " ";
        upd(id[a[i]], i);
        if (x[i] != inf){
            ans[i] = x[i] - i;
        }
    }
    l = inf;
    for (int i = n-1; i >= 0; i--){
        if (x[i] != inf) break;
        l = min(l, get(id[(a[i] + 1) / 2]-1));
        //cout << id[(a[i]+1)/2] << endl;
        x[i] = l;
        if (x[i] != inf){
            ans[i] = n - i + x[i];
            if (ans[0]){
                ans[i] = min(ans[i], ans[0] + (n-i));
            }
        }
    }
    assert(ans[0]);
    for (int i = 0; i < n; i++){
        if (ans[i] == 0){
            ans[i] = ans[0] + (n - i);
        }
        cout << ans[i] << " ";
    }
    return 0;
}
