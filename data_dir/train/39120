#include<bits/stdc++.h>
using namespace std;

struct rect{
    int x, y, X, Y;

    int area() {
        return (X-x)*(Y-y);
    }

    bool Break(rect cut, rect &A, rect &B) {
        if (cut.x==cut.X) {
            if (x < cut.x && cut.x < X && cut.y == y && cut.Y == Y) {
                A = { x, y, cut.x, Y};
                B = {cut.x, y,  X, Y};
                return true;
            }
            else return false;
        }
        else if (cut.y == cut.Y) {
            if (y < cut.y && cut.y < Y && cut.x == x && cut.X == X) {
                A = {x,  y, X, cut.y};
                B = {x, cut.y, X,  Y};
                return true;
            }
            else return false;
        }
        return false;
    }
};

int main() {
    int W, H, n;
    cin>>W>>H>>n;

    vector<rect> v;
    rect initial = {0, 0, W, H};
    v.push_back(initial);

    vector<rect> cuts;

    for (int i=1; i<=n; i++) {
        int xx, yy, XX, YY;
        cin>>xx>>yy>>XX>>YY;
        cuts.push_back({xx, yy, XX, YY});
    }

    for (int ii=1; ii<=n; ii++) {
        rect r1, r2;
        bool found = false;
        for (int i=0; i<cuts.size() && !found; i++) {
            for (int j=0; j<v.size() && !found; j++) {
                if (!v[j].Break(cuts[i], r1, r2))    continue;
                v.erase(v.begin()+j);
                v.push_back(r1);
                v.push_back(r2);
                found = true;
            }
        }
        assert(found);
    }
    vector<int> ans;
    for (rect r: v)
        ans.push_back(r.area());
    sort(ans.begin(), ans.end());
    for (int x: ans)
        cout<<x<<" ";
    cout<<endl;

}
