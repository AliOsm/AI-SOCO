/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ld PI = 3.14159265358979323846;

#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

class AMikeAndFax {
public:
	bool pal(string s){
		int i = 0, j = s.length()-1;
		while(i<j) if(s[i++]!=s[j--]) return false;
		return true;
	}
	void solve(std::istream& in, std::ostream& out) {
		string s; in>>s;
		int k; in>>k;
		int n = s.length();
		if(n%k!=0){
			out<<"NO";
			return;
		}
		int start = 0;
		f(i, k){
			if(!pal(s.substr(start, n/k))){
				out<<"NO";
				return;
			}
			start += n/k;
		}
		out<<"YES";
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	AMikeAndFax solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
