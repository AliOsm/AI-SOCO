#include <bits/stdc++.h>
using namespace std;

const int inf = 1e9;

struct point
{
    int x, y;
    point( )
    {
        x = y = 0;
    }
};

int cmp(point a, point b)
{
    if (a.x == b.x)
        return a.y < b.y;
    return a.x < b.x;
}

int dist(point a, point b)
{
    int dx = a.x - b.x;
    int dy = a.y - b.y;
    return (dx * dx + dy * dy);
}

void next_point(point a, point o, point &b)
{
    b.x = - (a.y - o.y) + o.x;
    b.y = (a.x - o.x) + o.y;
    //cout << b.x << ' ' << b.y << '\n';
}

int are_lombo(point a, point b, point c, point d)
{
    int p, q, r, s;
    p = a.y - b.y;
    q = a.x - b.x;
    r = c.y - d.y;
    s = c.x - d.x;
    if ( (p * r) == - (q * s) )
        return 1;
    return 0;
}

int are_square(vector<point> v)
{
    sort(v.begin( ), v.end( ), cmp);
//    for (int i = 0; i < 4; i++)
//        cout << " *** " << v[i].x << ' ' << v[i].y << ' ';
//    cout << '\n';
    int ab, bc, cd, da, ac, bd;
    ab = dist(v[0], v[1]);
    bc = dist(v[1], v[3]);
    cd = dist(v[3], v[2]);
    da = dist(v[2], v[0]);
    ac = dist(v[0], v[3]);
    bd = dist(v[1], v[2]);
    int fl = (are_lombo(v[0], v[1], v[1], v[3]) &
             are_lombo(v[1], v[3], v[3], v[2]));
    //cout << ab << ' ' << bc << ' ' << cd << ' ' << da << ' ' << fl << '\n';
    if (ab > 0 && ab == bc && bc == cd && cd == da && ac == bd && fl == 1)
        return 1;
    return 0;
}

point po[444];
point rf[444];

void prnt(vector<point> v)
{
    for (int i = 0; i < 4; i++)
        cout << v[i].x << ' ' << v[i].y << ' ';
    cout << '\n';
}

int solve(int ind)
{
    int i, j, k, l, p, q, r, s, mn = inf;
    vector<point> v;
    point tt[4], tm;
    for (j = 0; j < 4; j++)
        tt[j] = po[ind + j];
    for (p = 0; p < 4; p++)
    {
        if (p == 0)
            tt[0] = po[ind + 0];
        v.push_back(tt[0]);
        for (q = 0; q < 4; q++)
        {
            if (q == 0)
                tt[1] = po[ind + 1];
            v.push_back(tt[1]);
            for (r = 0; r < 4; r++)
            {
                if (r == 0)
                    tt[2] = po[ind + 2];
                v.push_back(tt[2]);
                for (s = 0; s < 4; s++)
                {
                    if (s == 0)
                        tt[3] = po[ind + 3];
                    v.push_back(tt[3]);
                    //prnt(v);
                    if (are_square(v) == 1)
                    {
                        mn = min(mn, p + q + r + s);
//                        for (i = 0; i < 4; i++)
//                            cout << v[i].x << " / " << v[i].y << '\n';
                    }
                    next_point(tt[3], rf[ind + 3], tm);
                    tt[3] = tm;
                    //cout << tm.x << ' ' << tm.y << ' ' << tt[3].x << ' ' << tt[3].y << '\n';
                    v.pop_back( );
                }
                next_point(tt[2], rf[ind + 2], tm);
                tt[2] = tm;
                v.pop_back( );
            }
            next_point(tt[1], rf[ind + 1], tm);
            tt[1] = tm;
            v.pop_back( );
        }
        next_point(tt[0], rf[ind], tm);
        tt[0] = tm;
        v.pop_back( );
    }
    if (mn >= inf) return -1;
    return mn;
}

int main( )
{
    //freopen("out.txt", "w", stdout);
    int n, i, j, k, x, y;
    cin >> n;
    for (i = 1; i <= 4 * n; i++)
        cin >> po[i].x >> po[i].y >> rf[i].x >> rf[i].y;
    for (i = 1; i <= 4 * n; i += 4)
        cout << solve(i) << '\n';
    return 0;
}
