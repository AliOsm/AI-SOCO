#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<string>
#include<math.h>
#include<queue>
#include<stack>
#include<stdio.h>
#include<map>
#include<set>
#include<memory.h>
#include<algorithm>
#include<vector>
using namespace std;
typedef long long ll;
ll gcd(ll a, ll b){
    if (!b)
        return a;
    return gcd(b, a%b);
}
ll lcm(ll a, ll b){
    return b / gcd(a, b)*a;
}
#define FOR(I,N) for(int(i)=0;i<int(N);++i)
#define FORK(I,N,K) for(int(i)=0;i<int(N);i+=int(K))
int n;
int g[5000];
const int N = 4001;
vector<int>nxt[N];
bool done[N][N];
int main(){
    cin >> n;
    int res = 0;
    vector<int>un;
    FOR(0, n){
        scanf("%d", &g[i]);
        un.push_back(g[i]);
    }
    sort(un.begin(), un.end());
    FOR(0, n){
        g[i] = lower_bound(un.begin(), un.end(), g[i]) - un.begin();
        nxt[g[i]].push_back(i);
    }
    FOR(0, n){
        res = max(res, (int)nxt[g[i]].size());
        for (int j = i + 1; j < n; ++j){
            if (g[i] == g[j])
                continue;
            if (done[g[i]][g[j]])
                continue;
            done[g[i]][g[j]] = 1;
            int cur = 2;
            int x = g[i];
            int y = g[j];
            int idx = j;
            while (true){
                idx = lower_bound(nxt[x].begin(), nxt[x].end(), idx) - nxt[x].begin();
                if (idx == nxt[x].size())
                    break;
                ++cur;
                idx = nxt[x][idx];
                swap(x, y);
            }
            res = max(res, cur);
        }
    }
    cout << res << endl;
    cin >> n;
}