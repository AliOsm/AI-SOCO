#include <bits/stdc++.h>
#define fst first
#define snd second
using namespace std;

const long long inf = 1e15;
const int maxn = 1000005;

int n;
long long grid[8][maxn];
long long memo[8][maxn];

long long solve(int x = 3, int y = 0) {
	if (x >= 3 + 3 && y == n - 1) return 0;
	if (x == 2 + 3 && y >= n) return 0;
	if (x < 0 + 3 || x >= 3 + 3) return -inf;
	if (y < 0 || y >= n) return -inf;
	if (y == n - 1) {
		if (x == 0 + 3) return grid[x][y] + grid[x + 1][y] + grid[x + 2][y];
		if (x == 1 + 3) return grid[x][y] + grid[x + 1][y];
		if (x == 2 + 3) return grid[x][y];
	}
	if (memo[x][y] != -1) return memo[x][y];
	long long ret = -inf;
	ret = max(ret, grid[x][y] + solve(x, y + 1));
	ret = max(ret, grid[x][y] + grid[x + 1][y] + solve(x + 1, y + 1));
	ret = max(ret, grid[x][y] + grid[x + 1][y] + grid[x + 2][y] + solve(x + 2, y + 1));
	ret = max(ret, grid[x][y] + grid[x - 1][y] + solve(x - 1, y + 1));
	ret = max(ret, grid[x][y] + grid[x - 1][y] + grid[x - 2][y] + solve(x - 2, y + 1));
	ret = max(ret, grid[x][y] + grid[x][y + 1] + grid[x + 1][y + 1] + solve(x + 1, y + 2));
	ret = max(ret, grid[x][y] + grid[x][y + 1] + grid[x + 1][y + 1] + grid[x + 2][y + 1] + solve(x + 2, y + 2));
	ret = max(ret, grid[x][y] + grid[x][y + 1] + grid[x - 1][y + 1] + solve(x - 1, y + 2));
	ret = max(ret, grid[x][y] + grid[x][y + 1] + grid[x - 1][y + 1] + grid[x - 2][y + 1] + solve(x - 2, y + 2));
	ret = max(ret, grid[x][y] + grid[x][y + 1] + grid[x + 1][y] + grid[x + 1][y + 1] + grid[x + 2][y] + grid[x + 2][y + 1] + solve(x + 2, y + 2));
	ret = max(ret, grid[x][y] + grid[x][y + 1] + grid[x - 1][y] + grid[x - 1][y + 1] + grid[x - 2][y] + grid[x - 2][y + 1] + solve(x - 2, y + 2));
	return memo[x][y] = ret;
}

int main() {
	cin >> n;
	for (int i = 0; i < 8; i++) for (int j = 0; j < maxn; j++) grid[i][j] = -inf;
	for (int i = 0; i < 3; i++) for (int j = 0; j < n; j++) cin >> grid[i + 3][j];
	memset(memo, -1, sizeof memo);
	long long ans = solve();
	cout << ans << endl;
	return 0;
}
