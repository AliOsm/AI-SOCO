/*
Sol 1:
https://www.cnblogs.com/JYYHH/p/8535153.html
Recursively construction. It can be shown that if n is feasible,
then n+2 is also feasible. The way to do that is, based on solution
for n, treat 1 as a vertex 'one', all vertices reachable  (in {2...n})
from 1 (via a direct dege) as 'from_one', all vertices that can reach
1 as 'to_one', also treat (n+1) and (n+2) as individual vertices.
Then solve the problem on size of 5 {one, from_one, to_one, n+1, n+2}.

Sol 2:
http://wulala.logdown.com/posts/236425-codeforces-323b-tournament-graph
connect all i -> i+1;
then for every other pair of vertices (u, v) where u < v,
if (u%2) == (v%2), connect u -> v
otherwise connect v -> u
 */

#include <bits/stdc++.h>
using namespace std;
#define mp make_pair
#define pb push_back
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> l4;


// second solution. See above
int main()
{
  int n; scanf("%d", &n);
  if (n == 4)
    {
      puts("-1");
      return 0;
    }
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < n; ++j)
      {
	int v = -1;
	if (i == j) v = 0;
	else if (j == (i+1)%n) v = 1;
	else if (i == (j+1)%n) v = 0;
	else if ((2+(i-j)%2)%2 == 0) v = i<j;
	else if ((2+(i-j)%2)%2 == 1) v = i>j;
	else v = 0;
	printf("%d%c", v, " \n"[j+1==n]);
      }
}
