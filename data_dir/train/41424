#include <bits/stdc++.h>
#define ll long long

using namespace std;
int n , m , k ;
char a[100][100] ;
int v [100][100] ;
int tri [4] = {1 , 0 , -1 , 0} , trj [4] = {0 , 1 , 0 , -1} ;

vector <pair<int,int>> d ;
void dfs (int i , int j) {
    if (i < 0 || j < 0 || j > m + 1 || i > n + 1) return ;
    if (a[i][j] != '.') return ;
    if (v [i][j] ) return ;
    v[i][j] = 1 ;
    for (int p = 0 ; p < 4 ; p ++) {
        dfs(i + tri [p] , j + trj [p]) ;
    }
}
void dfs2 (int i , int j) {
    if (i < 1 || j < 1 || i > n || j > m) return ;
    if (a[i][j] != '.') return ;
    if (v [i][j]) return ;
    v[i][j] = 1 ;
    d.push_back({i , j}) ;
    for (int p = 0 ; p < 4 ; p ++) {
        dfs2(i + tri [p] , j + trj [p]) ;
    }
}
int main()
{
    cin >> n >> m >> k ;
    for (int i = 0 ; i <= n + 1 ; i ++) {
        a [i][0] = '.' ;
        a [i][m + 1] = '.' ;
    }
    for (int j = 0 ; j <= m + 1 ; j ++) {
        a [0][j] = '.' ;
        a [n + 1][j] = '.' ;
    }
    for (int i = 1 ; i <= n ; i ++) {
        for (int j = 1 ; j <= m ; j ++) {
            cin >> a[i][j] ;
        }
    }
    dfs(0 , 0) ;
    int tot = 0 ;
    map <int ,vector <vector <pair <int, int>>>> b ;
    for (int i = 1 ; i <= n ; i ++) {
        for (int j = 1 ; j <= m ; j ++) {
            if (a[i][j] != '.') continue ;
            if (v[i][j]) continue ;
            d.clear() ;
            dfs2(i , j) ;
            b [d.size()].push_back(d) ;
            tot ++ ;
        }
    }
    int ans = 0 ;
    while (tot != k) {
        d = b.begin() ->second.back () ;
        b.begin() ->second.pop_back () ;
        if (b.begin() ->second.size () == 0) {
            b.erase(b.begin()) ;
        }
        for (int i = 0 ; i < d.size() ; i ++) {
            a[d[i].first][d[i].second] = '*' ;
            ans ++ ;
        }
        tot -- ;
    }
    cout << ans << endl ;
    for (int i = 1 ; i <= n ; i ++) {
        for (int j = 1 ; j <= m ; j ++) {
            cout << a[i][j] ;
        }
        cout << endl ;
    }
    return 0;
}

