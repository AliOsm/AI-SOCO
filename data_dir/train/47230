#include <bits/stdc++.h>
using namespace std;

struct state
{
    int len, link;
    unordered_map<char, int> next;
};

const int N = (int)1e6;
state st[2 * N];
int sz, last;

void init()
{
    st[0].len = 0;
    st[0].link = -1;
    sz++;
    last = 0;
}

void addChar(char c)
{
    int cur = sz++;
    st[cur].len = st[last].len + 1;
    int p = last;
    while (p != -1 && !st[p].next.count(c))
    {
        st[p].next[c] = cur;
        p = st[p].link;
    }
    if (p == -1)
        st[cur].link = 0;
    else
    {
        int q = st[p].next[c];
        if (st[p].len + 1 == st[q].len)
            st[cur].link = q;
        else
        {
            int clone = sz++;
            st[clone].len = st[p].len + 1;
            st[clone].next = st[q].next;
            st[clone].link = st[q].link;
            while (p != -1 && st[p].next[c] == q)
            {
                st[p].next[c] = clone;
                p = st[p].link;
            }
            st[q].link = st[cur].link = clone;
        }
    }
    last = cur;
}

int vis[2 * N];
bool term[2 * N];
int mem[2 * N];

int dp(int i)
{
    if (mem[i] != -1)
        return mem[i];
    int ans = 0;
    for (auto it : st[i].next)
        ans += dp(it.second);
    if (term[i])
        ans++;
    return mem[i] = ans;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    string s;
    cin >> s;
    int n = s.length();
    init();
    for (int i = 0; i < n; i++)
        addChar(s[i]);

    int p = last;
    while (p >= 0)
    {
        term[p] = true;
        p = st[p].link;
    }
    memset(mem, -1, sizeof mem);
    int q;
    cin >> q;
    int vid = 1;
    while (q--)
    {
        long long ans = 0;
        vid++;
        string x;
        cin >> x;
        x += x;
        int m = x.length();
        int curState = 0, curLength = 0;
        for (int i = 0; i < m; i++)
        {
            while (curState > 0 && !st[curState].next.count(x[i]))
            {
                curState = st[curState].link;
                curLength = st[curState].len;
            }
            if (st[curState].next.count(x[i]))
            {
                curState = st[curState].next[x[i]];
                curLength++;
            }
            if (curLength == m / 2 && vis[curState] != vid)
            {
                vis[curState] = vid;
                ans += dp(curState);
            }

            if (curLength == m / 2)
            {
                curLength--;
                if (curLength == st[st[curState].link].len)
                    curState = st[curState].link;
            }
        }
        cout << ans << endl;
    }
}