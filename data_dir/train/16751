#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
// #pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>
#include <sstream>
#include <complex>
 
using namespace std;

#define int long long
#define ull unsigned long long
#define double long double
#define time time228
#define left left228
#define right right228

template<typename T> void uin(T &a, T b) {
    if (b < a) a = b;
}

template<typename T> void uax(T &a, T b) {
    if (b > a) a = b;
}

const int N = 100 * 1000 + 228;

int a[N], b[N], c[N];

bool cmp(int i, int j) {
	return a[i] - b[i] > a[j] - b[j];
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
	int n;
	cin >> n;
	for (int i = 1; i <= n; ++i) cin >> a[i] >> b[i];
	for (int i = 1; i <= n; ++i) c[i] = i;
	sort(c + 1, c + n + 1, cmp);
	int res = 0;
	for (int j = 1; j <= n; ++j) {
		int i = c[j];
		res += (j - 1) * a[i] + (n - j) * b[i];
	}
	cout << res << '\n';
	return 0;
}
