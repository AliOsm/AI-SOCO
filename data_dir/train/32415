#include <bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-12, PI = acos(-1);
const int N = 2e5 + 9, M = 1e3 + 9, OO = 1e9 + 7, MOD = 1e9 + 7, MOD2 = 998244353;
const ll inf = 1e18;

int arr[20][N], mem[(1<<16)][17][17], n, m, preMn[17][17], preBound[17][17];
int solve(int mask, int prv, int start) {
	if(mask + 1 == (1 << n))
		return 1e9;
	int& ret = mem[mask][prv][start];
	if(~ret)
		return ret;
	ret = 0;
	for (int i = 0; i < n; ++i) {
		if(mask & (1 << i)) continue;
		if(start == n) {
			ret = max(ret, solve(mask | (1 << i), i, i));
		} else {
			int val = preMn[i][prv];
//			for (int j = 0; j < m; ++j)
//				val = min(val, abs(arr[i][j] - arr[prv][j]));
			if((mask | (1 << i)) == ((1 << n) - 1)) {
//				for (int j = 1; j < m; ++j)
//					val = min(val, abs(arr[i][j - 1] - arr[start][j]));
				val = min(val, preBound[i][start]);
			}
			ret = max(ret, min(val, solve(mask | (1 << i), i, start)));
		}
	}
	return ret;
}

int main() {
  fastIO;
#ifdef LOCAL
  freopen("input.in", "rt", stdin);
#endif
  cin >> n >> m;
  for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j)
			cin >> arr[i][j];
	}
  for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if(i == j) continue;
			int val = OO;
			for (int k = 0; k < m; ++k)
				val = min(val, abs(arr[i][k] - arr[j][k]));
			preMn[i][j] = val;
			val = OO;
			for (int k = 1; k < m; ++k)
				val = min(val, abs(arr[i][k - 1] - arr[j][k]));
			preBound[i][j] = val;
		}
	}
  memset(mem, -1, sizeof mem);
  int ret = OO;
  if(n == 1) {
  	for (int j = 1; j < m; ++j)
			ret = min(ret, abs(arr[0][j] - arr[0][j - 1]));
  	cout << ret;
  	return 0;
  }
  cout << solve(0, 0, n);
  return 0;
}
