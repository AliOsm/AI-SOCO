// Why am I so dumb? :c
// chrono::system_clock::now().time_since_epoch().count()
                                                  
#include<bits/stdc++.h>
//#include<ext/pb_ds/assoc_container.hpp>
//#include<ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define mp make_pair

#define all(x) (x).begin(), (x).end()

#define fi first
#define se second

using namespace std;
//using namespace __gnu_pbds;

typedef long long ll;   
typedef pair<int, int> pii;
//template<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const int MAXN = (int)1e3 + 5;
const int INF = (int)1e6;

vector<int> vec[2][2];

int X[MAXN], Y[MAXN];

int n;

void printAns(vector<int> ans) {
    printf("%d\n", ans.size());

    for (int i = 0; i < ans.size(); ++i) {
        printf("%d%c", ans[i], " \n"[i + 1 == ans.size()]);
    }
}

void solve() {
    scanf("%d", &n);

    for (int i = 1; i <= n; ++i) {
        scanf("%d %d", &X[i], &Y[i]);
        X[i] += INF;
        Y[i] += INF;
    }

    while (1) {
        for (int i = 0; i < 2; ++i) {
            for (int j = 0; j < 2; ++j) {
                vec[i][j].clear();
            }
        }
        
        for (int i = 1; i <= n; ++i) {
            vec[X[i] % 2][Y[i] % 2].pb(i);
        }

        int A = vec[0][0].size();
        int B = vec[0][1].size();
        int C = vec[1][0].size();
        int D = vec[1][1].size();

        if (max({A, B, C, D}) == n) {
            for (int i = 1; i <= n; ++i) {
                X[i] /= 2;
                Y[i] /= 2;
            }

            continue;
        }

        if (A + D > 0 && B + C > 0) {
            vector<int> ans;

            for (int x : vec[0][0]) {
                ans.pb(x);
            }

            for (int x : vec[1][1]) {
                ans.pb(x);
            }

            printAns(ans);
            return;
        }

        if (A > 0 && D > 0) {
            printAns(vec[0][0]);
            return;
        }
        else {
            printAns(vec[0][1]);
            return;
        }
    }  
}

int main() {
    int tt = 1;

    while (tt--) {
        solve();
    }

    return 0;
}
