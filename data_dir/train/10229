/*input
5 2 3
6 8 11 14 19
3 5 5 4 2
1 5 1 2 5
3 2 3 2 3
4 1 5 2 2

*/
#include <bits/stdc++.h>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define __builtin_popcount __builtin_popcountll
#define int long long
#define bit(x,y) ((x>>y)&1LL)
#define loop(i,l,r) for(int i=(int)l; i<=(int)r; i++)
#define rloop(i,l,r) for(int i=(int)l; i>=(int)r; i--)
//const int N=;
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &a) {
	return os << '(' << a.first << ", " << a.second << ')';
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a) {
	os << '[';
	for (unsigned int i = 0; i < a.size(); i++)
		os << a[i] << (i < a.size() - 1 ? ", " : "");
	os << ']';
	return os;
}
struct data {
	int x, a, b, c, d;
	data(int _x, int _a, int _b, int _c, int _d): x(_x), a(_a), b(_b), c(_c), d(_d) {};
};
int read() {
	int x; cin >> x; return x;
}

vector<data> a;
int dp[5005][5005];
int n, S, E;

int INF = 1e18;
int cal(int pos, int cc) {
	if (pos == n + 1) {
		if (cc == 1) return 0;
		return INF;
	}
	int &ret = dp[pos][cc];
	if (ret != -1) return ret;
	ret = INF;
	bool lockLeft = false; bool lockRight = false;
	if (pos > S) lockLeft = true; if (pos > E) lockRight = true;
	if (cc == 1 && lockLeft && lockRight) return ret;
	// handle S and E seperately

	// large -> X // -X + b
	// small -> X // X + a
	// X -> small // X + c
	// X -> large // -X + d
	if (pos == S) {
		// put in front
		if (cc >= 1) { // X -> small
			int X = a[pos].x + a[pos].c + cal(pos + 1, cc);
			ret = min(ret, X);
		}
		// create new // X -> large
		int X = -a[pos].x + a[pos].d + cal(pos + 1, cc + 1);
		ret = min(ret, X);
	}
	else if (pos == E) {
		// put at back
		if (cc >= 1) { // small -> X
			int X = a[pos].x + a[pos].a + cal(pos + 1, cc);
			ret = min(ret, X);
		}
		// create new // large -> X
		int X = -a[pos].x + a[pos].b + cal(pos + 1, cc + 1);
		ret = min(ret, X);
	}
	else {
		// create new cc // large -> X -> large
		int X = -a[pos].x + a[pos].b - a[pos].x + a[pos].d + cal(pos + 1, cc + 1);
		ret = min(ret, X);
		// put in front
		if (cc - lockLeft >= 1) { // large -> X -> small
			X = -a[pos].x + a[pos].b + a[pos].x + a[pos].c + cal(pos + 1, cc);
			ret = min(ret, X);

		}
		// put at back
		if (cc - lockRight >= 1) { // small -> X -> large
			X = a[pos].x + a[pos].a - a[pos].x + a[pos].d + cal(pos + 1, cc);
			ret = min(ret, X);
		}
		// combine
		if (cc >= 2) { // small -> X -> small
			X = a[pos].x + a[pos].a + a[pos].x + a[pos].c + cal(pos + 1, cc - 1);
			ret = min(ret, X);
		}
	}
	// if (pos == 3 && cc == 1) cout << ret << endl;
	return ret;
}

// [2, 1, 5, 4, 3]
signed main() {
#ifndef UncleGrandpa
	ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#endif
	cin >> n >> S >> E;
	loop(i, 1, n + 1) {
		a.push_back(data(0, 0, 0, 0, 0));
	}
	loop(i, 1, n) a[i].x = read();
	loop(i, 1, n) a[i].a = read();
	loop(i, 1, n) a[i].b = read();
	loop(i, 1, n) a[i].c = read();
	loop(i, 1, n) a[i].d = read();
	memset(dp, -1, sizeof(dp));
	cout << cal(1, 0) << endl;
}