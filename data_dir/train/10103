#include <bits/stdc++.h>
using namespace std;

// why am I so weak

int n, m;

typedef pair<int, int> P;

#define ft first
#define sd second

vector<int> g[1000055];
vector<P> es;
int deg[1000055];

int par[1000055];
int self[1000055];
int size[1000055];

int fin(int x) {
	if (par[x] == x) return x;
	return par[x] = fin(par[x]);
}
int main() {
	scanf("%d %d", &n, &m);

	if (m == 1) {
		cout << "0" << endl;
		return 0;
	}

	for (int i = 0; i < n; i++) par[i] = i, size[i] = 1;

	long long have = 0l;

	int iso = 0;

	for (int i = 0; i < m; i++) {
		int x, y;
		scanf("%d %d", &x, &y);
		x--, y--;

		if (x == y) {
			self[x]++;
			have++;
			continue;
		}
		es.push_back(P(x, y));

		g[x].push_back(y);
		g[y].push_back(x);

	
		deg[x]++, deg[y]++;

		if (fin(x) == fin(y)) continue;

		par[fin(x)] = fin(y);
		size[fin(y)] += size[fin(x)];
	}


	int diu = 0;
	set<int> s;

	for (int i = 0; i < n; i++) s.insert(fin(i));

	for (auto u : s) if (size[u] > 1 || self[u]) diu++;

	if (diu > 1) {
		puts("0");
		return 0;
	}

	long long res = 0ll;
	long long ex = 0;
		
	for (int i = 0; i < (int)es.size(); i++) {
		// if delete es[i],
	
		res += (int)deg[es[i].sd] - 1;
		res += (int)deg[es[i].ft] - 1;
	}

	// now consider self loop as start

	for (int i = 0; i < n; i++) if (self[i]) {
		ex += (int)es.size();
	}

	printf("%lld\n", res / 2 + have * (have - 1) / 2ll + ex);

	return 0;
}