#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

int main() {
  int cas;
  scanf("%d", &cas);
  while (cas--) {
    int64 n, m;
    scanf("%lld%lld", &n, &m);
    vector<int> visit(10, -1), Q;
    int64 ret = 0;
    for (int64 k = m; k <= n; k += m) {
      if (visit[k % 10] >= 0) {
        ret = 0;
        for (int i = 0; i < visit[k % 10]; ++i) {
          ret += Q[i];
        }
        int64 tot = n / m - visit[k % 10];
        int len = Q.size() - visit[k % 10];
        for (int i = visit[k % 10]; i < Q.size(); ++i) {
          ret += Q[i] * (tot / len);
        }
        tot %= len;
        for (int i = visit[k % 10]; i < visit[k % 10] + tot; ++i) {
          ret += Q[i];
        }
        break;
      }
      visit[k % 10] = Q.size();
      Q.push_back(k % 10);
      ret += k % 10;
    }
    printf("%lld\n", ret);
  }
  return 0;
}
