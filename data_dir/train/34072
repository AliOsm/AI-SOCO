//Daniel Grzegorzewski
#include <bits/stdc++.h>

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace std;

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
     ios_base::sync_with_stdio(0);
     cin.tie(0);
}

const int N = (int)1e5 + 10;

int n, a[N];

bool check(VI& v) {
  for (int x: v)
    if (x != 0)
      return false;
  return true;
}

vector<pair<int, PII>> brut(VI& v) {
  int nn = v.size();
  VI pam = v;
  vector<pair<int, PII>> ruch, tmp;
  ruch.clear();
  for (int _ = 0; _ < 100000; ++_) {
    tmp.clear();
    int t = 0;
    v = pam;
    while (!check(v) && t < (nn+2)/3+8) {
      int mid = rand()%(nn-2)+1;
      int lew = rand()%mid;
      int praw = (rand()%(nn-mid-1))+mid+1;
      int r = min(mid, nn-mid-1);
      int lol = rand()%r+1;
      lew = mid-lol;
      praw = mid+lol;
      if (!(0 <= lew && lew < mid && mid < praw && praw < nn))
        continue;
      ++t;
      tmp.PB({lew, {mid, praw}});
      v[lew] = 1-v[lew];
      v[mid] = 1-v[mid];
      v[praw] = 1-v[praw];
    }
    if (check(v) && (ruch.size() == 0 || ruch.size() > tmp.size()))
      ruch = tmp;
  }
  return ruch;
}

vector<pair<int, PII>> res;

int main() {
  init_ios();
  srand(time(NULL));
  bool flag = false;
  cin >> n;
  for (int i = 1; i <= n; ++i) {
    cin >> a[i];
    if (a[i] == 1)
      flag = true;
  }
  if (!flag) {
    cout<<"YES\n0\n";
    return 0;
  }
  int i = n;
  for (; i >= 14; --i) {
    if (a[i] == 0)
      continue;
    if (a[i-1] == 1 && a[i-2] == 1) {
      res.PB({i-2, {i-1, i}});
      i -= 2;
      continue;
    }
    if (a[i-2] == 0 && a[i-1] == 0) {
      res.PB({i-6, {i-3, i}});
      a[i-6] = 1-a[i-6];
      a[i-3] = 1-a[i-3];
      i -= 2;
      continue;
    }
    if (a[i-2] == 1) {
      res.PB({i-4, {i-2, i}});
      a[i-4] = 1-a[i-4];
      i -= 2;
      continue;
    }
    if (a[i-1] == 1) {
      if (a[i-5] == a[i-4] && a[i-4] == a[i-3] && a[i-3] == 1) {
        res.PB({i-8, {i-4, i}});
        res.PB({i-5, {i-3, i-1}});
        a[i-8] = 1-a[i-8];
        i -= 5;
        continue;
      }
      if (a[i-5] == a[i-4] && a[i-4] == 1 && a[i-3] == 0) {
        res.PB({i-8, {i-4, i}});
        res.PB({i-9, {i-5, i-1}});
        a[i-9] = 1-a[i-9];
        a[i-8] = 1-a[i-8];
        i -= 5;
        continue;
      }
      if (a[i-5] == 0 && a[i-4] == a[i-3] && a[i-3] == 1) {
        res.PB({i-4, {i-2, i}});
        res.PB({i-3, {i-2, i-1}});
        i -= 5;
        continue;
      }
      if (a[i-5] == 1 && a[i-4] == 0 && a[i-3] == 1) {
        res.PB({i-6, {i-3, i}});
        res.PB({i-9, {i-5, i-1}});
        a[i-9] = 1-a[i-9];
        a[i-6] = 1-a[i-6];
        i -= 5;
        continue;
      }
      if (a[i-5] == 1) {
        res.PB({i-10, {i-5, i}});
        res.PB({i-11, {i-6, i-1}});
        a[i-6] = 1-a[i-6];
        a[i-10] = 1-a[i-10];
        a[i-11] = 1-a[i-11];
        i -= 5;
        continue;
      }
      if (a[i-4] == 1) {
        res.PB({i-8, {i-4, i}});
        res.PB({i-11, {i-6, i-1}});
        a[i-6] = 1-a[i-6];
        a[i-8] = 1-a[i-8];
        a[i-11] = 1-a[i-11];
        i -= 5;
        continue;
      }
      if (a[i-3] == 1) {
        res.PB({i-6, {i-3, i}});
        res.PB({i-11, {i-6, i-1}});
        a[i-11] = 1-a[i-11];
        i -= 5;
        continue;
      }
      if (a[i-5] == 0 && a[i-4] == 0 && a[i-3] == 0) {
        res.PB({i-2, {i-1, i}});
        res.PB({i-10, {i-6, i-2}});
        a[i-10] = 1-a[i-10];
        a[i-6] = 1-a[i-6];
        i -= 5;
        continue;
      }
    }
  }
  VI reszta;
  for (int j = 1; j <= i; ++j)
    reszta.PB(a[j]);
  auto meh = brut(reszta);
  if (meh.empty()) {
    cout<<"NO\n";
    return 0;
  }
  cout<<"YES\n";
  for (auto el: meh)
    res.PB({el.ST+1, {el.ND.ST+1, el.ND.ND+1}});
  cout<<res.size()<<"\n";
  for (auto el: res)
    cout<<el.ST<<" "<<el.ND.ST<<" "<<el.ND.ND<<"\n";
}