#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
typedef tree<int, null_type,less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

template<typename T>
static T randint(T lo, T hi){
	return uniform_int_distribution<T>(lo, hi)(rng);
}



int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	int t;
	cin >> t;
	while(t--){


		ll x;
		cin >> x;

		ll p = 1;
		vector<ll> ans;
		while(x){
			ll y = x % 10;
			x /= 10;
			if(y)
				ans.push_back(y * p);
			p *= 10;
		}

		cout << ans.size() << endl;
		for(int i =0; i < ans.size(); i++)
			cout << ans[i] << " \n"[i + 1 == ans.size()];
	}

	return 0;
}

