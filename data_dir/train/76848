#include <bits/stdc++.h>

using namespace std;

#define maxn 500010

int tree[maxn<<2];
int arr[maxn], ans, x;

void build(int node, int l, int r) {
	if(l == r) { 
		tree[node] = arr[l]; 
		return; 
	} 
	int mid = (l + r) >> 1;
	build(node<<1, l, mid);
	build(node<<1|1, mid+1, r);
	tree[node] = __gcd(tree[node<<1], tree[node<<1|1]); 
}
void update(int node, int l, int r, int i, int v) {
	if(r < i || l > i) return;
	if(i <= l && r <= i) {
		tree[node] = v; 
		return;
	} int mid = (l + r) >> 1;
	update(node << 1, l, mid, i, v);
	update(node << 1|1, mid+1, r, i, v);
	tree[node] = __gcd(tree[node << 1], tree[node << 1 | 1]);
}
int query(int node, int l, int r, int i, int j) {
	if(r < i || l > j) return 0;
	if(i <= l && r <= j) {
		return tree[node];
	} int mid = (l + r) >> 1;
	return __gcd(query(node << 1, l, mid, i, j), query(node << 1|1, mid+1, r, i, j));
} 

void check(int node, int l, int r, int i, int j) {
  if (r < i || l > j) return;
  if (l == r) return;
  int mid = (l + r) >> 1;
  int a = query(node << 1, l, mid, i, j);
  int b = query(node << 1|1, mid + 1, r, i, j);
  if (a % x && b % x) {
    ans = 0;
    return;
  }
  if (a % x) check(node << 1, l, mid, i, j);
  else if (b % x) check(node << 1|1, mid + 1, r, i, j);
  return;
} 

int main() {
	int n;
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i) scanf("%d", &arr[i]);
	build(1, 1, n);
	int q;
	scanf("%d", &q);
	while (q--) {
		int ty;
		scanf("%d", &ty);
		if (ty == 1) {
      int l, r;
			scanf("%d %d %d", &l, &r, &x);
			ans = 1;
      check(1, 1, n, l, r);
			if (ans) printf("YES\n");
			else printf("NO\n");
		}
		else if (ty == 2) {
			int idx, p;
			scanf("%d %d", &idx, &p);
			update(1, 1, n, idx, p);
		}
	}
}
