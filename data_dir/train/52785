#include <bits/stdc++.h>
using namespace std;

template<class T>
struct Dinic {
	static const int MAXV = 20000;
	const T INF = 0x3f3f3f3f;
	struct Edge {
		int v;
		T f;
		int re;
		Edge(int _v, T _f, int _re): v(_v), f(_f), re(_re) {}
	};
	int n, s, t, level[MAXV];
	vector<Edge> E[MAXV];
	int now[MAXV];
	Dinic(int _n, int _s, int _t): n(_n), s(_s), t(_t) {}
	void add_edge(int u, int v, T f, bool bidirectional = false) {
		E[u].emplace_back(v, f, E[v].size());
		E[v].emplace_back(u, 0, E[u].size() - 1);
		if (bidirectional) {
			E[v].emplace_back(u, f, E[u].size() - 1);
		}
	}
	bool BFS() {
		memset(level, 0xff, sizeof(level));
		queue<int> que;
		que.emplace(s);
		level[s] = 0;
		while (!que.empty()) {
			int u = que.front();
			que.pop();
			for (auto it: E[u]) {
				if (it.f > 0 && level[it.v] == -1) {
					level[it.v] = level[u] + 1;
					que.emplace(it.v);
				}
			}
		}
		return level[t] != -1;
	}
	T DFS(int u, T nf) {
		if (u == t) return nf;
		T res = 0;
		while (now[u] < E[u].size()) {
			Edge &it = E[u][now[u]];
			if (it.f > 0 && level[it.v] == level[u] + 1) {
				T tf = DFS(it.v, min(nf, it.f));
				res += tf;
				nf -= tf;
				it.f -= tf;
				E[it.v][it.re].f += tf;
				if (nf == 0) return res;
			} else {
				++now[u];
			}
		}
		if (!res) level[u] = -1;
		return res;
	}
	T flow(T res = 0) {
		while (BFS()) {
			T temp;
			memset(now, 0x00, sizeof(now));
			while (temp = DFS(s, INF)) {
				res += temp;
				res = min(res, INF);
			}
		}
		return res;
	}
};

int N, M;
vector<int> U, V;

int main() {
	ios::sync_with_stdio(false);
	cin >> N >> M;
	U.assign(M, 0);
	V.assign(M, 0);
	for (int i = 0; i < M; ++i) {
		cin >> U[i] >> V[i];
		--U[i];
		--V[i];
	}
	int lb = 0, ub = N, ans = -1;
	while (lb <= ub) {
		int mb = lb + ub >> 1;
		Dinic<int> din(M + N + 2, M + N, M + N + 1);
		for (int i = 0; i < M; ++i) {
			din.add_edge(M + N, i, 1);
			din.add_edge(i, M + U[i], 1);
			din.add_edge(i, M + V[i], 1);	
		}
		for (int i = 0; i < N; ++i) {
			din.add_edge(M + i, M + N + 1, mb);
		}
		if (din.flow() == M) {
			ans = mb;
			ub = mb - 1;
		} else {
			lb = mb + 1;
		}
	}
	cout << ans << endl;
	Dinic<int> din(M + N + 2, M + N, M + N + 1);
	for (int i = 0; i < M; ++i) {
		din.add_edge(M + N, i, 1);
		din.add_edge(i, M + U[i], 1);
		din.add_edge(i, M + V[i], 1);	
	}
	for (int i = 0; i < N; ++i) {
		din.add_edge(M + i, M + N + 1, ans);
	}
	din.flow();
	for (int i = 0; i < M; ++i) {
		for (size_t j = 0; j < din.E[i].size(); ++j) {
			if (din.E[i][j].f > 0) {
				int x = din.E[i][j].v - M;
				if (x < 0 || N <= x) continue;
				cout << U[i] + V[i] - x + 1 << " " << x + 1 << "\n";
			}
		}
	}
	return 0;
}