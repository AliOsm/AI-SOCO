#include "bits/stdc++.h"
#define MAXN 200009
#define INF 1000000007
#define MOD 1000000000
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second
#define my_little_dodge 46
using namespace std;

typedef long long ll;
typedef pair<int,int> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
int arr[MAXN],f[MAXN];
int mod(ll x){
	return (x%MOD);
}
struct node{
	int n0,n1;
}s[MAXN<<2],temp;
node merge(int len,node x,node y){
	if(!len)
		return y;
	node z=x;
	z.n0=mod(z.n0+mod(mod(y.n0*1LL*f[len-1])+mod(y.n1*1LL*f[len])));
	z.n1=mod(z.n1+mod(mod(y.n0*1LL*f[len])+mod(y.n1*1LL*f[len+1])));
	return z;
}
void build(int nd,int x,int y){
	if(x==y){
		s[nd].n0=arr[x];
		s[nd].n1=arr[x];
		return;
	}
	int mid=(x+y)>>1;
	build(nd<<1,x,mid);
	build(nd<<1|1,mid+1,y);
	s[nd]=merge(mid-x+1,s[nd<<1],s[nd<<1|1]);
	//~ cout<<x<<" "<<y<<" "<<s[nd].n0<<" "<<s[nd].n1<<endl;
}
void upd(int p,int v,int nd,int x,int y){
	if(x==y){
		s[nd].n0=v;
		s[nd].n1=v;
		return;
	}
	int mid=(x+y)>>1;
	if(p<=mid)
		upd(p,v,nd<<1,x,mid);
	else
		upd(p,v,nd<<1|1,mid+1,y);
	s[nd]=merge(mid-x+1,s[nd<<1],s[nd<<1|1]);	
}
void tap(int l,int r,int nd,int x,int y){
	if(l>y or x>r)
		return;
	if(l<=x and y<=r){
		temp=merge(x-l,temp,s[nd]);
		return;
	}	
	int mid=(x+y)>>1;
	tap(l,r,nd<<1,x,mid);
	tap(l,r,nd<<1|1,mid+1,y);
}
int main(){
	#ifndef ONLINE_JUDGE
    freopen("file.in", "r", stdin);
	#endif	
	f[1]=f[2]=1;
	for(int i=3;i<MAXN;i++)
		f[i]=mod(f[i-1]+f[i-2]);
	
	int n,q;
	scanf("%d%d",&n,&q);
	for(int i=1;i<=n;i++)
		scanf("%d",&arr[i]);
	build(1,1,n);
	while(q--){
		int type;
		scanf("%d",&type);
		if(type==1){
			int v,p;
			scanf("%d%d",&p,&v);
			upd(p,v,1,1,n);
		}
		if(type==2){
			int l,r;
			scanf("%d%d",&l,&r);
			tap(l,r,1,1,n);
			printf("%d\n",temp.n0);
		}
		//~ if(type==3){
			//~ int l,r,v;
			//~ scanf("%d%d%d",&l,&r,&v);
			//~ inc(l,r,v,1,1,n);
		//~ }
	}
	return 0;
}
