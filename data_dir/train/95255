//Be Name Khoda
//no comment...
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using mordered_set =  tree<T, null_type, greater<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)1e5 + 7;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
ll n, m, a[MAXN];
pair<ll, pair<ll, ll> > seg[4 * MAXN];
void build(ll node, ll st, ll en)
{
	if(en - st < 2)
	{
		seg[node].first = a[st], seg[node].second = {a[st], st};
		return;
	}
	ll mid = (st + en) >> 1;
	build(2 * node, st, mid);
	build(2 * node + 1, mid, en);
	seg[node].first = seg[2 * node].first + seg[2 * node + 1].first;
	if(seg[2 * node].second.first > seg[2 * node + 1].second.first)
		seg[node].second = seg[2 * node].second;
	else
		seg[node].second = seg[2 * node + 1].second;
}
void modify(ll node, ll st, ll en, ll idx, ll val)
{
	if(en - st < 2)
	{
		seg[node].first = val;
		seg[node].second = {val, st};
		return;
	}
	ll mid = (st + en) >> 1;
	if(idx < mid)
		modify(2 * node, st, mid, idx, val);
	else
		modify(2 * node + 1, mid, en, idx, val);
	seg[node].first = seg[2 * node].first + seg[2 * node + 1].first;
	
	if(seg[2 * node].second.first > seg[2 * node + 1].second.first)
		seg[node].second = seg[2 * node].second;
	else
		seg[node].second = seg[2 * node + 1].second;
}
pair<ll, ll> get_max(ll node, ll st, ll en, ll l, ll r)
{
	if(st >= r || l >= en)
		return {0, 0};
	if(l <= st && en <= r)
		return seg[node].second;
	ll mid = (en + st) >> 1;
	pair<ll, ll> c1 = get_max(2 * node, st, mid, l, r), c2 = get_max(2 * node + 1, mid, en, l, r);
	if(c1.first > c2.first)
		return c1;
	else
		return c2;
}
ll get_sum(ll node, ll st, ll en, ll l, ll r)
{
	if(st >= r || l >= en)
		return 0;
	if(l <= st && en <= r)
		return seg[node].first;
	ll mid = (st + en) >> 1;
	return get_sum(2 * node, st, mid, l, r) + get_sum(2 * node + 1, mid, en, l, r);
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);
    cin >> n >> m;
    for (int i = 0; i < n; i++)
    	cin >> a[i];
    build(1, 0, n);
    for (int i = 0; i < m; i++)
    {
    	int type;
    	cin >> type;
    	if(type == 1)
    	{
    		ll l, r;
    		cin >> l >> r;
    		l--;
    		cout << get_sum(1, 0, n, l, r) << "\n";
		}
		if(type == 2)
		{
			ll l, r, x;
			cin >> l >> r >> x;
			l--;
			while(1)
			{
				pair<ll, ll> p = get_max(1, 0, n, l, r);
				if(p.first < x)
					break;
				modify(1, 0, n, p.second, p.first % x);
			}
		}
		if(type == 3)
		{
			ll l, x;
			cin >> l >> x;
			l--;
			modify(1, 0, n, l, x);
		}
	}
}
