#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;


int main(){
   IOS;
 /*    #ifndef ONLINE_JUDGE
         freopen("in.txt",  "r",  stdin);
         freopen("out.txt", "w", stdout);
     #endif */
   
   long int n,k;
   cin>>n>>k;

   if(__builtin_popcountll(n) > k)
   	return cout<<"No",0;

   map<long int,long int> m;
   long int total = 0;
   
   for(long int i = 63; i >= 0; i--)
   	if((1LL << i) & n){
   		m[i]++;
   		total++;
   	}
   	
   while(true){
   		long int largestBit = m.rbegin()->first;
   		long int largestBitCount = m.rbegin()->second;
   		if(total + largestBitCount <= k){
   			m.erase(largestBit);
   			m[largestBit - 1] += 2 * largestBitCount;
   			total += largestBitCount;
   			continue;
   		}
   		break;
   }	

   while(total < k){
   	auto ele = m.begin()->first;
   	m[ele]--;
   	if(m[ele] == 0)
   		m.erase(ele);

   	m[ele - 1] += 2;
   	total++;
   }
   

   cout<<"Yes\n";

   for(auto itr = m.rbegin(); itr != m.rend(); itr++){
   	  for(long int i = 0; i < itr->second; i++)
   	  		cout<<itr->first<<" ";
   }

   return 0;
}