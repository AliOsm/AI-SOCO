/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-06 09:59:26
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 3e6 + 10;
const ll LOG = 42;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , cnt[MAXN] , lg[MAXN] , dp[LOG] , ind[MAXN];
vector<ll> vec;

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
    fill(ind , ind + MAXN , -1);

    for(ll i = 2 ; i < MAXN ; i++)  lg[i] = lg[i / 2] + 1;
    cin >> n;
    for(ll i = 0 ; i <= lg[n] ; i++)    vec.push_back((1 << i));
    for(ll i = 0 ; i < lg[n] ; i++) vec.push_back((1 << i) * 3);
    Sort(vec);
    for(ll i = 0 ; i < vec.size() ; i++){
        if(vec[i] <= n && lg[vec[i]] == lg[n]) dp[i] = 1;
        ind[vec[i]] = i;
        cnt[i] = n / vec[i];
    }
//    for(ll i = 0 ; i < SZ(vec) ; i++)   cout << 1 << sep << i << sep << dp[i] << endl;
    for(ll i = 2 ; i <= n ; i++){
        for(ll j = 0 ; j < SZ(vec) ; j++){
            ll x = ind[vec[j] * 2] , y = ind[vec[j] * 3];
            dp[j] = dp[j] * max(0LL , (cnt[j] - i + 1));
            if(x != -1) dp[j] += dp[x] * (cnt[j] - cnt[x]);
            if(y != -1) dp[j] += dp[y] * (cnt[j] - cnt[y]);
            dp[j] %= MOD;
//            cout << i << sep << j << sep << x << sep << y << sep << dp[j] << endl;
        }
    }
    cout << dp[0] << endl;

    return 0;
}
/*

*/
