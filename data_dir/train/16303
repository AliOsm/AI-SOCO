#include <cstdio>
#include <cstring>
#include <set>
#include <string>
#include <iostream>
#include <cmath>
#include <vector>
#include <map>
#include <stack>
#include <time.h>
#include <queue>
#include <cstdlib>
#include <algorithm>
using namespace std;
#define sqr(x) ((x)*(x))
#define PB push_back
#define MP make_pair
#define Tr(it, x) for(  __typeof(x.begin()) it = x.begin(); it!=x.end();it++)
typedef long long lld;
typedef pair<int,int> PII;
#define SZ(x) x.size()
#define SORT(x) sort(s.begin(),s.end())
#define REP(i,n) for(int i = 0; i < n ; i++)
#define REP_1(i,a,b) for(int i = a; i <= b; i++)
#define REP_2(i,a,b,j,c,d) REP_1(i,a,b) REP_1(j,c,d)
#define REV(s) reverse(s.begin(),s.end())
#define Fill(x, y) memset(x, y, sizeof(x))
inline int two(int x){   return 1<<x;}
inline lld TWO(int x){  return (lld)1<<x ;}
template <class T>  void _Min(T &x, T y){  if(x==-1 || y < x) x = y; }
template <class T>  void Min(T &x, T y){    if(y < x) x = y;}
template <class T>  void Max(T &x,T y){   if(y > x) x = y;}
template <class T>  T _abs(T x){ return x > 0 ? x : -x ;}
template <class T>  T gcd(T  a,T b){  return !b ? a : gcd(b,a%b);}
const int maxn = 1000010;
const int mod = 1000000007;
int a[1000010];
bool vis[1000010];
int main()
{
    int  n , i , j;
    cin>>n;
    int nn = n;
    for(i=1;;i++) if((1<<i)>n) break;
    i--;
    int t=0,left,right;
    lld ans = 0;
    while(true)
    {
         left=two(i)-1;
         right=two(i);
         t = 0;
         for(;right<=n;)
         {
          //   ans+=(left^right);
         //   printf("left=%d right=%d\n",left,right);
             a[left] = right;
             a[right] = left;
             left --;
             right++;
             t++;
         }
         if(left<=0) break;
         i -- ;
         n-=2*t;
         //printf("n=%d\n")
    }
    ans = 0;
    for(int i = 0; i <= nn ;i++) ans += (i^a[i]);
    printf("%I64d\n",ans);
    for(int i = 0; i <= nn; i++) printf("%d ",a[i]);
    return 0;
}








