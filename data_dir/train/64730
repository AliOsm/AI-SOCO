#include <bits/stdc++.h>

using namespace std;

const int N = 4;

int n, a[N * N];
bool used[N * N];

bool check(int x[4][4], int n) {
  int sum = 0;
  for (int i = 0; i < n; ++i) {
    sum += x[0][i];
  }
  for (int r = 0; r < n; ++r) {
    if (accumulate(x[r], x[r] + n, 0) != sum)
      return false;
  }
  for (int c = 0; c < n; ++c) {
    int t = 0;
    for (int r = 0; r < n; ++r) {
      t += x[r][c];
    }
    if (t != sum)
      return false;
  }
  int A = 0, B = 0;
  for (int r = 0; r < n; ++r) {
    A += x[r][r];
    B += x[r][n - 1 - r];
  }
  return A == sum && B == sum;
}

void work3() {
  sort(a, a + n * n);
  do {
    int x[4][4];
    for (int i = 0; i < n; ++i)
      for (int j = 0; j < n; ++j)
        x[i][j] = a[i * n + j];
    if (check(x, n)) {
      int sum = 0;
      for (int i = 0; i < n; ++i)
        sum += x[0][i];
      printf("%d\n", sum);
      for (int r = 0; r < n; ++r)
        for (int c = 0; c < n; ++c)
          printf("%d%c", x[r][c], " \n"[c == n - 1]);
      return;
    }
  } while (next_permutation(a, a + n * n));
}

int main() {
  scanf("%d", &n);
  for (int i = 0; i < n * n; ++i) {
    scanf("%d", a + i);
  }
  if (n <= 3) {
    work3();
    return 0;
  }
  int sum = 0;
  for (int i = 0; i < n * n; ++i)
    sum += a[i];
  sum /= n;
  int tot = n * n;
#define search(a) for (int a = 0; a < tot; ++a) if (!used[a])
  search(a11) {
    used[a11] = 1;
    search(a22) {
      used[a22] = 1;
      search(a33) {
        used[a33] = 1;
        int need44 = sum - (a[a11] + a[a22] + a[a33]);
        search(a44) if (a[a44] == need44) {
          used[a44] = 1;
          search(a14) {
            used[a14] = 1;
            search(a23) {
              used[a23] = 1;
              search(a32) {
                used[a32] = 1;
                int need41 = sum - (a[a14] + a[a23] + a[a32]);
                search(a41) if (a[a41] == need41) {
                  used[a41] = 1;
                  search(a12) {
                    used[a12] = 1;
                    int need42 = sum - (a[a12] + a[a22] + a[a32]);
                    search(a42) if (a[a42] == need42) {
                      used[a42] = 1;
                      int need13 = sum - (a[a11] + a[a12] + a[a14]);
                      search(a13) if (a[a13] == need13) {
                        used[a13] = 1;
                        int need43 = sum - (a[a13] + a[a23] + a[a33]);
                        search(a43) if (a[a43] == need43) {
                          used[a43] = 1;
                          search(a21) {
                            used[a21] = 1;
                            int need24 = sum - (a[a21] + a[a22] + a[a23]);
                            search(a24) if (a[a24] == need24) {
                              used[a24] = 1;
                              int need31 = sum - (a[a11] + a[a21] + a[a41]);
                              search(a31) if (a[a31] == need31) {
                                used[a31] = 1;
                                int need34 = sum - (a[a31] + a[a32] + a[a33]);
                                search(a34) if (a[a34] == need34) {
                                  used[a34] = 1;
                                  int y[4][4] = {{a11, a12, a13, a14}, 
                                    {a21, a22, a23, a24},
                                    {a31, a32, a33, a34},
                                    {a41, a42, a43, a44}};
                                  int x[4][4];
                                  for (int r = 0; r < 4; ++r) {
                                    for (int c = 0; c < 4; ++c) {
                                      x[r][c] = a[y[r][c]];
                                    }
                                  }
                                  if (check(x, 4)) {
                                    printf("%d\n", sum);
                                    for (int r = 0; r < n; ++r)
                                      for (int c = 0; c < n; ++c)
                                        printf("%d%c", x[r][c], " \n"[c == n - 1]);
                                    return 0;
                                  }
                                  used[a34] = 0;
                                  break;
                                }
                                used[a31] = 0;
                                break;
                              }
                              used[a24] = 0;
                              break;
                            }
                            used[a21] = 0;
                          }
                          used[a43] = 0;
                          break;
                        }
                        used[a13] = 0;
                        break;
                      }
                      used[a42] = 0;
                      break;
                    }
                    used[a12] = 0;
                    break;
                  }
                  used[a41] = 0;
                  break;
                }
                used[a32] = 0;
              }
              used[a23] = 0;
            }
            used[a14] = 0;
          }
          used[a44] = 0;
          break;
        }
        used[a33] = 0;
      }
      used[a22] = 0;
    }
    used[a11] = 0;
  }
  return 0;
}
