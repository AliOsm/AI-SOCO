#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define fi first
#define se second
#define SZ(x) ((int)(x).size())
using namespace std;
using namespace __gnu_pbds;
using ll = int64_t;
using ld = long double;
using ull = uint64_t;
using pl = pair<ll, ll>;
typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

ll t, n, m, k;

set <pair<ll, ll> > wantTo;

vector<char> anw;

int main() {
  ios::sync_with_stdio(0);
  cout.precision(10);

  cin >> n >> m >> k;

  ll max_x = 0;
  ll max_y = 0;

  for (int i = 0; i < k; i++) {
    ll sx, sy; cin >> sx >> sy; sx--; sy--;
    max_x = max(sx, max_x);
    max_y = max(sy, max_y);
  }

  for (int i = 0; i < max_x; i++) {
    anw.push_back('U');
  }
  for (int i = 0; i < max_y; i++) {
    anw.push_back('L');
  }

  for (int i = 0; i < k; i++) {
    ll fx, fy; cin >> fx >> fy; fx--; fy--;
    wantTo.insert(make_pair(fx, fy));
  }

  ll cur_x = 0;
  ll cur_y = 0;

  for (auto p: wantTo) {
    while (cur_x < p.first) {
      anw.push_back('D');
      cur_x++;
    }
    while (cur_y < p.second) {
      anw.push_back('R');
      cur_y++;
    }
    while (cur_y > p.second) {
      anw.push_back('L');
      cur_y--;
    }
  }

  cout << anw.size() << endl;

  for (auto x: anw) {
    cout << x;
  } cout << endl;

}

