#include <bits/stdc++.h>

#define rep(i, n) for (int i = 0; i < (n); i++)
#define repr(i, n) for (int i = (n) - 1; i >= 0; i--)
#define rep2(i, l, r) for (int i = (l); i < (r); i++)
#define rep2r(i, l, r) for (int i = (r) - 1; i >= (l); i--)
#define range(a) a.begin(), a.end()

using namespace std;
using ll = long long;

struct edge {
  int v, w;
};

int main() {
  cin.tie(nullptr);
  ios::sync_with_stdio(false);
  cout << fixed << setprecision(15);
  int Q; cin >> Q;
  while (Q--) {
    int N, K; cin >> N >> K;
    vector<vector<edge>> G(N);
    rep(i, N - 1) {
      int a, b, c; cin >> a >> b >> c; a--; b--;
      G[a].push_back((edge){b, c});
      G[b].push_back((edge){a, c});
    }
    vector<ll> dp0(N);
    vector<ll> dp1(N);
    auto dfs = [&](auto dfs, int u, int p) -> void {
      vector<tuple<ll, ll, ll>> items;
      for (edge e : G[u]) if (e.v != p) {
        dfs(dfs, e.v, u);
        items.emplace_back(dp1[e.v] + e.w - dp0[e.v], dp0[e.v], dp1[e.v] + e.w);
      }
      sort(range(items), greater<>());
      rep(i, items.size()) {
        if (i < K) {
          dp0[u] += max(get<1>(items[i]), get<2>(items[i]));
        } else {
          dp0[u] += get<1>(items[i]);
        }
        if (i < K - 1) {
          dp1[u] += max(get<1>(items[i]), get<2>(items[i]));
        } else {
          dp1[u] += get<1>(items[i]);
        }
      }
    };
    dfs(dfs, 0, -1);
    cout << max(dp0[0], dp1[0]) << '\n';
  }
}