#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <class T>
using ordered_set = tree <T,null_type,less <T>,rb_tree_tag,tree_order_statistics_node_update> ;
///find_by_order()
///order_of_key()

template <class T,class U>
void maximize(T &x,U y){
    if(x < y)x = y;
}
template <class T,class U>
void minimize(T &x,U y){
    if(x > y)x = y;
}
template <class T>
T Abs(T x){
    return (x < (T)0 ? -x : x);
}
template <class T>
T safe_sqrt(T x){
    return sqrt(max(x,(T)0));
}
template <class T,class U,class V>
T addmod(T x,U k,V MOD){
    return ((x + k) % MOD + MOD) % MOD;
}
template <class T,class U,class V>
T submod(T x,U k,V MOD){
    return ((x - k) % MOD + MOD) % MOD;
}
template <class T,class U,class V>
T mul(T x,U y,V MOD){
    return ( (x % MOD) * (y % MOD) ) % MOD;
}

#define ll long long
#define pll pair <ll,ll>
#define pii pair <int,int>
#define MASK(i) ((1LL)<<(i))
#define BIT(x,i) (((x)>>(i))&1)
#define all(c) (c).begin(),(c).end()
#define sz(c) (int)((c).size())
#define fn "test"    ///FILE_NAME_HERE

/*------------------------------------------END_OF_TEMPLATE------------------------------------------*/

namespace task{

    int *a,*b,*res,*ans;
    vector <pii> *queries;
    vector <int> clr;
    int n,q;

    int f(int p,int k){
        if(p <= n and ans[p]){
            return ans[p];
        } else {
            if(p > n){
                return 0;
            } else {
                clr.emplace_back(p);
                return ans[p] = 1 + f(b[p] + k,k);
            }
        }
    }

    void solve(){
        cin>>n;
        a = new int[n + 2];
        b = new int[n + 2];
        ans = new int[n + 2];
        fill(ans + 1,ans + 1 + n,0);
        queries = new vector <pii> [n + 2];
        for(int i = 1;i <= n;++i){
            cin>>a[i];
            b[i] = i + a[i];
        }
        cin>>q;
        res = new int[q + 2];
        for(int i = 1;i <= q;++i){
            int p,k;
            cin>>p>>k;
            queries[k].emplace_back(make_pair(p,i));
        }
        for(int i = 1;i <= n;++i){
            if(!queries[i].empty()){
                sort(all(queries[i]));
                for(pii pp : queries[i]){
                    int p = pp.first;
                    int idx = pp.second;
                    res[idx] = f(p,i);
                }
                while(!clr.empty()){
                    ans[clr.back()] = 0;
                    clr.pop_back();
                }
            }
        }
        for(int i = 1;i <= q;++i){
            cout<<res[i]<<'\n';
        }
    }
}

int main(void){
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    task::solve();
}