#include<bits/stdc++.h>
#include <regex>
#include<ext/numeric>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define WHITE -1
#define GREY   0
#define BLACK  1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)
#define MP make_pair

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<ll> vll;
//typedef unsigned int ui;

typedef complex<double> point;
//#define X real()
#define Y imag()
#define vec(a,b) ((b)-(a))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define colliner pointOnLine
#define same(a,b) (lengthSqr(vec(a,b))<EPS)
#define lengthSqr(v) (dot(v,v))

const double PI = acos(-1.0);

int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

int DX[] = { 1, 1, -1, -1, 2, 2, -2, -2 };
int DY[] = { 2, -2, 2, -2, 1, -1, 1, -1 };

const int MAX = 1e5 + 5, MOD = 1e9 + 7, oo = (1 << 30), MAXN = 1e6 + 5;
const ll OO = 1ll << 60;
const double EPS = 1e-9;

ll n, r, u;
int q, lev;
char s[MAX];

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
//	freopen("access.in", "r", stdin);
//	freopen("access.out", "w", stdout);
#endif
	cin >> n >> q;
	for (int i = 0; (1ll << i) <= n; ++i)
		++lev;
	r = (n + 1) >> 1;
//	r = ~n;
//	r = (r & -r);
//	r >>= 1;
	while (q--) {
		stack<bool> st;
		scanf("%lld %s", &u, s);
		ll cur = r;
		int l = lev - 1;
		while (cur != u)
			if (u < cur) {
				st.push(0);
				cur = cur - (1ll << (l - 1));
				l--;
			} else {
				st.push(1);
				cur = cur + (1ll << (l - 1));
				l--;
			}
		int N = strlen(s);
		for (int i = 0; i < N; ++i)
			if (s[i] == 'U' && !st.empty()) {
				int op = st.top() ? -1 : 1;
				cur = cur + (1ll << (l)) * op;
				st.pop();
				l++;
			} else if (s[i] == 'L' && l) {
				st.push(0);
				cur = cur - (1ll << (l - 1));
				l--;
			} else if (s[i] == 'R' && l) {
				st.push(1);
				cur = cur + (1ll << (l - 1));
				l--;
			}
		printf("%lld\n", cur);
	}
}
