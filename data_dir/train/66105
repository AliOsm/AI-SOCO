#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

int Deg[100005], N, K;
vector<int> D[100005];
vii E;

int main()
{
    cin >> N >> K;

    f(i,1,N)
    {
        int x;
        scanf("%d", &x);
        D[x].pb(i);
    }
    if(SZ(D[0]) != 1)
    {
        cout << -1;
        return 0;
    }

    queue<pii> q;
    q.push({D[0][0],0});
    int dist = 1, rem = N-1;

    while(!q.empty())
    {
        pii p = q.front();
        q.pop();
        int n = p.first, d = p.second;
        while(dist <= N && D[dist].empty()) dist++;
        if(d != dist-1) continue;
        while(Deg[n] < K && !D[dist].empty())
        {
            int node = D[dist].back();
            E.pb({node,n});
            Deg[node]++, Deg[n]++;
            D[dist].pop_back();
            q.push({node,dist});
            rem--;
        }
    }

    if(rem > 0)
    {
        cout << -1;
        return 0;
    }

    cout << SZ(E) << "\n";
    for(pii p : E) printf("%d %d\n", p.first, p.second);
}
