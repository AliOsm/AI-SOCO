#include <bits/stdc++.h>
#define ll long long
using namespace std;
const int N = 3e3 + 5;
int hs[N], lowlink[N], dfn[N], comp[N];
bool instack[N], in[N];
int num = 0;
vector<int> g[N];
stack<int> stack_nodes;
void tarjan(int node, int par) {
	lowlink[node] = dfn[node] = ++num;
	instack[node] = 1;
	stack_nodes.push(node);
	for (int i = 0; i < g[node].size(); i++) {
		int v = g[node][i];
		if (v == par) continue;
		if (!dfn[v]) {
			tarjan(v, node);
			lowlink[node] = min(lowlink[node], lowlink[v]);
		} else if (instack[v]) lowlink[node] = min(lowlink[node], dfn[v]);
	}
	if (lowlink[node] == dfn[node]) {
		int v = -1;
		vector<int> cyc;
		while (v != node) {
			v = stack_nodes.top();
			stack_nodes.pop(), instack[v] = 0;
			cyc.push_back(v);
		}
		if (cyc.size() > 1) for (auto u : cyc)
			in[u] = 1;
	}
}
int dist[N];
int n;
int bfs(int src) {
	for (int i = 0; i <= n; i++)
		dist[i] = 1e8;
	dist[src] = 0;
	queue<int> q;
	q.push(src);
	while (q.size()) {
		int node = q.front();
		q.pop();
		if (in[node]) return dist[node];
		for (int i = 0; i < g[node].size(); i++) {
			int u = g[node][i];
			if (dist[u] > dist[node] + 1) dist[u] = dist[node] + 1, q.push(u);
		}
	}
	return n;
}
int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n;
	for (int i = 0, u, v; i < n; i++) {
		cin >> u >> v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	tarjan(1, 1);
	for (int i = 1; i <= n; i++)
		cout << bfs(i) << " ";

	return 0;
}
