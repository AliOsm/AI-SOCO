#include <bits/stdc++.h>
#define pb push_back
#define f first
#define s second
using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const int mod = 998244353;   	// 2 ^ k * c + 1
const int g = 3;				// primitive root modulo mod
const int N = 1 << 20; 			// 1 << k, although you can do 1 << x where x < k 
int root = -1; 					// Nth root of unity modulo mod
int root_1 = -1;				// root * root_1 = 1 (modulo mod)

ll powmod(ll a, ll b, ll m){
	if(b == 0) return 1;
	ll c = powmod(a, b / 2, m);
	c = c * c % mod;
	if(b % 2 == 1) c = c * a % m;
	return c;
}

ll fix(ll x){
	if(x < 0) x += mod;
	if(x >= mod) x -= mod;
	return x;
}

void ntt(ll a[N], bool invert){
	for(int i = 1, j = 0; i < N; i++){
		int bit = N / 2;
		for(; j >= bit; bit /= 2) j -= bit;
		j += bit; if(i < j) swap(a[i], a[j]);
	}
	
	for(int len = 2; len <= N; len *= 2){
		ll wlen = invert ? root_1 : root;
		for(int i = len; i < N; i *= 2) wlen = wlen * wlen % mod;
		for(int i = 0; i < N; i += len){
			for(int j = 0, w = 1; j < len / 2; j++, w = (w * wlen) % mod){
				ll u = a[i + j], v = a[i + j + len / 2] * w % mod;
				a[i + j] = fix(u + v);
				a[i + j + len / 2] = fix(u - v);
			}
		}
	}

	if(invert){
		ll inv_n = powmod(N, mod - 2, mod);
		for(int i = 0; i < N; i++)
			a[i] = a[i] * inv_n % mod;
	}
}

void multiply(ll a[N], ll b[N]){
	root = powmod(g, (mod - 1) / N, mod);
	root_1 = powmod(root, mod - 2, mod);
	ntt(a, false);
	ntt(b, false);
	for(int i = 0; i < N; i++)
		a[i] = a[i] * b[i] % mod;
	ntt(a, true);
}

ll a[N], b[N];
int n, k;
int main(){
	scanf("%d%d", &n, &k);
	for(int i = 0; i < k; i++){
		int x; cin >> x;
		a[x] = 1;
	}
	root = powmod(g, (mod - 1) / N, mod);
	root_1 = powmod(root, mod - 2, mod);
	ntt(a, false);
	for(int i = 0; i < N; i++) if(a[i] != 0){
		a[i] = powmod(a[i], n / 2, mod);
	}
	ntt(a, true);
	ll ans = 0;
	for(int i = 0; i < N; i++) ans = (ans + a[i] * a[i] % mod) % mod;
	cout << ans << endl;

	return 0;
}