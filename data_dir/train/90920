#include<bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-12, PI = acos(-1);
const int N = 1e5 + 9, M = 1e2 + 9, OO = 1e9 + 7, MOD = 1e9 + 7;
const ll inf = 1e18;

int type[N], n;
vector<int> adj[N];
int mnCost[N][M];

void bfs(int t) {
  queue<int> q;
  vector<bool> vis(n + 1);
  for (int i = 1; i <= n; ++i) {
    if(type[i] == t) {
      vis[i] = 1;
      q.push(i);
    }
  }
  int lvl = 1;
  while(!q.empty()) {
    int sz = q.size();
    while(sz--) {
      int tp = q.front();
      q.pop();
      for(int it: adj[tp]) {
        if(!vis[it]) {
          vis[it] = 1;
          mnCost[it][t] = min(mnCost[it][t], lvl);
          q.push(it);
        }
      }
    }
    ++lvl;
  }
}

int main() {
  fastIO;
#ifdef LOCAL
  freopen("input.in", "rt", stdin);
#endif
  memset(mnCost, '?', sizeof mnCost);
  int m, k, s,u, v;
  cin >> n >> m >> k >> s;
  for (int i = 1; i <= n; ++i) {
    cin >> type[i];
  }
  for (int i = 0; i < m; ++i) {
    cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  for (int i = 1; i <= k; ++i)
    bfs(i);
  for (int i = 1; i <= n; ++i) {
    vector<int> vv;
    mnCost[i][type[i]] = 0;
    for (int j = 1; j <= k; ++j)
      vv.push_back(mnCost[i][j]);
    sort(vv.begin(), vv.end());
    int total = 0;
    for (int kk = 0; kk < s; ++kk)
      total += vv[kk];
    cout << total << ' ';
  }
  return 0;
}
