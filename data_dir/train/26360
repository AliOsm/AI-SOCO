#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>

#define LL long long
#define uLL unsigned long long
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define vI vector<int>
#define vvI vector<vector<int>>
#define vLL vector<LL>
#define vS vector<string>
#define fori(i, n) for(int (i)=0; (i)<n; (i)++)
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
#define forI(tmp) for(auto(it)=(tmp).begin();(it)!=(tmp).end();(it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%d", &(a))
const LL mod = 1000000007;
const LL Inf = 1e9;
using namespace std;


int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	int n,t;
	cin>>n>>t;
	int ans = 0;
	vector<char> s(n);
	int pos;
	fori(i,n) {
		cin>>s[i];
		if (s[i]=='.') pos=i;
	}
	if (s[pos+1]>='5') {
		for (int i = pos-1; i>=0; i--){
			if (s[i]=='9') {
				s[i]='0';
			}
			else{
				s[i]=s[i]+1;
				break;
			}
		}
		if (s[0]=='0') cout<<1;
		forn(i,0,pos) cout<<s[i];
		return 0;
	}
	int count=0,ppos=0;
	forn(i,pos+1,n){
		if (s[i]>='4') count++;
		if (s[i]>='5') {
			ppos = max(pos+1,i-min(count,t) );
			s[ppos] += 1;
			//ppos = i-min(count,t);
			t -= i-ppos;
			
			break;
		}
		
		if (s[i]<'4') count = 0;
	}
		if (s[pos+1]>='5' && t>0) {
		for (int i = pos-1; i>=0; i--){
			if (s[i]=='9') {
				s[i]='0';
			}
			else{
				s[i]=s[i]+1;
				break;
			}
		}
		if (s[0]=='0') cout<<1;
		forn(i,0,pos) cout<<s[i];
	}
		else{

		if (ppos!=0) forn(i,0,ppos+1) cout<<s[i];
		else {forn(i,0,n) cout<<s[i];}
		}
	return 0;
}