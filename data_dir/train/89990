#include <bits/stdc++.h>

#define ll long long
using namespace std;
const int N = 2e5 + 5;
vector<pair<int, int> > g[N];
int ind[N];
bool vis[N];
int n, m, k;
set<pair<int, int> > sett;
bool in(int u) {
	return sett.find(make_pair(ind[u], u)) != sett.end();
}
void del(int node) {
	for (int i = 0; i < g[node].size(); i++) {
		int v = g[node][i].first;
		int x = g[node][i].second;
		if (vis[x])
			continue;
		vis[x] = 1;
		if (in(v)) {
			sett.erase(make_pair(ind[v], v));
			ind[v]--;
			sett.insert(make_pair(ind[v], v));
		}
	}
	sett.erase(make_pair(ind[node], node));
}
int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m >> k;
	vector<pair<int, int> > edg;
	for (int i = 0, u, v; i < m; i++) {
		cin >> u >> v;
		g[u].push_back(make_pair(v, i));
		g[v].push_back(make_pair(u, i));
		ind[v]++, ind[u]++;
		edg.push_back(make_pair(u, v));
	}
	for (int i = 1; i <= n; i++)
		sett.insert(make_pair(ind[i], i));
	while (sett.size() && sett.begin()->first < k) {
		del(sett.begin()->second);
	}
	vector<int> res(m);
	for (int i = m - 1; i >= 0; i--) {
		res[i] = sett.size();
		int u = edg[i].first;
		int v = edg[i].second;
		if (vis[i] || !in(u) || !in(v))
			continue;
		vis[i] = 1;
		sett.erase(make_pair(ind[v], v));
		ind[v]--;
		sett.insert(make_pair(ind[v], v));

		sett.erase(make_pair(ind[u], u));
		ind[u]--;
		sett.insert(make_pair(ind[u], u));
		while (sett.size() && sett.begin()->first < k) {
			del(sett.begin()->second);
		}
	}
	for (int i = 0; i < m; i++)
		cout << res[i] << '\n';
	return 0;
}
