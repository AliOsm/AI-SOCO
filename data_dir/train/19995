#include<bits/stdc++.h>

using namespace std;
#define ll long long
const int maxn = 2e5;
ll present[maxn] , arr[maxn] , n , m;
ll cost[maxn];

struct Node{
    ll id , cost;
    Node(){}
    Node(ll _id , ll _cost){
         id = _id; cost = _cost;
    }
    bool operator < (const Node &a)const{
        return cost > a.cost;
    }
};
priority_queue<Node>q;

int main()
{
    scanf("%lld%lld",&n,&m);
    for(int i = 1; i<=n; i++){
        scanf("%lld",&arr[i]);
        present[i] = arr[i];
    }
    for(int i = 1; i<=n; i++){
        scanf("%lld",&cost[i]);
        q.push(Node(i,cost[i]));
    }
    for(int i = 1; i<=m; i++){
        ll u , v;
        scanf("%lld%lld",&u,&v);
        ll COST = 0;
        if(present[u] >= v){
            COST += cost[u]*v;
            present[u] -= v;
            v = 0;
        }
        else{
            ll ase = present[u];
            v -= ase;
            present[u] = 0;
            COST += ase * cost[u];
            while(!q.empty()){
                if(v==0)break;
                Node temp = q.top();
                q.pop();
                if(present[temp.id]==0)continue;
                if(present[temp.id] >= v){
                    COST += (cost[temp.id] * v);
                    present[temp.id] -= v;
                    if(present[temp.id] > 0){
                        q.push(Node(temp.id,cost[temp.id]));
                    }
                    v = 0;
                }
                else{
                    COST += present[temp.id]*cost[temp.id];
                    v -= present[temp.id];
                    present[temp.id] = 0;
                }
            }

        }
        if(v == 0){
            printf("%lld\n",COST);
        }
        else printf("0\n");
    }
    return 0;

}
