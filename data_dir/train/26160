//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")
  
#include <iostream>
#include <stdlib.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <random>
#include <assert.h>
#include <memory.h>
#include <time.h>
#include <bitset>
  
#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = (l); i < (r); i++)
#define repb(i, r, l) for (int i = (r); i > (l); i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)
#define rank qwertyuio
#define next dfghjk
#define plus fsghsf
#define minus ytryr
  
using namespace std;
  
inline bool setmin(int &x, int y) { return (y < x) ? x = y, 1 : 0; }
inline bool setmax(int &x, int y) { return (y > x) ? x = y, 1 : 0; }
inline bool setmin(ll &x, ll y) { return (y < x) ? x = y, 1 : 0; }
inline bool setmax(ll &x, ll y) { return (y > x) ? x = y, 1 : 0; }
  
const int N = 100000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int P1 = 31;
const int P2 = 57;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const int MOD2 = 998244353;
const ld eps = 1e-12;
const double pi = atan2(0, -1);
const int ABC = 26;

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    //ll TL = 10.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n; ll k;
    cin >> n >> k;
    int a[n];
    rep(i, 0, n) {
        cin >> a[i];
    }
    ll sum = 0;
    rep(i, 0, n) {
        sum += a[i];
    }
    if (sum < k) {
        cout << -1 << "\n";
        return 0;
    }
    bool used[n]; fill(used, used + n, false);
    pair<int, int> b[n];
    rep(i, 0, n) {
        b[i] = {a[i], i};
    }
    sort(b, b + n);
    ll cur = 0;
    int rem = n, p = 0;
    while (true) {
        ll d = min(k / rem, b[p].fi - cur);
        k -= rem * d;
        cur += d;
        while (p < n && b[p].fi == cur) {
            used[b[p].se] = true;
            rem--;
            p++;
        }
        if (d == 0 || rem == 0) {
            break;
        }
    }
    deque<pair<int, int> > q;
    rep(i, 0, n) {
        if (!used[i]) {
            q.push_back({a[i] - cur, i});
        }
    }
    rep(i, 0, k) {
        auto p = q.front();
        q.pop_front();
        p.fi--;
        if (p.fi > 0) {
            q.push_back(p);
        }
    }
    for (auto it : q) {
        cout << it.se + 1 << " ";
    }
    cout << "\n";
    return 0;
}