//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const int inf_int = 1e9 + 100;
const ll inf_ll = 1e18;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef long double dbl;
#define pb push_back
#define eb emplace_back
const double pi = 3.1415926535898;
#define dout if(debug) cout
#define fi first
#define se second
#define sp setprecision
#define sz(a) (int(a.size()))
#define mp make_pair
#define all(a) a.begin(),a.end()
bool debug = 0;
const int MAXN = 2e5 + 100;
const int LOG = 21;
const int mod = 998244353;
const int MX = 1e3 + 100;
typedef long long li;
const li MOD = 1000000000949747713ll;

template<class T1, class T2>
std::ostream &operator<<(std::ostream &out, const std::pair<T1, T2> &rhs) {
    out << "( " << rhs.first << " , " << rhs.second << " )";
    return out;
}


int a[15][2100];
int mx[2100];

int b[16][16];

vector<int> make_rotate(vector<int> a) {
    vector<int> res;
    res.pb(a.back());
    for (int i = 0; i < sz(a) - 1; ++i) {
        res.pb(a[i]);
    }
    return res;
}

int val[16][1 << 12];

int dp[2][1 << 12];

void solve() {
    int n, m;
    cin >> n >> m;
    vector<pii> c;
    for (int i = 1; i <= m; ++i) {
        mx[i] = 0;
    }
    for (int i = 1; i <= n; ++i) {
        for (int e = 1; e <= m; ++e) {
            cin >> a[i][e];
            mx[e] = max(mx[e], a[i][e]);
        }
    }
    for (int i = 1; i <= m; ++i) {
        c.pb({mx[i], i});
    }
    sort(all(c));
    reverse(all(c));

    if (m > n) {
        for (int j = 0; j < n; ++j) {
            int id = c[j].se;
            for (int e = 1; e <= n; ++e) {
                b[e][j + 1] = a[e][id];
            }
        }
    } else {
        for (int j = 1; j <= m; ++j) {
            for (int e = 1; e <= n; ++e) {
                b[e][j] = a[e][j];
            }
        }
    }
    m = min(n, m);
    for(int i=1;i<=n;++i){
        for(int e=1;e<=m;++e){
            dout <<b[i][e]<<" ";
        }
        dout << endl;
    }
    int all = (1 << n);
    for (int i = 1; i <= m; ++i) {
        vector<int> init;
        for (int e = 1; e <= n; ++e) {
            init.pb(b[e][i]);
        }
        memset(val[i], 0, sizeof val[i]);
        for (int j = 0; j <= n; ++j) {

            for (int mask = 0; mask < (1 << n); ++mask) {
                int sum = 0;
                for (int i = 0; i < n; ++i) {
                    if (mask & (1 << i))
                        sum += init[i];
                }
                val[i][mask] = max(val[i][mask], sum);
            }
            init = make_rotate(init);
        }


        for(int j=0;j<all;++j){
            dout << val[i][j]<<" ";
        }
        dout <<endl;
    }

    memset(dp, 0, sizeof dp);

    for (int i = 1; i <= m; ++i) {
        int cur = i & 1;
        for (int mask = 0; mask < all; ++mask) {
            int other = (all - 1) ^mask;
            for (int s = other;; s = ((s - 1) & other)) {
                assert((mask&s) == 0);
                if (dp[cur ^ 1][mask | s] < dp[cur][mask] + val[i][s]) {
                    dp[cur ^ 1][mask | s] = dp[cur][mask] + val[i][s];
                }
                if (s == 0)
                    break;
            }
        }
    }
    cout << max(dp[0][all-1],dp[1][all-1])<<"\n";


}

signed main() {
#ifdef zxc
    debug = 0;
    freopen("../input.txt", "r", stdin);
    //  freopen("../output.txt", "w", stdout);
#else

#endif //zxc
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cout.setf(ios::fixed);
    cout.precision(20);

    int t = 1;
    cin >> t;
    while (t--)
        solve();
    if (debug)
        cerr << endl << "time : " << (1.0 * clock() / CLOCKS_PER_SEC) << endl;
}