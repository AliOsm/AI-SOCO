#include<bits/stdc++.h>
using namespace std;
const int MX=(1<<17) , inf = (1<<30);
class Disjoint_Set{
    public:
    int sz[MX] , P[MX];
    int find_(int x){
        if(x!=P[x]) P[x]=find_(P[x]);
        return P[x];
    }
    public:
    int comp;
    void init(int N){
        for(int j=1;j<=N;j++)
            sz[j]=1 , P[j]=j;
        comp = N;
    }
    bool same(int x , int y){
	return find_(x) == find_(y);
    }
    int compsize(int node){
	return sz[find_(node)];
    }
    bool merge_(int x , int y){
        int px=find_(x) , py=find_(y);
        if(px==py) return false;
        if(sz[px] < sz[py]) swap(px , py);
        P[py]=px;
        comp--;
        sz[px]+=sz[py];
        return true;
    }
}G;
int n , m , cnt[MX];
int dp[MX];
int main(){
    scanf("%d %d",&n,&m);
    fill(dp , dp + 1 + n , inf);
    dp[0] = 0;
    G.init(n);
    while(m--){
        int a , b;
        scanf("%d %d",&a,&b);
        G.merge_(a , b);
    }
    for(int j=1;j<=n;j++) if(G.find_(j) == j) ++cnt[G.sz[j]];
    for(int j=1;j<=n;j++){
        int rem = cnt[j] , p = 1;
        while(rem){
            int W = min(rem , p); rem -= W;
            int C = j * W;
            for(int i = n ; i >= C ; i--)
                dp[i] = min(dp[i] , dp[i-C] + W);
            p*=2;
        }
    }
    int ans = inf;
    for(int j=1;j<=n;j++){
        int x = j;
        bool ok = 1;
        while(x){
            if(x%10 != 4 && x%10 != 7) ok = 0;
            x/=10;
        }
        if(!ok) continue;
        ans = min(ans , dp[j]);
    }
    if(ans == inf) cout<<-1<<endl;
    else cout<<ans-1<<endl;
}
