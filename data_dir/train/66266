#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <tuple>
#include <numeric>
#define MODD 1000000007
#define BASE 30
#define ll long long
using namespace std;


bool AllSame(const string& S) {
    int L = S.size();
    if (L%2==0) {
        for(int i=1;i<S.size();i++) {
            if (S[i]!=S[0])
                return false;
        }
    } else {
        for(int i=1;i<S.size();i++) {
            if (i != (L-1)/2 && S[i]!=S[0])
                return false;
        }
    }
    return true;
}

ll hashval[11111];
ll fwd_hash[11111];

ll modpow(ll x, ll y) {
    x%=MODD;
    ll xs = x;
    ll answer = 1;
    while(y) {
        if (y&1) {
            answer = (answer * xs) % MODD;
        }
        y >>= 1;
        xs = (xs * xs) % MODD;
    }
    return answer;
}




vector<ll> ComputeHashes(const string& SS, int L) {
    ll h = 0;
    for(int i=0;i<SS.size();i++) {
        h = (h * BASE + SS[i]-'a')%MODD;
        hashval[i]=h;
    }
    
    vector<ll> fwd_hash(2*L,0);
    
    for(int st=0;st<=L;st++) {
        int en = st + L - 1;
        fwd_hash[st] = hashval[en] - (st > 0 ? hashval[st-1] * modpow(BASE,L) : 0);
        fwd_hash[st] %= MODD;
        fwd_hash[st] = (fwd_hash[st]+MODD)%MODD;
    }
    return fwd_hash;
    
}


void Solve(const string& S) {
    if (AllSame(S)) {
        cout << "Impossible" << endl;
        return;
    }
    
    int L = S.size();
    
    string SS = S+S;
    
    
    vector<ll> fwd_hash = ComputeHashes(SS, L);
    std::reverse(SS.begin(),SS.end());
    vector<ll> bck_hash = ComputeHashes(SS, L);
    std::reverse(bck_hash.begin(),bck_hash.end());

    
    for(int st=0;st<L;st++) {
        if (fwd_hash[st] == bck_hash[st+L-1] && fwd_hash[st] != fwd_hash[0]) {
            cout << 1 << endl;
            return;
        }
        
    }
    
    cout << 2 << endl;
    return;
    
    
    
    
    
}

int main() {
    string S;
    cin>>S;
    
    Solve(S);
    
}
