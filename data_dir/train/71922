/* @nazarbek.altybay */
  
#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <queue>
#include <ctime>
  
#define pii pair<int, int>
  
#define pb push_back
#define mp make_pair
  
#define f first
#define s second
  
using namespace std;
  
typedef long long ll;
typedef long double ld;
  
const double EPS = 1e-3;
const double PI = acos(-1);
  
const int INF = (int) 1e9 + 7;
const int MAXN = (int) 2e6 + 7;
  
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};

int n, k;
pii pt[MAXN];
int cx[MAXN];
vector<int> xs,ys;
vector<int> cy[MAXN];

int main() {
  #ifdef LOCAL
    freopen("in", "r", stdin);
  #endif

  scanf("%d%d", &n, &k);
  for (int i = 1; i <= n; i++) {
    int x, y, xt, yt;
    scanf("%d%d%d%d", &x, &y, &xt, &yt);
    x += x, y += y, xt += xt, yt += yt;
    int cx = (0ll+x + xt) / 2;
    int cy = (0ll+y + yt) / 2;
    pt[i] = mp(cx, cy);
    xs.pb(cx);
    ys.pb(cy);
  }
  sort(xs.begin(), xs.end());
  sort(ys.begin(), ys.end());
  xs.resize(unique(xs.begin(), xs.end()) - xs.begin());
  ys.resize(unique(ys.begin(), ys.end()) - ys.begin());
  for (int i = 1; i <= n; i++) {
    cx[lower_bound(xs.begin(), xs.end(), pt[i].f) - xs.begin()]++;
    cy[lower_bound(ys.begin(), ys.end(), pt[i].s) - ys.begin()].pb(pt[i].f);
  }
  for (int i = 0; i < ys.size(); i++)
    sort(cy[i].begin(), cy[i].end());

  int s1 = xs.size();
  int s2 = ys.size();
  int bl = 0, br = 0, bu = 0, bd = 0;
  ll ans = (ll) 9e18;
  for (int l = 0; l < s1; l++) {
    br = 0;
    for (int r = s1 - 1; r >= l; r--) {
      bu = 0;
      for (int u = 0; u < s2; u++) {
        bd = 0;
        for (int d = s2 - 1; d >= u; d--) {
          if (bl + br + bd + bu <= k) {
            int x = xs[l], xt = xs[r];
            int y = ys[u], yt = ys[d];
            int L = xt - x, R = yt - y;
            if (L & 1) L++;
            if (R & 1) R++;
            if (!L) L += 2;
            if (!R) R += 2;
            ans = min(ans, 1ll * L * R / 4);
          }
          auto fl = upper_bound(cy[d].begin(), cy[d].end(), xs[r]);
          auto fr = lower_bound(cy[d].begin(), cy[d].end(), xs[l]);
          bd += fl - fr;
          if (bd > k)
            break;
        }
        auto fl = upper_bound(cy[u].begin(), cy[u].end(), xs[r]);
        auto fr = lower_bound(cy[u].begin(), cy[u].end(), xs[l]);
        bu += fl - fr;
        if (bu > k)
          break;
      }
      br += cx[r];
      if (br > k)
        break;
    }
    bl += cx[l];
    if (bl > k) break;
  }
  if (!ans) ans = 1;
  cout << ans;
  
  return 0;
}