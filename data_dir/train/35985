// practice with rainboy
#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

const int N = 2000000;

vector<int> aa[N];
bool visited[N];
int ab[N], xx[N], ii[N], *dd, *dd_, stack[N * 2];

bool dfs(int p, int i) {
	if (visited[i])
		return false;
	int cnt = 0;
	stack[cnt++] = p;
	stack[cnt++] = i;
	visited[i] = true;
	while (cnt > 0) {
		i = stack[--cnt];
		p = stack[--cnt];
		for (int j : aa[i])
			if (j != p) {
				if (visited[j])
					return false;
				stack[cnt++] = i;
				stack[cnt++] = j;
				visited[j] = true;
			}
	}
	return true;
}

bool check(int n, int n_) {
	fill_n(visited, n, false);
	for (int i = n_; i < n; i++)
		if (!dfs(-1, i))
			return false;
	int cnt = 0;
	for (int i = 0; i < n_; i++)
		if (!visited[i]) {
			if ((dd_[i] = dd[i]) == 1)
				stack[cnt++] = i;
		}
	while (cnt > 0) {
		int i = stack[--cnt];
		if (dd_[i] < 1)
			continue;
		dd_[i] = 0;
		for (int j : aa[i])
			if (--dd_[j] == 1)
				stack[cnt++] = j;
	}
	for (int i = 0; i < n_; i++)
		if (!visited[i]) {
			if (dd_[i] > 2)
				return false;
		}
	return true;
}

int main() {
	int m;
	scanf("%d", &m);
	for (int h = 0; h < m; h++) {
		int a, b;
		scanf("%d%d", &a, &b);
		ab[h * 2 + 0] = a;
		ab[h * 2 + 1] = b;
	}
	for (int h = 0; h < m + m; h++)
		ii[h] = h;
	sort(ii, ii + m + m, [] (int i, int j) { return ab[i] < ab[j]; });
	int n = 0;
	for (int h = 0; h < m + m; h++)
		if (h + 1 == m + m || ab[ii[h]] != ab[ii[h + 1]]) {
			xx[n] = ab[ii[h]];
			ab[ii[h]] = n++;
		} else
			ab[ii[h]] = n;
	fill_n(dd = ii, n, 0);
	for (int h = 0; h < m; h++) {
		int i = ab[h * 2 + 0];
		int j = ab[h * 2 + 1];
		aa[i].push_back(j);
		aa[j].push_back(i);
		dd[i]++;
		dd[j]++;
	}
	dd_ = ab;
	int lower = 0, upper = n + 1;
	while (upper - lower > 1) {
		int n_ = (lower + upper) / 2;
		if (check(n, n_))
			upper = n_;
		else
			lower = n_;
	}
	printf("%d\n", upper == n + 1 ? -1 : xx[upper - 1]);
	return 0;
}
