#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 30;
const int MOD = 1e9 + 7;

int main() {
  int n, m;
  scanf("%d%d", &n, &m);
  --n;
  vector<int> a(m), b(m);
  for (int i = 0; i < m; ++i) {
    scanf("%d%d", &a[i], &b[i]);
    --a[i]; --b[i];
  }
  set<int> ret;
  for (int len = 1; len <= 100; ++len) {
    bool found = false;
    for (int i = 0; i < m; ++i) {
      if (a[i] / len != b[i]) {
        found = true;
        break;
      }
    }
    if (!found) ret.insert(n / len + 1);
  }
  if (ret.size() == 1) {
    printf("%d\n", *ret.begin());
  } else {
    puts("-1");
  }
  return 0;
}
