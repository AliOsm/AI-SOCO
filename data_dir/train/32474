///****In the name of Allah, most Gracious, most Compassionate****//

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

#define NL cout<<"\n";
#define ALL(a) a.begin(), a.end()
#define DBG(a) cout<< #a <<" --> "<<(a)<<endl;
#define FastIO ios::sync_with_stdio(false); cin.tie(nullptr);cout.tie(nullptr)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}

const int N=3e5+5;
const int oo=1e9+7;
struct val
{
    int a, i, id;
    bool operator < ( const val & v)
    {
        return a<v.a;
    }
};


val a[N];
int ans[N];


int value[4*N];
int func(int i,int j)
{
    return max(i,j);
}
void UpdatePoint(int node , int ss, int se, int u, int diff)
{
    int mid = ss+(se-ss)/2;

    if (ss>se || ss>u || se<u)
        return ;

    if (ss==se&& ss==u)
    {
        value[node] = max(value[node]  , diff );
        return;
    }

    UpdatePoint(node<<1, ss, mid, u, diff);
    UpdatePoint((node<<1)+1, mid+1, se, u, diff);

    value[node]=func(value[node<<1],value[(node<<1)+1]);

}
int Getfunc(int node,int ss, int se, int qs, int qe)
{
    int mid = ss+(se-ss)/2;

     if (ss>se || ss>qe || se<qs || qs>qe)
        return 0;

    if (ss>=qs && se<=qe)
        return value[node];

    return func(Getfunc(node<<1,ss,mid,qs,qe),Getfunc((node<<1)+1,mid+1,se,qs,qe));
}

void Build(int node,int *a,int ss,int se)
{
    if(ss==se)
    {
        value[node]=0;
        return ;
    }
    int mid = ss+(se-ss)/2;
    Build(node<<1,a,ss,mid);
    Build((node<<1)+1,a,mid+1,se);
    value[node]=func(value[node<<1],value[(node<<1)+1]);
}



bool cmp(val a,val b)
{
    return a.i<b.i;
}



int32_t main()
{
    FastIO;
    int n;
    cin>>n;
    for(int i=0; i<n; i++)
    {
        cin>>a[i].a;
        a[i].i = i;
    }
    sort(a,a+n);
    int now = 0;
    a[0].id= now++;
    for(int i=1;i<n;i++)
    {
        if(a[i].a != a[i-1].a)
        {
            a[i].id = now++;
        }
        else
            a[i].id = now-1 ;
    }
//    DBG(now);
    //Build(1,ans,0,now);
    sort(a,a+n , cmp);
    for(int i=n-1;i>=0;i--)
    {
        ans[i] = Getfunc(1,0,now,0,a[i].id-1);
//        DBG(i);
//        DBG(ans[i]);


        if(ans[i]==0)
            ans[i]=-1;
        else
            ans[i] = ans[i] - i-1;


//        DBG(a[i].id);
//        NL;
        UpdatePoint(1,0,now  , a[i].id , i);
    }
    for(int i=0;i<n;i++) cout<<ans[i]<<" "; NL;
}
