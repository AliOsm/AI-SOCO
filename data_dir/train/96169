#include<bits/stdc++.h>

#define x first
#define y second
#define y0 hi1
#define y1 hi2
#define ll long long
#define mp make_pair
#define pb push_back
#define sqr(a) (a)*(a)
#define ld long double
#define all(a) (a).begin(), (a).end()

using namespace std;

const int inf = 2000000000;
const int N = 1e5 + 5;
const int M = 1e3 + 5;

struct query{
    int t, i, j, ans;
} f[N];

vector<int> g[N];
void add(int v, int t){
    g[v].pb(t);
}

int n, m, s[M], op[M], a[M][M];

void dfs(int v, int ans){
    f[v].ans = ans;

    for(int i = 0; i < g[v].size(); i++){
        int t = g[v][i];
        int cur = ans;

        if(f[t].t == 4){
            dfs(t, cur);
        } else
        if(f[t].t == 1){
            int x = op[f[t].i];

            if(a[f[t].i][f[t].j] == x){
                s[f[t].i]++;
                a[f[t].i][f[t].j] = 1 - a[f[t].i][f[t].j];

                dfs(t, cur + 1);

                a[f[t].i][f[t].j] = 1 - a[f[t].i][f[t].j];
                s[f[t].i]--;
            } else {
                dfs(t, cur);
            }
        } else
        if(f[t].t == 2){
            int x = 1 - op[f[t].i];

            if(a[f[t].i][f[t].j] == x){
                s[f[t].i]--;
                a[f[t].i][f[t].j] = 1 - a[f[t].i][f[t].j];

                dfs(t, cur - 1);

                a[f[t].i][f[t].j] = 1 - a[f[t].i][f[t].j];
                s[f[t].i]++;
            } else {
                dfs(t, cur);
            }
        } else {
            op[f[t].i] = (op[f[t].i] + 1) & 1;
            int p = s[f[t].i];
            int c = m - s[f[t].i];
            s[f[t].i] = c;

            dfs(t, cur + c - p);

            op[f[t].i] = (op[f[t].i] + 1) & 1;
            s[f[t].i] = p;
        }
    }
}

int main(){
    cin.tie(0);
    ios_base::sync_with_stdio(0);
    int q;
    cin >> n >> m >> q;

    int l = 0;
    for(int i = 1; i <= q; i++){
        cin >> f[i].t;

        if(f[i].t == 1){
            cin >> f[i].i >> f[i].j;
            add(l, i);
            l = i;
        } else
        if(f[i].t == 2){
            cin >> f[i].i >> f[i].j;
            add(l, i);
            l = i;
        } else
        if(f[i].t == 3){
            cin >> f[i].i;
            add(l, i);
            l = i;
        } else {
            cin >> f[i].i;
            add(f[i].i, i);
            l = i;
        }
    }

    dfs(0, 0);

    for(int i = 1; i <= q; i++){
        cout << f[i].ans << "\n";
    }
}
