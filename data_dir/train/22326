//Author - Rahil Malhotra
#include <bits/stdc++.h>
using namespace std;
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
#define int long long
#define double long double

int n;
int arr[200005];
int rt[200005],sizee[200005];
int mark[200005];
int maxsize=0;
int root(int i)
{
    while(rt[i]!= i)
    {
        rt[i]=rt[rt[i]]; 
        i=rt[i];
    }
    return i;
}
void merge(int A,int B)
{
    int root_A = root(A);
    int root_B = root(B);
    if(rt[root_A]==rt[root_B])
        return;
    if(sizee[root_A] < sizee[root_B])
    {
        rt[root_A] = rt[root_B];
        sizee[root_B] += sizee[root_A];
    }
    else
    {
        rt[root_B] = rt[root_A];
        sizee[root_A] += sizee[root_B];
    }
    maxsize=max(maxsize,sizee[root_A]);
    maxsize=max(maxsize,sizee[root_B]);
}
int32_t main()
{
    cin>>n;
    set<int>hs;
    map<int,int>mp;
    for(int i=0;i<n;i++)
        rt[i]=i,sizee[i]=1;

    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
        hs.insert(arr[i]);
    }

    int ct=0;
    for(auto i:hs)
        mp[i]=++ct;
    vector<int>v[ct+2];
    for(int i=0;i<n;i++)
        v[mp[arr[i]]].push_back(i);

    int currval=0;
    int ind=ct;
    for(int i=1;i<=n;i++)
    {
        while(maxsize<i)
        {
            for(int j:v[ind])
            {
                if(j!=n-1 && mark[j+1])
                    merge(j,j+1);
                if(j!=0 && mark[j-1])
                    merge(j,j-1);
                mark[j]=1;
                maxsize=max(maxsize,1ll);
            }
            ind--;
        }
        cout<<arr[v[ind+1][0]]<<" ";
    }
}