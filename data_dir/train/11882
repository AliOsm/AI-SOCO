#include<bits/stdc++.h>
using namespace std;

int n;
int m;

int k;

map<pair<int, int>, vector<int> > mp[4];

#define MAX 100002
long long int ans[MAX];
vector<pair<int, int> > P;

int main(){
	cin >> m >> n>> k;
	for (int i = 0; i < k; i++){
		int x, y;
		scanf("%d%d", &x, &y);
		swap(x, y);
		{
			int X = x - min(x, y);
			int Y = y - min(x, y);
			mp[0][make_pair(X, Y)].push_back(i);
		}
		{
			//n,m
			int X = x + min(n - x, m - y);
			int Y = y + min(n - x, m - y);
			mp[1][make_pair(X, Y)].push_back(i);
		}
		{
			int X = x + min(n - x, y);
			int Y = y - min(n - x, y);
			mp[3][make_pair(X, Y)].push_back(i);
		}
		{
			int X = x - min(x, m - y);
			int Y = y + min(x, m - y);
			mp[2][make_pair(X, Y)].push_back(i);
		}
		P.push_back(make_pair(x, y));
	}
	int nx = 0;
	int ny = 0;
	int nex_dir = 0;
	bool flag = false;
	long long int tim = 0;
	for (int i = 0; i < MAX; i++){
		ans[i] = LLONG_MAX;
	}
	while (1){
		if ((nx==0||nx==n)&&(ny==m||ny==0)&&flag == true){
			break;
		}
		flag = true;
		if (mp[nex_dir].count(make_pair(nx, ny))){
			vector<int> &vv = mp[nex_dir][make_pair(nx,ny)];
			for (int i = 0; i < vv.size(); i++){
				ans[vv[i]] = min(ans[vv[i]], tim + abs(nx - P[vv[i]].first));
			}
			vv.clear();
		}
		int nexx; 
		int nexy;
		if (nex_dir == 0){
			nexx = nx + min(n - nx, m - ny);
			nexy = ny + min(n - nx, m - ny);
		}
		if (nex_dir == 1){
			nexx = nx - min(nx, ny);
			nexy = ny - min(nx, ny);
		}
		if (nex_dir == 2){
			nexx = nx + min(n - nx, ny);
			nexy = ny - min(n - nx, ny);
		}
		if (nex_dir == 3){
			nexx = nx - min(nx, m - ny);
			nexy = ny + min(nx, m - ny);
		}
		int nexx_dir;
		if (nex_dir == 0){
			if (nexx == n){
				nexx_dir = 3;
			}
			else{
				nexx_dir = 2;
			}
		}
		if (nex_dir == 1){
			if (nexx == 0){
				nexx_dir = 2;
			}
			else{
				nexx_dir = 3;
			}
		}
		if (nex_dir == 2){
			if (nexx == n){
				nexx_dir = 1;
			}
			else{
				nexx_dir = 0;
			}
		}
		if (nex_dir == 3){
			if (nexx == 0){
				nexx_dir = 0;
			}
			else{
				nexx_dir = 1;
			}
		}
		nex_dir = nexx_dir;
		tim += abs(nx - nexx);
		nx = nexx;
		ny = nexy;
	}
	for (int i = 0; i<P.size();i++){
		if (ans[i] == LLONG_MAX){
			ans[i] = -1LL;
		}
		printf("%I64d\n", ans[i]);
	}
	return 0;
}