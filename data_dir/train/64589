#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 1e5 + 7;

int n, col[N], t[N];
vector < int > G[N];
map < int, LL > V[2];

int dfs(int v = 1)
{
    for(auto u: G[v])
        col[v] = dfs(u) ^ 1;
    V[col[v]][t[v]]++;
    return col[v];
}

int main()
{
    _upgrade
    cin >> n;
    for(int i = 1; i <= n; i++)
        cin >> t[i];
    for(int i = 2; i <= n; i++)
    {
        int p; cin >> p;
        G[p].push_back(i);
    }
    dfs();
    int xr = 0;
    for(auto x: V[0])
        if(x.second & 1) xr ^= x.first;
    LL ans = 0;
    for(auto x: V[0])
        if(V[1].find(x.first ^ xr) != V[1].end()) ans += V[0][x.first] * V[1][x.first ^ xr];
    if(xr == 0)
    {
        LL sz1 = 0, sz2 = 0;
        for(auto x: V[0]) sz1 += x.second;
        for(auto x: V[1]) sz2 += x.second;
        ans += sz1 * (sz1 - 1) / 2;
        ans += sz2 * (sz2 - 1) / 2;
    }
    cout << ans << "\n";
    return 0;
}
