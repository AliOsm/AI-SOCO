#ifdef DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <bits/stdc++.h>

using namespace std;

mt19937 mrand(random_device{} ()); 

int rnd(int x) {
  return mrand() % x;
}

typedef long double ld;
typedef long long ll;

#ifdef DEBUG
#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#else
#define eprintf(...) ;
#endif

#define pb push_back
#define mp make_pair
#define sz(x) ((int) (x).size())
#define TASK "text"

const int inf = (int) 1.01e9;
const ld eps = 1e-9;
const ld pi = acos((ld) -1.0);

const int mod = (int) 1e9 + 7;

void add(int &x, int y) {
  if ((x += y) >= mod) {
    x -= mod;
  }
}

int mult(int x, int y) {
  return (long long) x * y % mod;
}

int myPower(int x, int pw) {
  int res = 1;
  for (; pw; pw >>= 1) {
    if (pw & 1) {
      res = mult(res, x);
    }
    x = mult(x, x);
  }
  return res;
}

const int maxn = (int) 2e5 + 10;
int fs[maxn], invfs[maxn];

void precalc() {
  fs[0] = invfs[0] = 1;
  for (int i = 1; i < maxn; ++i) {
    fs[i] = mult(fs[i - 1], i);
    invfs[i] = myPower(fs[i], mod - 2);
  }
}

int f, w, h;

int read() {
  if (scanf("%d%d%d", &f, &w, &h) < 3) {
    return 0;
  }
  ++h;
  return 1;
}


int a[maxn];
int b[maxn];

int ans[maxn];

void solve() {
  int res = 1;
  for (int iter = 0; iter < 2; ++iter) {
    if (iter) {
      h = 1;
    }
    int c1 = 0;
    if (!f) {
      a[c1++] = 1;
    } else {
      c1 = f + 1;
      a[0] = 0;
      for (int i = 1; i <= f; ++i) {
        a[i] = mult(mult(fs[f - 1], invfs[i - 1]), invfs[f - i]);
      }
    }

    int c2 = 0;
    if (!w) {
      b[c2++] = 1;
    } else {
      c2 = 1;
      b[0] = 0;
      for (int i = 1;; ++i) {
        int left = w - (h - 1) * i;
        if (left < i) {
          break;
        }
        b[c2++] = mult(mult(fs[left - 1], invfs[i - 1]), invfs[left - i]);
      }
    }

    /*eprintf("%d %d\n", c1, c2);
    for (int i = 0; i < c1; ++i) {
      eprintf("%d%c", a[i], " \n"[i == c1 - 1]);
    }
    for (int i = 0; i < c2; ++i) {
      eprintf("%d%c", b[i], " \n"[i == c2 - 1]);
    }*/


    int cur = 0;
    for (int i = 0; i < c1; ++i) {
      for (int j = max(0, i - 1); j < c2 && j <= i + 1; ++j) {
        int got = mult(a[i], b[j]);
        if (i == j) {
          got = mult(got, 2);
        }
        add(cur, got);
      }
    }

    //eprintf("cur = %d\n", cur);
    if (iter) {
      cur = myPower(cur, mod - 2);
    }
    res = mult(res, cur);
  }

  printf("%d\n", res);
}

int main() {
  precalc();
#ifdef LOCAL
  freopen(TASK ".out", "w", stdout);
  assert(freopen(TASK ".in", "r", stdin));
#endif

  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("Time %.2f\n", (double) clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
