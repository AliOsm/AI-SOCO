//AUTHOR : TIRTH JARSANIA
//COLLEGE : DAIICT

#include<bits/stdc++.h>
using namespace std;
// TOPIC : BIT-MASKING

#define INF LONG_LONG_MAX
#define MINF LONG_LONG_MIN
#define bp __builtin_popcountll
#define ll long long int
#define ld long double
#define pb push_back
#define ff first
#define ss second
#define pii pair<ll,ll>
#define precision(x,d) cout<<fixed<<setprecision(d)<<x
#define minQueue priority_queue<pii,vector<pii>,greater<pii> > 
#define maxQueue priority_queue<pii> 
#define FAST ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);srand(time(NULL))

const ll LN = 19;
const ll N = 1e5+5;
const ll mod = 1e9+7;
ll prime[] = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67};
ll dp[2][(1<<LN)] ,odd[N] , even[N];

void init() 
{
    odd[1] = 1;  // ways :non_empty set which size odd
    even[1] = 0; // ways :non_empty set which size even
    for( ll i = 2; i < N; i++ )
        odd[i] = (odd[i-1] * 2LL) %mod, even[i] = (odd[i]-1LL+mod)%mod;
    return ;
}
ll make_mask(ll n)
{
    ll ans = 0;
    for( ll i =  0 ; i < LN ; i++ )
    {
        ll cnt = 0;
        while(n > 1 && n%prime[i] == 0)
        {
            n/=prime[i];
            cnt^=1;
        }
        ans += ((1<<i)*cnt);
    }
    return ans;
}

int main()
{
    FAST;
    init() ;
    ll n;
    cin >> n;
    ll freq[ 71 ];
    memset(freq,0,sizeof(freq));
    memset(dp,0,sizeof(dp));
    for(ll i = 0 ; i < n ; i++ ) 
    {
        ll x;
        cin >> x;
        freq[x]++;
    }
    
    dp[0][0] = 1;
    for( ll i = 1 ; i <= 70 ; i++ )
    {
        
        ll p = (i&1);
        ll q = 1-p;
        ll cur_mask = make_mask(i);
        
        for( ll mask = 0 ; mask < (1<<LN) ; mask++ )
        {
            dp[p][mask] += dp[q][mask];
            dp[p][mask^cur_mask] += ((dp[q][mask] * odd[freq[i]]) %mod);
            dp[p][mask^cur_mask] %= mod;
            dp[p][mask] += ((dp[q][mask] * even[freq[i]] ) %mod);
            dp[p][mask] %= mod;
            
        }
        memset(dp[q],0,sizeof(dp[q]));
        
    }
    cout << (dp[0][0] -1LL + mod) %mod ;
}