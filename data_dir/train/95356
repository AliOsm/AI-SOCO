#include<bits/stdc++.h>
#define GO ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
using namespace std;
typedef long long ll;
typedef vector<int> vec;
const ll N = 1e5 + 2;
const ll INF = 5e8;
const ll Mod = 998244353;

int n;
typedef pair<int, int> point;
vec X[N], Y[N];
set<int> s[N];
bool isHeavy[N];

int main()
{
	GO;
	cin >> n;
	for (int i = 0, x, y; i < n; i++)
	{
		cin >> x >> y;
		X[x].push_back(y);
		s[x].insert(y);
	}
	int sq = 310;
	for(int i=0;i<1e5;i++)
		if (X[i].size() > sq)
		{
			isHeavy[i] = true;
			for (auto j : X[i])
				Y[j].push_back(i);
			X[i].clear();
		}
	ll cnt = 0;
	for (int i = 0; i <= 1e5; i++)
	{
		int m = X[i].size();
		for (int j = 0; j < m; j++)
			for (int k = j + 1; k < m; k++)
			{
				int y1 = X[i][j], y2 = X[i][k];
				int len = abs(y2 - y1);
				if (s[i + len].count(y1) && s[i + len].count(y2))
					cnt++;
				if (i - len >= 0 && isHeavy[i - len] && s[i - len].count(y1) && s[i - len].count(y2))
					cnt++;
			}
	}
	for (int i = 0; i <= 1e5; i++)
	{
		int m = Y[i].size();
		for (int j = 0; j < m; j++)
			for (int k = j + 1; k < m; k++)
			{
				int x1 = Y[i][j], x2 = Y[i][k];
				int len = abs(x2 - x1);
				if (s[x1].count(i + len) && s[x2].count(i + len))
					cnt++;
			}
	}
	cout << cnt << endl;
	return 0;
}