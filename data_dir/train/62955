#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define oset tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update> 

#define ll long long

#ifdef sarthak
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
int begtime = clock();
#else
#define trace(...)
#endif

#ifndef sarthak
    #pragma GCC optimize("Ofast")
    #pragma GCC optimize("unroll-loops")
    // #pragma GCC target ("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#endif

#define foreach(it,ar) for (auto it = ar.begin(); it != ar.end(); it++)
#define fort(i,v) for(auto i:v)
#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) rep(i,sizeof(ar)/sizeof(ll)) ar[i]=val
#define fill2(ar,val) rep(i,sizeof(ar)/sizeof(ar[0])) rep(j,sizeof(ar[0])/sizeof(ll)) ar[i][j]=val
#define fill0(ar) memset(ar,0,sizeof(ar))
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld long double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sd(x) scanf("%d",&x)
#define slld(x) scanf("%lld",&x)
#define sd2(x,y) scanf("%d %d",&x,&y)
#define slld2(x,y) scanf("%lld %lld",&x,&y)
#define pd(x) printf("%d\n",x)
#define plld(x) printf("%lld\n",x)
#define pd2(x,y) printf("%d %d\n",x,y)
#define plld2(x,y) printf("%lld %lld\n",x,y)
#define all(ar) ar.begin(), ar.end()
#define endl '\n'
#define sz(x) (int)x.size()
#define len(x) (int)x.length()

typedef pair<ll, ll> ii;
typedef pair<ii, ll> iii;
typedef vector<ii> vii;
typedef vector<ll> vi;

#define INF 1000000000000000000
#define PI 3.14159265358979323846L

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rngb(chrono::steady_clock::now().time_since_epoch().count()); // can give negative values too

bool a[2001][2001];
ll r[2001][2001];
ll c[2001][2001];
ll mir[2001];
ll mar[2001];
ll mic[2001];
ll mac[2001];

void solve()
{
    ll n,k;
    cin >> n >> k;

    rep(i,n)
    {
        rep(j,n)
        {
            char cx;
            cin >> cx;
            a[i+1][j+1] = (cx=='B');
        }
    }

    ll com = 0;

    fr(i,1,n)
    {
        mir[i] = INF;
        mar[i] = 0;
        fr(j,1,n)
        {
            if(a[i][j])
            {
                mir[i] = min(mir[i],j);
                mar[i] = max(mar[i],j);
            }
        }

        if(mir[i]==INF)
        {
            com++;
            mir[i] = 0;
            mar[i] = INF;
        }

        mic[i] = INF;
        mac[i] = 0;
        fr(j,1,n)
        {
            if(a[j][i])
            {
                mic[i] = min(mic[i],j);
                mac[i] = max(mac[i],j);
            }
        }
        if(mic[i]==INF)
        {
            mic[i] = 0;
            mac[i] = INF;
            com++;
        }
    }

    fr(i,1,n)
    {
        fr(j,1,n)
        {
            if(j+k-1<=n)
            {
                ll st = j;
                ll en = j+k-1;
                if(mir[i]==INF)
                    r[i][j] = 1;
                else
                {
                    if(mir[i]>=st && mar[i]<=en)
                        r[i][j] = 1;
                }    
            }
            
            if(i+k-1<=n)
            {
                ll st = i;
                ll en = i+k-1;
                if(mic[j]==INF)
                    c[i][j] = 1;
                else
                {
                    if(mic[j]>=st && mac[j]<=en)
                        c[i][j] = 1;
                }
            }
        }
    }

    fr(i,1,n)
    {
        fr(j,1,n)
        {
            r[i][j] += r[i-1][j];
            c[i][j] += c[i][j-1]; 
            // trace(r[i][j],c[i][j],i,j);
        }
    }

    ll ans = 0;

    fr(i,1,n-k+1)
    {
        fr(j,1,n-k+1)
        {
            ll ans2 = 0;
            ll st = i;
            ll en = i+k-1;
            st--;
            ans2 = ans2 + r[en][j]-r[st][j];

            st = j;
            en = j+k-1;
            st--;
            ans2 = ans2 + (c[i][en]-c[i][st]);

            ans = max(ans,ans2);
        }
    }

    cout << ans+com << endl;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout << fixed;
    cout << setprecision(10);
    #ifdef sarthak
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll t = 1;
    // cin >> t;
    while(t--)
    {
        solve();
    }

    #ifdef sarthak
    cerr << "Time elapsed: " << (clock() - begtime)*1000/CLOCKS_PER_SEC << " ms\n\n";
    #endif
}
