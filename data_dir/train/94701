#pragma GCC omptimize("unroll-loops")
#pragma optimize("SEX_ON_THE_BEACH")
#pragma GCC optimize("no-stack-protector")
#pragma comment(linker, "/STACK:1000000000")
#include<bits/stdc++.h>

using namespace std;

//#define need_tree

#ifdef need_tree
    #include<ext/pb_ds/assoc_container.hpp>
    using namespace __gnu_pbds;
    template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#endif // need_tree

using ll = long long int;
using ull = unsigned long long int;
using dd = long double;
using ldd = long double;
using si = short int;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

ll get_seed(string s)
{
    ll ans = 0;
    for (int i = 0; i < s.size(); ++i)
        ans += s[i];
    return ans;
}

int popcount(int x)
{
    return __builtin_popcount(x);
}

ll popcountll(ll x)
{
    return __builtin_popcount(x);
}

#define all(x) (x).begin(), (x).end()
#define ff first
#define ss second


// debug defines
#ifdef HOME
    int jjj;
    #define PO cout << "Pomelo" << endl;
    #define OL cout << "Oliva" << endl;
    #define debug(x) cout << #x << " " << x << endl;
    #define debug_p(x) cout << #x << " " << x.ff << " " << x.ss << endl;
    #define debug_v(x) cout << #x << " "; for (auto iii : x) cout << iii << " "; cout << endl;
    #define debug_vp(x) cout << #x << " "; for (auto ii : x) cout << '[' << ii.ff << " " << ii.ss << ']'; cout << endl;
    #define wait() cin >> jjj;
#else
    #define PO 0;
    #define OL 0;
    #define debug(x) 0;
    #define debug_p(x) 0;
    #define debug_vp(x) 0;
    #define debug_v(x) 0;
    #define debug_vp(x) 0;
    #define wait() 0;
#endif // HOME
// end of debug defines

int arr[3000][3000];
int temp[3000][3000];

void solve(int ii)
{
    int n, m, a, b;
    cin >> n >> m >> a >> b;
    ll g, x, y, z;
    cin >> g >> x >> y >> z;
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < m; ++j)
        {
            arr[i][j] = g;
            g = (g * x + y) % z;
        }
    }
    for (int i = 0; i < n; ++i)
    {
        deque<int> hv;
        for (int j = 0; j < b - 1; ++j)
        {
            while (hv.size() && hv.back() > arr[i][j])
                hv.pop_back();
            hv.push_back(arr[i][j]);
        }
        for (int j = b - 1; j < m; ++j)
        {
            debug(j);
            while (hv.size() && hv.back() > arr[i][j])
                hv.pop_back();
            hv.push_back(arr[i][j]);
            debug_v(hv);
            temp[i][j] = hv.front();
            if (hv.front() == arr[i][j - b + 1])
                hv.pop_front();
            debug_v(hv);
        }
    }
    ll ans = 0;
    for (int j = b - 1; j < m; ++j)
    {
        deque<int> hv;
        for (int i = 0; i < a - 1; ++i)
        {
            while (hv.size() && temp[i][j] < hv.back())
                hv.pop_back();
            hv.push_back(temp[i][j]);
        }
        for (int i = a - 1; i < n; ++i)
        {
            while (hv.size() && temp[i][j] < hv.back())
                hv.pop_back();
            hv.push_back(temp[i][j]);
            ans += hv.front();
            if (hv.front() == temp[i - a + 1][j])
                hv.pop_front();
        }
    }
    cout << ans;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cout.tie(0);
    cin.tie(0);

    int t;
    t = 1;
    //cin >> t;
    for (int i = 0; i < t; ++i)
        solve(i);

    return 0;
}
