#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;
const int di[] = { -1,0,1,0 };
const int dj[] = { 0,1,0,-1 };
const ll MOD = 1e9 + 7;
const ll INF = 1e11;
#define mp make_pair
#define all(x) x.begin(),x.end()

vs g(10);

//bool win(int i, int j) {
//	if (g[i][j] == '.' && (
//		j > 1 && j < 8 &&
//		g[i][j - 2] == 'X' && g[i][j - 1] == 'X' && g[i][j + 1] == 'X' && g[i][j + 2] == 'X' ||
//		i > 1 && i < 8 &&
//		g[i - 2][j] == 'X' && g[i - 1][j] == 'X' && g[i + 1][j] == 'X' && g[i + 2][j] == 'X' ||
//		j > 1 && j < 8 && i > 1 && 
//		g[i][j - 2] == 'X' && g[i][j - 1] == 'X' && g[i][j + 1] == 'X' && g[i][j + 2] == 'X' ||
//
//		))
//}


bool win(int i, int j, int dir, int n, bool pt) {
	if (n == 5) return true;
	if (i < 0 || j < 0 || i > 9 || j > 9) return false;

	if (g[i][j] == 'O') return false;
	if (g[i][j] == '.' && pt) return false;
	if (g[i][j] == '.') pt = true;

	if (dir == 1) return win(i, j + 1, dir, n + 1, pt);
	if (dir == 2) return win(i + 1, j + 1, dir, n + 1, pt);
	if (dir == 3) return win(i + 1, j, dir, n + 1, pt);
	if (dir == 4) return win(i + 1, j - 1, dir, n + 1, pt);
	if (dir == 5) return win(i, j - 1, dir, n + 1, pt);
	if (dir == 6) return win(i - 1, j - 1, dir, n + 1, pt);
	if (dir == 7) return win(i - 1, j, dir, n + 1, pt);
	if (dir == 8) return win(i - 1, j + 1, dir, n + 1, pt);
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	for (int i = 0; i < 10; i++)
		cin >> g[i];

	bool w = false;
	for (int i = 0; i < 10 && !w; i++)
		for (int j = 0; j < 10; j++)
			for (int dir = 1; dir <= 8; dir++)
				if (win(i, j, dir, 0, false)) {
					w = true;
					break;
				}
	cout << (w ? "YES" : "NO") << endl;
	//cin.ignore(), cin.get();
}
