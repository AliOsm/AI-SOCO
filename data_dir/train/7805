#include <bits/stdc++.h>
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

#define pb push_back
#define mp make_pair
#define fir first
#define sec second
#define ll long long
#define ull unsigned long long

typedef tree<
        int,
        null_type,
        less<int>,
        rb_tree_tag,
        tree_order_statistics_node_update>
        ordered_set;

ll MOD=1e9+7;
ll mod=998244353;
int INF=1e9+7;

ll binpow (ll a, ll n) {
	if (n == 0)
		return 1;
	if (n % 2 == 1)
		return (binpow (a, n-1) * a) % MOD;
	else {
		int b = binpow (a, n/2)% MOD;
		return (b * b) % MOD;
	}
}

pair<int,ll> rev(pair<ll,int> x)
{
    return mp(x.sec,x.fir);
}

int lis(vector<int> &a)
{
    int n=a.size();
    vector<int> d(n+1,1e9+7);
    d[0]=0;
    for (int i=0;i<n;i++)
    {
        int j=(int)(upper_bound(d.begin(),d.end(),a[i])-d.begin());
        //if (d[j-1]<a[i]&&a[i]<d[j])
        {
            d[j]=a[i];
            //cout<<i;
        }
    }
    for (int i=n;i>=0;i--)
        if (d[i]<1e9+7) return i;
}

bool is_prime(int x)
{
    if (x==2) return 1;
    for (int i=2;i*i<=x;i++)
        if (x%i==0) return 0;
    return 1;
}

ll divider(ll a, ll b)
{
	ll x=mod-2;
	while(x)
	{
		if (x&1)
			a=(a*b)%mod;
		b=(b*b)%mod;
		x>>=1;
	}
	return a;
}

int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int n,q;
    cin>>n>>q;
    bool a[3][200005];
    for (int i=0;i<=2;i++)
        for (int j=0;j<=n;j++)
            a[i][j]=0;
    set<pair<int,int>> s;
    for (int i=0;i<q;i++)
    {
        int r,c;
        cin>>r>>c;
        if (r==1)
        {
            if (!a[r][c])
            {
                if (a[2][c-1]) s.insert(mp(c,c-1));
                if (a[2][c]) s.insert(mp(c,c));
                if (a[2][c+1]) s.insert(mp(c,c+1));
            }
            else
            {
                if (a[2][c-1]) s.erase(mp(c,c-1));
                if (a[2][c]) s.erase(mp(c,c));
                if (a[2][c+1]) s.erase(mp(c,c+1));
            }
        }
        else
        {
            if (!a[r][c])
            {
                if (a[1][c-1]) s.insert(mp(c-1,c));
                if (a[1][c]) s.insert(mp(c,c));
                if (a[1][c+1]) s.insert(mp(c+1,c));
            }
            else
            {
                if (a[1][c-1]) s.erase(mp(c-1,c));
                if (a[1][c]) s.erase(mp(c,c));
                if (a[1][c+1]) s.erase(mp(c+1,c));
            }
        }
        a[r][c]=!a[r][c];
        if (s.size()>0) cout<<"No"<<endl;
        else cout<<"Yes"<<endl;
    }
    return 0;
}
/*
0 0 0
0 0 1
0 1 0
1 0 0
*/
//6 19 3 4 4 2 6 7 8
//2 3 4 4 6 6 7 8 19


