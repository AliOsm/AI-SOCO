#include<bits/stdc++.h>
#define ll long long 
#define hell 1000000007 
#define F first
#define re 15000000
#define S second
#define pb push_back
#define all(a)  (a).begin(),(a).end()
#define rep(i,a,b) for(ll int i = a;i<b;i++)
#define pi 3.1415926536
#define Mod 998244353
//char a[2000][2000];
using namespace std;
//map<int,int> m;
/*void primeFactors(int n) 
{ 
    // Print the number of 2s that divide n 
    while (n%2 == 0) 
    { 
        m[2]++; 
        n = n/2; 
    } 
  
    // n must be odd at this point.  So we can skip  
    // one element (Note i = i +2) 
    for (int i = 3; i <= sqrt(n); i = i+2) 
    { 
        // While i divides n, print i and divide n 
        while (n%i == 0) 
        { 
            m[i]++; 
            n = n/i; 
        } 
    } 
  
    // This condition is to handle the case when n  
    // is a prime number greater than 2 
    if (n > 2) 
        m[n]++; 
} */
ll gcd(ll a,ll b)
{
    if (a%b==0)
        return b;
    else
        return gcd(b,a%b);
}

int sum (ll a)
{
    int sum =0;
    while(a>0)
    {
        sum = sum + (a%10);
        a=a/10;
    }
    return sum;
}
int count_digit(ll n)
{
   int  count =0;
    while(n>0)
    {
        n = n/10;
        count++;
        //count++;
    }
    return count;
}
int binarySearch(int x,int y ,ll z ,ll v[])
{
    int low = x;
    int high = y;
    int mid = x+(y-x)/2;
    while(low<=high)
    {
        if(v[mid]==z)
            return mid;
        if(v[mid]<z)
            return binarySearch(mid+1,high,z,v);
        if(v[mid]>z)
            return binarySearch(low,mid-1,z,v);
    }
    return -1;
}
ll modularExponentiation(ll x,ll n,ll M)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return modularExponentiation((x*x)%M,n/2,M);
    else                             //n is odd
        return (x*modularExponentiation((x*x)%M,(n-1)/2,M))%M;

} 
ll binaryExponentiation(ll x,ll n)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return binaryExponentiation(x*x,n/2);
    else                             //n is odd
        return x*binaryExponentiation(x*x,(n-1)/2);
}

int binary(int n)
{
    int c =0;
    while(n>0){
        if(n%2==1)
        {
            return pow(2,c);
        }
        n=n/2;
        c++;}
}
ll ceil1(ll x ,ll y)
{

    if(x%y==0)
        return x/y;
    else
        return x/y+1;
}
set<ll> s;
//vector<ll> v;
void genrate(ll n,int len,int max)
{
    if(len>max)
        return ;
    s.insert(n);
    genrate(n*10+1,len+1,max);
    genrate(n*10+0,len+1,max);
}
/*bool visited[100005];
vector<ll> v[100005];
bool recur[100005];
bool dfs(int x)
{
    if(recur[x])
        return true;
    if(visited[x])
        return false;
    recur[x] = true;
    visited[x]= true;
    for(int i =0;i<v[x].size();i++)
    {
        if(visited[v[x][i]]!=1 ,dfs(v[x][i]))
            return true;
            
        else if (recur[v[x][i]])
            return true;
    }
    recur[x] = false;
    return false;

}
vector<int> ans;
//memset(level,0,sizeof(level));
void topological_sort(int x)
{
    visited[x] = 1;
  //  sort(all(v[x]));
    for(int i =0;i<v[x].size();i++)
    {
        if(visited[v[x][i]]!=1){
            //level[v[x][i]] = level[x]+1;
            topological_sort(v[x][i]);
        }
    }
    ans.pb(x);
}*/
//ll combb[1001][1001];
bool visited[300005];
vector<int>v[300005];
int dfs(int x,vector<pair<ll,ll>> &ans,int a[])
{
   visited[x] = 1;
   ll r=0,b=0;
   for(int i = 0;i<v[x].size();i++)
    {
        if(visited[v[x][i]]!=0)
            continue;
        else
        {
            dfs(v[x][i],ans,a);
            r = r + ans[v[x][i]].F;
            b = b + ans[v[x][i]].S;
        }

    }
    if(a[x] == 1){
        ans[x].F = r+1;
        ans[x].S = b;
        return 1;
    }
    else if(a[x] == 2){
        ans[x].F = r;
        ans[x].S = b+1;
        return 2;
    }
    else if(a[x] == 0)
    {
        ans[x].F = r;
        ans[x].S = b;
        return 0;
    }
    
}
int main()
{   
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int tests=1;
      //freopen("input.txt", "r", stdin);
    // cin>>tests;
     // freopen("output.txt", "w", stdout);
   while(tests--)
    {
        int n;
        cin>>n;
        int a[n+1];
        a[0] = 0;
        int r = 0;
        int b = 0;
        rep(i,1,n+1){
         cin>>a[i];
         if(a[i] == 2)
            b++;
        else if(a[i]==1)
            r++;
        }
        //vector<int> v[n+1];
        for(int i = 1;i<=n-1;i++)
        {
            int x,y;
            cin>>x>>y;
            v[x].pb(y);
            v[y].pb(x);
        }
        memset(visited,0,sizeof(visited));
        vector<pair<ll,ll> > ans(n+1);
        ans[0] = {0,0};
        for(int i = 1;i<=n;i++)
            ans[i] =  {0,0};
        int x;
        for(int i = 1;i<=n;i++)
        {   
            if(v[i].size()==1){
                x = i;
                break;
            }
        }
        dfs(x,ans,a);
        bool vis[n+1];
        memset(vis,0,sizeof(vis));
      //  int c = 0;
       // for(int i = 1;i<=n;i++)
          //  cout<<ans[i].F<<" "<<ans[i].S<<endl;;
        stack<int> s;
        s.push(x);
        int c = 0;
        while(!s.empty())
        {
            int X = s.top();
            s.pop();
            for(int i = 0;i<v[X].size();i++)
                if(vis[v[X][i]]!=1)
                {
                    vis[v[X][i]] = 1;
                    s.push(v[X][i]);
                    if(ans[v[X][i]].F==0 || ans[v[X][i]].S ==0)
                    {
                        if(r-ans[v[X][i]].F==0 || b-ans[v[X][i]].S==0)
                            c++;
                    }
                    
                }
                else
                    continue;
        }
        cout<<c; 

    }       
}


       




    


