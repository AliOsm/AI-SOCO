//#include<iostream>
//#include<algorithm>
//#include<map>
//#include<bitset>
//#include<set>
//#include<vector>
//#include<queue>
//#include<deque>
//#include<stack>
//#include<string>
//#include<string.h>
//#include<cstring>
//#include<sstream>
//#include<bitset>
//#include<locale>
//#include<cmath>
//#include<iomanip>
//#include<math.h>
//#include<bitset>
//using namespace std;
//#define ll  long long int
//#define ld long double
//#define PI 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844
//int GCD(int x, int y) { return !y ? x : GCD(y, x % y); }
//int LCM(int x, int y){ return x*y / GCD(x, y); }
//ll ceilDivision(ll dividend, ll divisor){ return (dividend + divisor - 1) / divisor; }
//#define Size 1000000000
//bitset<Size>prime;
//vector<ll>Primes;
//void Sieve()
//{
//  prime[0] = prime[1] = true;
//  for (ll i = 4; i < Size; i += 2)
//      prime[i] = true;
//  for (int i = 3; i*i <= Size; i += 2)
//      if (!prime[i])
//          for (ll j = i*i; j < Size; j += i)
//              prime[j] = true;
//}
//void GetPrimes()
//{
//  for (int i = 0; i < prime.size(); i++)
//      if (!prime[i])
//          Primes.push_back(i);
//}
//bool Check(pair<int, string> left, pair<int, string> right)
//{
//  return ((left.first > right.first) || (left.first == right.first && left.second < right.second));
//}
//bool IsTriangle(ll a, ll b,ll c)
//{
//  return (a + c > b && a + b > c && c + b > a);
//}
//void Date(string X, int&D, int&M, int&Y)
//{
//  Y = X[0] * 1000 + X[1] * 100 + X[2] + 10 + X[3];
//  M = X[5] * 10 + X[6];
//  D = X[8] * 10 + X[9];
//}
//int main()
//{
//  string A, B;
//  int Y1=0, M1=0, D1=0, Y2=0, M2=0, D2=0;
//  map<int, int>Month;
//  ll Days=0,Leap=0;
//  Month[0]=Month[1] = Month[3] = Month[5] = Month[7] = Month[9] = Month[10] = Month[12] = 31;
//  Month[4] = Month[6] = Month[8] = Month[11] = 30;
//  Month[2] = 29;
//  cin >> A >> B;
//  Date(A, D1, M1, Y1);
//  Date(B, D2, M2, Y2);
//  if (Y2 > Y1 || Y2 == Y1 &&M2 > M1 || Y2 == Y1 &&M2 == M1 && D2 > D1)
//      swap(Y1, Y2), swap(M1, M2), swap(D1, D2);
//  while (true)
//  {
//      if ((Y1-1 == Y2 && M2%12 == (M1 - 1)%12) || (Y1 == Y2 && M2%12 == (M1 - 1)%12))
//      {
//          if (D2 <= D1)
//              Days += Month[M2 % 12],Days += D1 - D2;
//          else
//              Days += Month[M2 % 12], Days -= D2 - D1;
//          break;
//      }
//      Days += Month[M2 % 12];
//      M2++;
//      if (M2 % 13 == 0)
//      {
//          if ((Y2 % 4 == 0 && Y2 % 100 != 0) || (Y2 % 400 == 0))
//              Leap++;
//              Y2++;
//          if ((Y2 % 4 == 0 && Y2 % 100 != 0) || (Y2 % 400 == 0))
//                  Leap++;
//      }
//  }
//  cout << Days - Leap << endl;
//  return 0;
//}

#include <iostream>
#include<algorithm>
#include<map>
#include<bitset>
#include<set>
#include<vector>
#include<queue>
#include<deque>
#include<stack>
#include<string>
#include<string.h>
#include<cstring>
#include<iomanip>
#include<stdio.h>
#include<sstream>
#include<bitset>
#include<locale>
#include<cmath>
#include<iomanip>
#include<math.h>
#include<bitset>
using namespace std;
#define ll  long long
#define ld long double
#define PI 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844
int GCD(int x, int y) { return !y ? x : GCD(y, x % y); }
int LCM(int x, int y){ return x*y / GCD(x, y); }
ll ceilDivision(ll dividend, ll divisor){ return (dividend + divisor - 1) / divisor; }
int main()
{
    int n, m, k, x, y,operation[100000][3];
    ll *arr,*OperationFrequency,*Answer;
    cin >> n >> m >> k;
    arr = new ll[n];
    Answer = new ll[n];
    OperationFrequency = new ll[m];
    memset(OperationFrequency, 0, sizeof(ll)*m);
    memset(Answer, 0, sizeof(ll)*n);

    for (int i = 0; i < n; i++)
        cin >> arr[i];

    for (int i = 0; i < m; i++)
        cin >> operation[i][0]>>operation[i][1]>>operation[i][2];

    while (k--)
    {
        cin >> x >> y;
        OperationFrequency[x - 1]++;
        if (y!=m)
        OperationFrequency[y]--;
    }

    for (int i = 1; i < m; i++)
        OperationFrequency[i] += OperationFrequency[i - 1];

    for (int i = 0; i < m; i++)
    {
        Answer[operation[i][0]-1] += (operation[i][2] * OperationFrequency[i]);
        if (operation[i][1]!=n)
            Answer[operation[i][1]] -= (operation[i][2] * OperationFrequency[i]);
    }

    for (int i = 1; i < n; i++)
        Answer[i] += Answer[i - 1];

    for (int i = 0; i < n; i++)
        cout<<Answer[i] + arr[i] << " ";
    cout << endl;
    return 0;
}
