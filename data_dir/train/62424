#include <bits/stdc++.h>
using namespace std;

const int MAX = 1e6 + 5;
const int MOD = 1e9 + 7;
int n, pw[22], dp[MAX][22][2];

int get_g(int e2, int e3) {
	int g_ = pw[e2];

	if(e3 > 0)
		g_ *= 3;

	return g_;
}

int F(int i, int e2, int e3) {
	if(i == n + 1) {
		// printf("e2 = %d, e3 = %d\n", e2, e3);
		// return 1;
		return e2 == 0 && e3 == 0;
	}

	int &ans = dp[i][e2][e3];

	if(ans != -1)
		return ans;

	ans = 0;

	int g_ = get_g(e2, e3);

	for(int x = 0; x < 2; x++) {
		for(int y = 0; y < 2; y++) {
			if(e2 - x < 0 || e3 - y < 0)
				continue;

			if(x + y < 2) {
				int g = get_g(e2 - x, e3 - y);
				int value = (n / g) - (n / g_);

				if(g == g_)
					value = (n / g) - (i - 1);

				value = max(0, value);

				// printf("i = %d, g_ = %d, g = %d, value = %d\n", i, g_, g, value);

				int v = 1LL * value * F(i + 1, e2 - x, e3 - y) % MOD;
				ans = (ans + v) % MOD;
			}
		}
	}

	return ans;
}

int main() {
	scanf("%d", &n);

	memset(dp, -1, sizeof(dp));

	pw[0] = 1;
	for(int i = 1; i <= 20; i++)
		pw[i] = pw[i - 1] * 2;

	int k = log2(n);
	int ans = F(2, k, 0);

	if(3 * (1 << (k - 1)) <= n)
		ans = (ans + F(2, k - 1, 1)) % MOD;

	printf("%d\n", ans);
	return 0;
}