#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int , int> pii;

const int N = 2e5+10 , mod = 1e9+7;

ll seg[4 * N];
int mx[4 * N];

void add(int s , int e , int ind , int l , int r , int val){
   if(s >= r || e <= l)
      return;
   if(s >= l && e <= r){
      seg[ind] = val;
      mx[ind] = val;
      return;
   }
   int mid = (s + e) / 2;
   add(s , mid , 2 * ind , l , r , val);
   add(mid , e , 2 * ind + 1 , l , r , val);
   seg[ind] = seg[2 * ind] + seg[2 * ind + 1];
   mx[ind] = max(mx[2 * ind] , mx[2 * ind + 1]);
}

void modify(int s , int e , int ind , int l , int r , int val){
   if(s >= r || e <= l || mx[ind] < val)
      return;
   if(s >= l && e <= r && e - s == 1){
      seg[ind] %= val;
      mx[ind] = seg[ind];
      return;
   }
   int mid = (s + e) / 2;
   modify(s , mid , 2 * ind , l , r , val);
   modify(mid , e , 2 * ind + 1 , l , r , val);
   seg[ind] = seg[2 * ind] + seg[2 * ind + 1];
   mx[ind] = max(mx[2 * ind] , mx[2 * ind + 1]);
}

ll get(int s , int e , int ind , int l , int r){
   if(s >= r || e <= l)
      return 0;
   if(s >= l && e <= r){
      return seg[ind];
   }
   int mid = (s + e) / 2;
   return get(s , mid , 2 * ind , l , r) + get(mid , e , 2 * ind + 1 , l , r);
}

int32_t main(){
   ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
   int n , m;
   cin >> n >> m;
   for(int i = 0 ; i < n ; i++){
      int x;
      cin >> x;
      add(0 , n , 1 , i , i + 1 , x);
   }
   while(m--){
      int type;
      cin >> type;
      if(type == 1){
         int l , r;
         cin >> l >> r;
         l--;
         cout << get(0 , n , 1 , l , r) << "\n";
      }
      else if(type == 2){
         int l , r , x;
         cin >> l >> r >> x;
         l--;
         modify(0 , n , 1 , l , r , x);
      }
      else{
         int l , x;
         cin >> l >> x;
         l--;
         add(0 , n , 1 , l , l + 1 , x);
      }
   }
   return 0;
}
