/**
 * @author khokharnikunj8
 */

#include <bits/stdc++.h>


#ifndef JCOMPE_SPARSETABLE_HPP
#define JCOMPE_SPARSETABLE_HPP

template<typename T, class F = std::function<T(const T &, const T &)>>
class SparseTable {
public:
    int n;
    std::vector<std::vector<T>> mat;
    F func;

    SparseTable(const std::vector<T> &a, const F &f) : func(f) {
        n = static_cast<int>(a.size());
        int max_log = 32 - __builtin_clz(n);
        mat.resize(max_log);
        mat[0] = a;
        for (int j = 1; j < max_log; j++) {
            mat[j].resize(n - (1 << j) + 1);
            for (int i = 0; i <= n - (1 << j); i++) {
                mat[j][i] = func(mat[j - 1][i], mat[j - 1][i + (1 << (j - 1))]);
            }
        }
    }

    T get(int from, int to) const {
        assert(0 <= from && from <= to && to <= n - 1);
        int lg = 32 - __builtin_clz(to - from + 1) - 1;
        return func(mat[lg][from], mat[lg][to - (1 << lg) + 1]);
    }
};

#endif //JCOMPE_SPARSETABLE_HPP


using namespace std;

class DNewYearAndConference {
public:
    bool findIt(vector<pair<pair<int, int>, pair<int, int>>> &ar, int n) {
        sort(ar.begin(), ar.end());
        vector<int> st(n);
        vector<int> ed(n);
        for (int i = 0; i < n; i++) st[i] = ar[i].second.first;
        for (int i = 0; i < n; i++) ed[i] = ar[i].second.second;
        SparseTable<int> sparseTable1(st, [&](int a, int b) { return max(a, b); });
        SparseTable<int> sparseTable2(ed, [&](int a, int b) { return min(a, b); });
        bool flag = true;
        for (int i = 0; i < n; i++) {
            int low = i;
            int high = n - 1;
            int index = -1;
            while (low <= high) {
                int mid = (low + high) >> 1;
                if (ar[i].first.second >= ar[mid].first.first) {
                    index = mid;
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
            assert(index != -1);
            if (index == i) continue;
            if (sparseTable1.get(i + 1, index) > ar[i].second.second ||
                sparseTable2.get(i + 1, index) < ar[i].second.first)
                flag = false;
        }
        return flag;
    }

    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vector<pair<pair<int, int>, pair<int, int>>> ar(n);
        for (int i = 0; i < n; i++)
            in >> ar[i].first.first >> ar[i].first.second >> ar[i].second.first >> ar[i].second.second;
        bool flag = true;
        flag &= findIt(ar, n);
        for (int i = 0; i < n; i++) {
            pair<int, int> f = ar[i].first;
            ar[i].first = ar[i].second;
            ar[i].second = f;
        }
        flag &= findIt(ar, n);
        if (flag) out << "YES" << endl;
        else out << "NO" << endl;
    }
};


int main() {
	DNewYearAndConference solver;
	std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
