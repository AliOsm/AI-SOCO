#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     std::begin(_obj), std::end(_obj)
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
    #define debug(_x)                 std::cerr << (#_x) << " = " << (_x) << '\n' << std::flush;
#else
    #define debug(_x)                 ;
#endif
#define endl "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = int64_t;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
string s;

int IsPalindrom(int l, int r) {
    int n = (r - l) >> 1;
    for (int i = 0; i < n; ++i) {
        if (s[l + i] != s[r - i - 1]) {
            return 0;
        }
    }
    r = l + n;
    for (int i = 0; i < n; ++i) {
        if (s[l + i] != s[r + i]) {
            return 2;
        }
    }
    return 1;
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    cin >> s;
    int n = sz(s);
    int k = count(all(s), s[0]);
    if ((n & 1) == 0 && k == n || (n & 1) && k >= n - 1) {
        RET("Impossible");
    }
    if (n & 1) {
        RET(2);
    }
    for (int i = 2; i <= n; i += 2) {
        if (IsPalindrom(0, i) + IsPalindrom(i, n) > 2) {
            RET(1);
        }
    }
    cout << 2 << endl;

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}