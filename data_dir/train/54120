#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

const long long MAX = 5100000;
const long long INF = 1LL << 60;
//const long long mod = 1000000007LL;
const long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;


struct mint {
	ll x; // typedef long long ll;
	mint(ll x = 0) :x((x% mod + mod) % mod) {}
	mint& operator+=(const mint a) {
		if ((x += a.x) >= mod) x -= mod;
		return *this;
	}
	mint& operator-=(const mint a) {
		if ((x += mod - a.x) >= mod) x -= mod;
		return *this;
	}
	mint& operator*=(const mint a) {
		(x *= a.x) %= mod;
		return *this;
	}
	mint operator+(const mint a) const {
		mint res(*this);
		return res += a;
	}
	mint operator-(const mint a) const {
		mint res(*this);
		return res -= a;
	}
	mint operator*(const mint a) const {
		mint res(*this);
		return res *= a;
	}
	mint pow(ll t) const {
		if (!t) return 1;
		mint a = pow(t >> 1);
		a *= a;
		if (t & 1) a *= *this;
		return a;
	}

	// for prime mod
	mint inv() const {
		return pow(mod - 2);
	}
	mint& operator/=(const mint a) {
		return (*this) *= a.inv();
	}
	mint operator/(const mint a) const {
		mint res(*this);
		return res /= a;
	}
};

template<typename T>
vector<pair<T, ll>> RLE(vector<T>& s) {
	ll cnt = 0;
	vector<pair<T, ll>> res;
	for (ll i = 0; i < s.size(); i++) {
		cnt++;
		if (i == (ll)s.size() - 1) {
			res.push_back(make_pair(s[i], cnt));
			break;
		}
		if (s[i] != s[i + 1]) {
			res.push_back(make_pair(s[i], cnt));
			cnt = 0;
		}
	}
	return res;
}
int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/

	ll n; scanf("%lld", &n);
	vector<pair<ll, ll>> vp1(n); for (ll i = 0; i < n; i++) scanf("%lld %lld", &vp1[i].first, &vp1[i].second);
	vector<pair<ll, ll>> vp2(n); for (ll i = 0; i < n; i++) vp2[i].first = vp1[i].second, vp2[i].second = vp1[i].first;
	sort(vp1.begin(), vp1.end());
	sort(vp2.begin(), vp2.end());
	vector<mint> f(n + 1);
	f[0] = 1;
	f[1] = 1;

	for (int i = 2; i <= n; i++) f[i] = f[i - 1] * i;
	mint res = f[n];
	{
		vector<ll> a(n);
		for (ll i = 0; i < n; i++) a[i] = vp1[i].first;
		auto vp = RLE<ll>(a);
		mint tmp = 1;
		for (auto p : vp) {
			tmp *= f[p.second];
		}
		res -= tmp;
	}
	{
		vector<ll> a(n);
		for (ll i = 0; i < n; i++) a[i] = vp2[i].first;
		auto vp = RLE<ll>(a);
		mint tmp = 1;
		for (auto p : vp) {
			tmp *= f[p.second];
		}
		res -= tmp;
	}
	{
		bool flag = true;
		for (int i = 0; i < n - 1; i++) {
			if (vp1[i].second > vp1[i + 1].second) flag = false;
		}
		if (flag) {
			auto vp = RLE<pair<ll, ll>>(vp1);
			mint tmp = 1;
			for (auto p : vp) {
				tmp *= f[p.second];
			}
			res += tmp;
		}
	}
	cout << res.x << endl;
	return 0;
}
