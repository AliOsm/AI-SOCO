/*"Everything in the universe is balanced. Every disappointment
   you face in life will be balanced by something good for you!
                Keep going, never give up."            */

#include "bits/stdc++.h"
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
ordered_set<int>  os;
#define up_bound(i) os.order_of_key(i) << endl; // the number of elements in the os less than i
#define access_idx(i) *os.find_by_order(i) // print the i-th smallest number in os(0-based)

#define ll long long int
#define ld double 
#define rep(i,a,b) for(int i=a; i<=b; ++i)
#define repd(i,a,b) for(int i=a; i>=b; --i)
#define deb cerr << "Line no." << __LINE__
#define nl '\n'
#define pb push_back
#define all(a) a.begin(),a.end()
#define P pair<ll,ll> 
#define F first
#define S second
const ll p_mod=9999999999999983;
const long double pi = 3.14159265358979323;
const ll N=1e6+9;
const ll mod=1e9+7;
typedef double f80;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){uniform_int_distribution<int> uid(l, r); return uid(rng); }
ll powerk(ll x, ll y);
ll mul(ll x, ll y);
ll add(ll x, ll y);
ll sub(ll x, ll y);

ll a[3][N],ans[3][N];

void solve()
{    
  ll n,m;
  cin>>n>>m;
  set<pair<P,P>> st;
  rep(i,1,n)a[1][i]=a[2][i]=ans[1][i]=ans[2][i]=1;
  ll flag=1;
  rep(i,1,m)
  {
    ll l,r;
    cin>>l>>r;
    a[l][r] = (a[l][r]+1)%2;

    if(a[l][r]==0)
    { if(l==1)
      {
        if(r<n && a[2][r+1]==0)st.insert({{l,r},{2,r+1}}),st.insert({{2,r+1},{l,r}});
        if(r>1 && a[2][r-1]==0)st.insert({{l,r},{2,r-1}}),st.insert({{2,r-1},{l,r}});
        if(a[2][r]==0)st.insert({{l,r},{2,r}}),st.insert({{2,r},{l,r}});
      }

      if(l==2)
      {
        if(r<n && a[1][r+1]==0)st.insert({{l,r},{1,r+1}}),st.insert({{1,r+1},{l,r}});
        if(r>1 && a[1][r-1]==0)st.insert({{l,r},{1,r-1}}),st.insert({{1,r-1},{l,r}});
        if(a[1][r]==0)st.insert({{l,r},{1,r}}),st.insert({{1,r},{l,r}});
      }
    }
    else
    {
      if(l==1)
      {
        if(r<n && a[2][r+1]==0)st.erase({{l,r},{2,r+1}}),st.erase({{2,r+1},{l,r}});
        if(r>1 && a[2][r-1]==0)st.erase({{l,r},{2,r-1}}),st.erase({{2,r-1},{l,r}});
        if(a[2][r]==0)st.erase({{l,r},{2,r}}),st.erase({{2,r},{l,r}});
      }

      if(l==2)
      {
        if(r<n && a[1][r+1]==0)st.erase({{l,r},{1,r+1}}),st.erase({{1,r+1},{l,r}});
        if(r>1 && a[1][r-1]==0)st.erase({{l,r},{1,r-1}}),st.erase({{1,r-1},{l,r}});
        if(a[1][r]==0)st.erase({{l,r},{1,r}}),st.erase({{1,r},{l,r}});
      }
    }
    //for(auto it: st)cout<<it.F<<".."<<it.S<<" ";cout<<nl;
    if(st.size()==0)cout<<"Yes"<<nl;
    else cout<<"No"<<nl;

  }/*
  if(!a[1][1]){ans[1][1]=1;
    if(!a[2][1])ans[2][1]=1;
  }

  rep(i,1,n-1)
  {
    if(ans[1][i]&&!a[1][i+1])
    {
      ans[1][i+1]=1;
    }
    if(ans[2][i] && !a[2][i+1])ans[2][i+1]=1;
    
    if(ans[1][i+1] && !a[2][i+1])ans[2][i+1]=1;
    if(ans[2][i+1] && !a[1][i+1])ans[1][i+1]=1;
  
  }
  if(ans[2][n])cout<<"Yes"<<nl;
  else cout<<"No"<<nl;

  rep(i,1,n)a[1][i]=a[2][i]=ans[1][i]=ans[2][i]=0;
*/
}


int main() {
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    ll t=1;
    //pre();
    //cin>>t;
    while(t--)
    {
      solve();
    }  
}
ll mul(ll x, ll y){return (x*y)%mod;}
ll add(ll x, ll y){return (x+y)%mod;}
ll sub(ll x, ll y){return (x-y+mod)%mod;}
ll powerk(ll x, ll y)
{
  if(y==0)return 1;
  if(y==1)return x%mod;
  if(y&1)
    return ((powerk((x*x)%mod, y/2)%mod)*x)%mod;
  else return powerk((x*x)%mod,y/2)%mod;
}

// Xorawar