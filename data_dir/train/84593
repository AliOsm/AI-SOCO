#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = (1 << 12) + 7;

int n, m, q, T[N], cnt[N];
bool memo[N];
int res[N][123];

int change(string s)
{
    int l = 0;
    for (int j = 0; j < n; j++)
    {
        l += (1 << j) * (s[j] - '0');
    }
    return l;
}

bool was[N];
int memo2[N];

int count(int x, int y)
{
    int z = (x ^ y);
    if(was[z]) return memo2[z];
    int ans = 0;
    for(int i = 0; i < n; i++)
    {
        if(!((z >> i) & 1))
        {
            ans += T[i];
        }
    }
    was[z] = true;
    return memo2[z] = ans;
}

void solve(int l)
{
    memo[l] = true;
    for(int i = 0; i < (1 << n); i++)
    {
        if(cnt[i] == 0) continue;
        int x = count(l, i);
        if(x <= 100)
        {
            res[l][x] += cnt[i];
        }
    }
    for(int i = 1; i <= 100; i++)
        res[l][i] += res[l][i - 1];
}

int main()
{
    _upgrade
    cin >> n >> m >> q;
    for(int i = 0; i < n; i++)
        cin >> T[i];
    for(int i = 0; i < m; i++)
    {
        string s; cin >> s;
        cnt[change(s)]++;
    }
    while(q--)
    {
        string s; cin >> s;
        int x; cin >> x;
        int l = change(s);
        if(!memo[l])
            solve(l);
        cout << res[l][x] << "\n";
    }
	return 0;
}
