#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); }
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

struct Z
{
    int a;
    LL w;
    int operator < (const Z &a) const { return w > a.w; };
};

vector <vector <Z>> g0;
vector <vector <Z>> g1;

const LL INF = 1e18;

void dijkstra(int x, vector <LL> &d, const vector <vector <Z>> &g)
{
    d.assign(g.size(), INF);
    d[x] = 0;
    priority_queue <Z> pq;
    pq.push({x, 0});
    while (pq.size()) {
        Z t = pq.top();
        pq.pop();
        if (t.w != d[t.a]) {
            continue;
        }
        for (auto i: g[t.a]) {
            if (d[t.a] + i.w < d[i.a]) {
                d[i.a] = d[t.a] + i.w;
                pq.push({i.a, d[i.a]});
            }
        }
    }
}

auto dijkstra2(int s, int t, int l, const vector <vector <LL>> d, const vector <vector <Z>> &g)
{
    vector <LL> dist(g.size(), INF);
    dist.assign(g.size(), INF);
    dist[s] = 0;
    priority_queue <Z> pq;
    pq.push({s, 0});
    map <PII, int> ans;
    FOR (i, 0, g.size()) {
        for (auto j: g[i]) {
            ans[minmax(i, j.a)] = j.w;
        }
    }
    //DEBA(d[1]);
    while (pq.size()) {
        Z t = pq.top();
        pq.pop();
        if (t.w != dist[t.a]) {
            continue;
        }
        for (auto i: g[t.a]) {
            LL weigth = i.w;
            if (i.w == 1'500'000'000) {
                weigth = max(1LL, min(l - (d[1][i.a] + dist[t.a]), i.w));
            }
            if (dist[t.a] + weigth < dist[i.a]) {
                dist[i.a] = dist[t.a] + weigth;
                pq.push({i.a, dist[i.a]});
                ans[minmax(i.a, t.a)] = weigth;
            }
        }
    }
    if (dist[t] != l) {
        cout << "NO";
        exit(0);
    }
    return ans;
}

int main()
{
    int n, m, l, s, t;
    cin >> n >> m >> l >> s >> t;
    g0.resize(n);
    g1.resize(n);
    map <PII, int> len;
    FOR (i, 0, m) {
        int x, y, z;
        cin >> x >> y >> z;
        g0[x].push_back({y, (z == 0 ? 1'500'000'000 : z)});
        g0[y].push_back({x, (z == 0 ? 1'500'000'000 : z)});
    }
    vector <vector <LL>> d(2);
    dijkstra(s, d[0], g0);
    dijkstra(t, d[1], g0);
    auto ans = dijkstra2(s, t, l, d, g0);
    cout << "YES" << endl;
    for (auto i: ans) {
        cout << i.X.X << " " << i.X.Y << " " << i.Y << endl;
    }
    return 0;
}

