#include <bits/stdc++.h>
#define ll long long

using namespace std;

#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "

vector <ll> D;  /// Divisors of a

ll GCD(ll x,ll y){
    return y ? GCD(y,x%y) : x;
}

void max_self(ll& x,ll y){
    x = max(x,y);
}

ll f(ll a,ll b)
{
    if(!b)  return 0;

    /// b = b2*g
    /// new b = b - g
    ///       = b2*g - g
    ///       = (b2-1)*g

    ll g = GCD(a,b);
    ll b2 = b / g;

    ll b3 = 0;

    for(ll x : D)
    {
        ll b4 = x * (b2/x);
        ll b5 = b4 * g;

        if(GCD(a,b5) > g)   max_self(b3,b4);
    }

    return b2 - b3 + f(a,b3*g);
}

int main()
{
    ll a,b; cin >> a >> b;

    for(ll y = 1; y*y <= a; y++)
        if(a%y == 0)
        {
            D.push_back(y);
            if(y*y != a)    D.push_back(a/y);
        }

    sort(D.begin(),D.end());

    cout << f(a,b);
}
