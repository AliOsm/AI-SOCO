#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>

class nd
{
public:
	nd* child[2];
	nd()
	{
		child[0] = child[1] = NULL;
	}
};

class tree
{
public:
	nd* head;
	tree()
	{
		head = NULL;
		insert(0);
	} 
	void insert(int n)
	{
		//printf("n = %d\n", n);
		int n_aux = 0;
		REP(i, 30)
		{
			n_aux *= 2;
			n_aux += n%2;
			n /= 2;
		}
		insert_aux(head, n_aux, 1);
	}
	void insert_aux(nd* &node, int n, int lev)
	{
		//printf("n mod 2 = %d\n", n%2);
		/*if(head == NULL) printf("head null\n");
		printf("n = %d, lev = %d\n", n, lev);*/
		if(node == NULL) node = new nd();
		if(lev == 31) return;
		else
		{
			insert_aux(node->child[n%2], n/2, lev + 1);
			//printf("lev = %d, zero = %d, one = %d, our = %d\n", lev, node->child[0] == NULL ? 0 : 1, node->child[1] == NULL ? 0 : 1, node->child[n%2] == NULL ? 0 : 1);
		}
	}
	void erase(int n)
	{
		int n_aux = 0;
		REP(i, 30)
		{
			n_aux *= 2;
			n_aux += n%2;
			n /= 2;
		}
		erase_aux(head, n_aux, 1);
	}
	bool erase_aux(nd* &node, int n, int lev)
	{
		if(lev == 31) return true;
		bool b = erase_aux(node->child[n%2], n/2, lev + 1);
		bool p = b && (node->child[(n + 1)%2] == NULL);
		if(b) node->child[n%2] = NULL;
		return p;
	}
	int max(int n)
	{
		int n_aux = 0;
		REP(i, 30)
		{
			n_aux *= 2;
			n_aux += n%2;
			n /= 2;
		}
		int sol = 0;
		max_aux(head, n_aux, sol);
		return sol; 
	}
	void max_aux(nd* &node, int guide, int &sol)
	{
		
		if(node->child[0] == NULL && node->child[1] == NULL) return;
		else
		{
			sol *= 2;
			//printf("zero = %d, one = %d\n", node->child[0] == NULL ? 0 : 1, node->child[1] == NULL ? 0 : 1);
			if(node->child[0] == NULL)
			{
				//printf("1");
				if(guide%2 == 0) sol += 1;
				max_aux(node->child[1], guide/2, sol);
			}
			else if(node->child[1] == NULL)
			{
				//printf("0");
				if(guide%2 == 1) sol += 1;
				max_aux(node->child[0], guide/2, sol);
			}
			else
			{
				//printf("%d", (guide + 1)%2);
				sol += 1;
				max_aux(node->child[(guide + 1)%2], guide/2, sol);
			}
		}
	}
	void print()
	{
		print_aux(head);
	}
	void print_aux(nd *node)
	{
		
	}
};


map<int, int> m_map;
int main()
{
	tree t;
	int q;
	scanf("%d", &q);
	REP(i, q)
	{
		char c;
		int x;
		scanf(" %c %d", &c, &x);
		if(c == '+')
		{
			if(m_map[x] == 0) t.insert(x);
			m_map[x]++;
		}
		else if(c == '-')
		{
			if(m_map[x] == 1) t.erase(x);
			m_map[x]--;
		}
		else if(c == '?')
		{
			printf("%d\n", t.max(x));
		}
	}	
}
