#include <bits/stdc++.h>
#define fst first
#define snd second
#define fore(i,a,b) for(int i=a,ThxDem=b;i<ThxDem;++i)
#define pb push_back
#define ALL(s) s.begin(),s.end()
#define FIN ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define SZ(n) ((int)(n).size())
using namespace std;
typedef long long ll;
typedef pair<int,int> ii;

ll k, MOD = 998244353, ten[20], dp[1<<11][20][2], w[1<<11][20][2];
string s;

ll ways(int mask, int pos, bool big){
  if(__builtin_popcount(mask) > k) return 0;
  if(pos == s.size()) return 1;
  ll &r = w[mask][pos][big];
  if(r >= 0) return r;
  r = 0;
  fore(i,0,(big) ? 10 : s[pos]-'0'+1){
    int nxt = (mask||i) ? (mask|(1<<i)) : 0;
    r += ways(nxt, pos+1, big || (i < s[pos]-'0'));
    if(r >= MOD) r -= MOD;
  }
  return r;
}

ll solve(int mask, int pos,bool big){
  if(__builtin_popcount(mask) > k || pos == SZ(s)) return 0;
  ll &r = dp[mask][pos][big];
  if(r >= 0) return r;
  r = 0;
  fore(i,0,(big) ? 10 : s[pos]-'0'+1){
    int nxt = (mask||i) ? (mask|(1<<i)) : 0;
    r += ((i*ten[SZ(s)-pos-1])%MOD*ways(nxt,pos+1, big || (i < s[pos]-'0')))%MOD;
    if(r >= MOD) r -= MOD;
    r += solve(nxt, pos+1, big || (i < s[pos]-'0'));
    if(r >= MOD) r -= MOD;
  }
  return r;
}


ll get(ll x){
  s = to_string(x);
  memset(dp,-1,sizeof(dp));
  memset(w,-1,sizeof(w));
  return solve(0,0,0);
}

int main(){FIN;
  ll l, r;
  cin >> l >> r >> k;
  ten[0] = 1;
  fore(i,1,20) ten[i] = (ten[i-1]*10)%MOD;
  cout << (get(r) - get(l-1) + MOD)%MOD << endl;
}