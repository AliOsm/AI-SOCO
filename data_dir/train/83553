#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

const long long MAX = 5100000;
const long long INF = 1LL << 60;
const long long MOD = 1'000'000'007LL;
const long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;


int main()
{

	cin.tie(nullptr);
	ios::sync_with_stdio(false);

	ll t; cin >> t;
	while (t--) {
		ll n; cin >> n;
		queue<ll> tq[4];
		vector<bool> bad(n + 1, false);
		map<string, int> mp;
		for (ll i = 0; i < n; i++) {
			string s; cin >> s;
			if (s[0] == '0' && s.back() == '0') tq[0].push(i + 1);
			else if (s[0] == '0' && s.back() == '1') {
				tq[1].push(i + 1);
				mp[s] = i + 1;
				reverse(s.begin(), s.end());
				if (mp.find(s) != mp.end()) {
					bad[i + 1] = true;
					bad[mp[s]] = true;
				}
			}
			else if (s[0] == '1' && s.back() == '0') {
				tq[2].push(i + 1);
				mp[s] = i + 1;
				reverse(s.begin(), s.end());
				if (mp.find(s) != mp.end()) {
					bad[i + 1] = true;
					bad[mp[s]] = true;
				}
			}
			else tq[3].push(i + 1);
		}

		deque<ll> dq[4];
		for (ll i = 0; i < 4; i++) {
			while (!tq[i].empty()) {
				ll t = tq[i].front();
				tq[i].pop();
				if (bad[t]) dq[i].push_back(t);
				else dq[i].push_front(t);
			}
		}
		ll cnt = INF;
		vector<ll> ans;
		for (ll i = 0; i < 4; i++) {
			deque<ll> q[4]; for (ll j = 0; j < 4; j++) q[j] = dq[j];
			if (q[i].empty()) continue;
			q[i].pop_back();
			ll back;
			if (i == 0 || i == 2) back = 0;
			else back = 1;
			vector<ll> res;
			ll rest = n - 1;
			while (rest > 0) {
				if (back == 0) {
					while (!q[0].empty()) {
						q[0].pop_back();
					}
					if (!q[1].empty()) {
						back = 1;
						q[1].pop_back();
					}
					else {
						if (q[2].empty()) {
							break;
						}
						ll t = q[2].front();
						if (bad[t]) break;

						res.push_back(t);
						q[2].pop_front();
						back = 1;
					}
				}
				else {
					while (!q[3].empty()) {
						q[3].pop_back();
					}
					if (!q[2].empty()) {
						back = 0;
						q[2].pop_back();
					}
					else {
						if (q[1].empty()) {
							break;
						}
						ll t = q[1].front();
						if (bad[t]) break;
						res.push_back(t);
						q[1].pop_front();
						back = 0;
					}
				}
				rest--;
			}
			bool check = true;
			for (ll j = 0; j < 4; j++) {
				if (!q[j].empty()) check = false;
			}
			if (check) {
				if (cnt > res.size()) {
					cnt = res.size();
					ans = res;
				}
			}
		}
		if (cnt == INF) {
			cout << "-1" << "\n";
		}
		else {
			cout << cnt << "\n";
			for (ll i = 0; i < cnt; i++) {
				cout << ans[i];
				if (i == cnt - 1) cout << "\n";
				else cout << " ";
			}
		}
	}


	return 0;

}
