#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <iomanip>
#include <sstream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <stack>
#include <set>
#include <map>
#include <bitset>
#include <cstring>
#include <cctype>
#include <queue>
#include <deque>

using namespace std;

#define fi first
#define se second
#define pf push_front
#define pb push_back
#define mk make_pair
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)x.size()
#define SWS ios_base::sync_with_stdio(false)
#define rfile freopen("input.txt", "r", stdin)
#define wfile freopen("output.txt", "w", stdout)
#define files rfile; wfile

typedef long long ll;
typedef long double ld;

const int Z = (int)1e5 + 111;
const int inf = (int)1e9 + 111;
const ll llinf = (ll)1e18 + 5;
const int MOD = (int)1e9 + 7;

int n, m, k;
char a[100][100];
bool vis[100][100];
pair<int, int> comp[10000];
vector <vector<pair<int, int> > > v;

void dfs(int x, int y) {
    if (x == 0 || x == n+1 || y == 0 || y == m+1 || vis[x][y] || a[x][y] == '*') return;
    vis[x][y] = 1;
    dfs(x+1, y);
    dfs(x-1, y);
    dfs(x, y+1);
    dfs(x, y-1);
}

void dfs2(int x, int y) {
    if (x == 0 || x == n+1 || y == 0 || y == m+1 || vis[x][y] || a[x][y] == '*') return;
    v.back().pb(mk(x, y));
    vis[x][y] = 1;
    dfs2(x+1, y);
    dfs2(x-1, y);
    dfs2(x, y+1);
    dfs2(x, y-1);
}

int main() {
	//files;
	SWS;
	cin >> n >> m >> k;
	for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            cin >> a[i][j];
        }
	}
	for (int i = 1; i <= n; ++i) {
        dfs(i, 1);
        dfs(i, m);
	}
	for (int i = 1; i <= m; ++i) {
        dfs(1, i);
        dfs(n, i);
	}
	for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            if (!vis[i][j] && a[i][j] == '.') {
                v.resize(v.size() + 1);
                dfs2(i, j);
            }
        }
	}
	int szV = sz(v), ans = 0;
	for (int i = 0; i < szV; ++i) {
        comp[i] = mk(sz(v[i]), i);
	}
	sort(comp, comp + szV);
	for (int i = 0; i < szV - k; ++i) {
        ans += comp[i].fi;
        int num = comp[i].se;
        for (int j = 0; j < sz(v[num]); ++j) {
            a[v[num][j].fi][v[num][j].se] = '*';
        }
	}
	cout << ans << '\n';
	for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            cout << a[i][j];
        }
        cout << '\n';
	}
	return 0;
}
