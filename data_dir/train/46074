/*input
2 1
aa
2
a
b
*/
#include <iostream>
#include <cstdio>
#include <vector>
#include <functional>
#include <math.h>
#include <string.h>
#include <utility>
#include <algorithm>
#include <iomanip>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <stdlib.h>
#include <list>
#include <assert.h>
#include <time.h>
#include <fstream>
#include <sstream>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define ll long long
#define P 2000005
#define INF 2139062143
#define B1 94
#define M1 2987634522
#define B2 75
#define M2 2236542956
#define int ll
#define hash hash__
int n, k, l;
string s;
map<pair<int, int>, int> check;
vector<pair<int, int> > hash;
deque<char> dq;
pair<int, int> h[P];
map<pair<int, int>, int> used;

pair<int, int> gethash(string &x) {
	pair<int, int> cur = mp(0, 0);
	for (int i = 0; i < x.size(); i++) {
		cur.fi = (cur.fi * B1 + x[i]) % M1;
		cur.se = (cur.se * B2 + x[i]) % M2;
	}
	return cur;
}

void prep() {
	h[0].fi = h[0].se = 1;
	for (int i = 1; i <= P - 5; i++) {
		h[i].fi = (h[i - 1].fi * B1) % M1;
		h[i].se = (h[i - 1].se * B2) % M2;
	}
	hash.push_back(mp(0, 0));
	for (int i = 0; i <= l - 1; i += k) {
		string t;
		for (int j = i; j <= i + k - 1; j++) t += dq[j];
		hash.push_back(gethash(t));
	}
}


bool solve() {
	used.clear();
	for (int i = 1; i <= n; i++) {
		hash[i].fi = ((hash[i].fi - dq[k * (i - 1)] * h[k - 1].fi) % M1 + M1) % M1;
		hash[i].se = ((hash[i].se - dq[k * (i - 1)] * h[k - 1].se) % M2 + M2) % M2;
	}
	dq.push_back(dq.front());
	dq.pop_front();
	for (int i = 1; i <= n; i++) {
		hash[i].fi = (hash[i].fi * B1 + dq[i * k - 1]) % M1;
		hash[i].se = (hash[i].se * B2 + dq[i * k - 1]) % M2;
	}
	for (int i = 1; i <= n; i++) {
		if (used[hash[i]] || !check.count(hash[i])) return false;
		used[hash[i]] = true;
	}
	return true;
}

void done() {
	cout << "YES" << endl;
	for (int i = 1; i <= n; i++) {
		cout << check[hash[i]] << sp;
	}
	exit(0);
}

signed main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> k;
	l = n * k;
	cin >> s;
	for (int i = 0; i < s.size(); i++) dq.push_back(s[i]);
	int g; cin >> g;
	for (int i = 1; i <= g; i++) {
		cin >> s;
		pair<int, int> rec = gethash(s);
		assert(check[rec] == 0);
		check[rec] = i;
	}
	prep();
	for (int i = 1; i <= k; i++) {
		if (solve()) {
			done();
		}
	}
	cout << "NO" << endl;
}