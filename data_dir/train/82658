#include<bits/stdc++.h>
#include<ext/numeric>
using namespace std;
using namespace __gnu_cxx;

struct line {
    double a, b, c;
} l1, l2;
struct Podouble {
    double x, y;
};
const double EPS = 1e-10, PI = acos(-1);
const int MAX = 1e5 + 5;
double n, Xcr, Ycr;
vector<Podouble> arr(MAX);
vector<pair<double, int> > v;
void PodoublesToLine(Podouble p1, Podouble p2, line &l) {
    if (fabs(p1.x - p2.x) < EPS) {
        l.a = 1.0;
        l.b = 0.0;
        l.c = -p1.x;
    } else {
        l.a = -(double) (p1.y - p2.y) / (p1.x - p2.x);
        l.b = 1.0;
        l.c = -(double) (l.a * p1.x) - p1.y;
    }
}
bool check(double r, line l, Podouble s, Podouble e) {
    double a = l.a, b = l.b, c = l.c;
    double x = min(s.x, e.x), x2 = max(s.x, e.x), y = min(s.y, e.y), y2 = max(
            s.y, e.y);
    if (fabs(b) > EPS) {
        double A = (1 + a * a);
        double B = (2 * a * c + 2 * a * Ycr - 2 * Xcr);
        double C = (Xcr * Xcr + c * c + 2 * c * Ycr + Ycr * Ycr - r * r);
        if (B * B - 4 * A * C < 0)
            return 0;
        double desc = sqrt(B * B - 4 * A * C);
        double X = (-B + desc) / (2 * A), X2 = (-B - desc) / (2 * A);
        bool b = 0;
        if ((fabs(X - x) < EPS || X > x) && ((fabs(X - x2) < EPS) || X < x2)) {
            double Y = -a * X - c;
            b = ((fabs(Y - y) < EPS || Y > y)
                    && ((fabs(Y - y2) < EPS) || Y < y2));
        }
        if ((fabs(X2 - x) < EPS || X2 > x)
                && ((fabs(X2 - x2) < EPS) || X2 < x2)) {
            double Y = -a * X2 - c;
            b = ((fabs(Y - y) < EPS || Y > y)
                    && ((fabs(Y - y2) < EPS) || Y < y2));
        }
        return b;
    } else {
        double A = (1); //+ (b * b / (a * a))
        double B = (-2 * Ycr); //2 * b * c / (a * a) + 2 * b * Xcr / a
        double C = (Xcr * Xcr + c * c / (a * a) + 2 * c * Xcr / a + Ycr * Ycr
                - r * r);
        if (B * B - 4 * A * C < 0)
            return 0;
        double desc = sqrt(B * B - 4 * A * C);
        double Y = (-B + desc) / (2 * A), Y2 = (-B - desc) / (2 * A);
        bool b = 0;
        if ((fabs(Y - y) < EPS || Y > y) && ((fabs(Y - y2) < EPS) || Y < x2)) {
            double X = (-c) / a;
            b = ((fabs(X - x) < EPS || X > x)
                    && ((fabs(X - x2) < EPS) || X < x2));
        }
        if ((fabs(Y2 - y) < EPS || Y2 > y)
                && ((fabs(Y2 - y2) < EPS) || Y2 < y2)) {
            double X = (-c) / a;
            b = ((fabs(X - x) < EPS || X > x)
                    && ((fabs(X - x2) < EPS) || X < x2));
        }
        return b;
    }
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("in.txt", "rt", stdin);
#endif
    scanf("%lf%lf%lf", &n, &Xcr, &Ycr);
    double mxDist = 0, mnDist = 1e18;
    for (int i = 0; i < n; ++i) {
        scanf("%lf%lf", &arr[i].x, &arr[i].y);
        double dist = (Xcr - arr[i].x) * (Xcr - arr[i].x) * 1.0
                + (Ycr - arr[i].y) * (Ycr - arr[i].y);
        mxDist = max(mxDist, dist);
        if (fabs(dist - mnDist) < EPS)
            v.push_back(pair<double, int>(dist, i));
        else if (fabs(dist - mnDist) > EPS && dist < mnDist) {
            mnDist = dist;
            v.clear();
            v.push_back(pair<double, int>(dist, i));
        }
    }
    double ans = 1e18;
    double s = EPS, e = sqrt(mnDist);
    double r = e;
    while (fabs(s - e) > 1e-6) {
        double mid = (s + (e - s) / 2);
        bool c1;
        for (int j = 0; j < n; ++j) {
            int idx = (j + 1);
            if (idx == n)
                idx = 0;
            PodoublesToLine(arr[idx], arr[j], l1);
            c1 = check(mid, l1, arr[idx], arr[j]);
            if (c1)
                break;
        }
        if (c1)
            r = mid, e = mid - 1e-6;
        else
            s = mid + 1e-6;
        ans = min(ans, r);
    }
    printf("%.9lf", PI * (mxDist - ans * ans));
}
