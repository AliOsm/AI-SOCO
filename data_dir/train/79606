#include<bits/stdc++.h>
#define LL long long
#define fi first
#define se second
#define mk make_pair
#define PLL pair<LL, LL>
#define PLI pair<LL, int>
#define PII pair<int, int>
#define SZ(x) ((int)x.size())
#define ull unsigned long long

using namespace std;

const int N = 1000 + 7;
const int inf = 0x3f3f3f3f;
const LL INF = 0x3f3f3f3f3f3f3f3f;
const int mod = 1e9 + 7;
const double eps = 1e-8;
const double PI = acos(-1);

struct Edge {
    int u, v, w, id;
    bool operator < (const Edge& rhs) {
        return w > rhs.w;
    }
};

int n, m, q, fa[N * 2];
Edge e[N * N];

int getRoot(int x) {
    return fa[x] == x ? x : fa[x] = getRoot(fa[x]);
}

int main() {
    scanf("%d%d%d", &n, &m, &q);
    for(int i = 1; i <= m; i++) {
        scanf("%d%d%d", &e[i].u, &e[i].v, &e[i].w);
        e[i].id = i;
    }
    sort(e + 1, e + 1 + m);
    while(q--) {
        for(int i = 1; i <= 2 * n; i++) fa[i] = i;
        int L, R, ans = -1; scanf("%d%d", &L, &R);
        for(int i = 1; i <= m; i++) {
            if(e[i].id < L || e[i].id > R) continue;
            if(getRoot(e[i].u) == getRoot(e[i].v)) {
                ans = e[i].w;
                break;
            }
            fa[getRoot(e[i].u)] = getRoot(e[i].v + n);
            fa[getRoot(e[i].u + n)] = getRoot(e[i].v);
        }
        printf("%d\n", ans);
    }
    return 0;
}

/*
*/
