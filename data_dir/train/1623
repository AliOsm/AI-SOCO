#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
using namespace std;
#define pi 3.141592653589793
#define ii pair<int,int>
#define llll pair<ll,ll>
#define ll long long
#define p10(ans) printf("%0.10f\n", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s\n", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mk(x,y)                      make_pair(x,y)
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define ninf -10000000000000000;
#define inf 10000000000000000
int main()
{
	int n;
	multiset<int>seet;
	multiset<int>seet2;
	multiset<int>::iterator it1;
	multiset<int>::iterator it2;
	string s, ss;
	sci(n);
	cin >> s;
	cin >> ss;
	int minn = 0;
	for (int i = 0; i < ss.size(); ++i) { seet.insert(ss[i] - '0'); seet2.insert(ss[i] - '0'); }
	for (int i = 0; i < s.size(); ++i)
	{
		it1 = seet.lower_bound(s[i] - '0');
		if (it1 != seet.end())
		{
			it2 = seet.find(*it1);
			seet.erase(it2);
		}
		else
		{
			it2 = seet.begin();
			seet.erase(it2);
			++minn;
		}
	}
	int maxx = 0;
	for (int i = 0; i < s.size(); ++i)
	{
		it1 = seet2.upper_bound(s[i] - '0');
		if (it1 != seet2.end())
		{
			it2 = seet2.find(*it1);
			seet2.erase(it2);
			++maxx;
		}
		else
		{
			it2 = seet2.begin();
			seet2.erase(it2);
		}
	}
	cout << minn << endl;
	cout << maxx << endl;
}