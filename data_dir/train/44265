#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using PII = pair<int, int>;
using VI = vector<int>;

const int N = 105;
ll a[N][N], vals[N * N];
ll dp[N][N];

inline ll combine(ll a, ll b) {
  if (a < 0 || b < 0) return -1;
  else return a + b;
}
inline ll combmin(ll a, ll b) {
  if (a < 0) return b;
  else if (b < 0) return a;
  else return min(a, b);
}

int main() {
#ifdef LOCAL_EXEC
//	freopen("sample.in", "r", stdin);
//	freopen("sample.out", "w", stdout);
#else
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#endif

  int t; cin >> t;
  while (t--) {
    int n, m; cin >> n >> m;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        cin >> a[i][j];
        a[i][j] += (n - i) + (m - j);
        vals[i * m + j] = a[i][j];
      }
    }
    ll ans = 1e18;
    for (int k = 0; k < n * m; k++) {
      const ll cur = vals[k];
      if (a[0][0] < cur) continue;

      dp[0][0] = combine(0, a[0][0] - cur);
      for (int i = 1; i < n; i++) {
        dp[i][0] = combine(dp[i - 1][0], a[i][0] - cur);
      }
      for (int j = 1; j < m; j++) {
        dp[0][j] = combine(dp[0][j - 1], a[0][j] - cur);
      }
      for (int i = 1; i < n; i++) {
        for (int j = 1; j < m; j++) {
          dp[i][j] = combine(a[i][j] - cur, combmin(dp[i - 1][j], dp[i][j - 1]));
        }
      }
      if (dp[n - 1][m - 1] >= 0) ans = min(ans, dp[n - 1][m - 1]);
    }
    cout << ans << '\n';
  }

  return 0;
}
