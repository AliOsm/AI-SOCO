#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdio>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define type(x) __typeof((x).begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;
const long long longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 1010;
const int K = 50;
const int mod = 1e9 + 7;

inline int mul(int a,int b){
    return (long long)a * b % mod;
}

inline int add(int a,int b){
    a += b;
    if(a >= mod)
        a -= mod;
    return a;
}

int c[N][N], fact[N], f[K][N][N]; // k , cur, sum

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#endif

    fact[0] = 1;
    for(int i = 1; i < N; i++) fact[i] = mul(fact[i - 1], i);

    c[0][0] = 1;
    for(int i = 1; i < N; i++){
        for(int j = 0; j <= i; j++){
            c[i][j] = c[i - 1][j];
            if(j > 0)
                c[i][j] = add(c[i][j], c[i - 1][j - 1]);
        }
    }

    for(int i = 0; i < N; i++)
        f[0][i][0] = 1;
    for(int k = 1; k < K; k++){
        for(int cur = 1; cur < N; cur++){
            for(int sum = 0; sum < N; sum++){
                f[k][cur][sum] = f[k][cur - 1][sum];
                if(sum >= cur)
                    f[k][cur][sum] = add(f[k][cur][sum], f[k - 1][cur - 1][sum - cur]);
            }
        }
    }


    int tc = read();
    while(tc--){
        int n = read(), k = read();
        if(k >= K){
            puts("0");
        }else{
            int ans = 0;
            for(int len = k * (k + 1) / 2; len <= n; len++){
                ans = add(ans, mul(f[k][N - 1][len], c[n - len + k][k]));
            }
            ans = mul(ans, fact[k]);
            printf("%d\n",ans);
        }
    }

    eprintf("%d\n",f[1][N - 1][2]);
    eprintf("%d\n",c[2][2]);

    return 0;
}
