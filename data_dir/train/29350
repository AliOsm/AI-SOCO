#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;
#define INF (1ll<<60)

int N,S,T;
ll graph[2010][2010];
ll p[2010];
ll dist[2010];
bool used[2010];
ll dists[2010],distt[2010];

vector <pair <ll, int> > vs,vt; // dist, id
int ranks[2010],rankt[2010];
ll dps[2010][2010],dpt[2010][2010];
bool new_s[2010][2010],new_t[2010][2010];

ll calc_s(int x, int y){
    if(x == N) return 0;
    if(!new_s[x][y]) return dps[x+1][y];
    
    ll next_cost = p[vs[x].second];
    ll ans = next_cost + dps[x+1][y];
    
    for(int i=x+1;i<=N;i++){
        ans = max(ans, next_cost - dpt[i][y]);
        if(new_s[i][y]) break;
    }
    
    return ans;
}

ll calc_t(int x, int y){
    if(y == N) return 0;
    if(!new_t[x][y]) return dpt[x][y+1];
    
    ll next_cost = p[vt[y].second];
    ll ans = next_cost + dpt[x][y+1];
    
    for(int i=y+1;i<=N;i++){
        ans = max(ans, next_cost - dps[x][i]);
        if(new_t[x][i]) break;
    }
    
    return ans;
}

void main2(void){
    int i,j;
    
    REP(i,N) REP(j,N+1) new_s[i][j] = (rankt[vs[i].second] >= j);
    REP(i,N+1) REP(j,N) new_t[i][j] = (ranks[vt[j].second] >= i);
    
    for(i=N;i>=0;i--) for(j=N;j>=0;j--){
        dps[i][j] = calc_s(i, j);
        dpt[i][j] = calc_t(i, j);
    }
    
    ll ans = dps[0][0];
    if(ans > 0) cout << "Break a heart" << endl;
    if(ans < 0) cout << "Cry" << endl;
    if(ans == 0) cout << "Flowers" << endl;
}

void get_dist(int s){
    int i,j;
    
    REP(i,N) dist[i] = INF;
    REP(i,N) used[i] = false;
    dist[s] = 0;
    
    REP(i,N){
        int x = -1;
        REP(j,N) if(!used[j] && (x == -1 || dist[j] < dist[x])) x = j;
        used[x] = true;
        REP(j,N) dist[j] = min(dist[j], dist[x] + graph[x][j]);
    }
}

int main(void){
    int M,i,j;
    
    cin >> N >> M >> S >> T;
    S--; T--;
    REP(i,N){
        int tmp;
        scanf("%d", &tmp);
        p[i] = tmp;
    }
    REP(i,N) REP(j,N) if(i != j) graph[i][j] = INF;
    REP(i,M){
        int u,v,w;
        scanf("%d%d%d", &u, &v, &w);
        u--; v--;
        graph[u][v] = min(graph[u][v], (ll)w);
        graph[v][u] = min(graph[v][u], (ll)w);
    }
    
    get_dist(S);
    REP(i,N) dists[i] = dist[i];
    get_dist(T);
    REP(i,N) distt[i] = dist[i];
    
    REP(i,N) vs.push_back(make_pair(dists[i], i));
    sort(vs.begin(),vs.end());
    REP(i,N) vt.push_back(make_pair(distt[i], i));
    sort(vt.begin(),vt.end());
    
    REP(i,N) ranks[vs[i].second] = i;
    REP(i,N) rankt[vt[i].second] = i;
    
    main2();
    
    return 0;
}
