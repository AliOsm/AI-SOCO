#include <bits/stdc++.h>

using namespace std;

typedef unsigned uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ldbl;
typedef pair<int, int> pii;
typedef pair<uint, uint> puu;
typedef pair<ll, ll> pll;
typedef pair<ull, ull> pull;
typedef vector<int> vi;
typedef vector<uint> vu;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<pii> vpii;
typedef vector<puu> vpuu;
typedef vector<pll> vpll;
typedef vector<pull> vpull;
typedef vector<string> vstr;
typedef vector<double> vdbl;
typedef vector<ldbl> vldbl;
#define pb push_back
#define ppb pop_back
#define pfr push_front
#define ppfr pop_front
#define emp emplace
#define empb emplace_back
#define be begin
#define rbe rbegin
#define all(x) (x).be(), (x).end()
#define rall(x) (x).rbe(), (x).rend()
#define fir first
#define sec second
#define mkp make_pair
#define brif(cond) if (cond) break
#define ctif(cond) if (cond) continue
#define retif(cond) if (cond) return
static inline void canhazfast() {ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}
template<typename T> T gcd(T a, T b) {return b ? gcd(b, a%b) : a;}
template<typename T> T extgcd(T a, T b, T &x, T &y)
{
    T x0 = 1, y0 = 0, x1 = 0, y1 = 1;
    while (b) {
        T q = a/b; a %= b; swap(a, b);
        x0 -= q*x1; swap(x0, x1);
        y0 -= q*y1; swap(y0, y1);
    }
    x = x0; y = y0; return a;
}
static inline int ctz(unsigned x) {return __builtin_ctz(x);}
static inline int ctzll(ull x) {return __builtin_ctzll(x);}
static inline int clz(unsigned x) {return __builtin_clz(x);}
static inline int clzll(ull x) {return __builtin_clzll(x);}
static inline int popcnt(unsigned x) {return __builtin_popcount(x);}
static inline int popcntll(ull x) {return __builtin_popcountll(x);}
static inline int bsr(unsigned x) {return 31^clz(x);}
static inline int bsrll(ull x) {return 63^clzll(x);}

#define MX 128
#define INF 12345678

pii dist[3*MX][3*MX];
int pos[MX];
pii dp[MX][3];

pii operator+(const pii &a, const pii &b) { return mkp(a.fir+b.fir, a.sec+b.sec); }

int main()
{
    canhazfast();

    int n, nn;
    const int di[] = {-2, -2, -1, -1, 1, 1, 2, 2};
    const int dj[] = {-1, 1, -2, 2, -2, 2, -1, 1};
    pii ans;

    cin >> n;
    nn = n*n;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            int a;
            cin >> a;
            pos[a] = i*n+j;
        }
    }
    /// ini
    for (int u = 0; u < 3*nn; ++u) {
        for (int v = 0; v < 3*nn; ++v) {
            ctif(u == v);
            dist[u][v] = mkp(INF, INF);
        }
    }
    /// r
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            int u = i*n+j;
            for (int ii = 0; ii < i; ++ii) {
                int v = ii*n+j;
                dist[3*u][3*v] = dist[3*v][3*u] = mkp(1, 0);
            }
            for (int jj = 0; jj < j; ++jj) {
                int v = i*n+jj;
                dist[3*u][3*v] = dist[3*v][3*u] = mkp(1, 0);
            }
        }
    }
    /// b
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            int u = i*n+j;
            for (int ii = i-1, jj = j-1; ii >= 0 && jj >= 0; --ii, --jj) {
                int v = ii*n+jj;
                dist[3*u+1][3*v+1] = dist[3*v+1][3*u+1] = mkp(1, 0);
            }
            for (int ii = i-1, jj = j+1; ii >= 0 && jj < n; --ii, ++jj) {
                int v = ii*n+jj;
                dist[3*u+1][3*v+1] = dist[3*v+1][3*u+1] = mkp(1, 0);
            }
        }
    }
    /// k
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            int u = i*n+j;
            for (int k = 0; k < 8; ++k) {
                int ii = i+di[k];
                ctif(ii < 0 || ii >= n);
                int jj = j+dj[k];
                ctif(jj < 0 || jj >= n);
                int v = ii*n+jj;
                dist[3*u+2][3*v+2] = mkp(1, 0);
            }
        }
    }
    /// swtch
    for (int u = 0; u < 3*nn; u += 3) {
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < i; ++j) dist[u+i][u+j] = dist[u+j][u+i] = mkp(1, 1);
        }
    }
    /// fw
    for (int k = 0; k < 3*nn; ++k) {
        for (int i = 0; i < 3*nn; ++i) {
            for (int j = 0; j < 3*nn; ++j) {
                dist[i][j] = min(dist[i][j], dist[i][k]+dist[k][j]);
            }
        }
    }
    /// dp
    dp[1][0] = dp[1][1] = dp[1][2] = mkp(0, 0);
    for (int i = 2; i <= nn; ++i) {
        int pre = 3*pos[i-1], nxt = 3*pos[i];
        for (int x = 0; x < 3; ++x) {
            dp[i][x] = mkp(INF, INF);
            for (int y = 0; y < 3; ++y) {
                dp[i][x] = min(dp[i][x], dp[i-1][y]+dist[pre+y][nxt+x]);
            }
        }
    }
    ans = *min_element(dp[nn], dp[nn]+3);
    cout << ans.fir << ' ' << ans.sec;
    /*cerr << "\ndp:\n";
    for (int a = 1; a <= nn; ++a) {
        cerr << "a = " << a << '\n';
        cerr << "  pos = " << pos[a]/n << ", " << pos[a]%n << '\n';
        cerr << "  R = " << dp[a][0].fir << ", " << dp[a][0].sec << '\n';
        cerr << "  B = " << dp[a][1].fir << ", " << dp[a][1].sec << '\n';
        cerr << "  K = " << dp[a][2].fir << ", " << dp[a][2].sec << '\n';
    }*/

    return 0;
}
