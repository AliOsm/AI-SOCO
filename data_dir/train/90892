#include <iostream>
#include <cstdio>
#include <string>
#include <cstdlib>
#include <set>
#include <vector>
#include <list>
#include <algorithm>
#include <regex>
#include <cmath>
#include <map>
#include <iterator>
#include <climits>
#include <numeric>
#include <bitset>
#include <unordered_map>
#include <unordered_set>
#include <iomanip>
#include <queue>
#include <deque>
#include <stack>
#include <array>
#include <valarray>
#include <complex>
#include <random>
#include <functional>
#include <cassert>
#include <chrono>
using namespace std;

//region TEMPLATE
#pragma clang diagnostic push
#pragma ide diagnostic ignored "OCUnusedMacroInspection"
#pragma ide diagnostic ignored "cert-err58-cpp"
#define _USE_MATH_DEFINES
#define int long long
#define double long double
typedef long long ll;
typedef unsigned long long ull;
template <typename T>
void __read(T& a) { cin >> a; }
template <typename T, typename ... Args>
void __read(T& a, Args& ... args) { cin >> a; __read(args...); }
#define make(t, ...) t __VA_ARGS__; __read(__VA_ARGS__)
#define makev(a, n) VI a(n); FOR(n) cin >> a[i];
#define ALL(x) (x).begin(), (x).end()
#define RALL(x) (x).rbegin(), (x).rend()
#define FORIT(p) for(auto it = p.begin(); it != p.end(); it++)
#define FOR(b) for(int i = 0; i <(b); i++)
#define FORE(i, l, r) for(int i = (l); i < (r); i++)
#define NFOR(i, n) for(int i = (((int) n)-1); i >= 0; i--)
typedef vector<int> VI;
typedef vector<vector<int>> VVI;
typedef pair<int, int> PII;
typedef pair<pair<int, int>, int> PPII;
constexpr ll M7 = 1000000007ll;
constexpr ll M9 = 1000000009ll;
constexpr ll MFFT = 998244353ll;
template <typename T> void outv(T &a) { for (auto& x : a) cout << x << ' '; }
mt19937 rnd(static_cast<unsigned>(chrono::steady_clock::now().time_since_epoch().count()));
template <typename T> void random_shuffle(T s, T e) { shuffle(s, e, rnd); }
static auto __super_speed__ = (ios_base::sync_with_stdio(false), cin.tie(nullptr)); // NOLINT(cppcoreguidelines-interfaces-global-init)
//endregion

VVI g, rg;
VI was;

VI order;
void dfs(int v) {
    was[v] = 1;
    for (int u : g[v]) {
        if (!was[u]) dfs(u);
    }
    order.push_back(v);
}

VI color;
void dfs2(int v, int c) {
    was[v] = 1;
    color[v] = c;
    for (int u : rg[v]) {
        if (!was[u]) dfs2(u, c);
    }
}

VVI calc_scc() {
    color = was = VI(g.size());
    order.clear();
    for (int v = 0; v < g.size(); ++v) {
        if (!was[v]) dfs(v);
    }
    reverse(ALL(order));
    was.assign(g.size(), 0);
    int c = 0;
    for (int v : order) {
        if (!was[v]) dfs2(v, c++);
    }
    VVI comp(c);
    for (int v = 0; v < g.size(); ++v) {
        comp[color[v]].push_back(v);
    }
    return comp;
}

int32_t main() {
    make(int, t);
    while (t--) {
        make(int, n, m);
        g = rg = VVI(n);
        FOR(m) {
            make(int, v, u);
            v--, u--;
            g[v].push_back(u);
            rg[u].push_back(v);
        }
        auto comps = calc_scc();
        VI ans1, ans2;
        for (int c = 0; c < comps.size(); ++c) {
            bool ok = true;
            for (int v : comps[c]) {
                for (int u : g[v]) {
                    ok = ok && color[u] == c;
                }
            }
            if (ok) {
                ans1.insert(ans1.end(), ALL(comps[c]));
                for (int nc = 0; nc < comps.size(); ++nc) {
                    if (nc != c) {
                        ans2.insert(ans2.end(), ALL(comps[nc]));
                    }
                }
                break;
            }
        }
        if (ans1.size() == n) {
            cout << "No\n";
        }
        else {
            cout << "Yes\n";
            cout << ans1.size() << ' ' << ans2.size() << '\n';
            for (int v : ans1) cout << v + 1 << ' ';
            cout << '\n';
            for (int v : ans2) cout << v + 1 << ' ';
            cout << '\n';
        }
    }
    return 0;
}