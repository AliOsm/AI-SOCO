#pragma GCC optimize("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int,int> ii;
#define fore(i,a,b) for(int i=a,ggdem=b;i<ggdem;i++)
#define FIN ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define pb push_back
#define SZ(a) ((int)(a).size())
#define mset(a,b) memset(a,b,sizeof(a));
#define ALL(a) a.begin(),a.end()
#define fst first
#define snd second

int n,m,a[12][2000],b[12][12];
int dp[1<<12][12],aux[1<<12][12][12],val[1<<12][12];
ii best[2000];

int solve() {
  cin>>n>>m;
  fill(best,best+m,make_pair(-1,-1));
  fore(i,0,n)fore(j,0,m)
    cin>>a[i][j],best[j]=max(best[j],{a[i][j],j});
  sort(best,best+m,greater<ii>());
  m=min(n,m);
  fore(i,0,n)fore(j,0,m)b[i][j]=a[i][best[j].snd];
  fore(mk,0,1<<n)fore(i,0,m)fore(j,0,n) {
    aux[mk][i][j]=0;
    if(mk) {
      int bit=__builtin_ctz(mk);
      aux[mk][i][j]+=aux[mk^(1<<bit)][i][j]+b[(bit+j)%n][i];
    }
  }
  fore(mk,0,1<<n)fore(i,0,m) {
    val[mk][i]=0;
    fore(j,0,n)val[mk][i]=max(val[mk][i],aux[mk][i][j]);
  }
  fore(mk,0,1<<n)dp[mk][m]=0;
  for(int i=m-1;i>=0;i--) {
    fore(mk,0,1<<n) {
      dp[mk][i]=dp[mk][i+1];
      for(int s=0;s=s-mk&mk;) {
        dp[mk][i]=max(dp[mk][i],val[s][i]+dp[mk^s][i+1]);
      }
    }
  }
  return dp[(1<<n)-1][0];
}

int main() {FIN;
  int t;cin>>t;
  while(t--)cout<<solve()<<"\n";
}