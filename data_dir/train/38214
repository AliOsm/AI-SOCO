
#include<bits/stdc++.h>
#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define mod 1000000007
#define deb(x) cout<<#x<<" : "<<x<<endl;
#define deb2(x,y) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<endl;
#define deb3(x,y,z) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<"\t"<<#z<<" : "<<z<<endl;
#define inf 1000000000000000 

#define FIO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define endl '\n'
typedef long long ll;
#define ld long double

/*
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
  
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
*/

using namespace std;
 
 
long long modulo(long long base,long long exponent,long long modulus);
long long choose(ll n,ll k);
ll inverse(ll a,ll m);
void build();
void fileio();
ll ncr(ll n,ll r);
 
const int nax=1e6+10;
const int LG=log2(nax)+1;
vector<ll> fact(nax);
vector<ll> invfact(nax);

ll p1=137;
ll MOD=mod;
ll mod1=mod;
ll p2=21;
ll mod2 = 1e9 + 9;




//------------

struct Hash
{
	vector<ll> hashs;
	vector<ll> pows;

	vector<ll> inv;

	ll P;
	ll MOD;

	Hash(string &s,ll P,ll MOD) : P(P),MOD(MOD)
	{
		ll n=s.size();
		pows.resize(n+1,0);
		hashs.resize(n+1,0);
		inv.resize(n+1,0);

		pows[0]=1;
		for(int i=1;i<=n;i++)
			pows[i]=(pows[i-1]*P)%MOD;

		
		for(int i=0;i<=n;i++)
		{
			inv[i]=inverse(pows[i],MOD);
		}

		hashs[0]=s[0];
		for(int i=1;i<n;i++)
		{
			hashs[i]=(hashs[i-1] + (s[i])*pows[i])%MOD ;
		}
	}

	ll get_hash(ll l,ll r)
	{
		ll ans=hashs[r];
		if(l!=0)
		{
			ans=(ans-hashs[l-1]+MOD)%MOD;
			ans=(ans*inv[l])%MOD;
		}
		return ans;
	}
};
 
 
int32_t main() {
 
    FIO
    //fileio();
    //build();
     ll t;
    cin>>t;



    while(t--)
    {
    	string s;
    	cin>>s;

    	ll n=s.size();

    	if(n==1)
    	{
    		cout<<s<<endl;
    		continue;
    	}

    	ll i=0,j=n-1;
    	string ans;
    	while(i<j && s[i]==s[j])
    	{
    		ans+=s[i];
    		i++;
    		j--;
    	}

    	if(i>j)
    	{
    		
    		cout<<s<<endl;
    		continue;
    	}
    	

    	string s1;
    	for(int k=i;k<=j;k++)
    		s1+=s[k];
    	n = s1.size();
    	string s2 = s1;
    	reverse(s2.begin(),s2.end());

    	ll len=0;
    	for(int i=0;i<n;i++)
    	{
    		ll j=0,k=i;
    		bool flag=true;
    		while(j<=i)
    		{
    			if(s1[j]!=s1[k])
    				flag = false;
    			j++;
    			k--;    			
    		}
    		if(flag)
    			len = i+1;
    	}

    	ll len1=0;
    	for(int i=0;i<n;i++)
    	{
    		ll j=0,k=i;
    		bool flag=true;
    		while(j<=i)
    		{
    			if(s2[j]!=s2[k])
    				flag = false;
    			j++;
    			k--;    			
    		}
    		if(flag)
    			len1 = i+1;
    	}

    	string temp=ans;
    	if(len1>len)
    	{
    		for(int i=0;i<len1;i++)
    			ans+=s2[i];
    	}
    	else
    	{
    		for(int i=0;i<len;i++)
    			ans+=s1[i];
    	}
    	reverse(temp.begin(),temp.end());
    	ans+=temp;

    	cout<<ans<<endl;













    }
 
    return 0;
}
 
ll ncr(ll n,ll r)
{
    if(r>n || r<0 || n<0)
        return 0;
    ll ans=fact[n];
    ll temp=(invfact[n-r]*invfact[r])%mod;
    ans=(ans*temp)%mod;
    return ans;
}

void fileio()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
} 
void build()
{
    fact[0]=1;
    invfact[0]=inverse(1,mod);
    for(ll i=1;i<nax;i++)
    {
        fact[i]=(fact[i-1]*i)%mod;
        invfact[i] = inverse(fact[i],mod);   
    }
}
 
long long modulo(long long base,long long exponent,long long modulus)
{
    if(modulus ==1)
        return 0;
 
    long long result=1;
    base=base % modulus;
    while(exponent>0)
    {
        if(exponent%2==1)
        {
            result=(result*base) % modulus;
 
        }
        exponent=exponent>>1;
        base = (base*base) % modulus;
    }
    return result;
}
 
long long choose(ll n,ll k)
{
    if(k==0)  return 1;
    return (n* choose(n-1,k-1))/k;
}
 
void EE(ll a,ll b,ll &co1,ll &co2)
{
    if(a%b==0)
    {
        co1=0;
        co2=1;
        return;
    }
    EE(b,a%b,co1,co2);
    ll temp=co1;
    co1=co2;
    co2=temp-co2*(a/b);
}
 
ll inverse(ll a,ll m)
{
    ll x,y;
    EE(a,m,x,y);
    if(x<0) x+=m;
    return x;
}