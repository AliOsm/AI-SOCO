#include<bits/stdc++.h>
#define rep(i,n) for(int i=0;i<(int)n;i++)
#define all(c) (c).begin(),(c).end()
#define mp make_pair
#define pb push_back
#define dbg(...) do{cerr<<__LINE__<<": ";dbgprint(#__VA_ARGS__, __VA_ARGS__);}while(0);

using namespace std;

namespace std{template<class S,class T>struct hash<pair<S,T>>{size_t operator()(const pair<S,T>&p)const{return ((size_t)1e9+7)*hash<S>()(p.first)+hash<T>()(p.second);}};template<class T>struct hash<vector<T>>{size_t operator()(const vector<T> &v)const{size_t h=0;for(auto i : v)h=h*((size_t)1e9+7)+hash<T>()(i)+1;return h;}};}
template<class T>ostream& operator<<(ostream &os, const vector<T> &v){os<<"[ ";rep(i,v.size())os<<v[i]<<(i==v.size()-1?" ]":", ");return os;}template<class T>ostream& operator<<(ostream &os,const set<T> &v){os<<"{ "; for(const auto &i:v)os<<i<<", ";return os<<"}";}
template<class T,class U>ostream& operator<<(ostream &os,const map<T,U> &v){os<<"{";for(const auto &i:v)os<<" "<<i.first<<": "<<i.second<<",";return os<<"}";}template<class T,class U>ostream& operator<<(ostream &os,const pair<T,U> &p){return os<<"("<<p.first<<", "<<p.second<<")";}
void dbgprint(const string &fmt){cerr<<endl;}template<class H,class... T>void dbgprint(const string &fmt,const H &h,const T&... r){cerr<<fmt.substr(0,fmt.find(","))<<"= "<<h<<" ";dbgprint(fmt.substr(fmt.find(",")+1),r...);}
typedef long long ll;typedef vector<int> vi;typedef pair<int,int> pi;const int inf = (int)1e9;const double INF = 1e12, EPS = 1e-9;

int n, m, v[100000];
vector<vi> e;

bool rec(int c, int p, int col){
	v[c] = col;
	for(int i : e[c]){
		if(v[i] && v[i] != -col) return 0;
		if(!v[i]) if(!rec(i, c, -col)) return 0;
	}
	return 1;
}

int main(){
	scanf("%d%d", &n, &m);
	e.resize(n);
	rep(i, m){
		int a, b; scanf("%d%d", &a, &b); a--; b--;
		e[a].pb(b);
		e[b].pb(a);
	}
	bool ok = 1;
	rep(i, n) if(!v[i]) ok &= rec(i, i, 1);
	
	if(!ok){
		cout << -1 << endl;
	}
	else{
		vi u, w;
		rep(i, n) (v[i] == 1 ? u : w).pb(i + 1);
		printf("%d\n", u.size()); rep(i, u.size()) printf("%d%c", u[i], i+1==u.size() ? '\n' : ' ');
		printf("%d\n", w.size()); rep(i, w.size()) printf("%d%c", w[i], i+1==w.size() ? '\n' : ' ');
	}
	return 0;
}