#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma comment(linker, "/STACK:16777216")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<double, double> pd;

template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

const int MAXN = 3050;
string st[MAXN], fn[MAXN];
int l[MAXN], r[MAXN];

signed main() {
    FAST_IO();
    int n;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> st[i];
    }
    for (int i = 0; i < n; ++i) {
        cin >> fn[i];
    }
    string a = "-", b;
    for (int i = 0; i < n; ++i) {
        l[i] = -1;
        r[i] = -1;
        for (int j = 0; j < st[i].length(); ++j) {
            if (st[i][j] != fn[i][j]) {
                if (l[i] == -1) {
                    l[i] = j;
                    r[i] = j;
                }
                else {
                    r[i] = j;
                }
            }
        }
        if (l[i] == -1) {
            continue;
        }
        if (a[0] == '-') {
            a = st[i].substr(l[i], r[i] - l[i] + 1);
            b = fn[i].substr(l[i], r[i] - l[i] + 1);
        }
        else {
            if (st[i].substr(l[i], r[i] - l[i] + 1) != a || fn[i].substr(l[i], r[i] - l[i] + 1) != b) {
                cout << "NO\n";
                return 0;
            }
        }
    }
    while (true) {
        bool flag = true;
        set<pair<char, char>> setik;
        for (int i = 0; i < n; ++i) {
            if (l[i] == -1) {
                continue;
            }
            if (l[i] == 0) {
                flag = false;
                break;
            }
            l[i]--;
            setik.insert({st[i][l[i]], fn[i][l[i]]});
        }
        if (!flag || setik.size() != 1) {
            break;
        }
        a.insert(a.begin(), setik.begin()->first);
        b.insert(b.begin(), setik.begin()->second);
    }
    while (true) {
        bool flag = true;
        set<pair<char, char>> setik;
        for (int i = 0; i < n; ++i) {
            if (l[i] == -1) {
                continue;
            }
            if (r[i] == st[i].length() - 1) {
                flag = false;
                break;
            }
            r[i]++;
            setik.insert({st[i][r[i]], fn[i][r[i]]});
        }
        if (!flag || setik.size() != 1) {
            break;
        }
        a += setik.begin()->first;
        b += setik.begin()->second;
    }
    for (int i = 0; i < n; ++i) {
        int pos = st[i].find(a);
        if (pos != -1) {
            for (int j = 0; j < b.length(); ++j) {
                st[i][pos + j] = b[j];
            }
        }
        if (st[i] != fn[i]) {
            cout << "NO\n";
            return 0;
        }
    }
    cout << "YES\n" << a << '\n' << b;
}
