#pragma comment(linker, "/STACK:64000000")
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cassert>
#include <ctime>
#include <deque>

#define forn(i, n) for (int i = 0; i < n; i ++)
#define ford(i, n) for (int i = n - 1; i >= 0; i --)
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define pi 3.1415926535897932
#define ll long long
#define ld long double

using namespace std;

bool use[13][4];
const char num[5] = {'T', 'J', 'Q', 'K', 'A'}; 
const char m[4] = {'C', 'D', 'H', 'S'};

int get_num(char c){
    if (c >= '2' && c <= '9') return int(c) - '2';
    else forn(i, 5)
        if (num[i] == c) return i + 8;
}

char get_c(int k){
    if (k < 8) return char('2' + k);
    else return num[k - 8];
}

int get_m(char c){
    forn(i, 4)
        if (m[i] == c) return i;
}

pair<int, int> a[20][20];
pair<int, int> p[2];
bool use1[20];
int n, m1;

bool check(int i, int j){
    if (i + 2 >= n || j + 2 >= m1) return false;
    bool q = true, q1 = true;
    memset(use1, false, sizeof(use1));
    for (int v = i; v < i + 3; v ++)
        for (int w = j; w < j + 3; w ++){
            if (a[v][w].second != a[i][j].second) q = false;
            if (use1[a[v][w].first]) q1 = false;
            use1[a[v][w].first] = true;
        }
    return (q1 || q);
}

int main(){
#ifndef ONLINE_JUDGE
    freopen ("input.txt","rt",stdin);
    freopen ("output.txt","wt",stdout);
#endif
    scanf("%d %d\n", &n , &m1);
    p[0] = p[1] = mp(-1, -1);
    forn(i, n){
        forn(j, m1){
            char c1, c2;
            scanf("%c%c ", &c1, &c2); 
            if (!(c1 == 'J' && c2 >= '1' && c2 <= '2')){
                a[i][j] = mp(get_num(c1), get_m(c2));
                use[get_num(c1)][get_m(c2)] = true;
            }
            else p[int(c2) - '1'] = mp(i, j);
        }
        scanf("   ");
    }
    forn(i, 13)
        forn(j, 4){
            if (use[i][j] && p[0] != mp(-1, -1)) continue;
            if (p[0] != mp(-1, -1)){
                a[p[0].first][p[0].second] = mp(i, j);
                use[i][j] = true;
            }
            forn(k, 13)
                forn(z, 4){
                    if (use[k][z] && p[1] != mp(-1, -1)) continue;
                    if (p[1] != mp(-1, -1)) a[p[1].first][p[1].second] = mp(k, z);
                    forn(v, n)
                        forn(w, m1)
                            forn(p1, n)
                                forn(p2, m1)
                                    if (check(v, w) && check(p1, p2) && (abs(v - p1) > 2 || abs(w - p2) > 2)){
                                        printf ("Solution exists.\n");
                                        if (p[0] == mp(-1, -1) && p[1] == mp(-1, -1))
                                            printf ("There are no jokers.\n");
                                        else if (p[0] == mp(-1, -1))
                                            printf ("Replace J2 with %c%c.\n", get_c(k), m[z]);
                                        else if (p[1] == mp(-1, -1))
                                            printf ("Replace J1 with %c%c.\n", get_c(i), m[j]);
                                        else printf ("Replace J1 with %c%c and J2 with %c%c.\n", get_c(i), m[j], get_c(k), m[z]);
                                        printf ("Put the first square to (%d, %d).\n", v + 1, w + 1);
                                        printf ("Put the second square to (%d, %d).\n", p1 + 1, p2 + 1);
                                        return 0;
                                    }   
            }
        if (p[0] != mp(-1, -1)) use[i][j] = false;
    }
    printf ("No solution.");
    return 0;
}