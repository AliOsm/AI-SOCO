#include <bits/stdc++.h>

using namespace std;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

#define all(x) (x).begin(), (x).end()
//#define int ll

mt19937 gen(3123661);

struct node {
    node *l, *r;
    int n, sz, x, y;
    node(int i, int key) : l(nullptr), r(nullptr), sz(1), n(i), x(key), y(gen()) {};
};

const int MAXN = 1e6 + 100;
int ans[MAXN];
bitset<MAXN> used;

int getsz(node *&root) {
    return (root == nullptr ? 0 : root->sz);
}

void update(node *&root) {
    if (root == nullptr) {
        return;
    }
    root->sz = getsz(root->l) + getsz(root->r) + 1;
}

pair<node*, node*> split(node *root, int k) {
    if (root == nullptr) {
        return {nullptr, nullptr};
    }
    int key = getsz(root->l) + 1;
    if (key <= k) {
        auto splitted = split(root->r, k - key);
        root->r = splitted.first;
        update(root);
        return {root, splitted.second};
    }
    else {
        auto splitted = split(root->l, k);
        root->l = splitted.second;
        update(root);
        return {splitted.first, root};
    }
}

node* merge(node *l, node *r) {
    if (l == nullptr) {
        return r;
    }
    if (r == nullptr) {
        return l;
    }
    if (l->y < r->y) {
        l->r = merge(l->r, r);
        update(l);
        return l;
    }
    else {
        r->l = merge(l, r->l);
        update(r);
        return r;
    }
}

void change(node *&root, int pos, int value) {
    int key = getsz(root->l) + 1;
    if (key < pos) {
        change(root->r, pos - key, value);
        return;
    }
    if (key > pos) {
        change(root->l, pos, value);
        return;
    }
    if (root->x != -1 && root->x != value || root->x == -1 && used[value]) {
        cout << -1;
        exit(0);
    }
    used[value] = 1;
    root->x = value;
}

void shift(node *&root, int pos) {
    auto first = split(root, pos - 1);
    auto second = split(first.second, 1);
    root = merge(merge(second.first, first.first), second.second);
}

void getans(node *&root) {
    if (root == nullptr) {
        return;
    }
    getans(root->l);
    ans[root->n] = root->x;
    getans(root->r);
}

signed main() {

    ios_base::sync_with_stdio(0);
    //cin.tie(0);
    //cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    node *root = nullptr;
    int n, m;
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; ++i) {
        root = merge(root, new node(i, -1));
    }
    while (m--) {
        int x, y;
        scanf("%d%d", &x, &y);
        change(root, y, x);
        shift(root, y);
    }
    vector<int> not_used;
    for (int i = 1; i <= n; ++i) {
        if (!used[i]) {
            not_used.push_back(i);
        }
    }
    int l = 0;
    getans(root);
    for (int i = 1; i <= n; ++i) {
        if (ans[i] == -1) {
            ans[i] = not_used[l++];
        }
        printf("%d ", ans[i]);
    }
}
