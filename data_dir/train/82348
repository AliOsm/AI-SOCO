#include <algorithm>
#include <cmath>
#include <fstream>
#include <iostream>
#include <memory.h>
#include <bitset>
#include <vector>
#include <string>
#include <set>
#include <iomanip>
#include <queue>
#include <map>

typedef long long ll;
typedef long double ld;

using namespace std;

const int maxN = 100 + 10;

int a[maxN], d[maxN];

pair<int, int> b[5];

int g() {
	if (b[1] < b[2]) {
		swap(b[1], b[2]);
		return 1;
	}
	return 0;
}

int solve(int x, int y, int y1, int y2) {
	int answer = 0;
	for (int i = 1; i <= 2; ++i) {
		if (b[i].second == -x) {
			if (x == 2) {
				b[i].first += y2;
			}
			else {
				b[i].first += y1;
			}
		}
	}
	answer += g();
	for (int i = 1; i <= 2; ++i) {
		if (b[i].second == -y) {
			if (y == 2) {
				b[i].first += y2;
			}
			else {
				b[i].first += y1;
			}
		}
	}
	return answer + g();
}

int f(int x1, int y1, int x2, int y2) {
	b[1] = make_pair(x1, -1);
	b[2] = make_pair(x2, -2);
	if (b[1] < b[2]) swap(b[1], b[2]);
	int answer = solve(1, 2, y1, y2);
	b[1] = make_pair(x1, -1);
	b[2] = make_pair(x2, -2);
	if (b[1] < b[2]) swap(b[1], b[2]);
	return max(answer, solve(2, 1, y1, y2));
}

int main() {
	ios_base::sync_with_stdio(false);
	int n;
	cin >> n;
	for (int i = 1; i <= n; ++i) {
		cin >> a[i] >> d[i];
	}
	int answer = 0;
	for (int i = 1; i <= n; ++i) {
		for (int j = i + 1; j <= n; ++j) {
			answer += f(a[i], d[i], a[j], d[j]);
		}
	}
	cout << answer << endl;
	return 0;
}