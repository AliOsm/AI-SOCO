#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MD = 1000000007;
const int MX = 100005;

void add(int& a, int b) {
	a += b;
	if (a >= MD) a -= MD;
}
int mod_mult(ll a, ll b) {
	return (a * b) % MD;
}
int exp(int a, int b) {
	int res = 1;
	while (b) {
		if (b & 1) res = mod_mult(res, a);
		a = mod_mult(a, a);
		b /= 2;
	}
	return res;
}
int inv(int a) {
	return exp(a, MD - 2);
}

int lp[MX];
vector<int> pr;
vector<int> D[MX];

int X[MX];
int mobius[MX];

int main()
{
	mobius[1] = 1;
	for (int i = 2; i < MX; i++) {
		if (!lp[i]) {
			lp[i] = i;
			pr.push_back(i);
			mobius[i] = -1;
		}
		for (int j = 0; j < (int)pr.size() && pr[j] <= lp[i] && pr[j] * i < MX; j++) {
			lp[pr[j] * i] = pr[j];
			mobius[pr[j] * i] = (pr[j] == lp[i] ? 0 : -mobius[i]);
		}
	}
	
	int m;
	ignore = scanf("%d", &m);

	for (int a = 1; a <= m; a++) {
		if (!mobius[a]) continue;
		for (int x = a; x <= m; x += a) D[x].push_back(a);
	}
	
	for (int i = 2; i <= m; i++) {
		if (!mobius[i]) continue;
		int tmp = m;
		for (int d : D[i]) {
			if (d == i) continue;
			
			int cnt = 0;
			for (int dd : D[i]) {
				if (dd % d != 0) continue;
				cnt += mobius[dd / d] * (m / dd);
			}
			
			add(tmp, mod_mult(cnt, X[d]));
		}

		tmp = mod_mult(tmp, inv(m - m / i));
		X[i] = tmp;
	}
	
	
	int ans = 0;
	for (int i = 1; i <= m; i++) {
		int a = 1, b = i;
		while (b > 1) {
			int t = lp[b];
			a *= t;
			while (b % t == 0) b /= t;
		}
		add(ans, X[a]);
	}
	ans = mod_mult(ans, inv(m));
	add(ans, 1);
	printf("%d\n", ans);
}
