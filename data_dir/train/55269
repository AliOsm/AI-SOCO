#pragma comment(linker, "/STACK:64000000")
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cassert>
#include <ctime>
#include <deque>

#define forn(i, n) for (int i = 0; i < n; i ++)
#define ford(i, n) for (int i = n - 1; i >= 0; i --)
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define pi 3.1415926535897932
#define ll long long
#define ld long double

using namespace std;

map <string, int> fr[110];
map <string, vector < pair <string, int> > > help;
string base[100];
string s2[110];

int main(){
#ifndef ONLINE_JUDGE
    freopen ("input.txt","rt",stdin);
    freopen ("output.txt","wt",stdout);
#endif
    int k, n, m, q;
    cin >> k >> n >> m >> q;
    scanf("\n");
    string s;
    forn(i, n)
        getline(cin, base[i]);
    forn(i, m){
        vector <pair <string, int> > helper;
        char c;
        scanf("%c", &c);
        s.clear();
        while (c != ':'){
            s += c;
            scanf("%c", &c);
        }
        s2[i] = s;
        scanf("%c", &c);
        while (true){
            scanf("%c", &c);
            string s1;
            int t1;
            while (c != ' '){
                s1 += c;
                scanf("%c", &c);
            }
            scanf("%d", &t1);
            helper.pb(mp(s1, t1));
            scanf("%c", &c);
            if (c != ',') break;
            scanf("%c", &c);
        }
        help.insert(mp(s, helper));
    }
    forn(i, k)
        forn(j, n)
            fr[i].insert(mp(base[j], 0));
    forn(i, q){
        int t1;
        scanf("%d ", &t1);
        string s1;
        getline(cin, s1);
        t1 --;
        fr[t1][s1] ++;
        forn(j, m){
            bool q1 = true;
            vector <pair <string, int> > help1 = help[s2[j]];
            forn(z, help1.size())
                if (fr[t1][help1[z].first] < help1[z].second){
                    q1 = false;
                    break;
                }
            if (q1){
                forn(z, help1.size())
                    fr[t1][help1[z].first] -= help1[z].second;
                if (fr[t1].find(s2[j]) == fr[t1].end()) fr[t1].insert(mp(s2[j], 1));
                else fr[t1][s2[j]] ++;
                break;
            }
        }
    }
    forn(i, k){
        map<string, int>::iterator it = fr[i].begin();
        int kol = 0;
        for (; it != fr[i].end(); it ++)
            if (it->second > 0) kol ++;
        it = fr[i].begin();
        printf("%d\n", kol);
        for (; it != fr[i].end(); it ++)
            if (it->second > 0)
                cout << it->first << ' ' << it->second << endl;
    }

    return 0;
}