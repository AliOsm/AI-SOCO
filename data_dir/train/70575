//#include <cstdio>
#include <iostream>

#include <cstring>

#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
//#include <queue>
//#include <stack>
#include <cmath>
#include <cassert>

using namespace std;

#define SZ(a) int((a).size())
#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

typedef long long llong;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> II;

#define MAXN 100004

struct Vector {
   int id;
   int x, y;
   long double angle;
};

int N;
Vector V[2*MAXN];

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(nullptr);
   cout.precision(10);
   cout << fixed;

   double PI = atan(1)*4;

   cin >> N;
   REP(i, N) {
      int x, y;
      cin >> x >> y;
      V[i] = {i+1, x, y, atan2((long double) y, (long double) x) };
   }

   if (N == 2) {
      cout << "1 2\n";
      return 0;
   }

   sort(V, V+N,
        [&] (Vector a, Vector b) -> bool {
           return a.angle < b.angle;
         });

   REP(i, N) {
      V[N+i] = V[i];
      V[N+i].angle += 2*PI;
   }

   long double min_angle = PI;
   II best(1, 2);
   REP(i, 2*N-1) {
   // cerr << i << ": " << V[i].angle << endl;
      if (min_angle > V[i+1].angle - V[i].angle) {
         min_angle = V[i+1].angle - V[i].angle;
         best = II(V[i].id, V[i+1].id);
      }
   }
   //cerr << min_angle << endl;
   cout << best.first << ' ' << best.second << '\n';

   return 0;
}
