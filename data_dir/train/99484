#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
using namespace std;
#define pii pair<int,  int>
#define x first
#define y second
#define mp make_pair
#define pb push_back
#define VI vector<int>
#define all(s) (s).begin(),(s).end()
#define bp push_back
#define L(s) (int)(s).size()
int p[2222], h[2222];
int m[2222][2222];
pair<int, pii> d[2222 * 1111];
vector<pii> g[2222];
int n, k;
int P(int x) {
	return (p[x] == x)?(x):(p[x] = P(p[x]));
}
inline void U(int x, int y) {
	x = P(x); y = P(y);
	if (h[x] >= h[y]) {
		p[y] = x;
		if (h[x] == h[y]) {
			++h[x];
		}
	} else {
		p[x] = y;
	}
}
inline void dfs(int start, int v, int pr, int dist) {
	if (m[start][v] != dist) {
		cout << "NO\n";
		exit(0);
	}
	for(int i = 0; i < L(g[v]); ++i) {
		if (g[v][i].x != pr) {
			dfs(start, g[v][i].x, v, dist + g[v][i].y);
		}
	}
}
int main() {
	scanf("%d", &n);
	for(int i = 0; i < n; ++i) {
		for(int j = 0; j < n; ++j) {
			scanf("%d", &m[i][j]);
			if (i < j) {
				if (m[i][j] == 0) {
					cout << "NO\n";
					return 0;
				}
				d[k++] = mp(m[i][j], mp(i, j));
			} else
				if (i == j) {
					if (m[i][j]) {
						cout << "NO\n";
						return 0;
					}
				} else {
					if (m[i][j] != m[j][i]) {
						cout << "NO\n";
						return 0;
					}
				}
		}
	}

	sort(d, d + k);
	for(int i = 0; i < n; ++i) {
		p[i] = i;
		h[i] = 0;
	}

	for(int i = 0; i < k; ++i) {
		int u =  d[i].y.x;
		int v =  d[i].y.y;
		if (P(u) == P(v)) {
			continue;
		}
		U(u, v);
		g[u].pb(mp(v, d[i].x));
		g[v].pb(mp(u, d[i].x));
	}

	for(int i = 0; i < n; ++i) {
		dfs(i, i, i, 0);
	}

	cout << "YES\n";
}
