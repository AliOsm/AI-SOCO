#include <cstdio>
#include <iostream>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
#include <memory.h>
#include <complex>
#include <time.h>
#pragma comment(linker, "/STACK:100000000")
using namespace std;

#define mp make_pair
#define pb push_back
#define ll long long
#define sz(x) (int)(x).size()

int mas[100100];

map<int, int> dp;

int gr(int s, int k) {
	if(s < 100) {
		if(dp.find(s) != dp.end()) return dp[s];
		if(s == 0) return dp[s] = 0;
		if(k && s % 2 == 0) {
			int val1 = gr(s-1, k);
			int val2 = gr(s/2, k);
			if(val1 != 0 && val2 != 0) return dp[s] = 0;
			else if(val1 != 1 && val2 != 1) return dp[s] = 1;
			else return dp[s] = 2;
		}
		else if(s % 2 == 0) {
			int val1 = gr(s-1, k);
			int val2 = gr(s/2, k) ^ gr(s/2, k);
			if(val1 != 0 && val2 != 0) return dp[s] = 0;
			else if(val1 != 1 && val2 != 1) return dp[s] = 1;
			else return dp[s] = 2;
		}
		else {
			int val1 = gr(s-1, k);
			if(val1 != 0) return dp[s] = 0;
			else return dp[s] = 1;
		}
	}
	else {
		if(s % 2 == 1) return dp[s] = 0;
		if(k == 0) return dp[s] = 1;
		int val1 = gr(s - 1, k);
		int val2 = gr(s / 2, k);
		if(val1 != 0 && val2 != 0) return dp[s] = 0;
		else if(val1 != 1 && val2 != 1) return dp[s] = 1;
		else return dp[s] = 2;
	}
}

int deg2[100];

int main() {
	//freopen("input.txt","rt",stdin);
    //freopen("insider.in","rt",stdin);
	//freopen("insider.out","wt",stdout);

	int n, k;
	scanf("%d %d", &n, &k);
	k %= 2;
	int res = 0;
	for(int i = 0; i < n; i++) {
		int a;
		scanf("%d", &a);
		res ^= gr(a, k);
	}
	if(res) printf("Kevin");
	else printf("Nicky");
    return 0;
}