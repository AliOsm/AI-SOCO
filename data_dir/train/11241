#include <bits/stdc++.h>

using namespace std ;

typedef long long ll;

int dp[512][512];
//char dc[512][512];
int di[512][512];

int dd[512][512] ;

string s;
int K , N ;

int solve()
{
    
    cin >> s;
    cin >> K ;
    N = s.size();

    for(int i = 1; i <= N; ++i)
    {
        for(int j = i; j <= N; ++j)
        { 
            int l = i - 1, r = j - 1, c = 0 ;
            while(l < r )
            {
                c += s[l] != s[r] ? 1 : 0;
                ++l;
                --r;
            }
            
            dd[i][j] = c;
        }
    }
    
    
    for(int i = 1; i <= N; ++i)
    {
        dp[ i ][ 0 ] = 100000000 ; // we can't to 0-palindrome
        
        for(int k = 1; k <= K ; ++k)
        {
            dp[ i ][ k ] = dd[ 1 ][ i ] ;
            di[ i ][ k ] = 0;

            for(int j = 0; j <  i; ++j)
            {
                int p = dp[ j ] [ k - 1 ] + dd [ j + 1] [ i ] ;
      //          if (p == 0 ) printf(" i = %d k = %d  j = %d p = 0 \n", i, k , j);
                
               //for last palindom 
                if ( p < dp [ i ][ k ]  )
                {
                    dp[ i ][ k ] = p ;
                    di[ i ][ k ] = j ;
                }
            }
        }
    }
    
    //printf("dd[1][N] = %d\n", dd[1][N]);
     
    int changes = dp[N][K] ;
    string ans ;
    //vector< int > p;
    int cur = N , k = K;
    do
    {
        int prev = cur ; 
        
        cur = di[cur][k];
        
        int l = cur, r = prev - 1;
        while(l < r )
        {
            s[l] = s[r];
            ++l;
            --r;
        }
        
        if ( ! ans.empty() && prev > cur )
            ans += '+';
        
        for(int i = prev - 1; i >= cur; --i)
            ans += s[i];
        
        --k;
    }while(cur >0 ) ;
    // N   l   0
    
    reverse(ans.begin(), ans.end());
    
    cout << changes << '\n';
    cout << ans << '\n';
//    printf("%d\n", changes);
//    for(int i = 0; i < N; ++i)
//    {
//        
//        printf("%c", s[i]);
//        if (p.size() > 0 && p.back()==i)
//        {
//            printf("+");
//            p.pop_back();
//        }
//    }
//    
    return 0;
}

int main(int argc, char* argv[] )
{
    
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif 
    
    
    solve();
    
    
    
    return 0;
}