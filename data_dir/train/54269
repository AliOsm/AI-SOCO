#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.1415926535897
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned

LL l[200100];
LL r[200100];

vector<pair<pair<LL, LL>, int> > islands;
vector<pair<LL, int> > bridges;
set<pair<LL, int> > s;
int ans[200100];

int main() {
#ifdef Fcdkbear
	freopen("in.txt", "r", stdin);
	//freopen("in.txt", "w", stdout);
	double beg = clock();
#endif

	int n, m;
	scanf("%d%d", &n, &m);
	FOR(i, 0, n)
		scanf("%I64d%I64d", &l[i], &r[i]);
	FOR(i, 1, n)
		islands.push_back(mp(mp(l[i] - r[i - 1], r[i] - l[i - 1]), i - 1));
	FOR(i, 0, m)
	{
		LL len;
		scanf("%I64d", &len);
		bridges.push_back(mp(len, i + 1));
	}
	sort(islands.begin(), islands.end());
	sort(bridges.begin(), bridges.end());
	int l = 0;
	MEMS(ans, -1);
	FOR(i, 0, bridges.size())
	{
		while ((l < islands.size()) && (islands[l].first.first <= bridges[i].first)) 
		{
			s.insert(mp(islands[l].first.second, islands[l].second));
			l++;
		}
		while (s.size())
		{
			pair<LL, int> now = *s.begin();
			s.erase(s.begin());
			if (now.first >= bridges[i].first)
			{
				ans[now.second] = bridges[i].second;
				break;
			}
		}
	}
	FOR(i, 0, n - 1)
	{
		if (ans[i] == -1)
		{
			cout << "No" << endl;
			return 0;
		}
	}
	cout << "Yes" << endl;
	FOR(i, 0, n - 1)
	{
		if (i)
			printf(" ");
		printf("%d", ans[i]);
	}
	printf("\n");

#ifdef Fcdkbear
	double end = clock();
	fprintf(stderr, "*** Total time = %.3lf ***\n",
		(end - beg) / CLOCKS_PER_SEC);
#endif
	return 0;
}