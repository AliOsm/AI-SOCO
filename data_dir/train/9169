#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>	
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound          	    
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcount                                                                                        
#define sqr(x) ((x) * (x))
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;                                  
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;
                                       
const double pi = acos(-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};										
const int dy[] = {0, 1, 0, -1, 0};  		
 
int n, m, d[N];
vector <pii> g[N];
set <pii> s;
vector <int> c[N];

inline int mex (int sec, int v) {
	int pos = lb (all (c[v]), sec) - c[v].begin ();
//	cout << "START\n";
//	cout << sec << ' ' << v << endl;
//	for (auto it : c[v]) cout << it << ' ';
//	cout << endl;
	if (!sz (c[v]) || c[v][pos] != sec) return sec;
	int l = pos, r = sz (c[v]) - 1, id = c[v][pos]; 
	while (l <= r) {
		int mid = l + r >> 1;
		if (mid - pos == c[v][mid] - c[v][pos]) l = mid + 1, id = c[v][mid] + 1;
		else r = mid - 1;
	}
//	cout << id + 1 << "END\n";
	return id;
}

inline void boost () {
	ios_base :: sync_with_stdio (NULL);
	cin.tie (NULL), cout.tie (NULL);          
}

inline void Solve () {
	cin >> n >> m;
	while (m --) {
		int x, y, cost;
		cin >> x >> y >> cost;
		g[x].pb ({y, cost});
		g[y].pb ({x, cost});
	}
	for (int i = 1, k, t; i <= n; i ++) {
		cin >> k;
		while (k --) {
			cin >> t;
			c[i].pb (t);
		}
	}
	fill (d + 2, d + n + 1, inf);
	s.in ({d[1], 1});
	while (sz (s)) {
		int v = s.begin () -> S;
		s.erase (s.begin ());
		int cur = mex (d[v], v);
		for (auto to : g[v]) {
			int val = cur + to.S;
			if (d[to.F] > val) {
				s.erase ({d[to.F], to.F});			
				d[to.F] = val;				
				s.in ({d[to.F], to.F});			
			}
		}
	}
	if (d[n] == inf) d[n] = -1;
	cout << d[n];
}                                          
                  
main () {                                       
//	freopen (".in", "r", stdin);    
//	freopen (".out", "w", stdout); 	          
	boost ();
	int tt = 1;
//	cin >> tt;   
	while (tt --) {
		Solve ();
	}                                               
	return 0;      
}         	                                                    