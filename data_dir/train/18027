#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define pp pair<ll, int>
#define ppp pair<pp, int>
#define pp4 pair<pp, pp>
#define pp3 pair<ll, pair<int, int> > 
#define fi first
#define se second
#define N 200010
#define mod 1000000007
#define inf 2000000001
#define esp 1e-9
#define BLOCK 333
#define BITNUM 555
#define BASE 311097
typedef long long ll;
using namespace std;
int n, m;
vector<pp> vertices;

bool cmp(pp x, pp y) {
    return x.fi < y.fi;
}

bool cmp2(pp3 x, pp3 y) {
    return x.fi < y.fi;
}

int lab[N];
vector<pp3> ed;

void uni(int r1, int r2) {
    int x = lab[r1] + lab[r2];
    if (lab[r1] < lab[r2]) {
        lab[r1] = x;
        lab[r2] = r1;
    }
    else {
        lab[r2] = x;
        lab[r1] = r2;
    }
}

int get(int x) {
    if (lab[x] < 0) return x;
    lab[x] = get(lab[x]);
    return lab[x];
}

static int desyncIO = []()
{
    std::ios::sync_with_stdio(false);
    std::cout.tie(nullptr);
    std::cin.tie(nullptr);
    return 0;
}(); 

int main() {
    ios::sync_with_stdio(false);
    memset(lab, -1, sizeof(lab));
    cin >> n >> m;
    for (int i = 1; i <= n; i++) {
        ll x;
        cin >> x;
        vertices.pb(mp(x, i));
    }
    sort(vertices.begin(), vertices.end(), cmp);
    for (int i = 1; i < n; i++) {
        int u = vertices[0].se;
        int v = vertices[i].se;
        ll w = vertices[0].fi + vertices[i].fi;
        ed.pb(mp(w, mp(u, v)));
    }
    
    for (int i = 1; i <= m; i++) {
        int u, v;
        ll w;
        cin >> u >> v >> w;
        ed.pb(mp(w, mp(u, v)));
    }
    
    sort(ed.begin(), ed.end(), cmp2);
    
    ll ret = 0;
    
    for (int i = 0; i < ed.size(); i++) {
        int u = ed[i].se.fi;
        int v = ed[i].se.se;
        ll w = ed[i].fi;
        
        int r1 = get(u);
        int r2 = get(v);
        if (r1 != r2) {
            ret += w;
            uni(r1, r2);
        }
    }
    cout << ret;
	return 0;
}