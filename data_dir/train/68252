#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define FILE "t9"
#define ld long double
#define endl '\n'
#define pii pair <int, int>
#define last fedgfre
#define ull unsigned long long
//#define int long long

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

typedef tree <int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 2e5 + 5;
const ll mod = 1e9 + 7;
const int rx[8] = {1, -1, 0, 0, 1, 1, -1, -1 };
const int ry[8] = {0, 0, 1, -1, 1, -1, 1, -1 };
const ld pi = acos(-1.0);
const int B = 9e3;

const int kx[8] = {1, 1, -1, -1, 2, 2, -2, -2};
const int ky[8] = {2, -2, 2, -2, 1, -1, 1, -1};

mt19937 gen(chrono::high_resolution_clock::now().time_since_epoch().count());

vector <int> g[N];
int a[N];
int sz = 0;

int dfs(int v, int pr, int l, int r, int last){
    if (a[v] < l || a[v] > r) return 0;
    if (a[v] == l && v < last) return 0;
    int ret = 1;
    for (int to : g[v]){
      if (to != pr){
        ret = 1ll * ret * (dfs(to, v, l, r, last) + 1) % mod;
      }
    }
    return ret;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //  srand(time(0));
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //  freopen(FILE".in", "r", stdin);
//   freopen(FILE".out", "w", stdout);
#endif // LOCAL
    int d, n;
    cin >> d >> n;
    for (int i = 0; i < n; i++) cin >> a[i];
    for (int i = 0; i < n - 1; i++){
        int x, y;
        cin >> x >> y;
        g[x - 1].pb(y - 1);
        g[y - 1].pb(x - 1);
    }
    int res = 0;
    for (int i = 0; i < n; i++){
        res += dfs(i, i, a[i], a[i] + d, i);
        res %= mod;
    }
    cout << res;
    return 0;
}
