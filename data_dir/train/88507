#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <cassert>
#include <ctime>


using namespace std;

#ifdef WIN32
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<ll> vll;
typedef vector<vll> vvll;

ll rdtsc() {
    ll tmp;
    asm("rdtsc" : "=A"(tmp));
    return tmp;
}

#define TASKNAME "text"
#define pb push_back
#define mp make_pair
#define EPS (1e-9)
#define INF ((int)1e9)
#define sqr(x) ((x) * (x))         
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

const int MOD = (int)1e9 + 7;

inline void add(int &x, int toadd) {
	if ((x += toadd) >= MOD)
		x -= MOD;
}

inline void mult(int &x, int tomult) {
	x = (ll)x * tomult % MOD;
}

const int maxn = 1001;
int C[maxn][maxn];
int fact[maxn];

int d[2][maxn][4];

void countFs(int n, int *fs) {
	for (int i = 0; i <= n; i++)
		memset(d[0][i], 0, sizeof(d[0][i]));
	d[0][0][2] = 1;
	for (int i = 0; i < n; i++) {
		int curit = (i & 1);
		for (int j = 0; j <= n; j++)
			memset(d[!curit][j], 0, sizeof(d[!curit][j]));
		for (int j = 0; j <= n; j++) {
			for (int mask = 0; mask < 4; mask++) {
				if (!d[curit][j][mask])
					continue;
				if (!(mask >> 1))
					add(d[!curit][j + 1][(mask << 1) & 3], d[curit][j][mask]);
				add(d[!curit][j + 1][((mask << 1) ^ 1) & 3], d[curit][j][mask]);
				add(d[!curit][j][(mask << 1) & 3], d[curit][j][mask]);
			}
		}
	}
	for (int i = 0; i <= n; i++) {
		fs[i] = d[n & 1][i][0];
		add(fs[i], d[n & 1][i][2]);
		mult(fs[i], fact[n - i]);
	}
}

int fs[maxn];
int values[maxn];

int main() {
	srand(rdtsc());
#ifdef DEBUG
	freopen(TASKNAME".in", "r", stdin);
	freopen(TASKNAME".out", "w", stdout);
#endif
	
	memset(C, 0, sizeof(C));
	for (int n = 0; n < maxn; n++) {
		C[n][0] = C[n][n] = 1;
		for (int k = 1; k < n; k++)
			C[n][k] = C[n - 1][k - 1], add(C[n][k], C[n - 1][k]);
	}
	
	fact[0] = 1;
	for (int i = 1; i < maxn; i++)
		fact[i] = fact[i - 1], mult(fact[i], i);
	
	int n, k;
	while (scanf("%d%d", &n, &k) >= 1) {
		countFs(n, fs);
// 		for (int i = 0; i <= n; i++)
// 			eprintf("%d%c", fs[i], " \n"[i == n]);
		int ans = 0;
		memset(values, 0, sizeof(values));
		for (int iter = k; iter <= n; iter++) {
			int coef = 0;
			for (int i = k; i < iter; i++) {
				int tmp = values[i];
				mult(tmp, C[iter][i]);
				add(coef, tmp);
			}
			coef = -coef;
			add(coef, MOD + (iter == k));
// 			eprintf("%d\n", coef);
			values[iter] = coef;
			int tmp = fs[iter];
			mult(tmp, coef);
			add(ans, tmp);
		}
		printf("%d\n", ans);
// 		break;
	}
	return 0;
}
