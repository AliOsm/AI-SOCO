// KALAM
# include<bits/stdc++.h>

using namespace std;

const int N = 0 + 77 , Mod = 1000000006;

struct Matrix {
	int n , m , M[N][N];
	Matrix (int n1 , int m1){
		n = n1 ;m = m1;
		Clear();
	}
	void Clear(){
		Fill(0);
	}
	void Fill(int t){
		for(int i = 0;i < n;++ i)
			for(int j = 0;j < m;++ j)
				M[i][j] = t;
	}
	void Identity(){
		Clear();
		if(n != m){
			cerr << "Cannot Make Identity Matrix Not Compatible\n";return ;
		}
		for(int i = 0;i < n;++ i)
			M[i][i] = 1;
	}
	void Print(){
		cerr << "***\n";
		for(int i = 0;i < n;++ i){
			for(int j = 0;j < m;++ j)
				cerr << M[i][j] << ' ';
			cerr << '\n';
		}
		cerr << "***\n";
	}
	Matrix operator + (const Matrix &T){
		Matrix R = Matrix(n , m);
		R.Clear();
		for(int i = 0;i < n;++ i)
			for(int j = 0;j < m;++ j)
				R.M[i][j] = (M[i][j] + T.M[i][j]) % Mod;
		return R;
	}
	Matrix operator * (const Matrix &T){
		Matrix R = Matrix(n , T.m);R.Clear();
		if(m != T.n){
			cerr << "Matrices not Compatible for multiplying\n";return R;
		}
		for(int i = 0;i < n;++ i)
         for(int k = 0;k < m;++ k)
            for(int j = 0;j < T.m;++ j)
					R.M[i][j] = (R.M[i][j] + M[i][k] * 1ll * T.M[k][j]) % Mod;
		return R;
	}
	Matrix operator ^ (const long long t){
		Matrix res = Matrix(n , m);res.Identity();
		if(t == 0)return res;
		Matrix T = Matrix(n , m);T.Clear();
		for(int i = 0;i < n;++ i)
			for(int j = 0;j < m;++ j)
				T.M[i][j] = M[i][j];
		long long p = t;
		while(p){
			if(p & 1)
				res = res * T;
			p >>= 1;
			T = T * T;
		}
		return res;
	}
};
inline int Pow(int x , long long y) {
   int r = 1;
   for(;y;y >>= 1) {
      if(y & 1)
         r = r * 1ll * x % (1000000007);
      x = x * 1ll * x % (1000000007);
   }
   return r;
}
int f[4] , c;
long long n;
int A = 1;
inline void Calc(int x) {
   Matrix X = Matrix(1 , 3);
   X.M[0][x - 1] = 1;
   Matrix T = Matrix(3 , 3);
   T.M[1][0] = 1;
   T.M[2][1] = 1;
   T.M[2][2] = T.M[1][2] = T.M[0][2] = 1;
   T = T ^ (n - 3);
   X = X * T;
   A = A * 1ll * Pow(f[x] , X.M[0][2]) % (1000000007);
}
int main() {
   scanf("%lld %d %d %d %d" , & n , f + 1 , f + 2 , f + 3 , & c);
   Calc(1);
   Calc(2);
   Calc(3);
   Matrix X = Matrix(1 , 5);
   X.M[0][0] = X.M[0][1] = 2;
   Matrix T = Matrix(5 , 5);
   T.M[0][0] = 1;
   T.M[0][1] = T.M[1][1] = 1;
   T.M[3][2] = 1;
   T.M[4][3] = 1;
   T.M[4][4] = T.M[3][4] = T.M[2][4] = T.M[1][4] = 1;
   T = T ^ (n - 3);
   X = X * T;

   A = A * 1ll * Pow(c , X.M[0][4]) % (1000000007);
   printf("%d\n" , A);
   return 0;
}

