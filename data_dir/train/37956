#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<int, int>, // change type
//        null_type,
//        less<pair<int, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-7);
int dcmp(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

const int MAX_N = 100 + 5; // assign
vector<pair<int, int> > adj[MAX_N];
int n, m;

int visit[MAX_N];
bool dfs(int u, int c)
{
    visit[u] = c;
    for (auto e : adj[u])
    {
        int v = e.first, asphalt = e.second;
        int toC;
        if (asphalt)
            toC = c;
        else
            toC = !c;
        if (visit[v] == -1)
        {
            if (!dfs(v, toC))
                return false;
        }
        else if (visit[v] != toC)
            return false;
    }
    return true;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    cin >> n >> m;
    rep(i,0,m)
    {
        int u, v;
        cin >> u >> v;
        --u;
        --v;
        int c;
        cin >> c;
        adj[u].pb({v, c});
        adj[v].pb({u, c});
    }
    clr(visit, -1);
    for (int i = 0; i < n; ++i)
    {
        if (visit[i] == -1)
        {
            if (!dfs(i, 0))
            {
                cout << "Impossible";
                return 0;
            }
        }
    }
    int cnt = 0;
    rep(i,0,n)
    {
        if (visit[i] == 1)
            cnt++;
    }
    cout << cnt << '\n';
    rep(i,0,n)
    {
        if (visit[i] == 1)
            cout << i + 1 << ' ';
    }
    return 0;
}