#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <numeric>
#include <stack>
#include <deque>
#include <memory.h>


#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define vI vector<int>
#define vvI vector<vector<int>>
#define vLL vector<ll>
#define vS vector<string>
#define fori(i, n) for(int (i)=0; (i)<n; (i)++)
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
#define forI(tmp) for(auto(it)=(tmp).begin();(it)!=(tmp).end();(it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%d", &(a))
#define scc(a) scanf("%I64d", &(a))
#pragma comment (linker, "/STACK:5000000000")
typedef long long ll;

using namespace std;
int sums[200200];
int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif // DEBUG
	int n, k, q;
	scanf("%d%d", &n, &k); sc(q);

	vector<pair<int, int>> ev;
	fori(i, n)
	{
		int l, r;
		scanf("%d%d", &l, &r);
		ev.push_back({ l, -1 });
		ev.push_back({ r, 1 });
	}
	sort(all(ev));
	sums[0] = 0;
	int last = 1;
	int balance = 0;
	for (int i = 0; i < ev.size(); i++)
	{
		if (ev[i].second == -1)
		{
			balance++;
			if (balance == k)
			{
				sums[ev[i].first] = 1;
				
			}
			else if (balance > k)
			{
				for (int j = last; j <= ev[i].first; j++)
					sums[j] = 1;
				
			}
		}
		else
		{
			balance--;
			if (balance == k - 1)
			{
				for (int j = last; j <= ev[i].first; j++)
					sums[j] = 1;
			}
			else if (balance >= k)
			{
				for (int j = last; j <= ev[i].first; j++)
					sums[j] = 1;
			}
		}
		last = ev[i].first;
	}
	for (int i = 2; i < 200200; i++)
	{
		sums[i] += sums[i - 1];
	}
	while (q--)
	{
		int l, r;
		scanf("%d%d", &l, &r);
		printf("%d\n", sums[r] - sums[l - 1]);
	}

	return 0;
}