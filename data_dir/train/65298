/// d.cpp

# include <stdio.h>
# include <bits/stdc++.h>
using namespace std;
const pair < int , int > DD[] = {{1,0},{1,1},{0,1},{-1,1},{-1,0},{-1,-1},{0,-1},{1,-1}};
# define fi cin
# define fo cout
# define x first
# define y second
# define ll long long
# define IOS ios_base :: sync_with_stdio(0);cin.tie(0)
# define p(v) cerr << #v << " = " << v << '\n'
# define p2(v) cerr << #v << " = " << (complex < __typeof(v.x) > (v.x,v.y)) << '\n'
# define vi vector < int >
# define vl vector < ll >
# define pll pair < ll , ll >
# define pii pair < int , int >
# define mp make_pair
# define db long double
# define fail puts("-1")
# define yes puts("YES")
# define no puts("NO")
# define PP puts("Possible")
# define II puts("Impossible")
# define vii vector < pii >
# define vll vector < ll >
# define pb push_back
# define pdd pair < db , db >
template < class T > T smin(T &a,T b) {if (a > b) a = b;return a;}
template < class T > T smax(T &a,T b) {if (a < b) a = b;return a;}
int main(void)
{
    #ifdef CF
    freopen("input","r",stdin);
    #endif // CF
    srand(time(0));
    fo << fixed << setprecision(7);
    cerr << fixed << setprecision(7);
    static int color[1 << 20];
    static int D[1 << 20];
    IOS;
    vii e;
    static vi g[1 << 20];
    int n,k,d;
    fi>>n>>k>>d;
    queue < int > Q;
    for (int i = 1;i <= k;++i)
    {
        int v;
        fi>>v;
        color[v] = i;
        Q.push(v);
    }
    for (int i = 1;i < n;++i)
    {
        int a,b;
        fi>>a>>b;
        e.pb(mp(a,b));
        g[a].pb(b);
        g[b].pb(a);
    }
    while (!Q.empty())
    {
        int node = Q.front();
        Q.pop();
        if (D[node] >= d) continue;
        for (auto it : g[node])
            if (!color[it])
                color[it] = color[node],D[it] = D[node] + 1,Q.push(it);
    }
    vi answer;
    int cnt = 0;
    for (auto it : e)
    {
        ++cnt;
        if (color[it.x] != color[it.y])
            answer.pb(cnt);
    }
    fo << (answer.size()) << '\n';
    for (auto it : answer)
        fo << it << ' ';
    fo << '\n';
    cerr << "Time elapsed :" << clock() * 1000.0 / CLOCKS_PER_SEC << " ms" << '\n';
    return 0;
}
