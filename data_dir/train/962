#include <bits/stdc++.h>
using namespace std;
#define int long long
typedef long long ll;

const int Max = 502, mod = 1e9+7;
int memo[2][Max][Max] = {0};
int n, m;

bool bounds(int i, int j) {
    if(i < 0) return false;
    if(j < 0) return false;
    if(i >= n) return false;
    if(j >= m) return false;
    return true;
}

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m;
    vector<string> arr(n);
    for(int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    if(arr[0][0] != arr[n-1][m-1]) {
        cout << "0\n";
        return 0;
    }
    if(n+m <= 3) {
        cout << "1\n";
        return 0;
    }
    vector<pair<pair<int, int>, pair<int, int>>> nexts;
    nexts.push_back({{0, 1},{0, -1}});
    nexts.push_back({{0, 1},{-1, 0}});
    nexts.push_back({{1, 0},{0, -1}});
    nexts.push_back({{1, 0},{-1, 0}});
    memo[0][0][n-1] = 1;
    int res = 0;//dist, i, i2
    for(int dist = 0; dist <= max(n, m); ++dist) {
        for(int i = 0; i < n; ++i) {
            for(int i2 = i; i2 < n; ++i2) {
                memo[(dist+1)%2][i][i2] = 0;
            }
        }
        for(int i = 0; i < n; ++i) {
            int j = dist-i;
            if(!bounds(i,j)) continue;
            for(int i2 = i; i2 < n; ++i2) {
                int j2 = (m-1-dist)+(n-1-i2);
                if(!bounds(i2,j2)) continue;
                if(j2 < j || j2 >= m) continue;
                //cout << "here: " << i << ' ' << j << ' ' << i2 << ' ' << j2 << '\t';
                //cout << memo[dist][i][i2] << '\n';
                int Dist = (i2-i) + (j2-j);
                if(Dist <= 1) {
                    res += memo[dist%2][i][i2];
                    res %= mod;
                }
                for(auto &p : nexts) {
                    const int nextI = i+p.first.first;
                    const int nextJ = j+p.first.second;
                    const int nextI2 = i2+p.second.first;
                    const int nextJ2 = j2+p.second.second;
                    const int nextDist = nextI+nextJ;
                    //cout << "here: " << dist << ' ' << nextDist << '\n';
                    if(!bounds(nextI, nextJ)) continue;
                    if(!bounds(nextI2, nextJ2)) continue;
                    if(nextI > nextI2) continue;
                    if(nextJ > nextJ2) continue;
                    if(arr[nextI][nextJ] != arr[nextI2][nextJ2]) continue;
                    //cout << "made it: " << nextI << ' ' << nextJ << ' ' << nextI2 << ' ' << nextJ2 << '\t';
                    //cout << "adding: " << memo[dist][i][i2] << '\n';
                    memo[nextDist%2][nextI][nextI2] += memo[dist%2][i][i2];
                    memo[nextDist%2][nextI][nextI2] %= mod;
                }
            }
        }
    }
    cout << res << '\n';
    return 0;
}
































