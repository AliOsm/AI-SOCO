#include <iostream>
#include <bits/stdc++.h>
#include <string>
#include <bitset>
using namespace std;

#define pb push_back
#define ull unsigned long long
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-15
#define ld double
#define MAX 1000000000
#define NIL 0
#define INF 1e15
#define infi 1000000000
#define rd(a) scanf("%d",&a)
#define rd2(a,b) scanf("%d %d",&a,&b)
#define rd3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define rdll(a) scanf("%I64d",&a)
#define sz(a) (int) a.size()
#define lp(i,a,n) for(int i=(a); i<=(n) ; ++i)
#define lpd(i,n,a) for(int i=(n); i>=(a) ; --i)
#define pi acos(-1)
//#define lc (x << 1)
#define rc (x << 1 | 1)
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define angle(a)                (atan2((a).imag(), (a).real()))
#define X real()
#define Y imag()
#define vec(a,b)                ((b)-(a))
#define vvi vector<vector<int>>
#define clr(a,b) memset(a,b,sizeof a)
#define all(a) a.begin(), a.end()


#define mod1 1000500001ll
#define mod2 1000300001ll
#define base1 137ll
#define base2 31ll

typedef complex<double>CX;
typedef pair<int,int>ii;
typedef pair<ii,ll>tri;
typedef pair<vector<int>,int>vii;
typedef pair<int, int> pii;
typedef pair<ii,ii> line;
typedef pair<double,double>point;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int,pair<int,int>>edge;


//const int N= 100005;
//const int M=22;
//
//ll mod=1e9 + 7;

ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u')return 1;return 0;}
ll extended_euclidean(ll a,ll b,ll &x,ll &y){if(b==0){x=1;y=0;return a;}ll g = extended_euclidean(b,a%b,y,x);y -= (a/b)*x;return g;}
ll power(ll base,ll p,ll mod){if(p==1)return base;if(!p)return 1ll;ll ret=power(base,p/2,mod);ret*=ret;ret%=mod;if(p&1)ret*=base;return ret%mod;}
float Trianglearea(int x1, int y1, int x2, int y2, int x3, int y3) {return abs((x1 * (y2 - y3) + x2 * (y3 - y1) +  x3 * (y1 - y2)) / 2.0);}
ii operator + (ii a,ii b){ii ret = a;ret.F += b.F;ret.S += b.S;return ret;}


/// We shallnot fail you master Khaled_______________________________________________


/*
int d,s;


int dp[5005][505];
string str;
bool solve(int sum, int m) {
    if(sum < 0) return false;
    if(!sum) return true;

    int &ret = dp[sum][m];
    if(~ret) return ret;



}
*/


const int N = 1000002;



bool is_valid(int a,int b,int m){
       if(a*2<m)return 0;
       if(b*2<m)return 0;
       return 1;
}
int main(){

//    freopen("test.in", "r" , stdin);

    int n;
    rd(n);

    priority_queue<int>q[5];
    ll sum = 0;
    int a = 0 , b = 0 , m = 0;
    lp(i,1,n){
       char s[5];
       int cost;
       scanf("%s %d",s,&cost);

       int id=(s[0]-'0') +  (s[1]-'0')*2;

       if(id == 3){
        a++;
        b++;
        m++;
        sum += cost;
       }

       q[id].push(cost);
    }

    while(q[1].size() && q[2].size()){
        sum += q[1].top();
        sum += q[2].top();
        q[1].pop();
        q[2].pop();
        a++;
        b++;
        m+=2;
    }



    lp(i,0,n-1){
       if(q[0].empty() && q[1].empty() &&q[2].empty())break;

       int x = 0 , y = 0 ,z = 0;

       if(q[0].size()) x = q[0].top();
       if(q[1].size()) y = q[1].top();
       if(q[2].size()) z = q[2].top();


       vector<ii>options;
       options.pb(ii(x,0));
       options.pb(ii(y,1));
       options.pb(ii(z,2));

       sort(options.rbegin(),options.rend());

       for(ii cur : options){
            int add_a = (cur.S == 1);
            int add_b = (cur.S == 2);
            if(is_valid(a+add_a,b+add_b,m+1) && cur.F){
                a += add_a;
                b += add_b;
                m++;
                sum += cur.F;
                q[cur.S].pop();
                break;
            }
       }

    }

    cout<<sum;

    return 0;
}




