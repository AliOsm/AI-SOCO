#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<int, int>, // change type
//        null_type,
//        less<pair<int, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-8);

const int MAX_N = 200005;
int freq[MAX_N];
struct out{
    int a, b, c;
};
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    int n;
    cin >> n;
    vector<int> a(n);
    int mxFreq = INT_MIN, mxFreqIdx;
    rep(i,0,n)
    {
        cin >> a[i];
        freq[a[i]]++;
        if (freq[a[i]] > mxFreq)
        {
            mxFreq = freq[a[i]];
            mxFreqIdx = i;
        }
    }
    vector<out> pr;
    int x = a[mxFreqIdx];
    for (int i = mxFreqIdx - 1; i >= 0; --i)
    {
        if (a[i] > x)
        {
            pr.push_back({2, i, i + 1});
        }
        else if (a[i] < x)
        {
            pr.push_back({1, i, i + 1});
        }
    }

    for (int i = mxFreqIdx + 1; i < n; ++i)
    {
        if (a[i] > x)
        {
            pr.push_back({2, i, i - 1});
        }
        else if (a[i] < x)
        {
            pr.push_back({1, i, i - 1});
        }
    }
    cout << sz(pr) << '\n';
    for (auto item : pr)
    {
        cout << item.a << ' ' << item.b + 1 << ' ' << item.c + 1 << '\n';
    }
    return  0;

}