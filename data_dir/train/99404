#include<bits/stdc++.h>
#include<ext/numeric>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define UNVISITED -1
#define CLR(a,v) memset(a,v,sizeof a)

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;

int dx[] = { 0, 0, 1, -1, -1, -1, 1, 1 };
int dy[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

const int MAX = 1e5 + 5, BLOCK = 316;
int a[MAX];
struct query {
	int l, r, i;
	query() :
			l(0), r(0), i(0) {
	}
	bool operator<(query q) {
		if (l / BLOCK == q.l / BLOCK)
			return r < q.r;
		return l / BLOCK < q.l / BLOCK;
	}
} q[MAX];
int out[MAX];

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "rt", stdin);
//	freopen("out.txt", "wt", stdout);
#endif
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; ++i)
		scanf("%d", &a[i]);
	for (int i = 0; i < m; ++i) {
		scanf("%d%d", &q[i].l, &q[i].r);
		--q[i].l,--q[i].r;
		q[i].i = i;
	}
	sort(q, q + m);
	unordered_map<int, int> mp;
	int ans = 0;
	for (int i = q[0].l; i <= q[0].r; ++i) {
		++mp[a[i]];
		if (mp[a[i]] == a[i])
			++ans;
		else if (mp[a[i]] == a[i]+1)
			--ans;
	}
	out[q[0].i] = ans;
	int cl = q[0].l, cr = q[0].r;
	for (int i = 1; i < m; ++i) {
		while (cl < q[i].l) {
			--mp[a[cl]];
			if (mp[a[cl]] == a[cl] - 1)
				--ans;
			else if (mp[a[cl]] == a[cl])
				++ans;
			++cl;
		}
		while (cl > q[i].l) {
			--cl;
			++mp[a[cl]];
			if (mp[a[cl]] == a[cl] + 1)
				--ans;
			else if (mp[a[cl]] == a[cl])
				++ans;
		}
		while (cr < q[i].r) {
			++cr;
			++mp[a[cr]];
			if (mp[a[cr]] == a[cr] + 1)
				--ans;
			else if (mp[a[cr]] == a[cr])
				++ans;
		}
		while (cr > q[i].r) {
			--mp[a[cr]];
			if (mp[a[cr]] == a[cr] - 1)
				--ans;
			else if (mp[a[cr]] == a[cr])
				++ans;
			--cr;
		}
		out[q[i].i] = ans;
	}
	for (int i = 0; i < m; ++i)
		printf("%d\n", out[i]);
}

