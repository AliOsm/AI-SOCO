#include <cstdio>
#include <utility>
#include <iostream>
#include <set>
#include <vector>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <numeric>
#include <cassert>
#include <cstring>
#include <functional>
#include <sstream>
#include <map>

using namespace std;

typedef long long Long;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;

typedef long double Double;

//struct Path {
//  
//};
//
//int dfs()


int main() {  
  
  int N, M;
  cin >> N >> M;
  vector<string> V(N);
  vector<string> S = {"###", "#.#", "###"};
  for (string &s : V) cin >> s;
  for (int i = 0; i < N; ++i) {
    for (int j = 0; j < M; ++j) {
      if (V[i][j] == '.') continue;
      bool ok = 0;
      for (int a = 0; a < 3 && !ok; ++a) {
        for (int b = 0; b < 3 && !ok; ++b) {
          if (i < a)continue;
          if (j < b) continue;
          if (i+(3-a) > N) continue;
          if (j+(3-b) > M) continue;
          if (S[a][b] == '.') continue;
          bool m = 1;
          for (int c = 0; c < 3 && m; ++c) {
            for (int d = 0; d < 3 && m; ++d) {
              if (V[i-a+c][j-b+d] == '.' && S[c][d] == '#') {
                m = 0;
              }
            }
          }
          if (m) {
            ok = 1;
          }
          
        }
      }
      if (!ok) {
//        cout << i << " " << j << endl;
        cout << "NO" << endl;
        return 0;
      }
      
    }
  }
  cout << "YES" << endl;
  
}




string A;
int M;
Long dp(int ia, int ib, int aMoveAloneCount) {
  if (aMoveAloneCount > 1) return 0;
  if (abs(ia - ib) > 1) return 0;
  if (ia == A.size() && ib == A.size()) {
    return aMoveAloneCount == 1;
  }
  Long w = 0;
  if (ib < A.size()) {
    for (char c = 'a'; c < 'a' + M; ++c) {
      if (ia < A.size() && c == A[ia]) {
        // move together
        w += dp(ia+1, ib+1, aMoveAloneCount);
      } else {
        if (ia+1 < A.size() && A[ia+1] == c) {
          Long t = dp(ia+2, ib+1, aMoveAloneCount + 1);
          if (aMoveAloneCount == 0) {
            if (ia == ib) {
//              t = M;
            } else {
              t = 1;
            }
          }
          if (t > 0) {
            cout << ia << " " << ib << "    " << t << endl;
          }
          w += t;
        } 
        {
          Long t = dp(ia, ib+1, aMoveAloneCount);
          w += t;
        }
        if (ia == ib && ia+1 < A.size() && A[ia+1] == c && aMoveAloneCount == 0) {
//          w--;
        }
      }
    }
  } else {
    w += dp(ia+1, ib, aMoveAloneCount+1);
  }
  return w;
}
/*

5 8
1 2 6 7 10
1 1 1 1 2
1 1
1 5
1 3
3 5
-3 5
-1 10
1 4
2 5



 */
