/*
ye mera template hai
apna khud likho bc :P
*/

/*
Author : Sarvagya Agarwal
*/

#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define rep(i,x,y) for (__typeof(x) i=x;i<=y;i++)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

int power(int a , int b)
{
    int res = 1 ;
    while(b)
    {
        if(b%2) {
            res = (res * a)%mod ;
        }
        b/=2 ;
        a = (a*a)%mod ;
    }
    return res ;
}

//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
		cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
		const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
int arr[4][7] ;
int32_t main()
{
    fast;
    string s ;
    cin >> s ;
    int n = 0 ;
    for(int i = 0 ; i <= (int)(s.size()-2) ; ++i) {
        n *= 10 ;
        n += s[i]-'0' ;
    }
    int block = (n-1)/4 ;
    int entry_time = 16*block ;
    int MOD = n % 4 ;
    if(MOD&1) {
        int x = entry_time+1 ;
        for(int i = 6 ; i > 3 ; --i) {
            arr[MOD][i] = x++;
        }
        for(int i = 1 ; i <= 3 ; ++i) {
            arr[MOD][i] = x++ ;
        }
    }
    else {
        int x = entry_time+8 ;
        for(int i = 6 ; i > 3 ; --i) {
            arr[MOD][i] = x++;
        }
        for(int i = 1 ; i <= 3 ; ++i) {
            arr[MOD][i] = x++ ;
        }
    }
    int i = s[s.size()-1]-'a' ;
    i += 1 ;
    cout << arr[MOD][i] << '\n' ;
    return 0;
}
