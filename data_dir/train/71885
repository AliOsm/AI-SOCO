#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <cassert>
#include <ctime>


using namespace std;

#ifdef WIN32
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<ll> vll;
typedef vector<vll> vvll;

ll rdtsc() {
    ll tmp;
    asm("rdtsc" : "=A"(tmp));
    return tmp;
}

inline int myrand() {
	return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
	return myrand() % x;
}

#define TASKNAME "text"
#define pb push_back
#define mp make_pair
#define EPS (1e-9)
#define INF ((int)1e9)
#define sqr(x) ((x) * (x))         
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

const int maxn = (int)1e5 + 10;
int values[maxn];

int info[maxn][3];
long long qs[maxn];

bool solve() {
	int m;
	if (scanf("%d", &m) < 1)
		return 0;
	for (int i = 0; i < m; ++i) {
		scanf("%d", &info[i][0]);
		info[i][2] = 1;
		for (int j = 0; j < info[i][0]; ++j)
			scanf("%d", &info[i][1 + j]);
	}

	{
		int pos = 0;
		for (int i = 0; i < m && pos < maxn; ++i) {
			if (info[i][0] == 1)
				values[pos++] = info[i][1];
			else {
				assert(pos >= info[i][1]);
				for (int iter = 0; iter < info[i][2] && pos < maxn; ++iter) {
					for (int from = 0; from < info[i][1] && pos < maxn; ++from)
						values[pos++] = values[from];
				}
			}	
		}
	}

	int cnt;
	scanf("%d", &cnt);
	for (int i = 0; i < cnt; ++i)
		scanf("%I64d", &qs[i]);

	long long pos = 1;
	int currentId = 0;

	for (int know = 0; know < cnt;) {
		if (info[currentId][2] == 0)
			++currentId;
		assert(currentId < m);

		int len = ((info[currentId][0] == 1) ? 1 : info[currentId][1]);
		long long nextPos = pos + (long long)info[currentId][2] * len;
		if (nextPos <= qs[know]) {
			pos = nextPos;
			info[currentId][2] = 0;
			continue;
		}
		long long times = qs[know] - pos;
		times /= len;
		pos += len * times;
		info[currentId][2] -= times;
		//eprintf("%I64d %d\n", pos, know);
		int ans = (info[currentId][0] == 1) ? info[currentId][1] : values[qs[know] - pos];
		printf("%d%c", ans, " \n"[know == cnt - 1]);
		++know; 	
	}

	return 1;
}

int main() {
	srand(rdtsc());
#ifdef DEBUG
	freopen(TASKNAME".in", "r", stdin);
	freopen(TASKNAME".out", "w", stdout);
#endif
	
	while (1) {
		if (!solve())
			break;
		#ifdef DEBUG
			eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
		#endif
	}
	return 0;
}
