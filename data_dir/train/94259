#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
#define YESNO(cond) cout << ((cond) ? "Yes" : "No") << endl;
#define UMAX(left, right) left = max(left, right);
#define UMIN(left, right) left = min(left, right);
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void yes() { cout << "Yes" << endl;}
void no() { cout << "No" << endl;}
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;
S FAIL { FAIL () { cout << "CHANGE!!!" << endl;}};

int win(int x, int y)
{
    vector <vector <int>> res = {{0, 0, 1},
                                 {1, 0, 0},
                                 {0, 1, 0}};
    return res[x][y];
}

int main()
{
    LL k, a, b;
    cin >> k >> a >> b;
    --a, --b;
    vector <vector <int>> al(3, vector <int> (3));
    GETM(al, 3, 3);
    vector <vector <int>> bo(3, vector <int> (3));
    GETM(bo, 3, 3);
    FOR (i, 0, 3) {
        FOR (j, 0, 3) {
            --al[i][j];
            --bo[i][j];
        }
    }
    vector <vector <vector <vector <int>>>> used(4, vector <vector <vector <int>>> (4, vector <vector <int>> (3, vector <int> (3, -1)))); //al_prev, bo_prev, al_cur, bo_cur
    vector <LL> res_a(1);
    vector <LL> res_b(1);
    int prev_a = 3;
    int prev_b = 3;

    for (LL i = 0; i < k; ++i) {
         if (used[prev_a][prev_b][a][b] != -1) {
            int old_pos = used[prev_a][prev_b][a][b];
            LL div = (k - i) / (i - old_pos);
            LL mod = (k - i) % (i - old_pos);
            LL res_a1 = res_a.back() + div * (res_a.back() - res_a[old_pos]) + res_a[old_pos + mod] - res_a[old_pos];
            LL res_b1 = res_b.back() + div * (res_b.back() - res_b[old_pos]) + res_b[old_pos + mod] - res_b[old_pos];
            cout << res_a1 << " " << res_b1;
            return 0;
         }
         used[prev_a][prev_b][a][b] = i;
         prev_a = a;
         prev_b = b;
         res_a.push_back(res_a.back() + win(a, b));
         res_b.push_back(res_b.back() + win(b, a));
         a = al[prev_a][prev_b];
         b = bo[prev_a][prev_b];
    }
    cout << res_a.back() << " " << res_b.back();
    return 0;
}
