#include <bits/stdc++.h>
using namespace std;


#define sc(a)           scanf("%d", &a)
#define sc2(a, b)       scanf("%d%d", &a, &b)
#define sc3(a, b, c)    scanf("%d%d%d", &a, &b, &c)
#define pr(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); puts("");}



vector<string> split(const string& s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c))
		v.emplace_back(x);
	return move(v);
}
void err(vector<string>::iterator it) {}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr << a << ' ';
	err(++it, args...);
}



#define MP              make_pair
#define sz              size()
#define pb              push_back
#define mem(a, b)       memset((a), (b), sizeof(a))
#define x first
#define y second


typedef pair<int , int > pii;
typedef map<int , int > mii;
typedef vector<int > vi;
typedef long long LL;



static constexpr int inf = std::numeric_limits<int >::max();
const int M=100010;

struct BIT {
    vector< int >tree;
    void update(int idx, int val)
    {
        while (idx<tree.size())
        {
            tree[idx]+=val;
            idx+= idx&(-idx);
        }
    }
    int query(int idx)
    {
        int sum=0;
        while (idx>0)
        {
            sum+= tree[idx];
            idx-= idx&(-idx);
        }
        return sum;
    }
};
struct data {
    int a, t, x;
    data (int p=0, int q=0, int r=0) {a=p; t=q; x=r;}
};

data q[M];
BIT bit[M];
vi tms[M];
map<int, int>num;
vi::iterator it;

int main()
{
    //freopen("in.txt", "r", stdin);

    int i, j, k, n, a, b, c, id=0;

    sc(n);
    for (i=0; i<n; i++)
    {
        sc3(a, b, c);
        q[i]=data(a, b, c);

        if (num[c]==0) num[c]=++id;
    }
    id++;

    for (i=0; i<n; i++)
    {
        q[i].x=num[q[i].x];
        tms[q[i].x].pb(q[i].t);
    }

    for (i=0; i<id; i++) sort(tms[i].begin(), tms[i].end());
    for (i=0; i<id; i++) bit[i].tree.resize(tms[i].sz+5);

    for (i=0; i<n; i++)
    {
        int x=q[i].x;
        int pos=lower_bound(tms[x].begin(), tms[x].end(), q[i].t)-tms[x].begin()+1;

        if (q[i].a==1)
        {
            bit[x].update(pos, 1);
        }
        else if (q[i].a==2)
        {
            bit[x].update(pos, -1);
        }
        else
        {
            printf("%d\n", bit[x].query(pos));
        }
    }

    return 0;
}