#ifdef _MSC_VER
#define _CRT_SECURE_NO_DEPRECATE
#pragma comment(linker, "/STACK:66777216")
#else
#pragma GCC optimize("O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#endif
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <iostream>
#include <iterator>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <sstream>
#include <fstream>
#include <ctime>
#include <cstring>
#include <array>
#include <chrono>
using namespace std;
#define pb push_back
#define ppb pop_back
#define pi 3.1415926535897932384626433832795028841971
#define mp make_pair
#define x first
#define y second
#define pii pair<int,int>
#define pdd pair<double,double>
#define INF 1000000000
#define FOR(i,a,b) for (int _n(b), i(a); i <= _n; i++)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;i--)
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))
#define rep(i,n) FOR(i,1,(n))
#define rept(i,n) FOR(i,0,(n)-1)
#define L(s) (int)((s).size())
#define C(a) memset((a),0,sizeof(a))
#define VI vector <int>
#define ll long long

// SSE2 optimized bitset
template<int N>
class Bitset{
public:
	Bitset() : data(arr_.data()) {
		reset();
	}
	Bitset<N>& operator=(const Bitset<N>& other) {
		arr_ = other.arr_;
		data = arr_.data();
		return *this;
	}
	Bitset<N>(const Bitset<N>& other) {
		arr_ = other.arr_;
		data = arr_.data();
	}
	Bitset<N>& operator=(Bitset<N>&& other) {
		arr_ = std::move(other.arr_);
		data = arr_.data();
		return *this;
	}
	Bitset<N>(Bitset<N>&& other) {
		arr_ = std::move(other.arr_);
		data = arr_.data();
	}

	inline void set() {
		memset(data, 255, n * sizeof(unsigned));
	}
	inline void set(int pos) {
		data[pos >> 5] |= 1u << (pos & 31);
	}
	inline void reset() {
		memset(data, 0, n * sizeof(unsigned));
	}
	inline void reset(int pos) {
		data[pos >> 5] &= ~(1u << (pos & 31));
	}
	inline void flip(int pos) {
		data[pos >> 5] ^= 1u << (pos & 31);
	}
	inline bool test(int pos) const {
		return (data[pos >> 5] >> (pos & 31)) & 1;
	}
	inline Bitset<N>& operator |=(const Bitset<N>& other) {
		int i = 0;
		for (; i + 4 < n; i += 4) {
			__m128i A = _mm_loadu_si128((__m128i*)(data + i));
			__m128i B = _mm_loadu_si128((__m128i*)(other.data + i));
			__m128i C = _mm_or_si128(A, B);
			_mm_storeu_si128((__m128i*)(data + i), C);
		}
		for (; i < n; ++i) {
			data[i] |= other.data[i];
		}
		return *this;
	}
	inline Bitset<N> operator |(const Bitset<N>& other) const {
		Bitset<N> res;
		int i = 0;
		for (; i + 4 < n; i += 4) {
			__m128i A = _mm_loadu_si128((__m128i*)(data + i));
			__m128i B = _mm_loadu_si128((__m128i*)(other.data + i));
			__m128i C = _mm_or_si128(A, B);
			_mm_storeu_si128((__m128i*)(res.data + i), C);
		}
		for (; i < n; ++i) {
			res.data[i] = data[i] | other.data[i];
		}
		return res;
	}
	inline Bitset<N>& operator &=(const Bitset<N>& other) {
		int i = 0;
		for (; i + 4 < n; i += 4) {
			__m128i A = _mm_loadu_si128((__m128i*)(data + i));
			__m128i B = _mm_loadu_si128((__m128i*)(other.data + i));
			__m128i C = _mm_and_si128(A, B);
			_mm_storeu_si128((__m128i*)(data + i), C);
		}
		for (; i < n; ++i) {
			data[i] &= other.data[i];
		}
		return *this;
	}
	inline Bitset<N> operator &(const Bitset<N>& other) const {
		Bitset<N> res;
		int i = 0;
		for (; i + 4 < n; i += 4) {
			__m128i A = _mm_loadu_si128((__m128i*)(data + i));
			__m128i B = _mm_loadu_si128((__m128i*)(other.data + i));
			__m128i C = _mm_and_si128(A, B);
			_mm_storeu_si128((__m128i*)(res.data + i), C);
		}
		for (; i < n; ++i) {
			res.data[i] = data[i] & other.data[i];
		}
		return res;
	}
	inline Bitset<N>& operator ^=(const Bitset<N>& other) {
		int i = 0;
		for (; i + 4 < n; i += 4) {
			__m128i A = _mm_loadu_si128((__m128i*)(data + i));
			__m128i B = _mm_loadu_si128((__m128i*)(other.data + i));
			__m128i C = _mm_xor_si128(A, B);
			_mm_storeu_si128((__m128i*)(data + i), C);
		}
		for (; i < n; ++i) {
			data[i] ^= other.data[i];
		}
		return *this;
	}
	inline Bitset<N> operator ^(const Bitset<N>& other) const {
		Bitset<N> res;
		int i = 0;
		for (; i + 4 < n; i += 4) {
			__m128i A = _mm_loadu_si128((__m128i*)(data + i));
			__m128i B = _mm_loadu_si128((__m128i*)(other.data + i));
			__m128i C = _mm_xor_si128(A, B);
			_mm_storeu_si128((__m128i*)(res.data + i), C);
		}
		for (; i < n; ++i) {
			res.data[i] = data[i] ^ other.data[i];
		}
		return res;
	}

	inline Bitset<N>& operator <<=(int shift) {
		const int full = shift >> 5;
		if (full >= n) {
			reset();
			return *this;
		}
		if (full) {
			memmove(data + full, data, (n - full) * sizeof(unsigned));
			memset(data, 0, full * sizeof(unsigned));
		}

		shift &= 31;
		if (shift) {
			int i = n - 1;
			for (; i >= 4; i -= 4) {
				__m128i P = _mm_loadu_si128((__m128i*)(data + i - 4));
				__m128i A = _mm_loadu_si128((__m128i*)(data + i - 3));
				P = _mm_srli_epi32(P, 32 - shift);
				A = _mm_slli_epi32(A, shift);
				A = _mm_or_si128(A, P);
				_mm_storeu_si128((__m128i*)(data + i - 3), A);
			}
			for (; i >= 1; --i) {
				data[i] = (data[i] << shift) | (data[i - 1] >> (32 - shift));
			}
			data[0] <<= shift;
		}

		return *this;
	}
	inline Bitset<N> operator <<(int shift) const {
		Bitset<N> res;
		const int full = shift >> 5;
		if (full >= n) {
			return res;
		}
		if (full) {
			memmove(res.data + full, data, (n - full) * sizeof(unsigned));
			memset(res.data, 0, full * sizeof(unsigned));
			return res <<= shift & 31;
		}

		shift &= 31;
		if (shift) {
			int i = n - 1;
			for (; i >= 4; i -= 4) {
				__m128i P = _mm_loadu_si128((__m128i*)(data + i - 4));
				__m128i A = _mm_loadu_si128((__m128i*)(data + i - 3));
				P = _mm_srli_epi32(P, 32 - shift);
				A = _mm_slli_epi32(A, shift);
				A = _mm_or_si128(A, P);
				_mm_storeu_si128((__m128i*)(res.data + i - 3), A);
			}
			for (; i >= 1; --i) {
				res.data[i] = (data[i] << shift) | (data[i - 1] >> (32 - shift));
			}
			res.data[0] = data[0] << shift;
		}
		else {
			memmove(res.data, data, n * sizeof(unsigned));
		}

		return res;
	}
	inline Bitset<N>& operator >>=(int shift) {
		const int full = shift >> 5;
		if (full >= n) {
			reset();
			return *this;
		}
		if (full) {
			memmove(data, data + full, (n - full) * sizeof(unsigned));
			memset(data + n - full, 0, full * sizeof(unsigned));
		}

		shift &= 31;
		if (shift) {
			const unsigned u = (1u << shift) - 1;
			int i = 0;
			const __m128i U = _mm_set_epi32(u, u, u, u);
			for (; i + 4 < n - 1; i += 4) {
				__m128i NX = _mm_loadu_si128((__m128i*)(data + i + 1));
				__m128i A = _mm_loadu_si128((__m128i*)(data + i));
				NX = _mm_and_si128(NX, U);
				NX = _mm_slli_epi32(NX, 32 - shift);
				A = _mm_srli_epi32(A, shift);
				A = _mm_or_si128(A, NX);
				_mm_storeu_si128((__m128i*)(data + i), A);
			}
			for (; i < n - 1; ++i) {
				data[i] = (data[i] >> shift) | ((data[i + 1] & u) << (32 - shift));
			}
			data[n - 1] >>= shift;
		}

		return *this;
	}
	inline Bitset<N> operator >>(int shift) const {
		Bitset<N> res;
		const int full = shift >> 5;
		if (full >= n) {
			return res;
		}
		if (full) {
			memmove(res.data, data + full, (n - full) * sizeof(unsigned));
			memset(res.data + n - full, 0, full * sizeof(unsigned));
			return res >>= shift & 31;
		}

		shift &= 31;
		if (shift) {
			const unsigned u = (1u << shift) - 1;
			int i = 0;
			const __m128i U = _mm_set_epi32(u, u, u, u);
			for (; i + 4 < n - 1; i += 4) {
				__m128i NX = _mm_loadu_si128((__m128i*)(data + i + 1));
				__m128i A = _mm_loadu_si128((__m128i*)(data + i));
				NX = _mm_and_si128(NX, U);
				NX = _mm_slli_epi32(NX, 32 - shift);
				A = _mm_srli_epi32(A, shift);
				A = _mm_or_si128(A, NX);
				_mm_storeu_si128((__m128i*)(res.data + i), A);
			}
			for (; i < n - 1; ++i) {
				res.data[i] = (data[i] >> shift) | ((data[i + 1] & u) << (32 - shift));
			}
			res.data[n - 1] = data[n - 1] >> shift;
		}
		else {
			memmove(res.data, data, n * sizeof(unsigned));
		}

		return res;
	}

	inline int count() const {
		return count(0, N);
	}
	// Counts the number of bits in the range [l..r)
	inline int count(int l, int r) const {
		if ((l >> 5) == (r >> 5)) {
			return _popcnt((data[l >> 5] >> (l & 31)) & ((1u << ((r - l))) - 1));
		}
		int ans = 0;
		if (l & 31) {
			ans += _popcnt(data[l >> 5] >> (l & 31));
			l += 32 - (l & 31);
		}
		l >>= 5;
		if (r & 31) {
			ans += _popcnt(data[r >> 5] & ((1u << (r & 31)) - 1));
			r -= r & 31;
		}
		r >>= 5;
		for (; l + 16 < r; l += 16) {
			ans += _popcnt(data[l]);
			ans += _popcnt(data[l + 1]);
			ans += _popcnt(data[l + 2]);
			ans += _popcnt(data[l + 3]);
			ans += _popcnt(data[l + 4]);
			ans += _popcnt(data[l + 5]);
			ans += _popcnt(data[l + 6]);
			ans += _popcnt(data[l + 7]);
			ans += _popcnt(data[l + 8]);
			ans += _popcnt(data[l + 9]);
			ans += _popcnt(data[l + 10]);
			ans += _popcnt(data[l + 11]);
			ans += _popcnt(data[l + 12]);
			ans += _popcnt(data[l + 13]);
			ans += _popcnt(data[l + 14]);
			ans += _popcnt(data[l + 15]);
		}
		for (; l + 8 < r; l += 8) {
			ans += _popcnt(data[l]);
			ans += _popcnt(data[l + 1]);
			ans += _popcnt(data[l + 2]);
			ans += _popcnt(data[l + 3]);
			ans += _popcnt(data[l + 4]);
			ans += _popcnt(data[l + 5]);
			ans += _popcnt(data[l + 6]);
			ans += _popcnt(data[l + 7]);
		}
		for (; l + 4 < r; l += 4) {
			ans += _popcnt(data[l]);
			ans += _popcnt(data[l + 1]);
			ans += _popcnt(data[l + 2]);
			ans += _popcnt(data[l + 3]);
		}
		for (; l < r; ++l) {
			ans += _popcnt(data[l]);
		}
		return ans;
	}

	inline bool none() const {
		return none(0, N);
	}

	inline bool none(int l, int r) const {
		if ((l >> 5) == (r >> 5)) {
			return ((data[l >> 5] >> (l & 31)) & ((1u << ((r - l))) - 1)) == 0;
		}
		if (l & 31) {
			if (data[l >> 5] >> (l & 31)) return 0;
			l += 32 - (l & 31);
		}
		l >>= 5;
		if (r & 31) {
			if (data[r >> 5] & ((1u << (r & 31)) - 1)) return 0;
			r -= r & 31;
		}
		r >>= 5;
		const __m128i zero = _mm_setzero_si128();
		for (; l + 4 < r; l += 4) {
			__m128i A = _mm_loadu_si128((__m128i*)(data + l));
			if (_mm_movemask_epi8(_mm_cmpeq_epi32(A, zero)) != 0xffff) return false;
		}
		for (; l < r; ++l) {
			if (data[l]) return false;
		}
		return true;
	}
	inline bool any() const {
		return !none();
	}
	inline bool any(int l, int r) const {
		return !none(l, r);
	}
	inline int ctz() const {
		return ctz(0, N);
	}
	inline int ctz(int l, int r) const {
		if ((l >> 5) == (r >> 5)) {
			int ans = _ctz((data[l >> 5] >> (l & 31)) & ((1u << ((r - l))) - 1));
			if (ans > r - l) ans = r - l;
			return ans;
		}
		int ans = 0;
		if (l & 31) {
			unsigned t = data[l >> 5] >> (l & 31);
			if (t) return _ctz(t);
			ans += 32 - (l & 31);
			l += 32 - (l & 31);
		}
		l >>= 5;
		int rr = r & 31;
		r >>= 5;
		const __m128i zero = _mm_setzero_si128();
		for (; l + 4 < r; l += 4) {
			__m128i A = _mm_loadu_si128((__m128i*)(data + l));
			if (_mm_movemask_epi8(_mm_cmpeq_epi32(A, zero)) != 0xffff) {
				break;
			}
			ans += 128;
		}
		for (; l < r; ++l) {
			if (data[l]) {
				ans += _ctz(data[l]);
				return ans;
			}
			ans += 32;
		}

		if (rr) {
			int cur = _ctz(data[r] & ((1u << rr) - 1));
			if (cur > rr) ans += rr; else
				ans += cur;
		}
		return ans;
	}

	inline int clz() const {
		return clz(0, N);
	}
	inline int clz(int l, int r) const {
		if ((l >> 5) == (r >> 5)) {
			int ans = _clz((data[l >> 5] >> (l & 31)) & ((1u << ((r - l))) - 1)) - 32 + r - l;
			return ans;
		}
		int ans = 0;
		if (r & 31) {
			int t = data[r >> 5] & ((1u << (r & 31)) - 1);
			if (t) return _clz(t) - 32 + (r & 31);
			ans += r & 31;
			r -= r & 31;
		}
		r >>= 5;
		int cl = l & 31;
		if (cl) {
			l += 32 - cl;
		}
		l >>= 5;
		const __m128i zero = _mm_setzero_si128();
		for (; r - 4 >= l; r -= 4) {
			__m128i A = _mm_loadu_si128((__m128i*)(data + r - 4));
			if (_mm_movemask_epi8(_mm_cmpeq_epi32(A, zero)) != 0xffff) {
				break;
			}
			ans += 128;
		}
		for (; r - 1 >= l; --r) {
			if (data[r - 1]) {
				ans += _clz(data[r - 1]);
				return ans;
			}
			ans += 32;
		}
		if (cl) {
			int cur = _clz(data[l - 1]);
			if (cur > 32 - cl) ans += 32 - cl; else
				ans += cur;
		}
		return ans;
	}

	inline bool operator ==(const Bitset<N>& other) const {
		int i = 0;
		for (; i + 4 < n; i += 4) {
			__m128i A = _mm_loadu_si128((__m128i*)(data + i));
			__m128i B = _mm_loadu_si128((__m128i*)(other.data + i));
			if (_mm_movemask_epi8(_mm_cmpeq_epi32(A, B)) != 0xffff) {
				return false;
			}
		}
		for (; i < n; ++i) {
			if (data[i] != other.data[i]) {
				return false;
			}
		}
		return true;
	}

	inline bool operator <(const Bitset<N>& other) const {
		int i = 0;
		for (; i + 4 < n; i += 4) {
			__m128i A = _mm_loadu_si128((__m128i*)(data + i));
			__m128i B = _mm_loadu_si128((__m128i*)(other.data + i));
			if (_mm_movemask_epi8(_mm_cmpeq_epi32(A, B)) != 0xffff) {
				break;
			}
		}
		for (; i < n; ++i) {
			if (data[i] != other.data[i]) {
				return data[i] < other.data[i];
			}
		}
		return false;
	}
	inline bool operator >(const Bitset<N>& other) const {
		int i = 0;
		for (; i + 4 < n; i += 4) {
			__m128i A = _mm_loadu_si128((__m128i*)(data + i));
			__m128i B = _mm_loadu_si128((__m128i*)(other.data + i));
			if (_mm_movemask_epi8(_mm_cmpeq_epi32(A, B)) != 0xffff) {
				break;
			}
		}
		for (; i < n; ++i) {
			if (data[i] != other.data[i]) {
				return data[i] > other.data[i];
			}
		}
		return false;
	}
	inline bool operator <=(const Bitset<N>& other) const {
		return !operator>(other);
	}
	inline bool operator >=(const Bitset<N>& other) const {
		return !operator<(other);
	}
	inline bool operator !=(const Bitset<N>& other) const {
		return !operator==(other);
	}
private:
	inline static int _popcnt(unsigned a) {
#ifdef _MSC_VER
		return _mm_popcnt_u32(a);
#else
		return __builtin_popcount(a);
#endif
	}
	inline static int _ctz(unsigned a) {
#ifdef _MSC_VER
		return _tzcnt_u32(a);
#else
		return __builtin_ctz(a);
#endif
	}
	inline static int _clz(unsigned a) {
#ifdef _MSC_VER
		return __lzcnt(a);
#else
		return __builtin_clz(a);
#endif
	}
	const int n = (N + 31) / 32;
	unsigned* data;
	array<unsigned, (N + 31) / 32> arr_;
};

int a, b, c, d, n, m, k, m1, m2;

struct IG {
	Bitset<1004> good[2004], bad[2004];
	bool bv[2004];
	IG() {
		rept(i, 2004) {
			good[i].reset();
			bad[i].reset();
		}
		C(bv);
	}
	static inline int getNum(int a) {
		if (a > 0) return a - 1;
		a = -a;
		return n + a - 1;
	}
	static inline int neg(int a) {
		if (a < n) return a + n; else
			return a - n;
	}
	inline void addImplication(int a, int b) {
		a = getNum(a);
		b = getNum(b);
		if (b < n) {
			good[a].set(b);
		}
		else {
			bad[a].set(b - n);
		}
	}
	inline void add(int a, int b) {
		addImplication(-a, b);
		addImplication(-b, a);
	}
	void transitiveClosure() {
		rept(i, 2 * n) {
			if (i < n) {
				good[i].set(i);
			}
			else {
				bad[i].set(i - n);
			}
		}
		rept(mid, 2 * n) {
			rept(i, 2 * n) {
				bool ok = 0;
				if (mid < n) {
					if (good[i].test(mid)) {
						ok = 1;
					}
				}
				else {
					if (bad[i].test(mid - n)) {
						ok = 1;
					}
				}
				if (ok) {
					good[i] |= good[mid];
					bad[i] |= bad[mid];
				}
			}
		}

		rept(i, 2 * n) {
			if (i < n) {
				if (bad[i].test(i)) bv[i] = 1;
			}
			else {
				if (good[i].test(i - n)) bv[i] = 1;
			}
		}

rept(i, 2 * n) {
	rept(j, 2 * n) {
		if (!bv[j]) continue;
		if (j < n) {
			if (good[i].test(j)) bv[i] = 1;
		}
		else {
			if (bad[i].test(j - n)) bv[i] = 1;
		}
	}
}
	}
	bool hasSolution() {
		rept(i, n) {
			if (bad[i].test(i) && good[i + n].test(i)) {
				return 0;
			}
		}
		return 1;
	}

	int num[1004], sof[1004];
	inline bool select(int v) {
		int t = v;
		if (num[v] == 0) t += n;
		if (bv[t]) return false;
		int k = 0;
		sof[k++] = v;
		bool ok = 1;
		rept(i, n) {
			if (good[t].test(i)) {
				if (num[i] == 0) {
					ok = 0;
					break;
				}
				if (num[i] == -1) {
					num[i] = 1;
					sof[k++] = i;
				}
			}
			if (bad[t].test(i)) {
				if (num[i] == 1) {
					ok = 0;
					break;
				}
				if (num[i] == -1) {
					num[i] = 0;
					sof[k++] = i;
				}
			}
		}

		if (!ok) {
			rept(i, k) {
				num[sof[i]] = -1;
			}
			return 0;
		}
		return 1;
	}
	void printSolutionAndDie(int f1, int f2) {
		memset(num, -1, sizeof(num));
		if (f1 != -1) {
			if (f1 < n) {
				num[f1] = 1;
			}
			else {
				f1 -= n;
				num[f1] = 0;
			}
			select(f1);
		}
		if (f2 != -1) {
			if (num[f2 < n ? f2 : f2 - n] == -1) {
				if (f2 < n) {
					num[f2] = 1;
				}
				else {
					f2 -= n;
					num[f2] = 0;
				}
				select(f2);
			}
		}
		rept(i, n) {
			if (num[i] != -1) continue;
			num[i] = 0;
			if (!select(i)) {
				num[i] = 1;
				select(i);
			}
		}
		rept(i, n) {
			if (i) printf(" ");
			printf("%d", num[i]);
		}
		printf("\n");
		exit(0);
	}
	inline bool checkBad(int v1, int v2) {
		auto t = (good[v1] | good[v2]) & (bad[v1] | bad[v2]);
		if (t.any()) {
			return 1;
		}
		else {
			return 0;
		}
	}
};

char buf[65537];
char *ch = buf;
inline char get_char() {
	if (*ch == 0) {
		ch = buf;
		fread(buf, sizeof(char), 65536, stdin);
	}
	return *(ch++);
}

char _ch;
inline void next_int(int &ans) {
	ans = 0;
	while (((_ch = get_char()) < '0' || _ch > '9') && _ch != '-');
	bool neg = 0;
	if (_ch == '-') {
		neg = 1;
		_ch = get_char();
	}
	do	{
		ans = ans * 10 + _ch - '0';
	} while ((_ch = get_char()) >= '0' && _ch <= '9');
	if (neg) ans = -ans;
}

IG g1, g2;
bool used[2002][2002];
pii cl1[1000002], cl2[1000002];

inline void solve(pii *cl1, pii *cl2, IG &g1, IG &g2, int m1, int m2) {
	C(used);
	rept(i, m1) {
		int v1 = IG::getNum(cl1[i].x);
		int v2 = IG::getNum(cl1[i].y);
		v1 = IG::neg(v1);
		v2 = IG::neg(v2);
		if (v1 > v2) swap(v1, v2);
		if (used[v1][v2]) continue;
		used[v1][v2] = 1;

		if (g2.bv[v1] || g2.bv[v2]) continue;
		if (g2.checkBad(v1, v2)) continue;
		g2.printSolutionAndDie(v1, v2);
	}
}
int main() {
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	next_int(n); next_int(m1); next_int(m2);
	rept(i, m1) {
		next_int(a); next_int(b);
		cl1[i] = mp(a, b);
		g1.add(a, b);
	}
	rept(i, m2) {
		next_int(a); next_int(b);
		cl2[i] = mp(a, b);
		g2.add(a, b);
	}
	g1.transitiveClosure();
	g2.transitiveClosure();

	bool r1 = g1.hasSolution();
	bool r2 = g2.hasSolution();
	if (!r1 && !r2) {
		printf("SIMILAR\n");
		exit(0);
	}
	if (!r1) {
		g2.printSolutionAndDie(-1, -1);
	}
	if (!r2) {
		g1.printSolutionAndDie(-1, -1);
	}
	solve(cl1, cl2, g1, g2, m1, m2);
	solve(cl2, cl1, g2, g1, m2, m1);
	printf("SIMILAR\n");
}
