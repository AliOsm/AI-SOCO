# include <bits/stdc++.h>
# define FILE
using namespace std;

const int N = 2e5 + 100;
const int L = 20;

vector < int > gr[N];
int n,m, tim, depth[N], p[N], tin[N] = {-1000000000}, tout[N] = {1000000000}, sp[N][20];

void dfs( int v, int f ){
    p[v] = f;
    tin[v] = ++tim;
    depth[v] = depth[p[v]] + 1;
    sp[v][0] = p[v];
    for( int i = 1; i < L; i ++ ){
        sp[v][i] = sp[sp[v][i-1]][i-1];
    }
    for( auto to: gr[v] ){
        if( to != f ){
            dfs( to, v );
        }
    }
    tout[v] = ++tim;
}
bool is_ancestor( int a, int b ){
    return (tin[a] <= tin[b] && tout[b] <= tout[a]);
}
int get_lca( int a, int b ){
    if( is_ancestor(a,b) ) return a;
    if( is_ancestor(b,a) ) return b;
    for( int i = L-1; i >= 0; i -- ){
        if( !is_ancestor(sp[a][i], b) ){
            a = sp[a][i];
        }
    }
    return sp[a][0];
}

int main(){
    # ifdef FILEs
        freopen( "input.txt", "r", stdin );
        freopen( "output.txt", "w", stdout );
    # endif
    ios_base::sync_with_stdio(false);
    cin >> n >> m;
    for( int i = 0; i < n-1; i ++ ){
        int a, b;
        cin >> a >> b;
        gr[a].push_back( b );
        gr[b].push_back( a );
    }
    dfs( 1, 0 );
    while( m -- ){
        int k; cin >> k;
        vector < pair < int, int > > vc;
        for( int i = 0; i < k; i ++ ){
            int v; cin >> v;
            vc.push_back( {depth[v], v} );
        }
        sort( vc.begin(), vc.end() );
        
        int v = vc.back().second;
        string ans = "YES";
        for( int i = k-2; i >= 0; i -- ){
            v = get_lca(v, vc[i].second );
            if( abs(depth[vc[i].second] - depth[v]) > 1 ){
                ans = "NO";
                break;
            }
        }
        cout << ans << endl;
    }
}


