//satyaki3794
#include <bits/stdc++.h>
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define LEFT(n) (2*(n))
#define RIGHT(n) (2*(n)+1)

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;

ll pwr(ll base, ll p, ll mod = MOD){
ll ans = 1;while(p){if(p&1)ans=(ans*base)%mod;base=(base*base)%mod;p/=2;}return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


int h, w, n;
typedef pair<ii, ii> i4;
i4 arr[100005];
stack<int> tree[400005];
ll DP[100005];


void update(int node, int s, int e, int lo, int hi, int val){
    if(s > e || lo > e || s > hi)   return;
    if(s >= lo && e <= hi){
        tree[node].push(val);
// cout<<"pushed "<<val<<" at node "<<node<<endl;
        return;
    }
    int mid = (s+e)/2;
    update(LEFT(node), s, mid, lo, hi, val);
    update(RIGHT(node), mid+1, e, lo, hi, val);
}


int query(int node, int s, int e, int col, int row){

    if(s > e || col < s || col > e)   return -1;
    
    int ans = -1;
    while(!tree[node].empty() && row > (arr[tree[node].top()].ff.ff + arr[tree[node].top()].ff.ss))
        tree[node].pop();
    if(!tree[node].empty())
        ans = max(ans, tree[node].top());

    if(s == e)  return ans;

    int mid = (s+e)/2;
    int a = query(LEFT(node), s, mid, col, row);
    int b = query(RIGHT(node), mid+1, e, col, row);
    ans = max(ans, max(a, b));
    return ans;
}


ll calc(int col, int row){
    int temp = query(1, 1, w, col, row);
// cout<<"yolo "<<temp<<endl;
    if(temp == -1)  return 1;
    return DP[temp];
}


int main(){

    // ios_base::sync_with_stdio(0);
    // cin.tie(0);

    scanf("%d%d%d", &h, &w, &n);
    for(int i=0;i<n;i++){
        scanf("%d%d%d%d", &arr[i].ff.ff, &arr[i].ss.ff, &arr[i].ss.ss, &arr[i].ff.ss);
    }
    sort(arr, arr+n);

    for(int i=0;i<n;i++){
        int l = arr[i].ss.ff, r = arr[i].ss.ss;
        if(l == 1){
            ll temp = calc(r+1, arr[i].ff.ff);
            DP[i] = (2 * temp) % MOD;
        }
        else if(r == w){
            ll temp = calc(l-1, arr[i].ff.ff);
            DP[i] = (2 * temp) % MOD;
        }
        else{
            ll temp = calc(l-1, arr[i].ff.ff) + calc(r+1, arr[i].ff.ff);
            DP[i] = temp % MOD;
        }
        update(1, 1, w, l, r, i);
    }

// cout<<"DP: ";for(int i=0;i<n;i++)   cout<<DP[i]<<" ";cout<<endl;

    ll ans = 0;
    for(int i=1;i<=w;i++){
        ll temp = calc(i, h+1);
// cout<<"at i = "<<i<<" temp = "<<temp<<endl;
        ans = (ans + temp) % MOD;
    }

    printf("%lld\n", ans);
    return 0;
}







