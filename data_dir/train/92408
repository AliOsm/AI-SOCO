#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int maxn=2e5+7;
const int inf=INT_MAX;
const ll inff=1e18;
const ll mod=1e9+7;
#define pii pair<int,int>
#define mkp make_pair
#define F first
#define S second
#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
//#define int ll

#ifdef HNO2
#define IOS
#else
#define endl '\n'
#define IOS ios::sync_with_stdio(0); cin.tie(0);
#endif // HNO2

vector<int> G[maxn];
int depth[maxn];
int p[maxn][22];

void dfs(int now,int pp)
{
    p[now][0]=pp;
    for (int i:G[now])
        if (i!=pp)
        {
            depth[i]=depth[now]+1;
            dfs(i,now);
        }
}

int lca(int x,int y)
{
    if (depth[x]<depth[y]) swap(x,y);
    for (int i=20;i>=0;i--)
        if ((depth[x]-depth[y])&(1<<i))
            x=p[x][i];
    if (x==y) return x;
    for (int i=20;i>=0;i--)
        if (p[x][i]!=p[y][i])
            x=p[x][i],y=p[y][i];
    return p[x][0];
}

int32_t main()
{
    IOS
    int n,q;
    cin>>n>>q;
    for (int i=1;i<=n-1;i++)
    {
        int x,y;
        cin>>x>>y;
        G[x].pb(y);
        G[y].pb(x);
    }
    dfs(1,-1);
    for (int j=1;j<=21;j++)
        for (int i=1;i<=n;i++)
            if (p[i][j-1]==-1) p[i][j]=-1;
            else p[i][j]=p[p[i][j-1]][j-1];

    while (q--)
    {
        int k;
        cin>>k;

        vector<int> tmp;
        for (int i=1;i<=k;i++)
        {
            int x;
            cin>>x;
            tmp.pb(x);
        }

        int v,mx=-1;
        for (int i:tmp)
            if (depth[i]>mx) mx=depth[i],v=i;

        int ok=1;
        for (int i:tmp)
        {
            int lc=lca(v,i);
            if (depth[i]-depth[lc]>1) ok=0;
        }
        cout<<(ok ? "YES" : "NO")<<endl;
    }
}

