#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>

using namespace std;

const int MAXN = 407;
const int MOVE = MAXN;

vector<vector<int>> i_sum;
vector<vector<int>> i_delta;
vector<vector<int>> i_j;
vector<vector<int>> j_i;

void init() {
	i_sum.resize(2 * MAXN);
	i_delta.resize(2 * MAXN);
	i_j.resize(MAXN);
	j_i.resize(MAXN);
}

void run() {
	for (auto &t : i_sum) {
		sort(t.begin(), t.end());
	}
	for (auto &t : i_delta) {
		sort(t.begin(), t.end());
	}
	for (auto &t : i_j) {
		sort(t.begin(), t.end());
	}
	for (auto &t : j_i) {
		sort(t.begin(), t.end());
	}

}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	init();

	int n, m;
	cin >> n >> m;
	vector<vector<int>> gr(n, vector<int> (m));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			char c;
			cin >> c;
			if (c == '1') {
				gr[i][j] = 1;
				i_j[j].push_back(i);
				j_i[i].push_back(j);
				i_sum[i + j].push_back(i);
				i_delta[i - j + MOVE].push_back(i);
			}
		}
	}
	run();
	auto cnt_less = [&](vector<int> &to, int x) {
		return lower_bound(to.begin(), to.end(), x) - to.begin();
	};
	auto cnt = [&](vector<int> &to, int l, int r) {
		return cnt_less(to, r + 1) - cnt_less(to, l);
	};
	auto ok = [&](int i, int j) {
		return i >= 0 && i < n && j >= 0 && j < m;
	};
	int ans = 0;
	/*
	/ |
	 _
	*/
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (gr[i][j]) {
				continue;
			}
			for (int delta = 1; delta < n + m; delta++) {
				if (!ok(i, j - delta) || !ok(i - delta, j)) {
					break;
				}
				if (gr[i][j - delta] || gr[i - delta][j]) {
					break;
				}
				if (!cnt(i_sum[i + j - delta], i - delta, i)) {
					ans++;
				}
			}
		}
	}
	/*
	| \
	 _
	*/
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (gr[i][j]) {
				continue;
			}
			for (int delta = 1; delta < n + m; delta++) {
				if (!ok(i, j + delta) || !ok(i - delta, j)) {
					break;
				}
				if (gr[i][j + delta] || gr[i - delta][j]) {
					break;
				}
				if (!cnt(i_delta[i - j - delta + MOVE], i - delta, i)) {
					ans++;
				}
			}
		}
	}
	/*
	 _
	| /
	*/
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (gr[i][j]) {
				continue;
			}
			for (int delta = 1; delta < n + m; delta++) {
				if (!ok(i, j + delta) || !ok(i + delta, j)) {
					break;
				}
				if (gr[i][j + delta] || gr[i + delta][j]) {
					break;
				}
				if (!cnt(i_sum[i + j + delta], i, i + delta)) {
					ans++;
				}
			}
		}
	}
	/*
	 _
	\ |
	*/
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (gr[i][j]) {
				continue;
			}
			for (int delta = 1; delta < n + m; delta++) {
				if (!ok(i, j - delta) || !ok(i + delta, j)) {
					break;
				}
				if (gr[i][j - delta] || gr[i + delta][j]) {
					break;
				}
				if (!cnt(i_delta[i - j + delta + MOVE], i, i + delta)) {
					ans++;
				}
			}
		}
	}
	/*
	____
	\
	*/
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (gr[i][j]) {
				continue;
			}
			for (int delta = 1; delta < n + m; delta++) {
				if (!ok(i - delta, j - delta) || !ok(i - delta, j + delta)) {
					break;
				}
				if (gr[i - delta][j - delta] || gr[i - delta][j + delta]) {
					break;
				}
				if (!cnt(j_i[i - delta], j - delta, j + delta)) {
					ans++;
				}
 			}
		}
	}
	/*
	/|
	 |
	*/
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (gr[i][j]) {
				continue;
			}
			for (int delta = 1; delta < n + m; delta++) {
				if (!ok(i - delta, j + delta) || !ok(i + delta, j + delta)) {
					break;
				}
				if (gr[i - delta][j + delta] || gr[i + delta][j + delta]) {
					break;
				}
				if (!cnt(i_j[j + delta], i - delta, i + delta)) {
					ans++;
				}
 			}
		}
	}
	/*
	\
	__
	*/
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (gr[i][j]) {
				continue;
			}
			for (int delta = 1; delta < n + m; delta++) {
				if (!ok(i + delta, j - delta) || !ok(i + delta, j + delta)) {
					break;
				}
				if (gr[i + delta][j - delta] || gr[i + delta][j + delta]) {
					break;
				}
				if (!cnt(j_i[i + delta], j - delta, j + delta)) {
					ans++;
				}
 			}
		}
	}
	/*
	|\
	|
	*/
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (gr[i][j]) {
				continue;
			}
			for (int delta = 1; delta < n + m; delta++) {
				if (!ok(i - delta, j - delta) || !ok(i + delta, j - delta)) {
					break;
				}
				if (gr[i - delta][j - delta] || gr[i + delta][j - delta]) {
					break;
				}
				if (!cnt(i_j[j - delta], i - delta, i + delta)) {
					ans++;
				}
 			}
		}
	}
	cout << ans << endl;
}
