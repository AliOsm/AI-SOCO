#include <bits/stdc++.h>
using namespace std;
#define rep(i, a, b) for (int i = a; i < b; i++)
#define per(i, a, b) for (int i = a; i >= b; i--)
#define pb push_back
#define mp make_pair
#define mt make_tuple
#define eb emplace_back
#define sz(x) ((int) x.size())
#define rd(type, ...) type __VA_ARGS__; sc(__VA_ARGS__)
#define rdv(type, v, n) vector<type> v(n); rep(__ii, 0, n) cin >> v[__ii]
#define rdm(type, v, h, w) vector<vector<type>>(h, vector<type>(w)) v; rep(__ii, 0, h) rep(__jj, 0, w) cin >> v[__ii][__jj]
typedef long long ll;
void solve();
signed main() {ios::sync_with_stdio(false); cin.tie(0);
  cout << fixed; cout.precision(12); solve(); return 0;}
template<typename T> void prv(vector<T> v) {rep(__ii, 0, sz(v)) {if (__ii) cout << ' '; cout << v[__ii];} cout << '\n';} 
template<typename T> void prm(vector<vector<T>> v) {rep(__ii, 0, sz(v)) {rep(__jj, 0, v[__ii].size()) {if (__jj) cout << ' '; cout << v[__ii][__jj];} cout << '\n';}}
template<typename T> void sc(T& x) {cin >> x;}
template<typename Head, typename... Tail> void sc(Head& head, Tail&... tail) {cin >> head; sc(tail...);}
template<typename T> void pr(const T& x) {cout << x << '\n';}
template<typename Head, typename... Tail> void pr(const Head& head, const Tail&... tail) {cout << head << ' '; pr(tail...);}
template<typename... T> void err(const T&... cod) {pr(cod...); exit(0);}

void solve_case() {
  rd(int, n, m);
  vector<string> a(n);
  rep(i, 0, n) cin >> a[i];
  vector<int> c(m, 0), r(n, 0);

  rep(i, 0, n) {
    int z = 0;
    rep(j, 0, m) {
      z += (a[i][j] == '*');
    }
    r[i] = z;
  }

  rep(j, 0, m) {
    int z = 0;
    rep(i, 0, n) {
      z += (a[i][j] == '*');
    }
    c[j] = z;
  }

  int ans = 2e9;

  rep(i, 0, n) rep(j, 0, m) {
    if (a[i][j] == '*') {
      ans = min(ans, n + m - c[j] - r[i]);
    } else {
      ans = min(ans, n + m - c[j] - r[i] - 1);
    }
  }

  pr(ans);
}

void solve() {
  rd(int, qq);
  while (qq--) solve_case();
}