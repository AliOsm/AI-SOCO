#include<bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace __gnu_pbds;
using namespace std;

#define fr first
#define sc second
#define memset(X,Y) memset(X,Y,sizeof X)
#define all(X) X.begin(),X.end()
#define SZ size()
#define mp make_pair
#define pb push_back
#define Pb pop_back

template<class A, class B> ostream& operator <<(ostream &out, const pair<A, B> &p) {
    return out << "(" << p.fr << ", " << p.sc << ")";
};

template<class A> ostream& operator <<(ostream &out, const vector<A> &v) {
    out << "[";
    for(int i=0;i<(int)v.SZ;i++) {
        if(i)
            out << ", ";
        out << v[i];
    }
    return out << "]";
}

#define error(args...){vector<string> _v = split(#args,','); err(_v.begin(),args); cerr<<endl;}
vector <string> split(const string &s,char c)
{
    vector<string> v;
    stringstream ss(s);
    string x;
    while(getline(ss,x,c))
        v.emplace_back(x);
    return move(v);
}
void err(vector<string>:: iterator it) {}
template<typename T,typename ... Args>
void err(vector<string>::iterator it, T a, Args ... args)
{
    cerr << it->substr((*it)[0] == ' ',it->length())
         << " = " << a <<" " ;
    err(++it,args...);
}

template <typename T>
using order_set = tree<T, null_type, less<T>, rb_tree_tag,
      tree_order_statistics_node_update>;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<int> vi;
typedef vector<ll> vll;
double pi = acos(-1),eps=1e-8;
const ll N = (2e5) + 10 , M = (1e6)+10 , mod = 1e9 + 7 , K = 4 * N;
ll OOL = 1e18;
ll OO = 1e9;

struct node{
    ll mn,mx,id,f;
    node(){}
    node(ll mn,ll mx,ll f,ll id):mn(mn),mx(mx),id(id),f(f){}

    bool operator < (node const& e)const{
        if(e.mn!=mn)return mn<e.mn;
        return f<e.f;
    }
};
ll n,m,l[N],r[N],a[N],ans[N];
vector<node> v;
int main(){
    cin >> n >> m;
    for(int i=0;i<n;i++)cin >> l[i] >> r[i];
    for(int i=1;i<=m;i++){
        cin >> a[i];
        v.pb(node(a[i],-1,1,i));
    }
    for(int i=0;i+1<n;i++){
        ll mn=l[i+1]-r[i];
        ll mx=r[i+1]-l[i];
        v.pb(node(mn,mx,0,i));
        v.pb(node(mx,mx,2,i));
    }
    sort(all(v));
//    for(auto x:v)error(x.mn,x.mx,x.f,x.id);
    multiset<pair<ll,ll> > se;
    for(auto x:v){
        if(x.f==0){
            se.insert(mp(x.mx,x.id));
        }
        else if(x.f==1){
            if(se.SZ==0)continue;
            auto it=se.begin();
            ans[(*it).sc]=x.id;
            se.erase(it);
        }
        else{
            if(!ans[x.id])return cout << "No",0;
        }
    }
    cout << "Yes"<<endl;
    for(int i=0;i+1<n;i++){
        cout << ans[i] << " ";
    }
}
/*

*/
