#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

bool ok(vector<int> &v){
	int n = (int)v.size();
	for(int i = 1; i < n; i++)
		if(v[i] >= v[i - 1])
			return false;
	return true;
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	int n;
	cin >> n;
	
	vector<int> v(n);
	map<int, int> M;
	
	for(int i = 0; i < n; i++)
		cin >> v[i], M[v[i]]++;
	
	vector<int> a, b;
	for(auto &p : M){
		a.push_back(p.first);
		p.second--;
	}
	
	for(auto &p : M){
		while(p.second--)
			b.push_back(p.first);
	}
	
	sort(a.begin(), a.end());
	sort(b.rbegin(), b.rend());
	
	if(!ok(b)){
		cout << "NO" << endl;
		return 0;
	}
	
	cout << "YES" << endl;
	cout << a.size() << endl;
	for(int i = 0; i < a.size(); i++)
		cout << a[i] << " \n"[i + 1 == a.size()];
	cout << b.size() << endl;
	for(int i = 0; i < b.size(); i++)
		cout << b[i] << " \n"[i + 1 == b.size()];

	return 0;
}

