// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = 3*(int)1e5 + 3;

int n, m, a[N][10];
PII wyn;
int hm;
VI ind[(1<<8)];

bool check(int x3) {
  for (int i = 0; i < (1<<m); ++i)
    ind[i].clear();
  for (int i = 0; i < n; ++i) {
    int cur = 0;
    for (int j = 0; j < m; ++j)
      if (a[i][j] >= x3)
        cur ^= (1<<j);
    ind[cur].PB(i);
  }
  for (int i = 0; i < (1<<m); ++i)
    for (int j = i; j < (1<<m); ++j)
      if ((i|j) == (1<<m)-1 && ind[i].size() && ind[j].size()) {
        wyn = {ind[i][0], ind[j][0]};
        return true;
      }
  return false;
}

int main() {
  init_ios();
  cin >> n >> m;
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < m; ++j)
      cin >> a[i][j];
  int x1 = 0, x2 = 1e9+1, x3;
  while (x2-x1 > 1) {
    x3 = (x1+x2)/2;
    if (check(x3))
      x1 = x3;
    else
      x2 = x3;
  }
  check(x1);
  cout<<wyn.ST+1<<" "<<wyn.ND+1<<"\n";
}