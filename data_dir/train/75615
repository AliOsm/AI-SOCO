#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
 
#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2
 
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound
 
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;
 
template <class T1, class cmp = less <T1>> using Tree = tree <T1, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2> using um = unordered_map <T1, T2>;
template <class T> using us = unordered_set <T>;
template <class T> using vec = vector <T>;
 
const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 3e5 + 1;
const int K = 2e6 + 3;
int n, k, ans;
int arr[N];
int pre[K];

void input() {
    cin >> n >> k;
    for(int i = 1; i <= n; ++i) {
        cin >> arr[i];
        pre[arr[i]]++;
    }
    for(int i = 1; i < K; ++i) {
        pre[i] += pre[i - 1];
    }
}

void solve() {
    for(int i = 1; i < K; ++i) {
        int sum = 0;
        for(int j = i; j < K / 2; j += i) {
            sum += pre[min(j + i - 1, j + k)] - pre[j - 1];
        }
        if(sum >= n) {
            ans = i;
        }
    }
    cout << ans << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
