#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_set>
#include<unordered_map>
using namespace std;
#define MAX 502
int h;
int w;
int q;
char buf[MAX];
vector < string > v;



int r[MAX][MAX];
int c[MAX][MAX];

int gr(int a, int b){
    if (a < 0 || b < 0){
        return 0;
    }
    return r[a][b];
}
int gc(int a, int b){
    if (a < 0 || b < 0){
        return 0;
    }
    return c[a][b];
}
int rrect(int a, int b, int c, int d){
    return gr(c, d) + gr(a - 1, b - 1) - gr(c, b - 1) - gr(a - 1, d);
}
int crect(int a, int b, int c, int d){
    return gc(c, d) + gc(a - 1, b - 1) - gc(c, b - 1) - gc(a - 1, d);
}
int main(){
    cin >> h >> w;
    for (int i = 0; i < h; i++){
        scanf("%s", buf);
        v.push_back(buf);
    }
    for (int i = 0; i+1 < h; i++){
        for (int j = 0; j < w; j++){
            if (v[i][j] == v[i + 1][j] && v[i][j] == '.'){
                r[i][j]++;
            }
        }
    }
    for (int i = 0; i < h; i++){
        for (int j = 0; j+1 < w; j++){
            if (v[i][j] == v[i][j + 1] && v[i][j] == '.'){
                c[i][j]++;
            }
        }
    }
    for (int i = 0; i < MAX; i++){
        for (int j = 0; j+1 < MAX; j++){
            r[i][j + 1] += r[i][j];
            c[i][j + 1] += c[i][j];
        }
    }
    for (int j = 0; j < MAX; j++){
        for (int i = 0; i + 1 < MAX; i++){
            r[i + 1][j] += r[i][j];
            c[i + 1][j] += c[i][j];
        }
    }
    cin >> q;
    while (q--){
        int a, b, c, d;
        int ans = 0;
        scanf("%d%d%d%d", &a, &b, &c, &d);
        a--;
        b--;
        c--;
        d--;
        if (a != c){
            ans += rrect(a, b, c - 1, d);
        }
        if (b != d){
            ans += crect(a, b, c, d - 1);
        }
        printf("%d\n", ans);
    }
    return 0;
}