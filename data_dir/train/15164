#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;
const int di[] = { 0, 1 };
const int dj[] = { 1, 0 };
const ll MOD = 1e9 + 7;
const ll INF = 1e9;
const long double EPS = 1e-7;
#define all(n) n.begin(),n.end()

int n, m, k, s;
vvi g, mx, dg;

inline bool valid(int i, int j) {
	return i >= 0 && i < n && j >= 0 && j < m;
}

void maximize() {
	vi first(10, -1), last(10, -1);
	for (int i = 0; i < dg.size(); i++) {
		for (int j = 0; j < dg[i].size(); j++) {
			if (first[dg[i][j]] == -1)
				first[dg[i][j]] = i;
			last[dg[i][j]] = i;
		}
	}

	for (int i = 1; i < 10; i++) {
		for (int j = 1; j < 10; j++) {
			if (~first[i] && ~last[j]) {
				mx[i][j] = mx[j][i] = max(mx[i][j], last[j] - first[i]);
			}
		}
	}
}

void calcDiagonals() {
	dg.assign(n + m, vi());
	vector<vb> vis(n + m, vb(10));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			int dn = i + j;
			if (!vis[dn][g[i][j]]) {
				dg[dn].push_back(g[i][j]);
				vis[dn][g[i][j]] = true;
			}
		}
	}

	maximize();

	dg.assign(n + m, vi());
	vis.assign(n + m, vb(10));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			int dn = i - j + m - 1;
			if (!vis[dn][g[i][j]]) {
				dg[dn].push_back(g[i][j]);
				vis[dn][g[i][j]] = true;
			}
		}
	}

	maximize();
}

int main() {
	//ios::sync_with_stdio(false), cin.tie(0);
	//cin >> n >> m >> k >> s;
	scanf("%d%d%d%d", &n, &m, &k, &s);
	g.assign(n, vi(m));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			//cin >> g[i][j];
			scanf("%d", &g[i][j]);
		}
	}

	mx.assign(10, vi(10));
	calcDiagonals();

	int prv, r = 0; cin >> prv;
	for (int i = 1; i < s; i++) {
		int x; //cin >> x;
		scanf("%d", &x);
		r = max(r, mx[prv][x]);
		prv = x;
	}
	printf("%d\n", r);
	//cout << r << endl;
	cin.ignore(), cin.get();
}
