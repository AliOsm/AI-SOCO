#include <bits/stdc++.h>
#define st first
#define nd second
#define pb push_back
#define ppb pop_back
#define ppf pop_front
#define umax(x,y) x=max(x,y)
#define umin(x,y) x=min(x,y)
#define ll long long
#define ii pair<int,int>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define sz(x) ((int) x.size())
#define orta ((bas+son)/2)
#define all(x) x.begin(),x.end()
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define pw(x) (1<<(x))
#define inf 1000000000
#define MOD 1000000007
#define N 500005
#define M 27000
#define LOG 21
#define KOK 650
#define EPS 0.00001
using namespace std;

int n,m,k,x,y;
int vis[N],dep[N],par[N],leaf[N],used[N];
ii e[N];
vector<int> edges[N],v[N],v2[N],path;

void pp() {
	
	cout<<sz(path)<<"\n";
	
	for(auto went:path) cout<<went<<" ";
	
	cout<<"\n";
	
	path.clear();
		
}

void fp(int node,int ata) {
	
	while(1) {
		
		path.pb(node);
		
		if(node==ata) return ;

		node=par[node];
	
	}
	
}

void dfs2(int node,int der) {
	
	dep[node]=der;
	
	path.pb(node);
	
	if(der>=(n+k-1)/k) {
		
		cout<<"PATH\n";
		
		pp();
		
		exit(0);
		
	}
	
	for(int i:v2[node]) {
		
		int go=e[i].st^e[i].nd^node;

		par[go]=node;
		
		dfs2(go,der+1);
				
	}
		
	path.ppb();
		
}

void dfs(int node,int ata) {
	
	bool isleaf=true;

	vis[node]=1;

	for(int i:v[node]) {
		
		int go=e[i].st^e[i].nd^node;
		
		if(go==ata) continue ;
		
		if(!vis[go]) {
			
			used[i]=1;
			v2[node].pb(i);
			isleaf=false;
			
			dfs(go,node);
			
		}
	
	}
	
	leaf[node]=isleaf;
		
}

int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	
	cin>>n>>m>>k;
	
	for(int i=1;i<=m;i++) {
		
		cin>>x>>y;
		
		e[i]={x,y};
		
		v[x].pb(i);
		v[y].pb(i);
		
	}
	
	dfs(1,0);
	
	dfs2(1,1);
	
	cout<<"CYCLES\n";
	
	for(int i=1;i<=m;i++) {
		
		if(used[i]) continue ;
		
		if(leaf[e[i].st]) {
			
			edges[e[i].st].pb(e[i].nd);
			
		}
		else if(leaf[e[i].nd]) {
			
			edges[e[i].nd].pb(e[i].st);
			
		}
		
	}
	
	int tot=0;
	
	for(int i=1;tot<k && i<=n;i++) {
		
		if(leaf[i]) {
			
			if((dep[i]-dep[edges[i][0]]+1)%3) {
				
				fp(i,edges[i][0]);
				
			}
			else if((dep[i]-dep[edges[i][1]]+1)%3) {
				
				fp(i,edges[i][1]);
				
			}
			else {
				
				path.pb(i);
				
				if(dep[edges[i][0]]<dep[edges[i][1]]) swap(edges[i][0],edges[i][1]);
				
				fp(edges[i][0],edges[i][1]);
				
			}
			
			pp();
			
			tot++;
			
		}
		
	}
	
}

