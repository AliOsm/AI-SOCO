#include <iostream>
#include <stdio.h>
#include <bits/stdc++.h>
#include <math.h>
#include <string>
#include <sstream>
#define ll long long
#define F first
#define S second
#define pb push_back
#define ld long double
#define pll pair<long long,long long>
#define pld pair<long double,long double>
#define ios     ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
using namespace std;
ll mod=998244353;
ll gcd (ll a,ll b)
{
    if(b==0)
        return a;
    else
        return gcd(b,a%b);
}
ll modularExp(ll x,ll n,ll mod)
{
    ll result=1;
    while(n>0)
    {
        if(n%2==1)
            result=(result*x)%mod;
        x=((x%mod)*(x%mod))%mod;
        n=n/2;
    }
    return (result)%mod;
}
bool isPrime(ll n)
{
    for(ll i=2;i*i<=n;i++)
        if(n%i==0)
            return false;
    return true;
}



int main()
{
    ll n;
    cin>>n;
    vector<ll> v[n+1];
    map<ll,ll> mp;
    ll i,j;
    for(i=1;i<=n;i++)
    {
        ll k;
        cin>>k;
        for(j=1;j<=k;j++)
        {
            ll x;
            cin>>x;
            mp[x]+=1;
            v[i].pb(x);
        }
    }
    ll ans=0;
    for(i=1;i<=n;i++)
    {
        ll k=v[i].size();
        ll sum=0;
        for(j=0;j<k;j++)
            sum+=mp[v[i][j]];
        ll g=gcd(sum,k);
        sum/=g;
        k/=g;
        sum%=mod;
        ll invk=modularExp(k,mod-2,mod);
        ll ans2=(sum*invk)%mod;
        ans=(ans+ans2)%mod;
    }
    ll invn=modularExp(n*n,mod-2,mod);
    ans=(ans*invn)%mod;
    cout<<ans;







}
