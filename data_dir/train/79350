#include<bits/stdc++.h>
#define lf double
#define ll long long
#define ull unsigned ll
#define ii pair<int,int>
#define li pair<ll,ll>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define iiii2 pair<int,iii>
#define lli pair<ll,int>
#define pll pair<ll,ll>
#define heap priority_queue
#define mp make_pair
#define st first
#define nd second
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define all(x) x.begin(),x.end()
#define len(x) strlen(x)
#define sz(x) (int) x.size()
#define orta ((bas+son)/2)
#define min3(x,y,z) min(min(x,y),z)
#define max3(x,y,z) max(max(x,y),z)
#define dbgs(x) cerr<<(#x)<<" --> "<<(x)<<" "
#define dbg(x) cerr<<(#x)<<" --> "<<(x)<<endl;getchar()
#define MOD 1000000007
#define inf 1000000000
#define N 500005
#define LOG 20
#define magic 100
#define M 10000000
#define KOK 600
#define EPS 0.0025
#define pw(x) (1<<(x))
#define PI 3.1415926535
#define log sfeefw
using namespace std;

int cur=1,n,x,ans;
int p[N],f[M+5],cev[M+5],tot[M+5],sm[M+5];
bool pr[M+5];
vector<int> v;

int get(int now,int bo) {

	int res=0;

	if(now==sz(v)) return (bo%2?1:-1)*tot[cur];

	cur*=v[now];

	res+=get(now+1,bo+1);

	cur/=v[now];

	res+=get(now+1,bo);

	return res;

}

int main() {

	scanf("%d",&n);

	p[0]=1;

	for(int i=1;i<=n;i++) {

		scanf("%d",&x);

		f[x]++;

		p[i]=p[i-1]*2%MOD;

	} 

	for(int i=M;i>=2;i--) {

		for(int j=i;j<=M;j+=i) {
		
			tot[i]+=f[j];
		
			cev[i]=(cev[i]-cev[j]+MOD)%MOD;

		}

		cev[i]=(1ll*cev[i]+p[tot[i]]-1+MOD)%MOD;

	}

	for(int i=2;i<=M;i++) {

		if(pr[i]) continue ;

		for(int j=i;j<=M;j+=i) {

			pr[j]=true;

			if(sm[j]==0) sm[j]=i;
			else sm[j]=min(sm[j],i);

		}

	}

	for(int i=2;i<=M;i++) {

		if(!cev[i]) continue ;

		v.clear();

		int val=i;

		while(val>1) {

			int last=sm[val];

			while(last==sm[val]) val/=sm[val];

			v.pb(last);

		}

		int totn=n-get(0,0);

		ans=(1ll*ans+1ll*totn*cev[i]%MOD)%MOD;

	}

	printf("%d",ans);

}
