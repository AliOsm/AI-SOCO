#include <iostream>
#include <cstdio>
#include <vector>
#include <cstring>
#include <queue>

using namespace std;

#define si(a) scanf("%d",&a)
#define f first
#define s second
#define mp(a,b) make_pair(a,b)
#define MAX 100005

vector<int> block[MAX];
vector<pair<int,int> > graph[MAX];
int vis[MAX];

int cango(int ver,int now)
{
    vector<int>::iterator it;
    it=lower_bound(block[ver].begin(),block[ver].end(),now);
    while(it!=block[ver].end()){
        if(now!=*it)
            return now;
        now++;
        *it++;
    }
    return now;
}

int dijkstra(int n)
{
    priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > Q;
    Q.push(mp(0,0));
    int i;
    while(!Q.empty()){
        pair<int,int> now=Q.top();
        Q.pop();
        if(vis[now.s])
            continue;
        vis[now.s]=1;
        if(now.s==n-1)
            return now.f;
        int st=cango(now.s,now.f);
        for(i=0;i<graph[now.s].size();i++)
            Q.push(mp(st+graph[now.s][i].s,graph[now.s][i].f));
    }
    return -1;
}

int main()
{
    //freopen("input.txt","r",stdin);
    int n,m,i;
    si(n);si(m);
    for(i=0;i<m;i++){
        int u,v,w;
        si(u);si(v);si(w);
        u--;v--;
        graph[u].push_back(mp(v,w));
        graph[v].push_back(mp(u,w));
    }
    for(i=0;i<n;i++){
        int k;
        si(k);
        for(int j=0;j<k;j++){
            int x;
            si(x);
            block[i].push_back(x);
        }
    }
    printf("%d\n",dijkstra(n));
    return 0;
}
