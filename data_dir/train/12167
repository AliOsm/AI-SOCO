#include <iostream>

#include <vector>
#include <string>

using namespace std;

typedef long long llong;
typedef vector<llong> VI;
typedef vector<VI> VVI;

#define BITCOUNT(mask) ( __builtin_popcount((mask)) )

#define HIGHESTSETBIT(mask) ( sizeof(int)*8-1-__builtin_clz((mask)) )

string b2str(long long m, int nbits = 32) {
   string res;
   for (int i = 0; i < nbits; ++i)
      res += (m & (1LL << i)) ? '1' : '0';
   return res;
}

class BinaryIndexedTree {
   int N;
   VI tree;
public:
   BinaryIndexedTree(int _N) : N(_N), tree(VI(_N+1)) {}
   llong get_cumfreq(int idx) {
      llong sum = 0;
      for (; idx > 0; idx -= (idx & -idx))
         sum += tree[idx];
      return sum;
   }

   void update(int idx, llong val = 1) {
      for (; idx <= N; idx += (idx & -idx))
         tree[idx] += val;
   }

   llong get_freq(int idx) {
      if (idx <= 0) return 0;

      llong sum = tree[idx];
      int z = idx - (idx & -idx);
      for (--idx; idx != z; idx -= (idx & -idx))
         sum -= tree[idx];
      return sum;
   }
};

int N;
int A[100004];

int main(int argc, char* argv[]) {
   cin >> N;
   for (int i = 1; i <= N; ++i)
      cin >> A[i];

   BinaryIndexedTree bit(N+4);
   for (int i = 1; i < N; ++i) {
      if (A[i] == 0) continue;
      bit.update(i, A[i]);

      int max_dif = N-i;
   // cerr << b2str(max_dif, 4) << endl;

      int idx = 0, last_idx = -1;
      for (int j = HIGHESTSETBIT(max_dif); j >= 0; --j) {
         if (max_dif & (1<<j)) {
            idx |= 1<<j;
            if (last_idx > 0) {
               bit.update(i+last_idx, A[i]);
            }
            last_idx = idx;
         }
      }
   }
   for (int k = 1; k < N; ++k)
      cout << bit.get_cumfreq(k) << endl;
   return 0;
}
