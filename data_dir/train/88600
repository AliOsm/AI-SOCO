//bismillahir rahmanir rahim            //Author:Fayed Anik
 
#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
 
using namespace std;
//using namespace __gnu_pbds;
 
/*
template <typename T>  using ordered_set =
    tree<T, null_type, less<T>,   /// greater<T> for sorting decreasingly
    rb_tree_tag, tree_order_statistics_node_update>;
*/

#define         ll                          long  long
#define         lf                          double
#define         pb(x)                       push_back(x)
#define         ull                         unsigned long long
#define         sfl(a)                      scanf("%lld",&a)
#define         sf(a)                       scanf("%d",&a)
#define         pf(a)                       printf("%d\n",a)
#define         pfl(a)                      printf("%lld\n",a)
#define         FOR(x,n)                    for(ll x=1;x<=n;++x)
#define         pii                         pair< ll , ll >
#define         SET(m)                      memset(m, 1,sizeof m)
#define         RESET(m)                    memset(m,0,sizeof m)
#define         mp(a,b)                     make_pair(a,WWb)
#define         mod                         1000000007
#define         INF                         1e17
#define         f1                          first
#define         f2                          second
#define         all(v)                      v.begin(),v.end()
#define         PI                          acos(-1)
#define         printminusone               printf("-1\n")
#define         bug                         printf("bug")
#define         FILEIN                      freopen("in.txt","r",stdin)
#define         FILEOUT                     freopen("out.txt","w",stdout)
 
//ll SET(ll mask,ll pos){ return mask = (mask | (1ll<<pos)); }
//ll RESET(ll mask,ll pos){ return mask = mask & ~(1ll<<pos); }
//bool CHECK(ll mask,ll pos) { return (bool) (mask & (1ll<<pos)); }
//priority_queue <ll, vector<ll>, greater<ll> > pq;

#define N 200005
vector<ll>edge[N];
ll dis[N],x,mx=0;
bool track[N];
void dfs(ll u,ll par,ll depth){
    if(mx<depth){
        mx=depth;
        x=u;
    }
    for(auto v:edge[u]){
        if(v!=par){
            dfs(v,u,depth+1);
        }
    }
}
bool dfs1(ll u,ll par,ll e){
    if(u==e){
        return track[u]=1;
    }
    for(auto v:edge[u]){
        if(v!=par){
            track[v] = dfs1(v,u,e); 
            if(track[v]){
                return track[v];
            }           
        }
    }
    return 0;
}
int main(){
    ll n,u,v,st,en,ans=0,mid;
    sfl(n);
    for(ll i = 1;i < n;i++){
        sfl(u),sfl(v);
        edge[u].pb(v);
        edge[v].pb(u);
    }
    dfs(1,1,0);
    mx=0;
    st=x;
    dfs(st,st,0);
    ans += mx;
    en=x;
    //cout << ans << endl;
    dfs1(st,st,en);
    track[st]=1;
    queue<ll>q;
    for(ll i=1;i<=n;i++){
        if(track[i]){
            dis[i]=0;
            if(i!=st and i!=en){
                mid=i;
            }
            q.push(i);
        }
    }
    while(!q.empty()){
        u=q.front();
        q.pop();
        for(auto k:edge[u]){
            if(!track[k]){
                track[k]=1;
                dis[k]=dis[u]+1;
                q.push(k);
            }
        }
    }
    mx=0;
    for(ll i=1;i<=n;i++){
        if(dis[i]>mx){
            mx=dis[i];
            mid=i;
        }
    }
    ans += mx;
    pfl(ans);
    printf("%lld %lld %lld\n",st,mid,en);
    return 0;
}