#include <bits/stdc++.h>
using namespace std;

#define loop(i,n) for(int i = 0; i < n; i++)
#define pii pair<int, int>
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define vi vector<int>
#define pb push_back

typedef long long LL;

const LL INF = 1e18 + 5;
const int mod = 1e9 + 7;

#define vpii vector<pii>

struct Matrix {
    vector<vector<int> > a;

    Matrix(int sz) {
        a.resize(sz);
        loop(i, sz) a[i] = vi(sz, 0);
    }

    Matrix operator*(const Matrix& M2) {
        Matrix result(a.size());
        loop(i, a.size()) loop(j, M2.a[0].size()) loop(k, a[0].size()) {
            result.a[i][j] += (1ll * this->a[i][k] * M2.a[k][j]) % mod;
            result.a[i][j] %= mod;
        }
        return result;
    }

    Matrix eye(int sz) {
        Matrix res(sz);
        loop(i, sz) res.a[i][i] = 1;
        return res;
    }

    Matrix exp(LL pw) {
        Matrix res = eye(a.size());
        Matrix a = *this;
        while (pw > 0) {
            if (pw & 1)
                res = res * a;
            a = a * a;
            pw >>= 1;
        }
        return res;
    }

    vi mul(vi V) {
        vi res(V.size(), 0);

        loop(i, V.size()) loop(j, a[0].size()) {
            res[i] = (res[i] + 1ll * a[i][j] * V[j]) % mod;
        }
        return res;
    }
};

int main() {
#ifdef DEBUG
    freopen("in.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);
    LL n, m;
    cin >> n >> m;
    Matrix mat(m);
    mat.a[0][0] = mat.a[0][m - 1] = 1;
    for (int i = 1; i < m; i++) mat.a[i][i - 1] = 1;
    cout << mat.exp(n).mul(vi(m, 1))[m - 1] << endl;
    return 0;
}