#include <iostream>
#include <cstring>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <algorithm>
#include <cstdio>
#include <cassert>
#include <cassert>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define sz(s) (int)(s).size()
#define all(v) (v).begin(), (v).end()

const int N = (int)1e6;

int cnt[10][N], num[10][N];

int max_digit(int x) {
	int res = 0;
	while (x != 0) {
		res = max(res, x % 10);
		x /= 10;
	}
	return res;
}

int main() {
	REP(i, 10) REP(j, N) cnt[i][j] = num[i][j] = N;
	REP(i, 10) REP(j, N) {
		if (i == 0 && j == 0) {
			cnt[i][j] = 0;
			num[i][j] = 0;
			continue;
		}
		int y = max(i, max_digit(j));
		if (i == 0 && j - y <= 0 || j - y < 0) {
			cnt[i][j] = 1;
			num[i][j] = j - y;
		} else {
			cnt[i][j] = cnt[i][j - y] + 1;
			num[i][j] = num[i][j - y];
		}
	}
	long long n, res = 0;
	cin >> n;
	int a = n / N, b = n % N;
	for (int i = a; i >= 0; i--) {
		int d = max_digit(i);
		if (b == N) {
			b -= d;
			++res;
		}
		res += cnt[d][b];
		b = N + num[d][b];
	}
	cout << res << endl;
	return 0;
}