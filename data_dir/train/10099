#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
const int MOD = (int)998244353;
const int MAXN = (int)507;
const int infint = (int)1e9;
ll n, a[MAXN], visited[MAXN];
unordered_map<ll, ll> M, T;
ll forj2(ll x)
{
	ll c = (ll)sqrt(x);
	return c;
}
ll forj3(ll x)
{
	ll L = 1, R = x + 1;
	while(R - L > 1)
	{
		ll mid = (L + R) >> 1;
		if(((x / mid) / mid) / mid > 0)
			L = mid;
		else
			R = mid;
	}
	return L;
}
ll forj4(ll x)
{
	ll L = 1, R = x + 1;
	while(R - L > 1)
	{
		ll mid = (L + R) >> 1;
		if((((x / mid) / mid) / mid) / mid > 0)
			L = mid;
		else
			R = mid;
	}
	return L;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	for (int i = 0; i < n; i++)
	{
		if(a[i] == 1)
		{
			visited[i] = 1;
			continue;
		}
		ll c = forj4(a[i]);
		if(c * c * c * c == a[i])
			M[c] += 4, visited[i] = 1, a[i] = 1;
		if(a[i] == 1)
			continue;
			
		if(c * c == a[i])
			M[c] += 2, visited[i] = 1;
		c = forj3(a[i]);
		if(c * c * c == a[i])
			M[c] += 3, visited[i] = 1;
		
		c = forj2(a[i]);
		if(c * c == a[i])
			M[c] += 2, visited[i] = 1;
		
	}
	for (int i = 0; i < n; i++)
		if(!visited[i])
		{
			for (auto u : M)
				if(a[i] % u.first == 0)
				{
					M[u.first]++, M[a[i] / u.first]++, visited[i] = 1;
					break;
				}
		}
	set<ll> uni;
	for (int i = 0; i < n; i++)
		for (int j = i + 1; j < n; j++)
			if(__gcd(a[i], a[j]) != 1 && a[i] != a[j])
			{
				ll p = __gcd(a[i], a[j]);
				uni.insert(p);
				uni.insert(a[i] / p);
				uni.insert(a[j] / p);
			}
	for (int i = 0; i < n; i++)
		if(!visited[i])
			for (auto u : uni)
				if(a[i] % u == 0)
				{
					M[u]++;
					visited[i] = 1;
				}
	ll ans = 1;
	for (auto u : M)
		ans = (ans * (u.second + 1)) % MOD;
	for (int i = 0; i < n; i++)
		if(!visited[i])
			T[a[i]]++;
	
	for (auto u : T)
		ans = ans * (u.second + 1) % MOD * (u.second + 1) % MOD;
	cout << ans;
}
