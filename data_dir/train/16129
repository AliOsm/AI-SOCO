#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <stack>
#include <queue>
#include <cmath>
#include <utility>
using namespace std;
#define REP(I,N) for (I=0;I<N;I++)
#define rREP(I,N) for (I=N-1;I>=0;I--)
#define rep(I,S,N) for (I=S;I<N;I++)
#define rrep(I,S,N) for (I=N-1;I>=S;I--)
#define FOR(I,S,N) for (I=S;I<=N;I++)
#define rFOR(I,S,N) for (I=N;I>=S;I--)
typedef unsigned long long ULL;
typedef long long LL;
const int INF=0x3f3f3f3f;
const LL INFF=0x3f3f3f3f3f3f3f3fll;
const LL M=1e9+7;
const LL maxn=3e6+7;
const double eps=0.00000001;
LL gcd(LL a,LL b){return b?gcd(b,a%b):a;}
template<typename T>inline T abs(T a) {return a>0?a:-a;}
template<typename T>inline T powMM(T a,T b){T ret=1;for (;b;b>>=1ll,a*=a) ret=1ll*ret*a%M;return ret;}

vector<int> edge[maxn];
vector<int> value[maxn];
int len[maxn],root[maxn],num[maxn];
int mx,mxlen;
void dfs1(int u,int x,int length){//需要好多次(findmaxlen) 
	int i;
	if (length>len[u]) len[u]=length;
	if (length>mxlen) mx=u,mxlen=length;
	REP(i,edge[u].size())
		if (edge[u][i]!=x) dfs1(edge[u][i],u,length+1);
}
void dfs2(int x,int father){
	int i;
	root[x]=father;
	value[father].push_back(len[x]);
	num[father]++;
	REP(i,edge[x].size())
		if (!root[edge[x][i]]) dfs2(edge[x][i],father);
}
map<pair<int,int>,double> H;
double solve(int x,int y){
	x=root[x];y=root[y];
	if (value[x].size()>value[y].size()) swap(x,y);
	if (H.count({x,y})) return H[{x,y}];
	LL sum=0,k,all=0;
	int i,j,n,m;
	k=max(len[x],len[y]);
	n=value[x].size();
	m=value[y].size();
	j=m;
	all=0;
	REP(i,n){
		while (j<m&&value[x][i]+value[y][j]+1<=k) {sum-=value[y][j];j++;}
		while (j>0&&value[x][i]+value[y][j-1]+1>k) {j--;sum+=value[y][j];}
		all+=sum+(value[x][i]+1)*(m-j)+k*j;
//		printf("%d %d   %d  %d\n",sum,(value[x][i]+1)*(m-j),k*j,j);
	}
//	printf("%d ",all);
	H[{x,y}]=1.0*all/n/m;
	H[{y,x}]=1.0*all/n/m;
	return 1.0*all/n/m;
}
int n,m,q;
int i,j,k;
int u,v;
LL ans;
int main(){
	scanf("%d%d%d",&n,&m,&q);
	REP(i,m){
		scanf("%d%d",&u,&v);
		edge[u].push_back(v);
		edge[v].push_back(u);
	}
	FOR(i,1,n) if (!root[i]){
		mxlen=-1;dfs1(i,0,0);u=mx;
		mxlen=-1;dfs1(u,0,0);v=mx;
		dfs1(v,0,0);
		dfs2(u,u);
		sort(value[u].begin(),value[u].end());
	}
//	FOR(i,1,n) printf("%d ",len[i]);puts("");
//	FOR(i,1,n) printf("%d ",root[i]);puts("");
//	FOR(i,1,n){
//		REP(j,value[i].size()) printf("%d ",value[i][j]);
//		puts("");
//	}
	while (q--){
		scanf("%d%d",&u,&v);
		if (root[u]==root[v]) puts("-1");
		else printf("%.10lf\n",solve(u,v));
	}
}
/*
*/