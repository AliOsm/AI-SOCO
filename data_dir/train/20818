#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <iostream>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
typedef pair<char, int> pci;
typedef pair<int, char> pic;
const ll MOD = (ll)1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v;

char mat[2001][2002];
pii row[2001], col[2001];
int ff[2001][2001];
int ss[2001][2001];

int main() {
	int n, k;
	scanf("%d %d", &n, &k);

	for (int i = 1; i <= n; i++) {
		row[i].first = 1e9;
		row[i].second = -1;

		col[i].first = 1e9;
		col[i].second = -1;
	}

	for (int i = 1; i <= n; i++) {
		scanf("%s", mat[i] + 1);
		for (int j = 1; j <= n; j++)
			if (mat[i][j] == 'B') {
				row[i] = { min(row[i].first, j), max(row[i].second, j) };
				col[j] = { min(col[j].first, i), max(col[j].second, i) };
			}
	}

	int cnt = 0;
	for (int i = 1; i <= n; i++) {
		if (row[i].second == -1) cnt++;
		else {
			for (int j = row[i].first; j >= max(1, row[i].first - (k - (row[i].second - row[i].first + 1))); j--) {
				ff[i][j] += 1;
			}
		}

		if (col[i].second == -1) cnt++;
		else {
			for (int j = col[i].first; j >= max(1, col[i].first - (k - (col[i].second - col[i].first + 1))); j--) {
				ss[j][i] += 1;
			}
		}
	}

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			ss[i][j] += ss[i][j - 1];
			ff[j][i] += ff[j - 1][i];
		}
	}

	int mav = 0;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++) {
			int kk = ss[i][min(j + k - 1, n)] - ss[i][j - 1];
			kk += ff[(min(i + k - 1, n))][j] - ff[i - 1][j];

			mav = max(mav, kk);
		}

	printf("%d", mav + cnt);
}