#include <bits/stdc++.h>
using namespace std;
#define pf push_front
#define pb push_back
#define FOR(i,begin,end) for (LL i=begin;i<=end;i++)
#define rep(i,t) for (LL i=0;i<t;i++)
#define pii pair<LL,LL>
#define pi pair<pii,LL>
#define X first
#define Y second  
typedef long long LL;
typedef unsigned long long int ulli;
const LL maxN=1e5+7,Mod=1e9+7,INF=1e10,N=5000+7;
LL n,m,k,data[4*maxN],helper[4*maxN],help,c,remaind,res,t,l,r,type,ans,dp[maxN],frac;
string str;
LL left(LL x){return 2*x+1;}
LL right(LL x){return 2*x+2;}
LL power(LL x, LL y)
{
  if(!y)
    return 1;
  if(y==1)
    return x;
  LL help=power(x,y>>1);
  help*=help;
  help%=Mod;
  return (y&1) ? (help*x)%Mod : help;
}
LL modi(LL x){return (x+Mod)%Mod;}
void shift(LL node, LL st, LL en)
{
  if(helper[node]==-1 || en-st<2)
    return ;
  LL mid=(st+en)>>1;
  helper[left(node)]=helper[right(node)]=helper[node];
  data[left(node)]=(((modi(dp[mid-st]-1)*frac)%Mod)*helper[node])%Mod;
  data[right(node)]=(((modi(dp[en-mid]-1)*frac)%Mod)*helper[node])%Mod; 
  helper[node]=-1;
}
void build(LL node, LL st, LL en)
{
  helper[node]=-1;
  if(en-st<2)
  {
    data[node]=str[st]-'0';
    return ;
  }
  LL mid=(st+en)>>1;
  build(left(node),st,mid);
  build(right(node),mid,en);
  data[node]=(data[left(node)]*dp[en-mid])%Mod+data[right(node)];
  data[node]%=Mod;
}
void update(LL node , LL st, LL en, LL l, LL r, LL ch)
{
  if(en<=l || r<=st)
    return ;
  if(st>=l && en<=r)
  {
    helper[node]=ch;
    data[node]=(((modi(dp[en-st]-1)*frac)%Mod)*helper[node])%Mod;
    return ;
  }
  int mid=(st+en)>>1;
  shift(node,st,en);
  update(left(node),st,mid,l,r,ch);
  update(right(node),mid,en,l,r,ch);
  data[node]=(data[left(node)]*dp[en-mid])%Mod+data[right(node)];
  data[node]%=Mod;
}
LL common(LL st, LL en, LL l, LL r)
{
  if(l>=en || r<=st)
    return 0;
  if(st>=l && en<=r)
    return en-st;
  if(l>=st && r<=en)
    return r-l;
  if(st>=r && st<=en && en>=n)
    return l-st;
  if(r>st && r<=en && l>=en)
    return en-r;
}
LL get(LL node, LL st, LL en, LL l, LL r)
{
  if(en<=l || r<=st)
    return 0;
  if(st>=l && en<=r)
    return (data[node]*power(11,r-en))%Mod;
  shift(node,st,en);
  LL mid=(st+en)>>1;
  return (get(left(node),st,mid,l,r)+get(right(node),mid,en,l,r))%Mod;
}
main()
{
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(false);
  frac=power(10,Mod-2);
  dp[0]=1;
  FOR(i,1,100000)
    dp[i]=(11*dp[i-1])%Mod;
  cin>>n>>m>>k>>str;
  build(0,0,n);
  m+=k;
  while(m--)
  {
    cin>>type>>l>>r>>c;
    l--;
    if(type==1)
      update(0,0,n,l,r,c);
    else
    {
      if(c==(r-l) || get(0,0,n,l,r-c)==get(0,0,n,l+c,r))
        cout<<"YES\n";
      else
        cout<<"NO\n";
    }
  }
  return cout<<"\n",0;
}