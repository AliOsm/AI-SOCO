#include<stdio.h>
#include<algorithm>
#include<iostream>
#include<iomanip>
#include<functional>
#include<numeric>
#include<iterator>
#include<queue>
#include<deque>
#include<vector>
#include<cstring>
#include<cmath>
#include<utility>

using namespace std;
using ll = long long;

int main()
{
	int n, m;
	scanf("%d%d", &n, &m);
	vector < tuple < int, int, int >>e(m);
	vector < vector < pair < int, int >>>g(n + 1);
	for (int i = 0; i < m; ++i)
	{
		int u, v, z;
	    scanf("%d%d%d", &u, &v, &z);
		e[i] = make_tuple(u, v, z);
		g[u].emplace_back(v, z);
		g[v].emplace_back(u, z);
	}
	// shortest
	queue<int> q;
	vector<int> used(n + 1);
	vector<int> dist(n + 1, 0x7f7f7f7f);
	vector<int> cost(n + 1, 0x7f7f7f7f);
	dist[1] = 0;
	cost[1] = 0;
	for (q.push(1); q.size(); q.pop())
	{
	  auto u = q.front();
	  for (auto const &edge:g[u])
		{
			int v, c;
			tie(v, c) = edge;
			c ^= 1;
			if (dist[v] < dist[u] + 1)
				continue;
			if (dist[v] == dist[u] + 1 && cost[v] <= cost[u] + c)
				continue;
			dist[v] = dist[u] + 1;
			cost[v] = cost[u] + c;
			used[v] = u;
			q.push(v);
		}
	}
	
	for(int u = n, v = 0; u != used[u]; u = v) {
	  v = used[u];
	  used[u] = -1;
	}

    int k = m;
	for (int i = 0; i < m; ++i)
	{
		int u = get < 0 > (e[i]);
		int v = get < 1 > (e[i]);
		int &z = get < 2 > (e[i]);
		if (used[u] < 0 && used[v] < 0)
		  z = z ? 2 : 1;
		else if(z)
		  z = 0;
		else
		  z = 2;
	  k -= ((z&2) >> 1);
	}
	
	printf("%d\n", k);
	for(int i = 0; i < m; ++i) {
		int u = get < 0 > (e[i]);
		int v = get < 1 > (e[i]);
		int z = get < 2 > (e[i]);
		if(z > 1)
		  continue;
		printf("%d %d %d\n", u, v, z);
	}
}