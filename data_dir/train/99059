#include <bits/stdc++.h>
using namespace std;
#define ll long long
int ar[300005];
int tree[1200020];
int t,n;
void build(int s=0,int e=n-1,int p=1){
    if(s==e){
        tree[p]=ar[s];
        return;
    }
    int mid=(s+e)/2;
    build(s,mid,p*2);
    build(mid+1,e,p*2+1);
    tree[p]=min(tree[p*2],tree[p*2+1]);
}
void update(int x,int val,int s=0,int e=n-1,int p=1){
    if(x<s||x>e){
        return;
    }
    if(s==e){
        tree[p]=val;
        return;
    }
    int mid=(s+e)/2;
    update(x,val,s,mid,p*2);
    update(x,val,mid+1,e,p*2+1);
    tree[p]=min(tree[p*2],tree[p*2+1]);
}
int query(int l,int r,int s=0,int e=n-1,int p=1){
    if(l>e||r<s){
        return 1e9;
    }
    if(l<=s&&e<=r){
        return tree[p];
    }
    int mid=(s+e)/2;
    return min(query(l,r,s,mid,p*2),query(l,r,mid+1,e,p*2+1));
}
int idx[300005];
vector<vector<int>> vp;
int main() {
    //freopen("god_help_us.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin>>t;
    while(t--){
        cin>>n;
        vp = vector<vector<int>>(n);
        memset(idx,0,n*sizeof(idx[0]));
        for(int i=0;i<n;i++){
            cin>>ar[i];
            vp[--ar[i]].push_back(i);
        }
        build();
        bool res=true;
        for(int i=0;i<n;i++){
            int x;
            cin>>x;
            if(!res){
                continue;
            }
            x--;
            if(idx[x]==vp[x].size()){
                res=false;
            }
            else{
                int y=vp[x][idx[x]++];
                if(query(0,y)<x){
                    res=false;
                }
                else{
                    update(y,1e9);
                }
            }
        }
        if(res){
            cout<<"YES\n";
        }
        else{
            cout<<"NO\n";
        }
    }
    return 0;
}