#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <cmath>
#include <algorithm>
#include <assert.h>
#include <memory.h>
#include <string.h>
#include <complex>
#include <queue>
#include <cstdlib>
#include <ctime>
using namespace std;

#define ll long long
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x).size()

vector<int> v[5555];
vector<pair<int, int> > shop[5555];
bool vis[5555];

int solve(int s, int cnt, int sum) {
	memset(vis, 0, sizeof(vis));
	int step = 0;
	queue<int> q;
	q.push(s);
	vis[s] = true;
	multiset<pair<int, int> > st; // price, count
	ll allprice = 0;
	ll allcount = 0;
	while(!q.empty()) {
		for(int wtf = 0, omg = sz(q); wtf < omg; wtf++) {
			int s = q.front();
			q.pop();
			for(int i = 0; i < sz(shop[s]); i++) {
				st.insert(shop[s][i]);
				allprice += (ll)shop[s][i].first * (ll)shop[s][i].second;
				allcount += shop[s][i].second;
			}
			for(int i = 0; i < sz(v[s]); i++) {
				int nxt = v[s][i];
				if (!vis[nxt]) {
					vis[nxt] = true;
					q.push(nxt);
				}
			}
		}
		while(allcount > cnt) {
			multiset<pair<int, int> >::iterator it = st.end();
			--it;
			int oldcnt = it->second;
			int oldpr = it->first;
			st.erase(it);
			allcount -= oldcnt;
			allprice -= (ll)oldcnt * (ll)oldpr;

			if (allcount < cnt) {
				int newcnt = cnt - allcount;
				int newpr = oldpr;
				st.insert(mp(newpr, newcnt));
				allcount += newcnt;
				allprice += (ll)newcnt * (ll)newpr;
			}
		}
		if (allcount == cnt && allprice <= sum) {
			return step;
		}

		step++;
	}
	return -1;
}

int main() {
	//freopen("output.txt", "wt", stdout);
	//freopen("commuting.in", "rt", stdin);
	//freopen("commuting.out", "wt", stdout);

	int n, m;
	scanf("%d %d", &n, &m);
	for(int i = 0; i < m; i++) {
		int a, b;
		scanf("%d %d", &a, &b);
		v[a].pb(b);
		v[b].pb(a);
	}
	int w;
	scanf("%d", &w);
	for(int i = 0; i < w; i++) {
		int c, k, p;
		scanf("%d %d %d", &c, &k, &p);
		shop[c].pb(mp(p, k));
	}

	int q;
	scanf("%d", &q);
	for(int i = 0; i < q; i++) {
		int g, r, a;
		scanf("%d %d %d", &g, &r, &a);
		printf("%d\n", solve(g, r, a));
	}


	return 0;
}
