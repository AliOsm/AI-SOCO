#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())

const int N = 1005;
LL n;
LL ara[N];

vector<LL>G[N];
LL indeg[N];
LL vis[N];
stack<LL>st;
void dfs(LL node)
{
    vis[node] = 1;
    for(LL i : G[node]){
        if(vis[i] == 0)dfs(i);
    }
    st.push(node);
}
int main()
{
    scanf("%lld",&n);
    FOR(i,1,n)scanf("%lld",&ara[i]);

    for(LL i = 1;i <= n;i++){
        for(LL j = 1;j <= n;j++){
            if(ara[i] % 3 == 0 and ara[i]/3 == ara[j]){
                G[i].push_back(j);
                indeg[j]++;
            }
            if(ara[i] * 2 == ara[j]){
                G[i].push_back(j);
                indeg[j]++;
            }
        }
    }
    for(LL i = 1;i <= n;i++){
        if(!vis[i])dfs(i);
    }
    while(!st.empty()){
        cout << ara[st.top()] << " ";
        st.pop();
    }
}
