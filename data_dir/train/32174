#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef complex<ll> point;
#define F first
#define S second

struct info
{
	ll l, m, w;
};

struct info2
{
	ll a, b, c;
	string how;
};

vector<info2> solve(vector<info> t)
{
	int n = t.size();
	vector<info2> r;

	function<void(int, ll, ll, ll, string)> f = [&](int p, ll a, ll b, ll c, string s)
	{
		if (p == n)
		{
			r.push_back({ a, b, c, s });
			return;
		}

		// LMW
		f(p+1, a+t[p].l, b+t[p].m, c, s+"LM");
		f(p+1, a+t[p].l, b, c+t[p].w, s+"LW");
		f(p+1, a, b+t[p].m, c+t[p].w, s+"MW");
	};

	f(0, 0, 0, 0, "");

	return move(r);
}

int main()
{
    #ifdef DGC
        //freopen("a.txt", "r", stdin);
        //freopen("b.txt", "w", stdout);
    #endif

    ios_base::sync_with_stdio(0), cin.tie(0);

    int n;
    cin >> n;
    vector<info> a(n);
    for (auto &i : a) cin >> i.l >> i.m >> i.w;

    if (n <= 10)
    {
    	auto r = solve(a);
    	int sz = r.size(), p = -1;
    	for (int i = 0; i < sz; ++i)
    		if (r[i].a == r[i].b && r[i].a == r[i].c && (p == -1 || r[i].a > r[p].a))
    			p = i;
    	if (p == -1)
    		cout << "Impossible\n";
    	else
    	{
    		auto &ans = r[p].how;
        	int l = ans.length();
        	for (int i = 0; i < l; i += 2)
        		cout << ans[i] << ans[i+1] << "\n";
    	}
    	return 0;
    }

    map<pair<ll, ll>, int> mp;
    int sz1 = n/2, sz2 = n-sz1;

    vector<vector<info>> b(2);
    for (int i = 0; i < n; ++i)
    	b[i>=sz1].push_back(a[i]);

    auto r1 = solve(b[0]);
    auto r2 = solve(b[1]);

    for (auto &i : r1)
    {
    	ll x = i.a-i.b;
    	ll y = i.b-i.c;
    	auto it = mp.find({ x, y });
    	if (it == mp.end() || r1[it->S].a < i.a)
    		mp[{ x, y }] = &i-&r1[0];
    }

    const ll inf = numeric_limits<ll>::min();
    ll g = inf; string ans = "";
    for (auto &i : r2)
    {
    	ll x = -(i.a-i.b);
    	ll y = -(i.b-i.c);
    	auto it = mp.find({ x, y });
    	if (it != mp.end() && r1[it->S].a+i.a > g)
    		g = r1[it->S].a+i.a, ans = r1[it->S].how+i.how;
    }

    if (g == inf)
    	cout << "Impossible\n";
    else
    {
    	int l = ans.length();
    	for (int i = 0; i < l; i += 2)
    		cout << ans[i] << ans[i+1] << "\n";
    }

    return 0;
}
