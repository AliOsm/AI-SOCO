#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-7;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, m;

ll ts[400005];
int tmx[400005];

ll go(int v, int tl, int tr, int l, int r){
  if(l > tr || r < tl) return 0;
  if(l <= tl && r >= tr) return ts[v];
  int tm = (tl + tr) / 2;
  return go(v + v, tl, tm, l, r) + go(v + v + 1, tm + 1, tr, l, r);
}

void upd(int v, int tl, int tr, int l, int r, int x){
  if(l > tr || r < tl) return;
  if(tl == tr){
    ts[v] %= x;
    tmx[v] %= x;
    return;
  }
  int tm = (tl + tr) / 2;
  if(tmx[v + v] >= x) upd(v + v, tl, tm, l, r, x);
  if(tmx[v + v + 1] >= x) upd(v + v + 1, tm + 1, tr, l, r, x);
  tmx[v] = max(tmx[v + v], tmx[v + v + 1]);
  ts[v] = ts[v + v] + ts[v + v + 1];
}

void updOne(int v, int tl, int tr, int pos, int val){
  if(tl == tr){
    ts[v] = tmx[v] = val;
    return;
  }
  int tm = (tl + tr) / 2;
  if(pos <= tm) updOne(v + v, tl, tm, pos, val); else
  updOne(v + v + 1, tm + 1, tr, pos, val);
  tmx[v] = max(tmx[v + v], tmx[v + v + 1]);
  ts[v] = ts[v + v] + ts[v + v + 1];
}

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  scanf("%d %d", &n, &m);
  forn(i, n){
    int x; scanf("%d", &x);
    updOne(1, 0, n - 1, i, x);
  }
  forn(i, m){
    int t; scanf("%d", &t);
    if(t == 1){
      int l, r; scanf("%d %d", &l, &r); --l; --r;
      printf("%I64d\n", go(1, 0, n - 1, l, r));
    }
    if(t == 2){
      int l, r, x; scanf("%d %d %d", &l, &r, &x); --l; --r;
      upd(1, 0, n - 1, l, r, x);
    }
    if(t == 3){
      int pos, val; scanf("%d %d", &pos, &val); --pos;
      updOne(1, 0, n - 1, pos, val);
    }
  }
  return 0;
}
