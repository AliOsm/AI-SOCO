#include<bits/stdc++.h>
using namespace std;

#define ll long long

#define fr(i,a,b) for (ll i = (a), _b = (b); i <= _b; i++)
#define frr(i,a,b) for (ll i = (a), _b = (b); i >= _b; i--)
#define rep(i,n) for (ll i = 0, _n = (n); i < _n; i++)
#define repr(i,n) for (ll i = n - 1; i >= 0; i--)
#define fill(ar,val) memset(ar, val, sizeof(ar))
#define fill0(ar) fill((ar), 0)
#define debug(x) cout<<#x<<": "<<x<<endl

#define ld double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;
typedef vector<int> vi;

#define INF 1000000000000000000

int main()
{
	ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif

    ll n,m;
    cin >> n >> m;

    ll a[n][m];

    rep(i,n)
    {
        rep(j,m)
        {
            cin >> a[i][j];
        }
    }

    ll dp1[n+2][m+2];
    ll dp2[n+2][m+2];
    ll dp3[n+2][m+2];
    ll dp4[n+2][m+2];

    rep(i,n+2)
    {
        dp1[i][0] = 0;
        dp2[i][0] = 0;
        dp3[i][0] = 0;
        dp4[i][0] = 0;
        dp1[i][m+1] = 0;
        dp2[i][m+1] = 0;
        dp3[i][m+1] = 0;
        dp4[i][m+1] = 0;
    }

    rep(i,m+2)
    {
        dp1[0][i] = 0;
        dp2[0][i] = 0;
        dp3[0][i] = 0;
        dp4[0][i] = 0;
        dp1[n+1][i] = 0;
        dp2[n+1][i] = 0;
        dp3[n+1][i] = 0;
        dp4[n+1][i] = 0;
    }

    fr(i,1,n)
    {
        fr(j,1,m)
        {
            dp1[i][j] = a[i-1][j-1] + max(dp1[i-1][j], dp1[i][j-1]);
        }
    }

    frr(i,n,1)
    {
        fr(j,1,m)
        {
            dp2[i][j] = a[i-1][j-1] + max(dp2[i+1][j], dp2[i][j-1]);
        }
    }

    frr(i,n,1)
    {
        frr(j,m,1)
        {
            dp3[i][j] = a[i-1][j-1] + max(dp3[i+1][j], dp3[i][j+1]);
        }
    }

    fr(i,1,n)
    {
        frr(j,m,1)
        {
            dp4[i][j] = a[i-1][j-1] + max(dp4[i-1][j], dp4[i][j+1]);
        }
    }

    ll ans = 0;

    fr(i,2,n-1)
    {
        fr(j,2,m-1)
        {
            ll x = max(dp1[i][j-1]+dp3[i][j+1]+dp2[i+1][j]+dp4[i-1][j], dp1[i-1][j]+dp3[i+1][j]+dp2[i][j-1]+dp4[i][j+1]);
            ans = max(ans, x);
        }
    }
    cout << ans << endl;
}
