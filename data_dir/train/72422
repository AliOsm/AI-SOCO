// Let's bring the sky down :)
#include<bits/stdc++.h>
#define ll long long
using namespace std;
const int N = 1e5 + 5;
const int K = 2e1;
vector<int> v[N];
int anc[N][K];
int h[N];
bool vis[N];
void dfs(int s, int d, int P){
    h[s] = d;
    vis[s] = 1;
    anc[s][0] = P;
    for(int i = 1; i < K; i++)
        anc[s][i] = anc[anc[s][i - 1]][i - 1];
    for(auto i : v[s])
        if(!vis[i])
            dfs(i, d + 1, s);
}
int LCA(int x, int y){
    if(h[x] > h[y]) swap(x, y);
    int d = h[y] - h[x];
    for(int i = 0; i < K; i++)
        if((1 << i) & d)
            y = anc[y][i];
    if(x == y) return x;
    for(int i = K - 1; i >= 0; i--){
        if(anc[x][i] != anc[y][i])
            x = anc[x][i], y = anc[y][i];
    }
    return anc[x][0];
}
int dist(int x, int y){
    int lca = LCA(x, y);
    return((h[x] + h[y] - 2 * h[lca]) + 1);
}
int main()
{
    ios_base ::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    int n, q;
    cin >> n >> q;
    for(int i = 2; i <= n; i++){
        int x;
        cin >> x;
        v[x].push_back(i);
        v[i].push_back(x);
    }
    int x, y, z;
    dfs(1, 0, 0);
    while(q--){
        cin >> x >> y >> z;
        vector<int> v;
        v.push_back(x);
        v.push_back(y);
        v.push_back(z);
        sort(v.begin(), v.end());
        int ans = 0;
        do{
            x = v[0], y = v[1], z = v[2];
            ans = max(ans, (dist(x, z) + dist(y, z) - dist(x, y) + 1) / 2);
        }while(next_permutation(v.begin(), v.end()));
        cout << ans << "\n";
    }
return 0;
}
