#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <valarray>
#include <random>
#include <bitset>
#include <iomanip>


typedef long long tint;
typedef unsigned long long utint;
typedef long double ldouble; 


#define forn(i,n) for(tint i=0;i<(tint)(n); i++)
#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define debug(x) cout << #x << " = "  << x << endl

using namespace std;



void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

tint gcd (tint a, tint b)
{
	if (a == 0)
		return b;
	return gcd(b%a,a);
}

const tint MAXN = 2048;
tint a[MAXN];

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n;
	while (cin >> n)
	{
		tint acc = -1, ones = 0;
		forn(i,n)
		{
			cin >> a[i];
			if (i == 0)
				acc = a[i];
			else
				acc = gcd(acc,a[i]);
			ones += (a[i] == 1);
		}
		if (acc != 1) // si hay divisor comun a todos (distinto de 1)
			cout << "-1\n";
		else if (ones > 0) // si hay al menos un 1
			cout << n - ones << "\n";
		else
		{
			tint cInf = 0, cSup = n; 
			while (cSup - cInf > 1) // minima cantidad de operaciones para obtener un 1
			{
				tint l = (cInf+cSup) / 2;
				bool sePuede = false;
				forn(i,n-l+1)
				{
					tint g = a[i];
					forn(k,l-1)
						g = gcd(g,a[i+k+1]);
					sePuede |= (g == 1);
				}
				if (sePuede)
					cSup = l;
				else
					cInf = l;
			}
			cout << n-2+cSup << "\n";
		}
			
				
	}
	return 0;
}



