/*-----Deep D. Savani------------
-------DAIICT,INDIA--------------
*/
#include<bits/stdc++.h>
#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define mod 1000000007
#define deb(x) cout<<#x<<" : "<<x<<endl;
#define deb2(x,y) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<endl;
#define deb3(x,y,z) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<"\t"<<#z<<" : "<<z<<endl;
#define nax 100010
#define FIO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
typedef long long ll;
    
using namespace std;

//#include <ext/pb_ds/assoc_container.hpp> 
//#include <ext/pb_ds/tree_policy.hpp> 
//using namespace __gnu_pbds; 

//#define T ll  
//#define ordered_set tree<T, null_type,less<T>, rb_tree_tag,tree_order_statistics_node_update> 
    
long long modulo(long long base,long long exponent,long long modulus);
long long choose(ll n,ll k);
ll inverse(ll a,ll m);

vector<ll> a;
vector<ll> tree[12];  

void build()
{
	for(int i=0;i<12;i++)
		tree[i].resize(4*nax);
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
}

void update(ll node,ll nl,ll nr,ll ind ,ll ele,vector<ll> &tree)
{
	if(nl==nr)
	{
		tree[node]+=ele;
		//a[nl]+=ele;
		return;
	}
	ll mid=(nl+nr)/2;

	if(nl<=ind && ind<=mid)
		update(2*node+1,nl,mid,ind,ele,tree);
	else
		update(2*node+2,mid+1,nr,ind,ele,tree);
	tree[node]=tree[2*node+1]+tree[2*node+2];
}

ll querry(ll node,ll nl,ll nr,ll l,ll r,vector<ll> &tree)
{
	if(l>r || nl>nr || l>nr || nl>r)
		return 0;
	if(l<=nl && nr<=r)
		return tree[node];

	ll mid=(nl+nr)/2;
	ll p1=querry(2*node+1,nl,mid,l,r,tree);
	ll p2=querry(2*node+2,mid+1,nr,l,r,tree);
	return p1+p2;
}
      
int main(){

    build();
    
    ll n,k;
    cin>>n>>k;

    a.resize(n);
    for(int i=0;i<n;i++)
    	cin>>a[i];

    for(int i=0;i<n;i++)
    {
    	update(0,0,nax-1,a[i],1,tree[1]);
    	//deb2(a[i],tree[1][0]);
    	for(int j=2;j<=(k+1);j++ )
    	{
    		ll temp=querry(0,0,nax-1,0,a[i]-1,tree[j-1]);
    		//deb3(i,j,temp);
    		update(0,0,nax-1,a[i],temp,tree[j]);
    	}
    }
    cout<<tree[k+1][0]<<endl;



    return 0;
}
    
        
    
long long modulo(long long base,long long exponent,long long modulus)
{
    if(modulus ==1)
        return 0;
    
    long long result=1;
    base=base % modulus;
    while(exponent>0)
    {
        if(exponent%2==1)
        {
            result=(result*base) % modulus;

        }
        exponent=exponent>>1;
        base = (base*base) % modulus;
    }
        return result;
}
    
long long choose(ll n,ll k)
{
    if(k==0)  return 1;
    return (n* choose(n-1,k-1))/k;
}
    
void EE(ll a,ll b,ll &co1,ll &co2)
{
    if(a%b==0)
    {
        co1=0;
        co2=1;
        return;
    }
    EE(b,a%b,co1,co2);
    ll temp=co1;
    co1=co2;
    co2=temp-co2*(a/b);
}
    
ll inverse(ll a,ll m)
{
    ll x,y;
    EE(a,m,x,y);
    if(x<0) x+=m;
    return x;
}