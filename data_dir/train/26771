#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

pair<pair<int, int>, int> a[200000];
int n, x;
int minC[200000];

int main() {
	ios_base::sync_with_stdio(0);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	cin >> n >> x;
	for (int i = 0; i < 200000; i++) {
		minC[i] = -1;
	}
	
	for (int i = 0; i < n; i++) {
		cin >> a[i].first.second >> a[i].first.first >> a[i].second;
	}
	
	sort(a, a + n);
	int ans = -1;
	priority_queue<pair<int, int> > q;
	
	for (int i = n - 1; i >= 0; i--) {
		int l = a[i].first.second;
		int r = a[i].first.first;
		int cost = a[i].second;
		while (!q.empty()) {
			int qL = q.top().first;
			int qInd = q.top().second;
			int qR = a[qInd].first.first;
			int qCost = a[qInd].second;
			if (qL > r) {
				if (minC[qR - qL + 1] == -1) {
					minC[qR - qL + 1] = qCost;
				} else {
					minC[qR - qL + 1] = min(minC[qR - qL + 1], qCost);
				}
				q.pop();
			} else {
				break;
			}
		}
		if (r - l + 1 < x) {
			int lft = x - (r - l + 1);
			if (minC[lft] != -1) {
				int currCost = cost + minC[lft];
				if (ans == -1) ans = currCost;
				else ans = min(ans, currCost);
			}
		} 
		q.push(make_pair(l, i));
	}
	
	cout << ans;
	
	return 0;
}