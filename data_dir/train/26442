#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	int t;
	cin >> t;
	
	while(t--){
		int n;
		cin >> n;
		
		vector<int> v(n + 1);
		vector<vector<int>> idx(n + 1);
		for(int i = 1; i <= n; i++){
			cin >> v[i];
			idx[v[i]].push_back(i);
		}
		
		vector<vector<bool>> L(n + 2, vector<bool>(n + 2)), R(n + 2, vector<bool>(n + 2));
		
		for(int i = 1; i <= n; i++){
			L[i] = L[i - 1];
			L[i][v[i]] = true;
		}
		
		for(int i = n; i >= 1; i--){
			R[i] = R[i + 1];
			R[i][v[i]] = true;
		}
		
		bool ok = false;
		
		for(int i = 1; i <= n && !ok; i++){
			for(int j = 0; j < (int)idx[i].size() && !ok; j++){
				int pos = idx[i][j];
				
				for(int x = 1; x <= n && !ok; x++){
					if(L[pos - 1][x] && R[pos + 1][x])
						ok = true;
					
					if(j != (int)idx[i].size() - 1){
						int pos1 = idx[i][j + 1];
						if(L[pos - 1][x] && R[pos1 + 1][x])
							ok = true;
					}
				}
				
				
			}
		}
		
		cout << (ok ? "YES" : "NO") << endl;
	}

	return 0;
}

