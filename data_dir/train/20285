#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;
const int N = 200010;

inline int in() {int x; scanf("%d",&x); return x;}
inline ll lin() {ll x; scanf("%I64d",&x); return x;}

vector < pii > V[N];

struct Info {
    int l, r, cost;
}inp[N];

bool AS(Info A, Info B){
    if(A.l == B.l) return A.r < B.r;
    return A.l < B.l;
}

int main(){
    int n = in(), x = in();
    for(int i = 1; i <= n; i++){
        inp[i].l = in();
        inp[i].r = in();
        inp[i].cost = in();
    }
    sort(inp + 1, inp + n + 1, AS);
    for(int i = 1; i <= n; i++){
        int len = inp[i].r - inp[i].l + 1;
        V[len].pb(mp(inp[i].l, inp[i].cost));
    }
    for(int i = 1; i < N; i++){
        if(V[i].size() > 0){
            for(int j = V[i].size() - 2; j >= 0; j--){
                V[i][j].se = min(V[i][j].se, V[i][j + 1].se);
            }
        }
    }
    int ans = INT_MAX;
    for(int i = 1; i <= n; i++){
        int tmp = inp[i].cost, rem = x - (inp[i].r - inp[i].l + 1);
        if(rem > 0){
            if(V[rem].size() > 0){
                int l = inp[i].r + 1;
                if(V[rem].back().fs >= l){
                    int lo = 0, hi = V[rem].size() - 1, pos = V[rem].size() - 1;
                    while(lo <= hi){
                        int mid = (lo + hi) / 2;
                        if(V[rem][mid].fs < l){
                            lo = mid + 1;
                        }else {
                            hi = mid - 1;
                            pos = mid;
                        }
                    }
                    tmp += V[rem][pos].se;
                    ans = min(ans, tmp);
                }
            }
        }
    }
    if(ans == INT_MAX) ans = -1;
    printf("%d\n", ans);
}
