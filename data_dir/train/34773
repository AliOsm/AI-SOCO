#include<bits/stdc++.h>
#define god dimasi5eks
#pragma GCC optimize("O3")
#define fi first
#define se second
#define pb push_back
#define pf push_front
#define mod 1000000007

using namespace std;

typedef long long ll;

int t;

int r, c, k;

char a[102][102];
bool viz[102][102];

int ct[102];

char xx[102][102];
char getlet(int nr)
{
    if(nr <= 26)
        return 'A' + (nr - 1);
    if(nr <= 52)
        return 'a' + (nr - 27);
    return '0' + (nr - 53);
}

int ox[] = {-1, 0, 1, 0};
int oy[] = {0, 1, 0, -1};

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> t;
    for(; t; --t)
    {
        cin >> r >> c >> k;
        int total = 0;
        for(int i = 1; i <= r; ++i)
        {
            cin >> (a[i] + 1);
            for(int j = 1; j <= c; ++j)
            {
                viz[i][j] = 0;
                xx[i][j] = 0;
                if(a[i][j] == 'R')
                    ++total;
            }
        }
        for(int i = 1; i <= k; ++i)
        {
            ct[i] = total / k;
            if(total % k)
                ++ct[i], --total;
        }
        for(int i = 1; i <= r; ++i)
        {
            if(i % 2 == 1)
            {
                for(int j = 1; j <= c; ++j)
                    if(a[i][j] == 'R' && !viz[i][j])
                    {
                        int am = ct[k];
                        --k;
                        int L = i;
                        int C = j;
                        int dir = 1;
                        while(am)
                        {
                            xx[L][C] = getlet(k + 1);
                            if(a[L][C] == 'R')
                                --am;
                            viz[L][C] = 1;
                            if(dir == 1)
                            {
                                ++C;
                                if(C == c+1)
                                    C = c, ++L, dir = 2;
                            }
                            else
                            {
                                --C;
                                if(C == 0)
                                    C = 1, ++L, dir = 1;
                            }
                        }
                    }
            }
            else
            {
                for(int j = c; j >= 1; --j)
                    if(a[i][j] == 'R' && !viz[i][j])
                    {
                        int am = ct[k];
                        --k;
                        int L = i;
                        int C = j;
                        int dir = 2;
                        while(am)
                        {
                            xx[L][C] = getlet(k + 1);
                            if(a[L][C] == 'R')
                                --am;
                            viz[L][C] = 1;
                            if(dir == 1)
                            {
                                ++C;
                                if(C == c+1)
                                    C = c, ++L, dir = 2;
                            }
                            else
                            {
                                --C;
                                if(C == 0)
                                    C = 1, ++L, dir = 1;
                            }
                        }
                    }
            }
        }
        deque<pair<int, int> >d;
        for(int i = 1; i <= r; ++i)
            for(int j = 1; j <= c; ++j)
                if(xx[i][j])
                {
                    d.push_back({i, j});
                    while(!d.empty())
                    {
                        pair<int, int> are = d[0];
                        d.pop_front();
                        for(int ro = 0; ro <= 3; ++ro)
                        {
                            int vX = are.first + ox[ro];
                            int vY = are.second + oy[ro];
                            if(viz[vX][vY] || (vX == 0 || vX == r+1 || vY == 0 || vY == c+1))
                                continue;
                            viz[vX][vY] = 1;
                            d.push_back({vX, vY});
                            xx[vX][vY] = xx[i][j];
                        }
                    }
                }
        for(int i = 1; i <= r; cout << '\n', ++i)
            for(int j = 1; j <= c; ++j)
                cout << xx[i][j];
    }
    return 0;
}

