// There is nothing in a caterpillar that tells you its going to be a butterfly!
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define pi pair<long double,long double>
#define f first
#define s second
#define pb push_back
#define rep(i,n) for(int i=0;i<n;i++)
#define mod 1000000007
#define mp make_pair
vector<pair<long double,long double> >L; // stack of lines
bool bad(pi a,pi b,pi c){
	return	(long double)(a.s-b.s)*(long double) (c.f-a.f) <(long double) (a.s-c.s)* (long double) (b.f-a.f)  ;
}
void add(long double m, long double c){
	int sz;
	while(L.size()>=2){
		sz=L.size()-1;
		if(bad( L[sz],L[sz-1],mp(m,c) )  ){
			L.pop_back();
		}
		else break;
	}
	L.pb(mp(m,c));
}

// two pointer method if all x are going to be increasing

int pt=0;
long double query(long double x){
	pt=min(pt,(int)L.size()-1);
	while(pt+1<L.size() and L[pt+1].f*x+L[pt+1].s < L[pt].f*x+L[pt].s ) pt++;
	return L[pt].f * x + L[pt].s;
}

long double pref[200011];
long double sum[200011];
long double t[200011];
long double rev[200011];
long double dp[200011][52];
int main() {
    int n, k, u, v;
    cin >> n >> k;
    for (int i = 1; i <= n; i++) {
        cin >> t[i];
        pref[i] = pref[i-1] + t[i];
        rev[i] = rev[i-1] + 1.0/t[i];
        sum[i] = sum[i-1] + pref[i]/t[i];
    }
    for (int i = 1; i <= n; i++) {
        dp[i][1] = sum[i];
    }
    for (int p = 2; p <= k; p++) {
        L.clear();
        pt = 0;
        for (int i = 1; i <= n; i++) {
            dp[i][p] = 1e20;
        }
        for (int i = 2; i <= n; i++) {
            add(-pref[i-1], rev[i-1] * pref[i-1] - sum[i-1] + dp[i-1][p-1] );
            dp[i][p] = min(dp[i][p], query(rev[i]) + sum[i]);
        }
    }
    cout<<setprecision(10)<<fixed<<dp[n][k]<<"\n";
}
