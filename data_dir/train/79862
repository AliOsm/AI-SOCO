#include <cstdio>
#include <iostream>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
#include <memory.h>
#include <complex>
#include <time.h>
#pragma comment(linker, "/STACK:100000000")
using namespace std;

#define mp make_pair
#define pb push_back
#define ll long long
#define sz(x) (int)(x).size()

ll dist[2020];
ll distyyy[2020];
ll x[2020], y[2020];

int main() {
    //freopen("input.txt","rt",stdin);
    //freopen("output.txt","wt",stdout);
    //freopen("palindrome.in","rt",stdin);
    //freopen("palindrome.out","wt",stdout);
	
	int n;
	ll x1, y1, x2, y2;
	scanf("%d %lld %lld %lld %lld", &n, &x1, &y1, &x2, &y2);

	for(int i = 0; i < n; i++) {
		scanf("%lld %lld", &x[i], &y[i]);
		dist[i] = (x[i] - x2) * (x[i] - x2) + (y[i] - y2) * (y[i] - y2);
		distyyy[i] = (x[i] - x1) * (x[i] - x1) + (y[i] - y1) * (y[i] - y1);
	}
	ll res = 1000000000LL;
	res *= res;
	for(int i = 0; i < n; i++) {
		ll ddd = (x[i] - x1) * (x[i] - x1) + (y[i] - y1) * (y[i] - y1);
		ll minval = 0;
		for(int j = 0; j < n; j++) {
			if(distyyy[j] > ddd) {
				minval = max(minval, dist[j]);
			}
		}
		res = min(res, minval + ddd);
	}
	for(int i = 0; i < n; i++) {
		ll ddd = (x[i] - x2) * (x[i] - x2) + (y[i] - y2) * (y[i] - y2);
		ll minval = 0;
		for(int j = 0; j < n; j++) {
			if(dist[j] > ddd) {
				minval = max(minval, distyyy[j]);
			}
		}
		res = min(res, minval + ddd);
	}
	printf("%lld", res);
	
    return 0;
}