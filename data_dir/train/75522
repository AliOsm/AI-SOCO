// Author: thecodekaiser
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
#define MXN 2005 

char mat[MXN][MXN];
int neigh[MXN][MXN];

int dx[]   = {0, 0, 1, -1};
int dy[]   = {1, -1, 0, 0};
char ch[]  = {'<', '>', '^', 'v'};
char ich[] = {'>', '<', 'v', '^'};

void solve()
{
    int N, M;

    cin >> N >> M;

    queue<pair<int,int> > q;

    for(int i = 0; i < N; i++)
        cin >> mat[i];

/*
    cout << "THIS: \n";
    for(int i = 0; i < N; i++)
    {
        for(int j = 0; j < M; j++)
            cout << mat[i][j];
        cout << endl;
    }

    cout << endl;
*/
    int total = 0;
    for(int i = 0; i < N; i++)
    {
        for(int j = 0; j < M; j++)
        {
            if(mat[i][j] != '*')
            {
                neigh[i][j] = 0;

                for(int k = 0; k < 4; k++)
                    if(i + dx[k] >= 0 and i + dx[k] <= N-1)
                        if(j + dy[k] >= 0 and j + dy[k] <= M-1)
                            if(mat[i + dx[k]][j + dy[k]] != '*')
                                neigh[i][j]++;

                total++;

                // If it only has one neighbour
                if(neigh[i][j] == 1)        
                {
                //  cout << i << "," << j << endl;
                    q.push(pair<int,int>(i,j));
                }
            }
        }
    }

/*
    for(int i = 0; i < N; i++)
    {
        for(int j = 0; j < M; j++)
        {
            cout << neigh[i][j] << " ";
        }
        cout << endl;
    }
*/
    int flag = 0;
    while(!q.empty())
    {
        pair<int,int> temp = q.front();
        q.pop();

        int i = temp.first, j = temp.second;

        //cout << "i: " << i << " j: " << j << endl;

        if(mat[i][j] != '.') continue;
        //cout << "Total: " << total << endl;

        for(int k = 0; k < 4; k++)
            if(i + dx[k] >= 0 and i + dx[k] <= N-1)
              if(j + dy[k] >= 0 and j + dy[k] <= M-1)
                if(mat[i + dx[k]][j + dy[k]] == '.')
                {
                mat[i][j] = ch[k];
                mat[i + dx[k]][j + dy[k]] = ich[k];

                //cout << "Decreasing total by 2 at: " << i << "," << j << " " << i + dx[k] << "," << j + dy[k] << endl;
                total -= 2;     // Decreased by 2

                for(int l = 0; l < 4; l++)
                {
                    if(i + dx[k] + dx[l] >= 0 and i + dx[k] + dx[l] <= N-1)
                      if(j + dy[k] + dy[l] >= 0 and j + dy[k] + dy[l] <= M-1)
                        if(mat[i + dx[k] + dx[l]][j + dy[k] + dy[l]] == '.')
                        {
                        neigh[i + dx[k] + dx[l]][j + dy[k] + dy[l]]--;  // Decrease its neighbour by one
                        if(neigh[i + dx[k] + dx[l]][j + dy[k] + dy[l]] == 0)
                        {
                            flag = 1; break;
                        }
                        if(neigh[i + dx[k] + dx[l]][j + dy[k] + dy[l]] == 1)
                            q.push(pair<int,int>(i + dx[k] + dx[l], j + dy[k] + dy[l]));
                        }
                }
                }
    }

    //cout << "Flag: " << flag << " Total: " << total << endl;

    if(flag or total)
        cout << "Not unique\n";
    else
    {
        for(int i = 0; i < N; i++)
        {
            for(int j = 0; j < M; j++)
                cout << mat[i][j];
            cout << endl;
        }
    }

    return;
}

int main()
{
    solve();
    return 0;
}   

