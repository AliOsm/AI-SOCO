#include <bits/stdc++.h>
#define fst first
#define snd second
#define fore(i,a,b) for(int i=a,ThxDem=b;i<ThxDem;++i)
#define pb push_back
#define ALL(s) s.begin(),s.end()
#define FIN ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define SZ(s) int(s.size())
using namespace std;
typedef long long ll;
typedef pair<ll,ll> ii;
 
// return # of lattice points s.t. ax+by<=c, x,y>0 (a,b is positive integer)
ll f(ll a, ll b, ll c) {
 if(c <= 0) return 0;
 if(a < b) swap(a, b);
 ll m = c/a;
 if(a == b)
  return m*(m-1)/2;
 else {
  ll k = (a-1)/b, h = (c-a*m)/b;
  return f(b, a-b*k, c-b*(k*m+h)) + k*m*(m-1)/2 + m*h;
 }
}
 
// return # of lattice points s.t. ax+by<=c, 0<x<=X, 0<y<=Y (a,b is positive integer)
inline ll g(ll a, ll b, ll c, ll X, ll Y) {
 if(a*X+b*Y<=c) return X*Y;
 return f(a, b, c) - f(a, b, c-a*X) - f(a, b, c-b*Y) + f(a, b, c-a*X-b*Y);
}
 
ll a[100010],mp[100010];
vector<ii> b;
vector<ll> sum,elem;
 
ll calc(ll n, ll k){	//intervals lower 
	return n*(n+1)/2 - (n-k)*(n-k+1)/2;
}
 
ll brute(ll n, ll k){
	ll ans=0;
	fore(i,0,n) fore(j,i,n) ans+=j-i+1<=k;
	return ans;
}
 
ll bru(ll aa, int x, int y){
	ll v=sum[y-1]-sum[x];
	v=aa-v;
	if(v<=0) return 0;
	ll ans=0;
	fore(i,1,b[x].snd+1) fore(j,1,b[y].snd+1) ans+=v>0&&i*b[x].fst+j*b[y].fst<=v;
	return ans;
}
 
ll get(ll x){	//amount of ranges with sum <= x
	int n=SZ(b);
	b.pb({1e15+1,1});
	sum.pb(sum.back()+1e15+1);
	ll ans=0;
	int i=0,j=0;
	
	while(i<n){	//considero izq = i, der=j
		if(i>j){
			j++;
			continue;
		}
		
		
		ll mid=sum[j]-sum[i];
		if(mid+b[i].fst+b[j+1].fst<=x){// puedo subir j
			ll inmid=(i==j)?0:elem[j-1]-elem[i];	//cantidad de elementos del medio
			//cout << "using " << i << " " << j+1 << " " << inmid << " " << mid << "\n";
			ans+=inmid*b[j].snd;	//combinar los de j con los que ya tenia al medio
			ans+=g(b[i].fst,b[j+1].fst,x-mid,b[i].snd,b[j+1].snd);
			//cout << g(b[i].fst,b[j+1].fst,x-mid,b[i].snd,b[j+1].snd) << "\n";
			j++;
		}
		else{//debo subir i
			i++;
			if(i<j){
				mid=sum[j-1]-sum[i];
				ans+=g(b[i].fst,b[j].fst,x-mid,b[i].snd,b[j].snd);
			}
		}
	}
	//ll wawa=0;
	//fore(i,0,n) fore(j,i+1,n) wawa+=bru(x,i,j);
	//cout << wawa << " <<---"<<"\n";
	fore(i,0,n){
		ll k=min(b[i].snd,x/b[i].fst);
		//cout << "for " << i << " adding " << calc(b[i].snd,k) << "\n";
		ans+=calc(b[i].snd,k);
	}
	return ans;
}
 
int oper(int a, int b){
	if(a>b) swap(a,b);
	return a<0?b:__gcd(a,b);
}
struct STree{
	vector<int> t; int n;
	STree(int n):n(n),t(2*n+5,0){}
	void upd(int p, int value){
		for(t[p += n]=value;p>1;p>>=1) t[p>>1]=oper(t[p],t[p^1]);
	}
	int query(int l, int r){ // [l, r)
		int res=0;
		for(l+=n,r+=n;l<r;l>>=1,r>>=1){
			if(l&1) res=oper(res,t[l++]);
			if(r&1) res=oper(res,t[--r]);
		}
		return res;
	}
};
 
int main(){FIN;
	int n; cin>>n;
	STree st(n);
	fore(i,0,n) cin>>a[i],st.upd(i,a[i]);
	fore(i,0,n){
		int pos=i,pre=a[i];
		while(pos<n){	//aca empieza a ser pre
			int l=pos,r=n-1;
			while(l<=r){
				int mid=(l+r)/2;
				if(st.query(i,mid+1)==pre) l=mid+1;
				else r=mid-1;
			}
			mp[pre]+=l-pos;
			pre=st.query(i,l+1); pos=l;
		}
	}
	fore(i,0,100010) if(mp[i]) b.pb({i,mp[i]});
	sum.resize(SZ(b)); elem.resize(SZ(b));
	sum[0]=b[0].fst*b[0].snd; elem[0]=b[0].snd;
	fore(i,1,SZ(b)){
		sum[i]=sum[i-1]+b[i].fst*b[i].snd;
		elem[i]=elem[i-1]+b[i].snd;
	}
	
	
	
	ll l=1,r=1e15,all=elem.back()*(elem.back()+1)/2;
/*
	vector<ll> asd,sms,test;
	for(auto x:b) fore(i,0,x.snd) asd.pb(x.fst);
	for(auto x:asd) cout << x << " "; cout << endl;
	fore(i,0,n) fore(j,i,n){
		ll x=0;
		fore(k,i,j+1) x=oper(x,a[k]);
		test.pb(x);
	}
	sort(ALL(test));
	assert(test==asd);
	fore(i,0,SZ(asd)) fore(j,i,SZ(asd)){
		ll xxx=0; fore(k,i,j+1)xxx+=asd[k];
		sms.pb(xxx);
	}
	sort(ALL(sms));
	for(auto x:sms) cout << x << " "; cout << "\n";
	for(auto x:b) cout << "("<<x.fst<<","<<x.snd<<") "; cout << "\n";
	cout << "all is " << all << endl;
	ll x; cin>>x;
	int cnt=0; for(auto y:sms) cnt+=y<=x;
	cout << get(x) << " " << cnt << "\n";
	return 0;
*/
 
	while(l<=r){
		ll mid=(l+r)/2;
		if(2ll*get(mid)>=all) r=mid-1;
		else l=mid+1;
	}
	cout << l << "\n";
}