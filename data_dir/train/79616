// rc.cpp : Defines the entry point for the console application.
//

#include <math.h>

#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <functional>
#include <iomanip>
#include <iterator>
#include <regex>

using namespace std;

#define PI 3.14159265358979323846
#define EPS 1.E-8

#define FIN(a, n) { for (ul _ = 0; _ < n; ++_) cin >> (a)[_]; }
#define FOUT(a, n) { cout << a[0]; for (ul _ = 1; _ < n; ++_) cout << ' ' << a[_]; cout << '\n'; }

typedef unsigned char uc;
typedef unsigned int ui;
typedef unsigned long long ul;
typedef long long sl;


struct tts
{
    char a[101];
    int ca;
    int l;

    bool operator<(const tts& o) const
    {
        return l < o.l;
    }
};

tts f[200];
char r[201];
char z[200];

bool check(int n, int q)
{
    for (int i = 0; i < q; i += 2) {
        int cc = i / 2 + 1;
        if (strncmp(f[i].a, z, cc) == 0 && strncmp(f[i + 1].a, z + n - cc, cc) == 0) {
            r[f[i].ca] = 'P';
            r[f[i + 1].ca] = 'S';
        }
        else if (strncmp(f[i].a, z + n - cc, cc) == 0 && strncmp(f[i + 1].a, z, cc) == 0) {
            r[f[i].ca] = 'S';
            r[f[i + 1].ca] = 'P';
        }
        else
            return false;
    }

    return true;
}

int main(int argc, char* argv[])
{
    ios_base::sync_with_stdio(false);

    int n;
    cin >> n;

    int q = 2 * n - 2;
    for (int i = 0; i < q; ++i) {
        cin >> f[i].a;
        f[i].ca = i;
        f[i].l = strlen(f[i].a);
    }

    sort(f, f + q);

    bool ok = false;
    if (strncmp(f[q - 1].a, f[q - 2].a + 1, n - 2) == 0) {
        strcpy(z, f[q - 2].a);
        z[n - 1] = f[q - 1].a[n - 2];
        ok = check(n, q);
    }

    if (!ok) {
        strcpy(z, f[q - 1].a);
        z[n - 1] = f[q - 2].a[n - 2];
        check(n, q);
    }

    cout << r << endl;
    return 0;
}
