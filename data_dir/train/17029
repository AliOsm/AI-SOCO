#include <bits/stdc++.h>
using namespace std;
#define x first
#define y second
#define ll long long
#define pi pair<int,int>
#define pl pair<ll,ll>
#define pd pair<double,double>
#define ld long double
#define pld pair<ld,ld>
#define lg length()
#define sz size()
#define vi vector<int>
#define vl vector<ll>
#define vp vector<pi>
#define vpl vector<pl>
#define pb push_back
#define INF 1000000005
#define LINF 1000000000000000005

int n,m,x,ans,t,a[45][45],dp[2][1100000],v[2][1100000],g[2][1100005],s[2],w[1100005],f[25],h[1100005];

string str;

map<string,int> p;

set <int> q;

void Find(int id, int mask){
	if(v[id][mask]) return;
	v[id][mask]=1;
	if(mask==0){
		g[id][mask]=1;
		return;
	}
	int f,cnt=0;
	for(int i=0;i<s[id];i++){
		if(mask&(1<<i)) Find(id,mask^(1<<i)),f=i,dp[id][mask]=max(dp[id][mask],dp[id][mask^(1<<i)]),cnt++;
	}
	if(g[id][mask^(1<<f)]){
		int gd=1;
		for(int i=0;i<f;i++){
			if(mask&(1<<i)){
				if(id==0 && a[i+1][f+1]) gd=0;
				if(id==1 && a[i+s[0]+1][f+s[0]+1]) gd=0;
			}
		}
		g[id][mask]=gd;
	}
	if(g[id][mask]) dp[id][mask]=max(dp[id][mask],cnt);
}

void Calc(int mask){
	if(h[mask]) return;
	h[mask]=1;
	if(mask==0){
		w[mask]=(1<<s[1])-1;
		ans=max(ans,dp[1][w[mask]]);
		return;
	}
	int l;
	for(int i=0;i<s[0];i++){
		if(mask&(1<<i)) Calc(mask^(1<<i)),l=i;
	}
	w[mask]=w[mask^(1<<l)]&f[l];
	ans=max(ans,dp[0][mask]+dp[1][w[mask]]);
}

int32_t main(){
	ios_base :: sync_with_stdio(0); cin.tie(); cout.tie();
#ifdef LOCAL_DEFINE
	ifstream cin("input.in");
#endif

	cin >> n >> m;
	for(int i=1;i<=n;i++){
		cin >> x;
		if(x==1){
			for(int i : q){
				for(int j : q){
					a[i][j]=1;
				}
			}
			q.clear();
		}
		else{
			cin >> str;
			if(!p[str]) t++,p[str]=t;
			q.insert(p[str]);
		}
	}
	for(int i : q){
		for(int j : q){
			a[i][j]=1;
		}
	}
	q.clear();
	s[0]=m/2; s[1]=m-s[0];
	Find(0,(1<<s[0])-1); Find(1,(1<<s[1])-1);
	
	for(int i=0;i<s[0];i++){
		for(int j=0;j<s[1];j++){
			if(!a[i+1][j+s[0]+1]) f[i]+=(1<<j);
		}
	}
	Calc((1<<s[0])-1);
	cout << ans;
		
#ifdef LOCAL_DEFINE
	cerr << "\nTime elapsed: " << 1.0*clock()/CLOCKS_PER_SEC << " \n";
#endif
}
