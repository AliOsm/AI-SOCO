#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, greater<>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//998244353;
const int base = 2187;
const double eps = 1e-8;
const int N = 200'000;
const int LOGN = 18;

int n, m, k;

void solve(int test)
{
  cin >> n;
  int mx1 = 0, mx2 = 0;
  for (int i = 0; i < n; ++i) {
    int x; cin >> x;
    if (x) {
      mx1 = max(mx1, n - x + 1);
    }
  }
  int r = 0;
  vector<int> a(n, -1);
  for (int i = 0; i < n; ++i) {
    int x;
    cin >> x;
    if (x) {
      --x;
      r = max(r, i + 1 + n - x);
      if (i >= x) {
        a[x] = i - x;
      }
      else {
        mx2 = max(mx2, i + 1 + n - x);
      }
    }
  }
  int c = *max_element(a.begin(), a.end());
  if (c == -1) {
    cout << n << '\n';
  }
  else if (c >= mx1 && c >= mx2 && count(a.begin(), a.end(), c) + count(a.begin(), a.end(), -1) == n) {
    cout << c << '\n';
  }
  else {
    cout << r << '\n';
  }
}

void precalc()
{
}

int main()
{
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i)
    solve(i);
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
