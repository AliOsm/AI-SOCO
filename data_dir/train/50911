#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
#define int ll

const ll MOD = 1e9+7;

ll m, d;

ll dp[2][2100][2100];

vector <int> vec;

ll rec(int pos, int pref, int ost){
    if (pos == vec.size()){
        if (ost == 0)
            return 1;
        return 0;
    }
    if (dp[pref][pos][ost] != -1)
        return dp[pref][pos][ost];
    int mx = 9;
    if (pref == 1)
        mx = vec[pos];
    ll ans = 0;
    for (int i = 0; i <= mx; i++){
        if (pos % 2  == 1 && i != d)
            continue;
        if (pos % 2 == 0 && i == d)
            continue;
        //cout << pos << ' ' << i << endl;
        int nxtPref = 0;
        if (i == vec[pos])
            nxtPref = pref;
        ans = (ans + rec(pos+1, nxtPref, (ost*10+i)%m)) % MOD;
    }
    return dp[pref][pos][ost] = ans;
}

ll f(vector <int> curVec){
    vec = curVec;
    memset(dp, -1, sizeof(dp));
    return rec(0, 1, 0);
}

 main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    cin >> m >> d;
    string a, b;
    cin >> a >> b;
    vector <int> vec1, vec2;
    for (int i = 0; i < a.size(); i++){
        vec1.push_back(a[i]-'0');
    }
    for (int i = 0; i < b.size(); i++){
        vec2.push_back(b[i]-'0');
    }
    int curans = 1;
    int curMod = 0;
    for (int i = 0; i < vec1.size(); i++){
        if (i % 2 == 0 && vec1[i] == d){
            curans = 0;
            break;
        }
        if (i % 2 == 1 && vec1[i] != d){
            curans = 0;
            break;
        }
        curMod = (curMod * 10 + vec1[i]) % m;
    }
    if (curMod != 0)
        curans = 0;
    cout << (f(vec2)-f(vec1)+curans+MOD)%MOD;


}
