#include <bits/stdc++.h>
using namespace std;

int n;
int a[155];

typedef unsigned long long ull;

const ull B = 1e9 + 9;

unordered_map<ull, vector<int>> c;

bool trial(int x) {
	vector<int> b(n);

	for (int i = 0; i < n; i++) {
		b[i] = a[i] ^ x;
	}

	for (int i = 0; i + 1 < n; i++) if (__builtin_popcountll(b[i]) != __builtin_popcountll(b[i + 1])) {
		return false;
	}

	return true;
}
int main() {
	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}

	for (int mask = 0; mask < (1 << 15); mask++) {
		vector<int> b(n);

		for (int i = 0; i < n; i++) {
			b[i] = (a[i] >> 15) ^ mask;
		}

		ull h = 0;

		for (int i = 1; i < n; i++) {
			int delta = __builtin_popcountll(b[i]) - __builtin_popcountll(b[0]);
			delta += 15;

			h = h * B + delta;
		}

		c[h].push_back(mask);
	}

	for (int mask = 0; mask < (1 << 15); mask++) {
		vector<int> b(n);

		for (int i = 0; i < n; i++) {
			b[i] = (a[i] & ((1 << 15) - 1)) ^ mask;
		}

		ull h = 0;

		for (int i = 1; i < n; i++) {
			int delta = __builtin_popcountll(b[0]) - __builtin_popcountll(b[i]);
			delta += 15;

			h = h * B + delta;
		}

		if (!c.count(h)) continue;

		for (auto u: c[h]) {
			if (trial((u << 15) | mask)) {
				printf("%d\n", (u << 15) | mask);
				return 0;
			}
		}
	}

	puts("-1");

	return 0;
}

