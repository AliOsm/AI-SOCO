/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 09-May-2020 22:27:11
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> inline void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 1e5 + 7;
const int inf = 1e9 + 7;


int solve() {
    int n; Int(n);
    vector<int> a(n);
    vector<bool> has(n + 2);
    for (int &x : a) {
        Int(x);
        has[x] = true;
    }

    vector<bool> good(n + 2);
    for (int i = 0; i < n - 1; ++i) {
        int sum = a[i];
        for (int j = i + 1; j < n; ++j) {
            sum += a[j];
            if (sum > n) {
                break;
            }
            if (has[sum]) {
                good[sum] = true;
            }
        }
    }

    int cnt = 0;
    for (int x : a) {
        if (good[x]) {
            ++cnt;
        }
    }

    printf("%d\n", cnt);

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0;
    Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}