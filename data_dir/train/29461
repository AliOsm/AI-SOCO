#include <bits/stdc++.h>
using namespace std;

int N;
vector<int> edges[200000];

int64_t sz[200000], dp[200000];
void dfs(int i, int p){
    sz[i] = 1;
    for(int j : edges[i]) if(j != p){
        dfs(j, i);
        dp[i] += dp[j];
        sz[i] += sz[j];
    }
    dp[i] += sz[i];
}

int64_t ans;
void dfs2(int i, int p, int64_t updp){
    ans = max(ans, dp[i] + updp + N - sz[i]);
    for(int j : edges[i]) if(j != p) dfs2(j, i, dp[i] - dp[j] + updp - sz[j] + N - sz[i]);
}


int main(){
    cin >> N;
    for(int i=0; i<N-1; i++){
        int a, b;
        cin >> a >> b;
        edges[a-1].push_back(b-1);
        edges[b-1].push_back(a-1);
    }

    dfs(0, -1);
    dfs2(0, -1, 0);
    cout << ans << endl;
    return 0;
}
