#include <stdio.h>
#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define sz(a) (int)a.size()
#define fi first
#define se second

using namespace std;
//using namespace __gnu_pbds;

//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 100000 + 1;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;

void print(vector<int> &a)
{
    for (int i : a)
        cout << i << " ";
    cout << endl;
}

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("lasers.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    int n;
    cin >> n;
    vector<pair<int, int> > a(n);
    rep(i, 0, n)
        cin >> a[i].fi >> a[i].se;
    sort(a.begin(), a.end());
    ll dp[n][n];
    dp[0][0] = a[0].se;
    ll mi = dp[0][0];
    rep(i, 1, n)
    {
        ll mi1 = big;
        rep(j, 0, i + 1)
        {
            if (i == j)
                dp[i][j] = a[i].se + mi;
            else
                dp[i][j] = dp[i - 1][j] + a[i].fi - a[j].fi;
            mi1 = min(mi1, dp[i][j]);
        }
        mi = mi1;
    }
    cout << mi;
    return 0;
}
