/*
▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄██████████████▒▒▐▌
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐
 
*/
#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>
 
using namespace std;
 
#define ll long long
#define ld long double
#define null NULL
#define prev prev228
#define next next228
#define index index228
#define count count228

const int N = 100100;

int n, m;

int r[N];

vector< pair<int, int> > g[N];

vector<int> control[N];


int color[N];

struct Edge
{
	int u, v, t;
	Edge() {}
	Edge(int _u, int _v, int _t) {
		u = _u;
		v = _v;
		t = _t;
	}
};


void dfs(int v, int col = 1) {
	color[v] = col;
	for (int i = 0; i < (int)g[v].size(); ++i) {
		int to = g[v][i].first;
		int type = g[v][i].second;
		if (color[to]) continue;
		int new_col = col;
		if (type == 0) {
			new_col = 3 - col;
		}
		dfs(to, new_col);
	}
}



int main() {
	scanf("%d %d", &n, &m);
	for (int i = 1; i <= n; ++i) {
		scanf("%d", &r[i]);
	}
	for (int i = 1; i <= m; ++i) {
		int x;
		scanf("%d", &x);
		for (int j = 0; j < x; ++j) {
			int num;
			scanf("%d", &num);
			control[num].push_back(i);
		}
	}
	vector< Edge > edges;
	set<int> vertex;
	for (int i = 1; i <= n; ++i) {
		g[control[i][0]].push_back({control[i][1], r[i]});
		g[control[i][1]].push_back({control[i][0], r[i]});
		vertex.insert(control[i][0]);
		vertex.insert(control[i][1]);
		edges.push_back({control[i][0], control[i][1], r[i]});
	}
	for (auto i : vertex) {
		if (!color[i]) {
			dfs(i);
		}
	}
	bool joke = true;
	for (int i = 0; i < (int)edges.size(); ++i) {
		int u = edges[i].u, v = edges[i].v, t = edges[i].t;
		if ((t == 0 && color[u] == color[v]) || (t == 1 && color[u] != color[v])) {
			joke = false;
			break;
		}
	}
	if (joke) {
		puts("YES");
	} else {
		puts("NO");
	}
    return 0;
}










