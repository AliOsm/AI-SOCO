/*

▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄██████████████▒▒▐▌ // monetochka
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐
TAYA
*/
#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,abm,mmx,tune=native")
#pragma GCC optimize("fast-math")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>
   
using namespace std;
  
#define ll long long
#define ld double
#define null NULL
#define prev prev228
#define index index228
#define left left228
#define right right228
#define hash hash228
#define firn(i, n) for (int i = 0; i < (int)n; ++i)
#define forn(i, n) for (int i = 1; i <= (int)n; ++i)
#define int long long

template<typename T> inline void uin(T &a, T b) {
    if (b < a) a = b;
}
  
template<typename T> inline void uax(T &a, T b) {
    if (b > a) a = b;
}

const int maxn = 1000 + 228, mod = 998244353;


int c[maxn][maxn], dp[maxn];


int mul(int a, int b) {
	a *= b;
	if (a >= mod) a %= mod;
	return a;
}


void add(int &x, int y) {
	x += y;
	if (x >= mod) x -= mod;
}


int addi(int x, int y) {
	add(x, y);
	return x;
}


signed main() {
    ios_base::sync_with_stdio(false);
	cin.tie(0);
	int n;
	cin >> n;
	vector<int> a(n + 1);
	forn(i, n) {
		cin >> a[i];
	}
	forn(i, n / 2) {
		swap(a[i], a[n - i + 1]);
	}
	c[0][0] = 1;
	forn(i, n) {
		c[i][0] = 1;
	}
	forn(i, n) {
		forn(j, n) {
			c[i][j] = addi(c[i - 1][j], c[i - 1][j - 1]);
		}
	}
	int res = 0;
	dp[0] = 1;
	forn(i, n) {
		if (a[i] <= 0) {
			continue;
		}
		int len = a[i] + 1;
		for (int j = 1; j <= i - len + 1; ++j) {
			int cur = mul(dp[j - 1], c[i - j][len - 1]);
			add(dp[i], cur);
		}
		add(res, dp[i]);
	}
	cout << res << "\n";
	return 0;
}
