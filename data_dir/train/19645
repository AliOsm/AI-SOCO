//#pragma GCC optimize ("O3")
#include <bits/stdc++.h>

using namespace std;

long long get(long long x) {
    long long ans = 0;
    while (x) {
        ans += x / 2;
        x /= 2;
    }
    return ans;
}

const long long mod = 1e6 + 3;

long long fastpower(long long b, long long p) {
    long long res = 1;
    long long v = b;
    while (p) {
        if (p & 1) res = (res * v) % mod;
        p >>= 1;
        v = (v * v) % mod;
    }
    return res;
}

int main() {
   //freopen("in.txt", "rt", stdin);
    long long n, k;
    scanf("%lld %lld", &n, &k);
    if (n < 64) {
        unsigned long long s = 1;
        s <<= n;
        if (s < k) {
            puts("1 1");
            return 0;
        }
    }
    if (k >= mod) {
        long long p = get(k - 1) % (mod - 1);
        long long d = (((k - 1) % (mod-1)) * (n % (mod - 1))) % (mod - 1);
        d = (d - p + mod - 1) % (mod - 1);
        d = fastpower(2ll, d);
        printf("%lld %lld", d, d);
        return 0;
    }
    long long a = 1, b = 1;
    long long y = fastpower(2, n);
    for (long long i = 1; i < k; ++i) {
        long long x = (y + mod - i) % mod;
        a = (a * x) % mod;
        b = (b * y) % mod;
    }
    long long p = get(k - 1) % (mod - 1);
    p = fastpower(2ll, p);
    p = fastpower(p, mod - 2);
    a = (a * p) % mod;
    b = (b * p) % mod;
    a = (b - a + mod) % mod;
    printf("%lld %lld", a, b);
}