#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define endl '\n'
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int32_t , int32_t >
#define Endl '\n'
#define itn int


#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("-O3")

using namespace std;


mt19937 gen(chrono::system_clock::now().time_since_epoch().count());

const ll mod = 998244353;
const int32_t FFTM = 998244353;
const int32_t N = 2e5 + 10;

int32_t SX[4] = {0 , 1 , -1 , 0};
int32_t SY[4] = {1 , 0 , 0 , -1};

int n;
vector < int > a;

int mi;

int solve(int pos){
    int ans = 1e9;
    set < int > st;
    for (int i = 0;i < pos; ++i){
        if (st.count(a[i])){
            cout << mi;
            exit(0);
        }
        st.insert(a[i]);
    }
    int r_pos = 1e9;
    for (int i = n - 1;i >= pos; --i){
        if (st.count(a[i])){
            r_pos = i;
            break;
        }
        st.insert(a[i]);
    }
    ans = r_pos - pos + 1;
    return ans;
}

int32_t  main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
    cin >> n;
    a.resize(n);
    set < int > ok;
    for(auto &to : a){
        cin >> to;
        ok.insert(to);
    }
    if ((int)ok.size() == n){
        cout << 0;
        return 0;
    }
    mi = 400000;
    for (int i = 0;i < n; ++i)
        mi = min(mi, solve(i));
    cout << mi;
    return 0;
}
