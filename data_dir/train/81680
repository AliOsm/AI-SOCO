
/*
 * Author    : raj1307 - Raj Singh
 * Date      : 12.04.2020
 */

#pragma GCC optimize("Ofast")
// #pragma GCC optimize("unroll-loops")
// #define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
using namespace std;

//#define DEBUG
#ifdef DEBUG
#define deb(...) cerr<<"Line:"<<__LINE__<<" "; __f(#__VA_ARGS__, __VA_ARGS__)
#define debarr(a,n) cerr<<#a<<" : ";for(int i=0;i<n;i++) cerr<<a[i]<<" "; cerr<<endl;
#define print(arr) for (auto it = arr.begin(); it != arr.end(); ++it) cerr << *it << " "; cerr << endl;
#define debmat(mat,row,col) cerr<<#mat<<" :\n";for(int i=0;i<row;i++) {for(int j=0;j<col;j++) cerr<<mat[i][j]<<" ";cerr<<endl;}
template<typename Arg1>
void __f(const char *name, Arg1 &&arg1) {
	cerr<<name<<" : "<<arg1<<endl;
}
template<typename Arg1, typename ... Args>
void __f(const char *names, Arg1 &&arg1, Args &&... args) {
	const char *comma=strchr(names+1,',');
	cerr.write(names,comma-names)<<" : "<<arg1<<" | ";
	__f(comma+1,args...);
}

#else
#define deb(...) {}
#define debarr(a,n) {}
#define debmat(mat,row,col) {}
#define debarr(a,n) {}
#define endl "\n"
#endif

#define fio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define fr(i, a, b) for(int i = (a); i < (b); ++i)
#define fb(i, b, a) for(int i = (b); i > (a); --i)
#define rr return 
#define mp make_pair
#define pb push_back
#define sz(x) ((int)x.size())
#define int long long
#define ll long long
#define ld long double
#define all(v) (v).begin(), (v).end()
typedef pair<int, int> ii;;
int max(int a,int b){if(a>b) return a; else return b;}
int min(int a,int b){if(a>b) return b; else return a;}
int gcd(int a,int b){ return (b == 0) ? a : gcd(b, a % b);}
inline int lcm(int a,int b){ return a / gcd(a, b) * b;}
inline int normalize(int x,int mod){ x %= mod; if (x < 0) x += mod; return x;}

int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};
string abc="abcdefghijklmnopqrstuvwxyz";
const double PI=acosl(-1);
const int mod = 1000*1000*1000+7;
//const int mod = 998244353;
const int inf = 1e18 +5;

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }

int floor1(int n,int k){
    if(n%k == 0 || n >= 0)return n/k;
    return (n/k)-1;
}

int ceil1(int n,int k){
    return floor1(n+k-1,k);
}

int powm(int a, int b) {
	int res=1;
	while(b) {
		if(b&1)
			res=(res*a)%mod;
		a=(a*a)%mod;
		b>>=1;
	}
	return res;
}


const int N = 1e5 + 5;


int n,m;
int a[N];
int b[N];

const int LG=log2(N) + 1;
vector<int>g[N];


int tim=0;  // taken from https://github.com/Ashishgup1/Competitive-Coding/blob/master/LCA%20(with%20Time%20Traversal%20DFS).cpp
int parent[LG][N];
int tin[N], tout[N], level[N];

 
void dfs(int k, int par, int lvl)
{
	tin[k]=++tim;
	parent[0][k]=par;
	level[k]=lvl;
	for(auto it:g[k])
	{
		if(it==par)
			continue;
		dfs(it, k, lvl+1);
	}
	tout[k]=tim;
}
 
void precompute()
{
	for(int i=1;i<LG;i++)
		for(int j=1;j<=n;j++)
			if(parent[i-1][j])
				parent[i][j]=parent[i-1][parent[i-1][j]];
}
 
int LCA(int u, int v)
{
	if(level[u]<level[v])
		swap(u,v);
	int diff=level[u]-level[v];
	for(int i=LG-1;i>=0;i--)
	{
		if((1<<i) & diff)
		{
			u=parent[i][u];
		}
	}
	if(u==v)
		return u;
	for(int i=LG-1;i>=0;i--)
	{
		if(parent[i][u] && parent[i][u]!=parent[i][v])
		{
			u=parent[i][u];
			v=parent[i][v];
		}
	}
	return parent[0][u];
}
 
int dist(int u, int v)
{
	return level[u] + level[v] - 2*level[LCA(u, v)];
}

int ff=0;

int maxx(int u,int par,int f,int z){

	int ans=0;

	if(sz(g[u])==1 and g[u][0]==par){
		return 0;
	}

	int same=0;

	for(int i:g[u]){

		if(i==par){
			continue;
		}
	
		if(sz(g[i])==1){

			if(f==1){

			}
			else{
				if(same==0){
					++ans;
					same=1;
				}
			}
			continue;
		}
		else{
			ans++;
			
			if(f==1 and z==1)
				ans+=maxx(i,u,1,0);
			else
				ans+=maxx(i,u,0,0);
		}
	}						



	return ans;

}







void solve(){   
        
	

	cin>>n;
	fr(i,0,n-1){
		int u,v;
		cin>>u>>v;
		g[u].pb(v);
		g[v].pb(u);
	}
	dfs(1,0,1);
	precompute();

	vector<int>l;
	fr(i,1,n+1){
		if(sz(g[i])==1){
			l.pb(i);
		}
	}

	m=sz(l);
	int mn=1;
	fr(i,0,m){

		fr(j,i+1,m){
			if((dist(l[i],l[j]))%2==1){
				mn=3;
				break;
			}
		}
		break;

	}

	int mx=0;

	
	mx=maxx(l[0],0,1,1);


	cout<<mn<<" "<<mx<<endl;
















	








    
}




signed main() {
	fio;
	#ifndef ONLINE_JUDGE 
    	freopen("input.txt", "r", stdin); 
    	freopen("output.txt", "w", stdout); 
    	//freopen("error.txt", "w", stderr); 
	#endif 
	cout<<fixed<<setprecision(10);
	int t=1;
	//cin>>t;  // UNCOMMENT FOR TEST-CASES
	//precompute();
	while(t--) {
		solve();
	}	
	return 0;
}


