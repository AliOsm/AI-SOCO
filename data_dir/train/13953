//I_F_A
#include "bits/stdc++.h"
using namespace std;

#define N 1001
vector<long long> graph[N][N];
long long n,m;
bool found = false;
vector<bool> visited(N);

void dfs(long long src,long long des,long long color){
	
	if(found){
		
		return;
	}
	if(src == des){
	
		found = true;
		return;
	}
	visited[src] = true;
	for(vector<long long>::iterator it = graph[color][src].begin() ; it != graph[color][src].end() ; it++){
		
		if(visited[*it] == false){
			
			dfs(*it,des,color);
		}
	} 
}

int main(){
	
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	for(long long i=0;i<=101;i++){
		for(long long j=0;j<=101;j++){
			graph[i][j].clear();
		}
	}
	
	cin >> n >> m;
	
	for(long long i=1;i<=m;i++){
		
		long long a,b,c;
		cin >> a >> b >> c;
		
		graph[c][a].push_back(b);
		graph[c][b].push_back(a);
	}
	
	long long q;
	cin >> q;
	
	while(q--){
		
		long long a,b;
		cin >> a>> b;
		
		long long ans = 0;
		for(long long color = 0 ; color <= 100 ; color++){
			
			for(long long i=0;i<=n;i++){
				
				visited[i] = false;
			}
			found = false;
			dfs(a,b,color);
			
			if(found)
				ans++;
		}
		cout << ans << "\n";
	}
}