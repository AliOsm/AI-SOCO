#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <climits>
#include <cctype>
#include <cmath>
#include <sstream>
#include <cstdlib>
#include <climits>
#include <ctime>
#include <set>
#include <map>
#include <numeric>
#include <utility>
#include <deque>
#include <queue>
#include <stack>
#include <iomanip>
#include <complex>
#include <list>
#include <bitset>
#include <fstream>
#include <limits>
#include <memory.h>
#include <tgmath.h>
#include <complex>
#include <assert.h>
using namespace std;

typedef complex<int> point;
#define dp(a, b) ((conj(a) * b).real())
#define cp(a, b) ((conj(a) * b).imag())
#define angle(a) (atan2(a.imag(), a.real()))
#define rotate0(a, angle) (a * exp(point(0, angle)))
#define length(a) (hypot(a.imag(), a.real()))
#define rotateAr(a, angle, around) (rotate0(((a) - (around)),(angle)) + around)
#define reflect(a, m) (conj((a)/(m)) * (m))
#define normalize(a) ((a) / length(a));
typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define per(i, start, end) for(int i = (int)start-1; i >= end; --i)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const long double PI = 3.14159265358979323846;
const long double eps = (1e-7);
int dcmp(long double x, long double y)
{
	// -1 means left is bigger
	return fabs(x - y) <= eps ? 0 : x > y ? -1 : 1;
}
int n;
ll k;
vector<int> h;
ll freq[200005];
ll cum[200005]; // i is a height and cum[i] is number of blocks above i
int minHeight;
int bs(ll x)
{
	int l = 0, r = 200004;
	while(l < r)
	{
		int mid = l + (r - l)/2;
		if (cum[mid] <= x)
			r = mid;
		else
			l = mid + 1;
	}
	if (cum[l] <= x && cum[l] != 0)
		return l;
	return -1;
}

bool valid(ll s)
{
	ll cut = 0;
//	cout << "s = " << s << endl;
	int cnt = 0;
	for (;;) // make slices until minHeight
	{
		cnt++;
		int i = bs(k + cut); // max possible cost <= k (+ cut for already removed crap)
//		cout << i << endl;
		if (i == -1) // will never happen i think
			return 0;
		if (i <= minHeight) // end
		{
			return cnt <= s;
		}
		cut = cum[i]; // removed crap
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
#ifndef ONLINE_JUDGE
	freopen("inputA.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
	// VERY UGLY CODE DONT READ
	cin >> n >> k;
	h.resize(n);
	minHeight = INT_MAX;
	rep(i,0,n)
	{
		cin >> h[i];
		minHeight = min(minHeight, h[i]);
		freq[h[i] - 1]++;
	}
	if (freq[h.back() - 1] == n) // all same height
	{
		cout << 0 << '\n';
		return 0;
	}
	for (int i = 200003; i >= 0; --i)
		freq[i] = freq[i+1] + freq[i];
	for (int i = 200003; i >= 0; --i)
		cum[i] = cum[i + 1] + freq[i];

//	for (int i = 0; i < 5; ++i)
//		cout << freq[i] << ' ';
//	cout << endl;
//
//	for (int i = 0; i < 5; ++i)
//		cout << cum[i] << ' ';
//	cout << endl;
	ll l = 1, r = 1e18; // BACK TO 1e18!
	while(l < r) // bs for number of slices (min FT)
	{
		ll mid = l + (r - l)/2;
		if (valid(mid))
			r = mid;
		else
			l = mid + 1;
	}
	cout << l << '\n';
	return 0;
}
