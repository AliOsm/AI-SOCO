#include <bits/stdc++.h>

using namespace std;

const int MaxN = 1e6 + 17;
const int INF = 1e9 + 17;
int x, y, z, n, k, a, b, q;
int t[3][MaxN];
int GetMin (int v, int l, int r, int L, int R)
{
	if (l > R || r < L)
		return 0;
   	if (L <= l && r <= R)
   		return t[1][v];
   	int m = (l + r) >> 1;
   	return GetMin (v + v, l, m, L, R) + GetMin (v + v + 1, m + 1, r, L, R);
}
int GetMax (int v, int l, int r, int L, int R)
{
	if (l > R || r < L)
		return 0;
   	if (L <= l && r <= R)
   		return t[2][v];
   	int m = (l + r) >> 1;
   	return GetMax (v + v, l, m, L, R) + GetMax (v + v + 1, m + 1, r, L, R);
}
void upd (int v, int l, int r, int pos, int val)
{
	if (l == pos && r == pos)
	{
		t[1][v] = min (b, val + t[1][v]);
		t[2][v] = min (a, val + t[2][v]);
	}
	else
	{
		int m = (l + r) >> 1;
		if (pos <= m)
			upd (v + v, l, m, pos, val);
		else
			upd (v + v + 1, m + 1, r, pos, val);
		t[1][v] = t[1][v + v] + t[1][v + v + 1];
		t[2][v] = t[2][v + v] + t[2][v + v + 1];
	}
}
int main ()
{ 
    #ifdef Elibay 
        freopen (".in", "r", stdin); 
    #endif 
    scanf ("%d%d%d%d%d", &n, &k, &a, &b, &q);
	while (q --)
	{
		scanf ("%d%d", &x, &y);
		if (x == 1)
		{
			scanf ("%d", &z);
			upd (1, 1, n, y, z);
		}
		else
		{
			int Sum = GetMin (1, 1, n, 1, y - 1);
//			cout << Sum << endl;
			Sum += GetMax (1, 1, n, y + k, n);
			printf ("%d\n", Sum);
		}
	}
    return 0; 
}