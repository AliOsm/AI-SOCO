#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

vector <pair<int, int> > vec;

set<pair<int, int> > q;
pair<int, int> a[510];
int szz[510];

bool used[510];

vector <int> g[510];

int mxdeep = 0, mxguy = 0, n;

void dfs(int v, int p, int deep){
    used[v] = 1;
    if (mxdeep < deep){
        mxdeep = deep;
        mxguy = v;
    }
    for (int i = 0; i < g[v].size(); i++){
        int to = g[v][i];
        if (to == p)
            continue;
        dfs(to, v, deep+1);
    }
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    cin >> n;
    for (int i = 1; i <= n; i++){
        cin >> a[i].first;
        a[i].second = i;
    }
    sort(a+1, a+n+1);
    reverse(a+1, a+n+1);
    int frst = -1, lst = -1;
    int lstpos;
    int pos = 1;
    for (int i = 1; i <= n; i++){
        if (a[i].first == 1){
            --a[i].first;
            if (i == 1)
                return cout << "NO", 0;
            if (frst == -1){
                frst = 1;
                --a[1].first;
                vec.push_back({a[1].second, a[i].second});
            } else
            if (lst == -1){
                lst = 1;
                --a[lstpos].first;
                vec.push_back({a[lstpos].second, a[i].second});
            } else {
                while(pos <= lstpos && a[pos].first == 0)
                    ++pos;
                if (a[pos].first == 0)
                    return cout << "NO", 0;
                --a[pos].first;
                vec.push_back({a[pos].second, a[i].second});
            }
        } else {

            if (i != 1){
                vec.push_back({a[i-1].second, a[i].second});
                --a[i-1].first;
                --a[i].first;
            }

            lstpos = i;
        }
    }
    for (int i = 0; i < vec.size(); i++){
        int a = vec[i].first, b = vec[i].second;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    dfs(1, 0, 1);
    for (int i = 1; i <= n; i++)
        if (!used[i])
            return cout << "NO", 0;
    mxdeep = 0;
    dfs(mxguy, 0, 1);
    cout << "YES " << mxdeep-1 << endl;
    cout << vec.size() << endl;
    for (int i = 0; i < vec.size(); i++){
        cout << vec[i].first << ' ' << vec[i].second << "\n";
    }

}
