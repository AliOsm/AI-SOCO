#include <bits/stdc++.h>
using namespace std;

void solve(){
    int N, X, Y, Z;
    scanf("%d %d %d %d", &N, &X, &Y, &Z);
    vector<int64_t> A(N);
    for(int i=0; i<N; i++) scanf("%lld", &A[i]);

    auto mex = [](vector<int> V){
        bitset<4> exist;
        for(int a : V) exist[a] = 1;
        for(int i=0; i<4; i++) if(!exist[i]) return i;
        return -1;
    };

    vector<vector<int>> G(1, vector<int>(3)), state(5, vector<int>(3));
    map<vector<vector<int>>, int> mp;
    int base, period;
    for(int i=1; ; i++){
        int tox = state[5-X][0], toy = state[5-Y][1], toz = state[5-Z][2];
        vector<int> g = {mex({tox, toy, toz}), mex({tox, toz}), mex({tox, toy})};
        G.push_back(g);
        state.push_back(g);
        state.erase(state.begin());
        if(mp.count(state)){
            base = mp[state];
            period = i - base;
            break;
        }else{
            mp[state] = i;
        }
    }

    auto calc = [&](int64_t a, int k){
        if(a > base) a -= (a-base)/period*period;
        return G[a][k];
    };

    int gv = 0;
    vector<int> gs(N);
    for(int i=0; i<N; i++){
        gs[i] = calc(A[i], 0);
        gv ^= gs[i];
    }
    
    vector<int> xyz = {X, Y, Z};
    int ans = 0;
    for(int i=0; i<N; i++){
        for(int k=0; k<3; k++){
            int aft = calc(max(int64_t(0), A[i]-xyz[k]), k);
            if((gv ^ gs[i] ^ aft) == 0) ans++;
        }
    }

    printf("%d\n", ans);
}

int main(){
    int T;
    cin >> T;
    while(T--) solve();
    return 0;
}
