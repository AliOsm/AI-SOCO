#include <bits/stdc++.h>
using namespace std;

#define int long long
typedef pair <int, int> pii;

const int N = 2e5 + 10;
int n, m, ar[N], dp[N];
vector <pii> vec[N];

struct node {
	int l, r, lazy, mx;
	
	node() {
		l = r = lazy = mx = 0;
	}
	
	int val() {
		return lazy + mx;
	}
} seg[N << 2];


void build(int v, int l, int r) {
	seg[v].l = l;
	seg[v].r = r;
	if (l + 1 == r)
		return;
	
	int mid = l + r >> 1;
	build(2 * v, l, mid);
	build(2 * v + 1, mid, r);
}

void change(int v, int l, int r, int x) {
	if (r <= seg[v].l || seg[v].r <= l)
		return;
	if (l <= seg[v].l && seg[v].r <= r) {
		seg[v].lazy += x;
		return;
	}
	change(2 * v, l, r, x);
	change(2 * v + 1, l, r, x);
	seg[v].mx = max(seg[2 * v].val(), seg[2 * v + 1].val());
}

int get(int v, int l, int r) {
	if (r <= seg[v].l || seg[v].r <= l)
		return 0;
	if (l <= seg[v].l && seg[v].r <= r) 
		return seg[v].val();
	return seg[v].lazy + max(get(2 * v, l, r), get(2 * v + 1, l, r));
}

int32_t main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
		cin >> ar[i];
	for (int i = 0; i < m; i++) {
		int l, r, c;
		cin >> l >> r >> c;
		vec[r].push_back({l, c});
	}
	
	build(1, 0, n + 1);
	for (int i = 1; i <= n; i++) {
		change(1, 0, i, -ar[i]);
		for (pii j : vec[i]) 
			change(1, 0, j.first, j.second);
		dp[i] = max(dp[i - 1], get(1, 0, i));
//		cout << i << " : " << dp[i] << endl;
		change(1, i, i + 1, dp[i]);
	}
	cout << get(1, 0, n + 1);
}
