#include<bits/stdc++.h>
#include<cmath>
using namespace std;
#define ll long long
#define F first
#define S second
#define pb push_back
#define mp make_pair
const double PI = acos(-1.0), EPS = 1e-9;
const int MX=3*1e5+10;
int N, M, k;
int arr[MX];
int p[MX];
int sz[MX];
int lf[MX];
int rt[MX];
int f(int x)
{
    if(x == p[x]) return x;
    return p[x]=f(p[x]);
}
void un(int x, int y)
{
    x=f(x);
    y=f(y);
    if(x == y) return;
    sz[x]+=sz[y];
    p[y]=x;
    rt[x]=rt[y];
}
struct SS
{
    int SZ, id;
    SS(int s, int i)
    {
        SZ=s;
        id=i;
    }
    bool operator < (const SS &a) const
    {
        if(a.SZ == SZ) return id < a.id;
        return SZ > a.SZ;
    }
};
multiset<SS> ms;
int main()
{
    scanf("%d", &N);
    for(int i=1; i<N+1; i++)
    {
        scanf("%d", &arr[i]);
        p[i]=i;
        sz[i]=1;
        lf[i]=i-1;
        rt[i]=i+1;
    }
    for(int i=1; i<=N; i++)
    {
        if(arr[i] == arr[i-1])
            un(i-1, i);
    }
    for(int i=1; i<=N; i++)
        if(f(i) == i)
        {
            ms.insert(SS(sz[i], i));
        }
    int ans=0;
    while(ms.size())
    {
        SS cur=*ms.begin();
        ms.erase(ms.begin());
        if(lf[cur.id] > 0)
        {
            int pp=f(lf[cur.id]);
            rt[pp]=rt[cur.id];
        }
        if(rt[cur.id] <= N)
        {
            int pp=f(rt[cur.id]);
            lf[pp]=lf[cur.id];
        }
        if(lf[cur.id] > 0 && rt[cur.id] <= N && arr[f(lf[cur.id])] == arr[f(rt[cur.id])])
        {
            int L=f(lf[cur.id]);
            int R=f(rt[cur.id]);
            ms.erase(SS(sz[L], L));
            ms.erase(SS(sz[R], R));
            un(L, R);
            ms.insert(SS(sz[L], L));
        }
        ans++;
    }
    cout<<ans<<"\n";
    return 0;
}
