#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>
#include <complex>

using namespace std;
int dx[8]={1,-1,0,0,1,-1,1,-1};
int dy[8]={0,0,-1,1,1,-1,-1,1};
/*
 -- Valid
 -- const (10^9>sz)
 -- array index
 -- less or more , check if
 -- even or odd
 -- inequality
 */
int n ,p[200005],a[200005],b,c,m,done[200005];
priority_queue<pair<int,int> > s[4];
int main(){
    scanf("%d",&n);
    for(int i=0;i<n;i++){
        scanf("%d",&p[i]);
    }
    for(int i=0;i<n;i++){
        scanf("%d",&a[i]);
    }
    for(int i=0;i<n;i++){
        scanf("%d",&b);
        s[a[i]].push(make_pair(-p[i],i));
        s[b].push(make_pair(-p[i],i));
    }
    scanf("%d",&m);
    for(int i=0;i<m;i++){
        if(i){cout<<" ";}
        scanf("%d",&c);
        while(s[c].size()){
            if(!done[s[c].top().second]){break;}
            s[c].pop();
        }
        if(s[c].size()){
            cout<<-s[c].top().first;
            done[s[c].top().second]=1;
        }else{
        cout<<"-1";
        }
}
    cout<<endl;
    return 0;
}
