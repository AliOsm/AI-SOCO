
// In the name of God
// Code by: mrMaster

#include <bits/stdc++.h>

using namespace std;

inline int in() {int x; scanf("%d",&x); return x;}
#define debug(x) cerr << #x << '=' << (x) << endl
#define FOR(i,j,k) for(int i=j;i<k;++i)
#define bpc __builtin_popcount
#define blz __builtin_clz
#define btz __builtin_ctz
#define Size(x) ((int)(x).size())
//#define endl '\n'
#define boost ios_base :: sync_with_stdio(false) , cin.tie(0) , cout.tie(0)
#define pb push_back
#define X first
#define Y second
#define int long long

//typedef long long ll;
typedef long double ld;
typedef pair<int,int>pii;

const int INF = 1e9 + 10;
//const int LINF = 1000ll*1000*1000*1000*1000*1000 + 100;
const int MN = 1e5 + 10;

int n;
int a[MN] , b[MN];
int dp[MN];
vector<pii>hull;

int cl(int a, int b){return (a+b-1)/b;}

bool check(int id)
{
	int x = hull.back().X;
	if(cl(dp[hull.back().Y] - dp[id] , b[id] - b[hull.back().Y]) <= x) return true;
	return false;
}

void upd(int id)
{
	while(!hull.empty() && check(id)) hull.pop_back();
	if(hull.empty()) hull.pb(pii(0 , id));
	else{
		int t = cl(dp[id] - dp[hull.back().Y] , b[hull.back().Y] - b[id]);
		hull.pb(pii(t , id));
	}
}

int get(int x)
{
	return (--lower_bound(hull.begin() , hull.end() , pii(x , INF)))->Y;
}

int32_t main()
{
	boost;
	cin >> n;
	for(int i=0;i<n;++i) cin >> a[i];
	for(int i=0;i<n;++i) cin >> b[i];
	upd(0);
	for(int i=1;i<n;++i){
		int ind = get(a[i]);
		dp[i] = dp[ind] + 1ll*b[ind]*a[i];
		upd(i);
	}
	cout << dp[n-1] << endl;
	return 0;
}


