#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

int arr[16][10005];
int Min[16][16];
int Min2[16][16];
int n, m;

void get_min()
{
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++)
        {
            Min[i][j] = INT_MAX;
            Min2[i][j] = INT_MAX;
            for(int z = 0; z < m; z++)
            {
                Min[i][j] = min(Min[i][j], abs(arr[i][z] - arr[j][z]));
            }
            for(int z = 0; z < m - 1; z++)
            {
                Min2[i][j] = min(Min2[i][j], abs(arr[j][z] - arr[i][z + 1]));
            }
        }
    }
}

int dp[16][16][(1 << 16)];

int solve(int prev, int first, int mask)
{
    if(mask == (1 << n) - 1)
    {
        return Min2[first][prev];
    }
    int &ans = dp[prev][first][mask];
    if(~ans)
        return ans;
    ans = 0;
    for(int i = 0; i < n; i++)
    {
        if(!(mask & (1 << i)))
        {
            ans = max(ans, min(solve(i, first, mask | (1 << i)), Min[prev][i]));
        }
    }
    return ans;
}

int main()
{
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    cin >> n >> m;
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            cin >> arr[i][j];
        }
    }
    if(n == 1)
    {
        int ans = INT_MAX;
        for(int i = 1; i < m; i++)
        {
            ans = min(ans, abs(arr[0][i] - arr[0][i - 1]));
        }
        cout << ans;
        return 0;
    }
    get_min();
    int ans = 0;
    memset(dp, -1, sizeof dp);
    for(int i = 0; i < n; i++)
    {
        ans = max(ans, solve(i, i, (1 << i)));
    }
    cout << ans;
    return 0;
}
