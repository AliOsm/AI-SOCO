//ITNOG
#include <bits/stdc++.h>


using namespace std; 


#define SZ(x) (((int) x.size()))
#define rep(i, s, e) for(int i = s; i < e; i ++)
 
typedef long double ld;

const int maxN = 1000*1000 + 5;
const long long mod = 1000*1000*1000 + 7;
int a[maxN * 2], dp[maxN * 2];
int ch[maxN * 2], p[maxN * 2];
int pat[2 * maxN], poi;
int star, su; 
int n, mi;

inline void dfs(int v, int par = -1)
{
//    cout << v << endl;
    pat[poi ++] = v; if(par > -1) su += v - par;
    if(su < n) dp[v] = mod;

    int ind = star, sum = su;
    while(star + 1 < poi && su - (pat[star + 1] - pat[star]) >= n) su -= pat[star + 1] - pat[star], star ++;
    
    if(su >= n) dp[v] = poi - (star + 1);
    for(int u = ch[v]; u > 0 && p[u] == v; u --)
    {
	  dfs(u, v);
    }
    star = ind; poi --;
    su = sum;
    mi = min(mi, dp[v]);
    if(par > -1) su -= v - par;
}

inline void solve(long long x)
{
    int st = 0; long long sum = 0; 
    rep(i, 1, 2 * n + 1)
    {
	  sum += a[i]; ch[i] = -1; p[i] = -1;
	  while(sum > x)
	  {
		st ++;
		sum -= a[st];
	  }
	  p[i] = st; ch[st] = i;
    }
    mi = mod;
    dfs(0);
    printf("%d\n", mi);
}

main() 
{
    //ios::sync_with_stdio(0); cin.tie(0);
    int q; scanf("%d%d", &n, &q);
    rep(i, 1, n + 1) scanf("%d", &a[i]), a[i + n] = a[i];
   
    while(q --)
    {
	  long long x; scanf("%I64d", &x);
	  solve(x);
    }
    
    return 0;
}
