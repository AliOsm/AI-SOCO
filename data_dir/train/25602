//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#include <iomanip>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define INF (1000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;


#define matrix vector< vector<ll> >

matrix matmul(matrix &a, matrix &b){
    int i, j, k, n = a.size();
    matrix ans (n, vector<ll>(n));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            ll temp = 0;
            for(k=0;k<n;k++)    temp = (temp + a[i][k] * b[k][j]) % MOD;
            ans[i][j] = temp;
        }

    return ans;
}

matrix matpwr(matrix &a, ll p){
    int n = a.size();
    matrix ans(n, vector<ll> (n));
    for(int i=0;i<n;i++)    ans[i][i] = 1;

    while(p){
        if(p&1) ans = matmul(ans, a);

        a = matmul(a, a);
        p >>= 1;
    }
    return ans;
}


ll pwr(ll base, ll p, ll mod = MOD){
    ll ans = 1;
    while(p){
        if(p & 1)   ans = (ans * base) % mod;
        base = (base * base) % mod;
        p /= 2;
    }
    return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


ll lcm(ll a, ll b){
    return (a*b) / gcd(a, b);
}


ll invMod(ll n, ll mod = MOD){
    return pwr(n, mod-2);
}


char str[702];
int n, matching[702];
ll DP[702][702][3][3];
#define UNCOLOURED 0
#define BLUE 1
#define RED 2


ll dp(int i, int j, int leftColour, int rightColour){

    if(i > j)   return 1;
    if(j == i+1){
        if(leftColour == UNCOLOURED && rightColour == UNCOLOURED)   return 4;
        if(leftColour == UNCOLOURED && rightColour == BLUE) return 3;
        if(leftColour == UNCOLOURED && rightColour == RED)  return 3;
        if(leftColour == BLUE && rightColour == UNCOLOURED) return 3;
        if(leftColour == BLUE && rightColour == BLUE)   return 2;
        if(leftColour == BLUE && rightColour == RED)    return 2;
        if(leftColour == RED && rightColour == UNCOLOURED)  return 3;
        if(leftColour == RED && rightColour == BLUE)    return 2;
        if(leftColour == RED && rightColour == RED) return 2;
        return 0;
    }
    if(DP[i][j][leftColour][rightColour] != -1) return DP[i][j][leftColour][rightColour];

    if(matching[i] == j){

        ll ans = 0;

        //colour left bracket red
        if(leftColour != RED)
            ans = (ans + dp(i+1, j-1, RED, UNCOLOURED)) % MOD;
        //colour left bracket blue
        if(leftColour != BLUE)
            ans = (ans + dp(i+1, j-1, BLUE, UNCOLOURED)) % MOD;

        //colour right bracket red
        if(rightColour != RED)
            ans = (ans + dp(i+1, j-1, UNCOLOURED, RED)) % MOD;
        //colour right bracket blue
        if(rightColour != BLUE)
            ans = (ans + dp(i+1, j-1, UNCOLOURED, BLUE)) % MOD;

        return DP[i][j][leftColour][rightColour] = ans;
    }
    else{

        ll ans = 0;

        int jj = matching[i], ii = jj+1;

        //colour left red
        if(leftColour != RED)
            ans = (ans + dp(i+1, jj-1, RED, UNCOLOURED) * dp(ii, j, UNCOLOURED, rightColour)) % MOD;
        //colour left blue
        if(leftColour != BLUE)
            ans = (ans + dp(i+1, jj-1, BLUE, UNCOLOURED) * dp(ii, j, UNCOLOURED, rightColour)) % MOD;

        //colour right red
        ans = (ans + dp(i+1, jj-1, UNCOLOURED, RED) * dp(ii, j, RED, rightColour)) % MOD;
        //colour right blue
        ans = (ans + dp(i+1, jj-1, UNCOLOURED, BLUE) * dp(ii, j, BLUE, rightColour)) % MOD;

        return DP[i][j][leftColour][rightColour] = ans;

    }

    assert(false);
    return 0;
}


int main()
{
    ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    cin>>str;
    n = strlen(str);
    stack<int> st;
    for(int i=0;i<n;i++)
        if(str[i] == '(')   st.push(i);
        else{
            matching[i] = st.top();
            matching[st.top()] = i;
            st.pop();
        }

    memset(DP, -1, sizeof(DP));
    ll ans = dp(0, n-1, UNCOLOURED, UNCOLOURED);
    cout<<ans;
    return 0;
}














