#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cassert>
#include <queue>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define pb push_back
#define ff first
#define ss second
typedef long long ll;
#define dforn(i, n) for(int i = n - 1; i >= 0; i--)

const int MAXN = 200050;

int n, ans, B[MAXN], bn;
char s[MAXN];

bool is_vowel(char ch){
    return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';
}

bool P(int k){
    int v, c;
    v = c = 0;
    ans = 0;
    forn(i, k){
        if(is_vowel(s[i])) v++;
        else               c++;
    }
    if(v <= 2*c) ans++;
    forr(i, k, n){
        if(is_vowel(s[i])) v++;
        else               c++;
        if(is_vowel(s[i-k])) v--;
        else                 c--;
        if(v <= 2*c) ans++;
    }
    return ans > 0;
}

#define oper min
#define NEUT (1e9)
struct STree {
    vector<int> st;int n;
    STree(int n):st(4*n+5,NEUT),n(n){}
    void upd(int k, int s, int e, int p, int v){
        if(s+1==e){st[k]=oper(st[k],v);return;}
        int m=(s+e)/2;
        if(p<m)upd(k+k,s,m,p,v);
        else upd(k+k+1,m,e,p,v);
        st[k]=oper(st[k+k],st[k+k+1]);
    }
    int query(int k, int s, int e, int a, int b){
        if(s>=b||e<=a)return NEUT;
        if(s>=a&&e<=b)return st[k];
        int m=(s+e)/2;
        return oper(query(k+k,s,m,a,b),query(k+k+1,m,e,a,b));
    }
    void upd(int p, int v){upd(1,0,n,p,v);}
    int query(int a, int b){return query(1,0,n,a,b);}
};

int getSZ(){
    STree T(2*n+5);
    int acum = 0;
    int ans = 0;
    forn(i, n){
        if(is_vowel(s[i])) acum -= 1;
        else               acum += 2;
        if(acum >= 0) ans=max(ans,i+1);
        else {
            int l = T.query(-acum, 2*n+4);
            ans=max(ans,i-l);
            
            T.upd(-acum,i);
        }
        //~ printf("acum = %d\n", acum);
    }
    return ans;
}

int main() {
    //~ freopen("input.in", "r", stdin);
    while( scanf("%s", s) >= 1 ){
        bn = 0;
        
        n = strlen(s);
        forn(i, n) s[i] = tolower(s[i]);
        forn(i, n){
            if(!is_vowel(s[i])){
                B[bn++] = i;
            }
        }
        
        int sz = 0;
        if(bn){
            sz = getSZ();
        }
        
        P(sz);
        if(sz){
            printf("%d %d\n", sz, ans);
        } else {
            puts("No solution");
        }
    }
    return 0;
}
