#include <bits/stdc++.h>
using namespace std;

const int modulo = 1000000007;
const int MAXK = 10005;
const int MAXP = 55;
int r[MAXP], f[MAXP][MAXK];

int powmod(int a, int b)
{
	int ret = 1, t = a;

	while(b)
		ret = 1LL * ret * ((b & 1) ? t : 1) % modulo,
		b >>= 1, t = 1LL * t * t % modulo;

	return ret;
}

int revele(int x)
{
	return powmod(x, modulo - 2);
}

int workdp(int n, int k, int p)
{
	int ret = 0;
	
	memset(f, 0, sizeof(f));
	f[n][0] = 1;
	for(int i = n; i >= 0; --i)
		for(int x = 0; x < k; ++x)
			for(int j = 0; j <= i; ++j)
				f[j][x + 1] = (f[j][x + 1] + 1LL * f[i][x] * r[i + 1]) % modulo;
	for(int i = 0, j = 1; i <= n; ++i, j = 1LL * j * p % modulo)
		ret = (ret + 1LL * f[i][k] * j) % modulo;

	return ret;
}

int main()
{
	long long n;
	int k, ans = 1;

	for(int i = 1; i < MAXP; ++i)
		r[i] = revele(i);	
	scanf("%lld%d", &n, &k);
	for(int i = 2, cnt, cur; i <= (int)sqrt(n); ++i)
	{
		cnt = 0;
		while(n % i == 0)
			n /= i, ++cnt;
		if(cnt)
			ans = 1LL * ans * workdp(cnt, k, i) % modulo;
	}
	if(n > 1)
		ans = 1LL * ans * workdp(1, k, (int)(n % modulo)) % modulo;
	printf("%d\n", ans);

	return 0;
}
