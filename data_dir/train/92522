#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> PI;
vector<int> g[210];
int low[210],dfn[210],dfs_idx,Stack[210],top;
bool inStack[210];
int scc[210],scc_idx;
void dfs(int u){
	low[u]=dfn[u]=++dfs_idx;
	Stack[++top]=u;
	inStack[u]=true;
	for(int& v:g[u]){
		if(!dfn[v]){
			dfs(v);
			low[u]=min(low[u],low[v]);
		}else if(inStack[v]){
			low[u]=min(low[u],dfn[v]);
		}
	}
	if(low[u]==dfn[u]){
		int v;
		scc_idx++;
		do{
			v=Stack[top--];
			inStack[v]=false;
			scc[v]=scc_idx;
		}while(v!=u);
	}
}
vector<int> ans;
int main(){
	int n,m,a,b,c;
	scanf("%d%d",&n,&m);
	for(int i=1;i<=m;i++){
		scanf("%d%d%d",&a,&b,&c);
		// 2*v-1 choose v
		// 2*v not choose v
		if(c==0){
			g[2*a-1].push_back(2*b);
			g[2*b].push_back(2*a-1);
			g[2*b-1].push_back(2*a);
			g[2*a].push_back(2*b-1);
		}else{
			g[2*a-1].push_back(2*b-1);
			g[2*b-1].push_back(2*a-1);
			g[2*a].push_back(2*b);
			g[2*b].push_back(2*a);
		}
	}
	for(int i=1;i<=2*n;i++)
		if(!dfn[i])
			dfs(i);
	bool ok=true;
	for(int i=1;i<=n;i++){
		if(scc[2*i-1]==scc[2*i])
			ok=false;
		else if(scc[2*i-1]<scc[2*i])
			ans.push_back(i);
	}
	if(!ok){
		puts("Impossible");
		exit(0);
	}
	printf("%d\n",(int)ans.size());
	for(int i=0;i<(int)ans.size();i++)
		printf("%d ",ans[i]);
	puts("");
	return 0;
}