//g++ -o A A.cpp

//g++ -Wl,--stack,268435456 -o A A.cpp  //256 mega
                  

//g++ -std=c++11 -Wl,--stack,268435456 test.cpp -o test

#include <iostream>
using std::cin;
using std::cout;
using std::string;
//using std::to_string; //convert number to string
using std::endl;

#include <algorithm>
using std::sort;
using std::min;
using std::max;
using std::pair;//pair <int,int> data[100];sort(data,data+100);

#include <math.h>
//sqrt(123.123)
//ceil(0.12)=1
//pow(x,2)=x^2

#include<cstdio>
//printf()
// %I64d for long long 

#include <map>
using std::map;

#include <stdlib.h>
//abs(-123);

#include <vector>
using std::vector;

#include <queue>
using std::queue;

#include <deque>
using std::deque;

#include <stack>
using std::stack;

#include <set>
using std::set;
using std::multiset;

/*
long long gcd(long long a, long long b)
{
    //O(log(max(a,b)))
    long long t;
    while(b!=0)
    {
        t=a%b;
        a=b;
        b=t;
    }
    return a;
}
*/


/*
long long C(int x,int y)
{
    if(x<y){
        return 0;
    }
    long long answer=1;
    int i;
    if(y>x-y)
    {
        y=x-y;
    }
    for(i=1;i<=y;i++)
    {
        answer*=(x+1-i);
        answer/=i;
    }
    return answer;
}
*/




/*
//C(x,y) % mod
long long C(long long x,long long y)
{
    long long mod=1000000007;
    if(x<y){
        return 0;
    }
    long long answer=1;
    int i;
    if(y>x-y)
    {
        y=x-y;
    }
    for(i=1;i<=y;i++)
    {
        answer*=(x+1-i);
        answer%=mod;
    }
    for(i=1;i<=y;i++)
    {
        while(answer%i!=0){
            answer+=mod;
        }
        answer/=i;
        answer%=mod;
    }
    return answer%mod;
}


for (i=0; i<1010; i++) {
    c[i][0]=1;
    for (j=1; j<=i; j++) c[i][j]=(c[i-1][j-1]+c[i-1][j])%md;
}
*/

/*
//must return true if first>then second
struct classcomp {
    bool operator() (const int& lhs, const int& rhs) const{
        return lhs>rhs;
    }
};
*/


/*
int t;
string qwe;

vector<string> permutations;
void f(string s){
    if(s.size()==t){
        permutations.push_back(s);
        return;
    }
    int n=s.size();
    
    string x=qwe.substr(n,1);
    
    f(x+s);
    f(s+x);
    for(int i=1;i<n;i++){
        f(s.substr(0,i)+x+s.substr(i));
    }
}
*/

int main()
{
	/*
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    */
	
	int n;cin>>n;
	long long a[100005] = {0,};
	int p[100005]={0,};
	
	for(int i=1;i<=n;i++)
	{
		cin>>a[i];
		a[i] += a[i-1];
	}
	
	for(int i=1;i<=n;i++)
	{
		cin>>p[i];
	}
	
	stack<long long> answer;
	
	int visited[100005] = {0,};
	int left[100005] = {0,};
	int right[100005] = {0,};
	
	long long curMax = 0;
	answer.push(curMax);
	
	for(int i=n;i>1;i--)
	{
		int next = p[i];
		visited[next] = 1;
		left[next] = next;
		right[next] = next;
		if(visited[next+1])
		{
			left[ right[next+1] ] = left[next];
			right[next] = right[next+1];
		}
		if(visited[next-1])
		{
			right[left[next-1]] = right[next];
			left[next]=left[right[next]] = left[next-1];
			
		}
		curMax = max(curMax,a[right[next]]-a[left[next]-1]);
		answer.push(curMax);			
	}
	
	for(int i=0;i<n;i++)
	{
		cout<<answer.top()<<endl;
		answer.pop();
	}	
	
    return 0;
}





        