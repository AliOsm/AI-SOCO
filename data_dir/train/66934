#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <iomanip>
#define si(a) scanf("%d",&a)
#define f first
#define s second
using namespace std;

vector<pair<pair<int,int>,int> > edges;

bool cmp(pair<pair<int,int>,int> a,pair<pair<int,int>,int> b){return a.s>b.s;}
int ara[100005],par[100005];
long long ans=0;

int root(int v){return par[v] < 0 ? v : (par[v] = root(par[v]));}

void union_set(int x,int y,int p){
    if((x = root(x)) == (y = root(y)))     return ;
	if(par[y] < par[x])
		swap(x, y);
    long long temp=par[x];
    temp*=par[y];
    temp*=p;
    ans+=temp;
	par[x] += par[y];
	par[y] = x;
}

int main()
{
    int n,m,i;
    si(n);si(m);
    for(i=0;i<n;i++)
        si(ara[i]);
    for(i=0;i<m;i++){
        pair<pair<int,int>,int> temp;
        si(temp.f.f);si(temp.f.s);
        temp.f.f--;temp.f.s--;
        temp.s=min(ara[temp.f.f],ara[temp.f.s]);
        edges.push_back(temp);
    }
    sort(edges.begin(),edges.end(),cmp);
    for(i=0;i<100005;i++)
        par[i]=-1;
    for(i=0;i<m;i++)
        union_set(edges[i].f.f,edges[i].f.s,edges[i].s);
    long long tx=n;
    tx*=(n-1);
    cout<<fixed<<setprecision(15)<<(2.0*ans)/(tx)<<endl;
    return 0;
}
