#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define sz(x) (int)(x).size()
#define li long long
#define ld long double
#define x first
#define y second
#define pt pair<int, int>
#define pll pair<ll, ll>
#define forn(i, t) for(int i = 0; i < (t); i++)
#define fore(i, f, t) for(int i = (f); i < (t); i++)
#define forr(i, f, t) for(int i = (f) - 1; i >= (t); i--)
#define all(x) (x).begin(), (x).end()
#define ins insert

using namespace std;


const int INF = 1e9;
const int MOD = 1e9 + 7;
const li INF64 = 1e18;
const ld EPS = 1e-7;

mt19937 myrand(time(NULL));

const int N = 100 * 1000 + 13;

int a[N], b[N];
int n;


bool read(){
	if(scanf("%d", &n) != 1)
		return 0;
	forn(i, n){
		scanf("%d", &a[i]);
		--a[i];	
	}
	return 1;
}


char used[N];
vector<int> c[N];
int k;


void dfs(int v){
	c[k].pb(v);
	used[v] = 1;
	if (!used[a[v]])
		dfs(a[v]);
}


bool comp(const vector<int> &a, const vector<int> &b){
	return (sz(a) < sz(b));
}


void solve(){
	memset(used, 0, sizeof(used));
	k = 0;
	forn(i, n){
		b[i] = i;
		if (!used[i]){
			dfs(i);
			if (sz(c[k]) > 1)
				k++;
			else
				c[k] = vector<int>();
		}
	}
	sort(c, c + k, comp);
	int l = 0;
	int res = 0;
	vector<pt> ans[N];
	forn(i, k){
		int p = 0;
		while (sz(c[i]) - p > 5){
			for (int j = 0; j < 3; j++, p++)
				ans[res].pb(mp(b[c[i][p]], b[c[i][p + 1]]));
			ans[res].pb(mp(b[c[i][p]], b[c[i][sz(c[i]) - 1]]));
			p++;
			ans[res].pb(mp(b[c[i][sz(c[i]) - 1]], b[c[i][p - 4]]));
			swap(b[c[i][sz(c[i]) - 1]], b[c[i][p]]);
			swap(c[i][sz(c[i]) - 1], c[i][p]);
			res++;
		}
		vector<int> tmp;
		fore(j, p, sz(c[i]))
			tmp.pb(c[i][j]);
		c[i] = tmp;
	}
	sort(c, c + k, comp);
	for (int i = k - 1; l <= i; i--){
		forn(j, sz(c[i]))
			ans[res].pb(mp(b[c[i][j]], b[c[i][(j + 1) % sz(c[i])]]));
		while (l < i && sz(ans[res]) + sz(c[l]) <= 5){
			forn(j, sz(c[l]))
				ans[res].pb(mp(b[c[l][j]], b[c[l][(j + 1) % sz(c[l])]]));
			l++;
		}
		if (l < i && sz(ans[res]) == 3 && sz(c[l]) == 3){
			ans[res].pb(mp(b[c[l][0]], b[c[l][1]]));
			ans[res].pb(mp(b[c[l][1]], b[c[l][0]]));
			c[l] = {c[l][0], c[l][2]};
		}
		res++;
	}
	printf("%d\n", res);
	memset(used, 0, sizeof(used));
	forn(i, res){
		printf("%d\n", sz(ans[i]));
		forn(j, sz(ans[i])){
			printf("%d ", ans[i][j].x + 1);
			used[ans[i][j].x] = 1;
		}
		printf("\n");
		forn(j, sz(ans[i])){
			printf("%d ", ans[i][j].y + 1);
			used[ans[i][j].y] = 0;
		}
		printf("\n");
		forn(j, sz(ans[i]))
			assert(used[ans[i][j].x] == 0);
		assert(sz(ans[i]) <= 5);
	}
}


int main(){
	#ifdef _DEBUG
		freopen("input.txt", "r", stdin);
	#endif
	while(read())
		solve();
	return 0;
}