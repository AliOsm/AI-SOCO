#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
#include <cassert>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
ll gcd(ll a , ll b){
  while(b)
   a %= b,
   swap(a,b);
  return a;
}
ll n , m , x , y , a , b;
double MX , MY;
bool TRY(ll koef){
  ll lx = a*koef , ly = b*koef;
  if(n < lx || m < ly)return false;
  double sx = lx / 2.0 , sy = ly / 2.0;
  double xlo = sx , xhi=n-sx , ylo=sy , yhi=m-sy;
  relaxMax(xlo , x-sx) , relaxMin(xhi , x+sx);
  relaxMax(ylo , y-sy) , relaxMin(yhi , y+sy);
  if(xlo > xhi || ylo > yhi)return false;
  return true;
}
pair<ll , ll> bst(-1 , -1);
void update(ll X , ll Y , ll ixlo , ll ixhi , ll iylo , ll iyhi){
  if(X<ixlo || ixhi<X || Y<iylo || iyhi<Y)return;
  if(bst.fi == -1 || SQR(X-x)+SQR(Y-y) < SQR(bst.fi-x)+SQR(bst.se-y))
   bst = mp(X , Y);
  if(SQR(X-x)+SQR(Y-y) == SQR(bst.fi-x)+SQR(bst.se-y) && mp(X,Y)<bst)
   bst = mp(X,Y);
}
pair<ll , ll> find_sol(ll koef){
  ll lx = a*koef , ly = b*koef;
  double sx = lx / 2.0 , sy = ly / 2.0;
  double xlo = sx , xhi=n-sx , ylo=sy , yhi=m-sy;
  relaxMax(xlo , x-sx) , relaxMin(xhi , x+sx);
  relaxMax(ylo , y-sy) , relaxMin(yhi , y+sy);
  ll ixlo=2*xlo , ixhi=2*xhi , iylo=2*ylo , iyhi=2*yhi;
  x *= 2 , y *= 2;
  update(ixlo , iylo , ixlo , ixhi , iylo , iyhi);
  update(ixlo , iyhi , ixlo , ixhi , iylo , iyhi);
  update(ixhi , iylo , ixlo , ixhi , iylo , iyhi);
  update(ixhi , iyhi , ixlo , ixhi , iylo , iyhi);
  update(ixlo , y , ixlo , ixhi , iylo , iyhi);
  update(ixhi , y , ixlo , ixhi , iylo , iyhi);
  update(x , iylo , ixlo , ixhi , iylo , iyhi);
  update(x , iyhi , ixlo , ixhi , iylo , iyhi);
  update(x , y , ixlo , ixhi , iylo , iyhi);
  double X = bst.fi / 2.0 , Y = bst.se / 2.0;
  X -= sx , Y -= sy;
  return mp(X , Y);
}
int main(){
  cin>>n>>m>>x>>y>>a>>b;
  ll GCD = gcd(a,b);
  a /= GCD , b /= GCD;
  ll lo = 0 , hi = max(n,m) , mid;
  for(;;){
   if(lo+1 >= hi){
    if(TRY(hi))mid = hi;
    else mid = lo;
    break;
                 }
   mid = (lo+hi)>>1;
   if(TRY(mid))lo = mid;
   else hi = mid;
         }
  ll X , Y , OX , OY;
  pair<ll , ll> T = find_sol(mid);
  X = T.fi , Y = T.se;
  OX = X + mid * a , OY = Y + mid * b;
  cout<<X<<' '<<Y<<' '<<OX<<' '<<OY<<'\n';
  return 0;
}
