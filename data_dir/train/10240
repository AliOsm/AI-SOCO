//Pham Huu Canh
//F. New Year Tree
//Algorithm: LCA + Diameter of tree
/*
    note that: in each update, diameter of the tree increase at most 1
*/
//Complexity: O(nq * logn)
//AC: 670ms

#include <iostream>
#include <fstream>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

#define max64 9223372036854775807LL
#define max32 2147483647
#define maxty 1001001001
#define max16 32767
#define EPS 1e-8
#define ll long long
#define ull unsigned long long
#define pb push_back
#define mp make_pair
#define PQ priority_queue
#define LB lower_bound
#define UB upper_bound
#define fi first
#define se second
#define timmax(x, y)    ((x) > (y) ? (x) : (y))
#define timmin(x, y)    ((x) < (y) ? (x) : (y))
#define fori(i, n)      for((i) = 0; (i) < (n); (i)++)
#define ford(i, n)      for((i) = (n-1); (i) >= 0; (i)--)
#define fore(i, v)      for(typeof(v.begin()) i = v.begin(); i != v.end(); i++)
#define repi(i, a, b)   for((i) = (a); (i) <= (b); (i)++)
#define repd(i, a, b)   for((i) = (a); (i) >= (b); (i)--)
#define all(tmpv)      tmpv.begin(), tmpv.end()

#define fii "f.inp"
#define foo "f.out"
#define MOD 1000000007
#define inf 1000111000111000111LL

using namespace std;

typedef pair<int, int> II;
typedef vector<int> VI;
#define nmax 1000005
#define maxbit 20

int dep[nmax];
int par[nmax][maxbit];

int LCA(int x, int y){
    int i;
    if (dep[x] < dep[y])    swap(x, y);
    ford(i, maxbit) if (dep[par[x][i]] >= dep[y])   x = par[x][i];          //make x, y are in the same level
    if (x == y) return x;
    
    ford(i, maxbit) if (par[x][i] != par[y][i])
        x = par[x][i], y = par[y][i];
    return par[x][0];
}

int caldia(int x, int y){
    return dep[x] + dep[y] - 2 * dep[LCA(x, y)];
}

void input()
{
    //init
    int i, j, v, n = 4, nq;
    par[1][0] = par[2][0] = par[3][0] = par[4][0] = 1;
    dep[1] = 0, dep[2] = dep[3] = dep[4] = 1;
    for (j = 1; j < maxbit; j++)    repi(i, 1, n)   par[i][j] = par[par[i][j-1]][j-1];
    
    int diameter = 2, dia;
    int curx = 2, cury = 3, newx, newy;
    
    //query
    scanf("%d", &nq);
    while (nq--){
        scanf("%d", &v);
        //add 2 vertexs
        par[++n][0] = v;
        for (i = 1; i < maxbit; i++)    par[n][i] = par[par[n][i-1]][i-1];
        dep[n] = dep[v] + 1;
        
        par[++n][0] = v;
        for (i = 1; i < maxbit; i++)    par[n][i] = par[par[n][i-1]][i-1];
        dep[n] = dep[v] + 1;
        
        //update diameter
        newx = curx, newy = cury;
        dia = caldia(curx, n);
        if (dia > diameter) diameter = dia, newx = curx, newy = n;
        dia = caldia(n, cury);
        if (dia > diameter) diameter = dia, newx = n, newy = cury;
        
        curx = newx, cury = newy;
        printf("%d\n", diameter);
    }
}

int main()
{
    #ifndef ONLINE_JUDGE
        freopen(fii,"r",stdin);
        freopen(foo,"w",stdout);
    #endif

    input();

    return 0;
}
