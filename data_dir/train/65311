#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define MOD 1000000007
#define M 200005

ll a[M], w[M];
ll tree1[M], tree2[M];
ll n;

void update1(ll idx, ll val) { while(idx <= n) tree1[idx] += val, idx += (idx&-idx); }
void update2(ll idx, ll val) { while(idx <= n) tree2[idx] += val, tree2[idx] %= MOD, idx += (idx&-idx); }

ll query1(ll idx) { ll s; for(s = 0; idx; idx -= (idx&-idx)) s += tree1[idx]; return s; }
ll query2(ll idx) { ll s; for(s = 0; idx; idx -= (idx&-idx)) s += tree2[idx], s %= MOD; return s; }

ll optIdx(ll l, ll r)
{
    ll st = l-1, ed = r, mid;
    ll tot = query1(r)-query1(l-1), val;

    while(st+1 < ed)
    {
        mid = (st+ed)>>1;
        val = query1(mid)-query1(l-1);

        if(2*val <= tot) st = mid;
        else ed = mid;
    }

    return ed;
}

int main()
{

    ll i, j, k, p, q, x, y, l, r, s1, s2;

    scanf("%lld %lld", &n, &q);
    for(i = 1; i <= n; i++) scanf("%lld", a+i);
    for(i = 1; i <= n; i++) scanf("%lld", w+i);

    for(i = 1; i <= n; i++) a[i] -= i;

    for(i = 1; i <= n; i++)
    {
        update1(i, w[i]);
        update2(i, a[i]*w[i]);
    }

    while(q--)
    {
        scanf("%lld %lld", &x, &y);

        if(x < 0)
        {
            x = -x;

            p = query1(x)-query1(x-1);
            update1(x, y-p);

            p = (y-p+MOD)%MOD;
            update2(x, a[x]*p);
        }
        else
        {
            l = x, r = y;
            k = optIdx(l, r);

            assert(k >= l && k <= r);

            x = a[k]*((query1(k-1)-query1(l-1))%MOD);
            x %= MOD;
            assert(x >= 0 && x < MOD);

            y = query2(k-1)-query2(l-1)+MOD;
            y %= MOD;
            assert(y >= 0 && y < MOD);

            x += MOD-y;
            x %= MOD;
            s1 = x;

            assert(s1 >= 0 && s1 < MOD);

            x = a[k]*((query1(r)-query1(k))%MOD);
            x %= MOD;
            assert(x >= 0 && x < MOD);

            y = query2(r)-query2(k)+MOD;
            y %= MOD;
            assert(y >= 0 && y < MOD);

            y += MOD-x;
            y %= MOD;
            s2 = y;

            assert(s2>= 0 && s2 < MOD);

            printf("%lld\n", (s1+s2)%MOD);
        }
    }

    return 0;
}
