#include <stdio.h>
#include <bits/stdtr1c++.h>

#define clr(ar) memset(ar, 0, sizeof(ar))
#define read() freopen("lol.txt", "r", stdin)
#define dbg(x) cout << #x << " = " << x << endl
#define ran(a, b) ((((rand() << 15) ^ rand()) % ((b) - (a) + 1)) + (a))

using namespace std;

/// Min-cost Max-flow using bellman ford
/// 0 Based indexed for directed weighted graphs (for undirected graphs, just add two directed edges)
/// Runs in around 0.75 seconds when n <= 100 and m = n * (n - 1) / 2
/// Runs well for sparse graphs though, e.g, m <= 10 * n
/// Costs must be non-negative

namespace mcmf{
    const int MAX = 1000010;
    const long long INF = 1LL << 60;

    long long cap[MAX], flow[MAX], cost[MAX], dis[MAX];
    int n, m, s, t, Q[10000010], adj[MAX], link[MAX], last[MAX], from[MAX], visited[MAX];

    void init(int nodes, int source, int sink){
        m = 0, n = nodes, s = source, t = sink;
        for (int i = 0; i <= n; i++) last[i] = -1;
    }

    void addEdge(int u, int v, long long c, long long w){
        adj[m] = v, cap[m] = c, flow[m] = 0, cost[m] = +w, link[m] = last[u], last[u] = m++;
        adj[m] = u, cap[m] = 0, flow[m] = 0, cost[m] = -w, link[m] = last[v], last[v] = m++;
    }

    bool spfa(){
        int i, j, e, u, v, f = 0, l = 0;
        for (i = 0; i <= n; i++) visited[i] = 0, dis[i] = INF;

        dis[s] = 0, Q[l++] = s;
        while (f < l){
            u = Q[f++];
            for (e = last[u]; e != -1; e = link[e]){
                if (flow[e] < cap[e]){
                    v = adj[e];
                    if (dis[v] > dis[u] + cost[e]){
                        dis[v] = dis[u] + cost[e], from[v] = e;
                        if (!visited[v]){
                            visited[v] = 1;
                            if (f && rand() & 31) Q[--f] = v;
                            else Q[l++] = v;
                        }
                    }
                }
            }
            visited[u] = 0;
        }
        return (dis[t] != INF);
    }

    pair <long long, long long> solve(){
        int i, j;
        long long mincost = 0, maxflow = 0;

        while (spfa()){
            long long aug = INF;
            for (i = t, j = from[i]; i != s; i = adj[j ^ 1], j = from[i]){
                aug = min(aug, cap[j] - flow[j]);
            }
            for (i = t, j = from[i]; i != s; i = adj[j ^ 1], j = from[i]){
                flow[j] += aug, flow[j ^ 1] -= aug;
            }
            maxflow += aug, mincost += aug * dis[t];
        }
        return make_pair(mincost, maxflow);
    }
}

typedef pair<int,int> pii;
#define F first
#define S second
#define PB push_back
#define FOR(i,j,k) for(int i=j;i<=k;i++)

vector<pii> ed;
int ara[5010], org, src, des;

int in(int p) {return p;}
int out(int p) {return p + des;}

int main()
{
    ios::sync_with_stdio(false);
    int n;

    cin >> n;
    FOR(i,1,n) cin >> ara[i];

    FOR(i,1,n)
    {
        int a, b, c;
        a = b = c = 9;
        FOR(j,i+1,n)
        {
            if(ara[i] % 7 == ara[j] % 7 && a) ed.PB( {i, j} ), a--;
            if(ara[i] == ara[j] - 1 && b) ed.PB( {i, j} ), b--;
            if(ara[i] == ara[j] + 1 && c) ed.PB( {i, j} ), c--;
        }
    }

    org = 0; src = n + 1; des = n + 2;
    mcmf::init(out(n) + 1, org, des);
    mcmf::addEdge(org, src, 2, 0);

    for(pii x : ed)
        mcmf::addEdge(out(x.F), in(x.S), 2, 0);

    FOR(i,1,n) mcmf::addEdge(src, in(i), 1, 0);
    FOR(i,1,n) mcmf::addEdge(in(i), out(i), 1, -1);
    FOR(i,1,n) mcmf::addEdge(out(i), des, 1, 0);

    cout << -mcmf::solve().first << endl;
    return 0;

}
