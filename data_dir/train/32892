#define _CRT_SECURE_NO_DEPRECATE
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <cmath>
#ifndef __GNUC__
#include <intrin.h>
#endif // !__GNUC__
#include <random>
#include <vector>
#include <cstdio>
#include <string>
#include <cstdlib>
#include <numeric>
#include <cstring>
#include <complex>
#include <cassert>
#include <iostream>
#include <algorithm>
#include <functional>

int bsf(int x) {
#ifdef __GNUC__
	return __builtin_ctz(x);
#else
	unsigned long i;
	_BitScanForward(&i, x);
	return i;
#endif
}
int bsr(int x) {
#ifdef __GNUC__
	return 31 - __builtin_clz(x);
#else
	unsigned long i;
	_BitScanReverse(&i, x);
	return i;
#endif
}

using namespace std;
typedef long long int64;
const double pi = 3.14159265358979323846;
const int inf = (int)2e+9 + 2;
const int mod = (int)1e+9 + 7;
const double eps = 1e-8;
const int N = 1000001;

int n, m, k;
int a[10][N];

int f(int x)
{
	int ret = 1;
	while (x) {
		int q = x % 10;
		x /= 10;
		if (q)
			ret *= q;
	}
	return ret;
}

int g(int x)
{
	while (x >= 10) {
		x = f(x);
	}
	return x;
}

void solve()
{
	for (int i = 1; i < N; ++i) {
		++a[g(i)][i];
	}
	for (int i = 0; i < 10; ++i) {
		for (int j = 2; j < N; ++j) {
			a[i][j] += a[i][j - 1];
		}
	}
	cin >> n;
	for (int i = 0; i < n; ++i) {
		int l, r;
		cin >> l >> r >> k;
		cout << a[k][r] - a[k][l - 1] << '\n';
	}
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0), cout.tie(0);
	int test = 1;
	//cin >> test;
	for (; test; --test)
		solve();
	return 0;
}