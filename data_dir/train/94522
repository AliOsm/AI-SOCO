//Be Name Khoda
//no comment...
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)1e5 + 7;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
vector<ll> G[MAXN];
ll p[MAXN], lft[MAXN], rgt[MAXN], root = -1, mx[MAXN], mn[MAXN], val[MAXN], h[MAXN], subt[MAXN];
vector<pair<ll, ll> > C;
vector<ll> leaf, now;
void dfs(ll cur)
{
	mx[cur] = p[cur], mn[cur] = p[cur], subt[cur] = cur;
	if(lft[cur] == 0)
		return;
	dfs(lft[cur]);
	dfs(rgt[cur]);
	subt[cur] = subt[rgt[cur]];
	mx[cur] = max(mx[cur], mx[rgt[cur]]);
	mn[cur] = min(mn[cur], mn[lft[cur]]);
}
void dfs2(ll cur)
{
	if(lft[cur] == 0)
		return;
	h[rgt[cur]] = h[cur] + 1;
	h[lft[cur]] = h[cur] + 1;
	val[rgt[cur]] = val[cur] + mx[lft[cur]];
	dfs2(rgt[cur]);
	val[lft[cur]] = val[cur] + mn[rgt[cur]];
	dfs2(lft[cur]);
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n;
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		ll v, val;
		cin >> v >> val;
		p[i] = val;
		if(v != -1)
			G[v].push_back(i);
		else
			root = i;
	}
	for (int i = 1; i <= n; i++)
	{
		C.push_back({p[i], i});
		if(G[i].size() == 0)
		{
			continue;
		}
		if(p[G[i][0]] > p[G[i][1]])
			swap(G[i][0], G[i][1]);
		lft[i] = G[i][0], rgt[i] = G[i][1];
	}
	
	sort(C.begin(), C.end());
	for (auto u : C)
	{
		leaf.push_back(u.first);
		now.push_back(u.second);
	}
	
	dfs(root);
	val[root] = 0, h[root] = 0;
	dfs2(root);
	
	int k;
	cin >> k;
	for (int i = 0; i < k; i++)
	{
		ll cur;
		cin >> cur;
		if(cur > leaf.back())
			cout << fixed << setprecision(9) << val[now.back()] * 1.00 / h[now.back()] << "\n";
		else
		{
			ll st = upper_bound(leaf.begin(), leaf.end(), cur) - leaf.begin();
			st = now[st];
			if(lft[st] != 0)
				st = subt[lft[st]];
			cout << fixed << setprecision(9) << val[st] * 1.00 / h[st] << "\n";
		}
	}
}
