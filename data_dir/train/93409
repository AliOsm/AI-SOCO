#include <bits/stdc++.h>

using namespace std;

const int N = 200043;
const int INF = int(1e9);

int T[4 * N][32];
int A[4 * N][5];
int n, k;

void build(int x , int l , int r){
    if(l == r){
        for(int i = 0; i<(1 << k); i++){
            int cur = 0;
            for(int j = 0; j<k; j++){
                if(i & (1 << j))
                    cur += A[l][j];
                else cur -= A[l][j];
            }
            T[x][i] = cur;
        }
        return;
    }
    int mid = (l + r)/2;
    build(x * 2 + 1 , l , mid);
    build(x * 2 + 2 , mid + 1 , r);
    for(int i = 0; i<(1 << k); i++){
        T[x][i] = min(T[x*2+1][i] , T[x*2+2][i]);
    }
}

int query(int x , int s , int e , int l , int r , int ind){
    if(r<s || e<l)
        return INF;
    else if(l<=s && e<=r){
        return T[x][ind];
    }
    int mid = (s + e)/2;
    int q1 = query(x*2+1, s , mid , l , r , ind);
    int q2 = query(x*2+2,mid+1,e,l,r,ind);
    return min(q1,q2);
}

void update(int x , int s , int e , int l , int r){
    if(r<s || e<l)
        return;
    else if(l<=s && e<=r){
        for(int i = 0; i<(1 << k); i++){
            int cur = 0;
            for(int j = 0; j<k; j++){
                if(i & (1 << j))
                    cur += A[l][j];
                else cur -= A[l][j];
            }
            T[x][i] = cur;
        }
        return;
    }
    int mid = (s + e)/2;
    update(x*2+1,s,mid,l,r);
    update(x*2+2,mid+1,e,l,r);
    for(int i = 0; i<(1 << k); i++){
        T[x][i] = min(T[x*2+1][i] , T[x*2+2][i]);
    }
}


int main()
{
    scanf("%d%d",&n,&k);
    for(int i = 0; i<n; i++){
        for(int j = 0; j<k; j++){
            scanf("%d",&A[i][j]);
        }
    }
    build(0,0,n-1);
    int q;
    scanf("%d",&q);
    while(q--){
        int tp , l , r;
        scanf("%d",&tp);
        if(tp == 1){
            int pos ; scanf("%d",&pos); pos--;
            for(int i = 0; i<k; i++){
                scanf("%d",&A[pos][i]);
            }
            update(0,0,n-1,pos,pos);
        }
        else{
            int l , r;
            scanf("%d%d",&l,&r);
            l--; r--;
            int ans = 0;
            for(int i = 0; i<(1 << k); i++){
                int a = query(0,0,n-1,l,r,i);
                int b = query(0,0,n-1,l,r,((1 << k)-1)^i);
                ans = max(ans , abs(a + b));
            }
            printf("%d\n",ans);
        }
    }
    return 0;
}
