/*
#pragma GCC target("avx2")
#pragma GCC optimization("O3")
#pragma GCC optimization("unroll-loops")
ordered_set -> less -> less_equal
ordered_set find_by_order() -> возвращает k-ый элемент(отсчёт с нуля)
ordered_set order_of_key() -> возвращает количество элементов в множестве,строго меньших,чем наш элемент
*/
#include <bits/stdc++.h>
#include <random>
#include <ext/pb_ds/assoc_container.hpp>

#define pb push_back
#define F first
#define S second
#define all(x) x.begin(),x.end()
#define ub upper_bound
#define lb lower_bound
#define bit __builtin_popcount
#define memset(x) memset(x,0,sizeof(x))

using namespace std;
using namespace __gnu_pbds;

template<typename T> using ordered_set=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());


typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<vector<int> > matrix;

inline void boost(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}

const ll maxn=5e6+123;
const ll inf=1e9+123;
const ll linf=1e18+123;
const ll mod=1000000123;
const ll p=667;
const double eps=1e-9;
const double pi=acos(-1);
int dx[8]={0,1,-1,0,1,-1,1,-1};
int dy[8]={1,0,0,-1,1,1,-1,-1};
ll h[maxn],P[maxn];

int main(){
    boost();
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    ll T;
    cin>>T;
    while(T--){
        string s;
        cin>>s;
        ll n=s.size();
        P[0]=1;
        for(ll i=1;i<=n+n+n;i++){
            P[i]=(((P[i-1]*p)%mod)+mod)%mod;
        }
        ll l=0,r=n-1;
        while(s[l]==s[r] && l<r){
            l++;
            r--;
        }
        string t="";
        for(ll i=l;i<=r;i++){
            t+=s[i];
        }
        string tt=t;
        reverse(all(tt));
        t=t+"#"+tt;
        for(ll i=0;i<t.size();i++){
            h[i]=(((h[i-1]*p+t[i])%mod)+mod)%mod;
        }
        ll mx=0;
        for(ll i=1;i<=r-l+1;i++){
            ll R=t.size()-1;
            ll L=R-i+1;
            ll cntr=h[i-1];
            ll cntr1=(((h[R]-h[L-1]*P[R-L+1])%mod)+mod)%mod;
            if(cntr==cntr1){
                mx=i;
            }
        }
        string ans1=s.substr(0,l)+t.substr(0,mx)+s.substr(r+1,l);

        t="";
        for(ll i=r;i>=l;i--){
            t+=s[i];
        }
        tt=t;
        reverse(all(tt));
        t=t+"#"+tt;
        for(ll i=0;i<t.size();i++){
            h[i]=(((h[i-1]*p+t[i])%mod)+mod)%mod;
        }
        mx=0;
        for(ll i=1;i<=r-l+1;i++){
            ll R=t.size()-1;
            ll L=R-i+1;
            ll cntr=h[i-1];
            ll cntr1=(((h[R]-h[L-1]*P[R-L+1])%mod)+mod)%mod;
            if(cntr==cntr1){
                mx=i;
            }
        }
        string ans2=s.substr(0,l)+t.substr(0,mx)+s.substr(r+1,l);
        if(ans1.size()>=ans2.size()){
            cout<<ans1<<"\n";
        }
        else{
            cout<<ans2<<"\n";
        }
    }
	exit(0);
}
