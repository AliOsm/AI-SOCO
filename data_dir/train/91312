#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

vector<vector<pair<int, double>>> solve(int n, int m) {
	vector<vector<pair<int, double>>> res(m, vector<pair<int, double>>());
	
	int nextBottle = 0;
	int nextMan = -1;
	double remBottle = 0;
	double remMan = 0;
	double eps = 1e-10;
	while (nextBottle <= n) {
		if (remBottle < eps) { remBottle = 1; nextBottle++; continue; }
		if (remMan < eps) { remMan = n * 1.0 / m ; nextMan++; continue; }
		
		double d = min(remMan , remBottle);
		res[nextMan].push_back( { nextBottle , d } );
		remBottle -= d;
		remMan -= d;
	}
	
	vector<int> cnt(n);
	for (auto &v : res) for (auto p : v) cnt[p.first - 1]++;
	
	for (auto x : cnt) if (x > 2) return { };
	
	
	return res;
	
}

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(int, w);
	next(int, m);
	
	auto res = solve(n, m);
	if (res.empty()) cout << "NO" << endl;
	else {
		for (auto &v : res) for (auto &p : v) p.second *= w;
		
		cout << "YES" << endl;
		
		fixed(cout);
		cout << setprecision(10);
		for (auto &v : res) {
			for (auto &p : v) cout << p << ' ';
			cout << endl;
		}
	}
}