#pragma comment(linker, "/STACK:134217728")

#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <map>
#include <set>
#include <algorithm>
#include <string>
#include <stack>
#include <functional>
#include <numeric>
#include <memory.h>

using namespace std;

typedef long long LL;

int n, m;

int a[1 << 17], b[1 << 17];
map<int, LL> M;
set<int> S;

int main()
{
	scanf("%d%d", &n, &m);
	for(int i = 0; i < n; ++i)
	{
		scanf("%d", &a[i]);
		S.insert(a[i]);
	}
	for(int i = 0; i < m; ++i)
	{
		scanf("%d", &b[i]);
		S.insert(b[i]);
	}
	if (*min_element(a, a + n) >= *max_element(b, b + m))
	{
		printf("0\n");
		return 0;
	}
	sort(a, a + n);
	sort(b, b + m, greater<int>());
	LL s = 0;
	int p = 0;
	int prev = 0;
	while (*S.begin() < a[0])
		S.erase(S.begin());
	while (p < n)
	{
		s += (LL)(*S.begin() - prev) * p;
		while (p < n && a[p] <= *S.begin())
			s += *S.begin() - a[p++];
		M[*S.begin()] += s;
		prev = *S.begin();
		S.erase(S.begin());
	}
	while (!S.empty())
	{
		s += (LL)(*S.begin() - prev) * n;
		M[*S.begin()] += s;
		prev = *S.begin();
		S.erase(S.begin());
	}
	for(int i = 0; i < n; ++i)
		S.insert(a[i]);
	for(int i = 0; i < m; ++i)
		S.insert(b[i]);
	prev = (int)1e9 + 10;
	p = 0;
	s = 0;
	while (*S.rbegin() > b[0])
		S.erase(*S.rbegin());
	while (p < m)
	{
		s += (LL)(prev - *S.rbegin()) * p;
		while (p < m && b[p] >= *S.rbegin())
			s += b[p++] - *S.rbegin();
		M[*S.rbegin()] += s;
		prev = *S.rbegin();
		S.erase(*S.rbegin());
	}
	while (!S.empty())
	{
		s += (LL)(prev - *S.rbegin()) * m;
		M[*S.rbegin()] += s;
		prev = *S.rbegin();
		S.erase(*S.rbegin());
	}
	LL res = 1LL << 60;
	for(map<int, LL> :: iterator it = M.begin(); it != M.end(); ++it)
		res = min(res, it->second);
	printf("%I64d\n", res);
	return 0;
}