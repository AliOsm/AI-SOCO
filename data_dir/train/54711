#ifndef _GLIBCXX_NO_ASSERT
#include <cassert>
#endif
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <ciso646>
#include <climits>
#include <clocale>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#if __cplusplus >= 201103L
#include <ccomplex>
#include <cfenv>
#include <cinttypes>
#include <cstdbool>
#include <cstdint>
#include <ctgmath>
#include <cwchar>
#include <cwctype>
#endif

// C++
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>

#if __cplusplus >= 201103L
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <typeindex>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#endif

#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)  for(int i=a;i<b;i++)
using namespace std;

string to_string(string s) {
	return '"' + s + '"';
}

string to_string(const char* s) {
	return to_string((string) s);
}

string to_string(bool b) {
	return (b ? "true" : "false");
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
	return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
	bool first = true;
	string res = "{";
	for (const auto &x : v) {
		if (!first) {
			res += ", ";
		}
		first = false;
		res += to_string(x);
	}
	res += "}";
	return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
	cerr << " " << to_string(H);
	debug_out(T...);
}

#ifdef PRINTERS
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

struct Edge {
	int u, v;
	ll cap, flow;
	Edge() {}
	Edge(int _u, int _v, ll _cap): u(_u), v(_v), cap(_cap), flow(0) {}
};
int a,b;

vi temp1;
vi temp2;
struct Dinic {
	int N;
	vector<Edge> E;
	vector<vector<int>> g;
	vector<int> d, pt;
	Dinic(int _N): N(_N), E(0), g(_N), d(_N), pt(_N) {}
	void AddEdge(int u, int v, ll cap) {
		if (u != v) {
			E.emplace_back(Edge(u, v, cap));
			g[u].emplace_back(E.size() - 1);
			E.emplace_back(Edge(v, u, 0));
			g[v].emplace_back(E.size() - 1);
		}
	}
	bool BFS(int S, int T) {
		queue<int> q({S});
		fill(d.begin(), d.end(), N + 1);
		d[S] = 0;
		while(!q.empty()) {
			int u = q.front(); q.pop();
			if (u == T) break;
			for (int k: g[u]) {
				Edge &e = E[k];
				if (e.flow < e.cap && d[e.v] > d[e.u] + 1) {
					d[e.v] = d[e.u] + 1;
					q.emplace(e.v);
				}
			}
		}
		return d[T] != N + 1;
	}
	ll DFS(int u, int T, ll flow = -1) {
		if (u == T || flow == 0) return flow;
		for (int &i = pt[u]; i < sz(g[u]); ++i) {
			Edge &e = E[g[u][i]];
			Edge &oe = E[g[u][i]^1];
			if (d[e.v] == d[e.u] + 1) {
				ll amt = e.cap - e.flow;
				if (flow != -1 && amt > flow) amt = flow;
				if (ll pushed = DFS(e.v, T, amt)) {
					e.flow += pushed;
					oe.flow -= pushed;
					return pushed;
				}
			}
		}
		return 0;
	}

	ll MaxFlow(int S, int T) {
		ll total = 0;
		while (BFS(S, T)) {
			fill(pt.begin(), pt.end(), 0);
			while (ll flow = DFS(S, T))
				total += flow;
		}
		return total;
	}
};

const int N = 5000;
int n;

void query(int l, int r, Dinic& g,int idx,int add) {
	for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
		if (l&1) g.AddEdge(idx,add+(l++),1);
		if (r&1) g.AddEdge(idx,add+(--r),1);
	}
}

void solve(){
	cin>>a>>b;
	n=b;
	Dinic g(a+2*b+2);
	vi chs(a+1);
	map<int,vi>m;
	rep(i,1,a+1){
		int ch;
		cin>>ch;
		chs[i]=ch;
		if(ch==0){
			g.AddEdge(0,i,1);
			int K;
			cin>>K;
			while(K--){
				int temp;
				cin>>temp;
				temp--;
				query(temp,temp+1,g,i,a);
			}
		}
		else if(ch==1){
			g.AddEdge(0,i,1);
			int l,r;
			cin>>l>>r;
			l--;
			r--;
			query(l,r+1,g,i,a);
		}
		else{
			g.AddEdge(0,i,2);
			int p,q,r;
			cin>>p>>q>>r;
			m[i].pb(p);
			m[i].pb(q);
			m[i].pb(r);
			p--;
			q--;
			r--;
			query(p,p+1,g,i,a);
			query(q,q+1,g,i,a);
			query(r,r+1,g,i,a);
		}
	}
	rep(i,1,b){
		g.AddEdge(i+a,2*i+a,b);
		g.AddEdge(i+a,2*i+a+1,b);
	}
	rep(i,0,b){
		g.AddEdge(a+i+b,a+2*b+1,1);
	}
	cout<<g.MaxFlow(0,a+2*b+1)<<endl;
	function<int(int)>dfs=[&](int i){
		if(i==a+2*b+1)return -2;
		for(auto j:g.g[i]){
			if(g.E[j].flow>0){
				int temp=dfs(i^g.E[j].u^g.E[j].v);
				if(temp==-2){g.E[j].flow--;return i;}
				if(temp>0){g.E[j].flow--;return temp;}
			}
		}
		return -1;
	};
	for(int i=1;i<=a;i++){
		while(true){
			int temp=dfs(i);
			if(temp>0){
				temp1.pb(i);
				temp2.pb(temp-(a+b-1));
			}
			else break;
		}
	}
	vi ans(b+1);
	vi cnt(a+1);
	set<int>removed;
	map<int,int>alpha;
	rep(i,0,sz(temp1)){
		alpha[temp1[i]]=temp2[i];
		ans[temp2[i]]=temp1[i];
		cnt[temp1[i]]++;
	}
	rep(i,1,a+1){
		if(chs[i]==2 and cnt[i]==1){
			if(alpha[i]==m[i][0]){
				ans[m[i][1]]=i;
			}
			else{
				ans[m[i][0]]=i;
			}
			cnt[i]++;
		}
	}
	rep(i,1,b+1){
		if(ans[i])cout<<ans[i]<<" "<<i<<endl;
	}
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t=1;
//	cin>>t;
	while(t--){
		solve();
	}
	return 0;
}