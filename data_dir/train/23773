#include <bits/stdc++.h>


#pragma comment(linker, "/stack:20000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")

using namespace std;

typedef long long ll;
typedef pair < int , int > pii;
const int maxn = (int) 2e5 + 1;

#define int ll

int n;
int a, b;
vector < pii > g[maxn];
int ans = 1e9;
int res[maxn], take[maxn], ok[maxn];

int get(int v, int p){
    int res = 0;
    for(pii i : g[v]){
        if(i.first == p){
            continue;
        }
        res += i.second + get(i.first, v);
    }
    return res;
}


int bfs(int v, int p){
    queue < pii > q;
    q.push({v, p});
    int res = 1e9;
    while(!q.empty()){
        int x = q.front().first, par = q.front().second;
        res = min(res, ok[x]);
        q.pop();
        for(pii i : g[x]){
            if(i.first == par){
                continue;
            }
            ok[i.first] = ok[x];
            if(i.second == 1){
                ok[i.first]--;
            }
            else {
                ok[i.first]++;
            }
            q.push({i.first, x});
        }
    }
    return res;
}


int cmp(pii a, pii b){
    return a.first - a.second < b.first - b.second;
}

int solve(int root){
    vector < pii > all;
    all.clear();
    int cur = 0;
    for(pii a : g[root]){
        res[a.first] = get(a.first, root) + a.second;
        cur += res[a.first];
    }
    for(pii a : g[root]){
        ok[a.first] = res[a.first] + (a.second == 0 ? 1 : -1);
        take[a.first] = bfs(a.first, root);
        all.push_back({take[a.first], res[a.first]});
    }
    sort(all.begin(), all.end(), &cmp);
    cur += all[0].first - all[0].second;
    if(all.size() > 1){
        if(all[1].first - all[1].second < 0){
            cur += all[1].first - all[1].second;
        }
    }
    return cur;
}

 main(){
    cin >> n;
    for(int i = 1; i < n; i++){
        cin >> a >> b;
        g[a].push_back({b, 0});
        g[b].push_back({a, 1});
    }
    if(n < 4){
    cout << 0;
    return 0;
    }
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= n; j++){
            ok[j] = 1e9;
            res[j] = 1e9;
            take[j] = 1e9;
        }
        ans = min(ans, solve(i));
    }
    cout << ans;
}
