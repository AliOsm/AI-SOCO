#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef complex<double> point;
#define F first
#define S second



int main()
{
	#ifdef DGC
		//freopen("a.txt", "r", stdin);
		//freopen("b.txt", "w", stdout);
	#endif

	ios_base::sync_with_stdio(0), cin.tie(0);

	const int N = 4e5 + 5;
	vector<int> p(N + 5);
	for (ll i = 3; i <= N; i += 2)
	    if (!p[i])
	        for (ll j = i * i; j <= N; j += 2 * i)
	            p[j] = i;

	p[1] = 1;
	for (int i = 4; i <= N; i += 2)
		p[i] = 2;

	int n;
	cin >> n;
	vector<int> a(n);

	int one = 0;
	for (auto &i : a)
	{
		cin >> i;
		one += i == 1;
	}

	int best = -1;
	vector<int> ans;

	int two = n-one;
	for (int i = 0; i <= min(2, one); ++i)
		for (int j = 0; j <= min(1, two); ++j)
		{
			vector<int> t;
			for (int k = i; k--; ) t.push_back(1);
			for (int k = j; k--; ) t.push_back(2);
			do
			{
				auto x = t;
				for (int k = two-j; k--; ) x.push_back(2);
				for (int k = one-i; k--; ) x.push_back(1);
				int cnt = 0;
				for (int k = 0, s = 0; k < n; ++k)
				{
					s += x[k];
					cnt += !p[ s ];
				}
				if (cnt > best)
					best = cnt, ans = x;
			} while (next_permutation(t.begin(), t.end()));
		}

	for (auto &i : ans)
		cout << i << " \n"[&i==&ans.back()];

	return 0;
}
