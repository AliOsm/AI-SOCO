#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using PII = pair<int, int>;
using VI = vector<int>;

const int N = 2005, INF = 1e8;
int best[N][N];

int main() {
#ifdef LOCAL_EXEC
//	freopen("sample.in", "r", stdin);
//	freopen("sample.out", "w", stdout);
#else
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#endif

  int n, h, l, r; cin >> n >> h >> l >> r;
  for (int j = 1; j < h; j++) {
    best[0][j] = -INF;
  }
  for (int i = 1; i <= n; i++) {
    int a; cin >> a;
    for (int j = 0; j < h; j++) {
      best[i][j] = -INF;
      for (int gap: {a, a - 1}) {
        int prv = (j - gap + h) % h;
        best[i][j] = max(best[i][j], best[i - 1][prv]);
      }
      if (l <= j && j <= r) best[i][j]++;
    }
  }

  int ans = 0;
  for (int j = 0; j < h; j++) {
    ans = max(ans, best[n][j]);
  }
  cout << ans << endl;

  return 0;
}
