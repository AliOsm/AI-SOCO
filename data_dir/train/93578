#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
typedef long long ll;
const int N = 2000010;
const int oo = 1e9;


int n;
pii tv[N];
vector<int> all;
int pre[N], seg[4 * N];

void build(int n , int s , int e) {
	if (s == e) {
		seg[n] = pre[s];
		return ;
	}
	build(2 * n, s, (s + e) / 2);
	build(2 * n + 1, (s + e) / 2 + 1, e);
	seg[n] = min(seg[2 * n], seg[2 * n + 1]);
}
int get(int n , int s , int e , int l , int r) {
	if (e < l || s > r)
		return oo;
	if (s >= l && e <= r)return seg[n];
	return min(get(2 * n, s, (s + e) / 2, l, r), get(2 * n + 1, (s + e) / 2 + 1, e, l, r));
}
int main() {
	//freopen("input.txt", "r", stdin);
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) {
		scanf("%d%d", &tv[i].first, &tv[i].second);
		all.push_back(tv[i].first);
		all.push_back(tv[i].second);
		all.push_back(tv[i].first+1);
		all.push_back(tv[i].second-1);
		all.push_back(tv[i].second+1);	
	}
	sort(all.begin(), all.end());
	all.resize(unique(all.begin(), all.end()) - all.begin());
	for (int i = 0; i < n; ++i) {
		tv[i].first = lower_bound(all.begin(), all.end(), tv[i].first) - all.begin() + 1;
		tv[i].second = lower_bound(all.begin(), all.end(), tv[i].second) - all.begin() + 1;
		pre[tv[i].first]++;
		pre[tv[i].second + 1]--;
	}
	for (int i = 1 ; i <= all.size() ; i++) {
		pre[i] += pre[i - 1];
	}
	build(1,1,all.size());
	for (int i = 0; i < n; ++i) {
		if (get(1, 1, all.size(), tv[i].first, tv[i].second) > 1) {
			printf("%d\n", i + 1);
			return 0;
		}
	}
	puts("-1");
	return 0;
}