#include <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
using namespace std;
typedef long long ll ; 
typedef long double ld ;
typedef pair<ll , ll> pll ;

const ll N = 3e6 + 30 , Mod = 1e9 + 7 ;
const ll SQ = 330 ;
ll n , a , b , spf[N] , c[N] , M[N]  , ans , ok1[N] , ok2[N] ,dp[N] , ps[N] , ps2[N];
set<ll> prime ;
vector<ll> p ;
void f(ll x) {
    ll cur = x ; 
	for (int i = 2 ; i * i <= cur ; i ++) {
		if (x % i == 0 ) {
			while (x % i ==0) x /= i ;
			prime.insert(i) ;
		}
		if (x == 1) break;
	}
	if (x > 1) prime.insert(x) ;
	return ;
}
ll solve(ll k) {
	for (int i = 1 ; i <= n ; i ++) {
		if (c[i] % k == 0)
			ok1[i] = 1 ;
		else ok1[i] = 0 ;	
	}		
	
	for (int i = 1 ;  i <= n ; i ++) ok2[i] = 1 ;
	for (int i = 1 ; i <= n ; i ++) 
		if (c[i] % k != 0 and c[i] % k != k - 1 and c[i] % k != 1)
			ok2[i] = 0 ;
	//for (int i = 1 ; i <= n ;  i ++) cout << ok2[i] << ' ' ;
	ll mx = -1000 , mn = 1e18 ;
	for (ll i = 1 ; i <= n ; i ++) 
		if (!ok2[i]) mn = min(mn , i)  , mx = max(mx , i) ;
	fill(ps , ps + N , 0) ;
	for (int i = 1 ; i <= n ; i ++) ps[i] = (ps[i - 1] + (1 - ok1[i]));
	if (mx < 0) {
		ll res = 0 , cur = 0 ;
		for (int i = 1;  i <= n; i ++) {
			cur = max(0ll , cur + (1 - ok1[i]) * b - a) ;
			res = max(res , cur) ;
		}
		//cout << " res : ssd   " <<k << ' ' << ps[n]<< endl;
		return ps[n] * b - res ;
	}
	ll ans_mn = 1e18 , ans_mx = 1e18 ;
	fill(ps2 , ps2 + N , 0) ;
	ps2[n] = 0 ;
	if (c[n] % k != 0)ps2[n] = 1;
	for (int i= n - 1 ; i > mx ; i -- ) ps2[i] = ps2[i  + 1] + (1 - ok1[i]) ;
	for (int i = 1 ; i < mn ; i ++)  ans_mn = min(ans_mn , ps[i - 1] * b + (mn - i) * a) ;
	for (int i = n ; i > mx ; i --)  ans_mx = min(ans_mx , (ps2[i + 1]) * b + (i - mx) * a) ;
	ans_mn = min(ans_mn , ps[mn - 1] * b) ;
	ans_mx = min(ans_mx , ps2[mx + 1] * b) ;
	
	return ans_mn + ans_mx + (mx - mn + 1) * a ;		
}
int main () {
    ios::sync_with_stdio(0), cin.tie(0) ;
    cin >> n >> a >> b ;
    //cout << endl;
    for (int i = 1 ; i <= n ; i ++) cin >> c[i] ;
    for (int i = 2 ; i * i < N ; i  ++) {
    	if (M[i]) continue ;
    	for (int j = i * i; j < N ; j += i )
    		spf[j] = i , M[j] = 1 ;
	}
    f(c[1] - 1) ;
    f(c[1] + 0) ;
    f(c[1] + 1) ;
    f(c[n] - 1) ;
    f(c[n] + 0) ;
    f(c[n] + 1) ;
    
    for (auto g : prime) p.pb(g) ;
    ans = a * n ;
    //ans = min(ans , solve(3));
    for (auto g  : p ) ans = min(ans , solve(g)) ;
    cout << ans << endl;
    return (0) ;
}