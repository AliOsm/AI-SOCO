#include <bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define MP make_pair
#define PB push_back
#define size(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define FR(i, a, b) for(int i = a; i < b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define debug(x) cerr<< #x << ": " << x << endl;
#define fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

//const int mod = 1000 * 1000 * 1000 + 7;
const int N = 2 * 100 * 1000 + 10;
vector <int> vec[N];
pii e[N];
int deg[N], ans[N];
set <pii> st;

int main()
{
	int n, m, k;
	scanf("%d %d %d", &n, &m, &k);
	FR(i, 0, m)
	{
		scanf("%d %d", &e[i].F, &e[i].S);
		e[i].F--, e[i].S--;
		vec[e[i].F].PB(e[i].S);
		vec[e[i].S].PB(e[i].F);
		deg[e[i].F]++;
		deg[e[i].S]++;
	}

	FR(i, 0, n)
		st.insert(MP(deg[i], i));

	ROF(i, m - 1, 0)
	{
		while(!st.empty())
		{
			int v = st.begin() -> S;
			if(deg[v] >= k)
				break;
			else
			{
				st.erase(st.begin());
				for(int u: vec[v])
				{
					if(st.find(MP(deg[u], u)) != st.end())
					{
						st.erase(MP(deg[u], u));
						deg[u]--;
						st.insert(MP(deg[u], u));
					}

				}
			}
		}
		ans[i] = size(st);
		if(ans[i] == 0)
			break;
		int a = e[i].F, b = e[i].S;
		if(st.find(MP(deg[a], a)) != st.end() && st.find(MP(deg[b], b)) != st.end())
		{
			st.erase(MP(deg[a], a));
			deg[a]--;
			st.insert(MP(deg[a], a));
			st.erase(MP(deg[b], b));
			deg[b]--;
			st.insert(MP(deg[b], b));
		}
		vec[a].pop_back();
		vec[b].pop_back();
	}

	FR(i, 0, m)
		printf("%d ", ans[i]);
	printf("\n");
	return 0;
}

