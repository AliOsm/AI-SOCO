#include <iostream>
#include <iomanip>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <stack>
#include <queue>
#include <ctime>
#include <cassert>
#include <complex>
#include <string>
#include <cstring>
#include <chrono>
#include <random>
#include <bitset>
using namespace std;
#define endl '\n'

const int N = 1e6 + 100;
vector<int> adj[N];
char letter[N];
int Index[N];
int res[N];
int minDist[N];
int cntS[N];
int timeIn[N];
int Time = 1;

void dfs(int node, int minTime) {
	//cout << "let, minTime: " << letter[node] << " " << minTime << endl;
	if(Index[node] != -1) {
		res[Index[node]] = minDist[node];
		++cntS[node];
	}
	for(int i = 0; i < 26; ++i) {
		const int child = adj[node][i];
		if(child == -1) continue;
		minDist[child] = 1 + minDist[node];
		if(Index[child] != -1) {
			minDist[child] = min(minDist[child], cntS[node] + minTime + 1);
		}
		dfs(child, min(minDist[child], minTime + cntS[node]));
		cntS[node] += cntS[child];
	}
}

signed main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int n;
	cin >> n;
	fill(Index, Index+n+1, -1);
	fill(minDist, minDist+n+1, n+n+10);
	adj[0].resize(26,-1);
	for(int i = 1; i <= n; ++i) {
		int par;
		char Let;
		cin >> par >> Let;
		letter[i] = Let;
		adj[i].resize(26,-1);
		adj[par][Let-'a'] = i;
	}
	int k;
	cin >> k;
	vector<int> arr(k);

	for(int i = 0; i < k; ++i) {
		cin >> arr[i];
		Index[arr[i]] = i;
	}
	minDist[0] = 0;
	dfs(0,0);
	for(int i = 0; i < k; ++i) {
		cout << res[i] << " ";
	}
}
