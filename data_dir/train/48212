#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>
#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mod 1000000007
#define PI 3.1415926536
#define pll pair<ll, ll>
using namespace std;

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
            if (n % i == 0) {
                  return false;
            }
    }
    return true;
}

inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       tp %= mod;
       res %= mod;
       b >>= 1ll;
    }
    return res;
}

ll vec_mult(ll x1, ll y1, ll x2, ll y2, ll x3, ll y3) {
   return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
   puts("YES");
   exit(0);
}

void no() {
   puts("NO");
   exit(0);
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

const ll N = 2e5 + 10, inf = 2e18;
ll xx[] = {0, 0, 1, -1};
ll yy[] = {1, -1, 0, 0};
ll t;
// please, accepted!

int main()
{
    t = nxt();
    while(t--) {
        ll n = nxt();
        vector<pair<pll, ll>> mas;
        multiset<ll> st;
        vector<ll> ans(n, 0);
        for(int i = 0; i < n; i++) {
            ll t1 = nxt(), t2 = nxt();
            st.insert(t1);
            mas.push_back({{t2, t1}, i});
        }
        sort(all(mas));
        for(int i = 0; i < n; i++) {
            swap(mas[i].first.first, mas[i].first.second);
        }

        for(int i = 0; i < n; i++) {
            st.erase(st.find(mas[i].first.first));
            ans[mas[i].second] = 1;
            auto it = st.lower_bound(mas[i].first.second);
            if(it == st.begin() && *it > mas[i].first.second) {
                break;
            }
        }
        for(int i = 0; i < n; i++) {
            if(ans[i] == 0) {
                ans[i] = 2;
            }
        }
        if(find(all(ans), 2) == ans.end()) {
            cout << -1 << endl;
        }
        else {
            for(auto x : ans) {
                cout << x << " ";
            }
            cout << endl;
        }
    }
}
