/* 75B */
#include <iostream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <functional>
#include <iterator>
#include <iomanip>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define sti				set<int>
#define stpii			set<pair<int, int> >
#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define vpii			vector<pair<int,int> >
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define clr				clear
#define pb 				push_back
#define mp 				make_pair
#define fir				first
#define sec				second
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1

typedef struct node_t {
	char name[15];
	int p;
	friend bool operator< (const node_t& a, const node_t& b) {
		if (a.p == b.p)
			return strcmp(a.name, b.name)<0;
		return b.p < a.p;
	}
} node_t;

const int maxn = 105;
map<string,int> tb;
node_t nd[maxn];
char ss[15], s[105];
int m = 1;

int main() {
	ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif

	int t;

	scanf("%s", ss);
	tb[string(ss)] = 0;
	map<string,int>::iterator iter;
	string sa, sb;

	scanf("%d%*c", &t);
	int i, j, k;
	int aid, bid;

	while (t--) {
		gets(s);
		i = strchr(s, ' ') - s;
		sa = string(s, i);
		iter = tb.find(sa);
		if (iter == tb.end()) {
			strncpy(nd[m].name, s, i);
			aid = tb[sa] = m++;
		} else {
			aid = iter->sec;
		}
		++i;
		if (s[i] == 'l')
			k = 5;
		else if (s[i] == 'c')
			k = 10;
		else if (s[i] == 'p')
			k = 15;
		else
			k = 0;
		if (k <= 5) {
			i = strchr(s+i, ' ')-s;
			++i;
			j = strchr(s+i, '\'')-s;
			sb = string(s+i, j-i);
		} else {
			i = strchr(s+i, ' ')-s;
			i++;
			i = strchr(s+i, ' ')-s;
			i++;
			j = strchr(s+i, '\'')-s;
			sb = string(s+i, j-i);
		}
		iter = tb.find(sb);
		if (iter == tb.end()) {
			strncpy(nd[m].name, s+i, j-i);
			bid = tb[sb] = m++;
		} else {
			bid = iter->sec;
		}

		if (aid==0 || bid==0) {
			if (aid == 0)
				swap(aid, bid);
			nd[aid].p += k;
		}
		
		#ifndef ONLINE_JUDGE
			printf("sa = %s, sb = %s\n", sa.c_str(), sb.c_str());
		#endif
	}

	sort(nd+1, nd+m);

	for (i=1; i<m; ++i) {
		printf("%s", nd[i].name);
		#ifndef ONLINE_JUDGE
			printf(" %d", nd[i].p);
		#endif
		putchar('\n');
	}

	#ifndef ONLINE_JUDGE
		printf("time = %d.\n", (int)clock());
	#endif

	return 0;
}
