#include<bits/stdc++.h>
using namespace std;

const int N=64,INF=1e8;
int n,s,k,r[N];
string c;
struct state {int ac,p,v,l;};
bool vst[N][N][2048];
queue<state>q;
void add(state t) {
  if(!vst[t.ac][t.p][t.v])vst[t.ac][t.p][t.v]=1,q.push(t);
}
int bfs() {
  state init={s-1,n,0,0};
  add(init);
  while(q.size()) {
    state t=q.front();q.pop();
    if(t.v>=k)return t.l;
    if((r[t.ac]>r[t.p])&&(c[t.ac]!=c[t.p]))add({t.ac,t.ac,t.v+r[t.ac],t.l});
    if(t.ac>0)add({t.ac-1,t.p,t.v,t.l+1});
    if(t.ac<n-1)add({t.ac+1,t.p,t.v,t.l+1});
  }
  return -1;
}
int main() {
  ios::sync_with_stdio(false);
  cin>>n>>s>>k;
  for(int i=0;i<n;i++)cin>>r[i];
  cin>>c;c+='N';
  cout<<bfs()<<endl;
}