#include <bits/stdc++.h>

#define x first
#define y second
#define pb push_back
#define mp make_pair
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define all(v) v.begin(),v.end()
#define nl '\n'

#define boost ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0)

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef pair<ll,ll> pll;

const ll INF=1e18;
const int inf=1e9;
const ld eps=1e-7;
const ld pi=acos(-1);
const int dx[8]={0,0 ,1,-1,1,1,-1,-1};
const int dy[8]={1,-1,0,0,1,-1,1,-1};
const int mod1=998244353;
const int mod2=1e9+7;
const int N=1e5+11;

set<int>x[N],y[N];

int main(){
  boost;

  ll n,m,k;
  cin>>n>>m>>k;
  for(int i=1;i<=k;i++){
    int a,b;
    cin>>a>>b;
    x[a].insert(b);
    y[b].insert(a);
  }
  for(int i=1;i<=n;i++){
    x[i].insert(0);
    x[i].insert(m+1);
  }
  for(int i=1;i<=m;i++){
    y[i].insert(0);
    y[i].insert(n+1);
  }
  int a=1,b=1;
  int l=0,r=m+1,u=0,d=n+1;
  ll cnt=1;
  bool ok=1;
  for(int i=1;;i++){
    if(cnt==n*m-k)break;
    if(i%4==1){
      auto it=x[a].up_b(b);
      r=min(r,*it);
      if(i>1){
        l=max(l,b);
      }
      if(r-1<=b&&i>1){
        ok=0;
        break;
      }
      cnt+=r-1-b;
      b=r-1;
    }
    else if(i%4==2){
      auto it=y[b].up_b(a);
      d=min(d,*it);
      u=max(u,a);
      if(d-1<=a){
        ok=0;
        break;
      }
      cnt+=d-1-a;
      a=d-1;
    }
    else if(i%4==3){
      auto it=x[a].up_b(b);
      it--;
      l=max(l,*it);
      r=min(r,b);
      if(l+1>=b){
        ok=0;
        break;
      }
      cnt+=b-l-1;
      b=l+1;
    }
    else{
      auto it=y[b].up_b(a);
      it--;
      u=max(u,*it);
      d=min(d,a);
      if(u+1>=a){
        ok=0;
        break;
      }
      cnt+=a-u-1;
      a=u+1;
    }
  }
  if(ok){
    cout<<"Yes";
  }
  else{
    cout<<"No";
  }
  return 0;
}
