#include<iostream>
#include<stdio.h>
#include<cassert>
#include<cstring>
#include<time.h>
#include<cstdlib>
#include<cmath>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = (int)15e4 + 10;
int a[maxn],b[maxn],add[4 * maxn],mi[4 * maxn],p[maxn];
void push(int idx) {
    if (add[idx]) {
        add[2 * idx] += add[idx];
        mi[2 * idx] += add[idx];
        add[2 * idx + 1] += add[idx];
        mi[2 * idx + 1] += add[idx];
        add[idx] = 0;
    }
}
void update(int l, int r, int a, int b, int val, int idx) {
    if (a > b) return;
    if (r < a || b < l) return;
    if (a <= l && r <= b) {
        add[idx] += val;
        mi[idx] += val;
    } else {
        push(idx);
        int m = (l + r) >> 1;
        update(l,m,a,b,val,2 * idx);
        update(m + 1,r,a,b,val,2 * idx + 1);
        mi[idx] = min(mi[2 * idx],mi[2 * idx + 1]);
    }
}
int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    int n,len,h; cin >> n >> len >> h;
    for (int i = 0; i < len; i++) {
        scanf("%d",&b[i]);
    }
    sort(b,b + len);
    reverse(b,b + len);
    for (int i = 0; i < n; i++) {
        scanf("%d",&a[i]);
    }
    for (int i = 0; i < len; i++) {
        update(0,len - 1,i,i,i - len,1);
    }
    for (int i = 0; i < n; i++) {
        int l = -1;
        int r = len;
        while(l < r - 1) {
            int m = (l + r) >> 1;
            if (b[m] + a[i] >= h) {
                l = m;
            } else {
                r = m;
            }
        }
        p[i] = l;
    }
    for (int i = 0; i < len - 1; i++) {
        update(0,len - 1,0,p[i],1,1);
    }
    int res = 0;
    for (int i = len - 1; i < n; i++) {
        update(0,len - 1,0,p[i],1,1);
        if (mi[1] >= 0) {
            res++;
        }
        update(0,len - 1,0,p[i - len + 1],-1,1);
    }
    cout << res << endl;
    return 0;
}
