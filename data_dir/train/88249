#include <iostream>
#include<fstream>
#include <stdio.h>
#include <vector>
#include <string.h>
#include <set>
#include <algorithm>
#include <map>
#include <queue>
#include <set>
#include <cmath>
#ifdef lyosha
#define files freopen("input.txt", "r", stdin);
#else
#define files //freopen("howmany.in","r",stdin); freopen("howmany.out","w",sdout);
#endif
using namespace std;
#define pb push_back
typedef long long ll;
#define y1 fjlwekf
const int mod = 1e9 + 7;
const int N = 1e5 + 5;
vector<vector<int> > g;
int m, k, p;
vector<int> tmp;
ll sum[N];
void dfs(int v, int p = -1, int depth = 0){
    for(int to : g[v]){
        if(to == p) continue;
        dfs(to, v, depth + 1);
    }
    if(depth) tmp.push_back(depth);
}
int main(){
    files;
    cin >> m >> k >> p;
    k = min(m - 1, k);
    g.resize(m);
    for(int i = 0; i < m - 1; ++i){
        int x, y;
        scanf("%d %d", &x, &y);
        --x; --y;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    dfs(0);
    sort(tmp.begin(), tmp.end());
    for(int i = 0; i < m - 1; ++i){
        sum[i] = tmp[i];
        if(i)
            sum[i] += sum[i - 1];
    }
    int ans = 0;
    for(int level = 1; level <= tmp.back(); ++level){
        int right = upper_bound(tmp.begin(), tmp.end(), level) - tmp.begin() - 1;
        int left = right;
        int l = 0;
        int r = right - 1;
        while(l <= r){
            int mid = (l + r) / 2;
            ll cur = (right - mid + 1) * 1ll * tmp[right];
            cur -= sum[right];
            if(mid)
                cur += sum[mid - 1];
            if(cur <= p){
                left = mid;
                r = mid - 1;
            }
            else{
                l = mid + 1;
            }
        }
        ans = max(ans, right - left + 1);
    }
    cout << min(ans, k) << endl;
    return 0;
}
