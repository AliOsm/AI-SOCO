// copied by Nurstan Duisengaliev
// skatal
#include <bits/stdc++.h>
 
#define ll long long
#define all(x) x.begin(), x.end()
#define in insert
#define mp make_pair
#define F first
#define S second
#define ppf pop_front
#define pb push_back
#define ppb pop_back
#define pf push_front
#define pii pair <int, int>
#define boost() ios_base::sync_with_stdio(0), cin.tie(0)
#define sz(x) (int)x.size()
#define int ll 
using namespace std;             
 
const int N = (int)2e5 + 123;
const int mod = 998244353;
const ll INF = (ll)1e18 + 7;
int n, q;
vector <int> v;
ll f[N];
ll binpow (int x, int y) {
	if (y == 0) return 1ll;
	if (y % 2 == 0) {
		int o = binpow (x, y / 2);
		return o * o % mod;	
	}
	else {
		return (binpow (x, y - 1) * x) % mod;
	}
}
ll calc (int x) {
    int sum1 = 0, sum2 = 1;
	for (auto it : v) {
		if (x % it == 0) {
			int kol = 0;
			while (x % it == 0) x /= it, kol ++;
			sum1 += kol;
			sum2 *= f[kol];
			sum2 %= mod;
		}
	}
	sum1 = f[sum1];
	return (sum1 * binpow (sum2, mod - 2)) % mod;
}
void solve () {
	cin >> n >> q;
	f[0] = 1;
	for (int i = 1; i <= (int)1e5; i ++) {
		f[i] = f[i - 1] * i;
		f[i] %= mod;
	}
	int qq = sqrt (n);
	for (int i = 2; i <= qq; i ++) {
		if (n % i == 0) {
			v.pb (i);
			while (n % i == 0) n /= i;
		}
	}
	if (n != 1) v.pb (n);
	for (int ii = 1; ii <= q; ii ++) {
		int v, u;
		cin >> v >> u;
		int x = __gcd (v, u);
		cout << calc (v / x) * calc (u / x) % mod  << '\n';
	}                                      
}   	
 
main () {
//	freopen (".in", "r", stdin);
//	freopen (".out", "w", stdout);
	boost ();
	int TT = 1;
//    cin >> TT;
	while (TT --) {
		solve ();
	}
	return 0;	
}