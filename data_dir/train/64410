#include <bits/stdc++.h>

using namespace std;

#define all(x) begin(x), end(x)

using ll = long long;
using ld = long double;
using pii = pair<int, int>;
using vi = vector<int>;

void solve() {
    int n;
    cin >> n;
    vi a(n);
    for (auto& x : a)
        cin >> x;

    vi t(all(a));
    sort(all(t));

    if (t[0] == t.back()) {
        cout << "1\n";
        for (int i = 0; i < n; ++i) {
            cout << 1 << ' ';
        }
        cout << "\n";
        return;
    }

    vector<vi> graph(n);
    for (int i = 0; i < n; ++i) {
        int j = (i + 1) % n;
        if (a[i] != a[j]) {
            graph[i].push_back(j);
            graph[j].push_back(i);
        }
    }

    vi res(n, 0);
    function<void(int)> dfs = [&](int u) -> void {
        for (int v : graph[u]) {
            if (res[v] == res[u]) {
                res[u] = res[v] = 3;
                break;
            } else if (res[v] == 0) {
                res[v] = 3 ^ res[u];
                dfs(v);
            }

            if (res[u] == 3) break;
        }
    };

    for (int i = 0; i < n; ++i) {
        if (res[i] == 0) {
            res[i] = 1;
            dfs(i);
        }
    }

    if (*max_element(all(res)) == 3) {
        for (int i = 0; i < n; ++i) {
            res[i] = 1 + (i % 2);
        }

        res[0] = 3;
    }

    for (int i = 0; i < n; ++i) {
        int j = (i + 1) % n;
        assert(a[i] == a[j] || res[i] != res[j]);
    }

    cout << *max_element(all(res)) << '\n';
    for (auto& x : res)
        cout << x << ' ';
    cout << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);

    int T;
    cin >> T;
    while (T-- > 0) {
        solve();
    }

    return 0;
}
