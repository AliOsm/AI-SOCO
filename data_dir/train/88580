#pragma optimize("Ofast")

#include <bits/stdc++.h>

using namespace std;

using ll = long long int;
using ull = unsigned long long int;
using dd = double;
using ldd = long double;
using si = short int;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

#define all(x) (x).begin(), (x).end()
#define ff first
#define ss second

// debug defines
#ifdef HOME
    int jjj;
    #define PO cout << "Pomelo" << endl;
    #define OL cout << "Oliva" << endl;
    #define debug(x) cout << #x << " " << x << endl;
    #define debug_p(x) cout << #x << " " << x.ff << " " << x.ss << endl;
    #define debug_v(x) cout << #x << " "; for (auto ii : x) cout << ii << " "; cout << endl;
    #define debug_vp(x) cout << #x << " "; for (auto ii : x) cout << '[' << ii.ff << " " << ii.ss << ']'; cout << endl;
    #define wait() cin >> jjj;
#else
    #define PO 0
    #define OL 0
    #define debug(x) 0
    #define debug_p(x) 0
    #define debug_vp(x) 0
    #define debug_v(x) 0
    #define debug_vp(x) 0
    #define wait() 0
#endif // HOME
// end of debug defines

int _size = 1 << 20;
vector<pair<int, pair<int, int>>> tree(2 * _size);

pair<int, pair<int, int>> pl(pair<int, pair<int, int>> a, pair<int, pair<int, int>> b)
{
    int temp = min (a.ss.ff, b.ss.ss);
    a.ff += temp + b.ff;
    a.ss.ff += b.ss.ff - temp;
    a.ss.ss += b.ss.ss - temp;
    return a;
}

void build(string& in)
{
    for (int i = 0; i < in.size(); ++i)
    {
        if (in[i] == '(')
            tree[i + _size].ss.ff = 1;
        else
            tree[i + _size].ss.ss = 1;
    }
    for (int i = _size - 1; i > 0; --i)
        tree[i] = pl(tree[i << 1], tree[i << 1 | 1]);
}

pair<int, pair<int, int>> ans(int v, int l, int r, int fl, int fr)
{
    if (fl >= r || fr <= l || r <= l)
        return {0, {0, 0}};
    if (fl <= l && r <= fr)
        return tree[v];
    return pl(ans(v << 1, l, (r + l) >> 1, fl, fr), ans(v << 1 | 1, (l + r) >> 1, r, fl, fr));
}

int main()
{
    ios_base::sync_with_stdio(0);
    cout.tie(0);
    cin.tie(0);

    string in;
    cin >> in;

    build(in);

    int m;
    cin >> m;

    for (int i = 0; i < m; ++i)
    {
        int l, r;
        cin >> l >> r;
        cout << ans(1, 0, _size, l - 1, r).ff * 2 << '\n';
    }
}

