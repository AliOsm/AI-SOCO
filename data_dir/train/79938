#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <string>
#include <math.h>
#include <stdlib.h>
#include <algorithm>
#include <memory.h>
using namespace std;
typedef long long ll;
int n, mod = 1e9 + 7;
string x;
int dp[75][1 << 20];
int nxt[76];
int mem[76][76];
int conv(int l, int r){
	int ret = 0;
	if (mem[l][r] != -1)
		return mem[l][r];
	for (int i = r, f = 1; i >= l; --i, f *= 2){
		if (x[i] == '1'){
			if (r - i > 6){
				ret = 100;
				break;
			}
			ret += f;
		}
		if (ret > 20)
			break;
	}
	return mem[l][r] = ret;
}
int calc(int i, int msk){
	if (i == n)
		return !(msk & (msk + 1)) && msk;
	if (dp[i][msk] != -1)
		return dp[i][msk];
	ll ret = !(msk & (msk + 1)) && msk;
	if (!msk)
		ret += calc(i + 1, msk);
	if (nxt[i] != -1){
		for (int k = nxt[i]; k < n; ++k){
			int val = conv(nxt[i], k);
			if (val > 20)
				break;
			--val;
			ret += calc(k + 1, msk | (1 << val));
		}
	}
	return dp[i][msk] = ret % mod;
}
int main() {
	cin >> n >> x;
	memset(mem, -1, sizeof(mem));
	memset(dp, -1, sizeof(dp));
	memset(nxt, -1, sizeof(nxt));
	nxt[n] = -1;
	for (int i = n - 1; i >= 0; --i){
		if (x[i] == '1')
			nxt[i] = i;
		else nxt[i] = nxt[i + 1];
	}
	cout << calc(0, 0)<< endl;
	return 0;
}