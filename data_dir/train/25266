#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#define int 		long long
#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)	for(int i=a;i<b;i++)
using namespace std;
vi x;
vi y;
vi equals;
int n;
void merge_sort(int l,int r,int lvl){
	if(l==r)return;
	int mid=l+(r-l)/2;
	merge_sort(l,mid,lvl+1);
	merge_sort(mid+1,r,lvl+1);
	vi temp(1<<(n-lvl));
	int i=l;
	int j=mid+1;
	int k=0;
	while(i<=mid && j<=r){
		if(y[i]<=y[j]){
			temp[k++]=y[i++];
		}
		else{
			temp[k++]=y[j++];
			x[lvl]+=(mid+1-i);
		}
	}
	while(i<=mid)temp[k++]=y[i++];
	while(j<=r)temp[k++]=y[j++];
	int start1=l;
	int start2=mid+1;
	while(start1<=mid && start2<=r){
		if(y[start1]<y[start2])start1++;
		else if(y[start1]>y[start2])start2++;
		else {
			int finish1=start1;
			int finish2=start2;
			while(finish1<=mid && y[finish1]==y[start1])finish1++;
			while(finish2<=r && y[finish2]==y[start2])finish2++;
			equals[lvl]+=1LL*(finish1-start1)*(finish2-start2);
			start1=finish1;
			start2=finish2;
		}
	}
	rep(p,l,r+1){
		y[p]=temp[p-l];
	}
}
void solve(){
	cin>>n;
	x.resize(n+1);
	equals.resize(n+1);
	int cnt=1<<n;
	y.resize(cnt);
	rep(i,0,cnt)cin>>y[i];
	merge_sort(0,cnt-1,0);
	ll curinv=accumulate(all(x),0LL);
	int m;
	cin>>m;
	rep(i,0,m){
		int alpha;
		cin>>alpha;
		rep(p,1,alpha+1){
			ll cur=x[n-p];
			ll next=(1LL<<(n+p-2))-cur-equals[n-p];
			ll change=next-cur;
			curinv+=change;
			x[n-p]=next;			
		}
		cout<<curinv<<endl;
	}

}

signed main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t=1;
//	cin>>t;
	while(t--){
		solve();
	}
	return 0;
}