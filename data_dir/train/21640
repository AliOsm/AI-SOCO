#include<stdio.h>
#include<iostream>
#include<string.h>
#include<queue>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#include<fstream>
#include<cmath>
#include<iomanip>
#include<time.h>
#include<stack>
using namespace std;
#define ll long long
#define ull unsigned long long
#define inf 2000000007
#define mod 1000000007
#define pii pair<int,int>
#define vi vector<int>
#define VS vector<string>
#define all(x) x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define N 1010
#define pi 3.14159265358979323846
#define DBG(vari) cerr<<#vari<<"="<<(vari)<<endl;
#define FOREACH(i,t) for(__typeof(t.begin()) i=t.begin();i!=t.end();i++)

struct node
{
    int x,y,w,s,v;
    bool operator <(const node&a)const
    {
        return x<a.x||(x==a.x&&y>a.y);
    }
}p[510];
int dp[510][1010],f[510][1010],n;
int dfs(int u,int s)
{
    if(u==n)return p[u].v;
    int &ret=dp[u][s];
    if(ret+1)return ret;
    int i,j;
    for(i=p[u].x;i<=p[u].y;i++)f[u][i]=0;
    for(i=u+1,j=p[u].x;i<=n;i++)
    {
        if(p[i].x>=p[u].y)break;
        if(p[i].y>p[u].y||p[i].w>s)continue;
        int tmp=dfs(i,min(s-p[i].w,p[i].s));
        while(j<p[i].x)f[u][j+1]=max(f[u][j+1],f[u][j]),j++;
        f[u][p[i].y]=max(f[u][p[i].y],tmp+f[u][j]);
    }
    while(j<p[u].y)f[u][j+1]=max(f[u][j+1],f[u][j]),j++;
    ret=f[u][p[u].y]+p[u].v;
    //cerr<<u<<" "<<s<<" "<<p[u].x<<" "<<p[u].y<<" "<<ret<<"\n";
    return ret;
}
int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int i,T,k,j,m=0,ca=0;
    while(~scanf("%d%d",&n,&m))
    {
        p[0].x=0,p[0].y=n+n,p[0].w=0,p[0].s=m,p[0].v=0;
        for(i=1;i<=n;i++)
        {
            scanf("%d%d%d%d%d",&p[i].x,&p[i].y,&p[i].w,&p[i].s,&p[i].v);
            if(p[i].w>m)i--,n--;
        }
        sort(p,p+n+1);
        memset(dp,-1,sizeof(dp));
        //DBG(n)
        int ans=dfs(0,m);
        printf("%d\n",ans);
    }
    return 0;
}