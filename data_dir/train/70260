#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <utility>
#include <cassert>
#include <bitset>
using namespace std;
#define REP(I,N) for (I=0;I<N;I++)
#define rREP(I,N) for (I=N-1;I>=0;I--)
#define rep(I,S,N) for (I=S;I<N;I++)
#define rrep(I,S,N) for (I=N-1;I>=S;I--)
#define FOR(I,S,N) for (I=S;I<=N;I++)
#define rFOR(I,S,N) for (I=N;I>=S;I--)
#define dbg(x) cerr <<#x<<" = "<<x<<" ;  "
#define dbgln(x) cerr <<#x<<" = "<<x<<endl
typedef unsigned long long ULL;
typedef long long LL;
const int INF=0x3f3f3f3f;
const LL INFF=0x3f3f3f3f3f3f3f3fll;
const LL M=1e9+7;
const LL maxn=1e6+7;
const double pi=acos(-1.0);
const double eps=0.00000001;
LL gcd(LL a, LL b) {return b?gcd(b,a%b):a; }
template<typename T>inline T abs(T a) {return a>0?a:-a;}
template<typename T>inline T powMM(T a, T b) {
    T ret=1;
    for (; b; b>>=1ll,a=(LL)a*a%M)
        if (b&1) ret=(LL)ret*a%M;
    return ret;
}

int A[maxn];
map<int,int> S;
vector<int> del,ini[2],have[2];
int cnt[2],ans;
int main() {
    int n,m,i,j;
    scanf("%d%d",&n,&m);m=min(m,n*2);
    FOR(i,1,n) scanf("%d",&A[i]);
    FOR(i,1,n){
        if (S.count(A[i])) {
            del.push_back(i);
            ans++;
        }else {
            S[A[i]]=i,cnt[A[i]&1]++;
            ini[A[i]&1].push_back(i);
        }
    }
    REP(i,2){
        sort(ini[i].begin(),ini[i].end());
        REP(j,(int)ini[i].size()-n/2){
            S.erase(A[ini[i][j]]);cnt[i]--;
            ans++;del.push_back(ini[i][j]);
        }
    }j=0;
    FOR(i,1,m) {
        if (!S.count(i)){
            if (cnt[i&1]!=n/2){
                cnt[i&1]++;
                A[del[j++]]=i;
            }
        }
    }if (cnt[0]!=n/2||cnt[1]!=n/2) return 0*puts("-1");
    printf("%d\n",ans);
    FOR(i,1,n) printf("%d ",A[i]);
    return 0;
}
/*
8 8
1 3 5 7 9 11 13 15
*/
