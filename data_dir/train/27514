 #include <bits/stdc++.h>
#define endl '\n'

using namespace std;
const int MAXN = (1 << 8);

struct state
{
	unsigned f, s, t;
	state() {f = -1; s = -1; t = -1;}

	state(pair<int, pair<int, int> > x)
	{
		unsigned mx = max(x.second.first, max(x.first, x.second.second));

		f = mx - x.first;
		s = mx - x.second.first;
		t = mx - x.second.second; 
	}
};

state z;

state mns(pair<int, pair<int, int> > x)
{	
	unsigned mn = min(x.second.first, min(x.first, x.second.second));

	z.f = x.first - mn;
	z.s = x.second.first - mn;
	z.t = x.second.second - mn; 
	return z;
}

bool operator<(state a, state b)
{
	if(a.f != b.f) return a.f < b.f;
	if(a.s != b.s) return a.s < b.s;
	return a.t < b.t;
}

bool operator==(state a, state b)
{
	if(a.f != b.f) return false;
	if(a.s != b.s) return false;
	return a.t == b.t;
}

int n;
int l[MAXN], m[MAXN], w[MAXN];
int pw10[MAXN];

void read()
{
	cin >> n;
	for(int i = 0; i < n; i++)
		cin >> l[i] >> m[i] >> w[i];
}

string fcode(char c)
{
	if(c == 1) return "MW";
	if(c == 2) return "LM";
	return "LW";
}

char code(string str)
{
	if(str == "MW") return 1;
	else if(str == "LM") return 2;
	return 3;
}

unsigned hsh(vector<char> ss)
{
	unsigned ret = 0;
	for(int i = 0; i < ss.size(); i++)
		ret = ret * 4ll + ss[i];
	
	return ret;
}

int en;
unsigned curr;
map<pair<int, pair<int, int> >, unsigned> val[2]; 
bool flag;
map<state, pair<int, unsigned> > ret;

void rec(int pos, int f, int s, int t)
{
	if(pos == en)
	{
		val[flag][make_pair(f, make_pair(s, t))] = curr;
		return;
	}
	
    curr = curr * 4 + 1;
	rec(pos + 1, f, s + m[pos], t + w[pos]);	
	
	curr++;
	rec(pos + 1, f + l[pos], s + m[pos], t);

	curr++;
	rec(pos + 1, f + l[pos], s, t + w[pos]);

    curr /= 4;
}

void solve()
{
	int half = n / 2;
	
	en = half + 1;
	flag = 0;
	curr = 0;
	rec(0, 0, 0, 0);
	
	en = n;
	flag = 1;
	curr = 0;
	rec(half + 1, 0, 0, 0);
	
	state c;
	for(auto it: val[1]) 
	{  
		c = state(it.first);

		if(ret.find(c) != ret.end())  
		{ 
			if(ret[c].first < it.first.first)
				ret[c] = make_pair(it.first.first, it.second);
		}
		else 
			ret[c] = make_pair(it.first.first, it.second);
	}

	int ans = -((int)1e9 + 42);
	unsigned fh = -1, sh = -1;

	for(auto it: val[0])
	{
		c = mns(it.first);
		if(ret.find(c) == ret.end()) continue;
		auto cell = ret[c];

		if(ans < cell.first + it.first.first)
		{
			ans = cell.first + it.first.first;	
			fh = it.second;
			sh = cell.second;
		}
	}
	
	if(fh == -1)
	{
		cout << "Impossible" << endl;
		return;
	}

	vector<string> answer;
	while(sh != 0)
	{
		answer.push_back(fcode(sh % 4));
		sh /= 4;
	}

	while(fh != 0)
	{
		answer.push_back(fcode(fh % 4));
		fh /= 4;
	}

	for(int i = answer.size() - 1; i >= 0; i--)
		//cout << answer[i] << endl;
		puts(answer[i].c_str());
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}
