#include  <bits/stdc++.h>
using namespace std;
const int N = 5e5;
int n,k,m,par[N],depth[N],p[N],parent[N];
bool type[N];
struct edge{
    int to,w;
    bool type;
    edge(int a = 0,int b = 0,bool c = 0){to = a;w = b;type = c;}
};
long long ans;
vector<edge>g[N];
vector<pair<pair<int,int>,int>>v;
int get(int u){return par[u] == u ? u : par[u] = get(par[u]);}
int get1(int u){if(u == -1)return -1;return p[u] == u ? u : p[u] = get1(p[u]);}
void dfs(int u,int p){
    parent[u] = p;
    for(auto &i : g[u]){
        if(i.to == p){
            i.to = -1;
            type[u] = i.type;
            continue;
        }
        depth[i.to] = depth[u] + 1,
        dfs(i.to,u);
    }
}
vector<int>path;
void find(int a,int b,int w){
    a = get1(a);b = get1(b);
    path.push_back(a);
    path.push_back(b);
    while(a != b){
       if(b == -1 || depth[a] > depth[b])
            a = get1(parent[a]),
            path.push_back(a);
        else
            b = get1(parent[b]),
            path.push_back(b);
    }
    for(auto i : path){
        if(i == a || i == -1)continue;
        if(g[i].size() > g[a].size())g[a].swap(g[i]);
        while(g[i].size())
            g[a].push_back(g[i].back()),
            g[i].pop_back();
        parent[i] = a;
        if(!type[i])ans+=w;
        p[get1(i)] = get1(a);
    }
    path.clear();
}
int main(){
    //freopen("readin.txt","r",stdin);
    scanf("%d%d%d",&n,&k,&m);
    for(int i = 0;i < n;i++)par[i] = p[i] = i;
    for(int i = 0,a,b;i < k;i++){
        scanf("%d%d",&a,&b);
        g[--a].push_back(edge(--b,0,0));
        g[b].push_back(edge(a,0,0));
        par[get(a)] = get(b);
    }
    for(int i = 0,a,b,w;i < m;i++){
        scanf("%d%d%d",&a,&b,&w);
        --a;--b;
        if(get(a) != get(b))
            g[a].push_back(edge(b,w,1)),
            g[b].push_back(edge(a,w,1));
        else v.push_back(make_pair(make_pair(a,b),w));
        par[get(a)] = get(b);
    }
    type[0] = 1;
    dfs(0,-1);
    for(auto i : v)find(i.first.first,i.first.second,i.second);
    for(int i = 0;i < n;i++)if(!type[get1(i)])ans = -1;
    printf("%lld\n",ans);
}