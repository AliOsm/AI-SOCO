#include <iostream>
#include <fstream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <algorithm>
#include <array>
#include <bitset>
#include <assert.h>
using namespace std;
 
#include <assert.h>

#define REP(i,n) for(int i=0; i<n; ++i)
#define FOR(i,a,b) for(int i=a; i<=b; ++i)
#define FORR(i,a,b) for (int i=a; i>=b; --i)
#define ALL(c) (c).begin(), (c).end()
 
typedef long long ll;
typedef vector<int> VI;
typedef vector<ll> VL;
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef pair<int,int> P;
typedef pair<ll,ll> PL;
typedef vector<double> VD;
 
int in() { int x; scanf("%d", &x); return x; }
ll lin() { ll x; scanf("%lld", &x); return x; }

const ll base = 10007, mod = 1e9 + 7;

ll powll(ll x, ll y){
    ll res = 1LL;
    while(y){
        if (y & 1LL)
            res *= x;
        res %= mod;
        x = (x*x) % mod;
        y >>= 1LL;
    }
    return res;
}

ll divll(ll x, ll y){
    return (x * powll(y,mod-2)) % mod;
}

struct BIT{
    int n;
    VL bit;

    BIT(){}
    BIT(int x){
        n = x;
        bit.assign(n+1, 0);
    }

    void init(int x){
        n = x;
        bit.assign(n+1, 0);
    }

    void add(int i, ll x){
        i++;
        while (i <= n){
            bit[i] += x;
            i += i & -i;
        }
    }

    // [0, i]
    ll sum(int i){
        i++;
        ll ret = 0;
        while (i > 0){
            ret += bit[i];
            i -= i & -i;
        }
        return ret % mod;
    }

    // [l, r)
    ll sum(int l, int r){
        if (l >= r) return 0;
        return (sum(r-1) - sum(l-1) + mod) % mod;
    }
};

int main() {
    int n;
    cin >> n;
    VI a(n);
    REP(i,n) a[i] = in() - 1;

    VL pow(n);
    pow[0] = 1;
    REP(i,n-1) pow[i+1] = (pow[i] * base) % mod;

    BIT bit1(n), bit2(n);
    REP(i,n){
        int x = a[i];
        bit1.add(x, pow[x]);
        bit2.add(x, pow[n - 1 - x]);

        int l = 0, r = n - 1;
        l = max(l, 2 * x - r);
        r = min(r, 2 * x - l);

        ll hash1 = divll(bit1.sum(l, r + 1), pow[l]);
        ll hash2 = divll(bit2.sum(l, r + 1), pow[n - 1 - r]);
        
        if (hash1 != hash2){
            cout << "YES" << endl;
            return 0;
        }
    }
    cout << "NO" << endl;
    return 0;
}