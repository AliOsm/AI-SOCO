#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef long double real;

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

using namespace std;

const int MaxL = 1000006, MaxM = 256, NA = -1, MaxC = 0x3F3F3F3F;

inline int64 vp (int64 x0, int64 y0, int64 x1, int64 y1, int64 x2, int64 y2)
{
 return (x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0);
}

int d [MaxL];
int c [MaxM] [MaxM];
int64 x [MaxM], y [MaxM];
int m, n;

int main (void)
{
 int i, j, k;
 int64 cx, cxn, cxd, p0, p1, p2, sum;

 while (scanf (" %d %d", &n, &m) != EOF)
 {
  for (i = 0; i < m; i++)
   scanf (" " INT64 " " INT64, &x[i], &y[i]);
  for (i = 1; i <= n; i++)
   d[i] = 1;
  for (i = 0; i < m; i++)
   for (j = 0; j < m; j++)
   {
    c[i][j] = 0;
    p1 = y[j] - y[i];
    p2 = x[i] - x[j];
    p0 = -(x[i] * p1 + y[i] * p2);
    // cx p1 + cy p2 + p0 = 0
    // cy = 0
    // cx = - p0 / p1
    cxn = -p0;
    cxd = p1;
    if (cxd == 0)
     continue;
    if (cxn % cxd != 0)
     continue;
    cx = cxn / cxd;
    if (cx < 1 || cx > n)
     continue;

    for (k = 0; k < m; k++)
     if (vp (x[i], y[i], x[j], y[j], x[k], y[k]) == 0)
    c[i][j]++;

    d[cx] = max (d[cx], c[i][j]);
   }

  sum = 0;
  for (i = 1; i <= n; i++)
   sum += d[i];

  printf (INT64 "\n", sum);
 }

 return 0;
}
