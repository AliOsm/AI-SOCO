#include <bits/stdc++.h>
#define fore(x,a,b) for(int x=a, qwert=b; x<qwert; x++)
#define ALL(a) (a).begin(), (a).end()
#define SZ(a) ((int)(a).size())
#define FIN ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define pb push_back
#define fst first
#define snd second
using namespace std;
typedef long long ll;

const ll INF=1e18;
const int N=1e5+2;
int n, q, C[N];
ll V[N], mxs[N];

int main(){FIN;
	cin >> n >> q;
	fore(x,0,n)cin>>V[x];
	fore(x,0,n)cin>>C[x],C[x]--;

	fore(qq,0,q){
		fore(x,0,n)mxs[x]=-INF;
		ll a, b; cin >> a >> b;
		pair<ll,int> best[2] = {{0,-1},{0,-1}};
		fore(x,0,n){
				ll other_mx=0;
				if(best[0].snd==C[x])other_mx=best[1].fst;
				else other_mx=best[0].fst;

				if(mxs[C[x]]!=-INF)mxs[C[x]]+=max(0LL,a*V[x]);
				mxs[C[x]]=max(mxs[C[x]],other_mx+b*V[x]);

				if(best[0].snd==C[x]){
					best[0].fst=mxs[C[x]];
				}else if(best[1].snd==C[x]){
					if(best[0].fst<mxs[C[x]])
						swap(best[0],best[1]),best[0].fst=mxs[C[x]];
					else best[1].fst=mxs[C[x]];
				}else{
					if(best[0].fst<mxs[C[x]])
						swap(best[0],best[1]),best[0]={mxs[C[x]],C[x]};
					else if(best[1].fst<mxs[C[x]])
						best[1]={mxs[C[x]],C[x]};
				}
		}
		cout << best[0].fst << "\n";
	}
}