#include<bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
typedef long long ll;
#define M (1<<18)

vector<int> vec[M];
int n;
set<int> ans;

struct hsh
{
    ll operator()(const pii& p) const { return 1LL*(1<<18)*p.first+p.second; }
};


unordered_map<pii, int, hsh> ma;

int calc(int s, int pa)
{
    if(ma.find({s, pa}) != ma.end()) return ma[{s, pa}];
    else if(vec[s].size() == 1) return ma[{s, pa}] = 1;
    else if(vec[s].size() != 3) return ma[{s, pa}] = 0;

    vector<int> tmp;
    for(int v: vec[s])
    {
        if(v != pa) tmp.push_back(v);
    }

    if(calc(tmp[0], s) > 0 && calc(tmp[0], s) == calc(tmp[1], s)) ma[{s, pa}] = calc(tmp[0], s)+1;
    else ma[{s, pa}] = 0;

    return ma[{s, pa}];
}

void dfs(int s, int par, int h)
{
    vector<int> tmp;
    for(int v: vec[s])
    {
        if(v != par) tmp.push_back(v);
    }

    if((par == 0 && vec[s].size() == 1) || (par && vec[s].size() == 2))
    {
        if(calc(tmp[0], s) == 1 && h == 2) ans.insert(s);
    }
    if((par == 0 && vec[s].size() == 3) || (par && vec[s].size() == 4))
    {
        if(calc(tmp[0], s) == h-1 && calc(tmp[1], s) == h-2 && calc(tmp[2], s) == h-2) ans.insert(s);
        else if(calc(tmp[1], s) == h-1 && calc(tmp[0], s) == h-2 && calc(tmp[2], s) == h-2) ans.insert(s);
        else if(calc(tmp[2], s) == h-1 && calc(tmp[1], s) == h-2 && calc(tmp[0], s) == h-2) ans.insert(s);
    }
    if((par == 0 && vec[s].size() == 2) || (par && vec[s].size() == 3))
    {
        if(calc(tmp[0], s) == h-1) dfs(tmp[1], s, h-1);
        else if(calc(tmp[1], s) == h-1) dfs(tmp[0], s, h-1);
    }
}


int main()
{
    scanf("%d", &n);

    for(int i = 1; i <= (1<<n)-3; i++)
    {
        int u, v;
        scanf("%d %d", &u, &v);

        vec[u].push_back(v);
        vec[v].push_back(u);
    }

//    for(int i = 1; i <= (1<<n)-2; i++)
//    {
//        for(int v: vec[i])
//        {
//            if(v != 35) continue;
//            printf("(%d, %d) = %d\n", i, v, calc(i, v));
//        }
//    }

    for(int i = 1; i <= (1<<n)-2; i++) dfs(i, 0, n);

    printf("%d\n", ans.size());
    for(int x: ans) printf("%d ", x);

    return 0;
}
