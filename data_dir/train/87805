//Be Name Khoda
/*NNN EEEEEEE NNNNNN am!
//ZZZZZ GGG am NNNNNNe!*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)2e6;
const ll inf = (ll)1e18;
const int infint = (int)2e9;
int a[MAXN], dp[MAXN], visited[MAXN], del[MAXN], par[MAXN];
vector<pair<int, int> > G[MAXN];
void dfs(int u)
{
	visited[u] = 1;
	for (auto it : G[u])
	{
		int v = it.first, cost = it.second;
		if(!visited[v])
		{
			par[v] = u;
			dp[v] = max(dp[u] + cost, cost);
			dfs(v);
		}
	}
}
void dfs2(int u)
{
	del[u] = 1;
	for (auto it : G[u])
	{
		int v = it.first;
		if(v != par[u] and !del[v])
			dfs2(v);
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n;
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 1; i <= n - 1; i++)
	{
		int p, c;
		cin >> p >> c;
		G[i + 1].push_back({p, c});
		G[p].push_back({i + 1, c});
	}
	dp[1] = 0;
	dfs(1);
	vector<int> bads;
	for (int i = 1; i <= n; i++)
		if(dp[i] > a[i])
			bads.push_back(i);
	for (auto v : bads)
	{
		dfs2(v);
	}
	int ans = 0;
	for (int i = 1; i <= n; i++)
		if(del[i])
			ans++;
	cout << ans;
}
