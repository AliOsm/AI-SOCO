#include <bits/stdc++.h>

using namespace std;

#define long long long
#define double __float128
#define INF (long) 1e18
#define MOD ((long) 1e9 + 7)
#define mll map<long, long>
#define pll pair<long, long>
#define umap unordered_map
#define umll umap<long, long>
#define pb push_back
#define FOR(i, a, b) \
  for (long i = a; i < (long) b; i++)
#define SORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr < b.atr; });
#define UNSORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr > b.atr; });
#define PRINTV(v) \
  FOR (_i, 0, v.size()) \
    cout << v[_i] << " "; \
  cout << "\n";

set<long> gera_primos(long n)
{
  set<long> primos;
  vector<bool> crivo(n+1);
  primos.insert(2);
  for (long i = 3; i <= n; i += 2) {
    if (crivo[i]) continue;
    primos.insert(i);
    for (long j = i; j <= n; j += i) {
      crivo[j] = true;
    }
  }
  return primos;
}

struct Link
{
  long from, to, cost;
};

struct Node
{
  bool visitado = false;
  //vector<long> in, out;
  set<long> out;
};

bool a[5][5];

int main()
{
  ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

  long n;
  string s;
  cin >> n >> s;

  vector<pll> pos;
  bool zero = false;
  for (auto &c : s) {
    long d = c - '0';
    if (d == 0) {
      zero = true;
      pos.pb({3, 1});
      continue;
    }
    long x = (d-1) / 3;
    long y = (d-1) % 3;
    pos.pb({x, y});
  }
  bool up = true;
  for (auto &z : pos) {
    if (z.first == 0) {
      up = false;
      break;
    }
  }
  if (up) {
    puts("NO");
    return 0;
  }
  if (zero) {
    puts("YES");
    return 0;
  }
  bool left = true;
  for (auto &z : pos) {
    if (z.second == 0) {
      left = false;
      break;
    }
  }
  if (left) {
    puts("NO");
    return 0;
  }
  bool right = true;
  for (auto &z : pos) {
    if (z.second == 2) {
      right = false;
      break;
    }
  }
  if (right) {
    puts("NO");
    return 0;
  }
  bool down = true;
  for (auto &z : pos) {
    if (z.second != 1 and z.first == 2) {
      down = false;
      break;
    }
  }
  if (down) {
    puts("NO");
    return 0;
  }
  puts("YES");
}
