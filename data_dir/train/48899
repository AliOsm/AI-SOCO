#include <bits/stdc++.h>
using ll = long long;
using namespace std;

bool cantFixRepeated(map<int, int> const& m) {
  int z = -1;
  for (auto& [x, y] : m)
    if (y == 2) z = x;
  return (z != -1 && m.count(z - 1) > 0);
}

int main() {
  cin.tie(0);
  cin.sync_with_stdio(0);

  string ans[] = {"cslnb", "sjfnb"};

  int n;
  cin >> n;

  ll sum = 0;
  vector<int> a(n);
  map<int, int> cnt;

  for (auto& x : a) cin >> x, ++cnt[x], sum += x;

  sort(a.begin(), a.end());

  if (sum == 0 ||                 // nothing
      int(cnt.size()) < n - 1 ||  // always dublicates
      (int(cnt.size()) == n - 1 && cantFixRepeated(cnt)) ||  // no fix
      (cnt[0] > 1) ||
      false) {
    cout << ans[0];
  } else {
    int idx = 0;
    ll s = 0;
    for (auto x : a)
      if (x >= idx) s += x - idx++;
    cout << ans[s & 1];
  }
}