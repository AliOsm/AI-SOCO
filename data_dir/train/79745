#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int) 1.01e9;
const ld EPS = 1e-9;

void precalc() {
}

const int maxn = 150 + 10;

int n, m;

pair<int, pair<int, int> > edges[maxn];

bool read() {
  if (scanf("%d%d", &n, &m) < 2) {
    return 0;
  }
  for (int i = 0; i < m; ++i) {
    int s, t, len;
    scanf("%d%d%d", &s, &t, &len);
    --s, --t;
    edges[i] = mp(len, mp(s, t));
  }
  return 1;
}


const int maxnk = maxn / 32 + 2;

unsigned int can[maxnk];

const int maxl = 30;
unsigned int go[maxl][maxn][maxnk];

int nk;

unsigned int tmp[maxnk];

void use(unsigned int *val, int l) {
  for (int i = 0; i < nk; ++i) {
    tmp[i] = 0;
  }
  for (int i = 0; i < n; ++i) {
    if ((val[i / 32] >> (i & 31)) & 1) {
      for (int j = 0; j < nk; ++j) {
        tmp[j] |= go[l][i][j];
      }
    }
  }
  for (int i = 0; i < nk; ++i) {
    val[i] = tmp[i];
  }
}

unsigned int val[maxnk];

void solve() {
  sort(edges, edges + m);

  nk = (n + 31) / 32;
  for (int i = 0; i < nk; ++i) {
    can[i] = 0;
  }
  can[0] ^= 1;

  for (int l = 0; l < maxl; ++l) {
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < nk; ++j) {
        go[l][i][j] = 0;
      }
    }
  }

  int T = 0;
  for (int left = 0; left <= m;) {
    int have = (left == m ? INF : (edges[left].first - T));
    /*eprintf("\nleft = %d, have = %d\n", left, have);
    for (int i = 0; i < n; ++i) {
      eprintf("%d%c", (can[i / 32] >> (i & 31)) & 1, " \n"[i == n - 1]);
    }*/
    {
      for (int i = 0; i < nk; ++i) {
        val[i] = can[i];
      }
      for (int i = 0; i <= min(n, have); ++i) {
        if ((val[(n - 1) / 32] >> ((n - 1) & 31)) & 1) {
          printf("%d\n", T + i);
          return;
        }
        use(val, 0);
      }
    }
    if (left == m) {
      break;
    }
    for (int l = maxl - 1; l >= 0; --l) {
      if ((have >> l) & 1) {
        use(can, l);
      }
    }
    T = edges[left].first;
    for (; left < m && edges[left].first == T; ++left) {
      int s = edges[left].second.first, t = edges[left].second.second;
      go[0][s][t / 32] |= (1u << (t & 31));
      //eprintf("add %d -> %d\n", s, t);
    }

    for (int l = 1; l < maxl; ++l) {
      for (int i = 0; i < n; ++i) {
        for (int j = 0; j < nk; ++j) {
          val[j] = 0;
        }
        val[(i / 32)] ^= (1u << (i & 31));

        use(val, l - 1);
        use(val, l - 1);
        for (int j = 0; j < nk; ++j) {
          go[l][i][j] |= val[j];
        }
      }
    }
  }
  printf("Impossible\n");
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
