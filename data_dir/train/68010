/*
“You just can’t beat the person who won’t give up.” ―Babe Ruth
*/

#include <bits/stdc++.h>

using namespace std; 	
typedef long long ll;
typedef unsigned long long ull;
const int N = 1e5+10;
const int oo = 1e9;
const int mod = 1e9+7;

vector<int> g[N];
int p[N][18],depth[N];
void dfs(int u,int r){
	depth[u] = depth[r]+1;
	for(int i=0;i<g[u].size();i++){
		int v = g[u][i];
		if(v==r)continue;
		dfs(v,u);
	}
}
int lca(int u,int v){
	if(depth[u]<depth[v])swap(u,v);
	int l = depth[u]-depth[v];
	for(int k=17;k>=0;k--)
		if((l>>k)&1)
			u = p[u][k];
	if(u==v)return u;
	for(int k=17;k>=0;k--){
		if(p[u][k]!=p[v][k]){
			u = p[u][k];
			v = p[v][k];
		}
	}
	return p[u][0];
}
int dist(int u , int v) {
	return depth[u] + depth[v] - 2 * depth[lca(u, v)];
}
int main(){
	int n,q;
	scanf("%d%d",&n,&q);
	for(int i=2;i<=n;i++){
		scanf("%d",&p[i][0]);
		g[p[i][0]].push_back(i);
		g[i].push_back(p[i][0]);
	}
	dfs(1,0);
	for(int i=1;i<=17;i++)
		for(int j=1;j<=n;j++)
			p[j][i] = p[p[j][i-1]][i-1];
	int y[3];
	for(int i=0;i<q;i++){
		scanf("%d%d%d", &y[0], &y[1], &y[2]);
		int ans = 0;
		sort(y, y + 3);
		do {
			int f=y[0],t=y[1],s=y[2];
			int mx = 1;
			if(dist(t,s)+dist(s,f) == dist(t,f))
				mx = max(mx,dist(s,f)+1);
			if(dist(s,t)+dist(t,f) == dist(s,f))
				mx = max(mx,dist(t,f)+1);
			int parent = lca(t,s);
			if(dist(t,parent)+dist(parent,f) == dist(t,f) && dist(s,f) == dist(s,parent)+dist(parent,f))
				mx = max(mx,dist(parent,f)+1);
			parent = lca(f,s);
			if(dist(t,parent)+dist(parent,f) == dist(t,f))
				mx = max(mx,dist(parent,f)+1);
			int my = lca(t,f);
			if(dist(s,my)+dist(my,f) == dist(s,f))
				mx = max(mx,dist(my,f)+1);
			ans = max(ans, mx);
		} while (next_permutation(y, y + 3));
		printf("%d\n", ans);
	}
}