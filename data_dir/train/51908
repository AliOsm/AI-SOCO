#include <iostream>
#include <vector>
using namespace std;

vector<vector<int> > next;
vector<int> d;
int val;

void dfs(int i, int len)
{
    if (len <= d[i])
        return;
    d[i] = len;
    if (len > val)
        val = len;
    for (int j = 0; j < next[i].size(); j++)
        dfs(next[i][j], len + 1);
}

int main()
{
    int n, k, cur;
    cin >> n >> k;
    vector<vector<int> > pos(k);
    for (int i = 0; i < k; i++) {
        pos[i].resize(n);
        for (int j = 0; j < n; j++) {
            cin >> cur;
            pos[i][cur - 1] = j;
        }
    }
    next.resize(n);
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            int nb = 0;
            for (int s = 0; s < k; s++)
                nb += pos[s][i] < pos[s][j] ? 1 : -1;
            if (nb == k)
                next[i].push_back(j);
            else if (nb == -k)
                next[j].push_back(i);
        }
    }
    d.resize(n);
    for (int i = 0; i < n; i++)
        dfs(i, 1);
    cout << val << endl;
}
