#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) (((n%m) + m)%m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

const int N = 2e5 + 100;

vi node[N];
bool visited[N];

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int tc;
	cin >> tc;
	while (tc--)
	{
		int n, m;
		cin >> n >> m;

		erep(i, 1, n)
			node[i].clear(), visited[i] = false;

		while (m--)
		{
			int u, v;
			cin >> u >> v;
			node[u].push_back(v);
			node[v].push_back(u);
		}

		int inf = n / 2;
		queue<pii> Q;
		Q.push(
		{ 1, 1 });

		vi hoba;
		vi meshoba;
		while (!Q.empty())
		{
			pii curr = Q.front();
			Q.pop();

			int idx = curr.first, v = curr.second;

			if (visited[idx])
				continue;

			visited[idx] = true;
			if (v)
				hoba.push_back(idx);
			else
				meshoba.push_back(idx);

			for (auto i : node[idx])
				if (!visited[i])
					Q.push(
					{ i, !v });
		}

		if (sz(hoba) <= inf)
		{
			cout << sz(hoba) << endl;
			for (auto i : hoba)
				cout << i << " ";
			cout << endl;
		}
		else
		{
			cout << sz(meshoba) << endl;
			for (auto i : meshoba)
				cout << i << " ";
			cout << endl;
		}

	}

	return 0;
}
