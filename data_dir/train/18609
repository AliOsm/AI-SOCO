//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define inf 1000000000000
//#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 1000001

ll bpow(ll x,ll n,ll mod)
{
	ll ans=1;
	while(n>0)
	{
	    if(n&1) ans*=x;
	    x*=x;
	    ans%=mod;
	    x%=mod;
	    n/=2;
	}
	return ans;
}

class StringHash {
    const static int MAX = 1000005;

    ll b = 789456123;
    ll m = 1000000007;

    ll B[MAX], inverseB[MAX];

public:
    void initialize() {
        B[0]=1;
        for (int i = 1; i < MAX; i++) {
            B[i]=(B[i-1]*b)%m;
        }
        inverseB[MAX-1]=bpow(B[MAX-1], m-2, m);
        for (int i = MAX-2; i >= 0; i--) {
            inverseB[i]=(inverseB[i+1]*b)%m;
        }
    }

    /*ll getHash(string &s) {
        long long h = 0;
        for (int i = 0; i<s.size() ; i++) {
            h = (h + (s[i]-'a')*B[i]) % m;
        }
        return h;
    }*/

    int length=0;
    ll h[MAX], revh[MAX];
    ll construct(string &s) {
        length = s.size();
        h[0]=0, revh[length+1]=0;
        for (int i = 0, j = 1; i<s.size(); i++, j++) {
            h[j] = (h[j-1] + (s[i]*B[i]) % m) % m ;
        }
        for (int i = length-1, j = length, k = 0; i >= 0; i--, j--, k++) {
            revh[j] = (revh[j+1] + (s[i]*B[k]) % m) % m;
        }
        return h[length];
    }

    ll getSubHash(int i, int j) {
        i++, j++;
        return ((h[j] + (m-h[i-1])) * inverseB[i-1]) % m;
    }

    ll getRevHash(int i, int j) {
        i++, j++;
        return ((revh[i] + (m-revh[j+1])) * inverseB[length-j]) % m;
    }
};

StringHash Hs,Ht;
int main()
{
	//boost1;boost2;
	int i,j,ansi=-1,ansj=-1,x,y,lo,mid,hi,ls,lt,len;
	string s,t;
	getline(cin,s);
	getline(cin,t);
	ls=s.length();
	lt=t.length();
	if(ls!=lt || ls==1)
	{
		cout<<"-1 -1";
		return 0;
	}
	reverse(all(t));
	Hs.initialize();
	Hs.construct(s);
	Ht.initialize();
	Ht.construct(t);
	for(i=ls-1;i>=0;i--)
	{
		if(i!=0 && Hs.getSubHash(0,i-1)!=Ht.getSubHash(0,i-1))
		continue;
		lo=1;
		if(Hs.getSubHash(i,i+lo-1)!=Ht.getRevHash(lt-1-lo+1,lt-1))
		continue;
		hi=ls-i+1;
		while(hi-lo>1)
		{
			mid=(lo+hi)/2;
			if(Hs.getSubHash(i,i+mid-1)==Ht.getRevHash(lt-1-mid+1,lt-1))
			lo=mid;
			else
			hi=mid;
		}
		len=lo;
		lo=i-1;
		hi=i+len-1;
		if(Hs.getSubHash(hi+1,ls-1)!=Ht.getSubHash(i,i+ls-hi-2))
		continue;
		while(hi-lo>1)
		{
			mid=(lo+hi)/2;
			if(Hs.getSubHash(mid+1,ls-1)==Ht.getSubHash(i,i+ls-mid-2))
			hi=mid;
			else
			lo=mid;
		}
		if(i-1<0)
		continue;
		cout<<i-1<<" "<<min(hi+1,ls-1)<<endl;
		return 0;
	//	ansi=i-1;
	//	ansj=min(hi+1,ls-1);
	}
	cout<<"-1 -1";
	return 0;
}
