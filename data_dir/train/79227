#include<bits/stdc++.h>
using namespace std;

typedef long long int lli;
typedef pair<int,int> pii;
typedef vector<int> vec;

#define pb push_back
#define mp make_pair
#define mt make_tuple
#define scn(n) scanf("%d",&n)
#define scnll(n) scanf("%lld",&n)
#define scn2(n,m) scanf("%d%d",&n,&m)
#define scn3(n,m,w) scanf("%d%d%d",&n,&m,&w)
#define scn2ll(n,m) scanf("%lld%lld",&n,&m)
#define atoz(v) v.begin(),v.end()
#define ratoz(v) v.rbegin(),v.rend()
#define Fill(a,v) memset(a,v,sizeof(a))
#define sz(v) v.size()
#define fi first
#define se second
#define inf 1e9
#define pi acos(-1.0)
#define sqr(x) x*x
#define max3(a,b,c) max(a,max(b,c))
#define min3(a,b,c) min(a,min(b,c))
#define ten(n) (int)1e##n
#define tenll(n) (lli)1e##n

int Set(int N,int pos){return N=N | (1<<pos);}
int reset(int N,int pos){return N= N & ~(1<<pos);}
bool check(int N,int pos){return (bool)(N & (1<<pos));}

int tree[700000] , a[140000];

void build(int idx , int lo, int hi ,int XOR){
    
    if(lo == hi){
        tree[idx] = a[lo];
        return;
    }
    
    if(lo+1 == hi){
        tree[idx] = (a[lo] | a[hi]);
        return;
    }
    
    int mid = (lo+hi)/2;
    int left = 2*idx;
    int right = left+1;
    
    build(left , lo , mid , XOR^1);
    build(right , mid+1, hi , XOR^1);
    
    tree[idx] = (XOR ? tree[left]^tree[right] : tree[left] | tree[right]);
}

void update(int idx , int cell , int lo , int hi , int XOR){
    
    if(lo == hi){
        tree[idx] = a[lo];
        return;
    }
    
    if(hi<cell || lo>cell)return;
    
    if(lo+1 == hi){
        tree[idx] = a[lo] | a[hi];
        return;
    }
    
    int mid = (lo+hi)/2;
    int left = 2*idx;
    int right = left+1;
    
    update(left ,cell, lo , mid , XOR^1);
    update(right ,cell, mid+1, hi , XOR^1);
    
    tree[idx] = XOR? tree[left]^tree[right] : tree[left] | tree[right];
}

int main()
{
    ///freopen("debug.txt","w",stdout);
    /*
     ios_base::sync_with_stdio(false);
    cin.tie(0);
    */
    
    int nn,n=1,m,xr;
    scn2(nn,m);
    
    xr = nn%2?0:1;
    
    while(nn--) n *= 2;
    
    for(int i=1; i<=n ; i++) scn(a[i]);
    
    build(1,1,n,xr);
    
    //cout<<tree[1]<<endl;
    
    for(int i,x ; m ; m--){
        scn2(i,x);
        a[i] = x;
        update(1,i,1,n,xr);
        printf("%d\n",tree[1]);
    }

    return 0;
}
