// solution from Ashishgup(for learning purpose)
#include<bits/stdc++.h>
using namespace std;
#define FAST ios_base:: sync_with_stdio(false),cin.tie(0),cout.tie(0);
typedef long long ll;
ll n;
struct DSU{
            ll parent[500001],connected[500001];
            void intialize(int x)
            {
                for(ll i=1;i<=n;i++)
                {
                    parent[i]=i;
                    connected[i]=1;
                }
            }
            ll getparent(ll k)
            {
                while(k!=parent[k])
                {
                    parent[k]=parent[parent[k]];
                    k=parent[k];
                }
                return k;
            }
            ll getsize(ll k)
            {
                return connected[getparent(k)];
            }
            void unionn(ll u,ll v)
            {
                ll parent1=getparent(u),parent2=getparent(v);
                if(parent1==parent2)
                  return ;
                if(connected[parent1]>connected[parent2])
                  swap(parent1,parent2);
                connected[parent2]+=connected[parent1];
                connected[parent1]=0;
                parent[parent1]=parent[parent2];
            }
};
DSU dsu;
int main() {
    ll m,previous;
    cin>>n>>m;
    dsu.intialize(n);
    for(ll i=0;i<m;i++)
    {
        ll y;
        cin>>y;
        for(ll j=0;j<y;j++)
        {
            ll z;
            cin>>z;
            if(j>0)
            {
                dsu.unionn(previous,z);
            }
            previous=z;

        }
    }
    for(ll i=1;i<=n;i++)
    {
        cout<<dsu.getsize(i)<<" ";
    }

	return 0;
}