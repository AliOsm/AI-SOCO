#include <iostream>
#include <string>
#include <set>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <vector>
#include <map>
#include<queue>
#include <unordered_map>
#include <unordered_set>
#include <iomanip>
#include <stack>
#include <bitset>
#define Min(x, y, z, p) min(min(min(x, y), z), p)
using namespace std;
double const EPS = 1e-6;
long long const INF = 1000000007ll;
typedef long long ll;
#define int ll


signed main()
{
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	int n, m; cin >> n >> m;
	vector<string>s(n);
	for (int i = 0; i < n; i++) cin >> s[i];
	vector<vector<bool> > account(n, vector<bool>(m));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (s[i][j] == '#') {
				
				if (i + 2 < n && j + 2 < m) {
					bool flag = 1;
					for (int a = i; a < i + 3 && flag; a++) {
						for (int b = j; b < j + 3; b++) {
							if (s[a][b] == '.' && !(a == i + 1 && b == j + 1)) {
								flag = false;
								break;
							}
						}
					}
					if (flag) {
						for (int a = i; a < i + 3 && flag; a++) {
							for (int b = j; b < j + 3; b++) {
								if (!(a == i + 1 && b == j + 1)) account[a][b] = 1;
							}
						}
					}
				}
			}
		}
	}
	bool flag = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (s[i][j] == '#' && !account[i][j])
				return cout << "NO", 0;
		}
	}
	cout << "YES";
	return 0;
}
//azanjvhsuiovhruionhurvnhurhvneugvipr
//signed main()
//{
//	ios::sync_with_stdio(0);
//	int n; cin >> n;
//	vector<int> b(n), a(n);
//	for (int i = 0; i < n; i++)
//		cin >> a[i];
//	for (int i = 0; i < n; i++)
//		cin >> b[i];
//	int number_of_bottles = n, time_used = 0;
//	multiset<pair<int, int> > volume_used, volume_left;
//	for (int i = 0; i < n; i++) {
//
//		volume_used.insert({ a[i], b[i] - a[i] });
//		volume_left.insert({ b[i] - a[i], a[i] });
//
//	}
//	while (volume_used.empty() == false) {
//		pair<int, int> node = *volume_used.begin();
//		pair<int, int> node_copy = node;
//		volume_used.erase(*volume_used.begin());
//		volume_left.erase(volume_left.find({ node.second, node.first }));
//		pair<int, int> target;
//		if (volume_left.empty() == false) {
//			target = *volume_left.rbegin();
//
//			while (target.first > 0 && node.first > 0) {
//				if (volume_used.find({ target.second, target.first }) != volume_used.end()) {
//					volume_used.erase(volume_used.find({ target.second, target.first }));
//					volume_used.insert({ target.second + min(target.first, node.first),  target.first - min(target.first, node.first) });
//				}
//				volume_left.erase(*volume_left.rbegin());
//				volume_left.insert({ target.first - min(target.first, node.first), target.second + min(target.first, node.first) });
//				node.first = max(0ll, node.first - target.first);
//				target = *volume_left.rbegin();
//			}
//			if (node.first == 0) {
//				time_used += node_copy.first;
//				number_of_bottles--;
//			}
//			else {
//				volume_left.insert({ node_copy.second, node_copy.first });
//			}
//		}
//	}
//	cout << number_of_bottles << ' ' << time_used << '\n';
//	return 0;
//}