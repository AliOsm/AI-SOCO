#include <bits/stdc++.h>

#define llong long long

using namespace std;

typedef vector<int> big;

const int MAXN = (int) 1e2 + 3;
const int INF = (int) 1e9 + 7;

int n, m, k;
int a[MAXN][MAXN];

int main() {
  #ifdef LOCAL
  freopen("in", "r", stdin);
  #endif

  scanf("%d%d%d", &n, &m, &k);
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++) {
      scanf("%d", &a[i][j]);
    }
  }
  int ans = INF;
  if (n > k) {
    for (int id = 1; id <= n; id++) {
      int cans = 0;
      for (int i = 1; i <= n; i++) {
        int res = 0;
        for (int j = 1; j <= m; j++) {
          int cur = a[id][j];
          if (cur && !a[i][j]) ++res;
          else if (!cur && a[i][j]) ++res;
        }
        cans += min(res, m - res);
      }
      ans = min(ans, cans);
    }
    if (ans > k) printf("-1");
    else printf("%d", ans);
    return 0;
  }
  if (m > k) {
    for (int id = 1; id <= m; id++) {
      int cans = 0;
      for (int j = 1; j <= m; j++) {
        int res = 0;
        for (int i = 1; i <= n; i++) {
          int cur = a[i][id];
          if (cur && !a[i][j]) ++res;
          else if (!cur && a[i][j]) ++res;
        }
        cans += min(res, n - res);
      }
      ans = min(ans, cans);
    }
    if (ans > k) printf("-1");
    else printf("%d", ans);
    return 0;
  } 
  for (int mask = 0; mask < (1 << m); mask++) {
    int cans = 0;
    for (int i = 1; i <= n; i++) {
      int res = 0;
      for (int j = 1; j <= m; j++) {
        int cur = (mask >> (j - 1)) & 1;
        if (cur && !a[i][j]) ++res;
        else if (!cur && a[i][j]) ++res;
      }
      cans += min(res, m - res);
    }
    ans = min(ans, cans);
  }
  if (ans > k) printf("-1");
  else printf("%d", ans);
  return 0;
}