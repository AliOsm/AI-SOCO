#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define ll long long
#define ull  unsigned long long
#define pb push_back

using namespace std;
using namespace __gnu_pbds;
typedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
const int N = 200000;
int p[N], c[N], l[N], nxt[N], n;
pair < int, int > go[N], t[4 * N];
const int C = 350;
void build(int v, int tl, int tr){
    if (tl == tr) t[v] = {p[tl] + l[tl], tl}; else{
        int mid = (tl + tr) / 2;
        build(v + v, tl, mid);
        build(v + v + 1, mid + 1, tr);
        t[v] = max(t[v + v], t[v + v + 1]);
    }
}
pair < int, int > gt(int v, int tl, int tr, int l, int r){
    if (l > r) return {0, 0};
    if (l == tl && r == tr) return t[v];
    int mid = (tl + tr) / 2;
    return max(gt(v + v, tl, mid, l, min(mid, r)), gt(v + v + 1, mid + 1, tr, max(mid + 1, l), r));
}
main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    cin >> n;
    for (int i = 1; i <= n; i++) cin >> p[i] >> l[i];
    build(1, 1, n);
    for (int i = 1; i < n; i++){
        int L = i;
        int R = n + 1;
        while(R - L > 1){
            int mid = (R + L) / 2;
            if (p[mid] - p[i] > l[i]) R = mid; else L = mid;
        }
        if (R == n + 1){
            nxt[i] = n;
            continue;
        }
        auto x = gt(1, 1, n, i, R - 1);
        if (x.S == i){
            nxt[i] = R;
            c[i] = p[R] - p[i] - l[i];
        } else{
            nxt[i] = x.S;
        }
    }
    nxt[n] = n + C + C;
    for (int i = 1; i <= n; i++){
        int x = i;
        int y = 0;
        while(x - i < C){
            y += c[x];
            x = nxt[x];
        }
        go[i] = {x, y};
    }
    int q;
    cin >> q;
    for (int i = 1; i <= q; i++){
        int x, y;
        cin >> x >> y;
        int ans = 0;
        while(go[x].F <= y){
            ans += go[x].S;
            x = go[x].F;
        }
        while(nxt[x] <= y){
            if (nxt[x] <= y)
            ans += c[x];
            x = nxt[x];
        }
        cout << ans << endl;
    }
}
