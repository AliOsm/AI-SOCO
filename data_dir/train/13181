#include <bits/stdc++.h>
using namespace std;
typedef long long ll;


vector <int> adj[1005];
int a[15][1005];
int pos[15][1005];
int vis[1005];
int best[1005];
int ans;

void dfs(int node){
    vis[node] = 1;
    for(int i : adj[node]){
        if(!vis[i])
            dfs(i);
        best[node] = max( best[node] , best[i] + 1 );
    }
    best[node] = max(best[node],1);
    ans = max(ans , best[node]);
}

int main()
{
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    int n,k;
    cin >> n >> k;
    for(int i = 1; i <= k ; i ++){
        for(int j = 1 ; j <= n ; j ++){
            cin >> a[i][j];
            pos[i][ a[i][j] ] = j;
        }
    }

    for(int i = 1 ; i <= n ; i ++){
        for(int j = 1 ; j <= n ; j ++){
            if(i == j)continue;
            bool good = 1;
            for(int q = 1 ; q <= k ; q ++){
                if(pos[q][i] >= pos[q][j])good = false;
            }
            if(good)adj[i].push_back(j);
        }
    }
    for(int i = 1 ; i <= n ; i ++){
        if(vis[i])continue;
        dfs(i);
    }
    cout << ans ;
    return 0;
}
