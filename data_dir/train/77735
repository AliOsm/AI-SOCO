//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC opatimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }

int const maxn = 100005;
vector<int> gr[maxn];
long long vals[maxn];
int deep[maxn];
vector<int> par[maxn];

void dfs(int v, int p = 0) {
    deep[v] = 1 + deep[p];
    long long val = __gcd(vals[v], vals[p]);
    if (val != vals[v])
        par[v].push_back(p);
    for (int x : par[p]) {
        auto nval = __gcd(val, vals[x]);
        if (nval != val) {
            val = nval;
            par[v].push_back(x);
        }
    }

    for (int ne : gr[v])
        if (ne != p)
            dfs(ne, v);
}

int const mod = 1e9+7;
inline int safe_mul(const int x, const int y) {
    return x * static_cast<long long>(y) % mod;
}

inline void safe_add(int& x, const int y) {
    x += y;
    if (x >= mod)
        x -= mod;
}

int main() {
//    freopen("in.txt","r", stdin);
//    cout << fixed << setprecision(15);
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);

    int n;
    cin >> n;
    for (int i = 1; i <= n; ++i)
        cin >> vals[i];

    for (int i = 1; i < n; ++i) {
        int a,b;
        cin >> a >> b;
        gr[a].push_back(b);
        gr[b].push_back(a);
    }

    dfs(1);

    int ans = 0;
    for (int i = 1; i <= n; ++i) {
        long long cur = vals[i];
        int p = i;
        for (int ne : par[i]) {
            safe_add(ans, safe_mul(deep[p] - deep[ne], cur % mod));
            cur = __gcd(cur, vals[ne]);
            p = ne;
        }
        safe_add(ans, safe_mul(deep[p], cur % mod));
    }
    cout << ans << endl;
}
