#include <bits/stdc++.h>

#define f first
#define s second

#define pb push_back
#define ppb pop_back
#define mp make_pair

#define ld long double
#define ll long long
#define ull unsigned ll
#define pii pair <int, int>
#define pll pair <ll, ll>

#define bit(x) __builtin_popcountll(x)
#define all(x) x.begin(), x.end()
#define sqr(x) ((x) * 1ll * (x))
#define sz(x) (int)x.size()

#define purple ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define rep(_i, _from, _to) for (int _i = _from; _i <= _to; ++_i)
#define per(_i, _from, _to) for (int _i = _from; _i >= _to; --_i)

#define nl '\n'
#define ioi exit(0);

#define _187day "gen"

using namespace std;

const int N = 1e6 + 7, mod = 1e9 + 7, inf = 1e9 + 7;
const ll linf = (ll)1e18 + 7;
const ld eps = 1e-15, pi = 3.141592;
const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1}, dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

  int n;
  int a[N];

  struct tree{
    int mx, push;
  } t[N << 2];


  inline void push(int v, int tl, int tr){
    if (t[v].push){
      t[v + v].push += t[v].push, t[v + v + 1].push += t[v].push;
      t[v + v].mx += t[v].push, t[v + v + 1].mx += t[v].push;
      t[v].push = 0;
    }
  }

  inline void update(int l, int r, int add, int v = 1, int tl = 1, int tr = n){
    if (l <= tl && tr <= r){
      t[v].mx += add, t[v].push += add;
      return;
    }
    if (tl > r || tr < l) return;
    int tm = tl + tr >> 1;
    push(v, tl, tr);
    update(l, r, add, v + v, tl, tm);
    update(l, r, add, v + v + 1, tm + 1, tr);
    t[v].mx = max(t[v + v].mx, t[v + v + 1].mx);
  }

  inline pii get(int v = 1, int tl = 1, int tr = n){
    if (tl == tr) return {tl, t[v].mx};
    int tm = tl + tr >> 1;
    push(v, tl, tr);
    if (t[v + v + 1].mx > 0) return get(v + v + 1, tm + 1, tr);
    return get(v + v, tl, tm);
  }

int main(){
  #ifndef _187day
    freopen (_187day".in", "r", stdin);
    freopen (_187day".out", "w", stdout);
  #endif

  scanf ("%d", &n);
  rep(i, 1, n){
    int p, t, x;
    scanf ("%d%d", &p, &t);
    if (!t) update(1, p, -1);
    else{
      scanf ("%d", &x);
      update(1, p, 1);
      a[p] = x;
    }

    pii res = get();
    if (res.s <= 0) printf ("-1\n");
    else printf ("%d\n", a[res.f]);
  }

  ioi
}
/***
CF ne rewaet!!!
***/
