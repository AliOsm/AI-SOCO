#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

double p[5010];
int t[5010];
double power[5010];

double dp[5010][5010]; // time, pos

int main(void){
    int N,T,i,j;
    
    cin >> N >> T;
    REP(i,N) cin >> p[i] >> t[i];
    
    REP(i,N) p[i] /= 100.0;
    
    REP(i,N) power[i] = pow(1.0 - p[i], t[i] - 1.0);
    
    for(i=1;i<=T;i++) REP(j,N){
        if(i < t[j]){
            dp[i][j] = (dp[i-1][j+1] + 1.0) * p[j] + dp[i-1][j] * (1.0 - p[j]);
        } else {
    
        // q = p[j]
        // t[j] = 3
        // dp[i][j] = (dp[i-1][j+1] + 1) * q + (dp[i-2][j+1] + 1) * q * (1-q) + (dp[i-3][j+1] + 1) * (1-q)^2
        // dp[i-1][j] = (dp[i-2][j+1] + 1) * q + (dp[i-3][j+1] + 1) * q * (1-q) + (dp[i-4][j+1] + 1) * (1-q)^2
        
            double tmp = dp[i-1][j];
            if(i-1-t[j] >= 0) tmp -= (dp[i-1-t[j]][j+1] + 1.0) * power[j];
            tmp *= (1.0 - p[j]);
            tmp += (dp[i-t[j]][j+1] + 1.0) * power[j] * (1.0 - p[j]);
            tmp += (dp[i-1][j+1] + 1) * p[j];
            dp[i][j] = tmp;
        }
        
    //  cout << i << ' ' << j << ' ' << dp[i][j] << endl;
    }
    
    printf("%.9f\n", dp[T][0]);
    
    return 0;
}
