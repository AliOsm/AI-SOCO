#include <iostream>
#include <set>
#include <memory.h>

//#define B1 37
#define B2 43
#define MAX 1500
#define P pair
#define mp make_pair

using namespace std;

int badNum[MAX];
int a[26];
long long pow[MAX];
string s,bg;

void setBadNum(int size) {
	badNum[0] = 0;
	if(a[s[0]-'a'] == 0) badNum[0] = 1;
	for(int i=1; i<size; i++) {
		badNum[i] = badNum[i-1];
		if(a[s[i]-'a'] == 0) badNum[i]++;
	}
}

//long long powB1(int j) {
//	if(j==0) return 1;
//	return B1*powB1(j-1);
//}

long long powB2(int j) {
	if(j==0) return 1;
	if(pow[j]!=-1) return pow[j];
	pow[j] = B2*powB2(j-1);
	return pow[j];
}

int main() {
	memset(badNum, -1, sizeof badNum);
	memset(pow, -1, sizeof pow);
	cin >> s >> bg;
	for(int i=0; i<26; i++) a[i] = bg[i]-'0';
	setBadNum(s.size());
//	for(int i=0; i<s.size(); i++) cout << badNum[i] << " ";
//	cout << endl;
	int k;
	cin >> k;
	set <long long> sseett;
//	set <P <long long, long long> > sseett;
//	long long hashB1 = 0;
	long long hashB2 = 0;
//	sseett.clear();
	for(int i=0; i<s.size(); i++) {
		if(badNum[i]>k) break;
//		cout << badNum[i] << endl;
//		hashB1 += (s[i] - 'a' + 1) * powB1(i);
		hashB2 += (s[i] - 'a' + 1) * powB2(i);
		sseett.insert(hashB2);
	}
//	hashB1=0;
	hashB2=0;
	for(int i=1; i<s.size(); i++) {
		for(int j=i; j<s.size(); j++) {
			if(badNum[j]-badNum[i-1]<=k) {
//				hashB1 += (s[j] - 'a' + 1) * powB1(j-i);
				hashB2 += (s[j] - 'a' + 1) * powB2(j-i);
				sseett.insert(hashB2);
			}
			else break;
		}
//		hashB1=0;
		hashB2=0;
	}
	cout << sseett.size();
	return 0;
}