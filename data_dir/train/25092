#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
const int inf = 0x3f3f3f3f;

inline void chmax(int& x, int y) {if (x < y) x = y;}
inline void chmin(int& x, int y) {if (x > y) x = y;}
inline int LSB(int i) {return (i & -i);}

const int maxn = 1e6+5;

char c[maxn];
int n, m;

struct Node{
    int val, l, r;
    Node(){val = l = r = 0;}
    Node(int v, int L, int R):val(v), l(L), r(R){}
} seg[4*maxn];

Node unite(Node b, Node c){
    int sub = min(b.l, c.r);
    return Node(b.val + c.val + sub, b.l + c.l - sub, b.r + c.r - sub);
}

void build(int node, int left, int right){
    if (left > right) return;
    if (right == left){
        if (c[left - 1] == '(') seg[node].l++;
        else seg[node].r++;
        return;
    }

    int mid = (left + right) >> 1;
    build(2*node, left, mid);
    build(2*node + 1, mid + 1, right);

    ///Merge both sides along with unmatched characters
    seg[node] = unite(seg[2*node], seg[2*node + 1]);
}

Node query(int node, int left, int right, int ql, int qr){
    if (left > right || left > qr || ql > qr || right < ql) return Node();
    if (ql <= left && right <= qr) return seg[node];
    int mid = (left + right) >> 1;

    Node lft = query(2*node, left, mid, ql, qr), rght = query(2*node + 1, mid + 1, right, ql, qr);
    int sub = min(lft.l, rght.r);
    return unite(lft, rght);
}

int main(){
    scanf("%s", &c);
    scanf("%d", &m);

    n = strlen(c);
    build(1, 1, n);

    for (int i = 0, a, b; i < m; i++){
        scanf("%d%d", &a, &b);
        printf("%d\n", (query(1, 1, n, a, b).val)*2);
    }

	return 0;
}
