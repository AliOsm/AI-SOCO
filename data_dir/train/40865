#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
mt19937 mrand(random_device{}());
int rnd(int x) { return mrand() % x; }

const int N = 2e5 + 10;
int c[N];
bool visit[N];

void add(int x, int y) {
  for (; x < N; x += x & -x) {
    c[x] += y;
  }
}
int query(int x) {
  int ret = 0;
  for (; x; x -= x & -x) {
    ret += c[x];
  }
  return ret;
}

int main() {
  int n;
  scanf("%d", &n);
  vector<ii> a(n);
  vector<int> V;
  for (int i = 0; i < n; ++i) {
    scanf("%d%d", &a[i].first, &a[i].second);
    V.push_back(a[i].first);
  }
  sort(V.begin(), V.end());
  V.erase(unique(V.begin(), V.end()), V.end());
  for (int i = 0; i < n; ++i) {
    a[i].first = lower_bound(V.begin(), V.end(), a[i].first) -
      V.begin() + 1;
  }
  sort(a.begin(), a.end(),
       [](const ii& u, const ii& v) {
         return u.second > v.second ||
           (u.second == v.second && u.first < v.first);
       });
  int64 ret = 0;
  for (int i = 0, j; i < n; i = j) {
    int64 pre = 0;
    for (j = i; j < n && a[j].second == a[i].second; ++j) {
      int x = a[j].first;
      int64 cur = query(x - 1);
      int64 len = cur - pre;
      ret -= len * (len + 1) / 2;
      if (!visit[x]) {
        visit[x] = true;
        add(x, 1);
      }
      pre = query(x);
    }
    int64 cur = query(V.size());
    int64 len = cur - pre;
    ret -= len * (len + 1) / 2;
    ret += cur * (cur + 1) / 2;
  }
  printf("%lld\n", ret);
  return 0;
}
