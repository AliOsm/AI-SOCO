#include <bits/stdc++.h>

using namespace std;

class dsu {
  public:
  int n;
  vector<int> parent;
  vector<int> size;

  dsu(int n) : n(n) {
    parent.resize(n);
    size.resize(n);
    for (int i = 0; i < n; i++) {
      size[i] = 1;
      parent[i] = i;
    }
  }

  int find(int x) {
    if (x == parent[x]) {
      return x;
    }
    return parent[x] = find(parent[x]);
  }
};

int main() {
  int n;
  scanf("%d", &n);
  dsu d(n);
  vector< pair<int, int> > rem;
  for (int i = 0; i + 1 < n; i++) {
    int a, b;
    scanf("%d %d", &a, &b);
    a--, b--;
    int x = d.find(a), y = d.find(b);
    if (x != y) {
      if (d.size[x] < d.size[y]) {
        swap(x, y);
      }
      d.parent[y] = x;
    } else {
      rem.emplace_back(a, b);
    }
  }
  vector< pair<int, int> > add;
  for (int i = 0; i < n; i++) {
    for (int j = i + 1; j < n; j++) {
      int x = d.find(i), y = d.find(j);
      if (x != y) {
        if (d.size[x] < d.size[y]) {
          swap(x, y);
        }
        d.parent[y] = x;
        add.emplace_back(i, j);
      }
    }
  }
  assert((int) rem.size() == (int) add.size());
  printf("%d\n", (int) rem.size());
  for (int i = 0; i < (int) rem.size(); i++) {
    printf("%d %d %d %d\n", rem[i].first + 1, rem[i].second + 1, add[i].first + 1, add[i].second + 1);
  }
  return 0;
}