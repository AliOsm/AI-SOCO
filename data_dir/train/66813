#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>
#include <numeric>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

constexpr long long MAX = 5100000;
constexpr long long INF = 1LL << 60;
constexpr int inf = 1 << 28;
//constexpr long long mod = 1000000007LL;
constexpr long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

struct mint {
	long long x;
	mint(long long x = 0) :x((x% mod + mod) % mod) {}
	mint& operator+=(const mint a) {
		if ((x += a.x) >= mod) x -= mod;
		return *this;
	}
	mint& operator-=(const mint a) {
		if ((x += mod - a.x) >= mod) x -= mod;
		return *this;
	}
	mint& operator*=(const mint a) {
		(x *= a.x) %= mod;
		return *this;
	}
	mint operator+(const mint a) const {
		mint res(*this);
		return res += a;
	}
	mint operator-(const mint a) const {
		mint res(*this);
		return res -= a;
	}
	mint operator*(const mint a) const {
		mint res(*this);
		return res *= a;
	}
	mint pow(ll t) const {
		if (!t) return 1;
		mint a = pow(t >> 1);
		a *= a;
		if (t & 1) a *= *this;
		return a;
	}

	// for prime mod
	mint inv() const {
		return pow(mod - 2);
	}
	mint& operator/=(const mint a) {
		return (*this) *= a.inv();
	}
	mint operator/(const mint a) const {
		mint res(*this);
		return res /= a;
	}
};


mint solve(vector<ll>& v, vector<vector<mint>>& dp) {
	mint res = 1;
	int left = -1;
	for (int i = 0; i < v.size(); i++) {
		if (v[i] != -1) {
			if (left == -1) {
				res *= dp[2][i];
			}
			else if (v[left] == v[i]) {
				res *= dp[1][i - left - 1];
			}
			else {
				res *= dp[0][i - left - 1];
			}
			left = i;
		}
	}
	if (left == -1) res *= dp[3][v.size()];
	else res *= dp[2][(int)v.size() - left - 1];
	return res;
}
int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/

	ll n, k; scanf("%lld %lld", &n, &k);
	vector<vector<mint>> dp(4, vector<mint>(n + 1));
	dp[0][0] = dp[2][0] = dp[3][0] = 1;
	for (int len = 1; len <= n; len++) {
		dp[0][len] = (dp[1][len - 1] + dp[0][len - 1] * (k - 2));
		dp[1][len] = dp[0][len - 1] * (k - 1);
		dp[2][len] = dp[2][len - 1] * (k - 1);
		dp[3][len] = dp[2][len - 1] * k;
	}
	vector<ll> even, odd;
	for (int i = 0; i < n; i++) {
		ll x; scanf("%lld", &x);
		if (i % 2 == 0) even.push_back(x);
		else odd.push_back(x);
	}
	//cout << solve(odd, dp).x << " " << solve(even, dp).x << endl;
	mint res = solve(odd, dp) * solve(even, dp);
	cout << res.x << "\n";
    return 0;
} 