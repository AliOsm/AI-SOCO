#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <set>

using namespace std;

const int MaxN = 12, MedL = 12, MaxL = 100015, NA = -1;

char s [MaxL];
char b [MaxN] [MedL];
int d [MaxN];
int mark [MaxL];
int l, n;

int main (void)
{
 int i, j, k;
 while (scanf (" %s", s) != EOF)
 {
  scanf (" %d", &n);
  l = strlen (s);
  for (i = 0; i < n; i++)
  {
   scanf (" %s", b[i]);
   d[i] = strlen (b[i]);
  }
  memset (mark, 0, sizeof (mark));
  set <pair <int, int> > a;
  for (k = 0; k < l; k++)
   for (i = 0; i < n; i++)
   {
    for (j = 0; b[i][j]; j++)
     if (b[i][j] != s[k + j])
      break;
    if (!b[i][j])
    {
     assert (j == d[i]);
     mark[k] |= 1 << i;
//     printf ("%d matches %d\n", k, i);
     a.insert (make_pair (k + d[i] - 1, i));
    }
   }
  int cur, pos, res;
  res = pos = 0;
  for (k = 0; k < l; k++)
  {
   if (a.empty ())
    cur = l;
   else
    cur = a.begin () -> first;
//   printf ("%d %d\n", k, cur);
   if (res < cur - k)
   {
    res = cur - k;
    pos = k;
   }
   for (i = 0; i < n; i++)
    if (mark[k] & (1 << i))
     a.erase (make_pair (k + d[i] - 1, i));
  }
  printf ("%d %d\n", res, pos);
 }
 return 0;
}
