#include <bits/stdc++.h>
using namespace std;
 
const int MAXN = 1e5 + 10;
int n, m, l, a[MAXN], ans, root[MAXN];
 
int find_root(int v) {
	if (root[v] == v)	return v;
	return root[v] = find_root(root[v]);
}
 
void uni(int v, int u) {
	int prv = find_root(v);
	int pru = find_root(u);
	root[pru] = prv;
}
 
void prep() {
	for (int i = 1; i <= n; i++) {
		if (a[i] <= l)
			continue;
		if (a[i - 1] > l)	uni(i - 1, i);
		else	ans++;
	}
}
 
int main() {
	cin >> n >> m >> l;
	for (int i = 1; i <= n; i++)	cin >> a[i];
	iota(root + 1, root + n + 1, 1);
	prep();
	while (m--) {
		int t;
		cin >> t;
		if (t == 0)
			cout << ans << endl;
		else {
			int p, d;
			cin >> p >> d;
			if (a[p] > l)	continue;
			else
				if (a[p] + d > l) {
					a[p] += d;
					a[p] = l + 1;
					if (a[p - 1] > l)	uni(p, p - 1);
					if (a[p + 1] > l)	uni(p, p + 1);
					if (a[p - 1] > l and a[p + 1] > l)	ans--;
					if (a[p - 1] <= l and a[p + 1] <= l)	ans++;
				}
				else	a[p] += d, a[p] = min(l + 1, a[p]);
		}
	}
}