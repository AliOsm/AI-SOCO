#include <bits/stdc++.h>
using namespace std;
typedef long long Long;

const Long MX = 2e5 + 10;

Long dif[MX];
Long tim[MX];

void solve(){
    Long n, T, a, b;
    cin >> n >> T >> a >> b;
    
    Long facil = 0;
    Long dificil = 0;
    for(Long i = 0; i < n; i++){
        cin >> dif[i];
        if(dif[i] == 0){
            facil++;
        }else{
            dificil++;
        }
    }
    set<Long> t;
    for(Long i = 0; i < n; i++){
        cin >> tim[i];
        if(tim[i] <= T){
            t.insert(tim[i]);
            t.insert(max(tim[i]-1,0ll));
        }
    }
    t.insert(T);
    
    multiset< pair<Long,Long> > ord;
    for(Long i = 0; i < n; i++) ord.insert({tim[i],dif[i]});
    
    Long ans = 0;
    Long tot = 0;
    Long necesita = 0;
    for(Long ac : t){
        while(!ord.empty()){
            pair<Long,Long> aux = *ord.begin();
            if(aux.first > ac) break;
            ord.erase(ord.begin());
            if(aux.second == 0){
                necesita += a;
                facil--;
            }else{
                necesita += b;
                dificil--;
            }
            tot++;
        }
        
        if(necesita > ac) continue;
        
        Long sobra = ac - necesita;
        
        if(sobra <= a*facil){
            ans = max(ans,tot + min(sobra / a,facil));
        }else{
            sobra -= a*facil;
            ans = max(ans,tot + facil + min(sobra / b,dificil));
        }
    }
    
    cout << ans << "\n";
    return;
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cout.precision(10);
    cout << fixed;
    
    Long t;
    cin >> t;
    while(t--) solve();
    return 0;
}
