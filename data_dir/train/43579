#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

bool U[1000005];
int Q;
vector<int> Pos[1000005], Primes[1000005];

int process(int x, vector<int> &primes)
{
    int e = SZ(primes), ret = 0;
    f(m,0,(1<<e)-1)
    {
        int k = 1;
        f(i,0,e-1) if(m&(1<<i)) k *= primes[i];
        if(__builtin_popcount(m)&1) ret -= x/k;
        else ret += x/k;
    }
    return ret;
}

int query(int x, int n, int k)
{
    vector<int> p;
    for(int pr : Primes[n]) p.pb(pr);
    k += process(x,p);
    int a = x+1, b = 10000000;
    while(b-a > 1)
    {
        int mid = (a+b) / 2;
        if(process(mid,p) < k) a = mid;
        else b = mid;
    }
    if(process(a,p) == k) return a;
    else return b;
}

int main()
{
    faster_io();

    f(i,2,1000000) if(!U[i]) for(int j = i; j <= 1000000; j += i) Primes[j].pb(i), U[j] = true;
    cin >> Q;

    while(Q--)
    {
        int x,p,k;
        cin >> x >> p >> k;
        cout << query(x,p,k) << "\n";
    }
}
