//{{{By oToToT
#include <iostream>
#include <iomanip>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <random>
#include <utility>
#include <stack>
#include <sstream>
#include <functional>
#include <deque>
#include <cassert>
using namespace std;
/* include everything for Kotori~ <3 */

typedef long long lld;
typedef unsigned long long llu;
typedef long double llf;
typedef pair<int,int> PII;
typedef pair<int,lld> PIL;
typedef pair<lld,int> PLI;
typedef pair<lld,lld> PLL;
template<typename T>
using maxHeap = priority_queue<T,vector<T>,less<T>>;
template<typename T>
using minHeap = priority_queue<T,vector<T>,greater<T>>;
/* define some types for Ruby! */

#define FF first
#define SS second
#define SZ(x) (int)(x.size())
#define ALL(x) begin(x), end(x)
#define PB push_back
#define WC(x) while(x--)
/* make code shorter for Di~a~ */

template<typename Iter>
ostream& _out(ostream &s, Iter b, Iter e) {
	s<<"[";
	for ( auto it=b; it!=e; it++ ) s<<(it==b?"":" ")<<*it;
	s<<"]";
	return s;
}
template<typename A, typename B>
ostream& operator <<( ostream &s, const pair<A,B> &p ) { return s<<"("<<p.FF<<","<<p.SS<<")"; }
template<typename T>
ostream& operator <<( ostream &s, const vector<T> &c ) { return _out(s,ALL(c)); }
/* make output easier for Ainyan~n~ */

bool debug = 0;
#define DUMP(x) if(debug) cerr<<__PRETTY_FUNCTION__<<":"<<__LINE__<<" - "<<#x<<"="<<x<<'\n'
template<typename T>
void DEBUG(const T& x){if(debug) cerr<<x;}
template<typename T, typename... Args>
void DEBUG(const T& head,const Args& ...tail){
	if(debug){cerr<<head; DEBUG(tail...);}
}
/* Let's debug with Nico~Nico~Ni */
//}}}
const int N = 400000 + 5;

class BCC{
	private:
		int low[N], dfn[N], cnt;
		bool bcc[N];
		vector<PII> G[N];
		void dfs(int w, int f){
			dfn[w] = cnt++;
			low[w] = dfn[w];
			for(auto i: G[w]){
				int u = i.FF, t = i.SS;
				if(u == f) continue;
				if(dfn[u]!=0){
					low[w] = min(low[w], dfn[u]);
				}else{
					dfs(u, w);
					low[w] = min(low[w], low[u]);
					if(low[u] > dfn[w]) bcc[t] = true;
				}
			}
		}
	public:
		void init(int n, int m){
			for(int i=0;i<n;i++) G[i].clear();
			fill(bcc, bcc+m, false);
			cnt = 0;
		}
		void add_edge(int u, int v){
			G[u].PB({v, cnt});
			G[v].PB({u, cnt});
			cnt++;
		}
		void solve(){cnt = 1;dfs(0, 0);}
		bool is_bcc(int x){return bcc[x];}
} bcc;

int id[N], tot[N], cnt;
bool vis[N];
PII egs[N];
vector<PII> G[N], nG[N], ans;
void dfs(int);
void dfs2(int, int);

int main(int argc, char* argv[]){
	if(argc>1 and string(argv[1])=="-D") debug=1;
	if(!debug){ios_base::sync_with_stdio(0);cin.tie(0);}
	int n, m; cin>>n>>m;
	bcc.init(n, m);
	for(int i=0;i<m;i++){
		cin>>egs[i].FF>>egs[i].SS;
		egs[i].FF--, egs[i].SS--;
		bcc.add_edge(egs[i].FF, egs[i].SS);
		G[egs[i].FF].PB({egs[i].SS, i});
		G[egs[i].SS].PB({egs[i].FF, i});
	}
	bcc.solve();
	for(int i=0;i<m;i++){
		int u = egs[i].FF, v = egs[i].SS;
		if(!vis[u]){
			cnt++;
			dfs(u);
		}
		if(!vis[v]){
			cnt++;
			dfs(v);
		}
		if(id[u]!=id[v]){
			nG[id[u]].PB({id[v], i});
			nG[id[v]].PB({id[u], i});
		}
	}
	PII mx = {tot[1], 1};
	for(int i=1;i<=cnt;i++) mx = max(mx, {tot[i], i});
	dfs2(mx.SS, mx.SS);
	cout << mx.FF << '\n';
	for(int i=0;i<m;i++) cout << egs[i].FF+1 << ' ' << egs[i].SS+1 << '\n';
	return 0;
}

void dfs(int w){
	if(vis[w]) return;
	vis[w] = 1;
	id[w] = cnt;
	tot[cnt]++;
	for(auto i: G[w]){
		if(bcc.is_bcc(i.SS)) continue;
		if(egs[i.SS].FF != w) swap(egs[i.SS].FF, egs[i.SS].SS);
		dfs(i.FF);
	}
}

void dfs2(int w, int f){
	for(auto i: nG[w]){
		int u = i.FF, t = i.SS;
		if(u==f) continue;
		if(id[egs[t].FF] == w) swap(egs[t].FF, egs[t].SS);
		dfs2(u, w);
	}
}