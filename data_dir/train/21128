#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()
// #define endl "\n"

typedef tree<pair<ll,ll> ,null_type,less<pair<ll,ll> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth smallest: " << *A.find_by_order(k-1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

vector<pair<ll,ll> >v;
vector<ll>v1, v2;

int main()
{
	std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

 	ll s, b;
 	cin >> s >> b;
 	ll a[s], x, y;
 	for(int i=0;i<s;i++) cin >> a[i];
 	for(int i=0;i<b;i++)
 	{
 		cin >> x >> y;
 		v.pb(mp(x, y));
 	}
 	sort(v.begin(), v.end());
 	for(int i=0;i<b;i++)
 	{
 		v1.pb(v[i].first);
 		v2.pb(v[i].second);
 	}
 	ll cum[b];
 	cum[0] = v2[0];
 	for(int i=1;i<b;i++) cum[i] = cum[i - 1] + v2[i];
 	for(int i=0;i<s;i++)
 	{
 		ll val = upper_bound(v1.begin(), v1.end(), a[i]) - v1.begin();
 		if(val == 0) cout << 0 << " ";
 		else cout << cum[val - 1] << " ";
 	}
 	cout << endl;
    return 0;
}