/*
ID: hepic
PROG: nocows
LANG: C++11
*/
#include<bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REP(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define SIZE 100010
#define MAXN 1000000009
#define NUM 20
#define PI acos(-1)
#define open_read1 freopen("C:\\Users\\Hepic\\Desktop\\a.txt", "r", stdin)
#define open_write1 freopen("C:\\Users\\Hepic\\Desktop\\b.txt", "w", stdout)
#define open_read freopen("cruise.in", "r", stdin)
#define open_write freopen("cruise.out", "w", stdout)

using namespace std;


typedef long long LL;
typedef unsigned long long LLU;
typedef pair<int,int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<LL, PLL> PLPLL;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    return out<<"("<<obj.first<<","<<obj.second<<")";
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N])
{
     REP(i, 0, N)
        out<<arr[i]<<" ";
    out<<endl;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}


template<typename T>
T fast_exp_pow(T base, T exp, T mod)
{
    LL res = 1;

    while(exp)
    {
        if(exp&1)
        {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;
    }

    return res;
}

/*#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################*/

int N, M, A, B, short_dist;
int dist1[110], distN[110];
double answer;
bool visited[110];
vector<int> graph[110];
queue<int> que;
LL max_path, all_path;
LL counts1[110], countsN[110];



void bfs(int st_node, int *dist, LL *counts)
{
    ms(visited, false);
    que.push(st_node);

    dist[st_node] = 0;
    counts[st_node] = 1;
    visited[st_node] = true;


    while(!que.empty())
    {
        int node = que.front();
        que.pop();

        REP(i, 0, graph[node].size())
        {
            int conn_node = graph[node][i];

            if(!visited[conn_node])
            {
                que.push(conn_node);

                visited[conn_node] = true;
                dist[conn_node] = dist[node] + 1;
                counts[conn_node] = counts[node];
            }

            else if(dist[conn_node] == dist[node] + 1)
                counts[conn_node] += counts[node];
        }
    }
}





int main()
{
    //open_read1;
    scanf("%d%d", &N, &M);

    REP(i, 0, M)
    {
        scanf("%d%d", &A, &B);
        graph[A].pb(B);
        graph[B].pb(A);
    }



    bfs(1, dist1, counts1);
    bfs(N, distN, countsN);

    short_dist = dist1[N];
    all_path = counts1[N];


    for(int i=2; i<N; ++i)
        if(dist1[i] + distN[i] == short_dist)
            max_path = max(max_path, 2 * counts1[i] * countsN[i]);

    max_path = max(max_path, counts1[N]);
    max_path = max(max_path, countsN[1]);

    answer = (double)max_path / (double)all_path;



    printf("%.10lf\n", answer);

    return 0;
}

