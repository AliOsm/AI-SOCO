#include <bits/stdc++.h>
using namespace std;

vector <long long> prime_numbers;

inline void prime_finder() {
    vector<bool> used(2e6, false);
    for (long long i = 2; i <= 1e6; ++i) {
        if (!used[i]) {
            prime_numbers.push_back(i);
            for (long long j = i * i; j <= 1e6; j += i) {
                used[j] = true;
            }
        }
    }
}

int32_t main() {
    ios_base :: sync_with_stdio(false);
    prime_finder();
    long long n, b;
    cin >> n >> b;
    map<long long, long long> deviders_needed, existing_deviders;
    for (auto& i : prime_numbers) {
        while (b % i == 0) {
            ++deviders_needed[i];
            b /= i;
        }
    }
    if (b != 1) {
        deviders_needed[b] = 1;
    }
    long long ans = 1ll << 60;
    for (auto& i : deviders_needed) {
        long long j = i.first;
        while (j <= n) {
            existing_deviders[i.first] += n / j;
            if (j > n / i.first) {
                break;
            }
            j *= i.first;
        }
        ans = min(ans, static_cast<long long>(existing_deviders[i.first] / i.second));
    }
    cout << ans;
}