#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + 333;

const int N = 2000 + 5;

int n, m, f[N], g[N], dp[N][N], ans[N];
char s[N], p[N];

int main () {
    
    scanf("%s %s", s + 1, p + 1);
    
    n = strlen(s + 1);
    m = strlen(p + 1);
    
    for(int i = 1; i <= n; i++) {
        f[i] = -1;
        int k = 1;
        for(int j = i; j <= n; j++) {
            if(s[j] == p[k])
                k++;
            if(k > m) {
                f[i] = j;
                break;
            }
        }
    }
    
    for(int j = 1; j <= n; j++) {
        dp[n + 1][j] = -1;
        g[j] = -1;
        for(int i = n; i >= 1; i--) {
            
            dp[i][j] = dp[i + 1][j];
            
            if(f[i] != -1 and dp[f[i] + 1][j - 1] != -1 and (dp[i][j] == -1 or dp[f[i] + 1][j - 1] + f[i] - i + 1 - m < dp[i][j]))
                dp[i][j] = dp[f[i] + 1][j - 1] + f[i] - i + 1 - m;
            
            if(dp[i][j] != -1 and (g[j] == -1 or dp[i][j] < g[j]))
                g[j] = dp[i][j];
            
        }
        if(g[j] == -1)
            break;
        ans[g[j]] = j;
    }
    
    for(int i = 0; i <= n; i++) {
        cout << min((n - i) / m, ans[i]) << ' ';
        ans[i + 1] = max(ans[i + 1], ans[i]);
    }
    
    cout << endl;
    
    return 0;
    
}
