#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define DEBUG
#ifdef DEBUG
#define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
	template <typename Arg1>
	void __f(const char* name, Arg1&& arg1)
	{
		cerr << name << " = " << arg1 << endl;
	}
	template <typename Arg1, typename... Args>
	void __f(const char* names, Arg1&& arg1, Args&&... args)
	{
		const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " = " << arg1 << " || ";
		__f(comma+1, args...);
	}
#else
#define debug(...)
#endif

template <class Ch, class Tr, class Container>
basic_ostream <Ch, Tr> & operator << (basic_ostream <Ch, Tr> & os, Container const& x) {
    os << "{ ";
    for(auto& y : x) os << y << " ; ";
    return os << "}";
}

template <class X, class Y>
ostream & operator << (ostream & os, pair <X, Y> const& p) {
	return os << "[ " << p.first << ", " << p.second << "]" ;
}

#define FAST_IO std::ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()
#define endl "\n"

// priority_queue<ll, vector<ll>, less<ll>>pq;     // Max Heap
// priority_queue<ll, vector<ll>, greater<ll>>pq;  // Min Heap

typedef tree<ll,null_type,greater<ll>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth (1 based indexing) smallest: " << *A.find_by_order(k - 1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

const int MAXN = 3e5 + 5;

ll n, m, a[MAXN], mi[MAXN], mx[MAXN], done[MAXN], b[MAXN], val[MAXN];
ordered_set pq;
vector<ll>adj[MAXN], segtree[4 * MAXN];

void build(ll node, ll curr_l, ll curr_r)
{
	if(curr_l == curr_r) segtree[node].pb(b[curr_r]);
	else
	{
		ll curr_mid = (curr_l + curr_r) >> 1;
		build(2 * node + 1, curr_l, curr_mid);
		build(2 * node + 2, curr_mid + 1, curr_r);
		merge(segtree[2 * node + 1].begin(), segtree[2 * node + 1].end(), segtree[2 * node + 2].begin(), segtree[2 * node + 2].end(), back_inserter(segtree[node]));
	}
}

ll query(ll node, ll curr_l, ll curr_r, ll query_l, ll query_r, ll x)
{
	if(query_l > query_r || curr_l > curr_r || curr_l > query_r || curr_r < query_l) return 0;
	if(curr_l >= query_l && curr_r <= query_r)
	{
		ll val = lower_bound(segtree[node].begin(), segtree[node].end(), x) - segtree[node].begin();
		return segtree[node].size() - val;
	}
	else
	{
		ll curr_mid = (curr_l + curr_r) >> 1;
		ll left_value = query(2 * node + 1, curr_l, curr_mid, query_l, min(query_r, curr_r), x); 
		ll right_value = query(2 * node + 2, curr_mid + 1, curr_r, max(query_l, curr_l), query_r, x);
		return left_value + right_value;
	}
}

ll dist(ll l, ll r)
{
	if(r < l) return 0;
	return query(0, 0, m - 1, l, r, r + 1);
}

int main()
{
	FAST_IO;

	cin >> n >> m;
	for(int i=0;i<m;i++) cin >> a[i];
	for(int i=0;i<m;i++)
	{
		adj[a[i]].pb(i);
		if(done[a[i]] == 0)
		{	
			ll y = pq.order_of_key(a[i]);
			mx[a[i]] = max(mx[a[i]], a[i] + y);
			done[a[i]] = 1;
		}
		pq.insert(a[i]);
	}
	for(int i=0;i<m;i++)
	{
		if(val[a[i]] >= sz(adj[a[i]]) - 1) b[i] = 1e18;
		else b[i] = adj[a[i]][val[a[i]] + 1], val[a[i]] += 1;
	}
	for(int i=1;i<=n;i++)
	{
		if(!done[i])
		{
			mi[i] = i;
			mx[i] = i + pq.order_of_key(i);
		}	
		else mi[i] = 1;
	}
	build(0, 0, m - 1);
	for(int i=1;i<=n;i++)
	{
		if(!done[i]) continue;
		for(int j=0;j<sz(adj[i]) - 1;j++) mx[i] = max(mx[i], dist(adj[i][j] + 1, adj[i][j + 1] - 1) + 1);
		mx[i] = max(mx[i], dist(adj[i].back() + 1, m - 1) + 1);
	}
	for(int i=1;i<=n;i++) cout << mi[i] << " " << mx[i] << endl;
    return 0;
}