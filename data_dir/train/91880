#include <bits/stdc++.h>
using namespace std;

#ifdef SG
	#include <debug.h>
#else
	#define show(...)
	#define debug(...)
	#define deepen(...)
	#define timer(...)
#endif

#define ARG4(_1,_2,_3,_4,...) _4

#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)

#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)

#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 210;

struct Input {
	int n;
	string s;
	
	bool read () {
		if (scanf("%d", &n) != 1)
			return 0;
		getline(cin, s);
		getline(cin, s);
		return 1;
	}

	void init (const Input &input) {
		*this = input;
	}
};

struct Data: Input {
	int ans;
	
	void write () {
		if (ans & 1) {
			cout << 'B';
		}
		if (ans & 2) {
			cout << 'G';
		}
		if (ans & 4) {
			cout << 'R';
		}
		cout << endl;
	}
	
	virtual void solve () {}
	
	virtual void clear () {
		*this = Data();
	}
};

struct Solution: Data {
	int d[N][N][N];
	int kol[3];
	
	void solve () {
		memset(kol, 0, sizeof(kol));
		forn(i, n) {
			if (s[i] == 'B')
				kol[0]++;
			if (s[i] == 'G')
				kol[1]++;
			if (s[i] == 'R')
				kol[2]++;
		}
		memset(d, 0, sizeof(d));
		d[1][0][1] = 1;
		d[1][1][0] = 2;
		d[1][0][0] = 4;
		forn(i, 2, N) {
			forn(j, N) {
				forn(k, N) {
					if (j > 1) {
						d[i][j][k] |= d[i - 1][j - 1][k];
					}
					if (k > 1) {
						d[i][j][k] |= d[i - 1][j][k - 1];
					}
					if (i - j - k > 1) {
						d[i][j][k] |= d[i - 1][j][k];
					}
					if (j > 0 && k > 0) {
						d[i][j][k] |= d[i - 1][j - 1][k - 1];
					}
					if (j > 0 && i - j - k > 0) {
						d[i][j][k] |= d[i - 1][j - 1][k + 1];
					}
					if (k > 0 && i - j - k > 0) {
						d[i][j][k] |= d[i - 1][j + 1][k - 1];
					}
				}
			}
		}
		ans = d[n][kol[1]][kol[0]];
	}
	
	void clear () {
		*this = Solution();
	}
};

Solution sol;

int main () {
	cout.setf(ios::showpoint | ios::fixed);
	cout.precision(20);
#ifdef SG
	freopen((problemname + ".in").c_str(), "r", stdin);
//	freopen((problemname + ".out").c_str(), "w", stdout);
	while (sol.read()) {
		sol.solve();
		sol.write();
		sol.clear();
	}
#else
    sol.read();
    sol.solve();
	sol.write();
#endif
	return 0;
}
