#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int maxn=20007;
const int inf=INT_MAX;
const ll inff=1e16;
const ll mod=1e9+7;
#define pii pair<int,int>
#define mkp make_pair
#define F first
#define S second
#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define int ll

#ifdef HNO2
#define IOS
#else
#define endl '\n'
#define IOS ios::sync_with_stdio(0); cin.tie(0);
#endif // HNO2

int seg[4][maxn*4];

void modify(int point,int now,int l,int r,int x,int v)
{
    if (l==r)
    {
        seg[point][now]=v;
        return;
    }
    int m=(l+r)>>1;
    if (x<=m) modify(point,now*2,l,m,x,v);
    else modify(point,now*2+1,m+1,r,x,v);
    seg[point][now]=max(seg[point][now*2],seg[point][now*2+1]);
}

int query(int point,int now,int l,int r,int ql,int qr)
{
    if (r<ql||l>qr) return -inff;
    else if (l>=ql&&r<=qr) return seg[point][now];
    int m=(l+r)>>1;
    return max(query(point,now*2,l,m,ql,qr),query(point,now*2+1,m+1,r,ql,qr));
}

int n,m,k;
int dp[52][maxn];
int p[52][maxn];

int32_t main()
{
    IOS
    cin>>n>>m>>k;
    for (int j=1;j<=3;j++)
        for (int i=1;i<=m;i++) modify(j,1,1,n,i,0);
    for (int i=1;i<=n;i++)
        for (int j=1;j<=m;j++) cin>>p[i][j],p[i][j]=p[i][j-1]+p[i][j];

    for (int i=1;i<=n;i++)
    {
        for (int j=1;j<=m;j++)
        {
            dp[i][j]=-inff;
        }
        for (int j=1;j<=m-k+1;j++)
        {
            if (i==1)
            {
                dp[i][j]=p[i][j+k-1]-p[i][j-1]+p[i+1][j+k-1]-p[i+1][j-1];
            }
            else
            {
                //cout<<min(j+k-1,m-k+1)<<' '<<max(1ll,j-k+1)<<endl;
                //cout<<+p[i][j+k-1]-p[i][j-1]+p[i+1][j+k-1]-p[i+1][j-1]<<endl;
                if (j-k>=1) dp[i][j]=max(dp[i][j],query(1,1,1,m-k+1,1,j-k)+p[i][j+k-1]-p[i][j-1]+p[i+1][j+k-1]-p[i+1][j-1]);
            if (j+k<=m-k+1) dp[i][j]=max(dp[i][j],query(1,1,1,m-k+1,j+k,m-k+1)+p[i][j+k-1]-p[i][j-1]+p[i+1][j+k-1]-p[i+1][j-1]);
            //cout<<i<<' '<<j<<' '<<dp[i][j]<<endl;
            dp[i][j]=max(dp[i][j],query(2,1,1,m-k+1,j,min(j+k-1,m-k+1))-p[i][j+k-1]+p[i][j+k-1]-p[i][j-1]+p[i+1][j+k-1]-p[i+1][j-1]);
            //cout<<query(2,1,1,m-k+1,j,min(j+k-1,m-k+1))<<endl;
            dp[i][j]=max(dp[i][j],query(3,1,1,m-k+1,max(1ll,j-k+1),j)+p[i][j-1]+p[i][j+k-1]-p[i][j-1]+p[i+1][j+k-1]-p[i+1][j-1]);
            }
            //cout<<i<<' '<<j<<' '<<dp[i][j]<<endl;


        }
        for (int j=1;j<=m-k+1;j++)
        {

    modify(1,1,1,m-k+1,j,dp[i][j]);
            modify(2,1,1,m-k+1,j,dp[i][j]+p[i+1][j-1]);
            modify(3,1,1,m-k+1,j,dp[i][j]-p[i+1][j+k-1]);

        }

    }
    int ans=0;
    for (int i=1;i<=m-k+1;i++) ans=max(ans,dp[n][i]);
    cout<<ans<<endl;

}
