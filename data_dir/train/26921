#include <bits/stdc++.h>
using namespace std;
const int maxn = 210;
typedef pair<int, int> Pii;
typedef long long ll;
typedef vector<Pii> vpii;
#define fst first
#define snd second
#define pb push_back
int m;

Pii dp[maxn][maxn][6][6];
bool rem(Pii x)
{
	return abs(x.fst - x.snd) == 2;
}
Pii inc(Pii x)
{
	++x.fst;
	++x.snd;
	return x;
}
void remisy()
{
	for(int i = 1; i < 201; ++i)
	for(int j = 1; j < 201; ++j)
	for(int k = 0; k <= 3; ++k)
	for(int l = 0; l <= 3; ++l)
	{
		if(max(k,l) > 0)
		if(rem(dp[i-1][j-1][k][l]))
		{
			dp[i][j][k][l] = inc(dp[i-1][j-1][k][l]);
		}
	}
}
void init()
{
	
	for(int i = 0; i < 201; ++i)
		for(int j = 0; j < 201; ++j)
		for(int k = 0; k < 4; ++k)
			for(int l = 0; l < 4; ++l)
			dp[i][j][k][l] = {-1, -1};
	
	dp[0][0][0][0] = {0,0};
	for(int sc = 0; sc <= 23; ++sc)
	{
		for(int i = sc; i < 201; ++i)
		for(int j = 25; j < 201; ++j)
			for(int k = 0; k <= 2; ++k)
				for(int l = 1; l <= 3 && k + l <= 4; ++l)
					if(dp[i-sc][j-25][k][l-1].fst >= 0)
						dp[i][j][k][l] = {sc, 25};
	}
	remisy();
	for(int sc = 0; sc <= 23; ++sc)
	{
		for(int i = 25; i < 201; ++i)
		for(int j = sc; j < 201; ++j)
			for(int k = 1; k <= 3; ++k)
				for(int l = 0; l <= 2 && k + l <= 4; ++l)
					if(dp[i-25][j-sc][k-1][l].fst >= 0)
						dp[i][j][k][l] = {25, sc};
	}
	
	remisy();
	
	for(int sc = 0; sc <= 23; ++sc)
	{
		for(int i = sc; i < 201; ++i)
		for(int j = 25; j < 201; ++j)
			for(int k = 0; k <= 2; ++k)
				for(int l = 1; l <= 3 && k + l <= 4; ++l)
					if(dp[i-sc][j-25][k][l-1].fst >= 0)
						dp[i][j][k][l] = {sc, 25};
	}
	remisy();
	
	for(int sc = 0; sc <= 13; ++sc)
	{
		for(int i = sc; i < 201; ++i)
		for(int j = 15; j < 201; ++j)
			if(dp[i-sc][j-15][2][2].fst >= 0)
				dp[i][j][2][3] = {sc, 15};
	}
	remisy();
	for(int sc = 0; sc <= 13; ++sc)
	{
		for(int i = 15; i < 201; ++i)
		for(int j = sc; j < 201; ++j)
			if(dp[i-15][j-sc][2][2].fst >= 0)
				dp[i][j][3][2] = {15, sc};
	}
	remisy();
	
	
}
void solve()
{
	int a, b;
	scanf("%d%d", &a, &b);
	Pii best = {-100, -10};
	for(int i = 0; i < 4; ++i)
	for(int j = 0; j < 4; ++j)
	{
		if(dp[a][b][i][j].fst >= 0)
		{
			if(max(i, j) == 3 && i + j < 6 && best.fst - best.snd < i - j)
				best = {i,j};
		}
	}
	if(best.fst == -100)
		puts("Impossible");
	else
	{
		printf("%d:%d\n", best.fst, best.snd);
		int i = best.fst;
		int j = best.snd;
		vpii dup;
		while(max(a,b) > 0)
		{
			Pii res = dp[a][b][i][j];
			dup.pb(res);
			if(res.fst > res.snd)
				--i;
			else
				--j;
			a -= res.fst;
			b -= res.snd;
		}
		dup = vpii(dup.rbegin(), dup.rend());
		for(Pii p : dup)
			printf("%d:%d ", p.fst, p.snd);
		puts("");
	}
}
int main()
{
	init();
	scanf("%d", &m);
	
	while(m--)
		solve();
	
}
