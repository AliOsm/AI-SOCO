#include <bits/stdc++.h>

#define int long long

using namespace std;

int lg[500001];
int a[500001];
int INF = 1e18;
int n, s, q;
int dmax[41][300001];
int t[400001];
int dmin[41][300001];
               
void upd (int pos, int val, int v = 1, int tl = 0, int tr = n) {
	if (tl == tr) {
		t[v] = val;
		return;
	}
	int tm  = (tl + tr) / 2;
	if (tm >= pos) {
		upd (pos, val, v + v, tl, tm);
	}
	else upd (pos, val, v + v + 1, tm + 1, tr);
	t[v] = min (t[v + v], t[v + v + 1]);
}

int get (int l, int r, int v = 1, int tl = 0, int tr = n) {
	if (tr < l || tl > r || l > r) return INF;
	if (tl >= l && tr <= r) return t[v];
	int tm = (tl + tr) / 2;
	return min (get (l, r, v + v, tl, tm), get (l, r, v + v + 1, tm + 1, tr)); 
}

 main () {
	cin >> n >> s >> q;
	for (int i = 1;i <= n;i ++) {
		cin >> a[i];
	}
	for (int i = 1;i <= n;i ++) {
		dmin[0][i] = a[i];
	    dmax[0][i] = a[i];
		lg[i] = -1;
	}              
	lg[1] = 0;
	for (int i = 1;i <= n;i ++) {
		if (lg[i] == -1) {
			lg[i] = lg[i - 1];
		}
		else lg[i * 2] = lg[i] + 1;
	}
	for (int i = 1;i <= 20;i ++) {
		for (int j = 1;j <= n;j ++) {
			dmin[i][j] = min (dmin[i - 1][j], dmin[i - 1][j + (1 << i - 1)]);
			dmax[i][j] = max (dmax[i - 1][j], dmax[i - 1][j + (1 << i - 1)]);
		}
	}
	for (int i = 1;i <= n;i ++) {
		upd (i, INF); 
	}  
	upd (0, 0);
	int l = 1;
	for (int i = 1;i <= n;i ++) {
		while (1) {  
			int r = i;
			int Lg = lg[r - l + 1];
			int ans = min (dmin[Lg][l], dmin[Lg][r - (1 << Lg) + 1]);
			int ans1 = max (dmax[Lg][l], dmax[Lg][r - (1 << Lg) + 1]);
			if (ans1 - ans <= s) break;
			l ++;	
		}
		int len = i - l + 1;
		if (len < q) continue;                          
		int cur = get (max (0ll, i - len), i - q ) + 1;
	//	cout << i << ' ' << l << ' ' << "asd " << len << endl;
	//	cout << i - len << ' ' << i - q  << ' ' << endl;;
		upd (i, cur);
	}          
	if (get (n , n) >= INF || get (n, n) < 0) cout << -1;
	else cout << get (n, n);
	return 0;
}