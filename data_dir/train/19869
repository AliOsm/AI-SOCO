#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <iomanip>
#include <queue>
#include <ctime>
using namespace std;

template <typename T>
T next_int() {  
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;
}

const int max_n = (int)1e3 + 227 + 1;
const int max_int = (int)1e9 + 227 + 1;

queue<pair<pair<int, int>, pair<int, int> > > q;

char a[4][max_n][max_n];
int kek[500];
bool used[max_n][max_n][4];

int main() {
	int n = next_int<int>();
	int m = next_int<int>();

	for(int i = 0; i < n; i++) {
		cin >> a[0][i];
	}

	kek['|'] = 4 + 8;
	kek['-'] = 1 + 2;

	kek['+'] = 1 + 2 + 4 + 8;

	kek['>'] = 2;
	kek['<'] = 1;
	kek['^'] = 4;
	kek['v'] = 8;

	kek['U'] = 1 + 2 + 8;
	kek['D'] = 1 + 2 + 4;
	kek['L'] = 2 + 4 + 8;
	kek['R'] = 1 + 4 + 8;

	for(int k = 0; k < 3; k++) {
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(a[k][i][j] == '-') {
					a[k + 1][i][j] = '|';
				} else 
				if(a[k][i][j] == '|') {
					a[k + 1][i][j] = '-';
				} else 
				if(a[k][i][j] == '>') {
					a[k + 1][i][j] = 'v';
				} else
				if(a[k][i][j] == 'v') {
					a[k + 1][i][j] = '<';
				} else 
				if(a[k][i][j] == '<') {
					a[k + 1][i][j] = '^';
				} else 
				if(a[k][i][j] == '^') {
					a[k + 1][i][j] = '>';
				} else 
				if(a[k][i][j] == 'U') {
					a[k + 1][i][j] = 'R';
				} else 
				if(a[k][i][j] == 'R') {
					a[k + 1][i][j] = 'D';
				} else
				if(a[k][i][j] == 'D') {
					a[k + 1][i][j] = 'L';
				} else
				if(a[k][i][j] == 'L') {
					a[k + 1][i][j] = 'U';
				} else a[k + 1][i][j] = a[k][i][j];
			}
		}
	}

	int x_start = next_int<int>() - 1;
	int y_start = next_int<int>() - 1;

	int x_finish = next_int<int>() - 1;
	int y_finish = next_int<int>() - 1;
	
	q.push(make_pair(make_pair(0, 0), make_pair(x_start, y_start)));

	while(q.size()) {
		int c = -q.front().first.first;
		int type = q.front().first.second;
		int x = q.front().second.first;
		int y = q.front().second.second;
		q.pop();

		if(used[x][y][type]) continue;
		used[x][y][type] = 1;
		
		if(x == x_finish && y == y_finish) {
			cout << c << "\n";
			return 0;
		}

		q.push(make_pair(make_pair(-(c + 1), (type + 1) % 4), make_pair(x, y)));

		if(x && (kek[a[type][x][y]] & 4) && (kek[a[type][x - 1][y]] & 8)) {
			q.push(make_pair(make_pair(-(c + 1), type), make_pair(x - 1, y)));
		}
		if(x + 1 < n && (kek[a[type][x][y]] & 8) && (kek[a[type][x + 1][y]] & 4)) {
			q.push(make_pair(make_pair(-(c + 1), type), make_pair(x + 1, y)));
		}
		
		if(y && (kek[a[type][x][y]] & 1) && (kek[a[type][x][y - 1]] & 2)) {
			q.push(make_pair(make_pair(-(c + 1), type), make_pair(x, y - 1)));
		}
		if(y + 1 < m && (kek[a[type][x][y]] & 2) && (kek[a[type][x][y + 1]] & 1)) {
			q.push(make_pair(make_pair(-(c + 1), type), make_pair(x, y + 1)));
		}
	}

	puts("-1");
}
