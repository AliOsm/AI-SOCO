#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <string>
#include <cstring>
// DON'T DIVIDE
// Try different approaches
using namespace std;

int n, m, s;
const int MAXN = 5005;
vector<int> adj[MAXN];
int par[MAXN];
set<int> ans;

void dfs(int idx, int p)
{
	if(par[idx] == p)
		return;
	par[idx] = p;
	for(int i = 0; i < adj[idx].size(); i++)
		if(adj[idx][i] != s)
			dfs(adj[idx][i], p);
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> n >> m >> s;

	for(int i = 0; i < m; i++)
	{
		int u, v;
		cin >> u >> v;
		adj[u].push_back(v);
	}

	for(int i = 1; i <= n; i++)
		if(!par[i])
			dfs(i, i);
	for(int i = 1; i <= n; i++)
		ans.insert(par[i]);

	cout << ans.size() - 1 << "\n";
	return 0;
}