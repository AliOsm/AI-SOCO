
// ~/BAU/ACM-ICPC/Teams/Rampage/Corvus
// ~/sudo apt-get verdict Accpeted

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <memory.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <bitset>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const int N = 1005;
const ll MOD = 1e9 + 7;
const double eps = 1e-9;

char l[N];
int n, c, p[N], val[N];
map<string, int> m;
vector<vector<int> > g;

int ans;
multiset<int> dfs(int u, int p) {
	multiset<int> s, t;
	for (int i = 0; i < g[u].size(); i++)
		if (g[u][i] != p) {
			t = dfs(g[u][i], u);
			for (auto it = t.begin(); it != t.end(); it++)
				s.insert(*it);
		}
	ans += s.count(val[u]);
	s.insert(val[u]);
	return s;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif

	scanf("%s", l);
	n = strlen(l);

	string s = "";
	int u = -1, c2 = 0;
	for (int i = 0; i < n; i++) {
		if (l[i] >= 'A' && l[i] <= 'Z') s += l[i];
		else if(!s.empty()) {
			if (m.find(s) == m.end()) m[s] = c++;
			int v = c2++;
			val[v] = m[s];
			p[v] = u;
			u = v;
			s = "";
			if (l[i] == '.') u = p[u];
		}
		else if (l[i] == '.') u = p[u];
	}
	
	g.resize(c2);
	for (int i = 1; i < c2; i++) {
		g[i].push_back(p[i]);
		g[p[i]].push_back(i);
	}
	dfs(0, -1);
	printf("%d\n", ans);
	return 0; 
}