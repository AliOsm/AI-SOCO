//#include <cstdio>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
//#include <queue>
//#include <stack>
#include <cstring>
#include <cassert>

using namespace std;

#ifdef LOCAL_DEBUG
#include <local_debug.h>
#define DEBUG(x...) cerr << __LINE__ << ": " << #x << " = "; DBG::_print(x)
#else
#define DEBUG(x...)
#endif

#define SZ(a) int((a).size())
#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

typedef long long llong;
typedef vector<int> VI;
typedef vector<VI> VVI;

#define MAXN 100004
int N;
char S[MAXN];
int DP[MAXN][2][3];
// 0 = not flipped
// 1 = flipped
// 2 = flip ended

const int INF = 1e9;

int max_upd(int& a, int b) {
   return a = max(a, b);
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(nullptr);

   cin >> N;
   cin >> S;

   FOR(n, 0, N) {
      FOR(b, 0, 1)
         FOR(c, 0, 2)
            DP[n][b][c] = -INF;
   }

   DP[0][0][0] = DP[0][1][0] = 0;

   FOR(n, 0, N-1) {
      int s = S[n]-'0';

      // do not flip
      FOR(b, 0, 1)  {
         if (DP[n][b][0] >= 0) {
            if (b != s)
               max_upd(DP[n+1][b^1][0], DP[n][b][0]+1);
            else
               max_upd(DP[n+1][b][0], DP[n][b][0]);
         }
         if (DP[n][b][1] >= 0) {
            if (b == s)
               max_upd(DP[n+1][b^1][1], DP[n][b][1]+1);
            else
               max_upd(DP[n+1][b][1], DP[n][b][1]);
         }
         if (DP[n][b][2] >= 0) {
            if (b != s)
               max_upd(DP[n+1][b^1][2], DP[n][b][2]+1);
            else
               max_upd(DP[n+1][b][2], DP[n][b][2]);
         }
      }
      
      // flip
      FOR(b, 0, 1)  {
         if (DP[n][b][0] >= 0) {
            if (b == s)
               max_upd(DP[n+1][b^1][1], DP[n][b][0]+1);
            else
               max_upd(DP[n+1][b][1], DP[n][b][0]);
         }
         if (DP[n][b][1] >= 0) {
            if (b != s)
               max_upd(DP[n+1][b^1][2], DP[n][b][1]+1);
            else
               max_upd(DP[n+1][b][2], DP[n][b][1]);
         }
      }
   }
   
   int res = 0;
   FOR(b, 0, 1)
      FOR(c, 0, 2)
         max_upd(res, DP[N][b][c]);

   cout << res << '\n';

   return 0;
}
