#include <bits/stdc++.h>
using namespace std;

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<ll,ll> pii;
typedef pair<pii, ll> para;
const ll inf = 1e9 + 7;
const ll maxN = 1e6 + 5;
const ll MOD = 998244353;

int n, m, a, b;
bool used[maxN];
int discover[maxN], level[maxN], endTime[maxN], arr[maxN], antiDiscover[maxN];
vi graph[maxN];
int t[maxN][2];

int DFS(int start, int time, int lev) {
	used[start] = true;
	discover[start] = time;
	antiDiscover[time] = start;
	level[start] = lev;
	for (auto v: graph[start]) {
		if (!used[v]) {
			time = DFS(v, time + 1, (lev + 1) % 2);
		}
	}
	endTime[start] = time;
	return time;
}

void build(int a[], int v, int tl, int tr) {
    if (tl == tr) {
		//
		// cout << tl << " " << a[discover[tl]] << endl;
        t[v][0] = t[v][1] = a[antiDiscover[tl]];
    } else {
        int tm = (tl + tr) / 2;
        build(a, v*2, tl, tm);
        build(a, v*2+1, tm+1, tr);
        t[v][0] = t[v][1] = 0;
    }
}

void update(int v, int tl, int tr, int l, int r, int add, int lev) {
    if (l > r)
        return;
    if (l == tl && r == tr) {
        t[v][lev] += add;
        t[v][1 - lev] -= add;
    } else {
        int tm = (tl + tr) / 2;
        update(v*2, tl, tm, l, min(r, tm), add, lev);
        update(v*2+1, tm+1, tr, max(l, tm+1), r, add, lev);
    }
}

int get(int v, int tl, int tr, int pos, int lev) {
    if (tl == tr)
        return t[v][lev];
    int tm = (tl + tr) / 2;
    if (pos <= tm)
        return t[v][lev] + get(v*2, tl, tm, pos, lev);
    else
        return t[v][lev] + get(v*2+1, tm+1, tr, pos, lev);
}

int main() {
	ios_base::sync_with_stdio(0);
	cin >> n >> m;
	RI(i, n) cin >> arr[i];
	REP(i, n - 1) {
		cin >> a >> b;
		graph[a].pb(b);
		graph[b].pb(a);
	}
	DFS(1, 1, 0);
	build(arr, 1, 1, n);

	REP(_, m){
		int k, x, val;
		cin >> k >> x;
		if (k == 1) {
			cin >> val;
			update(1, 1, n, discover[x], endTime[x], val, level[x]);
		} else {
			cout << get(1, 1, n, discover[x], level[x]) << endl;
		}
	}
	return 0;
}
