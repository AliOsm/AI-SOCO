#include <iostream>
#include <map>
#include <vector>
#include <set>
#include <algorithm>
#include <cmath>
#include <assert.h>
#include <queue>
using namespace std;

#define all(a) (a).begin(), (a).end()

const int MOD = 998244353;

long long binPow(int n, int k) {
    if (k == 0) {
        return 1;
    }

    long long ans = binPow(n, k / 2);
    ans = ans * ans % MOD;

    if (k % 2) {
        ans = ans * n % MOD;
    }

    return ans;
}

vector<long long> fact;
vector<long long> rev_fact;

long long C(int n, int k) {
    return (fact[n] * 1LL * rev_fact[k] % MOD * 1LL * rev_fact[n - k]) % MOD;
}

int main() {
    // freopen("in.txt", "rt", stdin);
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    int n;
    cin >> n;

    vector<int> a(n);
    map<int, int> last_pos;
    for (int i = 0; i < n; ++i) {
        cin >> a[i];

        last_pos[a[i]] = i;
    }

    vector<pair<int, int> > segments;
    for (int l = 0; l < n; ) {
        int left = l;

        int right = l;
        while (l <= right) {
            right = max(right, last_pos[a[l]]);
            ++l;
        }

        segments.push_back({left, right});
    }

    fact.push_back(1);
    for (int i = 0; i <= segments.size(); ++i) {
        fact.push_back((i + 1) * fact[i] % MOD);
        rev_fact.push_back(binPow(fact[i], MOD - 2));
    }

    long long ans = 0;
    for (int i = 0; i < segments.size(); ++i) {
        (ans += C(segments.size() - 1, i)) %= MOD;
    }

    cout << ans << "\n";
}
