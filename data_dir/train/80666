// KALAM

# include <bits/stdc++.h>

using namespace std;

const int N = 1000000 + 1;
int n;
vector < int > a[N] , V[N];
pair < int , int > dp[N];
void dfs(int v , int prev){
	for(int u : a[v]){
		if(u == prev){continue;}
		dfs(u , v);
	}
	for(int u : a[v]){
		if(u == prev){continue;}
		if(V[u].size() > V[v].size()){
			V[v].swap(V[u]);
		}
		int t = V[v].size(); t --;
		while(V[u].size()){
			V[v][t] += V[u].back();
			if(dp[v].second < V[v][t] || ((dp[v].second == V[v][t]) && (dp[v].first > (int)V[v].size() - t))){
				dp[v] = make_pair((int)V[v].size() - t  , V[v][t]);
			}
			V[u].pop_back();
			t --;
		}
		if(dp[v].second < dp[u].second || ((dp[v].second == dp[u].second) && (dp[v].first > dp[u].first + 1))){
			dp[v] = dp[u];
			dp[v].first ++;
		}
	}
	V[v].push_back(1);
	if(dp[v].second <= 1){
		dp[v] = make_pair(0 , 1);
	}
	
}
int main(){	
	scanf("%d" , & n);
	for(int i = 1;i < n;i++){
		int v , u;scanf("%d %d" , & v , & u);
		a[v].push_back(u);
		a[u].push_back(v);
	}
	dfs(1 , 1);
	for(int i = 1;i <= n;i++){
		printf("%d\n" , dp[i].first);
	}
	return 0;
}
