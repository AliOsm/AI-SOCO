#include <bits/stdc++.h>

using namespace std;

const int mx = 500010;

int arr[mx];
int tree[4*mx];

int gcd(int a , int b)
{
    if(a%b == 0)
    {
        return b;
    }
    return gcd(b,a%b);
}

void buildtree(int l , int r , int p)
{
    if(l == r)
    {
        tree[p] = arr[l];
        return;
    }
    int lc , rc , m = (l+r)/2;
    lc = 2*p;
    rc = lc+1;
    buildtree(l,m,lc);
    buildtree(m+1,r,rc);

    tree[p] = gcd(tree[lc],tree[rc]);
}
void update(int l , int r ,int p , int idx , int v)
{

    if(idx < l || idx > r)
    {
        return;
    }
    if(l == r)
    {
        tree[p] = v;
        return;
    }
    int lc , rc , m = (l+r)/2;
    lc = 2*p;
    rc = 2*p + 1;
    update(l,m,lc,idx,v);
    update(m+1,r,rc,idx,v);
    tree[p] = gcd(tree[lc],tree[rc]);
}
int query(int l , int r , int p , int left , int right , int g)
{
    if(l > right || r < left)
    {
        return 0;
    }

    int k = 5, lc , rc , m = (l+r)/2;
    lc = 2*p;
    rc = lc + 1;
    if(l >= left && r <= right)
    {
        if(tree[p]%g == 0)
        {
            return 0;
        }
        if(l == r)
        {
            return 1;
        }
        if(tree[rc]%g == 0)
        {
            k = query(l,m,lc,left,right,g);
        }
        else if(tree[lc]%g == 0)
        {
            k = query(m+1,r,rc,left,right,g);
        }
        return k;
    }

    int a , b;
    a = query(l,m,lc,left,right,g);
    if(a <= 1)
    b = query(m+1,r,rc,left,right,g);
    else b = 5;

    return a+b;

}


int main()
{
    int i , j , k , n , m , ty , l , r , p , q , v;
    scanf("%d",&n);

    for(i = 1 ; i <= n; i++)
    {
        scanf("%d",arr+i);
    }

    buildtree(1,n,1);

    scanf("%d",&m);
    while(m--)
    {
        scanf("%d",&ty);
        if(ty == 2)
        {
            scanf("%d %d",&l,&k);
            update(1,n,1,l,k);
        }
        else
        {
            scanf("%d %d %d",&l,&r,&v);
            p  = query(1,n,1,l,r,v);
            if(p <= 1)
            {
                printf("YES\n");
            }
            else
            {
                printf("NO\n");
            }
        }
    }


    return 0;
}
