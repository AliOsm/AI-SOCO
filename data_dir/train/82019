#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
constexpr int inf = 0x3f3f3f3f;
constexpr double EPS = 1e-15;
constexpr double PI = atan(1) * 4;

template <typename T> inline bool chmax(T& x, T y) {return x < y ? x = y, 1 : 0;}
template <typename T> inline bool chmin(T& x, T y) {return x > y ? x = y, 1 : 0;}
inline int LSB(int i) {return (i & -i);}

/*
    - Read carefully
    - Look for patterns/observations
    - Think backwards
*/

constexpr int maxn = 2e5+5;

int n, q, depth[maxn], vis[maxn];
string res[maxn];
vector <int> adj[maxn];
vector <vector<int>> query[maxn];
vector <int> idx[maxn];

void dfs(int node = 1, int par = -1){
    for (auto it : adj[node]){
        if (it == par) continue;
        depth[it] = depth[node] + 1;
        dfs(it, node);
    }
}

void solve(int node = 1, int par = -1){
    for (auto it : adj[node]){
        if (it == par) continue;
        vis[it] = true;
    }

    for (auto it : adj[node]){
        if (it == par) continue;
        solve(it, node);
    }

//    printf("At node %d\n", node);
//    for (int i = 1; i <= n; i++){
//        if (vis[i])
//        printf("Node %d is true\n", i);
//    }

    for (int i = 0; i < query[node].size(); i++){
        bool good = true;
        for (auto y : query[node][i]){
            if (!vis[y]){
                good = false;
                break;
            }
        }

        if (good){
            res[idx[node][i]] = "YES";
        }
        else res[idx[node][i]] = "NO";
    }

    for (auto it : adj[node]){
        if (it == par) continue;
        vis[it] = false;
    }
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> q;
    for (int i = 1, a, b; i < n; i++){
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }

    dfs();
    vector <int> tmp;
    for (int i = 1, x; i <= q; i++){
        cin >> x;
        tmp.clear();
        int deep = -1, ind = -1;
        for (int j = 0, y; j < x; j++){
            cin >> y;
            tmp.push_back(y);
            if (chmax(deep, depth[y])) ind = y;
        }

        idx[ind].push_back(i);
        query[ind].push_back(tmp);
    }

    vis[1] = true;
    solve();
    for (int i = 1; i <= q; i++) printf("%s\n", res[i].c_str());
    return 0;
}
