#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int,int>
#define mp make_pair
#define PI 3.14159265358979
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned
using namespace std;
vector <pair<int,int> > s[5010];
int a[5010];
vector<vector<pair<int, pnt > > > g;
int was[5010];
pair<pnt,int> used[5010];
int cnt;
int res[5010];
void dfs(int v)
{
        was[v]=1;
        FOR(i,0,g[v].size())
        {
                int to=g[v][i].first;
                if (was[to]==0)
                {
                        g[v][i].second.second=1;
                        used[cnt]=mp(mp(to,v),g[v][i].second.first);
                        cnt++;
                        dfs(to);
                }
        }
}
int main()
{
        //freopen("in.txt","r",stdin);
        int n;
        scanf("%d",&n);
        g.resize(n);
        FOR(i,0,n)
                scanf("%d",&a[i]);
        FOR(i,0,n-1)
        {
                int u,v,c;
                scanf("%d%d%d",&u,&v,&c);
                u--;
                v--;
                g[u].push_back(mp(v,mp(c,0)));
                g[v].push_back(mp(u,mp(c,0)));
        }
        cnt=0;
        dfs(0);
        FOR(i,0,n)
                s[i].push_back(mp(-a[i],i));
        int t=1;
        while (1)
        {
                if (s[0].size()==n)
                        break;
                FOR(i,0,cnt)
                {
                        int from=used[i].first.first;
                        int to=used[i].first.second;
                        int cap=used[i].second;
                                                sort(s[from].begin(),s[from].end());
                        while ((cap>0) && (s[from].size()>0))
                        {
                                cap--;
                                int num=s[from].back().first;
                                int v=s[from].back().second;
                                s[to].push_back(mp(num,v));
                                if (to==0)
                                        res[v]=t;
                                s[from].pop_back();
                        }
                }
                t++;
        }
        FOR(i,0,n)
        {
                if (i)
                        printf(" ");
                printf("%d",res[i]);
        }
        printf("\n");
        return 0;
}