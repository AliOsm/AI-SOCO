#include <bits/stdc++.h>
using namespace std;




class Solution {
  
  int n;
  vector<int> front_dp, back_dp;
  vector<int> A;
  int ans;

  void input() {
    cin >> n;
    A.resize(n);
    for (int i = 0; i < n; ++i) {
      cin >> A[i];
    }
  }

  void init() {
    front_dp.assign(n, 1);
    for (int i = 1; i < n; ++i) {
      front_dp[i] = A[i - 1] < A[i] ? front_dp[i - 1] + 1 : 1;
    }
    back_dp.assign(n, 1);
    for (int i = n - 2; i >= 0; --i) {
      back_dp[i] = A[i] < A[i + 1] ? back_dp[i + 1] + 1 : 1;
    }
  }

  void solve() {
    ans = max(*max_element(front_dp.begin(), front_dp.end()),
              *max_element(back_dp.begin(), back_dp.end()));
    for (int i = 1; i + 1 < n; ++i) {
      if (A[i - 1] < A[i + 1]) {
        ans = max(front_dp[i - 1] + back_dp[i + 1], ans);
      }
    }
  }
  
  void output() {
    cout << ans << '\n';
  }
  
public:
  
  Solution() {
  }

  void run() {
    input();
    init();
    solve();
    output();
  }
};

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);

  Solution().run();
}

