#include <bits/stdc++.h>
#define fst first
#define snd second
#define fore(i,a,b) for(int i=a,ThxDem=b;i<ThxDem;++i)
#define pb push_back
#define ALL(s) s.begin(),s.end()
#define FIN ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define SZ(s) int(s.size())
using namespace std;
typedef long long ll;
typedef pair<int,int> ii;

const int K=18;
vector<int> g[1<<K];int n;  // K such that 2^K>=n
int F[K][1<<K],D[1<<K];
void lca_dfs(int x){
	fore(i,0,g[x].size()){
		int y=g[x][i];if(y==F[0][x])continue;
		F[0][y]=x;D[y]=D[x]+1;lca_dfs(y);
	}
}
void lca_init(){
	D[0]=0;F[0][0]=-1;
	lca_dfs(0);
	fore(k,1,K)fore(x,0,n)
		if(F[k-1][x]<0)F[k][x]=-1;
		else F[k][x]=F[k-1][F[k-1][x]];
}
int lca(int x, int y){
	if(D[x]<D[y])swap(x,y);
	for(int k=K-1;k>=0;--k)if(D[x]-(1<<k)>=D[y])x=F[k][x];
	if(x==y)return x;
	for(int k=K-1;k>=0;--k)if(F[k][x]!=F[k][y])x=F[k][x],y=F[k][y];
	return F[0][x];
}

int v[1<<K];
map<ii,int> mp;

int dfs(int pos, int par, vector<int> &ans){
	for(auto x:g[pos]) if(x!=par){
		int go=dfs(x,pos,ans);
		v[pos]+=go;
		ans[mp[{pos,x}]]=go;
	}
	return v[pos];
}

int main(){FIN;
	cin >> n;
	fore(i,1,n){
		int x,y; cin >> x >> y; x--; y--;
		g[x].pb(y); g[y].pb(x); mp[{x,y}]=mp[{y,x}]=i-1;
	}
	vector<int> ans(n-1);
	lca_init();
	int k; cin >> k;
	while(k--){
		int x,y; cin >> x >> y; x--; y--;
		int l=lca(x,y);
		v[x]++; v[y]++; v[l]-=2;
	}
	dfs(0,-1,ans);
	for(auto x:ans) cout << x << " "; cout << "\n";
}
