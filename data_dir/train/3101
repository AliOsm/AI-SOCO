#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int maxn=2e5+7;
const int inf=INT_MAX;
const ll inff=1e18;
const ll mod=1e9+7;
#define pii pair<int,int>
#define mkp make_pair
#define F first
#define S second
#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
//#define int ll
//#define endl '\n'

int n,m;
int mask[25];
int connected[5000000];

int32_t main()
{
    scanf("%d%d",&n,&m);
    int x,y;
    for (int i=1;i<=m;i++)
    {
        scanf("%d%d",&x,&y);
        mask[x-1]=(mask[x-1]|(1<<(y-1)));
        mask[y-1]=(mask[y-1]|(1<<(x-1)));
    }
    for (int i=0;i<n;i++)
    {
        mask[i]|=(1<<i);
        connected[(1<<i)]=1;
    }
    int ans=0,p=90;
    const int N=(1<<n)-1;
    int tmp=0,cnt=90;
    vector<int> v;
    for (int i=0;i<=N;i++)
    {
        if (connected[i]==0) continue;
        tmp=0;
        for (int j=0;j<n;j++)
        {
            if ((1<<j)&i)
            {
                tmp|=mask[j];
            }
        }
        for (int j=0;j<n;j++)
        {
            if ((1<<j)&tmp)
            {
                connected[i|(1<<j)]=1;
            }
        }
    }

    for (int i=0;i<=N;i++)
    {
        tmp=0;
        cnt=0;
        for (int j=0;j<n;j++)
        {
            if ((1<<j)&i)
            {
                tmp=(tmp|mask[j]);
                cnt++;
            }
        }
        if (tmp==N&&cnt<p&&connected[i]) p=cnt,ans=i;
    }
    int ok=1;
    for (int i=0;i<n;i++)
    {
        if (mask[i]!=N) ok=0;
    }
    if (ok) return cout<<0<<endl,0;
    cout<<p<<'\n';
    for (int i=0;i<n;i++)
    {
        if ((1<<i)&ans) cout<<i+1<<' ';
    }
}

