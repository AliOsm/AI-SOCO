#include <bits/stdc++.h>
using namespace std;

const int M = 1e9 + 7;
const int MAXN = 1e6;

int ipow(int v, int p, int m) {
  int r = 1;
  for (int i = p; i; i >>= 1) {
    if (i & 1) r = 1LL * r * v % m;
    v = 1LL * v * v % m;
  }
  return r;
}

int fac[MAXN + 1], ifac[MAXN + 1];

int f(const string &a, const string &s) {
  vector<int> cnt(26);
  for (char c : a) ++cnt[c - 'a'];
  int res = 0;
  for (int i = 0; i < s.size(); ++i) {
    int t = fac[s.size() - i - 1];
    for (int c = 0; c < 26; ++c) {
      t = 1LL * t * ifac[cnt[c]] % M;
    }
    for (int c = 0; c < s[i] - 'a'; ++c) {
      if (!cnt[c]) continue;
      (res += 1LL * t * cnt[c] % M) %= M;
    }
    if (cnt[s[i] - 'a']) {
      --cnt[s[i] - 'a'];
    } else {
      break;
    }
  }
  return res;
}

signed main() {
  for (int i = fac[0] = ifac[0] = 1; i <= MAXN; ++i) {
    fac[i] = 1LL * fac[i - 1] * i % M;
    ifac[i] = ipow(fac[i], M - 2, M);
  }
  ios::sync_with_stdio(false);
  string A, B;
  cin >> A >> B;
  int ans = (f(A, B) - f(A, A) - 1) % M;
  if (ans < 0) ans += M;
  cout << ans << endl;
  return 0;
}
