#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>

#define Nmax 1000005
#define INF 1000000000
#define MOD 1000000007
 
using namespace std;
 
int main()
{
    int t;
    #ifndef ONLINE_JUDGE
        freopen ("data.in","r",stdin);
        freopen ("DD.out","w",stdout);
    #endif
    cin.sync_with_stdio( false );
    cin >> t;
    while(t--) {
        int nr, ng, nb;
        cin >> nr >> ng >> nb;
        vector<pair<int, int>> allGems;
        vector<int> gems[3];
        for(int i = 0; i < nr; i++) {
            int x;
            cin >> x;
            allGems.push_back({x, 0});
            gems[0].push_back(x);
        }
        for(int i = 0; i < ng; i++) {
            int x;
            cin >> x;
            allGems.push_back({x, 1});
            gems[1].push_back(x);
        }
        for(int i = 0; i < nb; i++) {
            int x;
            cin >> x;
            allGems.push_back({x, 2});
            gems[2].push_back(x);
        }
        for(int i = 0; i < 3; i++) {
            sort(gems[i].begin(), gems[i].end());
        }
        sort(allGems.begin(), allGems.end());
        vector<int> lastGem(3, -1);
        long long ans = -1;
        for(int i = 0; i < allGems.size(); i++) {
            int color = allGems[i].second;
            int j = min(lastGem[(color + 1) % 3], lastGem[(color + 2) % 3]);
            if(j > -1) {
                int x = allGems[j].first;
                int z = allGems[i].first;
                int y_color = 3 - allGems[j].second - color;
                int y;
                int p = lower_bound(gems[y_color].begin(), gems[y_color].end(), (x + z) / 2) - gems[y_color].begin();
                if(p == gems[y_color].size()) {
                    y = (*(--gems[y_color].end()));
                }
                else {
                    if(p == 0) {
                        y = (*gems[y_color].begin());
                    }
                    else {
                        int y1 = gems[y_color][p];
                        int y2 = gems[y_color][p - 1];
                        //cout << y1 << " --- " << y2 << "\n";
                        if(y1 - (x + z) / 2 <= (x + z) / 2 - y2) {
                            y = y1;
                        }
                        else {
                            y = y2;
                        }
                    }
                }
                //cout << x << " " << y << " " << z <<"\n";
                long long val = (1LL * (x - z) * (x - z)) + (1LL * (x - y) * (x - y)) + (1LL * (y - z) * (y - z));
                if(ans == -1 || ans > val) {
                    ans = val;
                }
            }
            lastGem[color] = i;
        }
        cout << ans << "\n";
    }
    return 0;
}