#include <iostream>
#include <stdio.h>
#include <string>
#include <memory.h>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <time.h>
#include <assert.h>
#include <cmath>
#include <stack>
#include <string.h>
#include <sstream>
#include <algorithm>
using namespace std;
typedef long long ll;
const int N = 2e5 + 1;
int n;
vector<vector<int> > g;
int dp[N][2];
vector<int> sol;
int calc(int u, int p, int s) {
	int &ret = dp[u][s];
	if (ret != -1)
		return ret;
	ret = 0;
	int ch = g[u].size() - (p != -1) + s;
	int can[4] = {};
	for (int i = 0; i < g[u].size(); ++i) {
		if (g[u][i] == p)
			continue;
		int cur = 0;
		if (calc(g[u][i], u, 0)) {
			cur |= 1;
			++can[1];
		}
		if (calc(g[u][i], u, 1)) {
			cur |= 2;
			++can[2];
		}
		if (cur == 3)
			++can[3];
	}
	ch -= can[2];
	if (ch % 2 == 0) {
		return ret = true;
	}
	if (can[3]) {
		return ret = true;
	}
	return ret;
}
void print(int u, int p, int s) {
	const int &ret = dp[u][s];
	int ch = g[u].size() - (p != -1) + s;
	int can[4] = {};
	for (int i = 0; i < g[u].size(); ++i) {
		if (g[u][i] == p)
			continue;
		int cur = 0;
		if (calc(g[u][i], u, 0)) {
			cur |= 1;
			++can[1];
		}
		if (calc(g[u][i], u, 1)) {
			cur |= 2;
			++can[2];
		}
		if (cur == 3)
			++can[3];
	}
	ch -= can[2];
	if (ch % 2 == 0) {
		for (int i = 0; i < g[u].size(); ++i)
			if (g[u][i] != p) {
				if (calc(g[u][i], u, 1))
					print(g[u][i], u, 1);
			}
		sol.push_back(u);
		for (int i = 0; i < g[u].size(); ++i)
			if (g[u][i] != p) {
				if (!calc(g[u][i], u, 1))
					print(g[u][i], u, 0);
			}
		return;
	}
	if (can[3]) {
		bool need = true;
		int later = -1;
		for (int i = 0; i < g[u].size(); ++i)
			if (g[u][i] != p) {
				if (calc(g[u][i], u, 1)) {
					if (need && calc(g[u][i], u, 0)) {
						need = false;
						later = g[u][i];
						continue;
					}
					print(g[u][i], u, 1);
				}
			}
		sol.push_back(u);
		for (int i = 0; i < g[u].size(); ++i)
			if (g[u][i] != p) {
				if (!calc(g[u][i], u, 1))
					print(g[u][i], u, 0);
			}
		print(later, u, 0);
		return;
	}
	assert(false);
}
int main()
{
	scanf("%d", &n);
	g.resize(n);
	for (int i = 0, p; i < n; ++i) {
		scanf("%d", &p);
		if (!p)
			continue;
		--p;
		g[p].push_back(i);
		g[i].push_back(p);
	}
	memset(dp, -1, sizeof(dp));
	bool ret = calc(0, -1, 0);
	if (!ret) {
		puts("NO");
		return 0;
	}
	puts("YES");
	print(0, -1, 0);
	for (auto x : sol)
		printf("%d\n", x + 1);
	return 0;
}