#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
typedef long long       ll;
#define all(A)          A.begin(),A.end()
#define rall(A)         A.rbegin(),A.rend()
#define SP              setprecision
#define mem(A,B)        memset(A,B,sizeof A)
#define sorta(A)        sort(all(A))
#define sortd(A)        sort(rall(A))
#define sortf(A,F)      sort(all(A),F)
#define Get(mask,bit)   (mask&(1LL<<bit))
#define Set(mask,bit)   (mask|(1LL<<bit))
#define Reset(mask,bit) (mask&(~(1LL<<bit)))
#define Flib(mask,bit)  (mask^(1LL<<bit))
#define LowOn(mask,bit) (mask&-mask)
#define PI              (acos(0.) * 2)
#define exp             2.71828182845904523536028747135266249775724709369995
#define eps             .000000001
#define oo              1000000000
#define endl            '\n'
template <class T> inline void remax(T& A, T B){ if (A < B)A = B; }
template <class T> inline void remin(T& A, T B){ if (A > B)A = B; }
string ToString(ll num){ string ret; do{ ret += ((num % 10) + '0'); num /= 10; } while (num); reverse(all(ret)); return ret; }
ll ToNumber(string s){ ll r = 0, p = 1; for (int i = s.size() - 1; i >= 0; --i)r += (s[i] - '0') * p, p *= 10; return r; }
ll Gcd(ll a, ll b){ while (a %= b ^= a ^= b ^= a);  return b; }
ll Power(ll base, ll power){ ll ret = 1; while (power){ if (power & 1)ret *= base; power >>= 1; base *= base; } return ret; }
ll PowerMod(ll base, ll power, ll mod){ if (!power)return 1; if (power & 1)return (base * PowerMod(base, power - 1, mod)) % mod; return PowerMod((base * base) % mod, power >> 1, mod); }
int Log(ll num, ll base){ int ret = 0; while (num){ ++ret; num /= base; } return ret; }
int Count(ll mask){ int ret = 0; while (mask){ if (mask & 1)++ret; mask >>= 1; } return ret; }


int lowp[10000001];
int afactors[10000001];
int bfactors[10000001];
void sieve(){
    for (int i = 2; i <= 10000000; i += 2)lowp[i] = 2;
    for (int i = 3; i < 3162; i += 2)
    if (!lowp[i]){
        lowp[i] = i;
        for (int j = i * i; j <= 10000000; j += i * 2)
        if (!lowp[j])lowp[j] = i;
    }
    for (int i = 3163; i < 10000000; i += 2)
    if (!lowp[i])lowp[i] = i;
}
void factorize(int x, int *factors){
    while (x > 1){
        ++factors[lowp[x]];
        x /= lowp[x];
    }
}
void reduce(int &x, int *factors){
    int tmp = x;
    while (tmp > 1){
        if (factors[lowp[tmp]]){
            x /= lowp[tmp];
            --factors[lowp[tmp]];
        }
        tmp /= lowp[tmp];
    }
}
inline void run(){
    int a[100000];
    int b[100000];
    int n, m;
    scanf("%d%d", &n, &m);
    mem(afactors, 0);
    mem(bfactors, 0);
    for (int i = 0; i < n; ++i){
        scanf("%d", a + i);
        factorize(a[i], afactors);
    }
    for (int i = 0; i < m; ++i){
        scanf("%d", b + i);
        factorize(b[i], bfactors);
    }
    for (int i = 0; i < n; ++i)
        reduce(a[i], bfactors);
    for (int i = 0; i < m; ++i)
        reduce(b[i], afactors);
    printf("%d %d\n", n, m);
    for (int i = 0; i < n; ++i){
        if (i)putchar(' ');
        printf("%d", a[i]);
    }
    puts("");
    for (int i = 0; i < m; ++i){
        if (i)putchar(' ');
        printf("%d", b[i]);
    }
    puts("");
}
int main(){
    FILE *input = stdin;
    FILE *output = stdout;
#ifdef LOCAL
    input = freopen("input.txt", "r", stdin);
    output = freopen("output.txt", "w", stdout);
#endif
    sieve();
    while (!feof(input)){
        run();
#ifdef LOCAL
        puts("");
#else
        break;
#endif
    }
#ifdef LOCAL
    fprintf(output, "\n\nTime: %d ms\n", (int)(clock() * 1000. / CLOCKS_PER_SEC));
#endif
    return 0;
}