// Why am I so dumb? :c
// chrono::system_clock::now().time_since_epoch().count()

//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define mp make_pair

#define all(x) (x).begin(), (x).end()

#define fi first
#define se second

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;   
template<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const int MAXN = (int)1e2 + 5;

map<vector<int>, int> mem;

int a[MAXN], b[MAXN];

int arr[MAXN];

int n;

int bit(int x, int p) {
    return (x >> p) & 1;
}

void solve() {
    scanf("%d", &n);

    for (int i = 1; i <= n; ++i) {
        scanf("%d", &arr[i]);

        for (int j = 0; j < 30; ++j) {
            if (bit(arr[i], j)) {
                if (j < 15) {
                    a[i] += (1 << j);
                }
                else {
                    b[i] += (1 << (j - 15));
                }
            }        
        }
    }

    for (int mask = 0; mask < (1 << 15); ++mask) {
        vector<int> V;

        for (int i = 1; i <= n; ++i) {
            int cur = __builtin_popcount(a[i] ^ mask);
            V.pb(cur);
        }

        mem[V] = mask;
    }

    for (int mask = 0; mask < (1 << 15); ++mask) {
        vector<int> V, T(n);

        for (int i = 1; i <= n; ++i) {
            int cur = __builtin_popcount(b[i] ^ mask);
            V.pb(cur);
        }

        int mx = *max_element(all(V));

        for (int g = mx; g <= 30; ++g) {
            for (int i = 0; i < n; ++i) {
                T[i] = g - V[i];
            }

            auto it = mem.find(T);

            if (it != mem.end()) {
                printf("%d\n", it -> se + (mask << 15));
                return;  
            }
        }
    }

    printf("-1\n");
}

int main() {
    int tt = 1;

    while (tt--) {
        solve();
    }

    return 0;
}
