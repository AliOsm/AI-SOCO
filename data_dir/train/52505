#include <cstdio>
#include <vector>

int const N = 55;
int const INF = 1e9;

int dp[N][N][N];

int main() {
	for (int n = 1; n < N; ++n) {
		for (int m = 1; m < N; ++m) {
			for (int k = 1; k < N; ++k) {
				if (k == 0 || n * m == k) {
					dp[n][m][k] = 0;
				} else {
					dp[n][m][k] = INF;
					for (int n1 = 1; n1 < n; ++n1) {
						int n2 = n - n1;
						for (int k1 = 0; k1 <= k; ++k1) {
							int k2 = k - k1;
							dp[n][m][k] = std::min(dp[n][m][k], dp[n1][m][k1] + dp[n2][m][k2] + m * m);
						}
					}
					for (int m1 = 1; m1 < m; ++m1) {
						int m2 = m - m1;
						for (int k1 = 0; k1 <= k; ++k1) {
							int k2 = k - k1;
							dp[n][m][k] = std::min(dp[n][m][k], dp[n][m1][k1] + dp[n][m2][k2] + n * n);
						}
					}
				}
			}
		}
	}
	int t;
	scanf("%d", &t);
	for (int it = 0; it < t; ++it) {
		int n, m, k;
		scanf("%d%d%d", &n, &m, &k);
		printf("%d\n", dp[n][m][k]);
	}
}