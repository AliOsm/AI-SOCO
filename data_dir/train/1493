#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;
const int di[] = { -1, 0, 1, 0, -1, 1, 1, -1 };
const int dj[] = { 0, 1, 0, -1, -1, 1, -1, 1 };
const ll MOD = 1e9 + 7;
const ll INF = 1e9;
const long double EPS = 1e-9;
#define all(x) x.begin(),x.end()

ll fastPow(ll a, int p, int m) {
	if (p == 0)
		return 1;
	if (p % 2 == 1)
		return (a * fastPow(a, p - 1, m)) % m;
	ll c = fastPow(a, p / 2, m);
	return  (c * c) % m;
}

inline ll modInv(ll x) {
	x %= MOD;
	return fastPow(x, MOD - 2, MOD);
}

ll n, m;
vi s1, s2;

vll mem(1e5 + 5, -1);
ll solve(int idx) {
	if (idx == n) return 0;
	ll& ret = mem[idx];
	if (~ret) return ret;
	ret = 0;

	if (s1[idx] && s2[idx]) {
		if (s1[idx] == s2[idx])
			ret = solve(idx + 1);
		else if (s1[idx] > s2[idx])
			ret = 1;
		else
			ret = 0;
	}
	else if (!s1[idx] && !s2[idx]) {
		ll gt = m * (m - 1) / 2;
		gt %= MOD;
		gt += m * solve(idx + 1);
		gt %= MOD;
		ret = gt * modInv(m * m);
		ret %= MOD;
	}
	else if (!s1[idx]) {
		ll gt = m - s2[idx];
		gt += solve(idx + 1);
		gt %= MOD;
		ret = gt * modInv(m);
		ret %= MOD;
	}
	else {
		ll gt = s1[idx] - 1;
		gt += solve(idx + 1);
		gt %= MOD;
		ret = gt * modInv(m);
		ret %= MOD;
	}

	return ret;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> m;
	s1.resize(n);
	s2.resize(n);
	for (int i = 0; i < n; i++) {
		cin >> s1[i];
	}
	for (int i = 0; i < n; i++) {
		cin >> s2[i];
	}
	cout << solve(0) << endl;
	cin.ignore(), cin.get();
}
