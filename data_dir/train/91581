#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, q;
int p[200200];
vector<int> t[4 * 200200];

ll sum(int n) {
    return n * 1ll * (n - 1) / 2;
}

void merge(vector<int> &a, vector<int> &b, vector<int> &c) {
    c.clear();
    for (int i = 0, j = 0; i < a.size() || j < b.size();) {
        if (i == a.size()) c.pb(b[j++]);
        else if (j == b.size()) c.pb(a[i++]);
        else if (a[i] < b[j]) c.pb(a[i++]);
        else c.pb(b[j++]);
    }
}

void build(int v, int tl, int tr) {
    if (tl == tr) {
        t[v].pb(p[tl]);
    } else {
        int mid = (tl + tr) >> 1;
        build(2 * v, tl, mid);
        build(2 * v + 1, mid + 1, tr);
        merge(t[2 * v], t[2 * v + 1], t[v]);
    }
}

inline int calc(vector<int> &v, int val) {
    if (v.empty()) return 0;
    if (v.back() < val) return 0;
    int l = 0, r = sz(v) - 2, best = sz(v) - 1;
    while (l <= r) {
        int mid = (l + r) >> 1;
        if (v[mid] >= val) {
            best = mid;
            r = mid - 1;
        } else l = mid + 1;
    }
    return sz(v) - best;
}

int get(int v, int tl, int tr, int l, int r, int val) {
    if (l > r) return 0;
    if (tl > r || tr < l) return 0;
    if (l <= tl && tr <= r) {
        return calc(t[v], val);
    }
    int mid = (tl + tr) >> 1;
    int ans1 = get(2 * v, tl, mid, l, r, val);
    int ans2 = get(2 * v + 1, mid + 1, tr, l, r, val);
    return ans1 + ans2;
}

int main(){

    scanf("%d%d", &n, &q);
    for (int i = 0; i < n; i++) {
        scanf("%d", p + i);
        p[i]--;
    }

    build(1, 0, n - 1);

    while (q--) {
        int ax, ay, bx, by;
        scanf("%d%d%d%d", &ax, &ay, &bx, &by);
        ax--; ay--; bx--; by--;
        ll A = ax - get(1, 0, n - 1, 0, ax - 1, ay);
        ll G = get(1, 0, n - 1, 0, ax - 1, by + 1);
        ll C = n - bx - 1 - get(1, 0, n - 1, bx + 1, n - 1, ay);
        ll I = get(1, 0, n - 1, bx + 1, n - 1, by + 1);
        ll B = ay - A - C;
        ll D = ax - A - G;
        ll H = n - by - 1 - G - I;
        ll F = n - bx - 1 - C - I;
        ll E = n - A - B - C - D - F - G - H - I;
        ll ans = sum(n);
        //ll ans = sum(E) + A * 1ll * (E + F + H + I) + C * 1ll * (D + E + G + H) + I * 1ll * (A + B + D + E) + G * 1ll * (B + C + E + F);
        //ans += D * 1ll * (B + E + H + F);
        //ans += B * 1ll * (E + F + H);
        //ans += F * 1ll * (E + H);
        //ans += H * 1ll * E;
        ans -= sum(A) + sum(B) + sum(C) + sum(D) + sum(F) + sum(G) + sum(H) + sum(I);
        ans -= A * B + A * C + A * D + A * G;
        ans -= B * C;
        ans -= C * F + C * I;
        ans -= F * I;
        ans -= I * H + I * G;
        ans -= H * G;
        ans -= G * D;
        printf("%lld\n", ans);
    }

    return 0;
}
