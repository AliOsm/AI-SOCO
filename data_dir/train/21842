#include <bits/stdc++.h>
using namespace std;
#define sc(x)            scanf("%d",&x)
#define scc(x)           scanf("%c",&x)
#define scl(x)           scanf("%lld",&x)
#define sz(v)	     	(v.size())
#define mem(v, d)		memset(v, d, sizeof(v))
#define oo				2000000100
#define OO				4000000000000000100
#define Ceil(x,y) ((x+y-1)/y)
#define EPS 1e-8
#define IO ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);
#define LFT(x)  (x*2)
#define RGHT(x) (x*2+1)
const double pi=3.14159265358979323846264338327950288419716939937510582097494459;
typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;

int dX[] = {0,1,0,-1,1,1,-1,-1};
int dY[] = {1,0,-1,0,1,-1,1,-1};
string alpha = "abcdefghijklmnopqrstuvwxyz";
int limit[] = {0,31,28,31,30,31,30,31,31,30,31,30,31};
ll __lcm(ll a, ll b) { return (a / __gcd(a,b)) * b; }
const int N = 100100;
ll dp[N][(1<<7)];
int n,p,k,arr[N][10],val[N];
vector<int>people;
ll solve(int idx,int mask,int cnt)
{
    if(idx == n) return 0;
    ll& ret = dp[idx][mask];
    if(~ret) return ret;
    if(idx+1-cnt<=k) ret = solve(idx+1,mask,cnt)+val[people[idx]];
    else ret = solve(idx+1,mask,cnt);
    for(int i = 0;i<p;++i){
        if((1<<i)&mask) continue;
        ret = max(ret,solve(idx+1,mask|(1<<i),cnt+1)+arr[people[idx]][i]);
    }
    return ret;
}
bool cmp(const int i,const int j){
    return val[i]<val[j];
}
int main()
{
#ifndef ONLINE_JUDGE
    freopen("in.txt","r",stdin);
#endif
    sc(n); sc(p); sc(k);
    for(int i = 0;i<n;++i)
        sc(val[i]),people.push_back(i);


    for(int i = 0;i<n;++i)
        for(int j = 0;j<p;++j)
            sc(arr[i][j]);

    sort(people.rbegin(),people.rend(),cmp);

    //for(auto x:people) printf("%d\n",x);

    mem(dp,-1);

    printf("%lld\n",solve(0,0,0));
    return 0;
}
