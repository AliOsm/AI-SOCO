#include <bits/stdc++.h>

using namespace std;
typedef long long ll;

const int NP = 5100000;

bool flag[ NP ];
int prime[NP], np, pi[NP];

void prime_prepare() {
    for (int i = 2; i< NP; i++) {
        if (!flag[i]) prime[++np]=i;
        pi[i]=np;
        for (int j=1; j<=np && i*prime[j]<NP; j++) {
            flag[ i * prime[ j ] ] = 1;
            if ( i % prime[ j ] == 0 ) break;
        }
    }
}

const int MM = 7;
const int PM = 2 * 3 * 5 * 7 * 11 * 13 * 17; // PM = 510510
int sz[MM+1], phi[PM+1][MM+1];

void phi_prepare() {
    sz[0]=1;
    for (int i=1; i<=PM; i++) phi[i][0]=i;
    for (int i=1; i<=MM; i++) {
        sz[i]=sz[i-1]*prime[i];
        for (int j=1; j<=PM; j++) phi[j][i]=phi[j][i-1]-phi[j/prime[i]][i-1];
    }
}

int sqrt2(ll x) { return sqrt(x+.0);
    //ll res=sqrt(x)-1e-7;
    //while (res*res<=x) res++;
    //return (int)res-1;
}

int sqrt3(ll x) { return cbrt(x+.0);
    //ll res=cbrt(x)-1e-7;
    //while (res*res*res<=x) res++;
    //return (int)res-1;
}

ll getphi(ll n, int s) {
    if (s == 0) return n;
    if (s <= MM) return phi[n%sz[s]][s]+(n/sz[s])*phi[sz[s]][s];
    if (n <= prime[s]*prime[s] && n < NP) return pi[ n ] - s + 1 ;
    if (n <= prime[s]*prime[s]*prime[s] && n<NP) {
        int sx=pi[sqrt2(n)];
        ll ans=pi[n]-s+1;
        for (int i=s+1; i<=sx; i++) ans+=pi[n/prime[i]]-i+1;
        return ans;
    }
    return getphi(n, s-1)-getphi(n/prime[s], s-1);
}

ll getpi(ll n) {
    if (n<NP) return pi[n];
    int s3=pi[sqrt3(n)], ed=pi[sqrt2(n)];
    ll ans=getphi(n, s3)+s3-1;
    for (int i=s3+1; i<=ed; i++) ans-=getpi(n/prime[i])-i+1;
    return ans;
}

int main() {
    prime_prepare();
    phi_prepare();

    ll n, ans;
    scanf("%I64d", &n);
    ans=pi[sqrt3(n)];
    int const n2 = sqrt2(n);
    for (int i=1;  prime[ i ] <= n2; i++) {
        ans+=getpi(n/prime[i])-i;
    }
    printf("%I64d\n", ans);

    return 0;
}