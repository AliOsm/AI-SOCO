//              +-- -- --++-- +-In the name of ALLAH-+ --++-- -- --+              \\

#include <bits/stdc++.h>

#define int long long

using namespace std ;
using pii = pair <int , int> ;

int const N = 3e5 + 20 ;
int n , m , h[N] , dp[N] , ans ;
vector <int> g[N] ;
vector <pii> vec[N] ;

inline void err () {
	cout << "-1\n" ;
	exit(0) ;
}

void pre (int v , int par = -1) {
	for (int u : g[v]) {
		if (u != par) {
			h[u] = h[v] + 1 ;
			pre(u , v) ;
		}
	}
}

int add[N] ;
set <pii> st[N] ;

void dfs (int v , int par = -1) {
	int sm = 0 ;

	for (int u : g[v]) {
		if (u == par) {
			continue ;
		}

		dfs(u , v) ;
		sm += dp[u] ;
	}

	if (!v) {
		return ;
	}

	for (pii p : vec[v]) {
		st[v].insert({p.first + sm , p.second}) ;
	}

	for (int u : g[v]) {
		if (u == par) {
			continue ;
		}

		add[u] += sm - dp[u] ;

		if ((int)st[v].size() < (int)st[u].size()) {
			swap(st[v] , st[u]) ;
			swap(add[v] , add[u]) ;
		}

		while (st[u].size()) {
			pii p = *st[u].begin() ;
			st[u].erase(st[u].begin()) ;
			st[v].insert({p.first + add[u] - add[v] , p.second}) ;
		}
	}

	while (st[v].size() && st[v].begin() -> second >= h[v]) {
		st[v].erase(st[v].begin()) ;
	}

	if (!st[v].size()) {
		err() ;
	}

	dp[v] = st[v].begin() -> first + add[v] ;
}

int32_t main(){
	ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0) ;

	cin >> n >> m ;

	for (int i = 0 ; i < n - 1 ; i ++) {
		int u , v ;
		cin >> u >> v ;
		u -- , v -- ;
		g[u].push_back(v) ;
		g[v].push_back(u) ;
	}

	pre(0) ;

	for (int i = 0 ; i < m ; i ++) {
		int u , v , c ;
		cin >> u >> v >> c ;
		u -- , v -- ;
		vec[u].push_back({c , h[v]}) ;
	}

	dfs(0) ;

	for (int u : g[0]) {
		ans += dp[u] ;
	}

	cout << ans << '\n' ;
}
