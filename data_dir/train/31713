#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
constexpr int inf = 0x3f3f3f3f;
constexpr double EPS = 1e-30;
constexpr double PI = atan(1) * 4;

template <typename T> inline bool chmax(T& x, T y) {return x < y ? x = y, 1 : 0;}
template <typename T> inline bool chmin(T& x, T y) {return x > y ? x = y, 1 : 0;}
inline int LSB(int i) {return (i & -i);}

constexpr int maxn = 2e5+5;

struct store{
    int id, no;
    bool start;

    store(){}
    store(int a, int b, int c){
        id = a, no = b, start = c;
    }

    bool operator <(const store& s) const{
        return start > s.start;
    }
};

int n, m, arr[maxn], res[maxn];
vector <store> event[maxn];
set <pi> active;

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);

    cin >> n >> m;
    for (int i = 1; i <= n; i++) cin >> arr[i];

    memset(res, -1, sizeof(res));

    for (int i = 0, a, b, c; i < m; i++){
        cin >> a >> b >> c;
        event[a].push_back(store(i, c, 1));
        event[b].push_back(store(i, c, 0));
    }

    for (int i = 1; i <= n; i++){
        sort(event[i].begin(), event[i].end());
    }

    for (int i = 1; i <= n; i++){
        int j = 0;
        while (j < event[i].size() && event[i][j].start){
            active.insert({event[i][j].no, event[i][j].id});
            j++;
        }

        while (active.size() && active.begin()->first != arr[i]){
            res[active.begin()->second] = i;
            active.erase(active.begin());
        }

        while (active.size() && (*--active.end()).first != arr[i]){
            res[(*--active.end()).second] = i;
            active.erase(--active.end());
        }

        while (j < event[i].size()){
            active.erase({event[i][j].no, event[i][j].id});
            j++;
        }
    }

    for (int i = 0; i < m; i++) printf("%d\n", res[i]);
    return 0;
}
