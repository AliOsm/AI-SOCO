#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
constexpr int inf = 0x3f3f3f3f;
constexpr double EPS = 1e-15;
constexpr double PI = atan(1) * 4;

template <typename T> inline bool chmax(T& x, T y) {return x < y ? x = y, 1 : 0;}
template <typename T> inline bool chmin(T& x, T y) {return x > y ? x = y, 1 : 0;}
inline int LSB(int i) {return (i & -i);}

int n, Max;
char grid[105][105];
int dx[] = {-2, -1, 1, 2, 2, 1, -1, -2};
int dy[] = {1, 2, 2, 1, -1, -2, -2, -1};

bool good(int x, int y){
    return x >= 1 && y >= 1 && x <= n && y <= n;
}

bool vis[105][105];
void bfs(int i, int j){
    queue <pi> q;
    memset(vis, false, sizeof(vis));
    q.push({i, j});
    grid[i][j] = 'W';
    while (q.size()){
        pi x = q.front();
        q.pop();

        if (vis[x.first][x.second]) continue;
        vis[x.first][x.second] = 1;

        for (int k = 0; k < 8; k++){
            int nx = x.first + dx[k];
            int ny = x.second + dy[k];

            if (good(nx, ny) && !vis[nx][ny]){
                if (grid[x.first][x.second] == 'W') grid[nx][ny] = 'B';
                else grid[nx][ny] = 'W';
                q.push({nx, ny});
            }
        }
    }
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> n;
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= n; j++){
            if (!vis[i][j]) bfs(i, j);
        }
    }

    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= n; j++){
            cout << grid[i][j];
        }
        cout << endl;
    }


    return 0;
}
