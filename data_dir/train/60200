/// إِنَّ مَعَ الْعُسْرِ يُسْرًا
/// لَا أَبْرَحُ حَتَّىٰ أَبْلُغَ


#include <bits/stdc++.h>
#define LL long long
#define LD long double
#define S second
#define IO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define F first
#define PI acos(-1)
#define MAX 200005
#define file freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
using namespace std;

const int MAX_CHAR = 26;

struct trie {
	trie* child[MAX_CHAR];
	bool isLeaf;

	trie() {
		memset(child, 0, sizeof(child));
		isLeaf = 0;
	}

	void insert(string s , int idx=0) {
		if(idx == s.size())
			return ;
		else
        {
			int cur = s[idx] - 'a';
			if(child[cur] == 0 )
				child[cur] = new trie();
			child[cur]->insert(s,idx+1);
		}
	}

	bool wordExist(string s , int idx=0) {
		if(idx == s.size())
			return isLeaf;

		int cur = s[idx] - 'a';
		if(child[cur] == 0 )
			return false;	// such path don't exist

		return child[cur]->wordExist(s,idx+1);
	}

	LL ans()
	{
	    LL res=0;
	    for(int i=0; i<MAX_CHAR ; i++)
        {
            if(child[i])
                res+=child[i]->ans()+1;
        }
        return res;

	}
};

int main()
{
    IO
    trie solve;
    map<char,LL>mp;
    string s,n;
    LL k;
    cin>>s>>n>>k;
    for(int i=0; i<26 ; i++)
    {
        if(n[i]=='1')
            mp[i+'a']=1;
    }
    LL c=0,mx=0;
    for(int i=0; i<s.size() ; i++)
    {
        c=0;
        string v;
        for(int j=i; j<s.size() ; j++)
        {
            if(!mp[s[j]])
            {
                c++;
                if(c>k)
                    break;

            }
            v+=s[j];

        }
        solve.insert(v);





    }
    cout<<solve.ans();

    return 0;
}
