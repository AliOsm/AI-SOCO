#include <bits/stdc++.h>
#include<fstream>
#define ll long long
#define fr first
#define sc second
#define mp make_pair
#define ii pair<int,int>
#define All(v) v.begin(),v.end()
using namespace std;
/// Segment Tree
const int max_node = 5000000;
int tree[max_node];

void update(int node , int start , int _end , int idx , int val)
{
    if(start == _end)
    {
         tree[node] += val;
    }
    else
    {
        int mid = (start+_end)/2;
        if(start <= idx && idx <= mid)
        {
            update(node*2,start,mid,idx,val);
        }
        else
        {
            update(node*2+1,mid+1,_end,idx,val);
        }
        tree[node] = max(tree[2*node],tree[2*node+1]);
    }
 }

int query(int node , int start , int _end, int l , int r)
{
    if(r < start || l > _end)
    {
        return 0;
    }
    if(l <= start && _end<= r)
    {
        return tree[node];
    }
    int mid = (start+_end)/2;
    int x1 = query(2*node  ,start , mid , l , r);
    int x2 = query(2*node+1,mid+1 ,_end , l , r);
    return max(x1,x2);
}

int main()
{
    int n,k,d;
    cin>>n>>k>>d;
    int a[n+1];
    for(int i=1;i<=n;i++)
        scanf("%d",&a[i]);
    sort(a+1,a+n+1);
    update(1,1,n+1,n+1,1);
    for(int i=n-k+1;i>=1;i--)
    {

        int id = upper_bound(a+1,a+n+1,a[i]+d)-a;
       /// id--;
        int R = id;
        int L = i+k;
        if(R < L)
          continue;
        int q = query(1,1,n+1,L,R);
        if(q > 0)
        {
            update(1,1,n+1,i,1);
        }

        if(i == 1)
        {
            if(q)
            {
                cout<<"YES";
            }
            else
                cout<<"NO";
            return 0;
        }
    }
    cout<<"NO";
}
