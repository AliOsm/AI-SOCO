#include <bits/stdc++.h>
#define pii pair<int,int>
#define pll pair<ll,ll>
#define fr first
#define sc second
#define ll  long long
#define mp make_pair

using namespace std;

int n,m;
const int sq = 300;

int per[100100];
int sz[100100];

int pr(int x){
    if(per[x] == x)return x;
    return per[x] = pr(per[x]);
}

int rep[10010];
int dp[100100];

void proli(vector<int>li){

    for(int i=0 ;i <li.size() ; i++){
        rep[li[i]]++;
    }

    for(int i=1 ;i <=n ;i++){
        dp[i] = 1e7;
    }

    for(int j=1 ;j <= sq ; j++){
        if(!rep[j])continue;
        deque<pii>q[j];
        for(int i=0 ;i <=n ;i ++){
            int i1 = i%j;
            pii add = {dp[i]-i/j,i};
            while(!q[i1].empty() && q[i1].back().fr >= add.fr){
                q[i1].pop_back();
            }
            q[i1].push_back(add);
            while(!q[i1].empty() && (i-q[i1].front().sc)/j > rep[j]){
                q[i1].pop_front();
            }
            dp[i] = i/j + q[i1].front().fr;
        }
    }
}

vector<int>lu;
void go(int s){
    if(s > n)return ;
    if(s)lu.push_back(s);
    go(s*10+4);
    go(s*10+7);
}

int dp1[100100];

void prohe(vector<int>he){

    for(int j=1 ;j <=n ;j ++)dp1[j] = 1e7;
    for(int j=0 ; j<he.size() ; j++){
        for(int i=n-he[j]; i >=0; i --){
            dp1[i+he[j]] = min(dp1[i]+1,dp1[i+he[j]]);
        }
    }
}

int main(){
    cin>>n>>m;
    for(int i=1 ;i <=n ;i ++){
        per[i] = i;
        sz[i] = 1;
    }
    int x,y;
    for(int i=0 ;i <m ; i++){
        scanf("%d%d",&x,&y);
        x = pr(x);
        y = pr(y);
        if(x == y)continue;
        per[x] = y;
        sz[y] += sz[x];
    }
    vector<int>he;
    vector<int>li;
    for(int i=1 ;i <=n ; i++){
        if(pr(i) != i)continue;
        if(sz[i] > sq)
            he.push_back(sz[i]);
        else
            li.push_back(sz[i]);
    }

    proli(li);
    prohe(he);
    go(0);
    int res = 1e7;
    sort(lu.begin() , lu.end());
    reverse(lu.begin() , lu.end());

    for(int i=0 ; i<=n ;i ++){
        for(int j=0 ;j<lu.size() ; j++){
            int val = lu[j] - i;
            if(val < 0)break;
            res = min(res,dp[i]+dp1[val]-1);
        }
    }
    if(res > n)res = -1;
    cout<<res<<endl;
    return 0;
}
