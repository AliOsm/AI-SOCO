///Copied 
#include <bits/stdc++.h>
using namespace std;

#define PB push_back
#define MP make_pair
#define SZ size()
#define all(v) v.begin(), v.end()
#define REP(i, n) for(int i = 0; i < (int)n; i++)
#define ITR(i, j, n) for(int i = j; i < (int)n; i++)
#define mem(array, val) memset(array, val, sizeof(array))
#define READ(filename) freopen(filename, "r", stdin)
#define WRITE(filename) freopen(filename, "w", stdout)
#define Pii pair <int, int>
#define Fr first
#define Sc second
#define Long long long
#define si(a) scanf("%d", &a)
#define sl(a) scanf("%I64d", &a)
#define sd(a) scanf("%lf", &a)
#define sii(a, b) scanf("%d%d", &a, &b)
#define sll(a, b) scanf("%I64d%I64d", &a, &b)
#define sdd(a, b) scanf("%lf%lf", &a, &b)
#define Fast_IO ios_base::sync_with_stdio(0);cin.tie(0)

#define INF 1000000000000LL
#define MAX 200005
int N, A[MAX];
Long dp[MAX][2];
vector <int> adj[MAX];
void dfs(int nd)
{
   if(adj[nd].SZ == 0) {
      dp[nd][0] = 0, dp[nd][1] = A[nd];
      return;
   }
   REP(i, adj[nd].SZ) {
      int ch = adj[nd][i];
      dfs(ch);
      if(!i) {
         dp[nd][0] = dp[ch][0], dp[nd][1] = dp[ch][1];
         continue;
      }
      Long x = dp[nd][0], y = dp[nd][1];
      dp[nd][0] = max(y + dp[ch][1], x + dp[ch][0]);
      dp[nd][1] = max(y + dp[ch][0], x + dp[ch][1]);
   }
   dp[nd][1] = max(dp[nd][0] + A[nd], dp[nd][1]);
}

int main()
{
   si(N);
   REP(i, N) {
      int pi; sii(pi, A[i+1]);
      if(!i) continue;
      adj[pi].PB(i+1);
   }
   dfs(1);
   printf("%I64d\n", max(dp[1][0], dp[1][1]));
}
