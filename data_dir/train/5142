#pragma comment (linker, "/STACK:256000000")

#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_NONSTDC_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>
#include <random>
#include <bitset>

using namespace std;

typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef long double ldouble;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<uint64, uint64> puu;
typedef pair<pii, pii> piiii;

#define pb push_back
#define sq(x) ((x)*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define bit(mask, b) ((mask >> b) & 1)
#define biton(mask, bit) (mask | (((uint32)(1)) << bit))
#define bitoff(mask, bit) (mask & (~(((uint32)(1)) << bit)))
#define bitputon(mask, bit) (mask |= (((uint32)(1)) << bit))
#define bitputoff(mask, bit) (mask &= (~(((uint32)(1)) << bit)))
#define FAIL() (*((int*)(0)))++
#define INF ((int)(1e9) + 1337)
#define LINF ((int64)(1e18))
#define EPS 1e-11
#define PI (3.1415926535897932384626433832795)
#define y1 yy1
#define y0 yy0
#define j0 jj0
//#define MOD 1000000007LL
#define HMOD 1234567913LL
#define HMOD2 1000000007LL
#define HBASE 1000003
#define REV2 500000004


//#ifdef _MY_DEBUG
//    #define HMOD 1000000007
//    #define HBASE (1000003LL)
//#else
//    #define HMOD ((int64)(1e18) + 3LL)
//    #define HBASE (1000037LL)
//#endif
#define MAX 2000000000
mt19937 ggen;

const int MAXN = 100100;

struct edge
{
    int fr;
    int to;
    int w;
    int c;
    int back;
    edge() {}
    edge(int fr, int to, int w, int c, int back) : fr(fr), to(to), w(w), c(c), back(back) {}
};

int n, m, x;
string s;
string a[110];
int w[110];
vector<vector<edge> > g;
int d[510];
edge *pre[510];
bool u[510];

void conn(int a, int b, int c, int w = 0)
{
    int sa = g[a].size();
    int sb = g[b].size();
    g[a].push_back(edge(a, b, w, c, sb));
    g[b].push_back(edge(b, a, -w, 0, sa));
}

vector<int> q;
int ql;

void levit(int v)
{
    q.clear();
    ql = 0;
    q.push_back(v);
    memset(d, 0x7f, sizeof(int) * (n + 1));
    memset(pre, 0, sizeof(edge*) * (n + 1));
    d[v] = 0;
    u[v] = 1;
    while (ql != q.size())
    {
        v = q[ql];
        ql++;
        u[v] = 0;
        for (int i = 0; i < (int)g[v].size(); i++)
        {
            edge *e = &g[v][i];
            if (!e->c)
                continue;
            if (d[e->to] > d[v] + e->w)
            {
                d[e->to] = d[v] + e->w;
                pre[e->to] = e;
                if (!u[e->to])
                {
                    u[e->to] = 1;
                    q.push_back(e->to);
                }
            }
        }
    }
}

void push(int a, int b, int w)
{
    levit(a);
    int cc = 1;
    if (d[b] <= w)
    {
        //cout << a << ' ' << b << ' ' << d[b] << '\n';
        cc = 0;
        edge *e = pre[b];
        //res += w;
        while (e)
        {
            //cout << e->fr << ' ';
            e->c--;
            g[e->to][e->back].c++;
            e = pre[e->fr];
        }
        //cout << '\n';
        //cout << '\n';
    }
    int sb = g[b].size();
    int sa = g[a].size();
    g[b].push_back(edge(b, a, -w, cc, sa));
    g[a].push_back(edge(a, b, w, 1 - cc, sb));
}

void solve()
{
    cin >> n;
    g.resize(n + 1);
    cin >> s;
    cin >> m;
    for (int i = 0; i < m; i++)
    {
        cin >> a[i] >> w[i];
    }
    cin >> x;
    for (int i = 1; i <= n; i++)
    {
        conn(i - 1, i, x);
    }
    int ans = 0;
    for (int i = 0; i < n; i++)
    {
        int len = n - i;
        for (int j = 0; j < m; j++)
        {
            int wlen = a[j].size();
            if (wlen > len) continue;
            bool was = false;
            for (int k = i; k < i + wlen && !was; k++)
                if (s[k] != a[j][k - i])
                    was = true;
            if (!was)
                push(i, i + wlen, w[j]);
        }
    }
    for (int i = 0; i <= n; i++)
        for (int j = 0; j < (int)g[i].size(); j++)
            if(g[i][j].w < 0)
                ans += (1 - g[i][j].c) * g[i][j].w;
    cout << -ans;
}

#define TASK "substr"
int main()
{
    //testgen(50000, 100000, 50);// return 0;
    ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
    //stresstest(10, 10000); return 0;
    ggen = mt19937(13);

    //int start = clock();
    solve();
    //cerr << (double)(clock() - start) / CLOCKS_PER_SEC << '\n';

    return 0;
}

/*
0 3 0
2 1 0

2 5 6
4 3 0 1 2

3 5 0
2 1 0 3

15
*/