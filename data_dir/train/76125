//raja1999

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,avx,avx2")

#include <bits/stdc++.h>
#include <vector>
#include <set>
#include <map>
#include <string> 
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <utility>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iomanip> 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
//setbase - cout << setbase (16)a; cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 <<endl;prints xxx77
//setprecision - cout << setprecision (14) << f << endl; Prints x.xxxx
//cout.precision(x)  cout<<fixed<<val;  // prints x digits after decimal in val

using namespace std;
using namespace __gnu_pbds;
#define f(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) f(i,0,n)
#define fd(i,a,b) for(i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define vi vector< int >
#define vl vector< ll >
#define ss second
#define ff first
#define ll long long
#define pii pair< int,int >
#define pll pair< ll,ll >
#define sz(a) a.size()
#define inf (1000*1000*1000+5)
#define all(a) a.rbegin(),a.rend()
#define tri pair<int,pii>
#define vii vector<pii>
#define vll vector<pll>
#define viii vector<tri>
#define mod (1000*1000*1000+7)
#define pqueue priority_queue< int >
#define pdqueue priority_queue< int,vi ,greater< int > >
#define int ll

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

//std::ios::sync_with_stdio(false);
int dp[200005][10],vis[200005][10];
vector<vii>vec(200005);
int n;
int compute(int pos,int val){
	if(pos==n){
		return 0;
	}
	if(vis[pos][val]){
		return dp[pos][val];
	}
	vis[pos][val]=1;
	int i,ans=0;
	vi lol,haha,gg;
	rep(i,vec[pos].size()){
		if(vec[pos][i].ff==1){
			lol.pb(vec[pos][i].ss);
		}
		else if(vec[pos][i].ff==2){
			haha.pb(vec[pos][i].ss);
		}
		else{
			gg.pb(vec[pos][i].ss);
		}
	}
	sort(all(lol));
	sort(all(gg));
	sort(all(haha));
	dp[pos][val]=compute(pos+1,val);
	if(lol.size()>=3){
		ans=0;
		rep(i,3){
			ans+=lol[i];
		}
		if(val>=7){
			ans+=lol[0];
		}
		dp[pos][val]=max(dp[pos][val],compute(pos+1,(val+3)%10)+ans);
		// if(pos==0){
		// 	cout<<compute(pos+1,(val+3)%10)+ans<<endl;
		// }
	}
	if(lol.size()>=2){
		ans=0;
		rep(i,2){
			ans+=lol[i];
		}
		if(val>=8){
			ans+=lol[0];
		}
		dp[pos][val]=max(dp[pos][val],compute(pos+1,(val+2)%10)+ans);
	}
	if(lol.size()>=1&&haha.size()>=1){
		ans=lol[0]+haha[0];
		if(val>=8){
			ans+=max(lol[0],haha[0]);
		}
		dp[pos][val]=max(dp[pos][val],compute(pos+1,(val+2)%10)+ans);
	}
	if(gg.size()>=1){
		ans=gg[0];
		if(val>=9){
			ans+=gg[0];
		}
		dp[pos][val]=max(dp[pos][val],compute(pos+1,(val+1)%10)+ans);
	}
	if(lol.size()>=1){
		ans=lol[0];
		if(val>=9){
			ans+=lol[0];
		}
		dp[pos][val]=max(dp[pos][val],compute(pos+1,(val+1)%10)+ans);
	}
	if(haha.size()>=1){
		ans=haha[0];
		if(val>=9){
			ans+=haha[0];
		}
		dp[pos][val]=max(dp[pos][val],compute(pos+1,(val+1)%10)+ans);
	}
	return dp[pos][val];
}
main(){
	std::ios::sync_with_stdio(false); cin.tie(NULL);
	int i,j, k,c,d;
	cin>>n;
	rep(i,n){
		cin>>k;
		rep(j,k){
			cin>>c>>d;
			vec[i].pb(mp(c,d));
		}
	}
	cout<<compute(0,0)<<endl;	
	return 0;
} 
	