#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<LL, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
#define LL                  long long
#define ull                 unsigned long long
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%I64d ",n)
#define pfs(s)              printf("%s\n",s)

#define	deb(x)		        cout<<#x<<" "<<x<<endl

#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9+5
#define EPS                 1e-8
#define Pi                  acos(-1.0)

LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}

#define N 1000005



int main()
{
    FASTREAD;
    int T;
    cin>>T;

    while(T--)
    {
        int n;
        cin>>n;

        int arr[n];
        int pos;
        for(int i=0;i<n;i++)
        {
            cin>>arr[i];
            if(arr[i]==1) pos=i;
        }


        int flag=1;
        for(int i=pos;;)
        {

            int now=i;
            if(now==n) now=0;
            int nxt=now+1;
            if(nxt==n) nxt=0;
            if(arr[nxt]==1) break;
            if(arr[now]+1!=arr[nxt])
            {
                flag=0;
                break;
            }
            i=nxt;

        }
        if(flag)
        {
            cout<<"YES"<<endl;
            continue;
        }

        flag=1;

        for(int i=pos;;)
        {

            int now=i;
            if(now==-1) now=n-1;
            int nxt=now-1;
            if(nxt==-1) nxt=n-1;
            if(arr[nxt]==1) break;

            if(arr[now]+1!=arr[nxt])
            {
                flag=0;
                break;
            }
            i=nxt;

        }
        if(flag)
            cout<<"YES"<<endl;
        else
            cout<<"NO"<<endl;


    }

    return 0;
}


/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
