#include <bits/stdc++.h>
using namespace std;

typedef pair <int, int> pii;

int N, M, P, S[9], C[9], L[9];
queue <pii> Q[9][2];
char O[1005][1005];

int di[] = { 0, -1, 0, 1},
    dj[] = { -1, 0, 1, 0};

int main() {
    scanf("%d %d %d", &N, &M, &P);

    for (int i = 0; i < P; i++) {
        scanf("%d", &S[i]);
        L[i] = true;
    }

    for (int i = 0; i < N; i++)
        scanf("%s", O[i]);

    for (int i = 0; i < N; i++)
        for (int j = 0; j < M; j++)
            if (isdigit(O[i][j]))
                Q[O[i][j] - '1'][0].push({ i, j});

    bool keepRunning = true;

    while (keepRunning) {
        keepRunning = false;

        for (int i = 0; i < P; i++) {
            if (!L[i]) continue;

            for (int j = 0; j < S[i]; j++) {
                bool expanded = false;

                while (!Q[i][0].empty()) {
                    pii cur = Q[i][0].front(); Q[i][0].pop();

                    for (int k = 0; k < 4; k++) {
                        pii nv = { cur.first + di[k], cur.second + dj[k] };

                        if (0 <= nv.first && nv.first < N && 0 <= nv.second && nv.second < M && O[nv.first][nv.second] == '.') {
                            O[nv.first][nv.second] = '1' + i;
                            Q[i][1].push(nv);
                            keepRunning = true;
                            expanded = true;
                        }
                    }
                }

                Q[i][0] = Q[i][1];
                Q[i][1] = queue<pii>();

                if (!expanded) {
                    L[i] = false;
                    break;
                }
            }
        }
    }

    for (int i = 0; i < N; i++)
        for (int j = 0; j < M; j++)
            if (isdigit(O[i][j]))
                C[O[i][j] - '1']++;

    for (int i = 0; i < P; i++)
        printf("%d ", C[i]);

    return 0;
}
