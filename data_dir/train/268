#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define max(a,b)    ((a)>(b)?(a):(b))
#define min(a,b)    ((a)<(b)?(a):(b))
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
    ll q;
    cin>>q;
    vector<ll> v,sums;
    vector<ll> v1;
    double prevans=0.0;
    while(q--)
    {
        ll t;
        cin>>t;
        if(t==1)
        {
            ll x;
            cin>>x;
            v.push_back(x);
            sums.push_back(sums.empty()?v.back():sums.back()+v.back());
            v1.push_back(v.size()*v.back()-(v.size()<=1?0:sums[sums.size()-2]));
        }
        else
        {
            if(v.size()<2)
            {
                cout<<0<<endl;
                continue;
            }
            ll ind=lower_bound(v1.begin(),v1.end(),v.back())-v1.begin();
            if(ind==v1.size()||v1[ind]>v.back())
                ind--;
            double ans=(double)v.back()-(double)(ind==v.size()-1?sums.back():sums[ind]+v.back())/(double)(ind==v.size()-1?ind+1:ind+2);
            // ll start=0,end=v.size()-2;
            // double ans=1e18;
            // while(start<=end)
            // {
            //     ll mid=(start+end)>>1;
            //     double val=((double)sums[mid]+(double)v.back())/((double)(mid+2));
            //     ans=min(ans,val);
            //     if(start==end)
            //         break;
            //     else if(mid==start)
            //         start=end;
            //     else if(mid==end)
            //         end=start;
            //     else
            //     {
            //         ll mid1=(start+mid-1)>>1;
            //         ll mid2=(end+mid+1)>>1;
            //         double val1=((double)sums[mid1]+(double)v.back())/((double)(mid1+2));
            //         double val2=((double)sums[mid2]+(double)v.back())/((double)(mid2+2));
            //         if(val1<val)
            //         {
            //             end=mid-1;
            //             ans=min(ans,val1);
            //         }
            //         else
            //         {
            //             start=mid+1;
            //             ans=min(ans,val2);
            //         }
            //     }
            // }
            // ans=min(ans,(double)sums.back()/(double)sums.size());
            // ll ind=lower_bound(sums.begin(),sums.end(),v.back())-sums.begin();
            // if(ind==sums.size())
            //     ind--;
            // for(ll j=max(ind-200,0);j<min(ind+200,sums.size());j++)
            // {
            //     // cout<<"*** "<<j<<' '<<sums[j]<<endl;
            //     ans=min(ans,((double)sums[j]+(double)v.back())/((double)(j+2)));
            // }
            // ans=((double)v.back()-ans);
            // prevans=max(ans,prevans);
            // ans=max(ans,prevans);
            cout<<fixed<<setprecision(20)<<(ans)<<endl;
            // printf("%.20Lf\n",ans);
        }
    }
}