#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

using namespace std;

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

template<typename T> inline void swap(pair<T, T> &p) { swap(p.first , p.second ); }

#define all(v) v.begin(),v.end()

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) { if (i) os << ' '; os << v[i]; } os << endl; return os; }
template <typename T1, typename T2> ostream& operator << (ostream& os, const vector<pair<T1, T2>> &v) { for (int i = 0 ; i < v.size() ; i++) { os << v[i] << endl; } return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, const pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

class dsuClass {
	public:

	int n;
	vector<int> parent;
	vector<int> size;
	
	int sccCount;
	
	void init(int n) {
		this->n = n;
		parent.resize(n);
		size.resize(n);
		reset();
	}
	
	void reset() {
		sccCount = n;
		FOR (i, 0, n) parent[i] = i;
		FOR (i, 0, n) size[i] = 1;
	}
	
	int update(int a) {
		if (parent[a] == a) return a;
		return parent[a] = update(parent[a]);
	}
	
	void join(int a, int b) {
		a = update(a);
		b = update(b);
		if (size[b] > size[a]) swap(a, b);
		if (a == b) return;
		
		size[a] += size[b];

		parent[b] = a;
		sccCount--;
	}
	
	bool isMaster(int v) {
		return parent[v] == v;
	}

	void updateAll() {
		FOR (i, 0, n) update(i);
	}
};


int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	fixed(cout); cout << setprecision(10);
	
	next(int, n);
	next(int, m);
	auto f = readVector<string>(n);

	dsuClass dsu;
	dsu.init(n * m);

	vector<vector<int>> id(n, vector<int>(m));
	FOR (y, 0, n) FOR (x, 0, m) id[y][x] = y * m + x;

	FOR (y, 1, n) FOR (x, 0, m) if (f[y][x] == '.' && f[y - 1][x] == '.') dsu.join(id[y][x] , id[y - 1][x]);
	
	FOR (y, 0, n) FOR (x, 1, m) if (f[y][x] == '.' && f[y][x - 1] == '.') dsu.join(id[y][x] , id[y][x - 1]);

	FOR (y, 0, n) {
		FOR (x, 0, m) {
			if (f[y][x] == '.') cout << '.';
			else {
				int cur = 1;

				static vector<int> ids;
				ids.clear();
				if (y && f[y - 1][x] == '.') ids.push_back(id[y - 1][x]);
				if (x && f[y][x - 1] == '.') ids.push_back(id[y][x - 1]);
				if (y < n - 1 && f[y + 1][x] == '.') ids.push_back(id[y + 1][x]);
				if (x < m - 1 && f[y][x + 1] == '.') ids.push_back(id[y][x + 1]);

				FOR (i, 0, ids.size()) {
					bool ok = true;
					FOR (j, 0, i) if (dsu.update(ids[i]) == dsu.update(ids[j])) ok = false;
					if (ok) cur += dsu.size[dsu.update(ids[i])];
				}

				cout << cur % 10;
			}
		}
		cout << endl;
	}
}