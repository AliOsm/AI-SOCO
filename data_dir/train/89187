#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define FILE "series"
#define ld long double
#define endl '\n'
#define pii pair <int, int>

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

using namespace std;
using namespace __gnu_pbds;

typedef tree <pii,null_type,less<pii>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 1e5 + 5;
const int mod = 1e9 + 7;
const int rx[4] = {1, -1, 0, 0};
const int ry[4] = {0, 0, 1, -1};

int d[N][105];
vector <int> g[N];
vector <int> all[N];

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    srand(time(0));
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //   freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
#endif // LOCAL
    int n, m, k, s;
    cin >> n >> m >> k >> s;
    for (int i = 0; i < n; i++){
        int x;
        cin >> x;
        x--;
        all[x].pb(i);
    }
    for (int i = 0; i < m; i++){
        int x, y;
        cin >> x >> y;
        x--;
        y--;
        g[x].pb(y);
        g[y].pb(x);
    }
    for (int i = 0; i < k; i++){
        for (int j = 0; j < n; j++){
            d[j][i] = 1e9;
        }
    }
    for (int i = 0; i < k; i++){
        queue <int> q;
        for (auto x : all[i]){
            q.push(x);
            d[x][i] = 0;
        }
        while (!q.empty()){
            int v = q.front();
            q.pop();
            for (int to : g[v]){
                if (d[to][i] > d[v][i] + 1){
                    d[to][i] = d[v][i] + 1;
                    q.push(to);
                }
            }
        }
    }
    for (int i = 0; i < n; i++){
        sort(d[i], d[i] + k);
        int res = 0;
        for (int j = 0; j < s; j++) res += d[i][j];
        cout << res << " ";
    }
    return 0;
}
