#include <bits/stdc++.h>
using namespace std;

typedef long long int64;
const int MAX = 1e6 + 5;
const int MOD = 1e9 + 7;
int n, m, a, b;
int64 f[MAX], inv[MAX];

int64 exp(int64 a, int64 n) {
	int64 ans = 1;
	while(n > 0) {
		if(n % 2LL == 1LL)
			ans = ans * a % MOD;
			
		a = a * a % MOD;
		n /= 2LL;
	}
	
	return ans;
}

void pre_facts() {
	f[0] = inv[0] = 1;
	for(int i = 1; i < MAX; i++) {
		f[i] = f[i - 1] * i % MOD;
		inv[i] = exp(f[i], MOD - 2);
	}
}

int64 comb(int n, int k) {
	if(n < k) return 0;
	return ((f[n] * inv[k]) % MOD * inv[n - k]) % MOD;
}

int64 T(int n, int k) {
	if(k == n)
		return 1;

	return exp(n, n - k - 1) * k % MOD;
}

int main() {
	pre_facts();

	scanf("%d%d%d%d", &n, &m, &a, &b);

	int64 ans = 0;
	for(int k = 1; k < n; k++) {
		int64 v = comb(m - 1, k - 1) * exp(m, n - 1 - k) % MOD;
		v = v * T(n, k + 1) % MOD;
		v = v * f[k - 1] % MOD;
		v = v * comb(n - 2, k - 1) % MOD;
		ans = (ans + v) % MOD;
	}

	printf("%lld\n", ans);
	return 0;
}