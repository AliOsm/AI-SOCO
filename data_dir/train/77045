#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <bitset>
#include <random>
#include <cassert>

using std::ios_base;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::fixed;

using std::vector;
using std::string;
using std::stack;
using std::queue;
using std::deque;
using std::map;
using std::set;
using std::unordered_map;
using std::unordered_set;
using std::bitset;

using std::tuple;
using std::make_tuple;
using std::pair;
using std::make_pair;

using std::sort;
using std::reverse;
using std::nth_element;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define sqr(x) ((x) * (x))

#define forn(i, n) for (int i = 0; i < (n); i++)
#define fornr(i, n) for (int i = (n) - 1; i >= 0; i--)
#define forab(i, a, b) for (int i = (a); i < (b); i++)

const int M = 1e9+7;

int n;
string a, b;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    int64_t cnt = 1, cntge = 1, cntle = 1, cnteq = 1;
    
    cin >> n >> a >> b;
    for (int i = 0; i < n; ++i) {
        if (isdigit(a[i]) && isdigit(b[i])) {
            if (a[i] != b[i])
                cnteq = 0;
            if (a[i] < b[i])
                cntge = 0;
            if (a[i] > b[i])
                cntle = 0;
            continue;
        }
        
        if (a[i] == '?' && b[i] == '?') {
            cnt = (cnt * 100) % M;
            cntge = (cntge * 55) % M;
            cntle = (cntle * 55) % M;
            cnteq = (cnteq * 10) % M;
            continue;
        }

        cnt = (cnt * 10) % M;

        if (a[i] == '?') {
            int d = b[i] - '0';
            cntge = (cntge * (10 - d)) % M;
            cntle = (cntle * (d + 1)) % M;
        } else {
            int d = a[i] - '0';
            cntge = (cntge * (d + 1)) % M;
            cntle = (cntle * (10 - d)) % M;
        }
    }

    int64_t ans = (cnt - cntge - cntle + cnteq) % M;
    ans = (ans + M) % M;

    cout << ans << '\n';

    

#ifdef LOCAL
    cerr << "\n== " << 1.0 * clock() / CLOCKS_PER_SEC << " sec.\n";
#endif
    return 0;
}
