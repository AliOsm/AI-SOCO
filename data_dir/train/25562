#include <sstream>
#include<iostream>
#include<algorithm>
#include<vector>
#include<set>
#include<ctime>
#include<cmath>
#include<map>
#include<stack>
#include<random>
#include<queue>
#include<list>
using namespace std;
//const long long int INF=2000000000000000000;
#define ll long long int
#define ld long double
#define key pair<ld,ld>
#define ii pair<int,int>
#define si set<int>
#define vii vector<pair<int,int> >
#define vi vector<int>
#define vll vector<ll>
#define vb vector<bool>
#define vvi vector<vector<int> >
#define vs vector<string>
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define nu 100001
#define mod 1000000007
#define mul(x,y) ((ll)(x)*(y))%mod
#define tr(c,i) for(auto i = (c).begin(); i != (c).end(); i++)
#define fastio  ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
vector<int> Sdist;
vector<int> Tdist;
queue<int> Q;
vector<int> visited;
vector<vector<int>> adj;
ll MOD(ll a, ll b)
{
    if(a>b)
        return a-b;
    else
        return b-a;
}
ll max3(ll a,ll b, ll c)
{
    return max(c,max(a,b));
}
ll min3(ll a,ll b,ll c)
{
    return min(a,min(b,c));
}
ll power(ll x,ll y )
{
    ll res = 1;
    x = x ;
    while (y > 0)
    {
        if (y & 1)
            res = (res*x);
        y = y>>1;
        x = (x*x);
    }
    return res;
}
ll logg(ll a)
{
    ll x=0;
    while(a>1)
    {
        x++;
        a/=2;
    }
    return x;
}
ll gcd(ll a,ll b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}
void bfs1(int i)
{
    Q.push(i);
    while(!Q.empty())
    {
        i=Q.front();
        Q.pop();
        visited[i]=1;
        for(int j=0;j<adj[i].size();j++)
        {
            if(visited[adj[i][j]]!=1)
            {
                visited[adj[i][j]]=1;
                Q.push(adj[i][j]);
                Sdist[adj[i][j]]=Sdist[i]+1;
            }
        }
    }
}
void bfs2(int i)
{
    Q.push(i);
    while(!Q.empty())
    {
        i=Q.front();
        Q.pop();
        visited[i]=1;
        for(int j=0;j<adj[i].size();j++)
        {
            if(visited[adj[i][j]]!=1)
            {
                visited[adj[i][j]]=1;
                Q.push(adj[i][j]);
                Tdist[adj[i][j]]=Tdist[i]+1;
            }
        }
    }
}
int main()
{
    int n,m,s,t;
    cin>>n>>m>>s>>t;
    Sdist.resize(n+1,0);
    Tdist.resize(n+1,0);
    adj.resize(n+1);
    visited.resize(n+1,0);
    set<pair<int,int>> g;
    for(int i=0;i<m;i++)
    {
        int x,y;
        cin>>x>>y;
        adj[x].pb(y);
        adj[y].pb(x);
        g.insert(mp(x,y));
        g.insert(mp(y,x));
    }
    set<pair<int,int>> G;
    bfs1(s);
    for(int i=0;i<=n;i++)
    {
        visited[i]=0;
    }
    bfs2(t);
    int dist=Sdist[t];
    ll ans=0;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(i!=j&&(g.find(mp(i,j))==g.end())&&(g.find(mp(j,i))==g.end())&&i<=j)
            {
                if(Sdist[i]+Tdist[j]+1<dist||Sdist[j]+Tdist[i]+1<dist)
                {
                    
                }
                else
                {
                    ans++;
                }
            }
        }
    }
    cout<<ans;
}
