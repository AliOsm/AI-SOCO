#include <bits/stdc++.h>
using namespace std;

vector<int> P;
bool vis[100002];

int dis(char a, char b) {
    if(a > b) swap(a, b);
    int d1 = b - a;
    int d2 = 26 - d1;
    return min(d1, d2);
}

int main() {
    int n, p;
    string s;
    cin >> n >> p >> s;
    int mid = (n % 2) ? n / 2 + 1 : n / 2;
    p--;
    int a1 = 0, a2 = 0;
    if(p < n / 2) {
        for(int i = 0; i < n / 2; i++) {
            if(s[i] != s[n - i - 1]) P.push_back(i);
        }
        int org = p;
        for(int i = 0; i < P.size(); i++) {
            if(P[i] >= p) {
                int t = P[i];
                a1 += dis(s[t], s[n - t - 1]);
                a1 += t - p;
                p = t;    
                vis[p] = true;
            }
        }
        reverse(P.begin(), P.end());
        for(int i = 0; i < P.size(); i++) {
            if(P[i] < p && !vis[P[i]]) {
                int t = P[i];
                a1 += dis(s[t], s[n - t - 1]);
                a1 += p - t;
                p = t;   
            }
        }
        p = org;
        memset(vis, false, sizeof(vis));
        for(int i = 0; i < P.size(); i++) {
            if(P[i] < p) {
                int t = P[i];
                a2 += dis(s[t], s[n - t - 1]);
                a2 += p - t;
                p = t;    
                vis[p] = true;
            }
        }
        reverse(P.begin(), P.end());
        for(int i = 0; i < P.size(); i++) {
            if(P[i] >= p && !vis[P[i]]) {
                int t = P[i];
                a2 += dis(s[t], s[n - t - 1]);
                a2 += t - p;
                p = t;   
            }
        }   
        cout << min(a1, a2) << endl;
    }
    else {
        for(int i = mid; i < n; i++) {
             if(s[i] != s[n - i - 1]) P.push_back(i);
        }
        int org = p;
        for(int i = 0; i < P.size(); i++) {
            if(P[i] >= p) {
                int t = P[i];
                a1 += dis(s[t], s[n - t - 1]);
                //cout << s[t] << " " << s[n - t - 1] << " " << dis(s[t], s[n - t - 1]) << endl;
                a1 += t - p;
                p = t;    
                vis[p] = true;
            }
        }
        reverse(P.begin(), P.end());
        for(int i = 0; i < P.size(); i++) {
            if(P[i] < p && !vis[P[i]]) {
                int t = P[i];
                a1 += dis(s[t], s[n - t - 1]);
                //cout << s[t] << " " << s[n - t - 1] << " " << dis(s[t], s[n - t - 1]) << endl;
                a1 += p - t;
                p = t;   
            }
        }
        p = org;
        memset(vis, false, sizeof(vis));
        for(int i = 0; i < P.size(); i++) {
            if(P[i] < p) {
                int t = P[i];
                a2 += dis(s[t], s[n - t - 1]);
                //cout << s[t] << " " << s[n - t - 1] << " " << dis(s[t], s[n - t - 1]) << endl;
                a2 += p - t;
                p = t;    
                vis[p] = true;
            }
        }
        reverse(P.begin(), P.end());
        for(int i = 0; i < P.size(); i++) {
            if(P[i] >= p && !vis[P[i]]) {
                int t = P[i];
                a2 += dis(s[t], s[n - t - 1]);
                //cout << s[t] << " " << s[n - t - 1] << " " << dis(s[t], s[n - t - 1]) << endl;
                a2 += t - p;
                p = t;   
            }
        }   
        cout << min(a1, a2) << endl;
    }
}
