// Why am I so dumb? :c
// chrono::system_clock::now().time_since_epoch().count()

#include<bits/stdc++.h>
//#include<ext/pb_ds/assoc_container.hpp>
//#include<ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define mp make_pair

#define all(x) (x).begin(), (x).end()

#define fi first
#define se second

using namespace std;
//using namespace __gnu_pbds;

typedef long long ll;
typedef pair<int, int> pii;
//template<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const int MAXN = (int)1e5 + 5;
const int K = 400;

int arr[MAXN], ans[MAXN], cnt[MAXN], n;
int cnt2[305][MAXN], diff[305];

void addEl(int id, int x) {
    if (++cnt2[id][x] == 1) {
        ++diff[id];
    }
}

void delEl(int id, int x) {
    if (--cnt2[id][x] == 0) {
        --diff[id];
    }
}

void solve() {
    scanf("%d", &n);

    for (int i = 1; i <= n; ++i) {
        scanf("%d", &arr[i]);
    }

    vector<int> pts;

    for (int i = 1; i <= K; ++i) {
        pts.clear();

        for (int l = 1, r; l <= n; l = r) {
            r = l;
            int cur = 1;
            ++cnt[arr[l]];

            while (cur <= i && r <= n) {
                ++r;

                if (++cnt[arr[r]] == 1) {
                    ++cur;
                }
            }

            for (int i = l; i <= r; ++i) {
                cnt[arr[i]] = 0;
            }

            if (r - 1 != n) {
                pts.pb(r - 1);
            }

            ++ans[i];
        }
    }

    for (int i = 1, j = 0; i <= n; ++i) {
        addEl(j, arr[i]);

        if (j < pts.size() && i == pts[j]) {
            ++j;
        }
    }

    for (int i = K + 1; i <= n; ++i) {
        for (int j = 0; j < pts.size(); ++j) {
            while (pts[j] < n) {
                addEl(j, arr[pts[j] + 1]);
                delEl(j + 1, arr[pts[j] + 1]);

                if (diff[j] > i) {
                    delEl(j, arr[pts[j] + 1]);
                    addEl(j + 1, arr[pts[j] + 1]);
                    break;
                }

                pts[j]++;
            }
        }

        while (!pts.empty() && pts.back() == n) {
            pts.pop_back();
        }

        ans[i] = pts.size() + 1;
    }

    for (int i = 1; i <= n; ++i) {
        printf("%d%c", ans[i], " \n"[i == n]);
    }
}

int main() {
    int tt = 1;

    while (tt--) {
        solve();
    }

    return 0;
}
