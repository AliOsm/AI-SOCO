#include <iostream>
#include <vector>
#include <stack>
#include <queue>
#include <algorithm>
#include <map>
#include <cmath>
#include <set>
#include <deque>
#include <cstdio>
#include <cstring>
#include <iomanip>

#define pb push_back
#define mp make_pair

using namespace std;

typedef long long ll;
typedef pair<int, int> pi;
typedef pair<long long, long long> pll;

const int MOD = 1e9 + 7;

vector<pi> E[100005];
int below[100005];
bool seen[100005];
bool seen2[100005];
int V[100005];
int S[100005];
ll dist[100005];

multiset<ll> minimos;

void dfs(int node, ll d){
	seen[node] = true;
	
	S[node] = 1;
	dist[node] = d - *minimos.begin();
	
	//cout << node << " " << dist[node] << " " << d << " " << *minimos.begin() << endl;
	minimos.insert( d );
	for(int i = 0; i < E[node].size(); i++){
		int to  = E[node][i].first;
		int weight = E[node][i].second;
		ll cur_dist = d + 1LL * weight;
		
		if( seen[to] ) continue;
		
		dfs(to, cur_dist);
		
		S[node] += S[to];
	}
	minimos.erase( minimos.find(d) );
	
}

int dfs2(int node){
	

	seen2[node]  = true;
	int ans = 0;
	
	for(int i = 0; i < E[node].size(); i++){
		int to = E[node][i].first;
		
		if(seen2[to]) continue;
		
		if( dist[to] > V[to] ) ans += S[to];
		else ans += dfs2(to);
	}
	
	
	return ans;
}


int main(){

	int n; scanf("%d", &n);
	
	for(int i = 1; i <= n; i++)
		scanf("%d", &V[i]);
	
	minimos.insert(0);
	
		
	for(int i = 2; i <= n; i++){
		int dad, weight; scanf("%d %d", &dad, &weight);
		
		E[dad].push_back( mp( i, weight) );
		
		E[i].push_back( mp(dad, weight) );
	}
	
	dfs(1, 0);
	
	
	printf("%d\n", dfs2(1));
	
	return 0;
}