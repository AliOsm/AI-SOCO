// practice with Dukkha
#include <algorithm>
#include <iostream>

using namespace std;

const int N = 132674, INF = 0x3f3f3f3f;

int xl[N], yl[N], xr[N], yr[N];

int main() {
	int n; cin >> n;
	int xl1, xl2, xr1, xr2, yl1, yl2, yr1, yr2;
	xl1 = xl2 = yl1 = yl2 = -INF;
	xr1 = xr2 = yr1 = yr2 = INF;
	for (int i = 0; i < n; i++) {
		int x, y; cin >> x >> y;
		xl[i] = x, yl[i] = y;
		if (xl1 < x)
			xl2 = xl1, xl1 = x;
		else if (xl2 < x)
			xl2 = x;
		if (yl1 < y)
			yl2 = yl1, yl1 = y;
		else if (yl2 < y)
			yl2 = y;
		cin >> x >> y;
		xr[i] = x, yr[i] = y;
		if (xr1 > x)
			xr2 = xr1, xr1 = x;
		else if (xr2 > x)
			xr2 = x;
		if (yr1 > y)
			yr2 = yr1, yr1 = y;
		else if (yr2 > y)
			yr2 = y;
	}
	for (int i = 0; i < n; i++) {
		int l = xl[i], r = xr[i];
		int xl_ = xl1 == l ? xl2 : xl1;
		int xr_ = xr1 == r ? xr2 : xr1;
		if (xl_ > xr_)
			continue;
		l = yl[i], r = yr[i];
		int yl_ = yl1 == l ? yl2 : yl1;
		int yr_ = yr1 == r ? yr2 : yr1;
		if (yl_ > yr_)
			continue;
		cout << xl_ << ' ' << yl_ << '\n';
		return 0;
	}
	return 0;
}
