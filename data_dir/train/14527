#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define ll long long
#define maxn 200005
#define fr(i,j,k) for(int i=j;i<k;i++)
#define f(n) fr(i,0,n)
#define f1(n) fr(i,1,n+1)
#define ms(i) memset(i,0,sizeof(i));
#define ms1(i) memset(i,-1,sizeof(i));
struct s
{
	int nxt[2];
	int num;
	int lay;
}tree[maxn<<5];
int cur;
void insert(int num){
	int x = 1<<29;
	int pos = 1;
	for(int i=29;i>=0;i--){
		if(num&x){
			if(!tree[pos].nxt[1]){
				tree[pos].nxt[1] = ++cur;
			}
			pos = tree[pos].nxt[1];
		}
		else{
			if(!tree[pos].nxt[0]){
				tree[pos].nxt[0] = ++cur;
			}
			pos = tree[pos].nxt[0];	
		}
		tree[pos].num=num;
		tree[pos].lay = i;
		x >>= 1;
	}
}
int findmin(int x,int l,int r){
	int ret = 0;
	int rp = r;
	for(int i = tree[l].lay-1;i>=0;i--){
		if(x & (1<<i)){
			if(tree[rp].nxt[1]){
				rp = tree[rp].nxt[1];
			}
			else{
				ret += (1<<i);
				rp = tree[rp].nxt[0];
			}
		}
		else{
			if(tree[rp].nxt[0]){
				rp = tree[rp].nxt[0];
			}
			else{
				ret += (1<<i);
				rp = tree[rp].nxt[1];
			}
		}
	}
	return ret;
}
int solve(int l,int r){
	int Min = 2e9;
	queue<int>q;
	q.push(l);
	while(!q.empty()){
		int now = q.front();
		q.pop();
		if(tree[now].lay == 0){
			Min = min(Min,findmin(tree[now].num,l,r));
		}
		if(tree[now].nxt[1]){
			q.push(tree[now].nxt[1]);
		}
		if(tree[now].nxt[0]){
			q.push(tree[now].nxt[0]);
		}
	}
	return Min;
}
int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n;
	while(cin >> n){
		tree[1].lay = 30;
		cur = 1;
		f(200000){
			tree[i].nxt[0] = tree[i].nxt[1] = 0;
			tree[i].num = 0;
		}
		f1(n){
			int add;
			cin >> add;
			insert(add);
		}
		ll ans = 0;
		f1(cur){
			if(tree[i].nxt[1]&&tree[i].nxt[0]){
				ans += (1<<(tree[i].lay))/2;
				ans += solve(tree[i].nxt[0],tree[i].nxt[1]);
			}
		}
		cout << ans << endl;
	}
}