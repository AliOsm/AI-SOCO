#include<iostream>
#include<cstdio>
#include<vector>
#include<cstring>
#include<algorithm>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; i++ )

#define all(v)  v.begin() , v.end()
#define rall(v)  v.rbegin() , v.rend()
#define pb push_back

#define mp make_pair
#define fi first
#define se second

#define test puts("************test************");

#define N 5000
#define B 27LL
#define MOD1 1000000007LL
#define MOD2 1000000009LL

typedef int ll;
typedef unsigned long long ull;
typedef pair< int , int > pii;
typedef pair< ll , ll > pll;
typedef vector< int > vi;
typedef vector< vi > vvi;
typedef vector< ll > vll;
typedef vector< ull > vull;
typedef vector< pii > vpii;
typedef vector< vpii > vvpii;
typedef vector< pll > vpll;
typedef vector< vpll > vvpll;
typedef vector< string > vs;

vpll allSubstr( char s[ N + 5 ] ){
    int n = strlen( s );
    REP( i , n ) s[ i ] = s[ i ] - 'a' + 1;
    vpll v( (n *( n + 1 ))/2 );
    int sz = 0;
    for( int i = 0 ; i < n ; ++i ){
        ll H1 = 0 , H2 = 0;
        for( int j = i ; j < n ; ++j ){
            //H1 = ( H1 * B + s[ j ] )%MOD1;
            //H2 = ( H2 * B + s[ j ] )%MOD2;
            H1 = ( H1 * B + s[ j ] );
            H2 ++;
            v[ sz ++ ] = ( mp( H1 , H2 ) );
        }
    }
    sort( all( v ) );
    return v;
}
vpll hashes[ 10 ];
int L[ 10 ] , R[ 10 ];
char s[ N + 5 ] , t[ N + 5 ];
int main(){
    int m , n;
    while( scanf( "%s" , s ) == 1 ){
        sc( m );
        REP( i , m ){
            scanf( "%s%d%d" , t , &L[ i ] , &R[ i ] );
            hashes[ i ] = allSubstr( t );
        }
        int n = strlen( s );
        REP( i , n ) s[ i ] = s[ i ] - 'a' + 1 ;
        vpll v( (n *( n + 1 ))/2 );
        int sz = 0;
        for( int i = 0 ; i < n ; ++i ){
            ll H1 = 0 , H2 = 0;
            for( int j = i ; j < n ; ++j ){
                /*
                H1 = ( H1 * B + s[ j ] )%MOD1;
                H2 = ( H2 * B + s[ j ] )%MOD2;
                */
                H1 = H1 * B + s[ j ];
                H2 ++;
                pll target = mp( H1 , H2 );
                v[ sz ++ ] =( target );
            }
        }
        sort( all( v ) );
        int nv = unique( all( v ) ) - v.begin() , ans = 0;
        REP( i , nv ){
            pll target = v[ i ];
            bool solve = 1;
            REP( k , m ){
                int cnt = upper_bound( all( hashes[ k ] ) , target ) - lower_bound( all( hashes[ k ] ) , target );
                if( L[ k ] <= cnt && cnt <= R[ k ] ) continue;
                solve = 0;
                break;
            }
            if( solve ) ans ++;
        }
        printf( "%d\n" , ans );
    }
}
