/*
ID: hepic
PROG: sabotage
LANG: C++11
*/
#include <bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i<=b; ++i)
#define REP(i, a, b) for(auto i=a; i<b; ++i)
#define FORI(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REPI(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define PI acos(-1)
#define open_read1 freopen("a.txt", "r", stdin)
#define open_write1 freopen("b.xt", "w", stdout)
#define open_read freopen("team.in", "r", stdin)
#define open_write freopen("team.out", "w", stdout)

using namespace std;

typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair<double, double> PDD;
typedef pair<int, int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<ULL, ULL> PUU;
typedef pair<LL, PLL> PLPLL;
typedef pair<PLL, PLL> PPLLPLL;
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    out<<"("<<obj.first<<","<<obj.second<<")";
    return out;
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, multiset<T> cont)
{
    typename multiset<T>::const_iterator itr = cont.begin();
    typename multiset<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N])
{
     REP(i, 0, N)
        out<<arr[i]<<" ";
    out<<endl;

    return out;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}


template<typename T>
T fast_exp_pow(T base, T exp, T mod)
{
    LL res = 1;

    while(exp)
    {
        if(exp&1)
        {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;

    }

    return res % mod;
}

/*#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################*/

#define SIZE 100010

int N, root = -1;
int perm[SIZE], parent[SIZE], Rank[SIZE];
map<PII, bool> visited;
vector<PII> edges;
vector<int> graph[SIZE];


int Find(int node)
{
    return (node != parent[node] ? parent[node] = Find(parent[node]) : parent[node]);
}


void Union(int node1, int node2)
{
    if(Rank[node1] > Rank[node2])
    {
        parent[node2] = node1;
        Rank[node1] += Rank[node2];
    }

    else
    {
        parent[node1] = node2;
        Rank[node2] += Rank[node1];
    }
}


void dfs(int node, int conn_node)
{
    int par_1 = Find(node);
    int par_2 = Find(conn_node);
    
    //cout<<node<<" "<<conn_node<<" -> "<<par_1<<" "<<par_2<<endl;
    
    if(par_1 != par_2)
    {
      //  cout<<"insert "<<node<<" "<<conn_node<<endl;
        graph[node].pb(conn_node);
        edges.eb(node, conn_node);
        
        visited[mp(node, conn_node)] = visited[mp(conn_node, node)] = true;
        Union(par_1, par_2);

        dfs(perm[node], perm[conn_node]);
    }
}



int main()
{
    scanf("%d", &N);
    
    FOR(i, 1, N)
    {
        scanf("%d", perm+i);
        
        parent[i] = i;
        Rank[i] = 1;
        
        if(perm[i] == i)
            root = i;
    }
    
    if(root == -1)
    {
        FOR(i, 1, N)
            if(perm[perm[i]] == i)
                root = i;
    }
    
    if(root != -1)
    {
        if(root != perm[root])
        {
            graph[root].pb(perm[root]);
            edges.eb(root, perm[root]);
            
            visited[mp(root, perm[root])] = visited[mp(perm[root], root)] = true;
            Union(root, perm[root]);
        }

        FOR(i, 1, N)
            if(root != i)
                dfs(root, i);

        for(auto elem: edges)
            if(!visited.count(mp(perm[elem.fir], perm[elem.sec])))
            {
                printf("NO\n");
                return 0;
            }

        printf("YES\n");
        
        FOR(i, 1, N)
            for(auto elem: graph[i])
                printf("%d %d\n", i, elem);
        
        return 0;
    }

    printf("NO\n");

    return 0;
}
