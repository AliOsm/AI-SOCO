#include<bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; ++i )
#define clr( t , val ) memset( t , val , sizeof( t ) )

#define pb push_back
#define all( v ) v.begin() , v.end()
#define SZ( v ) ((int)(v).size())

#define mp make_pair
#define fi first
#define se second

#define N 10000000
#define INF (1LL<<60)

typedef pair< int , int > pii;
typedef long long ll;
typedef vector< int > vi;

int P[ N + 5 ];
vi primes;
ll AC[ N + 5 ] , EXP[ N + 5 ];
void primefact( int n , ll val ){
    while( 1 ){
        if( n == 1 ) return;
        if( P[ n ] == -1 ){
            EXP[ n ] += val;
            return;
        }
        int pr = P[ n ];
        while( n % pr == 0 ) n /= pr , EXP[ pr ] += val;
    }
}
void sieve(){
    clr( P , -1 );
    for( int i = 2 ; i * i <= N ; ++i )
        if( P[ i ] == -1 ) {
            for( int j = i * i ; j <= N ; j += i ) P[ j ] = i;
        }
    for( int i = 2 ; i <= N ; ++i )
        if( P[ i ] == -1 ) primes.pb( i );
}
ll get( ll n , ll p ){
    ll ans = 0;
    while( n ){
        ans += n/p;
        n /= p;
    }
    return ans;
}

bool f( ll n ){
    REP( i , SZ( primes ) ){
        ll cnt = get( n , primes[ i ] );
      if( cnt < EXP[ primes[ i ] ] ) return 0;
    }
    return 1;
}

int main(){
    sieve();
    int n;
    while( sc( n ) == 1 ){
        clr( AC , 0 ) , clr( EXP , 0 );
        REP( i , n ) {  
            int x;
            sc( x );
            AC[ 1 ] ++ , AC[ x + 1 ] --;
        }
        for( int i = 1 ; i <= N ; ++i ) AC[ i ] = AC[ i ] + AC[ i - 1 ]; 
        for( int i = 2 ; i <= N ; ++i )
                primefact( i , AC[ i ] );

        ll lo = 1 , hi = INF;
        if( f( lo ) ){
            cout << lo << '\n';
            continue;
        }
        while( hi - lo > 1 ){
            ll med = (lo + hi)>>1;
            if( f( med ) ) hi = med;
            else lo = med;
        }
        cout << hi << '\n';
    }
}
