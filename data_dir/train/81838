#include <iostream>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template<typename T>
using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;


#define loop(i,n) for(int i = 0;i < int(n);i++)
#define rloop(i,n) for(int i = int(n);i >= 0;i--)
#define range(i,a,b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1,v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1,v2,v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1,v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1,v2,v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3)
#define endl '\n'

typedef vector<int> vi;
typedef vector<pair<int,int> > vii;
typedef long long ll;
typedef pair<int, int> pii;



int main()
{

#ifndef ONLINE_JUDGE
	//freopen("in.in", "r", stdin);
	//freopen("out.in", "w", stdout);
#endif
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    Tree<pii> X;
    int n, g = 0;
    cin >> n;
    vector<vi> adj(n);
    vi mn(n) , mx(n) , sz(n) , good(n);
    loop(i,n){
        cin >> sz[i];
        adj[i].resize(sz[i]);
        loop(j,sz[i]){
            cin >> adj[i][j];
            if(j){
                if(adj[i][j] > mn[i])good[i] = true;
                mn[i] = min(mn[i] , adj[i][j]);
                mx[i] = max(mx[i] , adj[i][j]);
            }else{
                mn[i] = adj[i][j];
                mx[i] = adj[i][j];
            }
        }
        if(good[i])
            g++;
        else
            X.insert({mn[i],i});
    }


    ll ans = 0;
    loop(i,n){
        if(good[i])
            ans += n;
        else
            ans += X.order_of_key(mp(mx[i],-1)) + g;
    }

    cout << ans << endl;



    return 0;
}
