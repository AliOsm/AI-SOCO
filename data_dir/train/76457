#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <map>
#include <vector>
#include <utility>
#include <set>
#include <algorithm>
#define ll long long

using namespace std;


int pos[222222];



ll Solve2(ll num_filled, ll pos) {
    
    
    ll fr = pos-1-num_filled;
    
    ll npos = 2*fr;
    
    if (num_filled >= 2*fr-1)
        return npos;
    else
        return Solve2(num_filled, npos);
    
    
}


ll Solve(ll n, ll x) {
    
    
    ll pos = 2*x-1;
    
    // x+1 to n
    ll up = n-x;
    ll low = x-1;
    
    // low+up,pos
    
    if (pos-1 <= low+up)
        return pos;
    else
        return Solve2(low+up,pos);
}



int main() {
    
    ll n;
    cin>>n;
    
    ll curr = 1;
    ll tp=2;
    
    map<ll,pair<ll,ll>> starts;
    
    
    vector<ll> sts;
    vector<ll> fposs;
    vector<ll> szs;
    vector<ll> steps;
    
    while(1) {
        ll fpos = Solve(n,curr);
        //printf("%lld starts at %lld\n",curr,fpos);
        ll k = (n-fpos)/tp;

        
        sts.push_back(curr);
        fposs.push_back(fpos);
        szs.push_back(k+1);
        steps.push_back(tp);
        
        
        // fpos,fpos+2,...
        // fpos+2*k <= n
        // 2*k <= n-fpos
        // k = (n-fpos)/2
        
        
        curr += k+1;
        
        tp*=2;
        
        
        if (curr > n)
            break;
        
    }
    
    int Q;
    cin>>Q;
    
    
    for(int q=1;q<=Q;q++) {
        ll x;
        cin>>x;
        
        ll ans = -1;
        
        for(int i=0;i<sts.size();i++) {
            ll st = sts[i];
            ll fpos = fposs[i];
            ll sz = szs[i];
            ll step = steps[i];
            
            if ((x-fpos)%step==0) {
                ans = st+(x-fpos)/step;
                break;
            }
        }
        cout << ans << endl;
    }
    return 0;
    
    /*
    
    while(1) {
        ll n,x;
        cin>>n>>x;
        cout << Solve(n, x) << endl;
    }
    
    
    int n;
    cin>>n;
    vector<int> A(2*n-1,-1);
    for(int i=0;i<2*n-1;i+=2) {
        A[i]=i/2;
    }
    
    while(1) {
        int id=-1;
        for(int i=0;i<2*n-1;i++) {
            if (A[i]!=-1) {
                id=i;
            }
        }
        
        int first_empty=-1;
        for(int j=id-1;j>=0;j--) {
            if (A[j]==-1) {
                first_empty=j;
                break;
            }
        }
        
        if (first_empty==-1)
            break;
        A[first_empty]=A[id];
        A[id]=-1;
        
    }
    
    
    for(int i=0;i<n;i++)
        printf("%d ",A[i]+1);
    
    for(int i=0;i<n;i++) {
        pos[A[i]+1]=i+1;
    }
    
    cout << endl;
    
    pos[0]=n+1000;
    int ct=0;
    vector<int> cts;
    for(int i=1;i<=n;i++) {
        if (pos[i]<pos[i-1]) {
            printf("%d %d :: left=%d\n",i,pos[i],n-i+1);
            cts.push_back(ct);
            ct=0;
        }
            ct++;
        
    }
    cts.push_back(ct);
    
    ll prev_filled = 0;
    
    
    for(int x : cts)
        printf("%d\n",x);
    
    */
    
}
