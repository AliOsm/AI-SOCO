//==================================================================
//Author        : Nguyen Trung Hieu - vuondenthanhcong11@yahoo.com
//Problem Name  :
//Discription   :
//Reference from:
//==================================================================

// -------------------- include all libraries ------------------
#include<bits/stdc++.h>

using namespace std;

// -------------------- Redefine container ---------------------
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<string> vs;

typedef long long int64;
typedef unsigned long long uint64;
typedef unsigned uint;

// -------------------- Redefine some operator ------------------
#define forn(i,a,b)     for (int i=(a),_b=(b); i<_b; i++)
#define rforn(i,b,a)    for (int i=(b)-1,_a=(a); i>=_a; i--)
#define reset(a,b)      memset((a),(b),sizeof(a))
#define fi              first
#define se              second
#define pb              push_back
#define all(x)          (x).begin(),(x).end()
#define mp(x,y)         make_pair(x,x)
#define foreach(i, c)   for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)

#define debug(x)        {cerr<<#x<<" = "<<x<< endl;}
#define debugArr(a,x,y) {cerr<<#a<<" = ";forn(_,x,y) cerr << a[_] << ' '; cerr <<endl;}

// ===================== Begin template =========================
// --------------------- Quick input output ---------------------
inline int in(){int x=0,c;for(;(uint)((c=getchar())-'0')>= 10;){if(c=='-')return -in();if(!~c)throw~0;}do{x=(x<<3)+(x<<1)+(c-'0');}while((uint)((c=getchar())-'0')<10);return x;}
inline int64 in64(){int64 x=0,c;for(;(uint)((c=getchar())-'0')>=10;){if(c=='-')return -in();if(!~c)throw~0;}do{x=(x<<3)+(x<<1)+(c-'0');}while((uint)((c=getchar())-'0')<10);return x;}
inline void out(int n){char buf[33];int i=30;if(n<0)putchar('-'),n=-n;do{buf[i--]='0'+n%10;n/=10;}while(n);while(i<30)putchar(buf[++i]);}
inline void out64(int64 n){char buf[55];int i=50;if(n<0)putchar('-'),n=-n;do{buf[i--]='0'+n%10;n/=10;}while(n);while(i<50)putchar(buf[++i]);}

// ===================== End template ===========================
// --------------------- Start code ------------------------------

struct SegTree {
    int64 tree[550000];
    int m;

    void build(int len, vector<int> A) {
        m = 1;
        memset(tree, 0, sizeof tree);
        while(m - 1 <= len) {
            m *= 2;
        }
        forn(i, 1, len + 1) {
            tree[i + m] = A[i - 1];
        }
        rforn(i, m, 1) {
            tree[i] = max(tree[(i << 1)], tree[(i << 1)+1]);
        }
        rforn(i, len + m + 1, 1) {
            tree[i] = tree[i] - tree[i >> 1];
        }
    }

    inline int64 query(int left, int right) {
        int64 lAns = 0, rAns = 0;
        left += m, right += m;
        //printf("%d %d %d---\n", l, r, m);
        if(left != right) {
            for(; left ^ right ^ 1; left >>= 1, right >>= 1) {
                //printf("%d---%d\n", l, r);
                lAns += tree[left], rAns += tree[right];
                if(~left&1) lAns = max(lAns, tree[left^1]);
                if(right&1) rAns = max(rAns, tree[right^1]);
            }
        }
        //printf("%d %d %d lr\n", lAns, rAns, tree[l]);
        int64 ans = max(lAns+tree[left], rAns+tree[right]);
        while(left > 1) ans += tree[left>>=1];
        return ans;
    }
};

int n, m, k, answer[5];
vector<int> A[5];
SegTree tree[5];

bool isOk(int len) {
    for (int i = 1; i + len <= n; i++) {
        int sum = 0;
        for (int j = 0; j < m; j++) {
            int val = tree[j].query(i, i + len);
            sum += val;
            answer[j] = val;
        }
        if (sum <= k) {
            return true;
        }
    }
    return false;
}

int main() {
    //freopen ("input.txt", "r", stdin);
    //freopen ("output.txt", "w", stdout);
    n = in();
    m = in();
    k = in();
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            A[j].push_back(in());
        }
    }
    for (int i = 0; i < m; i++) {
        tree[i].build(n, A[i]);
    }
    
    int left = 0;
    int right = n;
    while (right - left > 1) {
        int mid = (right + left) >> 1;
        if (isOk(mid)) {
            left = mid;
        } else {
            right = mid;
        }
    }

    if (isOk(right)) {
        for (int i = 0; i < m; i++) {
            printf("%d ", answer[i]);
        }
    } else if (isOk(left)) {
        for (int i = 0; i < m; i++) {
            printf("%d ", answer[i]);
        }
    } else {
        for (int i = 0; i < m; i++) {
            printf("0 ");
        }
    }
}
