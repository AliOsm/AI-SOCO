#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define V vector
#define MP make_pair
#define MAX INT_MAX
#define MIN INT_MIN
#define all(v)  ((v).begin()), ((v).end())
#define allr(v) ((v).rbegin()), ((v).rend())
#define clr(v, d) memset(v, d, sizeof(v))
#define sf(x) scanf("%d", &x)
#define sf2(x, y) scanf("%d %d", &x, &y)
#define sf3(x, y, z) scanf("%d %d %d", &x, &y, &z)
#define sfll(x) scanf("%I64d", &x)
#define sfll2(x, y) scanf("%I64d %I64d", &x, &y)
#define sfll3(x, y, z) scanf("%I64d %I64d %I64d", &x, &y, &z)
//ios_base::sync_with_stdio(0);cin.tie(0); cout.tie(0);
int dx[]{1, -1, 0, 0, 1, -1, 1, -1};
int dy[]{0, 0, 1, -1, 1, -1, -1, 1};
typedef unsigned long long          ull;
typedef long long                   ll;
typedef long double                 LD;
const ll mod = 1e9 + 7 , size = 100005;
bool isprime(int x){
	if (x <= 1) return 0;
	for (ll i = 2; i * i <= x; i++){
		if (x % i == 0)
			return 0;
	}
	return 1;
}
bool ar[size];
V<int>pr;
ll fact[35 * 500 + 500];
void seiv(){
	for (ll i = 2; i < size; i++){
		if (ar[i] == 0){
			pr.push_back(i);
			for (ll j = i * i; j < size; j += i){
				ar[j] = 1;
			}
		}
	}
	fact[0] = fact[1] = 1;
	for (int i = 2; i < 35 * 500 + 500; i++){
		fact[i] = (fact[i - 1] * i) % mod;
	}
}
ll pw(ll a, ll p){
	if (p == 1) return a;
	if (p == 0) return 1;
	ll ret = pw(a, p / 2) % mod;
	ret = (ret * ret) % mod;
	if (p % 2 == 1) ret = (ret * a) % mod;
	return ret;
}
ll C(ll n, ll k){
	return (fact[n] * pw((fact[n - k] * fact[k]) % mod, mod - 2)) % mod;
}
int main()
{
	ll n, k, a, b, q, p, t, x;
	seiv();
	while (cin >> n){
		unordered_map<int, int> mp;
		unordered_map<int, int> ::iterator it;
		for (int i = 0; i < n; i++){
			sfll(t);
			int st = 0;
			while (st < pr.size() && t != 1){
				while (t % pr[st] == 0) t /= pr[st] , mp[pr[st]]++;
				st++;
			}
			if (t > 1 && isprime(t)) mp[t] ++;
		}
		ll ans = 1;
		for (it = mp.begin(); it != mp.end(); it++){
			ans = (ans * C(it->second + n - 1, n - 1)) % mod;
		}
		cout << ans << endl;
	}

	return 0;
}