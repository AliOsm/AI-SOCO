#define _CRT_SECURE_NO_WARNINGS
#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <cstdio>
#include <math.h>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <bitset>
#include <map>
using namespace std;

const int N = 100001;

int n;
int R[N];
int tMax[1 << 19];
long long dp[N];


void build(int v, int tl, int tr)
{
	if (tl == tr)
	{
		tMax[v] = tl;
		return;
	}
	int tm = (tl + tr) / 2;
	build(2 * v, tl, tm);
	build(2 * v + 1, tm + 1, tr);
	if (R[tMax[2 * v]] > R[tMax[2 * v + 1]])
		tMax[v] = tMax[2 * v];
	else
		tMax[v] = tMax[2 * v + 1];
}

int getMax(int v, int tl, int tr, int l, int r)
{
	if (l > r)
		return -1;
	if (tl == l && tr == r)
		return tMax[v];
	int tm = (tl + tr) / 2;
	int p1 = getMax(2 * v, tl, tm, l, min(r, tm));
	int p2 = getMax(2 * v + 1, tm + 1, tr, max(l, tm + 1), r);
	if (p1 == -1)
		return p2;
	if (p2 == -1)
		return p1;
	if (R[p1] > R[p2])
		return p1;
	else
		return p2;
}




int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	scanf("%d", &n);
	for (int i = 0; i < n - 1; ++i)
	{
		scanf("%d", &R[i]); R[i]--;
	}
	R[n - 1] = n - 1;
	build(1, 0, n - 1);
	dp[n - 1] = 0;
	long long ans = 0;
	for (int i = n - 2; i >= 0; --i)
	{
		int pos = getMax(1, 0, n - 1, i + 1, R[i]);
		dp[i] = dp[pos] - (R[i] - pos) + n - i - 1;
		ans += dp[i];
	}
	printf("%I64d\n", ans);
	return 0;
}