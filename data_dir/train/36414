#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
    #define EXPECT(expr)
#endif
#define NO_IO_TIE ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
if(! a.size()){ size_t n; fin >> n; a.resize( n ); }
for( auto & u: a) fin >> u; return fin; }
/* @@@ ----------------------------------- */

void probC()
{
    size_t n;
    int64_t acc;
    cin >> n >> acc;
    vector< int64_t > d( n );
    cin >> d;

    const auto xmax = accumulate(begin(d), end(d), 0LL);
    vector< int64_t > soln;
    soln.reserve( n );

    for( const auto & val: d )
    {
        /* minimum value of this dice */
        const auto lb = max(1LL, acc - (xmax - val));

        /* maximum value of this dice */
        const auto ub = min(val, acc - (int64_t)(n - 1LL));

        soln.push_back( val - (ub - lb + 1LL));
    }

    copy(begin(soln), end(soln), ostream_iterator< int64_t >(cout, " "));
}

int main( const int argc, char * argv [])
{
    NO_IO_TIE;
    probC();

    return EXIT_SUCCESS;
}
