#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define int ll
#define endl '\n';
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define floop(i,a,b) for(int i=a;i<=b;++i)
const ll mod=1e9+7;
const int maxn=2e5+5;
int shortest[3][maxn];
vector<int> v[maxn];
int n,m,a,b,c;
void bfs(int i,int x){
	set<pair<int,int> >s;
	s.insert({0,x});
	vector<bool> visited(n+1,0);
	while(!s.empty()){
		auto it=s.begin();
		int id = (*it).second;
		int dist = (*it).first;
		// cout<<id<<" "<<dist<<" "<<visited[id]<<endl;
		s.erase(it);
		if(visited[id]) continue;
		visited[id] = 1;
		shortest[i][id] = dist;
		for(const auto &j:v[id]){
			// cout<<id<<" child "<<j<<endl;
			if(visited[j]) continue;
			// cout<<"not visited "<<j<<" "<<dist+1<<endl;
			s.insert({dist+1,j});
		}
	}
}
int f(){
	cin>>n>>m>>a>>b>>c;
	vector<int>p(m,0);
	for (int i = 0; i < m; ++i)
	{
		cin>>p[i];
	}
	sort(p.begin(), p.end());
	floop(i,1,m-1){
		p[i] += p[i-1];
	}
	for (int i = 0; i < m; ++i)
	{
		int x,y;
		cin>>x>>y;
		v[x].emplace_back(y);
		v[y].emplace_back(x);
	}
	bfs(0,a);
	bfs(1,b);
	bfs(2,c);
	int ans = 1e17;
	// cout<<shortest[0][5]<<" "<<shortest[1][5]<<" "<<shortest[2][5]<<endl;
	floop(i,1,n){
		int temp =0;
		for (int j = 0; j < 3; ++j)
		{
			temp += shortest[j][i];
		}
		if(temp>m) continue;
		int curr=0;
		if(temp>0) curr += p[temp-1];
		if(shortest[1][i]>0)  curr += p[shortest[1][i]-1];
		ans = min(ans, curr);
	}
	floop(i,1,n) v[i].clear();
	return ans;
}
int32_t main(){
	IOS;	
	int t;
	cin>>t;
	while(t--){
		cout<<f()<<endl;
	}
	return 0;
}