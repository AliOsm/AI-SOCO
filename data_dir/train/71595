#include <bits/stdc++.h>
using namespace std;

const int64_t INF = 1e15;
struct Dinic{
    struct edge {
        int64_t to, cap, rev;
        edge(int64_t to, int64_t cap, int64_t rev):to(to), cap(cap), rev(rev){}
    };

    int N, S, T;
    int64_t flow = 0;
    vector<int> level, iter;
    vector<vector<edge>> G;

    Dinic(int N, int S, int T):N(N), S(S), T(T){
        flow = 0;
        level.resize(N);
        iter.resize(N);
        G.resize(N);
    }

    void add_edge(int from, int to, int64_t cap){
        G[from].emplace_back(to, cap, G[to].size());
        G[to].emplace_back(from, 0, G[from].size()-1);
    }

    void bfs(int s){
        fill(level.begin(), level.end(), -1);
        queue<int> que;
        level[s] = 0;
        que.push(s);
        while(que.size()){
            int v = que.front(); que.pop();
            for(auto& e : G[v]){
                if(e.cap > 0 && level[e.to] < 0){
                    level[e.to] = level[v] + 1;
                    que.push(e.to);
                }
            }
        }
    }

    int64_t dfs(int v, int t, int64_t f){
        if(v == t) return f;
        for(int& i=iter[v]; i<G[v].size(); i++){
            auto& e = G[v][i];
            if(e.cap > 0 && level[v] < level[e.to]){
                int64_t d = dfs(e.to, t, min(f, e.cap));
                if(d > 0){
                    e.cap -= d;
                    G[e.to][e.rev].cap += d;
                    return d;
                }
            }
        }
        return 0;
    }

    int64_t max_flow(){
        while(true){
            bfs(S);
            if(level[T] < 0) return flow;
            fill(iter.begin(), iter.end(), 0);
            while(true){
                int64_t f = dfs(S, T, INF);
                if(f == 0) break;
                flow += f;
            }
        }
    }
};

int main(){
    int N, M;
    cin >> N >> M;
    int X1[50], X2[50], Y1[50], Y2[50];
    vector<int> xs, ys;
    for(int i=0; i<M; i++){
        cin >> X1[i] >> Y1[i] >> X2[i] >> Y2[i];
        X2[i]++; Y2[i]++;
        xs.push_back(X1[i]);
        xs.push_back(X2[i]);
        ys.push_back(Y1[i]);
        ys.push_back(Y2[i]);
    }
    sort(xs.begin(), xs.end());
    sort(ys.begin(), ys.end());
    int S = 250, T = 251;
    Dinic solver(T+1, S, T);
    for(int i=0; i<2*M-1; i++){
        int s = xs[i], t = xs[i+1];
        int d = t-s;
        solver.add_edge(S, i, d);
        for(int j=0; j<M; j++) if(X1[j] <= s && t <= X2[j]) solver.add_edge(i, 200+j, INF);
    }
    for(int i=0; i<2*M-1; i++){
        int s = ys[i], t = ys[i+1];
        int d = t-s;
        solver.add_edge(100+i, T, d);
        for(int j=0; j<M; j++) if(Y1[j] <= s && t <= Y2[j]) solver.add_edge(200+j, 100+i, INF);
    }
    int64_t ans = solver.max_flow();
    cout << ans << endl;
    return 0;
}
