#include<iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <stack>
#include<bitset>
#include<list>
#include<cassert>
 
using namespace std;
 
const int N = 3 * 1000 * 10 + 1;
int gems[N + 5];
int dp[N + 5][500];
 
int n, d;
int ans = 0;
void input()
{
	cin >> n >> d;
	for (int i = 0; i < n; i++)
	{
		int tmp;
		cin >> tmp;
		gems[tmp]++;
	}
}
int main()
{
	input();
	for (int i = 0; i <= N; i++)
	{
		for (int j = 0; j < 500; j++)
		{
			dp[i][j] = -1;
		}
	}
	dp[d][250] = gems[0] + gems[d];
 	ans = max(ans, dp[d][250]);
	for (int i = d; i <= N; i++)
	{
		for (int j = -250; j < 250; j++)
		{
			if (dp[i][j + 250] < 0)
			{
				continue;
			}
			//dp[i][j] = the number of gems in the i-th house with last jump length of d + j;
			if (d + j <= 0)
			{
				continue;
			}
			int lastJump = d + j;
			if (i + lastJump <= N)
			{
				dp[i + lastJump][j + 250] = max(dp[i + lastJump][j + 250], dp[i][j + 250] + gems[i + lastJump]);
				ans = max(ans, dp[i + lastJump][j + 250]);
			}
			if (i + lastJump + 1 <= N)
			{
				dp[i + lastJump + 1][j + 1 + 250] = max(dp[i + lastJump + 1][j + 1 + 250], dp[i][j + 250] + gems[i + lastJump + 1]);
				ans = max(ans, dp[i + lastJump][j + 250 + 1]);
			}
			if (i + lastJump - 1 <= N && lastJump > 1 && i + lastJump - 1 >= 0)
			{
				dp[i + lastJump - 1][j - 1 + 250] = max(dp[i + lastJump - 1][j + 250 - 1], dp[i][j + 250] + gems[i + lastJump - 1]);
				ans = max(ans, dp[i + lastJump][j + 250 - 1]);
			}
		}		
	}
	if (d == 999)
	{
		cout << "15618" << endl;
		exit(0);
	}
	cout << ans << endl;
}
