#include<bits/stdc++.h>
using namespace std;
int a,s,d[400002][2],f[400002],h,j,k,l,i,n,m;
long long g;
vector<int> v[400002];
struct tre{
    long long val;
    long long shep;
    tre *L;
    tre *R;
    tre(){
        val=0;
        shep=0;
        L=NULL;
        R=NULL;
    }
};

void shd(tre *&it,int rd){
    if(rd==1){it->shep=0;return;}
    it->L->val=it->shep;
    it->R->val=it->shep;
    it->L->shep=it->shep;
    it->R->shep=it->shep;
    it->shep=0;
}

void bld(tre *&it,int l,int r,int idx,long long val){
    if(l>idx || r<=idx) return;
    if(!it) it=new tre();
    it->val|=val;
    if(l+1==r) return;
    bld(it->L,l,(l+r)/2,idx,val);
    bld(it->R,(l+r)/2,r,idx,val);

}

void add(tre *&it,int l,int r,int lf,int rg,long long val){
    if(l>=rg || r<=lf) return;
    if(l>=lf && r<=rg) {it->val=val;it->shep=val;return;}
    if(it->shep) shd(it,r-l);
    add(it->L,l,(l+r)/2,lf,rg,val);
    add(it->R,(l+r)/2,r,lf,rg,val);
    //cout<<l<<" "<<r<<"-> "<<"("<<lf<<" "<<rg<<") "<<it->val<<"("<<it->L->val<<" "<<it->R->val<<")"<<" : ";
    it->val=it->L->val|it->R->val;
    //cout<<it->val<<";\n";
}

long long sum(tre *&it,int l,int r,int lf,int rg){
    if(l>=rg || r<=lf) return 0;

    if(it->shep) shd(it,r-l);
    if(l>=lf && r<=rg) return it->val;
    return sum(it->L,l,(l+r)/2,lf,rg)|sum(it->R,(l+r)/2,r,lf,rg);
}
////////////////////////////////////////////////////////////////////////

void dfs(int idx,int par){
    j++;
    d[idx][0]=j;
    for(auto it:v[idx]){
        if(it==par) continue;
        dfs(it,idx);
    }
    d[idx][1]=j+1;
}
main(){
    tre *root=NULL;
    cin>>n>>m;
    for(i=1;i<=n;i++){
        scanf("%d",&f[i]);
    }

    for(i=0;i<n-1;i++){
        scanf("%d%d",&a,&s);
        v[a].push_back(s);
        v[s].push_back(a);
    }

    dfs(1,0);
    for(i=1;i<=n;i++){
        bld(root,1,n+1,d[i][0],(1ll<<f[i]));
    }
    for(i=0;i<m;i++){
        scanf("%d",&a);
        if(a==1){
            scanf("%d%d",&a,&s);

            add(root,1,n+1,d[a][0],d[a][1],(1ll<<s));
        }
        else{
            scanf("%d",&a);
            g=sum(root,1,n+1,d[a][0],d[a][1]);
            printf("%d\n",__builtin_popcountll(g));
        }
    }
}