#include<bits/stdc++.h>

using namespace std;

#define ll long long
#define X first
#define Y second
#define all(x) x.begin(), x.end()

const int MX = (int)1e6 + 10;
const int mod = (int)1e9 + 7;

void inline addMod(int &x, int y){
    x += y;
    while(x >= mod) x -= mod;
}

int n;

struct SegmentTree{

    vector<int> tree;
    vector<int> a;

    SegmentTree(const vector<int> &a){
        tree.resize(n * 4, (int)1e9);
        this-> a = a;
        build(1, 0, n - 1);
    }

    void build(int idx, int lf, int rg){
        if(lf == rg){
            tree[idx] = a[lf];
            return;
        }
        int md = lf + (rg - lf) / 2;
        build(idx * 2, lf, md);
        build(idx * 2 + 1, md + 1, rg);
        tree[idx] = min(tree[idx * 2], tree[idx * 2 + 1]);
    }

    int query(int l, int r, int lf = 0, int rg = n - 1, int idx = 1)
    {
        if(lf >= l && rg <= r) return tree[idx];
        if(rg < l || lf > r) return (int)1e9;
        int md = lf + (rg - lf) / 2;
        int lx = query(l, r, lf, md, idx * 2);
        int rx = query(l, r, md + 1, rg, idx * 2 + 1);
        return min(lx, rx);
    }

    void update(int x, int lf = 0, int rg = n - 1, int idx = 1){
        if(lf > x || rg < x) return;
        if(lf == rg && lf == x){
            tree[idx] = (int)1e9;
            return;
        }
        int md = lf + (rg - lf) / 2;
        update(x, lf, md, idx * 2);
        update(x, md + 1, rg, idx * 2 + 1);
        tree[idx] = min(tree[idx * 2], tree[idx * 2 + 1]);
    }
    
};

int main(int argc, char *argv[])
{

    cin.tie(0); cout.tie(0);
    ios_base::sync_with_stdio(0);

    int t;
    cin >> t;

    while(t--){

        cin >> n;

        queue<int> pos[n + 1];
        
        vector<int> a(n);
        for(int i = 0; i < n; ++i){
            cin >> a[i];
            pos[a[i]].push(i);
        }

        SegmentTree seg(a);

        bool ok = true;
        for(int i = 0, x; i < n; ++i){
            cin >> x;
            if(!ok) continue;
            int idx = -1;
            if(!pos[x].empty()) idx = pos[x].front(), pos[x].pop();
            if(idx == -1 || seg.query(0, idx) < x)
                ok = false;
            seg.update(idx);
        }

        puts(ok ? "YES" : "NO");
    }

    return 0;
}