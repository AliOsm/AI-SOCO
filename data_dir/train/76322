#include<bits/stdc++.h>
#include<ext/numeric>

using namespace std;
using namespace __gnu_cxx;

typedef vector<int> vi;
typedef long long ll;

#define sz(v) (int)v.size()
#define all(v) v.begin(),v.end()
#define CLR(a,v) memset(a,v,sizeof(a))

const int MAX = 1005;

int n, k, memo[MAX][MAX][2][2];
string s;

int solve(int idx, int diff, int neg, int last) {
	if (idx == sz(s))
		return diff == k && last;
	if (diff == k)
		return 0;
	int &ret = memo[idx][diff][neg][last];
	if (~ret)
		return ret;
	ret = 0;

	if (s[idx] == '?' || s[idx] == 'L') {
		if (neg)
			ret |= solve(idx + 1, diff + 1, 1, 1);
		else {
			if (diff == 0)
				ret |= solve(idx + 1, 1, 1, 1);
			else
				ret |= solve(idx + 1, diff - 1, 0, 1);
		}
	}
	if (s[idx] == '?' || s[idx] == 'W') {
		if (!neg)
			ret |= solve(idx + 1, diff + 1, 0, 1);
		else {
			if (diff == 1)
				ret |= solve(idx + 1, 0, 0, 1);
			else
				ret |= solve(idx + 1, diff - 1, 1, 1);
		}
	}
	if (s[idx] == '?' || s[idx] == 'D')
		ret |= solve(idx + 1, diff, neg, 0);
	return ret;
}

void buildPath(int idx, int diff, int neg, int last) {
	if (idx == sz(s))
		return;

	if (s[idx] == '?' || s[idx] == 'L') {
		if (neg) {
			if (solve(idx + 1, diff + 1, 1, 1)) {
				printf("L");
				buildPath(idx + 1, diff + 1, 1, 1);
				return;
			}
		} else {
			if (diff == 0) {
				if (solve(idx + 1, 1, 1, 1)) {
					printf("L");
					buildPath(idx + 1, 1, 1, 1);
					return;
				}
			} else {
				if (solve(idx + 1, diff - 1, 0, 1)) {
					printf("L");
					buildPath(idx + 1, diff - 1, 0, 1);
					return;
				}
			}
		}
	}
	if (s[idx] == '?' || s[idx] == 'W') {
		if (!neg) {
			if (solve(idx + 1, diff + 1, 0, 1)) {
				printf("W");
				buildPath(idx + 1, diff + 1, 0, 1);
				return;
			}
		} else {
			if (diff == 1) {
				if (solve(idx + 1, 0, 0, 1)) {
					printf("W");
					buildPath(idx + 1, 0, 0, 1);
					return;
				}
			} else {
				if (solve(idx + 1, diff - 1, 1, 1)) {
					printf("W");
					buildPath(idx + 1, diff - 1, 1, 1);
					return;
				}
			}
		}
	}
	if (s[idx] == '?' || s[idx] == 'D') {
		if (solve(idx + 1, diff, neg, 0)) {
			printf("D");
			buildPath(idx + 1, diff, neg, 0);
			return;
		}
	}
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
#endif
	cin >> n >> k >> s;
	CLR(memo, -1);
	if (!solve(0, 0, 0, 0))
		return puts("NO");
	buildPath(0, 0, 0, 0);
}
