#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <iostream>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
typedef pair<char, int> pci;
typedef pair<int, char> pic;
const ll MOD = (ll)1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v[4];

int a[4];
int vec[5000];

// 00 = 0, 01 = 1, 10 = 2, 11 = 3
int main() {
	int n;
	scanf("%d", &n);

	for (int i = 0; i < n; i++) {
		scanf("%1d", &vec[i]);
		vec[i] *= 2;
	}

	for (int i = 0; i < n; i++) {
		int t;
		scanf("%1d", &t);
		vec[i] |= t;
		a[vec[i]]++;

		v[vec[i]].push_back(i + 1);
	}

	for (int i = max(0, a[3] - n / 2); i <= min(n / 2, a[3]); i++) {
		int aa = i;
		int bb = a[3] - i;

		if (aa > bb && bb + a[1] >= aa || aa <= bb && aa + a[2] >= bb) {
			int b[4] = { a[0], a[1] - max(0, aa - bb), a[2] - max(0, bb - aa), 0 };
			int k = min(b[1], b[2]);
			b[1] -= k; b[2] -= k;

			int aaa = max(aa, bb) + k, qqq;
			qqq = aaa;
			assert(b[1] >= 0 && b[2] >= 0);

			if (n / 2 - aaa >= b[1] && n / 2 - aaa >= b[2]) {
				for (int j = 0; j < aa; j++) printf("%d ", v[3][j]);
				for (int j = 0; j < aaa - aa; j++) printf("%d ", v[2][j]);
				// 반대는 bb만큼 v[3][j]가  나오고
				// aaa - bb만큼 v[1][j]가 나온다. 여태까지 똑같음.
				aaa = n / 2 - aaa;
				int asd = 0, ccc = 0;

				while (aaa--) {
					if (b[1]) {
						printf("%d ", v[1].back());
						asd++;
						b[1]--;
						v[1].pop_back();
					}

					else if (!v[0].empty()) {
						printf("%d ", v[0].back());
						ccc++;
						v[0].pop_back();
					}
				}
				// assert(qqq + asd + ccc == n / 2);
				// assert(qqq == sz(v[1]) + bb);
				
				
				return 0;
			}
		}
	}

	printf("-1");
}