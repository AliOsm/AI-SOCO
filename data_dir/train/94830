
#include <iostream>
#include <map>
using namespace std;
int Array[1000005] , SegTree[4000005];
int Back[1000005] , Front[1000005];
map<int,int> M;
map<int,int>::iterator it;

void Update( int Node , int low , int high , int index ){
	if( low == high ) ++SegTree[Node];
	else{
		int Temp = Node << 1;
		int middle = ( low + high ) >> 1;
		if( index <= middle ) Update( Temp , low , middle , index );
		else Update( Temp + 1 , middle + 1 , high , index );
		SegTree[Node] = SegTree[Temp] + SegTree[Temp + 1];
	}
}

int Query( int Node , int low , int high , int end ){
	if( low > end ) return 0;
	else if( high <= end ) return SegTree[Node];
	else{
		int Temp = Node << 1;
		int middle = ( low + high ) >> 1;
		return Query( Temp , low , middle , end ) + Query( Temp + 1 , middle + 1 , high , end );
	}
}

int main(){
	int N , i;
	scanf( "%d" , &N );

	for( i = 1 ; i <= N ; ++i ){
		scanf( "%d" , Array + i );
		it = M.find( Array[i] );

		if( it == M.end() ){ 
			M[Array[i]] = 1;
			Front[i] = 1;
		}
		else{ 
			++it->second;
			Front[i] = it->second;
		}
	}

	M.clear();
	long long Ans = 0;	

	for( i = N ; i >= 1 ; --i ){
		it = M.find( Array[i] );

		if( it == M.end() ){
			M[Array[i]] = 1;
			Back[i] = 1;
		}
		else{
			++it->second;
			Back[i] = it->second;
		}

		Ans = Ans + Query( 1 , 1 , N , Front[i] - 1 );
		Update( 1 , 1 , N , Back[i] );
	}

	printf( "%lld\n" , Ans );
	return 0;
}