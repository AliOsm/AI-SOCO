#include <bits/stdc++.h>
#define ll  long long
using namespace std;
const int N = 1e3 + 5;
int a[N][N];
vector<int> col[N];
vector<int> rows[N];

int sm(vector<int> &v, int a) {
	int s = 0, e = v.size() - 1, ans = 0;
	while (s <= e) {
		int mid = (s + e) >> 1;
		if (v[mid] < a) s = mid + 1, ans = mid + 1;
		else e = mid - 1;
	}
	return ans;
}
int g(vector<int> &v, int a) {
	int s = 0, e = v.size() - 1, ans = 0;
	while (s <= e) {
		int mid = (s + e) >> 1;
		if (v[mid] > a) e = mid - 1, ans = v.size() - mid;
		else s = mid + 1;
	}
	return ans;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int n, m;
	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		map<int, int> mp;
		for (int j = 1; j <= m; j++) {
			cin >> a[i][j];
			mp[a[i][j]] = 0;
		}
		for (auto &it : mp)
			rows[i].push_back(it.first);
	}
	for (int i = 1; i <= m; i++) {
		map<int, int> mp;
		for (int j = 1; j <= n; j++)
			mp[a[j][i]] = 0;
		for (auto &it : mp)
			col[i].push_back(it.first);
	}
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			int ans = sm(rows[i], a[i][j]) + 1 + g(col[j], a[i][j]);
			ans = max(ans, sm(col[j], a[i][j]) + 1 + g(rows[i], a[i][j]));
			ans = max(ans, (int) col[j].size());
			ans = max(ans, (int) rows[i].size());
			cout << ans << ' ';
		}
		cout << '\n';
	}
	return 0;
}
