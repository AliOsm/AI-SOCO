/*

kuch dard hai mere seene mein,
mujhe mast mohol mein jeene de.

*/
#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define fi first
#define se second
ll mpow(ll a, ll n,ll mod)
{ll ret=1;ll b=a;while(n) {if(n&1)
    ret=(ret*b)%mod;b=(b*b)%mod;n>>=1;}
return (ll)ret;
}
using namespace std;
#define sd(x) scanf("%d",&x)
#define pd(x) printf("%d",x)
#define sl(x) scanf("%lld",&x)
#define pl(x) printf("%lld",x)
#define mem(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define all(v) v.begin(),v.end()
#define N (int)(4e5+500)
set<ll> pos;
map<int,int> ma1,ma2;
multiset<pii> s;
multiset<pii>::iterator it1;
int F[N][2],M[N][2];
ll ans[N][2];
int seg[4*N],lazy[4*N];
void prop(int i){
    if(lazy[i]==INT_MAX)
        return;
    seg[2*i]=min(seg[2*i],lazy[i]);
    seg[2*i+1]=min(seg[2*i+1],lazy[i]);
    lazy[2*i]=min(lazy[2*i],lazy[i]);
    lazy[2*i+1]=min(lazy[2*i+1],lazy[i]);
    lazy[i]=INT_MAX;
}
void update(int i,int l,int r,int ql,int qr,int val){
    if(qr<l||ql>r){
        return;
    }
    if(ql<=l&&r<=qr){
        seg[i]=min(seg[i],val);
        lazy[i]=min(lazy[i],val);
        return;
    }
    int mid=(l+r)>>1;
    prop(i);
    update(2*i,l,mid,ql,qr,val);
    update(2*i+1,mid+1,r,ql,qr,val);
}
int query(int i,int l,int r,int x){
    if(x<l||x>r){
        return INT_MAX;
    }
    if(x==l&&l==r){
        return seg[i];
    }
    int mid=(l+r)>>1;
    prop(i);
    return min(query(2*i,l,mid,x),query(2*i+1,mid+1,r,x));
}
void solve(){
    int n,m;
    sd(n);sd(m);
    for(int i=1;i<4*N;i++){
        seg[i]=INT_MAX;
        lazy[i]=INT_MAX;
    }
    for(int i=1;i<=n;i++){
        sd(F[i][0]);sd(F[i][1]);
        pos.insert(F[i][0]);
        ma2[F[i][0]]=i;
        ans[i][1]=F[i][1];
    }
    for(int i=1;i<=m;i++){
        sd(M[i][0]);sd(M[i][1]);
        pos.insert(M[i][0]);
    }
    int c=0;
    for(set<ll>::iterator it=pos.begin();it!=pos.end();it++){
        ma1[*it]=++c;
    }
    for(int i=1;i<=n;i++){
        int l=F[i][0];
        int r=F[i][0]+F[i][1];
        l=ma1[l];
        set<ll>::iterator it=pos.upper_bound(r);
        if(it==pos.begin()){
            update(1,1,c,l,l,F[i][0]);
        }
        else{
            it--;
            r=ma1[*it];
            update(1,1,c,l,r,F[i][0]);
        }
    }
    for(int i=1;i<=m;i++){
        int idx=ma1[M[i][0]];
        int val=query(1,1,c,idx);
        if(val==INT_MAX){
            s.insert(mp(idx,M[i][1]));
            continue;
        }
        int frog=ma2[val];
        ans[frog][0]++;
        ans[frog][1]+=M[i][1];
        int l=ma1[val];
        while(true){
            ll r=val+ans[frog][1];
            set<ll>::iterator it=pos.upper_bound(r);
            if(it==pos.begin()){
                break;
            }
            else
                it--;
            int nidx=ma1[*it];
            while(!s.empty()){
                it1=s.lower_bound(mp(l,-1));
                if(it1==s.end())
                    break;
                if(it1->fi<=nidx){
                    ans[frog][0]++;
                    ans[frog][1]+=it1->se;
                }
                else{
                    break;
                }
                r=val+ans[frog][1];
                set<ll>::iterator it=pos.upper_bound(r);
                if(it==pos.begin()){
                    break;
                }
                else
                    it--;
                nidx=ma1[*it];
                s.erase(it1);
            }
            break;
        }
        ll r=val+ans[frog][1];
        set<ll>::iterator it=pos.upper_bound(r);
        if(it!=pos.begin())
            it--,
            r=ma1[*it];
        else
            r=l;
        update(1,1,c,l,r,val);
    }
    for(int i=1;i<=n;i++){
        pl(ans[i][0]);
        printf(" ");
        pl(ans[i][1]);
        printf("\n");
    }
}
int main(){
   //freopen("input.IN","r",stdin);
   //freopen("out.txt","w",stdout);
   int t=1;
//   sd(t);
   for(int i=1;i<=t;i++){
       //printf("Case #%d: ",i);
       solve();
   }
   return 0;
}
