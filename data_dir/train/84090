#include<bits/stdc++.h>
using namespace std;
#define int long long
void io()
{
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    ios::sync_with_stdio(0);cin.tie(0);
}
vector<int> bit;
void update(int idx)
{
    for(int i=idx;i<bit.size();i+=i&(-i)) bit[i]++;
}
int query(int idx)
{
    int ans = 0;
    for(int i=idx;i>0;i-=i&(-i)) ans += bit[i];
    return ans;
}
int32_t main()
{
    io();
    int n;
    cin>>n;
    int sz = (1<<n);
    vector<int> v(sz);
    vector<int> compress;
    for(int i=0;i<sz;i++)
    {
        cin>>v[i];
        compress.push_back(v[i]);
    }
    sort(compress.begin(), compress.end());
    compress.erase(unique(compress.begin(), compress.end()),compress.end());
    for(int i=0;i<sz;i++)
        v[i] = lower_bound(compress.begin(), compress.end(), v[i]) - compress.begin() + 1;
    //initial invcnt
    int invcnt = 0;
    bit.assign(sz+1,0);
    for(int i=0;i<sz;i++)
    {
        invcnt += i-query(v[i]);
        update(v[i]);
    }
    vector<int> pool;
    pool.reserve(1<<n);
    vector<int> vals(n);
    for(int e=0;e<n;e++)
    {
        int up = (1<<e), prev = 0;
        int st = 0, inc = 0;
        while(st<sz)
        {
            for(int i=st;i<st+up;i++)
            {
                pool.push_back(v[i]);
            }
            sort(pool.begin(),pool.end());
            for(int i=st+up;i<st+2*up;i++)
            {
                vals[e] += (upper_bound(pool.begin(), pool.end(), v[i]-1)-pool.begin());
                vals[e] -= (up-(upper_bound(pool.begin(), pool.end(), v[i])-pool.begin()));
            }
            st += up<<1;
            pool.clear();
        }
    }
    for(int i=0;i<n;i++) cerr<<vals[i]<<" ";
    int flag = 0;
    int m,x;
    cin>>m;
    while(m--)
    {
        cin>>x;
        flag ^= (1<<x)-1;
        int ans = invcnt;
        for(int i=0;i<n;i++)
            if(flag&(1<<i))
                ans += vals[i];
        cout<<ans<<'\n';
    }
}