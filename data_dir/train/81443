#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>

using namespace std;

#define f first
#define s second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define ll long long
#define ld long double

const int N = 1e5 + 123;
const int inf = 1e9;
const ld Pi = acos(-1);
const int mod = 95542721;
const ll Inf = 1e18;

int n, m, old[N], t[N * 4], a[N];
ll s[N];

void Upd(int p, int x) {
  int now = x - old[p];
  old[p] = x;
  for (int i = p;i <= n;i = (i | (i + 1))) s[i] += now;
}
ll get(int l, int r) {
  ll ans = 0;
  for (int i = r;i > 0;i = (i & (i + 1)) - 1) ans += s[i];
  l--;
  for (int i = l;i > 0;i = (i & (i + 1)) - 1) ans -= s[i];
  return ans;
}
void upd(int p, int x, int v = 1, int tl = 1, int tr = n) {
  if (tl == tr) {
    t[v] = x;
    Upd(tl, t[v]);
    return;
  }
  int tm = (tl + tr) / 2;
  if (p <= tm) upd(p, x, v * 2, tl, tm);
  else upd(p, x, v * 2 + 1, tm + 1, tr);
  t[v] = max(t[v * 2], t[v * 2 + 1]); 
}
void upd_seg(int l, int r, int x, int v = 1, int tl = 1, int tr = n) {
  if (tl > r || tr < l) return;
  if (tl == tr) {
    t[v] %= x;
    Upd(tl, t[v]);
    return;
  }
  int tm = (tl + tr) / 2;
  if (t[v * 2] >= x) upd_seg(l, r, x, v * 2, tl, tm);
  if (t[v * 2 + 1] >= x) upd_seg(l, r, x, v * 2 + 1, tm + 1, tr);
  t[v] = max(t[v * 2], t[v * 2 + 1]);
}

int main() {
  srand(time(0));
  #ifdef wws
    freopen("in", "r", stdin);
  //  freopen("out", "w", stdout);
  #endif  
  cin >> n >> m;
  for (int i = 1;i <= n;i++) {
    cin >> a[i];
    upd(i, a[i]);
  }
  for (int i = 1;i <= m;i++) {
    int t, l, r, x;
    cin >> t;
    if (t == 1) {
      cin >> l >> r;
      cout << get(l, r) << endl;
    }
    if (t == 2) {
      cin >> l >> r >> x;
      upd_seg(l, r, x);
    }
    if (t == 3) {
      cin >> l >> x;
      upd(l, x);
    }
  }
  return 0;
}