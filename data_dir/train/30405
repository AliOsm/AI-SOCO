#include <bits/stdc++.h>
#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007
#define maxn 2000000005
#define DBG pf("Hi\n")
#define INF 2000000000000000000LL
#define infd 1000000000.0 ;
#define i64 long long int
#define eps (1e-8)
#define ff first
#define ss second
#define ln 17
#define sq 318

using namespace std ;

i64 dp1[105][22] , dp2[105][22] , k ;

vector <i64> g[105] ;

void dfs(i64 u , i64 par)
{
    dp1[u][0] = 1 ; dp2[u][0] = 1 ;

    i64 i , j , v , l , nxtDP1[22] , nxtDP2[22] ;

    for(i=0 ; i<g[u].size() ; i++)
    {
        if( g[u][i]==par ) continue ;

        v = g[u][i] ;

        dfs(v,u) ;

        memset( nxtDP1 , 0 , sizeof(nxtDP1) ) ;
        memset( nxtDP2 , 0 , sizeof(nxtDP2) ) ;

        for( j=0 ; j<=k ; j++ )
        {
            for(l=0 ; l<=k ; l++)
            {
                nxtDP1[ min(j,l+1) ] += dp1[u][j]*dp1[v][l] ;
                nxtDP1[ min(j,l+1) ] %= mod ;
            }
        }
        for(j=0 ; j<=k ; j++)
        {
            for(l=0 ; l<k ; l++)
            {
                if( (l+j+1) <= k ){
                    nxtDP1[j]  = (nxtDP1[j] + dp1[u][j]*dp2[v][l])%mod ;
                }
                else{
                    nxtDP2[l+1] = (nxtDP2[l+1] + dp1[u][j]*dp2[v][l])%mod ;
                }
            }
        }
        for(j=0 ; j<k; j++)
        {
            for(l=0 ; l<=k ; l++ )
            {
                if( (l+j+1)<=k )
                {
                    nxtDP1[l+1] = (nxtDP1[l+1] + dp2[u][j]*dp1[v][l])%mod ;
                }
                else{
                    nxtDP2[j] = (nxtDP2[j] + dp2[u][j]*dp1[v][l])%mod ;
                }
            }
        }
        for(j=0 ; j<k ; j++)
        {
            for(l=0 ; l<k ; l++)
            {
                nxtDP2[ max(j,l+1) ] = (nxtDP2[ max(j,l+1) ] + dp2[u][j]*dp2[v][l])%mod ;
            }
        }
         for(j=0 ; j<=k ; j++){
            dp1[u][j] = nxtDP1[j] ;
            dp2[u][j] = nxtDP2[j] ;
         }
    }
    return ;
}

int main()
{
    i64 i , j , l , m , n , u , v ;

    cin>>n>>k ;

    for(i=1 ; i<n ; i++)
    {
        sf("%lld %lld",&u,&v) ;
        g[u].pb(v) ;
        g[v].pb(u) ;
    }

    dfs(1,-1) ;

    i64 ans = 0 ;

    for(i=0 ; i<=k ; i++) ans += dp1[1][i] ;

    cout<<ans%mod<<endl ;

    return 0 ;
}
