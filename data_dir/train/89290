//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC opatimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }

int const maxn = 200005;
long long tree[maxn << 2];
long long add[maxn << 2];
int a[maxn];
int sz = 1;

inline long long val(const int v) {
    return tree[v] + add[v];
}

inline void upd(const int v) {
    tree[v] = min(val(2 * v), val(2 * v + 1));
}

inline void push(const int v) {
    add[2 * v] += add[v];
    add[2 * v + 1] += add[v];
    add[v] = 0;
}

long long get(const int ql, const int qr, const int tl = 0, const int tr = sz - 1, const int v = 1) {
    if (ql <= tl && tr <= qr)
        return val(v);

    push(v);
    int mid = (tl + tr) >> 1;
    long long res = 1000000000000000000LL;
    if (ql <= mid)
        res = get(ql, qr, tl, mid, 2 * v);
    if (qr > mid)
        res = min(res, get(ql, qr, mid + 1, tr, 2 * v + 1));
    upd(v);
    return res;
}

void query(const int ql, const int qr, const long long val, const int tl = 0, const int tr = sz - 1, const int v = 1) {
    if (ql <= tl && tr <= qr) {
        add[v] += val;
    } else {
        push(v);
        int mid = (tl + tr ) >> 1;
        if (ql <= mid)
            query(ql, qr, val, tl, mid, 2 * v);
        if (qr > mid)
            query(ql, qr, val, mid + 1, tr, 2 * v + 1);
        upd(v);
    }
}

int main() {
//    freopen("in.txt","r", stdin);
//    cout << fixed << setprecision(15);
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);

    int n;
    cin >> n;

    vector<int> p(n);
    for (int& x : p)
        cin >> x;

    for (int i = 0; i < n; ++i)
        cin >> a[i];

    while (sz <= n)
        sz <<= 1;

    long long ans = 1000000000000000000LL;
    for (int i = 0; i < n; ++i)
        query(p[i], n, a[i]);

    for (int i = 0; i + 1 < n; ++i) {
        query(p[i], n, -a[i]);
        query(0, p[i] - 1, a[i]);
        ans = min(ans, get(0, n));
    }
    cout << ans << endl;

}
