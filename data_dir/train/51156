/// In The Name Of God

#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>
#include <stdio.h>

#define f first
#define s second

#define pb push_back
#define pp pop_back
#define mp make_pair

#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const int N = (int)1e5 + 7, inf = (int)1e9 + 7, mod = (int)1e9 + 7;
const ll linf = (ll)1e18 + 7;
const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1}, dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

using namespace std;

const int Mx = 100000 * 70;

void add(int &x, int y) {
	x += y;
	if (x >= mod) x -= mod;
	if (x < 0) x += mod;
}
int sum(int x, int y) {
	add(x, y);
	return x;
}
int mult(int x, int y) {
	return x * 1ll * y % mod;
}
int bp(int x, int y) {
	int res = 1;
	while (y) {
		if (y & 1) res = mult(res, x);
		x = mult(x, x), y >>= 1;
	}
	return res;
}

int n;
int a[N], id[N], cnt[N], msk[N], pre[N];

//19

bool check(int x) {
	if (x < 2) return 0;
	for (int i = 2; i <= sqrt(x); i++) {
		if (x % i == 0) return 0;
	}
	return 1;
}
int dp[71][1 << 19];
int calc(int v = 0, int mask = 0) {
	if (v > 70) {
		if (!mask) return 1;
		return 0;
	}
	if (~dp[v][mask]) return dp[v][mask];
	if (!cnt[v]) return calc(v + 1, mask);
	int res = mult(calc(v + 1, mask), pre[cnt[v] - 1]);
	add(res, mult(calc(v + 1, mask ^ msk[v]), pre[cnt[v] - 1]));
	return dp[v][mask] = res;
}
int main() {
	#ifdef IOI2018
		freopen ("in.txt", "r", stdin);
	#endif
	Kazakhstan
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
		cnt[a[i]]++;
		pre[i] = bp(2, i);
	}
	for (int i = 2, j = 0; i < 70; i++) {
		if (check(i)) id[i] = j++;
	}
	for (int i = 2; i <= 70; i++) {
		int x = i;
		for (int j = 2; j <= x; j++) {
			while (x % j == 0) {
				x /= j;
				msk[i] ^= 1 << id[j];
			}
		}
	}
	memset(dp, -1, sizeof(dp));
	cout << max(0, sum(-1, calc()));
	ioi
}