//be naame khodaa

#include <bits/stdc++.h>

using namespace std;

int dp[805][4005], opt[805][4005], s[4005][4005], c[4005][4005];

void update(int k, int n, int optL, int optR)
{
	for (int i = optL; i <= optR; i++)
		if (dp[k-1][i] + c[i+1][n] < dp[k][n])
		{
			dp[k][n] = dp[k-1][i] + c[i+1][n];
			opt[k][n] = i;
		}
}

void solve(int k, int s, int e, int optL, int optR)
{
	if (s >= e)
	{
		if (s == e) update(k, s, optL, optR);
		return;
	}
	int mid = (s + e)/2;
	update(k, mid, optL, optR);
	solve(k, s, mid-1, optL, opt[k][mid]);
	solve(k, mid+1, e, opt[k][mid], optR);
}

int main()
{
	int n, k, x;
	scanf("%d%d", &n, &k);
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
		{
			x = (getchar(), getchar())-'0';
			s[i][j] = s[i][j-1] + x;
		}

	for (int i = 1; i <= n; i++)
		for (int j = i+1; j <= n; j++)
			c[i][j] = c[i][j-1] + s[j][j] - s[j][i-1];

	for (int i = 0; i <= n; i++) dp[1][i] = c[1][i];
	for (int ik = 2; ik <= k; ik++)
	{
		fill(dp[ik], dp[ik]+n+1, 1e9);
		solve(ik, 0, n, 0, n);
	}
	printf("%d\n", dp[k][n]);
	return 0;
}
