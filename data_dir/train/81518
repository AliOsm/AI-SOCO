#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::greater<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef unsigned long long uint64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+16 + 2; //18
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 300'000;
const int LOGN = 19;

int n, m, k;

void solve(int) {
  cin >> n;
  vector<pair<long double, int>> a(n);
  for (int i = 0; i < n; ++i) {
    int x, y;
    cin >> x >> y;
    a[i].first = atan2l(y, x);
    a[i].second = i;
  }
  sort(begin(a), end(a));
  auto f = [&] (long double x, long double y) {
    long double ang = x - y;
    if (ang < 0) {
      ang += 2 * pi;
    }
    if (ang > pi) {
      ang = 2 * pi - ang;
    }
    std::cerr << ang << '\n';
    return ang;
  };
  int x = 0, y = n - 1;
  for (int i = 1; i < n; ++i) {
    if (f(a[i - 1].first, a[i].first) < f(a[x].first, a[y].first)) {
      x = i;
      y = i - 1;
    }
  }
  cout << a[x].second + 1 << ' ' << a[y].second + 1 << '\n';
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
