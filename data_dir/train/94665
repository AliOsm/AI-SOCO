#include <bits/stdc++.h>

#define SZ(x) (((int)x.size()))

typedef long long ll;
typedef long double ld;

using namespace std;

const int maxn = 400*1000+10, maxc = 21, maxm = 1050*1000;
int n, a[maxn], ind, p;
ll dp[maxm], ted[maxc][maxc], jt;
vector<int> vec, loc[maxc], tmp;

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	memset(dp, 63, sizeof dp);
	dp[0] = 0;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> a[i];
		vec.push_back(a[i]);
	}
	sort(vec.begin(), vec.end());
	vec.resize(unique(vec.begin(), vec.end()) - vec.begin());
	for (int i = 0; i < n; i++)
	{
		ind = lower_bound(vec.begin(), vec.end(), a[i]) - vec.begin();
		loc[ind].push_back(i);
	}
	for (int i = 0; i < SZ(vec); i++)
	{
		for (int j = 0; j < SZ(vec); j++)
		{
			if (i == j)
				continue;
			p = SZ(loc[j]) - 1;
			for (int k = SZ(loc[i]) - 1; k >= 0; k--)
			{
				while (p >= 0 && loc[j][p] > loc[i][k])
					p--;
				ted[i][j] += SZ(loc[j]) - p - 1;
			}
		}
	}
	for (int i = 1; i < (1 << SZ(vec)); i++)
	{
		tmp.clear();
		ind = i;
		for (int j = 0; j < SZ(vec) && ind > 0; j++)
		{
			if (ind & 1)
				tmp.push_back(j);
			ind >>= 1;
		}
		for (auto w : tmp)
		{
			jt = 0;
			for (auto g : tmp)
				jt += ted[w][g];
			dp[i] = min(dp[i], dp[i ^ (1 << w)] + jt);
		}
	}
	cout << dp[(1 << SZ(vec)) - 1];
	return 0;
}
