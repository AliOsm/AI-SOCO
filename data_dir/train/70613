

#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<LL, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
#define LL                  long long
#define ull                 unsigned long long
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%I64d ",n)
#define pfs(s)              printf("%s\n",s)

#define	deb(x)		        cout<<#x<<" "<<x<<endl

#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9+5
#define EPS                 1e-8
#define Pi                  acos(-1.0)

LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}

#define N 1000005



int main()
{
    FASTREAD;
    LL n;
    cin>>n;

    vector<LL>a,b;

    LL num=2*n;

    int f=0;
    while(num)
    {
        if(f==0)
        {
            a.pb(num);
            --num;
            b.pb(num);
            --num;
        }
        else
        {

            b.pb(num);
            --num;
            a.pb(num);
            --num;
        }
        f=!f;
    }

    sort(a.begin(),a.end());
    sort(b.begin(),b.end());

    vector<int>ck;

    for(int i=0;i<a.size();i++)
        ck.pb(a[i]);
    for(int i=0;i<b.size();i++)
        ck.pb(b[i]);
    for(int i=0;i<a.size();i++)
        ck.pb(a[i]);
    for(int i=0;i<b.size();i++)
        ck.pb(b[i]);

    LL sum=0;

    for(int i=0;i<n;i++)
    {
        sum+=ck[i];
    }

    LL mn=sum;
    LL mx=sum;




    for(int i=n;i<ck.size();i++)
    {
        sum+=ck[i];
        sum-=ck[i-n];
        mn=min(sum,mn);
        mx=max(mx,sum);
        if(abs(sum-mn)>1 || abs(sum-mx)>1)
        {
            cout<<"NO"<<endl;
            return 0;
        }
    }

    cout<<"YES"<<endl;
    for(int i=0;i<2*n;i++) cout<<ck[i]<<" ";




    return 0;
}


/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
