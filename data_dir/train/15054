#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef unsigned long long ull;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;

const int N = 100010;
const int MX = 123456;
const int mod = (int)1e9 + 7;
const int base = 1023456789;
const ull BS1 = 10000019ULL;
const int INF = (1 << 29);

template < class T > inline void fastScan(T &x) {
    register char c = getchar();
    int neg = 0; x = 0;
    for(   ; (c < 48 || c > 57) && (c != '-'); c = getchar());
    if(c == '-') { neg = 1; c = getchar(); }
    for(   ; c > 47 && c < 58; c = getchar()){
        x = (x << 1) + (x << 3) + c - 48;
    }
    if(neg) x = -x;
}

// OrderedSet
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// template < typename T > using ordered_set = tree < T, null_type, greater < T >, rb_tree_tag, tree_order_statistics_node_update >;

int n, m;

int gird[20][10005];
int diff[20][20];
int memo[20][20];

int dp[(1 << 16) + 10][18][18];

int go(int mask, int last, int first){
  //cout << mask << " " << last << " " << first << '\n';
  if(mask == (1 << n) - 1){
    return memo[first][last];
  }
  if(dp[mask][last][first] != -1){
    return dp[mask][last][first];
  }
  int ret = 0;
  for(int i = 0; i < n; i++){
    if(!(mask & (1 << i))){
      int p = (last == 17) ? 1e9 : diff[last][i];
      int q = (first == 17) ? i : first;
      ret = max(ret, min(p, go(mask | (1 << i), i, q)));
    }
  }
  return dp[mask][last][first] = ret;
}

int main(){
  fastScan(n);
  fastScan(m);
  for(int i = 0; i < n; i++){
    for(int j = 0; j < m; j++){
      fastScan(gird[i][j]);
    }
  }
  for(int i = 0; i < n; i++){
    for(int j = 0; j < n; j++){
      int mn = 1e9;
      for(int k = 0; k < m; k++){
        mn = min(mn, abs(gird[i][k] - gird[j][k]));
      }
      diff[i][j] = diff[j][i] = mn;
    }
  }
  for(int i = 0; i < n; i++){
    for(int j = 0; j < n; j++){
      int mn = 1e9;
      for(int k = 1; k < m; k++){
        mn = min(mn, abs(gird[i][k] - gird[j][k - 1]));
      }
      memo[i][j] = mn;
    }
  }
  memset(dp, -1, sizeof dp);
  printf("%d\n", go(0, 17, 17));
}
