#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

//template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)((x).size())
#define pb push_back
#define T first
#define P second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
#define debug(x) cerr << #x << " : " << (x) << endl
const double PI = 3.14159265358979323846;
const double eps = (1e-10);
int isGreater(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

int n, m;
const int MAX_N = 1e5 + 5;
vector<int> adj[MAX_N];
vector<pair<int, int> > ans;


int curTime, tin[MAX_N], low[MAX_N];

void dfs(int u, int p)
{
    tin[u] = low[u] = ++curTime;

    for (int v : adj[u])
    {
        if (v == p)
            continue;
        if (!tin[v])
        {
            ans.push_back({u, v});
            dfs(v, u);
            if (low[v] == tin[v])
            {
                cout << 0 << "\n";
                exit(0);
            }
            low[u] = min(low[u], low[v]);
        }
        else
        {
            if (tin[u] > tin[v])
                ans.push_back({u, v});
            low[u] = min(low[u], tin[v]);
        }

    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("AC.txt", "w", stdout);
#endif
    cin >> n >> m;
    rep(i,0,m)
    {
        int u,v;
        cin >> u >> v;
        --u; --v;
        adj[u].pb(v);
        adj[v].pb(u);
    }

    dfs(0, n);
    for (auto &item : ans)
        cout << item.first + 1 << " " << item.second + 1 << "\n";

    return 0;
}