#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;
const int maxn=603;
bool dp[maxn][maxn];
int trace[maxn][maxn];
pair<int,int> range[maxn];
int pos[maxn];
char ans[2*maxn];
int main()
{
    fastread;
    int n;
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>range[i].x>>range[i].y;
        if(range[i].x==1){
            dp[i][i]=true;
            trace[i][i]=i;
        }
    }
    for(int i=0;i<maxn;i++)
        for(int j=0;j<i;j++)
            dp[i][j]=true;
    for(int i=1;i<n;i++){
        //i represents independent range size
        for(int j=1;j<=n && (j+i)<=n;j++){
            //current solving range is j to j+i
            //case jth bracket closes immediately
            dp[j][j+i]=(dp[j][j] && dp[j+1][j+i]);
            if(dp[j][j+i] && trace[j][j+i]==0)
                trace[j][j+i]=j;
            for(int k=1;k<=i;k++){
                int len=2*k+1;
                if(len<range[j].x || len>range[j].y)
                    continue;
                dp[j][j+i]=(dp[j][j+i] || (dp[j+1][j+k] && dp[j+k+1][j+i]));
                if(dp[j][j+i] && trace[j][j+i]==0)
                    trace[j][j+i]=j+k;
            }
        }
    }
    if(!dp[1][n]){
        cout<<"IMPOSSIBLE";
        return 0;
    }
    pos[1]=1;
    queue< pair<int,int> > q;
    q.push({1,n});
    while(!q.empty()){
        pair<int,int> cur=q.front();
        q.pop();
        if(cur.x>cur.y)
            continue;
        int div=trace[cur.x][cur.y];
        int l=cur.x+1;
        int len=div-cur.x;
        int r=div+1;
        len=2*len+1;
        ans[pos[cur.x]]='(';
        ans[pos[cur.x]+len]=')';
        if(l<=div){
            pos[l]=pos[cur.x]+1;
            q.push({l,div});
        }
        if(r<=cur.y){
            pos[r]=pos[cur.x]+len+1;
            q.push({r,cur.y});
        }
    }
    for(int i=1;i<=2*n;i++)
        cout<<ans[i];
    return 0;
}