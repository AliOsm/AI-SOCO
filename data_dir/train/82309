/* ****revpro**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl	   '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii	    map<ll,ll>
using namespace std;

#define N  300005
vector <pii> a[N];                                          //give  edge along with node
ll vis[N],dfs_num[N],dfs_low[N],dfs_parent[N];
ll dfsNumberCounter,rootChildren;
set <ll> bridges;
ll dfsRoot;                                                 // set dfs root 
void articulationPointAndBridge(int u) {
    dfs_low[u] = dfs_num[u] = dfsNumberCounter++;             // dfs_low[u] <= dfs_num[u]
    for (auto i:a[u]) {
        if (dfs_num[i.first] == 0 ) {                         // a tree edge
            dfs_parent[i.first] = u;
            if (u == dfsRoot) rootChildren++;                // special case if u is a root
                articulationPointAndBridge(i.first);              // store this information first
            if (dfs_low[i.F] > dfs_num[u])                     // for bridge
                bridges.insert(i.S);                                 //bridge store indices of all bridges
            dfs_low[u] = min(dfs_low[u], dfs_low[i.F]);     // update dfs_low[u]
        }
        else if (i.F != dfs_parent[u])                         // a back edge and not direct cycle
            dfs_low[u] = min(dfs_low[u], dfs_num[i.F]);     // update dfs_low[u]
    } 
}
ll ans=0;
ll dfs(ll node,ll id)
{
	vis[node]=1;
	ll m1=0,m2=0;
	for(auto i:a[node])
	if(!vis[i.F])
	{
		ll z=dfs(i.F,i.S);
		if(z>=m1){
			swap(m1,m2);
			m1=z;
		}
		else if(z>m2){
			swap(z,m2);
		}
	}
	ans=max(ans,m1+m2);
	if(present(bridges,id)) m1++;
	return m1;
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		ll n,m;
		cin>>n>>m;
		rep(i,0,m){
			ll u,v;
			cin>>u>>v;
			a[u].pb({v,i});
			a[v].pb({u,i});
		}
		dfsRoot=1;
		articulationPointAndBridge(1);
		dfs(1,-1);
		cout<<ans;
	}
	return 0;
}