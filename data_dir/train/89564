#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <bitset>
#include <string>
#include <vector>
#include <algorithm>
#include <ctime>
#include <queue>
#include <cstring>
#include <set>
#include <map>
#include <sstream>
#include <cmath>
#include <fstream>
#include <list>
using namespace std;
#define rp(i,n) for(int (i)=0;(i)<(n);++(i))
#define pb push_back
#define L(s) (int)s.size()
#define mp make_pair
#define pii pair<int,int>
#define x first 
#define y second
#define inf 1000000000
#define VI vector<int>
#define ll long long
#define all(s) (s).begin(),(s).end()
#define C(u) memset((u),0,sizeof((u)))
#define ull unsigned ll
#define uint unsigned int 
VI a[55];
int n,m;
map<pii,int > was;
int u[55];
int main()
{
	cin>>n>>m;
	if (n==1)
	{
		if (m==0)
			cout<<"YES\n1\n1 1\n";
		else 
			if (m==1)
				cout<<"YES\n0\n";
			else
				cout<<"NO\n";
		return 0;
	}
	rp(i,m)
	{
		int p,q;
		cin>>p>>q;
		--p;--q;
		if (p>q)
			swap(p,q);
		if (p==q)
		{
			cout<<"NO\n";
			return 0;
		}
		was[mp(p,q)]++;
		if (n==2 && was[mp(p,q)]>2)
		{
			cout<<"NO\n";
			return 0;
		}
		if (n>2 && was[mp(p,q)]>1)
		{
			cout<<"NO\n";
			return 0;
		}
		a[p].pb(q);
		a[q].pb(p);
	}
	if (n==2)
	{
		if (!m)
			cout<<"YES\n2\n1 2\n1 2\n";
		else
			if (m==1)
				cout<<"YES\n1\n1 2\n";
			else
				cout<<"YES\n0\n";
		return 0;
	}
	rp(i,n)
		if (L(a[i])>2)
		{
			cout<<"NO\n";
			return 0;
		}
	vector<pii > ps(0);
	rp(i,n)
		if (L(a[i])==1 && !u[i])
		{
			u[i]=1;
			int who=i;
			int prv=-1;
			do
			{
				if (a[who][0]!=prv)
				{
					prv=who;
					who=a[who][0];
				}
				else
				{
					prv=who;
					who=a[who][1];
				}
			}while(L(a[who])!=1);
			u[who]=1;
			ps.pb(mp(min(i,who),max(i,who)));
		}
		else
			if (L(a[i])==0)
				ps.pb(mp(i,i));
	cout<<"YES\n";
	cout<<L(ps)<<endl;
	rp(i,L(ps)-1)
	{
		sort(ps.begin(),ps.begin()+L(ps)-i);
		int pos=1;
		for(int j=1;j<L(ps)-i;++j)
			if (ps[j].x<ps[pos].x)
				pos=j;
		cout<<ps[0].x+1<<" "<<ps[pos].x+1<<endl;
		ps[0].x=min(ps[0].y,ps[pos].y);
		ps[0].y=max(ps[0].y,ps[pos].y);
		swap(ps[pos],ps[L(ps)-1-i]);
	}
	if (L(ps))
		cout<<ps[0].x+1<<" "<<ps[0].y+1<<endl;
}