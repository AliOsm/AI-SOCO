#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("input.txt");ofstream out("output.txt");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

int a,k, num =0;
vec<vec<int>> l, g;
vec<int> us, ans, nm, obr;

vec<int> inter(vec<int> &m, vec<int> &n){
    vec<int> o;
    map<int, int> mp;
    for(int i : m) mp[i]++;
    for(int i : n) mp[i]++;
    for(pii p : mp) if(p.S>1) o.pb(p.F);
    return o;
}

void dfs(int v){
    us[v] = 1;
    g.pb(vec<int>()); num++;
    nm[v] = num-1;
    obr.pb(v);
    for(int h : l[v]){
        if(!us[h]) dfs(h);
        g[nm[v]].pb(nm[h]);
    }
}

int solve_comp(){
    for(int q=0; q<num; q++) sort(g[q].begin(), g[q].end());
    vec<vec<int>> n(3, vec<int>());
    int c = 0;
    for(int q=0; q<num; q++){
        if(g[q]==n[0] || g[q]==n[1] || g[q]==n[2]) continue;
        if(c==3) return 0;
        n[c++] = g[q];
    }
    if(c<3) return 0;
    vec<int> o1 = inter(n[1], n[2]), o2 = inter(n[0], n[2]), o3 = inter(n[0], n[1]);
    if(o1.size()+o2.size()+o3.size()!=num) return 0;
    for(int i : o1) ans[obr[i]]=1;
    for(int i : o2) ans[obr[i]] = 2;
    for(int i : o3) ans[obr[i]] = 3;
    return 1;
}

int main(){
    fast;
    cin>>a>>k;
    nm = vec<int>(a);
    ans = vec<int>(a);
    l = vec<vec<int>>(a, vec<int>());
    for(int q=0; q<k; q++){
        int x,y; cin>>x>>y; x--; y--;
        l[x].pb(y);
        l[y].pb(x);
    }
    us = vec<int>(a);
    int fl = 1;
    for(int q=0; q<a; q++){
        if(!us[q]){
            num = 0;
            obr.clear();
            g = vec<vec<int>>();
            dfs(q);
            fl &= solve_comp();
        }
    }
    if(!fl) cout<<-1, exit(0);
    for(int i : ans) cout<<i<<" ";
}