#include <bits/stdc++.h>

using namespace std;
typedef long long ll;


vector<int> mu(102);

void mobius() {
  int maxn = 100;
    int sq = (int)sqrt(maxn);
     mu = vector<int>(maxn + 1);
    for (int i = 1; i <= maxn; i++)
        mu[i] = 1;
    for (int i = 2; i <= sq; i++)
    {
        if (mu[i] == 1)
        {
            for (int j = i; j <= maxn; j += i)
                mu[j] *= -i;
            for (int j = i * i; j <= maxn; j += i * i)
                mu[j] = 0;
        }
    }
    for (int i = 2; i <= maxn; i++)
    {
        if (mu[i] == i)
            mu[i] = 1;
        else if (mu[i] == -i)
            mu[i] = -1;
        else if (mu[i] < 0)
            mu[i] = 1;
        else if (mu[i] > 0)
            mu[i] = -1;
    }
}

 
long long fastexp (long long a, long long b) {
  long long res = 1;
  while (b) {
      if (b & 1) res = res*a; 
      a = a*a;
      b >>= 1;
  }
  return res;
}

const ll nmax = (1ll << 60);

int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL); 
  mobius();
  vector<vector<ll> > powers(70);
  for (int p = 2; p < 70; p++) 
    powers[p].push_back(1);
  
  for (ll m = 2; m <= 1e6; m++) {
    ll prod = m*m;
    for (int p = 3; p < 61; p++) {
      prod *= m;
      powers[p].push_back(prod);
      if (nmax/prod < m) break;
    }
  }
  
  int T;
  cin >> T;
  while (T--) {
    ll k;
    cin >> k;
    ll res = k-1;
    ll mp = max(ll(sqrt(k)-1), 1ll);
    while (k/(mp+1) >= mp+1) mp++;

    res += mu[2]*(mp-1);
    for (int p = 3; p < 61; p++) {
      ll mp = upper_bound(powers[p].begin(),powers[p].end(), k)-powers[p].begin();
      res += mu[p]*(mp-1);
    }
    cout << ll(res) << "\n";
  }
  return 0;
}

