#include <cstdio>

#include <cmath>

#include <cstring>

#include <iostream>

#include <algorithm>

#include <queue>

#include <vector>

#include <map>



using namespace std;



typedef long long LL;


LL tree[1000000];
int n,m;
struct Node
{
    LL l,r;
}f[200005];
bool cmp(Node a,Node b)
{
    if (a.l!=b.l) return a.l<b.l;
    return a.r>b.r;
}
LL a[200005],b[200005],c[200005];
LL l[200005],r[200005];
LL dq,num;
LL ll,rr,mid;
LL dql,dqr,ans,id;
void build(int x,int l,int r)
{
    if (l==r)
    {
        tree[x]=f[l].r-f[l].l;
        return;
    }
    int mid=(l+r)/2;
    build(x*2,l,mid);
    build(x*2+1,mid+1,r);
    tree[x]=max(tree[x*2],tree[x*2+1]);
}
LL query(int x,int l,int r,int ll,int rr)
{
    if (l==ll&&rr==r) return tree[x];
    int mid=(l+r)/2;
    if (rr<=mid) return query(x*2,l,mid,ll,rr);
    else if (ll>=mid+1) return query(x*2+1,mid+1,r,ll,rr);
    else return max(query(x*2,l,mid,ll,mid),query(x*2+1,mid+1,r,mid+1,rr));
}

int main()

{

    scanf("%d%d",&n,&m);
    for (int i=1;i<=n;++i)
    {
        scanf("%I64d%I64d",&f[i].l,&f[i].r);
        l[i]=f[i].l;r[i]=f[i].r;
    }
    int nn=n;
    sort(f+1,f+n+1,cmp);
    dq=-1;
    num=0;
    for (int i=1;i<=n;++i)
    {
        if (f[i].r>dq)
        {
            dq=f[i].r;
            ++num;
            f[num]=f[i];
        }
    }
    n=num;
    build(1,1,n);

    for (int i=1;i<=m;++i)
    {
        scanf("%I64d%I64d%I64d",&a[i],&b[i],&c[i]);
        ll=1;rr=n;dq=1;
        while (ll<=rr)
        {
            mid=(ll+rr)/2;
            if (f[mid].l<a[i])
            {
                dq=mid;
                ll=mid+1;   
            }
            else rr=mid-1;
        }
        dql=dq;
        ll=1;rr=n;dq=n;
        while (ll<=rr)
        {
            mid=(ll+rr)/2;
            if (f[mid].r>b[i])
            {
                dq=mid;
                rr=mid-1;
            }
            else ll=mid+1;
        }
        dqr=dq;
        dq=0;
        dq=max(dq,min(b[i],f[dqr].r)-max(a[i],f[dqr].l));
        dq=max(dq,min(b[i],f[dql].r)-max(a[i],f[dql].l));
        if (dql+1<=dqr-1) dq=max(dq,query(1,1,n,dql+1,dqr-1));
        dq=dq*c[i];
        if (ans<dq) 
        {
            ans=dq;
            id=i;
        }
    }
    printf("%I64d\n",ans);
    if (ans==0) return 0;
    for (int i=1;i<=nn;++i)
    {
        dq=(min(r[i],b[id])-max(l[i],a[id]))*c[id];
        if (dq==ans)
        {
            printf("%d ",i);
            break;
        }
    }
    cout<<id<<endl;
    return 0;

}