#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>
#include <random>
#include <functional>

using namespace std;

const int N = 3e5 + 7;

struct Node {
	int sum;
	int maxs;

	Node() {
		sum = 0;
		maxs = 0;
	}

	Node(int x) {
		sum = x;
		maxs = max(x, 0);
	}

	Node(int a, int b) {
		sum = a;
		maxs = b;
	}

	friend Node conq(const Node &a, const Node &b) {
		return Node(a.sum + b.sum, max(a.maxs + b.sum, b.maxs));
	}
};

namespace ST {
	int n;
	int a[4 * N];
	Node t[4 * N];

	void pull(int v) {
		t[v] = conq(t[2 * v + 1], t[2 * v + 2]);
	}

	void add(int v, int l, int r, int pos, int val) {
		if (l + 1 == r) {
			a[v] += val;
			t[v] = Node(a[v]);
		} else {
			int m = (r + l) >> 1;
			if (pos < m) add(2 * v + 1, l, m, pos, val);
			else add(2 * v + 2, m, r, pos, val);
			pull(v);
		}
	}

	void add(int pos, int val) {
		add(0, 0, n, pos, val);
	}

	int solve() {
		return t[0].maxs;
	}

	void init(int n_) {
		n = n_;
	}
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	int n;
	cin >> n;
	ST::init(n);
	vector<int> p(n);
	vector<int> q(n);
	for (auto &t : p) {
		cin >> t;
		t--;
	}
	for (auto &t : q) {
		cin >> t;
		t--;
	}
	vector<int> wr(n);
	for (int i = 0; i < n; i++) {
		wr[p[i]] = i;
	}
	vector<int> ans(n);
	ans[0] = n - 1;
	ST::add(wr[n - 1], 1);
	for (int i = 1; i < n; i++) {
		ST::add(q[i - 1], -1);
		int t = ans[i - 1];
		while (ST::solve() <= 0) {
			ST::add(wr[t - 1], 1);
			t--;
		}
		ans[i] = t;
	}
	for (int i = 0; i < n; i++) {
		cout << ans[i] + 1 << ' ';
	}
	cout << endl;
}