#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <sstream>
#include <string>
#include <map>
#include <set>
#include <algorithm>
#include <iomanip>
#include <functional>
#include <bitset>
#include <cassert>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <memory.h>
#include <complex>
#include <numeric>
using namespace std;
#pragma comment(linker, "/STACK:256000000")
#define mp make_pair
#define pb push_back
#define all(C) (C).begin(), (C).end()
#define sz(C) (int)(C).size()
#define PRIME 1103
#define PRIME1 31415
#define INF ((1ll << 30) - 1)
#define MOD 99990001
#define FAIL ++*(int*)0
#define EPS 1e-6
template<class T> T sqr(T a) {return a * a;}
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pi64;
typedef pair<int, pii> piii;
typedef vector<int> vi;
typedef vector<int64> vi64;
typedef vector<vi64> vvi64;
typedef vector<pi64> vpi64;
typedef vector<vpi64 > vvpi64;
typedef vector<pii> vpii;
typedef vector<vector<int> > vvi;
typedef vector<vvi> vvvi;
typedef vector<vector<pair<int, int > > > vvpii;
typedef vector<vector<vector<pair<int, int > > > > vvvpii;
typedef complex<long double> cd;
//----------------------------------------------------------    
int n, k, d, a[1000000], b[1000000], c[1000000], be[1000000];
int root = 0;
map <int, int> ku;
vi kus;
void init()
{
    scanf("%d", &n);
    for (int i = 0; i < n; ++i)
        scanf("%d", &a[i]);
}
int get_id(int a)
{
    if (ku.find(a) == ku.end())
    {
        int t = ku.size();
        ku[a] = t;
    }
    return ku[a];
}
void add(int a, int x)
{
    while(x < n)
    {
        be[x] += a;
        x |= x + 1;
    }
}
int sum(int v)
{
    int ot = 0;
    while(v >= 0)
    {
        ot += be[v];
        v &= v + 1;
        v--;
    }
    return ot;
}
int find(int a)
{
    int x, l = 0, r = kus.size() - 1, mid;
    while(l <= r)
    {
        mid = (l + r) >> 1;
        if (kus[mid] >= a)
        {
            x = mid;
            r = mid - 1;
        }
        else
            l = mid + 1;
    }
    return x;
}
void solve()
{
    for (int i = 0; i < n; i++)
    {
        int p = get_id(a[i]);
        b[p]++;
    }
    for (int i = 0; i < n; ++i)
        if (b[i])
            kus.push_back(b[i]);
    sort(kus.begin(), kus.end());
    for (int i = 0; i < kus.size(); ++i)
        add(kus[i], i);
    kus.push_back(1e9);
    int64 ot = 0;
    for (int i = 0; i < n; ++i)
    {
        int p = get_id(a[i]);
        int f = find(b[p]);
        
        add(-1, f);
        kus[f]--;
        b[p]--;
        c[p]++;
        f = find(c[p]);
        ot += sum(f - 1);
        ot += (c[p] - 1) * (kus.size() - 1 - f);
    }
    cout << ot;
}
int main()
{
    #ifndef ONLINE_JUDGE
        freopen ("input.txt", "r", stdin); freopen ("output.txt", "w", stdout);
    #endif
    init();
    solve();
    return 0;
}