/*
    Author: Nguyen Tan Bao
    Status:
    Idea:
*/
 
#include <bits/stdc++.h>
#define FI first
#define SE second
#define EPS 1e-9
#define ALL(a) a.begin(),a.end()
#define SZ(a) int((a).size())
#define MS(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
//__builtin_ffs(x) return 1 + index of least significant 1-bit of x
//__builtin_clz(x) return number of leading zeros of x
//__builtin_ctz(x) return number of trailing zeros of x
 
using namespace std;
using ll = long long;
using ld = double;
typedef pair<int, int> II;
typedef pair<int, II> III;
typedef complex<ld> cd;
typedef vector<cd> vcd;
 
const ll MODBASE = 1000000007LL;
const int MAXN = 110;
const int MAXM = 30010;
const int MAXK = 16;
const int MAXQ = 200010;

vector<char> b;
int t, n, m, k, f[70];
char ch[MAXN][MAXN], res[MAXN][MAXN];

void solve() {
    int i = 1, j = 0, group = 0, cnt = 0;
    FOR(i,1,n) FOR(j,1,m) res[i][j] = ' ';
    while (1) {
        if (i % 2) {
            if (j < m) j++;
            else i++;
        }
        else {
            if (j > 1) j--;
            else i++;
        }
        if (i > n) break;
        res[i][j] = b[group];
        if (ch[i][j] == 'R') cnt++;
        // cout << i << ' ' << j << ' ' << group << ' ' << cnt << endl;
        if (cnt == f[group]) {
            group++;
            cnt = 0;
        }
        if (group == k) break;
    }
    FOR(i,1,n) FOR(j,1,m) if (res[i][j] == ' ') res[i][j] = b[k-1];
    FOR(i,1,n) {
        FOR(j,1,m) cout << res[i][j];
        cout << "\n";
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(nullptr);
    for (char i = 'a'; i <= 'z'; i++) b.emplace_back(i);
    for (char i = 'A'; i <= 'Z'; i++) b.emplace_back(i);
    for (char i = '0'; i <= '9'; i++) b.emplace_back(i);
    cin >> t;
    while (t--) {
        cin >> n >> m >> k;
        FOR(i,1,n) FOR(j,1,m) cin >> ch[i][j];

        int dem = 0;
        FOR(i,1,n) FOR(j,1,m) dem += ch[i][j] == 'R';

        int r = dem / k;
        int d = dem % k;
        FOR(i,0,k-1) f[i] = r;
        FOR(i,0,d-1) f[i]++;

        solve();
    }
    return 0;
}
