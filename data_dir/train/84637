#include <bits/stdc++.h>
using namespace std;

typedef unsigned long long llu;
typedef tuple<int, int, int> pii;

const int MAXN = 10005;

llu N, X, CT[70];
int ANS = 1e9;
vector<llu> V;
vector<int> G[MAXN];

int minFrom(int root) {
    vector<int> U(MAXN, -1);

    U[root] = 0;
    queue<pii> q;
    q.push(make_tuple(0, root, -1));

    int ans = 1e9;

    while(!q.empty()) {
        int t, c, p;
        tie(t, c, p) = q.front(); q.pop();

        for (int nv : G[c]) if (nv != p) {
            if (U[nv] == -1) {
                U[nv] = t + 1;
                q.push(make_tuple(t + 1, nv, c));
            } else {
                ans = min(ans, t + 1 + U[nv]);
            }
        }
    }
    return ans;
}

int main() {
    scanf("%lld", &N);

    while (N--) {
        scanf("%lld", &X);
        if (X) {
            V.push_back(X);
            for(int i = 0; i < 64; i++) CT[i] += (X & (1LL << i)) ? 1 : 0;
        }
    }

    for(int i = 0; i < 64; i++) {
        if (CT[i] >= 3)  {
            printf("3\n");
            return 0;
        }
    }

    for (int i = 0; i < V.size(); i++) {
        for (int j = i + 1; j < V.size(); j++) {
            if (V[i] & V[j]) {
                G[i].push_back(j);
                G[j].push_back(i);
            }
        }
    }

    for (int i = 0; i < V.size(); i++) {
        ANS = min(ANS, minFrom(i));
    }

    printf("%d\n", ANS == 1e9 ? -1 : ANS);
}
