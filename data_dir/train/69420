#include <bits/stdc++.h>
using namespace std;
typedef long long       ll;
typedef pair<int,int>   pii;
typedef vector<int>     vi;
typedef long double     ld;
#define MOD         1000000007
#define pb          push_back
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define endl        '\n'
#define PI          3.14159265359d
#define sz(x)       (int)x.size()
int lps[200005];
vi occur;
vector<pair<char,ll>> pat,txt,p;
void LPS(){
    int len=0,i=1;
    while(i<sz(pat)){
        if(pat[i]==pat[len])
            lps[i++]=++len;
        else if(len)
            len=lps[len-1];
        else
            lps[i++]=0;
    }
}
void KMP(){
    int i=0,j=0;
    LPS();
    while(i<sz(txt)){
        if(pat[j]==txt[i]){
            j++,i++;
            if(j==sz(pat)){
                occur.pb(i-j);
                j=lps[j-1];
            }
        }
        else if(j)
            j=lps[j-1];
        else
            i++;
    }
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n,m,l,i;
    ll res=0;
    char c;
    string s;
    cin>>n>>m;
    while(n--)
    {
        cin>>s;
        c=s.back();
        s.pop_back();
        s.pop_back();
        l=0;
        for(auto k:s)
            l=l*10+(k-'0');
        if(txt.empty())
            txt.pb({c,l});
        else if(txt.back().F==c)
            txt.back().S+=l;
        else
            txt.pb({c,l});
    }
    while(m--)
    {
        cin>>s;
        c=s.back();
        s.pop_back();
        s.pop_back();
        l=0;
        for(auto k:s)
            l=l*10+(k-'0');
        if(p.empty())
            p.pb({c,l});
        else if(p.back().F==c)
            p.back().S+=l;
        else
            p.pb({c,l});
    }
    if(sz(p)==1)
    {
        for(i=0;i<sz(txt);i++)
            if(txt[i].F==p[0].F&&txt[i].S>=p[0].S)
                res+=txt[i].S-p[0].S+1;
    }
    else if(sz(p)==2)
    {
        for(i=0;i<sz(txt)-1;i++)
            if(txt[i].F==p[0].F&&txt[i].S>=p[0].S&&txt[i+1].F==p[1].F&&txt[i+1].S>=p[1].S)
                res++;
    }
    else
    {
        for(i=1;i<sz(p)-1;i++)
            pat.pb(p[i]);
        KMP();
        for(auto o:occur)
            if(o>0&&txt[o-1].F==p[0].F&&txt[o-1].S>=p[0].S&&o+sz(pat)<sz(txt)&&txt[o+sz(pat)].F==p.back().F&&txt[o+sz(pat)].S>=p.back().S)
                res++;
    }
    cout<<res;
    return 0;
}
