#include<bits/stdc++.h>
using namespace std;
const int N=5e5+5,Log=19;
typedef long long ll;
int n,h[N],nxt[N],rt,fa[Log][N],Dep[N],top,st[N],cnt[N],m,a[N],dep[N];
ll Ans[N],now;
vector <int> H[N];
vector <int> ::iterator it;
char c;
int read()
{
    int x=0,sig=1;
    for (c=getchar();c<'0' || c>'9';c=getchar()) if (c=='-') sig=-1;
    for (;c>='0' && c<='9';c=getchar()) x=x*10+c-48;
    return x*sig;
}
void dfs(int x)
{
    Dep[x]=Dep[fa[0][x]]+1; H[Dep[x]].push_back(x);
    for (int i=h[x];i;i=nxt[i]) dfs(i);
}
int lca(int x,int y)
{
    for (int i=Log-1;i>=0;i--) if (fa[i][x]!=fa[i][y]) x=fa[i][x],y=fa[i][y];
    return Dep[fa[0][x]];
}
int main()
{
    n=read();
    for (int i=1;i<=n;i++)
    {
        fa[0][i]=read(); 
        if (!fa[0][i]) rt=i;else nxt[i]=h[fa[0][i]],h[fa[0][i]]=i;
    }
    dfs(rt);
    for (int j=1;j<Log;j++)
        for (int i=1;i<=n;i++) fa[j][i]=fa[j-1][fa[j-1][i]];
    for (int i=1,j,k;!H[i].empty();i++)
    {
        top=m=now=0;
        for (it=H[i].begin();it!=H[i].end();it++) a[++m]=*it;
        for (j=1;j<=m;j++)
        {
            for (;top>0;)
            {
                k=lca(st[top],a[j]);
                if (k<dep[top])
                {
                    now-=(ll)cnt[top]*(dep[top]-k); dep[top]=k;
                }
                if (top>1 && dep[top-1]>=dep[top])
                {
                    cnt[top-1]+=cnt[top]; now-=cnt[top]*(dep[top]-dep[top-1]); top--;
                }else break;
            }
            Ans[a[j]]+=now+Ans[fa[0][a[j]]]+Dep[a[j]]-1;
            st[++top]=a[j]; dep[top]=Dep[a[j]]; now+=dep[top]; cnt[top]=1;
        }
        top=now=0;
        for (j=m;j;j--)
        {
            for (;top>0;)
            {
                k=lca(st[top],a[j]);
                if (k<dep[top])
                {
                    now-=(ll)cnt[top]*(dep[top]-k); dep[top]=k;
                }
                if (top>1 && dep[top-1]>=dep[top])
                {
                    cnt[top-1]+=cnt[top]; now-=cnt[top]*(dep[top]-dep[top-1]); top--;
                }
				else break;
            }
            Ans[a[j]]+=now;
            st[++top]=a[j]; dep[top]=Dep[a[j]]; now+=dep[top]; cnt[top]=1;
        }
    }
    for (int i=1;i<=n;i++) printf("%lld ",Ans[i]);
    return 0;
}