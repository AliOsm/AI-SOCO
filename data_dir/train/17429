
#include<bits/stdc++.h>
#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define mod 1000000007
#define deb(x) cout<<#x<<" : "<<x<<endl;
#define deb2(x,y) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<endl;
#define deb3(x,y,z) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<"\t"<<#z<<" : "<<z<<endl;
#define inf 1000000000000000 

#define FIO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define endl '\n'
typedef int ll;
#define ld long double

/*
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
  
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> 
*/

using namespace std;
 
 
long long modulo(long long base,long long exponent,long long modulus);
long long choose(ll n,ll k);
ll inverse(ll a,ll m);
void build();
void fileio();
ll ncr(ll n,ll r);
 
const int nax=1e6+10;
const int LG=log2(nax)+1;
vector<ll> fact(nax);
vector<ll> invfact(nax);

string num[] = {"1110111","0010010","1011101","1011011","0111010","1101011","1101111",
"1010010","1111111","1111011"};

vector<string> a; 

ll dp[2005][2005];
ll n,k;

ll count(string a,string b)
{
	ll c = 0;
	for(int i=0;i<a.size();i++)
	{
		if(a[i]=='0' && b[i]=='1') return -1;
		if(a[i]=='1' && b[i]=='0') c++;
	}
	return c++;
}

ll dpsolve(ll ind,ll rem)
{
	if(rem<0) return 0;
	if(ind>=n)
	{
		if(rem==0) return 1;
		return 0;
	}

	ll &ans = dp[ind][rem];
	if(ans!=-1)
		return ans;

	ans = 0;
	for(int i=9;i>=0;i--)
	{
		ll c = count(num[i],a[ind]);
		if(c!=-1)
			ans|= dpsolve(ind+1,rem-c);
	}
	return ans;
}

string ans;
void getans(ll ind,ll rem)
{
	if(rem<0) return;
	if(ind>=n)
	{
		return;
	}

	for(int i=9;i>=0;i--)
	{
		ll c = count(num[i],a[ind]);
		if(c!=-1)
		{
			if(dpsolve(ind+1,rem-c))
			{
				string temp;
				ans+=(char)(i+'0');
				getans(ind+1,rem-c);
				break;
			}
		}
	}	
}
 
int32_t main() {
 
    FIO
    //fileio();
    //build();
    
    cin>>n>>k;

    a.resize(n);
    for(int i=0;i<n;i++)
    {
    	cin>>a[i];
    }

    memset(dp,-1,sizeof(dp));
    if(dpsolve(0,k))
    {
    	getans(0,k);
    	cout<<ans<<endl;
    }
    else
    {
    	cout<<-1<<endl;
    }


 
    return 0;
}
 
ll ncr(ll n,ll r)
{
    if(r>n || r<0 || n<0)
        return 0;
    ll ans=fact[n];
    ll temp=(invfact[n-r]*invfact[r])%mod;
    ans=(ans*temp)%mod;
    return ans;
}

void fileio()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
} 
void build()
{
    fact[0]=1;
    invfact[0]=inverse(1,mod);
    for(ll i=1;i<nax;i++)
    {
        fact[i]=(fact[i-1]*i)%mod;
        invfact[i] = inverse(fact[i],mod);   
    }
}
 
long long modulo(long long base,long long exponent,long long modulus)
{
    if(modulus ==1)
        return 0;
 
    long long result=1;
    base=base % modulus;
    while(exponent>0)
    {
        if(exponent%2==1)
        {
            result=(result*base) % modulus;
 
        }
        exponent=exponent>>1;
        base = (base*base) % modulus;
    }
    return result;
}
 
long long choose(ll n,ll k)
{
    if(k==0)  return 1;
    return (n* choose(n-1,k-1))/k;
}
 
void EE(ll a,ll b,ll &co1,ll &co2)
{
    if(a%b==0)
    {
        co1=0;
        co2=1;
        return;
    }
    EE(b,a%b,co1,co2);
    ll temp=co1;
    co1=co2;
    co2=temp-co2*(a/b);
}
 
ll inverse(ll a,ll m)
{
    ll x,y;
    EE(a,m,x,y);
    if(x<0) x+=m;
    return x;
}