#include <bits/stdc++.h>
#define MOD 1000000007
#define endl "\n"
typedef long long ll;
using namespace std;

const int N = 1111;
int len[N];
ll fact[N], invf[N];
int n;

ll powmod(ll x, ll n) {
    ll ans = 1;
    while(n) {
        if(n & 1) {
            ans = ans * x % MOD;
        }
        x = x * x % MOD;
        n >>= 1;
    }
    return ans;
}

ll ncr(ll n, ll r) {
    if(r > n || r < 0) return 0;
    return fact[n] * invf[r] % MOD * invf[n - r] % MOD;
}

ll gw(const string& s, int o) {
    ll ans = 0, n1 = 0;
    for(int i = 0; i < s.size(); i++) {
        if(s[i] == '1') {
            ans = (ans + ncr(n - i - 1, o - n1)) % MOD;
            n1++;
        }
    }
    if(n1 == o) {
        ans = (ans + 1) % MOD;
    }
    return ans;
}

signed main() {
    ios_base::sync_with_stdio(false);
    string s;
    cin >> s;
    n = s.size();
    int k;
    cin >> k;
    if(k == 0) {
        cout << 1 << endl;
        return 0;
    } 
    if(s == "1" && k != 0) {
        cout << 0 << endl;
        return 0;
    }
    fill(len + 2, len + N, -1);
    ll ans = 0;
    fact[0] = 1;
    invf[0] = 1;
    for(ll i = 1; i <= n; i++) {
        fact[i] = fact[i - 1] * i % MOD;
        invf[i] = powmod(fact[i], MOD - 2);
    }
    for(ll i = 1; i <= n; i++) {
        int x = i;
        int steps = 0;
        vector<int> v;
        while(x > 1) {
            v.push_back(x);
            x = __builtin_popcount(x);
            steps++;
            if(len[x] >= 0) {
                steps += len[x];
                for(x : v) {
                    len[x] = steps--;
                }
                break;
            }
        }
        if(len[i] + 1 != k) continue;
        ans = (ans + gw(s, i)) % MOD;
        if(i == 1) {
            ans = (ans - 1 + MOD) % MOD;
        }
    }
    cout << ans << endl;
    return 0;
}
