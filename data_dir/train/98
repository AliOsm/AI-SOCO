#include <cstdio>
#include <iostream>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
#include <memory.h>
#include <complex>
#include <time.h>
#pragma comment(linker, "/STACK:100000000")
using namespace std;

#define mp make_pair
#define pb push_back
#define ll long long
#define sz(x) (int)(x).size()

int cnt[26];
int tmpcnt[26];

vector<string> vars[50];

int main() {
    //freopen("periods.in","rt",stdin);
	//freopen("periods.out","wt",stdout);

	string s;
	cin >> s;
	for(int i = 0; i < sz(s); i++) cnt[s[i]-'a']++;
	
	if(sz(s) % 2 == 0) {
		vector<int> nech;
		for(int i = 0; i < 26; i++) {
			if(cnt[i] % 2 == 1) nech.pb(i);
		}
		for(int i = sz(nech)/2; i < sz(nech); i++) {
			cnt[nech[i]]--;
			cnt[nech[i-sz(nech)/2]]++;
		}
		for(int i = 0; i < 26; i++) {
			for(int j = 0; j < cnt[i] / 2; j++) printf("%c", i + 'a');
		}
		for(int i = 25; i >= 0; i--) {
			for(int j = 0; j < cnt[i] / 2; j++) printf("%c", i + 'a');
		}
		return 0;
	}

	for(int xxx = 0; xxx < 26; xxx++) {
		if(cnt[xxx]) {
			for(int i = 0; i < 26; i++) tmpcnt[i] = cnt[i];
			char mid = xxx + 'a';
			tmpcnt[xxx]--;

			string t = "";

			int wtf = 0;

			vector<int> nech;
			for(int i = 0; i < 26; i++) {
				if(tmpcnt[i] % 2 == 1) nech.pb(i);
			}
			for(int i = sz(nech)/2; i < sz(nech); i++) {
				tmpcnt[nech[i]]--;
				tmpcnt[nech[i-sz(nech)/2]]++;
				wtf++;
			}
			for(int i = 0; i < 26; i++) {
				for(int j = 0; j < tmpcnt[i] / 2; j++) t += (char)(i + 'a');
			}
			t += mid;
			for(int i = 25; i >= 0; i--) {
				for(int j = 0; j < tmpcnt[i] / 2; j++) t += (char)(i + 'a');
			}
			vars[wtf].pb(t);
		}
	}

	for(int i = 0; i < 50; i++) {
		if(sz(vars[i]) != 0) {
			string res = vars[i][0];
			for(int j = 1; j < sz(vars[i]); j++) {
				res = min(res, vars[i][j]);
			}
			cout << res << endl;
			return 0;
		}
	}


    return 0;
}