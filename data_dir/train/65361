#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>

#define N	400000
#define INF	0x3f3f3f3f3f3f3f3fLL

long long min(long long a, long long b) { return a < b ? a : b; }
long long max(long long a, long long b) { return a > b ? a : b; }

void srand_() {
	struct timeval tv;

	gettimeofday(&tv, NULL);
	srand(tv.tv_sec ^ tv.tv_usec);
}

int rand_(int n) {
	return (rand() * 76543LL + rand()) % n;
}

struct V {
	long long x, y;
} vv[N + 1];

int compare(const void *a, const void *b) {
	struct V *u = (struct V *) a;
	struct V *v = (struct V *) b;

	return u->x == v->x ? 0 : u->x < v->x ? -1 : 1;
}

void sort(struct V *vv, int n) {
	int i;

	for (i = 0; i < n; i++) {
		int j = rand_(i + 1);
		struct V tmp;

		tmp = vv[i], vv[i] = vv[j], vv[j] = tmp;
	}
	qsort(vv, n, sizeof *vv, compare);
}

int main() {
	int t;

	srand_();
	scanf("%d", &t);
	while (t--) {
		static long long gg[N + 1];
		long long len, k, lower, upper, lmax, rmin, y, ans;
		int n, m, i;

		scanf("%lld%d%lld", &len, &n, &k);
		for (i = 0; i < n; i++)
			scanf("%lld", &gg[i]);
		gg[n] = len;
		for (i = n; i >= 1; i--)
			gg[i] -= gg[i - 1];
		lower = 1;
		upper = len + 1;
		for (i = 0; i <= n; i++)
			upper = min(upper, gg[i] + 1);
		while (upper - lower > 1) {
			long long l = (lower + upper) / 2, k_;

			k_ = k;
			for (i = 0; i <= n; i++)
				if ((k_ -= gg[i] / l - 1) <= 0)
					break;
			if (k_ <= 0)
				lower = l;
			else
				upper = l;
		}
		lmax = lower;
		lower = 0, upper = len;
		while (upper - lower > 1) {
			long long r = (lower + upper) / 2, k_;

			k_ = k;
			for (i = 0; i <= n; i++)
				if ((k_ -= (gg[i] + r - 1) / r - 1) < 0)
					break;
			if (k_ >= 0)
				upper = r;
			else
				lower = r;
		}
		rmin = upper;
		/* lmax <= rmin must hold */
		m = 0;
		for (i = 0; i <= n; i++) {
			long long kmin = (gg[i] + rmin - 1) / rmin - 1;
			long long kmax = gg[i] / lmax - 1;

			if (kmin > kmax) {	/* kmin == kmax + 1 */
				struct V *v = &vv[m++];

				v->x = lmax - gg[i] / (kmin + 1);
				v->y = (gg[i] + kmax) / (kmax + 1) - rmin;
			}
		}
		sort(vv, m);
		ans = INF;
		y = 0;
		for (i = m - 1; i >= 0; i--) {
			ans = min(ans, rmin - lmax + vv[i].x + y);
			y = max(y, vv[i].y);
		}
		ans = min(ans, rmin - lmax + y);
		printf("%lld\n", ans);
	}
	return 0;
}
