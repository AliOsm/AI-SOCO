/* 
chirag11032000
Chirag Thakur
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

using ll = long long;
using db = double;
using pii = pair < int, int >;
using pll = pair < ll, ll >;

template < typename T > using OrderedSet = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
	cerr << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << " | ";
	__f(comma + 1, args...);
}
#else
#define trace(...)
#endif

#define eb emplace_back
#define mp make_pair
#define mt make_tuple
#define fastIo() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const db PI = acos(-1);
const ll LINF = LLONG_MAX;
const int MOD = 1e9 + 7, INF = INT_MAX, N = 1e5 + 10;

void testCase();

int main() {
	fastIo();
	testCase();
	cerr << "Time taken: " << int((clock() * 1000.) / CLOCKS_PER_SEC) << "ms\n";
	return 0;
}

void testCase() {
	int n;
	cin >> n;
	map < ll, set < int > > inds;
	for (int i = 0; i < n; ++i) {
		int num;
		cin >> num;
		inds[num].insert(i);
	}
	for (auto it = inds.begin(); it != inds.end(); ++it) {
		auto &curr = (*it);
		auto &pos = curr.second;
		while (pos.size() >= 2) {
			auto it1 = pos.begin(), it2 = pos.begin();
			++it2;
			inds[2 * curr.first].insert((*it2));
			pos.erase(it1);
			pos.erase(it2);
		}
	}
	vector < pair < int, ll > > res;
	for (auto &el : inds) {
		for (auto &i : el.second) {
			res.eb(i, el.first);
		}
	}
	sort(res.begin(), res.end());
	cout << res.size() << "\n";
	for (auto &i : res) {
		cout << i.second << " ";
	}
	cout << "\n";
}