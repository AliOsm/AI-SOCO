#include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define ll long long
#define pb push_back
#define mk make_pair
const int MX=2e5+11;
int N, M, k,a,b;
int arr[MX];
void reply(int x)
{
    printf("%d\n", x+1);
    fflush(stdout);
}

int ask()
{
    int x;
    scanf("%d",&x);
    return x;
}
int dep[MX];
vector<int> G[MX];
set<pair<ll,int> > ms;
int sub[MX], par[MX], vis[MX];
void dfs(int x,int p)
{
    bool is=1;
    sub[x]=1;
    par[x]=p;
    for(int i=0; i<G[x].size(); i++)
    {
        int ch=G[x][i];
        if(ch == p) continue;
        dep[ch] =dep[x]+1;
        dfs(ch, x);
        sub[x] += sub[ch];
        is=0;
    }
    if(is)
    {
        ms.insert({dep[x], x});
    }
}
ll dfs2(int x, int p)
{
    ll ret=(ll)dep[x]*sub[x];
    if(vis[x]) return ret;
    for(int i=0; i<G[x].size(); i++)
    {
        int ch=G[x][i];
        if(ch == p) continue;
        ret+=dfs2(ch, x);
    }
    return ret;
}
void solve()
{
    scanf("%d%d", &N, &k);
    for(int i=0; i<N; i++)
    {
        if(!i) continue;
        int a, b;
        scanf("%d%d", &a, &b);
        G[a].pb(b);
        G[b].pb(a);
    }
    dfs(1, -1);
    ll sum=0;
    while(k--)
    {
        pair<int,int> v=*--ms.end();
        ms.erase(ms.find(v));
        if(v.S != 1)
        {
            int node=v.S, Par=par[v.S];
            ms.insert(mk((ll)dep[Par]-sub[Par]+1, Par));
        }
        vis[v.S]=1;
//       cout<<v.S<<'\n';
        sum+=v.F;
    }

 ///   cout<<dfs2(1, -1)<<"\n";
    cout<<sum<<"\n";
}
int main()
{

    int t=1;
//    scanf("%d", &t);
    while(t--) solve();
    return 0;
}



















/*
#include <cstdio>
#include <cstring>

using namespace std;

int main() {
    int l = 1, r = 1000000;
    while (l != r) {
        int mid = (l + r + 1) / 2;
        printf("%d\n", mid);
        fflush(stdout);

        char response[3];
        scanf("%s", response);
        if (strcmp(response, "<") == 0)
            r = mid - 1;
        else
            l = mid;
    }

    printf("! %d\n", l);
    fflush(stdout);
}



void reply(int x) {
	printf("%d\n", x+1);
	fflush(stdout);
}

int ask() {
	int x;
	scanf("%d",&x);
	return x;
}


int x = ask();
reply(i);
*/
