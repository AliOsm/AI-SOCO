
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <stack>
#include <cstring>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <ctime>

using namespace std;

const int N = 2010;
const int INF = (int) 1e9;

struct Edge
{
    int u, v, w;
    Edge(int u, int v, int w) : u(u), v(v), w(w) {};
    Edge() {};
    bool operator < (const Edge& other) const
    {
        return w < other.w;
    }
};

int parent[N], cnt[N];
char a[N][11][11];
int d[N][N];
int n, m, k, w;
vector < Edge > p;
vector < int > G[N];
bool used[N];



void make(int v)
{
    parent[v] = -1;
    cnt[v] = 1;
}

int find(int v)
{
    while (parent[v] != -1)
        v = parent[v];
    return v;
}

void Union(int v, int u)
{
    if (cnt[v] > cnt[u])
    {
        parent[u] = v;
        cnt[v] += cnt[u];
    }
    else
    {
        parent[v] = u;
        cnt[u] += cnt[v];
    }
}

int CountDiff(int v, int u)
{
    int ans = 0;
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < m; ++j)
            ans += (a[v][i][j] != a[u][i][j]);
    }
    return ans;
}

void dfs(int v, int p)
{
    used[v] = true;
    if (d[p][v] * w >= m * n || v == 0) 
        printf("%d %d\n", v + 1, 0);
    else
        printf("%d %d\n", v + 1, p + 1);
    for (int i = 0; i < G[v].size(); ++i)
        if (used[ G[v][i] ] == false)
            dfs( G[v][i], v);
}



int main()
{
    scanf("%d%d%d%d\n", &n, &m, &k, &w);
    for (int i = 0; i < k; ++i)
    {
        for (int j = 0; j < n; ++j)
        {
            for (int c = 0; c < m; ++c)
                scanf("%c", &a[i][j][c]);
            scanf("\n");
        }
    }

    for (int i = 0; i < k; ++i)
    {
        for (int j = i + 1; j < k; ++j)
        {
            d[j][i] = d[i][j] = CountDiff(i, j);
            p.push_back(Edge(i, j, min(d[i][j] * w, n * m)));
        }
    }

    sort(p.begin(), p.end());
    int ans = 0;
    for (int i = 0; i < k; ++i)
        make(i);

    for (int i = 0; i < p.size(); ++i)
    {
        int u = find(p[i].u);
        int v = find(p[i].v);
        if (u != v)
        {
            Union(u, v);
            ans += p[i].w;
            G[p[i].u].push_back(p[i].v);
            G[p[i].v].push_back(p[i].u);
        }
    }
    printf("%d\n", ans + n * m);
    dfs(0, 0);





    return 0;
}