#include<iostream>
#include<set>

using namespace std;

const int MAXN = 1e6 + 6, INF = 1e9;
int n, k;
int a[MAXN], plc[MAXN], fen[MAXN];
bool mark[MAXN];
set<int> s;

void addFen(int x)
{
	for(; x < MAXN; x += x & (-x))
		fen[x]++;
}

int getFen(int x)
{
	int ans = 0;
	for(; x; x -= x & (-x))
		ans += fen[x];
	return ans;
}

int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> k;
	for(int i = 0; i < n; i++)
	{
		cin >> a[i];
		plc[a[i]] = i;
	}
	for(int i = 0; i < k; i++)
	{
		int a;
		cin >> a;
		mark[a] = true;
	}
	long long ans = 0;
	s.insert(-1);
	s.insert(n);
	for(int i = 1; i <= n; i++)
	{
		if(!mark[i])
		{
			int x = plc[i];
			int r = *s.lower_bound(x);
			set<int> :: iterator it = s.lower_bound(x);
			it--;
			int l = *it;
			l++, r--;
			int del = getFen(r + 1) - getFen(l);
			ans += r - l + 1 - del;
			addFen(x + 1);
		}		
		else
			s.insert(plc[i]);
	}
	cout << ans << endl;
	return 0;
}
