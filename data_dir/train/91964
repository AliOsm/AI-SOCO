#include <iostream>
#include <assert.h>
#include <stack>
#include <algorithm>
#include <queue>
#include <math.h>
#include <set>
#include <vector>
#include <queue>
#include <map>
#include <string.h>
#include <stdio.h>
#define sf scanf
#define pf printf
#define ll long long

#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i )
#define pb push_back 

using namespace std;

int ids[1000000];
ll v[1000000];
ll l[1000000], r[1000000];

int ans[300000];

struct Node
{
    int k1;
    int k2;
    int id;
};

int cmp( const Node &a, const Node & b )
{
    return a.k1 < b.k1 || ( a.k1 == b.k1 && a.k2 < b.k2 ) || ( a.k1 == b.k1 && a.k2 == b.k2 && a.id < b.id ) ;
}


class Prio
{
    public:
        bool operator () ( const Node &a, const Node & b )
        {
            return a.k2 > b.k2 || ( a.k2 == b.k2 && a.k1 > b.k1 );
        }
};


int main()
{
    int n,m;
    while( cin>>n>>m )
    {
        for( int i = 0; i < n; ++i )
        {
            cin>>l[i]>>r[i];
        }

        vector< pair< ll, int > > ft;
        for( int i = 0; i < m; ++i )
        {
            ll t;
            cin>>t;
            ft.pb( make_pair( t, i ) );
        }

        sort( ft.begin(), ft.end() );

        for( int i = 0; i < ft.size(); ++i )
        {
            ids[i] = ft[i].second;
            v[i] = ft[i].first;
        }

        int ok = 1;

        vector< Node > nima;
        for( int i = 1; i < n; ++i )
        {
            ll left = l[i] - r[i-1];
            ll right = r[i] - l[i-1];
            int pos = lower_bound( v, v + m, left ) - v;
            int pos2 = upper_bound( v, v + m, right ) - v;
            if( pos2 <= pos )
            {
                ok = 0;
                break;
            }
            Node node;
            node.k1 = pos;
            node.k2 = pos2 - 1;
            node.id = i;
            nima.pb( node );
        }

        sort( nima.begin(), nima.end(), cmp );

        _clr( ans );

        if( ok )
        {
            int last = -1;
            priority_queue< Node, vector< Node > , Prio > q;
            int pos = 0;
            for( int i = 0; i < m; ++i )
            {
                for(; pos < nima.size(); ++pos)
                {
                    if( nima[pos].k1 > i )
                    {
                        break;
                    }
                    q.push( nima[pos] );
                }

                while( 1 )
                {
                    if( q.empty() ) break;
                    Node node = q.top();
                    q.pop();

                    //printf("i = %d last = %d k1 = %d k2 = %d\n",node.id, i, node.k1, node.k2);
                    if( node.k2 < i )
                    {
                        continue;
                    }
                    ans[ node.id ] = ids[ i ];
                    break;
                }
            }

            for( int i = 1; i < n; ++i )
            {
                if( ans[i] == -1 ) 
                {
                    ok =0;
                    break;
                }
            }
        }
        if( ok )
        {
            cout<<"Yes"<<endl;
            for( int i = 1; i < n; ++i )
            {
                cout<<ans[i] + 1<< " ";
            }
            cout<<endl;
        }
        else
        {
            cout<<"No"<<endl;
        }
    }
    
}