/* ****revpro**** */
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")
#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl	   '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii	    map<ll,ll>
using namespace std;

#define N  300005
vi seg(4*N,1e18),lazy(4*N,0);
void updaterange(ll cur,ll st,ll end,ll l,ll r,ll val,ll flag=0)
{
	if(lazy[cur]!=0)                                    /* 2-change */
	{
		seg[cur]+=lazy[cur];					/* 3-change */
		if(st!=end)
		{
			lazy[cur<<1]+=lazy[cur];						/* 4-change */
			lazy[(cur<<1)+1]+=lazy[cur];                   /* 5-change */
		}
		lazy[cur]=0;                                    /* 6-change */
	}
	if(st>end||st>r||end<l) return;
	if(l<=st&&end<=r)
	{
		if(flag)
		{
			seg[cur]=val;
			lazy[cur]=0;
		}
		else{
			seg[cur]+=val;					    /* 7-change */
			if(st!=end)
			{
				lazy[(cur<<1)]+=val;                           /* 8-change */
				lazy[(cur<<1)+1]+=val;                         /* 9-change */
			}
		}
		return;
	}
	ll mid=(st+end)>>1;
	updaterange((cur<<1),st,mid,l,r,val,flag);
	updaterange((cur<<1)+1,mid+1,end,l,r,val,flag);
	seg[cur]=min(seg[cur<<1],seg[(cur<<1)+1]);                  /* 10-change */
}

ll query(ll cur,ll st,ll end,ll l,ll r)
{
	if(st>end||st>r||end<l) return 1e18;
	if(lazy[cur]!=0)
	{
		seg[cur]+=lazy[cur];                /* 11-change */
		if(st!=end)
		{
			lazy[(cur<<1)]+=lazy[cur];                    /* 12-change */
			lazy[(cur<<1)+1]+=lazy[cur];                  /* 13-change */
		}
		lazy[cur]=0;
	}
	if(st>=l&&end<=r) return seg[cur];
	ll mid=(st+end)>>1;
	ll ans1=query(cur<<1,st,mid,l,r);
	ll ans2=query((cur<<1)+1,mid+1,end,l,r);
	return min(ans1,ans2);                                 /* 14-change */
}
signed main()
{
 #ifndef ONLINE_JUDGE
      // for getting input from input.txt
     freopen("input.txt", "r", stdin);
//     // for writing output to output.txt
//     freopen("output1.txt", "w", stdout);
 #endif
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		vi pre;
		ll n,m,k;
		cin>>n>>m>>k;
		ll a[n];
		pre.pb(0);
		rep(i,0,n) cin>>a[i],pre.pb(pre.back()+a[i]);
		// rep(i,0,n+1) cout<<pre[i]<<' ';
		// cout<<endl;
		vi mm[m];
		rep(i,0,n+1)
			mm[i%m].pb(pre[i]);
		ll cur[m]={0},idx[m]={0};
		rep(i,1,m) idx[i]=idx[i-1]+sz(mm[i-1]);
		ll ans=0;
		updaterange(1,0,n,0,0,0,1);
		//cout<<query(1,0,n,0,0)<<endl;
		cur[0]=1;
		rep(i,0,n)
		{
			updaterange(1,0,n,idx[i%m],idx[i%m]+cur[i%m]-1,k);
			// rep(j,0,n+1)
			// {
			// 	cout<<query(1,0,n,j,j)<<' ';
			// }
			// cout<<endl;
			ans=max(ans,pre[i+1]-query(1,0,n,0,n));
			updaterange(1,0,n,idx[(i+1)%m]+cur[(i+1)%m],idx[(i+1)%m]+cur[(i+1)%m],pre[i+1],1);
			cur[(i+1)%m]++;
		}
		cout<<ans<<endl;
	}
	return 0;
}