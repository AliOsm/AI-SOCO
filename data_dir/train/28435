#include<bits/stdc++.h>
#include<unordered_map>
#include<unordered_set>
#include<random>
using namespace std;

#define MAX 200002

int n;
int m;

char buf[MAX];

string s;
string t;

deque<int> d[27];

vector<int> ans;

vector<unsigned long long int> hs[26];
#define MOD 1000000007ULL

unsigned long long int base[MAX];

vector<unsigned long long int> hst[26];


int main(){
	base[0] = 1;
	for (int i = 1; i < MAX; i++){
		base[i] = base[i - 1];
		base[i] *= MOD;
	}
	cin >> n >> m;
	scanf("%s", buf);
	s = buf;
	scanf("%s", buf);
	t = buf;
	for (int j = 0; j < 26; j++){
		hs[j].assign(n, 0);
		hst[j].assign(m, 0);
	}
	for (int i = 0; i < s.size(); i++){
		d[s[i] - 'a'].push_back(i);
		hs[s[i] - 'a'][i] += base[i];
	}
	for (int j = 0; j < 26; j++){
		for (int i = 1; i < s.size(); i++){
			hs[j][i] += hs[j][i - 1];
		}
	}
	for (int i = 0; i < t.size(); i++){
		hst[t[i] - 'a'][i] += base[i];
	}
	for (int j = 0; j < 26; j++){
		for (int i = 1; i < t.size(); i++){
			hst[j][i] += hst[j][i - 1];
		}
	}
	for (int i = 0; i + m - 1 < s.size(); i++){
		vector<int> linkk(26, -1);
		bool ok = false;
		for (int j = 0; j < 26; j++){
			while (!d[j].empty() && d[j].front() < i){
				d[j].pop_front();
			}
			int f = n;
			if (d[j].size())f = d[j].front();
			if (f <= i + m - 1){
				int a = s[f] - 'a';
				int b = t[f - i]-'a';
				if (linkk[a] != -1 && linkk[a] != b){
					ok = true;
					break;
				}
				if (linkk[b] != -1 && linkk[b] != a){
					ok = true;
					break;
				}
				linkk[a] = b;
				linkk[b] = a;
			}
		}
		if (ok){
			continue;
		}
		for (int j = 0; j < 26; j++){
			if (linkk[j] == -1)continue;
			unsigned long long int A = hs[j][i + m - 1];
			if (i){
				A -= hs[j][i - 1];
			}
			unsigned long long int B = hst[linkk[j]].back()*base[i];
			if (A != B){
				ok = true;
			}
		}
		if (ok == false){
			ans.push_back(i);
		}
	}
	cout << ans.size() << endl;
	for (int i = 0; i < ans.size(); i++){
		if (i)printf(" ");
		printf("%d", ans[i]+1);
	}
	puts("");
	return 0;
}