/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author alireza_kaviani
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
typedef pair<ld, ld> pld;
typedef pair<string, string> pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define Mp                          make_pair
#define sep                         ' '
#define endl                        '\n'
#define debug(x)                    cerr << #x << " = " << x << endl
#define SZ(x)                       ll(x.size())
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define file_io                     freopen("in.txt" , "r+" , stdin) ; freopen("out.txt" , "w+" , stdout);
#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline ll input() {
    ll n;
    cin >> n;
    return n;
}

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

set_random;

const ll MAXN = 1e5 + 10;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

vector<ll> SP[MAXN][26] , FP[MAXN];
vector<pll> first , second;
ll n , m , mark[MAXN] , cnt[MAXN];
char vow[] = {'a' , 'e' , 'i' , 'o' , 'u'};
string s[MAXN];

ll count(string s){
    ll ans = 0;
    for(ll i = 0 ; i < s.size() ; i++){
        for(ll j = 0 ; j < 5 ; j++){
            if(s[i] == vow[j])  ans++;
        }
    }
    return ans;
}

char last(string s){
    char ans;
    for(ll i = 0 ; i < s.size() ; i++){
        for(ll j = 0 ; j < 5 ; j++){
            if(s[i] == vow[j])  ans = s[i];
        }
    }
    return ans;
}

void matchFirst(){
    for(ll i = 0 ; i < MAXN ; i++){
        for(ll j = 0 ; j + 1 < FP[i].size() ; j += 2){
            ll x = FP[i][j] , y = FP[i][j + 1];
            mark[x] = 1;
            mark[y] = 1;
            first.push_back({x , y});
        }
    }
}

void matchSecond(){
    for(ll i = 0 ; i < MAXN ; i++){
        for(ll j = 0 ; j < 26 ; j++){
            for(ll k = 0 ; k + 1 < SP[i][j].size() ; k += 2){
                ll x = SP[i][j][k] , y = SP[i][j][k + 1];
                mark[x] = 1;
                mark[y] = 1;
                second.push_back({x , y});
            }
        }
    }
}

int main() {
    fast_io;

    cin >> n;
    for(ll i = 0 ; i < n ; i++){
        cin >> s[i];
        cnt[i] = count(s[i]);
        char c = last(s[i]);
        SP[cnt[i]][c - 97].push_back(i);
    }
    matchSecond();

    for(ll i = 0 ; i < n ; i++){
        if(!mark[i]){
            FP[cnt[i]].push_back(i);
        }
    }
    matchFirst();

    m = min(SZ(second) , (SZ(second) + SZ(first)) / 2);
    while(second.size() > m){
        first.push_back(second.back());
        second.pop_back();
    }

    cout << m << endl;
    for(ll i = 0 ; i < m ; i++){
        cout << s[first[i].X] << sep << s[second[i].X] << endl;
        cout << s[first[i].Y] << sep << s[second[i].Y] << endl;
    }

    return 0;
}
/*
todo :
    1- set constants
    2- check TimeLimit and MemoryLimit
    3- check special test cases
    4- don't forget BS can help you that is good idea(use for loop for floats)
    5- don't forget printf and scanf can help you in your code speed
*/
