#include <vector>
#include <algorithm>
#include <cstdio>
#include <iostream>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <cassert>
#include <string>
#include <unordered_map>
#include <unordered_set>

using namespace std;

const int N = 2e5 + 1;
const int M = 998244353;
int fact[N], ifact[N];
int n, k, h[N];

int Pow(int a, int b) {
	if (b == 0)
		return 1;
	int res = Pow(a, b >> 1);
	res = (1LL * res * res) % M;
	if ((b & 1) == 1)
		res = (1LL * res * a) % M;
	return res;
}

int nCk(int n, int k) {
	if (k > n)
		return 0;
	return ((1LL * fact[n] * ifact[k]) % M * ifact[n - k]) % M;
}

int main(int argc, char **argv) {
	fact[0] = ifact[0] = 1;
	for (int i = 1; i < N; ++i) {
		fact[i] = (1LL * fact[i - 1] * i) % M;
		ifact[i] = Pow(fact[i], M - 2);
	}
	scanf("%d%d", &n, &k);
	for (int i = 0; i < n; ++i)
		scanf("%d", &h[i]);
	int m = 0;
	for (int i = 0; i < n; ++i) {
		if (h[i] != h[(i + 1) % n])
			++m;
	}
	int add = Pow(k, n);
	int subtract = 0;
	for (int i = 0; i * 2 <= m; ++i) {
		int x = nCk(m, i);
		int y = nCk(m - i, i);
		int z = Pow(max(k - 2, 0), m - 2 * i);
		subtract = (subtract + ((1LL * x * y) % M * z) % M) % M;
	}
	subtract = (1LL * subtract * Pow(k, n - m)) % M;
	int answer = (1LL * ((add - subtract) % M + M) % M * ifact[2]) % M;
	printf("%d\n", answer);
	return 0;
}
