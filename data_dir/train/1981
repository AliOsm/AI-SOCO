#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const int INF = (int) 1.01e9;
const ld EPS = 1e-9;

const ld PI = acos(-1.0L);

void precalc() {
}

int n, a, b, T;

const int maxn = (int) 5e5 + 10;
char s[maxn];

bool read() {
  if (scanf("%d%d%d%d", &n, &a, &b, &T) < 4) {
    return 0;
  }
  scanf("%s", s);
  return 1;
}

int getVal(int pos) {
  return (s[pos] == 'w' ? b : 0) + 1;
}

void solve() {
  {
    int need = getVal(0);
    if (T < need) {
      printf("0\n");
      return;
    }
    T -= need;
  }
  int res = 1;

  s[n] = s[0];
  for (int iter = 0; iter < 2; ++iter) {
    int left = T;
    
    int pos = n - 1;
    while (pos > 0) {
      int need = getVal(pos) + a;
      if (left < need) {
        break;
      }
      left -= need;
      --pos;
    }
    for (int i = 0; i < n; ++i) {
      while (pos < i || (left < 0 && pos < n - 1)) {
        ++pos;
        left += a + getVal(pos);
      }
      if (left < 0) {
        break;
      }
      res = max(res, i + n - pos);
      left -= 2 * a + getVal(i + 1);
    }
    reverse(s + 1, s + n);
  }
  printf("%d\n", res);
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
    //break;
#ifdef DEBUG
    eprintf("Time: %.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
