#include <bits/stdc++.h>
using namespace std;

#define pb push_back

const int MAXN = 500100;
const int INF = 1e9;

struct Triple {
  int a, b, c;
  Triple(int a = 0, int b = 0, int c = 0) : a(a), b(b), c(c) {}
  bool operator<(Triple p) const {
    if (a != p.a) return a < p.a;
    if (b != p.b) return b < p.b;
    return c < p.c;
  }
};

int n;
int t[2 * MAXN];
vector<int> vals;
Triple x[MAXN];

void update(int pos, int val) {
  pos += vals.size();
  t[pos] = min(t[pos], val);
  while (pos >>= 1) {
    t[pos] = min(t[pos << 1], t[pos << 1 | 1]);
  }
}

int getMin(int l, int r) {
  int res = INF;
  for (l += vals.size(), r += vals.size(); l < r; l >>= 1, r >>= 1) {
    if (l & 1) res = min(res, t[l++]);
    if (r & 1) res = min(res, t[--r]);
  }
  return res;
}

int main() {
#ifdef LOCAL
  freopen("input.txt", "r", stdin);
#endif
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", &x[i].a);
    x[i].a *= -1;
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d", &x[i].b);
    x[i].b *= -1;
    vals.pb(x[i].b);
  }
  for (int i = 0; i < n; ++i) {
    scanf("%d", &x[i].c);
    x[i].c *= -1;
  }
  fill(t, t + 2 * MAXN, INF);
  sort(x, x + n);
  sort(vals.begin(), vals.end());
  vals.erase(unique(vals.begin(), vals.end()), vals.end());
  int res = 0;
  for (int i = 0; i < n; ++i) {
    int j = i;
    while (j < n && x[j].a == x[i].a) {
      int pos = lower_bound(vals.begin(), vals.end(), x[j].b) - vals.begin();
      res += getMin(0, pos) < x[j].c;
      ++j;
    }
    for (int k = i; k < j; ++k) {
      int pos = lower_bound(vals.begin(), vals.end(), x[k].b) - vals.begin();
      update(pos, x[k].c);
    }
    i = j - 1;
  }
  printf("%d\n", res);
  return 0;
}