#include <bits/stdc++.h>
using namespace std;
#define sc(x)            scanf("%d",&x)
#define scc(x)           scanf("%c",&x)
#define scl(x)           scanf("%lld",&x)
#define sz(v)	     	(v.size())
#define mem(v, d)		memset(v, d, sizeof(v))
#define oo				2000000100
#define OO				4000000000000000100
#define PI 3.14159265
#define S second
#define F first
typedef unsigned int uint;
typedef long long ll;
//-----------------------------------------------------
const int N = 200100;
const ll MOD = 998244353;
const double EBS = 1e-7;

int dX[] = {0,0,1,-1};
int dY[] = {1,-1,0,0};

//int GCD(ll num,ll ones) { return !ones ? num : GCD(ones,num%ones); }
//ll lcm(ll a, ll b) { return (a / GCD(a, b)) * b; }
//double Len(ll x,ll y,ll X,ll Y) { return sqrt((X-x)*(X-x)+(Y-y)*(Y-y)); }
/*ll fastP(ll b,ll p)
{
    if(p==0) return 1;
    else if(p==1) return b;
    ll a = fastP(b,p/2)%MOD;
    if(p%2) return (((a*a)%MOD)*b)%MOD;
    else return (a*a)%MOD;
}*/
//----------------- ------   -------
int b[55],e[55],tot[55],ans[55],arr[250005],n,m;
ll dp[250005][2];
ll solve(int idx,bool f)
{
    if(idx == m) return f*(-OO);
    if(dp[idx][f]!=-OO) return dp[idx][f];
    if(f) return dp[idx][f] = max(solve(idx+1,1),solve(idx+1,0)+e[arr[idx]]);
    else return dp[idx][f] = max(solve(idx+1,0)+tot[arr[idx]],(ll)b[arr[idx]]);
}
int main()
{
    sc(n); sc(m);
    for(int j = 1;j<=n;++j)
    {
        int k,x;
        vector<int>tmp;
        sc(k);
        while(k--)
        {
            sc(x);
            tmp.push_back(x);
        }
        k = sz(tmp);
        int sum = 0;
        int pre = 0; b[j] = tmp[0];
        int post = 0; e[j] = tmp[k-1];
        ans[j] = tmp[0];
        for(int i = 0;i<k;++i)
        {
            tot[j]+=tmp[i];
            pre+=tmp[i];
            post+=tmp[k-i-1];
            b[j] = max(b[j],pre);
            e[j] = max(e[j],post);
            ans[j] = max(ans[j],tmp[i]);
            sum+=tmp[i];
            ans[j] = max(ans[j],sum);
            if(sum<0) sum = 0;
        }
        b[j] = max(b[j],0);
        //printf("%d:\ntot:%d pre:%d post:%d\n\n",j,tot[j],b[j],e[j]);
    }
    for(int i = 0;i<m;++i)
        sc(arr[i]);

    for(int i = 0;i<2;++i)
        for(int j = 0;j<m;++j)
            dp[j][i] = -OO;
    ll out = solve(0,1);
    for(int i = 0;i<m;++i)
        out = max(out,(ll)ans[arr[i]]);

    cout<<out<<endl;


    return 0;
}
