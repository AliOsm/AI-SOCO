#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

vector<int> adj[200'005];

vector<int> path;

bool vis[200'005];

void bfs(int s) {
    queue<int> q;

    vis[s] = true;
    q.push(s);

    while(!q.empty()) {
        int u = q.front();
        q.pop();

        path.push_back(u);

        for(int v : adj[u]) {
            if(vis[v]) continue;

            vis[v] = true;

            q.push(v);
        }
    }
}

int par[200'005];

void dfs(int u, int p) {
    vis[u] = true;
    par[u] = p;

    for(int v : adj[u]) {
        if(vis[v]) continue;

        dfs(v, u);
    }

    adj[u].clear();
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

    int n;
    cin >> n;

    for(int i = 1; i < n; i++) {
        int u, v;
        cin >> u >> v;

        u--, v--;

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    dfs(0, -1);

    vector<int> a(n);

    for(int i = 0; i < n; i++) {
        cin >> a[i];

        a[i]--;

        if(par[a[i]] == -1) continue;
        int u = a[i];
        int v = par[u];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    memset(vis, 0, sizeof vis);
    bfs(0);

    if(path != a) cout << "No" << endl;
    else cout << "Yes" << endl;
}