/**
 * @author khokharnikunj8
 */

#include <bits/stdc++.h>

using namespace std;

class BZuma {
public:
    vector<vector<int>> dp;

    int findIt(vector<int> &ar, int i, int j) {
        if (i > j) return 0;
        if (dp[i][j] != -1) return dp[i][j];
        if (i == j) return (dp[i][j] = 1);
        dp[i][j] = 1 + findIt(ar, i + 1, j);
        if (ar[i] == ar[i + 1]) dp[i][j] = 1 + findIt(ar, i + 2, j);
        for (int k = i + 2; k <= j; k++) {
            if (ar[k] == ar[i]) {
                dp[i][j] = min(dp[i][j], findIt(ar, i + 1, k - 1) + findIt(ar, k + 1, j));
            }
        }
        return dp[i][j];
    }

    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vector<int> ar(n);
        for (int i = 0; i < n; i++) in >> ar[i];
        dp.resize(n, vector<int>(n, -1));
        out << findIt(ar, 0, n - 1) << "\n";
    }
};


int main() {
    BZuma solver;
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
