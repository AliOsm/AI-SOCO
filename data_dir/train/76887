#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <cstdint>
#include <algorithm>
#include <string>
using namespace std;

vector<vector<int> > g;
vector<char> used;
vector<int> ans;

void dfs(int v)
{
	used[v] = true;
	for (size_t i = 0; i<g[v].size(); ++i)
	{
		int to = g[v][i];
		if (!used[to])
			dfs(to);
	}
	ans.push_back(v);
}

int cnt = 0;

void dfs2(int v)
{
	used[v] = true;
	++cnt;
	for (size_t i = 0; i<g[v].size(); ++i)
	{
		int to = g[v][i];
		if (!used[to])
			dfs2(to);
	}
}


int main(void)
{
	ios::sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	g.resize(n);
	used.resize(n);
	vector<int> a(m), b(m);
	for (int i = 0; i < m; ++i)
	{
		cin >> a[i] >> b[i];
		--a[i], --b[i];
		g[b[i]].push_back(a[i]);
	}

	for (int i = 0; i < n; ++i)
		used[i] = false;
	ans.clear();
	for (int i = 0; i < n; ++i)
	{	
		if (!used[i])
		{
			dfs(i);
		}
	}
	reverse(ans.begin(), ans.end());
	used.assign(n, false);
	dfs2(ans.front());
	if (cnt != n)
	{
		cout << -1 << endl;
		return 0;
	}
	set<pair<int, int> > q;
	for (int i = 0; i < (int)ans.size() - 1; ++i)
	{
		q.insert({ ans[i], ans[i + 1] });
	}

	for (int i = 0; i < m; ++i)
	{
		q.erase({ b[i], a[i] });
		if (q.empty())
		{
			cout << i + 1 << endl;
			return 0;
		}
	}
	cout << -1 << endl;
}
