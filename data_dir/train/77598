#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("sumsqr.in");ofstream out("sumsqr.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

const int G = 1000001;
int erat[G];

int skoko(int X, vec<int> &m){
    int a = m.size();
    int all = 1<<a, o = 0;
    for(int mask=0; mask<all; mask++){
        int p = 1;
        for(int q=0, w=mask; q<a; q++, w>>=1){
            if(w&1) p *= m[q];
        }
        if(__builtin_popcount(mask)%2==0) o += X/p;
        else o -= X/p;
    }
    return o;
}

int main() {
    fast;
    memset(erat, 0, sizeof(erat));
    for(int q=2; q<G; q++){
        if(erat[q]!=0) continue;
        for(int w = q; w<G; w+=q) erat[w] = q;  //max prime
    }
    int z; cin>>z;
    for(; z--;){
        int x,p,k; cin>>x>>p>>k;
        vec<int> prm;
        for(int c=p; c>1; c/=erat[c]) prm.pb(erat[c]);
        sort(prm.begin(), prm.end());
        prm.erase(unique(prm.begin(), prm.end()), prm.end());
        //for(int i  : prm) cout<<i<<" "; cout<<endl;
        //for(int q=0; q<100; q++){int u; cin>>u;cout<<skoko(u, prm)<<endl;}
        k += skoko(x, prm);
        int l = 0, r = 100000000;
        for(; l+1<r;){
            int md = (l+r)/2;
            if(skoko(md, prm)>=k) r = md;
            else l = md;
        }
        cout<<r<<"\n";
    }
}