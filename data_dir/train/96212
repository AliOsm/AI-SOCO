#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define INF 2000000000
#define DESPACITO2 1000000000000000
#define DESPACITO 1000000000000000000
#define MOD 1000000007
#define ll long long
#define vi vector<int>
#define pb push_back
#define mp make_pair
#define ii pair<int,int>
#define vii vector<ii>
#define si set<int>
#define msi map<string,int>
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define TRvi(c,it) for(vi::iterator it=(c).begin();it!=(c).end();it++)
#define TRvii(c,it) for(vii::iterator it=(c).begin();it!=(c).end();it++)
#define TRmsi(c,it) for(msi::iterator it=(c).begin();it!=(c).end();it++)
 
 
using namespace std;

int n,m;
set<pair<int,int>>roads;
map<pair<int,int>,int>type;
vector<pair<int,int>>adj[100001];
int minfix[100001];
int dist[100001];
bool visited[100001];
int previ[100001];

void Dijsktra()
{
	dist[1]=0;
	minfix[1]=0;
	multiset<pair<pair<int,int>,int>>q;
	q.insert(mp(mp(0,0),1));
	while(!q.empty())
	{
		pair<pair<int,int>,int>p=(*q.begin());
		q.erase(q.begin());
		if(visited[p.second])
			continue;
		visited[p.second]=true;
		int node=p.second;
		REP(i,0,adj[node].size()-1)
		{
			int x=adj[node][i].first;
			int w=adj[node][i].second;
			if(w==1)
				w=0;
			else
				w=1;
			if(dist[x]>dist[node]+1)
			{
				dist[x]=dist[node]+1;
				minfix[x]=minfix[node]+w;
				q.insert(mp(mp(dist[x],minfix[x]),x));
				previ[x]=node;
			}
			else if(dist[x]==dist[node]+1)
			{
				if(minfix[x]>minfix[node]+w)
				{
					minfix[x]=minfix[node]+w;
					q.insert(mp(mp(dist[x],minfix[x]),x));
					previ[x]=node;
				}
			}
		}
	}
}

int main()
{
    IOS;
    #ifndef ONLINE_JUDGE
        // for getting input from input.txt
        freopen("input.txt", "r", stdin);
        // for writing output to output.txt
        freopen("output.txt", "w", stdout);
    #endif
    cin >> n >> m;
    set<int>alive;
    REP(i,1,m)
    {
    	int a,b,z;
    	cin >> a >> b >> z;
    	adj[a].pb(mp(b,z));
    	adj[b].pb(mp(a,z));
    	roads.insert(mp(min(a,b),max(a,b)));
    	type[mp(min(a,b),max(a,b))]=z;
    	alive.insert(i);
    }
    REP(i,1,n)
    {
    	dist[i]=1000000;
    	minfix[i]=1000000;
    }
    memset(previ,-1,sizeof(previ));
    Dijsktra();
    //cout << dist[n] << " " << minfix[n] << "\n";
    vector<pair<pair<int,int>,int>>v;
    int node=n;
    while(previ[node]!=-1)
    {
    	int u=previ[node];
    	if(type[mp(min(node,u),max(node,u))]!=1)
    		v.pb(mp(mp(min(node,u),max(node,u)),1));
    	roads.erase(mp(min(node,u),max(node,u)));
    	node=u;
    }
    for(auto it:roads)
    {
        if(type[it]==1)
            v.pb(mp(mp(it.first,it.second),0));
    }
    cout << v.size() << "\n";
    REP(i,0,v.size()-1)
        cout << v[i].first.first << " " << v[i].first.second << " " << v[i].second << "\n";
}