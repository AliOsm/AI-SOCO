#include <functional>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <numeric>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cassert>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;

template <typename T>
T nextInt() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;
}

const int maxN = (int)1e5 + 10;
const int INF = (int)1e9;
const int mod = (int)1e9 + 7;
const ll LLINF = (ll)1e18;

int x[maxN];
int y[maxN];
int d[maxN];
vector <int> g[maxN];
int n, m;

int can(int m) {
    for(int i = 0; i < maxN; ++i) {
        g[i].clear();
        d[i] = 0;
    }
    for (int i = 0; i < m; ++i) {
        ++d[y[i]];
        g[x[i]].push_back(y[i]);
    }
    set < pair <int, int> > s;
    for (int i = 0; i < n; ++i) {
        s.insert(make_pair(d[i], i));
    }
    while(!s.empty()) {
        int v = s.begin()->second;
        assert(d[v] == 0);
        s.erase(s.begin());
        if (!s.empty() && s.begin()->first == 0) {
            return false;
        }
        for (int x: g[v]) {
            s.erase(make_pair(d[x], x));
            d[x]--;
            s.insert(make_pair(d[x], x));
        }
    }
    return true;
}


int main() {

    //freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);

    cin >> n >> m;
    for (int i = 0; i < m; ++i) {
        cin >> x[i] >> y[i];
        --x[i]; --y[i];
    }

    if (!can(m)) {
        cout << -1 << '\n';
        return 0;
    }

    int l = 1, r = m;
    for (int iter = 0; iter < 22; ++iter) {
        int mid = (l + r) / 2;
        if (can(mid)) {
            r = mid;
        } else {
            l = mid;
        }
    }

    for (int i = max(1, l - 3); ; ++i) {
        assert(i <= m);
        if (can(i)) {
            cout << i << '\n';
            return 0;
        }
    }
    return 0;
}
