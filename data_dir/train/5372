#include<bits/stdc++.h>
using namespace std;
#define PI 3.1415926535897932384626
#define int long long int
#define fi first
#define se second
#define pq priority_queue
#define pb push_back
#define IOS ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
#define endl '\n'
#define all(x) x.begin(),x.end()
#define pii pair<int,int>
#define fill(x,y) memset(x,y,sizeof(x));
#define what_is(x)  cerr << #x << " is " << x << endl;
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
template<typename T> T pow(T a,T b, int m){T ans=1; while(b>0){ if(b%2==1) ans=(ans*a)%m; b/=2; a=(a*a)%m; } return ans%m; }
template<typename T> void swap(T *a,T *b){T temp = *a;*a = *b;*b = temp;return ;}
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
//deque
/*******************************Template ends**************************************/
signed main()
{
    deque<int> q;
    int n;
    cin >> n;
    for (int i = 0; i < n; ++i)
    {
        int temp;
        cin >> temp;
        q.pb(temp);
    }
    bool f = true;
    std::vector<char> ans;
    vector<int> v;
    while(f and q.size())
    {
        int a = q.front();
        int b = q.back();
        int c;
        if(v.size())
            c = v.back();
        else
            c = -1e18;
        if(a < c and b < c)
            f = false;
        else if(a == b)
        {
            f = false;
            int p = 0,Q = 0;
            int temp = q[0];
            for (int i = 1; i < q.size(); ++i)
            {
                if(q[i] > temp)
                {
                    p++;
                    temp = q[i];
                }
                else
                    break;
            }
            temp = q[0];
            int i = (int)q.size() - 2;
            for (; i >= 0; --i)
            {
                if(q[i] > temp)
                {
                    Q++;
                    temp = q[i];
                }
                else
                    break;
            }
            if(p >= Q)
            {
                ans.pb('L');
                while(p--)
                {
                    ans.pb('L');
                }
            }
            else
            {
                ans.pb('R');
                while(Q--)
                {
                    ans.pb('R');
                }
            }
        }
        else
        {
            if(a > c and b > c)
            {
                if(a < b)
                {
                    ans.pb('L');
                    v.pb(a);
                    q.pop_front();
                }
                else if(a > b)
                {
                    v.pb(b);
                    ans.pb('R');
                    q.pop_back();
                }
            }
            else if(a > c)
            {
                v.pb(a);
                ans.pb('L');
                q.pop_front();
            }
            else if(b > c)
            {
                v.pb(b);
                ans.pb('R');
                q.pop_back();
            }
            else
                f = false;
        }
    }
    cout << ans.size() << endl;
    for(auto i:ans)
    {
        cout << i;
    }
} 