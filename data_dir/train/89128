//ll z(vi a, int k){
//	if(sz(a) < k)
//		return 0;
//	vi b;
//	ll ans = 0;
//	for(int i = 0; i <= sz(a)-k; ++i) {
//		int tmp = a[i];
//		for(int j = i; j <= i+k-1; ++j)
//			tmp = max(tmp,a[j]);
//		b.push_back(tmp);
//		ans += tmp;
//	}
//	print(b);
//	return ans+z(b,k);
//}
//set<pii> segs;
//int n,k;
//ll f(pii p){
//	ll base = p.second-p.first+1;
//	int top = base%(k-1);
//	ll layers = (base-top)/(k-1)+1;
//	ll ans = layers*(top+base)/2;
//	return ans%MOD;
//}
//int _(){//ot
//	cin >> n >> k;
//	vpii arr(n);
//	ll sum = 0;
//	for(int i = 0; i < n; ++i){
//		cin >> arr[i].first;
//		arr[i].second = i;
//		sum += arr[i].first;
//	}
//	sort(rall(arr));
//	segs.insert({0,n-1});
//	ll ans = 0; 
//	for(int i = 0; i < n; ++i){
//		int pos = arr[i].second;
//		pii search = {pos+1,pos};
//		pii q = *--segs.upper_bound(search);
//		segs.erase(q);
//		pii pl = q;
//		pl.second = pos-1;
//		pii pr = q;
//		pr.first = pos+1;
//		ans += (f(q)-f(pl)-f(pr))*arr[i].first%MOD;
//		if(pl.first <= pl.second) segs.insert(pl);
//		if(pr.first <= pr.second) segs.insert(pr);
//	}
//	ans -= sum%MOD;
//	return (ans%MOD+MOD)%MOD;
//	//return z(arr,k);
//}
//
// ================================================ 
// ^^^	ABOVE is what I wrote in my editor	^^^
// ------------------------------------------------ 
// vvv	BELOW is automatically generated 	vvv
// ================================================ 
#include <set>
#include <iomanip>
#include <algorithm> 
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz(v) int(v.size())
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii> vpii;
template<typename IT>
ostream &print(IT b, IT e, string sep = " ", ostream &stream = cout){
	for(IT it = b; it != e; ++it){
		stream << *it;
		if(it+1 != e) stream << sep;
	} 
	return stream;
}
template<typename IT> istream &read(IT b, IT e, istream &stream = cin){
	for(IT it = b; it != e; ++it) stream >> *it; return stream;
}
template<typename T> ostream &operator<<(ostream &stream, vector<T> &t){
	return print(all(t)," ",stream);
}
template<typename T> ostream &operator<<(ostream &stream, vector<T> &&t){
	return print(all(t)," ",stream);
}
template<typename T> istream &operator>>(istream &stream, vector<T> &t){
	return read(all(t),stream);
}
template<typename F, typename S> ostream &operator<<(ostream &stream, pair<F,S> &t){
	return stream << t.first << ' ' << t.second;
}
template<typename F, typename S> istream &operator>>(istream &stream, pair<F,S> &t){
	return stream >> t.first >> t.second;
}
template <typename T> 
void print(T x){
	cout << x << '\n';
}
template <typename t> 
void print(vector<t> arr,string sep=" "){
	print(arr.begin(),arr.end(),sep);
	cout << '\n';
}
template <typename T> 
void print(vector<vector<T> > arr){
	for(int i = 0; i < arr.size(); ++i){
		cout << "[" << arr[i] << "]";
		if(i+1 < arr.size())
			cout << ", ";
	}
	cout << '\n';
}
template<typename T>
T _();
const ll INF = ll(2e18)+666;
int MOD = 1e9+7;
const int N = 5e5+5;
template<typename T>
vector<T> operator+(const vector<T> &lhs, const vector<T> &rhs){
	vector<T> ans(lhs);
	assert(ans.size() == rhs.size());
	for(int i = 0; i < rhs.size(); ++i)
		ans[i] += rhs[i];
	return ans;
}
template<typename T>
vector<T> operator+=(vector<T> &lhs, const vector<T> &rhs){
	return lhs = lhs+rhs;
	//vector<T> ans(lhs);
	//assert(ans.size() == rhs.size());
	//for(int i = 0; i < rhs.size(); ++i)
		//ans[i] += rhs[i];
	//return ans;
}
template<typename T>
vector<T> operator-(const vector<T> &lhs, const vector<T> &rhs){
	vector<T> ans(all(lhs));
	assert(ans.size() == rhs.size());
	for(int i = 0; i < rhs.size(); ++i)
		ans[i] -= rhs[i];
	return ans;
}
template<typename T>
vector<T> operator-=(vector<T> &lhs, const vector<T> &rhs){
	return lhs = lhs-rhs;
	//vector<T> ans(lhs);
	//assert(ans.size() == rhs.size());
	//for(int i = 0; i < rhs.size(); ++i)
		//ans[i] += rhs[i];
	//return ans;
}
template<typename T>
T max(const vector<T> arr){
	assert(!arr.empty());
	T ans = arr[0];
	for(auto &cur : arr)
		ans = max(ans,cur);
	return ans;
}
template<typename T>
T max(const set<T> s){
	assert(!s.empty());
	return *--s.end();
}
template<typename T, typename G>
vector<T> set_max(vector<T> &base, const vector<G> &comp){
	assert(base.size() == comp.size());
	for(int i = 0; i < (int)comp.size(); ++i)
		base[i] = max(base[i],comp[i]);
	return base;
}
ll z(vi a, int k){
	if(sz(a) < k)
		return 0;
	vi b;
	ll ans = 0;
	for(int i = 0; i <= sz(a)-k; ++i) {
		int tmp = a[i];
		for(int j = i; j <= i+k-1; ++j)
			tmp = max(tmp,a[j]);
		b.push_back(tmp);
		ans += tmp;
	}
	print(b);
	return ans+z(b,k);
}
set<pii> segs;
int n,k;
ll f(pii p){
	ll base = p.second-p.first+1;
	int top = base%(k-1);
	ll layers = (base-top)/(k-1)+1;
	ll ans = layers*(top+base)/2;
	return ans%MOD;
}
int _(){//ot
	cin >> n >> k;
	vpii arr(n);
	ll sum = 0;
	for(int i = 0; i < n; ++i){
		cin >> arr[i].first;
		arr[i].second = i;
		sum += arr[i].first;
	}
	sort(rall(arr));
	segs.insert({0,n-1});
	ll ans = 0; 
	for(int i = 0; i < n; ++i){
		int pos = arr[i].second;
		pii search = {pos+1,pos};
		pii q = *--segs.upper_bound(search);
		segs.erase(q);
		pii pl = q;
		pl.second = pos-1;
		pii pr = q;
		pr.first = pos+1;
		ans += (f(q)-f(pl)-f(pr))*arr[i].first%MOD;
		if(pl.first <= pl.second) segs.insert(pl);
		if(pr.first <= pr.second) segs.insert(pr);
	}
	ans -= sum%MOD;
	return (ans%MOD+MOD)%MOD;
	//return z(arr,k);
}

int main(){
	ios_base::sync_with_stdio(false); cin.tie(0);
	cout << fixed << setprecision(12);
	cout << _() << '\n';
}
