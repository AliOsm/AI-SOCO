#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

int n, m;
struct Vertex
{
     std::vector<int> to;
     
     int visitFlag;
};

Vertex vertexs[200010];

bool doVisit(int vNo, int flagNo)
{
     int formerVNo = -1;
     while (vertexs[vNo].visitFlag != flagNo)
     {
          if (vertexs[vNo].visitFlag != -1)  //��һ��ֻ��һ�� 
               return false;
          vertexs[vNo].visitFlag = flagNo;
          
          if (vertexs[vNo].to.size() == 2)   //һ��һ�� 
          {
               int vNoA = vertexs[vNo].to[0];
               int vNoB = vertexs[vNo].to[1];
               
               if (vNoA == formerVNo)
               {
                    formerVNo = vNo;
                    vNo = vNoB;
               }
               else //==vNoB, == -1
               {
                    formerVNo = vNo;
                    vNo = vNoA;
               }
          }
          else
          {
               return false;
          }
     }
     
     if (vertexs[vNo].visitFlag == flagNo)
          return true;
     else
          return false; 
}

int main()
{
     scanf("%d%d", &n, &m);
     
     int v1, v2;
     for (int i = 1 ; i <= n ; i++)
          vertexs[i].visitFlag = -1;
          
     for (int i = 0 ; i < m ; i++)
     {
          scanf("%d%d", &v1, &v2);
          vertexs[v1].to.push_back(v2);
          vertexs[v2].to.push_back(v1);
     }
     
     int count = 0;
     int flagNo = 0;
     for (int i = 1 ; i <= n ; i++)
     {
          if (vertexs[i].visitFlag == -1)
          {
               if (doVisit(i, flagNo))
                    count++;
               flagNo++; //ÿ�η��ʶ���һ�� 
          }
     }
     
     printf("%d\n", count);
     
     
     return 0;
}
