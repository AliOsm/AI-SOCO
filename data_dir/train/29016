#include <bits/stdc++.h>
using namespace std;
#define sc(x)            scanf("%d",&x)
#define scc(x)           scanf("%c",&x)
#define scl(x)           scanf("%lld",&x)
#define sz(v)	     	(v.size())
#define mem(v, d)		memset(v, d, sizeof(v))
#define oo				2000000100
#define OO				4000000000000000100
#define PI 3.14159265
typedef unsigned int uint;
typedef long long ll;
//-----------------------------------------------------
#define N 200005

int dX[] = {0,0,1,-1};
int dY[] = {1,-1,0,0};

//ll GCD(ll num,ll rem) { return !rem ? num : GCD(rem,num%rem); }
//ll lcm(ll a, ll b) { return (a / GCD(a, b)) * b; }
//double Len(int x,int y,int X,int Y) { return sqrt((X-x)*(X-x)+(Y-y)*(Y-y)); }
/*int fastpower(int a,int x)
{
    if(x == 1) return a;
    if (x==0) return 1;
    int p = fastpower(a,x/2);
    if(x%2) return ((p%m)*(p%m)*(a%m))%m;
s}*/
//-----------------------------------------------
char G[105][105];
int n,m; char c;
int ans;
void dfs_fill(int x,int y,char cur)
{
    G[x][y] = '.';
    for(int i=0;i<4;++i)
    {
        int nx = x+dX[i],ny = y+dY[i];
        if(nx >= 0 && nx<n && ny>= 0 && ny<m && G[nx][ny] == cur) dfs_fill(nx,ny,cur);
    }
}
void dfs(int x,int y)
{
    G[x][y] = '.';
    for(int i=0;i<4;++i)
    {
        int nx = x+dX[i],ny = y+dY[i];
        if(nx >= 0 && nx<n && ny>= 0 && ny<m && G[nx][ny] != '.')
        {
            if(G[nx][ny] != c) dfs_fill(nx,ny,G[nx][ny]),ans++;
            else dfs(nx,ny);
        }
    }
}
int main()
{
#ifndef ONLINE_JUDGE
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    cin>>n>>m>>c;
    int x,y;
    for(int i=0;i<n;++i) for(int j=0;j<m;++j)
        {
            cin>>G[i][j];
            if(G[i][j] == c) x=i,y=j;
        }
    dfs(x,y);
    cout<<ans;

    return 0;
}
