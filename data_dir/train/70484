#include<bits/stdc++.h>
using namespace std;


struct node{
    int lv, rv;
    long long val, prom;
    node *left, *right;
    node() : left(NULL), right(NULL), val(2e9), prom(0) {}


    node(int lv, int rv) : left(NULL), right(NULL), val(2e9), prom(0), lv(lv), rv(rv) {
        if (lv == rv) {
            return;
        }

        int m = (lv + rv) / 2;
        left = new node(lv, m);
        right = new node(m + 1, rv);
    }


    void push() {
        left->val += prom;
        right->val += prom;
        left->prom += prom;
        right->prom += prom;
        prom = 0;
    }


    void update(int p, int new_val) {
        if (p < lv || rv < p) {
            return;
        }

        val = min(val, (long long) new_val);

        if (lv == rv) {
            return;
        }

        left->update(p, new_val);
        right->update(p, new_val);
    }


    long long get_min(int l, int r) {
        if (r < lv || rv < l) {
            return 2e9;
        }

        if (l <= lv && rv <= r) {
            return val;
        }

        push();
        return min(left->get_min(l, r), right->get_min(l, r));
    }


    void modify(int l, int r, int dif) {
        if (r < lv || rv < l) {
            return;
        }

        if (l <= lv && rv <= r) {
            prom += dif;
            val += dif;
            return;
        }

        push();
        left->modify(l, r, dif);
        right->modify(l, r, dif);
        val = min(left->val, right->val);
    }
};


main() {
#ifndef ONLINE_JUDGE
    freopen("1.txt", "r", stdin);
#endif // ONLINE_JUDGE

    int n;
    scanf("%d", &n);
    node *st = new node(0, n - 1);

    for (int i = 0; i < n; i++) {
        int x;
        scanf("%d", &x);
        st->update(i, x);
    }

    int m;
    scanf("%d\n", &m);

    while (m--) {
        string s;
        getline(cin, s);
        int l, r, val;

        if (sscanf(s.c_str(), "%d%d%d", &l, &r, &val) == 3) {
            if (l <= r) {
                st->modify(l, r, val);
            } else {
                st->modify(l, n - 1, val);
                st->modify(0, r, val);
            }

            continue;
        }

        if (l <= r) {
            printf("%lld\n", st->get_min(l, r));
        } else {
            printf("%lld\n", min(st->get_min(l, n - 1), st->get_min(0, r)));
        }
    }

    return 0;
}
