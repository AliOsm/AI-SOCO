#include<bits/stdc++.h>
#include <queue>

#define f first
#define s second
#define pb push_back
#define lp(i,a,n) for(ll (i)=(a);(i)<=(ll)(n);(i)++)
#define lpd(i,n,a) for(ll (i)=(n);(i)>=(a);--(i))
#define mp make_pair
#define sz(a) (int)(a).size()
#define clr(a,b) memset(a,b,sizeof a)
#define all(v) v.begin(),v.end()
#define mod 1000003
#define eps 1e-6
#define infi 1e9
#define infll 1e16
#define MX 1000000
#define X real()
#define Y imag()
#define polar(r,t) ((r)* exp(point(0,(t))))
//#define length(a) hypot( (a).X , (a).Y )
#define angle(a) atan2( (a).Y , (a).X )
#define vec(a,b) ( (b) - (a) )
#define dot(a,b) (conj(a)*(b)).X
#define cross(a,b) (conj(a)*(b)).Y
#define lengthsqr(a) dot(a,a)
#define reflect(V,M) (conj((V)/(M)) * (M))
#define normalize(a)   ((a)/length(a))
#define ccw(a,b,c) cross(vec(a,b) , vec(a,c)) > eps
#define cosRule(a,b,c) (acos(((a)*(a)+(b)*(b)-(c)*(c))/(2*(a)*(b))))
#define cosDot(a,b) (acos(dot(a,b)/length(a)/length(b)))
#define EQ(a,b) (fabs((a) - (b)) <= eps) /* equal to */
#define NE(a,b) (fabs((a) - (b)) > eps)  /* not equal to */
#define LT(a,b) ((a) < (b) - eps)        /* less than */
#define GT(a,b) ((a) > (b) + eps)        /* greater than */
#define LE(a,b) ((a) <= (b) + eps)       /* less than or equal to */
#define GE(a,b) ((a) >= (b) - eps)       /* greater than or equal to */
#define mod1 100050001
#define mod2 100030001
#define base1 37
#define base2 31

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<double,double> pdd;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef set<int> si;
typedef map<int, int> mii;
typedef complex<double> point;
typedef pair<point, point> line;
typedef pair<double, point> Circle;

const int N=200005;

int main()
{

    //freopen("test.in","r",stdin);
    //freopen("image.out","w",stdout);
    int n;
    cin>>n;
    set<int>st;
    map<int,int>mp;
    for(int i=0;i<n;i++){
        int a;
        cin>>a;
        mp[a]++;
        st.insert(a);
    }
    if(st.size()!=2)cout<<"NO";
    else{
        if(mp[*st.begin()]==mp[*(--st.end())])cout<<"YES\n"<<' '<<*st.begin()<<' '<<*(--st.end());
        else cout<<"NO";
    }
    return 0;
}
