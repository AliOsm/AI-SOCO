#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <limits>
#include <queue>
#include <memory.h>
#include <ctime>
#include <unordered_set>
#include <assert.h>
using namespace std;

#define ll long long
#define sz(s) (int)(s).size()

int n, m;

set<pair<int, int>> used;
vector<vector<int>> visited;

int main() {
	//freopen("input.txt", "rt", stdin);

	scanf("%d %d", &n, &m);
	visited.resize(n, vector<int>(m));
	int curx = -1e9;
	int cury = -1e9;
	int dx, dy;
	for (int i = 1; i <= n / 2; i++) {
		for (int j = 1; j <= m; j++) {
			/*dx = i - curx;
			dy = j - cury;
			if (used.find(make_pair(dx, dy)) != used.end()) {
				assert(0);
			}
			else {
				used.insert(make_pair(dx, dy));
			}
			if (visited[i][j]) assert(0);*/
			//visited[i][j] = 1;
			printf("%d %d\n", i, j);
			//curx = i;
			//cury = j;

			/*dx = n - i + 1 - curx;
			dy = m - j + 1 - cury;
			if (used.find(make_pair(dx, dy)) != used.end()) {
				assert(0);
			}
			else {
				used.insert(make_pair(dx, dy));
			}
			if (visited[n - i + 1][m - j + 1]) assert(0);*/
			printf("%d %d\n", n - i + 1, m - j + 1);
			//visited[n - i + 1][m - j + 1] = 1;
			//curx = n - i + 1;
			//cury = m - j + 1;
		}
	}
	if (n % 2 == 1) {
		for (int i = 1; i <= m; i++) {
			if (i % 2 == 1) {
				printf("%d %d\n", n / 2 + 1, i / 2 + 1);
			}
			else {
				printf("%d %d\n", n / 2 + 1, m - i / 2 + 1);
			}
		}
	}

#ifndef ONLINE_JUDGE
		system("pause");
#endif

	return 0;
}