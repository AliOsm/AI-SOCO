#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <map>
#include <set>
#include <algorithm>
#include <string>
#include <stack>
#include <queue>
#include <functional>
#include <numeric>
#include <memory.h>

using namespace std;

typedef long long LL;

const int N = 62 * 62;

int n;

char buf[4];

vector<int> G[1 << 12];
int din[1 << 12], dout[1 << 12];

int get(char c)
{
    if (c >= 'a' && c <= 'z')
        return c - 'a';
    if (c >= 'A' && c <= 'Z')
        return 26 + c - 'A';
    return 52 + c - '0';
}

int ptr[N];

char get(int x)
{
    if (x < 26)
        return 'a' + x;
    else if (x < 52)
        return 'A' + x - 26;
    return '0' + x - 52;
}

void go(int x, string & res)
{
    while (ptr[x] < G[x].size())
        go(G[x][ptr[x]++], res);
    res += get(x % 62);
}

int main()
{
    scanf("%d", &n);
    for(int i = 0; i < n; ++i)
    {
        scanf("%s", buf);
        int u = get(buf[0]) * 62 + get(buf[1]);
        int v = get(buf[1]) * 62 + get(buf[2]);
        G[u].push_back(v);
        dout[u]++;
        din[v]++;
    }
    vector<int> in, out;
    for(int i = 0; i < N; ++i)
    {
        if (abs(dout[i] - din[i]) > 1)
        {
            printf("NO\n");
            return 0;
        }
        if (dout[i] > din[i])
            out.push_back(i);
        if (din[i] > dout[i])
            in.push_back(i);
    }
    if (out.size() > 1 || in.size() > 1)
    {
        printf("NO\n");
        return 0;
    }
    int s = 0;
    if (out.empty())
    {
        for(int i = 0; i < N; ++i)
        {
            if (!G[i].empty())
            {
                s = i;
                break;
            }
        }
    }
    else
        s = out[0];
    string res = "";
    go(s, res);
    res += get(s / 62);
    reverse(res.begin(), res.end());
    if (res.size() != n + 2)
        printf("NO\n");
    else
    {
        printf("YES\n%s\n", res.c_str());
    }
    return 0;
}