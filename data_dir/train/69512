#include <bits/stdc++.h>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + inf;

const int N = 2e5 + 5;

int n;
int a[N];

int gcd(int x, int y) {
	return !y ? x : gcd(y, x % y);
}

ll ans;
bool h[N];
int ok[N], cnt[N];
ll sum[N];

void solve(int g) {
	for(int i = 1; i <= n; i++) {
		cnt[i] = cnt[i - 1] + (i % g == 0 and gcd(i, n) == g);
		sum[i] = sum[i - 1] + (i % g == 0 and gcd(i, n) == g) * i;
	}
	memset(h, 0, sizeof(h));
	memset(ok, 0, sizeof(ok));
	for(int i = 0; i < n; i++) {
		if(h[i])
			continue;
		int x = i, mx = -inf;
		do{
			h[x] = 1;
			mx = max(mx, a[x]);
			x = (x + g) % n;
		}while(x != i);
		x = i;
		do{
			if(a[x] == mx)
				ok[x] = 1;
			x = (x + g) % n;
		}while(x != i);
	}
	bool flag = 1;
	for(int i = 0; i < n; i++) {
		flag &= ok[i];
	}
	if(flag) {
		ans += (ll) cnt[n] * n;
		return;
	}
	int beg = 0, end = n - 1;
	for(int i = 0; i <= end; i++) {
		if(!ok[i])
			continue;
		int j = i;
		while(j <= end and ok[j])
			j++;
		int len = j - i;
		if(!i and ok[n - 1]) {
			while(ok[end])
				end--;
			len += n - end - 1;
		}
		ans += (ll) cnt[len] * len - sum[len] + cnt[len];
		i = j;
	}
	/*
	printf("g = %d ans = %d\n", g, ans);
	for(int i = 0; i < n; i++) {
		printf("%d ", ok[i]);
	}
	puts("");
	*/
}

int main() {

	scanf("%d", &n);

	for(int i = 0; i < n; i++) {
		scanf("%d", a + i);
	}

	for(int i = 1; i < n; i++) {
		if(n % i == 0) {
			solve(i);
		}
	}

	printf("%lld\n", ans);

	return 0;

}
