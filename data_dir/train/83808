#include "bits/stdc++.h"
using namespace std;
long long Mod = 1000000007;
long long Fact[1000005] , Inv[1000005];

// Calculates (base^exponent)%Mod -- Used in Finding Modular Inverse
long long Power( long long base , long long exponent ){
    if( exponent == 0LL ) return 1LL;
    else{
        long long middle = Power( base , exponent >> 1 );
        if( exponent & 1LL ) return ( ( ( middle * middle ) % Mod ) * base ) % Mod;
        else return ( middle * middle ) % Mod;
    }
}

// Using Fermat's little Theroem to find Modular Inverse( (a^(p-2))%p is the inverse ) 
long long FindModularInverse( long long a , long long p ){
    return Power( a , p - 2 );
}

void PreProcess( int N ){
    Fact[0] = 1LL;
    Inv[0] = FindModularInverse( Fact[0] , Mod );

    for( int i = 1 ; i <= N ; ++i ){
        Fact[i] = ( Fact[ i - 1] * i ) % Mod;
        Inv[i] = FindModularInverse( Fact[i] , Mod );
    }
}

bool IsGoodNumber( int a , int b , int Num ){
    while( Num ){
        if( Num % 10 != a && Num % 10 != b ) return false;
        Num /= 10;
    }

    return true;
}

long long FindAns( int a , int b , int N ){
    int i , Num;
    long long Ans = 0LL;

    for( i = 0 ; i <= N ; ++i ){
        Num = a * i + b * ( N - i );
        if( IsGoodNumber( a , b , Num ) ) Ans = ( Ans + ( Fact[N] * ( ( Inv[i] * Inv[N - i] ) % Mod ) ) % Mod ) % Mod;     
    }

    return Ans;
}

int main(){
    int a , b , N;
    scanf( "%d%d%d" , &a , &b , &N );
    PreProcess( N );
    printf( "%lld\n" , FindAns( a , b , N ) );
    return 0;
}