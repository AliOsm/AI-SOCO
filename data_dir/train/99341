#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

int N;
int a[100010];
vector <pair <int, int> > p;
int to[100010],ot[100010];

bool used[100010];
vector <pair <int, int> > ans;

bool lucky(int n){
    while(n > 0){
        if(n%10 != 4 && n%10 != 7) return false;
        n /= 10;
    }
    return true;
}

void func(int x, int init){
    if(ot[init] == init){
        used[init] = true;
        return;
    }
    
    int cur = init;
    ans.push_back(make_pair(x,cur));
    
    while(1){
        used[cur] = true;
        int next = ot[cur];
        if(next == init){
            ans.push_back(make_pair(cur,x));
            break;
        }
        ans.push_back(make_pair(cur,next));
        cur = next;
    }
}

int main(void){
    int i;
    
    scanf("%d",&N);
    REP(i,N) scanf("%d",&a[i]);
    
    bool sorted = true;
    REP(i,N-1) if(a[i] > a[i+1]) sorted = false;
    if(sorted){
        cout << 0 << endl;
        return 0;
    }
    
    int x = -1;
    REP(i,N) if(lucky(a[i])) x = i;
    if(x == -1){
        cout << -1 << endl;
        return 0;
    }
    
    REP(i,N) p.push_back(make_pair(a[i],i));
    sort(p.begin(),p.end());
    REP(i,N) to[p[i].second] = i;
    REP(i,N) ot[i] = p[i].second;
    
    int y = to[x];
    if(y != x){
        ans.push_back(make_pair(x,y));
        int z = to[y];
        to[x] = z; ot[z] = x; to[y] = y; ot[y] = y;
        x = y;
    }
    
    used[x] = true;
    REP(i,N) if(!used[i]) func(x,i);
    
    int K = ans.size();
    printf("%d\n",K);
    REP(i,K) printf("%d %d\n", ans[i].first + 1, ans[i].second + 1);
    
    return 0;
}
