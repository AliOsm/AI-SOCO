#include <bits/stdc++.h>
using namespace std;

namespace IO {
	const int BUF_SIZE = 100000;
	bool IOerror = 0;
	inline char nc() {
		static char buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;
		if (p1 == pend) {
			p1 = buf; pend = buf + fread(buf, 1, BUF_SIZE, stdin);
			if (pend == p1) {IOerror = 1; return -1;}
		}
		return *p1++;
	}
	inline bool blank(char ch) { return ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t'; }
	template <typename T>
		inline bool read(T &x) {
			bool sign = 0; char ch = nc(); x = 0;
			for (; blank(ch); ch = nc());
			if (IOerror) return false;
			if (ch == '-') sign = 1, ch = nc();
			for (; ch >= '0' && ch <= '9'; ch = nc()) x = x * 10 + ch - '0';
			if (ch == '.') {
				double tmp = 1; ch = nc();
				for (; ch >= '0' && ch <= '9'; ch = nc()) tmp /= 10.0, x += tmp * (ch - '0');
			}
			if (sign) x = -x;
			return true;
		}
}
using namespace IO;

int main() {
	int n, m;
	read(n); read(m);
	vector< vector<int> > a(n, vector<int>(n));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			read(a[i][j]);
		}
	}
	vector< vector<int> > pre(n + 1, vector<int>(n + 1));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			pre[i + 1][j + 1] = pre[i + 1][j] + pre[i][j + 1] - pre[i][j] + a[i][j];
		}
	}
	vector< vector<int> > cost(n, vector<int>(n));
	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++) {
			cost[i][j] = (pre[j + 1][j + 1] - pre[i][j + 1] - pre[i][j + 1] + pre[i][i]) / 2;
		}
	}
	const int inf = 1e9;
	vector< pair<long long, int> > dp(n + 1);
	auto calc = [&](long long mid) {
		fill(dp.begin(), dp.end(), make_pair((long long)inf * inf, inf));
		dp[0] = make_pair(0, 0);
		for (int i = 0; i < n; i++) {
			for (int j = i; j < n; j++) {
				dp[j + 1] = min(dp[j + 1], make_pair(dp[i].first + cost[i][j] + mid, dp[i].second + 1));
			}
		}
		return dp[n].second;
	};
	long long low = 0, high = (long long)n * cost[0][n - 1];
	while (low < high) {
		long long mid = (low + high + 1) >> 1;
		if (calc(mid) > m) {
			low = mid;
		} else {
			high = mid - 1;
		}
	}
	if (calc(high) <= m) {
		cout << "0\n";
	} else {
		calc(high + 1);
		cout << dp[n].first - (high + 1) * m << '\n';
	}
	/*
		 int n, k, l;
		 string s;
		 while (cin >> n >> k >> l >> s) {
		 auto solve = [&](vector<int> &a) {
		 const long long inf = numeric_limits<int>::max() / 2;
		 vector< pair<long long, int> > dp(n + 1);
		 auto calc = [&](int mid) {
		 fill(dp.begin(), dp.end(), make_pair(inf, int(1e9)));
		 dp[0] = make_pair(0, 0);
		 for (int i = 0; i < n; i++) {
		 dp[i + 1] = min(dp[i + 1], make_pair(dp[i].first + a[i], dp[i].second));
		 dp[min(n, i + l)] = min(dp[min(n, i + l)], make_pair(dp[i].first + mid, dp[i].second + 1));
		 }
		 return dp[n].second;
		 };
		 int low = 0, high = n;
		 while (low < high) {
		 int mid = (low + high + 1) >> 1;
		 if (calc(mid) > k) {
		 low = mid;
		 } else {
		 high = mid - 1;
		 }
		 }
		 int res = high;
		 if (calc(res) <= k) return 0ll;
		 calc(res + 1);
		 return dp[n].first - (long long)(res + 1) * k;
		 };
		 vector<int> a(n);
		 for (int i = 0; i < n; i++) {
		 a[i] = (isupper(s[i]) > 0);
		 }
		 long long ans = solve(a);
		 for (int i = 0; i < n; i++) {
		 a[i] = (islower(s[i]) > 0);
		 }
		 ans = min(ans, solve(a));
		 cout << ans << '\n';
		 }
		 */
	return 0;
}
