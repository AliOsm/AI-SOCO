#include<bits/stdc++.h>

using namespace std;
const int N = 1e3 + 3;
bool vis[N][N][6][4];
char grid[N][N];
int d[4][2] = {
		{1,  0},
		{0,  1},
		{-1, 0},
		{0,  -1}
};
int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif
	int n, m, si, sj, ti, tj;
	scanf("%d %d", &n, &m);
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			scanf(" %c", grid[i] + j);
			if (grid[i][j] == 'S')
				si = i, sj = j;
			if (grid[i][j] == 'T')
				ti = i, tj = j;
		}
	}
	
	queue<pair<pair<int, int>, pair<int, int>>> q;
	q.push({{si, sj},
			{4,  3}});
	while (q.size()) {
		int size = q.size();
		while (size--) {
			auto cur = q.front();
			q.pop();
			if (vis[cur.first.first][cur.first.second][cur.second.first][cur.second.second]++)
				continue;
			if (cur.first.first == ti && cur.first.second == tj) {
				puts("YES");
				return 0;
			}
			if (grid[cur.first.first][cur.first.second] == '*')
				continue;
			for (int i = 0; i < 4; ++i) {
				int x = cur.first.first + d[i][0];
				int y = cur.first.second + d[i][1];
				if (!(0 <= x && x < n && 0 <= y && y < m))
					continue;
				if (i == cur.second.first) {
					q.push({{x, y},
							{i, cur.second.second}
						   });
				} else if (cur.second.second) {
					q.push({{x, y},
							{i, cur.second.second - 1}
						   });
				}
			}
		}
	}
	puts("NO");
	return 0;
}
