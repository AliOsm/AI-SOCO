// KALAM

# include <bits/stdc++.h>
using namespace std;

const int N = 1000000 + 77;
int n , m , D[N << 3] , I[N << 3] , Z[N << 3] , O[N << 3];
bool t[N] , lz[N << 3];
void Build(int l = 1 , int r = n + 1 , int id = 1){
	if(l + 1 == r){
		I[id] = D[id] = 1;
		if(t[l]){O[id] = 1;}
		else{Z[id] = 1;}
		return ;
	}
	
	Build(l , (l + r) >> 1 , id << 1);
	Build((l + r) >> 1 , r , id << 1 ^ 1);
	I[id] = max(Z[id << 1] + I[id << 1 ^ 1] , I[id << 1] + O[id << 1 ^ 1]);
	O[id] = O[id << 1] + O[id << 1 ^ 1];
	Z[id] = Z[id << 1] + Z[id << 1 ^ 1];
	D[id] = max(O[id << 1] + D[id << 1 ^ 1] , D[id << 1] + Z[id << 1 ^ 1]);
}
void Shift(int id){
	if(lz[id] == 0){return ;}
	swap(O[id] , Z[id]);
	swap(I[id] , D[id]);
	lz[id] = 0;lz[id << 1] ^= 1;lz[id << 1 ^ 1] ^= 1;
}
void Change(int ql , int qr , int l = 1 , int r = n + 1 , int id = 1){
	if(qr <= l || r <= ql){return ;}
	if(ql <= l && r <= qr){
		lz[id] ^= 1;
		Shift(id);		
		return ;
	}
	Change(ql , qr , l , (l + r) >> 1 , id << 1);Shift(id << 1);
	Change(ql , qr , (l + r) >> 1 , r , id << 1 ^ 1);Shift(id<< 1 ^ 1);
	I[id] = max(Z[id << 1] + I[id << 1 ^ 1] , I[id << 1] + O[id << 1 ^ 1]);
	O[id] = O[id << 1] + O[id << 1 ^ 1];
	Z[id] = Z[id << 1] + Z[id << 1 ^ 1];
	D[id] = max(O[id << 1] + D[id << 1 ^ 1] , D[id << 1] + Z[id << 1 ^ 1]);
}
int main(){
	ios_base::sync_with_stdio(0);cin.tie(0);
	cin >> n >> m;
	for(int i = 1;i <= n;i++){
		char c;cin >> c;
		t[i] = (c == '7');
	}
	Build();
	while(m --){
		string s;
		cin >> s;
		if(s[0] == 'c'){
			Shift(1);
			cout << I[1] << '\n';
		}
		else{
			int l , r;cin >> l >> r;++ r;
			Change(l , r);
		}
	}
	return 0;
}
