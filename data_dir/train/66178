#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
using namespace std;
#define F first
#define S second
#define pb push_back
#define MP make_pair
#define ALL(x) begin(x), end(x)
#define SZ(x) (int)(x).size()
#define rep(i, n) for(int i = 0; i < n; ++i)
#define rep1(i, a, b) for(int i = a; i < b; ++i)
#define per1(i, a, b) for(int i = a; i >= b; --i)
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
typedef long long LL;
typedef long double LDB;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
//////////////////////
const long double eps = 1e-13;
const long double PI = acos(-1);
const int INF = (int)1e9;
const LL  INFF = (LL)1e18;
const int mod = (int)1e9 + 7;
const int MXN = (int)3e5 + 7;
vector<int>edge[MXN];
LL a[MXN];
int dep[MXN], in[MXN], out[MXN];
vector<int>st[MXN];
vector<LL>val[MXN];
int cntp = 0;
void dfs(int u, int pa, int dpt){
	dep[u] = dpt;
	in[u] = ++cntp;
	st[dpt].pb(u);
	val[dpt].pb(0);
	for(int v : edge[u]){
		if(v == pa) continue;
		dfs(v, u, dpt + 1);
	}
	out[u] = cntp;
	return ;
}
int go(int pa, int dpt){
	int ll = 0, rr = SZ(st[dpt]) - 1, ok = -1;
	while( ll <= rr ){
		int mid = (ll + rr) >> 1;
		int u = st[dpt][mid];
		if(in[pa] <= in[u] && out[u] <= out[pa]){
			rr = mid - 1, ok = mid;
		}
		else if(in[pa] <= in[u]) rr = mid - 1;
		else ll = mid + 1;
	}
	return ok;
}
int gogo(int pa, int dpt){
	int ll = 0, rr = SZ(st[dpt]) - 1, ok = -1;
	while( ll <= rr ){
		int mid = (ll + rr) >> 1;
		int u = st[dpt][mid];
		if(in[pa] <= in[u] && out[u] <= out[pa]){
			ll = mid + 1, ok = mid;
		}
		else if(in[pa] <= in[u]) rr = mid - 1;
		else ll = mid + 1;
	}
	return ok;
}
void dfs2(int u, int pa){
	a[u] += a[pa];
	for(int v : edge[u]){
		if(v == pa) continue;
		dfs2(v, u);
	}
	return ;
}
int main(void){
	int n; scanf("%d", &n);
	rep1(i, 1, n){
		int u, v; scanf("%d %d", &u, &v);
		edge[u].pb(v);
		edge[v].pb(u);
	}
	dfs(1, 0, 1);
	int m; scanf("%d", &m);
	while(m--){
		int u, d, v; scanf("%d %d %d", &u, &d, &v);
		d++;
		a[u] += v;
		if(dep[u] + d > n) continue;
		int ll = go(u, dep[u] + d);
		if(ll == -1) continue;
		int rr = gogo(u, dep[u] + d);
		val[dep[u] + d][ll] -= v;
		if(rr < SZ(st[dep[u]+d]) - 1){
			val[dep[u]+d][rr+1] += v;
		}
	}
	rep1(i, 1, n+1){
		rep(j, SZ(st[i])){
			int v = st[i][j];
			if(j) val[i][j] += val[i][j-1];
			a[v] += val[i][j];
		}
	}
	dfs2(1, 0);
	rep1(i, 1, n+1) printf("%lld%c", a[i], " \n"[i == n]);
	return 0;
}
