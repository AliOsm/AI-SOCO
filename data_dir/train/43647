#include <bits/stdc++.h>
//#include <ext/numeric>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
#define oo 0x3f3f3f3f
#define OO 0x3f3f3f3f3f3f3f3f
#define popcount(n) __builtin_popcount(n)
#define popcountll(n) __builtin_popcountll(n)

using namespace std;
//using namespace __gnu_cxx;
using namespace __gnu_pbds;
template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const double PI = acos(-1.0), EPS = 1e-6;
const long long inf = 2e12 + 12;
const int MAXN = 100005, MAXM = 1003, Mod = 1000000007 , MAXLog = 20;


bool notExist(pair<int, int> p, vector<pair<int, int>> &points) {
    for (pair<int, int> point : points)
        if (point == p) {
            return false;
        }
    return true;
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "rt", stdin);
//    freopen("output.txt", "w", stdout);
#endif
    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0), cout.precision(9), cout << fixed;


    int n;
    cin >> n;
    vector<pair<int, int>> points(4 * n + 1);
    for (int i = 0; i < 4 * n + 1; ++i) {
        cin >> points[i].first >> points[i].second;
    }

    map<int, int> sameX, sameY;
    for (pair<int, int> point : points) {
        ++sameX[point.first];
        ++sameY[point.second];
    }

    int x1, x2;
    x1 = x2 = -1;
    for (auto p : sameX) {
        if (p.second >= n) {
            if (x1 == -1) {
                x1 = p.first;
            } else {
                x2 = p.first;
            }
        }
    }

    int y1, y2;
    y1 = y2 = -1;
    for (auto p : sameY) {
        if (p.second >= n) {
            if (y1 == -1) {
                y1 = p.first;
            } else {
                y2 = p.first;
            }
        }
    }

//    cout << y1 << ' ' << y2 << '\n';

    vector<pair<int, int>> X1, X2, Y1, Y2;
    for (pair<int, int> point : points) {
        if (point.first == x1 && point.second >= y1 && point.second <= y2) {
            X1.push_back(point);
        }
        if (point.first == x2 && point.second >= y1 && point.second <= y2) {
            X2.push_back(point);
        }
        if (point.second == y1 && point.first >= x1 && point.first <= x2) {
            Y1.push_back(point);
        }
        if (point.second == y2 && point.first >= x1 && point.first <= x2) {
            Y2.push_back(point);
        }
    }

    pair<int, int> ans;
    int cnt = 0;
    for (pair<int, int> point : points) {
        if (notExist(point, X1) && notExist(point, X2) && notExist(point, Y1) && notExist(point, Y2)) {
            ans = point;
            ++cnt;
        }
    }

//    cout << cnt << '\n';

    assert(cnt == 1);
    cout << ans.first << ' ' << ans.second << '\n';
    

    return 0;
}