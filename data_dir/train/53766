#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cstdio>
#include <stdio.h>
#include <fstream>
#include <map>
#include <set>
#include <cstdlib>
#include <queue>
#include <math.h>
#include <cmath>
#include <cstring>
#include <stdlib.h>
#include <stack>
#include <iomanip>
#define ll long long
#define endl '\n'
#define ull unsigned long long
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pll pair<ll,ll>
#define pull pair<ull,ull>
#define ff first
#define triple pair< ll, pair<ll,ll> >
#define mt(x,y,z) mp(x,mp(y,z))
#define fir first
#define sec second.first
#define thi second.second
ll MOD=1000000007;
ll inf=1e18;
using namespace std;


int Intersection[100001][320];
ll a[100001];
ll Type[100001];
ll Original[100001];
vector<ll> S[100001];
vector<ll> H;
ll Alone[100001];
bool Z[320][100001];
ll s[100001];

int main()
{
    ios::sync_with_stdio(0);
    
    ll n,m,q,i,len,j,x,item,h,ans,y,ss,v;
    char c;
    
    cin>>n>>m>>q;for(i=0;i<n;i++)cin>>a[i];
    
    
    for(i=0;i<m;i++)
    {
        cin>>len;
        if(len*len<n)
        {
            Type[i]=0; // light
            ss=0;
            for(j=0;j<len;j++)
            {
                cin>>x;x--;S[i].pb(x);ss+=a[x];
            }
            //sort(S[i].begin(),S[i].end());
            Original[i]=ss;
        }
        else
        {
            Type[i]=1; // heavy
            H.pb(i);
            ss=0;
            for(j=0;j<len;j++)
            {
                cin>>x;x--;S[i].pb(x);ss+=a[x];
            }
            //sort(S[i].begin(),S[i].end());
            Original[i]=ss;
        }
    }
    h=H.size();
    while(h--)
    {
        int z=S[H[h]].size();
        for(i=0;i<z;i++)
        {
            Z[h][S[H[h]][i]]=true;
        }
    }
    // Calculate intersections with heavy cells
    
    for(i=0;i<m;i++)
    {
        int z=S[i].size();
        for(j=0;j<z;j++)
        {
            item=S[i][j];
            h=H.size();
            while(h--)
            {
                if(Z[h][item])Intersection[i][h]++;
            }
        }
    }
    
    
    
    
    //Queries
    // update a heavy ... increase the s[heavy] by x ... for each heavy update s[heavy] by x*size of intersection with heavy
    // update a light ... we can update by brute force ... for each heavy update s[heavy] by x*size of intersection with light
    // sum of a heavy ... s[heavy]
    // sum of a light ... find by brute force ... for each heavy update ans by alone[heavy]*size of intersection
    
    
    
    
    while(q--)
    {
        cin>>c;
        if(c=='?') // find sum
        {
            cin>>x;x--;ans=0;
            if(Type[x]==0) // light
            {
                for(j=0;j<S[x].size();j++)
                {
                    ans+=a[S[x][j]];
                }
                for(i=0;i<H.size();i++)
                {
                    y=H[i];
                    ans+=Alone[y]*Intersection[x][i];
                }
                cout<<ans<<endl;
            }
            else
            {
                cout<<Original[x]+s[x]<<endl;
            }
        }
        else
        {
            cin>>x>>v;x--;
            if(Type[x]==0)
            {
                for(j=0;j<S[x].size();j++)
                {
                    a[S[x][j]]+=v;
                }
                for(i=0;i<H.size();i++)
                {
                    y=H[i];
                    s[y]+=v*Intersection[x][i];
                }
            }
            else
            {
                Alone[x]+=v;
                for(i=0;i<H.size();i++)
                {
                    y=H[i];
                    s[y]+=v*Intersection[x][i];
                }
            }
        }
    }
    
    
    
    return 0;
} 