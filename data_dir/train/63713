#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <hash_map>
#include <map>
#include <hash_set>
#include <unordered_map>
#include <set>
#include <stack>
#include <algorithm>
#include <sstream>
#include <queue>

using namespace std;
typedef long long LL;
#define mems(arr, val) memset(arr, val, sizeof(arr));
#define iterat(A) A.begin(), A.end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define INF 2000000000
#define SIZE 1000009

int main()
{
	//freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	int n,k;
	cin>>n>>k;
	map<LL, LL> A;
	int ans = 0;
	forn(i, 0, n)
	{
		int tmp;
		cin>>tmp;
		//if (tmp == 1) ans++; continue;
		A[tmp]++;
	}
	if (k == 1)
	{
		cout<<n;
		return 0;
	}
	for(auto it = A.begin(); it != A.end(); ++it)
	{
		if (it -> second == -1) continue;
		vector<LL> V;
		V.push_back(it -> second);
		it->second = -1;
		LL cur_k = k;
		while (A.count(it->first * cur_k))
		{
			V.push_back(A[it->first * cur_k]);
			A[it->first * cur_k] = -1;
			cur_k *= k;
		}

		int oddsum = 0, evensum = 0;
		int oddcount = 0, evencount = 0;
		for (int i = 0; i < V.size(); ++i)
		{
			if (i % 2 == 0) {oddsum += V[i]; oddcount++;} else {evensum += V[i]; evencount++;}
		}

		ans += max(oddsum, evensum);
	}

	cout<<ans;
	
	return 0;
}