#include <bits/stdc++.h>
using namespace std;


class Seg {
  int l, m, r;
  Seg* ch[2];
  int num = 0;
  long long sum = 0;
  void pull() {
    num = ch[0]->num + ch[1]->num;
    sum = ch[0]->sum + ch[1]->sum;
  };
public:
  Seg(int l, int r) : l(l), r(r), m(l + r >> 1) {
    if (r - l > 1) {
      ch[0] = new Seg(l, m);
      ch[1] = new Seg(m, r);
    }
  }
  void add(int a) {
    if (r - l == 1) sum += l, ++num;
    else {
      if (a < m) ch[0]->add(a);
      else ch[1]->add(a);
      pull();
    }
  }
  long long firstK(int k) {
    assert(num >= k);
    if (r - l == 1) return k * l;
    if (k < ch[0]->num) return ch[0]->firstK(k);
    else return ch[0]->sum + ch[1]->firstK(k - ch[0]->num);
  }
};

class Solution {
  int n;
  vector<pair<int, long long>> A;
  vector<long long> pres;
public:
  void run() {
    cin >> n;
    A.resize(n);
    pres.resize(n + 1);
    for (int i = 0; i < n; ++i) cin >> A[i].first;
    for (int i = 0; i < n; ++i) cin >> A[i].second;
    sort(A.begin(), A.end());
    for (int i = 1; i <= n; ++i) pres[i] += pres[i - 1] + A[i - 1].second;
    Seg root(0, 201);
    long long ans = 1e18;
    for (int i = 0, j = 0; i < n; i = j) {
      while (j < n and A[i].first == A[j].first) ++j;
      int left = (j - i - 1) * 2 + 1;
      ans = min(ans, pres[n] - pres[j] + root.firstK(max(j - left, 0)));
      for (int k = i; k < j; ++k) root.add(A[k].second);
    }
    cout << ans << '\n';
  }             
};


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  Solution().run();
}
