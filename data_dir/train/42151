#include<bits/stdc++.h>

using namespace std;



int n;


unordered_map<int, vector<tuple<int, int, int>>> Z;

bool compareLine(const tuple<int, int>& e1, const tuple<int, int>& e2) {
	return get<0>(e1) < get<0>(e2);
}
bool comparePlane(const tuple<int, int, int>& e1, const tuple<int, int, int>& e2) {
	return get<0>(e1) < get<0>(e2);
}

bool compareSpace(const tuple<int, int, int, int>& e1, const tuple<int, int, int, int>& e2) {
	return get<0>(e1) < get<0>(e2);
}

unordered_map<string, vector<tuple<int, int>>> XY;
unordered_map<string, vector<tuple<int, int>>> YZ;
unordered_map<string, vector<tuple<int, int>>> XZ;


unordered_map<int, vector<tuple<int, int, int>>> XX;
unordered_map<int, vector<tuple<int, int, int>>> YY;
unordered_map<int, vector<tuple<int, int, int>>> ZZ;


vector<tuple<int, int, int, int>> XYZ;

int main()
{

	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	cin >> n;
	unordered_map<int, tuple<int, int, int>> used;
	for(int i = 0; i < n; i++) {
		int x, y, z; cin >> x >> y >> z;
		used[i + 1] = make_tuple(x, y, z);
		string sx = to_string(x);
		string sy = to_string(y);
		string sz = to_string(z);

		string xy = sx + "," + sy;
		string yz = sy + "," + sz;
		string xz = sx + "," + sz;

		if(XY.find(xy) != XY.end()) {
			XY[xy].push_back(make_tuple(z, i + 1));
		}

		else if(YZ.find(yz) != YZ.end()) {
			YZ[yz].push_back(make_tuple(x, i + 1));
		}

		else if(XZ.find(xz) != XZ.end()) {
			XZ[xz].push_back(make_tuple(y, i + 1));
		}

		else{
			XY[xy].push_back(make_tuple(z, i + 1));
		}
	}

	for(auto& line : XY) {
		sort(line.second.begin(), line.second.end(), compareLine);
		for(int i = 0; i + 1 < line.second.size(); i+= 2) {
			cout << get<1>(line.second[i]) << " " << get<1>(line.second[i+1]) << endl;
			used.erase(get<1>(line.second[i]));
			used.erase(get<1>(line.second[i+1]));
		}
	}
	for(auto& line : YZ) {
		sort(line.second.begin(), line.second.end(), compareLine);
		for(int i = 0; i + 1 < line.second.size(); i+= 2) {
			cout << get<1>(line.second[i]) << " " << get<1>(line.second[i+1]) << endl;
			used.erase(get<1>(line.second[i]));
			used.erase(get<1>(line.second[i+1]));
		}
	}
	for(auto& line : XZ) {
		sort(line.second.begin(), line.second.end(), compareLine);
		for(int i = 0; i + 1 < line.second.size(); i+= 2) {
			cout << get<1>(line.second[i]) << " " << get<1>(line.second[i+1]) << endl;
			used.erase(get<1>(line.second[i]));
			used.erase(get<1>(line.second[i+1]));
		}
	}


	for(auto& point : used) {
		int x = get<0>(point.second);
		int y = get<1>(point.second);
		int z = get<2>(point.second);
		int id = point.first;

		if(XX.find(x) != XX.end()) {
			XX[x].push_back(make_tuple(y, z, id));
		}

		else if(YY.find(y) != YY.end()) {
			YY[y].push_back(make_tuple(x, z, id));
		}

		else if(ZZ.find(x) != ZZ.end()) {
			ZZ[z].push_back(make_tuple(x, y, id));
		}

		else{
			XX[x].push_back(make_tuple(y, z, id));
		}
	}

	for(auto& plane : XX) {
		sort(plane.second.begin(), plane.second.end(), comparePlane);
		for(int i = 0; i + 1 < plane.second.size(); i+= 2) {
			cout << get<2>(plane.second[i]) << " " << get<2>(plane.second[i+1]) << endl;
			used.erase(get<2>(plane.second[i]));
			used.erase(get<2>(plane.second[i+1]));
		}
	}
	for(auto& plane : YY) {
		sort(plane.second.begin(), plane.second.end(), comparePlane);
		for(int i = 0; i + 1 < plane.second.size(); i+= 2) {
			cout << get<2>(plane.second[i]) << " " << get<2>(plane.second[i+1]) << endl;
			used.erase(get<2>(plane.second[i]));
			used.erase(get<2>(plane.second[i+1]));
		}
	}
	for(auto& plane : ZZ) {
		sort(plane.second.begin(), plane.second.end(), comparePlane);
		for(int i = 0; i + 1 < plane.second.size(); i+= 2) {
			cout << get<2>(plane.second[i]) << " " << get<2>(plane.second[i+1]) << endl;
			used.erase(get<2>(plane.second[i]));
			used.erase(get<2>(plane.second[i+1]));
		}
	}
	for(auto& ele : used) {
		int xx = get<0>(ele.second);
		int yy = get<1>(ele.second);
		int zz = get<2>(ele.second);
		int id = ele.first;
		XYZ.push_back(make_tuple(xx, yy, zz, id));
	}
	sort(XYZ.begin(), XYZ.end(), compareSpace);
	for(int i = 0; i + 1 < XYZ.size(); i+= 2) {
		cout << get<3>(XYZ[i]) << " " << get<3>(XYZ[i+1]) << endl;
	}
}


