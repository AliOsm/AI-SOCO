// need
#include <iostream>
#include <algorithm>
// data structure
#include <bitset>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#include <complex>
//#include <deque>
#include <valarray>
#include <unordered_map>
#include <array>
// stream
//#include <istream>
//#include <sstream>
//#include <ostream>
#include <fstream>
// etc
#include <cassert>
#include <cmath>
#include <functional>
#include <iomanip>
#include <chrono>
#include <random>
#include <numeric>

// input
#define INIT std::ios::sync_with_stdio(false);std::cin.tie(0);
#define VAR(type, ...)type __VA_ARGS__;MACRO_VAR_Scan(__VA_ARGS__);
template<typename T> void MACRO_VAR_Scan(T& t) { std::cin >> t; }
template<typename First, typename...Rest>void MACRO_VAR_Scan(First& first, Rest&...rest) { std::cin >> first; MACRO_VAR_Scan(rest...); }
#define VEC_ROW(type, n, ...)std::vector<type> __VA_ARGS__;MACRO_VEC_ROW_Init(n, __VA_ARGS__); for(int w=0; w<n; ++w){MACRO_VEC_ROW_Scan(w, __VA_ARGS__);}
template<typename T> void MACRO_VEC_ROW_Init(int n, T& t) { t.resize(n); }
template<typename First, typename...Rest>void MACRO_VEC_ROW_Init(int n, First& first, Rest&...rest) { first.resize(n); MACRO_VEC_ROW_Init(n, rest...); }
template<typename T> void MACRO_VEC_ROW_Scan(int p, T& t) { std::cin >> t[p]; }
template<typename First, typename...Rest>void MACRO_VEC_ROW_Scan(int p, First& first, Rest&...rest) { std::cin >> first[p]; MACRO_VEC_ROW_Scan(p, rest...); }
#define VEC(type, c, n) std::vector<type> c(n);for(auto& i:c)std::cin>>i;
#define MAT(type, c, m, n) std::vector<std::vector<type>> c(m, std::vector<type>(n));for(auto& R:c)for(auto& w:R)std::cin>>w;
// output
#define OUT(dist) std::cout<<(dist);
#define FOUT(n, dist) std::cout<<std::fixed<<std::setprecision(n)<<(dist);
#define SOUT(n, c, dist) std::cout<<std::setw(n)<<std::setfill(c)<<(dist);
#define SP std::cout<<" ";
#define TAB std::cout<<"\t";
#define BR std::cout<<"\n";
#define SPBR(w, n) std::cout<<(w + 1 == n ? '\n' : ' ');
#define ENDL std::cout<<std::endl;
#define FLUSH std::cout<<std::flush;
#define SHOW(dist) {std::cerr << #dist << "\t:" << (dist) << "\n";}
#define SHOWVECTOR(v) {std::cerr << #v << "\t:";for(const auto& xxx : v){std::cerr << xxx << " ";}std::cerr << "\n";}
#define SHOWVECTOR2(v) {std::cerr << #v << "\t:\n";for(const auto& xxx : v){for(const auto& yyy : xxx){std::cerr << yyy << " ";}std::cerr << "\n";}}
#define SHOWQUEUE(a) {auto tmp(a);std::cerr << #a << "\t:";while(!tmp.empty()){std::cerr << tmp.front() << " ";tmp.pop();}std::cerr << "\n";}
// utility
#define ALL(a) (a).begin(),(a).end()
#define FOR(w, a, n) for(int w=(a);w<(n);++w)
#define RFOR(w, a, n) for(int w=(n)-1;w>=(a);--w)
#define REP(w, n) for(int w=0;w<int(n);++w)
#define RREP(w, n) for(int w=int(n)-1;w>=0;--w)
#define FORLL(w, a, n) for(ll w=ll(a);w<ll(n);++w)
#define RFORLL(w, a, n) for(ll w=ll(n)-1;w>=ll(a);--w)
#define REPLL(w, n) for(ll w=0;w<ll(n);++w)
#define RREPLL(w, n) for(ll w=ll(n)-1;w>=0;--w)
#define IN(a, x, b) (a<=x && x<b)
template<class T> inline T CHMAX(T& a, const T b) { return a = (a < b) ? b : a; }
template<class T> inline T CHMIN(T& a, const T b) { return a = (a > b) ? b : a; }
#define EXCEPTION(msg) throw std::string("Exception : " msg " [ in ") + __func__ + " : " + std::to_string(__LINE__) + " lines ]"
#define TRY(cond, msg) try {if (cond) EXCEPTION(msg);}catch (std::string s) {std::cerr << s << std::endl;}
//void CHECKTIME(std::function<void()> f) { auto start = std::chrono::system_clock::now(); f(); auto end = std::chrono::system_clock::now(); auto res = std::chrono::duration_cast<std::chrono::nanoseconds>((end - start)).count(); std::cerr << "[Time:" << res << "ns  (" << res / (1.0e9) << "s)]\n"; }
// test
template<class T> std::vector<std::vector<T>> VV(int n, int m, T init = T()) {
	return std::vector<std::vector<T>>(n, std::vector<T>(m, init));
}
template<typename S, typename T>
std::ostream& operator<<(std::ostream& os, std::pair<S, T> p) {
	os << "(" << p.first << ", " << p.second << ")"; return os;
}

// type/const
//#define int ll
using ll = long long;
using ull = unsigned long long;
using ld = long double;
using PAIR = std::pair<int, int>;
using PAIRLL = std::pair<ll, ll>;
constexpr int INFINT = 1 << 30;                          // 1.07x10^ 9
constexpr int INFINT_LIM = (1LL << 31) - 1;              // 2.15x10^ 9
constexpr ll INFLL = 1LL << 60;                          // 1.15x10^18
constexpr ll INFLL_LIM = (1LL << 62) - 1 + (1LL << 62);  // 9.22x10^18
constexpr double EPS = 1e-10;
constexpr int MOD = 1000000007;
constexpr double PI = 3.141592653589793238462643383279;
template<class T, size_t N> void FILL(T(&a)[N], const T& val) { for (auto& x : a) x = val; }
template<class ARY, size_t N, size_t M, class T> void FILL(ARY(&a)[N][M], const T& val) { for (auto& b : a) FILL(b, val); }
template<class T> void FILL(std::vector<T>& a, const T& val) { for (auto& x : a) x = val; }
template<class ARY, class T> void FILL(std::vector<std::vector<ARY>>& a, const T& val) { for (auto& b : a) FILL(b, val); }
// ------------>8------------------------------------->8------------

enum FUNC_SparseTable { MIN, MAX };
template<class T>
class SparseTable {
	size_t N;
	std::vector<T> a;
	std::vector<size_t> logTable;
	std::vector<std::vector<T>> table;
	std::function<T(T&, T&)> f;
public:
	SparseTable(const std::vector<T>& _a, FUNC_SparseTable func = MIN) : N(_a.size()), a(_a) {
		logTable.resize(N + 1, 0);
		for (size_t i = 2; i <= N; ++i) {
			logTable[i] = logTable[i >> 1] + 1;
		}

		switch (func) {
		case MIN: f = [](T& l, T& r) { return std::min(l, r); }; break;
		case MAX: f = [](T& l, T& r) { return std::max(l, r); }; break;
		}

		table.resize(logTable[N] + 1, std::vector<T>(N));
		for (size_t i = 0; i < N; ++i) table[0][i] = a[i];
		for (size_t k = 1; k <= logTable[N]; ++k) {
			for (size_t i = 0; i + (1 << k) <= N; ++i) {
				table[k][i] = f(table[k - 1][i], table[k - 1][i + (1 << (k - 1))]);
			}
		}
	}
	// query in [l, r)
	inline T query(int l, int r) {
		if (l >= r) return INFINT;
		int lg = logTable[r - l];
		return f(table[lg][l], table[lg][r - (1 << lg)]);
	}
};
using ST = SparseTable<int>;

struct EulerTour {
	std::vector<int> eulerTour, begin, end;
	int n, k;

	// 頂点vを根とする木gのオイラーツアー
	EulerTour(const std::vector<std::vector<int>>& g, int v) : n(g.size()), k(0) {
		begin.resize(n, 0);
		end.resize(n, 0);
		createEulerTour(g, v, -1);
	}

	// 頂点vを根とする木gのオイラーツアーを構成する
	void createEulerTour(const std::vector<std::vector<int>>& g, int v, int par) {
		begin[v] = k++;
		eulerTour.emplace_back(v);
		for (auto to : g[v]) {
			if (to == par) continue;
			createEulerTour(g, to, v);
			eulerTour.emplace_back(v);
			k++;
		}
		end[v] = k;
	}
};

signed main() {
	INIT;

	VAR(int, n, q);
	VEC(int, p, n - 1);
	std::vector<std::vector<int>> g(n);
	REP(i, n - 1) {
		--p[i];
		g[p[i]].emplace_back(i + 1);
		g[i + 1].emplace_back(p[i]);
	}

	std::vector<int> depth(n, INFINT);
	{
		std::queue<int> que({ 0 });
		depth[0] = 0;
		while (!que.empty()) {
			int now = que.front(); que.pop();
			for (auto& to : g[now]) {
				if (depth[to] > depth[now] + 1) {
					depth[to] = depth[now] + 1;
					que.push(to);
				}
			}
		}
	}

	EulerTour et_(g, 0);

	auto et(et_.eulerTour);
	std::vector<int> etDepth(et.size());
	REP(i, et.size()) etDepth[i] = depth[et[i]];

	ST beginST(et_.begin, MIN);
	ST endST(et_.end, MAX);
	ST depthST(etDepth, MIN);
	ST depthST2(depth, MIN);


	REP(_, q) {
		VAR(int, l, r);
		--l;

		int L = beginST.query(l, r);
		int R = endST.query(l, r);
		std::set<int> set;
		set.insert(et[L]);
		set.insert(et[R - 1]);

		auto getMin2 = [&](int sl, int sr, int tl, int tr) -> int {
			int tL = beginST.query(sl, sr);
			int tR = endST.query(sl, sr);
			CHMIN(tL, beginST.query(tl, tr));
			CHMAX(tR, endST.query(tl, tr));
			return depthST.query(tL, tR);
		};
		auto getMin = [&](int sl, int sr) -> int {
			int tL = beginST.query(sl, sr);
			int tR = endST.query(sl, sr);
			return depthST.query(tL, tR);
		};
		auto calc = [&](int x) {
			if (l == x) return getMin(l + 1, r);
			if (r - 1 == x) return getMin(l, r - 1);
			return getMin2(l, x, x + 1, r);
		};

		int a = -1, b = -1;
		for (auto& x : set) {
			int res = calc(x);
			if (a == -1 || b < res) {
				a = x;
				b = res;
			}
		}

		OUT(a + 1)SP OUT(b)BR;
	}

	return 0;
}
