// Written by HadronWave 
// P.S. Contains too many bugs.

#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
//-I\O-------------

#include <cstring>
#include <cmath>
#include <cstdio>
#include <cstdlib>
//-C-libraries------

#include <stack>
#include <deque>
#include <queue>
#include <string>
#include <vector>
#include <map>
#include <set>
//-Structs-----------

#include <algorithm>
#include <functional>
//-Other-------------

using namespace std;
//-Using-------------


typedef long long ll;
typedef pair<int,int> pr;
//-Typedefs----------


#define double long double
//-Define------------

const ll mod7 = 1000000007;
const ll mod9 = 1000000009;
const int linf = 2000000000;
const ll llinf = 1000000000000000000ll;
//-Const-------------

ifstream in("series.in");
ofstream out("series.out");

int n,m;
vector< int > gr[500001];
int depth[500001];
int goin[500001],goout[500001];
bool used[500001];
int timer = 0;


void dfs(int v=1,int p = 1){
    goin[v] = timer; ++timer;
    
    for(int i=0;i<gr[v].size();++i){
        int to = gr[v][i];
        if(to!=p){
            dfs(to,v);
        }
    }
    
    goout[v] = timer; ++timer;
}

int main(){
    /*scanf("%d",&n);
    for(int i=0;i<n-1;++i){
        int a,b;
        scanf("%d%d",&a,&b);
        gr[a].push_back(b);
        gr[b].push_back(a);
    }
    scanf("%d",&m);
    int len = (int)sqrt(m*1.)+1;
    bool all = false; int cnt = 0;
    
    dfs();
    */
    vector<int> arr(3);
    for(int i=0;i<3;++i){
        cin >> arr[i];
    }
    if((arr[0]+arr[1]+arr[2])%2 || arr[0]+arr[1]<arr[2] || arr[1]+arr[2]<arr[0] || arr[2]+arr[0]<arr[1]){
        cout << "Impossible";
    }else{
        for(int i=0;i<=min(arr[1],arr[0]);++i){
            int x = arr[1]-i;
            if(arr[2]-(x+arr[0]-i)==0){
                cout << i << ' ' << x << ' ' << arr[0]-i;
                return 0;
            }
        }
        cout << "Impossible";   
    }
    return 0;
}