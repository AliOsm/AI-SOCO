#pragma GCC optimize("Ofast")
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define int long long
#define ll long long
//#define int  unsigned long long
#define pb push_back
//#define double long double

using namespace std;
using namespace __gnu_pbds;
typedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
const int mod = 1e9 + 7;
const int N = 300010;
const int K = 400;
int l[N], r[N], f[N], len[N];
int binpow(int x, int y){
    int res = 1;
    while(y){
        if (y % 2) res = res * x % mod;
        x = x * x % mod;
        y /= 2;
    }
    return res;
}
int in(int i, int j){
    int lb = max(l[i], l[j]);
    int rb = min(r[i], r[j]);
    if (rb < lb) return 0;
    return rb - lb + 1;
}
int in(int i, int j, int k){
    int lb = max({l[i], l[j], l[k]});
    int rb = min({r[i], r[j], r[k]});
    if (rb < lb) return 0;
    return rb - lb + 1;
}
main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    //freopen("input.txt", "r", stdin);
    int n;
    cin >> n;
    for (int i = 1; i <= n; i++) cin >> l[i];
    for (int i = 1; i <= n; i++) cin >> r[i];
    for (int i = 1; i <= n; i++) len[i] = r[i] - l[i] + 1;
    int s = 0;
    for (int i = 1; i < n; i++){
        int y = len[i] * len[i + 1] % mod;
        int x = (y - in(i, i + 1) + mod) % mod;
        f[i] = x * binpow(y, mod - 2) % mod;
        s = (s + f[i]) % mod;
    }
    int ans = (1 + 3 * s + s * s) % mod;
    for (int i = 1; i < n; i++){
        ans = (ans - f[i] * f[i] % mod + mod) % mod;
    }
    for (int i = 1; i < n - 1; i++){
        ans = (ans - 2 * f[i] * f[i + 1] % mod + mod) % mod;
        int y = len[i] * len[i + 1] % mod * len[i + 2] % mod;
        int x = (y - in(i, i + 1) * len[i + 2] % mod - in(i + 1, i + 2) * len[i] % mod + in(i, i + 1, i + 2) + mod + mod) % mod;
        ans = (ans + 2 * x * binpow(y, mod - 2)) % mod;
    }
    cout << ans;
}
