#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

bool cmp(pair<ll, ll> x, pair<ll, ll> y) {
    ll Max = max(x.first, x.second);
    if(x.second == Max && y.first == Max) return true;
    if(x.first == Max && y.second == Max) return false;
    if(x.second == Max && y.second == Max) {
        return x.first < y.first;
    }
    return x.second > y.second;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cout << setprecision(8) << fixed;
    ll n;
    cin >> n;
    map<ll, vector<pair<ll, ll> > > arr;
    ll x, y;
    for(ll i = 0; i < n; ++i) {
        cin >> x >> y;
        arr[max(x,y)].push_back({x, y});
    }
    map<ll, ll> dists;
    for(auto &p : arr) {
        //cout << "level: " << p.first << '\n';
        sort(p.second.begin(), p.second.end(), cmp);
        //for(pair<ll, ll> elem : p.second) cout << elem.first << ' ' << elem.second << '\t';
        //cout << '\n';
        ll size = p.second.size();
        ll sum = 0;
        for(ll i = 1; i < size; ++i) {
            sum += abs(p.second[i].first - p.second[i-1].first);
            sum += abs(p.second[i].second - p.second[i-1].second);
        }
        dists[p.first] = sum;
        //cout << "dist: " << sum << '\n';
    }
    const ll inf = 1e15;
    vector<vector<ll> > memo(n, vector<ll>(2, inf));
    //side == 0 if start at beginning
    //side == 1 if start at end
    ll level = 0;
    pair<ll, ll> prevBegin, prevEnd;
    for(auto &p : arr) {
        ll currDist = dists[p.first];
        if(level == 0) {
            memo[level][0] = currDist + p.second[0].first + p.second[0].second;
            memo[level][1] = currDist + p.second.back().first + p.second.back().second;
        } else {
            ll next = currDist + memo[level-1][1] + abs(prevBegin.first - p.second[0].first) + abs(prevBegin.second - p.second[0].second);
            next = min(next, currDist + memo[level-1][0] + abs(prevEnd.first - p.second[0].first) + abs(prevEnd.second - p.second[0].second));
            memo[level][0] = next;
            
            next = currDist + memo[level-1][0] + abs(prevEnd.first - p.second.back().first) + abs(prevEnd.second - p.second.back().second);
            next = min(next, currDist + memo[level-1][1] + abs(prevBegin.first - p.second.back().first) + abs(prevBegin.second - p.second.back().second));
            memo[level][1] = next;
        }
        level++;
        prevBegin = p.second[0];
        prevEnd = p.second.back();
    }
    cout << min(memo[level-1][0], memo[level-1][1]) << '\n';
    return 0;
}











