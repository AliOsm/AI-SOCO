#include<iostream>
#include<cstdio>
#include<cmath>

using namespace std;

#define ll long long

int res[400000];
int a[400000];
int sparseMin[400000][20];
int sparseGcd[400000][20];
int maxTwo[400000], maxStep[400000];
int n;


int nsd(int x, int y)
{
    while(x>0&&y>0)
        if(x>y)x%=y; else y%=x;
    return x+y;
}

void make_sparse() {
	for (int i = 0; i < n; i++) {
		sparseMin[i][0] = a[i];
		sparseGcd[i][0] = a[i];
	}
	int curTwo = 1;
	for (int j = 1; j < 20; j++) {
		for (int i = 0; i < n; i++) {
			if (i + curTwo * 2 <= n) {
				sparseMin[i][j] = min(sparseMin[i][j - 1], sparseMin[i + curTwo][j - 1]);
				sparseGcd[i][j] = nsd(sparseGcd[i][j - 1], sparseGcd[i + curTwo][j - 1]);
			}
		}
		curTwo *= 2;
		if (curTwo > n)
			break;
	}
	curTwo = 1;
	int step = 0;
	for (int i = 1; i <= n; i++) {
		if (curTwo * 2 < i) {
			curTwo *= 2;
			step++;
		}
		maxTwo[i] = curTwo;
		maxStep[i] = step;
	}
}

int getGcd(int l, int r) {
	int len = r - l + 1;
	int mxTwo = maxTwo[len];
	int mxStep = maxStep[len];
	return nsd(sparseGcd[l][mxStep], sparseGcd[r - mxTwo + 1][mxStep]);
}

int getMin(int l, int r) {
	int len = r - l + 1;
	int mxTwo = maxTwo[len];
	int mxStep = maxStep[len];
	return min(sparseMin[l][mxStep], sparseMin[r - mxTwo + 1][mxStep]);
}



bool ok (int len) {
	for (int i = 0; i < n - len; i++)
		if (getGcd(i, i + len) == getMin(i, i + len))
			return true;
	return false;
}


int main()
{
    int i;
    cin>>n;

    for(i=0;i<n;i++)
        cin>>a[i];

    make_sparse();
    int f, l=0, r=n;
    while(r-l>1)
    {
        int mid=(l+r)/2;
        if(ok(mid))l=mid; else r=mid;
    }

    if(ok(r))f=r; else f=l;

    int sz=0;
    for(i=0;i<n-f;i++)
        if(getMin(i, i + f) == getGcd(i, i + f))res[sz++]=i+1;

    cout<<sz<<" "<<f<<endl;
    for(i=0;i<sz;i++)
        cout<<res[i]<<" ";
}
