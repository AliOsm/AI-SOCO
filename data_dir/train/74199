//          be name khoda

#include <algorithm>
#include <iostream>
#include <vector>
#include <cstdio>
#include <set>

using namespace std;

const int maxN = 234432;

long long rnk[maxN], parent[maxN], a[maxN];
pair<long long, int> b[maxN];
vector <int> g[maxN];
long long sum[maxN], sz[maxN], value[maxN] ,ss;
set <int> sn;

int find(int n)
{
    if (n != parent[n]) {
        parent[n] = find(parent[n]);
    }
    return parent[n];
}

int merge(int x, int y)
{
    x = find(x);
    y = find(y);
    if(x == y)
        return x;
    if (rnk[x] > rnk[y]) {
        sz[x] += sz[y];
        parent[y] = x;
    } else {
        parent[x] = y;
        sz[y] += sz[x];
        if (rnk[x] == rnk[y]) {
            ++(rnk[y]);
        }
    }
    return find(x);
}

int main()
{
    ios::sync_with_stdio(0);
    long long n, m;
    cin >> n >> m;
    for(int i = 1; i <= n; i++)
    {
        cin >> b[i].first;
        b[i].second = i;
        parent[i] = i;
        sz[i] = 1;
    }
    sort(b + 1, b + n + 1);
    for(int i = 1; i <= n; i++)
    {
        a[b[i].second] = i;
        value[i] = b[i].first;
    }
    while(m--)
    {
        int l, r;
        cin >> l >> r;
        g[a[l]].push_back(a[r]);
        g[a[r]].push_back(a[l]);
    }
    for(int v = n; v; v--)
    {
        sn.clear();
        for(int i = 0; i < g[v].size(); i++)
            if(g[v][i] > v)
            {
                int nr = find(g[v][i]);
                int nv = find(v);
                if(nr != nv)
                {
                    sum[v] += value[v] * sz[nv] * sz[nr];
                    int mm = merge(v, nr);
                }
                //sn.insert(nr);
            }
        ss += sum[v];
    }
    //cout << ss << endl;
    double ans = ss;
    ans /= double(n) * (n - 1) / 2.0;
    printf("%0.6f\n", ans);
    cin >> n;
}