/**************************************************************************
Coded by: Saba Karimi(_VINTAGE)
Institution: AIT PUNE
***************************************************************************/
#include<bits/stdc++.h>
using namespace std;
#define fast ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define pb push_back 
#define all(a) a.begin(),a.end()
#define lb lower_bound
#define ub upper_bound
#define pii pair<int,int>
#define ld long double
#define int long long int 
#define F first 
#define S second
/**************************************************************************/
vector<int> v;
const int N = 1e5+1;
vector<int> adj[N];
int temp[N];
int vv[N][4];
int visit[N];
int cans = 0;
void dfs(int src,int idx)
{
    visit[src] = 1;
    cans+=vv[src][v[idx]];
    temp[src] = v[idx];
    for(auto it:adj[src])
    {
        if(!visit[it])
            dfs(it,(idx+1)%3);
    }
}
bool check(int n)
{
    int d1 = 0;
    int d2 = 0;
    for(int i=1;i<=n;i++)
    {
        if(adj[i].size()==1)
            d1++;
        if(adj[i].size()==2)
            d2++;
    }
    if(d1 == 2 && d2 == n-2)
        return true;
    return false;
}
signed main()
{
    fast;
    int n;
    cin>>n; 
    for(int i=1;i<=n;i++)
    {
        int x;
        cin>>x;
        vv[i][1] = x;
    }
    for(int i=1;i<=n;i++)
    {
        int x;
        cin>>x;
        vv[i][2] = x;
    }
    for(int i=1;i<=n;i++)
    {
        int x;
        cin>>x;
        vv[i][3] = x;
    }
    for(int i=1;i<=n-1;i++)
    {
        int u,v;
        cin>>u>>v;
        adj[u].pb(v);
        adj[v].pb(u);
    }
    int root;
    for(int i=1;i<=n;i++)
    {
        if(adj[i].size()==1)
        {
            root = i;
            break;
        }
    }
    if(check(n))
    {
        int per[n+1];
        v.pb(1);
        v.pb(2);
        v.pb(3);
        int ans = 1e18;
        do
        {
            cans = 0;
            for(int i=1;i<=n;i++)
            {
                visit[i] = 0;
            }
            dfs(root,0);//root is not always 1
            if(cans<=ans)
            {
                ans = cans;
                for(int i=1;i<=n;i++)
                    per[i] = temp[i];
            }
        }while(next_permutation(all(v)));
        cout<<ans<<"\n";
        for(int i=1;i<=n;i++)
            cout<<per[i]<<" ";
    }
    else cout<<-1;
}