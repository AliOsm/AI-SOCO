#include <bits/stdc++.h>

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define foreach(it, v) for(auto it=(v).begin(); it != (v).end(); ++it)

#define _ ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define __ freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);

#define tr(...) cout<<__FUNCTION__<<' '<<__LINE__<<" = ";trace(#__VA_ARGS__, __VA_ARGS__)

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;

template<typename S, typename T> 
ostream& operator<<(ostream& out,pair<S,T> const& p){out<<'('<<p.fi<<", "<<p.se<<')';return out;}

template<typename T>
ostream& operator<<(ostream& out,vector<T> const& v){
int l=v.size();for(int i=0;i<l-1;i++)out<<v[i]<<' ';if(l>0)out<<v[l-1];return out;}

template<typename T>
void trace(const char* name, T&& arg1){cout<<name<<" : "<<arg1<<endl;}

template<typename T, typename... Args>
void trace(const char* names, T&& arg1, Args&&... args){
const char* comma = strchr(names + 1, ',');cout.write(names, comma-names)<<" : "<<arg1<<" | ";trace(comma+1,args...);}

const ld PI = 3.1415926535897932384626433832795;

typedef complex<double> base;

const int K = 15;

base roots[K];
base iroots[K];

void init(){
  for(int i = 1; i < K; i++){
    double ang = 2*PI/(1 << i);
    roots[i] = base(cos(ang), sin(ang));
    iroots[i] = base(cos(-ang), sin(-ang));
  }
}

int rev (int num, int lg_n) {
	int res = 0;
	for (int i=0; i<lg_n; ++i)
		if (num & (1<<i))
			res |= 1<<(lg_n-1-i);
	return res;
}
 
void fft (vector<base> & a, bool invert) {
	int n = (int) a.size();
	int lg_n = 0;
	while ((1 << lg_n) < n)  ++lg_n;
 
	for (int i=0; i<n; ++i)
		if (i < rev(i,lg_n))
			swap (a[i], a[rev(i,lg_n)]);
 
	for (int len=2, pp = 1; len<=n; len<<=1, pp++) {
		base wlen = invert ? iroots[pp] : roots[pp];
		for (int i=0; i<n; i+=len) {
			base w (1);
			for (int j=0; j<len/2; ++j) {
				base u = a[i+j],  v = a[i+j+len/2] * w;
				a[i+j] = u + v;
				a[i+j+len/2] = u - v;
				w *= wlen;
			}
		}
	}
	if (invert)
		for (int i=0; i<n; ++i)
			a[i] /= n;
}


// degree should be cloest power of two of degree after multiplication
void fft2D(vector<vector<base>> &a, bool invert){
  if(invert){
    for(int i = 0; i < a[0].size(); i++){
      vector<base> v;
      for(int j = 0; j < a.size(); j++){
        v.pb(a[j][i]);
      }
      fft(v, true);
      
      for(int j = 0; j < a.size(); j++){
        a[j][i] = v[j];
      }
    }
    
    for(vector<base> &v : a){
      fft(v, true);
    }
  }
  else{
    for(vector<base> &v : a){
      fft(v, false);
    }
    
    for(int i = 0; i < a[0].size(); i++){
      vector<base> v;
      for(int j = 0; j < a.size(); j++){
        v.pb(a[j][i]);
      }
      fft(v, false);
      
      for(int j = 0; j < a.size(); j++){
        a[j][i] = v[j];
      }
    }
  }
}

const int N = 410;

string g[N];
string p[N];

int fcnt[N][N];

int main(){ _
  init();
  int n, m;
  cin >> n >> m;
  
  for(int i = 0; i < n; i++){
    cin >> g[i];
  }
  
  int r, c;
  cin >> r >> c;
  
  for(int i = 0; i < r; i++){
    cin >> p[i];
  }
  
  int A = n + r - 1;
  int B = m + c - 1;
  
  int sz1 = 1;
  int sz2 = 1;
  
  while(sz1 < A) sz1 <<= 1;
  while(sz2 < B) sz2 <<= 1;
  
  int qcnt = 0;
  for(int i = 0; i < r; i++){
    for(int j = 0; j < c; j++){
      qcnt += p[i][j] == '?';
    }
  }
  
  for(char ch = 'a'; ch <= 'z'; ch++){
    vector<vector<base>> p1(sz1, vector<base>(sz2));
    vector<vector<base>> p2(sz1, vector<base>(sz2));
    
    int acnt = 0;
    for(int i = 0; i < r; i++){
      for(int j = 0; j < c; j++){
        if(p[i][j] == ch){
          p1[r-1 - i][c-1 - j] = 1;
          acnt++;
        }
      }
    }
    
    if(!acnt) continue;

    for(int i = 0; i < A; i++){
      for(int j = 0; j < B; j++){
        if(g[i % n][j % m] == ch){
          p2[i][j] = 1;
        }
      }
    }
    
    fft2D(p1, false);
    fft2D(p2, false);
    
    
    for(int i = 0; i < sz1; i++){
      for(int j = 0; j < sz2; j++){
        p1[i][j] *= p2[i][j];
      }
    }
    
    fft2D(p1, true);
    
    for(int i = 0; i < n; i++){
      for(int j = 0; j < m; j++){
        fcnt[i][j] += (int) (p1[r-1+i][c-1+j].real() + 0.5);
      }
    }
  }
  
  int len = r * c;
  for(int i = 0; i < n; i++){
    for(int j = 0; j < m; j++){
      if(fcnt[i][j] == len - qcnt){
        cout << '1';
      }
      else{
        cout << '0';
      }
    }
    cout << endl;
  }
  
  return 0;
}
