#include <bits/stdc++.h>
using namespace std;

vector<int> X[200005];

int level[200005], dp[200005], parent[200005];

void dfs(int i, int par, int lvl)
{
    level[i] = lvl;
    parent[i] = par;

    for(int j=0; j<X[i].size(); j++)
    {
        if(X[i][j]==par)
            continue;

        dfs(X[i][j], i, lvl+1);
        dp[i] = max(dp[ X[i][j] ]+1, dp[i]);
    }
}

int main()
{
    int N, x;
    scanf("%d %d", &N, &x);

    for(int i=1; i<=N-1; i++)
    {
        int a, b;
        scanf("%d %d", &a, &b);

        X[a].push_back(b);
        X[b].push_back(a);
    }

    dfs(1, 0, 1);

    int ht = level[x];
    int maxReachable = (ht+1)/2 + 1;

    int ans = 0, ptr = x;

    while(level[ptr]>=maxReachable)
    {
        ans = max(ans, dp[ptr] + level[ptr]);
        ptr = parent[ptr];
    }

    printf("%d\n", (ans - 1)*2);
    return 0;
}
