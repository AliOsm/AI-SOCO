#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <class T>
using ordered_set =
       tree <T,null_type,less <T>,rb_tree_tag,tree_order_statistics_node_update> ;

template <class T,class U>
void maximize(T &x,U y)
{
    if(x < y)x=y;
}
template <class T,class U>
void minimize(T &x,U y)
{
    if(x > y)x=y;
}
template <class T>
T Abs(T x)
{
    return (x < (T)0 ? -x : x);
}

#define ll long long
#define pll pair <ll,ll>
#define pii pair <int,int>
#define fir first
#define sec second
#define mp make_pair
#define pb push_back
#define MASK(i) ((1LL)<<(i))
#define BIT(x,i) (((x)>>(i))&1)
#define all(c) (c).begin(),(c).end()
#define sz(c) (c).size()
#define fn "test"    ///FILE_NAME_HERE

namespace task{

const int N = 1e5 + 5;
const double pi = 3.1415926535897;
ll volume[N],f[N];
vector <ll> values;
int n;

struct Fenwick_Tree
{
    vector <ll> ft;
    Fenwick_Tree(){ft.resize(N + 5,0);}
    void update(int node,ll val)
    {
        for(;node < N;node += node & (-node))
            maximize(ft[node],val);
    }
    ll rmq(int node)
    {
        ll ret=0;
        for(;node > 0;node -= node & (-node))
            maximize(ret,ft[node]);
        return ret;
    }
}fen;

int get_index(ll val)
{
    return lower_bound(all(values),val) - values.begin() + 1;
}

void solve()
{
    cin>>n;
    for(int r,h,i=1;i<=n;++i)
        cin>>r>>h,volume[i] = 1LL*r*1LL*r*1LL*h;
    for(int i=1;i<=n;++i)
        values.pb(volume[i]);
    sort(all(values));
    values.erase(unique(all(values)),values.end());
    for(int i=1;i<=n;++i)
    {
        ll tot = fen.rmq(get_index(volume[i]) - 1);
        maximize(f[i],tot + volume[i]);
        fen.update(get_index(volume[i]),f[i]);
    }
    double ans = (double)(*max_element(f + 1,f + 1 + n));
    cout<<setprecision(20)<<fixed<<pi*ans;
}}

int main(void)
{
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    task::solve();
}
