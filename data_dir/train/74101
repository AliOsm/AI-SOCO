#include <bits/stdc++.h>
#define base 1000000007LL
#define ll long long
#define ld double
#define X first
#define Y second
#define pb push_back
#define EPS 1e-9
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
using namespace std;
typedef pair<int, int> II;
typedef pair<II, int> III;

vector<int> g, a[100010];
int d[100010], p[100010], N, L[100010], R[100010], n, res[100010], lazy[400010];
bool yes[100010];
II t[400010], w[100010];

void dfs(int u)
{
    FOR(i,0,sz(a[u])-1) {
        int v = a[u][i];
        if (d[v] == 0) {
            d[v] = d[u] + 1;
            dfs(v);
        }
    }
}

void dfs2(int u)
{
    FOR(i,0,sz(a[u])-1) {
        int v = a[u][i];
        if (d[v] == 0) {
            p[v] = u;
            d[v] = d[u] + 1;
            dfs2(v);
        }
    }
}

void dfs3(int u, int P)
{
    N++;
    L[u] = N;
    FOR(i,0,sz(a[u])-1) {
        int v = a[u][i];
        if (v == P) continue;
        d[v] = d[u]+1;
        p[v] = u;
        dfs3(v, u);
    }
    R[u] = N;
}

int getRoot(int u, int v)
{
    g.pb(v);
    while (v != u) {
        v = p[v];
        g.pb(v);
    }
    return g[sz(g)/2];
}

void build(int k, int l, int r)
{
    if (l > r) return;
    if (l == r) {
        t[k] = II(w[l].X, w[l].Y);
        return;
    }
    int m = (l+r) >> 1;
    build(k*2,l,m);
    build(k*2+1,m+1,r);
    t[k] = max(t[k*2], t[k*2+1]);
}

void lazy_upd(int k, int l, int r)
{
    if (lazy[k] == 0) return;
    t[k].X -= lazy[k];
    if (l < r) {
        lazy[k*2] += lazy[k];
        lazy[k*2+1] += lazy[k];
    }
    lazy[k] = 0;
}

void update(int k, int l, int r, int u, int v)
{
    lazy_upd(k,l,r);
    if (l > r || r < u || v < l) return;
    if (u <= l && r <= v) {
        lazy[k] = 1;
        lazy_upd(k,l,r);
        return;
    }
    int m = (l+r) >> 1;
    update(k*2,l,m,u,v);
    update(k*2+1,m+1,r,u,v);
    t[k] = max(t[k*2], t[k*2+1]);
}

II get(int k, int l, int r, int u, int v)
{
    lazy_upd(k,l,r);
    if (l > r || r < u || v < l) return II(0,0);
    if (u <= l && r <= v) return t[k];
    int m = (l+r) >> 1;
    return max(get(k*2,l,m,u,v), get(k*2+1,m+1,r,u,v));
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(NULL);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    cin >> n;
    FOR(i,1,n-1) {
        int u, v;
        cin >> u >> v;
        a[u].pb(v);
        a[v].pb(u);
    }
    //------------------------------------------------
    d[1] = 1;
    dfs(1);
    int Max = 0;
    FOR(i,1,n) Max = max(d[i], Max);
    int vt = 0;
    FOR(i,1,n)
        if (d[i] == Max) vt = i;
    //------------------------------------------------
    ms(d, 0);
    d[vt] = 1;
    dfs2(vt);
    Max = 0;
    FOR(i,1,n) Max = max(d[i], Max);
    int vt2 = 0;
    FOR(i,1,n)
        if (d[i] == Max) vt2 = i;
    int root = getRoot(vt, vt2);
    //------------------------------------------------
    res[1] = 1;
    res[2] = sz(g);

    ms(d, 0);
    d[root] = 1;
    dfs3(root, 0);
    FOR(i,1,n) {
        w[L[i]].X = d[i]-1;
        w[L[i]].Y = i;
    }

    build(1,1,n);
    FORE(i,sz(g)/2-1,0) update(1,1,n,L[g[i]],R[g[i]]);
    FOR(i,sz(g)/2+1,sz(g)-1) update(1,1,n,L[g[i]],R[g[i]]);
    FOR(i,0,sz(g)-1) yes[g[i]] = true;

    FOR(i,3,n) {
        II q = get(1,1,n,1,n);
        int u = q.Y;
        g.clear();
        while (!yes[u]) {
            g.pb(u);
            u = p[u];
        }
        FORE(j,sz(g)-1,0) {
            update(1,1,n,L[g[j]],R[g[j]]);
            yes[g[j]] = true;
        }
        res[i] = res[i-1] + sz(g);
    }

    FOR(i,1,n) cout << res[i] << " ";
    return 0;
}
