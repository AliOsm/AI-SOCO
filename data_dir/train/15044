#include <bits/stdc++.h>

using namespace std;

#define fi first
#define se second
#define pf push_front
#define pb push_back
#define mk make_pair
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
#define sz(x) (int)x.size()

typedef int64_t ll;
typedef long double ld;

const int Z = 5201;
const int inf = (int) 1e9 + 111;
const ll llinf = (ll) 1e18 + 5;
const int MOD = (int) 1e9 + 7;

template<class T1, class T2>
bool UpdateMin(T1& a, const T2& b) {
  if (a > b) {
    a = b;
    return true;
  }
  return false;
}

template<class T1, class T2>
bool UpdateMax(T1& a, const T2& b) {
  if (a < b) {
    a = b;
    return true;
  }
  return false;
}

template<class T>
ostream& operator<<(ostream& out, const vector<T>& a) {
  for (const auto& it : a) {
    out << it << " ";
  }
  out << "\n";
  return out;
}

template<class T>
istream& operator>>(istream& in, vector<T>& a) {
  for (auto& it : a) {
    in >> it;
  }
  return in;
}

template<class T1, class T2>
ostream& operator<<(ostream& out, const pair<T1, T2>& p) {
  out << '(' << p.first << ", " << p.second << ')';
  return out;
}

class Debug {
 public:
  template<class Container>
  static void Print(const Container& s, const string& message = {}) {
    Print(s, '{', '}', message);
  }

  template<class T>
  static void Print(const vector<T>& a, const string& message = {}) {
    Print(a, '[', ']', message);
  }

 private:
  template<class Container>
  static void Print(const Container& s, char begin_c,
                    char end_c, const string& message) {
    cerr << begin_c;
    bool first = true;
    for (const auto& it : s) {
      if (!first) {
        cerr << ", ";
      }
      first = false;
      cerr << it;
    }
    cerr << end_c;
    if (!message.empty()) {
      cerr << " <--- " << message;
    }
    cerr << "\n";
  }
};

int a[Z][Z], pref[Z][Z];

vector<int> GetDivs(int n) {
  vector<int> divs;
  for (int i = 1; i * i <= n; ++i) {
    if (n % i == 0) {
      divs.pb(i);
      if (i * i != n) {
        divs.pb(n / i);
      }
    }
  }
  return divs;
}

int GetSum(int x1, int y1, int x2, int y2) {
  return pref[x2][y2] - pref[x1 - 1][y2]
      - pref[x2][y1 - 1] + pref[x1 - 1][y1 - 1];
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  mt19937_64 random_generator(228);

  int n;
  cin >> n;
  for (int i = 1; i <= n; ++i) {
    int pos = 1;
    for (int j = 1; j <= n / 4; ++j, pos += 4) {
      char c;
      cin >> c;
      int value;
      if (!isdigit(c)) {
        value = 10 + c - 'A';
      } else {
        value = c - '0';
      }

      for (int t = pos + 3; t >= pos; --t) {
        a[i][t] = value % 2;
        value /= 2;
      }
    }
  }

  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      pref[i][j] = pref[i - 1][j] + pref[i][j - 1] - pref[i - 1][j - 1] + a[i][j];
    }
  }

  vector<int> divs = GetDivs(n);
  // Debug::Print(divs);

  int ans = -1;
  for (const auto& x : divs) {
    bool ok = true;
    for (int pos_x = 1; pos_x <= n; pos_x += x) {
      for (int pos_y = 1; pos_y <= n; pos_y += x) {
        int npos_x = pos_x + x - 1;
        int npos_y = pos_y + x - 1;
        int sum = GetSum(pos_x, pos_y, npos_x, npos_y);
        if (!(sum == 0 || sum == x * x)) {
          ok = false;
        }
      }
    }
    if (ok) {
      UpdateMax(ans, x);
    }
  }
  cout << ans;

  return 0;
}