#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int , int >
#define Endl '\n'
#define endl '\n'

#pragma GCC optimize("Ofast")

using namespace std;
using namespace __gnu_pbds;

template <typename T> using ordered_set = tree <T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 gen(chrono::system_clock::now().time_since_epoch().count());

const ll mod = 1e9 + 7;
const int FFTM = 998244353;

const int SX[4] = {0 , 1 ,  - 1 , 0};
const int SY[4] = {1 , 0 , 0 ,  - 1};
const int rx[8] = {1,  - 1, 0, 0, 1, 1, -1, -1};
const int ry[8] = {0, 0, 1,  - 1, 1,  - 1, 1, -1};
const int kx[8] = {1, 1, -1, -1, 2, 2, -2, -2};
const int ky[8] = {2, -2, 2, -2, 1, -1, 1, -1};

typedef cc_hash_table< int, int, hash<int>, equal_to<int>, direct_mask_range_hashing<int>, hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

void solve(){
    int n;
    cin >> n;
    vector < int > a(n);
    set < int > st;
    for (int  i= 0;i < n; ++i) cin >> a[i],st.insert(a[i]);
    if (st.size() == 1){
        cout << 1 << endl;
        for (int i = 0;i < n; ++i)cout << 1 << " ";
        cout << endl;
        return;
    }
    int tech = 1;
    vector < int > color(n, 0);
    for (int i = 0;i < n; ++i){
        if (!i){
            color[i] = tech;
            continue;
        }
        if (a[i] == a[i - 1])color[i] = color[i - 1];
        else{
            if (tech == 1)tech = 2;
            else tech = 1;
            color[i] = tech;
        }
    }
    if (a[0] != a[n - 1] && color[0] == color[n - 1])color[n - 1] = 3;
//    for (auto to : color)cout << to << " ";
//    cout << endl;
    if (color[n - 1] == 3){
        int kol = 1;
        bool fl = 0;
        for (int i = 1;i < n; ++i){
            if (a[i] == a[i - 1])kol++;
            else{
                if (kol > 1){
                    for (int j = i - 1;j < n; ++j){
                        color[j]++;
                        if (color[j] == 3)color[j] = 1;
                    }
                    color[n - 1] = color[0] + 1;
                    if (color[n - 1] == 3)color[n - 1] = 1;
                    fl = 1;
                    break;
                }else{
                    kol = 1;
                }
            }
        }
        if (!fl && kol > 1){
            color[n - 1] = color[0] + 1;
            if (color[n - 1] == 3)color[n - 1] = 1;
        }
    }
    cout << max(2, color[n - 1]) << endl;
    for (auto to : color)cout << to << " ";
    cout << endl;
}

int32_t main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
    int t;
    cin >> t;
    for (int i = 0;i < t; ++i)solve();
    return 0;
}
