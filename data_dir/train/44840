#include <bits/stdc++.h>

using namespace std;

#define pb(x) push_back(x)
#define all(a) a.begin(),a.end()


int main(){

    int t; cin >> t ;

    while(t--){
        int n , k ; cin >> n >> k ;
        vector<int> a ;
        map<int,int> mx , mi , total ;

        for(int i = 0 ; i < n ; i++){
            int x; cin >> x ;
            a.pb(x) ;
        }

        for(int i = 0 ; i < n / 2 ; i++){
            mx[max(a[i] , a[n - i - 1])]++ ;
            mi[min(a[i] , a[n - i - 1])]++ ;
            total[a[i] + a[n - i - 1]] += 1;
        }

        for(int i = 0 ; i <= k ; i++){
            mi[i] += mi[i - 1] ;
        }

        for(int i = k ; i >= 0 ; i--){
            mx[i - 1] += mx[i] ;
        }
        int ans = 1e9 ;

        for(int i = 2 ; i <= k ; i++){
            int cnt = mi[i - 1] + 2 * (n / 2 - mi[i - 1]) - total[i];
            ans = min(cnt , ans) ;
        }

        for(int i = k + 1 ; i <= 2 * k; i++){
            int cnt = mx[i - k] + 2 * (n / 2 - mx[i - k]) - total[i] ;
            ans = min(ans , cnt) ;
        }

        cout << ans << endl ;
    }
}
/*
int main(){

    int t; cin >> t ;

    while(t--){
        int n ; cin >> n ;
        vector<int> a;

        for(int i = 0 ; i < n;  i++){
            int x; cin >> x;
            a.pb(x) ;
        }

        bool negative = 0 , positive = 0 ;
        int mx = -1 , mi = -1e9 ;
        long long ans = 0 ;

        if(a.front() > 0){
            positive = 1 ;
        }
        else {
            negative = 1 ;
        }

        for(int i = 0 ; i < n ; i++){

            if(positive){
                if(a[i] < 0){
                    swap(negative , positive) ;
                    i-- ;
                    ans += mx ;
                    mx = -1 ;
                    continue ;
                }
                mx = max(mx , a[i]) ;
            }
            else{
                if(a[i] > 0){
                    swap(negative , positive);
                    i--;
                    ans += mi ;
                    mi = -1e9 ;
                    continue ;
                }
                mi = max(mi , a[i]) ;
            }
        }

        if(positive){
            ans += mx ;
        }
        else {
            ans += mi ;
        }

        cout << ans << endl ;
    }
}
*/
/*
void out(vector<int>a){

    for(int i = 0 ; i < a.size() ; i++){
        cout << a[i] << ' ' ;
    }
    cout << endl ;
}
int main(){

    int t; cin >> t ;

    while(t--){
        int n ; cin >> n ;
        vector<int> a;

        if((n / 2) % 2 == 1){
            cout << "NO" << endl ;
            continue;
        }

        cout << "YES" << endl ;
        long long sum = 0 ;
        for(int i = 2 ; a.size() < n / 2; i += 2){
            a.pb(i) ;
            sum += i ;
        }

        for(int i = 1 ; a.size() < n - 1 ; i += 2){
            a.pb(i) ;
            sum -= i ;
        }
        a.pb(sum);

        out(a) ;
    }
}
*/

/*
int main(){

    int t; cin >> t ;

    while(t--){
        int n; cin >> n ;
        long long sum = 1 ;

        for(int i = 2 ; i ; i *= 2){
            sum += i ;
            if(n % sum == 0){
                cout << n / sum << endl ;
                break ;
            }
        }
    }
}
*/
/*int dp[1000010] , to[1000100] , n , m ;

int location(char dir , int x , int y){

    if(dir == 'L'){
        return (x - 1) * m + (y - 1) ;
    }
    else if(dir == 'R'){
        return (x - 1) * m + (y + 1) ;
    }
    else if(dir == 'U'){
        return (x - 2) * m + y ;
    }
    else {
        return x * m + y ;
    }
}
int main(){

    int t; cin >> t ;

    while(t--){
        cin >> n >> m ;
        vector< vector<char > > colors ;

        for(int i = 0 ; i <= n ; i++){
            vector<char> x;
            for(int j = 0 ; j <= m ; j++){
                x.push_back('0') ;
            }
            colors.push_back(x) ;
        }

        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= m ; j++){
                cin >> colors[i][j] ;
            }
        }

        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= m ; j++){
                char x ; cin >> x ;
                to[(i - 1) * m + j] = location(x , i , j);
            }
        }

        for(int depth = 1 ; depth <= 30 ; depth++){

            for(int i = 1 ; i <= n * m ; i++){
                dp[i] = to[to[i]] ;
            }
            for(int i = 1 ; i <= n * m ; i++){
                to[i] = dp[i] ;
            }
        }

        map<int , int> mp , black ;

        int ans  = 0 ;
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= m ; j++){
                mp[dp[(i - 1) * m + j]] += 1 ;
                black[dp[(i - 1) * m + j]] += (colors[i][j] == '0');
            }
        }

        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= m ; j++){
                if(black[(i - 1) * m + j] > 0){
                    ans += 1 ;
                }
            }
        }

        cout << mp.size() << " " << ans << endl ;
    }
}
*/
/*int pref[201][200200];
int main(){
    int t; cin >> t;
    while(t--){
        int n ; cin >> n ;
        vector<int> a;
        for(int i = 0 ; i < n ; i++){
            int x; cin >> x;
            a.pb(x) ;
            pref[x][i + 1] = 1 ;
        }

        for(int i = 0 ; i <= 200 ; i++){
            for(int j = 1 ; j <= n ; j++){
                pref[i][j] += pref[i][j - 1] ;
            }
        }
        int ans = 0 ;
        for(int i = 1 ; i <= n ; i++){
            int val = a[i - 1] , l = i  , r = n , cnt = pref[a[i - 1]][i] ;

            while(r - l > 2){
                int mid = (l + r) / 2 ;
                int num = pref[val][n] - pref[val][mid] ;
               // cout << num << " " << cnt << " " << l << " " << r << endl ;
                if(num >= cnt){
                    l = mid;
                }
                else{
                    r = mid - 1;
                }
            }
            int num ;
            for(int j = l ; j <= r ; j++){
                 num = pref[val][n] - pref[val][j] ;
                 if(num == cnt){
                     l = j ;
                 }
            }

            num = pref[val][n] - pref[val][l] ;
            if(num != cnt){
                continue ;
            }

            for(int j = 1 ; j <= 200; j++){
                ans = max(ans , num + cnt + pref[j][l] - pref[j][i]) ;
            }
        }

        for(int j = 1 ; j <= 200; j++){
            ans = max(ans , pref[j][n] - pref[j][0]) ;
        }

        cout << ans << endl ;

        for(int i = 0 ; i <= 200 ; i++){
            for(int j = 0 ; j <= n ; j++){
                pref[i][j] = 0 ;
            }
        }

    }
}
*/
/*
#define hash_mod 2305843009213717
#define mod7 1000000007
#define mod9 1000000009
#define mod2 30000000
#define pa(a,b) make_pair(a,b)
#define f first
#define s second
#define pb(a)  push_back(a)
#define all(a) a.begin() , a.end()
#define mem(a, b) memset(a, b, sizeof(a))
#define LL  long long int
#define oo 1e9
#define pi 3.141592653589793238
#define eps  1e-6



LL maxx(LL & a , LL & b){ return a>b ?  a : b ;}
LL minn(LL & a , LL & b){ return a>b ?  b : a ;}

using namespace std;
//int dx[] = {1 , -1 , 0 , 0} ;
//int dy[] = {0 , 0 , 1 , -1} ;
void boostIO(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
}
LL gcd(LL a, LL b) {
    return b == 0 ? a : gcd(b, a % b);
}
int int_gcd(int a, int b) {
    return b == 0 ? a : int_gcd(b, a % b);
}
LL lcm(LL a , LL b )
{
    return a / gcd(a , b) * b;
}
LL poww(LL base, LL exp , LL mod){
  base %= mod;
  LL result = 1;
  while (exp > 0) {
    if (exp & 1) result = (result * base) % mod;
    base = (base * base) % mod;
    exp >>= 1;
  }
  return result;
}
#define dim 4
char a[5][5] , plays[] = {'x' , 'o'} ;
bool vis[5][5] ;
int dp[43046722][3] , pw[20] , id[5][5] ;
void initial(){
    pw[0] = 1 ;

    for(int i = 1 ; i <= dim * dim ; i++){
        pw[i] = 3 * pw[i - 1] ;
    }

    int key = 0 ;

    for(int i = 1 ; i <= dim ; i++){
        for(int j = 1 ; j <= dim ; j++){
            id[i][j] = key++ ;
        }
    }

    return ;
}
bool out_of_bounds(int x , int y){
    return !(x >= 1 && x <= dim && y >= 1 && y <= 4) ;
}
bool check(){

    for(int i = 1 ; i <= dim ; i++){ /// 3 in a row
        for(int j = 1 ; j <= dim - 2 ; j++){
            if(!vis[i][j])
                continue ;
            bool yes = 1 ;  char tmp = a[i][j] ;
            for(int k = 1 ; k < 3 ; k++){
                if(tmp != a[i][j + k]){
                    yes = 0 ;
                    break ;
                }
            }
            if(yes){
                return true ;
            }
        }
    }

    for(int i = 1 ; i <= dim ; i++){ /// 3 in a col
        for(int j = 1 ; j <= dim - 2 ; j++){
            if(!vis[j][i])
                continue;
            bool yes = 1 ;  char tmp = a[j][i] ;
            for(int k = 1 ; k < 3 ; k++){
                if(tmp != a[j + k][i]){
                    yes = 0 ;
                    break ;
                }
            }
            if(yes){
                return true ;
            }
        }
    }

    int dx[] = {1 , 1 , -1 , -1} ;
    int dy[] = {1 , -1 , -1 , 1} ;

    for(int i = 1 ; i <= dim ; i++){ // diagonal
        for(int j = 1 ; j <= dim; j++){
            if(!vis[i][j]){
                continue ;
            }
            char tmp = a[i][j] ;
            for(int k = 0 ; k < 4 ; k++){
                int x = i , y = j ; bool yes = 1 ;
                for(int c = 0 ; c < 3 ; c++){
                    if(out_of_bounds(x , y) || tmp != a[x][y]){
                        yes = 0 ;
                        break ;
                    }
                    x += dx[k] , y += dx[k] ;
                }
                if(yes){
                    return 1 ;
                }
            }
        }
    }

    return 0 ;
}
bool no_more(){
    for(int i = 1 ; i <= dim ; i++){
        for(int j = 1 ; j <= dim ; j++){
            if(!vis[i][j]){
                return 0 ;
            }
        }
    }

    return 1 ;
}
int solve(int msk , int turn , int depth){

    if(check()){
        return 3 - turn ;
    }

    if(no_more()){
        return 0 ;
    }
    int & ret = dp[msk][turn] ;

    if(~ret){
        return ret ;
    }
    bool okay = 0 ;
    for(int i = 1 ; i <= dim ; i++){
        for(int j = 1 ; j <= dim ; j++){
            if(!vis[i][j]){

                a[i][j] = plays[turn - 1] ;

                vis[i][j] = 1 ;

                int new_msk = msk + (pw[id[i][j]]) * turn ;

                int result = solve(new_msk , 3 - turn , depth + 1) ;
                if(result == 0){
                    okay = 1 ;
                }
                if(depth){
                    a[i][j] = '.' ;
                    vis[i][j] = 0 ;
                }

                if(result == turn){
                    return turn ;
                }

                a[i][j] = '.' ;
                vis[i][j] = 0 ;
            }
        }
    }

    return (okay ? 0 : 3 - turn) ;
}
void prints_cur(int cnt){
    printf("Current game %d : \n" , cnt) ;
    for(int i = 1 ; i <= dim ; i++){
        for(int j = 1 ; j <= dim ; j++){
            cout << a[i][j] ;
        }
        putchar('\n') ;
    }
    return ;
}
int main()
{
    initial() ;

    int msk = 0 ;

    mem(dp , -1) ;
    mem(a , '.') ;
    int game_cnt = 0 ;
    while(!check()){
        /// t takes 1 for x and 2 for o ;

        int r = solve(msk , 1 , 0) ; /// 1 for the first player and 2 for the second one

        prints_cur(++game_cnt) ;

        if(check()){
            puts("I Won!") ;
            return 0 ;
        }

        int x , y ;  cin >> x >> y ;
        while(out_of_bounds(x , y) || vis[x][y]){
            cout << "x and y must be between 1 to " << dim << " inclusive." << endl ;
            cin >> x >> y;
        }
        a[x][y] = plays[1] ;
        vis[x][y] = 1 ;
        msk = msk + pw[id[x][y]] * 2 ;
        prints_cur(++game_cnt) ;
    }
}
/*
bool prime[200200] ;
vector<pair<int , int> >a[200200] ;
int n ;
bool vis[200200] ;
void initial(){

    for(int i = 2 ; i <= 100000 ; i++){
        if(prime[i]){
            continue ;
        }
        for(int j = i + i ; j <= 100000 ; j += i){
            prime[j] = 1 ;
        }
    }
    return ;
}

long long int dfs(int node){

    vis[node] = 1 ;
    long long int res = 0 ;
    for(int i = 0 ; i < a[node].size() ; i++){
        if(!vis[a[node][i].f]){
            res += a[node][i].s + dfs(a[node][i].f) ;
        }
    }

    return res ;
}
int main(){
    int n ; cin >> n ;
    initial() ;
    for(int i = 0 ; i < n - 1; i++){
        int u , v , w ; cin >> u >> v >> w ;
        if(prime[w]){
            continue ;
        }
        a[u].pb(make_pair(v , w))  , a[v].push_back(make_pair(u , w));
    }

    long long int ans = 0 ;
    for(int i = 1 ; i <= n ; i++){
        if(!vis[i]){
            ans = max(dfs(i) , ans) ;
        }
    }

    cout << ans << endl ;
}
*/
/*
const int N = 2002000 ;
vector<int> factors[N];

void initi(){
    for(int i = 2 ; i < N ; i++){
        if(!factors[i].empty()){
            continue ;
        }
        for(int j = i ; j <= N ; j += i){
            factors[j].push_back(i) ;
        }
    }

    return ;
}
int main(){ // Unusual Currency problem Solution
    int t; cin >> t ;
    initi() ;
    while(t--){

        int n ; cin >> n ;

        for(int i = 0 ; i < n ; i++){
            int x; cin >> x ;
            int tmp = x ;
            for(int j = 0 ; j < factors[x].size() ; j++){
                while(tmp % factors[x][j] == 0)
                    printf("%d " , factors[x][j])  , tmp /= factors[x][j];
            }
            puts("\n") ;
        }
    }
}
*/
/*
int main(){
    int n ; cin >> n ;

    vector<int> a ;

    for(int i = 0 ; i < n ; i++){
        int x; cin >> x ;
        a.push_back(x) ; cnt[x] += 1 ;
    }

    sort(all(a));

    map<int , bool> mp ; vector<int> distinct ;

    for(int i = 0 ; i < n ; i++){

        if(mp[a[i]]){
            continue ;
        }
        distinct.push_back(a[i]) ;
        mp[a[i]] = 1 ;
    }
    int mi = distinct.size() ;
    for(int i = 0 ; i < (int)distinct.size() - 2 ; i++){
        if(distinct[i + 1] - distinct[i] == 1){
            mi -= 1 ;
            i += 1 ;
            if(distinct[i + 1] - distinct[i] == 1){
                mi -= 1 ;
                i += 1 ;
            }
        }
    }

    int siz = distinct.size() ;

    if(distinct[siz - 2] - distinct[siz - 3] != 1){
        if(distinct[siz - 1] - distinct[siz - 2] == 1){
            mi -= 1 ;
        }
    }

    if(distinct.size() == 2){
        if(distinct[1] - distinct[0] == 1){
            mi = 1 ;
        }
        else {
            mi = 2 ;
        }
    }

    cout << mi << ' ' ;

    int mx = distinct.size() ;
    for(int i = 0 ; i < distinct.size() ; i++){

        int val = distinct[i] ;
        if(cnt[val] == 1){
            cnt[val - 1] = 1 ;
            cnt[val] = 0 ;
        }
        else if(cnt[val] == 2){
            if(cnt[val + 1] == 1 && cnt[val + 2] == 0){
                cnt[val + 1] = 2 ; cnt[val] = 1 ;
                continue ;
            }

            if(cnt[val + 1] == 0){
                cnt[val + 1] = 1 ;
                cnt[val] -= 1 ;
                mx += 1 ;
            }
            else if(cnt[val - 1] == 0){
                cnt[val - 1] = 1 ;
                cnt[val] -= 1 ;
                mx += 1 ;
            }
        }
        else {
            mx += (cnt[val - 1] == 0) + (cnt[val + 1] == 0) ;
            cnt[val - 1] += 1 ; cnt[val + 1] += 1 ;
        }
    }


    cout << mx << endl;
}
*/

/*
int main(){
    int n , m ; cin >> n >> m ;
    vector<int> del[300200] ;
    int inf = 250000 ;
    vector<int> a ;
    set<int> s ;
    for(int i = 0 ; i < n ; i++){
        int tmp ; cin >> tmp ;
        vis[tmp] = 1 ;
        a.pb(tmp) ;  s.insert(tmp) ;
    }

    sort(all(a)) ;

    for(int i = 0 ; i < n ; i++){
        int l = 0 , r = 0 ;
        if(i == 0){
            l = inf ;
            r = min(inf , abs(a[i] - a[i + 1]) - 1) ;
        }
        else if(i == n - 1){
            r = inf ;
            l = min(inf , abs(a[i] - a[i - 1]) - 1) ;
        }
        else {
            l = min(inf , abs(a[i] - a[i - 1]) - 1) ;
            r = min(inf , abs(a[i] - a[i + 1]) - 1) ;
        }

        del[max(l , r)].push_back(a[i]) ;
    }

    long long int dist = 1 , total = 0 ,  add = 0 ;
    vector<int> ans ;

    while(add < m){
        for(int j = 0 ; j < del[dist - 1].size() ; j++){
            set<int> :: iterator tmp = s.find(del[dist - 1][j]) ;
            s.erase(tmp) ;
        }

        set<int> :: iterator it = s.begin() ;

        for(;it != s.end() ; it++){
            int pos = *it ;

            if(!vis[pos - dist]){
                vis[pos - dist] = 1 ;
                total += dist ;
                add += 1 ;
                ans.push_back(pos - dist) ;
            }

            if(add < m && !vis[pos + dist]){
                vis[pos + dist] = 1 ;
                total += dist ;
                add += 1 ;
                ans.push_back(pos + dist) ;
            }

            if(add >= m){
                break ;
            }
        }

        dist += 1 ;
    }

    cout << total << endl ;

    for(int i = 0 ; i < ans.size() ; i++){
        cout << ans[i] << ' ' ;
    }
*/
/*
int main(){ // Problem

    int t; cin >> t ;

    while(t--){

        int h , m ; cin >> h >> m ;

        int ans = (23 - h) * 60 + 60 - m ;

        cout << ans << endl ;
    }

}
*/
/*
int main(){ // Problem B

    int t; cin >> t;

    while(t--){
        int n , k ; cin >> n >> k ;

        int each = n / k , mi = k / 2 , rem = n % k ;

        cout << each * k + min(mi , rem) << endl ;
    }
}
*/
/*vector<int> factors(int x){

    vector<int>res ;

    int div = 2 ;

    while(div * div <= x){

        while(x % div == 0){
            res.pb(div) ;
            x /= div ;
        }
        div += 1 ;
    }

    if(x != 1){
        res.pb(x) ;
    }

    sort(all(res)) ;

    return res ;
}
int main()
{
    int t; cin >> t;

    while(t--){

        int n ; cin >> n ;

        vector<int> factor = factors(n) ;
        map<int , bool> mp ;
        for(int i = 0 ; i < factor.size() ; i++){
            mp[factor[i]] = 1;
        }
        if(factor.size() <= 2){
            cout << "NO" << endl ;
        }
        else if(factor.size() == 3){
            if(factor[0] != factor[1] && factor[1] != factor[2]){
                cout << "YES" << endl ;
                cout << factor[0] << ' ' << factor[1] << ' ' << factor[2] << endl ;
            }
            else{
                cout << "NO" << endl ;
            }
        }
        else{
            int a = factor[0] , b = factor[1] * factor[2] ;
            int c = 1 ;
            for(int i = 3 ; i < factor.size() ; i++){
                c *= factor[i] ;
            }

            if(a != b && b != c && a != c){
                cout << "YES" << endl ;
                cout << a << ' ' << b << ' ' << c << endl ;
                continue ;
            }

            a = factor[0] * factor[1] , b = factor[2] ;
            c = 1 ;
            for(int i = 3 ; i < factor.size() ; i++){
                c *= factor[i] ;
            }

            if(a != b && b != c && a != c){
                cout << "YES" << endl ;
                cout << a << ' ' << b << ' ' << c << endl ;
            }
            else {
                cout << "NO" << endl ;
            }

        }

    }
}*/
/*#include <bits/stdc++.h>

using namespace std;

#define pb(x) push_back(x)
#define all(a) a.begin(),a.end()

set<int>s;

int  dx[] = {-1 , -1 , -1 , 0 , 1 , 1 , 1 , 0} ;
int  dy[] = {-1 , 0 , 1 , 1 , 1 , 0 , -1 , -1} ;

bool image[1080][1920] = {0} ;

void dfs(int x , int y){

    s.insert(x * 1080 + y) ;

    for(int i = 0 ; i < 8 ; i++){
        int xx = x + dx[i] ;
        int yy = y + dy[i] ;

        if(xx >= 0 && xx < 1080 && yy >= 0 && yy < 1920 && image[xx][yy] && s.find(xx * 1080 + y) == s.end()){
                dfs(xx , yy) ;
        }
    }


}
int main()
{
    freopen("img1.txt" , "r" , stdin) ;


    for(int i = 0 ; i < 1080 ; i++){
        for (int j = 0 ; j < 1920 ; j++){
                cin >> image[i][j] ;
        }
    }

    int cnt = 0 ;

    for(int i = 0 ; i < 1080 ; i++){
        for(int j = 0 ; j < 1920 ; j++){
            if(image[i][j]){
                cnt += 1 ;
            }
        }
    }

    int comp = 0 ;

    for(int i = 0 ; i < 1080 ; i++){
        for(int j = 0 ; j < 1920 ; j++){
            int idx = i * 1080 + j ;

            if(s.find(idx) == s.end() && image[i][j]){
                dfs(i , j) ;
                comp += 1 ;
                cout << comp << endl ;
            }
        }
    }

    cout << comp << endl ;

}
*/
/*#include <bits/stdc++.h>

using namespace std;

#define pb(x) push_back(x)
#define all(a) a.begin(),a.end()

int main()
{
    //freopen("read.txt" , "r" , stdin) ;
    //freopen("out.txt" , "w" , stdout) ;
    vector<string>names ;
    string s;

    while(getline(cin , s)){
            names.push_back(s) ;
    }
    map<string , int> mp ;
    for(int i = 0 ; i < names.size() ; i++){

        string tmp = "" ;
        int cnt = 0 ;
        for(int j = 0 ; j < names[i].size() ; j++){
            if(names[i][j] == ' '){
                mp[tmp] = 1 ;
                tmp = "" ;
                continue ;
                cnt += 1 ;
            }
            if(cnt == 100){
                break ;
            }
            tmp += names[i][j] ;
        }
        names[i] = tmp ;
    }

    cout << mp.size() << endl ;

    map<string , int> :: iterator  it = mp.begin() ;


    for(; it != mp.end() ; it++){
        string s = it -> first ;
        cout << s << endl ;
    }
    for(int i = 0 ; i < names.size() ; i++){
        for(int j = i + 1 ; j < names.size() ; j++){
            if(names[i] == names[j]){
                cout << i << ' ' << names[i] << "   " << j << names[j] << endl ;
            }
        }
    }

}
*/
/* Problem B  div2-607

#include <bits/stdc++.h>

using namespace std;

#define pb(x) push_back(x)
#define all(a) a.begin(),a.end()
int main()
{
    int t; cin >> t ;

    while(t--){
        string s , c ; cin >> s >> c ;

        pair<char , int>pos[5005]; pos[(int)s.size()] = make_pair('Z' , 100000) ;

        for(int i = (int)s.size() - 1 ; i >= 0 ; i--){
            pos[i] = min(pos[i + 1] , make_pair(s[i] , i)) ;
        }

        if(s < c){
            cout << s << endl ;
            continue ;
        }
        bool ans = 0 ;
        for(int i = 0 ; i < s.size() ; i++){
            if(i == c.size()){
                break ;
            }
            if(pos[i].first < c[i]){
                swap(s[i] , s[pos[i].second]) ;
                ans = 1 ;
                break ;
            }
        }

        cout << (ans ? s : "---") << endl ;
    }
}

*/

/* Problem A  div2-607

#include <bits/stdc++.h>

using namespace std;

#define pb(x) push_back(x)
#define all(a) a.begin(),a.end()
int main()
{
    int t; cin >> t ;

    while(t--){
        string s; cin >> s ;

        int n = s.size() ;

        if(s.substr(n - 2 , 2) == "po"){
            cout << "FILIPINO" << endl ;
        }
        else if(s.substr(n - 4 , 4) == "masu" || s.substr(n - 4 , 4) == "desu"){
            cout << "JAPANESE" << endl ;
        }
        else {
            cout << "KOREAN" << endl ;
        }
    }
}

*/

/* Problem D  div2-603
#include <bits/stdc++.h>

using namespace std;

#define pb(x) push_back(x)
#define all(a) a.begin(),a.end()
bool vis[200] ;
vector<int> a[200] ; bool fnd[200] = {0} ;
void dfs(int root){

    if(vis[root]){
        return ;
    }
    vis[root] = 1 ;
    for(int i = 0 ; i < a[root].size() ; i++){

        if(!vis[a[root][i]]){
            dfs(a[root][i]) ;
        }
    }

    return ;
}
int main()
{
    int t; t = 1 ;

    while(t--){
        int n ; cin >> n ;
        vector<string> s ;
        for(int i = 0 ; i < n ; i++){
            string x; cin >> x;
            s.pb(x) ;
        }


        for(int i = 0 ; i < n ; i++){
            vector<char> available ;  bool found[200] = {0}  ;

            for(int j = 0 ; j < s[i].size() ; j++){
                if(!found[s[i][j]]){
                    found[s[i][j]] = 1 ; fnd[s[i][j]] = 1 ;
                    available.pb(s[i][j]) ;
                }
            }

            for(int j = 0 ; j < available.size() ; j++){
                for(int k = j + 1 ; k < available.size() ; k++){
                    int u = available[j] , v = available[k] ;
                    a[u].pb(v) ; a[v].pb(u) ;
                }
            }
        }

        int ans = 0 ;

        for(int i = 'a' ; i <= 'z' ; i++){
            if(fnd[i] && !vis[i]){
                dfs(i) ;
                ans += 1 ;
            }
        }

        cout << ans << endl ;
    }
}

*/

/* Problem C  div2-603

#include <bits/stdc++.h>

using namespace std;

#define pb(x) push_back(x)
#define all(a) a.begin(),a.end()

int main()
{
    int t; cin >> t ;

    while(t--){
            long long int n ; cin >> n ;

            set<int> ans ; ans.insert(0);
            for(int i = 1 ; i * i <= n ; i++){
                int res = n / i ;

                if(n / res == i){
                    ans.insert(i) ; ans.insert(res) ;
                }
            }

            set<int> :: iterator it = ans.begin() ;

            cout << ans.size() << endl ;

            for(; it != ans.end() ; it++){
                cout << *it << ' ' ;
            }
            putchar('\n') ;
    }
}

*/

/* Problem B  div2-603

#include <bits/stdc++.h>

using namespace std;

#define pb(x) push_back(x)
#define all(a) a.begin(),a.end()

int main()
{
    int t; cin >> t ;

    while(t--){
        int n ; cin >> n ;

        map<string , int> mp ;

        vector<string> s ;

        for(int i = 0 ; i < n ; i++){
            string x ; cin >> x;
            s.pb(x) ; mp[x]+= 1 ;
        }
        int ans = 0 ;

        for(int i = 0 ; i < n ; i++){
            if(mp[s[i]] > 1){
                ans += 1 ;
                for(int j = 0 ; j < 4 ; j++){
                    bool flag = 0 ;
                    for(int k = 0 ; k < 10 ; k++){
                        string tmp = s[i] ;
                        tmp[j] = k + '0' ;
                        if(mp[tmp] == 0){
                            mp[tmp] = 1 ;
                            mp[s[i]] -= 1 ;
                            s[i] = tmp ;
                            flag = 1 ;
                            break ;
                        }
                    }
                    if(flag){
                        break ;
                    }
                }
            }
        }

        cout << ans << endl;

        for(int i = 0 ; i < n ; i++){
            cout << s[i] << endl ;
        }
    }
}

*/

/* Problem A div2-603
#include <bits/stdc++.h>

using namespace std;

#define pb(x) push_back(x)
#define all(a) a.begin(),a.end()
int main()
{
    int t; cin >> t ;

    while(t--){
        vector<int> a;

        for(int i = 0 ; i < 3 ; i++){
            int x; cin >> x ;
            a.push_back(x) ;
        }

        sort(all(a)) ;

        int ans = min(a[0] + a[1] , a[2]) ;

        if(a[2] < a[0] + a[1]){
            ans += ((a[0] + a[1] - a[2]) / 2) ;
        }

        cout << ans << endl ;
    }
}
*/
