#include <iostream>
#include <string>
#include <ctime>
#include <cstring>
#include <deque>
#include <cstdio>
#include <fstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#define ll long long
#define fname ""
#define F first
#define S second
#define mod 1000000
#define INF 1000000000
#define mp make_pair
#define pb push_back 

using namespace std;

const int N = 1e5 + 123;

const int inf = 1e9;

int lg[N], n, s, l, a[N], nx[N], t[2][20][N], d[N];

int get (int l, int r)
{
	int len = lg[r - l + 1];
	int mx = max (t[1][len][l], t[1][len][r - (1 << len) + 1]);
	int mn = min (t[0][len][l], t[0][len][r - (1 << len) + 1]);
	return mx - mn;
}

int main ()
{
//	freopen (fname".in", "r", stdin);
//	freopen (fname".out", "w", stdout);
	scanf ("%d%d%d", &n, &s, &l);
	for (int i = 1;i <= n;i ++)
	{
		scanf ("%d", &a[i]);
	    d[i] = inf;
		t[0][0][i] = t[1][0][i] = a[i];
		if (i > 1)                
			lg[i] = lg[i >> 1] + 1;
	}
	for (int i = 1;i <= lg[n];i ++)
		for (int j = 1;j + (1 << lg[i]) - 1 <= n;j ++)
		{
			t[0][i][j] = min (t[0][i - 1][j], t[0][i - 1][j + (1 << (i - 1))]);
			t[1][i][j] = max (t[1][i - 1][j], t[1][i - 1][j + (1 << (i - 1))]);				
		}
	for (int i = 1;i <= n;i ++)
	{                                                 
		int l = i, r = n, mid;
		while (r - l > 1)
		{
			mid = (l + r) >> 1;
			if (get (i, mid) <= s)
			 	l = mid;
			else
				r = mid;
		}
		if (get (i, r) <= s)
			nx[i] = r;
		else
			nx[i] = l;	
	}
	int last = n + 1;
	for (int i = n - l + 1;i >= 1;i --)	
	{	
		if (nx[i] >= last && last - i + 1 >= l)
			d[i] = d[i + 1];
		if (nx[i] >= i + l - 1 && d[i] >= d[i + l] + 1)
		{
			last = i + l - 1;
			d[i] = d[i + l] + 1;
		}
	}
	if (d[1] < inf)
		printf ("%d", d[1]);
	else
		puts ("-1");	
	return 0;
}   		    