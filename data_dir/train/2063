#define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define N 5300

char foo[N];
int n;
bool a[N][N];
int DP[N][N];
vector<int> facts;

int getDecimal(char val){
	if (val >= '0' && val <= '9') return val - '0';
	return val - 'A' + 10;
}

int getSquare(int x1, int y1, int k){
	int x2 = x1 + (k - 1), y2 = y1 + (k - 1);
	int sum = DP[x2][y2];
	sum -= DP[x1 - 1][y2];
	sum -= DP[x2][y1 - 1];
	sum += DP[x1 - 1][y1 - 1];
	if (sum == 0) return 0;
	if (sum == k * k) return 1;
	return -1;
}

int main(){
//	freopen("in.in", "r", stdin);
//	freopen("out.out", "w", stdout);
	//ios::sync_with_stdio(0);
	//cin.tie();
	//cout.tie();

	scanf("%d", &n);
	for (int i = 0; i < n; i++){
		scanf("%s", foo);
		string s(foo);
		for (int j = 0; j < n / 4; j++){
			int val = getDecimal(s[j]);
			int J = j * 4;
			for (int k = J + 3; k >= J; k--){
				a[i + 1][k + 1] = val % 2;
				val /= 2;
			}
		}
	}
	for (int i = 1; i * i <= n; i++){
		if (n % i != 0) continue;
		facts.push_back(i);
		if (n / i != i) facts.push_back(n / i);
	}
	sort(facts.begin(), facts.end(), greater<int>());
	for (int i = 1; i <= n; i++){
		for (int j = 1; j <= n; j++){
			DP[i][j] = DP[i - 1][j] + DP[i][j - 1] - DP[i - 1][j - 1] + a[i][j];
		}
	}
	for (int u = 0; u < (int)facts.size(); u++){
		int k = facts[u];
		int ok = 1;
		for (int i = 1; i <= n && ok; i += k){
			for (int j = 1; j <= n && ok; j += k){
				int val = getSquare(i, j, k);
				if (val == -1) ok = 0;
			}
		}
		if (ok){
			printf("%d\n", k);
			return 0;
		}
	}
	assert(0);

	return 0;
}