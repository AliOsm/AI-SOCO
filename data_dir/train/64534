#include <bits/stdc++.h>
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
 
#define pb push_back
#define mp make_pair
#define fir first
#define sec second
#define ll long long
#define ull unsigned long long
 
typedef tree<
        int,
        null_type,
        less<int>,
        rb_tree_tag,
        tree_order_statistics_node_update>
        ordered_set;
        
ll MOD=1e9+7;
ll mod=998244353;
int INF=1e9+7;
 
ll binpow (ll a, ll n) {
	if (n == 0)
		return 1;
	if (n % 2 == 1)
		return (binpow (a, n-1) * a) % MOD;
	else {
		int b = binpow (a, n/2)% MOD;
		return (b * b) % MOD;
	}
}
 
pair<int,ll> rev(pair<ll,int> x)
{
    return mp(x.sec,x.fir);
}

int lis(vector<int> &a)
{
    int n=a.size();
    vector<int> d(n+1,1e9+7);
    d[0]=0;
    for (int i=0;i<n;i++)
    {
        int j=(int)(upper_bound(d.begin(),d.end(),a[i])-d.begin());
        //if (d[j-1]<a[i]&&a[i]<d[j])
        {
            d[j]=a[i];
            //cout<<i;
        }
    }
    for (int i=n;i>=0;i--)
        if (d[i]<1e9+7) return i;
}

bool is_prime(int x)
{
    if (x==2) return 1;
    for (int i=2;i*i<=x;i++)
        if (x%i==0) return 0;
    return 1;
}

ll divider(ll a, ll b)
{
	ll x=mod-2;
	while(x)
	{
		if (x&1)
			a=(a*b)%mod;
		b=(b*b)%mod;
		x>>=1;
	}
	return a;
}

int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int n,mx[200005];
    vector<int> mx1,mn1,f1,mn2,mx2;
    cin>>n;
    int good=0;
    for (int i=0;i<n;i++)
    {
        int k,mn=1e9+7,mx=0;
        int f=0;
        cin>>k;
        vector<int> a;
        for (int j=0;j<k;j++)
        {
            int cur;
            cin>>cur;
            if (cur>mn)
            {
                f=1;
            }
            mn=min(mn,cur);
            mx=max(mx,cur);
            a.pb(cur);
        }
        mx1.pb(mx); mn1.pb(mn); f1.pb(f);
        good+=f;
    }
    //mn2=mn1;
    //sort(mn1.begin(),mn1.end());
    ll ans=0,add=0;
    for (int i=0;i<n;i++)
    {
        if (f1[i]) {ans+=2*n-good; add++; continue;}
        mn2.pb(mn1[i]); mx2.pb(mx1[i]);
    }
    //ans-=add;
    sort(mn2.begin(),mn2.end());
    for (int i=0;i<mn2.size();i++)
    {
        //if (f1[i]) {ans+=n; continue;}
        int k=(int)(lower_bound(mn2.begin(),mn2.end(),mx2[i])-mn2.begin());
        ans+=k;
        //cout<<k<<" ";
    }
    cout<<ans;
    return 0;
}
/*
0 0 0
0 0 1
0 1 0
1 0 0
*/
//6 19 3 4 4 2 6 7 8
//2 3 4 4 6 6 7 8 19