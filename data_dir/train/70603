#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(int i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) ((n%m + m) % m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

const int N = (1 << 21) + 100;
int n, m;

int arr[N];
ll lev[N], levnrm[N], inv[4 * N], nrm[4 * N];
vi tree[4 * N];

void build(int node, int st, int en, int level)
{
	if (st > en)
		return;

	if (st == en)
	{
		tree[node].push_back(arr[st]);
		return;
	}

	int mid = (st + en) / 2;
	build(2 * node, st, mid, level + 1);
	build(2 * node + 1, mid + 1, en, level + 1);

	merge(all(tree[2 * node]), all(tree[2 * node + 1]),
			back_inserter(tree[node]));

	for (auto x : tree[2 * node])
	{
		inv[node] += lower_bound(all(tree[2 * node + 1]), x)
				- tree[2 * node + 1].begin(); // kam 7aga asghar menni
		nrm[node] += tree[2 * node + 1].end()
				- upper_bound(all(tree[2 * node + 1]), x); // kam 7aga akbar menni
	}

	lev[level] += inv[node];
	levnrm[level] += nrm[node];
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n;
	rep(i, 0, (1<<n))
		cin >> arr[i];

	build(1, 0, (1 << n) - 1, 0);

	cin >> m;
	while (m--)
	{
		int q;
		cin >> q;
		q = n - q;
		erep(i, q, n)
			swap(lev[i], levnrm[i]);
		ll res = 0;
		erep(i, 0, n)
			res += lev[i];
		cout << res << endl;
	}

	return 0;
}
