#define _CRT_SECURE_NO_WARNINGS
 
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <queue>
#include <stack>
#include <deque>
#include <time.h>
 
using namespace std;
 
#define forn(i,n) for (int i = int(0); i < int(n); i++)
#define forb(i,n) for (int i = int(n-1); i >= int(0); i--)
#define for1(i,n) for (int i = int(1); i <= int(n); i++)
#define fore(i,a,n) for (int i = int(a); i < int(n); i++)
 
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sz size()
#define sqr(x) ((x)*(x))
#define cube(x) ((x)*(x)*(x))
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define min3(a, b, c) min(a, min(b, c))
#define max3(a, b, c) max(a, max(b, c))
#define dist(x1, y1, x2, y2) sqrt(ld (sqr(x1 - x2) + sqr(y1 - y2)))
   
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
  
const int maxn = 1005;
const int MAXN = 30001;
const int logn = 20;
const int inf = (int) 1e9;
const int alpha = 26;
const int my_hash = 31;
const long long base = (ll) 1e9;
const long long my_mod = 2674894331;
const long long l_inf = (ll) 4e18;
const long long mod = (ll) 1e9 + 7;
const long long l_mod = (ll) 1e18 - 11;
const double fi = (sqrt(5.0) + 1) / 2.0;
const double pi = acos(-1.0);
const double eps = 1e-10;
const double EPS = 0.00005;

int main() {
	ios_base::sync_with_stdio(0);
	srand(time(NULL));
	int n;
	scanf("%d ", &n);
	vector<int> cnt(10);
	for (int i = 0; i < n; i++) {
		int k;
		scanf("%d ", &k);
		cnt[k]++;
	}
	if (cnt[5] > 0 || cnt[7] > 0) {
		printf("-1");
		exit(0);
	}
	if (cnt[1] * 3 != n || cnt[4] + cnt[6] != cnt[2] + cnt[3] || cnt[2] < cnt[4]) {
		printf("-1");
		exit(0);
	}
	vector<vector<int> > ans(n / 3, vector<int> (3));
	for (int i = 0; i < n / 3; i++) {
		ans[i][0] = 1;
		ans[i][1] = i < cnt[2] ? 2 : 3;
		ans[i][2] = i < cnt[4] ? 4 : 6;
		printf("%d %d %d\n", ans[i][0], ans[i][1], ans[i][2]);
	}
}