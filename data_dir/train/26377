#include <bits/stdc++.h>

using namespace std;

typedef long long li;

struct zp
{
    li l, r, id;
};


li const N = 2 * 100 * 1000 + 20;
li const MAXN = 100 * 100 * 100 + 20;

li a[N];
li cnt[MAXN];
li len;
li out[N];

bool operator<(const zp&a, const zp&b)
{
    if (a.l / len != b.l / len) {
        return a.l / len < b.l / len;
    }
    return a.r > b.r;
}


int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);

    li n, q;
    cin >> n >> q;
    len = 750;
    for (li i = 1; i <= n; ++i) {
        cin >> a[i];
    }


    vector <zp> v(q);

    for (li i = 0; i < q; ++i) {
        cin >> v[i].l >> v[i].r;
        v[i].id = i;
    }

    sort(v.begin(), v.end());

    li l = v[0].l;
    li r = v[0].r;
    li ans = 0;

    for (li k = l; k <= r; ++k) {
        ans -= cnt[a[k]] * cnt[a[k]] * a[k];
        cnt[a[k]]++;
        ans += cnt[a[k]] * cnt[a[k]] * a[k];
    }


    out[v[0].id] = ans;

    for (li i = 1; i < q; ++i) {
        while (l < v[i].l) {
            ans -= cnt[a[l]] * cnt[a[l]] * a[l];
            cnt[a[l]]--;
            ans += cnt[a[l]] * cnt[a[l]] * a[l];
            l++;
        }
        while (l > v[i].l) {
            l--;
            ans -= cnt[a[l]] * cnt[a[l]] * a[l];
            cnt[a[l]]++;
            ans += cnt[a[l]] * cnt[a[l]] * a[l];
        }
        while (r > v[i].r) {
            ans -= cnt[a[r]] * cnt[a[r]] * a[r];
            cnt[a[r]]--;
            ans += cnt[a[r]] * cnt[a[r]] * a[r];
            r--;
        }
        while (r < v[i].r) {
            r++;
            ans -= cnt[a[r]] * cnt[a[r]] * a[r];
            cnt[a[r]]++;
            ans += cnt[a[r]] * cnt[a[r]] * a[r];
        }
        out[v[i].id] = ans;
    }

    for (li i = 0; i < q; ++i) {
        cout << out[i] << '\n';
    }

    cout << '\n';

    return 0;
}