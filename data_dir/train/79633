#include <bits/stdc++.h>
#define pb              push_back
#define ll              long long int
#define scd(a)          scanf("%d",&a)
#define mp(a,b)         make_pair(a,b)
#define scl(w)          scanf("%I64d",&w)
#define scdd(a,b)       scanf("%d %d",&a,&b)
#define srt(a)          sort(a.begin(),a.end())
#define rsrt(a)         sort(a.rbegin(),a.rend())
#define scll(a,b)       scanf("%I64d %I64d",&a,&b)
///4direction ->        int del_x[]={-1,0,1,0},del_y[]={0,1,0,-1};
#define input(v,n)      for (int i=0;i<n;i++){int a;cin >> a;v.push_back(a);}
#define inputll(v,n)    for (ll i=0;i<n;i++){ll a;cin >> a;v.push_back(a);}
#define vii             vector < int >
#define vll             vector < ll >
#define pii             pair < int , int >
#define pll             pair < ll , ll >
#define mk              make_pair
#define inf8            100000008
#define mod             998244353

using namespace std;

ll n;
vector <pll> v1,v2;
ll fact[300005];

int main()
{
    fact[0] = 1;
    for (int i=1;i<300004;i++){
        fact[i] = fact[i-1]*i;
        fact[i]%=mod;
    }
    fact[0] = 0;

    scl(n);
    for (int i=0;i<n;i++){
        ll a,b;
        scll(a,b);
        v1.pb({a,b});
        v2.pb({b,a});
    }
    srt(v1), srt(v2);

    ll cnt1 = 1, cnt2 = 1, cnt12 = 1, temp = 1;

    for (int i=1; i<n; i++){
        if (v1[i].first == v1[i-1].first)temp++;
        else {
            cnt1 *= fact[temp];
            cnt1 %= mod;
            temp = 1;
        }
    }
    cnt1 *= fact[temp];
    cnt1 %= mod;
    temp = 1;

    for (int i=1;i<n;i++){
        if (v2[i].first == v2[i-1].first)temp++;
        else {
            cnt2 *= fact[temp];
            cnt2 %= mod;
            temp = 1;
        }
    }
    cnt2 *= fact[temp];
    cnt2 %= mod;
    temp = 1;

    for (int i=1; i<n; i++){
        if (v1[i].first == v1[i-1].first && v1[i].second==v1[i-1].second)temp++;
        else {
            if (v1[i].second < v1[i-1].second)temp = 0;

            cnt12 *= fact[temp];
            cnt12 %= mod;
            temp = 1;
        }
    }
    cnt12 *= fact[temp];
    cnt12 %= mod;

   // cout << "  " << cnt1 << " " << cnt2 << " " << cnt12 << endl;

    ll tut = (fact[n] - cnt1 - cnt2 + cnt12 )% mod;
    if (tut<0)tut+=mod;
    cout << tut << endl;

    return 0;
}
