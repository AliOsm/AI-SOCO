#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int maxn=1e6+7;
const int inf=INT_MAX;
const ll inff=1e18;
const ll mod=1e9+7;
#define pii pair<int,int>
#define mkp make_pair
#define F first
#define S second
#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define int ll
//#define endl '\n'

int n,f1,f2,f3,c;
int N;

struct matrix{
    int A[7][7];
};

matrix basic,res;

matrix operator *(const matrix A,const matrix B){
    matrix C;
    memset(C.A,0,sizeof(C.A));
    for (int i=0;i<N;i++)
        for (int j=0;j<N;j++)
            for (int k=0;k<N;k++)
    {
        C.A[i][j]=(C.A[i][j]+A.A[i][k]*B.A[k][j]%(mod-1))%(mod-1);
    }
    return C;
}

void mpow(int x)
{
    for (int i=0;i<=61;i++)
    {
        if ((1ll<<i)&x) res=(res*basic);
        basic=basic*basic;
    }
}

int ppow(int a,int b)
{
    if (b==0) return 1ll;
    int ret=ppow(a,b/2);
    ret=(ret*ret)%mod;
    if (b&1) ret=ret*a%mod;
    return ret;
}

int32_t main()
{
    IOS
    cin>>n>>f1>>f2>>f3>>c;
    int p1,p2,p3,p4;

    N=3;
    memset(basic.A,0,sizeof(basic.A));
    memset(res.A,0,sizeof(res.A));
    basic.A[0][0]=1,basic.A[0][1]=1,basic.A[0][2]=1,basic.A[1][0]=1,basic.A[2][1]=1;
    res.A[0][0]=1,res.A[1][1]=1,res.A[2][2]=1;
    mpow(n-3);
    p1=res.A[0][2];
    p2=res.A[0][1];
    p3=res.A[0][0];

    N=5;
    memset(basic.A,0,sizeof(basic.A));
    memset(res.A,0,sizeof(res.A));
    basic.A[0][0]=1,basic.A[0][1]=1,basic.A[0][2]=1,basic.A[0][3]=2,basic.A[0][4]=mod-7
    ,basic.A[1][0]=1,basic.A[2][1]=1,basic.A[3][3]=1,basic.A[3][4]=1,basic.A[4][4]=1;
    res.A[0][0]=1,res.A[1][1]=1,res.A[2][2]=1,res.A[3][3]=1,res.A[4][4]=1;
    mpow(n-3);
    p4=(4*res.A[0][3]+res.A[0][4])%(mod-1);
    cout<<ppow(f1,p1)*ppow(f2,p2)%mod*ppow(f3,p3)%mod*ppow(c,p4)%mod<<endl;
}
