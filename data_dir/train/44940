//              +-- -- --++-- +-In the name of ALLAH-+ --++-- -- --+              \\

#include <bits/stdc++.h>

#define int long long

using namespace std ;

int const N = 300 + 20 , mod = 1e9 + 7 ;
int n , a[N] , dp[2][N][N] , cnt ;

int32_t main(){
	ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0) ;

	cin >> n ;

	for (int i = 0 ; i < n ; i ++) {
		cin >> a[i] ;

		for (int j = 2 ; j * j <= a[i] ; j ++) {
			while (a[i] % (j * j) == 0) {
				a[i] /= j * j ;
			}
		}
	}

	sort(a , a + n) ;

	cnt = 1 ;
	dp[1][0][0] = 1 ; 

	for (int i = 1 ; i < n ; i ++) {
		int nw = i & 1 , nxt = !nw ; 
	//	int x = a[i] ;
		bool eq = (i < n - 1 && a[i] == a[i + 1]) ;

		if (a[i] != a[i - 1]) {
			cnt = 0 ;
		}
		cnt ++ ;

		memset(dp[nxt] , 0 , sizeof dp[nxt]) ;

		for (int j = 0 ; j < i ; j ++) {
			for (int k = 0 ; j + k < i ; k ++) {
				int add ;

				if (cnt > 2) {
					//	x x

					add = dp[nw][j][k] * 1ll * k % mod ;

					if (eq) {
						(dp[nxt][j][k + 1] += add) %= mod ;
					}
					else {
						(dp[nxt][j + k + 1][0] += add) %= mod ;
					}
				}

				if (cnt > 1) {
					// x y

					add = dp[nw][j][k] * 1ll * 2 * (cnt - 1 - k) % mod ;

					if (eq) {
						(dp[nxt][j][k + 1] += add) %= mod ;
					}
					else {
						(dp[nxt][j + k + 1][0] += add) %= mod ;
					}
				}

				if (j) {
					// y y

					add = dp[nw][j][k] * 1ll * j % mod ;
	
					if (eq) {
						(dp[nxt][j - 1][k] += add) %= mod ;
					}
					else {
						(dp[nxt][j + k - 1][0] += add) %= mod ;
					}
				}

				// y z

				add = dp[nw][j][k] * 1ll * ((i + 1) - (k) - (2 * (cnt - 1 - k)) - (j)) ;

				if (eq) {
					(dp[nxt][j][k] += add) %= mod ;
				}
				else {
					(dp[nxt][j + k][0] += add) %= mod ;
				}
			}
		}
	}

	cout << dp[n & 1][0][0] << '\n' ;
}
