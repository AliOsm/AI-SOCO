#include <bits/stdc++.h>
using namespace std;

#define fi first
#define se second
#define all(x) (x).begin(), (x).end()
typedef long long ll;

const int maxN = 1 << 19;
const int maxK = 1 << 12;
const int INF = (int)1.01e9;

unordered_map<int, int> cnt[maxN / maxK];
vector<int> b[maxN / maxK];
int D[maxN / maxK];

int n;
void add(int L, int R, int x) {
    if (L / maxK == R / maxK) {
        int p = L / maxK;
        L %= maxK;
        R %= maxK;
        for (int i = L; i <= R; i++) {
                if (b[p][i] < INF) {
                    if (--cnt[p][b[p][i]] == 0) {
                        cnt[p].erase(b[p][i]);
                    }
                    b[p][i] += x;
                    cnt[p][b[p][i]]++;
                }
        }
    } else {
        for (int i = L / maxK + 1; i <= R / maxK - 1; i++) {
            if (D[i] < INF) {
                D[i] += x;
            }
        }
        add(L, (L / maxK + 1) * maxK - 1, x);
        add((R / maxK) * maxK, R, x);
    }
}

int check(int p, int x, int rev) {
    x -= D[p];
    if (D[p] < INF && cnt[p][x]) {
        if (!rev) {
            for (int i = 0; i < b[p].size(); i++) {
                if (b[p][i] == x) {
                    return i + p * maxK;
                }
            }
        } else {
            for (int i = (int)b[p].size() - 1; i >= 0; i--) {
                if (b[p][i] == x) {
                    return i + p * maxK;
                }
            }
        }
    } else {
        cnt[p].erase(x);
        return -1;
    }
    assert(false);
}

int calc(int y) {
    int l = -1;
    for (int i = 0; i * maxK < n; i++) {
        l = check(i, y, 0);
        if (l != -1) {
            break;
        }
    }
    if (l == -1) return -1;
    for (int i = maxN / maxK - 1; i >= 0; i--) {
        int v = check(i, y, 1);
        if (v != -1) {
            return v - l;
        }
    }
    assert(false);
}

int main() {
    int q;
    scanf("%d%d", &n, &q);
    for (int i = 0; i < n; i++) {
        int x;
        scanf("%d", &x);
        b[i / maxK].push_back(x);
        cnt[i / maxK][x]++;
    }
    while (q--) {
        int t, x, l, r;
        scanf("%d", &t);
        if (t == 1) {
            scanf("%d%d%d", &l, &r, &x);
            add(l - 1, r - 1, x);
        }
        if (t == 2) {
            scanf("%d", &x);
            printf("%d\n", calc(x));
        }
    }
    return 0;
}
