/*
 _____ _             _              _           _ 
|_   _| |__   ___   / \   _ __  ___| |__  _   _| |
  | | | '_ \ / _ \ / _ \ | '_ \/ __| '_ \| | | | |
  | | | | | |  __// ___ \| | | \__ \ | | | |_| | |
  |_| |_| |_|\___/_/   \_\_| |_|___/_| |_|\__,_|_|                                                

*/
#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define ppb         pop_back
#define	endl		'\n'
#define mii         map<ll int,ll int>
#define msi         map<string,ll int>
#define mis         map<ll int, string>
#define rep(i,a,b)    for(ll int i=a;i<b;i++)
#define mpi         map<pair<ll int,ll int>,ll int>
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define vii         vector<pair<ll int, ll int>>
#define vs          vector<string>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define what_is(x)  cerr << #x << " is " << x << endl;
#define time        cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
using namespace std;
#define N  100005

vi a[N];
ll x,cnt;
bool vis[N],vis1[N];

/* 
Instructions :
	1. Set p each i of p eqaul to i initailly.
	2. rank is initiialised with 0.
	3. To know parent run a loop for each value call find function.
*/
ll high[N];
ll p[N];       // set p of i equal to i initially		
ll find(ll x)
{
	if(p[x]!=x)
		p[x]=find(p[x]);
	return p[x];
}
void merge(ll x,ll y)
{
	ll Px,Py;
	Px=find(x);
	Py=find(y);
	if(high[Px]>high[Py]) 
		p[Py]=Px;
	else
		p[Px]=Py;
	if(high[Px]==high[Py])
		high[Py]++;
}

void dfs(ll node,ll hi)
{
	if(hi>cnt)
	{
		cnt=hi;
		x=node;
	}
	vis[node]=1;
	for(auto i:a[node])
	{
		if(!vis[i])
		{
			dfs(i,hi+1);
		}
	}
}

void dfs1(ll node,ll hi)
{
	if(hi>cnt)
	{
		cnt=hi;
		x=node;
	}
	vis1[node]=1;
	for(auto i:a[node])
	{
		if(!vis1[i])
		{
			dfs1(i,hi+1);
		}
	}
}

void solve()
{
	ll n,m;
	cin>>n>>m;
	rep(i,1,n+1)
	{
		p[i]=i;
	}
	vii v(m);
	ll ans=0;
	rep(i,0,m)
	{
		cin>>v[i].F>>v[i].S;
		if(find(v[i].F)!=find(v[i].S))
		{
			merge(v[i].F,v[i].S);
			a[v[i].F].pb(v[i].S);
			a[v[i].S].pb(v[i].F);
		}
	}
	rep(i,1,n+1)
	{
		ans+=sz(a[i]);
	}
	// rep(i,1,n+1)
	// {
	// 	if(!vis[i])
	// 	{
	// 		cnt=-1;
	// 		dfs(i,0);
	// 		cnt=-1;
	// 		dfs1(x,0);
	// 		ans+=cnt;
	// 	}
	// }
	cout<<m-ans/2<<endl;
	return;
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		solve();
	}
	time
	return 0;
}