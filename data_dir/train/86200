#include <iostream>
#include <iomanip>
#include <set>
using namespace std;

#define M_P make_pair
#define f first
#define s second

const int MAXN = 100 + 10, INF = 10000;
bool mat[MAXN][MAXN];
int dist[MAXN][MAXN];
long long t[MAXN][MAXN];
int n, m;

void djk(int x)
{
	int y = x;
	if(x == 1)
		y = n - 1;
	set <pair <int, int> > st;
	dist[x][y] = 0;
	t[x][y] = 1;
	st.insert(M_P(dist[x][y], y));

	for(int i = 0; i < n; i++)
	{
		if(i != y)
		{
			dist[x][i] = INF;
			st.insert(M_P(dist[x][i], i));
		}
	}

	while(!st.empty())
	{
		int v = st.begin() -> second;
		st.erase(st.begin());
		for(int i = 0; i < n; i++)
		{
			if(mat[v][i] && st.find(M_P(dist[x][i], i)) != st.end())
			{	
				if(dist[x][v] + 1 < dist[x][i])
				{
					st.erase(M_P(dist[x][i], i));
					dist[x][i] = dist[x][v] + 1;
					st.insert(M_P(dist[x][i], i));
					t[x][i] = t[x][v];
				}
				else if(dist[x][v] + 1 == dist[x][i])
				{
					t[x][i] += t[x][v];
				}
			}
		}
	}
}

int main()
{
	cin>> n >> m;

	for(int i = 0; i < m; i++)
	{
		int a, b;
		cin>> a >> b;
		a--;
		b--;
		mat[a][b] = mat[b][a] = true;
	}

	djk(0);
	djk(1);
	
	long long k = 0;
	for(int i = 0; i < n; i++)
	{
		if(dist[0][i] + dist[1][i] == dist[0][n - 1])
		{
			if(i != 0 && i != n - 1)
				k = max(k, t[0][i] * t[1][i] * 2);
			else
				k = max(k, t[0][i] * t[1][i]);
		}
	}

	double ans = (double)k / (double)t[0][n - 1];
	cout<< fixed << setprecision(6) << ans << endl;
}
