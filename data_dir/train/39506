//  Copyright Â© 2018 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 405
#define INF 1e18
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

struct nodo
{
    i64 l, r, c;
};

i64 N, M, ans, mxR;
i64 a[MAX];
i64 sum[MAX];
i64 dp[2][MAX][MAX];
vector < nodo > qry[MAX];

int main()
{
    optimiza_io
    cin >> N >> M;
    
    for( i64 i = 1; i <= N; i ++ )
        cin >> a[i];
        
    for( i64 i = 1; i < N; i ++ )
        sum[i] = sum[i - 1] + a[i + 1] - a[i];
    
    while( M -- )
    {
        i64 s, f, c, r;
        cin >> s >> f >> c >> r;
        r = min( r + 1 , f - s );
        qry[r].push_back( { s , f - 1 , c } );
        mxR = max( mxR , r );
    }
    
    for( i64 i = 1; i < N; i ++ )
        for( i64 j = i; j < N; j ++ )
            dp[1][i][j] = sum[j] - sum[i - 1];
    
    for( auto n : qry[1] )
        ans = max( ans , dp[1][n.l][n.r] * n.c );
    
    for( i64 k = 2; k <= mxR; k ++ )
    {
        for( i64 l = 1; l + k - 1 < N; l ++ )
            for( i64 r = l + k - 1; r < N; r ++ )
            {
                i64 ans = INF;
                i64 ini = l;
                i64 fin = r - k + 1;
                while( ini <= fin )
                {
                    i64 mid = ( ini + fin ) / 2;
                    i64 l1 = sum[mid] - sum[l - 1];
                    i64 l2 = dp[( k + 1 ) & 1][mid + 1][r];
                    ans = min( ans , max( l1 , l2 ) );
                    if( l1 <= l2 )
                        ini = mid + 1;
                    else
                        fin = mid - 1;
                }
                dp[k & 1][l][r] = ans;
            }
        for( auto n : qry[k] )
            ans = max( ans , dp[k & 1][n.l][n.r] * n.c );
    }
    
    cout << ans;
    return 0;
}



// 2 3 5 5 6 7