#include <bits/stdc++.h>

using namespace std;


int k,n ;
long long a[300010] ;
pair < long long , int > tree[300010*9] ;
void upd(int idx, int l, int r , int a, int b, long long x)
{
    if ( l > b || r < a ) return ;
    if ( l >= a && r <= b )
    {
        tree[idx] = {x,l} ;
        return ;
    }
    int mid=(l+r)>>1 ;
    upd(idx*2+1,l,mid,a,b,x) ;
    upd(idx*2+2,mid+1,r,a,b,x) ;
    tree[idx] = min(tree[idx*2+2],tree[idx*2+1]) ;
}

pair < long long , int > qu(int idx, int l , int r, int a , int b)
{
    if ( l > b || r < a ) return {1e15,-1};
    if ( l >= a && r <= b )
    {
        return tree[idx] ;
    }
    int mid=(l+r)>>1 ;
    return min( qu(idx*2+1,l,mid,a,b),
                    qu(idx*2+2,mid+1,r,a,b)) ;

}
pair <long long,int> dp[300010] ;
string str;
int  m;
string S[1005];
bitset<1005>bt;
bitset<256>got;
bitset<256>cat[1005];
bool valid(int idx){

    for(int i = 0; i < n; i++)
        if(got[S[idx][i]] && str[i] == '*')return 0;

    for(int i = 0; i < n; i++)if(str[i]!='*' && (str[i] != S[idx][i]))return 0;
    for(char c = 'a'; c <= 'z'; c++)if((got[c] && !cat[idx][c]))return 0;
    return 1;
}
int main()
{
    // freopen("input.txt", "r", stdin);
    //ios::sync_with_stdio(0);
    //cin.tie(0);
    cin>>n>>str>>m;
    for(auto c : str)
        got[c] = 1;

    for(int i = 0; i < m; i++)
        cin >> S[i];

    for(int i = 0; i < m; i++){

        for(int j = 0; j < n; j++)
            cat[i][S[i][j]] = 1;
        bt[i] = !valid(i);
    }
    int ans = 0;
    for(char c = 'a'; c <= 'z'; c++){
        if(got[c])continue;
        for(int i = 0; i < m; i++){
            if(bt[i])continue;
            if(!cat[i][c])goto nxt;
            for(int j = 0; j < n; j++)
                if(str[j]!='*'&&S[i][j] == c)goto nxt;
        }
        ans++;
        nxt:;
    }


    cout << ans << endl;

    return 0;
}
