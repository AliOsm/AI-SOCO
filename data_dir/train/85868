#include <bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(12), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-12, PI = acos(-1);
const int N = 2e5 + 9, M = 5e3 + 9, OO = 1e9 + 7, MOD = 1e9 + 7;
const ll inf = 1e18 + 9;

set<int> adj[N];
bool bad[N];
int sz[N], depth[N], mnDepth, req, pReq, ans[N];

void init(int n) {
	for (int i = 0; i < n; ++i) {
		adj[i].clear();
		bad[i + 1] = 0;
		adj[i+1].clear();
	}
	for (int i = 1; i < n; ++i) {
		adj[i].insert(i + 1);
		adj[i + 1].insert(i);
	}
}

void dfs(int node, int par, int dd = 0) {
	int cntChild = 0;
	for(auto it: adj[node]) {
		if(it == par) continue;
		++cntChild;
		dfs(it, node, dd + 1);
	}
	if(!cntChild)
		if(dd < mnDepth && !bad[node])
			mnDepth = dd, req = node, pReq = par;
	sz[node] = cntChild;
	depth[node] = dd + 1;
	ans[node] = par;
}

int main() {
	fastIO;
#ifdef LOCAL
	freopen("input.in", "rt", stdin);
#endif
	int t;
	cin >> t;
	while(t--) {
		int n, d, tempn;
		cin >> n >> d;
		tempn = n;
		ll len = 1, mn = 0, mx = (n *(n - 1)) / 2;
		--n;
		for (int i = 2;n; i = (i << 1)) {
			int temp = min(n, i);
			mn += temp * len;
			++len;
			n -= temp;
		}
		n = tempn;
		cerr << mn << ' ' << mx << endl;
		if(d < mn || d > mx) {
			cout << "NO\n";
			continue;
		}
		init(n);
		while(mx != d) {
			mnDepth = OO;
			req = -1;
			dfs(1, -1);
			if(req == -1)
				break;
			bool lsa = 0;
			for (int i = 1; i <= n; ++i) {
				if(i == req || sz[i] == 2) continue;
				if(depth[i] == depth[req] - 2) {
					adj[req].erase(pReq);
					adj[pReq].erase(req);
					adj[i].insert(req);
					adj[req].insert(i);
					lsa = 1;
					break;
				}
			}
			if(!lsa) {
				bad[req] = 1;
				continue;
			}
			--mx;
		}
		if(mx == d) {
			cout << "YES\n";
			dfs(1, 1);
			for (int i = 2; i <= n; ++i)
				cout << ans[i] << ' ';
			cout << '\n';
		} else {
			cout << "NO\n";
			continue;
		}
	}
	return 0;
}
