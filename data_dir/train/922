#include<iostream>
#include<cstdio>
#include<cmath>
#include<vector>
using namespace std;
struct rebro
{
    int v,nom;
};
vector < vector <rebro> > g;
int ver[100003];
int fer[100003];
bool most[100003];
bool flag[100003];
int tim;
void dfs(int x,int pre)
{
    int i;
    flag[x]=true;
    fer[x]=ver[x]=tim;
    tim++;
    for(i=0;i<g[x].size();i++)
    {
        if(pre==g[x][i].v)
            continue;
        if(!flag[g[x][i].v])
        {
            dfs(g[x][i].v,x);
            fer[x]=min(fer[x],fer[g[x][i].v]);
            if(fer[g[x][i].v]>ver[x])
                most[g[x][i].nom]=true;
        }
        else
            fer[x]=min(fer[x],ver[g[x][i].v]);
    }
}
int ans[100003];
int head;
int tail;
int n,m,k;
int queue[100003];
void bfs(int finish)
{
    int i;
    int x;
    while(head>tail)
    {
        x=queue[tail];
        if(x==finish)
        {
            printf("%d\n",ans[x]);
            return;
        }
        for(i=0;i<g[x].size();i++)
        {
            if(!flag[g[x][i].v])
            {
                flag[g[x][i].v]=true;
                queue[head++]=g[x][i].v;
                ans[g[x][i].v]=ans[x];
                if(most[g[x][i].nom])
                    ans[g[x][i].v]++;
            }
        }
        tail++;
    }
}
int main()
{
    scanf("%d %d",&n,&m);
    int i,j;
    g.resize(n);
    rebro a;
    int x,y;
    for(i=0;i<m;i++)
    {
        scanf("%d %d",&x,&y);
        x--;
        y--;
        a.nom=i;
        a.v=y;
        g[x].push_back(a);
        a.v=x;
        g[y].push_back(a);
    }
    dfs(0,0);
    scanf("%d",&k);
    for(i=0;i<k;i++)
    {
        scanf("%d %d",&x,&y);
        x--;
        y--;
        for(j=0;j<n;j++)
            flag[j]=false;
        ans[x]=0;
        queue[0]=x;
        flag[x]=true;
        head=1;
        tail=0;
        bfs(y);
    }
    return 0;
}
