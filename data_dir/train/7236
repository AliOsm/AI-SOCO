#include<bits/stdc++.h>
#define pb push_back
using namespace std;
typedef vector <int> vi;
const int N = 505;
int n, sz[N], P[N], M[N];
vi vec, vec2;
inline bool CMP(int i, int j) {return (sz[i] < sz[j]);}
inline int query(int v, vi S, vi T)
{
    printf("%d\n", (int)S.size());
    for (int a : S) printf("%d ", a);
    printf("\n%d\n", (int)T.size());
    for (int a : T) printf("%d ", a);
    printf("\n%d\n", v); fflush(stdout);
    int z; scanf("%d", &z); return z;
}
inline void Solve(int l, int r, int v, int sz)
{
    if (!sz) return ;
    if (r - l < 2)
        return void(vec2.pb(vec[l]));
    int md = (l + r) >> 1;
    vi T; T.assign(vec.begin() + l, vec.begin() + md);
    Solve(l, md, v, query(v, vi {1}, T));
    T.assign(vec.begin() + md, vec.begin() + r);
    Solve(md, r, v, query(v, vi {1}, T)); return ;
}
int main()
{
    scanf("%d", &n); sz[1] = n;
    if (n == 2) return !printf("ANSWER\n1 2\n");
    for (int i = 2; i <= n; i++)
    {
        vi T;
        for (int j = 2; j <= n; j++)
            if (i != j) T.pb(j);
        sz[i] = query(i, vi {1}, T) + 1;
    }
    iota(P, P + n + 1, 0);
    sort(P + 1, P + n + 1, CMP);
    vector < pair < int , int > > E;
    for (int i = 1; i <= n; i++)
    {
        int v = P[i];
        if (sz[v] == 1) {vec.pb(v); continue;}
        Solve(0, (int)vec.size(), v, query(v, vi {1}, vec));
        for (int u : vec2) E.pb({v, u}), M[u] = 1;
        for (int j = 0; j < (int)vec.size(); j++)
            if (M[vec[j]]) swap(vec[j], vec.back()), vec.pop_back(), j --;
        vec.pb(v); vec2.clear();
    }
    printf("ANSWER\n");
    for (auto X : E)
        printf("%d %d\n", X.first, X.second);
    fflush(stdout); return 0;
}