#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

typedef long long ll;
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 2000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

int A[105], Am[105], N, Work[105];
map<char,int> M;
string S;

bool ok(vector<int> p)
{
    f(i,0,3) Am[i] = Work[i] = 0;
    int idx = 0;
    f(i,1,N)
    {
        int col = p[idx];
        if(A[i] >= 0 && A[i] != col) return false;
        if(A[i] >= 0) Work[col]++;
        Am[col]++;
        idx = (idx + 1) % 4;
    }
    f(i,0,3) if(Work[i] == 0) return false;
    return true;
}

int main()
{
    M['R'] = 0;
    M['B'] = 1;
    M['Y'] = 2;
    M['G'] = 3;
    M['!'] = -1;
    cin >> S;
    N = SZ(S);
    f(i,1,N) A[i] = M[S[i-1]];
    vector<int> p = {0,1,2,3};
    do
    {
        if(ok(p))
        {
            f(i,0,3) cout << Am[i]-Work[i] << " ";
            return 0;
        }
    }while(next_permutation(all(p)));
}
