#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;
typedef pair<ll,ll> point;
typedef pair< point, point > tim;

bool les(point a,point b){
	return (a.x*b.y)<(b.x*a.y);	
}

bool comp(point a,point b){
	if(a.x==b.x)
		return a.y<b.y;
	return a.x>b.x;
}

//mapper
int ptr;
map< point , int > m;
int mapper(point num){
    int val=m[num];
    if(val!=0)
        return val;
    m[num]=++ptr;
    return ptr;
}
//end of mapper
int n;
ll w;



const int maxn=3e5+7,lim=4*maxn;

int segtree[lim];
const int lrange=1,rrange=2e5+7;

void update(int cur,int l,int r,int pos,int val){
	if(l>pos || r<pos)
		return;
	if(l==pos && r==pos){
		segtree[cur]+=val;
		return;
	}
	int lc=2*cur,rc=lc+1,mid=(l+r)/2;
	update(lc,l,mid,pos,val);
	update(rc,mid+1,r,pos,val);
	segtree[cur]=segtree[lc]+segtree[rc];
}

int query(int cur,int l,int r,int ql,int qr){
	if(r<ql || l>qr)
		return 0;
	if(l>=ql && r<=qr)
		return segtree[cur];
	int lc=2*cur,rc=lc+1,mid=(l+r)/2;
	return (query(lc,l,mid,ql,qr)+query(rc,mid+1,r,ql,qr));
}


int main()
{
	fastread;
	cin>>n>>w;
	vector< tim > ip;
	vector< point > seq,fin;
	for(int i=0;i<n;i++){
		ll x,v;
		cin>>x>>v;
		point p,q;
		p.x=abs(x);
		p.y=abs(v-w);
		ll temp=__gcd(p.x,p.y);
		p.x/=temp;
		p.y/=temp;
		q.x=abs(x);
		q.y=abs(v+w);
		temp=__gcd(q.x,q.y);
		q.x/=temp;
		q.y/=temp;
		ip.pb({p,q});
		seq.pb(p);
		seq.pb(q);
		// cout<<p.x<<" "<<p.y<<"  "<<q.x<<" "<<q.y<<endl;
	}
	sort(seq.begin(),seq.end(),les);
	for(auto u:seq)
		mapper(u);
	for(auto u:ip)
		fin.pb({mapper(u.x),mapper(u.y)});
	sort(fin.begin(),fin.end(),comp);
	for(auto u:fin){
		update(1,lrange,rrange,u.y,1);
		// cout<<"check"<<u.x<<"  "<<u.y<<endl;
	}
	ll ans=0;
	// cout<<query(1,lrange,rrange,lrange,rrange)<<endl;
	for(auto u:fin){
		update(1,lrange,rrange,u.y,-1);
		ans+=query(1,lrange,rrange,u.y,rrange);
	}
	cout<<ans;
	return 0;
}