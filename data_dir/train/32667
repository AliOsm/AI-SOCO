#include <bits/stdc++.h>

typedef long long tint;


#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define forn(i,n) forsn(i,0,n)
#define debug(x) cout << #x << " = "  << x << endl

using namespace std;

void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}
const tint maxN = 262144;

vector<tint> caminito;
bitset<maxN> used;
bitset<maxN> inQueue;

tint representante[maxN];
tint tamanho[maxN];

void inicializar (tint n)
{
	forn(i,n)
	{
		representante[i] = i;
		tamanho[i] = 1;
	}
}

tint find (tint x)
{
	caminito = {};
	while (x != representante[x])
	{
		caminito.push_back(x);
		x = representante[x];	
	}
	for (auto z : caminito)
		representante[z] = x;
	return x;
}

bool same (tint a, tint b)
{
	return (find(a) == find(b));
}

void unite (tint a, tint b)
{
	a = find(a);
	b = find(b);
	if (tamanho[a] < tamanho[b])
		swap(a,b);
	tamanho[a] += tamanho[b];
	representante[b] = a;	
}

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	tint n,m;
	while (cin >> n >> m)
	{
		vector<unordered_set<tint> > ladj (n);
		forn(i,m)
		{
			tint a,b;
			cin >> a >> b;
			ladj[a-1].insert(b-1);
			ladj[b-1].insert(a-1);
		}
		inicializar(n);
		used.reset();
		unordered_set<tint> notUsed;
		forn(i,n)
			notUsed.insert(i);
		forn(i,n)
		{
			if (!used[i])
			{
				used[i] = 1;
				inQueue[i] = 1;
				notUsed.erase(i);
				vector<tint> vecinos = {i}, nuevosVecinos;
				while(!vecinos.empty())
				{
					
					tint actual = vecinos.back();
					vecinos.pop_back();
					for (auto vecino : notUsed)
						if (!inQueue[vecino] && ladj[actual].find(vecino) == ladj[actual].end())
						{
							unite(actual,vecino);
							inQueue[vecino] = 1;
							nuevosVecinos.push_back(vecino);
						}
					if (vecinos.empty())
					{
						for (auto x : nuevosVecinos)
						{
							notUsed.erase(x);
							used[x] = 1;
						}
						vecinos.swap(nuevosVecinos);
					}
				}
			}
		}
		used.reset();
		vector<tint> ans;
		forn(i,n)
			if (!used[find(i)])
			{
				used[find(i)] = 1;
				ans.push_back(tamanho[find(i)]);
			}
		tint k = ans.size();
		cout << k << "\n";
		sort(ans.begin(),ans.end());
		forn(i,k)
		{
			if (i)
				cout << " ";
			cout << ans[i];
		}
		cout << "\n";
			
				
	}
	
	return 0;
}





