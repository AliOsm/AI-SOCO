#include <bits/stdc++.h>
using namespace std;
typedef long long       ll;
typedef pair<int,int>   pii;
typedef vector<int>     vi;
typedef long double     ld;
#define MOD         1000000007
#define pb          push_back
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define endl        '\n'
#define PI          3.14159265359d
#define sz(x)       (int)x.size()
string A[100005];
bool visited[100005];
vi v[30];
int pos[30];
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int n,i,j,k,l;
	cin>>n;
	for(i=1;i<=n;i++)
        cin>>A[i];
    for(i=1;i<=n;i++)
    {
        set<char> s;
        for(auto c:A[i])
            s.insert(c);
        if(sz(s)!=sz(A[i]))
        {
            cout<<"NO";
            return 0;
        }
        for(auto c:A[i])
            v[c-'a'].pb(i);
    }
    set<int> s;
    string res(100,'-');
    vector<string> ans;
    while(true)
    {
        if(s.empty())
        {
            for(i=0;i<100;i++)
                if(res[i]!='-')
                    break;
            string tmp;
            for(;i<100;i++)
                if(res[i]!='-')
                    tmp.pb(res[i]);
                else
                    break;
            ans.pb(tmp);
            for(i=0;i<100;i++)
                res[i]='-';
            for(i=0;i<26;i++)
                if(!pos[i]&&!v[i].empty())
                    break;
            if(i==26)
                break;
            pos[i]=50;
            res[50]=(char)('a'+i);
            s.insert(i);
        }
        else
        {
            k=*s.begin();
            s.erase(s.begin());
            for(auto i:v[k])
                if(!visited[i])
                {
                    for(j=0;j<sz(A[i]);j++)
                        if(A[i][j]-'a'==k)
                            break;
                    for(l=j-1;l>=0;l--)
                        if(!pos[A[i][l]-'a'])
                        {
                            if(res[pos[k]+l-j]!='-')
                            {
                                cout<<"NO";
                                return 0;
                            }
                            pos[A[i][l]-'a']=pos[k]+l-j;
                            res[pos[A[i][l]-'a']]=A[i][l];
                            s.insert(A[i][l]-'a');
                        }
                        else if(pos[A[i][l]-'a']!=pos[k]+l-j)
                        {
                            cout<<"NO";
                            return 0;
                        }
                    for(l=j+1;l<sz(A[i]);l++)
                        if(!pos[A[i][l]-'a'])
                        {
                            if(res[pos[k]+l-j]!='-')
                            {
                                cout<<"NO";
                                return 0;
                            }
                            pos[A[i][l]-'a']=pos[k]+l-j;
                            res[pos[A[i][l]-'a']]=A[i][l];
                            s.insert(A[i][l]-'a');
                        }
                        else if(pos[A[i][l]-'a']!=pos[k]+l-j)
                        {
                            cout<<"NO";
                            return 0;
                        }
                    visited[i]=true;
                }
        }
    }
    sort(all(ans));
    for(auto s:ans)
        cout<<s;
	return 0;
}
