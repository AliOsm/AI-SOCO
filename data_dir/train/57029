#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

template<class A>using sett=tree<A,null_type,less<A>,rb_tree_tag,tree_order_statistics_node_update>;
template<class A>using multisett=tree<A,null_type,less_equal<A>,rb_tree_tag,tree_order_statistics_node_update>;
template<class A,class B>using mapp=tree<A,B,less<A>,rb_tree_tag,tree_order_statistics_node_update>;
template<class A,class B>using multimapp=tree<A,B,less_equal<A>,rb_tree_tag,tree_order_statistics_node_update>;
template<class A>using priority_queue_min=priority_queue<A,vector<A>,greater<A> >;

#define DIM 200009
#define INF 1e11+9
#define ld long double
#define amen exit(0)
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define pairll pair<long long,long long>
#define fi first
#define se second
#define INF 1e11+9

long long i,j,k,n,m,t1,t2,t3,x,y,z;

long long l[DIM],r[DIM],sums[DIM],res[DIM],a[DIM];

set<long long>q;

unordered_map<long long,set<long long> >mp;

int main()
{
    fast;

    cin>>n;
    for(i=1;i<=n;i++)cin>>l[i];
    for(i=1;i<=n;i++)cin>>r[i];

    int flag=0;

    for(i=1;i<=n;i++){
        if(l[i]>i-1 || r[i]>n-i)return cout<<"NO"<<endl,0;
        sums[i]=l[i]+r[i];
        a[i]=0;
        if(sums[i]==0){
            flag=1;
            res[i]=n;
        }
        if(sums[i]!=0)mp[sums[i]].insert(i);
        if(sums[i]!=0)q.insert(sums[i]);
    }

    if(!flag)return cout<<"NO"<<endl,0;

    int num=n-1;

    while(q.size()>0){
        int p=*q.begin();
        for(auto to:mp[p]){
            res[to]=num;
            for(i=1;i<=n;i++){
                if(to==i)continue;
                if(i<to && mp[p].count(i)==0 && res[i]!=0)l[to]--;
                if(i>to && mp[p].count(i)==0 && res[i]!=0)r[to]--;
            }
           // cout<<l[to]<<' '<<r[to]<<' '<<to<<' '<<q.top()<<endl;
            if(r[to]!=0 || l[to]!=0)return cout<<"NO"<<endl,0;
        }
        q.erase(q.begin());
        num--;
    }

    cout<<"YES"<<endl;
    for(i=1;i<=n;i++)cout<<res[i]<<' ';
    cout<<endl;

    amen;
}
