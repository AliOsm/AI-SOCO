#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <cassert>
#include <ctime>


using namespace std;

#ifdef WIN32
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<ll> vll;
typedef vector<vll> vvll;

ll rdtsc() {
    ll tmp;
    asm("rdtsc" : "=A"(tmp));
    return tmp;
}

inline int myrand() {
	return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
	return myrand() % x;
}

#define TASKNAME "text"
#define pb push_back
#define mp make_pair
#define EPS (1e-9)
#define INF ((int)1e9)
#define sqr(x) ((x) * (x))         
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

const int maxl = 30;
const int MOD = (int)1e9 + 7;

void add(int &x, int y) {
	if ((x += y) >= MOD)
		x -= MOD;
}

int mult(int x, int y) {
	return (long long) x * y % MOD;
}

int myPower(int x, int pw) {
	int res = 1;
	for (; pw; pw >>= 1) {
		if (pw & 1)
			res = mult(res, x);
		x = mult(x, x);
	}

	return res;
}


inline int getBit(int x, int pos) {
	return ((x >> pos) & 1);
}


int X;

int d1[maxl][maxl];

int getD1(int pos, int k) {
	if (!k)
		return 1;
	if ((1 << pos) > X)	
		return 0;
	int &res = d1[pos][k];
	if (res != -1)
		return res;
	res = 0;
	if (getBit(X, pos) && (k != 1 || (1 << (pos + 1)) > X))
		add(res, getD1(pos + 1, k - 1));
	add(res, mult(getD1(pos + 1, k), 1 << (k - 1)));
	return res;
}

int d2[maxl][maxl];

int getD2(int pos, int k) {
	if (pos < k)
		return 0;
	if (!k)
		return 1;
	int &res = d2[pos][k];
	if (res != -1)
		return res;
	res = 0;
	add(res, getD2(pos - 1, k - 1));
	add(res, mult(getD2(pos - 1, k), 1 << k));
	return res;
}

bool solve() {
	if (scanf("%d", &X) < 1)
		return 0;
	if (!X) {
		printf("1\n");	
		return 1;
	}

	memset(d1, -1, sizeof(d1));
	memset(d2, -1, sizeof(d2));


	int res = 0;
	for (int k = 0; k < maxl; ++k) {
		if (k) {
			add(res, getD1(0, k));
		//	eprintf("k = %d, add %d\n", k, getD1(0, k));
		}
		for (int pos = 0; pos + k < maxl; ++pos) {
			if (!getBit(X, pos))
				continue;
			if (!k && (1 << (pos + 1)) <= X)
				continue;
			for (int k1 = 0; k1 <= pos; ++k1) {
				int toadd = mult(getD1(pos + 1, k), mult(getD2(pos, k1), myPower(2, (pos - k1) * k + max(0, k - 1))));
				add(res, toadd);
				/*if (toadd) {
					if (pos == 0 && k == 2) {
						eprintf("%d\n", getD2(pos, k1));
						eprintf("k = %d, pos = %d, k1 = %d, add %d\n", k, pos, k1, toadd);
					}
				}   */
			}
		}
	}

	printf("%d\n", res);
	return 1;
}

int main() {
	srand(rdtsc());
#ifdef DEBUG
	freopen(TASKNAME".in", "r", stdin);
	freopen(TASKNAME".out", "w", stdout);
#endif
	
	while (1) {
		if (!solve())
			break;
		#ifdef DEBUG
			eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
		#endif
	}
	return 0;
}
