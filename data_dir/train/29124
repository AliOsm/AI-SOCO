#include <bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define PB push_back
#define size(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define FR(i, a, b) for(int i = a; i < b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define debug(x) cerr<< #x << ": " << x << endl;
#define fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

//const int mod = 1000 * 1000 * 1000 + 7;
const int N = 1000 * 1000 + 10;
struct edge{
	int u, v, w, ind;
} e[N];
vector <int> vec[N], vec2[N];
int mark[N], num[N];
vector <int> vec_e;
int n, m;
int omg[N];

bool chck = true;
void dfs(int u, ll x, int cnt)
{
	omg[u] = 1;
	mark[u] = cnt;
	for(int ind: vec[u])
		if(!mark[e[ind].v] && e[ind].w >= x)
		{
//			h[e[ind].v] = h[u] + 1;
			dfs(e[ind].v, x, cnt);
		}
		else if(mark[e[ind].v] == cnt && omg[e[ind].v] && e[ind].w >= x)
		{
		//	debug(e[ind].u);
		//	debug(e[ind].v);
			chck = false;
		}
	omg[u] = 0;
}

bool no_cy(ll x)
{
//	debug(x);
	chck = true;
	FR(i, 0, n)
		mark[i] = 0, omg[i] = 0;
	int cnt = 1;
	FR(i, 0, n)
	{
		if(!mark[i])
			dfs(i, x, cnt);
		cnt++;
	}
//	debug(x);
//	debug(chck);
	return chck;
}

vector <int> topol;
void dfs2(int u, ll x)
{
//	cerr<< "DFS2\n";
//	debug(u);
	mark[u] = 1;
	for(int ind: vec[u])
		if(!mark[e[ind].v] && e[ind].w > x)
			dfs2(e[ind].v, x);
	topol.PB(u);
//	cerr<< "U: " << u << endl;
}
/*
void sfd(int u, ll x)
{
	mark[u] = 1;
	for(int ind: vec2[u])
		if(!mark[e[ind].v] && e[ind].w >= x)
			sfd(e[ind].v, x);
	topol.PB(u);
}
*/

int main()
{
	cin>> n >> m;
	FR(i, 0, m)
	{
		cin>> e[i].u >> e[i].v >> e[i].w;
		e[i].u--, e[i].v--;
		vec[e[i].u].PB(i);
//		vec2[e[i].v].PB(i);
		e[i].ind = i;
		vec_e.PB(e[i].w);
	}

	vec_e.PB(0);
	sort(all(vec_e));
	vec_e.resize(unique(all(vec_e)) - vec_e.begin());

	int st = 0, en = size(vec_e);
	while(en - st > 1)
	{
		int mid = (st + en) / 2;
		if(no_cy(vec_e[mid]))
			en = mid;
		else
			st = mid;
	}

	ll k = vec_e[en - 1];

	FR(i, 0, n) mark[i] = 0;
	FR(i, 0, n) if(!mark[i]) dfs2(i, k);


//	FR(i, 0, n) mark[i] = 0;
//	FR(i, 0, n) if(!mark[i]) sfd(i, k);
	FR(i, 0, n) num[topol[i]] = i;

//	FR(i, 0, n) cerr<< topol[i] << " ";
//	cerr<< endl;

	vector <int> ans;
	FR(i, 0, m)
		if(e[i].w <= k)
		{

			if(num[e[i].v] > num[e[i].u])
				ans.PB(i + 1);
		}

//	cout<< size(ans) << " " << k << endl;
	//WTH :|||
	cout<< k << " " << size(ans) << endl;
	FR(i, 0, size(ans))
		cout<< ans[i] << " ";
	cout<< endl;
	return 0;
}

