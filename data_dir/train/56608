#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <random>
#include <unordered_set>
#include <complex>
#include <assert.h>
#include <deque>
#define LL long long
#define ll long long
#define ld long double
#define ull unsigned ll
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int, int> 
#define pll pair<ll, ll> 
#define vi vector<int>
#define vpii vector<pii>
#define vpll vector<pll>
#define vll vector<ll>
#define vpii vector<pii>
#define vvi vector<vector<int>>
//#define endl '\n'
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const ll  Inf = 1e18;
const ld  eps = 1e-7;
ll LINF = (ll)2e18;
using namespace std;
ll mod = 1e9 + 7;
ll mod5 = 1e9 + 9;
ll mod3 = 998244353;
ll mod4 = 1000003;
ll mod2 = 1e9 + 123;
const int MAXN = 301000; // число вершин
const int INF = 1000000000; // константа-бесконечность

int p[MAXN];
void build() {
	forn(i, 0, MAXN)p[i] = i;
}

int get_parent(int v)
{
	if (p[v] == v) return v;
	return p[v] = get_parent(p[v]);
}

void unite(int a, int b) {
	a = get_parent(a);
	b = get_parent(b);
	if (rand() & 1) {
		p[b] = a;
	}
	else {
		p[a] = b;
	}
}

bool kruskal(vector<pair<LL, pair<int, int> > > &g, LL w) {
	priority_queue<pair<LL, pair<int,int> >, vector<pair<LL, pair<int, int> > >, greater<pair<LL, pair<int, int> > > > q;
	build();
	forn(i, 0, g.size()) {
		q.push(g[i]);
	}

	while(!q.empty()) {
		auto cur = q.top();
		q.pop();

		int from = abs(cur.second.first);
		int to = cur.second.second;
		if (get_parent(from) != get_parent(to)) {
			unite(from, to);
			if (cur.first == w && cur.second.first < 0) return true;
		}
	}

	return false;
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("lines.in", "r", stdin);
	//freopen("javacert.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0); cout.setf(ios::fixed); cout.precision(20);

	int n, m;
	cin >> n >> m;
	
	vector<pair<LL, pair<int,int> > > g;
	vector<LL> vals;

	forn(i, 0, m) {
		int f, t, e;
		cin >> f >> t >> e;
		//f--;
		//t--;
		g.push_back(mp(e, mp(f, t)));
		vals.push_back(e);
	}

	g[0].second.first *= -1;

	sort(all(vals));
	vals.push_back(1000000000);
	int tl = 0, tr = vals.size() - 1;

	while (tl < tr) {
		int tm = (tl + tr) >> 1;
		tm++;
		g[0].first = vals[tm];
		if (kruskal(g, g[0].first)) {
			tl = tm;
		}
		else {
			tr = tm - 1;
		}
	}

	cout << vals[tl];

	return 0;
}