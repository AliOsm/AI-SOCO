#include <bits/stdc++.h>

#define pp pop_back
#define pb push_back
#define forn(i, x, n) for (int i = int(x); i <= int(n); ++i)
#define for1(i, n, x) for (int i = int(n); i >= int(x); --i)
#define mp make_pair
#define s second
#define f first
#define sz(a) (int)((a).size())

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> PII;

const int N = 2e5 + 123;
const int mod = 1e9 + 7;
const int inf = 1e9;
const int P = 31;
const int base = 70;

int n, a[N], p[N], dp[2][4001][100][100];
bool was[2][4001][142][71];

int solve(int turn = 0, int l = 1, int diff = base, int last = 1)
{
  int r = n - (l - 1) - diff + base;
  if (l > r || last > r - l + 1) return 0;
  int &ans = dp[turn][l][diff][last];
  if (was[turn][l][diff][last]) return ans;
  was[turn][l][diff][last] = 1;
  // diff = (n - r) - (l - 1) + base;
  // r = n - l - 1 - diff;
  if (!turn)
  {
    int nxt = n - r - (l + last - 1) + base;
    ans = p[l + last - 1] - p[l - 1] + solve(turn ^ 1, l + last, nxt, last);
    //cout << "turn = " << turn << " l = " << l << " r = " << r << " last = " << last << " ans = " << ans << " nx = " << solve(turn ^ 1, l + last, nxt, last) << endl;
    nxt = n - r - (l + last) + base;
    if (last < r - l + 1) ans = max(ans, p[l + last] - p[l - 1] + solve(turn ^ 1, l + last + 1, nxt, last + 1));
  }
  else
  {
    int nxt = n - (r - last) - (l - 1) + base;
    ans = -(p[r] - p[r - last]) + solve(turn ^ 1, l, nxt, last);
    nxt = n - (r - last - 1) - (l - 1) + base;
    if (last < r - l + 1) ans = min(ans, -(p[r] - p[r - last - 1]) + solve(turn ^ 1, l, nxt, last + 1));
  }
  return ans;
}

int main() {
  ios_base::sync_with_stdio(0);
  #ifdef wws
    freopen("in", "r", stdin);
  #endif
  cin >> n;
  for (int i = 1;i <= n;i++)
  {
    cin >> a[i];
    p[i] = p[i - 1] + a[i];
  }
  cout << solve() << endl;
  return 0;
}
