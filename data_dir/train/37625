/*
digu_J - Digvijay Janartha
NIT Hamirpur - INDIA
*/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

template < typename T > using ordered_set = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;
template < typename T > using MinPriorityQueue = priority_queue < T, vector < T >, greater < T > >;

#ifndef ONLINE_JUDGE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template < typename Arg1 >
void __f(const char* name, Arg1&& arg1) {
    cout << name << " : " << arg1 << std :: endl;
}
template < typename Arg1, typename... Args >
void __f(const char* names, Arg1&& arg1, Args&&... args) {
    const char* comma = strchr(names + 1, ',');
    int len = comma - names;
    for (int i = 0; i < len; ++i) {
        cout << names[i];
    }
    cout <<  " : " << arg1 << " | ";
    __f(comma + 1, args...);
}
#else
#define trace(...)
#endif

typedef double db;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair < ll, ll > pll;
typedef pair < int, int > pii;
typedef vector < ll > vll;
typedef vector < int > vi;

#define eb emplace_back
#define pb push_back
#define F first
#define S second
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define fast_io() ios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0)

const ll LINF = LLONG_MAX, base = 1e9, MOD = 1e9 + 7, N = 2e5 + 10, M = 1e3 + 10;
const int INF = INT_MAX;
const db PI = acos(-1);

int n, m, d;
vi g[N], join;
bool vis[N];
set < int > st;

void test();
bool bfs(int s);
void bfs0(int s);

int main() {
    fast_io();
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    test();
    #ifndef ONLINE_JUDGE
        cout << "Time: " << (int)(clock() * 1000. / CLOCKS_PER_SEC) << "ms";
    #endif
    return 0;
}

void test() {
    cin >> n >> m >> d;
    for (int i = 0, x, y; i < m; ++i) {
        cin >> x >> y;
        if (min(x, y) != 1) {
            g[x].eb(y);
            g[y].eb(x);
        } else {
            st.insert(max(x, y));
        }
    }
    if (st.size() < d) {
        cout << "NO\n";
        return;
    }
    int cnt = 0;
    for (int i = 2; i <= n; ++i) {
        if (!vis[i]) {
            cnt += bfs(i);
        }
    }
    if (cnt > d) {
        cout << "NO\n";
        return;
    }
    for (auto &x: join) {
        g[x].eb(1);
        g[1].eb(x);
    }
    for (auto &x: st) {
        if (g[1].size() != d) {
            g[x].eb(1);
            g[1].eb(x);
        }
    }
    cout << "YES\n";
    bfs0(1);
}

bool bfs(int s) {
    queue < int > q;
    q.push(s);
    bool ok = true;
    vis[s] = true;
    while (!q.empty()) {
        int v = q.front();
        if (ok and st.count(v)) {
            ok = false;
            join.eb(v);
            st.erase(v);
        }
        q.pop();
        for (auto &x: g[v]) {
            if (!vis[x]) {
                vis[x] = true;
                q.push(x);
            }
        }
    }
    return true;
}

void bfs0(int s) {
    fill(vis, vis + n + 1, false);
    queue < int > q;
    q.push(s);
    vis[s] = true;
    while (!q.empty()) {
        int v = q.front();
        q.pop();
        for (auto &x: g[v]) {
            if (!vis[x]) {
                cout << v << " " << x << "\n";
                vis[x] = true;
                q.push(x);
            }
        }
    }
}
