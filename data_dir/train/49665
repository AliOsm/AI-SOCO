#include <iostream>
#include <vector>
#include <cassert>
#include <map>
#include <cmath>
#include <set>
#include <algorithm>
using namespace std;
typedef long long Long;
#define MAXX 1000000LL
#define MAXY MAXX

int FEN[1000010];
void ins(int x,int v){
	x++;
	while(x < 1000010){
		FEN[x] ^= v;
		x += x & -x;
	}
}
int get(int x){
	x++;
	int r = 0;
	while(x > 0){
		r ^= FEN[x];
		x -= x & -x;
	}
	return r;
}
struct Query {
	int l,r,i;
	bool operator<(const Query &Q)const{
		return l < Q.l;
	}
};

int main() {

	int N;
	scanf("%d",&N);
	vector<int> V(N);
	vector<int> X_A(N);
	vector<int> X_O(N);
	set<int> S;
	for (int i = 0; i < N; ++i) {
		scanf("%d",&V[i]);
		X_O[i] = V[i];
		if(!S.count(V[i])){
			X_A[i] = V[i];
			S.insert(V[i]);
			ins(i, V[i]);
		}
		if(i > 0){
			X_A[i] ^= X_A[i-1];
			X_O[i] ^= X_O[i-1];
		}
	}
	vector<int> NE(N,-1);
	map<int,int> L;
	for(int i = N-1; i >= 0; --i){
		if(L.count(V[i])){
			NE[i] = L[V[i]];
		}
		L[V[i]] = i;
	}
	int Q;
	scanf("%d", &Q);
	vector<int> A(Q);
	vector<Query> QQ(Q);
	for (int i = 0; i < Q; ++i) {
		int l,r;
		scanf("%d%d", &l,&r);
		l--;r--;
		
		QQ[i].l = l;
		QQ[i].r = r;
		QQ[i].i = i;
		
		int XO = X_O[r]; 
		if(l)XO ^= X_O[l-1]; 
		A[i] = XO;
//		cout << XO << endl;
	}
//	cout << endl;
	sort(QQ.begin(),QQ.end());
	int t = 0;
	for(Query &q : QQ){
		while(t < q.l){
			ins(t,V[t]);
			if(NE[t] != -1){
				ins(NE[t], V[t]);
			}
			t++;
		}
//		cout << q.i << " " << get(q.r) << endl;
		A[ q.i ] ^= get(q.r);
	}
//	cout << endl;
	for(int i = 0; i < Q; ++i){
		printf("%d\n", A[i]);
	}
	
}


/*

1 1 10
10
0 0



 */
