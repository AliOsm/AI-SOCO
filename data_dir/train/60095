/*
1082C. Multi-Subject Competition
*/

#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const ll prime = 1e9 + 7;

#define F(i,a,b) for(ll i = (ll)(a); i <= (ll)(b); i++)
#define RF(i,a,b) for(ll i = (ll)(a); i >= (ll)(b); i--)

int main(){
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  ll n, m, s, r, sk, sum, maxsum=0, maxskillsize=0;
  vector<multiset<ll>> skillcol(100005);
  vector<vector<ll>> skillsum(100005);
  vector<ll> skillsize(100005,0ll);
  set<ll> skillleft, skillleftcopy;
  cin >> n >> m;
  while(n--){
    cin >> s >> r;
    skillcol[s].insert(r);
  }
  
  for(ll i=1; i<=m; i++){
    skillsum[i].push_back(0ll);
    for(auto it=skillcol[i].rbegin(); it!=skillcol[i].rend(); it++){
      sk = (*it) + skillsum[i].back();
      if(sk > 0){
        skillsum[i].push_back(sk);
        skillsize[i]++;
      }
      else{break;}
    }
    maxskillsize = max(maxskillsize,skillsize[i]);
    if(skillsize[i]){skillleft.insert(i);}
  }
  
  for(ll i=1; i<=maxskillsize; i++){
    sum = 0;
    skillleftcopy = skillleft;
    for(auto it1=skillleft.begin(); it1!=skillleft.end(); it1++){
      if(skillsize[*it1] >= i){sum += skillsum[*it1][i];}
      else{skillleftcopy.erase(*it1);}
    }
    skillleft = skillleftcopy;
    maxsum = max(maxsum, sum);
  }
  
  cout << maxsum;
  return 0;
}
