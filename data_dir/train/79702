#include <bits/stdc++.h>
#define ll long long
using namespace std;
ll n , m , k , a [1001][1001] , t [1001][1001] , arr [1001 * 1001] ;
ll sizze [1001 * 1001] ;
vector <pair<ll,pair<int,int>>> num ;
int tri [4] = {1 , 0, -1 , 0} , trj [4] = {0 , 1 , 0 , -1} ;
bool can (int a ,int b) {
    if (a >= 1 && a <= n) {
        if (b <= m && b >= 1) {
            return true ;
        } else {
            return false ;
        }
    } else {
        return false ;
    }
}
int root (int u) {
    while (arr [u] != u) {
        arr [u] = arr [arr [u]] ;
        u = arr [u] ;
    }
    assert(arr [u] == u) ;
    return arr [u] ;
}
void union_ (int u , int v) {
    u = root(u) ;
    v = root(v) ;
    if (u > v) {
        swap(u , v) ;
    }
    if (u != v) {
        sizze [v] += sizze [u] ;
        arr [u] = v ;
    }
}
void bfs (int ii , int jj , int g) {
    queue <pair<int,int>> bfs ;
    bfs.push({ii,jj}) ;
    int i , j , o = a[ii][jj] ;
    g -- ;
    memset(a , 0 , sizeof (a)) ;
    a [ii][jj] = o ;
    while (bfs.size()) {
        ii = bfs.front().first ;
        jj = bfs.front().second;
        bfs.pop() ;
        if (g == 0) {
            break ;
        }
        for (int q = 0 ; q < 4 ; q ++) {
            i = ii + tri [q] ;
            j = jj + trj [q] ;
            if (can(i , j) == true) {
                if (root(t[i][j]) == root(t[ii][jj])) {
                    if (a[i][j] == 0) {
                        a [i][j] = o ;
                        g -- ;
                        bfs.push({i,j}) ;
                        if (g == 0) {
                            break ;
                        }
                    }
                }
            }
        }
        if (g == 0) {
            break ;
        }
    }
    cout << "YES\n" ;
    for (i = 1 ; i <= n ; i ++){
        for (j = 1 ; j <= m ; j ++) {
            cout << a[i][j] << " " ;
        }
        cout << endl ;
    }
}
int main()
{
    ios_base::sync_with_stdio(false) ;
    cin.tie(NULL) ;
    cout.tie(NULL) ;
    cin >> n >> m >> k ;
    for (int i = 1 , N = 1 ; i <= n ; i ++) {
        for (int j = 1 ; j <= m ; j ++) {
            cin >> a[i][j] ;
            t [i][j] = N ;
            arr [N] = N ;
            sizze [N] = 1 ;
            N ++ ;
            num.push_back({a[i][j],{i,j}}) ;
        }
    }
    sort(num.begin() , num.end()) ;
    reverse(num.begin() , num.end()) ;
    int i , j , ii , jj ;
    for (int p = 0 ; p < num.size() ; p ++) {
        i = num [p].second.first ;
        j = num [p].second.second;
        for (int q = 0 ; q < 4 ; q ++) {
            ii = i + tri [q] ;
            jj = j + trj [q] ;
            if (can(ii , jj) == true) {
                if (a [ii][jj] >= a[i][j]) {
                    union_(t [ii][jj] , t[i][j]) ;
                }
            }
        }
        ll g = INT_MAX ;
        if (k % a[i][j] == 0) {
            g = k / a[i][j] ;
        }
        if (sizze [root(t [i][j])] >= g) {
            bfs (i , j , g) ;
            return 0 ;
        }
    }
    cout << "NO" ;
    return 0;
}
