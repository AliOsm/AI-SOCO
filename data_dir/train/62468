#pragma comment(linker, "/STACK:64000000")
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cassert>
#include <ctime>
#include <deque>

#define forn(i, n) for (int i = 0; i < int(n); i ++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i --)
#define mp make_pair
#define pb push_back
#define fs first
#define sc second
#define pi 3.1415926535897932
#define ll long long
#define ld long double

using namespace std;

int n, m, s;
vector <pair<int, int> > a[100100]; 
int d[100100];
int l;
set <pair<int, int> > help;
pair<pair<int, int>, int> e[100100];

int main(){
//  freopen ("input.txt","rt",stdin);
//  freopen ("output.txt","wt",stdout);
    int kol = 0;
    cin >> n >> m >> s;
    s --;
    forn(i, m){
        int t1, t2, t3;
        scanf("%d %d %d", &t1, &t2, &t3);
        t1 --;
        t2 --;
        a[t1].pb(mp(t2, t3));
        a[t2].pb(mp(t1, t3));
        e[i] = mp(mp(t1, t2), t3);
    }
    cin >> l;
    forn(i, n){
        d[i] = (1 << 30);
        if (i != s) help.insert(mp(1 << 30, i));
    }   
    d[s] = 0;
    
    help.insert(mp(0, s));
    forn(i, n){
            pair<int, int> k = (*help.begin());
        help.erase(help.begin());
        forn(j, a[k.sc].size()){
            if (d[a[k.sc][j].fs] > d[k.sc] + a[k.sc][j].sc){
                help.erase(mp(d[a[k.sc][j].fs], a[k.sc][j].fs));
                d[a[k.sc][j].fs] = d[k.sc] + a[k.sc][j].sc;             
                help.insert(mp(d[a[k.sc][j].fs], a[k.sc][j].fs));
            }
        }
    }   
    forn(i, n)
        if (d[i] == l) kol ++;
    forn(i, m){
        int t1 = e[i].fs.fs, t2 = e[i].fs.sc, cost = e[i].sc;
        if (d[t1] + cost > l && d[t1] < l){
            int k = l - d[t1];
            if (d[t1] + k <= d[t2] + cost - k){
                kol ++;
                //cerr << t1 << ' ' << t2 << ' ' << k << endl;
            }               
        }                       
        swap(t1, t2);
                if (d[t1] + cost > l && d[t1] < l){
            int k = l - d[t1];
            if (d[t1] + k < d[t2] + cost - k){
                kol ++;
                //cerr << t1 << ' ' << t2 << ' ' << k << endl;
            }
        }
    }
    cout << kol << endl;
    return 0;
}