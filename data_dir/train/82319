#include <iostream>
#include <fstream>
#include <algorithm>
#include <iomanip>
#include <random>
#include <ctime>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <climits>
#include <cstring>
#include <queue>
#include <deque>
#include <list>
#include <stack>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma GCC optimize("O3")
#define ld long double
#define ull unsigned long long
#define ll long long
#define pb push_back
#define pii pair<int, int>
#define pll pair<ll, ll>
#define all(x) x.begin(), x.end()
#define fast_io cout.tie(0), cin.tie(0), ios_base::sync_with_stdio(0)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
using namespace std;
ld eps = (ld)1 / 1e9;
ll inf = 1e18;
ll sqr(ll a) { return a * a; }
ll gcd(ll a, ll b) { return !a ? b : gcd(b % a, a); }
ll binpow(ll a, ll b, ll mod) { return b ? (b % 2 ? (a * (sqr(binpow(a, b / 2, mod)) % mod)) % mod : sqr(binpow(a, b / 2, mod)) % mod) : 1; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ll kl[8], ps[8];
pll tb[22];

int main()
{
    fast_io;
    ll n, m, i, j, k, x, y, mn = 10, ans = -1;
    cin >> n >> m;
    for (i = 1; i <= m; i++)
    {
        cin >> x >> y;
        kl[x]++, kl[y]++;
        tb[i] = {x, y};
    }
    if (n < 7) cout << m, exit(0);
    for (i = 1; i <= 7; i++) mn = min(mn, kl[i]);
    if (!mn) cout << m, exit(0);
    for (i = 1; i <= 7; i++)
    {
        for (k = 1; k <= 7; k++)
        {
            if (i == k) continue;
            unordered_set<int> chk;
            ps[i] = ps[k] = 1;
            for (j = 1, mn = 2; j <= n; j++) if (j != i && j != k) ps[j] = mn, mn++;
            for (j = 1; j <= m; j++)
            {
                x = tb[j].first, y = tb[j].second;
                mn = 10 * min(ps[x], ps[y]) + max(ps[x], ps[y]);
                chk.insert(mn);
            }
            ans = max(ans, (ll)chk.size());
        }
    }
    cout << ans;
    return 0;
}