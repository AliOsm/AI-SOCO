#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

int solve(const vector<int>& a, const vector<int>& b) {
  int ret = 0, i;
  for (i = 0; i < a.size() && i < b.size(); ++i) {
    ret += a[i] + b[i];
  }
  if (i < a.size()) ret += a[i];
  return ret;
}

int main() {
  int n, sum = 0;
  vector<int> a[2];
  scanf("%d", &n);
  while (n--) {
    int x;
    scanf("%d", &x);
    sum += x;
    a[x % 2].push_back(x);
  }
  for (int k = 0; k < 2; ++k) {
    sort(a[k].begin(), a[k].end(), greater<int>());
  }
  int ret = solve(a[0], a[1]);
  ret = max(ret, solve(a[1], a[0]));
  printf("%d\n", sum - ret);
  return 0;
}
