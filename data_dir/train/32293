#include <bits/stdc++.h>




using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;


#define int ll


typedef pair<int, int> pii;
typedef pair<string, string> pst;
typedef pair<pii, pii> piii;
typedef vector<piii> vpii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector< vi > vvi;
typedef vector< vvi > vvvi;
typedef vector<pii> vpi;
typedef vector<short> vs;
typedef vector<vs> vvs;
typedef vector<vvs> vvvs;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vvl> vvvl;
typedef vector<ld> vld;
typedef vector<vld> vvld;
typedef vector<vvld> vvvld;
typedef vector<string> vst;
typedef vector<vst> vvst;
typedef pair<ld, ld> pld;
typedef pair<pld, pld> pldd;
typedef vector<pld> vpd;
typedef complex<double> base;


#define inmin(a, b) a = min(a, (b))
#define inmax(a, b) a = max(a, (b))
#define my_abs(a) (((a) >= 0) ? (a) : -(a))
#define mp(a, b) make_pair(a, (b))
#define ALL(a) a.begin(),a.end()
#define RALL(a) a.rbegin(),a.rend()
#define sqr(x) ((x) * (x))
#define fori(i, n) for(int i = 0; i < int(n); ++i)
#define SZ(a) ((int)((a).size()))
#define MODIK(a) (a >= M ? a - M : a)
#define triple(T) tuple<T, T, T>
#define quad(T) tuple<T, T, T, T>
#define watch(x) cout << (#x) << " = " << x << endl;
#ifdef MAX_HOME
#define cerr cout
#else
#define cerr if (false) cerr
#endif


const double PI = 2 * acos(0.0);

const string DIGITS = "0123456789";
const string ALPH = "abcdefghijklmnopqrstuvwxyz";

istream &operator >> (istream &in, pii &a)
{
    in >> a.first >> a.second;
    return in;
}


ostream &operator << (ostream &out, pii &a)
{
    out << a.first << ' ' << a.second;
    return out;
}


istream &operator >> (istream &in, pld &a)
{
    in >> a.first >> a.second;
    return in;
}


ostream &operator << (ostream &out, pld &a)
{
    out << a.first << ' ' << a.second;
    return out;
}


template <class T0, class T1>
inline ostream & operator << (ostream &out, pair<T0, T1> &a) {
    return out << "{" << a.first << ", " << a.second << "}";
}

template <class T0, class T1, class T2>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) << ", " << get<2>(a) << "}";
}

template <class T0, class T1, class T2, class T3>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2, T3> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) <<
               ", " << get<2>(a) << ", " <<  get<3>(a) << "}";
}

template<class T>
inline ostream & operator << (ostream &out, vector<T> &a) {
    out << "[";
    fori (i, a.size())
        out << a[i] << vector<string>{", ", "]  "}[i + 1 == a.size()];
    return out;
}


void print(vpi lel)
{
    ofstream cout("output.txt");
    cout << SZ(lel) << '\n';
    for (pii v : lel)
        cout << v << ' ';

    cout.close();
    exit(0);
}


void smain();

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

#ifdef ART_HOME
    freopen("input.txt", "r", stdin);
    clock_t start = clock();
#endif
    cout << setprecision(12) << fixed;
    smain();
#ifdef ART_HOME
    cout << "\n\n\n\nTOTAL EXECUTION TIME: " << float( clock () - start ) /  CLOCKS_PER_SEC << endl;
#endif
}


const int M1 = 1000000093, p1 = 27162;
const int M2 = 1000000087, p2 = 241;

const ld pi = atan2(1, 0) * 2, EPS = 1e-9;
const int pw = 60, N = 1 << 20, oo = 1e15, B = 700, M = 998244353;


int ans[N];


int find_pw(int v)
{
    int l = -1, r = 20;
    while (r - l > 1)
    {
        int m = (l + r) >> 1;

        if ((1 << m) > v)
            r = m;
        else
            l = m;
    }

    return l;
}


vvi made_sparce(vi kek) {
    int n = SZ(kek);
    int pw = find_pw(n);

    vvi sparce(pw + 1);
    for (int i = 0; i <= pw; ++i)
        sparce[i].resize(n);

    for (int i = 0; i < n; ++i)
        sparce[0][i] = kek[i];

    for (int h = 1; h <= pw; ++h)
        for (int i = 0; i + (1 << h) - 1 < n; ++i)
            sparce[h][i] = max(sparce[h - 1][i], sparce[h - 1][i + (1 << (h - 1))]);


    return sparce;
}


int get_max(const vvi &sparce, int l, int r)
{
    int len = r - l + 1;
    int p = find_pw(len);
    return max(sparce[p][l], sparce[p][r - (1 << p) + 1]);
}


void smain()
{
    int n, w;
    cin >> n >> w;

    for (int i = 0; i < n; ++i)
    {
        int k;
        cin >> k;
        int prev = 0;

        vi kek(k);
        for (int j = 0; j < k; ++j)
            cin >> kek[j];

        vvi sparce = made_sparce(kek);
        for (int j = 0; j < k; ++j)
        {


            int l = 0, r = w - k + 1;
            while (r - l > 1)
            {
                int m = (l + r) >> 1;

                if (get_max(sparce, j, min(j + m, k - 1)) == kek[j])
                    l = m;
                else
                    r = m;
            }


            if (prev == j && kek[j] < 0)
            {
                if (w - k < j + 1)
                {
                    int v = get_max(sparce, j - (w - k), j);
                    ans[prev] += v;
                    ans[prev + 1] -= v;
                }

                prev++;
            }

            if (kek[j] < 0)
                continue;

            if (prev >= j + r)
                continue;
            assert(prev <= j + r);
            ans[prev] += kek[j];
            ans[j + r] -= kek[j];
            prev = j + r;
        }
    }

    for (int i = 1; i < N; ++i)
        ans[i] += ans[i - 1];

    for (int i = 0; i < w; ++i)
        cout << ans[i] << ' ';
}