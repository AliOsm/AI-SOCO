#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define MAX 100005
#define pii pair<ll,ll>
#define x first
#define y second
#define MOD 1000000007

map<ll,ll> Par;
map<ll,ll> Size;
pii P[MAX];

ll bigMod(ll n,ll r){
    if(r==0) return 1LL;
    ll ret=bigMod(n,r/2);

    ret=(ret*ret)%MOD;
    if(r%2==1) ret=(ret*n)%MOD;
    return ret;
}

set<ll>Root;
set<ll> :: iterator it;
ll Find(ll x){
    if(Par[x]==x) return x;
    else return Par[x]=Find(Par[x]);
}

void Union(ll a,ll b){
    ll u=Find(a);
    ll v=Find(b);
    if(u!=v) Par[v]=u;
}

map<ll, set<pii> >Line;
int main(){
    ll n,x,y;
    scanf("%I64d",&n);

    for(ll i=1;i<=n;i++){
        scanf("%I64d %I64d",&x,&y);
        y+=1000000000000000;

        P[i]=make_pair(x,y);
        Par[x]=x;
        Par[y]=y;
    }

    for(ll i=1;i<=n;i++) Union(P[i].x,P[i].y);

    for(ll i=1;i<=n;i++){
        Size[Find(P[i].x)]++;

        Root.insert(Find(P[i].x));
        Line[Par[P[i].x]].insert(make_pair(0,P[i].x));
        Line[Par[P[i].x]].insert(make_pair(1,P[i].y));
    }

    ll Ans=1;
    for(it=Root.begin();it!=Root.end();it++){
        ll now;

        if(Line[*it].size()<=Size[*it]) now=bigMod(2,Line[*it].size());
        else now=bigMod(2,Line[*it].size())-1;
        Ans=(Ans*now)%MOD;
    }
    cout<<Ans;
}
