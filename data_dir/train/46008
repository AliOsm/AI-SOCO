#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
using namespace std;
#define F first
#define S second
#define pb push_back
#define MP make_pair
#define MS0(I) memset(I, 0, sizeof(I));
#define ALL(x) begin(x),end(x)
#define SZ(x) ((int)(x).size())
#define rep(i, n) for(int i = 0; i < n; i ++)
#define rep1(i, a, b) for(int i = a; i < b; i ++)
#define per1(i, a, b) for(int i = a; i >= b; i --)
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
typedef long long LL;
typedef long double LDB;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
//////////////////////
const long double eps = 1e-13;
const long double PI = acos(-1);
const int INF = (int)1e9;
const LL  INFF = (LL)1e18;
const int mod = (int)1e9 + 7;
const int MXN = (int)1e5 + 7;
int n, m, q; 
vector<int>edge[MXN];
void init(){
	scanf("%d %d %d", &n, &m, &q);
	rep1(i, 1, m+1){
		int u, v; scanf("%d %d", &u, &v);
		edge[u].pb(v);
		edge[v].pb(u);
	}
	return ;
}
int dep[MXN];
int prt[20][MXN], up[20][MXN];
void dfs(int u, int pa){
	dep[u] = dep[pa] + 1;
	prt[0][u] = up[0][u] = pa;
	for(int v : edge[u]){
		if(v == pa) continue;
		if(dep[v] && dep[v] < dep[up[0][u]]) up[0][u] = v;
		if(!dep[v]) dfs(v, u);
	}
	return ;
}
int lca(int u, int v){
	if(dep[u] > dep[v]) swap(u, v);
	for(int i = 0; dep[v] - dep[u]; ++i)
		if((1<<i) & (dep[v] - dep[u]))
			v = prt[i][v];
	if(u == v) return u;
	per1(i, 18, 0){
		if(prt[i][u] == prt[i][v]) continue;
		u = prt[i][u];
		v = prt[i][v];
	}
	return prt[0][u];
}
void sol(){
	dfs(1, 0);
	rep1(i, 1, 19) rep1(j, 1, n+1){
		up[i][j] = up[i-1][up[i-1][j]];
		prt[i][j] = prt[i-1][prt[i-1][j]];
	}
	while( q-- ){
		int u, v; scanf("%d %d", &u, &v);
		int p = lca(u, v);
		int ans = 0;
		if(u != p){
			per1(i, 18, 0) if(dep[ up[i][u] ] > dep[p]){
				u = up[i][u]; ans += 1<<i;
			}
			ans++;
		}
		if(v != p){
			per1(i, 18, 0) if(dep[ up[i][v] ] > dep[p]){
				v = up[i][v]; ans += 1<<i;
			}
			ans++;
		}
		printf("%d\n", ans);	
	}
	return ;
}
int main(void){
	init();
	sol();
	return 0;
}
