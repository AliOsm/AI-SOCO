#pragma comment(linker, "/STACK:536870912")
#pragma warning(disable:4996)

#include<iostream>
#include<algorithm>
#include<queue>
#include<string>
#include<vector>
#include<map>
#include<list>
#include<set>
#include<cstring>
#include<ctime>
#include<cmath>
#include<limits>
#include<iterator>
#include<functional>
#include<unordered_map>
#include<stack>
#include<bitset>

#define all(v) v.begin(), v.end()
#define setv(ar, val) memset(ar, val, sizeof(ar));
#define ll long long int
#define ull unsigned long long int
#define PI 3.1415926535897932384626433832795
using namespace std;

const int N = 2e5 + 100, M = N * 10, Z = N * 5, INF = 1e9;
char s[N];
bool g[N];
int t[N * 10];
int len;

void upd(int x, int a) {
	for (; x < M; x |= x + 1)
		t[x] = min(t[x], a);
}

int que(int x) {
	int ans = INF;
	for (; x >= 0; x = (x & (x + 1)) - 1)
		ans = min(ans, t[x]);
	return ans;
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	g['a'] = g['e'] = g['i'] = g['o'] = g['u'] = g['A'] = g['E'] = g['I'] = g['O'] = g['U'] = 1;

	scanf(" %s", s);
	len = strlen(s);
	
	setv(t, 127);
	upd(Z, 0);

	int c = 0, l = 0;
	for (int i = 1; i <= len; i++) {
		c += g[s[i - 1]];
		int mn = que(N * 10 - (Z + 3 * c - 2 * i));
		l = max(l, i - mn);
		upd(N * 10 - (Z + 3 * c - 2 * i), i);
	}

	if (l == 0) {
		printf("No solution");
		return 0;
	}

	c = 0;
	int ct = 0;
	for (int i = 0; i < l; i++) {
		c += g[s[i]];
	}
	if (c <= (l - c) * 2)
		ct++;
	for (int i = l; i < len; i++) {
		c += g[s[i]] - g[s[i - l]];
		if (c <= (l - c) * 2)
			ct++;
	}

	printf("%d %d", l, ct);

	
	return 0;
}