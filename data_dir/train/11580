#include <set>
#include <map>
#include <list>
#include <cmath>
#include <queue>
#include <stack>
#include <cstdio>
#include <string>
#include <vector>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <tuple>
#define MAXN 111111
#define MODD 1000000007
#define ll long long

using namespace std;


std::map<pair<string,int>,ll> hashed;

ll GetCounts(string& dig_counts, int digs_left, int mask, int all_mask) {
    
    ll ans = 0;
    if (mask == all_mask) {
        ans++;
    }
    
    if (digs_left == 0)
        return ans;
    
    if (hashed.find(make_pair(dig_counts, mask)) != hashed.end())
        return hashed[make_pair(dig_counts, mask)];
    
    
    for(int d=0;d<=9;d++) {
        if (dig_counts[d]>'a') {
            dig_counts[d]--;
            ans += GetCounts(dig_counts, digs_left-1, mask|(1<<d), all_mask);
            dig_counts[d]++;
        }
    }
    
    return hashed[make_pair(dig_counts, mask)]=ans;
    
}



int main() {
    ll n;
    cin>>n;
    
    string dig_counts(10, 'a');
    while(n) {
        dig_counts[n%10]++;
        n/=10;
    }
    
    int all_mask = 0;
    int total_digs = 0;
    for(int d=0;d<=9;d++) {
        total_digs += dig_counts[d];
        if (dig_counts[d]>'a')
            all_mask |= (1<<d);
    }
    
    
    
    ll ans = 0;
    for(int d=1;d<=9;d++) {
        if (dig_counts[d]>'a') {
            dig_counts[d]--;
            ans += GetCounts(dig_counts, total_digs-1, 1<<d, all_mask);
            dig_counts[d]++;
        }
    }
    cout << ans << endl;
    
    
}
