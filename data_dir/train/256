#include <bits/stdc++.h>
using namespace std;
#define x first
#define y second
#define dbg(x) cout << #x << '=' << x << '\n';
#define ll long long
#define pi pair<int,int>
#define pl pair<long long,long long>
#define lg length()
#define pb push_back
#define MAXN 100005
#define INF 1000000005
#define LINF 1000000000000000005

struct nodwav{
    int l,r,hi,lo;
    vector <int> a,b;
} gol={-1,-1,0,INF,{},{}};

vector <nodwav> wav;

void GenWav(int nod){
    int l=INF,r=0;
    for(int i : wav[nod].a){
        l=min(l,i);
        r=max(r,i);
    }
    wav[nod].hi=r; wav[nod].lo=l;
    if(l>=r) return;
    int mid=(l+r)/2;
    wav.push_back(gol);
    wav[nod].l=wav.size()-1;
    wav.push_back(gol);
    wav[nod].r=wav.size()-1;
    int cnt=0;
    for(int i : wav[nod].a){
        if(i<=mid) wav[wav[nod].l].a.push_back(i),wav[nod].b.push_back(++cnt);
        else wav[wav[nod].r].a.push_back(i),wav[nod].b.push_back(cnt);
    }
    GenWav(wav[nod].l);
    GenWav(wav[nod].r);
}

int QryS(int nod, int lt, int rt, int k){
    if(lt>rt) return 0;
    int l=wav[nod].lo,r=wav[nod].hi;
    if(l==r && l<=k) return rt-lt;
    else if(l>=r) return 0;
    int mid=(l+r)/2;
    int x,y;
    if(lt>=0) x=wav[nod].b[lt];
    else x=0;
    if(rt>=0) y=wav[nod].b[rt];
    else y=0;
    if(mid>=k)
        return QryS(wav[nod].l,x-1,y-1,k);
    else
        return y-x+QryS(wav[nod].r,lt-x,rt-y,k);
}

long long n,q,p[200005],l,d,r,u,cnt11,cnt12,cnt13,cnt21,cnt22,cnt23,cnt31,cnt32,cnt33;

int main(){
    ios_base :: sync_with_stdio(0); cin.tie();
    cin >> n >> q;
    wav.push_back(gol);
    for(int i=1;i<=n;i++) cin >> p[i],wav[0].a.push_back(p[i]);
    GenWav(0);
    for(int i=1;i<=q;i++){
        cin >> l >> d >> r >> u;
        cnt31=QryS(0,-1,l-2,d-1);
        cnt21=QryS(0,-1,l-2,u)-cnt31;
        cnt11=l-1-cnt31-cnt21;
        cnt32=QryS(0,l-2,r-1,d-1);
        cnt22=QryS(0,l-2,r-1,u)-cnt32;
        cnt12=r-l+1-cnt32-cnt22;
        cnt33=QryS(0,r-1,n-1,d-1);
        cnt23=QryS(0,r-1,n-1,u)-cnt33;
        cnt13=n-r-cnt33-cnt23;
        cout << cnt31*(cnt12+cnt22+cnt13+cnt23)+cnt21*(cnt12+cnt13+cnt22+cnt23+cnt32+cnt33)+cnt11*(cnt22+cnt23+cnt32+cnt33)+cnt32*(cnt12+cnt13+cnt22+cnt23)+cnt12*(cnt22+cnt23+cnt33)+cnt22*(cnt13+cnt23+cnt33)+cnt22*(cnt22-1)/2 << '\n';
    }
}
