/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
/* FOR ACM-ICPC WF*/
#include <bits/stdc++.h>

using namespace std;
using ll = long long;
using vi = vector<int>;
using vvi = vector<vi>;
using pii = pair<int, int>;

#define pb push_back

constexpr auto MOD = 1000000007LL;
constexpr auto LINF = (1LL<<60);
constexpr auto INF = 2147483647LL;
constexpr auto PI = 3.1415926535897932384626433;
constexpr auto EPS = 1E-9;

template<typename T1, typename T2>
ostream& operator<<(ostream& out, const pair<T1, T2> p){
	out << p.first << ' ' << p.second;
	return out;
}

template <typename T1, typename T2>
istream& operator>>(istream& in, pair<T1, T2> &p){
	in >> p.first >> p.second;
	return in;
}

auto printVector = []<typename T>(ostream& out, vector<T> v){
	copy(v.begin(), v.end(), ostream_iterator<T>(out, " "));
};

typedef int flow_t, cost_t;
const int MAXN = 3010, MAXM = 150010, DIRECTED = 0, UNDIRECTED = 1;
const flow_t FLOW_INFTY = 0x3fffffff;
const cost_t COST_INFTY = 0x3fffffff;
int N, S, T, now, K;
bool inQ[MAXN];
struct edge {
	flow_t remain;
	cost_t cost;
	int endVertexId, nextEdgeId;
}e[MAXM << 1];
struct vertex {
	int firstEdgeId, firstUnsaturEdgeId;
	cost_t level;
}v[MAXN];

void _addEdge(int begin, int end, flow_t c, cost_t w) {
	e[now].remain = c;
	e[now].cost = w;
	e[now].endVertexId = end;
	e[now].nextEdgeId = v[begin].firstEdgeId;
	v[begin].firstEdgeId = now++;
}

void addEdge(int begin, int end, flow_t c, int edgeType, cost_t w = 1) {
	_addEdge(begin, end, c, w);
	_addEdge(end, begin, edgeType * c, -w);
}

void init() {
	now = 0;
	for (int i = 0; i < N; ++i) v[i].firstEdgeId = -1, inQ[i] = false;
}

bool markLevel(){ // SPFA
	for (int i = 0; i < N; ++i)
		v[i].level = COST_INFTY, v[i].firstUnsaturEdgeId = v[i].firstEdgeId, inQ[i] = false;
	v[S].level = 0;
	queue<int> Q;
	Q.push(S);
	inQ[S] = true;
	while (!Q.empty()) {
		int x = Q.front();
		Q.pop();
		inQ[x] = false;
		for (int i = v[x].firstEdgeId; i >= 0; i = e[i].nextEdgeId) {
			if (e[i].remain && v[e[i].endVertexId].level > v[x].level + e[i].cost) {
				v[e[i].endVertexId].level = v[x].level + e[i].cost;
				if (!inQ[e[i].endVertexId])
					Q.push(e[i].endVertexId), inQ[e[i].endVertexId] = true;
			}
		}
	}
	return v[T].level < COST_INFTY;
}

flow_t extendFlow(int x, flow_t flow) {
	if (x == T) return flow;
	inQ[x] = true;
	flow_t t, total = 0;
	for (int &i = v[x].firstUnsaturEdgeId; i >= 0; i = e[i].nextEdgeId) { // Reference!
		if (v[e[i].endVertexId].level == v[x].level + e[i].cost && e[i].remain && !inQ[e[i].endVertexId]) {
			if (t = extendFlow(e[i].endVertexId, min(flow, e[i].remain)))
				e[i].remain -= t, e[i ^ 1].remain += t, flow -= t, total += t;
			if (0 == flow) break;
		}
	}
	inQ[x] = false;
	return total;
}

int mi[55], mx[55], n, q;

flow_t Dinic() {
	flow_t flow, total = 0;
	cost_t cost = 0;
	while (markLevel())
		while (flow = extendFlow(S, FLOW_INFTY))
			total += flow, cost += flow * v[T].level;
	assert(total == n);
	return cost; // Return total in max flow; return cost in min cost max flow
}

void buildGraph() {
	// Assign N (number of vertices), S (source) and T (sink) here.
	// Vertices are numbered from 0 to N - 1. Hence S and T should be in [0, N).
	N = n*n+n+2;
	S = 0;
	T = N-1;
	init();
	// Add edges here
	for(int i = 1; i <= n; i++){
		for(int j = 1; j <= n; j++){
			addEdge(n*(i-1)+j, T, 1, DIRECTED, 2*j-1);
			for(int k = 1; k <= n; k++)
				if(mi[k] <= i && i <= mx[k])
					addEdge(n*n+k, n*(i-1)+j, 1, DIRECTED, 0);
		}
		addEdge(S, n*n+i, 1, DIRECTED, 0);
	}
	
	return;
}


int main(){
	#ifdef LOCAL
		freopen("input.txt","r",stdin);
//		freopen("output.txt","w",stdout);
	#endif
	ios_base::sync_with_stdio(false);
	
	cin >> n >> q;
	
	fill(mi+1, mi+n+1, 1);
	fill(mx+1, mx+n+1, n);
	for(int i = 0, t, x, y, v; i < q; i++){
		cin >> t >> x >> y >> v;
		for(int i = x; i <= y; i++)
			if(t == 1)
				mi[i] = max(mi[i], v);
			else if(t == 2)
				mx[i] = min(mx[i], v);
			else
				assert(false);
	}
	
	for(int i = 1; i <= n; i++)
		if(mi[i] > mx[i]){
			cout << -1 << endl;
			return 0;
		}
	
	buildGraph();
	
	cout << Dinic() << endl;

	return 0;
}

