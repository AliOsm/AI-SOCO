#include<bits/stdc++.h>
using namespace std;

#define ll             long long
#define LL             long long
#define pii            pair<int, int>
#define pll            pair<ll, ll>
#define pil            pair<int, ll>
#define pli            pair<ll, int>
#define vi             vector<int>
#define vl             vector<ll>
#define vii            vector<pii>
#define vll            vector<pll>
#define vil            vector<pil>
#define vli            vector<pli>
#define pb             push_back
#define ppb            pop_back
#define mp             make_pair
#define ff             first
#define ss             second
#define TN             typename
#define all(v)         v.begin(), v.end()
#define endl           '\n'

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> T lcm(T a, T b) {return a * (b / gcd(a, b));}
template <TN T> T sqr(T a) {return a * a;}
template <TN T> T cube(T a) {return a * a * a;}
template <TN T> inline void smin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void smax(T &a, T b) {a = a > b ? a : b;}
template <TN T> void fill(T a[], T n, T b) {for (int i = 0; i <= n; i++) a[i] = b;}

int in() {
	int n;
	scanf("%d", &n);
	return n;
}

ll Lin() {
	ll n;
	scanf("%lld", &n);
	return n;
}

double Din() {
	double n;
	scanf("%lf", &n);
	return n;
}

const ll inf = (ll)1e17;
const ll mod = (ll)1e9 + 7;
const int N = 5e5 + 5;

vi g[N];
int st[N], et[N], t;

void dfs(int u, int p = -1) {
	st[u] = ++t;
	for (auto v : g[u]) {
		if (p != v) dfs(v, u);
	}
	et[u] = t;
}

struct segment_tree {
	vi tree, prop;
	segment_tree(int n) {
		tree = vi(4 * n), prop = vi(4 * n);
		for (int i = 1; i < 4 * n; i++) {
			tree[i] = 0, prop[i] = 0;
		}
	}
	void propagate(int pos) {
		tree[pos * 2] = prop[pos];
		tree[pos * 2 + 1] = prop[pos];
		prop[pos * 2] = prop[pos];
		prop[pos * 2 + 1] = prop[pos];
		prop[pos] = 0;
	}

	void update(int pos, int left, int right, int x, int y, int val) {
		if (left > y || right < x) return;
		if (left >= x && right <= y) {
			tree[pos] = val;
			prop[pos] = val;
			return;
		}
		if (prop[pos]) propagate(pos);
		int mid = (left + right) >> 1;
		update(pos * 2, left, mid, x, y, val);
		update(pos * 2 + 1, mid + 1, right, x, y, val);
		tree[pos] = max(tree[pos * 2], tree[pos * 2 + 1]);
	}

	int query(int pos, int left, int right, int x, int y) {
		if (left > y || right < x) return INT_MIN;
		if (left >= x && right <= y) return tree[pos];
		if (prop[pos]) propagate(pos);
		int mid = (left + right) >> 1;
		int m = query(pos * 2, left, mid, x, y);
		int n = query(pos * 2 + 1, mid + 1, right, x, y);
		return max(m, n);
	}
};

int solve() {
	int n = in();
	for (int i = 1; i < n; i++) {
		int u = in(), v = in();
		g[u].pb(v);
		g[v].pb(u);
	}
	dfs(1);
	segment_tree fl(t), emt(t);
	int q = in();
	for (int i = 1; i <= q; i++) {
		int ck = in(), u = in();
		if (ck == 1) fl.update(1, 1, n, st[u], et[u], i);
		else if (ck == 2) emt.update(1, 1, n, st[u], st[u], i);
		else {
			int x = fl.query(1, 1, n, st[u], st[u]);
			int y = emt.query(1, 1, n, st[u], et[u]);
			if (x > y) printf("1\n");
			else printf("0\n");
		}
	}
	return 0;
}

int main() {
	int test = 1, tc = 0;
	//scanf("%d", &test);
	while (test--) {
		//printf("Case %d: ", ++tc);
		solve();
	}
	return 0;
}
