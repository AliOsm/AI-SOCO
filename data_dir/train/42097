#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/**------------------------------------BITMASK------------------------------------------**/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/**-----------------------------------------------------------------------------------------------**/

/**-----------------------------DIRECTION_ARRAY-------------------------**/
///------FOUR_DIRECTION---------///
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


///------EIGHT_DIRECTION---------///
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/**--------------------------------------------------------------------------------------**/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}


/*****int exgcd(int A, int B, int *X, int *Y){


    int x2, y2, x1, y1, x, y, r, r1, r2, q;
    x2=1; y2=0;
    x1=0; y1=1;
    for(r2=A, r1=B; r1!=0 ; r2=r1, r1=r, x2=x1, y2=y1, x1=x, y1=y){

        q=r2/r1;
        r=r2%r1;
        x=x2-(x1*q);

        y=y2-(y1*q);
    }
    *X=x2;
    *Y=y2;
    return r2;

}******/




///-----------------------------START FROM HERE--------------------------------------///

vector<int>vv[200005];
vector<int>VV;
bool arr[200005];
int par[200005];
int level[200005];
int st[200005], en[200005];
int T=0;
void dfs(int u, int p, int l){

    st[u]=++T;
    par[u]=p;
    level[u]=l;
    for(int i=0;i<vv[u].size(); i++){

        int v=vv[u][i];
        if(v==p)continue;
        dfs(v, u, l+1);

    }
    en[u]=T;

}
bool comp(int a, int b){

    return level[a]<level[b];
}
bool dfs2(int id){

    if(id==VV.size())return 1;
    if(id!=0){
        int jd=id-1;
        //cout<<VV[jd]<<" "<<st[VV[jd]]<<" "<<st[VV[id]]<<" "<<en[VV[id]]<<endl;
        if(!(st[VV[jd]]<=st[VV[id]] && st[VV[id]]<=en[VV[jd]]))return 0;

    }
    bool ret=dfs2(id+1);
    return ret;


}


int main(){

    int n, m;
    scanf("%d %d", &n, &m);

    for(int i=1; i<n; i++){
        int u, v;
        scanf("%d %d", &u, &v);
        vv[u].pb(v);
        vv[v].pb(u);

    }
    dfs(1, 1, 1);
    for(int cs=1; cs<=m; cs++){

        int nn;
        scanf("%d", &nn);
        for(int i=1; i<=nn; i++){

            int x;
            scanf("%d", &x);
            if(arr[par[x]]==0){
                VV.pb(par[x]);
                arr[par[x]]=1;
            }

        }

        sort(all(VV), comp);
        //for(int i=0; i<VV.size(); i++)cout<<i<<"    "<<VV[i]<<endl;
        bool ans=dfs2(0);
        if(ans)printf("YES\n");
        else printf("NO\n");
        for(int i=0; i<VV.size(); i++)arr[VV[i]]=0;
        VV.clear();
    }
}


