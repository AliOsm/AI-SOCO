//#include <cstdio>
#include <iostream>

#include <cstring>

#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
//#include <queue>
//#include <stack>
#include <cassert>

using namespace std;

#define SZ(a) int((a).size())
#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

typedef long long llong;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<VVI> VVVI;

string RGB = "RGBRGB";

int solve(int N, int K, const string& S) {

   VVVI prefix_sums(3, VVI(3, VI(1, 0)));

   REP(m3, 3) {
   //   cerr << "m3: " << m3 << endl;
      REP(k, 3) {
      //   cerr << k << ": ";
         char c = RGB[k];
         for (int i = m3; i < N; i += 3) {
            int last = prefix_sums[m3][k].back();
            if (S[i] == c)
               ++last;
            prefix_sums[m3][k].push_back( last );
         //   cerr << last << ' ';
         }
      //   cerr << endl;
      }
   }


   int res = N;

   if (K <= 2) {
      REP(L, N) {
         int R = L + K - 1;
         if (R >= N) break;
         REP(rot, 3) {
            int mismatches = 0;
            REP(k, K) {
               if (S[L + k] != RGB[rot + k])
                  ++mismatches;
            }
            res = min(res, mismatches);
         }
      }
      return res;
   }

   REP(L, N) {
      int R = L + K - 1;
      if (R >= N) break;
      int m3 = L % 3;
      REP(rot, 3) {
         int cur = 0;
         REP(j, 3) {
            int i = L + j;
            int bL = i / 3;
            int bR = R / 3;
            if ((R % 3) < (i % 3))
               --bR;

            int total = bR - bL + 1;

            int cnt = prefix_sums[(m3+j)%3][(rot+j)%3][bR+1]
                    - prefix_sums[(m3+j)%3][(rot+j)%3][bL+1-1];
/*
            if (L == 1 && rot == 2)
               cerr << "j:" << j
                    << " bL:" << bL
                    << " bR:" << bR
                    << " cnt:" << cnt
                    << endl;
*/
            cur += (total - cnt);
         }
         res = min(res, cur);
      }
   }

   return res;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(nullptr);

   int TC;
   cin >> TC;
   FOR(tc, 1, TC) {
      int N, K;
      cin >> N >> K;
      string S;
      cin >> S;
      int res = solve(N, K, S);
      cout << res << '\n';
   }

   return 0;
}
