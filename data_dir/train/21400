#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 200;
char s[N], t[N], p[N];

bool contain(char s[], char t[]) {
  int n = strlen(s), m = strlen(t);
  int i, j;
  for (i = 0, j = 0; i < n && j < m; ) {
    if (s[i] == t[j]) {
      ++i;
      ++j;
    } else {
      ++j;
    }
  }
  return i == n;
}

int main() {
  int cas;
  scanf("%d", &cas);
  vector<int> cnt(26);
  while (cas--) {
    scanf("%s%s%s", s, t, p);
    if (!contain(s, t)) {
      puts("NO");
    } else {
      fill(cnt.begin(), cnt.end(), 0);
      for (int i = 0; s[i]; ++i) cnt[s[i] - 'a']++;
      for (int i = 0; t[i]; ++i) cnt[t[i] - 'a']--;
      for (int i = 0; p[i]; ++i) cnt[p[i] - 'a']++;
      bool found = false;
      for (int k = 0; k < 26; ++k) {
        if (cnt[k] < 0) found = true;
      }
      puts(found ? "NO" : "YES");
    }
  }
  return 0;
}
