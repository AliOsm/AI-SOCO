#include<bits/stdc++.h>
using namespace std;

#define int           long long 
#define pi            acos(-1)
#define S             second
#define F             first
#define pb            push_back
#define ppb           pop_back()
#define B(c)          (c).begin()
#define E(c)          (c).end()
#define all(c)        (c).begin(),(c).end()
#define rall(c)       (c).rbegin(),(c).rend() 
#define lb            lower_bound
#define si(c)         (int)((c).size())
#define lcm(a,b)      (a*(b/__gcd(a,b)))  
#define inf           (int)(1<<30)
#define err           cerr << "move" << '\n';
#define oh_no         {cout << -1 << endl; return;}

typedef vector<int>                           vi;
typedef pair<int,int>                         pii;
typedef vector<pii>                           vpi;
typedef pair<int,pii>                         pipii;
typedef vector<vector<int> >                  vvi;
typedef map<int,int>                          mp;
typedef map<string,set<int> >                 msi;
typedef priority_queue<pii, vector<pii>, greater<pii> > pq;

const int N = 5e5+10;
int R[N], siz[N];

int root(int x){
    return R[x] == x ? x : root(R[x]);
}

void union1(int x, int y){
    x = root(x), y = root(y);
    if(x == y)return;
    if(siz[x] < siz[y])swap(x, y);
    siz[x] += siz[y], R[y] = x;
}

void solve(){
    int n;
    cin >> n;
    vector<pair<pii, int > > v;
    int l[n+1], r[n+1];
    for(int i = 1; i <= n; i++){
        R[i] = i, siz[i] = 1;
        cin >> l[i]>> r[i];
        v.pb({{l[i], r[i]}, i});
    }
    sort(all(v));
    set<pair<int, int > >s;
    for(int i = 0; i < si(v); i++){
        while(si(s) && (*B(s)).F < v[i].F.F){
            s.erase(B(s));
        }
        int cnt = 0;
        set<int> temp;
        for(auto u = B(s); u != E(s) && (*u).F < v[i].F.S; u++){
            temp.insert(root((*u).S)), cnt++;
        }
        if(si(temp) < cnt){
            cout << "NO" << endl;return;
        }
        for(auto u = B(temp); u != E(temp); u++){
            union1(*u, v[i].S);
        }
        s.insert({v[i].F.S, v[i].S});
    }
    set<int> ss;
    for(int i = 1; i <= n; i++){
        ss.insert(root(i));
    }
    if(si(ss) == 1){
        cout << "YES" << endl;
    }
    else cout << "NO" << endl;

}

signed main(){

    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);    
    int t = 1;
    clock_t start, end; 
    start = clock(); 

    cout << fixed << setprecision(8);
    

    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
    #endif

    //cin >> t;

    while(t--){
        solve();
    }

    end = clock();
    double time_taken = double(end - start) / double(CLOCKS_PER_SEC); 
    //cerr<<time_taken;
}