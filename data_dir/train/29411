/*input
8 6
1 3 20
4 2 1
6 5 5
10 1 1
15 3 6
21 8 8
*/
#include <iostream>
#include <cstdio>
#include <vector>
#include <functional>
#include <math.h>
#include <string.h>
#include <utility>
#include <algorithm>
#include <iomanip>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <bitset>
#include <list>
#include <stdlib.h>
#include <list>
#include <assert.h>
#include <time.h>
#include <fstream>
#include <sstream>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define ll long long
#define N 105
// const int INF = 1e18;

struct data {
	int t, k, d, type, id;
	data(int _t = 0, int _k = 0, int _d = 0, int _type = 0, int _id = 0): t(_t), k(_k), d(_d), type(_type), id(_id) {};
};

int n, q;
bool used[N];
vector<data> query;
vector<vector<int> > used_server(100005);
int avail_server = 0;
bool cmp(data x, data y) {
	if (x.t != y.t) return x.t < y.t;
	return x.type < y.type;
}

bool cmp2(data x, data y) {
	return x.id < y.id;
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> q; avail_server = n;
	for (int i = 1; i <= q; i++) {
		int t, k, d; cin >> t >> k >> d;
		query.push_back(data(t, k, d, 1, i));
		query.push_back(data(t + d, 0, 0, -1, i));
	}
	sort(query.begin(), query.end(), cmp);
	for (int i = 0; i < query.size(); i++) {
		int type = query[i].type; int id = query[i].id;
		if (type == -1) {
			for (int j = 0; j < used_server[id].size(); j++) {
				int t = used_server[id][j];
				used[t] = false; avail_server++;
			}
		}
		else {
			int k = query[i].k;
			if (avail_server < k) {
				query[i].k = -1;
				continue;
			}
			int ret = 0;
			for (int i = 1; i <= n; i++) {
				if (!used[i]) {
					used[i] = true; used_server[id].push_back(i); ret += i; avail_server--; k--; 
					if (k == 0) break;
				}
			}
			query[i].k = ret;
		}
	}
	sort(query.begin(), query.end(), cmp2);
	for (int i = 0; i < query.size(); i++) {
		if (query[i].type == -1) continue;
		cout << query[i].k << endl;
	}
}