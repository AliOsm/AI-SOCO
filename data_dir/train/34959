#include<bits/stdc++.h>
#define f first
#define s second 
#define ll long long
#define u unsigned
#define pb push_back
#define mp make_pair
#define FX fflush(stdin);cout<<fixed,cout.precision(18);
#define iOS ios_base::sync_with_stdio(false);cin.tie(NULL);
#define ones __builtin_popcount() 
#define pii pair<int,int>
#define pll pair<long long,long long>
#define all(x) x.begin(), x.end()
const char dl='\n';
const long double eps=0.00000001;
const long long MOD=1e9+7;
const long long mod=998244353;
const double PI=3.141592653589793238463;
const long double pi = 4 * atan(1.0);
using namespace std;
void debug() {cout<<endl;}
template <typename H, typename... T> void debug(H p, T... t) {
   std::cout << p<<" ";
   debug(t...);
}
string s,t;
ll ans;
int n,m,k;
//ÏÎÄÓÌÀÉ ßÊÈÉ ÊÎÍÒÅÉÍÅÐ ÏÎÒÐ²ÁÅÍ!!!
stack<char>STACK;
deque<char>DEQUE;
queue<char>QUEUE;
////////////////////////////////////
ll sum[20004];
map<ll,vector<pll>>mapa;
bool comp(pll a,pll b)
{
	return  a.s<b.s;
	/*if(a.s==b.s) return a.f>=b.f;
	return a.s<b.s;*/
}
main()
{
	FX iOS
	ll i,j;
	cin>>n; 
	ll a[n];
	for(i=0;i<n;++i)
		cin>>a[i];
	/*for(i=0;i<n;++i)
	{
		sum[i]+=a[i];
		if(i)
			sum[i]+=sum[i-1];
	}
	for(i=0;i<n;++i)
		for(j=i;j<n;++j)
			mapa[sum[j]-sum[i]+a[i]].pb({i,j});*/
	for(i=0;i<n;++i)
	{
		ll tot=0;
		for(j=i;j<n;++j)
		{
			tot+=a[j];
			mapa[tot].pb({i,j});
		}
	}
		
	vector<pll>ans;
	for(auto iter:mapa)
	{
	   sort(all(iter.s),comp);
		vector<pll>possible;
		for(auto it:iter.s)
		{
			if(!possible.size())
				possible.pb(it);
			else{
				if(it.f>possible.back().s)
				possible.pb(it);
			}
		}
		if(possible.size()>ans.size())
			ans=possible;
	}
	cout<<ans.size()<<endl;
	for(auto it:ans)
		cout<<it.f+1<<" "<<it.s+1<<endl;
	/*for(auto it:mapa)
	{
		cout<<it.f<<endl;
		for(auto iter:it.s)
			cout<<iter.f<<" "<<iter.s<<endl;
	}*/
}