#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 1e5 + 7;

int n, q, c;
int X[N], Y[N], S[N], T[N];
int pre[12][101][101];

int main()
{
    _upgrade
    cin >> n >> q >> c;
    c++;
    for(int i = 0; i < n; i++)
    {
        cin >> X[i] >> Y[i] >> S[i];
    }
    for(int k = 0; k < c; k++)
    {
        for(int i = 0; i < n; i++)
        {
            T[i] = (S[i] + k) % c;
            pre[k][X[i]][Y[i]] += T[i];
        }
        for(int i = 1; i <= 100; i++)
        {
            for(int j = 1; j <= 100; j++)
            {
                pre[k][i][j] += pre[k][i - 1][j] + pre[k][i][j - 1] - pre[k][i - 1][j - 1];
            }
        }
    }
    while(q--)
    {
        int t, x1, y1, x2, y2;
        cin >> t >> x1 >> y1 >> x2 >> y2;
        t %= c; x1--, y1--;
        int ans = pre[t][x2][y2] - pre[t][x1][y2] - pre[t][x2][y1] + pre[t][x1][y1];
        cout << ans << "\n";
    }
	return 0;
}
