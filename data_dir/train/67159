#include <algorithm>
#include <vector>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <cstring>
#define pb push_back
#define mp make_pair
#define pp pair<int, int>
#define ppp pair<pp, int>
#define pp4 pair<pp, pp>
#define pp3 pair<ll, pair<int, int> > 
#define fi first
#define se second
#define N  50050
#define mod 1000000007
#define inf 2000000001
#define esp 1e-9
#define BLOCK 333
#define BITNUM 555
#define BASE 311097
typedef long long ll;
const ll oo = (ll)1e18 + 1;
using namespace std;
int n;
pp4 ds[N];
bool mark[N];
vector<int> choose;

bool cmp(pp4 x, pp4 y) {
    return x.fi.fi < y.fi.fi || 
    (x.fi.fi == y.fi.fi && x.fi.se < y.fi.se) || 
    (x.fi.fi == y.fi.fi && x.fi.se == y.fi.se && x.se.fi < y.se.fi);
}

int main() {
    ios::sync_with_stdio(false);

    cin >> n;
    for (int i = 1; i <= n; i++) {
        int x, y, z;
        cin >> x >> y >> z;
        ds[i] = mp(mp(x, y), mp(z, i));
    }

    int loss = 0;
    sort(ds + 1, ds + n + 1, cmp);
    for (int i = 1; i <= n; i++) {
        choose.pb(i);
        if (i == n || ds[i].fi.fi != ds[i + 1].fi.fi || ds[i].fi.se != ds[i + 1].fi.se) {
            for (int j = 0; j < (int)choose.size() - 1; j += 2) {
                int u = choose[j];
                int v = choose[j + 1];
                cout << ds[u].se.se << " " << ds[v].se.se << "\n";
                mark[ds[u].se.se] = true;
                mark[ds[v].se.se] = true;
                loss += 2;
            }
            choose.clear();
        }
    }
    if (loss == n) return 0;
    sort(ds + 1, ds + n + 1, cmp);
    choose.clear();
    for (int i = 1; i <= n; i++) {
        if (mark[ds[i].se.se] == false) choose.pb(i);
        if (i == n || ds[i].fi.fi != ds[i + 1].fi.fi) {
            for (int j = 0; j < (int)choose.size() - 1; j += 2) {
                int u = choose[j];
                int v = choose[j + 1];
                cout << ds[u].se.se << " " << ds[v].se.se << "\n";
                mark[ds[u].se.se] = true;
                mark[ds[v].se.se] = true;
                loss += 2;
            }
            choose.clear();
        }
    }

    if (loss == n) return 0;
    choose.clear();
    for (int i = 1; i <= n; i++)
        if (mark[ds[i].se.se] == false) {
            choose.pb(ds[i].se.se);
        }    

    for (int i = 0; i < choose.size() - 1; i += 2) {
        cout << choose[i] << " " << choose[i + 1] << "\n";
    }
    return 0;
}


