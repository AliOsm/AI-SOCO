#include <bits/stdc++.h>
using namespace std;
 
const int MAXN = 700005;
const int mod = 1000000007;
 
int n, m;
int cn;
int ord[MAXN];
int dis[MAXN];
vector<pair<int, int> > g[MAXN];

void addEdge(int i, int u, int v) {
	string w = "";
	while (i) {
		w += i%10 + '0';
		i/=10;
	}
	reverse(w.begin(), w.end());
	for (int j = 0; j+1 < w.size(); j++) {
		g[u].push_back(make_pair(cn, w[j]-'0'));
		g[cn].push_back(make_pair(u, w[w.size() - 1 - j]-'0'));
		u = cn;
		cn++;
	}
	g[u].push_back(make_pair(v, w[w.size() - 1]-'0'));
	g[v].push_back(make_pair(u, w[0]-'0'));
}
 
int main()
{
	scanf("%d %d", &n, &m);
	cn = n;
	for (int i = 0; i < m; i++) {
		int u, v;
		scanf("%d %d", &u, &v);
		u--;
		v--;
		addEdge(i + 1, u, v);
	}
	priority_queue<pair<pair<int, int>, pair<int, int> > >q;
	q.push(make_pair(make_pair(0, 0), make_pair(0, 0)));
	int cnt = 1;
	pair<int, int> prev = make_pair(0, 0);
	while (!q.empty()) {
		pair<pair<int, int>, pair<int, int> > cur = q.top();
		q.pop();
		int u = cur.second.first;
		int p = cur.second.second;
		if (ord[u]) continue;
		if (prev != cur.first) cnt++;
		ord[u] = cnt;
		prev = cur.first;
		dis[u] = (dis[p] * 10ll + -cur.first.second) % mod;
		for (int i = 0; i < g[u].size(); i++) {
			if (ord[g[u][i].first]) continue;
			q.push(make_pair(make_pair(-ord[u], -g[u][i].second), make_pair(g[u][i].first, u)));
		}
	}
	for (int i = 1; i < n; i++) {
		printf("%d\n", dis[i]);
	}
}