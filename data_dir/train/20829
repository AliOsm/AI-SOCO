#include <bits/stdc++.h>
using namespace std;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl




typedef long long ll;
const ll mod = 1e9+7;
const int maxn = 1e6 + 5;



//funnily enough, if smallest perm cycle is len>2,
//then it's impossible (try it..). otherwise, we can just attach all cycles onto this cycle of len 1-2 xD

//len=2 mid cycle will split all other cycles alternately


int n;
int p[maxn];

vector<vector<int>> cycles;
int viz[maxn];
vector<int> cur;

void dfs(int at) {
    if (viz[at]++) return;
    cur.push_back(at);
    dfs(p[at]);
}

vector<pair<int,int>> edges;

int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);
    cin>>n;
    for (int i=1; i<=n; i++) {
	cin>>p[i];
    }

    for (int i=1; i<=n; i++) {
	if (!viz[i]) {
	    cur.clear();
	    dfs(i);
	    cycles.push_back(cur);
	}
    }

    sort(cycles.begin(), cycles.end(), [](vector<int> v1, vector<int> v2) {
	    return v1.size()<v2.size();
	});


    if ((int)cycles[0].size() > 2) out("NO");

    vector<int> mid = cycles.front();
    cycles.erase(cycles.begin());
    int len = mid.size();
    if (len == 2) {
	edges.emplace_back(mid[0], mid[1]);
    }

    for (auto v: cycles) {
	int N = v.size();
	if (N%len != 0) out("NO");
	for (int i=0; i<N; i++) {
	    edges.emplace_back(mid[i%len], v[i]);
	}
    }

    cout<<"YES"<<endl;
    for (auto p: edges) {
	cout<<p.first<<" "<<p.second<<"\n";
    }


    return 0;
}
