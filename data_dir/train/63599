#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;

const int MAX = 2e5 + 5;
vector<int> adj[MAX], guys[MAX];
bool present[MAX], processed[MAX];
int pset[MAX], size[MAX], father[MAX], val[MAX];
ll total[MAX];
int n;

int find_set(int i) {
	return pset[i] == i ? i : pset[i] = find_set(pset[i]);
}

inline void union_sets(int i, int j) {
	if(rand() & 1) {
		swap(i, j);
	}
	int pi = find_set(i);
	int pj = find_set(j);
	if(pi != pj) {
		size[pj] += size[pi];
		pset[pi] = pj;
	}
}

void dfs(int node) {
	for(auto &each : adj[node]) {
		if(each != father[node]) {
			father[each] = node;
			dfs(each);
		}
	}
}

int main() {
	srand(time(nullptr));

	scanf("%d", &n);
	fori(i, 1, n + 1) {
		scanf("%d", val + i);
		guys[val[i]].push_back(i);
	}

	fori(i, 0, n - 1) {
		int u, v;
		scanf("%d %d", &u, &v);
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	father[1] = -1;
	dfs(1);

	ford(i, (int) 2e5, 1) {
		vector<int> all;
		for(int j = i; j <= (int) 2e5; j += i) {
			total[i] -= total[j];
			for(auto &each : guys[j]) {
				pset[each] = each;
				size[each] = 1;
				all.push_back(each);
				present[each] = true;
			}
		}

		for(auto &each : all) {
			if(father[each] != -1 && present[father[each]]) {
				union_sets(each, father[each]);
			}
		}

		for(auto &each : all) {
			int p = find_set(each);
			if(!processed[p]) {
				processed[p] = true;
				total[i] += (1LL * size[p] * (size[p] + 1)) / 2;
			}
		}

		for(auto &each : all) {
			present[each] = false;
			processed[each] = false;
		}
	}

	fori(i, 1, 2e5 + 1) {
		if(total[i]) {
			printf("%d %lld\n", i, total[i]);
		}
	}

	return 0;
}
