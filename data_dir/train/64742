// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = 3003;

int n, m, cnt, cur, p[N], inv[N];
bool vis[N];
VII res;

void dfs(int v) {
  vis[v] = true;
  ++cnt;
  if (!vis[p[v]])
    dfs(p[v]);
}

int main() {
  init_ios();
  cin >> n;
  for (int i = 1; i <= n; ++i) {
    cin >> p[i];
    inv[p[i]] = i;
  }
  for (int i = 1; i <= n; ++i)
    if (!vis[i]) {
      cnt = 0;
      dfs(i);
      cur += cnt-1;
    }
  cin >> m;
  while (cur < m) {
    for (int i = 1; i <= n; ++i)
      vis[i] = false;
    dfs(1);
    for (int i = 2; i <= n; ++i)
      if (!vis[i]) {
        res.PB({1, i});
        swap(p[1], p[i]);
        ++cur;
        break;
      }
  }
  while (cur > m) {
    for (int i = 1; i <= n; ++i)
      vis[i] = false;
    int fi = 1;
    while (p[fi] == fi)
      ++fi;
    dfs(fi);
    for (int i = fi+1; i <= n; ++i)
      if (vis[i]) {
        res.PB({fi, i});
        swap(p[fi], p[i]);
        --cur;
        break;
      }
  }
  cout<<res.size()<<"\n";
  for (auto el: res)
    cout<<el.ST<<" "<<el.ND<<" ";
  cout<<"\n";
}