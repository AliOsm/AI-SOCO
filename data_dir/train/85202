#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
 
#define ll long long
#define mp make_pair
#define pb push_back
#define s second
#define f first
#define endl "\n"
#define ll long long
 
// using namespace __gnu_pbds;
using namespace std;
// template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>; 
 
const ll inf = (ll)1e14;
const int mod = (int)1e9 + 7;
const int N = (int)300100;
const double eps = 1e-10;                                     
const double pi = acos(-1.0);
 
int n;
int x[N], ans[N];
int main(){
	ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0); 
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	cin >> n;
    int mx = -1, mn = (int)1e9 + 1;
    
    for (int i = 1; i <= n; ++i) {
        cin >> x[i], x[i + n] = x[i], x[i + n + n] = x[i];
        mx = max (mx, x[i]);
        mn = min (mn, x[i]);
    }
    
    if (mx <= 2 * mn) {
        for (int i = 1; i <= n; ++i) cout << -1 << " ";
        return 0;
    }
    
    int p1 = 1;
    multiset<int> st;
    for (int i = 1; i <= n; ++i) {
        while ((st.empty() || *st.rbegin() <= 2 * x[p1]) && p1 <= 3 * n) {
            st.insert(x[p1]);
            ++p1;
        }
        ans[i] = p1 - i;
        if (st.count(x[i]))
            st.erase(st.find(x[i]));
    }
    for (int i = 1; i <= n; ++i) cout << ans[i] << " ";
    return 0;
 
}