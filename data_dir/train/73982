//{{{By oToToT
#include <iostream>
#include <iomanip>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <random>
#include <utility>
#include <stack>
#include <sstream>
#include <functional>
#include <deque>
#include <cassert>
using namespace std;
/* include everything for Kotori~ <3 */

typedef long long lld;
typedef unsigned long long llu;
typedef long double llf;
typedef pair<int,int> PII;
typedef pair<int,lld> PIL;
typedef pair<lld,int> PLI;
typedef pair<lld,lld> PLL;
template<typename T>
using maxHeap = priority_queue<T,vector<T>,less<T>>;
template<typename T>
using minHeap = priority_queue<T,vector<T>,greater<T>>;
/* define some types for Ruby! */

#define FF first
#define SS second
#define SZ(x) (int)(x.size())
#define ALL(x) begin(x), end(x)
#define PB push_back
#define WC(x) while(x--)
/* make code shorter for Di~a~ */

template<typename Iter>
ostream& _out(ostream &s, Iter b, Iter e) {
	s<<"[";
	for ( auto it=b; it!=e; it++ ) s<<(it==b?"":" ")<<*it;
	s<<"]";
	return s;
}
template<typename A, typename B>
ostream& operator <<( ostream &s, const pair<A,B> &p ) { return s<<"("<<p.FF<<","<<p.SS<<")"; }
template<typename T>
ostream& operator <<( ostream &s, const vector<T> &c ) { return _out(s,ALL(c)); }
/* make output easier for Ainyan~n~ */

bool debug = 0;
#define DUMP(x) if(debug) cerr<<__PRETTY_FUNCTION__<<":"<<__LINE__<<" - "<<#x<<"="<<x<<'\n'
template<typename T>
void DEBUG(const T& x){if(debug) cerr<<x;}
template<typename T, typename... Args>
void DEBUG(const T& head,const Args& ...tail){
	if(debug){cerr<<head; DEBUG(tail...);}
}
/* Let's debug with Nico~Nico~Ni */
//}}}
const int N = 2000 + 5;

int n, m, p;
lld man[N], key[N];
bool done[N];
bool check(lld);
inline lld cost(lld,lld);

int main(int argc, char* argv[]){
	if(argc>1 and string(argv[1])=="-D") debug=1;
	if(!debug){ios_base::sync_with_stdio(0);cin.tie(0);}
	cin>>n>>m>>p;
	DUMP(cost(100, 60));
	for(int i=0;i<n;i++) cin >> man[i];
	for(int i=0;i<m;i++) cin >> key[i];
	sort(man, man+n); sort(key, key+m);
	lld l = -1, r = 10000000000LL + 5;
	while(r-l > 1){
		lld mid = (l+r)>>1;
		if(check(mid)) r = mid;
		else l = mid;
	}
	cout << r << '\n';
	return 0;
}

inline lld cost(lld p1, lld k1){
	if(p1 <= p){
		if(k1 <= p1) return p1-k1 + p-k1;
		else if(k1 <= p) return p-p1;
		else return k1-p1 + k1-p;
	}else{
		if(k1 <= p) return p-k1 + p1-k1;
		else if(k1 <= p1) return p1-p;
		else return k1-p + k1-p1;
	}
}

bool check(lld dis){
	for(int i=0;i<n;i++) done[i] = false;
	// DUMP(dis);
	int ll = 0, rr = m;
	for(int i=0;i<n;i++){
		if(man[i] >= p or key[ll] >= p) break;
		// DUMP(man[i]);
		while(ll < rr and cost(man[i], key[ll]) > dis){
			ll++;
		}
		if(ll == rr) return false;
		// DEBUG(man[i], " at ", key[ll], '\n');
		ll++;
		done[i] = true;
	}
	for(int i=n-1;i>=0;i--){
		if(done[i]) break;
		while(ll < rr and cost(man[i], key[rr-1]) > dis){
			rr--;
		}
		// DEBUG("> ", cost(man[i], key[rr-1]), ' ');
		// DEBUG(ll, ", ", rr ,'\n');
		if(ll == rr) return false;
		rr--;
		// DEBUG(man[i], " at ", key[rr], '\n');
		// DEBUG("[", ll, ", ", rr, ")\n");
		done[i] = true;
	}
	return true;
}