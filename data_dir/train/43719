#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

const ll MOD = 998244353;

ll binpow(ll x, ll y){
    ll res = 1;
    while(y){
        if (y & 1)
            res = (res * x) % MOD;
        x = (x * x)%MOD;
        y>>=1;
    }
    return res;
}
int n, m, a[1100][1100], r, c;

ll dp[1000100];

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);
    cin >> n >> m;
    vector <pair<int, pair<int, int> > > vec;
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= m; j++){
            cin >> a[i][j];
            vec.push_back({a[i][j], {i, j}});
        }
    }
    cin >> r >> c;
    sort(vec.begin(), vec.end());
    int ptr = 0;
    ll kol = 0;
    ll ans = 0;
    ll sumsx = 0, sumsy = 0;
    ll sum1 = 0, sum2 = 0;
    vec.insert(vec.begin(), {0, {0, 0}});
    ptr = vec.size()-1;
    for (int i = 1; i < vec.size(); i++){
        ++kol;
        sumsx = (sumsx + vec[i].second.first*vec[i].second.first)%MOD;
        sumsy = (sumsy + vec[i].second.second*vec[i].second.second)%MOD;
        sum1 = (sum1 - 2*vec[i].second.first%MOD+MOD)%MOD;
        sum2 = (sum2 - 2*vec[i].second.second%MOD+MOD)%MOD;
        if (vec[i].second.first == r && vec[i].second.second == c){
            ++dp[i];
            --dp[i-1];
        }
    }
    for (int i = vec.size()-1; i >= 1; i--){
        ll x = vec[i].second.first, y = vec[i].second.second;
        dp[i] = (dp[i] + dp[i+1])%MOD;
        while(ptr > 0 && vec[ptr].first >= vec[i].first){
            --kol;
            sumsx = (sumsx - vec[ptr].second.first*vec[ptr].second.first%MOD+MOD)%MOD;
            sumsy = (sumsy - vec[ptr].second.second*vec[ptr].second.second%MOD+MOD)%MOD;
            sum1 = (sum1 + 2*vec[ptr].second.first%MOD+MOD)%MOD;
            sum2 = (sum2 + 2*vec[ptr].second.second%MOD+MOD)%MOD;
            --ptr;
        }
        if (vec[i].first < a[r][c] || (x == r && y == c) ){
            ll myVer = dp[i];
            ll curans = (sumsx + sumsy + kol*x*x + kol*y*y)%MOD;
            curans = (curans + sum1*x + sum2*y)%MOD;
            curans = curans*myVer%MOD*binpow(kol, MOD-2)%MOD;
            dp[ptr] = (dp[ptr] + myVer*binpow(kol, MOD-2))%MOD;
            ans = (ans + curans)%MOD;
        }
    }
    cout << ans;

}
