#include <iostream>
#include <map>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <vector>
#include <cstring>
#include <cstdlib>

#define mp make_pair
#define pb push_back
#define ppb pop_back
#define X first
#define Y second
#define next next_

using namespace std;

int n, m;
int x[2100], y[2100];
int next[2100];
int pr[2100];
int u[2100];
int fir[2100];
int sec[2100];
int it;

int dfs(int v, int z){
    if (u[v] == it){
       return 0;
    }
    u[v] = it;
    
    int i = pr[v];
    while (i){
          if (y[i] != z){
             if (sec[y[i]] == 0){
                sec[y[i]] = v;
                fir[v] = y[i];
                return 1;
             }
          }
          i = next[i];
    }
    
    i = pr[v];
    while (i){
          if (y[i] != z){
             if (dfs(sec[y[i]], z)){
                sec[y[i]] = v;
                fir[v] = y[i];
                return 1;
             }
          }
          i = next[i];
    }    
    
    return 0;
}

int main(){
    cin >> n >> m;
    for (int i = 1; i <= m; i++){
        cin >> x[i] >> y[i];
        next[i] = pr[x[i]];
        pr[x[i]] = i;
    }
    
    int ans = 1000000000;
    
    for (int v = 1; v <= n; v++){
        int tmp = 0;
        
        memset(u, 0, sizeof(u));
        for (int i = 1; i <= m; i++)
            if (x[i] == v)
               u[y[i]]++;
               
        for (int i = 1; i <= n; i++)
            if (i != v)
               tmp += abs(1 - u[i]);
               
               
        memset(u, 0, sizeof(u));
        for (int i = 1; i <= m; i++)
            if (y[i] == v)
               u[x[i]]++;
               
        for (int i = 1; i <= n; i++)
            if (i != v)
               tmp += abs(1 - u[i]);
               
        if (u[v] == 0) tmp++;
        
        memset(u, 0, sizeof(u));
        memset(fir, 0, sizeof(fir));
        memset(sec, 0, sizeof(sec));
        int cnt = 0;
        it = 0;
        
        for (int i = 1; i <= n; i++){
            if (i == v) continue;
            
            it++;
            
            if (dfs(i, v)) cnt++;
        }
        
        int zag = 0;
        for (int i = 1; i <= m; i++)
            if (x[i] != v)
               if (y[i] != v) zag++;
               
        tmp += zag - cnt + n - 1 - cnt;
        
        
//        cout << tmp << " " << zag << " " << cnt << endl;
                
        ans = min(ans, tmp);
    }
    
    cout << ans << endl;
//        system("pause");
    return 0;
}

