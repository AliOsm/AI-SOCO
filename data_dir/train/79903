#include <bits/stdc++.h>
using namespace std;
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
#define ll long long
#define ld long double
#define pb push_back
#define fe first
#define se second
#define st(x) sort(x.begin(),x.end())
#define rst(x) sort(x.rbegin(),x.rend())
const long double pi = 3.14159265358979323;

const double EPS = 1e-12;
const int N = 1e6 + 5;
const int mod = 998244353;
//trie
typedef struct node
{
	struct node *alpha[3];
	bool endofword;	
	 node():endofword(0){
        for( int i = 0 ; i < 3 ; i++ ){
            alpha[ i ] = NULL ;
        }
    }
}trie;

trie *root ;
void insert(string &s)
{
	trie *curr;
	curr = root;
	curr -> endofword = false;

	for(int i = 0 ; i < s.size() ; i++)
	{
		if(curr ->alpha[s[i] - 'a'] == NULL)
			curr -> alpha[s[i] - 'a'] = new trie;
		curr = curr -> alpha[s[i] - 'a']; 
	}
	curr -> endofword = true;
}
string t ;
bool search(trie *curr , int ind , int val )
{	
	if(val > 1)
		return 0 ;
	if(curr == NULL)
		return 0 ;
	if(ind == t.size())
	{
		if(val == 1 && curr -> endofword)
			return 1;
		else
			return 0;

	}
	int check = 0;
	for(int i = 0 ; i  < 3 ; i++)
	{
		if(i == t[ind] - 'a')
			check = search(curr -> alpha[i] , ind + 1 , val);
		else
		 check = search(curr -> alpha[i] , ind + 1 , val + 1);
		if(check)
			return true;
	}
	return check;


}
int main()
{
    
    fast;
    root = new trie;
    ll n , m ;
    cin >> n >> m ;
    string s;
    while(n--)
    {
    	cin >> s ;
    	insert(s);
    }
    while(m--)
    {
    	cin >> t;
    	if(search(root , 0 , 0))
    		cout << "YES" << "\n";
    	else
    		cout << "NO" << "\n";
    }



return 0;
}