#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <sstream>
#include <string>
#include <map>
#include <set>
#include <algorithm>
#include <iomanip>
#include <functional>
#include <bitset>
#include <cassert>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <memory.h>
#include <complex>
#include <numeric>
using namespace std;
#pragma comment(linker, "/STACK:256000000")
#define mp make_pair
#define pb push_back
#define all(C) (C).begin(), (C).end()
#define sz(C) (int)(C).size()
#define PRIME 1103
#define PRIME1 31415
#define INF ((1ll << 30) - 1)
#define MOD 1000000007
#define FAIL ++*(int*)0
#define EPS 1e-8
template<class T> T sqr(T a) {return a * a;}
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pi64;
typedef pair<int, pii> piii;
typedef vector<int> vi;
typedef vector<int64> vi64;
typedef vector<vi64> vvi64;
typedef vector<pi64> vpi64;
typedef vector<vpi64 > vvpi64;
typedef vector<pii> vpii;
typedef vector<vector<int> > vvi;
typedef vector<vvi> vvvi;
typedef vector<vector<pair<int, int > > > vvpii;
typedef vector<vector<vector<pair<int, int > > > > vvvpii;
typedef complex<double> cd;
#define TASK "kebab"
//------------------------------------------------------------
int n, m;
int men[100];
int vomen[100];
int tas[100000];
int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    cin >> n;
    for(int i = 0; i < n; ++i)
        cin >> men[i];
    cin >> m;
    for(int i = 0; i < m; ++i)
        cin >> vomen[i];
    sort(men, men + n);
    sort(vomen, vomen + m);
    int l = 0;
    int res = 0;
    for(int i = 0;  i < n; ++i)
    {
       
        while(vomen[l] + 1 < men[i] && l < m)
            l++;
        if (l >= m)
            break;
        if (abs(vomen[l] - men[i]) <= 1)
        {
            l++;
            res++;
        }
    }
    cout << res; 
    return 0;
}