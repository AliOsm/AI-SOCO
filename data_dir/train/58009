#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <random>
#include <unordered_set>
#include <complex>
#include <assert.h>
#include <deque>

#define ll long long
#define ld long double
#define ull unsigned ll
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()

using namespace std;

const int nax = 2 * 1000 * 100 + 5;

int a[nax];
ll dp[nax][3];

void upd(ll& a, ll b) {
	a = min(a, b);
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("lines.in", "r", stdin);
	//freopen("javacert.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0); cout.setf(ios::fixed); cout.precision(20);
	int t;
	cin >> t;

	while (t--) {
		int n;
		ll c1, c2;
		cin >> n >> c1 >> c2;

		for (int i = 1; i <= n; i++) {
			char c;
			cin >> c;
			a[i] = c - '0';
		}

		for (int i = 0; i <= n + 1; i++) {
			for (int j = 0; j < 3; j++) {
				dp[i][j] = 1e18;
			}
		}

		dp[0][1] = c2;
		for (int i = 0; i < n; i++) {
			if (a[i + 1] == 0) {
				upd(dp[i + 1][1], dp[i][1] + c2 + c1);
				upd(dp[i + 1][1], dp[i][2] + c2 + c1 * 2);
				upd(dp[i + 1][2], dp[i][1] + c2 * 2 + c1 * 2);
				upd(dp[i + 1][2], dp[i][2] + c2 * 2 + c1);
			}
			else {
				upd(dp[i + 1][2], dp[i][2] + 2 * c2 + c1);
			}

		}

		cout << dp[n][1] << '\n';
	}
	return 0;
}