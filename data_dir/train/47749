#include<bits/stdc++.h>
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
using namespace std;
const ll mod=1e9+7;         
const int N=1e5+4;
struct util
{
    int fa[26]={0};
};
util tree[4*N];
string s;
void build(int node,int st,int end)
{
    if(st==end)
    {
        tree[node].fa[s[st]-'a']++;
        return;
    }
    int mid=(st+end)/2;;
    build(2*node,st,mid);
    build(2*node+1,mid+1,end);
    rep(i,0,26)
    tree[node].fa[i]=tree[2*node].fa[i]+tree[2*node+1].fa[i];
}
void update(int node,int st,int end,int ind,char ch)
{
    if(st==end)
    {
        tree[node].fa[s[ind]-'a']=0;
        s[st]=ch;
        tree[node].fa[ch-'a']=1;
        return;
    }
    int mid=(st+end)/2;
    if(ind<=mid)
    update(2*node,st,mid,ind,ch);
    else
    update(2*node+1,mid+1,end,ind,ch);
    rep(i,0,26)
    tree[node].fa[i]=tree[2*node].fa[i]+tree[2*node+1].fa[i];
}
util query(int node,int st,int end,int l,int r)
{
    if(st>r||end<l)
    {
        util temp;
        rep(i,0,26)
        temp.fa[i]=0;
        return temp;
    }
    if(st>=l&&end<=r)
    return tree[node];
    int mid=(st+end)/2;
    util a,b,c;
    a=query(2*node,st,mid,l,r);
    b=query(2*node+1,mid+1,end,l,r);
    rep(i,0,26)
    c.fa[i]=a.fa[i]+b.fa[i];
    return c;
}
int main()                  
{
    cin>>s;
    int n=s.size();
    build(1,0,n-1);
    int q;
    scn(q);
    while(q--)
    {
        int type;
        scn(type);
        if(type==1)
        {
            int ind;
            char ch;
            cin>>ind>>ch;
            update(1,0,n-1,ind-1,ch);
        }
        else
        {
            int l,r;
            cin>>l>>r;
            int ans=0;
            util temp=query(1,0,n-1,l-1,r-1);
            rep(i,0,26)
            if(temp.fa[i]>0)
            ans++;
            priln(ans);
        }
    }
}