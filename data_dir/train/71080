// KALAM
# include <bits/stdc++.h>

using namespace std;
const int N = 4  , Mod = 1e9 + 7;

struct Matrix{
	int n , m , M[N][N];
	Matrix (int n1 , int m1){
		n = n1 ;m = m1;
		Clear();
	}
	void Clear(){
		for(int i = 0;i < n;i++){
			for(int j = 0;j < m;j++){
				M[i][j] = 0;
			}
		}
	}
	void Identity(){
		Clear();
		if(n != m){
			cerr << "Cannot Make Identity Matrix Not Compatible\n";
			return;
		}
		for(int i = 0;i < n;i++){
			M[i][i] = 1;
		}
	}
	void Print(){
		cerr << "***\n";
		for(int i = 0;i < n;i++){
			for(int j = 0;j < m;j++){
				cerr << M[i][j] << ' ';
			}
			cerr << '\n';
		}
		cerr << "***\n";
	}
	void Fill(int t){
		for(int i = 0;i < n;i++){
			for(int j = 0;j < m;j++){
				M[i][j] = t;
			}
		}
	}
	Matrix operator * (const Matrix &T){
		
		Matrix R = Matrix(n , T.m);R.Clear();
		if(m != T.n){
			cerr << "Matrices not Compatible for multiplying\n";return R;
		}
		for(int i = 0;i < n;i++){
			for(int j = 0;j < T.m;j++){
				for(int k = 0;k < m;k++){
					R.M[i][j] = (R.M[i][j] + M[i][k] * 1ll * T.M[k][j]) % Mod;
				}
			}
		}
		return R;
	}
	Matrix operator + (const Matrix &T){
		Matrix R = Matrix(n , m);
		R.Clear();
		for(int i = 0;i < n;i++){
			for(int j = 0;j < m;j++){
				R.M[i][j] = (M[i][j] + T.M[i][j]) % Mod;
			}
		}
		return R;
	}
	Matrix operator ^ (const long long t){
		Matrix res = Matrix(n , m);res.Identity();
		if(t == 0)return res;
		Matrix T = Matrix(n , m);T.Clear();
		for(int i = 0;i < n;i++){
			for(int j = 0;j < m;j++){
				T.M[i][j] = M[i][j];
			}
		}	
		long long p = t;
		while(p){
			if(p & 1){
				res = res * T;
			}
			p >>= 1;
			T = T * T;
		}
		return res;
	}
};

int n , s[3] = {0 , 0 , 0};
long long m;
vector < pair < pair < long long , long long > , bool > > v;
long long P;
int main(){
	ios_base::sync_with_stdio(false);cin.tie(0);
	scanf("%d %I64d" , & n , & m);
	for(int i = 1;i <= n;i++){
		long long x , y , z;scanf("%I64d %I64d %I64d" , & x , & y , & z);x--;
		v.push_back(make_pair(make_pair(y , x) , true));
		v.push_back(make_pair(make_pair(z, x) , false));
	}
	sort(v.begin() , v.end());
	v.push_back(make_pair(make_pair(m , 1) , 0));
	Matrix A = Matrix(1 , 3);A.M[0][1]++;
	Matrix T = Matrix(3 , 3);
	T.M[0][0] = T.M[0][1] = T.M[1][0] = T.M[1][1] = T.M[1][2] = T.M[2][1] = T.M[2][2] = 1;
	P = 1;
	for(auto x : v){
		long long end = x.first.first;
		long long pos = x.first.second;
		bool direction = x.second;
		if(direction)s[pos]++;
		else s[pos]--;
		A = A * (T ^ (end - P));
		P = end;
		T.M[0][0] = T.M[0][1] = T.M[1][0] = T.M[1][1] = T.M[1][2] = T.M[2][1] = T.M[2][2] = 1;
		if(s[0]){
			T.M[0][0] = T.M[0][1] = T.M[1][0] = 0;
		}
		if(s[1]){
			T.M[1][1] = T.M[0][1] = T.M[1][0] = T.M[1][2] = T.M[2][1] = 0;
		}
		if(s[2]){
			T.M[2][2] = T.M[2][1] = T.M[1][2] = 0;
		}
		if(direction)A.M[0][pos] = 0;
	}
	printf("%d\n" , A.M[0][1]);
	return 0;
}