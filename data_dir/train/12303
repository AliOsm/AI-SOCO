#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;
using namespace std;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define PI 3.1415926535897932384626433832795
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
long long MOD = 1e9+7;
pair<int,int> dx[4] = {{1,0},{-1,0},{0,1},{0,-1}};
const int RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
struct chash {int operator()(int x) const { return x ^ RANDOM; }};
string toString(long long x){stringstream ss;ss << x;string str = ss.str();return str;}
long long fastpow(long long x,long long k){if(!k)return 1;if(k & 1)return ((x * fastpow(x,k-1) % MOD) % MOD) % MOD;
long long ans = fastpow(x,k/2);ans %= MOD;ans *= ans;ans %= MOD;return ans;}
long long sumF(long long x){int s = 0;while(x)s += x%10,x /= 10;return s;}
bool isS(char c){return (c >= 'a' && c <= 'z');}
bool isB(char c){return (c >= 'A' && c <= 'Z');}
bool isD(char c){return (c >= '0' && c <= '9');}
bool isSqrt(long long x){ long long f = sqrt((long double)x + 0.5); return f*f == x;}
long long lcm(long long a,long long b){return a * (b / __gcd(a,b));}
int arr[200005];
vector<int> sale[200005];
int n,m;
bool isGood(int day)
{
    vector<pair<int,int> > dayOffers;
    for(int i = 1;i <= 2e5;i++)
    {
        int MX = -1;
        for(int j = 0;j < sale[i].size();j++)
        {
            if(sale[i][j] <= day)
                MX = max(MX,sale[i][j]);
        }
        if(MX != -1)
            dayOffers.push_back(make_pair(MX,i));
    }
    sort(dayOffers.begin(),dayOffers.end());
    int st = 0;
    vector<int> bought(n+1,0);
    int money = 0;
    for(int i = 0;i < dayOffers.size();i++)
    {

        //cout << dayOffers[i].first << " - " << dayOffers[i].second << endl;
        money += dayOffers[i].first - st;
        st = dayOffers[i].first;
        int toAdd = min(arr[dayOffers[i].second] - bought[dayOffers[i].second],money);
        bought[dayOffers[i].second] += toAdd;
        money -= toAdd;
    }
    money += day - st;
    for(int i = 1;i <= n;i++)
    {
        while(bought[i] < arr[i])
        {
           // cout << i << " " << arr[i] - bought[i] << endl;
            money -= 2;
            bought[i]++;
        }
    }
    return money >= 0;
}
int main()
{
    IO;
    cin >> n >> m;
    for(int i = 1;i <= n;i++)
        cin >> arr[i];
    for(int i = 0;i < m;i++)
    {
        int d,t;
        cin >> d >> t;
        sale[t].push_back(d);
    }
    for(int i = 1;i <= 2e5;i++)
        sort(sale[i].begin(),sale[i].end());
    int lo = 1;
    int hi = 400005;
    while(lo < hi)
    {
        int mid = (lo + hi) / 2;
        if(isGood(mid))
            hi = mid;
        else
            lo = mid + 1;
    }
    cout << lo << endl;
    return 0;
}
