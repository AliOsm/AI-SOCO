#include <bits/stdc++.h>

#define Pb push_back
#define F first
#define S second

using namespace std;

const int N= 200005 ;

long long Res;

int n,m,depth;

int a[N],b[N],c[N],Pp[N],dep[N],F[N];
int P[2*N][20],D[2*N][20];

vector < pair < int , int > > v[N];
vector < pair < pair < int , int > , pair < int , int > > > s;

void Dfs (int x,int p,int val)  {
	P[x][0]=p,D[x][0]=val;
	dep[x]=++depth;
	
	for (int i=0; i<v[x].size(); i++) 
		if (v[x][i].F!=p) Dfs(v[x][i].F,x,v[x][i].S);
		
	depth--;
}

int Pa(int x) {
	if (Pp[x]==x) return x;
	return Pp[x]=Pa(Pp[x]);
}

void Union(int a,int b) {
	a=Pa(a); b=Pa(b);
	Pp[b]=a;
}

int LCA(int a,int b) {
	int Res=0;
	if (dep[a]<dep[b]) swap(a,b);
	for (int i=18; i>=0; i--)
		if (dep[P[a][i]]>=dep[b]) Res=max(Res,D[a][i]),a=P[a][i];
	
	if (a==b) return Res;
	
	for (int i=18; i>=0; i--)
		if (P[a][i]!=P[b][i]) {	
			Res=max(Res,D[a][i]);
			Res=max(Res,D[b][i]);
			a=P[a][i],b=P[b][i];
		}
		
	Res=max(Res,max(D[a][0],D[b][0]));
	
	return Res;
}

main () { 
	scanf("%d %d",&n,&m);
	for (int i=1; i<=m; i++) {
		scanf("%d %d %d",&a[i],&b[i],&c[i]);
		s.Pb({{c[i],i},{a[i],b[i]}});
	}
	
	for (int i=1; i<=n; i++) Pp[i]=i;
	
	sort(s.begin(),s.end());
	
	for (int i=0; i<s.size(); i++) {
		int c=s[i].F.F,idx=s[i].F.S,a=s[i].S.F,b=s[i].S.S;
		if (Pa(a)==Pa(b)) continue;
		v[a].Pb({b,c}); v[b].Pb({a,c});
		F[idx]=1; Res+=c; Union(a,b);
	}
	
	Dfs(1,0,0);
	
	P[1][0]=1;
	
	for (int j=1; j<=18; j++)
		for (int i=1; i<=n; i++) {
			P[i][j]=P[P[i][j-1]][j-1];
			D[i][j]=max(D[i][j-1],D[P[i][j-1]][j-1]);
		}
		
	for (int i=1; i<=m; i++) {
		if (F[i]) printf("%I64d\n",Res);
			 else printf("%I64d\n",Res+c[i]-LCA(a[i],b[i]));
	}
}