#pragma comment(linker,"/stack:256000000")
#include <string>
#include <vector>
#include <cstring>
#include <cstdio>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <queue>
#include <set>
#include <map>
#include <cstdlib>
#include <cfloat>
#include <ctime>
#include<cassert>
#include<cstdlib>
#include<fstream>
#include<iomanip>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define sz(v) (int)(v).size()
#define all(v) (v).begin(), (v).end()

const int N=55;

char c[N][N];
char res[2*N][2*N];
bool used[N][N];

int main() {
#ifdef LOCAL
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif
	REP(i,2*N)REP(j,2*N)res[i][j]='.';
	int n;
	cin>>n;
	vector<pair<int,int> > fig;
	REP(i,n){
		string s;
		cin>>s;
		REP(j,n)c[i][j]=s[j];
		REP(j,n){
			if(c[i][j]=='o'){
				fig.push_back(make_pair(i,j));
			}
		}
	}
	int cx=N,cy=N;
	res[cx][cy]='o';
	vector<pair<int,int> >sh;
	for(int dx=-(n-1);dx<=(n-1);dx++){
		for(int dy=-(n-1);dy<=(n-1);dy++){
			if(0==dx&&0==dy)continue;
			bool OK=1;
			REP(k,sz(fig)){
				int fx=fig[k].first+dx;
				int fy=fig[k].second+dy;
				if(0<=fx&&fx<n&&0<=fy&&fy<n&&c[fx][fy]=='.'){
					OK=0;
				}
			}
			if(OK){
				res[cx+dx][cy+dy]='x';
				sh.push_back(make_pair(dx,dy));
			}
		}
	}
	memset(used,0,sizeof(used));
	REP(i,sz(fig)){
		REP(j,sz(sh)) {
			int fx=fig[i].first+sh[j].first;
			int fy=fig[i].second+sh[j].second;
			if(0<=fx&&fx<n&&0<=fy&&fy<n){
				used[fx][fy]=true;
			}
		}
	}
	bool good=true;
	REP(i,n)REP(j,n){
		if(c[i][j]=='x'&&!used[i][j]){
			good=false;
		}
	}
	if(good){
		cout<<"YES"<<endl;
		for(int i=cx-(n-1);i<=cx+(n-1);i++){
			for(int j=cy-(n-1);j<=cy+(n-1);j++){
				cout<<res[i][j];
			}
			cout<<endl;
		}	
	} else {
		cout<<"NO"<<endl;
	}
	return 0;
}