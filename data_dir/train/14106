#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define endl '\n'
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int32_t , int32_t >
#define Endl '\n'
#define itn int


#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("-O3")

using namespace std;


mt19937 gen(chrono::system_clock::now().time_since_epoch().count());

const ll mod = 998244353;
const int32_t FFTM = 998244353;
const int32_t N = 2e5 + 10;

int32_t SX[4] = {0 , 1 , -1 , 0};
int32_t SY[4] = {1 , 0 , 0 , -1};

int n;
vector < int > a;
vector < int > b;
vector < pii > c;
vector < ll > poww;

int32_t  main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
    cin >> n;
    a.resize(n);
    b.resize(n);
    c.resize(n);
    poww.resize(n + 1);
    poww[1] = 1;
    for(int i = 2;i <= n; ++i)poww[i] = poww[i - 1] * i, poww[i] %= mod;
    for(int i = 0;i < n; ++i){
        cin >> c[i].F >> c[i].S;
        a[i] = c[i].F;
        b[i] = c[i].S;
    }
    sort(a.begin(), a.end());
    sort(b.begin(), b.end());
    sort(c.begin(), c.end());
    ll ans = 1;
    for(int i = 0;i < n; ++i){
        int j = i + 1;
        int kol = 1;
        while(j < n && a[i] == a[j])j++, kol++;
        ans = (ans * poww[kol]) % mod;
        i = j - 1;
    }
    ll ot = ans;
    ans = 1;
    for(int i = 0;i < n; ++i){
        int j = i + 1;
        int kol = 1;
        while(j < n && b[i] == b[j])j++, kol++;
        ans = (ans * poww[kol]) % mod;
        i = j - 1;
    }
    ot += ans;
    ot %= mod;

    ans = 1;
    for(int i = 0;i < n; ++i){
        if (i && (c[i].F < c[i - 1].F || c[i].S < c[i - 1].S)){
            ans = 0;
            break;
        }
        int kol = 1;
        int j = i + 1;
        while(j < n && c[i] == c[j])kol++,j++;
        ans = (ans * poww[kol]) % mod;
        i = j - 1;
    }
    ot = (ot - ans + mod) % mod;
    cout << (poww[n] - ot + mod) % mod;
    return 0;
}
