#pragma optimization_level 3
//#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("sumsqr.in");ofstream out("sumsqr.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);
#define int ll

const int G = 300000;
ll mod = 998244353;
int pw[G];
str t;
vec<int> o;

void ga(str &t, int d){
    for(int q=0; q<t.size(); q++){
        int rg = q;
        for(; rg<t.size() && t[rg]==t[q];) rg++; rg--;
        if(rg-q<d) o[rg-q]++;
        q = rg;
    }
}

void print(int d){
    t = "";
    for(int q=0; q<pw[d]; q++){
        str u = to_string(q), j;
        for(; u.size()+j.size()<d;) j.pb('0');
        u = j+u;
        ga(u, d);
        t += u;
    }
  //  cout<<t<<endl;
}

signed main() {
    fast;
    pw[0] = 1;
    for(int q=1; q<G; q++) pw[q] = (pw[q-1]*10)%mod;
    ll a; cin>>a;
    vec<ll> u(a);
    ll s =0 ;
    for(int q=1; q<=a; q++){
        ll beg = q*9+1, mul = pw[q-1];
        beg = (beg*mul)%mod;
        u[q-1] = (beg-s+mod)%mod;
        s += u[q-1];
        s%=mod;
    }
    reverse(u.begin(), u.end());
    for(ll i : u) cout<<i<<" ";
    /*for(int q=0; q<100; q++){
        int d; cin>>d;
        o = vec<int>(d);
        print(d);
        ll s = 0;
        reverse(o.begin(), o.end());
        for(int w=0; w<d; w++){
            ll c = o[w];
            //assert(c%(d-w)==0);
            //assert(c%fact[d-w]==0);
            s += o[w];
            cout<<o[w]<<" "<<s<<endl;
        }
    }*/
}
