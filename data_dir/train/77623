//
// Created by Ильдар Ялалов on 14.01.2020.
//
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int inf_int = 1e9 + 100;
const ll inf_ll = 1e18;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef long double dbl;
typedef unsigned int uint;
#define pb push_back
#define eb emplace_back
const double pi = 3.1415926535898;
#define dout if(debug) cout
#define fi first
#define se second
#define sp setprecision
#define sz(a) (int(a.size()))
#define mp make_pair
#define all(a) a.begin(),a.end()

//region debug

template<class T1, class T2>
std::ostream &operator<<(std::ostream &out, const std::pair<T1, T2> &rhs) {
    out << "( " << rhs.first << " , " << rhs.second << " )";
    return out;
}

template<typename A, typename B>
string to_string(pair<A, B> p);

template<typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);

template<typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);

string to_string(const string &s) {
    return '"' + s + '"';
}

string to_string(const char *s) {
    return to_string((string) s);
}

string to_string(bool b) {
    return (b ? "true" : "false");
}

string to_string(vector<bool> v) {
    bool first = true;
    string res = "{";
    for (int i = 0; i < static_cast<int>(v.size()); i++) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(v[i]);
    }
    res += "}";
    return res;
}

template<size_t N>
string to_string(bitset<N> v) {
    string res = "";
    for (size_t i = 0; i < N; i++) {
        res += static_cast<char>('0' + v[i]);
    }
    return res;
}


template<typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

template<typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template<typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";
}

template<typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " +
           to_string(get<3>(p)) + ")";
}

void debug_out() { cerr << endl; }

template<typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}
//endregion

#ifdef zxc
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

bool debug = 0;
const int MAXN = 2e5 + 100;
const int LOG = 21;
const int mod = 1e9 + 7;
const int MX = (2e7 + 100);


struct Point {
    ll a;
    ll b;

    Point() {
        a = b = 0;
    }

    Point(ll A, ll B) {
        a = A;
        b = B;
    }
};

struct vertex_lichao {
    int l, r;
    Point p;

    vertex_lichao() {
        l = r = 0;
    }

    vertex_lichao(Point &P) {
        l = r = 0;
        p = P;
    }
};


inline ll get(const Point &cur, ll x) {
    return cur.a + 1ll * x * cur.b;
}

vertex_lichao mem[MX];
int top_mem = 1;

inline int get_new_li(Point &val) {
    assert(top_mem < MX);
    int res = top_mem++;
    mem[res].p = val;
    mem[res].l = mem[res].r = 0;
    return res;
}


int update(int v, int tl, int tr, Point cur) {
    if (!v)
        return get_new_li(cur);
    if (tl == tr) {
        if (get(cur, tl) > get(mem[v].p, tl)) {
            swap(mem[v].p, cur);
        }
        return v;
    } else {
        int tm = (tl + tr) >> 1;
        bool mid = get(cur, tm) > get(mem[v].p, tm);
        if (mid)
            swap(mem[v].p, cur);
        bool left_val = get(cur, tl) > get(mem[v].p, tl);
        if (left_val)
            mem[v].l = update(mem[v].l, tl, tm, cur);
        else
            mem[v].r = update(mem[v].r, tm + 1, tr, cur);
        return v;
    }

}

ll get_val(int v, int tl, int tr, ll x) {
    if (!v)
        return -inf_ll;
    ll res = get(mem[v].p, x);
    int tm = (tl + tr) >> 1;
    if (x <= tm)
        return max(res, get_val(mem[v].l, tl, tm, x));
    else
        return max(res, get_val(mem[v].r, tm + 1, tr, x));
}


vector<int> g[MAXN];
int a[MAXN];
int lvl[MAXN];

int dfs(int v, int p, int &center, int size) {
    int sum = 1;
    for (int to:g[v]) {
        if (to == p)
            continue;
        if (lvl[to])
            continue;
        sum += dfs(to, v, center, size);
    }
    if (center == -1 && (p == -1 || 2 * sum >= size)) {
        center = v;
    }
    return sum;
}

vector<pair<ll, ll> > from[MAXN];
vector<pair<ll, ll> > rev[MAXN];

vector<pair<ll, ll> > cur;
ll ans = -inf_ll;

void dfs_from(int v, int p, ll sum, ll dis, int cnt) {
    dis += a[v];
    sum += dis;
    cur.pb({sum, cnt});
    ans = max(ans, sum);

    for (int to:g[v]) {
        if (to == p)
            continue;
        if (lvl[to])
            continue;
        dfs_from(to, v, sum, dis, cnt + 1);
    }
}

int start = 0;

void dfs_to(int v, int p, ll sum, ll dis, int cnt) {
    sum += 1ll * cnt * a[v];
    dis += a[v];
    cur.pb({sum, dis});

    ans = max(ans, sum + dis + a[start]);
    for (int to:g[v]) {
        if (to == p)
            continue;
        if (lvl[to])
            continue;
        dfs_to(to, v, sum, dis, cnt + 1);
    }
}


const int N = 2e5 + 100;

void build(int st, int size) {
    int v = -1;
    dfs(st, -1, v, size);
    start = v;

    lvl[v] = 1;
    for (int i = 0; i < sz(g[v]); ++i) {
        int to = g[v][i];
        if (lvl[to])
            continue;
        cur.clear();
        dfs_from(to, v, a[v], a[v], 2);
        from[i] = move(cur);

        cur.clear();
        dfs_to(to, v, 0, 0, 1);
        rev[i] = move(cur);

    }
    top_mem = 1;
    int root = 0;
    for (int i = 0; i < sz(g[v]); ++i) {
        int to = g[v][i];
        if (lvl[to])
            continue;

        for (auto x : from[i]) {
            ans = max(ans, get_val(root, 1, N, x.se) + x.fi);
        }

        for (auto x : rev[i]) {
            Point temp = {x.fi, x.se};
            root = update(root, 1, N, temp);
        }
    }

    top_mem = 1;
    root = 0;
    for (int i = sz(g[v]) - 1; i >= 0; --i) {
        int to = g[v][i];
        if (lvl[to])
            continue;

        for (auto x : from[i]) {
            ans = max(ans, get_val(root, 1, N, x.se) + x.fi);
        }

        for (auto x : rev[i]) {
            Point temp = {x.fi, x.se};
            root = update(root, 1, N, temp);
        }
    }

    for (int to:g[v]) {
        if (lvl[to])
            continue;
        build(to, size / 2);
    }

}

void solve() {
    int n;
    cin >> n;
    for (int i = 2; i <= n; ++i) {
        int u, v;
        cin >> u >> v;
        g[u].pb(v);
        g[v].pb(u);
    }
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
    }
    ans = a[1];

    build(1, n);
    cout << ans << "\n";
}

// CHECK LIMITS (n <= 10^5)
// CHECK CORNER CASES ( n==1)
signed main() {
#ifdef zxc
    freopen("../input.txt", "r", stdin);
    // freopen("../output.txt", "w", stdout);
#else
#endif //zxc
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cout.setf(ios::fixed);
    cout.precision(15);

    int t = 1;
    while (t--)
        solve();
    debug(1.0 * clock() / CLOCKS_PER_SEC);
}