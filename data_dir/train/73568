#include <bits/stdc++.h>
using namespace std;

#define ENGZ ios::sync_with_stdio(0);cin.tie(0);ios_base::sync_with_stdio(0);
#define sfl3(x, y, z) scanf("%I64d%I64d%I64d", &x, &y, &z)
#define sfl2(x, y) scanf("%I64d%I64d" , &x,&y)
#define sfi2(x, y) scanf("%d%d" , &x,&y)
#define wtf(s) freopen((s), "w", stdout)
#define sfd2(x, y) scanf("%lf", &x, &y)
#define rff(s) freopen((s), "r", stdin)
#define sfl(x) scanf("%I64d" , &x)
#define testv(x) cerr << x << ' '
#define sfi(x) scanf("%d" , &x)
#define sfd(x) scanf("%lf", &x)
#define sfc(x) scanf("%c", &x)
#define test cerr << "here"
#define mod 1000000007
#define pi (2*acos(0))
typedef long long ll;
#define endl '\n'

ll a[200005], tree[4000000], lazy[4000000];
void check(int node, int low, int high)
{
    if (lazy[node] != 0)
    {
        tree[node] += lazy[node];
        if (low != high)
        {
            lazy[2 * node] += lazy[node];
            lazy[2 * node + 1] += lazy[node];
        }
        lazy[node] = 0;
    }
}
void build(int node, int start, int end)
{
    check(node, start, end);
    if(start == end)
        tree[node] = a[start];
    else
    {
        int mid = (start + end) / 2;
        build(2 * node, start, mid);
        build(2 * node + 1, mid + 1, end);
        tree[node] = min(tree[2 * node], tree[2 * node + 1]);
    }
}

void updateRange(int node, int start, int end, int l, int r, ll val)
{
    check(node, start, end);
    if(start > end || start > r || end < l)
        return;
    if(start >= l && end <= r)
    {
        tree[node] += val;
        if(start != end)
        {
            lazy[node * 2] += val;
            lazy[node * 2 + 1] += val;
        }
        return;
    }
    int mid = (start + end) / 2;
    updateRange(node * 2, start, mid, l, r, val);
    updateRange(node * 2 + 1, mid + 1, end, l, r, val);
    tree[node] = min(tree[node * 2], tree[node * 2 + 1]);
}

ll queryRange(int node, int start, int end, int l, int r)
{
    check(node, start, end);
    if(start > end || start > r || end < l)
        return LONG_LONG_MAX;
    if(start >= l && end <= r)
        return tree[node];
    int mid = (start + end) / 2;
    ll p1 = queryRange(node * 2, start, mid, l, r);
    ll p2 = queryRange(node * 2 + 1, mid + 1, end, l, r);
    return min(p1, p2);
}

int main()
{
    int n, q, x, y;
    ll z;
    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> a[i];
    build(1, 0, n - 1);
    cin >> q;
    cin.ignore();
    while (q--)
    {
        x = y = 0;
        z = 0;
        string s;
        getline(cin, s);
        int c = 0;
        for (int i = 0; i < s.length(); i++)
            if (s[i] == ' ')
                c++;
        if (c == 2)
        {
            int i = 0;
            for (i = 0; s[i] != ' '; i++)
                x *= 10, x += s[i] - '0';
            i++;
            for (i; s[i] != ' '; i++)
                y *= 10, y += s[i] - '0';
            i++;
            if (s[i] == '-')
            {
                i++;
                for (; i < s.size(); i++)
                    z *= 10, z += s[i] - '0';
                z *= -1;
            }
            else
            {
                for (; i < s.size(); i++)
                    z *= 10, z += s[i] - '0';
            }
            if (x > y)
                updateRange(1, 0, n - 1, x, n - 1, z), updateRange(1, 0, n - 1, 0, y, z);
            else
                updateRange(1, 0, n - 1, x, y, z);
        }
        else
        {
            int i = 0;
            for (i = 0; s[i] != ' '; i++)
                x *= 10, x += s[i] - '0';
            i++;
            for (i; i < s.size(); i++)
                y *= 10, y += s[i] - '0';
            if (x > y)
                cout << min(queryRange(1, 0, n - 1, x, n - 1), queryRange(1, 0, n - 1, 0, y)) << endl;
            else
                cout << queryRange(1, 0, n - 1, x, y) << endl;
        }
    }
    return 0;
}