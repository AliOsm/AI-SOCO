#include <iostream>
#include<memory.h>
#include <map>
#include <string>
#include <iomanip>
#include <fstream>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <cmath>
#include <set>
using namespace std;

/*
pair<int, int> dp[1001][1001][2];
bool p[1001][1001][2];
int q,r;
string N;
pair<int, int> sol(int i, int rem, int st)
{
	if (i == N.size())
	{
		if (st == 1 && rem == r)
		{
			return make_pair(0, 0);
		}
		return make_pair(-10000000, -100000000);
	}
	if (dp[i][rem][st].first != -1) return dp[i][rem][st];
	if (st == 0)
	{
		if (N[i] == '0')
		{
			p[i][rem][st] = 0;
			return dp[i][rem][st] = sol(i+1, rem, st);
		}
		else
		{
			int rem2 = rem*10;
			rem2 += N[i]-'0';
			rem2 %=q;
			pair<int, int> r1 = sol(i+1, rem2, 1);
			r1.first++;
			r1.second = N[i]-'0';
			pair<int, int> r2 = sol(i+1, rem, 0);
			if (r1 >= r2)
			{
				p[i][rem][st] = 1;
			}
			else
			{
				p[i][rem][st] = 0;
			}
			return dp[i][rem][st] = max(r1, r2);
		}
	}
	int rem2 = rem*10;
	rem2 += N[i]-'0';
	rem2%= q;
	pair<int, int> res = sol(i+1, rem2, 1);
	res.first++;
	res.second = N[i]-'0';
	pair<int, int> res2 = sol(i+1, rem, 1);
	if(res >= res2)
	{
		p[i][rem][st] = 1;
	}
	else p[i][rem][st] = 0;
	return dp[i][rem][st] = max(res, res2);
}

int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		for (int i = 0; i < 1001; i++) for (int j = 0; j < 1001; j++) dp[i][j][0] = dp[i][j][1] = make_pair(-1, -1);
		cin>>N;
		cin>>r>>q;
		sol(0, 0, 0);
		string M = "";
		int rem = 0;
		for (int i = 0; i < N.size(); i++)
		{
			if (M.size() > 0)
			{
				if (p[i][rem][1] == 0)
				{
					continue;
				}
			}
			else
			{
				if (p[i][rem][0] == 0) continue;
			}
			M += N[i];
			rem *=10;
			rem+= N[i]-'0';
			rem%=q;
		}
		if (dp[0][0][0].first <= 0)
		{
			cout<<"Not found"<<endl;
			continue;
		}
		cout<<M<<endl;
	}
}


vector<int> SCCG;
vector<vector<int> > g;
vector<vector<int> > gt;
vector<int> f;
vector<bool> tk;
vector<vector<int> > dag;
vector<int> pr;
vector<int> money;
vector<int> dp;
void dfs1(int i)
{
	tk[i] = true;
	for (int j = 0; j < g[i].size(); j++)
	{
		if (!tk[g[i][j]]) dfs1(g[i][j]);
	}
	f.push_back(i);
}
void dfs2(int i, int group)
{
	tk[i] = true;
	SCCG[i] = group;
	for (int j =0; j < gt[i].size(); j++)
	{
		if (!tk[gt[i][j]]) dfs2(gt[i][j], group);
	}
}

void SCC()
{
	SCCG = vector<int> (g.size(), -1);
	tk = vector<bool> (g.size(), false);
	f.clear();
	for (int i = 0; i < g.size(); i++)
	{
		if (!tk[i]) dfs1(i);
	}
	gt = vector<vector<int> >(g.size());
	for (int i = 0; i < g.size(); i++)
	{
		for (int j = 0; j < g[i].size(); j++)
		{
			gt[g[i][j]].push_back(i);
		}
	}
	int gr = 0;
	tk = vector<bool>(g.size(), false);
	for (int i = f.size()-1; i >=0; i--)
	{
		if (!tk[f[i]])
		{
			dfs2(f[i], gr);
			gr++;
		}
	}
	dag = vector<vector<int> > (gr);
	dp = vector<int> (gr, -1);
	pr = vector<int> (gr, 0);
	for (int i = 0; i < g.size(); i++)
	{
		pr[SCCG[i]] += money[i];
		for (int j = 0; j < g[i].size(); j++)
		{
			int u, v;
			u = i;
			v = g[i][j];
			if (SCCG[u] != SCCG[v])
			{
				dag[SCCG[u]].push_back(SCCG[v]);
			}
		}
	}
	
}

int sol(int i)
{
	if (dp[i] != -1) return dp[i];
	int win = pr[i];
	int mx = 0;
	for (int j = 0; j < dag[i].size(); j++) mx = max(mx, sol(dag[i][j]));
	return dp[i] = win+mx;
}

int main()
{
	int T;
	cin>>T;
	for (int z=1; z <= T; z++)
	{
		int n;
		cin>>n;
		g = vector<vector<int> > (n);
		money = vector<int> (n);
		for (int i = 0; i < n; i++)
		{
			cin>>money[i];

*/

int main()
{
	long long x1, x2;
	long long y1, y2;
	cin>>x1>>y1>>x2>>y2;
	int n;
	cin>>n;
	int r = 0;
	for (int i = 0; i < n; i++)
	{
		long long a, b, c;
		cin>>a>>b>>c;
		long long X = a*x1 + b*y1 + c;
		long long Y = a*x2 + b*y2 + c;
		if (X > 0 && Y > 0)
		{
		}
		else if (X < 0 && Y < 0) {}
		else r++;
	}
	cout<<r<<endl;
}