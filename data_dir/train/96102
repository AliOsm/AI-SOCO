# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace std;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};

set < int > s;
int mx, a[N], n;
int cnt;

bool issqr (int x) {
	int y = sqrt(x);
	return y * y == x;
}

int main () {
    cin >> n;
    For (i, 1, n) {
    	cin >> a[i];
		if (issqr(a[i])) ++ cnt;
    	mx = max(mx, a[i]);
	}
	
	for (ll i = 0; i * i <= mx + mx; i ++) {
		s.insert(i * i);
	}
	
	if (cnt < n / 2) {
		multiset < int > all;
		For (i, 1, n) {
			int cur = sqrt(a[i]);
			all.insert(min(abs(cur * cur - a[i]), abs((cur + 1) * (cur + 1) - a[i])));
		}
		ll ans = 0;
		while (all.size() > n / 2) {
			ans += *all.begin();
			all.erase(all.begin());
		}
		cout << ans << '\n';
	} else {
		multiset < int > all;
		For (i, 1, n) {
			if (issqr(a[i])) {
				int l = a[i], r = a[i];
				int lol = 0;
				while (issqr(l) && issqr(r)) {
					l --, r ++;
					if (l < 0) {
						l = 0;
					}
					lol ++;
				}
				all.insert(lol);
			}
		}
		int ans = 0;
		while (all.size() > n / 2) {
			ans += *all.begin();
			all.erase(all.begin());
		}
		cout << ans << '\n';
	}
	
	return Accepted;
}

// Coded By OB