#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())


#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);

int dis[505][5005];
int vis[505][5005];
int d,s;

void bfs()
{
    for(int i = 0;i <= 500;i++)for(int j = 0;j <= 5000;j++)dis[i][j] = 1e9;
    queue<pii>Q;
    Q.push(mk(0,0));
    vis[0][0] = 1;
    dis[0][0] = 0;

    while(!Q.empty()){
        pii P = Q.front();
        Q.pop();
        for(int i = 0;i < 10;i++){
            int Pf = (P.first * 10 + i) % d;
            int Ps = P.second + i;
            if(Ps > s || vis[Pf][Ps])continue;
            vis[Pf][Ps] = 1;
            dis[Pf][Ps] = 1 + dis[P.first][P.second];
            Q.push(mk(Pf,Ps));
        }
    }
}
string str;
int dp[505][5005];
void rec(int Pfirst,int Psecond)
{
    if(Pfirst == 0 and Psecond == s){
        cout << str << "\n";
        exit(0);
    }
    if(dp[Pfirst][Psecond])return;
    dp[Pfirst][Psecond] = 1;
    for(int i = 0;i < 10;i++){
        int Pf = (Pfirst * 10 + i) % d;
        int Ps = (Psecond + i);
        if(Ps > s)continue;
        if(dis[Pf][Ps] == 1 + dis[Pfirst][Psecond]){
            str+= char(i + '0');
            rec(Pf,Ps);
            str.pop_back();
        }
    }
}
int main()
{
    cin >> d >> s;
    bfs();
    if(dis[0][s] == 1e9){
        cout << -1 << "\n";
        return 0;
    }
    rec(0,0);

}
