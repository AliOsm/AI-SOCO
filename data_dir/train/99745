#include <bits/stdc++.h>

using namespace std;

const int N = 2e3 + 5;
char grid[N][N];
bool goodR[N][N] , goodC[N][N];
int cntR[N] , cntC[N] , ans[N][N];

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.in" , "r" , stdin);
#endif
    int n , k;
    scanf("%d%d" , &n , &k);
    for (int i = 0 ;i < n ;i++) {
        scanf("%s" , &grid[i]);
        for (int j = 0 ;j < n ;j++) {
            cntR[i] += grid[i][j] == 'B';
            cntC[j] += grid[i][j] == 'B';
        }
    }

    int mx = 0 , add = 0;
    for (int i = 0 ;i < n ;i++) {
        if (!cntR[i]) {
            mx++;
            continue;
        }
        int cnt = 0 , r = k;
        for (int j = 0 ;j < k ;j++) cnt += grid[i][j] == 'B';
        goodR[i][0] = cnt == cntR[i];
        while (r < n) {
            cnt += grid[i][r] == 'B';
            cnt -= grid[i][r - k] == 'B';
            goodR[i][r - k + 1] = cnt == cntR[i];
            r++;
        }
    }

    for (int j = 0 ;j < n ;j++) {
        if (!cntC[j]) {
            mx++;
            continue;
        }
        int cnt = 0 , r = k;
        for (int i = 0 ;i < k ;i++) cnt += grid[i][j] == 'B';
        goodC[0][j] = cnt == cntC[j];
        while (r < n) {
            cnt += grid[r][j] == 'B';
            cnt -= grid[r - k][j] == 'B';
            goodC[r - k + 1][j] = cnt == cntC[j];
            r++;
        }
    }

    for (int i = 0 ;i < n ;i++) {
        int cnt = 0 , r = k;
        for (int j = 0 ;j < k ;j++) cnt += goodC[i][j];
        ans[i][0] = cnt;
        while (r < n) {
            cnt += goodC[i][r];
            cnt -= goodC[i][r - k];
            ans[i][r - k + 1] = cnt;
            r++;
        }
    }

    for (int j = 0 ;j < n ;j++) {
        int cnt = 0 , r = k;
        for (int i = 0 ;i < k ;i++) cnt += goodR[i][j];
        ans[0][j] += cnt;
        add = max(add , ans[0][j]);
        while (r < n) {
            cnt += goodR[r][j];
            cnt -= goodR[r - k][j];
            ans[r - k + 1][j] += cnt ;
            add = max(add , ans[r - k + 1][j]);
            r++;
        }
    }
    printf("%d" , mx + add);
}