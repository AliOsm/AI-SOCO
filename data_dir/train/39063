#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define fi first
#define se second
#define SZ(x) ((int)(x).size())
using namespace std;
using namespace __gnu_pbds;
using ll = int;
using ld = long double;
using ull = uint64_t;
using pl = pair<ll, ll>;
using vl = vector<ll>;
using vll = vector<vector<ll>>;
typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

ll n, m, p;

vector<vector<bool>> field;
queue<pair<ll, vector<pl>>> q;
vl s, ans;
vector<vector<pl>> forts;

bool go(ll row, ll col) {
  if (row < 0 || col < 0 || row >= n || col >= m) return false;
  return field[row][col] == 0;
}

vector<pl> bfs(ll player, vector<pl>& cells) {
  vector<pl> newCells;
  ll maxD = s[player];

  queue<pair<ll, pl>> q;
  for (auto cell: cells) {
    q.push({0, cell});
  }

  while(!q.empty()) {
    ll d = q.front().first;
    pl pos = q.front().second;
    ll row = pos.first;
    ll col = pos.second;
    q.pop();

    if (d > 0 && !go(row, col)) {
      continue;
    }

    if (field[row][col] == 0) {
      ans[player]++;
      field[row][col] = 1;
    }

    if (d == maxD) {
      newCells.push_back(pos);
      continue;
    }

    q.push({d+1, {row-1, col}});

    q.push({d+1, {row+1, col}});

    q.push({d+1, {row, col-1}});

    q.push({d+1, {row, col+1}});
  }

  return newCells;
}

int main() {
  ios::sync_with_stdio(0);
  cout.precision(10);

  cin >> n >> m >> p;

  field.resize(n);
  for (int i = 0; i < n; i++) {
    field[i].resize(m);
  }

  s.resize(p+1);
  ans.resize(p+1);
  forts.resize(p+1);

  for (int i = 1; i <= p; i++) {
    cin >> s[i];
  }

  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      char cur; cin >> cur;
      if (cur == '#') {
        field[i][j] = 1;
      } else if (cur != '.') {
        field[i][j] = 1;
        ll player = cur - '0';
        forts[player].push_back({i, j});
        ans[player]++;
      }
    }
  }

  for (ll i = 1; i <= p; i++) {
    q.push({i, forts[i]});
  }

  while(!q.empty()) {
    ll player = q.front().first;
    vector<pl> cells = q.front().second;
    q.pop();
    vector<pl> newCells = bfs(player, cells);
    if (!newCells.empty()) {
      q.push({player, newCells});
    }
  }

  for (int i = 1; i <= p; i++) {
    cout << ans[i] << ' ';
  } cout << endl;
}
