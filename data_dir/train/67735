#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)); (v).erase(unique(all(v)), (v).end());
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define umap unordered_map
#define uset unordered_set
#define pqueue priority_queue
#define si(a) scanf("%d", &a)
#define sll(a) scanf("%lld", &a)
#define bitcount(x) __builtin_popcount(x)
#define cps CLOCKS_PER_SEC
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000007
#define MOD 1000000007
#define N 100005
using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;

template<typename T>
using maxpq = priority_queue<T>;

//All indexing is 0-based
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update> ordered_set;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pairs of (value, time_of_insertion)
//to distinguish values which are similar.

template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
//ordered_map<int, int> my_map;

//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }

//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }

// #define int ll
// #define trace(...) 42

template<typename T>
void printv(const vector<T> & v) {for(auto i : v) cout << i << ' '; cout << '\n'; }

// inline bool bit(int i, int b) {
//     return i & (1 << b);
// }

#define EPS 1e-9
const int inf = 1e9;


//Returns the no. of solutions for the SLAE.
//If atleast a solution exists, stores it in ans.
int gauss(vector<vector<double>> a, vector<double>& ans) {
    int n = a.size();               //# of equations
    int m = (int) a[0].size() - 1;  //# of unknowns

    vector<int> where(m, -1);       //where[i]: pivoting row for ith column
    for(int row=0, col=0; row < n && col < m; col++) {

        //Find the row having largest absolute val of the col-th element.
        int sel = row;
        for(int i = row; i < n; i++)
            if(abs(a[i][col]) > abs(a[sel][col]))
                sel = i;
        if(abs(a[sel][col]) < EPS) 
            continue;
 
        //Swap the 2 rows and divide entire row "row" by pivot.
        double pivot = a[sel][col];
        for(int i = col; i <= m; i++) {
            swap(a[row][i], a[sel][i]);
            a[row][i] /= pivot;
        }
        where[col] = row;

        //Make elements in other rows for column col be 0
        //by performing row operations.
        for(int i = 0; i < n; i++)
            if(i != row) {
                double c = a[i][col];
                for(int j = col; j <= m; j++) {
                    a[i][j] -= a[row][j] * c;
                }
            }
        ++row;
    }

    //Compute values of all the variables; Independent variables are assigned to 0.
    ans.assign(m, 0);
    for(int i = 0; i < m; i++) 
        if(where[i] != -1)
            ans[i] = a[where[i]][m];

    //Plug in the values of the variables in SLAE to see if they satisfy it.
    for(int i = 0; i < n; i++) {
        double sum = 0;
        for(int j = 0; j < m; j++)
            sum += a[i][j] * ans[j];
        if(abs(sum - a[i][m]) > EPS) 
            return 0;
    }

    //Check to see if an independent variable exists.
    for(int i = 0; i < m; i++)
        if(where[i] == -1)
            return inf;
    return 1;
}

//Returns Rank of the matrix a.
int Rank(vector<vector<double>> a) {
    int n = a.size(), m = a[0].size();
    int ans = 0;

    for(auto v : a) printv(v);

    int row = 0, col = 0;
    while(row < n && col < m) {
        int sel = row, cur = row + 1;
        while(cur < n) {
            if(abs(a[cur][col]) > abs(a[sel][col])) {
                sel = cur;
            }
            cur++;
        }

        if(abs(a[sel][col]) < EPS) {
            col++; continue;
        }

        for(int j = col; j < m; j++) {
            swap(a[row][j], a[sel][j]);
        }

        ans++;
        double pivot = a[row][col];
        for(int i = col; i < m; i++) {
            a[row][i] /= pivot;
        }

        for(int i = 0; i < n; i++) {
            if(i == row) continue;
            double c = a[row][col];
            for(int j = col; j < m; j++) {
                a[i][j] -= c * a[row][j];
            }
        }
        ++row; ++col;
    }
    return ans;
}

#define vvi vector<vector<double>>

vvi v = {{0, 0, 1, 0, 1, 1},
         {0, 1, 0, 1, 0, 1},
         {0, 1, 1, 1, 1, 0},
         {1, 0, 0, 1, 1, 0},
         {1, 0, 1, 1, 0, 1},
         {1, 1, 0, 0, 1, 1},
         {1, 1, 1, 0, 0, 0}
        };

int mn, ans[10], h[10];
string sa[4];

main()
{   
    #ifndef ONLINE_JUDGE
        freopen("/home/tarun/Desktop/input.txt", "r", stdin);
     // freopen("/home/tarun/Desktop/output.txt", "w", stdout);
    #endif
    sync;
    clock_t clk = clock();
    cerr << "I will return...\n";

    // set<vi> st; 
    // for(int mask = 0; mask < 16; mask++) {
    //     string s; 
    //     repi(b, 3, -1) s += bit(mask, b) ? 'b' : 'a';
    //     vi v; 
    //     rep(i, 0, 4) {
    //         rep(j, i+1, 4) {
    //             v.pb(s[i] != s[j]);
    //         }
    //     }

    //     cout << s << ' '; 
    //     for(int i : v) cout << i << ' '; cout << '\n';
    //     st.insert(v);
    // }

    // cout << st.sz << '\n';
    // for(auto v : st) {
    //     for(int i : v) cout << i << ' '; cout << '\n';
    // }

    // //The below piece of code shows that any combination of 6 vectors out of the 7 is linearly independent.
    // for(int i = 0; i < 7; i++) {
    //     vvi a; 
    //     for(int j = 0; j < 7; j++) {
    //         if(i == j) continue;
    //         a.pb(v[j]);
    //     }
    //     int rnk = Rank(a);
    //     cout << rnk << '\n';
    //     assert(rnk == 6);
    // }

    rep(i, 0, 6) cin >> h[i];
    int mxh = *max_element(h, h + 6);
    mn = inf;

    for(int a7 = 0; a7 <= mxh; a7++) {
        vvi a = {
            {0, 0, 0, 1, 1, 1, h[0] - a7},
            {0, 1, 1, 0, 0, 1, h[1] - a7},
            {1, 0, 1, 0, 1, 0, h[2] - a7},
            {0, 1, 1, 1, 1, 0, h[3]     },
            {1, 0, 1, 1, 0, 1, h[4]     },
            {1, 1, 0, 0, 1, 1, h[5]     }
        };
        vector<double> ans;
        assert(gauss(a, ans) == 1);
        bool ok = 1;
        int sum = 0;
        ans.pb(a7);
        // if(1) {
        //     cout << a7 << ' '; 
        //     printv(ans);
        // }
        rep(i, 0, 7) {
            int kk = ans[i];
            ok &= kk >= 0;
            ok &= abs(kk - ans[i]) < EPS;
            sum += ans[i];
        }
        if(ok && sum < mn) {
            mn = sum;
            rep(i, 0, 7) ::ans[i] = ans[i];
        }
    }

    for(int i = 0; i < 7; i++) {
        while(ans[i]--) {
            sa[0] += 'a';
            for(int j = 0; j < 3; j++) {
                sa[j + 1] += (int)v[i][j] ? 'b' : 'a';
            }
        }
    }

    if(mn == inf) {cout << -1; return 0;}
    cout << mn << '\n';
    for(int i = 0; i < 4; i++) cout << sa[i] << '\n';

    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << double(clock() - clk) * 1000.0 / cps << '\n';
}

//Compile using:
//g++ -o filename.exe --std=c++11 filename.cpp
//Use -D CP for defining a macro CP in the local environment





