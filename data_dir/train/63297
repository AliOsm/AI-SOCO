#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(int i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) ((n%m + m) % m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

const int N = 1e5 + 5;

int tree[4 * N][5], arr[N][5];
int n, m, k;

void build(int node, int st, int en)
{
	if (st > en)
		return;
	if (st == en)
	{
		rep(i, 0, m)
			tree[node][i] = arr[st][i];
		return;
	}

	int mid = (st + en) / 2;
	build(2 * node, st, mid);
	build(2 * node + 1, mid + 1, en);

	rep(i, 0, m)
		tree[node][i] = max(tree[2 * node][i], tree[2 * node + 1][i]);
}

int query(int node, int st, int en, int shemal, int yemeen, int idx)
{
	if (st > en || st > yemeen || en < shemal)
		return 0;

	if (shemal <= st && en <= yemeen)
		return tree[node][idx];

	int mid = (st + en) / 2;

	return max(query(2 * node, st, mid, shemal, yemeen, idx),
			query(2 * node + 1, mid + 1, en, shemal, yemeen, idx));
}

bool check(int mid)
{
	rep(i, 0, n)
	{
		if (i + mid - 1 >= n)
			return false;

		int sum = 0;
		rep(j, 0, m)
			sum += query(1, 0, n - 1, i, i + mid - 1, j);
		if (sum <= k)
			return true;
	}

	return false;
}

void get(int mid)
{
	rep(i, 0, n)
	{
		int sum = 0;
		rep(j, 0, m)
			sum += query(1, 0, n - 1, i, i + mid - 1, j);
		if (sum <= k)
		{
			rep(j, 0, m)
				cout << query(1, 0, n - 1, i, i + mid - 1, j) << " ";
			return;
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m >> k;

	rep(i, 0, n)
		rep(j, 0, m)
			cin >> arr[i][j];

	build(1, 0, n - 1);

	int st = 1, en = n, mid, ret = -1;

	while (st <= en)
	{
		mid = (st + en) / 2;

		if (check(mid))
			st = mid + 1, ret = mid;
		else
			en = mid - 1;
	}

	get(ret);

	return 0;
}
