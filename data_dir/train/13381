#include <bits/stdc++.h>
#define ss second
#define ff first
#define use_fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define ret(n) return cout << n, 0
#define se(n) cout << setprecision(n) << fixed
#define ll long long
#define pb push_back
using namespace std;

const int N = 2e6, M = 1e9 + 7;
typedef pair <ll, ll> pii;
int dp[20][20][20][20];
int ans[30][30];
bool mark[30];

int main() {
	string s;
	cin >> s;
	for(int i = 0; i < 10; i++) {
		for(int j = 0; j < 10; j++) {
			for(int k = 0; k < 10; k++) {
				queue <int> q;
				fill(mark, mark + 20, 0);
				for(int l = 0; l < 10; l++)
					dp[i][j][k][l] = -1;
				q.push((k + i) % 10);
				mark[(k + i) % 10] = true;
				dp[i][j][k][(k + i) % 10] = 1;
				if(i != j) {
					q.push((k + j) % 10);
					mark[(k + j) % 10] = true;
					dp[i][j][k][(k + j) % 10] = 1;	
				}
				while(q.size()) {
					int u = q.front();
					q.pop();
					if(!mark[(u + i) % 10]) {
						dp[i][j][k][(u + i) % 10] = dp[i][j][k][u] + 1;
						q.push((u + i) % 10);
						mark[(u + i) % 10] = true;
					}
					if(!mark[(u + j) % 10]) {
						dp[i][j][k][(u + j) % 10] = dp[i][j][k][u] + 1;
						q.push((u + j) % 10);
						mark[(u + j) % 10] = true;
					}
				}
			}
			if(dp[i][j][0][s[0] - '0'] == -1) {
				ans[i][j] = -1;
				continue;
			}
			if(s[0] != '0')
				ans[i][j] = dp[i][j][0][s[0] - '0'];
			else
				ans[i][j] = 1;
			for(int k = 1; k < (int)s.size(); k++) {
				if(dp[i][j][s[k - 1] - '0'][s[k] - '0'] == -1) {
					ans[i][j] = -1;
  					break;
				}
				ans[i][j] += dp[i][j][s[k - 1] - '0'][s[k] - '0'];
			}
			if(ans[i][j] != -1)
				ans[i][j] -= (int)s.size();
 		}
	}
	for(int i = 0; i < 10; i++) {
		for(int j = 0; j < 10; j++) {
			cout << ans[i][j] << " ";
		}
		cout << endl;
	}
	return 0;
}
