#include <bits/stdc++.h>
using namespace std;
typedef long long intl;

vector<intl> graph[100000 + 5];
intl col[100000 + 5];
intl n;

intl bfs(intl source)
{
    memset(col, -1, sizeof(col));
    queue<intl> qu;
    qu.push(source);
    col[source] = 0;
    while(!qu.empty())
    {
        intl u = qu.front();
        qu.pop();
        for(intl i = 0; i < graph[u].size(); i++)
        {
            intl v = graph[u][i];
            if(col[v] == -1)
            {
                col[v] = 1 - col[u];
                qu.push(v);
            }
            else if(col[v] == col[u])
                return 0;
        }
    }
    intl cnt = 0;
    for(intl i = 1; i <= n; i++)
        if(col[i])
            cnt++;
    //cout << "cnt = " << cnt << endl;
    return ((n - cnt)*cnt - n + 1);
}

int main()
{
    cin >> n;
    for(intl i = 1; i < n; i++)
    {
        intl a, b;
        cin >> a >> b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    cout << bfs(1) << endl;
    return 0;
}
