#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define pi pair<int,int>
#define pl pair<ll,ll>
const int N = 1e5+15,M = 20,SQ = 330;

vector<int> adj[N];

int par[N][M],dep[N];

void dfs(int root,int p){
    for(auto ch : adj[root]){
        if(ch==p)continue;
        dep[ch]= dep[root]+1;
        par[ch][0]= root;
        for(int i=1;i<M;++i)
            par[ch][i]= par[par[ch][i-1]][i-1];
        dfs(ch,root);
    }
}
int get(int a,int b){
    if(dep[a]<dep[b])swap(a,b);
    int D= dep[a]-dep[b];
    int ret= D;
    for(int i=0;i<M;++i){
        if(D&(1<<i)){
            a = par[a][i];
        }
    }
    if(a!=b){
        for(int i=M-1;i>=0;--i)
            if(par[a][i]!= par[b][i])
                a= par[a][i],b= par[b][i], ret += 2*(1<<i);
        ret+=2;
    }
    return ret;
}
int dist[N];

void bfs(vector<int> & in_node){
    memset(dist,-1,sizeof(dist));
    queue<int> nodeq;
    for(int i=0;i<in_node.size();++i)
        dist[in_node[i]]= 0,nodeq.push(in_node[i]);
    while(!nodeq.empty()){

        int cur_node = nodeq.front();
        nodeq.pop();

        for(int i=0;i<adj[cur_node].size();++i){
            int v= adj[cur_node][i];
            if(dist[v]==-1){
                nodeq.push(v);
                dist[v]= dist[cur_node]+1;
            }
        }
    }
}

bool vis[N];
int main(){
    //freopen("input.txt","r",stdin);

    int type,node,n,m,R = 0;
    scanf("%d%d",&n,&m);
    int a,b;
    vector<int> in_node,tmp;
    for(int i=0;i<n-1;++i){
        scanf("%d%d",&a,&b);
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    vis[1]= 1;
    in_node.push_back(1);
    bfs(in_node);
    dfs(1,0);
    while(m--){
        ++R;
        scanf("%d%d",&type,&node);
        if(type==1){
            if(!vis[node])
                tmp.push_back(node),vis[node]= 1;
        }
        else{
            int ret= dist[node];
            for(auto ch : tmp){

                ret= min(ret, get(ch,node));
            }
            printf("%d\n",ret);
        }
        if(R==SQ){
            R= 0;
            for(int i=0;i<tmp.size();++i)
                in_node.push_back(tmp[i]);
            tmp.clear();

            bfs(in_node);
        }
    }
    return 0;
}   