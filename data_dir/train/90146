//#include <bits/stdc++.h>
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <deque>
#include <queue>
#include <ctime>
#include <iomanip>
#include <cstring>
 
#define SZ(x) ((int)x.size())
#define X first
#define Y second 
#define PB push_back 
#define MP make_pair 
 
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<pii, int> piii;
 
const int N = 100 * 1000 + 100;
const int SQ = 317;
 
int n, m, q;
char a[N][10];
pii nxt[N][10];
bool mark[10];
 
bool isval(int x, int y){
	return (0 <= x && x < n && 0 <= y && y < m);
}
 
void build(int x){
	int l = x * SQ;
	int r = min(n, x * SQ + SQ);
	for(int i = l; i < r; ++i){
		for(int j = 0; j < m; ++j){
			int x = i, y = j;
			memset(mark, 0, sizeof mark);
			while(0 <= y && y < m && !mark[y]){
				mark[y] = 1;
				if(a[x][y] == '^')
					x --;
				else if(a[x][y] == '<')
					y --;
				else 
					y ++;
			}
			if(!(0 <= y && y < m)) nxt[i][j] = MP(x, y);
			else if(x == i) nxt[i][j] = MP(-1, - 1);
			else if(x < l) nxt[i][j] = MP(x, y);
			else nxt[i][j] = nxt[x][y];
		}
	}
}
 
void solve(int x, int y){
	while(isval(nxt[x][y].X, nxt[x][y].Y)){
		pii t = nxt[x][y];
		x = t.X;
		y = t.Y;
	}
	if(nxt[x][y] == MP(-1, -1))
		cout << "-1 -1\n";
	else
		cout << nxt[x][y].X + 1 << " " << nxt[x][y].Y + 1 << "\n";
}
 
int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m >> q;
	for(int i = 0; i < n; ++i)
		for(int j = 0; j < m; ++j)
			cin >> a[i][j];
	for(int i = 0; i <= (n - 1) / SQ; ++i)
		build(i);
	for(int i = 0; i < q; ++i){
		char t;
		int x, y;
		cin >> t >> x >> y;
		x --; y --;
		if(t == 'C'){
			cin >> t;
			a[x][y] = t;
			build(x / SQ);
		}
		else{
			solve(x, y);
		}
	}
	return 0;
}


