#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)2e5 + 7;
const int infint = (int)1e9;
const ll inf = (ll)1e18;
string s;
int n, x, y;
int U[MAXN], D[MAXN], L[MAXN], R[MAXN];
int sig(int l, int r, int type)
{
	int ans;
	if(type == 0)
		ans = R[r];
	if(type == 1)
		ans = L[r];
	if(type == 2)
		ans = U[r];
	if(type == 3)
		ans = D[r];
	
	if(l == 0)	
		return ans;
	if(type == 0)
		ans -= R[l - 1];
	if(type == 1)
		ans -= L[l - 1];
	if(type == 2)
		ans -= U[l - 1];
	if(type == 3)
		ans -= D[l - 1];
	return ans;
}
bool check(int mid)
{
	for (int i = 0; i + mid <= n; i++)
	{
		int curx = R[n - 1] - L[n - 1] - sig(i, i + mid - 1, 0) + sig(i, i + mid - 1, 1);
		int cury = U[n - 1] - D[n - 1] - sig(i, i + mid - 1, 2) + sig(i, i + mid - 1, 3);
		if(abs(x - curx) + abs(y - cury) <= mid)
			return 1;
	}
	return 0;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	cin >> n;
	cin >> s;
	for (int i = 0; i < n; i++)
	{
		if(s[i] == 'U')
			U[i]++;
		if(s[i] == 'D')
			D[i]++;
		if(s[i] == 'L')
			L[i]++;
		if(s[i] == 'R')
			R[i]++;
	}
	cin >> x >> y;
	for (int i = 1; i < n; i++)
		L[i] += L[i - 1], R[i] += R[i - 1], U[i] += U[i - 1], D[i] += D[i - 1];
	
	if(R[n - 1] - L[n - 1] == x && U[n - 1] - D[n - 1] == y)
		return cout << 0, 0;
	if(abs(x) + abs(y) > n || (abs(x) + abs(y)) % 2 != n % 2)
		return cout << -1, 0;
	int l = 0, r = n;
	while(r - l > 1)
	{
		int mid = (l + r) >> 1;
		if(check(mid))
			r = mid;
		else
			l = mid;
	}
	cout << r;
}
