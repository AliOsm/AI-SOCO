#include <iostream>
#include <vector>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cassert>
#include <tuple>
#include <functional>
#include <unordered_set>
#include <unordered_map>
#include <sstream>
#include <stdio.h>



#define forn(i,n) for(int i=0;i<(int)(n); i++)
#define forsn(i,s,n) for(int i=(s);i<(int)(n); i++)
#define esta(x,v) (find((v).begin(),(v).end(),(x)) !=  (v).end())
#define index(x,v) (find((v).begin(),(v).end(),(x)) - (v).begin())
#define debug(x) cout << #x << " = "  << x << endl

typedef long long tint;
typedef unsigned long long utint;

using namespace std;

void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		int p = v.size();
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}


vector<tint> merge (vector<tint> a, vector<tint> b, vector<tint> &v) // importante, dividir para que a sea el mas corito siempre.
{

	vector<tint> sol;
	tint la = a.size(), lb = b.size();
	sol.push_back(max(a[0],b[0]));
	tint med = min(v[la-1],v[la]);
	tint izq = la-2;
	tint der = la+1;
	tint i = 1;
	//imprimirVector(a);
	//imprimirVector(b);
	//imprimirVector(sol);
	//cout << "----" << endl;
	while (i < la)
	{
		sol.push_back(max(a[i],max(b[i],med)));
		if ((der == la + lb && izq >= 0) or (izq >= 0 && v[izq] > v[der]))
		{
			med = min(med,v[izq]);
			izq--;
		}
		else if (der < la+lb)
		{
			med = min(med,v[der]);
			der++;
		}

		//cout << "----" << endl;
		i++;
	}

	while (i < la+lb)
	{
		if (i < lb)
			sol.push_back(max(b[i],med));
		else
			sol.push_back(med);
		if ( (der == la + lb && izq >= 0) or (izq >= 0 && v[izq] > v[der]))
		{
			med = min(med,v[izq]);
			izq--;
		}
		else if (der < la+lb)
		{
			med = min(med,v[der]);
			der++;
		}
		i++;
	}
	//imprimirVector(sol);
	return sol;
}

vector<tint> solution (vector<tint> v)
{
	//cout << " ---- s" << endl;
	//imprimirVector(v);
	int n = v.size();
	if (n == 1)
		return v;
	else
	{
		vector<tint> a (n/2);
		vector<tint> b ((n+1)/2);
		forn(i,n)
		{
			if (i < n/2)
				a[i] = v[i];
			else
				b[i-n/2] = v[i];
		}
		//imprimirVector(a);
		//imprimirVector(b);
		return merge(solution(a),solution(b),v);
	}
}
 
int main()
{

	int n;
	cin >> n;
	vector<tint> v (n);
	forn(i,n)
		cin >> v[i];
	vector<tint> ans = solution(v);
	forn(i,n)
		cout << ans[i] << " ";
	cout << endl;
	
	
	
	return 0;
}



