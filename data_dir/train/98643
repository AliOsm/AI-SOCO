#include <bits/stdc++.h>

using namespace std;

#define rep(i,a,n) for (int i=(a);i<(n);i++)
#define per(i,a,n) for (int i=(n)-1;i>=(a);i--)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define fi first
#define se second
#define SZ(x) (int)x.size()

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int,int> pii;
typedef pair<ll,ll>pll;
typedef vector<pii> vpii;

template<typename T>
T getint() {
    T x=0,p=1;
    char ch;
    do{ch=getchar();}while(ch <= ' ');
    if(ch=='-')p=-1,ch=getchar();
    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();
    return x*p;
}

mt19937 gen(chrono::system_clock::now().time_since_epoch().count());

template<typename T1,typename T2>bool umin(T1 &x,const T2&y){if(x>y)return x=y,true;return false;}
template<typename T1,typename T2>bool umax(T1 &x,const T2&y){if(x<y)return x=y,true;return false;}

const int maxn=(int)3e5+10;
const int inf=(int)1e9+5;
const int mod=(int)1e9+7;
const ll llinf=(ll)1e18+5;
const ld pi=acos(-1.0);

vi z[maxn];

int par[maxn];

int get(int x){
    if(x==par[x])return x;
    return par[x]=get(par[x]);
}

void unite(int x,int y){
    par[get(x)]=get(y);
}

vi g[maxn];
vi gg[maxn];
int col[maxn];

void dfs(int v,int c){
    col[v]=c;
    for(int x:gg[v]){
        if(col[x]==0){
            dfs(x,c^3);
        }else if(col[x]==col[v]){
            cout<<"NO\n";
            exit(0);
        }
    }
}

int r[maxn];

int main(){

   // freopen("choco.in","r",stdin);
   // freopen("choco.out","w",stdout);
  //  freopen("input.txt","r",stdin);
   // freopen("output.txt","w",stdout);

    ios_base::sync_with_stdio(0);

    int n,m;
    cin>>n>>m;
    for(int i=0;i<n;++i){
        cin>>r[i];
        r[i]^=1;
    }
    rep(j,0,m){
        par[j]=j;
        int k;
        cin>>k;
        rep(i,0,k){
            int x;
            cin>>x;
            --x;
            g[x].pb(j);
        }
    }

    rep(i,0,n){
        if(r[i]==0){
            unite(g[i][0],g[i][1]);
        }
    }

    rep(i,0,n){
        if(r[i]==1){
            int x=get(g[i][0]);
            int y=get(g[i][1]);
            gg[x].pb(y);
            gg[y].pb(x);
        }
    }

    rep(i,0,m){
        if(get(i)==i&&col[i]==0){
            dfs(i,1);
        }
    }

    cout<<"YES\n";


    return 0;

}
