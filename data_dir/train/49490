#include <bits/stdc++.h>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

typedef long long ll;
typedef unsigned long long ull;

void fastInOut();

struct point3D {
	double x, y, z;
};

const int N = 6;
point3D plnsCntr[N];
point3D plnsl[N], plnsr[N];
int arr[N];

void init(point3D box) {
	plnsCntr[0] = {box.x / 2.0, 0, box.z / 2.0}, plnsCntr[1] = {box.x / 2.0, box.y, box.z / 2.0};
	plnsCntr[2] = {box.x / 2.0, box.y / 2.0, 0}, plnsCntr[3] = {box.x / 2.0, box.y / 2.0, box.z};
	plnsCntr[4] = {0, box.y / 2.0, box.z / 2.0}, plnsCntr[5] = {box.x, box.y / 2.0, box.z / 2.0};
	plnsl[0] = {0, 0, 0}, plnsr[0] = {box.x, 0, box.z};
	plnsl[1] = {0, box.y, 0}, plnsr[1] = {box.x, box.y, box.z};
	plnsl[2] = {0, 0, 0}, plnsr[2] = {box.x, box.y, 0};
	plnsl[3] = {0, 0, box.z}, plnsr[3] = {box.x, box.y, box.z};
	plnsl[4] = {0, 0, 0}, plnsr[4] = {0, box.y, box.z};
	plnsl[5] = {box.x, 0, 0}, plnsr[5] = {box.x, box.y, box.z};
}

bool isWithInExec(double a, double b, double c) {
	return c > min(a, b) && c < max(a, b);
}

bool isWithIn(double a, double b, double c) {
	return c >= min(a, b) && c <= max(a, b);
}

bool check(point3D p1, point3D p2, point3D pnt, point3D eye) {
	point3D cnst = { eye.x - pnt.x, eye.y - pnt.y, eye.z - pnt.z };
	if (!isWithInExec(pnt.x, eye.x, p1.x))
		return 0;
	double yy = (((p1.x - pnt.x) * cnst.y) / cnst.x) + pnt.y;
	double zz = (((p1.x - pnt.x) * cnst.z) / cnst.x) + pnt.z;
	return isWithIn(p1.y, p2.y, yy) && isWithIn(p1.z, p2.z, zz);
}

bool isLinePlaneIntersect(point3D p1, point3D p2, point3D trg, point3D eye) {
	if (p1.x == p2.x) {
		point3D a = { p1.x, p1.y, p1.z }, b = { p2.x, p2.y, p2.z };
		point3D c = { trg.x, trg.y, trg.z }, e = { eye.x, eye.y, eye.z };
		return check(a, b, c, e);
	} else if (p1.y == p2.y) {
		point3D a = { p1.y, p1.x, p1.z }, b = { p2.y, p2.x, p2.z };
		point3D c = { trg.y, trg.x, trg.z }, e = { eye.y, eye.x, eye.z };
		return check(a, b, c, e);
	} else if (p1.z == p2.z) {
		point3D a = { p1.z, p1.x, p1.y }, b = { p2.z, p2.x, p2.y };
		point3D c = { trg.z, trg.x, trg.y }, e = { eye.z, eye.x, eye.y };
		return check(a, b, c, e);
	}
	return 0;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
#endif
	fastInOut();
	point3D box, eye;
	int ret = 0;
	double a, b, c;
	cin >> a >> b >> c, eye = {a, b, c};
	cin >> a >> b >> c, box = {a, b, c};
	for (int i = 0; i < 6; ++i)
		cin >> arr[i];
	init(box);
	for (int i = 0; i < N; ++i) {
		bool ok = 1;
		for (int j = 0; j < N; ++j) {
			if (i == j)
				continue;
			ok &= !isLinePlaneIntersect(plnsl[j], plnsr[j], plnsCntr[i], eye);
		}
		ret += ok * arr[i];
	}
	cout << ret;
	return 0;
}

void fastInOut() {
	ios_base::sync_with_stdio(0);
	cin.tie(NULL), cout.tie(NULL);
}
