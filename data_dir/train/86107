#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>

typedef long long ll;
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 2000000005;
const ll INFLL = 1000000000000000002ll;
const ll MOD = 1000000007;

inline ll min(ll a, ll b, ll c){return min(min(a,b),c);}
inline ll min(ll a, ll b, ll c, ll d){return min(min(min(a,b),c),d);}
inline ll max(ll a, ll b, ll c){return max(max(a,b),c);}
inline ll max(ll a, ll b, ll c, ll d){return max(max(max(a,b),c),d);}

// -------------------------------------------------------------------------------------------------------------

int DP[1005][1005], ID[1005], Par[1005], W[1005], B[1005], N, M, T, Groups, TB[1005], TW[1005];
vii G[1005];

int find(int n)
{
    if(Par[n] == n) return n;
    return Par[n] = find(Par[n]);
}

void join(int a, int b)
{
    Par[find(a)] = find(b);
}

int main()
{
    cin >> N >> M >> T;
    f(i,1,N) cin >> W[i];
    f(i,1,N) cin >> B[i];
    f(i,1,N) Par[i] = i;
    f(i,1,M)
    {
        int a,b;
        scanf("%d %d", &a, &b);
        join(a,b);
    }
    f(i,1,N) if(find(i) == i)
    {
        Groups++;
        ID[i] = Groups;
    }
    f(i,1,N)
    {
        int g = ID[find(i)];
        G[g].pb({B[i],W[i]});
        TB[g] += B[i];
        TW[g] += W[i];
    }
    f(g,0,Groups-1) f(w,0,T)
    {
        DP[g+1][w] = max(DP[g+1][w], DP[g][w]);
        if(w + TW[g+1] <= T) DP[g+1][w + TW[g+1]] = max(DP[g+1][w + TW[g+1]], DP[g][w] + TB[g+1]);
        for(pii p : G[g+1])
        {
            int nb = DP[g][w] + p.first;
            int nw = w + p.second;
            if(nw <= T) DP[g+1][nw] = max(DP[g+1][nw], nb);
        }
    }
    int ans = 0;
    f(w,0,T) ans = max(ans, DP[Groups][w]);
    cout << ans;
}
