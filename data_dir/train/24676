#include <cstdio>
#include <iostream>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
#include <memory.h>
#include <string.h>
#include <time.h>

using namespace std;

#pragma comment(linker, "/STACK:100000000")

#define mp make_pair
#define pb push_back
#define ll long long
#define ull long long
#define sz(x) (int)(x).size()

#define double long double

double fact[1000100];

ll v[1000100];
ll c[1000100];


ll val[1000100];
int ri[1000100];
multiset<ll> vis;
multiset<ll> coi;

double Cnk(int n, int k) {
	return fact[n] - fact[k] - fact[n-k];
}
int n, k;


void solve() {
	/*for(int i = 0; i < n; i++) {
		ll poset = v[i];
		ll zarab = c[i];
		ll res = min(poset, zarab);
		for(int j = i + 1; j < n; j++) {
			poset = max(poset, v[j]);
			zarab = min(zarab, c[j]);
			res = max(res, min(poset, zarab));
		}
		val[i] = res;
	}*/
	ri[n-1] = n-1;
	val[n-1] = min(v[n-1], c[n-1]);
	vis.insert(v[n-1]);
	coi.insert(c[n-1]);
	for(int i = n - 2; i >= 0; i--) {
		vis.insert(v[i]);
		coi.insert(c[i]);
		ll maxvis = *(--vis.end());
		ll mincoi = *(coi.begin());
		val[i] = min(maxvis, mincoi);
		ri[i] = ri[i+1];
		while(ri[i] > i) {
			vis.erase(vis.find(v[ri[i]]));
			coi.erase(coi.find(c[ri[i]]));
			ll maxvis2 = *(--vis.end());
			ll mincoi2 = *(coi.begin());
			ll value = min(maxvis2, mincoi2);
			if(value >= val[i]) {
				val[i] = value;
				ri[i]--;
			}
			else {
				vis.insert(v[ri[i]]);
				coi.insert(c[ri[i]]);
				break;
			}
		}
	}
}

int main()
{
	//freopen("input.txt","rt",stdin);
    //freopen("output.txt","wt",stdout);
    //freopen("console.in","rt",stdin);
    //freopen("console.out","wt",stdout);

	fact[0] = 0;
	for(int i = 1; i < 1000100; i++) {
		fact[i] = fact[i-1] + (double)log((double)i);
	}


	scanf("%d %d", &n, &k);

	for(int i = 0; i < n; i++) {
		scanf("%lld", &v[i]);
		v[i] *= 100LL;
	}
	for(int i = 0; i < n; i++) {
		scanf("%lld", &c[i]);
	}

	// поиск массива val
	// ...
	solve();


	sort(val, val + n);

	double all = Cnk(n, k);
	double res = 0.0;
	for(int i = 0; i < n; i++) {
		if(n - i - 1 >= k - 1)
			res += exp(log((double)val[i]) + Cnk(n - i - 1, k - 1) - all);
	}
#undef double
	printf("%.11lf\n", (double)res);

	return 0;
}
