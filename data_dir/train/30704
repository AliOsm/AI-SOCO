// In The Name Of God :
#include <bits/stdc++.h>
using namespace std ;
#define PB push_back
#define X first 
#define Y second
#define S string
#define ALL(a) a . begin ( ) , a . end ( ) 
#define print(ab) for(int ii=0;ii<ab.size();ii++)cout<<ab[ii]<< ' ' ;
#define print_pair(ab) for(int i=0;i<ab.size();i++)cout<<ab[i].X<< " " << ab[i].Y<<endl ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define int long long
//#define cout<< cout<<setprecision ( 25 )<<;
typedef long long ll;
typedef long double ld;
typedef pair < int , int > pii ;
typedef pair < pii , int > piii ;
const int maxn = 1e6 + 100  ;
const int maxL = 25  ;
const int inf = 1e18 + 1 ; 
int n , a , b , c , q , ar [ maxn ] ;
vector < int > vc [ maxn ] ;

int solv ( int l , int r , vector < int > & in ) 
{
  int hlp = lower_bound ( ALL ( in ) , l ) - in . begin ( ) ; 
  int hlp1 = upper_bound ( ALL ( in ) , r ) - in . begin ( ) - 1 ;
  if ( hlp1 == in . size ( ) ) 
    return -1 ; 
  return hlp1 - hlp + 1 ;
} 

int bin ( int s , int e , int x ) 
{ 
  //cerr << "\n*************\n" ;
  //cerr << s << ' ' << e << ' ' << x << ' ' << endl  ; 
  if ( e == s ) 
    if ( ar [ s ] != x ) 
      return s ; 
    else 
      return -2 ; 
  if ( e - s == 1 ) 
    {
      if ( ar [ s ] != x ) 
	return s ; 
      else if ( s + 1 != n && ar [ s + 1 ] != x ) 
	return s + 1 ; 
      else 
	return -2 ;
    }
  int mid = ( s + e + 1 ) / 2 ; 
  //cerr << mid << ' ' << solv ( s , mid , vc [ x ] ) << ' ' << solv ( mid , e , vc [ x ] )  << endl ;
  //cerr << "\n*************\n" ;
  if ( solv ( s , mid , vc [ x ] ) != mid - s + 1 ) 
    return bin ( s , mid , x ) ; 
  else 
    return bin ( mid , e , x ) ;
}

main ( ) 
{
  // fast ; 
  scanf ( "%d%d" , &n , &q ) ;
  for ( int i = 0 ; i < n ; i ++ )
    { 
      scanf ( "%d" , &a ) ; 
      ar [ i ] = a , vc [ a ] . PB ( i ) ; 
    }
  while ( q -- ) 
    {
      scanf ( "%d%d%d" , &a , &b , &c ) ;
      printf ( "%d\n" , bin ( a - 1 , b - 1 , c ) + 1 ) ; 
    }
}
