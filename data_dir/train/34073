#include <bits/stdc++.h>
using namespace std;

template<typename T>
vector<int> manacher(vector<T>& s){
    int N = s.size();
    vector<T> S(2*N-1, -1);
    for(int i=0; i<N; i++) S[2*i] = s[i];

    vector<int> result(2*N-1, 0);
    int i = 0, j = 0;
    while(i < 2*N-1){
        while(i-j >= 0 && i+j < 2*N-1 && S[i-j] == S[i+j]) j++;
        result[i] = j;
        int k = 1;
        while(i-k >= 0 && i+k < 2*N-1 && k + result[i-k] < j){
            result[i+k] = result[i-k];
            k++;
        }
        i += k;
        j -= k;
    }
    return result;
}

vector<int> manacher(string& s){
    int N = s.size();
    vector<int> v(N);
    for(int i=0; i<N; i++) v[i] = s[i];
    return manacher(v);
}

void solve(){
    string S;
    cin >> S;
    int N = S.size();
    int pre = 0;
    while(pre < N && S[pre] == S[N-1-pre]) pre++;
    auto M = manacher(S);

    int ans = 0, lnum = 0, rnum = 0;
    for(int i=0; i<2*N-1; i++){
        int r = M[i];
        int L = (i-r+2)/2;
        int R = (i+r-1)/2;
        if(L > R) continue;
        if(L <= N-1-R && pre >= L){
            int res = R-L+1 + 2*L;
            if(ans < res){
                ans = res;
                lnum = R+1;
                rnum = L;
            }
        }
        if(L >= N-1-R && pre >= N-1-R){
            int res = R-L+1 + 2*(N-1-R);
            if(ans < res){
                ans = res;
                lnum = N-1-R;
                rnum = N-L;
            }
        }
    }
    string Ans = S.substr(0, lnum) + S.substr(N-rnum, rnum);
    cout << Ans << "\n";
}

int main(){
    int T;
    cin >> T;
    while(T--) solve();
    return 0;
}
