#include "bits/stdc++.h"
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
using namespace __gnu_pbds;
using namespace std;
typedef long long ll;
#define int long long
#define pb push_back
#define fi first
#define se second
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define sz(x) (int)x.size()
const int mod = 1e9 + 7;
// const int mod1 = 998244353;
typedef long double f80;
 
#ifndef LOCAL
#pragma GCC optimize ("O2")
#define endl '\n'
#endif
 
template<typename T>
using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
 
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
    uniform_int_distribution<int> uid(l, r);
    return uid(rng);
}
 
ll pwr(ll a,ll b, ll mod){
    a %= mod;
    int ans = 1;
    while(b){
        if(b & 1) ans = (ans * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ans;
}
 
string to_string(string s) {
  return '"' + s + '"';
}
 
string to_string(const char* s) {
  return to_string((string) s);
}
 
string to_string(bool b) {
  return (b ? "true" : "false");
}
 
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
 
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
 
void debug_out() { cerr << endl; }
 
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
 
#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

void debug1(int a[], int l,int r) {
	#ifdef LOCAL
		vector<int> temp(a + l, a + r + 1);
		debug(temp);
	#endif
}

typedef unsigned long long ui64;
inline ui64 mul_mod(ui64 a,ui64 b,ui64 mod, f80 i=0){
if(!i) i = f80(1) / f80(mod);
ui64 y = ui64(f80(a) * f80(b) * i + f80(1) / 2);
ui64 r = a * b - y * mod;
if(ll(r) < 0) r += mod;
return r;
}

// C function for extended Euclidean Algorithm 
int ext_gcd(int a, int b, int *x, int *y) 
{ 
    // Base Case 
    if (a == 0) 
    { 
        *x = 0; 
        *y = 1; 
        return b; 
    } 
  
    int x1, y1; // To store results of recursive call 
    int gcd = ext_gcd(b%a, a, &x1, &y1); 
  
    // Update x and y using results of recursive 
    // call 
    *x = y1 - (b/a) * x1; 
    *y = x1; 
  
    return gcd; 
} 

// #define __int128 int

class ChineseRemainderTheorem {
    typedef long long vlong;
    typedef pair<vlong,vlong> pll;

    /** CRT Equations stored as pairs of vector. See addEqation()*/
    vector<pll> equations;

public:
    void clear() {
        equations.clear();
    }

    /** Add equation of the form x = r (mod m)*/
    void addEquation( vlong r, vlong m ) {
        equations.push_back({r, m});
    }
    pll solve() {
        if (equations.size() == 0) return {-1,-1}; /// No equations to solve

        vlong a1 = equations[0].first;
        vlong m1 = equations[0].second;
        a1 %= m1;
        /** Initially x = a_0 (mod m_0)*/

        /** Merge the solution with remaining equations */
        for ( int i = 1; i < sz(equations); i++ ) {
            vlong a2 = equations[i].first;
            vlong m2 = equations[i].second;

            vlong g = __gcd(m1, m2);
            if ( a1 % g != a2 % g ) return {-1,-1}; /// Conflict in equations

            /** Merge the two equations*/
            vlong p, q;
            ext_gcd(m1/g, m2/g, &p, &q);

            vlong mod = m1 / g * m2;
            if(p < 0) p += mod;
            if(q < 0) q += mod;
            int x1 = mul_mod(mul_mod(a1, m2 / g, mod), q, mod);
            int x2 = mul_mod(a2, m1 / g, mod);
            int x4 = mul_mod(x2, p, mod);
            vlong x = ( x1 + x4 ) % mod;

            /** Merged equation*/
            a1 = x;
            if ( a1 < 0 ) a1 += mod;
            m1 = mod;
        }
        return {a1, m1};
    }
} CRT;
void solve(){
	int a1, b1, a2, b2, l, r;
	cin >> a1 >> b1 >> a2 >> b2 >> l >> r;
	int mini = min({b1, b2, l, r});
	b1 -= mini;
	b2 -= mini;
	l -= mini;
	r -= mini;
	l = max({l, b1, b2});
	// fr(j, l, r) {
	// 	if(j >= b1 && (j - b1) % a1 == 0 && j >= b2 && (j - b2) % a2 == 0) {
	// 		tot++;
	// 	}
	// }
	if(l > r) {
		cout << 0;
		return;
	}
	l--;
	b1 %= a1;
	b2 %= a2;
	debug(b1, a1);
	debug(b2, a2);
	CRT.addEquation(b1, a1);
	CRT.addEquation(b2, a2);
	pii lol = CRT.solve();
	int first_val = lol.fi, dd = lol.se;
	if(lol == pii{-1, -1}) {
		cout << 0;
		return;
	}
	int ans = 0;
	if(first_val <= r) {
		ans += (r - first_val) / dd + 1;
	}
	if(first_val <= l) {
		ans -= (l - first_val) / dd + 1;
	}
	cout << ans;
}

signed main(){
    IO;
    #ifdef LOCAL
        freopen("inp.txt","r", stdin);
        freopen("out.txt", "w", stdout);
    #endif
    cout << setprecision(10) << fixed;
    int t = 1;
    // cin >> t;
    fr(tt, 1, t){
        solve();
    }
    return 0;
} 