#include <bits/stdc++.h>

using namespace std;

const int N = 200010;

int a[N];

class fenwick {
  public:
  int n;
  vector<int> f;

  fenwick(int n) : n(n) {
    f.resize(n, 0);
  }

  void clear() {
    fill(f.begin(), f.end(), 0);
  }

  int get(int i) {
    int ret = 0;
    while (i > 0) {
      ret += f[i];
      i -= i & -i;
    }
    return ret;
  }

  void update(int i, int x) {
    while (i < n) {
      f[i] += x;
      i += i & -i;
    }
  }

  int get(int i, int j) {
    if (j < i) return 0;
    int ret = get(j);
    ret -= get(i - 1);
    return ret;
  }
};
   
int main() {
  int n;
  scanf("%d", &n);
  map<int, int> mp;
  for (int i = 0; i < n; i++) {
    scanf("%d", a + i);
    mp[a[i]];
  }
  int sz = 1;
  for (auto & it : mp) {
    it.second = sz++;
  }
  fenwick fen(sz + 5);
  long double ans = 0;
  for (int i = 0; i < n; i++) {
    int ls = fen.get(1, mp[a[i]] - 1 - mp.count(a[i] - 1));
    int gt = fen.get(mp[a[i]] + 1 + mp.count(a[i] + 1), sz);
    ans += (long long) a[i] * (ls + gt);
    fen.update(mp[a[i]], 1);
  }
  fen.clear();
  for (int i = n - 1; i >= 0; i--) {
    int ls = fen.get(1, mp[a[i]] - 1 - mp.count(a[i] - 1));
    int gt = fen.get(mp[a[i]] + 1 + mp.count(a[i] + 1), sz);
    ans -= (long long) a[i] * (ls + gt);
    fen.update(mp[a[i]], 1);
  }
  printf("%.0Lf\n", ans);
  return 0;
}