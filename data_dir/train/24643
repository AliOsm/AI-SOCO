#include <bits/stdc++.h>
#define F first
#define S second
#define all(a) a.begin(),a.end()
#define setDP(arr) memset(arr,-1,sizeof arr)
#define Clear(arr) memset(arr,0,sizeof arr)
#define oo 1000000000
#define inf 1000000000000000000
#define M 998244353
using namespace std;
typedef long long ll;
const int N = 1e6+300;
const int SQRTN = 320;
const int LOGN = 20;
const double PI = acos(-1);
const double TAU = 2*PI;

int bit[N],n,freq[N],q;

int get(int i){ 
    int ret = 0;
    i = i + 1;
    while (i>0){
        ret += bit[i];
        i -= i & (-i); 
    } 
    return ret; 
}

void update(int i,int val){
    i = i + 1;
    while (i < N){
        bit[i] += val;
        i += i & (-i);
    } 
}

void build() {
    for (int i=1; i<=N; i++) 
        bit[i] = 0; 
    for (int i=0; i<N; i++) 
        update(i, freq[i]);
}

int getVal(int idx){
    int s = 0,e=N-1,mid,best=0;
    while(s<=e){
        mid=s+e>>1;
        if(get(mid)>=idx){
            e=mid-1;
            best=mid;
        }else{
            s=mid+1;
        }
    }
    return best;
}

inline void solve(){
    cin >> n >> q;
    for(int i = 0,a ; i < n ; i++){
        scanf("%d",&a);
        freq[a]++;
    }
    build();
    for(int i = 0,k,idx ; i< q ; i++){
        scanf("%d",&k);
        if(k>0){
            update(k,1);
        }else{
            idx=getVal(-k);
            update(idx,-1);
        }
    }
    cout << getVal(1) << endl;


}

signed main() {
    int t=1;
    //cin >> t;
    while(t--){
        solve();
    }
    return 0;
}