#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cctype>
#include <string>
#include <vector>
#include <list>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <algorithm>
#include <functional>
#include <iomanip>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define nl cout<<'\n'
#define ff first
#define ss second
#define READ freopen("input.txt","r",stdin);
#define WRITE    freopen("output.txt","w",stdout);
#define fill(a,x) memset(a,x,sizeof(a));
#define loop(i,x,n) for(int i=x;i<n;i++)
#define TC() ll ttwea;cin>>ttwea;while(ttwea--)
#define ll long long
#define mod 1000000007
#define vi vector<ll>
#define pb push_back
#define mp make_pair
#define all(a) a.begin(), a.end()
#define ull unsigned long long
#define N 4000100
#define inf 100000000000000
#define debug1(x) cerr << #x << ": " << x <<'\n'
#define debug2(x, y) cerr << #x << ": " << x << '\t' << #y << ": " << y <<'\n'
#define debug3(x, y, z) cerr << #x << ": " << x << '\t' << #y << ": " << y << '\t' << #z << ": " << z <<'\n'
using namespace std;
//ll dx[]={1,0,-1,0};ll dy[]={0,1,0,-1}; //4 Direction
//ll dx[]={1,1,0,-1,-1,-1,0,1};ll dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
ll gcd(ll x,ll y)
{
    if(y==0)
        return x;
    else
        return gcd(y,x%y);
}
ll expo(ll n,ll m,ll p)   //MODULAR EXPONENTIATION
{
    ll r=1;
    while(m>0)
    {
        if(m%2)
            r=(r*n)%p;
        n=(n*n)%p;
        m=m/2;
    }
    return r%p;
}
/*string s;
ll dp[6000][3];
ll solve(ll i,ll state)
{
  if(i==s.size())
    return 0;
  if(dp[i][state]!=-1)
    return dp[i][state];
  ll ans;
  if(state==0)
  {
    if(s[i]=='a')
      ans= min(solve(i+1,state),1+solve(i+1,state+1));
    else 
      ans= min(solve(i+1,1),1+solve(i+1,0));
  }
  else if(state==1)
  {
    if(s[i]=='b')
    {
      ans= min(solve(i+1,1),1+solve(i+1,2));
    }
    else
      ans= min(solve(i+1,2),1+solve(i+1,1));
  }
  else
  {
    if(s[i]=='b')
      ans= 1+solve(i+1,2);
    else
      ans= solve(i+1,2);
  }
  //return min()
  dp[i][state]=ans;
  return ans;
}*/
int main()
{
 
   IOS;
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin); 
   freopen("output.txt","w",stdout);
   #endif
   /********************* Code starts here ************************/
   //string s;
   /*for(ll i=0;i<6000;i++)
    for(ll j=0;j<3;j++)
      dp[i][j]=-1;
   cin>>s;
   ll ans;
   if(s[0]=='a')
   {
    ans=min(solve(1,0),1+solve(1,1));
   }
   else
    ans=min(solve(1,1),1+solve(1,0));
  cout<<s.size()-ans;*/
   ll n;
   cin>>n;
   cout<<n+n/2<<'\n';
   for(ll i=2;i<=n;i+=2)
    cout<<i<<' ';
  for(ll i=1;i<=n;i+=2)
    cout<<i<<' ';
  for(ll i=2;i<=n;i+=2)
    cout<<i<<' ';
   return 0;
} 