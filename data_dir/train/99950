#include <bits/stdc++.h>

using namespace std;

typedef unsigned uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ldbl;
typedef pair<int, int> pii;
typedef pair<uint, uint> puu;
typedef pair<ll, ll> pll;
typedef pair<ull, ull> pull;
typedef vector<int> vi;
typedef vector<uint> vu;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<pii> vpii;
typedef vector<puu> vpuu;
typedef vector<pll> vpll;
typedef vector<pull> vpull;
typedef vector<string> vstr;
typedef vector<double> vdbl;
typedef vector<ldbl> vldbl;
#define pb push_back
#define ppb pop_back
#define pfr push_front
#define ppfr pop_front
#define emp emplace
#define empb emplace_back
#define be begin
#define rbe rbegin
#define all(x) (x).be(), (x).end()
#define rall(x) (x).rbe(), (x).rend()
#define fir first
#define sec second
#define mkp make_pair
#define brif(cond) if (cond) break
#define ctif(cond) if (cond) continue
#define retif(cond) if (cond) return
static inline void canhazfast() {ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}
template<typename T> T gcd(T a, T b) {return b ? gcd(b, a%b) : a;}
template<typename T> T extgcd(T a, T b, T &x, T &y)
{
    T x0 = 1, y0 = 0, x1 = 0, y1 = 1;
    while (b) {
        T q = a/b; a %= b; swap(a, b);
        x0 -= q*x1; swap(x0, x1);
        y0 -= q*y1; swap(y0, y1);
    }
    x = x0; y = y0; return a;
}
int ctz(uint x) {return __builtin_ctz(x);}
int ctzll(ull x) {return __builtin_ctzll(x);}
int clz(uint x) {return __builtin_clz(x);}
int clzll(ull x) {return __builtin_clzll(x);}
int popcnt(uint x) {return __builtin_popcount(x);}
int popcntll(ull x) {return __builtin_popcountll(x);}
int bsr(uint x) {return 31^clz(x);}
int bsrll(ull x) {return 63^clzll(x);}

#define MX 100016
#define SZ (1 << 18)

int a[MX];
int x[MX];
vi p[MX];
vi t[SZ];

void build(int u, int b, int e)
{
    retif(b+1 == e) t[u].pb(x[b]);
    int m = (b+e)/2, lc = 2*u, rc = 2*u+1;
    build(lc, b, m);
    build(rc, m, e);
    merge(all(t[lc]), all(t[rc]), back_inserter(t[u]));
}

int get(int u, int b, int e, int l, int r)
{
    retif(b >= r || l >= e) 0;
    retif(b >= l && r >= e) lower_bound(all(t[u]), l)-t[u].be();
    int m = (b+e)/2, lc = 2*u, rc = 2*u+1;
    return get(lc, b, m, l, r)+get(rc, m, e, l, r);
}

int main()
{
    //canhazfast();

    int n, k, q, last = 0;
    const int A = 100000;

    cin >> n >> k;
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        p[a[i]].pb(i);
    }
    for (int i = 1; i <= A; ++i) {
        for (int j = 0; j < (int)p[i].size(); ++j) {
            x[p[i][j]] = j < k ? -1 : p[i][j-k];
        }
    }
    //cerr << "x ="; for (int i = 0; i < n; ++i) cerr << ' ' << x[i]; cerr << '\n';
    build(1, 0, n);

    cin >> q;
    for (; q; --q) {
        int l, r;
        cin >> l >> r;
        l = (l+last)%n;
        r = (r+last)%n;
        if (l > r) swap(l, r);
        ++r;
        //cerr << "[" << l << ", " << r << ")\n";
        last = get(1, 0, n, l, r);
        cout << last << '\n';
    }

    return 0;
}
