#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

struct CoordinateCompression {
    vector<ll> cc {};

    void insert(ll x) {
        cc.push_back(x);
    }

    int make() {
        sort(cc.begin(), cc.end());
        cc.resize( unique(cc.begin(), cc.end()) - cc.begin() );
        return cc.size();
    }

    int get_pos(ll x) {
        return lower_bound(cc.begin(), cc.end(), x) - cc.begin();
    }

    ll get_val(int p) {
        return cc[p];
    }
};

int main() {
    ios_base::sync_with_stdio(false);

    int n, I;
    cin >> n >> I;

    int K = 1 << min(20, I * 8 / n);

    vector<int> a(n);

    CoordinateCompression C;

    for(int i = 0; i < n; i++) {
        cin >> a[i];

        C.insert(a[i]);
    }

    int m = C.make();
    vector<int> f(m);

    for(int i = 0; i < n; i++) {
        f[C.get_pos(a[i])]++;
    }

    if(K < m) {
        deque<int> w;
        int sum = 0, mx = 0;

        for(int i = 0; i < K; i++) {
            w.push_back(f[i]);
            sum += f[i];
        }
        mx = sum;

        for(int i = K; i < m; i++) {
            sum -= w.front();
            w.pop_front();

            w.push_back(f[i]);
            sum += w.back();

            mx = max(mx, sum);
        }

        cout << n - mx << endl;
    }
    else {
        cout << 0 << endl;
    }

}
