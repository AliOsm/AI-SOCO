#include <bits/stdc++.h>
using namespace std;

const int NMAX = 1010;
int s_lin[NMAX], s_col[NMAX];
int nr_lin[NMAX][NMAX], nr_col[NMAX][NMAX];
bool viz[NMAX][NMAX];
bool val[NMAX][NMAX];
int n, m;

void fill(int x, int y)
{
    if (viz[x][y] || x < 1 || y < 1 || x > n || y > m || !val[x][y])
        return;
    viz[x][y] = 1;
    fill(x + 1, y);
    fill(x, y + 1);
    fill(x - 1, y);
    fill(x, y - 1);
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> m;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            char c;
            cin >> c;
            c = (c == '#');
            s_lin[i] += c, s_col[j] += c;
            val[i][j] = c;
            nr_lin[i][j] = nr_lin[i][j - 1] + c;
            nr_col[i][j] = nr_col[i - 1][j] + c;
        }
    }

    bool lin_empty = 0, col_empty = 0;
    for (int i = 1; i <= n; i++)
        lin_empty |= (s_lin[i] == 0);
    for (int j = 1; j <= m; j++)
        col_empty |= (s_col[j] == 0);

    if (lin_empty ^ col_empty) {
        cout << "-1\n";
        return 0;
    }

    int ans = 0;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (val[i][j] && !viz[i][j])
                ans++, fill(i, j);
            else if (!val[i][j]) {
                int v1 = nr_lin[i][j];
                if (v1 != 0 && v1 != s_lin[i]) {
                    cout << "-1\n";
                    return 0;
                }
                int v2 = nr_col[i][j];
                if (v2 != 0 && v2 != s_col[j]) {
                    cout << "-1\n";
                    return 0;
                }
            }
        }
    }

    cout << ans << '\n';

    return 0;
}