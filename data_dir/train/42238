//g++  5.4.0
 
#include<bits/stdc++.h>
using namespace std;
 
#define ff first
#define ss second
#define int long long
#define pb push_back
#define pii pair< int,int >
#define fast ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0) ;
#define L(p) 2*p+1
#define R(p) 2*p+2
 
const int nax = 2e5+10;
const int inf = 1e18+1;

int jt[4*nax] , lz[4*nax] , flip[4*nax] ; 
vector<int> a;
set< int > st;
map< int,int > mpp;

void push(int l,int h,int p)
{
    if( lz[p] != -1 )
    {
        if( l!=h )
        {
            lz[L(p)] = lz[p] ;
            lz[R(p)] = lz[p];
            flip[L(p)] = flip[R(p)] = 0;
        }
        jt[p] = (h-l+1) * lz[p];
        lz[p] = -1;
    }
    if( flip[p]==1 )
    {
        if( l!=h )
        {
            flip[L(p)] ^= 1 ;
            flip[R(p)] ^= 1 ;
        }
        jt[p] = (h-l+1)-jt[p];
        flip[p] = 0;
    }
    return ;
}
void update( int l,int h,int p,int ql,int qh,int type )
{
    push( l,h,p );
    if( l > qh || h < ql )
        return ;
   
    if( l >= ql && h <= qh )
    {
        if( type == 1 ) lz[p] = 1;
        if( type == 2 ) lz[p] = 0;
        if( type == 3 ) flip[p] ^= 1;
        push( l,h,p );
        return ;
    }
    
    int m = (l+h)>>1;
    update( l,m,L(p),ql,qh,type );
    update( m+1,h,R(p),ql,qh,type );
    jt[p] = jt[L(p)] + jt[R(p)];
    return ;
        
}

int query( int l, int h , int p )
{
    push( l,h,p );
    if( jt[p] == h-l+1 ) return -1;
    if( l==h ) return a[l];
    int m = (l+h)>>1;
    int pp = query( l,m,L(p) );
    if( pp == -1 ) pp = query( m+1,h,R(p) );
    return pp;
}
signed main()
{
    fast;
    int n ;
    cin >> n ;
    vector< pair<int,pii> > q;
    st.insert( 1 );
    for(int i=1 ; i<=n ; i++ )
    {
        int type , l , r;
        cin >> type >> l >> r;
        st.insert( l );
        st.insert( r+1 );
        q.pb( {type,{l,r+1}} );
    }
    int nn = (int)(st.size());
    
    for( auto i : st )
    {
        mpp[i] = (int)(a.size());
        a.pb( i );
    }
    memset( lz , -1 , sizeof(lz) );
    memset( flip,0,sizeof(flip));
    for( auto i : q )
    {
        update( 0,nn-1,0,mpp[i.ss.ff],mpp[i.ss.ss]-1 , i.ff );
        cout <<  query( 0,nn-1,0 )  << "\n";
    }
}