#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <ll>::max() >> 1;
const ll N = 2e5 + 1;
ll n, ans;

ll sb[N][2][2];
ll dp[N][2];

ll sibling(ll, ll);
ll calc(ll, ll);

struct Graph {
    ll val[N];
    vec <ll> adj[N];
} graph;

void input() {
    cin >> n;
    for(ll i = 1; i <= n; ++i) {
        ll p; cin >> p;
        ll v; cin >> v;
        graph.adj[p].pb(i);
        graph.val[i] = v;
    }
}

ll sibling(ll u, ll i, ll j, ll k) {
    if(i == len(graph.adj[u])) {
        return (j? -inf: (k? graph.val[u]: 0));
    }
    ll v = graph.adj[u][i];
    if(sb[v][j][k] != -1) {
        return sb[v][j][k];
    }
    return sb[v][j][k] = max(sibling(u, i + 1, j ^ 0, k) + calc(v, 0),
                             sibling(u, i + 1, j ^ 1, k) + calc(v, 1));
}

ll calc(ll u, ll t) {
    if(dp[u][t] != -1) {
        return dp[u][t];
    }
    if(t) {
        return dp[u][t] = max(sibling(u, 0, 0, 1), sibling(u, 0, 1, 0));
    } else {
        return dp[u][t] = sibling(u, 0, 0, 0);
    }
}

void solve() {
    memset(dp, -1, sizeof dp);
    memset(sb, -1, sizeof sb);
    cout << max(calc(1, 0), calc(1, 1)) << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
