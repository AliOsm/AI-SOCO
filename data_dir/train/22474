#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;

#define endl '\n'
#define ff first
#define ss second
#define int long long
#define pb push_back
#define f(i,l,r) for(ll i=l;i<=r;i++)
#define rf(i,r,l) for(ll i=r;i>=l;i--)
#define Max 5000001
#define inf 2147483647
#define llinf 9223372036854775807
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcountll(n)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)

#define d0(a) cout<<a<<' ';
#define d1(a) cout<<a<<endl;
#define d2(a,b) cout<<a<<' '<<b<<endl;
#define d3(a,b,c) cout<<a<<' '<<b<<' '<<c<<endl;
#define d4(a,b,c,d) cout<<a<<' '<<b<<' '<<c<<' '<<d<<endl;
#define d5(a,b,c,d,e) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<endl;

const ll N=1e6+5,mod=1e9+7,bit=61;

template<typename T>
T add(T a,T b)
{
    a%=mod;
    b%=mod;
	T ans=(a+b)%mod;
	return ans;
}

template<typename T>
T mul(T a,T b)
{
    a%=mod;
    b%=mod;
	T ans=((T)a*(T)b)%mod;
	return ans;
}

template<typename T>
class matrix
{
	public:
		vector<vector<T>> mat;
		ll dim;
		matrix(ll _dim)
		{
			dim=_dim;
			mat=vector<vector<T>> (dim);
			for(ll i=0;i<dim;i++)
			{
				mat[i]=vector<T> (dim);
			}
		}
		void reset()
		{
			for(ll i=0;i<dim;i++)
			{
				for(ll j=0;j<dim;j++)
				{
					mat[i][j]=(T)0;
				}
			}
		}
		void makeiden()
		{
			reset();
			for(ll i=0;i<dim;i++)
			{
				mat[i][i]=(T)1;
			}
		}
		matrix<T> operator + (const matrix<T> &m) const
		{
			matrix<T> res(dim);
			for(ll i=0;i<dim;i++)
			{
				for(ll j=0;j<dim;j++)
				{
					res.mat[i][j]=add(mat[i][j],m.mat[i][j]);
				}
			}
			return res;
		}
		matrix<T> operator * (const matrix<T> &m) const
		{
			matrix<T> res(dim);
			for(ll i=0;i<dim;i++)
			{
				for(ll j=0;j<dim;j++)
				{
					res.mat[i][j]=0;
					for(ll k=0;k<dim;k++)
					{
						res.mat[i][j]=add(res.mat[i][j],mul(mat[i][k],m.mat[k][j]));
					}
				}
			}
			return res;
		}
};

template<typename T>
matrix<T> power(matrix<T> a,ll b)
{
	matrix<T> res(a.dim);
	res.makeiden();
	while(b>0)
	{
		if(b & 1)
		{
			res=res*a;
		}
		a=a*a;
		b>>=1;
	}
	return res;
}

signed main()
{
    fast;

    ll t=1;
    //cin>>t;
    while(t--)
    {
        ll n,k;
        cin>>n>>k;
        matrix<ll> obj(n);
        obj.reset();
        ll a[n];
        f(i,0,n-1)
        {
            cin>>a[i];
        }
        f(i,0,n-1)
        {
            f(j,0,n-1)
            {
                ll x=(a[i]^a[j]);
                if(bp(x)%3==0)
                {
                    obj.mat[i][j]=1;
                }
            }
        }
        matrix<ll> obj1=power(obj,k-1);
        ll ans=0;
        f(i,0,n-1)
        {
            f(j,0,n-1)
            {
                ans=(ans + obj1.mat[i][j])%mod;
            }
        }
        cout<<ans<<endl;
    }
    return 0;
}
















