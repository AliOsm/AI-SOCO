/**/
#include <bits/stdc++.h>
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

vector<vector<int> > graph;
bool vis[1010];

long long nodes,edges;

void dfs(int v) {
	nodes++;
	vis[v] = true;
	for(auto u : graph[v])
		if(!vis[u])
			edges++,dfs(u);
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	int N,M,K,u,v;
	cin>>N>>M>>K;
	graph.resize(N);
	vector<int> sp(K);
	for(int i = 0;i < K;i++) {
		cin>>sp[i];
		sp[i]--;
	}
	for(int i = 0;i < M;i++) {
		cin>>u>>v;
		u--,v--;
		graph[u].push_back(v);
		graph[v].push_back(u);
	}
	long long MX = 0,sumM = 0,sumN = 0;
	long long res = 0;
	for(int i = 0;i < K;i++) {
		nodes = edges = 0;
		dfs(sp[i]);
		MX = max(MX,nodes);
		res += nodes * (nodes - 1ll) /2ll - edges;
		sumM += edges;
		sumN += nodes;
	}
	sumN = N - sumN;
	sumM = M - sumM;
	res += MX * sumN + sumN * (sumN - 1ll) / 2ll - sumM;
	cout<<res<<'\n';
	return 0;
}
/**/
