/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Majk
 */

#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;
typedef unsigned int ui;

template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;

int logceil(ll x) {int b=0;while(x){x>>=1;++b;}return b;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector<vector<T>>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector<vector<T>>>(a,vector<vector<T>>(b,vector<T>(c,t))){}};
//#include "lib.h"
#include <type_traits>

// ordinary suffix array with optional LCP and LCP RMQ. look elsewhere
template <typename Index, bool PrecomputeLCP = false, bool PrecomputeRMQ = false>
class SuffixArray {
public:static_assert(PrecomputeLCP || !PrecomputeRMQ, "Must have RMQ for LCP");
	template <typename T>explicit SuffixArray(T t):N(t.size()),S(N),I(N),LCP(PrecomputeLCP?N:0){
		typedef typename std::remove_reference<decltype(t[0])>::type Item;vector<pair<Item,Index>>TR(N);for(Index i=0;i<N;++i){TR[i]={t[i],i};}
		sort(TR.begin(),TR.end());vector<Index>R(N);Index r=R[TR[0].y]=S[TR[0].y]=0;for(Index i=1;i<N;++i){R[TR[i].y]=r+=(TR[i-1].x!=TR[i].x);S[TR[i].y]=i;}
		vector<Index>RA(N),SA(N),C(N);for(Index k=1;k<N;k<<=1){counting_sort(R,C,SA,k);counting_sort(R,C,SA,0);RA[S[0]]=r=0;for(Index i=1;i<N;++i){RA[S[i]]
		=r+=(R[S[i]]!=R[S[i-1]]||S[i]+k >= N||S[i-1]+k>=N||R[S[i]+k]!=R[S[i-1]+k]);}swap(RA,R);if(R[S[N-1]]==N-1)break;}for(Index i=0;i<N;++i){I[S[i]]=i;}
		if(PrecomputeLCP){Index k=0;for(Index i=0;i<N;++i){if(I[i]==N-1){LCP[I[i]]=k=0;continue;}while(i+k<N&&S[I[i]+1]+k<N&&t[i+k]==t[S[I[i]+1]+k]){++k;}LCP[I[i]]=k;if(k>0){--k;}}}
		if(PrecomputeRMQ){RMQ.push_back(LCP);for(int p=0;(1<<p)<N;++p){RMQ.push_back(RMQ[p]);for(int i=0;i<N-(1<<p);++i){RMQ[p+1][i]=min(RMQ[p+1][i],RMQ[p][i+(1<<p)]);}}}}
	Index next(Index i) { return (I[i] == N-1) ? -1 : S[I[i]+1]; }
	template<typename=std::enable_if<PrecomputeLCP>>Index lcp(Index i)const{return LCP[I[i]];}
	template<typename=std::enable_if<PrecomputeRMQ>>Index lcp(Index i,Index j)const{
		i=I[i];j=I[j];if(i>j){swap(i,j);}if(i==j-1)return LCP[i];Index p=0;while((1<<p)<j-i){++p;}--p;return min(RMQ[p][i],RMQ[p][j-(1<<p)]);}
	inline void counting_sort(const vector<int>&R,vector<int>&C,vector<int>&SA,int k){Index i;fill(C.begin(), C.end(), 0);for(i=0;i<N;i++)
		{C[i+k<N?R[i+k]:0]++;}for(Index sum=i=0;i<N;i++){C[i]=(sum+=C[i],sum-C[i]);}for(i=0;i<N;i++){SA[C[S[i]+k<N?R[S[i]+k]:0]++]=S[i];}swap(SA, S);}
	Index N;vector<Index>S,I,LCP;vector<vector<Index>>RMQ;
};

class A8 {
public:
    void solve(istream& cin, ostream& cout) {
        string S, T, U; cin >> S >> T >> U;
		bool q[2];
		for (int i = 0; i <= 1; ++i) {
			string Q = S + '$' + T + '#' + U + '!';
			SuffixArray<int, true> A(Q);
			int firstT = 1000000;
			for (int f = S.size() + 1; f != -1 && A.lcp(f) >= T.size(); ) {
				f = A.next(f);
				if (f < S.size()) firstT = min(firstT, f);
			}
			int lastU = -1;
			for (int f = S.size() + 1 + T.size() + 1; f != -1 && A.lcp(f) >= U.size(); ) {
				f = A.next(f);
				if (f < S.size()) lastU = max(lastU, f);
			}
			q[i] = (firstT + (int)T.size() <= lastU);
			if (i==0) {
				reverse(S.begin(), S.end());
			}
		}

		if (q[0]) cout << (q[1] ? "both" : "forward");
		else cout << (q[1] ? "backward" : "fantasy");

    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	A8 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}

