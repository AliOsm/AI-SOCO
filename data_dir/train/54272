//let's do it
 #include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll int
#define inf 1000000000000
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define boost1 ios::sync_with_stdio(false);
#define boost2 cin.tie(0);
#define mem(a,val) memset(a,val,sizeof a)
#define endl "\n"
#define maxn 300005

vector<ll>v[maxn],adj[maxn];
ll h[maxn],par[maxn][25],vis[maxn],tme,low[maxn],disc[maxn],comp,dia[maxn],finish[maxn],sz[maxn];
set<pair<ll,ll> >bridges;
set<pair<ll,ll> >::iterator it;
vector<pair<ll,ll> >edge;

void dfs(ll cur,ll p)
{
    vis[cur]=1;
    disc[cur]=low[cur]=tme;
    tme++;
    for(ll i=0;i<v[cur].size();i++)
    {
        ll x=v[cur][i];
        if(x==p)
        continue;
        else if(vis[x])
        low[cur]=min(low[cur],disc[x]);
        else
        {
            dfs(x,cur);
            low[cur]=min(low[cur],low[x]);
            if(low[x]>disc[cur])
            {
                if(x>cur)
                bridges.insert(mp(cur,x));
                else
                bridges.insert(mp(x,cur));
            }
        }
    }
}
void dfs1(ll cur)
{
    vis[cur]=comp;
    sz[comp]++;
    for(ll i=0;i<adj[cur].size();i++)
    {
        ll x=adj[cur][i];
        if(vis[x])
        continue;
        dfs1(x);
    }
}
void dfs2(ll cur,ll par)
{
    ll max1=-1;
    ll max2=-1;
    for(ll i=0;i<adj[cur].size();i++)
    {
        ll x=adj[cur][i];
        if(x==par)
        continue;
        dfs2(x,cur);
        dia[cur]=max(dia[cur],dia[x]);
        finish[cur]=max(finish[cur],finish[x]+1);
        if(finish[x]>max1)
        {
            max2=max1;
            max1=finish[x];
        }
        else if(finish[x]>max2)
        max2=finish[x];
    }
    if(max1!=-1 && max2!=-1)
    dia[cur]=max(dia[cur],max1+max2+2);
    else if(max1!=-1)
    dia[cur]=max(dia[cur],max1+1);
}
int main()
{
    boost1;boost2;
    ll i,j,n,m,x,y;
    cin>>n>>m;
    for(i=1;i<=m;i++)
    {
        cin>>x>>y;
        v[x].pb(y);
        v[y].pb(x);
        if(x>y)
        swap(x,y);
        edge.pb(mp(x,y));
    }    
    dfs(1,-1);
    for(i=0;i<edge.size();i++)
    {
        x=edge[i].F;
        y=edge[i].S;
        if(bridges.find(mp(x,y))==bridges.end())
        {
            adj[x].pb(y);
            adj[y].pb(x);
        }
    }
    mem(vis,0);
    for(i=1;i<=n;i++)
    {
        if(!vis[i])
        {
            comp++;
            dfs1(i);
        }
    }
    for(i=1;i<=n;i++)
    adj[i].clear();
    for(it=bridges.begin();it!=bridges.end();it++)
    {
        x=it->F;
        y=it->S;
        x=vis[x];
        y=vis[y];
        adj[x].pb(y);
        adj[y].pb(x);
    }
    dfs2(1,-1);
    cout<<dia[1];
    return 0;
}
