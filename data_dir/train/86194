#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long ll;

const int MAXN = 1000 * 100 + 10;
ll a[MAXN];
vector <int> graph[MAXN];
bool mark[MAXN];

ll LCM(ll a, ll b)
{
    ll ans = a * b;
    if(a < b)
        swap(a, b); 
    while(b != 0)
    {   
        ll c = b;
        b = a % b;
        a = c;
    }   
    return max(ans / a, 1LL);
}

ll dfs(int v)
{
    //cout<< v << " "  << a[v] << endl;
    mark[v] = true;
    ll mn = LLONG_MAX, child = 0, lcm = 1;
    for(int i = 0; i < (int)graph[v].size(); i++)
    {   
        int u = graph[v][i];
        if(!mark[u])
        {   
            ll k = dfs(u);
            mn = min(mn, a[u]);
               lcm = LCM(lcm, k);
            child++;
        }
    }
    if(child == 0)
        return 1;
    a[v] = (((mn / lcm) * lcm)) * child;
    return lcm * child;
}

int main()
{
    int n;
    cin>> n;

    ll sum = 0;
    for(int i = 0; i < n; i++)
    {
        cin>> a[i];
        sum += a[i];
    }

    for(int i = 0; i < n - 1; i++)
    {
        int a, b;
        cin>> a >> b;
        a--;
        b--;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }

    dfs(0);

    cout<< sum - a[0] << endl;
}