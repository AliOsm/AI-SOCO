#include<bits/stdc++.h>
#define LL long long
#define LD long double
#define ull unsigned long long
#define fi first
#define se second
#define mk make_pair
#define PLL pair<LL, LL>
#define PLI pair<LL, int>
#define PII pair<int, int>
#define SZ(x) ((int)x.size())
#define ALL(x) (x).begin(), (x).end()
#define fio ios::sync_with_stdio(false); cin.tie(0);

using namespace std;

const int N = 5e5 + 7;
const int inf = 0x3f3f3f3f;
const LL INF = 0x3f3f3f3f3f3f3f3f;
const int mod = 1e9 + 7;
const double eps = 1e-8;
const double PI = acos(-1);

template<class T, class S> inline void add(T &a, S b) {a += b; if(a >= mod) a -= mod;}
template<class T, class S> inline void sub(T &a, S b) {a -= b; if(a < 0) a += mod;}
template<class T, class S> inline bool chkmax(T &a, S b) {return a < b ? a = b, true : false;}
template<class T, class S> inline bool chkmin(T &a, S b) {return a > b ? a = b, true : false;}

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int n;
vector<int> G[N];

LL dp[N], sz[N];
LL dp2[N];

void dfs(int u, int fa) {
    sz[u] = 1;
    for(auto &v : G[u]) {
        if(v == fa) continue;
        dfs(v, u);
        sz[u] += sz[v];
        dp[u] += dp[v] + sz[v];
    }
}

void dfs2(int u, int fa, LL fsz) {
    dp2[u] = dp[u] + fsz + n;
    for(auto &v : G[u]) {
        if(v == fa) continue;
        fsz += dp[v] + sz[v];
//        if(u == 1) cout << v << " " << dp[v] << " " << sz[v] << "(((" << endl;
    }
//    cout << u << " *** " << fsz << endl;
    for(auto &v : G[u]) {
        if(v == fa) continue;
        fsz -= dp[v] + sz[v];
        dfs2(v, u, fsz + n - sz[v]);
        fsz += dp[v] + sz[v];
    }
}

int main() {
    scanf("%d", &n);
    for(int i = 1; i < n; i++) {
        int u, v; scanf("%d%d", &u, &v);
        G[u].push_back(v);
        G[v].push_back(u);
    }
    dfs(1, 0);
    dfs2(1, 0, 0);
    LL ans = 0;
    for(int i = 1; i <= n; i++) chkmax(ans, dp2[i]);
    printf("%lld\n", ans);
    return 0;
}

/*
*/
