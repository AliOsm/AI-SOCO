/*
1093D. Beautiful Graph
*/

#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
const ll prime = 998244353;

ll t, m, n, u, v, odd, even, a, b, c, sum;
bool flag;
vector<set<ll>> graph(3e5+1);
vector<int> parity(3e5+1,0);
vector<bool> visited(3e5+1,0);
    
void dfs(ll n){
  visited[n] = true;
  for(auto it=graph[n].begin(); it!=graph[n].end(); it++){
    if(visited[*it] == false){
      parity[*it] = 3-parity[n];
      (parity[*it]%2 == 1)? odd++:even++;
      dfs(*it);
    }
    else if(parity[n] == parity[*it]){flag = false; break;}
  }
}

int main(){
  cin >> t;
  while(t--){
    scanf("%lld %lld", &n, &m);
    for(int i=1; i<=n; i++){
      parity[i] = 0; visited[i] = false;
      graph[i].clear();
    }
    
    for(int i=0; i<m; i++){
      scanf("%lld %lld", &u, &v);
      graph[u].insert(v);
      graph[v].insert(u);
    }
    
    flag = true; sum=1;
    for(ll i=1; i<=n; i++){
      if(graph[i].empty()){sum*=3; sum%=prime;}
      else if(!visited[i]){
        odd=1; even=0; c=1;
        parity[i] = 1;
        dfs(i);
        a = min(odd,even); b = max(odd,even);
        for(ll j=0; j<a; j++){sum*=2; sum%=prime;}
        for(ll j=0; j<b-a; j++){c*=2; c%=prime;}
        sum *= (c+1); sum %= prime;
      }
      if(!flag){break;}
    }
    cout << (flag? sum:0) << endl;
  }
}

/*
bool isvowel(char c){
  vector<char> v = { 'A', 'E', 'I', 'O', 'U', 'Y'};
  for(int i=0; i<6; i++){
    if(c == v[i]){return true;}
  }
  return false;
}
*/

/*
void dfs(ll n){
  visited[n] = true;
  for(auto it=graph[n].begin(); it!=graph[n].end(); it++){
    if(visited[*it] == false){
      dfs(*it);
    }
  }
}
*/

/*
  vector<ll> power = {1}, prod = {2};
  ll s = power.size();
  while(power[s-1]*2 < 300000){
    power.push_back(power[s-1]*2);
    prod.push_back((prod*prod)%prime);
    s++;
  }
  */
