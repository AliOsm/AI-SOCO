#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>


template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

const long long MAX = 5100000;
const long long INF = 1LL << 60;
const long long MOD = 1'000'000'007LL;
const long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;



int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/

	ll t; scanf("%lld", &t);
	while (t--) {
		ll n, p, k; scanf("%lld %lld %lld", &n, &p, &k);
		vector<ll> a(n); for (ll i = 0; i < n; i++) scanf("%lld", &a[i]);
		sort(a.begin(), a.end());
		ll res = 0;
		ll l = 0;
		ll r = n;
		while (r - l > 1) {
			ll mid = (l + r) >> 1;
			ll tmp = mid * k;
			if (tmp > n) {
				r = mid;
				continue;
			}
			queue<ll> q;
			for (ll i = tmp - 1; i >= 0; i--) {
				q.push(a[i]);
			}
			ll now = 0;

			while (!q.empty()) {
				ll t = q.front();
				q.pop();
				now += t;
				for (ll j = 0; j < k - 1; j++) {
					q.pop();
				}
			}
			if (now <= p) l = mid;
			else r = mid;
			
		}
		ll cnt = l * k;
		l = 0;
		r = k;

		while (r - l > 1) {
			ll mid = (l + r) >> 1;
			if (cnt + mid > n) {
				r = mid;
				continue;
			}
			ll now = 0;
			for (ll i = 0; i < mid; i++) {
				now += a[i];
			}

			queue<ll> q;
			for (ll i = mid + cnt - 1; i >= mid; i--) {
				q.push(a[i]);
			}

			while (!q.empty()) {
				ll t = q.front();
				q.pop();
				now += t;
				for (ll j = 0; j < k - 1; j++) {
					q.pop();
				}
			}
			if (now <= p) l = mid;
			else r = mid;

		}
		printf("%lld\n", cnt + l);
	}
	return 0;

}
