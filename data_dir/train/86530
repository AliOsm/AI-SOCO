#include <bits/stdc++.h>
using namespace std;

// why am I so weak

const int MOD = 1e9 + 7;

int n;
int v[200055];

vector<int> g[200055];
int subsize[200055][2];

void dfs(int v, int par = -1, int d = 0) {
	subsize[v][d % 2] = 1;

	for (auto u : g[v]) if (u != par) {
		dfs(u, v, d + 1);

		subsize[v][0] += subsize[u][0];
		subsize[v][1] += subsize[u][1];
	}
}
int rdfs(int v, int par = -1, int d = 0) {
	int res = 0;

	for (auto u : g[v]) if (u != par) {
		res = (1ll * res + rdfs(u, v, d + 1)) % MOD;
		
		int same_parity_out = subsize[0][d % 2] - subsize[u][d % 2];
		int diff_parity_out = subsize[0][(d % 2) ^ 1] - subsize[u][(d % 2) ^ 1];

		int same_parity_in = subsize[u][d % 2];
		int diff_parity_in = subsize[u][(d % 2) ^ 1];

		int tot_in = subsize[u][0] + subsize[u][1];
		int tot_out = n - tot_in;
		
		// if same parity then +
		res = (1ll * res + 1ll * ::v[v] * same_parity_in % MOD * tot_out % MOD) % MOD;

		// otherwise -
		res = (1ll * res + -1ll * ::v[v] * diff_parity_in % MOD * tot_out % MOD) % MOD;
	}

	res = (1ll * res + 1ll * ::v[v] * n % MOD) % MOD;

	if (~par) {
		int same_parity_in = subsize[0][d % 2] - subsize[v][d % 2];
		int diff_parity_in = subsize[0][(d % 2) ^ 1] - subsize[v][(d % 2) ^ 1];
		
		int tot_out = subsize[v][0] + subsize[v][1];
		
		// if same parity then +
		res = (1ll * res + 1ll * ::v[v] * same_parity_in % MOD * tot_out % MOD) % MOD;

		// otherwise -
		res = (1ll * res + -1ll * ::v[v] * diff_parity_in % MOD * tot_out % MOD) % MOD;
	}

	res = (1ll * res + MOD) % MOD;

	return res;
}
int main() {
	scanf("%d", &n);

	for (int i = 0; i < n; i++) scanf("%d", &v[i]);

	for (int i = 0; i + 1 < n; i++) {
		int x, y;
		scanf("%d %d", &x, &y);
		x--, y--;

		g[x].push_back(y);
		g[y].push_back(x);
	}

	dfs(0);

	printf("%d\n", rdfs(0));

	return 0;
}

