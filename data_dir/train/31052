#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()
#define endl "\n"

typedef tree<pair<ll,ll> ,null_type,less<pair<ll,ll> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth smallest: " << *A.find_by_order(k-1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

const int MAXN = 2e5 + 5;

ll mn = 1e18;
vector<ll>adj[MAXN], cum[MAXN];

int main()
{
	std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

 	ll n, k, x;
 	cin >> n >> k;
 	for(int i=0;i<n;i++) 
 	{	
 		cin >> x;
 		ll c = 0;
 		while(x)
 		{
 			adj[x].pb(c);
 			c += 1;
 			x /= 2;
 		}
 	}	
 	for(int i=0;i<MAXN;i++) sort(adj[i].begin(), adj[i].end());
 	for(int i=0;i<MAXN;i++) if(sz(adj[i])) cum[i].pb(adj[i][0]);	
    for(int i=0;i<MAXN;i++) for(int j=1;j<sz(adj[i]);j++) cum[i].pb(adj[i][j] + cum[i].back());
    for(int i=0;i<MAXN;i++)
    {
    	if(sz(adj[i]) < k) continue;
    	else mn = min(mn, cum[i][k - 1]);
    }	
    cout << mn << endl;
    return 0;
}