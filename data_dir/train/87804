#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <memory.h>
#include <cstdio>
#include <cmath>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
const int mod = 1e9 + 7;
const ll inf = 1e18;
const int N = 200005;
int n, m, h;
int u[N];
vector< vector < int > > g, gr;
vector<char> used;
vector<int> order, component;
int comp[N];
void dfs1 (int v) {
    used[v] = true;
    for (size_t i=0; i<g[v].size(); ++i)
        if (!used[ g[v][i] ])
            dfs1 (g[v][i]);
    order.push_back (v);
}

void dfs2 (int v) {
    used[v] = true;
    component.push_back (v);
    for (size_t i=0; i<gr[v].size(); ++i)
        if (!used[ gr[v][i] ])
            dfs2 (gr[v][i]);
}
int cnt[N];
int an[N];
int main(){
    cin >> n >> m >> h;
    g.resize(n);
    gr.resize(n);
    for(int i = 0; i < n; ++i){
        cin >> u[i];
    }
    for(int i = 0; i < m; ++i){
        int x, y;
        cin >> x >> y;
        --x; --y;
        if((u[x] + 1) % h == u[y]){
            g[x].push_back(y);
            gr[y].push_back(x);
        }
        if((u[y] + 1) % h == u[x]){
            g[y].push_back(x);
            gr[x].push_back(y);
        }
    }
    used.assign (n, false);
    for (int i=0; i<n; ++i)
        if (!used[i])
            dfs1 (i);
    used.assign (n, false);
    vector< vector < int > > top;
    int sz = 0;
    for (int i=0; i<n; ++i) {
        int v = order[n-1-i];
        if (!used[v]) {
            dfs2 (v);
            top.push_back(component);
            for(auto it : component){
                comp[it] = sz;
            }
            sz++;
            component.clear();
        }
    }
    int ans = mod;
    int id = -1;
    for(int i = 0; i < (int)top.size(); ++i){
        auto it = top[i];
        int cur = (int)it.size();
        int flag = 1;
        for(auto to : it){
            for(auto v : g[to]){
                if(comp[v] != i){
                    flag = 0;
                }
            }
        }
        if(flag == 1){
            if(ans > cur){
                ans = cur;
                id = i;
            }
        }
    }
    cout << ans << endl;
    for(auto it : top[id]){
        cout << it + 1 << " ";
    }
    cout << endl;
    return 0;
}
