//const int N = 2e5+5;
//vi adj[N],radj[N];
//void __(){
//	int n,m;
//	cin >> n >> m;
//	rep(i,m){
//		int u,v;
//		cin >> u >> v;
//		radj[v].pb(u);
//		adj[u].pb(v);
//	}
//	_(int,k);
//	_(vi,path,k);
//	int t = path[k-1];
//	vi dist_t(n+1,-1);
//	dist_t[t] = 0;
//	vi bfs(1,t);
//	rep(i,sz(bfs)){
//		int u = bfs[i];
//		for(int v : radj[u]){
//			if(dist_t[v] == -1){
//				dist_t[v] = dist_t[u]+1;
//				bfs.pb(v);
//			}
//		}
//	}
//	int min_r = 0, max_r = 0;
//	rep(i,0,k-2){
//		if(dist_t[path[i+1]] >= dist_t[path[i]]){
//			min_r++;
//		}
//		bool exists = false;
//		for(int v : adj[path[i]]){
//			if(dist_t[v] <= dist_t[path[i+1]] && v != path[i+1]){
//				exists = true;
//				break;
//			}
//		}
//		max_r += exists;
//	}
//	print min_r,max_r;
//}
//
#include <iomanip>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define REP_INT(i,l,r) for(int i = l; i <= r; ++i)
#define REP_ZERO_INT(i,r) for(int i = 0; i < r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT,REP_ZERO_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<int> vi;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
T1 istream& operator>>(istream& stream, vector<T>& t){
    return read(all(t), stream);
}
T1 istream& read(T b, T e, istream& stream){
    for(T it = b; it != e; ++it)
        stream >> *it;
    return stream;
}
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout)
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }
    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
#define print _print(),
#define INPUT_WITHOUT_INIT(type,name) type name; cin >> name
#define _IWI(type,name,...) type name(__VA_ARGS__); cin >> name
#define GET_INPUT_MACRO(_1,_2,_3,_4,_5,_6,_7,_8,NAME,...) NAME
#define _(...) GET_INPUT_MACRO(__VA_ARGS__,_IWI,_IWI,_IWI,_IWI,_IWI,_IWI,INPUT_WITHOUT_INIT)(__VA_ARGS__)
const int N = 2e5+5;
vi adj[N],radj[N];
void __(){
	int n,m;
	cin >> n >> m;
	rep(i,m){
		int u,v;
		cin >> u >> v;
		radj[v].pb(u);
		adj[u].pb(v);
	}
	_(int,k);
	_(vi,path,k);
	int t = path[k-1];
	vi dist_t(n+1,-1);
	dist_t[t] = 0;
	vi bfs(1,t);
	rep(i,sz(bfs)){
		int u = bfs[i];
		for(int v : radj[u]){
			if(dist_t[v] == -1){
				dist_t[v] = dist_t[u]+1;
				bfs.pb(v);
			}
		}
	}
	int min_r = 0, max_r = 0;
	rep(i,0,k-2){
		if(dist_t[path[i+1]] >= dist_t[path[i]]){
			min_r++;
		}
		bool exists = false;
		for(int v : adj[path[i]]){
			if(dist_t[v] <= dist_t[path[i+1]] && v != path[i+1]){
				exists = true;
				break;
			}
		}
		max_r += exists;
	}
	print min_r,max_r;
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        __();
}
