#include<bits/stdc++.h>
#define x first
#define y second
using namespace std;
const int MXN = 6e5 + 10;
int n, q, ts, T[MXN], seg[MXN * 4], laz[MXN * 4];
pair < pair < int , int > , int > qu[MXN];
vector < int > M;
void Shift(int id, int l, int mid, int r)
{
    if (laz[id] == 0)
        return ;
    if (laz[id] == 1)
    {
        laz[id] = 0;
        laz[id * 2] = laz[id * 2 + 1] = 1;
        seg[id * 2] = T[mid] - T[l];
        seg[id * 2 + 1] = T[r] - T[mid];
        return ;
    }
    laz[id] = 0;
    laz[id * 2] = laz[id * 2 + 1] = 2;
    seg[id * 2] = seg[id * 2 + 1] = 0;
}
void Update(int le, int ri, int k, int id = 1, int l = 0, int r = ts - 1)
{
    if (ri <= l || r <= le)
        return ;
    if (le <= l && r <= ri)
    {
        laz[id] = k;
        if (k == 1)
            seg[id] = T[r] - T[l];
        else
            seg[id] = 0;
        return ;
    }
    int mid = (l + r) / 2;
    Shift(id, l, mid, r);
    Update(le, ri, k, id * 2, l, mid);
    Update(le, ri, k, id * 2 + 1, mid, r);
    seg[id] = seg[id * 2] + seg[id * 2 + 1];
}
int main()
{
    int le, ri , k;
    scanf("%d%d", &n, &q);
    for (int i = 0; i < q; i++)
    {
        scanf("%d%d%d", &qu[i].x.x, &qu[i].x.y, &qu[i].y);
        M.push_back(qu[i].x.x - 1); M.push_back(qu[i].x.y);
    }
    M.push_back(0); M.push_back(n);
    sort(M.begin(), M.end());
    M.resize(unique(M.begin(), M.end()) - M.begin());
    ts = (int)M.size();
    for (int i = 0; i < ts; i++)
        T[i] = M[i];
    for (int i = 0; i < q; i++)
    {
        le = lower_bound(M.begin(), M.end(), qu[i].x.x - 1) - M.begin();
        ri = lower_bound(M.begin(), M.end(), qu[i].x.y) - M.begin();
        Update(le, ri, qu[i].y);
        printf("%d\n", n - seg[1]);
    }
    return (0);
}
