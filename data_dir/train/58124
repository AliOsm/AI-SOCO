// copied by Nurstan Duisengaliev
// skatal
#include <bits/stdc++.h>
 
#define ll long long
#define all(x) x.begin(), x.end()
#define in insert
#define mp make_pair
#define F first
#define S second
#define ppf pop_front
#define pb push_back
#define ppb pop_back
#define pf push_front
#define pii pair <int, int>
#define boost() ios_base::sync_with_stdio(0), cin.tie(0)
#define sz(x) x.size()
 
using namespace std;
 
const int N = (int)1e6 + 123;
const int mod = (int)1e9 + 7;
const ll INF = (ll)1e18 + 7;
int pref[N], suf[N], a[N], d[N * 4];
map <int, int> m;
void update (int v, int l, int r, int pos, int x) {
	if (l == r) {
		d[v] += x;
		return;	
	}
	int mid = l + r >> 1;
	if (pos <= mid) update (v * 2, l, mid, pos, x);
	else update (v * 2 + 1, mid + 1, r, pos, x);
	d[v] = d[v * 2] + d[v * 2 + 1];
}
int get (int v, int l, int r, int nl, int nr) {
	if (nl > r || l > nr) return 0;
	if (nl <= l && r <= nr) return d[v];
	int mid = l + r >> 1;
	return get (v * 2, l, mid, nl, nr) + get (v * 2 + 1, mid + 1, r, nl, nr);
}
void solve () {
	int n;
	cin >> n;
	for (int i = 1; i <= n; i ++) cin >> a[i];
	for (int i = 1; i <= n; i ++) {
		m[a[i]] ++;
		pref[i] = m[a[i]];
	} 
	m.clear ();
	for (int i = n; i >= 1; i --) {
		m[a[i]] ++;
		suf[i] = m[a[i]];
		update (1, 1, n, suf[i], 1);
	}
	ll ans = 0;
	for (int i = 1; i <= n; i ++) {
		update (1, 1, n, suf[i], -1);
		ans += get (1, 1, n, 1, pref[i] - 1);
	}
	cout << ans;
}
 
main () {
//	freopen (".in", "r", stdin);
//	freopen (".out", "w", stdout);
	boost ();
	int TT = 1;
//  cin >> TT;
	while (TT --) {
		solve ();
	}
	return 0;	
}