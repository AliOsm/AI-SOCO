#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef long double real;

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

#define sqr(o) ((o)*(o))

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

using namespace std;

const int MaxN = 1003, MaxL = 1000006, NA = -1, MaxC = 0x3F3F3F3F;
const int MOD = 1000000007, POW = MOD - 2;

int64 fact [MaxL], ifact [MaxL];
int64 f [MaxN] [MaxN];
int k, l, m, n;

int powmod (int a, int b, int c)
{
 int64 cur, res;
 for (cur = a, res = 1; b > 0; b >>= 1)
 {
  if (b & 1)
   res = (res * cur) % MOD;
  cur = (cur * cur) % MOD;
 }
 return (int) res;
}

inline int inv (int a)
{
 return powmod (a, POW, MOD);
}

int main (void)
{
 int i, j;
 int64 cur, res;

 fact[0] = 1;
 for (i = 1; i < MaxL; i++)
  fact[i] = (fact[i - 1] * i) % MOD;
 for (i = 0; i < MaxL; i++)
  ifact[i] = inv (fact[i]);

 while (scanf (" %d %d %d", &n, &m, &k) != EOF)
 {
/*
  c[k] = 1;
  for (i = k - 1; i >= 0; i--)
  {
   c[i] = (c[i + 1] * (i + 1)) % MOD;
   c[i] = (c[i] * inv (k - i)) % MOD;
  }
*/

  memset (f, 0, sizeof (f));
  f[0][0] = 1;
  for (i = 1; i <= n; i++)
   for (j = 1; j <= min (i, k); j++)
    f[i][j] = (f[i - 1][j] * j + f[i - 1][j - 1]) % MOD;

  if (m == 1)
  {
   res = 0;
   for (j = 1; j <= min (n, k); j++)
   {
    cur = (f[n][j] * fact[k]) % MOD;
    cur = (cur * ifact[k - j]) % MOD;
    res = (res + cur) % MOD;
   }
  }
  else
  {
   l = n * (m - 2);
   res = 0;
   for (j = 1; j <= min (n, k); j++)
    for (i = 0; i <= j && i + j <= k; i++)
    {
//     printf ("f[%d][%d] = %d\n", n, j, (int) f[n][j]);
     cur = (f[n][j] * f[n][j]) % MOD;
     cur = (cur * fact[k]) % MOD;
     cur = (cur * fact[j]) % MOD;
     cur = (cur * fact[j]) % MOD;
     cur = (cur * ifact[i]) % MOD;
     cur = (cur * ifact[i]) % MOD;
     cur = (cur * ifact[j - i]) % MOD;
     cur = (cur * ifact[k - j - i]) % MOD;
     cur = (cur * powmod (j - i, l, MOD)) % MOD;
     res = (res + cur) % MOD;
    }
  }

  printf ("%d\n", (int) res);
 }
 return 0;
}
