#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <list>
#include <set>
#include <algorithm>
#include <cmath>
#include <queue>
#include <iterator>
#include <functional>
#include <numeric>
#include <cmath>
#include <stack>
#include <limits>

using namespace std;

#define ll long long
#define f0(i,n)for(i=0;i<n;i++)
#define f1(i,n)for(i=1;i<=n;i++)
#define fc(i,c,n)for(i=c;i<=n;i++)
#define f0r(i,n)for(i=n-1;i>=0;i--)
#define f1r(i,n)for(i=n;i>0;i--)
#define fcr(i,c,n)for(i=n;i>=c;i--)
#define IO ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);

typedef list<ll> LST;
typedef vector<ll> VEC;
typedef map<ll, ll> MAP;

int i, j, q;

struct Edge {
	ll u;
	ll v;
	ll weight;
	Edge(ll u, ll v, ll weight) {
		this->u = u;
		this->v = v;
		this->weight = weight;
	}
};

bool comp(Edge& a, Edge& b) {
	return a.weight < b.weight;
}

ll findSet(ll node, VEC& parents, VEC& sets) {
	while (node != parents[node])
		node = parents[node];
	return sets[node];
}

void unionSet(ll set1, ll set2, VEC& parents, VEC& setRoots, VEC& ranks, VEC& setSpecialsCount){
	if (ranks[set1] < ranks[set2]) {
		parents[setRoots[set1]] = setRoots[set2];
		setSpecialsCount[set2] += setSpecialsCount[set1];
	}
	else if (ranks[set1] > ranks[set2]) {
		parents[setRoots[set2]] = setRoots[set1];
		setSpecialsCount[set1] += setSpecialsCount[set2];
	}
	else {
		parents[setRoots[set1]] = setRoots[set2];
		setSpecialsCount[set2] += setSpecialsCount[set1];
		ranks[set2]++;
	}
}

int main() {
	IO;
	ifstream fin("Text.txt");
	ll n, m, k, u, v, w,edgcnt=0,x;
	cin >> n >> m >> k;
	list<Edge> edges;
	VEC specials(n+1);
	VEC setSpecialsCount(n + 1);
	VEC parents(n+1);
	VEC sets(n+1);
	VEC setRoots(n+1);
	VEC ranks(n + 1);

	f1(i, k) {
		cin >> x;
		specials[x] = 1;
	}

	f0(i, m) {
		cin >> u >> v >> w;
		if(u!=v)
			edges.push_back(Edge(u, v, w));
	}
	
	f1(i, n) {
		sets[i] = i;
		parents[i] = i;
		setRoots[i] = i;
		setSpecialsCount[i] = specials[i];
	}

	edges.sort(comp);
	list<Edge>::iterator it = edges.begin();
	ll set1, set2;
	ll ans = 0;
	while (edgcnt < n - 1) {
		set1 = findSet(it->u, parents, sets);
		set2 = findSet(it->v, parents, sets);
		if ( set1 != set2) {
			if (setSpecialsCount[set1] + setSpecialsCount[set2] == k) {
				ans = it->weight;
				break;
			}
			unionSet(set1, set2,parents,setRoots,ranks,setSpecialsCount);
			edgcnt++;
		}
		it++;
	}
	f1(i, k) {
		cout << ans << " ";
	}
	cout << endl;
	return 0;
}