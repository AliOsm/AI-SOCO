#include<iostream>
	#include<math.h>
	#include <bits/stdc++.h>
	#include<string>
	#include<algorithm>
	
	using namespace std;
	
	#define ll long long
	#define D double
	#define ff first
	#define ss second
	#define FOR(a,n) for(i=0;i<n;i++){	cin>>a[i];}
	#define pb push_back
	
	
	vector< vector<ll> > v;
	vector<bool> th(1010),ch(1010);

	 bool isPrime(int n)
		{
		    
		    if (n <= 1)  return false;
		    if (n <= 3)  return true;
		    
		    if (n%2 == 0 || n%3 == 0) 
		    	return false;
		 
		    for (int i=5; i*i<=n; i=i+6)
		    {
		        if (n%i == 0 || n%(i+2) == 0)
		           return false;
		    }
		    
		    return true;
		}
	
	void swap(char a,char b)
	{
		char t;
		t=a;
		a=b;
		b=t;
	}
	
	ll fact(ll n)
	{
		if(n<=1)
		return 1;
		else
		return n*fact(n-1);
	}
	
	ll comb(ll n, ll k) 
{ 
    ll res = 1; 
  
     
    if ( k > n - k ) 
        k = n - k; 
  
    
    for (ll i = 0; i < k; ++i) 
    { 
        res *= (n - i); 
        res /= (i + 1); 
    } 
  
    return res; 
} 
	
	ll GCD(ll a,ll b)
	{
		if(b==1)
		return 1;
		else
		return GCD(b,a%b);
	}
	
	ll dig(ll n)
	{
		ll c=0;
		while(n>0)
		{
			ll x=n%10;
			if(x!=0)
			c++;
			n=n/10;
		}
		return c;
	}
	
	bool DFS(ll n)
	{	bool ch[1010];
		stack<ll> s;
		ll ans=0;
		ch[n]=true;
		s.push(n);
		if(th[n]==true)
		ans++;
		while(s.size()>0)
		{	
			ll x=s.top();
			s.pop();
		cout<<"X";
			for(ll i=0;i<v[x].size();i++)
			{
				if(ch[v[x][i]]==false)
				{	
					
					s.push(v[x][i]);
					ch[v[x][i]]=true;
					if(th[v[x][i]]==true)
					ans++;
					if(ans>=2)
					{
						return false;
					}
				}
			}
		
		}
		return true;
	
	}
	
		queue<int> q;
	void BFS(ll n)
	{
		ll i,le[n+1];
		q.push(n);
		le[n]=0;
		ch[n]=true;
		
		while(q.size()>0)
		{
			ll x=q.front();
			q.pop();
			
			for(i=0;i<v[x].size();i++)
			{
				if(ch[v[x][i]]==false)
				{
					q.push(v[x][i]);
					ch[v[x][i]]=true;
					le[v[x][i]]=le[x]+1;
					
				}
			}
		}
		
		
	}
	
ll count(ll n)
	{
		ll c=1,k=n;
		
		while(k>0)
		{
			ll x=k%10;
			if(x!=0)
			c=c*x;
			k=k/10;
			//cout<<n<<" ";
		}
		return c;
		}	
		

	int main()
	{
		ll n,m,k,i,x;
		cin>>n>>m;
		
		ll a[n],max=-1,c=0;
		for(i=0;i<n;i++)
		{
			cin>>a[i];
			if(a[i]>max)
			max=a[i];
		
		}
		for(i=0;i<n;i++)
		c=c+max-a[i];
		
	//	cout<<max<<" "<<c<<endl;
		
		if((m-c)%n==0)
		x=0;
		else
		x=1;
		if(m<=c)
		cout<<max<<" ";
		else
		cout<<max+(m-c)/n+x<<" ";
		
		cout<<max+m;
		
		
	}
