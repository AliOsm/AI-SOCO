#include <bits/stdc++.h>
using namespace std;

const int N = 3e5 + 100, MOD = 998244353;

int sum(int a, int b) {
	a += b;
	if (a < 0)
		a += MOD;
	else if (a >= MOD)
		a -= MOD;
	return a;
}

void _sum(int &a, int b) {
	a = sum(a, b);
}

int mul(int a, int b) {
	return 1LL * a * b % MOD;
}

void _mul(int &a, int b) {
	a = mul(a, b);
}

int power(int a, int b) {
	int res = 1;
	while (b) {
		if (b & 1)
			_mul(res, a);
		_mul(a, a);
		b >>= 1;
	}
	return res;
}

int inv(int x) {
	return power(x, MOD - 2);
}

int n, x[N], dp[N], all[N];
vector<int> nei[N];

void dfs(int v = 0, int par = 0) {
	x[v] = all[v] = 1;
	for (int u: nei[v])
		if (u ^ par) {
			dfs(u, v);
			_mul(all[v], sum(dp[u], all[u]));
			_mul(x[v], sum(all[u], sum(dp[u], dp[u])));
		}
	for (int u: nei[v])
		if (u ^ par)
			_sum(dp[v], mul(mul(x[v], inv(sum(all[u], sum(dp[u], dp[u])))), x[u]));
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n;
	for (int i = 0; i < n - 1; i++) {
		int u, v;
		cin >> u >> v;
		nei[--u].push_back(--v);
		nei[v].push_back(u);
	}
	dfs();
	cout << sum(dp[0], all[0]);
}
