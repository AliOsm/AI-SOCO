#include <iostream>
#include <fstream>
#include <cstring>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <iomanip>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <iterator>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define mp make_pair
#define up_b upper_bound
#define low_b lower_bound
#define bit __builtin_popcount
#define all(x) x.begin(),x.end()

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef pair<ll,ll> pll;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> indexed_set;

const ll INF=1e18+123;
const ld EPS=1e-9;
const int inf=1e9+123;
const int MOD=1e9+7;
const int N=1e5+123;
const int dx[]={0,0,1,-1};
const int dy[]={1,-1,0,0};

int ans[N],a[N],t[4*N],n;

vector<int>v;

map<int,int>id;

void upd(int pos,int val,int v=1,int tl=1,int tr=n){
    if(tl==tr){
        t[v]=max(t[v],val);
        return;
    }
    int tm=(tl+tr)/2;
    if(pos<=tm){
        upd(pos,val,v+v,tl,tm);
    }
    else{
        upd(pos,val,v+v+1,tm+1,tr);
    }
    t[v]=max(t[v+v],t[v+v+1]);
}

int get(int r,int v=1,int tl=1,int tr=n){
    if(tl>r){
        return 0;
    }
    if(tr<=r){
        return t[v];
    }
    int tm=(tl+tr)/2;
    return max(get(r,v+v,tl,tm),get(r,v+v+1,tm+1,tr));
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>a[i];
        v.push_back(a[i]);
    }
    sort(all(v));
    for(int i=0;i<n;i++){
        id[v[i]]=i+1;
    }
    for(int i=n;i;i--){
        a[i]=id[a[i]];
        ans[i]=get(a[i]-1)-i-1;
        upd(a[i],i);
    }
    for(int i=1;i<=n;i++){
        ans[i]=max(-1,ans[i]);
        cout<<ans[i]<<" ";
    }
    return 0;
}
