
/*
 * Author    : raj1307 - Raj Singh
 * Date      : 31.03.2020
 */

#pragma GCC optimize("Ofast")
// #pragma GCC optimize("unroll-loops")
// #define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
using namespace std;

//#define DEBUG
#ifdef DEBUG
#define deb(...) cerr<<"Line:"<<__LINE__<<" "; __f(#__VA_ARGS__, __VA_ARGS__)
#define debarr(a,n) cerr<<#a<<" : ";for(int i=0;i<n;i++) cerr<<a[i]<<" "; cerr<<endl;
#define print(arr) for (auto it = arr.begin(); it != arr.end(); ++it) cerr << *it << " "; cerr << endl;
#define debmat(mat,row,col) cerr<<#mat<<" :\n";for(int i=0;i<row;i++) {for(int j=0;j<col;j++) cerr<<mat[i][j]<<" ";cerr<<endl;}
template<typename Arg1>
void __f(const char *name, Arg1 &&arg1) {
	cerr<<name<<" : "<<arg1<<endl;
}
template<typename Arg1, typename ... Args>
void __f(const char *names, Arg1 &&arg1, Args &&... args) {
	const char *comma=strchr(names+1,',');
	cerr.write(names,comma-names)<<" : "<<arg1<<" | ";
	__f(comma+1,args...);
}

#else
#define deb(...) {}
#define debarr(a,n) {}
#define debmat(mat,row,col) {}
#define debarr(a,n) {}
#endif

#define fio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define fr(i, a, b) for(int i = (a); i < (b); ++i)
#define fb(i, b, a) for(int i = (b); i > (a); --i)
#define rr return 
#define mp make_pair
#define pb push_back
#define sz(x) ((int)x.size())
#define int long long
#define ll long long
#define ld long double
#define endl "\n"
#define all(v) (v).begin(), (v).end()
typedef pair<int, int> ii;;
int max(int a,int b){if(a>b) return a; else return b;}
int min(int a,int b){if(a>b) return b; else return a;}
int gcd(int a,int b){ return (b == 0) ? a : gcd(b, a % b);}
inline int lcm(int a,int b){ return a / gcd(a, b) * b;}
inline int normalize(int x,int mod){ x %= mod; if (x < 0) x += mod; return x;}

int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};
string abc="abcdefghijklmnopqrstuvwxyz";
const double PI=acosl(-1);
const int mod = 1000*1000*1000+7;
//const int mod = 998244353;
const int inf = 1e18 +5;

//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }

int floor1(int n,int k){
    if(n%k == 0 || n >= 0)return n/k;
    return (n/k)-1;
}

int ceil1(int n,int k){
    return floor1(n+k-1,k);
}

int powm(int a, int b) {
	int res=1;
	while(b) {
		if(b&1)
			res=(res*a)%mod;
		a=(a*a)%mod;
		b>>=1;
	}
	return res;
}


const int N = 1e5 + 5;
 

int n,k;
int a[N];
int c1[N],c2[N],c3[N];
vector<int>g[N];
int deg[N];
int cache[N][5][5];


int dfs(int v,int par,int col,int pcol){

	
	if(sz(g[v])==1 and g[v][0]==par) {

		if(col!=1 and pcol!=1){
			return c1[v];
		}
		else if(col!=2 and pcol!=2){
			return c2[v];
		}
		else if(col!=3 and pcol!=3){
			return c3[v];
		}
	}

	int &ans=cache[v][col][pcol];

	if(ans!=-1) return ans;


	ans=inf;



	for(int i: g[v]){

		if(i==par) continue;

		if(col==0){
			ans=min(ans,c1[v]+dfs(i,v,1,0));
			ans=min(ans,c2[v]+dfs(i,v,2,0));
			ans=min(ans,c3[v]+dfs(i,v,3,0));
		}
		else if(pcol==0){

			if(col==1){
				ans=min(ans,c2[v]+dfs(i,v,2,col));
				ans=min(ans,c3[v]+dfs(i,v,3,col));
			}
			else if(col==2){
				ans=min(ans,c1[v]+dfs(i,v,1,col));
				ans=min(ans,c3[v]+dfs(i,v,3,col));
			}
			else{
				ans=min(ans,c1[v]+dfs(i,v,1,col));
				ans=min(ans,c2[v]+dfs(i,v,2,col));

			}
		}
		else{
			if(col!=1 and pcol!=1){
				ans=min(ans,c1[v]+dfs(i,v,1,col));
			}
			else if(col!=2 and pcol!=2){
				ans=min(ans,c2[v]+dfs(i,v,2,col));
			}
			else if(col!=3 and pcol!=3){
				ans=min(ans,c3[v]+dfs(i,v,3,col));
			}
		}
	}


	return ans;


}

int c[N];

void path(int v,int par,int col,int pcol){

	
	if(sz(g[v])==1 and g[v][0]==par) {

		if(col!=1 and pcol!=1){
			c[v]=1;
		}
		else if(col!=2 and pcol!=2){
			c[v]=2;
		}
		else if(col!=3 and pcol!=3){
			c[v]=3;
		}
		return;
	}

	int &ans=cache[v][col][pcol];
	


	for(int i: g[v]){

		if(i==par) continue;

		if(col==0){
			if(ans==c1[v]+dfs(i,v,1,0)){
				c[v]=1;
				path(i,v,1,0);
			}
			if(ans==c2[v]+dfs(i,v,2,0)){
				c[v]=2;
				path(i,v,2,0);
			}
			if(ans==c3[v]+dfs(i,v,3,0)){
				c[v]=3;
				path(i,v,3,0);
			}
		}
		else if(pcol==0){

			if(col==1){
				if(ans==c2[v]+dfs(i,v,2,col)){
					c[v]=2;
					path(i,v,2,col);
				}
				if(ans==c3[v]+dfs(i,v,3,col)){
					c[v]=3;
					path(i,v,3,col);
				}
			}
			else if(col==2){
				if(ans==c1[v]+dfs(i,v,1,col)){
					c[v]=1;
					path(i,v,1,col);
				}
				if(ans==c3[v]+dfs(i,v,3,col)){
					c[v]=3;
					path(i,v,3,col);
				}
			
			}
			else{
				if(ans==c2[v]+dfs(i,v,2,col)){
					c[v]=2;
					path(i,v,2,col);
				}
				if(ans==c1[v]+dfs(i,v,1,col)){
					c[v]=1;
					path(i,v,1,col);
				}
			}
		}
		else{
			if(col!=1 and pcol!=1){
				c[v]=1;
				path(i,v,1,col);
			}
			else if(col!=2 and pcol!=2){
				c[v]=2;
				path(i,v,2,col);
			}
			else if(col!=3 and pcol!=3){
				c[v]=3;
				path(i,v,3,col);
			}
		}
	}


}










void solve(){     

	cin>>n;
	fr(i,1,n+1) cin>>c1[i];
	fr(i,1,n+1) cin>>c2[i];
	fr(i,1,n+1) cin>>c3[i];

	fr(i,0,n-1){
		int u,v;
		cin>>u>>v;
		g[u].pb(v);
		g[v].pb(u);
		++deg[u];
		++deg[v];
	}	


	fr(i,1,n+1){
		if(deg[i]>=3){
			cout<<-1;
			return;
		}
	}
	memset(cache,-1,sizeof(cache));
	int st=-1;
	fr(i,1,n+1){
		if(deg[i]==1){
			st=i;
			break;
		}
	}

	cout<<dfs(st,st,0,0)<<endl;
	path(st,st,0,0);
	fr(i,1,n+1) cout<<c[i]<<" ";










	
	





    
}




signed main() {
	fio;
	#ifndef ONLINE_JUDGE 
    	freopen("input.txt", "r", stdin); 
    	freopen("output.txt", "w", stdout); 
    	//freopen("error.txt", "w", stderr); 
	#endif 
	cout<<fixed<<setprecision(10);
	int t=1;
	//cin>>t;  // UNCOMMENT FOR TEST-CASES
    //precompute();
	while(t--) {
		solve();
	}
	return 0;
}


