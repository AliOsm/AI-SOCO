#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef unsigned long long ull;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;

const int N = 100010;
const int MX = 123456;
const int mod = (int)1e9 + 7;
const int base = 1023456789;
const ull BS1 = 10000019ULL;
const int INF = (1 << 29);

template < class T > inline void fastScan(T &x){
    register char c = getchar();
    int neg = 0; x = 0;
    for(   ; (c < 48 || c > 57) && (c != '-'); c = getchar());
    if(c == '-') { neg = 1; c = getchar(); }
    for(   ; c > 47 && c < 58; c = getchar()){
        x = (x << 1) + (x << 3) + c - 48;
    }
    if(neg) x = -x;
}

int n, m;
ll tot;

bool f_prime[N];
int prime[N], sz;

int toi[N];
int inp[N];

bool as(int a, int b){
    return toi[a] > toi[b];
}

int GCD(int a, int b){
    if(b == 0) return a;
    return GCD(b, a % b);
}

void Sieve(){
    for(int i = 4; i < N; i+=2) f_prime[i] = true;
    for(int i = 3; i * i <= N; i+=2){
        if(f_prime[i] == false){
            for(int j = i * i; j < N; j += i){
                f_prime[j] = true;
            }
        }
    }
}

void phi(){
    for(int i = 1; i < N; i++){
        toi[i] = i;
    }
    for(int i = 2; i < N; i++){
        if(f_prime[i] == false){
            for(int j = i; j < N; j += i){
                toi[j] = toi[j] / i;
                toi[j] *= (i - 1);
            }
        }
    }
    toi[0] = 0;
    toi[1] = 0;
}

int main(){
    Sieve();
    phi();
    fastScan(n); fastScan(m);
    for(int i = 1; i <= n; i++){
        inp[i] = i;
    }
    sort(inp + 1, inp + n + 1, as);
    for(int i = 1; i <= n; i++){
        tot += toi[inp[i]];
    }
    if(tot < m || m < n - 1){
        puts("Impossible");
        return 0;
    }
    puts("Possible");
    for(int i = 2; i <= n; i++){
        printf("1 %d\n", i);
        m--;
    }
    int st = 1;
    while(m > 0){
        if(toi[inp[st]] == inp[st] - 1){
            int x = 2;
            while(m > 0 && x < inp[st]){
                printf("%d %d\n", inp[st], x);
                x++; m--;
            }
        } else {
            int x = 2;
            while(m > 0 && x < inp[st]){
                if(GCD(x, inp[st]) == 1){
                    printf("%d %d\n", inp[st], x);
                    m--;
                }
                x++;
            }
        }
        st++;
    }
    return 0;
}
