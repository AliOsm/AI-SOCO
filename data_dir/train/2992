#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define double long double
#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << (x) << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-10
//#define endl "\n"
#define pdd pair<double, double>
//#define mp make_pair

const int MAXN = 4096;

int n, m, k, end[MAXN], start[MAXN], active = 0;
vector<int> day;

void add(int pos) {
	start[pos]++;
	end[(pos+n)%(n+m)]--;
	day.pb(pos+1);
}

int main() {
	cin >> n >> m >> k;
	FOR(cur, 0, 2*(n+m)) {
		int i = cur%(n+m);
		active += end[i];
		if (cur && active == 0) {
			add((cur-1)%(n+m));
			active++;
		}
		active += start[i];
		while (active < k) {
			add(i);
			active++;
		}
	}
	cout << Size(day) << endl;
	FOREACH(it, day) cout << *it << " ";
	cout << endl;
	return 0;
}
