#include <iostream>
#include <bits/stdc++.h>
#include <string>
using namespace std;

#define pb push_back
#define ull unsigned long long
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-9
#define BASE 31ll
#define BASE2 53ll
#define ld double
#define MAX 1000000000
#define NIL 0
#define INF 1e15
#define infi 1e16
#define rd(a) scanf("%d",&a)
#define rd2(a,b) scanf("%d %d",&a,&b)
#define rd3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define rdll(a) scanf("%I64d",&a)
#define sz(a) (int) a.size()
#define lp(i,a,n) for(int i=(a); i<=(n) ; ++i)
#define lpd(i,n,a) for(int i=(n); i>=(a) ; --i)
#define pi acos(-1)
#define lc (x << 1)
#define rc (x << 1 | 1)
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define angle(a)                (atan2((a).imag(), (a).real()))
#define X real()
#define Y imag()
#define vec(a,b)                ((b)-(a))

#define int64 long long


typedef complex<double>point;
typedef complex<double>CX;
typedef pair<ll,ll>ii;
typedef pair<ii,int>tri;
typedef pair<vector<int>,int>vii;
typedef pair<int, int> pii;
typedef pair<ii,ii> line;
typedef pair<ll, ll> pll;
typedef vector<int> vi;

const int N=100005;


ll mod=1e9+7;
int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u')return 1;return 0;}
ld getDistance(ld x1,ld y1,ld x2,ld y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}
ll extended_euclidean(ll a,ll b,ll &x,ll &y){if(b==0){x=1;y=0;return a;}ll g = extended_euclidean(b,a%b,y,x);y -= (a/b)*x;return g;}
ll power(ll base,ll p){if(p==1)return base;if(!p)return 1ll;ll ret=power(base,p/2);ret*=ret;ret%=mod;if(p&1)ret*=base;return ret%mod;}


int type[N],val[N],tree[N*4],lazy[N*4],mx[N*4];
void propagate(int p,int s,int e){
   tree[p]+=lazy[p];
   mx[p]+=lazy[p];
   if(s!=e){
   lazy[p*2]+=lazy[p];
   lazy[p*2+1]+=lazy[p];
   }
   lazy[p]=0;
}
void update(int p,int s,int e,int from,int to,int val){
   propagate(p,s,e);
   if(to<s||e<from)return;
   if(from<=s&&e<=to){
      tree[p]+=val;
      mx[p]+=val;
      if(s!=e){
       lazy[p*2]+=val;
       lazy[p*2+1]+=val;
      }
      return;
   }
   update(p*2,s,(s+e)/2,from,to,val);
   update(p*2+1,(s+e)/2+1,e,from,to,val);
   tree[p]=min(tree[p*2],tree[p*2+1]);
   mx[p]=max(mx[p*2],mx[p*2+1]);
}
int get(int p,int s,int e,int idx){
   propagate(p,s,e);
   if(idx<s||e<idx)return N;
   if(s==e)return tree[p];
   return min(get(p*2,s,(s+e)/2,idx),get(p*2+1,(s+e)/2+1,e,idx));
}
int getMX(int p,int s,int e,int from,int to){
   propagate(p,s,e);
   if(to<s||e<from)return -1;
   if(from<=s&&e<=to)return mx[p];
   return max(getMX(p*2,s,(s+e)/2,from,to),getMX(p*2+1,(s+e)/2+1,e,from,to));
}
int getMN(int p,int s,int e,int from,int to){
   propagate(p,s,e);
   if(to<s||e<from)return N;
   if(from<=s&&e<=to)return tree[p];
   return min(getMN(p*2,s,(s+e)/2,from,to),getMN(p*2+1,(s+e)/2+1,e,from,to));
}
int getIdx(int p,int s,int e,int from,int to,int value){
    propagate(p,s,e);
    if(mx[p]<value||to<s||e<from)return -1;
    if(s==e)return s;
    propagate(p*2,s,(s+e)/2);
    propagate(p*2+1,(s+e)/2+1,e);
    int ret=-1;
    if(mx[p*2+1]==mx[p*2+1]&&tree[p*2+1]==tree[p*2+1]){

    }
    if(mx[p*2]==value)ret=getIdx(p*2,s,(s+e)/2,from,to,value);
    if(ret==-1)
        return getIdx(p*2+1,(s+e)/2+1,e,from,to,value);
    return ret;
}
int getnegative(int p,int s,int e){
    propagate(p,s,e);
    if(s==e)return s;
    propagate(p*2,s,(s+e)/2);
    propagate(p*2+1,(s+e)/2+1,e);
    if(tree[p*2]<0)return getnegative(p*2,s,(s+e)/2);
    return getnegative(p*2+1,(s+e)/2+1,e);
}
int getLAstzero(int p,int s,int e,int x){
    propagate(p,s,e);
    if(s==e)return s;
    propagate(p*2,s,(s+e)/2);
    propagate(p*2+1,(s+e)/2+1,e);
    if(tree[p*2+1]<=x&&mx[p*2+1]>=x)return getLAstzero(p*2+1,(s+e)/2+1,e,x);
    return getLAstzero(p*2,s,(s+e)/2,x);
}
void printo(int p,int s,int e){
 propagate(p,s,e);
 if(s==e){
    cout<<tree[p]<<' ';
    return;
 }
 printo(p*2,s,(s+e)/2);
 printo(p*2+1,(s+e)/2+1,e);
}
int main(){
  //freopen("test.in","r",stdin);
  int n;
  rd(n);
  vector<int>order;
  lp(i,1,n){
     int p;
     rd(p);
     p--;
     rd(type[p]);
     order.pb(p);
     if(type[p])rd(val[p]);
  }
  set<int>unused;
  lp(i,0,n-1){
    if(!type[i]){
        if(get(1,0,n-1,i)>0){
            update(1,0,n-1,i,n-1,-1);
        }
        else{
            unused.insert(i);
        }
    }
    else{
        update(1,0,n-1,i,n-1,1);
    }
  }
  vector<int>z;
 // printo(1,0,n-1);printf("\n\n");
  lpd(i,n-1,0){
     int x=get(1,0,n-1,n-1);
     int sol;
     if(x<=0){
        sol=-1;
     }
     else{
        int start=getLAstzero(1,0,n-1,x-1);
        int low=start,high=n-1;
        while(low+1<high){
             int mid=(low+high)/2;
             int a=getMX(1,0,n-1,start,mid);
             if(a>=x)
                high=mid;
             else
                low=mid+1;
        }
        if(getMX(1,0,n-1,start,low)==x)sol=val[low];
        else if(getMX(1,0,n-1,start,high)==x)sol=val[high];
        else sol=-1;
     }
     z.pb(sol);
     int idx=order[i];
     if(type[idx]){
         update(1,0,n-1,idx,n-1,-1);
         if(tree[1]<0){
             int position=getnegative(1,0,n-1);
    //         cout<<position<<endl;
             if(position!=-1){
                unused.insert(position);
                update(1,0,n-1,position,n-1,1);
             }
  //printo(1,0,n-1);printf("\n\n");exit(0);
         }
     }
     else{
         if(unused.count(idx))
            unused.erase(unused.find(idx));
         else{
            update(1,0,n-1,idx,n-1,1);
            set<int>::iterator it=unused.lower_bound(idx);
            if(it==unused.end())continue;
            int location=*it;
            update(1,0,n-1,location,n-1,-1);
            unused.erase(it);
         }
     }
 // printo(1,0,n-1);printf("\n\n");
  }
  lpd(i,n-1,0)printf("%d\n",z[i]);
  return 0;
}
