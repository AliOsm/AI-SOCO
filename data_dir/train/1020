/**
 * Dont raise your voice, improve your argument.
 * --Desmond Tutu
 */

#include <bits/stdc++.h>
using namespace std;

const double PI = acos(-1);
typedef long long ll;
#define int ll
#define fori(n) for(int i=0; i<int(n); i++)

#define cins(s) string s; cin>>s;
#define cini(i) int i; cin>>i;
#define cind(d) double d; cin>>d;
#define cinai(a, n) vi a(n); fori(n) { cin>>a[i]; }
#define cinas(s, n) vs s(n); fori(n) { cin>>s[i]; }
#define cinad(a, n) vd a(n); fori(n) { cin>>a[i]; }


typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<double> vd;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<string> vs;

/* We need to find the optimal num of 
 * m[i] per server. This is the avg=sum/cnt,
 * and for the sum(m[])-cnt*avg ones avg+1.
 *
 * Then find the diff to the current value, sum it
 * (which is even) and half of it is ans.
 *
 * Note that we need to find the diff from the bigger ones
 * to avg+1, and the smaller ones to avg. 
 */
void solve() {
    cini(n);
    int sum=0;
    vi a(n);
    for(int i=0; i<n; i++) {
        cin>>a[i];
        sum+=a[i];
    }
    sort(a.begin(), a.end(), greater<int>());

    int avg=sum/n;
    int extra=sum-(avg*n);

    int diff=0;
    for(int i=0; i<n; i++) {
        int d=avg;
        if(i<extra)
            d++;
        
        diff+=abs(d-a[i]);
    }
    cout<<diff/2<<endl;
}

signed main() {
    cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
        solve();
}

