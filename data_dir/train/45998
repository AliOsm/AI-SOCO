// start of CP 2.0
#include <bits/stdc++.h>

//____By:sirjan13____

#define int long long
#define ld long double
#define mod 1000000007
#define mod1 mod
#define mod2 100000009
#define show(a) for(int i=0;i<a.size();i++) cout<<a[i]<<" ";
#define fi first
#define se second
#define vi vector<int>
#define vs vector<string>
#define vll vector<ll>
#define pb push_back
#define pi pair<int,int>
#define si set<int>
#define sll set<ll>
#define pll pair<ll, ll>
#define sci(x) scanf("%d",&x)
#define scs(x)  scanf("%s", x)
#define scll(x) scanf("%I64d",&x)
#define all(v) v.begin(),v.end()
#define sot(v) sort(v.begin(), v.end())
#define maxheap priority_queue<int>
#define minheap priority_queue<int,vector<int>,greater<int>>
#define mp make_pair
#define fast_io() cin.sync_with_stdio(false);cout.sync_with_stdio(false);
#define PI 3.1415926535
#define long_zero 0ll
#define long_one 1ll

inline int sbt(int x){return __builtin_popcount(x);}

using namespace std;

#define TRACE
#ifdef TRACE
#define deb(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << std::endl;
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define deb(...)
#endif
#define lg 33
#define N 100013
vector<pi> adj[N];
int n, k;
int pre[N];
int par[lg][N];
int vis[N], lev[N], res[N];

void dfs(int node, int p, int edge, int level) {
    vis[node] = edge;
    par[0][node] = p;
    lev[node] = level;
    for(auto nei: adj[node]) {
        if(nei.fi != p)
            dfs(nei.fi, node, nei.se, level + 1);
    }
}

int lca(int u, int v) {
    if(lev[u] < lev[v]) {
        swap(u, v);
    }
    int leveldiff = lev[u] - lev[v];
    for(int i = lg - 1; i >= 0; i--)
        if((1 << i) & leveldiff)
            u = par[i][u];
	if(u == v)
		return u;
    //climb
    for(int i = lg - 1; i >= 0; i--) {
        if(par[i][u] && par[i][u] != par[i][v]) {
            u = par[i][u];
            v = par[i][v];
        }
    }
	return par[0][u];
}

int dfs1(int node, int p) {
    res[vis[node]] = pre[node];
    for(auto nei: adj[node]) {
        if(nei.fi != p) {
            res[vis[node]] += dfs1(nei.fi, node);
        }
    }
    return res[vis[node]];
}


int32_t main() {
    fast_io()
    
    cin >> n;
    for(int i = 1; i < n; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].pb(mp(v, i));
        adj[v].pb(mp(u, i));
    }
    dfs(1, 0, 0, 0);
    // for(int i = 1; i <= n; i++) {
    //     deb(i, vis[i]);
    // }
    for(int i = 1; i < lg; i++)
		for(int j = 1; j <= n; j++)
			if(par[i - 1][j])
				par[i][j] = par[i - 1][par[i - 1][j]];

    cin >> k;
    while(k--) {
        int u, v;
        cin >> u >> v;
        pre[u]++;
        pre[v]++;
        pre[lca(u, v)] -= 2;   
    }
    dfs1(1, 0);
    for(int i = 1; i < n; i++) {
        cout << res[i] << ' ';
    }
    
	return 0;
}
