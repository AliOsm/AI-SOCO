#include<bits/stdc++.h>
#include<fstream>
using namespace std;
#define F first
#define S second
#define ll long long
#define INF 1e9
const int MX=200005;
int N;
map<pair<int, int>, int> can, was, dis;
int dx[]={1, 1, 1, -1, -1, -1, 0, 0};
int dy[]={0, 1, -1, 0, 1, -1, 1, -1};
deque<pair<int, int> > dq;
pair<int, int> p;
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int x0, y0, x1, y1;
    cin>>x0>>y0>>x1>>y1;
    cin>>N;
    for(int i=0;i<N;i++)
    {
        int r, a, b;
        cin>>r>>a>>b;
        for(int j=a;j<=b;j++){
            can[make_pair(r, j)]++;
        }
    }
    p=make_pair(x0, y0);
    dq.push_back(p);
    dis[p]=0;
    int depth=0, sz=0;
    while(!dq.empty())
    {
        sz=dq.size();
        ///cout<<sz<<" d "<<depth<<"\n";
        while(sz--)
        {
            p=dq.front(); dq.pop_front();
            for(int i=0;i<8;i++)
            {
                int nx=p.F+dx[i], ny=p.S+dy[i];
                pair<int, int> ch=make_pair(nx, ny);
                if(dis.count(ch) != 0 || can.count(ch) == 0) continue;
                dis[ch]=depth+1;
                dq.push_back(ch);
                if(ch.F == x1 && ch.S == y1){
                    cout<<depth+1<<"\n";
                    return 0;
                }
            }
        }
        depth++;
    }
    cout<<-1<<"\n";
    return 0;
}