#include<bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define F first
#define S second
using namespace std;

const int N = 1010;

char a[N][12][12];
int par[N] , siz[N] , ans , k;
bool mark[N];

vector <pair<int , pair<int , int> > > edge;
vector <int> adj[N];


int findpar(int v){
	
	if(par[v] == -1)
		return v;
		
	return par[v] = findpar(par[v]);
	
}

void merge(int u , int v , int w){
	
	int uu = findpar(u);
	int vv = findpar(v);
	
	if(uu == vv)
		return;

	if(siz[uu] > siz[vv])
		swap(uu , vv);
		
	par[uu] = vv;
	siz[vv] += siz[uu];	
		
	adj[u].pb(v);	
	adj[v].pb(u);
	ans+= w;

	return;

}

void DFS(int v , int par){
	
	mark[v] = 1;
	if(par != v){
		if(par == k)
			cout << v+1 << " 0\n"; 
		else
			cout << v+1 << " " << par+1 << endl;
	}
	for(int i = 0 ; i < (int) adj[v].size() ; i++){
		int u = adj[v][i];
		if(!mark[u])
			DFS(u , v);
	}
	
	return;	
}

int main(){
	
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	
	int n , m , w;
	cin >> n >> m >> k >> w;
	
	for(int t = 0 ; t < k ; t++){
		
		for(int i = 0 ; i < n ; i++)
			for(int j = 0 ; j < m ; j++)
				cin >> a[t][i][j];
		
		
		
		for(int p = 0 ; p < t ; p++){
			
			int wei = 0;
			
			for(int i = 0 ; i < n ; i++){
				for(int j = 0 ; j < m ; j++)
					if(a[t][i][j] != a[p][i][j])
						wei++;
			}
			
			edge.pb(mp(wei*w , mp(p , t)));
		}
		
	}
	
	for(int i = 0 ; i < k ; i++)
		edge.pb(mp(m*n , mp(i , k)));
	
	sort(edge.begin() , edge.end());
	fill (par , par+k+1 , -1);
	fill(siz , siz+k+1 , 1);
	
	for(int i = 0 ; i < (int) edge.size() ; i++){
		int u = edge[i].S.F;
		int v = edge[i].S.S;
		int w = edge[i].F;
		merge(u , v , w);
	}
	
	cout << ans << endl;
	
	DFS(k , k);	
	return 0;
}