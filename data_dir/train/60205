#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long long i64;
typedef pair<ll, ll> PII;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pii> vpi;
typedef long double ld;


#define x first
#define y second
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define for1(i, n) for (int i = 1; i <= (int)(n); i++)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define clr(x) memset((x), 0, sizeof(x))
inline int nxt() {int x;scanf("%d", &x); return x;}

inline ll gcd(ll a, ll b) {
    while (b) {
        a %= b;
        swap(a, b);
    }
    return a;
}

const int mod = 1000 * 1000 * 1000 + 7;
inline ll pw(ll a, ll n) {
    ll ret = 1;
    while (n) {
        if (n & 1) ret = ret * a % mod;
        a = a * a % mod;
        n >>= 1;
    }
    return ret;
}

inline ll inv(ll a) {
    return pw(a, mod - 2);
}

PII operator - (const PII &l, const PII &r) {
    return PII(l.x - r.x, l.y - r.y);
}

PII operator + (const PII &l, const PII &r) {
    return PII(l.x + r.x, l.y + r.y);
}

PII rot(const PII &v) {
    return PII(v.y, -v.x);
}

ll dot(const PII &l, const PII &r) {
    return l.x * r.x + l.y * r.y;
}

ll cross(const PII &l, const PII &r) {
    return l.x * r.y - l.y * r.x;
}

int fact_pow (int n, int k) {
    int res = 0;
    while (n) {
        n /= k;
        res += n;
    }
    return res;
}

const int N = 1000 * 1000 + 100;
const int K = 26;

struct vertex {
    int next[K];
    int id;
};

vertex t[N];
int sz;

void init() {
    memset (t[0].next, 255, sizeof t[0].next);
    t[0].id = -1;
    sz = 1;
}

void add_string (const string & s, int id) {
    int v = 0;
    for (size_t i=0; i<s.length(); ++i) {
        char c = s[i]-'a';
        if (t[v].next[c] == -1) {
            memset (t[sz].next, 255, sizeof t[sz].next);
            t[sz].id = -1;
            t[v].next[c] = sz++;
        }
        v = t[v].next[c];
    }
    t[v].id = id;
}

const int M = 10000 + 10;
char s[M];
vector<string> a;
vector<string> b;
char str[M];

char dp[M];
int p[M];

string tolo(string s) {
    for (char &c : s) {
        c = tolower(c);
    }
    return s;
}

void solve() {
    int n = nxt();
    scanf("%s", s);
    int m = nxt();
    a.resize(m);
    b.resize(m);
    init();
    for (int i = 0; i < m; ++i) {
        scanf("%s", str);
        string cur = str;
        a[i] = cur;
        b[i] = tolo(cur);
        add_string(b[i], i);
    }
    dp[n] = 1;
    for (int i = n; i >= 0; --i) {
        if (!dp[i]) continue;
        int v = 0;
        for (int j = i - 1; j >= 0 && i - j <= 1001; --j) {
            if (t[v].next[s[j] - 'a'] == -1) break;
            v = t[v].next[s[j] - 'a'];
            if (t[v].id == -1) continue;
            dp[j] = 1;
            p[j] = t[v].id;
        }
    }
    assert(dp[0]);
    int i = 0;
    while (i != n) {
        cout << a[p[i]] << " ";
        i += a[p[i]].length();
    }
    cout << "\n";
}

int main() {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
    #define FILE "powersum"
//    freopen(FILE".in", "r", stdin);
//    freopen(FILE".out", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    solve();

#ifdef LOCAL
    cerr << "Time: " << clock() / (double)CLOCKS_PER_SEC << endl;
#endif

    return 0;
}
