#include<bits/stdc++.h>
using namespace std;
const int offset = 200000;

vector < int > difforvert[500000], difforhor[500000];

pair < int , int > hor[300000], ver[300000];

pair < pair < int, int > , pair < int , int > > ara[300000], dummy[300000];

int n, w, h, p, q, r, x, y, z;

int mx = 0;

pair < int , int > ans[300000];

int main()
{
    int hr = 0, vr = 0;

    cin >> n >> w >> h;

    for(int i = 1; i <= n; i++){
        scanf("%d %d %d", &x, &y, &z);
        ara[i] = make_pair(make_pair(y, z), make_pair(x, i));
        dummy[i] = ara[i];
    }

    sort(ara + 1, ara + n + 1);
    for(int i = 1; i <= n; i++){

        x = ara[i].second.first, y = ara[i].first.first, z = ara[i].first.second;

        if(x == 1){
            ver[vr] = make_pair(y, z);
            int df = y - z + offset;
            mx = max(mx, df);

            difforvert[df].push_back(ara[i].second.second);
//            cout << ara[i].second.second << ' ' << df << ' ' << 1 << endl;
            vr++;
        }

        else{
            hor[hr] = make_pair(y, z);
            int df = y - z + offset;
            mx = max(mx, df);

//            cout << ara[i].second.second << ' ' << df << ' ' << 2 << endl;

            difforhor[df].push_back(ara[i].second.second);
            hr++;
        }
    }

//    cout << "x" << endl;
    for(int i = 0; i <= mx; i++){


        if(difforhor[i].size() == 0 && difforvert[i].size() == 0) continue;

        if(difforhor[i].size() == 0){

//            cout << i << ' ' << "hor" << endl;
            for(int j = 0; j < difforvert[i].size(); j++) ans[difforvert[i][j]] = make_pair(1, dummy[difforvert[i][j]].first.first);
            continue;
        }

        if(difforvert[i].size() == 0){
//            cout << i << ' ' << "ver " << endl;
            for(int j = 0; j < difforhor[i].size(); j++) ans[difforhor[i][j]] = make_pair(2, dummy[difforhor[i][j]].first.first);
            continue;
        }

        for(int j = 0; j < difforvert[i].size(); j++){

            int xx = (int)difforvert[i].size() - j;
            int yy = difforhor[i].size();
//
//            cout << i << ' ' << xx << ' ' << yy << endl;

            if(xx > yy){
                 ans[difforvert[i][j]] = make_pair(1, dummy[difforvert[i][j + yy]].first.first);
            }

            else{

                ans[difforvert[i][j]] = make_pair(2, dummy[difforhor[i][xx - 1]].first.first);
            }

        }

        for(int j = 0; j < difforhor[i].size(); j++){
            int xx = (int)difforhor[i].size() - j;
            int yy = difforvert[i].size();

            if(xx > yy){
                ans[difforhor[i][j]] = make_pair(2, dummy[difforhor[i][j + yy]].first.first);
            }
            else{
                ans[difforhor[i][j]] = make_pair(1, dummy[difforvert[i][xx - 1]].first.first);
            }
        }


    }

    for(int i = 1; i <= n; i++){
//        cout << i << endl;
        if(ans[i].first == 2) printf("%d %d\n", w, ans[i].second);
        else if(ans[i].first == 1) printf("%d %d\n", ans[i].second, h);

    }


    return 0;
}
