#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX ((ll)(1e9))
#define pi (2*acos(0))
#define mp make_pair
#define M ((ll)(1e9 + 7))
#define xx first
#define yy second
#define NN ((ll)(5e5+2))
#define N ((ll)(1e5 + 5))
#define pq priority_queue
///#define Q queue
#define eps 0
#define log 20
#define pb push_back
#define MOD 998244353


using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long int lu;

typedef tree < pair < int,int >,  null_type,  less < pair < int,int > >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;

int ran[N];

struct data{
    int x, r, q, i;
}ar[N], br[N];

bool cmp(data a, data b)
{
    return a.x<b.x;
}

bool cmp1(data a, data b)
{
    return a.q<b.q;
}

o_set tr[N*4];

void update(int n, int b, int e, int i, bool flag)
{
    if(i<b || i>e) return;
    if(b==e){
        if(flag) tr[n].insert(mp(br[i].x-br[i].r,i));
        else tr[n].erase(mp(br[i].x-br[i].r,i));
        return;
    }
    int l, r, m;
    m = (b+e)>>1;
    l = n<<1;
    r = l+1;
    update(l,b,m,i,flag);
    update(r,m+1,e,i,flag);
    if(flag) tr[n].insert(mp(br[i].x-br[i].r,i));
    else tr[n].erase(mp(br[i].x-br[i].r,i));
}

int query(int n, int b, int e, int i, int j)
{
    if(e<i || j<b) return 0;
    if(i<=b && j>=e){
        return tr[n].order_of_key(mp(br[i].x+1,i));
    }
    int l, r, m;
    m = (b+e)>>1;
    l = n<<1;
    r = l+1;
    return query(l,b,m,i,j)+query(r,m+1,e,i,j);
}

int bs(int l, int r , int n)
{
    int m;
    while(l<r){
        m = (l+r+1)>>1;
        if(br[m].x<n) l = m;
        else r = m-1;
    }
    if(br[l].x<n) return l;
    return l-1;
}

int main()
{
    /*o_set s;
    s.insert(mp(2,3));
    s.insert(mp(3,1));
    s.insert(mp(6,0));
    s.insert(mp(4,1));
    s.insert(mp(4,1));
    cout<<s.order_of_key(mp(4,2))<<endl;
    s.erase(mp(4,1));
    cout<<s.order_of_key(mp(4,2))<<endl;
    */

    int n, k, i, j, l, r;
    scanf("%d %d",&n,&k);
    for(i = 1; i<=n; i++){
        scanf("%d %d %d",&ar[i].x,&ar[i].r,&ar[i].q);
    }
    sort(ar+1,ar+1+n,cmp);
    for(i = 1; i<=n; i++){
        ar[i].i = i;
        br[i] = ar[i];
        ///ran[i] = ran[i-1]+1;
        ///while(ran[i]<=n && ar[ran[i]].x<=ar[i].x+ar[i].r) ran[i]++;
        ///ran[i]--;
    }
    /*for(i = 1; i<=n; i++){
        cout<<ar[i].x<<" "<<ar[i].r<<" "<<ar[i].q<<" "<<ar[i].i<<" "<<ran[i]<<endl;
    }*/
    sort(ar+1,ar+1+n,cmp1);
    update(1,1,n,ar[1].i,1);
    l = 1;
    r = 2;
    ll ans = 0;
    for(i = 1; i<=n; i++){
        while(ar[i].q-ar[l].q>k){
            update(1,1,n,ar[l].i,0);
            l++;
        }
        while(r<=n && ar[r].q-ar[i].q<=k){
            update(1,1,n,ar[r].i,1);
            r++;
        }
        j = ar[i].i;
        ans += query(1,1,n,j,bs(j,n,ar[i].x+ar[i].r+1)) - 1;
    }
    printf("%lld\n",ans);
    return 0;
}
