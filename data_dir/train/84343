#include <bits/stdc++.h>
using namespace std;
typedef long long Long;

const Long MX = 200005;
Long st[MX<<2];
Long lazy[MX<<2];
bool used[MX<<2];
Long A[MX];

void push(Long l, Long r, Long nodo){
	if(used[nodo]){
		st[nodo] += lazy[nodo];
		if(l!=r){
			lazy[nodo*2] += lazy[nodo];
			lazy[nodo*2+1] += lazy[nodo];
			used[nodo*2] = used[nodo*2+1] = true;
		}
		lazy[nodo] = 0;
		used[nodo] = false;
	}
	return;
}

void update(Long ini, Long fin, Long val, Long l, Long r, Long nodo){
	push(l,r,nodo);
	if(fin<l || r<ini) return;
	if(ini<=l && r<=fin){
		st[nodo] += val;
		if(l!=r){
			lazy[nodo*2] += val;
			lazy[nodo*2+1] += val;
			used[nodo*2] = used[nodo*2+1] = true;
		}
		return;
	}
	Long med=(l+r)/2;
	update(ini,fin,val,l,med,2*nodo);
	update(ini,fin,val,med+1,r,2*nodo+1);
	st[nodo] = max(st[nodo*2],st[nodo*2+1]);
	return;
}

Long query(Long ini, Long fin, Long l, Long r, Long nodo){
	push(l,r,nodo);
	if(fin<l || r<ini) return 0;
	if(ini<=l && r<=fin) return st[nodo];
	Long med=(l+r)/2;
	Long L=query(ini,fin,l,med,nodo*2);
	Long R=query(ini,fin,med+1,r,nodo*2+1);
	return max(L,R);
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cout.precision(10);
	cout << fixed;
	
	Long mx = 0;
	vector< pair<pair<Long,Long>,Long> > seg;
	Long n, k, l, r;
	cin >> n >> k;
	for(Long i = 1; i <= n; i++){
		cin >> l >> r;
		seg.push_back({{r,l},i});
		mx = max(mx,r);
	}
	
	sort(seg.begin(),seg.end());
	
	vector<Long> ans;
	Long id;
	for(Long i = 0; i < n; i++){
		l = seg[i].first.second;
		r = seg[i].first.first;
		id = seg[i].second;
		
		Long aux = query(l,r,0,mx,1);
		if(aux < k){
			update(l,r,1,0,mx,1);
		}else{
			ans.push_back(id);
		}
	}
	
	sort(ans.begin(),ans.end());
	cout << ans.size() << "\n";
	for(Long xx : ans){
		cout << xx << " ";
	}
	cout << "\n";
	return 0;
}
