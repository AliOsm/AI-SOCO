// In The Name Of God :
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
using namespace std ;
using namespace __gnu_pbds;
#define X first 
#define Y second
#define int long long
typedef long long ll ;
typedef pair < int , int > pii ; 
typedef pair < pii , int > pii_i ;
#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%I64d"
const int maxn = 1LL<<21 ;
const int maxL = 21 ;
//const int inf = 1e12 ;
int n , N , dp0 [ 210 ] , dp1 [ 201 ] , ar [ maxn ] , q , a ;
int seg [ 21 ] [ maxn ] ;

void build ( int st = 0 , int en = N , int h = 0 )
{
  if ( en - st < 2 )
    {
      seg [ h ] [ st ] = ar [ st ] ;
      return ; 
    }
  int mid = ( st + en ) >> 1 ;
  build ( st , mid , h + 1 ) ;
  build ( mid , en , h + 1 ) ;
  merge ( seg [ h + 1 ] + st , seg [ h + 1 ] + mid ,
	  seg [ h + 1 ] + mid , seg [ h + 1 ] + en ,
	  seg [ h ] + st ) ;
  for ( int i = st ; i < mid ; i ++ )
    dp1 [ h ] += ( seg [ h + 1 ] + en ) - upper_bound ( seg [ h + 1 ] + mid , seg [ h + 1 ] + en , ar [ i ] ) ;
  for ( int i = mid ; i < en ; i ++ )
    dp0 [ h ] += ( seg [ h + 1 ] + mid ) - upper_bound ( seg [ h + 1 ] + st , seg [ h + 1 ] + mid , ar [ i ] ) ;
}

main ( )
{
  scanf ( "%I64d" , &n ) ;
  //cin >> n ;
  N = 1LL<<n ;
  for ( int i = 0 ; i < N ; i ++ )
  scanf ( "%I64d" , ar + i ) ;
  //    cin >> ar [ i ] ;
  build ( ) ;
  //return 0 ;
  for ( int i = n - 1 ; i >= 0 ; i -- )
    dp0 [ i ] += dp0 [ i + 1 ] , dp1 [ i ] += dp1 [ i + 1 ] ;
  scanf ( "%I64d" , &q ) ;
  for ( int i = 0 ; i < q ; i ++ ) 
    {
      scanf ( "%I64d" , &a ) ;
      if ( a == 0 )
	printf ( "%I64d\n" , dp0 [ 0 ] ) ; 
      else
	{
	  a = n - a ;
	  int x = dp1 [ a ] - dp0 [ a ] ; 
	  for ( int j = 0 ; j < n ; j ++ )
	    if ( j >= a )
	      swap ( dp0 [ j ] , dp1 [ j ] ) ;
	    else
	      dp0 [ j ] += x , dp1 [ j ] -= x ; 
	  printf ( "%I64d\n" , dp0 [ 0 ] ) ; 
	}
    }
}
