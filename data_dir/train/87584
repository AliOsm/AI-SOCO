#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <cassert>
#include <ctime>


using namespace std;

#ifdef WIN32
  #define LLD "%I64d"
#else
  #define LLD "%lld"
#endif

typedef pair<int, int> pii;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<ll> vll;
typedef vector<vll> vvll;

ll rdtsc() {
  ll tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define TASKNAME "text"
#define pb push_back
#define mp make_pair
#define EPS (1e-9)
#define INF ((int)1e9)
#define sqr(x) ((x) * (x))         
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

const int maxn = (int)1e6 + 10;
char s[maxn + 1];

const int maxl = 20;
int two[maxl][maxn];

int tmp[maxn];

void print(int n, int *perm) {
  for (int i = 0; i < n; ++i)
    eprintf("%d%c", perm[i], " \n"[i == n - 1]);
}

void countPerm(int n, int k, int d, int *perm) {
  {
    int *cur = two[0];
    for (int i = 0, pos = 0, r = 0; i < k; ++i) {
      assert(r < d && pos < k);
      cur[pos] = i;
      pos += d;
      if (pos >= k)
        pos = ++r;
    }
    for (int i = k; i < n; ++i)
      cur[i] = i;
  }

  int mit = 0;
  for (int it = 0; k + (1 << (it + 1)) - 1 <= n; ++it, ++mit) {
    int *cur = two[it + 1];
    int *prev = two[it];
    for (int i = 0; i < n; ++i) {
      cur[i] = prev[i]; 
      if (cur[i] < (1 << it))
        continue;
      cur[i] = prev[cur[i] - (1 << it)] + (1 << it);
    }
  }

  for (int i = 0; i < n; ++i)
    perm[i] = i;

  int want = (n - k + 1);
  int alr = 0;
  for (int it = mit; it >= 0; --it) {
    if (!((want >> it) & 1))
      continue;
    int *cur = perm;
    int *prev = tmp;
    for (int i = 0; i < n; ++i)
      prev[i] = cur[i];
    for (int i = 0; i < n; ++i) {
      if (cur[i] < alr)
        continue;
      cur[i] = two[it][cur[i] - alr] + alr;
    }
    alr += (1 << it);
  }
}

int perm[maxn];

char q[maxn + 1];
bool solve() {
  if (scanf("%s", s) < 1)
    return 0;
  int n = (int)strlen(s);
  int m;
  scanf("%d", &m);
  for (int t = 0; t < m; ++t) {
    int k, d;
    scanf("%d%d", &k, &d);

    countPerm(n, k, d, perm);
    memcpy(q, s, sizeof(s[0]) * n);
    for (int i = 0; i < n; ++i)
      s[perm[i]] = q[i];
    printf("%s\n", s);
  }
    
  return 1;
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".in", "r", stdin);
  freopen(TASKNAME".out", "w", stdout);
#endif
  
  while (1) {
    if (!solve())
      break;
    #ifdef DEBUG
      eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
    #endif
  }
  return 0;
}
