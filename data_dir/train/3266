#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << (x) << endl;
#define ull unsigned long long
#define pii pair<int, int>
//#define pii pair<ll, ll>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-10
//#define endl "\n"
#define pdd pair<double, double>
//#define mp make_pair

const int MAXP = 25;
const int MAXN = 3*1000*1000;
const int INF = 1000*1000*1000;
const int p[MAXP] = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97};

int dp[MAXN], cs[MAXN], a[MAXN];
int l, r, m, sz;

void gen(int num, int pos) {
	if (pos == MAXP) {
		a[sz++] = num;
		return;
	}
	gen(num, pos+1);
	while (p[pos] <= 1000*1000*1000/num) {
		num *= p[pos];
		gen(num, pos+1);
	}
}

int main() {
	fill(dp, dp+MAXN, INF);
	fill(cs, cs+MAXN, INF);
	gen(1, 0);
	sort(a, a+sz);
	dp[0] = 0;
	FOR(mul, 2, 100) {
		int pt = 0;
		FOR(i, 0, sz) {
			while (pt < sz && 1LL*a[i]*mul > a[pt]) pt++;
			if (pt == sz) break;
			if (1LL*a[i]*mul == a[pt]) {
				dp[pt] = min(dp[pt], dp[i]+1);
				cs[pt] = min(cs[pt], dp[pt]+mul);
			}
		}
	}
	cin >> l >> r >> m;
	int tot = 0;
	FOR(i, 0, sz) if (l <= a[i] && a[i] <= r && cs[i] <= m) tot++;
	cout << tot << endl;
	return 0;
}

