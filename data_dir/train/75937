#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define ull unsigned long long
#define pll pair<ll, ll>
#define mp(x, y) make_pair(x, y)
using namespace std;

const ll MAX_N = 2e5 + 5, inf = 1e18, mod = 1e9+123;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       tp %= mod; res %= mod;
       b >>= 1ll;
    }
    return res;
}

ll vec_mult(const pll &t1, const pll &t2, const pll &t3) {
   const ll &x1 = t1.first, y1 = t1.second;
   const ll &x2 = t2.first, y2 = t2.second;
   const ll &x3 = t3.first, y3 = t3.second;
   return ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
   cout << "YES" << endl;
}

void no() {
   cout << "NO" << endl;
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    ll t = nxt();
    while (t--) {
        string s;
        cin >> s;
        int n = s.size();
        vector<char> buf;
        vector<vector<ll>> ct;
        for (int i = 0; i < n; i++) {
            if (i == 0 || buf.back() != s[i]) {
                buf.push_back(s[i]);
                ct.push_back(vector<ll>{i});
            } else {
                ct.back().push_back(i);
            }
        }

        vector<ll> ans;
        set<ll> tmp;
        n = ct.size();
        for (int i = 4; i < n; i++) {
            string need = "twone";
            string te = "";
            for (int j = i - 4; j <= i; j++) {
                te += buf[j];
            }
            if (te == need && ct[i - 3].size() == 1 && ct[i - 1].size() == 1) {
                ll mn1 = ct[i - 2].size();
                ll mn2 = min(ct[i - 4].size(), ct[i - 3].size()) + min(ct[i - 1].size(), ct[i].size());
                if (mn1 <= mn2) {
                    tmp.insert(i - 2);
                } else {
                    tmp.insert(i - 3);
                    tmp.insert(i - 1);
                }
                i += 4;
            }
        }

        vector<char> new_buf;
        vector<vector<ll>> new_ct;
        for (int i = 0; i < n; i++) {
            if (tmp.count(i)) {
                for (auto x : ct[i]) {
                    ans.push_back(x);
                }
            } else {
                new_buf.push_back(buf[i]);
                new_ct.push_back(ct[i]);
            }
        }

        buf = new_buf;
        ct = new_ct;
        tmp.clear();
        n = ct.size();
        for (int i = 2; i < n; i++) {
            string need = "one";
            string te = "";
            for (int j = i - 2; j <= i; j++) {
                te += buf[j];
            }
            if (te == need && ct[i - 1].size() == 1) {
                ll mn1 = ct[i - 2].size();
                ll mn2 = ct[i - 1].size();
                ll mn3 = ct[i].size();
                ll mn = min({mn1, mn2, mn3});
                if (mn == mn1) {
                    tmp.insert(i - 2);
                } else if (mn == mn2) {
                    tmp.insert(i - 1);
                } else {
                    tmp.insert(i);
                }
                i += 2;
            }
        }

        new_buf.clear();
        new_ct.clear();
        for (int i = 0; i < n; i++) {
            if (tmp.count(i)) {
                for (auto x : ct[i]) {
                    ans.push_back(x);
                }
            } else {
                new_buf.push_back(buf[i]);
                new_ct.push_back(ct[i]);
            }
        }

        buf = new_buf;
        ct = new_ct;
        tmp.clear();
        n = ct.size();
        for (int i = 2; i < n; i++) {
            string need = "two";
            string te = "";
            for (int j = i - 2; j <= i; j++) {
                te += buf[j];
            }
            if (te == need && ct[i - 1].size() == 1) {
                ll mn1 = ct[i - 2].size();
                ll mn2 = ct[i - 1].size();
                ll mn3 = ct[i].size();
                ll mn = min({mn1, mn2, mn3});
                if (mn == mn1) {
                    tmp.insert(i - 2);
                } else if (mn == mn2) {
                    tmp.insert(i - 1);
                } else {
                    tmp.insert(i);
                }
                i += 2;
            }
        }
        for (int i = 0; i < n; i++) {
            if (tmp.count(i)) {
                for (auto x : ct[i]) {
                    ans.push_back(x);
                }
            }
        }
        cout << ans.size() << '\n';
        for (auto x : ans) {
            cout << x + 1 << ' ';
        }
        cout << '\n';
    }

    return 0;
}
