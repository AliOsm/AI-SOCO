#include <bits/stdc++.h>

using namespace std;

struct node{
    int next[2] = {};
    int mn = 1000000;
    node() {}
};

const int maxn = 100000;
const int bits = 17;

vector<node> t[maxn + 5];
int root = 1;
vector<int> E(maxn + 5, 2);
int q;
char used[maxn + 50];

void add(int trie, int x){
    int u = root;
    for(int i = bits - 1; i >= 0; i--){
        int c = (x & (1 << i)) ? 1 : 0;
        if(!t[trie][u].next[c]){
            t[trie].push_back(node());
            t[trie][u].next[c] = E[trie]++;
        }
        u = t[trie][u].next[c];
        t[trie][u].mn = min(t[trie][u].mn, x);
    }
}

vector<int> divs[100010];

main()
{
    ios_base::sync_with_stdio(false);
    for(int i = 1; i <= maxn; i++){
        for(int j = i; j <= maxn; j += i){
            divs[j].push_back(i);
        }
    }
    for(int i = 1; i <= maxn; i++) t[i].assign(2, node());
    cin >> q;
    for(int i = 0; i < q; i++){
        int ty;
        cin >> ty;
        if(ty == 1){
            int x;
            cin >> x;
            if(!used[x]){
                for(auto u: divs[x]) add(u, x);
            }
            used[x] = true;
        }
        else{
            int x, k, s;
            cin >> x >> k >> s;
            if(x % k){
                cout << -1 << '\n';
                continue;
            }
            int trie = k;
            int u = root;
            int val = 0;
            for(int i = bits - 1; i >= 0; i--){
                int c = (x & (1 << i)) ? 0 : 1;
                if(t[trie][u].next[c]){
                    int to = t[trie][u].next[c];
                    if(t[trie][to].mn <= s - x){
                        val ^= c * (1 << i);
                        u = to;
                        continue;
                    }
                }
                if(t[trie][u].next[!c]){
                    int to = t[trie][u].next[!c];
                    if(t[trie][to].mn <= s - x){
                        val ^= !c * (1 << i);
                        u = to;
                        continue;
                    }
                }
                val = -1;
                break;
            }
            cout << val << '\n';
        }
    }
}
