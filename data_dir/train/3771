#include <bits/stdc++.h>

using namespace std;

#define loop(i, n) for(int i = 0;i < int(n);i++)
#define rloop(i, n) for(int i = int(n);i >= 0;i--)
#define range(i, a, b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define sfi1(v) scanf("%d",&v)
#define sfi2(v1, v2) scanf("%d %d",&v1,&v2)
#define sfi3(v1, v2, v3) scanf("%d %d %d",&v1,&v2,&v3)
#define sfll1(v) scanf("%I64d",&v);
#define sfll2(v1, v2) scanf("%I64d %I64d",&v1,&v2)
#define sfll3(v1, v2, v3) scanf("%I64d %I64d %I64d",&v1,&v2,&v3)
#define endl '\n'

typedef vector<int> vi;
typedef vector<pair<int, int> > vii;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 2e5 + 5;
int n, m, k, q;
vi adj[N];
int safe[N];
ll dp[N][2];
int mxr = 0;

int getbestE(int st, int ed, int x) {
    return abs(st - x) + abs(st - ed);
}

int getbestS(int st, int ed, int x) {
    return abs(ed - x) + abs(ed - st);
}

ll solve(int r, int flag) {
    if (r == mxr)return 0;
    ll &ret = dp[r][flag];
    if (~ret)return ret;
    ret = 1e18;
    int a = flag ? adj[r].back() : adj[r][0];
    vi arr({a, adj[r + 1][0], adj[r + 1].back()});
    for (int cell : arr) {
        int nxtidx = lower_bound(safe, safe + q, cell) - safe;
        if (nxtidx < q) {
            ll cur = abs(cell - safe[nxtidx]);
            cur += min(getbestE(adj[r + 1][0], adj[r + 1].back(), safe[nxtidx]) + solve(r + 1, 1),
                       getbestS(adj[r + 1][0], adj[r + 1].back(), safe[nxtidx]) + solve(r + 1, 0));
            cur += abs(cell - a);
            ret = min(ret, cur);
        }

        nxtidx--;
        if (nxtidx >= 0) {
            ll cur = abs(cell - safe[nxtidx]);
            cur += min(getbestE(adj[r + 1][0], adj[r + 1].back(), safe[nxtidx]) + solve(r + 1, 1),
                       getbestS(adj[r + 1][0], adj[r + 1].back(), safe[nxtidx]) + solve(r + 1, 0));
            cur += abs(cell - a);
            ret = min(ret, cur);
        }
    }
    return ret;
}


int main() {

#ifndef ONLINE_JUDGE
    //freopen("in.in", "r", stdin);
    //freopen("out.in", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    memset(dp, -1, sizeof dp);
    cin >> n >> m >> k >> q;

    int x, y;
    ll ans = 0;
    loop(i, k) {
        cin >> x >> y;
        adj[x].pb(y);
        mxr = max(mxr, x);
    }

    ans = mxr - 1;
    range(i, 1, n)sort(ALL(adj[i]));
    int j = 1;
    range(i, 2, n) {
        j = max(i, j);
        if (adj[i].empty()) {
            while (j < n && adj[j].empty())j++;
            if (!adj[j].empty())adj[i].swap(adj[j]);
        }
    }

    range(i, 1, n)if (!adj[i].empty())mxr = i;

    loop(i, q)cin >> safe[i];
    sort(safe, safe + q);

    if (!adj[1].empty()) {
        ans += adj[1].back() - 1;
        ans += solve(1, 1);
    } else {
        ans += safe[0] - 1;
        ans += min(getbestE(adj[2][0], adj[2].back(), safe[0]) + solve(2, 1),
                   getbestS(adj[2][0], adj[2].back(), safe[0]) + solve(2, 0));
    }

    cout << ans << endl;


    return 0;
}

