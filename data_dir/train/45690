#include<bits/stdc++.h>
using namespace std;

#define ll             long long
#define LL             long long
#define gcd(a,b)       __gcd(a,b)
#define lcm(a,b)       a*(b/gcd(a,b))
#define pii            pair<int, int>
#define pll            pair<ll, ll>
#define pil            pair<int, ll>
#define pli            pair<ll, int>
#define vi             vector<int>
#define vl             vector<ll>
#define vii            vector<pii>
#define vll            vector<pll>
#define vil            vector<pil>
#define vli            vector<pli>
#define pb             push_back
#define ppb            pop_back
#define mp             make_pair
#define ff             first
#define ss             second
#define all(v)         v.begin(),v.end()
#define fill(a,b)      memset(a,b,sizeof a)
#define smax(a, b)     a=max(a, b)
#define smin(a, b)     a=min(a, b)
#define sqr(x)         x*x
#define cube(x)        x*x*x
#define endl           '\n'

int in() {
    int n;
    scanf("%d",&n);
    return n;
}

ll Lin() {
    ll n;
    scanf("%lld",&n);
    return n;
}

double Din() {
    double n;
    scanf("%lf",&n);
    return n;
}

const ll inf = 1e17;
const ll mod = 1e9 + 7;
const int N = 2e5 + 5;

vii edge;
vii g[N];
vi b;
int prr[N], a[N];
bool vis[N];

void bfs(int u) {
    queue<int>q;
    q.push(u);
    vis[u]=true;
    while(!q.empty()) {
        u=q.front();
        b.pb(u);
        q.pop();
        for(auto x : g[u]) {
            int v=x.ss;
            if(!vis[v]) {
                vis[v]=true;
                q.push(v);
            }
        }
    }
}

int main() {
    int n=in();
    for(int i=1; i<n; i++) {
        int u=in(), v=in();
        edge.pb({u, v});
    }
    for(int i=1; i<=n; i++) {
        a[i]=in();
        prr[a[i]]=i;
    }
    for(auto x : edge) {
        int u=x.ff, v=x.ss;
        g[u].pb({prr[v], v});
        g[v].pb({prr[u], u});
    }
    for(int i=1; i<=n; i++) {
        sort(all(g[i]));
    }
    if(a[1] != 1) return !printf("No\n");
    bfs(a[1]);
    for(int i=1; i<=n; i++) {
        if(a[i]!=b[i-1]) return !printf("No\n");
    }
    printf("Yes\n");
    return 0;
}










