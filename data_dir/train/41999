#include<bits/stdc++.h>
using namespace std;
typedef vector<int> vi;
typedef vector<pair<int,int> > vp;
#define pb push_back
#define mp make_pair
#define ll long long
#define rep(i,n) for(int i=0;i<n;i++)
#define MOD 1000000007
#define N 100010
int visited[N],v[N];
vector<int> tp[110];
int val[N][110],dist[N];
vector<int> graph[N];
int main(){
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	int n,m,k,s;
	cin>>n>>m>>k>>s;
	for(int i=0;i<n;i++){
		cin>>v[i];
		tp[v[i]].pb(i);
	}
	for(int i=0;i<m;i++){
		int a,b;
		cin>>a>>b;
		graph[a-1].pb(b-1);
		graph[b-1].pb(a-1);
	}
	for(int i=1;i<=k;i++){
		memset(visited,0,sizeof(visited));
		memset(dist,0,sizeof(dist));
		queue<int> df;
		for(int j=0;j<tp[i].size();j++){
			df.push(tp[i][j]);
			visited[tp[i][j]] = 1;
			dist[tp[i][j]] = 0;
			val[tp[i][j]][i] = 0;
		}
		while(df.size()){
			int x = df.front();
			df.pop();
			for(int j=0;j<graph[x].size();j++){
				if(!visited[graph[x][j]]){
					df.push(graph[x][j]);
					dist[graph[x][j]] = dist[x] + 1;
					val[graph[x][j]][i] = dist[x] + 1;
					visited[graph[x][j]] = 1;
				}
			}
		}
	}
	for(int i=0;i<n;i++){
		vector<int> df;
		for(int j=1;j<=k;j++)df.pb(val[i][j]);
		sort(df.begin(),df.end());
		ll sumi = 0;
		for(int j=0;j<s;j++){
			sumi += df[j];
		}
		cout<<sumi<<" ";
	}
	cout<<'\n';

	
}