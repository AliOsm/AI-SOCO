// ya rab
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <fstream>
#include <list>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cmath>
#include <sstream>
#include <deque>
#include <complex>
#include <utility>

using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define mp make_pair
#define pb push_back
#define oo (1<<30)
#define sz(v) (int)v.size()
#define all(c) (c).begin(),(c).end()
#define rall(c) (c).rbegin(),(c).rend()
#define mem(s,v) memset(s,v,sizeof(s))
#define ppc(x) __builtin_popcount((x))
#define mt make_tuple // you can ignore
#define eb emplace_back

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<double> vd;
typedef vector<string> vs;
typedef pair<int, int> pi;
typedef vector<pi> vpi;

typedef complex<double> point;
#define EPS 1e-9
#define OO 1e9
#define X real()
#define Y imag()
#define vec(a,b)  ((b) - (a))
#define polar(r,t)  ((r) * exp(point(0, (t))))
#define angle(v)  (atan2((v).Y, (v).X))
#define length(v)   ((double)hypot((v).Y, (v).X))
#define lengthSqr(v)  (dot(v, v))
#define dot(a,b)  ((conj(a) * (b)).real())
#define cross(a,b)  ((conj(a) * (b)).imag())
#define rotate(v,t)   (polar(v, t))
#define rotateabout(v,t,a)  (rotate(vec(a, v), t) + (a))
#define reflect(p,m)  ((conj((p) / (m))) * (m))
#define normalize(p)  ((p) / length(p))
#define same(a,b)   (lengthSqr(vec(a, b)) < EPS)

int dx[] = { 0, 0, 1, -1 };
int dy[] = { 1, -1, 0, 0 };

int n;
string s;

int memo[5005][4];

int rec(int idx, int cur) {
  if (idx == n)
    return 0;
  int &res = memo[idx][cur];
  if (~memo[idx][cur])
    return res;
  res = oo;
  if (s[idx] == 'a') {
    if (cur == 1)
      res = min(rec(idx + 1, cur) + 1, rec(idx + 1, cur + 1));
    else {
      res = rec(idx + 1, cur);
    }
  } else {
    if (cur == 0)
      res = min(rec(idx + 1, cur) + 1, rec(idx + 1, 1));
    if (cur == 1)
      res = rec(idx + 1, cur);
    if (cur == 2)
      res = rec(idx + 1, cur) + 1;
  }
  return res;
}

int main() {
  ios::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("test.in", "rt", stdin);
//  freopen("o.txt", "wt", stdout);
#endif
  cin >> s;
  n = sz(s);
  mem(memo, -1);
  cout << sz(s) - rec(0, 0);
  return 0;
}

