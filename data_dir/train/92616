#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ll long long
#define F first
#define S second
#define FOR(i, j, k) for (int i = j; i < (int)k; i++)

const int N = 1000;
bool ok[N][N];
int nxtDotR[N][N];
int nxtDotL[N][N];
int nxtDotU[N][N];
int nxtDotD[N][N];

int maxStar[N][N];

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    vector<int> ansX, ansY, ansD;

    int n, m;
    cin >> n >> m;
    string a[n];
    FOR(i, 0, n)
    cin >> a[i];

    FOR(i, 0, n)
    {
        nxtDotL[i][0] = -1;
        if (a[i][0] == '.')
            nxtDotL[i][0] = 0;
        FOR(j, 1, m)
        {
            nxtDotL[i][j] = nxtDotL[i][j - 1];
            if (a[i][j] == '.')
                nxtDotL[i][j] = j;
        }
    }

    FOR(i, 0, n)
    {
        nxtDotR[i][m - 1] = m;
        if (a[i][m - 1] == '.')
            nxtDotR[i][m - 1] = m - 1;
        for (int j = m - 2; j >= 0; j--)
        {
            nxtDotR[i][j] = nxtDotR[i][j + 1];
            if (a[i][j] == '.')
                nxtDotR[i][j] = j;
        }
    }

    FOR(j, 0, m)
    {
        nxtDotU[0][j] = -1;
        if (a[0][j] == '.')
            nxtDotU[0][j] = 0;
        FOR(i, 1, n)
        {
            nxtDotU[i][j] = nxtDotU[i - 1][j];
            if (a[i][j] == '.')
                nxtDotU[i][j] = i;
        }
    }

    FOR(j, 0, m)
    {
        nxtDotD[n - 1][j] = n;
        if (a[n - 1][j] == '.')
            nxtDotD[n - 1][j] = n - 1;
        for (int i = n - 2; i >= 0; i--)
        {
            nxtDotD[i][j] = nxtDotD[i + 1][j];
            if (a[i][j] == '.')
                nxtDotD[i][j] = i;
        }
    }

    FOR(i, 1, n - 1)
    FOR(j, 1, m - 1)
    {
        int minDis = min(min(nxtDotD[i][j] - i, i - nxtDotU[i][j]), min(nxtDotR[i][j] - j, j - nxtDotL[i][j]));
        if (minDis > 0)
            minDis--;
        maxStar[i][j] = minDis;
        if (maxStar[i][j] > 0)
        {
            ansX.push_back(i + 1);
            ansY.push_back(j + 1);
            ansD.push_back(maxStar[i][j]);
        }
    }

    for (int i = 0; i < n; i++)
    {
        int mx = 0;
        for (int j = 0; j < m; j++)
        {
            if (mx > 0 || maxStar[i][j] > 0)
                ok[i][j] = true;
            mx = max(mx - 1, maxStar[i][j]);
        }
        mx = 0;
        for (int j = m - 1; j >= 0; j--)
        {
            if (mx > 0 || maxStar[i][j] > 0)
                ok[i][j] = true;
            mx = max(mx - 1, maxStar[i][j]);
        }
    }

    for (int j = 0; j < m; j++)
    {
        int mx = 0;
        for (int i = 0; i < n; i++)
        {
            if (mx > 0 || maxStar[i][j] > 0)
                ok[i][j] = true;
            mx = max(mx - 1, maxStar[i][j]);
        }
        mx = 0;
        for (int i = n - 1; i >= 0; i--)
        {
            if (mx > 0 || maxStar[i][j] > 0)
                ok[i][j] = true;
            mx = max(mx - 1, maxStar[i][j]);
        }
    }

    bool ans = true;
    FOR(i, 0, n)
    {
        FOR(j, 0, m)
        {
            if (a[i][j] == '*' && !ok[i][j])
                ans = false;
        }
    }
    if (ans)
    {
        cout << ansX.size() << endl;
        for (int i = 0; i < ansX.size(); i++)
            cout << ansX[i] << " " << ansY[i] << " " << ansD[i] << endl;
    }
    else
        cout << -1 << endl;
}