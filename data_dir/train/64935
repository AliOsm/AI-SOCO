/**
 * Dont raise your voice, improve your argument.
 * --Desmond Tutu
 */

#include <bits/stdc++.h>
using namespace std;

vector<string> vec_splitter(string s) {
    for(char& c: s) c = c == ','?  ' ': c;
    stringstream ss; ss << s;
    vector<string> res;
    for(string z; ss >> z; res.push_back(z));
    return res;
}

void debug_out(vector<string> __attribute__ ((unused)) args, __attribute__ ((unused)) int idx) { cerr << endl; }
template <typename Head, typename... Tail>
void debug_out(vector<string> args, int idx, Head H, Tail... T) {
    if(idx > 0) cerr << ", ";
    stringstream ss; ss << H;
    cerr << args[idx] << " = " << ss.str();
    debug_out(args, idx + 1, T...);
}

#ifdef XOX
#define debug(...) debug_out(vec_splitter(#__VA_ARGS__), 0, __VA_ARGS__)
#else
#define debug(...) 42
#endif

const double PI = acos(-1);
typedef long long ll;
#define int ll
#define fori(n) for(int i=0; i<int(n); i++)

#define cins(s) string s; cin>>s;
#define cini(i) int i; cin>>i;
#define cind(d) double d; cin>>d;
#define cinai(a, n) vi a(n); fori(n) { cin>>a[i]; }
#define cinas(s, n) vs s(n); fori(n) { cin>>s[i]; }
#define cinad(a, n) vd a(n); fori(n) { cin>>a[i]; }

typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef vector<double> vd;
typedef vector<bool> vb;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<vvi> vvvi;
typedef vector<string> vs;

/* I believe we cant remove single primefactors from n,
 * so min(n) is product of sinlge primefactors.
 * We can reduce number of primefactors to its halve
 * if that number is power of 2.
 * So, we need to make biggest freq of primefactors
 * power of 2, and all others same. With one mul.
 * Then we need log(max power) times sqrt operation.
 */
void solve() {
    cini(n);

    map<int,int> factors;
    for(int i=2; i*i<=n; i++) {
        while(n%i==0) {
            factors[i]++;
            n/=i;
        }
    }
    if(n>1)
        factors[n]++;

    int ma=0;
    int ans1=1;
    for(auto ent : factors) {
        ans1*=ent.first;
        ma=max(ma, ent.second);
    }
    int needMul=0;
    if(ma>1) {
        if(__builtin_popcount(ma)>1)
            needMul=1;
        else {
            for(auto ent : factors) {
                if(ent.second!=ma)
                    needMul=1;
            }
        }
    }
    
    int ans2=needMul;
    while(ma>1) {
        ans2++;
        ma=(ma+1)/2;
    }

    cout<<ans1<<" "<<ans2<<endl;
}

signed main() {
    cin.tie(nullptr);
    std::ios::sync_with_stdio(false);
    solve();
}

