#include <iostream>
#include <stdio.h>
#include <string>
#include <memory.h>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <time.h>
#include <assert.h>
#include <cmath>
#include <stack>
#include <string.h>
#include <sstream>
#include <algorithm>
using namespace std;
typedef long long ll;
const int N = 1000;
int n;
vector<vector<int> > g;
vector<int> sa, sb;
bool sw;
bool good[N];
int ask(char x, int y) {
	printf("%c %d\n", x, y + 1);
	fflush(0);
	scanf("%d", &y);
	return y - 1;
}
int DFS(int u, int p) {
	if (good[u])
		return u;
	for (auto v : g[u])
		if (v != p) {
			int ret = DFS(v, u);
			if (ret != -1)
				return ret;
		}
	return -1;
}
int main()
{
	int t;
	scanf("%d", &t);
	while (t--) {
		sw = false;
		scanf("%d", &n);
		g.clear();
		g.resize(n);
		for (int i = 1, a, b; i < n; ++i) {
			scanf("%d%d", &a, &b);
			--a; --b;
			g[a].push_back(b);
			g[b].push_back(a);
		}
		memset(good, 0, sizeof(good));
		sa.clear(); sb.clear();
		for (int it = 0; it < 2; ++it) {
			int sz;
			scanf("%d", &sz);
			sa.resize(sz);
			for (auto &x : sa) {
				scanf("%d", &x);
				--x;
				if (it == 0)
					good[x] = true;
			}
			sa.swap(sb);
		}
		int at = ask('B', sb[0]);
		int u = DFS(at, -1);
		at = ask('A', u);
		int ans = -1;
		for (auto x : sb)
			if (at == x) {
				ans = u + 1;
				break;
			}
		printf("C %d\n", ans);
		fflush(0);
	}
	return 0;
}