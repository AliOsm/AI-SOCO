#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <random>
#include <unordered_set>
#include <complex>
#include <assert.h>
#include <deque>

#define LL long long
#define ll long long
#define ld long double
#define ull unsigned ll
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int, int> 
#define pll pair<ll, ll> 
#define vi vector<int>
#define vpii vector<pii>
#define vpll vector<pll>
#define vll vector<ll>
#define vpii vector<pii>
#define vvi vector<vector<int>>
#define endl '\n'
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const ll  Inf = 1e18;
const ld  eps = 1e-7;
ll LINF = (ll)2e18;
using namespace std;
ll mod = 1e9 + 7;
ll mod5 = 1e9 + 9;
ll mod3 = 998244353;
ll mod4 = 1000003;
ll mod2 = 1e9 + 123;
const int MAXN = 4000001; // число вершин
const int INF = 1000000000; // константа-бесконечность
int n, r;
vpii xy;


struct Tree {
	vector<ll>lazy;
	vector<ll>t;

	Tree(int n) {
		t.resize(4 * n, 0);
		lazy.resize(4 * n, 0);
	}

	void push(int v, int tl, int tr) {
		if (tl != tr) {
			lazy[2 * v] += lazy[v];
			lazy[2 * v + 1] += lazy[v];
		}
		t[v] += lazy[v];
		lazy[v] = 0;
	}

	void update(int v, int tl, int tr, int l, int r, int x) {
		push(v, tl, tr);
		if (l == tl && r == tr) {
			lazy[v] += x;
			push(v, tl, tr);
			return;
		}
		int tm = (tl + tr) / 2;
		if (r <= tm) {
			update(2 * v, tl, tm, l, r, x);
			push(2 * v + 1, tm + 1, tr);
		}
		else if (l > tm) {
			update(2 * v + 1, tm + 1, tr, l, r, x);
			push(2 * v, tl, tm);
		}
		else {
			update(2 * v, tl, tm, l, tm, x);
			update(2 * v + 1, tm + 1, tr, tm + 1, r, x);
		}
		t[v] = max(t[2 * v], t[2 * v + 1]);
	}

	ll mx(int v, int tl, int tr, int l, int r) {
		push(v, tl, tr);
		if (l == tl && r == tr) {
			return t[v];
		}

		int tm = (tl + tr) / 2;

		if (r <= tm) {
			return mx(2 * v, tl, tm, l, r);
			push(2 * v + 1, tm + 1, tr);
		}
		else if (l > tm) {
			return mx(2 * v + 1, tm + 1, tr, l, r);
			push(2 * v, tl, tm);
		}
		else {
			return  max(mx(2 * v, tl, tm, l, tm),
				mx(2 * v + 1, tm + 1, tr, tm + 1, r));
		}
	}
};

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("lines.in", "r", stdin);
	//freopen("javacert.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0); cout.setf(ios::fixed); cout.precision(20);
	cin >> n >> r;
	xy.resize(n);
	int mn = 1e9;
	forn(i, 0, n) {
		int x, y;
		cin >> x >> y;
		xy[i].first = x + y;
		xy[i].second = x - y;
		mn = min(mn, xy[i].second);
	}
	forn(i, 0, n) {
		xy[i].second -= mn;
	}
	sort(all(xy));
	int itl = 0, itr = 0;
	r *= 2;
	ll ans = 0;

	Tree t(MAXN);
	while (itl != n) {
		if (itr < n && xy[itr].first - xy[itl].first <= r) {
			t.update(1, 0, MAXN - 1, max(0, xy[itr].second - r), xy[itr].second, 1);
			ans = max(ans, t.mx(1, 0, MAXN - 1, 0, MAXN - 1));
			itr++;
		}
		else {
			t.update(1, 0, MAXN - 1, max(0, xy[itl].second - r), xy[itl].second, -1);
			itl++;
		}
	}
	cout << ans;
	return 0;
}
