//In the name of Allah

#include<bits/stdc++.h>

using namespace std;

const int Maxn = 5000 + 5, Mod = 1000 * 1000 * 1000 + 7;
int n, dp[Maxn][Maxn], dif[Maxn][Maxn];
string s;

void filldif()
{
    for(int i = 0; i < n; i ++)
        for(int j = 0; j < n; j ++)
            dif[i][j] = -1;
    for(int i = 0; n - 2 * (i + 1) >= 0; i ++)
    {
        for(int j = n - 1 - i; j < n; j ++)
            if(s[j] != s[j - i - 1])
            {
                dif[n - 1 - i][i] = j;
                break;
            }
    }
    for(int i = n - 2; i >= 0; i --)
    {
        for(int j = 0; i + j < n - 1 && i - j - 1 >= 0; j ++)
        {
            if(s[i] != s[i - 1 - j])
                dif[i][j] = i;
            else
            {
                dif[i][j] = dif[i + 1][j];
                if(dif[i][j] == i + j + 1)
                    dif[i][j] = -1;
            }
        }
    }
    return;
}

void filldp()
{
    for(int i = 0; i <= n; i ++)
        dp[0][i] = 1;
    for(int i = 1; i <= n; i ++)
    {
        for(int j = 1; j <= i; j ++)
        {
            if(s[i - j] == '0')
                dp[i][j] = dp[i][j - 1];
            else
            {
                if(i - 2 * j + 1 > 0 && dif[i - j][j - 1] != -1 && s[dif[i - j][j - 1]] > s[dif[i - j][j - 1] - j])
                    dp[i][j] = (dp[i][j - 1] + dp[i - j][j]) % Mod;
                else
                    dp[i][j] = (dp[i][j - 1] + dp[i - j][j - 1]) % Mod;
                dp[i][j] %= Mod;
            }
        }
        for(int j = i + 1; j <= n; j ++)
            dp[i][j] = dp[i][j - 1];
    }
    return;
}

int main()
{
    cin >> n >> s;
    filldif();
    filldp();
    cout << dp[n][n] << endl;
    return 0;
}
