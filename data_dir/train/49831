#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
#define ll long long
#define ld long double
using namespace std;
const ll mod = 1e9 + 7;
ll k, steps[1005], dp[1005][1005][2];
string s;
ll solve(int idx, int cnt, bool can){
    if(idx == s.size())
        return (steps[cnt] == k - 1);
    ll &ans = dp[idx][cnt][can];
    if(ans != -1)
        return ans % mod;
    ans = 0;
    if(s[idx] == '1'){
        ans += solve(idx + 1, cnt + 1, can);
        ans %= mod;
        ans += solve(idx + 1, cnt, 1);
        ans %= mod;
    }
    else{
        if(can)
            ans += solve(idx + 1, cnt + 1, can), ans %= mod;
        ans += solve(idx + 1, cnt, can);
        ans %= mod;
    }
    return ans % mod;
}
int main()
{
    ios::sync_with_stdio(0);
    cin >> s >> k;
    steps[1] = 0;
    memset(dp, -1, sizeof dp);
    if(!k)
        return cout << 1,0;
    else if(k == 1)
        return cout << s.size() - 1, 0;
    for(int i = 2; i <= 1000; i++)
        steps[i] = 1 + steps[__builtin_popcount(i)];
    cout << solve(0, 0, 0) << endl;
    return 0;
}