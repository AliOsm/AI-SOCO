/*
▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄██████████████▒▒▐▌
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐
TAYA 
*/
#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#pragma GCC optimize("fast-math")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>
 
using namespace std;


#define ll long long
#define ld double
#define null NULL
#define prev prev228
#define index index228
#define left left228
#define right right228
#define hash hash228
#define firn(i, n) for (int i = 0; i < (int)n; ++i)
#define forn(i, n) for (int i = 1; i <= (int)n; ++i)
#define endl '\n'
#define int long long



template<typename T> inline void uin(T &a, T b) {
	if (b < a) a = b;
}

template<typename T> inline void uax(T &a, T b) {
	if (b > a) a = b;
}

const int maxn = 228;

int n, m;

int a[maxn][maxn], kek[maxn][maxn], row[maxn], col[maxn], _row[maxn], _col[maxn];

int curxor[maxn], res[maxn][maxn];

void solve() {
	memset(curxor, 0, sizeof(curxor));
	forn(i, n) {
		forn(j, m) a[i][j] = 0;
	}
	forn(i, n) {
		int cur = 0;
		forn(j, m) {
			curxor[j] ^= a[i][j];
		}
		forn(j, m) {
			if (col[j] != curxor[j]) {
				a[i][j] ^= 1;
				curxor[j] ^= 1;
			}
			cur ^= a[i][j];
		}
		if (cur != row[i]) {
			a[i][1] ^= 1;
			a[i + 1][1] ^= 1;
		}
	}
}


signed main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	int xr1 = 0, xr2 = 0;
	forn(i, n) cin >> _row[i], xr1 ^= _row[i];
	forn(i, m) cin >> _col[i], xr2 ^= _col[i];
	if (xr1 != xr2) {
		cout << "NO\n";
		return 0;
	}
	for (int bit = 0; bit < 30; ++bit) {
		forn(i, n) {
			row[i] = (_row[i] >> bit) & 1;
		}
		forn(i, m) col[i] = (_col[i] >> bit) & 1;
		solve();
		forn(i, n) {
			forn(j, m) {
				res[i][j] += a[i][j] * (1 << bit);
			}
		}
	}
	cout << "YES\n";
	forn(i, n) {
		forn(j, m) {
			cout << res[i][j] << " ";
		}
		cout << "\n";
	}
    return 0;
}






