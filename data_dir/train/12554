#include <bits/stdc++.h>
#define endl '\n'

//#pragma GCC optimize ("O3")
//#pragma GCC target ("sse4")

#define SZ(x) ((int)x.size())
#define ALL(V) V.begin(), V.end()
#define L_B lower_bound
#define U_B upper_bound
#define pb push_back

using namespace std;
template<class T, class T2> inline int chkmax(T &x, const T2 &y) { return x < y ? x = y, 1 : 0; }
template<class T, class T2> inline int chkmin(T &x, const T2 &y) { return x > y ? x = y, 1 : 0; }
const int MAXN = (1 << 12);

int n, m;
int p[MAXN];
int oth[MAXN];

int pl = 1;

void read()
{
	cin >> n >> m;
	for(int i = 1; i <= 2 * n; i++)
		cin >> p[i];

	while(m--)
	{
		int u, v;
		cin >> u >> v;
		oth[u] = v;
		oth[v] = u;
	}

	cin >> pl;
}

int need_me;
bool blocked[MAXN];

void jury_turn()
{
	int x;
	cin >> x;
	blocked[x] = 1;
	
	need_me = 0;
	if(oth[x] != 0 && !blocked[oth[x]])
		need_me = oth[x];
}

void my_turn()
{
	if(need_me != 0)
	{
		cout << need_me << endl << flush;
		blocked[need_me] = 1;
		return;
	}

	for(int i = 1; i <= 2 * n; i++)
		if(oth[i] != 0 && !blocked[i] && !blocked[oth[i]] && p[i] >= p[oth[i]])
		{
			blocked[i] = 1;
			cout << i << endl << flush;
			return;
		}

	pair<int, int> mx = {-1, -1};
	for(int i = 1; i <= 2 * n; i++)
		if(!blocked[i]) chkmax(mx, make_pair(p[i], i));

	cout << mx.second << endl << flush;
	blocked[mx.second] = 1;
}

void solve()
{
	for(int i = 0; i < n; i++)
	{
		if(pl == 2) 
		{
			jury_turn();
			my_turn();
		}
		else
		{
			my_turn();
			jury_turn();
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}

