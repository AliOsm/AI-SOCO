#include<stdio.h>
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<functional>
#include<string>
#include<algorithm>
#include<time.h>
#include<bitset>
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define rt 1,1,n
#define ls o<<1
#define rs o<<1|1
#define mid (l+r>>1)
#define lson o<<1,l,mid
#define rson o<<1|1,mid+1,r
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T> inline void gmax(T &a, T b) { if (b>a)a = b; }
template <class T> inline void gmin(T &a, T b) { if (b<a)a = b; }
using namespace std;
const int N = 1e5 + 10, M = 0, Z = 1e9 + 7, maxint = 2147483647, ms31 = 522133279, ms63 = 1061109567, ms127 = 2139062143; const double eps = 1e-8, PI = acos(-1.0);//.0
map<int, int>mop;
struct A
{
	int mn, mx, w;
}a[1 << 18];
int w[1 << 18];
int n, S, D;
int v[N];
void pushup(int o)
{
	a[o] = { min(a[ls].mn, a[rs].mn), max(a[ls].mx, a[rs].mx), min(a[ls].w, a[rs].w) };
}
void build(int o, int l, int r)
{
	a[o].mx = -1e9; a[o].mn = 1e9; a[o].w = 1e9;
	if (l == r)return;
	build(lson);
	build(rson);
}
int P;
int MX, MN, W;
bool find(int o, int l, int r)
{
	int mx = max(MX, a[o].mx);
	int mn = min(MN, a[o].mn);
	if (mx - mn > S)
	{
		l < r && find(rson) && find(lson);
		return 0;
	}
	else
	{
		MX = mx; MN = mn; gmin(W, a[o].w);
		return 1;
	}
}
void updateM(int o, int l, int r)
{
	if (l == r)
	{
		int x; scanf("%d", &x); 
		a[o].mn = a[o].mx = x;
		return;
	}
	if (P <= mid)updateM(lson);
	else updateM(rson);
	pushup(o);
}
void updateW(int o, int l, int r)
{
	if (l == r)
	{
		a[o].w = W;
		return;
	}
	if (P <= mid)updateW(lson);
	else updateW(rson);
	pushup(o);
}
int f[N];
int main()
{
	while (~scanf("%d%d%d", &n, &S, &D))
	{
		build(rt);
		for (int i = 1; i <= n; ++i)
		{
			if (i >= D)
			{
				P = i - D + 1; W = f[P - 1]; updateW(rt);
			}
			P = i; updateM(rt);
			MX = -1e9; MN = 1e9; W = 1e9; find(rt); f[i] = 1e9; gmin(f[i], ++W);
		}
		if (W >= 1e9)W = -1;
		printf("%d\n", W);
	}
	return 0;
}