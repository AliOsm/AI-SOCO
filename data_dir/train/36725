/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>
#include <sstream>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vl;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;

const double pi = acos(0.0) * 2.0;
const double eps = 1e-12;
const int step[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}
template <class T> inline T max1(T a, T b) {return a > b ? a : b;}
template <class T> inline T min1(T a, T b) {return a < b ? a : b;}
template <class T> inline T gcd1(T a, T b) {
	if(a < b) swap(a, b);
	if(a % b == 0) return b;
	return gcd1(b, a % b);
}
template <class T> inline T lb(T num) {return num & (-num); }
inline int jud(double a, double b){
	if(abs1(a - b) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
template <class t>
inline int find(t val, t *a, int na, bool f_small = 1, bool f_lb = 1){
	if(na == 1) return 0;
	int be = 0, en = na - 1;
	if(a[0] <= a[na - 1]){
		if(f_lb == 0) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(a[mid], val) != 1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(a[mid], val) != -1) en = mid;
			else be = mid + 1;
		}
		if(f_small && jud(a[be], val) == 1 && be != 0) be--;
		if(!f_small && jud(a[be], val) == -1 && be != na - 1) be++;
	} else {
		if(f_lb) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(a[mid], val) != -1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(a[mid], val) != 1) en = mid;
			else be = mid + 1;
		}
		if(!f_small && jud(a[be], val) == -1 && be != 0) be--;
		if(f_small && jud(a[be], val) == 1 && be != na - 1) be++;
	}
	return be;
}
inline int bitnum(ull nValue){
    nValue = ((0xaaaaaaaaaaaaaaaaull & nValue)>>1) + (0x5555555555555555ull & nValue);
    nValue = ((0xccccccccccccccccull & nValue)>>2) + (0x3333333333333333ull & nValue);
    nValue = ((0xf0f0f0f0f0f0f0f0ull & nValue)>>4) + (0x0f0f0f0f0f0f0f0full & nValue);
    nValue = ((0xff00ff00ff00ff00ull & nValue)>>8) + (0x00ff00ff00ff00ffull & nValue);
    nValue = ((0xffff0000ffff0000ull & nValue)>>16) + (0x0000ffff0000ffffull & nValue);
    nValue = ((0xffffffff00000000ull & nValue)>>32) + (0x00000000ffffffffull & nValue);
	return nValue;
}
long long pow(long long n, long long m, long long mod = 0){
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}

const int maxn = 201000;
struct node{
	int to, val, f;
	bool operator < (const node &a) const{
		return to < a.to;
	}
};
vector <node> edge[maxn];
int sum[maxn][2];
int q[maxn], l, r;
int np, ne;
int orig[maxn][2];

int main(){
//	freopen("input.txt","r", stdin);
//	ifstream cin("input.txt");
	scanf("%d%d", &np, &ne);
	for(int i = 0; i < ne; i++){
		int a, b, c;
		scanf("%d%d%d", &a, &b, &c);
		a--; b--;
		node ranno;
		ranno.val = c;
		ranno.to = a;
		ranno.f = 0;
		edge[b].push_back(ranno);
		sum[b][0] += c;
		ranno.to = b;
		edge[a].push_back(ranno);
		sum[a][0] += c;
		orig[i][0] = a; orig[i][1] = b;
	}
	for(int i = 0; i < np; i++) sort(edge[i].begin(), edge[i].end());
	l = r = 0;
	q[r++] = 0;
	while(l != r){
		for(int i = 0; i < (int)edge[q[l]].size(); i++) {
			if(edge[q[l]][i].f) continue;
			node ranno;
			ranno.to = q[l];
			vector <node> :: iterator it;
			it = lower_bound(edge[edge[q[l]][i].to].begin(), edge[edge[q[l]][i].to].end(), ranno);
			it->f = 1;
			sum[edge[q[l]][i].to][1] += edge[q[l]][i].val;
			if(edge[q[l]][i].to != np - 1 && sum[edge[q[l]][i].to][1] >= sum[edge[q[l]][i].to][0] / 2) q[r++] = edge[q[l]][i].to;
		}
		l++;
	}
	for(int i = 0; i < ne; i++){
		vector <node> :: iterator it;
		node ranno;
		ranno.to = orig[i][1];
		it = lower_bound(edge[orig[i][0]].begin(), edge[orig[i][0]].end(), ranno);
		if(it->f) printf("1\n");
		else printf("0\n");
	}

	return 0;
}



