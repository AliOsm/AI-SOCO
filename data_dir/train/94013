#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <hash_map>
#include <map>
#include <hash_set>
#include <set>
#include <stack>
#include <algorithm>
#include <sstream>
#include <queue>
#include <math.h>
using namespace std;
typedef long long LL;
#define mems(arr, val) memset(arr, val, sizeof(arr));
#define all(A) A.begin(), A.end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define INF 2000000000
#define SIZE 100009
#define mp(a, b) make_pair(a, b)
const int MOD = 1000000007;

int r1,c1,r2,c2;

bool U[105][100009];
int D[105][100009];

struct step
{
	step(int r1, int c1, int num1)
	{
		r = r1;
		c = c1;
		num = num1;
	}
	int r,c,num;
};

int rec(int r, int c, vector<int> &a)
{
	queue<step> Q;
	Q.push(step(r, c, 0));
	while(Q.size() > 0)
	{
		step cs = Q.front();
		U[cs.r][cs.c] = true;
		Q.pop();
		r = cs.r;
		c = cs.c;
		if (r == r2 && c == c2)
		{
			return cs.num;
		}
		if (r < a.size() - 1)
		{
			int newr, newc;
			newr = r + 1;
			newc = min(c, a[newr]);
			if (!U[newr][newc]) {U[newr][newc] = true; Q.push(step(newr, newc, cs.num + 1));}
		}
		if (r > 1)
		{
			int newr, newc;
			newr = r - 1;
			newc = min(c, a[newr]);
			if (!U[newr][newc]) {U[newr][newc] = true; Q.push(step(newr, newc, cs.num + 1));}
		}

		if (c > 1)
		{
			int newr, newc;
			newr = r;
			newc = c - 1;
			if (!U[newr][newc]) {U[newr][newc] = true; Q.push(step(newr, newc, cs.num + 1));}
		}

		if (c < a[r])
		{
			int newr, newc;
			newr = r;
			newc = c + 1;
			if (!U[newr][newc]) {U[newr][newc] = true; Q.push(step(newr, newc, cs.num + 1));}
		}
	}
}

int main()
{
//#ifdef MY_SOL
	freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
//#endif
	mems(U, false);
	int n;
	cin>>n;
	vector<int> a(n + 1);
	forn(i, 0, n)
	{
		cin>>a[i + 1];
		a[i + 1]++;
	}
	mems(D, -1);
	cin>>r1>>c1>>r2>>c2;
	cout<<rec(r1, c1, a);

	return 0;
}