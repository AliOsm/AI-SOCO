#include<bits/stdc++.h>
using namespace std;
const int mod=998244353;
inline int add(int a,int b)
{
	if((a+=b)>=mod)a-=mod;
	return a;
}
inline int dec(int a,int b)
{
	if((a-=b)<0)a+=mod;
	return a;
}
inline int mult(int a,int b)
{
	long long t=1ll*a*b;
	if(t>=mod)t%=mod;
	return t;
}
inline int power(int a,int b)
{
	int out=1;
	while(b)
	{
		if(b&1)out=mult(out,a);
		a=mult(a,a);
		b>>=1;
	}
	return out;
}
int n,K,l,len,fac[4010],ifac[4010],pw2[4010],ipw2[4010];
inline int C(int a,int b)
{
	if(a<b)return 0;
	return mult(fac[a],mult(ifac[b],ifac[a-b]));
}
inline int calc(int v)
{
	if(v&1)return 0;
	return mult(fac[v],mult(ipw2[v/2],ifac[v/2]));
}
inline int solve(int x)
{
	int ret=0;
	for(int i=x;i<=2*n-x;i+=2)
		ret=add(ret,mult(mult(calc(i-x),calc(2*n-i-x)),mult(mult(C(i,x),C(2*n-i,x)),fac[x])));
	return ret;
}
int main()
{
	scanf("%d%d%d",&n,&K,&l);
	int len=mult(l%mod,power(2*n+1,mod-2));
	fac[0]=1;pw2[0]=1;
	for(int i=1;i<=2*n;i++)fac[i]=mult(fac[i-1],i),pw2[i]=add(pw2[i-1],pw2[i-1]);
	ifac[2*n]=power(fac[2*n],mod-2);
	ipw2[2*n]=power(pw2[2*n],mod-2);
	for(int i=2*n-1;i>=0;i--)ifac[i]=mult(ifac[i+1],i+1),ipw2[i]=add(ipw2[i+1],ipw2[i+1]);
	int ans=0;
	for(int i=K;i<=n;i++)ans=add(ans,solve(i));
	printf("%d\n",mult(mult(ans,power(calc(2*n),mod-2)),len));
	return 0;
}