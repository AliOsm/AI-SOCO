#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<int, int>, // change type
//        null_type,
//        less<pair<int, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-8);

string dpString;


ll mem[20][20][2];
ll solve(int i, int cntDigits, bool canAny)
{
    if (i == sz(dpString))
        return cntDigits <= 3;
    ll &ret = mem[i][cntDigits][canAny];
    if (~ret)
        return ret;
    ret = 0;
    for (int d = '0'; d <= '9'; ++d)
    {
        if (canAny || d <= dpString[i])
        {
            ret += solve(i + 1, cntDigits + (d != '0'), canAny||(d < dpString[i]));
        }
    }
    return ret;
}

string toString(ll x)
{
    if (!x)
        return "0";
    string ret;
    while(x)
    {
        ret += (x%10) + '0';
        x /= 10;
    }
    reverse(all(ret));
    return ret;
}


int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    int q;
    cin >> q;
    while(q--)
    {
        ll lInt, rInt;
        cin >> lInt >>  rInt;
        --lInt;
        string r = toString(rInt), l = toString(lInt);
        clr(mem, -1);
        dpString = r;
        ll rAns = solve(0,0,0);
        clr(mem, -1);
        dpString = l;
        ll lAns = solve(0,0,0);
        cout << rAns - lAns << '\n';
    }
    return  0;

}