/*  */
#include <iostream>
#include <sstream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <bitset>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <functional>
#include <iterator>
#include <iomanip>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define sti				set<int>
#define stpii			set<pair<int, int> >
#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define vpii			vector<pair<int,int> >
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define clr				clear
#define pb 				push_back
#define mp 				make_pair
#define fir				first
#define sec				second
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1
#define getBits(x)		__builtin_popcount(x)
#define getBitIdx(x)	__builtin_ffs(x)

typedef long long LL;
const int maxn = 255;
char s[maxn][maxn];
int dir[8][2] = {
	-1,0, 1,0, 0,-1, 0,1,
	-1,-1, -1,1, 1,-1, 1,1
};
int n, m, c;

bool judge(int x, int y) {
	return x<0 || x>=n || y<0 || y>=m;
}

void dfs(int x, int y, char cs, char ct) {
	int xx, yy;
	
	++c;
	s[x][y] = ct;
	rep(i, 0, 8) {
		xx = x + dir[i][0];
		yy = y + dir[i][1];
		if (judge(xx, yy) || s[xx][yy]!=cs) continue;
		dfs(xx, yy, cs, ct);
	}
}

void solve() {
	int ans = 0;
	bool flag;
	
	rep(i, 0, n) {
		rep(j, 0, m) {
			if (s[i][j] != '1') continue;
			
			c = 0;
			dfs(i, j, '1', '2');
			if (c%4 == 0) {
				int l = c / 4 + 1;
				
				flag = true;
				rep(k, 0, l) {
					if (judge(i+k, j) || s[i+k][j]!='2') {
						flag = false;
						break;
					}
					if (judge(i, j+k) || s[i][j+k]!='2') {
						flag = false;
						break;
					}
					if (judge(i+l-1, j+k) || s[i+l-1][j+k]!='2') {
						flag  = false;
						break;
					}
					if (judge(i+k, j+l-1) || s[i+k][j+l-1]!='2') {
						flag = false;
						break;
					}
				}
				if (flag) ++ans;
				
				// check diagnal
				flag = true;
				int ii = i + 2*(l-1), jj;
				rep(k, 0, l) {
					if (judge(i+k, j+k) || s[i+k][j+k]!='2') {
						flag = false;
						break;
					}
					if (judge(i+k, j-k) || s[i+k][j-k]!='2') {
						flag = false;
						break;
					}
					if (judge(ii-k, j+k) || s[ii-k][j+k]!='2') {
						flag  = false;
						break;
					}
					if (judge(ii-k, j-k) || s[ii-k][j-k]!='2') {
						flag = false;
						break;
					}
				}
				if (flag) ++ans;
				
			}
			dfs(i, j, '2', '0');
		}
	}
	
	printf("%d\n", ans);
}

int main() {
	cin.tie(0);
	ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif
	
	int t;
	
	scanf("%d0", &t);
	while (t--) {
		scanf("%d%d", &n,&m);
		rep(i, 0, n)
			scanf("%s", s[i]);
		solve();
	}
	
	#ifndef ONLINE_JUDGE
		printf("time = %ldms.\n", clock());
	#endif
	
	return 0;
}
