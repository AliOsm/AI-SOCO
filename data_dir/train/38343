#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <iostream>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef unsigned long long llu;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
const ll MOD = 1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v[1001];

char s[1001];
int p[1001];
int deg[1001];
int ans[1001];

queue<int> q;

int find(int a) {
	if (p[a] == -1) return a;
	return p[a] = find(p[a]);
}

void merge(int a, int b) {
	a = find(a); b = find(b);
	if (a == b) return; 
	p[b] = a;
}

int main() {
	memset(p, -1, sizeof(p));
	int n;
	scanf("%d", &n);
	scanf("%s", s);

	for (int i = 0; i < n - 1; i++)
		if (s[i] == '=') merge(i, i + 1);

	for (int i = 0; i < n - 1; i++) {
		if (s[i] == 'L') {
			v[find(i + 1)].push_back(find(i));
			deg[find(i)]++;
		}
		else if (s[i] == 'R') {
			v[find(i)].push_back(find(i + 1));
			deg[find(i + 1)]++;
		}
	}

	for (int i = 0; i < n; i++)
		if (deg[i] == 0 && find(i) == i) {
			q.push(i);
			ans[i] = 1;
		}

	int tv;
	while (!q.empty()) {
		tv = q.front();
		q.pop();

		for (int i = 0; i < sz(v[tv]); i++) {
			ans[v[tv][i]] = max(ans[v[tv][i]], ans[tv] + 1);
			if (--deg[v[tv][i]] == 0)
				q.push(v[tv][i]);
		}
	}

	for (int i = 0; i < n; i++) {
		printf("%d ", ans[find(i)]);
	}
}