#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

const int mx = 2e5+5;
vi adjlist[mx];
int n;
bool isleaf[mx];
int deg[mx];

struct info{
	int leaf, child, dist;
};

bool cmp( const info &lhs, const info &rhs )
{
	return lhs.dist > rhs.dist;
}

vector<info> dp[mx];

void dfs( int u, int par )
{
	vector<info> store;
	//if( isleaf[u] ) store.PB( {u, u, 0} );
	store.PB( {u, u, 0} );
	for( auto v : adjlist[u] ) {
		if( v == par ) continue;
		dfs( v, u );
		info temp = dp[v][0];
		++temp.dist;
		temp.child = v;
		store.PB( temp );
	}
	sort( store.begin(), store.end(), cmp );
	while( store.size() > 3 ) store.pop_back();
	dp[u] = store;
}

int ans = 0;
vi vec;

void dfs2( int u, int par )
{
	if( dp[u].size() >= 3 ) {
		if( ans < dp[u][0].dist + dp[u][1].dist + dp[u][2].dist ) {
			ans = dp[u][0].dist + dp[u][1].dist + dp[u][2].dist;
			vec.clear();
			vec.PB(dp[u][0].leaf);
			vec.PB(dp[u][1].leaf);
			vec.PB(dp[u][2].leaf);
		}
	}
	for( auto v : adjlist[u] ) {
		if( v == par ) continue;
		for( int i = 0; i < dp[u].size(); ++i ) {
			if( dp[u][i].child == v ) continue;
			info temp = dp[u][i];
			temp.child = u;
			++temp.dist;
			dp[v].PB(temp);
			sort( dp[v].begin(), dp[v].end(), cmp );
			dfs2( v, u );
			break;
		}
	}
}

int main()
{
	optimize();
	cin >> n;
	for( int i = 0; i < n-1; ++i ) {
		int a, b;
		cin >> a >> b;
		adjlist[a].PB(b);
		adjlist[b].PB(a);
		++deg[a];
		++deg[b];
	}
	for( int i = 1; i <= n; ++i ) {
		if( deg[i] == 1 ) isleaf[i] = 1;
	}
	dfs(1, 0);
	dfs2(1, 0);
	cout << ans << endl;
	for( int i = 0; i < vec.size(); ++i ) cout << vec[i] << " ";
	cout << endl;
}





















