#include <bits/stdc++.h>
#define y0    lol
#define y1    lool
#define yn    loool
#define prev  looool
#define fi first
#define se second
#define pb push_back
#define sz(x) (int)(x).size()
#define pcnt __builtin_popcountll
#define rep(i,a,b) for(int i = (a); i <= (b); i++)
#define rrep(i,a,b) for(int i = (b); i >= (a); i--)
#ifdef LOCAL
#define rall(x,a) for(x : a)
#else
#define rall(x,a) for(auto x : a)
#endif
#define rng(a) a.begin(), a.end()
#define PI 3.14159265358979323846
#define MOD 1000000007
#define endl "\n"
typedef long long ll;
using namespace std;

const int N = 1111, P = 555555, DX[] = {-1, 0, 1, 0}, DY[] = {0, -1, 0, 1};
const int DDX[] = {-1, 0, 1, 2, 1, 0}, DDY[] = {0, -1, -1, 0, 1, 1};
int val[N][N], col[P];
vector<pair<int, int> > pos[P];
int n, m;

int findColor(int v) {
    set<int> cl;
    rall(p, pos[v]) {
        rep(d, 0, 3) {
            int i = p.first + DX[d];
            int j = p.second + DY[d];
            int vv = val[i][j];
            if(vv > 0 && v != vv) {
                cl.insert(col[vv]);
            }
        }
    }
    int ans = 0;
    while(cl.find(ans) != cl.end()) ans++;
    return ans;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin >> n >> m;
    rep(i, 1, n) {
        string s;
        cin >> s;
        rep(j, 0, sz(s)) {
            val[i][j + 1] = s[j] == '.' ? 0 : -1;
        }
    }
    int k = 0;
    rep(i, 1, n) {
        rep(j, 1, m - 1) {
            if(!val[i][j] && !val[i][j + 1]) {
                val[i][j] = ++k;
                val[i][j + 1] = k;
                pos[k].pb(make_pair(i, j));
                pos[k].pb(make_pair(i, j + 1));
                col[k] = findColor(k);
            }
        }
    }
    rep(j, 1, m) {
        rep(i, 1, n - 1) {
            if(!val[i][j] && !val[i + 1][j]) {
                val[i][j] = ++k;
                val[i + 1][j] = k;
                pos[k].pb(make_pair(i, j));
                pos[k].pb(make_pair(i + 1, j));
                col[k] = findColor(k);
            }
        }
    }
    rep(i, 1, n) {
        rep(j, 1, m) {
            if(!val[i][j]) {
                bool found = false;
                rep(d, 0, 3) {
                    int ii = i + DX[d];
                    int jj = j + DY[d];
                    int v = val[ii][jj];
                    if(v > 0 && sz(pos[v]) < 5) {
                        pos[v].pb(make_pair(i, j));
                        val[i][j] = v;
                        col[v] = findColor(v);
                        found = true;
                    }
                }
                if(!found) {
                    cout << -1 << endl;
                    return 0;
                }
            }
        }
    }
    rep(i, 1, n) {
        rep(j, 1, m) {
            cout << (char)(val[i][j] < 0 ? '#' : '0' + col[val[i][j]]);
        }
        cout << endl;
    }
    return 0;
}
