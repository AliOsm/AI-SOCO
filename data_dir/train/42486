#include <iostream>
#include <iomanip>
#include <algorithm>
#include <vector>
#include <string>
#include <cmath>
#include <memory.h>
#include <stack>
#include <fstream>
#include <cstdio>
#include <unordered_map>
#include <map>
#include <list>
#include <queue>
#include <set>
using namespace std;

/*
*/


const int MAXV = 2000000;
const int MAXI = 100001;
int n, q;
vector<int> lst[MAXV];
vector<int> f[MAXV+1];
vector<vector<int> > tr;
int v[MAXI];
int l[MAXI];
int ans[MAXI];
void F()
{
	for (int i = 2; i < MAXV; i++)
	{
		if (f[i].empty())
		{
			for (int j = i; j <= MAXV; j+= i) f[j].push_back(i);
		}
	}
}
int top(vector<int> & V)
{
	if (V.empty()) return -1;
	return V[V.size() - 1];
}
void dfs(int i, int par , int lev)
{
	l[i] = lev;
	ans[i] = -2;
	for (int j = 0; j < f[v[i]].size(); j++)
	{
		int x = f[v[i]][j];
		if (lst[x].empty()) continue;
		if (ans[i] == -2 || l[top(lst[x])] > l[ans[i]])
		{
			ans[i] = top(lst[x]);
		}
	}

	for (int j = 0; j < f[v[i]].size(); j++)
	{
		int x = f[v[i]][j];
		lst[x].push_back(i);
	}
	for (int j = 0; j < tr[i].size(); j++)
	{
		if (tr[i][j] == par) continue;
		dfs(tr[i][j], i, lev+1);
	}
	for (int j = 0; j < f[v[i]].size(); j++)
	{
		int x = f[v[i]][j];
		lst[x].pop_back();
	}
}

int main()
{
	F();
	scanf("%d %d",&n,&q);
	tr = vector<vector<int> > (n);
	for (int i = 0; i < n; i++) cin>>v[i];
	for (int i = 0; i < n-1; i++)
	{
		int x, y;
		scanf("%d %d",&x,&y);
		x--;
		y--;
		tr[x].push_back(y);
		tr[y].push_back(x);
	}
	dfs(0, -1, 0);
	while (q--)
	{
		int Q;
		scanf(" %d",&Q);
		if (Q == 1)
		{
			int x;
			scanf(" %d",&x);
			printf("%d\n", ans[x-1]+1);
		}
		else
		{
			int x, y;
			scanf("%d %d",&x,&y);
			v[x-1] = y;
			dfs(0, -1, 0);
		}
	}
}