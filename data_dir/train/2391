#pragma GCC optimize ("Ofast")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define ll long long
#define ld long double
#define all(a) a.begin(),a.end()
#define ull unsigned long long
#define y1 asjdlfaskavslbcjasndscf
#define endl '\n'
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define iter vector< pair<int,int> >::iterator
#define iter1 multiset<int>::iterator
using namespace std;
using namespace __gnu_pbds;

template<class T>
using ordered_set=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

template<class T>
using ordered_multiset=tree<T,null_type,less_equal<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rnd1(chrono::steady_clock::now().time_since_epoch().count());

//find_by_order
//order_of_key

const int N=3e5+7;
const int inf=1e9+1e9;
const int mod=998244353;
const ld eps=1e-9;

//const int MAX_MEM=1e8;
//int mpos=0;
//char mem[MAX_MEM];
//
//inline void * operator new(size_t n){
//    char *res=mem+mpos;
//    mpos+=n;
//    assert(mpos<=MAX_MEM);
//    return (void*)res;
//}
//
//inline void operator delete(void *) {}

int a[N];
int n,k;
vector< vector<int> >ans;
int kol=0;

bool check()
{
    vector<int>c;
    for (int i=n;i>=1;--i){
        if (a[i]==0 && a[i-1]==1){
            c.pb(i-1);
            swap(a[i],a[i-1]);
            --i;
        }
    }
    kol+=(int)c.size();
    if ((int)c.size()>0){
        ans.pb(c);
        return true;
    }
    else {
        return false;
    }
}

main ()
{
    ios;
    cin>>n>>k;
    for (int i=1;i<=n;++i){
        char ch;
        cin>>ch;
        if (ch=='R')a[i]=1;
        else a[i]=0;
    }
    while(check());
    vector<int>d;
    while((int)d.size()+(int)ans.size()<k && ans.size()>0){
        vector<int>f=ans.back();
        ans.pop_back();
        if (ans.size()+d.size()+f.size()>=k){
            int x=k-((int)ans.size()+(int)d.size())-1;
            for (int j=(int)f.size()-1;j>=(int)f.size()-x;--j){
                d.pb(f[j]);
            }
            vector<int>l;
            for (int j=0;j<(int)f.size()-x;++j){
                l.pb(f[j]);
            }
            ans.pb(l);
        }
        else {
            for (int j=(int)f.size()-1;j>=0;--j){
                d.pb(f[j]);
            }
        }
    }
    reverse(all(d));
    for (int j=0;j<d.size();++j){
        vector<int>ff;
        ff.pb(d[j]);
        ans.pb(ff);
    }
    if (ans.size()!=k){
        cout<<-1<<endl;
        exit(0);
    }
    for (int i=0;i<ans.size();++i){
        cout<<ans[i].size()<<' ';
        for (int j=0;j<ans[i].size();++j){
            cout<<ans[i][j]<<' ';
        }
        cout<<endl;
    }
}
