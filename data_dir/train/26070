#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;
int n, m;
ll h[100010], p[100010];
bool ok(ll x)
{
    int k=0;
    for(int i=0;i<n;++i) {
        if (p[k]<h[i]) {
            if (h[i]-p[k]>x) return false;
            int k1=lower_bound(p, p+m, h[i]+x-2*(h[i]-p[k])+1)-p;
            int k2=lower_bound(p, p+m, (h[i]+x+p[k])/2+1)-p;
            k=max(k1, k2);
        }
        else {
            k=lower_bound(p, p+m, h[i]+x+1)-p;
        }
        if (k>=m) return true;
    }
    return k>=m;
}
int main()
{
    cin.sync_with_stdio(0);
    cin.tie(0);
    cin>>n>>m;
    for(int i=0;i<n;++i) cin>>h[i];
    for(int i=0;i<m;++i) cin>>p[i];

    ll L=0, R=1LL<<62;
    while (R-L>1) {
        ll M=(L+R)/2;
        if (ok(M))
            R=M;
        else
            L=M;
    }
    for(auto res=max(0LL, L-2);res<R+2;++res)
        if (ok(res)) { cout<<res<<endl; break; }
}
