#include <bits/stdc++.h>
#include <omp.h>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;


#define int ll
#define rand shittttty_shit
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rng_64(chrono::steady_clock::now().time_since_epoch().count());


typedef pair<int, int> pii;
typedef pair<string, string> pst;
typedef pair<pii, pii> piii;
typedef vector<piii> vpii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector< vi > vvi;
typedef vector< vvi > vvvi;
typedef vector<pii> vpi;
typedef vector<short> vs;
typedef vector<vs> vvs;
typedef vector<vvs> vvvs;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vvl> vvvl;
typedef vector<ld> vld;
typedef vector<vld> vvld;
typedef vector<vvld> vvvld;
typedef vector<string> vst;
typedef vector<vst> vvst;
typedef pair<ld, ld> pld;
typedef pair<pld, pld> pldd;
typedef vector<pld> vpd;
typedef complex<double> base;


#define inmin(a, b) a = min(a, (b))
#define inmax(a, b) a = max(a, (b))
#define my_abs(a) (((a) >= 0) ? (a) : -(a))
#define mp(a, b) make_pair(a, (b))
#define ALL(a) a.begin(),a.end()
#define RALL(a) a.rbegin(),a.rend()
#define sqr(x) ((x) * (x))
#define fori(i, n) for(int i = 0; i < int(n); ++i)
#define SZ(a) ((int)((a).size()))
#define MODIK(a) (a >= M ? a - M : a)
#define triple(T) tuple<T, T, T>
#define quad(T) tuple<T, T, T, T>
#define watch(x) cout << (#x) << " = " << x << endl;
#ifdef ART_HOME
#define cerr cout
#else
#define cerr if (false) cerr
#endif


const double PI = 2 * acos(0.0);

const string DIGITS = "0123456789";
const string ALPH = "abcdefghijklmnopqrstuvwxyz";

istream &operator >> (istream &in, pii &a)
{
    in >> a.first >> a.second;
    return in;
}


ostream &operator << (ostream &out, pii &a)
{
    out << a.first << ' ' << a.second;
    return out;
}


istream &operator >> (istream &in, pld &a)
{
    in >> a.first >> a.second;
    return in;
}


ostream &operator << (ostream &out, pld &a)
{
    out << a.first << ' ' << a.second;
    return out;
}


template <class T0, class T1>
inline ostream & operator << (ostream &out, pair<T0, T1> &a) {
    return out << "{" << a.first << ", " << a.second << "}";
}

template <class T0, class T1, class T2>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) << ", " << get<2>(a) << "}";
}

template <class T0, class T1, class T2, class T3>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2, T3> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) <<
               ", " << get<2>(a) << ", " <<  get<3>(a) << "}";
}

template<class T>
inline ostream & operator << (ostream &out, vector<T> &a) {
    out << "[";
    fori (i, a.size())
        out << a[i] << vector<string>{", ", "]  "}[i + 1 == a.size()];
    return out;
}


void print(int a, int b, int n, vi h)
{
    ofstream cout("output.txt");
    cout << SZ(h) << ' ' << a << ' ' << b << '\n';
    for (int i = 0; i < SZ(h); ++i) {
        cout << h[i]  << ' ';
    }
    cout.close();
    exit(0);
}


inline bool break_time(ld time)
{
    return clock() > CLOCKS_PER_SEC * time;
}


ld get_rand_ld(ld l, ld r)
{
    uniform_real_distribution<double> gen(l, r);
    return gen(rng);
}


bool may(int E, ld T)
{
    if (E < 0)
        return 1;

    double eps = get_rand_ld(0, 1);
    return eps < exp(-E / T);
}


void smain();

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

#ifdef ART_HOME
    freopen("input.txt", "r", stdin);
    clock_t start = clock();
#endif
    cout << setprecision(2) << fixed;
    smain();
#ifdef ART_HOME
    cout << "\nTOTAL EXECUTION TIME: " << float( clock () - start ) /  CLOCKS_PER_SEC << endl;
#endif
}


const int N = 1e3, B = 50, oo = 1e18 + 100, M = 998244353, LOG = 25;
const int M1 = 1000000093, x1 = 27162;
const int M2 = 1000000087, x2 = 241;
const ld pi = atan2(1, 0) * 2;


int fact[N];


int MOD(int v)
{
    return v % M;
}


int bin_pow(int v, int pw)
{
    int res = 1;
    while (pw)
    {
        if (pw & 1)
            res = MOD(res * v);

        v = MOD(v * v);
        pw >>= 1;
    }

    return res;
}


int inv(int v)
{
    return bin_pow(v, M - 2);
}


map<int, map<int, int>> flexx;
map<int, int> used;


int stupid(int n)
{
    if (n == 1)
        return 1;


    if (n == 241477513200)
    {
        n = 241477513200;
    }

    int d = 2;
    int val = 0;
    int ans = 1;
    while (d * d <= n) {
        int cur = 0;
        while (n % d == 0)
        {
            n /= d;
            cur++;
        }

        ans = MOD(ans * inv(fact[cur]));
        val += cur;
        d++;
    }

    if (n != 1)
        val++;

    ans = MOD(ans * fact[val]);
    return ans;
}


int flex(int n)
{

    if (n == 1)
        return 1;


    int ans = 1;
    int val = 0;
    for (auto p : flexx[n])
    {
        ans = MOD(ans * inv(fact[p.second]));
        val += p.second;
    }

    ans = MOD(ans * fact[val]);
    return ans;
}


void smain()
{
    int n, q;
    cin >> n >> q;

    vi div;
    for (int d = 1; d * d <= n; ++d)
    {
        if (n % d == 0)
        {
            div.push_back(d);

            if (n / d != d)
                div.push_back(n / d);
        }
    }

    vi fac;
    int d = 2;

    int NN = n;
    while (d * d <= n) {
        int cur = 0;
        int label = 0;
        while (n % d == 0)
        {
            n /= d;
            label = 1;
        }

        if (label)
            fac.push_back(d);

        d++;
    }

    if (n != 1)
        fac.push_back(n);

    stable_sort(ALL(div));
    stable_sort(ALL(fac));

    for (int v : div)
    {
        for (int u : fac)
        {
            if (used.count(v * u))
                continue;

            if ((NN / v) % u == 0)
            {
                used[v * u] = 1;
                flexx[v * u] = flexx[v];
                flexx[v * u][u]++;
            }
        }
    }

    fact[0] = 1;
    for (int i = 1; i < N; ++i)
        fact[i] = MOD(fact[i - 1] * i);

    for (int i = 0; i < q; ++i) {
        int a, b;
        cin >> a >> b;


        int g = __gcd(a, b);
        a /= g, b /= g;
        cout << MOD(flex(a) * flex(b)) << '\n';
    }
}
