#include <functional>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <numeric>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cassert>
#include <vector>
#include <math.h>
#include <queue>
#include <stack>
#include <ctime>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef long double ld;

template <typename T>
T nextInt() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;
}

const int maxN = (int)1e5 + 10;
const int INF = (int)1e9;
const int mod = (int)1e9 + 7;
const ll LLINF = (ll)1e18;

int n, k;
char s[maxN];

int sum[maxN];
int fact[maxN];
int inv[maxN];
int pw10[maxN];

int mul(int x, int y) {
    return (1LL * x * y) % mod;
}

int binomial(int n, int k) {
    if (n < 0 || k < 0 || n < k) return 0;
    return mul(fact[n], mul(inv[k], inv[n - k]));
}

int main() {

    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    inv[0] = fact[0] = inv[1] = fact[1] = 1;
    for (int i = 2; i < maxN; ++i) {
        fact[i] = mul(fact[i - 1], i);
        inv[i] = mul(inv[mod % i], mod - mod / i);
    }
    for (int i = 1; i < maxN; ++i) {
        inv[i] = mul(inv[i - 1], inv[i]);
    }

    cin >> n >> k;
    cin >> s;
    pw10[0] = 1;
    for (int i = 0; i < n; ++i) {
        sum[i] = mul(binomial(n - i - 2, k - 1), pw10[i]);
        if (i > 0) {
            sum[i] += sum[i - 1];
            if (sum[i] >= mod) sum[i] -= mod;
        }
        pw10[i + 1] = mul(pw10[i], 10);
    }

    int result = 0;
    for (int i = 0; i < n; ++i) {
        int L = i;
        int R = n - i - 1;
        int digit = s[i] - '0';
        if (R > 0) {
            result += mul(digit, sum[R - 1]);
            if (result >= mod) result -= mod;
        }
        result += mul(digit, mul(pw10[R], binomial(L, k)));
        if (result >= mod) result -= mod;
    }
    printf("%d\n", result);
    return 0;
}
