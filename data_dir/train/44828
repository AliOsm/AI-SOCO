#include<bits/stdc++.h>
using namespace std;
typedef long long int uli;
const int mx=200+10;
int a[mx];
char s[mx];
int g[mx][27];
uli cnt[mx];
int f[mx];
int ns=1;
void add(uli v){
   int n=strlen(s);
   int u=0;
   for(int i=0;i<n;i++){
      int ch=s[i]-'a';
      if(g[u][ch]==-1)g[u][ch]=ns++;
      u=g[u][ch];
   }
   cnt[u]+=v;
}
int msz;
struct mtr{
   uli d[mx][mx];
   mtr(){ memset(d,-1,sizeof d); }
   void eye(){ for(int i=0;i<msz;i++)d[i][i]=0; }
   mtr operator *(mtr a){
      mtr ans;
      for(int i=0;i<msz;i++)
         for(int j=0;j<msz;j++)
            for(int k=0;k<msz;k++)
               if(d[i][k]!=-1 && a.d[k][j]!=-1)
                  ans.d[i][j]=max(ans.d[i][j],d[i][k]+a.d[k][j]);
      return ans;
   }
};
mtr mexp(mtr b,uli e){
   mtr a;
   a.eye();
   for(;e!=0;b=b*b,e>>=1)
      if(e&1ll)a=a*b;
   return a;
}
int main(){
   int n,u,v;
   uli l;
   scanf("%d %lld",&n,&l);
   for(int i=0;i<n;i++)scanf("%d",a+i);
   memset(g,-1,sizeof g);
   for(int i=0;i<n;i++){
      scanf("%s",s);
      add(a[i]);
   }
   queue<int>q;
   for(int i=0;i<26;i++){
      if(g[0][i]==-1)g[0][i]=0;
      else q.push(g[0][i]);
   }
   while(!q.empty()){
      u=q.front();
      q.pop();
      for(int i=0;i<26;i++)if(g[u][i]!=-1 && g[u][i]!=u){
         v=g[u][i];
         int fv=f[u];
         while(g[fv][i]==-1)fv=f[fv];
         f[v]=fv=g[fv][i];
         cnt[v]+=cnt[fv];
         q.push(v); 
      }
   }
   msz=ns;
   mtr b;
   for(u=0;u<ns;u++){
      for(int i=0;i<26;i++){
         v=u;
         while(g[v][i]==-1)v=f[v];
         v=g[v][i];
         b.d[v][u]=cnt[v];
      }
   }
   mtr a;
   for(u=0;u<ns;u++)a.d[0][u]=0;
   mtr ans=a*mexp(b,l);
   printf("%lld\n",ans.d[0][0]);
   return 0;
}
