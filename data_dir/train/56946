#include <bits/stdc++.h>
using namespace std;

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<ll,ll> pii;
typedef pair<pii, ll> para;
const ll inf = 1e9 + 7;
const ll maxN = 1e5 + 5;
//const ll MOD = 998244353;

ll n, m, arr[maxN], cost[maxN], allCost;
vector<ll> vec[maxN];

ll median(vector<ll> vec) {
	int l = sz(vec);
	if (l % 2 == 0) {
		return (vec[l / 2 - 1] + vec[l / 2]) / 2;
	}
	return vec[l / 2];
}

ll costVec(vector<ll> vec, ll val) {
	ll sum = 0;
	for (auto x: vec) {
		sum += abs(x - val);
	}
	return sum;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin >> n >> m;
	REP(i, m) cin >> arr[i];
	RI(i, m - 1) {
		ll diff = abs(arr[i] - arr[i - 1]);
		cost[arr[i - 1]] += diff;
		cost[arr[i]] += diff;
		allCost += abs(arr[i] - arr[i - 1]);
		if (arr[i] != arr[i - 1]) {
			vec[arr[i]].pb(arr[i - 1]);
			vec[arr[i - 1]].pb(arr[i]);
		}
	}
	ll ans = allCost;
	RI(i, n) {
		sort(vec[i].begin(), vec[i].end());
		if (!vec[i].empty()) {
			ll x = costVec(vec[i], median(vec[i]));
			ans = min(ans, allCost - (cost[i] - x));
		}
	}
	cout << ans << endl;
	return 0;
}
