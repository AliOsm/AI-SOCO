#include <bits/stdc++.h>
#define int long long 
using namespace std;

const int MAXN = 101 * 1001 ;

vector < int > a [ MAXN ]  , q ; 


inline bool check(int x)
{
    while(x)
    {
        if(x%10!=4&&x%10!=7)
            return 0 ;
        x /= 10 ;
    }
    return 1 ; 
}

int mark [ MAXN ] = {} , c = 0 ;

int used [ MAXN ] = {} , dp [ MAXN ] = {} ; 


void dfs(int u )
{
    c++;
    mark[u] = 1 ; 
    for(auto v : a[u])
    {
        if(mark[v])
            continue ; 
        dfs(v);
    }
}

main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    int n,m,x,y;
    cin>>n>>m;
    for(int i = 0 ; i < m;i++)
    {
        cin>>x>>y;
        a[x].push_back(y);
        a[y].push_back(x);
    }
    for(int i = 1 ; i <= n ; i ++)
    {
        if(!mark[i])
        {
            c=0;
            dfs(i);
            if(used[c]==0)
                q.push_back(c);
            used[c]++;
        }
    }
    fill(dp,dp+MAXN,1e12);
    sort(q.begin(),q.end());
    m = q.size() ; 
    dp[0]=0;
    for(int i = 0 ; i < m ; i ++)
    {
        int j = 0 ;
        while((1<<j)<=used[q[i]])
        {
            int x = (1<<j) * q[i] ;
            for(int k = n ; k >= x ; k --)
                dp[k] = min(dp[k] , dp[k-x] + x/q[i]);
            used[q[i]]-=1<<j;
            j++;
        }
        for(int j = n ; j >= used[q[i]] * q[i] ; j --)
                dp[j] = min(dp[j] , dp[j-(used[q[i]])*q[i]] + used[q[i]]);
    }
    int ans = 1e12 ;
    for(int i = 4 ; i <= n ; i ++)
        if(check(i))
            ans = min(ans,dp[i]);
    cout << (ans > n ? -1 : ans - 1);
   
}