//bismillahir rahmanir rahim            //Author:Fayed Anik
 
#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
 
using namespace std;
//using namespace __gnu_pbds;
 
/*
template <typename T>  using ordered_set =
    tree<T, null_type, less<T>,   /// greater<T> for sorting decreasingly
    rb_tree_tag, tree_order_statistics_node_update>;
*/

#define         ll                          long  long
#define         lf                          double
#define         pb(x)                       push_back(x)
#define         ull                         unsigned long long
#define         sfl(a)                      scanf("%lld",&a)
#define         sf(a)                       scanf("%d",&a)
#define         pf(a)                       printf("%d\n",a)
#define         pfl(a)                      printf("%lld\n",a)
#define         FOR(x,n)                    for(ll x=1;x<=n;++x)
#define         pii                         pair< ll , ll >
#define         mp(a,b)                     make_pair(a,b)
#define         mod                         1000000007
#define         INF                         2e18
#define         f1                          first
#define         f2                          second
#define         all(v)                      v.begin(),v.end()
#define         PI                          acos(-1)
#define         printminusone               printf("-1\n")
#define         bug                         printf("bug")
#define         FILEIN                      freopen("in.txt","r",stdin)
#define         FILEOUT                     freopen("out.txt","w",stdout)
 
//ll SET(ll mask,ll pos){ return mask = (mask | (1ll<<pos)); }
//ll RESET(ll mask,ll pos){ return mask = mask & ~(1ll<<pos); }
//bool CHECK(ll mask,ll pos) { return (bool) (mask & (1ll<<pos)); }
//priority_queue <ll, vector<ll>, greater<ll> > pq;
#define lim 200005

ll a[lim],b[lim],c[lim];

vector<ll>node[4*lim];

void build(ll nd,ll b,ll e){
    if(b==e){
        node[nd].pb(c[b]);
        return;
    }
    ll mid=(b+e)/2;
    build(2*nd,b,mid);
    build(2*nd+1,mid+1,e);
    merge(node[2*nd].begin(), node[2*nd].end(), 
          node[2*nd+1].begin(), node[2*nd+1].end(), 
          back_inserter(node[nd]));
}

ll query(ll nd,ll b,ll e,ll i,ll j,ll val){
    if(i>e or j<b){
        return 0;
    }
    if(b>=i and e<=j){
        return lower_bound(node[nd].begin(),node[nd].end(),val)-node[nd].begin();
    }
    ll mid=(b+e)/2;
    return query(2*nd,b,mid,i,j,val)+query(2*nd+1,mid+1,e,i,j,val);
}



int main(){
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    ll n;
    sfl(n);
    FOR(i,n){
        sfl(a[i]);
    }
    FOR(i,n){
        sfl(b[i]);
        c[i]=b[i]-a[i];
    }

    build(1,1,n);

    ll ans=0,val;

    for(ll i=1;i<=n;i++){
        val = a[i]-b[i];
        ans += query(1,1,n,i+1,n,val);
    }
    pfl(ans);
    return 0;
}