//marico el que lo lea
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <stdlib.h>
#include <assert.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> ii;

void fastIO() {std::ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);}

#define pb push_back
#define all(obj) obj.begin(), obj.end()
#define ms(obj, val) memset(obj, val, sizeof(obj))
#define ms2(obj, val, sz) memset(obj, val, sizeof(obj[0])*sz)

#define fst first
#define snd second

template<typename T, typename U> inline void mnze(T &x, U y) {if(y < x) x = y;}
template<typename T, typename U> inline void mxze(T &x, U y) {if(x < y) x = y;}

void _scan( int &x ) { scanf("%d",&x); }
void _scan( long long &x ) { scanf("%lld",&x); }
void _scan( double &x ) { scanf("%lf",&x); }
void _scan( char &x ) { scanf(" %c",&x); }
void _scan( char *x ) { scanf("%s",x); }
template<typename T>
void _scan( vector<T> &v ){
	for(int i=0; i<(int)v.size(); i++) _scan(v[i]);
}
void scan() {}
template<typename T, typename... U>
void scan( T& head, U&... tail ) { _scan(head); scan(tail...);}

template<typename T> void _dbg(const char* sdbg, T h)
	{ cerr<<sdbg<<"="<<h<<"\n"; }
template<typename T, typename... U> void _dbg(const char* sdbg, T h, U... t) {
	while(*sdbg != ',')cerr<<*sdbg++;
	cerr<<"="<<h<<","; _dbg(sdbg+1, t...);
}

#ifdef LOCAL
#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)
#define debugv(x) {{cerr<<#x<<" = "; for(auto _i:x) cerr<<_i<<", ";cerr<<"\n";}}
#define debuga(x, sz) {{cerr<<#x<<" = ";for(int _i=0;_i<sz;_i++)cerr<<x[_i]<<", ";cerr<<"\n";}}
#else
#define debug(...) (__VA_ARGS__)
#define debugv(x)
#define debuga(x, sz)
#define cerr if(0)cout
#endif

ll MOD = 1e9+7;

inline ll Msum(ll x){return x;}
template<typename... Rest>
inline ll Msum(ll x, Rest... rest){ return (x + Msum(rest...)) % MOD; }

inline ll Mprod(ll x){return x;}
template<typename... Rest>
inline ll Mprod(ll x, Rest... rest){ return x * Mprod(rest...) % MOD; }

inline ll Mnorm(ll x){ return (x%MOD + MOD) %MOD; }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

const int MAXN = 1e3+3;
const int MAXK = 43;


int R, C, k;
int a[MAXN][MAXN];

int q;

int d[MAXK][MAXN][MAXN];
int dd[MAXK][MAXK];

bool valid(int r, int c){return r<R && c<C && r>-1 && c>-1;}
int dr[] = {1, -1, 0, 0},
	dc[] = {0, 0, 1, -1};

void bfs(int col, int d[MAXN][MAXN]){
	queue<ii> q;
	for(int r=0; r<R; r++) for(int c=0; c<C; c++) if(a[r][c] == col){
		q.push({r, c});
		d[r][c] = 0;
	}
	while(!q.empty()){
		auto [r, c] = q.front(); q.pop();
		for(int m=0; m<4; m++){
			int nr=r+dr[m], nc=c+dc[m];
			if(!valid(nr, nc)) continue;
			if(d[r][c]+1 < d[nr][nc]){
				d[nr][nc] = d[r][c]+1;
				q.push({nr, nc});
			}
		}
	}
}

int main(){
	scan(R, C, k);
	for(int r=0; r<R; r++) for(int c=0; c<C; c++){
		scan(a[r][c]);
		a[r][c]--;
	}
	//ms(d, 0x3f);
	for(int i=0; i<k; i++)
		for(int r=0; r<R; r++) for(int c=0; c<C; c++) d[i][r][c] = 30000000;
	for(int i=0; i<k; i++) bfs(i, d[i]);
	for(int col1=0; col1<k; col1++) for(int col2=0; col2<k; col2++) dd[col1][col2] = 300000000;
	//ms(dd, 0x3f);
	for(int i=0; i<k; i++) dd[i][i] = 0;
	for(int r=0; r<R; r++) for(int c=0; c<C; c++){
		int col1=a[r][c];
		for(int col2=0; col2<k; col2++){
			mnze(dd[col1][col2], d[col2][r][c]+1);
			mnze(dd[col2][col1], d[col2][r][c]+1);
		}
	}
	for(int kk=0; kk<k; kk++)
		for(int i=0; i<k; i++) for(int j=0; j<k; j++)
			mnze(dd[i][j], dd[i][kk] + dd[kk][j]);
	scan(q);
	for(int i=0; i<q; i++){
		int r1, c1, r2, c2; scan(r1, c1, r2, c2); r1--; c1--; r2--; c2--;
		int ans=abs(r1-r2)+abs(c1-c2);
		for(int col1=0; col1<k; col1++) for(int col2=0; col2<k; col2++){
			mnze(ans, dd[col1][col2] + d[col1][r1][c1]+1 + d[col2][r2][c2]);
		}
		printf("%d\n", ans);
	}
}
