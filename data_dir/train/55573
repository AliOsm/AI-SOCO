#include <cstdio>
#include <iostream>
#include <algorithm>

using namespace std;

const int MAXN = 128;
const long long MOD = 1000000007LL;

long long c[MAXN][MAXN], dp[MAXN][MAXN * MAXN];

long long powMod(long long a, long long b) {
  if (b == 0) {
    return 1;
  } else if (b % 2 != 0) {
    return powMod(a, b - 1) * a % MOD;
  } else {
    long long c = powMod(a, b / 2);
    return c * c % MOD;
  }
}

void init() {
  for (int i = 0; i < MAXN; ++i) {
    c[i][0] = 1;
    for (int j = 1; j <= i; ++j) {
      c[i][j] = c[i - 1][j - 1] + c[i - 1][j];
      if (c[i][j] >= MOD) {
        c[i][j] -= MOD;
      }
    }
  }
}

void add(long long& a, long long b) {
  a = (a + b) % MOD;
}

int main() {
  int n, m;
  long long q;

  cin >> n >> q >> m;
  init();
  dp[0][0] = 1;
  for (int i = 0; i < n; ++i) {
    long long t = (q - i + n - 1) / n;
    vector<long long> pm;
    for (int j = 0; j <= n; ++j) {
      pm.push_back(powMod(c[n][j], t));
    }
    for (int j = 0; j <= m; ++j) {
      if (j + (n - i) * n < m || dp[i][j] == 0) {
        continue;
      }
      for (int k = j; k <= m && k - j <= n; ++k) {
        add(dp[i + 1][k], dp[i][j] * pm[k - j]);
      }
    }
  }
  cout << dp[n][m] << endl;

  return 0;
}

