#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;

#define endl '\n'
#define ff first
#define ss second
#define int long long
#define pb push_back
#define f(i,l,r) for(ll i=l;i<=r;i++)
#define rf(i,r,l) for(ll i=r;i>=l;i--)
#define Max 5000001
#define inf 2147483647
#define llinf 9223372036854775807
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcountll(n)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)

#define d0(a) cout<<a<<' ';
#define d1(a) cout<<a<<endl;
#define d2(a,b) cout<<a<<' '<<b<<endl;
#define d3(a,b,c) cout<<a<<' '<<b<<' '<<c<<endl;
#define d4(a,b,c,d) cout<<a<<' '<<b<<' '<<c<<' '<<d<<endl;
#define d5(a,b,c,d,e) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<endl;
#define d6(a,b,c,d,e,f) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<' '<<f<<endl;

const ll N=4e5+5,mod=1e9+7,bit=61;

const ll lg=log2(N)+1;

ll pw[lg],sum[N][lg],bigger[N][lg],weight[N];

signed main()
{
    fast;

    pw[0]=1;
    f(i,1,lg-1)
    {
        pw[i]=(pw[i-1]<<1);
    }
    ll t=1;

    //cin>>t;
    while(t--)
    {
        memset(sum,0,sizeof(sum));
        memset(bigger,0,sizeof(bigger));
        f(i,0,lg-1)  // We can't go above root
        {
            sum[1][i]=2e15;
        }
        ll ver=1,R,X,W;
        weight[0]=2e15;
        ll q;
        cin>>q;
        ll last=0;
        while(q--)
        {
            ll tp,p,q;
            cin>>tp>>p>>q;
            if(tp==1)
            {
                R=p^last;
                W=q^last;
                ver++;
                weight[ver]=W;
                if(weight[R]>=weight[ver])  // we found next vertex having weight >=
                {
                    bigger[ver][0]=R;
                }
                else  // find smallest index such that weight[x] >= W
                {
                    int beg=R;
                    rf(i,lg-1,0)
                    {
                        // always between one index >= and current index <
                        if(weight[bigger[beg][i]]<weight[ver])
                        {
                            beg=bigger[beg][i];
                        }
                    }
                    bigger[ver][0]=bigger[beg][0];
                }
                sum[ver][0]=weight[bigger[ver][0]];
                f(i,1,lg-1)  // trivial
                {
                    bigger[ver][i]=bigger[bigger[ver][i-1]][i-1];
                    sum[ver][i]=sum[ver][i-1]+sum[bigger[ver][i-1]][i-1];
                }
            }
            else
            {
                R=p^last;
                X=q^last;
                if(weight[R]>X)
                {
                    last=0;
                    cout<<last<<endl;
                    continue;
                }
                X-=weight[R];
                last=1;
                rf(i,lg-1,0)
                {
                    if(sum[R][i]<=X)  // go to that ancestor and process the same query
                    {
                        X-=sum[R][i];
                        last+=(pw[i]);
                        R=bigger[R][i];
                    }
                }
                cout<<last<<endl;
            }
        }
    }
    return 0;
}
















