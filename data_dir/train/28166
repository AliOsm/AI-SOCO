#include<bits/stdc++.h>
using namespace std;

# define C continue;
# define R return

# define D double
# define I insert
# define ll long long
# define ld long double

# define ull unsigned long long
# define ui unsigned int

# define pb push_back
# define pf push_front

# define vi vector < int >
# define vc vector < char >
# define vs vector < string >
# define vb vector < bool >
# define vd vector < D >
# define vll vector < ll >
# define vull vector < ull >
# define vld vector < ld >
# define PQ priority_queue

# define vvi vector < vector < int > >
# define vvb vector < vector < bool > >
# define vvc vector < vector < char > >
# define vvll vector < vector < ll > >
# define vvd vector < vector < D > >
# define vvld vector < vector < ld > >

# define all(v) (v).begin() , (v).end()
# define allrev(v) (v).rbegin() , (v).rend()
# define allcomp(v) v.begin() , v.end() , comp
# define allrevcomp(v) v.rbegin() , v.rend() , comp

# define pii pair < int , int >
# define pll pair < ll , ll >
# define pld pair < ld , ld >
# define pDD pair < D , D >

# define vpld vector < pld >
# define vpii vector < pii >
# define vpll vector < pll >
# define vpDD vector < pDD >

# define vvpii vector < vector < pii > >
# define F first
# define S second
# define mp make_pair

# define dist(a,b,p,q) sqrt((p-a)*(p-a) + (q-b)*(q-b))

# define pp(n) printf("%.10Lf",n);
# define line cout<<"\n";
# define fast ios_base::sync_with_stdio(false) ; cin.tie(0) ; cout.tie(0);

string vow = "aeiou";
int month[] = {-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

const int dxhorse[] = {-2, -2, -1, -1, 1, 1, 2, 2};
const int dyhorse[] = {1, -1, 2, -2, 2, -2, 1, -1};

const int dx[] = { -1 , 0 , 0 , 1 } ;
const int dy[] = { 0 , -1 , 1 , 0 } ;

const ld pie = 3.14159265358979 ;
const ll mod = 1e9 + 7 ;

// Tip : ceil ( a/b ) = 1 + floor( (a-1)/b ) !

int n , m , k , w ;
vector < vs > v ;

const int N = 1e3 + 2 ;
vi g[N] ;

vi parent ( N , -1 ) ;

void read()
{
    cin >> n >> m >> k >> w ;

    v.resize ( k + 1 ) ;
    for ( int i=1 ; i < k + 1 ; i ++ )
    {
        v[i].resize ( n ) ;
        for ( int j=0 ; j < n ; j ++ )
            cin >> v[i][j] ;
    }
}

int diff ( const vs &a , const vs &b )
{
    int d = 0 ;
    for ( int i=0 ; i < n ; i ++ )
    {
        for ( int j=0 ; j < m ; j ++ )
        {
            if ( a[i][j] != b[i][j] )
                d ++ ;
        }
    }

    return d ;
}

# define new_type pair < int , pii >
vector < new_type > ed ;

void find_edges()
{
    for ( int i=1 ; i < k + 1 ; i ++ )
    {
        ed.pb ( { m*n , {i,0} } ) ;
    }

    for ( int i=1 ; i < k + 1 ; i ++ )
    {
        for ( int j = 1 ; j < k + 1 ; j ++ )
        {
            if ( i == j ) C ;
            int cost = diff ( v[i] , v[j] ) ;

            ed.pb ( { cost*w , { i , j } } ) ;
        }
    }
}

int ans = 0 ;

int find_parent ( int node )
{
    if ( parent[node] < 0 )
        return node ;

    return parent[node] = find_parent ( parent[node] ) ;
}

void join ( new_type temp )
{
    int w = temp.F ;
    int a = temp.S.F , b = temp.S.S ;

    int p1 = find_parent ( a ) ;
    int p2 = find_parent ( b ) ;

    if ( p1 == p2 )
        return ;

    ans += w ;

    g[a].pb ( b ) ;
    g[b].pb ( a ) ;

    if ( parent[p1] > parent[p2] )
        swap ( p1 , p2 ) ;

    parent[p1] += parent[p2] ;
    parent[p2] = p1 ;
}

bool vis[N] ;

void dfs ( int node )
{
    vis[node] = 1 ;

    for ( auto i : g[node] )
    {
        if ( vis[i] ) C ;
        cout << i << " " << node ; line

        dfs ( i ) ;
    }
}

void solve ( int test_case )
{
    read() ;
    find_edges() ;

    sort ( all ( ed ) ) ;
    for ( auto i : ed )
        join ( i ) ;

    cout << ans ; line
    dfs ( 0 ) ;
}

int main()
{fast
    int t = 1;
    // cin >> t;

    for ( int i=0 ; i < t ; i++ ) solve(i);
    return 0;
}
