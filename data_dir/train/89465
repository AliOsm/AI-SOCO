#include <iostream>
#include <set>
#include <map>
#include <vector>
#include <utility>
#include <algorithm>
#include <limits.h>
using namespace std;
typedef long long int ll;
typedef vector<int> vint;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef tuple<ll, ll, ll> tt;


const int maxn = 100 + 5;

int l[maxn];
int r[maxn];
bool used[maxn];
vint ls, rs;

void dfs(int v) {
    if (v < 0)
        return;
    if (used[v])
        return;
    used[v] = true;

    if (l[v] == -1 && r[v] == -1) {
        ls.push_back(v);
        rs.push_back(v);
    } else if (l[v] == -1 && r[v] != -1) {
        ls.push_back(v);
    } else if (l[v] != -1 && r[v] == -1) {
        rs.push_back(v);
    }

    dfs(l[v]);
    dfs(r[v]);
}

int main() {
    int n;
    cin >> n;
    vector<int> lft, rgt;
    vector<pii> res;
    for (int i = 0; i < n; i++) {
        int a, b;
        cin >> a >> b;
        res.push_back({a, b});
        l[i] = a - 1; r[i] = b - 1;
    }
    for (int i = 0; i < n; i++)
        dfs(i);
    for (int i = 0; i + 1 < ls.size(); i++) {
        r[rs[i]] = ls[i + 1];
        l[ls[i + 1]] = rs[i];
    }
    for (int i = 0; i < ls.size(); i++)
        cerr << ls[i] << " --- " << rs[i] << endl;
    for (int i = 0; i < n; i++)
        cout << l[i] + 1 << " " << r[i] + 1 << endl;
}
