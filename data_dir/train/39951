#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 2e5 + 10;
int n;

int a[N];
int p[N];
int bit[N];

string t;

int ans = 0;
int cnt = 1;

vec <int> sml;

void update(int i, int x) {
    i = N - i - 1;
    for(; i < N; i += lsb(i)) {
        bit[i] = min(bit[i], x);
    }
}

int query(int i) {
    i = N - i - 1;
    int res = inf;
    for(; i; i -= lsb(i)) {
        res = min(res, bit[i]);
    }
    return res;
}

void input() {
    cin >> t;
    n = len(t);
    for(int i = 0; i < n; ++i) {
        if(t[i] < 'a') {
            t[i] += 'a' - 'A';
        }
        if(t[i] == 'a' || t[i] == 'e' || t[i] == 'i' || t[i] == 'o' || t[i] == 'u') {
            a[i + 1] = 1;
        } else {
            a[i + 1] = -2;
        }
    }
}

void solve() {
    fill(bit, bit + N, inf);
    for(int i = 1; i <= n; ++i) {
        p[i] = p[i - 1] + a[i];
        sml.pb(p[i]);
    }
    sml.pb(0); sort(all(sml));
    sml.erase(unique(all(sml)), sml.end());
    for(int i = 1; i <= n; ++i) {
        p[i] = lb(all(sml), p[i]) - sml.begin();
    }
    update(lb(all(sml), 0) - sml.begin(), 0);
    for(int i = 1; i <= n; ++i) {
        int res = i - query(p[i]);
        if(res > ans) {
            ans = res;
            cnt = 1;
        } else if(res == ans) {
            cnt++;
        }
        update(p[i], i);
    }
    if(!ans) {
        cout << "No solution\n";
    } else {
        cout << ans << " " << cnt << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
