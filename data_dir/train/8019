#include <bits/stdc++.h>

#define SZ(x) ((int(x.size())))

typedef long long ll;

using namespace std;

const int maxn = 200*1000+10, maxl = 19, INF = 1*1000*1000*1000+10;
int n, m, a[maxn], b[maxn], c[maxn], l[maxn], r[maxn], X, cmx = -1, amx = -1;
pair <int, int> tmp, fen[3][maxn];
vector <pair <int, pair <int, int> > > vec;
vector <int> v[3];
ll ans = 0, can;

void add (int ind)
{
	for (X++; X < maxn; X += X & -X)
		fen[ind][X] = max (fen[ind][X], tmp);
}

pair <int, int> get (int ind)
{
	pair <int, int> ret = {-1, -1};
	for (; X; X -= X & -X)
		ret = max (ret, fen[ind][X]);
	return ret;
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	scanf ("%d %d", &n, &m);
	for (int i = 0; i < n; i++)
	{
		scanf ("%d %d", &l[i], &r[i]);
		v[0].push_back (l[i]);
		v[1].push_back (INF - r[i]);
	}
	sort (v[0].begin(), v[0].end());
	v[0].resize (unique (v[0].begin(), v[0].end()) - v[0].begin());
	sort (v[1].begin(), v[1].end());
	v[1].resize (unique (v[1].begin(), v[1].end()) - v[1].begin());
	for (int i = 0; i < n; i++)
	{
		X = lower_bound (v[0].begin(), v[0].end(), l[i]) - v[0].begin();
		tmp = {r[i], i};
		add (0);
		X = lower_bound (v[1].begin(), v[1].end(), INF - r[i]) - v[1].begin();
		tmp = {INF - l[i], i};
		add (1);
		vec.push_back ({r[i], {0, i}});
	}
	for (int i = 0; i < m; i++)
	{
		scanf ("%d %d %d", &a[i], &b[i], &c[i]);
		vec.push_back ({b[i], {1, i}});
		X = upper_bound (v[0].begin(), v[0].end(), a[i]) - v[0].begin();
		tmp = get (0);
		can = (ll)c[i] * (min (b[i], tmp.first) - a[i]);
		if (can > ans)
		{
			ans = can;
			cmx = i + 1;
			amx = tmp.second + 1;
		}
		X = upper_bound (v[1].begin(), v[1].end(), INF - b[i]) - v[1].begin();
		tmp = get (1);
		can = (ll)c[i] * (min (INF - a[i], tmp.first) - (INF - b[i]));
		if (can > ans)
		{
			ans = can;
			cmx = i + 1;
			amx = tmp.second + 1;
		}
	}
	sort (vec.begin(), vec.end());
	for (int i = 0; i < SZ(vec); i++)
	{
		if (vec[i].second.first == 0)
			v[2].push_back (INF - l[vec[i].second.second]);
	}
	sort (v[2].begin(), v[2].end());
	v[2].resize (unique (v[2].begin(), v[2].end()) - v[2].begin());
	for (int i = 0; i < SZ(vec); i++)
	{
		if (vec[i].second.first == 0)
		{
			X = lower_bound (v[2].begin(), v[2].end(), INF - l[vec[i].second.second]) - v[2].begin();
			tmp = {vec[i].first - l[vec[i].second.second], vec[i].second.second};
			add (2);
		}
		else
		{
			X = upper_bound (v[2].begin(), v[2].end(), INF - a[vec[i].second.second]) - v[2].begin();
			tmp = get (2);
			can = (ll)c[vec[i].second.second] * tmp.first;
			if (can > ans)
			{
				ans = can;
				cmx = vec[i].second.second + 1;
				amx = tmp.second + 1;
			}
		}
	}
	printf ("%lld\n", ans);
	if (ans > 0)
		printf ("%d %d", amx, cmx);
	return 0;
}
