
#include<vector>
#include<iostream>
#include <bits/stdc++.h>

using namespace std;

#define ll long long int;

const int nax = 100000 + 10;

vector<int> graph[nax];
int n;
int degree[nax], dist[nax];
vector<int> leaves;
int leaf[nax];

void dfs(int v, int p) {
    dist[v] = dist[p] + 1;
    for(auto x: graph[v]) {
        if(x == p) continue;
        dfs(x, v);
    }
}
int countertotal;

void dfs2(int u, int p){
    
    int c = 0;
    for(int v : graph[u]){
        
        if(v != p){
            if(leaf[v]){
                c++;
            }
        }
    }
    if(c > 0) countertotal += c - 1;
    for(int v : graph[u]){
        if(v == p) continue;
        dfs2(v, u);
    }
}

int main() {
    
    cin >> n;
    for(int i = 1; i <= n - 1; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
        degree[u]++;
        degree[v]++;
    }
    
    int startrt = 1;
    
    for(int i = 1; i <= n; i++) {
        if(degree[i] > 1) {
            startrt = i;
            break;
        }
    }
    dist[startrt] = 1;
    dfs(startrt, -1);

    for(int i = 1; i <= n; i++) {
        if(degree[i] == 1) {
            leaf[i] = 1;
            leaves.push_back(i);
        }
    }
    
    int odd = 0, even = 0;
    
    for(auto x: leaves) {
        
        if(dist[x] % 2) odd++;
        else even++;
    }
    
    int possmin = 1;
    
    if(odd > 0 && even > 0 ) {
        possmin = 3;
    }
    
    int possmax = n - 1;
    countertotal = 0;
    dfs2(startrt , -1);
    possmax -= countertotal;
    
    cout << possmin << " " << possmax << endl;
    return 0;
}
