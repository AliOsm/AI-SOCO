/** 
 * Dont raise your voice, improve your argument.
 * --Desmond Tutu
 *
 * AND WATCH OUT FOR OFF BY ONE!!!
 */

#include <bits/stdc++.h>
const bool unsyncedio=std::ios::sync_with_stdio(false);
using namespace std;
typedef unsigned int uint;
typedef long long ll;

#define fori(n) for(ll i=0; i<(n); i++)
#define forn(i, n) for(ll (i)=0; (i)<(n); (i)++)

class DSU {
public:
    vector<int> p;
    /* initializes each (0..size-1) to single set */
    DSU(int size) {
        p.resize(size);
        for(int i=0; i<size; i++)
            p[i]=i;
    }

    /* finds set representative for member v */
    int find_set(int v) {
        if (v == p[v])
            return v;
        return p[v] = find_set(p[v]);
    }

    /* makes v a single set, removes it from other set if contained there. */
    void make_set(int v) {
        p[v] = v;
    }

    /* combines the sets of two members. */
    void union_sets(int a, int b) {
        a = find_set(a);
        b = find_set(b);
        if (a != b)
            p[b] = a;
    }
};

int main() {
int n, m;
    cin>>n>>m;

    DSU dsu(n+1);
    for(int i=0; i<m; i++) {
        int k;
        cin>>k;
        int group=-1;
        for(int j=0; j<k; j++) {
            int user;
            cin>>user;
            if(group==-1)
                group=dsu.find_set(user);
            else
                dsu.union_sets(group, user);
        }
    }

    vector<int> f(n+1, 0);

    for(int user=1; user<=n; user++)
        f[dsu.find_set(user)]++;

    for(int user=1; user<=n; user++)
        cout<<f[dsu.find_set(user)]<<" ";

    cout<<endl;

}

