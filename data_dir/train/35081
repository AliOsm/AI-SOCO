#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
ordered_set;	

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<pii, int> para;
const ll inf = 1e9 + 7;
const ll maxN = 1e3 + 5;
const ll MOD = 1e9 + 7;

ll pow(ll a, ll b) {
	if (b == 0) return 1;
	ll d = pow(a, b / 2);
	ll z = 1;
	if (b % 2) z = a;
	return (((d * d) % MOD) * z) % MOD;
}

pii count(int x) {
	int twos = 0, fives = 0;
	while (x % 2 == 0) {
		twos++;
		x /= 2;
	}
	while (x % 5 == 0) {
		fives++;
		x /= 5;
	}
	return {twos, fives};
}

pii sum(pii p1, pii p2) {
	return {p1.st + p2.st, p1.nd + p2.nd};
}

bool minimTwos(pii p1, pii p2) {
	if (p1.st > p2.st) return false;
	if (p1.st == p2.st) {
		return p1.nd < p2.nd;
	}
	return true;
}

bool minimFives(pii p1, pii p2) {
	if (p1.nd > p2.nd) return false;
	if (p1.nd == p2.nd) {
		return p1.st < p2.st;
	}
	return true;
}

int n;
pii cnt[maxN][maxN], minTwos[maxN][maxN], minFives[maxN][maxN];
bool prvFives[maxN][maxN], prvTwos[maxN][maxN];

void printPathTwos() {
	int x = n - 1;
	int y = n - 1;
	vector<char> ans;
	while (x != 0 || y != 0) {
		if (prvTwos[x][y]) {
			ans.pb('D');
			x--;
		} else {
			ans.pb('R');
			y--;
		}
	}
	FORD(i, 2 * (n - 1) - 1, 0) {
		printf("%c",ans[i]);
	}
}

void printPathFives() {
	int x = n - 1;
	int y = n - 1;
	vector<char> ans;
	while (x != 0 || y != 0) {
		if (prvFives[x][y]) {
			ans.pb('D');
			x--;
		} else {
			ans.pb('R');
			y--;
		}
	}
	FORD(i, 2 * (n - 1) - 1, 0) {
		printf("%c",ans[i]);
	}
}

void printThru(pii thru) {
	int x = 0, y = 0;
	while (x < thru.st) {
		printf("D");
		x++;
	}
	while (y < thru.nd) {
		printf("R");
		y++;
	}
	while (x < n - 1) {
		printf("D");
		x++;
	}
	while (y < n - 1) {
		printf("R");
		y++;
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	scanf("%d",&n);
	pii thru;
	bool zeroes = false;
	REP(i, n) {
		REP(j, n) {
			int a;
			scanf("%d",&a);
			if (a == 0) { thru = {i, j}; zeroes = 1; a = 10; }
			cnt[i][j] = count(a);
			minTwos[i][j] = {inf, inf};
			minFives[i][j] = {inf, inf};
		}
	}
	minTwos[0][0] = cnt[0][0];
	minFives[0][0] = cnt[0][0];
	//cout << endl;
	REP(i, n) {
		REP(j, n) {
			if (i > 0) {
				minTwos[i][j] = sum(minTwos[i - 1][j], cnt[i][j]);
				prvTwos[i][j] = 1; // przyszlismy z gory
				minFives[i][j] = sum(minFives[i - 1][j], cnt[i][j]);
				prvFives[i][j] = 1; // z goooory
			}
			if (j > 0) {
				pii p = sum(minTwos[i][j - 1], cnt[i][j]);
				if (minimTwos(p, minTwos[i][j])) {
					minTwos[i][j] = p;
					prvTwos[i][j] = 0; // przyszlismy z lewej
				}
				pii p2 = sum(minFives[i][j - 1], cnt[i][j]);
				if (minimFives(p2, minFives[i][j])) {
					minFives[i][j] = p2;
					prvFives[i][j] = 0; // leweeej
				}
			}
		}
	}
	int x = min(minTwos[n - 1][n - 1].st, minTwos[n - 1][n - 1].nd);
	int y = min(minFives[n - 1][n - 1].st, minFives[n - 1][n - 1].nd);
	if (min(x, y) > 1 && zeroes) {
		printf("1\n");
		printThru(thru);
		return 0;
	}
	if (x < y) {
		printf("%d\n",x);
		printPathTwos();
	} else {
		printf("%d\n", y);
		printPathFives();
	}
	return 0;
}
