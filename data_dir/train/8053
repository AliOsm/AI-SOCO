#include<bits/stdc++.h>
using namespace std;

#define si(n) scanf("%d",&n)
#define MAX 500005
#define f first
#define s second

int n,m;
vector<int>gr[MAX];
int in[MAX],out[MAX],mytime=0;
vector<pair<int,int> >depth[MAX];
char str[MAX];
int node_depth[MAX];
map<pair<int,int>,int >mymap;

int ch[30];

void dfs(int now,int d)
{
    in[now]= ++mytime;
    depth[d].push_back({in[now],now});
    node_depth[now]=d;
    for(auto a: gr[now]){
        dfs(a,d+1);
    }
    out[now]= ++mytime;
}


int main()
{
   // freopen("input.txt","r",stdin);
    int i,j;
    si(n);si(m);
    for(i=2;i<=n;i++){
        int pp;
        si(pp);
        gr[pp].push_back(i);
    }
    scanf("%s",str);
    for(i=n;i>=1;i--)str[i]=str[i-1];

    dfs(1,1);
    while(m--){
        int node,h;
        si(node);si(h);
        if(node_depth[node]>=h || depth[h].size()==0){
            printf("Yes\n");continue;
        }
        if(mymap[{node,h}]){
            if(mymap[{node,h}]==1)printf("No\n");
            else printf("Yes\n");
            continue;
        }

        vector<pair<int,int> >::iterator it1,it2,it3;
        it1=lower_bound(depth[h].begin(),depth[h].end(),make_pair(in[node],-1));
        if(it1==depth[h].end() || (*it1).f>out[node]){printf("Yes\n");continue;}
        it2=upper_bound(depth[h].begin(),depth[h].end(),make_pair(out[node],-1));
        it2--;

        memset(ch,0,sizeof(ch));
        for(it3=it1;;it3++){
            pair<int,int>p=*it3;
            ch[str[p.s]-'a']++;
            if(it3==it2)break;
        }
        int md_cnt=0;
        for(i=0;i<26;i++){
            md_cnt+=(ch[i]%2);
        }
        if(md_cnt>1){
            printf("No\n");
            mymap[{node,h}]=1;
        }
        else{
            printf("Yes\n");
            mymap[{node,h}]=2;
        }
    }
}
