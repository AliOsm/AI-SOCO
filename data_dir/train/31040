#include <bits/stdc++.h>

using namespace std;

vector<pair<int, int>> coin, diam;
int n, coins, diamonds, m1, m2, m3;
int pre[101010];

int bs1(int st, int x) {
	int lo = 0, hi = st-1;
	while(lo < hi) {
		int mid = (lo + hi) / 2;
		if (coin[mid].first > x) hi = mid;
		else lo = mid + 1;	
	}
	if (coin[lo].first > x) --lo;
	return lo; 
}

int bs2(int st, int x) {
	int lo = 0, hi = st-1;
	while(lo < hi) {
		int mid = (lo + hi) / 2;
		if (diam[mid].first > x) hi = mid;
		else lo = mid + 1;	
	}
	if (diam[lo].first > x) --lo;
	return lo; 
}

int main() {
	cin >> n >> coins >> diamonds;
	for (int i = 0; i < n; i++) {
		int x, y;
		char c;
		cin >> x >> y >> c;
		if (c == 'C') coin.push_back({y, x});
		else diam.push_back({y, x});
	}	
	// one with coin and one with diamond;
	sort(coin.begin(), coin.end());
	sort(diam.begin(), diam.end());
	int x1 = 0, x2 = 0;
	for (int i = 0; i < coin.size(); i++) {
		if (coin[i].first <= coins) {
			x1 = max(x1, coin[i].second);
		}
	}
	for (int i = 0; i < diam.size(); i++) {
		if (diam[i].first <= diamonds) {
			x2 = max(x2, diam[i].second);
		}
	}
	if (x1 && x2) m1 = x1+x2;
	// both with coins;
	if (coin.size())
	pre[0] = coin[0].second;
	for (int i = 1; i < coin.size(); i++) {
		pre[i] = max(pre[i-1], coin[i].second);
	}
	for (int i = 0; i < coin.size(); i++) {
		if (coin[i].first >= coins) break;
		int x = bs1(i, coins-coin[i].first);
		if (x != i && x != -1) {
			m2 = max(m2, pre[x]+coin[i].second);
		}
	}
	if (diam.size())
	pre[0] = diam[0].second;
	for (int i = 1; i < diam.size(); i++) {
		pre[i] = max(pre[i-1], diam[i].second);
	}
	for (int i = 0; i < diam.size(); i++) {
		if (diam[i].first >= diamonds) break;
		int x = bs2(i, diamonds-diam[i].first);
		if (x != i && x != -1) {
			m3 = max(m3, pre[x] + diam[i].second);
		}
	}
	//cout << m1 << ' ' << m2 << ' ' << m3 << endl;
	cout << max(m1, max(m2, m3));
}