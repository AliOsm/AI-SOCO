#include <iostream>
#include <stack>
#include <set>
#include <vector>
#include <cmath>
#include <algorithm>
#include <queue>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <string>
#include <map>

#define inf (1 << 30)
#define INF (1<<45LL)
#define pb push_back
#define mp make_pair
using namespace std;

typedef pair<int, int> pi;
typedef long long ll;

/*
 * 
 *      PUCMM PROGRAMMING FORCE
 * 
 * */

const int MAXN = 100001;

pi ST[4 * MAXN];
int v[MAXN];



void build(int node, int lo, int hi){
    
    
    if(lo == hi){
        ST[node].first = ST[node].second = v[lo];
        return;
    }
    
    int mid = (lo+hi) / 2;
    build(node<<1, lo, mid);
    build( (node<<1) + 1, mid + 1, hi);
    
    ST[node].first = max(ST[node<<1].first, ST[(node<<1)+1].first);
    ST[node].second = min(ST[node<<1].second, ST[(node<<1)+1].second);
}

pi query(int node, int i, int j, int lo, int hi){
    if(i > hi || j < lo)
        return mp(-inf, inf);
    
    if(lo >= i && hi <= j)
        return ST[node];
    
    int mid = (lo+hi) / 2;
    pi left = query(node<<1, i, j, lo, mid);
    pi right = query( (node<<1) + 1, i, j, mid + 1, hi);
    
    int maxi = max(left.first, right.first);
    int mini = min(left.second, right.second);
    
    pi ans = mp(maxi, mini);
    
    return ans;
}
int main(){

    ios_base::sync_with_stdio(false);
    
    int n, k; cin >> n >> k;
    for(int i=0; i < n; i++) cin >> v[i];
    
    build(1, 0, n-1);
    
    int maxi = 0;
    vector<pi> ans;
    for(int i=0; i < n; i++){
        
        int lo = i, hi = n - 1;
        int best= 0;
        
        while(lo <= hi){
            int mid = (lo + hi) / 2;
            
            pi range = query(1, i, mid, 0, n-1);
            
            int diff = range.first - range.second;
            
            if(diff > k){
                hi = mid - 1;
            }else{
                best = max(best, mid - i + 1);
                lo = mid + 1;
            }
        }
        
        if(best == maxi)
            ans.pb( mp(i + 1, i + best) );
        else{
            if(best > maxi){
                ans.clear();
                maxi = best;
                ans.pb( mp(i + 1, i + best));
            }
        }
    }
    
    cout << maxi << " " << ans.size() << endl;
    for(int i=0; i < ans.size(); i++) cout << ans[i].first << " " << ans[i].second << endl;
    return 0;
}
