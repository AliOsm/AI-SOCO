#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

//template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)((x).size())
#define pb push_back
#define T first
#define P second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
#define debug(x) cerr << #x << " : " << (x) << endl
const double PI = 3.14159265358979323846;
const double eps = (1e-10);
int isGreater(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

int n;

set<int> get(vector<int> a)
{
    set<int> visit;
    int l = 0;
    set<int> ret;
    for (int i = 0; i < n - 1; ++i)
    {
        if (visit.count(a[i]))
            break;
        visit.insert(a[i]);
        l = max(l, a[i]);
        if (l == i + 1)
            ret.insert(i + 1);
    }
    return ret;
}

void solve()
{
    cin >> n;
    vector<int> a(n);
    rep(i,0,n)
        cin >> a[i];

    set<int> l1 = get(a);
    reverse(all(a));
    set<int> l2 = get(a);

    vector<pair<int, int> > ans;
    for (int item : l1)
    {
        if (l2.count(n - item))
            ans.push_back({item, n - item});
    }
    cout << sz(ans) << '\n';
    for (auto item : ans)
        cout << item.first << " " << item.second << "\n";

}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("AC.txt", "w", stdout);
#endif
    int tc;
    cin >> tc;
    while(tc--)
    {
        solve();
    }
    return 0;
}