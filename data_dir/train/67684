#include <iostream>

using namespace std;

typedef long long int ll;

const ll modulo=1e9+7;

ll expo(ll b,ll e)
{
  if (e==0) return 1;
  if (e%2==0) return expo(b*b%modulo,e/2);
  return b*expo(b*b%modulo,e/2)%modulo;
}

ll inverse(ll x)
{
  return expo(x,modulo-2);
}

const int limit=2000005;

void add(ll &a,ll b)
{
  a=(a+b)%modulo;
}

ll fact[limit],factinv[limit],expon[limit],expom[limit];

ll combi(int n,int k)
{
  if (k<0 or n<k) return 0;
  return fact[n]*factinv[k]%modulo*factinv[n-k]%modulo;
}

ll F(int n,int s)
{
  if (n==s) return 1;
  return s*expon[n-s-1]%modulo;
}

int n,m,a,b;
ll sol;

int main()
{
  fact[0]=1;
  for (int i=1;i<limit;i++)
    fact[i]=fact[i-1]*i%modulo;
  factinv[limit-1]=inverse(fact[limit-1]);
  for (int i=limit-2;i>=0;i--)
    factinv[i]=factinv[i+1]*(i+1)%modulo;
  cin>>n>>m>>a>>b;
  expon[0]=1;
  for (int i=1;i<limit;i++)
    expon[i]=expon[i-1]*n%modulo;
  expom[0]=1;
  for (int i=1;i<limit;i++)
    expom[i]=expom[i-1]*m%modulo;
  for (int len=1;len<=n-1;len++) {
    ll sollen=combi(n-2,len-1)*combi(m-1,len-1)%modulo*fact[len-1]%modulo*F(n,len+1)%modulo*expom[n-1-len];
    //cout<<"len "<<len<<" sollen "<<sollen<<endl;
    add(sol,sollen);
  }
  cout<<sol<<endl;
}
