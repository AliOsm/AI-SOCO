#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int MOD(1e9+7);
const int N(4e5+10);
const int M(310);

ll qpow(ll a, ll n, ll mod = MOD) {
    ll res(1);
    while(n) {
        if(n & 1) (res *= a) %= mod;
        (a *= a) %= mod;
        n >>= 1;
    }
    return res;
}

bool prime(int x) {
    for (int i = 2; i * i <= x; ++i) if(x % i == 0 ) return 0;
    return x != 1;
}

struct seg {
    int l, r;
    ll pro, plz;
    ll fac, flz;
    void update(ll p, ll f);
};

int n, q, l, r, x;
int a[N];
ll bin[M], inv[M];
char op[10];
seg t[N<<2];
vector<int> pris;

void init() {
    for (int i = 2; i <= 300; ++i) inv[i] = qpow(i, MOD-2);
    for (int i = 2; i <= 300; ++i)
        if (prime(i)) pris.push_back(i);
    for (int i = 0; i < 62; ++i)
        for (int j = 2; j <= 300; ++j)
            if (j % pris[i] == 0) bin[j] |= (1ll<<i);
}

void seg::update(ll p, ll f) {
    (pro *= qpow(p, r-l+1)) %= MOD;
    (plz *= p) %= MOD;
    fac |= f;
    flz |= f;
}

#define lc x << 1
#define rc x << 1 | 1
#define mid ((t[x].l + t[x].r) / 2)

void push_up(int x) {
    t[x].pro = (t[lc].pro * t[rc].pro) % MOD;
    t[x].fac = t[lc].fac | t[rc].fac;
}

void push_down(int x) {
    ll &p = t[x].plz, &f = t[x].flz;
    t[lc].update(p, f); t[rc].update(p, f);
    p = 1, f = 0;
}

void build(int x, int l, int r) {
    t[x] = seg({l, r, 1, 1, 0, 0});
    if(l == r) {
        t[x].update(a[l], bin[a[l]]);
        return;
    }
    build(lc, l, mid); build(rc, mid+1, r);
    push_up(x);
}

void update(int x, int l, int r, int v) {
    int L(t[x].l), R(t[x].r);
    if(l <= L && R <= r) {
        t[x].update(v, bin[v]);
        return;
    }
    push_down(x);
    if(l <= mid) update(lc, l, r, v);
    if(r >  mid) update(rc, l, r, v);
    push_up(x);
}

pair<ll, ll> query(int x, int l, int r) {
    int L(t[x].l), R(t[x].r);
    if(l <= L && R <= r) return make_pair(t[x].pro, t[x].fac);
    push_down(x);
    pair<ll, ll> lpr({1, 0}), rpr({1, 0});
    if(l <= mid) lpr = query(lc, l, r);
    if(r >  mid) rpr = query(rc, l, r);
    push_up(x);
    return make_pair((lpr.first * rpr.first) % MOD, lpr.second | rpr.second);
}

ll getans(int l, int r) {
    pair<ll, ll> pr = query(1, l, r);
    ll ans(pr.first), b(pr.second);
    for (int i = 0; i < 62; ++i)
        if(b & (1ll<<i)) {
            (ans *= inv[pris[i]]) %= MOD;
            (ans *= pris[i] - 1) %= MOD;
        }
    return ans;
}

int main() {
    init();
    scanf("%d%d", &n, &q);
    for (int i = 1; i <= n; ++i) scanf("%d", &a[i]);
    build(1, 1, n);
    for (int i = 0; i < q; ++i) {
        scanf("%s", op);
        scanf("%d%d", &l, &r);
        if(op[0] == 'M') {
            scanf("%d", &x);
            update(1, l, r, x);
        }
        else {
            printf("%I64d\n", getans(l, r));
        }
    }
    return 0;
}