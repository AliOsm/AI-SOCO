#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int MAX = 1e5 + 5;
const int LIMIT = 1e7;
int n, m;
bool prime[LIMIT + 5];
int pf[LIMIT + 5];
map<int, int> f[2][MAX];

void sieve() {
	memset(prime, true, sizeof prime);
	for(int i = 4; i <= LIMIT; i += 2) {
		prime[i] = false;
		pf[i] = 2;
	}
	for(int i = 3; i * i <= LIMIT; i += 2) {
		if(prime[i]) {
			for(int j = i * i; j <= LIMIT; j += 2 * i) {
				prime[j] = false;
				pf[j] = i;
			}
		}
	}
}

void factorize(int id1, int id2, int k, map<int, int> &factors) {
	if(k == 1) {
		return;
	}
	while(!prime[k]) {
		f[id1][id2][pf[k]]++;
		factors[pf[k]]++;
		k = k / pf[k];
	}
	f[id1][id2][k]++;
	factors[k]++;
}
	
int main() {
	sieve();

	scanf("%d %d", &n, &m);
	vector<int> v1, v2;
	map<int, int> f1, f2;
	fori(i, 0, n) {
		int cur;
		scanf("%d", &cur);
		factorize(0, i, cur, f1);
		v1.push_back(cur);
	}
	fori(i, 0, m) {
		int cur;
		scanf("%d", &cur);
		factorize(1, i, cur, f2);
		v2.push_back(cur);
	}
	
	map<int, int> used;
	for(auto each : f1) {
		int v, a;
		tie(v, a) = each;
		if(f2.count(v)) {
			int mm = min(a, f2[v]);
			used[v] += mm;
		}
	}

	auto used2 = used;
	fori(i, 0, v1.size()) {
		for(auto each_each : f[0][i]) {
			int mm = min(each_each.second, used[each_each.first]);			
			used[each_each.first] -= mm;
			fori(j, 0, mm) {
				v1[i] /= each_each.first;
			}
		}
	}
	fori(i, 0, v2.size()) {
		for(auto each_each : f[1][i]) {
			int mm = min(each_each.second, used2[each_each.first]);			
			used2[each_each.first] -= mm;
			fori(j, 0, mm) {
				v2[i] /= each_each.first;
			}
		}
	}

	printf("%d %d\n", (int) v1.size(), (int) v2.size());
	for(auto &each : v1) {
		printf("%d ", each);
	}
	printf("\n");
	for(auto &each : v2) {
		printf("%d ", each);
	}
	printf("\n");

	return 0;
}

