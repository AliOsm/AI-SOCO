#include <bits/stdc++.h>
using namespace std;
 
set<int> adj[100005], st;
 
struct dsu_save{
    int v, rnkv, u, rnku;
    dsu_save(){}
    dsu_save(int _v, int _rnkv, int _u, int _rnku){
        v = _v; rnkv = _rnkv;
        u = _u; rnku = _rnku;        
    }
};
 
struct dsu_rollback{
    vector<int> p, rnk;
    stack<dsu_save> op;
    dsu_rollback(){}
    dsu_rollback(int n){
        p.resize(n+5);
        rnk.resize(n+5);
        for(int i = 0; i <= n; i++){
            p[i] = i;
            rnk[i] = 0;
        }
    }
    int find_set(int u){return u == p[u] ? u : find_set(p[u]);}
    
    bool unite(int u, int v){
        u = find_set(u);
        v = find_set(v);
        if(u == v) return false;
        if(rnk[v] > rnk[u])
            swap(u, v);
        op.push(dsu_save(v, rnk[v], u, rnk[u]));
        p[v] = u;
        if(rnk[u] == rnk[v])
            rnk[u]++;
        return true;
    }
    
    void rollback(){
        if(op.empty()) return;
        dsu_save x = op.top(); op.pop();
        p[x.v] = x.v;
        rnk[x.v] = x.rnkv;
        p[x.u] = x.u;
        rnk[x.u] = x.rnku;
    }
};
 
int main(){
    int n; scanf("%d", &n);
    dsu_rollback dsu(n);
    for(int i = 1; i <= n; i++){
        int k; scanf("%d", &k);
        dsu.unite(i, k);
    }
    int res = 0;
    for(int i = 1; i <= n; i++)
        if(dsu.find_set(i) == i)
            res++;
    cout << res << endl;
	return 0;
}