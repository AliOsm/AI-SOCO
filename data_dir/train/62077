#include <iostream>
#include <algorithm>
#include <string>
#include <set>

using namespace std;

const int N = 1000001;

int MAX = 2000000;

set<int> s;
int memo[N];

void precomp(int idx, int num)
{
	if(idx == 6)
	{
		s.insert(num);
		return;
	}
	precomp(idx+1, num*10);
	precomp(idx+1, num*10+1);
}

int solve(int n)
{
	if(n == 0) return 0;
	if(n < 0) return MAX;
	if(memo[n] != -1) return memo[n];
	int ret = MAX;
	for(set<int>::iterator it = s.end(); ; it--)
	{
	    if(it == s.end()) continue;
		ret = min(ret, solve(n-(*it))+1);
		if(it == s.begin()) break;
	}
	return memo[n] = ret;
}
void walk(int n)
{
	for(set<int>::iterator it = s.end(); ; it--)
	{
	    if(it == s.end()) continue;
		if(n-(*it) >= 0 && memo[n]-1 == memo[n-(*it)])
		{
			cout << *it << " ";
			walk(n-(*it));
			return;
		}
		if(it == s.begin()) break;
	}
}
int main()
{
	precomp(0, 0);
	s.insert(1000000);
	s.erase(0);
	fill(memo, memo+N, -1);
	memo[0] = 0;
	int n; cin >> n;
	cout << (memo[n] = solve(n)) << endl;
	walk(n);
	return 0;
}
