#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <map>
#include <set>
#include <sstream>
#define rank ererg

using namespace std;


vector<string> a;
vector<string> b;

map<string,int> was;

set<int> lol[202][2011];

int rank[2022];
int par[2022];

void make_set(int a)
{
    par[a]=a;
}

int find_set(int a)
{
    if (par[a]==a)
        return a;
    return par[a]=find_set(par[a]);
}

void union_sets(int a,int b)
{
    a=find_set(a);
    b=find_set(b);
    if (rank[a]<rank[b])
        swap(a,b);
    par[b]=a;
    if (rank[a]==rank[b])
        ++rank[a];
}

vector<long long> p_pow (200003);
const int p = 3137;

vector<long long int> ha1;
vector<long long int> ha22;
vector<long long int> ha2;
vector<long long int> ha11;

long long int teks[222];

int main()
{
   // freopen("a","r",stdin);
    int n,m;
    cin >> n >> m;
    a.resize(n);
    b.resize(m);
    for (int i=0; i<n; i++)
    {
        cin >> a[i];
    }
    for (int j=0; j<m; j++)
    {
        cin >> b[j];
    }
    p_pow[0] = 1;
    for (size_t i=1; i<p_pow.size(); ++i)
        p_pow[i] = p_pow[i-1] * p;
    for (int i=0; i<n; i++)
    {
        ha1.resize(n);
        long long int tek=0;
        for (int j=0; j<m; j++)
        {
            tek*=p;
            tek+=a[i][j];
        }
        ha1[i]=tek;
    }
    long long int tek=0;
    for (int i=0;i<n;i++)
    {
        tek*=p_pow[m];
        tek+=ha1[i];
        if (i-m>=0)
        {
            tek-=ha1[i-m]*p_pow[m*m];
        }
        if (i>=m-1)
        {
            ha11.push_back(tek);
            //cout << tek << endl;
        }
    }
    //cout << endl;
    for (int i=0;i<n;i++)
    {
        ha2.resize(n);
        for (int j=0;j<m;j++)
        {
            ha2[i]*=p_pow[m];
            ha2[i]+=b[j][i];
        }
    }
    tek=0;
    for (int i=0;i<n;i++)
    {
        tek*=p;
        tek+=ha2[i];
        if (i-m>=0)
        {
            tek-=ha2[i-m]*p_pow[m];
        }
        if (i>=m-1)
        {
            ha22.push_back(tek);
            //cout << tek << endl;
        }
    }
    for (int i=0;i<ha11.size();i++)
    {
        for (int j=0;j<ha22.size();j++)
        {
            if (ha11[i]==ha22[j])
            {
                cout << 1+i << ' ' << j+1 << endl;
                return 0;
            }
        }
    }
    return 0;
}
