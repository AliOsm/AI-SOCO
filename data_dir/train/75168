#include <string.h>
#include <assert.h>
#include <cassert>
#include <unordered_map>
 
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stack>
#include <queue>
#include <set>
 
#include <map>
#include <vector>
#include <string>
#include <stdlib.h>
#include <cassert>
 
#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf
 
#define pf printf
#define mp make_pair
#define N 2000000
 
const int mod = 998244353;
using namespace std;

int n,m,q;
int logo[600][600][5],c[600][600],dp[501][501][501];
int h[2][600][5];

int main(){
	cin>>n>>m>>q;
	fr(i,0,n) {
		string s;
		cin>>s;
		fr(j,0,m) {
			if(s[j]=='G')c[i][j] = 0;
			else if(s[j]=='Y')c[i][j] = 1;
			else if(s[j]=='R')c[i][j] = 2;
			else c[i][j] = 3;
		}
	}
	clr(h);

	fr(i,0,n) {
		int idx = i&1;
		int pre = idx^1;
		clr(h[idx]);
		fr(j,0,m) {
			if(i==0||c[i][j]==c[i-1][j]) h[idx][j][c[i][j]]=h[pre][j][c[i][j]]+1;
			else h[idx][j][c[i][j]]=1;
		}
		fr(j,0,m) {
			fr(k,0,4) {
				int len = 1000;
				int max_len = 0;
				for(int l = j; l >=0;--l) {
					len = min(h[idx][l][k],len);
					max_len = max(max_len, min(len,j-l+1));
				}
				logo[i][j][k] = max_len;
				//if(logo[i][j][k])
					//printf("i = %d j = %d k = %d logo = %d\n",i,j,k,logo[i][j][k]);
			}
		}
	}

	fr(i,0,n) {
		fr(j,0,m) {
			fr(k,1,m+1) {
				if(j-k+1<0)break;
				dp[i+1][j+1][k] = max(dp[i+1][j][k-1], dp[i][j+1][k-1]);
				dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k-1]); 
				int left = 1;
				int max_len = 0;
				if(logo[i][j][3]>0) {
					int len = logo[i][j][3];
					////printf("i = %d j = %d logo len = %d\n",i,j,logo[i][j][3]);
					if(len*2<=j+1&&logo[i][j-len][1]>=len && logo[i-len][j][0]>=len&&logo[i-len][j-len][2]>=len) {
						left = len;
						max_len = len;
					}
				}
				if(max_len*2>k&&max_len){
					continue;
				}
				dp[i+1][j+1][k] = max(dp[i+1][j+1][k], max_len); 
				//printf("i = %d j = %d k = %d dp = %d max_len = %d\n",i,j,k,dp[i+1][j+1][k],max_len);
			}
		}
	}

	int idx = 0;
	while(q--) {
		int r1,c1,r2,c2;
		sf("%d%d%d%d",&r1,&c1,&r2,&c2);
		int ans = 0;
		if(r2-r1>c2-c1){
			for(int i = r1; i <=r2; ++i) {
				int len = min(c2-c1+1,i-r1+1);
				//printf("i = %d c2 = %d len = %d dp = %d\n",i,c2,len,dp[i][c2][len]);
				ans = max(ans, dp[i][c2][len]);
			}
		}else {
			for(int i = c1; i <=c2; ++i) {
				int len = min(i-c1+1, r2-r1+1);
				//printf("r2 = %d i = %d len = %d dp = %d\n",r2,i,len,dp[r2][i][len]);
				ans = max(ans, dp[r2][i][len]);
			}
		}
		pf("%d\n",ans*ans*4);
	}
}

