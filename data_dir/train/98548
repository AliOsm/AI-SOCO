/**
 *    author:  skmonir
 *    created: 06-May-2018 15:17:55
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> inline void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 1e5 + 7;
const int inf = 1e9 + 7;

vector <int> g[N];
int in[N], rnk[N], FirstBestBy[N], U[N], V[N];

void dfs(int u) {
    rnk[u] = 1;
    FirstBestBy[u] = u;
    FOR (i, 1, g[u].size()) {
        int v = g[u][i - 1];
        if (!rnk[v]) dfs(v);
        if (rnk[u] < rnk[v] + 1) {
            rnk[u] = rnk[v] + 1;
            FirstBestBy[u] = v;
        }
    }
}

int solve() {
    int n, m; Int(n, m);
    FOR (i, 1, m) {
        Int(U[i], V[i]);
        ++in[V[i]];
        g[U[i]].push_back(V[i]);
    }

    FOR (i, 1, n) if (!in[i]) dfs(i);

    if (set <int> (rnk + 1, rnk + n + 1).size() != n) {
        return printf("-1\n");
    }

    int res = m;
    ROF (i, m, 0) {
        int u = U[i], v = V[i];
        if (FirstBestBy[u] == v) break;
        --res;
    }

    printf("%d\n", res);

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; //Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}