#include <bits/stdc++.h>

using namespace std;

struct E {
  int v1, v2, w, id;
  bool operator < (const E &o) const {
    if (v1 == o.v1) {
      if (v2 == o.v2) {
        return w < o.w;
      }
      return v2 < o.v2;
    }
    return v1 < o.v1;
  }
};

int add[600010];
int ll[300010];
int rr[300010];
E a[600010];
int open[300010];

int main() {
  int n, k;
  scanf("%d %d", &n, &k);
  for (int i = 0; i < n; ++i) {
    scanf("%d %d", ll + i, rr + i);
    a[i] = {ll[i], -1, -1, i};
    a[n + i] = {rr[i], 1, ll[i], i};
  }
  sort(a, a + n + n);
  memset(add, 0, sizeof add);
  int ansl = -1, ansr = -2;
  for (int i = 0, l = -1, cnt = 0; i < n + n; ++i) {
    int j = a[i].id;
    if (a[i].w == -1) {
      open[j] = i;
      add[i] = 1;
    } else {
      while (l < i && cnt < k) {
        ++l;
        cnt += add[l];
      }
      if (cnt >= k) {
        if (a[i].v1 - a[l].v1 > ansr - ansl) {
          ansl = a[l].v1;
          ansr = a[i].v1;
        }
      }
      if (open[j] <= l) {
        --cnt;
      } else {
        add[open[j]] = 0;
      }
    }
  }
  if (ansr - ansl == -1) {
    puts("0");
    for (int i = 1; i <= k; ++i) {
      printf("%d ", i);
    }
    return 0;
  }
  printf("%d\n", ansr - ansl + 1);
  for (int i = 0; i < n && k > 0; ++i) {
    if (ansl >= ll[i] && ansr <= rr[i]) {
      printf("%d ", i + 1);
      --k;
    }
  }
}