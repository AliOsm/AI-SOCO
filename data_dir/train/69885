#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/*------------------------------------BITMASK------------------------------------------*/
//int Change(int N, int pos){return N= N^(1<<pos);}
//bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/*-----------------------------------------------------------------------------------------------*/

/*-----------------------------DIRECTION_ARRAY-------------------------*/
//------FOUR_DIRECTION---------//
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


//------EIGHT_DIRECTION---------//
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/*--------------------------------------------------------------------------------------*/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}

///-----------------------------START FROM HERE--------------------------------------///

int arr[105];
int dp[105][105];
int n;
int solve(int i,int j){

    if(i==n)return 0;
    if(dp[i][j]!=-1)return dp[i][j];
    int p=0,q=0;
    if(!(j==1 && arr[i]==0))p=1+solve(i+1, arr[i]);
    q=solve(i+1, j);
    return dp[i][j]=max(p,q);

}

int main(){

    //int n;
    scanf("%d", &n);
    mem(dp,-1);
    for(int i=0; i<n; i++)scanf("%d", &arr[i]);
    int ans=solve(0,2);

    cout<<ans<<endl;
}
