#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/************************************** MAIN PROGRAM ********************************************/

int main()
{
  //  freopen("input.txt", "r", stdin);
    SPEED
    int t;
    cin >> t;
    FOR(_, 0, t) {
        int n;
        cin >> n;
        vector<string> arr(n);
        int a = 0;  /// 00
        int b = 0; /// 11
        int c = 0;  /// 01
        int d = 0;  /// 10

        map<string, vector<int>> pos;
        set<string> st;
        int revC = 0, revD = 0;
        FOR(i, 0, n) {
            cin >> arr[i];
            st.insert(arr[i]);
        }
        FOR(i, 0, n) {
            string s = arr[i];
            string bak = s;
            s = string({s.front(), s.back()});
            a += s == "00";
            b += s == "11";
            c += s == "01";
            d += s == "10";
            swap(s, bak);
            arr[i] = bak;

            {
                reverse(ALL(s));
               // DEBUG(s)
                if (!st.count(s)) {

                    revC += bak == "01";
                    revD += bak == "10";
                } else {
                   // DEBUG("shit")
                    arr[i] = "";
                }
            }
        }
      //  DEBUG(arr)
        //DEBUG(revC, revD)
        FOR(i, 0, n) pos[arr[i]].push_back(i);
      //  DEBUG(pos)
        if (a * b > 0) {
            if (c + d == 0) {
                cout << -1 << endl;;
                continue;
            }
        }
        int op = abs(c - d) / 2;
       // DEBUG(op)
        vector<int> ans;
        if (c >= d) {
            if (op > revC) {
                cout << -1 << endl;
                continue;
            }
            FOR(i, 0, op) {
                ans.push_back(pos["01"][i]);
            }
        } else {
            if (op > revD) {
                cout << -1 << endl;
                continue;
            }
            FOR(i, 0, op) {
                ans.push_back(pos["10"][i]);
            }
        }
        cout << op << endl;
        for (auto e : ans) {
            cout << e + 1 << ' ';
        }
        cout << endl;
    }
}
/************************************** END OF PROGRAM ******************************************/
/** Stuff you should look for:
 * int overflow, array bounds, over-counting, graph is not a tree/connected
 * special cases (n=1?), set/unordered_set TLE, multi-set/set error
 * do something instead of nothing and stay organized
 */
