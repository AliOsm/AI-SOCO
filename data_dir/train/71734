

#include <bits/stdc++.h>
 
using namespace std;
 
const int maxn = 200003;
const long long mod = 998244353;
 
int n, k, h[maxn];
void read()
{
    cin >> n >> k;
 
    for (int i = 1; i <= n; i++)
        cin >> h[i];
}
 
long long fast_pow(long long a, int deg)
{
    long long res = 1;
    long long p = a;
 
    while (deg)
    {
        if (deg & 1)
            res = res * p % mod;
 
        deg >>= 1;
 
        p = p * p % mod;
    }
 
    return res;
}
 
long long fact[maxn], inv_fact[maxn];
void precompute()
{
    fact[0] = 1;
 
    for (int i = 1; i <= n; i++)
        fact[i] = fact[i-1] * i % mod;
 
    inv_fact[n] = fast_pow(fact[n], mod - 2);
 
    for (int i = n - 1; i >= 0; i--)
        inv_fact[i] = inv_fact[i + 1] * (i + 1) % mod;
}
 
long long comb(int a, int b)
{
    return fact[a] * inv_fact[b] % mod * inv_fact[a-b] % mod;
}
 
int cnt;
long long dp[maxn];
long long ans = 1;
void solve()
{
    for (int i = 1; i <= n; i++)
    {
        if (h[i] == h[i % n + 1])
            ans = ans * k % mod;
 
        else
            cnt++;
    }
 
    precompute();
    dp[1] = 1;
    for (int i = 2; i <= n; i++)
    {
        if (i % 2 == 0)
            dp[i] = (2 * dp[i-1] - comb(i - 1, (i - 1) / 2) + mod) % mod;
 
        else
            dp[i] = (2 * dp[i-1] + comb(i - 1, (i - 1) / 2)) % mod;
    }
 
    long long sum = 0;
 
    for (int i = 0; i <= cnt; i++)
        sum = (sum + comb(cnt, i) * fast_pow(k - 2, i) % mod * dp[cnt - i] % mod) % mod;
 
    ans = ans * sum % mod;
 
    cout << ans << endl;
}
 
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
 
    read();
    solve();
}