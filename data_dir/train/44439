#include <bits/stdc++.h>
#define int long long
#define pb push_back
#define mk make_pair
using namespace std;
const int N = 1123456;
const int mod = 1e9 + 7;
const int inf = 1e9 + 7;
inline long long read () {
    char c = getchar();
    long long t = 0, f = 1;
    while (!isdigit(c)) f = (c == '-') ? -1 : 1, c = getchar();
    while (isdigit(c)) t = t * 10 + c - 48, c = getchar();
    return t * f;
}
int funk(int a, int b, int c) {
    return (a - b) * (a - b) + (b - c) * (b - c) + (a - c) * (a - c);
}
void solve() {
    int n, m, i, j, a, b, c;
    cin >> a >> b >> c;
    vector <pair <int, int> > v;
    map <int, int> mp[4];
    for(i = 1; i <= a; i ++) {
        int x = read();
        v.pb(mk(x, 1));
        mp[1][x] ++;
    }
    for(i = 1; i <= b; i ++) {
        int x = read();
        v.pb(mk(x, 2));
        mp[2][x] ++;
    }
    for(i = 1; i <= c; i ++) {
        int x = read();
        v.pb(mk(x, 3));
        mp[3][x] ++;
    }
    sort(v.begin(), v.end());
    int d[5] = {0, 0, 0, 0};
    int id = 0;

    int sum = 4 * inf * inf;
    for(i = 0; i < v.size(); i ++) {
        int x = v[i].first;
        int y = v[i].second;
        d[y] ++;
        bool ok = 1;
        for(j = 1; j <= 3; j ++) {
            if(d[j] == 0)
                ok = 0;
        }
        if(ok) {
            while(1) {
                if(d[v[id].second] == 1) {
                    break;
                }
                d[v[id].second] --;
                id ++;
            }
            int w = (v[id].first + v[i].first) / 2;
            int t = 1;
            if(v[id].second == t)
                t ++;
            if(v[i].second == t)
                t ++;
            if(v[id].second == t)
                t ++;
            map <int, int> :: iterator it = mp[t].lower_bound(w);
            if(it != mp[t].begin())
                it --;
            for(int j = 0; j <= 3; j ++) {
                if(it != mp[t].end()) {
                    sum = min(sum, funk(v[id].first, v[i].first, (*it).first));
                    it ++;
                }
            }
        }
    }
    cout << sum << endl;
}
main()
{
    int t = read();
    while(t -- > 0) {
        solve();
    }
}



