#include <bits/stdc++.h>

using namespace std;

#define right asfdsg
#define left asfdsvs
#define pb emplace_back
#define F first
#define S second
#define mp make_pair
#define x1 _xxx1
#define y1 _yyy1

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef std::pair < int, int > pii;
typedef std::pair < ll, ll > pll;
typedef std::vector < std::vector < ld > > vld;

const int INF = (int) 2e9 + 7;
const ld EPS = (ld) 1e-5;
const int BASE = (int) 1e9 + 7;
const int MAXN = 111;
const ll INFLL = (ll) 1e18;
const ld PI = acos(-1);

#define DB(x) cerr << #x << " = " << x << "\n"
#define scp(x) cin >> x.first >> x.second;

int n, m;
int b[MAXN][MAXN];
int a[MAXN][MAXN];

void upd1(vector < pii > &ans) {
    for (int j = 1; j <= m; j ++) {
        int mn = 1000;
        for (int i = 1; i <= n; i ++)
            mn = min (mn, a[i][j]);
        for (int i = 1; i <= mn; i ++)
            ans.emplace_back(1, j);
        for (int i = 1; i <= n; i ++)
            a[i][j] -= mn;
    }
}

void upd2(vector < pii > &ans) {
    for (int i = 1; i <= n; i ++) {
        int mn = 1000;
        for (int j = 1; j <= m; j ++)
            mn = min (mn, a[i][j]);
        for (int j = 1; j <= mn; j ++)
            ans.emplace_back(0, i);
        for (int j = 1; j <= m; j ++)
            a[i][j] -= mn;
    }
}

vector < pii > solve(bool ok = false) {
    vector < pii > ans;
    for (int i = 1; i <= n; i ++)
        for (int j = 1; j <= m; j ++)
            a[i][j] = b[i][j];
    if (ok) {
        upd1(ans);
        upd2(ans);
    } else {
        upd2(ans);
        upd1(ans);
    }

    for (int i = 1; i <= n; i ++)
        for (int j = 1; j <= m; j ++)
            if (a[i][j] != 0) {
                cout << -1;
                exit(0);
            }
    return ans;
}


int main() {
    scanf ("%d%d", &n, &m);
    for (int i = 1; i <= n; i ++) {
        for (int j = 1; j <= m; j ++)
            scanf ("%d", &b[i][j]);
    }
    vector < pii > ans1 = solve(0);
    vector < pii > ans2 = solve(1);

    vector < pii > *ans;
    if (ans1.size() < ans2.size()) ans = &ans1;
    else ans = &ans2;
    cout << ans -> size() << "\n";
    for (auto v : *ans) {
        cout << (v.F ? "col " : "row ") << v.S << "\n";
    }


    return 0;
}
