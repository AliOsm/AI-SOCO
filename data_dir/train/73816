/*
▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄██████████████▒▒▐▌
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐

*/
#pragma GCC optimize("Ofast")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>



using namespace std;
  


#define ll long long
#define ld long double
#define null NULL
#define prev prev228
#define count count228
#define index index228
#define left left228
#define right right228
#define hash hash228

const int N = 100 * 1000 + 228;



vector<int> p[N], rg[N];


inline void initDSU(int color, int n) {
	p[color].resize(n + 1);
	rg[color].resize(n + 1);
	for (int i = 1; i <= n; ++i) {
		p[color][i] = i;
		rg[color][i] = 1;
	}
}


int get(int v, int color) {
	if (v == p[color][v]) {
		return v;
	}
	p[color][v] = get(p[color][v], color);
	return p[color][v];
}

inline void join(int u, int v, int color) {
	u = get(u, color);
	v = get(v, color);
	if (u != v) {
		if (rg[color][u] < rg[color][v]) {
			rg[color][v] += rg[color][u];
			p[color][u] = v;
		} else {
			rg[color][u] += rg[color][v];
			p[color][v] = u;
		}
	}
}

inline bool same(int u, int v, int color) {
	return get(u, color) == get(v, color);
}

unordered_set<int> g[N];

int deg[N];


vector<int> vect[N];


struct Edge
{
	int u, v, c;
	Edge() {}
	Edge(int _u, int _v, int _c) {
		u = _u;
		v = _v;
		c = _c;
	}
};


unordered_map<int, int> to[N];



unordered_map<ll, bool> used;

unordered_map<ll, int> ans;



inline int readChar();
template <class T = int> inline T readInt(); 
template <class T> inline void writeInt( T x, char end = 0 );
inline void writeChar( int x ); 
inline void writeWord( const char *s );

static const int buf_size = 4096;

inline int getChar() {
	static char buf[buf_size];
	static int len = 0, pos = 0;
	if (pos == len)
		pos = 0, len = fread(buf, 1, buf_size, stdin);
	if (pos == len)
		return -1;
	return buf[pos++];
}

inline int readChar() {
	int c = getChar();
	while (c <= 32)
		c = getChar();
	return c;
}

template <class T>
inline T readInt() {
	int s = 1, c = readChar();
	T x = 0;
	if (c == '-')
		s = -1, c = getChar();
	while ('0' <= c && c <= '9')
		x = x * 10 + c - '0', c = getChar();
	return s == 1 ? x : -x;
}

/** Write */

static int write_pos = 0;
static char write_buf[buf_size];

inline void writeChar( int x ) {
	if (write_pos == buf_size)
		fwrite(write_buf, 1, buf_size, stdout), write_pos = 0;
	write_buf[write_pos++] = x;
}

template <class T> 
inline void writeInt( T x, char end ) {
	if (x < 0)
		writeChar('-'), x = -x;

	char s[24];
	int n = 0;
	while (x || !n)
		s[n++] = '0' + x % 10, x /= 10;
	while (n--)
		writeChar(s[n]);
	if (end)
		writeChar(end);
}

inline void writeWord( const char *s ) {
	while (*s)
		writeChar(*s++);
}

struct Flusher {
	~Flusher() {
		if (write_pos)
			fwrite(write_buf, 1, write_pos, stdout), write_pos = 0;
	}
} flusher;


signed main() {
	int n, m;
	scanf("%d %d", &n, &m);
	vector<Edge> edges;
	for (register int i = 0; i < m; ++i) {
		int u, v, c;
		scanf("%d %d %d", &u, &v, &c);
		if (u > v) {
			swap(u, v);
		}
		g[u].insert(c);
		g[v].insert(c);
		vect[c].push_back(u);
		vect[c].push_back(v);
		edges.push_back({u, v, c});
	}
	for (register int i = 1; i <= m; ++i) {
		if (!vect[i].empty()) {
			sort(vect[i].begin(), vect[i].end());
			int sz = (int)vect[i].size();
			to[i].rehash(sz);
			for (int j = 0; j < sz; ++j) {
				to[i][vect[i][j]] = j + 1;
			}
			initDSU(i, sz);
		}
	}
	for (register int i = 0; i < m; ++i) {
		int u = edges[i].u, v = edges[i].v, color = edges[i].c;
		join(to[color][u], to[color][v], color);
	}
	int q;
	scanf("%d", &q);
	for (register int it = 0; it < q; ++it) {
		int u, v;
		scanf("%d %d", &u, &v);
		if (u > v) {
			swap(u, v);
		}

		ll foo = (ll)u * 100001LL + v;

		if (!used[foo]) {
			if (deg[v] > deg[u]) {
				swap(u, v);
			}
			int res = 0;
			for (int color : g[v]) {
				if (g[u].find(color) == g[u].end()) continue;
				if (same(to[color][u], to[color][v], color)) ++res;
			}
			used[foo] = true;
			ans[foo] = res;
		}
		printf("%d\n", ans[foo]);
	}
	return 0;
}










