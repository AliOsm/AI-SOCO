#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <unordered_set>
#include <iterator> 
#include <bitset>
#include <complex>
#include <random>
#include <chrono>
#include <functional>
using namespace std;
typedef complex<double> cd;
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf INT_MAX
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pli pair<ll, int>
#define pil pair<int, ll>
#pragma GCC optimize("O3")
//#define x first
//#define y second
const int mods[10] = { 1000000007, 999999937, 999999929, 999999893, 999999883, 999999797, 999999761, 999999757, 999999751, 999999739 };
const int mod = 1000000007, mod2 = 998244353;
int rand_mods[2];
const long double eps = 1e-10;
const int siz = 1e6 + 5, siz2 = 3e5 + 5, lg = 20, block = 300, block2 = 1000, mxv = 1e5 + 1, sqrt_mod = 31630;
const int alpha_sz = 26;

int n, m;
vector<vector<char>> grid, ans;
vector<vector<int>> cumu1, cumu2;
char str[siz];

template<typename T>
void init2d(vector<vector<T>> &vec, int n, int m) {
    vec = vector<vector<T>>(n+2);
    for(int i=0; i<=n+1; i++) {
        vec[i] = vector<T>(m+2);
    }
}

int getrectsum(vector<vector<int>> &cumu, int i1, int j1, int i2, int j2) {
    return cumu[i2][j2] - cumu[i1-1][j2] - cumu[i2][j1-1] + cumu[i1-1][j1-1];
}

void clear() {
    for(int i=1; i<=n; i++) {
        fill(cumu2[i].begin()+1, cumu2[i].begin()+1+m, 0);
    }
}

bool check(int mid) {
    int w = mid*2+1;
    for(int i=1; i<=n; i++) {
        fill(ans[i].begin()+1, ans[i].begin()+1+m, '.');
    }
    for(int i=w; i<=n; i++) {
        for(int j=w; j<=m; j++) {
            int sum = getrectsum(cumu1, i-w+1, j-w+1, i, j);
            if(sum == w*w) {
                ans[i-w/2][j-w/2]='X';
                cumu2[i-w+1][j-w+1]++;
                cumu2[i+1][j-w+1]--;
                cumu2[i-w+1][j+1]--;
                cumu2[i+1][j+1]++;
            }
        }
    }
    for(int i=1; i<=n; i++) {
        for(int j=1; j<=m; j++) {
            cumu2[i][j] += cumu2[i-1][j] + cumu2[i][j-1] - cumu2[i-1][j-1];
            if(grid[i][j]=='X' && !cumu2[i][j]) {
                clear();
                return 0;
            }
        }
    }
    clear();
    return 1;
}

int main()
{
    scanf("%d%d", &n, &m);
    init2d(grid, n, m);
    init2d(ans, n, m);
    init2d(cumu1, n, m);
    init2d(cumu2, n, m);
    for(int i=1; i<=n; i++) {
        scanf("%s", str+1);
        for(int j = 1; j<=m; j++) {
            grid[i][j] = str[j];
        }
    }
    for(int i=1; i<=n; i++) {
        for(int j=1; j<=m; j++) {
            cumu1[i][j] = (grid[i][j]=='X')+cumu1[i-1][j]+cumu1[i][j-1]-cumu1[i-1][j-1];
        }
    }
    int mn = min(n, m);
    int l = 0, r = mn/2-(mn%2 == 0);
    while(l!=r) {
        int mid = (l+r+1)/2;
        if(check(mid)) {
            l = mid;
        }
        else {
            r = mid-1;
        }
    }
    check(l);
    printf("%d\n", l);
    for(int i=1; i<=n; i++) {
        for(int j=1; j<=m; j++) {
            printf("%c", ans[i][j]);
        }
        printf("\n");
    }
	return 0;
}