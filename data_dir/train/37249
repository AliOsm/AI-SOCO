#include <bits/stdc++.h>
using namespace std;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl





typedef long long ll;
const ll mod = 1e9+7;
const int maxn = 1e6 + 5;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

double dp[maxn];
int n;
vector<int> g[maxn];
int x[maxn];

void go(int at) {
    x[at]=1;
    for (int to: g[at]) {
	go(to);
	x[at]+=x[to];
    }
}

void dfs(int at) {
    double ch=0;
    for (int to: g[at]) {
	ch+=x[to];
    }
    for (int to: g[at]) {
	//size of children's subtrees except to's
	dp[to] = 1+dp[at]+(ch-x[to])/2.0;
	dfs(to);
    }
}

//for some node x, w.r.t. it's siblings, it's exactly probability 1/2 whether it will go before or after its sibling
//to see this, consider some permtuation 123 and look at how many cases 1 appears before 2

//therefore: 1/2 the time, all the other nodes in the sibling's subtrees contribute to our timer

int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);
    cin>>n;
    for (int i=2; i<=n; i++) {
	int p; cin>>p;
	g[p].push_back(i);
    }

    go(1);
    
    dp[1]=1;
    dfs(1);

    cout<<fixed<<setprecision(7);
    for (int i=1; i<=n; i++) {
	cout<<dp[i]<<" ";
    }
    cout<<endl;

    return 0;
}
