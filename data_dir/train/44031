#include<bits/stdc++.h>
using namespace std;
//#define int long long
typedef long long ll;
typedef long double ld;
const int N = 505 + 5;
const int mod = 998244353;
void upd(int & a, int b){
    a += b;
    if(a >= mod) a -= mod;
}
int n, k;
int first_dp[N][N][2];
int dp[N];
int deg[N];
signed main(){
    cin >> n >> k;
    deg[0] = 1;
    for(int i = 1; i <= n; ++i){
        deg[i] = deg[i - 1];
        upd(deg[i], deg[i - 1]);
    }
    for(int m = 1; m <= n; m++){
        for(int i = 1; i <= m; ++i){
            first_dp[m][i][0] = 1;
            first_dp[m][i][1] = 1;
        }
        for(int i = 1; i <= n; ++i){
            for(int j = i + 1; j <= min(i + m, n); ++j){
                upd(first_dp[m][j][1], first_dp[m][i][0]);
            }
            for(int j = i + 1; j <= min(i + m, n); ++j){
                upd(first_dp[m][j][0], first_dp[m][i][1]);
            }
        }
    }
    for(int i = 1; i <= n; ++i){
        dp[i] = first_dp[i][n][0];
        //upd(dp[i], first_dp[i][n][1]);
        //dp[i] -= dp[i - 1];
        //upd(dp[i], mod);
        // dp[i] means that we can't have more then i equal consequential elements
    }
    int ans = 0;
    for(int i = 1; i <= n; ++i){
        int first = dp[i] - dp[i - 1];
        if(first < 0) first += mod;
        int second = min((k - 1) / i, n);
        //while((second + 1) * first < k) second++;
        //cout << second << endl;
        first = (first * 1ll * dp[second]) % mod;
        upd(ans, first);
    }
    upd(ans, ans);
    cout << ans << endl;
    return 0;
}
