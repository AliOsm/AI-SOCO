#include <bits/stdc++.h>
   
#define ll long long
#define all(aaa) aaa.begin(), aaa.end()
 
using namespace std;

const ll INF = 1e18;
const int N = 3e5 + 5, M = 1e7 + 5;
vector<int> h[N], c[N];
int a[M], z[M];
ll b[M], dp[M], dpr[M];
int n, m;

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> m;

    for (int i = 0; i < n; i++) {
        int k;
        cin >> k;

        for (int j = 0; j < k; j++) {
            int a;
            cin >> a;
            h[i].push_back(a);
        }

        for (int j = 0; j < k; j++) {
            int x;
            cin >> x;
            c[i].push_back(x);
        }
    }

    int q;
    cin >> q;

    int len = 0;

    while (q--) {
        int id, mul;
        cin >> id >> mul;
        id--;

        for (int i = 0; i < h[id].size(); i++) {
            a[len + 1] = h[id][i];
            b[len + 1] = c[id][i] * (ll)mul;
            len++;
        }
    }

    fill(dp, dp + len + 1, INF);
    dp[0] = 0;

    vector<pair<int, ll>> v;
    ll cur = 0;

    // for (int i = 1; i <= len; i++) {
    //     cout << a[i] << " ";
    // }
    // cout << "\n";
    // for (int i = 1; i <= len; i++) {
    //     cout << b[i] << " ";
    // }
    // cout << "\n";

    vector<int> v2;

    for (int i = 1; i <= len; i++) {
        dp[i] = dp[i - 1] + b[i];
        dpr[i] = dp[i - 1] + b[i];

        while (!v.empty() && i - a[i] < v.back().first - 1) {
            cur = min(cur, v.back().second);
            v.pop_back();
        }

        if (a[i] == 1) {
            v.push_back({i, cur});
            cur = dp[i - 1];
        }

        while (!v2.empty() && v2.back() + a[v2.back()] <= i)
            v2.pop_back();

        if (!v2.empty()) {
            dpr[i] = min(dpr[i], dpr[v2.back()]);
        }

        while (!v2.empty() && v2.back() + a[v2.back()] <= a[i] + i)
            v2.pop_back();
        v2.push_back(i);

        dp[i] = min(dp[i], cur + b[i]);
        dp[i] = min(dp[i], dpr[i]);
        cur = min(cur, dp[i]);
    }

    // cout << "\n";

    cout << dp[len];

    return 0;
}