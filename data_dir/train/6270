#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/STACK:1000000000")
#include <iostream>
#include <string>
#include <stack>
#include <cstring>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <ctime>
#include <cmath>
#include <assert.h>

using namespace std;

const int MOD = int(1e9 + 7);
const int N = 100000;
const int sizeTree = (1 << 21) + 1;

int tSum[sizeTree];
int a;
int n;

int getSum(int v, int tl, int tr, int l, int r)
{
	if (l > r)
		return 0;
	if (l == tl && r == tr)
		return tSum[v];
	int tm = (tl + tr) / 2;
	return (getSum(2 * v, tl, tm, l, min(tm, r)) + getSum(2 * v + 1, tm + 1, tr, max(l, tm + 1), r)) % MOD;
}

void update(int v, int tl, int tr, int pos, int value)
{
	if (tl == tr)
	{
		tSum[v] = value;
		return;
	}
	int tm = (tl + tr) / 2;
	if (pos <= tm)
		update(2 * v, tl, tm, pos, value);
	else
		update(2 * v + 1, tm + 1, tr, pos, value);
	tSum[v] = (tSum[2 * v] + tSum[2 * v + 1]) % MOD;
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	memset(tSum, 0, sizeof(tSum));
	scanf("%d", &n);
	for (int i = 0; i < n; ++i)
	{
		scanf("%d", &a);
		int sum = getSum(1, 1, N * 10, 1, a);
		int value = (1ll * sum * a + a) % MOD;
		update(1, 1, N * 10, a, value);
	}
	printf("%d", tSum[1]);

    return 0;
}