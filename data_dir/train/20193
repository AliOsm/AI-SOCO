#include <bits/stdc++.h>
using namespace std;

// why am I so weak

int n, m, h;
int a[100055];

vector<int> g[100055], rg[100055], vs;
vector<int> have[100055];

void add_edge(int from, int to) {
	g[from].push_back(to);
	rg[to].push_back(from);
}	

bool used[100055];
bool ban[100055];

void dfs(int v) {
	used[v] = true;

	for (auto u : g[v]) if (!used[u]) {
		dfs(u);
	}

	vs.push_back(v);
}

int size[100055];
int cmp[100055];

void rdfs(int v, int k) {
	size[k]++;
	have[k].push_back(v);
	used[v] = true;
	cmp[v] = k;

	for (auto u : rg[v]) if (!used[u]) {
		rdfs(u, k);
	}
}

int scc() {
	for (int i = 0; i < n; i++) if (!used[i]) {
		dfs(i);
	}

	int k = 0;
	memset(used, false, sizeof(used));

	for (int i = n - 1; i >= 0; i--) if (!used[vs[i]]) {
		rdfs(vs[i], k++);
	}

	return k;
}
int main() {
	cin >> n >> m >> h;

	for (int i = 0; i < n; i++) scanf("%d", &a[i]);

	while (m--) {
		int x, y;
		scanf("%d %d", &x, &y);
		x--, y--;

		if ((a[x] + 1) % h == a[y]) add_edge(x, y);
		if ((a[y] + 1) % h == a[x]) add_edge(y, x);
	}

	for (int i = 0; i < n; i++) if (g[i].empty()) {
		puts("1");
		printf("%d\n", i + 1);
		return 0;
	}

	int k = scc();
	int res = n;

	for (int i = 0; i < n; i++) for (auto u : g[i]) if (cmp[i] != cmp[u]) {
		ban[cmp[i]] = true;
	}

	for (int i = 0; i < k; i++) if (!ban[i]) res = min(res, size[i]);
	
	cout << res << endl;

	for (int i = 0; i < k; i++) if (size[i] == res && !ban[i]) {
		for (auto u : have[i]) printf("%d ", u + 1);
		puts("");
		break;
	}		

	return 0;
}

