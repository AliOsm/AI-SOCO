#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define inf 1000000005
#define all(a) (a).begin(), (a).end()
#define ms(a,x) memset(a, x, sizeof(a))
#define mod 1000000007
#define sz(a) ((int)(a).size())

template<class T> int getbit(T s, int i) { return (s >> i) & 1; }
template<class T> T onbit(T s, int i) { return s | (T(1) << i); }
template<class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template<class T> int cntbit(T s) { return __builtin_popcount(s);}
#define Rep(i,n) for(int i = 0; i < (n); ++i)
#define Repd(i,n) for(int i = (n)-1; i >= 0; --i)
#define For(i,a,b) for(int i = (a); i <= (b); ++i)
#define Ford(i,a,b) for(int i = (a); i >= (b); --i)

typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
#define eps 1e-9
typedef pair<int, int> II;
template<class T> T gcd(T a, T b){ T r; while (b != 0) { r = a % b; a = b; b = r; } return a;}
template<class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
#define PI 2 * acos(0)

#define maxn 1000005

struct Point{
    int x, y, id;
    Point(){};
    Point(int _x, int _y, int _id){
        x = _x; y = _y; id = _id;
    }
    bool operator <(const Point &P) const{
        return x < P.x;
    }
};

bool compare(const Point &P1,const Point &P2) {
    return P1.y < P2.y;
}

Point A[maxn];
int n;
int num = 1000;


int main() {
//  freopen("in.txt", "r", stdin);
    ios_base::sync_with_stdio(0); cin.tie(NULL);

    cin >> n;
    For(i, 1, n) {
        cin >> A[i].x >> A[i].y;
        A[i].id = i;
    }
    sort(A + 1, A + n + 1);
    vector<int> res;
    for(int run = 0; run <= (n - 1) / num; run++){
        vector<Point> V;
        for(int i = run * num + 1; i <= run * num + num && i <= n; i++){
            V.pb(A[i]);
        }
        sort(all(V), compare);
        if(run & 1) Rep(i, sz(V)) res.pb(V[i].id);
        else {
            for(int i = sz(V) - 1; i >= 0; i--) res.pb(V[i].id);
        }
    }

    Rep(i, sz(res)) cout << res[i] << " ";

    return 0;
}
