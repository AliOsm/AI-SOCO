#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define lc (p<<1)
#define rc ((p<<1)|1)
int mod,n,q;
inline int add(int a,int b)
{
	if((a+=b)>=mod)a-=mod;
	return a;
}
inline int mult(int a,int b)
{
	long long t=1ll*a*b;
	if(t>=mod)t%=mod;
	return t;
}
inline int power(int a,int b)
{
	int out=1;
	while(b)
	{
		if(b&1)out=mult(out,a);
		a=mult(a,a);
		b>>=1;
	}
	return out;
}
inline void exgcd(ll a,ll b,ll &x,ll &y)
{
	if(!b)
	{
		x=1,y=0;
		return;
	}
	exgcd(b,a%b,y,x);
	y-=(a/b)*x;
}
vector<int> fac;
int fnum,a[100010];
typedef vector<int> num;
inline vector<int> trans(int x)
{
	vector<int> ret(fnum+1);
	for(int i=1;i<=fnum;i++)
	{
		while(x%fac[i]==0)ret[i]++,x/=fac[i];
	}
	ret[0]=x%mod;
	return ret;
}
class tree
{
	public:
		num lzy[400010],v[400010];
		int sum[400010],lzyv[400010],id[400010];
		void pushnow(int p,num vnum,int val)
		{
			sum[p]=::mult(sum[p],val);
			lzyv[p]=::mult(lzyv[p],val);
			if(!id[p])
			{
				for(int i=1;i<=fnum;i++)lzy[p][i]+=vnum[i];
				lzy[p][0]=::mult(lzy[p][0],vnum[0]);
			}
			else
			{
				for(int i=1;i<=fnum;i++)v[p][i]+=vnum[i];
				v[p][0]=::mult(v[p][0],vnum[0]);
			}
		}
		void pushdown(int p)
		{
			if(lzyv[p]!=1||lzy[p][0]!=1)
			{
				pushnow(lc,lzy[p],lzyv[p]);
				pushnow(rc,lzy[p],lzyv[p]);
				lzyv[p]=1;
				lzy[p].clear();lzy[p].resize(fnum+1);
				lzy[p][0]=1;
			}
		}
		void pushup(int p)
		{
			sum[p]=add(sum[lc],sum[rc]);
		}
		void build(int p,int l,int r)
		{
			lzyv[p]=1;
			lzy[p]=trans(1);
			if(l==r)
			{
				sum[p]=a[l]%mod;
				id[p]=l;
				v[p]=trans(a[l]);
				return;
			}
			int mid=(l+r)>>1;
			build(lc,l,mid);
			build(rc,mid+1,r);
			pushup(p);
		}
		void mult(int p,int l,int r,int ml,int mr,int v)
		{
			if(ml<=l&&r<=mr)
			{
				pushnow(p,trans(v),v);
				return;
			}
			pushdown(p);
			int mid=(l+r)>>1;
			if(ml<=mid)mult(lc,l,mid,ml,mr,v);
			if(mr>mid)mult(rc,mid+1,r,ml,mr,v);
			pushup(p);
		}
		void div(int p,int l,int r,int pos,int val)
		{
			if(l==r)
			{
				num tmp=trans(val);
				ll x,y;
				exgcd(tmp[0],mod,x,y);
				x=((x%mod)+mod)%mod;
				v[p][0]=::mult(v[p][0],x);
				sum[p]=v[p][0];
				for(int i=1;i<=fnum;i++)
				{
					v[p][i]-=tmp[i];
					sum[p]=::mult(sum[p],power(fac[i],v[p][i]));
				}
				return;
			}
			pushdown(p);
			int mid=(l+r)>>1;
			if(pos<=mid)div(lc,l,mid,pos,val);
			else div(rc,mid+1,r,pos,val);
			pushup(p);
		}
		int query(int p,int l,int r,int ql,int qr)
		{
			if(ql<=l&&r<=qr)return sum[p];
			pushdown(p);
			int mid=(l+r)>>1,ret=0;
			if(ql<=mid)ret=query(lc,l,mid,ql,qr);
			if(qr>mid)ret=add(ret,query(rc,mid+1,r,ql,qr));
			return ret;
		}
}T;
int opt,l,r,x;
int main()
{
	scanf("%d%d",&n,&mod);
	int tmp=mod;
	fac.push_back(0);
	for(int i=2;i*i<=mod;i++)
	{
		if(tmp%i==0)
		{
			fac.push_back(i);
			while(tmp%i==0)tmp/=i;
		}
	}
	if(tmp!=1)fac.push_back(tmp);
	fnum=fac.size()-1;
	for(int i=1;i<=n;i++)scanf("%d",&a[i]);
	T.build(1,1,n);
	scanf("%d",&q);
	while(q--)
	{
		scanf("%d",&opt);
		if(opt==1)
		{
			scanf("%d%d%d",&l,&r,&x);
			T.mult(1,1,n,l,r,x);
		}
		else if(opt==2)
		{
			scanf("%d%d",&l,&x);
			T.div(1,1,n,l,x);
		}
		else
		{
			scanf("%d%d",&l,&r);
			printf("%d\n",T.query(1,1,n,l,r));
		}
	}
	return 0;
}