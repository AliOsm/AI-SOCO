#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define ndl '\n'
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef pair<int, ll> pil;
typedef pair<ll, int> pli;
typedef pair<int, ull> piu;
typedef vector<vector<int>> matrix;

const ll INF = 1e18 + 123;
const ld EPS = 1e-9;
const int inf = 1e9 + 123;
const int MOD = 1e9 + 7;
const int N = 2123;
const int M = 1e6 + 123;
const double pi = acos(-1.0);
const int dx[] = {0, 0, 1, -1};
const int dy[] = {1, -1, 0, 0};

string s[] = {"1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011"};

int m[10];

int calc(string &s){
    int res = 0;
    for (int i = 0; i < 7; i++){
        res += (1 << i) * (s[i] - '0');
    }
    return res;
}

vector<pii> g[N];

bool dp[N][N];

void solve(){
    for (int i = 0; i <= 9; i++){
        m[i] = calc(s[i]);

    }
    int n, k;
    cin >> n >> k;
    string t;
    for (int i = 1; i <= n; i++){
        cin >> t;
        int x = calc(t);
        for (int d = 0; d <= 9; d++){
            if ((m[d] & x) == x){
                g[i].pb({d, bit(m[d]) - bit(x)});
            }
        }
    }
    dp[n+1][0] = 1;
    for (int i = n; i >= 1; i--){
        for (pii p : g[i]){
            for (int j = p.y; j <= k; j++){
                dp[i][j] |= dp[i+1][j-p.y];
            }
        }
    }
    if (!dp[1][k]){
        cout << -1;
        return;
    }
    for (int i = 1; i <= n; i++){
        int cur = -1, w;
        for (pii p : g[i]){
            if (k >= p.y && dp[i+1][k-p.y]){
                w = p.y;
                cur = p.x;
            }
        }
        assert(~cur);
        cout << cur;
        k -= w;
    }
}

int main(){
    #ifdef KAZAKH
        freopen("input.txt", "r", stdin);
    #endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t = 1;
    //cin >> t;
    for (int i = 1; i <= t; i++){
        //cout << "case #" << i << ": ";
        solve();
    }
    return 0;
}
