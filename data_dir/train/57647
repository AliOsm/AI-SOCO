#include<bits/stdc++.h>
#define PI 3.141592653
#define EPS 1e-7
#define ll long long
#define fr first
#define sc second
#define ii pair < int , int >
#define mp make_pair
using namespace std;
/// points
struct point

{
    double x, y;
    point()

    {
        x = y = 0.0;

    }
    point(double _x, double _y) : x(_x), y(_y) {}
    point(const point &p) : x(p.x), y(p.y) {}
    bool operator < (point other) const /// override less than operator

    {
        if (fabs(x - other.x) > EPS) /// useful for sorting
            return x < other.x; /// first criteria , by x-coordinate
        return y < other.y;/// second criteria, by y-coordinate

    }
    bool operator > (point other) const /// override less than operator

    {
        if (fabs(x - other.x) > EPS) /// useful for sorting
            return x > other.x; /// first criteria , by x-coordinate
        return y > other.y;/// second criteria, by y-coordinate

    }
    bool operator == (point other) const

    {
        return (fabs(x - other.x) < EPS && (fabs(y - other.y) < EPS));
    }
    point operator+(const point &p) const
    {
        return point(x + p.x, y + p.y);
    }
    point operator-(const point &p) const
    {
        return point(x - p.x, y - p.y);
    }
    point operator*(double c) const
    {
        return point(x*c, y * c);
    }
    point operator/(double c) const
    {
        return point(x / c, y / c);
    }
};
/// Lines
struct line /// ax + by + c = 0
{
    double a, b, c;
};
void pointsToLine(point p1, point p2, line &l)
{
    if (fabs(p1.x - p2.x) < EPS) /// vertical line is fine
    {
        l.a = 1.0;
        l.b = 0.0;
        l.c = -p1.x; /// default values
    }
    else
    {
        l.a = -(double)(p1.y - p2.y) / (p1.x - p2.x);
        l.b = 1.0; /// IMPORTANT: we fix the value of b to 1.0
        l.c = -(double)(l.a * p1.x) - p1.y;
    }
}
void point_and_m_ToLine(point p,double m,line &l)
{
    l.a=-1*m;
    l.b=1;
    l.c=m*p.x-p.y;
}
bool areParallel(line l1, line l2) /// check coefficients a & b
{
    return (fabs(l1.a-l2.a) < EPS) && (fabs(l1.b-l2.b) < EPS);
}
bool areSame(line l1, line l2) /// also check coefficient c

{
    return areParallel(l1 ,l2) && (fabs(l1.c - l2.c) < EPS);

}/// returns true (+ intersection point) if two lines are intersect
bool areIntersect(line l1, line l2, point &p)
{
    if (areParallel(l1, l2)) return false; /// no intersection // solve system of 2 linear algebraic equations with 2 unknowns
    p.x = (l2.b * l1.c - l1.b * l2.c) / (l2.a * l1.b - l1.a * l2.b); /// special case: test for vertical line to avoid division by zero
    if (fabs(l1.b) > EPS) p.y = -(l1.a * p.x + l1.c);
    else p.y = -(l2.a * p.x + l2.c);
    if(fabs(p.x)<EPS)p.x=0;
    if(fabs(p.y)<EPS)p.y=0;
    return true;
}
int main()
{
    int n,m;
    point r[100],b[100];
    cin>>n>>m;
    for(int i=0; i<n; i++)cin>>r[i].x>>r[i].y;
    for(int i=0; i<m; i++)cin>>b[i].x>>b[i].y;
        if(n!=m)return cout<<"No",0;
    sort(r,r+n);
    do
    {
        bool res=false;
        for(int i=0; i<n; i++)
        {
            bool bo=true;
            for(int j=0; j<n; j++)
            {
                if(i==j)continue;
                line l1;
                pointsToLine(r[i],b[i],l1);
                line l2;
                pointsToLine(r[j],b[j],l2);
                point p;
                if(areIntersect(l1,l2,p))
                    if(((p.x<=r[i].x && p.x>=b[i].x)||(p.x<=b[i].x && p.x>=r[i].x)) &&
                            ((p.y<=r[i].y && p.y>=b[i].y)||(p.y<=b[i].y && p.y>=r[i].y)) &&
                            ((p.x<=r[j].x && p.x>=b[j].x)||(p.x<=b[j].x && p.x>=r[j].x)) &&
                            ((p.y<=r[j].y && p.y>=b[j].y)||(p.y<=b[j].y && p.y>=r[j].y)) )
                        bo=false;
            }
            if(bo)res=true;
        }
        if(res)return cout<<"Yes",0;
    }
    while(next_permutation(r,r+n));
    cout<<"No";
}
