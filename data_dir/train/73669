#include<bits/stdc++.h>
using namespace std;

const int N = 1005;
vector<int> adj[N];
int deg[N];

bool vis[N];
vector<int> leaves;

void dfs(int u, int p) {
    vis[u] = p;
    for (int v: adj[u])
        if (v != p)
            dfs(v, u);
    if (adj[u].size() <= 1)
        leaves.push_back(u);
}

int depth(int u, int p) {
    int ans = 0;
    for (int v: adj[u])
        if (v!=p)
            ans = max(ans, 1+depth(v, u));
    return ans;
}


pair<int, int> getcenter(int u) {
    leaves.clear();
    dfs(u, -1);

    queue<int> q;
    for (int x: leaves) {
        deg[x] = 0;
        q.push(x);
    }

    int ans = 0;
    while(q.size()) {
        ans = q.front();
        q.pop();

        for (int v: adj[ans]) {
            deg[v]--;
            if (deg[v] == 1)    q.push(v);
        }
    }

    return make_pair(depth(ans, -1), ans);
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n, m;
    cin>>n>>m;

    for (int i=1; i<=m; i++) {
        int x, y;
        cin>>x>>y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }

    for (int i=1; i<=n; i++)
        deg[i] = adj[i].size();

    vector<pair<int, int>> centers;
    for (int i=1; i<=n; i++) {
        if (vis[i])     continue;
        centers.push_back(getcenter(i));
    }

    sort(centers.rbegin(), centers.rend());
    vector<pair<int, int>> ans;

    for (int i=1; i<centers.size(); i++) {
        int u = centers[0].second;
        int v = centers[i].second;
        adj[u].push_back(v);
        adj[v].push_back(u);
        ans.emplace_back(u, v);
    }

    int dd = 0;
    for (int i=1; i<=n; i++)
        dd = max(dd, depth(i, -1));
    cout<<dd<<endl;
    for (auto pr: ans)
        cout<<pr.first<<" "<<pr.second<<"\n";
}
