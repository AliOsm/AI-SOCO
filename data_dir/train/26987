
#include "bits/stdc++.h"
using namespace std;
long long Mod = 1000000007;
long long Ans[3][3];

void MatrixExponentiation(int Base[3][3] , int exp){
	if( exp == 0 ){
		Ans[1][1] = 1LL;
		Ans[1][2] = 0LL;
		Ans[2][1] = 0LL;
		Ans[2][2] = 1LL;
	}
	else{
		MatrixExponentiation( Base , exp >> 1 );
		long long Temp[3][3];
		Temp[1][1] = Temp[1][2] = Temp[2][1] = Temp[2][2] = 0LL;

		for( int i = 1 ; i <= 2 ; ++i ){
			for( int j = 1 ; j <= 2 ; ++j ){
				for( int k = 1 ; k <= 2 ; ++k )
					Temp[i][j] = ( Temp[i][j] + ( Ans[i][k] * Ans[k][j] ) % Mod ) % Mod;
			}
		}

		Ans[1][1] = Temp[1][1];
		Ans[1][2] = Temp[1][2];
		Ans[2][1] = Temp[2][1];
		Ans[2][2] = Temp[2][2];
		Temp[1][1] = Temp[1][2] = Temp[2][1] = Temp[2][2] = 0LL;

		if( exp&1 ){
			for( int i = 1 ; i <= 2 ; ++i ){
				for( int j = 1 ; j <= 2 ; ++j ){
					for( int k = 1 ; k <= 2 ; ++k )
						Temp[i][j] = ( Temp[i][j] + (Ans[i][k] * Base[k][j]) % Mod ) % Mod;
				}
			}
		
			Ans[1][1] = Temp[1][1];
			Ans[1][2] = Temp[1][2];
			Ans[2][1] = Temp[2][1];
			Ans[2][2] = Temp[2][2];
		}
	}
}

int main(){
	int N;
	scanf( "%d" , &N );

	if( N == 1 ){
		puts( "0" );
		return 0;
	}
	else if( N == 2 ){
		puts( "3" );
		return 0;
	}
	else if( N == 3 ){
		puts( "6" );
		return 0;
	}

	int Base[3][3];
	Base[1][1] = 2;
	Base[1][2] = 3;
	Base[2][1] = 1;
	Base[2][2] = 0;
	MatrixExponentiation(Base , N - 3);
	long long Count = ( ( Ans[1][1] * 6 ) % Mod + ( Ans[1][2] * 3 ) % Mod ) % Mod; 
	printf( "%lld\n" , Count );
	return 0;
}