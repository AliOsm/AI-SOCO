#include <bits/stdc++.h> 

#define pb push_back 

using namespace std;

const int N = 1e5 + 5;

int u, v, n, m, col[N], sz[2][N], num;

vector < int > g[N];

bool used[N];

void dfs (int u, int cur, int cl = 1)
{
    used[u] = 1;
    col[u] = cl;
    ++sz[cl][cur];
    for (auto to : g[u])
    {
        if (used[to])
            if (col[u] == col[to])
            {
                puts ("0 1");
                exit (0);
            }
        if (!used[to])  
            dfs (to, cur, cl ^ 1);
    }
}

int main ()
{
//  freopen (fname".in", "r", stdin);
//  freopen (fname".out", "w", stdout);
    scanf ("%d%d", &n, &m);
    for (int i = 0;i < m;i++)
    {
        scanf ("%d%d", &u, &v);
        g[u].pb (v);
        g[v].pb (u);
    }
    if (!m)
    {
        printf ("3 %I64d", (1ll * n * (n - 1) * (n - 2)) / 6ll);
        return 0;
    }
    for (int i = 1;i <= n;i++)
        if (!used[i])
            dfs (i, ++num);
    bool ok = 1;
    int cnt = 0;
    for (int i = 1;i <= num;i++)
    {
        cnt += (sz[0][i] + sz[1][i]) == 2;
        if (sz[0][i] + sz[1][i] > 2)
            ok = 0;
    }
    if (ok)
    {
        printf ("2 %I64d", 1ll * cnt * (n - 2));
        return 0;
    }
    long long result = 0;
    for (int i = 1;i <= num;i++)    
        result += ((1ll * sz[0][i] * (sz[0][i] - 1))) / 2ll,
        result += ((1ll * sz[1][i] * (sz[1][i] - 1))) / 2ll;
    printf ("1 %I64d", result);
    return 0;
}       