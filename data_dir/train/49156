/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

#define X first
#define Y second
typedef pair<int, int> point;
inline point f(point p) {
	return {p.X + p.Y + 2e6, p.Y - p.X + 2e6};
}

const int N = 4e6 + 5;
vector<point> Add[N], Rem[N];
int r, seg[N << 2], lazy[N << 2];

inline void add(int id, int x) {
	seg[id] += x;
	lazy[id] += x;
}

inline void shift(int id) {
	add(id << 1 | 1, lazy[id]);
	add(id << 1, lazy[id]);
	lazy[id] = 0;
}

inline void update(int l, int r, int x, int id = 1, int st = 0, int en = N) {
	if (r <= st || en <= l)
		return;
	if (l <= st && en <= r)
		return add(id, x);
	shift(id);
	int mid = st + en >> 1;
	update(l, r, x, id << 1, st, mid);
	update(l, r, x, id << 1 | 1, mid, en);
	seg[id] = max(seg[id << 1], seg[id << 1 | 1]);
}

inline int get(int l, int r, int id = 1, int st = 0, int en = N) {
	if (r <= st || en <= l)
		return 0;
	if (l <= st && en <= r)
		return seg[id];
	shift(id);
	int mid = st + en >> 1;
	return max(get(l, r, id << 1, st, mid), get(l, r, id << 1 | 1, mid, en));
}

inline void read_input() {
	int n;
	cin >> n >> r;
	while (n--) {
		int x, y;
		cin >> x >> y;
		point L = f({x - r, y});
		point R = f({x + r, y});
		Rem[max(R.Y, 0)].push_back({L.X, R.X});
		Add[min(L.Y, N - 1)].push_back({L.X, R.X});
	}
}

inline void solve() {
	int ans = 0;
	for (int i = N - 1; ~i; i--) {
		for (auto p: Add[i])
			update(p.X, ++p.Y, 1);
		ans = max(ans, get(0, N));
		for (auto p: Rem[i])
			update(p.X, ++p.Y, -1);
	}
	cout << ans;
}

int main() {
	ios:: sync_with_stdio(0), cin.tie(0), cout.tie(0);
	read_input(), solve();
	return 0;
}
