#include <bits/stdc++.h>

using namespace std;

const int N = 1010;

int n, m, k;
int r[N], cx[N], cy[N], kx[N], ky[N];
vector<int> g[N], g2[N];
int dp[N][N];
int fa[N], dep[N], ind[N], id[N];

long long sqdis(long long x, long long y, long long a, long long b) {
  return (x - a) * (x - a) + (y - b) * (y - b);
}

bool in(int i, int j) {
  long long d = sqdis(cx[i], cy[i], cx[j], cy[j]);
  if (r[i] > r[j]) {
    int delta = r[i] - r[j];
    if (d < 1ll * delta * delta) {
      return 1;
    }
  }
  return 0;
}

bool in(int v, int x, int y) {
  long long d = sqdis(cx[v], cy[v], x, y);
  if (d < 1ll * r[v] * r[v]) {
    return 1;
  }
  return 0;
}

int dfs(int v, int x, int y) {
  for (int u : g2[v]) {
    if (in(u, x, y)) {
      return dfs(u, x, y);
    }
  }
  return v;
}

int getid(int x, int y) {
  return dfs(0, x, y);
}

void dfs(int v, int p) {
  fa[v] = p;
  for (int u : g2[v]) {
    dep[u] = dep[v] + 1;
    dfs(u, v);
  }
}

int lca(int a, int b) {
  if (dp[a][b] != -1) return dp[a][b];
  if (dep[a] < dep[b]) {
    swap(a, b);
  }
  if (a == b)
    return dp[a][b] = a;
  return dp[a][b] = lca(fa[a], b);
}

int main() {
  memset(dp, -1, sizeof(dp));
  scanf("%d%d%d", &n, &m, &k);
  for (int i = 1; i <= n; ++i) {
    scanf("%d%d", kx + i, ky + i);
  }
  for (int i = 1; i <= m; ++i) {
    scanf("%d%d%d", r + i, cx + i, cy + i);
  }
  for (int i = 1; i <= m; ++i) {
    for (int j = 1; j <= m; ++j) {
      if (in(i, j)) {
        g[i].push_back(j);
        ind[j]++;
      }
    }
  }
  queue<int> q;
  for (int i = 1; i <= m; ++i) {
    if (ind[i] == 0) {
      q.push(i);
      g2[0].push_back(i);
    }
  }
  while (q.size()) {
    int v = q.front();
    q.pop();
    for (auto u : g[v]) {
      ind[u]--;
      if (ind[u] == 0) {
        q.push(u);
        g2[v].push_back(u);
      }
    }
  }
  for (int i = 1; i <= n; ++i) {
    id[i] = getid(kx[i], ky[i]);
  }
  dfs(0, -1);
  for (int i = 0, a, b; i < k; ++i) {
    scanf("%d%d", &a, &b);
    a = id[a], b = id[b];
    int c = lca(a, b);
    printf("%d\n", dep[a] - dep[c] + dep[b] - dep[c]);
  }
  return 0;
}
