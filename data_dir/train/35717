#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
#define sz(x) (int)(x).size()
#define mem(a,v) memset((a), (v), sizeof (a))
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int _i = 0; _i < (n); _i++) ni(a[_i])
#define nal(a, n) for (int _i = 0; _i < (n); _i++) nl(a[_i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pil pair<int, long long>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vil vector<pil>
#define vll vector<pll>
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define st first
#define nd second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> oset;
const double pi = acos(-1);
const int inf = 1e9 + 7;
const int MOD = 998244353;
const int root = 15311432;
const int iroot = 469870224;
const int mxpw = 1 << 23;
const int N = 3e3 + 5;

int pw(int a, int b) {
  int r = 1;
  while (b)
    if (b & 1)
      r = (ll)r * (ll)a%MOD, b--;
    else
      a = (ll)a * (ll)a%MOD, b /= 2;
  return r;
}

void fft(vector<int>& x, bool inv) {
  int n = sz(x);
  for (int i = 1, j = 0; i < n; i++) {
    int bit = n>>1;
    for (; j & bit; bit /= 2)
      j ^= bit;
    j ^= bit;
    if (i < j)
      swap(x[i], x[j]);
  }
  vector<int> tmp;
  int cw = inv ? iroot : root;
  for (int i = 2; i < mxpw; i *= 2) {
    cw = (ll)cw * (ll)cw % MOD;
    tmp.pb(cw);
  }
  int id = sz(tmp)-1;
  for (int i = 2; i <= n; i *= 2) {
    cw =  tmp[id--];
    for (int j = 0; j < n; j += i) {
      for (int k = j, w = 1; 2*(k-j) < i; k++) {
        int a = x[k], b = (ll)w * (ll)x[k+i/2]%MOD;
        x[k] = a+b-(a+b<MOD?0:MOD), x[k+i/2] = a-b+(a-b<0?MOD:0);
        w = (ll)w * (ll)cw % MOD;
      }
    }
  }
  if (inv) {
    n = pw(n, MOD-2);
    for (int& t: x)
      t = (ll)t * (ll)n % MOD;
  }
}

ll g(ll k) {
  return k * (3*k-1) / 2;
}

vector<int> mul(vector<int> x, vector<int> y) {
  fft(x, 0), fft(y, 0);
  for (int i = 0; i < sz(x); i++)
    x[i] = (ll)x[i]*(ll)y[i]%MOD;
  fft(x, 1);
  return x;
}

vector<int> inv(vector<int> x, int n) {
  vector<int> pol(1,1), cur(1,1);
  int c = 1, k = 1;
  for (; k <= n; k *= 2) {
    while (sz(pol) < 4*k)
      pol.push_back(0), cur.push_back(0);
    for (; c < 2*k; c++) pol[c] = c < sz(x) ? x[c] : 0;
    vector<int> tmp = mul(pol, cur);
    tmp[0] = 2 - tmp[0] + (2-tmp[0]<0 ? MOD : 0);
    for (int i = 1; i < 2*k; i++)
      tmp[i] = !tmp[i] ? 0 : MOD-tmp[i];
    for (int j = 2*k; j < 4*k; j++)
      tmp[j] = 0;
    cur = mul(cur, tmp);
  }
  while (sz(cur) > k) 
    cur.pop_back();
  return cur;
}

int dp[N][N];

int calc(int n, int k) {
  if (~dp[n][k])
    return dp[n][k];
  if (2 * n <= k * 1ll * (k+1))
    return dp[n][k] = (2 * n == k * 1ll * (k+1));
  dp[n][k] = calc(n - (k * (k+1)) / 2, k) + calc(n, k+1);
  return dp[n][k] = (dp[n][k] < MOD ? dp[n][k] : dp[n][k]-MOD);
}


int nn, kk, aans = 0;

bool ok(vector<int>& cur, int k) {
  int sm = 0;
  for (int i: cur)
    sm += i;
  if (sm > nn)
    return 0;
  if (k <= 1)
    return 1;
  vi nx;
  for (int i = sz(cur)-1; ~i; i--)
    for (int j = 0; j < cur[i]; j++)
      nx.pb(sz(cur)-i);
  return ok(nx, k-1);
}

vector<int> cur;

void dfs(int i) {
  for (int j = i; j <= nn; j++) {
    cur.pb(j);
    if (ok(cur,kk)) {
      aans++;
      dfs(j);
      cur.pop_back();
    } else {
      cur.pop_back();
      return;
    }
  }
}

int main() {
  int n, k; scanf("%d %d", &n, &k);
  if (k == 1) {
    vector<int> pol(n+1,0);
    pol[0] = 1;
    for (int i = 0; g(i) <= n; i++)
      pol[g(i)] = (i&1?MOD-1:1);
    for (int i = 0; g(-i) <= n; i++)
      pol[g(-i)] = (i&1?MOD-1:1);
    pol = inv(pol, n);
    int ans = 0;
    for (int i = 1; i <= n; i++)
      ans = ans+pol[i] < MOD ? ans+pol[i] : ans+pol[i]-MOD;
    return !printf("%d\n", ans);
  }
  if (k == 2) {
    mem(dp, -1);
    int ans = 0;
    for (int i = 1; i <= n; i++) {
      int v = calc(i, 1);
      ans = v+ans < MOD ? v+ans : v+ans-MOD;
    }
    return !printf("%d\n",ans);
  }
  nn = n, kk = k;
  dfs(1);
  printf("%d\n", aans);
  return 0;
}
