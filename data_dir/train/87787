#include <string.h>
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <set>

#include <map>
#include <vector>
#include <string>
#include <stdlib.h>

#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf

#define pf printf
#define mp make_pair

using namespace std;
const int N = 1000100;
const int mod = 998244353;

int n,m;
vector<int> g[N];

vector<int> frac[N];
ll sum[N],tot;
int k_num[N],dp[N];
int a[N];

void init(){
	int max_n = 1000000;
	for(int i = 2; i <=max_n; ++i) {
		for(int j = 2*i; j <=max_n; j+=i) {
			frac[j].pb(i);
		}
	}
}

ll gcd(ll a, ll b) {
	return b?gcd(b,a%b):a;
}

void dfs(int t, int f) {
	sum[t]=a[t];
	for(int u:g[t]) {
		if(u==f)continue;
		dfs(u,t);
		sum[t]+=sum[u];
	}
	ll gd = gcd(tot, sum[t]);
	gd = tot/gd;
	//printf("t = %d tot = %lld sum = %lld\n",t,tot,sum[t]);
	if(gd<=n) {
		for(ll i = gd; i <=n;i+=gd) {
			k_num[i]++;
			//printf("t = %d frac = %d\n",t,i);
		}
	}
}

int sol() {
	tot = 0;
	fr(i,1,n+1) {
		tot += a[i];
	}
	dfs(1,0);
	int ans = 1;
	dp[1] = 1;
	for(int i = 2; i<=n;++i) {
		//printf("i = %d knum = %d\n",i,k_num[i]);
		if(k_num[i]==i) {
			dp[i] = 1;
			for(int j = 0; j < frac[i].size();++j) {
				dp[i] = (dp[i]+dp[frac[i][j]])%mod;
				//printf("i = %d frac = %d dp = %d\n",i,frac[i][j],dp[i]);
			}
			ans = (ans + dp[i])%mod;
		}
	}
	return ans;
}

int main() {
	init();
	cin>>n;
	fr(i,1,n+1){
		sf("%d",&a[i]);
	}
	fr(i,1,n) {
		int u;
		sf("%d",&u);
		g[u].pb(i+1);
		g[i+1].pb(u);
	}
	printf("%d\n",sol());
}

