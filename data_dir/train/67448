#pragma GCC optimize ("O3")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

const int N = 505;
int dp1[N][N];
int dp2[N][N];
int n, k;
string s;

int solve(int l, int r)
{
	if(l > r)
		return 0;
	int &ret = dp1[l][r];
	if(~ret)
		return ret;
	if(s[l] == s[r])
		return ret = solve(l + 1, r - 1);
	else
		return ret = solve(l + 1, r - 1) + 1;
}

int solve2(int idx, int used_k)
{
		if(idx == n)
			return 0;
		if(used_k == k - 1)
			return solve(idx, n - 1);
		int &ret = dp2[idx][used_k];
		if(~ret)
			return ret;
		ret = 1e9;
		for(int i = idx; i < n; i++)
			ret = min(ret, solve2(i + 1, used_k + 1) + solve(idx, i));
		return ret;
}

void output2(int l, int r)
{
		if(l > r)
			return;
		if(l == r)
		{
			cout << s[l];
			return;
		}
		cout << s[l];
		output2(l + 1, r - 1);
		cout << s[l];
}

void output1(int idx, int used_k)
{
	if(idx == n)
		return;
	if(used_k > 0)
		cout << "+";
	if(used_k == k - 1)
	{
		return output2(idx, n - 1);
	}
	int &cur = dp2[idx][used_k];
	for(int i = idx; i < n; i++)
	{
		if(solve2(i + 1, used_k + 1) + solve(idx, i) == cur)
		{
			output2(idx, i);
			return output1(i + 1, used_k + 1);
		}
	}
}
int main()
{
	cin >> s >> k;
	n = (int)s.size();
	memset(dp1, -1, sizeof dp1);
	memset(dp2, -1, sizeof dp2);
	cout << solve2(0, 0) << '\n';
	output1(0, 0);
	return 0;
}
