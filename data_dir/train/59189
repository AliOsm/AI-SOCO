#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007LL
#define maxn 100005
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2

using namespace __gnu_pbds;
using namespace std ;

template <class T>  inline void smax(T &x,T y){ x = max((x), (y)); }
template <class T>  inline void smin(T &x,T y){ x = min((x), (y)); }

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<i64, i64> pii;

vector < pair<int,int> > v ;

char s[1000005] ;

int main()
{
    int i , j , k , l , m , n ;

    scanf("%s",s) ;

    int cur = 0 ;

    for(i=0 ; s[i]!='\0' ; i++)
    {
        if( i==0 || s[i]==s[i-1] ) cur++ ;
        else{

            v.pb( mp( s[i-1]-'a' , cur ) ) ;
            cur = 1 ;
        }
    }
    v.pb( mp( s[i-1]-'a' , cur ) ) ;

    int ans = 0 ;

    while( v.size() > 1 )
    {
        ans++ ;

      //  printf("printing\n") ;
      //  for(i=0 ; i<v.size() ; i++) printf("%d %d\n",v[i].xx,v[i].yy) ;

        vector < pair<int,int> > temp ;

        for(i=0 ; i<v.size() ; i++)
        {
            if( i==0 || (i+1) == (int)v.size() )
            {
                if( v[i].yy>1 ) temp.pb( mp( v[i].xx,v[i].yy-1 ) ) ;
            }
            else if( v[i].yy>2 ) temp.pb( mp(v[i].xx,v[i].yy-2) ) ;
        }
     //   printf("%d\n",temp.size()) ;
      //  for(i=0 ; i<temp.size() ; i++) printf("%d %d\n",temp[i].xx,temp[i].yy) ;
        v.clear() ;
        cur = 0 ;
        for(i=0 ; i<temp.size() ; i++)
        {
            if( i==0 || temp[i].xx == temp[i-1].xx ) cur+= temp[i].yy ;
            else{
                v.pb( mp( temp[i-1].xx , cur ) ) ;
                cur = temp[i].yy ;
            }
        }
        if( temp.size() > 0 ) v.pb( mp( temp[i-1].xx , cur ) ) ;
    }

    printf("%d\n",ans) ;

    return 0 ;
}
