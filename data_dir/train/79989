#pragma GCC optimize("O3")
#include <bits/stdc++.h>

using namespace std;
using namespace __gnu_cxx;


#define f first
#define s second
#define sz(x) (int)(x).size()
#define em empty()
#define pb push_back
#define eb emplace_back
#define pf push_front
#define mem(a,b,s) for(int i=0 ; i<=s ; ++i) a[i]=b;
#define mem2(a,r,c,b) for(int i=0 ; i<=r ; ++i)    for(int j=0 ; j<=c ; ++j)    a[i][j]=b;
#define all(a) a.begin(),a.end()
#define rall(a)	a.rbegin(),a.rend()
#define mp make_pair
#define in insert
#define sc(x) scanf("%d",&(x))
#define scl(a)	scanf("%lld",&a)
#define sc2(a,b)	scanf("%d%d",&a,&b)
#define rep(x,a,b)	for(auto x=a ; x<=b ; ++x)
#define irep(x,a,b)	for(auto x=a ; x>=b ; --x)
#define debug(x)	cerr << #x << " is " << x << endl;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<pair<int,int> > vii;
typedef set<int> si;
typedef set<pair<int,int> > sii;
typedef map<int,int>	mii;
typedef pair<int,char>	ic;
typedef pair<int,string> is;
typedef long double ld;
typedef priority_queue<ii> pqii;
typedef priority_queue<int>pqi;
typedef string BIGINT;

const long double pi=acos(-1);
const long double EPS = 1e-9;
const int MAXN=1e5+10;
const ll MOD=2e9+7;
const int oo=2e9+10;
const ll OO=1e18;

int dx[]={0,1,0,-1,-1,-1,1,1};
int dy[]={1,0,-1,0,-1,1,-1,1};


const int N=30,M=2005;

int t,n,a[M],cnt[N],ans,cum[N][M];
vi v[N];

int getMax(int l, int r)
{
	int ret=0;
	rep(i,1,N-1)	ret=max(ret,cum[i][r]-cum[i][l]);
	return ret;
}

int main()
{
//	srand(time(0));
//	ios_base::sync_with_stdio(false);
//	cin.tie(NULL);
//	cout.tie(NULL);
#ifndef ONLINE_JUDGE
 	freopen("In.txt","r",stdin);
//	freopen("Out.txt","w",stdout);
#else
//	freopen("stations.in","r",stdin);
//	freopen("output.txt","w",stdout);
#endif

 	scanf("%d",&t);
 	while(t--)
 	{
 		scanf("%d",&n);
 		ans=1;
 		rep(i,0,N-1)	v[i].clear();
 		memset(cum,0,sizeof cum);
 		memset(cnt,0,sizeof cnt);
 		rep(i,1,n)	scanf("%d",a+i),v[a[i]].pb(i),++cum[a[i]][i];
 		rep(i,0,N-1)	rep(j,1,n)	cum[i][j]+=cum[i][j-1];
 		rep(i,1,n)
 		{
 			int siz=sz(v[a[i]]),c=cnt[a[i]];
 			if((c+1)*2>siz)	continue;
 			int l=v[a[i]][c],r=v[a[i]][siz-1-c]-1;
 			ans=max(ans,(c+1)*2+getMax(l,r));
 			++cnt[a[i]];
 		}
 		printf("%d\n",ans);
 	}
}
