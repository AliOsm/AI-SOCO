#include<bits/stdc++.h>
#define LL long long
#define fi first
#define se second
#define mk make_pair
#define PII pair<int, int>
#define y1 skldjfskldjg
#define y2 skldfjsklejg
using namespace std;

const int N = 1e5 + 7;
const int inf = 0x3f3f3f3f;
const LL INF = 0x3f3f3f3f3f3f3f3f;
const int mod = 10000;

int n, q, sum[N];
vector<int> edge[N];
struct node {
    int u, v, w;
} a[N];

void dfs(int u, int fa) {
    sum[u] = 1;
    for(int v : edge[u]) {
        if(v == fa) continue;
        dfs(v, u);
        sum[u] += sum[v];
    }
}

double cal(int cnt, int n) {
    return 1.0 * cnt / n * (cnt - 1) / (n - 1) * (cnt - 2) / (n - 2);
}

int main() {
    scanf("%d", &n);
    for(int i = 1; i < n; i++) {
        scanf("%d%d%d", &a[i].u, &a[i].v, &a[i].w);
        edge[a[i].u].push_back(a[i].v);
        edge[a[i].v].push_back(a[i].u);
    }
    dfs(1, 0);
    double ans = 0;

    for(int i = 1; i < n; i++)
        if(sum[a[i].u] > sum[a[i].v])
            swap(a[i].u, a[i].v);

    for(int i = 1; i < n; i++) {
        int cnt1 = sum[a[i].u];
        int cnt2 = n - cnt1;
        int w = a[i].w;
        double p = 1;
        p -= cal(cnt1, n);
        p -= cal(cnt2, n);
        ans += p * w;
    }

    scanf("%d", &q);
    while(q--) {
        int r, w;
        scanf("%d%d", &r, &w);
        double p = 1;
        p -= cal(sum[a[r].u], n);
        p -= cal(n - sum[a[r].u], n);
        ans -= p * a[r].w;
        a[r].w = w;
        ans += p * a[r].w;
        printf("%.12f\n", 2 * ans);
    }
    return 0;
}

/*
*/
