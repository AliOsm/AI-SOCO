#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;

const int MAX = 1 << 17;

int tree[2 * MAX + 7][10][10][4];

void update(int e, int v, int aa, int bb, int cc)
{
	int ve = e + MAX;
	while(ve)
	{
		tree[ve][aa][bb][cc] += v;
		ve >>= 1;
	}
}

int query(int a, int b, int aa, int bb, int cc)
{
	int va = a + MAX, vb = b + MAX;
	int res = tree[va][aa][bb][cc];
	if(va != vb) res += tree[vb][aa][bb][cc];
	while(va / 2 != vb / 2)
	{
		if(va % 2 == 0) res += tree[va + 1][aa][bb][cc];
		if(vb % 2 == 1) res += tree[vb - 1][aa][bb][cc];
		va >>= 1, vb >>= 1;
	}
	return res;
}

int mp[256];

void akt(int pos, int l, int v)
{
	for(int r = 1; r <= 10; r++)
	{
		// pos = a1 + k * r
		// a1 = pos - k * r
		int a1 = pos % r;
		update(pos, v, a1, r-1, l);
	}
}

int zap(int a, int b, int l, int pos, int r)
{
	int a1 = pos % r;
	if(pos > b) return 0;
	return query(a, b, a1, r-1, l);
}

int main()
{
	ios_base::sync_with_stdio(0);
	mp['A'] = 0;
	mp['T'] = 1;
	mp['G'] = 2;
	mp['C'] = 3;
	string s;
	cin >> s;
	for(int i = 0; i < s.size(); i++)
		akt(i, mp[s[i]], 1);
	int qq; cin >> qq;
	while(qq--)
	{
		int tt; cin >> tt;
		if(tt == 1)
		{
			int pos; char z;
			cin >> pos >> z;
			akt(pos - 1, mp[s[pos-1]], -1);
			akt(pos - 1, mp[z], 1);
			s[pos-1] = z;
		}
		else
		{
			int a, b; string z;
			cin >> a >> b >> z;
			a--; b--;
			int aaa = 0;
			for(int i = 0; i < z.size(); i++)
			{
				aaa += zap(a, b, mp[z[i]], a + i, z.size());
			}
			cout << aaa << "\n";
		}
	}
	return 0;
}
