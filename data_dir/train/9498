// I can't tell you what it really is,
// I can only tell you what it feels like.
#include "bits/stdc++.h"
using namespace std;
 
#define int long long
#define F first
#define S second
#define sz(x) ((int)x.size())
#define rep(i,a,n) for (int i = a; i <= n; ++i)
#define all(v)  v.begin(), v.end()
#define pb push_back
#define P pair < int, int >
#define E cout << '\n'

const int mod = 1e9 + 7;
const int N = 4e4 + 5;

vector < bool > h(N);
vector < int > primes;

void RunSieve() {
	for(int i = 4; i < N; i += 2) {
		h[i] = true;
	}
	int sq = sqrt(N), x;
	for(int i = 3; i < sq; i += 2) {
		if(h[i])
			continue;
		x = i + i;
		for(int j = i * i; j < N; j += x)
			h[j] = true;
	}
	for(int i = 2; i < N; ++i) {
		if(!h[i])
			primes.push_back(i);
	}
}
bool prime(int n) {
	for (int x : primes) {
		if (x * x > n)return 1;
		if (n % x == 0)return 0;
	}
	return 1;
}
inline void solve() {
   int n;
   cin >> n;
   if (n == 2) {
   	cout << "1/6\n";
   	return;
   }
   int v = n, u = n+1;
   while (v) {
   	if (prime(v)) {
   		break;
   	}
   	--v;
   }
   while (u) {
   	if (prime(u)) {
   		break;
   	}
   	++u;
   }
   // cout << v << ' ' << u << '\n';
   int num = v - 2, den = v << 1LL;
   // if n is itself a prime i need to add 1 / n * next_greater_prime_than_n
   int num1 = n - v + 1, den1 = v * u;
   const int x = u * num + 2 * num1;
   const int y = den1 * 2;
   int g = __gcd(x, y);
   // cout << g << '\n';
   cout << x/g << "/" << y/g << '\n';

}
signed main() {
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  int t = 1;
  RunSieve();
  cin >> t; while(t--)
  solve();
  return 0;
}