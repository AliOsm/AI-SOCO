
#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

constexpr long long MAX = 5100000;
constexpr long long INF = 1LL << 60;
constexpr int inf = 1 << 28;
constexpr long long mod = 1000000007LL;
//constexpr long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;


int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/
	ll n; scanf("%lld", &n);
	vector<ll> dp(10, -1);
	dp[0] = 0;
	while (n--) {
		ll k; scanf("%lld", &k);
		vector<vector<ll>> a(4);
		for (ll i = 0; i < k; i++) {
			ll c, d; scanf("%lld %lld", &c, &d);
			a[c].push_back(d);
		}
		sort(a[1].rbegin(), a[1].rend());
		sort(a[2].rbegin(), a[2].rend());
		sort(a[3].rbegin(), a[3].rend());
		vector<pair<int, ll>> v;
		for (int i = 0; i < 3 && i < a[1].size(); i++) {
			v.emplace_back(1, a[1][i]);
		}
		if (a[2].size()) v.emplace_back(2, a[2][0]);
		//if (a[3].size()) v.emplace_back(3, a[3][0]);
		sort(v.begin(), v.end());
		vector<ll> ndp(10, -1);
		vector<vector<vector<ll>>> tmp(v.size() + 2, vector<vector<ll>>(4, vector<ll>(10, -1)));
		do {
			for (int i = 0; i < v.size() + 1; i++) for (int j = 0; j < 4; j++) for (int k = 0; k < 10; k++) tmp[i][j][k] = -1;
			for (ll i = 0; i < 10; i++) {
				chmax(tmp[0][0][i], dp[i]);
			}
			for (int i = 0; i < v.size(); i++) {
				for (int j = 0; j <= 3; j++) {
					for (int k = 0; k < 10; k++) {
						if (tmp[i][j][k] == -1) continue;
						chmax(tmp[i + 1][j][k], tmp[i][j][k]);
						if (j + v[i].first <= 3) {
							if (k == 9) {
								chmax(tmp[i + 1][j + v[i].first][0], tmp[i][j][k] + v[i].second * 2);
							}
							else {
								chmax(tmp[i + 1][j + v[i].first][k + 1], tmp[i][j][k] + v[i].second);
							}
						}
					}
				}
			}
			for (int i = 0; i <= 3; i++) for (int j = 0; j < 10; j++) chmax(ndp[j], tmp[v.size()][i][j]);
		} while (next_permutation(v.begin(), v.end()));
		if (a[3].size()) {
			for (int i = 0; i < 10; i++) {
				if (dp[i] == -1) continue;
				if (i == 9) {
					chmax(ndp[0], dp[i] + a[3][0] * 2);
				}
				else {
					chmax(ndp[i + 1], dp[i] + a[3][0]);
				}
			}
		}
		for (int i = 0; i < 10; i++) {
			chmax(dp[i], ndp[i]);
		}

		/*
		cout << "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^" << endl;
		for (int i = 0; i < 10; i++) {
			cout << dp[i] << endl;
		}
		cout << "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^" << endl;
		*/
	}
	cout << *max_element(dp.begin(), dp.end()) << endl;
	return 0;
	/*
		おまじないを使ったらscanfとprintf関連注意！！！！！！！！！！！！
	*/
}