#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<ll> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef pair<int, int> pii;
typedef vector<pii> vii;
typedef vector<bool> vb;
typedef vector<string> vs;
const int di[] = { 0, 0, 1, -1 };
const int dj[] = { 1, -1, 0, 0 };
const ll MOD = 1e9 + 9;
const ll INF = 1e9;
const long double EPS = 1e-6;
#define all(n) n.begin(),n.end()

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	int n, m; cin >> n >> m;
	vi tpos(n), h(n);
	vector<double> pl(n), pr(n);
	for (int i = 0; i < n; i++) {
		cin >> tpos[i] >> h[i] >> pl[i] >> pr[i];
		pl[i] /= 100.0;
		pr[i] /= 100.0;
	}

	vii mush(m); // (pos, magic)
	for (int i = 0; i < m; i++) {
		cin >> mush[i].first >> mush[i].second;
	}
	sort(all(mush));
	vi mpos(m);
	for (int i = 0; i < m; i++) {
		mpos[i] = mush[i].first;
	}

	vector<double> st(m, 1), ed(m, 1);
	vi zero(m);
	for (int i = 0; i < n; i++) {
		int a = lower_bound(all(mpos), tpos[i] - h[i]) - mpos.begin();
		int b = upper_bound(all(mpos), tpos[i] - 1) - mpos.begin();
		if (a < m && b > a) {
			if (1.0 - pl[i] < EPS)
				zero[a]++;
			else
				st[a] *= 1.0 - pl[i];
			if (b < m) {
				if (1.0 - pl[i] < EPS)
					zero[b]--;
				else
					ed[b] *= 1.0 - pl[i];
			}
		}

		a = lower_bound(all(mpos), tpos[i] + 1) - mpos.begin();
		b = upper_bound(all(mpos), tpos[i] + h[i]) - mpos.begin();
		if (a < m && b > a) {
			if (1.0 - pr[i] < EPS)
				zero[a]++;
			else
				st[a] *= 1.0 - pr[i];
			if (b < m) {
				if (1.0 - pr[i] < EPS)
					zero[b]--;
				else
					ed[b] *= 1.0 - pr[i];
			}
		}
	}

	double cp = 1, r = 0;
	int cz = 0;
	for (int i = 0; i < m; i++) {
		cz += zero[i];
		cp *= st[i];
		cp /= ed[i];
		if (cz) continue;
		r += cp * mush[i].second;
	}

	cout << fixed << setprecision(10) << r << endl;
	cin.ignore(), cin.get();
}
