#include <cstdio>
#include <iostream>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
#include <memory.h>
#include <string.h>
#include <time.h>
#include <stack>
using namespace std;
#pragma comment(linker, "/STACK:200000000")

#define mp make_pair
#define pb push_back 
#define ll long long
#define sz(x) (int)(x).size()

map<int, int> dp;

int l[303];
int c[303];

int gcd(int a, int b) {
    if(!a) return b;
    return gcd(b % a, a);
}

int main()
{
    //freopen("output.txt","wt",stdout);
    //freopen("a.in","rt",stdin);
    //freopen("a.out","wt",stdout);
    
    int n;
    scanf("%d", &n);
    for(int i = 0; i < n; i++) scanf("%d", &l[i]);
    for(int i = 0; i < n; i++) scanf("%d", &c[i]);
    
    vector<pair<int, int> > v;
    for(int i = 0; i < n; i++) {
        if(dp.find(l[i]) != dp.end()) {
            dp[l[i]] = min(dp[l[i]], c[i]);
        }
        else {
            dp[l[i]] = c[i];
        }
        for(map<int, int>::iterator it = dp.begin(); it != dp.end(); it++) {
            v.pb(mp(gcd(it->first, l[i]), it->second + c[i]));
        }
        for(int j = 0, maxj = sz(v); j < maxj; j++) {
            if(dp.find(v[j].first) != dp.end()) {
                dp[v[j].first] = min(dp[v[j].first], v[j].second);
            }
            else {
                dp[v[j].first] = v[j].second;
            }
        }
        v.clear();
    }

    if(dp.find(1) != dp.end()) printf("%d", dp[1]);
    else printf("-1");
    return 0;
}