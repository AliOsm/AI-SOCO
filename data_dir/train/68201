/// You just can't beat the person who never gives up
/// ICPC next year

#pragma gcc optimize("03")
#include<bits/stdc++.h>
using namespace std ;
const int N = 1e6+5 ;

int n ,arr[N] ,lss[N] ,big[N] ,h ;
void compress(){
    set<int> st;
    for(int i=0;i<n;++i) st.insert(arr[i]);
    map<int,int> mp ;
    for(int i:st) mp[i] = h++ ;
    for(int i=0;i<n;++i) arr[i] = mp[arr[i]] ;
}
int seg[1<<21] ;
void update(int i,int ni=0,int ns=0,int ne=h-1){
    if(ne<i || ns>i || ns>ne) return ;
    if(ns==ne){
        if(ns==i) ++seg[ni] ;
        return ;
    }
    int l = ni*2+1 ,r = l+1 ,mid = (ns+ne)/2 ;
    update(i,l,ns,mid);
    update(i,r,mid+1,ne);
    seg[ni] = seg[l] + seg[r] ;
}
int cnt(int qs,int qe,int ni=0,int ns=0,int ne=h-1){
    if(qs>qe) return 0;
    if(ne<qs || ns>qe || ns>ne) return 0;
    if(ns>=qs && ne<=qe) return seg[ni] ;
    int l = ni*2+1 ,r = l+1 ,mid = (ns+ne)/2 ;
    return cnt(qs,qe,l,ns,mid) + cnt(qs,qe,r,mid+1,ne);
}
int main(){
    scanf("%d",&n);
    for(int i=0;i<n;++i) scanf("%d",arr+i);
    compress() ;
    for(int i=0;i<n;++i){
        big[i] = cnt(arr[i]+1,h-1);
        update(arr[i]);
    }
    memset(seg,0,sizeof seg);
    for(int i=n-1;i>=0;--i){
        lss[i] = cnt(0,arr[i]-1) ;
        update(arr[i]);
    }
    long long ans = 0 ;
    for(int i=0;i<n;++i) ans += 1ll*lss[i]*big[i];
    printf("%lld",ans);
    return 0;
}
