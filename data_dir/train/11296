#include<bits/stdc++.h>
#define In_the_name_of_allah_the_merciful ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define Alhamdulillah return 0;
#define pb push_back
#define ins(x) insert(x)
#define fi first
#define se second
#define lb lower_bound
#define ub upper_bound
#define all(v) (v.begin(),v.end())
#define sz(v) ((ll)((v).size()))
#define reset(v,val) memset(v,val,sizeof(v))
#define erep(i, x, n) for ( i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for( i = x; i<(ll)(n); i++)
using namespace std;
typedef   long long int ll;
const long long int mod=1e9+7;
ll dx[]={0,0,1,-1};
ll dy[]={1,-1,0,-1};
ll m,k,n,ans[500005],vis[500005],gp[500005];
string s1="one",s2="zero",ch="";
set< pair<ll,ll> > st;
set<ll> cp[500005],adj[500005];
vector< pair<ll,ll> >vv;
vector< pair< pair <ll,ll>,ll> > vvv;
vector<ll> v[500005],v1;
map<vector<ll>,ll> mp;

void dfs(ll node,ll c){
  vis[node]=1;
  ans[node]=c;
  set<ll>::iterator it;
  for(it=adj[node].begin();it!=adj[node].end();it++){
      ll y=(*it);
      if(!vis[y])dfs(y,c+1);
  }
}


int main(){
In_the_name_of_allah_the_merciful

    ll i=0,x,y,j=0,z,q,nb0=0,nbp=0,nbn=0,nbmax=0,nbinf=0,nb2=0,mm=5e8,idx=0,ok=0,l,r,negatif=0,positif=0,l1,r1;
    set<ll> ::iterator it,it2;
    char c;
   //freopen("a.txt","r",stdin);
   cin>>n>>m;
   for(i=1;i<=m;i++){
     cin>>x>>y;
     v[x].pb(y);
     v[y].pb(x);
   }
   mp.clear();
   ll  nb=0;
   for(i=1;i<=n;i++){
      v[i].pb(i);
      sort(v[i].begin(),v[i].end());
      if(mp[v[i]]==0){
          nb++;
          gp[i]=nb;
          mp[v[i]]=nb;
      }
      else{
         gp[i]=mp[v[i]];
      }
   }
    for(i=1;i<=n;i++){
      for(j=0;j<v[i].size();j++){
        cp[mp[v[i]]].insert(v[i][j]);
      }
   }
   for(i=1;i<=nb;i++){
       for(it=cp[i].begin();it!=cp[i].end();it++){
           if(gp[(*it)]!=i){
                adj[gp[(*it)]].insert(i);
                adj[i].insert(gp[(*it)]);
           }
       }
   }
   ll node=1;
   for(i=1;i<=nb;i++){
     if(adj[i].size()>2)return cout<<"NO",0;
     if(adj[i].size()<=1){
        node=i;
     }
   }
   memset(vis,0,sizeof(vis));
   dfs(node,1);
   cout<<"YES\n";
  for(i=1;i<=n;i++){
    cout<<ans[gp[i]]<<" ";
  }
Alhamdulillah
 }
