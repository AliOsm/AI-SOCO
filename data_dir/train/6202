#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>
#include <stack>

using namespace std;

#define FTB(i,a,b) for(LL i=a;i<=b;i++)
#define FT(i,a,b) for(LL i=a;i<b;i++)
#define FGB(i,a,b) for(LL i=a;i>=b;i--)
#define FG(i,a,b) for(LL i=a;i>b;i--)
#define endl "\n"
#define PB push_back
#define mp make_pair
#define fi first
#define se second
#define debug cout<<"VL\n";
#define PI 3.1415926535897
#define lbnd(dau,cuoi,giatri) lower_bound(dau,cuoi,giatri)
#define ubnd(dau,cuoi,giatri) upper_bound(dau,cuoi,giatri)
typedef double DB;
typedef long long LL;
typedef unsigned long long UL;
typedef long double LD;
typedef pair<LL,LL> II;
typedef vector<LL> VI;
typedef vector<II> VII;
typedef vector<bool> VB;




LL n,m,x=(1<<31)-1;
LL dp[100005][32],res[100005],l[100005],r[100005],q[100005];
LL ST[400005];

void update(LL node,LL l,LL r,LL u,LL t){
	if(l>u||r<u) return;
	if(l==u&&r==u){
        ST[node]=t;
        return;
	}
    ST[node]&=t;
	update(node*2,l,(l+r)/2,u,t);
	update(node*2+1,(l+r)/2+1,r,u,t);
}

LL get(LL node,LL l,LL r,LL u,LL v){
	if(l>v||r<u) return x;
	if(u<=l&&r<=v)return ST[node];
    LL mid=(l+r)>>1;
	return get(node*2,l,mid,u,v)&get(node*2+1,mid+1,r,u,v);
}


int main(){
//    ios::sync_with_stdio(false);cin.tie(0);
//	freopen("input.txt","r",stdin);
//  freopen("output.txt","w",stdout);
    cin>>n>>m;
    FTB(i,1,400003) ST[i]=x;
    FTB(k,1,m){
        cin>>l[k]>>r[k]>>q[k];
        FTB(i,0,31){
            if((q[k]>>i)&1){
                dp[l[k]][i]++;
                dp[r[k]+1][i]--;
            }
        }
    }
    FTB(i,1,n){
        FTB(j,0,31){
            dp[i][j]+=dp[i-1][j];
            if(dp[i][j]>0) res[i]+=(1<<j);
        }
    }
    FTB(i,1,n){
        update(1,1,n,i,res[i]);
    }
    FTB(i,1,m){
        if(get(1,1,n,l[i],r[i])!=q[i]){
            cout<<"NO";
            return 0;
        }
    }

    cout<<"YES\n";
    FTB(i,1,n) cout<<res[i]<<" ";




	return 0;
}



