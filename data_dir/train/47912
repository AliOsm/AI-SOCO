#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("board.in");ofstream out("board.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());

struct Node{

    char c = '@';
    int fl = 0, skok = 0;
    Node *m[26], *p = 0, *sl = 0;

    Node(){
        memset(m, 0, sizeof(m));
    }

    Node(char A, Node *pr){
        memset(m, 0, sizeof(m));
        c = A;
        p = pr;
    }
};

void add(Node *root, str &t){
    Node *u = root;
    for(char c : t){
        if(!u->m[c-'a']) u->m[c-'a'] = new Node(c, u);
        u = u->m[c-'a'];
    }
    u->fl++;
}

Node* WHAT(Node *n, int num){
    if(n->m[num]) return n->m[num];
    return n->m[num] = n->sl ? WHAT(n->sl, num) : n;
}

void build_links(Node *root){
    deque<Node*> d = {root};
    for(; d.size();){
        Node *u = d[0]; d.pop_front();
        if(!u->p || u->p==root) u->sl = u==root ? 0 : root;
        else{
            u->sl = WHAT(u->p->sl, u->c-'a');
            u->skok = u->sl->skok+(u->sl->fl);
        }
        for(auto i : u->m) if(i) d.pb(i);
    }
}

int z;
vec<Node*> pl, mn;
vec<vec<str>> sp, sm;

void add(vec<vec<str>> &s, vec<Node*> &lol, str &t){
    int free = 0;
    for(; !s[free].empty();) free++;
    for(int q=free-1; q>=0; q--){
        lol[q] = 0;
        for(str &u : s[q]) s[free].pb(u);
        s[q].clear();
    }
    s[free].pb(t);
    Node *root = new Node();
    for(str &u : s[free]){
        add(root, u);
    }
    build_links(root);
    lol[free] = root;
}

ll calc(vec<Node*> &lol, str &t){
    ll o = 0;
    for(Node *n : lol) {
        if(!n) continue;
        Node *u = n;
        for (char c : t) {
            u = WHAT(u, c-'a');
            o += u->fl+u->skok;
        }
    }
    return o;
}

void print(vec<vec<str>> &m){
    int c = 0;
    for(auto &i : m){
        cout<<c<<": "; for(auto &y : i) cout<<y<<" ";
        cout<<endl;
    }
    cout<<endl;
}

int main() {
    fast;
    cin>>z;
    sp = vec<vec<str>>(20);
    sm = vec<vec<str>>(20);
    pl = vec<Node*>(20);
    mn = vec<Node*>(20);
    for(; z--;){
        int u; str t; cin>>u>>t;
        if(u==1){
            add(sp, pl, t);
        }
        else if(u==2){
            add(sm, mn, t);
        }
        else{
            ll PL = calc(pl, t);
            ll MN = calc(mn, t);
            //cout<<PL<<" "<<MN<<endl;
            cout<<PL-MN<<endl;
        }
        //cout<<"PL: "; print(sp);
        //cout<<"MN: "; print(sm);
    }
}