#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <map>
#include <iterator>
#include <queue>

using namespace std;

typedef long long ll;
typedef long double ld;

const int NMax = 200002;
const int cntTree = 262145*2;
const ld eps = 1e-9;
const double PI = 3.141592653589793238462;
const int MD = (int) 1e9 + 7;

#define Min(x,y) ((x) > (y) ? (y) : (x))
#define Max(x,y) ((x) > (y) ? (x) : (y))
#define Sqr(x) ((x) * (x))
#define Abs(x) ((x) < (0) ? (-(x)) : (x))
#define SZ(x) (int) (x).size()

struct T
{
	int pos, key;
	T (int pos, int key) : pos(pos) , key(key){}
	bool operator < (const T &a) const
	{
		return key < a.key;
	}
};

FILE *stream;
priority_queue < T > h;
int a,b,c;
int ans[4][4];

int main()
{
	//freopen_s(&stream,"input.txt","r",stdin);
	//freopen_s(&stream,"output.txt","w",stdout);
	cin >> a >> b >> c;
	h.push(T(1,a)), h.push(T(2,b)), h.push(T(3,c));
	while (true)
	{
		T a1 = h.top(); h.pop();
		T b1 = h.top(); h.pop();
		//cout << a1.key << " " << b1.key;
		if (a1.key == 0 && b1.key == 0) break;
		if (a1.key == 0 || b1.key == 0)
		{
			cout << "Impossible" << endl;
			return 0;
		}
		a1.key--; b1.key--;
		ans[a1.pos][b1.pos]++, ans[b1.pos][a1.pos]++;
		h.push(a1); h.push(b1);
	}
	cout << ans[1][2] << " " << ans[2][3] << " " << ans[3][1];
	

	return 0;
}