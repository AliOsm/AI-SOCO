#pragma GCC optimize ("Ofast")
#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define int long long int
#define pb push_back
#define fi first
#define se second
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
const int mod = 1e9 + 7;
typedef long double f80;
#ifndef LOCAL
#define endl '\n'
#endif
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

const int N = 5005;
deque<pii> q;
ll dp[N][N];
int a[N];
void solve(){
    int n, k, x;
    cin >> n >> k >> x;
    // n = 5000, k = 300, x = 5000;
    fr(i, 1, n){
        cin >> a[i];
        // a[i] = 1 + rand() % 1000000000;
    }
    fr(i, k, n)
        dp[0][i] = -1e18;
    fr(j, 1, x){
        while(!q.empty()) q.pop_back();
        fr(i, 1, n){
            int val = dp[j - 1][i - 1] + a[i];
            // cout << val << endl;
            while(!q.empty() && q.back().fi < val) q.pop_back();
            q.push_back({val, i});
            while(!q.empty()){
                pii u = q.front();
                if(u.se > i - k)
                    break;
                q.pop_front();
            }
            pii u = q.front();
            dp[j][i] = u.fi;
        }
    }
    if(dp[x][n] < 0) dp[x][n] = -1;
    cout << dp[x][n] << endl;
}
signed main()
{
    IO;
    #ifdef LOCAL
     freopen("inp.txt","r", stdin);
    #endif
    clock_t clk = clock();
    int t;
    // cin >> t;
    t = 1;
    while(t--){
        solve();
    }
    cerr << endl << setprecision(10) << fixed << (double)(clock() - clk) / CLOCKS_PER_SEC;
    return 0;
}