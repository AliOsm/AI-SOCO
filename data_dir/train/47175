#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <sstream>
#include <string>
#include <map>
#include <set>
#include <algorithm>
#include <iomanip>
#include <functional>
#include <bitset>
#include <cassert>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <memory.h>
#include <complex>
#include <numeric>
using namespace std;
#pragma comment(linker, "/STACK:256000000")
#define mp make_pair
#define pb push_back
#define all(C) (C).begin(), (C).end()
#define sz(C) (int)(C).size()
#define PRIME 1103
#define PRIME1 31415
#define INF ((1ll << 30) - 1)
#define MOD 1000000007
#define FAIL ++*(int*)0
#define EPS 1e-6
template<class T> T sqr(T a) {return a * a;}
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pi64;
typedef pair<int, pii> piii;
typedef vector<int> vi;
typedef vector<int64> vi64;
typedef vector<vi64> vvi64;
typedef vector<pi64> vpi64;
typedef vector<vpi64 > vvpi64;
typedef vector<pii> vpii;
typedef vector<vector<int> > vvi;
typedef vector<vvi> vvvi;
typedef vector<vector<pair<int, int > > > vvpii;
typedef vector<vector<vector<pair<int, int > > > > vvvpii;
typedef complex<long double> cd;
//------------------------------------------------------------
int64 n, k;
int l = 0;
int vek[1000000];
pair<int64, int> les[1000000];
pair<int64, int> great[1000000];
int pg, pl;
int start = 22579;
void reczap(int mask, int x, int n, int q)
{
    if (x == n)
    {
        vek[l++] = mask;
        return;
    }
    int t = mask % 10;
    mask *= 10;
    if (q)
    {
        for(int i = 0; i < t; ++i)
            reczap(mask + i, x + 1, n, 0);
    }
    else
        for(int i = t + 1; i < 10; ++i)
            reczap(mask + i, x + 1, n, 1);
}
int findls(int64 pas, int c)
{
    pair<int64, int> v(pas, c);
    int l = 0, r = pl, mid, ot = pl;
    while(l <= r)
    {
        mid = (l + r) >> 1;
        if (les[mid] <= v)
            l = mid + 1;
        else
        {
            r = mid - 1;
            ot = mid;
        }
    }
    return ot;
}
int findgr(int64 pas, int c)
{
    pair<int64, int> v(pas, c);
    int l = 0, r = pg, mid, ot = pg;
    while(l <= r)
    {
        mid = (l + r) >> 1;
        if (great[mid] <= v)
            l = mid + 1;
        else
        {
            r = mid - 1;
            ot = mid;
        }
    }
    return ot;
}
int main()
{
#ifdef WIN32
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    cin >> n >> k;
    for(int i = 0; i < 10; ++i)
        vek[l++] = i;
    for(int i = 1; i < 7; ++i)
        for(int j = 0; j < 10; ++j)
        {
            if (j)
                reczap(j, 1, i + 1, 1);
            if (j != 9 && j)
                reczap(j, 1, i + 1, 0);
        }
    for(int i = 1; i < l; ++i)
    {
        if (!(vek[i] % n))
        {
            k--;
            //cout << vek[i];
            //cout << endl;
        }
        if (!k)
        {
            cout << vek[i];
            return 0;
        }
        if (vek[i] > 1e5 && vek[i] < 1e6)
        {
            int t = (vek[i] / 10000) % 10;
            int t1 = vek[i] / 100000;
            if (t1 > t)
                les[pl++] = pair<int, int>(vek[i] % n, 0);
        }
        if (vek[i]> 1e6)
        {
            int t = (vek[i] / 100000) % 10;
            int t1 = vek[i] / 1000000;
            int q = 0;
            if (t1 > t)
                q = 1;
            if(q)
                great[pg++] = pair<int, int>(vek[i]% n, vek[i] / (1000000));
            else
                les[pl++] = pair<int, int>(vek[i] % n, vek[i]/ (1000000));
        }
    }
    //cerr << p;
    sort(great, great + pg);
    sort(les, les + pl);
    int64 mod = ((int64)1e7 % n);
    for(int i = 1; i < 10; ++i)
    {
        int64 ost = (n - (vek[i] * mod) % n) % n;
        int ind1 = findgr(ost, i);
        int ind = findgr(ost, 9);
        k -= (ind - ind1);
        if (k <= 0)
        {
            cout << i;
            k += ind - ind1;
            for(int j = start; j < l; ++j)
            {
                if (vek[j] < 1e5)
                    continue;
                if (vek[j] < 1e6)
                {
                    int t = (vek[j] / 10000) % 10;
                    int t1 = vek[j] / 100000;
                    if (t1 > t && ((vek[j] % n) == ost))
                    {
                        k--;
                        if(!k)
                            cout << 0 << vek[j] << endl;
                    }
                }
                if (vek[j] > 1e6)
                {
                    int t = (vek[j] / 100000) % 10;
                    int t1 = vek[j] / 1000000;
                    if (t1 == vek[i])
                        continue;
                    if (t1 > t && i > t1)
                        continue;
                    if (t1 < t && i < t1)
                        continue;
                    if (vek[j] % n == ost)
                    {
                        k--;
                        if (!k)
                            cout << vek[j] << endl;
                    }
                }
                if (!k)
                {
                    //cout << vek[j];
                    return 0;
                }
            }
            return 0;
        }
        ind1 = findls(ost, -1);
        ind = findls(ost, i - 1);
        k -= (ind - ind1);
        if (k <= 0)
        {
            cout << i;
            k += ind - ind1;
            for(int j = start; j < l; ++j)
            {
                if (vek[j] < 1e5)
                    continue;
                if (vek[j] < 1e6)
                {
                    int t = (vek[j] / 10000) % 10;
                    int t1 = vek[j] / 100000;
                    if (t1 > t && ((vek[j] % n) == ost))
                    {
                        k--;
                        if(!k)
                            cout  << 0 << vek[j] << endl;
                    }
                }
                if (vek[j] > 1e6)
                {
                    int t = (vek[j] / 100000) % 10;
                    int t1 = vek[j] / 1000000;
                    if (t1 == vek[i])
                        continue;
                    if (t1 > t && i > t1)
                        continue;
                    if (t1 < t && i < t1)
                        continue;
                    if (vek[j] % n == ost)
                    {
                        k--;
                        if(!k)
                            cout << vek[j] << endl;
                    }
                }
                if (!k)
                {
                    //cout << vek[j];
                    return 0;
                }
            }
            return 0;
        }
        
    }
    //cerr << k;
    for(int i = 10; i < l; ++i)
    {
        int64 ost = (n - (vek[i] * mod) % n) % n;
        int p = vek[i] % 10;
        int p1 = (vek[i] % 100) / 10;
        int ind1, ind;
        if (p1 > p)
        {
            ind1 = findgr(ost, p);
            ind = findgr(ost, 9);
            k -= (ind - ind1);
        }
        else
        {
            ind1 = findls(ost, -1);
            ind = findls(ost, p - 1);
            k -= (ind - ind1);
        }
        if (k <= 0)
        {
            cout << vek[i];
            k += ind - ind1;
            for(int j = start; j < l; ++j)
            {
                if (vek[j] < 1e5)
                    continue;
                if (vek[j] < 1e6)
                {
                    int t = (vek[j] / 10000) % 10;
                    int t1 = vek[j] / 100000;
                    if (t1 > t && (vek[j] % n) == ost && p > p1)
                    {
                        k--;
                        if(!k)
                            cout << 0 << vek[j] << endl;
                    }
                }
                if (vek[j] > 1e6)
                {
                    int t = (vek[j] / 100000) % 10;
                    int t1 = vek[j] / 1000000;
                    if (t1 == vek[i])
                        continue;
                    if (t1 > t && p1 > p && p < t1)
                    {
                        if (vek[j] % n == ost)
                        {
                            k--;
                            if(!k)
                            cout << vek[j] << endl;
                        }
                    }
                    if (t1 < t && p1 < p && p > t1)
                    {
                        if (vek[j] % n == ost)
                        {
                            k--;
                            if(!k)
                                cout << vek[j] << endl;
                        }
                    }
                }
                if (!k)
                {
                    //cout <<  vek[j];
                    return 0;
                }
            }
            return 0;
        }
    }
    cout << -1;
    return 0;
}
