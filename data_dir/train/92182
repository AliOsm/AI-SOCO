// In the name of Allah
#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;
const int N = 3001;

int n, m;
int s1, s2, t1, t2, l1, l2, f, t;
vvi adj;
int dist[N][N];
int vis[N];
int vid;
int Q[N * N][2];

void bfs(int src) {
    ++vid;
    Q[0][0] = src;
    vis[src] = vid;
    int stps = 0, tot = 1;
    for (int front = 0; front < tot;) {
        int sz = tot;
        for (; front < sz; front++) {
            int cur = Q[front][0];
            int len = Q[front][1];
            dist[src][cur] = min(dist[src][cur], len);
            for (int i = 0; i < SZ(adj[cur]); i++) {
                if (vis[adj[cur][i]] != vid) {
                    Q[tot][0] = adj[cur][i];
                    Q[tot++][1] = len + 1;
                    vis[adj[cur][i]] = vid;
                }
            }
        }
        stps++;
    }
}

inline int calc(int p1, int p2) {
    int r1 = min(dist[s1][p1] + dist[t1][p2], dist[s1][p2] + dist[t1][p1]);
    int r2 = min(dist[s2][p1] + dist[t2][p2], dist[s2][p2] + dist[t2][p1]);
    if (r1 + dist[p1][p2] > l1 || r2 + dist[p1][p2] > l2)
        return OO;
    return r1 + r2 + dist[p1][p2];
}

int main() {
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
#ifndef ONLINE_JUDGE
//  freopen("in.txt", "rt", stdin);
//  freopen("out.txt", "wt", stdout);
#endif
    cin >> n >> m;
    MMS(dist, 0x3f);
    adj.resize(n);
    for (int i = 0; i < m; i++) {
        cin >> f >> t;
        f--, t--;
        adj[f].pb(t);
        adj[t].pb(f);
    }
    cin >> s1 >> t1 >> l1 >> s2 >> t2 >> l2;
    s1--, t1--, s2--, t2--;
    for (int i = 0; i < n; i++)
        bfs(i);
    if (dist[s1][t1] > l1 || dist[s2][t2] > l2) {
        cout << "-1\n";
        return 0;
    }
    int res = dist[s1][t1] + dist[s2][t2];
    for (int i = 0; i < n; i++)
        for (int j = i; j < n; j++)
            res = min(res, calc(i, j));
    cout << m - res << "\n";
    return 0;
}
