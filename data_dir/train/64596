#include <bits/stdc++.h>
#define endl '\n'

//#pragma GCC optimize ("O3")
//#pragma GCC target ("sse4")

using namespace std;
template<class T, class T2> inline int chkmax(T &x, const T2 &y) { return x < y ? x = y, 1 : 0; }
template<class T, class T2> inline int chkmin(T &x, const T2 &y) { return x > y ? x = y, 1 : 0; }
const int MAXN = (1 << 22);

template<class T>
struct fenwick
{
    int sz;
    T tr[MAXN];

    void init(int _sz)
    {
        sz = _sz;
        memset(tr, 0, sizeof(tr));
    }

    T query(int idx)
    {
        T ans = 0;
        for(; idx > 0; idx -= (idx & -idx))
            ans += tr[idx];

        return ans;
    }

    void update(int idx, T val)
    {
        if(idx <= 0) return;
        for(; idx <= sz; idx += (idx & -idx))
            tr[idx] += val;
    }
};


int64_t n, m;
int64_t a[MAXN];

void read()
{
    cin >> n >> m;
	m--;
    for(int i = 1; i <= n; i++)
        cin >> a[i];
}

int64_t psum[MAXN];
vector<int64_t> comp;

fenwick<int64_t> t;

int getval(int64_t x)
{
    return lower_bound(comp.begin(), comp.end(), x) - comp.begin() + 1;
}

void solve()
{
    for(int i = 1; i <= n; i++)
        psum[i] = psum[i - 1] + a[i];

    for(int i = 0; i <= n; i++)
    {
        comp.push_back(psum[i]);
        comp.push_back(psum[i] + m);
    }

    sort(comp.begin(), comp.end());
    comp.erase(unique(comp.begin(), comp.end()), comp.end());

    t.init(2e6 + 42);

    int64_t answer = 0;
	for(int i = n; i >= 0; i--)
    {
        int64_t nxt = t.query(getval(psum[i] + m));
        answer += nxt;
		t.update(getval(psum[i]), 1);
    }

	cout << answer << endl;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}

