#include <bits/stdc++.h>
using namespace std;

struct Node{
	int v, id;
};

const int N = 1e6 + 10;

vector <int> G[N];
int sz[N], used[N], p[N];
long long ans;
Node a[N];
int n;

int find(int x){
	return p[x] == x ? x : p[x] = find(p[x]);
}

void calc(){
	int id, val, y;
	memset(used, 0, sizeof(used));
	for (int i = 1; i <= n; i++) p[i] = i;
	for (int i = 1; i <= n; i++){
		id = a[i].id; val = a[i].v;
		used[id] = 1; sz[id] = 1;
		for (int j = 0; j < G[id].size(); j++){
			if (!used[G[id][j]]) continue;
			y = find(G[id][j]);
			ans += 1LL * sz[id] * sz[y] * val;
			sz[id] += sz[y];
			p[y] = id;
		}
	}
}

bool cmp(const Node& x, const Node& y){
	return x.v < y.v;
}

int main(){
	int u, v;
	scanf("%d",&n);
	for (int i = 1; i <= n; i++){
		scanf("%d",&a[i].v);
		a[i].id = i;
	}
	for (int i = 1; i <= n - 1; i++){
		scanf("%d %d",&u,&v);
		G[u].push_back(v);
		G[v].push_back(u);
	}
	ans = 0;
	sort(a + 1, a + n + 1, cmp);
	calc();
	for (int i = 1; i <= n; i++) a[i].v = -a[i].v;
	sort(a + 1, a + n + 1, cmp);
	calc();
	printf("%I64d\n",ans);
	return 0;
}