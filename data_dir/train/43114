#include <bits/stdc++.h>
     
using namespace std;
typedef long long ll;
typedef vector<ll> vl ;
typedef pair<ll,ll> pl;
     
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define all(v) (v).begin(),(v).end()
#define max(a,b) (a>b ? a : b)
#define min(a,b) (a<b ? a : b)
     
const int MOD = 998244353;
const int N = 1000105;
const double PI =4*atan(1);
const double eps = 1e-7;
const long long oo = 1e10;
const int MAXN = 100500;
 
ll n,m,k;
ll indeg[N];
set<pl> ss;
set<ll> rem;

pl getedge(ll u, ll v){
    return {min(u,v),max(u,v)};
}

void dfs(ll src){
	vector<int> v;
	for(auto t:rem){
		if(ss.count(getedge(src,t))==0){
			v.pb(t);
		}
	}
		for(auto t:v){
			rem.erase(t);
		}
		for(auto t:v){
			dfs(t);
		}
	
}
 
int main(){
    ios::sync_with_stdio(0);
    //freopen("easy.txt","r",stdin);
    cin >> n >> m >> k;
    for(int i=0;i<n;i++){
        indeg[i]=n-1;
    }
    for(int i=0;i<m;i++){
        ll x,y; 
        cin >> x >> y;
        x--;y--;
        indeg[x]--;
        indeg[y]--;
        ss.insert(getedge(x,y));
    }
    if(indeg[0]<k){
        cout << "impossible";
        return 0;
    }
    for(int i=0;i<n;i++){
        rem.insert(i);
    }
    dfs(0);
    if(rem.size()){
        cout << "impossible";
        return 0;
    }
    for(int i=1;i<n;i++){
        rem.insert(i);
    }
    ll cnt=0;
    for(int i=1;i<n;i++){
    	if(rem.count(i)){
    		dfs(i);
    		cnt++;
    	}
    }
    if(cnt<=k  && indeg[0]>=k){
    	cout << "possible";
    }else{
    	cout << "impossible";
    }
    
    return 0;
}