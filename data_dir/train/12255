#include <bits/stdc++.h>
using namespace std;

int n;
long long dp[2][10];

vector<int> g[5];

typedef pair<int, int> P;

#define ft first
#define sd second

int main() {
	cin >> n;

	memset(dp, -1, sizeof(dp));

	dp[1][0] = 0;

	while (n--) {
		int k;
		scanf("%d", &k);

		swap(dp[0], dp[1]);
		memset(dp[1], -1, sizeof(dp[1]));

		for (int i = 1; i <= 3; i++) {
			g[i].clear();
		}

		for (int i = 0; i < k; i++) {
			int x, y;
			scanf("%d %d", &x, &y);
			g[x].push_back(y);
		}

		for (int i = 1; i <= 3; i++) {
			sort(g[i].rbegin(), g[i].rend());
		}

		vector<P> vec;

		for (int i = 1; i <= 3; i++) {
			for (int j = 0; j < min(3 / i, (int)g[i].size()); j++) {
				vec.push_back(P(i, g[i][j]));
			}
		}

		sort(vec.begin(), vec.end());

		do {
			for (int i = 0; i < 10; i++) {
				if (dp[0][i] == -1) continue;

				int v = i;
				int cost = 0;
				long long val = dp[0][i];

				for (auto p : vec) {
					if (cost + p.ft > 3) break;

					cost += p.ft;
					v = (v + 1) % 10;

					val += p.sd;
					if (v == 0) val += p.sd;

					dp[1][v] = max(dp[1][v], val);
				}
			}
		} while (next_permutation(vec.begin(), vec.end()));

		for (int i = 0; i < 10; i++) {
			dp[1][i] = max(dp[0][i], dp[1][i]);
		}
	}

	cout << *max_element(dp[1], dp[1] + 10);

	return 0;
}

