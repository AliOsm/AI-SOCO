#include <bits/stdc++.h>
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
 
#define pb push_back
#define mp make_pair
#define fir first
#define sec second
#define ll long long
#define ull unsigned long long
 
typedef tree<
        int,
        null_type,
        less<int>,
        rb_tree_tag,
        tree_order_statistics_node_update>
        ordered_set;
        
ll md=(1e9)*1e9+7;
ll MOD=1e9+7;
int INF=1e9+7;
 
ll binpow (ll a, ll n) {
	if (n == 0)
		return 1;
	if (n % 2 == 1)
		return (binpow (a, n-1) * a) % MOD;
	else {
		int b = binpow (a, n/2)% MOD;
		return (b * b) % MOD;
	}
}
 
pair<int,ll> rev(pair<ll,int> x)
{
    return mp(x.sec,x.fir);
}

int lis(vector<int> &a)
{
    int n=a.size();
    vector<int> d(n+1,1e9+7);
    d[0]=0;
    for (int i=0;i<n;i++)
    {
        int j=(int)(upper_bound(d.begin(),d.end(),a[i])-d.begin());
        //if (d[j-1]<a[i]&&a[i]<d[j])
        {
            d[j]=a[i];
            //cout<<i;
        }
    }
    for (int i=n;i>=0;i--)
        if (d[i]<1e9+7) return i;
}

int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int n,a[200005],b[200005];
    bool used[200005];
    map<int,set<int>> x;
    cin>>n;
    for (int i=0;i<n;i++)
    {
        cin>>a[i];
        b[i]=a[i];
        x[a[i]].insert(i);
    }
    sort(b,b+n);
    reverse(b,b+n);
    vector<int> ans;
    int mn;
    for (int i=0;i<n;i++)
    {
        if (true)
        {
            int need=*x[b[i]].begin();
            ans.pb(need);
            x[b[i]].erase(need);
            mn=need;
        }
        else
        {
            auto it_need=x[b[i]].lower_bound(mn);
            int need;
            if (it_need==x[b[i]].begin())
            {
                need=*x[b[i]].begin();
            }
            else if (it_need==x[b[i]].end())
            {
                need=*x[b[i]].rend();
            }
            else
            {
                --it_need;
                need=*it_need;
            }
            ans.pb(need);
            x[b[i]].erase(need);
            mn=min(mn,need);
        }
    }
    int m;
    cin>>m;
    vector<pair<pair<int,int>,int>> q;
    for (int i=0;i<m;i++)
    {
        int k,pos;
        cin>>k>>pos;
        q.pb(mp(mp(k,pos),i));
    }
    sort(q.begin(),q.end());
    ordered_set love;
    int answ[200005],i1=0;
    for (int i=0;i<m;i++)
    {
        while (i1<q[i].fir.fir)
        {
            love.insert(ans[i1]);
            i1++;
        }
        answ[q[i].sec]=*love.find_by_order(q[i].fir.sec-1);
    }
    //cout<<love.size();
    for (int i=0;i<m;i++)
        cout<<a[answ[i]]<<endl;
    return 0;
}
/*
0 0 0
0 0 1
0 1 0
1 0 0
*/
//6 19 3 4 4 2 6 7 8
//2 3 4 4 6 6 7 8 19