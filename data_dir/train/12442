#include <string.h>
#include <assert.h>
#include <cassert>
#include <unordered_map>
 
#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include <stack>
#include <queue>
#include <set>
 
#include <map>
#include <vector>
#include <string>
#include <stdlib.h>
#include <cassert>
 
#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf
 
#define pf printf
#define mp make_pair
#define N 2000000
 
const int mod = 998244353;
using namespace std;

int max_n;
int a[N];
int cnt[N],mu[N];
vector<int> lcm[N];
vector<int> freq[N];
ll ans;

int gcd(int a, int b) {
	return b?gcd(b,a%b):a;
}

int count(int t) {
	int ret = 0;
	for(int d : freq[t]) {
		//printf("t = %d d = %d mu =%d cnt = %d\n",t,d,mu[d],cnt[d]);
		ret += mu[d]*cnt[d];
	}
	return ret;
}

void check(int g) {
	auto & vec = lcm[g];
	if(vec.size()==0)return;
	//printf("g = %d\n",g);
	sort(vec.begin(), vec.end(), greater<int>());
	stack<ll>ft;
	for(int i = 0; i < vec.size();++i) {
		//printf("i = %d vec = %d\n",i,vec[i]);
		int t = vec[i];
		int ct = count(t);
		//printf("ct = %d\n",ct);
		if(ct==0) {
			ft.push(t);
			for(int k :freq[t]) {
				cnt[k]++;
			}
			//printf("push t = %d\n",t);
		}
		else {
			while(!ft.empty()&&ct) {
				ll x = ft.top();
				for(int k :freq[x]) {
					cnt[k]--;
				}
				ft.pop();
				//printf("get x = %lld\n",x);
				if(gcd(x,t)==1) {
					ans = max(ans, x*t*g);
					ct--;
					//printf("ans = %lld xtg = %lld\n",ans,x*t*g);
				}
			}
		}
	}
	while(!ft.empty()){
		int t = ft.top();
		for(int k :freq[t]) {
			cnt[k]--;
		}
		ft.pop();
	}
}

int is[N],pr[N],ct;
int main(){
	ct = 0;
	clr(is);
	clr(cnt);
	int n;
	cin>>n;
	max_n = 0;
	fr(i,0,n) {
		sf("%d",&a[i]);
		max_n = max(max_n, a[i]);
	}
	mu[1] = 1;
	for(int i = 1; i <=max_n; ++i) {
		for(int j = i; j <=max_n; j+=i){
			freq[j].pb(i);
		}
	}
	for(int i = 2; i <=max_n; ++i) {
		if(!is[i]) {
			mu[i] = -1;
			pr[ct++]=i;
		}
		for(int j = 0; j < ct&&pr[j]*i<=max_n;++j) {
			is[pr[j]*i]=1;
			if(i%pr[j]==0) {
				mu[pr[j]*i]=0;
				break;
			}
			else {
				mu[pr[j]*i] = -mu[i];
			}
		}
	}
	for(int i = 0; i < n; ++i) {
		for(int t:freq[a[i]]) {
			lcm[t].pb(a[i]/t);
		}
	}

	ans = 0;
	for(int i = 1; i <=max_n; ++i) {
		check(i);
	}
	cout<<ans<<endl;
}

