#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int N = 2005;

string grid[N];
int id[N][N];
int id_x[N*N], id_y[N*N];
vector<int> G[N*N];
int deg[N*N];
int matched[N*N];

int main() {
//    freopen("in.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    int cnt = 0;
    for(int i = 0; i < n; i++) {
        cin >> grid[i];
        for(int j = 0; j < m; j++) {
            if(grid[i][j] == '.') {
                id[i][j] = ++cnt;
                id_x[cnt] = i;
                id_y[cnt] = j;
            }
        }
    }

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(grid[i][j] == '*') continue;
            int u = id[i][j];
            int v = id[i + 1][j];
            if(v) {
                G[u].push_back(v);
                G[v].push_back(u);
            }
            v = id[i][j + 1];
            if(v) {
                G[u].push_back(v);
                G[v].push_back(u);
            }
        }
    }
    /// handle all *

    vector<int> cand;
    for(int i = 1; i <= cnt; i++) {
        deg[i] = G[i].size();
        if(deg[i] == 0) {
            cout << "Not unique";
            return 0;
        }
        if(deg[i] == 1) {
            cand.push_back(i);
        }
    }

    vector<pair<int,int>> matching;
    while(!cand.empty()) {
        int u = cand.back();
        cand.pop_back();
        if(matched[u]) continue;
        if(deg[u] == 0) {
            cout << "Not unique";
            return 0;
        }
        assert(deg[u] == 1);
        int v = -1;
        while(G[u].size() > 0) {
            v = G[u].back();
            G[u].pop_back();
            if(!matched[v]) break;
        }
        assert(v != -1);
        matched[u] = matched[v] = 1;
        matching.push_back({u, v});
        deg[v]--;
        deg[u]--;
        for(int w : G[v]) {
            if(matched[w]) continue;
            deg[w]--;
            if(deg[w] == 1) {
                cand.push_back(w);
            }
        }
    }

    if(cnt%2 == 0 && matching.size() == cnt/2) {
        for(int i = 0; i < matching.size(); i++) {
            int u = matching[i].first, v = matching[i].second;
            int x1 = id_x[u], x2 = id_x[v], y1 = id_y[u], y2 = id_y[v];
            if(y1 > y2) swap(y1, y2);
            if(x1 > x2) swap(x1, x2);
            if(x1 == x2) {
                grid[x1][y1] = '<';
                grid[x1][y2] = '>';
            }
            else {
                grid[x1][y1] = '^';
                grid[x2][y1] = 'v';
            }
        }
        for(int i = 0; i < n;i++) {
            cout << grid[i] << "\n";
        }
    }
    else {
        cout << "Not unique";
    }
    return 0;
}

