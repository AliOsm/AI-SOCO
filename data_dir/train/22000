#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;
const int maxprimes = 17;
const int maxmask = 1 << maxprimes, maxn = 101;
int chosen[maxn][maxmask], dp[maxn][maxmask], n, ip;

//prime builder
const int maxprime = 62, up = sqrt(maxprime);
int prime[maxprime];
int mask[maxprime], primesseen;
inline void sieve()
{
    for (int i = 0; i < maxprime; i++)
        prime[i] = i;
    for (int i = 2; i < maxprime; i += 2)
        prime[i] = 2;
    for (int i = 3; i <= up; i += 2)
    {
        if (prime[i] != i)
            continue;
        int lim = i * i;
        int add = 2 * i;
        for (int j = lim; j < maxprime; j += add)
        {
            if (prime[j] == j)
                prime[j] = i;
        }
    }
}


int main()
{
    fastread;
    sieve();
    for (int i = 2; i < maxprime; i++) {
        if (prime[i] == i) {
            mask[i] = 1 << primesseen;
            primesseen++;
        } else {
            int tmp = i, f;
            while (tmp > 1) {
                f = prime[tmp];
                mask[i] |= mask[f];
                while (tmp % f == 0)
                    tmp /= f;
            }
        }
    }
    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> ip;
        for (int j = 0; j < maxmask; j++) {
            chosen[i][j] = 1;
            dp[i][j] = dp[i - 1][j] + abs(ip - 1);
            int lim = 2 * ip;
            for (int k = 2; k <= lim; k++) {
                if ((mask[k]&j) == mask[k]) {
                    int val = dp[i - 1][j ^ mask[k]] + abs(ip - k);
                    if (val < dp[i][j]) {
                        dp[i][j] = val;
                        chosen[i][j] = k;
                    }
                }
            }
        }
    }
    vector<int> seq;
    int maskval = maxmask - 1, pos = n;
    while (pos >= 1) {
        seq.pb(chosen[pos][maskval]);
        maskval ^= mask[seq.back()];
        pos--;
    }
    reverse(seq.begin(), seq.end());
    for (auto u : seq)
        cout << u << ' ';
    return 0;
}