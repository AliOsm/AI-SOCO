#include <bits/stdc++.h>

using namespace std;

const int MAXN = (int) 1e6 + 7;
const int INF = (int) 2e9 + 7;

int sum[MAXN], cnt[MAXN];

string s;

vector<int> pos;
vector<pair<int, int>> all;

char anti(char x) {
  if (x == ']') return '[';
  else return '(';
}

int main() {
  #ifdef LOCAL
  freopen("in", "r", stdin);
  #endif
  
  cin >> s;
  for (int i = 0; i < s.size(); i++) {
    if (i) sum[i] = sum[i - 1];
    if (s[i] == '[')
      ++sum[i];
  }
  for (int i = 0; i < s.size(); i++) {
    if (s[i] == '(') pos.push_back(i);
    else if (s[i] == '[') pos.push_back(i);
    else {
      if (pos.empty() || s[pos.back()] != anti(s[i])) pos.clear();
      else {
        while (!all.empty() && pos.back() <= all.back().first && all.back().second <= i)
          all.pop_back();

        if (!all.empty() && all.back().second + 1 == pos.back())
          all[all.size() - 1].second = i;
        else 
          all.push_back(make_pair(pos.back(), i));
        
        pos.pop_back();
      }
    }
  }
  int L = 0, R = -1, mx = 0;
  for (auto seg : all) {
    int cur = sum[seg.second] - (seg.first ? sum[seg.first - 1] : 0);
    if (cur >= mx) {
      L = seg.first;
      R = seg.second;
      mx = cur;
    }
  }
  cout << mx << endl;
  for (int i = L; i <= R; i++)
    cout << s[i];

  return 0;
}