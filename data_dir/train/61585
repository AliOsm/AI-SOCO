#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>   
#include <cstdlib>
#include <iomanip>
#include <set>
#include <memory.h>
#include <cstring>
#include <map>
#include <iterator>

using namespace std;

#define pb push_back
#define mp make_pair                  
#define F first
#define S second
#define scf scanf
#define prf printf
#define For(i, n) for (int i = 0; i < n; i++)

typedef long double ld;
typedef long long ll;

const double eps = 1e-6;

struct Point {
    double x, y;
    Point () : x(0.0), y(0.0) {};
    Point(double x, double y) : x(x), y(y) {};
    Point operator + (Point &p) {
        Point res = Point(x + p.x, y + p.y);
        return res;
    }
    Point operator - (Point &p) {
        Point res = Point(x - p.x, y - p.y);
        return res;
    }
    double getDist() {
        return sqrt(x * x + y * y);
    }
    bool operator == (const Point &p) const {
        return p.x == x && p.y == y;
    }
} points[5000];


struct Line {
    Point p1, p2;
    double A, B, C;
    double sq;
    Line () : p1(Point()), p2(Point()) {};
    Line (Point p1, Point p2) : p1(p1), p2(p2) {
        if (fabs(p1.x - p2.x) > eps) {
            A = (p2.y - p1.y) / (p2.x - p1.x);
            B = -1.0;
            C = p1.y - A * p1.x;
        
        } else {
            A = 1.0;
            B = 0.0;
            C = -p1.x;
        }
        sq = sqrt(A * A + B * B);
    };
    double get(Point p) {
        double res = A * p.x + B * p.y + C;
        res = res / sq;
        return  res;
    }
    bool check(Point p) {
        double o = A * p.x + B * p.y + C;                 
        if (fabs(o) <= eps) return true; else return false;
    }   
};

int n;
double X, Y, xi, yi;
bool used[100500];

int main() {                         
    ios_base::sync_with_stdio(false);
    cin >> n;
    cin >> X >> Y;
    for (int i = 1; i <= n; i++) {
        cin >> xi >> yi;
        points[i] = Point(xi, yi);
    }
    Point M = Point(X, Y);
    memset(used, false, sizeof(used));
    int ans = 0;
    for (int i = 1; i <= n; i++) {
        if (used[i]) continue;
        Line l = Line(M, points[i]);
        ans++;
        used[i] = true;
        for (int j = 1; j <= n; j++) if (l.check(points[j])) used[j] = true;
    }
    cout << ans << endl;
    return 0;
}