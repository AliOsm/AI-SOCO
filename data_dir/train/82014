#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

const int BLOCK_SIZE = 1000;

class data{
  public:
  long long answer;
  const int MX = 1000005;
  vector<long long> frequencies;
  
  data() {
    answer = 0;
    frequencies.resize(MX);
  }

  void add(int x) {
    answer -= frequencies[x] * frequencies[x] * x;
    frequencies[x]++;
    answer += frequencies[x] * frequencies[x] * x;
  }

  void remove(int x) {
    answer -= frequencies[x] * frequencies[x] * x;
    frequencies[x]--;
    answer += frequencies[x] * frequencies[x] * x;
  }
};

class query{
  public:
  int l, r, idx;
  query(){}
  query(int _l, int _r, int _i) : l(_l), r(_r), idx(_i) {}
  bool operator < ( const query& t ) const {
    int lb = l / BLOCK_SIZE;
    int tlb = t.l / BLOCK_SIZE;
    return lb == tlb ? r < t.r : lb < tlb;
  }
};

int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  int n, q, l , r;
  while ( cin >> n >> q ) {
    data ds;
    vector<query> queries(q);
    vector<int> values(n);
    vector<long long> answer(q);

    for ( auto &i : values ) cin >> i;
    for ( int i = 0; i < q; ++i ) {
      cin >> l >> r;
      l--; r--;
      queries[i] = query(l, r, i);
    }
    sort (queries.begin(), queries.end());
    int cur_l = 0, cur_r = -1;
    for ( auto i : queries ) {
      while ( cur_l > i.l ) {
        cur_l--;
        ds.add(values[cur_l]);
      }
      while ( cur_r < i.r ) {
        cur_r++;
        ds.add(values[cur_r]);
      }
      while ( cur_l < i.l ) {
        ds.remove(values[cur_l]);
        cur_l++;
      }
      while ( cur_r > i.r ) {
        ds.remove(values[cur_r]);
        cur_r--;
      }
      answer[i.idx] = ds.answer;
    }
    for ( auto i : answer ) cout << i << '\n';
  }
  return 0;
}