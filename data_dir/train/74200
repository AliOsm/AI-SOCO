#include <bits/stdc++.h>

using namespace std;

#define mem(a,b) memset(a,b,sizeof(a))
#define FOR(i,j,k) for(int i=j;i<=k;i++)
#define REV(i,j,k) for(int i=j;i>=k;i--)
#define FORR(i,j,k,l) for(int i=j;i<=k;i+=l)
#define inf         freopen("in.txt", "r", stdin)
#define outf        freopen("out.txt", "w", stdout)
#define pf          printf
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c)    scanf("%d %d %d", &a, &b, &c)
#define clean(mat,n)   FOR(i,0,n) mat[i].clear()
#define minn          (long long)-1000000000000000000
#define maxx          (long long) 1000000000000000000
#define mod          1000000007
#define M_PI           3.14159265358979323846  /* pi */
#define LL           long long
#define NL '\n'
#define cnd tree[idx]
#define lnd (idx<<1)
#define rnd ((idx<<1)+1)
#define PB push_back
#define F first
#define S second
#define MAX 200010
#define MP make_pair
#define valid(nx,ny)  ((nx >= 0) && (nx < row) && (ny >= 0) && (ny < col))
typedef pair<int,int> PR;

vector<int> mat[MAX];
int mina[MAX], val[MAX], use[MAX], pa[MAX];
PR sz[MAX];
int n, k;

int rec(int p,int pa,int v)
{
    int ret = 0;  mina[p] = val[p];
    for(auto x : mat[p])
        if(x != pa) ret = max(ret, rec(x, p, v)), mina[p] = min(mina[p], mina[x]);

    use[p] = 0;
    int mx1 = 0, mx2 = 0;
    for(auto x : mat[p])
    {
        if(x == pa) continue;
        else if(mina[x] < v)
        {
            if(use[x] > mx1) mx2 = mx1, mx1 = use[x];
            else mx2 = max(mx2, use[x]);
        }
        else use[p] += use[x];
    }

    use[p] += mx1; sz[p].F = mx1; sz[p].S = mx2;
    if(val[p] >= v) use[p] += 1;
    else use[p] = 0, sz[p] = {0, 0};

    if(use[p] + sz[p].S >= k) ret = 1;
    return ret;
}

int dfs(int p,int pa,int v,int up,int ok)
{
    int ret = 0;
    if(use[p] + up >= k && val[p] >= v) ret = 1; ///best case condition

    int fuka = up, faka = up, cnt = 0;
    if(sz[p].F > up) fuka = sz[p].F + ok * up;
    if(sz[p].S > up) faka = sz[p].S + ok * up;

    for(auto x : mat[p])
    {
        if(x != pa && mina[x]  >= v) fuka += use[x], faka += use[x];
        else if(x != pa) cnt++;
    }
    if(cnt != 1) ok = 0;
    if(val[p] >= v) faka++, fuka++;

    for(auto x : mat[p])
    {
       if(x == pa) continue;

       if(val[p] < v) ret = max(ret, dfs(x, p, v, 0, 1));
       else if(mina[x] >= v) continue;
       else if(sz[p].F != use[x]) ret = max(ret, dfs(x, p, v, fuka, ok) );
       else ret = max(ret, dfs(x, p, v, faka, ok) );
    }

   return ret;
}

int main()
{
    ios::sync_with_stdio(false);
    ///inf;
    //outf;
    int x, y;

    cin >> n >> k;
    FOR(i,1,n) cin >> val[i];
    FOR(i,1,n-1)
    {
        cin >> x >> y;
        mat[x].PB(y);
        mat[y].PB(x);
    }

    int st = 0, en = 1000000, mid;

    while(st <= en)
    {
        int mid = (st + en)>>1;
        if(rec(1, 1, mid) || dfs(1, 1, mid, 0, 1)) st = mid + 1;
        else en = mid - 1;
    }

    cout << st - 1 << endl;

    return 0;
}
