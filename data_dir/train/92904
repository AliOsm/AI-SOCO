#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>
#include <chrono>
#include <cassert>

using namespace std;
using ll = long long;

struct Edge {
  int v, u;
  ll cost;

  Edge(): v{-1}, u{-1}, cost{0} {}
  Edge(int _v, int _u, ll _cost): v{_v}, u{_u}, cost{_cost} {}

  bool operator<(const Edge& rhs) const {
    return cost < rhs.cost;
  }
};

class DSU {
  public:
    DSU(int _n): n{_n} {
      p.resize(n);
      sz.resize(n);
      for(int i = 0; i < n; ++i) {
        p[i] = i;
        sz[i] = 1;
      }
    }

    int find(int x) {
      if (x != p[x]) {
        return p[x] = find(p[x]);
      }
      return x;
    }

    void unite(int a, int b) {
      a = find(a);
      b = find(b);
      if (a == b) {
        return;
      }
      if (sz[a] > sz[b]) {
        swap(a, b);
      }
      p[a] = b;
      sz[b] += sz[a];
    }
  private:
    vector<int> p, sz;
    int n;
};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n, m;
  cin >> n >> m;
  vector<ll> a(n);
  int idx = -1;
  for(int i = 0; i < n; ++i) {
    cin >> a[i];
    if (idx == -1 || a[idx] > a[i]) {
      idx = i;
    }
  }

  vector<Edge> e(m);
  for(int i = 0; i < m; ++i) {
    cin >> e[i].v >> e[i].u >> e[i].cost;
    --e[i].v;
    --e[i].u;
  }
  for(int i = 0; i < n; ++i) {
    if (i == idx) {
      continue;
    }
    e.emplace_back(idx, i, a[idx] + a[i]);
  }

  sort(e.begin(), e.end());
  ll ret = 0;
  int cmp = n;
  DSU dsu(n);
  for(const auto& edge : e) {
    int v = edge.v, u = edge.u;
    ll cost = edge.cost;
    v = dsu.find(v);
    u = dsu.find(u);
    if (v == u) {
      continue;
    }
    dsu.unite(v, u);
    ret += cost;
    --cmp;
    if (cmp == 1) {
      break;
    }
  }

  cout << ret << endl;
  return 0;
}
