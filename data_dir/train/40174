#include <iostream>
#include <cstdio>
#include <string>
#include <string.h>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <cassert>
#include <bitset>
#include <fstream>
#include <stack>
#include <cstdlib>
#include <unordered_set>
#include <unordered_map>

using namespace std;

#define fst first
#define snd second
#define pb push_back
#define mp make_pair
#define ll long long
#define ull unsigned long long
#define ld long double

template < typename T>
T sqr(T x) {
	return x * x;
}

template < typename T>
T abs(T x) {
	return x > 0 ? x : -x;
}

//////////////////////////////////////////////////

const int maxn = 2e5+3;
ll ans[maxn];
ll d[maxn];
ll cnt[5][maxn];
ll CNT[maxn];
vector < int > g[maxn];
ll nans, nd, nCNT, ncnt[5];

int n, k;

void dfs(int v, int p=0) {
	for (auto to: g[v]) {
		if (to != p) {
			dfs(to, v);
		}
	}
	ans[v] = 0;
	d[v] = 0;
	cnt[0][v] = 1;
	CNT[v] = 1;
	for (auto to: g[v]) {
		if (to == p) {
			continue;
		}
		nCNT = CNT[v] + CNT[to];
		ncnt[0] = cnt[0][v] + cnt[k-1][to];
		for (int i = 1; i < k; i++) {
			ncnt[i] = cnt[i][v] + cnt[i-1][to];
		}
		nd = d[v] + d[to] + cnt[k-1][to];
		nans = ans[v] + ans[to] + d[v] * CNT[to] + d[to] * CNT[v];
		for (int i = 0; i < k; i++) {
			for (int j = 0; j < k; j++) {
				if (i + j + 1 <= k) {
					nans += cnt[i][v] * cnt[j][to];
				} else {
					nans += cnt[i][v] * cnt[j][to] * 2;
				}
			}
		}
		ans[v] = nans;
		d[v] = nd;
		for (int i = 0; i < k; i++) {
			cnt[i][v] = ncnt[i];
		}
		CNT[v] = nCNT;
	}
}

int main() {
	//srand(time(NULL));
	#ifdef LOCAL	
		//gen();
		freopen("a.in", "r", stdin);
		//freopen("a.out", "w", stdout);
		cout << endl << endl;
	#else
		//freopen("paratroopers.in", "r", stdin);
		//freopen("paratroopers.out", "w", stdout);
	#endif
	//check();
	
	//ios_base::sync_with_stdio(false);
	
	scanf("%d%d", &n, &k);
	for (int i = 1; i < n; i++) {
		int u, v;
		scanf("%d%d", &u, &v);
		g[u].pb(v);
		g[v].pb(u);
	}
	dfs(1);
	cout << ans[1] << "\n";
	
	return 0;
}
