#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mp(x, y) make_pair(x, y)
#define mod 1000000007
#define PI 3.1415926536
#define pll pair<ll, ll>

using namespace std;

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
           res %= mod;
       }
       tp *= tp;
       tp %= mod;
       b >>= 1ll;
    }
    return res;
}

ll vec_mult(ll x1, ll y1, ll x2, ll y2, ll x3, ll y3) {
   return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
   cout << "YES" << endl;
   exit(0);
}

void no() {
   cout << "NO" << endl;
   exit(0);
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

struct Fenwick {
	int n;
	vector<int> a;

	Fenwick(int _n = 0): n(_n), a(_n) {}

	void add(int pos, int x) {
	    while (pos < n) {
	        a[pos] += x;
            pos |= pos + 1;
        }
	}

	int get(int pos) {
	    int res = 0;
	    while (pos >= 0) {
	        res += a[pos];
	        pos = (pos & (pos + 1)) - 1;
        }
        return res;
	}

	int get(int l, int r) {
		return get(r) - get(l - 1);
	}
};

struct Robot {
    int x, r, iq;
    Robot() {}
    Robot(int t1, int t2, int t3): x(t1), r(t2), iq(t3) {}
    bool operator<(const Robot& a) const {
        return r > a.r;
    }
};
const ll N = 2e5 + 5, inf = 1e18;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    ll n = nxt(), k = nxt();
    vector<Robot> mas(n);
    for (int i = 0; i < n; i++) {
        ll t1 = nxt(), t2 = nxt(), t3 = nxt();
        mas[i] = Robot(t1, t2, t3);
    }
    sort(all(mas));

    vector<ll> iqs;
    for (int i = 0; i < n; i++) {
        iqs.push_back(mas[i].iq);
    }
    make_unique(iqs);

    vector<vector<ll>> positions(iqs.size());
    for (int i = 0; i < n; i++) {
        int ind = lower_bound(all(iqs), mas[i].iq) - iqs.begin();
        positions[ind].push_back(mas[i].x);
    }
    for (int i = 0; i < positions.size(); i++) {
        make_unique(positions[i]);
    }

    vector<Fenwick> fenws;
    for (int i = 0; i < iqs.size(); i++) {
        fenws.push_back(Fenwick(positions[i].size()));
    }
    ll ans = 0;
    for (auto t : mas) {
        int l = lower_bound(all(iqs), t.iq - k) - iqs.begin();
        while (l < iqs.size() && iqs[l] <= t.iq + k) {
            ll le = lower_bound(all(positions[l]), t.x - t.r) - positions[l].begin();
            ll ri = upper_bound(all(positions[l]), t.x + t.r) - positions[l].begin() - 1;
            ans += fenws[l].get(le, ri);
            l++;
        }
        int ind = lower_bound(all(iqs), t.iq) - iqs.begin();
        int pos = lower_bound(all(positions[ind]), t.x) - positions[ind].begin();
        fenws[ind].add(pos, 1);
    }
    cout << ans;
    return 0;
}
