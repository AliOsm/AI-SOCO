#include <bits/stdc++.h>

using namespace std;
using llint = long long;

const int N = 1e5 + 10;
const llint inf = 1ll << 50;

int n, k;
int a[N];
llint d[N];

bool mulless(llint a, int b, llint t) {
  a = abs(a);
  b = abs(b);
  if (a < t / b) return 1;
  if (a == t / b) {
    return a * b < t;
  }
  return 0;
}

int main() {
  while (scanf("%d%d", &n, &k) != EOF) {
    vector <llint> kp;
    if (k == 1) {
      kp.push_back(k);
    } else if (k == -1) {
      kp.push_back(1);
      kp.push_back(-1);
    } else {
      kp.push_back(1);
      for (llint i = 1; i * k < inf; i *= k) {
	kp.push_back(i * k);
      }
    }
    for (int i = 1; i <= n; ++i) {
      scanf("%d", a + i);
    }
    for (int i = 1; i <= n; ++i) {
      d[i] = d[i - 1] + a[i];
    }
    map <llint, int> mp;
    mp[0] += 1;
    llint ans = 0;
    for (int i = 1; i <= n; ++i) {
      for (llint kk : kp) {
	if (mp.count(d[i] - kk))
	  ans += mp[d[i] - kk];
      }
      mp[d[i]]++;
    }
    printf("%lld\n", ans);
  }
  return 0;
}
