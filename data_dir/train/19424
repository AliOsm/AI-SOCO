#include <bits/stdc++.h>

using namespace std;

const int N = 100005;

const int oo = 1e9;
vector<int> g[N];
int n, m, d, p[N], L[N];
int ml[N], tml[N];

void prec(int u, int fa){
	ml[u] = p[u] ? 0 : -oo;
	multiset<int> m;
	if(p[u]) m.insert(1);
	for(int v : g[u]) if(v != fa){
		L[v] = L[u]+1;
		prec(v, u);
		m.insert(ml[v]+2);
		ml[u] = max(ml[u], ml[v]+1);
	}
	for(int v : g[u]) if(v != fa){
		m.erase(m.find(ml[v]+2));
		if(m.empty()) tml[v] = -oo;
		else tml[v] = *m.rbegin();
		m.insert(ml[v]+2);
	}
}

int vet[N];

// add[u] = n-L[u]

multiset<int> all;

int f(int u, int fa){
	int ans = 0;

	int add = n-L[u];
	
	bool ok = 1;
	all.insert(tml[u]+add);
	if(*all.rbegin() > d+add) ok = 0;

	if(ml[u] > d) ok = 0;

	ans += ok;

	for(int v : g[u]) if(v != fa){
		ans += f(v, u);
	}

	all.erase(all.find(tml[u]+add));
	
	return ans;
}

int main(){

	scanf("%d %d %d", &n, &m, &d);

	for(int i = 0, x; i < m; i++)
		scanf("%d", &x), p[x] = 1;

	for(int i = 1; i < n; i++){
		int a, b;
		scanf("%d %d", &a, &b);
		g[a].push_back(b);
		g[b].push_back(a);
	}

	tml[1] = -oo;
	prec(1, 1);

	printf("%d\n", f(1, 1));

}
