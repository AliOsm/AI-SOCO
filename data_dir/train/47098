#include <bits/stdc++.h>
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define LEFT(n) (2*(n))
#define RIGHT(n) (2*(n)+1)
 
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ull, ull> ii;
typedef pair<int, ii> iii;
 
ll pwr(ll base, ll p, ll mod = MOD){
ll ans = 1;while(p){if(p&1)ans=(ans*base)%mod;base=(base*base)%mod;p/=2;}return ans;
}
 
ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


int r, c, q, arr[1002][1002], ans[100005];
iii queries[100005];
vector<int> adj[100005];


void backtrack(int v){

	for(auto vv : adj[v]){

		if(queries[vv].ff == 4){
			ans[vv] = ans[v];
			backtrack(vv);
		}
		else{
			if(queries[vv].ff == 1){
				ans[vv] = ans[v] + (arr[queries[vv].ss.ff][queries[vv].ss.ss] == 0);
				int last = arr[queries[vv].ss.ff][queries[vv].ss.ss];
				arr[queries[vv].ss.ff][queries[vv].ss.ss] = 1;
				backtrack(vv);
				arr[queries[vv].ss.ff][queries[vv].ss.ss] = last;
			}
			else if(queries[vv].ff == 2){

// cout<<"yolo "<<v<<" "<<vv<<" "<<queries[vv].ff<<" "<<queries[vv].ss.ff<<" "<<queries[vv].ss.ss<<endl;

				ans[vv] = ans[v] - (arr[queries[vv].ss.ff][queries[vv].ss.ss] == 1);
				int last = arr[queries[vv].ss.ff][queries[vv].ss.ss];
				arr[queries[vv].ss.ff][queries[vv].ss.ss] = 0;
				backtrack(vv);
				arr[queries[vv].ss.ff][queries[vv].ss.ss] = last;
			}
			else if(queries[vv].ff == 3){
				ans[vv] = ans[v];
				for(int j=1;j<=c;j++)
					if(arr[queries[vv].ss.ff][j] == 0){
						ans[vv]++;
						arr[queries[vv].ss.ff][j] = 1;
					}
					else{
						ans[vv]--;
						arr[queries[vv].ss.ff][j] = 0;
					}
				backtrack(vv);
				for(int j=1;j<=c;j++)
					if(arr[queries[vv].ss.ff][j] == 0){
						arr[queries[vv].ss.ff][j] = 1;
					}
					else{
						arr[queries[vv].ss.ff][j] = 0;
					}
			}
		}
	}
}


int main(){

    // ios_base::sync_with_stdio(0);

	scanf("%d%d%d", &r, &c, &q);
	for(int i=1;i<=q;i++){
		int type, a, b = -1;
		scanf("%d%d", &type, &a);
		if(type <= 2)	scanf("%d", &b);
		queries[i] = iii (type, ii (a, b));
		if(type < 4)
			adj[i-1].pb(i);
		else
			adj[a].pb(i);
	}

// cout<<"adj:\n";
// for(int i=0;i<=q;i++){
// 	cout<<i<<": ";for(auto j : adj[i])	cout<<j<<" ";cout<<endl;
// }cout<<endl;

	ans[0] = 0;
	backtrack(0);
	for(int i=1;i<=q;i++)
		printf("%d\n", ans[i]);
    return 0;
}



