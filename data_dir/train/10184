#include <iostream>
#include <stdio.h>
#include <string>
#include <memory.h>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <time.h>
#include <assert.h>
#include <cmath>
#include <stack>
#include <string.h>
#include <sstream>
#include <algorithm>
using namespace std;
typedef long long ll;
const int N = 2000011;
char w[N];
string s, l, r;
int zA[N], zB[N];
const int M = 998244353;
int dp[N];
void Z(string &s, int *z) {
	int n = s.size();
	int L = 0, R = 0;
	for (int i = 1; i < n; i++) {
		if (i > R) {
			L = R = i;
			while (R < n && s[R - L] == s[R]) R++;
			z[i] = R - L; R--;
		}
		else {
			int k = i - L;
			if (z[k] < R - i + 1) z[i] = z[k];
			else {
				L = i;
				while (R < n && s[R - L] == s[R]) R++;
				z[i] = R - L; R--;
			}
		}
	}
}
int comp(int i, int len, int *z, int len2, string &w) {
	if (len < len2)
		return -1;
	if (len > len2)
		return 1;
	int at = z[i + len2 + 1];
	if (at == len2)
		return 0;
	if (s[i + at] < w[at])
		return -1;
	return 1;
}
int main()
{
	scanf("%s", w); s = w;
	scanf("%s", w); l = w;
	scanf("%s", w); r = w;
	string tmp = l + "#" + s;
	Z(tmp, zA);
	tmp = r + "#" + s;
	Z(tmp, zB);
	int n = s.size();
	dp[n] = 1;
	for (int i = n - 1; i >= 0; --i) {
		if (s[i] == '0') {
			if (l == "0") {
				dp[i] = dp[i + 1] - dp[i + 2];
				if (dp[i] < 0)
					dp[i] += M;
				if (dp[i] >= M)
					dp[i] -= M;
			}
			dp[i] += dp[i + 1];
			if (dp[i] >= M)
				dp[i] -= M;
			continue;
		}
		int low = i, high = n - 1, mid, left = -1;
		while (low <= high) {
			mid = (low + high) / 2;
			int len = mid - i + 1;
			int c = comp(i, len, zA, l.size(), l);
			if (c >= 0) {
				left = mid;
				high = mid - 1;
			}
			else
				low = mid + 1;
		}
		low = i; high = n - 1;
		int right = -1;
		while (low <= high) {
			mid = (low + high) / 2;
			int len = mid - i + 1;
			int c = comp(i, len, zB, r.size(), r);
			if (c <= 0) {
				right = mid;
				low = mid + 1;
			}
			else
				high = mid - 1;
		}
		if (left != -1 && left <= right) {
			dp[i] = dp[left + 1] - dp[right + 2];
			if (dp[i] < 0)
				dp[i] += M;
			if (dp[i] >= M)
				dp[i] -= M;
		}
		if (i) {
			dp[i] += dp[i + 1];
			if (dp[i] >= M)
				dp[i] -= M;
		}
	}
	printf("%d\n", dp[0]);
	return 0;
}