#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <set>
#include <algorithm>
#include <cassert>
#include <queue>
#include <map>
#include <functional>
#include <utility>
#include <iostream>
#include <string>
#include <memory>
#include <cmath>
#include <cctype>
#include <iomanip>

//using namespace std;

typedef long long ll;
typedef ::std::pair<ll, ll > pll;
typedef ::std::vector< pll > vll;
typedef ::std::vector<int> vi;

#define sz(x)   ( ( int ) ( ( x ).size() ) )
#define FOR(i,a,b)   for(int i = (a), b__ = (b); i <= b__; ++i)

static constexpr size_t maxn = 1000001;

static constexpr inline ll gcd( ll x, ll y )noexcept { return y == 0 ? x : gcd(y,x%y); }
 
struct rect
{
    ll xa, ya;
    ll xb, yb;
};

rect union_rect(rect a, rect b){
    return { std::max(a.xa, b.xa), std::max(a.ya, b.ya), std::min(a.xb, b.xb), std::min(a.yb, b.yb) };
}


int solve()
{
    
    int n;
    scanf("%d",&n);
    
    std::vector< rect > rs(n+2);
    
    
    for(int i = 1; i <= n; ++i)
    {
        int xa,ya,xb,yb;
        scanf("%d%d%d%d",&xa,&ya,&xb,&yb);
        
        rs[i] = rect{ xa, ya, xb, yb } ;
    }
    
    
    
    std::vector< rect > us(n+4);
    
    static const ll LL_INF  = 1ll << 50;
    
    us[0] = rect{ -LL_INF, -LL_INF, LL_INF, LL_INF } ;
    
    for(int i = 1; i<=n; ++i){
        us[i] = union_rect(us[i-1], rs[i]);
    }
    
    rect right = us[0];
    
    for(int i = n; i > 0; --i)
    {
        //skip i-th rect
        //union right with us[i-1]
        
        rect ans = union_rect(right, us[i-1]);
        if (ans.xa <= ans.xb && ans.ya <= ans.yb ){
            printf("%lld %lld\n", ans.xa, ans.ya );
            return 0;
        }
        
        right = union_rect(right, rs[i]);
    }
    
    assert(false);
    return 0;
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen( "input.txt", "r", stdin );
    freopen( "output.txt", "w", stdout );
#endif 
    
    solve();
    
}
