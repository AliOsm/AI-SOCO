/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
/* FOR ACM-ICPC WF*/
#include <bits/stdc++.h>

#define MOD 1000000007
#define LINF (1LL<<60)
#define INF 2147483647
#define PI 3.1415926535897932384626433
#define ll long long
#define pii pair<int,int>
#define mp(x,y) make_pair((x),(y))
#define pb(x) push_back((x))
#define vi vector<int>
#define vvi vector<vi>
#define EPS 1e-9

using namespace std;

int n, m;
ll T[400010], d[400010];
map<int, ll> m1;

inline void push(int id, int l, int r){
	int mid = l+r>>1;
	d[id<<1] += d[id];
	d[id<<1|1] += d[id];
	T[id<<1] += d[id]*(mid-l);
	T[id<<1|1] += d[id]*(r-mid);
	d[id] = 0;
	return;
}

ll ask(int x, int y, int id = 1, int l = 1, int r = n+1){
	if(l >= y || x >= r) return 0;
	if(x <= l && r <= y) return T[id];
	push(id, l, r);
	return ask(x, y, id<<1, l, l+r>>1)+ask(x, y, id<<1|1, l+r>>1, r);
}

void upd(int x, int y, ll val, int id = 1, int l = 1, int r = n+1){
	if(l >= y || x >= r) return;
	if(x <= l && r <= y){
		T[id] += val*(r-l);
		d[id] += val;
		return;
	}
	push(id, l, r);
	upd(x, y, val, id<<1, l, l+r>>1);
	upd(x, y, val, id<<1|1, l+r>>1, r);
	T[id] = T[id<<1]+T[id<<1|1];
	return;
}

int main(){
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	ios_base::sync_with_stdio(false);
	
	cin >> n >> m;
	for(int i = 1; i <= n; i++)
		m1[i] = i;
	m1[n+1] = 0;	
	
	for(int i = 0, l, r, x, op; i < m; i++){
		cin >> op >> l >> r;
		if(op == 1){
			cin >> x;
			auto it = --m1.upper_bound(r+1);
			m1[r+1] = it->second;
			auto rit = m1.lower_bound(r+1);
			it = --m1.upper_bound(l);
			m1[l] = it->second;
			auto lit = it = m1.lower_bound(l);
			
			for(auto nit = it; it->first <= r; it++){
				nit++;
				upd(it->first, nit->first, abs(x-it->second));
			}
			
			m1.erase(++lit, rit);
			m1[l] = x;		
		}
		else if(op == 2)
			cout << ask(l, r+1) << endl;
		else assert(false);
	}
	return 0;
}

