#include<bits/stdc++.h>
#define int long long
using namespace std;
#define mx 100005
int n;
vector<pair<int,int>> adj[mx];
vector<int> op[mx];
int iwant(int x,int y)
{
     int ind=lower_bound(op[x].begin(),op[x].end(),y)-op[x].begin();
     if(ind==op[x].size() || op[x][ind]!=y)
          return y;
     int low=ind,high=op[x].size()-1,ans=op[x].size();
     while(low<=high)
     {
          int mid=low+(high-low)/2;
          if(op[x][mid]-y==mid-ind)
          {
               ans=mid;
               low=mid+1;
          }
          else
          {
               high=mid-1;
          }               
     }
     return op[x][ans]+1;
}
int mypath()
{
     int dist[mx];
     for(int i=1;i<=n;i++)
          dist[i]=1e15;
     set<pair<int,int>> s;
     int vis[mx];
     memset(vis,0,sizeof(vis));
     s.insert({iwant(1,0),1});
     dist[1]=iwant(1,0);
     while(s.size())
     {
          int u=(*s.begin()).second;
          s.erase(s.begin());
          if(vis[u])
               continue;
          vis[u]=1;
          for(auto j:adj[u])
          {
               int v=j.first,w=j.second;
               if(dist[v]>iwant(v,dist[u]+w))
               {
                    dist[v]=iwant(v,dist[u]+w);
                    s.insert({dist[v],v});
               }
          }
     }
     return (dist[n]==1e15?-1:dist[n]);

}
int32_t main()
{
     cin.tie(0);cout.tie(0);
     ios_base::sync_with_stdio(0);
     int m;cin>>n>>m;
     for(int i=0;i<m;i++)
     {
          int x,y,w;cin>>x>>y>>w;
          adj[x].push_back({y,w});
          adj[y].push_back({x,w});
     }
     for(int i=1;i<n;i++)
     {
          int k;cin>>k;
          for(int j=0;j<k;j++)
          {
               int x;cin>>x;
               op[i].push_back(x);
          }
     }
     cout<<mypath();

}
