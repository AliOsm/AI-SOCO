#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef long double real;

#ifdef WIN32
#define INT64 "%I64d"
#define UINT64 "%I64u"
#else
#define INT64 "%lld"
#define UINT64 "%llu"
#endif

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

const int MAX_N = 103, MAX_C = 0x3F3F3F3F, NA = -1;

bool b [MAX_N];
int good [MAX_N], unknown [MAX_N], total [MAX_N];
int lo [MAX_N], hi [MAX_N];
int k, m, n;

int main (void)
{
 int i, j, z;

 freopen ("input.txt", "rt", stdin);
 freopen ("output.txt", "wt", stdout);

 while (scanf (" %d %d", &m, &k) != EOF)
 {
  memset (b, 0, sizeof (b));
  for (i = 0; i < k; i++)
  {
   scanf (" %d", &z);
   b[z] = true;
  }

  scanf (" %d", &n);
  for (i = 0; i < n; i++)
  {
   scanf (" %*s %d", &total[i]);
   unknown[i] = good[i] = 0;
   for (j = 0; j < total[i]; j++)
   {
    scanf (" %d", &z);
    if (z == 0)
     unknown[i]++;
    else if (b[z])
     good[i]++;
   }

   int bad = total[i] - good[i] - unknown[i];
//   int left = m - total[i];
   int goodleft = k - good[i];
   int badleft = m - k - bad;
   eprintf ("%d %d %d\n", bad, goodleft, badleft);
   lo[i] = good[i] + max (0, unknown[i] - badleft);
   hi[i] = good[i] + min (unknown[i], goodleft);
  }

  for (i = 0; i < n; i++)
   eprintf ("%d %d %d %d %d\n", good[i], unknown[i], total[i], lo[i], hi[i]);

  for (i = 0; i < n; i++)
  {
   bool canlo = false;
   for (j = 0; j < n; j++)
    if (j != i)
     if (lo[i] < hi[j])
      canlo = true;

   bool canhi = true;
   for (j = 0; j < n; j++)
    if (j != i)
     if (hi[i] < lo[j])
      canhi = false;

   if (canlo && canhi)
    printf ("2\n");
   else if (canlo)
    printf ("1\n");
   else if (canhi)
    printf ("0\n");
   else
    assert (false);
  }
 }

 return 0;
}
