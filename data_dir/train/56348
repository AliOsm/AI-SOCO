#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl

const int maxn = 1e6 + 5;



bool ispal(string& s) {
  int n = s.length();
  for (int i=0; i<n/2; i++) {
    if (s[i] != s[n-1-i]) return false;
  }
  return true;
}

string s;
int n;

// bool ispal(int l, int r) {
//   while (l<r && s[l]==s[r]) {
//     l++; r--;
//   }
//   return l>=r;
// }


string solve() {
  cin>>s;
  n = s.length();
  int l=0; int r=n-1;
  while (l<r && s[l]==s[r]) {
    l++;r--;
  }
  if (l>r) {
    return s;
  }
  string prefix = s.substr(0,l);
  string suffix = s.substr(r+1);
  //watch(prefix);
  //watch(suffix);

  string ans = prefix+suffix;
  
  // go left
  string cur = prefix;
  for (int i=l; i<=r; i++) {
    cur += s[i];
    for (char c: suffix) cur += c;
    if (ispal(cur)) {
      if (cur.length() > ans.length()) ans = cur;
    }
    for (int j=0; j<(int)suffix.length(); j++) cur.pop_back();
  }

  // go right
  cur = suffix;
  reverse(cur.begin(), cur.end());
  reverse(prefix.begin(), prefix.end());
  for (int i=r; i>=l; i--) {
    cur += s[i];
    for (char c: prefix) cur += c;
    if (ispal(cur)) {
      if (cur.length() > ans.length()) ans = cur;
    }
    for (int j=0; j<(int)prefix.length(); j++) cur.pop_back();
  }
  return ans;
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);

  int t; cin>>t;
  while (t--) {
    cout<<solve()<<"\n";
  }

  return 0;
}
// don't forget to read in the input :^)
