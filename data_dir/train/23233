#include<bits/stdc++.h>
using namespace std;
const int N = 3e5 + 10, L = 21;
int n, r, t, C[L][N], dp[L][N];
long long res;
vector < int > V[N];
bool Solve(int v, int p, int i, int c)
{
    int cc = 0;
    for (auto X : V[v])
        if (X != p)
            cc += (dp[i - 1][X] >= c);
    return (cc >= c);
}
int DFS(int v, int p)
{
    int le, ri, mid, h = 1;
    dp[1][v] = C[1][v] = n;
    for (auto X : V[v])
    {
        if (X == p)
            continue;
        h = max(h, DFS(X, v) + 1);
        for (int i = 2; i < L; i++)
            C[i][v] = max(C[i][v], C[i][X]);
    }
    for (int i = 2; i < L; i++)
    {
        le = 1; ri = n + 1;
        while (ri - le > 1)
        {
            mid = (le + ri) / 2;
            if (Solve(v, p, i, mid))
                le = mid;
            else
                ri = mid;
        }
        C[i][v] = max(C[i][v], le);
        dp[i][v] = le;
    }
    res += h;
    for (int i = 1; i < L - 1; i++)
        res += i * (C[i][v] - C[i + 1][v]);
    return (h);
}
int main()
{
    scanf("%d", &n);
    for (int i = 1; i < n; i++)
        scanf("%d%d", &r, &t), V[r].push_back(t), V[t].push_back(r);
    DFS(1, 0); return !printf("%I64d", res);
}
