#include <bits/stdc++.h>
using namespace std;
#define finish(x) return cout << x << endl, 0
#define ll long long
  
const int N = 200001;
 
int n, tree[4 * N];
vector <int> a;

ll f(int x){
    return 1LL * x * (x + 1) / 2;
}
void update(int l, int r, int node, int idx){
    if(r < l || r < idx || l > idx) return;
    tree[node]++;
    if(l == r) return;
    int mid = (l + r) / 2;
    update(l, mid, 2 * node, idx);
    update(mid + 1, r, 2 * node + 1, idx);
}
int query(int l, int r, int node, int s, int e){
    if(r < l || r < s || l > e) return 0;
    if(s <= l && r <= e) return tree[node];
    int mid = (l + r) / 2;
    return query(l, mid, 2 * node, s, e) + query(mid + 1, r, 2 * node + 1, s, e);
}
int main(){
    scanf("%d", &n);
    a.resize(n);
    for(auto &i : a){
        scanf("%d", &i);
        i--;
    }
    vector <int> p(n);
    for(int i = 0 ; i < n ; i++){
        p[a[i]] = i;
    }
    vector <ll> ans(n);
    for(int i = 0 ; i < n ; i++){
        ans[i] += query(0, n - 1, 1, p[i] + 1, n - 1);
        if(i) ans[i] += ans[i - 1];
        update(0, n - 1, 1, p[i]);
    }
    set <int> l, r;
    ll suml = 0, sumr = 0;
    for(int i = 0 ; i < n ; i++){
        if(l.size() && p[i] < *l.rbegin()){
            l.insert(p[i]);
            suml += p[i];
        }
        else{
            r.insert(p[i]);
            sumr += p[i];
        }
        while(l.size() > r.size()){
            int x = *l.rbegin();
            r.insert(x);
            sumr += x;
            l.erase(x);
            suml -= x;
        }
        while(r.size() > l.size()){
            int x = *r.begin();
            l.insert(x);
            suml += x;
            r.erase(x);
            sumr -= x;
        }
        ll idx = *l.rbegin();
        ans[i] += sumr - (ll)r.size() * idx;
        ans[i] += (ll)l.size() * idx - suml;
        ans[i] -= f(r.size());
        ans[i] -= f((int)l.size() - 1);
    }
    for(auto &i : ans) printf("%I64d ", i);
    puts("");
}
