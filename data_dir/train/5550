#include <bits\stdc++.h>
using namespace std;

#define VIC ios::sync_with_stdio(0);cin.tie(0);ios_base::sync_with_stdio(0);
#define sfi(x) scanf("%d", &x)
#define sfi2(x, y) scanf("%d%d", &x,&y)
#define sfl2(x, y) scanf("%I64d%I64d", &x,&y)
#define sfl(x) scanf("%I64d", &x)
#define sfd(x) scanf("%lf", &x)
#define sfd2(x, y) scanf("%lf%lf", &x, &y)
#define sfs(x) scanf("%s", &x)
#define wtf(s) freopen((s), "w", stdout)
#define rff(s) freopen((s), "r", stdin)
#define mod 998244353
#define pi (2 * acos(0))
#define x first
typedef long double ld;
typedef long long ll;
const int N = 1e5 + 5;
//g++ -std=c++11 main.cpp && a.exe
ll find_lis(vector<ll> a, int beg)
{
    int n = a.size();
    int LIS[n + 5];
    memset(LIS, 0, sizeof LIS);
    int sz = 0 + beg;
    for(int i = 0; i < n; i++)
    {
        if (sz == 0 || a[i] >= LIS[sz - 1])
        {
            LIS[sz++] = a[i];
            continue;
        }
        if (a[i] < LIS[0])
        {
            if (beg == 0)
                LIS[0] = a[i];
            continue;
        }
        int st = 0, en = sz - 1, index = -1;
        while (st <= en)
        {
            int mid = (st + en) / 2;
            if (a[i] >= LIS[mid])
            {
                index = mid;
                st = mid + 1;
            }
            else
                en = mid - 1;
        }
        LIS[index + 1] = a[i];
    }
    return sz;
}

int main()
{
    VIC
    ll x, y, maxiv;
    vector<ll> a, b;
    int n;
    cin >> n;
    vector<pair<ll, ll>> v(n);
    for(int i = 0; i < n; i++)
        cin >> v[i].first >> v[i].second;
    cin >> maxiv;
    for(int i = 0; i < n; i++)
        x = v[i].first, y = v[i].second, v[i] = {-x + y * maxiv, x + y * maxiv};
    sort(v.begin(), v.end());
    for(int i = 0; i < n; i++)
        a.push_back(v[i].second);
    for(int i = 0; i < n; i++)
        if (v[i] >= make_pair((ll)0, (ll)0))
            b.push_back(v[i].second);
    cout << find_lis(b, 1) - 1 << ' ' << find_lis(a, 0);
    return 0;
}
