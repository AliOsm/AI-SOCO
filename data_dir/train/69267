#include <bits/stdc++.h>
using namespace std;
//using lint = long long;

struct P
{
    int x,y;

    bool operator<(const P &a)const{
        if(x!=a.x)
              return x>a.x;
        return y>a.y;
    }

};

vector<long long> v[111111];

//bitset<4001000> b;
int a,i,b,n,d,c,m,k;


int o[111121];
int l[111111];
int j[111111];
int e;


//int dx[10]={2,2,-2,-2,1,1,-1,-1},dy[10]={1,-1,1,-1,2,-2,2,-2};

int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[111112];
stack<int> s;
//set<int> s[222][22];
//priority_queue<int,vector<int>,greater<int> > q1;
queue<P> q;
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p,p1;
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
//list<int> l;

string r2;
char r[13];
//deque<int> de;
//srand((int)time(NULL));
/*bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}*/

bool as(P a,P b)
{
    if(a.x!=b.x)
    return a.x<b.x;
    return a.y<b.y;
}


bool asd(int a,int b)
{
    return o[a]<o[b];
}

bool qw(int a,int b)
{
    return a>b;
}

int main()
{
    scanf("%d %d",&a,&b);
    //a=100000;
    //b=100000;
    for(int i=1;i<=a;i++)
    {
        //u[i]={1,1};
        scanf("%d %d",&u[i].x,&u[i].y);
        o[u[i].x]++;
    }
    for(int i=1;i<=b;i++)
        l[i]=i;
    sort(l+1,l+b+1,asd);
    for(int i=1;i<=b;i++)
        j[l[i]]=i;
    //puts("#");
    for(int i=1;i<=a;i++)
    {
        v[j[u[i].x]].push_back(u[i].y);
    }
    for(int i=1;i<=b;i++)
    if(v[i].size())
    {
        sort(v[i].begin(),v[i].end(),qw);
        //puts("#");
        for(int h=1;h<v[i].size();h++)
            v[i][h]+=v[i][h-1];
    }
    for(int i=0;i<v[b].size();x=max(x,v[b][i]),i++)
        if(v[b][i]<0) v[b][i]=0;
    //puts("#");
    for(int i=b-1;i>0;i--)
    for(int h=0;h<v[i].size();h++)
    {
        if(v[i][h]<0) v[i][h]=0;
        v[i][h]+=v[i+1][h];
        x=max(x,v[i][h]);
    }
    printf("%lld",x);
}




