#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
#define itn int
#define all(c) c.begin(),c.end()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define ll long long
#define pll pair<ll, ll>
#define mp(x, y) make_pair(x, y)
using namespace std;

const ll N = 3e5 + 5, inf = 1e18, mod = 998244353 ;
const double PI = 3.1415926536;
int days[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

ll fact(ll n) {
    n = abs(n);
    ll t = 0;
    for (ll i = 1; i * i <= n; i++) {
        if (n % i == 0) {
            t++;
            if (n / (n / i) != n / i) t++;
        }
    }
    return t;
}

inline ll getPow(ll a,ll b) {
    ll res = 1ll, tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       tp %= mod; res %= mod;
       b >>= 1ll;
    }
    return res;
}

ll vec_mult(const pll & t1, const pll & t2, const pll & t3) {
   const ll & x1 = t1.first, y1 = t1.second;
   const ll & x2 = t2.first, y2 = t2.second;
   const ll & x3 = t3.first, y3 = t3.second;
   return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));
}

void ok() {
   cout << "YES" << endl;
   exit(0);
}

void no() {
   cout << "NO" << endl;
   exit(0);
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

struct SegTree {
    vector<ll> t;
    int n;
    SegTree(int n) {
        this->n = n;
        t.resize(n * 4 + 10);
    }
    
    ll f = 0;
    void upd(int v, int l, int r, int pos, int val) {
        if (pos < l || pos > r) return;
        if (l == r) {
            t[v] = val;
            return;
        }
        int md = (l + r) / 2;
        upd(v * 2, l, md, pos, val);
        upd(v * 2 + 1, md + 1, r, pos, val);
        t[v] = __gcd(t[v * 2], t[v * 2 + 1]);
    }

    bool check(int v, int l, int r, int tl, int tr, int x) {
        if (r < tl || l > tr) return true;
        if (t[v] % x == 0) return true;
        if (l == r) {
            if (l >= tl && l <= tr) f++;
            return true;
        }
        int md = (l + r) / 2;
        if (tl <= l && tr >= r) {
            if (t[v * 2] % x && t[v * 2 + 1] % x) { 
                return false;    
            }
            if (t[v * 2] % x) {
                return check(v * 2, l, md, tl, tr, x);
            } else {
                return check(v * 2 + 1, md + 1, r, tl, tr, x);
            }
        } else {
            return check(v * 2, l, md, tl, tr, x) &&
                check(v * 2 + 1, md + 1, r, tl, tr, x);
        }
    }
};

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    int n = nxt();
    SegTree tree(n);
    for (int i = 0; i < n; i++) {
        int x = nxt();
        tree.upd(1, 0, n - 1, i, x);
    }
    int q = nxt();
    while (q--) {
        int t = nxt();
        if (t == 1) {
            int l = nxt() - 1, r = nxt() - 1, x = nxt();
            tree.f = 0;
            if (tree.check(1, 0, n - 1, l, r, x) && tree.f <= 1) {
                cout << "YES\n";
            } else {
                cout << "NO\n";
            }
        } else {
            
            int pos = nxt() - 1, x = nxt();
            tree.upd(1, 0, n - 1, pos, x);
        }
    }
}
