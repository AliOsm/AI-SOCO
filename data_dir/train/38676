/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

const int N = 2e5 + 5;
long long dp1[N], dp2[N];
vector<int> adj[N];
int n, sz[N];

void dfs1(int u, int par) {
	for (auto v: adj[u])
		if (v ^ par) {
			dfs1(v, u);
			sz[u] += sz[v];
			dp1[u] += dp1[v];
		}
	dp1[u] += ++sz[u];
}

void dfs2(int u, int par) {
	long long sum = dp2[u];
	for (auto v: adj[u])
		if (v ^ par)
			sum += dp1[v] + sz[v];
	for (auto v: adj[u])
		if (v ^ par) {
			dp2[v] = sum + n - dp1[v] - 2 * sz[v] + 1;
			dfs2(v, u);
		}
}

inline void read_input() {
	cin >> n;
	for (int i = 1; i < n; i++) {
		int u, v;
		cin >> u >> v;
		adj[--u].push_back(--v);
		adj[v].push_back(u);
	}
}

inline void solve() {
	dfs1(0, -1);
	dp2[0] = 1;
	dfs2(0, -1);
}

inline void write_output() {
	long long ans = 0;
	for (int u = 0; u < n; u++)
		ans = max(ans, dp1[u] + dp2[u]);
	cout << --ans;
}

int main() {
	ios:: sync_with_stdio(0), cin.tie(0), cout.tie(0);
	read_input(), solve(), write_output();
	return 0;
}
