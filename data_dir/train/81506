#include <iostream>
#include <vector>

using namespace std;

typedef long long int ll;

ll modul=1e9+7;
ll modulo=modul-1;

void add(ll &a,ll b)
{
  a=(a+b)%modulo;
}

ll expo(ll b,ll e)
{
  if (e==0) return 1;
  if (e%2==0) return expo(b*b%modul,e/2);
  return b*expo(b*b%modul,e/2)%modul;
}

int n;
typedef vector<vector<ll> > mat;

mat operator*(mat m1,mat m2)
{
  mat m(n,vector<ll> (n,0));
  for (int i=0;i<n;i++)
    for (int j=0;j<n;j++)
      for (int k=0;k<n;k++)
	add(m[i][j],m1[i][k]*m2[k][j]);
  return m;
}

mat expo(mat m,ll e)
{
  if (e==0) {
    mat id(n,vector<ll> (n,0));
    for (int i=0;i<n;i++)
      id[i][i]=1;
    return id;
  }
  if (e%2==0) return expo(m*m,e/2);
  return m*expo(m*m,e/2);
}

vector<ll> operator*(mat m,vector<ll> v)
{
  vector<ll> res(n,0);
  for (int i=0;i<n;i++)
    for (int j=0;j<n;j++)
      add(res[i],m[i][j]*v[j]);
  return res;
}

void fix(ll &x)
{
  x=x%modulo;
  if (x<0) x+=modulo;
}

ll N,f1,f2,f3,c;

int main()
{
  cin>>N>>f1>>f2>>f3>>c;
  n=5;
  mat m(n,vector<ll> (n,0));
  vector<ll> v(n,0);
  m[0][0]=m[0][1]=m[0][2]=m[1][0]=m[2][1]=m[3][3]=m[3][4]=m[4][4]=1;
  m[0][3]=2;
  m[0][4]=-6;
  v[3]=4;
  v[4]=1;
  ll ec=(expo(m,N-3)*v)[0];
  n=3;
  m=mat(n,vector<ll> (n,0));
  v=vector<ll> (n,0);
  m[0][0]=m[0][1]=m[0][2]=m[1][0]=m[2][1]=1;
  v[2]=1;
  ll e1=(expo(m,N-3)*v)[0];
  v=vector<ll> (n,0);
  v[1]=1;
  ll e2=(expo(m,N-3)*v)[0];
  v=vector<ll> (n,0);
  v[0]=1;
  ll e3=(expo(m,N-3)*v)[0];
  fix(e1);
  fix(e2);
  fix(e3);
  fix(ec);
  ll sol=expo(f1,e1)*expo(f2,e2)%modul*expo(f3,e3)%modul*expo(c,ec)%modul;
  cout<<sol<<endl;
}

