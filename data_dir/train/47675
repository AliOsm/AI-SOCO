#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <functional>
#include <numeric>
#include <queue>
#include <stack>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <complex>
#include <memory.h>
#include <time.h>

using namespace std;

typedef long long LL;

int dp[1 << 7][1 << 7][1 << 4];
int p[1 << 7][1 << 7][1 << 4];
int n, m, k;

char a[1 << 7][1 << 7];

int go(int x, int y, int r)
{
	if (x == 0)
		return r == 0 ? 0 : -(int)1e9;
	int & res = dp[x][y][r];
	if (res != -1)
		return res;
	res = -(int)1e9;
	if (y - 1 >= 0)
	{
		int next = a[x - 1][y - 1] - '0' + go(x - 1, y - 1, (r + a[x - 1][y - 1] - '0') % (k + 1));
		if (next > res)
		{
			res = next;
			p[x][y][r] = -1;
		}
	}
	if (y + 1 < m)
	{
		int next = a[x - 1][y + 1] - '0' + go(x - 1, y + 1, (r + a[x - 1][y + 1] - '0') % (k + 1));
		if (next > res)
		{
			res = next;
			p[x][y][r] = 1;
		}
	}
	return res;
}


int main()
{
	memset(dp, -1, sizeof(dp));
	scanf("%d%d%d", &n, &m, &k);
	for(int i = 0; i < n; ++i)
		scanf("%s", a[i]);
	int res = -1;
	int MAX = -1;
	for(int i = 0; i < m; ++i)
	{
		int now = a[n - 1][i] - '0' + go(n - 1, i, (a[n - 1][i] - '0') % (k + 1));
		if (res < now)
		{
			res = now;
			MAX = i;
		}
	}
	printf("%d\n", res);
	if (res != -1)
	{
		printf("%d\n", MAX + 1);
		int y = MAX;
		int r = (a[n - 1][MAX] - '0') % (k + 1);
		for(int i = n - 1; i > 0; --i)
		{
			printf("%c", p[i][y][r] == -1 ? 'L' : 'R');
			y += p[i][y][r];
			r = (r + a[i - 1][y] - '0') % (k + 1);
		}
		printf("\n");
	}
	return 0;
}