#include <bits/stdc++.h>
using namespace std;
#define s second
#define f first
typedef long long ll;
typedef long double ld;
const ll N = 1e5+5, inf = 1e17;
ld EPS = 0.0000000005;
ll n;
ld x[N], y[N];
struct line
{
    ld slope, c;
    operator == (const line l) const {
        return slope == l.slope && c == l.c;
    }
};
line get_line(pair<ld, ld> p1, pair<ld, ld> p2)
{
    ld s;
    if(p1.f == p2.f) s = inf;
    else s = (p1.s-p2.s)/(p1.f-p2.f);
    ld c;
    if(s == inf) c = p1.f;
    else c = p1.s-(s*p1.f);
    return {s, c};
}
bool Try(line l)
{
    vector<pair<ld, ld>> points;
    for(int i=0; i<n; i++)
    {
        if(l.slope == inf && l.c != x[i]) points.push_back({x[i], y[i]});
        else if(l.slope != inf && abs(y[i] - (l.slope*x[i] + l.c)) >= EPS) points.push_back({x[i], y[i]});
    }
    if(points.size() > 2)
    {
        line L = get_line(points[0], points[1]);
        for(auto i : points)
        {
            if(L.slope == inf && L.c != i.f) return 0;
            else if(L.slope != inf && abs(i.s - (i.f*L.slope + L.c)) >= EPS) return 0;
        }
        return 1;
    }
    return 1;
}
int main()
{
    cin >> n;
    for(int i=0; i<n; i++) cin >> x[i] >> y[i];
    if(n <= 4) cout << "YES" << endl;
    else
    {
        line l1 = get_line({x[0], y[0]}, {x[1], y[1]});
        line l2 = get_line({x[1], y[1]}, {x[2], y[2]});
        if(l1 == l2)
        {
            if(Try(l1)) cout << "YES" << endl;
            else cout << "NO" << endl;
        }
        else
        {
            line l3 = get_line({x[0], y[0]}, {x[2], y[2]});
            if(Try(l1) || Try(l2) || Try(l3)) cout << "YES" << endl;
            else cout << "NO" << endl;
        }
    }
}
