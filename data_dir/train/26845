/*			Arjun Sanjeev
			IIIT-Hyderabad		

	********************************************
	*	"Never regret anything in life.	   *
	*	 If it's good, it's wonderful.	   *
	*	 If it's bad, it's experience."    *
	********************************************	*/

#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define f first
#define s second
#define let(x,a) __typeof(a) x(a)
#define all(a) (a).begin(),(a).end() 
#define endl '\n'
#define present(c,x) ((c).find(x) != (c).end()) 
#define tr(v,it) for(let(it,v.begin()); it != v.end(); it++)
#define rtr(v,it) for(let(it,v.rbegin()); it != v.rend(); it++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define VI vector<int>
#define inf INT_MAX

using namespace std;

class UnionFind
{
public:
	VI parent;
	VI rank;
	VI setSize;
	int noOfSets;
	UnionFind(int n)
	{
		parent.assign(n,0);
		for(int i=0;i<n;i++) parent[i]=i;
		rank.assign(n,0);
		setSize.assign(n,1);
		noOfSets=n;
	}
	int findSet(int n)
	{
		if(n==parent[n]) return n;
		return parent[n]=findSet(parent[n]);	// Path compression
	}
	void setUnion(int a, int b)
	{
		a=findSet(a);
		b=findSet(b);
		if(a==b) return;
		noOfSets--;
		if(rank[a]>rank[b])
		{
			parent[b]=a;
			setSize[a]+=setSize[b];
		}
		else
		{
			parent[a]=b;
			setSize[b]+=setSize[a];
			if(rank[a]==rank[b]) rank[b]++;
		}
	}
	int size(int n)
	{
		return setSize[findSet(n)];
	}
};

int main()
{
	int n,ans=0,num;
	cin>>n;
	UnionFind UF(n);
	for(int i=0;i<n;i++)
	{
		cin>>num;
		UF.setUnion(i,num-1);
	}
	for(int i=0;i<n;i++)
	{
		cin>>num;
		ans+=(num%2);
	}
	if(ans%2==0) ans=1;
	else ans=0;
	if(UF.noOfSets>1) ans+=UF.noOfSets;
	cout<<ans<<endl;
	return 0;
}