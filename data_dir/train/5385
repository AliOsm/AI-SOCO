// Charan Sriramula

#include<bits/stdc++.h>
using namespace std;
typedef long double ld;
typedef long long int ll;

const ll lg=22;
const ll N=3e5+5;
const ll INF=2e18;
const ll mod=998244353;
const double PI = 3.14159265358979323846;

#define is(n) scanf("%d",&n)
#define io(n) printf("%d\n",n)
#define ls(n) scanf("%lld",&n)
#define lo(n) printf("%lld\n",n)

#define f first
#define s second
#define pb(x) push_back(x)
#define pf(x) push_front(x)
#define mp(x,y) make_pair(x,y)
#define GCD(a,b) __gcd((a),(b))
#define all(v) v.begin(),v.end()
#define bits(x) __builtin_popcount(x)
#define LCM(a,b) ((a)*(b))/GCD((a),(b))
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);
template<typename T> T power(T x,T y,ll m){T ans=1;while(y>0){if(y&1LL) ans=(ans*x)%m;y>>=1LL;x=(x*x)%m;}return ans%m;}

vector<ll> f,g[N];
ll n,m,u,v,invalid,vis[N],arr[N];

void DFS(ll cur,ll par)
{
  f.pb(cur);
  vis[cur]=1;
  arr[cur]=arr[par]^1;
  for(auto child:g[cur])
  {
    if(vis[child])
    {
      if(child==par){continue;}
      if(arr[child]==arr[cur]){invalid=1;}
    }
    else{DFS(child,cur);}
  }
}

int main()
{
  ll t;
  cin>>t;
  while(t--)
  {
    ll in=0;
    ll ans=1;
    cin>>n>>m;
    while(m--)
    {
      cin>>u>>v;
      g[u].pb(v);
      g[v].pb(u);
    }
    vector<ll> fin;
    for(ll i=1;i<=n;i++)
    {
      ll one=0;
      invalid=0;
      f.clear();
      if(vis[i]){continue;}
      DFS(i,0);
      if(invalid){in++;continue;}
      for(auto j:f)
      {
        if(arr[j]){one++;}
      }
      ll val=power(2LL,one,mod)%mod;
      ll valx=power(2LL,f.size()-one,mod)%mod;
      ll ful=((val%mod)+(valx%mod))%mod;
      fin.pb(ful);
      ans=((ans%mod)*(ful%mod))%mod;
    }
    if(in){cout<<0<<endl;}
    else{cout<<ans%mod<<endl;}
    for(ll i=1;i<=n;i++){g[i].clear();vis[i]=0;arr[i]=0;}
  }
}
