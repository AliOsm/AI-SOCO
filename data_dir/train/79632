//void _(){
//    int n;
//    cin >> n;
//    vl a(n),b(n),_t(n);
//    vpll events;
//    priority_queue<pll,vpll, greater<pll> > starting, ongoing;
//    rep(i,0,n-1){
//        cin >> a[i] >> b[i] >> _t[i];
//        starting.push({a[i]+_t[i],i});
//    }
//    ll t = 0, ans = 0;
//    while(!starting.empty() || !ongoing.empty()){
//        while(!starting.empty()){
//            int i = starting.top().Y;
//            if(t >= a[i]){
//                ongoing.push({_t[i],i});
//                starting.pop();
//            }
//            else break;
//        }
//        while(!ongoing.empty()){
//            int i = ongoing.top().Y;
//            if(t+_t[i] > b[i]) ongoing.pop();
//            else break;
//        }
//        if(ongoing.empty()){
//            if(starting.empty())
//                break;
//            else{
//                int i = starting.top().Y;
//                t = starting.top().X;
//                ++ans;
//                starting.pop();
//                ongoing.push({_t[i],i});
//            }
//        }
//        else{
//            if(starting.empty() || ongoing.top().X+t <= starting.top().X){
//                int i = ongoing.top().Y;
//                ll bound = b[i];
//                if(!starting.empty()){
//                    bound = min(starting.top().X,bound);
//                }
//                ll cnt_takes = (bound-t)/_t[i];
//                assert(cnt_takes > 0);
//                ans += cnt_takes;
//                t += cnt_takes*_t[i];
//            }
//            else{
//                int i = starting.top().Y;
//                t = starting.top().X;
//                ++ans;
//                starting.pop();
//                ongoing.push({_t[i],i});
//            }
//        }
//    }
//    print(ans);
//}
//
#include <iomanip>
#include <algorithm>
#include <queue>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define REP_INT(i,l,r) for(int i = l; i <= r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define X first
#define Y second
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<ll> vl;
typedef pair<ll, ll> pll;
typedef vector<pll> vpll;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
T1 void print(T x, string end = "\n"){
    cout << x << end;
}
void _(){
    int n;
    cin >> n;
    vl a(n),b(n),_t(n);
    vpll events;
    priority_queue<pll,vpll, greater<pll> > starting, ongoing;
    rep(i,0,n-1){
        cin >> a[i] >> b[i] >> _t[i];
        starting.push({a[i]+_t[i],i});
    }
    ll t = 0, ans = 0;
    while(!starting.empty() || !ongoing.empty()){
        while(!starting.empty()){
            int i = starting.top().Y;
            if(t >= a[i]){
                ongoing.push({_t[i],i});
                starting.pop();
            }
            else break;
        }
        while(!ongoing.empty()){
            int i = ongoing.top().Y;
            if(t+_t[i] > b[i]) ongoing.pop();
            else break;
        }
        if(ongoing.empty()){
            if(starting.empty())
                break;
            else{
                int i = starting.top().Y;
                t = starting.top().X;
                ++ans;
                starting.pop();
                ongoing.push({_t[i],i});
            }
        }
        else{
            if(starting.empty() || ongoing.top().X+t <= starting.top().X){
                int i = ongoing.top().Y;
                ll bound = b[i];
                if(!starting.empty()){
                    bound = min(starting.top().X,bound);
                }
                ll cnt_takes = (bound-t)/_t[i];
                assert(cnt_takes > 0);
                ans += cnt_takes;
                t += cnt_takes*_t[i];
            }
            else{
                int i = starting.top().Y;
                t = starting.top().X;
                ++ans;
                starting.pop();
                ongoing.push({_t[i],i});
            }
        }
    }
    print(ans);
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
