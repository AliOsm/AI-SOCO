#include "bits/stdc++.h"
//#include "ext/pb_ds/tree_policy.hpp"
//#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cerr<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
#define EX0 exit(0);

typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ll inf = 1e9+7;
const ld eps = 1e-9;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a) {
    if(a<0)return -1;
    if(a>0)return 1;
    return 0;
}


template<typename T> inline void in(T &x) {
    x = 0;
    T f = 1;
    char ch = getchar();
    while (!isdigit(ch)) {
        if (ch == '-') f = -1;
        ch = getchar();
    }
    while (isdigit(ch))  {
        x = x * 10 + ch - '0';
        ch = getchar();
    }
    x *= f;
}

ll twop(int x) {
    return 1LL<<x;
}

template<typename A,typename B > inline void in(A&x,B&y) {
    in(x);
    in(y);
}
template<typename A,typename B,typename C>inline void in(A&x,B&y,C&z) {
    in(x);
    in(y);
    in(z);
}
template<typename A,typename B,typename C,typename D> inline void in(A&x,B&y,C&z,D&d) {
    in(x);
    in(y);
    in(z);
    in(d);
}




template <class T>
void upd(T&a,T b) {
    a = max(a,b);
}





ll fast(ll a,ll b){
    ll ans = 1;
    while(b){
        if(b&1){
            b--;
            ans = ans * a;
        }else{
            a = a * a;
            b/=2;
        }
    }
    return ans;
}


ll fast(ll a,ll b,ll mod){
    ll ans = 1;
    while(b){
        if(b&1){
            b--;
            ans = ans * a % mod;
        }else{
            a = a * a % mod;
            b/=2;
        }
    }
    return ans;
}

ll rev(ll a,ll mod){
    return fast(a,mod-2,mod);
}

void EulerSieve(const int n,vector<int>&primes,vector<int>&phi,vector<int>&mu){
    phi = vector<int>(n+1);phi[1] = 1;
    mu = vector<int>(n+1);mu[1] = 1;
    vector<int>isPrime(n+1,1);
    for(int i = 2;i<=n;i++){
        if(isPrime[i]){
            primes.PB(i);
            phi[i] = i-1;
            mu[i] = -1;
        }
        for(const auto& j: primes){
            ll num = 1LL*j*i;if(num>n)break;
            isPrime[num] = 0;
            if(i%j==0){
                phi[num] = phi[i] * j;
                mu[num] = 0;
                break;
            }else{
                phi[num] = phi[i] * (j-1);
                mu[num] = -mu[i];
            }
        }
    }
}



const int maxn = 2000010;
vector<int>primes,phi,mu,pw;
ll delta[maxn];
int n,k;
ll ans = 0;
ll original = 0;
int main(){
    EulerSieve(2000010, primes, phi, mu);
    in(n,k);
    REP(i,0,k+1)pw.PB(fast(i, n,mod));
//    REP(i,0,k+1)dbg(pw[i])
    REP(i,1,maxn){
    
        for(int j = i;j<=k;j+=i){
        
            delta[j] += 1LL*mu[i]*(pw[j/i]-pw[j/i-1]);
            
            delta[j] %= mod;
        }
    }
    REP(i,1,k+1){
        original+=delta[i];
        original%=mod;original+=mod;original%=mod;
//        dbg(original);
        ans+=original^i;
    }
    cout<<ans%mod<<endl;
    return 0;
}
