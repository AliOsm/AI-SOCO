// practice with Dukkha
#include <algorithm>
#include <iostream>

using namespace std;

const int N = 100;

int main() {
	int n, m; cin >> n >> m;
	string oo[N], pp[N], qq[N];
	int ko = 0, kp = 0, kq = 0;
	for (int i = 0; i < n; i++) {
		string p; cin >> p;
		string q(p);
		reverse(q.begin(), q.end());
		if (p == q)
			oo[ko++] = p;
		else if (p < q)
			pp[kp++] = p;
		else
			qq[kq++] = q;
	}
	sort(oo, oo + ko);
	sort(pp, pp + kp);
	sort(qq, qq + kq);
	int k = 0;
	for (int i = 0, j = 0; i < kp && j < kq; ) {
		string &p = pp[i], &q = qq[j];
		if (p == q) {
			pp[k++] = p;
			i++, j++;
		} else if (p < q)
			i++;
		else
			j++;
	}
	string _o_ = "";
	for (int i = 0, j; i < ko; i = j) {
		string &o = oo[i];
		j = i + 1;
		while (j < ko && oo[j] == o)
			j++;
		int cnt = j - i;
		while (cnt >= 2) {
			pp[k++] = o;
			cnt -= 2;
		}
		if (cnt && _o_ == "")
			_o_ = o;
	}
	int k_ = k * 2 + (_o_ != "");
	cout << k_ * m << '\n';
	for (int h = 0; h < k; h++) {
		string &p = pp[h];
		cout << p;
	}
	cout << _o_;
	for (int h = k - 1; h >= 0; h--) {
		string &p = pp[h];
		reverse(p.begin(), p.end());
		cout << p;
	}
	cout << '\n';
	return 0;
}
