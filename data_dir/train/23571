#include <iostream>
#include <cmath>
#include <climits>
#include <unordered_map>
#include <memory>

using namespace std;

class dsu {
public:
  dsu(int n, int* cost) : n_(n), cost_(cost), p_(make_unique<int[]>(n)), size_(make_unique<int[]>(n)) {
    for(int i = 0; i < n; ++i) {
      p_[i] = i;
      size_[i] = 1;
    }
  }

  int cost(int x) {
    x = find(x);
    return cost_[x];
  }

  int find(int x) {
    // if (x != p_[x]) {
    //   p_[x] = find(p_[x]);
    // }
    // return p_[x];
    while(x != p_[x]) {
      p_[x] = p_[p_[x]];
      x = p_[x];
    }
    return x;
  }

  void unite(int a, int b) {
    a = find(a);
    b = find(b);
    
    if (a == b) {
      return;
    }

    if (size_[a] < size_[b]) {
      swap(a, b); 
    }
    
    cost_[a] = min(cost_[a], cost_[b]);
    p_[b] = a;
    size_[a] += size_[b];
  }

  ~dsu() {
    // delete[] p_;
    delete[] cost_;
    // delete[] size_;
  }
private:
  int n_;
  // int* p_; 
  unique_ptr<int[]> p_;
  // int* size_;
  unique_ptr<int[]> size_;
  int* cost_;
  // shared_ptr<int[]> cost_;
};


int main() {
  ios_base::sync_with_stdio(0);
  int n, k, m;
  // scanf("%d", &n);
  // scanf("%d", &k);
  // scanf("%d", &m);
  cin >> n >> k >> m;
  unordered_map<string, int> umap;
  for(int i = 0; i < n; ++i) {
    string s;
    cin >> s;
    auto it = umap.find(s);
    if (it == umap.end()) {
      umap.insert(make_pair(s, i));
    } else {
      throw runtime_error("bad input");
    }
  }

  int* cost = new int[n];
  // auto cost = make_shared<int[]>(n);
  for(int i = 0; i < n; ++i) {
    cin >> cost[i];
  }

  dsu ds(n, cost);

  for(int i = 0; i < k; ++i) {
    int mm, id;
    // scanf("%d", &mm);
    // scanf("%d", &id);
    cin >> mm >> id;
    --id;
    for(int j = 1; j < mm; ++j) {
      int x;
      cin >> x;
      --x;
      ds.unite(id, x);
    }
  }

  long long ans = 0;
  for(int i = 0; i < m; ++i) {
    string s;
    cin >> s;
    auto it = umap.find(s);
    if (it == umap.end()) {
      throw runtime_error("bad input");
    }
    int id = it->second;
    ans += ds.cost(id);
  }

  // printf("%ld", ans);
  cout << ans << endl;
  return 0;
}
