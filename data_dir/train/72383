#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;
using namespace std;
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
long long MOD = 1e9+7;
pair<int,int> dx[4] = {{1,0},{-1,0},{0,1},{0,-1}};
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
long long fastpow(long long x,long long k)
{
    if(!k)
        return 1;
    if(k & 1)
        return ((x * fastpow(x,k-1) % MOD) % MOD) % MOD;
    long long ans = fastpow(x,k/2);
    ans %= MOD;
    ans *= ans;
    ans %= MOD;
    return ans;
}
long long sumF(long long x)
{
    int s = 0;
    while(x)
        s += x%10,x /= 10;
    return s;
}
int n,l,r;
int firstf,secondf,thirdf;
long long DP[200005][5];
long long solve(int i , int m){
    if(i == n)
        return m == 0;
    if(DP[i][m] != -1)
        return DP[i][m];
    long long C = solve(i+1,m)*firstf;
    C %= MOD;
     C += solve(i+1,(m+1)%3)*secondf;
     C %= MOD;
     C += solve(i+1,(m+2)%3)*thirdf;
    C %= MOD;
    return DP[i][m] = C;
}
int main()
{
    memset(DP,-1,sizeof DP);
    cin>>n>>l>>r;
    int firstIdx = r/3;
    int secondIdx = firstIdx + (r % 3 >= 1);
    int thirdIdx = firstIdx + (r % 3 >= 2);
    l--;
    int fourthIdx = l / 3;
    int fifthIdx = fourthIdx + (l % 3 >= 1);
    int sixthIdx = fourthIdx + (l % 3 >= 2);
    firstf = (firstIdx-fourthIdx);
    secondf = (secondIdx-fifthIdx);
    thirdf =(thirdIdx-sixthIdx);
    cout<<solve(0,0);
    return 0;
}
