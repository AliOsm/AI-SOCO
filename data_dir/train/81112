# include <bits/stdc++.h>

using namespace std;

const int N = 5e3 + 2;

struct edge{
      int a, b;
      long long cap, flow;
};

int n, m, s, t, pt[N], d[N];
long long sum;
vector <edge> e;
vector <int> g[N];

void add_edge(int a, int b, int cap){
      edge e1 = {a, b, cap, 0}, e2 = {b, a, 0, 0};
      g[a].push_back(e.size());
      e.push_back(e1);
      g[b].push_back(e.size());
      e.push_back(e2);
}

bool bfs(){
      memset(d, -1, sizeof(d));
      queue <int> q;
      d[s] = 0;
      q.push(s);
      while(!q.empty() && d[t] == -1){
            int v = q.front();
            q.pop();
            for(int id : g[v]){
                  int to = e[id].b;
                  if(d[to] == -1 && e[id].flow < e[id].cap){
                        d[to] = d[v] + 1;
                        q.push(to);
                  }
            }
      }
      return d[t] != -1;
}

long long dfs(int v, long long flow = 0){
      if(!flow) return 0;
      if(v == t) return flow;
      for(; pt[v] < g[v].size(); pt[v] ++){
            int id = g[v][ pt[v] ],
                  to = e[id].b;
            if(d[to] != d[v] + 1) continue;
            long long pushed = dfs(to, min(flow, e[id].cap - e[id].flow));
            if(pushed){
                  e[id].flow += pushed;
                  e[id ^ 1].flow -= pushed;
                  return pushed;
            }
      }
      return 0;
}

long long dinic(){
      long long flow = 0;
      while(1){
            if(!bfs())
                  break;
            memset(pt, 0, sizeof(pt));
            while(long long pushed = dfs(s, 1e18))
                  flow += pushed;
      }
      return flow;
}

int main(){
      cin >> n >> m;

      s = n + m + 1, t = n + m + 2;

      for(int i = 1; i <= n; i ++){
            int x;
            cin >> x;
            add_edge(s, i, x);
      }

      for(int i = 1; i <= m; i ++){
            int u, v, w;
            cin >> u >> v >> w;
            add_edge(u, i + n, 1e9);
            add_edge(v, i + n, 1e9);
            add_edge(i + n, t, w);
            sum += w;
      }

      sum -= dinic();

      cout << sum << endl;
}
