#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

#define PB push_back
//#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

const int mx = 1e6+5;
int n;
int k[mx];
vii vec[5005];
int cnt[5005];
int c[5005];
int MAXK;
int d[5005];
int e[5005];

vector<int> prime;
bool is_composite[5005];

void sieve () {
	for (int i = 2; i < 5005; ++i) {
		if (!is_composite[i]) prime.push_back(i);
		for (int j = 0; j < prime.size() && i * prime[j] < 5005; ++j) {
			is_composite[i * prime[j]] = true;
			if (i % prime[j] == 0) break;
		}
	}
}

void factFactorize ( long long n ) {
    for ( int i = 0; i < prime.size() && prime[i] <= n; i++ ) {
        ll x = n;
        ll freq = 0;
        while ( x / prime[i] ) {
            freq += x / prime[i];
            x = x / prime[i];
        }
        //if(n == 4) dbg(prime[i], freq);
		vec[n].PB( MP(prime[i], freq) );
		d[n] += freq;
    }
    //sort( vec[n].begin(), vec[n].end() );
}

int main()
{
	optimize();
	sieve();
	for( int i = 0; i < 5005; ++i ) {
		factFactorize(i);
	}

	ll ans = 0;
	cin >> n;
	for( int i = 0; i < n; ++i ) {
		cin >> k[i];
		++cnt[k[i]];
		MAXK = max(MAXK, k[i]);
		ans += d[k[i]];
	}
	//dbg(ans);
	int nxt = 0;
	while(1) {
		memset(c, 0, sizeof(c));
		for( int i = 0; i <= MAXK; ++i ) {
			if( vec[i].empty() || !cnt[i] || e[i] != nxt ) continue;
			c[(vec[i].back()).F] += cnt[i];
			//dbg(i, vec[i].back());
		}
		int m = 0, del;
		for( int i = 0; i <= MAXK; ++i ) {
			//dbg(i, c[i]);
			if( m < c[i] ) {
				m = c[i];
				del = i;
			}
		}
		if(!m) break;
		if( m <= n-m ) break;
		//dbg(m, del);
		ans -= m;
		ans += n-m;
		//n -= m;
		for( int i = 0; i <= MAXK; ++i ) {
			if( vec[i].empty() ) continue;
			if( e[i] != nxt ) continue;
			if( (vec[i].back()).F == del ) --(vec[i].back()).S, ++e[i];
			if( !(vec[i].back()).S ) vec[i].pop_back();
		}
		++nxt;
	}
	cout << ans << endl;
}





















