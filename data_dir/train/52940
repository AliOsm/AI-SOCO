#include <iostream>
#include <vector>
#include <list>
#include <algorithm>
#include <map>
#include <set>

using namespace std;

bool lab[1100][1100];
int d[1100][1100];
int n,m,k;
int i2;
int j2;
list<pair<int,int> > q;

void go(int i,int j,int r)
{
    if (r==0){return;}
    if (lab[i+1][j]&&d[i+1][j]<=r-1){cout << "D";go(i+1,j,r-1);return;}
    if (lab[i][j-1]&&d[i][j-1]<=r-1){cout << "L";go(i,j-1,r-1);return;}
    if (lab[i][j+1]&&d[i][j+1]<=r-1){cout << "R";go(i,j+1,r-1);return;}
    if (lab[i-1][j]&&d[i-1][j]<=r-1){cout << "U";go(i-1,j,r-1);return;}
}

int main()
{
//    f//reopen("a","r",stdin);
    cin >> n >> m >> k;
    if (k%2)
    {
        cout << "IMPOSSIBLE";
        return 0;
    }
    for (int i=1; i<=n; i++)
    {
        for (int j=1; j<=m; j++)
        {
            char c;
            cin >> c;
            if (c=='.')
            {
                lab[i][j]=1;
            }
            if (c=='X')
            {
                lab[i][j]=1;
                i2=i;
                j2=j;
            }
        }
    }
    q.push_back(make_pair(i2,j2));
    int i1=i2;
    int j1=j2;
    if (lab[i1-1][j1]==0)
        if (lab[i1+1][j1]==0)
            if (lab[i1][j1-1]==0)
                if (lab[i1][j1+1]==0)
                {
                    cout << "IMPOSSIBLE";
                    return 0;
                }
    while(q.size())
    {
        int i=q.begin()->first;
        int j=q.begin()->second;
        q.pop_front();
        if ((lab[i-1][j])&&(d[i-1][j]==0)&&(abs(i-1-i1)+abs(j-j1)))
        {
            q.push_back(make_pair(i-1,j));
            d[i-1][j]=1+d[i][j];
        }
        if ((lab[i+1][j])&&(d[i+1][j]==0)&&(abs(i+1-i1)+abs(j-j1)))
        {
            q.push_back(make_pair(i+1,j));
            d[i+1][j]=1+d[i][j];
        }
        if ((lab[i][j-1])&&(d[i][j-1]==0)&&(abs(i-i1)+abs(j-1-j1)))
        {
            q.push_back(make_pair(i,j-1));
            d[i][j-1]=1+d[i][j];
        }
        if ((lab[i][j+1])&&(d[i][j+1]==0)&&(abs(i-i1)+abs(j+1-j1)))
        {
            q.push_back(make_pair(i,j+1));
            d[i][j+1]=1+d[i][j];
        }
    }
    go(i2,j2,k);
    return 0;
}
