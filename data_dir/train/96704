#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
#define  int long long int
typedef complex<long double> cd;
const long double pi=acos(-1);
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <db, db> pdd;
typedef vector<int> vi;
typedef vector<vector<int> > matrix;
#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))
#define sz(x) (int)(x.size())
#define ff first
#define ss second
#define endl "\n"
#define debug(x) (cerr << #x << ": " << x << "\n")
#define setbits(x) __builtin_popcount(x)
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p;}
const ll MOD =998244353;
const ll hell=1000000007;
const int INF = 1e17;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;

typedef tree<int, null_type, less<int>, rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

int32_t main()
{
    IOS;
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
        cin>>a[i];
    if(a[n-1]==2)
    {
        for(int i=0;i<n;i++)
        {
            if(a[i]==1)
                a[i]=2;
            else
                a[i]=1;
        }
    }
    vector<int> ind[3];int fr[3]={0};
    for(int i=0;i<n;i++)
    {
        ind[a[i]].pb(i);
        fr[a[i]]++;
    }
    vector<pair<int,int> >ans;int s1,s2,in1,in2,w1,w2,cnt,ind1,ind2;
    for(int t=1;t<=fr[1];t++)
    {
        s1=0;s2=0;w1=0;w2=0;
        in1=0;in2=0;bool pos=1;
        while(in1<fr[1]&&in2<fr[2])
        {
           /*
            if(t==1)
           {
               cout<<in1<<" "<<in2<<endl;
           }
            */
            if((in1+t-1)<fr[1])
           {
               if((in2+t-1)<fr[2])
               {
                   ind1=ind[1][in1+t-1];
                   ind2=ind[2][in2+t-1];
                   if(ind1<ind2)
                   {
                       w1++;
                       in1=in1+t;
                       in2=upper_bound(ind[2].begin(),ind[2].end(),ind[1][in1-1])-ind[2].begin();
                   }
                   else
                   {
                       w2++;
                       in2+=t;
                       in1=upper_bound(ind[1].begin(),ind[1].end(),ind[2][in2-1])-ind[1].begin();
                   }
               }
               else
               {
                   in1+=t;
                   w1++;
                   in2=upper_bound(ind[2].begin(),ind[2].end(),ind[1][in1-1])-ind[2].begin();
               }
           }
            else
            {
                if((in2+t-1)<fr[2])
                {
                    in2+=t;
                    w2++;
                    in1=upper_bound(ind[1].begin(),ind[1].end(),ind[2][in2-1])-ind[1].begin();
                }
                else
                {
                    pos=0;break;
                }
            }
        }
        
        if(!pos)
            continue;
        if(in1<fr[1])
        {
            cnt=fr[1]-in1;
            if(cnt%t)
                continue;
            else
                w1+=cnt/t;
        }
        if(in2<fr[2])
        {
            cnt=fr[2]-in2;
            if(cnt%t)
                continue;
            else
                w2+=cnt/t;
        }
        /*
        if(t==1)
        {
            cout<<w1<<" "<<w2<<endl;
        }
         */
        if(w1>w2)
        {
            ans.pb(m1(w1,t));
        }
    }
    if(ans.size()>1)
        sort(ans.begin(),ans.end());
    cout<<ans.size()<<endl;
    for(int i=0;i<ans.size();i++)
        cout<<ans[i].first<<" "<<ans[i].second<<endl;
    return 0;
}
