#include <bits/stdc++.h>
#define LL long long
using namespace std;

const int N = 3e5+7, M = 1e9+7;
int mu[N];
vector<int> fac[N];

void sieve() {
    fill(mu, mu + N, 0);
    for (int i=2; i<N; i++)
        if (mu[i] == 0)
            for (int j=i; j<N; j+=i)
                mu[j]++;

    for (int i=1; i<N; i++)
        mu[i] = (mu[i]%2 ? -1: 1);

    for (int i=2; i*i<N; i++)
        for (int k=i*i; k<N; k+=i*i)
            mu[k] = 0;

    for (int i=1; i<N; i++)
        for (int j=i; j<N; j+=i)
            fac[j].push_back(i);
}

LL power (LL a, LL p) {
    if (p==0)   return 1;
    LL ans = power(a, p/2);
    ans = (ans * ans)%M;
    if (p%2)    ans = (ans *a)%M;
    return ans;
}

LL inverse(LL x) {
    return power(x, M-2);
}

const int K = 10;
LL C[N][10];
void pre() {
    for (int i=0; i<N; i++) C[i][0] = 1;
    for (int i=1; i<N; i++)
        for (int k=1; k<K; k++)
            C[i][k] = (C[i-1][k] + C[i-1][k-1])%M;
}


int a[N];
int cnt[N];

LL sub[N];
int n;

bool check(int k) {

    LL ans = 0;
    for (int i=1; i<N; i++)
        if (mu[i] && cnt[i] >= k)
        ans += mu[i] * C[cnt[i]][k];
    ans = (ans%M+M)%M;
    return ans;
}

int main()
{
    sieve();
    pre();
    ios::sync_with_stdio(0);
    cin.tie(0);

    cin>>n;

    for (int i=1; i<=n; i++) {
        cin>>a[i];
        for (int d: fac[a[i]])
            cnt[d]++;
    }

    int lo = 1, hi = min(n+1, 8);
    while (lo < hi) {
        int m = (lo + hi)/2;
        if (check(m))   hi = m;
        else            lo = m+1;
    }

    if (lo == min(n+1, 8))  lo = -1;
    cout<<lo<<endl;
}
