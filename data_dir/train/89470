#pragma comment(linker, "/STACK:64000000")
#include <iostream>
#include <cstdio>
#include <cassert>
#include <cmath>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <string>
#include <map>
#include <set>
#include <sstream>
#include <bitset>
#include <algorithm>

#define forit(it,S) for(__typeof(S.begin()) it = (S).begin(); it != (S).end(); it++)
#define sz(x) (int)(x).size()
#define all(x) (x).begin(),(x).end()
#define ll long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define mp make_pair
#define pb push_back

using namespace std;

typedef pair<int, int> pii;

const double eps = 1e-9;
const double pi = acos(-1.0);

const int maxn = 2222;

int d[maxn][maxn];
int dist[maxn],p[maxn];
bool used[maxn];
vector<pii> g[maxn];

void dfs(int start, int v, int pr, int len) {
    if (len != d[start][v]) {
        cout << "NO" << endl;
        exit(0);
    }
    for (int i = 0; i < sz(g[v]); i++) {
        int to = g[v][i].first;
        int llen = g[v][i].second;
        if (to == pr) continue;
        dfs(start,to,v,len + llen);
    }
}

int main() {
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif

    int n; cin >> n;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d",&d[i][j]);
        }
    }

    for (int i = 0; i < n; i++) if (d[i][i] != 0) {
        cout << "NO" << endl;
        return 0;
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) if (i != j) {
            if (d[i][j] != d[j][i] || d[i][j] == 0) {
                cout << "NO" << endl;
                return 0;
            }
        }
    }

    used[0] = true;
    for (int i = 0; i < n; i++) {
        dist[i] = d[0][i];
    }

    for (int it = 0; it < n - 1; it++) {
        int w = -1;
        for (int i = 0; i < n; i++) if (!used[i]) {
            if (w == -1 || dist[w] > dist[i]) {
                w = i;
            }
        }
        g[w].pb(mp(p[w],dist[w]));
        g[p[w]].pb(mp(w,dist[w]));
        used[w] = true;
        dfs(w,w,-1,0);
        for (int i = 0; i < n; i++) {
            if (dist[i] > d[w][i]) {
                dist[i] = d[w][i];
                p[i] = w;
            }
        }
    }

    cout << "YES" << endl;


    return 0;
}
