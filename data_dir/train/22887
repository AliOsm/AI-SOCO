//vpii solve(int n){
//    vpii ans;
//    for(int i = 0; i < n; ++i){
//        ans.pb({i+1,(i+1)%n+1});
//    }
//    for(int i = 0; i < n-2; ++i){
//        if(i%4 == 1 || i%4 == 2)
//            ans.pb({i+1,(i+2)%n+1});
//    }
//
//    int edges = n;
//    while(!is_prime(edges))
//        ++edges;
//    assert(sz(ans) >= edges);
//    ans.resize(edges);
//    vi deg(n+1);
//    for(auto _ : ans){
//        ++deg[_.X];
//        ++deg[_.Y];
//    }
//    for(int i = 1; i <= n; ++i)
//        assert(is_prime(deg[i]));
//    return ans;
//}
//void _(){
//    int n;
//    cin >> n;
//    vpii ans = solve(n);
//    print(sz(ans));
//    print(ans,"\n");
//}
//
#include <iomanip>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define X first
#define Y second
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
template <typename F, typename S> static
ostream& operator<<(ostream& stream, const pair<F, S>& t){
    return stream << t.first << ' ' << t.second;
}
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
T1 void print(T x, string end = "\n"){
    cout << x << end;
}
T1 bool is_prime(T x){
    static_assert(is_integral<T>::value);
    if(x<T(4)) return x>T(1);
    for(T i=2;i*i<=x;++i){
        if(x%i == 0) return false;
    }
    return true;
}
T1 ostream& print(T b, T e, string sep = " ", ostream& stream = cout){
    for(T it = b; it != e; ++it){
        stream << *it;
        if(it + 1 != e)
            stream << sep;
    }
    return stream;
}
T1 void print(vector<T> arr, string sep = " "){
    if(arr.empty()){
        return;
    }
    print(arr.begin(), arr.end(), sep);
    cout << '\n';
}
vpii solve(int n){
    vpii ans;
    for(int i = 0; i < n; ++i){
        ans.pb({i+1,(i+1)%n+1});
    }
    for(int i = 0; i < n-2; ++i){
        if(i%4 == 1 || i%4 == 2)
            ans.pb({i+1,(i+2)%n+1});
    }
    int edges = n;
    while(!is_prime(edges))
        ++edges;
    assert(sz(ans) >= edges);
    ans.resize(edges);
    vi deg(n+1);
    for(auto _ : ans){
        ++deg[_.X];
        ++deg[_.Y];
    }
    for(int i = 1; i <= n; ++i)
        assert(is_prime(deg[i]));
    return ans;
}
void _(){
    int n;
    cin >> n;
    vpii ans = solve(n);
    print(sz(ans));
    print(ans,"\n");
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
