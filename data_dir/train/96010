#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
#define endl '\n'
#define ENGZ ios::sync_with_stdio(0);cin.tie(0);ios_base::sync_with_stdio(0);
#define sfi(x) scanf("%d" , &x)
#define sfi2(x, y) scanf("%d%d" , &x,&y)
#define sfi3(x, y, z) scanf("%d%d%d" , &x,&y,&z)
#define sfl(x) scanf("%I64d" , &x)
#define sfl2(x, y) scanf("%I64d%I64d" , &x,&y)
#define sfl3(x, y, z) scanf("%I64d%I64d%I64d" , &x,&y,&z)
#define sff(x) scanf("%f",&x)
#define sff1(x, y) scanf("%f%f",&x &y)
#define sff2(x, y, z) scanf("%f%f%f",&x, &y, &z)
#define sall s.begin(),s.end()
#define vall v.begin(),v.end()
#define mod 1000000007
#define pi 3.1415926536
#define LLMX 1e18
#define LLMN -1e18
/*
ll gcd(ll a, ll b)
{
    if (b == 0)
        return a;
    return gcd(b, a % b);
}*/
ll fp(ll x , ll exp)
{
   if(exp == 0)
      return 1;
   if(exp % 2 == 0)
      return fp((x * x)/* % mod*/, exp / 2)/* % mod*/;
   return (((fp((x * x)/* % mod*/,exp / 2))/* % mod*/) * x)/* % mod*/;
}/*
bool IspowerofTwo (int x)
{
    return (x & (x - 1)) == 0;
}
string num2str(ll n)
{
    string ans;
    stack <int> s;
    while(n > 0)
    {
        s.push(n % 10 + '0');
        n /= 10;
    }
    while (!s.empty())
    {
        ans += s.top();
        s.pop();
    }
    return ans;
}
ll str2num(string s)
{
    ll ans = 0;
    for (int i = 0; i < s.size(); i++)
    {
        ans *= 10;
        ans += s[i] - '0';
    }
    return ans;
}
//printf("%",&)<<fixed<<setprecision()
//freopen("cubes.in", "r", stdin);
//freopen("cubes.in", "w", stdout);
//scanf("%size_s",&s);
*/

int main()
{
    bool x = true;
    int high, cap, gas, num, c = 1, ans = 0;
    vector<int> v;
    cin >> high >> cap >> gas >> num;
    v.push_back(0);
    while (num--)
    {
        if (x)
            v.push_back(v[v.size() - 1] + gas);
        else
            v.push_back(v[v.size() - 1] + high - gas);
        v.push_back(high * c++);
        x = !x;
    }
    c = 0;
    for (int i = 1; i < v.size(); i++)
    {
        while (cap >= v[i] - v[c] && i < v.size())
            ++i;
        if (i % 2)
            c = i - 2;
        else
            c = i - 1;
        if (i == v.size())
            break;
        i = c;
        ans++;
        if (ans > 1000000 || c == -1)
            return cout << -1, 0;
    }
    cout << ans;
    return 0;
}
