#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
 
  
  
using namespace std;
  


#define ll long long




int main() {
	string s, t;
	cin >> s;
	cin >> t;
	int n = (int)s.size();
	int m = (int)t.size();
	vector<int> pref(m + 1, 1e9), suff(m + 2, 0);
	pref[0] = -1;
	suff[m + 1] = n;
	int j = 0;
	for (int i = 0; i < m; ++i) {
		while (j < n && s[j] != t[i]) {
			j++;
		}
		pref[i + 1] = j;
		j++;
	}
	j = n - 1;
	for (int i = m - 1; i >= 0; --i) {
		while (j >= 0 && s[j] != t[i]) {
			j--;
		}
		suff[i + 1] = j;
		j--;
	}
	if (pref[m] < n) {
		cout << t << endl;
		return 0;
	}
	int left = 0, right = 1000000;
	for (int i = 1; i <= m; ++i) {
		int l = i - 1, r = m;
		while (r - l > 1) {
			int mid = (l + r) / 2;
			if (pref[i - 1] < n && pref[i - 1] < suff[mid + 1] && suff[mid + 1] >= 0) {
				r = mid;
			} else {
				l = mid;
			}
		}
		if (pref[i - 1] < suff[r + 1] && pref[i - 1] < n && suff[r + 1] >= 0) {
			if (r - i + 1 < right - left + 1) {
				left = i;
				right = r;
			}
		}
	}
	if (left == 1 && right == m) {
		printf("-\n");
	} else {
		for (int i = 0; i < left - 1; ++i) {
			cout << t[i];
		}
		for (int i = right; i < m; ++i) {
			cout << t[i];
		}
		cout << endl;
	}
	return 0;
}