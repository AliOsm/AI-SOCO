#include <iostream>
#include <cstdio>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <queue>

using namespace std;

#define next roman_kaban

int a[310][310];
vector<int > x[501000];
vector<int > y[501000];
int spx[901000];
int spy[901000];
int dist[310][310];
int d[310][310];
int main()
{
    int n,m,p;
    scanf("%d%d%d",&n,&m,&p);
    for(int i=0;i<n;i++)
    for(int j=0;j<m;j++)
    {
        scanf("%d",a[i]+j);
        x[a[i][j]].push_back(i);
        y[a[i][j]].push_back(j);
        if(a[i][j]==1) dist[i][j] = i+j; else
            dist[i][j] = 1e9;
    }

    for(int i=2;i<=p;i++)
    {
        int q = x[i].size()*(x[i-1].size());
        if(q<4*n*m)
        {
            for(int p1=0;p1<x[i].size();p1++)
            for(int p2=0;p2<x[i-1].size();p2++)
            {
                int x1 = x[i][p1];
                int x2 = x[i-1][p2];
                int y1 = y[i][p1];
                int y2 = y[i-1][p2];
                int dx =  x1-x2 ;
                int dy =  y1-y2;
                if(dx<0)dx*=-1;
                if(dy<0)dy*=-1;
                if(dist[x2][y2] + dx+dy<dist[x1][y1]) dist[x1][y1] = dist[x2][y2] + dx+dy;
            }
        }else
        {
            for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                d[i][j] =1e9;

            for(int j=0;j<x[i-1].size();j++)
            {
                spx[j] = x[i-1][j];
                spy[j] = y[i-1][j];
                d[spx[j]][spy[j]] = dist[spx[j]][spy[j]]+1;
            }
            int k=0;
            int l = x[i-1].size();
            while(k<l)
            {
                int xx ,yy;
                int dist = d[spx[k]][spy[k]]+1;
                xx = spx[k]-1; yy = spy[k];
                if(xx>=0 && xx<n && yy>=0 && yy<m && d[xx][yy]>dist) {d[xx][yy] = dist; spx[l] = xx; spy[l]=yy; l++;}

                xx = spx[k]+1; yy = spy[k];
                if(xx>=0 && xx<n && yy>=0 && yy<m && d[xx][yy]>dist) {d[xx][yy] = dist; spx[l] = xx; spy[l]=yy; l++;}
                xx = spx[k]; yy = spy[k]+1;
                if(xx>=0 && xx<n && yy>=0 && yy<m && d[xx][yy]>dist) {d[xx][yy] = dist; spx[l] = xx; spy[l]=yy; l++;}
                xx = spx[k]; yy = spy[k]-1;
                if(xx>=0 && xx<n && yy>=0 && yy<m && d[xx][yy]>dist) {d[xx][yy] = dist; spx[l] = xx; spy[l]=yy; l++;}
                k++;
            }
            for(int j=0;j<x[i].size();j++)
                dist[x[i][j]][y[i][j]] = d[ x[i][j] ][y[i][j] ]-1;

        }
    }
    int res  =1e9;
    for(int i=0;i<n;i++)
    for(int j=0;j<m;j++)
        if(dist[i][j]<res && a[i][j]==p) res = dist[i][j];
    cout <<res<<endl;
    return 0;
}
/*
30000000003312
0

6
-1 2 -3 4 -1 1
1 5 2 3 2

5
1 2 -5 2 1
1 1 1 2
*/
