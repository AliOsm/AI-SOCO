#include <bits/stdc++.h>
using namespace std;

int64_t W[400002];
int64_t doub[19][400002];
int64_t mx[19][400002];
int anc[19][400002];
int inc[19][400002];

int main(){
    for(int k=0; k<19; k++) W[0] = doub[k][0] = doub[k][1] = mx[k][0] = mx[k][1] = 1e16;
    int Q;
    cin >> Q;
    int64_t last = 0;
    int cnt = 2;
    while(Q--){
        int64_t t, p, q;
        scanf("%lld %lld %lld", &t, &p, &q);
        if(t == 1){
            int r = (p^last);
            int v = cnt++;
            W[v] = q^last;
            //cerr << "ADD" << r << " " << v << " " << W[v] << endl;
            mx[0][v] = W[r];
            anc[0][v] = r;
            for(int k=1; k<=18; k++){
                anc[k][v] = anc[k-1][anc[k-1][v]];
                mx[k][v] = max(mx[k-1][v], mx[k-1][anc[k-1][v]]);
            }
            int nxt = v;
            for(int k=18; k>=0; k--) if(mx[k][nxt] < W[v]) nxt = anc[k][nxt];
            inc[0][v] = anc[0][nxt];
            //cerr << "Nxt" << v << " " << inc[0][v] << endl;
            doub[0][v] = W[inc[0][v]];
            for(int k=1; k<=18; k++){
                doub[k][v] = doub[k-1][v] + doub[k-1][inc[k-1][v]];
                inc[k][v] = inc[k-1][inc[k-1][v]];
            }
        }else{
            int r = (p^last);
            int64_t X = (q^last);
            //cerr << "Q" << r << " " << X << endl;
            int ans = 0;
            if(X >= W[r]){
                ans++;
                X -= W[r];
                for(int k=18; k>=0; k--) if(doub[k][r] <= X){
                    X -= doub[k][r];
                    r = inc[k][r];
                    ans += 1<<k;
                }
            }
            last = ans;
            printf("%d\n", ans);
        }
    }
    return 0;
}
