#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>	
#include <stdio.h>    
 
using namespace std;
     
#define F first
#define S second
#define lb lower_bound          	    
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcount                                                                                        
#define sqr(x) ((x) * (x))
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;                                  
const int N = (int)2e5 + 123;
const ll inf = (ll)3e18 + 1;
                                       
const double pi = acos(-1.0);
const double eps = 1e-7;
const int dx[] = {0, 0, 1, 0, -1};										
const int dy[] = {0, 1, 0, -1, 0};  		
 
int n, m, ans, d[1111][1111], d1[1111][1111], d2[1111][1111], d3[1111][1111], a[1111][1111];

inline void boost () {
	ios_base :: sync_with_stdio (NULL);
	cin.tie (NULL), cout.tie (NULL);          
}

inline void Solve () {
	cin >> n >> m;
	for (int i = 1; i <= n; i ++) 
		for (int j = 1; j <= m; j ++)
			cin >> a[i][j];
	
	for (int i = 1; i <= n; i ++) 
		for (int j = 1; j <= m; j ++) 
			d[i][j] = max (d[i - 1][j], d[i][j - 1]) + a[i][j];

	for (int i = n; i >= 1; i --)
		for (int j = 1; j <= m; j ++) 
			d1[i][j] = max (d1[i + 1][j], d1[i][j - 1]) + a[i][j];

	for (int i = n; i >= 1; i --)
		for (int j = m; j >= 1; j --) 
			d2[i][j] = max (d2[i + 1][j], d2[i][j + 1]) + a[i][j];
	
	for (int i = 1; i <= n; i ++)
		for (int j = m; j >= 1; j --) 
			d3[i][j] = max (d3[i][j + 1], d3[i - 1][j]) + a[i][j];

	for (int i = 1; i <= n; i ++) 
		for (int j = 1; j <= m; j ++) {
			int val1 = 0, val2 = 0, val3 = 0, val4 = 0;
			bool ok1 = 0, ok2 = 0, ok3 = 0, ok4 = 0;
			if (i > 1 && j > 1) val1 = d[i - 1][j] + d1[i][j - 1], ok1 = 1;
			if (i < n && j > 1) val2 = d[i][j - 1] + d1[i + 1][j], ok2 = 1;
			if (i < n && j < m) val3 = d2[i + 1][j] + d3[i][j + 1], ok3 = 1;
			if (i > 1 && j < m) val4 = d2[i][j + 1] + d3[i - 1][j], ok4 = 1;
			if (ok1 && ok3) ans = max (ans, val1 + val3);
			if (ok2 && ok4) ans = max (ans, val2 + val4);
		}
	cout << ans;
}                                          
                  
main () {                                       
//	freopen (".in", "r", stdin);    
//	freopen (".out", "w", stdout); 	          
	boost ();
	int tt = 1;
//	cin >> tt;   
	while (tt --) {
		Solve ();
	}                                               
	return 0;      
}         	                                                    