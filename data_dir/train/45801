#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;
typedef complex<double> point;

const int OO = (int) 2e9;
const double eps = 1e-9;

#define X real()
#define Y imag()
#define vec(a,b) ((b)-(a))
#define polar(r,t) ((r)*exp(point(0,(t))))
#define angle(v) (atan2((v).Y,(v).X))
#define length(v) ((double)hypot((v).Y,(v).X))
#define lengthSqr(v) (dot(v,v))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define rotate(v,t) (polar(v,t))
#define rotateabout(v,t,a)  (rotate(vec(a,v),t)+(a))
#define reflect(p,m) ((conj((p)/(m)))*(m))
#define normalize(p) ((p)/length(p))
#define same(a,b) (lengthSqr(vec(a,b))<eps)
#define mid(a,b) (((a)+(b))/point(2,0))
#define perp(a) (point(-(a).Y,(a).X))

enum STATE {
    IN, OUT, BOUNDRY
};

// v > ^ <
int dx[] = { 0, 1, 0, -1 };
int dy[] = { -1, 0, 1, 0 };

struct cmp {
    point about;
    cmp(point c) {
        about = c;
    }
    bool operator()(const point& p, const point& q) const {
        double cr = cross(vec(about, p), vec(about, q));
        if (fabs(cr) < eps)
            return make_pair(p.Y, p.X) < make_pair(q.Y, q.X);
        return cr > 0;
    }
};

void sortAntiClockWise(vector<point>& pnts) {
    point mn(1 / 0.0, 1 / 0.0);
    for (int i = 0; i < SZ(pnts); i++)
        if (make_pair(pnts[i].Y, pnts[i].X) < make_pair(mn.Y, mn.X))
            mn = pnts[i];
    sort(all(pnts), cmp(mn));
}

void convexHull(vector<point> pnts, vector<point> &convex) {
    sortAntiClockWise(pnts);
    convex.clear();
    convex.push_back(pnts[0]);
    if (SZ(pnts) == 1)
        return;
    convex.push_back(pnts[1]);
    if (SZ(pnts) == 2) {
        if (same(pnts[0], pnts[1]))
            convex.pop_back();
        return;
    }
    for (int i = 2; i <= SZ(pnts); i++) {
        point c = pnts[i % SZ(pnts)];
        while (SZ(convex) > 1) {
            point b = convex.back();
            point a = convex[SZ(convex) - 2];
            if (cross(vec(b, a), vec(b, c)) < -eps)
                break;
            convex.pop_back();
        }
        if (i < SZ(pnts))
            convex.push_back(pnts[i]);
    }
    if (SZ(convex) == 1 && SZ(pnts) > 1) {
        int x = convex[0].X, y = convex[0].Y;
        for (int i = 0; i < SZ(pnts); i++)
            if (pnts[i].X > x || pnts[i].Y > y)
                x = pnts[i].X, y = pnts[i].Y;
        if (x > convex[0].X || y > convex[0].Y)
            convex.pb(point(x, y));
    }
}

vector<point> polygon, arr;

int main() {
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
#ifndef ONLINE_JUDGE
    freopen("in.txt", "rt", stdin);
//  freopen("out.txt", "wt", stdout);
#endif
    int n, x, y, res = 0;
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        scanf("%d %d", &x, &y);
        for (int d = 0; d < 4; d++)
            arr.pb(point(x + dx[d], y + dy[d]));
    }
    convexHull(arr, polygon);
    n = SZ(polygon);
    for (int i = 0; i < n; i++) {
        int j = (i + 1) % n;
        res += max(abs(polygon[i].X - polygon[j].X),
                abs(polygon[i].Y - polygon[j].Y));
    }
    printf("%d\n", res);
    return 0;
}
