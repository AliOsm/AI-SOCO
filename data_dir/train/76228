#include <bits/stdc++.h>

using namespace std;


int main() {
  #ifdef LOCAL
  freopen("sol.in", "r", stdin);
  freopen("sol.out", "w+", stdout);
  #endif
  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
  int n, x1, y1, x2, y2;
  scanf("%d %d %d %d %d", &n, &x1, &y1, &x2, &y2);
  vector<int> x(n), y(n);
  for (int i = 0; i < n; i++) {
    scanf("%d %d", &x[i], &y[i]);
  }
  const long long inf = (long long) 1e18;
  long long ans = inf;
  auto dist2 = [&](int x1, int y1, int x2, int y2) {
    return (x1 - x2) * 1LL * (x1 - x2) + (y1 - y2) * 1LL * (y1 - y2);
  };
  auto ok = [&](long long r1, long long r2) {
    for (int i = 0; i < n; i++) {
      if (dist2(x1, y1, x[i], y[i]) > r1 && dist2(x2, y2, x[i], y[i]) > r2) {
        return false;
      }
    } 
    return true;
  };
  vector<long long> d = {0};
  for (int i = 0; i < n; i++) {
    d.push_back(dist2(x1, y1, x[i], y[i]));
    d.push_back(dist2(x2, y2, x[i], y[i]));
  }
  sort(d.begin(), d.end());
  d.erase(unique(d.begin(), d.end()), d.end());
  for (int i = 0; i < (int) d.size(); i++) {
    int low = 0, high = (int) d.size() - 1, mid;
    while (low < high) {
      mid = (low + high) >> 1;
      if (ok(d[i], d[mid])) {
        high = mid;
      } else {
        low = mid + 1;
      }
    }
    ans = min(ans, d[i] + d[low]);
  }
  printf("%lld\n", ans);
  return 0;
}