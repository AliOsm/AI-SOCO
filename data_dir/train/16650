#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<string>
#include<math.h>
#include<queue>
#include<stack>
#include<sstream>
#include<stdio.h>
#include<map>
#include<set>
#include<memory.h>
#include<algorithm>
#include<vector>
using namespace std;
typedef long long ll;
ll gcd(ll a, ll b){
	if (!b)
		return a;
	return gcd(b, a%b);
}
ll lcm(ll a, ll b){
	return b / gcd(a, b)*a;
}
#define FOR(I,N) for(int(i)=0;i<int(N);++i)
#define FORK(I,N,K) for(int(i)=0;i<int(N);i+=int(K))
const int N = 1e5 + 2;
vector<int>res;
class struc{
public:
	int start, end, idx;
	struc(int a, int b, int c){
		start = a; end = b;
		idx = c;
	}
	bool operator<(const struc & a)const{
		if (end != a.end)
			return end < a.end;
		return start < a.start;
	}
};
bool comp(const struc & a, const struc & b){
	if (a.start != b.start)
		return a.start < b.start;
	return a.end < b.end;
}
vector<struc>g;
int n, m, x, y;
int main(){
	scanf("%d%d", &n, &m);
	FOR(0, m){
		scanf("%d%d", &x, &y);
		int range = min(x - (n - y), y - (n - x));
		g.push_back(struc(x - range + 1, x, i + 1));
	}
	sort(g.begin(), g.end(), comp);
	int idx = 0;
	set<struc>s;
	for (int i = 1; i <= n; ++i){
		while (idx < m && g[idx].start <= i){
			s.insert(g[idx]);
			++idx;
		}
		while(s.size() && s.begin()->end < i)
			s.erase(s.begin());
		if (s.size() > 0 && (s.begin()->start <= i) && (s.begin()->end >= i)){
			res.push_back(s.begin()->idx);
			s.erase(s.begin());
		}
	}
	printf("%d\n", res.size());
	FOR(0, res.size())
		printf("%d ", res[i]);
}