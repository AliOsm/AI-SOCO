#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
using namespace std;
typedef long long ll;
typedef pair <int,int> pii;

const int maxN = 3e5 + 10;
const int MOD = 1e9 + 7;

#define int ll
ll data[2][4 * maxN];
int n;
vector <int> adj[maxN];
int st[maxN],fn[maxN],h[maxN];
int boz;

ll sum(ll a, ll b)
{
	return ((a + b) % MOD + MOD) % MOD;
}

void dfs(int v, int p = -1)
{
    st[v] = boz++;
    if (p != -1)
        h[v] = h[p] + 1;
    for (int i = 0 ; i < adj[v].size() ; i++)
    {
        int u = adj[v][i];
        if (u != p)
            dfs(u, v);
    }
    fn[v] = boz;
}

void add(int h, int l, int r, int x, int s = 0, int e = n, int id = 1)
{
    if (e <= l || r <= s)
        return;

    if (l <= s && e <= r)
    {
        data[h][id] = sum(data[h][id], x);
        return;
    }

    int mid = s + e >> 1;
    add(h, l, r, x, s, mid, 2 * id);
    add(h, l, r, x, mid, e, 2 * id + 1);
}

ll get(int h, int p, int s = 0, int e = n, int id = 1)
{
    if (e - s < 2)
        return data[h][id];

    int mid = s + e >> 1;
    if (p < mid)
        return sum(get(h, p, s, mid, 2 * id), data[h][id]);
    else
        return sum(get(h, p, mid, e, 2 * id + 1), data[h][id]);
}

int ind[maxN];

int32_t main()
{
	scanf("%lld", &n);
	for (int i = 1 ; i < n ; i++)
	{
		int v;
		scanf("%lld", &v);
		v--;
		adj[i].pb(v);
		adj[v].pb(i);
	}

	h[0] = 0;
	boz = 0; //starting time
	dfs(0);

	vector < pii > ver;
	for (int i = 0 ; i < n ; i++)
		ver.pb(mp(st[i], i));
	sort(ver.begin(), ver.end()); //bar asase starting time sort kon

	for (int i = 0 ; i < ver.size() ; i++)
	{
		int v = ver[i].second;
		ind[v] = i;
	}

	int q;
	scanf("%lld", &q);
	while (q--)
	{
		int type;
		scanf("%lld", &type);
		if (type == 1)
		{
			int v,x,k;
			scanf("%lld %lld %lld", &v, &x, &k);
			v--;
			add(0, st[v], fn[v], sum(h[v] * k % MOD, x) );
			add(1, st[v], fn[v], k);
		}
		if (type == 2)
		{
			int v;
			scanf("%lld", &v);
			v--;
			printf("%lld\n", sum(get(0, ind[v]), (-1) * get(1, ind[v]) * h[v]));
		}
	}
	return 0;
}