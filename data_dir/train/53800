#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cassert>
#include <queue>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define pb push_back
#define fst first
#define snd second
#define SZ(x) ((int)x.size())
typedef long long ll;
#define dforn(i, n) for(int i = n - 1; i >= 0; i--)

const int MAXN = 100100;
const double INF = 1e18;

int n, m, a, b, A[MAXN], B[MAXN], L[MAXN], ansl, ansr;
double best;

void calc(int l, int r){
  if(l >= n || l < 0 || r < 0 || r >= m) return;
  double d = hypot(a, A[l]) + hypot(a-b, A[l]-B[r]) + L[r];
  if(d < best){
    best = d;
    ansl = l;
    ansr = r;
  }
}

int main() {
  //~ freopen("input.in", "r", stdin);
  while( scanf("%d %d %d %d", &n, &m, &a, &b) >= 1 ){
    forn(i, n) scanf("%d", &A[i]);
    forn(i, m) scanf("%d", &B[i]);
    forn(i, m) scanf("%d", &L[i]);
    int l = 0;
    ansl = -1;
    ansr = -1;
    best = INF;
    vector<pair<double, int>> V;
    forn(i, m){
      double v = (double)a/b * B[i];
      V.pb({v, i});
    }
    forn(i, n){
      V.pb({A[i], m});
    }
    sort(V.begin(), V.end());
    forn(i, SZ(V)){
      pair<double, int> p = V[i];
      if(p.snd < m){
        calc(l-1, p.snd);
        calc(l, p.snd);
        calc(l+1, p.snd);
      } else {
        l++;
      }
    }
    printf("%d %d\n", ansl+1, ansr+1);
  }
  return 0;
}
