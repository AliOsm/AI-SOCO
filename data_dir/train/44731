#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int dx[4] = {-1, 1, 0, 0};
int dy[4] = {0, 0, -1, 1};
int n, m, k;
string a[55];
string ans;
int dist = inf;
bool can[55][55];
vector <char> v;

bool ok(int x, int y) {
    return x >= 0 && x < n && y >= 0 && y < m;
}

void fill(vector <char> &v) {
    map <char, bool> was;
    for (int i = 0; i < v.size(); i++) was[v[i]] = 1;
    was['S'] = 1;
    was['T'] = 1;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            can[i][j] = was[a[i][j]];
        }
    }
}

int level[55][55];
int d[55][55];

string solve() {
    memset(d, -1, sizeof d);
    queue <pii> q;
    int endx = -1, endy = -1;
    int startx = -1, starty = -1;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (a[i][j] == 'T') {
                q.push(mp(i, j));
                d[i][j] = 0;
                startx = i;
                starty = j;
            }
            if (a[i][j] == 'S') {
                endx = i;
                endy = j;
            }
        }
    }
    while (!q.empty()) {
        pii p = q.front(); q.pop();
        int x = p.f;
        int y = p.s;
        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (ok(nx, ny) && can[nx][ny] && d[nx][ny] == -1) {
                q.push(mp(nx, ny));
                d[nx][ny] = d[x][y] + 1;
            }
        }
    }
    if (d[endx][endy] == -1) {
        string ans = "";
        ans += (char)('z' + 1);
        return ans;
    }
    string ans = "";
    int len = d[endx][endy];
    vector <pii> cur;
    cur.pb(mp(endx, endy));
    while (len) {
        vector <pair <char, pii> > temp;
        for (int i = 0; i < cur.size(); i++) {
            int x = cur[i].f;
            int y = cur[i].s;
            for (int j = 0; j < 4; j++) {
                int nx = x + dx[j];
                int ny = y + dy[j];
                if (ok(nx, ny) && d[nx][ny] == len - 1) {
                    temp.pb(mp(a[nx][ny], mp(nx, ny)));
                }
            }
        }
        sort(all(temp));
        temp.resize(unique(all(temp)) - temp.begin());
        int en = 0;
        while (en < temp.size() && temp[en].f == temp[0].f) en++;
        vector <pii> tmp;
        for (int i = 0; i < en; i++)
            tmp.pb(temp[i].s);
        ans += temp[0].f;
        cur = tmp;
        len--;
    }
    ans.erase(sz(ans) - 1);
    return ans;
}

void go(int ind, char last = (char)('a' - 1)) {
    if (ind == k) {
        fill(v);
        string cur = solve();
        if (cur[0] > 'z') return;
        if (cur.size() < dist) {
            dist = cur.size();
            ans = cur;
        } else if (cur.size() == dist) {
            ans = min(ans, cur);
        }
        return;
    }
    for (char x = last + 1; x <= 'z'; x++) {
        v.pb(x);
        go(ind + 1, x);
        v.pop_back();
    }
}

int main(){

    cin >> n >> m >> k;
    for (int i = 0; i < n; i++) cin >> a[i];

    ans += (char)('z' + 1);

    go(0);

    if (ans[0] == (char)('z' + 1)) cout << -1 << endl;
    else cout << ans << endl;

    return 0;
}
