#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <chrono>
#include <assert.h>
#include <memory>
#include <cstddef>
#include <iterator>

#pragma comment(linker, "/stack:20000000")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

using namespace std;
typedef long long mt;
typedef double fl;

template<typename T>
constexpr mt infValue = std::is_same<T, int>::value ? 2000100007 : 8600000000000000007ll;
template<typename T>
constexpr mt maxValue = std::is_same<T, int>::value ? 1000000007 : 1000000000000000001ll;

#define rep(a, b, i) for(mt i = a; i < b; ++i)
#define repe(a, b, i) for(mt i = a; i <= (b); ++i)
#define repd(a, b, i) for(mt i = a; i > b; --i)
#define repde(a, b, i) for(mt i = a; i >= b; --i)

const mt INF = infValue<mt>;
const long long MOD = 1000000007ll;//998244353ll;
const double EPS = 1e-6;
const mt MAX = maxValue<mt>;
using pr = pair<mt, mt>;

#define N 300010
#define K 24
#define P 3
#define M (N * N)
#define p2(x) ((((x) * (x)) % (MOD)))
#define mxy(x, y) ((((x) * (y)) % (MOD)))
#define p2p(x) ((((x) * (x))))

mt n, w[N], dp[N], answ;
vector<pr> g[N];

void dfs(mt v, mt p = -1) {
	for (const auto& to: g[v]) {
		if (to.first != p) {
			dfs(to.first, v);
			dp[v] = max(dp[to.first] - to.second, dp[v]);
		}
	}
	answ = max(answ, dp[v] + w[v]);
	mt x = 0, c = 0;
	for (const auto& to : g[v]) {
		if (to.first != p) {
			mt d = dp[to.first] - to.second;
			if (d == dp[v]) ++c;
			else x = max(x, d);
		}
	}
	answ = max(dp[v] + (c > 1? dp[v] : x) + w[v], answ);
	dp[v] += w[v];
}

int main(void) {
#ifdef _DEBUG
	freopen("in.txt", "r", stdin);
#endif
	scanf("%lld", &n);
	repe(1, n, i) scanf("%lld", w + i);
	rep(1, n, i) {
		mt u, v, c;
		scanf("%lld %lld %lld", &u, &v, &c);
		g[u].emplace_back(v, c);
		g[v].emplace_back(u, c);
	}
	dfs(1);
	printf("%lld\n", answ);

	return 0;
}