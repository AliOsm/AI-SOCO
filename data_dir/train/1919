#include <iostream>
#include <algorithm>
#include <string>
#include <cstdio>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <ctime>
#include <cstdlib>
#include <queue>
#include <deque>
#include <cstring>
#include <cassert>
#include <bitset>

using namespace std;

#define mp make_pair
#define f first
#define s second
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define sz(x) ((int)(x).size())
#define sqr(x) ((x)*1ll*(x))

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<int> vi;

int n;
int t[111];
int d[111];
int p[111];
int id[111];
char u[111][2020];
int dp[111][2020];
vi ans;

int calc(int i, int j) {
    if(i == n + 1) return 0;
    if(u[i][j]) return dp[i][j];
    u[i][j] = 1;
    
    int &res = dp[i][j];
    res = max(res, calc(i + 1, j));
    if(j + t[i] < d[i])
        res = max(res, calc(i + 1, j + t[i]) + p[i]);
    return res;
}

void path(int i, int j) {
    if(i == n + 1) return;
    
    int res1 = calc(i + 1, j);
    int res2 = calc(i + 1, j + t[i]) + (j + t[i] < d[i]) * p[i];
    
    if(res1 == dp[i][j]) {
        path(i + 1, j);
    } else {
        ans.pb(i);
        path(i + 1, j + t[i]);
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    
    cin >> n;
    for(int i = 1; i <= n; ++i) {
        cin >> t[i] >> d[i] >> p[i];
        id[i] = i;
    }
    for(int i = 1; i <= n; ++i) {
        for(int j = i + 1; j <= n; ++j) {
            if(d[j] < d[i]) {
                swap(id[i], id[j]);
                swap(t[i], t[j]);
                swap(d[i], d[j]);
                swap(p[i], p[j]);
            }
        }
    }
    cout << calc(1, 0) << endl;
    path(1, 0);
    cout << sz(ans) << endl;
    for(int v : ans) cout << id[v] << " ";
    cout << endl;
    
    return 0;
}
