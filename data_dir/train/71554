//void _(){
//    int n;
//    cin >> n;
//    vpii arr(n);
//    rep(i,n){
//        cin >> arr[i].X;
//        arr[i].Y = i+1;
//    }
//    sort(rall(arr));
//    int ans = 0;
//    vi order;
//    rep(i,n){
//        ans += arr[i].X*i+1;
//        order.pb(arr[i].Y);
//    }
//    print_n ans,order;
//}
//
#include <iomanip>
#include <algorithm>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define REP_ZERO_INT(i,r) for(int i = 0; i < r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT,REP_ZERO_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define sz(v) ll(v.size())
#define X first
#define Y second
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout)
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }
    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
#define print_n _print("\n"),
T1 ostream& operator<<(ostream& stream, const vector<T>& t){
    for(int i = 0; i < sz(t); ++i){
        stream << t[i];
        if(i+1 < sz(t))
            stream << ' ';
    }
    return stream;
}
void _(){
    int n;
    cin >> n;
    vpii arr(n);
    rep(i,n){
        cin >> arr[i].X;
        arr[i].Y = i+1;
    }
    sort(rall(arr));
    int ans = 0;
    vi order;
    rep(i,n){
        ans += arr[i].X*i+1;
        order.pb(arr[i].Y);
    }
    print_n ans,order;
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
