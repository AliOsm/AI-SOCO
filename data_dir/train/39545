#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) (((n%m) + m)%m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

bool vowel(char x)
{
	if (x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u')
		return true;
	return false;
}

const int N = 1e6 + 5;

vector<pair<int, string>> vec[26];
vector<bool> visited[26];
vector<string> hoba[26];
vector<string> bycount[N];

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int n;
	cin >> n;

	rep(i, 0, n)
	{
		string x;
		cin >> x;

		char last;
		int cnt = 0;
		rep(j, 0, sz(x))
		{
			if (vowel(x[j]))
				cnt++, last = x[j];
		}

		vec[last - 'a'].push_back(
		{ cnt, x });
		visited[last - 'a'].push_back(0);
	}

	rep(i, 0, 26)
		sort(all(vec[i]));

	rep(i, 0, 26)
	{
		rep(j, 0, sz(vec[i]) - 1)
		{
			if (vec[i][j].first == vec[i][j + 1].first)
			{
				hoba[i].push_back(vec[i][j].second);
				hoba[i].push_back(vec[i][j + 1].second);
				visited[i][j] = visited[i][j + 1] = true;
				j++;
			}
		}

		rep(j, 0, sz(vec[i]))
		{
			if (!visited[i][j])
			{
//				cout << "here: " << vec[i][j].first << " " << vec[i][j].second << endl;
				bycount[vec[i][j].first].push_back(vec[i][j].second);
			}
		}
	}

	vector<pair<string, string>> res;

	int idx = 1;
	rep(i, 0, 26)
	{
		if (hoba[i].empty())
			continue;

		if (idx == N)
		{
			vector<string> curr;
			rep(j, i, 26)
			{
				if (hoba[j].empty())
					continue;
				for (auto x : hoba[j])
				{
//					cout << "---> " << x << endl;
					curr.push_back(x);
				}
			}

			for (int j = 0; j + 4 <= sz(curr); j += 4)
			{
				res.push_back(
				{ curr[j], curr[j + 2] });
				res.push_back(
				{ curr[j + 1], curr[j + 3] });
			}
			break;
		}
		else
		{
			while (!hoba[i].empty())
			{
				while (idx < N && bycount[idx].size() < 2)
					idx++;
				if (idx == N)
				{
					i--;
					break;
				}

				res.push_back(
				{ bycount[idx].back(), hoba[i].back() });
				bycount[idx].pop_back(), hoba[i].pop_back();
				res.push_back(
				{ bycount[idx].back(), hoba[i].back() });
				bycount[idx].pop_back(), hoba[i].pop_back();
			}
		}

	}

	cout << sz(res) / 2 << endl;
	rep(i, 0, sz(res))
		cout << res[i].first << " " << res[i].second << endl;

	return 0;
}
