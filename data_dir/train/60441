#include<bits/stdc++.h>
using namespace std;
#define LL                  long long
#define ull                 unsigned long long LL
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9
#define EPS                 1e-8
#define Pi                  acos(-1.0)

LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}
#define N 200005

LL arr[N];
LL pend[N];

int main()
{
    FASTREAD;
    LL n;
    cin>>n;

    LL sz=0;
    double sum=0;
    double avg;

    while(n--)
    {
        int op;
        cin>>op;
        if(op==2)
        {
            LL k;
            cin>>k;
            arr[++sz]=k;
            sum+=(double)k;
            avg=sum/(1.0*(sz+1));
            cout<<fixed<<setprecision(8)<<avg<<endl;

        }
        else if(op==3)
        {
            sum-=(double)arr[sz];
            sum-=(double)pend[sz];
            pend[sz-1]+=pend[sz];
            pend[sz]=0;
            --sz;
            avg=sum/(1.0*(sz+1));
            cout<<fixed<<setprecision(8)<<avg<<endl;

        }
        else
        {
            LL a,x;
            cin>>a>>x;
            pend[a-1]+=x;
            LL new_added=a*x;
            sum+=(double)new_added;
            avg=sum/(1.0*(sz+1));
            cout<<fixed<<setprecision(8)<<avg<<endl;
        }
    }

    return 0;
}



/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
