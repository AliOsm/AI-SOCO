#include <bits/stdc++.h>

using namespace std;

#define long long long
#define INF (long) 1e18
#define MOD ((long) 1e9 + 7)
#define mll map<long, long>
#define pll pair<long, long>
#define pb push_back
#define FOR(i, a, b) \
  for (long i = a; i < (long) b; i++)
#define SORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr < b.atr; });
#define UNSORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr > b.atr; });
#define PRINTV(v) \
  FOR (_i, 0, v.size()) \
    printf("%lld ", v[_i]); \
  printf("\n");

set<long> gera_primos(long n)
{
  set<long> primos;
  vector<bool> crivo(n);
  primos.insert(2);
  for (long i = 3; i <= n; i += 2) {
    if (crivo[i]) continue;
    primos.insert(i);
    for (long j = i; j <= n; j += i) {
      crivo[j] = true;
    }
  }
  return primos;
}

struct Link
{
  long from, to, cost;
};

struct Node
{
  bool visitado = false;
  long dist;
  vector<long> in, out;
};

long d[5010][5010];

long solve(auto &soma, long n, long m, long i, long k)
{
  if (k == 0) return 0;
  if (n - i < m * k) return -INF;
  if (d[i][k] != -1) return d[i][k];
  long x = soma[i] + solve(soma, n, m, i+m, k-1);
  long y = solve(soma, n, m, i+1, k);
  long maximo = max(x, y);
  d[i][k] = maximo;
  return maximo;
}

int main()
{
  //ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

  long n, m, k;
  cin >> n >> m >> k;

  vector<long> a(n);
  for (auto &x : a) cin >> x;

  vector<long> soma(n);
  FOR (i, 0, m) {
    soma[0] += a[i];
  }
  FOR (i, 1, n-m+1) {
    soma[i] = soma[i-1] - a[i-1] + a[i+m-1];
  }
  FOR (i, 0, 5010) {
    FOR (j, 0, 5010) {
      d[i][j] = -1;
    }
  }
  long resp = solve(soma, n, m, 0, k);
  printf("%lld\n", resp);
}
