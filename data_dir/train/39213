//raja1999

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,avx,avx2")

#include <bits/stdc++.h>
#include <vector>
#include <set>
#include <map>
#include <string> 
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <utility>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iomanip> 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
//setbase - cout << setbase (16)a; cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 <<endl;prints xxx77
//setprecision - cout << setprecision (14) << f << endl; Prints x.xxxx
//cout.precision(x)  cout<<fixed<<val;  // prints x digits after decimal in val

using namespace std;
using namespace __gnu_pbds;
#define f(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) f(i,0,n)
#define fd(i,a,b) for(i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define vi vector< int >
#define vl vector< ll >
#define ss second
#define ff first
#define ll long long
#define pii pair< int,int >
#define pll pair< ll,ll >
#define sz(a) a.size()
#define inf (1000*1000*1000+5)
#define all(a) a.begin(),a.end()
#define tri pair<int,pii>
#define vii vector<pii>
#define vll vector<pll>
#define viii vector<tri>
#define mod (1000*1000*1000+7)
#define pqueue priority_queue< int >
#define pdqueue priority_queue< int,vi ,greater< int > >
#define int ll

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

//std::ios::sync_with_stdio(false);
int haha[100005],lol[100005],x[100005],y[100005],z[100005];
map<int,int>mapi,mapi1;
map<int,int>::iterator it;
vector<vector<pair<int,pii > > >vec(100005);
vector<vii>gg(100005);
int solve(int id){
	int j,c,i,prev;
	mapi1.clear();
	rep(j,vec[id].size()){
		mapi1[vec[id][j].ff]=1;
	}
	c=0;
	for(it=mapi1.begin();it!=mapi1.end();it++){
		gg[c].clear();
		lol[c]=-1;
		it->ss=c++;
	}
	rep(j,vec[id].size()){
		gg[mapi1[vec[id][j].ff]].pb(vec[id][j].ss);
	}
	rep(j,c){
		sort(all(gg[j]));
		rep(i,gg[j].size()){
			if(i+1<gg[j].size()){
				cout<<gg[j][i].ss+1<<" "<<gg[j][i+1].ss+1<<endl;
			}
			else{
				lol[j]=gg[j][i].ss;
			}
			i++;
		}
	}
	prev=-1;
	rep(j,c){
		if(lol[j]!=-1){
			if(prev!=-1){
				cout<<prev+1<<" "<<lol[j]+1<<endl;
				prev=-1;
			}
			else{
				prev=lol[j];
			}
		}
	}
	if(prev!=-1){
		haha[id]=prev;
	}
}
main(){
	std::ios::sync_with_stdio(false); cin.tie(NULL);
	int t,t1;
	//cin>>t;
	t=1;
	t1=t;
	while(t--){
		int n,i,c,prev;
		cin>>n;
		rep(i,n){
			cin>>x[i]>>y[i]>>z[i];
			mapi[x[i]]=1;
		}	
		c=0;
		for(it=mapi.begin();it!=mapi.end();it++){
			it->ss=c++;
		}
		rep(i,n){
			vec[mapi[x[i]]].pb(mp(y[i],mp(z[i],i)));
		}
		rep(i,c){
			haha[i]=-1;
			solve(i);
		}
		prev=-1;
		rep(i,c){
			if(haha[i]!=-1){
				if(prev!=-1){
					cout<<prev+1<<" "<<haha[i]+1<<endl;
					prev=-1;
				}
				else{
					prev=haha[i];
				}
			}
		}
	}
	return 0;
} 
	