#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007LL
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000000000000LL
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 61

#define sq(z) ((z)*(z))

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<int, int> pii;

#define maxn 300005

i64 d[2005] ;
int dis[2005][2005] ;

int main()
{
    int n ;

    scanf("%d",&n) ;

    for(int i=1 ; i<=n ; i++)
    {
        for(int j=i+1 ; j<=n ; j++)
        {
            scanf("%d",&dis[i][j]) ;
            dis[j][i] = dis[i][j] ;
        }
    }

    int x=1 , y=2 ;

    for(int i=1 ; i<=n ; i++)
    {
        for(int j=i+1 ; j<=n ; j++)
        {
            if( dis[i][j] < dis[x][y] )
            {
                x = i ;
                y = j ;
            }
        }
    }

    int mndis = dis[x][y] ;

    for(int i=1 ; i<=n ; i++)
    {
        for(int j=i+1 ; j<=n ; j++)
        {
            dis[i][j] -= mndis ;
            dis[j][i] -= mndis ;
        }
    }

    priority_queue < pair<i64,int> > pq ;

    for(int i=1 ; i<=n ; i++)
    {
        if(i==x ||i==y) continue ;
        int mn = min( dis[i][x] , dis[i][y] ) ;

        for(int j=1 ; j<=n ; j++)
        {
            if(j==i || j==x || j==y) continue ;

            mn = min( mn , dis[i][j] + min(dis[j][x],dis[i][j]) ) ;
            mn = min( mn , dis[i][j] + min(dis[j][y],dis[i][j]) ) ;
        }
        pq.push( mp(-mn,i) ) ;
        d[i] = mn ;
    }

    d[x] = 0 ; d[y] = 0 ;

    while( !pq.empty() )
    {
        pair<i64,int> p = pq.top() ;
        pq.pop() ;
        p.xx *= (-1) ;

        int u = p.yy ;

        if(p.xx !=d[u]) continue ;

        for(int v=1 ; v<=n ; v++)
        {
            if( d[v] > d[u] + dis[u][v]  )
            {
                d[v] = d[u] + dis[u][v] ;
                pq.push( mp(-d[v],v) ) ;
            }
        }
    }

    for(int i=1; i<=n ; i++) d[i] += 1LL*(n-1)*mndis ;

    for(int i=1 ; i<=n ; i++) printf("%lld\n",d[i]) ;
  //  printf("\n") ;

    return 0;
}
