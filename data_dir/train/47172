#include <bits/stdc++.h>
using namespace std;

using pii = pair<int, int>; using vi = vector<int>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
using ll = long long; using vll = vector<long long>;
constexpr int INF = 0x3f3f3f3f; constexpr ll BINF = 0x3f3f3f3f3f3f3f3fLL;

#include <iostream>

class mint {
private:
	int x;
	static const int MOD = 998244353;

public:
	friend inline std::ostream &operator<<(std::ostream &os, const mint &arg) {
		return os << arg.x;
	}
	friend inline std::istream &operator>>(std::istream &is, mint &arg) {
		return is >> arg.x;
	}
	mint(const int &x) : x(x) {
		if (this->x >= MOD) this->x -= MOD;
	}
	mint(const long long &x) : x(x % MOD) {}
	mint() : x(0) {}

	mint &operator+=(const mint &rhs) {
		x += rhs.x;
		if (x >= MOD) x -= MOD;
		return *this;
	}
	mint &operator++() {
		return *this += 1;
	}
	mint operator+(const mint &rhs) const {
		return mint(*this) += rhs;
	}
	mint operator++(int dummy) {
		mint cpy(*this);
		++*this;
		return cpy;
	}

	mint &operator-=(const mint &rhs) {
		x -= rhs.x;
		if (x < 0) x += MOD;
		return *this;
	}
	mint &operator--() {
		return *this -= 1;
	}
	mint operator-(const mint &rhs) const {
		return mint(*this) -= rhs;
	}
	mint operator-() const {
		return mint() - *this;
	}
	mint operator--(int dummy) {
		mint cpy(*this);
		--*this;
		return cpy;
	}

	mint &operator*=(const mint &rhs) {
		x = 1LL * x * rhs.x % MOD;
		return *this;
	}
	mint operator*(const mint &rhs) const {
		return mint(*this) *= rhs;
	}

	mint pow(long long p) const {
		mint rt = 1, b = *this;
		for (;p;p>>=1,b*=b) if (p & 1) rt *= b;
		return rt;
	}

	mint &operator/=(const mint &rhs) {
		return *this *= rhs.pow(MOD - 2);
	}
	mint operator/(const mint &rhs) const {
		return mint(*this) /= rhs;
	}

	bool operator<(const mint &rhs) const {
		return x < rhs.x;
	}
	bool operator>(const mint &rhs) const {
		return x > rhs.x;
	}
	bool operator<=(const mint &rhs) const {
		return x <= rhs.x;
	}
	bool operator>=(const mint &rhs) const {
		return x >= rhs.x;
	}
	bool operator==(const mint &rhs) const {
		return x == rhs.x;
	}
	bool operator!=(const mint &rhs) const {
		return x != rhs.x;
	}

};

const int M = 300005;
mint pow2s[M];
void precompute() {
	pow2s[0] = 1; for (int i=1;i<M;i++) pow2s[i] = pow2s[i - 1] * 2;
}

int solve() {
	int n, m; cin >> n >> m;
	vector<vi> g(n);
	for (int i=0;i<m;i++) {
		int u, v; cin >> u >> v; u--, v--;
		g[u].push_back(v); g[v].push_back(u);
	}
	vector<int> col(n, -1);
	mint ans = 1;
	for (int i=0;i<n;i++) {
		if (col[i] >= 0) continue;
		bool ok = 1;
		int white = 1, black = 0;
		col[i] = 0;
		function<void(int)> dfs = [&](int u) {
			for (int v : g[u]) {
				if (col[v] == -1) {
					col[v] = 1 - col[u];
					if (col[v]) black++; else white++;
					dfs(v);
				} else if (col[v] == col[u]) {
					ok = 0;
				}
			}
		};
		dfs(i);
		if (ok) {
			mint cur = 0;
			cur += pow2s[white]; // wb
			cur += pow2s[black];
			ans *= cur;
		} else {
			ans = 0;
		}
	}
	cout << ans << endl;
	return 0;
}

int main() {
	ios::sync_with_stdio(0);
	precompute();
	int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << (solve() ? "YES" : "NO") << endl;
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it << " \n"[++it==v.end()];
	return os;
}
