#include <bits/stdc++.h>

#define endl '\n'
#define ll long long int
#define let(x, a) __typeof(a) x(a)
#define all(a) (a).begin(), (a).end()
#define present(c, x) ((c).find(x) != (c).end())
#define tr(v, it) for (let(it, v.begin()); it != v.end(); it++)
#define rtr(v, it) for (let(it, v.rbegin()); it != v.rend(); it++)

#define trace1(x)					cerr << #x << ": " << x << endl;
#define trace2(x, y)				cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)				cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)			cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)		cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f)	cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

using namespace std;

ll mod=998244353;
bool possible=true;

int main() {
	ios::sync_with_stdio(false);
	ll n,ans=0,p;
	cin>>n;
	vector<pair<int,int>> a(n,{0,0});
	unordered_map<ll,ll> cnt1,cnt2,cnt3;
	for(int i=0;i<n;i++) {
		cin>>a[i].first>>a[i].second;
		cnt1[a[i].first]++;
		cnt2[a[i].second]++;
		cnt3[mod*a[i].first+a[i].second]++;
	}
	vector<ll> fact(n+1,0);
	fact[0]=fact[1]=1;
	for(ll i=2;i<=n;i++) {
		fact[i]=(fact[i-1]*i)%mod;
	}
	p=1;
	for(auto xx:cnt1) {
		ll x=xx.second;
		p=(p*fact[x])%mod;
	}
	ans=(ans+p)%mod;
	p=1;
	for(auto xx:cnt2) {
		ll x=xx.second;
		p=(p*fact[x])%mod;
	}
	ans=(ans+p)%mod;
	sort(all(a));
	if(possible) {
		for(int i=1;i<n;i++) {
			ll x=a[i].first,y=a[i].second;
			ll x1=a[i-1].first,y1=a[i-1].second;
			if(x<x1 || y<y1) goto jump;
		}
		p=1;
		for(auto xx:cnt3) {
			ll x=xx.second;
			p=(p*fact[x])%mod;
		}
		ans-=p;
		if(ans<0) ans+=mod;
	}
	jump:
	cout<<(fact[n]-ans+mod)%mod<<endl;
	return 0;
}