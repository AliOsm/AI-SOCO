#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
#define mt make_tuple
#define DEBUG 1
#define cerr if (DEBUG) cerr
#define fprintf if (DEBUG) fprintf
#define local freopen("in.txt","r",stdin);
#define test cerr<<"hi\n";
#define tr(x) cerr<<#x" "<<x<<'\n';
#define fi first
#define se second
#define HH1 402653189
#define HH2 1610612741
#define INF 0x3f3f3f3f
#define tii tuple<int,int,int>
#define npos string::npos

using namespace std;

#define MOD 1000000007LL
#define MAXN 200005

set<int> s;
int t, n, a[MAXN];
bool exists[MAXN];
vector<int> factors[MAXN];

void precom() {
	for (long long x = 1; x < MAXN; x++) {
		for (long long i = 1; i * i <= x; i++) {
			if (x % i == 0) {
				factors[x].pb(i);
				if (x / i != i) factors[x].pb(x / i);
			}
		}
	}
}

void solve() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
		exists[a[i]] = 1;
		s.insert(a[i]);
	}
	
	sort(a, a + n);
	reverse(a, a + n);
	
	int ans = a[0];
	
	for (int i = 0; i < n; i++) {
		int x = a[i];
//		cerr << "cur " << x << '\n';
		for (int f : factors[x]) {
			s.erase(f);
		}
		auto it = s.lower_bound(x);
		if (it == s.begin()) {
			for (int f : factors[x]) {
				if (exists[f]) s.insert(f);
			}
			continue;
		}
		it--; // next element < x inside the set
		
		int y = *it;
//		cerr << "cur " << x << ' ' << y << '\n';
		ans = max(ans, x + y);
		
		for (int f : factors[y]) {
			s.erase(f);
		}
		auto it2 = s.lower_bound(y);
		if (it2 == s.begin()) {
			for (int f : factors[x]) {
				if (exists[f]) s.insert(f);
			}
			
			for (int f : factors[y]) {
				if (exists[f]) s.insert(f);
			}
			continue;
		}
		it2--; // next element < y inside the set
		
		int z = *it2;
//		cerr << "cur " << x << ' ' << y << ' ' << z << '\n';
		ans = max(ans, x + y + z);

		for (int f : factors[x]) {
			if (exists[f]) s.insert(f);
		}
		
		for (int f : factors[y]) {
			if (exists[f]) s.insert(f);
		}
	}
	
	cout << ans << '\n';
	
	s.clear();
	for (int i = 0; i < n; i++) {
		exists[a[i]] = 0;
	}
}

int main(){
	ios_base::sync_with_stdio(0); cin.tie(0);
	
	precom();
	
//	for (int i = 1; i <= 20; i++) {
//		cerr << i << ": ";
//		for (int x : factors[i]) cerr << x << ' '; cerr << '\n';
//	}
	
	cin >> t;
	while (t--) {
		solve();
	}
}