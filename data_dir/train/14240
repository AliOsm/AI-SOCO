#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define endl '\n'
#define F first
#define S second
#define mp make_pair
#define ll long long
#define pb push_back
#define pii pair < int, int >
#define type(x) __typeof(x.begin())
#define foreach(i, x) for(type(x) i = x.begin(); i != x.end(); i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define sol (root << 1)
#define sag (sol | 1)
#define orta ((bas + son) >> 1)
#define bit __builtin_popcount

#ifndef D
	#define dbgs(x) 0
	#define dbg(x) 0
	#define TIME 0
#else
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define TIME cerr << "Tooks " << (double) clock() / CLOCKS_PER_SEC << " seconds." << endl
#endif

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 3e5 + 5;

const int ADD = 2;

int n, p, x, y, t[N], dp[N], fen[N];

ll ans;

set < int > s[N];

map < pii, int > M;

void up(int x, int val) {

	for(x += ADD; x < N; x += x & (-x))
		fen[x] += val;

}

int query(int x) {

	if(x < 0) return 0;

	int sum = 0;

	for(x += ADD; x; x -= x & (-x))
		sum += fen[x];

	return sum;

}

int qu(int x) {

	return query(n) - query(x - 1);

}

int main () {
    
    ios :: sync_with_stdio(0);

	cin >> n >> p;

	FOR(i, 1, n)
	{
		cin >> x >> y;

		if(x > y) swap(x, y);

		s[x].insert(y);

		t[x]++;
		t[y]++;

		M[mp(x, y)]++;
	}

	FOR(i, 1, n)
		up(t[i], 1);

	FOR(i, 1, n)
	{
		int over = 0;

		foreach(it, s[i])
		{
			ans += t[i] + t[*it] - M[mp(i, *it)] >= p;

			over += t[*it] >= p - t[i];
		}

		ans += qu(p - t[i]) - over - (t[i] >= p - t[i]);

		up(t[i], -1);
	}

	cout << ans << endl;

	return 0;
    
}
