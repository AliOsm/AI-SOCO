#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define all(v) (v).begin() , (v).end()
#define popcnt(x) __builtin_popcount(x)
#define inf 0x3f3f3f3f
#define watch(x) cout << (#x) << " is " << (x) << endl
#define rand() (rand() << 15 | rand())
using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set =
tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long  ll;
#define EPS 1e-9
#define PI acos(-1.0)
const int N = 2e5 + 5 , MOD = 998244353;
int fact[N] , invfact[N];

int mul(int a , int b , int m = MOD){
   return (1LL * (a % m) * (b % m)) % m;
}

int add(int a , int b , int m = MOD){ // moded
   a += b;
   while(a >= MOD)a -= MOD;
   while(a < 0) a += MOD;
   return a;
}

int powMOD(int x , int n , int m = MOD){
   if(!n)return 1;
   int ret = 1;
   if(n & 1)ret = mul(x , powMOD(x , n - 1 , m) , m);
   else{
      int y = powMOD(x , n / 2 , m);
      ret = mul(y , y , m);
   }
   return ret;
}

int nCr(int n , int r){
   if(r < 0 || r > n)return 0;
   return mul(mul(fact[n] , invfact[r] , MOD) , invfact[n - r] , MOD);
}

void pre(){
   fact[0] = invfact[0] = 1;
   for(int i = 1 ; i < N ; ++i)
      fact[i] = mul(i % MOD , fact[i - 1] , MOD);

   invfact[N - 1] = powMOD(fact[N - 1] , MOD - 2 , MOD);
   for(int i = N - 2; ~i ; --i)
      invfact[i] = mul(invfact[i + 1] , (i + 1) % MOD , MOD);
}

int main() {
#ifndef ONLINE_JUDGE
   freopen("input.txt", "r", stdin);
#endif
   ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
   pre();
   int n , m;
   cin >> n >> m;
   int ways = nCr(m , n - 1);
   int pos = 0;
   for(int i = 1 ; i + 1 < n ; ++i){
      pos = add(pos , mul(i , nCr(n - 2 , i)));
   }
   cout << mul(pos , ways) << "\n";
}