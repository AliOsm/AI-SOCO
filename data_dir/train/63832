#include <bits/stdc++.h>
using namespace std;

struct edge
{
    int to;
    bool dir;
};

const int MX=2*100*1000+1;
vector<edge> e[MX];
//int par[MX];
bool dir[MX];

int down[MX];
int total[MX];

int n;

void dfs(int from, int prev)
{
    int res=0;
    for(auto ee: e[from])
    {
        if(ee.to==prev) continue;
        dfs(ee.to, from);

        if(!ee.dir) res++;
        res+=down[ee.to];

       // par[ee.to]=from;
        dir[ee.to]=ee.dir;
    }

    down[from]=res;
}

void dfs2(int from, int prev)
{
    if(from==1)
    {
        total[1]=down[1];
    }
    else
    {
        total[from]=total[prev]+(dir[from]?1:-1);
    }
    for(auto ee: e[from])
    {
        if(ee.to==prev) continue;
        dfs2(ee.to, from);
    }
}

void solve()
{
    dfs(1, 0);
    dfs2(1, 0);

    int _min=total[1];
    for(int u=2; u<=n; u++)
    {
        _min=min(_min, total[u]);
    }

    /*
    for(int i=2; i<=n; i++) cout << dir[i] << ' ';
    cout << endl;

    cout << "DOWN:" << endl;
    for(int i=1; i<=n; i++) cout << down[i] << ' ';
    cout << endl;

    cout << "TOTAL:" << endl;
    for(int i=1; i<=n; i++) cout << total[i] << ' ';
    cout << endl;
    */

    cout << _min << '\n';
    for(int i=1; i<=n; i++) if(total[i]==_min) cout << i << ' ';
}

int main()
{
    cin >> n;
    for(int i=0; i<n-1; i++)
    {
        int s, t;
        cin >> s >> t;
        e[s].push_back(edge{.to=t, .dir=true});
        e[t].push_back(edge{.to=s, .dir=false});
    }

    solve();
    return 0;
}
