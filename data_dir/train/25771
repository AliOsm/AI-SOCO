//#include "stdc++.h"
#include <bits/stdc++.h>
#include<iostream>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <ll, int> pli;
typedef pair <db, db> pdd;
typedef vector<int> vi;
#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))
#define sz(x) (int)(x.size())
#define ff first
#define ss second
#define endl "\n"
#define int long long int
inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p*p)%m;if(n%2) return (p*a)%m;else return p;}
const ll MOD = 1000000009;
const int INF = 0x3f3f3f3f;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
string s[51];
bool visited[51][51];int n;bool visited1[51][51];
void dfs(int x,int y)
{
    visited[x][y]=1;
    if(x>0&&(!visited[x-1][y])&&(s[x-1][y]=='0'))
    {
        dfs(x-1,y);
    }
    if(y>0&&(!visited[x][y-1])&&(s[x][y-1]=='0'))
    {
        dfs(x,y-1);
    }
    if(x<n-1&&(!visited[x+1][y])&&(s[x+1][y]=='0'))
    {
        dfs(x+1,y);
    }
    if(y<n-1&&(!visited[x][y+1])&&(s[x][y+1]=='0'))
    {
        dfs(x,y+1);
    }
}
void dfs1(int x,int y)
{
    visited1[x][y]=1;
    if(x>0&&(!visited1[x-1][y])&&(s[x-1][y]=='0'))
    {
        dfs1(x-1,y);
    }
    if(y>0&&(!visited1[x][y-1])&&(s[x][y-1]=='0'))
    {
        dfs1(x,y-1);
    }
    if(x<n-1&&(!visited1[x+1][y])&&(s[x+1][y]=='0'))
    {
        dfs1(x+1,y);
    }
    if(y<n-1&&(!visited1[x][y+1])&&(s[x][y+1]=='0'))
    {
        dfs1(x,y+1);
    }
}
int32_t main()
{
    IOS;
    int r1,c1,r2,c2;
    cin>>n;
    cin>>r1>>c1>>r2>>c2;
    r1--;c1--;c2--;r2--;
    for(int i=0;i<n;i++)
        cin>>s[i];
    dfs(r1,c1);
    if(visited[r2][c2])
        cout<<0<<endl;
    else
    {
        dfs1(r2,c2);
        int ans=(r1-r2)*(r1-r2);int d;
        ans=ans+(c1-c2)*(c1-c2);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(visited[i][j])
                {
                    for(int i1=0;i1<n;i1++)
                    {
                        for(int j1=0;j1<n;j1++)
                        {
                            if(visited1[i1][j1])
                            {
                                d=(i-i1)*(i-i1);
                                d=d+(j-j1)*(j-j1);
                                ans=min(ans,d);
                            }
                        }
                    }
                }
            }
        }
        cout<<ans<<endl;
    }
    return 0;
}
