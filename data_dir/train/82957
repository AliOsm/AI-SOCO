
#pragma GCC optimize("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")


#include <bits/stdc++.h>
#include <ext/rope>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>


using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;


#define int long long
#define add push_back
#define rem pop_back
#define F first
#define S second

#define ALL(x) x.begin(), x.end()
#define SORT(x) sort(ALL(x))
#define REV(x) reverse(ALL(x))
#define DEBUG(x) cout << #x << " " << x << endl;

#define forn(i, a, b) for(int i = a; i <= b; i++)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))


template<typename T1, typename T2> auto max ( T1 a, T2 b ) { auto max = a > b ? a : b; return max; }
template<typename T1, typename T2> auto min ( T1 a, T2 b ) { auto min = a < b ? a : b; return min; }

template<typename T1, typename T2> void updmax ( T1 &a, T2 b ) { a = a > b ? a : b; }
template<typename T1, typename T2> void updmin ( T1 &a, T2 b ) { a = a < b ? a : b; }

namespace number {

	int mod = ( int ) 1e9 + 7;

	inline int add( int a, int b ) {
		return norm( a + b );
	}

	inline int sub( int a, int b ) {
		return norm( a - b );
	}

	inline int mul( int a, int b, int m = mod ) {
		return ( a * b ) % m;
	}

	inline int norm( int a ) {
		while( a < 0 ) a += mod;
		while( a >= mod ) a -= mod;
		return a;
	}


	int pow_mod( int a, int n, int m = mod ) {
		int res = 1;
		while( n ) {
			if( n & 1 ) res = mul( res, a, m );
			a = mul( a, a, m );
			n >>= 1;
		}
		return res;
	}

	int mul_mod( int a, int b, int m = mod ) {
		int res = 0;
		while( b ) {
			if( b & 1 ) res = ( res + a ) % m;
			a = ( a + a ) % m;
			b >>= 1;
		}
		return res;
	}

	inline int inv( int a ) {
		return pow_mod( a, mod - 2 );
	}

	inline int div_mod( int a, int b ) {
		return mul( a, inv( b ) );
	}

	bool is_prime( long long n ) {
		long long d = n - 1;
		int s = 0;
		while( d % 2 == 0 ) {
			s++;
			d >>= 1;
		}
		int a[9] = { 2, 3, 5, 7, 11, 13, 17, 19, 23 };
		for( int i = 0; i < 9; i++ ) {
			bool comp = ( pow_mod( a[i], d, n ) != 1 );
			if( comp )
				for( int j = 0; j < s; j++ ) {
					long long fp = pow_mod( a[i], ( 1ll << j ) * d, n );
					if( fp == n - 1 ) {
						comp = false;
						break;
					}
				}
			if( comp ) return false;
		}
		return true;
	}

	bool miller_rabin( int m ) {
		int s = 0, d = m - 1;
		while( d % 2 == 0 ) {
			s++, d /= 2;
		}
		int a = 1 + rand() % ( m - 1 );
		int x = pow_mod( a, d, m );
		if( x == 1 ) {
			return true;
		}
		for( int r = 0; r < s; r++ ) {
			if( x == m - 1 ) return true;
			x = x * x % m;
		}
		return false;
	}

	long long pollard_rho( long long n, int it = 50000 ) {
		long long b0 = ( 1ll * rand() * rand() ) % n, b1 = b0, g;
		b1 = mul_mod( b1, b1, n );
		if( ++b1 == n )
			b1 = 0;
		g = gcd( abs( b1 - b0 ), n );
		for( int count = 0; count < it && ( g == 1 || g == n ); count++ ) {
			b0 = mul_mod( b0, b0, n );
			if( ++b0 == n )
				b0 = 0;
			b1 = mul_mod( b1, b1, n );
			++b1;
			b1 = mul_mod( b1, b1, n );
			if( ++b1 == n )
				b1 = 0;
			g = gcd( abs( b1 - b0 ), n );
		}
		return g;
	}

	int gcdex( int a, int b, int & x, int & y ) {
		if( a == 0 ) {
			x = 0;
			y = 1;
			return b;
		}
		int x1, y1;
		int d = gcdex( b % a, a, x1, y1 );
		x = y1 - ( b / a ) * x1;
		y = x1;
		return d;
	}
}


int px[] = { 1, -1, 0, 0 };
int py[] = { 0, 0, -1, 1 };
int dx[] = { 1, 0, -1, 0, 1, 1, -1, -1 };
int dy[] = { 0, 1, 0, -1, 1, -1, 1, -1 };


const double EPS = 1e-9;
const double PI = acos ( -1. );
const int mod = ( int ) 1e9 + 7;
long long inf = __INT64_MAX__;


tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> tr;


static const int MAXN = ( int ) 5e5 + 10;
static int a[MAXN], b[MAXN];


int n, m, k;
int res, ans, cnt;
string s, t;



void solution()
{
	getline( cin, s );
	int suff = 0;
	for( int i = 0; i < s.size(); i++ )
		if( s[i] == s[i + 1] && s[i] == 'v' )
			suff++;
	int pref = 0;
	for( int i = 0; i < s.size(); i++ ){
		if( s[i] == 'o' ){
			ans += pref * suff;
		} else {
			if( s[i + 1] == 'v' )
				pref++, suff--;
		}
	}
	cout << ans << endl;



}


int32_t main ( )
{

        //freopen("input.txt", "r", stdin);
        //freopen("output.txt", "w", stdout);

        ios_base::sync_with_stdio ( false ); cin.tie ( nullptr ); cout.tie ( nullptr );
        //cout.precision(15);

        int query = 1;
        // cin >> query;

        while ( query-- ) solution();

        return 0;

}
