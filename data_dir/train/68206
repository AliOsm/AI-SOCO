/*input
5
2 2 3 4 6


*/

#include <iostream>
#include <iomanip>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll , ll> PLL;
typedef long double ld;

#define pb push_back
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
#define mod 1000000007
#define PI 3.14159265
#define endl '\n'
#define F first
#define S second
#define debug(x) cout << #x << " = " << x << endl;
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cout << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

#define out(container) cout << #container << " = "; for (auto it : container) cout << it << " "; cout << endl;


template < typename T > T GCD(T a, T b)            { ll t; while(a) { t = a; a = b % a; b = t; } return b; }
template < typename T > string toString(T a)       { return to_string(a); }
template < typename T > void toInt(string s, T &x) { stringstream str(s); str >> x;}
inline ll add(ll x, ll y){ x = x % mod + y % mod + mod; if(x >= mod) x -= mod; return x;}
inline ll sub(ll x, ll y){ x = x % mod - y % mod; if(x < 0) x += mod; return x;}
inline ll mul(ll x, ll y){ return (x % mod * 1ll * y % mod) % mod;}
inline int powr(int a, ll b){
    int x = 1 % mod;
    while(b){
        if(b & 1) x = mul(x, a);
        a = mul(a, a);
        b >>= 1;
    }
    return x;
}
inline int inv(int a){ return powr(a, mod - 2);}


int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  cin >> n;
  int v;
  vector <int> vec;
  int one = 0;
  for (int i = 0; i < n; i++) {
    cin >> v;
    vec.pb(v);
    one += (v == 1);
  }
  if (one) {
    cout << n - one << endl;
    return 0;
  }
  int ans = 20001;
  for (int i = 0; i < n - 1; i++) {
    int p1 = i;
    int p2 = i + 1;
    int g = __gcd(vec[p1], vec[p2]);
    if (g == 1) {
      ans = min(ans, n);
      continue;
    }
    int ans1 = -1, ans2 = -1;
    int cur = g;
    for (int j = p1 - 1; j >= 0; j--) {
      g = __gcd(vec[j], cur);
      if (g == 1) {
        ans1 = i - j + 1;
        break;
      }
      else {
        cur = g;
      }
    }
    cur = __gcd(vec[p1], vec[p2]);
    for (int j = p2 + 1; j < n; j++) {
      g = __gcd(vec[j], cur);
      if (g == 1) {
        ans2 = j - i + 1;
        break;
      }
      else {
        cur = g;
      }
    }
    if (ans1 != -1) {
      ans = min(ans, n + ans1 - 1);
    }
    if (ans2 != -1) {
      ans = min(ans, n + ans2 - 1);
    }
  }
  if (ans == 20001) ans = -1;
  cout << ans << endl;

  return 0;
}