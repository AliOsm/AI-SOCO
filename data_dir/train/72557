#include "bits/stdc++.h"
//#include "ext/pb_ds/tree_policy.hpp"
//#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
#define EX0 exit(0);
#define twop(x) (1LL<<x)

typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}


ll n;
string s[1000];
ll ext[2];
ll sum = 0;
ll val[1000];
int main(){
    string f;
    int cnt = 1;
    cin>>f;
    while(1){
        cin>>f;
        if(f == "="){
            cin>>n;
            break;
        }else{
            s[cnt++] = f;
            cin>>f;
        }
    }
    ext[0] = 1;
    ext[1] = n;
    s[0] = "+";
    REP(i,1,cnt){
        if(s[i]=="-"){
            ext[0]-=n;
            ext[1]-=1;
        }else{
            ext[0]+=1;
            ext[1]+=n;
        }
    }
    if(n<ext[0]||n>ext[1]){
        cout<<"Impossible",EX0;
    }
    REP(i,0,cnt){
        val[i] = 1;
        if(s[i]=="+")sum++;
        else sum--;
    }
    REP(i,0,cnt){
        if(sum>n){
            if(s[i] == "-"){
                auto adjust = min(sum-n,n-val[i]);
                sum-=adjust;
                val[i]+=adjust;
            }
        }
        if(sum<n){
            if(s[i] == "+"){
                auto adjust = min(n-sum,n-val[i]);
                sum+=adjust;
                val[i]+=adjust;
            }
        }
    }
    cout<<"Possible"<<endl;
    cout<<val[0];
    REP(i,1,cnt){
        cout<<" "<<s[i]<<' '<<val[i];
    }
    cout<<" = "<<n;
    return 0;
}
