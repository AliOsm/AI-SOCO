//#define ONLINE_JUDGE

#if defined(ONLINE_JUDGE)
#define _SECURE_SCL 0
#endif

#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <functional>
#include <cmath>
#include <climits>
#include <numeric>
#include <tuple>
#include <memory.h>

#if !defined(__GNUC__)
typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef signed short int16_t;
typedef unsigned short uint16_t;
typedef signed long int32_t;
typedef unsigned long uint32_t;
typedef signed long long int64_t;
typedef unsigned long long uint64_t;
#else // !defined(__GNUC__)
#define _CrtDbgBreak()
#endif // !defined(__GNUC__)

#if defined(ONLINE_JUDGE)
#define LOCAL_TEST 0
#else 
#define LOCAL_TEST 1
#endif

#if LOCAL_TEST
#define LOCAL_ASSERT(expr) { if (!(expr)) {std::cout << "ASSERT FAILED: '" << #expr << "'" << std::endl; _CrtDbgBreak(); } }
#else
#define LOCAL_ASSERT(expr)
#endif

typedef long double double_t;
typedef std::string string8_t;

typedef std::vector<size_t> vector_size_t;
typedef std::vector<int32_t> vector_int32_t;
typedef std::vector<uint32_t> vector_uint32_t;
typedef std::vector<int64_t> vector_int64_t;
typedef std::vector<uint64_t> vector_uint64_t;

typedef std::vector<vector_size_t> vector_2d_size_t;
typedef std::vector<string8_t> vector_string8_t;

typedef std::set<size_t> set_size_t;
typedef std::set<int32_t> set_int32_t;
typedef std::set<uint32_t> set_uint32_t;
typedef std::set<int64_t> set_int64_t;
typedef std::set<uint64_t> set_uint64_t;

typedef std::set<string8_t> set_string8_t;
typedef std::multiset<string8_t> multiset_string8_t;

// Auxiliary functions definition
// 
template<typename T> inline T Abs(const T a) { return a < 0 ? -a : a; }
template<typename T> inline T Min(const T a, const T b) {return a < b ? a : b;}
template<typename T> inline T Max(const T a, const T b) {return a > b ? a : b;}
template<typename T> inline void UpdateMin(T& a, const T b) {a = Min(a, b);}
template<typename T> inline void UpdateMax(T& a, const T b) {a = Max(a, b);}

static const double_t eps = 1.0e-09;
template<typename T> inline bool IsEqual(const T a, const T b) { return Abs(a - b) < eps; }
template<typename T> inline bool IsGreater(const T a, const T b) { return a > b + eps; }
template<typename T> inline bool IsLess(const T a, const T b) { return a + eps < b; }

template<typename T> inline string8_t ToStr(const T& val) { std::ostringstream ostr; ostr << val; return ostr.str(); }
template<typename T> inline bool FromStr(const string8_t& str, T& val) {std::istringstream istr(str); istr >> val; return !!istr; }

#if defined(ONLINE_JUDGE)
template<size_t id> class StopWatch { };
#else
#include <library/lib_stopwatch.h>
#include <library/lib_random.h>
library::random::Rand g_rnd;
#endif

void Go(const vector_2d_size_t& links, const vector_size_t& init, const vector_size_t& goal, size_t level, vector_size_t isLevelChoosed, const size_t curr, vector_size_t& wasVisited, vector_size_t& choice)
{
    LOCAL_ASSERT(!wasVisited[curr]);
    wasVisited[curr] = 1;

    const size_t realColor = init[curr] ^ isLevelChoosed[level & 1];
    if (realColor != goal[curr])
    {
        isLevelChoosed[level & 1] ^= 1;
        choice.push_back(curr);
    }
    
    for (size_t i = 0; i < links[curr].size(); i++)
    {
        const size_t next = links[curr][i];
        if (!wasVisited[next])
        {
            Go(links, init, goal, level + 1, isLevelChoosed, next, wasVisited, choice);
        }
    }
}

bool Solve(std::istream& ist, std::ostream& ost, const bool multipleTestMode)
{
    StopWatch<1> sw; sw;

    // 
    size_t n;
    ist >> n;

    if (multipleTestMode && !ist)
        return false;

    // 
    vector_2d_size_t links(n);
    for (size_t i = 1; i < n; i++)
    {
        size_t u, v;
        ist >> u >> v;
        --u; --v;

        links[u].push_back(v);
        links[v].push_back(u);
    }

    vector_size_t init(n);
    for (size_t i = 0; i < n; i++)
    {
        ist >> init[i];
    }

    vector_size_t goal(n);
    for (size_t i = 0; i < n; i++)
    {
        ist >> goal[i];
    }

    vector_size_t wasVisited(n);
    vector_size_t isLevelChoosed(2);

    size_t level = 0;
    vector_size_t choice;
    Go(links, init, goal, level, vector_size_t(2), 0, wasVisited, choice);

    ost << choice.size() << std::endl;
    for (size_t i = 0; i < choice.size(); i++)
    {
        ost << (choice[i] + 1) << std::endl;
    }

    return multipleTestMode;
}

int main()
{
    std::ios_base::sync_with_stdio(false);
    std::istream& ist = std::cin;
    std::ostream& ost = std::cout;
#if defined(ONLINE_JUDGE)
    Solve(ist, ost, false);
#else
    while(Solve(ist, ost, true)) {};
#endif
}
