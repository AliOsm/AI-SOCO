#include <string>
#include <iostream>
#include <vector>
#include <map>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <numeric>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)
typedef long long ll;

const int MAXN=101;
const int INF=1000000000;

int to[MAXN][MAXN];
int res[MAXN][MAXN];
int tmp[MAXN][MAXN];
int a[MAXN];
int dp[MAXN][MAXN];

int cnt=0;

void mul(int A[MAXN][MAXN], int B[MAXN][MAXN], int res[MAXN][MAXN])
{
	REP(i,cnt) REP(j,cnt)
	{
		res[i][j]=-INF;
		REP(k,cnt)
			res[i][j]=max(res[i][j], A[i][k]+B[k][j]);
	}
}

void qpow(int p)
{
	REP(i,cnt) REP(j,cnt)
		res[i][j]=0;
	while(p)
	{
		if(p&1)
		{
			mul(res,to, tmp);
			REP(i,cnt) REP(j,cnt)
				res[i][j]=tmp[i][j];
		}
		mul(to,to,tmp);
		REP(i,cnt) REP(j,cnt)
			to[i][j]=tmp[i][j];
		p>>=1;
	}
}


int main()
{
//	freopen("/home/knightl/input","r",stdin);
	int n, t;
	scanf("%d%d",&n,&t);
	map<int,int> shrink;
	REP(i,n)
	{
		scanf("%d",&a[i]);
		shrink[a[i]];
//		a[i]--;
	}

	for(map<int,int>::iterator it=shrink.begin(); it!=shrink.end() ;it++)
		it->second=cnt++;
	REP(i,n)
		a[i]=shrink[a[i]];
	REP(i,cnt)
	{
		REP(j,cnt) REP(k,n)
			dp[k][j]=-INF;
		for(int j=i;j<cnt;j++)
			dp[0][j]=0;
		REP(k,n)
		{
			REP(j,cnt)
				dp[k+1][j]=dp[k][j];
			for(int j=0;j<=a[k];j++)
				dp[k+1][a[k]]=max(dp[k+1][a[k]],dp[k][j]+1);
		}
		for(int j=0;j<i;j++)
			to[i][j]=-INF;
		for(int j=i;j<cnt;j++)
			to[i][j]=dp[n][j];
	}
	qpow(t);
	int result=0;
	REP(i,cnt) REP(j,cnt)
		result=max(result, res[i][j]);
	printf("%d\n",result);
	return 0;
}
