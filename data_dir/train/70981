#pragma comment(linker, "/stack:100000000")

#include <cstdio>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <cstring>
#include <string>
#include <cmath>
#include <ctime>
#include <cassert>
#include <queue>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define sz(v) (int)(v).size()
#define all(v) (v).begin(), (v).end()

const int N = 3 * (int)1e5 + 10;

struct Query {
	int a, b, id;

	bool operator < (const Query& q) {
		return b < q.b;
	}
};

int a[N];
Query Q[N];
long long dp[N], res[N];

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int n;
	scanf("%d", &n);
	REP(i, n) scanf("%d", &a[i]);
	int q;
	scanf("%d", &q);
	REP(i, q) scanf("%d %d", &Q[i].a, &Q[i].b), Q[i].a--, Q[i].id = i;
	sort(Q, Q + q);
	int C = sqrt((double)n);
	REP(i, q) {
		int B = Q[i].b;
		if (Q[i].b < C) {
			if (i == 0 || B != Q[i - 1].b) {
				for (int j = n - 1; j >= 0; j--) {
					dp[j] = a[j];
					if (j + B < n) dp[j] += dp[j + B];
				}
			}
			res[Q[i].id] = dp[Q[i].a];
		} else {
			long long ans = 0;
			for (int j = Q[i].a; j < n; j += B) {
				ans += a[j];
			}
			res[Q[i].id] = ans;
		}
	}
	REP(i, q) printf("%I64d\n", res[i]);
	return 0;
}