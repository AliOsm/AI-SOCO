#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

#define ll long long int
#define pb push_back
#define mp make_pair
#define ld long double
#define sz(a) (ll)(a).size()
#define endl "\n"

typedef tree<pair<ll,ll> ,null_type,less<pair<ll,ll> >,rb_tree_tag,tree_order_statistics_node_update> ordered_set;
//K-th smallest
//cout << k << "kth smallest: " << *A.find_by_order(k-1) << endl;
//NO OF ELEMENTS < X
//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

map<ll,pair<ll,ll>>tt;
ll a, b;

ll func(ll t, ll x1, ll x2)
{
	ll res = 0;
	if(x1 * a < t)
	{
		res += x1;
		t -= (x1 * a);
	}
	else
	{
		res += t / a;
		t = 0;
	}
	if(x2 * b < t)
	{
		res += x2;
		t -= (x2 * b);
	}
	else
	{
		res += t / b;
		t = 0;
	}
	return res;
}

int main()
{
	std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

 	ll t;
 	cin >> t;
 	while(t--)
 	{
 		tt.clear();
 		ll n, x, ta = 0, tb = 0, ans = 0;
 		cin >> n >> x >> a >> b;
 		ll diff[n];
 		set<ll>s;
 		s.insert(0);
 		for(int i=0;i<n;i++)
 		{
 			cin >> diff[i];
 			if(diff[i] == 0) ta += 1;
 			else tb += 1;
 		}
 		for(int i=0;i<n;i++)
 		{
 			ll z;
 			cin >> z;
 			if(diff[i] == 0) tt[z].first += 1;
 			else tt[z].second += 1;
 			s.insert(z);
 		}
 		s.insert(x + 1);
 		pair<ll,ll>curr = {0, 0};
 		vector<ll>v;
 		for(auto it : s) v.pb(it);
 		for(int i=0;i<sz(v) - 1;i++)
 		{
 			curr.first += tt[v[i]].first;
 			curr.second += tt[v[i]].second;
 			ll tot = a * curr.first + b * curr.second;
 			if(tot >= v[i + 1]) continue;
 			ans = max(ans, curr.first + curr.second + func(v[i + 1] - tot - 1, ta - curr.first, tb - curr.second));
 		} 
 		cout << ans << endl;
 	}   
    return 0;
}