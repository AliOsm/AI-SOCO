#include <bits/stdc++.h>
#define fr first
#define sc second
#define pii pair<int,int>
using namespace std;

const int N = 5e6 + 10;
int OO = 1e9 + 10;
int ch[N][15];
bool en[N];
int has[N];
int get(int val,int mn,int mx){
    int cnt = 0;
    for(int i=mn;i<mx;i++){
        if(val&(1<<i))cnt++;
    }
    return cnt;
}
int tot;
void push(const vector<int> &v,const int &val,int id = 0,int node=1) {
    if (id == v.size()) {
        en[node] = 1;
        has[node] = val;
        return;
    }
    int to = v[id];
    if (ch[node][to] == 0) {
        ch[node][to] = ++tot;
    }
    push(v, val, id + 1, ch[node][to]);
}
int main() {
#ifdef LOCAL
    freopen("in.in", "r", stdin);
#endif
    map<vector<int>, int> has;
    int n;
    cin >> n;
    vector<int> a(n);
    for (int &v:a) {
        cin >> v;
    }
    for (int x = 0; x < 1 << 15; x++) {
        vector<int> cur(n);
        int c0 = get(a[0] ^ x, 0, 15);
        for (int i = 0; i < n; i++) {
            cur[i] = c0 - get(a[i] ^ x, 0, 15);
        }
        if (!has.count(cur))has[cur] = x;
    }
    for (int w = 0; w < 1 << 15; w++) {
        int x = w << 15;
        vector<int> cur(n);
        int c0 = get(a[0] ^ x, 15, 30);
        for (int i = 0; i < n; i++) {
            cur[i] = get(a[i] ^ x, 15, 30) - c0;
        }
        if (has.count(cur)) {
            cout << (has[cur] | x) << endl;
            return 0;
        }
    }
    cout << -1;
}