#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> PI;
const int mod=1000000007;
const int dx[2][2]={{-1,0},{1,0}};
const int dy[2][2]={{0,-1},{0,1}};
int n,m,max_step;
int dp[2][510][510];
char grid[510][510];
inline bool check(int row,int col){
	return 1<=row && row<=n && 1<=col && col<=m;
}
int calc_dp(int step,int col,int col2){
	if(dp[step&1][col][col2]!=-1) return dp[step&1][col][col2];
	if(step==max_step) return 0;
	int& res=dp[step&1][col][col2];
	res=0;
	int n_m_1,n_m_2;
	if((n+m-1)&1){
		n_m_1=(n+m)/2-step;
		n_m_2=(n+m)/2+step;
	}else{
		n_m_1=(n+m-1)/2-step;
		n_m_2=(n+m-1)/2+1+step;
	}
	int row=n_m_1-col+1,row2=n_m_2-col2+1;
	for(int a=0;a<2;a++){
		for(int b=0;b<2;b++){
			int next_row=row+dx[0][a],next_row2=row2+dx[1][b];
			int next_col=col+dy[0][a],next_col2=col2+dy[1][b];
			if(check(next_row,next_col) && check(next_row2,next_col2) && grid[next_row][next_col]==grid[next_row2][next_col2]){
				res=(res+calc_dp(step+1,next_col,next_col2))%mod;
			}
		}
	}
	return res;
}
int main(){
	memset(dp,0,sizeof dp);
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
		scanf("%s",grid[i]+1);
	int ans=0;
	int n_m_1,n_m_2;
	if((n+m-1)&1){
		int init_n_m=(n+m)/2;
		max_step=(n+m)/2-1;
		dp[((n+m)/2-1)&1][1][m]=1;
		for(int step=max_step-1;step>0;step--){
			n_m_1=(n+m)/2-step;
			n_m_2=(n+m)/2+step;
			memset(dp[step&1],-1,sizeof dp[step&1]);
			for(int col=1;col<=m;col++){
				for(int col2=1;col2<=m;col2++){
					int row=n_m_1-col+1,row2=n_m_2-col2+1;
					if(col<=col2 && grid[row][col]==grid[row2][col2]){
						calc_dp(step,col,col2);
					}else
						dp[step&1][col][col2]=0;
				}
			}
		}
		memset(dp[0],-1,sizeof dp[0]);
		for(int col=1;col<=m;col++){
			int row=init_n_m-col+1;
			if(check(row,col))
				ans=(ans+calc_dp(0,col,col))%mod;
		}
	}else{
		int init_n_m=(n+m-1)/2;
		max_step=(n+m-1)/2-1;
		dp[((n+m-1)/2-1)&1][1][m]=1;
		for(int step=max_step-1;step>0;step--){
			n_m_1=(n+m-1)/2-step;
			n_m_2=(n+m-1)/2+1+step;
			memset(dp[step&1],-1,sizeof dp[step&1]);
			for(int col=1;col<=m;col++){
				for(int col2=col;col2<=m;col2++){
					int row=n_m_1-col+1,row2=n_m_2-col2+1;
					if(check(row,col) && check(row2,col2) && grid[row][col]==grid[row2][col2]){
						calc_dp(step,col,col2);
					}
				}
			}
		}
		memset(dp[0],-1,sizeof dp[0]);
		for(int col=1;col<=m;col++){
			int row=init_n_m-col+1;
			if(check(row,col)){
				for(int a=0;a<2;a++){
					int row2=row+dx[1][a],col2=col+dy[1][a];
					if(check(row2,col2) && grid[row][col]==grid[row2][col2])
						ans=(ans+calc_dp(0,col,col2))%mod;
				}
			}
		}
	}
	printf("%d\n",ans);
	return 0;
}