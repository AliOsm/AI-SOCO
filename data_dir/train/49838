// in the name of god
#include <bits/stdc++.h> 
using namespace std ; 
#define X first  
#define Y second 
#define y1 asdfg
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0) 
#define int long long 
//#define cout cout << setprecision ( 12 )  
typedef long double ld; 
typedef pair < int , int > pii ;
typedef pair < ld , ld > point ; 
typedef pair < pii , int > piii ;
const int maxn = 1e5 + 1 ; 
const int inf = 1e6 ;
const ld pi = 3.1415926535897932384626433832795 ;
int left(int x){return 2*x;} 
int right(int x){return 2*x+1;}
bool cmp ( piii p1 , piii p2 ){return p1 . X . Y < p2 . X . Y ;} 
int n , q , a , b , c , type , ar [ maxn ] ;
int data0 [ 4 * maxn ] ;
pii data1 [ 4 * maxn ] ;

pii merge ( pii p1 , pii p2 ) 
{ 
  if ( p1 . Y > p2 . Y ) 
    return p1 ;
  return p2 ;
}

void add ( int p , int val , int st = 0 , int en = n , int id = 1 ) 
{ 
  if ( en - st < 2 ) 
    {  
      if ( val < 0 ) 
	data0 [ id ] %= (-val) ;
      else
	data0 [ id ] = val ;
      data1 [ id ] = pii ( p , data0 [ id ] ) ;
      return ;
    } 
  int mid = ( st + en ) / 2 ; 
  if ( p < mid )
    add ( p , val , st , mid , left ( id ) ) ; 
  else
    add ( p , val , mid , en , right ( id ) ) ;
  data0 [ id ] = data0 [ left ( id ) ] + data0 [ right ( id ) ] ;
  data1 [ id ] = merge ( data1 [ left ( id ) ] , data1 [ right ( id ) ] ) ;
} 

int get ( int l , int r , int st = 0 , int en = n , int id = 1 ) 
{ 
  if ( r <= st || en <= l ) 
    return 0 ; 
  if ( l <= st && en <= r ) 
    return data0 [ id ] ; 
  int mid = ( st + en ) / 2 ; 
  return get ( l , r , st , mid , left ( id ) ) + 
    get ( l , r , mid , en , right ( id ) ) ;
}

void modify ( int l , int r , int val , int st = 0 , int en = n , int id = 1 ) 
{
  if ( r <= st || en <= l ) 
    return  ; 
  if ( l <= st && en <= r ) 
    { 
      while ( data1 [ id ] . Y >= val ) 
	add ( data1 [ id ] . X , -val ) ;
      return ;
    } 
  int mid = ( st + en ) / 2 ;
  modify ( l , r , val , st , mid , left ( id ) ) ;
  modify ( l , r , val , mid , en , right ( id ) ) ;
}

void build ( int st = 0 , int en = n , int id = 1 ) 
{  
  if ( en - st < 2 ) 
    {  
      data0 [ id ] = ar [ st ] ; 
      data1 [ id ] = pii ( st , ar [ st ] ) ;
      return ;
    } 
  int mid = ( st + en ) / 2 ; 
  build ( st , mid , left ( id ) ) ; 
  build ( mid , en , right ( id ) ) ;
  data0 [ id ] = data0 [ left ( id ) ] + data0 [ right ( id ) ] ;
  data1 [ id ] = merge ( data1 [ left ( id ) ] , data1 [ right ( id ) ] ) ;
} 

main ( ) 
{  
  fast ;
  cin >> n >> q ;
  for ( int i = 0 ; i < n ; i ++ )
    cin >> ar [ i ] ;
  build ( ) ;
  for ( int i = 0 ; i < q ; i ++ ) 
    { 
      cin >> type ; 
      if ( type == 3 ) 
	{ 
	  cin >> a >> b ; 
	  a -- ;
	  add ( a , b ) ;
	} 
      else if ( type == 1 ) 
	{ 
	  cin >> a >> b ;
	  a -- ;
	  cout << get ( a , b ) << endl ; 
	} 
      else if ( type == 2 ) 
	{ 
	  cin >> a >> b >> c ;
	  a -- ;
	  modify ( a , b , c ) ;
	}

    } 
} 
