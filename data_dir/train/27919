#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 5;
const int inf = 1e9 + 5;

map<pair<string, int>, int> idByName;
pair<string, int> nameById[N];

int cntOfVertices = 0;

void add(const string& name, int version) {
    if (idByName.find(make_pair(name, version)) == idByName.end()) {
        cntOfVertices += 1;
        idByName[make_pair(name, version)] = cntOfVertices;
        nameById[cntOfVertices] = make_pair(name, version);
    }
}

vector<int> g[N];
map<string, int> projects;
int d[N];

bool isRemoved[N];

int main() {
    //freopen("input.txt", "r", stdin);
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        string name;
        int version;
        cin >> name >> version;
        add(name, version);
        size_t k;
        cin >> k;
        int v = idByName[make_pair(name, version)];
        for (size_t j = 1; j <= k; ++j) {
            string cName;
            int cVersion;
            cin >> cName >> cVersion;
            add(cName, cVersion);
            int u = idByName[make_pair(cName, cVersion)];
            g[v].push_back(u);
        }
    }
    queue<int> q;
    q.push(1);
    d[1] = 0;
    for (int i = 2; i <= cntOfVertices; ++i) {
        d[i] = inf;
    }
    while(!q.empty()) {
        int v = q.front();
        q.pop();
        if (isRemoved[v]) {
            continue;
        }
        for (size_t j = 0; j < g[v].size(); ++j) {
            int u = g[v][j];
            if (d[u] == inf) {
                d[u] = d[v] + 1;
                string name = nameById[u].first;
                if (name == nameById[1].first) {
                    continue;
                }
                int version = nameById[u].second;
                if (projects.find(name) == projects.end()) {
                    projects[name] = version;
                    q.push(u);
                } else {
                    int cVersion = projects[name];
                    int w = idByName[make_pair(name, cVersion)];
                    if (d[u] < d[w] || (d[u] == d[w] && version > cVersion)) {
                        isRemoved[w] = true;
                        projects[name] = version;
                        q.push(u);
                    }
                }
            }
        }
    }
    cout << projects.size() << "\n";
    for (auto it = projects.begin(); it != projects.end(); ++it) {
        cout << (it->first) << " " << (it->second) << "\n";
    }

    return 0;
}
