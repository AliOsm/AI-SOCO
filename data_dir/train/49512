#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
#define re return
#define ll long long
#define ull unsigned ll
#define ld long double
#define s second
#define f first
#define S second
#define F first
#define pi acosl(-1)
#define oo (int)1e9
#define OO 1e18
#define EPS 1e-9
#define Endl '\n'
#define all(v) (v).begin(),(v).end()
#define FX(n) fixed<<setprecision(n)
#define mm(o,k) memset(o,k,sizeof o)
#define IO ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
using namespace std;
const int N = 2e5 + 5, M = 2 * N + 5;

struct rect{
    ll x1, x2, y1, y2;
    rect(ll x1, ll x2, ll y1, ll y2):x1(x1), y1(y1), x2(x2), y2(y2){}
};

ll area(rect r){
    re (abs(r.x2 - r.x1) * abs(r.y2 - r.y1));
}

ll inter(rect r1, rect r2){
    // re (min(r1.x1, r1.x2) - max(r2.x1, r2.x2)) * (min(r1.y1, r1.y2) - max(r2.y1, r2.y2));
    ll leftX   = max( r1.x1, r2.x1 );
    ll rightX  = min( r1.x2, r2.x2 );
    ll topY    = max( r1.y1, r2.y1 );
    ll bottomY = min( r1.y2, r2.y2 );
    if (leftX < rightX && topY < bottomY){
        // cout << leftX << " " << rightX << " " << topY << " " << bottomY << endl;
        re abs(rightX - leftX) * abs(bottomY - topY);
    }
    // cout << "HERE !!" << endl;
    re 0;
}

ll inter23(rect r3, rect r1, rect r2){
    ll leftX   = max( r1.x1, r2.x1 );
    ll rightX  = min( r1.x2, r2.x2 );
    ll topY    = max( r1.y1, r2.y1 );
    ll bottomY = min( r1.y2, r2.y2 );
    
    // cout << leftX << " " << rightX << " " << topY << " " << bottomY << endl;
    
    rect r(min(leftX, rightX), max(leftX, rightX), min(topY, bottomY), max(topY, bottomY));
    
    // cout << r.x1 << " " << r.y1 << " " << r.x2 << " " << r.y2 << endl;
    
    re inter(r, r3);
}

int main()
{
    ll x1, x2, y1, y2;
    scanf("%lld%lld%lld%lld", &x1, &y1, &x2, &y2);
    rect r1(x1, x2, y1, y2);

    scanf("%lld%lld%lld%lld", &x1, &y1, &x2, &y2);
    rect r2(x1, x2, y1, y2);

    scanf("%lld%lld%lld%lld", &x1, &y1, &x2, &y2);
    rect r3(x1, x2, y1, y2);

    // cout << area(r1) << " " << inter(r1, r2) << " " << inter(r1, r3) << " " << inter23(r1, r2, r3) << endl;

    // cout << area(r1) - inter(r1, r2) - inter(r1, r3) + inter23(r1, r2, r3) << endl;

    puts(area(r1) - inter(r1, r2) - inter(r1, r3) + inter23(r1, r2, r3) > 0 ? "YES" : "NO");
    re 0;
}