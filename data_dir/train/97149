#include <bits/stdc++.h>

using namespace std;

int n, m, bi;
vector<int> v[1005], vvv;
vector<pair<int, int>> vv;
bool u[1005];
int ta, tb, tc;

void dfs1(int a, int b, int c) {
	u[a] = 1;
	if (c > bi) {
		bi = c;
		tb = a;
	}
	c++;
	for (int i : v[a])
		if (i != b)
			dfs1(i, a, c);
}

bool dfs2(int a, int b, int c) {
	u[a] = 1;
	if (c == bi) {
		if (c == bi / 2)
			tc = a;
		return 1;
	}
	for (int i : v[a])
		if (i != b && dfs2(i, a, c + 1)) {
			if (c == bi / 2)
				tc = a;
			return 1;
		}
	return 0;
}

int main() {
	scanf("%d%d", &n, &m);
	while (m--) {
		scanf("%d%d", &ta, &tb);
		v[ta].push_back(tb);
		v[tb].push_back(ta);
	}
	for (int i = 1; i <= n; i++)
		if (!u[i]) {
			bi = -1;
			dfs1(i, 0, 0);
			bi = -1;
			ta = tb;
			dfs1(ta, 0, 0);
			dfs2(ta, 0, 0);
			// printf("%d  %d %d  %d\n", bi, ta, tb, tc);
			vv.emplace_back(bi, tc);
		}
	sort(vv.begin(), vv.end());
	vvv.push_back((vv.back().first + 1) / 2);
	vvv.push_back(vv.back().first - vvv.back());
	tc = vv.back().second;
	vv.pop_back();
	for (auto& p : vv)
		vvv.push_back((p.first + 1) / 2 + 1);
	sort(vvv.begin(), vvv.end());
	printf("%d\n", vvv.back() + vvv[vvv.size() - 2]);
	for (auto& p : vv)
		printf("%d %d\n", tc, p.second);
	return 0;
}
