#include <iostream>
#include <set>
#include <vector>
using namespace std;

int n;
int a[200000];
int mod = 1000000007;

int add(int a, int b) {
	a += b;
	if (a >= mod) a -= mod;
	return a;
}

int sub(int a, int b) {
	a -= b;
	if (a < 0) a += mod;
	return a;
}

int mul(int a, int b) {
	return (1LL * a * b) % mod;
}

int fact[100001];
int invFact[100001];

int binpow(int x, int n) {
	if (n == 0) return 1;
	else if (n & 1) return mul(binpow(x, n - 1), x);
	else return binpow(mul(x, x), n >> 1); 
}

int inv(int x) {
	return binpow(x, mod - 2);
}

int C(int n, int k) {
	return mul(fact[n], mul(invFact[k], invFact[n - k]));
}

void normalize(vector<int>& a) {
	for (int i = 0; i < a.size(); i++) {
		a[i] %= mod;
		if (a[i] < 0) a[i] += mod;
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}
	fact[0] = 1;
	for (int i = 1; i <= 100000; i++) {
		fact[i] = mul(fact[i - 1], i);
	}
	
	invFact[0] = 1;
	for (int i = 1; i <= 100000; i++) {
		invFact[i] = mul(invFact[i - 1], inv(i));
	}
	
	
	int currN = (n - 1) / 4 * 4;
	vector<int> c1;
	for (int i = 0; i < currN; i++) {
		if (!(i & 1)) {
			c1.push_back(C(currN / 2, i / 2));
		} else {
			c1.push_back(0);
		}
	}
	c1.push_back(1);
	vector<int> c2;
	c2.push_back(1);
	for (int i = 1; i < c1.size(); i++) {
		c2.push_back(add(c1[i], c1[i - 1]));
	}
	c2.push_back(1);
	vector<int> c3;
	c3.push_back(1);
	
	for (int i = 1; i < c2.size(); i++) {
		if (i & 1) {
			c3.push_back(add(c2[i], c2[i - 1]));
		} else {
			c3.push_back(sub(c2[i], c2[i - 1]));
		}
	}
	
	c3.push_back(-1);
	vector<int> c4;
	c4.push_back(1);
	for (int i = 1; i < c3.size(); i++) {
		if (i & 1) {
			c4.push_back(sub(c3[i - 1], c3[i]));
		} else {
			c4.push_back(add(c3[i], c3[i - 1]));
		}
	}
	c4.push_back(-1);
	currN++;
	vector<int> cs;
	if (n == currN) {
		cs = c1;
	} else if (n == currN + 1) {
		cs = c2;
	} else if (n == currN + 2) {
		cs = c3;
	} else {
		cs = c4;
	}
	normalize(cs);
	int ans = 0;
	for (int i = 0; i < n; i++) {
		ans = add(ans, mul(a[i], cs[i]));
	}
	cout << ans;
	return 0;
}