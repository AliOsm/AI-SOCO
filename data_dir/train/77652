#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)((x).size())
#define pb push_back
#define T first
#define P second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
#define debug(x) cerr << #x << " : " << (x) << " "
const double PI = 3.14159265358979323846;
const double eps = (1e-10);
int isGreater(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

int n;
const int MAX_N = 2e5 + 5;
set<int> adj[MAX_N];
int dist[MAX_N], cnt[MAX_N];
void dfs(int u, int p, int d)
{
    dist[u] = d;
    for (int v : adj[u])
    {
        if (v == p)
            continue;
        dfs(v, u, d + 1);
        cnt[u] += cnt[v] + 1;
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("AC.txt", "w", stdout);
#endif
    int k;
    cin >> n >> k;
    rep(i,0,n - 1)
    {
        int u, v;
        cin >> u >> v;
        --u; --v;
        adj[u].insert(v);
        adj[v].insert(u);
    }

    dfs(0, n, 0);
    vector<int> v;
    rep(i,0,n)
        v.push_back(dist[i] - cnt[i]);
    sort(v.rbegin(), v.rend());
    ll ans = 0;
    for (int i = 0; i < k; ++i)
        ans += v[i];

    cout << ans << '\n';

    return 0;
}