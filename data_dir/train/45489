#include <bits/stdc++.h>
using namespace std;
 
typedef long long int ll;
typedef pair <ll, ll> pll;

const int Max = 2e6 + 10;
const int Mod = 1e9 + 7;
const ll Inf = 1LL << 62;

const int BLOCK_SIZE = 320;

struct Node{
        int l, r, idx;

        Node () {}

        Node (int l_, int r_, int idx_) {
                l = l_; r = r_; idx = idx_;
        }

        bool operator<(const Node& b) const{
                int block_a = l / BLOCK_SIZE;
                int block_b = b.l / BLOCK_SIZE;
                if( block_a != block_b ){
                        return block_a < block_b;
                } return r < b.r;
        }

} qr[Max];

int cnt[Max];
ll res[Max];
int ar[Max];
ll ans;

void del( int idx, int k ) {
        cnt[ar[idx]]--;
        ans -= cnt[ar[idx] ^ k];
}

void add( int idx, int k ) {
        ans += cnt[ar[idx] ^ k];
        cnt[ar[idx]]++;
}

int main() {
        #ifdef Mr_Emrul
                freopen("input.txt", "r", stdin);
                freopen("output.txt", "w", stdout);
        #endif ///Mr_Emrul
        
        //ios_base::sync_with_stdio(false);
        //cin.tie(0);

        int n, m, t, k, q, mx, mn;
        
        while( ~scanf("%d %d %d", &n, &m, &k) ) {
                for( int i=1; i<=n; i++ ) {
                        scanf("%d", &ar[i]);
                        ar[i] ^= ar[i-1];
                }
                for( int i=1; i<=m; i++ ) {
                        scanf("%d %d", &qr[i].l, &qr[i].r);
                        qr[i].idx = i;
                }
                sort( qr + 1, qr + m + 1 );
                int L = 0, R = -1;
                ans = 0;
                memset( cnt, 0, sizeof cnt );
                for( int i=1; i<=m; i++ ) {
                        int l = qr[i].l - 1;
                        int r = qr[i].r;
                        while( R < r ) {
                                R++;
                                add( R, k );
                        }
                        while( R > r ) {
                                del( R, k );
                                R--;
                        }
                        while( L < l ) {
                                del( L, k );
                                L++;
                        }
                        while( L > l ) {
                                L--;
                                add( L, k );
                        } res[qr[i].idx] = ans;
                }
                for( int i=1; i<=m; i++ ) {
                        printf("%lld\n", res[i]);
                }
                cerr << "--------------------" << endl;
        }     
        return 0;
}
