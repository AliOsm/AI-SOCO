#include <bits/stdc++.h>
using namespace std;

const int MX = 305;

string s[MX][MX];

vector<pair<pair<int, int>, pair<int, int>>> ans;
void Move(int i1, int j1, int i2, int j2)
{
	ans.emplace_back(make_pair(i1, j1), make_pair(i2, j2));
}

string needed[MX][MX];

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n, m;
	cin >> n >> m;
	
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			cin >> s[i][j];
		}
	}
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			cin >> needed[i][j];
		}
	}
	
	for (int j = 1; j <= m - 1; j++) {
		for (int t = 0; t < (int)s[1][j].size(); t++) {
			Move(1, j, 1, m);
		}
		s[1][m] = s[1][j] + s[1][m];
	}
	for (int i = 2; i <= n; i++) {
		for (int t = 0; t < (int)s[i][m].size(); t++) {
			Move(i, m, 1, m);
		}
		s[1][m] = s[i][m] + s[1][m];
	}
	
	
	for (int i = 2; i <= n; i++) {
		for (int j = 1; j <= m - 1; j++) {
			if (i == 1 && j == 1) continue;
			if (i == n && j == m) continue;
			
			for (int t = (int)s[i][j].size() - 1; t >= 0; t--) {
				char front = s[i][j][t];
				
				if (front == '0') {
					Move(i, j, 1, j);
					if (j != 1) {
						Move(1, j, 1, 1);
					}
				}
				else {
					Move(i, j, i, m);
					if (i != n) {
						Move(i, m, n, m);
					}
				}
			}
		}
	}
	
	for (int t = (int)s[1][m].size() - 1; t >= 0; t--) {
		char front = s[1][m][t];
		if (front == '0') {
			Move(1, m, 1, 1);
		}
		else {
			Move(1, m, n, m);
		}
	}
	
	
	///////////////////////////////
	
	
	for (int i = 2; i <= n - 1; i++) {
		for (int j = 2; j <= m - 1; j++) {
			for (int t = (int)needed[i][j].size() - 1; t >= 0; t--) {
				char c = needed[i][j][t];
				
				if (c == '0') {
					Move(1, 1, i, 1);
					Move(i, 1, i, j);
				}
				else {
					Move(n, m, i, m);
					Move(i, m, i, j);
				}
			}
		}
	}
	
	for (int j = 2; j <= m - 1; j++) {
		for (int t = (int)needed[1][j].size() - 1; t >= 0; t--) {
			char c = needed[1][j][t];
			
			if (c == '0') {
				Move(1, 1, 1, j);
			}
			else {
				Move(n, m, 1, m);
				Move(1, m, 1, j);
			}
		}
	}
	
	for (int j = 2; j <= m - 1; j++) {
		for (int t = (int)needed[n][j].size() - 1; t >= 0; t--) {
			char c = needed[n][j][t];
			
			if (c == '0') {
				Move(1, 1, n, 1);
				Move(n, 1, n, j);
			}
			else {
				Move(n, m, n, j);
			}
		}
	}
	
	for (int i = 2; i <= n - 1; i++) {
		for (int t = (int)needed[i][1].size() - 1; t >= 0; t--) {
			char c = needed[i][1][t];
			
			if (c == '0') {
				Move(1, 1, i, 1);
			}
			else {
				Move(n, m, n, 1);
				Move(n, 1, i, 1);
			}
		}
	}
	
	for (int i = 2; i <= n - 1; i++) {
		for (int t = (int)needed[i][m].size() - 1; t >= 0; t--) {
			char c = needed[i][m][t];
			
			if (c == '0') {
				Move(1, 1, 1, m);
				Move(1, m, i, m);
			}
			else {
				Move(n, m, i, m);
			}
		}
	}
	
	for (int t = (int)needed[n][1].size() - 1; t >= 0; t--) {
		char c = needed[n][1][t];
		
		if (c == '0') {
			Move(1, 1, n, 1);
		}
		else {
			Move(n, m, n, 1);
		}
	}
	
	for (int t = (int)needed[1][1].size() - 1; t >= 0; t--) {
		char c = needed[1][1][t];
		
		if (c == '0') {
			Move(1, 1, 1, m);
		}
		else {
			Move(n, m, 1, m);
		}
	}
	
	
	for (int t = (int)needed[n][m].size() - 1; t >= 0; t--) {
		char c = needed[n][m][t];
		
		if (c == '0') {
			Move(1, 1, 1, m);
		}
		else {
			Move(n, m, 1, m);
		}
	}
	
	for (int t = (int)needed[1][m].size() - 1; t >= 0; t--) {
		char c = needed[1][m][t];
		
		if (c == '0') {
			Move(1, 1, 1, m);
		}
		else {
			Move(n, m, 1, m);
		}
	}
	
	for (unsigned int t = 0; t < needed[1][1].size(); t++) {
		Move(1, m, 1, 1);
	}
	for (unsigned int t = 0; t < needed[n][m].size(); t++) {
		Move(1, m, n, m);
	}
	
	printf("%d\n", (int)ans.size());
	for (auto p : ans) {
		printf("%d %d %d %d\n", p.first.first, p.first.second, p.second.first, p.second.second);
	}
}
