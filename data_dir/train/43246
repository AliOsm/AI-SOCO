#include <bits/stdc++.h>
using namespace std;

struct UnionFind {
    vector<int> par;
    vector<int> sz;

    UnionFind(int n=0){
        if(n>0) initialize(n);
    }

    void initialize(int n){
        par.resize(n);
        sz.resize(n);
        for(int i=0; i<n; i++){
            par[i] = i;
            sz[i] = 1;
        }
    }

    int find(int x){
        if(par[x] == x){
            return x;
        }else{
            return par[x] = find(par[x]);
        }
    }

    bool unite(int x, int y){
        x = find(x);
        y = find(y);
        if(x == y) return false;
        if(sz[x] > sz[y]) swap(x, y);
        par[x] = y;
        sz[y] += sz[x];
        return true;
    }

    bool same(int x, int y){
        return find(x) == find(y);
    }

    int size(int x){
        return sz[find(x)];
    }
};

int main(){
    int N;
    cin >> N;
    string S, T;
    cin >> S >> T;
    UnionFind uf(300);
    for(int i=0; i<N; i++) uf.unite(S[i], T[i]);
    vector<pair<char, char>> ans;
    for(char c='a'; c<='z'; c++) if(uf.find(c) != c) ans.emplace_back(c, char(uf.find(c)));
    cout << ans.size() << endl;
    for(auto& p : ans) cout << p.first << " " << p.second << endl;
    return 0;
}
