/*jai mata di
let's rock*/
#include<bits/stdc++.h>
using namespace std;
const int N=2000004;
const int Inf=1e9+7;
int tree[4*N];
int a[N];
void update(int node,int l,int r,int idx,int val)
{
    if(l>r) return ;
    if(l==r)
    {
        tree[node]=min(tree[node],val);
        return ;
    }
    int mid=(l+r)/2;
    if(idx<=mid) update(2*node,l,mid,idx,val);
    else update(2*node+1,mid+1,r,idx,val);
    tree[node]=min(tree[2*node],tree[2*node+1]);
}
int query(int node,int l,int r,int ql,int qr)
{
    if(l>r || ql>r || qr<l) return Inf;
    if(ql<=l && qr>=r) return tree[node];
    int mid=(l+r)/2;
    int q1=query(2*node,l,mid,ql,qr);
    int q2=query(2*node+1,mid+1,r,ql,qr);
    return min(q1,q2);
}

int diff[N];
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n,k;
        scanf("%d %d",&n,&k);
        int i;
        for(i=0;i<8*n;i++) tree[i]=Inf;
        map<int,int>mp;
        for(i=1;i<=n;i++)
        {
            scanf("%d",&a[i]);
            mp[a[i]]=1;
        }
        update(1,0,2*n,n,0);
        int idx=-1,f;
        int flag=0;
        for(i=1;i<=n;i++)
        {
            if(a[i]==k) idx=max(idx,i);
            if(a[i]>=k) f=1;
            else f=-1;
            diff[i]=diff[i-1]+f;
            int val=diff[i];
            
            int kx=query(1,0,2*n,0,n+val-1);            
            if(i-kx>1) {
                flag=1;
                break;
            }
            update(1,0,2*n,n+val,i);
            
        }
        if(n==1 && a[1]==k) flag=1;
        if(mp.find(k)==mp.end()) flag=0;
        if(flag) printf("yes\n");
        else printf("no\n");
    }
    return 0;
}