/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
template <typename T> bool in(T a, T b, T c) { return a <= b && b < c; }
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif
// #include "../l/mod.h"

class BNiceTable {
public:

//    vector<string> B;
//    void brute(int R, int C, int r, int c) {
//        if (c == C) {
//            c = 0;
//            r++;
//        }
//
//        if (r == R) {
//            for (auto&b:B) cerr << b << '\n';
//            cerr << endl;
//            return;
//        }
//
//        for (char t : {'A','C','T','G'}) {
//            B[r][c] = t;
//            if ((r!=0 && B[r][c] == B[r-1][c]) || (r!=0 && c!=0 &&B[r][c] == B[r-1][c-1]) || (c!= 0 && B[r][c] == B[r][c-1])
//                || (r!=0 && c!=C-1  && B[r][c] == B[r-1][c+1])) {
//                continue;
//            }
//
//            brute(R, C, r, c+1);
//        }
//    }

    vector<string> trans(const vector<string>&S) {
        int R = S.size();
        int C = S[0].size();
        vector<string> Ans(C, string(R, '_'));
        for (int r = 0; r < R; ++r) {
            for (int c = 0; c < C; ++c) {
                Ans[c][r] = S[r][c];
            }
        }
        return Ans;
    }

    pair<int, vector<string>> solve(const vector<string> & S, string T, bool transpose) {
        int R = S.size();
        int C = S[0].size();
        vector<string> Ans(R, string(C, '_'));
        int stay = 0;
        for (int r = 0; r < R; ++r) {


            pii best = {-1,0};
            for (int i = 0; i < 2; ++i) {
                int ok = 0;
                for (int c = 0; c < C; ++c) {
                    ok += T[(r%2)*2 + ((c%2)^i)] == S[r][c];
                }
                best = max(best, {ok, i});
            }

            stay += best.x;
            for (int c = 0; c < C; ++c) {
                Ans[r][c] = T[(r%2)*2 + ((c%2)^best.y)];
            }
        }

        if (transpose) Ans = trans(Ans);
        return {stay, Ans};
    }

    void solve(istream& cin, ostream& cout) {
        int N, M; cin >> N >> M;
        vector<string> S(N);
        cin >> S;

        pair<int, vector<string>> Best = {-1, {}};
        for (int i = 0; i < 2; ++i) {
            Best = max(Best, solve(S, "ACTG", i==1));
            Best = max(Best, solve(S, "AGCT", i==1));
            Best = max(Best, solve(S, "ATCG", i==1));
            Best = max(Best, solve(S, "CTAG", i==1));
            Best = max(Best, solve(S, "CGAT", i==1));
            Best = max(Best, solve(S, "TGAC", i==1));

            S = trans(S);
        }

        for (string &s: Best.y) cout << s << '\n';
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	BNiceTable solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}
