#include<bits/stdc++.h>
#define ll long long 
#define hell 1000000007
#define F first
#define re 15000000
#define S second
#define pb push_back
#define all(a)  (a).begin(),(a).end()
#define rep(i,a,b) for(ll int i = a;i<b;i++)
#define pi 3.1415926536
#define Mod 998244353
//char a[2000][2000];
using namespace std;
ll ceil1(ll x,ll k){
  return (x+k-1)/k;
}
ll computeTotient(int n) 
{ 
    // Create and initialize an array to store 
    // phi or totient values 
    long long phi[n+1]; 
    for (int i=1; i<=n; i++) 
        phi[i] = i; // indicates not evaluated yet 
                    // and initializes for product 
                    // formula. 
  
    // Compute other Phi values 
    for (int p=2; p<=n; p++) 
    { 
        // If phi[p] is not computed already, 
        // then number p is prime 
        if (phi[p] == p) 
        { 
            // Phi of a prime number p is 
            // always equal to p-1. 
            phi[p] = p-1; 
  
            // Update phi values of all 
            // multiples of p 
            for (int i = 2*p; i<=n; i += p) 
            { 
               // Add contribution of p to its 
               // multiple i by multiplying with 
               // (1 - 1/p) 
               phi[i] = (phi[i]/p) * (p-1); 
            } 
        } 
    } 
  
    // Print precomputed phi values
    ll sum = 0; 
    for (int i=1; i<=n; i++){
      sum = sum + phi[i];
    } 
    return sum-1;
    //cout<<sum;
      //cout << "Totient of " << i << " is "
        //   << phi[i] << endl; 
} 
int main()
{   
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);            
    //std::setprecision(20);      
    int tests=1;
      //freopen("input.txt", "r", stdin);   
      //cin>>tests;
  while(tests--)
    {
      int n,m,k,s;
      cin>>n>>m>>k>>s;
      vector<int> v[n+1];
      int  cost[n+1][k+1];
      for(int i = 1;i<=n;i++){
        for(int j = 0;j<=k;j++)
           cost[i][j] = INT_MAX;
      }
     // int a[n+1];
     // a[0] = -1;
      vector<int> item[k+1];
      for(int i = 1;i<=n;i++){
        int x;
        cin>>x;
        item[x].pb(i);
      }
    
    //  cout<<item[2].size();
  
      for(int i=0;i<m;i++){
        int x,y;
        cin>>x>>y;
        v[x].pb(y);
        v[y].pb(x);
      }
      for(int i = 1;i<=k;i++){
        bool visited[n+1];
        memset(visited,0,sizeof(visited));
        queue<pair<int,int> >  Q;
        for(int j = 0;j<item[i].size();j++){
          //cout<<item[i][j]<<" ";
          Q.push({item[i][j],0});
        }
    //    cout<<endl;
      //  cout<<Q.size()<<" ";
        while(!Q.empty()){
          pair<int,int> p = Q.front();
          Q.pop();
          visited[p.F] = 1;
          cost[p.F][i] = min(cost[p.F][i],p.S);
          for(int j=0;j<v[p.F].size();j++){
            if(!visited[v[p.F][j]]){
              Q.push({v[p.F][j],p.S+1});
            }
          }
        }
      }bool visited[n+1];
        memset(visited,0,sizeof(visited));
        queue<pair<int,int> >  Q;
      for(int i = 1;i<=n;i++){
        sort(cost[i] , cost[i]+k+1);
       // cout<<cost[i].size()<<" ";
        ll sum = 0;
        for(int r=0;r<s;r++)
          sum = sum + cost[i][r];
        cout<<sum<<" ";

      }


    }


}
 