#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl

const int maxn = 1005;

int ax,ay,bx,by,cx,cy;

int manhat(int x1,int y1,int x2, int y2) {
  return abs(x1-x2) + abs(y1-y2);
}

map<int, vector<pair<int,int>>> dist2pt;

bool pairsort(pair<int,int> p, pair<int,int> q) {
  int pi = p.first; int pj = p.second;
  int qi = q.first; int qj = q.second;
  vector<int> pd = { manhat(pi,pj,ax,ay),manhat(pi,pj,bx,by),manhat(pi,pj,cx,cy) };
  vector<int> qd = { manhat(qi,qj,ax,ay),manhat(qi,qj,bx,by),manhat(qi,qj,cx,cy) };
  sort(pd.begin(),pd.end());
  sort(qd.begin(),qd.end());

  for (int i=0; i<3; i++) {
    if (pd[i]==qd[i]) continue;
    return pd[i]<qd[i];
  }
  return true;
}

bool viz[maxn][maxn];
vector<pair<int,int>> pts;

void make_path(pair<int,int> meet, int x, int y) {
  int mx=meet.first; int my=meet.second;
  while (x<mx) {
    if (!viz[x][y]) {
      pts.push_back({x,y});
      viz[x][y]=true;
    }
    ++x;
  }
  while (x>mx) {
    if (!viz[x][y]) {
      pts.push_back({x,y});
      viz[x][y]=true;
    }
    --x;
  }
  while (y<my) {
    if (!viz[x][y]) {
      pts.push_back({x,y});
      viz[x][y]=true;
    }
    y++;
  }
  while (y>my) {
    if (!viz[x][y]) {
      pts.push_back({x,y});
      viz[x][y]=true;
    }
    --y;
  }
}

void make_ans(pair<int,int> meet) {
  make_path(meet,ax,ay);
  make_path(meet,bx,by);
  make_path(meet,cx,cy);
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);
  //cout << fixed << setprecision(6);

  cin>>ax>>ay>>bx>>by>>cx>>cy;

  int n = 1+max(ax,max(bx,cx));
  int m = 1+max(ay,max(by,cy));

  for (int i=0; i<n; i++) {
    for (int j=0; j<m; j++) {
      int dist = manhat(ax,ay,i,j)+manhat(bx,by,i,j)+manhat(cx,cy,i,j);
      dist2pt[dist].push_back({i,j});
    }
  }

  vector<pair<int, int>> best = dist2pt.begin()->second;
  sort(best.begin(), best.end(), pairsort);

  pair<int, int> ans = best.front();
  pts.push_back({ans.first,ans.second});
  viz[ans.first][ans.second]=true;
  
  make_ans(ans);

  if (!viz[ax][ay]) pts.push_back({ax,ay});
  if (!viz[bx][by]) pts.push_back({bx,by});
  if (!viz[cx][cy]) pts.push_back({cx,cy});
  
  int dst = pts.size();
  cout<<dst<<endl;
  for (auto p: pts) {
    cout<<p.first<<" "<<p.second<<endl;
  }
  

  return 0;
  //try using ll
  //ur outputting the answer incorrectly
  //try something simpler
}
