#include <bits/stdc++.h>

using namespace std;

const int MaxN = 3e5 + 15;
const int INF = 1e9;
const int MOD = 1e9 + 7;

int n, m;
vector <int> colors[MaxN];
int ans;
int C[MaxN];
bool used[MaxN];
set<int> s;
vector <int> v[MaxN];

void dfs(int x, int p)
{
    for(int i = 0; i < colors[x].size(); ++i)
    {
        if(C[colors[x][i]])
            s.erase(C[colors[x][i]]);
    }

    for(int i = 0; i < colors[x].size(); ++i)
    {
        if(!C[colors[x][i]])
        {
            C[colors[x][i]] = (*s.begin());
            s.erase(s.begin());
        }
    }

    for(int i = 0; i < colors[x].size(); ++i)
        s.insert(C[colors[x][i]]);

    for(int i = 0; i < v[x].size(); ++i)
        if(v[x][i] != p)
            dfs(v[x][i], x);
}

int main()
{
//    freopen("input.txt", "r", stdin);
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n >> m;

    int ans = 1;

    for(int i = 1; i <= n; ++i)
    {
        int k;
        cin >> k;
        colors[i].resize(k);
        for(int j = 0; j < k; ++j)
            cin >> colors[i][j];
        ans = max(ans, k);
    }

    for(int i = 0; i + 1 < n; ++i)
    {
        int x, y;
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }



    for(int i = 1; i <= m; ++i)
        s.insert(i);

    dfs(1, 1);

    for(int i = 1; i <= m; ++i)
        ans = max(ans, C[i]);

    cout << ans << '\n';
    for(int i = 1; i <= m; ++i)
    {
        if(!C[i])
            C[i] = 1;
        cout << C[i] << ' ';
    }
    return 0;
}
/**
5 6
*/
