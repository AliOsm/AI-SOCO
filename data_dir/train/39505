#include <bits/stdc++.h>

typedef long long tint;


#define forsn(i,s,n) for(tint i=(s);i<(tint)(n); i++)
#define forn(i,n) forsn(i,0,n)
#define debug(x) cout << #x << " = "  << x << endl

using namespace std;

void imprimirVector (vector<tint> v)
{
	if (!v.empty())
	{ 
		tint p = tint(v.size());
		cout << "[";
		forn(i,p-1)
			cout << v[i] << ",";
		cout << v[p-1] << "]" << endl;
	}
	else
		cout << "[]" << endl;
}

const tint nmod = 1000000007;
const tint maxK = 5050;

tint mod(tint n)
{
	n %= nmod;
	if (n < 0)
		n+=nmod;
	return n;
}

tint potLog(tint x, tint y)
{
	tint ans = 1;
	while (y > 0)
	{
		if (y%2)
			ans = mod(x*ans);
		x = mod(x*x);
		y/=2;
	}
	return ans;
}

tint invMod(tint a)
{
	return mod(potLog(a,nmod-2));
}

tint combinatorio(tint n, tint m)
{
	tint ans = 1;
	forn(i,m)
		ans = mod(ans * (n-i));
	forn(i,m)
		ans = mod(ans * invMod(i+1));
	return ans;
	
}

tint comb[maxK];

vector<vector<tint> > polyK(maxK);

// https://math.stackexchange.com/questions/1942094/sum-of-binomial-coefficients-times-a-polynomial

int main()
{
	#ifdef ACMTUYO
		assert(freopen("entrada.in", "r", stdin));
	#endif
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	
	polyK[0] = {1};
	polyK[1] = {0,1};
	forsn(i,2,maxK)
	{
		polyK[i] = vector<tint> (i+1,0);
		polyK[i][i] = mod(i*polyK[i-1][i-1]);
		forsn(j,1,i)
			polyK[i][j] += mod(polyK[i][j]+j*((polyK[i-1][j-1]+polyK[i-1][j])));
	}
	tint n,k;
	while (cin >> n >> k)
	{
		comb[1] = mod(n);
		forsn(i,2,maxK)
			comb[i] = mod(mod(comb[i-1]*(n-i+1))*invMod(i));
		tint ans = 0;
		forsn(i,1,k+1)
			ans = mod(ans + mod(mod(comb[i]*polyK[k][i])*potLog(2,n-i)));
		cout << ans << "\n";
	}
	
	
	
	return 0;
}




