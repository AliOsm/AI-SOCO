#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << (x) << endl;
#define ull unsigned long long
#define pii pair<int, int>
//#define pii pair<ll, ll>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-10
//#define endl "\n"
#define pdd pair<double, double>
//#define mp make_pair

int main() {
	ifstream cin("input.txt");
	ofstream cout("output.txt");
	int n;
	multiset<pii> st;
	multiset<int> ms;
	cin >> n;
	FOR(i, 0, n) {
		int h, l, r;
		cin >> h >> l >> r;
		st.insert(pii(l, h));
		st.insert(pii(r, -h));
	}
	vector<pii> v;
	while (!st.empty()) {
		int x = st.begin()->X;
		int h = ms.empty()?0:*ms.rbegin();
		while (!st.empty() && st.begin()->X == x) {
			int y = st.begin()->Y;
			st.erase(st.begin());
			if (y < 0) ms.erase(ms.find(-y)); else ms.insert(y);
		}
		int hp = ms.empty()?0:*ms.rbegin();
		if (h != hp) {
			v.pb(pii(x, h));
			v.pb(pii(x, hp));
		}
	}
	cout << Size(v) << endl;
	FOR(i, 0, Size(v)) cout << v[i].X << " " << v[i].Y << endl;
	return 0;
}

