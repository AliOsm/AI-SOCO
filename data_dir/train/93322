#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

const int N = 100000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n;
    cin >> n;
    string s;
    cin >> s;
    vector<int> a, b;
    rep(i, 0, n)
        if (s[i] == '*')
            a.push_back(i);
        else if (s[i] == 'P')
            b.push_back(i);
    int l = -1, r = n * 2, mid;
    while (r - l > 1)
    {
        mid = (l + r) / 2;
        int p = 0;
        bool ok = true;
        rep(i, 0, sz(b))
        {
            if (p == sz(a))
                continue;
            if (a[p] < b[i])
            {
                if (b[i] - a[p] > mid)
                {
                    ok = false;
                    break;
                }
                int p1 = p;
                while (p1 < sz(a) && (a[p1] < b[i] || b[i] - a[p] + a[p1] - a[p] <= mid))
                    p1++;
                int p2 = upper_bound(a.begin(), a.end(), b[i] + (mid - (b[i] - a[p])) / 2) - a.begin();
                p = max(p1, p2);
            }
            else
            {
                while (p < sz(a) && a[p] - b[i] <= mid)
                    p++;
            }
        }
        if (p < sz(a))
            ok = false;
        ok ? r = mid : l = mid;
    }
    cout << r << "\n";
    return 0;
}
