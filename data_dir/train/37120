#include <bits/stdc++.h>
using namespace std;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl

template<typename T>
void trace(T *a, int s, int n) {
    for (int i=s; i<n; i++) {
	cout<<a[i]<<" ";
    }
    cout<<endl;
}



typedef long long ll;
const ll mod = 1e9+7;
const int maxn = 5005;



double p[maxn];
int t[maxn];
int n, T;

double dp[maxn][maxn];

double pw(double x, int y) {
    double res=1;
    for (int j=0; j<y; j++) {
	res=res*x;
    }
    return res;
}
	  
int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);
    cin>>n>>T;
    for (int i=0; i<n; i++) {
	cin>>p[i]>>t[i];
	p[i]/=100;
    }

    cout<<fixed<<setprecision(8);
    
    for (int i=n-1; i>=0; i--) {
	double wind=0;//maintain cases where we (1-p)*(1-p)...p.
	
	//but,manually add the immediate success cases to dp[i][x]
	
	double allfail=pw(1-p[i],t[i]);

	for (int x=1; x<=T; x++) {
	    wind *= (1-p[i]);
	    if (x > t[i]) {
		//drop
		wind -= allfail*p[i]*(1+dp[i+1][x-t[i]-1]);
	    }
	    wind += p[i]*(1+dp[i+1][x-1]);//succeed immediately at time x
	    dp[i][x]=wind;

	    if (x>=t[i]) {
		dp[i][x] += allfail*(1+dp[i+1][x-t[i]]);
	    }
	}
	
    }

    cout<<dp[0][T]<<endl;

    
    return 0;
}
