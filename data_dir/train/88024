#include<bits/stdc++.h>
#define god dimasi5eks
#pragma GCC optimize("O3")
#define fi first
#define se second
#define pb push_back
#define pf push_front
#define mod 1000000007
#define dancila 3.14159265359
#define eps 1e-9
 
using namespace std;
 
typedef long long ll;
 
int add(int a, int b)
{
    int x = a+b;
    if(x >= mod)
        x -= mod;
    if(x < 0)
        x += mod;
    return x;
}
 
ll mul(ll a, ll b)
{
    return (a*b) % mod;
}
 
int n, k, v[1000002], st[1000002], dr[1000002], haseq[1000002];
 
map<pair<int, int>, int> mp;
 
int am[1000002];
 
pair<int, int> val[1000002];
 
int aib[1000002];
void update(int nod, int val)
{
    for(; nod <= n; nod += (nod & (-nod)))
        aib[nod] = add(aib[nod], val);
}
int query(int nod)
{
    int ans = 0;
    for(; nod; nod -= (nod & (-nod)))
        ans = add(ans, aib[nod]);
    return ans;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> k;
    for(int i = 1; i <= n; ++i)
    {
        cin >> v[i];
        val[i] = {v[i], i};
    }
    sort(val + 1, val + n + 1);
    deque<int> d;
    for(int i = 1; i <= n; ++i)
    {
        while(!d.empty() && v[i] >= v[d.back()])
        {
            if(v[i] == v[d.back()])
                haseq[i] = 1;
            d.pop_back();
        }
        if(d.empty())
            st[i] = 1;
        else
            st[i] = d.back() + 1;
        d.pb(i);
    }
    d.clear();
    for(int i = n; i >= 1; --i)
    {
        while(!d.empty() && v[i] >= v[d.back()])
            d.pop_back();
        if(d.empty())
            dr[i] = n;
        else
            dr[i] = d.back() - 1;
        d.pb(i);
    }
    for(int i = k; i <= n; ++i)
        am[i] = add(am[i-k+1], i-k+1);
    int ans = 0;
    for(int i = 1; i <= n; ++i)
    {
        int x = val[i].fi;
        int y = val[i].se;
        if(haseq[y]);
        else
        {
            int ct = add(am[dr[y] - st[y] + 1], -(query(dr[y]) - query(st[y] - 1)));
            ans = add(ans, mul(ct, x));
           // mp[{st[y], dr[y]}] = 1;
            update(st[y], ct);
        }
    }
    cout << ans;
    return 0;
}