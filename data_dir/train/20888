#include <iostream>
#include <algorithm>
#include <map>
#include <vector>
using namespace std;

const int N = 300005;
int a[N], s[N];
int l[N], r[N];
int lid[N], rid[N];
int st[N], top, n, k;

vector<int> store[1000005];

int query(int x, int L, int R) {
  vector<int> &v = store[x];
  return upper_bound(v.begin(), v.end(), R) - lower_bound(v.begin(), v.end(), L);
}

long long ans = 0;
void go(int x, int L, int R) {
  if (L < x) go(l[x], L, x-1);
  if (R > x) go(r[x], x+1, R);
  if (x-L+1 < R-x) {
    for (int i = L-1; i < x; i++) {
      int target = (a[x] + s[i]) % k;
      ans += query(target, x, R);
    }
  } else {
    for (int i = x; i <= R; i++) {
      int target = ((s[i] - a[x]) % k + k) % k;
      ans += query(target, L-1, x-1);
    }
  }
}


int main() {
  scanf("%d%d", &n, &k);
  store[0].push_back(0);
  for (int i = 1; i <= n; i++) {
    scanf("%d", &a[i]);
    s[i] = (s[i-1] + a[i]) % k;
    store[s[i]].push_back(i);
    while (top > 0 && a[st[top-1]] <= a[i]) {
      if (top==1 || a[i] < a[st[top-2]])
        l[i] = st[top-1];
      else 
        r[st[top-2]] = st[top-1];
      --top;
    }
    st[top++] = i;
  }
  while (top > 1) {
    r[st[top-2]] = st[top-1];
    --top;
  }
  for (int i = 0; i < k; i++) store[i].push_back(n+1);
  // st[0] is the maximal;
  go(st[0], 1, n);
  cout << ans - n << endl;
  return 0;
}
