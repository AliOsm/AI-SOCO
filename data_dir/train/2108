#pragma comment(linker, "/stack:20000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,sse3,sse4,popcnt,abm,mmx")

#include <bits/stdc++.h>

#define f first
#define s second

#define pb push_back
#define pp pop_back
#define mp make_pair

#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define rep(i, l, r) for (int i = l; i <= r; i++)
#define per(i, l, r) for (int i = l; i >= r; i--)

#define dbg(x) cerr << (#x) << " --> " << (x) << nl;
#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

#define Toktama ""

using namespace std;

#ifdef superset
  #include <ext/pb_ds/assoc_container.hpp>
  #include <ext/pb_ds/tree_policy.hpp>
  #include <ext/pb_ds/detail/standard_policies.hpp>

  using namespace __gnu_pbds;
  typedef tree < pair <int, int>, null_type, less < pair <int, int> >, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#endif

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

const int N = 3e5 + 7, inf = 1e9 + 7, mod = 1e9 + 7;
const ll linf = (ll)1e18 + 7;
const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1}, dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

int get_int() {
  char x = getchar();
  bool mns = 0;
  while (!isdigit(x)) mns |= x == '-', x = getchar();
  int res = 0;
  while (isdigit(x)) res = res * 10 + x - '0', x = getchar();
  if (mns) res = -res;
  return res;
}
void add(int &x, int y) {
  x += y;
  if (x >= mod) x -= mod;
  if (x < 0) x += mod;
}
int mult(int x, int y) {
  return x * 1ll * y % mod;
}
int sum(int x, int y) {
  add(x, y);
  return x;
}

int block = 400;

int n, m, sz;
int a[N], bfr[N], ans[N], cnt[N], tot[N];
pair < pair <int, int>, pair <int, int> > q[N];

void solve() {
  n = get_int(), m = get_int();
  rep(i, 1, n) {
    a[i] = get_int();
    tot[a[i]]++;
  }
  rep(i, 1, m)
    ans[i] = inf;
  rep(i, 1, m) {
    int l = get_int(), r = get_int(), k = get_int();
    int need = (r - l + 1) / k + 1;
    if (need <= block) {
      rep(j, l, r) {
        bfr[a[j]]++;
        if (bfr[a[j]] >= need) {
          if (a[j] < ans[i]) ans[i] = a[j];
        }
      }
      rep(j, l, r)
        bfr[a[j]]--;
    }
    else q[++sz] = {{l, r}, {need, i}};
  }
  rep(i, 1, n) {
    if (tot[i] > block) {
      rep(j, 1, n) {
        cnt[j] = cnt[j - 1] + (a[j] == i);
      }
      rep(j, 1, sz) {
        if (ans[q[j].s.s] != inf) continue;
        if (tot[i] >= q[j].s.f) {
          int l = q[j].f.f, r = q[j].f.s;
          if (cnt[r] - cnt[l - 1] >= q[j].s.f) ans[q[j].s.s] = i;
        }
      }
    }
  }
  rep(i, 1, m) {
    if (ans[i] != inf) printf ("%d\n", ans[i]);
    else printf ("-1\n");
  }
}
int main() {
  #ifndef Toktama
    freopen (".in", "r", stdin);
    //freopen (".out", "w", stdout);
  #endif
  int t = 1;
  while (t--)
    solve();
  ioi
}
