 /*
ID: hepic
PROG: sabotage
LANG: C++11
*/
#include <bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i<=b; ++i)
#define REP(i, a, b) for(auto i=a; i<b; ++i)
#define FORI(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REPI(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define SIZE 100010
#define MAXN 1000000000
#define NUM 20
#define PI acos(-1)
#define open_read1 freopen("C:\\Users\\Hepic\\Desktop\\a.txt", "r", stdin)
#define open_write1 freopen("C:\\Users\\Hepic\\Desktop\\b.txt", "w", stdout)
#define open_read freopen("poker.in", "r", stdin)
#define open_write freopen("poker.out", "w", stdout)

using namespace std;

typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair<double, double> PDD;
typedef pair<int, int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<ULL, ULL> PUU;
typedef pair<LL, PLL> PLPLL;
typedef pair<PLL, PLL> PPLLPLL;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    out<<"("<<obj.first<<","<<obj.second<<")";
    return out;
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, multiset<T> cont)
{
    typename multiset<T>::const_iterator itr = cont.begin();
    typename multiset<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N])
{
     REP(i, 0, N)
        out<<arr[i]<<" ";
    out<<endl;

    return out;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}


template<typename T>
T fast_exp_pow(T base, T exp, T mod)
{
    LL res = 1;

    while(exp)
    {
        if(exp&1)
        {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;

    }

    return res;
}

/*#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################*/

int N, M, T, A, B, chainNo, ptr;
int depth[SIZE], subSize[SIZE], parent[SIZE][NUM], otherEnd[SIZE];
int chainHead[SIZE], chainInd[SIZE], posInBase[SIZE];
int baseArray[SIZE], seg_tree[4*SIZE];
vector<PII> graph[100010];


void find_parents()
{
    REP(i, 1, NUM)
        FOR(j, 1, N)
            if(parent[j][i-1])
                parent[j][i] = parent[parent[j][i-1]][i-1];
}


int LCA(int nd1, int nd2)
{
    if(depth[nd1] > depth[nd2])
    {
        FORI(i, NUM-1, 0)
            if(depth[parent[nd1][i]] >= depth[nd2])
                nd1 = parent[nd1][i];
    }

    else if(depth[nd2] > depth[nd1])
    {
        FORI(i, NUM-1, 0)
            if(depth[parent[nd2][i]] >= depth[nd1])
                nd2 = parent[nd2][i];
    }

    if(nd1 == nd2)
        return nd1;

    FORI(i, NUM-1, 0)
        if(parent[nd1][i] != parent[nd2][i])
        {
            nd1 = parent[nd1][i];
            nd2 = parent[nd2][i];
        }

    return parent[nd1][0];
}


void dfs(int node = 1, int par = 0, int dep = 1)
{
    parent[node][0] = par;
    depth[node] = dep;
    subSize[node] = 1;

    for(auto elem: graph[node])
    {
        int conn_node = elem.fir;
        int index = elem.sec;

        if(conn_node != par)
        {
            otherEnd[index] = conn_node;
            dfs(conn_node, node, dep + 1);
            subSize[node] += subSize[conn_node];
        }
    }
}


void make_tree(int ind = 0, int st = 0, int en = ptr-1)
{
    if(st == en)
    {
        seg_tree[ind] = baseArray[st];
        return;
    }

    int mid = (st + en) >> 1;

    make_tree(2*ind + 1, st, mid);
    make_tree(2*ind + 2, mid + 1, en);

    seg_tree[ind] = seg_tree[2*ind + 1] + seg_tree[2*ind + 2];
}


int query_tree(int Qst, int Qen, int ind = 0, int st = 0, int en = ptr-1)
{
    if(st > Qen  ||  en < Qst)
        return 0;

    if(st >= Qst  &&  en <= Qen)
        return seg_tree[ind];

    int mid = (st + en) >> 1;

    int ret_1 = query_tree(Qst, Qen, 2*ind + 1, st, mid);
    int ret_2 = query_tree(Qst, Qen, 2*ind + 2, mid + 1, en);
    int ret;

    if(ret_1 == -1  ||  ret_2 == -1)
        ret = -1;
    else
        ret = ret_1 + ret_2;

    return ret;
}


int query_up(int u, int v)
{
    if(u == v)
        return 0;

    int uchain, vchain = chainInd[v];
    int ret = 0;

    while(1)
    {
        uchain = chainInd[u];

        if(uchain == vchain)
        {
            if(u == v)
                break;

            int val = query_tree(posInBase[v]+1, posInBase[u]);

            if(ret == -1  ||  val == -1)
                ret = -1;
            else
                ret += val;

            break;
        }

        int val = query_tree(posInBase[chainHead[uchain]], posInBase[u]);

        if(ret == -1  ||  val == -1)
            ret = -1;
        else
            ret += val;

        u = chainHead[uchain];
        u = parent[u][0];
    }

    return ret;
}


int query(int u, int v)
{
    int lca = LCA(u, v);
    int ret_1 = query_up(u, lca);
    int ret_2 = query_up(v, lca);
    int ret;

    if(ret_1 == -1  ||  ret_2 == -1)
        ret = -1;
    else
        ret = ret_1 + ret_2;

    return ret;
}


void update_tree(int id, int val, int ind = 0, int st = 0, int en = ptr-1)
{
    if(st > id  ||  en < id)
        return;

    if(st == id   &&  en == id)
    {
        seg_tree[ind] = val;
        return;
    }

    int mid = (st + en) >> 1;

    update_tree(id, val, 2*ind + 1, st, mid);
    update_tree(id, val, 2*ind + 2, mid + 1, en);

    if(seg_tree[2*ind + 1] == -1  ||  seg_tree[2*ind + 2] == -1)
        seg_tree[ind] = -1;
    else
        seg_tree[ind] = seg_tree[2*ind + 1] + seg_tree[2*ind + 2];
}


void change(int i, int val)
{
    int u = otherEnd[i];
    update_tree(posInBase[u], val);
}


void HLD(int node = 1, int par = 0, int type = 0)
{
    if(chainHead[chainNo] == -1)
        chainHead[chainNo] = node;

    chainInd[node] = chainNo;
    posInBase[node] = ptr;
    baseArray[ptr++] = type;

    int sp_ch = -1;

    for(auto elem: graph[node])
    {
        int conn_node = elem.fir;

        if(conn_node != par)
            if(sp_ch == -1  ||  subSize[sp_ch] < subSize[conn_node])
                sp_ch = conn_node;
    }

    if(sp_ch != -1)
        HLD(sp_ch, node, 1);

    for(auto elem: graph[node])
    {
        int conn_node = elem.fir;

        if(conn_node != par  &&  conn_node != sp_ch)
        {
            ++chainNo;
            HLD(conn_node, node, 1);
        }
    }
}



int main()
{
    //open_read1;
    scanf("%d", &N);

    FOR(i, 1, N-1)
    {
        scanf("%d%d", &A, &B);
        graph[A].eb(B, i);
        graph[B].eb(A, i);
    }

    scanf("%d", &M);

    ms(chainHead, -1);
    dfs();
    HLD();
    make_tree();
    find_parents();

    FOR(i, 1, M)
    {
        scanf("%d", &T);

        if(T == 1)
        {
            scanf("%d", &A);
            change(A, 1);
        }

        else if(T == 2)
        {
            scanf("%d", &A);
            change(A, -1);
        }

        else if(T == 3)
        {
            scanf("%d%d", &A, &B);
            printf("%d\n", query(A, B));
        }
    }

    return 0;
}
