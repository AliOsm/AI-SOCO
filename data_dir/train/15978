// practice with Dukkha
#include <algorithm>
#include <iostream>

using namespace std;

const int N = 40000, M = 40000;

int aa[N], bb[M], ka[N + 1], kb[M + 1], qu[600];

void count(int *aa, int n, int *kk) {
	for (int i = 0, l = 0; i <= n; i++)
		if (i == n || !aa[i]) {
			if (l > 0)
				kk[l]++;
			l = 0;
		} else
			l++;
	int cnt = 0;
	for (int l = 1; l <= n; l++)
		if (kk[l]) {
			qu[cnt++] = l;
			qu[cnt++] = kk[l];
		}
	for (int l_ = 1; l_ <= n; l_++) {
		int k_ = 0;
		for (int h = 0; h < cnt; h += 2) {
			int l = qu[h], k = qu[h + 1];
			if (l_ <= l) {
				k_ += (l - l_ + 1) * k;
			}
		}
		kk[l_] = k_;
	}
}

int main() {
	int n, m, k; cin >> n >> m >> k;
	for (int i = 0; i < n; i++)
		cin >> aa[i];
	for (int j = 0; j < m; j++)
		cin >> bb[j];
	count(aa, n, ka);
	count(bb, m, kb);
	long long ans = 0;
	for (int la = 1; la <= k && la <= n; la++)
		if (k % la == 0) {
			int lb = k / la;
			if (lb <= m)
				ans += (long long) ka[la] * kb[lb];
		}
	cout << ans << '\n';
	return 0;
}
