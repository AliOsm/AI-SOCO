#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <string>
#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <bitset>
#include <deque>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
using namespace std;

typedef long long ll;

const int N = 5e5 + 10;
int n, a, b, T, cum[N][2];
char s[N];

inline int calc(int s, int e, int T) {
	return  cum[s][T] - (e > 0 ? cum[e - 1][T] : 0);
}

int back(int from, int with) {
	with -= (from + 1) * a;
	if (with <= 0)
		return 0;
	int l = 1, r = n, res = 0;
	while (l <= r) {
		int mid = (l + r) >> 1;
		if (n - mid <= from) {
			r = mid - 1;
			continue;
		}
		int w = calc(n - 1, n - mid, 0);
		int h = calc(n - 1, n - mid, 1);
		assert(w + h == mid);
		ll need = (1LL * w * b) + mid + 1LL * (mid - 1) * a;
		if (need <= with) {
			l = mid + 1;
			res = mid;
		}
		else
			r = mid - 1;
	}
	return res;
}

int go(int from, int with) {
	if (from != 0)
		with -= (n - from) * a;
	if (with <= 0)
		return 0;
	int l = 1, r = n, res = 0;
	while (l <= r) {
		int mid = (l + r) >> 1;
		if (mid >= from) {
			r = mid - 1;
			continue;
		}
		int w = calc(mid, 1, 0);
		int h = calc(mid, 1, 1);
		int need = w * b + mid + mid * a;
		if (need <= with) {
			l = mid + 1;
			res = mid;
		} else
			r = mid - 1;
	}
	return res;
}

int main(int argc, char **argv) {
//	freopen("in.txt", "r", stdin);
	scanf("%d%d%d%d%s", &n, &a, &b, &T, s);
	for (int i = 0; i < n; ++i) {
		if (s[i] == 'w')
			++cum[i][0];
		else
			++cum[i][1];
		if (i != 0) {
			cum[i][0] += cum[i - 1][0];
			cum[i][1] += cum[i - 1][1];
		}
	}
	int res = 0;
	ll need = 0;
	for (int i = 0; i < n && need <= T; ++i) {
		need += (s[i] == 'w') * b + 1;
		if (need > T)
			break;
		res = max(res, i + 1 + back(i, T - need));
		need += a;
	}
	need = 0;
	int at = 0, take = 0;
	while (take != n) {
		need += (s[at] == 'w') * b + 1;
		if (need > T)
			break;
		++take;
		res = max(res, take + go(at, T - need));
		need += a;
		if (--at == -1)
			at = n - 1;
	}
	assert(res <= n);
	printf("%d\n", res);
	return 0;
}