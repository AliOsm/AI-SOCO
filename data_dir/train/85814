#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

vector<long int> computeZ(string s){
	long int l = 0, r = 0;
	vector<long int> z(s.size());
	z[0] = 1;

	for(long int i = 1; i < z.size(); i++){
		if(i > r){
			l = i;
			r = i;
			while(r < s.size() && s[r] == s[r - l])
				r++;
			z[i] = r - l;
			r--;
		}
		else if(z[i - l] + i <= r){
			long int span = i - l;
			z[i] = z[span];
		}
		else{
			l = i;
			while(r < s.size() && s[r] == s[r - l])
				r++;
			z[i] = r - l;
			r--;
		}
	}
	return z;
}

string prefixPalindrome(string &s){
	string rev = s;
	reverse(rev.begin(),rev.end());
	string compute = s + "$" + rev;
	vector<long int> z = computeZ(compute);

	for(long int i = s.size(); i < z.size(); i++){
		if(i + z[i] == z.size()){
			string ans = compute.substr(i);
			return ans;
		}
	}
	return s.substr(0,1);
}

string suffixPalindrome(string &s){
	string rev = s;
	reverse(rev.begin(),rev.end());
	return prefixPalindrome(rev);
}

string s;
int main(){
   IOS;
 //    #ifndef ONLINE_JUDGE
 //        freopen("in.txt",  "r",  stdin);
 //        freopen("out.txt", "w", stdout);
 //    #endif
   
   long int t;
   cin>>t;

   while(t--){
   		cin>>s;	
   		
   		string ans = prefixPalindrome(s);
   		string ans2 = suffixPalindrome(s);
   		string ans3;

   		long int be = 0, en = s.size() - 1;
   		
   		while(be < en){
   			if(s[be] == s[en]){
   				be++;
   				en--;
   			}
   			else
   				break;
   		}
   		if(be == en || be > en)
   			ans3 = s;
   		
   		else if(en < s.size() - 1){
   			string sub = s.substr(en + 1);
   			string mid = s.substr(be, en - be + 1);
   	
   			string ans4 = prefixPalindrome(mid);
   			string ans5 = suffixPalindrome(mid);
   			auto sub2 = sub;
   	
   			reverse(sub2.begin(),sub2.end());
   			if(ans4.size() >= ans5.size())
   				ans3 = sub2 + ans4 + sub;
   			else
   				ans3 = sub2 + ans5 + sub;
   		}

   		long int maxe = max({ans.size(),ans2.size(),ans3.size()});
   		if(maxe == ans.size())
   			cout<<ans<<endl;
   		else if(maxe == ans2.size())
   			cout<<ans2<<endl;
   		else
   			cout<<ans3<<endl;
   }
   return 0;
}