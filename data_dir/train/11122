#include <iostream>
#include <cstdio>
#include <algorithm>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <cstring>
#include <fstream>
#include <memory.h>
#include <iomanip>
#include <omp.h>
#include <bitset>
#include <fstream>
#include <string>
#include <list>
#include <unordered_map>

using namespace std;

#define right asfdsg
#define left asfdsvs
#define pb push_back
#define F first
#define S second
#define mp std::make_pair
#define x1 _xxx1
#define y1 _yyy1

#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef std::pair < int, int > pii;
typedef std::pair < ll, ll > pll;
typedef std::vector < std::vector < ld > > vld;

const int INF = (int) 2e9;
const ld EPS = (ld) 1e-5;
const int BASE = (int) 1e9 + 7;
const int MAXN = 100500;
const ll INFLL = (ll) 1e18;

int n, qq, s;
int a[MAXN];
vector < pll > g[10 * MAXN];
ll f[MAXN * 10];
bool used[10 * MAXN];

void add_edge(int from, int to, ll cost) {
    g[from].emplace_back(to, cost);
}

void bld (int v, int l, int r) {
    if (l == r) {
        add_edge(v, 8 * n + l, 0);
        add_edge(8 * n + l, v + 4 * n, 0);
    } else {
        int m = (l + r) >> 1;
        bld (v + v, l, m);
        bld (v + v + 1, m + 1, r);
        add_edge(v, v + v, 0);
        add_edge(v, v + v + 1, 0);
        add_edge(v + v + 4 * n, v + 4 * n, 0);
        add_edge(v + v + 1 + 4 * n, v + 4 * n, 0);
    }
}

void make_two(int v, int tl, int tr, int l, int r, int vv, ll cost) {
    if (tl == l && tr == r) {
        add_edge(vv, v, cost);
    } else {
        int m = (tl + tr) >> 1;
        if (l <= m) make_two(v + v, tl, m, l, min (r, m), vv, cost);
        if (r > m) make_two(v + v + 1, m + 1, tr, max (l, m + 1), r, vv, cost);
    }
}

void make_three(int v, int tl, int tr, int l, int r, int vv, ll cost) {
    if (tl == l && tr == r) {
        add_edge(v + 4 * n, vv, cost);
    } else {
        int m = (tl + tr) >> 1;
        if (l <= m) make_three(v + v, tl, m, l, min (r, m), vv, cost);
        if (r > m) make_three(v + v + 1, m + 1, tr, max (l, m + 1), r, vv, cost);
    }
}

int main() {
    scanf ("%d%d%d", &n, &qq, &s);
    bld(1, 1, n);
    for (int i = 1; i <= qq; i ++) {
        int t, v, u, w, l, r;
        scanf ("%d", &t);
        if (t == 1) {
            scanf ("%d%d%d", &v, &u, &w);
            add_edge(8 * n + v, 8 * n + u, w);
        } else {
            scanf ("%d%d%d%d", &v, &l, &r, &w);
            if (t == 2) {
                make_two(1, 1, n, l, r, v + 8 * n, w);
            } else {
                make_three(1, 1, n, l, r, v + 8 * n, w);
            }
        }
    }
    memset (f, -1, sizeof(f));
    memset (used, 0, sizeof(used));
    f[s + 8 * n] = 0;
    priority_queue < pll > q;
    q.emplace(0, s + 8 * n);
    while ( !q.empty() ) {
        int v = q.top().S;
        q.pop();
        if (used[v]) continue;
        used[v] = true;
        for (auto to : g[v]) {
            if (f[to.F] == -1 || f[to.F] > f[v] + to.S) {
                f[to.F] = f[v] + to.S;
                q.emplace( -f[to.F], to.F );
            }
        }
    }
    for (int i = 1; i <= n; i ++)
        cout << f[i + 8 * n] << " ";
    return 0;
}
