#include <bits/stdc++.h>
using namespace std;

typedef long long Long;

int q, base, i, j, k;
Long l, r, dp[11][64][1 << 11][2];

string convert(Long num) {
	string res;
	while (num > 0) {
		res += num % base + '0';
		num /= base;
	}
	reverse(res.begin(), res.end());
	return res;
}

Long solve(int rem, int mask = 0, bool begin = 1) {
	if (rem <= 0)
		return (mask == 0);

	Long& ret = dp[base][rem][mask][begin];

	if (~ret)
		return ret;

	ret = 0;

	for (int i = begin; i < base; ++i)
		ret += solve(rem - 1, mask ^ (1 << i), 0);

	return ret;
}

Long calc(const string& s) {
	if (s.empty()) {
		return 0;
	}

	Long res = 0;

	for (i = 1; i < s.size(); ++i) {
		res += solve(i);
	}

	int mask = 0;

	for (i = 0; i < s.size(); ++i) {
		k = s[i] - '0';

		for (j = 0; j < k; ++j)
			if (i || j)
				res += solve(s.size() - i - 1, mask ^ (1 << j), 0);

		mask ^= (1 << k);
	}

	return res + (mask == 0);
}

int main() {
	cin >> q;
	memset(dp, -1, sizeof(dp));

	while (q--) {
		scanf("%d %lld %lld", &base, &l, &r);
		printf("%lld\n", calc(convert(r)) - calc(convert(l - 1)));
	}

	return 0;
}