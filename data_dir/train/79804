#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     std::begin(_obj), std::end(_obj)
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
#define debug(_x)                     std::cerr << (#_x) << " = " << (_x) << '\n' << std::flush;
#else
#define debug(_x)                     {}
#endif
#define endl "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = long long;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
vector<pii> gr[5000];
int used[5000];
int ans[5000];

bool HasCycle(int from) {
  used[from] = 1;
  for (const auto& e : gr[from]) {
    int to = e.first;
    if (used[to] == 1) {
      return true;
    }
    if (used[to] == 0 && HasCycle(to)) {
      return true;
    }
  }
  used[from] = 2;
  return false;
}

void Dfs(int from) {
  used[from] = 1;
  for (const auto& e : gr[from]) {
    int to = e.first;
    if (used[to] == 1) {
      continue;
    }
    ans[e.second] = 1;
    if (used[to] == 2) {
      continue;
    }
    if (used[to] == 0) {
      Dfs(to);
    }
  }
  used[from] = 2;
}

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int n, m;
    cin >> n >> m;
    loop(m) {
      int a, b;
      cin >> a >> b;
      --a; --b;
      gr[a].emplace_back(b, i);
    }
    bool fl = true;
    loop(n) {
      if (used[i] == 0 && HasCycle(i)) {
        fl = false;
        break;
      }
    }
    if (fl) {
      cout << 1 << endl;
      loop(m) {
        cout << 1 << ' ';
      }
      cout << endl;
      return 0;
    }
    memset(used, 0, sizeof(used));
    loop(n) {
      if (used[i] == 0) {
        Dfs(i);
      }
    }
    cout << 2 << endl;
    loop(m) {
      cout << ans[i] + 1 << ' ';
    }
    cout << endl;

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}
