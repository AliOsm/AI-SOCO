#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
typedef unsigned        un;
typedef long long       ll;
#define all(A)          A.begin(),A.end()
#define rall(A)         A.rbegin(),A.rend()
#define mp              make_pair
#define SP              setprecision
#define mem(A,B)        memset(A,B,sizeof A)
#define sorta(A)        sort(all(A))
#define sortd(A)        sort(rall(A))
#define sortf(A,F)      sort(all(A),F)
#define Abs(A)          A>=0?(A):(-A)
#define Max(A,B)        A>=B?A:B
#define Min(A,B)        A<=B?A:B
#define Get(mask,bit)   mask&(1LL<<bit)
#define Set(mask,bit)   mask|(1LL<<bit)
#define Reset(mask,bit) mask&(~(1LL<<bit))
#define Flib(mask,bit)  mask^(1LL<<bit)
#define LowOn(mask,bit) mask&-mask
#define PI              acos(0.0) * 2
#define exp             2.71828182845904523536028747135266249775724709369995
#define eps             -1000000000
#define oo              1000000000
#define Endl            '\n'
#define inn             goto in
#define ott             goto out
inline int inp(){ return 0; }
inline int inp(bool& A){ if (cin >> A)return 1; return -1; }
inline int inp(char& A){ return scanf(" %c", &A); }
inline int inp(int& A){ return scanf("%d", &A); }
inline int inp(float& A){ if (cin >> A)return 1; return -1; }
inline int inp(ll& A){ return scanf("%I64d", &A); }
inline int inp(double& A){ return scanf("%lf", &A); }
inline int inp(char* A){ return scanf("%s", A); }
inline int inp(string& A){ if (cin >> A)return 1; return -1; }
template <class Front, class... Queue> inline int inp(Front& A, Queue&... B){ return inp(A) + inp(B...); }
inline int oup(){ return 0; }
inline int oup(bool A){ if (cout << A)return 1; return -1; }
inline int oup(char A){ return printf("%c", A); }
inline int oup(int A){ return printf("%d", A); }
inline int oup(float A){ if (cout << A)return 1; return -1; }
inline int oup(ll A){ return printf("%I64d", A); }
inline int oup(double A){ return printf("%lf", A); }
inline int oup(char* A){ return printf(A); }
inline int oup(const char* A){ return printf("%s", A); }
inline int oup(string& A){ if (cout << A)return 1; return -1; }
template <class Front, class... Queue> inline int oup(Front A, Queue... B){ return oup(A) + oup(B...); }
template <class T> inline void remax(T& A, T B){ if (A < B)A = B; }
template <class T> inline void remin(T& A, T B){ if (A > B)A = B; }
string ToString(ll num){ string ret; do{ ret += ((num % 10) + '0'); num /= 10; } while (num); reverse(all(ret)); return ret; }
ll ToNumber(string s){ ll r = 0, p = 1; for (int i = s.size() - 1; i >= 0; --i)r += (s[i] - '0') * p, p *= 10; return r; }
ll Gcd(ll a, ll b){ while (a %= b ^= a ^= b ^= a);  return b; }
ll Power(ll base, ll power){ ll ret = 1; while (power){ if (power & 1)ret *= base; power >>= 1; base *= base; } return ret; }
int Log(ll num, ll base){ int ret = 0; while (num){ ++ret; num /= base; } return ret; }
int Count(ll mask){ int ret = 0; while (mask){ if (mask & 1)++ret; mask >>= 1; } return ret; }


int d;
int arr[2000];
vector <int> vec[2000];
bool vis[2000];
int root;
ll dfs(int u){
    ll ret = 1;
    int sz = (int)vec[u].size();
    vis[u] = true;
    for (int i = 0; i < sz; ++i){
        int v = vec[u][i];
        if (vis[v] || arr[root] > arr[v] || arr[v] - arr[root] > d || (arr[root] == arr[v] && root > v))continue;
        ret = (ret * (dfs(v) + 1)) % 1000000007;
    }
    return ret;
}
inline void run(){
in:;
    int n;
    if (inp(d,n) != 2)return;
    ll ans = 0;
    for (int i = 0; i < n;)inp(arr[i++]);
    for (int i = n - 1; i > 0; --i){
        int a, b;
        inp(a, b);
        --a, --b;
        vec[a].emplace_back(b);
        vec[b].emplace_back(a);
    }
    for (int i = 0; i < n; ++i){
        mem(vis, false);
        root = i;
        ans = (ans + dfs(i)) % 1000000007;
    }
    oup(ans, Endl);
    for (int i = 0; i < n; ++i)vec[i].clear();
    inn;
}
int main(){
    //freopen("","r", stdin);
    //freopen("","w", stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr), cout.tie(nullptr);
    run();
    return 0;
}