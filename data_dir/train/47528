//#define debug
#define usepb_ds
#define usetr1

/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
//#pragma comment(linker, "/STACK:1024000000,1024000000")

#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <list>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <functional>
#include <sstream>

using namespace std;

#ifdef usetr1
#include <tr1/unordered_map>
#include <tr1/unordered_set>
using namespace tr1;
#endif

#ifdef usepb_ds
#include <ext/pb_ds/priority_queue.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
// binomial_heap_tag, rc_binomial_heap_tag, thin_heap_tag, binary_heap_tag
typedef __gnu_pbds::priority_queue<int, greater<int>, pairing_heap_tag> pq_type;
// splay_tree_tag, ov_tree_tag
typedef tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update> tree_type;
#endif

#define mpr make_pair
typedef unsigned int ui;
typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vll;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;

const double pi = acos(0.0) * 2.0;
const long double eps = 1e-10;
const int step[8][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}};

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}

template <class T> inline T max1(T a, T b) { return b < a ? a : b; }
template <class T> inline T max1(T a, T b, T c) { return max1(max1(a, b), c); }
template <class T> inline T max1(T a, T b, T c, T d) { return max1(max1(a, b, c), d); }
template <class T> inline T max1(T a, T b, T c, T d, T e) { return max1(max1(a, b, c, d), e); }
template <class T> inline T min1(T a, T b) { return a < b ? a : b; }
template <class T> inline T min1(T a, T b, T c) { return min1(min1(a, b), c); }
template <class T> inline T min1(T a, T b, T c, T d) { return min1(min1(a, b, c), d); }
template <class T> inline T min1(T a, T b, T c, T d, T e) { return min1(min1(a, b, c, d), e); }

inline int jud(double a, double b){
	if(abs(a) < eps && abs(b) < eps) return 0;
	else if(abs1(a - b) / abs1(a) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
template <typename t> inline int jud(t a, t b){
	if(a < b) return -1;
	if(a == b) return 0;
	return 1;
}

// f_lb == 1代表返回相同的一串的左边界，f_small == 1代表返回如果没有寻找的值返回小的数
template <typename it, typename t1>
inline int find(t1 val, it a, int na, bool f_small = 1, bool f_lb = 1){
	int be = 0, en = na - 1;
	if(*a <= *(a + na - 1)){
		if(f_lb == 0) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != 1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != -1) en = mid;
			else be = mid + 1;
		}
		if(f_small && jud(*(a + be), val) == 1) be--;
		if(!f_small && jud(*(a + be), val) == -1) be++;
	} else {
		if(f_lb) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != -1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != 1) en = mid;
			else be = mid + 1;
		}
		if(!f_small && jud(*(a + be), val) == -1) be--;
		if(f_small && jud(*(a + be), val) == 1) be++;
	}
	return be;
}

template <class T> inline T lowb(T num) {return num & (-num); }
inline int bitnum(ui nValue) { return __builtin_popcount(nValue); }
inline int bitnum(int nValue) { return __builtin_popcount(nValue); }
inline int bitnum(ull nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitnum(ll nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitmaxl(ui a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(int a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(ull a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }
inline int bitmaxl(ll a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }

long long pow(long long n, long long m, long long mod = 0){
	if(m < 0) return 0;
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}

#define  MOD 1000000007
template <class t1, class t2>
inline void add(t1 &a, t2 b, int mod = -1) {
	if(mod == -1) mod = MOD;
	a += b;
	while(a >= mod) a -= mod;
	while(a < 0) a += mod;
}
template <class t>
void output1(t arr) {
	for(int i = 0; i < (int)arr.size(); i++)
		cerr << arr[i] << ' ';
	cerr << endl;
}
template <class t>
void output2(t arr) {
	for(int i = 0; i < (int)arr.size(); i++)
		output1(arr[i]);
}

//....................密..........封..........线..........下..........禁..........止..........hack...............................................

/*===================================================================*\
| 最小费用流 O(V * E * f)
| INIT: network g; g.build(v); for(int i = 0; i < e; e++) addedge(a, b, capcity, cost);
| CALL: g.mincost(s, t); flow=g.flow; cost=g.cost;
| 注意: SPFA增广, 实际复杂度远远小于O(V * E);
\*===================================================================*/
#define typef int // type of flow
#define typec ll // type of dis
const typef inff = 0x3f3f3f3f; // max of flow
const typec infc = 0x3f3f3f3f3f3f3f3fll; // max of dis
const int E = 600100;
const int N = 20000;
struct network {
	int nv, ne, pnt[E], nxt[E];
	int vis[N], que[N], head[N], pv[N], pe[N];
	typef flow, cap[E];
	typec cost, dis[E], d[N];
	void addedge(int u, int v, typef c, typec w) {
		pnt[ne] = v;
		cap[ne] = c;
		dis[ne] = +w;
		nxt[ne] = head[u];
		head[u] = (ne++);
		pnt[ne] = u;
		cap[ne] = 0;
		dis[ne] = -w;
		nxt[ne] = head[v];
		head[v] = (ne++);
	}
	ll mincost(int src, int sink) {
		ll i, k, f, r;
		typef mxf;
		for (flow = 0, cost = 0;;) {
			memset(pv, -1, sizeof(pv));
			memset(vis, 0, sizeof(vis));
			for (i = 0; i < nv; ++i)
				d[i] = infc;
			d[src] = 0;
			pv[src] = src;
			vis[src] = 1;
			for (f = 0, r = 1, que[0] = src; r != f;) {
				i = que[f++];
				vis[i] = 0;
				if (N == f)
					f = 0;
				for (k = head[i]; k != -1; k = nxt[k])
					if (cap[k] && max(dis[k], d[i]) < d[pnt[k]]) {
						d[pnt[k]] = max(dis[k], d[i]);
						if (0 == vis[pnt[k]]) {
							vis[pnt[k]] = 1;
							que[r++] = pnt[k];
							if (N == r)
								r = 0;
						}
						pv[pnt[k]] = i;
						pe[pnt[k]] = k;
					}
			}
			if (-1 == pv[sink])
				break;
			for (k = sink, mxf = inff; k != src; k = pv[k])
				if (cap[pe[k]] < mxf)
					mxf = cap[pe[k]];
			flow += mxf;
			cost = max(d[sink], cost);
			for (k = sink; k != src; k = pv[k]) {
				cap[pe[k]] -= mxf;
				cap[pe[k] ^ 1] += mxf;
			}
		}
		return cost;
	}
	void init(int v) {
		nv = v;
		ne = 0;
		memset(head, -1, sizeof(head));
	}
} g;

const int maxn = 25;
char mp[maxn][maxn];
int biao[maxn][maxn], lbiao;
pii trans[maxn * maxn];
int dis[maxn][maxn], rdis[maxn * maxn][maxn * maxn];
int n, m, male, fe;
struct node {
	int x, y;
	int t;
} arr[2][maxn * maxn];

inline bool in(int x, int y) {
	return x < n && x >= 0 && y < m && y >= 0 && mp[x][y] == '.';
}
void finddis(int x, int y) {
	pii q[maxn * maxn];
	int lq = 0, rq = 0;
	q[rq++] = mpr(x, y);
	memset(dis, 0x3f, sizeof(dis));
	dis[x][y] = 0;
	for(; lq != rq; lq++) {
		int x = q[lq].first, y = q[lq].second;
		for(int i = 0; i < 4; i++) {
			int rx = x + step[i][0], ry = y + step[i][1];
			if(in(rx, ry) && dis[rx][ry] > dis[x][y] + 1) {
				dis[rx][ry] = dis[x][y] + 1;
				q[rq++] = mpr(rx, ry);
			}
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	#ifdef debug //......................................................................................................
	freopen("input.txt", "r", stdin);
	int __size__ = 256 << 20; // 256MB
	char *__p__ = (char*)malloc(__size__) + __size__;
	__asm__("movl %0, %%esp\n" :: "r"(__p__));
	#endif //...........................................................................................................

	scanf("%d%d%d%d", &n, &m, &male, &fe);
	if(abs(male - fe) != 1) {
		puts("-1");
		return 0;
	}
	for(int i = 0; i < n; i++)
		scanf("%s", mp[i]);

	memset(biao, -1, sizeof(biao));
	for(int i = 0; i < n; i++) for(int j = 0; j < m; j++)
		if(mp[i][j] == '.') {
			trans[lbiao] = mpr(i, j);
			biao[i][j] = lbiao++;
		}
	if(lbiao < max(male, fe)) {
		puts("-1");
		return 0;
	}

	for(int i = 0; i < n; i++) for(int j = 0; j < m; j++) if(mp[i][j] == '.') {
		finddis(i, j);
		for(int ii = 0; ii < n; ii++) for(int jj = 0; jj < m; jj++) if(mp[ii][jj] == '.')
			rdis[biao[i][j]][biao[ii][jj]] = dis[ii][jj];
	}
	int src = male + fe + 1 + lbiao * 2, sink = src + 1;
	g.init(sink + 1);
	int cate = 0, no = max(male, fe) - 1;
	if(male > fe) cate = 1;
	scanf("%d%d%d", &arr[cate][no].x, &arr[cate][no].y, &arr[cate][no].t);
	arr[cate][no].x--; arr[cate][no].y--;

	for(int i = 0; i < male; i++) {
		scanf("%d%d%d", &arr[0][i].x, &arr[0][i].y, &arr[0][i].t);
		arr[0][i].x--; arr[0][i].y--;
	}
	for(int i = 0; i < fe; i++) {
		scanf("%d%d%d", &arr[1][i].x, &arr[1][i].y, &arr[1][i].t);
		arr[1][i].x--; arr[1][i].y--;
	}

	fe = male = max(male, fe);
	for(int i = 0; i < male; i++) {
		for(int j = 0; j < lbiao; j++) {
			int x = arr[0][i].x, y = arr[0][i].y, rb = biao[x][y];
			if(rdis[rb][j] < MOD)
				g.addedge(i, j + male * 2, 1, 1ll * rdis[rb][j] * arr[0][i].t);
		}
		g.addedge(src, i, 1, 0);
	}
	for(int i = 0; i < male; i++) {
		for(int j = 0; j < lbiao; j++) {
			int x = arr[1][i].x, y = arr[1][i].y, rb = biao[x][y];
			if(rdis[rb][j] < MOD)
				g.addedge(j + male * 2 + lbiao, i + male, 1, 1ll * rdis[rb][j] * arr[1][i].t);
		}
		g.addedge(i + male, sink, 1, 0);
	}
	for(int i = 0; i < lbiao; i++)
		g.addedge(i + male * 2, i + male * 2 + lbiao, 1, 0);

	ll ans = g.mincost(src, sink);
	if(g.flow != male) {
		puts("-1");
		return 0;
	}
	cout << ans << endl;


    return 0;
}
