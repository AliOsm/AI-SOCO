#include <stdio.h>
#include <vector>
#include <algorithm>
#include <stack>
#define pb push_back
using namespace std;

struct Stone {
    int s;
    int walk;
    int idx;

    Stone() {}
    Stone(int s, int walk, int idx):s(s), walk(walk), idx(idx) {}
};

bool operator< (const Stone& a, const Stone& b) {
    return a.s < b.s || a.s == b.s && a.idx < b.idx;
}

struct Ans {
    int i;
    int j;
    int d;

    Ans() {}
    Ans(int i, int j, int d):i(i), j(j), d(d) {}
};

int main(void) {
    int n;
    int s, t;

    vector<Stone> v;
    vector<int> goal;
    vector<Ans> ans;

    scanf(" %d", &n);
    for (int i = 1; i <= n; i++) {
        scanf(" %d", &s);
        v.pb(Stone(s, 0, i));
    }
    for (int i = 1; i <= n; i++) {
        scanf(" %d", &t);
        goal.pb(t);
    }

    sort(v.begin(), v.end());
    sort(goal.begin(), goal.end());
    int pos = 0;
    bool can = true;

    stack<Stone> st;
    for (int i = 0; i < (int)goal.size(); i++) {
        int dist = goal[i] - v[pos].s;
        if (dist > 0) {
            v[pos].walk = dist;
            st.push(v[pos]);
        } else if (dist < 0) {
            while(!st.empty()) {
                Stone s = st.top();
                st.pop();
                int walk = min(s.walk, abs(dist));
                s.walk -= walk;
                dist += walk;
                ans.pb(Ans(s.idx, v[pos].idx, walk));

                if (s.walk > 0) {
                    st.push(s);
                    break;
                } else if (dist == 0) {
                    break;
                }
            }
            if (dist != 0) {
                can = false;
                break;
            }
        }
        pos++;
    }

    if (!st.empty()) {
        can = false;
    }
    if (can) {
        printf("YES\n");
        printf("%d\n", (int)ans.size());
        for (int i = 0; i < (int)ans.size(); i++) {
            printf("%d %d %d\n", ans[i].i, ans[i].j, ans[i].d);
        }
    } else {
        printf("NO\n");
    }
    return 0;
}
