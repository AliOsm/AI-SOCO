#pragma GCC target("avx2")
#pragma GCC optimize("O3")
   
#include <x86intrin.h>
#include <bits/stdc++.h>   
 
using namespace std;
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define al 0x3F3F3F3F
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)3e5 + 123;
const ll inf = (ll)1e9 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int k, ten[20];

inline int sum (int l, int r) {
   return r * (r + 1) / 2 - l * (l - 1) / 2;
} 

inline int check (int x) {
   int it = 0, res = 0;
   while (x >= ten[it]) {
      res += sum (x - ten[it] + 1, x) * (it + 1);
      x -= ten[it];
      it ++;            
   }
   res += sum (1, x) * (it + 1);
   return res;
}

inline int f (int x, int need) {
   int it = 0, res = 0;
   while (need > ten[it] * (it + 1)) {
      need -= ten[it] * (it + 1);
      it ++;
   }     
   int st = ten[it] / 9;
   int ch = (need - 1) / (it + 1);
   st += ch;
   need -= ch * (it + 1);
   need = it - need + 2;
   //if (x == 2) cout << st << ' ' << need, exit (0);
   while (need > 1) st /= 10, need --;
   return st % 10;
}

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   ten[0] = 9;      
   for (int i = 1; i <= 18; i ++) ten[i] = ten[i - 1] * 10ll;
   int q;
   cin >> q;
   while (q --) {
      cin >> k;
      int l = 1, r = inf, ans = 0;
      while (l <= r) {
         int mid = l + r >> 1;
         if (check (mid) >= k) r = mid - 1, ans = mid;
         else l = mid + 1;
      }      
      cout << f (ans, k - check (ans - 1)) << endl;
   }
}

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
   //cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
                          