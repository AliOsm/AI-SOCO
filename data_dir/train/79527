#include <bits/stdc++.h>
using namespace std;

template<class T>
vector<int> compress(T first, T last) {
	vector<typename iterator_traits<T>::value_type> cv(first, last);
	vector<int> ret(cv.size());
	sort(cv.begin(), cv.end());
	cv.erase(unique(cv.begin(), cv.end()), cv.end());
	for (int i = 0; first != last; first++, i++)
		ret[i] = lower_bound(cv.begin(), cv.end(), *first) - cv.begin();
	return ret;
}

struct BIT {
	vector<long long> dat;
	BIT(int n) : dat(n) {}
	void update(int k, long long x) {
		k++;
		for (; k < dat.size(); k += k & -k) dat[k] += x;
	}
	long long sumFront(int k) {
		k++;
		long long ret = 0;
		for (; k > 0; k -= k & -k) ret += dat[k];
		return ret;
	}
	long long sumBack(int k) {
		return sumFront(dat.size() - 2) - sumFront(k - 1);
	}
};

int n;
long long K;
vector<int> a;
long long inv;
BIT bitL(101010);
BIT bitR(101010);

void addLeft(int k) {
	inv += bitL.sumBack(a[k] + 1);
	inv += bitR.sumFront(a[k] - 1);
	bitL.update(a[k], 1);
}

void removeRight(int k) {
	inv -= bitL.sumBack(a[k] + 1);
	inv -= bitR.sumFront(a[k] - 1);
	bitR.update(a[k], -1);
}

int main() {
	cin >> n >> K;
	a.resize(n);
	for (int i = 0; i < n; i++) scanf("%d", &a[i]);
	a = compress(a.begin(), a.end());

	for (int i = 0; i < n; i++) {
		inv += bitR.sumBack(a[i] + 1);
		bitR.update(a[i], 1);
	}

	long long ans = 0;
	int j = 0;
	addLeft(0);
	for (int i = 1; i < n; i++) {
		while (j < n && j < i) removeRight(j++);
		while (j < n && inv > K) removeRight(j++);
		ans += n - j;
		addLeft(i);
	}
	cout << ans << endl;
}
