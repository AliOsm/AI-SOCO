#include "bits/stdc++.h"

using namespace std;
using LL = long long;

constexpr int N = 1e5 + 5;
constexpr LL INF = 1e18;

int main() {
	ios::sync_with_stdio(false); cin.tie(nullptr);

	int n, m, k;
	cin >> n >> m >> k;

	vector< pair< int, pair< int, int>>> e;
	for (int i = 0; i < m; i++) {
		int x, y, w;
		cin >> x >> y >> w;
		e.push_back(make_pair(w, make_pair(x, y)));
	}

	sort(begin(e), end(e));

	vector< int> vert;
	for (int i = 0; i < min(m, k); i++) {
		vert.push_back(e[i].second.first);
		vert.push_back(e[i].second.second);
	}

	sort(begin(vert), end(vert));
	vert.erase(unique(begin(vert), end(vert)), end(vert));
	int cntv = vert.size();

	vector< vector< LL>> dist(cntv, vector<LL>(cntv, INF));
	for (int i = 0; i < cntv; i++) dist[i][i] = 0;

	for (int i = 0; i < min(m, k); i++) {
		int x = lower_bound(begin(vert), end(vert), e[i].second.first) - begin(vert);
		int y = lower_bound(begin(vert), end(vert), e[i].second.second) - begin(vert);
		dist[x][y] = dist[y][x] = min(dist[x][y], (LL) e[i].first);
	}

	for (int k = 0; k < cntv; k++) {
		for (int i = 0; i < cntv; i++) {
			for (int j = 0; j < cntv; j++) {
				dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
			}
		}
	}

	vector< LL> res;
	for (int i = 0; i < cntv; i++) {
		for (int j = 0; j < i; j++) {
			res.push_back(dist[i][j]);
		}
	}

	sort(begin(res), end(res));

	cout << res[k - 1] << endl;
}