#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000000007;

// ----------------------------------------------------------------------------------------------------------

bool Cycle, In[305], Mark[305];
ll A[305], B[305], Coin[305], To[305], N, Q, T;
ll DP[305][100005];
vector<int> V;

void dfs(int n)
{
    if(Mark[n])
    {
        Cycle = true;
        return;
    }

    Mark[n] = true;
    if(To[n]) dfs(To[n]);
}

int main()
{
    cin >> N >> Q >> T;
    f(i,1,N) cin >> A[i];
    f(i,1,Q)
    {
        int a,b;
        scanf("%d %d", &a, &b);
        To[a] = b;
        In[b] = true;
    }
    f(i,1,N) if(!Mark[i] && !In[i]) dfs(i);
    f(i,1,N) if(!Mark[i]) Cycle = true;
    if(Cycle)
    {
        cout << 0;
        return 0;
    }
    int idx = 1;
    f(i,1,N) if(!In[i])
    {
        int l = idx;
        int n = i;
        while(n)
        {
            Coin[idx++] = n;
            n = To[n];
        }
        int sum = 0;
        f(p,l,idx-1)
        {
            int c = Coin[p];
            sum += A[c];
            int m = idx-p-1;
            T -= m*A[c];
            B[p] = sum;
        }
    }

    if(T<0)
    {
        cout << 0;
        return 0;
    }

    DP[0][0] = 1;

    f(i,1,N) f(t,0,T)
    {
        DP[i][t] = DP[i-1][t];
        if(t-B[i] >= 0) DP[i][t] += DP[i][t-B[i]];
        if(DP[i][t] > MOD) DP[i][t] -= MOD;
    }

    cout << DP[N][T];
}
