#include <bits/stdc++.h>
using namespace std;
#define eb emplace_back
#define emp emplace
#define fi first
#define se second
typedef long long ll;
typedef pair<int, int> ii;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

const int N = 1123;

int dir[4][2] = {{0, 1},{1, 0},{-1, 0},{0, -1}};
int n, m, p;
char g[N][N];
int dist[N][N], ans[10], s[10];
queue<ii> q[10];

int main(void) {
	ios_base::sync_with_stdio(false); cin.tie(0);

	memset(dist, 0x3f, sizeof dist);

	cin >> n >> m >> p;

	for (int i = 1; i <= p; i++) cin >> s[i];

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> g[i][j];

			if (g[i][j] != '.') {
				if (g[i][j] != '#') {
					q[g[i][j]-'0'].emp(i, j);
					dist[i][j] = 0;
				}
			}
		}
	}

	int turn = 1;
	set<int> sq;

	while (sq.size() < p) {
		int ini_dist = -1;
		if (q[turn].size()) ini_dist = dist[q[turn].front().fi][q[turn].front().se];
		
		while (q[turn].size() and dist[q[turn].front().fi][q[turn].front().se] != ini_dist + s[turn]) {
			int ux, uy; tie(ux, uy) = q[turn].front();
			q[turn].pop();

			for (int i = 0; i < 4; i++) {
				int nx = ux + dir[i][0], ny = uy + dir[i][1];

				if (nx >= 0 and nx < n and ny >=0 and ny < m and g[nx][ny] == '.') {
					dist[nx][ny] = dist[ux][uy] + 1;
					q[turn].emp(nx, ny);
					g[nx][ny] = g[ux][uy];
				}
			}
		}

		if (q[turn].size() == 0) sq.emp(turn);

		turn++;
		if (turn == p+1) turn = 1;
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			ans[g[i][j]-'0']++;
		}
	}

	for (int i = 1; i <= p; i++) cout << ans[i] << " ";
	cout << endl;

	return 0;
}

