#include <bits/stdc++.h>

using namespace std;

#define inf 0x7fffffff
#define ll long long

const int MAX = 212345;

// int n;
// int a[MAX];
// int par[MAX];
// int res[MAX];
// ll dist[MAX];
// vector<int> path;
// vector<pair<int, int>> g[MAX];

// void dfs(int node){

// 	int l = lower_bound(path.begin(), path.end(), a[node], [&](int x, ll y){ return (dist[node] - dist[x]) > y;}) - path.begin();

// 	res[par[node]]++;
// 	res[par[path[l]]]--;

// 	for(auto x : g[node]){
// 		int u = x.first;
// 		int w = x.second;
// 		dist[u] = dist[node] + w;
// 		path.push_back(u);
// 		dfs(u);
// 		path.pop_back();
// 		res[node] += res[u];
// 	}
// }


int n, m, maze[55][55], vis[55][55];
int cur_i, cur_j, cur_color;


auto valid = [&](int i, int j){
	return i >= 0 && i < n && j >= 0 && j < m && !vis[i][j] && maze[i][j] == cur_color;
};

int dfs(int i, int j){

	if(i == cur_i && cur_j == j && vis[i][j]){
		return 0;
	}

	int res = -inf;
	for(int ii = -1; ii <= 1; ++ii){
		for(int jj = -1; jj <= 1; ++jj){
			if(abs(ii) == abs(jj)) continue;

			int dx = i + ii;
			int dy = j + jj;

			if(!valid(dx, dy)) continue;

			vis[dx][dy] = true;

			res = max(res, 1 + dfs(dx, dy));
		}
	}

	return res;
}


int main(int argc, char const *argv[])
{

	cin.tie(0);
	cin.sync_with_stdio(0);
	
	#ifdef Cyborg101
		freopen("input.txt", "r", stdin);
		freopen("output.txt", "w", stdout);
	#endif

	
	cin >> n >> m;

	for(int i = 0; i < n; ++i){
		for(int j = 0; j < m; ++j){
			char x;
			cin >> x;
			maze[i][j] = x - 'A';
		}
	}


	for(int i = 0; i < n; ++i){
		for(int j = 0; j < m; ++j){
			cur_i = i; cur_j = j; cur_color = maze[i][j];
			memset(vis, 0, sizeof(vis));
			int res = dfs(i, j);
			if(res >= 4){
				cout << "Yes" << endl;
				return 0;
			}
		}
	}


	cout << "No" << endl;


	return 0;
}