#include<bits/stdc++.h>
using namespace std;
#define fr first
#define sc second
typedef long long ll;
typedef double ld;
typedef pair<int,int> p2;
typedef pair<ll,p2> p3;
typedef vector<int> vi;
const ll Mod = 7 + 1e9;
const ll INF32 = 5 + 2e9;
const ll INF64 = 1 + 5e3;
const ll MAX = 5+ 1e5;
int N,M,a[MAX];
p3 T[4*MAX];
p3 merge(p3 a,p3 b)
{
    int f = min(a.fr,b.fr);
    int s = ( a.fr == f ? a.sc.fr : 0) + ( b.fr == f ? b.sc.fr : 0 );
    int t = __gcd(a.sc.sc,b.sc.sc);
    return p3(f,p2(s,t));
}
p3 build(int x = 1,int l = 1,int r = N)
{
    if(l == r)
        return T[x] = p3(a[l],p2(1,a[l]));
    int mid = l+r>>1 ,x1 = x<<1 ,x2 = x<<1 |1;
    p3 c1 = build(x1,l,mid);
    p3 c2 = build(x2,mid+1,r);
    return T[x] = merge(c1,c2);
}
p3 Z = p3(INF32,p2(0,0));
p3 query(int L,int R,int x = 1,int l = 1,int r = N)
{
    if( l > R || r < L )
        return Z;
    if( L <= l && r <= R )
        return T[x];
    int mid = l+r>>1 ,x1 = x<<1 ,x2 = x<<1 |1;
    p3 c1 = query(L,R,x1,l,mid);
    p3 c2 = query(L,R,x2,mid+1,r);
    return merge(c1,c2);
}
int main()
{
    cin >> N;
    for(int i=1;i<=N;i++)
        cin >> a[i];
    build();
    cin >> M;
    while(M--)
    {
        int L,R; cin >> L >> R;
        p3 res = query(L,R);
        if( res.fr == res.sc.sc )
            cout << R-L+1 - res.sc.fr << endl;
        else cout << R-L+1 << endl;
    }
    return 0;
}
