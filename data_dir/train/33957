#include<bits/stdc++.h>
#define ll long long
#define acm ios::sync_with_stdio(0),ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
#define pb push_back
#define pf push_front
#define F first
#define S second
#define mod 1000000007
#define rw freopen("input.txt","r",stdin),freopen("output.txt","w",stdout);
#define f(x) return cout<<x<<"\n",0;
using namespace std;
struct node
{
    node* child[2]= {};
    int prefix=0;
}*head=new node();
inline void add(deque<int>dq)
{
    node* cur=head;
    for (auto u:dq)
    {
        if (cur->child[u]==nullptr)
            cur->child[u]=new node();
        cur=cur->child[u];
        ++cur->prefix;
    }
}
inline void del(deque<int>dq)
{
    node* cur=head;
    for (auto u:dq)
    {
        cur=cur->child[u];
        if (cur->prefix)
            --cur->prefix;
    }
}
inline vector<int>see(deque<int>dq)
{
    vector<int>v;
    node* cur=head;
    for (auto u:dq)
    {
        bool zero=false,one=false;
        if (cur->child[0]!=nullptr)
        {
            if (cur->child[0]->prefix)
                zero=true;
        }
        if (cur->child[1]!=nullptr)
        {
            if (cur->child[1]->prefix)
                one=true;
        }
        if (u==1)
        {
            if (zero)
            {
                cur=cur->child[0];
                v.pb(1);
            }
            else
            {
                cur=cur->child[1];
                v.pb(0);
            }
        }
        else
        {
            if (one)
                cur=cur->child[1],v.pb(1);
            else
                cur=cur->child[0],v.pb(0);
        }
    }
    return v;
}
inline deque<int> construct(int num)
{
    deque<int>dq;
    if (num)
    {
        while(num>0)
        {
            dq.pf(num%2);
            num/=2;
        }
    }
    while(dq.size()<30)
        dq.pf(0);
    return dq;
}
int main()
{
    acm;
    int q;
    cin>>q;
    add(construct(0));
    while(q--)
    {
        char ch;
        int x;
        cin>>ch>>x;
        deque<int>dq=construct(x);
        if (ch=='+')
            add(dq);
        else if (ch=='-')
            del(dq);
        else if (ch=='?')
        {
            vector<int>v=see(dq);
            reverse(v.begin(),v.end());
            ll sum=0;
            for (int k=0; k<(int)v.size(); ++k)
                sum+=(v[k]*powl(2,k));
            cout<<sum<<"\n";
        }
    }
    return 0;
}