//satyaki3794
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <cassert>
#include <cstring>
#include <iomanip>
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define LEFT(n) (2*(n))
#define RIGHT(n) (2*(n)+1)

using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;

ll pwr(ll base, ll p, ll mod = MOD){
ll ans = 1;while(p){if(p&1)ans=(ans*base)%mod;base=(base*base)%mod;p/=2;}return ans;
}



int n, sz, trie[1000002][26], ends_here[1000002], sufflink[1000002], node_idx[100002];
char str[1000002];
int ticks, arr[1000002], lo[1000002], hi[1000002];
vector<int> adj[1000002];


void insert(int idx){

    int curr = 0;
    for(int i=0;str[i]!='\0';i++){
        int dir = str[i] - 'a';
        if(trie[curr][dir] == -1)
            trie[curr][dir] = ++sz;
        curr = trie[curr][dir];
    }

    ends_here[curr] = idx;
    node_idx[idx] = curr;
}



void bfs(){

    sufflink[0] = 0;
    queue<int> qq;
    for(int i=0;i<26;i++)
        if(trie[0][i] != -1){
            sufflink[trie[0][i]] = 0;
            qq.push(trie[0][i]);
            adj[0].pb(trie[0][i]);
    // cout<<"added edge from 0 to "<<trie[0][i]<<endl;
        }

    while(!qq.empty()){

        int v = qq.front();
        qq.pop();
        for(int dir=0;dir<26;dir++){

            int vv = trie[v][dir];
            if(vv == -1)    continue;
            
            int j = sufflink[v];
            while(j > 0 && trie[j][dir] == -1)  j = sufflink[j];
            if(trie[j][dir] != -1)  sufflink[vv] = trie[j][dir];

            if(sufflink[vv] != vv){
    // cout<<"added edge from "<<sufflink[vv]<<" to "<<vv<<endl;
                adj[sufflink[vv]].pb(vv);
            }
            qq.push(vv);
        }
    }
}


int next_state(int v, int dir){
    int j = v;
    while(j > 0 && trie[j][dir] == -1)  j = sufflink[j];
    if(trie[j][dir] != -1)  j = trie[j][dir];
    return j;
}


void dfs(int v){
    lo[v] = ++ticks;
    for(int i=0;i<(int)adj[v].size();i++){
        dfs(adj[v][i]);
    }
    hi[v] = ticks;
}


int BIT[1000002];
bool present[100005];

void update(int idx, int val){
    while(idx <= ticks){
        BIT[idx] += val;
        idx += idx & (-idx);
    }
}

int query(int idx){
    int ans = 0;
    while(idx){
        ans += BIT[idx];
        idx -= idx & (-idx);
    }
    return ans;
}


int main(){

    // ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    int q;
    scanf("%d%d", &q, &n);

    sz = 0;
    memset(trie, -1, sizeof(trie));
    for(int i=1;i<=n;i++){
        scanf("%s", str);
        insert(i);
        present[i] = true;
    }
    bfs();

    ticks = 0;
    dfs(0);

    for(int i=1;i<=n;i++){
        int node_in_trie = node_idx[i];
        update(lo[node_in_trie], 1);
        update(hi[node_in_trie]+1, -1);
    }

    while(q--){

        scanf("%s", str);
        if(str[0] == '+'){

            int idx = 0;
            for(int i=1;str[i]!='\0';i++)
                idx = idx*10 + str[i]-'0';
            if(present[idx])    continue;

            present[idx] = true;
            int node_in_trie = node_idx[idx];
            update(lo[node_in_trie], 1);
            update(hi[node_in_trie]+1, -1);
        }
        else if(str[0] == '-'){

            int idx = 0;
            for(int i=1;str[i]!='\0';i++)
                idx = idx*10 + str[i]-'0';
            if(!present[idx])    continue;

            present[idx] = false;
            int node_in_trie = node_idx[idx];
            update(lo[node_in_trie], -1);
            update(hi[node_in_trie]+1, 1);
        }
        else{

            int curr = 0;
            ll ans = 0;
            for(int i=1;str[i]!='\0';i++){
                curr = next_state(curr, str[i]-'a');
                ans += query(lo[curr]);
            }

            printf("%lld\n", ans);
        }
    }

    return 0;
}




