#include<bits/stdc++.h>
using namespace std;

const int maxn = 1e5+10;
int n, arr[maxn];
struct data{
	int gcd, cnt;
	data() {}
	data(int g, int c) {
		gcd = g, cnt = c;
	}
}tree[maxn<<2];

void build(int node, int L, int R) {
	if(L == R) {
		tree[node].gcd = arr[L];
		tree[node].cnt = 1;
		return;
	} int mid = (L+R)>>1, lc = node<<1, rc = lc|1;
	build(lc,L,mid); build(rc,mid+1,R);
	tree[node].gcd = __gcd(tree[lc].gcd,tree[rc].gcd);
	tree[node].cnt = (tree[node].gcd == tree[lc].gcd ? tree[lc].cnt : 0) + 
			(tree[node].gcd == tree[rc].gcd ? tree[rc].cnt : 0);
}

data get(int node, int L, int R, int l, int r) {
	if(r < L || R < l) return data(0,0);
	if(l <= L && R <= r) return tree[node];
	int mid = (L+R)>>1, lc = node<<1, rc = lc|1;
	data q1 = get(lc,L,mid,l,r), q2 = get(rc,mid+1,R,l,r);
	int g = __gcd(q1.gcd,q2.gcd);
	int c = (g == q1.gcd ? q1.cnt : 0) + (g == q2.gcd ? q2.cnt : 0);
	return data(g,c);
}


int main() {
	scanf("%d", &n);
	for(int i = 1; i <= n; i++)
		scanf("%d", &arr[i]);
	build(1,1,n);
	int q;
	scanf("%d", &q);
	while(q--) {
		int l, r;
		scanf("%d %d", &l, &r);
		data res = get(1,1,n,l,r);
		printf("%d\n", r-l+1-res.cnt);
	}
	return 0;
}
