#include <bits/stdc++.h>

using namespace std;

int n, m, k, q;

struct pixel {
    int x, y, time;
};
pixel arr[500*501];
bool cmp(pixel a, pixel b) {
    return a.time < b.time;
}
int pref[1001][1001];
long long query(int x1, int y1, int x2, int y2) {
    return pref[x2][y2]
         - (x1 ? pref[x1 - 1][y2] : 0)
         - (y1 ? pref[x2][y1 - 1] : 0)
         + (x1 && y1 ? pref[x1 - 1][y1 - 1] : 0);
}
bool f(int x) {
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= m; j++) pref[i][j] = 0;
    }
    for (int i = 1; i <= x; i++) {
        pref[arr[i].x][arr[i].y] = 1;
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            pref[i][j] += pref[i-1][j]+pref[i][j-1]-pref[i-1][j-1];
        }
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if(i+k-1>n||j+k-1>m)continue;
            if(query(i,j,i+k-1,j+k-1)==k*k)return 1;
        }
    }
    return 0;
}
int main()
{
    cin >> n >> m >> k >> q;
    for (int i = 1; i <= q; i++) {
        cin >> arr[i].x >> arr[i].y >> arr[i].time;
    }
    sort(arr+1,arr+1+q,cmp);
    int l = 1, r = q;
    if(!f(q)) {
        cout << -1;
        return 0;
    }
    while(l < r) {
        int mid = (l+r)/2;
        //while(arr[mid].time==arr[mid+1].time)mid++;
        if(f(mid)) {
            r = mid;
        } else {
            l = mid+1;
        }
    }
    cout << arr[l].time;
    return 0;
}
