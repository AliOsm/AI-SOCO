//--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR
//--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR--------PREPROCESSOR

// Important header files
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less
#include <iostream>
using namespace __gnu_pbds;
using namespace std;



#include <iostream>
#include<bits/stdc++.h>
using namespace std;
using namespace std::chrono;
#define REDL(a ,n) vll a(n);for(ll i=0;i<n;i++) cin>>a[i];
#define pb push_back
#define fi first
#define se second
#define mp make_pair
#define all(X)  X.begin() ,  X.end()
#define reset(X) memset(X, 0, sizeof(X))
#define f(a,b,c) for(ll a=b;a<c;a++)
//-----------------------------TEMPLATES------------------TEMPLATES---------------------------TEMPLATES---------------------------------
//-----------------------------TEMPLATES------------------TEMPLATES---------------------------TEMPLATES---------------------------------

//--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF----------------------------TYPEDEF
//--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF--------------TYPEDEF----------------------------TYPEDEF

typedef  long long ll;
typedef long double ld;
typedef pair<ll,ll> pll;
typedef pair<ll,ll> pii;
typedef vector<ll> vll;
// Declaring ordered_set
typedef tree<ll, null_type, less<ll>, rb_tree_tag,
        tree_order_statistics_node_update>
        ordered_set;

//--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS
//--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS--------------CONSTANTS

const ll INF=LLONG_MAX-100;
const ll mod=1000000007;
//const ll mod=998244353;





//------------------IGNOREABLE_CONTENT------------------IGNOREABLE_CONTENT------------------IGNOREABLE_CONTENT------------------IGNOREABLE_CONTENT



// To find GCD of a and b
ll gcd(ll a, ll b);

// To compute x raised to power y under modulo m
ll power(ll x, ll y, ll m);

// Function to find modular inverse of a under modulo m
// Assumption: m is prime
ll modInverse(ll a, ll m)
{
    ll g = gcd(a, m);
    if (g != 1)
        cout << "Inverse doesn't exist";
    else
    {
        // If a and m are relatively prime, then modulo inverse
        // is a^(m-2) mode m
        return power(a, m-2, m);
    }
}

// To compute x^y under modulo m
ll power(ll x, ll y, ll m)
{
    if (y == 0)
        return 1;
    ll p = power(x, y/2, m) % m;
    p = (p * p) % m;

    return (y%2 == 0)? p : (x * p) % m;
}

// Function to return gcd of a and b
ll gcd(ll a, ll b)
{
    if (a == 0)
        return b;
    return gcd(b%a, a);
}

ll binom_coef(int n ,int k)
{
    if(n-k<k)
        k=n-k;

    ll prod=1;
    ll denom=1;
    for(int i=k+1;i<=n;i++)
        prod=(prod*i)%mod;
    for(int i=1;i<=n-k;i++)
        denom=(denom*i)%mod;
    return (prod*modInverse(denom , mod))%mod;
}
const int maxn=1e5+10;
//code to  look for-----------------------------------------------------------------

//----------------------MAIN______________________________MAIN__________________MAIN

vector<pll> adj[maxn];
pair<pll, ll> first_edge;
bool global_flag;
bool visited[maxn];
void dfs(int start, int constraint)
{
    visited[start]=true;
    for(auto i:adj[start])
    {
        int next_node=i.fi;
        int cost=i.se;
        if(i.se<constraint)
        {
            if(!visited[next_node])
            dfs(next_node,constraint);
        }
    }

}






vector<int> tin(maxn), low(maxn);
int timer;

void dfs2(int v, int p = -1) {
    visited[v] = true;
    tin[v] = low[v] = timer++;
    for (auto teo : adj[v]) {
        int to=teo.fi;
        if (to == p) continue;
        if (visited[to]) {
            low[v] = min(low[v], tin[to]);
        } else {
            dfs2(to, v);
            low[v] = min(low[v], low[to]);
            if (low[to] > tin[v])
                if((v==first_edge.fi.fi&& to==first_edge.fi.se)||(v==first_edge.fi.se&& to==first_edge.fi.fi))
                {
                    global_flag=true;
                }
        }
    }
}

void find_bridges(int n) {
    timer = 0;
    tin.assign(n, -1);
    low.assign(n, -1);
    for (int i = 1; i <= n; ++i) {
        if (!visited[i])
            dfs2(i);
    }
}

signed main()
{


    auto start = high_resolution_clock::now();

    ios_base::sync_with_stdio(false);
    cin.tie(0);
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
    cout.tie(0);
    //----------------  --------------------------------------------------------------------------------
    int n, m;
    cin>>n>>m;
    bool flag1=true;
    for(int i=0;i<m;i++)
    {
        int a, b, e;
        cin>>a>>b>>e;
        if(flag1)
        {
            first_edge={{a,b},e};
            flag1=false;
        }
        else
        {
        adj[a].pb({b,e});
        adj[b].pb({a,e});
        }
    }

    ll mx=1000000000;
    ll mn=0;
    while(mn<mx)
    {
        ll mid=(mn+mx)/2;
        reset(visited);
        dfs(first_edge.fi.fi, mid);
        if(visited[first_edge.fi.se])
        {
            global_flag=true;
            mx=mid;
        }
        else
            mn=mid+1;
    }
    reset(visited);
    find_bridges(n);
    if(!global_flag)
        cout<<1000000000<<endl;
    else
    cout<<mn-1<<endl;
    //-------------------------------------
    //-----------------------------------------------------------


    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);

    cerr <<endl<<"Time in microseconds:" <<duration.count() <<endl<<"Time in seconds:"<<duration.count()/(1000000.0)<< endl;
}
