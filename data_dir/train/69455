#include <bits/stdc++.h>

#define f first
#define s second
#define mp make_pair
#define pp pop_back
#define ll long long

using namespace std;

const int N = 5555;

const int mod = 1e9 + 7;

const ll inf = 1e18;

void add(int &a, int b)
{
  a += b;
  if (a >= b) a -= mod;
}

int sum(int a, int b)
{
  add(a, b);
  return a;
}

int mult(int a, int b)
{
  return 1ll * a * b % mod;
}

ll n, x[N], a[N], b[N], c[N], d[N], s, e;

ll dp[2][2][N], D[2][2][N], ans = inf;

int main()
{
  ios_base::sync_with_stdio(0);
  #ifdef wws
    freopen("in", "r", stdin);
  #endif

  cin >> n >> s >> e;
  for (int i = 1;i <= n;i++) cin >> x[i];
  for (int i = 1;i <= n;i++)
  {
    cin >> a[i];
    a[i] += x[i];
  }
  for (int i = 1;i <= n;i++)
  {
    cin >> b[i];
    b[i] -= x[i];
  }
  for (int i = 1;i <= n;i++)
  {
    cin >> c[i];
    c[i] += x[i];
  }
  for (int i = 1;i <= n;i++)
  {
    cin >> d[i];
    d[i] -= x[i];
  }
  for (int i = 0;i < 2;i++)
    for (int j = 0;j < 2;j++)
      for (int k = 0;k <= n;k++)
        dp[i][j][k] = D[i][j][k] = inf;
  dp[0][0][0] = 0;
  for (int it = 1;it <= n;it++)
  {
    for (int i = 0;i < 2;i++)
    {
      for (int j = 0;j < 2;j++)
      {
        for (int k = 0;k <= n;k++)
        {
          ll now = dp[i][j][k];
          if (now >= inf) continue;
          if (it == s)
          {
            if (k > 0) D[1][j][k - 1] = min(D[1][j][k - 1], now + c[it]);
            D[1][j][k] = min(D[1][j][k], now + d[it]);
            if (it == n && j > 0 && k == 0) ans = min(ans, now + c[it]);
            continue;
          }
          if (it == e)
          {
            if (k > 0) D[i][1][k - 1] = min(D[i][1][k - 1], now + a[it]);
            D[i][1][k] = min(D[i][1][k], now + b[it]);
            if (it == n && i > 0 && k == 0) ans = min(ans, now + a[it]);
            continue;
          }
          // new path
          D[i][j][k + 1] = min(D[i][j][k + 1], now + d[it] + b[it]);
          // join one
          if (k > 0)
          {
            D[i][j][k] = min(D[i][j][k], now + b[it] + c[it]);
            D[i][j][k] = min(D[i][j][k], now + a[it] + d[it]);
          }
          if (i > 0)
          {
            if (k > 0) D[i][j][k - 1] = min(D[i][j][k - 1], now + a[it] + c[it]);
            D[i][j][k] = min(D[i][j][k], now + a[it] + d[it]);
          }
          if (j > 0)
          {
            if (k > 0) D[i][j][k - 1] = min(D[i][j][k - 1], now + a[it] + c[it]);
            D[i][j][k] = min(D[i][j][k], now + b[it] + c[it]);
          }
          if (k > 1) D[i][j][k - 1] = min(D[i][j][k - 1], now + a[it] + c[it]);
          if (it == n && i > 0 && j > 0 && k == 0) ans = min(ans, now + a[it] + c[it]);
        }
      }
    }
    for (int i = 0;i < 2;i++)
      for (int j = 0;j < 2;j++)
        for (int k = 0;k < n;k++)
        {
          dp[i][j][k] = D[i][j][k];
          D[i][j][k] = inf;
        }
  }
  cout << ans << endl;
  return 0;
}
