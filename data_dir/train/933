// Why am I so dumb? :c
// chrono::system_clock::now().time_since_epoch().count()
                                                  
#include<bits/stdc++.h>
//#include<ext/pb_ds/assoc_container.hpp>
//#include<ext/pb_ds/tree_policy.hpp>

#define pb push_back
#define mp make_pair

#define all(x) (x).begin(), (x).end()

#define fi first
#define se second

using namespace std;
//using namespace __gnu_pbds;

typedef long long ll;   
typedef pair<int, int> pii;
//template<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const int MAXN = 1050;
const bool SEND = 1;

vector<int> V[MAXN];

int alive[MAXN];

int n, k;

namespace Fake {
    int arr[MAXN];
    deque<int> Q;

    void prep() {
        for (int i = 1; i <= n; ++i) {
            scanf("%d", &arr[i]);
        }        
    }

    int add(int x) {
        bool ret = 0;

        for (int y : Q) {
            if (arr[y] == arr[x]) {
                ret = 1;                                
            }
        }

        Q.pb(x);

        if (Q.size() > k) {
            Q.pop_back();
        }

        return ret;
    }

    void reset() {
        while (!Q.empty()) {
            Q.pop_back();
        }
    }
};

int add(int x) {
    printf("? %d\n", ++x);
    fflush(stdout);

    if (!SEND) {
        return Fake::add(x);
    }
    else {
        char c;
        scanf(" %c", &c);
        return c == 'Y';        
    }
}

void reset() {
    printf("R\n");
    fflush(stdout);

    if (!SEND) {
        Fake::reset();
    }
}

void solve() {
    scanf("%d %d", &n, &k);

    if (!SEND) {
        Fake::prep();
    }

    int cnt = n / k;

    for (int i = 0; i < n; ++i) {
        alive[i] = 1;
    }

    for (int i = 0; i < cnt; ++i) {
        int delta = 0;
        reset();

        for (int j = 0; j < cnt; ++j) {
            int cur = (i + delta + cnt) % cnt;
            int st = cur * k;

            for (int ii = st; ii < st + k; ++ii) {
                if (alive[ii]) {
                    if (add(ii)) {
                        alive[ii] = 0;
                    }
                }
            }

            if (delta >= 0) {
                ++delta;
            }

            delta *= -1;
        }
    }

    printf("! %d\n", accumulate(alive, alive + n, 0));
    fflush(stdout);                                           
}

int main() {
    int tt = 1;

    while (tt--) {
        solve();
    }

    return 0;
}
