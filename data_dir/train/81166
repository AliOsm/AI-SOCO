#include<bits/stdc++.h>
using namespace std;
const int MOD = 1e9+7;
const int MX=200;
int n , cnt[MX] , mod;
long long mul[12] , tot , mask[12] , p[65];
long long pre[200][200];
typedef long long ll;
int pos = 0;
void bf(int x){
    if(x+x > mod) {
        tot += mul[pos];
        tot%=MOD;
        return;
    }
    bf(x+1);
    if( (mask[pos]&p[x]) || cnt[x] == 0) return;
    ++pos;
    mask[pos] = 0;
    mul[pos] = 1ll * mul[pos-1] *cnt[x]; mul[pos]%=MOD;
    if(pos == 6){
        tot += mul[pos];
        tot%=MOD;
        --pos;
        return;
    }
    unsigned long long t;
    t = mask[pos-1];
    for(int j=0;j+j<=mod;j++)
        if( (t & p[j]) )
            mask[pos] |= pre[j][x];
    bf(x+1);
    --pos;

}
int main(){
    cin>>n>>mod>>n;
    p[0] = 1;
    for(int j=1;j<64;j++) p[j] = 2 * p[j-1];
    for(int j=0;j+j<=mod;j++){
        for(int x = 0 ; x + x <= mod ; x++){
            pre[j][x] |= p[j];
            int bit;
            bit = j + x; bit%=mod; bit = min(bit , mod - bit);
            pre[j][x] |= p[bit];
            bit = j - x + mod; bit%=mod; bit = min(bit , mod - bit);
            pre[j][x] |= p[bit];
        }
    }
    while(n--){
        int x;
        scanf("%d",&x);
        x%=mod;
        cnt[x]++;
        if(mod - x != x) cnt[mod-x]++;
    }

    mul[0] = 1;
    mask[0] = 1;
    bf(1);
    //++tot; tot%=MOD;
    cout<<tot<<endl;
}
