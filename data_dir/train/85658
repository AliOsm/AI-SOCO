/* In The Name Of God */
#include <bits/stdc++.h>

# define xx first
# define yy second
# define pb push_back
# define pp pop_back
# define eps 1e-9

using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef vector<int> vint;

const int maxn = 200+10;

bool mark[maxn];
int n,m,number_of_comp;
int comp[maxn];
vint order;
vint adj[maxn],bak[maxn];

void add_edge (int a, int b){
	adj[a].push_back(b);
	bak[b].push_back(a);
}

void dfs(int v){
	mark[v] = true;
	for(int i=0; i<(int)adj[v].size(); i++)if(!mark[adj[v][i]])
		dfs(adj[v][i]);
	order.push_back(v);
}

void DFS (int v){
	mark[v] = true;
	comp[v] = number_of_comp;
	for(int i=0; i<(int)bak[v].size(); i++)if(!mark[bak[v][i]])
		DFS(bak[v][i]);
}

int main(){
	ios_base::sync_with_stdio (0);
	cin >> n >> m;
	for(int i=0; i<m; i++){
		int x,y,z; cin >> x >> y >> z;
		x--;y--;
		x<<=1;y<<=1;
		if(z){
			add_edge(x^1 , y^1);
			add_edge(y , x);
			add_edge(x , y);
			add_edge(y^1 , x^1);
		}
		else{
			add_edge(x , y^1);
			add_edge(y , x^1);
			add_edge(x^1 , y);
			add_edge(y^1 , x);
		}
	}
	for(int i=0; i<2*n; i++)if(!mark[i])
		dfs(i);
	memset(mark,0,sizeof mark);
	for(int i = (int)order.size()-1; i>=0; i--)if(!mark[order[i]]){
		DFS(order[i]);
		number_of_comp++;
	}
	for(int i=0; i<n; i++)if(comp[2*i] == comp[2*i+1]){
		cout << "Impossible" << endl;
		return 0;
	}
	vector<int> ans;
	for(int i=0; i<n; i++)if(comp[2*i] > comp[2*i+1])
		ans.push_back(i+1);
	cout<<ans.size()<<endl;
	for(auto tmp : ans)
		cout<<tmp<<' ';
	cout<<endl;
	return 0;
}
