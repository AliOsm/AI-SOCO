


#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("Ofast")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
#define int long long int
typedef complex<long double> cd;
const long double pi=acos(-1);
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <db, db> pdd;
typedef vector<int> vi;
typedef vector<vector<int> > matrix;

#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))

#define fi first
#define se second
#define endl "\n"
#define debug(x) (cerr << #x << ": " << x << "\n")
#define setbits(x) __builtin_popcount(x)
#define setbitsll(x) __builtin_popcountll(x)
#define all(x) x.begin(),x.end()
#define pii pair<int,int>

inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p%m*p%m)%m;if(n%2) return (p%m*a%m)%m;else return p;}
const ll MOD =998244353;
const ll hell=1000000007;
const int INF = 1e17;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
typedef tree<int, null_type, less<int>, rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

auto seed = chrono::high_resolution_clock::now().time_since_epoch().count();
std::mt19937 rng(seed);
const int N=1000005;
int vl1[N+1],vl2[N+1];
int st[4*N];
int lazy[4*N];
void update(int i,int l,int r,int qs,int qe,int v)
{
    if(lazy[i]!=0)
    {
        st[i]+=lazy[i];
        if(l!=r)
        {
            lazy[2*i+1]+=lazy[i];
            lazy[2*i+2]+=lazy[i];
        }
        lazy[i]=0;
    }
    if(qs>r||qe<l)
        return;
    if(qs<=l&&qe>=r)
    {
        st[i]+=v;
        if(l!=r)
        {
            lazy[2*i+1]+=v;
            lazy[2*i+2]+=v;
        }
        lazy[i]=0;
        return;
    }
    int m=(l+r)/2;
    update(2*i+1,l,m,qs,qe,v);
    update(2*i+2,m+1,r,qs,qe,v);
    st[i]=max(st[2*i+1],st[2*i+2]);
}
int query(int i,int l,int r,int qs,int qe)
{
    if(lazy[i]!=0)
    {
        st[i]+=lazy[i];
        if(l!=r)
        {
            lazy[2*i+1]+=lazy[i];
            lazy[2*i+2]+=lazy[i];
        }
        lazy[i]=0;
    }
    if(qs>r||qe<l)
        return -INF;
    if(qs<=l&&qe>=r)
        return st[i];
    int m=(l+r)/2;
    return max(query(2*i+1,l,m,qs,qe),query(2*i+2,m+1,r,qs,qe));
}
void solve()
{
    int n,m,p;
    cin>>n>>m>>p;
    for(int i=0;i<=N;i++)
    {
        vl1[i]=INF;vl2[i]=INF;
    }
    int a,b,c;
    for(int i=0;i<n;i++)
    {
        cin>>a>>c;
        vl1[a]=min(vl1[a],c);
    }
    for(int i=0;i<m;i++)
    {
        cin>>b>>c;
        vl2[b]=min(vl2[b],c);
    }
    for(int i=N-1;i>=0;i--)
    {
        vl1[i]=min(vl1[i],vl1[i+1]);
        vl2[i]=min(vl2[i],vl2[i+1]);
    }
    for(int i=0;i<N;i++)
    {
        update(0,0,N-1,i,i,-vl2[i]);
    }
    int x,y,z;pair<int,pair<int,int>> pr[p];
    for(int i=0;i<p;i++)
    {
        cin>>x>>y>>z;
        pr[i]=m1(x,m1(y,z));
    }
    sort(pr,pr+p);
    int j=0;int ans= -INF;
    for(int i=1;i<N;i++)
    {
        while(j<p&&pr[j].first<i)
        {
            update(0,0,N-1,pr[j].second.first+1,N-1,pr[j].second.second);
            j++;
        }
        ans=max(ans,query(0,0,N-1,0,N-1)-vl1[i]);
    }
    cout<<ans<<endl;
    
    
}

int32_t main()
{
    
    IOS;
    //FILE *fin = freopen("in","r",stdin);
    //FILE *fout = freopen("out","w",stdout);
    
    int t;
    t=1;
   // cin>>t;
    while(t--)
    {
        solve();
    }
    return 0;
}
