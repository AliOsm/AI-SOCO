//CONTEST SOURCE
#include <bitset>
#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <cstdio>
#include <queue>
#include <set>
using namespace std;
#define ll long long
#define x first
#define y second
#define pii pair<int, int>
#define pdd pair<double, double>
#define L(s) (int)(s).size()
#define VI vector<int>
#define all(s) (s).begin(), (s).end()
#define pb push_back
#define mp make_pair
#define inf 1000000000
int p[404404][20];
ll sp[404404][20];
ll w[404404];
int n = 2, last = 0;
int main() {
  memset(p, -1, sizeof(p));
  p[1][0] = 0;
  w[0] = 1LL * inf * inf;
  for(int lev = 19; lev >= 0; --lev) {
    sp[0][lev] = sp[1][lev] = 1LL * inf * inf;
  }
  sp[1][0] = 0;

  int q;
  scanf("%d", &q);
  while(q--) {
    int tp; scanf("%d", &tp);
    if (tp == 1) {
      ll pp, qq; scanf("%I64d%I64d", &pp, &qq);
      int R = pp ^ last;
      int W = qq ^ last;
      for(int lev = 19; lev >= 0; --lev) {
        if (p[R][lev] != -1 && w[p[R][lev]] < W) {
          R = p[R][lev];
        }
      }
      //cerr << oldR << "->" << R;
      if (w[R] < W) R = p[R][0];

      //cerr << "->" << R << endl;

      p[n][0] = R;
      sp[n][0] = W;
      w[n] = W;
      for(int lev = 1; lev < 20; ++lev) {
        if (p[n][lev - 1] == -1) {
          p[n][lev] = -1;
          sp[n][lev] = 1LL * inf * inf;
        } else {
          p[n][lev] = p[p[n][lev - 1]][lev - 1];
          sp[n][lev] = sp[n][lev - 1] + sp[p[n][lev - 1]][lev - 1];
        }
      }
      //for(int lev = 0; lev < 3; ++lev) {
      //  cerr << n << " " << lev << " " << p[n][lev] << " " << sp[n][lev] << endl;
      //}
      //cerr << endl;
      ++n;
    } else {
      ll pp, qq; scanf("%I64d%I64d", &pp, &qq);
      int R = pp ^ last;
      ll X = qq ^ last;

      last = 0;
      for(int lev = 19; lev >= 0; --lev) {
        if (sp[R][lev] <= X) {
          last += (1 << lev);
          X -= sp[R][lev];
          R = p[R][lev];
        }
      }

      printf("%d\n", last);
    }
  }
}
