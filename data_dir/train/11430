#pragma GCC optimize("O3")
#include <bits/stdc++.h>

using namespace std;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifdef _offline
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // _offline
}

const int INF = 1e9 + 7;
const int MAXN = 1e5 + 100;
int level[MAXN], sz[MAXN];
vector<int> g[MAXN];

void get_sizes(int u, int p) {
    sz[u] = 1;
    for (int to : g[u]) {
        if (level[to] != -1 || to == p) {
            continue;
        }
        get_sizes(to, u);
        sz[u] += sz[to];
    }
}

int get_centroid(int u, int p, int n) {
    int ind = -1;
    for (int to : g[u]) {
        if (level[to] != -1 || to == p) {
            continue;
        }
        if (ind == -1 || sz[to] > sz[ind]) {
            ind = to;
        }
    }
    if (ind == -1 || sz[ind] * 2 <= n) {
        return u;
    }
    else {
        return get_centroid(ind, u, n);
    }
}

void build(int c) {
    for (int to : g[c]) {
        if (level[to] != -1) {
            continue;
        }
        get_sizes(to, c);
        int nc = get_centroid(to, c, sz[to]);
        level[nc] = level[c] + 1;
        build(nc);
    }
}

signed main() {
    FAST_IO();
    fill(level, level + MAXN, -1);
    int n;
    cin >> n;
    for (int i = 0; i < n - 1; ++i) {
        int u, v;
        cin >> u >> v;
        g[u - 1].push_back(v - 1);
        g[v - 1].push_back(u - 1);
    }
    get_sizes(0, -1);
    int c = get_centroid(0, -1, sz[0]);
    level[c] = 0;
    build(c);
    for (int i = 0; i < n; ++i) {
        cout << char('A' + level[i]) << ' ';
    }
}
