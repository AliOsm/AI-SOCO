#pragma GCC optimize("Ofast")
#pragma GCC optimize("SEX_ON_THE_BEACH")
//	#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,tune=native")
//#pragma GCC optimize("fast-math")
#define _CRT_SECURE_NO_WARNINGS
#include <set>
#include <map>
#include <deque>
#include <cmath>
#include <queue>
#include <random>
#include <cstring>
#include <bitset>
#include <time.h>
#include <string>
#include <cstdio>
#include <vector>
#include <cstdlib>
#include <iomanip>
#include <cassert>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
#define itn int
///#define endl '\n'
#define mp make_pair
#define pbc push_back
#define pob pop_back()
#define empb emplace_back
#define sp system("pause")
#define queuel queue<long long>
#define matrix vector<vector<ll>>
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define pin(p) cin >> p.first >> p.second;
#define rev(v) reverse(v.begin(), v.end());
#define mx(v) max_element(v.begin(), v.end());
#define mn(v) min_element(v.begin(), v.end());
#define dig(c) (c >=' 0' && c <= '9') ? 1 : 0
#define sout(s, c) for (auto i : s) cout << i << c;
#define pout(p) cout << p.first << " " << p.second;
#define er(v, l, r) erase(v.begin() + l, v.begin() + r);
#define vin(v) for (ll i = 0; i < v.size(); ++i) cin >> v[i];
#define vout(v, c) for (int i = 0; i < v.size(); ++i) cout << v[i] << c;
#define pushi(v, a) for (int i = 0; i < a.size(); ++i) v.push_back(a[i]);
#define fastio() ios_base::sync_with_stdio(0); cout.tie(0); cin.tie(0);
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
using namespace std;
/*▄███████▀▀▀▀▀▀███████▄
░▐████▀▒ЗАПУСКАЕМ▒▀██████▄
░███▀▒▒▒▒▒ДЯДЮ▒▒▒▒▒▒▀█████
░▐██▒▒▒▒▒БОГДАНА▒▒▒▒▒████▌
░▐█▌▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████▌
░░█▒▄▀▀▀▀▀▄▒▒▄▀▀▀▀▀▄▒▐███▌
░░░▐░░░▄▄░░▌▐░░░▄▄░░▌▐███▌
░▄▀▌░░░▀▀░░▌▐░░░▀▀░░▌▒▀▒█▌
░▌▒▀▄░░░░▄▀▒▒▀▄░░░▄▀▒▒▄▀▒▌
░▀▄▐▒▀▀▀▀▒▒▒▒▒▒▀▀▀▒▒▒▒▒▒█
░░░▀▌▒▄██▄▄▄▄████▄▒▒▒▒█▀
░░░░▄█████████████  █▒▒▐▌
░░░▀███▀▀████▀█████▀▒▌
░░░░░▌▒▒▒▄▒▒▒▄▒▒▒▒▒▒▐
░░░░░▌▒▒▒▒▀▀▀▒▒▒▒▒▒▒▐*/
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
//++--++--++--++--++--++--++--++--++--+--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
const int MAXN = 20088;
const ll inf = 1000000001;
const ll INF = 2e18;
const ld EPS = 1e-7;
const ll mod = inf + 6;
const int mod13 = 1000003;
const ld PI = acos(-1.0);
#define int ll
ll rv(ll a, ll m)
{
	if (a == 1) return 1;
	
	return (1 - rv(m% a, a) * m) / a + m;
}
vector<int> gauss(vector<vector<int>> a)
{
	int n = a.size();
	int m = a[0].size() - 1;
	vector<int> w(m, -1);
	for (int c = 0, r = 0; c < m && r < n; ++c)
	{
		int ss = r;
		for (int i = r; i < n; ++i) if (abs(a[i][c]) > abs(a[ss][c])) ss = i;
		if (a[ss][c] == 0)
		{
			continue;
		}
		for (int i = c; i <= m; ++i)
		{
			swap(a[ss][i], a[r][i]);
		}
		w[c] = r;
		for (int i = 0; i < n; ++i)
		{
			if (i^ r)
			{
				
				int ololo = a[i][c] * rv(a[r][c], mod13) % mod13;
				for (int j = c; j <= m; ++j)
				{
					a[i][j] = (a[i][j] - a[r][j] * ololo% mod13 + mod13) % mod13;
				}
			}
		}
		r++;
	}
	vector<int> ans(m);
	for (int i = 0; i < m; ++i)
	{
		if (w[i] > -1)
		{
			ans[i] = a[w[i]][m] * rv(a[w[i]][i], mod13) % mod13;
		}
	}
	return ans;
}

int ox;
int get(int x, vector<int> poly)
{

	int sum = 0;
	int kek = x;
	for (int i : poly)
	{
		sum += kek * i;
		sum %= mod13;
		kek *= x;
		kek %= mod13;
	}
	return sum + ox;
}
signed main()
{
	fastio();
	vector<vector<int>> cs(10, vector<int>(11));
	cout << "? 0" << endl;
	cin >> ox;
	for (int i = 0; i < 10; ++i)
	{
		int now = i + 1;
		cout << "? " << i + 1 << endl;
		int y;
		cin >> y;
		for (int j = 0; j < 10; ++j)
		{
			cs[i][j] = now;
			cs[i][j] %= mod13;
			now *= i + 1;
			now %= mod13;
		}
		cs[i][10] = (y - ox + mod13) % mod13;
	}

	vector<int> ans = gauss(cs);
	//vout(ans, ' ');
	for (int i = 0; i < mod13; ++i)
	{
		if (get(i, ans) % mod13 == 0)
		{
			cout << "! " << i << endl;	//	sp;
			return 0;
		
		}
	}
	cout << "! " << -1 << endl;
	//sp;
}