#include <iostream>
#include <cmath>
#include <string>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <fstream>
#include <cassert>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <stack>
#include <functional>
#include <numeric>
#include <ctime>
#include <cstdlib>
#include <sstream>

using namespace std;

#define f first
#define s second
#define mp make_pair
#define pb push_back
#define pii pair<int, int>
#define pll pair<long long, long long>
#define y1 stupid_y1
#define ll long long
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x)*(x))
#define sz(a) (int)a.size()
#define file "a"

const int inf = (int)1e9;
const double eps = 1e-9;
const double pi = acos(-1.0);

vector < int > g[100100];
int n, m;
int dep[100100];
int cc;
vector < int > comps[100100];
ll dp[100100][2];
bool used[100100];
ll fup[100100][2];

void dfs(int v, int p, int depth, vector < int > &comp){
    dep[v] = depth;
    comp.pb(v);
    forit(it, g[v]){
        int to = *it;
        if ( to == p ) continue;
        if ( dep[to] == -1 ) dfs(to, v, depth+1, comp);
        else {
            int len = dep[v] - dep[to] + 1;
            if ( len&1 ){
                cout <<0<<" "<<1<<endl;
                exit(0);
            }
        }
    }   
}

void calc(int v, int p){
    used[v] = true;
    dp[v][0] = 1;
    forit(it, g[v]){
        int to = *it;
        if ( to == p ) continue;
        if ( used[to] ) continue;
        calc(to, v);
        dp[v][1] += dp[to][0];
        dp[v][0] += dp[to][1];
    }   
}

void calc2(int v, int p){
    used[v] = true;
    forit(it, g[v]){
        int to = *it;
        if ( to == p ) continue;
        if ( used[to] ) continue;
        fup[to][0] += fup[v][1];
        fup[to][1] += fup[v][0];
        fup[to][0] += dp[v][1] - dp[to][0];
        fup[to][1] += dp[v][0] - dp[to][1];
        calc2(to, v);   
    }   
}

ll get(vector < int > &a){
    calc(a[0], -1);
    forit(it, a) used[*it] = false;
    calc2(a[0], -1);

    ll sum = 0;
    forit(it, a){
        ll t = dp[*it][0] + fup[*it][0];
        sum += t-1;
    }   
    return sum/2;
}

int main () {
    #ifdef LOCAL
    freopen(file".in", "r", stdin);
    freopen(file".out", "w", stdout);
    #endif

    scanf("%d%d", &n, &m);

    for (int i=0;i<m;i++){
        int a, b;
        scanf("%d%d", &a, &b);
        g[a].pb(b);
        g[b].pb(a);
    }

    memset(dep, -1, sizeof(dep));
    for (int i=1;i<=n;i++){
        if ( dep[i] == -1 ) dfs(i, -1, 0, comps[cc++]);
    }

    memset(used, 0, sizeof(used));
    ll ans = 0;
    for (int i=0;i<cc;i++){
        if ( sz(comps[i]) > 2 ){
            ans += get(comps[i]);               
        }
    }

    if ( ans > 0 ){
        cout <<1<<" "<<ans<<endl;
        return 0;
    }


    for (int i=0;i<cc;i++){
        if ( sz(comps[i]) > 1){
            ans += (n-2);               
        }   
    }

    if ( ans > 0 ){
        cout <<2<<" "<<ans<<endl;
        return 0;
    }

    cout <<3<<" "<<cc*1ll*(cc-1)*(cc-2)/6<<endl;



    #ifdef LOCAL
    cerr << (double)clock() * 1.0 / CLOCKS_PER_SEC << endl;
    #endif

    return 0;
}







