#include <bits/stdc++.h>
#define ll long long
#define X first
#define Y second
#define pb push_back
#define Scan(a) scanf("%I64d", &a)
#define CLR(a) memset(a,0,sizeof(a))
#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORE(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)

using namespace std;

typedef pair<ll, ll> II;
typedef vector<II> vi;

string s, rev;
int n, z[5000010], dp[5000010];

struct HashModule {
    ll mod;
    vector<ll> pw, h;
    void init(string s, ll base, ll p) {
        mod = p;
        pw.resize(s.length()+1);
        h.resize(s.length());
        pw[0] = 1;
        FOR(i,1,s.length()) pw[i] = (pw[i-1] * base) % mod;
        h[0] = s[0];
        FOR(i,1,s.length()-1) h[i] = (h[i-1]*base + s[i]) % mod;
    }
    ll query(ll l, ll r) {
		if (!l) return h[r];
		return (h[r] - h[l-1] * pw[r-l+1] + mod*mod) % mod;
	}
};

struct DoubleHash {
    HashModule hm1, hm2;
    void init(string s, ll base1, ll mod1) {
        hm1.init(s, base1, mod1);
    }
    ll query(ll l, ll r) {
        return hm1.query(l,r);
    }
} dhashs, dhashrev;

int main()
{
    ios::sync_with_stdio(0);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    cin >> s;
    rev = s;
    reverse(rev.begin(), rev.end());
    n = s.length();
    dhashs.init(s, 2311LL, (ll) 1e9 + 7);
    dhashrev.init(rev, 2311LL, (ll) 1e9 + 7);
    dp[0] = 1;
    ll res = 1;
    FOR(i,1,n-1) {
        int start = i/2+1;
        int len = i-start+1;
        if (dhashs.query(0,len-1) == dhashrev.query(n-1-(start+len-1), n-1-start)) dp[i] = dp[len-1]+1;
        res += dp[i];
    }
    cout << res;
    return 0;
}
