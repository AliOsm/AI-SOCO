//#pragma GCC optimize("O3")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
#define sz(x) (int)(x).size()
#define mem(a,v) memset((a), (v), sizeof (a))
#define enl printf("\n")
#define case(t) printf("Case #%d: ", (t))
#define ni(n) scanf("%d", &(n))
#define nl(n) scanf("%I64d", &(n))
#define nai(a, n) for (int _i = 0; _i < (n); _i++) ni(a[_i])
#define nal(a, n) for (int _i = 0; _i < (n); _i++) nl(a[_i])
#define pri(n) printf("%d\n", (n))
#define prl(n) printf("%I64d\n", (n))
#define pii pair<int, int>
#define pil pair<int, long long>
#define pll pair<long long, long long>
#define vii vector<pii>
#define vil vector<pil>
#define vll vector<pll>
#define vi vector<int>
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef cc_hash_table<int,int,hash<int>> ht;
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> oset;
const double pi = acos(-1);
const int MOD = 1e9 + 7;
const int INF = 1e9 + 7;
const int MAXN = 1e6 + 5;
const double eps = 1e-9;
ll a[MAXN];
 
void solve() {
  ll n, m; scanf("%I64d %I64d", &n, &m);
  ll sm = 0;
  for (int i = 0; i < m; i++) {
    nl(a[i]);
    sm += a[i];
  }
  if (sm < n) {
    printf("-1\n");
    return;
  }
  if (sm == n) {
    printf("0\n");
    return;
  }
  multiset<ll> tmp;
  for (int i = 0; i < m; i++)
    tmp.insert(a[i]);
  int ans = 0;
  for (int i = 0; i < 63; i++) {
    if (tmp.empty()) break;
    if ((n>>i) & 1) {
      if (tmp.count(1ll<<i)) {
        tmp.erase(tmp.find(1ll<<i));
      } else {
        auto it = tmp.lower_bound(1ll<<i);
        ll v = *it;
        tmp.erase(it);
        while (v>(1ll<<i)) {
          ans++;
          v /= 2;
          tmp.insert(v);
        }
      }
    }
    int c = 0;
    while (sz(tmp) && *tmp.begin() == (1ll<<i))
      c++, tmp.erase(tmp.begin());
    for (int j = 0; j < c/2; j++)
      tmp.insert(1ll<<(i+1));
  }
  printf("%d\n", ans);
}
 
int main() {
  int t; ni(t); while (t--) solve();
  return 0;
}