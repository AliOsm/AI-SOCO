#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define fi first
#define se second

typedef long long ll;
typedef long double ld;

mt19937 rnd(chrono::system_clock::now().time_since_epoch().count());

const int maxn=(int)1e6+30;
const int inf=(int)1e9+5;
const int mod=998244353;
const ll llinf=(ll)1e18+5;
const ld pi=acos(-1.0);

char s[maxn];
char t[maxn];

int type[20][maxn];
int last[maxn];
int cnt[maxn];
int start[maxn];
int lg[maxn];
int order[maxn];

int main() {
  ios_base::sync_with_stdio(0);

  lg[1] = 0;
  for (int i = 2; i < maxn; ++i) {
    lg[i] = lg[i / 2] + 1;
  }

  cin >> (s + 1);
  cin >> (t + 1);
  int n = strlen(s + 1);
  int m = strlen(t + 1);

  int cnt0 = 0, cnt1 = 0;
  for (int i = 1; i <= n; ++i) {
    if (s[i] == '0') cnt0++;
    else cnt1++;
  }

  for (int k = 0; (1 << k) <= m; ++k) {
    if (k == 0) {
      int z = 0;
      memset(last, -1, sizeof last);
      for (int i = 1; i <= m; ++i) {
        if (last[t[i] - 'a'] == -1) {
          last[t[i] - 'a'] = ++z;
        }
        type[k][i] = last[t[i] - 'a'];
      }
      continue;
    }

    for (int i = 1; i + (1 << k) - 1 <= m; ++i) {
      order[i] = i;
    }
    sort(order + 1, order + 1 + m - (1 << k) + 1, [&](int i, int j) {
      return type[k - 1][i] < type[k - 1][j] ||
            (type[k - 1][i] == type[k - 1][j] && type[k - 1][i + (1<<k) / 2] < type[k - 1][j + (1<<k) / 2]);
    });
    int z = 0;
    for (int i = 1; i <= m - (1 << k) + 1; ++i) {
      if (i == 1) {
        type[k][order[i]] = ++z;
        continue;
      }
      int b = order[i];
      int a = order[i - 1];
      if (type[k - 1][a] != type[k - 1][b] || type[k - 1][a + (1<<k) / 2] != type[k - 1][b + (1<<k) / 2]) {
        ++z;
      }
      type[k][b] = z;
    }

  }

  vector < pair <int, int> > pairs;
  int res = 0;
  for (int len0 = 1; len0 * cnt0 <= m; ++len0) {
    int tot1 = m - len0 * cnt0;
    if (tot1 == 0 || tot1 % cnt1 != 0) continue;
    int len1 = tot1 / cnt1;

    bool ok = true;

    int i0, i1;
    i0 = i1 = -1;
    int l = 1;

    for (int j = 1; j <= n; ++j) {
      if (s[j] == '0') {
        if (i0 == -1) i0 = l;
        int r = l + len0 - 1;
        int k = lg[r - l + 1];
        if (type[k][l] != type[k][i0] || type[k][r - (1 << k) + 1] != type[k][i0 + len0 - 1 - (1 << k) + 1]) {
          ok = false;
        }
        l += len0;
      } else {
        if (i1 == -1) i1 = l;
        int r = l + len1 - 1;
        int k = lg[r - l + 1];
        if (type[k][l] != type[k][i1] || type[k][r - (1 << k) + 1] != type[k][i1 + len1 - 1 - (1 << k) + 1]) {
          ok = false;
        }
        l += len1;
      }
    }

    if (len0 == len1) {
      int k = lg[len0];
      if (type[k][i0] == type[k][i1] &&
          type[k][i0 + len1 - 1 - (1 << k) + 1] == type[k][i1 + len1 - 1 - (1 << k) + 1]) {
        ok = false;
      }
    }
    if (ok) res++;
  }
  cout << res << endl;
  return 0;
}