#include <bits/stdc++.h>
using namespace std;
const int N = 5005;
bool vis[N][N];
int n, k;
int arr[N];
bool sure[N];
bool kill[N];
int cnt = 0;

int main() {
	//freopen("in.txt", "rt", stdin);
	//memset(memo, -1, sizeof memo);
	scanf("%d %d", &n, &k);
	for (int i = 0; i < n; ++i) {
		scanf("%d", arr + i);
	}
	for (int i = n - 1; i >= 0; --i) {
		sure[i] = (arr[i] == 100);
		sure[i] |= sure[i + 1];
		kill[i] = (arr[i] > 0);
		kill[i] |= kill[i + 1];
	}
	queue<pair<int, int>> q;
	q.push(make_pair(0, 1));
	cnt++;
	vis[0][1] = 1;
	while (k--) {
		int s = q.size();
		while (s--) {
			int l = q.front().first, nxt = q.front().second;
			q.pop();
			if (nxt >= n)
				continue;
			int ls = 0, le = 1, ns = 0, ne = 1;
			if (sure[nxt])
				ls = 1;
			else if (!kill[nxt])
				le = 0;
			if (arr[l] == 100)
				ns = 1;
			else if (arr[l] == 0)
				ne = 0;
			for (int i = ls; i <= le; ++i) {
				for (int j = ns; j <= ne; ++j) {
					int a = l, b = nxt;
					if (j) {
						++b;
					}
					if (i) {
						a = b;
						++b;
					}
					if (!vis[a][b]) {
						vis[a][b] = 1;
						q.push( { a, b });
					}
				}
			}
		}
		cnt += (int) q.size();
	}
	printf("%d", cnt);
}
