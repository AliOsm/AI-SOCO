#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
#define debug(_x)                     std::cerr << (#_x) << " = " << (_x) << '\n' << std::flush;
#else
#define debug(_x)                     {}
#endif
#define endl "\n"
template<typename Tp>
inline void outarr(Tp _begin, Tp _end, const char* _delim = " ") {
    for (Tp current = _begin; current != _end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = long long;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
vector<pii> ans;

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    int t;
    cin >> t;
    string s;
    while (t--) {
        ans.clear();
        int n, k;
        cin >> n >> k >> s;
        --k;
        for (int i = 0, last = n - 1; i < (n >> 1); ++i) {
            int pos = s.rfind(')', last);
            if (pos < last) {
                reverse(next(begin(s), pos), next(begin(s), last + 1));
                ans.emplace_back(pos + 1, last + 1);
            }
            --last;
            if (k > 0) {
                if (s[last] == ')') {
                    int pos2 = s.rfind('(', last);
                    reverse(next(begin(s), pos2), next(begin(s), last + 1));
                    ans.emplace_back(pos2 + 1, last + 1);
                }
                --last;
                --k;
            }
        }
        cout << sz(ans) << endl;
        for (auto [l, r] : ans) {
            cout << l << ' ' << r << endl;
        }
    }

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}
