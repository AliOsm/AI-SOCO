#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

#define erep(i, x, n) for (auto i = x; i<=(ll)(n); i++)
#define rep(i, x, n) for(auto i = x; i<(ll)(n); i++)
#define all(v) ((v).begin()), ((v).end())
#define sz(v) ((int)((v).size()))
#define mod(n, m) (((n%m) + m)%m)
#define reset(n, m) memset(n, m, sizeof n)
#define endl '\n'

ll stress(ll a, ll b)
{
	ll mn = LLONG_MAX, idx = -1, curr, gcd;
//	cout << a << " " << b << endl;
	rep(i, 0, 1e3)
	{
		gcd = __gcd(a + i, b + i);
		curr = ((a + i) * (b + i)) / gcd;

		if (curr < mn)
			mn = curr, idx = i;
	}
	cout << a << " " << b << " ";
	return idx;
}

// 626847384 677950930
ll a, b;

pair<ll, ll> get(ll i)
{
	ll to = (a + i - 1) / i;
	to = to * i - a;

	ll lcm = ((a + to) * (b + to)) / __gcd(a + to, b + to);

	return
	{	lcm, to};
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

//	srand(time(0));
//	ll a = rand() % 1000000000 + 1, b = rand() % 1000000000 + 1;
//	erep(i, 1, 100)
//	{
//		erep(j, i, 100)
//		{
//			cout << stress(i, j) << endl;
//		}
//	}
//	return 0;
//	while (true)
//	{
////		cin >> a >> b;
//
//		if (a > b)
//			swap(a, b);
//
//		ll diff = b - a;
//
//		ll to = (a + diff - 1) / diff;
//		to = to * diff - a;
////		cout << to << endl;
//		ll x = stress(a, b);
//		if (to != x)
//		{
//			cout << a << " " << b << endl;
//			cout << to << " " << x << endl;
//			return 0;
//		}
//
//	}
//
	cin >> a >> b;

	if (a > b)
		swap(a, b);
	
	if (b%a == 0)
		return cout << 0, 0;

	ll diff = b - a;
	pair<ll, ll> mn =
	{ LLONG_MAX, LLONG_MAX };
	for (ll i = 1; i * i <= diff; i++)
	{
		if (diff % i == 0)
		{
//			if (!(a % i == 0 && b % i == 0))
			mn = min(mn, get(i));
//			if (!(a % (diff / i) == 0 && b % (diff / i) == 0))
			mn = min(mn, get(diff / i));
		}
	}

	cout << mn.second << endl;
	return 0;
}
