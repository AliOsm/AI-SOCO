// #pragma GCC optimize("Ofast")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
// #pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define ordered_set                                                            \
  tree<int, null_type, less<int>, rb_tree_tag,                                 \
       tree_order_statistics_node_update>
#define ll int
#define ld long double
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define pdd pair<ld, ld>
const ll M = 2e5 + 5;
ll G[200][200],T[200][200];
int main()
{
    ll n,m,i,j;
    cin>>n>>m;
    bool f=0;
    for(i=1;i<=n;i++)
        for(j=1;j<=m;j++)
        {
            cin>>G[i][j];
            T[i][j]=G[i][j];
        }
    vector<ll> r,c;
    for(i=1;i<=n;i++)
    {
        ll mn=1000;
        for(j=1;j<=m;j++)
            mn=min(mn,G[i][j]);
        for(j=1;j<=m;j++)
            G[i][j]-=mn;
        for(j=1;j<=mn;j++)
            r.pb(i);
    }
    for(i=1;i<=m;i++)
    {
        ll mn=1000;
        for(j=1;j<=n;j++)
            mn=min(mn,G[j][i]);
        for(j=1;j<=n;j++)
            G[j][i]-=mn;
        for(j=1;j<=mn;j++)
            c.pb(i);
    }
    for(i=1;i<=n;i++)
        for(j=1;j<=m;j++)
        {
            if(G[i][j])
            {
                cout<<"-1\n";
            
                return 0;
            }
            G[i][j]=T[i][j];
        }
    vector<ll> r1,c1;
    for (i = 1; i <= m; i++) {
      ll mn = 1000;
      for (j = 1; j <= n; j++)
        mn = min(mn, G[j][i]);
      for (j = 1; j <= n; j++)
        G[j][i] -= mn;
      for (j = 1; j <= mn; j++)
        c1.pb(i);
    }
     for(i=1;i<=n;i++)
    {
        ll mn=1000;
        for(j=1;j<=m;j++)
            mn=min(mn,G[i][j]);
        for(j=1;j<=m;j++)
            G[i][j]-=mn;
        for(j=1;j<=mn;j++)
            r1.pb(i);
    }
    if(r.size()+c.size()>r1.size()+c1.size())
    {
        r=r1;c=c1;
    }
    cout<<r.size()+c.size()<<"\n";
    for(i=0;i<r.size();i++)
    {
 
            cout<<"row ";
        
        cout<<r[i]<<"\n";
    }
    for(i=0;i<c.size();i++)
    {
        cout<<"col ";
        cout<<c[i]<<"\n";
    }
    return 0;
}