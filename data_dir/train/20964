#include<bits/stdc++.h>
#define god dimasi5eks
#pragma GCC optimize("O3")
#define fi first
#define se second
#define pb push_back
#define pf push_front

// #define fisier 1

using namespace std;

typedef long long ll;

const int mod = 1000000007;
const double dancila = 3.14159265359; // PI 
const double eps = 1e-9;

struct data
{
    int ya, yb;
    int xa, xb;
};
data v[100002];
 
bool cmp1(data a, data b)
{
    if(a.xa == b.xa)
        return a.xb < b.xb;
    return a.xa < b.xa;
}
 
int n, aib[100002], aib2[100002];
int sortt[100002], sortt2[100002];
 
int cb(int val)
{
    int st = 1;
    int dr = n;
    int ans = 0;
    while(st <= dr)
    {
        int mid = (st + dr) / 2;
        if(sortt[mid] <= val)
            ans = mid, st = mid + 1;
        else
            dr = mid - 1;
    }
    return ans;
}
int cb2(int val)
{
    int st = 1;
    int dr = n;
    int ans = 0;
    while(st <= dr)
    {
        int mid = (st + dr) / 2;
        if(sortt2[mid] <= val)
            ans = mid, st = mid + 1;
        else
            dr = mid - 1;
    }
    return ans;
}
void add2(int nod, int poz)
{
    for(; nod <= n; nod += (nod & (-nod)))
        aib2[nod] = min(aib2[nod], poz);
}
void add(int nod, int poz)
{
    for(; nod <= n; nod += (nod & (-nod)))
        aib[nod] = max(aib[nod], poz);
}
int compute(int nod)
{
    int ans = 0;
    for(; nod; nod -= (nod & (-nod)))
        ans = max(ans, aib[nod]);
    return ans;
}
int compute2(int nod)
{
    int ans = (1<<30);
    for(; nod; nod -= (nod & (-nod)))
        ans = min(ans, aib2[nod]);
    return ans;
}
void tri()
{
    memset(aib, 0, sizeof(aib));
    for(int i = 0; i <= n; ++i)
        aib2[i] = (1<<30);
    for(int i = 1; i <= n; ++i)
        sortt[i] = v[i].ya;
    sort(sortt + 1, sortt + n + 1);
    for(int i = 1; i <= n; ++i)
        sortt2[i] = -v[i].ya;
    sort(sortt2 + 1, sortt2 + n + 1);
    set<pair<int, int> >s;
    for(int i = 1; i <= n; ++i)
    {
        while(!s.empty())
        {
            pair<int, int> xxox = *s.begin();
            if(xxox.fi < v[i].xa)
            {
                add(cb(v[xxox.se].ya), v[xxox.se].yb);
                add2(cb2(-v[xxox.se].ya), v[xxox.se].yb);
                s.erase(xxox);
            }
            else
                break;
        }
        if(compute(cb(v[i].ya)) >= v[i].ya || compute2(cb2(-v[i].ya)) <= v[i].yb)
        {
            cout << "NO";
            exit(0);
        }
        s.insert({v[i].xb, i});
    }
}
int main()
{

    #ifdef fisier
        ifstream f("input.in");
        ofstream g("output.out");
    #endif

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

	cin >> n;
    for(int i = 1; i <= n; ++i)
        cin >> v[i].xa >> v[i].xb >> v[i].ya >> v[i].yb;
    sort(v+1, v+n+1, cmp1);
    tri();
    for(int i = 1; i <= n; ++i)
    {
        swap(v[i].xa, v[i].ya);
        swap(v[i].xb, v[i].yb);
    }
    sort(v+1, v+n+1, cmp1);
    tri();
    cout << "YES";
    return 0;
}
