/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
using namespace std;

#define int long long
#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

const int N = 1e6+6;
int lp[N];

class BMath {
public:
	int get(int n){
		if (n && !(n & (n - 1))){
			int res = 0;
			while(n != 1) ++res, n >>= 1;
			return res;
		}
		int count = 0;
		while( n != 0)
		{
			n >>= 1;
			count += 1;
		}

		return count;
	}
	bool is_power(int n){
		return n && !(n & (n - 1));
	}
	void solve(std::istream& in, std::ostream& out) {
		int n; in >> n;
		int res = 1;
		vector<int> arr;
		if(n == 1){
			out << "1 0";
			return;
		}
		memset(lp, 0, sizeof lp);

		for(int i = 2; i < N; ++i){
			if(!lp[i]) for(int j = i; j < N; j += i) if(!lp[j]) lp[j] = i;
		}

		while(n != 1){
			int d = lp[n], cnt = 0;
			res *= d;
			while(n%d == 0) n/=d, ++cnt;
			arr.emplace_back(cnt);
		}

		sort(arr.begin(), arr.end());
		int ans = 1;
		if(arr[0] == arr.back() and is_power(arr[0])) --ans;
		ans += get(arr.back());

		out << res << ' ' << ans;
	}
};


int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	BMath solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
