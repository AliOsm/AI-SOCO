#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
    #define EXPECT(expr)
#endif

using namespace std;
typedef long long int int64; typedef unsigned long long int uint64;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
if(! a.size()){ size_t n; fin >> n; a.resize( n ); }
for( auto & u: a) fin >> u; return fin; }
/* @@@ ----------------------------------- */

string probA()
{
    vector< string > name;
    cin >> name;
    const auto n = name.size();

    size_t tic = 0; // where in alphabet we are;

    vector< bool > tie( n - 1, true ); // if i is tied with i + 1

    string imap( 'z' - 'a' + 1, ' ' );

    for( size_t j = 0; j < 102; ++ j )  // columns
        for( size_t i = 0; i + 1 < n; ++ i )
        {
            if( ! ( j < name[ i ].length() ) ) // thers is no name[ i ][ j ]
                tie[ i ] = false;

            if( tie[ i ] && ! ( j < name[ i + 1 ].length() ))
                return "Impossible";

            if( tie[ i ] && name[ i ][ j ] != name[ i + 1 ][ j ] )
            {
                const auto u = name[ i ][ j ] - 'a';
                const auto v = name[ i + 1 ][ j ] - 'a';

                if( imap[ u ] == ' ' && imap[ v ] == ' ' )
                {
                    imap[ u ] = 'a' + tic++;
                    imap[ v ] = 'a' + tic++;
                    tie[ i ] = false;
                }
                else if( imap[ v ] == ' ' )
                {
                    imap[ v ] = 'a' + tic++;
                    tie[ i ] = false;
                }
                else if( imap[ u ] == ' ' )
                {
                    // need to shift every thing
                    for( size_t l = 0; l < imap.size(); ++ l )
                        if( imap[ l ] != ' ' && imap[ v ] < imap[ l ] )
                            ++ imap[ l ];

                    imap[ u ] = imap[ v ] ++;
                    ++ tic;
                    tie[ i ] = false;
                }
                else if( imap[ v ] < imap[ u ] )
                    return "Impossible";
                else if( imap[ u ] < imap[ v ] )
                    tie[ i ] = false;
            }
        }

    // string xmap( 'z' - 'a' + 1, ' ');
    // iota( begin(xmap), end(xmap), 'a');
    // DEBUG( xmap );
    // DEBUG( imap );

    for( size_t i = 0; i < imap.size(); ++ i )
        if( imap[ i ] == ' ' )
            imap[ i ] = 'a' + tic++;

    // for( size_t i = 0; i < name.size(); ++ i )
    //     for( auto & a : name[ i ] )
    //         a = imap[ a - 'a' ];

    // DEBUG( name );

    vector< size_t > idx( imap.size() );
    iota( begin(idx), end(idx), 0 );
    const auto comp = [&imap]( const size_t i, const size_t j ) {
        return imap[ i ] < imap[ j ];
    };

    sort( begin(idx), end(idx), comp );

    string val;
    for( const auto i: idx )
        val.push_back( 'a' + i );

    return val;
}

int64 gcd( int64 a, int64 b )
{
    return ! b ? a : gcd( b, a % b );
}

int64 probB()
{
    size_t n;
    cin >> n;
    vector< int64 > jump( n ), cost( n );
    cin >> jump >> cost;

    map< int64, int64 > m;

    const int64 inf = numeric_limits< int64 >::max() / 2LL;
    int64 val = inf;

    vector< pair< int64, int64 > > buf;

    for( size_t i = 0; i < n; ++ i )
    {
        const auto a = jump[ i ];
        const auto b = cost[ i ];
        buf.clear();

        if( a != 1 )
            buf.push_back( make_pair( a, b ));
        else
            val = min(val, b);

        for( const auto & pr: m )
        {
            const auto g = gcd(a, pr.first );
            if( g == 1 )
                val = min(val,  b + pr.second );
            else
                buf.push_back( make_pair( g, b + pr.second ) );
        }

        for( const auto & pr: buf )
        {
            auto & ref = m[ pr.first ];
            ref = ref == 0 ? pr.second : min( pr.second, ref );
        }
    }

    DEBUG( m.size() );
    return val == inf ? -1 : val;
}


int main( const int argc, char * argv [])
{
    cout << probB();
    return EXIT_SUCCESS;
}
