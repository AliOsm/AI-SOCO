#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES

#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#include <random>
using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int64, int64> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<double, double> pdd;

const int INF = (int)(1e9+1e5);
const int64 LINF = (int64)(4e18);
const double EPS = 1e-6;
const int MOD = (int)1e9 + 7;
#define sq(x) ((x)*(x))
#define FAIL() ((*(int*)0)++)
#define y0 y00

const int MAXN = 100100;
int64 dist(pll a, pll b)
{
    return sq(a.first - b.first) + sq(a.second - b.second);
}
void solve()
{
    pll nt, wi;
    int64 R;
    cin >> R >> wi.first >> wi.second >> nt.first >> nt.second;
    if (dist(nt, wi) >= R * R)
    {
        cout << wi.first << ' ' << wi.second << ' ' << R;
        return;
    }
    else
    {
        long double dx, dy, root = sqrt((long double)dist(nt, wi));
        if (fabs(root) < EPS)
        {
            dx = 1, dy = 0;
        }
        else {
            dx = (wi.first - nt.first) / root, dy = (wi.second - nt.second) / root;
        }
        long double d = (R + root) / 2;
        long double ansx = dx * d + nt.first,
                    ansy = dy * d + nt.second;
        cout.precision(7);

        cout << fixed <<  ansx << ' ' << ansy << ' ' << d;
    }
}



int main()
{
    //srand(time(0)); testgen(10, 5, 30);

#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif
    ios_base::sync_with_stdio(false); cin.tie(0);
    int t = 1;
    for (int i = 0; i < t; ++i)
    {
        solve();
    }

    return 0;
}