#include <bits/stdc++.h>
using namespace std;

#define FilesX


#define rdi(i)                  scanf("%d", &i)
#define rdii(i, j)              scanf("%d%d", &i, &j)
#define rep(i, v)       for(int i=0;i<sz(v);++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define all(v)              ((v).begin()), ((v).end())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
typedef unsigned long long   ull;
const ll OO = 1e8;
const ll OOL = 1e18;

const double EPS = (1e-7);
int dcmp(double x, double y) {  return fabs(x-y) <= EPS ? 0 : x < y ? -1 : 1;   }

#define pb                  push_back
#define MP                  make_pair
#define P(x)                cout<<#x<<" = { "<<x<<" }\n"
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef pair<int, int>    pii;
typedef pair<ll, ll>      pll;
typedef vector<pair<int, int> > vii;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;
typedef vector<ll>        vl;
typedef vector<vector<ll> >     vvl;
typedef vector<pair<ll, ll> >   vll;


const int N = 100;

vector<int>prime;
bool mat[1000001]={0};
void generate_primes (int n)
{
    prime.clear();
    prime.push_back(2);
    for(int i=3;i*i<=n;i+=2)
    {
        if(mat[i]==0)
        {
            for(int j=i*i; j<n;j+=2*i)
                mat[j]=1;
        }
    }
    for(int i=3;i<=n;i+=2)
        if(!mat[i]) 
            prime.push_back(i);
}
ull gcd(ull a, ull b)
{
    for (;;)
    {
        if (a == 0) return b;
        b %= a;
        if (b == 0) return a;
        a %= b;
    }
}
ull lcm(ull a, ull b)
{
    ull temp = gcd(a, b);
    return temp ? (a / temp * b) : 0;
}

ull power(ull a, ull b){
    ll ans = 1;
    lp(i, b) ans *= a;
    return ans;
}

vvi g;
vvi ans;
vvi tag;
vvi vis;
int cnt;
set<int> st;

void dfs(int i, int j, int cn, int t){
    if(i < 0 || i >= g.size() || j < 0 || j >= g[0].size()) return;
    if(g[i][j] == 0) return;
    if(vis[i][j] == 1 && t == 0) return;
    if(vis[i][j] == 2 && t != 0) return;
    cnt++;
    if(t == 0)
        vis[i][j] = 1;
    else
        vis[i][j] = 2;
    ans[i][j] = cn;
    tag[i][j] = t;
    dfs(i + 1, j, cn, t);
    dfs(i, j + 1, cn, t);
    dfs(i - 1, j, cn, t);
    dfs(i, j - 1, cn, t);
}

int moves[2][4] = {{1, -1, 0, 0}, {0, 0, 1, -1}};

inline int calc(int i, int j){
    int cells = 0;
    st.clear();
    lp(k, 4){
        int u = i + moves[0][k];
        int v = j + moves[1][k];
        if(u < 0 || u >= g.size() || v < 0 || v >= g[0].size()) continue;
        if(st.find(tag[u][v]) != st.end()) continue;
        cells += ans[u][v];
        st.insert(tag[u][v]);
    }
    return (cells + 1) % 10;
}

int main()
{
#ifdef Files
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios::sync_with_stdio(false);
    
    int n, m; cin >> n >> m;
    g.resize(n, vi(m));
    vis.resize(n, vi(m, 0));
    tag.resize(n, vi(m, 0));
    ans.resize(n, vi(m, 0));
    lp(i, n){
        string s; cin >> s;
        lp(j, m){
            if(s[j] == '.') g[i][j] = 1;
            else g[i][j] = 0;
        }
    }
    int idx = 1;
    lp(i, n){
        lp(j, m){
            if(!vis[i][j]){
                cnt = 0;
                dfs(i, j, 1, 0);
                dfs(i, j, cnt, idx);
                idx++;
            }
        }
    }
    string s;
    lp(i, n){
        s.clear();
        lp(j, m){
            if(g[i][j] == 1) s.push_back('.');
            else s.push_back('0' + calc(i, j));
        }
        cout << s << endl;
    }
    
    return 0;
}