#include <iostream>
#include <algorithm>
using namespace std;

#define MAXN 200001
#define MOD 1000000007
long long T[MAXN+1];

long long getSum(int i)
{
	long long c=0;
	for(++i; i > 0 ; i -= (i & -i))
	{
		c += T[i];
		c %= MOD;
	}
	return c;
}
void set(int i,long long dif)
{
	for(++i; i < MAXN ; i += (i & -i))
	{
		T[i] += dif;
		T[i] %= MOD;
	}
}
void init()
{
	for(int i=0;i<MAXN;i++)
		T[i] = 0;
}

struct bus
{
	int start,end;
};

struct Event
{
	int val,id;
	bool isStart;
};

bool cmp(Event a,Event b)
{
	return a.val<b.val;
}

bool cmp2(bus a,bus b)
{
	if(a.end==b.end)
		return a.start<b.start;
	return a.end<b.end;
}

bus A[100000];
Event E[200000];

int main()
{
	init();
	int N,M;
	int high = 0;
	int low = (1<<30);
	cin >> N >> M;
	for(int i=0;i<M;i++)
	{
		cin >> A[i].start >> A[i].end;
		high = max(high,A[i].end);
		low = min(low,A[i].start);
		E[2*i].id = i;
		E[2*i].isStart = 1;
		E[2*i].val = A[i].start;
		E[2*i+1].id = i;
		E[2*i+1].isStart = 0;
		E[2*i+1].val = A[i].end;

	}
	sort(E,E+2*M,cmp);
	int nIndex = 1;
	for(int e=0;e<2*M;e++)
	{
		if(e>0)
			if(E[e].val > E[e-1].val)
				nIndex++;
		if(E[e].isStart)
			A[E[e].id].start = nIndex;
		else
			A[E[e].id].end = nIndex;
	}
	sort(A,A+M,cmp2);
	set(1,+1);
	long long ways;
	for(int i=0;i<M;i++)
	{
		ways = getSum(A[i].end-1) - getSum(A[i].start-1);
		ways %= MOD;
		if(ways < 0)
			ways += MOD;
		set(A[i].end,ways);
	}
	ways = getSum(A[M-1].end)-getSum(A[M-1].end-1);
	ways %= MOD;
	if(ways<0)
		ways += MOD;
	if(high < N)
		cout << 0 << endl;
	else if(low > 0)
		cout << 0 << endl;
	else
		cout << ways << endl;
	return 0;
}