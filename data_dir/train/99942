// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC optimize("Ofast")
// #pragma GCC target("avx,avx2,fma")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

const int N = 1003;

int n, m, res, col[N], wie[N];
char a[N][N], visc[N], visw[N];
bool vis[N][N];

void dfs(int i, int j) {
  vis[i][j] = true;
  for (int p = -1; p <= 1; ++p)
    for (int q = -1; q <= 1; ++q)
      if (p*p + q*q == 1) {
        int nx = i+p;
        int ny = j+q;
        if (nx < 1 || nx > n || ny < 1 || ny > m)
          continue;
        if (vis[nx][ny])
          continue;
        if (a[nx][ny] != '#')
          continue;
        dfs(nx, ny);
      }
}

int main() {
  init_ios();
  cin >> n >> m;
  bool pusc = false;
  bool pusw = false;
  bool bad = false;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= m; ++j) {
      cin >> a[i][j];
      if (a[i][j] == '#') {
        ++wie[i];
        ++col[j];
        if (visw[i] && a[i][j-1] == '.')
          bad = true;
        if (visc[j] && a[i-1][j] == '.')
          bad = true;
        if (!visw[i])
          visw[i] = true;
        if (!visc[j])
          visc[j] = true;
      }
    }
  }
  for (int i = 1; i <= n; ++i)
    if (wie[i] == 0)
      pusw = true;
  for (int j = 1; j <= m; ++j)
    if (col[j] == 0)
      pusc = true;
  if (bad) {
    cout<<"-1\n";
    return 0;
  }
  for (int i = 1; i <= n; ++i)
    if (!pusc && wie[i] == 0) {
      cout<<"-1\n";
      return 0;
    }
  for (int j = 1; j <= m; ++j)
    if (!pusw && col[j] == 0) {
      cout<<"-1\n";
      return 0;
    }
  for (int i = 1; i <= n; ++i)
    for (int j = 1; j <= m; ++j)
      if (a[i][j] == '#' && !vis[i][j]) {
        ++res;
        dfs(i, j);
      }
  cout<<res<<"\n";
}