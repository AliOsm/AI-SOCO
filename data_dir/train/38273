                /*"Success isn't permanent, failure isn't fatal,
                                      it's the courage to continue that counts"*/
#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
using namespace std;
// typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define ll long long 
#define scn(n) scanf("%d",&n)
#define lscn(n) scanf("%lld",&n)
#define lpri(n) printf("%lld",n)
#define pri(n) printf("%d",n)
#define pln() printf("\n")
#define priln(n) printf("%d\n",n)
#define lpriln(n) printf("%lld\n",n)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define pb push_back     
#define mp make_pair
#define F first
#define S second
#define gcd __gcd
#define inf INT_MAX
#define ninf INT_MIN
const ll mod=1e9+7;         
const int N=1e5+4;

string s;

int n;

int main()
{
    int t;
    
    t=1;
    
    while(t--)
    {
        int n,a,b,k;
        
        scn(n); scn(a); scn(b); scn(k);
        
        vector<int> v;
        
        int ans=0;
        
        rep(i,0,n)
        {
            int val;
            
            scn(val);
            
            val%=(a+b);
            
            if(val==0)
            val=a+b;
            
            if(val<=a)
            ans++;
            else
            {
                int here=val-a;
                
                here=(here+a-1)/a;
                
                v.pb(here);
            }
        }
        
        sort(v.begin(),v.end());
        
        for(auto it:v)
        {
            if(k<=0)
            break;
            
            if(it<=k)
            ans++;
            
            k-=it;
        }
        
        priln(ans);
    }
    return 0;
}