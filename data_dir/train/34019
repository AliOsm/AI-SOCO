//besmellah
#include <bits/stdc++.h>
using namespace std;

#define int long long
typedef pair <int, int> pii;

int32_t main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int Q;
	cin >> Q;
	while (Q--) {
		int n, T, a, b;
		cin >> n >> T >> a >> b;
		vector <pii> vec;
		for (int i = 0; i < n; i++) {
			int tmp;
			cin >> tmp;
			if (!tmp)
				tmp = a;
			else
				tmp = b;
			vec.push_back(pii(0, tmp));
		}
		for (int i = 0; i < n; i++)
			cin >> vec[i].first;
		sort(vec.begin(), vec.end());
		int ps[n], easy[n];
		ps[0] = vec[0].second;
		easy[0] = (vec[0].second == a);
		for (int i = 1; i < n; i++) {
			ps[i] = ps[i - 1] + vec[i].second;
			easy[i] = easy[i - 1] + (vec[i].second == a);
		}
		int ans = 0;
		for (int i = 1; i <= n; i++) {
			int t;
			if (i < n) t = vec[i].first;
			else t = T + 1;
			//cout << i << ' ' << t << ' ' << ps[i - 1] << endl;
			if (t == vec[i - 1].first)
				continue;
			if (ps[i - 1] > t - 1)
				continue;
			int x = (t - 1 - ps[i - 1]) / a;
			if (x <= easy[n - 1] - easy[i - 1]) {
				ans = max(ans, i + x);
			}
			else {
				x = easy[n - 1] - easy[i - 1];
				int y = (t - 1 - ps[i - 1] - x * a) / b;
				ans = max(ans, i + x + min(y, n - i - x));
			}
		}
		int x = (vec[0].first - 1) / a;
		if (x <= easy[n - 1]) {
			ans = max(ans, x);
		}
		else {
			x = easy[n - 1];
			int y = (vec[0].first - 1 - x * a) / b;
			ans = max(ans, x + min(y, n - x));
		}
		cout << ans << '\n';
	}
}
