#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
 
#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2
 
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound
 
using namespace std;
// using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;
 
// template <class T1, class cmp = less <T1>> using Tree = tree <T1, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
// template <class T1, class T2> using um = unordered_map <T1, T2>;
template <class T> using us = unordered_set <T>;
template <class T> using vec = vector <T>;
 
const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 101;
int k, n, a, b;
int deg[N];
int ptr[N];

vec <pii> ans;

bool was[N][N];

void input() {
    cin >> k;
}

void solve() {
    if(k % 2 == 0) {
        cout << "NO\n";
        return;
    }
    if(k == 1) {
        cout << "YES\n";
        cout << "2 1\n";
        cout << "1 2\n";
        return;
    }
    n = k + 2;
    for(int i = 1; i <= n; ++i) {
        ptr[i] = i + 1 > n? 1: i + 1;
    }
    for(int i = 1, j = 1; i <= n * k / 2; ++i, j = j + 1 > n? 1: j + 1) {
        ans.pb({j, ptr[j]});
        deg[j]++, deg[ptr[j]]++;
        ptr[j] = ptr[j] + 1 > n? 1: ptr[j] + 1;
    }
    for(int i = 1; i <= n; ++i) {
        if(deg[i] != k) {
            a = i;
            b = i + n;
        }
    }
    cout << "YES\n";
    cout << 2 * n << " " << 2 * len(ans) + 1 << "\n";
    for(pii p: ans) {
        cout << p.xx << " " << p.yy << "\n";
    }
    for(pii p: ans) {
        cout << p.xx + n << " " << p.yy + n << "\n";
    }
    cout << a << " " << b << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
