#include <bits/stdc++.h>
using namespace std;

vector<pair<int, int>> g[400010];
int a[400010], b[400010];
int dp1[400010], dp2[400010], dp_1[400010], dp_2[400010];
int calc[400010], id[400010], x[400010];

int main() {
    int n, m;
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; i++) {
        scanf("%d", &a[i]);
    }
    for (int i = 0; i < m; i++) {
        int v;
        scanf("%d%d", &x[i], &v);
        g[x[i]].push_back(make_pair(v, i));
    }
    memset(b, 0, sizeof(b));
    for (int i = 1; i <= n; i++) {
        b[i] = 2000000000;
    }
    for (int i = 1; i <= n; i++) {
        int id = lower_bound(b, b + i, a[i]) - b;
        for (auto &x : g[i]) {
            int id = lower_bound(b, b + i, x.first) - b;
            dp_1[x.second] = id;
        }
        dp1[i] = id;
        b[id] = min(b[id], a[i]);
    }
    memset(b, 0, sizeof(b));
    b[0] = 2000000000;
    for (int i = n; i >= 1; i--) {
        int id = lower_bound(b, b + n + 1 - i, a[i], greater<int>()) - b;
        for (auto &x : g[i]) {
            int id = lower_bound(b, b + n + 1 - i, x.first, greater<int>()) - b;
            dp_2[x.second] = id;
        }
        dp2[i] = id;
        b[id] = max(b[id], a[i]);
    }
    int res = *max_element(dp1 + 1, dp1 + n + 1);
    for (int i = 1; i <= n; i++) {
        if (dp1[i] + dp2[i] == res + 1) {
            calc[dp1[i]]++;
        }
    }
    for (int i = 1; i <= n; i++) {
        if (dp1[i] + dp2[i] == res + 1) {
            if (calc[dp1[i]] == 1) {
                id[i] = 2; 
            } else {
                id[i] = 1;
            }
        } else {
            id[i] = 0;
        }
    }

    for (int i = 0; i < m; i++) {
        int sol;
        if (id[x[i]] == 2) {
            sol = max(res - 1, dp_1[i] + dp_2[i] - 1);
        } else {
            sol = max(res, dp_1[i] + dp_2[i] - 1);
        }
        printf("%d\n", sol);
    }
    return 0;
}