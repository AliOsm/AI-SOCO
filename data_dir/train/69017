#include <bits/stdc++.h>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d %d", &a, &b)
#define sc3(a, b, c) scanf("%d %d %d", &a, &b, &c)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define db(x) cerr << #x << " == " << x << endl;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
const int INF = 0x3f3f3f3f;
const ll LINF = 0x3f3f3f3f3f3f3f3fll;
const ld pi = acos(-1);
const int MOD = 1e9 + 7;
const int N = 1e6 + 10;
int dp[N][22];
int n;
int d[N];
void build() {
  d[0] = d[1] = 0;
  for (int i = 2; i <= n; i++)
    d[i] = d[i >> 1] + 1;
  for (int j = 1; j < 22; j++) {
    for (int i = 0; i + (1 << (j - 1)) <= n; i++) {
      dp[i][j] = min(dp[i][j - 1], dp[i + (1 << (j - 1))][j - 1]);
    }
  }
}
int query(int i, int j) {
  int k = d[j - i];
  int x = min(dp[i][k], dp[j - (1 << k) + 1][k]);
  return x;
}
map<int, vi> saldo;
int bb(int b, int e, int s) {
  if (b == e)
    return b;
  int mid = (b + e + 1) / 2;
  if (query(saldo[s][b], saldo[s][mid]) == s)
    return bb(mid, e, s);
  return bb(b, mid - 1, s);
}

int main() {
  string s;
  cin >> s;
  n = s.size();
  for (int i = 1; i <= n; i++) {
    if (s[i - 1] == '(') {
      dp[i][0] = 1;
    } else {
      dp[i][0] = -1;
    }
  }
  for (int i = 1; i <= n; i++)
    dp[i][0] += dp[i - 1][0];
  build();
  for (int i = 0; i <= n; i++)
    saldo[dp[i][0]].pb(i);
  int resp = 0;
  int qnt = 1;
  for (int i = 1; i <= n; i++) {
    if (s[i - 1] == ')')
      continue;
    int s = dp[i][0] - 1;
    int L =
        lower_bound(saldo[s].begin(), saldo[s].end(), i - 1) - saldo[s].begin();
    int R = saldo[s].size() - 1;
    int vai = bb(L, R, s);
    int len = saldo[s][vai] - saldo[s][L];
    if (len > resp)
      resp = len, qnt = 1;
    else if (len == resp)
      qnt++;
  }
  if (resp == 0)
    qnt = 1;
  cout << resp << " " << qnt << endl;
}
