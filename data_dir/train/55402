#include<bits/stdc++.h>
using namespace std;
#define md int mid = ( l + r )>>1;
#define mxs ( int )( ( 1e5 * 2 ) + 7 )
vector < int > marker [ ( int ) ( 1e6 + 7 ) ];
vector < int > tree [ mxs * 3 ];
vector < int > ::iterator it , it2;
int ar [ mxs ];
int n , m , e , f , z , i , lol;
void build( int v , int l , int r );
void brainfuck();
int query( int v , int l , int r , int x , int y );
int finder( int  val );
int main()
{
    //ios_base::sync_with_stdio();
    //cin.tie(NULL);
    //cin>>n>>m;
    scanf("%d%d",&n,&m);
    for ( i = 1 ; i <= n; i++ )scanf("%d",&ar [ i ] );//cin>>ar [ i ];
    brainfuck();
    return 0;
}
void build( int v , int l , int r )
{
    if ( l != r )
    {
        md
        build( v + v , l , mid );
        build( v + v + 1 , mid + 1 , r );
        merge( tree [ v + v ].begin() , tree [ v + v ].end() , tree [ v + v + 1 ].begin() , tree [ v + v + 1 ].end() , back_inserter( tree [ v ] ) );
    }
    else tree [ v ].push_back( ar [ l ] );
}
void brainfuck()
{
    build( 1 , 1 , n );
    for ( i = 1 ; i <= n; i++ )marker [ ar [ i ] ].push_back( i );
    while( m-- )
    {
        //cin>>e>>f>>z;
        scanf("%d%d%d",&e,&f,&z);
        lol = query( 1 , 1 , n , e , f );
        if ( lol == -1 )printf("-1\n");//cout<<"-1\n";
        else
        {
            lol = finder( lol );
            //cout<<lol<<"\n";
            printf("%d\n",lol);
        }
    }
}
int query( int v, int l, int r, int x, int y )
{
    if ( x > y )return -1;
    if ( l == x && r == y )
    {
        it = upper_bound( tree [ v ].begin() , tree [ v ].end() , z );
        if ( it != tree [ v ].end() )return *it;
        it--;
        if ( *it != z )return *it;
        it = it2 = lower_bound( tree [ v ].begin() , tree [ v ].end() , z );
        if ( it == tree [ v ].end() )
        {
            it2--;
            if ( *it2 != z )return *it2;
        }
        if ( ( it - tree [ v ].begin() ) )
        {
            it--;
            if ( *it != z )return *it;
        }
        return -1;
    }
    md
    int xox = query( v + v, l, mid, x, min( y, mid ) );
    if ( xox != -1 )return xox;
    xox = query( v + v + 1, mid + 1, r, max( x, mid + 1 ), y );
    return xox;
}
int finder( int  val  )
{
    int xox;
    int lo = 0 , hi = marker [ val ].size() - 1 , mid ;
    while( lo <= hi )
    {
        mid = ( lo + hi )>>1;
        xox = marker [ val ] [ mid ];
        if ( xox >= e && xox <= f )return xox;
        else if ( e > xox )lo = mid + 1;
        else hi = mid - 1;
    }
}
