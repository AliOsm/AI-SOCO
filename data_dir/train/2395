/*jai mata di
 let's rock*/
#include<bits/stdc++.h>
using namespace std;
const long long Inf=1e18;
const int N=400004;
long long dp[10000004];
vector<int>vec[24];
long long int cnt[24][24];
int a[N];
int sz;
map<int,int>mp;
long long dfs(int mask)
{
	if(mask==((1<<sz)-1))
		return 0;
	if(dp[mask]!=-1) return dp[mask];
	long long res=Inf;
	int i,j;
	for(i=0;i<sz;i++)
	{
		if(!(mask&(1<<i)))
		{
			long long val=0;
			for(j=0;j<sz;j++)
			{
				if(mask&(1<<j))
				  val+=cnt[j+1][i+1];  
			}
			res=min(res,val+dfs(mask|(1<<i)));
		}
	}
	dp[mask]=res;
	return res;
}
int main()
{
	int n;
	scanf("%d",&n);
	int i,j;
	for(i=1;i<=n;i++)
	{
		scanf("%d",&a[i]);
		mp[a[i]]++;
	}
	map<int,int>::iterator it;
	int val=1;
	for(it=mp.begin();it!=mp.end();it++)
		mp[it->first]=val++;
	sz=val;	
	for(i=1;i<=n;i++)
		vec[mp[a[i]]].push_back(i);
	
	memset(dp,-1,sizeof(dp));
	for(int c1=1;c1<=20;c1++)
	{
		for(int c2=1;c2<=20;c2++)
		{ 
			if(c1==c2) continue;
			i=0,j=0;
			while(i<vec[c1].size() && j<vec[c2].size())
			{
				while(j<vec[c2].size() && vec[c1][i]>vec[c2][j])
					j++;
			    cnt[c2][c1]+=(vec[c2].size()-j);
			    i++;
			}
		}
	}
    long long ans=dfs(0);
	printf("%lld\n",ans);
	return 0;
} 
