#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;


vector<string> vec_splitter(string s) {
    s += ',';
    vector<string> res;
    while(!s.empty()) {
        res.push_back(s.substr(0, s.find(',')));
        s = s.substr(s.find(',') + 1);
    }
    return res;
}
void debug_out(
        vector<string> __attribute__ ((unused)) args,
        __attribute__ ((unused)) int idx,
        __attribute__ ((unused)) int LINE_NUM) { cerr << endl; }
template <typename Head, typename... Tail>
void debug_out(vector<string> args, int idx, int LINE_NUM, Head H, Tail... T) {
    if(idx > 0) cerr << ", "; else cerr << "Line(" << LINE_NUM << ") ";
    stringstream ss; ss << H;
    cerr << args[idx] << " = " << ss.str();
    debug_out(args, idx + 1, LINE_NUM, T...);
}
#define debug(...) debug_out(vec_splitter(#__VA_ARGS__), 0, __LINE__, __VA_ARGS__)

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)((x).size())
#define pb push_back
#define T first
#define P second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
//#define debug(x) cerr << #x << " : " << (x) << " "
const double PI = 3.14159265358979323846;
const double eps = (1e-10);
int isGreater(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

int n, m;
const int MAX_N = 5e3 + 5;
vector<int> adj[MAX_N];
vector<vector<int> > comp;
int compID[MAX_N], color[MAX_N], ans[MAX_N], vis[MAX_N];

void dfs(int u)
{
    vis[u] = 1;
    compID[u] = sz(comp);
    for (int v : adj[u])
    {
        if (!vis[v])
        {
            color[v] = !color[u];
            dfs(v);
        }
        else if (color[v] == color[u])
        {
            cout << "NO\n";
            exit(0);
        }
    }
}

int mem[MAX_N][MAX_N];
int solve(int i, int n2)
{
    if (n2 < 0)
        return 0;
    if (i == sz(comp))
        return n2 == 0;

    int &ret = mem[i][n2];
    if (~ret)
        return ret;

    ret = max(solve(i + 1, n2 - comp[i][0]), solve(i + 1, n2 - comp[i][1]));
    return ret;
}

int chosen[MAX_N];
void build(int i, int n2)
{
    if (i == sz(comp))
        return;

    int ret = mem[i][n2];
    if (ret == solve(i + 1, n2 - comp[i][0]))
    {
        chosen[i] = 0;
        build(i + 1, n2 - comp[i][0]);
        return;
    }
    assert(ret == solve(i + 1, n2 - comp[i][1]));
    chosen[i] = 1;
    build(i + 1, n2 - comp[i][1]);
    return;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("AC.txt", "w", stdout);
#endif
    cin >> n >> m;
    int n1, n2, n3;
    cin >> n1 >> n2 >> n3;
    rep(i,0,m)
    {
        int u, v;
        cin >> u >> v;
        --u; --v;
        adj[u].pb(v);
        adj[v].pb(u);
    }

    for (int u = 0; u < n; ++u)
    {
        if (!vis[u])
        {
            dfs(u);
            comp.push_back(vector<int>(2, 0));
        }
    }

    for (int u = 0; u < n; ++u)
        comp[compID[u]][color[u]]++;

    clr(mem, -1);
    if (!solve(0, n2))
    {
        cout << "NO\n";
        return 0;
    }

    build(0, n2);


    for (int u = 0; u < n; ++u)
    {
        if (chosen[compID[u]] == color[u])
        {
            assert(n2 > 0);
            --n2;
            ans[u] = 2;
        }
        else if (n1)
        {
            --n1;
            ans[u] = 1;
        }
        else if (n3)
        {
            --n3;
            ans[u] = 3;
        }
        else
        {
            cout << "NO\n";
            return 0;
        }
    }

    assert(n2 == 0);
    if (n1 || n3)
    {
        cout << "NO\n";
        return 0;
    }

    cout << "YES\n";
    for (int u = 0; u < n; ++u)
        cout << ans[u];

    return 0;
}