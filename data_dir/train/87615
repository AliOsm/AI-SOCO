#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cstdio>
#include <stdio.h>
#include <fstream>
#include <map>
#include <set>
#include <cstdlib>
#include <queue>
#include <math.h>
#include <cmath>
#include <cstring>
#include <stdlib.h>
#include <stack>
#include <iomanip>
#define ll long long
#define endl '\n'
#define ull unsigned long long
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pull pair<ull,ull>
ll MOD=1000000007;
ll inf=1e18;
using namespace std;

ll Mem[1001][1001][4][4];
ll n,m;
ll L[1001][1001];
ll Solve(ll i,ll j,ll d,ll f)
{
	if(i<0 || i>=n || j<0 || j>=m){return -1e17;}
	if(Mem[i][j][d][f]!=-1)
	{
		return Mem[i][j][d][f];
	}
	ll ans=-1e17;ll move,x=-1e17;
	if(d==0) // 0,0 top left
	{
		if(i==0 && j==0){return L[0][0];}
		if(f!=2)ans=Solve(i-1,j,d,0);
		if(f!=1)x=Solve(i,j-1,d,0);
		if(x>ans)
		{
			ans=x;
		}
		if(ans!=-1e17){ans+=L[i][j];}
		Mem[i][j][d][f]=ans;
		
		return Mem[i][j][d][f];
	}
	if(d==1) // 0,m-1 top right
	{
		if(i==0 && j==m-1){return L[i][j];}
		if(f!=2)ans=Solve(i,j+1,d,0); // right
		if(f!=1)x=Solve(i-1,j,d,0); // up
		if(x>ans)
		{
			ans=x;
		}
		if(ans!=-1e14){ans+=L[i][j];}
		Mem[i][j][d][f]=ans;
		return Mem[i][j][d][f];
	}
	if(d==2) // n-1,0 down left
	{
		if(i==n-1 && j==0){return L[i][j];}
		if(f!=2)ans=Solve(i,j-1,d,0); // left
		if(f!=1)x=Solve(i+1,j,d,0); // down
		if(x>ans)
		{
			ans=x;
		}
		if(ans!=-1e17){ans+=L[i][j];}
		Mem[i][j][d][f]=ans;
		return Mem[i][j][d][f];
	}
	if(d==3) // n-1,m-1 down right
	{
		if(i==n-1 && j==m-1){return L[i][j];}
		if(f!=2)ans=Solve(i,j+1,d,0); //right
		if(f!=1)x=Solve(i+1,j,d,0); // down
		if(x>ans)
		{
			ans=x;
		}
		if(ans!=-1e17){ans+=L[i][j];}
		Mem[i][j][d][f]=ans;
		return Mem[i][j][d][f];
	}
}

int main()
{
    cin>>n>>m;
	ll i,j,k,z;
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		{
			cin>>L[i][j];
			for(k=0;k<4;k++)
				for(z=0;z<3;z++)
			Mem[i][j][k][z]=-1;
		}
	}
    ll a,b;ll best=0;
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		{
			if(i==0 && j==0){continue;}
			if(i==0 && j==m-1){continue;}
			a=Solve(i,j,0,1)+Solve(i,j,2,1)+Solve(i,j,3,2)+Solve(i,j,1,1)-4*L[i][j]; // first move up
			b=Solve(i,j,0,2)+Solve(i,j,2,2)+Solve(i,j,3,1)+Solve(i,j,1,2)-4*L[i][j];
			best=max(a,best);
			best=max(b,best);
		}
	}
	cout<<best;
	
    return 0;
} 