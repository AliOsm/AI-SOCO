#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<memory.h>
#include<cmath>
#include<ctime>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#define sqr(x) ((x)*(x))
#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
#define abs(x) ((x)>0?(x):-(x))
#define getar(m,n) for(int _=0;_<n;++_) cin>>(m)[_];
#define foreach(c,i) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)
#define fill(m,v) memset(m,v,sizeof(m))
#define flush {cout.flush();fflush(stdout);}
#define random(x) (((rand()<<15)+rand())%(x))
#define pi 3.1415926535897932
#define y1 stupid_cmath
#define y0 stupid_cmath_make_me_cry
#define tm stupid_ctime
#define long long long
using namespace std;

int n,m;
int i,j,k,l;

const int V=11e4;
const int T=(1<<19)+123;
const int E=V*2;
const int L = 18;


int e[E], es[E], eb[V], ed;
void add_e(int v, int u){
	e[++ed]=u;
	es[ed]=eb[v];
	eb[v]=ed;
}

int ti[V], to[V], tm;
int p[V][L];
int d, s[V*2];
map<int,int> t[T];
int mtd[T], mti[T];


void dfs(int v, int deep=0, int pr=-1){
	ti[v] = ++tm;
	s[tm] = deep;
	
	p[v][0] = pr;
	for(int l=1;l<L;++l) 
	if(p[v][l-1]<0) p[v][l]=-1; else p[v][l] = p[p[v][l-1]][l-1];
	
	for(int i,k=eb[v];k;k=es[k]){
		i = e[k];
		if(i==pr) continue;
		dfs(i,deep+1,v);
	}
	
	to[v] = ++tm;
	s[tm] = deep;
}

int fndh(int v, int h){
	while(h>0){
		int k = mti[h];
		v = p[v][k];
		h-=(1<<k);
		if(v<0) return -1;
	}
	return v;
}

int rfq(int i, int j, int x){
	int res = 0;
	i+=d; j+=d;
	while(i<=j){
		int k = min(mtd[i], 1<<mti[j-i+1]);
		res+=(t[i/k].count(x)?t[i/k][x]:0);
		i+=k;
	}
	return res;
}

int main(){
	/*srand(74747);
	freopen("input.txt","w",stdout);
	n = 1e5;
	cout<<n<<endl;
	for(i=0;i<n;++i) cout<<i<< ' '; cout<<endl;
	cout<<0<<endl;
	return 0;*/
	ios_base::sync_with_stdio(0);
	//freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
	
	for(i=1;i<T;++i) if(((i-1)&i)==0) for(j=i;j<T;j+=i) mtd[j]=i;
	for(mti[1]=0, i=2;i<T;++i) mti[i] = mti[i-1]+(((i-1)&i)==0);
	//for(i=0;i<30;++i) cout<<i<<": "<<mtd[i]<<' '<<mti[i]<<endl;
	
	cin>>n;
	for(i=0;i<n;++i){
		cin>>j;
		add_e(j,i+1);
		add_e(i+1,j);
	}
	
	dfs(0);
	
	
	m = tm+1;
	for(d=1;d<m;d<<=1);
	//for(i=0;i<d;++i) cout<<s[i]<<' '; cout<<endl;
	
	for(i=d+1;i<d+m;++i){
		t[i][s[i-d]]=1;
	}
	for(i=d-1;i;--i){
		foreach(t[i*2], it) t[i][it->first]+=it->second;
		foreach(t[i*2+1], it) t[i][it->first]+=it->second;
	}
	
	
	int qq;
	cin>>qq;
	while(qq--){
		int v,h;
		cin>>v>>h;
		
		i = fndh(v,h);
		j = fndh(v,h-1);
		
		int x = s[ti[v]];
		
		//cout<<i<<' '<<j<<' '<<x<<endl;
		//cout<<ti[i]+1<< ' '<<ti[j]-1<<endl;
		
		if(i<1){
			cout<<0;
		}else{
			//int s1 = rfq(ti[i]+1, ti[j]-1, x);
			//int s2 = rfq(to[j]+1, to[i]-1, x);
			//cout<<(s1+s2)/2;
			
			cout<< rfq(ti[i]+1, to[i]-1, x)/2-1;
		}
		
		cout<<' ';
	}
    
	
	return 0;
}
