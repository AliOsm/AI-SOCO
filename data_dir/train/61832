#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl

const int maxn = 1010;

vector<int> g[maxn];
int n,m,k;
vector<int> a;
bool viz[maxn];
vector<int> cc[maxn];
int mp[maxn];
int N=-1;



void dfs(int at) {
  viz[at]=true;
  mp[at]=N;
  cc[N].push_back(at);
  for (int to: g[at]) {
    if (!viz[to]) dfs(to);
  }
}

set<int> bad;

vector<int> nodes;

void dfs2(int at) {
  viz[at]=true;
  nodes.push_back(at);
  for (int to: g[at]) {
    if (!viz[to]) {
      dfs2(to);
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);

  cin>>n>>m>>k;
  a.resize(k);
  for (int i=0; i<k; i++) {
    cin>>a[i];
  }

  for (int i=0; i<m; i++) {
    int u,v; cin>>u>>v;
    g[u].push_back(v);
    g[v].push_back(u);
  }

  for (int i=1; i<=n; i++) {
    if (!viz[i]) {
      N++;
      dfs(i);
    }
  }

  for (int r: a) {
    bad.insert(mp[r]);
  }


  ll ans = 0;
  for (int i=0; i<=N; i++) {
    if (bad.count(i)) continue;
    // find biggest
    int x=-1;
    for (int j=0; j<=N; j++) {
      if (i==j) continue;
      if (x==-1 || cc[j].size() > cc[x].size()) {
	x = j;
      }
    }
    if (x != -1) {
      ll us = cc[i].size();
      ll join = cc[x].size();
      ans += 1LL*us*join;

      for (int o: cc[i]) {
	for (int p: cc[x]) {
	  g[o].push_back(p);
	  g[p].push_back(o);
	}
      }
      for (int v: cc[i]) cc[x].push_back(v);
      cc[i].clear();
    }
  }

  // make each cluster completely connected
  memset(viz,false,sizeof(viz));
  for (int i=1; i<=n; i++) {
    if (!viz[i]) {
      nodes.clear();
      dfs2(i);
      ll edges = 0;
      for (int x: nodes) {
      	edges += (ll)g[x].size();
      }
      edges = edges / 2;
      ll cnt = nodes.size();
      ll all = cnt*(cnt-1)/2;
      ll more = all - edges;
      //watch(more);
      ans += more;
    }
    
  }

  cout<<ans<<endl;
  return 0;
}
// don't forget to read in the input :^)
