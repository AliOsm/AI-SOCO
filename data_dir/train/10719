#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <iostream>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef long long ll;
typedef unsigned long long llu;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
typedef pair<char, int> pci;
typedef pair<int, char> pic;
const ll MOD = (ll)1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v;

char s[2000001];
int dist[10][10][10][10];

queue<pii> q;
ll ans[10][10];

int main() {
	memset(dist, -1, sizeof(dist));
	scanf("%s", s);

	int n;
	n = strlen(s);

	for (int i = 0; i < n; i++) s[i] -= '0';

	for (int i = 0; i < 10; i++)
		for (int j = 0; j <= i; j++) {
			for (int k = 0; k < 10; k++) {
				q.push({k, 0});
				
				while (!q.empty()) {
					pii tv = q.front();
					q.pop();

					int ne = (tv.first + i) % 10;
					if (dist[i][j][k][ne] == -1) {
						dist[i][j][k][ne] = tv.second + 1;
						q.push({ne, tv.second + 1});
					}

					ne = (tv.first + j) % 10;
					if (dist[i][j][k][ne] == -1) {
						dist[i][j][k][ne] = tv.second + 1;
						q.push({ ne, tv.second + 1 });
					}
				}
			}
		}

	for (int i = 0; i < 10; i++)
		for (int j = 0; j <= i; j++) {
			ll a = 0;
			for (int t = 1; t < n; t++) {
				if (dist[i][j][s[t - 1]][s[t]] == -1) {
					a = -1;
					break;
				}
				a += dist[i][j][s[t - 1]][s[t]];
			}
			ans[i][j] = ans[j][i] = a;
		}

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (ans[i][j] != -1) printf("%lld ", ans[i][j] - (n - 1));
			else printf("-1 ");
		}
		printf("\n");
	}
}