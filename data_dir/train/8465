#include<bits/stdc++.h>
using namespace std;
typedef long long LL;
const LL MOD = 998244353;
const int MAXN = 100007;
const int MAXX = 200;

int sum(LL a, LL b)
{
    return a+b>=MOD?a+b-MOD:a+b;
}

int sub(LL a, LL b)
{
    return a-b<0?a-b+MOD:a-b;
}
int mul(LL a, LL b)
{
    return (a*b)%MOD;
}

int dp[MAXN][MAXX+7][2];
int cu[MAXN][MAXX+7][2];
int ar[MAXN+7];

int main()
{
    LL n;
    cin >> n;

    for (LL i = 1; i <= n; i++) cin >> ar[i];

    if (ar[n]==-1) {
        for (LL lst = 1; lst <= MAXX; lst++) {
            dp[n][lst][0] = 1;
            dp[n][lst][1] = lst;
            cu[n][lst][0] = sum(dp[n][lst][0], cu[n][lst-1][0]);
            cu[n][lst][1] = sum(dp[n][lst][1], cu[n][lst-1][1]);
//            cout << "dp[" << n << "][" << lst << "][" << 0
//                << "] = " << dp[n][lst][0] << endl;
//            cout << "dp[" << n << "][" << lst << "][" << 1
//                << "] = " << dp[n][lst][1] << endl;
        }
    } else {
        for (LL lst = 1; lst <= MAXX; lst++) {
            if (lst > ar[n]) {
                dp[n][lst][0] = 0;
                dp[n][lst][1] = 1;
            } else if (lst < ar[n]) {
                dp[n][lst][0] = 0;
                dp[n][lst][1] = 0;
            } else {
                dp[n][lst][0] = 1;
                dp[n][lst][1] = 1;
            }

            cu[n][lst][0] = sum(dp[n][lst][0], cu[n][lst-1][0]);
            cu[n][lst][1] = sum(dp[n][lst][1], cu[n][lst-1][1]);
//            cout << "dp[" << n << "][" << lst << "][" << 0
//                << "] = " << dp[n][lst][0] << endl;
//            cout << "dp[" << n << "][" << lst << "][" << 1
//                << "] = " << dp[n][lst][1] << endl;
        }
    }

    for (LL i = n-1; i > 1; i--) {
        for (LL lst = 1; lst <= MAXX; lst++) {
            LL x = sub(cu[i+1][MAXX][0], cu[i+1][lst][0]);
            LL y = cu[i+1][lst][1];

            if (ar[i]==-1) {
                dp[i][lst][0] = sum(x, dp[i+1][lst][1]);
                dp[i][lst][1] = sum(x, y);
            } else {
                if (lst > ar[i]) {
                    dp[i][lst][0] = 0;
                    dp[i][lst][1] = dp[i+1][ar[i]][1];
                } else if (lst < ar[i]) {
                    dp[i][lst][0] = dp[i+1][ar[i]][0];
                    dp[i][lst][1] = dp[i+1][ar[i]][0];
                } else {
                    dp[i][lst][0] = dp[i+1][ar[i]][1];
                    dp[i][lst][1] = dp[i+1][ar[i]][1];
                }
            }
//            cout << "dp[" << i << "][" << lst << "][" << 0
//                << "] = " << dp[i][lst][0] << endl;
//            cout << "dp[" << i << "][" << lst << "][" << 1
//                << "] = " << dp[i][lst][1] << endl;

            cu[i][lst][0] = sum(dp[i][lst][0], cu[i][lst-1][0]);
            cu[i][lst][1] = sum(dp[i][lst][1], cu[i][lst-1][1]);
        }
    }

    if (ar[1]==-1) {
        cout << cu[2][MAXX][0] << endl;

    } else {
        cout << dp[2][ar[1]][0] << endl;
    }


    return 0;
}
