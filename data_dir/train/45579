#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<ll, ll> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

struct segment_tree{
	
	vector<ll> sum, cnt;
	
	segment_tree(int n) : sum(4 * n), cnt(4 * n){
		
	}
	
	void update(int node, int b, int e, int pos, ll val){
		if(b == e){
			sum[node] += val;
			cnt[node]++;
		}
		else{
			int m = (b + e) >> 1;
			int l = node << 1;
			int r = l | 1;
			
			if(pos <= m)
				update(l, b, m, pos, val);
			else
				update(r, m + 1, e, pos, val);
			
			sum[node] = sum[l] + sum[r];
			cnt[node] = cnt[l] + cnt[r];
		}
	}
	
	pii query(int node, int b, int e, int i, int j){
		if(b >= i && e <= j)
			return {sum[node], cnt[node]};
		if(b > j || e < i)
			return {0, 0};
		
		int m = (b + e) >> 1;
		int l = node << 1;
		int r = l | 1;
		
		auto L = query(l, b, m, i, j);
		auto R = query(r, m + 1, e, i, j);
		
		return {L.first + R.first, L.second + R.second};
		
	}
	
	
};

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	int n;
	cin >> n;
	
	vector<ll> v(n), t(n), vals;
	for(int i = 0; i < n; i++)
		cin >> v[i];

	for(int i = 0; i < n; i++){
		cin >> t[i];
		vals.push_back(t[i]);
	}
		
	
	vector<pii> e;
	for(int i = 0; i < n; i++)
		e.push_back({v[i], t[i]});
	
	sort(e.begin(), e.end());
	sort(vals.begin(), vals.end());
	vals.resize(unique(vals.begin(), vals.end()) - vals.begin());
	
	int N = vals.size();
	
	segment_tree st(N);
	
	ll ans = 0;
	
	for(auto &el : e){
		ll x = el.first;
		ll v = el.second;
		
		int pos = lower_bound(vals.begin(), vals.end(), v) - vals.begin();
		
		auto Q = st.query(1, 0, N, 0, pos);
		
		ans += x * Q.second - Q.first;
		st.update(1, 0, N, pos, x);
	}
	
	cout << ans << endl;

	return 0;
}
