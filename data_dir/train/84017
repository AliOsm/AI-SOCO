#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <deque>
#include <stack>
#include <cassert>
#include <queue>
#include <numeric>
#include <sstream>
#include <iomanip>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll, ll> l4;
typedef pair<int, int> ii;
#define pb push_back
#define mp make_pair

using namespace std;
typedef pair<int, int> ii;
#define mp make_pair

/*
const int maxn = 1e6+1;
const int ALP = 26;
const int mod = 19930726;
ll n, k;
ll power(ll base, ll p)
{
    if (!base)
        return 0;
    ll ret = 1;
    while (p)
    {
        if (p&1)
            ret = ret * base % mod;
        p >>= 1;
        base = base * base % mod;
    }
    return ret;
}
namespace PAM{
    int next[maxn][ALP];
    int fail[maxn];
    int cnt[maxn];
    int num[maxn];
    int len[maxn];
    int s[maxn];
    int last;
    int n;
    int p;
    
    inline int newnode(int w){
        for(int i=0;i<ALP;i++)
            next[p][i] = 0;
        cnt[p] = 0;
        //num[p] = 0;
        len[p] = w;
        return p++;
    }
    void init(){
        p = 0;
        newnode(0);
        newnode(-1);
        last = 0;
        n = 0;
        s[n] = -1;
        fail[0] = 1;
    }
    int get_fail(int x){
        while(s[n-len[x]-1] != s[n]) x = fail[x];
        return x;
    }
    void add(int c){
        c -= 'a';
        s[++n] = c;
        int cur = get_fail(last);
        if(!next[cur][c]){
            int now = newnode(len[cur]+2);
            fail[now] = next[get_fail(fail[cur])][c];
            next[cur][c] = now;
            //num[now] = num[fail[now]] + 1;
        }
        last = next[cur][c];
        cnt[last]++;
    }
    void count(){
        for(int i=p-1;i>=0;i--)
            cnt[fail[i]] += cnt[i];
    }
    bool compare(const int &l, const int &r)
    {
        return len[l] > len[r];
    }
    ll solve()
    {
        ll ret = 1;
        count();
        for (int i = 2; i < p; ++i)
            num[i] = i;
        sort(num+2, num+p, compare);
        int i;
        for (i = 2; k && i < p; ++i)
            if (len[i]%2)
            {
                ll cur = min(k, (ll)cnt[num[i]]);
                ret = ret * power(len[num[i]], cur) % mod;
                k -= cur;
            }
        if (k)
            return -1;
        return ret;
    }
};
char A[maxn];
*/

string a[5] = {"128", "32768", "2147483648", "9223372036854775808"};
string name[5] = {"byte", "short", "int", "long", "BigInteger"};
bool compare(const string &l, const string &r)
{
    if (l.length() != r.length())
        return l.length() < r.length();
    for (int i = 0; i < l.length(); ++i)
        if (l[i] != r[i])
            return l[i] < r[i];
    return false;
}
int main()
{
    a[4] = string(200, '9');
    string str;
    cin >> str;
    int ans = 0;
    if (str[0] == '-')
    {
        str = str.substr(1);
        ans = lower_bound(a, a+4, str, compare)-a;
    }
    else
    {
        ans = upper_bound(a, a+4, str, compare)-a;
    }
    cout << name[ans] << endl;
}
