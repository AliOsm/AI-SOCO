#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>
#define P_B push_back
#define M_P make_pair
#define F first
#define S second
using namespace std;

typedef long long ll;
typedef pair <double, int> pii;
const int MAXN = 100 * 1000 + 10;
pii w[MAXN];
int par[MAXN];
double sz[MAXN], ans = 0;
vector <int> vec[MAXN];

int get_par(int v){
	return par[v] = (v == par[v])?v:get_par(par[v]);
}

void merge(int u, int v, double x){
	u = get_par(u), v = get_par(v);
	if(u == v)
		return;
	ans += sz[u] * sz[v] * x;
	par[u] = v;
	sz[v] += sz[u];
}

int main()
{
	double n, m;
	cin>> n >> m;
	for(int i = 0; i < n; i++)
	{
		cin>> w[i].F;
		w[i].S = i;
		par[i] = i;
		sz[i] = 1;
	}
	for(int i = 0; i < m; i++)
	{
		int a, b;
		cin>> a >> b;
		a--, b--;
		if(w[a] < w[b])
			vec[a].P_B(b);
		else
			vec[b].P_B(a);
	}
	sort(w, w + (int)n, greater <pii> ());
	for(int i = 0; i < n; i++)
		for(int j = 0; j < (int)vec[w[i].S].size(); j++)	
			merge(w[i].S, vec[w[i].S][j], w[i].F);

	cout<< fixed << setprecision(6) << ans * 2 / (n * (n - 1)) << endl;
}
