#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef long double real;

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

using namespace std;

const int MaxN = 100005, NA = -1, MaxC = 0x3F3F3F3F;

vector <pair <int, bool> > a [MaxN];
bool b [MaxN];
set <int> l;
int n;

void recur (int v, int d)
{
 l.insert (v);

 if (d == 0)
  return;

 v *= 10;
 recur (v + 4, d - 1);
 recur (v + 7, d - 1);
}

int go (int v)
{
 if (b[v])
  return 0;
 b[v] = true;

 vector <pair <int, bool> >::iterator it;
 int res, u;

 res = 1;
 for (it = a[v].begin (); it != a[v].end (); it++)
 {
  if (it -> second)
   continue;
  u = it -> first;
  res += go (u);
 }

 return res;
}

int main (void)
{
 int i, j, k, m;
 int64 cur, res;

 recur (0, 9);

 while (scanf (" %d", &n) != EOF)
 {
  for (i = 0; i < n; i++)
   a[i].clear ();
  for (i = 1; i < n; i++)
  {
   scanf (" %d %d %d", &j, &k, &m);
   j--;
   k--;
   m = (l.find (m) != l.end ());
   a[j].push_back (make_pair (k, (bool) m));
   a[k].push_back (make_pair (j, (bool) m));
  }

  res = n;
  res *= n - 1;
  res *= n - 2;
  memset (b, 0, sizeof (b));
  for (i = 0; i < n; i++)
   if (!b[i])
   {
    cur = go (i);
    res -= cur * (cur - 1) * (n - 2) * 2;
    res += cur * (cur - 1) * (cur - 2);
   }
  printf (INT64 "\n", res);
 }
 return 0;
}
