#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl

const int maxn = 1e6 + 5;


void solve() {
  int n; cin>>n;
  map<int,set<int>> g;
  map<pair<int,int>,vector<int>> mp;
  vector<vector<int>> tri;
  auto add = [&](int u, int v, int i) {
    if (g[u].count(v)) {
      g[u].erase(v);
      g[v].erase(u);
    } else {
      g[u].insert(v);
      g[v].insert(u);
    }
    if (u>v) swap(u,v);
    mp[{u,v}].push_back(i);
    
  };
  for (int i=0; i<n-2; i++) {
    int a,b,c; cin>>a>>b>>c;
    add(a,b,i);
    add(b,c,i);
    add(a,c,i);
    tri.push_back({a,b,c});
  }
  vector<int> perm;
  int x=1; int p=-1;
  for (int i=0; i<n; i++) {
    assert(int(g[x].size()) == 2);
    perm.push_back(x);
    int y = *g[x].begin() == p ? *g[x].rbegin() : *g[x].begin();
    p = x;
    x = y;
  }

  vector<int> cuts;
  queue<int> qq;
  vector<int> hit(n, 0);
  
  auto cut = [&](int u, int v) {
    if (u>v) swap(u,v);
    for (auto i: mp[{u,v}]) {
      if (++hit[i] == 2) {
	qq.push(i);
      }
    }
  };
  
  for (int i=0; i<n; i++) {
    cut(perm[i],perm[(i+1)%n]);
  }
  
  while (qq.size()) {
    int i = qq.front(); qq.pop();
    cuts.push_back(i);
    int u = tri[i][0]; int v = tri[i][1]; int w = tri[i][2];
    cut(u,v);
    cut(u,w);
    cut(w,v);
  }

  for (int x: perm) cout<<x<<" ";
  cout<<"\n";
  for (int x: cuts) cout<<x+1<<" ";
  cout<<"\n";
  
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);
  //mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

  int t; cin>>t;
  while (t--) {
    solve();
  }  
  

  return 0;
}
// don't forget to read in the input :^)
