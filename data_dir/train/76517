/*  */
#include <iostream>
#include <sstream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <bitset>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <functional>
#include <iterator>
#include <iomanip>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define sti				set<int>
#define stpii			set<pair<int, int> >
#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define vpii			vector<pair<int,int> >
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define clr				clear
#define pb 				push_back
#define mp 				make_pair
#define fir				first
#define sec				second
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1
#define getBits(x)		__builtin_popcount(x)
#define getBitIdx(x)	__builtin_ffs(x)

typedef long long LL;
const int maxn = 2e5+5;
int c[maxn], d[maxn], n;

void solve() {
	if (d[1] == 2) {
		int i = 1, tot = 1899;
		
		while (i<=n && d[i]==2) {
			tot += c[i];
			if (i == n) {
				printf("%d\n", tot);
				return ;
			}
			
			if (d[i+1] == 1) {
				if (tot < 1900) {
					puts("Impossible");
					return ;
				}
				++i;
				break;
			} else {
				if (tot >= 1900) tot = 1899;
			}
			
			++i;
		}
		
		// means already in div.1 current score is maximum
		int bound = tot, k = i;
		int ans = INT_MIN;
		bool visit = false;
		
		for (tot=1900; tot<=bound; ++tot) {
			int div = 1, tmp = tot;
			
			for (i=k; i<=n; ++i) {
				if (div != d[i]) {
					break;
				}
				tmp += c[i];
				if (tmp < 1900) div = 2;
				else div = 1;
			}
		
			if (i > n) {
				visit = true;
				ans = max(ans, tmp);
			}
		}
		
		if (!visit)
			puts("Impossible");
		else
			printf("%d\n", ans);
		
	} else {
		// initial is in div.1
		int i = 1, tot = 0, mn = 0;
		
		while (i<=n && d[i]==1) {
			tot += c[i];
			if (i+1<=n && d[i+1]==1 && tot<mn) mn = tot;
			++i;
		}
		if (i > n) {
			puts("Infinity");
			return ;
		}
		
		int beg = 1900 - mn;
		if (tot+beg >= 1900) {
			puts("Impossible");
			return ;
		}
		
		int bound = beg + tot, k = i;
		bool visit = false;
		int ans = INT_MIN;
		
		#ifndef ONLINE_JUDGE
		printf("beg = %d\n", beg);
		#endif
		
		for (tot=bound; tot<=1899; ++tot) {
			int div = 2, tmp = tot;
			for (i=k; i<=n; ++i) {
				if (div != d[i]) {
					break;
				}
				tmp += c[i];
				if (tmp < 1900) div = 2;
				else div = 1;
			}
			if (i > n) {
				visit = true;
				ans = max(ans, tmp);
			}
		}
		
		if (!visit)
			puts("Impossible");
		else
			printf("%d\n", ans);
		
	}
}

int main() {
	cin.tie(0);
	ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif
	
	scanf("%d", &n);
	rep(i, 1, n+1) {
		scanf("%d %d", &c[i], &d[i]);
	}
	solve();
	
	#ifndef ONLINE_JUDGE
		printf("time = %ldms.\n", clock());
	#endif
	
	return 0;
}
