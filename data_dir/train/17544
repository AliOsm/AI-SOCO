#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const double eps = 1e-9;
const double pi = acos(-1.0);

int mod1, p1, mod2, p2, p3;
int P[] = {712961, 713129, 713183, 713189, 713663, 713747, 713753};
int MOD[] = {1000003397, 1004006287, 1104005579, 104005999};

struct Hash {
    int hash1, hash2;
    ull hash3;
    
    Hash () {}
    Hash (int hash1, int hash2, ull hash3) : hash1(hash1), hash2(hash2), hash3(hash3) {}
    
    Hash exp() {
        return Hash(hash1 * 1ll * p1 % mod1, hash2 * 1ll * p2 % mod2, hash3 * p3);
    }
    
    Hash const operator *(Hash o) {
        return Hash(hash1 * 1ll * o.hash1 % mod1, hash2 * 1ll * o.hash2 % mod2, hash3 * o.hash3);
    }
    Hash const operator +(Hash o) {
        return Hash((hash1 + o.hash1) % mod1, (hash2 + o.hash2) % mod2, hash3 + o.hash3);
    }
    
    bool operator <(Hash o) const {
        if (hash1 != o.hash1) return hash1 < o.hash1;
        if (hash2 != o.hash2) return hash2 < o.hash2;
        return hash3 < o.hash3;
    }
    bool operator ==(Hash o) const {
        return hash1 == o.hash1 && hash2 == o.hash2 && hash3 == o.hash3;
    }
} ex[300300], a[300300];

int n, c[300300];
vi g[300300];
int L[300300], R[300300];
int sz = 0, pr[300300];
map <Hash, int> id;
string s;
vector <int> t[4 * 300300];

void dfs(int v, int par, Hash cur, int deg) {
    L[v] = sz;
    Hash tmp = (ex[deg] * Hash(s[v] - 'a' + 1, s[v] - 'a' + 1, s[v] - 'a' + 1));
    cur = cur + tmp;
    a[sz] = cur;
    sz++;
    forit (it, g[v]) {
        int to = *it;
        if (to != par) {
            dfs(to, v, cur, deg + 1);
        }
    }
    R[v] = sz - 1;
}

void build(int v, int tl, int tr) {
    if (tl == tr) {
        t[v].pb(pr[tl]);
    } else {
        int mid = (tl + tr) >> 1;
        build(2 * v, tl, mid);
        build(2 * v + 1, mid + 1, tr);
        vector <int> &a = t[2 * v];
        vector <int> &b = t[2 * v + 1];
        vector <int> &c = t[v];
        int l = 0, r = 0;
        while (l < sz(a) && r < sz(b)) {
            if (a[l] < b[r]) {
                c.pb(a[l++]);
            } else {
                c.pb(b[r++]);
            }
        }
        while (l < sz(a))
            c.pb(a[l++]);
        while (r < sz(b))
            c.pb(b[r++]);
    }
}

int calc(vector <int> &v, int val) {
    if (v.empty()) return 0;
    if (v[0] >= val) return 0;
    int l = 0, r = sz(v) - 1, pos = 0;
    while (l <= r) {
        int mid = (l + r) >> 1;
        if (v[mid] < val) {
            pos = mid;
            l = mid + 1;
        } else r = mid - 1;
    }
    return pos + 1;
}

int get(int v, int tl, int tr, int l, int r, int val) {
    if (l > tr | r < tl) return 0;
    if (l <= tl && tr <= r) return calc(t[v], val);
    int mid = (tl + tr) >> 1;
    return get(2 * v, tl, mid, l, r, val) + get(2 * v + 1, mid +1 , tr, l, r, val);
}

int calc(int l, int r) {
    return get(1, 0, n - 1, l, r, l);
}

int main(){
    
    srand(time(NULL));
    int x = rand() % 4, y = rand() % 4;
    while (x == y) {
        x = rand() % 4;
        y = rand() % 4;
    }
    mod1 = MOD[x];
    mod2 = MOD[y];
    
    x = rand() % 7; y = rand() % 7;
    int z = rand() % 7;
    while (x == y || x == z || y == z) {
        x = rand() % 7; y = rand() % 7;
        z = rand() % 7;
    }
    p1 = P[x]; p2 = P[y]; p3 = P[z];
    
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        scanf("%d", c + i);
    }
    getline(cin, s);
    getline(cin, s);
    for (int i = 0, x, y; i < n - 1; i++) {
        scanf("%d%d", &x, &y);
        x--; y--;
        g[x].pb(y);
        g[y].pb(x);
    }
    
    ex[0] = Hash(1, 1, 1);
    for (int i = 1; i < 300300; i++)
        ex[i] = ex[i - 1].exp();
    
    dfs(0, -1, Hash(0, 0, 0), 0);
    
    for (int i = 0; i < n; i++) {
        if (id.count(a[i]) == 0) {
            pr[i] = -1;
        } else {
            pr[i] = id[a[i]];
        }
        id[a[i]] = i;
    }
    
    build(1, 0, n - 1);
    
    int mx = -inf, cnt = 0;
    
    for (int i = 0; i < n; i++) {
        int l = L[i], r = R[i];
        int cur = calc(l, r) + c[i];
        if (cur > mx) {
            mx = cur;
            cnt = 1;
        } else if (cur == mx) {
            cnt++;
        }
    }
    
    cout << mx << endl << cnt << endl;
    
    return 0;
}
