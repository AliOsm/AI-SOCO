#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <stack>
#include <map>
#include <iomanip>
#include <cmath>
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define ll long long
using namespace std;
const ll N = 200042;
const ll m = 1e9 + 7;
ll add(ll x, ll y) {
  x += y;
  while(x >= m) x -= m;
  while(x < 0) x += m;
  return x;
}
ll mul(ll x, ll y) {
  return (x * 1ll * y) % m;
}
ll binpow(ll x, ll y) {
  ll z = 1;
  while(y) {
    if(y & 1) z = mul(z, x);
    x = mul(x, x);
    y >>= 1;
  }
  return z;
}
ll inv(ll x) {
  return binpow(x, m - 2);
}
ll divide(ll x, ll y) {
  return mul(x, inv(y));
}
ll fact[N];
void precalc() {
  fact[0] = 1;
  for(ll i = 1; i < N; i++) fact[i] = mul(fact[i - 1], i);
}
ll C(ll n, ll k) {
  return divide(fact[n], mul(fact[k], fact[n - k]));
}
ll A(ll n, ll m) {
  return divide(fact[n], fact[n - m]);
}
int main() {

  ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

  precalc();

  string s;

  cin >> s;

  ll suff[200042] = {0}, ans = 0;

  for(ll i = s.size() - 1; i >= 0; i--) suff[i] = suff[i + 1] + (s[i] == ')');

  ll cur = 0;

  for(ll i = 0; i < s.size() - 1; i++) {
    if(s[i] == '(') ans = add(ans, C(++cur + suff[i] - 1, cur));
    ans %= m;
  }

  cout << ans % m;

  return 0;
}
