#include<bits/stdc++.h>
using namespace std;
#define M 13
typedef pair<int, int> pii;
typedef pair<int, pii> pip;

int ara[M][M*M*M];
int pri[M][M][M];
int dp[M][M][1<<M];
int n, m;

int cnt(int col, int cyc, int mask)
{
    if(col == m) return 0;
    if(dp[col][cyc][mask] != -1) return dp[col][cyc][mask];

    int &res = dp[col][cyc][mask];

    res = 0;
    for(int i = 0; i < n; i++)
    {
        if(mask&(1<<i)) continue;
        res = max(res, pri[cyc][i][col]+cnt(col, cyc, mask|(1<<i)));
    }

    for(int i = 0; i < n; i++) res = max(res, cnt(col+1, i, mask));

    return res;
}

int main()
{
    int t;
    scanf("%d", &t);

    while(t--)
    {
        scanf("%d %d", &n, &m);

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++) scanf("%d", &ara[i][j]);
        }

        vector<pip> vec;

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++) vec.push_back({ara[i][j], {i, j}});
        }
        sort(vec.begin(), vec.end(), greater<pip>());

        set<int> lagbe;

        for(int i = 0; i < vec.size(); i++)
        {
            int x = vec[i].first;
            pii p = vec[i].second;
            int row = p.first, col = p.second;

            lagbe.insert(col);
            if(lagbe.size() == n) break;
        }

        int cur = 0;
        for(int col: lagbe)
        {
            for(int i = 0; i < n; i++) pri[0][i][cur] = ara[i][col];

            for(int k = 1; k < n; k++)
            {
                pri[k][0][cur] = pri[k-1][n-1][cur];
                for(int i = 1; i < n; i++) pri[k][i][cur] = pri[k-1][i-1][cur];
            }

            cur++;
        }

        m = lagbe.size();
        memset(dp, -1, sizeof(dp));

        int ans = 0;
        for(int i = 0; i < n; i++) ans = max(ans, cnt(0, i, 0));

        printf("%d\n", ans);
    }

    return 0;
}
