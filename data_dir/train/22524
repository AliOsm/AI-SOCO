#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair
#define sz(x) (int)(x).size()
#define ll long long
#define ld long double
#define ft first
#define sc second
#define pii pair<int, int>
#define pll pair<ll, ll>
#define forn(i, t) for(int i = 0; i < (t); i++)
#define fore(i, f, t) for(int i = (f); i < (t); i++)
#define forr(i, f, t) for(int i = (f) - 1; i >= (t); i--)
#define all(x) (x).begin(), (x).end()
#define ins insert

const int INF = 2147483647;
const int MOD = 1000000007;
const ll INF64 = 9223372036854775807;
const ld EPS = 1e-7;

using namespace std;

const int N = 5001;
vector<pii> g[N], e[N];
int dp[N][N];
int p[N][N];
int n;
bool used[N];


void dfs(int v){
    used[v] = 1;
    forn(i, sz(g[v])){
        int u = g[v][i].ft;
        int w = g[v][i].sc;
        if (!used[u]) 
            dfs(u);
        fore(j, 1, n)
            if (dp[u][j - 1] < INF && 1ll + dp[u][j - 1] + w < dp[v][j]){
                dp[v][j] = min(dp[v][j], dp[u][j - 1] + w);
                p[v][j] = u;
            }
    }
}


int main(){
    int m, k, f, t, w;
    scanf("%d%d%d", &n, &m, &k);
    forn(i, N) forn(j, N) 
        dp[i][j] = INF;
    forn(i, m){
        scanf("%d%d%d", &f, &t, &w);
        g[--f].pb(mp(--t, w));
        e[t].pb(mp(f, w));
    }
    dp[n - 1][0] = 0;
    dfs(0);
    int ans = 0;
    forn(i, n)
        if (dp[0][i] <= k)
            ans = max(ans, i + 1);
    int cur = 0;
    printf("%d\n", ans);
    while (cur != n - 1){
        printf("%d ", cur + 1);
        cur = p[cur][--ans];
    }
    printf("%d ", cur + 1);
    return 0;
}