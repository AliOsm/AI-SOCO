#include<iostream>
#include<stdio.h>
#include <bits/stdc++.h>
#include <math.h>
#include <string>
#include <sstream>
#define ll long long
#define F first
#define S second
#define pb push_back
#define ld long double
#define pll pair<long long,long long>
#define pld pair<long double,long double>
using namespace std;
ll mod=998244353 ;
ll gcd (ll a,ll b)
{
    if(b==0)
        return a;
    else
        return gcd(b,a%b);
}
ll modularExp(ll x,ll n,ll mod)
{
    ll result=1;
    while(n>0)
    {
        if(n%2==1)
            result=(result*x)%mod;
        x=((x%mod)*(x%mod))%mod;
        n=n/2;
    }
    return (result)%mod;
}
vector<ll> par(1000),sz(1000,1);
//vector<pll> v[100005];
bool isPrime(ll n)
{
    for(ll i=2;i*i<=n;i++)
        if(n%i==0)
            return false;
    return true;
}
int main()
{
  ll n;
  cin>>n;
  vector<ll> v[n+1];
  ll i;
  for(i=0;i<n-1;i++)
  {
      ll x,y;
      cin>>x>>y;
      v[x].pb(y);
      v[y].pb(x);
  }
  vector<ll> val(n+1),tgt(n+1);
  for(i=1;i<=n;i++)
    cin>>val[i];
  for(i=1;i<=n;i++)
    cin>>tgt[i];
  vector<ll> visited(n+1);
  stack< pair<ll,pll> > st;
  st.push({1,{0,0}});
  ll ans=0;
  vector<ll> av;
  visited[1]=1;
  while(!st.empty())
  {
      pair<ll,pll>  top=st.top();
      ll node=top.F;
      st.pop();
      ll ee=top.S.F;
      ll oe=top.S.S;
      if(ee%2==1)
        val[node]=1-val[node];
      if(val[node]!=tgt[node])
      {
          ee+=1;
          ans+=1;
          av.pb(node);
      }
      for(i=0;i<v[node].size();i++)
      {
          if(!visited[v[node][i]])
          {
              visited[v[node][i]]=1;
              st.push({v[node][i],{oe,ee}});
          }
      }
  }
  cout<<ans<<endl;
  for(i=0;i<av.size();i++)
  cout<<av[i]<<"\n";
}
