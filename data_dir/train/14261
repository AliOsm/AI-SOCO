#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcountll(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = 0x3f3f3f3f;
const double eps = 1e-9;

const int N = 200005;
const int LOGN = 18;

int n, m;
vector<pii> adj[N];
int lvl[N];
int p[LOGN][N];
int mx[LOGN][N];
int LOG2[N];
int sz[N];
int IN[N], OUT[N], dfsOrder;
int chainHead[N];
int ST[1 << 19];
int ans[N];

struct edge {
	int f, t, c, id;
	bool inMST;
	bool operator<(const edge& e) const {
		return c < e.c;
	}
} e[N];

struct disjointSet {
	vector<int> par, size, rank;
	int numSet;

	void init() {
		par.resize(n), size.resize(n), rank.resize(n);
		for (int i = 0; i < n; ++i)
			par[i] = i, size[i] = 1;
		numSet = n;
	}

	int find(int node) {
		return par[node] = (par[node] == node) ? node : find(par[node]);
	}

	bool join(int x, int y) {
		x = find(x);
		y = find(y);
		if (x == y)
			return false;
		if (rank[x] < rank[y])
			swap(x, y);
		if (rank[x] == rank[y])
			rank[x]++;
		size[x] += size[y];
		numSet--;
		par[y] = x;
		return true;
	}
} dsu;

void kruskal() {
	dsu.init();
	sort(e, e + m);
	for (int i = 0; i < m; ++i) {
		if (dsu.join(e[i].f, e[i].t)) {
			e[i].inMST = 1;
			adj[e[i].f].pb(mp(e[i].t, e[i].c));
			adj[e[i].t].pb(mp(e[i].f, e[i].c));
		}
	}
}

int dfs(int cur, int par = -1) {
	sz[cur] = 1;
	for (auto it : adj[cur]) {
		int to = it.first;
		int c = it.second;
		if (to == par)
			continue;
		p[0][to] = cur;
		mx[0][to] = c;
		lvl[to] = lvl[cur] + 1;
		sz[cur] += dfs(to, cur);
	}
	return sz[cur];
}

void hld(int cur, int par = -1) {
	int maxNode = -1;
	IN[cur] = dfsOrder++;
	for (auto it : adj[cur]) {
		int to = it.first;
		if (to == par)
			continue;
		if (maxNode == -1 || sz[to] > sz[maxNode])
			maxNode = to;
	}
	if (maxNode != -1) {
		chainHead[maxNode] = chainHead[cur];
		hld(maxNode, cur);
//		OUT[cur] = dfsOrder++;
	}
	for (auto it : adj[cur]) {
		int to = it.first;
		if (to == par || to == maxNode)
			continue;
		chainHead[to] = to;
		hld(to, cur);
	}
}

void init() {
	MMS(p, -1);
	dfs(0);
	for (int i = 1; i < LOGN; i++) {
		for (int j = 0; j < n; j++) {
			mx[i][j] = max(mx[i - 1][j], mx[i - 1][p[i - 1][j]]);
			p[i][j] = p[i - 1][p[i - 1][j]];
		}
	}
	for (int i = 2; i <= n; i++) {
		LOG2[i] = LOG2[i >> 1] + 1;
	}
	dfsOrder = 0;
	hld(0);
	MMS(ans, 0x3f);
	MMS(ST, 0x3f);
}

int LCA(int a, int b) {
	if (lvl[a] < lvl[b])
		swap(a, b);
	int log = LOG2[lvl[a]];
	for (int i = log; i >= 0; i--) {
		if (lvl[a] - (1 << i) >= lvl[b])
			a = p[i][a];
	}
	if (a == b)
		return a;
	for (int i = log; i >= 0; i--)
		if (p[i][a] != -1 && p[i][a] != p[i][b])
			a = p[i][a], b = p[i][b];
	return p[0][a];
}

int getMax(int cur, int lca) {
	int res = 0;
	for (int i = LOGN - 1; i >= 0; i--) {
		int nxt = p[i][cur];
		if (nxt == -1)
			continue;
		if (lvl[nxt] > lvl[lca]) {
			res = max(res, mx[i][cur]);
			cur = nxt;
		}
	}
	if (cur != lca)
		res = max(res, mx[0][cur]);
	return res;
}

void update(int st, int en, int val, int ni = 0, int l = 0, int r = n - 1) {
	if (l > en || r < st || st > en)
		return;
	if (l >= st && r <= en) {
		ST[ni] = min(ST[ni], val);
		return;
	}
	int nl = (ni << 1) + 1;
	int nr = nl + 1;
	int mid = l + ((r - l) >> 1);
	update(st, en, val, nl, l, mid);
	update(st, en, val, nr, mid + 1, r);
}

int query(int idx, int ni = 0, int l = 0, int r = n - 1) {
	int res = ST[ni];
	if (l < r) {
		int nl = (ni << 1) + 1;
		int nr = nl + 1;
		int mid = l + ((r - l) >> 1);
		if (idx <= mid) {
			res = min(res, query(idx, nl, l, mid));
		} else {
			res = min(res, query(idx, nr, mid + 1, r));
		}
	}
	return res;
}

void updateMin(int cur, int lca, int val) {
	while (chainHead[cur] != chainHead[lca]) {
		update(IN[chainHead[cur]], IN[cur], val);
		cur = p[0][chainHead[cur]];
	}
	update(IN[lca] + 1, IN[cur], val);
}

int main() {
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("in.txt", "rt", stdin);
//	freopen("out.txt", "wt", stdout);
#endif
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int f, t, c;
		cin >> f >> t >> c;
		f--, t--;
		e[i] = {f, t, c, i, 0};
	}
	kruskal();
	init();
	for (int i = 0; i < m; i++) {
		int res = OO;
		int lca = LCA(e[i].f, e[i].t);
		if (!e[i].inMST) {
			res = max(getMax(e[i].f, lca), getMax(e[i].t, lca)) - 1;
			ans[e[i].id] = res;
			updateMin(e[i].f, lca, e[i].c);
			updateMin(e[i].t, lca, e[i].c);
		}
	}
	for (int i = 0; i < m; i++) {
		if (e[i].inMST) {
			int low = e[i].f;
			if (lvl[e[i].f] < lvl[e[i].t])
				low = e[i].t;
			int res = query(IN[low]);
			if (res == OO)
				res = 0;
			ans[e[i].id] = res - 1;
		}
	}
	for (int i = 0; i < m; i++) {
		cout << ans[i] << " \n"[i == m - 1];
	}
	return 0;
}
