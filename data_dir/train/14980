#include<bits/stdc++.h>
using namespace std;
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
#define ll long long

template<class T> ostream& operator<<(ostream &os,vector<T> V){
	os<<"[ ";for(auto v:V)os<<v<<" ";return os<<" ]";
}
template<class L,class R> ostream& operator<<(ostream &os,pair<L,R> P){
	return os<<"("<<P.first<<","<<P.second<<")";
}
ll mxm(){return LLONG_MIN;}
template<typename... Args>
ll mxm(ll a,Args... args){return max(a,mxm(args...));}
ll mnm(){return LLONG_MAX;}
template<typename... Args>
ll mnm(ll a,Args... args){return min(a,mnm(args...));}

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
template<typename Arg1>
void __f(const char* name,Arg1&& arg1){
	cout<<name<<" : "<<arg1<<endl;
}
template<typename Arg1,typename... Args>
void __f(const char* names,Arg1&& arg1,Args&&... args){
		const char* comma=strchr(names+1,',');cout.write(names,comma-names)<<" : "<<arg1<<" | ";__f(comma+1,args...);
}
#else
#define trace(...) 1
#endif

#define ld long double
#define vll vector<ll>
#define pll pair<ll,ll>
#define ii pair<int,int>
#define vi vector<int>
#define vpll vector<pll>
#define vii vector<ii>
#define vvi vector<vi>
#define vvll vector<vll>
#define vvpll vector<vpll>
#define vvii vector<vii>
#define vld vector<ld>
#define vvld vector<vld>
#define I insert
#define F first
#define S second
#define pb push_back
#define all(x) x.begin(),x.end()
#define endl "\n"
#define siz(a)	((int)(a).size())

const int mod=1e9+7;
inline int add(int a,int b){a+=b;if(a>=mod)a-=mod;return a;}
inline int sub(int a,int b){a-=b;if(a<0)a+=mod;return a;}
inline int mul(int a,int b){return (a*1ll*b)%mod;}
inline int power(int a,int b){int rt=1;while(b>0){if(b&1)rt=mul(rt,a);a=mul(a,a);b>>=1;}return rt;}
inline int inv(int a){return power(a,mod-2);}

const int N=1e5+5;
vvll idx(2);
int main()
{
	ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);cout<<setprecision(25);
	ll n,k;cin>>n>>k;
	string s;cin>>s;
	vll c0(n),c1(n);
	for(ll i=0;i<n;i++){
		c0[i]=(s[i]=='0');
		c1[i]=(s[i]=='1');
		if(i>0)c0[i]+=c0[i-1];
		if(i>0)c1[i]+=c1[i-1];
		idx[s[i]-'0'].pb(i);
	}
	//first move win
	for(ll i=0;i<=n-k;i++){
		ll go=i+k-1;
		ll c00=(i==0?0:c0[i-1]),c01=c0[n-1]-c0[go];
		ll c11=(i==0?0:c1[i-1]),c10=c1[n-1]-c1[go];
		if((c00+c01)==0||(c11+c10)==0){
			cout<<"tokitsukaze"<<endl;return 0;
		}
	}
	bool b=1;
	for(ll i=0;i<=n-k;i++){
		bool can0=0,can1=0;
		ll go=i+k-1;
		ll c00=(i==0?0:c0[i-1]),c01=c0[n-1]-c0[go];
		ll c11=(i==0?0:c1[i-1]),c10=c1[n-1]-c1[go];
		// trace(i,c00,c01,c11,c10);
		//try 0
		if(c01==(n-1-go)){
			ll id1=upper_bound(all(idx[1]),i-1)-idx[1].begin()-1;
			ll f=idx[1].front();
			if(id1<0||idx[1][id1]-f<k)
				can0=1;
		}
		if(c00==i){
			ll id1=lower_bound(all(idx[1]),go+1)-idx[1].begin();
			ll f=idx[1].back();
			if(id1==idx[1].size()||f-idx[1][id1]<k)
				can0=1;
		}
		if(c10==(n-1-go)){
			ll id1=upper_bound(all(idx[0]),i-1)-idx[0].begin()-1;
			ll f=idx[0].front();
			if(id1<0||idx[0][id1]-f<k)
				can1=1;
		}
		if(c11==i){
			ll id1=lower_bound(all(idx[0]),go+1)-idx[0].begin();
			ll f=idx[0].back();
			if(id1==idx[0].size()||f-idx[0][id1]<k)
				can1=1;
		}
		if(can0+can1!=2)
			b=0;
		// trace(i,can0,can1);
	}
	if(b)
		cout<<"quailty"<<endl;
	else cout<<"once again"<<endl;
}