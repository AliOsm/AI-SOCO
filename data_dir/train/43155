#include <cstring>
#include <iostream>
#include <bitset>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <utility>
#include <algorithm>
#include <iomanip>
using namespace std;
#define sc(a) scanf("%d", &a)
#define sc2(a, b) scanf("%d%d", &a, &b)
#define sc3(a, b, c) scanf("%d%d%d", &a, &b, &c)
#define scs(s) scanf("%s", s)
#define pri(x) printf("%d\n", x)
#define prie(x) printf("%d ", x)
#define mp make_pair
#define pb push_back
#define BUFF ios::sync_with_stdio(false);
#define imprime(v)                                        \
  for (int X = 0; X < v.size(); X++) cout << v[X] << " "; \
  cout << endl;
#define grid(v)                                                   \
  for (int X = 0; X < v.size(); X++) {                            \
    for (int Y = 0; Y < v[X].size(); Y++) cout << v[X][Y] << " "; \
    cout << endl;                                                 \
  }
#define endl "\n"
const int INF = 0x3f3f3f3f;
const long double pi = acos(-1);
typedef long long int ll;
typedef long double ld;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vector<int> > vvi;
typedef vector<vector<ii> > vvii;
const int MOD = 1e9 + 7;
const int N = 2000 + 10;
vvi graph;
ll A[N];
//QUANTAS ARVORES ROOTEADAS EM I EXISTEM SENDO A[I] O MINIMO POSSIVEL!
int us[N];
int d, n;
ll dfs(int u, int raiz)
{
  us[u] = 1;
  ll ret=1;
  for(int v: graph[u]){
    if (!us[v]) {
      if ((A[v] < A[raiz]) or (A[v] > A[raiz] + d)) continue;
      if(A[v]==A[raiz] and raiz>v) continue;
      ret*=(dfs(v, raiz)+1);
      ret=ret%MOD;
    }
  }
  return ret;
}

int main()
{
  cin >> d >> n;
  for (int i = 1; i <= n; i++) cin >> A[i];
  graph.resize(n+10);
  for (int i = 1; i <= n - 1; i++) {
    int u, v;
    cin >> u >> v;
    graph[u].pb(v);
    graph[v].pb(u);
  }
  ll result = 0;
  for (int i = 1; i <= n; i++) {
    memset(us,0,sizeof(us));
    result = (result + dfs(i,i)) % MOD;
  }
  cout << result << endl;
  return 0;
}
