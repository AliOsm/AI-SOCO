#include <cstdio>
#include <cmath>
#include <complex>
#include <vector>
#include <algorithm>
#define sq(x) ((x)*(x))
using namespace std;
typedef complex<double> C;
const double pi = atan(1.0) * 4;
const double eps = 1e-9;
int main() {
	int n, d;
	scanf("%d%d", &n, &d);
	vector<pair<double, int> > ev;
	for (int i = 0; i < n; i++) {
		int x, y, lo, hi, r;
		scanf("%d%d%d", &x, &y, &r);
		C dir(x, y);
		lo = (sqrt(sq(x) + sq(y)) - r) / d - eps;
		hi = (sqrt(sq(x) + sq(y)) + r) / d + eps;
		for (int j = lo + 1; j <= hi; j++) {
			if (sq(r) - sq(x) - sq(y) > sq(j * d)) continue;
			double theta = arg(dir);
			double p = sqrt(sq(x) + sq(y)), R = j * d;
			double phi = acos((sq(R) + sq(x) + sq(y) - sq(r)) / (2 * p * R)) + eps;
			ev.push_back(make_pair(theta - phi, 1));
			ev.push_back(make_pair(theta + phi, -1));
			if (theta + phi > 2 * pi) {
				ev.push_back(make_pair(theta - phi - 2 * pi, 1));
				ev.push_back(make_pair(theta + phi - 2 * pi, -1));
			}
			if (theta - phi < 0) {
				ev.push_back(make_pair(theta - phi + 2 * pi, 1));
				ev.push_back(make_pair(theta + phi + 2 * pi, -1));
				
			}
		}
	}
	sort(ev.begin(), ev.end());
	int T = 0, ans = 0;
	for (int i = 0; i < ev.size(); i++) {
		T += ev[i].second;
		if (ev[i].first > 0 && ev[i].first < 2 * pi) {
			ans = max(ans, T);
		}
	}
	printf("%d\n", ans);
	return 0;
}
