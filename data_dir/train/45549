#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 10;

vector<int> graph[N], path;
bool draw, win;
int pre[N][2], vis[N][2];
void dfs(int u, int p) {
	if(win) return;
	vis[u][p] = 1;
	for(int to : graph[u]) {
		int q = p ^ 1;
		if(vis[to][q] == 1) draw = true;
		else if(!vis[to][q]) { 
			pre[to][q] = u;
			dfs(to, q);
		}
	}
	if(graph[u].size() == 0 && p) {
		win = 1;
		int end = u, endp = p;
		while(end) {
			path.push_back(end);
			end = pre[end][endp], endp ^= 1;
		}
	}
	else vis[u][p] = 2;
}
int main() {
	int n, m;
	scanf("%d %d", &n, &m);
	for(int i = 1; i <= n; i++) {
		int sz, u;
		scanf("%d", &sz);
		while(sz--) {
			scanf("%d", &u);
			graph[i].push_back(u);
		}
	}
	int s;
	scanf("%d", &s);
	dfs(s, 0);
	if(win) {
		puts("Win");
		for(int i = path.size() - 1; i >= 0; i--)
			printf("%d%c", path[i], " \n"[!i]);
	}
	else if(draw) puts("Draw");
	else puts("Lose");
	return 0;
}