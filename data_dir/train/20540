#include <bits/stdc++.h>
using namespace std;

const int MX=100*1000+999;
const int LOG=18;

int n;
int r[MX];
vector<int> e[MX];

int p[MX][LOG];
void calc_p()
{
    for(int i=0; i<=n; i++) p[i][0]=r[i];

    for(int lvl=1; lvl<LOG; lvl++)
    {
        for(int i=0; i<=n; i++)
        {
            p[i][lvl]=p[ p[i][lvl-1] ][lvl-1];
        }
    }
}

int tin[MX], tout[MX], depth[MX];

typedef pair<int, int> pii;
pii depth_time[MX];

int ctr=0;
void dfs(int from, int d)
{
    //dfs_order[ctr]=from;

    depth_time[ctr]=pii(d, ctr);
    tin[from]=ctr++;
    depth[from]=d;


    for(int to: e[from])
    {
        dfs(to, d+1);
    }
    tout[from]=ctr-1;
}

int go_up(int from, int k)
{
    for(int i=LOG-1; i>=0; i--)
    {
        if((k>>i)&1) from=p[from][i];
    }
    return from;
}

int solve(int v, int q)
{
    int a=go_up(v, q);
    if(a==0) return 0;

    int lvl=depth[v];

    int L=tin[a], R=tout[a];

    auto low  = lower_bound(depth_time, depth_time+(n+1), pii(lvl, L));
    auto high = upper_bound(depth_time, depth_time+(n+1), pii(lvl, R));

    return distance(low, high)-1;
}

int ans[MX];

int main()
{
    scanf("%d", &n);
    r[0]=0;
    for(int i=1; i<=n; i++)
    {
        scanf("%d", &r[i]);
        e[r[i]].push_back(i);
    }

    calc_p();
    dfs(0, 0);
    sort(depth_time, depth_time+(n+1));

    int m;
    scanf("%d", &m);

    for(int i=0; i<m; i++)
    {
        int v, q;
        scanf("%d %d", &v, &q);
        ans[i]=solve(v, q);
    }
    for(int i=0; i<m; i++) printf("%d ", ans[i]);

    return 0;
}
