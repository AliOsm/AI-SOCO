//

#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <algorithm>
#include <iterator>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <iomanip>
#include <fstream>

using namespace std;

typedef pair <int, int> pii;
typedef pair <long long, long long> pll;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

#define endl "\n"
#define mp make_pair

const int mod = 1000000007;
const int INF = 1000000000;

int n, m, USED[200005];
set <pii> used;
vector <int> d, nxt;
vector <int> result;

int main() {
    int u, v;

    ios::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n >> m;

    d.resize(n + 5);
    nxt.resize(n + 5);

    for (int i = 0; i <= n; i++)
        nxt[i] = i + 1;

    for (int i = 0; i < m; i++) {
        cin >> u >> v;

        used.insert(mp(min(u, v), max(u, v)));
    }

    while (nxt[0] <= n) {
        result.push_back(0);
        queue <int> q;
        q.push(nxt[0]);
        USED[nxt[0]] = 1;
        nxt[0] = nxt[nxt[0]];

        while (!q.empty()) {
            result[result.size() - 1]++;
            v = q.front();
            q.pop();
                
            u = nxt[0];
            int p = 0;

            while (u <= n) {
                if (USED[u]) {
                    nxt[p] = nxt[u];
                    u = nxt[u];
                }
                else {
                    if (!used.count(mp(min(v, u), max(v, u)))) {
                        nxt[p] = nxt[u];
                        q.push(u);
                        USED[u] = 1;
                    }

                    p = u;
                    u = nxt[u];
                }
            }
        }
    }
    
    cout << result.size() << endl;

    sort(result.begin(), result.end());

    for (int i = 0; i < result.size(); i++)
        cout << result[i] << " ";

    cout << endl << endl;

    return 0;
}