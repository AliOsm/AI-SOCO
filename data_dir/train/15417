//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

inline void setmin(int &x, int y) { if (y < x) x = y; }
inline void setmax(int &x, int y) { if (y > x) x = y; }
inline void setmin(ll &x, ll y) { if (y < x) x = y; }
inline void setmax(ll &x, ll y) { if (y > x) x = y; }

const int N = 1000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

struct node
{
    int v;
    node *L, *U, *R, *D;
    node() {}
    node(int v) : v(v) { L = U = R = D = NULL; }
};

node* a[N][N];

node* get(node* s, int x, int y)
{
    rep(i, 0, x)
        s = s->D;
    rep(i, 0, y)
        s = s->R;
    return s;
}

node* get_start(node* s)
{
    while (s->L != NULL)
        s = s->L;
    while (s->U != NULL)
        s = s->U;
    return s;
}

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n, m, q;
    cin >> n >> m >> q;
    rep(i, 0, n)
        rep(j, 0, m)
        {
            int x;
            cin >> x;
            a[i][j] = new node(x);
            if (i > 0)
            {
                a[i - 1][j]->D = a[i][j];
                a[i][j]->U = a[i - 1][j];
            }
            if (j > 0)
            {
                a[i][j - 1]->R = a[i][j];
                a[i][j]->L = a[i][j - 1];
            }
        }
    node* start = a[0][0];
    while (q--)
    {
        int a, b, c, d, h, w;
        cin >> a >> b >> c >> d >> h >> w;
        a--; b--; c--; d--;
        start = get_start(start);
        node* v1 = get(start, a, b);
        node* v2 = get(start, c, d);
        rep(i, 0, w)
        {
            if (v1->U != NULL)
                v1->U->D = v2;
            if (v2->U != NULL)
                v2->U->D = v1;
            swap(v1->U, v2->U);
            if (i < w - 1)
            {
                v1 = v1->R;
                v2 = v2->R;
            }
        }
        rep(i, 0, h)
        {
            if (v1->R != NULL)
                v1->R->L = v2;
            if (v2->R != NULL)
                v2->R->L = v1;
            swap(v1->R, v2->R);
            if (i < h - 1)
            {
                v1 = v1->D;
                v2 = v2->D;
            }
        }
        rep(i, 0, w)
        {
            if (v1->D != NULL)
                v1->D->U = v2;
            if (v2->D != NULL)
                v2->D->U = v1;
            swap(v1->D, v2->D);
            if (i < w - 1)
            {
                v1 = v1->L;
                v2 = v2->L;
            }
        }
        rep(i, 0, h)
        {
            if (v1->L != NULL)
                v1->L->R = v2;
            if (v2->L != NULL)
                v2->L->R = v1;
            swap(v1->L, v2->L);
            if (i < h - 1)
            {
                v1 = v1->U;
                v2 = v2->U;
            }
        }
    }
    start = get_start(start);
    rep(i, 0, n)
    {
        node* tmp = start;
        rep(j, 0, m)
        {
            cout << start->v << " ";
            if (j < m - 1)
                start = start->R;
        }
        cout << endl;
        start = tmp;
        if (i < n - 1)
            start = start->D;
    }
    return 0;
}
