#include <bits/stdc++.h>
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

double INF = 1e100;
double EPS = 1e-9;

struct PT { 
	double x, y;
	PT() {}
	PT(double x, double y) : x(x), y(y) {}
	PT(const PT &p) : x(p.x), y(p.y)    {}
	PT operator + (const PT &p)  const { return PT(x+p.x, y+p.y); }
	PT operator - (const PT &p)  const { return PT(x-p.x, y-p.y); }
	PT operator * (double c)     const { return PT(x*c,   y*c  ); }
	PT operator / (double c)     const { return PT(x/c,   y/c  ); }
	bool operator<(const PT &p)  const { return make_pair(x,y)<make_pair(p.x,p.y); }
	bool operator==(const PT &p)  const { return !(*this < p) && !(p < *this); }
};
double dot(PT p, PT q)     { return p.x*q.x+p.y*q.y; }
double dist2(PT p, PT q)   { return dot(p-q,p-q); }
double cross(PT p, PT q)   { return p.x*q.y-p.y*q.x; }
PT norm(PT x, double l)    { return x * l / sqrt(dot(x,x));}
istream &operator>>(istream &is, PT &p) {return is >> p.x >> p.y; }
ostream &operator<<(ostream &os, const PT &p) {return os << "(" << p.x << "," << p.y << ")";}
/*around the origin*/
PT RotateCCW90(PT p) { return PT(-p.y,p.x); }
PT RotateCW90(PT p) { return PT(p.y,-p.x); }
PT RotateCCW(PT p, double t) { 
	return PT(p.x*cos(t)-p.y*sin(t), p.x*sin(t)+p.y*cos(t)); 
}
// project point c onto line through a and b (assuming a != b)
PT ProjectPointLine(PT a, PT b, PT c) {
	return a + (b-a)*dot(c-a, b-a)/dot(b-a, b-a);
}
// project point c onto line segment through a and b (assuming a != b)
PT ProjectPointSegment(PT a, PT b, PT c) {
	double r = dot(c-a, b-a)/dot(b-a,b-a);
	if (r < 0) return a;
	if (r > 1) return b;
	return a + (b-a)*r;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	cout<<fixed<<setprecision(18);

	PT s,e,v,w;
	double vm,tc;
	cin>>s>>e>>vm>>tc>>v>>w;
	e = e - s,s = PT(0,0);
	if(fabs(e.x) <= EPS && fabs(e.y) <= EPS) {
		cout<<"0\n";
		return 0;
	}
	double lo = 0.0, hi = 100000000.0;
	for(int i = 0;i < 5000;i++) {
		double md = (lo + hi) / 2.0;
		double x = (e.x - v.x * fmin(tc,md) - w.x * fmax(0.0,md - tc))/md;
		double y = (e.y - v.y * fmin(tc,md) - w.y * fmax(0.0,md - tc))/md;
		if(x * x + y * y <= vm * vm + EPS) {
			hi = md;
		} else {
			lo = md;
		}
	}
	cout<<hi<<'\n';
	return 0;
}
