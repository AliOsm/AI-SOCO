#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <chrono>

using namespace std;
typedef int mt;
//#define mt int
#define rep(a, b, i) for(register mt i = a; i < b; ++i)
#define repe(a, b, i) for(register mt i = a; i <= b; ++i)
#define repd(a, b, i) for(register mt i = a; i > b; --i)
#define repde(a, b, i) for(register mt i = a; i >= b; --i)

#define N 1011
#define K 21
#define P 2
#define M (100001)
#define INF 100000000000000007//10000000000000007// 1e16 + 7
#define MOD 1000000007ll  //1000000007//1e9 + 7
#define EPS 1e-9
#define MAX 1000000000000000001
//#pragma comment(linker, "/STACK:200000000")

mt n, k;
char s[N];

mt d[N];
mt dp[N][N];
mt c[N][N];


mt to_next(mt x) {
	mt c = 0;
	while (x)
		c += x & 1, x >>= 1;
	return c;
}



int main(void)
{
#ifdef _DEBUG
	freopen("in.txt", "r", stdin);
#endif
	scanf("%s\n%d", s, &k);
	if (!k)
		puts("1");
	else {
		n = strlen(s);
		d[1] = 0;
		rep(2, N, i)
			d[i] = 1 + d[to_next(i)];

		repe(1, n, i)
			c[1][i] = i, c[i][i] = c[0][i] = 1;
		repe(2, n, j)
			rep(1, j, i)
			c[i][j] = (c[i][j - 1] + c[i - 1][j - 1]) % MOD;

		//repe(1, n, i)
		//	dp[i] = c[i][n - 1] + dp[i - 1];

		repe(0, n, i)
			dp[i][0] = 1;

		repe(1, n, i) {
			repe(1, n, j) {
				//dp[i][j] = dp[i - 1][j];
				if (s[n - i] == '1')
					dp[i][j] = (c[j][i - 1] + dp[i - 1][j - 1]) % MOD;
				else 
					dp[i][j] = dp[i - 1][j];

		//		//if (s[n - j] == '1') dp[i][j] = dp[i][j - 1] + dp[i - 1][j - 1];
		//		//else dp[i][j] = dp[i][j - 1];
			}
		}
		--dp[n][1];
		--k;
		mt answ = 0;
		repe(1, n, i)
			if (d[i] == k)
				answ = (answ + dp[n][i]) % MOD;
		printf("%d\n", answ);
	}

	return 0;
}