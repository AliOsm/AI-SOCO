#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <ll>::max() >> 1;
const ll N = 3e5 + 1;
ll n, k;
ll x[N];
ll y[N];

ll dp[N][2];

void input() {
    cin >> n >> k;
    for(ll i = 1; i <= n; ++i) cin >> x[i];
    for(ll i = 1; i <= n; ++i) cin >> y[i];
}

ll calc_min(ll x) {
    return (x - 1) / k + 1;
}

ll calc_max(ll x) {
    return (x - 1) * k;
}

bool test(ll a, ll b, ll p, ll q) {
    ll r = calc_max(b);
    return r >= a - q - p;
}

bool ok(ll a, ll b, ll p, ll q, ll x) {
    ll r = calc_max(a - q) + k + x;
    return r >= b;
}

ll bin_search(ll l, ll r, ll a, ll b, ll p, ll x) {
    while(l < r) {
        ll q = l + r >> 1;
        if(test(a, b, p, q)) {
            r = q;
        } else {
            l = q + 1;
        }
    }
    return ok(a, b, p, l, x)? l: k + 1;
}

void solve() {
    fill(dp[0], dp[N], k + 1);
    dp[0][0] = 0;
    dp[0][1] = 0;
    for(ll i = 1; i <= n; ++i) {
        if(dp[i - 1][0] != k + 1) {
            dp[i][0] = min(dp[i][0], bin_search(1, k + 1, x[i], y[i], k - dp[i - 1][0], k));
            dp[i][1] = min(dp[i][1], bin_search(1, k + 1, y[i], x[i], k, k - dp[i - 1][0]));
        }
        if(dp[i - 1][1] != k + 1) {
            dp[i][0] = min(dp[i][0], bin_search(1, k + 1, x[i], y[i], k, k - dp[i - 1][1]));
            dp[i][1] = min(dp[i][1], bin_search(1, k + 1, y[i], x[i], k - dp[i - 1][1], k));
        }
    }
    cout << (min(dp[n][0], dp[n][1]) <= k? "YES": "NO") << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
