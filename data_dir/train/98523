#include <bits/stdc++.h>
using namespace std;

int n;
vector<vector<int> > g;
set<int> st;
vector<vector<int> > ans;
vector<int> cur;

bool yes(int v, int u)
{
	if(g[v].size() == 0)
	{
		return false;
	}
	int l = 0,
		r = int(g[v].size()) - 1;
	while(l != r)
	{
		int mid = (l + r) / 2;
		if(g[v][mid] >= u)
		{
			r = mid;
		} else
		{
			l = mid + 1;
		}
	}
	return g[v][l] == u;
}

void dfs(int v)
{
	st.erase(st.find(v));
	cur.push_back(v);
	int u = 1;
	while(st.upper_bound(u) != st.end())
	{
		int to = *st.upper_bound(u);
		if(!yes(v, to))
		{
			dfs(to);
		}
		u = to;
	}
}

int main (int argc, char *argv[])
{
	int m;
	scanf("%d%d", &n, &m);
	g.resize(n + 1);
	while(m--)
	{	
		int from, to;
		scanf("%d%d", &from, &to);
		g[from].push_back(to);
		g[to].push_back(from);
	}
	for(int i = 1; i <= n; ++i)
	{
		sort(g[i].begin(), g[i].end());
		st.insert(i);
	}
	for(int i = 1; i <= n; ++i)
	{
		if(st.find(i) != st.end())
		{
			cur.clear();
			dfs(i);
			ans.push_back(cur);
		}
	}
	printf("%d\n", int(ans.size()));
	for(int i = 0; i < ans.size(); ++i)
	{
		printf("%d ", int(ans[i].size()));
		for(int j = 0; j < ans[i].size(); ++j)
		{
			printf("%d ", ans[i][j]);
		}
		printf("\n");
	}

	return 0;
}

