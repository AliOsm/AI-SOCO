#include <bits/stdc++.h>
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compiles and gets accepted.
 *  ___  __     _______    _______      
 * |\  \|\  \  |\  ___ \  |\  ___ \     
 * \ \  \/  /|_\ \   __/| \ \   __/|    
 *  \ \   ___  \\ \  \_|/__\ \  \_|/__  
 *   \ \  \\ \  \\ \  \_|\ \\ \  \_|\ \ 
 *    \ \__\\ \__\\ \_______\\ \_______\
 *     \|__| \|__| \|_______| \|_______|
 */
const long long mod = 1000000007;

const int mxN = 16;
vector<vector<int> > dp[(1<<mxN)];
int N;
char c[mxN];
int a[mxN];
int b[mxN];

int sumA,sumB;

int build() {
	for(int msk = (1<<N)-1;msk >= 0;msk--) {
		int A = 0,B = 0,num = 0;
		for(int i = 0;i < N;i++) if(msk&(1<<i)) A += c[i] == 'R', B += c[i] == 'B',num++;
		dp[msk].resize(A*(A+1)/2+(num-A-1)*A+1,vector<int>(B*(B+1)/2+(num-B-1)*B+1));
		for(int usedA = 0;usedA < (int)dp[msk].size();usedA++) {
			for(int usedB = 0;usedB < (int)dp[msk][usedA].size();usedB++) {
				if(msk == (1<<N)-1) {
					dp[msk][usedA][usedB] = max(sumA-usedA,sumB-usedB);
				} else {
					dp[msk][usedA][usedB] = INT_MAX;
					for(int i = 0;i < N;i++) {
						if(!(msk&(1<<i)))
							dp[msk][usedA][usedB] = min(dp[msk][usedA][usedB],dp[msk|(1<<i)][usedA + min(A,a[i])][usedB + min(B,b[i])]);
					}
				}
			}
		}
	}
	return dp[0][0][0];
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	cin>>N;
	for(int i = 0;i < N;i++) cin>>c[i]>>a[i]>>b[i],sumA += a[i],sumB += b[i];
//	cerr<<sumA<<' '<<sumB<<'\n';
	cout<<build()+N<<'\n';
	return 0;
}
