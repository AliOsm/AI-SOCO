#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <set>

typedef long long ll;
typedef std::vector<int> vi;
typedef std::vector<vi> vvi;
typedef std::vector<bool> vb;
typedef std::vector<vb> vvb;
typedef std::vector<std::string> vs;
typedef std::vector<ll> vl;
typedef std::vector<vl> vvl;

#define all(x) (x).begin(), (x).end()
#define size(x) (int)(x).size()
#define unique(x) (x).erase(std::unique(all(x)), (x).end())
#define sort(x) std::sort(all(x))

struct Pair {
    int color, count;
};

inline bool operator<(const Pair& a, const Pair& b) {
    return a.count < b.count || (a.count == b.count && a.color < b.color);
}
const int MAX = (int)1e6;
int main() {
    int n, color1;
    scanf("%d %d", &n, &color1);
    std::set<Pair> set;
    set.insert(Pair{color1,0});
    vi input(n);
    for (auto& it : input) {
        scanf("%d", &it);
        set.insert(Pair{it,0});
    }
    vi cnt(1+MAX);
    vb can(1+MAX, true);
    for (auto c : input) {
        if (!can[c]) continue;
        set.erase(Pair{c, cnt[c]++});
        set.insert(Pair{c, cnt[c]});
        while (set.begin()->count < cnt[color1]) {
            can[set.begin()->color] = false;
            set.erase(set.begin());
        }
    }
    if (size(set) > 1) {
        set.erase(Pair{color1, cnt[color1]});
        printf("%d", set.begin()->color);
    } else {
        printf("-1");
    }
    return 0;
}