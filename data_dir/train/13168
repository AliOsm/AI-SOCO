#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <stack>
#include <map>
#include <iomanip>
#include <cmath>
#include <queue>
#include <bitset>
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
typedef long long ll;
using namespace std;
int main() {

  ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

  int n = 0, p = 0;

  string s;

  cin >> n >> p >> s;

  p--;

  if(p >= n / 2) {
    reverse(all(s));
    p = n - p - 1;
  }

  int l = p, r = p;

  for(int i = 0; i < n / 2; i++) {
    if(s[i] != s[n - i - 1]) {
      l = min(l, i);
      r = i;
    }
  }

  int ans1 = 0, ans2 = 0;

  string t = s; int pos = p;

  if(t[pos] != t[n - pos - 1]) {
    int d = abs(t[pos] - t[n - pos - 1]);
    ans2 += min(d, 26 - d);
    t[pos] = t[n - pos - 1];
  }

  while(pos < r) {
    pos++;
    ans2++;
    if(t[pos] != t[n - pos - 1]) {
      int d = abs(t[pos] - t[n - pos - 1]);
      ans2 += min(d, 26 - d);
      t[pos] = t[n - pos - 1];
    }
  }

  while(pos > l && l != p) {
    pos--;
    ans2++;
    if(t[pos] != t[n - pos - 1]) {
      int d = abs(t[pos] - t[n - pos - 1]);
      ans2 += min(d, 26 - d);
      t[pos] = t[n - pos - 1];
    }
  }

  t = s; pos = p;

  if(t[pos] != t[n - pos - 1]) {
    int d = abs(t[pos] - t[n - pos - 1]);
    ans1 += min(d, 26 - d);
    t[pos] = t[n - pos - 1];
  }

  while(pos > l) {
    pos--;
    ans1++;
    if(t[pos] != t[n - pos - 1]) {
      int d = abs(t[pos] - t[n - pos - 1]);
      ans1 += min(d, 26 - d);
      t[pos] = t[n - pos - 1];
    }
  }

  while(pos < r && r != p) {
    pos++;
    ans1++;
    if(t[pos] != t[n - pos - 1]) {
      int d = abs(t[pos] - t[n - pos - 1]);
      ans1 += min(d, 26 - d);
      t[pos] = t[n - pos - 1];
    }
  }

  cout << min(ans1, ans2);

  return 0;
}
