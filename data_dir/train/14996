
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int N;
string s[500100];
int f[30][30];

int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0);
  cin >> N;
  rep1(i,N) cin >> s[i];

  int ans = 0;
  // f[a][b] = the longest sequence of strings
  // that starts with a and ends with b
  rep1(i,N)
  {
    string w = s[i];
    int fst = w[0]-'a';
    int lst = w[sz(w)-1]-'a';
    assert(fst>=0);
    assert(lst>=0);
    if (f[lst][fst] > 0)
      ans = max(ans, f[lst][fst]+sz(w));
    if (w[0] == w[sz(w)-1])
      ans = max(ans, sz(w));
    for (char ch = 'a'; ch <= 'z'; ch++)
    {
      int ii = ch - 'a';
      if (f[ii][fst]>0)
        f[ii][lst] = max(f[ii][lst],f[ii][fst]+sz(w));
    }
    f[fst][lst] = max(f[fst][lst],sz(w));
  }
  cout << ans << endl;
}
