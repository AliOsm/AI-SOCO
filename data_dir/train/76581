#include <bits/stdc++.h>
using namespace std;
#define finish(x) return cout << x << endl, 0;
#define ll long long

int n, x, k;
vector <ll> a;

bool can(int mid, bool mnx){
    ll ret = 0;
    for(int i = 0 ; i < a.size() ; i++)
        ret += max(0LL, (mnx == 0 ? mid - a[i] : a[i] - mid));
    return ret <= k;
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> n >> k;
    for(int i = 0 ; i < n && cin >> x ; i++)
        a.push_back(x);
    ll l = 1, r = 2e9;
    while(l <= r){
        ll mid = (l + r) / 2;
        if(can(mid, 0)) l = mid + 1;
        else r = mid - 1;;
    }
    int mn = l - 1;
    int kk = k;
    for(int i = 0 ; i < a.size() ; i++){
        if(a[i] < mn){
            kk -= mn - a[i];
            a[i] = mn;
        }
    }
    multiset <int> tmp(a.begin(), a.end());
    while(kk--){
        int mn = *tmp.begin();
        tmp.erase(tmp.begin());
        tmp.insert(mn + 1);
    }
    a.clear();
    for(auto &i : tmp) a.push_back(i);
    l = 1, r = 2e9;
    while(l <= r){
        int mid = (l + r) / 2;
        if(can(mid, 1)) r = mid - 1;
        else l = mid + 1;
    }
    int mx = r + 1;
    kk = k;
    for(int i = 0 ; i < a.size() ; i++){
        if(a[i] > mx){
            kk -= a[i] - mx;
            a[i] = mx;
        }
    }
    tmp.clear();
    for(auto &i : a)
        tmp.insert(i);
    while(kk--){
        int mx = *tmp.rbegin();
        tmp.erase(tmp.find(mx));
        tmp.insert(mx - 1);
    }
    cout << *tmp.rbegin() - *tmp.begin() << endl;
    return 0;
}
