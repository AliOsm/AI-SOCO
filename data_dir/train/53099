#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<map>
#include<iterator>
#include<stack>
#include<string>
#include<climits>
#include<bitset>
#include<queue>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<sstream>

#define MOD 1000000007
#define ll long long int
#define vi vector<int>
#define vl vector<long long int>
#define vvi vector<vector<int> >
#define vvl vector<vector<long long int> >

using namespace std;

string toBin(long long int a)
{
	return bitset<64>(a).to_string();
}

void printArr(int* a, int n)
{
	for(int i = 0; i < n; i++)
		printf("%d ", a[i]);
	printf("\n");
}

string intToString (ll a)
{
	ostringstream temp;
	temp<<a;
	return temp.str();
}

ll powerWithMod(ll base, ll exponent, ll modulus)
{
	ll result = 1;
	base %= modulus;
	while(exponent > 0)
	{
		if (exponent % 2 == 1)
			result = (result * base) % modulus;
		exponent = exponent >> 1;
		base = (base * base) % modulus;
	}
	return result;
}

class cust
{
	public:
		int freq;
		int start;
		int end;

		cust(){freq = 0; start = 0; end=0;}

		bool operator<(const cust& b)
		{
			if(freq < b.freq)
				return true;
			else if((b.end - b.start) < (end - start))
				return true;
			return false;
		}
};

int main()
{
	map<int, cust> a;
	int n, temp;
	scanf("%d", &n);
	for(int i = 1; i <= n; i++)
	{
		scanf("%d", &temp);
		if(a[temp].freq == 0)
			a[temp].start = i;
		a[temp].end = i;
		a[temp].freq++;
	}
	cust ans; ans.freq = -1;
	for(map<int,cust>::iterator iter = a.begin(); iter != a.end(); ++iter)
	{
		if(ans.freq < iter->second.freq)
			ans = iter->second;
		else if(ans.freq == iter->second.freq && (iter->second.end - iter->second.start) < (ans.end - ans.start))
			ans = iter->second;
	}
	printf("%d %d\n", ans.start, ans.end);
	return 0;
}
