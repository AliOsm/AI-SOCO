#include <bits/stdc++.h>
#define MOD 1000000007
using namespace std;
long long n,k;

struct seg{
    long long a,b,c;

    seg(long long aa,long long bb,long long cc) {
        a = aa,b=bb,c=cc;
    }
};

vector <seg> vec;

struct matrix {
    int r,c;
    long long mat[16][16];

    matrix() {
        matrix(16,16);
    }

    matrix(int rr,int cc) {
        r = rr;
        c = cc;
        for(int i = 0;i<16;i++)
            for(int j = 0;j<16;j++)
                mat[i][j] = 0;
    }
};
matrix base;

matrix setIdentity (int n) {
    matrix ret = matrix(n,n);
    for(int i = 0;i<16;i++)
        ret.mat[i][i] = 1;
    return ret;
}

matrix mul(const matrix& a,const matrix& b) {
    matrix c = matrix(a.r,b.c);
    for(int i = 0;i<a.r;i++)
        for(int j = 0;j<b.c;j++)
            for(int k = 0;k<a.c;k++) {
                c.mat[i][j] += (a.mat[i][k] * b.mat[k][j]) % MOD;
                c.mat[i][j] %= MOD;
            }
    return c;
}

matrix power(const matrix &b,long long p) {
    if(p == 0)
        return setIdentity(max(b.r,b.c));
    matrix ans = power(b,p/2);
    ans = mul(ans,ans);
    if(p % 2)
        ans = mul(ans,b);
    return ans;
}


void buildBase(int n) {
    base.r = n;
    base.c = n;
    for(int i = 0;i<16;i++)
        for(int j = 0;j<16;j++)
                base.mat[i][j] = 0;
    for(int i = 0;i<n;i++) {
        for(int j = 0;j<n;j++) {
            if(j == i-1 || j == i || j == i+1)
                base.mat[i][j] = 1;
            else
                base.mat[i][j] = 0;
        }
    }
}


long long solve(int ind,matrix & m) {
    if(ind == n) {
        return m.mat[0][0];
    }

    buildBase(vec[ind].c+1);
    m = mul(power(base,vec[ind].b-vec[ind].a),m);
    for(int i = vec[ind].c+1;i<16;i++)
        m.mat[0][i] = 0;

    return solve(ind+1,m);
}
int main()
{
    scanf("%I64d %I64d",&n,&k);
    for(int i = 0;i<n;i++) {
        long long x,y,c;
        scanf("%I64d %I64d %I64d",&x,&y,&c);
        if(i == n-1)
            y = k;
        seg temp = seg(x,y,c);
        vec.push_back(temp);
    }
    matrix m = matrix(16,1);
    m.mat[0][0] = 1;
    printf("%I64d",solve(0,m));
    return 0;
}
