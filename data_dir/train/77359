#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

#define f first
#define s second

#define pb push_back
#define mp make_pair
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()

#define rep(i, l, r) for (int i = l; i <= r; i++)
#define per(i, l, r) for (int i = l; i >= r; i--)

#define dbg(x) cerr << (#x) << " --> " << (x) << nl;
#define KZ ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

#define _14day "data"

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef tree < int, null_type, less < int >, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 2e5 + 7, inf = 1e9 + 7, mod = 1e9 + 7;
const ll linf = (ll)1e18 + 7;
const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1}, dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

  int n, m, tmr;
  int a[N], lvl[N], tin[N], tout[N];
  vector <int> g[N];

  struct fenwick {
    int f[N];
    inline void upd(int pos, int add) {
      for (; pos < N; pos |= pos + 1)
        f[pos] += add;
    }
    inline int pref(int pos) {
      int res = 0;
      for (; pos >= 0; pos = (pos & (pos + 1)) - 1)
        res += f[pos];
      return res;
    }
  } t[2];

  inline void dfs(int v = 1, int p = 1) {
    tin[v] = ++tmr;
    lvl[v] = lvl[p] + 1;
    for (auto to : g[v])
      if (to != p) dfs(to, v);
    tout[v] = tmr;
  }

int main() {
  #ifdef _14
    freopen (_14day".in", "r", stdin);
    freopen (_14day".out", "w", stdout);
  #endif

  scanf ("%d%d", &n, &m);
  rep(i, 1, n)
    scanf ("%d", &a[i]);
  rep(i, 2, n) {
    int v, u;
    scanf ("%d%d", &v, &u);
    g[v].pb(u);
    g[u].pb(v);
  }

  dfs();

  rep(i, 1, m) {
    int type, x, val;
    scanf ("%d%d", &type, &x);
    if (type == 2) printf ("%d\n", t[lvl[x] & 1].pref(tin[x]) + a[x]);
    else {
      int cur = lvl[x] & 1;
      scanf ("%d", &val);
      t[cur].upd(tin[x], val), t[cur].upd(tout[x] + 1, -val);
      cur ^= 1;
      t[cur].upd(tin[x], -val), t[cur].upd(tout[x] + 1, val);
    }
  }

  ioi
}
