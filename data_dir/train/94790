#include <bits/stdc++.h>
using namespace std;

string to_string(string s) {
    return '"' + s + '"';
}

string to_string(const char* s) {
    return to_string((string) s);
}

string to_string(bool b) {
    return (b ? "true" : "false");
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

void test_case() {
    int n;
    cin >> n;
    vector<int> cnt(n + 1);
    for (int i = 1; i <= n; ++i) {
        int x;
        cin >> x;
        ++cnt[x];
    }
    vector<int> cnts;
    for (int i = 1; i <= n; ++i) {
        if (cnt[i] != 0) {
            cnts.emplace_back(cnt[i]);
        }
    }
    int screens = INT_MAX;
    auto ok = [&](int tot, int sz) {
        int sc = (tot + sz - 1) / sz;
        long long b = 1LL * sc * sz - tot;
        long long a = sc - b;
        if (a >= 0 && b >= 0) {
            return true;
        } else {
            return false;
        }
    };
    vector<int> fact;
    for (int x = 1; x <= 2 * cnts[0]; ++x) {
        int r = 2 * cnts[0] / x;
        int l = (cnts[0] - 1) / x;
        if (l != r) {
            fact.emplace_back(x);
        }
    }
    auto add = [&](int fact) {
        int cand = 0;
        for (int c = 0; c < (int) cnts.size(); ++c) {
            if (!ok(cnts[c], fact)) {
                return;
            } else {
                cand += (cnts[c] + fact - 1) / fact;
            }
        }
        screens = min(screens, cand);
    };
    for (auto &f : fact) {
        add(f);
    }
    cout << screens << "\n";
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int tc;
    cin >> tc;
    while (tc--) {
        test_case();
    }
    return 0;
}
