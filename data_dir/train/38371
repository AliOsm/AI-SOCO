#include <stdio.h>
#include <bits/stdc++.h>

#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define sz(a) (int)a.size()
#define fi first
#define se second

using namespace std;

/** Fast input-output */

template <class T = int> inline T readInt();                        
inline double readDouble();
inline int readUInt();                   
inline int readChar(); // first non-blank character
inline void readWord( char *s ); 
inline bool readLine( char *s ); // do not save '\n'
inline bool isEof();
inline int getChar(); 
inline int peekChar();
inline bool seekEof();
inline void skipBlanks();

template <class T> inline void writeInt( T x, char end = 0, int len = -1 );
inline void writeChar( int x ); 
inline void writeWord( const char *s );
inline void writeDouble( double x, int len = 0 );
inline void flush();

static struct buffer_flusher_t {
    ~buffer_flusher_t() {
        flush();
    }
} buffer_flusher;

/** Read */

static const int buf_size = 4096;

static unsigned char buf[buf_size];
static int buf_len = 0, buf_pos = 0;

inline bool isEof() {
    if (buf_pos == buf_len) {
        buf_pos = 0, buf_len = fread(buf, 1, buf_size, stdin);
        if (buf_pos == buf_len)
            return 1;
    }
    return 0;
}

inline int getChar() { 
    return isEof() ? -1 : buf[buf_pos++];
}

inline int peekChar() { 
    return isEof() ? -1 : buf[buf_pos];
}

inline bool seekEof() { 
    int c;
    while ((c = peekChar()) != -1 && c <= 32)
        buf_pos++;
    return c == -1;
}

inline void skipBlanks() {
    while (!isEof() && buf[buf_pos] <= 32U)
        buf_pos++;
}

inline int readChar() {
    int c = getChar();
    while (c != -1 && c <= 32)
        c = getChar();
    return c;
}

inline int readUInt() {
    int c = readChar(), x = 0;
    while ('0' <= c && c <= '9')
        x = x * 10 + c - '0', c = getChar();
    return x;
}

template <class T>
inline T readInt() {
    int s = 1, c = readChar();
    T x = 0;
    if (c == '-')
        s = -1, c = getChar();
    else if (c == '+')
        c = getChar();
    while ('0' <= c && c <= '9')
        x = x * 10 + c - '0', c = getChar();
    return s == 1 ? x : -x;
}

inline double readDouble() {
    int s = 1, c = readChar();
    double x = 0;
    if (c == '-')
        s = -1, c = getChar();
    while ('0' <= c && c <= '9')
        x = x * 10 + c - '0', c = getChar();
    if (c == '.') {
        c = getChar();
        double coef = 1;
        while ('0' <= c && c <= '9')
            x += (c - '0') * (coef *= 1e-1), c = getChar();
    }
    return s == 1 ? x : -x;
}

inline void readWord( char *s ) { 
    int c = readChar();
    while (c > 32)
        *s++ = c, c = getChar();
    *s = 0;
}

inline bool readLine( char *s ) { 
    int c = getChar();
    while (c != '\n' && c != -1)
        *s++ = c, c = getChar();
    *s = 0;
    return c != -1;
}

/** Write */

static int write_buf_pos = 0;
static char write_buf[buf_size];

inline void writeChar( int x ) {
    if (write_buf_pos == buf_size)
        fwrite(write_buf, 1, buf_size, stdout), write_buf_pos = 0;
    write_buf[write_buf_pos++] = x;
}

inline void flush() {
    if (write_buf_pos)
        fwrite(write_buf, 1, write_buf_pos, stdout), write_buf_pos = 0;
}

template <class T> 
inline void writeInt( T x, char end, int output_len ) {
    if (x < 0)
        writeChar('-'), x = -x;

    char s[24];
    int n = 0;
    while (x || !n)
        s[n++] = '0' + x % 10, x /= 10;
    while (n < output_len)
        s[n++] = '0';
    while (n--)
        writeChar(s[n]);
    if (end)
        writeChar(end);
}

inline void writeWord( const char *s ) {
    while (*s)
        writeChar(*s++);
}

inline void writeDouble( double x, int output_len ) {
    if (x < 0)
        writeChar('-'), x = -x;
    int t = (int)x;
    writeInt(t), x -= t;
    writeChar('.');
    for (int i = output_len - 1; i > 0; i--) {
        x *= 10;
        t = std::min(9, (int)x);
        writeChar('0' + t), x -= t;
    }
    x *= 10;
    t = std::min(9, (int)(x + 0.5));
    writeChar('0' + t);
}

const int N = 500000;
const int inf = (int)1e9;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const int P = 239;
const ld eps = 1e-6;

char c[N];
unordered_map<int, map<int, int> > cnt[N];
unordered_map<int, int> bad[N];
vector<pair<int, int> > query[N];
bool ans[N];

void _merge(int u, int v)
{
    if (sz(cnt[u]) < sz(cnt[v]))
    {
        cnt[u].swap(cnt[v]);
        bad[u].swap(bad[v]);
    }
    for (auto it : bad[v])
        bad[u][it.fi] += it.se;
    for (auto it : cnt[v])
    {
        if (sz(cnt[u][it.fi]) < sz(it.se))
            cnt[u][it.fi].swap(it.se);
        for (auto x : it.se)
        {
            if ((cnt[u][it.fi][x.fi] & 1) && (x.se & 1))
                bad[u][it.fi] -= 2;
            cnt[u][it.fi][x.fi] += x.se;
        }
    }
    cnt[v].clear();
    bad[v].clear();
}

vector<int> g[N];

void dfs(int u, int par, int h)
{
    cnt[u].max_load_factor(0.25);
    cnt[u][h][c[u] - 'a']++;
    bad[u][h]++;
    for (int v : g[u])
        if (v != par)
        {
            dfs(v, u, h + 1);
            _merge(u, v);
        }
    for (auto q : query[u])
        ans[q.se] = (bad[u][q.fi] <= 1);
}

int main()
{
    //freopen("archer.in", "r", stdin);
    //freopen("archer.out", "w", stdout);
    //ios_base::sync_with_stdio(0);
    //cin.tie(0);
    //cout.precision(20);
    int n = readInt(), m = readInt();
    rep(i, 1, n)
    {
        int p = readInt();
        g[p - 1].push_back(i);
    }
    readWord(c);
    rep(i, 0, m)
    {
        int u = readInt(), h = readInt();
        query[u - 1].push_back({h, i});
    }
    dfs(0, -1, 1);
    rep(i, 0, m)
        ans[i] ? printf("Yes\n") : printf("No\n");
    return 0;
}