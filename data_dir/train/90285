#define _USE_MATH_DEFINES
#include <array>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 1e6 + 10;
int phi[N], cnt[N];
int F[N], G[N];
vector<int> factor[N];

void init_phi() {
  for (int i = 1; i < N; ++i) phi[i] = i;
  for (int i = 1; i < N; ++i) {
    for (int j = i + i; j < N; j += i) {
      phi[j] -= phi[i];
    }
  }
}

void init_comb() {
  static int inv[N];
  inv[1] = 1;
  for (int i = 2; i < N; ++i) {
    inv[i] = (MOD - MOD / i) * (int64)inv[MOD % i] % MOD;
  }
  F[0] = G[0] = 1;
  for (int i = 1; i < N; ++i) {
    F[i] = (int64)F[i - 1] * i % MOD;
    G[i] = (int64)G[i - 1] * inv[i] % MOD;
  }
}

int64 comb(int n, int m) {
  if (m > n) return 0;
  return (int64)F[n] * G[m] % MOD * G[n - m] % MOD;
}

void init_factor() {
  for (int i = 1; i < N; ++i) {
    for (int j = i; j < N; j += i) {
      factor[j].push_back(i);
    }
  }
}

void add(int& x, int y) {
  x += y;
  if (x >= MOD) x -= MOD;
}

int main() {
  init_phi();
  init_comb();
  init_factor();
  int n, m, q;
  scanf("%d%d%d", &n, &m, &q);
  vector<int64> ways(n + q + 1);
  for (int i = 0; i <= n + q; ++i) {
    ways[i] = comb(i, m - 1);
  }
  int sum = 0;
  vector<int> ret;
  for (int i = 0; i < n + q; ++i) {
    int x;
    scanf("%d", &x);
    for (auto& y : factor[x]) {
      add(sum, ways[cnt[y]] * phi[y] % MOD);
      ++cnt[y];
    }
    if (i >= n) ret.push_back(sum);
  }
  for (auto& it : ret) {
    printf("%d\n", it);
  }

  return 0;
}
