#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double K;
typedef pair<int, int> pii;

#define x first
#define y second
#define mp make_pair
#define pb push_back
#define all(a) (a).begin(), (a).end()

const int n = 4;
const int inf = 2000000000;

vector<int> vert, hor;

void change(int &table, int bit){
    table ^= (1 << bit);
}

bool one(int &table, int bit){
    return ((table & (1 << bit)) > 0);
}

bool add(int i, char c, int &table){
    int pos1 = i, pos2 = 16;
    if(c == '0'){
        pos2 = pos1 + 4;
    } else {
        pos2 = pos1 + 1;
    }

    if(pos1 > 15 || pos2 > 15){
        exit(1);
    }

    if((table & (1 << pos1)) == 0 && (table & (1 << pos2)) == 0){
        table ^= (1 << pos1);
        table ^= (1 << pos2);

        int newTable = table;
        for(int i = 0; i <= 3; i ++){
            for(int j = 0; j <= 4; j++){
                if(j == 4){
                    for(int k = 0; k < 4; k++){
                        change(newTable, i * 4 + k);
                    }
                }
                else if(!one(table, i * 4 + j)){
                    break;
                }
            }
        }

        for(int i = 0; i <= 3; i++){
            for(int j = 0; j <= 4; j ++){
                if(j == 4){
                    for(int k = 0; k < 4; k++){
                        if(one(newTable, i + k * 4)){
                            change(newTable, i + k * 4);
                        }
                    }
                }
                else if(!one(table, i + j * 4)){
                    break;
                }
            }
        }

        table = newTable;

        return true;
    }
    return false;
}

pii ans[1000];
void go(string &s, int table, int i){
    if(i == s.length()){
        for(int j = 0; j < i; j++){
            cout << 1 + ans[j].x << " " << 1 + ans[j].y << "\n";
        }
        exit(0);
    }

    vector<int> *posAr;
    if(s[i] == '0'){
        random_shuffle(vert.begin(), vert.end());
        posAr = &vert;
    } else {
        random_shuffle(hor.begin(), hor.end());
        posAr = &hor;
    }

    int curTable = table;
    for(auto pos : *posAr){
        if(add(pos, s[i], table)){
            ans[i] = {pos / 4, pos % 4};
            go(s, table, i + 1);
            table = curTable;
        }
    }
}

main(){
    cin.tie(0);
    srand(time(NULL));
    ios_base::sync_with_stdio(0);

    string s;
    cin >> s;

    for(int i = 0; i < 16; i++){
        if(i % 4 != 3){
            hor.pb(i);
        }
        if(i <= 11){
            vert.pb(i);
        }
    }

    int table = 0;
    go(s, table, 0);
    exit(1);
}
