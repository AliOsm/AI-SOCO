#include <bits/stdc++.h>
using namespace std;
typedef  long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<ll> vll;
int inf_int=2e9;
ll inf_ll=2e18;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
#define pb push_back
const double pi=3.1415926535898;
#define dout if(debug) cout
#define fi first
#define se second
#define sp setprecision
#define sz size()
#define mp make_pair


template<typename T,typename T1>
void prin(vector<pair<T,T1> >& a)
{
    for(int i=0;i<a.size();i++)
    {
        cout << a[i].fi<<" "<<a[i].se<<"\n";
    }
}

template<typename T,typename T1>
void prin(set<pair<T,T1> >& a)
{
    for(auto it=a.begin();it!=a.end();it++)
    {
        cout <<it->fi <<" "<<it->se<<"\n";
    }
}
template<typename T>
void prin(vector<T>& a)
{
    for(int i=0;i<a.size();i++)
    {
        cout << a[i];
        if(i<a.size()-1)
            cout<<" ";
        else
            cout <<"\n";
    }
}
template<typename T>
void prin(set<T>& a)
{
    for(auto it=a.begin();it!=a.end();it++)
    {
        cout << *it<<" ";
    }
}
template<typename T>
void prin_new_line(vector<T>& a)
{
    for(int i=0;i<a.size();i++)
    {
        cout << a[i]<<"\n";
    }
}
template<typename T,typename T1>
void prin_new_line(vector<pair<T,T1> >& a)
{
    for(int i=0;i<a.size();i++)
    {
        cout << a[i].fi<<" "<<a[i].se<<"\n";
    }
}
#define free asdasf
#define left aflalgalsf
#define right lasfaslgalg
bool debug=0;
const int maxn=2e3+600;
int mod=1e9;


double p[maxn];
double u[maxn];
struct edge
{
    int b,c;
    double cost;
    int flow,back;

};
vector<edge> g[maxn];
void add_edge(int a,int b,int c,double cost)
{
    edge e1={b,c,cost,0,(int)g[b].sz};
    edge e2={a,0,-cost,0,(int)g[a].sz};
    g[a].pb(e1);
    g[b].pb(e2);
}

int p_rib[maxn];
int q[maxn];
void solve()
{
    int n,a,b;
    cin >> n >> a >> b;
    for(int i=1;i<=n;i++)
    {
        cin >> p[i];
    }
    for(int i=1;i<=n;i++)
    {
        cin >> u[i];
    }
    int s=0,t=n+1;
    int s1=n+2,s2=n+3;
    for(int i=1;i<=n;i++)
    {
        add_edge(s1,i,1,-p[i]);
        add_edge(s2,i,1,-u[i]);

        add_edge(i,t,1,0);
        add_edge(i,t,1,p[i]*u[i]);
    }
    add_edge(s,s1,a,0);
    add_edge(s,s2,b,0);

    double cost=0;
    int n1=n+5;
    while(1)
    {
        vector<int> id(n1);
        vector<double> dis(n1,inf_int);
        vector<int> parent(n1);
        int qh=0,qt=1;
        q[0]=s;
        dis[s]=0;
        while(qh!=qt)
        {
            int v=q[qh++];
            id[v]=2;
            if(qh==n1)
                qh=0;
            for(int i=0;i<g[v].sz;++i)
            {
                edge& r=g[v][i];
                if(r.flow<r.c && dis[r.b]-0.00000001>dis[v]+r.cost)
                {
                    dis[r.b]=dis[v]+r.cost;
                    if(id[r.b]==0)
                    {
                        q[qt++]=r.b;
                        if(qt==n1)
                            qt=0;
                    }
                    else if(id[r.b]==2)
                    {
                        if(--qh==-1)qh=n1-1;
                        q[qh]=r.b;
                    }
                    id[r.b]=1;
                    p[r.b]=v;
                    p_rib[r.b]=i;
                }
            }
        }
        if(dis[t]>3000)
            break;
        for(int v=t;v!=s;v=p[v])
        {
            int pv=p[v],pr=p_rib[v],r=g[pv][pr].back;
            g[pv][pr].flow+=1;
            g[v][r].flow-=1;
            cost+=g[pv][pr].cost;
        }
    }
    cout <<setprecision(15)<< -cost;




}

#define FILE "rollback"
int main()
{
        #ifdef ILDAR
        freopen("input.txt","r",stdin);
        #endif // ILDAR



    //    freopen(FILE".in","r",stdin);
    //    freopen(FILE".out","w",stdout);
       if(!debug)
       {
            ios_base::sync_with_stdio(0);
            cin.tie(0);
            cout.tie(0);
       }

        int t=1;
   //     //scanf("%d",&t);
      //  cin >> t;
         while(t--)
            solve();
        return 0;
}
