#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using PII = pair<int, int>;
using VI = vector<int>;

const int N = 3e5 + 1, M = 8;
int a[N][M];
int n, m;

int idx[1 << M];

PII check(int val) {
  memset(idx, 0, sizeof idx);

  idx[0] = 1;
  for (int i = 1; i <= n; i++) {
    int mask = 0;
    for (int j = 0; j < m; j++) {
      if (a[i][j] >= val) mask |= (1 << j);
    }

    for (int sub = mask; sub != 0; sub = (sub - 1) & mask) {
      idx[sub] = i;
    }
  }

  for (int mask = 0; mask < (1 << m); mask++) {
    int neg = (1 << m) - 1 - mask;
    if (idx[mask] != 0 && idx[neg] != 0) {
      return {idx[mask], idx[neg]};
    }
  }
  return {0, 0};
}

int main() {
#ifdef LOCAL_EXEC
//	freopen("sample.in", "r", stdin);
//	freopen("sample.out", "w", stdout);
#else
  ios_base::sync_with_stdio(false); cin.tie(NULL);
#endif

  cin >> n >> m;
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < m; j++) {
      cin >> a[i][j];
    }
  }

  int lo = 0, hi = 1000'000'000 + 10;
  while (lo + 1 < hi) {
    int mid = (lo + hi) / 2;
    if (check(mid).first > 0) {
      lo = mid;
    } else {
      hi = mid;
    }
  }

  auto ans = check(lo);
  cout << ans.first << ' ' << ans.second;

  return 0;
}
