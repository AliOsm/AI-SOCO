/*
 * temp.cpp
 *
 *  Created on: 2012-7-18
 *      Author: BSBandme
 */
//#pragma comment(linker, "/STACK:1024000000,1024000000")
#include <iostream>
#include <fstream>
#include <string.h>
#include <cstdio>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <cassert>
#include <list>
#include <iomanip>
#include <math.h>
#include <deque>
#include <utility>
#include <map>
#include <set>
#include <bitset>
#include <numeric>
#include <climits>
#include <cctype>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <functional>
#include <sstream>
#include <tr1/unordered_map>
#include <tr1/unordered_set>
#include <ext/pb_ds/priority_queue.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace tr1;
using namespace __gnu_pbds;

#define mpr make_pair
typedef unsigned int ui;
typedef unsigned long long ull;
typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef pair <double, double> pdd;
typedef vector <int> vi;
typedef vector <ll> vll;
typedef vector <double> vd;
typedef vector <string> vs;
typedef map <string, int> mpsi;
typedef map <double, int> mpdi;
typedef map <int, int> mpii;
// binomial_heap_tag, rc_binomial_heap_tag, thin_heap_tag, binary_heap_tag
typedef __gnu_pbds::priority_queue<int, greater<int>, pairing_heap_tag> pq_type;
// splay_tree_tag, ov_tree_tag
typedef tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update> tree_type;

const double pi = acos(0.0) * 2.0;
const long double eps = 1e-10;
const int step[8][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}

template <class T> inline T max1(T a, T b) { return b < a ? a : b; }
template <class T> inline T max1(T a, T b, T c) { return max1(max1(a, b), c); }
template <class T> inline T max1(T a, T b, T c, T d) { return max1(max1(a, b, c), d); }
template <class T> inline T max1(T a, T b, T c, T d, T e) { return max1(max1(a, b, c, d), e); }
template <class T> inline T min1(T a, T b) { return a < b ? a : b; }
template <class T> inline T min1(T a, T b, T c) { return min1(min1(a, b), c); }
template <class T> inline T min1(T a, T b, T c, T d) { return min1(min1(a, b, c), d); }
template <class T> inline T min1(T a, T b, T c, T d, T e) { return min1(min1(a, b, c, d), e); }

inline int jud(double a, double b){
	if(abs(a) < eps && abs(b) < eps) return 0;
	else if(abs1(a - b) / abs1(a) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
template <typename t> inline int jud(t a, t b){
	if(a < b) return -1;
	if(a == b) return 0;
	return 1;
}

// f_lb == 1代表返回相同的一串的左边界，f_small == 1代表返回如果没有寻找的值返回小的数
template <typename it, typename t1>
inline int find(t1 val, it a, int na, bool f_small = 1, bool f_lb = 1){
	int be = 0, en = na - 1;
	if(*a <= *(a + na - 1)){
		if(f_lb == 0) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != 1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != -1) en = mid;
			else be = mid + 1;
		}
		if(f_small && jud(*(a + be), val) == 1) be--;
		if(!f_small && jud(*(a + be), val) == -1) be++;
	} else {
		if(f_lb) while(be < en){
			int mid = (be + en + 1) / 2;
			if(jud(*(a + mid), val) != -1) be = mid;
			else en = mid - 1;
		}else while(be < en){
			int mid = (be + en) / 2;
			if(jud(*(a + mid), val) != 1) en = mid;
			else be = mid + 1;
		}
		if(!f_small && jud(*(a + be), val) == -1) be--;
		if(f_small && jud(*(a + be), val) == 1) be++;
	}
	return be;
}

template <class T> inline T lowb(T num) {return num & (-num); }
inline int bitnum(ui nValue) { return __builtin_popcount(nValue); }
inline int bitnum(int nValue) { return __builtin_popcount(nValue); }
inline int bitnum(ull nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitnum(ll nValue) { return __builtin_popcount(nValue) + __builtin_popcount(nValue >> 32); }
inline int bitmaxl(ui a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(int a) { if(a == 0) return 0; return 32 - __builtin_clz(a); }
inline int bitmaxl(ull a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }
inline int bitmaxl(ll a) { int temp = a >> 32; if(temp) return 32 - __builtin_clz(temp) + 32; return bitmaxl(int(a)); }

long long pow(long long n, long long m, long long mod = 0){
	if(m < 0) return 0;
	long long ans = 1;
	long long k = n;
	while(m){
		if(m & 1) {
			ans *= k;
			if(mod) ans %= mod;
		}
		k *= k;
		if(mod) k %= mod;
		m >>= 1;
	}
	return ans;
}

#define  MOD 1000000007
template <class t1, class t2>
inline void add(t1 &a, t2 b, int mod = -1) {
	if(mod == -1) mod = MOD;
	a += b;
	while(a >= mod) a -= mod;
	while(a < 0) a += mod;
}
template <class t>
void output1(t arr) {
	for(int i = 0; i < (int)arr.size(); i++)
		cerr << arr[i] << ' ';
	cerr << endl;
}
template <class t>
void output2(t arr) {
	for(int i = 0; i < (int)arr.size(); i++)
		output1(arr[i]);
}


//#define debug
//....................密..........封..........线..........下..........禁..........止..........hack...............................................

const int mod = MOD;
const int maxn = 70;
ll n, k;
struct matrix{
	const static int maxn = 31;
	int row, col;
	ll mat[maxn][maxn];

	matrix(int r = 0, int c = 0){
		row = r; col = c;
		for(int i = 0; i < row; i++) for(int j = 0; j < col; j++) mat[i][j] = 0;
	}
	const ll * operator[] (int i) const {
		return mat[i];
	}
	ll * operator[] (int i) {
		return mat[i];
	}
	bool danweiju(){
		if(row != col) return 0;
		for(int i = 0; i < row; i++) for(int j = 0; j < col; j++) mat[i][j] = bool (i == j);
		return 1;
	}
	matrix operator * (const matrix& b) const{
		int i, j, k;
		matrix c(row, b.col);
		memset(c.mat, 0, sizeof(c.mat));
		for (i = 0; i < c.row; i++) for (k = 0; k < col; k++)
			if(mat[i][k])
				for (j = 0; j < c.col; j++){
					add(c.mat[i][j], mat[i][k] * b.mat[k][j] % mod);
				}
		return c;
	}
	matrix operator + (const matrix& b) const{
		matrix c(max1(row, b.row), max1(col, b.col));
		for(int i = 0; i < c.row; i++) for(int j = 0; j < c.col; j++){
			ll a = 0; if(i < row && j < col) a = mat[i][j];
			ll b1 = 0; if(i < b.row && j < b.col) b1 = b.mat[i][j];
			c.mat[i][j] = a + b1;
			if(c.mat[i][j] > mod) c.mat[i][j] -= mod;
		}
		return c;
	}

	inline void operator = (const matrix & b){
		memcpy(mat, b.mat, sizeof(mat));
		col = b.col;  row = b.row;
	}
};

matrix trans[maxn], m[maxn], rm[maxn];
long double base[maxn];

inline ll getbitcnt(ll num) {
	ll ans = 0;
	for(; num; num /= k) ans += num % k;
	return ans % k;
}


int main() {
	ios_base::sync_with_stdio(0);
	#ifdef debug //......................................................................................................
	freopen("input.txt", "r", stdin);
	int __size__ = 256 << 20; // 256MB
	char *__p__ = (char*)malloc(__size__) + __size__;
	__asm__("movl %0, %%esp\n" :: "r"(__p__));
	#endif //...........................................................................................................

	cin >> n >> k;
	if(n <= k) {
		cout << (1ll << n) % mod << endl;
		return 0;
	}
	for(int i = 0; i < k; i++) {
		trans[i].row = trans[i].col = k + 1;
		for(int j = 0; j <= k; j++) for(int t = 0; t <= k; t++)
			trans[i][j][t] = 0;
		for(int j = 0; j < k; j++) {
			int tt = (j + i) % k;
			for(int rt = tt; rt < k; rt++)
				trans[i][j][rt]++;
			for(int t = j + 1; t <= k; t++)
				for(int rt = 0; rt < k; rt++)
					add(trans[i][t][rt], trans[i][j][rt]);
		}
		trans[i][k][k] = 1;
	}
	m[0].row = m[0].col = k + 1;
	m[0].danweiju();
	int lbase = 1;
	base[0] = 1;
	long double num = k;
	for(ll i = 1; num < (long double)n * k; num *= k, i++) {
		m[i].row = m[i].col = k + 1;
		int last = getbitcnt(num - k);
		int delta = (1 + k - last) % k;
		m[i].danweiju();
		rm[i - 1] = trans[delta] * m[i - 1];
		m[i] = m[i - 1];
		for(int j = 1; j < k; j++)
			m[i] = m[i - 1] * trans[delta] * m[i];
		base[i] = num;
		lbase++;
	}
	ll rn = n;
	n /= k;
	n--;
	matrix ansm(k + 1, k + 1);
	ansm.danweiju();

	for(ll i = lbase - 1; i >= 0; i--) {
		while(n >= base[i]) {
			n -= base[i];
			ansm = rm[i] * ansm;
		}
	}
	ll ans = 0;
	for(int i = 0; i < k + 1; i++)
		ans += ansm[k][i] * (1ll << i) % mod;
	ans %= mod;
	vll arr;
	for(int i = 0; i < k; i++) {
		ll temp = 0;
		for(int j = 0; j <= k; j++)
			add(temp, ansm[i][j] * ((1ll << j) % mod) % mod) ;
		arr.push_back(temp);
	}
	for(ll i = rn / k * k; i < rn; i++) {
		ll temp = 0;
		for(ll j = i - 1, link = arr.size() - 1;  ; j--, link--) {
			assert(link >= 0);
			add(temp, arr[link]);
			if(getbitcnt(j) == getbitcnt(i)) break;
		}
		arr.push_back(temp);
		add(ans, temp);
	}
	cout << ans << endl;


    return 0;
}
