#include<queue>
#include <cmath>
#include <complex>
#include<map>
#include <string>
#include<iostream>
#include<bits/stdc++.h>


#define pi 3.141592654
#define forr(i,a,b) for(int i=a;i<=b;i++)
#define F first
#define S second
#define input ios_base::sync_with_stdio(0);cin.tie(0);


#define X real()
#define Y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep ,cos
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel , sin
#define length(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)
//#define polar(r,ang)            ((r)*exp(point(0,ang)))  ==> Already added in c++11
#define rotateO(p,ang)          ((p)*exp(point(0,ang)))
#define rotateA(p,ang,about)  (rotateO(vec(about,p),ang)+about)
#define reflectO(v,m)  (conj((v)/(m))*(m))


using namespace std;
typedef pair<double,double>pdd;
typedef long long  ll;
typedef pair<ll, ll>pii;
typedef complex<double> point;
//template<typename T>T gcd(T x, T y) { if(y == 0)return x; else return gcd(y, x%y); }
//typedef bitset<30> mask;
//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};
//#define var(x) ((x)<<1)
//#define nvar(x) ((x)^1)
const int N=100000,M=100000;
int n,q,a[300005],b[300005],val[300000*22],l,r,idx,v;
vector<int>k[300005];
int bulid(int s=1,int e=n,int p=1)
{
    if(s==e) return val[p]=a[s];
    int mid=(s+e)/2;
    return val[p]=min(bulid(s,mid,p*2),bulid(mid+1,e,p*2+1));
}

int get(int s=1,int e=n,int p=1)
{
    if(s>=l&&e<=r)return val[p];
    int mid=(s+e)/2;
    if(r<=mid)return get(s,mid,p*2);
    else if(l>mid) return get(mid+1,e,p*2+1);
    else return min(get(s,mid,p*2),get(mid+1,e,p*2+1));
}


int up(int s=1,int e=n,int p=1)
{
    if(s==idx&&e==idx)return val[p]=v;
    int mid=(s+e)/2;
    if(idx<=mid)return val[p]=min(up(s,mid,p*2),val[p*2+1]);
    else return val[p]=min(val[p*2],up(mid+1,e,p*2+1));
}

 main()
{

//cout<<Pow((ll)1000000,(ll)110);
//freopen("input.txt","r",stdin);
//freopen("ahmed.txt","w",stdout);
//    char input[15];
//    scanf("%s", &input);  array of char
//  gets(c+1);  array of char
//printf("%s, ",name[k[i]].c_str());  printf of string
//priority_queue<ll,vector<ll>,greater<ll>>y;
input;
cin>>q;
while(q--)
{
    cin>>n;
    vector<int>A,B;
    forr(i,1,n)k[i].clear();
    forr(i,1,n)
    {
      cin>>a[i];
      A.push_back(a[i]);
      k[a[i]].push_back(i);
    }

    forr(i,1,n)
    reverse(k[i].begin(),k[i].end());

    forr(i,1,n)cin>>b[i],B.push_back(b[i]);

    sort(A.begin(),A.end());
    sort(B.begin(),B.end());
    if(A!=B)
    {
        cout<<"NO"<<endl;
        continue;
    }

    bulid();
    int ck=1;
    l=1;
    forr(i,1,n)
    {
        int g=k[b[i]][(int)k[b[i]].size()-1];
        k[b[i]].pop_back();
        r=g;
        int f=get();
        if(f!=b[i])
        {
            cout<<"NO"<<endl;
            ck=0;
            break;
        }
        idx=g;
        v=1e9;
        up();
        if(g==l)l++;
    }
    if(ck)cout<<"YES"<<endl;
}
return 0;
}
