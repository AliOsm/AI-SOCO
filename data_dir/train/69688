#include <cstdio>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cctype>
#include <cassert>
#include <ciso646>
#include <climits>
#include <cmath>


#include <algorithm>
#include <utility>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <map>
#include <queue>
#include <stack>
#include <set>
#include <deque>
#include <bitset>

using namespace std;
typedef long long ll;
typedef std::pair< int, int > pii;
typedef std::vector< int > vi;
typedef std::vector< pii > vii ;
 
#define fi first
#define se second
#define all(x)  (x).begin(), (x).end()
#define fore(i,a,b)  for(int i = (a), vzq_b = (b); i < vzq_b; ++i)
#define forn(i, n)  fore(i,0,n)

double const EPS = 1.0E-9 ;
int const MOD    = (int)1e9 + 7 ;
inline void read( char*   s ){  scanf("%s", s) ; } 
inline void  read(int&x){  scanf("%d", & ( x ) ); }
inline void read(ll&x){ scanf("%lld",&x); }
inline void read(double &x){ scanf("%lf", &x); }
inline void writeln(int x){ printf("%d\n", x);}
inline void writeln(ll x ) { printf("%lld\n", x ) ; } 
inline void writeln(double x){ printf("%.12f\n", x ) ; } 
template< typename ...T> void read(T&...args){  
    using swallow = int[];
    swallow w = { 0, (read(args), 0) ... } ;
}

inline ll gcd(ll x,ll y) { return y == 0 ? x : gcd(y, x%y); }
inline ll lcm(ll x, ll y){ return x == 0 && y == 0  ? 0 : x/gcd(x,y) * y; }
inline ll powmod(ll x, ll n, ll m = MOD ) {
    ll r = 1;
    while(n){
        if (n&1) r = (r*x)%m;
        x = (x*x)%m;
        n/=2;
    }
    return r;
}

static int leap(int y){  return y % 4 == 0 && y% 100 != 0  || y % 400 == 0 ; }

static int const month[ 2 ][ 12 ] = 
{ 
    { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 },
    { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
};
  

/********************************************************/
static const int N = 1 << 20 ;
static const int M = 1 << 20 ;
  
int n,m;
ll a[N];
int b[N];

ll ans = 0 ;

static int solve()
{      
    read(n,m);
    
    const int r = n / m ;
    forn(i,n)read(a[i]);
    
    forn( i, n )
    {
        ll c = a[i];
        int q = (int)( c % m ) ;
        b[ q ] ++ ;
    }
    
    set< int > ss ;
    //printf("r = %d\n", r ) ;
    
    forn(i, m ) {
        int c = b[i];
      //  printf(" b[%d] = %d\n", i, b[i] ) ;
        //int t = c >= r  ? 1 : 0 ;
        if ( c < r ) ss.insert( i );
    }
    
//    printf("ss: " ) ;
//    for(int t: ss)printf(" %d ", t);
//        printf("\n");
//        
    
    forn(i, n ) 
    {
        ll c = a[i];
        int q = (int)(c % m ) ;
        if ( b[ q ] <= r )continue;
        
//        for(int t: ss)printf(" %d ", t);
//        printf("\n");
//        
        // b[q] > r     !
        b[ q ] -- ;
        
        ans++ ;
        c++   ;
        q = ( q + 1 ) % m ;
        
        auto it = ss.lower_bound( q ) ;
        if (it != ss.end() ) 
        {
            int next_q = *it;
            int dq = next_q - q;
            
            c += dq;
            
            ans += dq;
            
            q = next_q;
            //continue;
        }
        else 
        {
            int dq = m - q ;
            c += dq;
            q = 0;
            
            ans += dq;
            it = ss.lower_bound(q);
            if (it== ss.end())continue;
            assert(it != ss.end() ) ;
            
            int next_q = *it;
            dq = next_q - q;
            
            c += dq;
            
            ans += dq; 
            
            q= dq;
        }
        
        
        a [ i] = c;
        b[  q ] ++ ;
        if ( b[  q ] >= r ) 
        {
            ss.erase(  q );
        }
    }
    
    printf("%lld\n", ans ) ;
    forn(i,n)printf("%lld ", a[i]);
    
    return 0 ;
}


int main(int argc, char * argv[] ) 
{
    
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
#endif //end online-judge    
  
    
    solve();
    return 0;
}