/*<<head>> {{{*/
#include <bits/stdc++.h>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <string>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
using namespace std;
typedef double db;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
#define dd(x) cout << #x << " = " << x << ", "
#define de(x) cout << #x << " = " << x << endl
#define rep(i,a,b) for(int i=(a);i<(b);++i)
#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define fi first
#define se second
//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;
//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;
const int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1
const ll LINF = 0x3f3f3f3f3f3f3f3f;
/*}}}*/                         // zr, zm
const int MOD = (int)1e9+7;     // when MOD = 1e9+7, inv2 = 500000004
const int N = (int)1e5+7;

// ------- 变量 ------- //

int n, m, pre[N], len[N][2];
char s[N];
pii dp[N];

// ------- 函数 ------- //

void Init() {
    memset(len, 0, sizeof(len));
    memset(dp, 0, sizeof(dp));
}

int Solve() {
    rep(i, 1, n+1) {
        pre[i] = pre[i-1] + (s[i] == '?');
        if (s[i] != 'b') len[i][1] = len[i-1][0] + 1;
        if (s[i] != 'a') len[i][0] = len[i-1][1] + 1;
        if (len[i][m&1] >= m) {
            dp[i] = max(dp[i-1], mp(dp[i-m].fi + 1, -(-dp[i-m].se + pre[i] - pre[i-m])));
        } else {
            dp[i] = dp[i-1];
        }
    }
    return printf("%d\n", -dp[n].se);
}

// ------- main ------- //

int main ()
{
    //ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);

    //Pre();
    //int t; scanf("%d", &t); while (t--) {
    while (~scanf("%d%s%d", &n, s + 1, &m)) {
    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符
        //if (n == 0) break;
        //static int kase = 0; printf("Case %d: ", ++kase);
        Init();
        Solve();
        //if (t) puts("");
    }
    return 0;
}