#include<bits/stdc++.h>
#include<ext/numeric>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define UNVISITED -1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;

int dx[] = { 0, 0, 1, -1, -1, -1, 1, 1 };
int dy[] = { 1, -1, 0, 0, 1, -1, 1, -1 };

const int MAX = 5005, MOD = 1e9 + 7;
int n;
string s;
vector<int> z[MAX];
ll memo[MAX][MAX];

//void zAlgorithm(int idx) {
//	for (int i = idx + 1, l = idx, r = idx; i < n; ++i) {
//		if (i <= r)
//			z[idx][i] = min(r - i + 1, z[idx][i - l]);
//		while (i + z[idx][i] < n && s[idx + z[idx][i]] == s[i + z[idx][i]])
//			++z[idx][i];
//		if (i + z[idx][i] - 1 > r)
//			l = i, r = i + z[idx][i] - 1;
//	}
//}
vector<int> z_function(string s) {
	int n = (int) s.length();
	vector<int> zz(n);
	for (int i = 1, l = 0, r = 0; i < n; ++i) {
		if (i <= r)
			zz[i] = min(r - i + 1, zz[i - l]);
		while (i + zz[i] < n && s[zz[i]] == s[i + zz[i]])
			++zz[i];
		if (i + zz[i] - 1 > r)
			l = i, r = i + zz[i] - 1;
	}
	return zz;
}
void e3del(ll &ret) {
	if (ret >= MOD)
		ret -= MOD;
}
ll solve(int l, int r) {
	if (r == n)
		return 1;
	ll &ret = memo[l][r];
	if (~ret)
		return ret;
	ret = solve(l, r + 1);
//	e3del(ret);
	if (s[r] == '0')
		return ret;
	int siz = r - l;
	int szSame = z[l][siz];
	int ns = siz;
	if (szSame >= siz || s[l + szSame] > s[r + szSame])
		++ns;
	if (r + ns <= n)
		ret = (ret + solve(r, r + ns)) % MOD;
//	e3del(ret);
	return ret;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "rt", stdin);
//	freopen("concatenation.out", "wt", stdout);
#endif
	scanf("%d", &n);
	cin >> s;
	for (int i = 0; i < n; ++i)
		z[i] = z_function(s.substr(i));
	CLR(memo, -1);
	printf("%d", (int) solve(0, 1));
}

