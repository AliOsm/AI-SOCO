#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
#define MAX 1000001
long long int bit[MAX];
void add(int i, long long int x){
    i++;
    while (i < MAX){
        bit[i] += x;
        i += i&-i;
    }
}
long long int sum(int i){
    i++;
    long long int r = 0;
    while (i){
        r += bit[i];
        i -= i&-i;
    }
    return r;
}
long long int bit1[MAX];
void add1(int i, long long int x){
    i++;
    while (i < MAX){
        bit1[i] += x;
        i += i&-i;
    }
}
long long int sum1(int i){
    i++;
    long long int r = 0;
    while (i){
        r += bit1[i];
        i -= i&-i;
    }
    return r;
}
vector<long long int> v;
int n;
long long int A[MAX];
int main(){
    scanf("%d", &n);
    for (int i = 0; i < n; i++){
        long long int a;
        scanf("%lld", &a);
        v.push_back(a);
        A[i] = a;
    }
    sort(v.begin(), v.end());
    v.erase(unique(v.begin(), v.end()), v.end());
    for (int i = 0; i < n; i++){
        A[i] = lower_bound(v.begin(), v.end(), A[i]) - v.begin();
        add1(A[i], 1);
    }
    long long int ans = 0;
    for (int i = 0; i < n; i++){
        add1(A[i], -1);
        long long int summ = i - sum(A[i]);
        summ *= sum1(A[i] - 1);
        add(A[i], 1);
        ans += summ;
    }
    printf("%lld\n", ans);
    return 0;
}