#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cassert>
#include <queue>
using namespace std;
#define forr(i, a, b) for(int i = (a); i < (int) (b); i++)
#define forn(i, n) forr(i, 0, n)
#define pb push_back
#define fst first
#define snd second
#define SZ(x) ((int)x.size())
typedef long long ll;
#define dforn(i, n) for(int i = n - 1; i >= 0; i--)

const int MAXN = 200050;

ll n,k,l,m,A[MAXN];

int main() {
    //~ freopen("input.in", "r", stdin);
    while( scanf("%lld%lld%lld", &n,&k,&l) >= 1 ){
        m=n*k;
        forn(i, m){
            scanf("%lld", &A[i]);
        }
        sort(A, A + m);
        if(n == 1){
            printf("%lld\n",A[0]);
            continue;
        }
        ll last = A[0];
        ll r = -1;
        forr(i,1,m-(k-1)){
            if(abs(last-A[i])<=l){
                r = i;
            }
        }
        if(r == -1 || r+1 < n){
            printf("0\n");
            continue;
        }
        ll ans = 0, tot = 0;
        vector<ll> choose;
        ll restito = 0;
        forn(i,r+1){
            if(restito == 0){
                ans += A[i];
                tot++;
                restito = k-1;
            } else {
                choose.pb(A[i]);
                restito--;
            }
        }
        while(tot<n){
            ans += choose.back();
            tot++;
            choose.pop_back();
        }
        printf("%lld\n", ans);
    }
    return 0;
}
