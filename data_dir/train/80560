#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair

#define all(x) (x).begin(), (x).end()

#define fi first
#define se second

typedef long long ll;

using namespace std;

int a[605], b[605];

int dp[605][605];

int p[605][605];

char s[1205];

int d[605];

int n;

void pre() {
    for (int l = 1; l <= 600; ++l) {
        for (int r = l; r <= 600; ++r) {
            dp[l][r] = -1;
         }
    }
}

bool calc(int l, int r) {
    if (r < l) {
        return 1;
    }

    if (dp[l][r] != -1) {
        return dp[l][r];
    }

    dp[l][r] = 0;

    int ps = (r - l) * 2 + 1;

    if (a[l] <= ps && ps <= b[l]) {
        if (calc(l + 1, r)) {
            dp[l][r] = 1;
            p[l][r] = l;
        }
    }

    for (int mid = l + 1; mid <= r && !dp[l][r]; ++mid) {
        bool cur = calc(l, mid - 1) && calc(mid, r);

        if (cur) {
            dp[l][r] = 1;
            p[l][r] = mid;
        }
    }

    return dp[l][r];
}

void rec(int l, int r) {
    if (r < l) {
        return;
    }

    if (p[l][r] == l) {
        d[l] = (r - l) * 2 + 1;
        rec(l + 1, r);

        return;
    }

    rec(l, p[l][r] - 1);
    rec(p[l][r], r);
}

void solve() {
    scanf("%d", &n);

    for (int i = 1; i <= n; ++i) {
        scanf("%d %d", &a[i], &b[i]);
    }

    if (!calc(1, n)) {
        printf("IMPOSSIBLE\n");
        return;
    }

    rec(1, n);

    for (int i = 1, cur = 0; i <= (n << 1); ++i) {
        if (!s[i]) {
            ++cur; s[i] = '(';
            s[i + d[cur]] = ')';
        }
    }

    printf("%s", s + 1);
}

int main() {
    #ifdef BThero
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif

    int tt = 1;

    pre();

    while (tt--) {
        solve();
    }

    return 0;
}
