#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cstring>
#include <assert.h>
#include <iomanip>
#include <map>

#define LL long long int
#define N 300000
#define INF 1000000000
#define first x
#define second y
using namespace std;

bool instack[N],vis[N][2],draw=false,win=false;
vector<int> g[N];
int pre[N][2];

void dfs(int node,int par,int prev) {
	if (vis[node][par]) return;
	vis[node][par]=true;
	pre[node][par]=prev;
	for (auto it:g[node]) {
		dfs(it,par^1,node);
	}
}
void cycle(int node) {
	vis[node][0]=true;
	instack[node]=true;
	for (auto it:g[node]) {
		if (instack[it]) draw=true;
		if (!vis[it][0]) cycle(it);
	}
	instack[node]=false;
}

int main() {
	//ios::sync_with_stdio(false);
	//cin.tie(0);cout.tie(0);
	int n,m,i,j,c,x,s;
	cin >> n >> m;
	for (i=1;i<=n;i++) {
		cin >> c;;
		for (j=0;j<c;j++) {
			cin >> x;
			g[i].push_back(x);
		}
	}
	cin >> s;
	memset(vis,0,sizeof(vis));
	memset(instack,0,sizeof(instack));
	memset(pre,0,sizeof(pre));
	dfs(s,0,-1);
	memset(vis,0,sizeof(vis));
	cycle(s);
	
	for (i=1;i<=n;i++) {
		if (g[i].size()>0) continue;
		if (pre[i][1]) {
			cout << "Win\n";
			//print(i,1);
			
			vector<int> ans;
			for (int curr=i,par=1;curr!=-1;par^=1) {
				ans.push_back(curr);
				curr=pre[curr][par];
			}
			reverse(ans.begin(),ans.end());
			for (auto it:ans) cout << it << " ";
			cout << '\n';
			return 0;
		}
	}
	
	if (draw) cout << "Draw\n";
	else cout << "Lose\n";
	
	return 0;
}
/*
4 4
1 2
2 3 4
1 2
0
1
*/
