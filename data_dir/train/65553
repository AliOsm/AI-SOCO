#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
 
using namespace std;
 
#define ll long long
#define ld long double
#define pb push_back
#define pii pair<int, int>
#define pll pair<long long, long long>
#define pdd pair<double, double>
#define pldld pair<ld, ld>
#define mp make_pair
#define ull unsigned long long
#define pss pair<string, string>
#pragma comment(linker, "/STACK:64000000")
 
const int infi = 1e9 + 7;
const ll infl = 1e18;
const long double eps = 1e-8;
const long double eps1 = 1e-10;
const int mod = (1e9 + 7);
const ll mod1 = 1e9 + 7;
const ll mod2 = 1e9 + 7;
const ll p1 = 31;
const ll p2 = 37;
const ll p3 = 29;
const int ver1 = (62 * 62);

vector <int> g[100500];
int used[100500];
int p[100500][20];
int h[100500];
int tin[100500];
int tout[100500];
int t = 1;
int sum[100500];
void dfs(int v) {
    used[v] = 1;
    tin[v] = t++;
    for (int i = 1; (1 << i) <= h[v]; ++i) {
        p[v][i] = p[p[v][i - 1]][i - 1];
    }
    for (int i = 0; i < (int)g[v].size(); ++i) {
        if (used[g[v][i]]) {
            continue;
        }
        h[g[v][i]] = h[v] + 1;
        p[g[v][i]][0] = v;
        dfs(g[v][i]);
        sum[v] += sum[g[v][i]];
    }
    tout[v] = t++;
    sum[v]++;
    return;
}
int checkp(int a, int b) {
    if (tin[a] <= tin[b] && tout[b] <= tout[a]) {
        return 1;
    }
    return 0;
}
int getlca(int a, int b){
    if (checkp(a, b)) {
        return a;
    }
    if (checkp(b, a)) {
        return b;
    }
    int i = 18;
    for (; i >= 0; --i) {
        if (!checkp(p[a][i], b)) {
            a = p[a][i];
        }
    }
    return p[a][0];
}
int getp(int a, int h1) {
    for (int i = 18; i >= 0;--i) {
        if ((1 << i) <= h1) {
           h1 -= (1 << i);
           a = p[a][i];
        }
    }
    return a;
}

int main() {
    //freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    //freopen("vase.in", "r", stdin); freopen("vase.out", "w", stdout);
    int n;
    cin >> n;
    for (int i = 0; i < n - 1; ++i) {
        int a, b;
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    dfs(1);
    tout[0] = t++;
    int m;
    cin >> m;
    for (; m; --m) {
        int x, y;
        cin >> x >> y;
        if (x == y) {
            cout << n << endl;
            continue;
        }
        int lca = getlca(x, y);
        if (lca == x || lca == y) {
            if (lca == y) {
                swap(x, y);
            }
            int d = h[y] - h[x];
            if (d & 1){ 
                cout << 0 << endl;
                continue;
            }
            int q = getp(y, d / 2);
            int w = getp(y, d / 2 - 1);
            cout << sum[q] - sum[w] << endl;
            continue;
        }
        if (h[y] > h[x]) {
            swap(x, y);
        }
        int d = h[y] + h[x] - h[lca] * 2;
        if (d & 1){ 
                cout << 0 << endl;
                continue;
        }
        int q = getp(x, d / 2);
        if (q == lca) {
            int l = getp(x, d / 2 - 1);
            int r = getp(y, d / 2 - 1);
            cout << n - sum[r] - sum[l] << endl;
            continue;
        }
        int w = getp(x, d / 2 - 1);
        cout << sum[q] - sum[w] << endl;
    }

    return 0;
}