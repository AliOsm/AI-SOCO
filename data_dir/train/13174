#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>
#include <complex>
#include <cassert>
#include <regex>
#include <random>
#include <fstream>

#define ll long long
#define ld long double
#define ull unsigned ll
#define mp(xx, yy) make_pair(xx, yy)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define pll pair<ll, ll> 
#define vi vector<int>
#define vll vector<ll>
#define vpii vector<pii>
#define vpll vector<pll>
#define vvi vector<vector<int>>
#define vvll vector<vll>
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
//#define endl '\n'
ld pi = acos(-1.0);
const int mod = 1e9 + 7;
using namespace std;

ll gcd(ll a, ll b) {
	return b ? gcd(b, a % b) : a;
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("garbling.in", "r", stdin);
	//freopen("garbling.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int m, n, k, t;
	cin >> m >> n >> k >> t;
	vi a(m);
	forn(i, 0, m) cin >> a[i];
	a.push_back(2e9);
	sort(rall(a));
	vector<pair<pii, int>> kek(k);
	forn(i, 0, k) {
		int l, r, d;
		cin >> l >> r >> d;
		kek[i] = { {l, r}, d };
	}
	int l = 0, r = m;
	while (l < r) {
		int mid = (l + r + 1) >> 1;
		vector<vi> evl(200011);

		forn(i, 0, k) {
			if (kek[i].second > a[mid]) {
				evl[kek[i].first.first].push_back(i);
			}
		}
		set<int> used;
		int me = 0;
		int tt = 0;
		while (me != n + 1) {
			if (evl[me + 1].size() == 0) {
				me++;
				tt++;
				continue;
			}
			int mxr = -1;
			int cur = me + 1;
			while (1) {
				for (auto& b : evl[cur]) {
					mxr = max(mxr, kek[b].first.second);
				}
				if (mxr == cur) {
					tt += 3 * (cur - me);
					me = cur;
					break;
				}
				cur++;
			}
		}
		if (tt > t) {
			r = mid - 1;
		}
		else l = mid;
	}
	cout << l;
	return 0;
}