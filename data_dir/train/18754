#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
//#include <memory.h>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 1e18+7;
const long long mod = 1e9+7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
//const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (ll (i)=0;(i)<(ll)(n);(i)++)
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, m;
ll sz = 0;
ll L[200005], R[200005], E[200005];
ll size = 0;
ll a[200005];

int main(void) {
  #ifndef ONLINE_JUDGE
      freopen("input.txt", "rt", stdin);
      freopen("output.txt", "wt", stdout);
  #endif
  scanf("%d", &n);
  forn(i, n){
    int type; scanf("%d", &type);
    if(type == 1){
      ll x; scanf("%I64d", &x);
      L[i] = sz;
      R[i] = sz++;
      E[i] = -x;
      if(size < 100005){
        a[size++] = x;
      }
    } else {
      ll l, c; scanf("%I64d %I64d", &l, &c);
      L[i] = sz;
      R[i] = sz + l * c - 1;
      sz += l * c;
      E[i] = l;
      ll rep = c;
      while(size < 100005 && rep){
        forn(i, l){
          if(size < 100005){
            a[size++] = a[i];
          } else {
            break;
          }
        }
        --rep;
      }
    }
  }
  scanf("%d", &m);
  forn(i, m){
    ll num; scanf("%I64d", &num); --num;
    ll l = -1, r = n;
    while(r - l > 1){
      ll m = (l + r) / 2;
      if(L[m] <= num){
        l = m;
      } else {
        r = m;
      }
    }
    if(E[l] < 0){
      printf("%I64d ", -E[l]);
    } else {
      printf("%I64d ", a[(num - L[l]) % E[l]]);
    }
  }
  printf("\n");
  return 0;
}
