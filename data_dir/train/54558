#include <iostream>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;
using ll = long long;

#define WATCH(x) cout << #x" = " << x << endl
#define WATCHR(a, b) for (auto c=a; c!=b;) cout << *(c++) << " "; cout << endl
#define WATCHC(V) cout << #V" = "; WATCHR(V.begin(), V.end())

vector<int> a;
vector<vector<pair<int, int>>> adj;

int dfs(int cur, int prev, int have, ll dist) {
  int res = 0;
  if (dist > a[cur] || have) res = 1, have = 1;
  for(auto nxt : adj[cur]) if (nxt.first != prev) res += dfs(nxt.first, cur, have, nxt.second + max<ll>(0, dist));
  return res;
}

int main() {
  ios_base::sync_with_stdio(false);
  int n; cin >> n;
  a = vector<int>(n); for(int i = 0; i < n; i++) cin >> a[i];
  adj = vector<vector<pair<int, int>>>(n); 
  for(int i = 1; i < n; i++) {
    int b; cin >> b; b--;
    int dist; cin >> dist;
    adj[i].push_back(make_pair(b, dist));
    adj[b].push_back(make_pair(i, dist));
  }
  cout << dfs(0, -1, 0, 0) << endl;
}
