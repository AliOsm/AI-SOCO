#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>
#include <queue>

using namespace std;

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

typedef long double ld;

long long rdtsc() {
  long long tmp;
  asm("rdtsc" : "=A"(tmp));
  return tmp;
}

inline int myrand() {
  return abs((rand() << 15) ^ rand());
}

inline int rnd(int x) {
  return myrand() % x;
}

#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())
#define TASKNAME "text"

const long long INF = (long long) 1.01e18;
const ld EPS = 1e-9;

void precalc() {
}

int n;

long long S;

const int maxn = (int) 2e5 + 10;
pair<int, int> pairs[maxn];

bool read() {
  if (scanf("%d" LLD, &n, &S) < 2) {
    return 0;
  }
  for (int i = 0; i < n; ++i) {
    int v, c;
    scanf("%d%d", &v, &c);
    pairs[i] = mp(v, c);
  }
  return 1;
}

pair<int, long long> st[maxn];

void solve() {
  sort(pairs, pairs + n);
  {
    int cnt = n;
    n = 0;
    for (int i = 0; i < cnt;) {
      pairs[n++] = pairs[i];
      int i0 = i;
      while (i < cnt && pairs[i].first == pairs[i0].first) {
        ++i;
      }
    }
  }

  int cnt = 0;

  for (int i = 0; i < n; ++i) {
    int v = pairs[i].first, money = pairs[i].second;
    if (cnt == 0) {
      if (money) {
        continue;
      }
      st[cnt++] = mp(v, 0);
      continue;
    }
    int l = 0, r = cnt;
    while (l + 1 < r) {
      int mid = (l + r) / 2;
      long long dsh = (st[mid - 1].second - st[mid].second);
      int dv = (st[mid].first - st[mid - 1].first);
      long long t0 = (dsh + dv - 1) / dv;
      assert(dsh > 0 && dv > 0 && t0 > 0);
      assert(t0 < 1e9);
      if (st[mid - 1].first * (t0 - 1) + st[mid - 1].second >= money) {
        r = mid;
      } else {
        l = mid;
      }
    }
    long long t = (money - st[l].second + st[l].first - 1) / st[l].first;
    long long sh = -t * v + (t * st[l].first + st[l].second - money);
    while (cnt >= 1) {
      long long t0 = 0;
      if (cnt >= 2) {
        long long dsh = (st[cnt - 2].second - st[cnt - 1].second);
        int dv = (st[cnt - 1].first - st[cnt - 2].first);
        t0 = (dsh + dv - 1) / dv;
      }
      assert(t0 < 1e9);
      if (st[cnt - 1].first * t0 + st[cnt - 1].second <= v * t0 + sh) {
        --cnt;
        continue;
      }
      break;
    }
    st[cnt++] = mp(v, sh);
  }
  assert(cnt > 0);
  long long res = INF;
  for (int i = 0; i < cnt; ++i) {
    res = min(res, (S - st[i].second + st[i].first - 1) / st[i].first);
  }
  printf(LLD "\n", res);
}

int main() {
  srand(rdtsc());
#ifdef DEBUG
  freopen(TASKNAME".out", "w", stdout);
  assert(freopen(TASKNAME".in", "r", stdin));
#endif

  precalc();
  while (1) {
    if (!read()) {
      break;
    }
    solve();
#ifdef DEBUG
    eprintf("%.18lf\n", (double)clock() / CLOCKS_PER_SEC);
#endif
  }
  return 0;
}
