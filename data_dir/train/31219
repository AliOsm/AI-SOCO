/* 501D */
#include <iostream>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <deque>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>
#include <functional>
#include <iterator>
#include <iomanip>
using namespace std;
//#pragma comment(linker,"/STACK:102400000,1024000")

#define sti				set<int>
#define stpii			set<pair<int, int> >
#define mpii			map<int,int>
#define vi				vector<int>
#define pii				pair<int,int>
#define vpii			vector<pair<int,int> >
#define rep(i, a, n) 	for (int i=a;i<n;++i)
#define per(i, a, n) 	for (int i=n-1;i>=a;--i)
#define clr				clear
#define pb 				push_back
#define mp 				make_pair
#define fir				first
#define sec				second
#define all(x) 			(x).begin(),(x).end()
#define SZ(x) 			((int)(x).size())
#define lson			l, mid, rt<<1
#define rson			mid+1, r, rt<<1|1

const int maxn = 2e5+5;
int a[maxn];
int b[maxn];
int c[maxn];
int n;
int s[maxn<<2];

void build(int l, int r, int rt) {
	s[rt] = r-l+1;
	if (l == r)
		return ;
	int mid = (l+r)>>1;
	build(lson);
	build(rson);
}

int query(int kth, int l, int r, int rt) {
	--s[rt];
	if (l == r) {
		return l;
	}
	int mid = (l+r)>>1;
	if (s[rt<<1] >= kth) {
		return query(kth, lson);
	} else {
		return query(kth-s[rt<<1], rson);
	}
}

inline int lowest(int x) {
	return x & -x;
}

void update(int x, int delta) {
	if (x == 0)
		return ;
	while (x <= n+1) {
		c[x] += delta;
		x += lowest(x);
	}
}

int sum(int x) {
	int ret = 0;
	
	while (x) {
		ret += c[x];
		x -= lowest(x);
	}
	return ret;
}

void getId(int *a) {
	int x;
	
	memset(c, 0, sizeof(c));
	rep(i, 1, n+1) {
		++a[i];
		x = sum(a[i]);
		update(a[i]+1, 1);
		a[i] = a[i]-x-1;
	}
	
	#ifndef ONLINE_JUDGE
		rep(i, 1, n+1)
			printf("%d ", a[i]);
		putchar('\n');
	#endif
}

void add() {
	int i, j, k;
	
	for (i=n,j=1; i>0; --i,++j) {
		a[i] += b[i];
		k = a[i]/j;
		a[i] %= j;
		a[i-1] += k;
	}
}

void solve() {
	int k;
	
	build(1, n, 1);
	rep(i, 1, n+1) {
		k = query(a[i]+1, 1, n, 1);
		a[i] = k - 1;
	}
}

int main() {
	ios::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("data.in", "r", stdin);
		freopen("data.out", "w", stdout);
	#endif
	
	scanf("%d", &n);
	rep(i, 1, n+1)
		scanf("%d", &a[i]);
	rep(i, 1, n+1)
		scanf("%d", &b[i]);
		
	getId(a);
	getId(b);
	add();
	
	solve();
	rep(i, 1, n+1)
		printf("%d ", a[i]);
	putchar('\n');
	
	#ifndef ONLINE_JUDGE
		printf("time = %d.\n", (int)clock());
	#endif
	
	return 0;
}