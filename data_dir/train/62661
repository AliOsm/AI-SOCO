/*
doge
░░░▄░░░░░░░░░░░░░░▄
░░░░░░░░▌▒█░░░░░░░░░░░▄▀▒▌
░░░░░░░░▌▒▒█░░░░░░░░▄▀▒▒▒▐
░░░░░░░▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐
░░░░░▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐
░░░▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌
░░▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒▌
░░▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐
░▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄▌
░▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒▌
▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒
 
Mr Mr has arrived
 
*/
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>
 
using namespace std;
 
#define ll unsigned long long
#define ld long double
#define null NULL

const int N = 228228;


struct vertex {
	int num;
	int deg;
	vertex(int _num, int _deg) {
		num = _num;
		deg = _deg;
	}
};


bool operator<(vertex a, vertex b) {
	return a.deg < b.deg || (a.deg == b.deg && a.num > b.num);
}

vector<int> g[N], gr[N];

int label[N];


int degree[N];


signed main() {
	int n, m;
	scanf("%d %d", &n, &m);
	set<vertex> s;
	for (int i = 0; i < m; ++i) {
		int u, v;
		scanf("%d %d", &u, &v);
		g[u].push_back(v);
		gr[v].push_back(u);
		++degree[u];
	}
	for (int i = 1; i <= n; ++i) {
		s.insert(vertex(i, degree[i]));
	}
	int cur = n;
	for (int ev = 0; ev < n; ++ev) {
		vertex vert = *s.begin();
		s.erase(s.begin());
		int v = vert.num;
		label[v] = cur;
		--cur;
		for (int i = 0; i < (int)gr[v].size(); ++i) {
			int u = gr[v][i];
			s.erase(vertex(u, degree[u]));
			--degree[u];
			s.insert(vertex(u, degree[u]));
		}
	}
	for (int i = 1; i <= n; ++i) {
		printf("%d ", label[i]);
	}
	printf("\n");
    return 0;
}










