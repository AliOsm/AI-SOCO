
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j1234 = n; (i) < j1234; (i) ++)
#define rep1(i, n) for (int (i) = 1, j1234 = n; (i) <= j1234; (i) ++)
#define For(i, a, b) for (int (i) = (a), ub1234=b; (i) <= ub1234; (i) ++)
#define db(x) {if(debug){cout << #x << " = " << (x) << endl;}}
#define dba(a, x, y) {if(debug){cout << #a << " :";For(i, (x), (y))cout<<" "<<(a)[(i)];cout<<endl;}}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define endl '\n'
#define ll long long
#define ld long double
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const int output_precision = 15;
const ld pi = acos(-1);
const bool debug = true;
// const ll MOD = ;

string s;
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(output_precision); cout << fixed;
  cout.tie(0);
  cin >> s;
  int last = -1;
  int endopen = 0, endclose = 0;
  for (int i = s.size()-1; i >= 0; i--)
  {
    if (s[i] == '#')
    {
      last = i;
      break;
    }
    if (s[i] == ')')
      endclose ++;
    if (s[i] == '(')
      endopen ++;
    // since we cannot add closing parentheses
    // impossible
    if (endopen > endclose)
    {
      cout << -1 << endl;
      return 0;
    }
  }
  int open = 0, close = 0;
  vector<int> v;
  rep(i,s.size())
  {
    if (s[i] == '#')
    {
      if (i == last)
      {
        int x = open+endopen-close-endclose;
        if (x <= 0)
        {
          cout << -1 << endl;
          return 0;
        }
        v.pb(x);
        close += x;
      }
      else
      {
        v.pb(1);
        close++;
      }
    }
    else if (s[i]  == '(')
    {
      open++;
    }
    else 
    {
      close ++;
    }
    if (close > open)
    {
      cout << -1 << endl;
      return 0;
    }
  }
  rep(i,v.size())
  cout << v[i] << endl;

}
