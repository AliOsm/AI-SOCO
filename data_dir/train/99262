#include <bits/stdc++.h>

using namespace std;

#ifdef SWEDE
#define rep(i, a, b) for(int i = a; i < (b); ++i)
#define trav(a, x) for(auto& a : x)
#define sz(x) (int)(x).size()
#endif
#define all(x) begin(x), end(x)

using ll = int64_t;
using ld = long double;
using pii = pair<int32_t, int32_t>;
using vi = vector<int32_t>;

// 0 indexed template
struct BIT {
    using T = ll;
    T unit = 0;

    T f(const T& a, const T& b) const {
        return a + b;
    }

    int n;
    vector<T> f_tree;
    BIT(int n): n(n) {
        f_tree.assign(n + 1, unit);
    }

    void update(int x, T v) {
        for (++x; x <= n; x += (x & -x)) {
            f_tree[x] = f_tree[x] + v;
        }
    }

    T query(int x) const {
        T res = unit;
        for (++x; x; x -= (x & -x)) {
            res = res + f_tree[x];
        }

        return res;
    }

    inline T query(int l, int r) const {
        return query(r) - query(l - 1);
    }
};

constexpr int MAXN = 2e5 + 5;
int n;
int depth[MAXN];
int tin[MAXN], tout[MAXN];
int clocker = 0;
vi by_depth[MAXN];
vi tree[MAXN];
int deg[MAXN];

void dfs1(int u, int p = -1) {
    by_depth[depth[u]].push_back(u);
    tin[u] = clocker++;
    for (int v : tree[u]) {
        if (v == p) continue;
        depth[v] = depth[u] + 1;
        dfs1(v, u);
    }
    tout[u] = clocker;
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);

    int k;
    cin >> n >> k;
    for (int i = 1; i < n; ++i) {
        int u, v;
        cin >> u >> v;
        --u; --v;
        tree[u].push_back(v);
        tree[v].push_back(u);
    }

    for (int i = 0; i < n; ++i) {
        deg[i] = tree[i].size();
        --deg[i];
    }
    ++deg[0];

    dfs1(0, -1);

    BIT bit(n);
    ll ans = 0;
    priority_queue<pii> pq;
    for (int i = 1; i < n; ++i) {
        if (deg[i] == 0) {
            pq.emplace(depth[i], i);
        }
    }

    while (!pq.empty() and k > 0) {
        int s, u;
        tie(s, u) = pq.top();
        // cout << "taking " << u + 1 << " with score " << s << endl;
        pq.pop();
        ans += s;
        bit.update(tin[u], 1);

        for (int v : tree[u]) {
            if (--deg[v] == 0) {
                pq.emplace(depth[v] - bit.query(tin[v], tout[v] - 1), v);
            }
        }

        --k;
    }

    cout << ans << '\n';

    return 0;
}
