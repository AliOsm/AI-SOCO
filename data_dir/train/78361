
// In the name of God

#include<bits/stdc++.h>
using namespace std;
#define Size(x) ((int)(x).size())
#define pb push_back
typedef long long ll;
typedef pair<int ,int>pii;
typedef long double ld;
const int INF = 1e9 + 10 , MV = 20000 , MN = 1e6 + 10;

int n ,m,st;
ll P[MV] , ps[MV];
vector<pair<int , ll> >adj[MN];
vector<int>topol , rev[MN];
ll col[MN] , dp[MN] , val[MN];
bool mk[MN];

void dfs(int s){
	mk[s] = true;
	for(auto x:adj[s]) if(!mk[x.first]) dfs(x.first);
	topol.pb(s);
}

void sfd(int s,int c){
	col[s] = c , mk[s] = true;
	for(auto x:rev[s]) if(!mk[x]) sfd(x , c);
}

ll cal(ll c){
	int ind = upper_bound(P , P + MV , c) - P - 1;
	c = 1ll * c * (ind+1) - ps[ind];
	return c;
}

int main(){
	ios_base :: sync_with_stdio(false) , cout.tie(0) , cin.tie(0);
	cin >> n >> m;
	
	for(int i=1;i<MV;++i){
		P[i] = i + P[i-1];
		ps[i] = P[i] + 	ps[i-1];
	}

	for(int i=0;i<m;++i){
		int a,b,c;
		cin>>a>>b>>c;--a,--b;
		adj[a].pb({b , c});
		rev[b].pb(a);
	}
	
	cin >> st;
	--st;

	for(int i=0;i<n;++i) if(!mk[i])
		dfs(i);
	memset(mk , 0 , sizeof mk);
	reverse(topol.begin() , topol.end());
	int cmp = 0;
	for(auto v:topol) if(!mk[v]) sfd(v , cmp++);
	
	for(int i=0;i<n;++i){
		for(auto x:adj[i])
			if(col[i] == col[x.first])
				val[col[i]] += cal(x.second);
	}
	

	for(int i=0;i<n;++i) dp[col[i]] = val[col[i]];
	for(int i=Size(topol)-1;~i;--i){	
		int v = topol[i];
		for(auto x:adj[v])
			if(col[x.first] ^ col[v]){
				dp[col[v]] = max(dp[col[v]] , val[col[v]] + x.second + dp[col[x.first]]);
			}
	}

	cout << dp[col[st]] << '\n';
	return 0;
}

