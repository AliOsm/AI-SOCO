///****In the name of Allah, most Gracious, most Compassionate****//

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

#define NL cout<<"\n";
#define ALL(a) a.begin(), a.end()
#define DBG(a) cout<< #a <<" --> "<<(a)<<endl;
#define FastIO ios::sync_with_stdio(false); cin.tie(0);cout.tie(0)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}

const int N=2e6+5;
const int oo=1e9+7;

ll ans[2][100];
int a[N];
int b[N];


int merge(int  * arr, int n ,int h ,int id)
{
    ll inv=0;
    int mid= n/2;
    int  * temp = new int [ mid];
    memcpy(temp,arr, mid * sizeof( int) );

    int l= 0,r= mid;
    for(int i=0; i<n; i++)
    {
        if(r<n and l<mid and arr[r] >= temp[l]) {
            arr[i]= temp[l++];
            inv+=r-mid;
        }
        else if(r<n) {
            arr[i]=arr[r++];

        }
        else {
            arr[i]= temp[l++];
            inv+=r-mid;
        }
    }
    ans[id][h]+=inv;

    delete [] temp;
    return inv;
}
int inversion(int *arr,int n,int h ,int id)
{
    if(n>1){
        int inv=0;
        int mid=n/2;
        inv+=inversion(arr,mid , h-1,id);
        inv+=inversion(arr+mid,n-mid , h-1 ,id);
        inv+=merge(arr,n , h ,id);
        return inv;
    }
    else return 0;

}


int32_t main()
{
    FastIO;
    int n;
    cin>>n;
    for(int i=0;i < 1 <<n;i++) { cin>>a[i]; b[i]= a[i]; }
    reverse(b,b+(1<<n));

    inversion(a,1<<n , n , 1);
    inversion(b,1<<n , n , 0);
    ll in = 0 , no = 0 ;
    for(int i=n;i>=0;i--)
    {
        in+=ans[1][i];
        no+=ans[0][i];
    }
//    DBG(in);
//    DBG(no);

    int m;
    cin>>m;
    while(m--)
    {
        int x;
        cin>>x;
        for(int i=0;i<=x;i++)
        {
            in-=ans[1][i];
            swap(ans[0][i] , ans[1][i]);
            in+=ans[1][i];
        }
        cout<<in<<"\n";
    }
}
