/////////////////////////   _LeMur_
#include <iostream>
#include <algorithm>
#include <time.h>
#include <stack>
#include <string>
#include <cstring>
#include <cassert>
#include <cstdio>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <set>

using namespace std;

const int N = 100005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;

int n , k , parent[N];
vector <int> g[N] , vertex;
int answ[N];

void dfs(int v){
    answ[v] = answ[parent[v]];
    int l = max(v - k , 1);
    int r = min(v + k , n);
    if(parent[v]){
        int t = min(parent[v] + k , n);
        l = max(l , t + 1);
    }
    answ[v] += max(0 , r - l + 1);
    for(int i=0;i<(int)g[v].size();i++){
        int to = g[v][i];
        dfs(to);
    }
}

int main(){
    scanf("%d%d",&n,&k);
    for(int i=1;i<=n;i++){
        int p;
        scanf("%d",&p);
        parent[i] = p;
        if(p)
            g[p].push_back(i);
        else
            vertex.push_back(i);
    }
    for(int i=0;i<(int)vertex.size();i++){
        dfs(vertex[i]);
    }
    for(int i=1;i<=n;i++){
        printf("%d ",answ[i]);
    }
    cout<<endl;
    return 0;
}
