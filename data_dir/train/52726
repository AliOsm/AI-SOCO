// In the name of God

#include<bits/stdc++.h>

#define F first
#define S second
#define PB push_back
#define sz(s) int((s).size())
#define bit(n,k) (((n)>>(k))&1)

using namespace std;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;

const int maxn=3e5+10;
const ll inf=1e18;

vector<pii>v[maxn],g[maxn],in[maxn];
vector<int>ans;
bool mark[maxn];
ll ds[maxn];
int w[maxn];

priority_queue<pll,vector<pll>,greater<pll> >pq;

void dfs(int u){
    mark[u]=1;
    for(pii p:g[u]){
	if(mark[p.F]==0)
	    ans.PB(p.S),dfs(p.F);
    }
}

int main(){
    int n,m,k;scanf("%d%d%d",&n,&m,&k);
    for(int i=0;i<m;i++){
	int a,b;scanf("%d%d%d",&a,&b,&w[i]);
	v[a].PB({b,i});
	v[b].PB({a,i});
    }
    fill(ds,ds+maxn,inf);
    ds[1]=0;
    pq.push({0,1});
    while(!pq.empty()){
	int u=pq.top().S;
	pq.pop();
	if(mark[u]) continue;
	mark[u]=1;
	for(pii p:in[u])
	    g[p.F].PB({u,p.S});
	for(pii p:v[u]){
	    if(ds[p.F]>(ds[u]+w[p.S])){
		ds[p.F]=ds[u]+w[p.S];
		pq.push({ds[p.F],p.F});
		in[p.F].clear();
	    }
	    if(ds[p.F]==(ds[u]+w[p.S])){
		in[p.F].PB({u,p.S});
	    }
	}	
    }
    memset(mark,0,sizeof mark);
    dfs(1);
    printf("%d\n",min(sz(ans),k));
    for(int i=0;i<min(sz(ans),k);i++)
	printf("%d ",ans[i]+1);
    printf("\n");
    return 0;
}
