#include<iostream>
#include<vector>
#include<algorithm>
#include<string>
#include<map>
#include<iterator>
#include<stack>
#include<string>
#include<climits>
#include<bitset>
#include<queue>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<sstream>

#define MOD 1000000007
#define ll long long int
#define vi vector<int>
#define vl vector<long long int>
#define vvi vector<vector<int> >
#define vvl vector<vector<long long int> >
#define vp vector<pair<int, int> >
#define sc(n) scanf("%d", &n)

using namespace std;

string toBin(long long int a)
{
	return bitset<64>(a).to_string();
}

void printArr(int* a, int n)
{
	for(int i = 0; i < n; i++)
		printf("%d ", a[i]);
	printf("\n");
}

string intToString (ll a)
{
	ostringstream temp;
	temp<<a;
	return temp.str();
}

ll pow(ll base, ll exponent)
{
	ll result = 1;
	while(exponent > 0)
	{
		if (exponent % 2 == 1)
			result *= base;
		exponent = exponent >> 1;
		base *= base;
	}
	return result;
}

ll powerWithMod(ll base, ll exponent, ll modulus)
{
	ll result = 1;
	base %= modulus;
	while(exponent > 0)
	{
		if (exponent % 2 == 1)
			result = (result * base) % modulus;
		exponent = exponent >> 1;
		base = (base * base) % modulus;
	}
	return result;
}

bool isPrime(int n)
{
	if(n == 2)
		return true;
	if(n%2 == 0)
		return false;
	int limit = ceil(sqrt(n)) + 1;
	for(int d=3; d <= limit; d += 2)
	{
		if(n%d == 0)
			return false;
	}
	return true;
}

int main()
{
	vi ans;
	int n, temp;
	map<int, vi > a;
	cin >> n;
	for(int i = 1; i <= n; i++)
	{
		cin >> temp;
		a[temp].push_back(i);
	}
	int curr = 0;
	if(a[0].size() == 0)
	{
		cout << "Impossible\n";
		return 0;
	}
	while(1)
	{
		ans.push_back(a[curr].back());
		a[curr].pop_back();
		curr++;
		bool flag = false;
		while(curr >= 0)
		{
			if(a[curr].size() > 0)
			{
				flag = true;
				break;
			}
			curr -= 3;
		}
		if(!flag)
			break;
	}
	if(ans.size() == n)
	{
		cout << "Possible\n";
		for(int i=0; i<n; i++)
			cout << ans[i] << " ";
		cout << endl;
	}
	else
		cout << "Impossible\n";
	return 0;
}
