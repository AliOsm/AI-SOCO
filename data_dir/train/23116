#include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;

const double EPS=1E-3;

struct point
{
    double x, y;
};

double area(const point &A, const point &B, const point &C)
{
    return 0.5*abs((A.x-B.x)*(C.y-B.y)-(A.y-B.y)*(C.x-B.x));
}

double cross(const point &A, const point &B, const point &C)
{
    return (A.x-B.x)*(C.x-B.x)+(A.y-B.y)*(C.y-B.y);
}

double dist(const point &A, const point &B)
{
    return sqrt(pow(A.x-B.x, 2)+pow(A.y-B.y, 2));
}

struct line
{
    double A, B, C;
};

line from_points(const point &A, const point &B)
{
    line r;
    r.A=A.y-B.y;
    r.B=B.x-A.x;
    r.C=-(A.x*r.A+A.y*r.B);
    return r;
}

point from_lines(const line &L1, const line &L2)
{
    double det=L1.A*L2.B-L2.A*L1.B;
    double detX=-L1.C*L2.B+L2.C*L1.B;
    double detY=-L1.A*L2.C+L2.A*L1.C;
    point r;
    r.x=detX/det;
    r.y=detY/det;
    return r;
}

line mid_perp(const point &A, const point &B)
{
    double dx=B.x-A.x;
    double dy=B.y-A.y;

    point M;
    M.x=A.x+0.5*dx;
    M.y=A.y+0.5*dy;

    point M2;
    M2.x=M.x+dy;
    M2.y=M.y-dx;

    return from_points(M, M2);
}

point R_center(const point &A, const point &B, const point &C)
{
    line first=mid_perp(A, B);
    line second=mid_perp(B,C);
    return from_lines(first, second);
}

point A[3];

const double PI=2.0*acos(0.0);

double gcd(double a, double b)
{
    while(b>EPS)
    {
        while(a>=b) a-=b;
        swap(a, b);
    }
    return a;
}

double solve(void)
{
    point O=R_center(A[0], A[1], A[2]);
    double d=dist(O, A[0]);
    //cout << endl;

    double cos1=cross(A[0], O, A[1])/(d*d);
    double cos2=cross(A[1], O, A[2])/(d*d);
    double cos3=cross(A[2], O, A[0])/(d*d);

    double ang1=acos(cos1);
    double ang2=acos(cos2);
    double ang3=acos(cos3);
    double ang4=2*PI-ang1-ang2;

    //cout << ang1 << ' ' << ang2 << ' ' << ang3 << endl;

    double min_angle=ang1 > EPS ? ang1 : ang2;
    if(ang2>EPS) min_angle=gcd(min_angle, ang2);
    if(ang3>EPS) min_angle=gcd(min_angle, ang3);
    if(ang4>EPS) min_angle=gcd(min_angle, ang4);

    int n=(2.0*PI)/min_angle;
    //cout << n << endl;
    return n*(0.5*d*d*sin((2.0*PI)/n));
}

int main()
{
    for(int i=0; i<3; i++)
    {
        cin >> A[i].x >> A[i].y;
    }

    cout << setprecision(10) << solve();

    return 0;
}
