#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define f first
#define s second
#define bp push_back
#define mp make_pair
const int N=3e6+10;
const double eps=1e-9;
const int inf=1e9;
set<pair<int,int> >S;
int a[N],n,q;
ll seg[N<<2] , lazy[N<<2];
void build(int nd,int L,int R)
{
    if( L == R )
    {
        seg[nd]=a[L];
        return ;
    }
    int mid = (L+R) >>1;

    build(nd<<1  ,L , mid);
    build(nd<<1|1,mid+1,R);

    seg[nd] = seg[nd<<1] + seg[nd<<1|1];
}

void update(int nd,int L,int R,int idx,int val)
{
    if( L == R )
    {
        seg[nd]=val;
        return ;
    }
    int mid = (L+R) >>1;

    if( idx<=mid )
        update(nd<<1  ,  L  ,mid,idx,val);
    else
        update(nd<<1|1,mid+1, R,idx,val);

    seg[nd] = seg[nd<<1] + seg[nd<<1|1];
}

ll query(int nd,int L,int R,int from,int to){

    if( from<=L && R<=to )
        return seg[nd];
    if( from>R || to<L )
        return 0;

    int mid = (L+R) >>1;

    ll leftAns  = query(nd<<1  ,  L  ,mid,from,to);
    ll rightAns = query(nd<<1|1,mid+1, R ,from,to);
    return leftAns + rightAns;
}
int d[N];
main(){
    for(int i=2;i<=N;i++){
        for(int j=i;j<=N;j+=i)d[j]++;
    }
    for(int i=1;i<=N;i++)d[i]++;
    int n,q;
    scanf("%d%d",&n,&q);
    for(int i=1;i<=n;i++){
        scanf("%d",a+i);
        S.insert({i,a[i]});
    }
    build(1,1,n);
    while(q--){
        int t,l,r;
        scanf("%d%d%d",&t,&l,&r);
        if(t==1){
            vector<pair<int,int> >v;
            auto lo=S.lower_bound({l,-inf});
            if(lo==S.end() || (*lo).f>r)continue;
            for(lo ; (*lo).f<=r && lo !=S.end() ;lo++){
               // cout<<(*lo).f<<" "<<(*lo).s<<endl;
                v.bp(*lo);
                update(1,1,n,(*lo).f,d[(*lo).s]);
            }
            for(auto x:v){
                if(d[x.s]>2)S.insert({x.f,d[x.s]});
                S.erase(x);
            }
        }
        else{
            ll ans=query(1,1,n,l,r);
            printf("%lld\n",ans);
        }
    }



}
