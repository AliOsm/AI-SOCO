#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>
#include <complex>
#include <tuple>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
typedef pair<int, bool> pib;
const int INF = (int) (1e9 + 1e5);
const int64 LINF = (int64) (1e18);
const int64 BASE = 1003;
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL(what) {throw logic_error(string(what));}
#define ASSERT(exp) {if (!(exp)) {FAIL("");}}
#define ASSERTC(exp, what) {if (!(exp)) {FAIL(what);}}
#define y1 fjgjf
//typedef complex<double> comp;
const int MOD = 1000000007;

int tnum;

struct point {
	int64 x, y;

	void read() {
		cin >> x >> y;
	}

	point operator + (const point& oth) const {
		return point{x + oth.x, y + oth.y};
	}

	point operator * (const point& oth) const {
		return point{x * oth.x, y * oth.y};
	}

	int64 operator - (const point& oth) const {
		return abs(x - oth.x) + abs(y - oth.y);
	}
};

point in, mult, delta, st;
vector<point> dev;
int64 t;
int ans;

void init() {
	in.read();
	mult.read();
	delta.read();
	st.read();
	cin >> t;
}

int calc(int pos, bool dir) {
	int64 rem = t;
	point st = ::st;
	int ans = 0;
	for (int i = pos; 0 <= i && i < dev.size(); i += (dir ? 1 : -1)) {
		int64 cur = dev[i] - st;
		if (cur > rem) {
			break;
		}
		rem -= cur;
		st = dev[i];
		++ans;
	}
	return ans;
}

void solve() {
	dev.push_back(in);
	while (true) {
		if ((dev.back().x - st.x) > t || (dev.back().y - st.y) > t) {
			dev.pop_back();
			break;
		}
		dev.push_back(dev.back() * mult + delta);
	}
	for (int i = 0; i < dev.size(); ++i) {
		ans = max(ans, calc(i, false));
		ans = max(ans, calc(i, true));
	}
}

void print_answer() {
	cout << ans << endl;
}

void precalc() {
}

void run() {
#ifdef _MY_DEBUG
	freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
	//freopen(getenv("OUTPUT_PATH"), "wt", stdout);
#endif // _MY_DEBUG
	precalc();
	int t = 1; //cin >> t;
	for (tnum = 1; tnum <= t; ++tnum) {
		init();
		solve();
		print_answer();
	}
}

signed main() {
	srand(90);
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	run();
	return 0;
}