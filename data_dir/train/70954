//template by murugappan....Copied from chamow :p

#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define ld long double
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define priq(i,comp) priority_queue( i, vector< i >,comp)
template<class t>
t lcm(t a,t b)
{
    return ((a*b)/__gcd(a,b));
}
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);

//end of template

ll freq[2][2][4];
ll init[2][2][4];
ll ip[2][2];
const ll maxn=1e14;
void setval(int pos,int num)
{
    if(num==3)
    {
        for(int i=0;i<2;i++)
        {
            while(freq[pos][i][3]<init[pos][i][3])
            {
                freq[pos][i][3]++;
                ip[pos][i]/=3;
            }
        }
    }
    else
    {
        for(int i=0;i<2;i++)
        {
            while(freq[pos][i][2]<init[pos][i][2])
            {
                freq[pos][i][2]++;
                ip[pos][i]/=2;
            }
            while(freq[pos][i][2]>init[pos][i][2])
            {
                freq[pos][i][2]--;
                ip[pos][i]*=2;
            }
        }
    }
}
int main()
{
    /*
        assert(freopen("input.txt","r",stdin));
        assert(freopen("output.txt","w",stdout));
    */
    fastread;
    for(int i=0;i<2;i++)
    {
        for(int j=0;j<2;j++)
        {
            cin>>ip[i][j];
            ll temp=ip[i][j];
            while(temp%3==0)
            {
                freq[i][j][3]++;
                temp/=3;
            }
            while(temp%2==0)
            {
                freq[i][j][2]++;
                temp/=2;
            }
            init[i][j][3]=freq[i][j][3];
            init[i][j][2]=freq[i][j][2];
        }
    }
    ll t=0;
    ll big=0;
    if((freq[0][0][3]+freq[0][1][3])<(freq[1][0][3]+freq[1][1][3]))
        big=1;
    while((freq[big][0][3]+freq[big][1][3])>(freq[1-big][0][3]+freq[1-big][1][3]))
    {
        t++;
        if(freq[big][0][3]>0)
        {
            freq[big][0][3]--;
            freq[big][0][2]++;
        }
        else
        {
            freq[big][1][3]--;
            freq[big][1][2]++;
        }
    }
    big=0;
    if((freq[0][0][2]+freq[0][1][2])<(freq[1][0][2]+freq[1][1][2]))
        big=1;
    while((freq[big][0][2]+freq[big][1][2])>(freq[1-big][0][2]+freq[1-big][1][2]))
    {
        t++;
        if(freq[big][0][2]>0)
        {
            freq[big][0][2]--;
        }
        else
        {
            freq[big][1][2]--;
        }
    }
    for(int i=0;i<2;i++)
    {
        for(int j=2;j<=3;j++)
            setval(i,j);
    }
    ll area=ip[0][0]*ip[0][1]-ip[1][0]*ip[1][1];
    if(area!=0)
        cout<<-1;
    else
    {
        cout<<t<<'\n';
        for(int i=0;i<2;i++)
        {
            for(int j=0;j<2;j++)
                cout<<ip[i][j]<<' ';
            cout<<'\n';
        }
    }
    return 0;
}


