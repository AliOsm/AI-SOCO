#include <bits/stdc++.h>
using namespace std;
#define FOR(i, a, b) for (int (i) = (a); (i) < (b); ++(i))
#define REP(i, n) FOR(i, 0, n)
#define pb push_back
#define mp make_pair
#define x first
#define y second
#define sz(A) (int)A.size()
#define RFOR(i,a,b) for (int (i) = (a); (i) >= (b); --(i))
#define ll long long
#define ld long double
#define FI(n) REP(i, n)
#define FJ(n) REP(j, n)
#define FK(n) REP(k, n)
#define sz(A) (int)A.size()

#define FREIN(FILE) freopen(FILE,"rt",stdin)
#define FREOUT(FILE) freopen(FILE,"wt",stdout)

#define VA_NUM_ARGS(...) VA_NUM_ARGS_IMPL_((0,__VA_ARGS__, 5,4,3,2,1))
#define VA_NUM_ARGS_IMPL_(tuple) VA_NUM_ARGS_IMPL tuple
#define VA_NUM_ARGS_IMPL(_0,_1,_2,_3,_4,_5,N,...) N
#define macro_dispatcher(macro, ...) macro_dispatcher_(macro, VA_NUM_ARGS(__VA_ARGS__))
#define macro_dispatcher_(macro, nargs) macro_dispatcher__(macro, nargs)
#define macro_dispatcher__(macro, nargs) macro_dispatcher___(macro, nargs)
#define macro_dispatcher___(macro, nargs) macro ## nargs
#define DBN1(a)         std::cerr<<#a<<"="<<(a)<<"\n"
#define DBN2(a,b)       std::cerr<<#a<<"="<<(a)<<", "<<#b<<"="<<(b)<<"\n"
#define DBN3(a,b,c)     std::cerr<<#a<<"="<<(a)<<", "<<#b<<"="<<(b)<<", "<<#c<<"="<<(c)<<"\n"
#define DBN4(a,b,c,d)   std::cerr<<#a<<"="<<(a)<<", "<<#b<<"="<<(b)<<", "<<#c<<"="<<(c)<<", "<<#d<<"="<<(d)<<"\n"
#define DBN5(a,b,c,d,e) std::cerr<<#a<<"="<<(a)<<", "<<#b<<"="<<(b)<<", "<<#c<<"="<<(c)<<", "<<#d<<"="<<(d)<<", "<<#e<<"="<<(e)<<"\n"
#define DBN(...) macro_dispatcher(DBN, __VA_ARGS__)(__VA_ARGS__)
#define DA(a,n) cout<<#a<<"=["; printarray(a,n); cout<<"]\n"
#define DAR(a,n,s) cout<<#a<<"["<<s<<"-"<<n-1<<"]=["; printarray(a,n,s); cout<<"]\n"

typedef  vector < int > vi;
typedef pair <int, int> pii;

template<typename T1, typename T2>inline std::ostream& operator << (std::ostream& os, const std::pair<T1, T2>& p){ return os << "(" << p.first << ", " << p.second << ")"; }
template<typename T>inline std::ostream &operator<<(std::ostream &os, const std::vector<T>& v){ bool first = true; os << "["; for (unsigned int i = 0; i<v.size(); i++){ if (!first)os << ", "; os << v[i]; first = false; }return os << "]"; }
template<typename T>inline std::ostream &operator<<(std::ostream &os, const std::set<T>&v){ bool first = true; os << "["; for (typename std::set<T>::const_iterator ii = v.begin(); ii != v.end(); ++ii){ if (!first)os << ", "; os << *ii; first = false; }return os << "]"; }
template<typename T1, typename T2>inline std::ostream &operator << (std::ostream & os, const std::map<T1, T2>& v){ bool first = true; os << "["; for (typename std::map<T1, T2>::const_iterator ii = v.begin(); ii != v.end(); ++ii){ if (!first)os << ", "; os << *ii; first = false; }return os << "]"; }
template<typename T, typename T2>void printarray(T  a[], T2 sz, T2 beg = 0){ for (T2 i = beg; i<sz; i++) cout << a[i] << " "; cout << endl; }

template<typename T1, typename T2, typename T3>
struct triple{ T1 a; T2 b; T3 c; triple(){}; triple(T1 _a, T2 _b, T3 _c) :a(_a), b(_b), c(_c){} };
#define tri triple<int,int,int>
#define trll triple<ll,ll,ll>
template<typename T1, typename T2, typename T3>
bool operator<(const triple<T1, T2, T3> &t1, const triple<T1, T2, T3> &t2){ if (t1.a != t2.a) return t1.a<t2.a; else if (t1.b != t2.b) return t1.b<t2.b; else return t1.c < t2.c; }
template<typename T1, typename T2, typename T3>
inline std::ostream& operator << (std::ostream& os, const triple<T1, T2, T3>& t){ return os << "(" << t.a << ", " << t.b << ", " << t.c << ")"; }
const int inf = 1e9;
const int MOD = 1e9 + 7;
const int N = 4e6 + 10;
const int INF = 1000111000;
ll a[N];
ll S[N], F[N];
vector < pair < int, long long > > line2;
vector < pair < int, long long > > line;
ll s = 0, full = 0, ans = 0;
void add2(int x, long long y) {
	line2.pb(mp(x, y));
}


#define pll pair<ll, ll>
bool cw (pll a, pll b, pll c) {
	return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y) >= 0;
}

void add(int x, long long y) {
	while (sz(line) > 1 && cw(line.back(), line[sz(line) - 2], mp(x, y))) line.pop_back();
	line.pb(mp(x, y));
}
long long calc(int id, long long x) {
	return 1LL * line[id].first * x + line[id].second;
}
long long get(long long x) {
	int left = 0, right = sz(line) - 1;
	while (left + 2 < right) {
		int cl = left + (right - left) / 3;
		int cr = right - (right - left) / 3;
		if (calc(cl, x) < calc(cr, x)) 
			left = cl;
		else
			right = cr;
	}
	long long ans = 0;
	FOR(i, left, right+1) {
		ans = max(ans, calc(i, x));
	}
	return ans;
}
long long get2(long long x) {
	long long res = -inf * 1LL * inf;
	REP(i, sz(line2)) {
		pair < ll, ll > t = line2[i];
		if (t.first * x + t.second > res) {
			res = t.first * x + t.second;
		}
	}
	return res;
}
int main() {
	//FREIN("input.txt");
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	FOR(i, 1, n + 1) {
		cin >> a[i];
	}
	FOR(i, 1, n + 1) {
		S[i] = S[i - 1] + a[i] * i;
		F[i] = F[i - 1] + a[i];
	}
	
	add(0, 0);
	//add2(0, 0);
	long long ans = 0;
	FOR(i, 1, n + 1) {
		long long cur = S[i] + get(F[i]);
		ans = max(ans, cur);
		add(-i, F[i] * i - S[i]);
		//cout << cur << " " << S[i] + get2(F[i]) << endl;
		//add2(-i, F[i] * i - S[i]);
	}
	cout << ans << endl;
	return 0;
}

