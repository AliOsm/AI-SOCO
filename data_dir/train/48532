/*
    STARK_BOY
*/
#include <bits/stdc++.h>
using namespace std;
#define rep(i,a,b) for(ll i=a;i<b;i++)
#define repe(i,a,b) for(ll i=a;i<=b;i++)
#define bac(i,a,b) for(ll i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define F first
#define S second
typedef long long ll;
typedef vector< ll > vi;
typedef vector<pair<ll,ll> > vpii;
typedef pair<ll,ll> pii;
#define all(c) c.begin(),c.end()
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define setbitc(x) __builtin_popcount(x)
#define init(x,a) memset(x,a,sizeof(x))
#define INF 10000000000000
#define MOD 1000000007
#define M 998244353
#define N 300010

ll i,j,k,l,n,m,p,q,r,d,su,sx,sy,prod=1,maxi,a,b,w,x,y,o,e,f,mini=INF,t,cnt,val;
string s,s1,s2;
ll ar[N],vis[N];
vi ans;
vector<pair<pii,ll> > adj[N];
//vi v1,v2;
map<ll,ll> ma;
set<ll> se;

ll modularExponentiation(ll x,ll n)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return modularExponentiation((x*x)%M,n/2);
    else                             //n is odd
        
        return (x*modularExponentiation((x*x)%M,(n-1)/2))%M;

}
bool sortbysec(const pair<ll,ll> &a, 
              const pair<ll,ll> &b) 
{ 
    return (a.second < b.second); 
} 
void prim(ll x)
{
    priority_queue< pair<pii,ll>, vector< pair<pii,ll> >, greater< pair<pii,ll> > > Q;
    ll y;
    pair<pii,ll> p;
    Q.push(mp(mp(0, x),0));
    while(!Q.empty())
    {
        int flag=0;
        p = Q.top();
        Q.pop();
        x = p.F.S;
        if(vis[x])
            continue;
        vis[x] = 1;
        if(ans.size()==k+1)break;
        //cout<<p.F.S<<" ";
        ans.pb(p.S);
        for(auto i:adj[p.F.S])
        {
            y = i.F.S;
            //cout<<y<<" ";
            if(!vis[y])
            {
                    Q.push(mp(mp(i.F.F+p.F.F,i.F.S),i.S));
            }
        }
        
    }
    
}
int main()
{
    
    ios
    int ti=1;
    //cin>>ti;

    while(ti--)
    {
        ll cost;
        cin>>n>>m>>k;
        rep(i,0,m)
        {
            cin>>x>>y>>cost;
            adj[x].pb(mp(mp(cost,y),i+1));
            adj[y].pb(mp(mp(cost,x),i+1));
        }
    // Sort the edges in the ascending order
        prim(1);
        cout<<ans.size()-1<<endl;

        sort(all(ans));
        rep(i,1,ans.size())
        cout<<ans[i]<<" ";
    
    }
    
    return 0;
        
}