#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define x first
#define y second
#define endl '\n'
#define mp make_pair
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define bit __builtin_popcount
#define all(x) x.begin(),x.end()
#define show(x) cout<<(#x)<<" is "<<(x)<<endl

using namespace std;
using namespace __gnu_pbds;

template<typename T> using indexed_set=tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll,ll> pll;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef vector<vector<int>> matrix;

const ll INF=1e18+123;
const ld EPS=1e-9;
const int inf=1e9+123;
const int MOD=1e9+7;
const int N=1e5+123;
const int M=1e6+123;
const int K=400;
const int dx[]={0,0,1,-1};
const int dy[]={1,-1,0,0};

pii bl[K];

int go[N],cnt[N],id[N],a[N];

int main(){
    int n,q;
    scanf("%d%d",&n,&q);
    for(int i=1;i<=n;i++){
        scanf("%d",&a[i]);
    }
    int m=sqrt(n);

    for(int l=1,k=1;l<=n;l+=m+1,k++){
        int r=min(n,l+m);
        bl[k]={l,r};
        for(int i=l;i<=r;i++){
            id[i]=k;
        }
    }
    for(int i=n;i;i--){
        if(i+a[i]>bl[id[i]].y){
            go[i]=i;
        }
        else{
            cnt[i]=cnt[i+a[i]]+1;
            go[i]=go[i+a[i]];
        }
    }
    int t,x,y;
    while(q--){
        scanf("%d%d",&t,&x);
        if(t){
            int ans=0,l;
            while(x<=n){
                ans+=cnt[x]+1;
                x=go[x];
                l=x;
                x+=a[x];
            }
            printf("%d %d\n",l,ans);
        }
        else{
            scanf("%d",&y);
            a[x]=y;
            for(int i=x;i>=bl[id[x]].x;i--){
                cnt[i]=0;
                if(i+a[i]>bl[id[i]].y){
                    go[i]=i;
                }
                else{
                    cnt[i]=cnt[i+a[i]]+1;
                    go[i]=go[i+a[i]];
                }
            }
        }
    }
    return 0;
}
