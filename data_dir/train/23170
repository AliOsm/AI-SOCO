#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int dp[512][512];

int main() {
  cin.tie(0);
  cin.sync_with_stdio(0);

  int n;
  cin >> n;
  vector<int> a(n);
  vector<int> b(n);
  vector<int> c(n);
  map<string, int> id;
  int edx = 0;
  int len = n - 1;
  for (int i = 0; i < n; ++i) {
    string s;
    cin >> s;
    len += s.size();
    auto f = id.find(s);
    if (f == id.end()) {
      c[edx] = s.size();
      b[i] = c[edx];
      a[i] = edx++;
      id[s] = a[i];
    } else {
      a[i] = f->second;
      b[i] = c[f->second];
    }
  }

  auto comp = [&](int l, int r, int k) {
    for (int i = 0; i < k; ++i)
      if (a[l + i] != a[r + i]) return false;
    return true;
  };

  for (int i = 0; i < n; ++i)
    for (int j = i; j < n; ++j) dp[i][j] = 1;

  for (int i = 0; i < n; ++i)
    for (int j = i + 1; j < n; ++j)
      for (int k = 0; i + k < j && j + k < n && a[i + k] == a[j + k]; ++k)
        dp[j][j + k] = max(dp[j][j + k], dp[i][i + k] + 1);

  partial_sum(b.begin(), b.end(), b.begin());

  auto q = [&](int l, int r) { return b[r] - (l ? b[l - 1] : 0); };

  int ans = 0;
  for (int i = 0; i < n; ++i)
    for (int j = i; j < n; ++j) {
      if (dp[i][j] > 1) {
        int sum = q(i, j) - (j - i + 1) + (j - i);
        ans = max(ans, sum * dp[i][j]);
      }
    }

  cout << len - ans;
}