#include <bits/stdc++.h>

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//#pragma GCC optimize("Ofast")
//1.0 * clock() / CLOCKS_PER_SEC

#define fi first
#define se second
#define ll long long
#define dl double long

using namespace std;

const ll NN = 3e3 + 7;
const int N = 1e3 + 7;
const int M = 6;
const int mod = 1e9 + 7;
const ll inf = 1e18 + 7;
const dl rf = 1e-14;
const int B = sqrt(N);

int n,m;
int d[N][N];
bool used[N][N];
vector < int > v[N];
pair < int , int > p[N][N];

void solve1()
{
    cin >> n >> m;
    for( int i = 1; i <= m; i++ ){
        int x,y;
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    for( int i = 1; i <= n; i++ ){
        for( int j = 1; j <= n; j++ ){
            d[i][j] = 1e9;
        }
    }
    d[1][n] = 0;
    queue < pair < int , int > > q;
    q.push({ 1 , n });
    while( !q.empty() ){
        auto x = q.front();
        q.pop();
        if( d[n][1] != 1e9 )break;
        for( auto y : v[x.fi] ){
            if( used[y][x.se] )continue;
            used[y][x.se] = true;
            for( auto h : v[x.se] ){
                int nx = y;
                int ny = h;
                if( nx == ny || d[nx][ny] != 1e9 )continue;
                d[nx][ny] = d[x.fi][x.se] + 1;
                p[nx][ny] = x;
                q.push({ nx , ny });
            }
        }
    }
    if( d[n][1] == 1e9 ){
        cout << -1;
        return;
    }
    vector < pair < int , int > > v;
    cout << d[n][1] << "\n";
    pair < int , int > x = {n , 1};
    while( x.fi != 0 ){
        v.push_back(x);
        x = p[x.fi][x.se];
    }
    reverse( v.begin() , v.end() );
    for( auto x : v ){
        cout << x.fi << " ";
    }
    cout << "\n";
    for( auto x : v ){
        cout << x.se << " ";
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    //freopen( "input.txt" , "r" , stdin );
    //freopen( "output.txt" , "w" , stdout );

    int cghf = 1;//cin >> cghf;
    while( cghf-- ){
        solve1();
    }
}
