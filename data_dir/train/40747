#include<bits/stdc++.h>
using namespace std;
const int MX=(1<<18);
pair < int , int > tree[4*MX];
int idx[MX];
void build(int x , int a , int b){
    if(a==b){
        tree[x] = {-1 , a};
        idx[a] = x;
        return;
    }
    build(x*2 , a , (a+b)/2);
    build(x*2+1 , (a+b)/2+1 , b);
    tree[x] = max(tree[x*2] , tree[x*2+1]);


}
void upd(int pos , int V){
    tree[idx[pos]] = {V , pos};
    int x = idx[pos]/2;
    while(x >0){
        tree[x] = max(tree[x*2] , tree[x*2+1]);
        x/=2;
    }
}
int n , who[MX] , amount[MX];
set < int > S[MX];
int main(){
    scanf("%d",&n);
    for(int j=1;j<=n;j++){
        scanf("%d %d",&who[j],&amount[j]);
        S[who[j]].insert(j);
    }
    build(1,1,n);
    for(int j=1;j<=n;j++){
        if(!S[j].empty())
            upd(j , *S[j].rbegin());
    }
    int QN;
    scanf("%d",&QN);
    while(QN--){
        int kk;
        scanf("%d",&kk);
        vector < int > v;
        while(kk--){
            int x;
            scanf("%d",&x);
            v.push_back(x);
            upd(x , -1);
        }
        auto pp = tree[1];
        int winner = pp.second;
        int place = pp.first;
        if(place == -1){
            puts("0 0");
        }
        else{
            upd(winner , -1);
            int ll = tree[1].first;
           auto it = S[winner].lower_bound(ll);
            printf("%d %d\n",winner,amount[*it]);
            upd(winner , *S[winner].rbegin());
        }
        for(auto pp : v){
            if(!S[pp].empty())
                upd(pp , *S[pp].rbegin());
        }
    }
}
