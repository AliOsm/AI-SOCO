#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds ;
#define ll long long
#define ld long double
#define rep(i,a,b) for(ll i=a;i<b;i+=1)
#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(a) int((a).size())
#define hell (ll)998244353
#define f first
#define s second
#define sll(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
typedef tree< ll , null_type , less<ll> , rb_tree_tag , tree_order_statistics_node_update > ordered_set ;
ll t = 1 ;/*
const ll N = 1e5 + 5 ;
vector<ll> adj[N] , mark(N,0) , in(N,-N*5) , out(N,-N*5) ;
void dfs( ll node , ll par )
{
    if( mark[node] == 1 ){
        in[node] = 0 ;
    }
    for( auto u : adj[node] )
    {
        if( u != par ){
            dfs( u , node ) ;
            in[node] = max( in[u] + 1 , in[node] ) ;
        }
    }
}
void DFS( ll node , ll par )
{
    ll max1 = -N*5 , max2 = N*5 , max1idx = -1 , max2idx = -1 ;
    rep( i , 0 , sz(adj[node]) )
    {
        ll u = adj[node][i] ;
        if( u != par )
        {
            if( max1 < in[u] ){
                swap(max1,max2);
                swap(max1idx,max2idx);
                max1 = in[u] ;
                max1idx = i ;
            }
            else if( max2 < in[u] )
            {
                max2 = in[u] ;
                max2idx = i ;
            }
        }
    }
}*/
void solve()
{
	string s ;
	cin >> s ;
	ll n = sz(s) , cur = 0 , ans = 0  ;
	vector<ll> bef(n,0) , af(n,0) ;
	rep( i , 0 , n - 1 )
	{
		bef[i] = cur ;
		if(s[i]=='v' and s[i+1] == 'v')cur++;
	}
	cur = 0 ;
	for( ll i = n - 2 ; i >= 0 ; i-- )
	{
		af[i] = cur ;
		if( s[i] == 'v' and s[i+1] == 'v' )
		cur++;
	}
	rep( i , 0 , n )
	{
		if( s[i] == 'o' )
			ans += bef[i] * af[i] ;
	}
	cout << ans ;
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //cin>>t;
    while(t--)
        solve() ;
    return 0 ;
}

