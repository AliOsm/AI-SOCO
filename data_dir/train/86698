// start of CP 3.0
#include <bits/stdc++.h>

//____By:sirjan13____

#define int long long
#define ld long double
#define mod 1000000007
#define mod1 mod
#define mod2 100000009
#define show(a) for(int i=0;i<a.size();i++) cout<<a[i]<<" ";
#define fi first
#define se second
#define vi vector<int>
#define vs vector<string>
#define vll vector<ll>
#define pb push_back
#define pi pair<int,int>
#define si set<int>
#define sll set<ll>
#define pll pair<ll, ll>
#define sci(x) scanf("%d",&x)
#define scs(x)  scanf("%s", x)
#define scll(x) scanf("%I64d",&x)
#define all(v) v.begin(),v.end()
#define sot(v) sort(v.begin(), v.end())
#define maxheap priority_queue<int>
#define minheap priority_queue<int,vector<int>,greater<int>>
#define mp make_pair
#define fast_io() cin.sync_with_stdio(false);cout.sync_with_stdio(false);
#define PI 3.1415926535
#define long_zero 0ll
#define long_one 1ll

inline int sbt(int x){return __builtin_popcountll(x);}

using namespace std;

#define TRACE
#ifdef TRACE
#define deb(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << std::endl;
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define deb(...)
#endif
#define N 400013


int n, q, a[N], timer = 0, in[N], out[N];
vi tour, adj[N];

// Segment Tree Template Â© :P

#define MAXN N

int tree[MAXN << 2];
int lazy[MAXN << 2]; 

// Problem Specific
inline int merge(int lval, int rval) {
    return (lval + rval); 
}

// Problem Specific
inline int get_val(int i) {
    return a[tour[i - 1]]   ;
}

inline void build(int l, int r, int node = 1){
    if(l == r){
        // Problem Specific Node INIT
        tree[node] = get_val(l);
        return;
    }
    int mid = (l + r) >> 1, lc = 2 * node, rc = lc + 1;
    build(l , mid, lc);
    build(mid + 1, r, rc);
    tree[node] = merge(tree[lc], tree[rc]);
}
 
inline void push_down(int l, int r, int node){
    if(lazy[node] == 0) return;
    tree[node] = (r - l + 1) - tree[node];
    if(l != r) {
        lazy[2 * node] ^= 1;
        lazy[(2 * node) + 1] ^= 1;
    }
    lazy[node] = 0;
}

inline void update(int l, int r, int qs, int qe, int val, int node = 1){
    push_down(l, r, node);
    if(l > qe or r < qs) return;
    if(l >= qs and r <= qe){
        lazy[node] = val;
        push_down(l, r, node);
        return;
    }
    int mid = (l + r) >> 1, lc = 2 * node, rc = lc + 1;
    update(l , mid , qs , qe , val, lc);
    update(mid + 1 , r , qs , qe, val, rc);
    tree[node] = merge(tree[lc], tree[rc]);
}
 
inline int query(int l, int r, int qs, int qe, int node = 1){
    push_down(l, r, node);
    if(l > qe or r < qs) return 0;
    if(l >= qs and r <= qe) return tree[node];
    int mid = l + r >> 1, lc = 2 * node , rc = lc + 1;
    return merge(query(l, mid, qs, qe, lc), query(mid + 1, r, qs, qe, rc));
}

// Problem 

void f(int node, int par) {
    in[node] = ++timer;
    tour.pb(node);
    for(auto nei: adj[node]) {
        if(nei == par) continue;
        f(nei, node);
    }
    out[node] = timer;
}

int32_t main() {
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
    fast_io()

    cin >> n;
    for(int i = 2; i <= n; i++) {
        int u, v = i;
        cin >> u;
        adj[u].pb(v);
        adj[v].pb(u);
    }
    for(int i = 1; i <= n; i++) {
        cin >> a[i];
    }
    f(1, -1);
    build(1, n);
    cin >> q;
    while(q--) {
        string ty;
        int u;
        cin >> ty >> u;
        if(ty == "pow") {
            update(1, n, in[u], out[u], 1);
        }
        else {
            cout << query(1, n, in[u], out[u]) << endl;
        }
    }
    return 0;
}
 
