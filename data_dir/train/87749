/*input
6
0 0 2
1 0 -5
1 1 3
2 3 4
1 4 -4
3 1 -1
*/
#include "bits/stdc++.h"
using namespace std;

class SegmentTree{
	vector<long long> segtree, lazy;
	public:
	SegmentTree(int size){
		segtree.resize(4*size);
		lazy.resize(4*size);
	}
	void propagate(int u, int a, int b){
		if(!lazy[u]) return;
		segtree[u] += lazy[u];
		if(a!=b)
			lazy[u*2] += lazy[u], lazy[u*2+1] += lazy[u];
		lazy[u] = 0;
	}
	void update(int u, int a, int b, int i, int j, long long x){
		propagate(u,a,b);
		if(j<a || i>b) return;
		if(j>=b && i<=a){
			lazy[u] += x;
			propagate(u,a,b);
			return;
		}
		update(u*2,a,(a+b)/2,i,j,x); update(u*2+1,(a+b)/2+1,b,i,j,x);
		segtree[u] = max(segtree[u*2], segtree[u*2+1]);
	}
	void update(int i, int j, long long x){
		update(1, 0, segtree.size()/4-1, i, j, x);
	}
	long long query(int u, int a, int b, int i, int j){
		if(j<a || i>b || a>b) return 0;
		propagate(u,a,b);
		if(j>=b && i<=a) return segtree[u];
		return max(query(u*2,a,(a+b)/2,i,j), query(u*2+1,1+(a+b)/2,b,i,j));
	}
	long long query(int i, int j){
		return query(1,0,segtree.size()/4-1,i,j);
	}
};

pair<pair<int,int>,int> a[500005];
map<int,int> compress, rev; int CLK = 1;
vector<pair<int,int>> end_pt[1000005];

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	int n; cin >> n;
	for(int i=0,x,y;i<n;++i){
		cin >> x >> y >> a[i].second;
		if(x>y) swap(x,y);
		a[i].first = {x,y};
		compress[x]; compress[y];
	}
	for(auto &p:compress) p.second = CLK++;
	for(auto &p:compress) rev[p.second] = p.first;

	sort(a,a+n);
	for(int i=0;i<n;++i){
		a[i].first = {compress[a[i].first.first], compress[a[i].first.second]};
		// cout << a[i].first.first << ' ' << a[i].first.second << "   " << a[i].second << endl;
		end_pt[a[i].first.second].push_back({a[i].first.first, a[i].second});
	}

	SegmentTree ST(CLK+2);

	long long ans = 0;
	int RES_X = 1e9+42, RES_Y = 1e9+42;
	for(int r=1;r<CLK;++r){
		ST.update(r,r,rev[r]);
		for(auto i: end_pt[r]){
			int l, c; tie(l,c) = i;
			ST.update(1,l,c);
		}
		long long now = ST.query(1,r) - rev[r];
		if(now > ans)
			ans = now, RES_Y = rev[r];
	}
	ST = SegmentTree(CLK + 2);
	for(int r=1;r<=compress[RES_Y];++r){
		ST.update(r,r,rev[r]);
		for(auto i: end_pt[r]){
			int l, c; tie(l,c) = i;
			ST.update(1,l,c);
		}
	}
	for(int l=1;l<=compress[RES_Y];++l){
		long long now = ST.query(l,l) - RES_Y;
		if(now == ans)
			ans = now, RES_X = rev[l];
	}
	cout << ans << endl;
	cout << RES_X << ' ' << RES_X << ' ' << RES_Y << ' ' << RES_Y << endl;
}