#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define MAX 100005
ll n, k;
ll arr[MAX];
bool prime[MAX];
int wh[MAX];
int cnt = 0;
vector<ll> factor[MAX];
ll po1[MAX], po2[MAX];

ll base1 = 389, mod1 = 1000000103;
ll base2 = 353, mod2 = 1000000021;

void sieve()
{
    memset(prime, true, sizeof prime);
    memset(wh, -1, sizeof prime);
    prime[0] = prime[1] = false;
    for(int i=2; i<MAX; i++){
        if(prime[i]){
            wh[i] = cnt;
            factor[i].push_back(i);
            for(int j=2*i; j<MAX; j+=i){
                prime[j] = false;
                factor[j].push_back(i);
            }
            cnt++;
        }
    }
}

pair<ll, ll> calcHash(int x, int type)
{
    ll t = x;
    ll h1 = 0, h2 = 0;
    for(int i=0; i<factor[t].size(); i++){
        int p = factor[t][i];
        int nows = 0;
        while(x%p == 0){
            x = x/p;
            nows++;
        }
        int p1 = nows%k;
        int p2 = (k-p1)%k;
        if(p2 < 0) p2 += k;
        int id = wh[p];
        if(type == 1){
            h1 += (p1*po1[id])%mod1;
            h2 += (p2*po1[id])%mod1;
            h1 = h1%mod1;
            h2 = h2%mod1;
        }
        else {
            h1 += (p1*po2[id])%mod2;
            h2 += (p2*po2[id])%mod2;
            h1 = h1%mod2;
            h2 = h2%mod2;        }
    }
    //cout << h1 << " " << h2 << endl;
    return make_pair(h1, h2);
}

int main()
{
    //freopen("in.txt", "r", stdin);
    sieve();
    po1[0] = 1;
    for(int i=1; i<MAX; i++) po1[i] = (po1[i-1]*base1)%mod1;
    po2[0] = 1;
    for(int i=1; i<MAX; i++) po2[i] = (po2[i-1]*base2)%mod2;
    scanf("%lld %lld", &n, &k);
    for(int i=0; i<n; i++) scanf("%lld", &arr[i]);
    map<pair<ll, ll> , ll> mp;
    ll ans = 0;
    for(int i=0; i<n; i++){
        pair<ll, ll> p1 = calcHash(arr[i], 1);
        pair<ll, ll> p2 = calcHash(arr[i], 2);
        //cout << arr[i] << " " << p.first << " " << p.second << endl;
        ll curValue1 = p1.first, curValue2 = p2.first;
        ll toFind1 = p1.second, toFind2 = p2.second;
        pair<ll, ll> cur = make_pair(curValue1, curValue2);
        pair<ll, ll> fnd = make_pair(toFind1, toFind2);
        ans += mp[fnd];
        mp[cur]++;
    }
    cout << ans;
}