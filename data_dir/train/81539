#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define fr(i,j,k) for(int i=j;i<k;i++)
#define f(n) fr(i,0,n)
#define f1(n) fr(i,1,n+1)
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
using namespace std;
const int maxn = 1000005;
const int mod = 998244353;

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, m, k;
    cin >> n >> m >> k;
    queue<pair<int,int>>q;
    vector<string>v;
    ll d[n][m] = {};
    memset(d, -1, sizeof(d));
    f (n) {
        string s;
        cin >> s;
        v.pb(s);
    }
    int ff = 0;
    for (int i = 0 ; i < n ; i++) {
        for (int j = 0 ; j < m ; j++) {
            int f = 0;
            if (i > 0 && v[i-1][j] == v[i][j]) {
                f = 1;
            }
            if (i < n-1 && v[i+1][j] == v[i][j]) {
                f = 1;
            }
            if (j > 0 && v[i][j] == v[i][j-1]) {
                f = 1;
            }
            if (j < m - 1 && v[i][j] == v[i][j+1]) {
                f = 1;
            }
            if (f) {
                q.push({i,j});
                d[i][j] = 0;
                ff = 1;
            }
        }
    }
    int dx[] = {1,-1,0,0};
    int dy[] = {0,0,1,-1};
    while (!q.empty()) {
        auto now = q.front();
        q.pop();
        for (int i = 0 ; i < 4 ; i++) {
            int nx = now.F + dx[i];
            int ny = now.S + dy[i];
            if (nx < 0 || nx >= n || ny < 0 || ny >= m) {
                continue;
            }
            if (~d[nx][ny])continue;
            d[nx][ny] = d[now.F][now.S] + 1;
            q.push({nx,ny});
        }
    }
    while (k--) {
        int x, y;
        ll t;
        cin >> x >> y >> t;
        x--, y--;
        //cout << d[x][y] << endl;
        if (!ff) {
            cout <<v[x][y] << '\n';
        }
        else if (t <= d[x][y]) {
            cout << v[x][y] << '\n';
        }
        else {
            t -= d[x][y];
            t %= 2;
            cout << ((v[x][y] - '0') ^ t) << '\n';
        }
    }
}