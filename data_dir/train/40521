//In the name of God

#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
using namespace std;
#define mp make_pair
#define lol long long
const int MAXN=1e5+10;
struct node
{
  int len,res,suf,pre;
};
node z,seg[MAXN*40];
int n,nc=1;
int c2[MAXN*40],c1[MAXN*40],root[MAXN];
pair <int,int> a[MAXN];

void make(int s,int e,int ind)
{
  if(s==e)
    return;
  int mid=(s+e)/2;
  c1[ind]=++nc;
  c2[ind]=++nc;
  make(s,mid,c1[ind]);
  make(mid+1,e,c2[ind]);
}


node merge(node x,node y,int l1,int r1,int l2,int r2)
{
  node ret;
  ret.res=max(max(x.res,y.res),x.suf+y.pre);
  ret.pre=x.pre+(x.pre==r1-l1+1)*y.pre;
  ret.suf=y.suf+(y.suf==r2-l2+1)*x.suf;
  ret.len=x.len+y.len;
  return ret;
}

void update(int s,int e,int ind)
{
  int mid=(s+e)/2;
  seg[ind]=merge(seg[c1[ind]],seg[c2[ind]],s,mid,mid+1,e);
}

int modify(int s,int e,int ind,int ind2)
{
  if(s>ind2 or e<ind2)
    return ind;

  if(s==e)
    {
      nc++;
      seg[nc].res=seg[nc].suf=seg[nc].pre=seg[nc].len=1;
      return nc;
    }
  nc++;
  int mid=(s+e)/2,idx=nc;
  c1[idx]=modify(s,mid,c1[ind],ind2);
  c2[idx]=modify(mid+1,e,c2[ind],ind2);
  update(s,e,idx);
  return idx;
}

void add(int ind,int cur)
{
  root[cur]=modify(1,n,root[cur-1],ind);
}

node fin(int s,int e,int ind,int x,int y)
{
  if(s>y or e<x)
    return z;
  if(s>=x and e<=y)
    return seg[ind];
  int mid=(s+e)/2;
  node ans1=fin(s,mid,c1[ind],x,y),ans2=fin(mid+1,e,c2[ind],x,y);
  return merge(ans1,ans2,s,mid,mid+1,e);
}

int main()//it's OK!
{
  ios::sync_with_stdio(false);
  fill(seg,seg+MAXN*40,z);
  cin>>n;
  make(1,n,nc);
  root[0]=1;
  for(int i=1;i<=n;i++)
    cin>>a[i].first,a[i].second=i;
  sort(a+1,a+1+n);
  reverse(a+1,a+1+n);
  for(int i=1;i<=n;i++)
    add(a[i].second,i);
  int q;
  cin>>q;
  for(int i=1;i<=q;i++)
    {
      int l,r,w;
      cin>>l>>r>>w;
      int s=0,e=n;
      while(e-s>1)
	{
	  int mid=(s+e)/2;
	  if(fin(1,n,root[mid],l,r).res>=w)
	    e=mid;
	  else
	    s=mid;
	}
      cout<<a[e].first<<endl;
    }
  return 0;
}
