#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <assert.h>
#include <bitset>
#include <string>
#include <cstdio>
#include <math.h>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
using namespace std;

#define mp make_pair
#define int64 long long

#ifdef _DEBUG
    const int N = 1010;
#else
    const int N = 100010;
#endif

const int64 inf = 1e18;

struct Skill
{
    int a, i;
    Skill(){};
    Skill(int a, int i) : a(a), i(i){};
    bool operator < (const Skill &other) const
    {
        return (a < other.a || (a == other.a && i < other.i));
    }
};

int n, cf, cm, A, res[N];
Skill a[N];
int64 m, sum[N];

int get(int i, int k)
{
    if (i >= n - k + 1) return A;
    return a[i].a;
}

int64 calc(int k, int j)
{
    int64 ans = 0;
    if (get(1, k) >= j) return ans;
    int l = 1, r = n;
    while (l + 1 < r)
    {
        int m = (l + r) / 2;
        if (get(m, k) >= j) r = m - 1;
        else l = m;
    }
    int pos;
    if (get(r, k) < j) pos = r;
    else pos = l;
    ans = 1ll * j * pos - sum[pos];
    return ans;
}

int64 solve(int k, int f)
{
    int pos = n - k + 1;
    int64 r = m;
    r -= 1ll * k * A - (sum[n] - sum[pos - 1]);
    int64 ans = -inf;
    if (r < 0) return ans;
    int lb = 0, rb = A;
    while (lb + 1 < rb)
    {
        int m = (lb + rb) / 2;
        if (calc(k, m) > r) rb = m - 1;
        else lb = m;
    }
    int valmin;
    if (calc(k, rb) <= r) valmin = rb;
    else valmin = lb;
    ans = 1ll * k * cf + 1ll * valmin * cm;
    if (f)
    {
        for (int i = pos; i <= n; i++) res[a[i].i] = A;
        for (int i = 1; i < pos; i++)
            if (get(i, k) < valmin) res[a[i].i] = valmin;
            else res[a[i].i] = a[i].a;
    }
    return ans;
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    scanf("%d%d%d%d%I64d", &n, &A, &cf, &cm, &m);
    for (int i = 1; i <= n; i++) scanf("%d", &a[i].a);
    for (int i = 1; i <= n; i++) a[i].i = i;
    sort(a + 1, a + n + 1);
    sum[0] = 0;
    for (int i = 1; i <= n; i++) sum[i] = sum[i - 1] + a[i].a;
    int64 ans = -inf;
    int opt = -1;
    for (int i = 0; i <= n; i++)
    {
        int64 val = solve(i, 0);
        if (val > ans)
        {
            ans = val;
            opt = i;
        }
    }
    solve(opt, 1);
    cout << ans << endl;
    for (int i = 1; i <= n; i++) printf("%d ", res[i]);
    return 0;
}