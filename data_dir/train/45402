#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma comment(linker, "/stack:200000000")

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;

template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define all(x) (x).begin(), (x).end()
//#define int ll

void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
}

const int MAXN = 1020;
int x[MAXN], y[MAXN], a[MAXN], b[MAXN];
int n;

bool check(int tx, int ty) {
    set<pii> setik;
    for (int i = 0; i < n; ++i) {
        setik.insert({a[i], b[i]});
    }
    for (int i = 0; i < n; ++i) {
        int dx = tx - x[i];
        int dy = ty - y[i];
        auto it = setik.lower_bound({dx, dy});
        if (it == setik.end() || *it != (pii){dx, dy}) {
            return false;
        }
        setik.erase(it);
    }
    return true;
}

signed main() {
    FAST_IO();
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> x[i] >> y[i];
    }
    for (int i = 0; i < n; ++i) {
        cin >> a[i] >> b[i];
    }
    for (int i = 0; i < n; ++i) {
        int tx = x[0] + a[i];
        int ty = y[0] + b[i];
        if (check(tx, ty)) {
            cout << tx << ' ' << ty << '\n';
            return 0;
        }
    }
    assert(false); 
    return 0;
}