#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, std::less<>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//*/998244353;
const int base = 2187;
const double eps = 1e-9;
const int N = 200'000;
const int LOGN = 19;

int n, m, k;
vector<int> a;

void solve(int) {
  string s;
  cin >> s;
  vector<char> st;
  n = (int)s.size();
  vector<int> ans;
  for (int i = 0; i < n; ++i) {
    char c = s[i];
    if (c == 'e' && st.size() > 1u && st.back() == 'n' && st[st.size() - 2] == 'o') {
      st.pop_back();
      ans.push_back(i - 1);
    }
    if (c == 'o' && st.size() > 1u && st.back() == 'w' && st[st.size() - 2] == 't') {
      if (i + 2 < n && s[i + 1] == 'n') {
        ans.push_back(i);
        continue;
      }
      st.pop_back();
      ans.push_back(i - 1);
    }
    st.push_back(c);
  }
  cout << ans.size() << '\n';
  for (int x : ans) {
    cout << x + 1 << ' ';
  }
  cout << '\n';
}

void precalc() {
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i) {
    solve(i);
  }
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
