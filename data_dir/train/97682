#include<bits/stdc++.h>
using namespace std;

bool isPalin(string s){
    int n=s.length();

    int hlf = n/2;

    for(int i=0;i<hlf;i++){
        if(s[i]!=s[n-1-i]){
            return false;
        }
    }

    return true;
}

int longest_palindrome_prefix(string s)
{
    
    string kmprev = s;
    reverse(kmprev.begin(), kmprev.end());
    string kmp = s + "#" + kmprev;

    vector<int> lps(kmp.size(), 0);
    for (int i = 1; i < (int)lps.size(); ++i)
    {
        int prev_idx = lps[i - 1];
        while (prev_idx > 0 && kmp[i] != kmp[prev_idx])
        {
            prev_idx = lps[prev_idx - 1];
        }
        lps[i] = prev_idx + (kmp[i] == kmp[prev_idx] ? 1 : 0);
    }
    return lps[lps.size() - 1];
}

int main(){
    int t;
    cin>>t;

    while(t--){
        string s;
        cin>>s;

        int n=s.length();

        if(isPalin(s)){
            cout<<s<<endl;
            continue;
        }

        int maxlen=0;
        string ans="";

        //prefix
        int o1 = longest_palindrome_prefix(s);
        if(o1>maxlen){
            maxlen=o1;
            ans=s.substr(0,o1);
        }


        //suffix
        string revst = s;
        reverse(revst.begin(),revst.end());

        int o2 = longest_palindrome_prefix(revst);

        if(o2>maxlen){
            maxlen=o2;
            ans=s.substr(n-o2,o2);
        } 

        int hlf = n/2;

        string pre="";
        string suff="";

        int cutforward=-1;
        int cutbackward=n;

        for(int i=0;i<hlf;i++){
            if(s[i]==s[n-1-i]){
                pre+=s[i];
                suff+=s[n-1-i];
                cutforward=i;
                cutbackward=n-1-i;
            }
            else{
                break;
            }
        }

        string newStr = s.substr(cutforward+1, cutbackward-cutforward-1);

        int o3 = longest_palindrome_prefix(newStr);
        int len3 = pre.length()+suff.length()+o3;

        if(len3>maxlen){
            maxlen = len3;
            string temp = suff;
            reverse(temp.begin(),temp.end());
            ans = pre+newStr.substr(0,o3)+temp;
        }

        string revnewstr=newStr;
        reverse(revnewstr.begin(), revnewstr.end());

        int o4 = longest_palindrome_prefix(revnewstr);
        int len4 = pre.length()+suff.length()+o4;

        if(len4>maxlen){
            maxlen=len4;
            
            string temp = suff;
            reverse(temp.begin(),temp.end());

            ans= pre+newStr.substr(newStr.length()-o4,o4)+temp;
        }
        
        cout<<ans<<endl;
    }
}