#include<iostream>
#include<algorithm>
#include<queue>
#include<string>
#include<vector>
#include<map>
#include<list>
#include<set>
#include<cstring>
#include<ctime>
#include<cmath>
#include<limits>
#include<iterator>
#include<functional>
#include<unordered_map>
#include<stack>
#include<bitset>

#define all(v) v.begin(), v.end()
#define setv(ar, val) memset(ar, val, sizeof(ar));
#define ll long long int
#define ull unsigned long long int
#define PI 3.1415926535897932384626433832795
#pragma comment(linker, "/STACK:536870912")
#pragma warning(disable : 4996)
using namespace std;

const int N = 3e5 + 100;
int tin[N], fup[N], col[N], d[N];
vector<int> v[N], w[N],tr[N];
int timer = 0;

void dfs(int node, int anc) {
	fup[node] = tin[node] = ++timer;
	for (int to : v[node]) {
		if (to != anc) {
			if (tin[to])
				fup[node] = min(fup[node], tin[to]);
			else {
				dfs(to, node);
				fup[node] = min(fup[to], fup[node]);
				if (fup[to] <= tin[node]) {
					w[node].push_back(to);
					w[to].push_back(node);
				}
			}
		}
	}
}

int z = 0;
void mark(int node, int c) {
	col[node] = c;
	for (int to : w[node]) {
		if (!col[to]) {
			mark(to, c);
		}
	}
}

int bfs(int s) {
	setv(d, -1);
	d[s] = 0;
	queue<int> q;
	q.push(s);
	int last = s;
	while (!q.empty()) {
		int node = q.front();
		q.pop();
		last = node;
		for (int to : tr[node]) {
			if (d[to] == -1) {
				d[to] = d[node] + 1;
				q.push(to);
			}
		}
	}
	return last;
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	int n, m;
	scanf("%d%d", &n, &m);

	for (int i = 0; i < m; i++) {
		int x, y;
		scanf("%d%d", &x, &y);
		x--, y--;
		v[x].push_back(y);
		v[y].push_back(x);
	}

	dfs(0, -1);

	for (int i = 0; i < n; i++) {
		if (!col[i]) {
			mark(i, ++z);
		}
	}

	for (int i = 0; i < n; i++) {
		for (int to : v[i]) {
			if (col[to] != col[i]) {
				tr[col[i]].push_back(col[to]);
			}
		}
	}

	printf("%d\n", d[bfs(bfs(1))]);






	return 0;
}