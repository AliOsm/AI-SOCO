//const int K = 3e5+5;
//set<int> got[K];
//vi adj[K];
//int par[K],cost[K];
//int getpar(int u){
//	if(par[par[u]] == par[u])
//		return par[u];
//	return par[u] = getpar(par[u]);
//}
//void unite(int u, int v){
//	u = getpar(u);
//	v = getpar(v);
//	assert(u != v);
//	if(sz(got[u]) > sz(got[v]))
//		swap(u,v);
//	cost[v] += cost[u];
//	for(int x : got[u])
//		if(got[v].count(x)){
//			got[v].erase(x);
//		}
//		else
//			got[v].insert(x);
//	par[u] = v;
//}
//string fixed(string s){
//	for(char &c : s)
//		c += '0';
//	return s;
//}
//void __(){
//	iota(par,par+K,0);
//	int n,k;
//	cin >> n >> k;
//	_(string,s);
//	for(char &c : s)
//		c -= '0';
//	rep(i,k){
//		cost[i] = 1;
//		_(int,m);
//		_(vi,a,m);
//		for(int &x : a){
//			--x;
//			got[i].insert(x);
//			adj[x].pb(i);
//		}
//	}
//	int ans = 0;
//	rep(i,sz(s)){
//		vi a;
//		for(int x : adj[i]){
//			x = getpar(x);
//			if(got[x].count(i) == 0)
//				continue;
//			else
//				a.pb(x);
//		}
//		unique(a);
//		assert(sz(a) <= 2);
//		if(s[i]){
//			if(sz(a) == 1){
//				got[a[0]].clear();
//			}
//			if(sz(a) == 2){
//				int s1 = a[0];
//				int s2 = a[1];
//				unite(s1,s2);
//			}
//		}
//		else{
//			assert(!a.empty());
//			if(sz(a) == 1){
//				int s1 = a[0];
//				ans += cost[s1];
//				for(int x : got[s1])
//					s[x] ^= 1;
//				got[s1].clear();
//			}else{
//				int s1 = a[0];
//				int s2 = a[1];
//				if(cost[s1] > cost[s2])
//					swap(s1,s2);
//				ans += cost[s1];
//				cost[s2] -= cost[s1];
//				cost[s1] = 0;
//				for(int x : got[s1])
//					s[x] ^= 1;
//				unite(s1,s2);
//			}
//		}
//		print ans;
//	}
//}
//
#include <numeric>
#include <set>
#include <iomanip>
#include <algorithm>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define REP_ZERO_INT(i,r) for(int i = 0; i < r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT,REP_ZERO_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<int> vi;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 vector<T> unique(vector<T>& arr){
    sort(all(arr));
    arr.erase(unique(all(arr)), arr.end());
    return arr;
}
T1 istream& read(T, T, istream& = cin);
T1 istream& operator>>(istream& stream, vector<T>& t){
    return read(all(t), stream);
}
T1 istream& read(T b, T e, istream& stream){
    for(T it = b; it != e; ++it)
        stream >> *it;
    return stream;
}
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout)
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }
    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
#define print _print(),
#define INPUT_WITHOUT_INIT(type,name) type name; cin >> name
#define _IWI(type,name,...) type name(__VA_ARGS__); cin >> name
#define GET_INPUT_MACRO(_1,_2,_3,_4,_5,_6,_7,_8,NAME,...) NAME
#define _(...) GET_INPUT_MACRO(__VA_ARGS__,_IWI,_IWI,_IWI,_IWI,_IWI,_IWI,INPUT_WITHOUT_INIT)(__VA_ARGS__)
const int K = 3e5+5;
set<int> got[K];
vi adj[K];
int par[K],cost[K];
int getpar(int u){
	if(par[par[u]] == par[u])
		return par[u];
	return par[u] = getpar(par[u]);
}
void unite(int u, int v){
	u = getpar(u);
	v = getpar(v);
	assert(u != v);
	if(sz(got[u]) > sz(got[v]))
		swap(u,v);
	cost[v] += cost[u];
	for(int x : got[u])
		if(got[v].count(x)){
			got[v].erase(x);
		}
		else
			got[v].insert(x);
	par[u] = v;
}
string fixed(string s){
	for(char &c : s)
		c += '0';
	return s;
}
void __(){
	iota(par,par+K,0);
	int n,k;
	cin >> n >> k;
	_(string,s);
	for(char &c : s)
		c -= '0';
	rep(i,k){
		cost[i] = 1;
		_(int,m);
		_(vi,a,m);
		for(int &x : a){
			--x;
			got[i].insert(x);
			adj[x].pb(i);
		}
	}
	int ans = 0;
	rep(i,sz(s)){
		vi a;
		for(int x : adj[i]){
			x = getpar(x);
			if(got[x].count(i) == 0)
				continue;
			else
				a.pb(x);
		}
		unique(a);
		assert(sz(a) <= 2);
		if(s[i]){
			if(sz(a) == 1){
				got[a[0]].clear();
			}
			if(sz(a) == 2){
				int s1 = a[0];
				int s2 = a[1];
				unite(s1,s2);
			}
		}
		else{
			assert(!a.empty());
			if(sz(a) == 1){
				int s1 = a[0];
				ans += cost[s1];
				for(int x : got[s1])
					s[x] ^= 1;
				got[s1].clear();
			}else{
				int s1 = a[0];
				int s2 = a[1];
				if(cost[s1] > cost[s2])
					swap(s1,s2);
				ans += cost[s1];
				cost[s2] -= cost[s1];
				cost[s1] = 0;
				for(int x : got[s1])
					s[x] ^= 1;
				unite(s1,s2);
			}
		}
		print ans;
	}
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        __();
}
