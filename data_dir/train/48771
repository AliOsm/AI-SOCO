#include<iostream>
#include <bits/stdc++.h>
#define ll long long
#define IO ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
int n, dis[2009], inf = 1e9 + 9, a[2002][2002], parent[2002];
struct edge
{
	int from, to, cost ;
};
vector<edge> Edge ;
vector<int> v[2002];
bool sortt(edge x, edge y)
{
	return x.cost < y.cost;
}
int find_set(int v)
{
	if(v == parent[v])
		return v ;
	return parent[v] = find_set(parent[v]);
}
void union_set(int a, int b)
{
	a = find_set(a), b = find_set(b);
	parent[b] = a;
}
void BFS(int node)
{
	for(int i = 0; i <= n; i++)
		dis[i] = inf;
	dis[node] = 0;
	queue<int> q;
	q.push(node);
	while(!q.empty())
	{
		node = q.front();
		q.pop();
		for(auto i : v[node])
			if(dis[i] > dis[node] + a[i][node])
			{
				dis[i] = dis[node] + a[i][node];
				q.push(i);
			}
	}
}
int main()
{
	cin >> n;
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++)
			scanf("%d", &a[i][j]);
	for(int i = 1; i <= n; i++)
	{
		parent[i] = i;
		for(int j = i + 1; j <= n; j++)
		{
			if(a[i][j] != a[j][i])
				return cout << "NO", 0;
			edge x ;
			x.from = i, x.to = j, x.cost = a[i][j];
			Edge.push_back(x);
		}
	}
	sort(Edge.begin(), Edge.end(), sortt);
	for(edge i : Edge)
		if(find_set(i.from) != find_set(i.to) && i.cost != 0)
		{
			v[i.from].push_back(i.to);
			v[i.to].push_back(i.from);
			union_set(i.from, i.to);
		}
	for(int i = 1; i <= n; i++)
	{
		BFS(i);
		for(int j = 1; j <= n; j++)
			if(dis[j] != a[i][j])
				return cout << "NO", 0;
	}
	cout << "YES";
}
