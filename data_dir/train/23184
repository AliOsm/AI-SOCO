#include <bits/stdc++.h>
#define SZ(x) (int)x.size()
const int SZ=1e5+5;
const int OO=2e9;
const int dx[]={0,0,1,1,1,-1,-1,-1};
const int dy[]={1,-1,0,1,-1,0,1,-1};
using namespace std;

string nodeName[8][8];
map<pair<string,string>,bool> edge; 

bool valid(int a,int b)
{
    return (a>=0 && a<=7 && b>=0 && b<=7);
}

void generateEdge()
{
    for(int i=0;i<8;i++)
    { 
        for(int j=0;j<8;j++)
        {
            char a=(j+'a'), b=(8-i+'0');
            nodeName[i][j]+=a;
            nodeName[i][j]+=b;
        }
    }

    for(int i=0;i<8;i++)
        for(int j=0;j<8;j++)
            for(int k=0;k<8;k++)
                if(valid(i+dx[k],j+dy[k]))
                    edge[{nodeName[i][j],nodeName[i+dx[k]][j+dy[k]]}]=1;
}

string s,d;
map<string,bool> vis;
map<string,int> dis;
map<string,string> parent; 

void Dijkstra()
{
    for(int i=0;i<8;i++)
        for(int j=0;j<8;j++)
            dis[nodeName[i][j]]=OO;
    
    set< pair<int,string> >q;
    q.insert({0,s});
    dis[s]=0;
    
    while(!q.empty())
    {
        pair<int,string> f=*q.begin();
        q.erase(q.begin());
        vis[f.second]=1;
        
        for(auto i:edge)
        {
            if(i.first.first==f.second) 
            {
                string nxt=i.first.second;
                if(!vis[nxt] && dis[nxt]>f.first+1)
                {
                    dis[nxt]=f.first+1;
                    q.insert({dis[nxt],nxt});
                    parent[nxt]=i.first.first;
                }
            }
        }
    }
}

vector<string> path;

void getPath(string x)
{
	if(x!=s)
        getPath(parent[x]);
    path.push_back(x);
}

string getDir(string a,string b)
{
    string res="";
    if(a[0]>b[0]) res+="L";
    if(a[0]<b[0]) res+="R";
    if(a[1]>b[1]) res+="D";
    if(a[1]<b[1]) res+="U";
    return res;
}

int main() 
{
    cin>>s>>d;
    generateEdge();
    Dijkstra();
    getPath(d);

    cout<<SZ(path)-1<<'\n';
    for(int i=1;i<SZ(path);i++)
        cout<<getDir(path[i-1],path[i])<<'\n';
}