#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<ll, ll> pii;

#define MOD 1000000007
#define MAX 200005
typedef complex<long double> point;

int a[100005];

int main() {

#ifdef  Adel_SaadEddin_PC
    freopen("input.txt", "r", stdin);
    freopen("output.out", "w", stdout);
#endif //  Adel_SaadEddin_PC

    ios_base::sync_with_stdio(false);

    int n; scanf("%d", &n);
    map<int, int> idx;

    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
        idx[a[i]] = i + 1;
    }

    vector<int> ve;
    for (int i = 0; i < n; i++)
        ve.push_back(a[i] + 1);

    sort(ve.begin(), ve.end());

    set<pii> intrv;
    multiset<int> len;

    int mx = -1, res = 0;

    for (auto x : ve) {
        int pos = idx[x - 1];

        auto prv = intrv.lower_bound(pii(pos, pos));
        auto nxt = prv;

        if(nxt != intrv.begin())
            nxt = prv--;
        
        if (nxt != intrv.begin() && prv->second == pos - 1) {
            if (nxt != intrv.end() && nxt->first == pos + 1) {
                int l = prv->first;
                int r = nxt->second;

                intrv.erase(*nxt);
                intrv.erase(*prv);

                intrv.insert(pii(l, r));
            
                int len1 = (pos - l);
                int len2 = (r - pos);

                len.erase(len.find(len1));
                len.erase(len.find(len2));
                len.insert(r - l + 1);
            }
            else {
                int l = prv->first;
                int r = pos;

                intrv.erase(*prv);
                intrv.insert(pii(l, r));

                int len1 = (pos - l);
                
                len.erase(len.find(len1));
                len.insert(r - l + 1);
            }
        }
        else {
            if (nxt != intrv.end() && nxt->first == pos + 1) {
                int l = pos;
                int r = nxt->second;

                intrv.erase(*nxt);
                intrv.insert(pii(l, r));

                int len1 = r - pos;

                len.erase(len.find(len1));
                len.insert(r - l + 1);
            }
            else {
                int l = pos;
                int r = pos;

                intrv.insert(pii(l, r));
                len.insert(1);
            }
        }

        if (*len.begin() == *len.rbegin()) {
            int lebth = len.size();

            if (mx < lebth) {
                mx = lebth;
                res = x;
            }
            else if (mx == lebth) {
                if (res > x)
                    res = x;
            }
        }
    }

    while (mx == -1);

    printf("%d\n", res);

    return 0;
}