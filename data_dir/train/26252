//testing 
#include <bits/stdc++.h>

using namespace std;
#define pairr pair<long long, int>

vector<vector<pair<long long, int>> >adj;
vector<long long>c;

vector<int>parent;

void dijkstra(int source)
{
    priority_queue<pairr, vector<pairr>, greater<pairr> >q;
    q.push({0,source});
    c[source] = 0;
    parent[source] = -1;
    while(!q.empty())
    {
        long long cost = q.top().first;
        int node= q.top().second;
        q.pop();

        for(int i=0 ; i<adj[node].size() ; i++)
        {
            pair<long long, int>p = adj[node][i];
            if ( c[p.second] > cost + p.first)
            {
                parent[p.second] = node;
                c[p.second] = cost + p.first;
                q.push({c[p.second],p.second});
            }
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int n,m;
    cin >> n >> m;

    adj.resize(n+1);
    c.resize(n+1,1e15);
    parent.resize(n+1);
    
    for(int i=0 ; i<m ; i++)
    {
        int a,b,w;
        cin >> a >> b >> w;

        adj[a].push_back({w,b});
        adj[b].push_back({w,a});
    }

    dijkstra(1);

    vector<int>k;
    if (parent[n] == 0)
    {
        cout << -1 << endl;
        return 0;
    }

    int temp = parent[n];
    k.push_back(n);
    while(temp != -1)
    {
       k.push_back(temp);
       temp  = parent[temp];
    }
    for(int i=k.size()-1 ; i>=0 ; i--)
        cout << k[i] << " ";
    cout << endl;
    return 0;
}