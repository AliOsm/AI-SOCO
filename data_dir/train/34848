////#if !defined(YCM) && 1
////#define _FORTIFY_SOURCE 0
//#pragma GCC optimize("O3,Ofast,no-stack-protector")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
////#endif
//#include <unistd.h>
////#pragma GCC diagnostic ignored "-Wunused-result"
////#pragma GCC diagnostic ignored "-Wunused-function"
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double
#define ull unsigned long long int
#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define pb(a) push_back(a)
#define pii pair<int,int>
#define EPS 1e-9
#define PI acos(-1.0)
#define ff first
#define ss second
#define INF (ll)1e18
#define ALL(v) v.begin(),v.end()
int fx[]={0,0,-1,1,-1,1,1,-1};
int fy[]={1,-1,0,0,1,1,-1,-1};
ll lcm(ll a,ll b){return (a/__gcd(a,b))*b;}
ll bigmod(ll a,ll p,ll mod){ll ans=1;while(p){if(p&1)ans=ans*a%mod;a=a*a%mod;p>>=1;}return ans;}
ll power(ll x,ll n){if(n==0)return 1;else if(n%2==0){ll y=power(x,n/2);return y*y;}else return x*power(x,n-1);}

#ifdef shaft
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cerr << name << " is " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cerr.write(names, comma - names) << " is " << arg1 <<endl;
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif
const int N=(int)1e5+5;
const int inf=(int)1e9;
const int mod=(int)1e9+7;
/**first step
for(int i=1;i<=n;i++)
    if(vis[i]==WHITE)SCC(i);
2nd step:shrink(n);*/
#define WHITE 0
#define GRAY 1
#define BLACK 2
int disc[N], low[N];
vector<int>adj[N],adj_shrink[N], node[N];
int vis[N],head=1;
int globalCnt = 0;
int flagCycle;
vector<int> tarjan;
int cycle[N],color[N];
void init(int n){
    globalCnt=0;
    flagCycle=false;
    head=1;tarjan.clear();
    for(int i=0;i<=n;i++){
        adj[i].clear();adj_shrink[i].clear();
    }
    CLR(vis);CLR(color);
    CLR(low);CLR(disc);CLR(cycle);
}
int SCC ( int s ) {
    vis[s] = GRAY;
    disc[s] = low[s] = globalCnt++;
    tarjan.push_back(s);
    for ( int i = 0; i < adj[s].size(); i++ ) {
        int t = adj[s][i];
        if ( vis[t] == WHITE ) { ///This is tree edge
            SCC ( t );
            low[s] = min ( low[s], low[t] );
        }
        else if ( vis[t] == GRAY ) { ///This is back edge
            ///Cycle detected
            flagCycle = true;
            low[s] = min ( low[s], low[t] );
        }
    }
    if ( disc[s] == low[s] ) {
        while ( 1 ) {
            int lastNode = tarjan.back();
            cycle[lastNode] = head;
            node[head].pb(lastNode);
            tarjan.pop_back();
            vis[lastNode] = BLACK;
            if ( lastNode == s ) break;
        }
        head++;
    }
}
void dfs(int src){
    if(color[src])return;
    color[src]=1;
    for(int i=0;i<adj[src].size();i++){
        if(cycle[src]!=cycle[adj[src][i]]){
            adj_shrink[cycle[src]].pb(cycle[adj[src][i]]);
            dfs(adj[src][i]);
        }
    }
}
void shrink(int n){
    for(int i=1;i<=n;i++){
      if(color[i]==0)dfs(i);
    }
}
int arr[N];
int main(){
    ios_base::sync_with_stdio(false);cout.setf(ios::fixed); cout.precision(10);cout.tie(nullptr); cin.tie(nullptr);
    #ifdef shaft
        freopen("in.txt","r",stdin);
        //freopen("out.txt","w",stdout);
    #endif ///shaft
    int n, m, h;
    cin >> n >> m >> h;
    init(n);
    for(int i = 1; i <= n; i++) cin >> arr[i];
    for(int i = 1; i<= m; i++){
        int u, v; cin >> u >> v;
        if((arr[u]+1)%h == arr[v])adj[u].pb(v);
        if((arr[v]+1)%h == arr[u])adj[v].pb(u);
    }
    for(int i = 1; i <= n; i++){
        if(vis[i] == WHITE)SCC(i);
    }
    shrink(n);
    int res = inf, id;
    for(int i = 1; i < head; i++){
        if(adj_shrink[i].size() == 0 && node[i].size() < res){
            res = node[i].size();
            id = i;
        }
    }
    cout << node[id].size() << endl;
    for(int v : node[id])
        cout << v<<" ";
    cout << endl;
    return 0;
}
