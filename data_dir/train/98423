#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <cstdio>
#include <map>
#include <string>
#include <iomanip>
#include <vector>
#include <memory.h>
#include <queue>
#include <set>
#include <hash_set>
#include <stack> 
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include <bitset>
#pragma comment (linker, "/STACK:167177216")
using namespace std;
#define mems(A, val) memset(A, val, sizeof(A))
#define mp(a, b) make_pair(a, b)
#define all(B) (B).begin(), (B).end()
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define forit (it, coll) for(auto it = coll.begin(); it != coll.end(); ++it)
const int MAX = 2147483647;
const int MAXN = 201000;
typedef long long LL;
const LL MOD = 1000000000 + 7;
#define M_PI       3.14159265358979323846

pair<int, int> T[4 * MAXN];
void update(int v){
	T[v] = min(T[2 * v], T[2 * v + 1]);
}
void build(vector<pair<int, int> > &a, int v, int tl, int tr){
	if (tl == tr){
		T[v] = mp(a[tl].second, tl);
		return;
	}

	int tm = (tl + tr) >> 1;
	build(a, 2 * v, tl, tm);
	build(a, 2 * v + 1, tm + 1, tr);
	update(v);
}



pair<int, int> get(int v, int tl, int tr, int l, int r){
	if (l > r) return mp(1000000000, 1000000000);
	if (tl == l && tr == r){
		return T[v];
	}

	int tm = (tl + tr) >> 1;
	pair<int, int> ans = min(get(2 * v, tl, tm, l, min(r, tm)), get(2 * v + 1, tm + 1, tr, max(l, tm + 1), r));
	return ans;
}

int main() {

#ifdef _DEBUG
	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("numbers.in", "r", stdin); freopen("numbers.out", "w", stdout);
#endif
	int n;
    cin>>n;
    vector<string> a(n);
    for(int i = 0; i < n; ++i){
        cin>>a[i];
    }
    
    hash_set<string> s;
    for(int i = n - 1; i >= 0; --i){
        if (s.count(a[i])) continue;
        cout<<a[i]<<endl;
        s.insert(a[i]);
    }


	return 0;
}