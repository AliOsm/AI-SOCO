#include "bits/stdc++.h"
using namespace std;
#ifndef LOCAL
#define endl '\n'
#endif

#define fr(i, a, b) for(int i = a; i <= b; i++)
#define rf(i, a, b) for(int i = a; i >= b; i--)
#define pf push_front
#define pb push_back
#define fi first
#define se second
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define sz(x) (int)x.size()
#define rsz resize()
#define lb lower_bound
#define ub upper_bound
#define br cout << endl

typedef long long ll;
typedef long double f80;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;

int pct(int x) { return __builtin_popcount(x); }
int pct(ll x) { return __builtin_popcountll(x); } 
int bit(int x) { return 31 - __builtin_clz(x); } // floor(log2(x))
int bit(ll x) { return 63 - __builtin_clzll(x); } // floor(log2(x))
int cdiv(int a, int b) { return a / b + !(a < 0 || a % b == 0); }
ll cdiv(ll a, ll b) { return a / b + !(a < 0 || a % b == 0); }

template<typename T>
void leftShift(vector<T> &v, ll k) { k %= sz(v); if(k < 0) k += sz(v); rotate(v.begin(), v.begin() + k, v.end()); }
template<typename T>
void rightSift(vector<T> &v, ll k) { leftShift(v, sz(v) - k); }

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

ll rand(ll l, ll r){
	uniform_int_distribution<ll> uid(l, r);
	return uid(rng);
}

inline int nxt() {
	int x;
	cin >> x;
	return x;
}

inline ll nxtll() {
	ll x;
	cin >> x;
	return x;
}

void pr() {}
void sc() {}

template <typename Head, typename... Tail>
void pr(Head H, Tail... T) { cout << H << " "; pr(T...); }

template <typename Head, typename... Tail>
void sc(Head &H, Tail &... T) { cin >> H; sc(T...); }

#ifdef LOCAL
#define debug(...) cerr << "[L:" << __LINE__ << "][" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

#ifndef LOCAL
string to_string(__int128 x) {
	string s = "";
	bool neg = 0;
	if(x < 0) { s += "-"; neg = 1; x = -x; }
	if(!x) s += '0';
	while(x) {
		int rem = x % 10;
		s += to_string(rem);
		x /= 10;
	}
	reverse(s.begin() + neg, s.end());
	return s;
}
#endif

const int mod = 1e9 + 7; // 998244353;

int pwr(int a,int b) {
	int ans = 1;
	while(b) {
		if(b & 1) ans = (ans * 1LL * a) % mod;
		a = (a * 1LL * a) % mod;
		b >>= 1;
	}
	return ans;
}

/*
	Lookout for overflows!!
	Check array sizes!!
	Clear before test cases!!
	Use the correct modulo!!
	Check for corner cases!!
	Are you forgetting something?!
*/

const int N = 4e5 + 5;
int a[N], b[N];
int pre[N];
int n;

bool good(int nn) {
	memset(pre, 0, sizeof pre);
	int l = nn - n + 1, r = nn;
	int val = 0;
	fr(i, 1, n) {
		pre[a[i]]++;
	}
	fr(i, n + 1, nn) {
		if(l <= i && i <= r) val++;
		if(!pre[val]) {
			if(val == 0) return 1;
			return 0;
		}
		pre[val]--;
		pre[b[i - n]]++;
	}
	return 1;
}

void solve() {
	n = nxt();
	fr(i, 1, n) {
		sc(a[i]);
	}
	fr(i ,1, n) {
		sc(b[i]);
	}
	int lol = b[n];
	if(lol) {
		fr(i, 1, n) {
			pre[a[i]]++;
		}
		bool pos = 1;
		int cv = 1;
		fr(i, n - lol + 1, n) {
			if(b[i] != cv) pos = 0;
			else cv++;
		}
		if(pos) {
			int ans = 0;
			fr(i, 1, n - lol) {
				ans++;
				if(!pre[lol + i]) pos = 0;
				else {
					pre[lol + i] = 0;
				}
				pre[b[i]]++;
			}
			if(pos) {
				pr(ans);
				return;
			}
		}
	}
	int l = 2 * n - 1, r = 3 * n;
	while(r - l > 1) {
		int m = (l + r) >> 1;
		if(good(m))
			r = m;
		else
			l = m;
	}
	cout << r - n;
}

signed main() {
	ios :: sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int t;
	// cin >> t;
	t = 1;
	for(int tt = 1; tt <= t; tt++) {
		solve();
	}
	return 0;
}