#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
#define re return
#define ll long long
#define ull unsigned ll
#define ld long double
#define f first
#define s second
#define pi acos(-1)
#define oo (ll)1e9+8
#define OO 1e18
#define EPS 1e-9
#define Endl '\n'
#define all(v) (v).begin(),(v).end()
#define FX(n) fixed<<setprecision(n)
#define mm(o,k) memset(o,k,sizeof o)
#define IO ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
using namespace std;
const int N=2e5+5,M=1e5+5;
int n,cost,profit;
int kolo[]={0,3,1,1};
int tmp[4],sz[N];
pair<int,int> p;
vector<pair<int,int> > a[N];
priority_queue<pair<int,int> > pq;
ll DP[N][11];
ll dp(int i,int k){
    if(i==n)re 0;
    ll &ret=DP[i][k];
    if(~ret)re ret;
    ret=0;
    for(int msk=0;msk<(1<<sz[i]);++msk){
        int sum=0;
        int mnwr=0;
        ll kam=0;
        ll mx=0;
        for(int j=0;j<sz[i];++j){
            if(!(msk&(1<<j)))
                continue;
            ++mnwr;
            sum+=a[i][j].s;
            kam+=a[i][j].f;
            mx=max(mx,1ll*a[i][j].f);
        }
        if(sum<=3)
            ret=max(ret,dp(i+1,(k+mnwr)%10)+kam+((k+mnwr>=10)?mx:0));
    }
    re ret;
}
void build(int i,int k){

}
int main()
{
    scanf("%d",&n);
    for(int i=0;i<n;++i){
        int k;
        scanf("%d",&k);
        while(k--){
            scanf("%d%d",&cost,&profit);
            pq.push({profit,cost});
        }
        mm(tmp,0);
        while(pq.size()){
            p=pq.top();
            pq.pop();
            if(tmp[p.s]>=kolo[p.s])continue;
            ++tmp[p.s];
            a[i].push_back(p);
        }
        sz[i]=a[i].size();
    }
    mm(DP,-1);
    printf("%lld\n",dp(0,0));
    re 0;
}