#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<ll,ll> ii;
typedef vector<ll> vi;
typedef vector< ii > vii;

#define INF 0x3F3F3F3F
#define LINF 0x3F3F3F3F3F3F3F3FLL
#define pb push_back
#define mp make_pair
#define pq priority_queue
#define LSONE(s) ((s)&(-s)) //LASTBIT
#define DEG_to_RAD(X)   (X * PI / 180)
#define F first
#define S second

#ifdef ONLINE_JUDGE
#define debug(args...)
#else
#define debug(args...) fprintf(stderr,args)
#endif

//////////////////////
int dx[] = {1,-1,0,0};
int dy[] = {0,0,-1,1};	
//////////////////////

const int N = 2*1e5 + 100;

ii join( ii a, ii b )
{
	return ii(min(a.F,b.F),max(a.S,b.S));
}

struct segment
{
	ii tr[4*N];
	void update( int no, int l, int r, int i, ll j )
	{
		if( l == r ) 
		{
			tr[no] = mp(j,j);
			return;
		}
		int nxt = (no<<1);
		int mid = (l+r)>>1;
		if(i<=mid) update(nxt,l,mid,i,j);
		else update(nxt+1,mid+1,r,i,j);
		tr[no] = join(tr[nxt],tr[nxt+1]);
	}

	ii query( int no, int l, int r, int i, int j )
	{
		if(r<i || l>j ) return mp(LINF,-LINF);
		if(l>=i && r<=j) return tr[no];
		int nxt = (no<<1);
		int mid = (l+r)>>1;
		return join(query(nxt,l,mid,i,j),query(nxt+1,mid+1,r,i,j));
	}

	void build( int n, ll *v )
	{
		for(int i=0;i<n;++i) update(1,0,n-1,i,v[i]);
	}

	void init( int n )
	{
		for(int i=0;i<n;++i) update(1,0,n-1,i,0);	
	}
};


int n;
ll p[N],l[N];
int b[N];


segment pd;


int main()
{
	//ios::sync_with_stdio(0);
	scanf("%d",&n);
	for(int i=0;i<n;++i) scanf("%lld %lld",p+i,l+i);
	b[n-1] = n-1;
	for(int i=n-2;i>=0;--i)
	{
		b[i] = i;
		int pos = upper_bound(p,p+n,l[i]+p[i])-p-1;
		b[i] = b[pos];
	}
	// for(int i=0;i<n;++i) debug("%d ",b[i]);
	// debug("\n");	
	pd.init(n+1);

	for(int i=n-1;i>=0;--i)
	{
		int nxt = b[i]+1;
		ll foo = ((nxt!=n)?(p[nxt]-(p[i]+l[i])):0) + pd.query(1,0,n,nxt,nxt).F;
		if(i+1<=nxt-1) foo = min(foo,(ll)pd.query(1,0,n,i+1,nxt-1).F);
		pd.update(1,0,n,i,foo);
	}

	int q;
	scanf("%d",&q);
	while(q--)
	{
		int a,b;
		scanf("%d %d",&a,&b);
		a--;b--;
		if(a==b)
		{
			printf("0\n");
			continue;
		}

		ll menor = pd.query(1,0,n,a,b).F;
		printf("%lld\n",pd.query(1,0,n,a,a).F-menor);
	}
	return 0;
}