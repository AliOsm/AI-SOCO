#include <algorithm>
#include <iostream>
#include <iomanip>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 1 << 17;
const int LOG = 18;

int n;
char s[N];
int sa[N];
int rank[LOG][N];
pair<ii, int> p[N];
vector<int> at[N];

bool in[N];
int par[N], sz[N];
ll sum2 = 0ll;

inline ll sqr(ll x){
    return x * x;
}

int get(int x){
    if(x == par[x])
        return x;
    return par[x] = get(par[x]);
}

void conn(int a,int b){
    a = get(a);
    b = get(b);
    if(a != b){
        if(sz[a] > sz[b])
            swap(a, b);
        if(in[a])
            sum2 -= sqr(sz[a]);
        if(in[b])
            sum2 -= sqr(sz[b]);
        par[a] = b;
        sz[b] += sz[a];
        sum2 += sqr(sz[b]);
        in[b] = true;
    }
}

void build_sa(){
    for(int i = 1; i <= n; i++)
        rank[0][i] = s[i] - 'a' + 1;
    for(int g = 0; g < LOG; g++){
        int d = 1 << g;
        for(int i = 1; i <= n; i++)
            p[i] = make_pair(ii(rank[g][i], (i + d <= n)? rank[g][i + d] : -1), i);
        sort(p + 1, p + 1 + n);
        int ptr = 1;
        for(int i = 1; i <= n; i++){
            if(i > 1 && p[i - 1].first != p[i].first)
                ++ptr;
            rank[g + 1][p[i].second] = ptr;
        }
    }
    for(int i = 1; i <= n; i++)
        sa[rank[LOG - 1][i]] = i;
    for(int i = 1; i < n; i++){
        int now = sa[i];
        int next = sa[i + 1];
        int lcp = 0;
        for(int j = LOG - 1; j >= 0; j--){
            int d = 1 << j;
            if(now + d - 1 <= n && next + d - 1 <= n && rank[j][now] == rank[j][next]){
                now += d;
                next += d;
                lcp += d;
            }
        }
        eprintf("lcp[%d] = %d\n", i, lcp);
        at[lcp].push_back(i);
    }
    #ifdef KAZAR
        for(int i = 1; i <= n; i++){
            eprintf("%s\n", s + sa[i]);
        }
    #endif // KAZAR
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    scanf(" %s", s + 1);

    n = strlen(s + 1);

    build_sa();

    for(int i = 1; i <= n; i++){
        par[i] = i;
        sz[i] = 1;
    }

    ll f2 = 0ll;
    for(int h = n; h > 0; h--){
        foreach(it, at[h]){
            int x = *it;
            conn(x, x + 1);
        }
        int pos = rank[LOG - 1][n - h + 1];
        if(get(pos) == pos && !in[pos]){
            in[pos] = true;
            sum2 += 1;
        }
        f2 += sum2;
    }

    ll ans = f2 + (ll)n * (n + 1) / 2ll;

    ans /= 2ll;

    cout << ans << endl;

    return 0;
}


