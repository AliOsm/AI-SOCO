#include <bits/stdc++.h>

using namespace std;

const int MAX_SIZE = 1e5 + 1;

int tree[3*MAX_SIZE];
int element[MAX_SIZE];

int gcd(int a, int b)
{
    if(a == b)
        return a;

    if(a == 0 || b == 0)
        return (a + b);

    return gcd(min(a, b), max(a, b)%min(a, b));
}


void build(int node, int start, int end)
{
    if(start == end)
    {
        tree[node] = element[start]; printf("T(%d) = %d\n", node, tree[node]);
        return;
    }

    int mid = (start + end)/2;

    build(2*node, start, mid);
    build(2*node + 1, mid + 1, end);

    tree[node] = gcd(tree[2*node], tree[2*node + 1]);printf("T(%d) = %d\n", node, tree[node]);
}

int get(int node, int start, int end, int query_start, int query_end)
{
    if(query_start > end || query_end < start)
        return 0;

    if(query_start <= start && end <= query_end)
        return tree[node];

    int mid = (start + end) >> 1;

    int left_ans = get(2*node, start, mid, query_start, query_end);
    int right_ans = get(2*node, mid + 1, end, query_start, query_end);

    return gcd(left_ans, right_ans);
}

void update(int node, int start, int end, int index, int value)
{
    if(start == end)
    {
        tree[node] = element[index] = value;
        return;
    }

    int mid = (start + end)/2;

    if(index >= start && index <= mid)
    {
        update(2*node, start, mid, index, value);
    }
    else if(index > mid && index <= end)
    {
        update(2*node + 1, mid + 1, end, index, value);
    }

    tree[node] = gcd(tree[2*node], tree[2*node + 1]);
}

int sum_of_digits(int n)
{
    int sum = 0;

    while(n)
    {
        sum += n%10;
        n /= 10;
    }

    return sum;
}

void solve()
{
    int number_of_taps, number_of_beds;
    scanf("%d %d", &number_of_beds, &number_of_taps);

    vector <int> tap(number_of_taps + 1, 0);
    for(int i = 1; i <= number_of_taps; i++)
        scanf("%d", &tap[i]);

    int time = tap[1];

    for(int i = 1; i < number_of_taps; i++)
    {
        int distance = tap[i + 1] - tap[i] + 1;

        int time_for_this_patch = distance/2 + distance%2 ;

        time = max(time, time_for_this_patch);
    }

    time = max(time, number_of_beds - tap.back() + 1);

    printf("%d\n", time);
}

int main()
{
    int no_of_test_cases;
    scanf("%d", &no_of_test_cases);

    while(no_of_test_cases--)
        solve();

    return 0;
}
