#include <bits/stdc++.h>

using namespace std;

#define ok printf("ok\n");
#define pf printf
#define sc scanf
#define br printf("\n")

#define scs(a) scanf("%s",a)
#define sc1(a) scanf("%d",&a)
#define sc2(a,b) scanf("%d %d",&a,&b)
#define sc3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define sc1l(a) scanf("%lld",&a)
#define sc2l(a,b) scanf("%lld %lld",&a,&b)
#define sc3l(a,b,c) scanf("%lld %lld %lld",&a,&b,&c)
#define sc1d(a) scanf("%lf",&a)
#define sc2d(a,b) scanf("%lf %lf",&a,&b)
#define sc3d(a,b,c) scanf("%lf %lf %lf",&a,&b,&c)
#define pfs(a) printf("%s",a)
#define pf1(a) printf("%d",a)
#define pf2(a,b) printf("%d %d",a,b)
#define pf1l(a) printf("%lld",a)
#define pf2l(a,b) printf("%lld %lld",a,b)
#define pf1d(a) printf("%lf",a)
#define pf2d(a,b) printf("%lf %lf",a,b)

#define pii pair<int,int>
#define pll pair<long long,long long>
#define mp make_pair
#define F first
#define S second
#define pb push_back

#define mem0(a) memset(a,0,sizeof(a))
#define mem1(a) memset(a,-1,sizeof(a))

#define read freopen("input.txt","r",stdin)
#define write freopen("output.txt","w",stdout)

long long inline gcd(long long x,long long y){return !y?(long long)abs(x):gcd(y,x%y);}  //returns always positive gcd
long long inline lcm(long long a,long long b){return ((long long)abs((a/gcd(a,b))*b));} //returns always positive lcm
double inline cartesian_dist(double x1,double y1,double x2,double y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}

long long bigmod(long long b,long long p,long long m){              //for both positive and negative base
    if(!p)return 1%m;
    else if(p&1)return (((b%m)+m)%m*bigmod(b,p-1,m))%m;
    else {long long ret=bigmod(b,p/2,m);return (ret*ret)%m;}
}
// inverse will exist if and only if gcd(a,m) is 1
long long inverse(long long a,long long m){return bigmod(a,m-2,m);}  //if Mod is prime
long long extended(long long a,long long m){
    long long oldr=a,r=m,oldans=1,ans=0,quotient;
    while(r){
        quotient=oldr/r;
        oldr=oldr-r*quotient;
        swap(oldr,r);
        oldans=oldans-ans*quotient;
        swap(oldans,ans);
    }
    return ((oldans%m)+m)%m;
}

//int inline set_bit(int mask,int i){return mask=mask|(1<<i);}
//int inline reset_bit(int mask,int i){return mask=mask&~(1<<i);}
//bool inline check_bit(int mask,int i){return mask&(1<<i);}

typedef long long ll;
const double PI=acos(-1.0);
const double eps=10E-12;

int n;
vector<ll>vecA,vecB;
ll arr[(int)1e5+9];

bool okay(ll giveAway,ll prefix[],ll len){
    if(giveAway>=0){
        if(giveAway%2==0)return binary_search(prefix,prefix+len,giveAway/2);
        return (binary_search(prefix,prefix+len,giveAway/2) || binary_search(prefix,prefix+len,(giveAway+1)/2));
    }
    return false;
}
bool okayModified(ll giveAway,ll prefix[],ll len,ll idx,ll idVal){
    if(giveAway>=0){
        if(giveAway%2==0)return (binary_search(prefix,prefix+idx+1,giveAway/2) || binary_search(prefix+min(idx+2,len),prefix+len,giveAway/2+idVal));
        return (
            binary_search(prefix,prefix+idx+1,giveAway/2) || binary_search(prefix+min(idx+2,len),prefix+len,giveAway/2+idVal)
            || binary_search(prefix,prefix+idx+1,(giveAway+1)/2) || binary_search(prefix+min(idx+2,len),prefix+len,(giveAway+1)/2+idVal)
        );
    }
    return false;
}
bool solveLeft(ll sumA,ll sumB,ll halfSum){
    ll prefix[vecA.size()+5];
    prefix[0]=0;
    for(int i=vecA.size()-1,j=1;i>=0;i--,j++)prefix[j]=prefix[j-1]+vecA[i];
    for(int i=vecA.size()-1,j=0;i>=0;i--,j++)if(okayModified(sumA-sumB,prefix,vecA.size()+1,j,vecA[i]))return true;
    for(int i=0;i<vecB.size();i++){
        ll newA=sumA+vecB[i];
        ll newB=sumB-vecB[i];
        ll giveAway=newA-newB;
        if(okay(giveAway,prefix,vecA.size()+1))return true;
    }
    return false;
}
bool solveRight(ll sumA,ll sumB,ll halfSum){
    ll prefix[vecB.size()+5];
    prefix[0]=0;
    for(int i=0,j=1;i<vecB.size();i++,j++)prefix[j]=prefix[j-1]+vecB[i];
    for(int i=0;i<vecB.size();i++)if(okayModified(sumB-sumA,prefix,vecB.size()+1,i,vecB[i]))return true;
    for(int i=0;i<vecA.size();i++){
        ll newA=sumA-vecA[i];
        ll newB=sumB+vecA[i];
        ll giveAway=newB-newA;
        if(okay(giveAway,prefix,vecB.size()+1))return true;
    }
    return false;
}
int main(){
    sc1(n);
    ll sum=0;
    for(int i=1;i<=n;i++){
        sc1l(arr[i]);
        sum+=arr[i];
    }
    if(sum&1){
        pf("NO\n");
        return 0;
    }
    ll halfSum=sum/2,left=0,right=0;
    for(int i=1;i<=n;i++){
        if(left+arr[i]<halfSum){
            left+=arr[i];
            vecA.pb(arr[i]);
        }
        else if(left+arr[i]==halfSum){
            pf("YES\n");
            return 0;
        }
        else{
            while(i<=n){
                right+=arr[i];
                vecB.pb(arr[i++]);
            }
        }
    }
    if(solveLeft(left,right,halfSum) || solveRight(left,right,halfSum)){
        pf("YES\n");
        return 0;
    }
    pf("NO\n");

    return 0;
}
