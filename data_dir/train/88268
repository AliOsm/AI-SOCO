/**/
#define _USE_MATH_DEFINES
#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define For(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += ((begin) > (end)?-1:1))
#define all( v ) (v).begin(),(v).end()
template<typename T> using V = vector<T>;
typedef long long int ll;
typedef unsigned long long int ull;
/***********************************************/
/*     /    / \
 *    /    /   \
 *    \   /    /
 *     \ /    /
 */
const ll mod = 1000000007;
bitset<100 * 1000 + 1> ip;
V<size_t> primes;
V<V<size_t> > sum;
size_t N;
void sieve(){
	ip.set();
	ip[0] = ip[1] = false;
	for(size_t i = 2;i <= N;i++){
		if(!ip[i])continue;
		primes.pb(i);
		for(size_t j = i;j * i <= N;j++){
			ip[i * j] = false;
		}
	}
}
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	cin>>N;
	if(N == 1){
		cout<<"0\n";
		return 0;
	}
	V<size_t> a(N),p(N+1);
	For(i,0,N){
		cin>>a[i];
		p[a[i]] = i;
	}
	if(N == 2){
		if(p[2] == 0)
			cout<<"1\n1 2";
		else cout<<"0\n";
		return 0;
	}
	sieve();
	sum.resize(N+1);
	sum[2] = {2};
	sum[3] = {3};
	For(i,0,primes.size()){
		For(j,i,primes.size()){
			if(primes[i] + primes[j] - 1 > N)break;
			sum[primes[i] + primes[j] - 1] = {primes[i],primes[j]};
			if(primes[i] + primes[j] <= N)sum[primes[i] + primes[j]] = {primes[i],primes[j],2};
		}
	}
	V<pair<size_t,size_t> > res;
	For(i,0,N){
		while(p[i+1] != i){
			V<size_t> cur = sum[p[i+1] + 1 - i];
			For(j,0,cur.size()){
				res.pb({p[i+1]+1,p[i+1]+2-cur[j]});
				swap(a[p[i+1]],a[p[i+1]+1-cur[j]]);
				swap(p[a[p[i+1]]],p[a[p[i+1]+1-cur[j]]]);
			}
		}
	}
	cout<<res.size()<<'\n';
	For(i,0,res.size())cout<<min(res[i].first,res[i].second)<<' '<<max(res[i].second,res[i].first)<<'\n';
	return 0;
}
/**/
