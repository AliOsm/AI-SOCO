#include "bits/stdc++.h"
#include "ext/pb_ds/tree_policy.hpp"
#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 110;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

const int maxn = 100010;
PLL pt[maxn];
int n;
ll ans;

inline ll dis(PLL a,PLL b){
    return sqr(a.fi-b.fi)+sqr(a.se-b.se);
}
inline void upd(ll temp){
    ans = min(ans,temp);
}

void solve(int l,int r){
    if(r-l<=1)return;
    int mid = (l+r)/2;
    solve(l,mid);solve(mid,r);
    inplace_merge(pt+l,pt+mid,pt+r);
    deque<PLL>q[2];
    REP(i,l,r){
        int isR=pt[i].se>=mid;
        q[isR].PB(pt[i]);
        for(const auto&o:q[isR^1])upd(dis(o,pt[i]));
        REP(j,0,2)
        while(sz(q[j])&&
            dis(q[j].front(),MP(pt[i].fi,mid))>=ans)q[j].pop_front();
    }
    return;
}
int main(){
    in(n);
    REP(i,0,n){
        in(pt[i].fi);pt[i].se=i;
        if(i)pt[i].fi+=pt[i-1].fi;
    }
    ans = dis(pt[0],pt[1]);
    REP(i,1,n){
        upd(dis(pt[i],pt[i-1]));
    }


    solve(0,n);
    cout<<ans<<endl;















}
