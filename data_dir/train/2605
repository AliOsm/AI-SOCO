#include<iostream>
#include<stdio.h>
#include<cassert>
#include<cstring>
#include<time.h>
#include<cstdlib>
#include<cmath>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
char s[33][33];
int n,m,g[44][44][44][44][2];
int T = 0;
int dfs(int la, int ra, int lb, int rb, int odd) {  
    if (la > ra || lb < rb) return 0;
    int &res = g[la][ra][lb + m][rb + m][odd];
    if (res != -1) return res;
    set<int> mex;
    for (int x = 0; x < n; x++) {
        for (int y = max(la - x,0); y <= min(ra - x,m - 1); y++) if (x - y <= lb && x - y >= rb && (x + y) % 2 == odd) {
            if (s[x][y] == 'R') {
                mex.insert(dfs(la,ra,lb,x - y + 1,odd) ^ dfs(la,ra,x - y - 1,rb,odd));
            } else if (s[x][y] == 'L') {
                mex.insert(dfs(la,x + y - 1,lb,rb,odd) ^ dfs(x + y + 1,ra,lb,rb,odd));
            } else {
                mex.insert(dfs(la,x + y - 1,lb,x - y + 1,odd) ^ dfs(la,x + y - 1,x - y - 1,rb,odd) ^ dfs(x + y + 1,ra,lb,x - y + 1,odd) ^ dfs(x + y + 1,ra,x - y - 1,rb,odd));
            }
        }
    }
    res = 0;
    while(mex.count(res)) res++;
    return res;
}
int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        scanf("%s",s[i]);
    }
    memset(g,-1,sizeof(g));
    int white = dfs(0,n + m - 2,n - 1,-m + 1,0);
    int black = dfs(0,n + m - 2,n - 1,-m + 1,1);
    //cout << white << " " << black << endl;
    puts((white ^ black) != 0 ? "WIN" : "LOSE");
    return 0;
}
