#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

template<typename T>
void out(T x) { cout << x << endl; exit(0); }
#define watch(x) cout << (#x) << " is " << (x) << endl

const int maxn = 1e6 + 5;

int q, x;

struct node {
  int lo, hi;
};

struct segtree {
  int n;
  vector<node> t;
  segtree() {}
  void init(int n) {
    this->n = n;
    t.resize(4*n + 10);
  }
  node merge(node a, node b) {
    node res;
    res.lo = min(a.lo, b.lo);
    res.hi = max(a.hi, b.hi);
    return res;
  }
  void incr(int v, int tl, int tr, int idx) {
    if (tl == tr) {
      t[v].lo++; t[v].hi++;
    } else {
      int tm = (tl+tr)/2;
      if (idx<=tm) {
	incr(2*v,tl,tm,idx);
      } else {
	incr(2*v+1,tm+1,tr,idx);
      }
      t[v] = merge(t[2*v], t[2*v+1]);
    }
  }
  node get(int v, int tl, int tr, int l, int r) {
    if (l > tr || r < tl) {
      node tmp;
      tmp.lo = 1e9; tmp.hi = -1;
      return tmp;
    } else if (l <= tl && tr <= r) {
      return t[v];
    } else {
      int tm = (tl+tr)/2;
      auto L = get(2*v,tl,tm,l,r);
      auto R = get(2*v+1,tm+1,tr,l,r);
      return merge(L,R);
    }
  }
};

segtree tree;

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);  cout.tie(0);

  cin>>q>>x;
  tree.init(x);

  while (q--) {
    int y; cin>>y;
    y = y % x;
    tree.incr(1,1,x,y+1); //1-index

    node all = tree.get(1,1,x,1,x);
    int modlo = all.lo;

    int lo = 1;
    int hi = x+1;
    while (hi - lo > 1) {
      int mid = (lo + hi) / 2;
      int plo = tree.get(1,1,x,1,mid).lo;
      if (plo > modlo) {
	lo = mid;
      } else {
	hi = mid;
      }
    }

    if (tree.get(1,1,x,1,lo).lo <= modlo) {
      lo = 0;
    }

    int ans = x*modlo + lo;
    cout<<ans<<"\n";
  }
  

  return 0;
}
