#include <bits/stdc++.h>
using namespace std;

typedef long long int lli;
typedef long double ld;
typedef complex<int> point;
#define pii pair<int,int>
#define mod 1000000007
#define S second
#define F first
#define B begin
#define E end
#define RE real
#define IM image
#define PB push_back
#define lasB(b) (b&(-b))
#define PI acos(-1.0)
#define EPS (1e-8)
#define N 100005

lli n,k,p,t,accodd,acceven;
vector<lli> eve,odd,idle_odd,idle_eve,oddtoeven;
bool idleness=0;

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    scanf("%I64d %I64d %I64d",&n,&k,&p);
    for(int i=0;i<n;i++)
    {
        scanf("%I64d",&t);
        if(t&1)
        {
            if(accodd<k-p)odd.PB(t),accodd++;
            else
            {
                idle_odd.PB(t);
                if(idle_odd.size()%2==0 &&acceven<p)
                {
                    oddtoeven.PB(idle_odd.back());idle_odd.pop_back();
                    oddtoeven.PB(idle_odd.back());idle_odd.pop_back();
                    ++acceven;
                }
            }
        }
        else
        {
            if(acceven<p)eve.PB(t),acceven++;
            else idle_eve.PB(t);
        }
    }
    if(idle_odd.size()&1||acceven<p||accodd<k-p)
        return cout<<"NO",0;
    puts("YES");
    for(auto u : odd)
    {
        lli cnt = 1;
        if(!idleness)cnt+=idle_eve.size()+idle_odd.size();
        printf("%I64d %I64d ",cnt,u);
        if(!idleness)
        {
            for(auto v : idle_odd)printf("%I64d ",v);
            for(auto v : idle_eve)printf("%I64d ",v);
            idleness=1;
        }
        printf("\n");
    }
    for(auto u : eve)
    {
        lli cnt = 1;
        if(!idleness)cnt+=idle_eve.size()+idle_odd.size();
        printf("%I64d %I64d ",cnt,u);
        if(!idleness)
        {
            for(auto v : idle_odd)printf("%I64d ",v);
            for(auto v : idle_eve)printf("%I64d ",v);
            idleness=1;
        }
        printf("\n");
    }
    for(int i=0;i<oddtoeven.size();i+=2)
    {
        lli cnt = 2;
        if(!idleness)cnt+=idle_eve.size()+idle_odd.size();
        printf("%I64d %I64d %I64d ",cnt,oddtoeven[i],oddtoeven[i+1]);
        if(!idleness)
        {
            for(auto v : idle_odd)printf("%I64d ",v);
            for(auto v : idle_eve)printf("%I64d ",v);
            idleness=1;
        }
        printf("\n");
    }
    return 0;
}
