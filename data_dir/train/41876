#include<iostream>
#include<vector>

#define PB push_back

using namespace std;

const int MAXN = 2e5 + 5;
vector<int> v[MAXN];
int ans[MAXN], sub[MAXN], s[MAXN][2];
bool mark[MAXN];

int DFS(int n, int t)
{
	mark[n] = true;
	int in = 0, MIN = 1e9, y = 0;
	for(int x : v[n])
		if(!mark[x])
		{
			ans[in++] = DFS(x, !t);
			sub[n] += sub[x];
			if(t == 0)
				MIN = min(MIN, sub[x] - ans[in - 1]);
			else
				y += ans[in - 1] - 1;
		}
	if(in == 0)
		return sub[n] = 1;
	if(t == 0)
		return sub[n] - MIN;
	if(t == 1)
		return y + 1;
}

int DFS2(int n, int t)
{
	mark[n] = true;
	int in = 0, MIN = 1e9, y = 0;
	for(int x : v[n])
		if(!mark[x])
		{
			int z = DFS2(x, !t);
			in++;
			if(t == 1)
				MIN = min(MIN, z);
			else
				y += sub[x] - z;
		}
	if(in == 0)
		return 1;
	if(t == 0)
		return sub[n] - y;
	if(t == 1)
		return MIN;
}

int main()
{
	int n;
	cin >> n;
	for(int i = 0; i < n - 1; i++)
	{
		int x, y;
		cin >> x >> y;
		x--, y--;
		v[x].PB(y);
		v[y].PB(x);
	}
	cout << DFS(0, 0) << ' ';
	fill(mark, mark + MAXN, 0);
	cout << DFS2(0, 0) << endl;
	return 0;
}
