#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

typedef long long            ll;
typedef unsigned long long   ull;
typedef vector<int>          vi;
typedef vector<ll>           vl;
typedef pair<int, int>       pi;
typedef pair<ll, ll>         pl;
typedef vector<pi>           vpi;
typedef vector<pl>           vpl;
typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define read        freopen("in.c", "r", stdin)
#define write       freopen("out.c", "w", stdout)
#define all(a)      a.begin(), a.end()
#define bye         exit(0)
#define mp          make_pair
#define ff          first
#define ss          second
#define L(x)        ((x) << 1)
#define R(x)        ((x) << 1 | 1)
#define SZ(a)       (ll)(a).size()
#define pb          push_back
#define eb          emplace_back
#define eps         1e-9
#define inf         (1000000000)
#define infl        (1000000000000000000LL)
#define cs(p)       printf("Case %d:", (p)++)
#define ptc(c)      putchar(c)
#define gtc()       getchar()
#define nl          puts("")
#define sp          printf(" ")
#define out(a)      printf("%lld", (ll)(a))
#define ots(s)      printf("%s", s)
#define SET(a)      memset((a), -1, sizeof(a))
#define CLR(a)      memset((a), 0, sizeof(a))
#define dbg(x)      cout << "--- " << #x << " = " << (x) << '\n'

ll bgm(ll a, ll b, ll m) {
    a %= m;
    ll rem = 1;
    while(b != 0) {
        if(b&1)
            rem = (rem * a) % m;
        a = (a * a)%m;
        b >>= 1;
    }
    return rem;
}

ll inv(ll a, ll mod) {
    return bgm(a, mod - 2, mod);
}

ll in() {
    ll a;
    assert(scanf("%lld", &a) != EOF);
    return a;
}

double dl() {
    double a;
    assert(scanf("%lf", &a) != EOF);
    return a;
}

const int MAX = 100000 + 5;
const int LEN = 30;
const ll MOD = 998244353LL;

double ttm;

string a, b;
int k;

string s;
int len;

ll po[LEN];

ll dp[20][2][2][2100];
ll dp2[20][2][2][2100];

ll aa, bb, cc;

ll solve2(int pos, int f, int st, int mask) {
    if(pos == len) {
        return (__builtin_popcount(mask) <= k);
    }
    ll &ret = dp2[pos][f][st][mask];
    if(ret != -1)
        return ret;
    int kk = s[pos] - '0';
    int lim = (f == 1) ? 9 : kk;
    ret = 0;
    for(int i = 0; i <= lim; i++) {
        ret = (solve2(pos + 1, f | (i < lim), st | (i != 0), (st == 0 and i == 0) ? mask : (mask | (1 << i))) + ret) % MOD;
    }
    return ret;
}

ll solve(int pos, int f, int st, int mask) {
    if(pos == len) {
        if(__builtin_popcount(mask) <= k)
            return 0;
        return MOD;
    }
    ll &ret = dp[pos][f][st][mask];
    if(ret != -1)
        return ret;
    ll now, kk = s[pos] - '0', sum = 0;
    ll lim = (f == 1) ? 9 : kk, z = 0, x;
    ret = 0;
    for(int i = 0; i <= lim; i++) {
        now = solve(pos + 1, f | (i < lim), st | (i != 0), (st == 0 and i == 0) ? mask : (mask | (1 << i)));
        if(now != MOD) {
            z = 1;
            ret = (ret + now) % MOD;
            x = solve2(pos + 1, f | (i < lim), st | (i != 0), (st == 0 and i == 0) ? mask : (mask | (1 << i)));
            x = (x * i) % MOD;
            x = (x * po[len - pos - 1]) % MOD;
            sum = (sum + x) % MOD;
        }
    }
    if(z != 0)
        ret = (ret + sum) % MOD;
    else
        ret = MOD;
    return ret;
}

ll get(string x) {
    s = x;
    len = SZ(s);
    SET(dp);
    SET(dp2);
    return solve(0, 0, 0, 0);
}

ll check(string x) {
    int bit = 0, mask = 0;
    ll num = 0;
    for(char p : x) {
        int k = p - '0';
        num = num * 10 + k;
        if((mask & (1 << k)) == 0) {
            mask |= (1 << k);
            ++bit;
        }
    }
    ll ret = (bit <= k) ? num : 0;
    return ret % MOD;
}

void make() {
    po[0] = 1;
    for(int i = 1; i < LEN; i++)
        po[i] = (10 * po[i - 1]) % MOD;
}

int main() {
    #ifndef ONLINE_JUDGE
        read, write;
        ttm = clock();
    #endif

    make();
    cin >> a >> b >> k;
    aa = get(a);
    bb = get(b);
    cc = check(a);
    out(((bb + cc - aa) % MOD + MOD) % MOD), nl;

    #ifndef ONLINE_JUDGE
        printf("Runtime = %lf seconds\n", (clock() - ttm)/1000.0);
    #endif

    return 0;
}
