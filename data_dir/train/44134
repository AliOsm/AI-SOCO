//#pragma GCC(optimize, "Ofast")
#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES

#include <bits/stdc++.h>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
const int INF = (int)(1e9+1e5);
const int64 LINF = (int64)(4e18);
const double EPS = 1e-7;
#define sq(x) ((x)*(x))
#define FAIL() ((*(int*)0)++)
const int MOD = 1000000007;

inline int add(int a, int b)
{
	a += b;
	if (a >= MOD)
	{
		a -= MOD;
	}
	return a;
}

inline int mul(int a, int b)
{
	return int64(a) * b % MOD;
}

const int MAXN = 300005;

int n, m;
vector <vector <int> > v;
vector <vector <int> > g;
int color[MAXN];
int tim[MAXN];
int mx = 1;

void init()
{
	scanf ("%d%d", &n, &m);
	g.resize(n + 1);
	v.resize(n + 1);
	//s.resize(n + 1);
	for (int i = 1; i <= n; i++)
	{
		int c; scanf ("%d", &c);
		mx = max(mx, c);
		v[i].resize(c);
		for (int j = 0; j < c; j++)
		{
			scanf ("%d", &v[i][j]);
		}
	}
	for (int i = 1; i < n; i++)
	{
		int a, b; scanf ("%d%d", &a, &b);
		g[a].push_back(b);
		g[b].push_back(a);
	}
}

void dfs(int v, int p)
{
	for (int i= 0; i < (int)g[v].size(); i++)
	{
		int to = g[v][i];
		if (to == p)
		{
			g[v].erase(g[v].begin() + i);
			break;
		}
	}
	for (int i = 0; i < (int)::v[v].size(); i++)
	{
		int t = ::v[v][i];
		if (color[t])
		{
			tim[color[t]] = v;
			//s[v].insert(color[t]);
		}
	}
	int ptr = 1;
	for (int i = 0; i < (int)::v[v].size(); i++)
	{
		int t = ::v[v][i];
		if (!color[t])
		{
			while (tim[ptr] == v)//s[v].count(ptr))
			{
				ptr++;
			}
			color[t] = ptr++;
		}
	}
	for (int i = 0; i < (int)g[v].size(); i++)
	{
		int to = g[v][i];
		dfs(to, v);
	}
}

void solve()
{
	init();
	dfs(1, 0);
	printf("%d\n", mx);
	for (int i = 1; i <= m; i++)
	{
		if (!color[i])
		{
			color[i] = 1;
		}
		printf("%d ", color[i]);
	}
}

int main()
{
	ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
	freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
#endif

	srand(333);
	//double st = clock();
	int t = 1; //scanf ("%d", &t);
	for (int i = 0; i < t; i++)
	{
		solve();
	}
	//fprintf(stderr, "%.2lf\n", (clock()- st) / CLOCKS_PER_SEC);

	return 0;
}
