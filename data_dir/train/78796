#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;
const int maxn = 3004;
multiset<ll> cost;
vector<ll> clist[maxn];
vector<int> order;
int n, m, p, c, taken, lptr;

ll ans = LLONG_MAX, curval;

bool trivial() {
	for (int i = 2; i <= m; i++) {
		if (clist[i].size() >= clist[1].size())
			return false;
	}
	return true;
}


bool comp(int x, int y) {
	return clist[x].size() < clist[y].size();
}

int main()
{
	fastread;
	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		cin >> p >> c;
		clist[p].pb(c);
		if (p != 1)
			cost.insert(c);
	}
	for (int i = 1; i <= m; i++)
		sort(clist[i].begin(), clist[i].end());
	if (trivial()) {
		cout << 0;
		return 0;
	}
	for (int i = 2; i <= m; i++) {
		if (!clist[i].empty())
			order.pb(i);
	}
	sort(order.begin(), order.end(), comp);
	while (lptr < order.size() && clist[order[lptr]].size() <= clist[1].size())
		lptr++;
	for (int i = lptr; i < order.size(); i++) {
		int pos = order[i];
		int take = (int)clist[pos].size() - (int)(clist[1].size() + 1) + 1;
		taken += take;
		for (int j = 0; j < take; j++) {
			curval += clist[pos][j];
			cost.erase(cost.find(clist[pos][j]));
		}
	}
	if (taken < 1) {
		curval += *cost.begin();
		cost.erase(cost.begin());
		taken = 1;
	}
	if (taken <= 1)
		ans = curval;
	for (int i = 2; i <= (n - clist[1].size()); i++) {
		taken -= (((int)order.size()) - lptr);
		for (int j = lptr; j < order.size(); j++) {
			int pos = order[j];
			int lastpos = (int)clist[pos].size() - (int)(clist[1].size() + i - 1) + 1;
			lastpos--;
			curval -= clist[pos][lastpos];
			cost.insert(clist[pos][lastpos]);
		}
		while (lptr < order.size() && clist[order[lptr]].size() <= (clist[1].size() + i - 1))
			lptr++;
		while (taken < i) {
			taken++;
			curval += *cost.begin();
			cost.erase(cost.begin());
		}
		if (taken <= i)
			ans = min(ans, curval);
	}
	cout << ans;
	return 0;
}