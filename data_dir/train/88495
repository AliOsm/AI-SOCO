#include <iostream>
#include <vector>
using namespace std;

const int MX = 200005;
int parent[MX];

void init() {
  for ( int i = 0; i < MX; ++i ) parent[i] = i;
}

int find(int x) {
  return parent[x] == x ? x : parent[x] = find(parent[x]);
}

void join(int x, int y) {
  int px = find(x);
  int py = find(y);
  if ( px >= py ) {
    parent[py] = px;
  } else {
    parent[px] = py;
  }
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  int n, q, x, v, op;
  while ( cin >> n ) {
    vector<int> cap(n), original;
    for ( auto &i : cap ) cin >> i;
    original = cap;
    init();
    cin >> q;
    while ( q-- ) {
      cin >> op;
      if ( op == 1 ) {
        cin >> x >> v; x--;
        while ( x < n && v > 0 ) {
          x = find(x);
          // cout << "x: " << x << endl;
          while ( x < n && cap[x] == 0 ) {
            join(x, x + 1);
            x++;
          }
          if ( x >= n ) break;
          // cout << "x2: " << x << endl;
          if ( v > cap[x] ) {
            v -= cap[x];
            cap[x] = 0;
          } else {
            cap[x] -= v;
            v = 0;
          }
        }
      } else {
        cin >> x; x--;
        cout << (original[x] - cap[x]) << '\n';
      }
    }
  }
  return 0;
}