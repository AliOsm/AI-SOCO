#include <iostream>
#include <cstring>

using namespace std;

const int N = 55;

int a[N];
int b[N];
long long f[N][5'005];
long long nf[N][5'005];

int main() {
  int n;
  cin >> n;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
  }
  for (int i = 0; i < n; ++i) {
    cin >> b[i];
  }
  b[n] = 0;
  for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
      if (a[j] > a[i] || (a[j] == a[i] && b[j] > b[i])) {
        swap(a[i], a[j]);
        swap(b[i], b[j]);
      }
    }
  }
  const long long inf = 10'000'000'000;
  for (int i = 0; i <= n; ++i) {
    for (int j = 0; j <= 5'000; ++j) {
      f[i][j] = inf;
    }
  }
  f[0][0] = 0;
  int l = 0;
  while (l < n) {
    int r = l;
    while (r < n && a[r] == a[l]) {
      ++r;
    }
    for (int i = 0; i <= n; ++i) {
      for (int j = 0; j <= 5'000; ++j) {
        nf[i][j] = inf;
      }
    }
    int den = 0;
    for (int k = l - 1; k < r; ++k) {
      for (int i = 0; i <= n; ++i) {
        int ni = i - (r - 1 - k);
        if (ni < 0) {
          continue;
        }
        ni += k - l + 1;
        if (ni > n) {
          continue;
        }
        for (int j = 0; j + den <= 5'000; ++j) {
          nf[ni][j + den] = min(nf[ni][j + den], f[i][j] + (long long)a[l] * (k - l + 1));
        }
      }
      den += b[k + 1];
    }
    memcpy(f, nf, sizeof f);
    l = r;
  }
  long long num = inf, den = 1;
  for (int i = 0; i <= n; ++i) {
    for (int j = 1; j <= 5'000; ++j) {
      if (f[i][j] == inf) {
        continue;
      }
      if (f[i][j] * den < num * j) {
        num = f[i][j];
        den = j;
      }
    }
  }
  num *= 1000;
  cout << (num + den - 1) / den << endl;
}
