/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 30-Aug-2018 01:29:02
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> inline void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 1e7 + 7;
const int inf = 1e9 + 7;

inline bool isp(int n) {
    int r = sqrt(1.0 * n);
    for (int i = 2; i <= r; i++) {
        if (n % i == 0) return false;
    }
    return true;
}

int acnt[N], bcnt[N], ccnt[N];
vector <int> A[100005], B[100005];

int solve() {
    vector <int> primes;
    FOR (i, 2, 3200) if (isp(i)) {
        primes.push_back(i);
    }

    int n, m; Int(n, m);
    FOR (i, 1, n) {
        int x; Int(x);
        for (int p : primes) {
            while (x % p == 0) {
                ++acnt[p], x /= p;
                A[i].push_back(p);
            }
        }
        if (x > 1) ++acnt[x], A[i].push_back(x);
    }
    FOR (i, 1, m) {
        int x; Int(x);
        for (int p : primes) {
            while (x % p == 0) {
                ++bcnt[p], x /= p;
                B[i].push_back(p);
            }
        }
        if (x > 1) ++bcnt[x], B[i].push_back(x);
    }

    FOR (i, 1, 10000000) {
        ccnt[i] = min(acnt[i], bcnt[i]);
        acnt[i] = bcnt[i] = 0;
    }

    vector <int> num, den;

    FOR (i, 1, n) {
        int x = 1;
        for (int val : A[i]) {
            ++acnt[val];
            if (acnt[val] > ccnt[val]) x *= val;
        }
        num.push_back(x);
    }

    FOR (i, 1, m) {
        int x = 1;
        for (int val : B[i]) {
            ++bcnt[val];
            if (bcnt[val] > ccnt[val]) x *= val;
        }
        den.push_back(x);
    }

    printf("%d %d\n", len(num), len(den));
    FOR (i, 0, len(num) - 1) printf("%d ", num[i]);
    printf("\n");
    FOR (i, 0, len(den) - 1) printf("%d ", den[i]);
    printf("\n");

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; //Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}