// only miss the sun when it starts to snow

#include<bits/stdc++.h>

#define F first
#define S second
#define PB push_back
#define sz(s) int((s).size())
#define bit(n,k) (((n)>>(k))&1)

using namespace std;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;

const int maxn=2e5+10,mod=1e9+7;
const ll inf=1e18;

ll dp1[maxn], dp2[maxn];
pll a[maxn];

int main(){
    ios_base::sync_with_stdio(false);cin.tie(0);

    int n; cin>>n;

    for(int i=0;i<n;i++){
	cin>>a[i].S>>a[i].F;
    }
    sort(a,a+n);

    dp1[n]=1e18;
    
    for(int i=n-1;i>=0;i--){
	int id= lower_bound(a+i, a+n, (pll){a[i].S, -1} ) - a;
	
	if(id==n){
	    dp1[i]= a[i].F;
	    dp2[i]= 1;
	}
	else{
	    dp1[i]= a[i].F - a[i].S + dp1[id];
	    dp2[i]= dp2[id];
	}
	if(dp1[i] == dp1[i+1]){
	    dp2[i]=(dp2[i] + dp2[i+1]) %mod;
	}
	else if(dp1[i] > dp1[i+1]){
	    dp1[i]= dp1[i+1];
	    dp2[i]= dp2[i+1];
	}
    }
    return cout<<dp2[0]<<endl,0;
}
// Deathly mistakes:
//  * Read the problem curfully.
//  * Check maxn.
//  * Overflows.


// #pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
