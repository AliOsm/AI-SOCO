#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
#define INF 500000000
int n;
int arr[310][310];
int pdp[310][310]; // q i on
int ndp[310][310];
int mv[4][4]={{1,0,1,0},
              {1,0,0,1},
              {0,1,0,1},
              {0,1,1,0}
             };
int main(){
  scanf("%d",&n);
  for(int i=0;i<n;++i)
   for(int j=0;j<n;++j)scanf("%d",&arr[i][j]);
  for(int i=0;i<n;++i)
   for(int j=0;j<n;++j)pdp[i][j]=-INF;
  pdp[0][0]=arr[0][0];
  for(int lev=1;lev<=2*(n-1);++lev){
   for(int i=0;i<n;++i)
    for(int j=0;j<n;++j)
     ndp[i][j]=-INF;
   int x1,y1,x2,y2;
   int nx1,ny1,nx2,ny2 , tmp;

   --lev;
   for(int i=0;i<n;++i){
    x1=i; y1=lev-i;
    if(x1<0 || y1<0 || x1>=n || y1>=n)continue;
    for(int j=0;j<n;++j){
     x2=j; y2=lev-j;
     if(x2<0 || y2<0 || x2>=n || y2>=n)continue;
     tmp = pdp[x1][x2];
     if(tmp == -INF)continue;
     for(int p=0;p<4;++p){
      nx1 = x1+mv[p][0]; ny1=y1+mv[p][1];
      nx2 = x2+mv[p][2]; ny2=y2+mv[p][3];
      //cout<<nx1<<' '<<nx2<<' '<<ny1<<' '<<ny2<<endl;
      if(nx1<n && ny1<n && nx2<n && ny2<n){
       if(nx1!=nx2 || ny1!=ny2)relaxMax(ndp[nx1][nx2] , tmp + arr[nx1][ny1] + arr[nx2][ny2]);
       else relaxMax(ndp[nx1][nx2] , tmp + arr[nx1][ny1]);
                                          }
                         }
                        }
                       }
   ++lev;

   //cout<<ndp[0][1]<<endl;
   //system("pause");
   for(int i=0;i<n;++i)
    for(int j=0;j<n;++j)
     pdp[i][j] = ndp[i][j];
                                   }
  printf("%d\n" , pdp[n-1][n-1]);
  return 0;
}
