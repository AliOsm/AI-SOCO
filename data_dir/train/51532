#include <bits/stdc++.h>
using namespace std;
const int N = 1e5+50;
int n,lp[N],ans,dp[26][3*N];
string pat;
struct e{int to;string s;};
vector<vector<e> >adj(N);
void dfs(int i,int p)
{
    if(p==pat.size())return;
    for(auto u:adj[i])
    {
        int nxt=p;
        for(int j=0;j<u.s.size();j++)
        {
            int &x=dp[u.s[j]-'a'][nxt];
            if(x==-1)
            {
                while(nxt&&pat[nxt]!=u.s[j])nxt=lp[nxt-1];
                x=nxt;
            }
            nxt=x;
            if(pat[nxt]==u.s[j])nxt++;
            if(nxt==pat.size())ans++,nxt=lp[nxt-1];
        }
        dfs(u.to,nxt);
    }
}
int main()
{
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    cin>>n;
    int u;
    string x;
    for(int i=2;i<=n;i++)
    {
        cin>>u>>x;
        adj[u].push_back({i,x});
    }
    cin>>pat;
    for(int i=1,k=0;i<pat.size();i++)
	{
		while(k>0&&pat[k]!=pat[i])k=lp[k-1];
		if(pat[k]==pat[i])lp[i]=++k;
		else lp[i]=k;
	}
	memset(dp,-1,sizeof dp);
    dfs(1,0);
    cout<<ans;
}
