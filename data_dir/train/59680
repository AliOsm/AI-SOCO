#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<ll, ll> pii;

#define fi first
#define se second
#define mp make_pair
#define fastIO ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

bool Q;

struct Line{
    ll a;
    ll b;
    mutable ll p;
    bool operator< (const Line &T) const {
        if(Q) return p < T.p;
        else return a < T.a;
    }
};

const ll inf = (ll)4e18;

struct Hull : multiset<Line>{
    bool check(iterator l1, iterator l2){
        if(l2 == end()){
            l1->p = inf;
            return false;
        }
        if(l1->a == l2->a){
            if(l1->b > l2->b){
                l1->p = inf;
            }
            else{
                l1->p = -inf;
            }
        }
        else{
            l1->p = (l1->b - l2->b)/(l2->a - l1->a);
        }
        return l1->p >= l2->p;
    }

    void add(ll ai, ll bi){
        Q=false;
        auto it = insert({ai, bi, 0});
        auto nx = it;
        ++ nx;
        while(check(it,nx))
            nx=erase(nx);
        while(it != begin()){
            auto pv = it;
            -- pv;
            if(pv->p >= it->p){
                check(pv,it);
                erase(it);
                it=pv;
            }
            else{
                break;
            }
        }

    }

    ll query(ll vl){
        Q=true;
        auto it = lower_bound({0,0,vl});
        return vl * it->a + it->b;
    }
};

Hull lines;

const int N = (int)1e6 + 9;
ll dp[N];

struct Rect{
    ll xi;
    ll yi;
    ll ai;
    bool operator<(const Rect &T) const {
        return xi < T.xi;
    }
};

int main(){
    fastIO;
    int n;
    cin >> n;
    Rect rs[n];
    for(int i = 0 ; i < n; i ++ ){
        cin >> rs[i].xi >> rs[i].yi >> rs[i].ai;
    }
    sort(rs, rs + n);
    dp[0] = rs[0].xi * rs[0].yi - rs[0].ai;
    lines.add(-rs[0].xi, dp[0]);
    for(int i = 1; i < n; i ++ ){
        dp[i] = lines.query(rs[i].yi) - rs[i].ai + rs[i].xi * rs[i].yi;
        dp[i] = max(dp[i], rs[i].xi * rs[i].yi - rs[i].ai);
        lines.add(-rs[i].xi, dp[i]);
    }
    ll answ = 0;
    for(int i = 0 ; i < n ; i ++ ){
        answ = max(answ, dp[i]);
    }
    cout << answ << "\n";
    return 0;
}
