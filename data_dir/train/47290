#include <stdio.h>

int n, m, k;

char s[105][105][105];

bool u[105][105][105];

bool p[105][105][105];

int dx[] = {1, 0, 0};
int dy[] = {0, 1, 0};
int dz[] = {0, 0, 1};

inline bool goes (int x0, int y0, int z0, int x1, int y1, int z1){
   for (int d = 0; d < 3; ++ d){
      if (x0 + dx[d] == x1 && y0 + dy[d] == y1 && z0 + dz[d] == z1){
         return 1;
      }
   }

   return 0;
}

void dfs (int x, int y, int z){
   u[x][y][z] = 1;

   for (int d1 = 0; d1 < 3; ++ d1){
      int nx1 = x + dx[d1];
      int ny1 = y + dy[d1];
      int nz1 = z + dz[d1];

      if (nx1 == n || ny1 == m || nz1 == k || s[nx1][ny1][nz1] == '0'){
         continue;
      }

      if (!u[nx1][ny1][nz1]){
         dfs (nx1, ny1, nz1);
      }

      for (int d2 = 0; d2 < 3; ++ d2){
         int nnx = nx1 + dx[d2];
         int nny = ny1 + dy[d2];
         int nnz = nz1 + dz[d2];

         if (nnx == n || nny == m || nnz == k || s[nnx][nny][nnz] == '0'){
            continue;
         }

         bool ck = 1;

         for (int d3 = 0; d3 < 3; ++ d3){
            int nx2 = x + dx[d3];
            int ny2 = y + dy[d3];
            int nz2 = z + dz[d3];

            if (d1 == d3 || nx2 == n || ny2 == m || nz2 == k || s[nx2][ny2][nz2] == '0'){
               continue;
            }

            if (goes (nx2, ny2, nz2, nnx, nny, nnz)){
               ck = 0;
            }
         }

         p[nx1][ny1][nz1] |= ck;
      }

   }

}

int main (){
   scanf ("%d %d %d", &n, &m, &k);

   for (int i = 0; i < n; ++ i){
      for (int j = 0; j < m; ++ j){
         scanf ("%s", s[i][j]);
      }
   }

   for (int i = 0; i < n; ++ i){
      for (int j = 0; j < m; ++ j){
         for (int ii = 0; ii < k; ++ ii){
            if (s[i][j][ii] == '1' && !u[i][j][ii]){
               dfs (i, j, ii);
            }
         }
      }
   }

   int res = 0;

   for (int i = 0; i < n; ++ i){
      for (int j = 0; j < m; ++ j){
         for (int ii = 0; ii < k; ++ ii){
            res += p[i][j][ii];
         }
      }
   }

   printf ("%d", res);
   return 0;
}
