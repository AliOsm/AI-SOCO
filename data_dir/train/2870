#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define repr(i,x,y) for (__typeof(x) i=x;i>=y;i--)
#define rep(i,x,y) for (__typeof(x) i=x;i<=y;i++)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

/* Print pair */
template <typename T,typename S>
ostream & operator << (ostream &os , const pair<T,S> &v) {
    os << "(" ;
    os << v.first << "," << v.second << ")" ;
    return os ;
}
/* Print vector */
template <typename T>
ostream & operator << (ostream &os , const vector<T> &v) {
    os << "[" ;
    int sz = v.size() ;
    for(int i = 0 ; i < sz ; ++i) {
        os << v[i] ;
        if(i!=sz-1)os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print set */
template <typename T>
ostream & operator << (ostream &os , const set<T> &v) {
    T last = *v.rbegin() ;
    os << "[" ;
    for(auto it : v) {
        os << it  ;
        if(it != last) os << "," ;
    }
    os << "]\n" ;
    return os ;
}
/* Print Map */
template <typename T,typename S>
ostream & operator << (ostream &os , const map<T,S> &v) {
    for(auto it : v) {
        os << it.first << " : " << it.second << "\n" ;
    }
    return os ;
}
int power(int a , int b)
{
    int res = 1 ;
    while(b)
    {
        if(b%2) {
            res = (res * a) % mod ;
        }
        b/=2 ;
        a = (a*a) % mod ;
    }
    return res ;
}

//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
        cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

const int N = 1e5 + 1 ; 
struct node {
    int mx ; node *l , *r ; 
    node(int a , node* L , node* R) {
        mx = a , l = L , r = R ; 
    }   
};

node* roots[N] ;

int query(node* root , int l , int r , int s , int e) {
    if(r < s || l > e || root == NULL) return 0 ; 
    if(l >= s && r <= e) return root->mx ; 
    int m = (l + r) >> 1 ; 
    return max(query(root->l , l , m , s , e) , query(root->r , m + 1 , r , s , e)) ; 
}

void update(node* root , int l , int r , int idx , int val) {
    if(l == r) {
        root->mx = max(root->mx , val) ; return ;  
    }
    int m = (l + r) >> 1 ;
    if(root->l == NULL) root->l = new node(0,NULL,NULL) ; 
    if(root->r == NULL) root->r = new node(0,NULL,NULL) ;
    if(idx <= m) {
        update(root->l , l , m , idx , val) ;  
    }
    else {
        update(root->r , m + 1 , r , idx , val) ;  
    }
    root->mx = max(root->l->mx , root->r->mx) ;
}

int32_t main()
{
    fast;
    int nodes , edges ; 
    cin >> nodes >> edges ; 
    for(int i = 1 ; i <= nodes ; ++i) roots[i] = new node(0,NULL,NULL) ;
    while(edges--) {
        int u , v , w ; cin >> u >> v >> w ; 
        int len = query(roots[u] , 0 , N , 0 , w - 1) ; 
        update(roots[v] , 0 , N , w , len + 1) ; 
    }
    int ans = roots[1]->mx ; 
    for(int i = 2 ; i <= nodes ; ++i) {
        ans = max(ans , roots[i]->mx) ; 
    }
    cout << ans << endl ;
    return 0;
}
