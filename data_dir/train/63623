#include<bits/stdc++.h>
#include <regex>
#include<ext/numeric>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define WHITE -1
#define GREY   0
#define BLACK  1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)
#define MP make_pair

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<ll> vll;
//typedef unsigned int ui;

typedef complex<double> point;
#define X real()
#define Y imag()
#define vec(a,b) ((b)-(a))
#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define colliner pointOnLine
#define same(a,b) (lengthSqr(vec(a,b))<EPS)
#define lengthSqr(v) (dot(v,v))

const double PI = acos(-1.0);

int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

int DX[] = { 1, 1, -1, -1, 2, 2, -2, -2 };
int DY[] = { 2, -2, 2, -2, 1, -1, 1, -1 };

const int MAX = 105, MOD = 1e9 + 7, oo = (1 << 30);
const ll OO = 1ll << 60;
const double EPS = 1e-9;

int n, k, x, c[MAX], p[MAX], l[MAX], r[MAX];

int findSet(int x) {
	return p[x] == x ? x : p[x] = findSet(p[x]);
}

bool sameSet(int u, int v) {
	return findSet(u) == findSet(v);
}

void unionSet(int u, int v) {
	if (sameSet(u, v))
		return;
	int s1 = findSet(u), s2 = findSet(v);
	l[s1] = min(l[s1], l[s2]);
	r[s1] = max(r[s1], r[s2]);
	p[s2] = s1;
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
//	freopen("IN.in", "r", stdin);
//	freopen("OUT.txt", "w", stdout);
#endif
	scanf("%d%d%d", &n, &k, &x);
	for (int i = 1; i <= n; ++i) {
		p[i] = l[i] = r[i] = i;
		scanf("%d", &c[i]);
		if (c[i] == c[i - 1])
			unionSet(i, i - 1);
	}
	int out = 0;
	for (int i = 1; i <= n; i = r[findSet(i)] + 1) {
		int s = findSet(i);
		int ans = 0;
		if (r[s] - l[s] + 1 > 1 && c[i] == x) {
			ans += r[s] - l[s] + 1;
			for (int R = r[s] + 1, L = l[s] - 1; R <= n && L;) {
				int s1 = findSet(R), s2 = findSet(L);
				if (c[R] != c[L] || r[s1] - l[s1] + r[s2] - l[s2] + 2 < 3)
					break;
				ans += r[s1] - l[s1] + r[s2] - l[s2] + 2;
				R = r[s1] + 1, L = l[s2] - 1;
			}
		}
		out = max(out, ans);
	}
	cout << out;
}
