#include <iostream>
#include <cstdio>
#include <string>
#include <algorithm>
#include <cctype>
#include <cstring>
#include <vector>
#include <sstream>
#include <set>
#include <ctime>
#include <queue>
#include <map>
#include <stack>
#include <cmath>
using namespace std;
typedef long long LL;
const int N = 100005;
LL sqr (LL x) {
    return x * x;
}
struct Point {
    LL x , y;
    LL dist (Point &p) {
        return sqr (x - p.x) + sqr (y - p.y);
    }
}p[N];
LL ans = 1LL << 50 , s[N];
int u , v , id[N];
//先把点按x排序，之后分治O(n lgn)
bool cmpx (int i , int j) {
    return p[i].x < p[j].x;
}
bool cmpy (int i , int j) {
    return p[i].y < p[j].y;
}
void update (int i , int j) {
    LL d = p[i].dist (p[j]);
    if (d < ans) ans = d , u = i , v = j;
}
int a[N];
void gao (int l , int r) {
    if (r - l < 3) {
        for (int i = l ; i < r ; i ++) {
            for (int j = i + 1 ; j <= r ; j ++)
                update (id[i] , id[j]);
        }
        return ;
    }
    int m = (l + r) >> 1;
    gao (l , m);
    gao (m + 1 , r);
    int cnt = 0 , xx = p[id[m]].x;
    for (int i = l ; i <= r ; i ++) {
        if (sqr(p[id[i]].x - xx) <= ans)
            a[cnt ++] = id[i];
    }
    sort (a , a + cnt , cmpy);
    for (int i = 0 , j = 0 ; i < cnt ; i ++) {
        while (ans <= sqr (p[a[j]].y - p[a[i]].y) && j < i)
            j ++;
        for (int k = j ; k < i ; k ++) {
            update (a[k] , a[i]);
        }
    }
}
int main(){
#ifndef ONLINE_JUDGE
    freopen ("input.txt" , "r" , stdin);
    // freopen ("output.txt" , "w" , stdout);
#endif
    int n ;
    scanf ("%d" , &n);
    for (int i = 1 ; i <= n ; i ++) {
        scanf ("%d" , &a[i]);
        s[i] = s[i - 1] + a[i];
        p[i - 1].x = i;
        p[i - 1].y = s[i];
        id[i - 1] = i - 1;
    }
    sort (id , id + n , cmpx);gao(0 , n - 1);
    printf("%I64d\n", ans);  
    return 0;
}