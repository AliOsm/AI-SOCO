#include<bits/stdc++.h>
using namespace std;

#define fi(i,a,b)    for(long long i=a;i<=b;i++)
#define fr(i,a)      for(long long i=0;i<a;i++)
#define fd(i,a,b)    for(long long i=b;i>=a;i--)
#define clr(x)       memset(x,0,sizeof(x))
#define cln(x)       memset(x,-1,sizeof(x))
#define __           printf(" ")
#define _            printf("\n")
#define _o           printf("1\n")
#define stree        long long lft=node<<1,rht=(node<<1)|1,mid=(s+e)>>1
#define mod          1000000007
#define read()       freopen("in.txt","r",stdin)
#define write()      freopen("out.txt","w",stdout)
#define sfl(x)       scanf("%I64d",&x)
#define sfll(x,y)    scanf("%I64d %I64d",&x,&y)
#define sflll(x,y,z) scanf("%I64d %I64d %I64d",&x,&y,&z)
#define pfl(x)       printf("%I64d",x)
#define pfll(x,y)    printf("%I64d %I64d",x,y)
#define pflll(x,y,z) printf("%I64d %I64d %I64d",x,y,z)
#define xx           100000

long long mx[2020][2020][2];
long long r[2020][2020][2];
long long n,a[2020];


void find_(){
    clr(mx);
    fi(i,1,n){
       mx[i][i][a[i]]=1;
       if(a[i]==1) mx[i][i][2]=1;
       fi(j,i+1,n){
          if(a[j]==1) {
                mx[i][j][1]=mx[i][j-1][1]+1;
                mx[i][j][2]=max(mx[i][j-1][2],mx[i][j][1]);
          }
          else{
             mx[i][j][1]=mx[i][j-1][1];
             mx[i][j][2]=mx[i][j-1][2]+1;
          }
       }
    }
    clr(r);
    fd(j,1,n){
       r[j][j][a[j]]=1;
       if(a[j]==1) r[j][j][2]=1;
       fd(i,1,j-1){
          if(a[i]==1) {
                r[i][j][1]=r[i+1][j][1]+1;
                r[i][j][2]=max(r[i+1][j][2],r[i][j][1]);
          }
          else{
             r[i][j][1]=r[i+1][j][1];
             r[i][j][2]=r[i+1][j][2]+1;
          }
       }
    }
    return;

}



main(){
    //read();
    long long q[2020];
    sfl(n);
    fi(i,1,n) sfl(a[i]);
    q[n+1]=0;
    fd(i,1,n) if(a[i]==2) q[i]=q[i+1]+1;
              else q[i]=q[i+1];
    //fi(i,1,n) cout<<q[i]<<" ";_;
    find_();

    long long ans=mx[1][n][2];
//    cout<<q[4]<<endl;
//    cout<<mx[1][1][1]<<endl;
//    cout<<r[2][3][2]<<endl;

    fi(i,1,n) fi(j,i,n){
       long long cur=mx[1][i-1][1]+r[i][j][1]+mx[j+1][n][2];
       cur=max(cur,mx[1][i-1][2]+q[i]);
       cur=max(cur,mx[1][i-1][1]+r[i][j][2]+q[j+1]);
       ans=max(cur,ans);
    }
    cout<<ans<<endl;

    return 0;
}
