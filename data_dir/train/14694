/*	 Hello World!	*/

#include <bits/stdc++.h>

#define pb push_back
#define pf push_front
#define mp make_pair
#define f first
#define s second
#define let(x,a) __typeof(a) x(a)
#define all(a) (a).begin(),(a).end() 
#define endl '\n'
#define present(c,x) ((c).find(x) != (c).end()) 
#define tr(v,it) for( let(it,v.begin()) ; it != v.end() ; it++)
#define rtr(v,it) for( let(it,v.rbegin()) ; it != v.rend() ; it++)
#define rep1(i,n) for(int i=0; i<(int)n;i++)
#define rep2(i,a,b) for(int i=(int)a; i<=(int)b; i++)

#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#define LL long long int
#define PII pair<int,int>
#define VI vector<int>
#define inf INT_MAX

using namespace std;

void FastIO()
{
	ios_base::sync_with_stdio(0);
	cin.tie(NULL);
	cout.tie(NULL);
}

vector< vector<int> > shortestPath;
vector< vector<int> > V;

void bfs(int pos)
{
	queue<int> q;
	q.push(pos);
	shortestPath[pos][pos]=0;
	while(!q.empty())
	{
		int p=q.front();
		q.pop();
		for(int i=0;i<V[p].size();i++)
		{
			int t=V[p][i];
			if(shortestPath[pos][t]==inf)
			{
				q.push(t);
			}
			shortestPath[pos][t]=min(shortestPath[pos][t],shortestPath[pos][p]+1);
		}
	}
}

int main()
{
	FastIO();
	int n,m,s1,t1,l1,s2,t2,l2,a,b;
	cin>>n>>m;
	shortestPath.assign(n+1,vector<int>(n+1,inf));
	V.assign(n+1,vector<int>());
	rep1(i,m)
	{
		cin>>a>>b;
		V[a].pb(b);
		V[b].pb(a);
	}
	cin>>s1>>t1>>l1>>s2>>t2>>l2;
	for(int i=1;i<=n;i++)
	{
		bfs(i);
	}
	if(shortestPath[s1][t1]>l1 || shortestPath[s2][t2]>l2)
	{
		cout<<"-1"<<endl;
		return 0;
	}
	int ans=m-(shortestPath[s1][t1]+shortestPath[s2][t2]);
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=n;j++)
		{
			if(shortestPath[s1][i]+shortestPath[i][j]+shortestPath[j][t1]<=l1 &&
				shortestPath[s2][i]+shortestPath[i][j]+shortestPath[j][t2]<=l2)
			{
				ans=max(ans,m-shortestPath[s1][i]-shortestPath[i][j]-shortestPath[j][t1]-shortestPath[s2][i]-shortestPath[j][t2]);
			}
			swap(s1,t1);
			if(shortestPath[s1][i]+shortestPath[i][j]+shortestPath[j][t1]<=l1 &&
				shortestPath[s2][i]+shortestPath[i][j]+shortestPath[j][t2]<=l2)
			{
				ans=max(ans,m-shortestPath[s1][i]-shortestPath[i][j]-shortestPath[j][t1]-shortestPath[s2][i]-shortestPath[j][t2]);
			}
			swap(s1,t1);
		}
	}
	cout<<ans<<endl;
	return 0;
}