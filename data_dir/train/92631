#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;


int main()
{
  finp;
  
  int h,m,s,t1,t2;
  cin>>h>>m>>s>>t1>>t2;

  if(h==12)h=0;
  if(t1==12)t1=0;
  if(t2==12)t2=0;

 
 

  if((t1==h || t2==h) && m==0 && s==0) 
  {
    cout<<"NO";
    return 0;
  }

  if((t1*5==m || t2*5==m) && s==0)
  {
    cout<<"NO";
    return 0;
  }
  if(t1*5==s || t2*5==s)
  {
    cout<<"NO";
    return 0;
  }

  int curr = t1-1;
  if(curr == -1)curr = 11;

  int cnt = 0;
  while(1)
  {
  
    if(h==curr)cnt++;
    if(m>=curr*5 && m<(curr+1)*5)cnt++;
    if(s>=curr*5 && s<(curr+1)*5)cnt++;
    if(curr == t2)break;
    curr--;
    if(curr == -1)curr = 11;
  }

  assert(cnt <= 3);
  if(cnt==0 || cnt==3)cout<<"YES";
  else cout<<"NO";
return 0;
}