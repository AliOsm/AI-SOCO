#include <bits/stdc++.h>
#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define mp make_pair
#define mt make_tuple

using namespace std;

typedef pair<int, int> ii;
typedef long long ll;

typedef tuple<int, int, int, int, int, int, int, int, int, int> state;

//map<state, ll> pd[2][110];

const state zero = mt(0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
ll n;
int m;

ll pd[110][500010];
int sz[10], f[10], tot = 0;

int idx(int c[10])
{
	int ret = 0;
	for (int i = 0; i < 10; i++)
		ret += c[i] * sz[i];
	return ret;
}

ll solve(int r, int c[10])
{
	int cnt = 0;
	for (int i = 0; i < 10; i++)
		cnt += c[i];
	
	if (cnt == 0)
	{
		if (r == 0)
			return 1;
		return 0;
	}

	int pos = idx(c);

	if (pd[r][pos] != -1)
		return pd[r][pos];

	ll ret = 0;
	int start = (cnt == tot);
	for (int i = start; i <= 9; i++)
	{
		if (c[i])
		{
			c[i]--;
			ret += solve((r*10 + i)%m, c);
			c[i]++;
		}
	}
	return pd[r][pos] = ret;
}

int main()
{
	scanf("%lld %d", &n, &m);
	while (n)
	{
		int d = n%10;
		f[d]++;
		tot++;
		n /= 10;
	}
	sz[9] = 1;
	for (int i = 8; i >= 0; i--)
		sz[i] = (f[i+1]+1) * sz[i+1];
	memset(pd, -1, sizeof(pd));	
	printf("%lld\n", solve(0, f));
	return 0;
}
