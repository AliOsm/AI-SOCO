#include <bits/stdc++.h>
using namespace std;

const int MAX = 505;
const int INF = 2e9;
int n, m, k, q, a[MAX][MAX], t[MAX][MAX];

struct data {
	int f, c, t;

	bool operator < (const data &d) const {
		return t < d.t;
	}
} e[MAX * MAX];

bool f(int p) {
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			a[i][j] = 1;
			t[i][j] = 0;
		}
	}

	for(int i = 1; i <= q; i++) {
		if(e[i].t <= p) {
			if(a[e[i].f][e[i].c] > 0)
				a[e[i].f][e[i].c]--;
		}
	}

	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			t[i][j] = t[i - 1][j] + t[i][j - 1] - t[i - 1][j - 1] + a[i][j];
		}
	}

	for(int i = k; i <= n; i++) {
		for(int j = k; j <= m; j++) {
			int s = t[i][j] - t[i][j - k] - t[i - k][j] + t[i - k][j - k];

			if(s == 0)
				return 1;
		}
	}

	return 0;
}

int main() {
	scanf("%d%d%d%d", &n, &m, &k, &q);

	vector <int> v;
	for(int i = 1; i <= q; i++) {
		scanf("%d%d%d", &e[i].f, &e[i].c, &e[i].t);
		v.push_back(e[i].t);
	}

	sort(v.begin(), v.end());
	auto it = unique(v.begin(), v.end());
	v.erase(it, v.end());

	int st = 0, nd = v.size() - 1, ans = INF;
	while(st <= nd) {
		int mid = (st + nd) >> 1;

		if(f(v[mid])) {
			ans = min(ans, v[mid]);
			nd = mid - 1;
		}

		else st = mid + 1;
	}

	if(ans == INF)
		ans = -1;

	printf("%d\n", ans);
	return 0;
}