#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <functional>
using namespace std;
#define ll long long
#define mp make_pair
#define pb push_back
//#define ld long double
const double sn = 1e-6;
int n, k, q;
const int siz = 200005;
int tree[siz * 3];
int lazy[siz * 3];
void up(int node, int s, int e, int l, int r, int val) {
	if (lazy[node] != 0) {
		tree[node] += (e - s + 1)*lazy[node];
		if (s != e) {
			lazy[2 * node] += lazy[node];
			lazy[2 * node + 1] += lazy[node];
		}
		lazy[node] = 0;
	}
	if (s > r || e < l) {
		return;
	}
	if (s >= l && e <= r) {
		tree[node] += (e - s + 1)*val;
		if (s != e) {
			lazy[2 * node] += val;
			lazy[2 * node + 1] += val;
		}
		return;
	}
	int mid = (s + e) / 2;
	up(2 * node, s, mid, l, r, val);
	up(2 * node + 1, mid + 1, e, l, r, val);
	tree[node] += tree[2 * node] + tree[2 * node + 1];
}
void build(int node, int s, int e) {
	if (lazy[node] != 0) {
		tree[node] += (e - s + 1)*lazy[node];
		if (s != e) {
			lazy[2 * node] += lazy[node];
			lazy[2 * node + 1] += lazy[node];
		}
		lazy[node] = 0;
	}
	if (s == e) {
		tree[node] = (tree[node] >= k);
		return;
	}
	int mid = (s + e) / 2;
	build(node * 2, s, mid);
	build(node * 2 + 1, mid + 1, e);
	tree[node] = tree[node * 2] + tree[node * 2 + 1];
}
int qu(int node, int s, int e, int l, int r) {
	if (s > r || e < l) {
		return 0;
	}
	if (s >= l && e <= r) {
		return tree[node];
	}
	int mid = (s + e) / 2;
	int v1 = qu(2 * node, s, mid, l, r);
	int v2 = qu(2 * node + 1, mid + 1, e, l, r);
	return v1 + v2;
}
int main() {
	scanf("%d%d%d", &n, &k, &q);
	for (int i = 0; i < n; i++) {
		int l, r;
		scanf("%d%d", &l, &r);
		up(1, 1, 2e5, l, r, 1);
	}
	build(1, 1, 2e5);
	for (int i = 0; i < q; i++) {
		int l, r;
		scanf("%d%d", &l, &r);
		printf("%d\n", qu(1, 1, 2e5, l, r));
	}
	return 0;
}