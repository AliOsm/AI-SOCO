#include <bits/stdc++.h>
using namespace std;

int n, m;
vector<int> g[200055];
int par[200055];
int depth[200055];
int dfn[200055], r[200055];
int t;

void dfs(int v, int par = -1, int d = 0) {
    depth[v] = d;
    ::par[v] = par;
    dfn[v] = t++;

    for (auto u : g[v]) if (u != par) {
        dfs(u, v, d + 1);
    }

    r[v] = t;
}
int main() {
    cin >> n >> m;

    for (int i = 0; i + 1 < n; i++) {
        int x, y;
        scanf("%d %d", &x, &y);
        x--, y--;

        g[x].push_back(y);
        g[y].push_back(x);
    }

    dfs(0);

    while (m--) {
        int k;
        scanf("%d", &k);

        vector<int> vec(k);
        
        for (int i = 0; i < k; i++) {
            scanf("%d", &vec[i]);
            vec[i]--;
        }
        
        sort(vec.begin(), vec.end(), [&] (int v, int u) {
            return depth[v] < depth[u];
        });

        int cur_v = 0;
        int cur_d = 0;
        bool bad = false;

        for (auto &v: vec) {
            if (v == 0) continue;

            if (depth[v] <= cur_d + 1) {
                assert(depth[v] == cur_d + 1);

                if (par[v] != cur_v) {
                    bad = true;
                    break;
                }
            } else {
                if (!(dfn[cur_v] <= dfn[v] && dfn[v] < r[cur_v])) {
                    bad = true;
                    break;
                }

                cur_v = par[v];
                cur_d = depth[v] - 1;
            }
        }

        puts(bad ? "NO" : "YES");
    }

	return 0;
}
