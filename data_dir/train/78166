/* upsolve with Dukkha */
#include <algorithm>
#include <iostream>
#include <set>
#include <vector>

using namespace std;

const int N = 200000;

vector<int> vv[N];
set<int> s;

int dfs(int i) {
	auto &v = vv[i];
	int m = v.size(), size = 1;
	for (int h = 0; h < m - 1; h++) {
		int p = v[h], q = v[h + 1];
		while (true) {
			auto it = s.upper_bound(p);
			if (it == s.end() || *it >= q)
				break;
			int j = *it;
			s.erase(it);
			size += dfs(j);
		}
	}
	return size;
}

int main() {
	int n, m, i, j;
	cin >> n >> m;
	for (i = 0; i < n; i++) {
		vv[i].push_back(-1);
		vv[i].push_back(n);
	}
	while (m-- > 0) {
		cin >> i >> j;
		i--, j--;
		vv[i].push_back(j);
		vv[j].push_back(i);
	}
	for (i = 0; i < n; i++)
		sort(vv[i].begin(), vv[i].end());
	for (i = 0; i < n; i++)
		s.insert(i);
	vector<int> cc;
	while (!s.empty()) {
		auto it = s.begin();
		i = *it;
		s.erase(it);
		cc.push_back(dfs(i));
	}
	sort(cc.begin(), cc.end());
	cout << cc.size() << '\n';
	for (int c : cc)
		cout << c << ' ';
	cout << '\n';
	return 0;
}
