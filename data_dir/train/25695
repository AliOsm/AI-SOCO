             
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=1e9+7;   
#define INF 100000000
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,k,m,t,q,x,y,z;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
vector<int> pf(string s) {
    int n = (int)s.length();
    vector<int> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
//lli vis[305][305];
lli a[505][505];
lli b[505][505];
lli g[505][505];
//lli good[5005][5005];
void solve(lli &x,lli &y)
{
    cout<<" "<<y+1<<" "<<x+1;
    if(y%2)
    x==0?++y:--x;
    else
    x==m-1?++y:++x;
}
int main()
{
cin>>n>>m;
vector<lli> v[1005];
vector<lli> v1[1005];
for(int i=1;i<=n;i++)
{
    for(int j=1;j<=m;j++)
    {
        cin>>a[i][j];
        v[i+j].push_back(a[i][j]);
    }
}
for(int i=1;i<=n;i++)
{
    for(int j=1;j<=m;j++)
    {
        cin>>b[i][j];
        v1[i+j].push_back(b[i][j]);
    }
}
for(int i=2;i<=n+m;i++)
{
    sort(v[i].begin(),v[i].end());
    sort(v1[i].begin(),v1[i].end());
}
for(int i=2;i<=n+m;i++)
{
    for(int j=0;j<v[i].size();j++)
    {
        if(v[i][j]!=v1[i][j])
        return cout<<"NO",0;
    }
}
cout<<"YES";
}