#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	const int maxn = 2e5 + 5;
	
	vector<int> freq(maxn);
	
	int n;
	cin >> n;
	vector<int> v(n + 1);
	for(int i = 1; i <= n; i++)
		cin >> v[i], freq[v[i]]++;
	
	int mx = -1, best = 0;
	
	for(int i = 0; i < maxn; i++)
		if(freq[i] > best){
			best = freq[i];
			mx = i;
		}
	
	vector<pair<int, pii>> ops;
	
	set<int> S;
	for(int i = 1; i <= n; i++)
		if(v[i] == mx)
			S.insert(i);
	
	while(!S.empty()){
		int pos = *(S.begin());
		S.erase(S.begin());
		
		if(pos > 1 && v[pos - 1] != mx){
			int t = 1;
			if(v[pos - 1] > mx)
				t = 2;
			v[pos - 1] = mx;
			ops.push_back({t, {pos - 1, pos}});
			S.insert(pos - 1);
		}
		
		if(pos < n && v[pos + 1] != mx){
			int t = 1;
			if(v[pos + 1] > mx)
				t = 2;
			v[pos + 1] = mx;
			ops.push_back({t, {pos + 1, pos}});
			S.insert(pos + 1);
		}
	}
	
	
	cout << ops.size() << endl;
	for(auto &p : ops)
		cout << p.first << " " << p.second.first << " " << p.second.second << endl;
	
	return 0;
}
