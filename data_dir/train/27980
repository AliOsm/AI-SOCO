#include <bits/stdc++.h>
#include <ext/hash_map>
#include <ext/numeric>

using namespace std;
using namespace __gnu_cxx;

#define REP(i,n) for( (i)=0 ; (i)<(n) ; (i)++ )
#define rep(i,x,n) for( (i)=(x) ; (i)<(n) ; (i)++ )
#define REV(i,n) for( (i)=(n) ; (i)>=0 ; (i)-- )
#define FORIT(it,x) for( (it)=(x).begin() ; (it)!=(x).end() ; (it)++ )
#define foreach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define rforeach(it,c) for(__typeof((c).rbegin()) it=(c).rbegin();it!=(c).rend();++it)
#define foreach2d(i, j, v) foreach(i,v) foreach(j,*i)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define SZ(x) ((int)(x).size())
#define MMS(x,n) memset(x,n,sizeof(x))
#define mms(x,n,s) memset(x,n,sizeof(x)*s)
#define pb push_back
#define mp make_pair
#define NX next_permutation
#define UN(x) sort(all(x)),x.erase(unique(all(x)),x.end())
#define CV(x,n) count(all(x),(n))
#define FIND(x,n) find(all(x),(n))-(x).begin()
#define ACC(x) accumulate(all(x),0)
#define PPC(x) __builtin_popcount(x)
#define LZ(x) __builtin_clz(x)
#define TZ(x) __builtin_ctz(x)
#define mxe(x) *max_element(all(x))
#define mne(x) *min_element(all(x))
#define low(x,i) lower_bound(all(x),i)
#define upp(x,i) upper_bound(all(x),i)
#define NXPOW2(x) (1ll << ((int)log2(x)+1))
#define PR(x) cout << #x << " = " << (x) << endl ;

typedef unsigned long long ull;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef pair<int, int> pii;

const int OO = (int) 2e9;
const double eps = 1e-9;

pii a1[100005];
pii a2[100005];
int s1[100005];
int s2[100005];
int sz1, sz2;

int main() {
   std::ios_base::sync_with_stdio(false);
   cin.tie(NULL);
   cout.tie(NULL);
#ifndef ONLINE_JUDGE
// freopen("in.txt","rt",stdin);
// freopen("out.txt","wt",stdout);
#endif
   int n, v, t, p;
   cin >> n >> v;
   for (int i = 0; i < n; i++) {
      cin >> t >> p;
      if (t == 1)
         a1[sz1++] = mp(p, i + 1);
      else
         a2[sz2++] = mp(p, i + 1);
   }
   sort(a1, a1 + sz1, greater<pii>());
   sort(a2, a2 + sz2, greater<pii>());
   for (int i = 0; i < sz1; i++)
      s1[i + 1] = s1[i] + a1[i].first;
   for (int i = 0; i < sz2; i++)
      s2[i + 1] = s2[i] + a2[i].first;
   int b1 = min(sz1, v), b2 = 0;
   int res = s1[b1];
   for (int i = 1; i <= sz2; i++) {
      int r2 = min(i, v / 2);
      int r1 = min(sz1, v - r2 * 2);
      if (res < s1[r1] + s2[r2])
         b1 = r1, b2 = r2, res = s1[r1] + s2[r2];
   }
   cout << s1[b1] + s2[b2] << endl;
   for (int i = 0; i < b1; i++)
      cout << a1[i].second << " ";
   for (int i = 0; i < b2; i++)
      cout << a2[i].second << " ";
   return 0;
}
