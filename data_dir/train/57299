#include <cstdlib>
#include <iostream>
#include <map>
#include <stdio.h>
#include <vector>
#include<bits/stdc++.h>
#include <ctype.h>
#include <list>
#include <stack>
#include <queue>
#include <string.h>
#include <iomanip>
#include <string>
#include <algorithm>
#include <cmath>
#define _CRT_SECURE_NO_DEPRECATE
#define INF 1000000000
#define Set(a, s) memset(a, s, sizeof (a))
#define ALL(x) x.begin() , x.end()
#define UNIQUE(c) (c).resize(unique(ALL(c))-(c).begin())
#define forpos(i,j,k) for (int i=0 ; i<j ; i+=k)
#define forneg(i,j,k) for (int i=j ;i>=0 ;i-=k)
#define upcase(x) transform(x.begin(), x.end(), x.begin(), ::toupper)
#define locase(x) transform(x.begin(), x.end(), x.begin(), ::tolower)
#define findIndex(v,x) find(v.begin(), v.end(), x) - v.begin()
#define PI 3.14159265358979323846
#define pf printf
#define SSTR( x ) dynamic_cast< std::ostringstream & >( \
       ( std::ostringstream() << std::dec << x ) ).str()


using namespace std;

typedef long long ll;
typedef std::pair<int,int> ii;
typedef std::pair<std::string,int> si;
typedef vector<int> vi;
typedef vector<ii> vii;

unsigned power( unsigned val, unsigned _pow=0 ) {
	if ( _pow <= 0 )
		return 1;
	return val * power( val, _pow-1 );
}
int str2int (const string &str) {
  stringstream ss(str);
  int num;
  if((ss >> num).fail())
  {
      //ERROR
  }
  return num;
}
/*bool operator<(const state& lhs, const state& rhs){
	return lhs.dist > rhs.dist;
}*/
//int dx[]={-1,1,0,0,1,1,-1,-1};
//int dy[]={0,0,1,-1,1,-1,1,-1};
unsigned gcd_recursive(long long  a, long long  b)
{
    if (b)
        return gcd_recursive(b, a % b);
    else
        return a;
}
int main()
{
    //ios_base::sync_with_stdio(0);cin.tie(0);
        int lines,skip,start,endx,current=1,watch=0;
    cin>>lines>>skip;
    for (int i = 0; i < lines; ++i)
    {
        cin>>start>>endx;
        while(current+skip<=start) current+=skip;
        watch+=endx-current+1;
        current+=endx-current+1;

    }
    cout<<watch;
    return 0;
}
