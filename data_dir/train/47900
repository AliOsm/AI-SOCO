//https://discuss.codechef.com/t/robagain-editorial/20734
#pragma GCC optimize("O3")
#include<queue>
#include <cmath>
#include <complex>
#include<map>
#include <string>
#include<iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <string>
#include <iostream>
#include <stdio.h>
#include<bits/stdc++.h>


/*
#define x real()
#define y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define length(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)
//#define polar(r,ang)            ((r)*exp(point(0,ang)))  ==> Already added in c++11
#define rotateO(p,ang)          ((p)*exp(point(0,ang)))
#define rotateA(p,ang,about)  (rotateO(vec(about,p),ang)+about)
#define reflectO(v,m)  (conj((v)/(m))*(m))
*/

//#define pi 3.141592654
#define forr(i,a,b) for(int i=a;i<=b;i++)
#define F first
#define S second
#define input ios_base::sync_with_stdio(0);cin.tie(0);
#define NOT(x) (1^x)

const double PI  = acos(-1.0);
using namespace std;
typedef pair<double,double>pdd;
typedef long long  ll;
typedef pair<ll, ll>pii;
typedef complex<double> point;

//int x[8]={1,0,0,-1,-1,-1,1,1};
//int y[8]={0,1,-1,0,-1,1,-1,1};
//const int N=500009,M=1000000;
const double EPS= 1e-9,eps=-1e9;
const int N =50005;
int n,m,head[N*2+9],nxt[N*20*8+9],to[N*20*8+9],ne;
void init()
{
    memset(head,-1,n*sizeof head[0]);
    ne=0;
}
void addedge(int f,int t)
{
    to[ne]=t;
    nxt[ne]=head[f];
    head[f]=ne++;
}
int lo[N*2+9],vis[N*2+9],curt,compid[N*2+9],comps,rev[N*2],ans[N*2];
stack<int>sk;
void tarjan(int u)
{
    vis[u]=lo[u]=curt++;
    sk.push(u);
    for(int e=head[u];~e;e=nxt[e])
    {
        int v=to[e];
        if(vis[v]==-1)
        {
            tarjan(v);
            lo[u]=min(lo[u],lo[v]);
        }
        else if(compid[v]==-1)
            lo[u]=min(lo[u],lo[v]);
    }
    if(lo[u]==vis[u])
    {
        int p;
        do{
            p=sk.top();
            sk.pop();
            compid[p]=comps;
        }while(p!=u);
        comps++;
    }
}
string s;
void go()
{
    memset(vis,-1,n*sizeof vis[0]);
    memset(compid,-1,n*sizeof compid[0]);
    comps=curt=0;
    forr(i,0,n-1)
    if(vis[i]==-1&&s[i/2]!='.')tarjan(i);
}

 int main()
{
//freopen("travel.in","r",stdin);
//freopen("travel.out","w",stdout);
//__builtin_popcount()
input;
    cin>>n>>m;
    n*=2;
    init();
    int u,v,c;
    forr(i,1,m)
    {
        cin>>u>>v>>c;
        u--,v--;
        if(c)
        {
            addedge(u*2,v*2);
            addedge(v*2,u*2);
            addedge(NOT(u*2),NOT(v*2));
            addedge(NOT(v*2),NOT(u*2));
        }
        else
        {
            addedge(u*2,NOT(v*2));
            addedge(NOT(v*2),u*2);
            addedge(v*2,NOT(u*2));
            addedge(NOT(u*2),v*2);
        }
    }
    go();
    for(int i=0;i<n;i+=2)
    {
        if(compid[i]==compid[i+1])
        {
            cout<<"Impossible";
            return 0;
        }
    }

    for(int i=0;i<n;i+=2)
    {
        rev[compid[i]]=compid[i+1];
        rev[compid[i+1]]=compid[i];
    }
    memset(ans,-1,sizeof ans);
    for(int i=0;i<comps;i++)
    {
        if(ans[i]==-1)
        {
            ans[i]=1;
            ans[rev[i]]=0;
        }
    }
    vector<int>kk;
    for(int i=0;i<n;i+=2)
        if(ans[compid[i]])kk.push_back(i/2+1);
    cout<<kk.size()<<endl;
    for(auto p:kk)cout<<p<<" ";


return 0;
}
