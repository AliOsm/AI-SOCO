#include<bits/stdc++.h>
using namespace std;
 
#define ll long long int
#define ull unsigned long long
#define pll pair<ll,ll>
#define MS(x, y) memset(x, y, sizeof(x))
#define all(x) x.begin(),x.end()
#define ff first
#define ss second
#define INFL LLONG_MAX
#define pb push_back
#define FIO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
 
const ll N = 1e5 + 5;
const ll M = 1e3 + 5;
const ll mod = 1e9 + 7;
const ll m1 = 1e9 + 7;
const ll m2 = 1e9 + 9;
const ll p1 = 402653189;
const ll p2 = 1610612741;
const int LN = 32;
 
ll powermodm(ll x,ll n,ll M){ll result=1;while(n>0){if(n % 2 ==1)result=(result * x)%M;x=(x*x)%M;n=n/2;}return result;}
ll power(ll _a,ll _b){ll _r=1;while(_b){if(_b%2==1)_r=(_r*_a);_b/=2;_a=(_a*_a);}return _r;}
ll gcd(ll a,ll b){if(a==0)return b;return gcd(b%a,a);}
ll lcm(ll a,ll b){return (max(a,b)/gcd(a,b))*min(a,b);}
 
ll dx[4]={-1,  1,  0,  0};
ll dy[4]={ 0,  0,  1, -1};
 
ll pw[LN],fact[N],invfact[N];
 
void pre()
{
    fact[0]=1;
    for(int i=0;i<LN;i++)pw[i]=power(2,i);
    for(int i=1;i<N;i++)fact[i]=(i*fact[i-1])%mod;
    for(int i=0;i<N;i++)invfact[i]=powermodm(fact[i],mod-2,mod);
}
 
vector <ll> adj[N];
ll pa[LN][N],depth[N];
 
void simple_dfs(ll x,ll p)
{
    for(auto it : adj[x])
    {
        if(it==p)continue;
        depth[it] = depth[x]+1;
        pa[0][it] = x;
        simple_dfs(it,x);
    }
}
 
ll LCA(ll u, ll v) 
{
    if(depth[u] < depth[v]) swap(u,v);
    ll diff = depth[u] - depth[v];
    for(ll i=0; i<LN; i++) if( (diff>>i)&1 ) u = pa[i][u];
    if(u == v) return u;
    for(ll i=LN-1; i>=0; i--) 
        if(pa[i][u] != pa[i][v]) {
            u = pa[i][u];
            v = pa[i][v];
       }
    return pa[0][u];
}
 
 
int main()
{
    FIO;
    //pre();
 
    ll i,j;
    
    ll n,q;
    cin>>n>>q;
    ll p[n+1];
    
    for(i=2;i<=n;i++)
    {
        cin>>p[i];
        adj[p[i]].pb(i);
    }
    
    simple_dfs(1,0);
    
    for(int i=1; i<LN; i++)
        for(int j=1; j<=n; j++)
            pa[i][j] = pa[i-1][pa[i-1][j]];
    
    while(q--)
    {
        ll a,b,c;
        cin>>a>>b>>c;
        ll dist[3];
        dist[0] = depth[a] + depth[b] - 2*depth[LCA(a,b)];
        dist[1] = depth[a] + depth[c] - 2*depth[LCA(a,c)];
        dist[2] = depth[b] + depth[c] - 2*depth[LCA(c,b)];
        
        sort(dist,dist+3);
        
        ll ans = ( dist[2] + dist[1] - dist[0] ) / 2 + 1;
        cout<<ans<<"\n";
    }
    
    return 0;
}