#include <bits/stdc++.h>

#define debug(x) cout << #x << " = " << x << endl
#define fori(i, ini, lim) for(int i = int(ini); i < int(lim); i++)
#define ford(i, ini, lim) for(int i = int(ini); i >= int(lim); i--)

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef tuple<int, int, int> edge;

const int MAX = 1e5 + 5;
int pset[MAX];
vector<ii> people[2];
vector<int> zeros[2];
int ptr[2], pivot[2];
int n;

int find_set(int i) {
	return pset[i] == i ? i : pset[i] = find_set(pset[i]);
}

inline bool same_set(int i, int j) {
	return find_set(i) == find_set(j);
}

inline void union_sets(int i, int j) {
	if(rand() & 1) {
		swap(i, j);
	}
	pset[find_set(i)] = find_set(j);
}

int main() {
	scanf("%d", &n);
	fori(i, 1, n + 1) {
		pset[i] = i;
	}
	bool to_print = false;
	fori(i, 1, n + 1) {
		int c, s;
		scanf("%d %d", &c, &s);
		if(i == 1 && n == 1000 && s == 117) {
			to_print = true;
		}
		if(s == 0) {
			zeros[c].push_back(i);
		}
		else {
			people[c].emplace_back(i, s);
			pivot[c] = i;
		}
	}

	vector<edge> ans;
	if(pivot[0] == 0) {
		fori(i, 0, (int) zeros[1].size() - 1) {
			ans.emplace_back(zeros[0].back(), zeros[1][i], 0);		
		}
		fori(i, 0, (int) zeros[0].size() - 1) {
			ans.emplace_back(zeros[1].back(), zeros[0][i], 0);
		}
		ans.emplace_back(zeros[0].back(), zeros[1].back(), 0);
	}
	else {
		fori(i, 0, 2) {
			for(auto &each : zeros[i]) {
				ans.emplace_back(pivot[!i], each, 0);
				union_sets(pivot[!i], each);
			}
		}
	}

	while(ptr[0] < (int) people[0].size()) {
		int mn = min(people[0][ptr[0]].second, people[1][ptr[1]].second);
		ans.emplace_back(people[0][ptr[0]].first, people[1][ptr[1]].first, mn);
		union_sets(people[0][ptr[0]].first, people[1][ptr[1]].first);
		people[0][ptr[0]].second -= mn;
		people[1][ptr[1]].second -= mn;
		fori(i, 0, 2) {
			if(people[i][ptr[i]].second == 0) {
				ptr[i]++;
			}
		}
	}

	fori(i, 0, 2) {
		for(auto &each : people[i]) {
			if(!same_set(pivot[!i], each.first)) {
				union_sets(pivot[!i], each.first);
				ans.emplace_back(pivot[!i], each.first, 0);
			}
		}
	}

	if(to_print) {
		//debug(ans.size());
	}

	for(auto &each : ans) {
		int v, u, w;
		tie(v, u, w) = each;
		printf("%d %d %d\n", v, u, w);
	}

	return 0;
}

