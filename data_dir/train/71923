#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_set>
#include<unordered_map>
using namespace std;

#define MAX 1002
int n;
int m;
int dx[] = { 0,0,1,-1 };
int dy[] = { 1,-1,0,0 };
vector<pair<int, int> > v[3];
string s[MAX];
char buf[MAX];
int room[MAX][MAX];
int dist[3][MAX][MAX];
queue<pair<int, int> > q;
int table[3][3];
void init(int b) {
    for (int i = 0;i < 3;i++) {
        table[b][i] = INT_MAX;
    }
    for (int i = 0;i < n;i++) {
        for (int j = 0;j < m;j++) {
            dist[b][i][j] =INT_MAX;
        }
    }
    for (int i = 0;i < v[b].size();i++) {
        int a1 = v[b][i].first;
        int a2 = v[b][i].second;
        q.push(make_pair(a1, a2));
        dist[b][a1][a2] = 0;
    }
    while (!q.empty()) {
        int a1 = q.front().first;
        int b1 = q.front().second;
        q.pop();
        for (int i = 0;i < 4;i++) {
            int aa = a1 + dx[i];
            int bb = b1 + dy[i];
            if (room[aa][bb]!=-2&&aa >= 0 && bb >= 0 && aa < n&&bb < m) {
                if (dist[b][aa][bb] > dist[b][a1][b1] + 1) {
                    dist[b][aa][bb] = dist[b][a1][b1] + 1;
                    q.push(make_pair(aa, bb));
                }
            }
        }
    }
    for (int i = 0;i < n;i++) {
        for (int j = 0;j < m;j++) {
            if (dist[b][i][j] != INT_MAX) {
                dist[b][i][j]--;
                dist[b][i][j] = max(0, dist[b][i][j]);
            }
            if (dist[b][i][j] == INT_MAX || room[i][j] < 0) {
                continue;
            }
            table[b][room[i][j]] = min(table[b][room[i][j]], dist[b][i][j]);
        }
    }
}
int main() {
    scanf("%d%d", &n, &m);
    for (int i = 0;i < n;i++) {
        scanf("%s", buf);
        s[i] = buf;
    }
    for (int i = 0;i < n;i++) {
        for (int j = 0;j < m;j++) {
            if (isdigit(s[i][j])) {
                int val = s[i][j] - '0';
                val--;
                s[i][j] = val + '0';
                v[val].push_back(make_pair(i, j));
                room[i][j] = val;
            }
            if (s[i][j] == '#') {
                room[i][j] = -2;
            }
            if (s[i][j] == '.') {
                room[i][j] = -1;
            }
        }
    }
    init(0);
    init(1);
    init(2);
    int ans = INT_MAX;
    for (int i = 0;i < n;i++) {
        for (int j = 0;j < m;j++) {
            if (room[i][j] == -2) {
                continue;
            }
            bool ok = false;
            int sum = 0;
            for (int k = 0;k < 3;k++) {
                if (dist[k][i][j] == INT_MAX) {
                    ok = true;
                    break;
                }
                sum += dist[k][i][j];
            }
            sum++;
            if (ok == false) {
                ans = min(ans, sum);
            }
        }
    }
    if (ans == INT_MAX) {
        puts("-1");
        return 0;
    }
    vector<int> ord;
    ord.push_back(0);
    ord.push_back(1);
    ord.push_back(2);
    do {
        int sum = table[ord[0]][ord[1]] + table[ord[1]][ord[2]];
        ans = min(ans, sum);
    } while (next_permutation(ord.begin(), ord.end()));
    printf("%d\n", ans);
    return 0;
}