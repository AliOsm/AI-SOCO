#include<bits/stdc++.h>
#define ll long long
#define pii pair<ll,int>
#define piii pair<pair<ll,int>,int>
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define SIZE 100000002
#define MOD 1000000007
#define LD long double
#define uint unsigned int
using namespace std;

inline ll getnum()
{
    char c = getchar();
    ll num,sign=1;
    for(;c<'0'||c>'9';c=getchar())if(c=='-')sign=-1;
    for(num=0;c>='0'&&c<='9';)
    {
        c-='0';
        num = num*10+c;
        c=getchar();
    }
    return num*sign;
}

string S[100004];
unordered_map<string,int> Map;
vector<int> V[1000004];
pii P[1000004],M[1000004];
priority_queue<piii,vector<piii>,greater<piii>> PQ;
int done[1000004];

void dfs(int n,pii val)
{
    if(done[n])return;
    done[n]=1;
    M[n]=val;

    for(int i=0;i<V[n].size();i++)dfs(V[n][i],val);
}

int main()
{
    ios_base::sync_with_stdio(false);

    int n;
    cin>>n;

    for(int i=1;i<=n;i++)cin>>S[i];

    int m;
    cin>>m;

    int ind=0;
    for(int i=1;i<=m;i++)
    {
        string A,B;
        cin>>A>>B;

        for(int i=0;i<A.length();i++)A[i]=A[i]|('A'^'a');
        for(int i=0;i<B.length();i++)B[i]=B[i]|('A'^'a');

        int a=Map[A];
        if(a==0)a=++ind,Map[A]=a;

        int b=Map[B];
        if(b==0)b=++ind,Map[B]=b;

        V[b].pb(a);

        int r=0;
        for(int i=0;i<A.length();i++)if(A[i]=='r')r++;
        P[a]={r,A.length()};

        r=0;
        for(int i=0;i<B.length();i++)if(B[i]=='r')r++;
        P[b]={r,B.length()};
    }

    for(int i=1;i<=ind;i++)PQ.push({P[i],i});

    while(PQ.size()>0)
    {
        piii x=PQ.top();
        PQ.pop();
        if(!done[x.ss])dfs(x.ss,x.ff);
    }

    ll r=0,len=0;

    for(int i=1;i<=n;i++)
    {
        string A=S[i];
        for(int i=0;i<A.length();i++)A[i]=A[i]|('A'^'a');

        int x=Map[A];
        if(x==0)
        {
            for(int i=0;i<A.length();i++)if(A[i]=='r')r++;
            len+=A.length();
        }
        else
        {
            r+=M[x].ff;
            len+=M[x].ss;
        }
    }

    cout<<r<<' '<<len;
}
