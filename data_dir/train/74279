//g++ -std=c++14 -O2 -Wall -Wextra a.cpp
//In The Name Of God :
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
using namespace std ;
//using namespace __gnu_pbds;
#define X first
#define Y second
//#define int long long
typedef long long ll ;
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define ALL(x) (x).begin(),(x).end()
#define size(x) ((int)((x).size()))
typedef pair < int , int > pii ;
typedef pair < pii , int > pii_i ;
typedef pair < int , pii > pi_ii ;
typedef pair < pii , pii > pii_ii ;
//#define ordered_set(TYPE) tree<TYPE, null_type, less<TYPE>, rb_tree_tag, tree_order_statistics_node_update>
//#define "%I64d" "%
const int maxL = 70 ;
//const int inf = 1e9+100 ;
typedef long long ll ;
int mod = 1e9+ 7 ;
ll mod1 = 1e9+7 ;
const int inf = 1.2e18 ;
typedef long double ld ;
const int maxn = 6e5 +100 ;
const int baze = 330 ;
const int base = 3 ;
int from [ maxn ];
int to [ maxn ] ;
int w [ maxn ] ;
int dis [ maxn ] ;
int head [ maxn ] ;
#define next sdfgf
int next [ maxn ] ;
int backup [ maxn ] ;
int chiz [ maxn ] ; 
int eof , source = maxn-1 , sink = maxn-2 ; 

void add_edge ( int u , int v , int W )
{
  from [ eof ] = u , to [ eof ] = v , w [ eof ] = W , next [ eof ] = head [ u ] , head [ u ] = eof ++ ;
  swap(u,v);
  W=0;
  from [ eof ] = u , to [ eof ] = v , w [ eof ] = W , next [ eof ] = head [ u ] , head [ u ] = eof ++ ;
}

bool bfs ( )
{
  int st = 0 , en = 1 ;
  chiz [ 0 ] = source ;
  memset ( dis , 63 , sizeof dis ) ;
  dis [ source ] = 0 ;
  while ( st < en )
    {
      int v = chiz [ st ++ ] ;
      for ( int e = head [ v ] ; ~e ; e = next [ e ] )
	if ( w [ e ] && dis [ to [e] ] > dis [ v ] + 1 )
	  {
	    dis [ to[e] ] = dis [ v ] + 1 ;
	    chiz [ en++ ] = to[e] ;
	    if ( to[e] == sink )
	      return true ;
	  } 
    }
  return false ;
} 

int dfs ( int v , int mn = 1000000 )
{
  if ( !mn || v==sink )
    return mn ;
  int ret = 0 ;
  for ( int &e = head [ v ] ; ~e ; e = next [ e ] )
    if ( dis [ to[e] ] == dis [ v ] + 1 )
      {
	int x = dfs ( to[e] , min ( mn , w [ e ] ) ) ;
	ret += x ;
	w [ e ] -= x ;
	w [e^1] += x ;
	mn -= x ;
	if ( mn == 0 )
	  break ;
      }
  return ret ; 
}

int flow ( )
{
  memcpy ( backup , head , sizeof head ) ;
  int ret = 0 ;
  while ( bfs ( ) )
    {
      ret += dfs ( source ) ;
      memcpy ( head , backup , sizeof head ) ;
    }
  return ret ;
}
int ar [ 60 ] ;
string t [ maxn ] ;
int pos [ maxn ] ;
int n ;

int32_t main ( )
{
  fast ;
  memset ( head , -1 , sizeof head ) ;
  map < string , int > mp ;
  mp [ "S" ] = 0 ; 
  mp [ "M" ] = 1 ; 
  mp [ "L" ] = 2 ; 
  mp [ "XL" ] = 3 ; 
  mp [ "XXL" ] = 4 ; 
  mp [ "XXXL" ] = 5 ;
  for ( int i = 0 ; i < 6 ; i ++ )
    cin >> ar [ i ] , add_edge ( source , i , ar [ i ] ) ;
  cin >> n ;
  vector < int > vc ; 
  for ( int i = 0 ; i < n ; i ++ )
    {
      string s ;
      cin >> s ;
      t [ i ] = s ;
      pos [ i ] = size ( s ) ; 
      if ( s . find ( ',' ) < size ( s ) )
	{
	  int x = s . find ( ',' ) ;
	  //cerr << s . substr ( 0 , x ) << ',' << s . substr ( x+1 , size(s) ) << '*' << endl ;
	  pos [ i ] = x ;
	  vc . push_back ( eof ) ;
	  add_edge ( mp [ s . substr ( 0 , x ) ] , i+10 , 1 ) ;
	  add_edge ( mp [ s . substr ( x+1 , size(s) ) ] , i+10 , 1 ) ;
	  add_edge ( i+10 , sink , 1 ) ; 
	}
      else
	//cerr << s << endl ,
	  vc . push_back ( eof ) , 
	  add_edge ( mp [ s ] , sink , 1 ) ; 
    }
  //cerr << "flow() is sarting..." << endl;
  int ans = flow ( ) ;
  if ( ans != n )
    return cout << "NO" << endl , 0 ;
  cout << "YES" << endl ;
  int hlp = 0 ; 
  for ( int x : vc )
    {
      if ( w [ x ] == 0 )
	cout << t [ hlp ] . substr ( 0 , pos [ hlp ] ) << '\n' ;
      else
	cout << t [ hlp ] . substr ( pos [ hlp ] + 1 , size ( t [ hlp ] ) ) << '\n' ;
      hlp ++ ;
    }
}
