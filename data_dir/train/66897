#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
//using namespace __gnu_pbds;
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define fi first
#define se second
#define pb push_back
#define all(x) x.begin(), x.end()
#define rsort(x) sort(x.rbegin(), x.rend())
#define uniq(x) x.erase(unique(x.begin(), x.end()), x.end())
#define fio(x) ios::sync_with_stdio(x), cin.tie(x), cout.tie(x);
#define znit(x) memset(x, 0, sizeof(x))
#define mnit(x) memset(x, -1, sizeof(x))
typedef long long ll;
typedef double db;
typedef long double ldb;
typedef pair<int, int> pii;
typedef pair<int, pair<int, int>> piii;
typedef pair<pair<int, int>, int> ppi;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<ll, ll> pll;
typedef pair<db, db> pdd;
const int dr[] = {1, 0, -1, 0, 1, 1, -1, -1};
const int dc[] = {0, 1, 0, -1, 1, -1, 1, -1};
const int inf = 0x3f3f3f3f;
const ll linf = 0x3f3f3f3f3f3f3f3f;
const db PI = acos(-1);
const db EPS = 1e-7;

const ll mod = 1e9 + 7;
const ll mod2 = 1e9 + 9;
ll mypow(ll x, ll y, ll p){ll ret = 1;while(y){if(y & 1) ret = (ret * x) % p;x = (x * x) % p; y /= 2;}return ret;}
ll inv(ll x, ll p){return mypow(x, p - 2, p);}
ll gcd(ll x, ll y){return y ? gcd(y, x % y) : x;}

const int MAX = 2e5 + 3;

ll N, D, S[MAX], P[MAX];

int main(){
    scanf("%lld %lld", &N, &D);
    for(int i = 1; i <= N; i++){
        scanf("%lld", S + i);
    }
    for(int i = 1; i <= N; i++){
        scanf("%lld", P + i);
    }
    S[D] += P[1];
    ll l = 2, r = N;
    for(int i = 1; i <= N; i++){
        if(i == D)  continue;
        if(S[i] + P[r] > S[D]){
            S[i] += P[l];
            l++;
        }
        else{
            S[i] += P[r];
            r--;
        }
    }
    vector<pll> vt;
    for(int i = 1; i <= N; i++){
        vt.push_back({S[i], i});
    }
    sort(vt.rbegin(), vt.rend());
    ll ans = 1;
    for(int i = 0; i < N; i++){
        if(vt[i].second == D){
            ans = i + 1;
            break;
        }
    }
    printf("%lld\n", ans);
	return 0;
}
