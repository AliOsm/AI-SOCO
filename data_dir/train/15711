#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
template <class T> int size(const T &x) { return x.size(); }
#define rep(i,a,b) for(int i = (a); i < (b); i++)
#define iter(it,c) for(auto it = (c).begin(); it != (c).end();++it)
#define pb push_back
#define fs first
#define sc second
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

const int INF = ~(1<<31);
const double pi = acos(-1);
const double EPS = 1e-9;

vi edg[600];

bool bfs(int a) {
	bool vis[600];
	memset(vis,0,sizeof(vis));
	queue<int> q;
	iter(it,edg[a]) q.push(*it);
	while(!q.empty()) {
		int at = q.front();
		q.pop();
		if(at == a) return true;
		if(vis[at]) continue;
		vis[at] = true;
		iter(it,edg[at]) if(!vis[*it]) q.push(*it);
	}
	return vis[a];
}

vii bfs2(int a) {
	bool vis[600];
	int from[600];
	memset(from,-1,sizeof(from));
	memset(vis,0,sizeof(vis));
	queue<int> q;
	q.push(a);
	vis[a] = true;
	while(!q.empty()) {
		int at = q.front();
		q.pop();
		iter(it,edg[at]) {
			if(!vis[*it]) {
				from[*it] = at;
				vis[*it] = true;
				q.push(*it);
			} else if(from[*it] == -1) {
				from[*it] = at;
			}
		}
	}
	int start = a;
	vii e;
	e.push_back(ii(from[a],a));
	start = from[a];
	while(start != a) {
		e.push_back(ii(from[start], start));
		start = from[start];
	}
	return e;
}

int dafrom, dato;

int n,m;
bool visited[600];
bool inpath[600];
bool cycle = false;
void dfs(int at) {
    if(cycle) return;
    visited[at] = true;
    inpath[at] = true;
	iter(it,edg[at]) {
		if(at == dafrom && *it == dato) continue;
		if(inpath[*it]) {
			cycle = true;
			return;
		}
		if(!visited[*it]) dfs(*it);
	}
    inpath[at] = false;
}

bool check() {
    memset(visited,0,sizeof(visited));
    memset(inpath,0,sizeof(inpath));
    rep(i,0,n) if(!visited[i]) {
        cycle = false;
        dfs(i);
        if(cycle) return false;
    }
    return true;
}


int main() {
    cin.sync_with_stdio(false);
	cin >> n >> m;
	rep(i,0,m) {
		int a,b;
		cin >> a >> b;
		a--;b--;
		edg[a].pb(b);
	}
	rep(i,0,n) {
		if(bfs(i)) {
			// found some cycle
			vii rem = bfs2(i);
			iter(it,rem) {
				dafrom = it->first;
				dato = it->second;
				if(check()) {
					cout << "YES" << endl;
					return 0;
				}
			}
			cout << "NO" << endl;

			return 0;
		}
	}
	cout << "YES" << endl;


    return 0;
}


