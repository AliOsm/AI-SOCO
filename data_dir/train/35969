#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

const int N = 300100;

int n, a[N], pos[N], m;

vector <pair<int, int> > g[N];

bool used[N];

vector <pair<int, int> > cycles;

int mx, mn;

int dp[N];

ll pref[N];

int pr[N];

int clr[N];

int strt, fn;

bool dfs(int v, int p){
    clr[v] = 1;
    for (int i = 0; i < g[v].size(); i++){
        int to = g[v][i].first, id = g[v][i].second;
        if (id == p)
            continue;
        if (clr[to] == 0){
            pr[to] = v;
            if (dfs(to, id)){
                clr[v] = 2;
                return 1;
            }
        } else
        if (clr[to] == 1){
            strt = to;
            fn = v;
            clr[v] = 2;
            return 1;
        }
    }
    clr[v] = 2;
    return 0;
}

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);

    cin >> n >> m;
    for (int i = 1; i <= m; i++){
        int a, b;
        cin >> a >> b;
        g[a].push_back({b, i});
        g[b].push_back({a, i});
    }
    for (int i = 1; i <= n; i++){
        if (dfs(i, 0)){
            int mn = strt;
            int mx = strt;
            while(fn != strt){
                mn = min(mn, fn);
                mx = max(mx, fn);
                fn = pr[fn];
            }
            //cout << "kek " << i << ' ' << mn << ' ' << mx << endl;
            cycles.push_back({mn, mx});
        }
    }
    for (int i = 1; i <= n; i++)
        dp[i] = n;
    for (int i = 0; i < cycles.size(); i++){
        dp[cycles[i].first] = cycles[i].second-1;
    }
    dp[n+1] = n;
    for (int i = n; i >= 1; i--){
        dp[i] = min(dp[i], dp[i+1]);
    }
    for (int i = 1; i <= n; i++){
        pref[i] = pref[i-1] + dp[i];
        //cout << dp[i] << ' ';
    }
    //cout << endl;
    int tt;
    cin >> tt;
    while(tt--){
        int l, r;
        cin >> l >> r;
        int tl = l, tr = r+1;
        while(tl < tr){
            int mid = (tl+tr)>>1;
            if (dp[mid] <= r)
                tl = mid+1; else
                tr = mid;
        }
        ll ans = 0;
        ans = pref[tl-1]-pref[l-1];
        ans -= tl*1ll*(tl-1)/2-l*1ll*(l-1)/2;
        ans += (r-tl+1)*1ll*r;
        ans -= r*1ll*(r+1)/2-tl*1ll*(tl-1)/2;
        ans += (r-l+1);
        cout << ans << "\n";
    }

}

/**


*/
