#pragma comment(linker, "/STACK:640000000")
#include<iostream>
#include<cstdio>
#include<cassert>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<cmath>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<bitset>
#include<algorithm>

#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define ll long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)

using namespace std;

typedef pair<int, int> pii;

const double eps = 1e-9;
const double pi = acos(-1.0);

const int maxn = (int)2e5 + 10;

vector<int> v[maxn];

int main() {
    #ifdef LOCAL
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif

    int n; cin >> n;

    for (int i = 0; i < n; i++) {
        int x; scanf("%d",&x);
        v[x].pb(i + 1);
    }

    int cur = 0;

    vector<int> res;

    for (int i = 0; i < maxn; i++) if (!v[i].empty()) {
        if (cur != i) {
            cout << "Impossible" << endl;
            return 0;
        }
        cur++;
        res.pb(v[i].back());
        v[i].ppb();
    }
    cur--;

    if (cur <= 1) {
        if (!v[0].empty() || !v[1].empty()) {
            cout << "Impossible" << endl;
            return 0;
        }
    }

    for (int i = cur; i >= 2;) {
        while(!v[i].empty()) {
            if (!v[i - 1].empty() && !v[i - 2].empty()) {
                res.pb(v[i - 2].back()); v[i - 2].ppb();
                res.pb(v[i - 1].back()); v[i - 1].ppb();
                res.pb(v[i].back()); v[i].ppb();
            } else {
                cout << "Impossible" << endl;
                return 0;
            }
        }
        if (!v[i - 2].empty()) {
            res.pb(v[i - 2].back()); v[i - 2].ppb();
            if (!v[i - 1].empty()) {
                res.pb(v[i - 1].back()); v[i - 1].ppb();
                i--;
            } else {
                i -= 2;
            }
        } else if (!v[i - 1].empty()) {
            cout << "Impossible" << endl;
            return 0;
        } else {
            i -= 3;
        }
    }

    cout << "Possible" << endl;
    for (int i = 0; i < sz(res); i++) {
        cout << res[i] << " ";
    }

    return 0;
}
