#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
#include <random>
#include <cassert>
#include <sstream>
using namespace std;
#define F first
#define S second
#define pb emplace_back
#define MP make_pair
#define ALL(x) begin(x), end(x)
#define SZ(x) (int)(x).size()
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
#define ln(i, n) " \n"[i == n]
typedef long long LL;
typedef long double LDB;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
//////////////////////
const long double eps = 1e-13;
const long double PI = acos(-1);
const int INF = (int)1e9;
const LL  INFF = (LL)1e18;
const int mod = (int)1e9 + 7;
const int MXN = (int)1e3 + 7;
LDB a[MXN][MXN];
LDB dp[MXN];
int id[MXN];
LDB val(LDB v) {
	if (v < 1) return INF;
	else return 100.0 / v;
}
bool cmp(int &u, int &v){
	return dp[u] < dp[v];
}
LDB pv1[MXN], pv2[MXN], qv[MXN];
bool ck[MXN];
int main(){
	int n; scanf("%d", &n);
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			scanf("%Lf", a[i] + j);
	for (int i = 1; i < n; i++) {
		dp[i] = INFF;
		pv1[i] = pv2[i] = 0;
		qv[i] = 1;
	}
	for (int i = 1; i <= n; i++) {
		int v = -1;
		LDB mn = INFF;
		for (int j = 1; j <= n; j++) {
			if (dp[j] < mn && !ck[j]) {
				mn = dp[j];
				v = j;
			}
		}
		if (v == -1) break;
		ck[v] = 1;
		for (int j = 1; j <= n; j++) {
			if (!ck[j]) {
				pv1[j] += qv[j]*(a[j][v] / 100.0)*dp[v];
				pv2[j] += qv[j]*(a[j][v] / 100.0);
				qv[j] *= (1 - a[j][v] / 100.0);
				if ( fabs(qv[j] - 1) < eps ) {
					dp[j] = INFF;
				} else {
					dp[j] = pv1[j] / (1 - qv[j]);
					dp[j] += pv2[j] / (1 - qv[j]) / (1 - qv[j]);
				}
			}
		}
	}
	printf("%.13Lf\n", dp[1]);
	return 0;
}
