//              +-- -- --++-- +-In the name of ALLAH-+ --++-- -- --+              \\

#include <bits/stdc++.h>

#define X first
#define Y second

using namespace std ;
using pii = pair <int , int> ;

int const N = 2e5 + 10 , LG = 24 , mod = 1e9 + 7 ;
int n , m , k , s , dp[N][LG] , ans ;
bool fs , ft ;
vector <pii> vec ;

inline int bpow (int a , int b) {
	int res = 1 ;

	while (b) {
		if (b & 1) {
			res = res * 1ll * a % mod ;
		}
		a = a * 1ll * a % mod ;
		b >>= 1 ;
	}

	return res ;
}

int fac[N] , rev[N] ;

inline int c (int n , int k) {
	return fac[n] * 1ll * rev[k] % mod * rev[n - k] % mod ;
}

void pre () {
	fac[0] = 1 , rev[0] = 1 ;
	for (int i = 1 ; i < N ; i ++) {
		fac[i] = fac[i - 1] * 1ll * i % mod ;
		rev[i] = bpow(fac[i] , mod - 2) ;
	}
}

int main(){
	ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0) ;

	pre() ;

	cin >> n >> m >> k >> s ;

	for (int i = 0 ; i < k ; i ++) {
		int x , y ;
		cin >> x >> y ;
		x -- , y -- ;

		if (x == 0 && y == 0) {
			fs = 1 ;
		}
		if (x == n - 1 && y == n - 1) {
			ft = 1 ;
		}

		vec.push_back({x , y}) ;
	}

	if (!fs) {
		vec.push_back({0 , 0}) ;
	}
	if (!ft) {
		vec.push_back({n - 1 , m - 1}) ;
	}

	sort(vec.begin() , vec.end()) ;

	int sz = vec.size() ;
	
	for (int i = 0 ; i < sz ; i ++) {
		dp[i][1] = c(vec[i].X + vec[i].Y , vec[i].X) ;
	}

	for (int i = 0 ; i < sz ; i ++) {
		for (int j = i + 1 ; j < sz ; j ++) {
			for (int k = 0 ; k < LG - 1 ; k ++) {
				int dx = vec[j].X - vec[i].X , dy = vec[j].Y - vec[i].Y ;

				if (dx >= 0 && dy >= 0) {
					int add = c(dx + dy , dx) * 1ll * dp[i][k] % mod;
					dp[j][k] = (dp[j][k] - add + mod) % mod ;
					dp[j][k + 1] = (dp[j][k + 1] + add) % mod ;
				}
			}
		}
	}

	int rem = c(n - 1 + m - 1 , n - 1) ;
	for (int i = 2 - (fs + ft) ; i < LG ; i ++) {
		ans = (ans + s * 1ll * dp[sz - 1][i]) % mod ;
		rem = (rem - dp[sz - 1][i] + mod) % mod ;
		s = (s + 1) >> 1 ;
	}

	ans = (ans + rem) % mod ;

	ans = ans * 1ll * bpow( c(n - 1 + m - 1 , n - 1) , mod - 2) % mod ;

	cout << ans << '\n' ;
}
