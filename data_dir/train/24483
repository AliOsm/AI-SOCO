#include <bits/stdc++.h>

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//#pragma GCC optimize("Ofast")
//1.0 * clock() / CLOCKS_PER_SEC

#define fi first
#define se second
#define ll long long
#define dl double long

using namespace std;

const ll NN = 3e3 + 7;
const int N = 3e5 + 7;
const int M = 22;
const int mod = 1e9 + 7;
const ll inf = 1e18 + 7;
const dl rf = 1e-14;
const int B = sqrt(N);

int n,m,q;
int mx,ks;
int p[N];
int d[N];
bool used[N];
vector < int > v[N];
vector < int > g;

void dfs( int x , int p , int col )
{
    g.push_back(x);
    if( col > mx ){
        mx = col;
        ks = x;
    }
    for( auto y : v[x] ){
        if( y == p )continue;
        dfs( y , x , col + 1 );
    }
}

int get( int x )
{
    return (p[x] == x ? x : p[x] = get(p[x]));
}

void merg( int x , int y )
{
    x = get( x );
    y = get( y );
    if( x != y ){
        p[y] = x;
        d[x] = max({ d[x] , d[y] , (d[x] + 1) / 2 + (d[y] + 1) / 2 + 1 });
    }
}

void solve1()
{
    cin >> n >> m >> q;
    for( int i = 1; i <= m; i++ ){
        int x,y;
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    for( int i = 1; i <= n; i++ ){
        p[i] = i;
    }
    for( int i = 1; i <= n; i++ ){
        if( !used[i] ){
            mx = 0;
            ks = 0;
            dfs( i , i , 0 );
            g.clear();
            dfs( ks , ks , 0 );
            for( auto x : g ){
                used[x] = true;
                p[x] = i;
                d[x] = mx;
            }
        }
    }
    while( q-- ){
        int tp;
        cin >> tp;
        if( tp == 1 ){
            int x;
            cin >> x;
            cout << d[get(x)] << "\n";
        }else{
            int x,y;
            cin >> x >> y;
            merg(x , y);
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    //freopen( "input.txt" , "r" , stdin );
    //freopen( "output.txt" , "w" , stdout );

    int cghf = 1;//cin >> cghf;
    while( cghf-- ){
        solve1();
    }
}
