#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <iterator>
#include <cmath>
#include <set>
#include <deque> 
#include <string>


using namespace std;

long long n, m, k;
int a[40010];
int b[40010];

std::vector<int> groupA;
std::vector<int> groupB;


std::map<int, int> aLenMap;
std::map<int, int> bLenMap;



void init(int num) {
	int d = 1;
	while ((d * d) <= num) {
		if (num % d == 0) {
			groupA.push_back(d);
			groupB.push_back(num / d);
			if ((num / d) != d) {
				groupA.push_back(num / d);
				groupB.push_back(d);
			}
		}
		d++;
	}
}

void findLength(int a[], int n, std::map<int, int> &aLenMap) {
	int l = 0;
	int r = 0;
	while (l < n) {
		if (a[l] == 0) {
			l++;
			continue;			
		}
		
		r = l;
		while ((r < n) && (a[r] == 1))
			r++;
		int newLen = r - l;
		
		if (aLenMap.find(newLen) == aLenMap.end()) {
			aLenMap[newLen] = 1;
		} else {
			aLenMap[newLen] = aLenMap[newLen] + 1;
		}
		
		l = r;
	}
}

long long getAns(long long aLen, long long bLen) {
	long long sum = 0;
	long long distA, distB;
	for (int i = 0 ; i < groupA.size() ; i++) {
		distA = (aLen - groupA[i]+ 1);
		if (distA <= 0) continue;
		
		distB = (bLen - groupB[i] + 1);
		if (distB <= 0) continue;
			
		sum = sum + distB * distA;
	}
	
	return sum;
}


int main()
{
	scanf("%I64d%I64d%I64d", &n, &m, &k);
	init(k);
	for (int i = 0 ; i < n ; i++)
		scanf("%d", &(a[i]));
	for (int i = 0 ; i < m ; i++)
		scanf("%d", &(b[i]));
		
	findLength(a, n, aLenMap);
	findLength(b, m, bLenMap);
	
	std::map<int, int>::iterator iAMap;
	std::map<int, int>::iterator iBMap;
	
	long long totalAns = 0;
	for (iAMap = aLenMap.begin() ; iAMap != aLenMap.end() ; iAMap++) {
		for (iBMap = bLenMap.begin() ; iBMap != bLenMap.end() ; iBMap++) {
			int aLen = iAMap->first;
			int bLen = iBMap->first;
			
			long long aCount = iAMap->second;
			long long bCount = iBMap->second;
			
			long long secCount;
			if (aLen <= bLen)
				secCount = getAns(aLen, bLen);
			else
				secCount = getAns(bLen, aLen);
				
			secCount = secCount * aCount * bCount;
			totalAns = totalAns + secCount;
		}
	}

	printf("%I64d\n", totalAns);
			
	return 0;
}

//5 3 2
//0 1 1 1 0
//1 1 1
