/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
/* FOR ACM-ICPC WF*/
#include <bits/stdc++.h>

#define MOD 1000000007
#define LINF (1LL<<60)
#define INF 2147483647
#define PI 3.1415926535897932384626433
#define ll long long
#define pii pair<int,int>
#define mp(x,y) make_pair((x),(y))
#define pb(x) push_back((x))
#define vi vector<int>
#define vvi vector<vi>
#define EPS 1e-9

#define MAXN 1000000

using namespace std;

int n;
//map<int, int> m1;

list<pii> vs;

string str;

int main(){
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	ios_base::sync_with_stdio(false);
	
	cin >> str; n = str.length();
	/*set<pii> pq;
	
	for(int i = 0, j = 0; i < n; i=j){
		while(j < n && str[i] == str[j])
			j++;
		m1[i] = j-i;
		if(i == 0 || j == n){
			pq.insert({j-i, i});
		}
		else{
			pq.insert({(j-i+1)/2, i});
		}
	}
	
	int t = 0;
	while(pq.size() > 1){
		int pos; tie(t, pos) = *pq.begin();
		pq.erase(pq.begin());
		
		m1.erase(pos);
		auto rit = m1.lower_bound(pos);
		if(rit == m1.begin() || rit == m1.end());
		else{
			auto lit = rit; --lit;
			int lpos, lsz, rpos, rsz;
			bool rmost = false;
			tie(lpos, lsz) = *lit;
			tie(rpos, rsz) = *rit;
			if(str[lpos] != str[rpos]);
			else{
				int ltime, rtime;
				if(lpos == 0)
					ltime = lsz;
				else
					ltime = (lsz+1)/2;
					
				if(++rit == m1.end())
					rmost = true;
				--rit;
				
				if(rmost)
					rtime = rsz;
				else
					rtime = (rsz+1)/2;
				--rit;
				
				pq.erase({ltime, lpos});
				pq.erase({rtime, rpos});
				
				m1.erase(rit);
				
				if(lpos == 0 && rmost){
					m1[lpos] = lsz+rsz-t;
					pq.insert({m1[lpos], lpos});
				}
				else if(lpos == 0 && not rmost){
					m1[lpos] = lsz+max(rsz-2*t, 0);
					pq.insert({m1[lpos], lpos});
				}
				else if(lpos && rmost){
					m1[lpos] = max(lsz-2*t, 0)+rsz;
					pq.insert({m1[lpos], lpos});
				}
				else{
					if(min(lsz, rsz) <= 2*t) m1[lpos] = max(lsz, rsz);
					else m1[lpos] = lsz+rsz-2*t;
					pq.insert({(m1[lpos]+1)/2, lpos});
				}
			}
		}
	}
		
	cout << t << endl;*/
	
	for(int i = 0, j = 0; i < n; i=j){
		while(j < n && str[i] == str[j])
			j++;
		vs.pb(mp(i, j-i));
	}
	
	int res = 0;
	while(vs.size() > 1){
		int mi = INF;
		for(auto it = vs.begin(), nit = vs.begin(); it != vs.end(); it=nit){
			nit++;
			if(it == vs.begin() || nit == vs.end()) mi = min(it->second, mi);
			else mi = min((it->second+1)/2, mi);
		}
		res += mi;
		for(auto &x: vs)
			x.second -= mi*2;
		vs.front().second += mi;
		vs.back().second += mi;
		for(auto it = vs.begin(), nit = vs.begin(); it != vs.end(); it=nit){
			nit++;
			if(it->second <= 0)
				vs.erase(it);
		}
		for(auto it = vs.begin(); it != vs.end(); it++){
			for(auto nit = it; ++nit != vs.end(); nit = it){
				if(str[it->first] == str[nit->first]){
					it->second += nit->second;
					vs.erase(nit);
				}
				else break;
			}
		}
	}
	
	cout << res << endl;
	
	return 0;
}

