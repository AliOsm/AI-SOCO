#include <iostream>
#include <fstream>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <deque>
#include <map>

using namespace std;

const int N = (3e5) + 5;
int a[N];

struct Ans
{
	long long ans;
	int l1, l2;
	Ans() { ans = l1 = l2 = 0; }
	Ans(long long a, int l, int ll)
	{
		ans = a;
		l1 = l;
		l2 = ll;
	}
	bool operator<(const Ans & a)
	{
		return ans < a.ans;
	}
};

Ans mapka[N];

int main()
{
	ios_base::sync_with_stdio(0);
	int n, w;
	cin >> n >> w;
	vector<int> ci[4];
	for(int i = 0; i < n; ++i)
	{
		int ww, c;
		cin >> ww >> c;
		ci[ww].push_back(c);
	}

	sort(ci[1].rbegin(), ci[1].rend());
	sort(ci[2].rbegin(), ci[2].rend());
	sort(ci[3].rbegin(), ci[3].rend());
	int l1 = 0, l2 = 0;
	long long curAnswer = 0;
	long long ans = 0;
	mapka[0] = Ans(0,0,0);
	for (int i = 0; i < w; ++i)
	{
		int l1 = mapka[i].l1;
		int l2 = mapka[i].l2;
		if (l1 < ci[1].size())
		{
			Ans newMapka1(mapka[i].ans + ci[1][l1], l1 + 1, l2);
			if (mapka[l1 + 2*l2 + 1] < newMapka1)
				mapka[l1 + 2*l2 + 1] = newMapka1;
		}
		if (l2 < ci[2].size())
		{
			Ans newMapka1(mapka[i].ans + ci[2][l2], l1, l2 + 1);
			if (mapka[l1 + 2*l2 + 2] < newMapka1)
				mapka[l1 + 2*l2 + 2] = newMapka1;
		}
	}
	long long cur = 0;
	
	for(int i = 1; i <= w; ++i)
		if (mapka[i] < mapka[i-1])
			mapka[i] = mapka[i-1];
	for(int i = 0; i <= ci[3].size() && 3*i <= w; ++i)
	{
		curAnswer = max(curAnswer, mapka[w - 3*i].ans + cur);
		if (i < ci[3].size())
			cur += ci[3][i];
	}
	cout << curAnswer;

}

/*
3 5
2 3
2 3
1 2
6
Для продолжения нажмите любую клавишу . . .
*/