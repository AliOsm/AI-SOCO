#include<bits/stdc++.h>
using namespace std;

int kokhnpaisi[300000];
int pernodestart[300000], pernodeend[300000];
int n, m, x, y, z, TIMEE;

int lazy[3][900000];
int ara[300000], level[300000];

vector < int > edges[300000];

void update2(int id, int node, int beg, int end, int i, int j, int vl)
{

    if(beg > j || end < i || beg > end) return;
    if(beg >= i && end <= j) {
        lazy[id][node] += vl;
        return;
    }

    int mid = (beg + end) / 2;
    int lft = 2 * node;
    int rgh = lft + 1;

    update2(id, lft, beg, mid, i, j, vl);
    update2(id, rgh, mid + 1, end, i, j, vl);

}

int query(int id, int node, int beg, int end, int i)
{
    if(beg > i || end < i) return 0;
    if(beg == end) return lazy[id][node];

    int mid = (beg + end) / 2;
    int lft = 2 * node;
    int rgh = lft + 1;

    int p = 0, q = 0;
    p = query(id, lft, beg, mid, i);
    q = query(id, rgh, mid + 1, end, i);
    return (p + q + lazy[id][node]);
}

void dfs(int pos, int par, int lvl)
{
    TIMEE++;
    kokhnpaisi[TIMEE] = pos;

    pernodestart[pos] = TIMEE;

    level[pos] = lvl;
    for(int i = 0; i < edges[pos].size(); i++){
        if(edges[pos][i] == par) continue;
        dfs(edges[pos][i], pos, lvl + 1);
    }

    pernodeend[pos] = TIMEE;

}


int main()
{
    cin >> n >> m;

    for(int i = 1; i <= n; i++){
        scanf("%d", &ara[i]);
    }

    for(int i = 1; i < n; i++){
        scanf("%d %d", &x, &y);
        edges[x].push_back(y);
        edges[y].push_back(x);
    }

    dfs(1, -1, 0);

//    for(int i = 1; i <= n; i++){
//        cout << i << ' ' << pernodestart[i] << ' ' << pernodeend[i] << endl;
//    }
//    cout << endl << endl;
//
//    for(int i = 1; i <= n; i++) cout << kokhnpaisi[i] << ' ';
//    cout << endl << endl;

    for(int i = 1; i <= m; i++){
        scanf("%d", &x);

        if(x == 1){
            scanf("%d %d", &y, &z);

//                cout << y << ' ' << pernodestart[y] << ' ' << pernodeend[y] << endl;
            update2((level[y] % 2), 1, 1, n, pernodestart[y], pernodeend[y], z);
            update2((1 - (level[y] % 2)), 1, 1, n, pernodestart[y], pernodeend[y], -z);



        }
        else{
            scanf("%d", &y);
//            cout << pernodestart[y] << endl;
            int xxx = query((level[y] % 2), 1, 1, n, pernodestart[y]) + ara[y];

            printf("%d\n", xxx);

        }
    }


    return 0;
}
