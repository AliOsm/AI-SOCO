#include <bits/stdc++.h>
//#define int long long
#define inf 1e9
using namespace std;
const int N = 1123456;
bool dd[N];
bool used[N];
vector <int> v[N];
bool top[N];
int id;
void dfs(int x)
{
    used[x] = 1;
    bool ok = 1;
    for(int i = 0; i < v[x].size(); i ++)
    {
        int to = v[x][i];
        if(!used[to])
        {
            dfs(to);
            if(top[to])
                ok = 0;
        }
    }
    if(!ok || dd[x])
        top[x] = 1, id = x;
}
int d[N];
void dfs2(int x)
{
    d[x] = 0;
    used[x] = 1;
    for(int i = 0; i < v[x].size(); i ++)
    {
        int to = v[x][i];
        if(!used[to] && top[to])
        {
            dfs2(to);
            d[x] = max(d[x], d[to] + 1);
        }
    }
}
bool usedd[N];
int mx;
void dfs3(int x, int s, int t)
{
    if(!top[x])
        return ;
    map <int, int> mp;
    mp[t] ++;
    usedd[x] = 1;
    for(int i = 0; i < v[x].size(); i ++) {
        int to = v[x][i];
        if(!usedd[to] && top[to]) {
            mp[d[to]] ++;
        }
    }
    for(int i = 0; i < v[x].size(); i ++)
    {
        int to = v[x][i];
        if(!usedd[to] && top[to])
        {
            mp[d[to]] --;
            if(mp[d[to]] == 0)
                mp.erase(d[to]);
            dfs3(to, s + 1, (*--mp.end()).first + 1);
            mp[d[to]] ++;
        }
    }
    if(mx < (*--mp.end()).first + 1 || (mx == (*--mp.end()).first + 1 && id > x))
    {
        mx = (*--mp.end()).first + 1;
        id = x;
    }
}
main()
{
    int n, m, i, j, k, x, y;
    cin >> n >> m;
    for(i = 1; i < n; i ++)
    {
        scanf("%d %d", &x, &y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    for(i = 1; i <= m; i ++)
    {
        scanf("%d", &x);
        dd[x] = 1;
    }
    dfs(x);
    int cnt = -2;
    for(i = 1; i <= n; i ++)
    {
        if(top[i])
        {
            cnt += 2;
        }
    }
    for(i = 1; i <= n; i ++)
        used[i] = 0;
    dfs2(x);
    mx = -1;
    id = n + 10;
    dfs3(x, 0, -1);
    cout << id << endl;
    cout << cnt - mx << endl;
}
