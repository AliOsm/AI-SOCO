/*input
3
011
101
110
7
1 2 3 1 3 2 1

4
0110
0010
0001
1000
4
1 2 3 4
*/
#include "bits/stdc++.h"
using namespace std;
int a[1000005],n,k;

#define MAX_N 105

vector<int> v[MAX_N];

bitset<MAX_N> bs[MAX_N][MAX_N];

void dfs(int u, bitset<MAX_N> &bs, vector<int> v[]){
	if(bs[u]) return;
	bs.set(u);
	for(auto i:v[u]) dfs(i,bs,v);
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	cin >> n;
	for(int i=1;i<=n;++i){
		string s; cin >> s;
		for(int j=0;j<n;++j) if(s[j]=='1')
			v[i].push_back(j+1);
	}

	for(int s=1;s<=n;++s){
		vector<int> dis(n+5,1e9);
		vector<int> par[n+5];

		queue<int> q; q.push(s);
		dis[s] = 0;

		while(q.size()){
			auto u = q.front(); q.pop();
			for(auto i:v[u]){
				if(dis[i]>1+dis[u]){
					dis[i] = 1 + dis[u];
					par[i] = vector<int>{u};
					q.push(i);
				} else if(dis[i] == 1+dis[u]){
					par[i].push_back(u);
				}
			}
		}

		for(int t = 1; t <= n; ++t) {
			dfs(t,bs[s][t],par);
		}
	}

	// for(int i=1;i<=n;++i) for(int j=1;j<=n;++j)
	// 	cout<<i<<' '<<j<<" : " << bs[i][j]<<'\n';

	cin >> k;
	for(int i=1;i<=k;++i){
		cin >> a[i];
	}

	vector<int> RES = {a[1]};

	for(int i=2;i<=k;++i){
		if(i==k){
			RES.push_back(a[i]);
		} else {
			if(!bs[RES.back()][a[i+1]][a[i]])
				RES.push_back(a[i]);
		}
	}
	cout << RES.size() << '\n';
	for(auto i:RES) cout << i << ' ';
}