/*****Enigma27*****/
#include<bits/stdc++.h>
#define start_routine clock_t begin = clock();
#define end_routine clock_t end = clock(); double elapsed_secs = double(end - begin) /CLOCKS_PER_SEC;return cerr<<"\nTime elapsed : "<<elapsed_secs<<" seconds\n",0;
#define ll          long long
#define pb          push_back
#define endl        '\n'
#define pll         pair<ll int,ll int>
#define vll          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define x           first
#define y           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll int i=a;i<b;i++)
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define gcd(a,b)    __gcd((a),(b))
#define lcm(a,b)    ((a)*(b)) / gcd((a),(b))
#define ios     ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
using namespace std;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); 
ll n,i,j,k,l,sum=0,flag=0,t,a[100005],ans=0;
string s;
bool isPrime(ll N) {
	if(N<2)return false;
	if(N<4)return true;
	if((N&1)==0)return false;
	if(N%3==0)return false;
	ll curr=5;
	while (curr<=sqrt(N)){
		if(N%curr==0)return false;
		curr+=2;
		if(N%curr==0)return false;
		curr+=4;
	}
	return true;
}
int get(ll n){
 	for(ll i=3; i*i<=n;i+=2){
 		if(n%i==0) return i;
 	}
}
ll solve(ll n){
	//cout<<n<< " " <<get(n)<<" "<<isPrime(n)<<endl;
	if(n%2==0) return n/2;
	else if(n<=1) return 0;
	else if(isPrime(n)) return 1;
	else return 1+solve(n-get(n));
}
int main()
{
    ios
    cin>>n;
    cout<<solve(n)<<endl;
    
    return 0;
}