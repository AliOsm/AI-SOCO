#include <bits\stdc++.h>

using namespace std;

#define forn(i, n) for (int i = 0; i < n; i++)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define sqr(x) (x) * (x)
#define pb push_back
#define mp make_pair

#define x0 ___x0
#define y0 ___y0

typedef long double ld;
typedef long long ll;

const int maxn = 400005;
const int inf = (int) 2e9;
const long long mod = (long long) 1e9 + 7;
const long long l_inf = (long long) 4e18;
const ld eps = 1e-8;
const ld pi = acosl(-1.0);

int n, m;
int init_col[maxn];
vector<int> g[maxn];
int tin[maxn], inv[maxn], w[maxn], timer = 0;

long long tree[4 * maxn];
int col[4 * maxn];

void dfs(int v, int p = -1) {
	tin[v] = timer;
	inv[timer] = v;
	w[v] = 1;
	timer++;
	for (int u: g[v]) {
		if (u != p) {
			dfs(u, v);
			w[v] += w[u];
		}
	}
}

inline void push(int v) {
	if (col[v] != 0) {
		col[2 * v + 1] = col[2 * v + 2] = col[v];
		tree[2 * v + 1] = tree[2 * v + 2] = 1ll << col[v];
		col[v] = 0;
	}
}

void build(int v, int tl, int tr) {
	if (tr - tl == 1) {
		tree[v] = 1ll << init_col[inv[tl]];
		return;
	}
	int tm = (tl + tr) >> 1;
	build(2 * v + 1, tl, tm);
	build(2 * v + 2, tm, tr);
	tree[v] = tree[2 * v + 1] | tree[2 * v + 2];
}

void update(int v, int tl, int tr, int l, int r, int c) {
	if (tr <= l || r <= tl)
		return;
	if (l <= tl && tr <= r) {
		col[v] = c;
		tree[v] = 1ll << c;
		return;
	}
	push(v);
	int tm = (tl + tr) >> 1;
	update(2 * v + 1, tl, tm, l, r, c);
	update(2 * v + 2, tm, tr, l, r, c);
	tree[v] = tree[2 * v + 1] | tree[2 * v + 2];
}

long long get(int v, int tl, int tr, int l, int r) {
	if (tr <= l || r <= tl)
		return 0;
	if (l <= tl && tr <= r)
		return tree[v];
	push(v);
	int tm = (tl + tr) >> 1;
	return get(2 * v + 1, tl, tm, l, r) | get(2 * v + 2, tm, tr, l, r);
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.precision(20);
	cout << fixed;

	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; i++)
		scanf("%d", &init_col[i]);
	for (int i = 0; i < n - 1; i++) {
		int v, u;
		scanf("%d%d", &v, &u);
		v--, u--;
		g[v].pb(u);
		g[u].pb(v);
	}

	dfs(0);
	build(0, 0, n);

	for (int i = 0; i < m; i++) {
		int t;
		scanf("%d", &t);
		if (t == 1) {
			int v, c;
			scanf("%d%d", &v, &c);
			update(0, 0, n, tin[v - 1], tin[v - 1] + w[v - 1], c);
		} else {
			int v;
			scanf("%d", &v);
			long long mask = get(0, 0, n, tin[v - 1], tin[v - 1] + w[v - 1]);
			cout << __builtin_popcountll(mask) << '\n';
		}
	}

	return 0;
}
