#include <bits/stdc++.h>

using namespace std;

int t[300005][26];

bool leaf[300005];

int cnt[300005];

map <string, bool> u;

string s;

int ans;

int sz;

void addTo(string s) {
    int v = 0;

    for (int i = 0; i < s.size(); ++i) {
        int cur = s[i] - 'a';

        if (!t[v][cur]) {
            t[v][cur] = ++sz;
        }

        v = t[v][cur];
        ++cnt[v];
    }

    leaf[v] = 1;
}

int calc(string s) {
    int r1 = -1, r2 = -1;
    int cur = s.size();
    int v = 0, saw = 0;

    if (u.find(s) == u.end()) {
        u[s] = 1;
    }
    else {
        saw = 1;
    }

    for (int i = 0; i < s.size(); ++i) {
        int cur = s[i] - 'a';

        if (!t[v][cur]) {
            t[v][cur] = ++sz;
        }

        v = t[v][cur];

        if (r1 == -1 && cnt[v] == 1) {
            r1 = i;
        }

        if (r1 != -1 && leaf[v]) {
            r2 = i;
        }

        if (!saw) {
            ++cnt[v];
        }
    }

    if (!saw) {
        leaf[v] = 1;
    }

    if (r1 != -1 && r2 != -1) {
        cur = min(cur, r1 + 1 + (int)(s.size()) - r2);
    }

    return cur;
}

void solve() {
    while (getline(cin, s)) {
        string word;

        for (int l = 0, r; l < s.size(); l = r) {
            word.clear();
            r = l;

            while (r < s.size() && 'a' <= s[r] && s[r] <= 'z') {
                ++r;
            }

            if (l == r) {
                ++ans, ++r;
            }
            else {
                for (int i = l; i < r; ++i) {
                    word += s[i];
                }

                ans += calc(word);
            }
        }

        ++ans;
    }

    printf("%d", ans);
}

int main() {
    int tt = 1;

    while (tt--) {
        solve();
    }

    return 0;
}