#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define F first
#define S second
const int N = 200200;

int n , T , sum , ans;
bool in[N] , in2[N];
int a[N] , t[N];
set<pair< pair< int , int >  , int > >pre,aft;
set<pair< pair< int , int >  , int > >PRE,AFT;
    pair< pair< int , int >  , int >p[N];

int main(){

scanf("%d %d",&n,&T);
for(int i=0;i<n;i++){
    scanf("%d %d",a+i,t+i);
    p[i].F.F=a[i];
    p[i].F.S=t[i];
    p[i].S=i;
}

sort(p,p+n);
for(int i=0;i<n;i++)aft.insert( { { p[i].F.S,p[i].F.F } , p[i].S } );

int i=0;
for(int k=1;k<=n;k++){

        while(i<n&&p[i].F.F<k){
            if( AFT.count( { { t[p[i].S] ,a[p[i].S] } ,p[i].S } ) ){
            AFT.erase ( { { t[p[i].S] ,a[p[i].S] } ,p[i].S } );
            in2[p[i].S]=0;
            PRE.insert( { { t[p[i].S] ,a[p[i].S] } ,p[i].S } );
            }else{
            aft.erase ( { { t[p[i].S] ,a[p[i].S] } ,p[i].S } );
            pre.insert( { { t[p[i].S] ,a[p[i].S] } ,p[i].S } );
            }
        i++;
        }

while( !pre.empty() && sum+(pre.begin()->F.F) <=T && AFT.size()+PRE.size()<k ){
    PRE.insert(*pre.begin());
    in[pre.begin()->S]=1;
    sum+=pre.begin()->F.F;
    pre.erase(pre.begin());
}

int sub=0;
if( !PRE.empty() && (int)AFT.size()+(int)PRE.size()==k ){
    sub=(--PRE.end())->F.F;
}
   while( !aft.empty() && sum-sub+(aft.begin()->F.F) <=T && AFT.size()+PRE.size()-(sub!=0)<k ){

        AFT.insert( *aft.begin() );
        in2[ aft.begin()->S ]=1;
        in[ aft.begin()->S ]=1;
        sum+=(aft.begin()->F.F);
        aft.erase(aft.begin());

if(sub){
    sum-=sub;
    sub=0;
    in[(--PRE.end())->S]=in2[(--PRE.end())->S]=0;
    pre.insert(*(--PRE.end()));
    PRE.erase ( (--PRE.end()));
}

if( !PRE.empty() && (int)AFT.size()+(int)PRE.size()==k ){
    sub=(--PRE.end())->F.F;
}

}



if((int)AFT.size()+(int)PRE.size()==k )
   ans=max(ans,(int)AFT.size());

}
pre.clear();
PRE.clear();
aft.clear();
AFT.clear();
sum=i=0;
memset(in ,0,sizeof in );
memset(in2,0,sizeof in2);

for(int i=0;i<n;i++)aft.insert( { { p[i].F.S,p[i].F.F } , p[i].S } );

for(int k=1;k<=n;k++){

        while(i<n&&p[i].F.F<k){
            if( AFT.count( { { t[p[i].S] ,a[p[i].S] } ,p[i].S } ) ){
            AFT.erase ( { { t[p[i].S] ,a[p[i].S] } ,p[i].S } );
            in2[p[i].S]=0;
            PRE.insert( { { t[p[i].S] ,a[p[i].S] } ,p[i].S } );
            }else{
            aft.erase ( { { t[p[i].S] ,a[p[i].S] } ,p[i].S } );
            pre.insert( { { t[p[i].S] ,a[p[i].S] } ,p[i].S } );
            }
        i++;
        }

while( !pre.empty() && sum+(pre.begin()->F.F) <=T && AFT.size()+PRE.size()<k){
    PRE.insert(*pre.begin());
    in[pre.begin()->F.S]=1;
    sum+=pre.begin()->F.F;
    pre.erase(pre.begin());
}

int sub=0;
if( !PRE.empty() && (int)AFT.size()+(int)PRE.size()==k ){
    sub=(--PRE.end())->F.F;
}
   while( !aft.empty() && sum-sub+(aft.begin()->F.F) <=T && AFT.size()+PRE.size()-(sub!=0) <k ){

        AFT.insert( *aft.begin() );
        in2[ aft.begin()->S ]=1;
        in[ aft.begin()->S ]=1;
        sum+=(aft.begin()->F.F);
        aft.erase(aft.begin());

if(sub){
    sum-=sub;
    sub=0;
    in[(--PRE.end())->S]=in2[(--PRE.end())->S]=0;
    pre.insert(*(--PRE.end()));
    PRE.erase (  --PRE.end() );
}

if( !PRE.empty() && (int)AFT.size()+(int)PRE.size()==k ){
    sub=(--PRE.end())->F.F;
}

}


if( (int)AFT.size()==ans && (int)AFT.size()+(int)PRE.size()==k ){
    printf("%d\n",ans);
    printf("%d\n",k);
    vector<int>v;
    for(auto x:AFT)v.push_back(x.S+1);
    for(auto x:PRE)v.push_back(x.S+1);
    sort(v.begin(),v.end());
    for(int j=0;j<k;j++)printf("%d%c",v[j],j+1==k?'\n':' ');
    return 0;
}

}

printf("0\n0\n");
return 0;
}
