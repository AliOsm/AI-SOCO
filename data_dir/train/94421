#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define int long long
#define ld long double
#define vi vector<int>
#define umap unordered_map
#define pii pair<int, int>
#define vpii vector<pii>
#define uset unordered_set
#define frw(i, a, b) for(auto i = (a); i < (b); i++)
#define bck(i, a, b) for(auto i = (a); i > (b); i--)
#define T() int testcases; cin >> testcases; frw(TC, 1, testcases + 1)
#define tez ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define fi first
#define se second
#define pow asdihagsiduh
#define pub push_back
#define in insert
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define sz(a) (int)(a.size())
#define sq(a) ((a) * (a))
 
#define trace(...) ZZ(#__VA_ARGS__, __VA_ARGS__)
template<typename Arg1> 
void ZZ(const char* name, Arg1&& arg1){
    cerr << name << " = " << arg1 << endl;
}
template<typename Arg1, typename... Args>
void ZZ(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');
    cerr.write(names, comma - names) << " = " << arg1;
    ZZ(comma, args...);
}
 
//console o/p without variable names
#define trace1(...) ZZ(__VA_ARGS__)
template<typename Arg1>
void ZZ(Arg1&& arg1){
    cerr << arg1 << endl;
}
template<typename Arg1, typename... Args>
void ZZ(Arg1&& arg1, Args&&... args){
    cerr << arg1 << ' ';
    ZZ(args...);
}
 
signed main(){
    tez
    int n, k; cin >> n >> k;
    vi a(n + 1), fr(1e6 + 5, 0);
    frw(i, 1, n + 1)    cin >> a[i], fr[a[i]]++;
    int ans = 0, l = 1, tl = 1, tr = 1;
    set<int> s;
    multiset<int> ss;
    frw(r, 1, n + 1){
        if(sz(s) <= k){
            s.in(a[r]);
            ss.in(a[r]);
        }
        while(sz(s) > k){
            ss.erase(ss.find(a[l]));
            if(ss.find(a[l]) == ss.end())
                s.erase(a[l]);
            l++;
        }
        if(ans < r - l + 1){
            ans = r - l + 1;
            tl = l;
            tr = r;
        }
    }
    cout << tl << " " << tr;
}