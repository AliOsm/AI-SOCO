#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <deque>
#include <algorithm>
#include <stdint.h>
using namespace std;

struct Solution
{
	template<typename T>
	void read(T& v)
	{
		for (auto & x : v)
		{
			cin >> x;
		}
	}

	void solve()
	{
		int n, m;
		cin >> n >> m;
		vector<string> a(n), b(m);
		read(a);
		read(b);
		set<string> qa, qb;
		for (auto & x : a)
		{
			qa.insert(x);
		}
		for (auto & x : b)
		{
			qb.insert(x);
		}
		vector< pair<bool, int> > wa, wb;
		for (int i = 0; i < n; ++i)
		{
			if (qb.count(a[i]))
			{
				wa.push_back(make_pair( true, i));
			}
			else
			{
				wa.push_back(make_pair(false, i));
			}
		}

		for (int i = 0; i < m; ++i)
		{
			if (qa.count(b[i]))
			{
				wb.push_back(make_pair( true, i));
			}
			else
			{
				wb.push_back(make_pair(false, i));
			}
		}
		sort(wa.rbegin(), wa.rend());
		sort(wb.rbegin(), wb.rend());
		int i = 0, j = 0;
		int cnt = 0;
		set<string> used;
		int ans = 0;
		while (i < n || j < m)
		{
			if (cnt++ % 2 == 0)
			{
				while (i < n && used.count(a[wa[i].second]))
				{
					++i;
				}
				if (i >= n)
				{
					ans = 0;
					break;
				}
				used.insert(a[wa[i].second]);
			}
			else
			{
				while (j < m && used.count(b[wb[j].second]))
				{
					++j;
				}
				if (j >= m)
				{
					ans = 1;
					break;
				}
				used.insert(b[wb[j].second]);
			}
		}
		if (ans)
			cout << "YES";
		else
			cout << "NO";
	}
};

int main(void)
{
	ios_base::sync_with_stdio(false);
	Solution().solve();
	return 0;
}