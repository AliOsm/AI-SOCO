#include <bits/stdc++.h>

using std::ios_base;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::fixed;

using std::vector;
using std::string;
using std::stack;
using std::queue;
using std::deque;
using std::map;
using std::set;
using std::unordered_map;
using std::unordered_set;

using std::tuple;
using std::make_tuple;
using std::pair;
using std::make_pair;

using std::sort;
using std::reverse;
using std::nth_element;

#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()

const int MAXN = 100000;
const int INF = 1e9;
const int MOD = 1e9+7;
const int64_t L_INF = 4e18;

int n, k;
int change[512], sz[512];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;

    cin >> n >> k;
    memset(change, -1, sizeof change);
    memset(sz, 0, sizeof sz);
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        if (change[x] != -1) {
            cout << change[x] << ' ';
            continue;
        }
        
        int y = x, c = 1;
        while (y > 0 && change[y - 1] == -1 && c < k) {
            y--;
            c++;
        }
        
        if (y == 0) {
            for (int j = y; j <= x; j++) {
                change[j] = y;
                sz[change[j]]++;
            }
            cout << change[x] << ' ';
            continue;
        }
        if (change[y - 1] != -1 && sz[change[y - 1]] + c <= k) {
            for (int j = y; j <= x; j++) {
                change[j] = change[y - 1];
                sz[change[j]]++;
            }
            cout << change[x] << ' ';
            continue;
        }
        for (int j = y; j <= x; j++) {
            change[j] = y;
            sz[change[j]]++;
        }
        cout << change[x] << ' ';
    }

    #ifdef LOCAL
        cerr << "\n== " << 1.0 * clock() / CLOCKS_PER_SEC << " sec.\n";
    #endif
    return 0;
}
