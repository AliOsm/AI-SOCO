#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct product 
{ 
  int cost, type, number;
};

bool product_cmp(const product &a, const product &b)
{ 
  return a.cost > b.cost;
}

int min_cost(const vector<product> &products)
{
  int m = INT_MAX;
  for(int i = 0; i < (int)products.size(); i++)
    m = min(m, products[i].cost);
  return m;
}

const int STOOL = 0, PENCIL = 1;

int main()
{
#ifndef ONLINE_JUDGE
#pragma warning(disable : 4996)
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#pragma warning(default : 4996)
#endif

  int n, k;
  scanf("%d %d\n", &n, &k);

  double cost = 0.0;
  vector<product> products[2];
  for(int i = 1; i <= n; i++)
  {
    product p;
    scanf("%d %d\n", &p.cost, &p.type);
    p.number = i;
    cost += p.cost;
    products[p.type - 1].push_back(p);
  }

  sort(products[STOOL].begin(), products[STOOL].end(), product_cmp);

  vector<vector<product> > baskets(k);
  int j = 0;
  for(int i = 0; i < products[STOOL].size(); i++)
  {
    baskets[j].push_back(products[STOOL][i]);
    if(j < k - 1)
      j++;
  }
  for(int i = 0; i < products[PENCIL].size(); i++)
  {
    baskets[j].push_back(products[PENCIL][i]);
    if(j < k - 1)
      j++;
  }
  
  for(int i = 0; i < min(k, (int)products[STOOL].size()); i++)
    cost -= 0.5 * min_cost(baskets[i]);

  printf("%.1f\n", cost);
  for(int i = 0; i < k; i++)
  {
    printf("%d", baskets[i].size());
    for(int j = 0; j < baskets[i].size(); j++)
      printf(" %d", baskets[i][j].number);
    putchar('\n');
  }

  return 0;
}

