#include <bits/stdc++.h>
using namespace std;

#define endl "\n"
#define long long long

class Graph{
    long int v;
    unordered_map<long int,list<long int>> adj;
    unordered_set<long int> hasParent;

    public:
        Graph(long int v):v(v){}

        void addEdge(long int u, long int v){
            adj[u].push_back(v);
            hasParent.insert(v);
        }

        void DFSUtil(long int s,unordered_set<long int> &visited){
            visited.insert(s);
            cout<<s<<" ";

            for(auto itr = adj[s].begin(); itr != adj[s].end(); itr++){
                if(visited.find(*itr) == visited.end()){
                    DFSUtil(*itr,visited);
                }
            }
        }

        void DFS(){
            long int s = -1;
            for(auto ele : adj)
              if(hasParent.find(ele.first) == hasParent.end()){
                s = ele.first;
                break;
              }
            
            unordered_set<long int> visited;
            DFSUtil(s,visited);
        }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    long int n;
    cin>>n;

    vector<long int> v(n);
    for(long int i = 0; i < n; i++)
        cin>>v[i];
    
    Graph g(n);

    for(long int i = 0; i < n; i++)
        for(long int j = 0; j < n; j++){
            if(v[i] * 2 == v[j] && i != j)
                g.addEdge(v[i],v[j]);
            
            if(v[i] % 3 == 0 && v[i] / 3 == v[j] && i != j)
                g.addEdge(v[i],v[j]);
        }

    g.DFS();
    return 0;
}
