// There is nothing in caterpillar that tells you its going to be a butterfly ------------------------------- !
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define pb push_back
#define f first
#define s second
#define mod 1000000007
#define inf 1e18

#define pi pair<ll,ll>
#define pii pair<pi,ll>
#define f first
#define mp make_pair
#define pb push_back
#define s second
#define rep(i,n) for(int i=0;i<n;i++)
#define forup(i,a,b) for(int i=a;i<=b;i++)
ll c[300011];
string s;
struct trie{
    int sz;
    trie* node[26];
    trie(){
        sz=0;
        rep(i,26) node[i]=NULL;
    };
};
vector<int>g[300011];
trie* merge(trie *a,trie* b){
    if(b==NULL){
        return a;
    }
    rep(i,26){
        if(b->node[i]!=NULL){
            if(a->node[i]==NULL){
                a->node[i]=new trie();
            }
            a->node[i]=merge(a->node[i],b->node[i]);
        }
    }
    a->sz=0;
    rep(i,26){
        if(a->node[i]){
            a->sz+=a->node[i]->sz+1;
        }
    }
    return a;
}
ll ans[300011];
trie* dfs(int v,int p){
    trie* t=new trie();
    trie* r=NULL;
    for(auto x:g[v]){
        if(x!=p){
            r=dfs(x,v);
                if(t->sz>=r->sz){
                    t=merge(t,r);
                }
                else{
                    t=merge(r,t);
                }
        }
    }
    r=new trie();
    r->node[s[v]-'a']=t;
    r->sz = r->node[s[v]-'a']->sz+1;
    ans[v] = r->sz;
    return r;
}
int main(){
    int n,u,v;
    cin >> n;
    rep(i,n){
        cin >> c[i];
    }
    cin >> s;
    rep(i,n-1){
        cin >> u >> v;
        u-- , v--;
        g[u].pb(v);
        g[v].pb(u);
    }
    dfs(0,-1);
    ll mx=0;
    ll num=0;
    rep(i,n){
        if(c[i]+ans[i]==mx){
            num++;
        }
        else if(c[i]+ans[i]>mx){
            mx=c[i]+ans[i];
            num=1;
        }
    }
    cout<<mx<<" "<<num<<"\n";
}
