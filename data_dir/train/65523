///==================================================///
///                HELLO WORLD !!                    ///
///                  IT'S ME                         ///
///               BISHAL GAUTAM                      ///
///         [ bsal.gautam16@gmail.com ]              ///
///==================================================///
#include<bits/stdc++.h>
#define PI acos(-1.0)
#define nl puts("")
#define SZ(x) x.size()
#define SQR(x) (x)*(x)
#define pb(x) push_back(x)
#define X first
#define Y second
#define pii pair<int,int>
#define S(a) scanf("%d",&a)
#define P(a) printf("%d",a)
#define SL(a) scanf("%lld",&a)
#define S2(a,b) scanf("%d%d",&a,&b)
#define SL2(a,b) scanf("%lld%lld",&a,&b)
#define all(v) v.begin(),v.end()
#define CLR(a) memset(a,0,sizeof(a))
#define SET(a) memset(a,-1,sizeof(a))
#define CPY(a,b) memcpy(a,b,sizeof(a))
#define fr(i,a,n) for(int i=a;i<=n;i++)
using namespace std;
typedef long long ll;
///  Digit    0123456789
#define MX    5005

///==================MAX-FLOW==O( v*v*edges )============///

const int L = 5001, N = 4*L, M = 100*L, inf = 111111111;
int s, t;
int ne,head[N],vex[M],cap[M],nxt[M],lvl[N],cur[N];

void add_edge(int u, int v, int c) {
    ++ne;
    vex[ne] = v;
    cap[ne] = c;
    nxt[ne] = head[u];
    head[u] = ne;
}

void add_biedge(int u, int v, int c) {
    add_edge(u, v, c);
    add_edge(v, u, 0);
}

bool bfs_lvl() {
    CLR(lvl);
    lvl[s] = 1;
    queue<int>q;
    for(q.push(s); !q.empty(); q.pop()) {
        int u = q.front();
        if(u == t) return true;
        for(int i=head[u]; i; i=nxt[i]) if( cap[i] && !lvl[vex[i]] )
                lvl[vex[i]] = lvl[u]+1, q.push(vex[i]);
    }
    return false;
}

int dfs(int u, int mn) {
    if(u == t) return mn;
    int sum = 0;
    for(int& i = cur[u]; i; i = nxt[i]) if(cap[i] && lvl[vex[i]]==lvl[u]+1)
            if(int f = dfs(vex[i], min(mn-sum, cap[i]))) {
                cap[i  ] -= f;
                cap[i^1] += f;
                if((sum+=f) == mn) return mn;
            }
    if(!sum) lvl[u] = -1;
    return sum;
}

int max_flow() {
    int flow = 0;
    while(bfs_lvl()) CPY(cur,head),flow+=dfs(s,inf);
    return flow;
}

void init( ) {
    ne=1;
    CLR(head);
}

int x[MX],y[MX];
int n,m;

void Build_graph(int md) {
    init();
   // fr(i,1,m) add_biedge(s,i,1);
    fr(i,1,m) {
        add_biedge(s,i,1);
        add_biedge(i,x[i]+m,1);
        add_biedge(i,y[i]+m,1);
    }
    fr(i,1,n) add_biedge(i+m,t,md);
}

int deg[MX+2];
int main() {
    int i,j,k;
    S2(n,m);
    s=0;///Source
    t=n+m+1;///Target
    fr(i,1,m) {
        scanf("%d%d",&x[i],&y[i]);
        deg[ x[i] ]++;
        deg[ y[i] ]++;
    }
    if(!m){
        printf("0\n");
        return 0;
    }
    int lo=1,hi=0,ret=inf;
    fr(i,1,n)hi=max(hi,(deg[i]+1)/2);
    //cout<<lo<< " & "<<hi<<endl;
    while(lo<=hi) {
        int md=(lo+hi)/2;
        Build_graph(md);
        // for(i = 2; i <= ne; i += 2)cap[i] += cap[i|1], cap[i|1] = 0;
        int mxf=max_flow();
        //cout<<md<< " : "<<mxf<<endl;
        if(mxf>=m) {
            ret=min(ret,md);
            hi=md-1;
        } else lo=md+1;
    }
    Build_graph(ret);
    max_flow();
    printf("%d\n",ret);
    int nw=2;
    for(i=1; i<=m; i++) {
        nw+=2;
        if(cap[nw]==0) printf("%d %d\n",x[i],y[i]);
        else printf("%d %d\n",y[i],x[i]);
        nw+=4;
    }

    return 0;
}
