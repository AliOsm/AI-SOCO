#include <bits/stdc++.h>

using namespace std;

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);

	int n, m, k, q;
	cin >> n >> m >> k >> q;
	vector<vector<int>> tr(n + 1, vector<int>(2, -1));
	for (int i = 0; i < k; ++i) {
		int r, c;
		cin >> r >> c;
		if (tr[r][0] == -1) {
			tr[r][0] = c;
		}
		else {
			tr[r][0] = min(tr[r][0], c);
		}
		tr[r][1] = max(tr[r][1], c);
	}
	set<int> b;
	for (int i = 0; i < q; ++i) {
		int x;
		cin >> x;
		b.insert(x);
	}
	vector<vector<long long>> dp(n + 1, vector<long long>(2));
	int elev = 0, prev[2];
	for (int i = 1; i <= n; ++i) {
		dp[i] = dp[i - 1];
		if (tr[i][0] != -1) {
			dp[i][0] = dp[i][1] = 1e18;
			int cur[] = { tr[i][0], tr[i][1] };
			if (i == 1) {
				dp[i][0] = 2 * cur[1] - 1 - cur[0] + elev;
				dp[i][1] = cur[1] - 1 + elev;
			}
			else {
				auto go = [&](int begin, int end) {
					auto it = b.lower_bound(prev[begin]);
					if (it != b.end()) {
						dp[i][end] = min(dp[i][end], dp[i - 1][begin] + *it - prev[begin] + abs(*it - cur[1 - end]));
					}
					if (it != b.begin()) {
						--it;
						dp[i][end] = min(dp[i][end], dp[i - 1][begin] + prev[begin] - *it + abs(*it - cur[1 - end]));
					}
				};
				go(0, 0);
				go(0, 1);
				go(1, 0);
				go(1, 1);
				dp[i][0] += elev + cur[1] - cur[0];
				dp[i][1] += elev + cur[1] - cur[0];
			}
			prev[0] = cur[0];
			prev[1] = cur[1];
			elev = 0;
		}
		else if (i == 1) {
			prev[0] = prev[1] = 1;
		}
		++elev;
	}
	cout << min(dp[n][0], dp[n][1]);
					
	return 0;
}