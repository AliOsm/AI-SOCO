// Daniel Grzegorzewski
// while (clock()<=69*CLOCKS_PER_SEC)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
// #pragma GCC target ("avx2")
// #pragma GCC optimization ("O3")
// #pragma GCC optimization ("unroll-loops")

#define MP make_pair
#define PB push_back
#define ST first
#define ND second
#define int long long

using namespace __gnu_pbds;
using namespace std;

template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

//X.find_by_order(k); - zwraca iterator na k-ty element (numeracja od zerowego)
//X.order_of_key(k); - zwraca liczbę elementów ostro mniejszych niż k

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VII;
typedef long long LL;

void init_ios() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

int n, p, w, d;

int odwr(int x, int y) {
  x %= y;
  assert(__gcd(x, y) == 1);
  assert(x > 0);
  PII p1 = {0, y};
  PII p2 = {1, x};
  while (p2.ND != 1) {
    int ile = p1.ND/p2.ND;
    PII p3;
    p3.ST = ((p1.ST-p2.ST*ile)%y+y)%y;
    p3.ND = ((p1.ND-p2.ND*ile)%y+y)%y;
    p1 = p2;
    p2 = p3;
  }
  return p2.ST;
}

signed main() {
  init_ios();
  cin >> n >> p >> w >> d;
  int gc = __gcd(w, d);
  if (p%gc) {
    cout<<"-1\n";
    return 0;
  }
  if (w > p) {
    if (p%d == 0) {
      int cnt = p/d;
      if (cnt > n) {
        cout<<"-1\n";
        return 0;
      }
      cout<<"0 "<<cnt<<" "<<n-cnt<<"\n";
      return 0;
    }
    else {
      cout<<"-1\n";
      return 0;
    }
  }
  if (w%d == 0) {
    int ilew = p/w;
    int iled = (p-w*ilew)/d;
    if (ilew+iled > n) {
      cout<<"-1\n";
      return 0;
    }
    cout<<ilew<<" "<<iled<<" "<<n-ilew-iled<<"\n";
    return 0;
  }
  // x*w + y*d == p
  w /= gc;
  d /= gc;
  p /= gc;
  int inv_w = odwr(w, d);
  int pp = p%d;
  int min_x = (inv_w*pp)%d;
  int dziel = p/w;
  int bla = d*(dziel/d)+d+min_x;
  while (bla > dziel)
    bla -= d;
  int x = bla;
  int y = (p-x*w)/d;
  if (y >= 0 && x+y <= n) 
    cout<<x<<" "<<y<<" "<<n-x-y<<"\n";
  else
    cout<<"-1\n";
}