// Bismillahirrahmanir Rahim
//NAMOMIZARAHID
#include<bits/stdc++.h>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<string>

#define nl printf("\n")
#define sp printf(" ")

#define rep(i,a,b) for(i=a;i<=b;i++)
#define rev(i,a,b) for(i=a;i>=b;i--)

#define fil freopen("input.txt","r",stdin)

#define pf printf
#define sf scanf


typedef long long l;
typedef unsigned long long ul;

using namespace std;

#define pi acos(-1.0)
#define mp make_pair
#define pb push_back
#define p_q priority_queue


#define dis( a ,b ) abs( a - b )
#define dis2d( x1 ,y1 ,x2 ,y2 )    sqrt( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) )
#define dis3d( x1 ,y1 ,z1 ,x2 ,y2 ,z2 )    sqrt( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) + ( z1 - z2 ) * ( z1 - z2 ) )


#define C(i) pf("Case %I64d: ",i)
#define Ci(i) pf("Case %d: ",i)


typedef pair< l ,l > pll;
typedef pair< string ,l > psl;
typedef pair< l ,string > pls;
typedef pair< string ,string > pss;
typedef pair< char ,l > pcl;
typedef pair< l ,char > plc;


#define Inf 0x7f7f7f
#define Max 200000001
#define Min -100000000001
#define mod 1000000007

#define ms0(a) memset(a,0,sizeof(a))
#define ms1(a) memset(a,1,sizeof(a))
#define ms_1(a) memset(a,-1,sizeof(a))


#define DBG pf("I am here\n")

#define valid(nx,ny,r,c) nx>=0&&nx<=r-1 && ny>=0&&ny<=c-1

#define ck_bt( v , p ) ( ( v >> p ) & 1 )



int inline in(){int x;sf("%d",&x);return x;}
l inline lin(){l x;sf("%I64d",&x);return x;}
void P(l x){pf("%I64d",x);}
void Pi(int x){pf("%d",x);}


l fx[]={0,0,-1,1,-1,-1,1,1};
l fy[]={-1,1,0,0,-1,1,-1,1};


/*
struct info
{
    l x,y,z;
    info() {};
    info(l _x, l _y , l _z) {x = _x; y = _y; z = _z;};

    bool operator < (const info &p) const
    {
		if(x == p.x) return y < p.y;
		else
			return x < p.x;
    }
};
*/



/*
    rep( i , 1 , n )
    {
        a[i] = lin() ;
    }

*/


/** Big mod **/

#define mod 1000000007
l bm(l b, l p)
{
    l namira;
    if(p==0)return 1;
    if(p%2==0)
    {
        namira=bm(b,p/2);
        return ((namira%mod)*(namira%mod))%mod;
    }
    else
    {
        return ((b%mod)*(bm(b,p-1)%mod))%mod;
    }
}


bool prm[1000007];
l N= 1000000;

void sieve()
{
    prm[1]=1;
    for(l i=2;i<=sqrt(N);i++)
    {
        if(prm[i]==0)
        {
            for(l j=i+i;j<=N;j=j+i)prm[j]=1;
        }
    }
}

l gcd(l a,l b)
{
     if(b == 0)
     {
         return a;
     }
     else
       return gcd(b, a % b);
}


/** Longest common multiplexer **/


l lcm(l a,l b)
{
    return (a*b)/gcd(a,b);
}



#define rng 300010

//set< l > na ;

//vector<l> V  ;



//queue< l > V , qr ;
queue< l > q  ;

//p_q <info> pq;



l  i , n , j , k ,n1 , a[rng] , b[rng] , c[rng]  ;

//pll a[rng] ;


//pll a[rng] ;

char s[rng] ;

//l a[rng][rng] , b[rng][rng] ;




l level[rng];
bool vis[rng],par[rng];
vector<l>V[rng];


/** SEGMENT TREE **/
/*
#define mx 100010

struct info{5 4 2 4 5 5 4 R D R U 2 2 5 5 R R 5 3 6 4 5 7 10 R D R U R 5 1 6 4 5 7 10 R D R U R 3 4 10 20 15 R D R
    int sum,prop;
}tree[mx*3];


void init(l node,l b,l e)
{
    if(b==e)
    {
        tree[node]=1;
        return;
    }
    l Left=node*2;
    l Right=node*2+1;
    l mid=(b+e)/2;
    init(Left,b,mid);
    init(Right,mid+1,e);
    tree[node]=tree[Left]+tree[Right];

}

l query(l node,l b,l e,l i,l j)
{
    if(b>j || e < i ) return 0;
    if( b>= i && e <= j )
    {
        return tree[node];
    }
    l Left=node*2;
    l Right=node*2+1;
    l mid=(b+e)/2;
    l p1=query(Left,b,mid,i,j);
    l p2=query(Right,mid+1,e,i,j);
    return p1+p2;

}
void update(l node,l b,l e,l i,l j)
{
    if (b > j || e < i) retufixprefixsuffixrn ;
    if ( b >= i && e<= j )
    {
        tree[node].prop++ ;
        tree[node].sum =
        return;
    }
    l Left=node*2;
    l Right=node*2+1;
    l mid=(b+e)/2;
    update(Left,b,mid,i,j);
    update(Right,mid+1,e,i,j);
    tree[node]=tree[Left]+tree[Right];
}
*/


/*
void z_algo()
{

    l L = 0 , R = 0 , i , j ;

    rep( i , 1 , n - 1  )
    {
        if( i > R )
        {
            L = i , R = i ;
            rep( j , L , n - 1 )
            {
                if( s[R - L] == s[j] ) R ++ ;
                else
                    break ;
            }
            z[i] = R - L ; R -- ;
        }
        else
        {
            if( z[i - L] < R - i + 1 ) z[i] = z[i - L] ;
            else
            {
                L = i ;
                rep( j , R  , n - 1 )
                {
                    if( s[ j - L ] == s[j] ) R ++ ;
                    elsenod
                        break ;
                }

                z[i] = R - L ; R -- ;
            }
        }
    }

}
*/


/** DFS **/


void dfs(l s)
{
    l u=s;
    vis[u]=1;
    q.push( s ) ;
    for(l i=0;i<V[u].size();i++)
    {
        l v=V[u][i];
        if(!vis[v])
        {
            vis[v]=1;
            par[v]=u;
            dfs(v);
        }
    }
}

#define m 1000000007


int main()
{

    l res ;
    //fil;
    //sieve();
    //freopen("out.txt","w",stdout);
    //pf("%d",'1'-48) ;
    //sf("%s",&s) ;
    //n = strlen( s ) ;




    //pf("%c",s[n]) ;
    //nl ;



    n = lin() ;
    l M = lin() ;

    rep( i , 1 , M )
    {
        l u = lin() ;
        l v = lin() ;
        V[u].pb( v ) ;
        V[v].pb( u ) ;
    }

    rep( i , 1 , n )
    {
        if( !vis[i] )
        {
            dfs( i ) ;
            l d = q.size() ;
            while( !q.empty() )
            {
                l x = q.front() ;
                q.pop() ;
                l d1 = V[x].size() ;
                if( d1 != d - 1 )
                {
                    pf("NO") ;
                    return 0 ;
                }
            }
        }
    }

    pf("YES") ;

    //res = min( res , A ) ;

    //P( res ) ;



    //sort( a + 1 , a + n + 1 ) ;

    //P( res ) ;


    //P( pos ) ; nl ;

    //gets(s);
    return 0;
}

