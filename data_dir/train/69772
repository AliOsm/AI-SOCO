#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
//#define int                 long long
#define ll              	long long
#define ld                  long double
#define rep(i,n)            for(int i=0;i<n;i++)
#define hell                1000000007LL
#define inf                 (ll)1e15
#define vi                  vector<int>
#define vii                 vector< vi >
#define pb                  push_back
#define mp                  make_pair
#define fi                  first
#define se                  second
#define pii                 pair<int,int>
#define all(c)              c.begin(),c.end()
#define sz(c)               (int)c.size()
#define hash1               105727LL
#define hash2               hell
#define eps                 1e-10
#define pi                  3.141592653589793238462643383279502884197
typedef tree<int,null_type,less<int>,
				rb_tree_tag,tree_order_statistics_node_update> statisticsTree;
ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
ll power(ll x, ll y,ll p)
{
	ll res=1;
	x=x%p;
	while(y>0)
	{
		if(y&1)
			res=(res*x)%p;
		y=y>>1;
		x=(x*x)%p;
	}
	return res;
}
ll raichu(ll x,ll y)
{
	ll res=1;
	while(y>0)
	{
		if(y&1)
			res=((res)*(x));
		y=y>>1;
		x=((x)*(x));
	}
	return res;
}
bool isprime(ll n)
{
	if(n<2) return false;
	else if(n==2) return true;
	else if(n%2==0) return false;
	else
	{
		ll z=sqrt(n);
		rep(i,z-1) if(n%(i+2)==0) return false;
		return true;
	}
}
void dfs(int c,int p,vector<vector<pii > > &g,vector<vector<ll> > &z)
{
	vi tmp(2,sz(g));
	vi len(2,0);
	int idx=0;
	for(auto i:g[c])
	{
		if(i.se!=p)
		{
			dfs(i.se,c,g,z);
			tmp[idx]=i.se;
			len[idx]=i.fi;
			idx++;
		}
	}
	int it1=0,it2=0;
	z[c].pb(0);
	while(it1<sz(z[tmp[0]]) && it2<sz(z[tmp[1]]))
	{
		if(z[tmp[0]][it1]+len[0]<=z[tmp[1]][it2]+len[1])
		{
			z[c].pb(z[tmp[0]][it1]+len[0]);
			it1++;
		}
		else
		{
			z[c].pb(z[tmp[1]][it2]+len[1]);
			it2++;
		}
	}
	while(it1<sz(z[tmp[0]]))
	{
		z[c].pb(z[tmp[0]][it1]+len[0]);
		it1++;
	}
	while(it2<sz(z[tmp[1]]))
	{
		z[c].pb(z[tmp[1]][it2]+len[1]);
		it2++;
	}
	return;
}
int32_t main()
{
	//freopen("B-large.in","r",stdin);
	//freopen("out4.txt","w",stdout);
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int tests=1,Tests;
	//cin>>tests;
	Tests=tests;
	while(tests--)
	{
		int n,m;
		cin>>n>>m;
		vector<vector<pair<int,int> > > g(n);
		vector<int> L(n-1);
		rep(i,n-1)
		{
			cin>>L[i];
			int u=(i+2);
			int v=(i+2)/2;
			g[--u].pb(mp(L[i],--v));
			g[v].pb(mp(L[i],u));
		}
		vector<vector<ll> > z(n+1);
		dfs(0,0,g,z);
		vector<vector<ll> > pre(n);
		rep(i,n)
		{
			ll sum=0;
			rep(j,sz(z[i]))
			{
				sum+=z[i][j];
				pre[i].pb(sum);
			}
		}
		while(m--)
		{
			int a;
			ll h;
			cin>>a>>h;
			a--;
			ll ans=0;
			ll l=0;
			int idx=upper_bound(z[a].begin(),z[a].end(),h-l)-z[a].begin()-1;
			ans+=(h*(idx+1)-((idx>=0)?pre[a][idx]:0));
			int prev=a;
			while(prev!=0 && l<=h)
			{
				int cur=(prev-1)/2;
				if(2*cur+1==prev)
				{
					l+=L[2*cur];
					idx=upper_bound(z[2*cur+2].begin(),z[2*cur+2].end(),h-(l+L[2*cur+1]))-z[2*cur+2].begin()-1;
					ans+=((h-(l+L[2*cur+1]))*(idx+1)-((idx>=0)?pre[2*cur+2][idx]:0));
				}
				else
				{
					l+=L[2*cur+1];
					idx=upper_bound(z[2*cur+1].begin(),z[2*cur+1].end(),h-(l+L[2*cur]))-z[2*cur+1].begin()-1;
					ans+=((h-(l+L[2*cur]))*(idx+1)-((idx>=0)?pre[2*cur+1][idx]:0));
				}
				if(h>=l) ans+=(h-l);
				prev=cur;
			}
			cout<<ans<<endl;
		}
	}
	return 0;
}