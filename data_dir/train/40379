#include <bits/stdc++.h>

using namespace std;

#define x first
#define y second
#define mp make_pair
#define pb push_back
#define sqr(a) ((a) * (a))
#define sz(a) int(a.size())
#define all(a) a.begin(), a.end()
#define forn(i, n) for(int i = 0; i < int(n); i++) 
#define fore(i, l, r) for(int i = int(l); i < int(r); i++)

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template <class A, class B> ostream& operator << (ostream& out, const pair<A, B> &a) {
	return out << "(" << a.x << ", " << a.y << ")";
}

template <class A> ostream& operator << (ostream& out, const vector<A> &v) {
	out << "[";
	forn(i, sz(v)) {
		if(i) out << ", ";
		out << v[i];
	}
	return out << "]";
}

mt19937 rnd(time(NULL));

const int INF = int(1e9);
const li INF64 = li(1e18);
const int MOD = INF + 7;
const ld EPS = 1e-9;
const ld PI = acos(-1.0);

const int N = 1000 + 13;

int n, m;
string s[N];

bool read () {
	if (scanf("%d%d", &m, &n) != 2)
		return false;
	static char buf[N];
	forn(i, n){
		scanf("%s", buf);
		s[i] = buf;
	}
	return true;
}

int add(int a, int b){
	a += b;
	if (a >= MOD) a -= MOD;
	return a;
}

int mul(int a, int b){
	return a * li(b) % MOD;
}

int C[N][N];
int a[N];

void solve() {
	forn(i, N){
		C[i][0] = C[i][i] = 1;
		fore(j, 1, i)
			C[i][j] = add(C[i - 1][j], C[i - 1][j - 1]);
	}
	
	a[0] = 1;
	fore(i, 1, N){
		a[i] = 0;
		forn(j, i)
			a[i] = add(a[i], mul(a[j], C[i - 1][j]));
	}
	
	map<vector<int>, int> cnt;
	forn(i, m){
		vector<int> pos;
		forn(j, n) if (s[j][i] == '1')
			pos.pb(j);
		++cnt[pos];
	}
	
	int ans = 1;
	for (auto it : cnt)
		ans = mul(ans, a[it.y]);
	
	printf("%d\n", ans);
}

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	
	int tt = clock();
	
#endif
	
	cerr.precision(15);
	cout.precision(15);
	cerr << fixed;
	cout << fixed;

#ifdef _DEBUG
	while(read()) {	
#else
	if(read()) {
#endif
		solve();
		
#ifdef _DEBUG
	cerr << "TIME = " << clock() - tt << endl;
	tt = clock();
#endif

	}
}