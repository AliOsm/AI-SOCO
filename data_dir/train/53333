#include <bits/stdc++.h>
typedef long long ll ;
using namespace std;

const ll OO = 1e18 ;

int n , m , k , res = 0 ;
struct edge{
    ll to , w ;
    bool train ;
    edge(int to , ll w , bool train) : to(to) , w(w) , train(train) {};
    bool operator < (const edge &e) const {
        if(w != e.w)
           return w > e.w ;
        return train ;
    }
};

/* It is guaranteed that there is at least one way from every city to the capital -_- */

vector < vector< edge > > adjlist(100500);
bool vis[100500];
void dijkstra(int src = 1)
{
     priority_queue < edge > Q ;

     Q.push(edge(src , 0 , 0));
     while(!Q.empty()){
          edge e = Q.top() ;
          Q.pop();
          if(vis[e.to]) continue ;
          vis[e.to] = true ;
          if(e.train) res++ ;

          for(auto ne : adjlist[e.to]){
                if(!vis[ne.to]){
                     Q.push( edge(ne.to , ne.w + e.w , ne.train));
                }
          }
     }
}

int main()
{
    ios::sync_with_stdio(false);

    scanf("%d%d%d",&n,&m,&k);

    for(int i = 0 ; i < m ; i++){
         int u , v ;
         ll w ;
        scanf("%d%d%I64d",&u,&v,&w);
         adjlist[u].push_back( edge(v , w , false ) );
         adjlist[v].push_back( edge(u , w , false ) );
    }

    for(int i = 0 ; i < k ; i++){
          int s ;
          ll w  ;
          scanf("%d%I64d",&s,&w);
          adjlist[1].push_back( edge(s , w , true) );
          adjlist[s].push_back( edge(1 , w , true) );
    }

    dijkstra();

    cout << k - res << endl ;






    return 0;
}
