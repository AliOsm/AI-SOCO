#include<bits/stdc++.h>

using namespace std;

const int N = 2e6 + 6, MOD = 1e9 + 7, mod = 998244353;

const long long INF = 2e17;

#define ss second
#define ff first
#define int long long
#define double long double
#define pb push_back

using vi = vector <int>;
using vp = vector <pair <int, int>>;

mt19937 Flash_new_51(515151);

int n, m, kol[N];
vector <vector <int>> a;
vector <vector <int>> dp, dp1;


signed main() {
    cin.tie(0);
    ios_base::sync_with_stdio(0);
    cin >> n >> m;
    a.resize(n), dp.resize(n), dp1.resize(n);
    for (int i = 0; i < n; i++) {
        a[i].resize(m), dp[i].resize(m), dp1[i].resize(m);
        for (int j = 0; j < m; j++) {
            char c;
            cin >> c;
            a[i][j] = (c == '#');
            dp[i][j] = dp1[i][j] = INT_MAX;
        }
    }
    dp[0][0] = 0;
    for (int i = 1; i < n; i++) if (!a[i][0]) dp[i][0] = dp[i - 1][0] + 1; else break;
    for (int i = 1; i < m; i++) if (!a[0][i]) dp[0][i] = dp[0][i - 1] + 1; else break;

    for (int i = 1; i < n; i++) {
        for (int j = 1; j < m; j++) {
             if (!a[i][j]) {
                dp[i][j] = min(dp[i][j - 1], dp[i - 1][j]) + 1;
             }
        }
    }
    if (dp[n - 1][m - 1] >= INT_MAX) {
        cout << 0;
        return 0;
    }
    if (n == 1 || m == 1) {
        cout << 1;
        return 0;
    }
    dp1[n - 1][m - 1] = 0;
    for (int i = n - 2; i >= 0; i--) if (!a[i][m - 1]) dp1[i][m - 1] = dp1[i + 1][m - 1] + 1; else break;
    for (int i = m - 2; i >= 0; i--) if (!a[n - 1][i]) dp1[n - 1][i] = dp1[n - 1][i  + 1] + 1; else break;

    for (int i = n - 2; i >= 0; i--) {
         for (int j = m - 2; j >= 0; j--) {
            if (!a[i][j]) {
                dp1[i][j] = min(dp1[i + 1][j], dp1[i][j + 1]) + 1;
            }
         }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if ((i == 0 && j == 0) || (i + 1 == n && j + 1 == m) )continue;
            if (dp[i][j] < INT_MAX && dp1[i][j] < INT_MAX) {
               // cout << dp[i][j] << endl << endl;
                kol[dp[i][j]]++;
            }
        }
    }
  //  return 0;
    for (int i = 0; i < n + m; i++) if (kol[i] == 1) {
        cout << 1;
        return 0;
    }
    cout << 2;

}
