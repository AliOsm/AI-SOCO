#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <climits>
#include <cctype>
#include <cmath>
#include <sstream>
#include <cstdlib>
#include <climits>
#include <ctime>
#include <set>
#include <map>
#include <numeric>
#include <utility>
#include <deque>
#include <queue>
#include <stack>
#include <iomanip>
#include <complex>
#include <list>
#include <bitset>
#include <fstream>
#include <limits>
#include <memory.h>
#include <tgmath.h>
#include <complex>
using namespace std;

typedef complex<int> point;
#define dp(a, b) ((conj(a) * b).real())
#define cp(a, b) ((conj(a) * b).imag())
#define angle(a) (atan2(a.imag(), a.real()))
#define rotate0(a, angle) (a * exp(point(0, angle)))
#define length(a) (hypot(a.imag(), a.real()))
#define rotateAr(a, angle, around) (rotate0(((a) - (around)),(angle)) + around)
#define reflect(a, m) (conj((a)/(m)) * (m))
#define normalize(a) ((a) / length(a));
typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define per(i, start, end) for(int i = (int)start-1; i >= end; --i)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const long double PI = 3.14159265358979323846;
const long double eps = (1e-7);
int dcmp(long double x, long double y)
{
	// -1 means left is bigger
	return fabs(x - y) <= eps ? 0 : x > y ? -1 : 1;
}

string s;
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
#ifndef ONLINE_JUDGE
	freopen("inputA.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
	int T;
	cin >> T;
	while (T--)
	{
		cin >> s;
		int up = 0, low = 0, dig = 0;
		rep(i,0,sz(s))
		{
			if (isdigit(s[i]))
				dig++;
			else if (isupper(s[i]))
				up++;
			else if (islower(s[i]))
				low++;
		}
		int tempLow = low, tempUp = up, tempDig = dig;
		string temp = s;
		for (int i = 0; i < 3; ++i)
		{
			if (isdigit(temp[i]) && tempDig > 1)
			{
				if (!tempUp)
				{
					temp[i] = 'A';
					tempDig--;
					tempUp++;
				}
				else if (!tempLow)
				{
					temp[i] = 'a';
					tempDig--;
					tempLow++;
				}
			}
			else if (isupper(temp[i]) && tempUp > 1)
			{
				if (!tempDig)
				{
					temp[i] = '1';
					tempUp--;
					tempDig++;
				}
				else if (!tempLow)
				{
					temp[i] = 'a';
					tempUp--;
					tempLow++;
				}
			}
			else if (islower(temp[i]) && tempLow > 1)
			{
				if (!tempDig)
				{
					temp[i] = '1';
					tempLow--;
					tempDig++;
				}
				else if (!tempUp)
				{
					temp[i] = 'A';
					tempLow--;
					tempUp++;
				}
			}
		}
		if (tempUp && tempLow && tempDig)
		{
			cout << temp << '\n';
		}

	}
	return 0;
}
