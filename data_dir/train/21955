#include <bits/stdc++.h>
using namespace std;
#define REP(i, n) for (int i = 0; i < int(n); i++)
#define FOREACH(i, v) for (__typeof((v).begin()) i = (v).begin(); i != (v).end(); i++)
#define SIZE(v) ((int)(v).size())
#define pb push_back
#define mp make_pair
#define st first
#define nd second
#define ll long long
#define pii pair<int, int>

struct str{
	int i, r, c;
	str(int ii, int rr, int cc){
		i = ii;
		r = rr;
		c = cc;
	}
};

pii nnext[10][100];
vector<str> ans;
int board[10][100];

int n;
void solve(){
	REP(i, n) if(board[0][i] == board[1][i] && board[0][i] != 0){
		ans.pb(str(board[1][i], 1, i + 1));
		board[1][i] = 0;
	}
	
	REP(i, n) if(board[2][i] == board[3][i] && board[3][i] != 0){
		ans.pb(str(board[2][i], 4, i + 1));
		board[2][i] = 0;
	}
}


int main(){
	int k; scanf("%d %d", &n, &k);
	REP(i, 4)
		REP(j, n) scanf("%d", &board[i][j]);
	
	for(int i = 0; i < n - 1; i++)
		nnext[1][i] = mp(1, i + 1);
	for(int i = n - 1; i >= 1; i--)
		nnext[2][i] = mp(2, i - 1);
	nnext[1][n - 1] = mp(2, n - 1);
	nnext[2][0] = mp(1, 0);

	solve();
	bool p = false;
	REP(i, n){
		if(board[1][i] == 0 || board[2][i] == 0) p = true;
	}
	if(!p) printf("-1\n");
	else{
		/*
		for(int i = 1; i <= 2; i++)
				REP(j, n){
					printf("<%d %d %d %d>\n", i, j, nnext[i][j].st, nnext[i][j].nd);
				}*/
		
		while(true){
			//REP(i, 4) REP(j, n) printf("%d%c", board[i][j], j == n - 1 ? '\n' : ' '); getchar();
			bool done = true;
			for(int i = 1; i <= 2; i++){
				bool q = false;
				REP(j, n){
					if(board[i][j] != 0 && board[nnext[i][j].st][nnext[i][j].nd] == 0){
						done = false;
						ans.pb(str(board[i][j], nnext[i][j].st + 1, nnext[i][j].nd + 1));
						board[nnext[i][j].st][nnext[i][j].nd] = board[i][j];
						board[i][j] = 0;
						q = true;
						break;
					}
				}
				if(q) break;
			}
			if(done) break;
			solve();
		}
		printf("%d\n", SIZE(ans));
		REP(i, SIZE(ans)) printf("%d %d %d\n", ans[i].i, ans[i].r, ans[i].c);
	}
	
	
}