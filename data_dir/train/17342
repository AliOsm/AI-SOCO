#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <numeric>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_popcount

#ifndef D
    #define dbg(x) 0
    #define dbgs(x) 0
#else
    #define dbg(x) cerr << (#x) << " --> " << (x) << endl
    #define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#endif

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 5e5 + 5;

int n, x, y, fen[N];
set < pii > s;
map < int, int > M, val;

void cut(int x) {

	type(s) it = s.lower_bound(mp(x + 1, 0));

	it--;

	if(it -> F != it -> S) {
		int l = it -> F;
		int r = it -> S;
		s.erase(it);
		s.insert(mp(l, x - 1));
		s.insert(mp(x, x));
		s.insert(mp(x + 1, r));
	}

}

int place(int x) {

	if(M.find(x) == M.end())
		return x;

	return M[x];

}

void up(int x, int k) {

	for(; x; x -= x & (-x))
		fen[x] += k;

}

int qu(int x) {

	int sum = 0;

	for(; x < N; x += x & (-x))
		sum += fen[x];

	return sum;

}

int main () {
    
    ios :: sync_with_stdio(0);
  
	cin >> n;

	s.insert(mp(1, 1e9));

	FOR(i, 1, n) {
		cin >> x >> y;
		cut(x);
		cut(y);
		int px = place(x);
		int py = place(y);
		M[x] = py;
		M[y] = px;
	}

	ll ans = 0;

	foreach(it, s) {
		int x = it -> F;
		int y = it -> S;
		if(x == y)
			x = y = place(x);
		val[x] = 1;
	}

	int cnt = 0;

	foreach(it, val)
		it -> S = ++cnt;

	foreach(it, s) {
		int x = it -> F;
		int y = it -> S;
		if(x == y)
			x = y = place(x);
		ans += (ll) qu(val[x]) * (y - x + 1);
		up(val[x], y - x + 1);
	}

	cout << ans << endl;

    return 0;
    
}
