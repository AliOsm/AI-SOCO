#include <iostream>
#include <algorithm>
#include <vector>
#include <functional>
#include <map>

using namespace std;

const int N = 1e6;
int n;
long long a[N];
long long uf[N];
long long sz[N];

int find(int x) {
  if (uf[x] < 0) return x;
  return uf[x] = find(uf[x]);
}

void unite(int x, int y) {
  x = find(x);
  y = find(y);
  uf[x] += uf[y];
  uf[y] = x;
}

long long get_size(int x) {
  return -uf[find(x)];
}

void init() {
  for (int i = 0; i < n; i++) {
    uf[i] = -1;
  }
}

int main() {
  cin >> n;

  for (int i = 0; i < n; i++) {
    scanf("%lld", &a[i]);
  }

  vector<vector<int>> g(n);
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    scanf("%d %d", &u, &v);
    u--;
    v--;
    g[u].push_back(v);
    g[v].push_back(u);
  }

  vector<int> p(n);
  for (int i = 0; i < n; i++) {
    p[i] = i;
  }

  long long ans = 0;
  init();
  sort(p.begin(), p.end(), [&](int i, int j) { return a[i] < a[j]; });
  for (int i : p) {
    for (int j : g[i]) if (a[i] >= a[j]) {
      if (find(i) == find(j)) continue;
      ans += get_size(i) * get_size(j) * a[i];
      unite(i, j);
    }
  }

  init();
  sort(p.begin(), p.end(), [&](int i, int j) { return a[i] > a[j]; });
  for (int i : p) {
    for (int j : g[i]) if (a[i] <= a[j]) {
      if (find(i) == find(j)) continue;
      ans -= get_size(i) * get_size(j) * a[i];
      unite(i, j);
    }
  }

  cout << ans << endl;
}
