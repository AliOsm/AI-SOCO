#include <bits/stdc++.h>

using namespace std;

#define long long long
#define INF (long) 1e18
#define MOD ((long) 1e9 + 7)
#define mll map<long, long>
#define pll pair<long, long>
#define umap unordered_map
#define uset unordered_set
#define pb push_back
#define pf push_front
#define FOR(i, a, b) \
  for (long i = a; i < (long) b; i++)
#define SORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr < b.atr; });
#define UNSORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr > b.atr; });
#define PRINTV(v) \
  FOR (_i, 0, v.size()) \
    printf("%lld ", v[_i]); \
  printf("\n");

vector<long> gera_primos(long n)
{
  vector<long> primos;
  vector<bool> crivo(n);
  primos.pb(2);
  for (long i = 3; i <= n; i += 2) {
    if (crivo[i]) continue;
    primos.pb(i);
    for (long j = i; j <= n; j += i) {
      crivo[j] = true;
    }
  }
  return primos;
}

struct Node
{
  long id;
  bool visitado = false;
  long val;
  set<long> out, in;

  Node() {
    static long i = 0;
    id = i++;
  }
};

int main()
{
  //ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

  long a, b, n;
  cin >> a >> b >> n;

  mll s;
  mll sum, rev;
  s[0] = sum[0] = 0;
  long soma_ant = 0;
  FOR (i, 1, 1e6 + 10) {
    long x = a + (i-1) * b;
    if (x > 1e6 + 10) break;
    s[x] = i;
    long soma = x + soma_ant;
    sum[soma] = i;
    rev[i] = soma;
    soma_ant = soma;
  }

  while (n--) {
    long l, t, m;
    cin >> l >> t >> m;

    auto it = s.upper_bound(t);
    it--;
    long r1 = it->second;
    auto jt = sum.upper_bound(t * m + rev[l-1]);
    jt--;
    long r2 = jt->second;
    long r = min(r1, r2);
    if (l <= r) {
      printf("%lld\n", r);
    } else puts("-1");
  }
}
