#include<bits/stdc++.h>
#include<tr1/unordered_map>
#define fi first
#define se second
#define show(a) cout<<a<<endl;
#define show2(a,b) cout<<a<<" "<<b<<endl;
#define show3(a,b,c) cout<<a<<" "<<b<<" "<<c<<endl;
using namespace std;

typedef long long ll;
typedef pair<int, int> P;
typedef pair<P, int> LP;
const ll inf = 0x3f3f3f3f;
const int N = 1e6 + 10;
const ll mod = 10007;
const int base=131;
tr1::unordered_map<ll,ll> mp;

ll n,m,id,x,y,k,q,cnt,flag;
ll num[1000000];//单词出现次数
ll tree[N][27];//tree[i][j]表示节点i的第j个儿子的节点编号
ll tot;//总结点数
string s;
int ans[N];
string t[N];
void ins(string str,int id)
{
	int root=0;
	int l=str.size();
	for(int i=l-1;i>=0;i--)
	{
		str[i]=tolower(str[i]);//zhuyi
		int id=str[i]-'a';
		if(!tree[root][id]) tree[root][id]=++tot;
		//num[tree[root][id]]++;    //每个节点数统计
		root=tree[root][id];

	}
	num[root]=id;//单词数统计
	//show2(root,id)
}
//void del(char *str)
//{
//	int root=0;
//	for(int i=0;str[i];i++)
//	{
//		int id=str[i]-'0';
//		//num[tree[root][id]]--;    //每个节点数减少
//		root=tree[root][id];
//
//	}
//	num[root]--;//单词数减少
//}
//int query(char *str)
//{
//	int root=0;
//
//	for(int i=0;str[i];i++)
//	{
//		int id=str[i]-'0';
//		if(!num[tree[root][id]])
//		{
//			return 0;
//		}
//		root=tree[root][id];
//	}
//	return num[root];
//}
int dfs(int x)
{
	if(x==n)
	{
		for(int i=1;i<=cnt;i++)
			cout<<t[ans[i]]<<" ";
		flag=1;
		return 1;
	}
	if(flag) return 1;
	int root=0;
	for(int i=x;i<n;i++)
	{
		int id=s[i]-'a';
		root=tree[root][id];

		if(!root) return 0;
		if(num[root])
		{
			ans[++cnt]=num[root];
			if(dfs(i+1))
			{
				return 1;
			}
			cnt--;

		}
	}
}
int main() {

	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin>>n;
	cin>>s;
	cin>>m;
	for(int i=1;i<=m;i++)
	{
		cin>>t[i];
		ins(t[i],i);
	}
	//for(int i=1;i<=tot;i++) if(num[i]) show2(i,num[i])
	dfs(0);


}
