#include <bits/stdc++.h>

//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

//using namespace __gnu_pbds;
using namespace std;

//template<typename T>
//using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef vector<int> vi;
typedef long long ll;

#define pb push_back
#define inf 0x3f3f3f3f
#define all(v) (v).begin() , (v).end()
#define ones(n) __builtin_popcount(n)
#define watch(x) cout << (#x) << " is " << (x) << endl

int di[] = {0, 0, 1, -1, 1, 1, -1, -1};
int dj[] = {1, -1, 0, 0, -1, 1, 1, -1};

int count_odds(string &s){
    vector<int> cnt(26 , 0);
    for(auto c : s){
        cnt[c - 'a']++;
    }
    int ret = 0;
    for(auto x : cnt)
        ret += (x & 1);
    return  ret;
}

int to_mask(string &s){
    vector<int> cnt(26 , 0);
    for(auto c : s){
        cnt[c - 'a']++;
    }
    int ret = 0;
    for(int i = 0 ; i < (int)s.size() ; ++i){
        if(cnt[s[i] - 'a'] & 1){
            ret |= (1 << (int)s[i] - 'a');
        }
    }
    return  ret;
}

bool cmp(string &s1 , string &s2){
    return to_mask(s1) > to_mask(s2);
}
int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
#endif
    int n;
    cin >> n;
    string a[n];
    for(int i = 0 ; i < n ; ++i)cin >> a[i];
    map<int , int> mp;
    int even = 0 , oneodd = 0;
    for(int i = 0 ; i < n ; ++i){
        int cnt = count_odds(a[i]);
        int msk = to_mask(a[i]);
        mp[msk]++;
    }

    sort(a , a + n , cmp);
    ll ans = 0;
    for(int i = 0 ; i < n ; ++i){
        int cnt = count_odds(a[i]);
        int msk = to_mask(a[i]);
        mp[msk]--;
        ans += mp[msk];
        for(int i = 0 ; i < 26 ; ++i){
            if(msk & (1 << i)){
                msk ^= (1 << i);
                ans += mp[msk];
                msk ^= (1 << i);
            }
        }
    }

    cout << ans << '\n';
}