#pragma GCC optimize("Ofast")
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
//#define int long long
#define ll long long
//#define int  unsigned long long
#define pb push_back
//#define double long double

using namespace std;
using namespace __gnu_pbds;
typedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
const int N = 2100;
const int mod = 998244353;
const int K = 18;
const int M = 16;
int a[10] = {119, 18, 93, 91, 58, 107, 111, 82, 127, 123};
int n, k;
pair <int, int> dp[N][N];
int b[N];
int cost[200][10];
int solve(int x, int y){
    if (x == n){
        if (y == 0) return 1;
        else return -1;
    }
    if (dp[x][y].F) return dp[x][y].F;
    int k = b[x];
    for (int i = 9; i >= 0; i--){
        if (cost[k][i] > y) continue;
        if (solve(x + 1, y - cost[k][i]) == 1){
            dp[x][y].F = 1;
            dp[x][y].S = i;
            return 1;
        }
    }
    dp[x][y].F = -1;
    return -1;
}
main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    cin >> n >> k;
    for (int i = 0; i < 128; i++){
        for (int j = 0; j <= 9; j++){
            if ((i & a[j]) != i){
                cost[i][j] = 3000;
            } else{
                cost[i][j] = __builtin_popcount((i ^ a[j]));
            }
        }
    }
    for (int i = 0; i < n; i++){
        string s;
        cin >> s;
        int x = 0;
        for (int j = 0; j < 7; j++){
            x = 2 * x + s[j] - '0';
        }
        b[i] = x;
    }
    solve(0, k);
    if (dp[0][k].F == -1){
        cout << -1;
        return 0;
    }
    for (int i = 0; i < n; i++){
        cout << dp[i][k].S;
        k -= cost[b[i]][dp[i][k].S];
    }
}
