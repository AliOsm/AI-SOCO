#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
    #define EXPECT(expr)
#endif
#define NO_IO_TIE ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for( auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for( auto & u: a) fin >> u; return fin; }
/* @@@ ----------------------------------- */

typedef struct {
    size_t first, last, depth;
} node_t;

size_t
dfs(const size_t root,
    const vector<vector<size_t>> & adj,
    vector<node_t> & tree)
{
    auto & self = tree[root];

    for(const auto u: adj[root])
        if(tree[u].depth == (size_t) -1)
        {
            auto & next = tree[u];
            next.depth = self.depth + 1;
            next.first = next.last = self.last + 1;
            self.last = dfs(u, adj, tree);
        }

    return self.last;
}

template<class value_t>
class Fenwick
{
    public:
        Fenwick(const size_t n): size(n), fen(size, 0){}
        /*! index zero is ignored !!! */
        Fenwick(const vector<value_t> & a): size(a.size()), fen(size, 0) {
            for(size_t i = 1; i < a.size(); ++ i)
                inc(i, a[i]);
        }
        inline void inc(size_t i, const value_t val) {
            /*! i > 0; `strictly` more than zero */
            for(; i < size; i += i & -i)
                fen[i] += val;
        }
        inline value_t acc(size_t i) {
            value_t out = 0;
            for(; i; i -= i & -i)
                out += fen[i];
            return out;
        }
    private:
        const size_t size;
        vector<value_t> fen;
};

void c383()
{
    size_t n, m;
    cin >> n >> m;
    vector<int> a(n);
    cin >>  a;

    vector<vector<size_t>> adj(n);
    for(size_t i = 0; i + 1 < n; ++ i)
    {
        size_t u, v;
        cin >> u >> v;
        -- u; -- v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    const size_t nil = -1;
    vector<node_t> tree(n, {nil, nil, nil});
    tree[0] = {1, 1, 0};
    dfs(0, adj, tree);

    Fenwick<int> fen(n + 2);

    for(; 0 < m; -- m)
    {
        size_t op, u;
        cin >> op >> u;
        -- u;
        if( op == 1 )
        {
            int val;
            cin >> val;
            if(tree[u].depth & 1) val = -val;
            fen.inc(tree[u].first, val);
            fen.inc(tree[u].last + 1, -val);
        }
        else
        {
            const auto & node = tree[u];
            const auto acc = fen.acc(node.first);
            cout << a[u] + (node.depth & 1 ? - acc: acc)  << '\n';
        }
    }

}


int main( const int argc, char * argv [])
{
    NO_IO_TIE;
    c383();

    return EXIT_SUCCESS;
}
