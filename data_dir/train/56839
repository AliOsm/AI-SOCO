#include <bits/stdc++.h>

using namespace std;

#define PB push_back
#define MP make_pair
#define f first
#define s second
#define FOR(i,a,b) for (int i = a; i < b; ++i)
#define RFOR(i, b, a) for (int i = b-1; i>=a; --i)
#define FILL(a, b) memset(a, b, sizeof a)
#define ALL(a) a.begin(), a.end()
#define SZ(a) ((int)a.size())

#define int long long

typedef long long LL;
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef pair<LL, LL> PLL;

const int INF = 1000 * 1000 * 1000;
const LL LINF = 1LL * INF*INF;
const int MAX = 1e5;
const double PI = acos(-1.);
const double EPS = 1e-8;

int n, m, timer;
int tin[100005], tout[100005], up[100005][20], dist[100005], d[100005][50];
bool used[100005];
vector<pair<int, int> >  x[100005];
set<PII> edge;

void dfs(int v, int par)
{
    used[v] = 1;
    up[v][0] = par;
    tin[v] = ++timer;

    for(int i = 1;i < 20;++i)
    {
        up[v][i] = up[up[v][i - 1]][i - 1];
    }

    for(auto i : x[v])
    {
        int to = i.f;
        int len = i.s;
        if (!used[to])
        {
            dist[to] = dist[v] + len;
            dfs(to, v);
            edge.erase(MP(min(to, v), max(to, v)));
        }
    }
    tout[v] = ++timer;
}

bool check(int a, int b)
{
    return tin[a] <= tin[b] && tout[b] <= tout[a];
}

int lca(int a, int b)
{
    if (check(a, b))
    {
        return a;
    }
    if (check(b, a))
    {
        return b;
    }
    for(int i = 19;i >= 0;--i)
    {
        if (!check(up[a][i], b))
        {
            a = up[a][i];
        }
    }
    return up[a][0];
}

void dij(int v, int num)
{
    set<pair<int, int> > q;
    FOR(i, 0, n)
    {
        d[i][num] = 1e18;
//        cout << d[i][num] << " ";
    }
//    cout << endl;
    d[v][num] = 0;
    q.insert(MP(d[v][num], v));

    while(!q.empty())
    {
        int u = q.begin()->s;
        q.erase(q.begin());

        for(auto e : x[u])
        {
            int to = e.f;
            int len = e.s;
            if (d[to][num] > d[u][num] + len)
            {
//                cout << to << " * " << u << " " << len << endl;
                q.erase(MP(d[to][num], to));
                d[to][num] = d[u][num] + len;
                q.insert(MP(d[to][num], to));
            }
        }
    }
}

 main()
{
    cin >> n >> m;
    FOR(i, 0, m)
    {
        int a, b, d;
        cin >> a >> b >> d;
        --a;
        --b;
        x[a].PB(MP(b, d));
        x[b].PB(MP(a, d));
        if (a > b)
        {
            swap(a, b);
        }
        edge.insert(MP(a, b));
    }

    dfs(0, 0);

    int kol = 0;
    for(auto i : edge)
    {
        dij(i.f, kol++);
//        cout << i.f << " " << i.s << endl;
//        FOR(i, 0, n)
//        cout << d[i][kol-1] << " ";
    }

//    cout << "\n\n";

    int q;
    cin >> q;

//    FOR(i, 0, n)
//    cout << dist[i] << " ";
//    cout << endl;
    while(q--)
    {
        int u, v;
        cin >> u >> v;
        --u;
        --v;
        if (u > v)
        {
            swap(u, v);
        }
        int ans = dist[u] + dist[v] - 2 * dist[lca(u, v)];
//        cout << ans <<  " == " << lca(u, v) + 1 << " = ";
        for(int i = 0;i < edge.size();++i)
        {
            ans = min(ans, d[v][i] + d[u][i]);
        }
        cout << ans << endl;
    }

	return 0;
}











