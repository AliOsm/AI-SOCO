#include <iostream>
#include <cmath>

using namespace std;

int wrong[4][4]={{0,0,1,1},{0,1,0,1},{1,1,1,0},{1,1,1,1}};

typedef long long int ll;

const ll modulo=1e9+7;

void add(ll &a,ll b)
{
  a=(a+b)%modulo;
}

void maximize(int &a,int b)
{
  a=max(a,b);
}

const int limit=3005;

int n;
int v[limit];
int leneq[limit][limit];
int leneqbefore[limit];
ll amount[limit];
ll amountend[limit];

bool correct(int i,int wrong[4])
{
  for (int d=0;d<4;d++)
    if (v[i+d]!=wrong[d])
      return true;
  return false;
}

bool correct(int i,int j)
{
  if (j<i or i+3<j) return false;
  if (j<i+3) return true;
  for (int ind=0;ind<4;ind++)
    if (not correct(i,wrong[ind]))
	return false;
  return true;
}

ll sol;

int main()
{
  cin>>n;
  for (int i=1;i<=n;i++)
    cin>>v[i];
  for (int i=n;i>=1;i--)
    for (int j=n;j>=i;j--)
      if (v[i]==v[j])
	leneq[i][j]=leneq[i+1][j+1]+1;
  for (int i=1;i<=n;i++)
    for (int j=1;j<i;j++)
      maximize(leneqbefore[i],leneq[j][i]);
  for (int i=1;i<=n;i++) {
    for (int j=i;j<=n;j++)
      amount[j]=0;
    amount[i-1]=1;
    for (int j=i;j<=n;j++) {
      for (int d=1;d<=4;d++)
	if (i<=j-d+1 and correct(j-d+1,j))
	  add(amount[j],amount[j-d]);
      if (j-i+1>leneqbefore[i])
	add(amountend[j],amount[j]);
    }
  }
  for (int i=1;i<=n;i++) {
    add(sol,amountend[i]);
    cout<<sol<<endl;
  }
}
