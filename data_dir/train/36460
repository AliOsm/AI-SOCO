#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1, class T2>inline void gmax(T1 &a, T2 b) { if (b>a)a = b; }
template <class T1, class T2>inline void gmin(T1 &a, T2 b) { if (b<a)a = b; }
const int N = 0, M = 0, Z = 1e9 + 7, ms63 = 0x3f3f3f3f;
LL n, a, b;
void solve()
{
	if (a*b >= n)
	{
		printf("%lld\n", a*b);
		printf("%lld %lld\n", a,b);
	}
	else
	{
		UL ans = 18e18;
		UL ansA = 1e12, ansB = 1e12;
		UL top = sqrt(n) + 100;

		bool flag = 0; if (a > b) { swap(a, b), flag = 1; }
		UL A, B;
		for (A = a; A <= top; ++A)
		{
			B = max((UL)b, n / A + (n%A > 0));
			if (A*B < ans)
			{
				ans = A*B;
				ansA = A;
				ansB = B;
			}
		}
		if (flag)swap(ansA, ansB);
		printf("%llu\n", ans);
		printf("%llu %llu\n", ansA,ansB);
	}
}
int main()
{
	while (~scanf("%lld%lld%lld", &n,&a,&b))
	{
		n *= 6;
		solve(); continue;
		LL ans = 9e18;
		LL ansA=1e12, ansB=1e12;
		LL A, B;
		if (a <= b)
		{
			for (A = a;; ++A)
			{
				B = max(b, n / a + (n%a>0));
				if (B < A)break;
				if (A*B < ans)
				{
					ans = A*B;
					ansA = A;
					ansB = B;
				}
			}
		}
		else
		{
			for (B = b;; ++B)
			{
				A = max(a, n / b + (n%b>0));
				if (A < B)break;
				if (A*B < ans)
				{
					ans = A*B;
					ansA = A;
					ansB = B;
				}
			}
		}
		printf("%lld\n", ans);
		printf("%lld %lld\n", ansA, ansB);
	}
	return 0;
}
/*
【trick&&吐槽】


【题意】


【类型】


【分析】


【时间复杂度&&优化】


【数据】
1000000000
1 1000000000

*/