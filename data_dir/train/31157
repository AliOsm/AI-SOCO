
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <array>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
#include <bitset>
#include <complex>
using namespace std;
#define rep(i, n) for (int (i) = 0; (i) < (n); (i) ++)
#define rep1(i, n) for (int (i) = 1; (i) <= (n); (i) ++)
#define FOR(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout<<#a<<" :";FOR(i123,x,y)cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int((x).size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int N;
int A[505];
vector<int> adj[505];
int mxh, lastnode;
int seen[505];
void dfs(int u, int prev, int h) {
  if (seen[u]) return;
  seen[u] = 1;
  if (mxh < h) {
    mxh = h;
    lastnode = u;
  }
  for (int v : adj[u]) {
    if (v == prev) continue;
    dfs(v, u, h + 1);
  }
}
int main() {
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  cin >> N;
  vector<int> nodes2;
  vector<int> nodes1;
  for (int i = 1; i <= N; i++) {
    cin >> A[i];
    if (A[i] >= 2) {
      nodes2.push_back(i);
    } else {
      nodes1.push_back(i);
    }
  }
  vector<pair<int,int> > edges;
  for (int i = 0; i + 1 < sz(nodes2); i++) {
    edges.push_back(mp(nodes2[i], nodes2[i + 1]));
    A[nodes2[i]]--;
    A[nodes2[i + 1]]--;
  }
  for (int node1 : nodes1) {
    reverse(nodes2.begin(), nodes2.end());
    for (int node2 : nodes2) {
      if (A[node2] > 0) {
        A[node1]--;
        A[node2]--;
        edges.push_back(mp(node1, node2));
        break;
      }
    }
  }
  for (pair<int,int> edge : edges) {
    int u = edge.first;
    int v = edge.second;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  dfs(1, -1, 0);
  for (int i = 1; i <= N; i++) {
    if (!seen[i]) {
      cout << "NO" << endl;
      return 0;
    }
  }
  int u = lastnode;
  mxh = 0;
  lastnode = 0;
  clr(seen);
  dfs(u, -1, 0);
  cout << "YES " << mxh << endl << sz(edges) << endl;
  for (pair<int,int> edge : edges) {
    cout << edge.first << " " << edge.second << endl;
  }
}

