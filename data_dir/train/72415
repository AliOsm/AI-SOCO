#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define clr(a,b) memset(a,b,sizeof(a))
#define all(v) ((v).begin()),((v).end())
#define read(v) freopen(v, "r", stdin)
#define write(v) freopen(v, "wt", stdout)
#define fastIO cout << fixed << setprecision(0), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-9, PI = acos(-1);
const int N = 2e5 + 9, M = 1e2 + 9, OO = 1e8 + 7, MOD = 1e9 + 7;
const ll inf = 1e18;

int dfn[N], lowLink[N], ndfn, inStack[N];
vector<int> adj[N];
stack<int> stk;
vector<int> comp;
vector<vector<int>> comps;

void tarjan(int node) {
  dfn[node] = lowLink[node] = ++ndfn;
  inStack[node] = 1;
  stk.push(node);
  for(int it: adj[node]) {
    if(!dfn[it]) {
      tarjan(it);
      lowLink[node] = min(lowLink[node], lowLink[it]);
    } else if(inStack[it])
      lowLink[node] = min(lowLink[node], dfn[it]);
  }
  if(lowLink[node] == dfn[node]) {
    comp.clear();
    int x = -1;
    while(x != node) {
      x = stk.top();
      stk.pop();
      inStack[x] = 0;
      comp.push_back(x);
    }
    comps.push_back(comp);
  }
}

ll fastPower(ll x, ll y) {
  ll ret = 1;
  x = x % MOD;
  while(y) {
    if(y & 1)
      ret = (ret * x) % MOD;
    y /= 2;
    x = (x * x) % MOD;
  }
  return ret % MOD;
}

int main() {
  fastIO;
//  read("input.in");
//  write("input.in");
  int n, u;
  cin >> n;
  for (int i = 1; i <= n; ++i) {
    cin >> u;
    adj[i].push_back(u);
  }
  for (int i = 1; i <= n; ++i)
    if(!dfn[i])
      tarjan(i);
  ll ans = 1;
  ll cnt = 0;
  for(auto it: comps) {
    if(it.size() == 1) continue;
    cnt += it.size();
    ans = ((( (ans * (fastPower(2, it.size()) - 2) ) ) % MOD) + MOD) % MOD;
  }
  ans = (ans * fastPower(2, n - cnt)) % MOD;
  cout << ans;
  return 0;
}
