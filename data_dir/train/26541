#include <bits/stdc++.h>
using namespace std;
const int N = 1000 * 1000 + 10;
stack<int> st;
int lv[2 * N + 10], ps[N], dp[N];
int getMn(int x) {
	int rtr = N;
	while(!st.empty() && ps[st.top()] > ps[x]) {
		st.pop();
	}
	if (!st.empty())
		rtr = st.top();
	st.push(x);
	return rtr;
}
int getFirst(int x) {
	int rtr = lv[ps[x] + N];
	if (rtr > N) {
		rtr = -1;
	}
	lv[ps[x] + N] = x;
	return rtr;
}
int main() {
	string s;
	cin >> s;
	memset(lv, 127, sizeof(lv));
	for (int i = 0; i < s.size(); i++) {
		if (s[i] == '(')
			ps[i + 1] = ps[i] + 1;
		else 
			ps[i + 1] = ps[i] - 1;
//		cout << ps[i] << " ";
	}
//	cout << endl;
	lv[ps[s.size()] + N] = s.size();
	int fc = getMn(s.size());
	for (int i = (int) s.size() - 1; i >= 0; i--) {
		int x = getFirst(i);
		int y = getMn(i);
//		cout << "i = " << i << " x = " << x << " y = " << y << endl;
		if (x > y) 
			continue;
		dp[i] = x - i + dp[x];
		dp[i] = max(dp[i], 0);
//		cout << "i = " << i << " : " << dp[i] << endl;
	}
	int mn = 0, cnt = 0;
	for (int i = 0; i < s.size(); i++) {
		mn = max(mn, dp[i]);
	}
	for (int i = 0; i < s.size(); i++) {
		if (dp[i] == mn) {
			cnt++;
		}
	}
	if (mn == 0) {
		cnt = 1;
	}
	cout << mn << " " << cnt;
	
	return 0;
}
