#include <bits/stdc++.h>
#define f first
#define s second
#define mp make_pair
#define pb push_back
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int N = 200002;
int cntAOdd[N], cntBOdd[N];
int cntAEven[N], cntBEven[N];
int dpLeftCnt[N], dpRightCnt[N];
int dpLeftMin[N], dpRightMin[N];
int neededLeft[N], neededRight[N];
int main()
{
    int n,m;
    string s;
    cin>>n>>s>>m;
    if(m > n)
        return cout<<0, 0;
    for(int i = 0;i<N;i++)
        neededRight[i] = 1E9;
    for(int i = 0;i<n;i++) {
        if(i) {
            cntAEven[i] = cntAEven[i-1];
            cntBEven[i] = cntBEven[i-1];
            cntAOdd[i] = cntAOdd[i-1];
            cntBOdd[i] = cntBOdd[i-1];
        }
        if(i % 2) {
            cntAOdd[i] += (s[i] == 'a')?1:0, cntBOdd[i] += (s[i] == 'b')?1:0;
        } else {
            cntAEven[i] += (s[i] == 'a')?1:0, cntBEven[i] += (s[i] == 'b')?1:0;
        }
    }
    for(int i = 0;i+m-1<n;i++) {
        int aOdd = cntAOdd[i+m-1] - ((i == 0)?0:cntAOdd[i-1]);
        int aEven = cntAEven[i+m-1] - ((i == 0)?0:cntAEven[i-1]);
        int bOdd = cntBOdd[i+m-1] - ((i == 0)?0:cntBOdd[i-1]);
        int bEven = cntBEven[i+m-1] - ((i == 0)?0:cntBEven[i-1]);
        if(i % 2) {
            if(bOdd || aEven)
                continue;
            neededRight[i] = m - aOdd - bEven;
        } else {
            if(bEven || aOdd)
                continue;
            neededRight[i] = m - aEven - bOdd;
        }
    }
    dpRightCnt[n-m] = neededRight[n-m] < 1E9?1:0;
    dpRightMin[n-m] = neededRight[n-m] < 1E9?neededRight[n-m]:0;
    for(int i= n-m+1;i<n;i++)
        dpRightCnt[i] =  dpRightMin[i] = 0;
    for(int i = n-m-1;i>=0;i--) {
        dpRightCnt[i] = dpRightCnt[i+1], dpRightMin[i] = dpRightMin[i+1];
        if(neededRight[i] < 1E9) {
            if(dpRightCnt[i+m] >= dpRightCnt[i]) {
                dpRightCnt[i] = dpRightCnt[i+m]+1;
                dpRightMin[i] = dpRightMin[i+m] + neededRight[i];
            } else if (dpRightCnt[i+m]+1 == dpRightCnt[i]) {
                dpRightMin[i] = min(dpRightMin[i],dpRightMin[i+m] + neededRight[i]);
            }
        }
    }
    cout<<dpRightMin[0];
    return 0;

}
