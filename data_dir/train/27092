#include<bits/stdc++.h>
using namespace std;
#define x first
#define y second
#define next sled
#define left levi
#define right pravi
#define y0 pewpew
#define y1 powpow
#define ld long double
#define pb push_back
#define mp make_pair
const int N=101123;
const int L=19;
int tin[N],tout[N],d[N],r[N],od[N],up[N][L+1];
vector<int> g[N],c[N],le[N];
int timer,n,m,x,y,z;
const int md=1e9+7;
void dfs(int v,int p=0){
    tin[v]=++timer;
    up[v][0]=p;
    for(int i=1;i<L;++i)
        up[v][i]=up[up[v][i-1]][i-1];
    for(int i=0;i<g[v].size();++i){
        int to=g[v][i];
        if(to==p)continue;
        d[to]=d[v]+1;
        r[to]=r[v]+c[v][i];
        if(c[v][i]==1){
            od[to]=od[v]+le[v][i];
        }
        dfs(to,v);
    }
    tout[v]=++timer;
}
bool upper(int x,int y){
    return (tin[x]<=tin[y]&&tout[x]>=tout[y]);
}
int lca(int x,int y){
    if(upper(x,y))return x;
    if(upper(y,x))return y;
    for(int i=L-1;i>=0;--i)
        if(up[x][i]!=0&&!upper(up[x][i],y))x=up[x][i];
    return up[x][0];
}
int ans;
void add(int x){
    ans+=x;
    if(ans>=md)ans-=md;
}
const int M=1000007;
int sum[M],dva[M];
int cur,s1,s2;
int q1[N],q2[N];
void ad1(int x,int y){
    ++q1[x];
    --q1[y];
}
void ad2(int x,int y){
    ++q2[x];
    --q2[y];
}

void dffs(int v,int p=0){
    for(int i=0;i<g[v].size();++i){
        int to=g[v][i];
        if(to==p)continue;
        dffs(to,v);
        q1[v]+=q1[to];
        q2[v]+=q2[to];
        if(c[v][i]==1){
            if(!le[v][i])add(sum[q1[to]]);
            else add(sum[q2[to]]);
        }
    }
}
main(){
    cin.tie(0);ios_base::sync_with_stdio(0);
   // freopen("input.txt","r",stdin);
    dva[1]=1;
    sum[1]=1;
    for(int i=2;i<=1000001;++i){
        dva[i]=dva[i-1]*2;
        if(dva[i]>=md)dva[i]-=md;
        sum[i]=sum[i-1]+dva[i];
        if(sum[i]>=md)sum[i]-=md;
    }
    cin>>n;
    for(int i=1;i<n;++i){
        cin>>x>>y>>z;;
        g[x].pb(y);
        g[y].pb(x);
        c[y].pb(z);
        c[x].pb(z);
        le[x].pb(0);
        le[y].pb(1);
    }
    dfs(1);
    cur=1;
    int v,k;
    cin>>m;
    for(int i=1;i<=m;++i){
        cin>>k;
        if(k==cur)continue;
        v=lca(cur,k);
        //cout<<cur<<' '<<k<<' '<<v<<endl;
        if(v==k){
            ad1(cur,k);
        }else
        if(v==cur){
            ad2(k,cur);
        }else
        {
        ad1(cur,v);
        ad2(k,v);
        }
        cur=k;
    }
    dffs(1);
    cout<<ans;
  //  for(int i=1;i<=n;++i)cout<<d[i]<<' '<<r[i]<<' '<<od[i]<<endl;


}
