#include <bits/stdc++.h>
using namespace std;

int N, len, wid;
int adj[10][10];
char grid[150][30][3];

const int DX[]={-1,1,0,0}, DY[]={0,0,-1,1};
bool vis[150][30][3];
void dfs(int x, int y, int z) {
	if (vis[x][y][z]) return;
	vis[x][y][z] = true;
	for (int a = 0; a < 4; a++) {
		int x2 = x+DX[a], y2 = y+DY[a], z2 = z;
		if (x2 < 0 || x2 >= wid || y2 < 0 || y2 >= len) continue;
		if (grid[x2][y2][z2] != '#') {
			while (z2 > 0 && grid[x2][y2][z2-1] != '#') --z2;
			dfs(x2, y2, z2);
		} else if (z != 2 && grid[x2][y2][z2+1] != '#') {
			dfs(x2, y2, z2+1);
		}
	}
}

int main()
{
	ios::sync_with_stdio(0);

	cin >> N;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			cin >> adj[i][j];

	if (N == 1)
	{
		cout << "1 1 1\n";
		cout << "1\n";
		return 0;
	}

	for (int i = 0; i < N; i++)
		adj[i][i] = 1;

	for (int k = 0; k < N; k++)
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				if (adj[i][k] && adj[k][j])
					adj[i][j] = 1;

	for (int i = 0; i < 150; i++)
		for (int j = 0; j < 30; j++)
			for (int k = 0; k < 3; k++)
				grid[i][j][k] = '#';
	
	for (int j = 0; j < N; j++)
		for (int i = 0; i < 3*N*(N - 1)/2; i++)
			grid[i][3*j + 1][0] = '.';

	int numEdges = 0;
	for (int a = 0; a < N; a++)
		for (int b = a + 1; b < N; b++)
		{
			int v[2] = {a, b};
			for (int j = 0; j < 2; j++)
			{
				int x = v[j];
				grid[3*numEdges][3*x][0] = '.';
				grid[3*numEdges][3*x][1] = '.';
				grid[3*numEdges + 1][3*x][1] = '.';
				grid[3*numEdges + 1][3*x][2] = '.';
				grid[3*numEdges + 2][3*x][2] = '.';
				grid[3*numEdges + 2][3*x][0] = '.';
			}
			for (int j = 3*a; j <= 3*b; j++)
				grid[3*numEdges + 2][j][2] = '.';
			if (adj[a][b] == 0)
				grid[3*numEdges + 2][3*a][1] = '.';
			if (adj[b][a] == 0)
				grid[3*numEdges + 2][3*b][1] = '.';
			numEdges++;
		}

	for (int j = 0; j < N; j++)
		grid[0][3*j + 1][0] = (char)(j + '1');

	len = 2*N + N - 1;
	wid = 3*N*(N - 1)/2;
	cout << len << " " << wid << " " << 3 << "\n";
	for (int k = 2; k >= 0; k--)
	{
		for (int i = 0; i < wid; i++)
		{
			for (int j = 0; j < len; j++)
				cout << grid[i][j][k];
			cout << "\n";
		}
		cout << "\n";
	}

	/*for (int a = 0; a < N; a++) {
		memset(vis, 0, sizeof vis);
		dfs(0, a*3+1, 0);
		for (int b = 0; b < N; b++) {
			if (vis[0][b*3+1][0] && !adj[a][b])
				cout << a << "->" << b << "\n";
		}
	}*/

	return 0;
}
