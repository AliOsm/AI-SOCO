# include <iostream>
# include <sstream>
# include <cstdio>
# include <cstdlib>
# include <algorithm>
# include <string>
# include <cstring>
# include <cmath>
# include <stack>
# include <queue>
# include <vector>
# include <list>
# include <map>
# include <set>
# include <deque>
# include <iterator>
# include <functional>
# include <bitset>
# include <climits>
# include <ctime>
using namespace std;
#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define odd(x) ((x)&1)
#define sqr(x) ((x)*(x))
#define mp make_pair
#define pb push_back
#define fir first
#define sec second
#define all(x) (x).begin(),(x).end()
#define rep(i,a,b) for (int i=(a); i<=(b); i++)
#define rep_it(it,x) for (__typeof((x).begin()) it=(x).begin(); it!=(x).end(); it++)
#define ____ puts("\n_______________\n\n")
#define debug(x) ____; cout<< #x << " => " << (x) << endl
#define debug_pair(x) cout<<"\n{ "<<(x).fir<<" , "<<(x).sec<<" }\n"
#define debug_arr(x,n) ____; cout<<#x<<":\n"; rep(i,0,n) cout<<#x<<"["<<(i)<<"] => "<<x[i]<<endl
#define debug_set(x) ____; cout<<#x<<": \n"; rep_it(it,x) cout<<(*it)<<" "; cout<<endl
#define debug_map(x) ____; cout<<#x<<": \n"; rep_it(it,x) debug_pair(*it)
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef vector<int> vi;
const int oo = /*2 * 1000 * 1000 * 1000*/0x3f3f3f3f;
const int _cnt = 1000 * 1000 + 7;
const int _p = 1000 * 1000 * 1000 + 7;
const double PI=acos(-1);
const double eps=1e-9;
int o(int x) { return x%_p; }
int gcd(int a, int b) { return b ? gcd(b, a%b) : a; }
int lcm(int a, int b) { return a / gcd(a, b)*b; }

void file_put() {
    freopen("filename.in", "r", stdin);
    freopen("filename.out", "w", stdout);
}

struct Seg_Tree {
    int maxv[35005*4+5],add[35005*4+5],ql,qr,qv,n;
    void init(int N) {
        n=N;
        rep(i,0,n<<2) maxv[i]=0;
        rep(i,0,n<<2) add[i]=0;
    }
    void update(int t,int l,int r){
        if (ql<=l && r<=qr) {
            add[t]+=qv;
            maxv[t]+=qv;
            return ;
        }
        int mid=(l+r)>>1;
        if (ql<=mid) update(t<<1,l,mid);
        if (qr>mid) update(t<<1|1,mid+1,r);
        maxv[t]=max(maxv[t<<1],maxv[t<<1|1])+add[t];
    }
    void modify(int l,int r,int v){
        ql=l; qr=r; qv=v;
        update(1,0,n);
    }
    int query() {
        return maxv[1];
    }
};

Seg_Tree T;
int n,k,a[35005],f[35005],g[35005],last[35005],p[35005];

int main() {
    //file_put();

    scanf("%d%d",&n,&k);
    rep(i,1,n) {
        scanf("%d",&a[i]);
        last[i]=p[a[i]];
        p[a[i]]=i;
    }
    while(k--) {
        T.init(n);
        rep(i,1,n) {
            T.modify(last[i],i-1,1);
            g[i]=T.query();
            T.modify(i,i,f[i]);
        }
        swap(f,g);
    }
    printf("%d\n",f[n]);

    return 0;
}
