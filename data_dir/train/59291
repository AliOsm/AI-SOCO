#include <bits/stdc++.h>
using namespace std;
int a[100010], sum[100010];

struct node
{
    long long x, y;
};

node p[100010];
node xx[100010], yy[100010];

bool cmpx(node x,node y)
{
    if (x.x != y.x) return x.x < y.x;
    return x.y < y.y;
}
bool cmpy(node x,node y)
{
    if (x.y != y.y) return x.y<y.y;
    return x.x<y.x;
}
long long dis(node x,node y)
{
    return (x.x-y.x)*(x.x-y.x)+(x.y-y.y)*(x.y-y.y);
}

node temp[100010];

void merge(int left,int mid,int right)
{
    int i=left,j=mid+1;
    int cnt=0;
    while (i<=mid&&j<=right)
    {
        if (p[i].y<p[j].y)
        {
            temp[cnt++]=p[i];
            i++;
        }
        else
        {
            temp[cnt++]=p[j];
            j++;
        }
    }
    if (i>mid)
        while (j<=right)
        {
            temp[cnt++]=p[j];
            j++;
        }
    else
        while (i<=mid)
        {
            temp[cnt++]=p[i];
            i++;
        }
    for (int i=left; i<=right; i++)
        p[i]=temp[i-left];
}
long long cal(int left,int right)
{
    if (right-left+1<=3)
    {
        sort(p+left,p+right+1,cmpy);
        long long res=dis(p[left],p[left+1]);
        for (int i=left; i<=right; i++)
            for (int j=i+1; j<=right; j++)
            {
                long long now=dis(p[i],p[j]);
                if (now<res) res=now;
            }
        return res;
    }
    int mid=(left+right)>>1;
    long long ans=cal(left,mid);
    long long ans2=cal(mid+1,right);
    if (ans>ans2) ans=ans2;
    long long middle=p[mid].x;
    merge(left,mid,right);
    int cnt=0;
    for (int i=left; i<=right; i++)
    {
        long long delta=abs(p[i].x-middle);
        if (delta * delta <=ans)
            yy[cnt++]=p[i];
    }
    long long res=ans;
    for (int i=0; i<cnt; i++)
    {
        for (int j=i+1; j<cnt; j++)
        {
            if ((yy[j].y-yy[i].y) * (yy[j].y - yy[i].y)>res) break;
            long long now=dis(yy[j],yy[i]);
            if (now<res) res=now;
        }
    }
    return res;
}


int main()
{
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &a[i]);
        sum[i] = a[i];
        if (i > 0) sum[i] += sum[i - 1];
    }
    for (int i = 0; i < n; i++)
    {
        p[i].x = i;
        p[i].y = sum[i];
    }
    sort(p, p + n, cmpx);
    printf("%I64d\n", cal(0, n - 1));
    return 0;
}
