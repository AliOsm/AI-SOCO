/*
 _     _                             
| |__ | |__   __ _  __ _ _   _  __ _ 
| '_ \| '_ \ / _` |/ _` | | | |/ _` |
| |_) | | | | (_| | (_| | |_| | (_| |
|_.__/|_| |_|\__,_|\__, |\__, |\__,_|
                   |___/ |___/       
*/
#include<bits/stdc++.h>
 
#define ll          long long
#define pb          push_back
#define ppb         pop_back
#define	endl		'\n'
#define mii         map<ll int,ll int>
#define msi         map<string,ll int>
#define mis         map<ll int, string>
#define mpi         map<pair<ll int,ll int>,ll int>
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define vs          vector<string>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define what_is(x)  cerr << #x << " is " << x << endl;
using namespace std;
 
#define N  1000005

ll int n,m;

ll int hash_(pii x)
{
	return (x.F-1)*m+x.S;
}

pii antihash_(ll int x)
{
	pii ret;
	ret.F=1+(x-1)/n;
	ret.S=x-(ret.F-1)*n;
	return ret;
} 

ll int parent[N];

ll int getparent(ll int child)
{
	if(parent[child]==child) return child;
	else return parent[child]=getparent(parent[child]);
}

void merge(ll int v1,ll int v2)
{
	if(getparent(v1)!=getparent(v2)) parent[getparent(v1)]=getparent(v2);
}

vi a[N];

ll int vis[N];

ll int dp[N];

void dfs(ll int node)
{
	// cout<<node<<endl;
	vis[node]=1;
	ll int mini=hell;
	for(auto i:a[node])
	{
		if(!vis[i])
		{
			dfs(i);
		}
		mini=min(mini,dp[i]-1);
	}
	dp[node]=mini;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		cin>>n>>m;
		for(ll int i=1;i<=n*m;i++) parent[i]=i;
		ll int arr[n+1][m+1];
		for(ll int i=1;i<=n;i++)
		{
			for(ll int j=1;j<=m;j++)
			{
				cin>>arr[i][j];
			}
		}
		vector<pii> v;
		for(ll int i=1;i<=n;i++)
		{
			v.clear();
			for(ll int j=1;j<=m;j++)
			{
				v.pb({arr[i][j],hash_({i,j})});
			}
			sort(all(v));
			for(ll int j=0;j+1<m;j++)
			{
				if(v[j].F==v[j+1].F)
				{
					merge(v[j].S,v[j+1].S);
				}
				// else
				// {
				// 	a[getparent(v[j].S)].pb(getparent(v[j+1].S));
				// }
			}
		}
		for(ll int j=1;j<=m;j++)
		{
			v.clear();
			for(ll int i=1;i<=n;i++)
			{
				v.pb({arr[i][j],hash_({i,j})});
			}
			sort(all(v));
			for(ll int i=0;i+1<n;i++)
			{
				if(v[i].F==v[i+1].F)
				{
					merge(v[i].S,v[i+1].S);
				}
				// else
				// {
				// 	a[getparent(v[i].S)].pb(getparent(v[i+1].S));
				// }
			}
		}
		for(ll int i=1;i<=n;i++)
		{
			v.clear();
			for(ll int j=1;j<=m;j++)
			{
				v.pb({arr[i][j],hash_({i,j})});
			}
			sort(all(v));
			for(ll int j=0;j+1<m;j++)
			{
				if(v[j].F==v[j+1].F)
				{
					// merge(v[j].S,v[j+1].S);
				}
				else
				{
					a[getparent(v[j].S)].pb(getparent(v[j+1].S));
				}
			}
		}
		for(ll int j=1;j<=m;j++)
		{
			v.clear();
			for(ll int i=1;i<=n;i++)
			{
				v.pb({arr[i][j],hash_({i,j})});
			}
			sort(all(v));
			for(ll int i=0;i+1<n;i++)
			{
				if(v[i].F==v[i+1].F)
				{
					// merge(v[i].S,v[i+1].S);
				}
				else
				{
					a[getparent(v[i].S)].pb(getparent(v[i+1].S));
				}
			}
		}
		ll int ans[n+1][m+1];
		ll int mini=hell;
		for(ll int i=1;i<=n;i++)
		{
			for(ll int j=1;j<=m;j++)
			{
				if(!vis[getparent(hash_({i,j}))])
				{
					// cout<<"start "<<i<<" "<<j<<endl;
					dfs(getparent(hash_({i,j})));
				}
				ans[i][j]=dp[getparent(hash_({i,j}))];
				mini=min(mini,ans[i][j]);
			}
		}
		for(ll int i=1;i<=n;i++)
		{
			for(ll int j=1;j<=m;j++)
			{
				cout<<ans[i][j]-mini+1<<" ";
			}
			cout<<endl;
		}
		// for(ll int i=1;i<=n*m;i++) cout<<getparent(i)<<" ";cout<<endl;
		// for(ll int i=1;i<=n*m;i++) cout<<dp[getparent(i)]<<" ";cout<<endl;
	}
	return 0;
}