#include <bits/stdc++.h>

#define f first
#define s second

#define pb push_back
#define ppb pop_back
#define mp make_pair

#define ld long double
#define ll long long
#define ull unsigned ll
#define pii pair <int, int>
#define pll pair <ll, ll>

#define bit(x) __builtin_popcountll(x)
#define all(x) x.begin(), x.end()
#define sqr(x) ((x) * 1ll * (x))
#define sz(x) (int)x.size()

#define purple ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define rep(_i, _from, _to) for (int _i = _from; _i <= _to; ++_i)
#define per(_i, _from, _to) for (int _i = _from; _i >= _to; --_i)

#define nl '\n'
#define ioi exit(0);

#define _27day ""

using namespace std;

const int N = 1e5 + 7, mod = 1e9 + 7, inf = 1e7 + 7;
const ll linf = (ll)1e18 + 7;
const ld eps = 1e-15, pi = 3.141592;
const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1}, dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

  int n, ans;
  int a[N], sz[N], res[N], upres[N];

  bool big[N];

  vector <int> g[N];


  struct tree {
    int val, cnt;
  } t[N << 2];

  inline void update(int pos, int add, int v = 1, int tl = 1, int tr = N) {
    if (tl == tr) {
      t[v].val += add;
      if (!t[v].val) t[v].cnt = 0;
      else t[v].cnt = 1;
      return;
    }
    int tm = tl + tr >> 1;
    if (pos <= tm) update(pos, add, v + v, tl, tm);
    else update(pos, add, v + v + 1, tm + 1, tr);
    t[v].cnt = t[v + v].cnt + t[v + v + 1].cnt;
  }

  inline void calc(int v, int p) {
    sz[v] = 1;
    for (auto i : g[v])
      if (i != p) calc(i, v), sz[v] += sz[i];
  }

  int cnt[N];

  inline void add(int v, int p, int x) {
    if (x == 1) {
      if (!cnt[a[v]]) ans++;
      cnt[a[v]]++;
    }
    else {
      if (cnt[a[v]] == 1) ans--;
      cnt[a[v]]--;
    }

    update(a[v], -x);

    for (auto i : g[v])
      if (i != p && !big[i]) add(i, v, x);
  }

  inline void dfs(int v = 1, int p = 1, bool keep = 0) {
    int mx = -1, id = -1;
    for (auto i : g[v])
      if (i != p && sz[i] > mx) mx = sz[i], id = i;

    for (auto i : g[v])
      if (i != p && i != id) dfs(i, v, 0);

    if (id != -1) dfs(id, v, 1), big[id] = 1;

    add(v, p, 1);

    res[v] = ans, upres[v] = t[1].cnt;

    if (id != -1) big[id] = 0;
    if (!keep) add(v, p, -1);
  }

  inline void go(int v = 1, int p = 1) {
    bool good = 1;
    for (auto i : g[v]) {
      if (i != p) {
        if (res[i] > 1) good = 0;
      }
    }

    if (upres[v] > 1) good = 0;

    if (good) {
      cout << "YES\n" << v;
      ioi
    }

    for (auto i : g[v])
      if (i != p) go(i, v);
  }

int main() {
  #ifndef _27day
    freopen (_27day".in", "r", stdin);
    freopen (_27day".out", "w", stdout);
  #endif

  scanf ("%d", &n);
  rep(i, 1, n - 1) {
    int v, u;
    scanf ("%d%d", &v, &u);
    g[v].pb(u);
    g[u].pb(v);
  }

  rep(i, 1, n)
    scanf ("%d", &a[i]), update(a[i], 1);

  calc(1, 1);
  dfs();
  go();
  cout << "NO";
  ioi
}