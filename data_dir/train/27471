#include<iostream>
#include<algorithm>

#define F first
#define S second
#define pii pair<int, int>
#define int long long

using namespace std;

const int MAXN = 1e5 + 5, SEG = 4e5 + 5;
pii c[MAXN];
int sum[SEG], ps[MAXN], a[MAXN];
pair<int, pii > q[MAXN];
int n;

void add(int p, int x = 1, int l = 0, int r = n)
{
	if(l == r - 1)
	{
		sum[x]++;
		return;
	}
	int mid = (l + r) / 2;
	if(p < mid)
		add(p, 2 * x, l, mid);
	else
		add(p, 2 * x + 1, mid, r);
	sum[x] = sum[2 * x] + sum[2 * x + 1];
}

int get(int ql, int qr, int x = 1, int l = 0, int r = n)
{
	if(ql <= l && r <= qr)
		return sum[x];
	int mid = (l + r) / 2, ans = 0;
	if(ql < mid)
		ans = get(ql, qr, 2 * x, l, mid);
	if(qr > mid)
		ans += get(ql, qr, 2 * x + 1, mid, r);
	return ans;
}

int check(int x)
{
	for(int i = 0; i < n; i++)
	{
		q[i] = {x + (i == 0?0:ps[i - 1]), {i, n}};
		//	cout << i << ' ' << n << "	" << x + (i == 0?0:ps[i - 1]) << endl;
	}
	sort(q, q + n);
	fill(sum, sum + SEG, 0);
	int ans = 0, j = n - 1;
	for(int i = n - 1; i >= 0; i--)
	{
		int x = c[i].F;
		while(j >= 0 && q[j].F >= x)
		{
//			cout << q[j].S.F << ' ' << q[j].S.S << endl;
			ans += get(q[j].S.F, q[j].S.S);
			j--;
		}
//		cout << c[i].S << endl;
		add(c[i].S);
	}
	while(j >= 0)
	{
		ans += get(q[j].S.F, q[j].S.S);
		j--;
	}
	return ans;
}

main()
{
	ios::sync_with_stdio(false);
	cin >> n;
	int k;
	cin >> k;
	for(int i = 0; i < n; i++)
		cin >> a[i];
	ps[0] = a[0];
	for(int i = 1; i < n; i++)
		ps[i] = a[i] + ps[i - 1];
	for(int i = 0; i < n; i++)
		c[i] = {ps[i], i};
	sort(c, c + n);
	int lo = -1e15, hi = 1e15;
	while(hi - lo > 1)
	{
		int mid = (lo + hi) / 2;
		if(check(mid) > k - 1)
			lo = mid;
		else
			hi = mid;
	}
	cout << hi << endl;
	return 0;
}
