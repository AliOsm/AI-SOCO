#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>
#include <numeric>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

constexpr long long MAX = 5100000;
constexpr long long INF = 1LL << 60;
constexpr int inf = 1 << 28;
constexpr long long mod = 1000000007LL;
//constexpr long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

ll n, m;
vector<ll> f(vector<ll>& v) {
	int n = v.size();
	vector<ll> res;
	for (int S = 0; S < (1 << n); S++) {
		ll sum = 0;
		for (int i = 0; i < n; i++) {
			if (S >> i & 1) {
				sum += v[i];
				if (sum >= m) sum -= m;
			}
		}
		res.push_back(sum);
	}
	sort(res.begin(), res.end());
	return res;
}

int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/

	scanf("%lld %lld", &n, &m);
	vector<ll> a(n); for (int i = 0; i < n; i++) scanf("%lld", &a[i]), a[i] %= m;
	vector<ll> sum1, sum2;
	{
		vector<ll> v;
		for (int i = 0; i < n / 2; i++) {
			v.push_back(a[i]);
		}
		sum1 = f(v);
		v.clear();
		for (int i = n / 2; i < n; i++) {
			v.push_back(a[i]);
		}
		sum2 = f(v);
	}

	ll res = 0;
	if (sum1.size() > 0) chmax(res, sum1.back());
	if (sum2.size() > 0) chmax(res, sum2.back());
	for (int i = 0; i < sum1.size(); i++) {
		ll req = m - 1 - sum1[i];
		auto itr = upper_bound(sum2.begin(), sum2.end(), req);
		if (itr != sum2.end()) chmax(res, (*itr + sum1[i]) % m);
		if (itr != sum2.begin()) {
			itr--;
			chmax(res, (*itr + sum1[i]) % m);
		}
		req = 2 * m - 1 - sum1[i];
		itr = upper_bound(sum2.begin(), sum2.end(), req);
		if (itr != sum2.end()) chmax(res, (*itr + sum1[i]) % m);
		if (itr != sum2.begin()) {
			itr--;
			chmax(res, (*itr + sum1[i]) % m);
		}
	}
	cout << res << endl;
	return 0;
}
