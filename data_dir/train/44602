/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ld PI = 3.14159265358979323846;

#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const int N = 2e6+5;
int dp[N];
bool avail[N];

class BMicroWorld {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n, k; in>>n>>k;
		memset(dp, 0, sizeof(dp));
		memset(avail, false, sizeof(avail));
		f(i, n){
			int x; in>>x;
			dp[x]++;
			avail[x] = 1;
		}
		rep(i, 1, N-1) dp[i] += dp[i-1];
		int res = 0;
		f(i, N){
			if(!avail[i]) continue;
			if(!(dp[i+k]-dp[i])) res += (dp[i]-dp[i-1]);
		}
		out<<res;
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	BMicroWorld solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
