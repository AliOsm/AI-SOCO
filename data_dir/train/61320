#include<bits/stdc++.h>
#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
#define lli long long int
#define ulli unsigned long long int
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define pf pop_front()
#define lb lower_bound
#define ub upper_bound
#define bs binary_search
#define loopl(i,a,b) for(lli i=a;i<b;i++) 
#define loop(i,a,b) for(int i=a;i<b;i++)
#define mod 1000000007
#define inf 1000000000000000
#define lld long double
#define pll pair<long long int,long long int>
#define vll vector<lli>
#define stp setprecision(15)
#define eps 0.000001
#define endl '\n'
#define ll lli
 
using namespace std ;
 
typedef tree<pll,null_type,less<pll>,rb_tree_tag,
tree_order_statistics_node_update> indexed_set;
#define N 2000000
 
lli a[N] , tr[2*N][2] , sum[21][2] = {{0}};
lli status[21] = {0};
vll seg[2*N];
 
void merge_with_effect(lli n)
{
    lli si = seg[2*n].size(),i=0,j=0;
 
    while(i<si && j<si)
    {
        if(seg[2*n][i] > seg[2*n + 1][j])
        {
            seg[n].pb(seg[2*n + 1][j]);
            j++;
        }
 
        else if(seg[2*n][i] <= seg[2*n + 1][j])
        {
            seg[n].pb(seg[2*n][i]);
            i++;
        }
    }
 
    while(i<si)
    {
        seg[n].pb(seg[2*n][i]);
        i++;
    }
 
    while(j<si)
    {
        seg[n].pb(seg[2*n + 1][j]);
        j++;
    }
}
 
lli merge(vll a,vll b)
{
    lli inv=0;
 
    lli i=0,j=0;
    lli si = a.size();
 
    while(i<si && j<si)
    {
        if(a[i] <= b[j])
        i++;
 
        else
        {
            inv += si-i;
            j++;
        }        
    }
    return inv;
}
 
void build(lli n,lli s,lli e,lli ht)
{
    if(s == e)
    {
        tr[n][0] = tr[n][1] = 0;
        seg[n].pb(a[s]);
        return ;
    }
 
    lli mid = (s+e)/2;
    build(2*n,s,mid,ht-1);
    build(2*n + 1,mid+1,e,ht-1);
    tr[n][0] = merge(seg[2*n] , seg[2*n + 1]);
    tr[n][1] = merge(seg[2*n + 1] , seg[2*n]);
    sum[ht][0] += tr[n][0];
    sum[ht][1] += tr[n][1];
    merge_with_effect(n);
}
 
 
int main() 
{ 
 
/////////////////////////////////////
    
    fastio;
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
    #endif
 
/////////////////////////////////////    
 
    lli pw[21];
    pw[0] = 1;
 
    loopl(i,1,21) pw[i] = 2*pw[i-1];
 
    lli nn;
    cin>>nn;
 
    lli n = pw[nn];
 
    loopl(i,1,n+1) cin>>a[i];
 
    build(1,1,n,nn);
 
    //loopl(i,1,8) cout<<i<<" "<<tr[i][0]<<" "<<tr[i][1]<<endl;
 
    lli q;
    cin>>q;
 
    while(q--)
    {
        lli x,ans=0;
        cin>>x;
        
        loopl(i,0,nn+1)
        {
            if(i <= x)
            {
                status[i] = 1-status[i];
            }
            
            ans += sum[i][status[i]];
        }
 
        cout<<ans<<endl;            
    }
 
} 