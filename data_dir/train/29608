/*
    PHULKAARI 
                --Gippy Grewal
                                            */
#include<bits/stdc++.h>
using namespace std;
typedef long long int lli;
lli mod=1e9+7ll;
lli INF=1e17;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcountll(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctzll(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clzll(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffsll(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("calc.in")
#define of1 ofstream fout("calc.out")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
// typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,m;
const double pi1=3.14159265358979323846;
//matrix exponentiation is associative and distributive
lli me(lli a,lli b)
{
    lli res=1;
    while(b)
    {
        if(b&1)
        res=(res%mod*a%mod)%mod;
        a=a*a;
        a%=mod;
        b=b>>1;
    }
    return res;
}
lli mI(lli a)
{
    return (me(a,mod-2)%mod+mod)%mod;
}
bool val[5005][5005];
lli dp[5005][5005];
char s[5005];
int main()
{
    ios_base::sync_with_stdio(0);
    scanf("%s",s);
    n=strlen(s);
    for(int i=1;i<=n;i++)
    {
        val[i][i]=1;
        dp[i][i]=1;
        for(int j=i-1;j>=1;j--)
        {
            if(s[j-1]==s[i-1])
            {
                if(i-1<=j+1)
                {
                    val[j][i]=1;
                }
                else
                {
                    val[j][i]=(val[j+1][i-1])?1:0;
                }
            }
            dp[j][i]=dp[j][i-1]+dp[j+1][i]-dp[j+1][i-1]+val[j][i];
        }
    }
    lli q;
    scanf("%lld",&q);
    for(int i=1;i<=q;i++)
    {
        lli x,y;
        scanf("%lld%lld",&x,&y);
        printf("%lld\n",dp[x][y]);
    }
}