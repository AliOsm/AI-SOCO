#include <bits/stdc++.h>
using namespace std;

const int MAXN=105, HRF=26;

struct segment {
	int val[HRF];
	
	void build(string S) {
		for (int i=0;i<HRF;i++) {
			val[i]=0;
		}
		
		for (char c : S) {
			val[c-'a']++;
		}
		
		return;
	}
	
	char del(segment S) {
		for (int i=0;i<HRF;i++) {
			if (val[i]>S.val[i]) {
				return 'a'+i;
			}
		}
		
		return 0;
	}
	
	bool subs(segment S) {
		for (int i=0;i<HRF;i++) {
			if (val[i]>S.val[i]) {
				return 0;
			}
		}
		
		return 1;
	}
	
	bool operator < (const segment S) const {
		for (int i=0;i<HRF;i++) {
			if (val[i]!=S.val[i]) {
				return val[i]<S.val[i];
			}
		}
		
		return 0;
	}
	
	bool operator == (const segment S) const {
		for (int i=0;i<HRF;i++) {
			if (val[i]!=S.val[i]) {
				return 0;
			}
		}
		
		return 1;
	}
	
	segment operator + (const segment S) const {
		segment ret;
		
		for (int i=0;i<HRF;i++) {
			ret.val[i]=val[i]+S.val[i];
		}
		
		return ret;
	}
	
	segment operator - (const segment S) const {
		segment ret;
		
		for (int i=0;i<HRF;i++) {
			ret.val[i]=val[i]-S.val[i];
		}
		
		return ret;
	}
	
}
save;

int N, last;
string S, P[2];
segment A[2][MAXN];
vector <segment> V[MAXN], C;

int main () {
	cin>>N;
	cout<<"? 1 "<<N<<endl;
	
	for (int i=0;i<N;i++) {
		for (int j=i;j<N;j++) {
			cin>>S;
			save.build(S);
			V[S.length()].push_back(save);
		}
	}
	
	if (N==1) {
		cout<<"! "<<S<<endl;
		return 0;
	}
	
	cout<<"? 1 "<<N/2<<endl;
	
	for (int i=0;i<N/2;i++) {
		for (int j=i;j<N/2;j++) {
			cin>>S;
			save.build(S);
			V[0].push_back(save);
		}
	}
	
	sort(V[0].begin(),V[0].end());
	
	if (N>3) {
		cout<<"? 2 "<<N/2<<endl;
		
		for (int i=1;i<N/2;i++) {
			for (int j=i;j<N/2;j++) {
				cin>>S;
				save.build(S);
				C.push_back(save);
			}
		}
		
		sort(C.begin(),C.end());
	}
	
	last=0;
	for (segment x : V[0]) {
		if (last<C.size()&&x==C[last]) {
			last++;
			continue;
		}
		
		P[0]+=x.del(A[0][P[0].length()]);
		A[0][P[0].length()]=x;
	}
	
	for (int i=1;i<=N/2;i++) {
		C.clear();
		
		for (int j=1;j<i;j++) {
			C.push_back(V[N][0]-A[0][j]-A[1][i-j]);
		}
		
		sort(C.begin(),C.end());
		sort(V[N-i].begin(),V[N-i].end());
		
		last=0;
		for (segment x : V[N-i]) {
			if (last<i-1&&x==C[last]) {
				last++;
				continue;
			}
			
			A[1][i]=A[1][i]+V[N][0]-x;
		}
		
		A[1][i]=A[1][i]-A[0][i];
		P[1]+=A[1][i].del(A[1][i-1]);
	}
	
	if (N&1) {
		P[0]+=V[N][0].del(A[0][N/2]+A[1][N/2]);
	}
	
	reverse(P[1].begin(),P[1].end());
	cout<<"! "<<P[0]<<P[1]<<endl;
	return 0;
}
