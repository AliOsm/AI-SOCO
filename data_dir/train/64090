#include<bits/stdc++.h>
#define MOD 1000000007
#define ll long long
#define mp make_pair
#define pb push_back 
#define N 300010
using namespace std;
ll A[N], tree[N];
void upd(int a, ll val){
	for(int i = a; i < N; i = i + (i & (-1 * i)))
		tree[i] += val;
}
ll query(int a){
	ll ans = 0;
	for(int i = a; i > 0; i = i - (i & (-1 * i)))
		ans += tree[i];
	return ans;
}
ll qrg(int a, int b){
	if(a > b)
		return 0;
	if(a <= 1)
		return query(b);
	return query(b) - query(a - 1);
}
int main(){
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	ll n;
	cin >> n;
	vector<pair<ll, int> > df;
	for(int i = 1; i <= n; i++){
		cin >> A[i];
		df.pb(mp(A[i], i));
	}
	sort(df.begin(), df.end());
	A[0] = -1e18;
	sort(A, A + n + 1);
	ll k;
	cin >> k;
	for(int i = 1; i <= n; i++)
		upd(i, A[i]);
	unsigned ll curval = 0;
	for(int i = 1; i <= k; i++){
		curval += A[i] * (i - 1) - qrg(1, i - 1);
	}
	pair<unsigned ll, pair<int, int> > mini = mp(1e19, mp(1e9, 1e9));
	int low = 1, high = k;
	while(1){
		//cerr << curval << '\n';
		mini = min(mini, mp(curval, mp(low, high)));
		if(high < n){
			curval += A[high + 1] * (k - 1) - qrg(high + 1 - k + 1, high);
			curval -= qrg(low + 1, low + k - 1) - A[low] * (k - 1);
			low++;
			high++;
		}
		else break;
	}
	for(int i = mini.second.first; i <= mini.second.second; i++){
		cout << (*lower_bound(df.begin(), df.end(), mp(A[i], -1))).second << ' ';
	}
	cout << '\n';

}