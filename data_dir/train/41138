#include<bits/stdc++.h>
using namespace std;
//#define int                 long long
#define ll                  long long
#define ld                  long double
#define rep(i,n)            for(int i=0;i<n;i++)
#define hell                1000000007
#define inf                 (ll)1e15
#define vi                  vector<int>
#define vii                 vector< vi >
#define pb                  push_back
#define mp                  make_pair
#define fi                  first
#define se                  second
#define pii                 pair<int,int>
#define all(c)              c.begin(),c.end()
#define sz(c)               (int)c.size()
#define hash1               105727LL
#define hash2               hell
#define eps                 1e-10
#define pi                  3.141592653589793238462643383279502884197
ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
ll power(ll x, ll y,ll p)
{
	ll res=1;
	x=x%p;
	while(y>0)
	{
		if(y&1)
			res=((res%p)*(x%p))%p;
		y=y>>1;
		x=((x%p)*(x%p))%p;
	}
	return res;
}
ll raichu(ll x,ll y)
{
	ll res=1;
	while(y>0)
	{
		if(y&1)
			res=((res)*(x));
		y=y>>1;
		x=((x)*(x));
	}
	return res;
}
bool isprime(ll n)
{
	if(n<2) return false;
	else if(n==2) return true;
	else if(n%2==0) return false;
	else
	{
		ll z=sqrt(n);
		rep(i,z-1) if(n%(i+2)==0) return false;
		return true;
	}
}
const int N=400000;
vector<ll> tree(N,0);
vector<int> lazy(N,N);
void build(int c,int l,int r,vi &b,int n)
{
	if(l>r || l<0 || r>=n) return;
	else if(l==r)
	{
		tree[c]=b[l];
		return;
	}
	else
	{
		int mid=(l+r)>>1;
		build(2*c+1,l,mid,b,n);
		build(2*c+2,mid+1,r,b,n);
		tree[c]=tree[2*c+1]+tree[2*c+2];
		return;
	}
}
ll update(int c,int l,int r,int x,int y,int k,vector<ll> &A,int n)
{
	if(l>r || l<0 || r>=n) return 0;
	if(lazy[c]!=N)
	{
		ll sum=A[lazy[c]+r];
		if(lazy[c]+l-1>=0) sum-=A[lazy[c]+l-1];
		tree[c]=sum;
		if(l!=r)
		{
			lazy[2*c+1]=lazy[c];
			lazy[2*c+2]=lazy[c];
		}
		lazy[c]=N;
	}
	if(l>y+k-1 || r<y) return tree[c];
	else if(y<=l && y+k-1>=r)
	{
		if(l!=r)
		{
			lazy[2*c+1]=x-y;
			lazy[2*c+2]=x-y;
		}
		ll sum=A[x-y+r];
		if(x-y+l-1>=0) sum-=A[x-y+l-1];
		tree[c]=sum;
		return tree[c];
	}
	else
	{
		int mid=(l+r)>>1;
		ll L=update(2*c+1,l,mid,x,y,k,A,n);
		ll R=update(2*c+2,mid+1,r,x,y,k,A,n);
		tree[c]=L+R;
		return tree[c];
	}
}
ll query(int c,int l,int r,int x,vector<ll> &A,int n)
{
	if(l>r || l<0 || r>=n) return 0;
	if(lazy[c]!=N)
	{
		ll sum=A[lazy[c]+r];
		if(lazy[c]+l-1>=0) sum-=A[lazy[c]+l-1];
		tree[c]=sum;
		if(l!=r)
		{
			lazy[2*c+1]=lazy[c];
			lazy[2*c+2]=lazy[c];
		}
		lazy[c]=N;
	}
	if(r<x || l>x) return 0;
	else if(l==r && l==x) return tree[c];
	else
	{
		int mid=(l+r)>>1;
		ll L=query(2*c+1,l,mid,x,A,n);
		ll R=query(2*c+2,mid+1,r,x,A,n);
		return L+R;
	}
}
int32_t main()
{
	//freopen("B-large.in","r",stdin);
	//freopen("out4.txt","w",stdout);
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int tests=1,Tests;
	//cin>>test;
	Tests=tests;
	while(tests--)
	{
		int n,m;
		cin>>n>>m;
		vi a(n),b(n);
		vector<ll> A(n);
		rep(i,n) cin>>a[i];
		rep(i,n) cin>>b[i];
		ll sum=0;
		rep(i,n)
		{
			sum+=a[i];
			A[i]=sum;
		}
		build(0,0,n-1,b,n);
		while(m--)
		{
			int t;
			cin>>t;
			if(t==1)
			{
				int x,y,k;
				cin>>x>>y>>k;
				--x,--y;
				ll ans=update(0,0,n-1,x,y,k,A,n);
			}
			else
			{
				int x;
				cin>>x;
				--x;
				ll ans=query(0,0,n-1,x,A,n);
				cout<<ans<<endl;
			}
		}
	}
	return 0;
}