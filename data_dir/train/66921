
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

int N, M;
char pm[100100];
int id[100100];
int was[100100];
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0); cin.tie(0);
  cin >> N >> M;
  rep1(i,M) cin >> pm[i] >> id[i];
  vector<int> v;
  // 1. a person who never shows up in the log
  // can always be a leader
  // it is because he could have been in the room the entire time
  int initcount = 0;
  rep1(i,M)
  {
    if (!was[id[i]] && pm[i] == '-')
      initcount++;
    was[id[i]]=1;
  }
  rep1(i,N) if (!was[i]) v.pb(i);

  // 2. a person's first log was +
  // then the only way he could be a possible leader
  // is if he was the first + in the whole log
  int possibleLeader = -1;
  rep1(i,M) if (pm[i] == '+')
  {
    possibleLeader = id[i];
    break;
  }
  if (possibleLeader >= 1)
  {
    int cnt = initcount;
    int good = 1;
    int isHeInTheRoom = 0;
    if (cnt >= 1)
    {
      good &= isHeInTheRoom;
    }
    rep1(i,M)
    {
      if (pm[i] == '+')
      {
        cnt ++;
        if (id[i] == possibleLeader) isHeInTheRoom = 1;
      }
      else
      {
        cnt --;
        if (id[i] == possibleLeader) isHeInTheRoom = 0;
      }
      if (cnt >= 1)
      {
        good &= isHeInTheRoom;
      }
//      db(good);
    }
//    db(good);
    if (good)
    {
      v.pb(possibleLeader);
    }
  }

  // 3. a person's first log was -
  // then the only way he could be a possible leader
  // is
  // a) either that's the last log (M-th log) or the log right after that is he leaving the room
  // b) when he left the room, every one who has + log must have left already
  vector<int> possible(100100);
  rep1(i,N) if (was[i]) possible[i] = 1;
  int cnt = initcount;
  for (int i = 1; i <= M;)
  {
    if (pm[i] == '-')
      cnt --;
    else
      cnt ++;
    if (i == M)
    {
      possible[id[i]] &= (pm[i] == '-' && cnt == 0);
      i = i + 1;
    }
    else
    {
      int cur = (pm[i] == '-' && pm[i+1] == '+' && id[i+1] == id[i] && cnt == 0);
      possible[id[i]] &= cur;
      if (cur) 
      {
        cnt ++;
        i = i + 2;
      }
      else 
      {
        i = i + 1;
      }
    }
  }
  rep1(i,N) if (possible[i]) v.pb(i);
  sort(v.begin(), v.end());
  cout << sz(v) << endl;
  if (sz(v) > 0)
    rep(i,sz(v)) cout << v[i] << (i+1<sz(v)?' ':'\n');
}
