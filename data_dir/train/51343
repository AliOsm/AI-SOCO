#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>

using namespace std;



#define pb push_back
#define pii pair<int, int>
#define mp make_pair
#define ull unsigned long long
#pragma comment(linker, "/STACK:64000000")

typedef long double ld;
typedef pair<ld, ld> pldld;
typedef long long ll;
typedef pair<ll, ll> pll;


typedef unsigned int ui;
typedef unsigned char uc;
const int infi = 1e9 + 7;
const ll infl = 1e18;




/** Interface */

inline int readChar();
inline void writeChar( int x ); 
inline void writeWord( const char *s );
inline void flush();

/** Read */

static const int buf_size = 4096;

inline int getChar() {
  static char buf[buf_size];
  static int len = 0, pos = 0;
  if (pos == len)
    pos = 0, len = fread(buf, 1, buf_size, stdin);
  if (pos == len)
    return -1;
  return buf[pos++];
}

inline int readChar() {
  int c = getChar();
  while (c >= 0 && c <= 32)
    c = getChar();
  return c;
}
//char bf[10];
inline int readWord(char *bf) {
	char *cur = bf;
	*cur = getChar();
	
  while (*cur <= 32)
    *cur = getChar();
  while (*cur > 32) {
	++cur;
	*cur = getChar();
  }
  return cur - bf;
}

inline int readInt() {
  int s = 1, c = readChar();
  int x = 0;
  if (c == '-')
    s = -1, c = getChar();
  while ('0' <= c && c <= '9')
    x = x * 10 + c - '0', c = getChar();
  return s == 1 ? x : -x;
}

/** Write */

static int write_pos = 0;
static char write_buf[buf_size];

inline void writeChar( int x ) {
  if (write_pos == buf_size)
    fwrite(write_buf, 1, buf_size, stdout), write_pos = 0;
  write_buf[write_pos++] = x;
} 

inline void flush() {
  if (write_pos)
    fwrite(write_buf, 1, write_pos, stdout), write_pos = 0;
}

inline void writeInt(ll x ) {
  if (x < 0)
    writeChar('-'), x = -x;

  char s[24];
  int n = 0;
  while (x || !n)
    s[n++] = '0' + x % 10, x /= 10;
  while (n--)
    writeChar(s[n]);
}

inline void writeWord( const char *s ) {
  while (*s)
    writeChar(*s++);
}

double dp[1010][1010];
int used[1010][1010];
double din(int w, int b) {
	if (w == 0)
		return 0;
	if (b == 0)
		return 1;
	if (used[w][b])
		return dp[w][b];
	double &ans = dp[w][b];
	used[w][b] = 1;
	double d = (double)w / (double)(w + b);
	ans = d;
	if (b != 1) {
		double d1 = (double)w / (double)(w + b - 1);
		d1 = (1.0 - d) * (1.0 - d1);
		double d2 = (double)w / (double)(w + b - 2);
		if (w > 0 && b > 1)
			ans += d1 * d2 * din(w - 1, b - 2);
		if (b > 2)
			ans += d1 * (1.0 - d2) * din(w, b - 3);
	}
	return ans;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.sync_with_stdio(false);
	cin.tie(0);
	//freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
	//freopen("partition.in", "r", stdin);freopen("partition.out", "w", stdout);
	int w, b;
	cin >> w >> b;
	cout.precision(20);
	cout << fixed;
	cout << din(w, b);
	//flush();
	return 0;
}