// Let's bring the sky down :)
#include<bits/stdc++.h>
#define ll long long
using namespace std;
const int N = 1e5 + 5;
const ll M = 1e9 + 7;
ll power(ll x, ll y){
    x %= M;
    ll ans = 1;
    while(y){
        if(y & 1)
            ans = (ans * x) % M;
        y >>= 1LL;
        x = (x * x) % M;
    }
    return ans;
}
ll ad(ll a, ll b){
    return((a % M + b % M) % M);
}
ll sub(ll a, ll b){
    return((a % M - b % M + M) % M);
}
ll mul(ll a, ll b){
    return(((a % M) * (b % M)) % M);
}
ll divi(ll a, ll b){
    return(mul(a, power(b, M - 2)) % M);
}
ll a[N];
vector<int> prime;
bool p[N];
void solve(int x){
    p[0] = p[1] = 1;
    for(int i = 2; i < N; i++){
        if(p[i] == 0){
            //prime.push_back(i);
            for(int j = i + i; j < N; j += i){
                p[j] = 1;
            }
        }
    }
    for(int i = 2; i < N; i++){
        if(p[i] == 0){
            if(x % i == 0){
                prime.push_back(i);
                while(x > 0 && x % i == 0){
                    x /= i;
                }
            }
        }
    }
    if(x > 1) prime.push_back(x);
}
int main()
{
    ios_base ::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    ll x, n;
    cin >> x >> n;
    solve(x);
    ll ans = 1LL;
    for(auto i : prime){
        ll yo = i;
        ll p = 1;
        ll cnt = 0;
        while(p <= n / yo){
            p *= yo;
            cnt += n / p;
        }
        ans = mul(ans, power(yo, cnt));
    }
    cout << ans;
return 0;
}
