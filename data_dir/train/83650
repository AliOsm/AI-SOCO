#include <iostream>
#include <algorithm>
#include <map>
using namespace std;
typedef long long ll;

ll M, X;
pair<ll, int> P[16][16];
int sz[16];
int curExp[16];
ll ans = 0;

void getFactors(ll num, int idx)
{
    for (ll i = 2; i*i <= num; i++)
        if (num % i == 0)
        {
            int exponent = 0;
            while (num % i == 0)
            {
                exponent++;
                num /= i;
            }
            P[idx][sz[idx]++] = make_pair(i, exponent);
        }
    if (num > 1)
        P[idx][sz[idx]++] = make_pair(num, 1);
}

ll mult(ll a, ll b, ll MOD)
{
    if (a < b)
        swap(a, b);
    if (b == 0)
        return 0;
    if (b == 1)
        return a % MOD;
    if (b % 2 == 0)
        return mult((a + a) % MOD, b/2, MOD);
    return (a + mult((a + a) % MOD, (b-1)/2, MOD)) % MOD;
}

ll expo(ll a, ll b, ll MOD)
{
    if (b == 0)
        return 1;
    if (b == 1)
        return a % MOD;
    if (b % 2 == 0)
        return expo(mult(a, a, MOD), b/2, MOD);
    return mult(a, expo(mult(a, a, MOD), (b-1)/2, MOD), MOD);
}

void compute(ll divisor)
{
    map<ll, int> prime;
    for (int i = 0; i < sz[0]; i++)
        if (curExp[i] > 0)
        {
            for (int j = 0; j < sz[i + 1]; j++)
                prime[P[i + 1][j].first] += P[i + 1][j].second;
            if (curExp[i] > 1)
                prime[P[0][i].first] += curExp[i] - 1;
        }
    if (prime.empty())
    {
        ans++;
        return;
    }

    ll totient = 1;
    for (map<ll, int>::iterator it = prime.begin(); it != prime.end(); it++)
        for (int i = 0; i < it->second; i++)
            totient *= it->first;
    
    ll order = totient;
    for (map<ll, int>::iterator it = prime.begin(); it != prime.end(); it++)
    {
        ll x = 1;
        for (int i = 0; i < it->second; i++)
            x *= it->first;
        order /= x;
        for (int i = 0; i < it->second; i++, order *= it->first)
            if (expo(X, order, divisor) == 1)
                break;
    }
    //cout << "order of " << X << " mod " << divisor << " is " << order << " and totient is " << totient << "\n";
    ans += totient/order;
}

void go(int idx, ll cur)
{
    if (idx == sz[0])
    {
        compute(cur);
        return;
    }
    ll power = 1;
    for (int i = 0; i <= P[0][idx].second; i++)
    {
        curExp[idx] = i;
        go(idx + 1, cur*power);
        curExp[idx] = 0;
        power *= P[0][idx].first;
    }
}

int main()
{
    ios::sync_with_stdio(0);

    cin >> M >> X;
    getFactors(M, 0); 
    for (int i = 0; i < sz[0]; i++)
        getFactors(P[0][i].first - 1, i + 1);

    go(0, 1);
    cout << ans << "\n";

    return 0;
}
