#include <cstdio>
#include <cstring>
#include <assert.h>
#include <vector>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <map>
#include <set>
#include <queue>

#define For(i,a,b) for(int (i)=(a);(i)<=(b);(i)++)
#define Rep(i,a,b) for(int (i)=(a);(i)<(b);(i)++)
#define dbg(x)  cerr <<#x<<':'<<x<<endl;
#define fi first
#define se second
#define fill(x,y) memset(x,y,sizeof(x));

using namespace std;

typedef long long Lint;

const int MAXN = 1e5+5;

int N;
int next[MAXN];
vector<int> pre[MAXN];
vector<int> top;
bool visit[MAXN];

void dfs1(int node){

	visit[node] = true;
	
	if(!visit[next[node]]) dfs1(next[node]);

	top.push_back(node);
	
}

int G; 
int scc[MAXN];
vector<int> way[MAXN];
bool root[MAXN];
int oneof[MAXN];
vector<int> go[MAXN];
int res;

void dfs2(int node){
		
	scc[node] = G;
	oneof[G] = node;
	
	visit[node] = true;
	
	Rep(i,0,pre[node].size())
		if(!visit[pre[node][i]])
			dfs2(pre[node][i]);
	
}

vector<int> leafs[MAXN];

void rec(int node,int rt){
	dbg(node);
	visit[node] = true;
	
	bool leaf = true ; 
	
	Rep(i,0,way[node].size())
		if(!visit[way[node][i]]){
			rec(way[node][i],rt);
			leaf = false;
		}
	
	if(leaf) leafs[rt].push_back(node);
	
}

void meet(int a,int b){

	Rep(i,0,leafs[b].size()) go[oneof[a]].push_back(oneof[leafs[b][i]]) , res++;

}

int main(){
	
	cin >> N ; 
	
	For(i,1,N)	scanf(" %d",next+i) , pre[next[i]].push_back(i);	
	
	For(i,1,N)
		if(!visit[i])
			dfs1(i);		
	
	reverse(top.begin(),top.end());
	
	fill(visit,false);
	
	Rep(i,0,top.size())
		if(!visit[top[i]]){
			G++;
			dfs2(top[i]);
		}

	if(G==1) return cout << 0 << endl , 0;

	Rep(i,0,MAXN) root[i] = true;

	For(i,1,N) Rep(j,0,pre[i].size())
		if(scc[pre[i][j]]!=scc[i]){
			way[scc[i]].push_back(scc[pre[i][j]]);
			root[scc[pre[i][j]]] = false;
		}
	
	fill(visit,0);
	
	vector<int> roots;
	
	For(i,1,G)
		if(root[i]){
			roots.push_back(i);
			rec(i,i);
		}
	
	Rep(i,0,(int)roots.size()-1) meet(roots[i],roots[i+1]);
	
	meet(roots.back(),roots[0]);
		
	cout << res << endl;   
	
	For(i,1,N)
		Rep(j,0,go[i].size())
			printf("%d %d\n",i,go[i][j]);
	
	return 0;
}
