# include <iostream>
# include <set>
# include <vector>
# include <algorithm>

using namespace std;

const int N = 1e5 + 100;
int n, a[N];
long long dp[N], mx;
set < int > active;
vector < long long > ans;

int main(){
    ios_base::sync_with_stdio( false );
    cin.tie();
    cout.tie();
    cin >> n;
    for( int i = 1; i <= n; i ++ ){
        cin >> a[i];
    }
    for( int i = 1; i <= n+1; i ++ ){
        dp[i] = dp[i - 1] + a[i];
    }
    vector < int > queries;
    for( int i = 1; i <= n; i ++ ){
        int q; cin >> q;
        queries.push_back( q );
        active.insert( q );
    }
    active.insert( 0 );
    active.insert( n + 1 );
    reverse( queries.begin(), queries.end() );

    for( auto q: queries ){
        ans.push_back( mx );
        auto L = active.lower_bound( q );
        L--;
        auto R = active.upper_bound( q );
        mx = max( mx, dp[(*R)-1] - dp[ (*L) ] );
        active.erase( q );
    }
    reverse( ans.begin(), ans.end() );
    for( auto c: ans ){
        cout << c << endl;
    }
    return 0;
}
