/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 22-Apr-2020 10:12:44
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> inline void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 1e5 + 7;
const long long inf = 1e18 + 7;

vector<int> bfs(vector<vector<int>> &g, int n, int st) {
    queue<int> q;
    vector<int> dist(n);
    vector<bool> used(n, false);

    q.push(st);
    dist[st] = 0;
    used[st] = true;

    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int v : g[u]) {
            if (!used[v]) {
                q.push(v);
                used[v] = true;
                dist[v] = dist[u] + 1;
            }
        }
    }

    return dist;
}

int solve() {
    int n, m, a, b, c;
    Int(n, m); Int(a, b, c);
    --a, --b, --c;
    vector<long long> p(m + 1);
    for (int i = 1; i <= m; ++i) {
        Int(p[i]);
    }
    vector<vector<int>> g(n);
    for (int i = 0; i < m; ++i) {
        int u, v; Int(u, v);
        --u, --v;
        g[u].push_back(v);
        g[v].push_back(u);
    }

    vector<int> dist_a = bfs(g, n, a);
    vector<int> dist_b = bfs(g, n, b);
    vector<int> dist_c = bfs(g, n, c);

    sort(p.begin(), p.end());
    for (int i = 1; i <= m; ++i) {
        p[i] += p[i - 1];
    }

    long long res = inf;
    for (int i = 0; i < n; ++i) {
        int d = dist_a[i] + dist_b[i] + dist_c[i];
        if (d > m) {
            continue;
        }
        long long cost = p[d] + p[dist_b[i]];
        umin(res, cost);
    }

    return printf("%lld\n", res);
}

int main() {
    int tests = 1, CaseNo = 0; Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}