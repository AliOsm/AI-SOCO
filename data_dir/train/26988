/////////////////////////   _LeMur_
#define _CRT_SECURE_NO_WARNINGS
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 200005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;
mt19937 myrand(chrono::steady_clock::now().time_since_epoch().count());

int t;
string s;

int ind[5];
int go[N][5];

int main() {
    cin >> t;
    while (t--) {
        cin >> s;
        ind[1] = ind[2] = ind[3] = -1;
        for (int i = (int)s.size() - 1; i >= 0; i--) {
            int x = s[i] - '0';
            ind[x] = i;
            for (int j = 1; j <= 3; j++) {
                go[i][j] = ind[j];
            }
        }
        if (go[0][1] == -1 || go[0][2] == -1 || go[0][3] == -1) {
            printf("0\n");
            continue;
        }
        int answ = inf;
        for (int i = 0; i < (int)s.size(); i++) {
            if (go[i][1] != -1 && go[i][2] != -1 && go[i][3] != -1) {
                int mx = max(go[i][1], max(go[i][2], go[i][3]));
                answ = min(answ , mx - i + 1);
            }
        }
        printf("%d\n", answ);
    }
    return 0;
}
