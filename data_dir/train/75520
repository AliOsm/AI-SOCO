#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define MOD 1000000009
ll power(ll a,ll b, ll m=MOD)
{
    ll res=1;
    while(b>0)
    {
        if(b&1)
            res=(res*a)%m;
        a=(a*a)%m;
        b>>=1;
    }
    return res;
}
ll inverse(ll a,ll m=MOD)
{
    return power(a,m-2,m);
}
#define INFl 1e18
#define vi vector<int>
#define vvi vector<vi>
#define vl vector<long long>
#define vvl vector<vl>
#define ii pair<int,int>
#define pll pair<ll,ll>
#define vii vector<ii>
#define F first
#define S second
#define forl(i,n) for(int i=0;i<n;i++)
#define fore(i,n) for(int i=1;i<=n;i++)
#define rforl(i,n)  for(int i=n-1;i>=0;i--)
#define rfore(i,n)  for(int i=n;i>=1;i--)
#define INF 1100000009
#define gcd(a,b) __gcd(a,b)
#define all(x)  x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define print(x)    for(auto it=x.begin();it!=x.end();it++) cout<<*it<<' '; cout<<endl;
#define printii(x)  for(auto it=x.begin();it!=x.end();it++) cout<<it->F<<' '<<it->S<<endl;  
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
int a[1000005];
ll dp[1000005];
// Update null and combine functions
struct MaxSegmentTree
{
    ll combine(ll p,ll q)
    {
        return max(p,q);
    }
    ll null=-INF;
    
    vl st;
    int n;
    inline int left(int x)  
    {
        return x<<1;
    }
    inline int right(int x)
    {
        return (x<<1)|1;
    }
    inline int mid(int l,int r)
    {
        return (l+r)/2;
    }
    MaxSegmentTree() {}
    MaxSegmentTree(int N)
    {
        n=N;
        st.assign(4*n,0);
        vl a(n,0);
        build(a,1,0,n-1);
    }
    MaxSegmentTree(vl &a)
    {
        n=a.size();
        st.assign(4*n,0);
        build(a,1,0,n-1);
    }

    void combine(int v)
    {
        st[v]=combine(st[left(v)],st[right(v)]);
    }
    ll getValue(int v)
    {
        return st[v];
    }
    void build(vl &a,int v,int tl,int tr)
    {
        if(tl==tr)
        {
            st[v]=a[tl];
            return;
        }
        int tm=mid(tl,tr);
        build(a,left(v),tl,tm);
        build(a,right(v),tm+1,tr);
        combine(v);
    }
    void update(int v,int tl,int tr,int& pos,ll& x)
    {
        if(tl>pos || tr<pos)  return;
        if(tl==tr)
        {
            st[v]=x;
            return;
        }
        int tm=mid(tl,tr);
        update(left(v),tl,tm,pos,x);
        update(right(v),tm+1,tr,pos,x);
        combine(v);
    }
    ll query(int v,int tl,int tr,int l,int r)
    {
        if(l>r) return null;
        if(l==tl && r==tr)
            return getValue(v);
        int tm=mid(tl,tr);
        ll resl=query(left(v),tl,tm,l,min(r,tm));
        ll resr=query(right(v),tm+1,tr,max(l,tm+1),r);
        return combine(resl,resr);
    }
    // UI

    void update(int pos,ll x)
    {
        update(1,0,n-1,pos,x);
    }
    ll query(int l,int r)
    {
        if(l>r) return 0;
        return query(1,0,n-1,l,r);
    }
};

int main()
{
    int n;
    scanf("%d",&n);
    fore(i,n)   scanf("%d",&a[i]);
    memset(dp,0,sizeof(dp));
    deque<ii> high,low;
    MaxSegmentTree mxt1(n+1),mxt2(n+1);
    fore(i,n)
    {
        dp[i]=dp[i-1];
        while(!high.empty() && high.front().F<a[i])
            high.pop_front();
        int phigh=0,plow=0;
        if(!high.empty())
            phigh=high.front().S;
        while(!low.empty() && low.front().F>a[i])
            low.pop_front();
        if(!low.empty())
            plow=low.front().S;
        high.push_front(mp(a[i],i));
        low.push_front(mp(a[i],i));
        if(plow<phigh)
        {
            ll x=mxt1.query(plow+1,i-1);
            dp[i]=max(dp[i],x-a[i]);
        }
        else if(plow>phigh)
        {
            ll x=mxt2.query(phigh+1,i-1);
            dp[i]=max(dp[i],x+a[i]);
        }
        mxt1.update(i,a[i]+dp[i-1]);
        mxt2.update(i,dp[i-1]-a[i]);
    }
    /*fore(i,n)   cout<<dp[i]<<' ';
    cout<<endl;*/
    cout<<dp[n]<<endl;
}