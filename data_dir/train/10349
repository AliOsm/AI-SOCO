#include <bits/stdc++.h>
#define fore(x,a,b) for(int x=a, qwe=b; x<qwe; x++)
#define ALL(a) (a).begin(), (a).end()
#define pb push_back
#define SZ(a) ((int)(a).size())
using namespace std;
typedef long long ll;

const ll MOD = 1e9 + 7;
const int N=71, P=19;
vector<int> primes, facts[N];
int n, cnt[N], id[N], vals[N];
ll dp[2][1<<P];

ll fe(ll b, ll e){
	ll r=1;
	while(e)if(e&1)r=(b*r)%MOD, e--; else b=(b*b)%MOD, e/=2;
	return r;
}

int main(){
	memset(id,-1,sizeof(id));
	for(int x=2; x<=70; x++){
		vector<int> tmp;
		int tmpX=x;
		for(int y=2; y*y<=tmpX; y++)
			while(tmpX % y == 0)tmp.pb(y), tmpX/=y;
		if(tmpX>1)tmp.pb(tmpX);
		if(SZ(tmp)==1){
			id[x] = SZ(primes), primes.pb(x);
		}
		facts[x]=tmp;
	}
	for(int x=2; x<=70; x++){
		map<int,int> c;
		for(auto p : facts[x])c[p]++;
		for(auto p : c)
			if(p.second%2)vals[x] ^= 1<<id[p.first];
	}
	cin >> n;
	fore(x,0,n){int tmp; cin >> tmp; cnt[tmp]++;}
	
	dp[0][0] = 1;
	fore(x,1,N){
		ll pars = fe(2,max(cnt[x]-1,0)), impars = pars;
		fore(y,0,1<<P)dp[x&1][y]=(pars * dp[(x-1)&1][y])%MOD;
		if(cnt[x]){
			fore(y,0,1<<P){
				dp[x&1][y] += (dp[(x-1)&1][y^vals[x]] * impars)%MOD;
				dp[x&1][y] %= MOD;
			}
		}
	}
	
	cout << (dp[0][0]-1+MOD)%MOD << "\n";
}
