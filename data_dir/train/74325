#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <map>
#include <queue>
#include <set>
#include <cmath>
#include <list>
#include <cassert>

using namespace std;

#define y1 roman_kaban
#define rank oryshych_konb
#define ull unsigned long long
//const int mod = int(1e9) + 7;
//const long long infLL = 1e15;
//const int MX2 = 10100500; //  e7
const int MX = 200500; //       e5

const int SZ = 450;

int a[SZ][SZ];
int b[SZ][SZ];

int get_cnt(int l, int r, int val){
    int x = val / SZ;
    int y = val % SZ;
    val = b[x][y];

    int x1 = l / SZ;
    int y1 = l % SZ;
    int x2 = r / SZ;
    int y2 = r % SZ;
    int ans = 0;
    if(x1 == x2){
        for(int i = y1; i <= y2; i++){
            ans += b[x1][i] < val;
        }
    }else{
        while(y1 < SZ){
            ans += b[x1][y1] < val;
            y1++;
        }
        while(y2 >= 0){
            ans += b[x2][y2] < val;
            y2--;
        }
        for(int i = x1 + 1; i < x2; i++){
            auto pos = lower_bound(a[i], a[i] + SZ, val);
            ans += pos - a[i];
        }
    }
    return ans;
}

void forw_sort(int x, int bef, int aft){
    for(int i = 0; i < SZ; i++){
        if(a[x][i] == bef){
            a[x][i] = aft;
            break;
        }
    }

    for(int i = 0; i < SZ - 1; i++){
        if(a[x][i] > a[x][i + 1]) swap(a[x][i], a[x][i + 1]);
    }
}

void rev_sort(int x, int bef, int aft){
    for(int i = 0; i < SZ; i++){
        if(a[x][i] == bef){
            a[x][i] = aft;
            break;
        }
    }

    for(int i = SZ - 2; i >= 0; i--){
        if(a[x][i] > a[x][i + 1]) swap(a[x][i], a[x][i + 1]);
    }
}


int swp(int l, int r){
    int x1 = l / SZ;
    int y1 = l % SZ;
    int x2 = r / SZ;
    int y2 = r % SZ;
    //cerr << "SWP" << x1 << ' ' << y1 <<  ' ' << x2 << ' ' << y2 << endl;
    if(x1 == x2){
        swap(b[x1][y1], b[x2][y2]);
    } else
    if(b[x1][y1] > b[x2][y2]){
        swap(b[x1][y1], b[x2][y2]);
        rev_sort(x1, b[x2][y2], b[x1][y1]);
        forw_sort(x2, b[x1][y1], b[x2][y2]);
    }else
    {
        swap(b[x1][y1], b[x2][y2]);
        forw_sort(x1, b[x2][y2], b[x1][y1]);
        rev_sort(x2, b[x1][y1], b[x2][y2]);
    }
    if(b[x1][y1] > b[x2][y2]) return -1;
    return 1;
}

void dump(int n){
    for(int i = 0; i < n; i++){
        cout << b[i / SZ][i % SZ] <<  ' ';
    }
    cout << endl;
}

int main()
{

    //freopen("/Users/ozzy/Downloads/sets/rocks02.in","r", stdin);
    //freopen("/Users/ozzy/Downloads/sets/rocks02.ans","w", stdout);
    ios_base::sync_with_stdio(false);
    int n = MX, q = MX / 2 - 1;
    cin >> n >> q;
    int x = 0;
    int y = -1;
    for(int i = 0; i < n; i++){
        y++;
        if(y == SZ) {x++; y = 0;}
        a[x][y] = b[x][y] = i;
    }
    while(true){
        y++;
        if(y == SZ) {x++; y = 0;}
        if(x == SZ) break;
        a[x][y] = b[x][y] = n + 2;
    }
    long long balance = 0;
    while(q--){
        int l = n / 2 - q;
        int r = n / 2 + q;
        cin >> l >> r;
        if(l != r){
            l--; r--;
            if(l > r) swap(l, r);
            int r1 = get_cnt(l, r, l);
            int r2 = get_cnt(l, r, r);
            //cerr << r1 << ' ' << r2 << endl;
            balance += 2 * (r2 - r1);
            balance += swp(l, r);
        }
        //dump(n);
        cout << balance << "\n";
    }

    return 0;
}


/*
5 4
z = 4
q = 0


*/
