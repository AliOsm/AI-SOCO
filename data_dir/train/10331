#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <string>
#include <set>
#include <map>
#define INT long long
#define oo 987654321
using namespace std;
INT n, m, w, W[1010], B[1010], chk[1010], c=1, W2[1010], B2[1010];
vector<INT> G[1010], GW2[1010], GB2[1010];
map<INT, INT> dt[2][1010];
void dfs(int x, int y)
{
    chk[x] = y;
    GW2[y].push_back(W[x]);
    GB2[y].push_back(B[x]);
    for(int i = 0 ; i < G[x].size() ; i++ )
        if( !chk[G[x][i]] )
            dfs(G[x][i], y);
}
INT dp(INT x, INT y)
{
    if( y > w ) return -oo;
    if( x == c ) return 0;
    if( dt[0][x][y] ) return dt[1][x][y];
    dt[0][x][y] = 1;
    INT &ret = dt[1][x][y];
    for(int i = 0 ; i < GW2[x].size() ; i++ )
        ret = max( ret, dp(x+1, y+GW2[x][i])+GB2[x][i] );
    ret = max( ret, dp(x+1, y) );
    return ret;
}
int main()
{
    ios::sync_with_stdio(false);
    cin>>n>>m>>w;
    for(int i = 1 ; i <= n ; i++ ) cin>>W[i];
    for(int i = 1 ; i <= n ; i++ ) cin>>B[i];
    while( m-- )
    {
        int a, b;
        cin>>a>>b;
        G[a].push_back(b);
        G[b].push_back(a);
    }
    for(int i = 1 ; i <= n ; i++ )
    {
        if( !chk[i] )
            dfs(i, c++);
    }
    for(int i = 1 ; i <= n ; i++ )
    {
        W2[chk[i]] += W[i];
        B2[chk[i]] += B[i];
    }
    for(int i = 1 ; i < c ; i++ )
    {
        GW2[i].push_back(W2[i]);
        GB2[i].push_back(B2[i]);
    }

    cout<<dp(1, 0)<<endl;
    return 0;
}
