#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE

#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <functional>
#include <cmath>
#include <sstream>
#include <utility>
#include <ctime>
#include <memory.h>
#include <cctype>
#include <cstdlib>
#include <limits>

using namespace std;

#pragma comment (linker, "/STACK:64000000")

#define y0 qwe
#define y1 asd
#define sz size()
#define pb push_back
#define fors(w,s) for(set <int> :: iterator w=s.begin(); w!=s.end(); w++)
#define pii pair<int, int>
#define pll pair<ll, ll>
#define ull unsigned long long
#define vi vector <int>
#define vvi vector <vi>
#define inf 2000000000
#define o 1000000009
#define ll long long
#define maxint 2139062143 //2147483647
#define maxll 9223372036854775807
#define fi first
#define se second
#define eps 1e-9
#define doubleinf 1000000.0

int j, n, k, l, i, h, q1, q2, m, q, p, der[800001], mx, id, t12[200001], t21[200001], z[200001], cnt, level[200001], v1[200001], v2[200001], a[200001];
vi v0[200001];

void mod (int i, int p1, int p2, int q1, int q2, int g)
{
    if (p1 > q2 || p2 < q1)
    {
        return;
    }
    if (p1 >= q1 && p2 <= q2)
    {
        der[i] += q;
        return;
    }
    int p = (p1 + p2) >> 1;
    mod (i << 1, p1, p, q1, q2, g);
    mod ((i << 1) + 1, p + 1, p2, q1, q2, g);
}

int get_val (int i, int p1, int p2, int q)
{
    if (p1 > q || p2 < q)
    {
        return 0;
    }
    int p = (p1 + p2) >> 1, j = 0, g;
    int val;
    if (p1 < p2)
    {
        val = get_val (i << 1, p1, p, q) + get_val ((i << 1) + 1, p + 1, p2, q);
    }
    else
    {
        val = 0;
    }
    if (level[q] & 1)
    {
        val += der[i];
    }
    else
    {
        val -= der[i];
    }
    return val;
}

int dfs (int u, int p, int lvl)
{
    cnt++;
    t12[u] = cnt;
    t21[cnt] = u;
    level[cnt] = lvl;
    v1[cnt] = cnt;
    mx = cnt;
    int j;
    for (j = 0; j < int(v0[u].sz); j++)
    {
        if (v0[u][j] != p)
        {
            mx = max (dfs (v0[u][j], u, lvl + 1), mx);
        }
    }
    v2[t12[u]] = mx;
    return mx;
}

inline void init()
{
    scanf ("%d%d", &n, &m);
    for (j = 1; j <= n; j++)
    {
        scanf ("%d", &z[j]);
    }
    for (j = 1; j < n; j++)
    {
        scanf ("%d%d", &q1, &q2);
        v0[q1].pb(q2);
        v0[q2].pb(q1);
    }
}

inline void solve()
{
    dfs(1, 0, 1);
    for (j = 1; j <= n; j++)
    {
        a[j] = z[t21[j]];
    }
    for (j = 1; j <= m; j++)
    {
        scanf ("%d", &p);
        if (p == 1)
        {
            scanf ("%d%d", &id, &q);
            id = t12[id];
            if (!(level[id] & 1))
            {
                q *= -1;
            }
            mod (1, 1, n, v1[id], v2[id], q);
        }
        else
        {
            scanf ("%d", &id);
            id = t12[id];
            printf ("%d\n", a[id] + get_val(1, 1, n, id));
        }
    }
}

int main()
{
   // freopen ("input.txt","r",stdin); freopen ("output.txt","w",stdout);
    //freopen ("cell.in","r",stdin); freopen ("cell.out","w",stdout);
    init();
    solve();
    return 0;
}
