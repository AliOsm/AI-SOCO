
// kill the time limit ;)
#include<bits/stdc++.h>
using namespace std;
#define ll unsigned long long int
// instead of shaking matrix and count diviser on it, find diviser directly
int main()
{
  ios::sync_with_stdio(false),cin.tie(0);
  ll n; cin >>n;
  ll m; cin >>m;
  ll k; cin >>k;
  ll cu = 0;
  vector<ll> nca; //number of consecutive one in the a
  vector<ll> ncb; //number of consecutive one in the b
  for(int i = 0; i < n ; ++i){
    ll x; cin>>x;
    if(x)
      ++cu;
    else{
      if(cu)
        nca.emplace_back(cu);
      cu = 0;
    }
  }
  if(cu)
    nca.emplace_back(cu);
  cu = 0;

  for(int i = 0; i < m ; ++i){
    ll x; cin>>x;
    if(x)
      ++cu;
    else{
      if(cu)
        ncb.emplace_back(cu);
      cu = 0;
    }
  }
  if(cu)
    ncb.emplace_back(cu);
  //**********************************
  //diviser of k
  
  vector<pair<ll,ll>> diviser;
  ll q = 1;
  while(q*q <= k){
    if(k % q == 0){
      diviser.push_back({q,k/q});
      if(k / q != q)
        diviser.push_back({k/q, q});
    }
    ++q;
  }
  //***********************************
  ll res = 0;
  for(auto &M: diviser){
    ll cnt1 = 0;
    ll cnt2 = 0;
    for(auto &x: nca){
      if (M.first <= x)
        cnt1+= x-M.first+1;
    }
    for(auto &y: ncb){
      if (M.second <= y)
        cnt2+= y-M.second+1;
    }
    res+= cnt1 * cnt2;
  }

  cout<<res<<"\n";
  return 0;
}


