#include<bits/stdc++.h>
using namespace std;

#define fi                      first
#define se                      second
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define pll                     pair< long long int, long long int> 
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define SZ(x)                   ((int)x.size())

#define FOR(i,a,b)              for(int i = a; i < b; ++i)
#define REV(i,a,b)              for(int i = a; i >= b; --i)
#define FORE(i,a,b)             for(int i = a; i <= b; ++i)

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

void solve();

int32_t main()
{
        fast;
        int t = 1;
        // cin >> t;
        for(int i = 1; i <= t; ++i)
                solve();
        cerr << "Time taken: " << ((clock() * 1000) / CLOCKS_PER_SEC) << "ms\n";
}

#define int long long int
const int N = 2e5+2;
int t[4*N];
int lazy[4*N];
int a[N];
int n; 

void init() {
        memset(lazy,0,sizeof(lazy));
}

void upd(int node, int l, int r, int x) {
        lazy[node] += x; 
        t[node] += x; // change
        return;
}

void passDown(int node, int l, int r) { 
        int mid = (l + r) / 2;
        upd(2 * node, l , mid, lazy[node]);
        upd(2 * node + 1, mid + 1 , r, lazy[node]);
        lazy[node] = 0;
}

void build(int node = 1,int tl = 0,int tr = n - 1) {
        if(tl > tr) {
                return;
        }
        if(tl == tr) {
                t[node] = a[tl]; // change
                return;
        }
        int mid = (tl + tr) / 2;
        build(2 * node, tl, mid);
        build(2 * node + 1, mid + 1, tr);
        t[node] = min(t[2 * node], t[2 * node + 1]); // change
}

void updateRange(int l, int r,int val, int node = 1, int tl = 0, int tr = n-1) {
        if(r < l or l > tr or tl > r or tl > tr) {
                return;
        }
        if(l <= tl and tr <= r) {
                upd(node,tl,tr,val);
                return;
        }
        passDown(node, tl, tr);
        int mid = (tl + tr) / 2;
        updateRange(l, r, val, 2 * node, tl , mid);
        updateRange(l, r, val, 2 * node + 1, mid+1, tr);
        t[node] = min(t[2 * node] , t[2 * node + 1]); // change
}

int queryRange(int l, int r,int node = 1, int tl = 0, int tr = n-1) {
        if (r < l or tr < tl or l > tr or tl > r) {
                return 0; // change
        }
        if(tl == tr) {
                return tl; // change
        }
        passDown(node,tl,tr); 
        int mid = (tl + tr) / 2;
        if(t[2*node + 1])
        	return queryRange(l, r, 2 * node, tl, mid);
        else
        	return queryRange(l, r, 2 * node + 1, mid+1 , tr); // change

}

// updateRange(l,r,val) queryRange(l,r);

void solve() {
        cin >> n;
        std::vector<int> ans(n);
        FOR(i,0,n) {
        	cin >> a[i];
        }
        init();
        build();
        FOR(i,0,n) {
        	int pos = queryRange(0,n-1);
        	ans[pos] = i+1;
        	updateRange(pos+1,n-1,-(i+1));
        	updateRange(pos,pos,1e14);
        }
        FOR(i,0,n) {
        	cout << ans[i] << " ";
        }
        cout << endl;
}