#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
 
using namespace std;
using namespace __gnu_pbds;
 
#define debug(s) cerr << #s << " = " << s << '\n'
#define all(v) (v).begin(), (v).end()
#define mem(a,val) memset(a, val, sizeof a)
 
#define ff first
#define ss second
typedef long long ll;
 
typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

const int N = 500010;

int n, q, ptr;
vector<int> adj[N];
int par[N], st[N], en[N], rev[N << 1];
ordered_set os;

void dfs(int u, int p, int dep) {
  par[u] = p;
  rev[ptr] = u;
  st[u] = ptr++;
  for (auto v: adj[u]) {
    if (v == p) continue;
    dfs(v, u, dep + 1);
  }
  en[u] = ptr - 1;
}

void update(int l, int r, bool f) {
  if (f) {
    if (os.empty()) return;
    int id = os.order_of_key(l);
    int sz = os.size();
    vector<int> er;
    while (id < sz) {
      int val = *os.find_by_order(id);
      if (val <= r) {
        er.push_back(val);
        id++;
      }
      else break;
    }
    for (auto p: er) os.erase(p);
    if (!er.empty()) if (par[rev[l]] != -1) os.insert(st[par[rev[l]]]);
  }
  else os.insert(l);
}

bool query(int l, int r) {
  if (os.empty()) return false;
  int id = os.order_of_key(l);
  if (id == os.size()) return false;
  int val = *os.find_by_order(id);
  return (val <= r);
}

int main() {
  scanf("%d", &n);
  for (int i = 1; i < n; ++i) {
    int u, v;
    scanf("%d %d", &u, &v);
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  dfs(1, -1, 0);
  for (int i = 1; i <= n; ++i) os.insert(st[i]);
  scanf("%d", &q);
  while (q--) {
    int ty, v;
    scanf("%d %d", &ty, &v);
    if (ty == 1) update(st[v], en[v], 1);
    if (ty == 2) update(st[v], st[v], 0);
    if (ty == 3) {
      if (query(st[v], en[v])) printf("0\n");
      else printf("1\n");
    }
  }
}