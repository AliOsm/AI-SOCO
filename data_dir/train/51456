#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
    #define EXPECT(expr)
#endif
#define NO_IO_TIE ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
for(auto & u: a) fin >> u; return fin; }
template<class T, size_t n> inline istream &
operator>>( istream & fin, array<T, n> & a ) {
for(auto & u: a) fin >> u; return fin; }
/* @@@ ----------------------------------- */

inline size_t
xsolve(vector<int>::const_iterator iter, int len, int side,
       const vector<int> & x)
{
    auto last = iter;

    while( true) {
        if( len == 0 ) return iter - begin(x);

        if(side == 1 or side == 10) { /* right  */

            auto next = upper_bound(iter, end(x), *iter + len);
            -- next;
            if( iter != next ){
                if( next != last || len < 2 * abs(*iter - *last) ) {
                    len = *iter + len - *next;
                    last = iter;
                    iter = next;
                    side = -1;
                }
                else {
                    const auto diff = 2 * abs(*iter - *last);
                    len %= diff;
                }
            }
            else if( side != 1 ){
                side = -1;
            }
            else return iter - begin(x);
        }
        else { /* left */
            auto next = lower_bound(begin(x), iter, *iter - len);
            if( next != iter ){
                if( next != last || len < 2 * abs(*iter - *last) ) {
                    len = *next + len - *iter;
                    side = 1;
                    iter = next;
                }
                else {
                    const auto diff = 2 * abs(*iter - *last);
                    len %= diff;
                }
            }
            else if( side != -1 ){
                side = 1;
            }
            else return iter - begin(x);
        }
    }
}

void probD()
{
    size_t n, m;
    cin >> n >> m;

    vector<int> x(n);
    vector<pair<size_t, int>> query(m);
    cin >> x >> query;

    vector<size_t> ord(n);
    iota(begin(ord), end(ord), 0);

    {
        const auto comp = [&x](const size_t i, const size_t j){
            return x[i] < x[j];
        };
        sort(begin(ord), end(ord), comp);
    }

    vector<size_t> inv(n);
    {
        vector<int> y(n);

        for(size_t i = 0; i < n; ++i)
        {
            inv[ord[i]] = i;
            y[i] = x[ord[i]];
        }
        x.swap(y);
    }

    for(const auto & pr: query){
        const auto i = inv[pr.first - 1];
        cout << ord[xsolve(begin(x) + i, pr.second, 10, x)] + 1 << '\n';
    }
}

int main( const int argc, char * argv [])
{
    NO_IO_TIE;
    probD();

    return EXIT_SUCCESS;
}
