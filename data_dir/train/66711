#include <cstdio>

#include <cstring>

#include <string>
#include <vector>
#include <algorithm>

#include <cstdlib>
#include <cassert>

using namespace std;

#define SZ(a) int((a).size())
#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

typedef long long llong;
typedef vector<int> VI;
typedef vector<VI> VVI;

int N;
VVI adj;

int k1, k2;
VI my_subtree, li_subtree;
vector<bool> in_my_tree;

int dfs(int u, int p = -1) {
   if (in_my_tree[u])
      return u;
   for (int v : adj[u]) {
      if (v == p) continue;
      int x = dfs(v, u);
      if (x > 0)
         return x;
   }
   return -1;
}

int solve() {
   in_my_tree = vector<bool>(N+1);
   for (int u : my_subtree)
      in_my_tree[u] = 1;

   int p = rand() % k2;
   printf("B %d\n", li_subtree[p]);
   fflush(stdout);

   int u;
   scanf("%d", &u);
   if (in_my_tree[u])
      return u;

   int v = dfs(u);
   printf("A %d\n", v);
   fflush(stdout);
   
   int x;
   scanf("%d", &x);
   if (find(li_subtree.begin(), li_subtree.end(), x) != li_subtree.end())
      return v;

// assert(k1 + k2 <= N);

   return -1;
}

int main(int argc, char* argv[]) {
   srand(123);

   int TC;
   scanf("%d", &TC);
   FOR(tc, 1, TC) {
      scanf("%d", &N);
      adj = VVI(N+1);
      REP(j, N-1) {
         int u, v;
         scanf("%d %d", &u, &v);
         adj[u].push_back(v);
         adj[v].push_back(u);
      }
      scanf("%d", &k1);
      my_subtree = VI(k1);
      REP(k, k1)
         scanf("%d", &my_subtree[k]);
      scanf("%d", &k2);
      li_subtree = VI(k2);
      REP(k, k2)
         scanf("%d", &li_subtree[k]);
      int res = solve();
      printf("C %d\n", res);
      fflush(stdout);
   }

   return 0;
}
