#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>

using namespace std;

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.14159265358979
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned

int mod=777777777;
int N=100010;
int t[400100];
int k;
int can[5][5];
int dp[100100][5][5];
int r(int p, int was, int need)
{
	if (p==0)
		return (was==need);
	if (dp[p][was][need]!=-1)
		return dp[p][was][need];
	int res=0;
	int en=2;
	if (p==1)
		en=3;
	FOR(i,0,en+1)
		if (can[was][i])
		{
			res+=r(p-1,i,need);
			if (res>=mod)
				res-=mod;
		}
	return dp[p][was][need]=res;
}
inline void modif(int p, int v)
{
	p+=k;
	t[p]=v;
	p>>=1;
	while (p)
	{
		t[p]=(t[p+p]*1ll*(t[p+p+1]))%mod;
		p>>=1;
	}
}
int a[100100];
set<int> is;
int main()
{
#ifdef Fcdkbear
    freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    double beg=clock();
#endif

	MEMS(dp,-1);
	int n,m;
	scanf("%d%d",&n,&m);
	n+=2;
	k=1;
	while (k<n)
		k+=k;
	FOR(i,0,3)
		FOR(j,0,3)
			scanf("%d",&can[i][j]);
	FOR(i,0,4)
		can[i][3]=1;
	FOR(i,0,4)
		can[3][i]=1;
	a[0]=a[n-1]=4;
	FOR(i,1,k+k)
		t[i]=1;
	modif(0,r(n-1,3,3));
	is.insert(0);
	is.insert(n-1);
	FOR(i,0,m)
	{
		int v,el;
		scanf("%d%d",&v,&el);
		if (el==0)
		{
			is.erase(v);
			set <int>::iterator it=is.lower_bound(v);
			int ri=*it;
			it--;
			int le=*it;
			modif(v,1);
			modif(le,r(ri-le,a[le]-1,a[ri]-1));
		}
		else
		{
			is.insert(v);
			set <int>::iterator it=is.upper_bound(v);
			int le,ri;
			ri=*it;
			it--; it--;
			le=*it;
			modif(le,r(v-le,a[le]-1,el-1));
			modif(v,r(ri-v,el-1,a[ri]-1));
		}
		a[v]=el;
		printf("%d\n",t[1]);
	}
#ifdef Fcdkbear
    double end=clock();
    fprintf(stderr,"*** Total time = %.3lf ***\n",(end-beg)/CLOCKS_PER_SEC);
#endif
	return 0;
}