#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=1e9 +7;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=100000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

set<int> r[5];
int n;
string s;
int main()
{
  finp;
  cin>>n>>s;
  afor(i,1,n)
  {
  	if(s[i-1] == 'D')r[0].insert(i);
  	else r[1].insert(i);
  }

  int curr = 1;
  int fac;
  if(s[0] == 'D')fac = 0;
  else fac = 1;

  while(1)
  {
  	auto x = r[fac^1].upper_bound(curr);
  	auto x1 = r[fac^1].upper_bound(-1);

  	auto x2 = r[fac].upper_bound(curr);
  	auto x3 = r[fac].upper_bound(-1);

  	int l1,r1;
  	l1 = r1 = infs;

  	if(x!= r[fac^1].end())
  	{
  		l1 = *x;
  	}
  	else if(x1!= r[fac^1].end())
  	{
  		l1 = *x1;

  	}
  	else
  	{
  		if(fac==0)cout<<'D';
  		else cout<<'R';
  		return 0;
  	}
  	
  	r[fac^1].erase(l1);
  	l1 = infs;
  	x = r[fac^1].upper_bound(curr);
  	x1 = r[fac^1].upper_bound(-1);

  	if(x2!= r[fac].end())
  	{
  		r1 = *x2;
  	}
  	else if(x3!= r[fac].end())
  	{
  		r1 = *x3;

  	}
  

  	if(x!= r[fac^1].end())
  	{
  		l1 = *x;
  	}
  	else if(x1!= r[fac^1].end())
  	{
  		l1 = *x1;

  	}

  		if( (l1==infs && r1==infs) || (l1==infs && r1==curr) || (l1==curr && r1==infs) || (l1==curr && r1==curr) )
  		{
  			if(fac==0)cout<<'D';
  			else cout<<'R';
  			return 0;
  		}

  	if(l1 > curr && r1 > curr)
  	{
  		if(l1 < r1)
  		{
  			fac^= 1;
  			curr = l1;
  		}
  		else
  		{
  			curr = r1;
  		}
  	}
  	else if(l1 > curr)
  	{
  			fac^= 1;
  			curr = l1;
  	}
  	else if(r1 > curr)
  	{
  		curr = r1;
  	}
  	else if(l1 < r1)
  	{
  			fac^= 1;
  			curr = l1;
  	}
  	else
  	{
  		curr = r1;
  	}


  }
  
return 0;
}