#include <cstdio>
#include <map>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <iostream>

using namespace std;

const int mod = 998244353;

int mul(int a, int b) {
  return (int)((long long)a * b % mod);
}

long long gcd(long long a, long long b) {
  while (b) {
    a %= b;
    swap(a, b);
  }
  return a;
}

const long long inf = 8'000'000'000'000'000'000;

long long llmul(long long a, long long b) {
  return a < inf / b ? a * b : inf;
}

long long pw(long long x, int k) {
  long long res = 1;
  for (int i = 0; i < k; ++i) {
    res = llmul(res, x);
  }
  return res;
}

long long calc(long long x, int k) {
  long long y = max(1LL, (long long)pow(x, 1.0 / k));
  while (pw(y, k) > x) {
    --y;
  }
  while (pw(y, k) < x) {
    ++y;
  }
  return pw(y, k) == x ? y : -1;
}

const int N = 509;

long long a[N];
bool was[N];

int main() {
  int n;
  scanf("%d", &n);
  map<long long, int> cnt;
  memset(was, false, sizeof was);
  for (int i = 0; i < n; ++i) {
    scanf("%lld", a + i);
    for (int j = 4; j >= 2; --j) {
      long long y = calc(a[i], j);
      if (y != -1) {
        cnt[y] += j;
        was[i] = true;
        break;
      }
    }
  }
  for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
      if (a[i] == a[j]) {
        continue;
      }
      long long g = gcd(a[i], a[j]);
      if (g == 1) {
        continue;
      }
      if (!was[i]) {
        ++cnt[g];
        ++cnt[a[i] / g];
        was[i] = true;
      }
      if (!was[j]) {
        ++cnt[g];
        ++cnt[a[j] / g];
        was[j] = true;
      }
    }
  }
  map<long long, int> cnt2;
  for (int i = 0; i < n; ++i) {
    if (!was[i]) {
      ++cnt2[a[i]];
    }
  }
  int ans = 1;
  for (auto &e : cnt) {
    ans = mul(ans, e.second + 1);
  }
  for (auto &e : cnt2) {
    ans = mul(ans, e.second + 1);
    ans = mul(ans, e.second + 1);
  }
  printf("%d\n", ans);
  fflush(stdout);
}
