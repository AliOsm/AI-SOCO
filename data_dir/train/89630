//Be Name Khoda
//
#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
using namespace std;
/*template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T> using ordered_multiset =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;*/
typedef long long ll;
typedef long double ld;
const int MOD = (int)1e9 + 7;
const int MAXN = (int)300;
const ll inf = (ll)1e18;
const int infint = (int)2e9;
vector<int> v;
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		int u;
		cin >> u;
		v.push_back(u);
	}	
	if(n == 0)
	{
		cout << "YES\n1\n1\n3\n3";
		return 0;
	}
	else
	if(n == 1)
	{
		cout << "YES\n" << v[0] << "\n" << 3 * v[0] << "\n" << 3 * v[0] << "\n";
		return 0;
	}
	
	if(n == 2)
	{
		for (int i = 1; i <= 3000; i++)
			for (int j = 1; j <= 3000; j++)
			{
				vector<int> tmp = v;
				v.push_back(i); v.push_back(j);
				sort(v.begin(), v.end());
				if(v[0] + v[1] + v[2] + v[3] == 2 * (v[1] + v[2]) and 2 * (v[1] + v[2]) == 4 * (v[3] - v[0]))
					return cout << "YES\n" << i << "\n" << j, 0;
				v = tmp;
			}
		return cout << "NO", 0;
	}
	else
	if(n == 3)
	{	
		for (int i = 1; i <= 3000; i++)
		{
			vector<int> tmp = v;
			v.push_back(i);
			sort(v.begin(), v.end());
			if(v[0] + v[1] + v[2] + v[3] == 2 * (v[1] + v[2]) and 2 * (v[1] + v[2]) == 4 * (v[3] - v[0]))
				return cout << "YES\n" << i, 0;
			v = tmp;
		}
		return cout << "NO", 0;
	}
	sort(v.begin(), v.end());
	if(v[0] + v[1] + v[2] + v[3] == 2 * (v[1] + v[2]) and 2 * (v[1] + v[2]) == 4 * (v[3] - v[0]))
		return cout << "YES\n", 0;
	cout << "NO";
		
}