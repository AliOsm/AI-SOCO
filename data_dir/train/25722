#include <bits/stdc++.h>

using namespace std;

int n;

long long x, y;

const int maxn = (int)4e5;

vector < int > g[maxn];

long long f[maxn];

int cntt[maxn];
bool ok = false;

long long q[maxn];

bool used[maxn];

void dfs(int v) {
    used[v] = true;
    long long sumany = 0;
    long long min1 = 1e9 * 1ll * 1e9;
    long long min2 = 1e9 * 1ll * 1e9;
    long long cnt = 0;
    for (int i = 0; i < (int)g[v].size(); i++) {
        int u = g[v][i];
        if (!used[u]) {
            dfs(u);
            cnt++;
            sumany += q[u];
            long long delta = f[u] - q[u];
            if (delta <= min1) {
                min2 = min1;
                min1 = delta;
            } else
            if (delta < min2) {
                min2 = delta;
            }
        }
    }
    f[v] = 0;
    q[v] = 0;
    if (cnt > 0) {
        f[v] = sumany + min1 + x + (cnt - 1) * y;
        if (cnt == 1)
            q[v] = f[v];
        else {
            q[v] = sumany + min1 + min2 + (cnt - 2) * y + x + x;
        }
    }
}




int main() {

    cin >> n >> x >> y;
    if (n == 1) {
        cout << 0 << endl;
        return 0;
    }

    for (int i = 0; i < n - 1; i++) {
        int xx, yy;
        scanf("%d %d", &xx, &yy);
        xx--; yy--;
        g[xx].push_back(yy);
        g[yy].push_back(xx);
        cntt[xx]++;
        cntt[yy]++;
        if (cntt[xx] == n - 1)
            ok = true;
        if (cntt[yy] == n - 1)
            ok = true;
    }

    if (y <= x) {
            cout << (n - 1) * 1ll * y + (x - y) * ok << endl;
            return 0;
        }
    


    dfs(0);

    cout << min(f[0], q[0]);
    return 0;
}