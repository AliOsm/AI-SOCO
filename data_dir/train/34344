#include<bits/stdc++.h>
using namespace std;

#define fi(i,a,b)   for(long long i=a;i<=b;i++)
#define fr(i,a)     for(long long i=0;i<a;i++)
#define fd(i,a,b)   for(long long i=b;i>=a;i--)
#define clr(x)      memset(x,0,sizeof(x))
#define cln(x)      memset(x,-1,sizeof(x))
#define __          printf(" ")
#define _           printf("\n")
#define stree       long long lft=node<<1,rht=(node<<1)|1,mid=(s+e)>>1

long long tree[200100],n;

void update(long long  inx,long long  x){
     while(inx<=n){
        tree[inx]+=x;
        inx+=(inx&-inx);
     }
     return;
}

long long  qry(long long  inx){
    long long  sum=0;
    while(inx){
        sum+=tree[inx];
        inx-=(inx&-inx);
    }
    return sum;
}

long long tree1[200100];

void update1(long long  inx,long long  x){
     while(inx<=n){
        tree1[inx]+=x;
        inx+=(inx&-inx);
     }
     return;
}

long long  qry1(long long  inx){
    long long  sum=0;
    while(inx){
        sum+=tree1[inx];
        inx-=(inx&-inx);
    }
    return sum;
}

long long ord[200020];

main(){
    long long k,a,b,q;
    scanf("%lld %lld %lld %lld %lld",&n,&k,&a,&b,&q);
    while(q--){
        long long t,x,y,cur;
        scanf("%lld",&t);
        if(t==1){
            scanf("%lld %lld",&x,&y);
            if(ord[x]<b){
                cur=min(b-ord[x],y);
                update1(x,cur);
            }
            if(ord[x]<a){
                cur=min(a-ord[x],y);
                update(x,cur);
            }
            ord[x]+=y;
        }
        else{
            scanf("%lld",&x);
            printf("%lld\n",qry1(x-1)+qry(n)-qry(x+k-1));
        }
    }


    return 0;
}
