#include <bits/stdc++.h>
#define pb push_back
#define add insert
#define all(x) x.begin(), x.end()
using namespace std;
const int MAXN = 1e3+5;
const int INF = 2e9;
const int MOD = 1e9+7;
char arr[MAXN][MAXN];
int dist[MAXN][MAXN];

int dx[] = {0, -1, 1, 0};
int dy[] = {1, 0, 0, -1};
int N = 0, M = 0, K = 0;

inline bool go_here(pair <int,int> A, int K){
    if(A.first > 0 && A.first <= N && A.second > 0 && A.second <= M){
        if(K != -1) return dist[ A.first ][ A.second ] < K;
        else return (arr[ A.first ][ A.second ] != '*' && dist[ A.first ][ A.second ] == INF);
    }
    else return false;
}

int main(){
    queue < pair <int,int> > q;
    
    pair <int,int> INI;
    string RES = "", direction = "DLRU";

    scanf("%i %i %i", &N, &M, &K);

    for (int i = 1; i <= N; i++)
        for (int j = 1; j <= M; j++){
            scanf (" %c", &arr[i][j]);

            if (arr[i][j] == 'X')
                INI = {i, j};
        }

    for (int i = 1; i <= N; i++)
        for (int j = 1; j <= M; j++)
            dist[i][j] = INF;

    q.push(INI);
    dist[INI.first][INI.second] = 0;

    while (!q.empty()){
        pair <int,int> v = q.front(); q.pop();

        for (int i = 0; i < 4; i++)
            if (go_here({v.first + dy[i], v.second + dx[i]}, -1)){
                dist[ v.first + dy[i] ][ v.second + dx[i] ] = dist[ v.first ][ v.second ] + 1;
                q.push({v.first + dy[i], v.second + dx[i]});
            }
    }

    while (K){
        int i = 0;

        for (i = 0; i < 4; i++)
            if(go_here( {INI.first + dy[i], INI.second + dx[i]}, K)){
                RES.pb(direction[i]);

                INI.first += dy[i], INI.second += dx[i];
                break;
            }

        if(i == 4)
            return printf("IMPOSSIBLE"), 0;

        K--;
    }

    printf("%s", RES.c_str());
    return 0;
}