#include <bits/stdc++.h>
#define FOR(x,n) for(int x = 0; x < n; x++)
#define ALL(a) (a).begin(), (a).end()
#define SZ(a) ((int)(a).size())
#define FIN ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
using namespace std;
typedef long long ll;

const int MXN = 101, MXV = 501;
int N, M, A[MXN][MXN] = {};
int cols[MXN];
bool can[MXV];

vector<pair<string, int>> ans;

int solve(int x, int add_to_ans = 0){
  FOR(j,M) cols[j] = A[0][j] - x;
  for(int i = 1; i < N; i++) {
    int val = A[i][0] - cols[0];
    if(val < 0) can[x] = false;

    for(int j = 0; j < M; j++){
      can[x] &= val + cols[j] == A[i][j];
    }
  }

  if(can[x]){
    int cnt = 0;
    for(int j = 0; j < M; j++)
      for(int z = 0; z < cols[j]; z++){
        cnt++;
        if(add_to_ans)
          ans.push_back({"col", j+1});
      }
    for(int i = 0; i < N; i++)
      for(int z = 0; z < A[i][0] - cols[0]; z++){
        cnt++;
        if(add_to_ans)
          ans.push_back({"row", i+1});
      }
    return cnt; 
  }

  return 1<<28;
}

int main() { FIN;
  memset(can, true, sizeof(can));

  cin >> N >> M;
  FOR(x,N) FOR(y,M) cin >> A[x][y];
 
  int mn = A[0][0]; 
  FOR(y,M) mn = min(mn, A[0][y]);

  int ansVAL = 1<<28, ansIDX = -1;

  for(int x = 0; x <= mn; x++){
    int tmp = solve(x);
    if(tmp < ansVAL)
      ansVAL = tmp, ansIDX = x;
  }

  if(ansIDX != -1){
    solve(ansIDX, true);
    cout << ansVAL << "\n";
    for(auto p : ans)
      cout << p.first << " " << p.second << "\n";
    return 0;
  }
  cout << "-1\n";
}
