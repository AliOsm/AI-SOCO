#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define endl '\n'
#define F first
#define S second
#define mp make_pair
#define ll long long
#define pb push_back
#define pii pair < int, int >
#define type(x) __typeof(x.begin())
#define foreach(i, x) for(type(x) i = x.begin(); i != x.end(); i++)
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define sol (root << 1)
#define sag (sol | 1)
#define orta ((bas + son) >> 1)
#define bit __builtin_popcount
#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#define dbg(x) cerr << (#x) << " --> " << (x) << endl
#define TIME cerr << "Tooks " << (double) clock() / CLOCKS_PER_SEC << " seconds." << endl

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

int n, a[50][50];

int main () {
    
    ios :: sync_with_stdio(0);
    
    cin >> n;
    
    bool flag = 0;
    
    FOR(j, 1, j)
    {
        if(flag) break;
        
        FOR(i, 1, 4)
        {
            if(!n)
            {
                flag = 1;
                
                break;
            }
            
            if(i == 3 and j > 1)
                continue;
            
            a[i][j] = 1;
            
            n--;
        }
    }
    
    cout << "+------------------------+" << endl;
    
    cout << '|';
    
    FOR(j, 1, 11)
        cout << (a[1][j] ? 'O' : '#') << ".";
    
    cout << "|D|)" << endl;
    
    cout << '|';
    
    FOR(j, 1, 11)
        cout << (a[2][j] ? 'O' : '#') << ".";
    
    cout << "|.|" << endl;
    
    cout << '|' << (a[3][1] ? 'O' : '#') << ".......................|" << endl;
    
    cout << '|';
    
    FOR(j, 1, 11)
        cout << (a[4][j] ? 'O' : '#') << ".";
    
    cout << "|.|)" << endl;
    
    cout << "+------------------------+" << endl;
    
    return 0;
    
}