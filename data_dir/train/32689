/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>


#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define int long long

using namespace std;

class CMagicGrid {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        int box = 4;
        int rl = 0, rr = 15;
        bool first = true;

        int blocks = n / 4;


        int res[n][n];
        for (int bi = 0; bi < blocks; ++bi) {
            for (int bj = 0; bj < blocks; ++bj) {
                int cnt = 0;
                int l = rl, r = rr;
                rl += 16;
                rr += 16;
                for (int i = 4 * bi; i < 4 * bi + 4; ++i) {
                    for (int j = 4 * bj; j < 4 * bj + 4; ++j) {
                        if (cnt & 1) res[i][j] = r--;
                        else res[i][j] = l++;
                        ++cnt;
                    }
                }
            }
        }

//        for(int i = 0; i < n; ++i) {
//            int ans = 0;
//            for(int j = 0; j < n; ++j) ans ^= res[i][j];
//            out << ans << ' ';
//        }
//
//        for(int j = 0; j < n; ++j) {
//            int ans = 0;
//            for(int i = 0; i < n; ++i) ans ^= res[i][j];
//            out << ans << ' ';
//        }
//        out << "\n Matrix \n";
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) out << res[i][j] << ' ';
            out << '\n';
        }
    }
};


int32_t main() {
    CMagicGrid solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
