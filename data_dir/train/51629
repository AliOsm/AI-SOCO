#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 998244353LL
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2

using namespace __gnu_pbds;
using namespace std ;

typedef pair<i64, i64> pii;
typedef tree< pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

#define maxn 200005

vector <int> odd , even ;

i64 dpDif[maxn] , dpSame[maxn] , oneSide[maxn] , k ;

i64 f( vector <int> &v )
{
    int last =-1 ;
    i64 ans = 1LL ;
    int sz = (int)v.size() ;
    for(int i=0 ; i<sz ; i++)
    {
        if(v[i]!=-1) continue ;
        int l = i ,r = i ;
        for(int j=i+1 ; j<v.size() ; j++)
        {
            if( v[j]==-1 ) r = j ;
            else break ;
        }
        i = r ;
        if( l==0 && r==sz-1 ) ans = (oneSide[r-l]*k)%mod ;
        else if( l==0 || r==sz-1 ) ans *= oneSide[r-l+1] ;
        else if( v[l-1]==v[r+1] ) ans *= dpSame[r-l+1] ;
        else ans *= dpDif[r-l+1] ;
        ans %= mod ;
    }
    return ans%mod ;
}

int main()
{
    i64 n  ;

    scanf("%lld %lld",&n,&k) ;

    oneSide[0] = 1 ;

    dpDif[1] = k-2 ;
    dpSame[1] = k-1 ;
    oneSide[1] = k-1 ;

    for(int i=2 ; i<=n ; i++)
    {
        dpSame[i] = ((k-1)*dpDif[i-1])%mod ;
        dpDif[i] = ( (k-2)*dpDif[i-1] + dpSame[i-1] )%mod ;
        oneSide[i] = (oneSide[i-1]*(k-1))%mod ;
    }

    i64 ans = 1LL ;

    for(int i=0; i<n ; i++)
    {
        int a ;
        scanf("%d",&a) ;
        if( i%2 == 1 )
        {
            if( !odd.empty() && odd.back() == a && a!= -1 ) ans = 0 ;
            odd.pb(a) ;
        }
        else
        {
            if( !even.empty() && even.back() == a&& a!=-1 ) ans = 0 ;
            even.pb(a) ;
        }
    }
  //  printf("%lld\n",ans) ;

    ans *= (f(odd)*f(even)) ;

    ans = (ans%mod + mod)%mod ;

    printf("%lld\n",ans) ;

    return 0 ;
}
