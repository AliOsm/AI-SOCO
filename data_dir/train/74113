#include <algorithm>
#include <iostream>
#include <cstring>
#include <climits>
#include <cassert>
#include <iomanip>
#include <cstdio>
#include <vector>
#include <string>
#include <stack>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define type(x) __typeof((x).begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 2575757;
const int LG = 22;

int depth[N];
int anc[N][LG + 1];
int d1, d2, dist;

int jump(int u,int k){
    for(int i = LG; i >= 0; i--){
        if((1 << i) <= k){
            k -= (1 << i);
            u = anc[u][i];
        }
    }
    return u;
}

int LCA(int u,int v){
    if(depth[u] > depth[v]) u = jump(u, depth[u] - depth[v]);
    if(depth[v] > depth[u]) v = jump(v, depth[v] - depth[u]);
    if(u == v) return u;
    for(int i = LG; i >= 0; i--){
        if(anc[u][i] != anc[v][i]){
            u = anc[u][i];
            v = anc[v][i];
        }
    }
    return anc[u][0];
}

int query(int u,int v){
    return depth[u] + depth[v] - 2 * depth[LCA(u,v)];
}

void add(int p,int u){
    depth[u] = depth[p] + 1;
    anc[u][0] = p;
    for(int i = 1; i <= LG; i++)
        anc[u][i] = anc[anc[u][i - 1]][i - 1];
    int nd1 = query(d1, u);
    int nd2 = query(d2, u);
    eprintf("u : %d, d1 : %d, d2 : %d, (%d , %d)\n",u,d1,d2,nd1,nd2);
    if(nd1 > nd2){
        if(nd1 > dist){
            dist = nd1;
            d2 = u;
        }
    }else{
        if(nd2 > dist){
            dist = nd2;
            d1 = u;
        }
    }
}

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#endif

    int n = 4;

    dist = 0;
    d1 = d2 = 1;
    depth[1] = 1;
    add(1,2);
    add(1,3);
    add(1,4);

        eprintf("::%d %d\n",d1,d2);
    int q = read();
    while(q--){
        int v = read();
        add(v, ++n);
        add(v, ++n);
        eprintf("%d %d\n",d1,d2);
        printf("%d\n",dist);
    }

    return 0;

}
