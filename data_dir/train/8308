#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 3e5 + 1;
const int L = 2;
const int M = 8;
int n, m, cur;

int arr[N][M];
int val[N];
int ind[1 << M];

void input() {
    cin >> n >> m;
    for(int i = 1; i <= n; ++i) {
        for(int j = 0; j < m; ++j) {
            cin >> arr[i][j];
        }
    }
}

int inv(int x) {
    return (1 << m) - x - 1;
}

bool test(int q) {
    for(int i = 0; i < (1 << m); ++i) {
        ind[i] = 0;
    }
    for(int i = 1; i <= n; ++i) {
        val[i] = 0;
        for(int j = 0; j < m; ++j) {
            val[i] |= (1 << j) * (arr[i][j] >= q);
        }
        int mask = val[i];
        for(int j = mask; j; j = (j - 1) & mask) {
            if(ind[inv(j)]) {
                return 1;
            }
        }
        if(ind[inv(0)]) {
            return 1;
        }
        ind[mask] = i;
    }
    return 0;
}

int bin_search(int l, int r) {
    if(l == r) {
        return l;
    }
    int q = l + r + 1 >> 1;
    if(test(q)) {
        return bin_search(q, r);
    } else {
        return bin_search(l, q - 1);
    }
}

void solve() {
    int q = bin_search(0, inf);
    for(int i = 0; i < (1 << m); ++i) {
        ind[i] = 0;
    }
    for(int i = 1; i <= n; ++i) {
        val[i] = 0;
        for(int j = 0; j < m; ++j) {
            val[i] |= (1 << j) * (arr[i][j] >= q);
        }
        int mask = val[i];
        for(int j = mask; j; j = (j - 1) & mask) {
            if(ind[inv(j)]) {
                cout << ind[inv(j)] << " " << i << "\n";
                return;
            }
        }
        if(ind[inv(0)]) {
            cout << ind[inv(0)] << " " << i << "\n";
            return;
        }
        ind[mask] = i;
    }
    cout << "1 1\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
