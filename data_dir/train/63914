//#pragma GCC target("avx2")
//#pragma GCC optimization("O3")
//#pragma GCC optimization("unroll-loops")
//assert(q==w) если q!=w --> runtime error
#include <bits/stdc++.h>

#define pb push_back
#define F first
#define S second
#define all(x) x.begin(),x.end()
#define ub upper_bound
#define lb lower_bound
#define bit __builtin_popcount
#define memset(x) memset(x,0,sizeof(x))

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<vector<int>> matrix;

inline void boost(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}

const ll maxn=2e5+123;
const ll inf=1e9+123;
const ll linf=1e18+123;
const ll mod=1e9+7;
const double eps=1e-9;
const double pi=acos(-1);
int dx[8]={0,1,-1,0,1,-1,1,-1};
int dy[8]={1,0,0,-1,1,1,-1,-1};
ll ans[maxn],d[maxn],cntr[maxn],sz[maxn],a[maxn];
vector<int>vec[maxn],g[maxn];

void calc(int v,int p){
    sz[v]=1;
    for(int to:g[v]){
        if(to==p){
            continue;
        }
        calc(to,v);
        sz[v]+=sz[to];
    }
}

void dfs(int v,int p,int keep){
    int bigchild=-1,mx=-1;
    for(int to:g[v]){
        if(sz[to]>mx && to!=p){
            mx=sz[to];
            bigchild=to;
        }
    }
    for(int to:g[v]){
        if(to!=p && to!=bigchild){
            dfs(to,v,0);
        }
    }
    if(bigchild!=-1){
        dfs(bigchild,v,1);
        swap(vec[v],vec[bigchild]);
    }
    vec[v].pb(v);
    cntr[a[v]]++;
    if(d[v]<cntr[a[v]]){
        d[v]=cntr[a[v]];
        ans[v]=a[v];
    }
    else if(d[v]==cntr[a[v]]){
        ans[v]+=a[v];
    }
    for(int to:g[v]){
        if(p!=to && bigchild!=to){
            for(int i:vec[to]){
                cntr[a[i]]++;
                vec[v].pb(i);
                if(d[v]<cntr[a[i]]){
                    d[v]=cntr[a[i]];
                    ans[v]=0;
                    ans[v]+=a[i];
                }
                else if(d[v]==cntr[a[i]]){
                    ans[v]+=a[i];
                }
            }
        }
    }
    if(keep==0){
        for(int i:vec[v]){
            cntr[a[i]]--;
        }
        return;
    }
    d[p]=d[v];
    ans[p]=ans[v];
}
int main(){
    boost();
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int n;
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>a[i];
    }
    for(int i=1,u,v;i<n;i++){
        cin>>u>>v;
        g[u].pb(v);
        g[v].pb(u);
    }
    calc(1,0);
    dfs(1,0,0);
    for(int i=1;i<=n;i++){
        cout<<ans[i]<<" ";
    }
	exit(0);
}
