#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=1e9+7;   
#define INF 100000000
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,k,m,t,q,x,y,z;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
vector<int> pf(string s) {
    int n = (int)s.length();
    vector<int> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
//lli vis[305][305];
lli a[500005];
ll dp[105][105][15];
ll dp1[105][105][15];
ll par[2005][15][40];
//lli good[5005][5005];
string s;
vector<lli> v,v1;
struct edge
{
    lli a,b,c;
} e[100005];
int fl;
lli solve(lli i,lli y,lli so,lli se,lli prev)
{
    
}
bool cmp(ll a,ll b)
{
    a.first=abs(a.first);
    a.second=abs(a.second);
    b.first=abs(b.first);
    b.second=abs(b.second);
    if(a.first==b.first)
    return a.second<b.second;
    return a.first<b.first;
}
ll p[100005];
int main()
{
scanf("%lld",&n);
lli cnt=0;
for(int i=1;i<=n;i++)
{
    scanf("%lld%lld",&p[i].first,&p[i].second);
    lli d=abs(p[i].second);
    if(p[i].second>0)
    cnt++;
    else if(p[i].second<0)
    cnt++;
    d=p[i].first;
    if(d>0)
    cnt++;
    else if(d<0)
    cnt++;
    cnt++;
    if(p[i].first>0)
    cnt++;
    else if(p[i].first<0)
    cnt++;
    if(p[i].second>0)
    cnt++;
    else if(p[i].second<0)
    cnt++;
    cnt++;
}
sort(p+1,p+n+1,cmp);
printf("%lld\n",cnt);
for(int i=1;i<=n;i++)
{
    //cin>>p[i].first>>p[i].second;
    lli d=abs(p[i].second);
    if(p[i].second>0)
    printf("1 %lld U\n",d);
    else if(p[i].second<0)
    printf("1 %lld D\n",d);
    d=p[i].first;
    if(d>0)
    printf("1 %lld R\n",abs(d));
    else if(d<0)
    printf("1 %lld L\n",abs(d));
    printf("2\n");
    if(p[i].first>0)
    printf("1 %lld L\n",abs(p[i].first));
    else if(p[i].first<0)
    printf("1 %lld R\n",abs(p[i].first));
    if(p[i].second>0)
    printf("1 %lld D\n",abs(p[i].second));
    else if(p[i].second<0)
    printf("1 %lld U\n",abs(p[i].second));
    printf("3\n");
}
}