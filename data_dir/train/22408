#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1, class T2>inline void gmax(T1 &a, T2 b) { if (b>a)a = b; }
template <class T1, class T2>inline void gmin(T1 &a, T2 b) { if (b<a)a = b; }
const int N = 1e5+10, M = 2e5+10, Z = 1e9 + 7, ms63 = 0x3f3f3f3f;
int n;
int x, y, z;
vector<int>a[N];
int first[N]; int id;
int w[M], c[M], nxt[M];
int son[N],up[N],dn[N];
void ins(int x, int y, int z)
{
	w[++id] = y;
	c[id] = z;
	nxt[id] = first[x];
	first[x] = id;
}
LL C3(LL x)
{
	return x*(x - 1)*(x - 2) / 6;
}
LL C2(LL x)
{
	return x*(x - 1) / 2;
}
double ans;
void dp(int x,int fa)
{
	son[x] = 1;
	for (int z = first[x]; z;z=nxt[z])
	{
		int y = w[z];
		if (y == fa)continue;
		dp(y, x);
		son[x] += son[y];
		int zz = z >> 1;
		dn[zz] = son[y];
		up[zz] = (n - son[y]);
		ans += (C2(dn[zz])*up[zz] + C2(up[zz])*dn[zz]) * (double)c[z];
	}
}

int main()
{
	while (~scanf("%d", &n))
	{
		MS(first, 0); id = 1;
		for (int i = 1; i < n; ++i)
		{
			scanf("%d%d%d", &x, &y, &z);
			ins(x, y, z);
			ins(y, x, z);
		}
		ans = 0;
		dp(1, 0);
		int q; scanf("%d", &q);
		double P = 2.0 / C3(n);
		while (q--)
		{
			int o, l; scanf("%d%d", &o, &l);
			ans -= (C2(dn[o])*up[o] + C2(up[o])*dn[o]) * (double)(c[o << 1] - l);
			c[o << 1] = l;
			printf("%.15f\n", ans * P);
		}
	}
	return 0;
}