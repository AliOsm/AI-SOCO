#include <string.h>
#include <unordered_map>

#include <sstream>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <bitset>
#include <algorithm>
#include <iostream>
#include   <stdlib.h>    
#include   <time.h> 
#include <stack>
#include <queue>
#include <set>

#include <map>
#include <vector>
#include <string>
#include <stdlib.h>

#define ll long long
#define clr(x) memset(x,0,sizeof(x))
#define _clr(x) memset(x,-1,sizeof(x))
#define fr(i,a,b) for(int i = a; i < b; ++i)
#define frr(i,a,b) for(int i = a; i > b; --i)
#define pb push_back
#define sf scanf

#define pf printf
#define mp make_pair

using namespace std;
const int N = 1100000;
int mod = 998244353;

int n,k;

pair<ll,ll> get(ll x1, ll y1, ll x2, ll y2) {
	ll tot = (x2-x1+1)*(y2-y1+1);
	ll tot_a = 0, tot_b = 0;
	if((x1%2==0&&y1%2!=0)||(x1%2!=0&&y1%2==0)) {
		tot_a = tot/2;
		tot_b = (tot+1)/2;
	}
	else {
		tot_a = (tot+1)/2;
		tot_b = tot/2;
	}
	
	return mp(tot_a,tot_b);
}

pair<ll, ll> inter(ll x1, ll y1, ll x2, ll y2, ll x3, ll y3, ll x4, ll y4) {
	if(x2<x3||x1>x4||y1>y4||y2<y3) {
		return mp(0,0);
	}
	ll min_x = max(x1,x3);
	ll max_x = min(x2,x4);
	ll min_y = max(y1,y3);
	ll max_y = min(y2,y4);
	//printf("inter %lld,%lld,%lld,%lld\n",min_x,min_y,max_x,max_y);
	return get(min_x,min_y,max_x,max_y);

}


int main() {
	int t;
	sf("%d",&t);
	while(t--) {
		int n,m;
		sf("%d%d",&n,&m);
		int x1,y1,x2,y2;
		sf("%d%d%d%d",&x1,&y1,&x2,&y2);
		int x3,y3,x4,y4;
		sf("%d%d%d%d",&x3,&y3,&x4,&y4);

		ll tot = (ll)n*m;
		ll tot_a = (tot+1)/2, tot_b = tot/2;
		pair<ll,ll> area1 = get(x1,y1,x2,y2);
		//printf("area1 = %lld,%lld\n",tot_a,tot_b);
		
		tot_a -= area1.first;
		tot_b -= area1.second;
		//printf("area1 = %lld,%lld\n",tot_a,tot_b);

		pair<ll,ll> area2 = get(x3,y3,x4,y4);
		tot_a -= area2.first;
		tot_b -= area2.second;
		//printf("area2 = %lld %lld\n",tot_a,tot_b);
	
		pair<ll,ll> area3 = inter(x1,y1,x2,y2,x3,y3,x4,y4);
		tot_a += area3.first;
		tot_b += area3.second;
		//printf("area3 = %lld %lld\n", tot_a,tot_b);
	
		tot_a += area1.first+area1.second;
		tot_b += area2.first+area2.second;
		tot_a -= area3.first+area3.second;

		printf("%lld %lld\n",tot_a,tot_b);
	}
}
