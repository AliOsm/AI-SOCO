#include <bits/stdc++.h>

using namespace std;

typedef unsigned uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ldbl;
typedef pair<int, int> pii;
typedef pair<uint, uint> puu;
typedef pair<ll, ll> pll;
typedef pair<ull, ull> pull;
typedef pair<double, double> pdd;
typedef vector<int> vi;
typedef vector<uint> vu;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<pii> vpii;
typedef vector<puu> vpuu;
typedef vector<pll> vpll;
typedef vector<pull> vpull;
typedef vector<string> vstr;
typedef vector<double> vdbl;
typedef vector<ldbl> vldbl;
#define pb push_back
#define ppb pop_back
#define pfr push_front
#define ppfr pop_front
#define emp emplace
#define empb emplace_back
#define be begin
#define rbe rbegin
#define all(x) (x).be(), (x).end()
#define rall(x) (x).rbe(), (x).rend()
#define fir first
#define sec second
#define mkp make_pair
#define brif(cond) if (cond) break
#define ctif(cond) if (cond) continue
#define retif(cond) if (cond) return
void canhazfast() {ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}
template<typename T> T gcd(T a, T b) {return b ? gcd(b, a%b) : a;}
template<typename T> T extgcd(T a, T b, T &x, T &y)
{
    T x0 = 1, y0 = 0, x1 = 0, y1 = 1;
    while (b) {
        T q = a/b; a %= b; swap(a, b);
        x0 -= q*x1; swap(x0, x1);
        y0 -= q*y1; swap(y0, y1);
    }
    x = x0; y = y0; return a;
}
int ctz(uint x) {return __builtin_ctz(x);}
int ctzll(ull x) {return __builtin_ctzll(x);}
int clz(uint x) {return __builtin_clz(x);}
int clzll(ull x) {return __builtin_clzll(x);}
int popcnt(uint x) {return __builtin_popcount(x);}
int popcntll(ull x) {return __builtin_popcountll(x);}
int bsr(uint x) {return 31^clz(x);}
int bsrll(ull x) {return 63^clzll(x);}

#define MOD 1000000007
#define PHI 1000000006

uint add(uint a, uint b) { return a+b < MOD ? a+b : a+b-MOD; }
uint sub(uint a, uint b) { return a < b ? a+MOD-b : a-b; }
uint mul(uint a, uint b) { return (ull)a*b%MOD; }
uint sqr(uint a) { return mul(a, a); }

uint modpow(uint b, uint e)
{
    uint r = 1;
    for (; e; e >>= 1) {
        if (e&1) r = mul(r, b);
        b = mul(b, b);
    }
    return r;
}

uint modinv(uint n) { return modpow(n, MOD-2); }
uint moddiv(uint n, uint d) { return mul(n, modinv(d)); }

void mmul(const uint a[][4], const uint b[][4], uint c[][4])
{
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            c[i][j] = 0;
            for (int k = 0; k < 3; ++k) c[i][j] += (ull)a[i][k]*b[k][j]%PHI;
            c[i][j] %= PHI;
        }
    }
}

int main()
{
    canhazfast();

    ull n;
    uint f0, f1, f2, c;
    uint ef0, ef1, ef2, ec;
    uint a[4][4] = {
        0, 1, 0, 0,
        0, 0, 1, 0,
        1, 1, 1, 0,
        0, 0, 0, 0
    };
    uint p[4][4], tmp[4][4];
    uint ans;

    cin >> n >> f0 >> f1 >> f2 >> c;
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) p[i][j] = i == j;
    }
    for (ull nn = n-3; nn; nn >>= 1) {
        if (nn&1) {
            mmul(p, a, tmp);
            memcpy(p, tmp, sizeof p);
        }
        mmul(a, a, tmp);
        memcpy(a, tmp, sizeof a);
    }
    ec = (1ULL*p[2][0]+2ULL*p[2][1]+3ULL*p[2][2]+PHI-n%PHI)%PHI;
    ef0 = p[2][0];
    ef1 = p[2][1];
    ef2 = p[2][2];
    //cerr << "ec = " << ec << '\n';
    //cerr << "ef = [" << ef0 << ", " << ef1 << ", " << ef2 << "]\n";
    ans = modpow(c, ec);
    ans = mul(ans, modpow(f0, ef0));
    ans = mul(ans, modpow(f1, ef1));
    ans = mul(ans, modpow(f2, ef2));
    cout << ans << '\n';

    return 0;
}
