#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <stack>
#include <cstring>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <ctime>
#include <cmath>

using namespace std;

const int N = 100001;
const int INF = (int) 1e9 + 1;

bool used[N];
pair < int, int > a[N], b[N];
int n;
int MOD;

pair < int, int > f(int cur, int& i, int& j)
{
	pair < int, int > ans(0, 0);
	int l = i;
	while (i < n && a[i].first == cur)
	{
		ans.first++;
		used[a[i].second] = true;
		i++;
	}
	while (j < n && b[j].first == cur)
	{
		ans.first++;
		if (used[b[j].second] == true)
			ans.second++;
		j++;
	}

	while (l < i)
	{
		used[a[l].second] = false;
		l++;
	}

	return ans;
}



int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	scanf("%d", &n);
	for (int i = 0; i < n; ++i)
	{
		scanf("%d", &a[i].first);
		a[i].second = i;
	}
	a[n].first = INF;
	for (int i = 0; i < n; ++i)
	{
		scanf("%d", &b[i].first);
		b[i].second = i;
	}
	scanf("%d", &MOD);
	b[n].first = INF;
	sort(a, a + n);
	sort(b, b + n);
	int i = 0, j = 0;
	long long ans = 1;
	while (i < n || j < n)
	{
		int cur = min(a[i].first, b[j].first);
		pair < int, int > tmp = f(cur, i, j);
		for (int k = 2; k <= tmp.first; ++k)
		{
			long long t = k;
			while (t % 2 == 0 && tmp.second > 0)
			{
				t /= 2;
				tmp.second--;
			}
			ans = ans * t % MOD;
		}
	}
	printf("%I64d\n", ans);
    return 0;
}