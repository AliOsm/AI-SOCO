///****In the name of Allah, most Gracious, most Compassionate****//

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

#define NL cout<<"\n";
#define ALL(a) a.begin(), a.end()
#define DBG(a) cout<< #a <<" --> "<<(a)<<endl;
#define FastIO ios::sync_with_stdio(false); cin.tie(nullptr);cout.tie(nullptr)
#define IN freopen("input.txt","r+",stdin)
#define OUT freopen("output.txt","w+",stdout)

template < class T1,class T2>
ostream &operator <<(ostream &os,const pair < T1,T2 > &p)
{
    os<<"{"<<p.first<<","<<p.second<<"}";
    return os;
}

const int N=3e5+5;
const int oo=1e9+7;
struct point
{
    int x,y,z,i;
    bool operator < ( const struct point& p)
    {
        if(x==p.x and y==p.y ) return z<p.z;
        if(x==p.x  ) return y<p.y;
        return x<p.x;
    }
};
int vis[N];

int32_t main()
{
    FastIO;
    int n;
    cin>>n;
    map<pii,vector< pii > > tot , stot,sstot;
    vector<point > v;
    for(int i =1;i<=n;i++)
    {
        int x , y, z;
        cin>>x>>y>>z;
        v.push_back({x,y,z,i});
        tot[{x,y}].push_back({z,i});
    }
    vector<point > res;
    for(auto &i : tot)
    {
        sort(ALL(i.second));
        if(i.second.size()%2)
        {
            for(int j=0;j<i.second.size()-1;j+=2)
            {
                cout<<i.second[j].second<<" "<<i.second[j+1].second<<"\n";
            }
            stot[{i.first.first , i.second.back().first }].push_back({i.first.second ,i.second.back().second });
        }
        else
        {
            for(int j=0;j<i.second.size();j+=2)
            {
                cout<<i.second[j].second<<" "<<i.second[j+1].second<<"\n";
            }
        }
    }
    for(auto &i : stot)
    {
        sort(ALL(i.second));
        if(i.second.size()%2)
        {
            for(int j=0;j<i.second.size()-1;j+=2)
            {
                cout<<i.second[j].second<<" "<<i.second[j+1].second<<"\n";
            }
            sstot[{ i.second.back().first , i.first.second }].push_back({i.first.first ,i.second.back().second });
        }
        else
        {
            for(int j=0;j<i.second.size();j+=2)
            {
                cout<<i.second[j].second<<" "<<i.second[j+1].second<<"\n";
            }
        }
    }
    map<int  , vector<point> > mx , my ,mz;
    for(auto &i : sstot)
    {
        sort(ALL(i.second));
        if(i.second.size()%2)
        {
            for(int j=0;j<i.second.size()-1;j+=2)
            {
                cout<<i.second[j].second<<" "<<i.second[j+1].second<<"\n";
            }
//            DBG(i.first);
//            DBG(i.second.back());
            mx[i.second.back().first].push_back({i.second.back().first , i.first.first , i.first.second , i.second.back().second});
        }
        else
        {
            for(int j=0;j<i.second.size();j+=2)
            {
                cout<<i.second[j].second<<" "<<i.second[j+1].second<<"\n";
            }
        }
    }
    for(auto &i : mx)
    {
        sort(ALL(i.second));
        if(i.second.size()%2)
        {
            for(int j=0;j<i.second.size()-1;j+=2)
            {
                cout<<i.second[j].i<<" "<<i.second[j+1].i<<"\n";
            }
            my[i.second.back().y].push_back(i.second.back());
        }
        else
        {
            for(int j=0;j<i.second.size();j+=2)
            {
                cout<<i.second[j].i<<" "<<i.second[j+1].i<<"\n";
            }
        }
    }
    for(auto &i : my)
    {
        sort(ALL(i.second));
        if(i.second.size()%2)
        {
            for(int j=0;j<i.second.size()-1;j+=2)
            {
                cout<<i.second[j].i<<" "<<i.second[j+1].i<<"\n";
            }
            mz[i.second.back().z].push_back(i.second.back());
        }
        else
        {
            for(int j=0;j<i.second.size();j+=2)
            {
                cout<<i.second[j].i<<" "<<i.second[j+1].i<<"\n";
            }
        }
    }
    for(auto &i : mz)
    {
        sort(ALL(i.second));
        if(i.second.size()%2)
        {
            for(int j=0;j<i.second.size()-1;j+=2)
            {
                cout<<i.second[j].i<<" "<<i.second[j+1].i<<"\n";
            }
            res.push_back(i.second.back());
        }
        else
        {
            for(int j=0;j<i.second.size();j+=2)
            {
                cout<<i.second[j].i<<" "<<i.second[j+1].i<<"\n";
            }
        }
    }
    sort(ALL(res));
    assert(res.size()%2==0);
    for(int i=0;i<res.size();i+=2)
    {
        cout<<res[i].i<<" "<<res[i+1].i<<"\n";
    }


}
