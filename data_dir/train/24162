#include <bits/stdc++.h>

using namespace std;

#define x first
#define y second
#define SZ(x) ((int)((x).size()))
#define PB(x) push_back(x)
#define INF (0x3f3f3f3f)
#define MEMSET(x,v) memset(x,v,sizeof(x))

typedef long long LL;
typedef pair<int, int> PII; typedef pair<PII, int> PII2;

#define MAXN (100005)

int N, L, X, Y;
int in[MAXN];
set<int> S;

int main() {
    scanf("%d %d %d %d", &N, &L, &X, &Y);
    if (X > Y) swap(X, Y);
    for (int i = 0; i < N; i++) {
        scanf("%d", &in[i]);
        S.insert(in[i]);
    }

    bool found_x = false;
    bool found_y = false;
    for (int i = 0; i < N; i++) {
        if (S.find(in[i] + X) != S.end()) found_x = true;
        if (S.find(in[i] + Y) != S.end()) found_y = true;
    }

    if (found_x && found_y) {
        printf("0\n");
    } else if (found_x) {
        printf("1\n%d\n", Y);
    } else if (found_y) {
        printf("1\n%d\n", X);
    } else {
        int p = -1;
        for (int i = 0; i < N; i++) {
            if (S.find(in[i] + X + Y) != S.end()) {
                p = in[i];
                break;
            }
        }
        if (p != -1) {
            printf("1\n%d\n", p + X);
            return 0;
        }
        for (int i = 0; i < N; i++) {
            if (in[i] - Y >= 0 && S.find(in[i] - Y + X) != S.end()) {
                printf("1\n%d\n", in[i] - Y);
                return 0;
            }
            if (in[i] + Y <= L && S.find(in[i] + Y - X) != S.end()) {
                printf("1\n%d\n", in[i] + Y);
                return 0;
            }
        }
        printf("2\n%d %d\n", X, Y);
    }
         
            
    return 0;
}
