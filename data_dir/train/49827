#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 501;
int n, m;

bool ok[N][N];
int dst[N][N];
int cnt[N][N];

bitset <N> dp[N][N];

vec <pii> adj[N];

void input() {
    cin >> n >> m;
    for(int i = 1; i <= n; ++i) {
        for(int j = 1; j <= n; ++j) {
            dst[i][j] = inf;
        }
    }
    for(int i = 1; i <= n; ++i) {
        dst[i][i] = 0;
    }
    for(int i = 1; i <= m; ++i) {
        int u; cin >> u;
        int v; cin >> v;
        int w; cin >> w;
        dst[u][v] = w;
        dst[v][u] = w;
        adj[u].pb({v, w});
        adj[v].pb({u, w});
    }
}

bitset <N> calc(int i, int j) {
    if(ok[i][j]) {
        return dp[i][j];
    }
    if(i == j) {
        dp[i][j][i] = 1;
        return dp[i][j];
    }
    ok[i][j] = 1;
    bitset <N> res;
    for(pii p: adj[i]) {
        int v = p.xx;
        int w = p.yy;
        if(dst[v][j] + w == dst[i][j]) {
            res |= calc(v, j);
            res[i] = 1;
        }
    }
    return dp[i][j] = res;
}

void solve() {
    for(int k = 1; k <= n; ++k) {
        for(int i = 1; i <= n; ++i) {
            for(int j = 1; j <= n; ++j) {
                dst[i][j] = min(dst[i][j], dst[i][k] + dst[k][j]);
            }
        }
    }
    for(int i = 1; i <= n; ++i) {
        for(int j = 1; j <= n; ++j) {
            int res = 0;
            for(pii p: adj[i]) {
                int v = p.xx;
                int w = p.yy;
                if(dst[v][j] + w == dst[i][j]) {
                    res++;
                }
            }
            cnt[i][j] = res;
        }
    }
    for(int i = 1; i <= n; ++i) {
        for(int j = i + 1; j <= n; ++j) {
            bitset <N> res = calc(i, j);
            int sum = 0;
            for(int k = 1; k <= n; ++k) {
                if(res[k] == 1) {
                    sum += cnt[k][j];
                }
            }
            cout << sum << " ";
        }
    }
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
