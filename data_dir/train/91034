#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define pi 3.141592653589793238
#define int long long
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

int visx[55];
int visy[55];
vector<int>xx,yy;
char ans[55][55];
int n,m;
string a[55];
void dfs(int x,int y)
{
   visx[x]=1;
   visy[y]=1;
   if(x)
   {
      xx.push_back(x);
      for(int i=1;i<=m;i++)
      {
         if(!visy[i]&&a[x][i]=='#')
         {
            dfs(0,i);
         }
      }
   }
   else
   {
      yy.push_back(y);
      for(int i=1;i<=n;i++)
      {
         if(!visx[i]&&a[i][y]=='#')
         {
            dfs(i,0);
         }
      }
   }
}

void fill()
{
   for(auto i:xx)
      for(auto j:yy)
         ans[i][j]='#';

}

signed main()
{
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);  
     cout.tie(0);   
 #ifndef ONLINE_JUDGE
    if(fopen("INPUT.txt","r"))
    {
    freopen ("INPUT.txt" , "r" , stdin);
    freopen ("OUTPUT.txt" , "w" , stdout);
    }
 #endif
 
// -------------------------------------Code starts here---------------------------------------------------------------------     

   cin>>n>>m;

   fill_n(&ans[0][0],55*55,'.');
   for(int i=1;i<=n;i++)
   {
      cin>>a[i];
      a[i]="@"+a[i];
   }
   for(int i=1;i<=n;i++)
   {
      for(int j=1;j<=m;j++)
      {
         if(a[i][j]=='#')
         {
            xx.clear();
            yy.clear();
            if(!visx[i])
               dfs(i,0);
            if(!visy[j])
               dfs(0,j);
            fill();
         }
      }
   }
   for(int i=1;i<=n;i++)
   {
      for(int j=1;j<=m;j++)
      {
         if(ans[i][j]!=a[i][j])
         {
            cout<<"No";
            return 0;
         }
      }
   }
   cout<<"Yes";

// -------------------------------------Code ends here------------------------------------------------------------------
     clock_t clk;
 	clk = clock();
 
    clk = clock() - clk;
 	cerr << fixed << setprecision(6) << "Time: " << ((double)clk)/CLOCKS_PER_SEC << "\n";
 	return 0;
 }
 