#include <bits/stdc++.h>


#define pb push_back
#define Mp make_pair
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define Sort(x) sort(all(x))
#define sz(x) x.size()
#define debug(x)  cerr << #x << " = " << x << endl
#define endl '\n'
#define sync ios::sync_with_stdio(0), cin.tie(0)
#define esp ' ' 



using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef pair<ll , ll> pll ;
typedef vector<ll> vll ;
typedef string str ;


const ll MOD = 1e9 + 7 ;
const ll MAXN = 2e5 + 30 ;
const ll MINN = 1e3 + 20 ;
const ll MOD2 = 998244353ll ;
const ll INF = 74592896151251 ;
const ld EPS = 1e-9 ;


ll gcd(ll a, ll b) { return (b ? gcd(b, a % b) : a); }
ll mod(ll n) { while(n < 0) n += MOD; return n % MOD; }
ll pow(ll a, ll b) { return (!b ? 1 : pow(a, b / 2) * pow(a, b / 2) * (b % 2 ? a : 1)) ;}

ll Dis[MAXN] , T[MAXN] , C[MAXN] , Par[MAXN] , n , m , S , F ;
vector<pll> Adj[MAXN] ;
vector<ll> Path ;
set<pll> s ;


int Main() {
   cin >> n >> m ;
   for (int i = 0 , v , u , w; i < m ; i ++) {
       cin >> v >> u >> w ;
       Adj[v].pb({u , w}) ;
       Adj[u].pb({v , w}) ;
   }
   memset(Dis , 63 , sizeof(Dis)) ;
   Dis[1] = 0 ;
   Par[1] = 1 ;
   s.insert({0 , 1}) ;
    while (sz(s)) {
        ll v = s.begin()->S ;
        s.erase({Dis[v] , v}) ;
        for (auto u : Adj[v]) {
            if (Dis[u.F] > Dis[v] +  u.S) {
                s.erase({Dis[u.F] , u.F}) ;
                Dis[u.F] = Dis[v] + u.S ;
                s.insert({Dis[u.F] , u.F}) ;
                Par[u.F] = v ;
            }
        }
    }
    ll x = n ;
    if (Dis[n] > 1e12) return cout << -1 , 0 ;
    while (x != 1) {
        Path.pb(Par[x]) ;
        x = Par[x] ;
    }
    
    reverse(all(Path));
    Path.pb(n) ;
    for (auto i : Path) cout << i << ' ';
    
   

   
   
   
}

int main () {
    sync ;
    int q ;
    q = 1 ;
    while (q --) 
        Main() ;
	return 0;
}
