/*<<head>> {{{*/
#include <bits/stdc++.h>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <string>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
using namespace std;
typedef double db;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
#define dd(x) cout << #x << " = " << x << ", "
#define de(x) cout << #x << " = " << x << endl
#define rep(i,a,b) for(int i=(a);i<(b);++i)
#define per(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define fi first
#define se second
//INF = 1 061 109 567 ; INF + INF = 2 122 219 134 ;
//LINF = 4 557 430 888 798 830 399 ; LINF + LINF = 9 114 861 777 597 660 798 ;
const int INF = 0x3f3f3f3f;     // -INF: 0xc0   abs(-INF) = INF + 1
const ll LINF = 0x3f3f3f3f3f3f3f3f;
/*}}}*/                         // zr, zm
const int MOD = (int)1e9+7;     // when MOD = 1e9+7, inv2 = 500000004
const int N = (int)1e5+7;

// ------- 变量 ------- //

int n, m, p;
int d[N], h[N], t[N];
ll dp[107][N], a[N], sum[N];

// ------- 函数 ------- //

void Init() {
    memset(dp, 0x3f, sizeof(dp));

    rep(i, 2, n+1) scanf("%d", d+i);
    rep(i, 1, m+1) scanf("%d%d", h+i, t+i);
    
    rep(i, 3, n+1) d[i] += d[i-1];
    rep(i, 1, m+1) a[i] = t[i] - d[h[i]];
    sort(a + 1, a + m + 1);
    
    rep(i, 1, m+1) sum[i] = sum[i-1] + a[i];

}

struct P {
    ll x, y;
    P () {} P (ll x, ll y) : x(x), y(y) {}
    P operator - (const P &rhs) const { return P(x - rhs.x, y - rhs.y); }
    bool operator ^ (const P &rhs) const { return (db)x * rhs.y > (db)y * rhs.x; }
};
#define X(i) (i)
#define Y(i, j) (dp[i][j]+sum[j])
#define K(i) (a[i])

int Solve() {
/*
    rep(i, 1, m+1) printf("%lld ", a[i]); puts("");
    dp[0][0] = 0;
    rep(i, 1, p+1) rep(j, 1, m+1) {
        dp[i][j] = dp[i-1][j];
        rep(k, 0, j) {
            dp[i][j] = min(dp[i][j], dp[i-1][k] + a[j] * (j-k) - (sum[j] - sum[k]));
        }
        dd(i); dd(j); de(dp[i][j]);
    }
    puts("");
    memset(dp, 0x3f, sizeof(dp));
  */  
    rep(i, 0, p+1) dp[i][0] = 0;
    rep(i, 1, p+1) {
        deque <P> Q; Q.pb(P(X(0), Y(i-1, 0)));
        rep(j, 1, m+1) {
            while (sz(Q) > 1 && (Q[1].y - Q[0].y) < (Q[1].x - Q[0].x) * K(j)) Q.pop_front();
            //de(sz(Q));
            /*
            rep(i, 0, sz(Q)) { auto o = Q[i];
                dd(o.x); de(o.y);
            }
            */
            dp[i][j] = min(dp[i-1][j], Q[0].y - K(j) * Q[0].x + a[j] * j - sum[j]);
            P aa(X(j), Y(i-1, j));
            while (sz(Q) > 1 && !((Q[sz(Q)-2] - aa) ^ (Q.back() - aa))) Q.pop_back();
            Q.pb(aa);
            
            //dd(i); dd(j); de(dp[i][j]);
        }
    }
    return printf("%lld\n", dp[p][m]);
}

// ------- main ------- //

int main ()
{
    //ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);

    //Pre();
    //int t; scanf("%d", &t); while (t--) {
    while (~scanf("%d%d%d", &n, &m, &p)) {
    //while(fgets(s, N, stdin)) {   // 注意 fgets 会读入换行符
        //if (n == 0) break;
        //static int kase = 0; printf("Case %d: ", ++kase);
        Init();
        Solve();
        //if (t) puts("");
    }
    return 0;
}
