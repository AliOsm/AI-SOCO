#include <sstream>
#include<iostream>
#include<algorithm>
#include<vector>
#include<set>
#include<ctime>
#include<cmath>
#include<map>
#include<stack>
#include<random>
#include<queue>
#include<list>
using namespace std;
const long long int INF=2000000000000000000;
#define ll long long int
#define ld long double
#define key pair<ld,ld>
#define ii pair<int,int>
#define si set<int>
#define vii vector<pair<int,int> >
#define vi vector<int>
#define vll vector<ll>
#define vb vector<bool>
#define vvi vector<vector<int> >
#define vs vector<string>
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define nu 100001
#define mod 1000000007
#define mul(x,y) ((ll)(x)*(y))%mod
#define tr(c,i) for(auto i = (c).begin(); i != (c).end(); i++)
#define fastio  ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
vector<ll> tree1;
vector<ll> tree2;
vector<ll> tree3;
ll MOD(ll a, ll b)
{
    if(a>b)
        return a-b;
    else
        return b-a;
}
ll max3(ll a,ll b, ll c)
{
    return max(c,max(a,b));
}
ll min3(ll a,ll b,ll c)
{
    return min(a,min(b,c));
}
ll power(ll x,ll y )
{
    ll res = 1;
    x = x ;
    while (y > 0)
    {
        if (y & 1)
            res = (res*x);
        y = y>>1;
        x = (x*x);
    }
    return res;
}
ll logg(ll a)
{
    ll x=0;
    while(a>1)
    {
        x++;
        a/=2;
    }
    return x;
}
ll gcd(ll a,ll  b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}
void update(ll val,int ind,vector<ll>&bit)
{
    for(int j=ind;j<bit.size();j=j+(j&(-j)))
    {
        bit[j]=(bit[j]+val);
    }
}
void modupdate(ll val,int ind,vector<ll>&bit)
{
    for(int j=ind;j<bit.size();j=j+(j&(-j)))
    {
        bit[j]=(bit[j]+val);
        if(bit[j]<0)
        {
            bit[j]=bit[j]+((0-bit[j])/mod)*mod;
        }
        if(bit[j]<0)
        {
            bit[j]+=mod;
        }
        bit[j]=bit[j]%mod;
    }
}
ll query(int ind,vector<ll> &bit)
{
    ll ans=0;
    for(int j=ind;j>0;j=j-(j&(-j)))
    {
        ans=ans+bit[j];
    }
    return ans;
}

ll modquery(int ind,vector<ll> &bit)
{
    ll ans=0;
    for(int j=ind;j>0;j=j-(j&(-j)))
    {
        ans=ans+bit[j];
        if(ans<0)
        {
            ans=ans+((0-ans)/mod)*mod;
        }
        if(ans<0)
        {
            ans=ans+mod;
        }
        ans=ans%mod;
    }
    return ans%mod;
}
int findoptindex(int l,int r)
{
    int mid=-1;
    int beg=l;
    int end=r;
    ll temp=query(l-1,tree1);
    ll sum=query(r,tree1)-temp;
    while(beg<=end)
    {
        mid=(beg+end)/2;
        ll temp3=query(mid-1,tree1);
        ll temp1=temp3-temp;
        ll temp2=query(mid,tree1)-temp;
        if(temp1<=sum/2&&temp2>sum/2)
        {
            return mid;
        }
        else
        {
            if(temp1>sum/2)
            {
                end=mid-1;
            }
            else
            {
                beg=mid+1;
            }
        }
    }
    return mid;
}
int main()
{
    fastio;
    int n,q;
    cin>>n>>q;
    vector<ll> a(n+1);vector<ll> w(n+1);
    tree1.resize(n+1,0);
    tree2.resize(n+1,0);
    tree3.resize(n+1,0);
    vector<ll> arr2(n+1);
    vector<ll> arr3(n+1);
    for(int i=1;i<=n;i++)
    {
        cin>>a[i];
    }
    for(int i=1;i<=n;i++)
    {
        cin>>w[i];
        update(w[i],i,tree1);
    }
    for(int i=1;i<=n;i++)
    {
        arr2[i]=a[i]*w[i];
        arr3[i]=i*w[i];
        modupdate(arr2[i],i,tree2);
        modupdate(arr3[i],i,tree3);
    }
    for(int i=0;i<q;i++)
    {
        int x,y;
        cin>>x>>y;
        if(x<0)
        {
            int ind=-x;
            ll val=y-w[ind];
            ll val2=a[ind]*(y-w[ind]);
            ll val3=ind*(y-w[ind]);
            w[ind]=y;
            update(val,ind,tree1);
            modupdate(val2,ind,tree2);
            modupdate(val3,ind,tree3);
        }
        else
        {
            int j=findoptindex(x,y);
            ll ans=((a[j]-j)*((query(j-1,tree1)-query(x-1,tree1))%mod))%mod-(modquery(j-1,tree2)-modquery(x-1,tree2))+modquery(j-1,tree3)-modquery(x-1,tree3);
            ans-=((a[j]-j)*((query(y,tree1)-query(j+1-1,tree1))%mod))%mod-(modquery(y,tree2)-modquery(j+1-1,tree2))+modquery(y,tree3)-modquery(j+1-1,tree3);
            if(ans<0)
            {
                ans=ans+((0-ans)/mod)*mod;
            }
            if(ans<0)
            {
                ans=ans+mod;
            }
            cout<<ans%mod<<endl;
        }
    }
}
