#include<stdio.h>
#include<string.h>
#include<vector>
#include<utility>
#include<iostream>
#include<limits.h>
#include<string>
#include<stack>
#include<queue>
#include<algorithm>
using namespace std;

#define fi first
#define se second
#define long long long
typedef pair<int,int> ii;
typedef pair<int,ii> iii;

int n;
vector<iii> vex, vey;

const int K = 5001;
int ft[10051];
int query(int x) {return (x == 0)? 0 : ft[x] + query(x-(x&-x)); }
int query(int x, int y) { return query(y)-query(x-1); }
void update(int x, int val) {for(; x <= 10050; x += (x&-x)) ft[x] += val; }


int main()
{
//	freopen("input.in", "r", stdin);
	scanf("%d", &n);
	for(int i = 0; i < n; i++)
	{
		int x1, y1, x2, y2;
		scanf("%d %d %d %d", &x1, &y1, &x2, &y2);
		
		if(x1 > x2) swap(x1, x2);
		if(y1 > y2) swap(y1, y2);
		
		if(x1 == x2) vex.push_back({x1, {y1, y2}});
		else vey.push_back({y1, {x1, x2}});
	}
	
	sort(vex.begin(), vex.end());
	
	long res = 0;
	for(int i = 0; i < vex.size(); i++)
	{
		memset(ft, 0, sizeof ft);
		vector<ii> vec;
//		printf("I : %d\n", i);
		for(auto it : vey)
		{
			if(it.se.fi <= vex[i].fi && it.se.se >= vex[i].fi)
			{
//				printf("	UPDATE : %d\n", it.fi);
				update(it.fi+K, +1);
				vec.push_back({it.se.se, it.fi});
			}
		
		}
		sort(vec.begin(), vec.end());
		
		int it = 0;
		for(int j = i+1; j < vex.size(); j++)
		{
//			printf("	J 	: %d %d\n", j, vex[j].fi);
			while(it < vec.size() && vec[it].fi < vex[j].fi)
			{
//				printf("		UPDATE : %d %d\n", it, vec[it].se);
				update(vec[it].se+K, -1);
				++it;
			}
//			printf("	%d %d\n", vex[j].se.fi+K, vex[j].se.se+K);
			int ata = min(vex[i].se.se, vex[j].se.se);
			int baw = max(vex[i].se.fi, vex[j].se.fi);
			if(baw <= ata)
			{
				long cnt = query(baw+K, ata+K);
				res += cnt*(cnt-1)/2;
			}
//			printf("		cnt	: %d %d %d %d %lld\n", i, j, baw, ata, cnt);
		}
//		printf("\n");
	}
	printf("%lld\n", res);
}
