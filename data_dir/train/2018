#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC target("avx,avx2,fma")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("sumsqr.in");ofstream out("sumsqr.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

const ll G = 100005;
vec<ll> bl, ps;

int main() {
    fast;
    bl = vec<ll>(G);
    ps = vec<ll>(G);
    bl[0] = ps[0] = 1;
    for(int q=1; q<G; q++){
        bl[q] = q*2;
        ps[q] = bl[q]+ps[q-1];
    }
    int z; cin>>z;
    for(; z--;){
        ll a, l, r; cin>>a>>l>>r;
        ll lf = -1, rg = a-1;
        for(; lf+1<rg;){
            ll md = (lf+rg)/2;
            ll s = ps[a-1]-ps[md];
            if(s<l) rg = md;
            else lf = md;
        }
        ll nb = rg, pib = bl[nb]-1, full_len = ps[a-1]-(nb ? ps[nb-1] : 0);
        assert(full_len >= lf);
        pib -= full_len-l;
        //cout<<"-> "<<nb<<" "<<pib<<" "<<full_len<<endl;
        ll our_n = a-nb-1;
        vec<int> o;
        for(; l<=r; l++, pib++){
            if(pib==bl[nb]){
                nb--;
                our_n++;
                pib = 0;
            }
            //cout<<nb<<" "<<pib<<endl;
            if(nb==0) o.pb(1);
            else if(pib%2==0) o.pb(our_n+1);
            else o.pb((our_n+1)+(pib+1)/2);
        }
        for(int i  :o ) cout<<i<<" ";
        cout<<"\n";
    }
}