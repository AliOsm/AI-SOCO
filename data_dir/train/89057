#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <algorithm>
#define lli long long int
#define pb push_back
#define MAXN 2005
using namespace std;

struct edge {
    int x;
    int y;
    lli val;

    edge(int x, int y, lli val):x(x), y(y), val(val) {}
};

lli a[MAXN];
lli b[MAXN];
vector <edge> va;
vector <edge> vb;
vector <pair <int, int> > res;

bool comp(const edge &x, const edge &y) {
    return x.val < y.val;
}

int lower_search(int l, int r, lli val) {
    int best = l;
    while(l <= r) {
        int mid = (l + r) / 2;
        lli v = vb[mid].val;
        if (v > val) {
            r = mid - 1;
        } else if (v < val) {
            best = mid;
            l = mid + 1;
        } else {
            return mid;
        }
    }
    return best;
}

int upper_search(int l, int r, lli val) {
    int best = r;
    while(l <= r) {
        int mid = (l + r) / 2;
        lli v = vb[mid].val;
        if (v < val) {
            l = mid + 1;
        } else if (v > val) {
            best = mid;
            r = mid - 1;
        } else {
            return mid;
        }
    }
    return best;
}

int main(void) {
    int n, m;
    lli sa = 0;
    lli sb = 0;
    lli best;

    scanf(" %d", &n);
    for (int i = 1; i <= n; i++) {
        scanf(" %lld", &a[i]);
        sa += a[i];
    }
    scanf(" %d", &m);
    for (int i = 1; i <= m; i++) {
        scanf(" %lld", &b[i]);
        sb += b[i];
    }
    best = abs(sa - sb);

    for (int i = 1; i <= n; i++) {
        for (int j = i + 1; j <= n; j++) {
            va.pb(edge(i, j, a[i] + a[j]));
        }
    }
    for (int i = 1; i <= m; i++) {
        for (int j = i + 1; j <= m; j++) {
            vb.pb(edge(i, j, b[i] + b[j]));
        }
    }

    // 1 swap
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            lli x = sa - a[i] + b[j];
            lli y = sb + a[i] - b[j];
            if (abs(x - y) < best) {
                best = abs(x - y);
                res.clear();
                res.pb(make_pair(i, j));
            }
        }
    }

    // 2 swaps
    if (n >= 2 && m >= 2) {
        sort(vb.begin(), vb.end(), comp);
        for (int i = 0; i < (int)va.size(); i++) {
            lli delta = sa - sb - 2LL * va[i].val;
            int id1 = lower_search(0, (int)vb.size() - 1, -delta / 2);
            int id2 = upper_search(0, (int)vb.size() - 1, -(delta + 1) / 2);

            //printf("delta = %lld, id1 = %d, id2 = %d, x = %d, y = %d\n", delta, id1, id2, va[i].x, va[i].y);
            lli aux1 = abs(delta + 2LL * vb[id1].val);
            if (aux1 < best) {
                best = aux1;
                res.clear();
                res.pb(make_pair(va[i].x, vb[id1].x));
                res.pb(make_pair(va[i].y, vb[id1].y));
            }
            lli aux2 = abs(delta + 2LL * vb[id2].val);
            if (aux2 < best) {
                best = aux2;
                res.clear();
                res.pb(make_pair(va[i].x, vb[id2].x));
                res.pb(make_pair(va[i].y, vb[id2].y));
            }
        }
    }
    printf("%lld\n", best);
    printf("%d\n", res.size());
    for (int i = 0; i < (int)res.size(); i++) {
        printf("%d %d\n", res[i].first, res[i].second);
    }
    return 0;
}
