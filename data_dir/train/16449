/*
ID: hepic
PROG: bcount
LANG: C++11
*/
#include<bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i<=b; ++i)
#define REP(i, a, b) for(auto i=a; i<b; ++i)
#define FORI(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REPI(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define SIZE 1000010
#define MAXN 1000000007
#define NUM 15
#define PI acos(-1)
#define open_read1 freopen("C:\\Users\\Hepic\\Desktop\\a.txt", "r", stdin)
#define open_write1 freopen("C:\\Users\\Hepic\\Desktop\\b.txt", "w", stdout)
#define open_read freopen("maxflow.in", "r", stdin)
#define open_write freopen("maxflow.out", "w", stdout)

using namespace std;

typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair<double, double> PDD;
typedef pair<int, int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<ULL, ULL> PUU;
typedef pair<LL, PLL> PLPLL;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    return out<<"("<<obj.first<<","<<obj.second<<")";
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T>
ostream& operator << (ostream &out, multiset<T> cont)
{
    typename multiset<T>::const_iterator itr = cont.begin();
    typename multiset<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N])
{
     REP(i, 0, N)
        out<<arr[i]<<" ";
    out<<endl;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}


template<typename T>
T fast_exp_pow(T base, T exp, T mod)
{
    LL res = 1;

    while(exp)
    {
        if(exp&1)
        {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;
    }

    return res;
}

/*#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################*/

string word;
PII seg_tree[4*SIZE];
int N, M, L, R;


PII calc(PII nd1, PII nd2)
{
    if(nd1.fir >= nd2.sec)
        return mp(nd1.fir-nd2.sec + nd2.fir,  nd1.sec);

    else
        return mp(nd2.fir, nd2.sec-nd1.fir + nd1.sec);
}


void build_tree(int Tbeg=0, int Tend=N-1, int ind=0)
{
    if(Tbeg == Tend)
    {
        if(word[Tbeg] == '(')
            seg_tree[ind] = mp(1, 0);
        else
            seg_tree[ind] = mp(0, 1);

        return;
    }

    int mid = (Tbeg + Tend) >> 1;
    build_tree(Tbeg, mid, 2*ind + 1);
    build_tree(mid+1, Tend, 2*ind + 2);

    seg_tree[ind] = calc(seg_tree[2*ind + 1], seg_tree[2*ind + 2]);
}


PII query(int Qbeg, int Qend, int Tbeg=0, int Tend=N-1, int ind=0)
{
    if(Tbeg > Tend  ||  Tbeg > Qend  ||  Tend < Qbeg)
        return mp(0, 0);

    if(Tbeg >= Qbeg  &&  Tend <= Qend)
        return seg_tree[ind];

    int mid = (Tbeg + Tend) >> 1;
    PII ret = query(Qbeg, Qend, Tbeg, mid, 2*ind + 1);
    ret = calc(ret, query(Qbeg, Qend, mid+1, Tend, 2*ind + 2));

    return ret;
}




int main()
{
    //open_read1;
    cin>>word;
    N = word.size();
    scanf("%d", &M);


    build_tree();

    while(M--)
    {
        scanf("%d%d", &L, &R);

        PII ret = query(L-1, R-1);
        int res = R - L + 1 - ret.fir - ret.sec;

        printf("%d\n", res);
    }

    return 0;
}
