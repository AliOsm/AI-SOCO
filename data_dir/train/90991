#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<long long, int>, // change type
//        null_type,
//        less<pair<long long, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

//template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)((x).size())
#define pb push_back
#define T first
#define P second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
#define debug(x) cerr << #x << " : " << (x) << endl
const double PI = 3.14159265358979323846;
const double eps = (1e-10);
int isGreater(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}

int n, k;
string s;

vector<vector<int> > getMin()
{
    vector<vector<int> > ret;
    while(true)
    {
        vector<int> cur;
        string temp;
        for (int i = 0; i < sz(s); )
        {
            if (i + 1 < sz(s) && s[i] == 'R' && s[i + 1] == 'L')
            {
                temp += 'L';
                temp += 'R';
                cur.push_back(i);
                i += 2;
            }
            else
            {
                temp += s[i];
                i++;
            }
        }

        if (cur.empty())
            break;
        ret.push_back(cur);
        s = temp;
    }
    return ret;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("AC.txt", "w", stdout);
#endif
    cin >> n >> k >> s;
    vector<vector<int> > minV = getMin();
    if (k < sz(minV))
    {
        cout << -1 << '\n';
        return 0;
    }

    vector<vector<int> > ans;
    int count = sz(minV);

    for (vector<int> &v : minV)
    {
        while(count < k && sz(v) > 1)
        {
            count++;
            ans.push_back({v.back()});
            v.pop_back();
        }
        if (!v.empty())
            ans.push_back(v);
    }

    if (sz(ans) < k)
    {
        cout << -1 << '\n';
        return 0;
    }

    for (vector<int> &v : ans)
    {
        cout << sz(v);
        for (int item : v)
            cout << " " << item + 1;
        cout << '\n';
    }

    return 0;
}