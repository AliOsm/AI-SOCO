#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
const int MAXN = (int)5e5 + 7;
const int MOD = (int)1e9 + 7;
const ll infint = (ll)1e13 + 3;
const ll inf = (ll)1e18;
ll n, m, k, par[MAXN], e1[MAXN], e2[MAXN], a[MAXN], comp;
vector<ll> changes;
map<ll, vector<ll> > M;
ll get(ll u)
{
	return par[u] < 0 ? u : par[u] = get(par[u]);
}
void merge(ll u, ll v)
{
	if((u = get(u)) == (v = get(v)))
		return;
	comp--;
	if(par[u] > par[v])
		swap(u, v);
	par[u] += par[v];
	par[v] = u;
	changes.push_back(u);
	changes.push_back(v);
}
ll pwr(ll a, ll b)
{
	if(b == 0)
		return 1;
	if(b == 1)
		return a;
	ll c = pwr(a, b / 2);
	c = (c * c) % MOD;
	if(b % 2)
		c = (c * a);
	return c;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	//ghasam mikhoram
	cin >> n >> m >> k;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	
	
	for (int i = 0; i < m; i++)
	{
		cin >> e1[i] >> e2[i];
		ll weight;
		weight = a[e1[i]] ^ a[e2[i]];
		M[weight].push_back(i);
	}
	
	ll ans = (1LL << k) - (ll)M.size(); ans = (ans + MOD) % MOD;
	ans = pwr(2, n) * ans % MOD;
	
	memset(par, -1, sizeof par);
	for (auto u : M)
	{
		changes.clear();
		comp = n;
		ll cur = u.first;
		for (auto c : u.second)
			merge(e1[c], e2[c]);
		ans = (ans + pwr(2, comp)) % MOD;
		for (auto u : changes)
			par[u] = -1;
	}
	
	cout << ans;
}
