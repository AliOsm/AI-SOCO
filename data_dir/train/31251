//const int N = 105;
//void __(){
//	map<char,int> is_mirror;
//	string mirrors = "AHIMOTUVWXY";
//	for(char c : mirrors)
//		is_mirror[c] = 1;
//	_(string,s);
//	bool ok = true;
//	for(char c : s)
//		if(!is_mirror[c])
//			ok = false;
//	string t = s;
//	reverse(all(t));
//	if(t != s)
//		ok = false;
//	print ok ? "YES" : "NO";
//}
#include <map>
#include <iomanip>
#include <algorithm>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout)
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }
    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
#define print _print(),
#define INPUT_WITHOUT_INIT(type,name) type name; cin >> name
#define GET_INPUT_MACRO(_1,_2,_3,_4,_5,_6,_7,_8,NAME,...) NAME
#define _(...) GET_INPUT_MACRO(__VA_ARGS__,_IWI,_IWI,_IWI,_IWI,_IWI,_IWI,INPUT_WITHOUT_INIT)(__VA_ARGS__)
const int N = 105;
void __(){
	map<char,int> is_mirror;
	string mirrors = "AHIMOTUVWXY";
	for(char c : mirrors)
		is_mirror[c] = 1;
	_(string,s);
	bool ok = true;
	for(char c : s)
		if(!is_mirror[c])
			ok = false;
	string t = s;
	reverse(all(t));
	if(t != s)
		ok = false;
	print ok ? "YES" : "NO";
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        __();
}
