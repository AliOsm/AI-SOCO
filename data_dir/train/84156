#include <bits/stdc++.h>
using namespace std;
using lld = int64_t;
const int N = 200000 + 5;

vector< int > G[ N ];

lld dp[ N ], sz[ N ];
void dfs( int, int );
void dfs2( int, int, lld, int );

int main() {
	ios_base::sync_with_stdio( false );
	cin.tie( nullptr );
	int n; cin >> n;
	for ( int i = 1 ; i < n ; ++ i ) {
		int u, v; cin >> u >> v;
		G[ u ].push_back( v );
		G[ v ].push_back( u );
	}
	dfs( 1, 1 );
	dfs2( 1, 1, 0, n );
	cout << *max_element( dp + 1, dp + 1 + n ) << '\n';
	return 0;
}

void dfs( int u, int f ) {
	sz[ u ] = 1;
	for ( int v : G[ u ] ) {
		if ( v == f ) continue;
		dfs( v, u );
		sz[ u ] += sz[ v ];
		dp[ u ] += dp[ v ];
	}
	dp[ u ] += sz[ u ];
}

void dfs2( int u, int f, lld d, int n ) {
	dp[ u ] -= sz[ u ];
	dp[ u ] += d;
	for ( int v : G[ u ] ) {
		if ( v == f ) continue;
		dfs2( v, u, dp[ u ] - dp[ v ] + n - sz[ v ], n );
	}
	dp[ u ] += n;
}