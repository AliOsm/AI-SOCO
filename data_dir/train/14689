#pragma GCC optimize ("O3")
#pragma GCC optimize ("unroll-loops")

#include "bits/stdc++.h"
using namespace std;

#define pb push_back
#define F first
#define S second
#define f(i,a,b)  for(int i = a; i < b; i++)
#define endl '\n'

using ll = long long;
using db = long double;
using ii = pair<int, int>;

const int N = 5e5 + 5, LG = 19, MOD = 998244353;
const int SQ =320;
const long double EPS = 1e-7;
int dp[N], sum[N], in[N];
int32_t main(){
#ifdef ONLINE_JUDGE
    ios_base::sync_with_stdio(0);
    cin.tie(0);
#endif
  int n, m, k;
  cin >> n >> k >> m;
  vector<vector<int>> v(m,vector<int>(3));

  f(i,0,m)  cin >> v[i][1] >> v[i][0] >> v[i][2];

  sort(v.begin(),v.end());
  int ans = 1;
  f(b,0,k){
    memset(in,0, sizeof in);
    memset(dp,0, sizeof dp);
    memset(sum,0, sizeof sum);
    f(i,0,m)
      if(v[i][2]>>b&1){
        in[v[i][1]]++;
        in[v[i][0]+1]--;
      }
    int prv=0;  dp[0] = sum[0] = 1;
    for(int i = 1, j = 0; i <= n + 1; i++){ in[i]+=in[i-1];
      if(!in[i]){
        dp[i] = sum[i-1] + (MOD - (prv?sum[prv-1]:0));
        if(dp[i]>=MOD)dp[i]-=MOD;
      }
      sum[i]=sum[i-1]+dp[i];  if(sum[i]>=MOD)sum[i]-=MOD;
      while(j<m&&v[j][0]==i){
        if(v[j][2]>>b&1^1)prv=max(prv,v[j][1]);
        j++;
      }
    }
    ans=1ll*ans*dp[n+1]%MOD;
  }
  cout<<ans<<'\n';

  return 0;
}
