#include <stdio.h>
#include <stdlib.h>

#define N	200000

int xx[N], n;

int compare_i(const void *a, const void *b) {
	int i = *(int *) a;
	int j = *(int *) b;

	return xx[i] - xx[j];
}

int compare_x(const void *a, const void *b) {
	int ia = *(int *) a;
	int ib = *(int *) b;

	return ia - ib;
}

int floor_(int x) {
	int lower = 0, upper = n;

	while (upper - lower > 1) {
		int i = (lower + upper) / 2;

		if (xx[i] <= x)
			lower = i;
		else
			upper = i;
	}
	return lower;
}

int ceil_(int x) {
	int lower = -1, upper = n - 1;

	while (upper - lower > 1) {
		int i = (lower + upper) / 2;

		if (xx[i] >= x)
			upper = i;
		else
			lower = i;
	}
	return upper;
}

int main() {
	static int pp[N], ii[N];
	int m, i;

	scanf("%d%d", &n, &m);
	for (i = 0; i < n; i++) {
		scanf("%d", &xx[i]);
		pp[i] = i;
	}
	qsort(pp, n, sizeof *pp, compare_i);
	for (i = 0; i < n; i++)
		ii[pp[i]] = i;
	qsort(xx, n, sizeof *xx, compare_x);
	while (m--) {
		int p, len, right;

		scanf("%d%d", &p, &len), p--;
		i = ii[p];
		right = 1;
		while (i > 0 && xx[i] - xx[i - 1] <= len || i + 1 < n && xx[i + 1] - xx[i] <= len) {
			int j, k, cnt;

			if (right) {
				j = floor_(xx[i] + len), len -= xx[j] - xx[i];
				k = ceil_(xx[j] - len), len -= xx[j] - xx[k];
				if (j > k) {
					cnt = len / (xx[j] - xx[k]);
					len %= (xx[j] - xx[k]);
					if (cnt % 2 == 0)
						i = k, right = 1;
					else
						i = j, right = 0;
				} else
					i = j;
			} else {
				j = ceil_(xx[i] - len), len -= xx[i] - xx[j];
				k = floor_(xx[j] + len), len -= xx[k] - xx[j];
				if (j < k) {
					cnt = len / (xx[k] - xx[j]);
					len %= (xx[k] - xx[j]);
					if (cnt % 2 == 0)
						i = k, right = 0;
					else
						i = j, right = 1;
				} else
					i = j;
			}
		}
		printf("%d\n", pp[i] + 1);
	}
	return 0;
}
