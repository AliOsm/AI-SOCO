/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author majk
 */

#ifndef MAJK_LIB
#define MAJK_LIB

#include <vector>
#include <stack>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <algorithm>
#include <numeric>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <array>
#include <bitset>
using namespace std;

#define x first
#define y second
typedef std::pair<int,int> pii; typedef long long ll; typedef unsigned long long ull; typedef unsigned int ui; typedef pair<ui,ui> puu;

template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template <typename T, typename U> std::ostream&operator<<(std::ostream&o, const pair<T,U>&p) {o << p.x << ' ' << p.y; return o;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {if(t.empty())o<<'\n';for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
ui logceil(ll x) { return x?8*sizeof(ll)-__builtin_clzll(x):0; }

namespace std { template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}}; }
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename F> double bshd(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){l=m;}else{h=m;}}return (l+h)/2;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename F> double bsld(double l,double h,const F&f,double p=1e-9){ui r=3+(ui)log2((h-l)/p);while(r--){double m=(l+h)/2;if(f(m)){h=m;}else{l=m;}}return (l+h)/2;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }


template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector2<T>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector2<T>>(a,vector2<T>(b,c,t)){}};
template<typename T>class vector4:public vector<vector3<T>>{public:vector4(){} vector4(size_t a,size_t b,size_t c,size_t d,T t=T()):vector<vector3<T>>(a,vector3<T>(b,c,d,t)){}};
template<typename T>class vector5:public vector<vector4<T>>{public:vector5(){} vector5(size_t a,size_t b,size_t c,size_t d,size_t e,T t=T()):vector<vector4<T>>(a,vector4<T>(b,c,d,e,t)){}};


#endif

class HTilesPlacement {
public:
    void bip(int u, int p, int q, const vector<vector<int>> &E, vector<int> &Ans) {
        Ans[u] = q;
        for (int v : E[u]) if (v != p) bip(v, u, 3-q, E, Ans);
    }

    bool fail;
    int N, K;
    vector<vector<int>> E;
    vector<int> D;

    bool path(int u, int p, int t, vector<int> &P) {
        if (u == t) {
            P.push_back(u);
            return true;
        }

        P.push_back(u);
        for (int v : E[u]) if (v != p) {
            if (path(v, u, t, P)) return true;
        }
        P.pop_back();
        return false;
    }

    int depth(int u, int p) {
        D[u] = 0;
        for (int v : E[u]) if (v != p) D[u] = max(D[u], depth(v, u) + 1);
        return D[u];
    }

    pii dist(int u, int p) {
        pii ans = {0, u};
        for (int v : E[u]) if (v != p) ans = max(ans, dist(v, u));
        ans.x++;
        return ans;
    }

    void fill(int u, int p, int d, int s, vector<int> &Ans) {
        Ans[u] = d;
        for (int v : E[u]) if (v != p) fill(v, u, (d+s+K)%K, s, Ans);
    }

    void dfs(int u, int p, int top) {
        vector<int> A, V;
        for (int v : E[u]) if (v != p) { V.push_back(v); A.push_back(D[v] + 1); }
        int M = A.size();
        vector<int> S(M+1, 0), P(M+1, 0);
        for (int i = 0; i < M; ++i) {
            P[i+1] = max(P[i], A[i]);
            S[M-i-1] = max(S[M-i], A[M-1-i]);
        }

        if (top != 0) A.push_back(top);
        if (A.size() >= 3) {
            sort(A.begin(),A.end());
            reverse(A.begin(),A.end());
            if (A[1] + A[2] + 1 >= K) fail = true;
        }

        for (int i = 0; i < M; ++i) {
            dfs(V[i], u, 1 + max(top, max(P[i], S[i+1])));
        }
    }



    void solve(istream& cin, ostream& cout) {
        cin >> N >> K;
        E.resize(N);
        D.resize(N);
        for (int i = 0; i < N-1; ++i) {
            int u, v;
            cin >> u >> v;
            --u;
            --v;
            E[u].push_back(v);
            E[v].push_back(u);
        }

        fail = false;
        if (K == 2) {
            vector<int> Ans(N, -1);
            bip(0, -1, 1, E, Ans);
            cout << "Yes\n" << Ans;
        } else {
            depth(0, -1);
            dfs(0, -1, 0);
            if (fail) {
                cout << "No\n";
                return;
            }
            pii q = dist(0, -1);
            pii r = dist(q.y, -1);
            vector<int> P;
            path(q.y, -1, r.y, P);

            vector<int> Ans(N, -1);
            for (int i = 0; i < P.size(); ++i) {
                Ans[P[i]] = i%K;
            }

            for (int i = 0; i < P.size(); ++i) {
                int u = P[i];
                for (int v: E[u]) if (Ans[v] == -1) {
                    int s = (2*i < P.size()) ? -1 : 1;
                    fill(v, u, (Ans[u]+K+s)%K, s, Ans);
                }
            }
            for (int&a: Ans) ++a;

            cout << "Yes\n" << Ans;
        }
    }
};


int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	HTilesPlacement solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
    return 0;
}
