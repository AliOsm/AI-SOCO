#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define pii pair<int, int> 
#define vi vector<int>
#define mp make_pair
#define pb push_back

const int MXN = 3 * 1e5 + 5;
int n, m;
vector<int> v[4];

struct Triple {
	ll a, b, c; 
	Triple(ll _a, ll _b, ll _c) {a = _a; b = _b; c = _c;} 
	Triple() {a = 0; b = 0; c = 0;}
};

Triple dp[MXN];

void pre() {
	dp[0] = Triple(0, 0, 0);
	for (int w=0; w<v[1].size() + 2 * v[2].size(); w++) {
		ll a = dp[w].a;
		ll b = dp[w].b;
		ll c = dp[w].c;
		ll new_val, new_weight;
		if (b < v[1].size()) {
			new_val = a + v[1][v[1].size() - b - 1];
			new_weight = b + c * 2 + 1;
			if (new_val > dp[new_weight].a) {
				dp[new_weight] = Triple(new_val, b+1, c);
			}
		}
		if (c < v[2].size()) {
			new_val = a + v[2][v[2].size() - c - 1];
			new_weight = b + c * 2 + 2;
			if (new_val > dp[new_weight].a) {
				dp[new_weight] = Triple(new_val, b, c + 1);
			}
		}
	}
	ll ref = 0;
	for (int i=0; i<MXN; i++) {
		ref = max(ref, dp[i].a);
		dp[i].a = ref;
	}
}

int main () {
	ios_base::sync_with_stdio(false);
	cin>>n>>m;
	for (int i=0; i<n; i++) {
		int w, c;
		cin>>w>>c;
		v[w].push_back(c);
	}
	for (int i=1; i<=3; i++) sort(v[i].begin(), v[i].end());
	pre();
	v[3].push_back(0);
	ll cur_val = 0, cur_weight = -3, res = 0;
	for (int i = v[3].size()-1; i>=0; i--) {
		cur_val += v[3][i];
		cur_weight += 3;
		if (cur_weight > m) break;
		if (cur_val + dp[m - cur_weight].a > res) {
			res = cur_val + dp[m - cur_weight].a;
		}
	}
	cout<<res<<endl;
	return 0;
}