#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, less<>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = /*1'000'000'007;*/998244353;
const int base = 2187;
const double eps = 1e-8;
const int N = 100'000;
const int LOGN = 18;

int n, m, k;
class min_stack {
  public:
  void add(int64 val)
  {
    st1.push(val);
    if (st2.empty()) {
      st2.push(val);
    }
    else {
      st2.push(min(val, st2.top()));
    }
  }

  int64 get()
  {
    if (st3.empty() && st2.empty()) {
      return inf64;
    }
    if (st3.empty()) {
      return st2.top();
    }
    if (st2.empty()) {
      return st3.top();
    }
    return min(st3.top(), st2.top());
  }

  void pop()
  {
    if (st3.empty()) {
      st3.push(st1.top());
      st1.pop();
      st2.pop();
      while (!st1.empty()) {
        st3.push(min(st3.top(), st1.top()));
        st1.pop();
        st2.pop();
      }
    }
    st3.pop();
  }

  stack<int64> st1;
  stack<int64> st2;
  stack<int64> st3;
} s[3000];

void solve(int test)
{
  int a, b;
  cin >> n >> m >> a >> b;
  vector<int64> g(n * m);
  int64 x, y, z;
  cin >> g[0] >> x >> y >> z;
  for (int i = 1; i < n * m; ++i) {
    g[i] = (g[i - 1] * x + y) % z;
  }
  int64 ans = 0;
  for (int j = 0; j < m; ++j) {
    for (int i = 0; i < a - 1; ++i) {
      s[j].add(g[i * m + j]);
    }
  }
  for (int i = a - 1; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      s[j].add(g[i * m + j]);
    }
    min_stack d;
    for (int j = 0; j < b - 1; ++j) {
      d.add(s[j].get());
    }
    for (int j = b - 1; j < m; ++j) {
      d.add(s[j].get());
      ans += d.get();
      d.pop();
    }
    for (int j = 0; j < m; ++j) {
      s[j].pop();
    }
  }
  cout << ans << '\n';
}

void precalc()
{
}

int main()
{
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i)
    solve(i);
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
