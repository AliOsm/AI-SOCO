#include <bits/stdc++.h>

using namespace std;

int n , m ;
vector < vector < int > > V;
bool vis[100010] ;
bool vis2[100010] ;
int par[100010] ;
int a[100010] ;
int last = 0 ;
vector < int > ans, tmp ;
void dfs(int idx)
{
    if ( vis[idx] ) return ;
    vis[idx] = 1 ;
    for ( int i = 0 ; i < V[idx].size() ; i++ )
        dfs(V[idx][i]) ;
    tmp.push_back(idx) ;
}

void dfs2(int idx ,int pa)
{
    if ( par[idx] != -1 ) return ;
    par[idx] = pa ;
    for ( int i = 0 ; i < V[idx].size() ; i++ )
        dfs2(V[idx][i],pa) ;
}
int main()
{
    ios_base::sync_with_stdio(0) ;
    cin.tie(0) ;
    memset(par,-1,sizeof par) ;
    cin >> n >> m ;
    int x , y ;
    last = n ;
    V.resize(n+1) ;
    for ( int i = 0 ; i < m ;i++ )
    {
        cin >> x >> y ;
        V[x].push_back(y) ;
    }
    for ( int i = 1 ; i <= n ; i++ )
        cin >> a[i],
        vis2[a[i]] = 1 ;
    tmp.push_back(-1) ;
    for ( int i = 1 ; i <= n ; i++ )
        if ( !vis[i] )
            dfs(i) ;
    for ( int i = 1 ; i <= n ; i++ )
        if ( vis2[tmp[i]] )
        {
            dfs2(tmp[i],tmp[i]);
            ans.push_back(tmp[i]) ;
        }
    for ( int i = 1 ; i <= n ; i++ )
        if ( par[i] != a[i] )
        {
            cout << -1 ;
            return 0 ;
        }
    cout << ans.size() << "\n" ;
    for ( int i = 0 ; i < ans.size(); i++ )
        cout << ans[i] << "\n" ;
    return 0;
}

