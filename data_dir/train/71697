#include <vector>
#include <stdio.h>
#include <string.h>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
typedef long long ll;
using namespace std;
int arr[100005]={},ranks[100005]={},timein[100005]={},timeout[100005]={};
ll counter=0,maxxlevel=0;
vector<vector<ll> > v(100005),alllevels(100005);
void dfs(ll i,ll level)
{
    ranks[i]=level;
    timein[i]=counter;
    alllevels[level].push_back(timein[i]);
    counter++;
    for(int h=0;h<v[i].size();h++)
    {
        dfs(v[i][h],level+1);
    }
    timeout[i]=counter;
    counter++;
    return;
}
ll spares[33][100020]={};
ll getspares(ll x, ll y)
{
    ll power=1LL<<31;
    for(int i=32; i>=1 &&x;i--)
    {
        if(x>=power)
        {
            y=spares[i][y];
            x-=power;
        }
        power=power>>1;
    }
    return y;
}
int main()
{
    std::cin.tie(0);
    std::ios::sync_with_stdio(false);
    //freopen("read.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    ll n,m,x,y;
    cin >> n;
    for(int i=1;i<=n;i++)
    {
        cin >> arr[i];
        v[arr[i]].push_back(i);
    }
    for(int i =1;i<=n;i++)
    {
        if(arr[i]==0)
        {
            dfs(i,0);
        }
    }
    for(int i =1;i<=31;i++)
    {
        for(int h=1;h<=n;h++)
        {
            if(i==1)
            {
                spares[i][h]=arr[h];
            }
            else
            {
                spares[i][h]=spares[i-1][spares[i-1][h]];
            }
        }
    }
    /*for(int i =0;i<10;i++)
    {
        cout << timein[i]<< " " << timeout[i] << " " << ranks[i]<< endl;
    }*/
    cin >>m;
    ll parent;
    for(int i=0;i<m;i++)
    {
        cin >> y>>x;
        parent=getspares(x,y);
        vector<ll> ::iterator it1,it2;
        it1=lower_bound(alllevels[ranks[y]].begin(),alllevels[ranks[y]].end(),timein[parent]);
        it2=upper_bound(alllevels[ranks[y]].begin(),alllevels[ranks[y]].end(),timeout[parent]);
        cout << max((int)(it2-it1-1),0) << " ";
    }
    cout << endl;
    return 0;
}
