#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef pair <ll, ll> pll;

const int Max = 2e6 + 10;
const int Mod = 1e9 + 7;
const ll Inf = 1LL << 62;

int sum[Max];
int ar[Max];
int cum[Max];

int main() {
#ifdef Mr_Emrul
        freopen("inputf.in", "r", stdin);
#endif /// Mr_Emrul

        int t, x, n, p, k;
        scanf("%d", &t);
        while(t--) {
                scanf("%d %d %d", &n, &p, &k);
                for(int i = 1; i <= n; i++) {
                        scanf("%d", &ar[i]);
                }
                sort(ar + 1, ar + n + 1);
                for(int i = 1; i <= n; i++) {
                        sum[i % k] += ar[i];
                        cum[i] = cum[i - 1] + ar[i];
                }
                int ans = 0;
                for(int i = n; i >= 1; i--) {
                        if(cum[i] <= p) {
                                ans = max(ans, i);
                        }
                        if(i % k == 0) {
                                if(sum[i % k] <= p) {
                                        ans = max(ans, i);

                                }
                        }
                        else {
                                int now = sum[i % k] - ar[i % k];
                                int rem = p, tot = 0;
                                if(now <= rem) {
                                        rem -= now;
                                        tot += (i / k) * k;
                                }
                                int l = 1, r = i % k, pos = 0;
                                while(l <= r) {
                                        int mid = (l + r) >> 1;
                                        if(cum[mid] <= rem) {
                                                pos = mid;
                                                l = mid + 1;
                                        } 
                                        else {
                                                r = mid - 1;
                                        }
                                }
                                tot += pos;
                                ans = max(ans, tot);
                        }
                        sum[i % k] -= ar[i];
                }
                printf("%d\n", ans);
        }
        return 0;
}