#include<bits/stdc++.h>

using namespace std;

typedef long long ll;

const int n_ = 1e5 + 10;
int n;
int p[n_];
vector<vector<pair<int,int> > >T;
int a[n_];
int res = 0;

void dfs(int node = 0, ll dist = 0, ll minDist = 0, int p = -1)
{
	if (dist - minDist > a[node])
		return;
	res++;
	for (int i = 0; i < (int)T[node].size(); i++)
	{
		pair<int,int> child = T[node][i];
		if (child.first == p) continue;

		dfs(child.first, dist + child.second, min(minDist, dist + child.second), node);
	}
}

int main()
{
	scanf("%d", &n);
	T.assign(n, vector<pair<int,int> >());
	for (int i = 0; i < n; i++)
		scanf("%d", &a[i]);

	p[0] = -1;
	for (int i = 1; i < n; i++)
	{
		int c;
		scanf("%d %d", &p[i], &c);
		p[i]--;
		T[p[i]].push_back(make_pair(i, c));
	}
	dfs();

	printf("%d\n", n - res);
}
