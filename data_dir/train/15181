#include <bits/stdc++.h>

using namespace std;

#define fi first
#define se second
#define pf push_front
#define pb push_back
#define mk make_pair
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)x.size()
#define SWS ios_base::sync_with_stdio(false)
#define rfile freopen("input.txt", "r", stdin)
#define wfile freopen("output.txt", "w", stdout)
#define files rfile; wfile

typedef long long ll;
typedef long double ld;

const int Z = (int)1e5 + 111;
const int inf = (int)1e9 + 111;
const ll llinf = (ll)1e18 + 5;
const int MOD = (int)1e9 + 7;

int main () {
	srand(time(0));
	//files;
	SWS;
	ll a, b;
	cin >> a >> b;
	multiset <int, greater<int> > digA;
	vector <int> digB;
	while (a) {
		digA.insert(a % 10);
		a /= 10;
	}
	while (b) {
		digB.pb(b % 10);
		b /= 10;
	}
	reverse(all(digB));
	if (sz(digA) < sz(digB)) {
		for (int i : digA) {
			cout << i;
		}
		return 0;
	}
	bool q = false;
	for (int i = 0; i < sz(digB); ++i) {
		int t = 0;
		for (int num : digA) {
			if (num <= digB[i]) {
				t = max(t, num);
			}
		}
		if (t < digB[i]) {
			digA.erase(digA.find(t));
			cout << t;
			q = true;
			break;
		} else {
			bool ok = true;
			multiset <int, greater<int> > f = digA;
			f.erase(f.find(t));
			for (int j = i + 1; j < sz(digB); ++j) {
				int num = *(--f.end());
				if (digB[j] < num) ok = false;
				if (digB[j] > num) break;
				f.erase(f.find(num));
			}
			if (ok) {
				cout << t;
				digA.erase(digA.find(t));
			} else {
				int t2 = 0;
				for (int num : digA) {
					if (num < t) t2 = max(t2, num);
				}
				cout << t2;
				digA.erase(digA.find(t2));
				q = true;
				break;
			}
		}
	}
	if (q) {
		for (int i : digA) {
			cout << i;
		}
	}
	return 0;
}