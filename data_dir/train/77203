#include <bits/stdc++.h>
#define MOD 1000000007
typedef long long ll;
using namespace std;

const int N = 222222;
vector<int> graph[N], ing[N];
map<pair<int, int>, int> mp;
int dist[N], cnt[N];
int n, m, k;

int main() {
    ios_base::sync_with_stdio(false);
    cin >> n >> m >> k;
    for(int i = 1; i <= m; i++) {
        int a, b;
        cin >> a >> b;
        graph[a].push_back(b);
        graph[b].push_back(a);
        if(a > b) swap(a, b);
        mp[make_pair(a, b)] = i;
    }
    queue<int> q;
    fill(dist + 2, dist + N, 2 * N);
    q.push(1);
    while(q.size()) {
        int u = q.front();
        q.pop();
        for(v : graph[u]) {
            if(dist[v] > dist[u] + 1) {
                dist[v] = dist[u] + 1;
                q.push(v);
            }
        }
    }
    for(int i = 1; i <= n; i++) {
        for(j : graph[i]) {
            if(dist[j] == dist[i] + 1) {
                ing[j].push_back(i);
            }
        }
    }
    ll ans = 1;
    for(int i = 2; i <= n; i++) {
        ans *= ing[i].size();
        if(ans >= k) {
            ans = k;
            break;
        }
    }
    cout << ans << endl;
    fill(cnt, cnt + N, 1);
    while(1) {
        string line(m, '0');
        for(int i = 2; i <= n; i++) {
            int j = ing[i][cnt[i] - 1];
            int ii = i;
            if(ii > j) swap(ii, j);
            int pos = mp[make_pair(ii, j)] - 1;
            line[pos] = '1';
        }
        cout << line << endl;
        cnt[n]++;
        int i = n;
        while(i > 0 && cnt[i] > ing[i].size()) {
            cnt[i] = 1;
            i--;
            cnt[i]++;
        }
        if(i == 0) break;
        k--;
        if(!k) break;
    }
    return 0;
}
