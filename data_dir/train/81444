//ITNOA
#include<bits/stdc++.h> 

using namespace std;
 
#define scan(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)
char _;

//#define int long long
#define rep(i, s, e) for(int i = s; i < e; i ++)
#define X first
#define Y second
 
typedef long long ll;
typedef long double ld;

const int maxN = 1000*1000 + 5;
const int mod = 1000*1000*1000 + 7;
const int base = 701;
const int SQ = 500;

int a[maxN];
vector<int> v;

inline void taj(int x)
{
    for(int i = 2; i * i <= x; i ++)
    {
	if(x % i == 0)
	{
	    v.push_back(i);
	    while(x % i == 0) x /= i;
	}
    }
    if(x > 1) v.push_back(x);
}
int n;
int dp[maxN];
int p, q;

ll solve(int x)
{
    int mnb = mod, mxb = -1;
    rep(i,0,n)
    {
	if(a[i] % x && (a[i]-1) % x && (a[i]+1) % x) mnb = min(mnb, i), mxb = max(mxb, i);
    }

    if(mnb == mod)
    {
	vector<int> v;
	rep(i,0,n)
	    if(a[i] % x)
		v.push_back(i);

	ll ans = (1LL) * q * ((int)v.size());
	if(p >= q) return ans;
	ll pre = 0, vv = 0;
	rep(i,0,(int)v.size())
	{
	    pre = min(pre, (1LL) * i * q - (1LL) * v[i] * p);
	    vv = min(vv, (1LL) * (v[i]+1) * p - (1LL) * (i+1) * q + pre);
	}
	return ans + vv;
    }
    
    ll ansx = 0, ansy = 0;
    int cnt = 0;
    rep(i,0,mnb)
    {
	if(a[i] % x) cnt ++;
	ll tmp = (1LL) * cnt * q - (1LL) * (i+1) * p;
	ansx = min(ansx, tmp);
    }
//    cout << ansx << endl;
    
    
    cnt = 0;
    for(int i = n-1; i > mxb; i --)
    {
	if(a[i] % x) cnt ++;
	ll tmp = (1LL) * cnt * q - (1LL) * (n-i) * p;
	ansy = min(ansy, tmp);
    }
    
    return ansx + ansy + (1LL) * n * p;
}

int32_t main()
{
//    ios::sync_with_stdio(0); cin.tie(0);
    scanf("%d%d%d", &n, &p, &q);
    rep(i,0,n) scanf("%d", &a[i]);
    taj(a[0] - 1); taj(a[0]+1); taj(a[0]);
    taj(a[n-1] - 1); taj(a[n-1]+1); taj(a[n-1]);
    
    sort(v.begin(), v.end());
    v.resize(unique(v.begin(), v.end()) - v.begin());
    
    ll bes = (1LL) * mod * mod;
    rep(i,0,(int)v.size())
    {
	bes = min(bes, solve(v[i]));
    }

    printf("%I64d\n", bes);
    return 0;
}
