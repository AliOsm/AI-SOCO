
/*\
 * ...
 * ......
 * In the name of ALLAH
 * ......
 * ...
\*/

#include <bits/stdc++.h>

using namespace std;
#define Size(x) ((int)(x).size())
#define pb push_back
#define LD_OUT setprecision(12) << fixed
typedef long long ll;
typedef long double ld;
typedef pair<int,int>pii;
const int INF = 1e9 + 10 , MN = 2e5 + 10;

int n , m;
bool is[MN];
int dp_up[MN] , dp_down[MN] , Mx[MN] , h[MN];
int es[MN] , ee[MN];
vector<int>adj[MN];
int Sz = 0;

void dfs_up(int s,int pr){
	if(is[s]) dp_up[s] = 0;
	else dp_up[s] = -INF;
	
	for(auto v:adj[s]) if(v ^ pr){
		h[v] = h[s] + 1;
		dfs_up(v , s);
		if(dp_up[v] >= 0) ++Sz;

		dp_up[s] = max(dp_up[s] , dp_up[v]+1);
	}
}

void dfs_down(int s,int pr){
	if(is[s]) dp_down[s] = max(dp_down[s] , 0);

	Mx[0] = -INF;
	for(int i=0;i<Size(adj[s]) ;++i){
		int v = adj[s][i];
		if(v == pr) Mx[i+1] = Mx[i];
		else Mx[i+1] = max(Mx[i] , dp_up[v]);
	}

	int cur = -INF;
	for(int i=Size(adj[s])-1;~i;--i){
		int v = adj[s][i];
		if(v == pr) continue;
		dp_down[v] = max(cur+2 , max(dp_down[s]+1 , Mx[i]+2));
		cur = max(cur , dp_up[v]);
	}

	for(auto v:adj[s]) if(v ^ pr) dfs_down(v , s);
}

int main()
{
	ios_base :: sync_with_stdio(false) ,cin.tie(0) , cout.tie(0);
	cin >> n >> m;
	fill(dp_up , dp_up + n , -INF);
	fill(dp_down , dp_down + n , -INF);
	for(int i=1;i<n;++i){
		int a,b;cin>>a>>b;--a,--b;
		adj[a].pb(b) , adj[b].pb(a);
		es[i-1] = a , ee[i-1] = b;
	}
	while(m--){int x;cin>>x;is[x-1]=true;}
	int rt = -1;
	for(int i=0;i<n;++i) if(is[i]) rt = i;

	dfs_up(rt , -1);
	dfs_down(rt , -1);
	int mx = -1;
	for(int i=0;i<n;++i)
		if(is[i] && (mx == -1 || max(dp_up[i] , dp_down[i]) > max(dp_up[mx] , dp_down[mx])))
			mx = i;
	cout << mx+1 << '\n' << 2*Sz - max(dp_down[mx] , dp_up[mx]) << '\n';
	return 0;
}

