#include <bits/stdc++.h>


using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;


//#define int ll
#define rand shittttty_shit
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rng_64(chrono::steady_clock::now().time_since_epoch().count());


typedef pair<int, int> pii;
typedef pair<string, string> pst;
typedef pair<pii, pii> piii;
typedef vector<piii> vpii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector< vi > vvi;
typedef vector< vvi > vvvi;
typedef vector<pii> vpi;
typedef vector<short> vs;
typedef vector<vs> vvs;
typedef vector<vvs> vvvs;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vvl> vvvl;
typedef vector<ld> vld;
typedef vector<vld> vvld;
typedef vector<vvld> vvvld;
typedef vector<string> vst;
typedef vector<vst> vvst;
typedef pair<ld, ld> pld;
typedef pair<pld, pld> pldd;
typedef vector<pld> vpd;
typedef complex<double> base;


#define inmin(a, b) a = min(a, (b))
#define inmax(a, b) a = max(a, (b))
#define my_abs(a) (((a) >= 0) ? (a) : -(a))
#define mp(a, b) make_pair(a, (b))
#define ALL(a) a.begin(),a.end()
#define RALL(a) a.rbegin(),a.rend()
#define sqr(x) ((x) * (x))
#define fori(i, n) for(int i = 0; i < int(n); ++i)
#define SZ(a) ((int)((a).size()))
#define MODIK(a) (a >= M ? a - M : a)
#define triple(T) tuple<T, T, T>
#define quad(T) tuple<T, T, T, T>
#define watch(x) cout << (#x) << " = " << x << endl;
#ifdef MAX_HOME
#define cerr cout
#else
#define cerr if (false) cerr
#endif


const double PI = 2 * acos(0.0);

const string DIGITS = "0123456789";
const string ALPH = "abcdefghijklmnopqrstuvwxyz";

istream &operator >> (istream &in, pii &a)
{
    in >> a.first >> a.second;
    return in;
}


ostream &operator << (ostream &out, pii &a)
{
    out << a.first << ' ' << a.second;
    return out;
}


istream &operator >> (istream &in, pld &a)
{
    in >> a.first >> a.second;
    return in;
}


ostream &operator << (ostream &out, pld &a)
{
    out << a.first << ' ' << a.second;
    return out;
}


template <class T0, class T1>
inline ostream & operator << (ostream &out, pair<T0, T1> &a) {
    return out << "{" << a.first << ", " << a.second << "}";
}

template <class T0, class T1, class T2>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) << ", " << get<2>(a) << "}";
}

template <class T0, class T1, class T2, class T3>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2, T3> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) <<
               ", " << get<2>(a) << ", " <<  get<3>(a) << "}";
}

template<class T>
inline ostream & operator << (ostream &out, vector<T> &a) {
    out << "[";
    fori (i, a.size())
        out << a[i] << vector<string>{", ", "]  "}[i + 1 == a.size()];
    return out;
}


void print(vi kek, int k)
{
    ofstream cout("output.txt");
    cout << SZ(kek) << ' ' << k << '\n';
    for (auto p : kek) {
        cout << p << ' ';
    }
    cout.close();
    exit(0);
}


void smain();

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

#ifdef ART_HOME
    freopen("input.txt", "r", stdin);
    clock_t start = clock();
#endif
    cout << setprecision(12) << fixed;
    smain();
#ifdef ART_HOME
    cout << "\n\n\nTOTAL EXECUTION TIME: " << float( clock () - start ) /  CLOCKS_PER_SEC << endl;
#endif
}


const int N = 2e5 + 100, B = 330, oo = 1e9;


vi pos[N];
int t[N];


int get(int ind)
{
    int cnt = 0;
    for (int i = ind; i; i -= i&-i)
        cnt += t[i];


    return cnt;
}


void add(int ind, int v)
{
    for (int i = ind; i < N; i += i&-i)
        t[i] += v;
}


int get(const vi &flex, int ind)
{
    int l = -1, r = SZ(flex);
    while (r - l > 1)
    {
        int m = (l + r) >> 1;
        if (flex[m] > ind)
            r = m;
        else
            l = m;
    }

    return l + 1;
}


void smain()
{
    int n;
    cin >> n;

    vi kek(n);
    for (int i = 0; i < n; ++i)
        cin >> kek[i];

    vi lel = kek;
    stable_sort(ALL(lel));

    map<int, int> comp, uncomp;
    int cur = 1;

    for (int i = 0; i < n; ++i)
        if (!comp.count(lel[i]))
            comp[lel[i]] = cur++,
            uncomp[cur - 1] = lel[i];

    for (int i = 0; i < n; ++i)
        pos[comp[kek[i]]].push_back(i);

    for (auto &p : lel)
        p = comp[p];

    int m;
    cin >> m;

    vector<triple(int)> flex;

    for (int i = 0; i < m; ++i)
    {
        int k, pos;
        cin >> k >> pos;
        flex.push_back(make_tuple(k, pos, i));
    }

    vi ans(m);
    stable_sort(RALL(flex));

    int sk = 0;
    for (int i = N - 1; i; --i)
    {
        int k, ps, ind;
        tie(k, ps, ind) = flex.back();

        while (sk + SZ(pos[i]) >= k)
        {
            assert(get(N - 1) < k);
            int v = k - get(N - 1);

            int l = -1, r = n + 1;
            while (r - l > 1)
            {
                int m = (l + r) >> 1;
                int cnt1 = min(get(pos[i], m), v);
                int cnt2 = get(m + 1);

                if (cnt1 + cnt2 >= ps)
                    r = m;
                else
                    l = m;
            }

            ans[ind] = kek[r];


            flex.pop_back();
            tie(k, ps, ind) = flex.back();
        }

        for (auto p : pos[i])
            add(p + 1, 1);

        sk += SZ(pos[i]);
    }


    for (int v : ans)
        cout << v << ' ';
}




