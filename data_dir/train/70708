#include <bits/stdc++.h>

using namespace std;
int mod = 1e9 + 7;
int64_t binpow (int64_t a, int n) {
	int64_t res = 1;
	while (n) {
		if (n & 1) {
			res *= a;
			res %= mod;
		}
		a *= a;
		a %= mod;
		n >>= 1;
	}
	return res % mod;
}

int mobius(int k, vector <int> &sieve) {
	map <int, int> m;
	for (int i = 2; i * i <= k; i++) {
		while (k % i == 0) {
			k /= i;
			m[i]++;
		}
	}
	if (k > 1) {
		m[k]++;
	}
	int sum = 0;
	for (auto it = m.begin(); it != m.end(); it++) {
		if (it -> second > 1) {
			return 0;
		}
		sum += it-> second;
	}
	if (sum & 1) {
		return -1;
	}
	return 1;
}

int main() {
	ios_base::sync_with_stdio(0);
	int x, y;
	cin >> x >> y;
	if (y % x != 0) {
		cout << 0;
		return 0;
	}
	y /= x;
	vector <int> dels;
	for (int i = 1; i * i <= y; i++) {
		if (y % i == 0) {
			dels.push_back(i);
			if (i * i != y) {
				dels.push_back(y / i);
			}
		}
	}
	vector <int> sieve(sqrt(y) + 10);
	for (int i = 2; i < sieve.size(); i++) {
		if (sieve[i] == 0) {
			for (int j = i * i; j < sieve.size(); j+= i) {
				sieve[j] = i;
			}
		}
	}
	int64_t ans = 0;
	for (int i = 0; i < dels.size(); i++) {
		ans += mobius(y / dels[i], sieve) * binpow(2, dels[i] - 1);
		ans %= mod;
	}
	if (ans < 0) ans += mod;
	cout << ans;
}