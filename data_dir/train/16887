#include<iostream>    
#include<cstdio>    
#include<map>    
#include<cstring>    
#include<cmath>    
#include<vector>    
#include<algorithm>    
#include<set>    
#include<stack>  
#include<string>    
#include<ctime>  
#include<queue>    
#include<cassert>  
#define eps 1e-8  
#define zero(a) fabs(a)<eps    
#define Min(a,b) ((a)<(b)?(a):(b))    
#define Max(a,b) ((a)>(b)?(a):(b))    
#define pb(a) push_back(a)    
#define mp(a,b) make_pair(a,b)    
#define mem(a,b) memset(a,b,sizeof(a))    
#define LL long long  
#define sqr(a) ((a)*(a))    
#define Key_value ch[ch[root][1]][0]    
#define test puts("OK");    
#define pi acos(-1.0)  
#define lowbit(x) ((-(x))&(x))  
#define HASH1 1331  
#define HASH2 10001  
#define vi vector<int>  
#define TIME 10    
#pragma comment(linker, "/STACK:1024000000,1024000000")    
using namespace std; 
const int MAXN= 7000;
const int MAXM= 7000000;
int dist[MAXN],p[MAXN];
int tot,start[MAXN];
bool inq[MAXN];
struct Edge{
    int v,next,f,c;
}edge[MAXM];
void _add(int u,int v,int f,int c) {
	edge[tot].v=v;edge[tot].f=f;
	edge[tot].c=c;edge[tot].next=start[u];
	start[u]=tot++;
}
void add(int u,int v,int f,int c) {
    _add(u,v,f,c);
    _add(v,u,0,-c);
}
bool spfa(int S,int T) {
    memset(dist,-1,sizeof(dist));
    memset(inq,0,sizeof(inq));
    dist[S]=0;
    queue<int>que;
    que.push(S);
    while(!que.empty()) {
        int u=que.front();
        que.pop();
        inq[u]=false;
        for(int i=start[u]; i!=-1; i=edge[i].next) {
            if(!edge[i].f) {
                continue;
            }
            int v=edge[i].v;
            if(dist[v]==-1||dist[v]>dist[u]+edge[i].c) {
                dist[v]=dist[u]+edge[i].c;
                p[v]=i^1;
                if(!inq[v]) {
                    inq[v]=true;
                    que.push(v);
                }
            }
        }
    }
    return dist[T]!=-1;
}
const int INT_MAX = 1<<29;
int minc(int S,int T) {
    int maxf=0,minc=0;
    while(spfa(S,T)) {
        int ret=INT_MAX;
        for(int u=T; u!=S; u=edge[p[u]].v) {
            ret=min(ret,edge[p[u]^1].f);
        }
        maxf+=ret;
        for(int u=T; u!=S; u=edge[p[u]].v) {
            edge[p[u]].f+=ret;
            edge[p[u]^1].f-=ret;
            minc+=ret*edge[p[u]^1].c;
        }
    }
    return minc;
}
int a[105][105],n,m;
int main(){
	tot=0;mem(start,-1);
	scanf("%d%d",&n,&m);
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			scanf("%d",&a[i][j]);
	int s=n*m+1,e=n*m+2,num=n*m+2;
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			int now=1+m*i+j;
			if((i+j)&1){
				add(s,now,1,0);
				if(i){
					add(now,1+(i-1)*m+j,1,(a[i-1][j]!=a[i][j]));
				}
				if(i<n-1){
					add(now,1+(i+1)*m+j,1,(a[i+1][j]!=a[i][j]));
				}
				if(j){
					add(now,1+i*m+j-1,1,(a[i][j-1]!=a[i][j]));
				}
				if(j<m-1){
					add(now,1+i*m+j+1,1,(a[i][j+1]!=a[i][j]));
				}
			}
			else add(now,e,1,0);
		}
	}
    printf("%d\n",minc(s,e));
    return 0;
}
