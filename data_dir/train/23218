#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <iostream>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef unsigned long long llu;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
const ll MOD = 1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v[300000];

int vec[300000];
multiset<int> ms;

int main() {
	int n;
	scanf("%d", &n);

	for (int i = 0; i < n; i++) {
		scanf("%d", &vec[i]);
		ms.insert(vec[i]);
	}

	int a, b;
	for (int i = 0; i < n - 1; i++) {
		scanf("%d %d", &a, &b);
		a--; b--;
		v[a].push_back(b);
		v[b].push_back(a);
	}

	int miv = 2e9;
	for (int i = 0; i < n; i++) {
		int mav = vec[i];
		ms.erase(ms.find(vec[i]));

		for (int j = 0; j < sz(v[i]); j++) {
			mav = max(mav, vec[v[i][j]] + 1);
			ms.erase(ms.find(vec[v[i][j]]));
		}
		

		if(!ms.empty()) mav = max(mav, *(--ms.end()) + 2);
		miv = min(miv, mav);

		ms.insert(vec[i]);
		for (int j = 0; j < sz(v[i]); j++)
			ms.insert(vec[v[i][j]]);
	}

	printf("%d", miv);
}