#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <int>::max() >> 1;
const ll N = 1e5 + 1;
ll n, k;

ll a[N];

void input() {
    cin >> n >> k;
    for(ll i = 0; i < n; ++i) {
        string t; cin >> t;
        if(t == "?") {
            a[i] = inf;
        } else {
            a[i] = stoi(t);
        }
    }
}

ll f(ll x, ll c) {
    if(x < 0 && x + c - 1 > 0) {
        return f(1, -x) + f(0, c + x);
    } else {
        return abs(x * c + c * (c - 1) / 2);
    }
}

ll ternary_search(ll l, ll r, ll c) {
    if(l == r) {
        return l;
    }
    ll d = (r - l) / 3;
    ll a = l + d;
    ll b = r - d;
    if(f(a, c) < f(b, c)) {
        return ternary_search(l, b - 1, c);
    } else {
        return ternary_search(a + 1, r, c);
    }
}

bool calc(ll x) {
    vec <ll> val;
    for(ll i = x; i < n; i += k) {
        val.pb(i);
    }
    ll ind = 0;
    ll cnt = 0;
    ll lst = -inf;
    for(ll e: val) {
        if(a[e] != inf) {
            if(a[e] - lst <= cnt) {
                return 0;
            } else {
                ll res = ternary_search(lst + 1, a[e] - cnt, cnt);
                for(ll i = e - cnt * k, j = res; i < e; i += k, ++j) {
                    a[i] = j;
                }
            }
            lst = a[e];
            cnt = 0;
        } else {
            cnt++;
        }
        ind = e;
    }
    ind += k;
    ll res = ternary_search(lst + 1, inf - cnt, cnt);
    for(ll i = ind - cnt * k, j = res; i < ind; i += k, ++j) {
        a[i] = j;
    }
    return 1;
}

void solve() {
    for(ll i = 0; i < k; ++i) {
        if(!calc(i)) {
            cout << "Incorrect sequence\n";
            return;
        }
    }
    for(ll i = 0; i < n; ++i) {
        cout << a[i] << " ";
    }
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
