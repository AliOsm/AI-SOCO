#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <ext/algorithm>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<ll, ll> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;
template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; } 
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; } 
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

const int MAXN = 42;

int n, m, a[MAXN][MAXN], dp[MAXN][MAXN][MAXN][MAXN];

int sum(int x, int y, int xx, int yy) {
	return a[xx][yy] - a[xx][y-1] - a[x-1][yy] + a[x-1][y-1];
}

int main() {
	ios::sync_with_stdio(false);

	int q;
	cin >> n >> m >> q;
	FOR(i, 1, n+1) {
		string line;
		cin >> line;
		FOR(j, 1, m+1) {
			a[i][j] = line[j-1]-'0';
		}
	}

	FOR(i, 1, n+1) FOR(j, 1, m+1) a[i][j] += a[i][j-1];
	FOR(i, 1, n+1) FOR(j, 1, m+1) a[i][j] += a[i-1][j];

	FOR(x, 1, n+1) FOR(y, 1, m+1) FOR(xx, x, n+1) FOR(yy, y, m+1) {
		dp[x][y][xx][yy] = sum(x, y, xx, yy) == 0;
		dp[x][y][xx][yy] += dp[x][y][xx-1][yy] + dp[x][y][xx][yy-1] - dp[x][y][xx-1][yy-1];
	}

	while (q--) {
		int x, y, xx, yy;
		cin >> x >> y >> xx >> yy;
		int total = 0;
		FOR(i, x, xx+1) FOR(j, y, yy+1) total += dp[i][j][xx][yy];
		cout << total << endl;
	}
	return 0; 
}

