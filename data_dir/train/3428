#include <iostream>
#include <functional>
#include <vector>
#include <string>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <stdint.h>
using namespace std;

map<int, multiset<int> > g;
vector<int> ans;
int mx;

void dfs(int v)
{
	while (!g[v].empty())
	{
		int to = *g[v].begin();
		g[v].erase(g[v].find(to));
		dfs(to);
		++mx;
	}
	ans.push_back(v);
}

int main(void)
{
	int n;
	cin >> n;
	map<int, int> in, out;
	set<int> w;
	vector<string> str(n);
	for (int i = 0; i < n; ++i)
	{		
		cin >> str[i];
		const string & tmp = str[i];
		int a = tmp[0] * 128 + tmp[1];
		int b = tmp[1] * 128 + tmp[2];
		g[a].insert(b);
		++in[b];
		++out[a];
		w.insert(a);
		w.insert(b);
	}
	int s = -1, cnt = 0;
	for (auto & v : w)
	{
		if (s < 0 && in[v] > 0 && in[v] == out[v] || in[v] < out[v])
			s = v;
		if (in[v] > out[v])
			cnt += in[v] - out[v];
	}
	dfs(s);
	if (cnt <= 1 && mx == n)
	{
		cout << "YES" << endl;
		reverse(ans.begin(), ans.end());
		for (int i = 0; i < (int)ans.size(); ++i)
		{
			cout << char(ans[i] / 128);
			if (i + 1 == ans.size())
				cout << char(ans[i] % 128);
		}
	}
	else
	{
		cout << "NO" << endl;
	}
	return 0;
}