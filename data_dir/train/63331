#include <iostream>
#include <algorithm>
#include <map>
#include <set>
#include <climits>
#include <cstdlib>
#include <vector>
#include <string>
#include <queue>
#include <stack>
#include <fstream>


using namespace std;

vector<int> g[1234567];
vector<int> comps;
bool used[1234567];

void dfs(int v)
{
	comps.back()++;
	used[v] = 1;
	for(int i = 0; i < g[v].size(); ++i)
	{
		int to = g[v][i];
		if(!used[to])
			dfs(to);
	}
}

int main()
{
	int n;
	cin >> n;
	int m;
	cin >> m;
	int k;
	cin >> k;
	vector<int> vv(k);
	for(int i = 0; i < k; ++i)
		cin >> vv[i];


	for(int i = 0; i < m; ++i)
	{
		int v, u;
		cin >> v >> u;
		g[v].push_back(u);
		g[u].push_back(v);
	}

	for(int i = 0; i < k; ++i)
	{
		comps.push_back(0);
		dfs(vv[i]);
	}
	int mx = 0;
	long long ans = 0;
	int kk = 0;
	for(int i = 0; i < comps.size(); ++i)
	{
		mx = max(mx, comps[i]);
		ans += 1ll * (comps[i]) * (comps[i] - 1) / 2;
	}
	for(int i = 1; i <= n; ++i)
		if(!used[i])
			++kk;
	cout << ans + 1ll * kk * mx + (1ll * kk * (kk-1) / 2) - m;
		
	return 0;
}



