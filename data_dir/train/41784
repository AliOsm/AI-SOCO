//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <iostream>
#include <stdlib.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <unordered_map>
#include <random>
#include <assert.h>
#include <memory.h>
#include <time.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

inline void setmin(int &x, int y) { if (y < x) x = y; }
inline void setmax(int &x, int y) { if (y > x) x = y; }
inline void setmin(ll &x, ll y) { if (y < x) x = y; }
inline void setmax(ll &x, ll y) { if (y > x) x = y; }

const int N = 51;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int P1 = 31;
const int P2 = 57;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const int MOD2 = 998244353;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

int dp[N][N][N];
int cost[N][N][N][N];
int L[N], R[N], x[N], c[N];

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n, H, m;
    cin >> n >> H >> m;
    rep(i, 0, m) {
        cin >> L[i] >> R[i] >> x[i] >> c[i];
        L[i]--; R[i]--;
    }
    rep(i, 0, m) {
        if (x[i] == H) {
            continue;
        }
        rep(l, 0, L[i] + 1) {
            rep(r, R[i], n) {
                rep(p, L[i], R[i] + 1) {
                    cost[l][r][p][x[i] + 1] -= c[i];
                }
            }
        }
    }
    rep(l, 0, n) {
        rep(r, l, n) {
            rep(p, l, r + 1) {
                rep(h, 1, H + 1) {
                    cost[l][r][p][h] += cost[l][r][p][h - 1];
                }
            }
        }
    }
    rep(i, 0, n) {
        rep(j, i, n) {
            rep(h, 0, H + 1) {
                dp[i][j][h] = -inf;
            }
        }
    }
    repb(l, n - 1, -1) {
        rep(r, l, n) {
            rep(p, l, r + 1) {
                rep(h, 0, H + 1) {
                    int val = h * h + cost[l][r][p][h];
                    if (p > l) {
                        val += dp[l][p - 1][h];
                    }
                    if (p < r) {
                        val += dp[p + 1][r][h];
                    }
                    setmax(dp[l][r][h], val);
                }
            }
            rep(h, 1, H + 1) {
                setmax(dp[l][r][h], dp[l][r][h - 1]);
            }
        }
    }
    cout << dp[0][n - 1][H] << "\n";
    return 0;
}