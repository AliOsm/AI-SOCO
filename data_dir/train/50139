#pragma comment (linker, "/STACK:256000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>
 
//#include <random>
 
using namespace std;
 
 
double PI = 3.1415926535897932384626433832795;
long double EPS = 1e-12;
 
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
const int MOD = 1e9 + 7;
const int BASE = 1327; 
typedef pair<int64, int64> pii;
const int MAXN = 100100;
const int64 LINF = 2e18; 
 
int n, q;
int64 dp[MAXN][2];
int c[MAXN];
string st;
string sp[MAXN], rsp[MAXN];

void solve()
{
	cin >> n;
	for(int i = 0; i < n; ++i)
		cin >> c[i];
	for(int i = 0; i < n; ++i)
	{
		
		cin >> st;
		sp[i] = st;
		reverse(st.begin(), st.end());
		rsp[i] = st;
	}
	memset(dp, 63, sizeof dp);
	dp[1][0] = 0;
	dp[1][1] = c[0];
	for(int i = 1; i < n; ++i)
	{
		if (sp[i] >= sp[i - 1])
		{
			dp[i + 1][0] =  min(dp[i][0], dp[i + 1][0]);
		}
		if (rsp[i] >= sp[i - 1])
		{
			dp[i + 1][1] = min(dp[i + 1][1], dp[i][0] + c[i]);
		}
		if (sp[i] >= rsp[i - 1])
		{
			dp[i + 1][0] =  min(dp[i][1], dp[i + 1][0]);
		}
		if (rsp[i] >= rsp[i - 1])
		{
			dp[i + 1][1] = min(dp[i + 1][1], dp[i][1] + c[i]);
		}
	}
	int64 ans = min(dp[n][0], dp[n][1]);
	if (ans > 1e18)
		cout << -1;
	else
		cout << ans;
}
 
 
int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
    srand(1313);
	
	int t = 1;
	//scanf("%d", &t);
	for(int i = 0; i < t; ++i)
	{
		solve();
	}
	
    return 0;
}      