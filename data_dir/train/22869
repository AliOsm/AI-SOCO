#include<bits/stdc++.h>
using namespace std;

typedef double                 ld;
typedef long long                   ll;
typedef pair<int,int>               pii;
typedef pair<ll,ll>                 pll;
typedef pair<string , string>       pss;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define F                           first
#define S                           second
#define sep                         ' '
#define endl                        '\n'
#define file_io                     freopen("input.txt" , "r+" , stdin) ; freopen("output.txt" , "w+" , stdout);
#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define error(x)                    cerr << "$$$ " << x << '\n';
#define error2(x,y)                 cerr << "#F : " << x << "      #S : " << y << '\n';
#define kill(x)                     return cout << x << endl , 0;
#define pb                          push_back

const ll MXN = 70 + 10;
const ll MXM = 5e2 + 10;
const ll MX5 = 2e5 + 10;
const ll MX6 = 1e6 + 10;
const ll INF = 8e18;
const ld eps = 1e-9;
const ll MOD = 1e9 + 7; //998244353;

ll power(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * power(a * a % md, b / 2, md) % md : power(a * a % md, b / 2, md) % md));
}
ll bmm(ll a,ll b){
    return (a%b==0 ? b : bmm(b,a%b));
}
string base2(ll n){
    string a="";while(n>=2){a+=(char)(n%2+'0');n/=2;}a+=(char)(n+'0');reverse(all(a));return a;
}

ll n, qq, vi[MX5], pi[MX5], t = 0, tp = 0, starting_time[MX5], dis[MX5], finishing_time[MX5];
vector<ll> G[MX5], PAR[MX5], DFSQ, Floor[MX5], FloorS[MX5], FloorF[MX5];
bool vis[MX5];
map<pll, ll> mp;

void DFS(ll u){
    vis[u] = 1;
    starting_time[u] = t;
    t ++;
    for(int i = 0; i < PAR[u].size(); i ++){
        if(DFSQ.size() - PAR[u][i] < 0) continue;
        ll now = DFSQ[DFSQ.size() - PAR[u][i]];
        mp[{u, PAR[u][i]}] = now;
    }
    DFSQ.pb(u);
    for(auto v : G[u]){
        if(!vis[v]){
            dis[v] = dis[u] + 1;
            Floor[dis[v]].pb(v);
            DFS(v);
        }
    }
    finishing_time[u] = tp;
    tp ++;
    DFSQ.pop_back();
    return;
}

int main(){
    //fast_io
    //file_io
    cin >> n;
    for(int i = 0; i < n; i ++){
        ll par, u = i + 1;
        cin >> par;
        G[u].pb(par);
        G[par].pb(u);
    }
    cin >> qq;
    ll i = 0;
    while(i < qq){
        cin >> vi[i] >> pi[i];
        PAR[vi[i]].pb(pi[i]);
        i ++;
    }
    dis[0] = 0;
    DFS(0);

    for(int i = 0; i < MX5; i ++){
        for(int j = 0; j < Floor[i].size(); j ++){
            FloorS[i].pb(starting_time[Floor[i][j]]);
            FloorF[i].pb(finishing_time[Floor[i][j]]);
        }
    }
    i = 0;
    while(i < qq){
        ll x = mp[{vi[i], pi[i]}];

        ll ind = dis[x] + pi[i];

        if(pi[i] >= dis[vi[i]]){
            cout << 0 << sep;
            i ++;
            continue;
        }

        ll st = starting_time[x];
        ll ft = finishing_time[x];

        ll ind1 = lower_bound(all(FloorS[ind]), st) - FloorS[ind].begin();
        ll ind2 = lower_bound(all(FloorF[ind]), ft) - 1 - FloorF[ind].begin();

        cout << ind2 - ind1 << sep;

        i ++;
    }


    return 0;
}

//! N.N
