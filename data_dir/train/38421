#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
#include <random>
#include <cassert>
#include <sstream>
using namespace std;
#define F first
#define S second
#define pb push_back
#define PB push_back
#define MP make_pair
#define ALL(x) begin(x), end(x)
#define SZ(x) (int)(x).size()
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
#define ln(i, n) " \n"[i == n]
typedef long long LL;
typedef long double LDB;
typedef double D;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
//////////////////////
const long double eps = 1e-13;
const long double PI = acos(-1);
const int INF = (int)1e9 + 7;
const LL  INFF = (LL)1e18;
const int mod = (int)1e9 + 7;
const int MXN = (int)5e5 + 7;
LL a[MXN];
PII b[MXN];
inline int add(int v1, int v2) {
	v1 += v2;
	if (v1 >= mod) v1 -= mod;
	return v1;
}
struct Seg {
	int ll[MXN<<2], rr[MXN<<2];
	int v[MXN<<2], d[MXN<<2];
#define ls p<<1
#define rs p<<1|1
	inline void pushdown(int p) {
		d[ls] = add(d[ls], d[p]);
		v[ls] = add(v[ls], d[p]);
		d[rs] = add(d[rs], d[p]);
		v[rs] = add(v[rs], d[p]);
		d[p] = 0;
	}
	void bd(int l, int r, int p = 1) {
		ll[p] = l, rr[p] = r;
		if (l == r) return ;
		int mid = (l + r) >> 1;
		bd(l, mid, ls);
		bd(mid+1, r, rs);
	}
	void md(int l, int r, int val, int p = 1) {
		if (l > rr[p] || r < ll[p]) return ;
		if (l <= ll[p] && rr[p] <= r) { 
			v[p] = add(v[p], val);
			d[p] = add(d[p], val);
			return ;
		}
		pushdown(p);
		md(l, r, val, ls);
		md(l, r, val, rs);
		v[p] = add(v[ls], v[rs]);
	}
	int qy(int pp, int p = 1) {
		if (ll[p] == rr[p]) {
			return v[p];
		}
		pushdown(p);
		int mid = (ll[p] + rr[p]) >> 1;
		if (pp <= mid) return qy(pp, ls);
		else return qy(pp, rs);
	}
} lsum, rsum;
int main() {
	int n; scanf("%d", &n);
	for (int i = 1; i <= n; i++) {
		scanf("%lld", a + i);
		b[i] = {a[i], i};
	}
	lsum.bd(1, n);
	rsum.bd(1, n);
	sort(b + 1, b + n + 1);
	int ans = 0;
	for (int i = 1; i <= n; i++) {
		int p = b[i].S;
		int v = p*1ll*(n-p+1)%mod;
		v = add(v, lsum.qy(p)*1ll*(n-p+1)%mod);
		v = add(v, rsum.qy(p)*1ll*p%mod);
		ans = add(ans, v*1ll*b[i].F%mod);
		rsum.md(1, p, n-p+1);
		lsum.md(p, n, p); 
	}
	printf("%d\n", ans);
	return 0;
}
