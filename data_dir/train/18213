#include <bits/stdc++.h>
using namespace std;
typedef tuple<int,int,int> i3;
typedef pair<int,int> ii;
typedef vector<ii> vii;

vector<vii> adj;
int dist[100005], a[100005], b[100005], c[100005];
vector<i3> aresta;


int main(){
    
    int n, m, s; scanf("%d %d %d", &n, &m, &s);
    adj.assign(n+5, vii());
    
    for(int i = 0; i < m; i++){
        int u, v, w; scanf("%d %d %d", &u, &v, &w);
        a[i] = u; b[i] = v; c[i] = w;
        adj[u].push_back({v,w});
        adj[v].push_back({u,w});
    }

    int k; scanf("%d", &k);

    for(int i = 0; i <= n; i++)
        dist[i] = 1e9+5;
    priority_queue<ii, vector<ii>, greater<ii> > pq; pq.push(ii(0, s));
    dist[s] = 0;
    while(!pq.empty()){
        ii f = pq.top(); pq.pop();
        int w = f.first, u = f.second;
        //printf("%d %d\n", w, u);
        if(w > dist[u]) continue;
        for(ii par : adj[u]){
            int v = par.first, peso = par.second;
            if(w+peso < dist[v]){
                dist[v] = w+peso;
                pq.push({dist[v], v});
            }
        }
    }


    
    int res = 0;    
    for(int i = 1; i <= n; i++)
        if(dist[i] == k)
            res++;

    for(int i = 0; i < m; i++){
        int u = a[i], v = b[i], w = c[i];
        int s1 = -1, s2 = -1;



        if(dist[u] < k and dist[u]+w > k and w-(k-dist[u])+dist[v] >= dist[u]+(k-dist[u]) )
            s1 = k-dist[u];
        if(dist[v] < k and dist[v]+w > k and dist[u]+w-(k-dist[v]) >= dist[v]+(k-dist[v] ))
            s2 = w-(k-dist[v]);
        if(s1 >= 0) res++;
        if(s2 >= 0) res++;
        if(s1 >= 0 and s2 >= 0 and s1 == s2) res--;
        // O---|s1|-----|s2|---O
    }

    printf("%d\n", res);
    return 0;
}