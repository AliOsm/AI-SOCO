#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
 
using namespace std;
using namespace __gnu_pbds;
 
#define debug(s) cerr << #s << " = " << s << '\n'
#define all(v) (v).begin(), (v).end()
#define mem(a,val) memset(a, val, sizeof a)
 
#define maxn 100010
#define INF 1e15
#define eps 1e-9
#define pi acos(-1.0)
#define ff first
#define ss second
#define endl '\n'
typedef long long ll;
 
//typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

int n, m;
char g[70][70];
int cntc[70][70], cntr[70][70];

bool check0() {
  for (int i = 1; i <= n; ++i) {
    if (cntr[i][m] != m) return false;
  }
  return true;
}

bool check1() {
  if (cntr[1][m] == m || cntr[n][m] == m) return true;
  if (cntc[n][1] == n || cntc[n][m] == n) return true;
  return false;
}

bool check2() {
  if (g[1][m] == 'A' || g[n][1] == 'A' || g[1][1] == 'A' || g[n][m] == 'A') return true;
  for (int i = 1; i <= n; ++i) {
    if (cntr[i][m] == m) return true;
  }
  for (int i = 1; i <= m; ++i) {
    if (cntc[n][i] == n) return true;
  }
  return false;
}

bool check3() {
  for (int i = 1; i <= n; ++i) {
    if (g[i][1] == 'A' || g[i][m] == 'A') return true;
  }
  for (int i = 1; i <= m; ++i) {
    if (g[1][i] == 'A' || g[n][i] == 'A') return true;
  }
  return false;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int tc;
  cin >> tc;
  while (tc--) {
    cin >> n >> m;
    bool flag = false;
    for (int i = 1; i <= n; ++i) {
      for (int j = 1; j <= m; ++j) {
        cin >> g[i][j];
        if (g[i][j] == 'A') flag = true;
      }
    }
    for (int i = 1; i <= n; ++i) {
      for (int j = 1; j <= m; ++j) {
        cntr[i][j] = cntr[i][j - 1] + (g[i][j] == 'A');
      }
    }
    for (int j = 1; j <= m; ++j) {
      for (int i = 1; i <= n; ++i) {
        cntc[i][j] = cntc[i - 1][j] + (g[i][j] == 'A');
      }
    }
    if (!flag) {
      cout << "MORTAL" << endl;
      continue;
    }
    if (check0()) {
      cout << 0 << endl;
      continue;
    }
    if (check1()) {
      cout << 1 << endl;
      continue;
    }
    if (check2()) {
      cout << 2 << endl;
      continue;
    }
    if (check3()) {
      cout << 3 << endl;
      continue;
    }
    else {
      cout << 4 << endl;
      continue;
    }
  }
}