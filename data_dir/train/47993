/* practice with Dukkha */
#include <stdio.h>

#define N	100000
#define LT(u, v) (xx[u] < xx[v])

int xx[N + N], pq[1 + N + N], iq[N + N], cnt;

int i2(int i) {
	return (i *= 2) > cnt ? 0 : i < cnt && LT(pq[i + 1], pq[i]) ? i + 1 : i;
}

void pq_up(int u) {
	int i, j;

	for (i = iq[u]; (j = i / 2) && LT(u, pq[j]); i = j)
		pq[iq[pq[j]] = i] = pq[j];
	pq[iq[u] = i] = u;
}

void pq_dn(int u) {
	int i, j;

	for (i = iq[u]; (j = i2(i)) && LT(pq[j], u); i = j)
		pq[iq[pq[j]] = i] = pq[j];
	pq[iq[u] = i] = u;
}

void pq_add(int x) {
	static int u;

	xx[u] = x;
	iq[u] = ++cnt;
	pq_up(u);
	u++;
}

int pq_first() {
	return xx[pq[1]];
}

void pq_remove_first() {
	int v = pq[cnt--];

	iq[v] = 1;
	pq_dn(v);
}

int main() {
	static char tt[N * 3];
	static int aa[N * 3];
	int n, k, i;

	scanf("%d", &n);
	k = 0;
	while (n--) {
		static char cc[16];
		int x, y;

		scanf("%s", cc);
		if (cc[0] == 'i') {
			scanf("%d", &x);
			tt[k] = 'i', aa[k] = x, k++, pq_add(x);
		} else if (cc[0] == 'g') {
			scanf("%d", &x);
			while (cnt && (y = pq_first()) < x)
				tt[k] = 'r', k++, pq_remove_first();
			if (!cnt || (y = pq_first()) > x)
				tt[k] = 'i', aa[k] = x, k++, pq_add(x);
			tt[k] = 'g', aa[k] = x, k++;
		} else {
			if (cnt == 0) {
				x = 0;
				tt[k] = 'i', aa[k] = x, k++, pq_add(x);
			}
			tt[k] = 'r', k++, pq_remove_first();
		}
	}
	printf("%d\n", k);
	for (i = 0; i < k; i++)
		if (tt[i] == 'i')
			printf("insert %d\n", aa[i]);
		else if (tt[i] == 'g')
			printf("getMin %d\n", aa[i]);
		else
			printf("removeMin\n");
	return 0;
}
