#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

int N;
int p[1010];
bool last[1010];
vector <int> v;
bool dp[1010][1010];

int main(void){
    int x,i,j;
    
    cin >> N >> x;
    x--;
    REP(i,N){
        cin >> p[i];
        p[i]--;
    }
    
    REP(i,N) last[i] = true;
    REP(i,N) if(p[i] != -1) last[p[i]] = false;
    
    REP(i,N) if(last[i]){
        int y = i;
        int cnt = 0;
        bool found = false;
        while(1){
            cnt++;
            if(y == x) found = true;
            y = p[y];
            if(y == -1) break;
        }
        if(!found) v.push_back(cnt);
    }
    
    int d = 0;
    int tmp = x;
    while(1){
        d++;
        tmp = p[tmp];
        if(tmp == -1) break;
    }
    
    dp[0][0] = true;
    int sz = v.size();
    REP(i,sz) REP(j,N+1) if(dp[i][j]) dp[i+1][j] = dp[i+1][j+v[i]] = true;
    
    REP(i,N+1) if(dp[sz][i]) cout << d + i << endl;
    
    return 0;
}
