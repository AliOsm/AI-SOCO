#include<bits/stdc++.h>
using namespace std;
#define fr first
#define sc second
typedef long long ll;
typedef double ld;
typedef pair<int,int> p2;
typedef pair<ll,p2> p3;
typedef vector<int> vi;
const ll Mod = 7 + 1e9;
const ll INF32 = 5 + 2e9;
const ll INF64 = 1 + 1e15;
const ll MAX = 5+ 2e3;

int N,M[MAX][MAX],T[MAX][MAX];
vi G[MAX];

void DFS(int u,int pre,int s,int dis)
{
    T[s][u] = dis;
    for(auto v : G[u])
        if( v != pre )
            DFS(v,u,s,dis + M[u][v]);
}
priority_queue<p3,vector<p3>,greater<p3>> q;
bool vis[MAX];
int main()
{
    cin >> N;
    for(int i=1; i<=N; i++)
        for(int j=1; j<=N; j++)
            scanf("%d",&M[i][j] );
    for(int i=1; i<=N; i++)
    {
        bool ok = 1;
        for(int j=1; j<=N; j++)
            if( M[i][j] != M[j][i] || (i!=j && M[i][j] == 0) )
            {
                ok = 0;
                break;
            }
        if( !ok || M[i][i] != 0 )
        {
            cout << "NO" << endl;
            return 0;
        }
    }
    for(int i=2;i<=N;i++)
        q.push(p3(M[1][i] ,p2(i,1)));
    vis[1] = 1;
    while( !q.empty() )
    {
        int cur = q.top().sc.fr;
        int pre = q.top().sc.sc;
        q.pop();
        if( vis[cur] )
            continue;
        vis[cur] = 1;
        G[pre].push_back(cur);
        G[cur].push_back(pre);
        for(int i = 1; i<=N; i++)
            if( !vis[i] )
                q.push(p3(M[cur][i],p2(i,cur)));
    }
    for(int i=1;i<=N;i++)
        DFS(i,i,i,0);
    bool ok = 1;
    for(int i=1;i<=N;i++)
        for(int j=1;j<=N;j++)
        if( M[i][j] != T[i][j] )
    {
        ok = 0;
        break;
    }
    cout << (ok ? "YES" : "NO") << endl;
    return 0;
}
