#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>

#define f first
#define s second

#define pb push_back
#define pp pop_back
#define mp make_pair

#define sz(x) (int)x.size()
#define sqr(x) ((x) * 1ll * (x))
#define all(x) x.begin(), x.end()

#define rep(i, l, r) for (int i = l; i <= r; i++)
#define per(i, l, r) for (int i = l; i >= r; i--)

#define dbg(x) cerr << (#x) << " --> " << (x) << nl;
#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);

#define nl '\n'
#define ioi exit(0);

#define Toktama ""

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
typedef tree < pair <int, int>, null_type, less < pair <int, int> >, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int N = 2e5 + 7, inf = 1e9 + 7, mod = 1e9 + 7;
const ll linf = (ll)1e18 + 7;
const int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1}, dy[] = {0, 1, 0, -1, 1, -1, 1, -1};

int t = 1;
ll x, y, p, q;

bool check(ll mid) {
  if (p * mid >= x && q * mid >= y) {
    ll mx = p * mid, my = q * mid;
    ll mn = mx - x;
    if (y + mn <= my) return 1;
    return 0;
  }
  else return 0;
}
void solve() {
  cin >> x >> y >> p >> q;
  ll l = 1, r = min(linf / max(1ll, p), linf / max(1ll, q)), ans = -1;
  while (l <= r) {
    ll mid = (l + r) / 2;
    if (check(mid)) ans = mid, r = mid - 1;
    else l = mid + 1;
  }
  if (ans == -1) cout << ans << nl;
  else {
    ll mx = p * ans, my = q * ans;
    cout << max(mx - x, my - y) << nl;
  }
}
int main() {
  #ifndef Toktama
    freopen (Toktama".in", "r", stdin);
    freopen (Toktama".out", "w", stdout);
  #endif
  Kazakhstan
  cin >> t;
  while (t--)
    solve();
  ioi
}
