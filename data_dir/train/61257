#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>

#define ld long double
#define pb push_back
#define ll long long
#define f first
#define s second
#define pp pop_back
#define prev prowedwyi
#define mp make_pair

using namespace std;

const int N = 2e5 + 123;
const int L = 11;
const int MAX = 20;
const int mod = 1e9 + 7;
const int inf = 1e9;

void add(int &a, int b) {
  a += b;
  if (a >= mod) a %= mod;
}

int sum(int a, int b) {
  add(a, b);
  return a;
}

int mult(int a, int b) {
  return 1ll * a * b % mod;
}


string s;
int dp[N];
int n;

void solve() {
  cin >> s;
  n = s.size();
  int pref = 0;
  int answer = 0;
  for (int i = 0;i < n;i++) {
    dp[i] = 1;
    if (i > 0 && s[i] != s[i - 1]) dp[i] += dp[i - 1];
    if (dp[i] == i + 1) pref = max(pref, i + 1);
    answer = max(answer, dp[i]);
  }
  //cout << pref << " " << dp[n - 1] << endl;
  if (s[0] != s[n - 1]) answer = max(answer, pref + dp[n - 1]);
  if (answer > n) answer = n;
  cout << answer << endl;
}

int main() {
  ios_base::sync_with_stdio();
  #ifdef wws
    freopen("input", "r", stdin);
    freopen("output", "w", stdout);
  #endif
//  cout << "here\n";
  int test = 1;
  while(test--) {
    solve();
  }
  return 0;	
}


