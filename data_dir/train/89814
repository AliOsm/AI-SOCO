#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 100000 + 10;
const int M = 1000000007;
const double eps = 1e-9;
const double PI = acos(-1);
const int oo = 1000000000;
#define pb push_back
int n,rm[N];
vector<pair<int, int>> an;
struct point{
	int x,y,z,idx;
	void sc(int i){
		idx=i;
		scanf("%d%d%d",&x,&y,&z);
	}
	bool operator<(const point&e)const{
		if(x-e.x)
			return x<e.x;
		if(y-e.y)
			return y<e.y;
		return z<e.z;
	}
};
point v[N];
vector<point> lfX;

void solveX(int l, int r){
	vector<point> lf;
	for(int i=l; i<r; ++i){
		int j=i;
		while(j<r && v[i].y == v[j].y)
			++j;
		for(int t=i+1; t<j; t+=2)
			an.push_back({v[t-1].idx, v[t].idx});
		if((j-i)%2)
			lf.push_back(v[j-1]);
		i=j-1;
	}
	for(int i=1; i<lf.size(); i+=2)
		an.push_back({lf[i-1].idx, lf[i].idx});
	if(lf.size()&1)
		lfX.push_back(lf.back());
}

int main(){
	cin>>n;
	for(int i=0; i<n; ++i)
		v[i].sc(i+1);
	sort(v,v+n);
	for(int i=0; i<n; ++i){
		int j=i;
		while(j<n && v[j].x == v[i].x)
			++j;
		solveX(i,j);
		i=j-1;
	}
	assert(lfX.size()%2 == 0);
	for(int i=1; i<lfX.size(); i+=2)
		an.push_back({lfX[i-1].idx, lfX[i].idx});
	assert(an.size() == n/2);
	for(int i=0; i<n/2; ++i)
		printf("%d %d\n", an[i].first, an[i].second);
	return 0;
}