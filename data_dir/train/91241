#include <bits/stdc++.h> 
#include <complex>
#include <bitset>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
#include <chrono>
#include <random>
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define MOD 1000000007
#define MOD2 1000000009
#define INF 2000000000
#define DESPACITO 1000000000000000
#define PI acos(-1)
#define E 998244353
#define pb push_back
#define mp make_pair
#define double long double
#define pdd pair<double,double>
#define ll long long
 
using namespace std;

//using namespace __gnu_pbds;
 
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;

int minim = INF,maxim = 0;
int n,m;

vector<int>adj[200001];
bool visited[200001];
map<int,int>diff;

void dfs(int node)
{
    visited[node] = true;
    minim = min(minim,node);
    maxim = max(maxim,node);
    for(auto it:adj[node])
    {
        if(!visited[it])
            dfs(it);
    }
}

int main()
{
    IOS;
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    cin >> n >> m; 
    REP(i,1,m)
    {
        int u,v;
        cin >> u >> v;
        adj[u].pb(v);
        adj[v].pb(u);
    }
    REP(i,1,n)
    {
        if(!visited[i])
        {
            minim = INF;
            maxim = 0;
            dfs(i);
            diff[minim] = maxim;
        }
    }
    int ct  = 0;
    while(!diff.empty())
    {
        int l = (*diff.begin()).first;
        int r = (*diff.begin()).second;
        diff.erase(diff.begin());
        while((!diff.empty()) && ((*diff.begin()).first < r))
        {
            r = max(r, (*diff.begin()).second);
            diff.erase(diff.begin());
            ct++;
        }
    }
    cout << ct;
}   

