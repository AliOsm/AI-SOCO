#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define boost() ios_base :: sync_with_stdio(0); cin.tie(); cout.tie(); cout << fixed; cout << setprecision(15); srand(time(NULL))
#define endl '\n'
typedef long long ll;
const int _N = 5e4 + 11;
const ll INF = 1e18;
const ll MOD = 1e9 + 7;
const double EPS = 1e-5;

int n, k, dp[_N][3], memo[_N][505];
vector <int> adj[_N]; 

void dfs(int v, int p) {
	memo[v][0] = 1;
	for (auto x : adj[v]) {
		if (x == p) continue;
		dfs(x, v);
		for (int i = 1; i <= 500; i++) {
			memo[v][i] += memo[x][i - 1];
		}
	}
}

void solve(int v, int p) {
	dp[v][1] = memo[v][k];
	for (auto x : adj[v]) {
		if (x == p) continue;
		solve(x, v);
		dp[v][0] += (dp[x][1] + dp[x][0]);
	}
	for (int i = 1; i < k; i++) {
		int sum = 0;
		for (auto x : adj[v]) {
			if (x == p) continue;
			sum += memo[x][k - i - 1];
			dp[v][1] += (memo[x][i - 1] * (memo[v][k - i] - sum));
		}
	}
}

int main() {
	boost();
//	freopen("in", "r", stdin);
	cin >> n >> k;
	for (int i = 1; i < n; i++) {
		int u, v;
		cin >> u >> v;
		adj[v].pb(u);
		adj[u].pb(v);
	}
	dfs(1, 0);
	solve(1, 0);	
	cout << dp[1][0] + dp[1][1] << endl;
	return 0;
}
