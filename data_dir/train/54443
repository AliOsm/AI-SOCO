#include <bits/stdc++.h>

#define rep(i, n) for (int i = 0; i < (n); i++)
#define repr(i, n) for (int i = (n) - 1; i >= 0; i--)

using namespace std;
using ll = long long;

int main() {
  cin.tie(nullptr); ios::sync_with_stdio(false);
  int n; cin >> n;
  vector<vector<int>> g(n, vector<int>(n));
  vector<vector<int>> d(n, vector<int>(n));
  rep(i, n) {
    string s; cin >> s;
    rep(j, n) {
      g[i][j] = s[j] == '1';
      d[i][j] = g[i][j] ? 1 : (int)1e9;
    }
    d[i][i] = 0;
  }
  rep(k, n) rep(i, n) rep(j, n) d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
  int m; cin >> m;
  vector<int> P(m); rep(i, m) cin >> P[i], P[i]--;
  vector<int> l(m), r(m);
  for (int i = 0; i < m; i++) {
    l[i] = i - 1;
    r[i] = i + 1;
  }
  queue<int> q;
  for (int i = 1; i < m - 1; i++) {
    q.push(i);
  }
  vector<bool> removed(m);
  while (!q.empty()) {
    int i = q.front(); q.pop();
    if (i == 0 || i == m - 1) continue;
    if (removed[i]) continue;
    int x = l[i];
    int y = r[i];
    if (d[P[x]][P[y]] == d[P[x]][P[i]] + d[P[i]][P[y]]) {
      r[x] = y;
      l[y] = x;
      q.push(x);
      q.push(y);
      removed[i] = true;
    }
  }
  vector<int> ans;
  int i = 0;
  ans.push_back(i);
  while (i != m - 1) {
    i = r[i];
    ans.push_back(i);
  }
  cout << ans.size() << endl;
  for (int x : ans) cout << P[x]+1 << ' ';
  cout << endl;
}