#pragma GCC target("avx2")
#pragma GCC optimize("O3")
 
#include <x86intrin.h>
#include <bits/stdc++.h>   
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;

template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair                                     
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)3e5 + 123;
const ll inf = (ll)1e18 + 1;

const double pi = acos (-1.0);
const double eps = 1e-7;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};

int n, L, R;

inline int get (int l, int r) {
   return r * (r + 1) / 2 - l * (l - 1) / 2;
}  

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     

inline void Solve () {
   cin >> n >> L >> R;
   if (L == n * (n - 1) + 1) {
      cout << 1 << endl;
      return;
   }
   int l = 1, r = n;
   int st1 = -1, st2 = -1;
   while (l <= r) {
      int mid = l + r >> 1;
      int l1 = get (n - (mid - 1), n - 1) * 2 + 1, r1 = l1 + (n - mid) * 2 - 1; 
      if (l1 <= L && L <= r1) {
         st1 = mid;
         r = mid - 1;
      }
      else if (r1 < L) l = mid + 1;
      else r = mid - 1;
   }
   if (st1 == -1) assert (0);
   int has = R - L + 1;
   L -= get (n - (st1 - 1), n - 1) * 2;
   st2 = st1 + 1 + L / 2;
   if (L % 2 == 0) {
      if (st1 >= st2 - 1) cout << n << ' ';
      else cout << st2 - 1 << ' ';
      has --;
   }
   while (has > 1) {
      if (st2 == n + 1) st1 ++, st2 = st1 + 1;
      cout << st1 << ' ' << st2 << ' ';
      st2 ++;
      has -= 2;
   }
   if (st2 == n + 1) st1 ++, st2 = st1 + 1;
   if (has == 1) {       
      if (st1 == n && st2 == n + 1) cout << 1 << ' ';
      else cout << st1 << ' ';
   }
   cout << endl;

}

main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
   cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
