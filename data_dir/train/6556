#include<algorithm>
#include<iostream>
#include<cstring>
#include<stdio.h>
#include<math.h>
#include<cstring>
#include<cstdio>
#include<vector>
#include<bitset>
#include<string>
#include<cmath>
#include<queue>
#include<tuple>
#include<stack>
#include<map>
#include<set>

#define tp tuple<int , int, int>
#define pii pair<int, int>
#define mt make_tuple
#define mk make_pair
#define pb push_back

#define MOD 1000000007
#define INF 10000000
#define MAX 200005

#define white 0
#define grey 1
#define black 2

typedef long double ld;
typedef long long ll;

const long double eps = 1e-8;
const long double pi = acos(-1);

using namespace std;
char temp[MAX];
int ar[] = {0, 0, -1, 1, 1, 1, -1, -1};
int ac[] = {-1, 1, 0, 0, 1, -1, -1, 1};

int n, m;
vector<vector<int>> grid;
int vis[MAX];
int mx1[MAX], mx2[MAX];

int main() {
#ifndef ONLINE_JUDGE
freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
#endif // ONLINE_JUDGE
ios_base::sync_with_stdio(false);

    cin >> n >> m;
    grid.assign(n + 5, vector<int> (m + 5));
    vector<pii> ve;

    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            cin >> grid[i][j];

    for(int c = 0; c < m; c++) {
        int cur = 0;
        for(int r = 1; r < n; r++) {
            if(grid[r][c] < grid[r - 1][c]) {
                ve.pb(mk(cur, r - 1));
                cur = r;
            }
        }
        ve.pb(mk(cur, n - 1));
    }

    sort(ve.begin(), ve.end());

    int col = 1;
    for(auto x : ve) {
        mx1[x.first] = max(mx1[x.first], x.second);
    }

    set<int> se;

    for(auto x : ve)
        se.insert(x.first);

    for(auto &x : se) {
        auto it = se.lower_bound(x);
        if(it != se.begin()) {
            it--;
            mx1[x] = max(mx1[*it], mx1[x]);
        }
    }

    int q; cin >> q;

    for(int i=0; i<q; i++) {
        int l, r; cin >> l >> r;
        l--, r--;

        if(l == r) {
            cout << "Yes\n";
            continue;
        }
        auto it = se.upper_bound(l);
        if(it != se.begin()) {
            it--;
            if(mx1[*it] >= r) {
                cout << "Yes\n";
                continue;
            }
        }
        cout << "No\n";
    }

    return 0;
}













