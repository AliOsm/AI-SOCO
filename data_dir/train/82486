#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define ll long long
#define ld long double
#define all(a) a.begin(),a.end()
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define ull unsigned long long
#define endl '\n'
#define int long long
#define iter vector<int>::iterator
using namespace std;
using namespace __gnu_pbds;

template<class T>
using ordered_set=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

template<class T>
using ordered_multiset=tree<T,null_type,less_equal<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rnd1(chrono::steady_clock::now().time_since_epoch().count());

//find_by_order
//order_of_key

const int N=1e5+7;
const int inf=1e18+5;
const int mod=1e9+7;

vector< pair<int,int> >g[N];
vector<int>bit[N];
vector<int>v1;
vector< pair<int,int> >qq;
int d[N];
int a[N];

void del_edge(int u,int v)
{
    for (int i=0;i<g[u].size();++i){
        int to=g[u][i].ff;
        if (to==v){
            g[u][i].ss=0;
        }
    }
    for (int i=0;i<g[v].size();++i){
        int to=g[v][i].ff;
        if (to==u){
            g[v][i].ss=0;
        }
    }
}

void add_edge(int v,int u)
{
    for (int i=0;i<g[u].size();++i){
        int to=g[u][i].ff;
        if (to==v){
            g[u][i].ss=1;
        }
    }
    for (int i=0;i<g[v].size();++i){
        int to=g[v][i].ff;
        if (to==u){
            g[v][i].ss=1;
        }
    }
}

int find_dist(int s,int t)
{
    for (int i=0;i<v1.size();++i){
        int v=v1[i];
        d[v]=inf;
    }
    d[s]=0;
    deque<int>q;
    q.pb(s);
    while(q.size()>0){
        int v=q.front();
        q.pop_front();
        for (int i=0;i<g[v].size();++i){
            int to=g[v][i].ff;
            bool can=g[v][i].ss;
            if (!can)continue;
            if (d[to]==inf){
                d[to]=d[v]+1;
                q.pb(to);
            }
        }
    }
    return d[t];
}

main ()
{
    ios;
    int n;
    cin>>n;
    for (int i=1;i<=n;++i){
        cin>>a[i];
        for (int j=0;j<60;++j){
            if ((a[i]&(1LL<<j))>0){
                bit[j].pb(i);
            }
        }
    }
    for (int i=0;i<60;++i){
        if (bit[i].size()>2){
            cout<<3<<endl;
            exit(0);
        }
        if (bit[i].size()==2){
            for (int j=0;j<bit[i].size();++j){
                v1.pb(bit[i][j]);
            }
            g[bit[i][0]].pb({bit[i][1],1});
            g[bit[i][1]].pb({bit[i][0],0});
            qq.pb({bit[i][0],bit[i][1]});
        }
    }
    int ans=inf;
    for (int i=0;i<qq.size();++i){
        int x=qq[i].ff;
        int y=qq[i].ss;
        del_edge(x,y);
        ans=min(ans,find_dist(x,y));
        add_edge(x,y);
    }
    if (ans==inf){
        cout<<-1<<endl;
    }
    else {
        cout<<ans+1<<endl;
    }
}
