#include <bits/stdc++.h>

#define all(x) (x).begin(), (x).end()

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 153;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 30343;
const int K = 205;

int a[N];

int f[K][2][3][3];//pos, k, in, bef, aft
int nf[K][2][3][3];//pos, k, in, bef, aft

void init(int f[K][2][3][3]){
    for(int j = 0; j < K; j++)
        for(int in = 0; in < 2; in++)
            for(int a = 0; a < 3; a++)
                for(int b = 0; b < 3; b++)
                    f[j][in][a][b] = -inf;
}

void pass(){
    for(int j = 0; j < K; j++)
        for(int in = 0; in < 2; in++)
            for(int a = 0; a < 3; a++)
                for(int b = 0; b < 3; b++)
                    f[j][in][a][b] = nf[j][in][a][b];
}

inline int get(int i,int bef,int aft){
    int res = 0;
    if(bef != 2) res += (bef == 0)? -a[i] : a[i];
    if(aft != 2) res += (aft == 0)? -a[i] : a[i];
    return res;
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    int n = read();
    int need = read();

    for(int i = 1; i <= n; i++){
        a[i] = read();
    }

    init(f);

    int ans = 0;
    f[0][0][2][0] = 0;
    for(int i = 1; i <= n; i++){
        init(nf);
        for(int k = 0; k <= need; k++){
            //in
            for(int bef = 0; bef < 3; bef++){
                for(int aft = 0; aft < 3; aft++){
                    int fnow = f[k][1][bef][aft];
                    if(fnow == -inf) continue;
                    umax(nf[k][1][bef][aft], fnow + get(i, bef, aft));
                    if(aft < 2){
                        umax(nf[k][0][aft ^ 1][0], fnow);
                        for(int naft = 0; naft < 3; naft++)
                            umax(nf[k + 1][1][aft ^ 1][naft], fnow + get(i, aft ^ 1, naft));
                    }
                }
            }
            //out
            for(int bef = 0; bef < 3; bef++){
                int fnow = f[k][0][bef][0];
                if(fnow == -inf) continue;
                umax(nf[k][0][bef][0], fnow);
                for(int naft = 0; naft < 3; naft++){
                    umax(nf[k + 1][1][bef][naft], fnow + get(i, bef, naft));
                }
            }
        }
        pass();
        for(int bef = 0; bef < 3; bef++)
            umax(ans, f[need][1][bef][2]);
    }
    printf("%d\n", ans);

    return 0;
}
