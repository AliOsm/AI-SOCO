#include <iostream>
#include <cstdlib>
#include <vector>

using namespace std;

const int limit=1000000;

int m,k,n,s;
int a[limit];
int required[limit];
int having[limit];
int isol,jsol;
int keep[limit];
vector<int> sol;

int main()
{
  ios::sync_with_stdio(false);
  cin>>m>>k>>n>>s;
  for (int i=1;i<=m;i++)
    cin>>a[i];
  for (int i=1;i<=s;i++) {
    int b;
    cin>>b;
    required[b]++;
  }
  int ind=0;
  int ind2=0;
  int pending=s;
  for (int i=1;i+k-1<=m;i++) {
    while (ind<m and pending) {
      ind++;
      int x=a[ind];
      having[x]++;
      if (required[x]>=having[x])
	pending--;
    }
    if (pending) break;
    ind2=max(ind,ind2);
    while (ind2<m and ind2-i+1<k) ind2++;
    if (ind2-i+1<k) break;
    if ((i-1)/k+1+(m-ind2)/k>=n) {
      isol=i;
      jsol=ind2;
      break;
    }
    int x=a[i];
    having[x]--;
    if (required[x]>having[x])
      pending++;
  }
  if (isol==0) {
    cout<<-1<<endl;
    exit(0);
  }
  //cout<<"isol "<<isol<<" jsol "<<jsol<<endl;
  int kept=0;
  for (int i=isol;i<=jsol;i++) {
    int x=a[i];
    if (required[x]) {
      required[x]--;
      keep[i]=1;
      kept++;
    }
  }
  for (int i=isol;i<=jsol and kept<k;i++) {
    if (not keep[i]) {
      kept++;
      keep[i]=1;
    }
  }
  for (int i=isol;i<=jsol;i++)
    if (not keep[i])
      sol.push_back(i);
  {
    int remove=isol-1-(isol-1)/k*k;
    for (int i=1;i<=remove;i++)
      sol.push_back(i);
  }
  cout<<int(sol.size())<<endl;
  for (int i=0;i<int(sol.size());i++) {
    if (i>0) cout<<" ";
    cout<<sol[i];
  }
  cout<<endl;
}
