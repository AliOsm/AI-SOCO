#include <bits/stdc++.h>
#define ll long long
#define pb push_back
#define endl '\n'
#define pii pair<ll,ll>
#define pll pair<ll,ll>
#define triple pair<ll, pair<ll,ll> >
#define mt(x,y,z) mp(x,mp(y,z))
#define mp make_pair
#define ff first
#define ss second
#define fir first
#define sec second.first
#define thi second.second
#define pi 3.141592653589793
#define eps 1e-6
#define MAX 500000
#define powerof2(x) ((x-1)|(x>>1))==x
ll inf = 1e18;
using namespace std;
string s[100];
int n;
int connected[105][105];
int m;

int main()
{
    ios::sync_with_stdio(0);


    cin>>n;
    for(int i=0;i<n;i++)
        cin>>s[i];

    for(int i=0;i<n;i++)
        m=max(m,int(s[i].size()));

    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            bool compared = false;
            for(int k=0;k<m;k++)
            {
                if(k>=int(s[i].size()) || k>=int(s[j].size()))
                    continue;
                if(s[i][k]==s[j][k])continue;
                connected[s[i][k]-'a'][s[j][k]-'a']=1;
                compared = true;
                break;
            }
            if(!compared && s[j].size()<s[i].size())
            {
                cout<<"Impossible\n";
                return 0;
            }
        }
    }
    string ans="abcdefghijklmnopqrstuvwxyz";
    for(int i=0;i<int(ans.size());i++)
    {
        for(int j=0;j<int(ans.size());j++)
        {
            for(int k=0;k<int(ans.size());k++)
            {
                for(int l=k+1;l<int(ans.size());l++)
                {
                    if(connected[ans[l]-'a'][ans[k]-'a'])
                        swap(ans[l],ans[k]);
                }
            }
        }
    }
    for(int i=0;i<int(ans.size());i++)
    {
        for(int j=i+1;j<int(ans.size());j++)
        {
            if(connected[ans[j]-'a'][ans[i]-'a'])
            {
                cout<<"Impossible\n";
                return 0;
            }
        }
    }
    cout<<ans<<endl;
    return 0;
}
