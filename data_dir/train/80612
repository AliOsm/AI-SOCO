#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long ll;

const int MOD = 1000000007;
const int MAXN = 100010;

int fact[MAXN];
int x(int a, int b) {
    return ll(a) * b % MOD;
}
int power(int n, int k) {
    int mult = 1;
    int pow = n;
    while (k) {
        if (k % 2) {
            mult = x(mult, pow);
        }
        pow = x(pow, pow);
        k /= 2;
    }
    return mult;
}
int inverse(int a) {
    return power(a, MOD - 2);
}
int choose(int n, int k) {
    if (k < 0 || k > n) return 0;
    return x(x(fact[n], inverse(fact[n - k])), inverse(fact[k]));
}

int mem[1024];
bool isLucky(int a) {
    while(a) {
        if (a % 10 != 4 && a % 10 != 7) return false;
        a /= 10;
    }
    return true;
}
int main() {
    fact[0] = 1;
    for (int i = 1; i < MAXN - 1; i++) {
        fact[i] = x(fact[i - 1], i);
    }
    
    int n, k;
    cin >> n >> k;
    
    vector<int> v;
    int rem = 0;
    for (int i = 0; i < n; i++) {
        int t;
        cin >> t;
        if (isLucky(t)) {
            v.push_back(t);
        } else {
            rem++;
        }
    }
    sort(v.begin(), v.end());
    mem[0] = 1;
    for (int i = 0; i < v.size();) {
        int cur = v[i];
        int cnt = 0;
        for (; i < v.size() && v[i] == cur; i++) {
            cnt++;
        }
        for (int j = 1023; j > 0; j--) {
            mem[j] += x(mem[j - 1], cnt);
            mem[j] %= MOD;
        }
    }
    int sum = 0;
    for (int i = 0; i < 1024; i++) {
        sum += x(mem[i], choose(rem, k - i));
        sum %= MOD;
    }
    cout << sum << endl;
}