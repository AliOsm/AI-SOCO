#include "bits/stdc++.h"
using namespace std;
int Array[400005] , Power[35] , Prefix[400005];

int DistinctElementCount( int N ){
    int i , Pre = -1;

    for( i = 1 ; i <= N ; ++i ){
        if( Array[i] != Pre ){ 
            Pre = Array[i];
            Prefix[i] = Prefix[i - 1] + 1;
        }
        else Prefix[i] = Prefix[i - 1];
    }

    return Prefix[N];
}

void PreProcessing(){
    Power[0] = 1;

    for( int i = 1 ; i <= 30 ; ++i )
        Power[i] = Power[i - 1] * 2;
}

int FindBitCount( int Value ){
    int i;

    for( i = 1 ; i <= 30 ; ++i ){
        if( Power[i] >= Value ) return i;
    }

    return 30;
}

int BinarySearch( int low , int high , int key , int start ){
    if( low >= high ) return low;
    else{
        int middle = ( low + high ) >> 1;
        if( Prefix[middle] - Prefix[start] > key ) return BinarySearch( low , middle - 1 , key , start );
        else return BinarySearch( middle + 1 , high , key , start );
    }
}

int FindAns( int N , int k ){
    int i , index , Ans = N + 1;
    Array[0] = -1;

    for( i = 1 ; i <= N ; ++i ){
        if( Array[i] != Array[i - 1] ){
            index = BinarySearch( i , N , k , i - 1 );
            if( Prefix[index] - Prefix[i - 1] > k ) --index;
            Ans = min( Ans , N - ( index - i + 1 ) );
        }
    }

    return Ans;
}

int main(){
    int N , I , i;     
    scanf( "%d%d" , &N , &I );
    
    for( i = 1 ; i <= N ; ++i )
        scanf( "%d" , Array + i );
    
    sort( Array + 1 , Array + N + 1 );
    PreProcessing();
    int distinct = DistinctElementCount( N );
    int ReqBits = N * FindBitCount( distinct );
    
    if( ReqBits <= I * 8 ){
        puts( "0" );
        return 0;
    }

    int ReqDistinct = Power[(I * 8) / N];
    printf( "%d\n" , FindAns( N , ReqDistinct ) );
    return 0;
}