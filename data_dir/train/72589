#include<bits/stdc++.h>
#define LL long long
#define fi first
#define se second
#define mk make_pair
#define PLL pair<LL, LL>
#define PLI pair<LL, int>
#define PII pair<int, int>
#define SZ(x) ((int)x.size())
#define ull unsigned long long

using namespace std;

const int N = 1e6 + 7;
const int inf = 0x3f3f3f3f;
const LL INF = 0x3f3f3f3f3f3f3f3f;
const int mod = 1000000007;
const double eps = 1e-6;
const double PI = acos(-1);

void add(int &a, int b) {
    a += b; if(a >= mod) a -= mod;
}

int Power(int a, int b) {
    int ans = 1;
    while(b) {
        if(b & 1) ans = 1LL * ans * a % mod;
        a = 1ll * a * a % mod; b >>= 1;
    }
    return ans;
}

int n, k, way, dp[N], prefix[N];
int F[N], Finv[N], inv[N], tmp, ans;

int comb(int n, int m) {
    if(n < m || n < 0) return 0;
    return 1ll * F[n] * Finv[m] % mod * Finv[n - m] % mod;
}

int main() {
    inv[1] = F[0] = Finv[0] = 1;
    for(int i = 2; i < N; i++) inv[i] = 1ll * (mod - mod / i) * inv[mod % i] % mod;
    for(int i = 1; i < N; i++) F[i] = 1ll * F[i - 1] * i % mod;
    for(int i = 1; i < N; i++) Finv[i] = 1ll * Finv[i - 1] * inv[i] % mod;
    scanf("%d%d", &n, &k);
    for(int i = 0; i <= k; i++) {
        dp[i] = F[i];
        prefix[i] = (prefix[i - 1] + 1ll * dp[i] * Finv[i] % mod) % mod;
    }
    for(int i = 0; i < k; i++) add(tmp, comb(k, i));
    for(int i = k + 1; i <= n; i++) {
        dp[i] = (prefix[i - 1] - prefix[i - k - 1] + mod) % mod;
        dp[i] = 1ll * dp[i] * F[i - 1] % mod;
        prefix[i] = (prefix[i - 1] + 1ll * dp[i] * Finv[i] % mod) % mod;
    }
    ans = F[n];
    add(ans, mod - dp[n]);
    for(int i = 1; i <= n - k; i++) {
        add(ans, mod - (1ll * comb(n - 1, i - 1) * dp[i - 1] % mod * F[n - i] % mod));
    }
    printf("%d\n", ans);
    return 0;
}

/*
*/
