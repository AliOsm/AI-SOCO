#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int maxn=1e6+7;
const int inf=INT_MAX;
const ll inff=1e18;
const ll mod=1e9+7;
#define pii pair<int,int>
#define mkp make_pair
#define F first
#define S second
#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define int ll

#ifdef HNO2
#define IOS
#else
#define endl '\n'
#define IOS ios::sync_with_stdio(0); cin.tie(0);
#endif // HNO2

int n,q,X,Y,w;
int p[maxn],siz[maxn];
vector<pair<int,pii> > v;
int ans[maxn];

int Find(int x)
{
    return p[x] == x ? x : p[x]=Find(p[x]);
}

void Union(int x,int y)
{
    //cout<<siz[Find(x)]<<' '<<siz[Find(y)]<<endl;
    if (siz[Find(x)]<siz[Find(y)])
    {
        siz[Find(y)]+=siz[Find(x)];
        p[Find(x)]=Find(y);
    }
    else
    {
        siz[Find(x)]+=siz[Find(y)];
        p[Find(y)]=Find(x);
    }
}

int32_t main()
{
    IOS
    cin>>n>>q;
    if (n==1)
    {
        for (int i=1;i<=q;i++) cout<<0<<endl;
        return 0;
    }
    for (int i=1;i<=n;i++) p[i]=i,siz[i]=1;
    for (int i=1;i<=n-1;i++)
    {
        cin>>X>>Y>>w;
        v.pb(mkp(w,mkp(X,Y)));
    }
    sort(all(v));
    int last=0;
    for (auto i:v)
    {
        ans[i.F]=ans[last]+(siz[Find(i.S.F)]*siz[Find(i.S.S)]);
        Union(i.S.F,i.S.S);
        last=i.F;
    }
    for (int i=1;i<=200000;i++)
    {
        if (ans[i]==0) ans[i]=ans[i-1];
    }
    while (q--)
    {
        cin>>X;
        cout<<ans[X]<<endl;
    }
}

