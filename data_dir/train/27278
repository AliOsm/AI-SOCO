#include <cstdio>
#include <iostream>
#include <sstream>
#include <cstdlib>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <cmath>
#include <algorithm>
#include <map>
#include <ctype.h>
#include <string.h>

#include <assert.h>

using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
typedef pair<PII, int> PII2;

template<class T1, class T2>
ostream& operator << (ostream &out, pair<T1, T2> pair) {
return out << "(" << pair.first << ", " << pair.second << ")"; }

#define DEBUGGER // show debugging message
#ifdef DEBUGGER // require C11 (g++ -O2 -std=gnu++0x -Wall -Wshadow)
template <class T>
void _printcoll (T const& coll){ int first = 1; cout << "[";
for (auto a : coll) { if (!first) printf(", "); cout << a; first = false; } cout << "]" << endl; }
template <class T>
void _printcoll (T const& coll, int len){ int first = 1; cout << "[";for (auto a : coll) {
if (!first) printf(", "); cout << a; first = false; len--; if (!len) break; } cout << "]" << endl; }
#define DBG(vari) cout<<#vari<<" = "<<(vari)<<endl;
#define DBGC(vari) cout<<#vari<<" = ";_printcoll(vari);
#define DBGCN(vari, len) cout<<#vari<<" = ";_printcoll(vari, len);
#else
#define DBG(vari)
#define DBGC(vari)
#define DBGCN(vari, len)
#endif

#define MAXN (100005)

int N;
bool used[MAXN];
bool not_primes[MAXN];
vector<PII> ans;
int main() {
    used[1] = true;
    scanf("%d", &N);

    for (int i = 2; i * i <= N; i++) {
        if (!not_primes[i]) {
            for (int j = i * 2; j <= N; j += i) {
                not_primes[j] = true;
            }
        }
    }

    for (int i = N; i >= 2; i--) {
        if (!not_primes[i]) {
            vector<int> temp;
            for (int j = i; j <= N; j += i) {
                if (!used[j]) {
                    temp.push_back(j);
                }
            }

            int sz = temp.size();
            if (sz % 2 == 0) {
                for (int j = 0; j < sz; j += 2) {
                    ans.push_back(PII(temp[j], temp[j + 1]));
                    used[temp[j]] = true;
                    used[temp[j + 1]] = true;
                }
            } else if (sz > 1) {
                for (int j = sz - 1; j > 2; j -= 2) {
                    ans.push_back(PII(temp[j], temp[j - 1]));
                    used[temp[j]] = true;
                    used[temp[j - 1]] = true;
                }
                ans.push_back(PII(temp[2], temp[0]));
                used[temp[0]] = true;
                used[temp[2]] = true;
            }
        }
    }


    int sz = ans.size();
    printf("%d\n", sz);
    for (int i = 0; i < sz; i++) {
        printf("%d %d\n", ans[i].first, ans[i].second);
    }

    
    return 0;
}
