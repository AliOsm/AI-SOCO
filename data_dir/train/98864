#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree =
//  tree<key, val, greater<>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//998244353;
const int base = 2187;
const double eps = 1e-8;
const int N = 400'001;
const int LOGN = 19;

int n, m, k;
int64 d[1 << 20];
int64 cost[20][20];

void solve(int test)
{
  cin >> n;
  vector<int> a(n);
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
    --a[i];;
  }
  for (int i = 0; i < 20; ++i) {
    for (int j = 0; j < 20; ++j) {
      int64 cnt = 0;
      for (int q = 0; q < n; ++q) {
        if (a[q] == i) {
          ++cnt;
        }
        if (a[q] == j) {
          cost[i][j] += cnt;
        }
      }
    }
  }
  for (int i = 0; i < (1 << 20); ++i) {
      d[i] = inf64;
  }
  d[0] = 0;
  for (int i = 0; i < (1 << 20); ++i) {
    for (int j = 0; j < 20; ++j) {
      if ((i >> j) & 1) {
        continue;
      }
      int64 add = 0;
      for (int q = 0; q < 20; ++q) {
        if ((i >> q) & 1) {
          add += cost[j][q];
        }
      }
      int to = i | (1 << j);
      d[to] = min(d[to], d[i] + add);
    }
  }
  cout << d[(1 << 20) - 1] << '\n';
}

void precalc()
{
}

int main()
{
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i)
    solve(i);
  //cerr << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count() << '\n';
  return 0;
}
