#include <iostream>
#include <ctime>
#include <iomanip>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
#include <cmath>
#include <set>
#include <unordered_set>
#include <unordered_map>
#include <chrono>
#include <stack>
#include <cassert>
#include <queue>
#include <deque>
#include <climits>
#include <cstring>
#include <random>
#include <bitset>

using namespace std;

typedef long long ll;

struct merge_sort_tree {
    int size;
    vector<vector<ll>> t;
    
private:
    
    void build(int v, int l, int r, const vector<ll> &a) {
        if (l + 1 == r) {
            t[v] = {a[l]};
        } else {
            t[v].resize(r - l);
            int m = (r + l) >> 1;
            build(2 * v + 1, l, m, a);
            build(2 * v + 2, m, r, a);
            merge(t[2 * v + 1].begin(), t[2 * v + 1].end(), t[2 * v + 2].begin(), t[2 * v + 2].end(), t[v].begin());
        }
    }
    
    int find_least(int v, int l, int r, int ql, int qr, ll x) {
        if (qr <= l || r <= ql) {
            return 0;
        } else if (ql <= l && r <= qr) {
            return t[v].end() - upper_bound(t[v].begin(), t[v].end(), x);
        } else {
            int m = (r + l) >> 1;
            auto f = find_least(2 * v + 1, l, m, ql, qr, x);
            auto s = find_least(2 * v + 2, m, r, ql, qr, x);
            return f + s;
        }
    }
    
public:
    
    merge_sort_tree (const vector<ll> &a) {
        size = (int)a.size();
        t.resize(4 * size);
        build(0, 0, size, a);
    }
    
    int find_least(int l, int r, ll x) {
        return find_least(0, 0, size, l, r, x);
    }
};

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    #ifdef LOCAL
    assert(freopen("input.txt", "r", stdin));
    assert(freopen("output.txt", "w", stdout));
    #endif
    
    int n;
    ll t;
    cin >> n >> t;
    vector<int> a(n);
    for (auto &t : a) {
        cin >> t;
    }
    vector<ll> p = {0};
    for (int i = 0; i < n; i++) {
        p.push_back(a[i] + p.back());
    };
    merge_sort_tree cur(p);
    ll res = 0;
    for (int i = 1; i <= n; i++) {
        res += cur.find_least(0, i, p[i] - t);
    }
    cout << res << endl;
}
