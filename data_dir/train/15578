#include <bits/stdc++.h>

//#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()

#define int long long
using namespace std;
const int INF = 2e9;
const int MOD = 1e9 + 7;
const int MB = 31;

void dfs(int v, vector<bool>& used, string& ans, vector<vector<bool>>& g) {
	ans.pb((char)(v + 'a'));
	used[v] = true;
	for (int i = 0; i < 26; i++) {
		if (g[v][i] && !used[i]) {
			dfs(i, used, ans, g);
		}
	}
}

void go() {
	vector<vector<bool>> g(26, vector<bool>(26));
	string s;
	cin >> s;
	for (int i = 0; i < s.size() - 1; i++) {
		int x = s[i] - 'a';
		int y = s[i + 1] - 'a';
		g[x][y] = g[y][x] = true;
	}

	for (int i = 0; i < 26; i++) {
		int cnt = 0;
		for (int j = 0; j < 26; j++) {
			if (g[i][j]) cnt++;
		}
		if (cnt > 2) {
			cout << "NO\n";
			return;
		}
	}

 	vector<bool> used(26);
	string ans;
	for (int i = 0; i < 26; i++) {
		int cnt = 0;
		for (int j = 0; j < 26; j++) {
			if (g[i][j]) cnt++;
		}
		if (cnt < 2 && !used[i]) {
			dfs(i, used, ans, g);
		}
	}
	
	if (ans.size() != 26) {
		cout << "NO\n";
		return;
	}

	for (int i = 0; i < ans.size(); i++) {
		int l = i ? ans[i - 1] - 'a' : -1;
		int r = i < ans.size() - 1 ? ans[i + 1] - 'a' : -1;
		int x = ans[i] - 'a';
		for (int j = 0; j < 26; j++) {
			if (g[x][j] && j != l && j != r) {
				cout << "NO\n";
				return;
			}
		}
	}
	cout << "YES\n" << ans << '\n';
}

void solve() {
	int t;
	cin >> t;
	for (int i = 0; i < t; i++) {
		go();
	}
}


signed main() {
	/*
	freopen("search.in", "r", stdin);
	freopen("search.out", "w", stdout);
	*/
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout << fixed;
	cout.precision(12);
	solve();
}