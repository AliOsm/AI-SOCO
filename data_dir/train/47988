#include<bits/stdc++.h>
using namespace std;

typedef long long int lli;
typedef unsigned long long int ulli;
typedef pair<int,int> pii;
typedef priority_queue< int, vector< int >, greater< int > >  minHeap;

#define ones(x) __builtin_popcount(x)
#define onesl(x) __builtin_popcountl(x)
#define onesll(x) __builtin_popcountll(x)

#define pb push_back
#define eb emplace_back
#define mp make_pair
#define mt make_tuple
#define scn(n) scanf("%d",&n)
#define scnll(n) scanf("%lld",&n)
#define scn2(n,m) scanf("%d%d",&n,&m)
#define scn3(n,m,w) scanf("%d%d%d",&n,&m,&w)
#define scn2ll(n,m) scanf("%lld%lld",&n,&m)
#define atoz(v) v.begin(),v.end()
#define ratoz(v) v.rbegin(),v.rend()
#define Fill(a,v) memset(a,v,sizeof(a))
#define fi first
#define se second
#define inf 1e9
#define pi acos(-1.0)
#define max3(a,b,c) max(a,max(b,c))
#define min3(a,b,c) min(a,min(b,c))
#define mod 1000000007
#define FastIO ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#define bug(x) cerr << __LINE__ << " says: " << #x << " = " << (x) << "\n"

int Set(int N,int pos)
{
    return N=N | (1<<pos);
}
int reset(int N,int pos)
{
    return N = N & ~(1<<pos);
}
bool check(int N,int pos)
{
    return (bool)(N & (1<<pos));
}


inline int addmod(int x,int y)
{
    return (x%mod + y%mod)%mod;
}
inline int submod(int x,int y)
{
    return (x%mod - y%mod + mod)%mod;
}
inline int mulmod(int x,int y)
{
    return (x%mod *1LL* y%mod)%mod;
}

inline int nextSubMask(int i, int mask)
{
    return (i-1)&mask;   /// returns next  submask
}

template<typename T>
void we_r_done(T mssg)
{
    cout<<mssg;
    exit(0);
}

int parent[3000004];
vector<pii>v;

int Find(int x)
{
    if(x==parent[x])return x;
    return parent[x]=Find(parent[x]);
}

bool solve(int n){

    pii E[n+n+3] , B[n+n+2];

    for(int i=1; i<=(n+n); i++) E[i] = B[i] = pii(-1,-1);

    int f = 1;
    set<pair<pii,int> >st;

    for(pii p : v){
        E[p.se] = {p.fi,f};
        B[p.fi] = {p.se,f};
        st.insert({p,f});
        f++;
    }

    for(int i=1; i<=(n+n); i++){
        if(E[i].fi == -1) continue;
        //cout<<E[i].fi<<" "<<i<<" "<<E[i].se<<endl;
        st.erase({pii(E[i].fi,i),E[i].se});
        //bug(2);
        auto it = st.lower_bound({pii(i,i),i});

        if(it != st.begin()) it--;
        else continue;
        //cout<<E[i].fi<<" "<<i<<endl;

        while(1){
            pair<pii,int> pp = *it;
            int y = pp.se;
            int x = E[i].se;
            //cout<<pp.fi.fi<<" "<<pp.fi.se<<" "<<E[i].fi<<endl;

            if(pp.fi.fi<E[i].fi) break;

            if(Find(y) == Find(x)) return 0;
            parent[ parent[x] ] = parent[y];
            //cout<<x<<" "<<y<<" xy"<<endl;

            if(it == st.begin()) break;
            it--;

        }
    }
    set<int>S;
    for(int i=1; i<=n; i++){
        S.insert(Find(i));
        if(S.size()>1) return 0;
    }
    return 1;
}

int main()
{
    ///freopen("output.txt","w",stdout);
    //freopen("input.txt","r",stdin);

    ///FastIO;
    int n;
    while(scn(n) == 1){
            v.clear();
        for(int i=1; i<=n; i++)
        {
            parent[i] = i;
            int x,y;
            scn2(x,y);
            v.pb({x,y});
        }
        if(solve(n)) printf("YES\n");
        else printf("NO\n");
    }

    return 0;

}

///sin and cos expect input in radians not degrees. so use , sin(degrees * pi / 180)
///using bs = bitset<MX>; // how many distinct number can be form?
///sort(atoz(v), [](const data x, const data y){return (x.a==y.a?x.b>y.b : x.a<y.a);});
