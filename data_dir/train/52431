#include <iostream>
#include <cmath>

using namespace std;

typedef long long int ll;

int n;
int v[30];
int c[10];

int costsol;

void improve(int d1,int d0)
{
  int i0=0;
  while (i0<n and v[i0]!=d0) i0++;
  if (i0==n) return;
  int i1=0;
  while (i1<n and (v[i1]!=d1 or i1==i0)) i1++;
  if (i1==n) return;
  int nextsol=0;
  if (n>2 and (i0==n-1 or i1==n-1)) {
    int ind=n-2;
    while (ind>=0 and (ind==i0 or ind==i1 or v[ind]==0)) ind--;
    if (ind<0) return;
    nextsol+=n-1-ind;
    if (ind<i0) i0--;
    if (ind<i1) i1--;
  }
  nextsol+=i0;
  if (i1>0) {
    nextsol+=i1-1;
    if (i1<i0) nextsol++;
  }
  costsol=min(costsol,nextsol);
}

int main()
{
  ll x;
  cin>>x;
  for (;x;x/=10) v[n++]=x%10;
  for (int i=0;i<n;i++)
    c[v[i]]++;
  costsol=1000;
  improve(0,0);
  improve(2,5);
  improve(5,0);
  improve(7,5);
  if (costsol==1000) {
    cout<<-1<<endl;
  } else {
    cout<<costsol<<endl;
  }
}
