#include <bits/stdc++.h>

#define endl '\n'
#define ll long long int
#define let(x, a) __typeof(a) x(a)
#define all(a) (a).begin(), (a).end()
#define present(c, x) ((c).find(x) != (c).end())
#define tr(v, it) for (let(it, v.begin()); it != v.end(); it++)
#define rtr(v, it) for (let(it, v.rbegin()); it != v.rend(); it++)

#define trace1(x)					cerr << #x << ": " << x << endl;
#define trace2(x, y)				cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)				cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)			cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)		cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f)	cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

using namespace std;

class UnionFind {
public:
	vector<int> parent;
	vector<int> rank;
	vector<int> size;
	int count;

	UnionFind(int n) {
		parent.assign(n,0);
		for(int i=0;i<n;i++)
			parent[i]=i;
		rank.assign(n,0);
		size.assign(n,1);
		count=n;
	}

	int find(int n) {
		if(n==parent[n])
			return n;
		return parent[n]=find(parent[n]);
	}

	void Union(int a, int b) {
		a=find(a);
		b=find(b);
		if(a==b)
			return;
		count--;
		if(rank[a]>rank[b]) {
			parent[b]=a;
			size[a]+=size[b];
		} else {
			parent[a]=b;
			size[b]+=size[a];
			if(rank[a]==rank[b])
				rank[b]++;
		}
	}

	int Size(int n) {
		return size[find(n)];
	}

	int Count() {
		return count;
	}
};

int main() {
	ios::sync_with_stdio(false);
	int n,m;
	cin>>n>>m;
	UnionFind UF(n);
	while(m--) {
		int num;
		cin>>num;
		int x=-1,y;
		while(num--) {
			cin>>y;
			y--;
			if(x!=-1) {
				UF.Union(x,y);
			}
			x=y;
		}
	}
	for(int i=0;i<n;i++) {
		cout<<UF.Size(i)<<" ";
	}
	cout<<endl;
	return 0;
}