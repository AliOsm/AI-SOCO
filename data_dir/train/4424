#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <string>
#include <cmath>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <cassert>
#include <cstring>
#include <unordered_set>
#include <unordered_map>
#include <numeric>
#include <ctime>
#include <bitset>
#include <complex>
#include <random>

using namespace std;

typedef long long ll;

#define int ll

const int MOD = 998244353;

int add(int a, int b) {
    ll res = (ll)a + b;
    return res % MOD;
}

int sub(int a, int b) {
    ll res = (ll)a - b;
    res %= MOD;
    res += MOD;
    return res % MOD;
}

int mul(int a, int b) {
    ll res = (ll)a * b;
    return res % MOD;
}

int binpow(int a, int b) {
    int res = 1;
    while (b > 0) {
        if (b & 1) {
            res = mul(res, a);
        }
        a = mul(a, a);
        b /= 2;
    }
    return res;
}

int divv(int a, int b) {
	return mul(a, binpow(b, MOD - 2));
}


const int MAXN = 1e6 + 9;

int cnt[MAXN];

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n;
    cin >> n;
    vector<vector<int>> a(n);
    for (int i = 0; i < n; i++) {
    	int k;
    	cin >> k;
    	a[i].resize(k);
    	for (auto &t : a[i]) {
    		cin >> t;
    		cnt[t]++;
    	}
    }
    int ans = 0;
    for (int i = 0; i < n; i++) {
    	for (int j = 0; j < (int)a[i].size(); j++) {
    		int prob = mul(divv(1, n), divv(1, (int)a[i].size()));
    		ans += mul(prob, divv(cnt[a[i][j]], n));
    		ans %= MOD;
    	}
    }
    cout << ans << endl;
}
