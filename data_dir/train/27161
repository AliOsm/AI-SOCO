#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
#define F first
#define S second

mt19937 rng(chrono::high_resolution_clock::now().time_since_epoch().count());
template<typename T>
static T randint(T lo, T hi) { return uniform_int_distribution<T>(lo, hi)(rng); }

char ans[5];

bool ask(int a, int b, int c)
{
	printf("? %d %d %d\n", a, b, c);
	fflush(stdout);
	scanf("%s", ans);
	return ans[0] == 'Y';
}

int main()
{
	int n, k;
	scanf("%d%d", &n, &k);

	int depth = round(log2(n*(k-1)) / log2(k));

	while (true)
	{
		int u = randint(1, n), v = u;
		while (v == u) v = randint(1, n);

		vector<int> path;
		for (int i = 1; i <= n; ++i)
			if (i != u && i != v && ask(u, i, v))
				path.push_back(i);

		if (path.size() != 2*(depth-1)-1) continue;
		shuffle(path.begin(), path.end(), rng);

		for (auto r : path)
		{
			int cnt = 0;
			for (int i = 1; i <= n; ++i)
			{
				if (i == u || i == r) continue;
				cnt += ask(u, r, i);
			}

			if (cnt == n-1-(n-1)/k)
			{
				printf("! %d\n", r);
				break;
			}
		}

		break;
	}

	return 0;
}
