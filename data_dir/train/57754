#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int magic = 2520;

pair<int,int> par[1005][2520];
vector<int> g[1005];

int out_deg[1005][2520];
int vis[1005][2520];
int val[1005];
int res[3000005];


int main() {

    // freopen("in.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cin.tie(0);
    int n;
    cin >> n;
    for(int i = 1; i <= n; i++) cin >> val[i];
    for(int i = 1; i <= n; i++) {
        int m;
        cin >> m;
        while(m--) {
            int v;
            cin >> v;
            g[i].push_back(v);
        }
    }
    for(int i = 1; i <= n; i++) {
        for(int j = 0; j < magic; j++) {
            int m = j + val[i];
            m %= magic;
            if(m < 0) m += magic;
            par[i][j] = make_pair(g[i][m%g[i].size()], m);
            out_deg[g[i][m%g[i].size()]][m]++;
        }
    }
    int comp = 0;
    for(int i = 1; i <= n; i++) {
        for(int j = 0; j < magic; j++) {
            if(out_deg[i][j] == 0) {
                assert(vis[i][j] == 0);
                vector<pair<int,int>> all_node;
                int x = i, y = j;
                ++comp;
                int found_before = 0;
                while(vis[x][y] != comp) {
                    if(vis[x][y] != 0) {
                        found_before = vis[x][y];
                        break;
                    }
                    vis[x][y] = comp;
                    all_node.push_back({x, y});
                    int new_x = par[x][y].first, new_y = par[x][y].second;
                    x = new_x, y = new_y;
                }

                if(found_before) {
                    for(int k = 0; k < all_node.size(); k++) {
                        vis[all_node[k].first][all_node[k].second] = found_before;
                    }
                    continue;
                }

                vector<pair<int,int>> cycle;
                while(all_node.size() > 0) {
                    cycle.push_back(all_node.back());
                    all_node.pop_back();
                    if(cycle.back() == make_pair(x, y)) break;
                }
                set<int> S;
                for(int k = 0; k < cycle.size(); k++) {
                    S.insert(cycle[k].first);
                }
                res[comp] = (int)S.size();
            }
        }
    }


    for(int i = 1; i <= n; i++) {
        for(int j = 0; j < magic; j++) {
            if(vis[i][j] == 0) {
                ++comp;
                int x = i, y = j;
                set<int> S;
                vector<pair<int,int>> all_node;
                while(vis[x][y] == 0) {
                    vis[x][y] = comp;
                    all_node.push_back({x, y});
                    S.insert(x);
                    int new_x = par[x][y].first, new_y = par[x][y].second;
                    x = new_x, y = new_y;
                }
                res[comp] = S.size();
            }
        }
    }

    int q;
    cin >> q;
    while(q--) {
        int x, y;
        cin >> x >> y;
        y %= magic;
        if(y < 0) y += magic;
        cout << res[vis[x][y]] << "\n";
    }

    return 0;
}

