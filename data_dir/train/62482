#include<stdlib.h>
#include<stdio.h>
#include<math.h>
#define N 2001
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
#define LL long long
struct rua
{
	LL i,j,v;
}f[N*N];
LL n,m,d,sa,sb,a[N],b[N],ans[3],v[N*N],_,a1,b1,b2;
bool cmp(rua x,rua y){return x.v<y.v;}
void cdx(LL i,LL _)
{
	if(!_ || f[_].i==f[i].i || f[_].j==f[i].j)return;
	if(ans[2]>abs(d+v[_]))ans[2]=abs(d+v[_]),b1=i,b2=_;
}
int main()
{
	ans[2]=(1ll<<62);
	scanf("%I64d",&n);
	for(LL i=1;i<=n;i++)
	  scanf("%I64d",&a[i]),sa+=a[i];
	scanf("%I64d",&m);
	for(LL i=1;i<=m;i++)
	  scanf("%I64d",&b[i]),sb+=b[i];
	d=sa-sb;
	for(LL i=1;i<=n;i++)
	  for(LL j=1;j<=m;j++)
	    {
	    f[i*m-m+j].v=2*(b[j]-a[i]);
	    f[i*m-m+j].i=i;
	    f[i*m-m+j].j=j;
		}
	ans[0]=abs(d);
	sort(f+1,f+n*m+1,cmp);
	for(LL i=1;i<=n;i++)
	  for(LL j=1;j<=m;j++)
	    v[i*m-m+j]=f[i*m-m+j].v;
	_=lower_bound(v+1,v+n*m+1,-d)-v;
	if(_==n*m+1)ans[1]=abs(d+v[_-1]),a1=_-1;else
	if(_==1)ans[1]=abs(d+v[1]),a1=_;else
	if(abs(d+v[_])<abs(d+v[_-1]))ans[1]=abs(d+v[_]),a1=_;
	else ans[1]=abs(d+v[_-1]),a1=_-1;
	for(int i=1;i<n*m;i++)
	  {
	  d+=v[i];
	  _=lower_bound(v+1,v+n*m+1,-d)-v;
	  if(_==n*m+1)cdx(i,_-1);
	  else if(_==1)cdx(i,1-(i==1));else
	  cdx(i,_+(i==_)),cdx(i,_-1-(i==_-1));
	  d-=v[i];
	  }
	if(ans[0]<=ans[1] && ans[0]<=ans[2])
	  return printf("%I64d\n0\n",ans[0]),0;
	if(ans[1]<=ans[0] && ans[1]<=ans[2])
	  return printf("%I64d\n1\n%I64d %I64d\n",ans[1],f[a1].i,f[a1].j),0;
	printf("%I64d\n2\n",ans[2]);
	printf("%I64d %I64d\n",f[b1].i,f[b1].j);
	printf("%I64d %I64d\n",f[b2].i,f[b2].j);
	return 0;
}
