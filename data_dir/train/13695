#pragma GCC target("avx2")
#pragma GCC optimize("O3")
 
#include <x86intrin.h>
#include <bits/stdc++.h>   
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;
 
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
     
#define F first
#define S second           
#define lb lower_bound               
#define ub upper_bound
#define pb push_back
#define pf push_front    
#define ppb pop_back
#define mp make_pair                                     
#define bpp __builtin_popcountll                                                                                        
#define sqr(x) ((x) * (x)) 
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define in insert
#define ppf pop_front
#define endl '\n'
//#define int long long
 
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
 
const int mod = (int)1e9 + 7;
const int N = (int)1e6 + 123;
const ll inf = (ll)1e18 + 1;
 
const double pi = acos (-1.0);
const double eps = 1e-9;                  
const int dx[] = {0, 0, 1, 0, -1};
const int dy[] = {0, 1, 0, -1, 0};
 
vector <pii> g[N];
int n, a[N], d[N], p[N];
queue <int> q;

inline void boost () {                    
   ios_base :: sync_with_stdio (NULL);
   cin.tie (NULL), cout.tie (NULL);          
}                                                     
 
inline void Solve () {
   cin >> n;
   for (int i = 1; i <= n; i ++) {
      cin >> a[i];
      int qwe = sqrt (a[i]);
      if (qwe * qwe == a[i]) cout << 1, exit (0);
      int p1 = 1, p2 = 1;
      for (int j = 2; j * j <= a[i]; j ++) {
         if (a[i] % j == 0) {
            int kol = 0;
            while (a[i] % j == 0) a[i] /= j, kol ++;
            if (kol & 1) {
               if (p1 == 1) p1 = j;
               else p2 = j;
            }
         }
      }
      if (a[i] > 1) {
         if (p1 == 1) p1 = a[i];
         else p2 = a[i];
      }
      g[p1].pb ({p2, i});
      g[p2].pb ({p1, i});
   }
   memset (d, -1, sizeof d);
   int ans = mod;
   for (int i = 1; i <= 1000; i ++) {
      d[i] = 0;
      q.push (i);
      while (sz (q)) {
         int v = q.front ();
         q.pop ();
         for (auto it : g[v]) {
            int to = it.F, id = it.S;
            if (p[v] == id) continue;
            if (d[to] != -1) {
               if (d[v] + d[to] + 1 < ans) 
                  ans = d[v] + d[to] + 1;
            }
            if (d[to] == -1) {
               d[to] = d[v] + 1;
               p[to] = id;
               q.push (to);
            }
         }
      }
      q.push (i);
      d[i] = -1;
      p[i] = 0;
      while (sz (q)) {
         int v = q.front ();
         q.pop ();
         for (auto to : g[v]) {
            if (d[to.F] == -1) continue;
            d[to.F] = -1;
            p[to.F] = 0;
            q.push (to.F);
         }
      }
   }
   if (ans == mod) ans = -1;
   cout << ans;
}
 
main () {                                       
// freopen (".in", "r", stdin);    
// freopen (".out", "w", stdout);              
   boost ();
   int tt = 1;
   //cin >> tt;   
   while (tt --) {
      Solve ();
   }                                               
   return 0;      
}
