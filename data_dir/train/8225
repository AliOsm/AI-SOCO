#include<bits/stdc++.h>

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define all(c) (c).begin(),(c).end()
#define mp make_pair
#define pb push_back
#define each(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
const int inf = (int)1e9;
const double INF = 1e12, EPS = 1e-9;

const int N = 100010;
int p[2 * N];
inline int root(int x){
	if(p[x] == x) return x;
	return p[x] = root(p[x]);
}
inline void merge(int a, int b){
	a = root(a); b = root(b);
	if(a != b) p[b] = a;
}
int n, a, b, x[N], ans[N];

int main(){
	vi v;
	scanf("%d%d%d", &n, &a, &b);
	
	rep(i, n){
		scanf("%d", x + i);
		v.pb(x[i]);
	}
	sort(all(v));
	
	int m = v.size();
	rep(i, 2 * m + 1) p[i] = i;
	
	rep(i, n){
		int k = lower_bound(all(v), x[i]) - v.begin();
		int id = lower_bound(all(v), a - x[i]) - v.begin();
		if(id >= m || v[id] != a - x[i]) merge(k, 2 * m);
		else merge(k, id), merge(k + m, id + m);
		
		id = lower_bound(all(v), b - x[i]) - v.begin();
		if(id >= m || v[id] != b - x[i]) merge(k + m, 2 * m);
		else merge(k + m, id + m), merge(k, id);
	}
	rep(i, m) if(root(2 * m) == root(i) && root(2 * m) == root(i + m)){
		cout << "NO" << endl;
		return 0;
	}
	/*
	memset(ans, -1, sizeof(ans));
	map<int, vi> M;
	rep(i, n){
		int id = lower_bound(all(v), x[i]) - v.begin();
		M[root(id)].pb(i);
		M[root(id + m)].pb(i);
	}
	
	rep(i, n) if(ans[i] < 0){
		
		int id = lower_bound(all(v), x[i]) - v.begin();
		if(root(2 * m) == root(id)) each(j, M[root(id + m)]) assert(ans[*j] < 0), ans[*j] = 1;
		else each(j, M[root(id)]) assert(ans[*j] < 0), ans[*j] = 0;
	}
	*/
	rep(i, n){
		int id = lower_bound(all(v), x[i]) - v.begin();
		ans[i] = root(id) == root(2 * m);
	}
	
	puts("YES");
	rep(i, n) printf("%d%c", ans[i], i == n-1?'\n':' ');
	
	return 0;
}
