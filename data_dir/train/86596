#include <iostream>
#include <bits/stdc++.h>
#define ll long long

using namespace std;
vector < int > v;
vector < int >::iterator it;
set < int > st;
map < int , int > mp , mp2;
int Hash = 1,N = 200100,Seg[800100];

void Update(int i , int v , int p = 1, int L = 1, int R = N)
{
    if (i < L || i > R) return;
    if (L == R)
    {
        Seg[p]+=v;
        return;
    }
    int mid = (L + R)/2;
    Update(i , v , p * 2, L, mid);
    Update(i , v , p * 2 + 1, mid + 1, R);

    Seg[p] = Seg[p * 2] + Seg[p * 2 + 1];
}

int Query(int i, int j, int p = 1, int L = 1, int R = N)
{
    if (L > j || R < i) return 0;
    if (L >= i && R <= j)
        return Seg[p];

    int mid = (L + R)/2;
    return Query(i, j, p * 2, L, mid) + Query(i, j, p * 2 + 1, mid + 1, R);
}

ll Ans = 0;


int main()
{
    int n;  cin >> n;
    for(int i=0;i<n;i++){
        int a,b;  cin >> a >> b;
        st.insert(a);
        st.insert(b);
        int temp = (mp.count(b) ? mp[b] : b);
        int temp2 = (mp.count(a) ? mp[a] : a);
        mp[a] = temp;
        mp[b] = temp2;
    }
    for(auto it : st)  v.push_back(it);
    st.clear();
    for(auto it : mp)  st.insert(it.second);
    for(auto it : st)   mp2[it] = Hash++ , Update(mp2[it] , 1);
    for(auto it2 : mp){
        Ans+=Query(1 , mp2[it2.second] - 1);
        Update(mp2[it2.second] , -1);
        if(it2.second > it2.first){
            it = lower_bound(v.begin() , v.end() , it2.second);
            if(it == v.end() || *it > it2.second)  it--;
            Ans+=(it2.second - it2.first) - (it - lower_bound(v.begin() , v.end() , it2.first));
        }
        else {
            it = lower_bound(v.begin() , v.end() , it2.first);
            if(it == v.end() || *it > it2.first)  it--;
            Ans+=(it2.first - it2.second) - (it - lower_bound(v.begin() , v.end() , it2.second));
        }
    }
    cout << Ans;
    return 0;
}
