#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<map>
#include<utility>
#include<set>
#include<stack>
#include<list>
#include<deque>
#include<bitset>
#include<iomanip>
#include<cstring>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<climits>
#include<cmath>
#include<cctype>


#define pb push_back
#define mp make_pair
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define ren(i,a,b) for(int i=a;i>=b;i--)
#define ff first
#define ss second
#define pll pair<long long int,long long int>
#define pii pair<int,int>
#define vll vector<long long int>
#define vii vector<int>
#define gi(n) scanf("%d",&n)
#define gll(n) scanf("%lld",&n)
#define gstr(n) scanf("%s",n)
#define gl(n) cin >> n
#define oi(n) printf("%d",n)
#define oll(n) printf("%lld",n)
#define ostr(n) printf("%s",n)
#define ol(n) cout << n
#define os cout<<" "
#define on cout<<"\n"
#define o2(a,b) cout<<a<<" "<<b
#define all(n) n.begin(),n.end()
#define present(s,x) (s.find(x) != s.end())
#define cpresent(s,x) (find(all(s),x) != s.end())
#define tr(container, it) for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++)
using namespace std;

typedef unsigned long long int ull;
typedef long long int ll;
typedef long double ld;
typedef vector<vector<ll> > mat;

int a[1000005],n,tree[6000005],x;
 
 
 
void build(int lo,int hi,int i)
{
	if(lo==hi)
	{
		tree[i]=a[lo];
		return;
	}
	int mid=(lo+hi)/2;
	build(lo,mid,2*i);
	build(mid+1,hi,2*i+1);
	tree[i]=__gcd(tree[2*i],tree[2*i+1]);
}
 
 
int query(int left,int right,int l,int r,int i)
{
	if(left>=l&&right<=r)
	return tree[i];
	int mid=(left+right)/2;
	if(r<=mid)
	return query(left,mid,l,r,2*i);
	if(l>mid)
	return query(mid+1,right,l,r,2*i+1);
	int t2=query(mid+1,right,mid+1,r,2*i+1);
	int t1=query(left,mid,l,mid,2*i);
	return __gcd(t1,t2);
}

int get(int left,int right,int l,int r,int i)
{
	if(left>=l&&right<=r)
	{
		if(tree[i]%x==0)return r;
		if(left==right)
		return -1;
	}
	int mid=(left+right)/2;
	if(r<=mid)
	return get(left,mid,l,r,2*i);
	if(l>mid)
	return get(mid+1,right,l,r,2*i+1);
	int t1=get(left,mid,l,mid,2*i);
	if(t1<mid)return t1;
	int t2=get(mid+1,right,mid+1,r,2*i+1);
	if(t2==-1)return t1;
	return min(t2,r);
}
 
 
void update(int left,int right,int pos,int i)
{
	if(left==right)
	{
		tree[i]=a[left];
	 	return;
	}
	int mid=(left+right)/2;
	if(pos<=mid)
	update(left,mid,pos,2*i);
	else
	update(mid+1,right,pos,2*i+1);
	tree[i]=__gcd(tree[2*i],tree[2*i+1]);
}


int main()
{
gi(n);

rep(i,1,n)gi(a[i]);
int q;
gi(q);
build(1,n,1);
while(q--)
{
	int qq;
	gi(qq);
	if(qq==2)
	{
		int pos;
		gi(pos);
		int val;
		gi(val);
		a[pos]=val;
		update(1,n,pos,1);
	}
	else
	{
		int l,r;
		gi(l);gi(r);gi(x);
		int ans=get(1,n,l,r,1);
		if(ans==-1)ans=l-1;
		if(l==r)
		{
			printf("YES\n");
		}
		else if(r-l==1)
		{
			if(a[l]%x==0||a[r]%x==0)printf("YES\n");
			else printf("NO\n");
		}
		else
		{
			ans+=2;
			int f=0;
			if(ans>r)f=1;
			else if(query(1,n,ans,r,1)%x==0)f=1;
			if(f)printf("YES\n");
			else printf("NO\n");
		}
	}
}
return 0;
}


