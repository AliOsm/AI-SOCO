#include <bits/stdc++.h>

using namespace std;

const int N = 2e6 + 5;
int n, del, add, a[N], maxAdd;
long long cum[N];
int indexAdd(int i, int left, int right) {
	int lower = left, upper = right, ret = right + 1;
	while (lower <= upper) {
		int mid = (lower + upper) / 2;
		if (i - a[mid] % i <= maxAdd) {
			upper = mid - 1;
			ret = mid;
		} else {
			lower = mid + 1;
		}
	}
	return ret;
}
long long sieve() {
	long long ret = 1ll * n * del;
	for (int i = 2; i < N; ++i) {
		long long cost = 0;
		int prev = 1;
		for (int j = i; j < N; j += i) {
			int left = upper_bound(a + prev, a + n + 1, j - i) - a;
			int right = lower_bound(a + left, a + n + 1, j) - a - 1;
			if (left == n + 1)
				break;
			int toAdd = indexAdd(i, left, right);
			long long added = cum[right] - cum[toAdd - 1];
			cost += 1ll * (1ll * (right - toAdd + 1) * j - added) * add;
			if (cost > ret || cost < 0)
				break;
			cost += 1ll * ((toAdd - 1) - left + 1) * del;
			
			prev = right;
			if (cost > ret || cost < 0)
				break;
		}
		if (cost > ret || cost < 0)
			continue;
		ret = cost;
	}
	return ret;
}
int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif
	scanf("%d %d %d", &n, &del, &add);
	maxAdd = del / add;
	for (int i = 1; i <= n; ++i)
		scanf("%d", a + i);
	sort(a + 1, a + n + 1);
	for (int i = 1; i <= n; ++i)
		cum[i] = cum[i - 1] + a[i];
	printf("%lld\n", sieve());
	return 0;
}