 /*
    __                      _    _            __                 __
   / /_/\__        __ _    | | _| | __     _  \ \       __/\__  / /
  / /\    /       / _` |   | |/ / |/ /    (_)  | |      \    / / / 
 / / /_  _\      | (_| |   |   <|   <      _   | |      /_  _\/ /  
/_/    \/         \__,_|___|_|\_\_|\_\    (_)  | |        \/ /_/   
                      |_____|                 /_/                  

*/
#include <bits/stdc++.h>
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
#define ll long long int
#define ld long double
using namespace std;
const int N = 1e6 + 5;
const int MOD = 1e9 + 7;

std::vector<ll> v[N];
ll s[N], a[N], p[N];
bool visit[N];

void dfs1(ll node, ll h){
	visit[node] = 1;
	for(auto i: v[node]){
		if(!visit[i]){
			dfs1(i, h + 1);
		}
	}
	if(h % 2 == 0){
		ll mn = 1e18;
		for(auto i: v[node]){
			if(i != p[node])
				mn = min(mn, s[i]);
		}
		s[node] =  mn;
	}
}

void dfs(ll node, ll h, ll prev){
	visit[node] = 1;
	if(s[node] == 1e18)
		a[node] = 0;
	else
		a[node] = s[node] - prev;
	if(a[node] < 0){
		cout << -1;
		exit(0);
	}
	prev = s[node];
	for(auto i: v[node]){
		if(!visit[i]){
			dfs(i, h + 1, prev);
		}
	}
}

int main(){
	fast;
	ll n;
	cin >> n;
	for(int i = 2; i <= n; i++){
		ll x;
		cin >> x;
		p[i] = x;
		v[i].push_back(x);
		v[x].push_back(i);
	}
	for(int i = 1; i <= n; i++) cin >> s[i];
	dfs1(1, 1);
	/*for(int i = 1; i <= n; i++) cout << s[i] << " ";
	cout << "\n";*/
	memset(visit, 0, sizeof visit);
	dfs(1, 1, 0);
	ll sum = 0;
	for(int i = 1; i <= n; i++) sum += a[i];
	cout << sum;
	return 0;
}
