#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <class T>
using ordered_set = tree <T,null_type,less <T>,rb_tree_tag,tree_order_statistics_node_update> ;
///find_by_order()
///order_of_key()

template <class T,class U>
void maximize(T &x,U y){
    if(x < y)x = y;
}
template <class T,class U>
void minimize(T &x,U y){
    if(x > y)x = y;
}
template <class T>
T Abs(T x){
    return (x < (T)0 ? -x : x);
}
template <class T>
T safe_sqrt(T x){
    return sqrt(max(x,(T)0));
}
template <class T,class U,class V>
T addmod(T x,U k,V MOD){
    return ((x + k) % MOD + MOD) % MOD;
}
template <class T,class U,class V>
T submod(T x,U k,V MOD){
    return ((x - k) % MOD + MOD) % MOD;
}
template <class T,class U,class V>
T mul(T x,U y,V MOD){
    return ( (x % MOD) * (y % MOD) ) % MOD;
}

#define ll long long
#define pll pair <ll,ll>
#define pii pair <int,int>
#define MASK(i) ((1LL)<<(i))
#define BIT(x,i) (((x)>>(i))&1)
#define all(c) (c).begin(),(c).end()
#define fn "test"    ///FILE_NAME_HERE

/*------------------------------------------END_OF_TEMPLATE------------------------------------------*/

namespace task{

    const int N = 1e5 + 5;
    int a[N],lst[N];
    int n;

    typedef class PersistentSegmentTree{
    public:
        PersistentSegmentTree *left,*right;
        int cnt;
        PersistentSegmentTree(){}
        PersistentSegmentTree(int cnt):cnt(cnt),left(nullptr),right(nullptr){}
        PersistentSegmentTree(PersistentSegmentTree *left,PersistentSegmentTree *right):left(left),right(right),cnt(0){
            if(left)cnt += left -> cnt;
            if(right)cnt += right -> cnt;
        }
        PersistentSegmentTree* buildTree(int,int);
        PersistentSegmentTree* updateNode(PersistentSegmentTree*,int,int,int,int);
        int get(PersistentSegmentTree*,int,int,int);
    }tree;

    tree* tree::buildTree(int l , int r) {
        if(l == r){
            return new tree(0);
        }
        int mid = (l + r) >> 1;
        return new tree(buildTree(l,mid),buildTree(mid + 1,r));
    }

    tree* tree::updateNode(tree *cur,int pos,int val,int l,int r){
        if(l > r or r < pos or l > pos){
            return nullptr;
        }
        if(l == r){
            return new tree(cur -> cnt + val);
        }
        int mid = (l + r) >> 1;
        if(pos <= mid){
            return new tree(updateNode(cur -> left,pos,val,l,mid),cur -> right);
        } else {
            return new tree(cur -> left,updateNode(cur -> right,pos,val,mid + 1,r));
        }
    }

    int tree::get(tree *cur,int l,int r,int k){
        if(l == r){
            return l;
        }
        int mid = (l + r) >> 1;
        if(cur -> left -> cnt <= k){
            return get(cur -> right,mid + 1,r,k - cur -> left -> cnt);
        } else {
            return get(cur -> left,l,mid,k);
        }
    }

    tree* *root;

    void solve(){
        cin>>n;
        for(int i = 1;i <= n;++i) {
            cin >> a[i];
        }
        root = new tree*[n + 2];
        root[n + 1] = root[n + 1] -> buildTree(1,n + 1);
        for(int i = n;i >= 1;--i){
            if(!lst[a[i]]){
                root[i] = root[i] -> updateNode(root[i + 1],i,1,1,n + 1);
            } else {
                root[i] = root[i] -> updateNode(root[i + 1],lst[a[i]],-1,1,n + 1);
                root[i] = root[i] -> updateNode(root[i],i,1,1,n + 1);
            }
            lst[a[i]] = i;
        }
        for(int k = 1;k <= n;++k){
            int group = 0;
            for(int i = 1;i <= n;++i){
                int f = root[i] -> get(root[i],1,n + 1,k);
                ++group;
                i = --f;
            }
            cout<<group<<' ';
        }
    }
}

int main(void){
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    //freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    task::solve();
}