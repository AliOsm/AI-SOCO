//VFD
#include <bits/stdc++.h>
using namespace std;
#define pf push_front
#define pb push_back
#define FOR(i,begin,end) for (LL i=begin;i<=end;i++)
#define rep(i,t) for (LL i=0;i<t;i++)
#define pii pair<LL,LL>
#define pi pair<pii,pii>
#define X first
#define Y second 
#define fast cin.tie(0),cout.tie(0),ios::sync_with_stdio(false) 
typedef long long LL;
const LL maxN=1e6+7,MOD=1e9+7,INF=1e9+7,N=1e6+17,sqr=75;
LL data[4*maxN],pointer,ind[maxN],dp[3][maxN],ans,n,a[maxN];
vector<LL>q;
vector<pii>vc;
inline int left(int x){return 2*x+1;}
inline int right(int x){return 2*x+2;}
void add(int node, int st, int en, int ind)
{
    if(ind<st || en<=ind)
        return ;
    data[node]++;
    if(en-st<2)
        return ;
    int mid=(st+en)>>1;
    add(left(node),st,mid,ind);
    add(right(node),mid,en,ind);
}
LL get(int node, int st, int en, int l, int r)
{
    if(en<=l || r<=st)
        return 0;
    if(st>=l && en<=r)
        return data[node];
    int mid=(st+en)>>1;
    return get(left(node),st,mid,l,r)+get(right(node),mid,en,l,r);
}
map<LL,LL>u,v;
main()
{
    fast;
    cin>>n;
    rep(i,n)
        cin>>a[i];
    rep(i,n)
        dp[1][i]=u[a[i]],u[a[i]]++;
    for(int i=n-1;i>=0;i--)
        dp[2][i]=v[a[i]],v[a[i]]++,vc.pb(pii(dp[2][i],i)),q.pb(dp[2][i]);
    sort(vc.begin(),vc.end());
    sort(q.begin(),q.end());
    rep(i,n)
        ind[vc[i].Y]=i;
    add(0,0,n,ind[n-1]);
    for(int i=n-2;i>=0;i--)
    {
        if(q[n-1]<dp[1][i])
            pointer=n;
        else
            pointer=lower_bound(q.begin(),q.end(),dp[1][i])-q.begin();
        ans+=get(0,0,n,0,pointer);
        add(0,0,n,ind[i]);
    }
    return cout<<ans<<'\n',0;
}
