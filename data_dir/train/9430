#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;

const int N = 100100;


int n, m, cnt;

map<string, int> mp1;

int type[N];

string s[N];

bool g[41][41];

bool otmetka[41];

int dp[(1<<20)+4];

bool available[22];

int main(){
    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

    cin >> n >> m;
    for (int i = 1; i <= n; i++){
        cin >> type[i];
        if (type[i] == 2){
            cin >> s[i];
            if (mp1.find(s[i]) == mp1.end())
                mp1[s[i]] = cnt++;
        }
    }
    for (int i = 1; i <= n; i++){
        if (type[i] == 1){
            memset(otmetka, 0, sizeof(otmetka));
        } else {
            int pos = mp1[s[i]];
            for (int j = 0; j < m; j++){
                if (otmetka[j] && j != pos)
                    g[j][pos] = g[pos][j] = 1;
            }
            otmetka[pos] = 1;
        }
    }
    int sz1 = m/2;
    int ans = 0;
    for (int mask = 0; mask < (1<<sz1); mask++){
        bool exists = 1;
        for (int i = 0; i < sz1; i++){
            if (!(mask & (1<<i)))
                continue;
            for (int j = 0; j < sz1; j++){
                if (!(mask & (1<<j)))
                    continue;
                if (g[i][j]){
                    exists = 0;
                    break;
                }
            }
            if (!exists)
                break;
        }
        int cur = 0;
        if (exists)
            cur = __builtin_popcount(mask);
        ans = max(ans, cur);
        dp[mask] = max(dp[mask], cur);
        for (int j = 0; j < sz1; j++){
            if (!(mask & (1<<j))){
                dp[mask^(1<<j)] = max(dp[mask^(1<<j)], dp[mask]);
            }
        }
    }
    int sz2 = m-sz1;
    for (int mask = 0; mask < (1<<sz2); mask++){
        int canMask = 0;
        for (int i = 0; i < sz1; i++){
            available[i] = 1;
            for (int j = 0; j < sz2; j++){
                if (!(mask & (1<<j)))
                    continue;
                if (g[i][j+sz1]){
                    available[i] = 0;
                    break;
                }
            }
            if (available[i])
                canMask += (1<<i);
        }
        bool exists = 1;
        for (int i = 0; i < sz2; i++){
            if (!(mask & (1<<i)))
                continue;
            for (int j = 0; j < sz2; j++){
                if (!(mask & (1<<j)))
                    continue;
                if (g[sz1+i][sz1+j]){
                    exists = 0;
                    break;
                }
            }
            if (!exists)
                break;
        }
        int cur = 0;
        if (exists)
            cur = __builtin_popcount(mask);
        ans = max(ans, cur+dp[canMask]);
    }

    cout << ans;


}

/**

10 3
1
2 a
1
2 a
2 b
1
2 b
2 c
1
2 c

*/
