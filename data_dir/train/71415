#include <bits/stdc++.h>
using namespace std;

vector<int> b[65];
vector<int> g[100005];
int getShortest(int s, int t) {
	set<int> tk;
	queue<pair<int, int> > q;
	q.push(make_pair(s, 0));
	while (!q.empty()) {
		pair<int, int> cur = q.front();
		q.pop();
		if (tk.count(cur.first)) continue;
		if (cur.first == t) return cur.second;
		tk.insert(cur.first);
		int u = cur.first;
		for (int j = 0; j < g[u].size(); j++) {
			if (u == s && g[u][j] == t) continue;
			if (g[u][j] == s && u == t) continue;
			q.push(make_pair(g[u][j], cur.second + 1));
		}
	}
	return -1;
}
int main() {
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		long long x;
		scanf("%lld", &x);
		for (int j = 0; j < 61; j++) {
			if (x&(1ll<<j)) b[j].push_back(i);
		}
	}
	for (int i = 0; i < 62; i++) {
		if (b[i].size() > 2) {
			printf("3\n");
			return 0;
		} else if (b[i].size() == 2) {
			int u = b[i][0];
			int v = b[i][1];
			g[u].push_back(v);
			g[v].push_back(u);
		}
	}
	int mn = 10000000;
	for (int i = 0; i < 62; i++) {
		if (b[i].size() != 2) continue;
		int cur = getShortest(b[i][0], b[i][1]) + 1;
		if (cur > 0) mn = min(mn, cur);
	}
	if (mn <= n) {
		printf("%d\n", mn);
	} else {
		printf("-1\n");
	}
}