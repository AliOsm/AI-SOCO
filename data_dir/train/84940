#include <bits/stdc++.h>
#define int long long
using namespace std;
vector<vector<int> >v;

map<int,int> ans[2];

int z;
set<int>ss[2];
map<int,int> vis;
int k=0;
bool flag=false;
map<pair<int,int> ,int>exist;
void bfs(int i,int x,int q)
{
//    cout<<"yo\n";
    if(i==z)
    {
        ans[k%2][q]=x;
        flag=true;
        return ;
    }
    vis[i]=1;
    for(auto j:v[i])
    {
        if(vis[j]==0)
            ss[x%2].insert(j);
    }

    if(ss[(x+1)%2].empty())
    {
        int zz;
        int cnt=ss[x%2].size();
        for(auto j:ss[x%2])
        {
            if(flag)
                return ;
            cnt--;
            if(cnt==0)
            {
               zz=j;
                break;
            }
            bfs(j,x+1,q);
        }
        ss[x%2].clear();
        bfs(zz,x+1,q);
    }
}

signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n,m,s,t;
    cin>>n>>m>>s>>t;
    v.resize(n);
    s--;
    t--;
    int x,y;
    for (int i = 0; i < m; ++i) {
        cin>>x>>y;
        x--;
        y--;
        exist[{min(x,y),max(x,y)}]=1;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    z=s;
    flag=false;

    for (int i = 0; i < n; ++i) {
        ss[0].clear();
        vis.clear();
        flag=false;
        ss[1].clear();
        bfs(i,0,i);
    }

    flag=false;
    z=t;
    k=1;
    for (int i = 0; i < n; ++i) {
        vis.clear();
        ss[0].clear();
        ss[1].clear();
        flag=false;
        bfs(i,0,i);
    }

    int mn=ans[0][t];

    int cnt=0;
    for (int i = 0; i < n; ++i) {
        for (int j = i+1; j < n; ++j) {
            if(ans[0][i]+ans[1][j]+1>=mn && ans[1][i]+ans[0][j]+1>=mn && exist[{min(i,j),max(i,j)}]==0)
            {
                cnt++;
            }
        }
    }

    cout<<cnt;
}