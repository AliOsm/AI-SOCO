//be naame khodaa

#include <iostream>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <string>
#include <cstdio>
#include <algorithm>
#include <set>
#include <cassert>
#include <iomanip>
typedef long long ll;
const int maxn = 250005;

using namespace std;
typedef pair <int, int> pii;

ll x[maxn], y[maxn], m[maxn], p[maxn], r[maxn], a[maxn], point[4*maxn];
bool mark[maxn];
pair <ll, ll> q[maxn];
ll v[25][maxn];
ll X, Y, P, R, n;
int ii = 0, jj = 0;

bool cmp (ll R, ll id)
{
	return R*R < (X-x[id])*(X-x[id]) + (Y-y[id])*(Y-y[id]);
}

void make(int s=0, int e=n, int h=0, int x=1)
{
	point[x] = s;
	if (e-s == 1)
	{
		v[h][s] = a[s];
		return;
	}
	int mid = (s + e)/2;
	make(s, mid, h+1, 2*x);
	make(mid, e, h+1, 2*x+1);
	merge(v[h+1] + s, v[h+1] + mid, v[h+1] + mid, v[h+1] + e, v[h] + s, [](ll x, ll y){ return m[x] < m[y]; });
}

void go(int L, int R, ll P, int s=0, int e=n, int h=0, int x=1)
{
	if (L <= s && e <= R)
	{
		ll &pp = point[x];
		while (pp < e && (mark[v[h][pp]] || (!mark[v[h][pp]] && P >= m[v[h][pp]])))
		{
			if (!mark[v[h][pp]])
			{
				mark[v[h][pp]] = true;
				q[jj++] = {p[v[h][pp]], r[v[h][pp]]};
			}
			pp++;
		}
		return;
	}
	int mid = (s + e)/2;
	if (L < mid)
		go(L, R, P, s, mid, h+1, 2*x);
	if (R > mid)
		go(L, R, P, mid, e, h+1, 2*x+1);
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin >> X >> Y >> P >> R >> n;
	for (int i = 0; i < n; i++)
		cin >> x[i] >> y[i] >> m[i] >> p[i] >> r[i], a[i] = i;
	sort(a, a + n, [] (int i, int j){ return (X-x[i])*(X-x[i]) + (Y-y[i])*(Y-y[i]) < (X-x[j])*(X-x[j]) + (Y-y[j])*(Y-y[j]); });
	make(0, n);
	q[jj++] = {P, R};
	while (ii < jj)
	{
		P = q[ii].first, R = q[ii].second;
		ii++;
		int it = upper_bound(a, a + n, R, cmp) - a;
		go(0, it, P);
	}
	cout << jj-1 << endl;
	return 0;
}
