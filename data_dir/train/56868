/*
ID: hamed_51
PROG: ?
LANG: C++
*/

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#if (_win32 || __win32__)
#define LLD "%i64d"
#else
#define LLD "%lld"
#endif

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-8
#define endl "\n"

inline void read(register int *n) {
	register char c; *n = 0;
	do { c = getchar(); } while (c < '0' || c > '9');
	do { *n = c-'0'+*n*10; c = getchar(); } while (c >= '0' && c <= '9');
}

#define MAXN 5050

int n;
string b[MAXN];
int mark[MAXN];
vector<int> path;

int dfs(int pos) {
	if (mark[pos] == 1) return pos;
	if (mark[pos] == 2) return -1;
	mark[pos]++;
	FOR(i, 0, n) if (b[pos][i] == '1') {
		int ret = dfs(i);
		if (ret == -2) return -2;
		if (ret == -1) continue;
		else {
			path.pb(pos);
			if (pos == ret)
				return -2;
			else
				return ret;
		}
	}
	mark[pos]++;
	return -1;
}

int main() {
	ios::sync_with_stdio(false);
	cin >> n;
	FOR(i, 0, n) cin >> b[i];
	FOR(i, 0, n) if (!mark[i]) if (dfs(i) == -2) break;
	if (path.empty()) cout << -1 << endl;
	reverse(all(path));
	while (Size(path) > 2) {
		int x = path[Size(path)-2];
		int y = path.back();
		int z = path[0];
		if (b[z][x] == '1') {
			cout << x+1 << " "<< y+1 << " " << z+1 << endl;
			return 0;
		} else path.pop_back();
	}
	return 0;
}

