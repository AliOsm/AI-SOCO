#include<bits/stdc++.h>
using namespace std;

vector<int> manacher(string s) {
    int n = s.size();
    vector<int> res(n, 0);
    int l = 0, r = 0;
    for (int i = 0; i < n; i++) {
        if (i < r) res[i] = min(res[l + r - i - 1], r - i - 1);
        while (i - res[i] - 1 >= 0 && i + res[i] + 1 < n && s[i - res[i] - 1] == s[i + res[i] + 1]) res[i]++;
        if (i + res[i] + 1 > r) {
            r = i + res[i] + 1;
            l = i - res[i];
        }
    }
    return res;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int t;
    cin >> t;
    while (t--) {
        string s;
        cin >> s;
        int pos = 0;
        while ((pos + 1) * 2 <= s.size() && s[pos] == s[(int) s.size() - 1 - pos]) pos++;
        string ans = s.substr(0, pos);
        s = s.substr(pos, (int) s.size() - pos * 2);
        string t = "#";
        for (auto x : s) {
            t += x;
            t += "#";
        }
        vector<int> help = manacher(t);
        int pref = 0, suf = 0;
        for (int i = 0; i < s.size(); i++) {
            int len = help[i * 2 + 1] / 2;
            if (i - len == 0) pref = max(pref, len * 2 + 1);
            if (i + len + 1 == s.size()) suf = max(suf, len * 2 + 1);
        }
        for (int i = 1; i < s.size(); i++) {
            int len = help[i * 2] / 2;
            if (i - len == 0) pref = max(pref, len * 2);
            if (i + len == s.size()) suf = max(suf, len * 2);
        }
        cout << ans + (pref > suf ? s.substr(0, pref) : s.substr((int) s.size() - suf, suf));
        reverse(ans.begin(), ans.end());
        cout << ans << '\n';
    }
    return 0;
}
