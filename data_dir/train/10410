////////////////////////////////////////////    _LeMur_
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 300005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;

int n , m , k;
long long a[N] , pref[N];

multiset <long long> q[12];
multiset <long long>::iterator it;

int main(){
	mt19937 myrand(chrono::steady_clock::now().time_since_epoch().count());
    cin >> n >> m >> k;
    for(int i=1;i<=n;i++){
        scanf("%lld",&a[i]);
        pref[i] = pref[i - 1] + a[i];
    }
    for(int i=1;i<=n;i++){
        int x = (i + m - 1) / m;
        q[i % m].insert(pref[i] - x * 1ll * k);
    }
    long long pat = 0;
    for(int i=0;i<n;i++){
        if(i){
            int x = (i + m - 1) / m;
            q[i % m].erase( q[i % m].find(pref[i] - x * 1ll * k) );
        }
        long long A = -pref[i] + k * 1ll * ((i + m - 1) / m);
        for(int j=0;j<m;j++){
            if((int)q[j].size() == 0)continue;
            it = q[j].end();
            --it;
            long long B = *it;
            if(i % m == 0 || j % m > 0 && j % m <= i % m)
                pat = max(pat , A + B);
            else
                pat = max(pat , A + B - k);
        }
    }
    cout << pat << endl;
    return 0;
}
