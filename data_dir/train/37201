#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

ll ans = 1;
int n, k;
vector<int> t;

int get(int v, int tl, int tr, int l, int r)
{
	if(l > r)
	{
		return 0;
	} else if(tl == l && tr == r)
	{
		return t[v];
	} else
	{
		int tm = (tl + tr) / 2;
		return get(2 * v + 1, tl, tm, l, min(tm, r)) + get(2 * v + 2, tm + 1, tr, max(tm + 1, l), r);
	}	
}

void update(int v, int tl, int tr, int pos)
{
	if(tl == tr)
	{
		++t[v];
	} else
	{
		int tm = (tl + tr) / 2;
		if(pos <= tm)
		{
			update(2 * v + 1, tl, tm, pos);
		} else
		{
			update(2 * v + 2, tm + 1, tr, pos);
		}
		++t[v];
	}
}

int main (int argc, char *argv[])
{
	scanf("%d%d", &n, &k);
	k = min(k, n - k);
	t.resize(4 * n, 0);
	for(int i = 0, x = 0; i < n; ++i, x += k, x %= n)
	{		
		int next = (x + k) % n,
			add;
		if(next > x)
		{
			add = get(0, 0, n - 1, x, next);
			int prev = x - k;
			if(prev >= 0)
			{
				add += get(0, 0, n - 1, prev + 1, x);
			} else
			{
				add += get(0, 0, n - 1, 0, x);
				prev += n;
				if(prev + 1 < n)
				{
					add += get(0, 0, n - 1, prev + 1, n - 1);
				}
			}
		} else
		{
			add = get(0, 0, n - 1, x, n - 1) + get(0, 0, n - 1, 0, next);
			int prev = x - k;
			if(prev >= 0)
			{
				add += get(0, 0, n - 1, prev + 1, x);
			} else
			{
				add += get(0, 0, n - 1, 0, x);
				prev += n;
				if(prev + 1 < n)
				{
					add += get(0, 0, n - 1, prev + 1, n - 1);
				}
			}
		}
		ans += ll(add + 1);
		if(i + 1 == n)
		{
			--ans;
		}
		printf("%lld ", ans);
		update(0, 0, n - 1, x);
	}

	return 0;
}

