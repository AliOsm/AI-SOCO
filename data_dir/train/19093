#include <bits/stdc++.h>

using namespace std;

typedef signed long long int ll;
typedef unsigned long long int ull;

#define sz(x) ((int)(x).size())
#define all(vector) (vector).begin(),(vector).end()

#define mp make_pair
#define pb push_back

const ll MAXN = 500000;

ll n, m, p[MAXN], prefBal[MAXN];

ll cntPosBal[MAXN][2], cntNegBal[MAXN][2];

void init()
{
    for (int i = 0; i < MAXN; i++)
    {
        cntNegBal[i][0] = 0;
        cntNegBal[i][1] = 0;
        cntPosBal[i][0] = 0;
        cntPosBal[i][1] = 0;
    }
    return;
}

void solve()
{
    cin >> n >> m;
    ll posm = 0;
    for (ll i = 0; i < n; i++)
    {
        cin >> p[i];
        if (p[i] == m)
        {
            posm = i;
        }
    }
    prefBal[0] = 0;
    if (p[0] < m)
    {
        prefBal[0]--;
    }
    else
    {
        prefBal[0]++;
    }
    for (ll i = 1; i < n; i++)
    {
        prefBal[i] = prefBal[i - 1];
        if (p[i] < m)
        {
            prefBal[i]--;
        }
        else
        {
            prefBal[i]++;
        }
    }
    cntPosBal[0][0]++;
    for (ll i = 0; i < posm; i++)
    {
        if (prefBal[i] >= 0)
        {
            cntPosBal[prefBal[i]][(i + 1) % 2]++;
        }
        else
        {
            cntNegBal[-prefBal[i]][(i + 1) % 2]++;
        }
    }
    ll ans = 0;
    for (ll i = posm; i < n; i++)
    {
        ll needBal1 = prefBal[i] - 1;
        ll needBal2 = prefBal[i] - 2;
        if ((i + 1) % 2 == 0)
        {
            if (needBal1 >= 0)
            {
                ans += cntPosBal[needBal1][1];
            }
            else
            {
                ans += cntNegBal[-needBal1][1];
            }
            if (needBal2 >= 0)
            {
                ans += cntPosBal[needBal2][0];
            }
            else
            {
                ans += cntNegBal[-needBal2][0];
            }
        }
        else
        {
            if (needBal1 >= 0)
            {
                ans += cntPosBal[needBal1][0];
            }
            else
            {
                ans += cntNegBal[-needBal1][0];
            }
            if (needBal2 >= 0)
            {
                ans += cntPosBal[needBal2][1];
            }
            else
            {
                ans += cntNegBal[-needBal2][1];
            }
        }
    }
    cout << ans;
    return;
}

signed main()
{
    ios_base::sync_with_stdio(0);
    cout.tie(0);
    cin.tie(0);
    init();
    solve();
    return 0;
}
