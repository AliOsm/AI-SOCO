#include <bits/stdc++.h>
using namespace std;

#define pii             pair<LL , LL >
#define inf             1111111111
#define in(a)           scanf("%I64d", &a)
#define ins(a)          scanf("%s", a)
#define in2(a, b)       scanf("%I64d%I64d", &a, &b)
#define in3(a, b, c)    scanf("%I64d%I64d%I64d", &a, &b, &c)
#define mp              make_pair
#define vi              vector<LL >
#define _ceil(n, a)     ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define cl              clear()
#define sz              size()
#define pn              printf("\n")
#define pr(a)           printf("%I64d\n", a)
#define prs(a)          printf("%I64d ", a)
#define pr2(a, b)       printf("%I64d %I64d\n", a, b)
#define pr3(a, b, c)    printf("%I64d %I64d %I64d\n", a, b, c)
#define pb              push_back
#define mem(a, b)       memset((a), (b), sizeof(a))
#define all(X)          (X).begin(), (X).end ()
#define iter(it, X)     for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
#define ext(a)          {printf("%s\n", a); return 0;}
#define oka(x, y)       ((x)>=0&&(x)<row&&(y)>=0&&(y)<col)
#define x               first
#define y               second
#define lc              (2*i)
#define rc              (2*i+1)

#define prr(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); pn;}
vector<string> split(const string& s, char c) {
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c))
		v.emplace_back(x);
	return move(v);
}
void err(vector<string>::iterator it) {}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
	cerr <<a<<" ";
	err(++it, args...);
}

typedef long long LL;
//LL  dx[]={1,0,-1,0};LL dy[]={0,1,0,-1}; //4 Direction
//LL  dx[]={1,1,0,-1,-1,-1,0,1,0};LL dy[]={0,1,1,1,0,-1,-1,-1,0};//8 direction
//LL  dx[]={2,1,-1,-2,-2,-1,1,2};LL dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(LL n, LL pos) {return (n & (1<<pos))>>pos;} //typecast 1 in case of int
//LL  on(LL n, LL pos) {return n | (1<<pos);} //typecast 1 in case of int
//LL  off(LL n, LL pos) {return n & ~(1<<pos);} //typecast 1 in case of int
//bool operator < (const data &d) const{return cost<d.cost;} //reverse in priority queue

const LL M = 200010, mod = 1000000007;
vi A[M];
LL val[M], weight[M], lazy[M];
LL pos[M], ans[M];
multiset < LL > S[M];

void Merge(LL u, LL v)
{
    if (S[pos[v]].size() > S[pos[u]].size()) swap(pos[u], pos[v]);
    LL a = pos[u], b = pos[v];
    multiset< LL > :: iterator it;
    iter(it, S[b])
    {
        S[a].insert(*it + lazy[b] - lazy[a]);
    }
}

void dfs(LL u)
{
    lazy[pos[u]] = 0;
    for (LL i = 0; i<A[u].sz; i++)
    {
        LL v = A[u][i];
        dfs(v);
        Merge(u, v);
    }

    multiset< LL > :: iterator it;
    vi temp;
    iter(it, S[pos[u]])
    {
        if (*it + lazy[pos[u]] < 0) temp.pb(*it);
        else break;
    }

    for (LL i=0; i<temp.sz; i++)
    {
        it = S[pos[u]].lower_bound(temp[i]);
        S[pos[u]].erase(it);
    }

    //prr(u, pos[u], val[u] - lazy[pos[u]], lazy[pos[u]], lazy[pos[u]] - weight[u]);

    ans[u] = S[pos[u]].size();
    S[pos[u]].insert(val[u] - lazy[pos[u]]);
    lazy[pos[u]] -= weight[u];
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("C:\\Users\\Dell\\Desktop\\in.txt", "r", stdin);
//    freopen("C:\\Users\\Dell\\Desktop\\in.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);


    LL n, i, j, k, temp;

    in(n);
    for (i=1; i<=n; i++) in(val[i]), pos[i] = i;
    for (i=2; i<=n; i++)
    {
        in2(k, weight[i]);
        A[k].pb(i);
    }

    dfs(1);
    for (i=1; i<=n; i++) prs(ans[i]);
    pn;

return 0;
}

