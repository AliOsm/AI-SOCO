#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef unsigned long long ull;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;

const int N = 200010;
const int MX = 123456;
const int mod = (int)1e9 + 7;
const int base = 97;
const ull BS1 = 10000019ULL;
const int INF = (1 << 29);

template < class T > inline void fastScan(T &x){
    register char c = getchar();
    int neg = 0; x = 0;
    for(   ; (c < 48 || c > 57) && (c != '-'); c = getchar());
    if(c == '-') { neg = 1; c = getchar(); }
    for(   ; c > 47 && c < 58; c = getchar()){
        x = (x << 1) + (x << 3) + c - 48;
    }
    if(neg) x = -x;
}

// OrderedSet
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// template < typename T > using ordered_set = tree < T, null_type, greater < T >, rb_tree_tag, tree_order_statistics_node_update >;

//typedef uint64_t hash_t;
//mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
//const int HASH_COUNT = 2;
//const hash_t HASH_P = (uint32_t)-13337;
//uniform_int_distribution<hash_t> MULT_DIST(0.25 * HASH_P, 0.75 * HASH_P);
//const hash_t HASH_MULT[HASH_COUNT] = {MULT_DIST(rng), MULT_DIST(rng)};

int n, k;
ll answer;
int indus[N];
int dp[N];
int depth[N];
int taken[N];

struct Node {
  int v;
  Node(){}
  Node(int v): v(v){
  }
};

struct as {
  bool operator () (Node &a, Node &b){
//    if(depth[a.v] != depth[b.v]){
//      return depth[a.v] < depth[b.v];
//    }
    return depth[a.v] - dp[a.v] < depth[b.v] - dp[b.v];
  }
};

vector < int > g[N];
vector < pair < int , int > > last;

priority_queue < Node, vector < Node >, as > pq;

void go(int u, int par, int dep){
  dp[u] = 1;
  depth[u] = dep;
  for(int i = 0; i < g[u].size(); i++){
    int v = g[u][i];
    if(v != par){
      go(v, u, dep + 1);
      dp[u] += dp[v];
    }
  }
}

void f(int u, int par, int sum){
  if(indus[u] == 1){
    answer += sum;
  }
  for(int i = 0; i < g[u].size(); i++){
    int v = g[u][i];
    if(v != par){
      f(v, u, sum + (1 - indus[u]));
    }
  }
}

int main(){
  fastScan(n);
  fastScan(k);
  for(int i = 1; i < n; i++){
    int u, v;
    fastScan(u);
    fastScan(v);
    g[u].pb(v);
    g[v].pb(u);
  }
  go(1, -1, 1);
  //sort(last.begin(), last.end(), mySrt);
  for(int i = 1; i <= n; i++){
    pq.push(Node(i));
    //cout << i << '\n';
  }
  //cout << "hello ... " << '\n';
  while(k > 0){
    Node u = pq.top();
    pq.pop();
    //cout << u.v << " " << pq.size() << '\n';
    k--;
    //cout << " K : " << k << '\n';
    indus[u.v] = 1;
  }
  //cout << "done.." << '\n';
//  for(int i = 1; i <= n; i++){
//    cout << indus[i] << " ";
//  } cout << '\n';
  f(1, -1, 0);
  printf("%lld\n", answer);
}
