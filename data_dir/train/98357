#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
// #define int long long
#define idx(v,x) (lower_bound(v.begin(), v.end(),(x))-v.begin())
map<int,vector<int> > m;
inline int get(int l, int r, vector<int> &v)
{
    int ans = upper_bound(v.begin(), v.end(), r) - upper_bound(v.begin(), v.end(), l-1);
    return ans;
}
struct s{
    int x,r,q;
    const bool operator < (const s &r) const {
        return r.r < this->r;
    }
};
vector<vector<int> > bit;
typedef tree<pair<int, int>,null_type,less<pair<int, int>>,rb_tree_tag,tree_order_statistics_node_update> order_set;
vector<order_set> ost;
int T=1;
void ost_insert(order_set &x, int val)
{
    x.insert({val,T++});
}
int upper_bound(order_set &x, int val)
{
    return x.order_of_key({val+1,0});
}
int32_t main() {
    ios::sync_with_stdio(false);cin.tie(0);
    int n,k;
    cin>>n>>k;
    vector<s> v(n);
    vector<int> c;
    c.reserve(2*(k+1)*n);
    for(int i=0;i<n;i++)
    {
        cin>>v[i].x>>v[i].r>>v[i].q;
        for(int j=v[i].q-k;j<=v[i].q+k;j++)
        {
            c.emplace_back(j);
        }
    }
    sort(c.begin(), c.end());
    c.erase(unique(c.begin(),c.end()),c.end());
    ost.resize(c.size());
    sort(v.begin(), v.end());
    long long ans = 0;
    for(int i=0;i<n;i++)
    {
        int loc;
        for(int j=v[i].q-k;j<=v[i].q+k;j++)
        {
            loc = idx(c,j);
            ans += upper_bound(ost[loc],v[i].x+v[i].r)-upper_bound(ost[loc],v[i].x-v[i].r-1);
        }
        loc = idx(c,v[i].q);
        ost_insert(ost[loc],v[i].x);
    }
    cout<<ans;
    return 0;
}