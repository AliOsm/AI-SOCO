//raja1999

//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,avx,avx2")

#include <bits/stdc++.h>
#include <vector>
#include <set>
#include <map>
#include <string> 
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <utility>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iomanip> 
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
//setbase - cout << setbase (16)a; cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 <<endl;prints xxx77
//setprecision - cout << setprecision (14) << f << endl; Prints x.xxxx
//cout.precision(x)  cout<<fixed<<val;  // prints x digits after decimal in val

using namespace std;
using namespace __gnu_pbds;
#define f(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) f(i,0,n)
#define fd(i,a,b) for(i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define vi vector< int >
#define vl vector< ll >
#define ss second
#define ff first
#define ll long long
#define pii pair< int,int >
#define pll pair< ll,ll >
#define sz(a) a.size()
#define inf (1000*1000*1000+5)
#define all(a) a.begin(),a.end()
#define tri pair<int,pii>
#define vii vector<pii>
#define vll vector<pll>
#define viii vector<tri>
#define mod (1000*1000*1000+7)
#define pqueue priority_queue< int >
#define pdqueue priority_queue< int,vi ,greater< int > >
//#define int ll

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;


//std::ios::sync_with_stdio(false);
int cnt[30];
string s,res[100005];
int fill(int i){
	int j;
	f(j,i,26){
		while(cnt[j]--){
			res[0]+=char(i+'a');
		}
	}
	return 0;
}
main(){
	std::ios::sync_with_stdio(false); cin.tie(NULL);
	int t;
	cin>>t;
	while(t--){
		int n,k,id,fl=0,i,sum,j;
		vi v;
		cin>>n>>k;
		cin>>s;
		rep(i,30){
			cnt[i]=0;
		}
		rep(i,s.length()){
			cnt[s[i]-'a']++;
		}
		rep(i,k){
			res[i]="";
		}
		id=0;
		int gg=0;
		rep(i,26){
			if(cnt[i]!=0){
				gg++;
				v.pb(i);
			}
		}
		if(cnt[v[0]]>=k){
			if(gg==1){
				rep(i,cnt[v[0]]/k){
					cout<<char('a'+v[0]);
				}
				if(cnt[v[0]]%k){
					cout<<char('a'+v[0]);
				}
			}
			else{
				if(cnt[v[0]]>k){
					rep(i,cnt[v[0]]-(k-1)){
						cout<<char('a'+v[0]);
					}
					f(j,1,v.size()){
						while(cnt[v[j]]--){
							cout<<char('a'+v[j]);
						}
					}
				}
				else{
					if(gg==2){
						cout<<char('a'+v[0]);
						rep(i,cnt[v[1]]/k){
							cout<<char('a'+v[1]);
						}
						if(cnt[v[1]]%k){
							cout<<char('a'+v[1]);
						}
					}
					else{
						rep(i,cnt[v[0]]-(k-1)){
							cout<<char('a'+v[0]);
						}
						f(j,1,v.size()){
							while(cnt[v[j]]--){
								cout<<char('a'+v[j]);
							}
						}
					}
				}
			}
		}
		else{
			sum=0;
			rep(i,v.size()){
				sum+=cnt[v[i]];
				if(sum>=k){
					cout<<char('a'+v[i]);
					break;
				}
			}
		}
		cout<<endl;
	}
	return 0;
} 
