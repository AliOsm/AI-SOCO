#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <assert.h>
#include <bitset>
#include <map>
#include <set>

using namespace std;

int t[455555];
int a[455555];
int p[455555];


void build (int a[], int v, int tl, int tr) {
	if (tl == tr)
		t[v] = a[tl];
	else {
		int tm = (tl + tr) / 2;
		build (a, v*2, tl, tm);
		build (a, v*2+1, tm+1, tr);
	}
}

void update (int v, int tl, int tr, int l, int r, int add) {
	if (l > r)
		return;
	if (l == tl && tr == r)
		t[v] += add;
	else {
		int tm = (tl + tr) / 2;
		update (v*2, tl, tm, l, min(r,tm), add);
		update (v*2+1, tm+1, tr, max(l,tm+1), r, add);
	}
}

int get (int v, int tl, int tr, int pos) {
	if (tl == tr)
		return t[v];
	int tm = (tl + tr) / 2;
	if (pos <= tm)
		return t[v] + get (v*2, tl, tm, pos);
	else
		return t[v] + get (v*2+1, tm+1, tr, pos);
}

int main()
{
    int n;
    cin >> n;
    for (int i=0;i<n;i++)
    {
        int x;
        cin >> x;
        p[x-1]=i;
    }
    for (int i=0;i<n;i++)
    {
        int x;
        cin >> x;
        a[i]=p[x-1];
    }

    int ans=0;

    for (int i=0;i<n;i++)
    {
        int x=get(1,0,n-1,a[i]);
        if (x<a[i])
            ++ans;
        update(1,0,n-1,a[i]+1,n-1,1);
    }

    cout << ans;

    return 0;
}
