//ITNOA
#include<bits/stdc++.h> 

using namespace std;
 
#define scan(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)
char _;

//#define int long long
#define rep(i, s, e) for(int i = s; i < e; i ++)
#define X first
#define Y second
 
typedef long long ll;
typedef long double ld;

const int maxN = 300 + 5;
const int maxM = 20000 + 5;
const int mod = 1000*1000*1000 + 7;
const int base = 701;
const int SQ = 500;

int head[maxN], cap[maxM], nex[maxM], to[maxM], cost[maxM], cnt;

void add(int v, int u, int c, int cos)
{
    nex[cnt] = head[v]; to[cnt] = u; cap[cnt] = c; cost[cnt] = cos; head[v] = cnt ++;
    nex[cnt] = head[u]; to[cnt] = v; cap[cnt] = 0; cost[cnt] = -cos; head[u] = cnt ++;
}
int source, sink;
int q[maxM];
int dis[maxN], id[maxN], mn[maxN];
bool mark[maxN];

int res;
int SPFA()
{
    int st = 0, en = 0;
    fill(dis,dis+maxN,mod);
    dis[source] = 0; mark[source] = 1;
    q[en++] = source; mn[source] = mod;
    while(st < en)
    {
	int v = q[st++];
	mark[v] = 0;
	for(int e = head[v]; e != -1; e = nex[e])
	{
	    if(cap[e] && dis[to[e]] > dis[v] + cost[e])
	    {
		dis[to[e]] = dis[v] + cost[e];
		mn[to[e]] = min(mn[v], cap[e]);
		id[to[e]] = e;
		if(mark[to[e]] == 0)
		{
		    q[en++] = to[e];
		    mark[to[e]] = 1;
		}
	    }
	}
    }

    if(dis[sink] == mod) return false;
    res += dis[sink] * mn[sink];
    
    int v = sink;
    while(v != source)
    {
	int e = id[v];
	cap[e] -= mn[sink]; cap[e^1] += mn[sink];
	v = to[e^1];
    }
    return mn[sink];
}

int get_max_flow()
{
    int ans = 0, tmp;
    while((tmp = SPFA()))
	ans += tmp;
    return ans;
}

int cc[26], ted[26];
int32_t main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    memset(head,-1,sizeof head);
    string t; cin >> t;
    rep(i,0,(int)t.size())
	cc[t[i] - 'a'] ++;
    int n; cin >> n;
    source = 0; sink = n + 26 + 1;
    rep(i,0,26)
	add(n+i+1,sink,cc[i],0);
    rep(i,1,n+1)
    {
	memset(ted,0,sizeof ted);
	string s; int a; cin >> s >> a;
	add(source,i,a,i);

	rep(j,0,(int)s.size())
	    ted[s[j]-'a'] ++;
	rep(j,0,26)
	    add(i,n+j+1,ted[j],0);
    }

    int ss = get_max_flow();
    if(ss != (int)t.size()) { cout << -1 << endl; return 0; }    

    cout << res << endl;
    return 0;
}
