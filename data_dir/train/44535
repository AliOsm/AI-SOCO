// Author : Mohamed Sameh
#include<bits/stdc++.h>
using namespace std ;

typedef long long ll ;
////////////////////////////////////////////////////////////////////
#define pf push_front
#define pb push_back
#define f first
#define s second
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define M_P make_pair
//freopen("in.txt","r",stdin);
//freopen("out.txt","w",stdout);
int ReadInt ()
{
    int t ;
    cin >> t ;
    return t ;
}
ll ReadLong ()
{
    ll t ;
    cin >> t ;
    return t ;
}
int main()
{
    int n, k ;
    cin >> n >> k ;
    map <int,int  > Frq ;
    set <int> Fav ;
    int A[n];
    for (int i = 0 ; i  < n ; i ++ )
    {
        cin >> A[i];

    }

    for (int j =0 ; j < k && j < n ; j++)
            {
                if (  ++Frq[ A[j] ] == 1   )
                    Fav.insert( A[j] );
                else
                    Fav.erase( A[j] );

            }
             if ( Fav.size() != 0  )
        {
            set <int> ::iterator it = Fav.end() ;
            it--;
            cout << *it << "\n";
        }
        else
        {
            cout << "Nothing\n";
        }


    for (int i =1 ; i < n ; i++)
    {

        if ( i +  k - 1 >= n )
            break ;
        if (  --Frq [ A[i-1]  ] == 1  )
            Fav.insert( A[i-1 ]) ;
    else
        Fav.erase( A[ i-1]);
    if ( Frq [ A[i-1] ] < 0 ) Frq [ A[ i-1] ] = 0;
    if (  ++Frq[  A[ i+k-1  ] ] == 1  )
        Fav.insert( A [i+k-1] ) ;
    else
        Fav.erase( A[i+k-1]) ;





        if ( Fav.size() != 0  )
        {
            set <int> ::iterator it = Fav.end() ;
            it--;
            cout << *it << "\n";
        }
        else
        {
            cout << "Nothing\n";
        }
    }

    return 0;
}

/*
map < string  , int   > Projects ;
map <string , string > Students ;
map <string , int > Block ;
string Proj_Name ;
string Stu_Name ;
bool m (pair< int , string > x , pair< int , string > y )
{
    if (x.f > y.f )
        return true ;
    else if (x.f < y.f)
        return false ;
    return ( x.s < y.s );
}
void Finsh_Print ()
{
    vector < pair < int , string > >Temp ;
    for (auto  p : Projects )
    {
        Temp.pb ({p.s , p.f });
    }
    sort (all(Temp) , m);
    for (int i= 0; i< Temp.size() ; i++)
        cout << Temp[i].s << " " << Temp[i].f << "\n";
    Projects.clear() ; Students.clear() ; Block.clear() ;
}
int main ()
{


    getline(cin , Proj_Name);
    while (1)
    {

        if ( Proj_Name == "0")
            break ;
        if ( Projects[Proj_Name] == 0 )
        {
            Projects[Proj_Name] =0 ;
        }
        while (1)
        {
            getline(cin , Stu_Name);
            if ( Stu_Name[0] >= 'A' &&Stu_Name[0] <= 'Z')
            {
                Proj_Name = Stu_Name ;
                break ;
            }
            else if ( Stu_Name[0] == '1' )
            {
                Finsh_Print () ;
                getline(cin , Proj_Name);
                break ;
            }

            if (Students[Stu_Name] == "" )
            {
                Students[Stu_Name] = Proj_Name ;
                Projects[Proj_Name]++;
            }else if (Block [Stu_Name]||Students[Stu_Name] == Proj_Name )
            {
                continue ;
            }
            else
            {
                if (Projects[Students[Stu_Name]] >= 1 )
                Projects[Students[Stu_Name]]--;
                Block[Stu_Name]=1;

            }




        }

    }

   return 0 ;
}


*/



