#include <bits/stdc++.h>

using namespace std;

const int N = 100005;

int n, m, s[N], p[N];
vector<int> vet[N], nvet[N];
int k;

vector<pair<int, int>> all; // <kind, from>
vector<tuple<int, int, int>> ans;
int pr[5*N];

int fn(int i){
    return i == pr[i] ? i : pr[i] = fn(pr[i]);
}

int find(int id, int val){
    if(binary_search(vet[id].begin(), vet[id].end(), val))
        return true;
    if(binary_search(nvet[id].begin(), nvet[id].end(), val))
        return true;
    return false;
}

vector<int> qn[N];
int id[N], sz;

int main(){

    scanf("%d %d", &n, &m);

    for(int i = 1; i <= n; i++){
        scanf("%d", s+i);
        k += s[i];
        vet[i].resize(s[i]);
        for(int j = 0; j < s[i]; j++) scanf("%d", &vet[i][j]);
        sort(vet[i].begin(), vet[i].end());
    }

    k = (k + n - 1) / n;

    for(int i = 1; i <= n; i++) if(s[i] > k){
        for(int x : vet[i]) all.emplace_back(x, i);
    }

    sort(all.begin(), all.end());

    for(int i = 0; i <= (int)all.size(); i++){
        pr[i] = i;
    }

    for(int i = 1; i <= n; i++) if(s[i] < k){
        qn[ s[i] ].push_back(i);
    }

    for(int j = 0; j < k; j++){
        for(int x : qn[j]) id[sz++] = x;
        for(int w = 0, u; w < sz; w++){
            u = id[w];

            int &i = p[u];
            i = fn(i);
            while(i < (int)all.size()){
                if(s[ all[i].second ] <= k){
                    pr[i] = i+1;
                    i = fn(i+1);
                }
                else if(find(u, all[i].first))
                    i = fn(i+1);
                else break;
            }
            if(i == (int)all.size()) continue;
            ans.emplace_back(all[i].second, u, all[i].first);
            nvet[u].push_back(all[i].first);
            pr[i] = i+1;
            s[ all[i].second ]--;
            s[u]++;
        }
    }

    printf("%d\n", (int)ans.size());

    int a, b, c;
    for(auto &e : ans){
        tie(a, b, c) = e;
        printf("%d %d %d\n", a, b, c);

    }

}
