#include<bits/stdc++.h>
#define LL long long
#define fi first
#define se second
#define mk make_pair
#define pii pair<int, int>

using namespace std;

const int N = 2e5 + 7;
const int M = 1e6 + 7;
const int inf = 0x3f3f3f3f;
const LL INF = 0x3f3f3f3f3f3f3f3f;
const int mod = 1e9 +7;

int n, k, tot;
LL a[N], b[N];
bool flag[N];
int main() {
    scanf("%d%d", &n, &k);
    for(int i = 1; i <= n; i++) {
        scanf("%lld", &a[i]);
    }

    for(int i = 1; i <= n; i++) {
        if(a[i] > 1) b[++tot] = a[i];
        else {
            int cnt = 0;
            while(i <= n && a[i] == 1) {
                i++; cnt++;
            }
            i--;
            b[++tot] = cnt;
            flag[tot] = true;
        }
    }

//    for(int i = 1; i <= tot; i++)
//        printf("%2lld ", b[i]);
//    puts("");
//    for(int i = 1; i <= tot; i++)
//        printf("%2d ", flag[i]);
//    puts("");
    LL ans = 0;
    LL up = 1e11;
    for(int i = 1; i <= tot; i++) {
        if(flag[i]) {
            if(k == 1) ans += b[i];
            continue;
        }

        LL cnt1 = 0, cnt2, now = b[i], sum = b[i];
        if(flag[i - 1]) cnt1 = b[i - 1];
        if(k == 1) ans++;
        for(int j = i + 1; j <= tot; j++) {
            if(flag[j]) {
                cnt2 = b[j];
                if(now % k == 0) {
                    LL need = now / k, all = cnt1 + cnt2;
                    if(need > sum) {
                        need -= sum;
                        all--, need--;
                        if(need <= all) {
                            //printf("%d %d  now:%lld  sum:%lld  ret:%lld  cnt1:%lld  cnt2:%lld\n", i, j, now, sum, now / k, cnt1, cnt2);
                            ans += all - need + 1;
                            if(cnt1 > need) ans -= cnt1 - need;
                            if(cnt2 - 1 > need) ans -= cnt2 - 1 - need;
                        }
                    }
                }
                sum += b[j];
            } else {
                now *= b[j]; sum += b[j];
                if(now > up) break;

                if(now % k == 0) {
                    LL ret = now / k;
                    if(ret >= sum && ret - sum <= cnt1) {
                        //printf("%d %d  now:%lld  sum:%lld  ret:%lld\n", i, j, now, sum, ret);
                        ans++;
                    }
                }
            }
        }
    }
    printf("%lld\n", ans);
    return 0;
}
/*
90 45
15 1 1 1 1 3 1 1 5 3 5 1 1 15 15 3 1 15 1 1 1 15 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 15 1 1 1 1 1 1 1 1 1 15 1 1 1 1 5 1 1 1 1 15
1 1 1 15 1 1 1 1 1 1 1 1 3 1 1 15 3 1 1 1 15 15 1 1 1 1 15
*/
