#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
using namespace std;
#define MS0(I) memset(I, 0, sizeof(I));
#define MS1(I) memset(I, -1, sizeof(I));
#define rep(i, n) for(int i = 0; i < (n); ++i)
#define rep1(i, s, n) for(int i = (s); i < (n); ++i)
#define per1(i, a, b) for(int i = a; i >= b; --i)
#define DRI(A) int A; scanf("%d", &A);
#define DRII(A, B) int A, B; scanf("%d %d", &A, &B);
#define DRIII(A, B, C) int A, B, C; scanf("%d %d %d", &A, &B, &C);
#define DRL(A) long long A; scanf("%lld", &A);
#define DRLL(A, B) long long A, B; scanf("%lld %lld", &A, &B);
#define DRLLL(A, B, C) long long A, B, C; scanf("%lld %lld %lld", &A, &B, &C);
#define SZ(X) ((int)X.size() )
#define MP make_pair 
#define pb push_back
#define F first
#define S second
#define ALL(I) (I).begin(), (I).end()
typedef long long LL;
typedef unsigned long long ULL;
typedef double DB;
typedef long double LDB;
typedef pair<int, int> PII; 
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;
typedef pair<LL, LL> PLL;
const double eps = 1e-9;
const double PI = acos(-1);
const LL INFF = 1e18;
const int INF = 1e9+1;
const int mod = 1e9+7;
const int MAX = 3e5+7;
#define ls p<<1
#define rs p<<1|1
struct node{
  int l, r;
  int mid(){
    return (l + r) >> 1;
  }
  int ll, rr;
  int len;
}pt[MAX<<2];
int gp[MAX];
void pushup(int p){
  pt[p].len = max(pt[rs].len, pt[ls].len);
  if(pt[rs].ll && pt[ls].rr) pt[p].len = max(pt[p].len, pt[rs].ll - pt[ls].rr + 1);
  if(pt[ls].ll) pt[p].ll = pt[ls].ll;
  else pt[p].ll = pt[rs].ll;
  if(pt[rs].rr) pt[p].rr = pt[rs].rr;
  else pt[p].rr = pt[ls].rr;
  return ;
}
void bd2(int l, int r, int p){
  pt[p].l = l; pt[p].r = r;
  if(l == r){
    if(gp[l]) pt[p].len = 1, pt[p].ll = pt[p].rr = l;
    return ;
  }
  int mid = (l + r) >> 1;
  bd2(l, mid, ls);
  bd2(mid+1, r, rs);
  pushup(p);
  return ;
}
void md2(int pp, int t, int p){
  if(pt[p].l == pt[p].r){
    if(t) pt[p].len = 1, pt[p].ll = pt[p].rr = pt[p].l;
    else pt[p].len = pt[p].ll = pt[p].rr = 0;
    return ;
  }
  int mid = pt[p].mid();
  if(pp <= mid) md2(pp, t, ls);
  else md2(pp, t, rs);
  pushup(p);
  return ;
}
LL a[MAX];
struct nd{
  int l, r;
  int mid(){
    return (l + r) >> 1;
  }
  LL v, d;
}sg[MAX<<2];
inline void push(int p){
  if(sg[ls].l == sg[ls].r) sg[ls].v += sg[p].d;
  else{
    if(sg[ls].v) sg[ls].v += sg[p].d;
    sg[ls].d += sg[p].d;
  }
  if(sg[rs].l == sg[rs].r) sg[rs].v += sg[p].d;
  else{
    if(sg[rs].v) sg[rs].v += sg[p].d;
    sg[rs].d += sg[p].d;
  }
  sg[p].d = 0;
  return ;
}
void bd(int l, int r, int p){
  sg[p].l = l; sg[p].r = r;
  if(l == r){
    sg[p].v = a[l]; return ;
  }
  int mid = (l + r) >> 1;
  bd(l, mid, ls);
  bd(mid+1, r, rs);
  if(sg[ls].v && sg[rs].v && sg[ls].v == sg[rs].v) sg[p].v = sg[ls].v;
  else sg[p].v = 0;
  return ;
}
void md(int l, int r, LL v, int p){
  if(sg[p].l == l && sg[p].r == r){
    if(l == r) sg[p].v += v;
    else{
      if(sg[p].v) sg[p].v += v;
      sg[p].d += v;
    }
    return ;
  }
  push(p);
  int mid = sg[p].mid();
  if(r <= mid) md(l, r, v, ls);
  else if(l > mid) md(l, r, v, rs);
  else{
    md(l, mid, v, ls); md(mid + 1, r, v, rs);
  }
  if(sg[ls].v && sg[rs].v && sg[ls].v == sg[rs].v) sg[p].v = sg[ls].v;
  else sg[p].v = 0;
}
LL qy(int pp, int p){
  if(sg[p].l == sg[p].r) return sg[p].v;
  push(p);
  int mid = sg[p].mid();
  if(pp <= mid) return qy(pp, ls);
  else return qy(pp, rs);
}
void go(int p){
  if(pt[p].l == pt[p].r){
    if(pt[p].len) printf("%d ", pt[p].r);
    return ;
  }
  go(ls); go(rs);
  return ;
}
int main(void){
  DRI(n);
  rep1(i, 1, n+1) scanf("%lld", a + i);
  gp[1] = gp[n] = 1;
  rep1(i, 2, n){
    if(a[i-1] >= a[i] && a[i] <= a[i+1]) gp[i] = 1;
    else if(a[i-1] == a[i] || a[i] == a[i+1]) gp[i] = 1;
  }
  bd(1, n, 1);
  bd2(1, n, 1);
  DRI(m);
  while(m--){
    DRIII(l, r, v);
    md(l, r, v, 1);
    LL vl = qy(l, 1), vr = qy(r, 1);
    if(l != 1){
      LL vll = qy(l-1, 1), vlr;
      if(l != n){
        vlr = qy(l+1, 1);
        if(vll >= vl && vl <= vlr) md2(l, 1, 1);
        else if(vll == vl || vl == vlr) md2(l-1, 1, 1);
        else md2(l, 0, 1);
      }
      if(l-1 != 1){
        LL tp = qy(l-2, 1);
        if(tp >= vll && vll <= vl) md2(l-1, 1, 1);
        else if(tp == vll || vll == vl) md2(l-1, 1, 1);
        else md2(l-1, 0, 1);
      }
    }
    if(r != n){
      LL vrl, vrr = qy(r+1, 1);
      if(r != 1){
        vrl = qy(r-1, 1);
        if(vrl >= vr && vr <= vrr) md2(r, 1, 1);
        else if(vrl == vr || vr == vrr) md2(r, 1, 1);
        else md2(r, 0, 1);
      }
      if(r+1 != n){
        LL tp = qy(r+2, 1);
        if(vr >= vrr && vrr <= tp) md2(r+1, 1, 1);
        else if(vr == vrr && vrr == tp) md2(r+1, 1, 1);
        else md2(r+1, 0, 1);
      }
    }
    int ans = pt[1].len;
    if(ans == 2 && sg[1].v) ans = 1;
    printf("%d\n", ans);
  }
  return 0;
}
