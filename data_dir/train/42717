#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace std;
using namespace __gnu_pbds;
typedef tree<
        pair<int, int> , // change type
        null_type,
        less<pair<int, int> >, // change type
        rb_tree_tag,
        tree_order_statistics_node_update>
        ordered_set;


typedef complex<int> point;
#define dp(a, b) ((conj(a) * b).real())
#define vec(a, b) (b - a)
#define cp(a, b) ((conj(a) * b).imag())
#define angle(a) (atan2(a.imag(), a.real()))
#define rotate0(a, angle) (a * exp(point(0, angle)))
#define length(a) (hypot(a.imag(), a.real()))
#define rotateAr(a, angle, around) (rotate0(((a) - (around)),(angle)) + around)
#define reflect(a, m) (conj((a)/(m)) * (m))
#define normalize(a) ((a) / length(a));
typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define per(i, start, end) for(int i = (int)start-1; i >= end; --i)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-8);

long long mem[205][205][205];
vector<long long> a;
int n, k, x;
long long solve(int i, int nonRepCnt, int canRepCnt)
{
    if (nonRepCnt == k)
        return -(1LL<<40);
    if (i == n)
        return 0;
    long long &ret = mem[i][nonRepCnt][canRepCnt];
    if (~ret)
        return ret;
    ret = LLONG_MIN;
    ret = max(ret, solve(i + 1, nonRepCnt + 1, canRepCnt));
    if (canRepCnt)
    {
        ret = max(ret,a[i] + solve(i + 1, 0, canRepCnt - 1));
    }
    return ret;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
clr (mem, -1);
    cin >> n >> k >> x;
    a.resize(n);
    for (int i = 0; i < n; ++i)
        cin >> a[i];
    long long ans = solve(0,0,x);
    if (ans < 0)
        cout << -1 << '\n';
    else
        cout << ans << '\n';
    return 0;
}