#include<bits/stdc++.h>
#define int long long
using namespace std;
typedef long long ll;
typedef pair<int,int> PI;
const int INF=0x7fffffff;
map<int,int> low[1000],up[1000],onlylow[1000],onlyup[1000];
int notBoth[1000],block_l[1000],block_r[1000],blockSize;
ll sum[1000],block_up[1000],block_low[1000],up_mn[100010],low_mn[100010];
main(){
	blockSize=sqrt(100000);
	for(int i=0,idx=0;i<100000;i+=blockSize,idx++){
		block_l[idx]=i;
		block_r[idx]=min(i+blockSize-1,99999LL);
		block_up[idx]=block_low[idx]=INF;
		notBoth[idx]=block_r[idx]-block_l[idx]+1;
	}
	for(int i=0;i<100000;i++)
		up_mn[i]=low_mn[i]=INF;
	int q,o,l,r,k;
	scanf("%lld",&q);
	while(q--){
		scanf("%lld%lld%lld",&o,&l,&r);
		l--,r-=2;
		if(o==1){
			scanf("%lld",&k);
			int idx=l/blockSize;
			for(int i=l;i<=min(block_r[idx],r);i++){
				if(up_mn[i]>block_up[idx]) up_mn[i]=block_up[idx];
				if(low_mn[i]>block_low[idx]) low_mn[i]=block_low[idx];
				if(k<0){
					if(low_mn[i]==INF){
						low_mn[i]=-k;
						low[idx][low_mn[i]]++;
						if(low_mn[i]!=INF && up_mn[i]!=INF){
							sum[idx]+=low_mn[i]+up_mn[i];
							onlyup[idx][up_mn[i]]--;
						}else{
							notBoth[idx]--;
							onlylow[idx][low_mn[i]]++;
						}
					}else if(-k<low_mn[i]){
						low[idx][low_mn[i]]--;
						if(low_mn[i]!=INF && up_mn[i]!=INF)
							sum[idx]-=low_mn[i];
						else
							onlylow[idx][low_mn[i]]--;
						low_mn[i]=-k;
						low[idx][low_mn[i]]++;
						if(low_mn[i]!=INF && up_mn[i]!=INF)
							sum[idx]+=low_mn[i];
						else
							onlylow[idx][low_mn[i]]++;
					}
				}else{
					if(up_mn[i]==INF){
						up_mn[i]=k;
						up[idx][up_mn[i]]++;
						if(up_mn[i]!=INF && low_mn[i]!=INF){
							onlylow[idx][low_mn[i]]--;
							sum[idx]+=up_mn[i]+low_mn[i];
						}else{
							notBoth[idx]--;
							onlyup[idx][up_mn[i]]++;
						}
					}else if(k<up_mn[i]){
						up[idx][up_mn[i]]--;
						if(up_mn[i]!=INF && low_mn[i]!=INF)
							sum[idx]-=up_mn[i];
						else
							onlyup[idx][up_mn[i]]--;
						up_mn[i]=k;
						up[idx][up_mn[i]]++;
						if(up_mn[i]!=INF && low_mn[i]!=INF)
							sum[idx]+=up_mn[i];
						else
							onlyup[idx][up_mn[i]]++;
					}
				}
			}
			if(l/blockSize!=r/blockSize){
				idx=r/blockSize;
				for(int i=r;i>=block_l[idx];i--){
					if(up_mn[i]>block_up[idx]) up_mn[i]=block_up[idx];
					if(low_mn[i]>block_low[idx]) low_mn[i]=block_low[idx];
					if(k<0){
						if(low_mn[i]==INF){
							low_mn[i]=-k;
							low[idx][low_mn[i]]++;
							if(low_mn[i]!=INF && up_mn[i]!=INF){
								sum[idx]+=low_mn[i]+up_mn[i];
								onlyup[idx][up_mn[i]]--;
							}else{
								notBoth[idx]--;
								onlylow[idx][low_mn[i]]++;
							}
						}else if(-k<low_mn[i]){
							low[idx][low_mn[i]]--;
							if(low_mn[i]!=INF && up_mn[i]!=INF)
								sum[idx]-=low_mn[i];
							else
								onlylow[idx][low_mn[i]]--;
							low_mn[i]=-k;
							low[idx][low_mn[i]]++;
							if(low_mn[i]!=INF && up_mn[i]!=INF)
								sum[idx]+=low_mn[i];
							else
								onlylow[idx][low_mn[i]]++;
						}
					}else{
						if(up_mn[i]==INF){
							up_mn[i]=k;
							up[idx][up_mn[i]]++;
							if(up_mn[i]!=INF && low_mn[i]!=INF){
								onlylow[idx][low_mn[i]]--;
								sum[idx]+=up_mn[i]+low_mn[i];
							}else{
								notBoth[idx]--;
								onlyup[idx][up_mn[i]]++;
							}
						}else if(k<up_mn[i]){
							up[idx][up_mn[i]]--;
							if(up_mn[i]!=INF && low_mn[i]!=INF)
								sum[idx]-=up_mn[i];
							else
								onlyup[idx][up_mn[i]]--;
							up_mn[i]=k;
							up[idx][up_mn[i]]++;
							if(up_mn[i]!=INF && low_mn[i]!=INF)
								sum[idx]+=up_mn[i];
							else
								onlyup[idx][up_mn[i]]++;
						}
					}
				}
				for(int i=l/blockSize+1;i<idx;i++){
					if(k<0){
						if(-k>=block_low[i]) continue;
						auto st=low[i].upper_bound(-k);
						int cnt=0,part=0;
						for(auto it=st;it!=low[i].end();it++){
							cnt+=it->second;
							sum[i]-=(ll)it->first*it->second;
						}
						auto st2=onlylow[i].upper_bound(-k);
						for(auto it=st2;it!=onlylow[i].end();it++){
							part+=it->second;
							sum[i]+=(ll)it->first*it->second;
						}
						sum[i]+=(-k)*(cnt-part);
						low[i].erase(st,low[i].end());
						onlylow[i].erase(st2,onlylow[i].end());
						low[i][-k]+=cnt+notBoth[i];
						onlylow[i][-k]+=part+notBoth[i];
						notBoth[i]=0;
						part=0;
						for(auto it=onlyup[i].begin();it!=onlyup[i].end();it++){
							part+=it->second;
							sum[i]+=(ll)it->first*it->second;
						}
						low[i][-k]+=part;
						sum[i]+=part*(-k);
						onlyup[i].clear();
						block_low[i]=-k;
					}else{
						if(k>=block_up[i]) continue;
						auto st=up[i].upper_bound(k);
						int cnt=0,part=0;
						for(auto it=st;it!=up[i].end();it++){
							cnt+=it->second;
							sum[i]-=(ll)it->first*it->second;
						}
						auto st2=onlyup[i].upper_bound(k);
						for(auto it=st2;it!=onlyup[i].end();it++){
							part+=it->second;
							sum[i]+=(ll)it->first*it->second;
						}
						sum[i]+=k*(cnt-part);
						up[i].erase(st,up[i].end());
						onlyup[i].erase(st2,onlyup[i].end());
						up[i][k]+=cnt+notBoth[i];
						onlyup[i][k]+=part+notBoth[i];
						notBoth[i]=0;
						part=0;
						for(auto it=onlylow[i].begin();it!=onlylow[i].end();it++){
							part+=it->second;
							sum[i]+=(ll)it->first*it->second;
						}
						up[i][k]+=part;
						sum[i]+=part*k;
						onlylow[i].clear();
						block_up[i]=k;
					}
				}
			}
		}else{
			ll ans=0;
			int idx=l/blockSize;
			for(int i=l;i<=min(block_r[idx],r);i++){
				if(up_mn[i]>block_up[idx]) up_mn[i]=block_up[idx];
				if(low_mn[i]>block_low[idx]) low_mn[i]=block_low[idx];
				if(up_mn[i]<INF && low_mn[i]<INF) ans+=up_mn[i]+low_mn[i];
			}
			if(l/blockSize!=r/blockSize){
				idx=r/blockSize;
				for(int i=r;i>=block_l[idx];i--){
					if(up_mn[i]>block_up[idx]) up_mn[i]=block_up[idx];
					if(low_mn[i]>block_low[idx]) low_mn[i]=block_low[idx];
					if(up_mn[i]<INF && low_mn[i]<INF) ans+=up_mn[i]+low_mn[i];
				}
				for(int i=l/blockSize+1;i<idx;i++)
					ans+=sum[i];
			}
			printf("%lld\n",ans);
		}
	}
	return 0;
}