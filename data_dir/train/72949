#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 100;
int main() {
  // vector<int> dp(N);
  // dp[0] = 0;
  // int k = 12;
  // vector<int> can = {1, 2, k};
  // vector<int> a;
  // for (int i = 1; i < N; ++i) {
  //   a.clear();
  //   for (auto& x : can) {
  //     if (i - x >= 0) a.push_back(dp[i - x]);
  //   }
  //   sort(a.begin(), a.end());
  //   a.erase(unique(a.begin(), a.end()), a.end());
  //   int k;
  //   for (k = 0; k < a.size() && a[k] == k; ++k);
  //   dp[i] = k;
  // }
  // for (int i = 0; i < N; ++i) {
  //   cout << dp[i] << " ";
  // }
  // cout << endl;
  int cas;
  scanf("%d", &cas);
  while (cas--) {
    int n, k;
    scanf("%d%d", &n, &k);
    if (k % 3) {
      puts(n % 3 ? "Alice" : "Bob");
    } else {
      n %= k + 1;
      puts(n % 3 || n == k ? "Alice" : "Bob");
    }
  }
  return 0;
}
