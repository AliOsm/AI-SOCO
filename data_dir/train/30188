
#include <iostream>
#include <cassert>
#include <vector>
using namespace std;

struct solution_dag
{
    vector<vector<int> > v;
    int path_12;


    solution_dag() // init to 1; path 0-1, not 1-2
    {
        v=vector<vector<int> >(4);
        v[0].push_back(2);
        v[2].push_back(3);
        v[3].push_back(1);
        path_12=3;
    }

    void pow(int P)
    {
        int A=v[0][0];
        v[0].clear();

        int B=add_node();
        v[0].push_back(B);
        for(int i=0; i<P; i++)
        {
            int C=add_node();
            v[B].push_back(C);
            v[C].push_back(A);
        }

        path_12+=2;
    }

    void plus_k(int k)
    {
        int A=v[0][0];
        if(path_12==3)
        {
            for(int i=0; i<k; i++)
            {
                int temp=add_node();
                v[A].push_back(temp);
                v[temp].push_back(1);
            }
        }
        else
        {
            int prev=add_node();
            for(int i=0; i<k; i++)
            {
                int temp=add_node();
                v[A].push_back(temp);
                v[temp].push_back(prev);
            }
            for(int i=0; i<path_12-4; i++)
            {
                int next=add_node();
                v[prev].push_back(next);
                prev=next;
            }
            v[prev].push_back(1);
        }
        //v[0].clear();

        /*
        int B=add_node();
        v[0].push_back(B);
        v[B].push_back(A);

        int prev=B;
        for(int i=0; i<path_12-1; i++)
        {
            int next=add_node();
            v[prev].push_back(next);
            prev=next;
        }
        v[prev].push_back(1);

        path_12+=1;
        */
    }

    int add_node(void)
    {
        int res=v.size();
        v.push_back(vector<int>());
        return res;
    }
};

const int MX=1009;
bool ans[MX][MX];

const int LG=32;
int k_digs[LG];
const int MOD=7;

int main()
{
    ios_base::sync_with_stdio(false);
    cout.tie(NULL);

    int k;
    cin >> k;
    for(int i=0; i<LG; i++)
    {
        k_digs[i]=k%MOD;
        k/=MOD;
    }

    int it=LG-1;
    while(k_digs[it]==0)
    {
        it--;
    }
    solution_dag D;
    if(k_digs[it]!=1) D.plus_k(k_digs[it]-1);
    it--;



    while(it>=0)
    {
        if(k_digs[it]!=0)
        {
            D.pow(MOD);
            D.plus_k(k_digs[it]);
        }
        else
        {
            D.pow(MOD);
        }
        it--;
    }

    int n=D.v.size();
    cout << n << '\n';
    assert(n<=1000);

    for(int i=0; i<n; i++) for(int j=0; j<n; j++) ans[i][j]=false;
    for(int i=0; i<n; i++)
    {
        for(size_t j=0; j<D.v[i].size(); j++)
        {
            int k=D.v[i][j];
            ans[i][k]=true; ans[k][i]=true;
        }
    }



    for(int i=0; i<n; i++)
    {
        for(int j=0; j<n; j++) cout << (ans[i][j] ? 'Y' : 'N');
        cout << '\n';
    }
    return 0;
}


/*
#include <iostream>
#include <cassert>
#include <vector>
using namespace std;

struct solution_dag
{
    vector<vector<int> > v;
    int path_12;


    solution_dag() // init to 1; path 0-1, not 1-2
    {
        v=vector<vector<int> >(4);
        v[0].push_back(2);
        v[2].push_back(3);
        v[3].push_back(1);
        path_12=3;
    }

    void square(void)
    {
        int A=v[0][0];
        v[0].clear();

        int B=add_node();
        int C=add_node();
        int D=add_node();

        v[0].push_back(D);

        v[D].push_back(B);
        v[D].push_back(C);

        v[B].push_back(A);
        v[C].push_back(A);
        path_12+=2;
    }

    void plus_1(void)
    {
        int A=v[0][0];
        int prev=A;

        for(int i=0; i<path_12-2; i++)
        {
            int next=add_node();
            v[prev].push_back(next);
            prev=next;
        }
        v[prev].push_back(1);
    }

    int add_node(void)
    {
        int res=v.size();
        v.push_back(vector<int>());
        return res;
    }
};

const int MX=1009;
bool ans[MX][MX];

const int LG=32;
int k_digs[LG];

int main()
{
    //ios_base::sync_with_stdio(false);
    //cout.tie(NULL);

    int k;
    cin >> k;
    for(int i=0; i<LG; i++)
    {
        k_digs[i]=k%2;
        k/=2;
    }

    int it=LG-1;
    while(k_digs[it]==0)
    {
        it--;
        //cout << it << endl;
    }
    it--;

    solution_dag D;
    while(it>=0)
    {
        if(k_digs[it]==1)
        {
            D.square();
            D.plus_1();
        }
        else
        {
            D.square();
        }
        it--;
    }

    int n=D.v.size();
    assert(n<=1000);

    for(int i=0; i<n; i++) for(int j=0; j<n; j++) ans[i][j]=false;
    for(int i=0; i<n; i++)
    {
        for(size_t j=0; j<D.v[i].size(); j++)
        {
            int k=D.v[i][j];
            ans[i][k]=true; ans[k][i]=true;
        }
    }

    cout << n << '\n';

    for(int i=0; i<n; i++)
    {
        for(int j=0; j<n; j++) cout << (ans[i][j] ? 'Y' : 'N');
        cout << '\n';
    }
    return 0;
}
*/
