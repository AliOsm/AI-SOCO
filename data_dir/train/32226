#include <iostream>
#include <algorithm>
using namespace std;

int hasCat[100010], visited[100010];
vector<int> g[100010];
int res;
int n, m;

void dfs(int v, int c)
{
    visited[v]++;
    if (v and g[v].size()==1) { ++res; return; }

    for(w: g[v]) {
        if (visited[w]) continue;
        int nc=hasCat[w] ? c+1 : 0;
        if (nc<=m) dfs(w, nc);
    }
}

int main()
{
    cin>>n>>m;
    for(int i=0; i<n; ++i) cin>>hasCat[i];
    for(int i=0; i<n-1; ++i) {
        int a, b; cin>>a>>b;
        --a, --b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    dfs(0, hasCat[0]);
    cout<<res<<endl;
}

