#include <iostream>
#include <algorithm>
#include <set>
#include <cmath>
using namespace std;

int N, M;
set<int> A[100100]; 
int B[100100];
int need[100100];
int total = 0;
int ans[200005][3];

bool cmp(int a, int b)
{
    return A[a].size() < A[b].size();
}

void go(int a, int b, int rem)
{
    int prv = 0;
    while (rem > 0)
    {
        int cur = *A[b].upper_bound(prv);
        auto it = A[a].upper_bound(prv);
        while (it != A[a].end() && *it < cur)
            it++;
        if (it == A[a].end() || *it > cur)
        {
            A[a].insert(cur);
            A[b].erase(cur);
            ans[total][0] = b + 1;
            ans[total][1] = a + 1;
            ans[total][2] = cur;
            total++;
            rem--;
        }
        prv = cur;
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    cin >> N >> M;
    int cnt = 0;
    for (int i = 0, sz; i < N; i++)
    {
        cin >> sz;
        cnt += sz;
        for (int j = 0, x; j < sz; j++)
        {
            cin >> x;
            A[i].insert(x);
        }
        B[i] = i;
    }

    sort(B, B + N, cmp);
    for (int i = 0; i < N; i++)
    {
        if (i < N - cnt % N)
            need[B[i]] = abs(cnt/N - (int)A[B[i]].size());
        else
            need[B[i]] = abs((cnt + N - 1)/N - (int)A[B[i]].size());
    }

    int left = 0, right = N - 1;
    while (true)
    {
        while (left < N && need[B[left]] == 0)
            left++;
        while (right >= 0 && need[B[right]] == 0)
            right--;
        if (left >= right)
            break;
        int rem = min(need[B[left]], need[B[right]]);
        go(B[left], B[right], rem);
        need[B[left]] -= rem;
        need[B[right]] -= rem;
    }

    cout << total << "\n";
    for (int i = 0; i < total; i++)
        cout << ans[i][0] << " " << ans[i][1] << " " << ans[i][2] << "\n";

    return 0;
}
