#include <bits/stdc++.h>

using namespace std;

#define long long long
#define INF (long) 1e18
#define MOD (1e9 + 7)
#define pll pair<long, long>
#define pb push_back
#define FOR(i, a, b) \
    for (long i = a; i < (long) b; i++)
#define REP(i, n) FOR(i, 0, n)
#define SORT(v, atr) \
    sort(v.begin(), v.end(), \
      [](auto &a, auto &b) { return a.atr < b.atr; });
#define UNSORT(v, atr) \
    sort(v.begin(), v.end(), \
      [](auto &a, auto &b) { return a.atr > b.atr; });
#define PRINTV(v) \
    if (not v.empty()) { \
        printf("%lld", v[0]); \
        for (long _i = 1; _i < (long) v.size(); _i++) \
            printf(" %lld", v[_i]); \
        printf("\n"); \
    }

set<long> gera_primos(long n)
{
  set<long> primos;
  vector<bool> crivo(n);
  primos.insert(2);
  for (long i = 3; i <= n; i += 2) {
    if (crivo[i]) continue;
    primos.insert(i);
    for (long j = i; j <= n; j += i) {
      crivo[j] = true;
    }
  }
  return primos;
}

struct Node
{
  long id, ord, antes;
  bool visitado;
  long n;
  set<long> out;
  set<long> in;

  Node() {
    static long i = 0;
    id = i++;
  }
};


int main()
{
  long n, m;
  string s, t;
  cin >> n >> m >> s >> t;

  long minimo = INF;
  vector<long> best;
  FOR (i, 0, t.length() - s.length() + 1) {
    long cont = 0;
    vector<long> a;
    FOR (j, 0, s.length()) {
      if (t[i+j] != s[j]) {
        cont++;
        a.pb(j + 1);
      }
    }
    if (cont < minimo) {
      minimo = cont;
      best = a;
    }
  }
  printf("%lld\n", minimo);
  PRINTV(best);
}
