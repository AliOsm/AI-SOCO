#include <bits/stdc++.h>

using namespace std;
#define MAX_N 100010
const int mod = 1e9 + 7;
vector<int> G[MAX_N];
int dp[MAX_N][2], color[MAX_N];
inline void addIt(int &x, int val) {x += val; if(x >= mod) x -= mod;}
void dfs(int u, int father) {
	dp[u][1] = color[u];
	dp[u][0] = color[u]^1;
	for(vector<int>::iterator e = G[u].begin(); e != G[u].end(); e ++) {
		int v = *e;
		if(v == father)		continue;
		dfs(v, u);
		int temp[2] = {0, 0};
		addIt(temp[0], dp[u][0]*1LL*dp[v][0]%mod); // link
		addIt(temp[0], dp[u][0]*1LL*dp[v][1]%mod); // cut
		addIt(temp[1], dp[u][1]*1LL*dp[v][0]%mod); // link
		addIt(temp[1], dp[u][1]*1LL*dp[v][1]%mod); // cut
		addIt(temp[1], dp[u][0]*1LL*dp[v][1]%mod);  // link
		dp[u][0] = temp[0];
		dp[u][1] = temp[1];
	}
}

int main() {
	int N, from, to, u;
	scanf("%d", &N);
	for(int i = 0; i < N - 1; i ++) {
		scanf("%d", &from);
		G[from].push_back(i + 1);
		G[i + 1].push_back(from);
	}
	for(int i = 0; i < N; i ++)
		scanf("%d", color + i);
	dfs(0, -1);
	printf("%d\n", dp[0][1]);
	return 0;
}

