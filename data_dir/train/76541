/*
 _     _                             
| |__ | |__   __ _  __ _ _   _  __ _ 
| '_ \| '_ \ / _` |/ _` | | | |/ _` |
| |_) | | | | (_| | (_| | |_| | (_| |
|_.__/|_| |_|\__,_|\__, |\__, |\__,_|
                   |___/ |___/       
*/
#include<bits/stdc++.h>

#define ll          long long
#define pb          push_back
#define ppb         pop_back
#define	endl		'\n'
#define mii         map<ll int,ll int>
#define msi         map<string,ll int>
#define mis         map<ll int, string>
#define mpi         map<pair<ll int,ll int>,ll int>
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define vs          vector<string>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define what_is(x)  cerr << #x << " is " << x << endl;
using namespace std;

#define N  100005

ll int vis[N];

vi a[N];

ll int active[N],dis[N];

bool fnd=0;

void dfs(ll node,ll d)
{
	vis[node]=1;
	dis[node]=d;
	active[node]=1;
	for(auto i:a[node])
	if(!vis[i])
	dfs(i,d+1);
	else
	{
		if(active[i])
		{
			if(abs(dis[node]-dis[i])%2==0)
			{
				fnd=1;
			}
		}
	}
	active[node]=0;
}

ll int cnt0,cnt1;

void dfs1(ll node,ll c)
{
	if(c==0) cnt0++;
	else cnt1++;
	vis[node]=1;
	for(auto i:a[node])
	if(!vis[i])
	dfs1(i,1-c);
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		ll int n,m;
		cin>>n>>m;
		for(ll int i=0;i<m;i++)
		{
			ll int u,v;
			cin>>u>>v;
			a[u].pb(v);
			a[v].pb(u);
		}
		// check for 0
		for(ll int i=1;i<=n;i++)
		{
			if(!vis[i])
			{
				dfs(i,0);
			}
		}
		if(fnd)
		{
			cout<<"0 1";
			return 0;
		}
		// check for 1
		memset(vis,0,sizeof(vis));
		ll int ans=0;
		for(ll int i=1;i<=n;i++)
		{
			if(!vis[i])
			{
				cnt0=cnt1=0;
				dfs1(i,0);
				ans+=cnt0*(cnt0-1)/2;
				ans+=cnt1*(cnt1-1)/2;
			}
		}
		if(ans!=0)
		{
			cout<<1<<" "<<ans<<endl;
			return 0;
		}
		// check for 2
		if(m!=0)
		{
			cout<<2<<" "<<m*(n-2);
			return 0;
		}
		// check for 3
		cout<<3<<" "<<n*(n-1)*(n-2)/6;
	}
	return 0;
}