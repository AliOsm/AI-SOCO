#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1, class T2>inline void gmax(T1 &a, T2 b) { if (b>a)a = b; }
template <class T1, class T2>inline void gmin(T1 &a, T2 b) { if (b<a)a = b; }
const int N = 1e4+10, M = N*6*2 + N, Z = 1e9 + 7, ms63 = 0x3f3f3f3f;
int n, b, q;
struct A
{
	int top, num;
	bool operator < (const A& b)const
	{
		return top < b.top;
	}
}a[N];
int count(int top, int val)
{
	return top / 5 + (top % 5 >= val);
}
int id;
int first[N], w[M], cap[M], nxt[M];
int ST, ED;
void ins(int x, int y, int cap_)
{
	++id;
	w[id] = y;
	cap[id] = cap_;
	nxt[id] = first[x];
	first[x] = id;

	++id;
	w[id] = x;
	cap[id] = 0;
	nxt[id] = first[y];
	first[y] = id;
}
int d[N];
bool bfs()
{
	MS(d, -1); d[ST] = 0;
	queue<int>q;
	q.push(ST);
	while (!q.empty())
	{
		int x = q.front(); q.pop();
		for (int z = first[x]; z; z = nxt[z])if (cap[z])
		{
			int y = w[z];
			if (d[y] == -1)
			{
				d[y] = d[x] + 1;
				if (y == ED)return 1;
				q.push(y);
			}
		}
	}
	return 0;
}
int dfs(int x, int all)
{
	if (x == ED)return all;
	int use = 0;
	for (int z = first[x]; z; z = nxt[z])if (cap[z])
	{
		int y = w[z];
		if (d[y] == d[x] + 1)
		{
			int tmp = dfs(y, min(cap[z], all - use));
			cap[z] -= tmp;
			cap[z ^ 1] += tmp;
			use += tmp;
			if (use == all)break;
		}
	}
	if (use == 0)d[x] = -1;
	return use;
}
int dinic(int flow)
{
	int tmp = 0;
	while (bfs())tmp += dfs(ST, flow);
	return tmp;
}
bool solve()
{
	MS(first, 0); id = 1;
	ST = 0;
	ED = q + 5 + 1;
	for (int i = 1; i <= q; ++i)
	{
		int l = a[i - 1].top + 1;
		int r = a[i].top;
		int siz = r - l + 1;
		int num = a[i].num - a[i - 1].num;
		if (num<0||siz<num)return 0;
		ins(ST, i, num);
		for (int j = 1; j <= 5; ++j)
		{
			int cap_ = count(r, j) - count(l-1, j);
			ins(i, q + j,cap_);
		}
	}
	for (int j = 1; j <= 5; ++j)
	{
		ins(q + j, ED, n / 5);
	}
	int tmp = dinic(n);
	return tmp == n;
}
int main()
{
	while (~scanf("%d%d%d", &n,&b,&q))
	{
		for (int i = 1; i <= q; ++i)scanf("%d%d", &a[i].top, &a[i].num);
		++q; a[q].top = b; a[q].num = n;
		sort(a + 1, a + q + 1); a[0].top = 0;
		puts(solve() ? "fair" : "unfair");
	}
	return 0;
}
/*
【trick&&吐槽】


【题意】
集合中元素是互不相同的正整数，数值从1到b
集合的大小为n，n是5的倍数


有q个提示


【类型】


【分析】


【时间复杂度&&优化】


【数据】


*/