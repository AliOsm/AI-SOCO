#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
using namespace std;
#define F first
#define S second
#define pb push_back
#define MP make_pair
#define MS0(I) memset(I, 0, sizeof(I));
#define ALL(x) begin(x),end(x)
#define SZ(x) ((int)(x).size())
#define rep(i, n) for(int i = 0; i < n; i ++)
#define rep1(i, a, b) for(int i = a; i < b; i ++)
#define per1(i, a, b) for(int i = a; i >= b; i --)
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
typedef long long LL;
typedef long double LDB;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
//////////////////////
const long double eps = 1e-9;
const long double PI = acos(-1);
const int INF = (int)1e9;
const LL  INFF = (LL)1e18;
const int mod = 998244353;
const int MXN = (int)2e5 + 7;
int k;
LL dp[20][1037][2];
LL siz[20][1037][2];
int a[22];
int num[1037];
int len(LL v){
	int res = 0;
	while( v ){
		res++;
		a[res] = v % 10;
		v /= 10;
	}
	reverse(a + 1, a + res + 1);
	return res;
}
inline void add(LL &v1, LL v2){
	v1 = (v1 + v2) % mod;
	return ;
}
LL bs[20];
LL sol(LL v){
	LL res = 0;
	rep(i, 1033) rep(j, 20) rep(l, 2) dp[j][i][l] = siz[j][i][l] = 0;
	siz[0][0][0] = 1;
	int n = len(v);
	rep1(i, 1, n+1){
		siz[i][0][1] = 1;
		rep(j, 10){
			rep1(mask, 2, 1024) if( (mask & (1<<j) ) && num[mask] <= k){
				LL &v = dp[i][mask][1];
				add(v, dp[i-1][mask][1]);
				add(v, siz[i-1][mask][1]*bs[n-i]%mod*j%mod);
				add(siz[i][mask][1], siz[i-1][mask][1]); 
				int tmp = mask ^ (1<<j);
				add(v, dp[i-1][tmp][1]);
				add(v, siz[i-1][tmp][1]*bs[n-i]%mod*j%mod);
				add(siz[i][mask][1], siz[i-1][tmp][1]); 
				LL &v2 = dp[i][mask][0];
				if(j < a[i]){
					add(v, dp[i-1][mask][0]);
					add(v, siz[i-1][mask][0]*bs[n-i]%mod*j%mod);
					add(siz[i][mask][1], siz[i-1][mask][0]); 
					int tmp = mask ^ (1<<j);
					add(v, dp[i-1][tmp][0]);
					add(v, siz[i-1][tmp][0]*bs[n-i]%mod*j%mod);
					add(siz[i][mask][1], siz[i-1][tmp][0]); 
				}
				else if(j == a[i]){
					add(v2, dp[i-1][mask][0]);
					add(v2, siz[i-1][mask][0]*bs[n-i]%mod*j%mod);
					add(siz[i][mask][0], siz[i-1][mask][0]); 
					int tmp = mask ^ (1<<j);
					add(v2, dp[i-1][tmp][0]);
					add(v2, siz[i-1][tmp][0]*bs[n-i]%mod*j%mod);
					add(siz[i][mask][0], siz[i-1][tmp][0]); 
				}
			}
		}
	}
	rep(i, 1024) if(num[i] <= k){
		add(res, dp[n][i][0]);
		add(res, dp[n][i][1]);
	}
	return res;
}
int main(void){
	rep1(i, 1, 1033) num[i] = __builtin_popcount(i);
	bs[0] = 1;
	rep1(i, 1, 19) bs[i] = bs[i-1]*10%mod;
	LL ll, rr; scanf("%lld %lld %d", &ll, &rr, &k);
	LL v1 = sol(rr);
	LL v2 = sol(ll - 1);
	LL ans = (v1 - v2 + mod) % mod;
	printf("%lld\n", ans);
	return 0;
}
