#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <bitset>
#include <complex>
#include <unordered_map>
#include <unordered_set>
#include <functional>

//#pragma comment(linker, "/STACK:512000000")

using namespace std;

#define pb emplace_back
#define mp make_pair
#define all(a) (a).begin(), (a).end()
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int infi = 1e9 + 7;
const ll infl = (ll)1e18 + (ll)7;


int32_t main() {
    cin.sync_with_stdio(false);
    cin.tie(0);
    //srand(time(NULL));
   // freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    //freopen("customs.in", "r", stdin); freopen("customs.out", "w", stdout);
    string s;
    cin >> s;
    int n = s.size();
    int l1, r1, l2, r2;
    l1 = r1 = l2 = r2 = -1;
    for (int i = 0; i < n; ++i) {
        if (s[i] == '[') {
            l1 = i;
            break;
        }
    }
    for (int i = n - 1; i >= 0; --i) {
        if (s[i] == ']') {
            r1 = i;
            break;
        }
    }
    if (l1 == -1 || r1 == -1 || l1 > r1) {
        cout << -1;
        return 0;
    }
    for (int i = l1; i < r1; ++i) {
        if (s[i] == ':') {
            l2 = i;
            break;
        }
    }
    for (int i = r1; i >= l1; --i) {
        if (s[i] == ':') {
            r2 = i;
            break;
        }
    }
    if (l2 == -1 || r2 == -2 || l2 == r2) {
        cout << -1;
        return 0;
    }
    int cnt = 0;
    for (int i = l2; i < r2; ++i)
        if (s[i] == '|')
            ++cnt;
    cout << 4 + cnt << '\n';

    return 0;
}