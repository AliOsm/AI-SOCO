#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MX = 105;

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	
	int n, m;
	cin >> n >> m;
	
	vector<int> A, B;
	
	for (int i = 0; i < n; i++) {
		string s; int x;
		cin >> s >> x;
		if (s[0] == 'A') {
			A.push_back(x);
		}
		else {
			B.push_back(x);
		}
	}
	
	vector<int> C;
	for (int i = 0; i < m; i++) {
		int x;
		cin >> x;
		C.push_back(x);
	}
	
	sort(A.begin(), A.end());
	sort(B.begin(), B.end());
	sort(C.begin(), C.end());
	
	int ans = 0;
	
	for (int i = 0; i < min(A.size(), C.size()); i++) {
		bool ok = true;
		for (int j = 0; j <= i; j++) {
			if (A[j] > C[C.size() - 1 - i + j]) {
				ok = false;
				break;
			}
		}
		
		if (ok) {
			int s = 0;
			for (int j = 0; j <= i; j++) {
				s -= A[j];
				s += C[C.size() - 1 - i + j];
			}
			ans = max(ans, s);
		}
	}
	
	int s = 0;
	bool ok = true;
	vector<bool> taken(C.size());
	for (int i = 0; i < B.size(); i++) {
		int j = 0;
		while (j < C.size() && (taken[j] || C[j] <= B[i])) j++;
		if (j == C.size()) {
			ok = false;
			break;
		}
		taken[j] = true;
	}
	
	for (int i = 0; i < A.size(); i++) {
		int j = 0;
		while (j < C.size() && (taken[j] || C[j] < A[i])) j++;
		if (j == C.size()) {
			ok = false;
			break;
		}
		taken[j] = true;
		s += C[j] - A[i];
	}
	
	for (int i = 0; i < C.size(); i++) {
		if (!taken[i]) {
			s += C[i];
		}
	}
	
	if (ok) {
		ans = max(ans, s);
	}
	
	cout << ans;
}
