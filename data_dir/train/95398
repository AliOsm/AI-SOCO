// Simple sochna tha 
#include <bits/stdc++.h> 
using namespace std;
#define fl(i,a,b) for(int i=a;i<b;i++)
#define ll long long
#define endl '\n'
#define pb push_back
#define ff first
#define ss second
#define mod 1000000007 
#define inf 1e9
#define fast ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
#define mx 200005
#define int long long
ll arr[mx];
pair<int,int> p[mx];
const int N = mx;  // limit for array size
int n = N;  // array size
int t[2 * N];
int ct[2*N];

void modify(int p, int value) {  // set value at position p
  for (t[p += n] += value,ct[p] += 1; p > 1; p >>= 1) 
  {
  		t[p>>1] = t[p] + t[p^1];
  		ct[p>>1] = ct[p] + ct[p^1];	
  }
}

int query(int l, int r) {  // sum on interval [l, r)
  int res = 0;
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res += t[l++];
    if (r&1) res += t[--r];
  }
  return res;
}
int queryr(int l, int r) {  // sum on interval [l, r)
  int res = 0;
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res += ct[l++];
    if (r&1) res += ct[--r];
  }
  return res;
}

void solve()
{
	int n;
	cin >> n;
	vector<int> v;
	fl(i,1,n+1)
	{
		cin >> arr[i];
		p[i].ff = arr[i];
	}
	fl(i,1,n+1)
	{
		cin >> p[i].ss; 
	}
	sort(p + 1, p + n + 1);
	fl(i,1,n+1)
	{
		v.pb(p[i].ss);
	}
	v.pb(-2e9);
	map<int,int>mp;
	sort(v.begin(), v.end());
	int k = 1;
	fl(i,1,v.size())
	{
		if(v[i] == v[i-1])
			continue;
		mp[v[i]] = k;
		// isse gaps consider ho jaate hai
		// k++, if v[i] = v[i-1] + 1 , ye dekh lena
		k += 1;
	}
	ll ans = 0;
	for(int i = n; i >=1;i--)
	{
		int x = mp[p[i].ss];
	//	cout<<x<<endl;
		ans += query(x,mx) - queryr(x,mx)*p[i].ff;
		modify(x,p[i].ff);
	}
	cout<<ans;
	
}
main()
{
	fast;
	int t = 1;
	while(t--)
	{
		solve();
	}
}