#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long ll;

int N, R;
ll K;
ll A[500005];
ll B[500005];

bool check(ll def)
{
    ll reserve = K;
    memcpy(B, A, sizeof(A));
    ll cur = 0;
    for (int i = 0; i < R; i++)
        cur += B[i];
    for (int i = 0; i < N; i++)
    {
        if (i + R < N)
            cur += B[i + R];
        if (i - R - 1 >= 0)
            cur -= B[i - R - 1];
        if (cur < def)
        {
            ll need = def - cur;
            if (need > reserve)
                return false;
            reserve -= need;
            B[min(N - 1, i + R)] += need;
            cur += need;
        }
    }
    return true;
}

int main()
{
    ios::sync_with_stdio(0);

    cin >> N >> R >> K;
    for (int i = 0; i < N; i++)
        cin >> A[i];
    
    ll lo = 0, hi = 1LL<<60;
    while (lo < hi)
    {
        ll mid = lo + (hi - lo + 1)/2;
        if (check(mid))
            lo = mid;
        else
            hi = mid - 1;
    }

    cout << lo << "\n";

    return 0;
}
