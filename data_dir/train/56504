/**
 *    author:  skmonir
 *    created: 24-Dec-2017 11:24:17
**/
#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}
template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> inline void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = (int) 1e5 + 5;
const long long INF = (long long) 1e18 + 7;
const long long MOD = (long long) 1e9 + 7;

long long sq(long long x) {
    return x * x;
}

long long ABS(long long a, long long b) {
    long long c = a - b;
    return c < 0 ? -c : c;
}

inline bool perfect_square(long long x) {
    long long r = sqrt(1.0 * x);
    return sq(r) == x or sq(r - 1) == x or sq(r + 1) == r;
}

inline long long getNearest(long long x) {
    long long r = sqrt(1.0 * x);
    return min({ABS(x, sq(r - 1)), ABS(x, sq(r)), ABS(x, sq(r + 1))});
}

int main() {
    int n; Int(n);
    vector <long long> A, B;

    FOR (i, 1, n) {
        long long x; Int(x);
        if (perfect_square(x)) A.push_back(x);
        else B.push_back(x);
    }

    sort(all(A)), sort(all(B));

    int need = n / 2;
    long long res = 0;
    if (A.size() > B.size()) {
        FOR (i, need, (int) A.size() - 1) {
            if (A[i] == 0) res += 2;
            else res++;
        }
    } else {
        vector <int> C;
        int hasB = (int) B.size();

        FOR (i, 1, B.size()) C.push_back(getNearest(B[i - 1]));

        sort(all(C));

        FOR (i, 1, C.size()) if (hasB > need) {
            res += C[i - 1];
            need++;
        }
    }

    printf("%lld\n", res);

    return 0;
}