#include <iostream>
#include <vector>

using namespace std;

const int N = 300000;
const int MD = 998244353;

int p2[N + 1];

void init() {
	p2[0] = 1;
	for (int i = 1; i <= N; i++)
		p2[i] = p2[i - 1] * 2 % MD;
}

struct V {
	vector<int> adj;
	int color;
} vv[N];

int n1, n2;

bool dfs(int i, int color) {
	if (vv[i].color == color)
		return true;
	if (vv[i].color)
		return false;
	vv[i].color = color;
	if (color == 1)
		n1++;
	else
		n2++;
	for (int j : vv[i].adj)
		if (!dfs(j, 3 - color))
			return false;
	return true;
}

int main() {
	init();
	int t;
	cin >> t;
	while (t--) {
		int n, m;
		cin >> n >> m;
		for (int h = 0; h < m; h++) {
			int i, j;
			cin >> i >> j;
			i--, j--;
			vv[i].adj.push_back(j);
			vv[j].adj.push_back(i);
		}
		int ans = 1;
		for (int i = 0; i < n; i++)
			if (!vv[i].color) {
				n1 = n2 = 0;
				if (dfs(i, 1))
					ans = (long long) ans * (p2[n1] + p2[n2]) % MD;
				else {
					ans = 0;
					break;
				}
			}
		cout << ans << endl;
		for (int i = 0; i < n; i++) {
			vv[i].adj.clear();
			vv[i].color = 0;
		}
	}
	return 0;
}
