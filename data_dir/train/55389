#include <iostream>
#include <cstring>
#include <vector>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <ctime>
#include <string>
#include <cstdlib>
#include <algorithm>
using namespace std;
#define read freopen("C:\\Users\\USER\\Desktop\\in.txt", "r", stdin)
#define write freopen("C:\\Users\\USER\\Desktop\\out.txt", "a", stdout)
#define inf 1<<30
#define pii pair<int, int>
#define ff first
#define ss second
#define in(a) scanf("%I64d", &a)
#define ins(a) scanf("%s", a)
#define in2(a, b) scanf("%I64d%I64d", &a, &b)
#define in3(a, b, c) scanf("%I64d%I64d%I64d", &a, &b, &c)
#define pn printf("\n");
#define pcs(a) printf("Case %I64d: ", a)
#define pr(a) printf("%I64d\n", a)
#define pr(a) printf("%I64d\n", a)
#define prs(a) printf("%I64d ", a)
#define pr2(a, b) printf("%I64d %I64d\n", a, b)
#define pr3(a, b ,c) printf("%I64d %I64d %I64d\n", a, b, c)
#define vi vector<int>
#define msi map<string, int>
#define mii map<int, int>
#define si set<int>
#define cl clear()
#define sz size()
#define pb push_back
#define MAX(A,B) (((A)>(B))?(A):(B))
#define MIN(A,B) (((A)<(B))?(A):(B))
#define all(X) (X).begin(), (X).end ()
#define iter(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
//LL dx[]={1,0,-1,0};LL dy[]={0,1,0,-1}; //4 Direction
//LL dx[]={1,1,0,-1,-1,-1,0,1};LL dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//LL dx[]={2,1,-1,-2,-2,-1,1,2};LL dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
//bool check(LL n, LL pos) {return (bool) (n & (1<<pos));}
//LL on(LL n, LL pos) {return n | (1<<pos);}
//LL off(LL n, LL pos) {return n & ~(1<<pos);}
//bool operator < (const data &d) const{return cost<d.cost;}
typedef long long LL;
struct data {
    LL maxx, val, propagate;
}tree[500000];
typedef struct data sd;
LL A[100100], n;
void build(LL index, LL left, LL right)
{
    LL mid=(left+right)/2;

    if (left==right)
    {
        tree[index].maxx=A[left];
        tree[index].val=0;
        tree[index].propagate=false;
    }
    else
    {
        build(2*index, left, mid);
        build(2*index+1, mid+1, right);

        tree[index].maxx=MAX(tree[2*index].maxx, tree[2*index+1].maxx);
        tree[index].val=0;
        tree[index].propagate=false;
    }
}
void update_lazy(LL index, LL left, LL right, LL i, LL j, LL value)
{
    LL child=2*index, mid=(left+right)/2;

    if (left>=i&&right<=j)
    {
        tree[index].maxx=value;
        tree[index].val=value;
        tree[index].propagate=false;

        if (left!=right) tree[child].propagate=tree[child+1].propagate=true;
    }
    else
    {
        if (tree[index].propagate)
        {
            tree[index].val=tree[index/2].val;
            tree[index].maxx=tree[index].val;
            tree[index].propagate=false;

            if (left!=right) tree[child].propagate=tree[child+1].propagate=true;
        }

        if (left>j||right<i) return ;

        update_lazy(child, left, mid, i, j, value);
        update_lazy(child+1, mid+1, right, i, j, value);

        tree[index].maxx=MAX(tree[2*index].maxx, tree[2*index+1].maxx);
    }
}
LL query(LL index, LL left, LL right, LL i, LL j)
{
    LL child=2*index, mid=(left+right)/2;

    if (tree[index].propagate)
    {
        tree[index].val=tree[index/2].val;
        tree[index].maxx=tree[index].val;
        tree[index].propagate=false;

        if (left!=right) tree[child].propagate=tree[child+1].propagate=true;
    }
    if (left>=i&&right<=j) return tree[index].maxx;
    else if (left>j||right<i) return -inf;
    else
    {
        LL a, b;
        a=query(child, left, mid, i, j);
        b=query(child+1, mid+1, right, i, j);

        return MAX(a, b);
    }
}
int main()
{
    //use %I64d
    //read;
    LL i, j, k, q, w, h;
    in(n);
    for (i=0; i<n; i++) in(A[i]);

    build(1, 0, n-1);

    in(q);

    while (q--)
    {
        in2(w, h);
        k=query(1, 0, n-1, 0, w-1);

        update_lazy(1, 0, n-1, 0, w-1, k+h);

        pr(k);
    }

//file?
return 0;
}
