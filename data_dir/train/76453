#include <bits/stdc++.h>
using namespace std;
using ll = long long;

ll ask(ll q) {
    cout << "? " << q << endl;
    ll x; cin >> x;
    return x;
}
void answer(int x) {
    cout << "! " << x << endl;
}

vector<int> primes;
map<int,ll> max_pow;
bool sieve[805];

void solve() {
    int Q = 22;
    int idx = 0;
    map<int,int> ans;
    while (Q > 0) {
        ll curr = 1;
        vector<int> p;
        while (idx < primes.size()) {
            double prod_log = log10(curr) + log10(primes[idx]);
            if (prod_log > 18) {
                break;
            }
            else {
                ll x = curr*primes[idx];
                p.push_back(primes[idx]);
                curr = x;
                idx++;
            }
        }
        ll gc = ask(curr);
        Q--;
        vector<int> v;
        for (int pi: p) {
            if (gc % pi == 0) {
                v.push_back(pi);
            }
        }
        if (!v.empty()) {
            for (int i = 0; i < v.size(); i += 2) {
                ll x = max_pow[v[i]];
                if (i < v.size()-1) x *= max_pow[v[i+1]];
                if (Q > 0) {
                    ll gc = ask(x);
                    Q--;
                    while (gc % v[i] == 0) {
                        gc /= v[i];
                        ans[v[i]]++;
                    }
                    if (i < v.size()-1) {
                        while (gc % v[i+1] == 0) {
                            gc /= v[i+1];
                            ans[v[i+1]]++;
                        }
                    }
                }
            }
        }
    }
    int ret = 1;
    for (auto p: ans) {
        ret *= p.second+1;
        //cout << p.first << ": " << p.second << '\n';
    }
    ret *= 2;
    answer(max(8,ret));
}

int main() 
{
    ios_base::sync_with_stdio(false); cin.tie(NULL);
    for (int i = 2; i <= 800; i++) {
        if (!sieve[i]) primes.push_back(i);
        for (int j = i*2; j <= 800; j += i) {
            sieve[j] = true;
        }
    }
    for (int p: primes) {
        ll curr = p;
        while (curr*p <= 1000000000) curr *= p;
        max_pow[p] = curr;
        //cout << p << ": " << max_pow[p] << endl;
    }
    /*
    vector<ll> queries;
    ll curr = 1LL;
    for (int p: primes) {
        ll x = curr*p;
        if (curr*p > 1e18 || x/p != curr) {
            queries.push_back(curr);
            curr = p;
        }
        else {
            curr *= p;
        }
    }
    queries.push_back(curr);
    for (ll q: queries) {
        cout << q << '\n';
    }
    */
    int t; cin >> t;
    while (t--) {
        solve();
    }
}

