//#define ONLINE_JUDGE

#if defined(ONLINE_JUDGE)
#define _SECURE_SCL 0
#endif

#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <functional>
#include <memory>
#include <cmath>
#include <climits>
#include <numeric>
#include <tuple>
#include <memory.h>
#include <stdint.h>

#if !defined(__GNUC__)
#else // !defined(__GNUC__)
#define _CrtDbgBreak() __builtin_trap()
#endif // !defined(__GNUC__)

#if defined(ONLINE_JUDGE)
#define LOCAL_TEST 0
#else 
#define LOCAL_TEST 1
#endif

#if LOCAL_TEST
struct AssertsCounter
{
    AssertsCounter(): counter(0) {}
    ~AssertsCounter() { std::cout << std::endl << "DIAG: " << (counter == 0 ? "OK" : "!!!") << " Asserts count: " << counter << std::endl; }
    void Increment() { counter++; }
    uint32_t counter;
};
AssertsCounter g_assertsCounter;
#define LOCAL_ASSERT(expr) { if (!(expr)) {std::cout << "ASSERT FAILED (" << __LINE__ << "): '" << #expr << "'" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#define LOCAL_ASSERT_EQ(expr1, expr2) { if ((expr1) != (expr2)) {std::cout << "ASSERT FAILED (" << __LINE__ << "): '" << #expr1 << "' == '" << #expr2 << "' (" << (expr1) << " vs " << (expr2) << "')" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#else
#define LOCAL_ASSERT(expr)
#define LOCAL_ASSERT_EQ(expr1, expr2)
#endif

typedef std::string string8_t;
typedef long double ld_t;

typedef std::vector<size_t> vector_size_t;
typedef std::vector<int32_t> vector_int32_t;
typedef std::vector<uint32_t> vector_uint32_t;
typedef std::vector<int64_t> vector_int64_t;
typedef std::vector<uint64_t> vector_uint64_t;
typedef std::vector<string8_t> vector_string8_t;

typedef std::vector<vector_size_t> vector_2d_size_t;
typedef std::vector<vector_int32_t> vector_2d_int32_t;
typedef std::vector<vector_uint32_t> vector_2d_uint32_t;
typedef std::vector<vector_int64_t> vector_2d_int64_t;
typedef std::vector<vector_uint64_t> vector_2d_uint64_t;

typedef std::set<size_t> set_size_t;
typedef std::set<int32_t> set_int32_t;
typedef std::set<uint32_t> set_uint32_t;
typedef std::set<int64_t> set_int64_t;
typedef std::set<uint64_t> set_uint64_t;
typedef std::set<string8_t> set_string8_t;

typedef std::multiset<size_t> multiset_size_t;
typedef std::multiset<string8_t> multiset_string8_t;

// Auxiliary functions definition
// 
template<typename T> void UpdateMin(T& a, const T b) {a = std::min(a, b);}
template<typename T> void UpdateMax(T& a, const T b) {a = std::max(a, b);}

static const ld_t Eps = 1.0e-09;
template<typename T> bool IsEqual(const T a, const T b) { return std::abs(a - b) < Eps; }
template<typename T> bool IsGreater(const T a, const T b) { return a > b + Eps; }
template<typename T> bool IsLess(const T a, const T b) { return a + Eps < b; }

template<typename T> string8_t ToStr(const T& val) { std::ostringstream ostr; ostr << val; return ostr.str(); }
template<typename T> bool FromStr(const string8_t& str, T& val) {std::istringstream istr(str); istr >> val; return !!istr; }

template<typename T> std::istream& operator>>(std::istream& ist, std::vector<T>& data)
{
    LOCAL_ASSERT(!!ist);
    for (size_t i = 0; i < data.size(); i++) { ist >> data[i]; }
    return ist;
}

template<typename T> T Read(std::istream& ist)
{
    LOCAL_ASSERT(!!ist);
    T val; ist >> val; return val;
}

template<typename T> std::ostream& operator<<(std::ostream& ost, const std::vector<T>& data)
{
    for (size_t i = 0; i < data.size(); i++) { if (i != 0) { ost << ' '; } ost << data[i]; }
    return ost;
}

#if defined(ONLINE_JUDGE)
template<size_t id> class StopWatch { };
#else
#include <library/lib_stopwatch.h>
#include <library/lib_random.h>
library::random::Rand g_rnd;
#endif

#if LOCAL_TEST
vector_2d_uint32_t ApplyChangesSlow(const vector_2d_uint32_t& f, bool& hasChanged)
{
    hasChanged = false;
    vector_2d_uint32_t t = f;
    const size_t n = f.size();
    const size_t m = f[0].size();

    size_t dx[] = {(size_t)(-1), +1, 0, 0};
    size_t dy[] = {0, 0, (size_t)(-1), +1};
    
    for (size_t i = 0; i < n; i++)
    {
        for (size_t j = 0; j < m; j++)
        {
            if (f[i][j] == 1)
            {
                size_t nc = (j == 0 ? 1 : 0);
                for (size_t k = 0; k < 4; k++)
                {
                    const size_t x = i + dx[k];
                    const size_t y = j + dy[k];
                    if (x < n && y < m)
                    {
                        if (f[x][y] == 1)
                        {
                            nc++;
                        }
                    }
                }
                if (nc < 4)
                {
                    t[i][j] = 0;
                    hasChanged = true;
                }
            }
        }
    }

    return t;
}

uint32_t GetAnsSlow(const vector_uint32_t& a)
{
    const size_t n = a.size();
    const size_t m = *std::max_element(a.begin(), a.end());

    vector_2d_uint32_t f(n, vector_uint32_t(m + 1));
    for (size_t i = 0; i < n; i++)
    {
        for (size_t j = 0; j < a[i]; j++)
        {
            f[i][j] = 1;
        }
    }

    size_t ans = 0;
    bool hasChanged = true;
    do
    {
        f = ApplyChangesSlow(f, hasChanged);
        if (hasChanged)
        {
            ans++;
        }
    } while(hasChanged);

    return ans;
}
#endif // LOCAL_TEST

const int32_t Inf = 1000000;
uint32_t GetAns(const vector_uint32_t& a)
{
    const size_t n = a.size();
    vector_int32_t b(a.begin(), a.end());

    vector_int32_t minD(n, Inf);
    minD[0] = 1;
    for (size_t i = 1; i < n; i++)
    {
        UpdateMin(minD[i], b[i]);
        UpdateMin(minD[i], minD[i - 1] + 1);
    }

    minD[n - 1] = 1;
    for (size_t ri = 1; ri < n; ri++)
    {
        const size_t i = n - ri - 1;
        UpdateMin(minD[i], minD[i + 1] + 1);
    }
    
    const uint32_t ans = (uint32_t)(*std::max_element(minD.begin(), minD.end()));
    LOCAL_ASSERT(ans != Inf);
    return ans;
}

bool Solve(std::istream& ist, std::ostream& ost, const bool multipleTestMode)
{
    StopWatch<1> sw; (void)sw;

    // 
    size_t n;
    ist >> n;

    if (multipleTestMode && !ist)
        return false;

#if LOCAL_TEST
    ost << std::endl << "Next test" << std::endl;
#endif

    vector_uint32_t a(n);
    ist >> a;

#if LOCAL_TEST
    const uint32_t ansSlow = GetAnsSlow(a);
    ost << "SLOW: " << ansSlow << std::endl;
#endif

    const uint32_t ans = GetAns(a);
    ost << ans << std::endl;

#if LOCAL_TEST
     LOCAL_ASSERT_EQ(ansSlow, ans);
#endif
    
    return multipleTestMode;
}


#if LOCAL_TEST
void Test()
{
    using namespace library::random;
    const auto genVector = GenFactory::CreateGenVector(GenRange<size_t>(1, 50), GenRange<uint32_t>(1, 50));

    uint32_t errorCount = 0;
    for (size_t t = 0; t < 1000; t++)
    {
        const vector_uint32_t data = genVector();
        const uint32_t ansSlow = GetAnsSlow(data);
        const uint32_t ans = GetAns(data);
        LOCAL_ASSERT_EQ(ansSlow, ans);
        if (ansSlow != ans)
            errorCount += 1;
    }
    std::cout << "TEST finished, errors count: " << errorCount << std::endl;
}
#endif

int main(int argc, const char *argv[])
{
    std::ios_base::sync_with_stdio(false);
    std::istream* ist = &std::cin;
    std::ostream* ost = &std::cout;
    
    std::unique_ptr<std::istream> fileInput;
    
    if (argc > 1)
    {
        fileInput.reset(new std::ifstream(argv[1]));
        if (!(*fileInput))
        {
            std::cout << "File not found: " << argv[1] << std::endl;
        }
        ist = fileInput.get();
    }    
    
#if defined(ONLINE_JUDGE)
    Solve(*ist, *ost, false);
#else
    while(Solve(*ist, *ost, true)) {};
#endif

#if LOCAL_TEST
    Test();
#endif

}
