#include <algorithm>
#include <vector>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <cstring>
#define pb push_back
#define mp make_pair
#define pp pair<int, int>
#define ppp pair<pp, int>
#define pp4 pair<pp, pp>
#define pp3 pair<ll, pair<int, int> > 
#define fi first
#define se second
#define N  20020
#define mod 1000000007
#define inf 2000000001
#define esp 1e-9
#define BLOCK 333
#define BITNUM 555
#define BASE 311097
typedef long long ll;
const ll oo = (ll)1e18 + 1;
using namespace std;
int nt, n;
vector<int> v[1010];

int main() {
    ios::sync_with_stdio(false);
    // freopen("in.in", "r", stdin);
    cin >> nt;
    while (nt--) {
        cin >> n;
        for (int i = 0; i <= 1000; i++) v[i].clear();
        for (int i = 1; i <= n; i++) {
            int x, y;
            cin >> x >> y;
            v[y].pb(x);
        }
        int last_row = 0;
        int last_col = 0;
        string rs = "";

        bool could = true;

        for (int i = 0; i <= 1000; i++)
            if (v[i].size() > 0) {
                

                int min_col = v[i][0];
                int max_col = v[i][0];

                for (int j = 1; j < v[i].size(); j++) {
                  min_col = min(min_col, v[i][j]);
                  max_col = max(max_col, v[i][j]);
                }

                if (min_col < last_col) {
                  could = false;
                  break;
                }

                // cout << "go to " << i << " => " << min_col << " " << max_col << "\n";



                for (int j = last_col; j < min_col; j++) rs += 'R';
                for (int j = last_row + 1; j <= i; j++) rs += 'U';
                for (int j = min_col; j < max_col; j++) rs += 'R';

                last_row = i;
                last_col = max_col;
                
            }

        if (could) {
          cout << "YES\n";
          cout << rs << "\n";
        } else {
          cout << "NO\n";
        }
    }

    return 0;
}
