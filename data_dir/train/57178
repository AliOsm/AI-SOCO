#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define ll long long

ll INF = (ll)1e18;
const int M = 10001, N = 1001;
int n, m, l, s, t;
vector<pair<ll, int>> g[N];
int x[M], y[M];
ll w[M];
bool var[M];

ll dijkstra()
{
    multiset<pair<ll, int>> q;
    q.insert(mp(0, s));
    ll dis[n];
    for (int i = 0; i < n; i++)
        dis[i] = INF;
    dis[s] = 0;
    while (!q.empty())
    {
        pair<ll, int> p = *q.begin();
        q.erase(p);
        if (p.first > dis[p.second])
            continue;
        for (pair<ll, int> e : g[p.second])
            if (p.first + e.first < dis[e.second])
            {
                dis[e.second] = p.first + e.first;
                q.insert(mp(dis[e.second], e.second));
            }
    }
    return dis[t];
}

void update()
{
    for (int i = 0; i < n; i++)
        g[i].clear();
    for (int i = 0; i < m; i++)
    {
        g[x[i]].pb(mp(w[i], y[i]));
        g[y[i]].pb(mp(w[i], x[i]));
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m >> l >> s >> t;
    int cntVar = 0;
    for (int i = 0; i < m; i++)
    {
        cin >> x[i] >> y[i] >> w[i];
        if (!w[i])
        {
            var[i] = true;
            w[i] = INF;
            cntVar++;
        }
    }
    update();
    if (dijkstra() < l)
    {
        cout << "NO\n";
        return 0;
    }
    for (int i = 0; i < m; i++)
        if (var[i])
            w[i] = 1;
    update();
    if (dijkstra() > l)
    {
        cout << "NO\n";
        return 0;
    }
    cout << "YES\n";
    ll start = 0, end = cntVar;
    int ans = -1;
    while (start <= end)
    {
        int mid = (start + end) / 2;
        int p = 0;
        int idx = -1;
        for (int i = 0; i < m; i++)
        {
            if (var[i])
            {
                p++;
                if (p == mid)
                    idx = i;
                if (p <= mid)
                    w[i] = 1;
                else
                    w[i] = INF;
            }
        }
        update();
        if (dijkstra() <= l)
        {
            ans = idx;
            end = mid - 1;
        }
        else
            start = mid + 1;
    }
    for (int i = 0; i < m; i++)
    {
        if (var[i])
            if (i <= ans)
                w[i] = 1;
            else
                w[i] = INF;
    }
    start = 1, end = INF;
    ll bestW = 1;
    while (start <= end)
    {
        ll mid = (start + end) / 2;
        w[ans] = mid;
        update();
        if (dijkstra() <= l)
        {
            bestW = mid;
            start = mid + 1;
        }
        else
            end = mid - 1;
    }
    w[ans] = bestW;
    for (int i = 0; i < m; i++)
        cout << x[i] << " " << y[i] << " " << w[i] << endl;
}