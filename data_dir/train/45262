#include <bits/stdc++.h>
#define LL long long
#define pb push_back
#define mp make_pair
#define fi first
#define sc second
using namespace std;

int n,q,arr[110000],x,y,z,cnt[30],lazy[26][500000],tree[26][500000];
string s;

void build(int node, int a, int b, int c){
	if(a>b) return;
	if(a==b){
		tree[c][node] = (arr[a]==c);
		return;
	}
	int mid = (a+b)/2;
	build(node*2, a, mid, c);
	build(node*2+1, mid+1, b, c);
	tree[c][node] = tree[c][node*2] + tree[c][node*2+1];
}

void update(int node, int a, int b, int i, int j, int val, int c){
	if(lazy[c][node]!=-1){
		tree[c][node] = lazy[c][node] * (b-a+1);
		if(a!=b){
			lazy[c][node*2] = lazy[c][node];
			lazy[c][node*2+1] = lazy[c][node];
		}
		lazy[c][node] = -1;
	}
	if(a>b || a>j || b<i) return;
	if(a>=i && b<=j){
		tree[c][node] = val * (b-a+1);
		if(a!=b){
			lazy[c][node*2] = val;
			lazy[c][node*2+1] = val;
		}
		return;
	}
	int mid = (a+b)/2;
	update(node*2, a, mid, i, j, val, c);
	update(node*2+1, mid+1, b, i, j, val, c);
	tree[c][node] = tree[c][node*2] + tree[c][node*2+1];
}

int query(int node, int a, int b, int i, int j, int c){
	if(a>b || a>j || b<i) return 0;
	if(lazy[c][node]!=-1){
		tree[c][node] = lazy[c][node] * (b-a+1);
		if(a!=b){
			lazy[c][node*2] = lazy[c][node];
			lazy[c][node*2+1] = lazy[c][node];
		}
		lazy[c][node] = -1;
	}
	if(a>=i && b<=j){
		return tree[c][node];
	}
	int mid = (a+b)/2;
	int q1 = query(node*2, a, mid, i, j, c);
	int q2 = query(node*2+1, mid+1, b, i, j , c);
//	cout<<node<<" "<<a<<" "<<b<<" "<<i<<" "<<j<<" "<<c<<" "<<q1<<" "<<q2<<endl;
	return q1+q2;
}

int main() {
	memset(lazy,-1,sizeof(lazy));
	scanf("%d %d",&n,&q);
	cin>>s;
	for(int i=0;i<s.size();i++) arr[i] = s[i]-'a';
	for(int i=0;i<26;i++) build(1,0,n-1,i);
	for(int i=0;i<q;i++){
		scanf("%d %d %d",&x,&y,&z);
		x--, y--;
		for(int j=0;j<26;j++) cnt[j] = query(1,0,n-1,x,y,j);
		if(z==1){
			int idx=x;
			for(int j=0;j<26;j++){
				if(cnt[j]==0) continue;
				update(1,0,n-1,x,y,0,j);
				update(1,0,n-1,idx,idx+cnt[j]-1,1,j);
				idx+=cnt[j];
			}
		}
		else{
			int idx=x;
			for(int j=25;j>=0;j--){
				if(cnt[j]==0) continue;
				update(1,0,n-1,x,y,0,j);
				update(1,0,n-1,idx,idx+cnt[j]-1,1,j);
				idx+=cnt[j];
			}
		}
	}
	s.clear();
	char c;
	for(int i=0;i<n;i++){
		for(int j=0;j<26;j++){
			if(query(1,0,n-1,i,i,j)==1){
				c = char(j+'a');
				break;
			}
		}
		s.pb(c);
	}
	cout<<s<<endl;
	return 0;
}