#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <set>
#include <bitset>
#include <map>

using namespace std;

template<class T> T nextInt() {
    T x = 0, p = 1;
    char c;
    do {
        c = getchar();
    } while (c <= 32);
    if (c == '-') {
        p = -1;
        c = getchar();
    }
    while (c >= '0' && c <= '9') {
        x = x * 10 + c - '0';
        c = getchar();
    }
    return p * x;
}

template<class T> T sqr(T x) { return x * x; }

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned long ul;
typedef long double ld;

const int maxN = 105;
const int INF = (int)1e9 + 5;
const ll LINF = (ll)1e18 + 5;

struct DP {
    ll f[maxN][maxN];
    DP() {}
    //1-indexation
    void init(int a[], int n) {
        int b[maxN * 2];
        int it = 0;
        for (int z = 0; z < 2; z++) {
            for (int i = 1; i <= n; i++) {
                b[++it] = a[i];
            }
        }
        for (int start = 1; start <= n; start++) {
            ll g[maxN * 2];
            fill(g + 1, g + n + n + 1, -LINF);
            g[start] = 1;
            for (int i = start; i <= n + n; i++) {
                if (g[i] < 0) continue;
                for (int j = i + 1; j <= n + n; j++) {
                    if (b[i] <= b[j] && g[j] < g[i] + 1) g[j] = g[i] + 1;
                }
            }
            for (int j = 1; j <= n; j++) {
                f[start][j] = g[j + n];
            }
        }
    }
};

int n, t, a[maxN];

int brute() {
    int g[maxN];
    fill(g + 1, g + n + 1, 1);
    for (int i = 1; i <= n; i++) {
        for (int j = i + 1; j <= n; j++) {
            if (a[i] <= a[j] && g[j] < g[i] + 1) g[j] = g[i] + 1;
        }
    }
    return *max_element(g + 1, g + n + 1);
}

DP combine(DP a, DP b) {
    DP c;
    fill(&c.f[0][0], &c.f[0][0] + sizeof(c.f) / sizeof(c.f[0][0]), -LINF);
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            for (int k = 1; k <= n; k++) {
                if (a.f[i][k] < 0 || a.f[k][j] < 0) continue;
                if (a.f[i][k] + b.f[k][j] - 1 > c.f[i][j]) c.f[i][j] = a.f[i][k] + b.f[k][j] - 1;
            }
        }
    }
    return c;
}

DP pw(DP a, int n) {
    if (n == 2) return a;
    if (n % 2 == 0) return combine(pw(a, n - 1), a);
    DP t = pw(a, (n + 1) / 2);
    return combine(t, t);
}

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    scanf("%d%d", &n, &t);

    for (int i = 1; i <= n; i++) {
        scanf("%d", &a[i]);
    }

    if (t == 1) {
        printf("%d", brute());
        return 0;
    }

    DP d;
    d.init(a, n);

    d = pw(d, t);

    ll res = 0;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            res = max(res, d.f[i][j]);
        }
    }

    cout << res << "\n";
}
