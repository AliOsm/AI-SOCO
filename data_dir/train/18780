#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>
#include <chrono>

using namespace std;
using ll = long long;
using ull = unsigned long long;
const ll MOD = 1000000007;
mt19937 rnd(std::chrono::steady_clock::now().time_since_epoch().count());

ll pw(ll x, ll n) {
  ll ret = 1;
  while(n > 0) {
    if (n % 2 == 1) {
      ret *= x;
      ret %= MOD;
    }
    x *= x;
    x %= MOD;
    n /= 2;
  }

  return ret;
}

ll inv(ll x) {
  return pw(x, MOD - 2);
}

ll calc(ll x, ll pref, ll tail) {
  ll ret = x;
  ret *= tail;
  ret %= MOD;
  ret *= inv(pref);
  ret %= MOD;
  return ret;
}


int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
  std::string s;
  cin >> s;
  int n = s.size();
  vector<ll> sum;
  int c = 0;
  ll ret = 0;
  for(int i = 0; i < n; ++i) {
    if (s[i] == 'a') {
      ++ret;
      ++c;
    } else if (s[i] == 'b') {
      if (c > 0) {
        sum.emplace_back(c);
        c = 0;
      }
    }
  }
  if (c > 0) {
    sum.emplace_back(c);
  }
  if (sum.size() == 0) {
    cout << ret << endl;
    return 0;
  }

  ll suff = sum[sum.size() - 1] + 1;
  ret = sum[sum.size() - 1];
  for(int i = sum.size() - 2; i >= 0; --i) {
    ll x = sum[i];
    x *= suff;
    x %= MOD;
    ret += x;
    ret %= MOD;
    suff *= sum[i] + 1;
    suff %= MOD;
  }

  // for(int i : sum) {
  //   cout << i << " ";
  // }
  // cout << endl << endl;

  // ll p = 1;
  // for(ll i : sum) {
  //   p *= i;
  //   p %= MOD;
  // } 

  // ll cur = 1;
  // for(int i = 0; i < (int)sum.size() - 1; ++i) {
  //   cur *= sum[i];
  //   cur %= MOD;
  //   // ll t = calc(sum[i], cur, p);
  //   // cout << i << " " << t << endl;
  //   ret += calc(sum[i], cur, p);
  //   ret %= MOD;
  // }

  cout << ret << endl;
	return 0;
}
