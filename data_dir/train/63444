#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
#define abdelrahman010 ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
typedef long long ll;
using namespace std;
const int N = 1e6 + 5;
int n , q;
int seg[4 * N];
void update(int node , int s , int e , int i , int val) {
    if(s == e) {
        seg[node] += val;
        return;
    }
    int mid = s + e >> 1;
    if(i <= mid)
        update(node << 1 , s , mid , i , val);
    else
        update(node << 1 | 1 , mid + 1 , e , i , val);
    seg[node] = seg[node << 1] + seg[node << 1 | 1];
}
int get(int node , int s , int e , int val) {
    if(s == e)
        return s;
    int mid = s + e >> 1;
    if(seg[node << 1] >= val)
        return get(node << 1 , s , mid , val);
    return get(node << 1 | 1 , mid + 1 , e , val - seg[node << 1]);
}
int query(int node , int s , int e , int l , int r) {
    if(s > r || e < l)
        return 0;
    if(l <= s && e <= r)
        return seg[node];
    int mid = s + e >> 1;
    return query(node << 1 , s , mid , l , r) + query(node << 1 | 1 , mid + 1 , e , l , r);
}
int main() {
    abdelrahman010
    cin >> n >> q;
    for(int i = 0;i < n;i++) {
        int x;
        cin >> x;
        update(1 , 0 , n - 1 , x - 1 , 1);
    }
    while(q--) {
        int k;
        cin >> k;
        if(k > 0)
            update(1 , 0 , n - 1 , k - 1 , 1);
        else {
            int j = get(1 , 0 , n - 1 , -k);
            update(1 , 0 , n - 1 , j , -1);
        }
    }
    if(seg[1] == 0)
        return cout << 0 , 0;
    int x = 0;
    while(!query(1 , 0 , n - 1 , x , x))
        x++;
    cout << x + 1;
    return 0;
}