#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

struct Point {
	int x, y, w, id;
} p[100005];

struct Value {
	int id, w;
} v[100005];

int left_id[100005];

bool cmp0(Value a, Value b) {
	return a.w < b.w || a.w == b.w && a.id < b.id;
}

bool cmp1(Point a, Point b) {
	return a.w < b.w || a.w == b.w && a.x < b.x;
}

bool cmp2(Point a, Point b) {
	return a.x < b.x || a.x == b.x && a.y < b.y;
}

bool cmp3(Point a, Point b) {
	return a.id < b.id;
}

int main() {
	int n, x, y, w, px = -1;
	bool flag = true;

	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%d%d", &x, &y);
		p[i] = (Point) {x, y, y - x, -1};
	}
	for (int i = 0; i < n; i++) {
		scanf("%d", &w);
		v[i] = (Value) {i + 1, w};
	}

	sort(v, v + n, cmp0);
	sort(p, p + n, cmp1);

	for (int i = 0; i < n; i++) {
		if (p[i].w == v[i].w)
			p[i].id = v[i].id;
		else {
			flag = false;
			break;
		}
	}

	if (!flag) {
		puts("NO");
		return 0;
	}

	memset(left_id, 0xff, sizeof left_id);
	sort(p, p + n, cmp2);
	for (int i = 0; i < n; i++) {
		x = p[i].x;
		y = p[i].y;
		if (x == px) {
			if (p[i].id < p[i-1].id) {
				flag = false;
				break;
			}
		}
		if (left_id[y] != -1) {
			int j = left_id[y];
			if (p[i].id < p[j].id) {
				flag = false;
				break;
			}
		}
		px = x;
		left_id[y] = i;
	}

	if (!flag) {
		puts("NO");
		return 0;
	}

	sort(p, p + n, cmp3);
	puts("YES");
	for (int i = 0; i < n; i++)
		printf("%d %d\n", p[i].x, p[i].y);

	return 0;
}