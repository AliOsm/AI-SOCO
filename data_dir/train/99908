#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <time.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
const int INF = (int)(1e9 + 1e5);
const int64 LINF = (int64)(1e18);
const int64 MX = 100500;
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL() (*(int*)(0))++
#define ASSERT(exp) {if (!(exp)) exit(0);}
#ifdef _MY_DEBUG
#define I64d lld
#endif
const int MOD = 1000000007;
const int ROOT = 700;
const int PRM_ROOT = 5;
const int LOG = 30;

const int MAXN = 500500;

int add(int a, int b)
{
    a += b;
    if (a >= MOD)
    {
        a -= MOD;
    }
    return a;
}

int mul(int a, int b)
{
    return int64(a) * b % MOD;
}

int bin_pow(int a, int b)
{
    int res = 1;
    while (b)
    {
        if (b & 1)
        {
            res = mul(res, a);
        }
        b >>= 1;
        a = mul(a, a);
    }
    return res;
}

int divv(int a, int b)
{
    return mul(a, bin_pow(b, MOD - 2));
}

int n, rad;
int64 k;
int64 a[MAXN], ad[MAXN];
int64 ans;

void init()
{
    scanf ("%d%d%lld", &n, &rad, &k);
    for (int i = 1; i <= n; ++i)
    {
        scanf ("%lld", &a[i]);
    }
}

bool check(int64 q)
{
    int l = 1, r = 0;
    auto z = k;
    memset(ad, 0, sizeof(ad));
    int64 cur = 0LL;
    for (int i = 1; i <= n; ++i)
    {
        while (r < min(n, i + rad))
        {
            ++r;
            cur += a[r];
            cur += ad[r];
        }
        while (l < max(1, i - rad))
        {
            cur -= a[l];
            cur -= ad[l];
            ++l;
        }
        if (cur < q)
        {
            auto d = q - cur;
            ad[r] += d;
            cur += d;
            z -= d;
            if (z < 0)
            {
                return false;
            }
        }
    }
    return true;
}

void solve()
{
    int64 l = 1LL, r = 2000000000000000000;
    while (l <= r)
    {
        int64 mid = (l + r) >> 1;
        if (check(mid))
        {
            ans = mid;
            l = mid + 1;
        }
        else
        {
            r = mid - 1;
        }
    }
}

void print_answer()
{
    printf("%lld\n", ans);
}

void precalc()
{

}

void run()
{
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif // _MY_DEBUG
    precalc();
    int t = 1; //scanf ("%d", &t);
    for (int i = 0; i < t; ++i)
    {
        init();
        solve();
        print_answer();
    }
}
int main()
{
    srand(90);
    ios_base::sync_with_stdio(false); cin.tie(0);
    //test();
    run();
    return 0;
}