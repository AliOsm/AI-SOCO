#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <random>
#include <cmath>

#define ll long long
#define ld long double
//#define mp make_pair
#define pb push_back
#define eb emplace_back
//#define int long long
using namespace std;

const int INF = 2e9;
const int MOD = 1e9 + 7;
const int MB = 13;

pair<int, int> get(int n) {
	if (!n) return { 0, 0 };
	int one = 0;
	int x = n;
	while (x % 5 == 0) {
		one++;
		x /= 5;
	}
	x = n;
	int two = 0;
	while (x % 2 == 0) {
		two++;
		x /= 2;
	}
	return { one, two };
}


void solve() {
	int n;
	cin >> n;

	vector<vector<pair<int, int>>> a(n, vector<pair<int, int>>(n));
	bool good = false;
	int one = 0, two = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			int x;
			cin >> x;
			if (!x) {
				good = true;
				one = i;
				two = j;
			}
			a[i][j] = get(x);
		}
	}

	vector<vector<int>> dp1(n, vector<int>(n, INF));
	vector<vector<int>> dp2(n, vector<int>(n, INF));
	vector<vector<int>> p1(n, vector<int>(n, INF));
	vector<vector<int>> p2(n, vector<int>(n, INF));
	dp1[0][0] = a[0][0].first;
	dp2[0][0] = a[0][0].second;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			auto& p = a[i][j];
			if (i && dp1[i - 1][j] + p.first < dp1[i][j]) {
				dp1[i][j] = dp1[i - 1][j] + p.first;
				p1[i][j] = 1;
			}
			if (j && dp1[i][j - 1] + p.first < dp1[i][j]) {
				dp1[i][j] = dp1[i][j - 1] + p.first;
				p1[i][j] = 2;
			}
			if (i && dp2[i - 1][j] + p.second < dp2[i][j]) {
				dp2[i][j] = dp2[i - 1][j] + p.second;
				p2[i][j] = 1;
			}
			if (j && dp2[i][j - 1] + p.second < dp2[i][j]) {
				dp2[i][j] = dp2[i][j - 1] + p.second;
				p2[i][j] = 2;
			}
		}
	}

	int startX = n - 1, startY = n - 1;
	bool now = dp1[n - 1][n - 1] < dp2[n - 1][n - 1];
	int ans = now ? dp1[n - 1][n - 1] : dp2[n - 1][n - 1];
	if (ans > 1 && good) {
		string res;
		for (int i = 0; i < one; i++) {
			res.pb('D');
		}
		for (int i = 0; i < two; i++) {
			res.pb('R');
		}
		for (int i = one; i < n - 1; i++) {
			res.pb('D');
		}
		for (int i = two; i < n - 1; i++) {
			res.pb('R');
		}
		cout << "1\n" << res;
		return;
	}
	string res;
	while (startX || startY) {
		auto& p = a[startX][startY];
		int x = now ? p1[startX][startY] : p2[startX][startY];
		if (x == 1) {
			res.pb('D');
			startX--;
		}
		else {
			res.pb('R');
			startY--;
		}
	}
	reverse(res.begin(), res.end());
	cout << ans << '\n' << res;
}

signed main() {
	/*
	freopen("search.in", "r", stdin);
	freopen("search.out", "w", stdout);
	*/
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}