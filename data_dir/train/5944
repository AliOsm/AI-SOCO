#include<bits/stdc++.h>
#define god dimasi5eks
#pragma GCC optimize("O3")
#define fi first
#define se second
#define pb push_back
#define pf push_front
#define mod 1000000007
#define dancila 3.14159265359
#define eps 1e-9

using namespace std;

typedef long long ll;

int s, n, m;

ll sg[100002];
vector<pair<int, int> >v[1000002], tr[1000002], vctc[1000002];
deque<int> d;
bool viz[1000002];
void dfs(int nod)
{
    viz[nod] = 1;
    for(int i = 0; i < v[nod].size(); ++i)
    {
        int vecin = v[nod][i].fi;
        if(!viz[vecin])
            dfs(vecin);
    }
    d.pb(nod);
}
vector<int> cc[1000002];
int x, poz[1000002], gr[1000002];
void dfs2(int nod)
{
    viz[nod] = 1;
    cc[x].pb(nod);
    poz[nod] = x;
    for(int i = 0; i < tr[nod].size(); ++i)
    {
        int vecin = tr[nod][i].fi;
        if(!viz[vecin])
            dfs2(vecin);
    }
}

ll cost[1000002], dp[1000002];

map<pair<int, int>, int> mx;

void dfsc(int nod)
{
    viz[nod] = 1;
    for(int i = 0; i < vctc[nod].size(); ++i)
    {
        int vecin = vctc[nod][i].fi;
        ++gr[vecin];
        if(!viz[vecin])
            dfsc(vecin);
    }
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> m;
    for(int i = 1; i <= m; ++i)
    {
        int a, b, c;
        cin >> a >> b >> c;
        v[a].pb({b, c});
        tr[b].pb({a, c});
    }
    cin >> s;
    for(int i = 1; i <= n; ++i)
        if(!viz[i])
            dfs(i);
    memset(viz, 0, sizeof(viz));
    while(!d.empty())
    {
        int nod = d.back();
        d.pop_back();
        if(!viz[nod])
            ++x, dfs2(nod);
    }
    int ttc = poz[s];
    for(int i = 1; i <= 100000; ++i)
        sg[i] = 1LL * i * (i+1) / 2 + sg[i-1];
    for(int i = 1; i <= n; ++i)
        if(viz[i])
            for(int j = 0; j < v[i].size(); ++j)
            {
                int vec = v[i][j].fi;
                if(poz[i] == poz[vec])
                {
                    int st = 0;
                    int dr = 100000;
                    int ans = 0;
                    while(st <= dr)
                    {
                        int mid = (st + dr) / 2;
                        if(1LL * mid * (mid + 1) / 2 <= v[i][j].se)
                            ans = mid, st = mid + 1;
                        else
                            dr = mid - 1;
                    }
                    cost[poz[i]] += 1LL * (ans + 1) * v[i][j].se - sg[ans];
                }
                else
                {
                    vctc[poz[i]].pb({poz[vec], v[i][j].se});
                }
            }
    memset(viz, 0, sizeof(viz));
    dfsc(ttc);
    ll ans = 0;
    deque<int> cd;
    for(int i = 1; i <= x; ++i)
        if(!gr[i] && viz[i])
            cd.pb(i);
    while(!cd.empty())
    {
        int ctc = cd[0];
        dp[ctc] += cost[ctc];
        ans = max(ans, dp[ctc]);
        cd.pop_front();
        for(int i = 0; i < cc[ctc].size(); ++i)
        {
            int x = cc[ctc][i];
            for(int j = 0; j < v[x].size(); ++j)
            {
                int vec = v[x][j].fi;
                if(poz[x] != poz[vec])
                {
                    dp[poz[vec]] = max(dp[poz[vec]], dp[ctc] + v[x][j].se);
                    --gr[poz[vec]];
                    if(!gr[poz[vec]])
                        cd.pb(poz[vec]);
                }
            }
        }
    }
    cout << ans;
    return 0;
}
