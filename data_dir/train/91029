#include <bits/stdc++.h>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
int N , M;
vi in_ , in;
map<int , int> name;
int gor(int p , int l){
  vi::iterator it;
  it = lower_bound(all(in) , p + l + 1);
  return *(--it);
}
int gol(int p , int l){
  vi::iterator it;
  it = lower_bound(all(in) , p - l);
  return *it;
}
int solve(int p , int l , int d){
  int odr , odr1;
  if(d) odr = gor(p , l);
  else odr = gol(p , l);
  if(p == odr){
   if(p == gol(p , l) && p == gor(p , l)) return p;
   return solve(p , l , d ^ 1);
              }
  if(abs(p - odr) >= (l>>1))
   return solve(odr , l - abs(p - odr) , d ^ 1);
  int left = l - abs(p - odr);
  if(d) odr1 = gol(odr , left);
  else odr1 = gor(odr , left);
  if(odr1 == p){
   l %= 2 * abs(p - odr);
   return solve(p , l , d);
               }
  else
   return solve(odr , left , d ^ 1);
}
int main(){
  scanf("%d%d" , &N , &M);
  in_.resize(N);
  for(int i=0;i<N;++i)
   scanf("%d" , &in_[i]),
   name[in_[i]] = i + 1;
  in = in_ , sort(all(in));
  for(int i=0;i<M;++i){
   int p , l;
   scanf("%d%d" , &p , &l);
   --p;
   int ans = solve(in_[p] , l , 1);
   printf("%d\n" , name[ans]);
                      }
  return 0;
}
