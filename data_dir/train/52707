#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

typedef pair<int,int> point;

const int maxn = 111;

point p[maxn];
vector<int> adj[maxn];
bool vis[maxn];

void DFS(int v) {
	vis[v] = 1;
	for (int i = 0; i < adj[v].size(); ++i) {
		int u = adj[v][i];
		if (!vis[u]) {
			DFS(u);
		}
	}
}

int main() {
	int n;
	cin >> n;
	for (int i = 0; i < n; ++i) {
		cin >> p[i].first >> p[i].second;
	}
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if (i != j && (p[i].first == p[j].first || p[i].second == p[j].second)) {
				adj[i].push_back(j);
				adj[j].push_back(i);
			}
		}
	}
	int tot = 0;
	for (int i = 0; i < n; ++i) {
		if (!vis[i]) {
			DFS(i);
			tot ++;
		}
	}
	cout << tot - 1 << '\n';
	return 0;
}
