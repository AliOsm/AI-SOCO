#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, a[200200];
vector <int> d, mx[200100], gc[200100], v;
bool ok[200200];
vector<ll> suff;

void segments() {
    v.clear();
    suff.clear();
    bool is_all_ones = 1;
    for (int i = 0; i < n; i++) {
        is_all_ones &= ok[i];
    }
    if (is_all_ones) {
        v.pb(n);
    } else {
        int l = 0, r = n - 1;
        while (ok[l]) l++;
        while (ok[r]) r--;
        v.pb(l + n - 1 - r);
        for (int i = l, j = l; i < r; i = j) {
            if (!ok[i]) {
                j = i + 1;
                continue;
            } else {
                j = i;
                while (j < r && ok[j]) j++;
                v.pb(j - i);
            }
        }
    }
    sort(all(v));
    suff.assign(sz(v), 0);
    suff[sz(v) - 1] = v.back();
    for (int i = sz(v) - 2; i >= 0; i--) {
        suff[i] = v[i] + suff[i + 1];
    }
}

int main(){
    
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        scanf("%d", a + i);
    }
    
    for (int i = 1; i < n; i++) {
        if (n % i == 0) {
            d.pb(i);
        }
        gc[__gcd(i, n)].pb(i);
    }
    
    for (int i = 0; i < 200200; i++) {
        sort(all(gc[i]));
    }
    
    for (int i = 0; i < sz(d); i++) {
        mx[i].assign(d[i], 0);
        for (int j = 0; j < n; j++) {
            mx[i][j % d[i]] = max(mx[i][j % d[i]], a[j]);
        }
    }
    
    ll ans = 0;
    
    for (int i = 0; i < sz(d); i++) {
        for (int j = 0; j < n; j++) {
            ok[j] = (a[j] == mx[i][j % d[i]]);
        }
        segments();
        ll res = 0;
        if (!v.empty() && v[0] == n) {
            forit (it, gc[d[i]]) {
                int s = *it;
                res += n;
            }
        } else {
            int p = 0;
            forit (it, gc[d[i]]) {
                int s = *it;
                while (p < sz(v) && v[p] < s) p++;
                if (p < sz(suff)) res += suff[p] - s * 1ll * (sz(suff) - p) + (sz(suff) - p);
            }
        }
        ans += res;
    }
    
    cout << ans << endl;
        
    return 0;
}
