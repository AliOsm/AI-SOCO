#include<iostream>
#include<vector>
#include<cmath>
#include<algorithm>
#include<string>
#include<cstdio>
#include<string.h>
#include<set>
#include<map>
#include<queue>
#include<sstream>
using namespace std;

#define FOR(i,a,b)  for(int i=(a);i<=(b);++i)
#define sz(s) (int)(s).size()
#define mp make_pair
#define pb push_back
#define sqr(x) (x)*(x)
void assert(bool x){if(!x)throw -1;}
typedef long long Int;
const int inf = 1000000000;
const int MOD = 1000000007;
const Int BAD = 1000000000000000000LL;

Int gcd(Int x, Int y) {
	while(x) {
		y%=x;swap(x,y);
	}
	return y;
}

Int gck(Int x, Int y) {
	if(x==BAD || y==BAD) return BAD;
	return x/gcd(x,y) * y;
}

Int mult(Int x, Int y) {
	if(y>BAD/x) return BAD;
	return min(BAD, x*y);
}

const int N = 100009;
Int cnt[N+1];
vector<int> g[N+1];
Int F[N+1];
bool leaf[N+1];
int ch[N+1];

void dfs(int v,int fath) {
	ch[v]=0;
	F[v]=1;
	FOR(i,0,sz(g[v])-1) {
		int to = g[v][i];
		if(to==fath) continue;
		dfs(to, v);
		++ch[v];
		F[v]=gck(F[v], F[to]);
	}

	if(ch[v]==0) {
		leaf[v]=true;
		F[v]=1;
	}else {
		leaf[v]=false;
		F[v]=mult(F[v], ch[v]);
	}
}

bool can(int v, Int w, int fath) {
	if(leaf[v]) {
		if(w>cnt[v]) return false;
		return true;
	}

	FOR(i,0,sz(g[v])-1) {
		int to = g[v][i];
		if(to==fath) continue;
		if(!can(to, w/ch[v], v)) return false;
	}
	return true;
}

int main()
{
	//freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
	int n;
	cin>>n;
	FOR(i,1,n) cin>>cnt[i];
	FOR(i,1,n-1) {
		int x,y;
		cin>>x>>y;
		g[x].pb(y);
		g[y].pb(x);
	}
	dfs(1,-1);

	if(F[1]==BAD) {
		Int total=0;
		FOR(i,1,n) total+=cnt[i];
		cout<<total<<endl;
		return 0;
	}

	Int low=0, high=BAD/F[1];
	while(low<high) {
		Int mid = (low+high)/2+1;
		if(can(1, mid*F[1], -1)) low=mid;else high=mid-1;
	}

	Int total=0;
	FOR(i,1,n) total+=cnt[i];
	cout<<total-F[1]*high<<endl;
}