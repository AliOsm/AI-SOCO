#include<bits/stdc++.h>
using namespace std;

#define F first
#define S second
#define PB push_back
#define all(x) x.begin(), x.end()

typedef long long ll; 
typedef long double ld;
typedef pair<ll, ll> pll;

const int N = 1000 * 1000 + 10; 
int mod = 1e9 + 7;

int a[N][3];
vector<pair<int, int>> ans;

int solve(vector<int> ids, int id)
{
//	cout<< "START" << endl;
//	for(auto u : ids) cout<< u << ' '; cout << endl;
//	cout<< id << endl;
	int n = ids.size();
	if(id == 3)
	{
//		for(int i = 0; i + 1 < n; i += 2) ans.PB({ids[i], ids[i + 1]});
//		if(ids.size() % 2 == 0) return ids.back();
		return ids.back();
	}
	int lst = -1;
	for(int i = 0; i < n; i ++)
	{
		vector<int> v;
		int j = i;
		while(j < n && a[ids[i]][id] == a[ids[j]][id]) v.PB(ids[j++]);
		int cur = solve(v, id + 1);
		if(cur != -1)
		{
			if(lst == -1) lst = cur;
			else ans.PB({lst, cur}), lst = -1;
		}
		i = j - 1;
	}
	return lst;
}

bool cmp(int i, int j)
{
	pair<int, pair<int, int>> p = {a[i][0], {a[i][1], a[i][2]}};
	pair<int, pair<int, int>> q = {a[j][0], {a[j][1], a[j][2]}};
	return p < q;
}

int32_t main()
{
	ios::sync_with_stdio(0); cin.tie(0);
	int n;
	cin>> n;
	vector<int> ids;
	for(int i = 0; i < n; i++) ids.PB(i), cin>> a[i][0] >> a[i][1] >> a[i][2];
	sort(ids.begin(), ids.end(), cmp);
	solve(ids, 0);
	for(auto u : ans) cout<< u.F + 1 << ' ' << u.S + 1 << '\n';
}
