#include <bits/stdc++.h>

using namespace std;

const int N = 200005;

int n, m, k;

int x[N], y[N];

set<int> g[N];
int er_id[N];

int clean_graph(int st, int id) {
	if((int)g[st].size() >= k or er_id[st] != -1) return 0;
	queue<int> q;
	er_id[st] = id;
	q.push(st);
	int ans = 0;
	while(!q.empty()) {
		int u = q.front(); q.pop();
		ans++;

		for(int v : g[u]) {
			g[v].erase(u);
			if((int)g[v].size() < k and er_id[v] == -1) {
				er_id[v] = id;
				q.push(v);
			}
		}
		g[u].clear();
	}
	return ans;
}

int ans[N];

int main() {
	memset(er_id, -1, sizeof er_id);
	
	scanf("%d %d %d", &n, &m, &k);

	for(int i = 0; i < m; i++) {
		scanf("%d %d", x + i, y + i);
		g[ x[i] ].insert(y[i]);
		g[ y[i] ].insert(x[i]);
	}

	int cnt = n;
	for(int i = 1; i <= n; i++) cnt -= clean_graph(i, m);

	for(int i = m - 1; i >= 0; i--) {
		g[ x[i] ].erase(y[i]);
		g[ y[i] ].erase(x[i]);
		ans[i] = cnt;
		cnt -= clean_graph(x[i], i);
		cnt -= clean_graph(y[i], i);
	}

	for(int i = 0; i < m; i++) {
		printf("%d\n", ans[i]);
	}
}