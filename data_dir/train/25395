#include<bits/stdc++.h> 

#define ssync ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define F first
#define S second
#define mp make_pair
#define pb push_back

using namespace std;

typedef long long int ll;
typedef unsigned long long int ull;
typedef long double ld;
template<typename T>
using vc=vector<T>;
template<typename T, typename X>
using pr=pair<T, X>;

const ll MOD = 1e9+7;
const ld PI = 3.14159265;

ll powerWithMod(ll base, ll exponent, ll modulus = LLONG_MAX)
{
	ll result = 1;
	base %= modulus;
	while(exponent > 0)
	{
		if(exponent % 2 == 1)
			result = (result * base) % modulus;
		exponent >>= 1;
		base = (base * base) % modulus;
	}
	return result;
}

ll modInverse(ll a, ll m = MOD)
{
	return powerWithMod(a, m-2, m);
}

ll const N = 1e6;
bool primes[2*N+1];
ll a[N+1], p[2*N+1], sum[2*N+1], n, x, y;

auto init()
{
    primes[0] = primes[1] = true;
    for (int i=2; i*i<=2*N; ++i)
        if (not primes[i])
            for (int j=2*i; j<=2*N; j+=i)
                primes[j]=true;
}

auto cnt(int l, int r)
{
	return max(0ll, p[r]-p[l-1]);
}

int main()
{
	ssync;
	cin>>n>>x>>y;
	init();
	bool ao=true;
	for(int i=1; i<=n; ++i)
	{
		cin>>a[i];
		++p[a[i]];
		if(a[i]>1)
			ao=false;
	}
	for (ll i=1; i<=2*N; ++i)
		sum[i] = sum[i-1] + i*p[i], p[i] += p[i-1];
	ll ans=LLONG_MAX;
	for(ll g=2; g<=2*N; ++g)
	{
		if(primes[g])
			continue;
		ll cost=0;
		for(ll k=g; k<=2*N; k+=g)
		{
			ll f = max(k-g, k-(x+y-1)/y);
			cost += cnt(k-g+1,f)*x + (cnt(f+1,k)*k - (sum[k]-sum[f]))*y;
		}
		ans = min(ans, cost);
	}
	cout<<ans<<"\n";
	return 0;
}
