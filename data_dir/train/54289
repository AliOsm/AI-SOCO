#include<bits/stdc++.h>
using namespace std;
#define int long long
#define fast ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0) ;

int M;
const int SZ = 2;
int add(int a, int b)
{
	int res = a + b;
	if(res >= M)
		return res - M;
	return res;
}

int mult(int a, int b)
{
	long long res = a;
	res *= b;
	if(res >= M)
		return res % M;
	return res;
}

struct matrix
{
	int arr[SZ][SZ];

	void reset()
	{
		memset(arr, 0, sizeof(arr));
	}

	void makeiden()
	{
		reset();
		for(int i=0;i<SZ;i++)
		{
			arr[i][i] = 1;
		}
	}

	matrix operator + (const matrix &o) const 
	{
		matrix res;
		for(int i=0;i<SZ;i++)
		{
			for(int j=0;j<SZ;j++)
			{
				res.arr[i][j] = add(arr[i][j], o.arr[i][j]);
			}
		}
		return res;
	}

	matrix operator * (const matrix &o) const 
	{
		matrix res;
		for(int i=0;i<SZ;i++)
		{
			for(int j=0;j<SZ;j++)
			{
				res.arr[i][j] = 0;
				for(int k=0;k<SZ;k++)
				{
					res.arr[i][j] = add(res.arr[i][j] , mult(arr[i][k] , o.arr[k][j]));
				}
			}
		}
		return res;
	}
};

matrix power(matrix a, int b)
{
	matrix res;
	res.makeiden();
	while(b)
	{
		if(b & 1)
		{
			res = res * a;
		}
		a = a * a;
		b >>= 1;
	}
	return res;
}

int binpow( int a , int b)
{
    int res = 1;
    while( b )
    {
        if( (b&1) ) res = (res*a)%M;
        a = ( a*a ) %M;
        b >>= 1;
    }
    return res;
}
signed main()
{
    fast ;
    int n , k , l;
    cin >> n >> k >> l >> M;
    int ans = 1%M;
    
    matrix jt;
    jt.arr[0][0] = jt.arr[0][1] = jt.arr[1][0] = 1;
    jt.arr[1][1] = 0;
    
    jt = power( jt , n );
    int No_consecutive_ones = (jt.arr[0][0] + jt.arr[0][1] ) %M;
    int atleast_one_consecutive_ones = (binpow( 2, n ) -  No_consecutive_ones + M ) % M;
    for(int i=0 ; i<l ; i++ )
    {
        if( (k&1) ) ans = ( ans * atleast_one_consecutive_ones ) % M;
        else        ans = ( ans * No_consecutive_ones ) % M;
        k >>= 1;
    }
    if( k ) cout << "0\n";
    else    cout << ans << "\n";
            
}