#include<bits/stdc++.h>
#define MOD 1000000007
#define ll long long
#define mp make_pair
#define pb push_back 
#define N 300010
using namespace std;
vector<int> graph[N];
int par[N], size[N], ans[N], visited[N], dist[N];
int root(int a){
	while(par[a] != a){
		a = par[a];
		par[a] = par[par[a]];
	}
	return a;
}
void unionit(int a, int b){
	int p = root(a);
	int q = root(b);
	if(p == q)
		return;
	if(size[p] < size[q]){
		par[p] = q;
		size[q] += size[p];
	}
	else{
		par[q] = p;
		size[p] += size[q];
	}
}
void unionit2(int a, int b){
	int p = root(a);
	int q = root(b);
	if(p == q)
		return;
	if(size[p] < size[q]){
		par[p] = q;
		size[q] += size[p];
		//cout << ans[q] << " " << ans[p] << '\n';
		ans[q] = max(ans[q], max(ans[p], 1 + (ans[p] + 1) / 2 + (ans[q] + 1) / 2));

	}
	else{
		par[q] = p;
		size[p] += size[q];
		//cout << ans[p] << " " << ans[q] << " " << p << " " << ans[root(p)] << '\n';
		ans[p] = max(ans[q], max(ans[p], 1 + (ans[p] + 1) / 2 + (ans[q] + 1) / 2));
	}
}
void find_longest(int s){
	queue<int> pq;
	pq.push(s);
	dist[s] = 0;
	visited[s] = 1;
	pair<int, int> maxi = mp(0, s);
	vector<int> rt;
	while(pq.size()){
		int x = pq.front();
		//cerr << x << "FISD\n";
		rt.pb(x);
		pq.pop();
		for(auto i: graph[x]){
			if(!visited[i]){
				dist[i] = dist[x] + 1;
				visited[i] = 1;
				pq.push(i);
				maxi = max(maxi, mp(dist[i], i));
			}
		}
	}
	for(int i = 0; i < rt.size(); i++)
		visited[rt[i]] = 0, dist[rt[i]] = 0;
	if(rt.size() == 1){
		ans[root(s)] = 0;
		return ;
	}
	int a = maxi.second;
	dist[a] = 0;
	visited[a] = 1;
	pq.push(a);
	maxi = mp(0, a);
	while(pq.size()){
		int x = pq.front();
		//cerr << x << '\n';
		pq.pop();
		for(auto i: graph[x]){
			if(!visited[i]){
				dist[i] = dist[x] + 1;
				visited[i] = 1;
				pq.push(i);
				maxi = max(maxi, mp(dist[i], x));
			}
		}
	}
	//cerr << s << '\n';
	//cerr << maxi.first << '\n';
	//cerr << root(s) << '\n';
	//cerr << root(3) << '\n';
	ans[root(s)] = maxi.first;
}
int main(){
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	int n, m, q;
	cin >> n >> m >> q;
	for(int i = 1; i <= n; i++){
		par[i] = i;
		size[i] = 1;
	}
	for(int i = 0; i < m; i++){
		int a, b;
		cin >> a >> b;
		graph[a].pb(b);
		graph[b].pb(a);
		unionit(a, b);
	}

	//cerr << "HERE\n";
	for(int i = 1; i <= n; i++){
		if(!visited[i]){
			//cerr << i << '\n';
			find_longest(i);
		}
	}
	//cerr << "HERE\n";
	while(q--){
		int t;
		cin >> t;
		if(t == 1){
			int x;
			cin >> x;
			cout << ans[root(x)] << '\n';
		}
		else{
			int x, y;
			cin >> x >> y;
			unionit2(x, y);
		}
	}
}