/*
 Anton Gulikov
*/
#pragma comment(linker,"/STACK:300000000")
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <list>
#include <math.h>
#include <string>
#include <stdlib.h>

#define gcd(a,b) __gcd((a),(b))
#define sqr(a) ((a)*(a))
#define odd(a) ((a)&1)
#define foru(i,n) for (int i=0;i<(n);i++)
#define ford(i,n) for (int i=(n)-1;i>=0;i--)
#define forab(i,l,r) for (int i=(l);i<=(r);i++)
#define forabd(i,r,l) for (int i=(r);i>=(l);i--)
#define fillchar(a,b) memset((a),(b),sizeof((a)))
#define pb push_back
#define F first
#define S second
#define all(x) x.begin,x.end
#define pw2(x) (1ull<<(x))
#define mp make_pair

const long double eps=1e-20;
const long double pi=acos(-1.0);
const long long inf=1000*1000*1000*1000*1000*1000;
const long long base=1000*1000*1000+7;

using namespace std;

vector <vector <int> > g(111111),f(111111);
int depth[111111],where[111111];
int n,root,q,x,y,tq,dep,val;

void dfs(int v,int dep,int pr,int who){
	where[v]=who;
	depth[v]=dep;
	f[who].pb(0);
	foru(i,g[v].size()) if (g[v][i]!=pr) dfs(g[v][i],dep+1,v,who);
}

int fs(int pos,int x){
	int res=0;
	for (int i=x; i>0; i=(i & (i+1))-1) res+=f[pos][i];
	return res;
}

void md(int pos,int x,int val){
	for (int i=x; i<f[pos].size(); i=i | (i+1)) f[pos][i]+=val;
}	

int main(){
//	freopen ("in.txt","r",stdin);
//	freopen ("out.txt","w",stdout);
	scanf("%d%d",&n,&q);
	foru(i,n-1){
		scanf("%d%d",&x,&y);
		x--; y--;
		g[x].pb(y); g[y].pb(x);
	}
	foru(i,n+n) f[0].pb(0);
	foru(i,g[0].size()){
		f[i+1].pb(0);
		dfs(g[0][i],1,0,i+1);
	}
	foru(i,q){
		scanf("%d",&tq);
		if (tq==1){
			scanf("%d",&x);
			x--;
			if (x==0) printf("%d\n",root); else printf("%d\n",fs(where[x],depth[x])+fs(0,depth[x]));
		} else{
			scanf("%d%d%d",&x,&val,&dep);
			x--;
			if (x==0){
				root+=val;
				md(0,1,val); md(0,dep+1,-val);
				continue;
			} 
			if (depth[x]>dep){
				md(where[x],depth[x]-dep,val);
				md(where[x],depth[x]+dep+1,-val);
			} else{
				root+=val;
				md(0,1,val);
				md(0,-depth[x]+dep+1,-val);
				md(where[x],dep-depth[x]+1,val);
				md(where[x],depth[x]+dep+1,-val);
			}
		}
	}
	return 0;
}                       