///Bismillahir Rahmanir Rahim
#include<bits/stdc++.h>

#define                           int                         long long
#define                           fi                          first
#define                           si                          second
#define                           mp                          make_pair
#define                           pb                          push_back
#define                           meme(x)                     memset(x,0,sizeof(x));
#define                           pi                          pair<int,int>
#define                           f(i,l,r)                    for(int i=l;i<=r;i++)
#define                           rf(i,r,l)                   for(int i=r;i>=l;i--)
#define                           M                           1009
#define                           bug(i)                      cout<<"done = "<<i<<endl;
#define                           fast                        ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);


//Implementation practice . used others solution

using namespace std;

const int inf=1e18;
const int mod=1e9+7;

#define up 0
#define lft 1
#define down 2
#define rgt 3

int d[4][2]={{-1,0},{0,-1},{1,0},{0,1}};

int n,m,q;
bool chk(int i,int j)
{
    if(i>0 && i<=n && j>0 && j<=m)return true;
    else return false;
}
struct Node
{
     Node *nxt[4];
     int val;

};

Node box[M+2][M+2];

void init()
{

    f(i,1,n)
    {
        f(j,1,m)
        {
            cin>>box[i][j].val;
            f(k,0,3)
            {
                int x=i+d[k][0];
                int y=j+d[k][1];
                if(chk(x,y))
                {
                    box[i][j].nxt[k]=&box[x][y];
                }
            }
        }
    }
    f(i,1,n)
    {
        box[i][0].nxt[rgt]=&box[i][1];
        box[i][1].nxt[lft]=&box[i][0];
        box[i][m].nxt[rgt]=&box[i][m+1];
        box[i][m+1].nxt[lft]=&box[i][m];
    }
    f(j,1,m)
    {
        box[0][j].nxt[down]=&box[1][j];
        box[1][j].nxt[up]=&box[0][j];
        box[n+1][j].nxt[up]=&box[n][j];
        box[n][j].nxt[down]=&box[n+1][j];
    }
}


 main()
{  fast
   cin>>n>>m>>q;
   Node *st=&box[1][1];
   init();
   while(q--)
   {
       int a,b,c,d,h,w;
       cin>>a>>b>>c>>d>>h>>w;
       Node *x=st;
       Node *y=st;
       f(i,1,a-1)x=x->nxt[down];
       f(i,1,b-1)x=x->nxt[rgt];
       f(i,1,c-1)y=y->nxt[down];
       f(i,1,d-1)y=y->nxt[rgt];
       int i=1,j=1;
       for(;j<=w;++j)
       {
           swap(x->nxt[up],y->nxt[up]);
           swap(x->nxt[up]->nxt[down],y->nxt[up]->nxt[down]);
           if(j<w)x=x->nxt[rgt],y=y->nxt[rgt];
       }
       j--;
       for(;i<=h;++i)
       {
           swap(x->nxt[rgt],y->nxt[rgt]);
           swap(x->nxt[rgt]->nxt[lft],y->nxt[rgt]->nxt[lft]);
           if(i<h)x=x->nxt[down],y=y->nxt[down];
       }
       i--;
       for(;j>=1;--j)
       {
              swap(x->nxt[down],y->nxt[down]);
              swap(x->nxt[down]->nxt[up],y->nxt[down]->nxt[up]);
              if(j>1)
              {
                  x=x->nxt[lft];
                  y=y->nxt[lft];
              }
       }
       j++;
       for(;i>=1;--i)
       {
           swap(x->nxt[lft],y->nxt[lft]);
           swap(x->nxt[lft]->nxt[rgt],y->nxt[lft]->nxt[rgt]);
           if(i>1)
           {
               x=x->nxt[up];
               y=y->nxt[up];
           }
       }
       i++;
      if(a==1 && b==1)st=y;
      else if(c==1 && d==1)st=x;

   }
    Node *cur=st;
    f(i,1,n)
    {
        Node *row=cur;
        f(j,1,m)
        {
            cout<<cur->val<<" ";
            if(j<m)cur=cur->nxt[rgt];
        }
        cout<<endl;
        if(i<n)cur=row->nxt[down];

    }

return 0;

}


