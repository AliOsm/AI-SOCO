//prince0fcrows
#include <bits/stdc++.h>
#define int long long
#define mx 1004
#define mod 1000000007

using namespace std;
std::vector< int > g[mx];
int ara[mx], vis[mx], ans, edg, nde;
std::vector< pair < int, int > > v;
std::vector< pair < int, int > > x;
map <int, int> mp[mx];

void dfs(int u){
    if(vis[u]) return;
    vis[u] = 1;
    if(ara[u]) ans = 1;
    nde++;
    for(int i=0;i<g[u].size();i++){
        if(!mp[u][g[u][i]]&&!mp[g[u][i]][u]){
            mp[u][g[u][i]] = 1;
            mp[g[u][i]][u] = 1;
            edg++;
        }
        dfs(g[u][i]);
    }
}

int32_t main(){
    //freopen("in.txt", "r", stdin);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int i, j, a, n, h, m, b, k;
    while(cin >> n >> m >> k){
        memset(ara, 0, sizeof ara);
        for(i=0;i<k;i++){
            cin >> a;
            ara[a] = 1;
        }
        for(i=0;i<m;i++){
            cin >> a >> b;
            g[a].push_back(b);
            g[b].push_back(a);
        }
        memset(vis, 0, sizeof vis);
        for(i=1;i<=n;i++){
            if(!vis[i]){
                ans = nde = edg = 0;
                dfs(i);
                //cout << ans <<" " << nde <<" " << edg << endl;
                if(ans) v.push_back(make_pair(nde, edg));
                else x.push_back(make_pair(nde, edg));
            }
        }
        sort(v.rbegin(), v.rend());
        //cout << v.size() << " " << x.size() << endl;
        ans = nde = edg = 0;
        for(i=0;i<x.size();i++){
            nde += x[i].first;
            edg += x[i].second;
        }
        if(v.size()){
            nde += v[0].first;
            edg += v[0].second;
        }
        ans += ((nde*(nde-1))/2 - edg);
        for(i=1;i<v.size();i++){
            nde = v[i].first;
            edg = v[i].second;
            ans += ((nde*(nde-1))/2 - edg);
        }
        cout << ans << endl;
        v.clear();
        x.clear();
        for(i=1;i<=n;i++){
            mp[i].clear();
            g[i].clear();
        }
    }
    return 0;
}










