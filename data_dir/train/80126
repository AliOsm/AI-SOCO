//satyaki3794
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <cstring>
#include <algorithm>
#include <climits>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cctype>
#include <cassert>
#include <bitset>
#include <iomanip>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define PI (3.14159265)
#define ff first
#define ss second
#define pb push_back
#define MOD (1000000007LL)
#define INF (100000005)
#define SIZE (2)
#define TREESIZE (302144)
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define epsilon 1e-8 //add to double before casting to integer
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef pair<ll, int> pli;


#define matrix vector< vector<ll> >

matrix matmul(matrix &a, matrix &b){
    int i, j, k, n = a.size();
    matrix ans (n, vector<ll>(n));
    for(i=0;i<n;i++)
        for(j=0;j<n;j++){
            ll temp = 0;
            for(k=0;k<n;k++)    temp = (temp + a[i][k] * b[k][j]) % MOD;
            ans[i][j] = temp;
        }

    return ans;
}

matrix matpwr(matrix &a, ll p){
    int n = a.size();
    matrix ans(n, vector<ll> (n));
    for(int i=0;i<n;i++)    ans[i][i] = 1;

    while(p){
        if(p&1) ans = matmul(ans, a);

        a = matmul(a, a);
        p >>= 1;
    }
    return ans;
}


ll pwr(ll base, ll p, ll mod = MOD){
    ll ans = 1;
    while(p){
        if(p & 1)   ans = (ans * base) % mod;
        base = (base * base) % mod;
        p /= 2;
    }
    return ans;
}


ll gcd(ll a, ll b){
    if(b == 0)  return a;
    return gcd(b, a%b);
}


ll lcm(ll a, ll b){
    return (a*b) / gcd(a, b);
}


ll invMod(ll n, ll mod = MOD){
    return pwr(n, mod-2);
}

#define BASE 100003
int n, x[100003], y[100004], BIT[100003];
vector<ii> points[300004];
vector<int> values[300004];
map<int, ii> ans;
map<ii, int> mapping;

void update(int idx, int val){
    while(idx <= 100001){
        BIT[idx] = max(BIT[idx], val);
        idx += idx & (-idx);
    }
}

int query(int idx){
    int ans = 0;
    while(idx){
        ans = max(ans, BIT[idx]);
        idx -= idx & (-idx);
    }
    return ans;
}



int main()
{
    ios_base::sync_with_stdio(0);
    // freopen("input.txt", "r", stdin);

    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>x[i]>>y[i];
        x[i]++; y[i]++;
        points[BASE+y[i]-x[i]].pb(ii (x[i], y[i]));
    }

    for(int i=1;i<=n;i++){
        int w;
        cin>>w;
        values[BASE+w].pb(i);
    }

    for(int k=-100000;k<=100000;k++){
        sort(points[BASE+k].begin(), points[BASE+k].end());
        if(points[BASE+k].size() != values[BASE+k].size()){
            cout<<"NO";
            return 0;
        }
        for(int i=0;i<(int)points[BASE+k].size();i++){
            ans[values[BASE+k][i]] = points[BASE+k][i];
            mapping[points[BASE+k][i]] = values[BASE+k][i];
        }
    }

    vector<ii> v;
    for(map<int,ii>::iterator it=ans.begin();it!=ans.end();it++){
        ii temp = (it->ss);
        v.pb(temp);
    }

    sort(v.begin(), v.end());
// cout<<v[0].ff<<" "<<v[0].ss<<" "<<v[1].ff<<" "<<v[1].ss<<endl;
    for(int i=0;i<(int)v.size();i++){
        int temp = query(v[i].ss);
        if(temp > mapping[v[i]]){
            cout<<"NO";
            return 0;
        }
        update(v[i].ss, mapping[v[i]]);
    }

    cout<<"YES\n";
    for(map<int,ii>::iterator it=ans.begin();it!=ans.end();it++){
        ii temp = (it->ss);
        cout<<temp.ff-1<<" "<<temp.ss-1<<endl;
    }
    return 0;
}











