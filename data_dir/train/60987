#include <bits/stdc++.h>
#define err(args...) {}
#ifdef DEBUG
#include "_debug.cpp"
#endif
using namespace std;
using ll = long long;
struct edge { int u, v, i; };
ostream& operator<<(ostream& os, const edge& e) {
    os << "(" << e.u << ", " << e.v << ")";
    return os;
}
template <bool Directed> struct graph {
    int n;
    vector<edge> edges;
    vector<vector<edge>> adj;
    graph(int n) : n(n), adj(n + 1) {}
    void add_edge(int u, int v) {
        int i = edges.size();
        edges.push_back({u, v, i});
        adj[u].push_back({u, v, i});
        if(not Directed) adj[v].push_back({v, u, i});
    }
};
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    graph<0> g(n);
    for(int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        g.add_edge(u, v);
    }
    vector<bool> seen(n + 1);
    priority_queue<int, vector<int>, greater<int>> pq;
    pq.push(1);
    seen[1] = true;
    while(not pq.empty()) {
        int u = pq.top(); pq.pop();
        cout << u << " ";
        for(auto [u, v, i] : g.adj[u]) {
            if(not seen[v]) {
                pq.push(v);
                seen[v] = true;
            }
        }
    }
    cout << endl;
    return 0;
}
