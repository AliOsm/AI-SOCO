#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000002;
const ll INFLL = 100000000000000000ll;
const ll MOD = 1000003;

// ----------------------------------------------------------------------------------------------------------

bool V[3005][3005];
int D[3005][3005], From[3005][3005], N, M, K;
unordered_set<ll> Bad;
vector<int> E[3005];

int main()
{
    cin >> N >> M >> K;
    f(i,1,M)
    {
        int a,b;
        scanf("%d %d", &a, &b);
        E[a].pb(b), E[b].pb(a);
    }
    f(i,1,K)
    {
        int a,b,c;
        scanf("%d %d %d", &a, &b, &c);
        ll l1 = 3001*3001;
        ll l2 = 3001;
        Bad.insert(l1*a + l2*b + c);
    }

    queue<pii> q;
    f(i,1,3000) f(j,1,3000) D[i][j] = INF;
    for(int v : E[1]) q.push({1,v}), D[1][v] = 1;

    while(!q.empty())
    {
        pii p = q.front();
        q.pop();

        int a = p.first, b = p.second;
        ll l1 = 3001*3001;
        ll l2 = 3001;

        if(b == N)
        {
            cout << D[a][b] << "\n";

            vector<int> v;
            while(b > 0)
            {
                v.pb(b);
                int na = From[a][b];
                b = a;
                a = na;
            }
            reverse(all(v));
            for(int x : v) printf("%d ", x);
            return 0;
        }

        for(int c : E[b])
        {
            ll node = l1*a + l2*b + c;
            if(Bad.find(node) != Bad.end()) continue;
            if(D[b][c] > D[a][b] + 1)
            {
                D[b][c] = D[a][b] + 1;
                From[b][c] = a;
                q.push({b,c});
            }
        }
    }

    cout << -1;
}
