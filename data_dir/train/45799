#include <bits/stdc++.h>
 
using namespace std;
 
#define pb push_back
#define ff first
#define ss second
 
typedef long long ll;
const ll MAXN = 2e5 + 10, inf = 1e18, mod = 1e9 + 7;
 
ll n, m, s;
vector <ll> edge[MAXN];
vector <ll> path;
string dp[MAXN][2];
 
void Read_input() {
	cin >> n >> m;
	for (ll i = 1; i <= n; i++) {
		ll k;
		cin >> k;
		for (ll j = 1; j <= k; j++) {
			ll y;
			cin >> y;
			edge[i].pb(y);
		}
	}
	for (ll i = 0; i < MAXN; i++)	dp[i][0] = "!", dp[i][1] = "!";
	cin >> s;
}
 
string dfs(ll v, ll cnt) {
//	cerr << v << " " << cnt << endl;
	cnt++;
	if (edge[v].empty() and cnt % 2)	return "Lose";
	if (edge[v].empty())	return "Win";
	if (cnt == 1e6)	return "Draw";
	string ans = "!";
	for (auto i : edge[v]) {
		string tmp;
		if (dp[i][!(cnt % 2)] == "!") {
	       		tmp = dfs(i, cnt);
			dp[i][!(cnt % 2)] = tmp;
		}
		else
			tmp = dp[i][!(cnt % 2)];
		if (tmp == "Win") {
			path.pb(i);
			return "Win";
		}
		else if (tmp == "Draw")	ans = "Draw";
		else if (ans == "!")	ans = tmp;
	}
	return ans;
}
 
void Solve() {
	string ans = dfs(s, 0);
	cout << ans << endl;
	reverse(path.begin(), path.end());
	if (ans == "Win") {
		cout << s;
		for (auto i : path)
			cout << " " << i;
	}
}
 
 
int main() {
 
	ios_base::sync_with_stdio(false);	cin.tie(0);	cout.tie(0);
	//freopen("input.txt", "r", stdin),	freopen("output.txt", "w", stdout);
 
	Read_input(),	Solve();
	return 0;
}