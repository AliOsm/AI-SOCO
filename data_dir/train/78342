#include <bits/stdc++.h>
using namespace std;

int minrmq[20][200010];
int maxrmq[20][200010];
int lg[200010];
int n;
long long ans;

int get_dif(int st, int dr);
void mk_rmq();
void cbin(int x);

int main()
{
	ios_base :: sync_with_stdio(0);
	cin.tie(0);

	cin >> n;
	for (int i(1); i <= n; i++)
		cin >> maxrmq[0][i];
	for (int i(1); i <= n; i++)
		cin >> minrmq[0][i];

	mk_rmq();

	for (int i(1); i <= n; i++)
		cbin(i);

	cout << ans;
	return 0;
}

void cbin(int x)
{
	int p1(x), p2(x), q(1 << 20);
	while (q) {
		if (p1 + q <= n && get_dif(x, p1 + q) < 0)
			p1 += q;
		if (p2 + q <= n && get_dif(x, p2 + q) <= 0)
			p2 += q;
		q >>= 1;
	}
	if (get_dif(x, p1) < 0)
		p1++;
	if (get_dif(x, p1) > 0)
		return;
	if (p1 <= p2) {
		ans += p2 - p1 + 1;
	}
}

void mk_rmq()
{
	for (int i(2); i <= 200000; i++)
		lg[i] = 1 + lg[i / 2];

	for (int i(1); i < 20; i++) {
		for (int j(1); j + (1 << i) - 1 <= n; j++) {
			minrmq[i][j] = min(minrmq[i - 1][j], minrmq[i - 1][j + (1 << (i - 1))]);
			maxrmq[i][j] = max(maxrmq[i - 1][j], maxrmq[i - 1][j + (1 << (i - 1))]);
		}

	}
}

int get_dif(int st, int dr)
{
	int l(lg[dr - st + 1]);
	return max(maxrmq[l][st], maxrmq[l][dr - (1 << l) + 1]) - min(minrmq[l][st], minrmq[l][dr - (1 << l) + 1]);
}