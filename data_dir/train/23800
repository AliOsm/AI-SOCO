#include <bits/stdc++.h>

using namespace std;

#define sz(a) int(a.size())


struct fl {
	int d, u, c;
	bool operator <(const fl &B) const {
		return d < B.d;
	}
};

int csD [100010];
multiset <int> csA [100010];

int main() {
	int n,m,k;
	scanf("%d%d%d",&n,&m,&k);

	vector <fl> dp, ar;
	
	for (int i = 0; i < m; i++) {
		int d, f, t, c;
		scanf("%d%d%d%d",&d,&f,&t,&c);
		if (!f) ar.push_back({d,t,c});
		else dp.push_back({d,f,c});
	}
	
	sort(dp.begin(),dp.end());
	sort(ar.begin(),ar.end());
	
	int qD = 0, lD = 0, qA = 0;
	long long cost = 0;
	int p = 0;
	for (int i = 0; i < sz(dp); i++) {
		if (!csD[dp[i].u]) {
			qD++;
			csD[dp[i].u] = dp[i].c;
		}
		csD[dp[i].u] = min(csD[dp[i].u],dp[i].c);
		lD = dp[i].d;
		if (qD == n) {
			p = i;
			break;
		}
	}
	if (qD != n) {
		puts("-1");
		return 0;
	}
	for (int i = 1; i <= n; i++) cost += csD[i];
	
	int j = sz(ar)-1;
	while (j >= 0 && lD+k < ar[j].d){
		if (!sz(csA[ar[j].u])) qA++;
		else cost -= *csA[ar[j].u].begin();
		csA[ar[j].u].insert(ar[j].c);
		cost += *csA[ar[j].u].begin();
		j--;
	}
	
	if (qA != n) {
		puts("-1");
		return 0;
	}
	
	long long ans = cost;
	for (int i = p+1; i < sz(dp); i++) {
		cost -= csD[dp[i].u];
		csD[dp[i].u] = min(csD[dp[i].u],dp[i].c);
		lD = dp[i].d;
		cost += csD[dp[i].u];
		bool bk = 0;
		while (j+1 < sz(ar) && ar[j+1].d <= lD+k) {
			j++;
			cost -= *csA[ar[j].u].begin();
			csA[ar[j].u].erase(csA[ar[j].u].find(ar[j].c));
			if (!sz(csA[ar[j].u])) {
				bk = 1;
				break;
			}
			cost += *csA[ar[j].u].begin();
			
		}
		if (bk) break;
		ans = min(ans,cost);
	}
	cout << ans << endl;
}