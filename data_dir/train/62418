#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;

const int N = 1e5 + 5;

int n, m, mark[N], dp[N], h[N];
vector <int> adj[N];
vector <pii> ans;
set <pii> s;

void dfs(int v, int p = -1) {
	dp[v] = h[v];
	mark[v] = true;
	for (auto u : adj[v]) {
		if(u == p)
			continue;
		if(!mark[u]) {
			h[u] = h[v] + 1;
			mark[u] = true;
			ans.push_back({v, u});
			s.erase({v, u}), s.erase({u, v});
			dfs(u, v);
			dp[v] = min(dp[u], dp[v]);
		}
		else {
//			ans.push_back({v, u});
			dp[v] = min(dp[v], h[u]);	
		}
	}
	if(v != 0 && dp[v] >= h[v]) {
		cout << 0 << "\n";
		exit(0);
	}
}

int main() {
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);	
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int v, u;
		cin >> v >> u;
		v--, u--;
		adj[v].push_back(u), adj[u].push_back(v);
		s.insert({v, u}), s.insert({u, v});
	}
	dfs(0);
	for (auto e : s) {
		int v = e.first, u = e.second;
		if(h[v] < h[u])
			swap(v, u);
		ans.push_back({v, u});
	}
	sort(ans.begin(), ans.end());
	ans.resize(unique(ans.begin(), ans.end()) - ans.begin());
	for (auto e : ans)
		cout << e.first + 1 << " " << e.second + 1 << "\n";
}
