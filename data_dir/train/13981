#include <bits/stdc++.h>
         
using namespace std;
typedef long long ll;
typedef vector<ll> vl ;
typedef pair<ll,ll> pl;
         
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define all(v) (v).begin(),(v).end()
#define max(a,b) (a>b ? a : b)
#define min(a,b) (a<b ? a : b)
#define FAST ios::sync_with_stdio(0), cin.tie(0),cout.tie(0)
         
const int MOD = 998244353 ;
const int N = 500005;
const double PI =4*atan(1);
const double eps = 1e-7;
const long long oo = 1e10;
const int K = 205;

typedef long double ftype;
typedef complex<ftype> point;
#define x real
#define y imag

ftype dot(point a, point b) {
    return (conj(a) * b).x();
}

ftype cross(point a, point b) {
    return (conj(a) * b).y();
}

vector<point> hull, vecs;

void add_line(ftype k, ftype b) {
    point nw = {k, b};
    while(!vecs.empty() && dot(vecs.back(), nw - hull.back()) < 0) {
        hull.pop_back();
        vecs.pop_back();
    }
    point nd = {0,1};
    if(!hull.empty()) {
        vecs.push_back(nd * (nw - hull.back()));
    }
    hull.push_back(nw);
}

long double get(ftype x) {
    point query = {x, 1};
    auto it = lower_bound(vecs.begin(), vecs.end(), query, [](point a, point b) {
        return cross(a, b) > 0;
    });
    return dot(query, hull[it - vecs.begin()]);
}


ll n;
ll a[N];
ll b[N];
ll dp[N];

int main(){
    FAST;
    //freopen("easy.txt","r",stdin);
    cin >> n;
    for(int i=0;i<n;i++)cin >> a[i];
    for(int i=0;i<n;i++)cin >> b[i];
    add_line(-b[0],0);
    for(int i=1;i<n;i++){
        ll x = get(-a[i]);
        //cout << x << endl;
        dp[i]=x;
        add_line(-b[i],dp[i]);
    }
    cout << dp[n-1];
    return 0;
}