#include <bits/stdc++.h>
using namespace std;
#define rep(i, a) for (int i = 0; i < (a); i++)
#define rep2(i, a, b) for (int i = (a); i < (b); i++)
#define repr(i, a) for (int i = (a) - 1; i >= 0; i--)
#define repr2(i, a, b) for (int i = (b) - 1; i >= (a); i--)
template<class T1, class T2> bool chmin(T1 &a, T2 b) { return b < a && (a = b, true); }
template<class T1, class T2> bool chmax(T1 &a, T2 b) { return a < b && (a = b, true); }
typedef long long ll;

typedef complex<ll> C;
const ll inf = 5e18;

ll hypot2(ll x, ll y) {
	return x * x + y * y;
}

ll cross(C a, C b) {
	return imag(conj(a) * b);
}

int main() {
	int n;
	cin >> n;
	vector<ll> xs(n), ys(n);
	rep(i, n) scanf("%I64d %I64d", &xs[i], &ys[i]);

	int p1 = 0;
	pair<ll, int> mn(inf, 101010);
	rep2(i, 1, n) {
		ll dist = hypot2(xs[i] - xs[p1], ys[i] - ys[p1]);
		chmin(mn, make_pair(dist, i));
	}
	int p2 = mn.second;

	vector<C> ps(n);
	rep(i, n) ps[i] = C(xs[i], ys[i]);

	pair<ll, int> mn2(inf, 101010);
	rep(i, n) if (i != p1 && i != p2) {
		ll area = abs(cross(ps[p2] - ps[p1], ps[i] - ps[p1]));
		if (area != 0) {
			chmin(mn2, make_pair(area, i));
		}
	}
	int p3 = mn2.second;

	p1++; p2++; p3++;
	cout << p1 << " " << p2 << " " << p3 << endl;

	return 0;
}