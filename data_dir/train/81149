#include <bits/stdc++.h>
#define ll long long
#define pb push_back
#define F first
#define S second
using namespace std;

const int N=2004,M=4e6+6;

int n,m,timer,depth;
bool f[N],F[M],D[N];
int disc[N],low[N],p[N],dep[N],a[M],b[M];
ll ans,sz[N],tot[N],u[N];
vector < int > G[N];
vector < pair < int , int > > v[N];
 
int P(int x) {
  if (p[x]==x) return x;
  return p[x]=P(p[x]);
}

void Uni(int a,int b) {
  a=P(a);
  b=P(b);
  if (a==b) return ;
  if (sz[a]<sz[b])
    swap(a,b);
  p[b]=a;
  sz[a]+=sz[b];
}

void Dfs(int x,int p) {
  f[x]=1;
  disc[x]=low[x]=++timer;
  for (int i=0; i<v[x].size(); i++) {
    int to=v[x][i].F,ed=v[x][i].S;
    if (to==p) continue;
    if (!f[to]) {
      Dfs(to,x);
      low[x]=min(low[x],low[to]);
      if (low[to]>disc[x]) {
        F[ed]=1;
      }
    }
      else low[x]=min(low[x],disc[to]);
  }
}

ll cur=0;
void Ufs(int x,int p) {
  tot[x]=u[x];
  for (int i=0; i<G[x].size(); i++) {
    int to=G[x][i];
    if (to==p) continue;
    Ufs(to,x);
    tot[x]+=tot[to];  	
  }
  cur+=(tot[x]-u[x])*u[x];
}

main () {
  ios::sync_with_stdio(false);
  cin.tie(NULL),cout.tie(NULL);
  cin>>n>>m;
	
  for (int i=1; i<=m; i++) {
    cin>>a[i]>>b[i];
    v[a[i]].pb({b[i],i});
    v[b[i]].pb({a[i],i});
  }
	
  for (int i=1; i<=n; i++)
    p[i]=i,sz[i]=1;
	
  Dfs(1,1);
	
  for (int i=1; i<=m; i++) {
    if (F[i]) continue;
    Uni(a[i],b[i]);
  }
		
  vector < int > s;
  int g[N];
	
  for (int i=1; i<=n; i++) {
    int x=P(i);
    g[i]=f[i]=0;
    s.pb(x);
  }
	
  sort(s.begin(),s.end());
  s.erase(unique(s.begin(),s.end()),s.end());
  int S=s.size();

  for (int i=0; i<S; i++) {
    g[s[i]]=i+1;
    u[i+1]=sz[s[i]];
    ans+=sz[s[i]]*sz[s[i]];
  }
	
  for (int i=1; i<=m; i++) {
    if (F[i]) {
      int A=g[P(a[i])],B=g[P(b[i])];
      G[A].pb(B);
      G[B].pb(A);
    }
  }

  ll res=0,L=0;
  bitset < 1111> D;
  for (int i=1; i<=S; i++) {
    cur=0,L=0,D=1;
    Ufs(i,i);
    for (int j=0; j<G[i].size(); j++) 
      D|=(D<<tot[G[i][j]]);
    for (int j=0; j<=(n-u[i])/2; ++j) 
      if (D[j]) L=j;
    cur+=L*(n-u[i]-L);
    res=max(res,cur);
  }

  cout<<ans+res<<endl;
}