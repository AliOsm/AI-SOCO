#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

//#define PB push_back
#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 998244353

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

//
//debug
template<typename F,typename S>ostream&operator<<(ostream&os,const pair<F,S>&p){return os<<"("<<p.first<<", "<<p.second<<")";}
template<typename T>ostream&operator<<(ostream&os,const vector<T>&v){os<<"{";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"}";}
template<typename T>ostream&operator<<(ostream&os,const set<T>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<",";os<<*it;}return os<<"]";}
template<typename T>ostream&operator<<(ostream&os,const multiset<T>&v) {os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<*it;}return os<<"]";}
template<typename F,typename S>ostream&operator<<(ostream&os,const map<F,S>&v){os<<"[";for(auto it=v.begin();it!=v.end();++it){if(it!=v.begin())os<<", ";os<<it->first<<" = "<<it->second;}return os<<"]";}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu(){cerr << endl;}
template<typename T>void faltu(T a[],int n){for(int i=0;i<n;++i)cerr<<a[i]<<' ';cerr<<endl;}
template<typename T,typename...hello>void faltu(T arg,const hello&...rest){cerr<<arg<<' ';faltu(rest...);}
//#else
//#define dbg(args...)

int n, k;
ll dp[1005][2005][2][2];

ll recur( int pos, int koita, bool ok1, bool ok2 )
{
	if( pos == n-1 ) {
		if( koita == k ) return 1;
		return 0;
	}
	if( dp[pos][koita][ok1][ok2] != -1 ) return dp[pos][koita][ok1][ok2];
	ll ret = 0;
	if( !ok1 && !ok2 ) {
		ret += recur( pos+1, koita, 0, 0 );
		ret %= MOD;
		ret += recur( pos+1, koita+1, 1, 1 );
		ret %= MOD;
		ret += recur( pos+1, koita+1, 0, 1 );
		ret %= MOD;
		ret += recur( pos+1, koita+1, 1, 0 );
		ret %= MOD;
	}
	else if( !ok1 && ok2 ) {
		ret += recur( pos+1, koita, 0, 0 );
		ret %= MOD;
		ret += recur( pos+1, koita, 0, 1 );
		ret %= MOD;
		ret += recur( pos+1, koita, 1, 1 );
		ret %= MOD;
		ret += recur( pos+1, koita+2, 1, 0 );
		ret %= MOD;
	}
	else if( ok1 && !ok2 ) {
		ret += recur( pos+1, koita, 1, 1 );
		ret %= MOD;
		ret += recur( pos+1, koita, 0, 0 );
		ret %= MOD;
		ret += recur( pos+1, koita, 1, 0 );
		ret %= MOD;
		ret += recur( pos+1, koita+2, 0, 1 );
		ret %= MOD;
	}
	else if( ok1 && ok2 ) {
		ret += recur( pos+1, koita, 1, 1 );
		ret %= MOD;
		ret += recur( pos+1, koita+1, 0, 0 );
		ret %= MOD;
		ret += recur( pos+1, koita+1, 1, 0 );
		ret %= MOD;
		ret += recur( pos+1, koita+1, 0, 1 );
		ret %= MOD;
	}
	dp[pos][koita][ok1][ok2] = ret;
	return ret;
}

int main()
{
	optimize();
	mem(dp, -1);
	cin >> n >> k;
	ll ans = 0;
	ans += recur( 0, 1, 0, 0 );
	ans %= MOD;
	ans += recur( 0, 1, 1, 1 );
	ans %= MOD;
	ans += recur( 0, 2, 0, 1 );
	ans %= MOD;
	ans += recur( 0, 2, 1, 0 );
	ans %= MOD;
	cout << ans;
}





















