#include <bits/stdc++.h>
using namespace std;

int n;

typedef int ull;
typedef pair<ull, ull> P;

#define ft first
#define sd second

const ull B1 = 1e9 + 7;
const ull B2 = 1e9 + 9;

const ull MOD1 = 805306457;
const ull MOD2 = 1610612741;

set<P> ss;

struct Hash_Pair {
	P dat;
	
	void init(ull x, ull y) {
		dat.ft = x;
		dat.sd = y;
	}
};

Hash_Pair add(Hash_Pair x, Hash_Pair y) {
	Hash_Pair res = x;
	res.dat.ft = (1ll * res.dat.ft * B1 + y.dat.ft) % MOD1;
	res.dat.sd = (1ll * res.dat.sd * B2 + y.dat.sd) % MOD2;
	return res;
}

string s;

const int MOD = 1e9 + 7;

int res;
int dp[3055][3055];

void insert(int l, int r) {
	res = (res + dp[l][r]) % MOD;
}
bool valid(int l, int r) {
	if (r - l + 1 != 4) return true;
	
	//"0011", "0101", "1110", and "1111".
	
	if (s[l] == '0' && s[l + 1] == '0' && s[l + 2] == '1' && s[l + 3] == '1') {
		return false;
	}
	
	if (s[l] == '0' && s[l + 1] == '1' && s[l + 2] == '0' && s[l + 3] == '1') {
		return false;
	}
	
	if (s[l] == '1' && s[l + 1] == '1' && s[l + 2] == '1' && s[l + 3] == '0') {
		return false;
	}
	
	if (s[l] == '1' && s[l + 1] == '1' && s[l + 2] == '1' && s[l + 3] == '1') {
		return false;
	}
	
	return true;
}

vector<int> event[3055];

int main() {
	cin >> n;
	
	for (int i = 0; i < n; i++) {
		int x;
		scanf("%d", &x);
		
		s += (char)(x + '0');
	}
	
	for (int i = 0; i < n; i++) {
		for (int j = i; j < n; j++) {
			for (int k = max(i, j - 3); k <= j; k++) {
				if (!valid(k, j)) {
					continue;
				}
				
				int val = 1;
				
				if (k - 1 >= i) {
					val = dp[i][k - 1];
				}
				
				dp[i][j] = (dp[i][j] + val) % MOD;
			}
		}
	}
	
	vector<pair<Hash_Pair, pair<unsigned int, unsigned int>> > vec;
	
	
	for (int i = 0; i < n; i++) {
		Hash_Pair cur;
		cur.init(0, 0);
		
		for (int j = i; j >= 0; j--) {
			cur = add(cur, (Hash_Pair){P(s[j], s[j])});
			vec.push_back(make_pair(cur, make_pair(j, i)));
		}
	}
	
	sort(vec.begin(), vec.end(), [&] (auto v, auto u) {
		if (v.ft.dat.ft != u.ft.dat.ft) return v.ft.dat.ft < u.ft.dat.ft;
		if (v.ft.dat.sd != u.ft.dat.sd) return v.ft.dat.sd < u.ft.dat.sd;
		
		return v.sd.sd < u.sd.sd;
	});
	
	for (int i = 0; i < (int)vec.size(); i++) {
		int j = i;
		
		while (j < (int)vec.size() && vec[i].ft.dat.ft == vec[j].ft.dat.ft && vec[i].ft.dat.sd == vec[j].ft.dat.sd) {
			j++;
		}
		
		event[vec[i].sd.sd].push_back(vec[i].sd.ft);
		
		i = j - 1;
	}
	
	for (int i = 0; i < n; i++) {
		for (auto u : event[i]) {
			insert(u, i);
		}
		
		printf("%d ", res);
	}
}
