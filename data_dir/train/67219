//#pragma GCC optimize("Ofast,no-stack-protector")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
//#pragma GCC target("avx,tune=native")
// Anand Jaisingh

#include<bits/stdc++.h>

using namespace std;

typedef complex<double> base;
typedef long double ld;
typedef long long ll;

#define pb push_back
#define pii pair<int,int>
#define pll pair< ll , ll >
#define vi vector<int>
#define vvi vector< vi >

const int maxn=(int)(4e5+5);
const ll mod=(ll)(1e9+7);
pii a[maxn];
int val[maxn];
vector<int> al[maxn];
ll res[maxn];
pll bit1[maxn],bit4[maxn];

int get(vector<int>& v,int now)
{
    int low=0,high=(int)v.size();

    while(low<high)
    {
        int mid=(low+high+1)>>1;

        if(v[mid]<=now)
        {
            low=mid;
        }
        else
        {
            high=mid-1;
        }
    }

    return low+1;
}

pll add(pll x,pll y)
{
    return {x.first+y.first,x.second+y.second};
}

void update1(int idx,ll val1,ll val2)
{
    // prefix update

    while(idx<maxn)
    {
        bit1[idx]=add(bit1[idx],{val1,val2});

        idx+=idx&-idx;
    }
}

void update4(int idx,ll val1,ll val2)
{
    // suffix update

    while(idx>0)
    {
        bit4[idx]=add(bit4[idx],{val1,val2});

        idx-=idx&-idx;
    }
}

pll query1(int idx)
{
    pll ret={0,0};

   while(idx>0)
   {
        ret=add(ret,bit1[idx]);

        idx-=idx&-idx;
   }

   return ret;
}

pll query4(int idx)
{
    pll ret={0,0};

    while(idx<maxn)
    {
        ret=add(ret,bit4[idx]);

        idx+=idx&-idx;
    }

    return ret;
}

int main()
{
    ios_base::sync_with_stdio(0);cin.tie(0);

    int n,m;cin>>n>>m;

    vector<int> v;

    for(int i=0;i<n;i++)
    {
        cin>>a[i].first>>a[i].second;

        val[i]=a[i].first-a[i].second;

        v.pb(val[i]);
    }

    for(int i=0;i<m;i++)
    {
        int u1,v1;

        cin>>u1>>v1;

        u1--;v1--;

        al[u1].pb(v1);al[v1].pb(u1);
    }

    sort(v.begin(),v.end());

    v.erase(unique(v.begin(),v.end()),v.end());

    for(int i=0;i<n;i++)
    {
        val[i]=get(v,val[i]);
    }

    for(int i=0;i<maxn;i++)
    {
        bit1[i]={0,0};

    //    bit2[i]={0,0};

     //   bit3[i]={0,0};

        bit4[i]={0,0};
    }

    for(int i=0;i<n;i++)
    {
        update1(val[i],1,a[i].first);

   //     update2(val[i],1,a[i].first);

     //   update3(val[i],1,a[i].second);

        update4(val[i],1,a[i].second);

        al[i].pb(i);
    }

    for(int i=0;i<n;i++)
    {
        for(int x:al[i])
        {
            update1(val[x],-1,-a[x].first);

         //   update2(val[x],-1,-a[x].first);

          //  update3(val[x],-1,-a[x].second);

            update4(val[x],-1,-a[x].second);
        }

        pll now=query4(val[i]);

        res[i]+=(now.first*1ll*a[i].first)+now.second;

        pll now2=query1(val[i]-1);

        res[i]+=(now2.first*1ll*a[i].second)+now2.second;

        for(int x:al[i])
        {
            update1(val[x],1,a[x].first);

            //   update2(val[x],-1,-a[x].first);

            //  update3(val[x],-1,-a[x].second);

            update4(val[x],1,a[x].second);
        }
    }

    for(int i=0;i<n;i++)
    {
        cout<<(res[i])<<" ";
    }

    cout<<endl;return 0;
}
