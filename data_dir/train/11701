#include <bits/stdc++.h>
#define lsb(x) (x & (-x))
#define ll long long
#define ull unsigned long long
// 220
// 44

using namespace std;

const int MAXN = (int) 5e5;
const int BUCK = 720;

int arr[MAXN + 1];
int fr[MAXN + 1];

struct Query {
    int l, r;
    int pos;
    bool operator <(const Query &other) const {
        if(l / BUCK == other.l / BUCK)
            return r < other.r;
        return l / BUCK < other.l / BUCK;
    }
}qry[MAXN + 1];

int pos[MAXN + 1];
bool vis[MAXN + 1];
queue <int> Q;

int sol[MAXN + 1];

inline int add(int x) {
    if(fr[x] == 0) {
        if(vis[x] == 0) {
            Q.push(x);
            //vis[x] = 1;
        }
    }
    fr[x]++;
}

inline void del(int x) {
    if(fr[x] == 2) {
        if(vis[x] == 0) {
            Q.push(x);
            //vis[x] = 1;
        }
    }
    fr[x]--;
}

int main() {
    //ifstream cin("A.in");
    //ofstream cout("A.out");
    int i, n, q;
    //ios::sync_with_stdio(false);
    //cin >> n;
    scanf("%d" ,&n);
    for(i = 1; i <= n; i++) {
        //cin >> arr[i];
        scanf("%d" ,&arr[i]);
    }
    //cin >> q;
    scanf("%d" ,&q);
    for(i = 1; i <= q; i++) {
        //cin >> qry[i].l >> qry[i].r;
        scanf("%d%d" ,&qry[i].l,&qry[i].r);
        qry[i].pos = i;
    }
    sort(qry + 1, qry + q + 1);
    i = 1;
    while(i <= q) {
        int j = i;
        int b = (qry[i].l / BUCK) * BUCK;
        if(b == 0)
            b++;
        int e = b;
        while(!Q.empty()) {
            Q.pop();
        }
        memset(fr, 0, sizeof(fr));
        memset(vis, 0, sizeof(vis));
        while(j <= q && qry[i].l / BUCK == qry[j].l / BUCK) {
            if(b < qry[j].l) {
                while(b < qry[j].l && b < e) {
                    del(arr[b]);
                    b++;
                }
                if(e <= qry[j].l) {
                    b = e = qry[j].l;
                }
            }
            else if(b > qry[j].l) {
                b--;
                while(b >= qry[j].l) {
                    add(arr[b]);
                    b--;
                }
                b++;
            }
            while(e <= qry[j].r) {
                add(arr[e]);
                e++;
            }

            /*printf("%d %d\n" ,qry[j].l,qry[j].r);
            for(auto it : mst) {
                printf("%d " ,it);
            }
            printf("\n");*/
            while(!Q.empty() && fr[Q.front()] != 1) {
                Q.pop();
            }
            if(!Q.empty())
                sol[qry[j].pos] = Q.front();
            j++;
        }
        //printf("\n");
        i = j;
    }
    for(i = 1; i <= q; i++) {
            printf("%d\n" ,sol[i]);
        //cout << sol[i] << "\n";
    }
    //cin.close();
   // cout.close();
    return 0;
}
