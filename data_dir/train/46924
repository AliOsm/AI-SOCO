    #include <bits/stdc++.h>

using namespace std;

const int N = 3e6 + 9, MOD = 1e9 + 7;

#define int long long
#define double long double

using vi = vector <int>;
using vb = vector <bool>;
using vp = vector <pair <int, int>>;
mt19937 Flash_new_51(525252);

int t[N];
bool used[N];
int a2[N];

void build (int v, int l, int r) {
    if (r - l == 1) {
        t[v] = a2[l];
    }
    else {
        int m = (r + l) / 2;
        build(v * 2 + 1, l, m);
        build(v * 2 + 2, m, r);
        t[v] = min(t[v * 2 + 1], t[v * 2 + 2]);
    }
}

void update(int v, int l, int r, int pos, int x) {
    if (r - l == 1) {
        t[v] = x;
    }
    else {
        int m = (r + l) / 2;
        if (pos >= m) {
            update(v * 2 + 2, m, r, pos, x);
        }
        else update(v * 2 + 1, l, m, pos, x);
        t[v] = min(t[v * 2 + 1], t[v * 2 + 2]);
    }
}
int ans (int v, int l, int r, int l1, int r1) {
    if (l >= r1 || l1 >= r) {
        return INT_MAX;
    }
    if (l1 <= l && r <= r1) {
        return t[v];
    }
    else {
        int m = (r + l) / 2;
        return min(ans(v * 2 + 1, l, m, l1, r1), ans(v * 2 + 2, m, r, l1, r1));
    }
}

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    int t;
    cin >> t;
    for (int j = 0; j < t; j++) {
        int n;
        cin >> n;
        map <int, set<int>> mp;
        vi a(n), b(n), a1(n), b1(n);
        for (int i = 0; i < n; i++) {
            cin >> a[i];
            a2[i] = a[i];
            mp[a[i]].insert(i);
        }
        build(0, 0, n);

        for (int i = 0; i < n; i++) {
            cin >> b[i];
        }
        a1 = a, b1 = b;
        sort(a1.begin(), a1.end());
        sort(b1.begin(), b1.end());
        if (a1 != b1) {
            cout << "NO\n";
            continue;
        }
        bool log = false;
        for (int i = 0; i < n; i++) {
                int k = *mp[b[i]].begin();
                mp[b[i]].erase(k);
                int lol = ans(0, 0, n, 0, k + 1);
                if (lol < b[i]) {
                    cout << "NO\n";
                    log = true;
                    break;
                }
                else {
                    update(0, 0, n, k, INT_MAX);
                }
        }
        if (!log) {
            cout << "YES\n";
        }

    }

}
