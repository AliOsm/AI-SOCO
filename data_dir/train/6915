#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>
#include <chrono>

using namespace std;
using ll = long long;
using ull = unsigned long long;
const int oo = numeric_limits<int>::max() / 2;
mt19937 rnd(std::chrono::steady_clock::now().time_since_epoch().count());

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  auto isSpecial = [](int x, const auto& s) {
    int it = 0;
    for(size_t i = 0; i < s.size(); ++i) {
      int needle = s[i] + x;
      while(it < s.size() && s[it] < needle) {
        ++it;
      }
      if (it == s.size()) {
        break;
      }
      if (s[it] == needle && it - i > 1) {
        return true;
      }
    }
    return false;
  };

  auto solve = [&]() {
    int n;
    cin >> n;
    std::vector<int> a;
    a.resize(n);
    for(int i = 0; i < n; ++i) cin >> a[i];

    std::vector<int> s;
    s.resize(n + 1);
    s[0] = 0;
    for(int i = 1; i <= n; ++i) s[i] = s[i - 1] + a[i - 1];

    int ret = 0;
    for(int i = 0; i < n; ++i) {
      if (isSpecial(a[i], s)) {
        ++ret;
      }
    }
    cout << ret << endl;
  };

  int T;
  cin >> T;
  for(int i = 0; i < T; ++i) {
    solve();
  }
  
  return 0;
}
