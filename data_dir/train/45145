#include<bits/stdc++.h>
using namespace std;

#define ll long long 
#define pb push_back
#define ff first
#define ss second
#define pii pair<ll,ll>
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0);

const ll nax = 405;
bool g[nax][nax];

ll n;
ll work()
{
    ll ans1 = -1;
    ll ans2 = -1;
    
    map< ll ,ll > mpp;
    bool vis[n+1];
    ll dis[n+1];
    memset(vis,0,sizeof(vis));
    memset(dis,0,sizeof(dis));
    
    ll x1 = -1;
    ll y1 = -1;
    
    queue< ll > q;
    q.push(1);
    vis[1] = 1;
    
    while( !q.empty() )
    {
        ll p = q.front();
        q.pop();
        if( p == n )
        {
            x1 = dis[p];
            break;
        }
        mpp[p] = dis[p];
        for( ll i=2 ; i<= n ; i++ )
        {
            if( g[p][i] && !vis[i] )
            {
                dis[i] = dis[p]+1;
                vis[i] = 1;
                q.push(i);
            }
        }
    }
    while(!q.empty()) q.pop();
    memset(vis,0,sizeof(vis));
    memset(dis,0,sizeof(dis));
    
    q.push(1);
    vis[1] = 1;
    while( !q.empty() )
    {
        ll p = q.front();
        q.pop();
        if( p == n )
        {
            y1 = dis[p];
            break;
        }
        
        for( ll i=2 ; i<= n ; i++ )
        {
            if( !g[p][i] && !vis[i]  )
            {
                if( mpp.find(i) != mpp.end() && mpp[i] == dis[p]+1 ) continue;
                dis[i] = dis[p]+1;
                vis[i] = 1;
                q.push(i);
            }
        }
    }
    if( x1 == -1 || y1 == -1 ) return -1;
    ans1 = max( x1 , y1 );
    
    memset(vis,0,sizeof(vis));
    memset(dis,0,sizeof(dis));
    
    x1 = -1;
    y1 = -1;
    mpp.clear();
    while(!q.empty()) q.pop();
    q.push(1);
    vis[1] = 1;
    
    while( !q.empty() )
    {
        ll p = q.front();
        q.pop();
        if( p == n )
        {
            x1 = dis[p];
            break;
        }
        mpp[p] = dis[p];
        for( ll i=2 ; i<= n ; i++ )
        {
            if( !g[p][i] && !vis[i] )
            {
                dis[i] = dis[p]+1;
                vis[i] = 1;
                q.push(i);
            }
        }
    }
    while(!q.empty()) q.pop();
    memset(vis,0,sizeof(vis));
    memset(dis,0,sizeof(dis));
    
    q.push(1);
    vis[1] = 1;
    while( !q.empty() )
    {
        ll p = q.front();
        q.pop();
        if( p == n )
        {
            y1 = dis[p];
            break;
        }
        
        for( ll i=2 ; i<= n ; i++ )
        {
            if( g[p][i] && !vis[i]  )
            {
                if( mpp.find(i) != mpp.end() && mpp[i] == dis[p]+1 ) continue;
                dis[i] = dis[p]+1;
                vis[i] = 1;
                q.push(i);
            }
        }
    }
    ans2 = max( x1 , y1 );
    return min( ans1, ans2 );
}
int main()
{
    fast ;
    ll m;
    cin >> n >> m;
    
    memset( g ,0 , sizeof(g) );
    
    while( m-- )
    {
        ll u,v;
        cin>>u>>v;
        g[u][v] = g[v][u] = 1;
    }
    
    cout << work() << "\n";
}