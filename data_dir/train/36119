#include<bits/stdc++.h>

using namespace std;

typedef complex<long double> base;
typedef long double ld;
typedef long long ll;

#define pb push_back

const int maxn=(int)(1e5+5),N=40,bits=20;
int a[maxn],ans[maxn];
const ll mod=(ll)(1e9+7);
ld pi=2.0*acos(0.0);
vector<int> basis;
vector< pair<int,int> > al[maxn];

int mul(ll a,ll b)
{
	ll ret=(a*b);
	
	if(ret>=mod)
	{
		ret%=mod;
	}
	
	return (int)ret;
}

int add(ll a,ll b)
{
	ll ret=a+b;
	
	if(ret>=mod)
	{
		ret%=mod;
	}
	
	return (int)ret;
}

int sub(ll a,ll b)
{
	ll ret=a-b;
	
	if(ret<0)
	{
		ret+=mod;
	}
	
	return (int)ret;
}

int poww(int a,int b)
{
	int x=1,y=a;
	
	while(b>0)
	{
		if(b%2==1)
		{
			x=mul(x,y);
		}
		
		y=mul(y,y);b/=2;
	}
	
	return x;
}

void solve(vector< bitset<N> > a,int m,int num)
{
	int n=(int)a.size();
	
	for(int row=0,col=0;row<n && col<m;col++)
	{
		for(int i=row;i<n;i++)
		{
			if(a[i][col])
			{
				swap(a[i],a[row]);
				
				break;
			}
		}
		
		if(!a[row][col])
		{
			continue;
		}
		
		for(int i=0;i<n;i++)
		{
			if(i!=row && a[i][col])
			{
				a[i]^=a[row];
			}
		}
		
		row++;
	}
	
	for(int i=0;i<n;i++)
	{
		// check for inconsistency..
		
		bool all_zeros=true;
		
		for(int j=0;j<m;j++)
		{
			if(a[i][j])
			{
				all_zeros=false;break;
			}
		}
		
		if(all_zeros && a[i][m])
		{
			// no solutions, system inconsistent..
			
			basis.pb(num);
			
			return;
		}
	}
}

bool check2(vector< bitset<N> > a,int m,int num)
{
	int n=(int)a.size();
	
	for(int row=0,col=0;row<n && col<m;col++)
	{
		for(int i=row;i<n;i++)
		{
			if(a[i][col])
			{
				swap(a[i],a[row]);
				
				break;
			}
		}
		
		if(!a[row][col])
		{
			continue;
		}
		
		for(int i=0;i<n;i++)
		{
			if(i!=row && a[i][col])
			{
				a[i]^=a[row];
			}
		}
		
		row++;
	}
	
	for(int i=0;i<n;i++)
	{
		// check for inconsistency..
		
		bool all_zeros=true;
		
		for(int j=0;j<m;j++)
		{
			if(a[i][j])
			{
				all_zeros=false;break;
			}
		}
		
		if(all_zeros && a[i][m])
		{
			// no solutions, system inconsistent..
			
			return false;
		}
	}
	
	return true;
}

void add(int num)
{
	vector< bitset<N> > a;
	
	for(int j=0;j<bits;j++)
	{		
		bitset<N> eq;
			
		for(int i=0;i<(int)basis.size();i++)
		{
			if((basis[i]&(1<<j))!=0)
			{
				eq.set(i,1);
			}
		}
		
		if((num&(1<<j))!=0)
		{
			eq.set(basis.size(),1);
		}
		
		a.pb(eq);
	}
	
	solve(a,basis.size(),num);
}

bool check(int num)
{
	vector< bitset<N> > a;
	
	for(int j=0;j<bits;j++)
	{		
		bitset<N> eq;
			
		for(int i=0;i<(int)basis.size();i++)
		{
			if((basis[i]&(1<<j))!=0)
			{
				eq.set(i,1);
			}
		}
		
		if((num&(1<<j))!=0)
		{
			eq.set(basis.size(),1);
		}
		
		a.pb(eq);
	}
	
	return check2(a,basis.size(),num);
}

int main()
{	
	ios_base::sync_with_stdio(0);
	
	int n,q;cin>>n>>q;
	
	for(int i=0;i<n;i++)
	{
		cin>>a[i];
	}
	
	for(int i=0;i<q;i++)
	{
		int l,x;
		
		cin>>l>>x;
		
		l--;
		
		al[l].pb({i,x});
	}
	
	for(int i=0;i<n;i++)
	{
		add(a[i]);
		
		for(int j=0;j<(int)al[i].size();j++)
		{
			pair<int,int> p=al[i][j];
			
			if(check(p.second))
			{
				ans[p.first]=poww(2,(i+1)-basis.size());
			}
		}
		
		assert(basis.size()<=20);
	}
	
	for(int i=0;i<q;i++)
	{
		cout<<ans[i]<<endl;
	}
	
	return 0;
}



