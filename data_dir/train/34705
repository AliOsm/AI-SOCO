/*
ID: hamed_51
PROG: ?
LANG: C++
*/

#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#if (_win32 || __win32__)
#define lld "%i64d"
#else
#define lld "%lld"
#endif

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cerr << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define point complex<double>
#define X real()
#define Y imag()
#define EPS 1e-8

struct mat {
	int w[123];
};

int bel[10], val[10], sz, lim;
int table[123][123];
const int MOD = 12345;
mat unit, c;

void mul(mat &a, mat b) {
	FOR(i, 0, lim) c.w[i] = 0;
	FOR(i, 0, lim) FOR(j, 0, lim) {
		c.w[table[i][j]] += a.w[i]*b.w[j];
		c.w[table[i][j]] %= MOD;
	}
	a = c;
}

mat power(ll y) {
	if (y == 1) return unit;
	if (y%2 == 1) {
		mat tmp = power(y-1);
		mul(tmp, unit);
		return tmp;
	}
	mat res = power(y/2);
	mul(res, res);
	return res;
}

int main() {
	ll n;
	int c;
	vector<int> V[26];
	bool one[26];
	memset(one, 0, sizeof one);
	cin >> n >> c;
	FOR(i, 0, c) {
		string s;
		int m;
		cin >> s >> m;
		if (m == 1)
			one[s[0]-'A'] = true;
		else
			V[s[0]-'A'].pb(m);
	}
	if (n == 0) {
		cout << 1 << endl;
		return 0;
	}
	int totone = 0;
	FOR(i, 0, 26) if (one[i]) totone++;
	sz = 0;
	lim = 1;
	FOR(i, 0, 26) if (!one[i]) FOR(j, 0, Size(V[i])) {
		bel[sz] = i;
		val[sz] = V[i][j];
		lim *= V[i][j];
		sz++;
	}
	FOR(i, 0, lim) FOR(j, 0, lim) {
		int A = i;
		int B = j;
		int sum[10];
		FOR(k, 0, sz) {
			sum[k] = (A%val[k] + B%val[k]) % val[k];
			A /= val[k];
			B /= val[k];
		}
		int C = 0;
		for (int k = sz-1; k >= 0; k--) {
			C *= val[k];
			C += sum[k];
		}
		table[i][j] = C;
	}

	FOR(i, 0, lim) unit.w[i] = 0;
	unit.w[0] = totone;

	int co[10];
	co[0] = 1;
	FOR(i, 0, sz) co[i+1] = co[i]*val[i];

	FOR(i, 0, sz) {
		int ind = 0;
		FOR(j, 0, sz) if (bel[i] == bel[j]) ind += co[j];
		unit.w[ind] = 1;
	}

	mat res = power(n);
	set<int> univ;
	FOR(i, 0, sz) univ.insert(bel[i]);
	int ans = 0;
	FOR(mask, 0, lim) {
		int dec[10];
		int tmp = mask;
		FOR(i, 0, sz) dec[i] = tmp%val[i], tmp /= val[i];
		set<int> sub;
		FOR(i, 0, sz) if (dec[i] == 0) sub.insert(bel[i]);
		if (sub == univ) ans = (ans+res.w[mask])%MOD;
	}
	cout << ans << endl;
	return 0;
}

