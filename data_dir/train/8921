//Author - Rahil Malhotra
#include <bits/stdc++.h>
using namespace std;
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
#define int long long
#define double long double

int n;
vector<int>v[100005];
int lvl[100005];
int par[100005][22];
int vis[100005];
int dfs(int i,int p,int l)
{
    vis[i]=1;
    par[i][0]=p;
    lvl[i]=l;
    for(auto j:v[i])
        if(vis[j]==0)
            dfs(j,i,l+1);
}
void compute()
{
    for(int i=1;i<22;i++)
        for(int j=1;j<=n;j++)
            if(par[j][i-1])
                par[j][i]=par[par[j][i-1]][i-1];
}
int LCA(int a,int b)
{
    if(lvl[a]<lvl[b])
        swap(a,b);
    int diff=lvl[a]-lvl[b];
    for(int i=21;i>=0;i--)
        if((1<<i)&diff)
            a=par[a][i];
    if(a==b)
        return a;
    for(int i=21;i>=0;i--)
        if(par[a][i] && par[a][i]!=par[b][i])
            a=par[a][i],b=par[b][i];
    return par[a][0];
}
int32_t main()
{
    IOS;
    cin>>n;
    int edges[n-1][2];
    map<pair<int,int>,int>mp;
    int deg[n+2]={};
    for(int i=1;i<=n-1;i++)
    {
        cin>>edges[i][0]>>edges[i][1];
        mp[{edges[i][0],edges[i][1]}]=i;
        mp[{edges[i][1],edges[i][0]}]=i;
        v[edges[i][0]].push_back(edges[i][1]);
        v[edges[i][1]].push_back(edges[i][0]);
        deg[edges[i][1]]++;
        deg[edges[i][0]]++;
    }
    dfs(1,0,1);
    compute();
    int store[n+2]={};
    int ans[n+2]={};
    int query;
    cin>>query;
    while(query--)
    {
        int a,b;
        cin>>a>>b;
        int lca=LCA(a,b);
        if(lca==a)
        {
            store[a]--;
            store[b]++;
        }
        else if(lca==b)
        {
            store[b]--;
            store[a]++;
        }
        else
        {
            store[lca]-=2;
            store[a]++;
            store[b]++;
        }
    }
    queue<int>q;
    for(int i=2;i<=n;i++)
        if(deg[i]==1)
            q.push(i);
    while(q.size())
    {
        int a=q.front();
        q.pop();

        int parent=par[a][0];
        ans[mp[{parent,a}]]+=store[a];
        store[parent]+=store[a];

        deg[parent]--;
        if(parent!=1 && deg[parent]==1)
            q.push(parent);
    }
    for(int i=1;i<=n-1;i++)
        cout<<ans[i]<<" ";
}