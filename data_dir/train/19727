#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
#include<unordered_set>
#include<unordered_map>
using namespace std;

#define MAX 600002

int n;
int m;

vector<int> v;

vector<pair<int, int> > v1;
struct st {
    int c;
    int d;
    int k;
    st(int a, int b, int c_) {
        c = a;
        d = b;
        k = c_;
    }
};
vector<st> v2;

int gt(int a) {
    return lower_bound(v.begin(), v.end(), a) - v.begin();
}

vector<int> want[MAX];
vector<int> add[MAX];

int ap[MAX];
map<int, vector<pair<int, int> > > mp;
int main() {
    scanf("%d", &n);
    for (int i = 0;i < n;i++) {
        int a, b;
        scanf("%d%d", &a, &b);
        v1.push_back(make_pair(a, b));
        v.push_back(a);
        v.push_back(b);
    }
    cin >> m;
    for (int i = 0;i < m;i++) {
        int a, b, c;
        scanf("%d%d%d", &a, &b, &c);
        v.push_back(a);
        v.push_back(b);
        v2.push_back(st(a, b, c));
    }
    sort(v.begin(), v.end());
    v.erase(unique(v.begin(), v.end()), v.end());
    for (int i = 0;i < v1.size();i++) {
        int a = gt(v1[i].first);
        v1[i].second = gt(v1[i].second);
        want[a].push_back(i);
    }
    for (int i = 0;i < v2.size();i++) {
        v2[i].c = gt(v2[i].c);
        v2[i].d = gt(v2[i].d);
        add[v2[i].c].push_back(i);
    }
    memset(ap, -1, sizeof(ap));
    for (int i = 0;i < v.size();i++) {
        for (int j = 0;j < add[i].size();j++) {
            int ind = add[i][j];
            mp[v2[ind].d].push_back(make_pair(ind, v2[ind].k));
        }
        while (mp.size() && (*mp.begin()).first < i) {
            mp.erase(mp.begin());
        }
        for (int j = 0;j < want[i].size();j++) {
            int ind = want[i][j];
            int r = v1[ind].second;
            auto ite = mp.lower_bound(r);
            if (ite == mp.end()) {
                puts("NO");
                return 0;
            }
            while (ite != mp.end()) {
                bool d = false;
                while ((*ite).second.size()) {
                    if ((*ite).second.back().second == 0) {
                        (*ite).second.pop_back();
                    }
                    else {
                        ap[ind] = (*ite).second.back().first;
                        (*ite).second.back().second--;
                        d = true;
                        break;
                    }
                }
                if (d == false) {
                    int v = (*ite).first;
                    ite++;
                    mp.erase(v);
                }
                else {
                    break;
                }
            }
            if (ite == mp.end()) {
                puts("NO");
                return 0;
            }
        }
    }
    puts("YES");
    for (int i = 0;i < n;i++) {
        if (i) {
            printf(" ");
        }
        printf("%d", ap[i] + 1);
    }
    puts("");
    return 0;
}