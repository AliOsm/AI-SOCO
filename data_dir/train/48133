#include <bits/stdc++.h>

#define fore(i, l, r) for(int i = int(l); i < int(r); i++)
#define forn(i, n) fore(i, 0, n)

#define all(a) (a).begin(), (a).end()
#define sqr(a) ((a) * (a))
#define sz(a) int(a.size())
#define mp make_pair
#define pb push_back

#define x first
#define y second

using namespace std;

template<class A, class B> ostream& operator << (ostream &out, const pair<A, B> &p) {
	return out << "(" << p.first << ", " << p.second << ")";
}

template<class A> ostream& operator << (ostream &out, const vector<A> &v) {
	out << "[";
	forn(i, sz(v)) {
		if(i > 0)
			out << " ";
		out << v[i];
	}
	return out << "]";
}

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

inline int gett() {
	return clock() * 1000 / CLOCKS_PER_SEC;
}

const ld EPS = 1e-9;
const int INF = int(1e9);
const li INF64 = li(INF) * INF;
const ld PI = 3.1415926535897932384626433832795;

int n;
string s;

inline bool read() {
	if(!(cin >> n))
		return false;
	assert(cin >> s);
	return true;
}

const int N = 1111;
char pl[N][N];

int pos, id;
int maxd;

void calc(int d) {
	assert(s[id] == '[');
	maxd = max(maxd, d);
	
	pl[d][pos] = '+';
	pl[d][pos + 1] = '-';
	
	id++;
	pos++;
	
	int cnt = 0;
	while(s[id] != ']')
		calc(d + 1), cnt++;
	
	assert(s[id] == ']');
	if(cnt == 0)
		pos += 3;
	
	pl[d][pos - 1] = '-';
	pl[d][pos] = '+';
	
	id++;
	pos++;
}

inline void solve() {
	memset(pl, 0, sizeof pl);
	
	pos = 0, id = 0;
	maxd = 0;
	while(id < sz(s))
		calc(0);
	
	int maxx = 2 * (maxd + 1);
	forn(i, maxd + 1) forn(j, pos)
		pl[maxx - i][j] = pl[i][j];
		
	forn(j, pos) {
		int lf = INF, rg = -INF;
		forn(i, maxx + 1)
			if(pl[i][j] == '+')
				lf = min(lf, i), rg = max(rg, i);
				
		fore(i, lf + 1, rg)
			pl[i][j] = '|';
	}
	
	forn(i, maxx + 1) forn(j, pos)
		if(pl[i][j] == 0)
			pl[i][j] = ' ';

	forn(i, maxx + 1)
		puts(pl[i]);
}

int main(){
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	int t = gett();
#endif

	srand(time(NULL));
	cout << fixed << setprecision(10);

	while(read()) {
		solve();	
		
#ifdef _DEBUG
		cerr << "TIME = " << gett() - t << endl;
		t = gett();
#endif
	}
	return 0;
}
