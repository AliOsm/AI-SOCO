#include <bits/stdc++.h>
using namespace std;

struct edge {
	int from, to, dist;
};

int n, m, k, w;
vector<vector<vector<char> > > arr;
vector<edge> x;
vector<vector<int> > g;
vector<int> p;
vector<char> used;

int get_next(int a) {
	if(p[a] == a) {
		return a;
	}
	return p[a] = get_next(p[a]);
}

bool unite(int a, int b) {
	a = get_next(a),
		b = get_next(b);
	if(a == b) {
		return false;
	}
	if(rand() & 1) {
		swap(a, b);
	}
	p[a] = b;
	return true;
}

int get_dist(int a, int b) {
	int cur_ans = 0;
	for(int i = 0; i < n; ++i) {
		for(int j = 0; j < m; ++j) {
			if(arr[a][i][j] != arr[b][i][j]) {
				++cur_ans;
			}
		}
	}
	return cur_ans * w;
}

bool cmp(const edge &a, const edge &b) {
	return a.dist < b.dist;
}

void dfs(int v) {
	used[v] = true;
	for(int i = 0; i < g[v].size(); ++i) {
		int to = g[v][i];
		if(!used[to]) {
			printf("%d %d\n", to, v);
			dfs(to);
		}
	}
}

int main (int argc, char *argv[])
{
	//FILE *in = freopen("input.txt", "r", stdin);

	scanf("%d%d%d%d", &n, &m, &k, &w);
	++k;
	arr.resize(k);
	for(int i = 1; i < k; ++i) {
		arr[i].resize(n);
		for(int j = 0; j < n; ++j) {
			arr[i][j].resize(m);
			for(int q = 0; q < m; ++q) {
				scanf(" %c", &arr[i][j][q]);
			}	
		}
	}
	g.resize(k);
	for(int i = 1; i < k; ++i) {
		edge y;
		y.from = 0;
		y.to = i;
		y.dist = n * m;
		x.push_back(y);
	}
	for(int i = 1; i < k; ++i) {
		for(int j = i + 1; j < k; ++j) {
			int dist = get_dist(i, j);
			edge y;
			y.from = i;
			y.to = j;
			y.dist = dist;
			x.push_back(y);
		}
	}
	sort(x.begin(), x.end(), cmp);
	int ans = 0;
	p.resize(k);
	for(int i = 0; i < k; ++i) {
		p[i] = i;
	}
	for(int i = 0; i < x.size(); ++i) {
		int from = x[i].from,
			to = x[i].to,
			dist = x[i].dist;
		if(unite(from, to)) {
			ans += dist;
			g[from].push_back(to);
			g[to].push_back(from);
		}
	}
	printf("%d\n", ans);
	used.resize(k, false);
	dfs(0);

	return 0;
}

