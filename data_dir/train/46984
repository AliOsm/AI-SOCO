#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long long i64;
typedef pair<ll, ll> PII;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<pii> vpi;
typedef long double ld;


#define x first
#define y second
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define for1(i, n) for (int i = 1; i <= (int)(n); i++)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; i--)
#define clr(x) memset((x), 0, sizeof(x))
inline int nxt() {int x;scanf("%d", &x); return x;}

inline ll gcd(ll a, ll b) {
    while (b) {
        a %= b;
        swap(a, b);
    }
    return a;
}

const int mod = 1000 * 1000 * 1000 + 7;
inline ll pw(ll a, ll n) {
    ll ret = 1;
    while (n) {
        if (n & 1) ret = ret * a % mod;
        a = a * a % mod;
        n >>= 1;
    }
    return ret;
}

inline ll inv(ll a) {
    return pw(a, mod - 2);
}

PII operator - (const PII &l, const PII &r) {
    return PII(l.x - r.x, l.y - r.y);
}

PII operator + (const PII &l, const PII &r) {
    return PII(l.x + r.x, l.y + r.y);
}

PII rot(const PII &v) {
    return PII(v.y, -v.x);
}

ll dot(const PII &l, const PII &r) {
    return l.x * r.x + l.y * r.y;
}

ll cross(const PII &l, const PII &r) {
    return l.x * r.y - l.y * r.x;
}

int fact_pow (int n, int k) {
    int res = 0;
    while (n) {
        n /= k;
        res += n;
    }
    return res;
}

const int N = 500000;

void solve() {
    int n = nxt();
    vector<int> ans;
    for (int i = 1; i < N; ++i) {
        if (fact_pow(i, 5) == n) {
            ans.push_back(i);
        }
    }
    cout << ans.size() << "\n";
    if (!ans.empty()) {
        for (int x : ans) {
            cout << x << " ";
        }
        cout << "\n";
    }
}

int main() {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#else
    #define FILE "powersum"
//    freopen(FILE".in", "r", stdin);
//    freopen(FILE".out", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    solve();

#ifdef LOCAL
    cerr << "Time: " << clock() / (double)CLOCKS_PER_SEC << endl;
#endif

    return 0;
}
