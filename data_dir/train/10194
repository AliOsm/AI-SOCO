#include <bits/stdc++.h>
#define err(args...) {}
#ifdef DEBUG
#include "_debug.cpp"
#include "callable.hpp/callable.hpp"
#endif
#define endl '\n'
using namespace std;
using ll = long long;
const int N = 300'000;
struct edge { int u, v, w, id; };
struct graph {
    vector<vector<edge>> adj;
    int n;
    graph(int n) : n(n) {
        adj.resize(n + 1);
    }
    void add_edge(int u, int v, int w, int id) {
        adj[u].push_back({u, v, w, id});
    }
};
vector<int> sssp(graph& g, vector<ll>& edge_weights, int s) {
    vector<bool> vis(g.n + 1, false);
    vector<ll> d(g.n + 1, -1);
    vector<int> edge_to(g.n + 1, 0);
    d[s] = 0;
    priority_queue<pair<ll, int>> pq;
    pq.push({-d[s], s});
    while(not pq.empty()) {
        int u = pq.top().second; pq.pop();
        if(not vis[u]) {
            vis[u] = true;
            for(const auto& [u, v, w, id] : g.adj[u]) {
                if(not vis[v] and (d[v] == -1 or d[v] > d[u] + w)) {
                    d[v] = d[u] + w;
                    edge_to[v] = id;
                    pq.push({-d[v], v});
                } else if(d[v] == d[u] + w and w < edge_weights[edge_to[v]]) {
                    edge_to[v] = id;
                }
            }
        }
    }
    return edge_to;
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n, m;
    cin >> n >> m;
    graph g(n);
    vector<ll> edge_weights(m + 1);
    for(int i = 1; i <= m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        g.add_edge(u, v, w, i);
        g.add_edge(v, u, w, i);
        edge_weights[i] = w;
    }
    int s;
    cin >> s;
    vector<int> sssp_tree = sssp(g, edge_weights, s);
    ll ans = 0;
    for(int i = 1; i <= n; i++) {
        if(i != s) {
            ans += edge_weights[sssp_tree[i]];
        }
    }
    cout << ans << endl;
    for(int i = 1; i <= n; i++) {
        if(i != s) {
            cout << sssp_tree[i] << " ";
        }
    }
    cout << endl;
    return 0;
}
