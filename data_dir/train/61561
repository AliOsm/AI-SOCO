#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

int n, q;
int a[200000];
pair<int, int> t[800000];
pair<int, int> undef = {-1, -1};

pair<int, int> merge(pair<int, int> a1, pair<int, int> b1) {
    if (a1 == undef) return b1;
    if (b1 == undef) return a1;
    if (a1.second != -1) return a1;
    else if (b1.second != -1) return b1;
    else {
        if (a[a1.first] != a[b1.first]) {
            return {a1.first, b1.first};
        } else {
            return a1;
        }
    }
}

void build(int v, int tl, int tr) {
    if (tl == tr) {
        t[v] = {tl, -1};
    } else {
        int tm = (tl + tr) >> 1;
        build(v << 1, tl, tm);
        build((v << 1) + 1, tm + 1, tr);
        t[v] = merge(t[v << 1], t[(v << 1) + 1]);
    }
}

pair<int, int> query(int v, int tl, int tr, int ql, int qr) {
    if (ql > qr) return {-1, -1};
    if (tl == ql && tr == qr) return t[v];
    else {
        int tm = (tl + tr) >> 1;
        return merge(query(v << 1, tl, tm, ql, min(qr, tm)), query((v << 1) + 1, tm + 1, tr, max(ql, tm + 1), qr));
    }
}

int main() {
	ios_base::sync_with_stdio(0);
	cin >> n >> q;
	for (int i = 0; i < n; i++) {
	    cin >> a[i];
	}
	build(1, 0, n - 1);
	
	for (int i = 0; i < q; i++) {
	    int l, r, x;
	    cin >> l >> r >> x;
	    l--;
	    r--;
	    pair<int, int> ans = query(1, 0, n - 1, l, r);
	    if (a[ans.first] != x) {
	        cout << ans.first + 1 << "\n";
	    } else if (ans.second != -1 && a[ans.second] != x) {
	        cout << ans.second + 1 << "\n";
	    } else {
	        cout << "-1\n";
	    }
	}
}