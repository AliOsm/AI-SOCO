
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j123 = n; (i) < j123; (i) ++)
#define rep1(i, n) for (int (i) = 1, j123 = n; (i) <= j123; (i) ++)
#define db(x) {cout << #x << " = " << (x) << endl;}
#define dba(a, x, y) {cout << #a << " :";for(int i123=(x);i123<=(y);i123++) cout<<setw(4)<<(a)[i123];cout<<endl;}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define sz(x) int(x.size())
#define endl '\n'
typedef long long ll;
typedef long double ld;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const ld pi = acos(-1);
// const int MOD = ;

map<string,int> nameIndex;
int N, M;
int cant[100][100];
int size[100];
string name[100];
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(15); cout << fixed; cout.tie(0);
  cin >> N >> M;
  rep(i,N) cin >> name[i], nameIndex[name[i]] = i;
  rep(i,M)
  {
    string s, t;
    cin >> s >> t;
    int a = nameIndex[s];
    int b = nameIndex[t];
    cant[a][b]=1;
    cant[b][a]=1;
  }
  vector<int> v;
  int mxsize = 0;
  rep(mask,1<<N)
  {
    int size = __builtin_popcount(mask);
    if (size <= mxsize) continue;
    v.clear();
    rep(i,N)
    {
      if ((mask>>i)&1)
      {
        v.pb(i);
      }
    }
    int good = 1;
    rep(i,sz(v))
    {
      rep(j,sz(v)) if (i<j)
      {
        if (cant[v[i]][v[j]])
        {
          good = 0;
          break;
        }
      }
    }
    if (good)
    {
      mxsize = size;
    }
  }
  rep(mask,1<<N)
  {
    int size = __builtin_popcount(mask);
    if (size == mxsize)
    {
      v.clear();
      rep(i,N)
      {
        if ((mask>>i)&1)
        {
          v.pb(i);
        }
      }
      int good = 1;
      rep(i,sz(v))
      {
        rep(j,sz(v)) if (i<j)
        {
          if (cant[v[i]][v[j]])
          {
            good = 0;
            break;
          }
        }
      }
      if (good)
      {
        cout << size << endl;
        vector<string> vv;
        rep(i,sz(v))
        vv.pb(name[v[i]]);
        sort(vv.begin(), vv.end());
        rep(i,sz(vv))
        cout << vv[i] << endl;
        return 0;
      }
    }
  }
  assert(false);
}
