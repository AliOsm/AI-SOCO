#include<bits/stdc++.h>

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define all(c) (c).begin(),(c).end()
#define mp make_pair
#define pb push_back
#define each(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
const int inf = (int)1e9;
const double INF = 1e12, EPS = 1e-9;

const int MX = 100000;
const int SZ = 1024;

int n, a[MX];
unordered_map<int, int> cnt[MX / SZ + 1];
deque<int> vs[MX / SZ + 1];

int main(){
	
	scanf("%d", &n);
	rep(i, n){
		scanf("%d", a + i);
		vs[i / SZ].pb(a[i]);
		cnt[i / SZ][a[i]]++;
	}
	int q, lastans = 0;
	scanf("%d", &q);
	while(q--){
		
		int t, l, r; scanf("%d%d%d", &t, &l, &r);
		
		l = (l + lastans - 1) % n + 1;
		r = (r + lastans - 1) % n + 1;
		if(l > r) swap(l, r);
		l--;
		
		if(t == 1){
			if(l / SZ == (r - 1) / SZ){
				deque<int> &v = vs[l / SZ];
				r = (r - 1) % SZ;
				l %= SZ;
				
				v.insert(v.begin() + l, v[r]);
				v.erase(v.begin() + r + 1);
				
				//rep(i, n) cerr<<vs[i / SZ][i % SZ]<<(i==n-1?"\n":" ");
				continue;
			}
			int x = vs[(r - 1) / SZ][(r - 1) % SZ];
			vs[(r - 1) / SZ].erase(vs[(r - 1) / SZ].begin() + (r - 1) % SZ);
			r = (r - 1) / SZ;
			if(--cnt[r][x] == 0) cnt[r].erase(x);
			
			cnt[l / SZ][x]++;
			vs[l / SZ].insert(vs[l / SZ].begin() + l % SZ, x);
			x = *(vs[l / SZ].end() - 1);
			vs[l / SZ].pop_back();
			if(--cnt[l / SZ][x] == 0) cnt[l / SZ].erase(x);
			
			for(int p = l / SZ + 1; p <= r; p++){
				vs[p].push_front(x);
				cnt[p][x]++;
				if(p == r) break;
				x = *(vs[p].end() - 1);
				vs[p].pop_back();
				if(--cnt[p][x] == 0) cnt[p].erase(x);
			}
		}
		else{
			int x, ans = 0; scanf("%d", &x);
			x = (x + lastans - 1) % n + 1;
			
			while(l < r && l % SZ) ans += vs[l / SZ][l % SZ] == x, l++;
			while(l < r && r % SZ) r--, ans += vs[r / SZ][r % SZ] == x;
			l /= SZ; r /= SZ;
			for(; l < r; l++) if(cnt[l].count(x)) ans += cnt[l][x];
			
			printf("%d\n", lastans = ans);
		}
	}
	return 0;
}
