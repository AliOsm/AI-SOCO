#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <set>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

long long f[66][66][2];

long long F(long long R, int k) {
    long long RR = R;
    memset(f, 0, sizeof(f));
    long long c[65];
    for (int i = 0; i < 65; i++) {
        c[i] = R % 2;
        R /= 2;
    }
    reverse(c, c + 65);
    f[0][0][1] = 1LL;
    for (int len = 0; len < 65; len++) {
        int nowC = c[len];
        for (int k = 0; k <= len; k++) {
            if (nowC == 0) {
                f[len + 1][k][1] += f[len][k][1];
                f[len+1][k][0] += f[len][k][0];
                f[len+1][k+1][0] += f[len][k][0];

            }
            else {
                f[len + 1][k+1][1] += f[len][k][1];
                f[len+1][k+1][0] += f[len][k][0];
                f[len+1][k][0] += f[len][k][1];
                f[len+1][k][0] += f[len][k][0];
            }
        }
    }
    return f[65][k][1] + f[65][k][0];
}

long long ff(long long n, int k) {
    long long l = n + 1;
    long long r = n * 2;
    long long FF = F(r, k) - F(l - 1, k);
    return FF;
}

int main()
{
    ios_base::sync_with_stdio(0);
    long long m;
    int k;
    cin >> m >> k;
    long long l = 1, r = (long long)(1e18) + 1;
    while (r - l > 1) {
        long long mid = (l + r) >> 1;
        if (ff(mid, k) <= m)
            l = mid;
        else
            r = mid;
    }
    //cout << (int)ff(l, k) << endl;
    cout << l << '\n';
}
