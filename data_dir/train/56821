#include<bits/stdc++.h>
using namespace std;
int better(int x, int y) {
	if (x == -1)
		return y;
	if (y == -1)
		return x;
	return min(x, y);
}
int mem[35][35][55];
bool vis[35][35][55];
int solve(int x, int y, int k) {
	if (k == 0)
		return 0;
	if (x * y == k)
		return 0;
	if (x * y < k)
		return -1;
	if (x > y)
		swap(x, y);

	if (vis[x][y][k])
		return mem[x][y][k];
	vis[x][y][k] = true;

	int ans = -1;

	// cut horizontal
	for (int L = 1; L < x; L++) {
		int R = x - L;
		if (R < L)
			break;
		for (int dL = 0; dL <= k; dL++) {
			int tmp1 = solve(L, y, dL);
			int tmp2 = solve(R, y, k - dL);
			if (tmp1 == -1 || tmp2 == -1)
				continue;
			ans = better(ans, tmp1 + tmp2 + y * y);
		}
	}

	// cur vertical
	for (int L = 1; L < y; L++) {
		int R = y - L;
		if (R < L)
			break;
		for (int dL = 0; dL <= k; dL++) {
			int tmp1 = solve(x, L, dL);
			int tmp2 = solve(x, R, k - dL);
			if (tmp1 == -1 || tmp2 == -1)
				continue;
			ans = better(ans, tmp1 + tmp2 + x * x);
		}
	}

	// memorize
	return mem[x][y][k] = ans;
}
int main() {
	ios::sync_with_stdio(false);

	int t; scanf("%d", &t);
	while (t--) {
		int x, y, k;
		scanf("%d%d%d", &x, &y, &k);
		printf("%d\n", solve(x, y, k));
	}

	return 0;
}
