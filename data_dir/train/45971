#include<bits/stdc++.h>
using namespace std;
#define ll long long  int
#define pb push_back
#define rep(i,n) for(int i=0;i<n;i++)
#define mod 1000000007
#define f first
#define s second
pair<int,int>tree[2000011];
int a[1000011];
void build(int node,int l,int r){
	if(l==r){
		tree[node].f=a[l];
		tree[node].s=0;
		return;
	}
	int mid=(l+r)/2;
	build(2*node,l,mid);
	build(2*node+1,mid+1,r);
	tree[node].s=!(tree[2*node].s|tree[2*node+1].s);
	if(tree[node].s){
		tree[node].f=(tree[2*node].f|tree[2*node+1].f);
	}
	else{
		tree[node].f=(tree[2*node].f^tree[2*node+1].f);
	}
}
void update(int node,int l,int r,int ind){
	if(l==r){
		tree[node].f=a[l];
		return;
	}
	int mid=(l+r)/2;
	if(ind<=mid){
		update(2*node,l,mid,ind);
	}
	else{
		update(2*node+1,mid+1,r,ind);
	}
	if(tree[node].s){
		tree[node].f=(tree[2*node].f|tree[2*node+1].f);
	}
	else{
		tree[node].f=(tree[2*node].f^tree[2*node+1].f);
	}
}
int main(){
	int n,m;
	cin>>n>>m;
	n=(1LL<<n);
	rep(i,n)
		cin>>a[i+1];
	build(1,1,n);
	int p,q;
	while(m--){
		cin>>p>>q;
		a[p]=q;
		update(1,1,n,p);
		cout<<tree[1].f<<"\n";
	}
}
