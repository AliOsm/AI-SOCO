/* ****GT_18**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define	endl		'\n'
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        998244353
#define rep(i,a,b)	for(int i=a;i<b;i++)
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
using namespace std;

#define N  100005

ll get_sq(ll x)
{
	ll a=sqrtl(x);
	while(a*a<=x)
		a++;
	while(a*a>x)
		a--;
	if(a*a==x)
		return a;
	return 0;
}


ll get_cubic(ll x)
{
	ll a=pow(x,1.0/3);
	while(a*a*a<=x)
		a++;
	while(a*a*a>x)
		a--;
	if(a*a*a==x)
		return a;
	return 0;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		ll n;
		cin>>n;
		map<ll,ll> d;
		rep(i,0,n)
		{
			ll x;
			cin>>x;
			d[x]+=1;
		}
		map<ll,ll> deg;
		ll ans=1;
		for(auto it:d)
		{
			ll x,cnt;
			x=it.F;
			cnt=it.S;
			ll r=get_sq(x);
			if(r)
			{
				ll t=get_sq(r);
				if(t)
					deg[t]+=4*cnt;
				else
					deg[r]+=2*cnt;
			}
			else if((r=get_cubic(x)))
				deg[r]+=3*cnt;
			else
			{
				ll g=1;
				for(auto j:d)
				{
					g=__gcd(x,j.F);
					if(g!=x&&g!=1)
						break;
				}
				if(g!=x&&g!=1)
				{
					ll p=g;
					ll q=x/g;
					deg[p]+=cnt;
					deg[q]+=cnt;
				}
				else
				{
					ans*=cnt+1;
					ans%=hell;
					ans*=cnt+1;
					ans%=hell;
				}
			}
		}
		for(auto i:deg)
		{
			ans*=(i.S+1);
			ans%=hell;
		}
		cout<<ans;
	}
	return 0;
}