#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
 
using namespace std;
using namespace __gnu_pbds;
 
#define debug(s) cerr << #s << " = " << s << '\n'
#define all(v) (v).begin(), (v).end()
#define mem(a,val) memset(a, val, sizeof a)
 
#define maxn 200010
#define INF 1e15
#define eps 1e-9
#define pi acos(-1.0)
#define ff first
#define ss second
#define endl '\n'
typedef long long ll;
 
//typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;

int parent[maxn], sz[maxn];

void make_set(int v) {
  parent[v] = v;
  sz[v] = 1;
}

int find_set(int v) {
  if (v == parent[v]) return v;
  return find_set(parent[v]);
}

void union_sets(int a, int b) {
  a = find_set(a);
  b = find_set(b);
  if (a != b) {
    if (sz[a] < sz[b]) swap(a, b);
    parent[b] = a;
    sz[a] += sz[b];
  }
}

int n;
string str[maxn];
bool vis[maxn];
set<int> s[40];

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cin >> n;
  for (int i = 1; i <= n; ++i) make_set(i);
  for (int i = 1; i <= n; ++i) cin >> str[i];
  for (int i = 1; i <= n; ++i) {
    for (int j = 0; j < (int)str[i].size(); ++j) {
      s[str[i][j] - 'a'].insert(i);
    }
  }
  for (int i = 0; i < 26; ++i) {
    int prev = -1;
    for (auto p: s[i]) {
      if (prev == -1) prev = p;
      else {
        union_sets(prev, p);
        prev = p;
      }
    }
  }
  int cnt = 0;
  for (int i = 1; i <= n; ++i) {
    int par = find_set(i);
    if (!vis[par]) {
      vis[par] = 1;
      ++cnt;
    }
  }
  cout << cnt << endl;
}