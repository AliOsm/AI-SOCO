#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int N = 3e5;
int n, m, low[N], idx[N], dp[N], vis[N], dfs, comp, vs;
vector<vector<int> > g;
vector<int> st;
char s[N];
bool in[N];

void DFS(int v, int p) {
	low[v] = idx[v] = ++dfs;
	in[v] = true;
	st.push_back(v);
	for (size_t i = 0; i < g[v].size(); ++i) {
		int u = g[v][i];
		if (idx[u] == 0) {
			DFS(u, v);
			low[v] = min(low[v], low[u]);
		} else if (in[u])
			low[v] = min(low[v], low[u]);
	}
	if (low[v] == idx[v]) {
		++comp;
		int n;
		do {
			n = st.back();
			st.pop_back();
			in[n] = false;
		} while (n != v);
	}
}

int calc(int v, char c) {
	int &res = dp[v];
	if (vis[v] == vs)
		return res;
	vis[v] = vs;
	res = 0;
	for (size_t i = 0; i < g[v].size(); ++i)
		res = max(res, calc(g[v][i], c));
	if (s[v] == c)
		++res;
	return res;
}

int main(int argc, char **argv) {
	scanf("%d%d%s", &n, &m, s);
	g.resize(n);
	bool loop = false;
	while (m-- != 0) {
		int u, v;
		scanf("%d%d", &u, &v);
		g[u - 1].push_back(v - 1);
		if (u == v)
			loop = true;
	}
	if (loop) {
		puts("-1");
		return 0;
	}
	for (int i = 0; i < n; ++i)
		if (idx[i] == 0)
			DFS(i, -1);
	if (comp != n) {
		puts("-1");
		return 0;
	}
	int res = 0;
	for (char c = 'a'; c <= 'z'; ++c) {
		++vs;
		for (int i = 0; i < n; ++i)
			res = max(res, calc(i, c));
	}
	printf("%d\n", res);
	return 0;
}
