#pragma GCC optimize ("O3")
#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define fs first
#define se second
#define pi 2*acos(0)
#define PI 3.14159265358979323846264338

typedef long long ll;
typedef unsigned long long ull;
typedef pair < int , int > pii;
typedef pair < ll , ll > pll;

const int N = 100010;
const int MX = 123456;
const int mod = (int)1e9 + 7;
const int base = 1023456789;
const ull BS1 = 10000019ULL;
const int inf = (1 << 29);

template < class T > inline void fastScan(T &x) {
    register char c = getchar();
    int neg = 0; x = 0;
    for(   ; (c < 48 || c > 57) && (c != '-'); c = getchar());
    if(c == '-') { neg = 1; c = getchar(); }
    for(   ; c > 47 && c < 58; c = getchar()){
        x = (x << 1) + (x << 3) + c - 48;
    }
    if(neg) x = -x;
}

// OrderedSet
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// template < typename T > using ordered_set = tree < T, null_type, greater < T >, rb_tree_tag, tree_order_statistics_node_update >;

ll ans;
ll dp[N * 3];
ll inp[N * 3];

vector < pii > g[N * 3];

void go(int u, int par){
  dp[u] = inp[u];
  for(int i = 0; i < g[u].size(); i++){
    int v = g[u][i].fs;
    if(v != par){
      go(v, u);
      dp[u] = max(dp[v] + inp[u] - g[u][i].se, dp[u]);
    }
  }
  ans = max(ans, dp[u]);
  vector < ll > tmp;
  for(int i = 0; i < g[u].size(); i++){
    int v = g[u][i].fs;
    if(v != par){
      tmp.pb(dp[v] + inp[u] - g[u][i].se);
    }
  }
  if(tmp.size() > 1){
    sort(tmp.rbegin(), tmp.rend());
    ans = max(ans, tmp[0] + tmp[1] - inp[u]);
  }
}

int main(){
  int n; fastScan(n);
  for(int i = 1; i <= n; i++){
    fastScan(inp[i]);
    ans = max(ans, inp[i]);
  }
  for(int i = 2; i <= n; i++){
    int u, v, c;
    fastScan(u); fastScan(v); fastScan(c);
    g[u].pb(mp(v, c));
    g[v].pb(mp(u, c));
  }
  go(1, 0);
  printf("%lld\n", ans);
}
