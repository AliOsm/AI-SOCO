/**
 *    +--+--+--++--++--In the name of ALLAH--++--++--+--+--+
 *
 *    author:  skmonir
 *    created: 27-Dec-2018 20:59:53
**/

#include <bits/stdc++.h>

using namespace std;

#define endl                '\n'
#define TN                  typename
#define mod                 1000000007LL
#define len(x)              (int) x.size()
#define all(x)              x.begin(), x.end()
#define rall(x)             x.rbegin(), x.rend()
#define mem(x, y)           memset(x, y, sizeof x)
#define FOR(x, l, r)        for (int x = l; x <= r; ++x)
#define ROF(x, l, r)        for (int x = l; x >= r; --x)

template <TN T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <TN T> T gcd(T a, T b) {return !b ? a : gcd(b, a % b);}
template <TN T> inline void umin(T &a, T b) {a = a < b ? a : b;}
template <TN T> inline void umax(T &a, T b) {a = a > b ? a : b;}
template <TN T, TN W> inline void Int(T &x, W &y) {Int(x), Int(y);}
template <TN T, TN W, TN Q> void Int(T &x, W &y, Q &z) {Int(x, y), Int(z);}

const int N = 2e5 + 7;
const int inf = 1e9 + 7;

int a[N][2], p[N], used[N];

int solve() {
    int n; Int(n);
    FOR (i, 1, n) Int(a[i][0], a[i][1]);

    if (n == 3) {
        vector <int> v = {1, 2, 3};
        do {
            bool ok = a[v[0]][0] == v[1] | a[v[0]][1] == v[1];
            ok &= a[v[1]][0] == v[2] | a[v[1]][1] == v[2];
            ok &= a[v[2]][0] == v[0] | a[v[2]][1] == v[0];
            if (ok) {
                return printf("\n%d %d %d\n", v[0], v[1], v[2]);
            }
        } while (next_permutation(all(v)));
    }

    FOR (i, 1, n) {
        if (a[a[i][0]][0] == a[i][1] or a[a[i][0]][1] == a[i][1]) {
            p[i] = a[i][0];
        } else {
            p[i] = a[i][1];
        }
    }

    int u = 1;
    while (!used[u]) {
        printf("%d ", u);
        used[u] = 1;
        u = p[u];
    }
    printf("\n");

    return 0;
}

int main() {
    int tests = 1, CaseNo = 0; //Int(tests);
    while (tests--) {
        //printf("Case %d: ", ++CaseNo);
        solve();
    }
    return 0;
}