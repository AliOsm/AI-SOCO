#include <bits/stdc++.h>

using namespace std;
int n;
const int N=1e5+5;
struct node
{
    int sum;
    node *l,*r;
    node():l(this),r(this),sum(0){}
    node(node *l,node *r,int sum):l(l),r(r),sum(sum){}
};
int a[N],nxt[N],idx[N];
node *root[N];
node* update(node *cur,int idx,int v,int s=0,int e=n)
{
    if(idx>e||idx<s) return cur;
    if(s==e){
        //cout<<idx<<" "<<v<<endl;
        return new node(cur->l,cur->r,v);
    }
    int mid=(s+e)/2;
    node *l=update(cur->l,idx,v,s,mid);
    node *r=update(cur->r,idx,v,mid+1,e);
    return new node(l,r,l->sum+r->sum);
}
 int query(node *cur,int k,int s=0,int e=n)
 {
     if(s==e){
        //cout<<s<<endl;
        return s;
     }
     //cout<<k<<" "<<s<<" "<<e<<" "<<cur->sum<<" "<<cur->l->sum<<" "<<cur->r->sum<<endl;
     int mid=(s+e)/2;
     if(k>cur->l->sum)
        return query(cur->r,k-(cur->l->sum),mid+1,e);
    else return query(cur->l,k,s,mid);
 }
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    cin>>n;
    for(int i=0;i<n;i++)
        cin>>a[i];
    memset(idx,-1,sizeof idx);
    for(int i=n-1;i>=0;i--)
    {
        nxt[i]=idx[a[i]];
        idx[a[i]]=i;
    }
    root[n]=new node();
    for(int i=n-1;i>=0;i--)
    {
        root[i]=update(root[i+1],i,1);
        if(nxt[i]!=-1)
            root[i]=update(root[i],nxt[i],0);
    }
    for(int k=1;k<=n;k++)
    {
        int cur=0;
        int ans=0;
        while(cur<n)
        {
            cur=query(root[cur],k+1);
            //cout<<k<<" "<<cur<<endl;
            //cout<<"================"<<endl;
            ans++;
        }
        cout<<ans<<" ";
    }
    cout<<endl;
    return 0;
}
