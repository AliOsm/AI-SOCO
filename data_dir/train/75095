#include <cstdio>
#include <vector>
using namespace std;
const int inf = 1001001001;
int a[1000010], f[1000010];
int d[100010], ans;
vector<int> p, e[100010];
void dfs(int v, int pv = -1) { 
	for (int i = 0; i < e[v].size(); i++) {
		int w = e[v][i];
		if (w == pv) continue;
		if (d[w] == inf) {
			d[w] = d[v] + 1;
			dfs(w, v);
		} else if (d[v] > d[w]) {
			if (ans > d[v] - d[w] + 1) ans = d[v] - d[w] + 1;
		}
	}
}
int main() {
	for (int i = 2; i <= 1000000; i++) {
		if (a[i]) continue;
		for (int j = i; j <= 1000000; j += i) {
			a[j] = p.size() + 1;
		}
		p.push_back(i);
	}
	int n;
	scanf("%d", &n);
	ans = -1;
	for (int i = 0; i < n; i++) {
		int x;
		scanf("%d", &x);
		vector<int> q;
		int m = 1;
		while (x > 1) {
			int k = a[x] - 1, y = p[k], z = 0;
			while (x % y == 0) {
				x /= y;
				z ^= 1;
			}
			if (z) {
				q.push_back(k);
				m *= y;
			}
		}
		if (!q.size()) {
			ans = 1;
		} else if (q.size() == 2) {
			e[q[0]].push_back(q[1]);
			e[q[1]].push_back(q[0]);
		}
		if (f[m]) {
			if (ans != 1) ans = 2;
		}
		f[m] = 1;
	}
	if (ans != -1) {
		printf("%d\n", ans);
		return 0;
	}
	vector<int> q, nq;
	for (int i = 0; i < p.size(); i++) {
		d[i] = -1;
		if (f[p[i]]) {
			q.push_back(i);
			d[i] = 1;
		}
	}
	ans = inf;
	while (q.size()) {
		nq.clear();
		for (int i = 0; i < q.size(); i++) {
			int x = q[i];
			for (int j = 0; j < e[x].size(); j++) {
				if (d[e[x][j]] == d[x]) {
					if (ans > d[x] * 2 + 1) ans = d[x] * 2 + 1;
				}
			}
		}
		for (int i = 0; i < q.size(); i++) {
			int x = q[i];
			for (int j = 0; j < e[x].size(); j++) {
				if (d[e[x][j]] == -1) {
					d[e[x][j]] = d[x] + 1;
					nq.push_back(e[x][j]);
				} else if (d[e[x][j]] == d[x] + 1) {
					if (ans > d[x] * 2 + 2) ans = d[x] * 2 + 2;
				}
			}
		}
		q.swap(nq);
	}
	for (int k = 0; k < p.size(); k++) {
		if (p[k] >= 1000) break;
		for (int i = 0; i < p.size(); i++) {
			d[i] = inf;
		}
		d[k] = 0;
		dfs(k);
	}
	if (ans == inf) {
		puts("-1");
	} else {
		printf("%d\n", ans);
	}
	return 0;
}
