#pragma comment (linker, "/STACK:256000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <memory.h>
#include <sstream>
#include <queue>
#include <cassert>
#include <ctime>
#include <complex>
#include <unordered_map>
//#include <random>
 
using namespace std;
 
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<pii, pii> piiii;
typedef pair<int64, int> pli;
typedef pair<int, char> pic; 

#define pb push_back
#define sq(x) ((x)*(x))
#define cube(x) (((x)*(x))*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define bit(mask, b) ((mask >> b) & 1)
#define biton(mask, bit) (mask | (((uint64)(1)) << bit))
#define bitoff(mask, bit) (mask & (~(((uint64)(1)) << bit)))
#define bitputon(mask, bit) (mask |= (((uint64)(1)) << bit))
#define bitputoff(mask, bit) (mask &= (~(((uint64)(1)) << bit)))
#define FAIL() (*((int*)(0)))++
#define INF ((int)(1e9) + 1337)
#define EPS (1e-9)
#define y1 yy1
#define y0 yy0
#define j0 jj0

const long double PI = acosl((long double)-1.0);
const int64 LINF = 1e18;//((1ull << 63) - 1ull);
//const int MOD = 1000003;
const int MOD = 1000000007;

inline int mul(int a, int b, int MOD)
{
	return int64(a) * b % MOD;
}

inline int add(int a, int b, int MOD)
{
	int res = a + b;
	if (res >= MOD)
	{
		res -= MOD;
	}
	return res;
}

inline int bin_pow(int a, int b, int MOD)
{
	int res = 1;
	while (b)
	{
		if (b & 1)
		{
			res = mul(res, a, MOD);
		}
		b >>= 1;
		a = mul(a, a, MOD);
	}
	return res;
}

const int MAXN = 200500;

int n;
int p[MAXN];
int pcount;
int comp[MAXN];
int root[MAXN];
int ccount;
vector <vector <pii> > g;
vector <vector <int> > l;
int ans, a[MAXN];
int used[MAXN];

void init()
{
	scanf ("%d", &n);
	g.resize(n + 1);
	l.resize(n + 1);
	for (int i = 1; i <= n ;i++)
	{
		scanf ("%d", &p[i]);
		if (i != p[i])
		{
			g[p[i]].push_back(pii(i, i));
			g[i].push_back(pii(p[i], i));
		}
		else
		{
			g[i].push_back(pii(p[i], i));
		}
	}
}

void dfs(int v, int par, int c)
{
	comp[v] = c;
	l[c].push_back(v);
	for (int i = 0; i < g[v].size(); i++)
	{
		if (g[v][i].second == par)
		{
			continue;
		}
		if (!comp[g[v][i].first])
		{
			dfs(g[v][i].first, g[v][i].second, c);
		}
		else
		{
			root[c] = g[v][i].second;
		}
	}
}

void solve()
{
	init();
	for (int i = 1; i <= n; i++)
	{
		if (i == p[i])
		{
			pcount++;
		}
	}
	for (int i = 1; i <= n; i++)
	{
		if (!comp[i])
		{
			++ccount;
			dfs(i, 0, ccount);
		}
	}
	memcpy(a, p, sizeof(p));
	int mainc = 0;
	for (int i = 1; i <= ccount; i++)
	{
		if (p[root[i]] == root[i])
		{
			mainc = i;
			break;
		}
	}
	if (!mainc)
	{
		a[root[1]] = root[1];
		ans++;
		mainc = 1;
	}
	for (int i = 1; i <= ccount; i++)
	{
		if (i != mainc)
		{
			a[root[i]] = root[mainc];
			ans++;
		}
	}
	
	printf("%d\n", ans);
	for (int i = 1; i <= n; i++)
	{
		printf("%d ", a[i]);
	}
}

void precalc()
{
	
}

int main()
{
    //ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
	//test_output(); return 0;
    srand(25);
	precalc();
	int tests = 1;
	//scanf ("%d", &tests);
	for (int i = 1; i <= tests; i++)
	{
		solve();
	}
	
    return 0;
}
