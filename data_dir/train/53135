/**
*
* Author: Mouhanad
* Lang: GNU C++14
*
**/
#include <bits/stdc++.h>
using namespace std;

const int N = 100100 , L = 17;
int n , p[N][L] , dep[N] , bra[N] ;
int out1[N] , out2[N] , diff[N];
vector<int>adj[N];
map < pair < int , int > , int > mp;

void dfs(int u,int par)
{

    p[u][0]=par;
    dep[u]=1+dep[par];


    for(auto v:adj[u])
        if( v!=par )
        {
            dfs(v,u);
        }

}

int jump(int u,int k)
{

    for(int i=0; i<L; i++)
        if( k&(1<<i) )
            u=p[u][i];

    return u;
}

int LCA(int u,int v)
{

    if( u == v )return u;
    if( dep[u]<dep[v] )swap(u,v);

    int dif = dep[u]-dep[v];
    u=jump(u,dif);

    if( u == v )return u;

    for(int i=L-1; i>=0; i--)
        if( p[u][i]!=p[v][i] )
        {
            u=p[u][i];
            v=p[v][i];
        }

    return p[u][0];
}

int dis(int u,int v)
{

    return dep[u]+dep[v]-2*dep[LCA(u,v)];

}
void calc ( int u , int par   ){

for ( auto v : adj[u] ){
    if ( v != par ){
        calc(v,u);
    }
}
diff[u] += bra[u] ;
 diff[par] += diff[u] ;
 mp[{min(u,par),max(u,par)}] = diff[u] ;
 return ;
}
int main()
{
   scanf("%d",&n);
    for(int i=1; i<n; i++) // n-1 edges
    {
        int a , b ;
        scanf("%d %d",&a ,&b);
        adj[a].push_back(b);
        adj[b].push_back(a);
        out1[i] = min(a,b) ;
        out2[i] = max(a,b);
    }
    dfs(1,0);

    for(int j=1; j<L; j++)
        for(int i=1; i<=n; i++)
            p[i][j]=p[ p[i][j-1] ][j-1];
int k ;
   scanf("%d",&k);
   for ( int i = 1; i <= k ; i++ ){
    int u , v ;
    scanf("%d %d",&u,&v);
    int w = LCA(u,v);
    if ( w != v ) bra[v]++,bra[w]--;
    if ( w != u ) bra[u]++,bra[w]--;

   }
   calc(1,0);
   for ( int i = 1; i< n; i++ ){
    printf("%d ",mp[{out1[i],out2[i]}]);
   }
    return 0;
}
