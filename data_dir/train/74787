#pragma comment(linker, "/stack:100000000")

#include <cstdio>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <cstring>
#include <string>
#include <cmath>
#include <ctime>
#include <cassert>
#include <queue>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define sz(v) (int)(v).size()
#define all(v) (v).begin(), (v).end()

const int N = 100100;

char s[N];
char st[N];
int pos[N];
int nxt[N];
int cnt[N];
char res[N];

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	memset(nxt, -1, sizeof(nxt));
	gets(s);
	int n = strlen(s), p = 0;
	REP(i, n) {
		if (s[i] == '(' || s[i] == '[') {
			st[p] = s[i];
			pos[p] = i;
			p++;
		} else {
			if (s[i] == ')' && st[p - 1] == '(' || s[i] == ']' && st[p - 1] == '[') {
				nxt[pos[p - 1]] = i;
				--p;
			} else {
				p = 0;
			}
		}
	}
	cnt[0] = 0;
	REP(i, n) {
		cnt[i + 1] = cnt[i];
		if (s[i] == '[') ++cnt[i + 1];
	}
	int L = 0, R = -1, r = 0, pos = 0;
	while (pos < n) {
		if (nxt[pos] != -1) {
			int x = pos - 1;
			do {
				++x;
				x = nxt[x];
			} while (x < n - 1 && nxt[x + 1] != -1);
			if (cnt[x + 1] - cnt[pos] > r) {
				r = cnt[x + 1] - cnt[pos];
				L = pos;
				R = x;
			}
			pos = x;
		}
		++pos;
	}
	for (int i = L; i <= R; i++) {
		res[i - L] = s[i];
	}
	res[R - L + 1] = 0;
	printf("%d\n%s\n", r, res);
	return 0;
}