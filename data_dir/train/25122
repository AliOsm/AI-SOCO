// TestPrj.cpp : main project file.
// inplace_merge(T + beg, T + mid + 1, T + end + 1);
// unsigned Long hash[maxn],p = 999999999989; hash[0] = 1; fo(i,1,maxn)hash[i] = hash[i-1] * p;
//#include "stdafx.h"

/*
ID: Tariqul
PROG: 
LANG: C++
*/

#include <algorithm> 
#include <cctype> 
#include <cmath> 
#include <cstdio> 
#include <cstdlib> 
#include <cstring> 
#include <deque> 
#include <iostream> 
#include <list> 
#include <map> 
#include <numeric> 
#include <queue> 
#include <set> 
#include <sstream> 
#include <stack> 
#include <string> 
#include <vector>

using namespace std; 

#define fo(i,j,n) for(i=j;i<n;++i)
#define Fo(i,j,n) for(i=n-1;i>=j;--i)
#define foo(i,j,v) fo(i,j,sz(v))
#define Foo(i,j,v) Fo(i,j,sz(v))
#define li(v) v.begin(),v.end()
#define sz(v) ((int)v.size())
#define CLR(a,v) memset((a),(v),sizeof(a))
#define inf 1e9
#define Long long long
//typedef __int64 Long;
#define pi (2*acos(0))
#define eps 1e-9

#define two(X) (1<<(X))
#define twoL(X) (((Long)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)

char BUFFER[100000 + 5];
bool readn(int &n)	{ return scanf("%d",&n) == 1; } 
bool readl(Long &n)	{ return scanf("%I64d",&n) == 1; } 
bool readd(double &n){ return scanf("%lf",&n) == 1; } 
bool reads(string &s){ s = ""; int n = scanf("%s",BUFFER); if(n == 1)s = BUFFER; return n == 1; }
bool readln(string &s){ char *valid = gets(BUFFER); if(valid)s = BUFFER; return ((bool)valid); }
#ifdef localhost
void Print(Long &n, bool printNewLine = true)	{ printNewLine ? printf("%lld\n",n) : printf("%lld",n);  }
#else
void Print(Long &n, bool printNewLine = true)	{ printNewLine ? printf("%I64d\n",n) :  printf("%I64d",n); }
#endif // localhost

const int maxn = 1e6 + 10;
unsigned Long hash[maxn],p = 999999999989,sum[maxn],tsum[maxn];

int main()
{
	#ifdef localhost
	freopen("E://input.txt","r",stdin);
	//freopen("E://output.txt","w",stdout);
	#endif
	
	int i,j,n,m,a,b; hash[0] = 1; Long ans = 0,cnt; fo(i,1,maxn)hash[i] = hash[i-1] * p;
	cin >> n >> m; fo(i,0,m){ readn(a); readn(b); a--; b--; sum[a] += hash[b]; sum[b] += hash[a]; }
	fo(i,0,n)tsum[i] = sum[i];
	sort(sum,sum+n);
	for(i = j = 0; i < n;i = j)
	{
		while(j < n && sum[j] == sum[i])j++;
		cnt = j - i; ans += (cnt * (cnt-1))/2;
	}

	fo(i,0,n)sum[i] = tsum[i] + hash[i];
	sort(sum,sum+n);
	for(i = j = 0; i < n;i = j)
	{
		while(j < n && sum[j] == sum[i])j++;
		cnt = j - i; ans += (cnt * (cnt-1))/2;
	}
	cout << ans << endl;

	return 0;
}
