//  Copyright Â© 2020 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 21005
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

i64 N, M, K, ans;
i64 a[105][MAX];
i64 sum[105][MAX];
i64 dp[105][MAX];
i64 bstdpl[MAX];
i64 bstdpr[MAX];

i64 suma2( i64 i , i64 j ) {
    return sum[i][j + K - 1] - sum[i][j - 1] + sum[i + 1][j + K - 1] - sum[i + 1][j - 1];
}

i64 suma1( i64 i , i64 j ) {
    return sum[i][j + K - 1] - sum[i][j - 1];
}


int main()
{
    optimiza_io
    
    cin >> N >> M >> K;
    for( i64 i = 1; i <= N; i ++ )
        for( i64 j = 1; j <= M; j ++ ) {
            cin >> a[i][j];
            sum[i][j] = sum[i][j - 1] + a[i][j];
        }
    
    for( i64 i = 1; i <= N; i ++ )
        for( i64 j = M + 1; j <= M + 2*K; j ++ )
            sum[i][j] = sum[i][j - 1];
    
    
    // DO THE DP 
    for( i64 i = N; i >= 1; i -- ) {
        for( i64 j = 1; j + K - 1 <= M; j ++ ) {
            // Day N choosing ( j , j + K - 1 )
            
            i64 tmp = 0;
            // Check overlaps 
            for( i64 k = max( 1LL , j - K + 1LL ); k <= j; k ++ )
                tmp = max( tmp , dp[i + 1][k] + suma2( i , j ) - sum[i + 1][k + K - 1] + sum[i + 1][j - 1] );
            for( i64 k = j; k <= min( M , j + K - 1LL ); k ++ )
                tmp = max( tmp , dp[i + 1][k] + suma2( i , j ) - sum[i + 1][j + K - 1] + sum[i + 1][k - 1] );
            
            // No overlaps left 
            if( j > K ) 
                tmp = max( tmp , suma2( i , j ) + bstdpl[j - K] );
            
            // No overlaps right 
            if( j + K <= M )
                tmp = max( tmp , suma2( i , j ) + bstdpr[j + K] );
                
            
            dp[i][j] = tmp;
            ans = max( ans , tmp );
            
        }
        
        for( i64 j = 1; j <= M; j ++ ) 
            bstdpl[j] = max( dp[i][j] , bstdpl[j - 1] );
            
        for( i64 j = M; j >= 1; j -- )
            bstdpr[j] = max( bstdpr[j + 1] , dp[i][j] );
    }
    
    
    cout << ans << "\n";
    return 0;
}

// CHECAR LIMITES 