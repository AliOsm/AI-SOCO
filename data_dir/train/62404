//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

inline void setmin(int &x, int y) { if (y < x) x = y; }
inline void setmax(int &x, int y) { if (y > x) x = y; }
inline void setmin(ll &x, ll y) { if (y < x) x = y; }
inline void setmax(ll &x, ll y) { if (y > x) x = y; }

const int N = 2000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

struct Point
{
    ll x, y;
    int id;
    Point() {}
    Point(ll x, ll y) : x(x), y(y) {}
    ll len() { return x * x + y * y; }
};

bool operator == (Point &p1, Point &p2) { return p1.x == p2.x && p1.y == p2.y; }

bool operator != (Point &p1, Point &p2) { return p1.x != p2.x || p1.y != p2.y; }

Point operator + (Point &p1, Point &p2) { return Point(p1.x + p2.x, p1.y + p2.y); }

Point operator - (Point &p1, Point &p2) { return Point(p1.x - p2.x, p1.y - p2.y); }

ll operator * (Point p1, Point p2) { return p1.x * p2.x + p1.y * p2.y; }

ll operator % (Point p1, Point p2) { return p1.x * p2.y - p1.y * p2.x; }

bool comp3(Point &a, Point &b)
{
    if (a.y >= 0 && b.y < 0)
        return true;
    else if (a.y < 0 && b.y >= 0)
        return false;
    else if (a.y == 0 && b.y == 0)
        return a.x > b.x;
    else
        return a % b > 0;
}

bool comp(pair<Point, pair<int, int> > &a, pair<Point, pair<int, int> > &b)
{
    return comp3(a.fi, b.fi);
}

bool comp_p(Point &a, Point &b)
{
    if (a.y != b.y)
        return a.y < b.y;
    else
        return a.x < b.x;
}

Point a[N];
pair<Point, pair<int, int> > vect[N * N];
int pos[N];

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n;
    ll S;
    cin >> n >> S;
    S *= 2;
    rep(i, 0, n)
    {
        cin >> a[i].x >> a[i].y;
        a[i].id = i;
    }
    int cnt = 0;
    rep(i, 0, n)
        rep(j, 0, n)
            if (i != j)
                vect[cnt++] = {a[i] - a[j], {i, j}};
    sort(vect, vect + cnt, comp);
    sort(a, a + n, comp_p);
    rep(i, 0, n)
        pos[a[i].id] = i;
    rep(i, 0, cnt)
    {
        int x = pos[vect[i].se.fi], y = pos[vect[i].se.se];
        if (x > y)
            swap(x, y);
        assert(y - x == 1);
        int l = y, r = n, mid;
        while (r - l > 1)
        {
            mid = (l + r) / 2;
            ll val = abs((a[mid] - a[x]) % (a[y] - a[x]));
            if (val == S)
            {
                cout << "Yes\n";
                cout << a[x].x << " " << a[x].y << "\n";
                cout << a[y].x << " " << a[y].y << "\n";
                cout << a[mid].x << " " << a[mid].y << "\n";
                exit(0);
            }
            else if (val < S)
                l = mid;
            else
                r = mid;
        }
        l = -1; r = x;
        while (r - l > 1)
        {
            mid = (l + r) / 2;
            ll val = abs((a[mid] - a[x]) % (a[y] - a[x]));
            if (val == S)
            {
                cout << "Yes\n";
                cout << a[x].x << " " << a[x].y << "\n";
                cout << a[y].x << " " << a[y].y << "\n";
                cout << a[mid].x << " " << a[mid].y << "\n";
                exit(0);
            }
            else if (val < S)
                r = mid;
            else
                l = mid;
        }
        swap(a[x], a[y]);
        swap(pos[vect[i].se.fi], pos[vect[i].se.se]);
    }
    cout << "No\n";
    return 0;
}