#include<bits/stdc++.h>
using namespace std;

#define ll       long long
#define ull      unsigned ll
#define pii      pair<int, int>
#define pll      pair<ll, ll>
#define mp       make_pair
#define ff       first
#define ss       second
#define sz(x)    (int) x.size()
#define all(v)   v.begin(), v.end()

template <typename T> inline void smin(T &a, T b) {a = a < b ? a : b;}
template <typename T> inline void smax(T &a, T b) {a = a > b ? a : b;}

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string> it) {cout << endl;}
template<typename T, typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
    cerr << *it << " = " << a << ", ";
    err(++it, args...);
}

template <typename T> inline void Int(T &n) {
    n = 0; int f = 1; register int ch = getchar();
    for (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
    n = n * f;
}

template <typename T, typename TT> inline void Int(T &n, TT &m) { Int(n); Int(m); }
template <typename T, typename TT, typename TTT> inline void Int(T &n, TT &m, TTT &l) { Int(n, m); Int(l); }

const int mod = (int) 1e9 + 7;

inline int add(int a, int b) {a += b; return a >= mod ? a - mod : a;}
inline int sub(int a, int b) {a -= b; return a < 0 ? a + mod : a;}
inline int mul(int a, int b) {return (ll) a * b % mod;}

const int inf = (int) 2e9 + 5;
const ll  Inf = (ll) 2e18 + 5;
const int N   = (int) 1e6 + 50;

int par[21][N], dep[N];
int n = 4, first_end = 2, second_end = 3, diameter = 2;

void process() {
    for (int i = 1; i <= n; i++) {
        if (i == 1) par[0][i] = i, dep[i] = 0;
        else par[0][i] = 1, dep[i] = 1;
    }
    for (int u = 1; u <= n; u++) {
        for (int i = 1; i <= 20; i++) {
            par[i][u] = par[i - 1][par[i - 1][u]];
        }
    }
}

void add_edge(int u, int p) {
    par[0][u] = p;
    dep[u] = dep[p] + 1;
    for (int i = 1; i <= 20; i++) {
        par[i][u] = par[i - 1][par[i - 1][u]];
    }
}

int lca(int u, int v) {
    if (dep[u] < dep[v]) swap(u, v);
    for (int i = 20; i >= 0 and u != v; i--) {
        if (dep[par[i][u]] >= dep[v]) u = par[i][u];
    }
    if (u == v) return u;
    for (int i = 20; i >= 0; i--) {
        if (par[i][u] != par[i][v]) u = par[i][u], v = par[i][v];
    }
    return par[0][u];
}

int dist(int u, int v) {
    int l = lca(u, v);
    return dep[u] + dep[v] - 2 * dep[l];
}

int solve() {
    process();
    int q; Int(q);
    while (q--) {
        int u; Int(u);
        add_edge(++n, u);
        add_edge(++n, u);
        int first_dis = dist(n, first_end);
        int second_dis = dist(n, second_end);
        if (first_dis >= second_dis and first_dis >= diameter) {
            diameter = first_dis;
            second_end = n;
        }
        else if (second_dis >= first_dis and second_dis >= diameter) {
            diameter = second_dis;
            first_end = n;
        }
        printf("%d\n", diameter);
    }
    return 0;
}

int main() {
    //ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int test = 1, tc = 0;
    //Int(test);
    //cin >> test;
    while (test--) {
        //printf("Case %d: ", ++tc);
        solve();
    }
    return 0;
}
