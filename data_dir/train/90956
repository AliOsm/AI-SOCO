#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <ctime>
#include <map>
#include <iterator>
#include <queue>
#include <list>
#include <stack>
#include <set>
#include <functional>
#include <string>

using namespace std;

typedef long long ll;
typedef long double ld;

const int NMax = 101;
const int INF = int(1e9);
const int sizeTree = 524289;
const double eps = 1e-9;
const double PI = 3.141592653589793238462;
const int MOD = int(1e9);

#define SQR(x) ((x) * (x))
#define ABS(x) ((x) < (0) ? (-(x)) : (x))
#define SZ(x) (int) (x).size()

char ch[NMax][NMax];
bool status[NMax][NMax];
int n;
int dx[4] = {-1, 0, 1, 0};
int dy[4] = {1, 1, 1, 2};
bool flag;



int main()
{
	scanf("%i\n", &n);
	for (int i = 1;i <= n;i++)
	{
		for (int j = 1;j <= n;j++) scanf("%c", &ch[i][j]);
		scanf("%\n");
	}
	memset(status, false, sizeof(status));
	for (int i = 1;i <= n;i++)
		for (int j = 1;j <= n;j++)
		{
			if (ch[i][j] == '#' && status[i][j] == false)
			{
				flag = true;
				for (int k = 0;k < 4;k++)
				{
					if (i + dy[k] > n || j + dx[k] > n || j + dx[k] < 1) 
					{
						flag = false;
						break;
					}
					if (status[i + dy[k]][j + dx[k]]) flag = false;
					if (ch[i + dy[k]][j + dx[k]] == '.') flag = false;
				}
				if (flag)
				{
					status[i][j] = true;
					for (int k = 0;k < 4;k++) status[i + dy[k]][j + dx[k]] = true;
				}
			}
		}
	flag = true;
	for (int i = 1;i <= n;i++)
		for (int j = 1;j <= n;j++)
			if (status[i][j] == false && ch[i][j] == '#') flag = false;
	if (flag)
		printf("YES");
	else
		printf("NO");
	return 0;
}