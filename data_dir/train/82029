#include <bits/stdc++.h>
using LL = long long ;

const int N = 200 + 5;
int A[N],n;
int degree[N];
int dis[N];
bool vis[N];

LL gcd(LL a,LL b) {
    return b == 0 ? a : gcd(b,a % b);
}

LL work() {
    for (int i = 0; i < n; ++ i) {
        degree[A[i]] ++;
    }
    std::queue<int> que;
    for (int i = 0; i < n; ++ i) {
        if (degree[i] == 0) {
            que.push(i);
            dis[i] = 1;
        }
    }
    while (!que.empty()) {
        int u = que.front(); que.pop();
        int v = A[u];
        if (--degree[v] == 0) {
            dis[v] = dis[u] + 1;
            que.push(v);
        }
    }
    int vmax = 1;
    for (int i = 0; i < n; ++ i) {
        if (degree[i] == 0) {
            vmax = std::max(vmax,dis[i]);
        }
    }
    LL ret = 1;
    for (int i = 0; i < n; ++ i) {
        if (degree[i] != 0 && !vis[i]) {
            int u = i;
            int count = 0;
            while (true) {
                if (vis[u]) break;
                vis[u] = true;
                count ++;
                u = A[u];
            }
            ret = ret / gcd(ret,count) * count;
        }
    }
    return std::max(ret,(vmax + ret - 1) / ret * ret);
}

int main() {
    scanf("%d",&n);
    for (int i = 0; i < n; ++ i) {
        scanf("%d",A + i); A[i] --;
    }
    printf("%I64d\n",work());
}
