#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>

using namespace std;

#define f first
#define s second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define ll long long
#define ld double
#define ull unsigned long long
#define PI pair < int, int > 
#define hash Hash

const int N = 1234;
const int M = 123;
const ld Pi = acos(-1);
const ll Inf = 1e18;
const int inf = 1e9;
const int mod = 1e9 + 7;
const int Sz = 501;
const int MOD = 1e9 + 7;

void add(int &a, int b) {
  a += b;
  if (a >= mod) a -= mod;
}
int mult(int a, int b) {
  return 1ll * a * b % mod;
}
int sum(int a, int b) {
  add(a, b);
  return a;
}

int n, a[N], cnk[N][N], f[N], dp[N], buf[N], S;

void Add(int len) {
  for (int i = 0;i <= S;i++) {
    if (dp[i] == 0) continue;
    for (int num = 1;num <= len;num++) {
      for (int toDel = 0;toDel <= min(num, i);toDel++) {
        int nBad = i - toDel + len - num;
        int ways = mult(dp[i], cnk[len - 1][num - 1]);
        ways = mult(ways, cnk[i][toDel]);
        ways = mult(ways, cnk[S + 1 - i][num - toDel]);
        add(buf[nBad], ways);
      }
    }
  }
  for (int i = 0;i <= S + len;i++) {
    dp[i] = buf[i];
    buf[i] = 0;
  }
  S += len;
}

int get(int x) {
  int ans = 1;
  for (int i = 2;1ll * i * i <= x;i++) {
    int y = i;
    int cnt = 0;
    while(x % y == 0) {
      cnt++;
      x /= y;
    }
    if (cnt & 1) ans *= y;
  }
  if (x > 0) ans *= x;
  return ans;
}

void solve() {
  cin >> n;
  for (int i = 1;i <= n;i++) {
    cin >> a[i]; a[i] = get(a[i]);
  }
  for (int i = 0;i <= n + n;i++) {
    if (i == 0) f[i] = 1;
    else f[i] = mult(f[i - 1], i);
    cnk[i][i] = cnk[i][0] = 1;
    for (int j = 1;j <= i;j++) cnk[i][j] = sum(cnk[i - 1][j], cnk[i - 1][j - 1]);
  }
  sort(a + 1, a + n + 1);
  dp[0] = 1;
  int kek = 1;
  for (int i = 1;i <= n;i++) {
    int j = i;
    while(j < n && a[j + 1] == a[i]) j++;
    Add(j - i + 1);
    kek = mult(kek, f[j - i + 1]);
    i = j;
  }
  cout << mult(kek, dp[0]) << endl;
}

int main() {
  #ifdef wws
   freopen("in", "r", stdin);
  // freopen("out", "w", stdout);
  #endif 
  ios_base::sync_with_stdio(0);
  int tt = 1; 
  while(tt--) solve();
  return 0;
}
