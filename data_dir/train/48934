// Aggressive Play

#include<bits/stdc++.h>
#define ll long long
#define F first
#define S second
using namespace std;

void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(long long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\"' << x << '\"';}
void __print(const string &x) {cerr << '\"' << x << '\"';}
void __print(bool x) {cerr << (x ? "true" : "false");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}
void _print() {cerr << "]\n";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}
#ifndef ONLINE_JUDGE
#define debug(x...) cerr << "[" << #x << "] = ["; _print(x)
#else
#define debug(x...)
#endif

const int N = 3e5 + 5;
ll a[N];
int main()
{
    ios_base ::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    int t;
    cin >> t;
    while(t--){
        int n;
        cin >> n;
        multiset<pair<int, pair<int, int> > > ms;   // len, l, r;
        ms.insert({-n, {1, n}});
        for(int i = 1; i <= n; i++){
            pair<int, pair<int, int> > p = *ms.begin();
            ms.erase(ms.begin());
            int len = -p.F, l = p.S.F, r = p.S.S;
            int idx;
            if(len & 1){
                a[(l + r) / 2] = i;
                idx = (l + r) / 2;
            }
            else{
                a[(l + r - 1) / 2] = i;
                idx = (l + r - 1) / 2;
            }
            int leftX = idx - 1, rightX = idx + 1;
            if(l <= leftX){
                ms.insert({-(leftX - l + 1), {l, leftX}});
            }
            if(rightX <= r){
                ms.insert({-(r - rightX + 1), {rightX, r}});
            }
        }
        for(int i = 1; i <= n; i++)
            cout << a[i] << " ";
        cout << "\n";
    }
return 0;
}
