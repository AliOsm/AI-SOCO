#include <bits/stdc++.h>

using namespace std;
#define endl "\n"
#define all(x) x.begin(),x.end()
#define rall(x) x.rbegin(),x.rend()
#define ff first.first
#define fs first.second
typedef long long ll;
typedef unsigned long long ull;

//const ll mod = 1e16+371;
//const ll mod = 1e12+193;
//const int mod = 1e9+7;

const double PI = acos(-1);
const ll mod = 1e9+7;
const int INF = 1e9;
const int MAX=1e5+10, N=1e7+10;
const int lim=1<<18;

ll tree[1<<20];
ll lazy[1<<20];

void propagate(int i,int l,int r){
	tree[i]+=lazy[i]*(r-l+1);
	if(l!=r){
		lazy[i*2]+=lazy[i];
		lazy[i*2+1]+=lazy[i];
	}
	lazy[i]=0;
}

void update(int i,int l,int r,int a,int b,ll val){
//	cerr<<"before "<<i<<" "<<l<<" "<<r<<" "<<a<<" "<<b<<endl;
	propagate(i,l,r);
	if(b<l||a>r)
		return;
	if(a<=l&&b>=r){
		lazy[i]+=val;
		propagate(i,l,r);
		return;
	}
	int mid=(l+r)/2;
	update(i*2,l,mid,a,b,val);
	update(i*2+1,mid+1,r,a,b,val);
	tree[i]=tree[i*2]+tree[i*2+1];
//	cerr<<"after "<<i<<" "<<l<<" "<<r<<" "<<a<<" "<<b<<" "<<tree[i]<<" "<<tree[i*2]<<" "<<tree[i*2+1]<<endl;
}
ll get(int i,int l,int r,int a,int b){
	propagate(i,l,r);
	if(b<l||a>r)
		return 0;
	if(a<=l&&b>=r)
		return tree[i];
	int mid=(l+r)/2;
	return get(i*2,l,mid,a,b)+
			get(i*2+1,mid+1,r,a,b);
}

int main(){
	ios_base::sync_with_stdio(0);
//	cin.tie(0);
//	srand(time(0));

	int m;
	while(cin>>m){
		memset(tree,0,sizeof tree);
		memset(lazy,0,sizeof lazy);
		int ind=0;
		int n=1;
		while(m--){
			int t; cin>>t;
			double ans=0;
			if(t==1){
				int a;
				ll x; cin>>a>>x;
				update(1,0,lim,0,a-1,x);
//				get(1,0,lim,0,lim);
				//				for(int i=0;i<a;i++)
//					cerr<<get(1,0,lim,i,i)<<endl;
			}
			else if(t==2){
				int k; cin>>k;
				ind++;
				n++;
				update(1,0,lim,ind,ind,k);
//				get(1,0,lim,0,lim);
			}
			else if(t==3){
				int tmp=get(1,0,lim,ind,ind);
				update(1,0,lim,ind,ind,-tmp);
//				get(1,0,lim,0,lim);
				ind--;
				n--;
			}
//			cerr<<"ans= "<<get(1,0,lim,0,0)<<endl;
//			cerr<<"ans= "<<get(1,0,lim,1,1)<<endl;
			ans=get(1,0,lim,0,lim);
//			cerr<<ans<<endl;
			ans/=(double)(n);
			cout<<fixed<<setprecision(10)<<ans<<endl;
		}
	}

	return 0;
}
