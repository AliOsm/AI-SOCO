#include <iostream>
#include <math.h>
#define x first
#define y second
#define imp { -1, -1 }
#define Point pair <int, int>
using namespace std;

int buc[100010]; /// witch bucket it's from
char op[100010][12];
Point ans[100010][12];
int n, m;

inline void update(int lin);
inline void query(Point a);
inline void init();

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m;
	int q;
	cin >> q;

	for (int i(1); i <= n; i++)
		cin >> op[i] + 1;

	init();

	while (q--) {
		char opr;
		int a, b;
		cin >> opr >> a >> b;
		if (opr == 'A')
			query({ a, b });
		else {
			cin >> opr;
			op[a][b] = opr;
			for (int i(a); buc[i] == buc[a]; i++)
				update(i);
		}
	}

	return 0;
}

void init()
{
	const int Q = 500;
	int nr(0), id(1);
	for (int i(1); i <= n; i++) {
		buc[i] = id;
		nr++;
		if (nr == Q)
			nr = 0, id++;
	}

	for (int i(0); i <= n; i++)
		ans[i][0] = { i, 0 }, ans[i][m + 1] = { i, m + 1 };
	for (int i(1); i <= m; i++)
		ans[0][i] = { 0, i };

	for (int i(1); i <= n; i++)
		update(i);
}

void query(Point a)
{
	while (a.first >= 1 && a.second >= 1 && a.second <= m)
		a = ans[a.first][a.second];
	cout << a.first << ' ' << a.second << '\n';
}

void update(int lin)
{
	for (int i(1); i <= m; i++) {
		if (op[lin][i] == '<')
			ans[lin][i] = ans[lin][i - 1];
		else if (op[lin][i] == '^') {
			if (buc[lin - 1] == buc[lin])
				ans[lin][i] = ans[lin - 1][i];
			else
				ans[lin][i] = { lin - 1, i };
		}
		else
			ans[lin][i] = imp;
	}
	for (int i(m); i; i--)
		if (op[lin][i] == '>')
			ans[lin][i] = ans[lin][i + 1];
}