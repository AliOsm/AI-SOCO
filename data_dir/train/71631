#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

int N;
pair <int, int> p[200010];

struct point {int x,y;};
point P[200010];

int func(int X, int Y){
    int ans=0,i,j=N-1;
    
    REP(i,N){
        bool good = false;
        
        while(j >= 0){
            int X2 = P[i].x + P[j].x;
            int Y2 = P[i].y + P[j].y;
            if(X2 > X || (X2 == X && Y2 > Y)){
                j--;
            } else {
                if(X2 == X && Y2 == Y) good = true;
                break;
            }
        }
        
        if(!good) ans++;
    }
    
    return ans;
}

int main(void){
    int K,i,j;
    
    cin >> N >> K;
    REP(i,N) scanf("%d%d", &p[i].first, &p[i].second);
    sort(p, p+N);
    REP(i,N){
        P[i].x = p[i].first;
        P[i].y = p[i].second;
    }
    
    if(K >= N){
        cout << -1 << endl;
        return 0;
    }
    
    set <pair <int, int> > ans;
    REP(i,K+1) REP(j,K-i+1){
        int x = P[i].x + P[N-1-j].x;
        int y = P[i].y + P[N-1-j].y;
        if(func(x, y) <= K) ans.insert(make_pair(x, y));
    }
    
    cout << ans.size() << endl;
    foreach(ans,itr) printf("%.1f %.1f\n", (itr->first) / 2.0, (itr->second) / 2.0);
    
    return 0;
}
