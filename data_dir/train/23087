/**
 * @author khokharnikunj8
 */

#include <bits/stdc++.h>

using namespace std;

class CReplacement {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n, q;
        in >> n >> q;
        string s;
        in >> s;
        int ans = 0;
        for (int i = 1; i < (int) s.length(); i++) if (s[i - 1] == '.' && s[i] == '.') ans++;
        while (q-- > 0) {
            int pos;
            char c;
            in >> pos >> c;
            pos--;
            if ((int) s.length() == 1) {
                out << ans << "\n";
                continue;
            }
            if (pos == 0) {
                if (s[pos] == '.' && s[pos + 1] == '.')ans--;
                s[pos] = c;
                if (s[pos] == '.' && s[pos + 1] == '.')ans++;
            } else if (pos == (int) s.length() - 1) {
                if (s[pos] == '.' && s[pos - 1] == '.')ans--;
                s[pos] = c;
                if (s[pos] == '.' && s[pos - 1] == '.')ans++;
            } else {
                if (s[pos] == '.' && s[pos + 1] == '.')ans--;
                if (s[pos] == '.' && s[pos - 1] == '.')ans--;
                s[pos] = c;
                if (s[pos] == '.' && s[pos + 1] == '.')ans++;
                if (s[pos] == '.' && s[pos - 1] == '.')ans++;
            }
            out << ans << "\n";
        }


    }
};


int main() {
	CReplacement solver;
	std::ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
