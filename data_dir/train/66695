#include<bits/stdc++.h>

using namespace std;

#define fRead(x)  freopen(x,"r",stdin)
#define fWrite(x) freopen (x,"w",stdout)

#define LL long long
#define ULL unsigned long long
#define ff first
#define ss second
#define pb push_back
#define INF 2e16
#define PI acos(-1.0)
#define mk make_pair

#define min3(a,b,c) min(a,min(b,c))
#define max3(a,b,c) max(a,max(b,c))
#define min4(a,b,c,d) min(a,min(b,min(c,d)))
#define max4(a,b,c,d) max(a,max(b,max(c,d)))
#define SQR(a) ((a)*(a))
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define REP(i,b) for(int i=0;i<b;i++)
#define ROF(i,a,b) for(int i=a;i>=b;i--)
#define MEM(a,x) memset(a,x,sizeof(a))
#define ABS(x) ((x)<0?-(x):(x))

#define scanI(a) scanf("%d",&a)
#define scanI2(a,b) scanI(a) , scanI(b)
#define scanI3(a,b,c) scanI(a), scanI(b), scanI(c)
#define scanI4(a,b,c,d) scanI(a), scanI(b), scanI(c), scanI(d)

#define scanL(a) scanf("%I64d",&a)
#define scanL2(a,b) scanL(a) , scanL(b)
#define scanL3(a,b,c) scanL(a), scanL(b), scanL(c)
#define scanL4(a,b,c,d) scanL(a), scanL(b), scanL(c), scanL(d)

#define SORT(v) sort(v.begin(),v.end())
#define REV(v) reverse(v.begin(),v.end())

#define FastRead ios_base::sync_with_stdio(0);cin.tie(nullptr);
const int N = 200005;
LL n;
vector<LL>g[N][4];

LL dp[N][11];

LL call(LL pos,LL turn)
{
    if(pos == n + 1)return 0;
    if(dp[pos][turn] != -1)return dp[pos][turn];
    LL ret = 0;
    for(LL i = 0;i <= 3 and i <= g[pos][1].size();i++){
        for(LL j = 0;i + 2 * j <= 3 and j <= g[pos][2].size();j++){
            for(LL k = 0;i + 2 * j + 3 * k <= 3 and k <= g[pos][3].size();k++){
                LL mx = 0;
                LL sum = 0;
                for(LL I = 0;I < i;I++)sum += g[pos][1][I] , mx = max(mx,g[pos][1][I]);
                for(LL J = 0;J < j;J++)sum += g[pos][2][J] , mx = max(mx,g[pos][2][J]);
                for(LL K = 0;K < k;K++)sum += g[pos][3][K] , mx = max(mx,g[pos][3][K]);

                if(turn + i + j + k >= 10){
                    ret = max(ret,sum + mx + call(pos + 1,(turn + i + j + k) % 10));
                }else{
                    ret = max(ret,sum + call(pos + 1,(turn + i + j + k) % 10));
                }
            }
        }
    }
    return dp[pos][turn] = ret;
}

int main()
{
    FastRead
    MEM(dp,-1);
    cin >> n;
    for(LL i = 1;i <= n;i++){
        LL k;cin >> k;
        for(LL j = 1;j <= k;j++){
            LL c,d;
            cin >> c >> d;
            g[i][c].push_back(d);
        }
    }
    for(LL i = 1;i <= n;i++){
        for(LL j = 1;j <= 3;j++){
            if(!g[i][j].empty()){
                SORT(g[i][j]);
                REV(g[i][j]);
            }
        }
    }
    cout << call(1,0) << "\n";
}
