#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int N = 2e5 + 8;

int par[N];
bool mark[N], used[N];
int u[N], v[N], cnt[N];

int root(int v)
{
	return par[v] == -1 ? v : par[v] = root(par[v]);
}

bool merge(int v, int u)
{
	v = root(v);
	u = root(u);
	if (v == u)
		return false;
	par[v] = u;
	return true;
}

int main()
{
	int n, m, d;
	cin >> n >> m;
	for (int i=0; i<m; i++)
	{
		cin >> u[i] >> v[i];
		u[i]--;
		v[i]--;
		cnt[v[i]]++;
		cnt[u[i]]++;
	}
	int p = 0;
	for (int i=0; i<n; i++)
		if (cnt[p] < cnt[i])
			p = i;
	d = cnt[p];

	memset(par, -1, sizeof par);
	for (int i=0; i<m; i++)
		if (v[i] != p && u[i] != p)
			merge(v[i], u[i]);
	for (int i=0; i<m; i++)
	{
		if (v[i] != p && u[i] != p)
			continue;
		int other = v[i] ^ u[i] ^ p;
		int rther = root(other);
		if (mark[rther])
			continue;
		mark[rther] = true;
		used[i] = true;
		d--;
	}
	if (d < 0)
	{
		cout << "NO\n";
		return 0;
	}
	for (int i=0; i<m; i++)
	{
		if (v[i] != p && u[i] != p)
			continue;
		if (d <= 0 || used[i])
			continue;
		d--;
		used[i] = true;
	}
	if (d > 0)
	{
		cout << "NO\n";
		return 0;
	}
	memset(par, -1, sizeof par);
	for (int i=0; i<m; i++)
		if (used[i])
			merge(v[i], u[i]);
	for (int i=0; i<m; i++)
		if (v[i] != p && u[i] != p)
			used[i] = merge(v[i], u[i]);
	
	for (int i=0; i<m; i++)
		if (used[i])
			cout << v[i]+1 << " " << u[i]+1 << "\n";
}
