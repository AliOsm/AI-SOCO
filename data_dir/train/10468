#include <bits/stdc++.h>
#include<stdio.h>
#include <map>
using namespace std;
#define sf(a) scanf("%d",&a)
#define sf2(a,b) scanf("%d %d",&a,&b)
#define sf3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define pf(a) printf("%d",a)
#define pf2(a,b) printf("%d %d",a,b)
#define pf3(a,b,c) printf("%d %d %d",a,b,c)
#define sfl(a) scanf("%lld",&a)
#define sfl2(a,b) scanf("%lld %lld",&a,&b)
#define sfl3(a,b,c) scanf("%lld %lld %lld",&a,&b,&c)
#define pfl(a) printf("%lld",a)
#define pfl2(a,b) printf("%lld %lld",a,b)
#define pfl3(a,b,c) printf("%lld %lld %lld",a,b,c)
#define nl printf("\n")
#define ll long long
#define se second
#define fi first
#define mk(a, b) make_pair(a, b)
#define pb push_back
#define vi vector<int>
#define vvi vector<vector<int>>
#define pii pair<int, int>
#define vvpi vector<vector<pii>>
#define pli pair<ll, int>
#define INF 1e9
#define MAX (int)1e6 + 5
#define FI freopen("input.txt", "r", stdin);
#define FO freopen("o.txt", "w", stdout);
#define in ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define edge pair<ll, pair<int, int>>
#define CYA  exit(0);
/*int dx[] = { 0, 1, 0, -1 };
int dy[] = { 1, 0, -1, 0 }; // 4 Direction*/
/*int dx[]={1,1,0,-1,-1,-1,0,1};
int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction*/
int dx[] = { 2,1,-1,-2,-2,-1,1,2 };
int dy[] = { 1,2,2,1,-1,-2,-2,-1 };//Knight Direction*/
const int MOD = 1e9 + 7;
const int N = 1e5 + 5;
ll n, m, k;
vector<vi>v2;
int st[N],goal[N],sons[N],ssons[N];
bool vis[N];
vector<int>ans;
void dfs(int node)
{
    if(ssons[node]!=0){
        ssons[node]=0;
        st[node]=!st[node];
        for(auto i:v2[node]){
            if(!vis[i]){
                sons[i]=!sons[i];
            }
        }
    }
    if(sons[node]){
        for(auto i:v2[node]){
            if(!vis[i]){
                ssons[i]=!ssons[i];
            }
        }
    }
    int curr=st[node];
    if(curr!=goal[node]){
        ans.push_back(node);
        for(auto i:v2[node]){
            if(!vis[i]){
                sons[i]=!sons[i];
            }
        }
    }
        for(auto i:v2[node]){
            if(!vis[i]){
                vis[i]=1;
                dfs(i);
            }
        }
}
int main()
{
    in;
    cin>>n;
    v2.resize(n+1);
    for(int i=0; i<n-1; i++)
    {
        int a,b;
        cin>>a>>b;
        v2[a].push_back(b);
        v2[b].push_back(a);
    }
    for(int i=1; i<=n; i++)cin>>st[i];
    for(int i=1; i<=n; i++)cin>>goal[i];
    vis[1]=1;
    dfs(1);
    cout<<ans.size()<<endl;
    for(int i=0; i<ans.size(); i++)cout<<ans[i]<<endl;
}
