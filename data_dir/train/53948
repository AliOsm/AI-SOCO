#include <iostream>
#include <cstdio>
#include <string>
#include <string.h>
#include <queue>
#include <math.h>
#include <cmath>
#include <map>
#include <set>
#include <vector>
#include <algorithm>
#include <bitset>
#include <list>
#include <ctype.h>
#include <cassert>
#include <stack>
#include <fstream>
#include <unordered_map>
#include <unordered_set>
#include <ctime>
#include <functional>
#include <ctime>
#include <limits>
#include <tuple>
#include <complex>
#include <numeric>
#include <future>

using namespace std;

typedef long double ld;
typedef unsigned long long ull;
typedef long long ll;

const ld PI = acos(-1.0);

template<typename T>
T abs(T x) {
	return x > 0 ? x : -x;
}

template<typename T>
T sqr(T x) {
	return x * x;
}

template<typename T>
bool chmin(T &x, T y) {
	if (x > y) {
		x = y;
		return true;
	}
	return false;
}

template<typename T>
bool chmax(T &x, T y) {
	if (x < y) {
		x = y;
		return true;
	}
	return false;
}

template<typename U, typename V>
ostream &operator<<(ostream &s, const pair<U, V> &x) {
	s << "(" << x.fst << ", " << x.snd << ")";
	return s;
}

template<typename U>
ostream &operator<<(ostream &s, const vector<U> &x) {
	s << "[";
	bool was = false;
	for (auto it : x) {
		if (was) {
			s << ", ";
		}
		was = true;
		s << it;
	}
	s << "]";
	return s;
}

template<typename U>
ostream &operator<<(ostream &s, const set<U> &x) {
	s << "{";
	bool was = false;
	for (auto it : x) {
		if (was) {
			s << ", ";
		}
		was = true;
		s << it;
	}
	s << "}";
	return s;
}

template<int sz>
ostream& operator<<(ostream &s, const bitset<sz> &x) {
	for (int i = 0; i < sz; i++) {
		s << x[i];
	}
	return s;
}


//--------------------------------------------------------------------------

bool isG(char c) {
    return c == 'a' || c == 'o' || c == 'i' || c == 'e' || c == 'u';
}

bool isValid(string t) {
    for (size_t i = 0; i + 2 < t.size(); i++) {
        if (!isG(t[i]) && !isG(t[i + 1]) && !isG(t[i + 2])) {
            if (t[i] == t[i + 1] && t[i] == t[i + 2]) continue;
            return false;
        }
    }
    return true;
}

int main() {

	srand(time(0));

#ifdef LOCAL
	freopen("input.txt", "r", stdin);
#else
#endif

    string s;
    cin >> s;

    string token;

    vector<string> res;

    for (char c : s) {
        if (isValid(token + c)) token += c;
        else {
            res.push_back(token);
            token.clear();
            token += c;
        }
    }

    if (token.size()) res.push_back(token);

    bool was = false;
    for (auto t : res) {
        if (was) cout << " ";
        else was = true;
        cout << t;
    }
    cout << endl;

    return 0;
}