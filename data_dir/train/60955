

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <cstdio>

#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define int long long

using namespace std;

const int INF = 2e9;
const int MOD = 998244353;

struct FenvikTree{
	vector<int> t;
	int n;
	FenvikTree(int x) {
		n = x + 1;
		t.resize(n);
	}

	void update(int i, int delta) {
		i++;
		for (; i < n; i += (i & (-i))) {
			t[i] += delta;
		}
	}

	int get(int i) {
		int res = 0;
		i++;
		for (; i > 0; i -= (i & (-i))) {
			res += t[i];
		}
		return res;
	}

	void clear() {
		for (int i = 1; i < n; i++) {
			t[i] = 0;
		}
	}
};

void compress(vector<int> & a) {
	vector<int> b = a;
	sort(b.begin(), b.end());
	for (int & x : a) {
		x = int(lower_bound(b.begin(), b.end(), x) - b.begin());
	}
}

void solve() {
	int n;
	cin >> n;
	vector<int> a(n);
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}
	compress(a);
	FenvikTree tree(n);
	vector<int> dp(n);
	for (int i = n - 1; i >= 0; i--) {
		dp[i] = tree.get(a[i]);
		tree.update(a[i], 1);
	}
	int ans = 0;
	tree.clear();
	for (int i = n - 1; i >= 0; i--) {
		ans += tree.get(a[i]);
		tree.update(a[i], dp[i]);
	}
	cout << ans;
}
signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	solve();
}
