#include <iostream>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <algorithm>
#include <iomanip>
#include <cmath>
using namespace std;
typedef pair<int, int> pii;
typedef long long int ll;



struct segment_tree {
    int n;
    vector<int> t;

    int get(int v, int l, int r, int L, int R) {
        if (r < L || R < l)
            return 0;
        if (l >= L && r <= R)
            return t[v];
        return get(v * 2, l, (l + r) / 2, L, R) +
                get(v * 2 + 1, (l + r) / 2 + 1, r, L, R);
    }

    void set(int v, int l, int r, int pos, int val) {
        if (l == r) {
            t[v] = val;
        } else {
            if (pos <= (l + r) / 2)
                set(v * 2, l, (l + r) / 2, pos, val);
            else
                set(v * 2 + 1, (l + r) / 2 + 1, r, pos, val);
            t[v] = t[v * 2] + t[v * 2 + 1];
        }
    }

    void init(int n) {
        this->n = n;
        t.resize(4 * n);
    }

    void set(int pos, int val) {
        set(1, 0, n - 1, pos, val);
    }

    int get(int l, int r) {
        return get(1, 0, n - 1, l, r);
    }
} t;

vector <int> forcomp, forcomp2;

bool comp1(pair<double, int> a, pair<double, int> b) {
    if (a.first == b.first)
        return forcomp2[a.second] > forcomp2[b.second];
    return a.first < b.first;
}

bool comp2(pair<double, int> a, pair<double, int> b) {
    if (a.first == b.first)
        return forcomp[a.second] > forcomp[b.second];
    return a.first < b.first;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n, w;
    cin >> n >> w;
    vector<double> xs(n), vs(n);
    for (int i = 0; i < n; i++)
        cin >> xs[i] >> vs[i];

    vector<pair<double, int>> sorted(n);
    for (int i = 0; i < n; i++) {
        double min_t = (-xs[i]) / (vs[i] - w);
        sorted[i] = { min_t, i };
    }
    forcomp.resize(n);
    forcomp2.resize(n);
    sort(sorted.begin(), sorted.end(), comp1);

    vector<int> nums(n);
    for (int i = 0; i < n; i++)
        nums[i] = sorted[i].second;

    vector<pair<double, int>> sorted2(n);
    for (int i = 0; i < n; i++) {
        double max_t = (-xs[i]) / (vs[i] + w);
        sorted2[i] = { max_t, i };

        forcomp[sorted[i].second] = i;
    }
    sort(sorted2.begin(), sorted2.end(), comp2);

    for (int i = 0; i < n; ++i)
        forcomp2[sorted2[i].second] = i;
    sort(sorted.begin(), sorted.end(), comp1);

    for (int i = 0; i < n; i++)
        forcomp[sorted[i].second] = i;
    sort(sorted2.begin(), sorted2.end(), comp2);

    vector <int> kek(n), kek2(n);
    for (int i = 0; i < n; ++i)
        kek[sorted[i].second] = i;
    for (int i = 0; i < n; ++i)
        kek2[i] = kek[sorted2[i].second];

    ll ans = 0;
    t.init(n);
    for (int i = 0; i < n; i++) {
        ans += t.get(kek2[i], n - 1);
        t.set(kek2[i], 1);
    }
    cout << ans << endl;
}
