#include <bits/stdc++.h>

using namespace std;
const int N = 5003, M = 503;
int d, s;
int mve[N][M];
pair<int, int> parent[N][M];
bool vis[N][M];

bool bfs() {
    queue<pair<int, int>> q;
    q.push({0, 0});
    vis[0][0] = true;
    while (q.size()) {
        int sum = q.front().first;
        int rem = q.front().second;
        q.pop();
        if (sum == s && rem == 0)
            return true;
        for (int dig = 0 + (sum == 0); dig <= 9; ++dig) {
            if (sum + dig < N && !vis[sum + dig][(rem * 10 + dig) % d]++) {
                q.push({sum + dig, (rem * 10 + dig) % d});
                parent[sum + dig][(rem * 10 + dig) % d] = make_pair(sum, rem);
                mve[sum + dig][(rem * 10 + dig) % d] = dig;
            }
        }
    }
    return false;
}


int main() {
//    freopen("in.txt", "rt", stdin);
    scanf("%d %d", &d, &s);
    if (bfs()) {
        string res;
        pair<int, int> cur = {s, 0};
        while (true) {
            if (cur == make_pair(0, 0))
                break;
            res += '0' + mve[cur.first][cur.second];
            cur = parent[cur.first][cur.second];
        }
        reverse(res.begin(), res.end());
        printf("%s\n", res.c_str());
    } else {
        puts("-1");
    }
}

