/*
author: orthodoxparadox
17-Sep-2018
19:14:47
*/

#include <bits/stdc++.h>
// #include <ext/pb_ds/detail/standard_policies.hpp>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
using namespace std;
// using namespace __gnu_pbds;

#define dbl long double
#define int ll
#define ll long long
#define pii pair<int, int>
#define fup(i, a, n) for (ll i = a; i < n; i++)
#define fnu for(ll i = 0; i < n; i++)
#define rev(s) reverse(all(s))
#define oiint ostream_iterator<int>(cout, " ") 
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define endl '\n'
#define all(a) a.begin(), a.end()
#define initialise(a, x) memset(a, x, sizeof(a))
#define onlyunique(v) v.erase(unique(all(v)), v.end()); //only for sorted vector
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize ("O3")
#pragma GCC optimize ("O2")
#pragma GCC optimize("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define _CRT_SECURE_NO_WARNINGS
#ifdef __APPLE__
#define dbg(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){cerr << name << " : " << arg1 << endl;}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');
	cerr.write(names, comma - names) << " : " << arg1 << "  ";
	__f(comma + 1, args...);}
#else
#define dbg(...)
#endif
// typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
int __gcd(int a, int b){return b ? __gcd(b, a%b) : a;}
// for unordered set of pairs
struct pair_hash {inline std::size_t operator()(const std::pair<int, int> & v) const {return v.first*31+v.second;}};
const int mod = 1e9 + 7;

vector<int> binarycut(int x){
	vector<int> v;
	while(x){
		if(x&1) v.pb(1); else v.pb(0);
		x>>=1;}
	reverse(all(v)); return v;}

int takemod(int a){return ((a%mod)+mod)%mod;}

int fast_exp(int base, int expo) {
	int res=1;
	while(expo>0) {
		if(expo&1) res=(res*base)%mod;
		base=(base*base)%mod;
		expo>>=1;}
	return res;}

int modinv(int a){return takemod(fast_exp(takemod(a), mod-2));}

// void siev(int n){
// 	sieve[0]=false; sieve[1]=false;
// 	for(int i=2; i<=sqrtl(n); i++)
// 		if(sieve[i])
// 			for(int j=i; i*j<=n; j++)
// 				sieve[i*j]=false;
// }

signed main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	#ifdef __APPLE__
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	freopen("error.txt", "w", stderr);
	#endif
	time_t t1, t2;
	t1 = clock();

	int n;
	cin >> n;
	int price[8];
	initialise(price, -1);
	price[0] = 0;
	for (int i = 0; i < n; ++i)
	{
		int p;
		string s;
		cin >> p >> s;
		sort(all(s));
		for (int j = 0; j <= 7; ++j)
		{	
			if(price[j] == -1) continue;
			// cout << j << endl;
			int x = 0;
			for(int k = 0; k < s.size(); k++)
			{
				if(s[k] == 'A')
				{
					x |= 1;
				}
				if(s[k] == 'B')
				{
					x |= 2;
				}
				if(s[k] == 'C')
				{
					x |= 4;
				}
			}
			price[j | x] = (price[j | x] == -1 ? price[j] + p : min(price[j | x], price[j] + p));
		}
	}
	cout << price[7];
	t2 = clock(); cerr << "time taken: " << t2-t1;
	return 0;
}