#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <iterator>
#include <cmath>

using namespace std;

int n;

char s[5010];
int minK;
char newS[10022];

bool cutTwo()
{
	int l, r;
	l = 0, r = n - 1;
	
	while (l < r)
	{
		if (s[l] != s[0])
			return true;	//ֻҪ��ͬ����һ����ת���ǵ�ԭʼ�����ǻ��ĵ� 
		
		l++;
		r--;
	}
	
	return false;
}

bool isPali(char s[], int l, int r)
{
	while (l < r)
	{
		if (s[l] != s[r])
			return false;
		l++;
		r--;
	}
	
	return true;
}

bool isEqual(char sa[], int psa, char sb[], int psb, int len)
{
	for (int i = 0 ; i < len ; i++)
	{
		if (sa[psa] != sb[psb])
			return false;
		
		psa++;
		psb++;
	}
	
	return true;
}

bool cutOne()
{
	for (int i = 0 ; i < n ; i++)
		newS[i] = s[i];
	for (int i = n ; i < n * 2 ; i++)
		newS[i] = s[i - n];
		
	//0123 4567
	//ABBA ABBA
	for (int i = 1 ; i < n ; i++)
	{
		if (isPali(newS, i, i + n - 1) == false)
			continue;
			
		if (isEqual(newS, i, s, 0, n) == false)
			return true;
	}
	
	return false;
}

int main()
{
	scanf("%s", s);
	n = strlen(s);
	
	minK = -1;
	if (cutTwo() == true)
		minK = 2;
		
	if (cutOne() == true)
		minK = 1;
	
	if (minK == -1)
	{
		printf("Impossible\n");
		return 0;
	}

	printf("%d\n", minK);
	
	return 0;
}


