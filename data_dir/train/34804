#include<bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 100;
int n, d, m, p[maxn], dp_down[maxn], dp_up[maxn];
bool eas[maxn];
vector<int> vc[maxn];

int dfs_down(int v, int p){
    int &res = dp_down[v];
    
    for(int u: vc[v])
	if(u != p)
	    res = max(res, dfs_down(u, v) + 1);
    if(eas[v])
	res = max(res, 0);
    return res;
}

void insert(int val, int &first, int &second){
    if(val > first)
	second = first, first = val;
    else
	second = max(second, val);
}

int get(int val, int first, int second){
    if(val == first)
	return second;
    return first;
}

void dfs_up(int v, int p){
    int res = dp_up[v] + 1;
    int first = -1e9, second = -1e9;
    if(eas[v])
	insert(-1, first, second);
    for(int u: vc[v])
	if(u != p)
	    insert(dp_down[u], first, second);
    
    for(int u: vc[v])
	if(u != p){
	    dp_up[u] = max(res, get(dp_down[u], first, second) + 2);
	    dfs_up(u, v);
	}
}

int main(){
    cin >> n >> m >> d;
    fill(dp_down, dp_down + n, -1e9);
    dp_up[0] = -n;
    
    for (int i = 0; i < m; i++)
	cin >> p[i], p[i]--, eas[p[i]] = true;
    for (int u, v, i = 1; i < n; i++)
	cin >> u >> v,
	    u--, v--,
	    vc[u].push_back(v),
	    vc[v].push_back(u);
    dfs_down(0, -1);
    dfs_up(0, -1);

    int ans = 0;
    for (int i = 0; i < n; i++)
	if(max(dp_down[i], dp_up[i]) <= d)
	    ans++;
    cout << ans << endl;
}
