#include<bits/stdc++.h>
using namespace std;

const int N = 300300;

int n, m, u, v, dis[N], par[N], tin[N], low[N], T, root;
vector<int> edges[N], tree[N];
vector<pair<int, int>> bridges;

int findSet(int u) {
	return (par[u] == u ? u : par[u] = findSet(par[u]));
}

void unionSets(int u, int v) {
	par[findSet(u)] = findSet(v);
}

void dfs(int u = 1, int p = -1) {
	tin[u] = low[u] = ++T;

	for (auto v : edges[u]) {
		if (tin[v] == 0) {
			dfs(v, u);

			low[u] = min(low[u], low[v]);

			if (low[v] > tin[u]) {
				bridges.push_back({ u, v });
			} else {
				unionSets(u, v);
			}
		}
		else if (p != v) {
			low[u] = min(low[u], tin[v]);
		}
	}
}

void buildBridgeTree() {
	for (int i = 1; i <= n; ++i) {
		par[i] = i;
	}

	dfs();

	for (auto& b : bridges) {
		u = findSet(b.first);
		v = findSet(b.second);
		
		tree[u].push_back(v);
		tree[v].push_back(u);

		root = u;
	}
}

int bfs(int u) {
	queue<int> q;
	q.push(u);

	memset(dis, 0x3F, sizeof(dis));
	dis[u] = 0;

	while (!q.empty()) {
		u = q.front();
		q.pop();

		for (auto v : tree[u]) {
			if (dis[v] > dis[u] + 1) {
				dis[v] = dis[u] + 1;
				q.push(v);
			}
		}
	}

	return u;
}

int calcTreeDiameter() {
	u = bfs(root);
	v = bfs(u);
	return dis[v];
}

int main() {
	cin >> n >> m;
	while (m--) {
		scanf("%d %d", &u, &v);
		edges[u].push_back(v);
		edges[v].push_back(u);
	}
	buildBridgeTree();
	cout << calcTreeDiameter();
	return 0;
}