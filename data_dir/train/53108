/* ****revpro**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl       '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii        map<ll,ll>
using namespace std;

#define N  100005
ll n,m,cnt=0;
vi a[N],in(N,0),order;
vi nextnode;
vi eq[N];
ll dp[N];
ll z=1;
vi adj[N];
set <ll> nodes;
void topsort()
{
    for(auto i:nodes)
        if(!in[i])
            nextnode.pb(i) , dp[i]=1; 
    while(!nextnode.empty())
    {
        ll cur=nextnode.back();
        nextnode.pop_back();
        order.pb(cur);
        cnt++;
        for(auto i:adj[cur])
        {
            in[i]--;
            dp[i]=max(dp[i],dp[cur]+1);
            if(!in[i])
                nextnode.pb(i);
        }
    }
    if(cnt!=sz(nodes)) z=0;
}
vi link(N),size(N,1);
ll find(ll x)
{
    while(x!=link[x]) x=link[x];
    return x;
}
bool same(ll i,ll j)
    {return find(i)==find(j);}
void unite(ll a,ll b)
{
    a=find(a);
    b=find(b);
    if(size[a]<size[b]) swap(a,b);
    size[a]+=size[b];
    link[b]=a;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int TESTS=1;
//    cin>>TESTS;
    while(TESTS--)
    {
        rep(i,0,N) link[i]=i;
        cin>>n>>m;
        rep(i,0,n)
        {
            rep(j,0,m)
            {
                char s;
                cin>>s;
                if(s=='>')
                    a[j+n+1].pb(i+1);
                else if(s=='<')
                    a[i+1].pb(j+1+n);
                else if(!same(i+1,j+1+n)) unite(i+1,j+1+n);
            }
        }

        rep(i,1,n+1+m){
            if(link[i]==i){
                nodes.insert(i);
                rep(j,1,n+m+1){
                    if(find(j)==i){
                        for(auto k:a[j])
                            adj[i].pb(find(k)) , in[find(k)]++;
                    }
                }
            }
        }
        topsort();
        if(z==0){
            cout<<"No";
            return 0;
        }
        cout<<"Yes\n";
        rep(i,1,n+1) cout<<dp[find(i)]<<' ';
        cout<<endl;
        rep(i,n+1,n+1+m) cout<<dp[find(i)]<<' '; 
    }
    return 0;
}