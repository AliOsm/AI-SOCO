#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef pair<int,int> pii;
typedef pair<double, double> pdd;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;

//#define PB push_back
#define PB emplace_back
#define F first
#define S second
#define MP make_pair
#define endl '\n'

const double PI = acos(-1);
const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD1 1000000007
#define MOD2 1000000009
//#define harmonic(n) 0.57721566490153286l+log(n)

#define mem(a,b) memset(a, b, sizeof(a) )
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*(b/gcd(a,b)))
#define sqr(a) ((a) * (a))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

typedef vector<int>::iterator vit;
typedef set<int>::iterator sit;

inline bool checkBit(ll n, int i) { return n&(1LL<<i); }
inline ll setBit(ll n, int i) { return n|(1LL<<i);; }
inline ll resetBit(ll n, int i) { return n&(~(1LL<<i)); }

int dx[] = {0, 0, +1, -1};
int dy[] = {+1, -1, 0, 0};
//int dx[] = {+1, 0, -1, 0, +1, +1, -1, -1};
//int dy[] = {0, +1, 0, -1, +1, -1, +1, -1};

/*
inline bool EQ(double a, double b) { return fabs(a-b) < 1e-9; }
inline bool isLeapYear(ll year) { return (year%400==0) || (year%4==0 && year%100!=0); }
inline void normal(ll &a) { a %= MOD; (a < 0) && (a += MOD); }
inline ll modMul(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a*b)%MOD; }
inline ll modAdd(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); return (a+b)%MOD; }
inline ll modSub(ll a, ll b) { a %= MOD, b %= MOD; normal(a), normal(b); a -= b; normal(a); return a; }
inline ll modPow(ll b, ll p) { ll r = 1; while(p) { if(p&1) r = modMul(r, b); b = modMul(b, b); p >>= 1; } return r; }
inline ll modInverse(ll a) { return modPow(a, MOD-2); }
inline ll modDiv(ll a, ll b) { return modMul(a, modInverse(b)); }

/*
bool seive[1010000];
vi prime;

void seiveGen(int limit) {
    limit += 100;
    int sqrtn = sqrt(limit);
    for(int i = 3; i <= sqrtn; i += 2) {
            if(!seive[i>>1]) {
                    for(int j = i * i; j < limit; j += i + i) {
                            seive[j>>1] = 1;
                    }
            }
    }
    prime.PB(2);
    for(int i = 3; i < limit; i += 2) {
            if(!seive[i>>1]) prime.PB(i);
    }
}
*/

//
//debug
template < typename F, typename S >
ostream& operator << ( ostream& os, const pair< F, S > & p ) {
            return os << "(" << p.first << ", " << p.second << ")";
}

template < typename T >
ostream &operator << ( ostream & os, const vector< T > &v ) {
            os << "{";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "}";
}

template < typename T >
ostream &operator << ( ostream & os, const set< T > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "]";
}

template < typename T >
ostream &operator << ( ostream & os, const multiset< T > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "]";
}

template < typename F, typename S >
ostream &operator << ( ostream & os, const map< F, S > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << it -> first << " = " << it -> second ;
                                            }
                    return os << "]";
}

#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)

clock_t tStart = clock();
#define timeStamp dbg("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)

void faltu () {
            cerr << endl;
}

template <typename T>
void faltu( T a[], int n ) {
            for(int i = 0; i < n; ++i) cerr << a[i] << ' ';
                cerr << endl;
}

template <typename T, typename ... hello>
void faltu( T arg, const hello &... rest) {
            cerr << arg << ' ';
                faltu(rest...);
}
//#else
//#define dbg(args...)

const int mx = 1e6+5;
string s;
ll hs1[mx], hs2[mx];
vi v;
ll po1[mx], po2[mx];

bool func( int key, int n, ll p1, ll p2 )
{
    //dbg(p1, p2);
    for( int i = 2, j = key+1; j < n; ++i, ++j ) {
        ll temp1 = (((hs1[j]-hs1[i-1]+MOD1)%MOD1) * po1[n-i+1]) % MOD1;
        ll temp2 = (((hs2[j]-hs2[i-1]+MOD2)%MOD2) * po2[n-i+1]) % MOD2;
        //dbg(temp1, temp2, i);
        if( temp1 == p1 && temp2 == p2 ) return 1;
    }
    return 0;
}

int main()
{
    optimize();
    po1[0] = po2[0] = 1;
    for( int i = 1; i < mx; ++i ) {
        po1[i] = po1[i-1]*137LL;
        po2[i] = po2[i-1]*137LL;
        po1[i] %= MOD1;
        po2[i] %= MOD2;
    }
    cin >> s;
    int n = s.length();
    for( int i = 0; i < n; ++i ) {
        hs1[i+1] = hs1[i] + (s[i] - 'a' + 1) * po1[i];
        hs2[i+1] = hs2[i] + (s[i] - 'a' + 1) * po2[i];
        hs1[i+1] %= MOD1;
        hs2[i+1] %= MOD2;
    }
    for( int i = 1, j = n-1; i < n; ++i, --j ) {
        if( (((hs1[i]*(po1[j]))%MOD1) == ((hs1[n] - hs1[j] + MOD1)%MOD1)) && (((hs2[i]*(po2[j])%MOD2)) == ((hs2[n] - hs2[j] + MOD2)%MOD2)) ) v.PB(i);
        //dbg( ((hs1[i]*(po1[j]))%MOD1), ((hs1[n] - hs1[j] + MOD1)%MOD1) );
    }
    //dbg(v);
    int lo = 0, hi = v.size()-1, mid;
    while( lo <= hi ) {
        mid = (lo + hi)/2;
        //dbg(n-v[mid]);
        if( func(v[mid], n, ((((hs1[n]-hs1[n-v[mid]]+MOD1)%MOD1)*po1[v[mid]])%MOD1), ((((hs2[n]-hs2[n-v[mid]]+MOD2)%MOD2)*po2[v[mid]])%MOD2))) lo = mid+1;
        else hi = mid-1;
        //dbg(lo, hi);
    }
    if( hi == -1 ) {
        cout << "Just a legend";
        return 0;
    }
    string ans = "";
    for( int i = 0; i < v[hi]; ++i ) {
        ans += s[i];
    }
    cout << ans;
}



























