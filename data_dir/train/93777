/*
ID: hepic
PROG: sabotage
LANG: C++11
*/
#include <bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i<=b; ++i)
#define REP(i, a, b) for(auto i=a; i<b; ++i)
#define FORI(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REPI(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define PI acos(-1)
#define open_read1 freopen("a.txt", "r", stdin)
#define open_write1 freopen("b.xt", "w", stdout)
#define open_read freopen("sort.in", "r", stdin)
#define open_write freopen("sort.out", "w", stdout)

using namespace std;

typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair<double, double> PDD;
typedef pair<int, int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<ULL, ULL> PUU;
typedef pair<LL, PLL> PLPLL;
typedef pair<PLL, PLL> PPLLPLL;
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    out << "(" << obj.first << ", " << obj.second << ")";
    return out;
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, multiset<T> cont)
{
    typename multiset<T>::const_iterator itr = cont.begin();
    typename multiset<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N])
{
     REP(i, 0, N)
        out<<arr[i]<<" ";
    out<<endl;

    return out;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}


template<typename T>
T fast_exp_pow(T base, T exp, T mod)
{
    T res = 1;

    while(exp)
    {
        if(exp&1)
        {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;

    }

    return res % mod;
}

/*#################################################################################################################
#################################################################################################################
################################################################################################################
#################################################################################################################*/

#define SIZE 100010

int N, M, Q, choice;
int parent[SIZE], Rank[SIZE], opposite[SIZE];
string wrd1, wrd2;
unordered_map<string, int> wordId;


int Find(int node) {
    return parent[node] = (parent[node] == node ? node : Find(parent[node]));
}

void Union(int node1, int node2) {
    if (Rank[node1] >= Rank[node2]) {
        parent[node2] = node1;
        Rank[node1] += Rank[node2];
    } else {
        parent[node1] = node2;
        Rank[node2] += Rank[node1];
    }
}


int main() {
    scanf("%d%d%d", &N, &M, &Q);
    
    REP (i, 0, N) {
        cin >> wrd1;
        wordId[wrd1] = i;

        parent[i] = i;
        Rank[i] = 1;
        opposite[i] = -1;
    }
    
    REP (i, 0, M) {
        scanf("%d", &choice);
        cin >> wrd1 >> wrd2; 
        
        int par1 = Find(wordId[wrd1]);
        int par2 = Find(wordId[wrd2]);

        if (choice == 1) {
            if (par1 != par2) {
                if (opposite[par1] == par2) {
                    printf("NO\n");
                    continue;
                } else {
                    Union(par1, par2);
                 
                    int op1 = opposite[par1];
                    int op2 = opposite[par2];
                    
                    if (op1 != -1 && op2 != -1) {
                        Union(op1, op2);
    
                        opposite[Find(par1)] = Find(op1);
                        opposite[Find(op1)] = Find(par1);
                    } else if (op1 != -1) {
                        opposite[Find(par1)] = Find(op1);
                        opposite[Find(op1)] = Find(par1);
                    } else if (op2 != -1) {
                        opposite[Find(par1)] = Find(op2);
                        opposite[Find(op2)] = Find(par1);
                    }
                }
            }
        } else if (choice == 2) {
            if (par1 == par2) {
                printf("NO\n");
                continue;
            } else {
                int op1 = opposite[par1];
                int op2 = opposite[par2];
                
                if (op1 != -1) {
                    Union(par2, op1);
                }

                if (op2 != -1) {
                    Union(par1, op2);
                }
                
                opposite[Find(par2)] = Find(par1);
                opposite[Find(par1)] = Find(par2);
            }
        }

        printf("YES\n");
    }
    
    REP (i, 0, Q) {
        cin >> wrd1 >> wrd2;
        
        int par1 = Find(wordId[wrd1]);
        int par2 = Find(wordId[wrd2]);

        if (par1 == par2) {
            printf("1\n");
        } else if (opposite[par1] == par2) {
            printf("2\n");
        } else {
            printf("3\n");
        }
    }

    return 0;
}