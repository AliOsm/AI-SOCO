#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007LL
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 100

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<int, int> pii;

#define maxn 400005

vector <int> g[maxn] ;
int par[maxn] , sub[maxn] , lev[maxn] , lo[maxn] ;
int ssub[maxn] ;

void dfs(int u)
{
    ssub[u] = 0 ;
    sub[u] = 1 ;

    for(int v: g[u])
    {
        if( lev[v] == -1 )
        {
            lev[v] = lev[u] + 1 ;
            lo[v] = lev[u] ;
            par[v] = u ;
            dfs(v) ;
            sub[u] += sub[v] ;
            if( lo[v] >= lev[u] ) ssub[u] += sub[v] ;
            lo[u] = min( lo[u] , lo[v] ) ;
        }
        else if( lev[v] < lev[u] ) lo[u] = min( lo[u] , lev[v] ) ;
    }
}

int main()
{
    int tc , t=1 ;

    scanf("%d",&tc) ;

    while( t++ <= tc )
    {
        int n , m ;
        int a , b ;

        scanf("%d %d %d %d",&n,&m,&a,&b) ;

        for(int i=1 ; i<=n ; i++)
        {
            g[i].clear() ;
            par[i] = 0 ; lo[i] = 0 ;
            lev[i] = -1 ;
        }

        for(int i=1 ; i<=m ; i++)
        {
            int u , v ;
            scanf("%d %d",&u,&v) ;
            g[u].pb(v) ; g[v].pb(u) ;
        }


        lev[a] = 0 ;
        dfs(a) ;

        int bPar = b ;

        while( lev[bPar] > 1 ) bPar = par[bPar] ;

        int sa = 0 , sb = ssub[b] ;
        for(int i=1 ; i<=n ; i++)
        {
            if( par[i] == a && i!=bPar ) sa += sub[i] ;
        }

        i64 ans = 1LL*sa*sb ;

        printf("%lld\n",ans) ;
    }

    return 0 ;
}
