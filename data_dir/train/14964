//ITNOG
#include<bits/stdc++.h>
 
using namespace std;
 
#define scan(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)
char _;

#define int long long 
#define rep(i, s, e) for(int i = s; i < e; i ++)
typedef double ld;

const int maxN = 10*1000 + 5;
const int maxM = 1000*1000 + 5;
const int mod = 1000*1000*1000 + 7;
const int base = 701;
const int maxL = 17;
typedef long long ll;
#define X first
#define Y second

int pp[maxN];
int a[maxN*10], c[10*maxN];
bool mark[maxN*10];

main()
{
    ios::sync_with_stdio(0); cin.tie(0); 
    int h, n, m, k; cin >> h >> n >> m >> k;
    memset(pp,63,sizeof pp); pp[0] = 0;    
    rep(i,0,n) cin >> a[i] >> c[i], a[i] --;

    set<pair<int,int> > s;
    rep(i,0,n) if(a[i] % k == 0) s.insert({c[i], -i});

    rep(_,0,m)
    {
	  int t; cin >> t;
	  if(t == 1)
	  {
		cin >> t; 
		set<pair<int,int> > act; 
		rep(i,0,k) act.insert({pp[i], i});
		while(act.size())
		{
		    auto it = *act.begin(); act.erase(it);
		    int v = it.Y, u = (v+t) % k;
		    if(pp[u] > pp[v] + t)
		    {
			  act.erase({pp[u], u});
			  pp[u] = pp[v] + t;
			  act.insert({pp[u], u});
		    }
		}

		s.clear();
		rep(i,0,n) if(mark[i] == 0 && pp[a[i] % k] <= a[i]) s.insert({c[i], -i});
		continue;
	  }

	  if(t == 2)
	  {
		int ps, y; cin >> ps >> y; ps --;
		if(pp[a[ps] % k] > a[ps]) { c[ps] -= y; continue; }
		s.erase({c[ps], -ps});
		c[ps] -= y;
		s.insert({c[ps], -ps});
		continue;
	  }

	  if(s.size() == 0) { cout << 0 << endl; continue; }

	  auto it = *s.rbegin(); s.erase(it);
	  cout << it.X << endl;
	  mark[-it.Y] = 1;
    }

    return 0;
}
