#include<bits/stdc++.h>
using namespace std;

int bits(int n) {
    int cnt = 0;
    while (n > 0) {
        ++cnt;
        n &= (n - 1);
    }
    return cnt;
}

const int MOD = 1e9 + 7;

int add(int a, int b) {
    a += b;
    if (a >= MOD) {
        a -= MOD;
    }
    return a;
}

const int N = 1010;

int ways[N][N];

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    string s;
    int k;
    cin >> s >> k;
    if (k == 0) {
        cout << "1\n";
        return 0;
    }
    if (s == "1") {
        cout << "0\n";
        return 0;
    }
    int n = s.size();
    if (k == 1) {
        cout << n - 1 << '\n';
        return 0;
    }
    vector<int> cost(n + 1);
    cost[1] = 0;
    for (int i = 2; i < n + 1; ++i) {
        cost[i] = cost[bits(i)] + 1;
    }
    ways[0][0] = 1;
    for (int i = 1; i < n + 1; ++i) {
        ways[i][0] = 1;
        ways[i][i] = 1;
        for (int j = 1; j < i; ++j) {
            ways[i][j] = add(ways[i - 1][j], ways[i - 1][j - 1]);
        }
    }
    int ans = 0;
    for (int b = 1; b < n + 1; ++b) {
        if (cost[b] == k - 1) {
            int cur = 0;
            for (int i = 0; i < n; ++i) {
                if (s[i] == '1') {
                    if (b - cur >= 0) {
                        ans = add(ans, ways[n - i - 1][b - cur]);
                    }
                    ++cur;
                }
            }
            if (cur == b) {
                ans = add(ans, 1);
            }
        }
    }
    cout << ans << '\n';
    return 0;
}
