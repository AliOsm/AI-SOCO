#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<map>
#include<utility>
#include<set>
#include<stack>
#include<list>
#include<deque>
#include<bitset>
#include<iomanip>
#include<cstring>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<climits>
#include<cmath>
#include<cctype>


#define pb push_back
#define mp make_pair
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define ren(i,a,b) for(int i=a;i>=b;i--)
#define ff first
#define ss second
#define pll pair<long long int,long long int>
#define pii pair<int,int>
#define vll vector<long long int>
#define vii vector<int>
#define gi(n) scanf("%d",&n)
#define gll(n) scanf("%lld",&n)
#define gstr(n) scanf("%s",n)
#define gl(n) cin >> n
#define oi(n) printf("%d",n)
#define oll(n) printf("%lld",n)
#define ostr(n) printf("%s",n)
#define ol(n) cout << n
#define os cout<<" "
#define on cout<<"\n"
#define o2(a,b) cout<<a<<" "<<b
#define all(n) n.begin(),n.end()
#define present(s,x) (s.find(x) != s.end())
#define cpresent(s,x) (find(all(s),x) != s.end())
#define tr(container, it) for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++)
using namespace std;

typedef unsigned long long int ull;
typedef long long int ll;
typedef long double ld;
typedef vector<vector<ll> > mat;

string s[2005];
ll n,m,r,c,x,y,dp[2005][2005];

bool valid(int i,int j)
{
	if(i<0||i>n-1)return false;
	if(j<0||j>m-1)return false;
	if(s[i][j]=='*')return false;
	return true;
}

int main()
{ios_base::sync_with_stdio(false);
cin>>n>>m>>r>>c>>x>>y;

rep(i,0,n-1)rep(j,0,m-1)dp[i][j]=1e13+7;

rep(i,0,n-1)cin>>s[i];

r--;c--;
dp[r][c]=0;

priority_queue<pair<int,pii> > q;

q.push(mp(0,mp(r,c)));

while(!q.empty())
{
	pair<int,pii> p=q.top();
	q.pop();
	int i=p.ss.ff,j=p.ss.ss;
	if(valid(i+1,j))
	{
		if(dp[i][j]<dp[i+1][j])
		{
			dp[i+1][j]=dp[i][j];
			q.push(mp(-dp[i][j],mp(i+1,j)));
		}
	}
	if(valid(i-1,j))
	{
		if(dp[i][j]<dp[i-1][j])
		{
			dp[i-1][j]=dp[i][j];
			q.push(mp(-dp[i][j],mp(i-1,j)));
		}
	}
	if(valid(i,j+1))
	{
		if(dp[i][j]<dp[i][j+1])
		{
			dp[i][j+1]=dp[i][j];
			q.push(mp(-dp[i][j],mp(i,j+1)));
		}
	}
	if(valid(i,j-1))
	{
		if(dp[i][j]+1<dp[i][j-1])
		{
			dp[i][j-1]=dp[i][j]+1;
			q.push(mp(-dp[i][j]-1,mp(i,j-1)));
		}
	}
}

int ans=0;

rep(i,0,n-1)
{
	rep(j,0,m-1)
	{
		//o2(i,j);os;ol(dp[i][j]);on;
		if(dp[i][j]<=x)
		{
			if(j>=c)
			{
				int right=dp[i][j]+j-c;
				if(right<=y)ans++;
			}
			else
			{
				int right=dp[i][j]-(c-j);
				if(right<=y)ans++;
			}
		}
	}
}
ol(ans);
return 0;
}


