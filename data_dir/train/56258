#include <cstdio>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;
const int C = 340;
int a[100010];
long long s[100010];
vector<long long> v;
map<long long, int> m;
long long g;
int f[100010], ba[100010], xt[100010];
void reg(int p, int dx, int end) {
	long long x = s[p];
	if (dx == -1) {
		f[x] += dx;
	}
	if (end == 0) {
		g += dx * f[xt[x]];
	} else {
		g += dx * f[ba[x]];
	}
	if (dx == 1) {
		f[x] += dx;
	}
}
struct S {
	int l, r, i;
} q[100010];
int myls(const S &x, const S &y) {
	return x.l / C != y.l / C ? x.l < y.l : x.r < y.r;
}
long long ans[100010];
int main() {
	int n, k;
	scanf("%d%d", &n, &k);
	for (int i = 0; i < n; i++) {
		int x;
		scanf("%d", &x);
		a[i] = x == 1 ? 1 : -1;
	}
	for (int i = 0; i < n; i++) {
		int x;
		scanf("%d", &x);
		a[i] *= x;
	}
	for (int i = 0; i < n; i++) {
		s[i+1] = s[i] + a[i];
	}
	v = vector<long long>(s, s + n + 1);
	sort(v.begin(), v.end());
	v.resize(unique(v.begin(), v.end()) - v.begin());
	for (int i = 0; i < v.size(); i++) {
		m[v[i]] = i;
	}
	for (int i = 0; i < v.size(); i++) {
		if (m.count(v[i] + k)) {
			xt[i] = m[v[i] + k];
		} else {
			xt[i] = n + 2;
		}
		if (m.count(v[i] - k)) {
			ba[i] = m[v[i] - k];
		} else {
			ba[i] = n + 2;
		}
	}
	for (int i = 0; i <= n; i++) {
		s[i] = m[s[i]];
	}
	int Q;
	scanf("%d", &Q);
	for (int i = 0; i < Q; i++) {
		int l, r;
		scanf("%d%d", &l, &r);
		--l; ++r;
		q[i] = (S){l, r, i};
	}
	sort(q, q + Q, myls);
	int L = 0, R = 1;
	f[m[0]] = 1;
	for (int i = 0; i < Q; i++) {
		int l = q[i].l, r = q[i].r, idx = q[i].i;
		while (L > l) reg(--L, 1, 0);
		while (R < r) reg(R++, 1, 1);
		while (L < l) reg(L++, -1, 0);
		while (R > r) reg(--R, -1, 1);
		ans[idx] = g;
	}
	for (int i = 0; i < Q; i++) {
		printf("%I64d\n", ans[i]);
	}
	return 0;
}
