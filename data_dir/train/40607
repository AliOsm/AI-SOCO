#include <iostream>
#include <cstdio>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;
const int N = 100000;

int tr[N], r[N], c[N], pr[N], n, k;
pair<int, pair<int, int> > p[N];

pair<int, pair<int, int> > find(int ll, int  rr) {
    pair<int, pair<int, int> > ans = {(int)1e9, {(int)1e9, (int)1e9}};
    for(int i = 0; i < k; i++) {
//        cout << ll << " " << rr << " " << r[i] << "\n";
        if(ll <= r[i] && r[i] <= rr)
            ans = min(ans, make_pair(tr[i], make_pair(r[i], i)));
    }
    return ans;
}

int main() {
    ios::sync_with_stdio(false);

    int n;
    cin >> n;

    for(int i = 0; i < n; i++) {
        cin >> p[i].second.first >> p[i].first;
        p[i].second.second = i;
    }
    sort(p, p + n);
    reverse(p, p + n);

    cin >> k;
    for(int i = 0; i < k; i++) {
        cin >> r[i];
    }

    for(int i = 0; i < n; i++) {
        pair<int, pair<int, int> > temp = find(p[i].second.first, 1000);
//        cout << temp.first << "\n";
        if(temp.first < p[i].first) {
            tr[temp.second.second] = p[i].first;
            pr[temp.second.second] = p[i].second.second;
//            cout << temp.second << " " << c[i] << "\n";
        }
    }

    vector<pair<int, int> > ans;
    int sum = 0;

    for(int i = 0; i < k; i++) {
        if(tr[i] > 0) {
            ans.push_back(make_pair(pr[i] + 1, i + 1));
            sum += tr[i];
        }
    }

    cout << ans.size() << " " << sum << "\n";
    for(int i = 0; i < ans.size(); i++) {
        cout << ans[i].first << " " << ans[i].second << "\n";
    }

    return 0;
}
