#include <bits/stdc++.h>
using namespace std;
#define mid (l+r)/2
#define L (x<<1)
#define R (L+1)
int a[1000000];
int mx[1000000];
long long tree[1000000];
void build(int x,int l,int r)
{
    if (l==r){
        tree[x]=mx[x]=a[l];
    } else {
        build(L,l,mid);
        build(R,mid+1,r);
        tree[x]=tree[L]+tree[R];
        mx[x]=max(mx[L],mx[R]);
    }
}
void upd(int x,int l,int r,int s,int e,int md)
{
    if (s>r || e<l)return;
    if (l==r){
        tree[x]%=md;
        mx[x]%=md;
    } else {
        if (mx[L]>=md)upd(L,l,mid,s,e,md);
        if (mx[R]>=md)upd(R,mid+1,r,s,e,md);
        tree[x]=tree[L]+tree[R];
        mx[x]=max(mx[L],mx[R]);
    }
}
void change(int x,int l,int r,int id,int val)
{
    if (id>r || id<l)return;
    if (l==r){
        tree[x]=mx[x]=val;
    } else {
        if (id<=mid)change(L,l,mid,id,val);
        else change(R,mid+1,r,id,val);
        tree[x]=tree[L]+tree[R];
        mx[x]=max(mx[L],mx[R]);
    }
}
long long query(int x,int l,int r,int s,int e)
{
    if (l>e || r<s)return 0;
    if (l>=s && r<=e)return tree[x];
    return query(L,l,mid,s,e)+query(R,mid+1,r,s,e);
}
int main()
{
    int n,q;
    scanf("%d%d",&n,&q);
    for (int i=1;i<=n;i++)
        scanf("%d",a+i);
    build(1,1,n);
    while(q--)
    {
        int t;
        scanf("%d",&t);
        if (t==1) {
            int l,r;
            scanf("%d%d",&l,&r);
            printf("%lld\n",query(1,1,n,l,r));
        } else if (t==2) {
            int l,r,md;
            scanf("%d%d%d",&l,&r,&md);
            upd(1,1,n,l,r,md);
        } else {
            int k,x;
            scanf("%d%d",&k,&x);
            change(1,1,n,k,x);
        }
    }
}
