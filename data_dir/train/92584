#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, a[200200];
vector<int> x, cnt;
int sz;
pii t[4 * 200200];

void build(int v, int tl, int tr) {
    if (tl == tr) t[v] = mp(cnt[tl], -tl);
    else {
        int mid = (tl + tr) >> 1;
        build(2 * v, tl, mid);
        build(2 * v + 1, mid + 1, tr);
        t[v] = max(t[2 * v], t[2 * v + 1]);
    }
}

pii get_max(int v, int tl, int tr, int l, int r) {
    if (l > tr || r < tl) return mp(-inf, -inf);
    if (l <= tl && tr <= r) return t[v];
    int mid = (tl + tr) >> 1;
    pii ans1 = get_max(2 * v, tl, mid, l, r);
    pii ans2 = get_max(2 * v + 1, mid + 1, tr, l, r);
    return max(ans1, ans2);
}

void update(int v, int tl, int tr, int type, int pos, int val) {
    if (tl == tr) {
        if (type == 1) t[v] = mp(val, -tl);
        else t[v] = mp(t[v].f + val, t[v].s);
    } else {
        int mid = (tl + tr) >> 1;
        if (pos <= mid) update(2 * v, tl, mid, type, pos, val);
        else update(2 * v + 1, mid + 1, tr, type, pos, val);
        t[v] = max(t[2 * v], t[2 * v + 1]);
    }
}

pii get_first(int v, int tl, int tr, int l, int r) {
    pii p = get_max(v, tl, tr, l, r);
    if (p.f == -inf) return p;
    if (tl == tr) return p;
    int mid = (tl + tr) >> 1;
    pii ans1 = get_max(2 * v, tl, mid, l, r);
    pii ans2 = get_max(2 * v + 1, mid + 1, tr, l, r);
    if (ans1.f != -inf) return get_first(2 * v, tl, mid, l, r);
    return get_first(2 * v + 1, mid + 1, tr, l, r);
}

pii get_last(int v, int tl, int tr, int l, int r) {
    pii p = get_max(v, tl, tr, l, r);
    if (p.f == -inf) return p;
    if (tl == tr) return p;
    int mid = (tl + tr) >> 1;
    pii ans1 = get_max(2 * v, tl, mid, l, r);
    pii ans2 = get_max(2 * v + 1, mid + 1, tr, l, r);
    if (ans2.f == -inf) return get_last(2 * v, tl, mid, l, r);
    return get_last(2 * v + 1, mid + 1, tr, l, r);
}

int main(){

    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        scanf("%d", a + i);
        if (x.empty()) {
            x.pb(a[i]);
            cnt.pb(1);
        } else if (x.back() == a[i]) cnt[sz(cnt) - 1]++;
        else {
            x.pb(a[i]);
            cnt.pb(1);
        }
    }

    sz = x.size();

    build(1, 0, sz - 1);

    int ans = 0;
    while (true) {
        pii p = get_max(1, 0, sz - 1, 0, sz - 1);
        if (p.f == -inf) break;
        ans++;
        int ind = -p.s;
        update(1, 0, sz - 1, 1, ind, -inf);
        x[ind] = -inf;
        cnt[ind] = -inf;
        pii A = get_last(1, 0, sz - 1, 0, ind - 1);
        pii B = get_first(1, 0, sz - 1, ind + 1, sz - 1);
        if (A.f != -inf && B.f != -inf && x[-A.s] == x[-B.s]) {
            update(1, 0, sz - 1, 2, -A.s, B.f);
            cnt[-A.s] += B.f;
            update(1, 0, sz - 1, 1, -B.s, -inf);
            cnt[-B.s] = -inf;
            x[-B.s] = -inf;
        }
    }

    printf("%d\n", ans);

    return 0;
}
