#include <bits/stdc++.h>

using namespace std;

#ifdef NeverBeRed
#include "debug.h"
#else
#define debug(...) 9715
#endif
typedef long long ll;
typedef long double ld;
typedef complex<ld> point;
#define F first
#define S second

template<typename T, typename U>
T pow_mod(T a, U b, int mod)
{
	T r = 1;
	for (; b > 0; b >>= 1)
	{
		if (b & 1) r = (ll)r * a % mod;
		a = (ll)a * a % mod;
	}
	return r;
}

int main()
{
	#ifdef TurnRed
		//freopen("a.in", "r", stdin);
		//freopen("a.out", "w", stdout);
	#endif

	ios_base::sync_with_stdio(0), cin.tie(0);

	const int mod = 998244353, N = 100;
	vector<int> fac(N), ifac(N);
	fac[0] = ifac[0] = 1;
	for (int i = 1; i < N; ++i)
	{
		fac[i] = (ll)fac[i-1] * i % mod;
		ifac[i] = pow_mod(fac[i], mod-2, mod);
	}

	ll d;
	cin >> d;

	vector<ll> p;
	for (ll i = 2; i*i <= d; ++i)
		if (d % i == 0)
		{
			p.push_back(i);
			while (d % i == 0)
				d /= i;
		}
	if (d > 1)
		p.push_back(d);

	int q;
	cin >> q;
	for (ll x, y; q--; )
	{
		cin >> x >> y;

		vector<int> mp(p.size());
		for (int i = p.size()-1; i >= 0; --i)
			if (x % p[i] == 0)
			{
				while (x % p[i] == 0)
					x /= p[i], ++mp[i];
			}
		for (int i = p.size()-1; i >= 0; --i)
			if (y % p[i] == 0)
			{
				while (y % p[i] == 0)
					y /= p[i], --mp[i];
			}
		int cnt = 1, sum = 0;
		for (auto i : mp)
			if (i >= 0)
			{
				sum += abs(i);
				cnt = (ll)cnt * ifac[abs(i)] % mod;
			}
		int ans = (ll)fac[sum] * cnt % mod;
		cnt = 1, sum = 0;
		for (auto i : mp)
			if (i < 0)
			{
				sum += abs(i);
				cnt = (ll)cnt * ifac[abs(i)] % mod;
			}
		ans = (ll)ans * fac[sum] % mod * cnt % mod;
		cout << ans << "\n";
	}

	return 0;
}
