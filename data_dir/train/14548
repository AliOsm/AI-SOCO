#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;
const int N = 1000228;

long long dp[N], c[N], v[N];

int main() {
    ios::sync_with_stdio(false);

    int n, k;
    long long s, t;

    cin >> n >> k >> s >> t;

    for(int i = 0; i < n; i++) {
        cin >> c[i] >> v[i];
    }

    vector<long long> g;

    for(int i = 0; i < k; i++) {
        long long x;
        cin >> x;

        g.push_back(x);
    }

    g.push_back(0);
    g.push_back(s);
    sort(g.begin(), g.end());

    vector<long long> need;

    for(int i = 1; i < g.size(); i++) {
        need.push_back((g[i] - g[i - 1]));
    }

    sort(need.begin(), need.end());

    for(int i = 0; i < need.size(); i++) {
        dp[i] = (i ? dp[i - 1] : 0LL) + need[i];
    }
//    cout << "\n";
//
//    cout << "back " << need.back() << "\n";

    long long ans = (long long)1e18;
    for(int i = 0; i < n; i++) {
        if(need.back() > v[i])
            continue;

        long long time = 2LL * s;

        int l = -1;
        int r = need.size() - 1;
        while(l < r) {
            int c = (l + r + 1) / 2;
            if(v[i] - need[c] >= need[c]) {
                l = c;
            } else {
                r = c - 1;
            }
        }
//        cout << l << "\n";
//        cout << (v[i] - need[l] >= need[l]) << "\n";

        if(l >= 0) {
            time -= dp[l];
        }

        time += dp[need.size() - 1] - (l >= 0 ? dp[l] : 0);
        time -= v[i] * (need.size() - 1 - l);

//        cout << i << " " << time << '\n';
//        cout << "\n";
        if(time <= t)
            ans = min(ans, c[i]);
    }
    if(ans == (long long)1e18)
        cout << "-1\n";
    else
        cout << ans << "\n";


    return 0;
}
