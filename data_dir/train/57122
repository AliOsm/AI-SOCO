#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pii pair<int,int>
#define pll pair<ll,ll>
#define ff first
#define ss second
#define PI 2*acos(0.0)
#define all(a) a.begin(),a.end()
#define INF (1<<28)
#define mem(a,x) memset(a,x,sizeof(a))
#define SEGMENT_TREE left=2*node,right=left+1,mid=(b+e)/2
using namespace std;


/**------------------------------------BITMASK------------------------------------------**/
int Change(int N, int pos){return N= N^(1<<pos);}
bool Check(int N, int pos){return (bool)(N &(1<<pos));}
/**-----------------------------------------------------------------------------------------------**/

/**-----------------------------DIRECTION_ARRAY-------------------------**/
///------FOUR_DIRECTION---------///
//int fx[]={0,1,0,-1};
//int fy[]={1,0,-1,0};


///------EIGHT_DIRECTION---------///
//int fx[]={0,1,1,1,0,-1,-1,-1};
//int fy[]={1,1,0,-1,-1,-1,0,1};
/**--------------------------------------------------------------------------------------**/

//int gcd(int a, int b){return (a==0)? b: gcd(b%a,a);}
//int lcm(int a, int b){return (a/gcd(a,b))*b;}


/*****int exgcd(int A, int B, int *X, int *Y){


    int x2, y2, x1, y1, x, y, r, r1, r2, q;
    x2=1; y2=0;
    x1=0; y1=1;
    for(r2=A, r1=B; r1!=0 ; r2=r1, r1=r, x2=x1, y2=y1, x1=x, y1=y){

        q=r2/r1;
        r=r2%r1;
        x=x2-(x1*q);

        y=y2-(y1*q);
    }
    *X=x2;
    *Y=y2;
    return r2;

}******/




///-----------------------------START FROM HERE--------------------------------------//
pll arr[300005];

multiset<ll>st;
multiset<ll>:: iterator it;
int main(){

    int n, k;
    scanf("%d %d", &n, &k);

    for(int i=1;i<=n; i++)scanf("%lld %lld", &arr[i].ss, &arr[i].ff);

    sort(arr+1, arr+n+1);
    reverse(arr+1, arr+n+1);
    ll ans=0;
    ll p=0;
    for(int i=1; i<=n; i++){

        if(i==1){
            ans=arr[i].ss*arr[i].ff;
            st.insert(arr[i].ss);
            p=arr[i].ss;
        }else{
            it=st.begin();
            if(st.size()==k)p-=*it;
            p+=arr[i].ss;
            ll zz=(p*arr[i].ff);
            ans=max(zz, ans);
            if(st.size()==k)p+=*it;
            st.insert(arr[i].ss);
            if(st.size()>k){

                it=st.begin();
                ll pp=*it;
                st.erase(st.find(pp));
                p-=pp;

            }
        }


    }
    cout<<ans;

}
