#include <iostream>
#include <set>
#include <vector>
#include <algorithm>
using namespace std;

int n;
int a[4000];
int numsSize = 0;
int nums[4000];
int indexes[1000001];
vector<int> numsAppear[4000];
int dp[4000][4000];

int findNextOccurence(int num, int startIndex) {
	int lf = -1;
	int numIndex = indexes[num];
	int rg = numsAppear[numIndex].size();
	while (rg - lf > 1) {
		int md = (rg + lf) >> 1;
		int currIndex = numsAppear[numIndex][md];
		if (currIndex >= startIndex) {
			rg = md;
		}
		else {
			lf = md;
		}
	}
	if (rg == numsAppear[numIndex].size()) return -1;
	else return numsAppear[numIndex][rg];
}

int solve(int currIndex, int anotherIndex) {
	if (dp[currIndex][anotherIndex] != -1) return dp[currIndex][anotherIndex];
	int ans = 0;
	int nextIndex = findNextOccurence(a[anotherIndex], currIndex + 1);
	if (nextIndex == -1) return dp[currIndex][anotherIndex] = 1;
	else return dp[currIndex][anotherIndex] = solve(nextIndex, currIndex) + 1;
}

int main() {
	ios_base::sync_with_stdio(0);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	cin >> n;
	set<int> tmp;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
		if (tmp.count(a[i]) == 0) {
			tmp.insert(a[i]);
			nums[numsSize] = a[i];
			indexes[a[i]] = numsSize;
			numsSize++;
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			dp[i][j] = -1;
		}
	}
	
	for (int i = 0; i < n; i++) {
		numsAppear[indexes[a[i]]].push_back(i);
	}

	int ans = -1;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			ans = max(ans, solve(i, j));
		}
	}
	cout << ans;
	return 0;
}