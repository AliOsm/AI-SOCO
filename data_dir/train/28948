#include <bits/stdc++.h>
using namespace std;
#define SZ(v) int((v).size())
#define ALL(vec) begin(vec), end(vec)
typedef long long i64;
template<typename T> inline bool uax(T &x, T y) {return (y > x) ? x = y, true : false;}
template<typename T> inline bool uin(T &x, T y) {return (y < x) ? x = y, true : false;}
#ifdef Rahul
# define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
  stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#else
# define error(...) 42;
#endif
string to_string(char c) { return "'" + string(1, c) + "'";}
string to_string(string s) { return '"' + s + '"';}
string to_string(const char* s) { return to_string((string) s);}
template<typename A> string to_string(A);
template<typename A, typename B> string to_string(pair<A, B> p){
  return "(" + to_string(p.first) + ": " + to_string(p.second) + ")";}
template<typename A> string to_string(A v) {bool f = false; string r = "{"; 
  for (auto x: v) {if (f) r += ", "; r += to_string(x); f = true;} return r += "}";}
template<typename A> string to_string(vector<vector<A>> v) {string r; 
  for (auto x: v) r += "\n" + to_string(x); return r;}
int Nerr;
template<typename A> string to_string(A *p) {return to_string(vector<A>(p, p + Nerr));}
void err(istream_iterator<string>) { cerr << endl; }
template<typename T,typename... Args> void err(istream_iterator<string> it, T a, Args... args) {
  cerr << *it << " =: " << to_string(a) << "; "; err(++it, args...); }
template<typename T> void kek(T ans) {cout << ans << endl; exit(0);}
int const MOD = 1e9 + 7;
long long const INF = 1e18 + 42;
/***********************************************************************/
i64 calc(vector<int> &a) {
  i64 ans = 0;
  for (int i = 0; i < SZ(a); ++i) {
    ans += i ^ a[i];
  }
  return ans;
}
vector<int> solve(int n) {
  if (n == 0) return {};
  int pw = 1;
  while (pw * 2 <= n) pw *= 2;
  vector<int> a(pw);
  for (int i = 0; i < pw; ++i) {
    a[i] = pw - 1 - i;
    if (pw + a[i] < n) a[i] = pw + a[i];
  }
  auto b = solve(n ^ pw);
  for (int &x : b) a.push_back(x);
  return a;
}
int32_t main() {
  cin.tie(nullptr) -> sync_with_stdio(false);
 
  int n; cin >> n;
  auto a = solve(n + 1);
  cout << calc(a) << '\n';
  for (int &x : a) cout << x << ' ';
  cout << '\n';
}
