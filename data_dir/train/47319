#include <bits/stdc++.h>
#define F first
#define S second
#define all(a) a.begin(),a.end()
#define setDP(arr) memset(arr,-1,sizeof arr)
#define Clear(arr) memset(arr,0,sizeof arr)
#define oo 1000000000
#define inf 1000000000000000000
#define M  1000000007
#define M2 1000000009
#define pii pair<ll,ll>
using namespace std;
typedef long long ll;
const int N = 2e5+100;
const int SQRTN = 320;
const int LOGN = 20;
const double PI = acos(-1);
const double TAU = 2*PI;

int n ;
vector<int> g[N];
int firstnode,secondnode,mxdst,thirdnode;
vector<int> longestPathNodes;
bool vis[N];
void dfs1(int node , int prt = -1 , int dst = 0){
    if(dst>=mxdst){
        firstnode=node;
        mxdst=dst;
    }
    for(int i = 0 ; i < g[node].size() ; i++){
        if(g[node][i]==prt)continue;
        dfs1(g[node][i],node,dst+1);
    }
}
void dfs2(int node , int prt = -1 , int dst = 0){
    if(dst>=mxdst){
        secondnode=node;
        mxdst=dst;
    }
    for(int i = 0 ; i < g[node].size() ; i++){
        if(g[node][i]==prt)continue;
        dfs2(g[node][i],node,dst+1);
    }
}

bool dfs3(int node , int prt = -1){
    longestPathNodes.push_back(node);
    if(node==secondnode){
        return true;
    }
    bool tmp=0;
    for(int i = 0 ; i < g[node].size() ; i++){
        if(g[node][i]==prt)continue;
        tmp|=dfs3(g[node][i],node);
        if(tmp)return 1;
    }
    longestPathNodes.pop_back();
    return false;
}

void dfs4(int node , int prt = -1 , int dst = 0){
    if(dst>=mxdst&&!vis[node]){
        thirdnode=node;
        mxdst=dst;
    }
    for(int i = 0 ; i < g[node].size() ; i++){
        if(g[node][i]==prt||vis[g[node][i]])continue;
        dfs4(g[node][i],node,dst+1);
    }
}

signed main() {
    cin >> n;
    for(int i = 0,a,b ; i < n ; i++){
        scanf("%d%d",&a,&b);
        g[a].push_back(b);
        g[b].push_back(a);
    }
    dfs1(1);
    dfs2(firstnode);
    mxdst=0;
    dfs3(firstnode);
    vis[secondnode]=vis[firstnode]=1;
    for(int i = 0 ; i < longestPathNodes.size() ; i++){
        vis[longestPathNodes[i]]=1;
    }
    mxdst=0;
    for(int i = 0 ; i < longestPathNodes.size() ; i++){
        dfs4(longestPathNodes[i]);
    }
    if(!thirdnode){
        thirdnode=1;
        while(thirdnode==firstnode||thirdnode==secondnode)thirdnode++;
    }
    cout << longestPathNodes.size()-1+mxdst << endl;
    cout << firstnode << ' ' << secondnode << ' ' << thirdnode << endl;


    return 0;
}
