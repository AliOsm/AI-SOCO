/* INPUT
3
4
1 3 4 2
1 2 2 3
5
2 3 4 5 1
1 2 3 4 5
8
7 4 5 6 1 8 3 2
5 3 6 4 7 5 8 4
->
1
5
2
*/

#include <bits/stdc++.h>
using namespace std;

auto divs(int n) {
    vector<int> a, b;
    for (int d = 1; d * d <= n; ++d) {
        if (!(n % d)) {
            a.push_back(d);
            b.push_back(n / d);
        }
        if (d * d == n) {
            b.pop_back();
        }
    }
    copy(b.rbegin(), b.rend(), back_inserter(a));
    return a;
}

vector<vector<int>> pp;

auto next(int v, int s) {
    int l = 0;
    while (s) {
        if (s & 1) {
            v = pp[l][v];
        }
        s >>= 1;
        ++l;
    }
    return v;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int t;
    cin >> t;
    while (t --> 0) {
        int n;
        cin >> n;
        vector<int> p(n), c(n);
        for (auto& pi : p) {
            cin >> pi;
            --pi;
        }
        for (auto& ci : c) {
            cin >> ci;
            --ci;
        }

        int answer = n;

        pp.clear();
        pp.push_back(p);
        for (int s = 2; s <= n; s <<= 1) {
            vector<int> new_back(n);
            for (int i = 0; i < n; ++i) {
                new_back[i] = pp.back()[pp.back()[i]];
            }
            pp.push_back(new_back);
        }

        vector<bool> used(n);
        vector<vector<int>> cycles;
        int n_cycle = 0;
        for (int i = 0; i < n; ++i) {
            if (!used[i]) {
                int v = i;
                used[v] = true;
                cycles.emplace_back();
                cycles.back().push_back(v);
                while (!used[p[v]]) {
                    v = p[v];
                    used[v] = true;
                    cycles.back().push_back(v);
                }
            }
        }

        for (auto cycle : cycles) {
            int cycle_size = cycle.size();
            for (auto step : divs(cycle_size)) {
                int n_steps = cycle_size / step;
                for (int start_ = 0; start_ < step; ++start_) {
                    int start = cycle[start_];
                    // cout << "step = " << step << ", start = " << start << "\n";
                    bool ok = true;
                    int v = start;
                    for (int j = 0; j < n_steps; ++j) {
                        v = next(v, step);
                        ok &= c[v] == c[start];
                    }
                    if (ok) {
                        answer = min(answer, step);
                    }
                }
            }
        }

        cout << answer << "\n";
    }    

    return 0;
}
