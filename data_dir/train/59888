// i hope i get better                                                           
#include <bits/stdc++.h>
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define all(x) x.begin(), x.end()
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
const double PI  = acos(-1.0);
const double EPS = 1;
typedef complex<ll> point;

#define X real()
#define Y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a)) // a ----> b
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define length(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)
//#define polar(r,ang)            ((r)*exp(point(0,ang)))  ==> Already added in c++11
#define rotateO(p,ang)          ((p)*exp(point(0,ang)))
#define rotateA(p,ang,about)  (rotateO(vec(about,p),ang)+about)
#define reflectO(v,m)  (conj((v)/(m))*(m))

point reflect(point p, point p0, point p1) {
    point z = p-p0, w = p1-p0;
    return conj(z/w)*w + p0; // Refelect point p1 around p0p1
}

double fixAngle(double A) {
	return A > 1 ? 1 : (A < -1 ? -1 : A);
}

// return min angle: aOb / bOa
// dp(v1, v2) = |v1|*|v2|*cos(theta)
double angleO(point a, point O, point b) {
  point v1(a - O), v2(b - O);
  return acos( fixAngle ( dp(v1, v2) / length(v1) / length(v2) ) );
}

bool isCollinear(point a, point b, point c) {	
	return fabs( cp(b-a, c-a) ) < EPS;	
} 

const int sz=1e5+9;
ll n,a[sz],b[sz];

int main(){
	cin>>n;
	for(int i=0;i<n;++i){
		cin>>a[i]>>b[i];
	}
	if(n<=4){
		cout<<"YES";
		return 0;
	}
	bool ok;
	vector<int> v;
	v.pb(0);
	v.pb(1);
	v.pb(2);
	do{
		ok=1;
		int i1=v[0];
		int i2=v[1];
		int i3=v[2];
		point p1(a[i1],b[i1]);
		point p2(a[i2],b[i2]);
		point p3(a[i3],b[i3]);
		point l1,l2,tmp,p4;
		l1=vec(p1,p2);
		int h2=0;
		for(int i=3;i<n;++i){
			tmp={a[i],b[i]};
			if(isCollinear(p1,p2,tmp)) continue;
			if(h2==0){
				p4=tmp;
				h2=1;
				continue;
			}else if(isCollinear(p3,p4,tmp)) continue;
			else{
				ok=0;
				break;
			}
		}
		if(ok) break;
		if(isCollinear(p1,p2,p3)==0) continue;
		h2=0;
		ok=1;
		for(int i=3;i<n;++i){
			tmp={a[i],b[i]};
			if(isCollinear(p1,p2,tmp)) continue;
			if(h2==0){
				p3=tmp;
				h2++;
				continue;
			}else if(h2==1){
				p4=tmp;
				h2++;
				continue;
			}
			else if(isCollinear(p3,p4,tmp)) continue;
			else{
				ok=0;
				break;
			}
			if(ok) break;
		}		
	}while(next_permutation(all(v)));
	if(ok) puts("YES");
	else puts("NO");
	return 0;
}