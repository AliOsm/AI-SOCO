#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
#define MAX 400002
int n;
int m;
int p;
int a[MAX];
int b[MAX];
vector<int> v[MAX];
vector<int> vv;
int countt[MAX];
int c[MAX];
set<int> s;
set<int> used;
set<int> outt;
int main(){
    scanf("%d%d%d",&n, &m, &p);
    for (int i = 0; i < n; i++){
        scanf("%d", &a[i]);
        vv.push_back(a[i]);
    }
    for (int i = 0; i < m; i++){
        scanf("%d", &b[i]);
        vv.push_back(b[i]);
    }
    sort(vv.begin(), vv.end());
    vv.erase(unique(vv.begin(), vv.end()), vv.end());
    for (int i = 0; i < n; i++){
        a[i] = lower_bound(vv.begin(), vv.end(), a[i]) - vv.begin();
        b[i] = lower_bound(vv.begin(), vv.end(), b[i]) - vv.begin();
    }
    for (int i = 0; i < n; i++){
        v[i%p].push_back(a[i]);
    }
    for (int i = 0; i < m; i++){
        c[b[i]]++;
        s.insert(b[i]);
    }
    set<int>::iterator ite;
    int ans = 0;
    for (int i = 0; i < p; i++){
        int dif = 0;
        int ind = 0;
        used.clear();
        if (v[i].size() < m){
            continue;
        }
        for (int j = 0; j < m; j++){
            countt[b[j]] = 0;
        }
        for (int j = 0; j < v[i].size(); j++){
            countt[v[i][j]] = 0;
        }
        for (int j = 0; j < m; j++){
            countt[v[i][j]]++;
        }
        for (ite = s.begin(); ite != s.end(); ite++){
            int val = *ite;
            if (countt[val] == c[val]){

            }
            else{
                dif++;
            }
        }
        for (int j = 0; j < v[i].size(); j++){
            if (s.count(v[i][j])){
                
            }
            else{
                if (used.count(v[i][j])){
                    
                }
                else{
                    used.insert(v[i][j]);
                    if (countt[v[i][j]] != c[v[i][j]]){
                        dif++;
                    }
                }
            }
        }
        while (1){
            if (dif == 0){
                outt.insert(ind*p+i);
                ans++;
            }
            int val = v[i][ind];
            if (countt[val] == c[val]){
                dif++;
            }
            countt[val]--;
            if (countt[val] == c[val]){
                dif--;
            }
            ind++;
            if (ind + m <= v[i].size()){
                val = v[i][ind + m - 1];
                if (countt[val] == c[val]){
                    dif++;
                }
                countt[val]++;
                if (countt[val] == c[val]){
                    dif--;
                }
            }
            else{
                break;
            }
        }
    }
    printf("%d\n", ans);
    bool ok = false;
    for (ite = outt.begin(); ite != outt.end(); ite++){
        if (ok){
            printf(" ");
        }
        ok = true;
        printf("%d", (*ite)+1);
    }
    puts("");
    return 0;
}