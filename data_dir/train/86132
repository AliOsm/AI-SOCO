#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <numeric>
#include <stack>
#include <deque>
#include <memory.h>
#include <string>
#include <unordered_map>

#define ull unsigned long long
#define mp make_pair
#define pb push_back
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define vI vector<int>
#define vvI vector<vector<int>>
#define vLL vector<ll>
#define vS vector<string>
#define fori(i, n) for(int (i)=0; (i)<n; (i)++)
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
#define forI(tmp) for(auto(it)=(tmp).begin();(it)!=(tmp).end();(it)++)
#define PI 3.14159265356
#define LD long double
#define sc(a) scanf("%d", &(a))
#define scc(a) scanf("%lld", &(a))
#pragma comment (linker, "/STACK:5000000000")
typedef long long ll;

const ll mod = 1000000007;
ll Inf = (ll)2e9;
ll LINF = (ll)1e18 + 1e17;

using namespace std;

const int N = 5050;
int cnt[N], cnt1[N], cnt2[N];

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	memset(cnt, 0, sizeof(cnt));
	memset(cnt1, 0, sizeof(cnt1));
	memset(cnt2, 0, sizeof(cnt2));
	int n, q;
	cin >> n >> q;
	vector<pair<int, int>> a(q);
	for (int i = 0; i < q; i++)
	{
		cin >> a[i].first >> a[i].second;
		for (int j = a[i].first; j <= a[i].second; j++)
			cnt[j]++;
	}
	int k = 0;
	for (int i = 1; i <= n; i++)
	{
		if (cnt[i] > 0)
			k++;
		cnt1[i] = cnt1[i - 1];
		cnt2[i] = cnt2[i - 1];
		if (cnt[i] == 1)
			cnt1[i]++;
		if (cnt[i] == 2)
			cnt2[i]++;
	}
	int ans = 0;
	for (int i = 0; i < q; i++)
	{
		for (int j = i + 1; j < q; j++)
		{
			int l1 = a[i].first, r1 = a[i].second;
			int l2 = a[j].first, r2 = a[j].second;
			if (l1 > r2 || l2 > r1)
			{
				int x = k - (cnt1[r1] - cnt1[l1 - 1]) - (cnt1[r2] - cnt1[l2 - 1]);
				ans = max(ans, x);
				continue;
			}
			if (l1 <= l2 && r1 >= r2)
			{
				int x = k;
				x -= cnt1[l2 - 1] - cnt1[l1 - 1];
				x -= cnt2[r2] - cnt2[l2 - 1];
				x -= cnt1[r1] - cnt1[r2];
				ans = max(ans, x);
				continue;
			}
			if (l1 <= l2 && r1 <= r2)
			{
				int x = k;
				x -= cnt1[l2 - 1] - cnt1[l1 - 1];
				x -= cnt2[r1] - cnt2[l2 - 1];
				x -= cnt1[r2] - cnt1[r1];
				ans = max(ans, x);
				continue;
			}
			if (l1 >= l2 && r1 >= r2)
			{
				int x = k;
				x -= cnt1[l1 - 1] - cnt1[l2 - 1];
				x -= cnt2[r2] - cnt2[l1 - 1];
				x -= cnt1[r1] - cnt1[r2];
				ans = max(ans, x);
				continue;
			}
			if (l1 >= l2 && r1 <= r2)
			{
				int x = k;
				x -= cnt1[l1 - 1] - cnt1[l2 - 1];
				x -= cnt2[r1] - cnt2[l1 - 1];
				x -= cnt1[r2] - cnt1[r1];
				ans = max(ans, x);
				continue;
			}
		}
	}
	cout << ans;

	return 0;
}