#pragma GCC target("avx2")
#pragma GCC optimize("O3")

# include <x86intrin.h>
# include <bits/stdc++.h>

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
 
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

inline void Input_Output () {
	//freopen(".in", "r", stdin);
   //freopen(".out", "w", stdout);
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n;
int a[N];
int dp[N][5][5];
pair < int, int > pr[N][5][5];

inline void solve () {
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i) {
		scanf("%d", a + i);
	}
	for (int i = 1; i <= n + 4; ++i)
		for (int j = 0; j <= 3; ++j)
			for (int k = 0; k <= 3; ++k)
				dp[i][j][k] = 0;

	dp[1][1][1] = 1;
	a[n+1] = a[1];
	for (int i = 2; i <= n + 1; ++i) {
		for (int mx = 1; mx <= 3; ++mx) {
			for (int ls = 1; ls <= mx; ++ls) if (dp[i-1][mx][ls]) {
				 for (int nw = 1; nw <= 3; ++nw) {
				 	if (nw == ls && a[i] != a[i-1]) {
				 		continue;
				 	}

				 	if(!dp[i][max(nw, mx)][nw]) {
				 		dp[i][max(nw, mx)][nw] = 1;
				 		pr[i][max(nw, mx)][nw] = mp(mx, ls);
				 	}
				 }
			}
		}
	} 

	for (int mx = 1; mx <= 3; ++mx) {
		int ls = 1;
		if (dp[n+1][mx][ls]) {
			printf("%d\n", mx);
			
			vector < int > ans;
			++n;
			while (n > 1) {
				//cout << n << ' ' << pr[n][mx][ls].second << ' ';
				ans.pb(pr[n][mx][ls].second);
				//cout << mx << ' ' << ls << '\n';
				tie(mx, ls) = pr[n][mx][ls];
				--n;
			}

			reverse(every(ans));
			for (int i = 0; i < sz(ans); ++i) {
				printf("%d ", ans[i]);
			}
			puts("");

			return;
		}
	}
	assert(0);
}

int main () {
   	int tt = 1;
   	scanf("%d", &tt);
	while(tt--) solve();
   	return Accepted;
}

// B...a