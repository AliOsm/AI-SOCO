#pragma GCC target("avx2")
#pragma GCC optimize("O3")

# include <x86intrin.h>
# include <bits/stdc++.h>

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
 
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

inline void Input_Output () {
	//freopen(".in", "r", stdin);
   //freopen(".out", "w", stdout);
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 1e9 + 123;
const int mxn = 1e6 + 9;
const int N = 23;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, k;
ll mt[N], sum;
int p[(1 << 16)];
vector < int > g[N];
map < ll, int > id;
bool good[(1 << 16)];
vector < int > pr[(1 << 16)];

void go (int a, int b) {
	vector < int > res(k, inf);
	pair < int, int > st = {a, b};
	res[a] = b;

	while(1) {
		ll nex = sum - (mt[a] - b);
		if (id.count(nex)) {
			tie(a, b) = mp(id[nex], nex);
			if (res[a] == inf) res[a] = b;
			else {
				if (mp(a, b) == st) {
					int mask = 0;
					for (int i = 0; i < k; i ++) if (res[i] != inf) {
						mask |= (1 << i);
					}
					good[mask] = 1;
					pr[mask] = res;
			//		cout << mask << '\n';

				}
				return ;
			}
		} else return ;
	}
}        

int tmp[N];

int main () {
   SpeedForce;
	cin >> k;
	for (int i = 0; i < k; i ++) {
		cin >> n;
		g[i].resize(n);

		for (auto &e : g[i]) {
			cin >> e;
			sum += e;
			id[e] = i;
			mt[i] += e;
		}
	}
	if (abs(sum) % k) {
		cout << "No";
		exit(0); 
	}

	sum /= k;

	good[0] = 1;
	for (int i = 0; i < k; i ++) {
		for (auto x : g[i]) {
			go(i, x);
		}
	}
	//exit(0);
	for (int i = 0; i < k; i ++) tmp[i] = inf;

	for (int i = 1; i < (1 << k); i ++) p[i] = inf;

  	for (int i = 1; i < (1 << k); i ++) {
   	for (int j = i; j > 0;) {
   		 j = (j - 1) & i;
   		 if (good[(i ^ j)] && p[j] != inf) p[i] = j; 
   	}
 	}
 	int cur = (1 << k) - 1;
	
	if (p[cur] != inf) {
		
		cout << "Yes\n";

		while (cur != 0) {
			int now = (cur ^ p[cur]);
			for (int i = 0; i < pr[now].size(); i++) {
				tmp[i] = min(tmp[i], pr[now][i]);
			}
			cur = p[cur];
		}

		for (int i = 0; i < k; i ++) mt[i] -= tmp[i];

		for (int i = 0; i < k; i ++) {
			int now = 0;
			while (mt[now] != sum - tmp[i]) now++;
			cout << tmp[i] << ' ' << now+1 << '\n';
		}
		exit(0);
	}
	cout << "No\n";

   return Accepted;
}

// B...a