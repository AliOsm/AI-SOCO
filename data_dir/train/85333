#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 7;
const int INF = 1e9 + 7;

int res[N], s[N], dp[N];

vector < int > find_div(int x){

  vector < int > ans, cur;

  for(int i = 2; i * i <= x; i++){

    if(x % i == 0){
      cur.push_back(i);
      if(i * i == x){
        continue;
      }
      cur.push_back(x / i);
    }
  }

  if(x != 1){
    cur.push_back(1);
  }

  cur.push_back(x);

  sort(cur.begin(), cur.end());

  for(auto i : cur){
    ans.push_back(s[i]);
  }

  return ans;

}

int main(){

  int t;
  cin >> t;

  while(t--){

    int n;
    cin >> n;

    vector < vector < int > > ans;
    ans.clear();

    for(int i = 1; i <= n; i++){
      cin >> s[i];
      dp[i] = 1;
    }

    int mx = 1;

    for(int i = n; i >= 1; i--){
      for(int j = 1; j * j <= n; j++){
        if(i % j == 0){
          if(s[i] > s[i / j]){
            dp[i / j] = max(dp[i / j], dp[i] + 1);
          }
          if(s[i] > s[j]){
            dp[j] = max(dp[j], dp[i] + 1);
          }
        }
      }

      mx = max(dp[i], mx);
    }

    cout << mx << '\n';
  }
}
