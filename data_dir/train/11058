/*****Enigma27*****/
#include<bits/stdc++.h>
#define start_routine clock_t begin = clock();
#define end_routine clock_t end = clock(); double elapsed_secs = double(end - begin) /CLOCKS_PER_SEC;return cerr<<"\nTime elapsed : "<<elapsed_secs<<" seconds\n",0;
#define ll          long long
#define pb          push_back
#define endl        '\n'
#define pll         pair<ll int,ll int>
#define vll          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define x           first
#define y           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll int i=a;i<b;i++)
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define gcd(a,b)    __gcd((a),(b))
#define lcm(a,b)    ((a)*(b)) / gcd((a),(b))
#define ios     ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
using namespace std;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); 
ll n,i,j,k,l,flag=0,t,a[300005];
string s;
vll v[300005];
vector<pll> q[300004];
ll BIT[300005];
void update(ll x,ll val)
{
	for(;x<=n;x+=(x&-x))
		BIT[x]+=val;
}
ll query(ll x)
{
	ll res=0;
	for(;x>0;x-=(x&-x))
		res+=BIT[x];
	return res;
}
void dfs(int node , int p , int level){
	for(auto j:q[node]){
		update(level,j.y);
		update(level+j.x+1,-j.y);
	}
	a[node] = query(level);
	for(auto j:v[node]){
		if(j!=p){
			dfs(j,node,level+1);
		}
	}
	for(auto j:q[node]){
		update(level,-j.y);
		update(level+j.x+1,j.y);
	}
}
int main()
{
    ios
    cin>>n;
    for(int i=0;i<n-1;i++){
    	cin>>j>>k;
    	v[j].pb(k);
    	v[k].pb(j);
    }
    cin>>t;
    while(t--){
    	int node,lev,val;
    	cin>>node>>lev>>val;
   		q[node].pb({lev,val});
   	}
    dfs(1,-1,1);
    for(int i=1;i<=n;i++) cout<<a[i]<<" ";
    return 0;
}