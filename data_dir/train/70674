#include <cstdio>
#include <map>
#include <cstring>
#include <queue>
#include <cassert>
#include <algorithm>
#include <vector>
#include <iostream>
#include <string>
#include <cmath>
#include <ctime>
using namespace std;

const int MAXLEN=2500000;

struct DSU
{
	int n;
	int* p;
	int* sz;
	int* r;
	DSU(int n):
		n(n),
		p(new int[n]),
		sz(new int[n]),
		r(new int[n])
	{
		for(int i=0;i<n;i++)
		{
			p[i]=i;
			sz[i]=1;
			r[i]=i;
		}
	}
	int get(int i)
	{
		if(p[i]==i) return i;
		return p[i]=get(p[i]);
	}
	int getr(int i)
	{
		return r[get(i)];
	}
	void unite(int a, int b)
	{
		a=get(a);
		b=get(b);
		if(sz[a]>sz[b])
			swap(a,b);
		sz[b]+=sz[a];
		p[a]=b;
		r[b]=max(r[a], r[b]);
	}
} dsu(MAXLEN);

char res[MAXLEN];
char buf[MAXLEN];

int main()
{
	int rb=0;
	int n;
	scanf("%d",&n);
	while(n--)
	{
		int k;
		scanf("%s%d",buf,&k);
		int len=strlen(buf);
		for(int i=0;i<k;i++)
		{
			int x;
			scanf("%d",&x);
			x--;
			if(res[x]==0)
			{
				res[x]=buf[0];
				rb=max(rb, x);
				if(x>0 && res[x-1]!=0)
					dsu.unite(x-1,x);
				if(res[x+1]!=0)
					dsu.unite(x,x+1);
			}
			while(true)
			{
				int p=dsu.getr(x)+1;
				if(p-x>=len) break;
				res[p]=buf[p-x];
				rb=max(rb, p);
				if(p>0 && res[p-1]!=0)
					dsu.unite(p-1, p);
				if(res[p+1]!=0)
					dsu.unite(p,p+1);
			}
		}
	}
	for(int i=0;i<=rb;i++)
		if(res[i]==0)
			res[i]='a';
	puts(res);
	return 0;
}
