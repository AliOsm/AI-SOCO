#include <bits/stdc++.h>
typedef long long ll;
struct Song { ll t, b; };

struct LessByT {
    bool operator()(const Song& lt, const Song& rt) {
        return lt.t < rt.t || (lt.t == rt.t && lt.b < rt.b);
    }
};

struct LessByB {
    bool operator()(const Song& lt, const Song& rt) {
        return lt.b < rt.b || (lt.b == rt.b && lt.t < rt.t);
    }
};

int main() {
    std::ios_base::sync_with_stdio(false); std::cin.tie(0);
    for (int n, k; std::cin >> n >> k; ) {
        std::vector<Song> songs(n);
        for (int i = 0; i < n; ++i) {
            auto &s = songs[i];
            std::cin >> s.t >> s.b;
        }
        std::sort(songs.begin(), songs.end(), LessByB());
        std::multiset<Song, LessByT> best;
        ll res = 0, sum = 0;
        for (int i = n-1; i >= 0; --i) {
            res = std::max(res, songs[i].b * (sum + songs[i].t));
            best.insert(songs[i]);
            sum += songs[i].t;
            if ((int)best.size() >= k) {
                sum -= best.begin()->t;
                best.erase(best.begin());
            }
        }
        std::cout << res << std::endl;
    }
    return 0;
}