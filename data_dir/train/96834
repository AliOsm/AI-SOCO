#include <iostream>
#include <cmath>
#include <string>
#include <map>
#include <queue>

using namespace std;

struct point
{
    int x, y, t;
    point ()
    {
        x = y = t = 0;
    }
    point (int x_, int y_, int t_)
    {
        x = x_;
        y = y_;
        t = t_;
    }
    point (int x_, int y_)
    {
        x = x_;
        y = y_;
        t = 0;
    }
    bool operator < (point B) const
    {
        return x < B.x || (x == B.x && y < B.y);
    }
};

map <point, bool> allowed;
map <point, bool> marked;
queue <point> q;

int main()
{
    int x0, y0, x1, y1, r, a, b;
    int n;
    cin >> y0 >> x0 >> y1 >> x1;
    cin >> n;
    for (int i = 0; i<n; i++)
    {
        cin >> r >> a >> b;
        for (int j = a; j<=b; j++)
            allowed[point(j,r)] = true;
    }

    q.push(point(x0, y0, 0));
    while (q.size())
    {
        point p = q.front();
        int x = p.x, y = p.y, t = p.t;
//        cout << x << ' ' << y << ' ' << t << endl;
        q.pop();
        for (int i = -1; i<=1; i++)
            for (int j = -1; j<=1; j++)
                if ((i != 0 || j != 0) && allowed[point(x+i, y+j)] && !marked[point(x+i, y+j)])
                {
                    marked[point(x+i, y+j)] = true;
                    q.push(point(x+i, y+j, t+1));
                    if (x+i == x1 && y+j == y1)
                    {
                        cout << t+1 << endl;
                        return 0;
                    }
                }
   }
    cout << -1 << endl;
    return 0;
}

