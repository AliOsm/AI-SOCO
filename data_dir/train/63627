#include <bits/stdc++.h>
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;
 
#define pb push_back
#define mp make_pair
#define fir first
#define sec second
#define ll long long
#define ull unsigned long long
 
typedef tree<
        int,
        null_type,
        less<int>,
        rb_tree_tag,
        tree_order_statistics_node_update>
        ordered_set;
        
ll md=(1e9)*1e9+7;
ll MOD=1e9+7;
int INF=1e9+7;
 
ll binpow (ll a, ll n) {
	if (n == 0)
		return 1;
	if (n % 2 == 1)
		return (binpow (a, n-1) * a) % MOD;
	else {
		int b = binpow (a, n/2)% MOD;
		return (b * b) % MOD;
	}
}
 
pair<int,ll> rev(pair<ll,int> x)
{
    return mp(x.sec,x.fir);
}
 
int lis(vector<int> &a)
{
    int n=a.size();
    vector<int> d(n+1,1e9+7);
    d[0]=0;
    for (int i=0;i<n;i++)
    {
        int j=(int)(upper_bound(d.begin(),d.end(),a[i])-d.begin());
        //if (d[j-1]<a[i]&&a[i]<d[j])
        {
            d[j]=a[i];
            //cout<<i;
        }
    }
    for (int i=n;i>=0;i--)
        if (d[i]<1e9+7) return i;
}
 
bool is_prime(int x)
{
    if (x==2) return 1;
    for (int i=2;i*i<=x;i++)
        if (x%i==0) return 0;
    return 1;
}
 
int n,m;
vector<vector<int>> g(2000005);
bool used[2000005];
bool ans;
 
void dfs(int v,int prev)
{
    used[v]=1;
    for (int i=0;i<g[v].size();i++)
    {
        if (used[g[v][i]]&&g[v][i]!=prev) ans=0;
        if (!used[g[v][i]]) dfs(g[v][i],v);
    }
}
 
int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int n;
    cin>>n;
    vector<pair<int,int>> love;
    for (int i=0;i<n;i++)
    {
        int x1,y1;
        cin>>x1>>y1;
        love.pb(mp(x1,y1));
    }
    //sort(x.begin(),x.end());
    sort(love.begin(),love.end());
    set<pair<int,int>> s;
    int edges=0;
    for (int i=0;i<love.size();i++)
    {
        auto it=s.upper_bound(mp(love[i].fir,0));
        while (it!=s.end())
        {
            pair<int,int> cur=*it;
            if (cur.fir>love[i].sec) break;
            g[i].pb(cur.sec);
            g[cur.sec].pb(i);
            edges++;
            if (edges>n+n)
            {
                cout<<"NO";
                return 0;
            }
            ++it;
        }
        s.insert({love[i].sec,i});
    }
    ans=1;
    for (int i=0;i<=2*n;i++)
        used[i]=0;
    int kkk=0;
    for (int i=0;i<n;i++)
    {
        if (!used[i]) 
        {
            dfs(i,-1);
            kkk++;
        }
    }
    if (ans&&kkk==1) cout<<"YES";
    else cout<<"NO";
    return 0;
}
/*
0 0 0
0 0 1
0 1 0
1 0 0
*/
//6 19 3 4 4 2 6 7 8
//2 3 4 4 6 6 7 8 19