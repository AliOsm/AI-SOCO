#include<bits/stdc++.h>
using namespace std;
vector<int> merge(vector<int> &a, vector<int> &b);
#define mx 100005
vector<int> adj[mx],tans;
int level[mx],sparse[mx][20],n,pos[mx];
vector<int> temp[mx][20];
void dfs(int s,int pre,int h){
    level[s]=h;
    sparse[s][0]=pre;
    for(int i:adj[s]){
        if(i!=pre){
            dfs(i,s,h+1);
        }
    }
}
void built(){
    for(int j=1;(1<<j)<=n;j++)
    for(int i=1;i<=n;i++)
    {
        if(sparse[i][j-1]==sparse[sparse[i][j-1]][j-1])
            continue;
        sparse[i][j]=sparse[sparse[i][j-1]][j-1];
        temp[i][j]=merge(temp[i][j-1],temp[sparse[i][j-1]][j-1]);
    }
}
int LCA(int p,int q){
    if(level[p]<level[q])
        swap(p,q);
    for(int i=log2(n)+1;i>=0;i--)
        if((level[p]-(1<<i))>=level[q])
            p=sparse[p][i];
    if(p==q)
        return p;
    for(int i=log2(n)+1;i>=0;i--)
        if(sparse[p][i]!=sparse[q][i] && sparse[p][i]!=-1)
            p=sparse[p][i],q=sparse[q][i];
    return sparse[p][0];
}
void query(int s,int jum){
    if(jum<=0)
        return ;
    for(int j=log2(n)+1;j>=0;j--)
    if((1<<j)<=jum)
    {
        tans=merge(temp[s][j],tans);
        s=sparse[s][j];
        jum-=(1<<j);
    }
}
int32_t main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    int m,s=0,q;cin>>n>>m>>q;
    for(int i=1;i<n;i++)
    {
        int x,y;cin>>x>>y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    for(int i=0;i<m;i++)
    {
        int x;cin>>x;
        if(temp[x][0].size()!=10)
        temp[x][0].push_back(i+1);
    }
    dfs(1,0,0);
    built();
    while(q--)
    {
        int x,y,a;cin>>x>>y>>a;
        int l=LCA(x,y);
        query(x,level[x]-level[l]);
        query(y,level[y]-level[l]);
        tans=merge(tans,temp[l][0]);
        int si=min((int)tans.size(),a);
        cout<<si<<" ";
        for(int i=0;i<si;i++)
            cout<<tans[i]<<" ";
        cout<<"\n";
        tans.clear();
    }
}
vector<int> merge(vector<int> &a, vector<int> &b)
{
    int i=0,j=0;
    vector<int> te;
    while(i<a.size() || j<b.size())
    {
        if(i<a.size() && j<b.size())
        {
            if(a[i]>b[j])
            {
                te.push_back(b[j]);
                j++;
            }
            else
            {
                te.push_back(a[i]);
                i++;
            }
        }
        else if(i<a.size())
            te.push_back(a[i]),i++;
        else
            te.push_back(b[j]),j++;
        if(te.size()==10)break;
    }
    return te;
    
}