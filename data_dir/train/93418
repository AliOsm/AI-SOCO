#include<bits/stdc++.h>
#define MOD 1000000007
#define ll long long
#define mp make_pair
#define pb push_back
#define N 100010 
using namespace std;
vector<int> graph[2 * N];
stack<int> tsort;
int visited[2 * N], cur[2 * N], cyc = 0;
void dfs(int s){
	//cerr << s << '\n';
	visited[s] = 1;
	cur[s] = 1;
	for(int i = 0; i < graph[s].size(); i++){
		if(!visited[graph[s][i]]){
			dfs(graph[s][i]);
		}
		else if(cur[graph[s][i]]){
			//cerr << s << " " << graph[s][i] << "cyc\n";
			cyc = 1;
		}
	}
	cur[s] = 0;
	if(s < N)
		tsort.push(s);
}
int main(){
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	int n, m;
	cin >> n >> m;
	vector<int> ry;
	vector<vector<int> > df(n);
	for(int i = 0; i < n; i++){
		for(int j = 0; j < m; j++){
			int x;
			cin >> x;
			df[i].pb(x);
			ry.pb(x);
		}
	}
	for(int i = 0; i < n; i++){
		set<pair<int, int > > rt;
		set<int> dis;
		map<int, int> bts;
		for(int j = 0; j < m; j++){
			if(df[i][j] != -1){
				rt.insert(mp(df[i][j], j));
				dis.insert(df[i][j]);
			}
		}
		int cty = 0;
		for(auto it = dis.begin(); it != dis.end(); it++, cty++){
			bts[*it] = N + m * i + cty;
		}
		for(int j = 0; j < m; j++){
			if(df[i][j] != -1)
				graph[bts[df[i][j]]].pb(j);
		}
		for(int j = 0; j < m; j++){
			if(df[i][j] != -1){
				auto it = rt.lower_bound(mp(df[i][j], 1e9));
				if(it != rt.end()){
					//cout << df[i][j] << " " << j << " " << " NODE FOR " << it->first << '\n';
					graph[j].pb(bts[it->first]);
				}
			}	
		}
	}
	for(int i = 0; i < m; i++){
		if(!visited[i]){
			dfs(i);
		}
	}
	if(cyc)
		cout << -1 << '\n';
	else {
		while(tsort.size()){
			cout << tsort.top() + 1 << " ";
			tsort.pop();
		}
		cout << '\n';
	}


}