#include <bits/stdc++.h>

const int N = 400 + 5;
int n,m;
std::vector<int> edges[N];
int dfn[N],low[N],stack[N],instack[N],belong[N],tot,top,tim;

void tarjan(int u) {
	stack[top++] = u;
	instack[u] = 1;
	dfn[u] = low[u] = ++ tim;
	for (int v : edges[u]) {
		if (!dfn[v]) {
			tarjan(v);
			low[u] = std::min(low[u],low[v]);
		} else if (instack[v]) {
			low[u] = std::min(low[u],dfn[v]);
		}
	}
	if (dfn[u] == low[u]) {
		while (true) {
			int v = stack[--top];
			instack[v] = 0;
			belong[v] = tot;
			if (v==u) break;
		}
		tot ++;
	}
}

void scc() {
	for (int i = 0; i < n*m; ++ i) {
		if (!dfn[i]) tarjan(i);
	}
}

char A[N],B[N];

int main() {
	scanf("%d%d",&n,&m);
	scanf("%s%s",A,B);
	for (int i = 0; i < n; ++ i) {
		if (A[i]=='>') {
			for (int j = 0; j < m-1; ++ j) {
				edges[i*m+j].push_back(i*m+j+1);
			}
		} else {
			for (int j = 0; j < m-1; ++ j) {
				edges[i*m+j+1].push_back(i*m+j);
			}
		}
	}
	for (int j = 0; j < m; ++ j) {
		if (B[j]=='v') {
			for (int i = 0; i < n-1; ++ i) {
				edges[i*m+j].push_back((i+1)*m+j);
			}
		} else {
			for (int i = 0; i < n-1; ++ i) {
				edges[(i+1)*m+j].push_back(i*m+j);
			}
		}
	}
	scc();
	if (tot == 1) {
		puts("YES");
	} else {
		puts("NO");
	}
	return 0;
}
