


#include<bits/stdc++.h>
using namespace std;
#define rep(i,a,b)          for(i=a;i<b;i++)
#define repr(i,a,b)         for(i=a;i>=b;i--)

#define LL                  long long
#define ull                 unsigned long long int
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%I64d ",n)
#define pfs(s)              printf("%s\n",s)
#define bug1		        printf("bug1")
#define	bug2			    printf("bug2")
#define	bug3		        printf("bug3")

#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define ff                  first
#define ss                  second
#define mp                  make_pair
#define pp                  pair<int,int>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9
#define EPS                 1e-8
#define Pi                  acos(-1.0)

#define N 2000000

vector<LL>sav;



int main()
{

    int n;
    sci(n);

    LL arr[n];

    LL sum=0;

    map<LL,int>m;

    for(int i=0;i<n;i++)
    {
        scl(arr[i]);
        sum+=arr[i];
        m[arr[i]]++;
    }
    vector<int>res;

    //cout<<sum<<endl;
    for(int i=0;i<n;i++)
    {
        if((sum-arr[i])%2==1)
            continue;
        LL tem=(sum-arr[i])/2;

        if(tem==arr[i])
        {
            if(m[tem]>1)
                res.pb(i+1);
        }
        else
        {
            if(m[tem]>0)
                res.pb(i+1);
        }


    }
    cout<<res.size()<<endl;

    for(int i=0;i<res.size();i++)
        cout<<res[i]<<" ";





}

/* int dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* int dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* int dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* int dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
