#include <bits/stdc++.h>
using namespace std;
#define forn(i, n) for(int i = 0; i < (int) (n); i++)
#define dforn(i, n) for(int i = (n) - 1; i >= 0; i--)
const int MAXN = 2000000;

struct Fenwick {
  static const int sz = 1000005;
  int t[sz];
  void add(int p, int v){
    for(int i = p; i < sz; i += (i & -i)){
      t[i] += v;
    }
  }
  int sum(int p){
    int s = 0;
    for(int i = p; i; i -= (i & -i)){
      s += t[i];
    }
    return s;
  }
  int sum(int a, int b){
    return sum(b) - sum(a - 1);
  }
};

int n, A[MAXN], L[MAXN], R[MAXN];
map<int, int> M;
Fenwick F;

int main(){
  scanf("%d", &n);
  forn(i, n){
    scanf("%d", &A[i]);
  }
  
  forn(i, n){
    int x = ++M[ A[i] ];
    L[i] = x;
  }
  M.clear();
  dforn(i, n){
    int x = ++M[ A[i] ];
    R[i] = x;
  }
  M.clear();
  
  //~ forn(i, n){
    //~ printf("%d ", L[i]);
  //~ }
  //~ puts("");
  //~ forn(i, n){
    //~ printf("%d ", R[i]);
  //~ }
  //~ puts("");
  
  forn(i, n){
    F.add(R[i], 1);
  }
  
  long long ans = 0;
  forn(i, n){
    F.add(R[i], -1);
    ans += F.sum(L[i] - 1);
  }
  
  printf("%lld\n", ans);
  return 0;
}
