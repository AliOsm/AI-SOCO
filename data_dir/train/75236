#include <bits/stdc++.h>
using namespace std;

int64_t gcd(int64_t a, int64_t b){
    return b==0 ? a : gcd(b, a%b);
}

vector<int64_t> prime_factor(int64_t n){
    vector<int64_t> ret;
    for(int64_t i=2; i*i<=n; i++){
        if(n % i == 0){
            while(n % i == 0) n /= i;
            ret.push_back(i);
        }
    }
    if(n > 1) ret.push_back(n);
    return ret;
}

int nth_bit(int64_t num, int n){
    return (num >> n) & 1;
}

int64_t solve(){
    int64_t A, M;
    cin >> A >> M;
    int64_t G = gcd(A, M);
    A /= G;
    M /= G;

    auto prs = prime_factor(M);

    int sz = prs.size();
    vector<int64_t> prod(1<<sz, 1), mebius(1<<sz, 1);
    for(int b=0; b<(1<<sz); b++){
        for(int i=0; i<sz; i++) if(nth_bit(b, i)){
            prod[b] *= prs[i];
            mebius[b] *= -1;
        }
    }

    auto calc = [&](int64_t X){
        int64_t ans = 0;
        for(int b=0; b<(1<<sz); b++) ans += (X/prod[b]) * mebius[b];
        return ans;
    };

    int64_t ans = calc(A+M-1) - calc(A-1);
    return ans;
}

int main(){
    int T;
    cin >> T;
    while(T--) cout << solve() << endl;
    return 0;
}
