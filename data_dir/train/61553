#include <iostream>
#include <algorithm>
using namespace std;

int n, m, K;
const int MAXN = 105;
const long long INFTY = 1e12;
int col[MAXN];
long long p[MAXN][MAXN], dp[MAXN][MAXN][MAXN];

int main()
{
	cin >> n >> m >> K;
	for(int i = 1; i <= n; i++)
		cin >> col[i];
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= m; j++)
			cin >> p[i][j];

	for(int i = 0; i <= n; i++)
		for(int j = 0; j <= K; j++)
			for(int k = 0; k <= m; k++)
				dp[i][j][k] = INFTY;

	if(col[1] == 0)
	{
		for(int i = 1; i <= m; i++)
			dp[1][1][i] = p[1][i];
	}
	else
		dp[1][1][col[1]] = 0;

	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= K; j++)
		{
			if(col[i] == 0)
			{
				for(int a = 1; a <= m; a++)
				{
					dp[i][j][a] = min(dp[i][j][a], dp[i - 1][j][a] + p[i][a]);
					for(int k = 1; k <= m; k++)
						if(k != a)
							dp[i][j][a] = min(dp[i][j][a], dp[i - 1][j - 1][k] + p[i][a]);
				}
			}
			else
			{
				dp[i][j][col[i]] = min(dp[i][j][col[i]], dp[i - 1][j][col[i]]);
				for(int a = 1; a <= m; a++)
					if(a != col[i])
						dp[i][j][col[i]] = min(dp[i][j][col[i]], dp[i - 1][j - 1][a]);
			}
		}

	long long ans = INFTY;
	for(int i = 1; i <= m; i++)
		ans = min(ans, dp[n][K][i]);

	if(ans >= INFTY)
		cout << -1 << "\n";
	else
		cout << ans << "\n";
	return 0;
}