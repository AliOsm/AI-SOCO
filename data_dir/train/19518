#include <bits/stdc++.h>
using namespace std;

int dp[101][10000];

const int inf = (int)1e9;

int main() {
    //freopen("input.txt", "r", stdin);
    int n, T;
    cin >> n >> T;
    for (int i = 0; i <= T; ++i) {
        for (int j = 0; j < 10000; ++j) {
            dp[i][j] = 0;
        }
    }
    vector <pair <int, int> > a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i].first >> a[i].second;
    }
    vector <vector <int> > b(T + 1);
    for (int i = 0; i < n; ++i) {
        if (a[i].first <= T) {
            b[T - a[i].first].push_back(a[i].second);
        }
    }
    for (int i = 0; i < b.size(); ++i) {
        sort(b[i].begin(), b[i].end());
        reverse(b[i].begin(), b[i].end());
        for (int j = 1; j < b[i].size(); ++j) {
            b[i][j] += b[i][j - 1];
        }
    }
    for (int i = T; i > 0; --i) {
        for (int j = 0; j < 10000; ++j) {
            dp[i - 1][(j + 1) / 2] = max(dp[i - 1][(j + 1) / 2], dp[i][j]);
            for (int k = 0; k < b[i].size() && (k + j + 2) / 2 < 10000; ++k) {
                dp[i - 1][(j + k + 2) / 2] = max(dp[i - 1][(j + k + 2) / 2], dp[i][j] + b[i][k]);
            }
        }
    }
    if (!b[0].empty()) {
        dp[0][1] = max(dp[0][1], b[0][0]);
    }
    cout << dp[0][1] << endl;
    return 0;
}
