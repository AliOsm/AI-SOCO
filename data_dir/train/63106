#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define eb emplace_back
#define mt make_tuple

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;

const int N = (1 << 12) + 10;
const int M = (1 << 15) + 10;

char s[M];
int ufds[M];

int find(int x)
{
	if (ufds[x] == x)
		return x;
	return ufds[x] = find(ufds[x]);
}
void unio(int x, int y)
{
	ufds[find(x)] = find(y);
}

void del(int x)
{
	vector<int> v;
	for (int i = 0; i < M; i++)
	{
		if (find(i) == find(x))
			v.pb(i);
	}
	for (int i = 0; i < v.size(); i++)
		ufds[v[i]] = v[i];
}

int n, m;
int g[2][M];
int comp[2][M];
queue<int> q;
int queued[M];
int has[2][M];
int used[M];
int flag;

int main()
{
	int prv = 0, cur = 1, ans = 0;
	for (int i = 0; i < M; i++)
	{
		ufds[i] = i;
		q.push(i);
		queued[i] = 1;
	}
	scanf("%d %d", &n, &m);
	for (int line = 0; line <= n; line++)
	{
		if (line < n)
			scanf("%s", s);
		else
			for (int j = 0; j < m/4; j++)
				s[j] = '0';

		for (int j = 0; j < m/4; j++)
		{
			int x = s[j]-'0';
			if (s[j] >= 'A' and s[j] <= 'F')
				x = s[j] - 'A' + 10;
			for (int k = 3; k >= 0; k--)
				g[cur][4 * j + 3-k] = (x >> k)&1;
		}

		for (int j = 0; j < m; j++)
		{
			if (g[cur][j])
			{
				comp[cur][j] = q.front();
				queued[q.front()] = 0;
				q.pop();
			}
		}

		for (int j = 0; j < m; j++)
		{
			if (!g[cur][j]) continue;
			if (g[prv][j])
				unio(comp[cur][j], comp[prv][j]);
			if (j < m-1 and g[cur][j+1])
				unio(comp[cur][j], comp[cur][j+1]);
		
		}
		flag++;
		for (int i = 0; i < 2; i++)
		{
			for (int j = 0; j < m; j++)
			{
				if (!g[i][j]) continue;
				comp[i][j] = find(comp[i][j]);
				has[i][comp[i][j]] = flag;
				used[comp[i][j]] = flag;
			}
		}
		for (int c = 0; c < M; c++)
		{
			if (used[c] != flag and !queued[c])
			{
				ufds[c] = c;
				q.push(c);
				queued[c] = 1;
			}

		}
		//printf("line = %d, %d\n", line, (int)q.size());
		for (int c = 0; c < M; c++)
			ans += (has[prv][c] == flag and has[cur][c] != flag);	
		swap(cur, prv);
	}
	printf("%d\n", ans);
	return 0;
}


