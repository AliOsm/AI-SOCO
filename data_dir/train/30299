#include <bits/stdc++.h>
using namespace std;

#define fi first
#define se second
#define all(x) (x).begin(), (x).end()
typedef long long ll;

const int maxN = 707;
const ll MOD = (ll)1e9 + 7;

int ne[maxN];

string s;

struct Node {
    ll a[3][3];
    Node() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                a[i][j] = 0;
            }
        }
    }
    Node operator + (Node b) {
        Node ans;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                for (int k = 0; k < 3; k++) {
                    if (j && k && j == k) continue;
                    for (int l = 0; l < 3; l++) {
                        ans.a[i][l] += a[i][j] * b.a[k][l];
                        ans.a[i][l] %= MOD;
                    }
                }
            }
        }
        return ans;
    }
    Node f() {
        Node ans;
        for (int i = 1; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                for (int k = 0; k < 3; k++) {
                    if (i != j) {
                        ans.a[i][0] += a[j][k];
                        ans.a[i][0] %= MOD;
                    }
                    if (k != i) {
                        ans.a[0][i] += a[j][k];
                        ans.a[0][i] %= MOD;
                    }
                }
            }
        }
        return ans;
    }
    ll calc() {
        ll ans = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                ans += a[i][j];
                ans %= MOD;
            }
        }
        return ans;
    }
};

Node init() {
    Node ans;
    for (int i = 1; i < 3; i++) {
        ans.a[i][0] = ans.a[0][i] = 1;
    }
    return ans;
}

Node solve(int l, int r) {
    if (l == r + 1) {
        return init();
    }
    Node cur = solve(l + 1, ne[l] - 1);
    for (int i = ne[l] + 1; i <= r; i = ne[i] + 1) {
        cur = cur + solve(i + 1, ne[i] - 1);
    }
    if (l == 0 && r == s.size() - 1) {
        cout << cur.calc() << endl;
    }
    return cur.f();
}

int main() {
    cin >> s;
    vector<int> st;
    for (int i = 0; i < s.size(); i++) {
        if (s[i] == '(') {
            st.push_back(i);
        }
        if (s[i] == ')') {
            ne[st.back()] = i;
            st.pop_back();
        }
    }
    solve(0, s.size() - 1);
    return 0;
}
