#include <bits/stdc++.h>
using namespace std;

long long sqr(long long z) {
    return z * z;
}
struct line {
    long long a, b, c;
};

struct point {
    long long x, y;
};

line make_line(point u, point v) {
    line res;
    res.a = v.y - u.y;
    res.b = u.x - v.x;
    res.c = v.x * u.y - u.x * v.y;
    return res;
}

bool inrange(long long l, double z, long long r) {
    if(l > r) swap(l, r);
    return (l <= z && z <= r);
}

point p[100005];

int main() {
    int n;
    line l;
    long long px, py, maxd;
    double x, y, mind;
    scanf("%d %I64d %I64d %I64d %I64d", &n, &px, &py, &p[0].x, &p[0].y);
    maxd = sqr(px - p[0].x) + sqr(py - p[0].y);
    mind = sqrt(sqr(p[0].x - px) + sqr(p[0].y - py));
    for(int i = 1; i < n; i++) {
        scanf("%I64d %I64d", &p[i].x, &p[i].y);
        maxd = max(maxd, sqr(p[i].x - px) + sqr(p[i].y - py));
        mind = min(mind, sqrt(sqr(p[i].x - px) + sqr(p[i].y - py)));
        l = make_line(p[i - 1], p[i]);
        x = (double)(l.b * (l.b * px - l.a * py) - l.a * l.c) / (double)(sqr(l.a) + sqr(l.b));
        y = (double)(l.a * (l.a * py - l.b * px) - l.b * l.c) / (double)(sqr(l.a) + sqr(l.b));
        if(inrange(p[i - 1].x, x, p[i].x) && inrange(p[i - 1].y, y, p[i].y))
            mind = min(mind, (double)abs(l.a * px + l.b * py + l.c) / sqrt(sqr(l.a) + sqr(l.b)));
    }
    l = make_line(p[n - 1], p[0]);
    x = (double)(l.b * (l.b * px - l.a * py) - l.a * l.c) / (double)(sqr(l.a) + sqr(l.b));
    y = (double)(l.a * (l.a * py - l.b * px) - l.b * l.c) / (double)(sqr(l.a) + sqr(l.b));
    if(inrange(p[n - 1].x, x, p[0].x) && inrange(p[n - 1].y, y, p[0].y))
        mind = min(mind, (double)abs(l.a * px + l.b * py + l.c) / sqrt(sqr(l.a) + sqr(l.b)));
    printf("%.9f", (double)(maxd - mind * mind) * 3.14159265359);
}
