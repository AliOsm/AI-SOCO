/**/
#include <bits/stdc++.h>
using namespace std;
/***********************************************/
/* Dear online judge:
 * I've read the problem, and tried to solve it.
 * Even if you don't accept my solution, you should respect my effort.
 * I hope my code compile and get accepted.
 *      ____________
 *     /         __ \
 *    /   __    |  | \
 *   /   |__|   |  |  \
 *  (           |__|   )
 *   \                /
 *    \      ___     /
 *     \____________/
 *
 *
 */
const long long mod = 1000000007;
vector<pair<int,int> > eds;
vector<pair<int,int> > edu;
vector<pair<int,int> > edv;
vector<pair<int,int> > edw;
vector<int> wu,wv,ww;
vector<pair<int,int> > res;

struct dsu{
	vector<int> p,sz;
	dsu(int N){
		p.resize(N);
		sz.resize(N,1);
		for(int i = 0;i < N;i++)p[i] = i;
	}
	int par(int x){
		if(x == p[x])
			return x;
		return p[x] = par(p[x]);
	}
	bool mrg(int x,int y){
		x = par(x),y = par(y);
		if(x == y)
			return false;
		if(sz[x] < sz[y]){
			swap(x,y);
		}
		p[y] = p[x];
		sz[x] += sz[y];
		return true;
	}
};

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	int N,M,u,v,du,dv,ru = 0,rv = 0;
	cin>>N>>M;
	dsu DSU(N);
	bool x = false;
	for(int i = 0;i < M;i++){
		cin>>u>>v;
		u--,v--;
		eds.push_back({u,v});
	}
	cin>>u>>v>>du>>dv;
	u--,v--;

	for(int i = 0;i < M;i++){
		int f = 0;
		if(eds[i].first == u || eds[i].second == u){
			edu.push_back(eds[i]);
			f++;
		}
		if(eds[i].first == v || eds[i].second == v){
			edv.push_back(eds[i]);
			f++;
		}
		if(f == 2){
			edu.pop_back();
			edv.pop_back();
			x = 1;
		}
		if(f)
			continue;
		if(DSU.mrg(eds[i].first,eds[i].second)){
			res.push_back(eds[i]);
		}
	}

	for(auto & e : edu){
		if(e.first != u)
			swap(e.first,e.second);
		e.first = DSU.par(e.second);
		wu.push_back(e.first);
	}
	
	for(auto & e : edv){
		if(e.first != v)
			swap(e.first,e.second);
		e.first = DSU.par(e.second);
		wv.push_back(e.first);
	}


	sort(wu.begin(),wu.end());
	sort(wv.begin(),wv.end());

	for(auto & e : edu){
		if(!binary_search(wv.begin(),wv.end(),e.first)){
			if(DSU.mrg(u,e.second)){
				res.push_back(make_pair(u,e.second));
				ru++;
			}
		}else{
			ww.push_back(e.first);
			edw.push_back(make_pair(u,e.second));
		}
	}

	for(auto & e : edv){
		if(!binary_search(wu.begin(),wu.end(),e.first)){
			if(DSU.mrg(v,DSU.par(e.second))){
				res.push_back(make_pair(v,e.second));
				rv++;
			}
		}else{
			ww.push_back(e.first);
			edw.push_back(make_pair(v,e.second));
		}
	}

	sort(ww.begin(),ww.end());
	auto it = unique(ww.begin(),ww.end());
	ww.erase(it,ww.end());

	if(du < ru || dv < rv || du + dv < ru + rv + (int)ww.size()){
		cout<<"No\n";
		return 0;
	}

	for(auto & e : edw){
		if(e.first == u){
			if(ru + 1 <= du && DSU.mrg(u,e.second)){
				ru++;
				res.push_back(e);
			}
		}else{
			if(rv + 1 <= dv && DSU.mrg(v,e.second)){
				rv++;
				res.push_back(e);
			}
		}
	}

	if((int)res.size() + 1 != N){
		if(x && ru + 1 <= du && rv + 1 <= dv){
			res.push_back(make_pair(u,v));
			DSU.mrg(u,v);
			ru++,rv++;
		}else{
			cout<<"No\n";
			return 0;
		}
	}
	
	if((int)res.size()+1 != N || rv > dv || ru > du){
		cout<<"No\n";
		return 0;
	}
	
	cout<<"Yes\n";
	for(auto e : res){
		cout<<e.first+1<<' '<<e.second+1<<'\n';
	}
	return 0;
}
/**/
