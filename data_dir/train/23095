#include<bits/stdc++.h>
#define st first
#define nd second
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define umax(x,y) x=max(x,y)
#define umin(x,y) x=min(x,y)
#define ll long long 
#define ii pair<int,int>
#define iii pair<ii,int>
#define iiii pair<ii,ii>
#define sz(x) ((int) x.size())
#define orta ((bas+son)/2)
#define all(x) x.begin(),x.end()
#define pw(x) (1<<(x))
#define inf 100000009
#define MOD 1000003 
#define N 15
#define M 1000003
#define LOG 20
#define KOK 300
#define EPS 0.0000001
using namespace std;

int mat[15][15],ans[15],inv[MOD];

int mul(int x,int y) {
	
	return (ll)x*y%MOD;

}

int add(int x,int y) {

	x+=y;

	if(x>=MOD) x-=MOD;
	if(x<0) x+=MOD;

	return x;

}

int fe(int x,int y) {
	
	if(y==0) return 1;
	if(y&1) return (ll)x*fe(x,y-1)%MOD;

	int res=fe(x,y>>1);

	return (ll)res*res%MOD; 

}

void addrow(int to,int from) {

	for(int i=0;i<12;i++) {

		mat[to][i]=add(mat[to][i],mat[from][i]);

	}

}

void mulrow(int row,int val) {

	for(int i=0;i<12;i++) {

		mat[row][i]=mul(mat[row][i],val);

	} 

}

void solve() {

	for(int j=0;j<11;j++) {

		mulrow(j,inv[mat[j][j]]);

		for(int i=j+1;i<11;i++) {

			int cur=MOD-mat[i][j];

			mulrow(j,cur);

			addrow(i,j);

			mulrow(j,inv[cur]);

		}

	}

	for(int i=10;i>=0;i--) {

		int sum=0;

		for(int j=i+1;j<11;j++) {

			sum=add(sum,mul(mat[i][j],ans[j]));

		}

		ans[i]=add(mat[i][11],-sum);

	}

}

void init(int row,int x,int res) {

	for(int i=0;i<11;i++) {

		mat[row][i]=fe(x,i);

	}	

	mat[row][11]=res;

}

void pre() {

	for(int i=0;i<MOD;i++) {

		inv[i]=fe(i,MOD-2);

	}

}

int main() {

	pre();

	for(int i=0;i<11;i++) {

		printf("? %d\n",i);

		fflush(stdout);

		int res;

		scanf("%d",&res);

		init(i,i,res);

	}	

	solve();

	for(int i=0;i<MOD;i++) {

		int po=1;
		int res=0;

		for(int j=0;j<11;j++) {
		
			res=add(res,mul(ans[j],po));

			po=mul(po,i);

		}

		if(res==0) {

			printf("! %d\n",i);

			fflush(stdout);

			return 0;

		}

	}

	printf("! -1\n");

	fflush(stdout);

}