/*
 * Author : OmarHashim
 */
#include<bits/stdc++.h>
using namespace std;

#define scl(x) scanf("%lld",&x)
#define sc(x)  scanf("%d",&x)
#define ll long long
#define lop(i,n) for(int i=0;i<n;++i)
typedef pair<int,int> ii;
typedef pair<ll,ll> pll;
#define ld long double

const int mN=5e5+100;
ld tree[4*mN],lazy[4*mN];
inline void upd(int idx,int s,int e,ld lz){
	lazy[idx]*=lz;
	tree[idx]*=pow(lz,e-s+1);
}
inline void shift(int idx,int s,int e){
	if(lazy[idx]==1)return ;
	int m=s+((e-s)>>1),L=(idx<<1)+1,R=L+1;
	upd(L,s,m,lazy[idx]);
	upd(R,m+1,e,lazy[idx]);
	lazy[idx]=1;
}
inline void mulRange(int idx,int s,int e,int l,int r, ld v){
	if(s>=l&&e<=r){
		upd(idx,s,e,v);
		return ;
	}
	if(s>r||e<l)return ;
	shift(idx,s,e);
	int m=s+((e-s)>>1),L=(idx<<1)+1,R=L+1;
	mulRange(L,s,m,l,r,v);
	mulRange(R,m+1,e,l,r,v);
	tree[idx]=tree[L]*tree[R];
}
inline ld getRange(int idx,int s,int e,int l,int r){
	if(s>=l&&e<=r)return tree[idx];
	if(s>r||e<l)return 1;
	shift(idx,s,e);
	int m=s+((e-s)>>1),L=(idx<<1)+1,R=L+1;
	return getRange(L,s,m,l,r)*getRange(R,m+1,e,l,r);
}


int n,m,a[mN],h[mN],l[mN],r[mN],b[mN],z[mN];

vector<int> vec;
int com(int val){
	return lower_bound(vec.begin(),vec.end(),val)-vec.begin();
}
int main(){
#ifndef ONLINE_JUDGE
	freopen("i.txt","r",stdin);
#endif
	lop(i,4*mN)tree[i]=lazy[i]=1;
	sc(n),sc(m);
	lop(i,n){
		sc(a[i]),sc(h[i]),sc(l[i]),sc(r[i]);
		vec.push_back(a[i]+1);
		vec.push_back(a[i]+h[i]);
		vec.push_back(a[i]-1);
		vec.push_back(a[i]-h[i]);
	}
	lop(i,m){
		sc(b[i]),sc(z[i]);
		vec.push_back(b[i]);
	}
	sort(vec.begin(),vec.end());
	vec.erase(unique(vec.begin(),vec.end()),vec.end());
	lop(i,n){
		mulRange(0,0,vec.size()-1,com(a[i]+1),com(a[i]+h[i]),(100.0-r[i])/100);
		mulRange(0,0,vec.size()-1,com(a[i]-h[i]),com(a[i]-1),(100.0-l[i])/100);
	}
	ld out=0;
	lop(i,m)
	out+=getRange(0,0,vec.size()-1,com(b[i]),com(b[i]))*z[i];
	cout<<fixed<<setprecision(15)<<out;

}
