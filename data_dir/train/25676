#include <bits/stdc++.h>
using namespace std;
const int N = 2e5 + 10;
int n, m, q, mark[N], up[N], dw[N];
set<int> s[N], f[N];
vector<int> gr[N];
void dfs(int v, int par = -1) {
	mark[v] = 1;
	vector<int> nm;
	for (auto u : gr[v]) {
		if (mark[u])
			up[v]++;
		else
			nm.push_back(u);
	}
	up[v] -= (par != -1);
	for (auto u : nm) {
		if (!mark[u]) {
			dfs(u, v);
			up[v] += up[u], dw[v] += dw[u];
			if (f[u].size() + s[u].size() > f[v].size() + s[v].size()) 
				f[v].swap(f[u]), s[v].swap(s[u]);
			for (auto x : f[u]) {
				if (s[v].find(x) != s[v].end())
					s[v].erase(x);
				else
					f[v].insert(x);

			}
			for (auto x : s[u]) {
				if (f[v].find(x) != f[v].end())
					f[v].erase(x);
				else
					s[v].insert(x);
			}
		}
		else 
			dw[v]++;
	}
//	cout << " v = " << up[v] << ", " << dw[v] << endl;
	if (up[v] == dw[v] && !s[v].empty() && !f[v].empty() || par == -1 && s[v].size() + f[v].size() != 0) {
		cout << "No";
		exit(0);
	}
}
int main() {
	ios_base::sync_with_stdio (false), cin.tie(0), cout.tie(0);
	cin >> n >> m >> q;
	for (int i = 0; i < m; i++) {
		int x, y;
		cin >> x >> y;
		x--, y--;
		gr[x].push_back(y), gr[y].push_back(x);
	}	
	for (int i = 0; i < q; i++) {
		int ss, ff;
		cin >> ss >> ff;
		ss--, ff--;
		s[ss].insert(i), f[ff].insert(i);
	}
	for (int i = 0; i < n; i++) {
		if (!mark[i])
			dfs(i);
	}
	cout << "Yes";
	return 0;
}
