#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>
#include <map>
#include <set>
#include <bitset>
#include <algorithm>
#include <numeric>
#include <unordered_map>
#include <sstream>
#include <iostream>
#include <cmath>
#include<cstring>
#include <cstdio>
#include <stack>
#include<iomanip>
#include<queue>
#include <unordered_set>
#include<functional>
#include<iterator>
#include<new>
#include<cstdlib>
#include<math.h>
#include<fstream>
using namespace std;
#define pi 3.141592653589793
#define ii  pair<int,int>
#define ll long long
#define p10(ans) printf("%0.10f ", ans)
#define pr(ans) printf("%d\n", ans)
#define scc(x)  scanf("%c\n", &c)
#define pll(ans) printf("%lld\n", ans)
#define scll(x) scanf("%lld",&x)
#define scd(a)  scanf("%lf", &a)
#define sci(x)  scanf("%d",&x)
#define pc(ans)  printf("%c", ans)
#define pd(a)    printf("%lf\n", a)
#define scanfchararray(arr) scanf("%s", arr)
#define printfstring(s)    printf("%s\n", s.c_str())
#define all(v)             v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)            ((int)((v).size()))
#define mod 1000000007
#define mem(arr,d) memset(arr,d,sizeof(arr))
#define inf 10000000000000000
#define ninf -10000000000000000;
#define eps 1e-10
#define nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
#define loop0(i,n) for(int i=0;i<n;++i)
#define loop1(i,n) for(int i=1;i<=n;++i)
/*ll powerr(ll base, ll exp) {
	base %= mod;
	ll result = 1;
	while (exp > 0) {
		if (exp & 1)
			result = (result * base) % mod;
		base = (base * base) % mod;
		exp >>= 1;
	}
	return result;
}

long long gcd(long long a, long long b)
{
	if (b == 0)return a; return gcd(b, a%b);
}
long long lcm(long long a, long long b) {
	return  a * b / gcd(a, b);
}
*/
const int N = 2e5+1;
int tree[6 * N];
int lazy[6 * N];
int n;
int on[N];
vector<int>arr[2*N];
pair<int, int>border[2*N];
int nodecnt = 1;
int newnum[2*N];
char in[5];
void dfs(int s, int parent) {
	border[s].first = nodecnt;
	newnum[nodecnt] = s;
	for (auto u : arr[s]) {
		if (u != parent)++nodecnt,dfs(u, s);
	}
	border[s].second = nodecnt;
}
void propagate(int idx,int l,int r) {
	if (!lazy[idx])return;
	lazy[idx << 1] += lazy[idx]; lazy[(idx << 1) | 1] += lazy[idx];
	if (lazy[idx] & 1) {
		tree[idx] = max(0, (r - l + 1) - tree[idx]);
	}
	lazy[idx] = 0;
}
void build(int l = 1, int r = n, int idx = 1) {
	if (l == r) {
		tree[idx] = on[newnum[l]];
		return;
	}
	int mid = (l + r) >> 1; 
	build(l, mid, idx << 1); build(mid + 1, r, (idx << 1) | 1);
	tree[idx] = tree[(idx << 1)] + tree[(idx << 1) | 1];
}
int getans(int x, int y, int l = 1, int r = n, int idx = 1) {
	propagate(idx,l,r);
	if (l > y || r < x)return 0;
	if (l >= x&&r <= y)return tree[idx];
	int mid = (l + r) >> 1;
	return getans(x, y, l, mid, idx << 1) + getans(x, y, mid + 1, r, (idx << 1) | 1);
}
void update(int x, int y, int l = 1, int r = n, int idx = 1) {
	propagate(idx, l, r);
	if (l > y || r < x)return;
	if (l >= x&&r <= y) {
		lazy[idx]++;
		propagate(idx, l, r);
		return;
	}
	int mid = (l + r) >> 1;
	update(x,y,l, mid, idx << 1); update(x,y,mid + 1, r, (idx << 1) | 1);
	tree[idx] = tree[(idx << 1)] + tree[(idx << 1) | 1];
}
int main() {
	int x;
	sci(n);
	for (int i = 2; i <= n; ++i) { sci(x); arr[x].push_back(i);}
	for (int i = 1; i <= n; ++i)sci(on[i]);
	dfs(1, -1);
	build();
	int q, c;
	sci(q);
	while (q--) {
		scanfchararray(in); sci(c);
		if (in[0] == 'p') {
			update( border[c].first, border[c].second);
		}
		else {
			pr(getans(border[c].first, border[c].second));
		}
	}
	return 0;
}


