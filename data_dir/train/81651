#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<int, int>, // change type
//        null_type,
//        less<pair<int, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-8);


string g[5205];
int rEqual[5205][5205], cEqual[5205][5205];
int n;

bool check(int x)
{
    for (int j = 0; j < n; j += x)
    {
        for (int i = 0; i < n; i += x)
        {
            if (rEqual[i][j] < x || cEqual[i][j] < x)
                return false;
            for (int st = j; st < j + x; ++st)
            {
                if (cEqual[i][st] < x)
                    return false;
            }
        }
    }
    return true;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    cin >> n;
    rep(i,0,n)
    {
        rep(j,0,n/4)
        {
            char c;
            cin >> c;
            if (isalpha(c))
            {
                c -= 'A' - 10;
            }
            else
                c -= '0';
            string bin;
            while (c)
            {
                bin += c % 2 + '0';
                c /= 2;
            }
            while (sz(bin) < 4)
                bin += '0';
            reverse(all(bin));
            g[i] += bin;
        }
    }
    rep(i,0,n)
    {
        rep(j,0,n)
        {
            int st = j;
            char c = g[i][j];
            while(j < n && g[i][j] == c)
            {
                rEqual[i][st]++;
                ++j;
            }
            --j;
            for (int k = st + 1; k <= j; ++k)
                rEqual[i][k] = rEqual[i][k - 1] - 1;
        }
    }
    rep(j,0,n)
    {
        rep(i,0,n)
        {
            int st = i;
            char c = g[i][j];
            while(i < n && g[i][j] == c)
            {
                cEqual[st][j]++;
                ++i;
            }
            --i;
            for (int k = st + 1; k <= i; ++k)
                cEqual[k][j] = cEqual[k - 1][j] - 1;
        }
    }
//    rep(i,0,n)
//    {
//        rep(j,0,n)
//            cout << g[i][j] << ' ';
//        cout << endl;
//    }
//    cout << endl;
//    rep(i,0,n)
//    {
//        rep(j,0,n)
//            cout << rEqual[i][j] << ' ';
//        cout << endl;
//    }
//    cout << endl;
//    rep(i,0,n)
//    {
//        rep(j,0,n)
//            cout << cEqual[i][j] << ' ';
//        cout << endl;
//    }

    vector<int> div;
    for (int i = 1; i <= n/i; ++i)
    {
        if (n%i == 0)
        {
            div.pb(i);
            if (n/i != i)
                div.pb(n/i);
        }
    }
    sort(all(div), greater<int>());
    for (auto d : div)
    {
        if (check(d))
        {
            cout << d << '\n';
            return 0;
        }
    }
    assert(false);
    return 0;
}