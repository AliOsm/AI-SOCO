/*
.....   .   .   .   .
  .    . .   . .   . .
  .   .....   .   .....
  .  .     .  .  .     .
*/
#pragma GCC optimize("Ofast")
// #pragma GCC optimize("no-stack-protector")
// #pragma GCC optimize("unroll-loops")
// #pragma GCC optimize("fast-math")
//#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native")
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>
 
using namespace std;
 
 
 
#define prev prev228
#define index index228
#define left left228
#define right right228
#define hash hash228
#define y1 y1228
#define int long long

template<typename T> void uin(T &a, T b) {
    if (b < a) a = b;
}

template<typename T> void uax(T &a, T b) {
    if (b > a) a = b;
}

const int mod = 1e9 + 7;

const int maxn = 1000 * 1000 + 228;

int mult(int a, int b) {
	return (a * b) % mod;
}

void add(int &a, int b) {
	a += b;
	if (a >= mod) a -= mod;
}

int lp[maxn];

bool pr[maxn];

void prepare() {
	memset(pr, 1, sizeof(pr));
	pr[0] = pr[1] = 0;
	for (int i = 2; i <= maxn; ++i) {
		if (pr[i]) {
			lp[i] = i;
			for (int j = i * i; j <= maxn; j += i) {
				pr[j] = 0;
				if (!lp[j]) {
					lp[j] = i;
				}
			}
		}
	}
}

int power(int a, int b) {
	int res = 1;
	while (b) {
		if (b & 1) {
			res = mult(res, a);
		}
		a = mult(a, a);
		b >>= 1;
	}
	return res;
}

int back(int x) {
	return power(x, mod - 2);
}

int f[2 * maxn];

int C(int n, int k) {
	return (f[n] * back(mult(f[k], f[n - k]))) % mod;
}

void solve() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	int q;
	cin >> q;
	f[0] = 1;
	for (int i = 1; i <= 2 * maxn; ++i) {
		f[i] = f[i - 1] * i;
		if (f[i] >= mod) {
			f[i] %= mod;
		}
	}
	prepare();
	for (int it = 0; it < q; ++it) {
		int x, y;
		cin >> x >> y;
		int _x = x;
		int res = 1;
		while (_x > 1) {
			int p = lp[_x];
			int cnt = 0;
			while (_x % p == 0) {
				++cnt;
				_x /= p;
			}
			res = mult(res, C(cnt + y - 1, cnt));
		}
		res *= power(2, y - 1);
		res %= mod;
		cout << res << '\n';
	}
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	// freopen("equal.in", "r", stdin);
	// freopen("equal.out", "w", stdout);
	solve();
	return 0;
} //