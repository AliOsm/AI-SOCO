#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <set>
#include <string>
#include <vector>

using namespace std;
typedef long long int64;

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

const int MaxN = 100005, MaxC = 0x3F3F3F3F, NA = -1;

int x [MaxN << 1], y [MaxN << 1];
int n, t;

inline int64 vp (int64 x0, int64 y0, int64 x1, int64 y1, int64 x2, int64 y2)
{
 return (x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0);
}

int main (void)
{
 int i, j, s, x0, y0;
 int64 res;
 while (scanf (" %d", &n) != EOF)
 {
  for (i = 0; i < n; i++)
   scanf (" %d %d", &x[i], &y[i]);
  for (i = 0; i <= n; i++)
  {
   x[i + n] = x[i];
   y[i + n] = y[i];
  }
  scanf (" %d", &t);
  for (s = 0; s < t; s++)
  {
   scanf (" %d %d", &x0, &y0);
   for (i = 0, j = 1; i < n; i++, j++)
    if (vp (x[i], y[i], x[j], y[j], x0, y0) >= 0)
     break;
   if (i < n)
    res = 0;
   else
   {
    res = n;
    res *= n - 1;
    res *= n - 2;
    assert (res % 6 == 0);
    res /= 6;
    for (i = 0, j = 1; i < n; i++)
    {
     while (vp (x[i], y[i], x[j], y[j], x0, y0) < 0)
      j++;
     assert (j - i >= 2);
//     printf (INT64 " %d %d\n", res, i, j);
     res -= ((int64) (j - i - 1)) * (j - i - 2) >> 1;
    }
   }
   printf (INT64 "\n", res);
  }
 }
 return 0;
}
