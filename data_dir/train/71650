#include <bits/stdc++.h>

using namespace std;
#define ll long long
const int N=500005;

ll n,m,k;
ll par[N],dis[N],vis[N];
vector<vector<pair<ll,pair<ll,ll>>>> adj(N);
ll cnt=0;

void Pre(){
    for(ll i=0;i<N;i++){
        dis[i]=1e18;
    }
}

void Dijkstra(ll src){
    dis[src]=0;
    par[src]=-1;
    priority_queue<pair<ll,pair<ll,ll>>> pq;
    pq.push({0,{1,src}});
    while(!pq.empty()){
        ll u=pq.top().second.second;
        ll is=pq.top().second.first;
        pq.pop();
        if(vis[u]){
            continue;
        }
        if(!is){
            cnt++;
        }
        vis[u]=1;
        for(int i=0;i<adj[u].size();i++){
            ll v=adj[u][i].first;
            ll cost=adj[u][i].second.second;
            ll nd=dis[u]+cost;
            ll cis=adj[u][i].second.first;
            if(dis[v]>nd||(dis[v]==nd&&cis)){
                par[v]=u;
                dis[v]=nd;
                pq.push({-nd,{cis,v}});
            }
        }
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin>>n>>m>>k;

    for(int i=0;i<m;i++){
        ll u,v,x;
        cin>>u>>v>>x;
        adj[u].push_back({v,{1,x}});
        adj[v].push_back({u,{1,x}});
    }
    for(int i=0;i<k;i++){
        ll v,x;
        cin>>v>>x;
        adj[1].push_back({v,{0,x}});
        adj[v].push_back({1,{0,x}});
    }

    Pre();
    Dijkstra(1);

    cout<<k-cnt<<endl;
    return 0;
}
