#include <iostream>
#include <stdio.h>
#include <string>
#include <memory.h>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <time.h>
#include <assert.h>
#include <cmath>
#include <stack>
#include <string.h>
#include <sstream>
#include <algorithm>
using namespace std;
typedef long long ll;
const int N = 1e5 + 5;
char s[N];
char t[N];
int f[N];
int n, k, len;
void build() {
	int j = 0;
	for (int i = 1; i < len; ++i) {
		while (j && t[i] != t[j])
			j = f[j - 1];
		if (t[i] == t[j])
			++j;
		f[i] = j;
	}
}
vector<int> pos;
int calc() {
	build();
	pos.clear();
	int res = 1e9;
	int j = 0;
	for (int i = 0; i < n; ++i) {
		while (j && s[i] != t[j])
			j = f[j - 1];
		if (s[i] == t[j])
			++j;
		if (j == len) {
			pos.push_back(i - len + 1);
			if (pos.size() >= k)
				res = min(res, pos.back() + len - 1 - pos[pos.size() - k] + 1);
			j = f[j - 1];
		}
	}
	if (res > 1e8)
		res = -1;
	return res;
}
vector<pair<int, string> > Q;
vector<vector<int> > v;
vector<int> e;
vector<vector<int> > at;
void insert(int qidx) {
	int cur = 0;
	for (int i = 0; t[i]; ++i) {
		char c = t[i] - 'a';
		if (v[cur][c] == -1) {
			v[cur][c] = v.size();
			v.push_back(vector<int>(26, -1));
			e.push_back(-1);
		}
		cur = v[cur][c];
	}
	e[cur] = qidx;
}
int main()
{
	v.reserve(1000000);
	e.reserve(1000000);
	v.push_back(vector<int>(26, -1));
	e.push_back(-1);
	scanf("%s", s);
	n = strlen(s);
	int Z = 200;
	int q;
	scanf("%d", &q);
	at.resize(q);
	vector<int> res(q, 1e9);
	for (int i = 0; i < q; ++i) {
		scanf("%d %s", &k, t);
		Q.push_back(make_pair(k, t));
		if (Q.back().second.size() < Z)
			insert(i);
		else {
			len = strlen(t);
			res[i] = calc();
		}
	}
	for (int i = 0; i < n; ++i) {
		int cur = 0;
		for (int j = 0; i + j < n && j < Z; ++j) {
			char c = s[i + j] - 'a';
			if (v[cur][c] == -1)
				break;
			cur = v[cur][c];
			if (e[cur] != -1) {
				int z = e[cur];
				int len = Q[z].second.size();
				int k = Q[z].first;
				at[z].push_back(i + j - len + 1);
				auto &pos = at[z];
				if (pos.size() >= k)
					res[z] = min(res[z], pos.back() + len - 1 - pos[pos.size() - k] + 1);
			}
		}
	}
	for (int i = 0; i < Q.size(); ++i) {
		if (res[i] > 1e8)
			res[i] = -1;
		printf("%d\n", res[i]);
	}
	return 0;
}