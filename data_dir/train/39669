#include<bits/stdc++.h>
using namespace std;
#define all(v) ((v).begin()),((v).end())
#define ll long long
#define fastIO cout << fixed << setprecision(0), ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr)
double const EPS = 1e-9, PI = acos(-1);
const int N = 1e6 + 9, M = 2e3 + 9, OO = 1e9 + 7, MOD = 1e9 + 7;
const ll inf = 1e18;

pair<int, int> vv[N];
vector<int> stairs;
vector<int> elev;
ll speedE;

ll goStairs(int a, int b, int x, int y) {
  if(stairs.empty())
    return inf;
  int idx = lower_bound(stairs.begin(), stairs.end(), b) - stairs.begin();
  ll it = stairs[idx];
  ll cur = abs(it - b) + abs(a - x) + abs(it - y);
  if(idx > 0) {
    it = stairs[idx-1];
    cur = min(cur, abs(it - b) + abs(a - x) + abs(it - y));
  }
  if(idx + 1 < (int)stairs.size()) {
    it = stairs[idx+1];
    cur = min(cur, abs(it - b) + abs(a - x) + abs(it - y));
  }
  return cur;
}

ll goElev(int a, int b, int x, int y) {
  if(elev.empty())
    return inf;
  int idx = lower_bound(elev.begin(), elev.end(), b) - elev.begin();
  ll it = elev[idx];
  ll cur = abs(it - b) + (abs(a - x) / speedE) + (abs(a - x) % speedE != 0) + abs(it - y);
  if(idx > 0) {
    it = elev[idx-1];
    cur = min(cur, abs(it - b) + (abs(a - x) / speedE) + (abs(a - x) % speedE != 0) + abs(it - y));
    cur = min(cur, abs(it - b) + (abs(a - x) / speedE) + goStairs(a + (abs(a - x) / speedE) * speedE, it, x, y));
  }
  if(idx + 1 < (int)elev.size()) {
    it = elev[idx+1];
    cur = min(cur, abs(it - b) + (abs(a - x) / speedE) + (abs(a - x) % speedE != 0) + abs(it - y));
    cur = min(cur, abs(it - b) + (abs(a - x) / speedE) + goStairs(a + (abs(a - x) / speedE) * speedE, it, x, y));
  }
  return cur;
}

int main() {
  fastIO;
#ifdef LOCAL
  freopen("input.in", "rt", stdin);
#endif
  ll n, m, numE, numS, q, a, b, x, y;
  cin >> n >> m >> numS >> numE >> speedE;
  elev.resize(numE);
  stairs.resize(numS);
  for(int &it: stairs)
    cin >> it;
  for(int &it: elev)
    cin >> it;
  cin >> q;
  while(q--) {
    cin >> a >> b >> x >> y;
    ll ans = inf;
    if(a == x)
      ans = abs(b - y);
    else {
      ans = min(ans, goStairs(a, b, x, y));
      ans = min(ans, goElev(a, b, x, y));
    }
    cout << ans << '\n';
  }
  return 0;
}