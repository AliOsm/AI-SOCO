#include <bits/stdc++.h>
using namespace std;

typedef pair<int, bool> edge;
const int N = 2e5 + 100;

int n, u, v, down[N][2], up[N][2];
bool b;
long long ans;
vector<edge> nei[N];

void dfs_down(int v, int par = -1) {
	for (edge e: nei[v])
		if(e.first != par) {
			int u = e.first;
			dfs_down(u, v);
			if(e.second)
				down[v][1] += down[u][1] + 1;
			else
				down[v][0] += 1 + down[u][0] + down[u][1];
		}
}

void dfs_up(int v, int par = -1) {
	for (edge e: nei[v])
		if(e.first != par) {
			int u = e.first;
			if(e.second) {
				up[u][1] = up[v][1] + 1;
				up[u][1] += down[v][1] - down[u][1] - 1;
			}
			else {
				up[u][0] = up[v][0] + up[v][1] + 1;
				up[u][0] += down[v][0] + down[v][1] - down[u][0] - down[u][1] - 1;
			}
			dfs_up(u, v);
		}	
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n;
	for (int i = 0; i < n - 1; i++) {
		cin >> u >> v >> b;
		nei[--u].push_back(edge(--v, b));
		nei[v].push_back(edge(u, b));
	}
	dfs_down(0);
	dfs_up(0);
	
	for (int i = 0; i < n; i++)
		for (int j = 0; j < 2; j++)
			ans += up[i][j] + down[i][j];
	cout << ans;
	return 0;
}
