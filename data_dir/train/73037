#include <bits/stdc++.h>

using namespace std;
#define ll long long
const int N = 1e5 + 5;
int c[N][4];
vector<int> g[N];

void kill() {
    cout << "-1";
    exit(0);
}

int nodes[N], cur = 0;

void dfs(int node, int par) {
    bool flag = 0;
    nodes[cur++] = node;
    for (auto u:g[node]) {
        if (u == par)continue;
        if (flag)
            kill();
        dfs(u, node);
        flag = 1;

    }
}

int col[N];

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n;
    cin >> n;
    for (int j = 0; j < 3; j++) {
        for (int i = 1; i <= n; i++)cin >> c[i][j];
    }
    for (int i = 1; i < n; i++) {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    int root = 0;
    for (int i = 1; i <= n; i++)if (g[i].size() == 1) root = i;
    dfs(root, root);
    int perm[4] = {1, 2, 3};
    ll ans = 1e18;
    int res[4];
    do {
        ll cur = 0;
        for (int i = 0; i < n; i++) {
            cur += c[nodes[i]][perm[i % 3] - 1];
        }
        if (ans > cur) {
            ans = cur;
            for (int i = 0; i < 3; i++) res[i] = perm[i];
        }
    } while (next_permutation(perm, perm + 3));

    cout << ans << endl;
    for (int i = 0; i < n; i++) {
        col[nodes[i]] = res[i % 3];
    }
    for (int i = 1; i <= n; i++)cout << col[i] << " ";
    return 0;
}
