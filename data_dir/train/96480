#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

#define rep(i,n) for(int i=0;i<(n);++i)
#define REP(i,n) for(int i=1;i<=(n);++i)
#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define FORD(i,h,l) for(int i=(h);i>=(l);--i)
#define print(expr) cout<<(#expr)<<" : "<<(expr)<<endl

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long int64;
typedef pair<int,int> pii;

const int mod=1000000007;
class Int{
public:
	int data;
	int f(int _t){int _s=_t % mod;if(_s<0) _s += mod;return _s;}
	Int(int _data=0): data(_data) {}
	Int operator + (Int _data) { return f(data+_data.data);}
	Int operator - (Int _data) { return f(data-_data.data);}
	Int operator * (Int _data) { return (int64(data)*int64(_data.data))%mod;}
	Int operator +=(Int _data) { *this=*this+_data; return *this;}
	Int operator -=(Int _data) { *this=*this-_data; return *this;}
	Int operator *=(Int _data) { *this=*this*_data; return *this;}
	Int pow(int s){	if(!s) return 1;Int res=pow(s>>1);res=res*res;if(s&1) res=res*(*this);return res;}
};
istream& operator>> (istream &in, Int &t){in>>t.data; t.data=t.f(t.data); return in;}
ostream& operator<< (ostream &out,Int t){out<<t.data; return out;}

const int maxn=770;
string s;
int n;
Int dp[maxn][maxn][3][3];
bool vis[maxn][maxn][3][3];

int di[]={0,0,1,2};
int dj[]={1,2,0,0};

inline bool can(int a,int b) { return !(a>0 && b>0 && a!=b); }

Int Dp(int a,int b,int l,int r)
{
	if(a>b) return 1;
	if(a+1==b) return 1;
	Int &res=dp[a][b][l][r];
	if(vis[a][b][l][r]) return res;
	vis[a][b][l][r]=true;
	res = 0;
	vector<pii> buf;
	int ss=a, ct=0;
	FOR(i,a+1,b-1)
	{
		if(s[i]=='(') ct++; else ct--;
		if(!ct) buf.PB(MP(ss+1,i)), ss=i;
	}
	if(buf.size()==1)
	{
		rep(k,4)
		{
			int i=di[k], j=dj[k];
			if(can(l,i) && can(r,j)) res += Dp(a+1,b-1,i,j); 
		}
		return res;
	}
	else
	{
		int m=buf.size();
		Int dpp[maxn][3];
		rep(i,m) rep(j,3) dpp[i][j]=0;
		rep(k,4)
		{
			int i=di[k], j=dj[k];
			if(can(l,i)) dpp[0][j] += Dp(buf[0].first,buf[0].second,i,j);
		}
		REP(cur,m-2)
		{
			int ca=buf[cur].first, cb=buf[cur].second;
			rep(k,4)
			{
				int i=di[k], j=dj[k];
				rep(rp,3) if(can(i,rp)) dpp[cur][j] += dpp[cur-1][rp]*Dp(ca,cb,i,j);
			}
		}
		rep(k,4)
		{
			int i=di[k], j=dj[k];
			rep(rp,3) if(can(i,rp) && can(j,r)) dpp[m-1][j] += dpp[m-2][rp]*Dp(buf[m-1].first,buf[m-1].second,i,j);
		}
		return res = dpp[m-1][0]+dpp[m-1][1]+dpp[m-1][2];
	}
}

int main(void)
{
	cin>>s; n=s.size();
	s="("+s+")";
	cout<<Dp(0,n+1,0,0)<<endl;
	return 0;
}