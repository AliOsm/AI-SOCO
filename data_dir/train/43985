#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cctype>
#include<cstdlib>
#include<algorithm>
#include<bitset>
#include<vector>
#include<list>
#include<deque>
#include<queue>
#include<map>
#include<set>
#include<stack>
#include<cmath>
#include<sstream>
#include<fstream>
#include<iomanip>
#include<ctime>
#include<complex>
#include<functional>
#include<climits>
#include<cassert>
#include<iterator>
using namespace std;
int n;
#define MAX 100002
bool ok(int a){
    while (a){
        int val = a % 10;
        if (val == 4 || val == 7){

        }
        else{
            return false;
        }
        a /= 10;
    }
    return true;
}
vector<pair<int, bool> > v[MAX];
vector<pair<int, bool> > g[MAX];
bool use[MAX];
long long int child[MAX];
inline void dfs(int b){
    use[b] = true;
    child[b]++;
    for (int i = 0; i < v[b].size(); i++){
        int go = v[b][i].first;
        if (use[go]){
            continue;
        }
        g[b].push_back(v[b][i]);
        dfs(go);
        child[b] += child[go];
    }
}
long long int countt[MAX];
long long int way = 0;
inline void dfs2(int b){
    long long int kari = 0LL;
    for (int i = 0; i < g[b].size(); i++){
        int go = g[b][i].first;
        dfs2(go);
        long long int tmp = 0;
        if (g[b][i].second){
            tmp = child[go];
        }
        else{
            tmp = countt[go];
        }
        way += tmp*(tmp - 1LL) / 2LL;
        way += tmp*kari;
        kari += tmp;
    }
    countt[b] = kari;
}
inline void dfs3(int b, long long int sum){
    way += countt[b] * sum;
    way += sum*(sum - 1LL) / 2LL;
    for (int i = 0; i < g[b].size(); i++){
        if (g[b][i].second){
            long long int summ = n - child[g[b][i].first];
            dfs3(g[b][i].first, summ);
            continue;
        }
        long long int summ = countt[b] - countt[g[b][i].first];
        dfs3(g[b][i].first, summ+sum);
    }
}
int main(){
    scanf("%d", &n);
    for (int i = 1; i < n; i++){
        int a, b, c;
        scanf("%d%d%d", &a, &b, &c);
        a--;
        b--;
        c = ok(c);
        v[a].push_back(make_pair(b, c));
        v[b].push_back(make_pair(a, c));
    }
    dfs(0);
    dfs2(0);
    dfs3(0,0);
    way *= 2LL;
    printf("%lld\n", way);
    return 0;
}