#include <bits/stdc++.h>
#define all(x) (x).begin(), (x).end()
#define isz(x) (int)(x).size()
typedef std::vector<int> vi;
typedef std::vector<vi> vvi;
typedef std::pair<int,int> pii;
typedef std::vector<pii> vii;
template<typename T>
std::istream& operator>>(std::istream& is, std::vector<T>& vec) {
    for (auto &it : vec) { is >> it; }
    return is;
}
template<typename T1, typename T2>
std::istream& operator>>(std::istream& is, std::pair<T1,T2>& p) {
    return is >> p.first >> p.second;
}

int solve(const vi& order, const vii& swaps) {
    const int n = isz(order);
    const int need = order.back();
    vvi next(n);
    for (auto &it : swaps) { next[it.first].push_back(it.second); }
    std::vector<int> opened(n);
    int nOpened = 1, pos = n;
    opened[order.back()] = 1;
    for (int i = n-2; i >= 0; --i) {
        const int u = order[i];
        int canSkip = 0;
        for (auto v : next[u]) {
            if (canSkip == nOpened) {
                break;
            }
            if (opened[v]) {
                canSkip++;
            }
        }
        if (canSkip == nOpened) {
            pos--;
        } else {
            opened[u] = true;
            nOpened++;
        }
    }
    return n - pos;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    int n, m;
    while (std::cin >> n >> m) {
        vi order(n);
        vii swaps(m);
        std::cin >> order >> swaps;
        for (auto &it : order) { it--; }
        for (auto &it : swaps) { it.first--; it.second--; }
        std::cout << solve(order,swaps) << std::endl;
    }
    return 0;
}