#include <bits/stdc++.h>
#define pb push_back
 
using namespace std;
using ll = long long int;

void solve()
{
	int n, b; cin >> n >> b;
	deque<array<ll, 3>> q;
	ll ans[n]; memset(ans, -1, sizeof ans);
	ll fin = -1, cursize = 0;
	for (int i = 0; i < n; ++i)
	{
		ll t, d; cin >> t >> d;
		if (t < fin and cursize == b + 1)
		{
			ans[i] = -1;
			continue;
		}
		if (t < fin)
		{
			++cursize;
			auto u = q.back();
			q.push_back({t, d, i});
			ans[i] = max(ans[u[2]], t) + d;
			continue;
		}
		if (cursize == 0)
		{
			q.push_back({t, d, i});
			ans[i] = fin = t + d;
			++cursize;
			continue;
		}
		if (cursize == 1)
		{
			ans[i] = max(fin, t) + d;
			fin = ans[i];
			q.pop_front();
			q.push_back({t,d,i});
			continue;
		}
		q.pop_front();
		assert(!q.empty());
		auto u = q.front();
		fin = ans[u[2]];
		u = q.back();
		ans[i] = max(ans[u[2]], t) + d;
		q.push_back({t, d, i});
	}
	for (int i = 0; i < n; ++i)
		cout << ans[i] << ' ';
}
 
//  ---------------------Template---------------------------
void InputSetup()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
 
	#ifdef LOCAL
	freopen("in", "r", stdin);
	freopen("out", "w", stdout);
	#endif
}
 
int main(void)
{
	auto start = chrono::high_resolution_clock::now();
 
	InputSetup();
	solve();
 
	auto finish = chrono::high_resolution_clock::now();
	cerr << "Time elapsed: " << (chrono::duration<long double>(finish-start)).count() << "s\n";
}
//  ---------------------Template---------------------------