
#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<LL, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
#define LL                  long long
#define ull                 unsigned long long
#define scl(n)              scanf("%lld", &n)
#define scf(n)              scanf("%lf", &n)
#define sci(n)              scanf("%d", &n)
#define scii(n,m)           scanf("%d %d",&n,&m)
#define sciii(n,m,p)        scanf("%d %d %d",&n,&m,&p)
#define scs(n)              scanf("%s", n)
#define pfi(n)              printf("%d\n",n)
#define pfl(n)              printf("%I64d ",n)
#define pfs(s)              printf("%s\n",s)
#define dist2D(x1,y1,x2,y2)         ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))
#define dist3D(x1,y1,z1,x2,y2,z2)   ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2))

#define	deb(x)		        cout<<#x<<" "<<x<<endl

#define FASTREAD            ios_base::sync_with_stdio(0);cin.tie(nullptr);
#define MOD                 1000000007
#define MODP                99999999999973LL
#define pb                  push_back
#define mp                  make_pair
#define pp                  pair<LL,LL>
#define memo(a,b)           memset(a,b,sizeof(a))
#define INF                 1e9+5
#define EPS                 1e-8
#define Pi                  acos(-1.0)

LL bigmod(LL b, LL p, LL md){if(p==0) return 1;if(p%2==1){ return ((b%md)*bigmod(b,p-1,md))%md;} else {LL y=bigmod(b,p/2,md);return (y*y)%md;}}
#define N 100005

LL arr[N];
LL tree[4*N];

void init(int node, int b, int e)
{
    if(b==e)
    {
        tree[node]=arr[b];
        return ;
    }
    int mid=(b+e)/2;
    init(2*node,b,mid);
    init(2*node+1,mid+1,e);
    tree[node]=__gcd(tree[2*node],tree[2*node+1]);
}

int query(int node,int b, int e, int l, int r)
{
    if(b>r || e<l)
        return 0;
    if(b>=l && e<=r)
    {
        return tree[node];
    }

    int mid=(b+e)/2;
    LL p1=query(2*node,b,mid,l,r);
    LL p2=query(2*node+1,mid+1,e,l,r);
    return __gcd(p1,p2);
}

unordered_map<LL,vector<int> >val;

int main()
{
    FASTREAD;
    int n;
    cin>>n;

    for(int i=1;i<=n;i++)
    {
        cin>>arr[i];
        val[arr[i]].pb(i);
    }
    init(1,1,n);

    int m;
    cin>>m;
    while(m--)
    {
        int l,r;
        cin>>l>>r;

        LL gcd=query(1,1,n,l,r);
       // cout<<"  : "<<l<<" "<<r<<" : "<<gcd<<endl;
        LL tot=r-l+1;

        if(val[gcd].size()==0)
        {
            cout<<tot<<"\n";
        }
        else if(val[gcd][0]>r || val[gcd].back()<l)
        {
            cout<<tot<<"\n";
        }
        else
        {

            int idx1=lower_bound(val[gcd].begin(),val[gcd].end(),l)-val[gcd].begin();
            int idx2=upper_bound(val[gcd].begin(),val[gcd].end(),r)-val[gcd].begin();

            LL count_gcd=idx2-idx1;

            cout<<tot-count_gcd<<"\n";


        }

    }

    return 0;
}

/* LL dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* LL dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* LL dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* LL dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction

