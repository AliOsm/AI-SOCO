#include <bits/stdc++.h>
using namespace std;

typedef unsigned int ui;
typedef unsigned long long ull;
//typedef long long ll;
typedef pair<int, int> pii;
typedef double rl;

#define pb push_back
#define mp make_pair
#define min3(a, b, c) min(min(a, b), c)
#define max3(a, b, c) max(max(a, b), c)

#if 1
#define dbg(x)
#else
#define dbg(x) cerr << "DBG " << #x << " " << (x) << endl;
#endif

//#define assert(x)
int n;

int query(int L, int D, int R, int U)
{
    dbg("QUERY");
    //dbg(L);
    //dbg(D);
    //dbg(R);
    //dbg(U);

    assert(1 <= L && L<= R && 1 <= D && D <= U && U<=n);

    //cout << "? " << R.x1 << ' ' << R.y1 << ' ' << R.x2 << ' ' << R.y2 << endl;
    cout << "? " << L << ' ' << D << ' ' << R << ' ' << U << endl;
    cout.flush();
    int ans;
    cin >> ans;
    assert(0<=ans && ans <= 2);
    return ans;
}

bool checkAns(int L, int D, int R, int U)
{
    dbg("CHECKING ANS: ");
    dbg(L);
    dbg(D);
    dbg(R);
    dbg(U);

    int temp=query(L, D, R, U);
    if(temp!=1) return false;

    if(L < R)
    {
        dbg("CHECK X");
        if(query(L+1, D, R,   U)!=0) return false;
        if(query(L,   D, R-1, U)!=0) return false;
    }

    if(D < U)
    {
        dbg("CHECK Y");
        if(query(L, D+1, R, U  )!=0) return false;
        if(query(L, D,   R, U-1)!=0) return false;
    }

    return true;
}

int ll[2], dd[2], rr[2], uu[2];
int idx=0;

void solve1(int L, int D, int R, int U)
{
    //assert(query(L, D, R, U)==1);
    dbg("SOLVE1------");
    dbg(L);
    dbg(D);
    dbg(R);
    dbg(U);

    // right
    {
        int LB=L;
        int RB=R;

        while(LB<RB)
        {
            int M=(LB+RB)/2;

            if(query(L, D, M, U)==1) RB=M;
            else                     LB=M+1;
        }
        R=RB;
    }

    // left
    {
        int LB=L;
        int RB=R;
        while(LB<RB)
        {
            int M=(LB+RB+1)/2;

            if(query(M, D, R, U)==1) LB=M;
            else                     RB=M-1;
        }
        L=LB;
    }

    // top
    {
        int DB=D;
        int UB=U;

        while(DB<UB)
        {
            int M=(DB+UB)/2;

            if(query(L, D, R, M)==1) UB=M;
            else                     DB=M+1;
        }
        U=UB;
    }

    // bottom
    {
        int DB=D;
        int UB=U;

        while(DB<UB)
        {
            int M=(DB+UB+1)/2;

            if(query(L, M, R, U)==1) DB=M;
            else                     UB=M-1;
        }
        D=DB;
    }

    //checkAns(L, D, R, U);
    dbg("FOUND?");
    dbg(L);
    dbg(D);
    dbg(R);
    dbg(U);


    ll[idx]=L;
    dd[idx]=D;
    rr[idx]=R;
    uu[idx]=U;
    idx++;
}

bool solve_hor(int L, int D, int R, int U)
{
    dbg("HOR------");
    dbg(L);
    dbg(D);
    dbg(R);
    dbg(U);

    // right
    {
        int LB=L;
        int RB=R;

        while(LB<RB)
        {
            int M=(LB+RB)/2;

            if(query(L, D, M, U)<1) LB=M+1;
            else                    RB=M;
        }

        int M=LB;

        dbg("HOR");
        dbg(M);

        if(query(L, D, M, U)==1 && query(M+1, D, R, U)==1)
        {
            solve1(L,   D, M, U);
            solve1(M+1, D, R, U);
        }
        else return false;
    }

    bool res1=checkAns(ll[0], dd[0], rr[0], uu[0]);
    bool res2=checkAns(ll[1], dd[1], rr[1], uu[1]);

    //return res1 && res2;
    assert(res1 && res2);
    return true;
}

bool solve_vert(int L, int D, int R, int U)
{
    dbg("VERT------");
    dbg(L);
    dbg(D);
    dbg(R);
    dbg(U);

    // middle
    {
        int LB=D;
        int RB=U;

        while(LB<RB)
        {
            int M=(LB+RB)/2;

            if(query(L, D, R, M)<1) LB=M+1;
            else                    RB=M;
        }

        int M=LB;

        dbg("VERT");
        dbg(M);

        if(query(L, D, R, M)==1 && query(L, M+1, R, U)==1)
        {
            solve1(L,   D, R, M);
            solve1(L, M+1, R, U);
        }
        else return false;
    }

    bool res1=checkAns(ll[0], dd[0], rr[0], uu[0]);
    bool res2=checkAns(ll[1], dd[1], rr[1], uu[1]);

    assert(res1 && res2);
    return true;
}

void solve2()
{
    int L=1, D=1, R=n, U=n;

    if(solve_hor(L, D, R, U))
    {
        cout << "!";
        for(int i=0; i<2; i++) cout << ll[i] << ' ' << dd[i] << ' ' << rr[i] << ' ' << uu[i] << ' ';
        return;
    }

    if(solve_vert(L, D, R, U))
    {
        cout << "!";
        for(int i=0; i<2; i++) cout << ll[i] << ' ' << dd[i] << ' ' << rr[i] << ' ' << uu[i] << ' ';
         return;
    }

    assert(false);
}

int main()
{
	//freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    //ios_base::sync_with_stdio(false);
    //cin.tie(NULL); //cout.tie(NULL);

    cin >> n;

    solve2();

	return 0;
}
