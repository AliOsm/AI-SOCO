#include <iostream>
#include <cstring>
#include <cmath>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <algorithm>
#include <cstdio>
#include <cassert>
#include <cassert>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define sz(s) (int)(s).size()
#define all(v) (v).begin(), (v).end()

//#define prev sdajsajdklasds
//#define next adsdslasdfsdf

const int N = 300100;

int a[N];
int pos[N];
//int prev[N];
//int next[N];

int main() {
	int n;
	scanf("%d", &n);
	REP(i, n) scanf("%d", &a[i]), pos[a[i]] = i;
	/*memset(prev, -1, sizeof(prev));
	memset(next, -1, sizeof(next));
	for (int i = 1; i < n; i++) {
		next[i] = pos[i + 1];
		prev[i + 1] = pos[i];
	}*/
	//for(int i=1;i<=n;i++) cout << next[i] << " ";
	//	cout << endl;
	//for(int i=1;i<=n;i++) cout << prev[i] << " ";
	//	cout << endl;
	cout << endl;
	int q;
	scanf("%d", &q);
	REP(_, q) {
		int Q, x, y;
		scanf("%d %d %d", &Q, &x, &y);
		if (Q == 1) {
			int cur = pos[x];
			int res = 1;
			for (int i = x; i < y; i++) {
				//cout << 
				int to = pos[i + 1];
				//cout << cur << " " << to << endl;
				if (to < cur) {
					++res;
				}
				cur = to;
			}
			printf("%d\n", res);
		} else {
			--x, --y;
			swap(a[x], a[y]);
			pos[a[x]] = x;
			pos[a[y]] = y;
			/*int p = prev[a[x]], q = next[a[y]];
			int cp = a[p], cx = a[x], cy = a[y], cq = a[q];
			//cout << p << " " << x << " " << y << " " << q << endl;
			//cout << cp << " " << cx << " " << cy << " " << cq << endl;
			pos[cy] = x;
			pos[cx] = y;
			swap(a[x], a[y]);
			//REP(i, 5) cout << a[i] << " " << endl;
			next[cp] = y;
			prev[cx] = p;
			next[cx] = x;
			prev[cy] = y;
			next[cy] = q;
			prev[cq] = x;*/
		}
	}
	return 0;
}