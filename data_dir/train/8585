#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int N = 1e6 + 100;

int no_change(vector<int> v) {
    int mn = 1e9, mx = -1e9;
    for(int i = 0; i < v.size(); i++) {
        mn = min(mn, v[i]);
        mx = max(mx, v[i]);
    }
    return mx-mn+1;
}

int can_change(vector<int> v) {
    int mn = 1e9, mx = -1e9;
    int mn_idx = -1, mx_idx = -1;
    for(int i = 0; i < v.size(); i++) {
        if(mn > v[i]) {
            mn = v[i];
            mn_idx = i;
        }
        if(mx < v[i]) {
            mx = v[i];
            mx_idx = i;
        }
    }
    int ans = no_change(v);

    /// starts
    for(int i = mn_idx; i < v.size(); i++) {
        v[i]++;
    }
    if(mn_idx == 0) v.insert(v.begin()+mn_idx, 0);
    else v.insert(v.begin()+mn_idx,v[mn_idx-1]+1);

    ans = min(ans, no_change(v));

    v.erase(v.begin()+mn_idx);

    for(int i = mn_idx; i < v.size(); i++) {
        v[i]--;
    }

    /// ends


    for(int i = mn_idx; i < v.size(); i++) {
        v[i]--;
    }
    if(mn_idx == 0) v.insert(v.begin()+mn_idx, 0);
    else v.insert(v.begin()+mn_idx,v[mn_idx-1]-1);

    ans = min(ans, no_change(v));

    v.erase(v.begin()+mn_idx);

    for(int i = mn_idx; i < v.size(); i++) {
        v[i]++;
    }

    /// mx_update

    /// starts
    for(int i = mx_idx; i < v.size(); i++) {
        v[i]++;
    }
    if(mx_idx == 0) v.insert(v.begin()+mx_idx, 0);
    else v.insert(v.begin()+mx_idx,v[mx_idx-1]+1);

    ans = min(ans, no_change(v));

    v.erase(v.begin()+mx_idx);

    for(int i = mx_idx; i < v.size(); i++) {
        v[i]--;
    }

    /// ends


    for(int i = mx_idx; i < v.size(); i++) {
        v[i]--;
    }
    if(mx_idx == 0) v.insert(v.begin()+mx_idx, 0);
    else v.insert(v.begin()+mx_idx,v[mx_idx-1]-1);

    ans = min(ans, no_change(v));

    v.erase(v.begin()+mx_idx);

    for(int i = mx_idx; i < v.size(); i++) {
        v[i]++;
    }

    return ans;
}

int main() {

    // freopen("in.txt", "r", stdin);
    ios::sync_with_stdio(0);
    cin.tie(0);
    int tc;
    cin >> tc;
    while(tc--) {
        string s;
        cin >> s;
        vector<int> balance[2];
        balance[0].push_back(0);
        balance[1].push_back(0);
        int x = 0, y = 0;
        for(int i = 0; i < s.size(); i++) {
            if(s[i] == 'W') x++;
            else if(s[i] == 'S') x--;
            else if(s[i] == 'A') y++;
            else y--;
            balance[0].push_back(x);
            balance[1].push_back(y);
        }
        long long ans1 = 1ll*can_change(balance[0])*no_change(balance[1]);
        long long ans2 = 1ll*can_change(balance[1])*no_change(balance[0]);
        cout << min(ans1, ans2) << "\n";
    }
    return 0;
}
