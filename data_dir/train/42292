//void _(){
//    int n;
//    cin >> n;
//    PrimeSieve p(n);
//    vi ans(n+1);
//    int nxt = 0;
//    for(int i = 0; i <= n; ++i)
//        if(p.is_prime[i]){
//            ++nxt;
//            for(int j = i; j <= n; j += i)
//                if(ans[j] == 0)
//                    ans[j] = nxt;
//        }
//    print(vi(ans.begin()+2,ans.end()));
//}
//
#include <iomanip>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define all(v) (v).begin(), (v).end()
#define T1 template<typename T> static
using namespace std;
typedef vector<int> vi;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
T1 ostream& print(T b, T e, string sep = " ", ostream& stream = cout){
    for(T it = b; it != e; ++it){
        stream << *it;
        if(it + 1 != e)
            stream << sep;
    }
    return stream;
}
T1 void print(vector<T> arr, string sep = " "){
    if(arr.empty()){
        return;
    }
    print(arr.begin(), arr.end(), sep);
    cout << '\n';
}
struct PrimeSieve{
    vector<bool> is_prime;
    vector<int> primes;
    PrimeSieve(int N){
        is_prime.resize(N+1);
        fill(is_prime.begin()+2,is_prime.end(),true);
        for(int i = 2; i <= N; ++i)
            if(is_prime[i]){
                primes.pb(i);
                for(int j = i*2; j <= N; j += i)
                    is_prime[j] = false;
            }
    }
};
void _(){
    int n;
    cin >> n;
    PrimeSieve p(n);
    vi ans(n+1);
    int nxt = 0;
    for(int i = 0; i <= n; ++i)
        if(p.is_prime[i]){
            ++nxt;
            for(int j = i; j <= n; j += i)
                if(ans[j] == 0)
                    ans[j] = nxt;
        }
    print(vi(ans.begin()+2,ans.end()));
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
