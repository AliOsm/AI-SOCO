#include <iostream>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <bitset>
#include <vector>
#include <string>
#include <queue>
#include <deque>
#include <list>
#include <set>
#include <map>

using namespace std;


/*
#define pb push_back
#define mp make_pair
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define sz(x) ((int)(x).size())

typedef long long ll;
typedef vector<ll> vll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef pair<int, int> pii;

const int MAXV = 150;
typedef bitset<MAXV> bs;

int gcd(int a, int b) { return b ? gcd(b, a % b) : a; }

int n;
const int MAXN = 150;
int as[MAXN];

bs good[MAXV];
void precalc() {
  for (int a = 0; a < MAXV; a++)
  for (int b = 0; b < MAXV; b++)
    if (gcd(a, b) == 1)
      good[a].set(b);
}

int ans;

void go(int pos, int cans, const bs &cur, int prval) {
  if (pos >= n) {
    ans = min(ans, cans);
    return;
  }
  {
    int ptr = max(prval, as[pos]);
    int cans2 = cans;
    for (int i = pos; i < n; i++) {
      while (ptr < MAXV && !cur.test(ptr)) ptr++;
      if (ptr >= MAXV) return;
      cans2 += ptr - as[i];
      if (ptr != 1)
        ptr++;
    }
    if (cans2 >= ans) return;
  }

  for (int cv = max(prval, as[pos]); cv < MAXV; cv++) if (cur.test(cv)) {
    go(pos + 1, cans + cv - as[pos], cur & good[cv], cv);
  }
}

void solve() {
  int k, ans = 0;
  assert(scanf("%d%d", &n, &k) == 2);
  assert(2 <= n && n <= MAXN);
  assert(k >= 1);
  for (int i = 0; i < n; i++) {
    scanf("%d", &as[i]);
    int me = as[i];
    assert(0 <= as[i] && as[i] <= 50);
    as[i] = (as[i] + k - 1) / k;
    ans += as[i] * k - me;
  }
  sort(as, as + n);
//  reverse(as, as + n);
  bs cur;
  for (int i = 0; i < MAXV; i++)
    cur.set(i);
  ::ans = 1e9;
  go(0, 0, cur, 0);
  ans += ::ans * k;
  printf("%d\n", ans);
}

int main() {
  precalc();
freopen("in.in", "r", stdin);
freopen("out.out", "w", stdout);
  

  int TN;
  char buf[16];
  assert(fgets(buf, sizeof buf, stdin));
  assert(sscanf(buf, "%d", &TN) >= 1);
  for (int TID = 1; TID <= TN; TID++)
    try {
      eprintf("===== Solving test case #%d =====\n", TID);
      printf("Case #%d: ", TID);
      solve();
    } catch (...) {
      eprintf("Exception was caught while executing on test #%d\n", TID);
      return 1;
    }
  return 0;
}

/*
int main()
{
	int s;
	cin>>s;
	for (int i = 1; i <= s; i++)
	{
		int r,c,h,k,t;
		cin>>r>>c>>h>>k>>t;
		vector<vector<int> > m(r+1, vector<int>(c+1,0));
		vector<vector<int> > v(t, vector<int>(k,0));
		for (int a = 0; a < r; a++)
		{
			for (int b = 0; b < c; b++)
			{
				cin>>m[a+1][b+1];
			}
		}
		for (int a = 0; a < t; a++)
		{
			int x;
			cin>>x;
			for (int b = 0; b < k; b++)
			{
				cin>>v[a][b];
				v[a][b] *=x;
			}
		}
		vector<int> kv(k,0);
		for (int a = 0; a < t; a++)
		{
			for (int b = 0; b < k; b++)
			{
				kv[b] += v[a][b];
			}
		}
		for (int a = 1; a <= r; a++)
		{
			for (int b = 1; b <= c; b++)
			{
				m[a][b] *= kv[m[a][b]-1];
			}
		}
		for (int a = 1; a <= r; a++)
		{
			for (int b = 1; b <= c; b++)
			{
				m[a][b] += m[a-1][b] + m[a][b-1] - m[a-1][b-1];
			}
		}
		int r = 0;
		for (int a = 1; a <= r; a++)
		{
			for (int b = 1; b<=c; b++)
			{
				for (int d = a; d <= r; d++)
				{
					for (int e = b; e <= c; e++)
					{
						int ss = m[d][e]
					}
				}
			}
		}
	}
}


int mod(long long a, long long b)
{
	if (a < 0) return (a+b) % b;
	else return a%b;
}

int main()
{
	
	int t;
	cin>>t;
	int len = 0;
	for (int i = 1; i <= t; i++)
	{
		unsigned long long N;
		string l;
		cin>>l>>N;
		string r = "";
		long long sz = l.size();
		unsigned long long a[60] = {0};
		a[1] = sz;
		unsigned long long n =N;
		n--;
		int len = 0;
		for (int i = 1; i <  60; i++)
		{
			if (i > 1)
			{
				if (n/a[i-1] < sz)
				{
					len = i;
					break;
				}
				a[i] = sz*(a[i-1]);
				n -= a[i];
			}
			else if (n <= a[i])
			{
				len = i;
				break;
			}
			else
			{
			n -= a[i];
			}
		}
		for (int i = 0; i < len; i++)
		{
			r += l[n%sz];
			n/=sz;
		}
		reverse(r.begin(), r.end());
		cout<<"Case #"<<i<<": "<<r<<endl;
	}
}




/*
vector<vector<char> > gr;
bool ok(int i, int j)
{
	if (i < 0 || j < 0 || i == gr.size() || j== gr[0].size()) return false;
	if (gr[i][j] == '#') return false;
	return true;
}

vector<vector<int> > dp[2][4];

int sol(int i, int j, int f, int s)
{
	if (dp[f][s][i][j] != -1) return dp[f][s][i][j];
	int res = 1;
	if (ok(i+1, j) && s != 3)
		res = max(res, 1+sol(i+1, j, f, 0));
	if (ok(i, j+1) && s != 2)
		res = max(res, 1+sol(i, j+1, f, 1));
	if (!f)
	{
		if (s == 0)
		{
			for (int k = j-1; k >= 0; k--)
			{
				if (!ok(i,k)) break;
				res = max(res, j-k+sol(i,k,1,2));
			}
		}
		else
		{
			for (int k = i-1; k >= 0; k--)
			{
				if (!ok(k,j)) break;
				res = max(res, i-k+sol(k,j,1,3));
			}
		}
	}
	return dp[f][s][i][j] = res;
}

int main()
{
	ifstream cin;
	cin.open("in.in");
	ofstream cout;
	cout.open("out.out");
	int t;
	cin>>t;
	for (int i = 1; i <= t; i++)
	{
		int n,m;
		cin>>n>>m;
		gr = vector<vector<char> >(n, vector<char>(m));
		for (int a = 0; a < 2; a++)
		{
			for (int b = 0; b < 4; b++)
			{
				dp[a][b] = vector<vector<int> >(n, vector<int> (m, -1));
			}
		}
		for (int a = 0; a < n; a++)
		{
			for (int b = 0; b < m; b++)
			{
				cin>>gr[a][b];
			}
		}
		int res = max(sol(0,0,0,0), sol(0,0,0,1));
		cout<<"Case #"<<i<<": "<<res<<endl;
	}
	system("pause");
}


int main()
{
	ifstream cin;
	cin.open("in.in");
	ofstream cout;
	cout.open("out.out");
	int pri[200];
	int np = 0;
	for (int i = 2; i <= 3000; i++)
	{
		bool ok = true;
		for (int j = 0; j < np; j++)
		{
			if (i%pri[j] == 0)
			{
				ok = false;
				break;
			}
		}
		if (ok)
		{
			pri[np] = i;
			np++;
			if (np == 200) break;
		}
	}
	int t;
	cin>>t;
	for (int i = 1; i <= t; i++)
	{
		int n, k;
		cin>>n>>k;
		vector<int> a(n);
		bool mk = false;
		int z = 0;
		for (int j = 0; j < n; j++)
		{
			cin>>a[j];
			if (a[j] == 0) z++;
			if (a[j] > k) mk = true;
		}
		sort(a.begin(), a.end());
		int res = 0;
		int l = -1;
		for (int j = 0; j < n; j++)
		{
			if (a[j] > 0 && a[j] <= k)
			{
				res += k-a[j];
			}
			else if (a[j] > k)
			{
				for (int c = l+1; c < 200; c++)
				{
					if (k*pri[c] >= a[j])
					{
						l = c;
						res += (k*pri[c] - a[j]);
						break;
					}
				}
			}
		}
		if (z && mk)
		{
			res += z*k;
		}
		else if (z > 1)
		{
			res += (z-1)*k;
		}
		cout<<"Case #"<<i<<": "<<res<<endl;
	}
	system("pause");
}


int main()
{
//	ifstream cin;
//	cin.open("in.in");
//	ofstream cout;
//	cout.open("out.out");
	int t;
	cin>>t;
	for (int i = 1; i <= t; i++)
	{
		int n,k,c;
		cin>>n>>k>>c;
		int cc = c;
		int r = 10000000;
		for (int j = 1; j <= n; j++)
		{
			c = cc;
			int mn = k/j;
			int res = c;
			res += n-j;
			c -= mn*j;
			if (c>0 && j == n)
			{
				res += j-(k%j);
			}
			r = min(r, res);
		}
		cout<<"Case #"<<i<<": "<<r<<endl;
	}
	system("pause");
}


int main()
{
	int n, k;
	cin>>n>>k;
	vector<int> a(k, 0);
	for (int i = 0; i < n; i++)
	{
		int c;
		cin>>c;
		if (c == 2)
			a[i%k]++;
	}
	int s = 0;
	for (int i = 0; i < a.size(); i++)
	{
		s += min(a[i], n/k - a[i]);
	}
	cout<<s<<endl;
//	system("pause");
}




int main()
{
	int a, b;
	cin>>a>>b;
	queue<pair<int,int> > q;
	map<int,int> mp1;
	q.push(make_pair(a, 0));
	while (!q.empty())
	{
		pair<int,int> cu = q.front();
		q.pop();
		if (mp1.count(cu.first)) continue;
		mp1[cu.first] = cu.second;
		if (cu.first % 2 == 0)
		{
			q.push(make_pair(cu.first/2, cu.second+1));
		}
		if (cu.first % 3 == 0)
		{
			q.push(make_pair(cu.first/3, cu.second+1));
		}
		if (cu.first % 5 == 0)
		{
			q.push(make_pair(cu.first/5, cu.second+1));
		}
	}
	vector<pair<int,int> > v2;
	set<int> st;
	q.push(make_pair(b, 0));
	while (!q.empty())
	{
		pair<int,int> cu = q.front();
		q.pop();
		if (st.count(cu.first)) continue;
		st.insert(cu.first);
		v2.push_back(cu);
		if (cu.first % 2 == 0)
		{
			q.push(make_pair(cu.first/2, cu.second+1));
		}
		if (cu.first % 3 == 0)
		{
			q.push(make_pair(cu.first/3, cu.second+1));
		}
		if (cu.first % 5 == 0)
		{
			q.push(make_pair(cu.first/5, cu.second+1));
		}
	}
	int mn = 10000000;
	for (int i = 0; i < v2.size(); i++)
	{
		if (mp1.count(v2[i].first))
		{
			mn = min(mn, v2[i].second + mp1[v2[i].first]);
		}
	}
	if (mn == 10000000)
		cout<<-1<<endl;
	else
		cout<<mn<<endl;
}


int main()
{
	string s;
	cin>>s;
	long long ing[3] = {0};
	for (int i = 0; i < s.size(); i++)
	{
		if (s[i] == 'B') ing[0]++;
		if (s[i] == 'S') ing[1]++;
		if (s[i] == 'C') ing[2]++;
	}
	long long ns,nb,nc,ps,pc,pb, r;
	cin>>nb>>ns>>nc>>pb>>ps>>pc>>r;
	long long lo = 0;
	long long hi = 10000000000000;
	long long md;
	long long pr;
	while (lo <= hi)
	{
		md = (lo+hi)/2;
		long long nbn = md*ing[0];
		long long nsn = md*ing[1];
		long long ncn = md*ing[2];
		nbn-=nb;
		nsn-= ns;
		ncn -= nc;

		pr = max(0ll,nbn*pb) + max(0ll,nsn*ps) + max(0ll,ncn*pc);
	//	cout<<md<<" "<<pr<<endl;
		if (pr > r)
		{
			hi = md-1;
		}
		else if (pr < r)
		{
			lo = md + 1;
		}
		else
			break;
	}
	if (pr <= r)
		cout<<md<<endl;
	else cout<<md-1<<endl;
//	system("pause");
}


int main()
{
	int n;
	cin>>n;
	vector<int> a(n);
	map<int,int> s;
	for (int i = 0; i < n; i++)
	{
		cin>>a[i];
		s.insert(make_pair(i,a[i]));
	}
	int m;
	cin>>m;
	while (m--)
	{
		int q;
		cin>>q;
		if (q == 1)
		{
			int p, x;
			cin>>p>>x;
			p--;
			map<int,int> ::iterator i;
			i = s.lower_bound(p);
			while (i != s.end())
			{
				(*i).second -= x;
				x = -(*i).second;
				if (x > 0)
				{
					map<int,int> ::iterator j = i;
					i++;
					s.erase(j);
				}
				else
					break;
			}
		}
		else
		{
			int k;
			cin>>k;
			k--;
			if (s.count(k)) cout<<a[k]-s[k]<<endl;
			else
				cout<<a[k]<<endl;
		}
	}
//	system("pause");
}
*/

int main()
{
	int n, k;
	cin>>n;
	vector<pair<long long,int> > d(n);
	for (int i = 0; i < n; i++)
	{
		cin>>d[i].first;
		d[i].second = i+1;
	}
	sort(d.begin(), d.end());
	vector<long long> dif(n-1);
	vector<long long> asc(n-1);
	vector<long long> dsc(n-1);
	long long mn = d[0].first;
	for (int i = 0; i < n; i++)
	{
		d[i].first -= mn;
	}
	for (int i = 0; i < n-1; i++)
	{
		if (i < n-1) dif[i] = d[i+1].first-d[i].first;
		asc[i] = ((long long)i)*dif[i];
		if (i) asc[i] += asc[i-1];
	}
	for (int i = n-2; i >= 0; i--)
	{
		dsc[i] = (n-2-i)*dif[i];
		if (i < n-2) dsc[i] += dsc[i+1];
	}
	cin>>k;
	int mnk = k;
	long long sm = 0;
	vector<long long> ml(k-1);
	for (int i = 1; i <= (k-1); i++)
	{
		ml[i-1] = i*(k-i);
	}
	
	for (int i = 0; i < (k-1); i++)
	{
		sm += ml[i]*(dif[i]);
	}
	long long msm = sm;
	for (int i = k-1; i < n-1; i++)
	{
		sm += asc[i];
		if (i >= k)
			sm -= asc[i-k];
		sm -= (i-k+1)*(d[i+1].first-d[i-k+1].first);
		sm -= dsc[i-k+1];
		if (i+1 < n-1) sm +=dsc[i+1];
		sm+= (n-2-i)*(d[i+1].first-d[i-k+1].first);
		if (sm< msm)
		{
			msm = sm;
			mnk = i+2;
		}
	}
	for (int i = mnk-k; i < mnk; i++)
	{
		cout<<d[i].second;
		if (i+1 < mnk) cout<<" ";
	}
	cout<<endl;
//	system("pause");
}