#include <bits/stdc++.h>
#ifdef DBP
#define deb(...) fprintf(stderr,__VA_ARGS__)
#else
#define deb(...) 0
#endif
#define fst first
#define snd second
#define fore(x,a,b) for(int x=(a), qwerty=(b); x<qwerty; x++)
#define pb push_back
#define mset(a,v) memset((a),(v),sizeof(a))
#define ALL(a) (a).begin(), (a).end()
#define SZ(a) int((a).size())
#define FIN ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
using namespace std;
typedef long long ll;
/*
const int N=6005;
struct state {int len,link;unordered_map<char,int> next;}; //clear next!!
state st[N];
int sz,last;
void sa_init(){
	last=st[0].len=0;sz=1;
	st[0].link=-1;
}
void sa_extend(char c){
	int k=sz++,p;
	st[k].len=st[last].len+1;
	for(p=last;p!=-1&&!st[p].next.count(c);p=st[p].link)st[p].next[c]=k;
	if(p==-1)st[k].link=0;
	else {
		int q=st[p].next[c];
		if(st[p].len+1==st[q].len)st[k].link=q;
		else {
			int w=sz++;
			st[w].len=st[p].len+1;
			st[w].next=st[q].next;st[w].link=st[q].link;
			for(;p!=-1&&st[p].next[c]==q;p=st[p].link)st[p].next[c]=w;
			st[q].link=st[k].link=w;
		}
	}
	last=k;
}*/
const int N=6005;
struct state {int len,link; int next[2] = {0,0};}; //clear next!!
state st[N];
int sz,last;
void sa_init(){
	last=st[0].len=0;sz=1;
	st[0].link=-1;
}
void sa_extend(char c){
	int k=sz++,p;
	st[k].len=st[last].len+1;
	for(p=last;p!=-1&&!st[p].next[c];p=st[p].link)st[p].next[c]=k;
	if(p==-1)st[k].link=0;
	else {
		int q=st[p].next[c];
		if(st[p].len+1==st[q].len)st[k].link=q;
		else {
			int w=sz++;
			st[w].len=st[p].len+1;
			st[w].next[0]=st[q].next[0];st[w].next[1]=st[q].next[1];
			st[w].link=st[q].link;
			for(;p!=-1&&st[p].next[c]==q;p=st[p].link)st[p].next[c]=w;
			st[q].link=st[k].link=w;
		}
	}
	last=k;
}
ll dp[N];
int nvalid[16];
const ll MOD=1e9+7;
ll f(int i){
    if(dp[i]!=-1)return dp[i];
    dp[i]=1;
    fore(x,1,4){
        fore(m,0,(1<<x)){
            int idx = i, bad = 0;
            for(int j=x-1; j>=0; j--){
                char c=((m&(1<<j))!=0);
                if(st[idx].next[c])idx=st[idx].next[c];
                else {bad=1;break;}
            }
            if(!bad){
                dp[i]+=f(idx);if(dp[i]>=MOD)dp[i]-=MOD;
            }
        }
    }
    fore(m,0,(1<<4))if(!nvalid[m]){
        int idx = i, bad = 0;
        for(int j=3; j>=0; j--){
            char c=((m&(1<<j))!=0);
            if(st[idx].next[c])idx=st[idx].next[c];
            else {bad=1;break;}
        }
        if(!bad){dp[i]+=f(idx);if(dp[i]>=MOD)dp[i]-=MOD;}
    }
    return dp[i];
}

int main(){FIN;nvalid[3]=nvalid[5]=nvalid[14]=nvalid[15]=1;
    sa_init();
    int n;cin>>n;
    fore(x,0,n){
        char c;cin>>c;
        sa_extend(c-'0');
        mset(dp,-1);
        cout<<(f(0)+MOD-1)%MOD<<"\n";
    }
}