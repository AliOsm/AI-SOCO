#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

template <class T>
using ordered_set =
    tree <T,null_type,less <T>,rb_tree_tag,tree_order_statistics_node_update> ;

template <class T,class U>
void maximize(T &x,U y)
{
    if(x < y)
        x=y;
}
template <class T,class U>
void minimize(T &x,U y)
{
    if(x > y)
        x=y;
}
template <class T>
T Abs(T x)
{
    return (x < (T)0 ? -x : x);
}
template <class T>
T safe_sqrt(T x)
{
    return sqrt(max(x,(T)0));
}
template <class T,class U,class V>
T addmod(T x,U k,V MOD)
{
    return ((x+k)%MOD + MOD)%MOD;
}
template <class T,class U,class V>
T submod(T x,U k,V MOD)
{
    return ((x-k)%MOD + MOD)%MOD;
}
template <class T,class U,class V>
T mul(T x,U y,V MOD)
{
    return (long long)x*y%MOD;
}

#define ll long long
#define pll pair <ll,ll>
#define pii pair <int,int>
#define fir first
#define sec second
#define mp make_pair
#define pb push_back
#define MASK(i) ((1LL)<<(i))
#define BIT(x,i) (((x)>>(i))&1)
#define all(c) (c).begin(),(c).end()
#define sz(c) (c).size()
#define fn "test"    ///FILE_NAME_HERE

/*------------------------------------------END_OF_TEMPLATE------------------------------------------*/

namespace task{

const int N = 2e5+5;
struct data
{
    int l,r,cost;
    data() {}
    data(int _l,int _r,int _cost):l(_l),r(_r),cost(_cost) {}
    bool operator < (const data &other) const
    {
        return (l < other.l) or (l == other.l and r < other.r) or (l == other.l and r == other.r and cost < other.cost);
    }
};
vector <data> dur[N];
vector <int> minCost[N];
int n,x,ans = numeric_limits <int> :: max();

void solve()
{
    cin>>n>>x;
    for(int i = 1; i <= n; ++i)
    {
        int l,r,c;
        cin>>l>>r>>c;
        dur[r - l + 1].pb(data(l,r,c));
    }
    for(int i = 1; i <= 200000; ++i)
    {
        if(dur[i].empty())
            continue;
        sort(all(dur[i]));
        for(auto j : dur[i])
            minCost[i].pb(j.cost);
        for(int j = sz(minCost[i]) - 2; ~j; --j)
            minimize(minCost[i][j],minCost[i][j + 1]);
    }
    function <int(int,int)> bs = [&](int idx,int val)
    {
        int lo = 0,hi = sz(dur[idx]) - 1,p = -1;
        for(int mid = (lo + hi)>>1; lo <= hi; mid = (lo + hi)>>1)
            if(dur[idx][mid].l > val)
                hi = mid - 1,p = mid;
            else
                lo = mid + 1;
        return p;
    };
    for(int i = 1; i <= 200000; ++i)
    {
        if(x - i <= 0)
            break;
        if(dur[i].empty())
            continue;
        int t = x - i;
        for(auto cur : dur[i])
        {
            int p = bs(t,cur.r);
            if(~p)
                minimize(ans,cur.cost + minCost[t][p]);
        }
    }
    if(ans == numeric_limits <int> :: max())
        cout<<-1;
    else
        cout<<ans;
}}

int main(void)
{
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen(fn".inp","r",stdin);
    freopen(fn".out","w",stdout);
    #endif // ONLINE_JUDGE
    task::solve();
}
