#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
#define dbl(k, x) fixed << setprecision(k) << (x)

template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define _upgrade ios_base::sync_with_stdio(0);
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 300;
const int M = 1e9 + 7;

LL fast(LL a, LL n)
{
    if(n == 0) return 1;
    if(n & 1) return a * fast(a, n - 1) % M;
    return fast(a * a % M, n / 2);
}

LL n, k, fac[N], rev[N];

LL newton(LL a, LL b)
{
    return fac[a] * rev[b] % M * rev[a - b] % M;
}

int main()
{
    _upgrade
    
    cin >> n >> k;
    fac[0] = 1;
    for(LL i = 1; i <= n; i++)
        fac[i] = i * fac[i - 1] % M;
    rev[n] = fast(fac[n], M - 2);
    for(LL i = n; i; i--)
        rev[i - 1] = i * rev[i] % M;

    LL ans = fast(k, n * n);
    for(int rc = 1; rc <= 2 * n; rc++)
    {
        LL sum = 0;
        for(int r = 0; r <= rc; r++)
        {
            int c = rc - r;
            if(!(0 <= r && r <= n && 0 <= c && c <= n))
                continue;

            LL cells = n * r + n * c - r * c;
            LL tmp = fast(k, n * n - cells);
            tmp = tmp * fast(k - 1, cells) % M;
            tmp = tmp * newton(n, r) % M;
            tmp = tmp * newton(n, c) % M;

            sum = (sum + tmp) % M;
        }

        if(rc & 1)
            ans = (ans + M - sum) % M;
        else
            ans = (ans + sum) % M;
    }
    cout << (ans % M + M) % M << "\n";

	return 0;
}