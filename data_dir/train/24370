#include <bits/stdc++.h>

using namespace std;

#define MAX 700008
#define ll long long
ll arr[MAX];
ll tree[5*MAX];

void init(ll node, ll b, ll e)
{
    if(b == e){
        tree[node] = arr[b];
        return;
    }
    ll left = 2*node;
    ll right = 2*node+1;
    ll mid = (b+e)/2;
    init(left, b, mid);
    init(right, mid+1, e);
    if(tree[left] < tree[right]) tree[node] = tree[left];
    else tree[node] = tree[right];
}

ll query(ll node, ll b, ll e, ll i, ll j)
{
    if(b > j || e < i) return INT_MAX;
    if(b >= i && e <= j){
        return tree[node];
    }
    ll left = 2*node;
    ll right = 2*node+1;
    ll mid = (b+e)/2;
    ll p = query(left, b, mid, i, j);
    ll q = query(right, mid+1, e, i, j);
    if(p < q) return p;
    else return q;
}


int main()
{
    ll n;
    scanf("%lld", &n);
    pair<ll, ll> p[n];
    for(int i=0; i<n; i++) scanf("%lld %lld", &p[i].first, &p[i].second);
    map<ll, ll> mp;
    ll sz = 1;
    set<ll> S;
    for(ll i=0; i<n; i++){
        S.insert(p[i].first);
        S.insert(p[i].second);
        S.insert(p[i].second + 1);
    }
    set<ll> ::iterator it;
    for(it = S.begin(); it != S.end(); it++){
        ll x = *it;
        mp[x] = sz++;
    }
    sz--;
    memset(arr, 0, sizeof arr);
    for(ll i=0; i<n; i++){
        p[i].first = mp[p[i].first];
        p[i].second = mp[p[i].second];
        arr[p[i].first]++;
        arr[p[i].second+1]--;
    }
    ll tot = 0;
    for(ll i=0; i<MAX; i++){
        tot += arr[i];
        arr[i] = tot;
    }
    init(1, 1, sz);
    for(ll i=0; i<n; i++){
        ll res = query(1, 1, sz, p[i].first, p[i].second);
        if(res > 1){
            cout << i+1;
            return 0;
        }
    }
    cout << -1;
}
