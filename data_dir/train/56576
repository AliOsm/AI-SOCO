//g++  5.4.0

#include<bits/stdc++.h>
using namespace std;

#define ff first
#define ss second
#define int long long
#define pb push_back
#define pii pair< int,int >
#define fast ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0) ;

const int p1 = 31;
const int p2 = 37;
const int mod1 = 1e9+7;
const int mod2 = 1e9+9;
const int nax = 2e2+10;
int hash1[nax] , hash2[nax] ,invhash1[nax] , invhash2[nax];

int binpow(int a,int b,int m)
{
    a %= m;
    int res = 1;
    while( b )
    {
        if( b&1 ) res = (res*a)%m;
        a *= a;
        a %= m;
        b >>= 1;
    }
    return res;
}
void compute_hash()
{
    hash1[0] = 1;
    hash2[0] = 1;
    for(int i=1 ; i<nax ; i++ )
    {
        hash1[i] = ( hash1[i-1] * p1 ) %mod1;
        hash2[i] = ( hash2[i-1] * p2 ) %mod2;
    }
    invhash1[nax-1] = binpow( hash1[nax-1] , mod1-2 , mod1 );
    invhash2[nax-1] = binpow( hash2[nax-1] , mod2-2 , mod2 );
    for(int i=nax-2 ; i>=0 ; i-- )
    {
        invhash1[i] = ( invhash1[i+1] * p1 ) %mod1;
        invhash2[i] = ( invhash2[i+1] * p2 ) %mod2;
    }
    return ;
}

vector<pii> get_hash(string s)
{
    int n = (int)(s.size());
    vector<pii> res(n);
    for(int i=0; i<n ; i++ )
    {
        int x = s[i]-'a'+1;
        res[i] =  {(x*hash1[i])%mod1 , (x*hash2[i])%mod2} ;
        if(i)
        {
            res[i].ff = (res[i-1].ff + res[i].ff ) %mod1;
            res[i].ss = (res[i-1].ss + res[i].ss ) %mod2;
        }
    }
    return res;
}
signed main()
{
    fast;
    compute_hash();
    string s;
    cin >> s;
    auto v = get_hash(s);
    map< pii , int > mpp , mpp1;
    int n = (int)(s.size());
    for(int i=0 ; i<n ; i++ )
    {
        for(int j=i ; j<n ; j++ )
        {
            pii p = v[j];
            if(i) p = { (((v[j].ff-v[i-1].ff + mod1)%mod1)*invhash1[i])%mod1  , (((v[j].ss-v[i-1].ss+mod2)%mod2) * invhash2[i] )%mod2 };
            mpp[p] = 0;
            mpp1[p] = 0;
            
        }
    }
    
    cin >> n;
    string p;
    int l,r;
    for(int i=0 ; i<n ; i++ )
    {
        cin >> p >> l >> r;
        
        auto v = get_hash(p);
        map< pii, int > mp;
        int x = (int)(p.size());
        for(int i=0 ; i<x ; i++ )
        {
            for(int j=i ; j<x ; j++ )
            {
                pii pp = v[j];
                if(i) pp = { (((v[j].ff-v[i-1].ff + mod1)%mod1)*invhash1[i])%mod1  , (((v[j].ss-v[i-1].ss+mod2)%mod2) * invhash2[i] )%mod2 };
                
                mp[ pp ]++;
            }
        }
        
        for( auto it : mpp )
        {
            if( mp[it.ff] >= l && mp[it.ff] <= r)
            {
                
                mpp1[ it.ff ]++;
            }
        }
        
    }
    int ans = 0;
    for( auto it : mpp1 )
        if( it.ss == n ) ans++;
    cout << ans;
    
}

