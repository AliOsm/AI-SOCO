#include <bits/stdc++.h>
#define base 1000000007LL
#define ll long long
#define ld double
#define X first
#define Y second
#define pb push_back
#define EPS 1e-9
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
using namespace std;
typedef pair<int, int> II;
typedef pair<int, II> III;

ld sub(ld x, ld y) {
    return (x-y);
}

ld add(ld x, ld y) {
    return (x+y);
}

ld mul(ld x, ld y) {
    return x*y;
}

struct Matrix {
    vector<vector<ld> > a;
    int M;

    Matrix(int M) {
        this->M = M;
        vector<ld> b;
        FOR(i,1,M) a.pb(b);
        FOR(i,0,M-1)
            FOR(j,0,M-1) a[i].pb(0);
    }

    Matrix operator * (Matrix &to) {
        Matrix ans(M);
        FOR(i,0,M-1)
            FOR(j,0,M-1)
                FOR(k,0,M-1) ans.a[i][j] = add(ans.a[i][j], mul(a[i][k], to.a[k][j]));
        return ans;
    }

    vector<ld> operator * (vector<ld> to) {
        vector<ld> ans(M);
        FOR(i,0,M-1)
            FOR(j,0,M-1) ans[i] = add(ans[i], mul(a[i][j], to[j]));
        return ans;
    }
} ONE(1);

int x;

Matrix mu(Matrix A, ll n)
{
    Matrix B = ONE;
    while (n) {
        if (n&1) B = B*A;
        A = A*A;
        n >>= 1;
    }
    return B;
}

ll n;

ld p[150];

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(NULL);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    cin >> n >> x;
    FOR(i,0,x) cin >> p[i];
    FOR(i,0,10)
        if ((1<<i) > x) {
            x = (1<<i);
            break;
        }
    ONE = Matrix(x);
    FOR(i,0,x-1) ONE.a[i][i] = 1;
    Matrix A(x);
    FOR(i,0,x-1)
        FOR(j,0,x-1) A.a[i][j] = p[i ^ j];
    vector<ld> r(x, 0);
    r[0] = 1;
    A = mu(A, n);
    r = A*r;
    cout << fixed << setprecision(9) << 1-r[0];
    return 0;
}
