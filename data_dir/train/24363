
#include<bits/stdc++.h>

using namespace std;

const int MX = (1<<20);

pair < int , pair < int , int > > arr[MX];

vector < int > sol[2];

pair < int , int > bit[MX];

pair < int , int > get(int x){
    pair < int , int > ret = {0 , 0};
    while(x < MX){
        ret = max(ret , bit[x]);
        x += x & (-x);
    }
    return ret;
}

void upd(int x , pair < int , int > V){
    while(x > 0){
        bit[x] = max(bit[x] , V);
        x -= x & (-x);

    }
}

int dp[MX] , nxt[MX];

int n;
void solve(int phase){


    for(int j = 0 ; j < MX ; j++) bit[j] = {0 , 0};

    for(int j = 1 ; j <= n ; j++){
        swap(arr[j].first , arr[j].second.first);
    }

    sort(arr+1 , arr+1+n);

    for(int j = n ; j ; j--){

        if(arr[j].first > arr[j].second.first) continue;

        auto pp = get(arr[j].first + 1);
        dp[j] = pp.first + 1;
        nxt[j] = pp.second;
        upd(arr[j].second.first , {dp[j] , j});
    }


    for(int j = 1 ; j <= n ; j++){
        swap(arr[j].first , arr[j].second.first);
    }

    int ans = *max_element(dp + 1 , dp + 1 + n);

    for(int j = 1 ; j <= n ; j++){
        if(dp[j] == ans){
            while(j != 0){
                sol[phase].push_back(arr[j].second.second);
                j = nxt[j];
            }
            break;
        }
    }

}

int main(){
    scanf("%d",&n);
    for(int j = 1 ; j <= n ; j++){
        scanf("%d %d",&arr[j].first,&arr[j].second.first);
        arr[j].second.second = j;
    }
    solve(0);
    for(int j = 1 ; j <= n ; j++){
        arr[j].first = 2 * n + 1 - arr[j].first;
        arr[j].second.first = 2 * n + 1 - arr[j].second.first;
    }
    solve(1);
    if(sol[0].size() < sol[1].size()) swap(sol[0] , sol[1]);
    cout<<sol[0].size()<<endl;
    for(auto pp : sol[0]) printf("%d ",pp);
}
