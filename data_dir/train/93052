/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
using namespace std;

#define int long long
#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

class BTreesInARow {
public:
	void solve(std::istream& in, std::ostream& out) {
        int n, k; in >> n >> k;
        int arr[n];
        f(i, n) in >> arr[i];
        int mi = INT_MAX, ind = -1;
        f(i, n){
            int j = i-1, cuts = 0, req = arr[i]-k;
            while(j>=0){
                if(arr[j]!=req) ++cuts;
                req -= k;
                --j;
            }
            if(req+k<=0) continue;
             j = i+1;
            req = arr[i] + k;
            while(j<n){
                if(arr[j]!=req) ++cuts;
                req += k;
                ++j;
            }
            if(req-k <= 0) continue;
            if(cuts < mi) mi = cuts, ind = i;
        }
        out << mi << '\n';
        int j = ind - 1, req = arr[ind] - k;
        while(j>=0){
            if(arr[j]!=req){
                if(arr[j] > req) out << "- ";
                else out << "+ ";
                out << j+1 << ' ' << abs(req-arr[j]) << '\n';
            }
            req -= k;
            --j;
        }

        j = ind + 1, req = arr[ind] + k;
        while(j<n){
            if(arr[j]!=req){
                if(arr[j] > req) out << "- ";
                else out << "+ ";
                out << j+1 << ' ' << abs(arr[j]-req) << '\n';
            }
            req += k;
            ++j;
        }
	}
};


int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	BTreesInARow solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
