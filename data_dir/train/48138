#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define double long double
#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << (x) << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-10
//#define endl "\n"
#define pdd pair<double, double>
//#define mp make_pair

const int MAXN = 1001*1000;

void add_max(pii &a, int x) {
	if (a.X < x) {
		a.X = x;
		a.Y = 0;
	}
	if (x == a.X) a.Y++;
}

string s;
int last[26][MAXN];
vector<int> mask, cnt;
vector<int> com;

void add(int x) {
	int pos = lower_bound(all(mask), x)-mask.begin();
	if (mask[pos] == x) cnt[pos]++;
}

int main() {
	cin >> s;
	int q;
	cin >> q;
	while (q--) {
		string str;
		cin >> str;
		int tmp = 0;
		FOR(i, 0, Size(str)) tmp |= 1<<(str[i]-'a');
		com.pb(tmp);
		mask.pb(tmp);
		cnt.pb(0);
	}
	sort(all(mask));
	FOR(i, 0, Size(s)) {
		FOR(j, 0, 26) if (i) last[j][i] = last[j][i-1]; else last[j][i] = -1;
		last[s[i]-'a'][i] = i;
		vector<pii> V;
		FOR(j, 0, 26) if (last[j][i] != -1) V.pb(pii(last[j][i], j));
		sort(all(V), greater<pii>());
		int tmp = 0;
		FOR(j, 0, Size(V)) {
			if (i+1 == Size(s) || (tmp&(1<<(s[i+1]-'a'))) == 0) add(tmp);
			tmp |= 1<<V[j].Y;
		}
		if (i+1 == Size(s) || (tmp&(1<<(s[i+1]-'a'))) == 0) add(tmp);
	}
	FOR(i, 0, Size(com)) cout << cnt[lower_bound(all(mask), com[i])-mask.begin()] << endl;
	return 0;
}

