/*
 * app.cpp
 *
 *  Created on: 22.06.2015
 *      Author: Eran
 */

#include <bits\stdc++.h>

using namespace std;

#define stdio true
#define input "floor.in"
#define output "floor.out"

const int alpha = 26;
const int maxn = 205;
const int logn = 18;
const int inf = 2000000000;
const long long mod = 18592061276251;
const long long l_inf = (long long) 4e18;
const double eps = 1e-8;

struct Point {
	int x;
	int y;
};

int gcd(int a, int b) {
	return b == 0 ? a : gcd(b, a % b);
}

bool possible(int x, int y) {
	return x >= 0 && x < maxn && y >= 0 && y < maxn;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.precision(10);
	cout << fixed;
	if (!stdio) {
		freopen(input, "r", stdin);
		freopen(output, "w", stdout);
	}
	int n;
	cin >> n;
	vector<Point> pt(n);
	vector<vector<char> > field(maxn, vector<char>(maxn, 0));
	for (int i = 0; i < n; i++) {
		cin >> pt[i].x >> pt[i].y;
		pt[i].x += 100;
		pt[i].y += 100;
		field[pt[i].x][pt[i].y] = 1;
	}
	long long ans = 1ll * n * (n - 1) * (n - 2) / 3;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (i == j)
				continue;
			if (pt[i].x == pt[j].x || pt[i].y == pt[j].y) {
				if (pt[i].x == pt[j].x && pt[i].y < pt[j].y) {
					int dx = 0, dy = 1;
					int x = pt[i].x, y = pt[i].y, cnt = -1;
					while (possible(x, y)) {
						if (field[x][y] == 1)
							cnt++;
						x += dx;
						y += dy;
					}
					ans -= max(0, cnt - 1);
				}
				if (pt[i].y == pt[j].y && pt[i].x < pt[j].x) {
					int dx = 1, dy = 0;
					int x = pt[i].x, y = pt[i].y, cnt = -1;
					while (possible(x, y)) {
						if (field[x][y] == 1)
							cnt++;
						x += dx;
						y += dy;
					}
					ans -= max(0, cnt - 1);
				}
			} else {
				if (pt[i].y < pt[j].y) {
					int dx = pt[j].x - pt[i].x;
					int dy = pt[j].y - pt[i].y;
					if (pt[i].x < pt[j].x) {
						int div = gcd(dx, dy);
						dx /= div;
						dy /= div;
					} else {
						int div = gcd(-dx, dy);
						dx /= div;
						dy /= div;
					}
					int x = pt[i].x, y = pt[i].y, cnt = -1;
					while (possible(x, y)) {
						if (field[x][y] == 1)
							cnt++;
						x += dx;
						y += dy;
					}
					//cout << i << ' ' << j << ' ' << cnt << '\n';
					ans -= max(0, cnt - 1);
				}
			}
		}
	}
	cout << ans / 2;
}

