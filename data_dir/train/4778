#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdio>

//#include <cstdint>
//#include <cstdlib>
#include <cassert>
//#include <cctype>
#include <climits>
#include <functional>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <ctime>

#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <list>
#include <deque>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <array>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); i++)
#define forn1(i, n) for(int i = 1; i <= int(n); i++)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld PI = acosl(ld(-1));
const ld EPS = 1e-9;

template <typename T> inline T sqr(const T& x) {
	return x * x;
}

template <typename T> inline T abs(const T& x) {
	return x > 0 ? x : -x;
}

inline bool inside(int x, int y, int n, int m) {
	return x >= 1 && x <= n && y >= 1 && y <= m;
}

inline int rnd() {
	return abs(rand() ^ (rand() << 15));
}

inline int rnd(int n) {
	assert(n > 0);
	return rnd() % n;
}

inline int rnd(int lf, int rg) {
	return lf + rnd(rg - lf + 1);
}

inline li rndLL() {
	return rnd() * 1LL * rnd() + rnd();
}

const int dx[4] = { -1, 0, +1, 0 };
const int dy[4] = { 0, +1, 0, -1 };

const int dx8[8] = { -1, -1, 0, +1, +1, +1, 0, -1 };
const int dy8[8] = { 0, +1, +1, +1, 0, -1, -1, -1 };

const int N = int(2e5) + 555;

int n;
vector<int> g[N];
int deg[N];

inline void gen() {
	return;
}

inline bool read() {
	if (!(cin >> n)) return false;
	forn(i, n - 1) {
		int u, v;
		assert(cin >> u >> v);
		g[u].push_back(v);
		g[v].push_back(u);
		deg[u]++, deg[v]++;
	}
	return true;
}

pair<li, li> ans[N];

/*
dirs
up - 0
right - 1
down - 3
left - 2
*/

int dirsx[4] = {0, +1, -1, 0};
int dirsy[4] = {+1, 0, 0, -1};

vector<pair<pair<li, li>, pair<li, li> > > segs;

void dfs(int v, int p, li xx, li yy, li len, int dirfrom) {
	ans[v] = { xx, yy };
	int dir = 0;
	forn(i, sz(g[v])) {
		int to = g[v][i];
		if (to == p) continue;
		if (dirfrom + dir == 3) dir++;
		assert(dir >= 0 && dir <= 3);
		segs.push_back(mp(mp(xx, yy), mp(xx + len * dirsx[dir], yy + len * dirsy[dir])));
		dfs(to, v, xx + len * dirsx[dir], yy + len * dirsy[dir], len / 2 - 2, dir);
		dir++;
	}
}

//vector<pair<li, li>, pair<li, li> > segs;

inline bool inter(const pair<pair<li, li>, pair<li, li> >& a, const pair<pair<li, li>, pair<li, li> >& b) {
	return false;
}

inline void solve() {
	int root = 1;
	forn1(i, n) if (deg[i] > deg[root]) root = i;
	if (deg[root] > 4) {
		puts("NO");
		return;
	}

	dfs(root, -1, INF64 / 2, INF64 / 2, INF * 1LL * INF / 1000, -1);

	assert(sz(segs) == n - 1);
	forn(i, sz(segs)) forn(j, i) assert(!inter(segs[i], segs[j]));
	cout << "YES" << endl;
	forn1(i, n) cout << ans[i].x << ' ' << ans[i].y << endl;
	forn1(i, n) {
		assert(ans[i].x >= -INF64 && ans[i].x <= INF64);
		assert(ans[i].y >= -INF64 && ans[i].y <= INF64);
	}
	return;
}

int main() {
#ifdef _DEBUG
	assert(freopen("input.txt", "rt", stdin));
	assert(freopen("output.txt", "wt", stdout));
#endif

	cout << setprecision(10) << fixed;
	cerr << setprecision(10) << fixed;

	srand(int(time(NULL)));

	int T = 1;
	//#define MULTITEST
#ifdef MULTITEST
	assert(scanf("%d", &T) == 1);
#endif

	forn(i, T) {
#ifdef _DEBUG
		cerr << "TEST == " << i << endl;
#endif
		assert(read());
		//cout << "Case #" << i + 1 << ": ";
		solve();
		//cerr << "curTime == " << clock() << " ms" << endl;
	}

#ifdef _DEBUG
	cerr << "TIME == " << clock() << " ms" << endl;
#endif
	return 0;
}