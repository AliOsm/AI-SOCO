#include <iostream>
#include <algorithm>
#include <math.h>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <iomanip>
#include <stack>

using namespace std;


typedef long long ll;
const ll sze = 1 << 22, INF = (1 << 30);
int tree[sze << 1] = {};
int updating[sze << 1] = {};


void push(int ind)
{
	if (ind < sze)
	{
		updating[ind << 1] += updating[ind];
		updating[(ind << 1) + 1] += updating[ind];
	}

	tree[ind] += updating[ind];
	updating[ind] = 0;
}


void update(int l, int r, int lb, int rb, int ind)
{
	if (l == lb && r == rb)
	{
		updating[ind]++;
		return;
	}

	int m = (lb + rb) >> 1;
	
	if (l <= m)
		update(l, min(m, r), lb, m, ind << 1);

	if (r > m)
		update(max(l, m + 1), r, m + 1, rb, (ind << 1) + 1);
}


int get(int l, int r, int lb, int rb, int ind)
{
	push(ind);

	if (ind < sze)
	{
		push(ind << 1);
		push((ind << 1) + 1);
		tree[ind] = min(tree[ind << 1], tree[(ind << 1) + 1]);
	}


	if (l == lb && r == rb)
		return tree[ind];

	int m = (lb + rb) >> 1;
	int first = INF, second = INF;

	if (l <= m)
		first = get(l, min(m, r), lb, m, ind << 1);

	if (r > m)
		second = get(max(l, m + 1), r, m + 1, rb, (ind << 1) + 1);

	return min(first, second);
}


int main()
{
	
	int n;
	scanf("%d", &n);
	vector<pair<int, int>> challengers(n);
	vector<int> positions;

	for (int i = 0; i < n; i++)
	{
		int l, r;
		scanf("%d%d", &l, &r);
		challengers[i] = (make_pair(l, r));
		positions.push_back(l);
		positions.push_back(r);
		positions.push_back(l - 1);
		positions.push_back(l + 1);
		positions.push_back(r - 1);
		positions.push_back(r + 1);
	}

	stable_sort(positions.begin(), positions.end());
	map<int, int> to, forward;
	int ind = 1;

	for (int i = 0; i < positions.size(); i++)
	{
		if (!i || positions[i - 1] != positions[i])
		{
			to[positions[i]] = ind;
			forward[ind] = positions[i];
			ind++;
		}
	}

	for (int i = 0; i < n; i++)
	{
		int l = to[challengers[i].first];
		int r = to[challengers[i].second];
		update(l, r, 1, sze, 1);
	}

	int ans = -1;

	for (int i = 0; i < n; i++)
	{
		int l = to[challengers[i].first];
		int r = to[challengers[i].second];
		int cnt = get(l, r, 1, sze, 1);

		if (cnt > 1)
		{
			ans = i + 1;
			break;
		}
	}

	printf("%d", ans);
	return 0;
}