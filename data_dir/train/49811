#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp> // Common file
//#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
//using namespace __gnu_pbds;
//typedef tree<
//        pair<int, int>, // change type
//        null_type,
//        less<pair<int, int> >, // change type
//        rb_tree_tag,
//        tree_order_statistics_node_update>
//        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define sz(x) (int)(x).size()
#define pb push_back
#define X first
#define Y second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-10);
int dcmp(long double x, long double y)
{
    if (abs(x - y) < eps)
        return 0;
    if (x > y)
        return 1;
    return -1;
}


vector<string> word;
vector<int> v[1000001][5]; // v[i][j] word with number of vowels i, and ends with vowel j
string vowels = "aeiou";

bool done(vector<pair<pair<int, int>, pair<int, int> > > &ans, int ansIndex)
{
    if (ansIndex >= sz(ans) || ans[ansIndex].first.first != -1)
        return true;
    return false;
}

void finish(vector<pair<pair<int, int>, pair<int, int> > > &ans)
{
    while(!ans.empty() && ans.back().first.first == -1)
        ans.pop_back();
    cout << sz(ans) << '\n';

    for (auto item : ans)
    {
        cout << word[item.first.first] << ' ' << word[item.second.first] << '\n';
        cout << word[item.first.second] << ' ' << word[item.second.second] << '\n';
    }
    exit(0);
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    int n;
    cin >> n;
    word.resize(n);
    map<int, int> index;
    index['a'] = 0;
    index['e'] = 1;
    index['i'] = 2;
    index['o'] = 3;
    index['u'] = 4;

    rep(i,0,n)
    {
        cin >> word[i];
        int cntVowels = 0, lastVowel = -1;
        for (char c : word[i])
        {

            if (find(vowels.begin(), vowels.end(), c) != vowels.end())
            {
                cntVowels++;
                lastVowel = c;
            }
        }
        lastVowel = index[lastVowel];
        v[cntVowels][lastVowel].push_back(i);
    }


    vector<pair<pair<int, int>, pair<int, int> > > ans; // ans[i].first is first line and ans[i].second is second line
    for (int cntVowels= 1; cntVowels<= 1000000; ++cntVowels)
    {
        for (auto curVowel : vowels)
        {
            curVowel = index[curVowel];

//            if (sz(v[cntVowels][curVowel]))
//            {
//                cout << cntVowels << ' ' << (char)(curVowel + 'a') << ' ';
//                for (auto index : v[cntVowels][curVowel])
//                {
//                    cout << word[index] << ' ';
//                }
//                cout << endl;
//            }
            while (sz(v[cntVowels][curVowel]) >= 2)
            {
                int s1 = v[cntVowels][curVowel].back();
                v[cntVowels][curVowel].pop_back();
                int s2 = v[cntVowels][curVowel].back();
                v[cntVowels][curVowel].pop_back();
                ans.push_back({{-1, -1}, {s1, s2}});
            }
        }
    }
    int ansIndex = 0;
    for (int cntVowels = 1; cntVowels <= 1000000; ++cntVowels)
    {
        vector<int> avail;
        for (auto curVowel : vowels)
        {
            curVowel = index[curVowel];
            for (int s : v[cntVowels][curVowel])
            {
                avail.push_back(s);
                if (sz(avail) >= 2)
                {
                    if (done(ans, ansIndex))
                        finish(ans);

                    int s1 = avail.back();
                    avail.pop_back();
                    int s2 = avail.back();
                    avail.pop_back();
                    ans[ansIndex].first = {s1, s2};
                    ansIndex++;
                }
            }
        }
    }

    while(ansIndex < sz(ans) - 1 && ans[ansIndex].first.first == -1)
    {
        auto p = ans.back();
        ans.pop_back();
        ans[ansIndex].first = {p.second.first, p.second.second};
        ++ansIndex;
    }

    finish(ans);

    return 0;
}