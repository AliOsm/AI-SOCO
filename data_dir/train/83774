#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pb push_back
#define engl "\n"
int in(){int32_t x ; scanf("%d",&x) ;  return x ;}
inline long long lin() {long long x ; scanf("%lld",&x) ; return x ;}
inline void read(int *a , int n) {for (int i = 0 ; i < n ; i ++) a[i] = in();}
inline void readL(int *a , int n) {for (int i = 0 ; i < n ; i ++) a[i] = lin();}
const int maxn = 1e6 + 10;
const int mod = 1e9 + 7;
const int MAX_VAL = 1e18 + 10;
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pair<int,int> > vii;
int a[maxn],n,r,rem,pref[maxn];
inline int interval(int from , int to)
{
    from = max(from,0ll);
    to = min(to,n-1);
    return pref[to] - (from ? pref[from - 1] : 0 );
}
pii q[maxn];
int t,h;
inline bool can(int lim)
{
    int still = 0;
    t = h = 0;
    int rem2 = rem;
    for (int i = 0 ; i < n ; i ++)
    {
        int current = interval(i-r, i+r) ;
        while(h < t && q[h].first < i - r){
            still -= q[h ++].second;
        }
        current += still;
        if (current < lim){
            int need = lim - current;
            if (need > rem2) return false;
            rem2 -= need;
            q[t ++] = {i+r,need};
            still += need;
        }
        
    }
    return true;
}
int32_t main()
{
    n = in() , r = in() , rem = lin();
    read(a,n);
    for (int i =0  ; i < n ; i++) pref[i] = a[i] + (i ? pref[i - 1] : 0 );
    int low = 0 , hi = 2e18;
    while (low + 1 < hi)
    {
        int mid = (low + hi ) >> 1;
        if (can(mid)) low = mid;
        else hi = mid;
    }
    cout << low << endl;
}