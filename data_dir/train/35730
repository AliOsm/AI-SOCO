/*
    OUTLAW!!
           ---SIDHU MOOSEWALA
                                */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
//#include <boost/functional/hash.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=1000000007;   
lli INF=1e17;
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctz(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clz(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffs(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
int fmx(int x, int y) { return (((y-x)>>(31))&(x^y))^y; }
int fmi(int x, int y) { return (((y-x)>>(31))&(x^y))^x; }
typedef tree<lli,null_type,less<lli>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,q,z,y,k,m;
const double pi1=3.14159265358979323846;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
//lli tot=0;
vector<lli> pf(string s) {
    int n = (int)s.length();
    vector<lli> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
//map<ll,lli> dp;
//set<lli> s[100005];
//lli dp[3005][3005];
//ost s[500005];
//string sdp[3005][3005];
lli vis[3000004];
vector<lli> v[500000];
lli cx,cy;
void dfs(lli i)
{
    if(vis[i])
    return;
    if(i>=200000)
    cy++;
    else
    cx++;
    vis[i]=1;
    for(auto &j: v[i])
    dfs(j);
}
struct edge
{
    lli x,y,z;
};
bool cmp(edge a,edge b)
{
    if(a.y==b.y)
    return a.z<b.z;
    return a.y<b.y;
}
lli dp[100005][2][2];
lli mk[1005];
void calc(lli k)
{
    for(lli i=1;i<=1000;i++)
    {
        lli oo=bip(i);
        mk[i]+=1;
        if(i==1)
        continue;
        mk[i]+=mk[oo];
    }
}
lli solve(string s,string t,lli n)
{
    dp[0][0][0]=1;
    for(int j=0;j<n;j++)
    {
        if(s[j]=='?'&&t[j]=='?')
        {
            dp[j+1][1][1]=dp[j][0][1]*45+dp[j][1][0]*45+dp[j][1][1]*100;
            dp[j+1][1][0]=dp[j][0][0]*45+dp[j][1][0]*55;
            dp[j+1][0][1]=dp[j][0][0]*45+dp[j][0][1]*55;
            dp[j+1][0][0]=dp[j][0][0]*10;
            dp[j+1][1][1]%=M;
            dp[j+1][1][0]%=M;
            dp[j+1][0][1]%=M;
            dp[j+1][0][0]%=M;
        }
        else if(s[j]=='?')
        {
            dp[j+1][1][1]=dp[j][0][1]*(9-t[j]+'0')+dp[j][1][0]*(t[j]-'0')+dp[j][1][1]*10;
            dp[j+1][1][0]=dp[j][0][0]*(9-t[j]+'0')+dp[j][1][0]*(9-t[j]+'0'+1);
            dp[j+1][0][1]=dp[j][0][0]*(t[j]-'0')+dp[j][0][1]*(t[j]-'0'+1);
            dp[j+1][0][0]=dp[j][0][0];
            dp[j+1][1][1]%=M;
            dp[j+1][1][0]%=M;
            dp[j+1][0][1]%=M;
            dp[j+1][0][0]%=M;
        }
        else if(t[j]=='?')
        {
           dp[j+1][1][1]=dp[j][0][1]*(s[j]-'0')+dp[j][1][0]*(9-s[j]+'0')+dp[j][1][1]*10;
           dp[j+1][1][0]=dp[j][0][0]*(s[j]-'0')+dp[j][1][0]*(s[j]-'0'+1);
           dp[j+1][0][1]=dp[j][0][0]*(9-s[j]+'0')+dp[j][0][1]*(9-s[j]+'0'+1);
           dp[j+1][0][0]=dp[j][0][0];
           dp[j+1][1][1]%=M;
            dp[j+1][1][0]%=M;
            dp[j+1][0][1]%=M;
            dp[j+1][0][0]%=M;
        }
        else
        {
            dp[j+1][1][1]=dp[j][1][1];
            if(s[j]>t[j])
            dp[j+1][1][1]+=dp[j][0][1];
            else if(s[j]<t[j])
            dp[j+1][1][1]+=dp[j][1][0];
            if(s[j]>=t[j])
            dp[j+1][1][0]=dp[j][1][0];
            if(s[j]>t[j])
            dp[j+1][1][0]+=dp[j][0][0];
            if(s[j]<=t[j])
            dp[j+1][0][1]=dp[j][0][1];
            if(s[j]<t[j])
            dp[j+1][0][1]+=dp[j][0][0];
            if(s[j]==t[j])
            dp[j+1][0][0]=dp[j][0][0];
            dp[j+1][1][1]%=M;
            dp[j+1][1][0]%=M;
            dp[j+1][0][1]%=M;
            dp[j+1][0][0]%=M;
        }
    }
    return dp[n][1][1]%M;
}
int main()
{
    ios_base::sync_with_stdio(0);
    lli n;
    cin>>n;
    string s,t;
    cin>>s>>t;
    cout<<solve(s,t,n);
    //for(int i=1;i<=n;i++)
}