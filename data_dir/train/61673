#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MAX_N = 405;
const int MAX_M = 250005;
const ll MAX_V = 1000000000000000000LL;
const int RANDOM = chrono::high_resolution_clock().now().time_since_epoch().count();

mt19937 randGen(RANDOM);
int n, m;
ll a[MAX_N];
tuple<int, int, ll, int> b[MAX_M];

inline bool check(int i, ll v)
{
	int s = get<0>(b[i]), f = get<1>(b[i]), r = get<3>(b[i]); ll c = get<2>(b[i]);
	ll curr = v, delta;
	for (int j = s; j < f; j++)
	{
		if (__builtin_smulll_overflow(a[j + 1] - a[j], c, &delta))
			return false;
		if (curr - delta < 0)
		{
			if (r == 0)
				return false;
			else
			{
				r--;
				curr = v;
				if (curr - delta < 0)
					return false;
			}
		}
		curr -= delta;
	}
	return true;
}

int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	for (int i = 0; i < m; i++)
	{
		cin >> get<0>(b[i]) >> get<1>(b[i]) >> get<2>(b[i]) >> get<3>(b[i]);
		get<0>(b[i])--;
		get<1>(b[i])--;
	}
	shuffle(b, b + m, randGen);

	ll maxV = 1;
	for (int i = 0; i < m; i++)
	{
		if (check(i, maxV))
			continue;
		ll l = maxV, r = MAX_V;
		while (r - l > 1)
		{
			ll mid = (l + r) / 2;
			if (check(i, mid))
				r = mid;
			else
				l = mid + 1;
		}
		if (!check(i, l))
			l = r;
		maxV = max(maxV, l);
	}
	cout << maxV << endl;
}