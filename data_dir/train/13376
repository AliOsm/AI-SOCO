/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
char arr[1001][1001];
int group[1001][1001];
bool visited[1001][1001];
int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

class ProblemDIgorInTheMuseum {
public:
    int n, m, k, cnt, paintings;
    bool ok(int i, int j){
        return (i>=0 and i<n and j>=0 and j<m);
    }
    void dfs(int i, int j){
        if(visited[i][j]) return;
        visited[i][j] = true;
        group[i][j] = cnt;
        for(int p = 0; p<4; ++p){
            int ni = i + dx[p], nj = j + dy[p];
            if(ok(ni, nj) and arr[ni][nj]=='*') ++paintings;
            if(ok(ni, nj) and arr[ni][nj] == '.' and !visited[ni][nj]) dfs(ni, nj);
        }
    }
	void solve(std::istream& in, std::ostream& out) {
        in>>n>>m>>k;
        for(int i = 0; i<n; ++i) for(int j = 0; j<m; ++j) in>>arr[i][j];
        memset(visited, false, sizeof(visited));
        cnt = 0;
        map<int, int> Map;
        for(int i = 0; i<n; ++i){
            for(int j = 0; j<m; ++j){
                if(!visited[i][j] and arr[i][j] == '.'){
                    ++cnt;
                    paintings = 0;
                    dfs(i, j);
                    Map[cnt] = paintings;
                }
            }
        }
        while(k--){
            int x, y; in>>x>>y;
            --x, --y;
            out<<Map[group[x][y]]<<'\n';
        }
	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	ProblemDIgorInTheMuseum solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
