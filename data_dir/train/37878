#include <bits/stdc++.h>
#define base 1000000007LL
#define ll long long
#define ld double
#define X first
#define Y second
#define pb push_back
#define EPS 1e-9
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
using namespace std;
typedef pair<int, int> II;
typedef pair<II, int> III;

ld PI = acos(-1);

struct point {
    ll x, y;
    int cs;
    point(ll x = 0, ll y = 0) {
        this->x = x;
        this->y = y;
    }
    bool operator== (point& p) {
        return p.x == x && p.y == y;
    }
    bool operator< (const point &p) const {
        if (y == p.y) return x < p.x;
        return y < p.y;
    }
    point rotate(ld alpha) {
        return point(x * cos(alpha) - y * sin(alpha), x * sin(alpha) + y * cos(alpha));
    }
} a[100010];

struct vecto {
    ll x, y;
    vecto(ll x = 0, ll y = 0) {
        this->x = x;
        this->y = y;
    }
    bool operator== (vecto& v) {
        return v.x == x && v.y == y;
    }
    bool operator< (const vecto& v) const {
        if (v.x == x) return y < v.y;
        return x < v.x;
    }
};

vecto toVec(point a, point b) { return vecto(b.x - a.x, b.y - a.y); }
ll crossProduct(vecto a, vecto b) { return a.x * b.y - a.y * b.x; }

int n, m;

bool isInside(point p)
{
    int A = 1, B = n-1, C;
    if (crossProduct(toVec(a[0], a[A]), toVec(a[0], p)) >= 0 || crossProduct(toVec(a[0], a[B]), toVec(a[0], p)) <= 0) return false;
    while (A <= B) {
        C = (A+B) >> 1;
        if (crossProduct(toVec(a[0], a[C]), toVec(a[0], p)) >= 0) B = C-1;
        else A = C+1;
    }
    return crossProduct(toVec(p, a[B]), toVec(p, a[A])) < 0;
}

int main()
{
    ios::sync_with_stdio(0);
    //freopen("inp.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    cin >> n;
    FOR(i,0,n-1) cin >> a[i].x >> a[i].y;
    cin >> m;
    FOR(i,0,m-1) {
        point p;
        cin >> p.x >> p.y;
        if (!isInside(p)) {
            cout << "NO";
            return 0;
        }
    }
    cout << "YES";
    return 0;
}
