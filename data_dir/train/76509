#pragma GCC optimize("Ofast")
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define int long long
#define ll long long
//#define int  unsigned long long
#define pb push_back
//#define double long double

using namespace std;
using namespace __gnu_pbds;
typedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
const int mod = 1e9 + 7;
const int N = 210000;
int w[N], h[N], c[N];
map < int, int > a[N], f1, f2;
main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    //freopen("input.txt", "r", stdin);
    int n;
    cin >> n;
    set < int > s1, s2;
    for (int i = 1; i <= n; i++){
        cin >> w[i] >> h[i] >> c[i];
        s1.insert(w[i]);
        s2.insert(h[i]);
    }
    if (s2.size() > s1.size()){
        swap(s1, s2);
        for (int i = 1; i <= n; i++) swap(w[i], h[i]);
    }
    int k1 = 0;
    for (auto i: s1){
        f1[i] = k1;
        k1++;
    }
    int k2 = 0;
    for (auto i: s2){
        f2[i] = k2;
        k2++;
    }
    for (int i = 1; i <= n; i++){
        w[i] = f1[w[i]];
        h[i] = f2[h[i]];
        a[w[i]][h[i]] = c[i];
    }
    if (s1.size() * s2.size() > n){
        cout << 0;
        return 0;
    }
    for (int i = 0; i < k1; i++){
        for (int j = 0; j < k2; j++){
            if (a[i][j] == 0){
                cout << 0;
                return 0;
            }
            if (i == 0 || j == 0) continue;
            int v1 = a[0][0];
            int v2 = a[i][0];
            int v3 = a[0][j];
            int v4 = a[i][j];
            int g = __gcd(v1, v2);
            v1 /= g;
            v2 /= g;
            g = __gcd(v1, v3);
            v1 /= g;
            v3 /= g;
            g = __gcd(v4, v2);
            v4 /= g;
            v2 /= g;
            g = __gcd(v4, v3);
            v4 /= g;
            v3 /= g;
            if (v1 != 1 || v2 != 1 || v3 != 1 || v4 != 1){
                cout << 0;
                return 0;
            }
        }
    }
    int g = 0;
    int ans = 0;
    for (int i = 0; i < k1; i++) g = __gcd(g, a[i][0]);
    for (int i = 1; i * i <= g; i++){
        if (g % i != 0) continue;
        int c = 1;
        int x = a[0][0] / i;
        for (int j = 0; j < k2; j++) if (a[0][j] % x != 0) c = 0;
        ans += c;
        if (i * i == g) continue;
        c = 1;
        x = a[0][0] / (g / i);
        for (int j = 0; j < k2; j++) if (a[0][j] % x != 0) c = 0;
        ans += c;
    }
    cout << ans;
}
