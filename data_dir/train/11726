#include <algorithm>
#include <vector>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <cstring>
#define pb push_back
#define mp make_pair
#define pp pair<int, int>
#define ppp pair<pp, int>
#define pp4 pair<pp, pp>
#define pp3 pair<ll, pair<int, int> > 
#define fi first
#define se second
#define N 3000005
#define M 30
#define mod 1000000007
#define inf 2000000001
#define esp 1e-9
#define BLOCK 333
#define BITNUM 555
#define BASE 311097
typedef long long ll;
const ll oo = (ll)1e18 + 1;
using namespace std;
int n;
int nxt[N][2];

int dfs(int node, int cur, int rm) {
	if (rm == 0) {
		return cur;
	}
	rm--;
	// cout << "node = " << node << " cur = " << cur << " rm = " << rm << "\n";

	int res = inf;
	for (int i = 0; i < 2; i++) {
		if (nxt[node][i] == -1)
			continue;

		// cout << i << " " << (i^1) << "\n";
		int add = (nxt[node][i ^ 1] == -1 ? 0 : (1 << rm));
		res = min(res, dfs(nxt[node][i], cur + add, rm));
	}
	return res;
}


int main() {
    ios::sync_with_stdio(false);
    // freopen("in.in", "r", stdin);
    memset(nxt, -1, sizeof(nxt));

    cin >> n;
    // cout << n << "\n";

    int m = 1;

   for (int kk = 1; kk <= n; kk++) {
    	int x;
    	cin >> x;
    	int node = 0;
    	for (int i = M - 1; i >= 0; i--) {
    		int val = ((x >> i) & 1);
    		if (nxt[node][val] == -1) 
    			nxt[node][val] = ++m;

    		node = nxt[node][val];
    	}
    }

    // cout << " m = " << m << "\n";

    cout << dfs(0, 0, M);
    return 0;
}
