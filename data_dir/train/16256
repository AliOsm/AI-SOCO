#include <bits/stdc++.h>
using ll = long long;
using namespace std;

int n, m, p;
vector<vector<bool>> vis;
vector<int> s, ans;
queue<tuple<int, int, int>> q, lol;

int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};

void bfs(int id) {
  int cnt = 0;

  while (lol.size()) {
    auto [x, y, s] = lol.front();
    lol.pop();
    if (s == 0) {
      q.emplace(id, x, y);
      continue;
    }
    for (int i = 0; i < 4; ++i) {
      int u = x + dx[i];
      int v = y + dy[i];
      if (0 <= u &&  //
          0 <= v &&  //
          u < n &&   //
          v < m &&   //
          not vis[u][v]) {
        ++cnt;
        vis[u][v] = true;
        lol.emplace(u, v, s - 1);
      }
    }
  }

  ans[id] += cnt;
}

int main() {
  cin.tie(0);
  cin.sync_with_stdio(0);

  cin >> n >> m >> p;

  vis.assign(n, vector<bool>(m));
  s.resize(p);
  ans.resize(p);

  for (auto& x : s) cin >> x;

  vector<vector<pair<int, int>>> pos(p);
  for (int i = 0; i < n; ++i) {
    string s;
    cin >> s;
    for (int j = 0; j < m; ++j) {
      auto c = s[j];
      if (c == '#') {
        vis[i][j] = true;
      } else if (c != '.') {
        int d = c - '1';
        pos[d].emplace_back(i, j);
      }
    }
  }

  // first add
  for (int i = 0; i < p; ++i) {
    for (auto [x, y] : pos[i]) {
      q.emplace(i, x, y);
      vis[x][y] = true;
      ans[i]++;
    }
  }

  while (q.size()) {
    auto id = get<0>(q.front());
    while (q.size() && id == get<0>(q.front())) {
      auto [_, x, y] = q.front();
      q.pop();
      lol.emplace(x, y, s[id]);
    }
    bfs(id);
  }

  for (auto x : ans) cout << x << " ";
}