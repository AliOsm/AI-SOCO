#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#define ll long long
using namespace std;

vector<int> edges[111111];
int poss[111111];

bool HasBit(int x,int b) {
    return ((x>>b)&1);
}

int main() {
    int n,m;
    cin>>n>>m;
    
    for(int e=1;e<=m;e++) {
        int u,v;
        cin>>u>>v;
        edges[u].push_back(v);
        edges[v].push_back(u);
    }
    
    for(int i=1;i<=n;i++) {
        poss[i]=7;
    }
    
    int is_non_empty_mask=0;
    
    for(int i=1;i<=n;i++) {
        for(int b=0;b<=2;b++) {
            if (HasBit(poss[i],b)) {
                is_non_empty_mask |= (1<<b);
                poss[i]=(1<<b);
                int other_mask = (7^poss[i]);
                for(int j : edges[i]) {
                    poss[j] &= other_mask;
                }
            }
        }
    }
    

    
    
    bool ok=true;
    for(int i=1;i<=n;i++)
        if (poss[i]==0)
            ok=false;
    if (is_non_empty_mask != 7) {
        ok=false;
    }
    
    for(int u=1;u<=n;u++)
        for(int v : edges[u]) {
            if (poss[u]&poss[v]) {
                ok=false;
            }
        }
    
    
    ll counts[3];
    counts[0]=counts[1]=counts[2]=0;
    
    for(int i=1;i<=n;i++) {
        for(int b=0;b<=2;b++) {
            if (poss[i]==(1<<b))
                counts[b]++;
        }
    }
    
    if (m != counts[0]*counts[1]+counts[1]*counts[2]+counts[0]*counts[2])
        ok=false;
    
    
    
    if (!ok) {
        cout << -1 << endl;
        return 0;
    }
    
    for(int i=1;i<=n;i++) {
        for(int b=0;b<=2;b++) {
            if (HasBit(poss[i],b)) {
                printf("%d ",b+1);
                break;
            }
        }
    }
    cout << endl;
    
    
    
}
