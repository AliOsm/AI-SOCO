// In the name of god
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <assert.h>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <bitset>
#define sqr(a) ((a)*(a))
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
 
const long long INF = (long long)1e18;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)1e6 + 227 + 1;    
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-9;
 
long long bin_pow(long long a, long long b) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2);
    ans = ans * ans;
    if(b % 2) ans = ans * a;
    return ans;
}

struct tree {
    int n, m;
    vector<long long> t;

    tree(int n, int m) : n(n), m(m) {
        t.resize(n * 4 + 227 + 1, 1);
    } ;

    void modi(int v, int l, int r, int p, int a) {
        if(l == r) {
            t[v] = a % m;
            return;
        }

        int mid = (l + r) / 2;
        if(p <= mid)
            modi(v * 2, l, mid, p, a);
        else
            modi(v * 2 + 1, mid + 1, r, p, a);

        t[v] = (t[v * 2] * t[v * 2 + 1]) % m;
    }

    long long get(int v, int l, int r, int _l, int _r) {
        if(_l > _r) return 1;
        if(l == _l && r == _r)
            return t[v];

        int mid = (l + r) / 2;

        return (get(v * 2, l, mid, _l, min(mid, _r)) * get(v * 2 + 1, mid + 1, r, max(_l, mid + 1), _r)) % m;
    }
} ;

int main() {
    // freopen(".in", "r", stdin);

    int n, m; cin >> n >> m;

    tree t(n, m);

    for(int i = 0; i < n; i++) {
        t.modi(1, 1, n, i + 1, next_int<int>());
    }

    long long ans = 0;
    for(int i = 1; i <= n; i++) {
        int l = i;
        int r = n;

        while(r - l > 1) {
            int mid = (l + r) / 2;

            if(t.get(1, 1, n, i, mid) == 0)
                r = mid;
            else
                l = mid;
        }

        if(t.get(1, 1, n, i, l) == 0)
            ans += n - l + 1;
        else if(t.get(1, 1, n, i, r) == 0)
            ans += n - r + 1;
    }

    cout << ans << "\n";
}
