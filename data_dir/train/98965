#include <stdio.h>
#include <stack>
#include <map>
#include <string.h>
#include <string>
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <vector>
#include <set>
#include <queue>
#include <climits>
#include <unordered_map>
#include <iterator> 
using namespace std;
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define mp make_pair
#define inf32 INT_MAX
#define inf64 LLONG_MAX
#define PI acos(-1)
#define cos45 cos(PI/4)
#define ld long double
#define inf 1000000
#define pii pair<int, int>
#define pll pair<ll, ll>
const int mod = (1e9) + 7;
const double eps = 1e-6;
const int siz = 2e5 + 5, siz2 = 1049659, siz3 = 5032108;
int n, arr[siz];
vector<int> zeros;
bool used[siz];
void fin() {
	int lst = -1;
	for (int i = 1; i <= n; i++) {
		if (!used[i]) {
			if (lst != -1) {
				printf("1 %d %d\n", lst, i);
			}
			lst = i;
		}
	}
}
int main()
{
	scanf("%d", &n);
	int neg = 0;
	for (int i = 1; i <= n; i++) {
		scanf("%d", &arr[i]);
		if (arr[i] < 0) {
			neg++;
		}
		else if (arr[i] == 0) {
			zeros.push_back(i);
		}
	}
	if (neg % 2) {
		int mn = INT_MAX, ind = -1;
		for (int i = 1; i <= n; i++) {
			if (arr[i] < 0 && abs(arr[i]) < mn) {
				mn = abs(arr[i]);
				ind = i;
			}
		}
		int sz = zeros.size();
		if (sz == 0) {
			printf("2 %d\n", ind);
			used[ind] = true;
		}
		else {
			for (int i = 0; i < sz - 1; i++) {
				printf("1 %d %d\n", zeros[i], zeros[i+1]);
				used[zeros[i]] = used[zeros[i + 1]] = true;
			}
			printf("1 %d %d\n", ind, zeros[sz-1]);
			used[ind] = used[zeros[sz - 1]] = true;
			if (sz + 1 < n) {
				printf("2 %d\n", zeros[sz-1]);
				used[zeros[sz - 1]] = true;
			}
		}
		fin();
	}
	else {
		int sz = zeros.size();
		if (sz > 0) {
			for (int i = 0; i < sz - 1; i++) {
				printf("1 %d %d\n", zeros[i], zeros[i + 1]);
				used[zeros[i]] = used[zeros[i + 1]] = true;
			}
			if (sz < n) {
				printf("2 %d\n", zeros[sz - 1]);
				used[zeros[sz - 1]] = true;
			}
		}
		fin();
	}
	return 0;
}
