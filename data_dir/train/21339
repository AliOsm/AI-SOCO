#include<bits/stdc++.h>
using namespace std;
const int N = 100005;
struct Fraction {
    long long a, b; int id;
    inline bool operator < (const Fraction &X) {
        return (a * X.b < b * X.a);
    }
};
int n, m, k, A[N], T[N];
pair < int , int > MX[N];
vector < pair < int , int  > > S[N];
vector < Fraction > Q;
inline bool CMP(int i, int j)
{
    return(T[i] < T[j]);
}
int main()
{
    scanf("%d%d%d", &k, &n, &m);
    for (int i = 1; i <= k; i++)
        scanf("%d", &A[i]);
    for (int i = 1; i <= n; i++)
    {
        int id, a;
        scanf("%d%d%d", &T[i], &id, &a);
        if (T[i] == 1 && MX[id].first < a)
            MX[id] = {a, i};
        else if (T[i] == 2)
            S[id].push_back({a, i});
        else if (T[i] == 3)
            Q.push_back({a - 1, 1, i});
    }
    for (int i = 1; i <= k; i++)
    {
        if (MX[i].first > A[i])
            S[i].push_back({MX[i].first - A[i], MX[i].second});
        sort(S[i].begin(), S[i].end());
        reverse(S[i].begin(), S[i].end());
        long long sum = A[i];
        for (auto X : S[i])
            Q.push_back({X.first, sum, X.second}), sum += X.first;
    }
    sort(Q.begin(), Q.end());
    reverse(Q.begin(), Q.end());
    vector < int > vec;
    m = min(m, (int)Q.size());
    for (int i = 0; i < m; i++)
        vec.push_back(Q[i].id);
    sort(vec.begin(), vec.end(), CMP);
    printf("%d\n", m);
    for (int id : vec)
        printf("%d ", id);
    return 0;
}