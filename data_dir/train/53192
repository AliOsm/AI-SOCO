#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
//#include <unordered_set>
//#include <unordered_map>

#define pii pair<int, int>

#define pb push_back
#define mp make_pair

#define f first
#define s second

using namespace std;


typedef long double ld;
typedef long long ll;


const ld PI = acos(-1);
const ld EPS = 1e-6;

const int MOD = (int) 1e9 + 7;
const int N = (int) 2e5 + 7;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};

int n, m, q;

int color[N];
int parent[N];
vector<int> all[N];

int get(int x) {
  if (x == parent[x]) return x;
  return parent[x] = get(parent[x]);
}

bool join(int x, int y, int type) {
  // type = 1 same
  // type = 1 different
  int old_x = x;
  int old_y = y;
  x = get(x);
  y = get(y);
  if (x == y) {
    if (type == 1)
      return color[old_x] == color[old_y];
    return color[old_x] != color[old_y];
  }
  if (all[y].size() < all[x].size())
    swap(x, y);
  if ((type == 1 && color[old_x] != color[old_y]) || (type == 2 && color[old_x] == color[old_y])) {
    for (auto it : all[x])
      color[it] ^= 1;
  }
  if (type == 1 && color[old_x] != color[old_y])
    return false;
  if (type == 2 && color[old_x] == color[old_y])
    return false;
  parent[x] = y;
  for (auto it : all[x])
    all[y].pb(it);
  all[x].clear();
  return true;
}

int main() {
  #ifdef LOCAL
  freopen("in.txt", "r", stdin);
  #endif

  ios_base::sync_with_stdio(0);
  cin.tie(0);

  cin >> n >> m >> q;
  map<string, int> id;
  for (int i = 1; i <= n; i++) {
    string word;
    cin >> word;
    id[word] = i;
    all[i].pb(i);
    parent[i] = i;
  }
  while (m--) {
    string a, b;
    int t;
    cin >> t >> a >> b;
    int x = id[a];
    int y = id[b];
    if (join(x, y, t)) cout << "YES\n";
    else cout << "NO\n";
    //for(int i=1;i<=n;i++)
    //  cout<<get(i)<<' ';
    //cout<<endl;
  }
  while (q--) {
    string a, b;
    cin >> a >> b;
    int x = id[a];
    int y = id[b];
    int oldx = x;
    int oldy = y;
    x = get(x);
    y = get(y);
    if (x != y) cout << "3\n";
    else if (color[oldx] == color[oldy]) cout << "1\n";
    else cout << "2\n";
  }

  
  return 0; 
}
