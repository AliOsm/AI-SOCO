#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>
#include <complex>

using namespace std;
int dx[8]={1,-1,0,0,1,-1,1,-1};
int dy[8]={0,0,-1,1,1,-1,-1,1};
const double EPS=1e-8;
const int N=100005;
typedef complex<double> point;
#define X real()
#define Y imag()
#define cp(a,b) (conj(a)*b).imag()
#define dp(a,b) (conj(a)*b).real()
#define lengthsq(a)    dp(a,a)
/*
 -- Valid
 -- const (10^9>sz)
 -- array index
 -- less or more , check if
 -- even or odd
 -- inequality
 */
int k;
string s;
int memo[1002][11][11];
bool ok[11];
int solve(int idx,int df,int last){
    if(idx==k){
        return memo[idx][df][last]=1;
    }
    if(memo[idx][df][last]!=-1){return memo[idx][df][last]; }
    int ret=0;
    for(int i=df+1;i<=10;i++){
        if(ok[i]&&i!=last){
            ret|=solve(idx+1,i-df,i);
        }
    
    }
    return memo[idx][df][last]=ret;
}
vector<int> ans;
void out(int idx,int df,int last){
    if(idx==k){
        return ;
    }
    for(int i=df+1;i<=10;i++){
        if(ok[i]&&i!=last){
            if(memo[idx+1][i-df][i]==1){
                ans.push_back(i);
                out(idx+1,i-df,i);
                break;
            }
        }
        
    }
    
}
int main(){
    cin>>s;
    scanf("%d",&k);
    for(int i=0;i<s.size();i++){
        if(s[i]=='1'){ok[i+1]=1;}
    }
    memset(memo,-1,sizeof(memo));
    int ret=solve(0,0,0);
    if(!ret){
        puts("NO");
        return 0;
    }
    puts("YES");
    out(0,0,0);
    for(int i=0;i<ans.size();i++){
        if(i){printf(" ");}
        printf("%d",ans[i]);
    }
    
    
    return 0;//rev Ab steps
}