//
// Created by Ильдар Ялалов on 14.01.2020.
//
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int inf_int = 1e9 + 100;
const ll inf_ll = 1e18;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef long double dbl;
typedef unsigned int uint;
#define pb push_back
#define eb emplace_back
const double pi = 3.1415926535898;
#define dout if(debug) cout
#define fi first
#define se second
#define sp setprecision
#define sz(a) (int(a.size()))
#define mp make_pair
#define all(a) a.begin(),a.end()

//region debug

template<class T1, class T2>
std::ostream &operator<<(std::ostream &out, const std::pair<T1, T2> &rhs) {
    out << "( " << rhs.first << " , " << rhs.second << " )";
    return out;
}

template<typename A, typename B>
string to_string(pair<A, B> p);

template<typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);

template<typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);

string to_string(const string &s) {
    return '"' + s + '"';
}

string to_string(const char *s) {
    return to_string((string) s);
}

string to_string(bool b) {
    return (b ? "true" : "false");
}

string to_string(vector<bool> v) {
    bool first = true;
    string res = "{";
    for (int i = 0; i < static_cast<int>(v.size()); i++) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(v[i]);
    }
    res += "}";
    return res;
}

template<size_t N>
string to_string(bitset<N> v) {
    string res = "";
    for (size_t i = 0; i < N; i++) {
        res += static_cast<char>('0' + v[i]);
    }
    return res;
}

template<typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}


template<typename A>
string to_string(vector<vector<A>> v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
        res += "\n";
    }
    res += "}";
    return res;
}


template<typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template<typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";
}

template<typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " +
           to_string(get<3>(p)) + ")";
}

void debug_out() { cerr << endl; }

template<typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}
//endregion

#ifdef zxc
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

bool debug = 0;
const int MAXN = 4e5 + 100;
const int LOG = 21;
const int mod = 1e9 + 7;
const int MX = (2e7 + 100);


int a[MAXN], ca[MAXN];
int b[MAXN], cb[MAXN];
int x[MAXN], y[MAXN], z[MAXN];

int mx_c = 0;

void compress(int n, int m, int p) {
    vector<int> vals;
    for (int i = 1; i <= m; ++i) {
        vals.pb(b[i]);
    }
    for (int i = 1; i <= p; ++i) {
        vals.pb(y[i]);
    }
    vals.pb(inf_int);
    sort(all(vals));

    vals.resize(unique(all(vals)) - vals.begin());

    mx_c = sz(vals) + 5;
    for (int i = 1; i <= m; ++i) {
        b[i] = lower_bound(all(vals), b[i]) - vals.begin();
    }
    for (int i = 1; i <= p; ++i) {
        y[i] = lower_bound(all(vals), y[i]) - vals.begin();
    }

}

struct event {
    int val;
    int id;
    int type;

    bool operator<(const event &o) const {
        if (val != o.val)
            return val < o.val;
        return type < o.type;
    }
};

ll t[4 * MAXN];
ll add[4 * MAXN];

#define left v<<1,tl,tm
#define right v<<1|1,tm+1,tr

inline void push(int v) {
    if (add[v]) {
        add[v << 1] += add[v];
        add[v << 1 | 1] += add[v];
        t[v << 1] += add[v];
        t[v << 1 | 1] += add[v];
        add[v] = 0;
    }
};

inline void upd(int v) {
    t[v] = max(t[v << 1], t[v << 1 | 1]);
}

void build(int v, int tl, int tr) {
    if (tl == tr) {
        t[v] = -inf_ll;
    } else {
        int tm = (tl + tr) >> 1;
        build(left);
        build(right);
        upd(v);
    }
}

void update(int v, int tl, int tr, int l, int r, ll x) {
    if (l > tr || r < tl)
        return;
    if (l <= tl && tr <= r) {
        t[v] += x;
        add[v] += x;
    } else {
        int tm = (tl + tr) >> 1;
        push(v);
        update(left, l, r, x);
        update(right, l, r, x);
        upd(v);
    }
}


void solve() {
    int n;
    cin >> n;
    int m;
    cin >> m;
    int p;
    cin >> p;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i] >> ca[i];
    }
    map<int, int> mx_sh;
    for (int i = 1; i <= m; ++i) {
        cin >> b[i] >> cb[i];
    }
    for (int i = 1; i <= p; ++i) {
        cin >> x[i] >> y[i] >> z[i];
    }
    compress(n, m, p);

    for (int i = 1; i <= m; ++i) {
        if (!mx_sh.count(b[i])) {
            mx_sh[b[i]] = inf_int;
        }
        mx_sh[b[i]] = min(mx_sh[b[i]], cb[i]);
    }
    vector<event> cc;
    for (int i = 1; i <= n; ++i) {
        event temp;
        temp.val = a[i];
        temp.id = i;
        temp.type = 1;
        cc.pb(temp);
    }
    build(1, 0, mx_c);
    debug(t[1]);
    for (auto x : mx_sh) {
        update(1, 0, mx_c, x.fi, x.fi, inf_ll - x.se);

    }
    debug(t[1]);

    for (int i = 1; i <= p; ++i) {
        event temp;
        temp.val = x[i];
        temp.id = i;
        temp.type = 2;
        cc.pb(temp);
    }
    sort(all(cc));
    ll ans = -inf_ll;
    for (auto x:  cc) {
        if (x.type == 1) {
            ll cur = t[1] - ca[x.id];
            ans = max(ans, cur);
        } else {
            int id = x.id;
            update(1, 0, mx_c, y[id] + 1, mx_c, z[id]);
        }
    }
    cout << ans << "\n";

}

// CHECK LIMITS (n <= 10^5)
// CHECK CORNER CASES ( n==1)
signed main() {
#ifdef zxc
    freopen("../input.txt", "r", stdin);
    // freopen("../output.txt", "w", stdout);
#else
#endif //zxc
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cout.setf(ios::fixed);
    cout.precision(15);

    int t = 1;
    while (t--)
        solve();
    debug(1.0 * clock() / CLOCKS_PER_SEC);
}