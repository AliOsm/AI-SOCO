#include<bits/stdc++.h>
using namespace std ;
#define LL long long
#define mod 1000000007LL
#define PI acos(-1.0)


/*
// Ordered set
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template<typename T> using orderset = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
//orderset<int> s ; //orderset<int>::iterator it ;
//orderset<int> X; //X.insert(1); //X.insert(2); //X.insert(4); //X.insert(8); //X.insert(16);
//cout<<*X.find_by_order(1)<<endl; // 2 //cout<<*X.find_by_order(2)<<endl; // 4 //cout<<*X.find_by_order(4)<<endl; // 16 //cout<<(end(X)==X.find_by_order(6))<<endl; // true
//cout<<X.order_of_key(-5)<<endl;  // 0 //cout<<X.order_of_key(1)<<endl;   // 0 //cout<<X.order_of_key(3)<<endl;   // 2 //cout<<X.order_of_key(4)<<endl;   // 2 //cout<<X.order_of_key(400)<<endl; // 5
*/

LL n ;
LL a[100005] ;
LL Left[100005] ;
LL Right[100005] ;
vector< LL > store ;
void Input(){
    scanf("%lld",&n) ;
    for( int i = 1 ; i <= n ; i ++ ){
        scanf("%lld",&a[i]) ;
    }
}

LL Fun( LL divisor ){
    LL pos = 0 ;
    LL res = 0 ;
    while( pos < store.size() ){
        LL left = store[pos] , right = store[pos+divisor-1] ;
        //printf("%lld %lld...\n",left,right) ;
        for( int i = left - 1 ; i <= right + 1 ; i ++ ){
            Left[i] = Right[i] = 0 ;
        }
        LL mot = 0 ;
        for( int i = left ; i <= right ; i ++ ){
            Left[i] = mot ;
            if( a[i] > 0 ){
                mot ++ ;
            }
        }
        for( int i = left ; i <= right ; i ++ ){
            Left[i] += Left[i-1] ;
        }
        mot = 0 ;
        for( int i = right ; i >= left ; i -- ){
            Right[i] = mot ;
            if( a[i] > 0 ){
                mot ++ ;
            }
        }
        for( int i = right ; i >= left ; i -- ){
            Right[i] += Right[i+1] ;
        }
        LL Mn = LLONG_MAX ;
        for( int i = left ; i <= right ; i ++ ){
            Mn = min( Mn , Left[i] + Right[i] ) ;
        }
        res += Mn ;
        pos += divisor ;
    }
    return res ;
}

void Calculation(){
    LL tot = 0 ;
    for( int i =  1 ; i <= n ; i ++ ){
        tot += a[i] ;
        if( a[i] != 0 ) store.push_back( i ) ;
    }
    if( tot <= 1 ){
        puts("-1") ;
        return ;
    }
    LL divisor = tot ;
    LL res = LLONG_MAX ;
    for( int i = 1 ; i * i <= tot ; i ++ ){
        if( tot % i == 0 ){
            if( i != 1 ){
                res = min( res , Fun( i ) ) ;
            }
            res = min( res , Fun( tot / i ) ) ;
        }
    }
    printf("%lld\n",res) ;
}

void Solve(){
    Input() ;
    Calculation() ;
}

int main()
{
    LL q ;
    //freopen("input.txt","r",stdin) ;
    //scanf("%lld",&q) ;
    q = 1 ;
    while( q-- ) Solve() ;
    return 0 ;
}
