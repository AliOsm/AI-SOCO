#include <stdio.h>
#include <cstdio>
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cassert>
#include <math.h>
#include <fstream>
#include <stack>
#include <list>
#include <queue>
#include <set>
#include <functional>
#include <unordered_set>
#include <random>
#include <map>
#include <time.h>

#define pb push_back
#define F first
#define S second
#define mp make_pair
#define len(s) s.size()
#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define rocknroll cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0)
#define pq priority_queue
#define pii pair < int, int >
#define pll pair < ll, ll >
#define vec vector

using namespace std;
typedef long long ll;
typedef long double ld;

ll nl();
int ni();

int main() {
	int a = ni();
	vec<ll> v;
	for (int q = 0; q < a; q++) v.pb(ni());
	sort(all(v));
	ll o = 0;
	for (int q = 0; q < a; q++) o += pow((v[q] + v[a - q - 1]), 2);
	cout << o / 2;
}

ll nl() {
	ll n; cin >> n;
	return n;
}

int ni() {
	int n; cin >> n;
	return n;
};


/*

class Treap;
class Node;
class Pair;

//ifstream in("INPUT.TXT"); ofstream out("OUTPUT.TXT");

class Treap {


	class Node {

		int x;
		int y;
		Node *l;
		Node *r;

		Node(int x) {
			this->x = x;
			this->y = rand();
		}
	};

	Node root;

	class Pair {

		Node *l;
		Node *r;

		Pair(Node *l, Node *r) {
			this->l = l;
			this->r = r;
		}

	};

	Node* merge(Node *l, Node *r) {
		if (l == nullptr) return r;
		if (r == nullptr) return l;
		if (l->y > r->y) {
			l->r = merge(l->r, r);
			return l;
		}
		r->l = merge(l, r->l);
		return l;
	}

	Pair* split(Node *n, int k) {
		if (n == nullptr) return new Pair(nullptr, nullptr);
		if (n->x <= k) {
			Pair* p = split(n->r, k);
			n->r = p->l;
			p->l = n;
			return p;
		}
		Pair* p = split(n->l, k);
		n->l = p->r;
		p->r = n;
		return p;
	}

};

int main()
{

}
*/