#include<stdio.h>
#include<iostream>
#include<string.h>
#include<string>
#include<ctype.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<bitset>
#include<algorithm>
#include<time.h>
using namespace std;
void fre() { freopen("c://test//input.in", "r", stdin); freopen("c://test//output.out", "w", stdout); }
#define MS(x,y) memset(x,y,sizeof(x))
#define MC(x,y) memcpy(x,y,sizeof(x))
#define MP(x,y) make_pair(x,y)
#define ls o<<1
#define rs o<<1|1
typedef long long LL;
typedef unsigned long long UL;
typedef unsigned int UI;
template <class T1, class T2>inline void gmax(T1 &a, T2 b) { if (b>a)a = b; }
template <class T1, class T2>inline void gmin(T1 &a, T2 b) { if (b<a)a = b; }
const int N = 1e5+10, M = 0, Z = 1e9 + 7, ms63 = 0x3f3f3f3f;
int n;
int v[N];
vector< pair<int,int> >a[N];
int ans;
void dfs(int x, int dis)
{
	if (dis < 0)dis = 0;
	if (dis > v[x])return;
	--ans;
	for (int i = a[x].size() - 1; ~i; --i)
	{
		int y = a[x][i].first;
		dfs(y, dis + a[x][i].second);
	}
}
int main()
{
	while (~scanf("%d", &n))
	{
		for (int i = 1; i <= n; ++i)scanf("%d", &v[i]), a[i].clear();
		for (int i = 2; i <= n; ++i)
		{
			int x, y;
			scanf("%d%d", &x, &y);
			a[x].push_back(MP(i,y));
		}
		ans = n;
		dfs(1, 0);
		printf("%d\n", ans);
	}
	return 0;
}
/*
【trick&&吐槽】
不用额外写第二个dfs求子树size，我们只要求我们能到达那些点即可。

【题意】
删点使得父节点到子孙距离<=子孙权值
问删点数

【类型】
dfs

【分析】
直接跑dfs即可

【时间复杂度&&优化】


【数据】


*/