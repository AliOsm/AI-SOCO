#include <iostream>
#include <algorithm>
#include <vector>
#include <bitset>
#include <cstdlib>
#include <random>
#include <time.h>
#include <map>
#include <set>
#include <cmath>
#include <stdio.h>
#include <cstring>
using namespace std;
typedef long long ll;
#define y1 fjlwekf
#define F first
#define S second
const int mod = 1e9 + 7;
const int inf = 2e9 + 1;
const double eps = 1e-9;
const int N = 1e5 + 5;
int n, m;
vector<vector<int> >  g;
vector<pair<int, int> > gg;
bool used[N];
vector<int> ans;
void dfs (int v) {
	used[v] = true;
	for (size_t i=0; i<g[v].size(); ++i) {
		int to = g[v][i];
		if (!used[to])
			dfs (to);
	}
	ans.push_back (v);
}

void topological_sort() {
	for (int i=0; i<n; ++i)
		used[i] = false;
	ans.clear();
	for (int i=0; i<n; ++i)
		if (!used[i])
			dfs (i);
	reverse (ans.begin(), ans.end());
}
int main()
{
    //freopen("postman.in", "r", stdin); freopen("postman.out", "w", stdout);
    cin >> n >> m;
    for(int i = 0; i < m; ++i){
        int x, y;
        scanf("%d %d", &x, &y);
        --x; --y;
        gg.push_back({x, y});
    }
    int an = -1;
    int l = 0;
    int r = m;
    while(l <= r){
        int mi = (l + r) / 2;
        g.resize(n);
        for(int i = 0; i < n; ++i){
            g[i].clear();
        }
        vector<pair<int, int> > cur;
        for(int i = 0; i < mi; ++i){
            cur.push_back(gg[i]);
            g[gg[i].first].push_back(gg[i].second);
        }
        sort(cur.begin(), cur.end());
        ans.clear();
        topological_sort();
        int flag = 0;
        for(int i = 0; i < ans.size() - 1; ++i){
            if(!binary_search(cur.begin(), cur.end(), make_pair(ans[i], ans[i + 1]))){
                flag = 1;
                break;
            }
        }
        if(!flag){
            an = mi;
            r = mi - 1;
        }
        else{
            l = mi + 1;
        }
    }
    cout << an << endl;
    return 0;
}
