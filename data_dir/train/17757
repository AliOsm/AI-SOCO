#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define SPEED ios_base::sync_with_stdio(false); cin.tie(NULL);
#define FOR(i, a, b) for (ll i = a; i < b; ++i)
#define RFOR(i, b, a) for (ll i = b; i >= a; --i)
#define ALL(x) x.begin(), x.end()
#define DEBUG(args...) { string _s = #args; replace(ALL(_s), ' ', '\0');\
replace(ALL(_s), ',', ' ');\
stringstream _ss(_s); istream_iterator<string> _it(_ss); _debug(_it, args);}
#define endl "\n"
#define F first
#define S second
#define pb(x) push_back(x)
#define mp(x, y) make_pair(x, y)

using namespace std;
using namespace __gnu_pbds;

template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

void _debug(istream_iterator<string>) {}
template<typename T, typename... Args>
void _debug(istream_iterator<string> it, T first, Args... args) {
    cerr << ">> " << *it << " : " << first << endl; _debug(++it, args...);
}
template <typename T1, typename T2>
inline ostream& operator << (ostream& out, const pair<T1, T2>& p) {
    return out << "(" << p.F << ", " << p.S << ")";
}
template<typename T>
inline ostream& operator << (ostream& out, const vector<T>& v) {
    if (v.empty()) return out << "[]";
    else { out << '['; for (auto& e : v) { out << e << ", "; } return out << "\b\b]"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const set<T>& s) {
    if (s.empty()) return out << "{}";
    else { out << '{'; for (auto& e : s) { out << e << ", "; } return out << "\b\b}"; }
}
template<typename T>
inline ostream& operator << (ostream& out, const unordered_set<T>& s) {
    return out << set<T>(ALL(s));
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const map<T1, T2>& m) {
    if (m.empty()) return out << "{}";
    out << '{'; for (auto& p : m) { out << p << ", "; } return out << "\b\b}";
}
template<typename T1, typename T2>
inline ostream& operator << (ostream& out, const unordered_map<T1, T2>& m) {
    return out << map<T1, T2>(ALL(m));
}
template<typename T>
inline ostream& operator << (ostream& out, const ordered_set<T>& s) {
    return out << set<T>(ALL(s));
}

typedef long long ll;
typedef long double ld;
typedef vector<long long> vll;
typedef pair<ll, ll> pll;
typedef vector<pair<ll, ll>> vpll;
typedef unordered_map<ll, ll> STll;
/************************************** MAIN PROGRAM ********************************************/

int main()
{
  //  freopen("input.txt", "r", stdin);
    SPEED
    ll n, m;
    cin >> n >> m;
    vector<ll> x(n + m);
    for (auto &e : x) {
        cin >> e;
    }
    vector<short> t(n + m);
    for (auto &e : t) {
        cin >> e;
    }

    vector<int> closestL(n + m, -1);
    vector<int> closestR(n + m, -1);

    ll last = -1;
    for (int i = 0; i < n + m; ++i) {
        if (t[i]) {
            last = i;
        } else {
            closestL[i] = last;
        }
    }
    last = -1;
    for (int i = n + m - 1; i >= 0; --i) {
        if (t[i]) {
            last = i;
        } else {
            closestR[i] = last;
        }
    }
  //  DEBUG(closestL, closestR)
    vector<int> ansVec(n + m, 0);
    for (int i = 0; i < n + m; ++i) {
        if (t[i]) continue;

        ll ldis = LLONG_MAX, rdis = LLONG_MAX;
        if (closestL[i] != -1)
            ldis = abs(x[closestL[i]] - x[i]);
        if (closestR[i] != -1)
            rdis = abs(x[closestR[i]] - x[i]);
        ll driver = -1;
   //     DEBUG(driver)
        if (ldis <= rdis) {
            driver = closestL[i];
        } else {
            driver = closestR[i];
        }
        ansVec[driver]++;
    }
    for (int i = 0; i < n + m; ++i) {
        if (t[i])
            cout << ansVec[i] << ' ';
    }
}
/************************************** END OF PROGRAM ******************************************/
/** Stuff you should look for:
 * int overflow, array bounds, over-counting
 * special cases (n=1?), set/unordered_set TLE, multi-set/set error
 * do something instead of nothing and stay organized
 */
