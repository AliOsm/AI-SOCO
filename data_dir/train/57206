#include <bits/stdc++.h>

#define ll long long
#define ld long double

using namespace std;
vector<ll> rb, rg, b;

ll f(const vector<ll> &V, ll l, ll r)
{
    int lb = lower_bound(V.begin(), V.end(), l) - V.begin();
    int lr = lower_bound(V.begin(), V.end(), r) - V.begin();

    ll maxs = 0;
    for(int i=lb; i<lr; i++){
        maxs = max(maxs, V[i+1]-V[i]);
    }
    return maxs;
}

/*ll g(const vector<ll>& v, ll l, ll r) {
    int il = lower_bound(v.begin(), v.end(), l) - v.begin();
    int ir = lower_bound(v.begin(), v.end(), r) - v.begin();
    ll an = 0;
    for (int i = il; i < ir; ++i) {
        an = max(an, v[i + 1] - v[i]);
    }

    return an;
}*/

int main()
{
    ll n;
    scanf("%lld", &n);
    ll pos;
    char str;
    for(ll i=0; i<n; i++){
        scanf("%lld", &pos);
        getchar();
        scanf("%c", &str);
        if(str == 'B') rb.push_back(pos);
        else if(str == 'R') rg.push_back(pos);
        else {
            rb.push_back(pos);
            rg.push_back(pos);
            b.push_back(pos);
        }
    }
    sort(rb.begin(), rb.end());
    sort(rg.begin(), rg.end());
    sort(b.begin(), b.end());

    ll ans = 0;
    if(rb.size() > 1) ans += rb.back()-rb.front();
    if(rg.size() > 1) ans += rg.back()-rg.front();

    for(ll i=1; i<b.size(); i++){
        ll l = b[i-1], r = b[i];
        ll x1 = f(rb, l, r), x2 = f(rg, l, r);
        ll sub = x1+x2;

        ans -= max(0LL, sub-(r-l));
    }
    cout << ans;
}

