#include <bits/stdc++.h>
using namespace std;
using ll=long long;
int n, m;
ll k;
ll a[21][21];
map <ll, int> s[21][21];
int lim;
void backtrack(int u, int v, ll mask){
	if(u>n||v>m) return;
	if(u+v==lim){
		s[u][v][mask]++;
	}
	else{
		backtrack(u+1, v, mask^a[u+1][v]);
		backtrack(u, v+1, mask^a[u][v+1]);
	}
}
ll ans=0;
void forwardtrack(int u, int v, ll mask){
	if(u<1||v<1) return;
	if(u+v==lim){
		mask^=a[u][v];
		mask^=k;
		auto res=s[u][v].find(mask);
		if(res!=s[u][v].end()) ans+=res->second;
	}
	else{
		forwardtrack(u-1, v, mask^a[u-1][v]);
		forwardtrack(u, v-1, mask^a[u][v-1]);
	}
}
int main(){
	cin>>n>>m>>k;
	lim=(n+n+2)/2;
	for(int i=1; i<=n; i++) for(int j=1; j<=m; j++)	cin>>a[i][j];
	backtrack(1, 1, a[1][1]);
	forwardtrack(n, m, a[n][m]);
	cout<<ans<<'\n';
}