/*
  ------------------------- Hachiikung ---------------------------------
  ---------------------- Worrachate Bosri ------------------------------
  ------ Faculty of Computer Engineering Chulalongkorn University ------
*/
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<stack>
#include<list>
#include<set>
#include<map>
#include<string>
#include<utility>
using namespace std;
#define REP(i,FN) for(int i=0;i<FN;i++)
#define FOR(i,ST,FN) for(int i=ST;i<=FN;i++)
#define FORD(i,FN,ST) for(int i=FN;i>=ST;i--)
#define FORX(i,c) for(typeof(c.begin())i=c.begin();i!=c.end();i++)
#define pause system("pause")
#define S scanf
#define P printf
#define X first
#define Y second
#define pb push_back
#define PII pair<int,int>
#define mp make_pair
#define sz size()
#define eps 1e-8

const int MOD(1000000007);
const int INF((1<<30)-1);
const int MAXN(10005);

int a[MAXN], b[MAXN], dist[25][25], q[MAXN], d[MAXN], p[MAXN], dp[(1<<20)+5];

vector<int>g[MAXN];

void bfs(int st,int n){

    FOR(i,1,n)
        d[i] = INF;

    int fr = 0, bk = 0;

    q[bk++] = st;
    d[st] = 0;

    while(fr != bk)
    {
        int node = q[fr++];

        if(a[node] == 1)
            dist[p[st]][p[node]] = d[node];

        REP(i,g[node].sz)
        {
            int u = g[node][i];

            if(d[u] == INF)
            {
                q[bk++] = u;
                d[u] = d[node]+1;
            }
        }
    }

}

int main(){

    int n,k,l;
    S("%d%d%d",&n,&k,&l);
    REP(i,k)
    {
        int x;
        S("%d",&x);
        a[x] = 1;
    }
    REP(i,l)
        S("%d",&b[i]);

    FOR(i,0,n)
        a[i] = (a[i] != a[i+1]);

    FOR(i,0,n)
        REP(j,l)
        {
            if(i+b[j] <= n)
            {
                g[i].pb(i+b[j]);
                g[i+b[j]].pb(i);
            }
        }

    int N = 0;

    FOR(i,0,n)
    {
        if(a[i] == 1)
            p[i] = N++;
    }

    REP(i,N)
        REP(j,N)
            dist[i][j] = INF;

    FOR(i,0,n)
    {
        if(a[i] == 1)
            bfs(i,n);
    }

    FOR(i,1,(1<<N)-1)
    {
        dp[i] = INF;

        REP(j,N)
        {
            if(i&(1<<j))
            {
                FOR(m,j+1,N-1)
                {
                    if(i&(1<<m))
                        dp[i] = min(dp[i], dp[i&(~(1<<j))&(~(1<<m))]+dist[j][m]);
                }

                break;
            }
        }
    }

    if(dp[(1<<N)-1] == INF) P("-1");

    else P("%d",dp[(1<<N)-1]);

}
