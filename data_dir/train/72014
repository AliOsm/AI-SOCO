#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <iomanip>
#include <ctime>
#include <queue>
using namespace std;

template <typename T>
T next_int() {  
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if (ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return x * p;
}

const int max_n = (int)1e6 + 227 + 1;
const int max_int = (int)1e9 + 227 + 1;
const int mod = (int)1e9 + 7;

bool check(long long a) {
	int k = 0;
	while(a) {
		k += a % 2;
		a /= 2;
	}

	return (k % 3 == 0);
}

vector<vector<bool> > used;

vector<vector<long long> > merge(vector<vector<long long> > a, vector<vector<long long> > b) {
	int n = b.size();

	vector<vector<long long> > sum(n);
	for(int i = 0; i < n; i++) {
		sum[i].resize(n);

		for(int j = 0; j < n; j++) {
			sum[i][j] = 0;

			for(int k = 0; k < n; k++) {
				if(!used[i][k]) continue;

				sum[i][j] = (sum[i][j] + b[k][j]) % mod;
			}
		}
	}

	vector<vector<long long> > ans(n);
	for(int i = 0; i < n; i++) {
		ans[i].resize(n);
	
		for(int j = 0; j < n; j++) {
			ans[i][j] = 0;

			for(int k = 0; k < n; k++) {
				ans[i][j] = (ans[i][j] + a[i][k] * 1LL * sum[k][j]) % mod;
			}
		}
	}

	return ans;
}

int main() {
//	freopen(".in", "r", stdin);
//	freopen(".out", "w", stdout);

	int n = next_int<int>();
	long long m = next_int<long long>();

	vector<long long> a(n);
	for(int i = 0; i < n; i++) a[i] = next_int<long long>();

	used.resize(n);
	for(int i = 0; i < n; i++) {
		used[i].resize(n);
		for(int j = 0; j < n; j++) {
			used[i][j] = check(a[i] ^ a[j]);
		}
	}

	vector<vector<vector<long long> > > dp(62);

	for(int i = 0; i < 62; i++) {
		dp[i].resize(n);
		for(int j = 0; j < n; j++) {
			dp[i][j].resize(n);

			for(int k = 0; k < n; k++) dp[i][j][k] = 0;
		}
	}

	for(int i = 0; i < n; i++) dp[0][i][i] = 1;

	for(int i = 1; i < 62; i++) {
		dp[i] = merge(dp[i - 1], dp[i - 1]);
	}

	vector<vector<long long> > ans;
	
	long long st = 1;
	for(int i = 0; i < 62; i++) {
		if(st & m) {
			if(ans.size() == 0) {
				ans = dp[i];
			} else {
				ans = merge(ans, dp[i]);
			}
		}

		st *= 2;
	}

	long long write = 0;

	for(int i = 0; i < ans.size(); i++) {
		for(int j = 0; j < ans[i].size(); j++) write = (write + ans[i][j]) % mod;
	} 

	cout << write << "\n";
}
