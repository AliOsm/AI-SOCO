#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define ll long long
#define ld long double
#define all(a) a.begin(),a.end()
#define ios ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define ull unsigned long long
#define int long long
#define iter vector<int>::iterator
using namespace std;
using namespace __gnu_pbds;

template<class T>
using ordered_set=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;

template<class T>
using ordered_multiset=tree<T,null_type,less_equal<T>,rb_tree_tag,tree_order_statistics_node_update>;

mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rnd1(chrono::steady_clock::now().time_since_epoch().count());

//find_by_order
//order_of_key

const int N=2000+7;
const int inf=1e18+5;
const int mod=1e9+7;

int d[N][N];
int n;
string s;

bool check(int pos)
{
    int best=0;
    int best1=0;
    for (int j=pos;j<=n;++j){
        int newbest=best;
        int newbest1=best1;
        if (s[j]=='1'){
            newbest1=max(newbest1,best1+1);
            newbest1=max(newbest1,best+1);
        }
        else {
            newbest=max(newbest,best+1);
        }
        best=newbest;
        best1=newbest1;
        int res=max(best,best1);
        if (d[pos][j]!=res)return false;
    }
    best=0;
    best1=0;
    for (int j=pos;j>=1;--j){
        int newbest=best;
        int newbest1=best1;
        if (s[j]=='1'){
            newbest1=max(newbest1,best1+1);
        }
        else {
            newbest=max(newbest,best1+1);
            newbest=max(newbest,best+1);
        }
        best=newbest;
        best1=newbest1;
        int res=max(best,best1);
        if (d[j][pos]!=res){
            return false;
        }
    }
    return true;
}

main ()
{
    ios;
    cin>>s;
    n=s.size();
    s='#'+s;
    for (int i=1;i<=n;++i){
        int best=0;
        int best1=0;
        for (int j=i;j<=n;++j){
            int newbest=best;
            int newbest1=best1;
            if (s[j]=='1'){
                newbest1=max(newbest1,best1+1);
                newbest1=max(newbest1,best+1);
            }
            else {
                newbest=max(newbest,best+1);
            }
            best=newbest;
            best1=newbest1;
            d[i][j]=max(best1,best);
        }
    }
    for (int i=1;i<=n;++i){
        if (s[i]=='1'){
            s[i]='0';
            if (!check(i)){
                s[i]='1';
            }
        }
    }
    for (int i=1;i<=n;++i)cout<<s[i];
}
