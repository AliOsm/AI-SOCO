#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
ordered_set;	

#define FOR(i,a,b) for(int i = (a); i <= (b); ++i)
#define FORD(i,a,b) for(int i = (a); i >= (b); --i)
#define RI(i,n) FOR(i,1,(n))
#define REP(i,n) FOR(i,0,(n)-1)
#define mini(a,b) a=min(a,b)
#define maxi(a,b) a=max(a,b)
#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define sz(w) (int) w.size()
typedef vector<int> vi;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<pii, int> para;
const ll inf = 1e18 + 7;
const ll maxN = 5e4 + 5;
const ll MOD = 1e9 + 7;

int n, k;
vi graph[maxN];
int par[maxN], dp[maxN][501];

void DFS(int start, int p) {
	par[start] = p;
	for (auto x: graph[start]) {
		if (x != p) {
			DFS(x, start);
		}
	}
}

int main() {
	ios_base::sync_with_stdio(0);
	cin >> n >> k;
	REP(i, n - 1) {
		int a, b;
		cin >> a >> b;
		graph[a].pb(b);
		graph[b].pb(a);
	}
	DFS(1, -1);
	RI(i, n) {
		dp[i][0] = 1;	
		int x = i;
		int cnt = 1;
		while (cnt <= k && par[x] != -1) {
			x = par[x];
			dp[x][cnt]++;
			cnt++;
		}
	}
	ll ans = 0;
	RI(i, n) {
		ll tmp = dp[i][k];
		int cnt = 1;
		int x = i;
		while (cnt <= k && par[x] != -1) {
			tmp += dp[par[x]][k - cnt];
			if (k - cnt != 0) tmp -= dp[x][k - cnt - 1];
			cnt++;
			x = par[x];
		}
		//cout << i << " " << tmp << endl;
		ans += tmp;
	}
	cout << ans / 2;
	return 0;
}
