#include<iostream>
#include<sstream>
#include<vector>
#include<algorithm>
#include<set>
#include<map>
#include<queue>
#include<complex>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cassert>
using namespace std;

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define each(i,c) for(__typeof(c.begin()) i=c.begin();i!=c.end();i++)
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

typedef vector<int> vi;
typedef pair<int,int> pi;
typedef long long ll;
const ll inf = 1e18;

const int MX = 100010;
int n, q;
int v[MX], c[MX];
ll dp[MX];

int main(){
	cin >> n >> q;
	rep(i, n) cin >> v[i];
	rep(i, n) cin >> c[i];
	rep(it, q){
		rep(i, n + 1) dp[i] = -inf;
		
		int col[2] = {0, 0};
		ll mx[2] = {-inf, -inf};
		ll ans = 0;
		ll a, b;
		
		cin >> a >> b;
		
		rep(i, n){
			ll nxt = max(dp[c[i]] + a * v[i], b * v[i]);
			rep(j, 2) nxt = max(nxt, mx[j] + (col[j] == c[i] ? a : b) * v[i]);
			dp[c[i]] = max(dp[c[i]], nxt);
			ans = max(ans, nxt);
			
			int idx = -1;
			rep(j, 2) if(col[j] == c[i]) idx = j;
			if(idx >= 0){
				if(mx[idx] < nxt) mx[idx] = nxt;
			}
			else{
				idx = mx[0] < mx[1] ? 0 : 1;
				if(mx[idx] < nxt) mx[idx] = nxt, col[idx] = c[i];
			}
		}
		cout << ans << endl;
	}
	return 0;
}
