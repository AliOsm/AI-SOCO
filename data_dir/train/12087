#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
#include <random>
#include <cassert>
#include <sstream>
using namespace std;
#define F first
#define S second
#define pb push_back
#define MP make_pair
#define ALL(x) begin(x), end(x)
#define SZ(x) (int)(x).size()
#define rep(i, n) for(int i = 0; i < n; ++i)
#define rep1(i, a, b) for(int i = a; i < b; ++i)
#define per1(i, a, b) for(int i = a; i >= b; --i)
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
#define ln(i, n) " \n"[i == n]
typedef long long LL;
typedef long double LDB;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
//////////////////////
const long double eps = 1e-13;
const long double PI = acos(-1);
const int INF = (int)1e9;
const LL  INFF = (LL)1e18;
const int mod = (int)1e9 + 7;
const int MXN = (int)1e6 + 7;
inline LL add(LL v1, LL v2){
	v1 += v2;
	if (v1 >= mod) v1 -= mod;
	if (v1 < 0) v1 += mod;
	return v1;
}
struct Bit{
	LL num[MXN];
	LL a[MXN];
#define li (i & -i)
	void md(int p, int cnt, int v){
		for (int i = p; i < MXN; i += li) {
			num[i] += cnt;
			a[i] += cnt*1ll*v;
		}
	}
	LL qy(LL sum){
		int p = 0;
		LL v = 0;
		LL res = 0;
		for (int i = 20; i >= 0; i--) {
			int nxt = p^(1<<i);
			if ( nxt >= MXN ) continue;
			if ( v + a[nxt] > sum ) continue;
			p = nxt;
			v += a[p];
			res += num[p];
		}
		if (p + 1 < MXN && num[p+1])
			res += (sum - v) / (p + 1);
		return res;
	}
}bit;
vector<PII>edge[MXN];
int a[MXN], b[MXN];
LL val[MXN];
bool cmp(const PII &u, const PII &v){
	return val[u.F] > val[v.F];
}
void dfs(int u, LL dis){
	bit.md(b[u], a[u], b[u]);
	val[u] = bit.qy(dis);
	for (PII x : edge[u]) {
		if (x.S*2 >= dis) continue;
		dfs(x.F, dis - 2*x.S);
	}
	sort( ALL(edge[u]), cmp );
	if (u == 1 && SZ(edge[u]) >= 1) {
		val[u] = max(val[u], val[edge[u][0].F]);
	} else if(u != 1 && SZ(edge[u]) >= 2) {
		val[u] = max(val[u], val[edge[u][1].F]);
	}
	bit.md(b[u], -a[u], b[u]);
	return ;
}
int main(void){
	int n; LL T; scanf("%d %lld", &n, &T);
	for (int i = 1; i <= n; i++)
		scanf("%d", a + i);
	for (int i = 1; i <= n; i++)
		scanf("%d", b + i);
	for (int i = 2; i <= n; i++) {
		int pa, d; scanf("%d %d", &pa, &d);
		edge[pa].pb( MP(i, d) );
	}
	dfs(1, T);
	printf("%lld\n", val[1]);
	return 0;
}
