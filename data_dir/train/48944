// Separate what you do from who you are, that's what the guilt trap is all about!
#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define mp make_pair
#define ff first
#define ss second

typedef long long int ll;
typedef vector< pair<int, int> > vii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<long long int> vll;
typedef pair<int, int> pii;

const ll INF = 1e18;
const ll inf = 1e9;
const ll MOD = 1e9 + 7;
const ll nax = 1000000 + 10;

ll n, arr[nax], k;
int ones[300005]={0};
int srch(int ind,ll allowed)
{
    int l=1,r=ind;
    while(r-l>1)
    {
        int mid=(l+r)/2;
        if(arr[ind]-arr[mid]>allowed)
            l = mid;
        else
            r = mid;
    }
    if(arr[ind]-arr[l]<=allowed)
        return l;
    else
        return r;
}
int is(ll allowed)
{
    //cout<<allowed<<"\n";
    if(arr[n]-arr[1]<=allowed)
        return true;
    for(int i=0;i<=n;i++)
        ones[i]=0;
    for(int i=1;i<=n;i++)
    {
        ones[i]=ones[i-1];
        int ind = srch(i,allowed);
        //cout<<i<<" "<<ind<<"\n";
        if(ind>i-k+1)
            continue;
        if(ind == 1&&i>=k)
            ones[i]++;
        else if(ones[i-k]-ones[ind-2]>0&&ind>=2)
        {
            ones[i]++;
        }
    }
    //for(int i=1;i<=n;i++)
        //cout<<ones[i]<<" ";
    //cout<<"\n";
    return (ones[n]-ones[n-1]);
}
int main()
{
    ios::sync_with_stdio(0);
    cin >> n >> k;
    for(ll i = 1; i <= n; i++) cin >> arr[i];
    ll r = 1e10, l = 0;
    sort(arr + 1, arr + n + 1);
    //for(int i=1;i<=n;i++)
        //cout<<arr[i]<<" ";
    //cout<<"\n";
    while(r - l > 0)
    {
        ll mid = (r + l) / 2;
        if(is(mid)) r = mid;
        else l = mid + 1;
    }
    if(is(l))
        cout << l;
    else
        cout << r;
    return 0;
}

