#include <bits/stdc++.h>
using namespace std;

int main(){
    int N, M, T;
    cin >> N >> M >> T;
    bitset<1000> A[1000];
    for(int i=0; i<N; i++){
        string S;
        cin >> S;
        for(int j=0; j<M; j++) A[i][j] = (S[j] == '1');
    }
    int dx[] = {-1, 1, 0, 0};
    int dy[] = {0, 0, -1, 1};
    auto inside = [&](int i, int j){ return i>=0 && i<N && j>=0 && j<M; };

    bitset<1000> same[1000];
    for(int i=0; i<N; i++) for(int j=0; j<M; j++) for(int k=0; k<4; k++){
        int x = i+dx[k], y = j+dy[k];
        if(inside(x, y) && A[i][j] == A[x][y]) same[i][j] = 1;
    }
    
    vector<vector<int>> dist(N, vector<int>(M, 1e9));
    queue<pair<int, int>> que;
    for(int i=0; i<N; i++) for(int j=0; j<M; j++) if(same[i][j]) dist[i][j] = 0, que.emplace(i, j);
    while(que.size()){
        auto [i, j] = que.front(); que.pop();
        for(int k=0; k<4; k++){
            int x = i+dx[k], y = j+dy[k];
            if(inside(x, y) && dist[x][y] == 1e9){
                dist[x][y] = dist[i][j] + 1;
                que.emplace(x, y);
            }
        }
    }

    while(T--){
        int i, j;
        int64_t p;
        cin >> i >> j >> p;
        i--; j--;
        int ans = A[i][j];
        if(dist[i][j] < 1e9 && dist[i][j] < p){
            int64_t flip = (p-dist[i][j]);
            ans = (ans+flip)%2;
        }
        printf("%d\n", ans);
    }
    return 0;
}
