#include <bits/stdc++.h>
using namespace std;

#define rep(i,a,n) for (int i = a;i<=n;++i)
#define per(i,a,n) for (int i = n;i>=a;--i)
#define all(x) (x).begin(), (x).end()     
#define SZ(x) ((int)x.size())

typedef vector<int> VI;
typedef long long ll;
typedef pair<int, int> PII;
typedef pair<ll, ll> PLL;
typedef long double ld;

mt19937 mrand(random_device{}());
ll rnd(ll a, ll b) { return a + mrand() % (b - a + 1); }
ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }

const int N = 30000;
const int K = 500;

int aux[N + 1], n, d, ans;
int mx[N + 1][K];
int l[N + 1], r[N + 1];

int main() {
      ios::sync_with_stdio(false); cin.tie(0);
#ifdef arrias
      freopen("a.txt", "r", stdin);
#endif
      cin >> n >> d;
      rep(i, 0, n - 1) {
            int tot;
            cin >> tot;
            aux[tot]++;
      }
      l[d] = r[d] = d;
      fill(l + d + 1, l + N + 1, 2e9);
      fill(r + d + 1, r + N + 1, -2e9);
      rep(i, d, N) {
            rep(v, l[i], r[i]) {
                  if (i + v <= N) {
                        l[i + v] = min(l[i + v], v);
                        r[i + v] = max(r[i + v], v);
                  }
                  if (v - 1 > 0 && i + v - 1 <= N) {
                        l[i + v - 1] = min(l[i + v - 1], v - 1);
                        r[i + v - 1] = max(r[i + v - 1], v - 1);
                  }
                  if (i + v + 1 <= N) {
                        l[i + v + 1] = min(l[i + v + 1], v + 1);
                        r[i + v + 1] = max(r[i + v + 1], v + 1);
                  }
            }
      }
      mx[d][0] = aux[d];
      rep(i, d, N) {
            rep(j, l[i], r[i]) {
                  int curdp = mx[i][j - l[i]];
                  ans = max(ans, curdp);
                  if (i + j <= N) {
                        mx[i + j][j - l[i + j]] = max(mx[i + j][j - l[i + j]], curdp + aux[i + j]);
                  }
                  if (j - 1 > 0 && i + j - 1 <= N) {
                        mx[i + j - 1][j - 1 - l[i + j - 1]] = max(mx[i + j - 1][j - 1 - l[i + j - 1]], curdp + aux[i + j - 1]);
                  }
                  if (i + j + 1 <= N) {
                        mx[i + j + 1][j + 1 - l[i + j + 1]] = max(mx[i + j + 1][j + 1 - l[i + j + 1]], curdp + aux[i + j + 1]);
                  }
            }
      }
      cout << ans << "\n";
      return 0;
}