#include <bits/stdc++.h>
using namespace std;


typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define per(i, start, end) for(int i = (int)start-1; i >= end; --i)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
const double PI = 3.14159265358979323846;
const double eps = (1e-9);

int dcmp(double x, double y)
{ return fabs(x - y) <= eps ? 0 : x < y ? -1 : 1; }

ll f[20];
ll ans;
ll ways(ll freq[])
{
    ll length = 0;
    rep(i, 0, 10)
    {
        length += freq[i];
    }
    bool zero = false;
    if (freq[0] > 0)
        zero = true;
    ll ret = f[length];
    rep(i, 0, 10)
    {
        ret = ret / f[freq[i]];
    }
    ll minus = 0;
    if (zero)
    {
        minus = f[length-1];
        rep(i, 0, 10)
        {
            if (i == 0)
                minus = minus / f[freq[i] - 1];
            else
                minus = minus / f[freq[i]];
        }
    }
    return ret - minus;
}
//ll solve2(int i, ll freq[]) {
//    if (i == 10)
//        return ways(freq);
//
//    ll ret = 0LL;
//
//    if (freq[i] > 1)
//    {
//        ll new_freq[10];
//        rep(j, 0, 10)
//            new_freq[j] = freq[j];
//        new_freq[i]--;
//        ret += solve2(i, new_freq);
//    }
//
//    ret += solve2(i + 1, freq);
//
//    return ret;
//}
set<string> dist;
void solve(ll freq[])
{
    ans = ans + ways(freq);
    rep(i, 0, 10)
    {
        if (freq[i] > 1)
        {
            ll new_freq[10];
            rep(j, 0, 10)
            {
                if (j == i)
                    new_freq[j] = freq[j] - 1;
                else
                    new_freq[j] = freq[j];
            }
            string s;
            rep(j, 0, 10)
            {
                rep(k, 0, new_freq[j])
                {
                    s += (char) (j + '0');
                }
            }
            if (dist.find(s) == dist.end())
            {
//                cout << s << endl;
                dist.insert(s);
                solve(new_freq);
            }
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(false);
//    freopen("input.txt", "r", stdin);
    f[0] = 1;
    ll freq[10] = {0};
    string s;
    cin >> s;
    rep(i,1,20)
    {
        f[i] = f[i-1] * i;
    }
    rep(i, 0, sz(s))
    {
        freq[s[i] - '0']++;
    }
//    cout << ways(freq) << endl;
    solve(freq);
    cout << ans << endl;
    return 0;
}