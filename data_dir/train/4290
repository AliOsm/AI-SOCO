#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#include <queue>
#include <string>
#include <cstring>
#include <stack>
#include <stdio.h>
// DON'T DIVIDE
// Greedy, Prefix, Sets/Bsearch, Dfs/bfs, DP
// Stack, Bitmask, Dsu 
using namespace std;

int n, q;
const int MAXN = 200005;
int a[MAXN], last[MAXN], pos[MAXN];
set<int> l;

int main()
{
	ios::sync_with_stdio(0);
	cin >> n >> q;

	for(int i = 0; i < n; i++)
		cin >> a[i];

	bool done = true;
	for(int i = 0; i < n; i++)
	{
		if(a[i] != 0)
			done = false;
	}

	if(done)
	{
		cout << "YES\n";
		for(int i = 0; i < n; i++)
			cout << q << " ";
		cout << "\n";
		return 0;
	}

	for(int i = 0; i < n; i++)
		last[a[i]] = i;
	for(int i = 1; i <= q; i++)
		pos[i] = -1;

	int idx = -1;
	for(int i = 0; i < n; i++)
	{
		pos[a[i]] = i;
		if(last[a[i]] != i)
			l.insert(a[i]);	
		else if(l.find(a[i]) != l.end())
			l.erase(a[i]);

		if(a[i] != 0)
		{
			if(!l.empty() && a[i] < *(l.rbegin()))
			{
				cout << "NO\n";
				return 0;
			}
		}
		else if(i != 0 && a[i - 1] != 0)
		{
			a[i] = a[i - 1];
			idx = i;
		}
		else
		{
			a[i] = a[i + 1];
			if(a[i] != 0)
			{
				int l = i - 1;
				while(l >= 0 && a[l] == 0)
				{
					a[l] = a[l + 1];
					l--;
				}
			}
			idx = i;
		}
	}

	if(pos[q] == -1)
	{
		if(idx == -1)
		{
			cout << "NO\n";
			return 0;
		}
		else
			a[idx] = q;
	}


	cout << "YES\n";
	for(int i = 0; i < n; i++)
		cout << a[i] << " ";
	cout << "\n";

	return 0;
}
