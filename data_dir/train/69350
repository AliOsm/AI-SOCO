#include<bits/stdc++.h>
#define xx first
#define yy second
using namespace std;
typedef long long ll;
const int MAXN=5005;
const int INF=0x3f3f3f3f;
int n,m,w;
struct qnode
{
	int v;
	int c;
	qnode(int _v=0,int _c=0):v(_v),c(_c){}
	bool operator <(const qnode &r)const
	{
		return c>r.c;
	}
};
struct shop
{
	int c,k,p;
	shop(){}
	shop(int _c,int _k,int _p):c(_c),k(_k),p(_p){}
	bool operator < (const shop &a)const
	{
		if(p==a.p)
			return k<a.k;
		return p<a.p;
	}
}sv[MAXN];
struct Edge
{
	int v,cost;
	Edge(int _v=0,int _cost=0):v(_v),cost(_cost){}
};
vector<Edge>E[MAXN];
bool vis[MAXN];
int dist[MAXN];
int dis[MAXN];
void Dijkstra(int start)//点的编号从1开始 
{
	memset(vis,false,sizeof(vis));
	for(int i=1;i<=n;i++)dist[i]=INF;
	priority_queue<qnode>que;
	while(!que.empty())que.pop();
	dist[start]=0;
	que.push(qnode(start,0));
	qnode tmp;
	while(!que.empty())
	{
		tmp=que.top();
		que.pop();
		int u=tmp.v;
		if(vis[u])continue;
		vis[u]=true;
		for(int i=0;i<E[u].size();i++)
		{
			int v=E[tmp.v][i].v;
			int cost=E[u][i].cost;
			if(!vis[v]&&dist[v]>dist[u]+cost)
			{
				dist[v]=dist[u]+cost;
				que.push(qnode(v,dist[v]));
			}
		}
	}
	for(int i=1;i<=w;i++)
	{
		int at=sv[i].c;
		dis[i]=dist[at];
	}
}
void addedge(int u,int v,int w)
{
	E[u].push_back(Edge(v,w));
}
bool judge(int m,int tot,int co)
{
	ll sz=0,cost=0;
	for(int i=1;i<=w&&tot>sz&&cost<=co;i++)
	{
		if(dis[i]<=m)
		{
			int num=min((ll)sv[i].k,tot-sz);
			sz+=num;
			cost+=(ll)(sv[i].p)*(ll)(num);
		}
	}
	return tot<=sz&&cost<=co;
}
void solve()
{
	int g,r,a;
	scanf("%d%d%d",&g,&r,&a);
	Dijkstra(g);
	int L=0,R=5000;
	int ans=2e9;
	while(L<=R)
	{
		int m=(L+R)>>1;
		//int m=2;
		if(judge(m,r,a))
		{
			ans=min(ans,m);
			R=m-1;
		}
		else
		{
			L=m+1;
		}
	}
	printf("%d\n",ans==2e9?-1:ans);
}
int main()
{
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	scanf("%d%d",&n,&m);
	for(int i=1;i<=m;i++)
	{
		int u,v;
		scanf("%d%d",&u,&v);
		addedge(u,v,1);
		addedge(v,u,1);
	}
	scanf("%d",&w);
	for(int i=1;i<=w;i++)
	{
		int c,k,p;
		scanf("%d%d%d",&c,&k,&p);
		sv[i]=shop(c,k,p);
	}
	sort(sv+1,sv+1+w);
	int q;
	scanf("%d",&q);
	while(q--)
	{
		solve();
	}
	return 0;
}
