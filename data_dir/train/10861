/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HARSHAD
 */

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ld PI = 3.14159265358979323846;

#define f(i,n) for(int i=0;i<n;i++)
#define rep(i,a,b) for(int i=a;i<=b;i++)

template <typename T> using ordered_set =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

class CIlyaAndMatrix {
public:
	void solve(std::istream& in, std::ostream& out) {
		int n; in>>n;
	    ll arr[n+1];
		arr[0] = 0;
	    f(i,n) in>>arr[i+1];
		sort(arr+1, arr+1+n);
		reverse(arr+1, arr+1+n);
		rep(i, 1, n) arr[i] += arr[i-1];
		ll res = 0;
		for(int i = 1; i<=n; i*=4){
			res += arr[i];
		}
		out<<res;

	}
};


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	CIlyaAndMatrix solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
