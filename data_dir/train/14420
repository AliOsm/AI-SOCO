#include <cstdio>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cctype>
#include <cassert>
#include <ciso646>
#include <climits>
#include <cmath>


#include <algorithm>
#include <utility>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <map>
#include <queue>
#include <stack>
#include <set>
#include <deque>
 
typedef std::pair< int, int > pii;
typedef std::vector< int > vi;
typedef std::vector< pii > vii ;

const int N = 1 << 18;
const int M  = 1 << 18;

int n,m;
std::set< int > g[ N ] ;
vi pg[N];
int   lbl[N] ;
 


void myassert(bool b){
    if (!b)printf("%d\n", 1/b);
}

int main(int argc, char * argv[] ) 
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#endif //end online-judge    
  
    scanf("%d%d", &n, &m ) ;
    
    //  1-->2  --- 4
    //  1-->3  --- 4
    //  1  2 3 4
    
    for(int i = 1; i <= m; ++i)
    {
        int u,v;
        scanf("%d%d", &u, &v);
        g[ u ].insert( v ) ;
        pg[v].push_back(u);
       // prev_cnt[ v ] ++ ;
    }
    
    std::set< int, std::greater<int> > ss;
    for(int i= 1 ; i <= n; ++i)
    {
        if (  g[i].empty()    ) {
            ss.insert( i ) ;
        }
    }
     
    int cur_label = n;
    
    while( ! ss.empty() ) 
    {
        int u = *ss.begin() ;
        
        lbl[ u ] =  cur_label-- ;
    
        ss.erase( ss.begin() ) ;
        
        for(int p : pg[u] ) 
        {
            g[p].erase(u);
            if (g[p].empty() ){
                ss.insert(p);
            }
        }
        
    }
    
    myassert( cur_label == 0 ) ;
    vi visit(1+n);
    for(int i = 1; i <=n; ++i)
    {
        myassert(lbl[i] != 0 );
        visit[lbl[i]] = 1;
    }
    
    for(int i = 1; i <= n; ++i)myassert(visit[i] == 1 ) ;
    
    for(int i = 1; i <= n; ++i)printf("%d ", lbl[ i ] );
    
    return 0;
}