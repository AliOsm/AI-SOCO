/*input
3 3
GWW
WWW
WWG
*/
#include <iostream>
#include <cstdio>
#include <vector>
#include <functional>
#include <math.h>
#include <string.h>
#include <utility>
#include <algorithm>
#include <iomanip>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <stdlib.h>
#include <list>
#include <assert.h>
#include <time.h>
#include <fstream>
using namespace std;
#define sp ' '
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
#define ll long long
#define N 100005
template<class T>
void maximize(T &x, T y) {
	if (x < y) x = y;
}
template<class T>
void minimize(T &x, T y) {
	if (x > y) x = y;
}
#define write(...) cout << __VA_ARGS__
template<typename t> ostream& operator, (ostream& os, const t& x) {
	return os << ' ' << x;
}
#define left 0
#define right 1
char a[155][155];
int n, m;
int ans = 0;
int endx;
bool dfs(int x, int y, int dir) {
	bool flag = false;
	endx = -1;
	if (dir == right)
		for (int i = y; i <= m; i++) {
			if (a[x][i] == 'W') endx = i;
		}
	else
		for (int i = y; i >= 1; i--) {
			if (a[x][i] == 'W') endx = i;
		}
	if (endx == -1) {
		if (x == n) return false;
		if (dir == right)
			for (int i = y; i <= m; i++) {
				if (a[x + 1][i] == 'W') endx = i;
			}
		else
			for (int i = y; i >= 1; i--) {
				if (a[x + 1][i] == 'W') endx = i;
			}
		if (endx == -1) {
			maximize(flag, dfs(x + 1, y, 1 - dir));
			ans += flag;
			return flag;
		}
		ans += abs(y - endx);
		ans += dfs(x + 1, endx, 1 - dir);
		return true;
	}
	else {
		flag = true;
		ans += abs(y - endx);
		y = endx;
		if (x == n) return true;
		if (dir == right)
			for (int i = y; i <= m; i++) {
				if (a[x + 1][i] == 'W') endx = i;
			}
		else
			for (int i = y; i >= 1; i--) {
				if (a[x + 1][i] == 'W') endx = i;
			}
		if (endx == -1) {
			maximize(flag, dfs(x + 1, y, 1 - dir));
			ans += flag;
			return flag;
		}
		ans += abs(y - endx);
		ans += dfs(x + 1, endx, 1 - dir);
		return true;
	}
}
int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			cin >> a[i][j];
			if (a[i][j] == 'G') a[i][j] = '.';
		}
	}
	dfs(1, 1, right);
	cout << ans << endl;
}