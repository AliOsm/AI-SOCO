#include <bits/stdc++.h>
#include <ctime>

using namespace std;

#define ALL(x) x.begin(), x.end()
#define bits(x) __builtin_popcount(x)
#define bitsll(x) __builtin_popcountll(x)
#define precision(a) fixed << setprecision(a)

typedef long long ll;
typedef long double ld;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef vector <int> vi;

template <class T>
inline T sqr (T x) {
	return x * x;
}

template <class T>
inline bool isSquare (T x) {
	T y = sqrt(x + 0.5);
	return (y * y) == x;
}

template <class T1, class T2>
inline T1 gcd (T1 a, T2 b) {
	return b ? gcd(b, a % b) : a;
}

template <class T1, class T2>
inline T1 eqMin (T1 & x, const T2 & y) {
	if (T1(y) < x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 eqMax (T1 & x, const T2 & y) {
	if (T1(y) > x)
		return x = y;
	return x;
}

template <class T1, class T2>
inline T1 min (const T1 & x, const T2 & y) {
	return x < (T1) y ? x : (T1) y;
}

template <class T1, class T2>
inline T1 max (T1 & x, const T2 & y) {
	return x > (T1) y ? x : (T1) y;
}

template <typename T>
inline T getint () {
	T x = 0, p = 1;
	char ch;
	do {
		ch = getchar();
	} while (ch <= ' ');
	if (ch == '-')
		p = -1, ch = getchar();
	while (ch >= '0' && ch <= '9')
		x = x * 10 + ch - '0', ch = getchar();
	return x * p;
}

struct _flag_t {
	string val;
};
const _flag_t _1d{", "}, _2d{"\n  "};
_flag_t _flag_d = _1d;
_flag_t _flag = _1d;

ostream & operator<< (ostream & os, _flag_t flag) {
	_flag = flag;
	return os;
}

template <class Os, class It>
Os & _out (Os & os, It f, It l) {
	if (f == l) return os << "{}";
	_flag_t cur_flag = _flag;
	os << _flag_d << "{ " << *f++;
	for (; f != l; os << cur_flag.val << *f++);
	return os << " }";
}

template <class Os, class T>
auto operator<< (Os & os, const T & v) -> decltype(begin(v), end(v), os) {return _out(os, begin(v), end(v));}

template <class Os, class T, size_t N>
auto operator<< (Os & os, const array <T, N> & v) -> decltype(begin(v), end(v), os) {return _out(os, begin(v), end(v));}

template <size_t I = 0, bool B = false, class Os, class T>
auto _out_tuple (Os & os, const T & tup) -> typename enable_if <(I == 0), Os &>::type {
	return os << get <I>(tup) << (B ? ", " : "");
}

template <size_t I = 0, bool B = false, class Os, class T>
auto _out_tuple (Os & os, const T & tup) -> typename enable_if <(I > 0), Os &>::type {
	return _out_tuple <I - 1, true>(os, tup) << get <I>(tup) << (B ? ", " : "");
}

template <class Os, class T>
auto operator<< (Os & os, const T & tup) -> decltype(get <tuple_size <T>::value - 1>(tup), os) {
	return os << "[", _out_tuple <tuple_size <T>::value - 1>(os, tup) << "]";
}

const double PI = acos(-1);
const double EPS = 1e-8;
const int INF = (int) 2e9;
const int MOD = (int) 1e9 + 7;
const int MAXN = (int) 1e5 + 10;

int n;
ll ans;

int main () {
	ios_base::sync_with_stdio(false);
	cin >> n;
	for (int i = 2; i <= n; i++) {
		int cnt = n / i - 1;
		ans += (ll) cnt * (cnt + 1) / 2 + cnt;
	}

	cout << ans * 4;
}