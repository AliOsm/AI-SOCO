#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <tuple>
#include <numeric>
#define INF 1000000000
#define ll long long
using namespace std;


int fwd[5555];
int bck[5555];
int C[5555];



/*
int Solve(int st, int en, int n) {
    
    if (en-st+1==n)
        return 0;
    
    int ans = INF;
    
    if (st > 1) {
        int nc = C[st-1];
        // bck[st-1]
        ans = min(ans, 1+Solve(bck[st-1],C[st-1]==C[en+1]?fwd[en+1]:en),n);
    }
    
    if (en < n) {
        ans = min(ans, 1+Solve(C[st-1]==C[en+1]?bck[st-1]:st,fwd[en+1]),n);
    }
    return ans;
    
    
}
*/

int dp[5555][5555];

int Solve(int n) {
    C[0]=C[n+1]=0;
    for(int i=1;i<=n;i++) {
        if (C[i]==C[i-1]) {
            bck[i]=bck[i-1];
        } else {
            bck[i]=i;
        }
    }
    
    for(int i=n;i>=1;i--) {
        if (C[i]==C[i+1]) {
            fwd[i]=fwd[i+1];
        } else {
            fwd[i]=i;
        }
    }
    
    
    
    
    for(int d=n;d>=1;d--) {
        for(int st=1;st+d-1<=n;st++) {
            int en = st+d-1;
            
            if (en-st+1 == n) {
                dp[st][en]=0;
                continue;
            }
            
            int ans = INF;
            
            if (st > 1) {
                int nc = C[st-1];
                // bck[st-1]
                ans = min(ans, 1+dp[bck[st-1]][C[st-1]==C[en+1]?fwd[en+1]:en]);
            }
            
            if (en < n) {
                ans = min(ans, 1+dp[C[st-1]==C[en+1]?bck[st-1]:st][fwd[en+1]]);
            }
            dp[st][en]=ans;
        }
    }
    
    int ans = INF;
    for(int i=1;i<=n;i++) {
        ans = min(ans, dp[bck[i]][fwd[i]]);
    }
    return ans;
    
}


int main() {
    int n;
    cin>>n;
    for(int i=1;i<=n;i++)
        cin>>C[i];
    

    cout << Solve(n) << endl;
    
    
    
    
}
