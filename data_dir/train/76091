#include <stdio.h>
#include <vector>
#include <algorithm>
#define pb push_back
using namespace std;

struct prob {
    int a;
    int t;
    int idx;

    prob() {}
    prob(int a, int t, int idx):a(a), t(t), idx(idx) {}
};

vector <prob> v;
vector <int> best_res;

bool operator <(const prob &x, const prob &y) {
    return x.t < y.t || (x.t == y.t && x.idx < y.idx);
}

int main(void) {
    int n, T;
    int a, t;

    scanf(" %d %d", &n, &T);
    for (int i = 1; i <= n; i++) {
        scanf(" %d %d", &a, &t);
        v.pb(prob(a, t, i));
    }

    sort(v.begin(), v.end());
    int low = 0;
    int high = n;
    int best = 0;
    vector <int> best_idx;
    while(low <= high) {
        int mid = (low + high) / 2;
        int timer = 0;
        int got = 0;
        vector <int> aux;

        for (int i = 0; i < (int)v.size() && got < mid; i++) {
            //printf("i = %d, v[i].a = %d, v[i].t = %d. v[i].idx = %d\n", i, v[i].a, v[i].t, v[i].idx);
            if (mid <= v[i].a) {
                got++;
                timer += v[i].t;
                aux.pb(v[i].idx);
            }
            //printf("i = %d, got = %d, timer = %d\n", i, got, timer);
        }

        //printf("mid = %d, got = %d, timer = %d\n", mid, got, timer);
        if (got == mid && timer <= T) {
            best = mid;
            low = mid + 1;
            best_idx = aux;
        } else {
            high = mid - 1;
        }
    }

    printf("%d\n", best);
    printf("%d\n", (int)best_idx.size());
    for (int i = 0; i < (int)best_idx.size(); i++) {
        if (i != 0) {
            printf(" ");
        }
        printf("%d", best_idx[i]);
    }
    printf("\n");
    return 0;
}


