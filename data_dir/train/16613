#include <ext/rope>
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

template<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define ll long long
#define ull unsigned long long
typedef vector<vector<ll>> mat;

const int N = 1e5 + 5;
ll x , y , z , n , out , lucky , sz[N];
vector<vector<pair<int , int> > > v(N);

bool isLucky(int x)
{
    while(x)
    {
        if(x % 10 != 4 && x % 10 != 7)
            return 0;
        x /= 10;
    }
    return 1;
}

void dfs(int u , int p)
{
    sz[u] = 1;
    for(auto i : v[u])
    {
        if(i.first == p) continue;
        dfs(i.first , u);
        sz[u] += sz[i.first];
    }
}

int main()
{
    ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0);

    cin >> n;
    for(int i = 0 ; i < n  - 1 ; i++)
    {
        cin >> x >> y >> z;
        if(!isLucky(z))
        {
            v[x].push_back({y , z});
            v[y].push_back({x , z});
        }
    }


    out = n * (n - 1) * (n - 2);
    for(int i = 1 ; i <= n ; i++)
    {
        if(sz[i]) continue;
        dfs(i , -1);

        out -= sz[i] * (sz[i] - 1) * (sz[i] - 2);
        out -= sz[i] * (sz[i] - 1) * (n - sz[i]) * 2;
    }

    cout << out;

    return 0;
}
