#include <bits/stdc++.h>
using namespace std;

struct data
{
    string a,b;
    int id;
};

data s[2005];
int n,Count=0,rs[2005],Free[2005];
string rs1[2005],TMP[2005];
vector<int> g[2005];
map<string,int> m;

bool cmp(data x1,data x2)
{
    return x1.a<x2.a;
}

bool DFS(int u,int kk)
{
    if(Free[u]==kk)
        return false;
    Free[u]=kk;
    for(int i=0;i<g[u].size();i++)
        if(rs[g[u][i]]==0||DFS(rs[g[u][i]],kk)==true)
        {
            rs[g[u][i]]=u;
            return true;
        }
    return false;
}

int main()
{
    //freopen("782D.INP","r",stdin);
    cin>>n;
    string s1,s2;
    for(int i=1;i<=n;i++)
    {
        cin>>s1>>s2;
        s[i].a+=s1[0];
        s[i].a+=s1[1];
        s[i].a+=s1[2];
        s[i].b+=s1[0];
        s[i].b+=s1[1];
        s[i].b+=s2[0];
        s[i].id=i;
        if(m[s[i].a]==0)
        {
            m[s[i].a]=++Count;
            TMP[Count]=s[i].a;
        }
        if(m[s[i].b]==0)
        {
            m[s[i].b]=++Count;
            TMP[Count]=s[i].b;
        }
    }
    sort(s+1,s+n+1,cmp);
    int tmp=1;
    for(int i=2;i<=n;i++)
        if(s[i].a!=s[i-1].a)
        {
            if(tmp==i-1)
                g[s[tmp].id].push_back(m[s[tmp].a]);
            for(int j=tmp;j<i;j++)
                g[s[j].id].push_back(m[s[j].b]);
            tmp=i;
        }
    if(tmp==n)
        g[s[tmp].id].push_back(m[s[tmp].a]);
    for(int i=tmp;i<=n;i++)
        g[s[i].id].push_back(m[s[i].b]);
    int C=0;
    for(int i=1;i<=n;i++)
        DFS(i,++C);
    for(int i=1;i<=Count;i++)
        if(rs[i]>0)
            rs1[rs[i]]=TMP[i];
    for(int i=1;i<=n;i++)
        if(rs1[i]=="")
        {
            cout<<"NO";
            return 0;
        }
    cout<<"YES\n";
    for(int i=1;i<=n;i++)
        cout<<rs1[i]<<"\n";
}
