#include <bits/stdc++.h>
#include <stdio.h>
#include <string.h>
using namespace std;
const int N=2e5 + 10;
int n,m;
vector<int>graph[N];
bool used[N];
set<pair<int, int> > ans;

int min(long long a, long long b)
{
	if (a<b) return a;
	else
	return b;
}
int max(long long a, long long b)
{
	if (a<b) return b;
	else
	return a;
}


int main()
{
	ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	
	cin>>n>>m;
	
	for (int i=1; i<=m; i++)
	{
		int from, to;
		cin>>from>>to;
		graph[from].push_back(to);
		graph[to].push_back(from); 
	}	
	int max_cnt=0, start=0;
	
	for (int i=1; i<=n; i++)
	 	if (graph[i].size()> max_cnt) 
	 	{
	 		max_cnt=graph[i].size();
	 		start=i;
		 }
	queue<int> q;
	q.push(start);
	
	used[start] = true;
	while (!q.empty())
	{
		int cur=q.front();
		q.pop();
		for (int i=0; i<graph[cur].size(); i++)
		{
			int child = graph[cur][i];
			if (used[child]==false)
			{
				q.push(child);
				used[child]=true;
				ans.insert({min(cur,child),max(cur,child)});
				
			}
		}
	}
	
	for (auto it: ans) cout<<it.first<<" "<<it.second<<endl;
}


