#include <vector>
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <algorithm>
#include <queue>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

char mp[1001][1001];
int dst[4][1001][1001];
int dx[4]={0,0,-1,1};
int dy[4]={-1,1,0,0};

struct state
{
	int x,y,d;
	int dist;
	state(int x=0,int y=0,int d=0, int dist=0): x(x),y(y),d(d),dist(dist){}
};

deque<state> q;
int n,m;

void pushfront(int x,int y,int d,int dist)
{
	if(0<=x&&x<n&&0<=y&&y<m&&dst[d][x][y]>dist)
	{
		dst[d][x][y]=dist;
		q.push_front(state(x,y,d,dist));
	}
}

void pushback(int x,int y,int d,int dist)
{
	if(0<=x&&x<n&&0<=y&&y<m&&dst[d][x][y]>dist)
	{
		dst[d][x][y]=dist;
		q.push_back(state(x,y,d,dist));
	}
}

int main()
{

	scanf("%d%d",&n,&m);
	REP(i,n)
		scanf("%s",mp[i]);
	memset(dst,0x7F,sizeof(dst));
	int inf=dst[0][0][0];
	pushback(n-1,m-1,0,0);
	while(!q.empty())
	{
		state cur=q.front();
		q.pop_front();
		if(cur.dist>dst[cur.d][cur.x][cur.y])
			continue;
		pushfront(cur.x+dx[cur.d],cur.y+dy[cur.d],cur.d,cur.dist);
		if(mp[cur.x][cur.y]=='#')
		{
			REP(i,4)
					pushback(cur.x,cur.y,i,cur.dist+1);
		}
	}

	printf("%d\n",dst[0][0][0]!=inf?dst[0][0][0]:-1);
	return 0;
}
