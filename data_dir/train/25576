#include <bits/stdc++.h>
#include <omp.h>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;


#define int ll
#define rand shittttty_shit
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rng_64(chrono::steady_clock::now().time_since_epoch().count());


typedef pair<int, int> pii;
typedef pair<string, string> pst;
typedef pair<pii, pii> piii;
typedef vector<piii> vpii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector< vi > vvi;
typedef vector< vvi > vvvi;
typedef vector<pii> vpi;
typedef vector<short> vs;
typedef vector<vs> vvs;
typedef vector<vvs> vvvs;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<vvl> vvvl;
typedef vector<ld> vld;
typedef vector<vld> vvld;
typedef vector<vvld> vvvld;
typedef vector<string> vst;
typedef vector<vst> vvst;
typedef pair<ld, ld> pld;
typedef pair<pld, pld> pldd;
typedef vector<pld> vpd;
typedef complex<double> base;


#define inmin(a, b) a = min(a, (b))
#define inmax(a, b) a = max(a, (b))
#define my_abs(a) (((a) >= 0) ? (a) : -(a))
#define mp(a, b) make_pair(a, (b))
#define ALL(a) a.begin(),a.end()
#define RALL(a) a.rbegin(),a.rend()
#define sqr(x) ((x) * (x))
#define fori(i, n) for(int i = 0; i < int(n); ++i)
#define SZ(a) ((int)((a).size()))
#define MODIK(a) (a >= M ? a - M : a)
#define triple(T) tuple<T, T, T>
#define quad(T) tuple<T, T, T, T>
#define watch(x) cout << (#x) << " = " << x << endl;
#ifdef ART_HOME
#define cerr cout
#else
#define cerr if (false) cerr
#endif


const double PI = 2 * acos(0.0);

const string DIGITS = "0123456789";
const string ALPH = "abcdefghijklmnopqrstuvwxyz";

istream &operator >> (istream &in, pii &a)
{
    in >> a.first >> a.second;
    return in;
}


ostream &operator << (ostream &out, pii &a)
{
    out << a.first << ' ' << a.second;
    return out;
}


istream &operator >> (istream &in, pld &a)
{
    in >> a.first >> a.second;
    return in;
}


ostream &operator << (ostream &out, pld &a)
{
    out << a.first << ' ' << a.second;
    return out;
}


template <class T0, class T1>
inline ostream & operator << (ostream &out, pair<T0, T1> &a) {
    return out << "{" << a.first << ", " << a.second << "}";
}

template <class T0, class T1, class T2>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) << ", " << get<2>(a) << "}";
}

template <class T0, class T1, class T2, class T3>
inline ostream & operator << (ostream &out, tuple<T0, T1, T2, T3> &a) {
    return out << "{" << get<0>(a) << ", " << get<1>(a) <<
               ", " << get<2>(a) << ", " <<  get<3>(a) << "}";
}

template<class T>
inline ostream & operator << (ostream &out, vector<T> &a) {
    out << "[";
    fori (i, a.size())
        out << a[i] << vector<string>{", ", "]  "}[i + 1 == a.size()];
    return out;
}


void print(int a, int b, int n, vi h)
{
    ofstream cout("output.txt");
    cout << SZ(h) << ' ' << a << ' ' << b << '\n';
    for (int i = 0; i < SZ(h); ++i) {
        cout << h[i]  << ' ';
    }
    cout.close();
    exit(0);
}


inline bool break_time(ld time)
{
    return clock() > CLOCKS_PER_SEC * time;
}


ld get_rand_ld(ld l, ld r)
{
    uniform_real_distribution<double> gen(l, r);
    return gen(rng);
}


bool may(int E, ld T)
{
    if (E < 0)
        return 1;

    double eps = get_rand_ld(0, 1);
    return eps < exp(-E / T);
}


void smain();

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

#ifdef ART_HOME
    freopen("input.txt", "r", stdin);
    clock_t start = clock();
#endif
    cout << setprecision(2) << fixed;
    smain();
#ifdef ART_HOME
    cout << "\nTOTAL EXECUTION TIME: " << float( clock () - start ) /  CLOCKS_PER_SEC << endl;
#endif
}


const int N = 1e6 + 10, B = 400, oo = 1e18 + 100, M = 998244353;

int x1, M1, x2, M2;
int pw[2][N];


int MOD(int v, int M)
{
    v %= M;
    if (v < 0)
        v += M;

    return v;
}


int get_substr(const vi &h, int l, int r, int M, int label)
{
    if (!l)
        return h[r];
    else
        return MOD(h[r] - h[l - 1] * pw[label][r - l + 1], M);
}


bool poly(int l, int r, const vi &h1, const vi &hr1, const vi &h2, const vi &hr2)
{
    int n = SZ(h1);
    return get_substr(h1, l, r, M1, 0) == get_substr(hr1, n - r - 1, n - l - 1, M1, 0)
    && get_substr(h2, l, r, M2, 1) == get_substr(hr2, n - r - 1, n - l - 1, M2, 1);
}


pii count(string s)
{
    int n = SZ(s);
    vi h1(n), h2(n), hr1(n), hr2(n);
    h1[0] = h2[0] = s[0];

    for (int i = 1; i < n; ++i)
        h1[i] = MOD(h1[i - 1] * x1 + s[i], M1),
        h2[i] = MOD(h2[i - 1] * x2 + s[i], M2);

    reverse(ALL(s));
    hr1[0] = hr2[0] = s[0];

    for (int i = 1; i < n; ++i)
        hr1[i] = MOD(hr1[i - 1] * x1 + s[i], M1),
                hr2[i] = MOD(hr2[i - 1] * x2 + s[i], M2);

    reverse(ALL(s));
    for (int i = n; i >= 1; --i)
    {
        if (poly(0, i - 1, h1, hr1, h2, hr2))
            return mp(0, i);
        else if (poly(n - i, n - 1, h1, hr1, h2, hr2))
            return mp(1, i);
    }
}


string solution(string s)
{
    int l = 0;
    int n = SZ(s);

    while (2 * (l + 1) <= SZ(s) && s[l] == s[n - l - 1])
        l++;

    if (2 * l == SZ(s))
        return s;

    string f = s.substr(l, n - 2 * l);
    pii p = count(f);
    string ans;

    if (!p.first)
    {
        ans += s.substr(0, l + p.second);
        string c = s.substr(0, l);
        reverse(ALL(c));
        ans += c;
    }
    else
    {
        ans += s.substr(0, l);
        ans += s.substr(n - l - p.second);
    }

    return ans;
}


bool prime(int v)
{
    for (int d = 2; d * d <= v; ++d)
        if (v % d == 0)
            return 0;

    return 1;
}


void smain() {
    int t;
    cin >> t;


    x1 = rng() % 1000 + 200;
    while (!prime(x1))
        x1++;

    x2 = x1 + rng() % 100 + 1;
    while (!prime(x2))
        x2++;

    M1 = rng() % M + M;
    while (!prime(M1))
        M1++;

    M2 = M1 + rng() % 100 + 1;
    while (!prime(M2))
        M2++;

    pw[0][0] = pw[1][0] = 1;
    for (int i = 1; i < N; ++i)
    {
        pw[0][i] = MOD(pw[0][i - 1] * x1, M1);
        pw[1][i] = MOD(pw[1][i - 1] * x2, M2);
    }

    while(t--)
    {
        string s;
        cin >> s;
        cout << solution(s) << '\n';
    }
}
