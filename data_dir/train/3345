#include <iostream>
#include <cstdio>
#include <cmath>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <ctime>
#include <memory.h>
#include <assert.h>
#include <complex>
#include <ctime>  
#include <cstdlib>
using namespace std;

#pragma comment(linker, "/STACK:100000000")

#define mp make_pair
#define pb push_back
#define sz(x) (int)(x).size()
#define ll long long
#define ull unsigned long long

ll matrix[2][2];
ll res[2][2];
ll tmp[2][2];

void binpow(ll b, ll m) {
	while(b) {
		if(b & 1LL) {
			// умножить res на matrix
			tmp[0][0] = res[0][0] * matrix[0][0] + res[0][1] * matrix[1][0];
			tmp[0][1] = res[0][0] * matrix[0][1] + res[0][1] * matrix[1][1];

			tmp[1][0] = res[1][0] * matrix[0][0] + res[1][1] * matrix[1][0];
			tmp[1][1] = res[1][0] * matrix[0][1] + res[1][1] * matrix[1][1];
			
			tmp[0][0] %= m;
			tmp[1][0] %= m;
			tmp[0][1] %= m;
			tmp[1][1] %= m;
			res[0][0] = tmp[0][0];
			res[1][0] = tmp[1][0];
			res[0][1] = tmp[0][1];
			res[1][1] = tmp[1][1];
		}
		b >>= 1;
			tmp[0][0] = matrix[0][0] * matrix[0][0] + matrix[0][1] * matrix[1][0];
			tmp[0][1] = matrix[0][0] * matrix[0][1] + matrix[0][1] * matrix[1][1];

			tmp[1][0] = matrix[1][0] * matrix[0][0] + matrix[1][1] * matrix[1][0];
			tmp[1][1] = matrix[1][0] * matrix[0][1] + matrix[1][1] * matrix[1][1];
			
			tmp[0][0] %= m;
			tmp[1][0] %= m;
			tmp[0][1] %= m;
			tmp[1][1] %= m;
			matrix[0][0] = tmp[0][0];
			matrix[1][0] = tmp[1][0];
			matrix[0][1] = tmp[0][1];
			matrix[1][1] = tmp[1][1];
		// возвести matrix в квадрат
	}
}

int main() {
    //freopen("input.txt", "rt", stdin);
    //freopen("seq.in", "rt", stdin);
    //freopen("seq.out", "wt", stdout);

	ll n;
	cin >> n;
	
	matrix[0][0] = 3;
	matrix[0][1] = 1;
	matrix[1][0] = 1;
	matrix[1][1] = 3;

	res[0][0] = 1;
	res[0][1] = 0;
	res[1][0] = 1;
	res[1][1] = 0;

	

	binpow(n, 1000000007LL);

	cout << res[0][0] << endl;

    return 0;
}