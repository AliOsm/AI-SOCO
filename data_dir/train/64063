#include <bits/stdc++.h>

#define fto(i, x, y) for(int i = (x); i <= (y); ++i)
#define fdto(i, x, y) for(int i = (x); i >= (y); --i)
#define ftoa(i, x, y, a) for(int i = (x); i <= (y); i += a)
#define ftoit(it, var) for (__typeof(var.begin()) it = var.begin(); it != var.end(); ++it)

#define ii pair<ll, ll>
#define mp make_pair
#define FF first
#define SS second

#define vi vector<int>
#define vii vector<ii>
#define ll long long
#define vll vector<ll>

#define eb emplace_back
#define ef emplace_front
#define lb lower_bound
#define ub upper_bound

#define oo 1000000007
#define OO 1000000000000000007LL

using namespace std;

#define Pro "tmp"
#define maxN 200007

ll a[maxN];
ll sum[maxN];

ll y_axis(ii line, ll x) {
    return line.FF*x+line.SS;
}

ii inter(ii l1, ii l2) {
    return mp((l2.SS-l1.SS)/(l1.FF-l2.FF),  (l2.SS-l1.SS)%(l1.FF-l2.FF));
}

bool valid(ii u, ii v, ii w) {
    return inter(w, u) <= inter(w, v);
}

deque <ii> dq;

void insertLine(ii w) {
    if (dq.size() <= 1) {
        dq.eb(w);
        return;
    }

    ii v = dq.back(); dq.pop_back();
    ii u = dq.back(); dq.pop_back();

    if (valid(u, v, w)) {
        dq.eb(u);
        dq.eb(v);
        dq.eb(w);
        return;
    }

    dq.eb(u);
    insertLine(w);

    return;
}

ii queryLine(ll x) {
    if (!dq.size()) return mp(0LL, 0LL);
    if (dq.size() == 1) return dq[0];

    int left = -1;
    int right = (int)dq.size()-1;

    while (left < right-1) {
        int mid = (left+right)/2;
        if (y_axis(dq[mid], x) <= y_axis(dq[mid+1], x)) left = mid;
        else right = mid;
    }

    return dq[right];
}

int main() {
    #ifndef ONLINE_JUDGE
        freopen(Pro".inp", "r", stdin);
        freopen(Pro".out", "w", stdout);
    #endif // ONLINE_JUDGE

    int n;
    scanf("%d", &n);

    fto (i, 1, n) scanf("%lld", &a[i]);
    fto (i, 1, n) sum[i] = sum[i-1]+a[i];

    ll ans = 0LL;
    fto (i, 1, n) ans += (ll)i*a[i];

    ll delta = 0LL;
    fto (i, 1, n) {
        insertLine(mp(i, -sum[i-1]));
        delta = max(delta, y_axis(queryLine(a[i]), a[i])-(ll)i*a[i]+sum[i-1]);
    }

    dq.clear();
    fdto (i, n, 1) {
        insertLine(mp(-i, -sum[i]));
        delta = max(delta, y_axis(queryLine(-a[i]), -a[i])-(ll)i*a[i]+sum[i]);
    }

    printf("%lld\n", ans+delta);
    return 0;
}

