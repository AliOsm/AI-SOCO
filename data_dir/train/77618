#include<bits/stdc++.h>
#define all(v) (v).begin(),(v).end()
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ri(x) scanf("%d",&(x))
#define ri2(x,y) scanf("%d %d",&(x),&(y))
#define ri3(x,y,z) scanf("%d %d %d",&(x),&(y),&(z))
#define rll(x) scanf("%lld",&(x))
#define rll2(x,y) scanf("%lld %lld",&(x),&(y))
#define rll3(x,y,z) scanf("%lld %lld %lld",&(x),&(y),&(z))
#define gc(x) ((x) = getchar())
using namespace::std;

const long double PI = acos(-1);
const long long MOD = 1000000000 +7;

typedef long long ll;
typedef pair<ll,ll> pll;
typedef pair<ll,pll> tll;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<iii> viii;
typedef vector<ll> vll;
typedef vector<pll> vpll;
typedef vector<tll> vtll;
typedef vector<string> vs;
typedef set<int> si;
typedef set<ii> sii;
typedef set<iii> siii;

ll gcd(ll a, ll b){ return b==0?a:gcd(b,a%b);}

int add(int a, int b, int m = MOD){
	return (a + b) % m;
}

int mul(ll a, ll b, int m = MOD){
	return (a * b) % m;
}

ll pow_mod(ll a, ll b, ll m = MOD){
	ll res = 1LL;
	a = a%m;
	while(b){
		if(b&1) res = mul(res,a,m);
		b >>= 1;
		a = mul(a,a,m);
	}
	return res;
}

ll fastexp(ll a, ll b){
	ll res = 1LL;
	while(b){
		if(b&1) res = res*a;
		b >>= 1;
		a *= a;
	}
	return res;
}

int gcdExtendido(int a, int b, int *x, int *y){
	if(a == 0){
		*x = 0;
		*y = 1;
		return b;
	}
	int x1, y1;
	int gcd = gcdExtendido(b%a,a,&x1,&y1);
	
	*x = y1-(b/a)*x1;
	*y = x1;
	return gcd;
}

int modInverso(int a, int m){
	int x, y;
	int g = gcdExtendido(a,m,&x,&y);
	if(g!=1) return -1;
	else return (x%m + m)%m;
}

/****************************************
*************P*L*A*N*T*I*L*L*A************
*****************************************/

const int N = 2001;

vi v;
int n;
int m, d;
char s[N];
int memo[N][N][2][3];
bool vis[N][N][2][3];

int DP(int pos, int rem, int menor, int par){
	if(pos == n){
		return rem == 0 and par < 2;
	}
	if(vis[pos][rem][menor][par]) return memo[pos][rem][menor][par];
	int ans = 0;
	if(par == 2){
		int limit = menor? 9 : v[pos];
		for(int i=0; i<=limit; i++){
			if(i > 0){
				if(i != d) ans = add(ans, DP(pos + 1, i % m, menor | (i < v[pos]), pos & 1));
			}
			else{
				ans = add(ans, DP(pos + 1, i % m, menor | (i < v[pos]), 2));
			}
		}
	}
	else{
		if((pos + par) % 2 == 0){
			int limit = menor? 9 : v[pos];
			for(int i=0; i<=limit; i++){
				if(i == d) continue;
				ans = add(ans, DP(pos + 1, add(i, mul(10, rem, m), m), menor | (i < v[pos]), par));
			}
		}
		else{
			if(menor | (d <= v[pos])){
				ans = add(ans, DP(pos + 1, add(d, mul(10, rem, m), m), menor | (d < v[pos]), par));
			}
		}
	}
	vis[pos][rem][menor][par] = true;
	return memo[pos][rem][menor][par] = ans;
}

int solve(int add){
	scanf("%s",s);
	int len = strlen(s);
	v.resize(len);
	for(int i=0; i<len; i++){
		v[len - 1 - i] = s[i] - '0';
	}
	if(v.size() == 1 and v[0] == 0) return 0;
	v[0] += add;
	for(int i=0; i+1<len; i++){
		if(v[i] < 0){
			v[i] += 10;
			v[i+1] -= 1;
		}
	}
	while(v.back() == 0 and v.size() > 1) v.pop_back();
	reverse(all(v));
	n = v.size();
	memset(vis,0,sizeof vis);
	return DP(0, 0, 0, 2);
}

int main(){
	ri2(m, d);
	int lta = solve(-1);
	int leb = solve(0);
	int ans = add(leb, MOD-lta);
	printf("%d\n",ans);
	return 0;
}
