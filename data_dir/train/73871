#include <bits/stdc++.h>

#define FOR(i,b,e) for(int i=(b); i <= (e); ++i)
#define FORD(i,b,e) for(int i=(b); i >= (e); --i)
#define REP(i,n) for(int i=0; i < (n); ++i)
#define SIZE(c) (int) (c).size()
#define ALL(c) (c).begin(), (c).end()
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
#define FWD(i,a,b) for (int i=(a); i<(b); ++i)
#define BCK(i,a,b) for (int i=(a); i>(b); --i)
#define PI 3.14159265358979311600
#define pb push_back
#define mp make_pair
#define st first
#define nd second

using namespace std;

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

typedef vector < int > VI;
typedef vector<ll> VL;

typedef long double K;

const int N = 1000005;

int n, m, deg[N], was[N], loop[N], loops;
vector<int> g[N];

void dfs(int v) {
	was[v] = 1;
	for (auto& to : g[v]) {
		if (!was[to]) {
			dfs(to);
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	cin >> n >> m;
	REP(i, m) {
		int x, y;
		cin >> x >> y;
		--x; --y;
		if (x == y) {
			++loop[x];
			++loops;
		} else {
			++deg[x];
			++deg[y];
			g[x].push_back(y);
			g[y].push_back(x);
		}
	}

	int root = 0;
	while (deg[root] + loop[root] == 0) ++root;
	dfs(root);

	REP(i, n) if (!was[i] && (deg[i] + loop[i]) > 0) {
		cout << 0 << endl;
		return 0;
	}

	long long result = 1LL * (loops - 1) * loops / 2;
	result += 1LL * loops * (m - loops);
	REP(i, n) {
		result += 1LL * deg[i] * (deg[i] - 1) / 2;
	}

	cout << result << endl;

	return 0;
}