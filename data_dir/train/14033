#include<bits/stdc++.h>
#include<iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <stack>
#include<bitset>
#include<list>
#include<cassert>
#include<numeric>
 
using namespace std;
 
const int N = 50 + 5;
bool mark[N][N];
char grid[N][N];
int n, m, cnt;
 
bool isval(int x, int y)
{
	if (x < n && y < m && x >= 0 && y >= 0 && grid[x][y] == '#')
	{
		return true;
	}
	return false;
}
 
void dfs(int x, int y)
{
	mark[x][y] = true;
	if (isval(x + 1, y) && !mark[x + 1][y])
	{
		dfs(x + 1, y);
	}
	if (isval(x, y + 1) && !mark[x][y + 1])
	{
		dfs(x, y + 1);
	}
	if (isval(x - 1, y) && !mark[x - 1][y])
	{
		dfs(x - 1, y);
	}
	if (isval(x, y - 1) && !mark[x][y - 1])
	{
		dfs(x, y - 1);
	}
}
 
 
bool isOne()
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (grid[i][j] == '#')
			{
				grid[i][j] = '.';
				memset(mark, 0, sizeof mark);
				int cnt = 0;
				//cout << i << " " << j << endl;
				for (int k = 0; k < n; k++)
				{
					for (int p = 0; p < m; p++)
					{
						if (grid[k][p] == '#' && !mark[k][p])
						{
							dfs(k, p);
							cnt++;
							if (cnt == 2)
							{
								return true;
							}
						}
					}
				}
				grid[i][j] = '#';
			}
		}
	}
	return false;
}
 
 
int main()
{
	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cin >> grid[i][j];
			if (grid[i][j] == '#')
			{
				cnt++;
			}
		}
	}
	if (cnt < 3)
	{
		cout << -1;
		exit(0);
	}
	if (isOne())
	{
		cout << 1;
		exit(0);
	}
	cout << 2 << endl;
 
 
}