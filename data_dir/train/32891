#include <bits/stdc++.h>
using namespace std;

#define loop(i,n) for(int i = 0; i < n; i++)
#define pii pair<int, int>
#define all(v) v.begin(),v.end()
#define S second
#define F first
#define vi vector<int>
#define pb push_back

typedef long long LL;

const int INF = 1e9 + 5;
const int mod = 1e9 + 7;

#define vpii vector<pii>

const int N = 1e5 + 5;

namespace KMP {
    vi getPrefixArray(const string& s) {
        int i = 1, j = 0;
        vector<int> PA(s.length());
        while (i < s.length()) {
            if (s[i] == s[j]) {
                PA[i] = ++j;
            }
            else {
                while (j > 0) {
                    j = PA[j - 1];
                    if (s[i] == s[j]) {
                        PA[i] = ++j;
                        break;
                    }
                }
            }
            i++;
        }
        return PA;
    }
    
    vi kmp(const string& text, const string& pattern) {
        vi prefixArray = getPrefixArray(pattern);
        vi matchingPositions;
        vi out(text.length());
        int j = 0;
        for (int i = 0; i < text.length(); ++i) {
            if (text[i] == pattern[j]) {
                ++j;
                out[i] = j;
                if (j == pattern.length()) {
                    matchingPositions.push_back(i - pattern.length() + 1);
                    j = prefixArray[j - 1];
                }
            }
            else {
                if (j > 0) {
                    j = prefixArray[j - 1];
                    out[i] = j;
                    i--;
                }
            }
        }
        return out;
    }
}

vi match[105], rmatch[105], rMaxInd[105];

int main() {
#ifdef DEBUG
    freopen("in.txt", "r", stdin);
#endif
    ios_base::sync_with_stdio(false);
    string s, rs, pat[105], rpat[105];
    int m, n;
    cin >> s >> m;
    n = s.length();
    rs = s;
    reverse(rs.begin(), rs.end());
    loop(i, m) {
        cin >> pat[i];
        rpat[i] = pat[i];
        reverse(rpat[i].begin(), rpat[i].end());
        match[i] = KMP::kmp(s, pat[i]);
        rMaxInd[i] = rmatch[i] = KMP::kmp(rs, rpat[i]);
        loop(k, rMaxInd[i].size() - 1) {
            rMaxInd[i][k + 1] = max(rMaxInd[i][k], rmatch[i][k + 1]);
        }
    }
    int ans = 0;
    int yup[105];
    memset(yup, 0, sizeof(yup));
    loop(i, s.length()) {
        loop(j, m) {
            if (yup[j]) continue;
            int L = match[j][i];
            if (L > 0 && L < pat[j].length()) {
                int len = pat[j].length();
                if (n - i - 2 >= 0 && rMaxInd[j][n - i - 2] >= len - L) {
                    ans += 1;
                    yup[j] = 1;
                }
            }
        }
    }
    cout << ans << endl;
    return 0;
}