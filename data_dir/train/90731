
#include <cstdio>
#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <algorithm>
#include <cmath>
#include <queue>
#include <map>
#include <set>
#include <cstdlib>
#include <bitset>
#include <tuple>
#include <assert.h>
#include <deque>
#include <bitset>
#include <iomanip>
#include <limits>
#include <chrono>
#include <random>
#include <array>
#include <unordered_map>
#include <functional>
#include <complex>

template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

constexpr long long MAX = 5100000;
constexpr long long INF = 1LL << 60;
constexpr int inf = 1 << 28;
constexpr long long mod = 1000000007LL;
//constexpr long long mod = 998244353LL;

using namespace std;
typedef unsigned long long ull;
typedef long long ll;


int n;
vector<vector<pair<int, int>>> g;
vector<bool> flag;
pair<int, int > dfs(vector<vector<pair<int,int>>>& g, int idx, int par) {
	pair<int, int > ret(0, idx);
	for (auto e : g[idx]) {
		if (e.first == par) continue;
		auto cost = dfs(g, e.first, idx);
		cost.first += 1;
		ret = max(ret, cost);
	}
	return ret;
}

pair<int, int> tree_diameter(vector<vector<pair<int,int>>>& g) {
	auto p = dfs(g, 0, -1);
	auto q = dfs(g, p.second, -1);
	return { p.second, q.second };
}

bool dfs2(int cur, int pre, int end) {
	if (cur == end) return true;
	for (auto next : g[cur]) {
		if (next.first == pre) continue;
		if (dfs2(next.first, cur, end)) {
			flag[next.second] = true;
			return true;
		}
	}
	return false;
}
int main()
{
	/*
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	*/
	scanf("%d", &n);
	flag = vector<bool>(n - 1, false);
	g.resize(n);
	for (int i = 0; i < n - 1; i++) {
		int u, v; scanf("%d %d", &u, &v);
		u--; v--;
		g[u].emplace_back(v, i);
		g[v].emplace_back(u, i);
	}
	if (n == 2) {
		puts("0");
		return 0;
	}
	pair<int, int> d = tree_diameter(g);
	//cout << d.first << " " << d.second << endl;
	dfs2(d.first, -1, d.second);
	vector<int> res(n - 1, -1);
	for (auto next : g[d.first]) {
		//cout << next.second << endl;
		if (flag[next.second]) res[next.second] = 0;
	}
	for (auto next : g[d.second]) {
		if (flag[next.second]) res[next.second] = 1;
	}
	int now = 3;
	for (int i = 0; i < n - 1; i++) {
		//if (flag[i]) cerr << i << "\n";
		if (res[i] == -1 && flag[i] && now <= n - 2) res[i] = now++;
	}
	bool flag2 = false;
	for (int i = 0; i < n - 1; i++) {
		//if (flag[i]) cerr << i << "\n";
		if (res[i] == -1 && !flag2) {
			res[i] = 2;
			flag2 = true;
		}
		else if (res[i] == -1) {
			res[i] = now++;
		}
	}
	for (int i = 0; i < n - 1; i++) {
		if (res[i] > n - 2) assert(false);
		printf("%d\n", res[i]);
	}
	return 0;
	/*
		おまじないを使ったらscanfとprintf関連注意！！！！！！！！！！！！
	*/
}