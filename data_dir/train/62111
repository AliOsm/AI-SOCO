#include<bits/stdc++.h>
using namespace std;
const int N = 77777;
int n, s, Mxd, A[N], P[N], C[N], Nxt[N];
bitset < N > B, B2, M;
int main()
{
    scanf("%d%d", &n, &s);
    for (int i = 1; i <= n; i++)
    {
        scanf("%d", &A[i]);
        if (A[i] > A[Mxd])
            Mxd = i;
    }
    P[0] = -1; B[0] = 1;
    for (int i = 1; i <= n; i++)
    {
        if (i == Mxd)
            continue;
        B2 = B; B |= (B << A[i]); B2 ^= B;
        for (int j = B2._Find_first(); j < B2.size(); j = B2._Find_next(j))
            P[j] = i;
    }
    if (A[Mxd] > s || !B[s - A[Mxd]])
        return puts("-1");
    M[Mxd] = 1; C[Mxd] = A[Mxd];
    for (int i = s - A[Mxd]; P[i] != -1; i -= A[P[i]])
        M[P[i]] = 1, C[P[i]] = A[P[i]];
    set < pair < int , int > > S;
    for (int i = 1; i <= n; i++)
        if (!M[i])
            S.insert({A[i], i});
    if (S.size())
    {
        for (auto it = S.begin(), itr = it ++; it != S.end(); it ++, itr ++)
        {
            Nxt[(*it).second] = (*itr).second;
            C[(*it).second] = (*it).first - (*itr).first;
        }
        Nxt[Mxd] = (*S.rbegin()).second, C[Mxd] = A[Mxd] - (*S.rbegin()).first, C[(*S.begin()).second] = (*S.begin()).first;
    }
    for (int i = 1; i <= n; i++)
    {
        printf("%d %d", C[i], (Nxt[i] > 0));
        if (Nxt[i])
            printf(" %d", Nxt[i]);
        puts("");
    }
    return (0);
}
