//#pragma GCC target("avx2")
//#pragma GCC optimize("O3")

//# include <x86intrin.h>
# include <bits/stdc++.h>

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
 
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

inline void Input_Output () {
	//freopen(".in", "r", stdin);
   //freopen(".out", "w", stdout);
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
int a[N];

int bl[N], br[N];
ll lazy[N];
vector < pair < int, int > > buc[2020];

void build (int id) {
	buc[id].clear();
	for (int i = bl[id]; i <= br[id]; ++i) {
		buc[id].pb(mp(a[i], i));
	}
	sort(every(buc[id]));
}

void upd () {
	int l, r, x;
	cin >> l >> r >> x;
	--l, --r;
	//cerr << l / Magic << ' ' << r/Magic << '\n';
	if ((l/Magic) == (r/Magic)) {
		for (int i = l; i <= r; ++i)
			a[i] += x;
		build(l / Magic);
		return;
	}
	
	for (int id = (l / Magic) + 1; id < r / Magic; ++id)
		lazy[id] += x;

	for (int i = l; i <= br[l / Magic]; ++i) {
//		cerr << i << '\n';
		a[i] += x;
	}
	for (int i = r; i >= bl[r / Magic]; --i) {
//		cerr << i << '\n';
		a[i] += x;
	}
//	exit(0);
	build(l / Magic);
	build(r / Magic);
}

pair < int, int > get (int id, int x) {
	if (lazy[id] > x) return mp(-1, -1);
	x -= lazy[id];
	if (buc[id].empty()) {
		cout << "wtf?\n";
		exit(0);
	}

	auto itl = lower_bound(every(buc[id]), mp(x, 0));
	auto itr = lower_bound(every(buc[id]), mp(x + 1, 0));

	if (itl == buc[id].end()) return mp(-1, -1);
	if (itl -> first != x) return mp(-1, -1);

	itr --;
	return mp(itl -> second, itr -> second);	
}

int ptr;

void occurence() {
	int x;
	cin >> x;

	int L = -1, R = -1;
	//cout << ptr << '\n';
	for (int i = 0; i < ptr; ++i) {
		auto it = get(i, x);
		if (it.first != -1) {
			R = it.second;
			if (L == -1) L = it.first;
		}
	}
//	exit(0);

	if (L == -1) {
		cout << -1 << '\n';
		return;
	}
	cout << R - L << '\n';
}

int main () {
   	SpeedForce;
	cin >> n >> m;
	for (int i = 0; i < n; i ++) {
		cin >> a[i];
	}
	Magic = 900;
	for (int i = 0; i < n; i += Magic) {
		bl[ptr] = i;
		br[ptr] = min(n, i + Magic) - 1;
		build (ptr);
		++ptr;
	}                         

	for (int i = 1; i <= m; i ++) {
		int type;
		cin >> type;
		if (type == 1) upd();
		else occurence();
		
	}



   	return Accepted;
}

// B...a