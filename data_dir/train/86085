#include <bits/stdc++.h>

using namespace std;

#define long long long
//#define double __float128
#define INF (long) 1e18
#define MOD ((long) 1e9 + 7)
#define mll map<long, long>
#define pll pair<long, long>
#define umap unordered_map
#define umll umap<long, long>
#define pb push_back
#define FOR(i, a, b) \
  for (long i = a; i < (long) b; i++)
#define SORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr < b.atr; });
#define UNSORT(v, atr) \
  sort(v.begin(), v.end(), \
    [](auto &a, auto &b) { return a.atr > b.atr; });
#define PRINTV(v) \
  FOR (_i, 0, v.size()) \
    cout << v[_i] << " "; \
  cout << "\n";

set<long> gera_primos(long n)
{
  set<long> primos;
  vector<bool> crivo(n+1);
  primos.insert(2);
  for (long i = 3; i <= n; i += 2) {
    if (crivo[i]) continue;
    primos.insert(i);
    for (long j = i; j <= n; j += i) {
      crivo[j] = true;
    }
  }
  return primos;
}

struct Link
{
  long from, to, cost;
};

struct Node
{
  bool visitado = false;
  bool cor = false;
  vector<long> in, out;
};

bool solve(auto &nodes, long r, bool cor)
{
  if (nodes[r].visitado) return cor == nodes[r].cor;
  nodes[r].visitado = true;
  nodes[r].cor = cor;
  bool b = true;
  for (auto &x : nodes[r].out) {
    b &= solve(nodes, x, not cor);
  }
  return b;
}

int main()
{
  ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

  long n, k, a, b, c, d;
  cin >> n >> k >> a >> b >> c >> d;

  if (n == 4 or k <= n) {
    puts("-1");
    return 0;
  }
  vector<long> ra, rb;
  ra.pb(a);
  ra.pb(c);
  FOR (i, 1, n+1) {
    if (i == a or i == b or i == c or i == d) continue;
    ra.pb(i);
  }
  ra.pb(d);
  ra.pb(b);

  rb.pb(c);
  rb.pb(a);
  for (long i = n; i >= 1; i--) {
    if (i == a or i == b or i == c or i == d) continue;
    rb.pb(i);
  }
  rb.pb(b);
  rb.pb(d);

  PRINTV(ra);
  PRINTV(rb);
}
