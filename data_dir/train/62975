#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

#define minimize(a, b) { a = min(a, b); }
#define maximize(a, b) { a = max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n';
#define next(type, i) type i; cin >> i;
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }

vector<string> split(string &s, char c) {
	vector<string> result;
	
	int start = 0;
	FOR (i, 0, s.length()) {
		if (s[i] == c) {
			result.push_back(s.substr(start, i - start));
			i++;
			start = i;
		}
	}
	if (start != s.length()) result.push_back(s.substr(start));
	return result;
}

bool solve() {
	next(string, s);
	
	auto v1 = split(s, '@');
	if (v1.size() != 2 || v1[0].length() < 1 || v1[0].length() > 16 || v1[1].length() < 1) {
		return false;
	}
	if (s.back() == '/' || s.back() == '@') return false;
	
	if (accumulate(all(v1[0]), false, [](bool acc, char c) { return acc || (!islower(c) && !isupper(c) && !isdigit(c) && c != '_');  } )) {
		return false;
	}
	
	auto suffix = split(v1[1], '/');
	swap(suffix.front(), suffix.back());
	if (suffix.back().length() < 1) {
		return false;
	}
	if (suffix.back().length() < 1 || suffix.back().length() > 32) return false;
	auto hosts = split(suffix.back(), '.');
	if (suffix.back().back() == '.') return false;
	for (auto h : hosts) {
		if (h.length() < 1 || h.length() > 16) return false;
		if (accumulate(all(h), false, [](bool acc, char c) { return acc || (!islower(c) && !isupper(c) && !isdigit(c) && c != '_');  } )) return false;
	}
	suffix.pop_back();
	if (suffix.size() > 1) return false;
	if (suffix.size() == 1) {
		if (suffix.front().length() < 1 || suffix.front().length() > 16) return false;
		if (accumulate(all(suffix.front()), false, [](bool acc, char c) { return acc || (!islower(c) && !isupper(c) && !isdigit(c) && c != '_');  } )) return false;
	}
	return true;
}

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	if (solve()) cout << "YES";
	else cout << "NO";
}