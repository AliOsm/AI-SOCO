/*
    In the name of
        "ALLAH"
    And say "AL-HAMD-U-LILLAH"
    |
*/

#include<bits/stdc++.h>
#define   ll   long long
#define   llu  unsigned long long
#define   _    printf("\n")
int      take() {
    int n;
    scanf("%d",&n);
    return n;

}
double  ttake() {
    double n;
    scanf("%lf",&n);
    return n;
}
ll     takes() {
    ll n;
    scanf("%lld",&n);
    return n;

}

#define  Int             take()
#define  Dnt             ttake()
#define  LL              takes()
#define  done            {return 0;}
#define  fr(i,x,n,a)     for(int i=x;i<=n;i+=a)
#define  FR(a,b,x)       for(int i=(a);i<=(b);i+=(x))
#define  rfr(i,x,n,a)    for(int i=x;i>=n;i--)
int      cas;
#define  print           printf("Case %d:",++cas)
#define  vi              vector<int>
#define  vs              vector<string>
#define  vl              vector<ll>
#define  pb              push_back
#define  pii             pair<int,int>
#define  vii             vector<pii>
#define  pll             pair<ll,ll>
#define  pil             pair<int,ll>
#define  pli             pair<ll,int>
#define  pipii           pair<int,pii>
#define  piipi           pair<pii,int>
#define  mk              make_pair
#define  fill(x,v)       memset(x,v,sizeof x)

using    namespace       std;

bool     approximatelyEqual(float a, float b, float epsilon) {
    return fabs(a - b) <= ( (fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
}

bool     essentiallyEqual(float a, float b, float epsilon) {
    return fabs(a - b) <= ( (fabs(a) > fabs(b) ? fabs(b) : fabs(a)) * epsilon);
}

bool     definitelyGreaterThan(float a, float b, float epsilon) {
    return (a - b) > ( (fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
}

bool     definitelyLessThan(float a, float b, float epsilon) {
    return (b - a) > ( (fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
}
#define  STR             {struct info}
#define  dbg(x)          {cout<<"ekhane"<<x<<endl;}
#define  SS              second
#define  FF              first
#define  PQ              priority_queue
#define  great           greatest
#define  less            lesser
#define  mii             map<int,int>
#define  mil             map<int,ll>
#define  mll             map<ll,ll>
#define  msb             map<string,bool>
#define  V               vector
#define  M               100005
#define  pf              printf
#define  inf             INT_MAX
#define  sz( x )         ( int )x.size()
//////////////////////////////////////////
vi v1[ 4 * M ] ; int tr[ 4 * M ] , arr[ M ] ;
void built( int s , int e , int n ){
    if( s > e ) return ;
    if( s == e ){
        tr[ n ] = arr[ s ] ;
        v1[ n ].pb( arr[ s ] ) ; return ;
    }
    int m = s + ( e - s ) / 2 ;
    built( s , m , 2 * n ) ;
    built( m + 1 , e , 2 * n + 1 ) ;
    tr[ n ] = __gcd( tr[ 2 * n ] , tr[ 2 * n + 1 ] ) ;
    merge( v1[ 2 * n ].begin( ) , v1[ 2 * n ].end( ) , v1[ 2 * n + 1 ].begin( ) , v1[ 2 * n + 1 ].end( ) , back_inserter( v1[ n ] ) ) ;
}
int query( int s , int e , int l , int r , int n ){
    if( s > e || s > r || e < l ) return 0 ;
    if( s >= l && e <= r ){
        return tr[ n ] ;
    }
     int m = s + ( e - s ) / 2 ;
    return __gcd(query( s , m , l , r, 2 * n ) , query( m + 1 , e , l , r, 2 * n + 1 ) );
}
int query2( int s , int e , int l , int r , int gcd , int n ){
    if( s > e || s > r || e < l ) return 0 ;
    if( s >= l && e <= r ){
        int id = upper_bound( v1[ n ].begin( ) , v1[ n ].end( ) , gcd ) - v1[ n ].begin( ) ; int id1 = id ;
        id -= ( lower_bound( v1[ n ].begin( ) , v1[ n ].end( ) , gcd ) - v1[ n ].begin( ) ) ;
       // cout<<" l = "<<l<<" r = "<<r<<" id = "<<id<<" id1 = "<<id1<<endl;
        return id ;
    }
     int m = s + ( e - s ) / 2 ;
    return (query2( s , m , l , r, gcd , 2 * n ) + query2( m + 1 , e , l , r , gcd , 2 * n + 1 ) );
}
int main(){
    int tc = 1 ;
    while( tc-- ){
        int n = Int ;
        fr( i , 1 , n , 1 ) arr[ i ] = Int ;
        built( 1 , n , 1 ) ;
        int m = Int ;
        while( m-- ){
            int l = Int , r = Int ;
            int gcd = query( 1 , n , l , r , 1 ) ;
         //   dbg( gcd ) ;
            pf("%d",( r - l + 1 ) - query2( 1 , n , l , r , gcd , 1 ) );
            _;
        }
    }
 done ;
}
