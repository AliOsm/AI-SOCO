#include <bits/stdc++.h>
using namespace std;

const int N = 1e6 + 10;
int n, m;

vector <int> adj[N], g[N];

int cnt;
bool vis[N];

void dfs_1(int v)
{
	vis[v] = 1, cnt++;
	for (auto u : adj[v])
		if(!vis[u])	dfs_1(u);
}

void dfs_2(int v)
{
	vis[v] = 1, cnt++;
	for (auto u : g[v])
		if(!vis[u])	dfs_2(u);
}

void solve()
{
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		adj[i].clear(), g[i].clear();
	for (int i = 0; i < m; i++)
	{
		int v, u;
		cin >> v >> u;
		v--, u--;
		adj[v].push_back(u);
		g[u].push_back(v);
	}
	fill(vis, vis + n, false);
	cnt = 0;
	dfs_1(0);
	if(cnt < n)
	{
		cout << "Yes\n" << cnt << " " << n - cnt << "\n";
		for (int i = 0; i < n; i++)	if(vis[i])	cout << i + 1 << " ";
		cout << "\n";
		for (int i = 0; i < n; i++)	if(!vis[i])	cout << i + 1 << " ";
		cout << "\n";
		return;
	}
	cnt = 0;
	fill(vis, vis + n, false);
	dfs_2(0);
	if(cnt < n)
	{
		cout << "Yes\n" << n - cnt << " " << cnt << "\n";
		for (int i = 0; i < n; i++)	if(!vis[i])	cout << i + 1 << " ";
		cout << "\n";
		for (int i = 0; i < n; i++)	if(vis[i])	cout << i + 1 << " ";
		cout << "\n";
		return;
	}
	cout << "No\n";
	return;
}

int main()
{
	ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
	int tc;
	cin >> tc;
	while(tc--)
		solve();
}
