#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;
#define Max 1000001
#define inf INT_MAX
#define llinf LONG_LONG_MAX
#define f(i,n) for(i=0;i<n;i++)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define pb push_back
#define ff first
#define ss second
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcount(n)
#define endl '\n'
const ll N=1e3+5,mod=1e9+7,bit=60;

ll dis[N][N],n,m,k,dx[4]={1,0,0,-1},dy[4]={0,-1,+1,0};
string s[N],my="DLRU",ans="";

bool valid(ll x,ll y)
{
	return (x>=0 and y>=0 and x<n and y<m and s[x][y]!='*');
}

void bfs(ll x,ll y)
{
	 ll i,j;
	 f(i,n)
	 {
	 	f(j,m)
	 	{
	 		dis[i][j]=inf;
	 	}
	 }
	 dis[x][y]=0;
	 queue<pll> mq;
	 mq.push({x,y});
	 while(!mq.empty())
	 {
	 	x=mq.front().ff;
	 	y=mq.front().ss;
	 	mq.pop();
	 	f(i,4)
	 	{
	 		ll cx=x+dx[i];
	 		ll cy=y+dy[i];
	 		if(valid(cx,cy) and dis[cx][cy]>dis[x][y]+1)
	 		{
	 			dis[cx][cy]=dis[x][y]+1;
	 			mq.push({cx,cy});
	 		}
	 	}
	 }
}

void bye()
{
	cout<<"IMPOSSIBLE\n";
	exit(0);
}

signed main()
{
    fast;
    ll i,j,cx,cy;
	cin>>n>>m>>k;
	f(i,n)
	{
		cin>>s[i];
		f(j,m)
		{
			if(s[i][j]=='X')
			{
				cx=i;
				cy=j;
			}
		}
	}
	if(k & 1)
	{
		bye();
	}
	bfs(cx,cy);
	f(i,k)
	{
		f(j,4)
		{
			ll x=cx+dx[j]; 
			ll y=cy+dy[j];
			if(valid(x,y) and dis[x][y]<=k-i-1)
			{
				cx=x;
				cy=y;
				ans+=my[j];
				break;
			}
		}
		if(j==4)
		{
			bye();
		}
	}
	cout<<ans<<endl;
	return 0;
}