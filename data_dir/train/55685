#include <bits/stdc++.h>
#define MAX (int)(1e5 + 3)
#define INF (int)(1e9 + 2)
using namespace std;
using ll = long long;

int ar[5][MAX];
vector <int> seg[4 * MAX];
int mi = 0, m;
int sm (vector <int> v) {
	int ss = 0;
	for (int i = 0; i < m; i++) {
		ss += v[i];
	}
	return ss;
}
vector <int> mm (vector <int> v1, vector <int> v2) {
	vector <int> vc;
	for (int i =0; i < m; i++) {
		vc.push_back (max (v1[i], v2[i]));
	}
	return vc;
}
vector <int> build (int st, int ind, int en, int ii) {
	vector <int> vc;
	if (st == en) {
		for (int i = 0; i < ii; i++) {
			seg[ind].push_back (ar[i][st - 1]);
		}
		return seg[ind];
	}
	seg[ind] = mm (build (st, ind << 1, (st + en) >> 1, ii), build (((st + en) >> 1) + 1 , ind << 1 | 1, en, ii));
	return seg[ind];
}

vector <int> query (int st, int en, int ind, int q1, int q2) {
	vector <int> v;
	for (int i = 0; i < m; i++) {
		v.push_back (0);
	}
	if (q1 > q2) {
		return v;
	}
	if (st > en) {
		return v;
	}
	if (q1 <= st && q2 >= en) {
		return seg[ind];
	}
	if ((q1 >= st && q1 <= en) || (q2 >= st && q2 <= en)) {
		return mm (query (st, (st + en) >> 1, ind << 1, q1, q2), query (((st + en) >> 1) + 1, en, ind << 1 | 1, q1, q2));
	}
	return v;
}
bool ch (int n, int m, int su, int x) {
	int xx = 0;
	int ss = 0;
	int mi = INF;
	for (int i = 1 ; i <= n - x + 1; i++) {
		mi = min (mi , sm (query (1, n, 1, i, i + x - 1)));
	}
	return mi <= su;
}

int bin (int st, int en, int n, int m, int su) {
	int mid = (st + en) >> 1;
	while (st < en) {
		if (ch (n, m, su, mid)) {
			st = mid + 1;
		}
		else {
			en = mid;
		}
		mid = (st + en) >> 1;
	}
	return st - 1;
}
int main () {
	ios_base :: sync_with_stdio (NULL);
	cin.tie (0);
	int n, k;
	cin >> n >> m >> k;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) { 
			cin >> ar[j][i];
		}
	}
	multiset <int> ms[m];
	for (int i = 0; i < m; i++) {
		ms[i].insert (ar[i][0]);
	}
	int ans[m] = {};
	int st = 1, en = 1;
	int ii = 0, ma = 0;
	while (en <= n && st <= n) {
		int ss = 0;
		for (int i = 0; i < m; i++) {
			ss += *(--ms[i].end ());
		}
		if (ss <= k) {
			if (en - st + 1 > ma) {
				ma = en - st + 1;
				for (int i = 0; i < m; i++) {
					ans[i] = *(--ms[i].end ());
				}	
			}
			if (en < n) {
				for (int i = 0; i < m; i++) {
					ms[i].insert (ar[i][en]);
				}
				en++;
			}
			else {
				break;
			}
		}
		else {
			for (int i = 0; i < m; i++) {
				ms[i].erase (ms[i].find (ar[i][st - 1]));
			}
			if (en == st) {
				if (en < n) {
					for (int i = 0; i < m; i++) {
						ms[i].insert (ar[i][en]);
					}
					en++;
				}
				else {
					break;
				}
			}
			st++;
		}
	}
	for (int x : ans ) {
		cout << x << " ";
	}
	cout << "\n";
}

