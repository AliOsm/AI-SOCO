#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <utility>
#include <cassert>
using namespace std;
#define REP(I,N) for (I=0;I<N;I++)
#define rREP(I,N) for (I=N-1;I>=0;I--)
#define rep(I,S,N) for (I=S;I<N;I++)
#define rrep(I,S,N) for (I=N-1;I>=S;I--)
#define FOR(I,S,N) for (I=S;I<=N;I++)
#define rFOR(I,S,N) for (I=N;I>=S;I--)
typedef unsigned long long ULL;
typedef long long LL;
const int INF=0x3f3f3f3f;
const LL INFF=0x3f3f3f3f3f3f3f3fll;
const LL M=1e9+7;
const LL maxn=1e6+7;
const double eps=0.00000001;
LL gcd(LL a,LL b){return b?gcd(b,a%b):a;}
template<typename T>inline T abs(T a) {return a>0?a:-a;}
template<typename T>inline T powMM(T a,T b){T ret=1;for (;b;b>>=1ll,a=1ll*a*a%M) if (b&1) ret=1ll*ret*a%M;return ret;}

struct matrix{
    int A[3][3];
    matrix(){
        int i,j;
        REP(i,3) REP(j,3) A[i][j]=(i==j);
    }
}MAT,B[3];
matrix mul(matrix A,matrix B){
    matrix C;int i,j,k;
    REP(i,3) C.A[i][i]=0;
    REP(i,3)
        REP(j,3)
            REP(k,3)
                C.A[i][j]=((LL)A.A[i][k]*B.A[k][j]+C.A[i][j])%M;
    return C;
}
matrix poww(matrix A,LL k){
    matrix ret;
    for (;k;k>>=1ll,A=mul(A,A))
        if (k&1) ret=mul(ret,A);
    return ret;
}
int n;LL m;
int i,j,k;
int A[maxn];LL L[maxn],R[maxn];
vector<LL> H;
int T[maxn][3];
int main(){
    REP(i,3) B[i].A[i][i]=0;
    MAT.A[0][1]=1;MAT.A[2][1]=1;
    MAT.A[1][2]=1;MAT.A[1][0]=1;
    scanf("%d%I64d",&n,&m);
    FOR(i,1,n) {
        scanf("%d%I64d%I64d",&A[i],&L[i],&R[i]);--A[i];
        H.push_back(L[i]),H.push_back(R[i]);H.push_back(R[i]+1);
    }H.push_back(1);H.push_back(m);H.push_back(m+1);H.push_back(2);
    sort(H.begin(),H.end());
    H.erase(unique(H.begin(),H.end()),H.end());
    FOR(i,1,n){
        L[i]=lower_bound(H.begin(),H.end(),L[i])-H.begin();
        R[i]=lower_bound(H.begin(),H.end(),R[i])-H.begin();
        T[L[i]][A[i]]++;T[R[i]+1][A[i]]--;
    }matrix now;
    now.A[0][0]=now.A[2][2]=0;
    rep(i,1,H.size()-1){
        matrix MUL=MAT;
        REP(j,3) REP(k,3) if (T[i][k]) MUL.A[j][k]=0;
//        REP(j,3) if (T[i][j]) MUL=mul(B[j],MUL);
//        REP(j,3) if (T[i][j]) MUL=mul(MUL,B[j]);
        REP(j,3) T[i+1][j]+=T[i][j];
        now=mul(now,poww(MUL,H[i+1]-H[i]));
//        REP(j,3) {REP(k,3) printf("%d ",MUL.A[j][k]);puts("");}
//        printf("%d %d %d |",now.A[1][0],now.A[1][1],now.A[1][2]);
//        printf("%lld : %d %d %d\n",H[i],T[i][0],T[i][1],T[i][2]);
    }
    printf("%d\n",now.A[1][1]);
}
/*
*/
