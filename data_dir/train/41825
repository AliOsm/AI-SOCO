#include <bits/stdc++.h>
#define f first
#define s second
#define pb push_back
#define pii pair<int, int>
#define endl '\n'
#define vi vector<int>
#define vvi vector<vi>
#define pii pair<int, int>
#define vpii vector<pii>
#define vvpii vector<vpii>
typedef long long ll;
typedef long double ld;
using namespace std;
template<class T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> void setmax(T& a, T b) { a = max(a, b); };
template<typename T> void setmin(T& a, T b) { a = min(a, b); };


int main() {
  ios::sync_with_stdio(0);
  cin.tie(0); cout.tie(0);

  int n;
  cin >> n;
  vi a(n);
  for (int& x: a) {
    cin >> x;
  }
  vvi g(n);
  for (int i = 0; i < n; i++) {
    if (i - a[i] >= 0) {
      g[i - a[i]].pb(i);
    }
    if (i + a[i] < n) {
      g[i + a[i]].pb(i);
    }
  }
  vi from_odd(n, 0), from_even(n, 0);

  {
    queue<int> bfs;
    for (int i = 0; i < n; i++) {
      if (a[i] & 1) continue;
      bfs.push(i);
      from_even[i] = 1;
    }
    while (bfs.size()) {
      int x = bfs.front();
      bfs.pop();
      for (int y : g[x]) {
        if (from_even[y] == 0) {
          from_even[y] = from_even[x] + 1;
          bfs.push(y);
        }
      }
    }
  }
  {
    queue<int> bfs;
    for (int i = 0; i < n; i++) {
      if (a[i] % 2 == 0) continue;
      bfs.push(i);
      from_odd[i] = 1;
    }
    while (bfs.size()) {
      int x = bfs.front();
      bfs.pop();
      for (int y : g[x]) {
        if (from_odd[y] == 0) {
          from_odd[y] = from_odd[x] + 1;
          bfs.push(y);
        }
      }
    }
  }

  for (int i = 0; i < n; i++) {
    if (a[i] & 1) {
      cout << from_even[i] - 1 << " ";
    } else { 
      cout << from_odd[i] - 1 << " ";
    }
  }
  cout << endl;
  return 0;
}