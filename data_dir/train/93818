/* ****revpro**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl	   '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii	    map<ll,ll>
using namespace std;

#define N  100005
vi a(N),seg(4*N);
void build(ll cur,ll st,ll end)
{
    if(st==end)
    {
        seg[cur]=a[st];
        return;
    }
    ll mid=(st+end)>>1;
    build(2*cur,st,mid);
    build(2*cur+1,mid+1,end);
    seg[cur]=min(seg[2*cur],seg[2*cur+1]);                   /* 1-change */
}
ll query(ll cur,ll st,ll end,ll l,ll r)
{
    if(st>end||st>r||end<l) return hell;
    if(st>=l&&end<=r) return seg[cur];
    ll mid=(st+end)>>1;
    ll ans1=query(2*cur,st,mid,l,r);
    ll ans2=query(2*cur+1,mid+1,end,l,r);
    return min(ans1,ans2);                                 /* 14-change */
}
vi seg1(4*N);
void build1(ll cur,ll st,ll end)
{
    if(st==end)
    {
        seg1[cur]=a[st];
        return;
    }
    ll mid=(st+end)>>1;
    build1(2*cur,st,mid);
    build1(2*cur+1,mid+1,end);
    seg1[cur]=max(seg1[2*cur],seg1[2*cur+1]);                   /* 1-change */
}
ll query1(ll cur,ll st,ll end,ll l,ll r)
{
    if(st>end||st>r||end<l) return (-hell);
    if(st>=l&&end<=r) return seg1[cur];
    ll mid=(st+end)>>1;
    ll ans1=query1(2*cur,st,mid,l,r);
    ll ans2=query1(2*cur+1,mid+1,end,l,r);
    return max(ans1,ans2);                                 /* 14-change */
}
ll n,q;
vi ans(N),seg2(4*N),lazy(4*N,hell);
void build2(ll cur,ll st,ll end)
{
	if(st==end)
	{
		seg2[cur]=ans[st];
		return;
	}
	ll mid=(st+end)>>1;
	build2(2*cur,st,mid);
	build2(2*cur+1,mid+1,end);
	seg2[cur]=min(seg2[2*cur],seg2[2*cur+1]);					/* 1-change */
}
void updaterange(ll cur,ll st,ll end,ll l,ll r,ll val)
{
	if(lazy[cur]!=hell)                                    /* 2-change */
	{
		seg2[cur]=min(lazy[cur],seg2[cur]);					/* 3-change */
		if(st!=end)
		{
			lazy[2*cur]=min(lazy[cur],lazy[2*cur]);						/* 4-change */
			lazy[2*cur+1]=min(lazy[cur],lazy[2*cur+1]);                   /* 5-change */
		}
		lazy[cur]=hell;                                    /* 6-change */
	}
	if(st>end||st>r||end<l) return;
	if(l<=st&&end<=r)
	{
		seg2[cur]=min(val,seg2[cur]);					    /* 7-change */
		if(st!=end)
		{
			lazy[2*cur]=min(val,lazy[2*cur]);                           /* 8-change */
			lazy[2*cur+1]=min(val,lazy[2*cur+1]);                         /* 9-change */
		}
		return;
	}
	ll mid=(st+end)>>1;
	updaterange(2*cur,st,mid,l,r,val);
	updaterange(2*cur+1,mid+1,end,l,r,val);
	seg2[cur]=min(seg2[2*cur],seg2[2*cur+1]);                  /* 10-change */
}
ll query2(ll cur,ll st,ll end,ll l,ll r)
{
	if(st>end||st>r||end<l) return hell;
	if(lazy[cur]!=0)
	{
		seg2[cur]=min(lazy[cur],seg2[cur]);                /* 11-change */
		if(st!=end)
		{
			lazy[2*cur]=min(lazy[cur],lazy[2*cur]);                    /* 12-change */
			lazy[2*cur+1]=min(lazy[cur],lazy[2*cur+1]);                  /* 13-change */
		}
		lazy[cur]=hell;
	}
	if(st>=l&&end<=r) return seg2[cur];
	ll mid=(st+end)>>1;
	ll ans1=query2(2*cur,st,mid,l,r);
	ll ans2=query2(2*cur+1,mid+1,end,l,r);
	return min(ans1,ans2);                                 /* 14-change */
}
int main()
{
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{	
		ll n,s,l;
		cin>>n>>s>>l;
		rep(i,0,n) cin>>a[i];
		build(1,0,n-1);
		build1(1,0,n-1);
		rep(i,1,n+1) ans[i]=hell;
		ans[0]=0;
		build2(1,0,n);
		int j=0;
		rep(i,0,n-l+1)
		{
			ll t=query2(1,0,n,i,i);
			while((j<n)&&(query1(1,0,n-1,i,j)-query(1,0,n-1,i,j)<=s)) j++;
			if(i+l<=j)
				updaterange(1,0,n,i+l,j,t+1);
		}
		 int t=query2(1,0,n,n,n);
		 if(t==hell)
		 	cout<<-1<<endl;
		 else cout<<t<<endl;
	}
	return 0;
}