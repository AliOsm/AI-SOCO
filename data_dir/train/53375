#include <iostream>

#include <cstring>

//#include <vector>

using namespace std;

#define SZ(a) int((a).size())

#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)

struct Pos {
   int row, col;
   Pos(int _row=0, int _col=0) : row(_row), col(_col) {}
};

int N;
char B[52][52];

char MOV[104][104];

int cov[52][52];

int npieces;
Pos pieces[2504];

bool is_compat(int dr, int dc) {
   REP(i, npieces) {
      int nr = pieces[i].row + dr,
          nc = pieces[i].col + dc;
      if (nr < 0 || nr >= N || nc < 0 || nc >= N) continue;
      if (B[nr][nc] == '.') return false;
   }
   return true;
}

bool solve() {
   REP(r, N) REP(c, N)
      if (B[r][c] == 'o')
         pieces[npieces++] = Pos(r, c);

   memset(cov, -1, sizeof(cov));

//   vector<Pos> moves;

   memset(MOV, '.', sizeof(MOV));
   MOV[N-1][N-1] = 'o';
   REP(r, 2*N-1)
      MOV[r][2*N-1] = 0;

   REP(r, N) REP(c, N)
      if (B[r][c] == 'x' && cov[r][c] < 0) {
         bool ok = false;
         REP(i, npieces) {
            int dr = r - pieces[i].row,
                dc = c - pieces[i].col;
            if (is_compat(dr, dc)) {
               cov[r][c] = i;
               ok = true;
            //   moves.push_back( Pos(dr, dc) );
               MOV[N-1 + dr][N-1 + dc] = 'x';
               break;
            }
         }
         if (!ok) return false;
      }
/*
   REP(j, SZ(moves))
      cerr << moves[j].row << ' ' << moves[j].col << endl;
*/

   return true;
}

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   cin >> N;
   REP(r, N)
      cin >> B[r];

   bool res = solve();
   if (res) {
      cout << "YES\n";
      REP(r, 2*N-1)
         cout << MOV[r] << "\n";
   }
   else
      cout << "NO\n";

   return 0;
}
