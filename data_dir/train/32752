#include<bits/stdc++.h>
using namespace std;
vector<int> gr[300010];
set<pair<int,int> > st;
bool visited[300010];
bool recStack[300010];
vector<int> tp;
int indeg[300010];

vector<int> bk[300010];
int mc[300010][26];

bool isCyclicUtil(int v)
{
    if(visited[v] == false)
    {
        visited[v] = true;
        recStack[v] = true;
 
        
        for(int i = 0; i < gr[v].size(); ++i)
        {
        	int u=gr[v][i];

            if ( !visited[u] && isCyclicUtil(u))
                return true;
            else if (recStack[u])
                return true;
        }
 
    }
    recStack[v] = false;
    return false;
}
 
bool isCyclic(int V)
{
    for(int i = 1; i <= V; i++)
    {
        visited[i] = false;
        recStack[i] = false;
    }
 
    for(int i = 1; i <= V; i++)
        if (isCyclicUtil(i))
            return true;
 
    return false;
}

void dfs(int v)
{
	visited[v]=true;

	for(int i=0;i<gr[v].size();i++)
	{
		int u=gr[v][i];

		if(visited[u]==false)
		{
			dfs(u);
		}
	}

	tp.push_back(v);
}

int main()
{
	int n,m;
	cin>>n>>m;

	string s;
	cin>>s;

	int x,y;



	for(int i=0;i<m;i++)
	{
		cin>>x>>y;

		if(x==y)  //self loop
		{
			cout<<-1;
			return 0;
		}

		if(st.find(make_pair(x,y))!=st.end())
		{
			//already present, so ignore
			continue;
		}

		if(st.find(make_pair(y,x))!=st.end())
		{
			//there is a loop
			cout<<-1;
			return 0;
		}

		gr[x].push_back(y);
		bk[y].push_back(x);
		indeg[y]++;
		st.insert(make_pair(x,y));
	}

	if(isCyclic(n))
	{
		cout<<-1;
		return 0;
	}

	for(int i=1;i<=n;i++)
	{
		visited[i]=false;
	}


int ans=0;
vector<int> tr;


  for(int i=0;i<26;i++)
  mc[0][i]=-1;

   for(int i=1;i<=n;i++)
   {
   	if(indeg[i]==0)
   	{
   		tr.push_back(i);

   		gr[0].push_back(i);
   		bk[i].push_back(0);
   	}
   }



			tp.clear();
			dfs(0);

			for(int j=tp.size()-2;j>=0;j--)
			{
				int u=tp[j];
				if(indeg[u]==0)
				{
					mc[u][s[u-1]-97]++;
					ans=max(ans,1);
				}
				else
				{
					for(int k=0;k<bk[u].size();k++)
					{
						int zz = bk[u][k];

						for(int yy=0;yy<26;yy++)
						{
							if(yy==(s[u-1]-97))
							{
								mc[u][yy] = max(mc[u][yy],mc[zz][yy]+1);
								ans=max(ans,mc[u][yy]);
							}
							else
							{
								mc[u][yy] = max(mc[u][yy],mc[zz][yy]);
								ans=max(ans,mc[u][yy]);
							}
						}
					}
				}
			}

	
	cout<<ans;
}