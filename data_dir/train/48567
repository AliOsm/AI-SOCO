//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC opatimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#define FINAL_OUT(x) {cout << (x) << '\n'; exit(0); }

int const maxn = 2005;
vector<int> gr[maxn];
int c[maxn];
int cnt[maxn];

void dfsst(const int v) {
    cnt[v] = 1;
    for (int ne : gr[v]) {
        dfsst(ne);
        cnt[v] += cnt[ne];
    }
}

int ans[maxn];
void dfs(vector<int>& have, int const v) {
    if (c[v] >= cnt[v])
        FINAL_OUT("NO");
    ans[v] = have[c[v]];
    have.erase(have.begin() + c[v]);
    for (int ne : gr[v])
        dfs(have, ne);
}

vector<int> check(const int v) {
    vector<int> res = {ans[v]};
    for (int ne : gr[v]) {
        auto nvec = check(ne);
        res.insert(res.end(), nvec.begin(), nvec.end());
    }
    int base = ans[v];
    if (count_if(begin(res), end(res), [base](const int x){return x < base;}) != c[v])
        FINAL_OUT("NO");
    return res;
}

int main() {
//    freopen("in.txt","r", stdin);
//    cout << fixed << setprecision(15);
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);


    int n;
    cin >> n;

    int start = 0;
    for (int i = 1; i <= n; ++i) {
        int par;
        cin >> par >> c[i];
        if (par)
            gr[par].push_back(i);
        else
            start = i;
    }

    dfsst(start);
    vector<int> idx(n);
    iota(begin(idx), end(idx), 1);
    dfs(idx, start);
    check(start);
    cout << "YES\n";
    for (int i = 1; i <= n; ++i)
        cout << ans[i] << " \n"[i == n];
}

