#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.1415926535897
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned

LL masks[61];

int gcd(int a, int b)
{
	if (b == 0)
		return a;
	return gcd(b, a%b);
}
vector<LL> all;
int N = 60;
int n;
pnt a[110];
int res;
int ans[110];
int b[110];

void r(int p, LL mask, int p1, int val)
{
	if ((p > 1) && (n - p1 > 60 - p))
		return;
	if (val >= res)
		return;
	if (p1 == n)
	{
		if (val < res)
		{
			res = val;
			FOR(i, 0, n)
				ans[a[i].second] = b[i];
		}
		return;
	}
	if (p == 60)
		return;
	if (mask + 1 == (1ll << N))
		return;
	r(p + 1, mask, p1, val);
	if (((mask >> p) & 1) == 0)
	{
		int last = n;
		if (p != 1)
			last = p1+1;
		int nval = val;
		FOR(i, p1, last)
		{
			b[i] = p;
			nval += ABS(b[i] - a[i].first);
			r(p + 1, mask | masks[p], i + 1, nval);
		}
	}
}

int main()
{
#ifdef Fcdkbear
	freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
	double beg = clock();
#endif

	FOR(i, 1, N)
	{
		FOR(j,1,N)
		if (gcd(i, j) > 1)
			masks[i] |= (1ll << j);
	}
	cin >> n;
	FOR(i, 0, n)
	{
		cin >> a[i].first;
		a[i].second = i;
	}
	sort(a, a + n);
	res = 1000000000;
	r(1, 1, 0, 0);
	FOR(i, 0, n)
	{
		if (i)
			printf(" ");
		printf("%d", ans[i]);
	}
	printf("\n");

#ifdef Fcdkbear
	double end = clock();
	fprintf(stderr, "*** Total time = %.3lf ***\n", (end - beg) / CLOCKS_PER_SEC);
#endif
	return 0;
}