#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>

using namespace std;

#define f first
#define s second
#define pb push_back
#define pp pop_back
#define mp make_pair
#define ll long long
#define ld long double
#define ull unsigned long long
#define PI pair < int, int > 

const int N = 1e6;
const int M = 123;
const ld Pi = acos(-1);
const ll Inf = 1e18;
const int inf = 1e9;
const int mod = 1000200013;
const ld eps = 1e-9;

void add(int &a, int b) {
  a += b;
  if (a >= mod) a -= mod;
}
int mult(int a, int b) {
  return 1ll * a * b % mod;
}
int sum(int a, int b) {
  add(a, b);
  return a;
}

string A, b[N];
int n, Sz, id[2][N], dp[2][N], cnt[11], c[11];

int Let(int pos, int i) {
  int ans = (pos <= b[i].size() ? b[i][pos - 1] : '0') - '0';
  return ans;
}

void Sort(int pos) {
  memset(cnt, 0, sizeof cnt);
  for (int i = 1;i <= n;i++) {
    cnt[Let(pos, i)]++;
  }
  for (int i = 0;i < 9;i++) {
    cnt[i + 1] += cnt[i];
  }
  for (int i = 1;i <= n;i++) {
    id[0][cnt[Let(pos, id[1][i])]--] = id[1][i];
  }
  reverse(id[0] + 1, id[0] + n + 1);
}

void Upd(int &a, int b) {
  a = max(a, b);
}
int main() {
  #ifdef wws
   freopen("in", "r", stdin);
   // freopen("in", "w", stdout);
  #endif 
  ios_base::sync_with_stdio(0);
  cin >> A;
  reverse(A.begin(), A.end());
  Sz = max(Sz, (int)A.size());
  cin >> n;
  for (int i = 1;i <= n;i++) {
    cin >> b[i];
    reverse(b[i].begin(), b[i].end());
    Sz = max(Sz, (int)b[i].size());
  }
  for (int i = 0;i < 10;i++) {
    cin >> c[i];
  }
  Sz++;
  for (int i = 0;i <= n;i++) {
    for (int j = 0;j < 2;j++) {
      dp[j][i] = -inf;
    }
    id[0][i] = i;
  }
  dp[0][0] = 0;
  for (int pos = 1;pos <= Sz;pos++) {
    for (int i = 0;i <= n;i++) {
      dp[1][i] = dp[0][i];
      id[1][i] = id[0][i];
      dp[0][i] = -inf;
    }
    memset(cnt, 0, sizeof cnt);
    for (int i = 1;i <= n;i++) {
      if (max((int)A.size(), (int)b[id[1][i]].size()) >= pos) {
        cnt[Let(pos, id[1][i])]++;
      }
    }
    for (int i = 0;i <= n;i++) {
      if (i > 0) {
        if (max((int)A.size(), (int)b[id[1][i]].size()) < pos) {
          cnt[1]++;
        } else {
          int now = Let(pos, id[1][i]);
          cnt[now + 1]++;
          cnt[now]--;
        }
      }
      if (dp[1][i] < 0) continue;
      int l = 0, r = 9;
      if (pos <= A.size()) {
        if (A[pos - 1] != '?') {
          l = r = A[pos - 1] - '0';
        } else {
          if (pos == A.size()) {
            l++;
          }
        }
      } else {
        r = 0;
      }
      for (int dig = l;dig <= r;dig++) {
        int cost = 0;
        int C = 0;
        for (int j = 0;j <= 10;j++) {
          if (dig + j > 9) {
            C += cnt[j];
          }
          cost += 1ll * cnt[j] * c[(j + dig) % 10];
        }
        Upd(dp[0][C], dp[1][i] + cost);
      }
    }
    Sort(pos);
  }
  cout << dp[0][0] << endl;
  return 0;
}