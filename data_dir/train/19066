#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cstring>
#include <string>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
#include <map>
#include <stack>
#include <complex>
#include <random>
#include <bitset>
using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;

struct query
{
    int ql, qr, k, idx;
};

const int MAXN = 300005;
int N, Q, SQRT;
int A[MAXN];
query q[MAXN];
int occ[MAXN];
int ans[MAXN];
random_device rd;
mt19937 mt(rd());

bool cmp(query a, query b)
{
    if (a.ql/SQRT == b.ql/SQRT)
        return a.qr < b.qr;
    return a.ql/SQRT < b.ql/SQRT;
}

int main()
{
    scanf("%d %d", &N, &Q);
    SQRT = sqrt(N);
    for (int i = 1; i <= N; i++)
        scanf("%d", &A[i]);

    for (int i = 0; i < Q; i++)
    {
        scanf("%d %d %d", &q[i].ql, &q[i].qr, &q[i].k);
        q[i].idx = i;
    }
        
    sort(q, q + Q, cmp);
    for (int i = 0, curl = 1, curr = 0; i < Q; i++)
    {
        while (curl < q[i].ql)
            occ[A[curl++]]--;
        while (curl > q[i].ql)
            occ[A[--curl]]++;
        while (curr < q[i].qr)
            occ[A[++curr]]++;
        while (curr > q[i].qr)
            occ[A[curr--]]--;

        int best = MAXN;
        for (int j = 0; j < 100; j++)
        {
            int idx = mt() % (q[i].qr - q[i].ql + 1) + q[i].ql;
            if (occ[A[idx]] > (q[i].qr - q[i].ql + 1)/q[i].k)
                best = min(best, A[idx]);
        }
        if (best == MAXN)
            ans[q[i].idx] = -1;
        else
            ans[q[i].idx] = best;
    }

    for (int i = 0; i < Q; i++)
        printf("%d\n", ans[i]);

    return 0;
}
