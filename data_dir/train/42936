#include <bits/stdc++.h>
#define int long long
using namespace std;
#define IOS ios::sync_with_stdio(false) , cin.tie(0) , cout.tie(0)
inline int in(){int32_t x ; scanf("%d",&x) ; return x ; }
inline long long lin(){long long x ; scanf("%lld",&x) ; return x ;}
const int maxn  = 2e5 + 10;
const int SQ = 317;
int sum , a[maxn] , suf[2][maxn];
pair<int,int> prelevel = {1,1};
vector<pair<int,int> > edges;
int nodes[maxn];
int deg[maxn];
int tot;
int32_t main()
{
    int n = in() , t = in() , k = in();
    for (int i = 1 ; i <= t ; i ++) a[i] = in() , sum += a[i] ;
    for (int i = t ; i >= 1 ; i --)
        suf[0][i] = max(0ll,a[i]-a[i-1]) + suf[0][i + 1] , suf[1][i] = a[i] - 1 * bool(i - 1) + suf[1][i + 1];
    if (sum - n + 1) return cout  << - 1 << endl , 0;
//    cout << suf[0][1] << " " << suf[1][1] << "\n";
    if (k > suf[1][1] || k < suf[0][1] ) return cout << -1 << endl , 0;
    int cur = 0;
    int nodes = 2;
    for (int i = 1 ; i <= t ; i ++)
    {
        // (a[i]-X) + cur + suf[0][i + 1] <= k && (a[i]-X) + cur + suf[1][i + 1] >= k
        // -X <= k - suf[0][i + 1] - cur - a[i] , -X >= k - suf[1][i + 1] - cur - a[i]
        int X = -1;
        for (int pt = bool(i-1) ; pt <= min(a[i],a[i-1]) ; pt ++){
            if (a[i]-pt + cur + suf[0][i + 1 ] <= k && a[i] - pt + cur + suf[1][i + 1] >= k){
                X = pt;
                break;
            }
        }
        assert(X + 1);
        for (int pt = prelevel.first ; pt <= prelevel.first+X-1 ; pt ++)
            edges.push_back({pt,nodes++}) , deg[pt] ++ , deg[nodes - 1] ++;
        for (int pt = 0 ; pt < a[i] - X ; pt ++)
            edges.push_back({prelevel.first,nodes++}) , deg[prelevel.first] ++ , deg[nodes - 1] ++;
//        cout << edges.size() << "\n";
        prelevel = {prelevel.second+1,prelevel.second+a[i]};
        cur += (a[i]-X);
    }
    for (int i = 2 ; i <= n ; i ++) tot += deg[i] == 1;
    assert(tot == k);
    cout << n << "\n";
    for (auto e : edges)
        cout << e.first << " " << e.second << "\n";
}