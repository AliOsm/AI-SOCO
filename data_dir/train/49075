#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
//#include <unordered_set>
//#include <unordered_map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
using namespace std;
#define MS0(I) memset(I, 0, sizeof(I));
#define MS1(I) memset(I, -1, sizeof(I));
#define rep(i, n) for(int i = 0; i < (n); ++i)
#define rep1(i, s, n) for(int i = (s); i < (n); ++i)
#define per1(i, a, b) for(int i = a; i >= b; --i)
#define DRI(A) int A; scanf("%d", &A);
#define DRII(A, B) int A, B; scanf("%d %d", &A, &B);
#define DRIII(A, B, C) int A, B, C; scanf("%d %d %d", &A, &B, &C);
#define DRL(A) long long A; scanf("%lld", &A);
#define DRLL(A, B) long long A, B; scanf("%lld %lld", &A, &B);
#define DRLLL(A, B, C) long long A, B, C; scanf("%lld %lld %lld", &A, &B, &C);
#define SZ(X) ((int)X.size() )
#define MP make_pair 
#define pb push_back
#define F first
#define S second
#define ALL(I) (I).begin(), (I).end()
typedef const void CV;
typedef long long LL;
typedef unsigned long long ULL;
typedef double DB;
typedef long double LDB;
typedef pair<int, int> PII; 
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;
const double eps = 1e-7;
//const double PI = acos(-1);
//////////////////////////////
const LL INFF = 1e18;
const int INF = 1e9;
const int mod = 1e9+7;
const int MAX = 2e5+7;
int a[MAX];
#define ls p<<1
#define rs p<<1|1
struct node{
  int l, r;
  int mid(){
    return (l + r) >> 1;
  }
  vector<int>st;
}sg[MAX<<2];
void pushup(int p){
  int p1 = 0, p2 = 0;
  rep1(i, sg[p].l, sg[p].r + 1){
    if(p1 == SZ(sg[ls].st)) sg[p].st.pb(sg[rs].st[p2++]);
    else if(p2 == SZ(sg[rs].st)) sg[p].st.pb(sg[ls].st[p1++]);
    else if(sg[ls].st[p1] < sg[rs].st[p2]) sg[p].st.pb(sg[ls].st[p1++]);
    else sg[p].st.pb(sg[rs].st[p2++]);
  }
  return ;
}
void bd(int l, int r, int p){
  sg[p].l = l; sg[p].r = r;
  if(l == r){
    sg[p].st.pb(a[l]); return ;
  }
  int mid = (l + r) >> 1;
  bd(l, mid, ls); bd(mid + 1, r, rs);
  pushup(p);
  return ;
}
int qy(int l, int r, int v, int p){
  if(l > r) return 0;
  if(sg[p].l == l && sg[p].r == r){
    return upper_bound(ALL(sg[p].st), v) - sg[p].st.begin();
  }
  int mid = sg[p].mid();
  if(r <= mid) return qy(l, r, v, ls);
  else if(l > mid) return qy(l, r, v, rs);
  return qy(l, mid, v, ls) + qy(mid+1, r, v, rs);
}
inline LL val(LL v){
  return v*(v-1)/2;
}
int main(void){
  DRII(n, q);
  rep1(i, 1, n+1) scanf("%d", a + i);
  bd(1, n, 1);
  while(q--){
    DRLL(lx, ly); DRLL(rx, ry);
    LL ans = val(n) - val(lx-1) - val(n-rx);
    ans -= val(qy(1, n, n, 1) - qy(1, n, ry, 1));
    ans -= val(qy(1, n, ly-1, 1));
    ans += val(qy(1, lx-1, n, 1) - qy(1, lx-1, ry, 1));
    ans += val(qy(rx+1, n, n, 1) - qy(rx+1, n, ry, 1));
    ans += val(qy(1, lx-1, ly-1, 1));
    ans += val(qy(rx+1, n, ly-1, 1));
    printf("%lld\n", ans);
  }
  return 0;
}
