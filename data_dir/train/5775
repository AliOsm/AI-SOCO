#include <bits/stdc++.h>
#define mk make_pair
#define fs first
#define sc second
using namespace std;
typedef long long ll;
typedef long double ld;

#define MAX 500010
#define DEPTH 500010

vector <int> a[MAX];

int sz[MAX], big[MAX], dpth[MAX];
void sz_dfs(int x, int papa){
  if(papa==-1)
    dpth[x]=1;
  else
    dpth[x]=dpth[papa]+1;
  sz[x]=1;
  int nxt, big_sz=-1;
  for(int i=0; i<a[x].size(); ++i){
    nxt=a[x][i];
    if(nxt!=papa){
      sz_dfs(nxt, x);
      sz[x]+=sz[nxt];
      if(sz[nxt]>big_sz){
        big[x]=nxt;
        big_sz=sz[nxt];
      }
    }
  }
}
bool cnt[DEPTH][26];
int cnt2[DEPTH], ans[MAX], l[MAX];
void add(int x, int papa, int num){
  if(cnt[dpth[x]][l[x]])
    --cnt2[dpth[x]];
  cnt[dpth[x]][l[x]]=!cnt[dpth[x]][l[x]];
  if(cnt[dpth[x]][l[x]])
    ++cnt2[dpth[x]];
  int nxt;
  for(int i=0; i<a[x].size(); ++i){
    nxt=a[x][i];
    if(nxt!=papa){
      add(nxt, x, num);
    }
  }
}
vector<int> qr[MAX], qr2[MAX];
int dfs(int x, int papa, bool keep){
  int nxt;
  for(int i=0; i<a[x].size(); ++i){
    nxt=a[x][i];
    if(nxt==papa)
      continue;
    if(nxt!=big[x])
      dfs(nxt, x, 0);
  }
  for(int i=0; i<a[x].size(); ++i){
    nxt=a[x][i];
    if(nxt==papa)
      continue;
    if(nxt==big[x])
      dfs(nxt, x, 1);
  }
  for(int i=0; i<a[x].size(); ++i){
    nxt=a[x][i];
    if(nxt==papa)
      continue;
    if(nxt!=big[x])
      add(nxt, x, 1);
  }
  if(cnt[dpth[x]][l[x]])
    --cnt2[dpth[x]];
  cnt[dpth[x]][l[x]]=!cnt[dpth[x]][l[x]];
  if(cnt[dpth[x]][l[x]])
    ++cnt2[dpth[x]];

  ///// here we do queries.
  for(int i=0; i<qr[x].size(); ++i){
    ans[qr2[x][i]]=(cnt2[qr[x][i]]<=1);
  }

  if(!keep){
    add(x,papa,1);
  }
}
char s[MAX];
int main(){
  int n, x, y, m;
  cin>>n>>m;
  for(int i=2; i<=n; ++i){
    scanf("%d",&x);
    a[x].push_back(i);
  }
  scanf("%s",s);
  for(int i=1; i<=n; ++i){
    l[i]=s[i-1]-'a';
  }
  for(int i=0; i<m; ++i){
    scanf("%d%d",&x,&y);
    qr[x].push_back(y);
    qr2[x].push_back(i);
  }
  sz_dfs(1,-1);
  dfs(1,-1,0);
  for(int i=0; i<m; ++i){
    if(ans[i])
      printf("Yes\n");
    else
      printf("No\n");
  }
  return 0;
}
