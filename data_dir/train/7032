#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int N = 2e5 + 5;
const ll INF = 1e9 + 5;
const ll mod = 1e9 + 7;
const int tx[] = {1, -1, 0, 0}, ty[] = {0, 0, 1, -1};

int n, m, ct, ans;
map <string, int> mp;
int tp[N], id[N];
int g[45][45];
string s;
vector <int> vec;
bool used[45];
int rs[(1 << 21)];

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m;
    for (int i = 1; i <= n; i++) {
        cin >> tp[i];
        if (tp[i] == 2) {
            cin >> s;
            if (!mp.count(s)) {
                mp[s] = ++ct;
            }
            id[i] = mp[s];
        }
    }
    for (int i = 1; i <= n; i++) {
        if (tp[i] == 1) {
            for (int j = 0; j < vec.size(); j++) {
                for (int k = j + 1; k < vec.size(); k++) {
                    g[vec[j]][vec[k]] = 1;
                    g[vec[k]][vec[j]] = 1;
                }
            }
            vec.clear();
            memset(used, 0, sizeof(used));
        } else {
            if (!used[id[i]]) {
                vec.push_back(id[i]);
                used[id[i]] = 1;
            }
        }
    }
    for (int j = 0; j < vec.size(); j++) {
        for (int k = j + 1; k < vec.size(); k++) {
            g[vec[j]][vec[k]] = 1;
            g[vec[k]][vec[j]] = 1;
        }
    }
    vec.clear();
    int nn = m / 2;
    for (int i = 0; i < (1 << nn); i++) {
        vec.clear();
        for (int j = 0; j < nn; ++j) {
            if ((i >> j) & 1) {
                vec.push_back(j + 1);
            }
        }
        bool us = 0;
        for (int j = 0; j < vec.size(); j++) {
            for (int k = j + 1; k < vec.size(); k++) {
                if (g[vec[j]][vec[k]]) {
                    us = 1;
                    break;
                }
            }
        }
        if (!us) {
            rs[i] = vec.size();
        }
    }
    for (int mask = 0; mask < (1 << nn); mask++) {
        for (int j = 0; j < nn; j++) {
            rs[mask | (1 << j)] = max(rs[mask], rs[mask | (1 << j)]);
        }
    }
    int p = m - nn;
    for (int mask = 0; mask < (1 << (p)); mask++) {
        vec.clear();
        for (int i = 0; i < p; i++) {
            if ((mask >> i) & 1) {
                vec.push_back(i + nn + 1);
            }
        }
        bool us = 0;
        for (int i = 0; i < vec.size(); i++) {
            for (int j = i + 1; j < vec.size(); j++) {
                if (g[vec[i]][vec[j]]) {
                    us = 1;
                    break;
                }
            }
        }
        if (!us) {
            int msk = 0;
            for (int i = 0; i < vec.size(); i++) {
                for (int j = 1; j <= nn; j++) {
                    if (g[vec[i]][j]) {
                        msk |= (1 << (j - 1));
                    }
                }
            }
            msk ^= ((1 << nn) - 1);
            ans = max(ans, (int)vec.size() + rs[msk]);
        }
    }
    cout << ans;
}
