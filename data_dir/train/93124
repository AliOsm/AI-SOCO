#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <bitset>
#include <complex>
#include <unordered_map>

//#pragma comment(linker, "/STACK:512000000")

using namespace std;

#define pb emplace_back
#define mp make_pair
#define all(a) (a).begin(), (a).end()
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int infi = 1e9 + 7;
const ll infl = (ll)1e18 + (ll)7;

const ll mod = 998244353;

int dsu[100500];
int dp[100500];
int find(int v) {
    if (dsu[v] == v)
        return v;
    return dsu[v] = find(dsu[v]);
}
void merge(int a, int b) {
    a = find(a), b = find(b);
    if (a == b)
        return;
    dsu[b] = a;
    dp[a] += dp[b];
}

int32_t main() {
    cin.sync_with_stdio(false);
    cin.tie(0);
    //srand(time(NULL));
   // freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    //freopen("customs.in", "r", stdin); freopen("customs.out", "w", stdout);
    int n, m, k;
    cin >> n >> m >> k;
    forn(i, n)
        dsu[i] = i;
    forn(i, k) {
        int a;
        cin >> a;
        --a;
        dp[a] = 1;
    }
    int ans = 0;
    vector<pair<int, pii> > edges;
    forn(qwe, m) {
        int u, v, w;
        cin >> u >> v >> w;
        --u, --v;
        edges.push_back({ w, {u, v} });
    }
    sort(all(edges));
    for (auto& e : edges) {
        int u = e.second.first, v = e.second.second, w = e.first;
        u = find(u), v = find(v);
        merge(u, v);
        if (max(dp[u], dp[v]) == k) {
            ans = w;
            break;
        }
    }
    forn(i, k)
        cout << ans << ' ';


    return 0;
}