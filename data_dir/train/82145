#include <bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define ins insert
#define mp make_pair
#define fo(i, n1, n, x) for(int i = n1; i <= n; i += x)
#define foo(i, n, n1, x) for(int i = n; i >= n1; i -= x)
#define bit __builtin_popcount
#define md (l + ((r - l) / 2))
#define all(x) x.begin(),x.end()
#define ll long long
#define ld long double
#define eb emplace_back
#define ub upper_bound
#define lb lower_bound
#define ios ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define file(s) if (fopen(s".in", "r")) freopen(s".in", "r", stdin), freopen(s".out", "w", stdout)

using namespace std;

const int N = 2e5 + 11, mod = 1e9 + 7;
const int INF1 = 2e9 + 11;
const ll INF2 = 2e18 + 11;
const int base = 500;
const int P = 31;
const int dx[] = {1, -1, 0, 0, 1, 1, -1, -1};
const int dy[] = {0, 0, 1, -1, 1, -1, 1, -1};
const double EPS = 1e-12;
const double PI = acos(-1.0);

#define int ll

int n, a[N], ans = -INF2, sub[N];
vector < int > g[N];
inline int dfs(int v, int pr = -1) {
    sub[v] = a[v];
    int mx = -INF2;
    for (auto & to : g[v]) {
        if (to != pr) {
            ll val = dfs(to, v);
            sub[v] += sub[to];
            if (mx != -INF2) ans = max(ans, mx + val);
            mx = max(mx, val);
        }
    }
    mx = max(mx, sub[v]);
    return mx;
}
main() {
    file("queue");
    ios;
    cin >> n;
    fo(i, 1, n, 1) cin >> a[i];
    fo(i, 1, n - 1, 1) {
        int u, v;
        cin >> u >> v;
        g[u].eb(v);
        g[v].eb(u);
    }
    dfs(1);
    if (ans == -INF2) cout << "Impossible";
    else cout << ans;
    return 0;
}
