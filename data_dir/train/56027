#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <ctime>
#include <map>
#include <cstring>
#include <iterator>
#include <queue>
#include <assert.h>
#include <bitset>
#include <complex>
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include<random>

//#pragma comment(linker, "/STACK:512000000")

using namespace std;

#define pb emplace_back
#define mp make_pair
#define all(a) (a).begin(), (a).end()
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define forab(i, a, b) for (int i = (a); i < (b); ++i)

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<double, double> pdd;
const int infi = 1e9 + 7;
const ll infl = (ll)1e18 + (ll)7;

int pos[200500];
int ar[2][200500];

int32_t main() {
    cin.sync_with_stdio(false);
    cin.tie(0);
    //srand(time(NULL));
    //freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    int n;
    cin >> n;
    forn(i, n)
        cin >> ar[0][i];
    forn(i, n)
        cin >> ar[1][i];
    forn(i, n) {
        pos[ar[0][i]] = -1;
        pos[ar[1][i]] = i;
    }
    int skip = 0;
    for (int i = 1; i <= n; ++i) {
        if (pos[i] == -1)
            continue;
        int a = pos[i] + 1 - i + 1;
        skip = max(a, skip);
    }
    int ans1 = skip + n;
    int ans2 = infi;
    int flag = 1;
    if (pos[1] != -1) {
        for (int i = pos[1], j = 1; i < n; ++i, ++j) {
            if (ar[1][i] != j)
                flag = 0;
        }
    } else {
        flag = 0;
    }
    if (flag) {
        for (int i = ar[1][n - 1] + 1; i <= n; ++i) {
            int j = i - ar[1][n - 1] - 2;
            if (pos[i] > j)
                flag = 0;
        }
    }
    if (flag)
        ans2 = n - ar[1][n - 1];
    cout << min(ans1, ans2) << '\n';

    return 0;
}