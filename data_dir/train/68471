#include<bits/stdc++.h>
using namespace std;

const int N = 1e5 + 10, inf = 1e9;
int n, m, k, x[N], dis[N], s, t;
vector<int> adj[N];
bool mark[N];

void bfs() {
    queue<int> q;
    for (int i = 0; i < k; i++) {
        q.push(x[i]);
        dis[x[i]] = 0;
    }
    while (q.size()) {
        int u = q.front();
        q.pop();
        for (int i = 0; i < adj[u].size(); i++) {
            int v = adj[u][i];
            if (dis[v] == inf) {
                dis[v] = dis[u] + 1;
                q.push(v);
            }
        }
    }
    return;
}

void dfs(int root, int len) {
    mark[root] = true;
    for (int i = 0; i < adj[root].size(); i++) {
        int u = adj[root][i];
        if (!mark[u] && dis[root] + dis[u] + 1 <= len)
            dfs(u, len);
    }
}

int main() {
    int u, v;
    cin >> n >> m >> k;
    for (int i = 0; i < k; i++) {
        cin >> x[i];
        x[i]--;
    }
    for (int i = 0; i < m; i++) {
        cin >> u >> v;
        adj[--u].push_back(--v);
        adj[v].push_back(u);
    }
    cin >> s >> t;
    s--;
    t--;
    bool flag = false;
    for (int i = 0; i < k; i++)
        if (x[i] == t)
            flag = true;
    if (!flag) {
        x[k] = t;
        k++;
    }
    int st = 1, en = n, ans = -1;
    fill(dis, dis + n, inf);
    bfs();
    while (st <= en) {
        int mid = (st + en) / 2;
        fill(mark, mark + n, false);
        dfs(s, mid);
        if (mark[t]) {
            ans = mid;
            en = mid - 1;
        }
        else
            st = mid + 1;
    }
    cout << ans << "\n";
    return 0;
}