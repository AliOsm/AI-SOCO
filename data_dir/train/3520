#include <cstdio>
#include <algorithm>
#include <vector>

int const N = 500500;
int const A = 27;

int tin[N], tout[N];
std::vector<int> order[N];
std::vector<int> pref[N];
int timer;
std::vector<int> e[N];
char letter[N];

void dfs(int v, int d) {
	tin[v] = ++timer;
	order[d].push_back(v);
	pref[d].push_back(pref[d].back());
	pref[d].back() ^= 1 << (letter[v] - 'a');
	for (int to : e[v]) {
		dfs(to, d + 1);
	}
	tout[v] = ++timer;
}

int main() {
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 1; i < n; ++i) {
		int p;
		scanf("%d", &p);
		--p;
		e[p].push_back(i);
	}
	scanf("%s", letter);
	for (int i = 1; i <= n; ++i) {
		pref[i].push_back(0);
	}
	dfs(0, 1);
	auto compIn = [](int a, int b) {
		return tin[a] < tin[b];
	};
	auto compOut = [](int a, int b) {
		return tout[a] < tout[b];	
	};
	for (int it = 0; it < m; ++it) {
		int ve, h;
		scanf("%d%d", &ve, &h);
		--ve;
		int from = std::lower_bound(order[h].begin(), order[h].end(), ve, compIn) - order[h].begin();
		int to = std::upper_bound(order[h].begin(), order[h].end(), ve, compOut) - order[h].begin();
		int cnt = 0;
		if (to > from) {
			cnt = __builtin_popcount(pref[h][to] ^ pref[h][from]);
		}
		puts(cnt <= 1 ? "Yes" : "No");
	}
}