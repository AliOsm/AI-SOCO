//██████╗ ██╗   ██╗██╗      ██████╗ ███████╗
//██╔══██╗██║   ██║██║      ██╔══██╗██╔════╝
//██████╔╝██║   ██║██║█████╗██║  ██║█████╗
//██╔══██╗██║   ██║██║╚════╝██║  ██║██╔══╝
//██║  ██║╚██████╔╝██║      ██████╔╝███████╗
//╚═╝  ╚═╝ ╚═════╝ ╚═╝      ╚═════╝ ╚══════╝
#include <bits/stdc++.h>

// #pragma GCC target("sse,sse2,sse3,ssse3,sse4")
#pragma GCC optimize("Ofast")
// #pragma GCC optimize("unroll-loops")
using namespace std;

#define fst first
#define snd second
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define eb emplace_back

#define all(v) (v).begin(), (v).end()
#define sz(v) ((int)(v).size())
#define sqr(x) ((x) * (x))

typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;
typedef vector<int> vi;

#define next ajksdslk
#define prev aklsfjk

mt19937_64 mt_rand(chrono::system_clock::now().time_since_epoch().count());

template<typename T1, typename T2> inline bool upmax(T1& a, T2 b) { return (a < b ? (a = b, true) : false); }
template<typename T1, typename T2> inline bool upmin(T1& a, T2 b) { return (b < a ? (a = b, true) : false); }

const int maxn = (int) 3e5 + 100;
const int maxlog = 21;
const int base = 998'244'853;
const ld eps = (ld) 1e-9;
const ld PI = acos(-1.);
//const int pp = 41;
const int inf = 2e9;
const ll llinf = 1e18;

template<typename T>
void amin(T & a, T b) {
  if (b == -1) return;
  if (a == -1) a = b;
  else a = min(a, b);
}

struct tree {
  vector<int> kek;
  int ans;

  tree() : kek(10, -1) {}

  void bld(int x) {
    int cnt = 0;
    int o = x;
    kek = vector<int>(10, -1);
    while (x) {
      int c = x % 10;
      if (c != 0) {
        kek[cnt] = o;
      }
      x /= 10;
      cnt ++;
    }
    ans = -1;
  }

  void upd(tree& l, tree& r) {
    kek = vector<int>(10, -1);
    ans = -1;
    amin(ans, l.ans);
    amin(ans, r.ans);
    for (int i = 0; i < 10; i ++) {
      if (l.kek[i] != -1 && r.kek[i] != -1) {
        amin(ans, l.kek[i] + r.kek[i]);
      }
      amin(kek[i], l.kek[i]);
      amin(kek[i], r.kek[i]);
    }
  }
};
int n, m;
tree t[4 * maxn];

int a[maxn];

void bld(int v, int l, int r) {
  if (l == r) {
    t[v].bld(a[l]);
  } else {
    int m = (l + r) >> 1;
    bld(v + v, l, m);
    bld(v + v + 1,m + 1, r);
    t[v].upd(t[v + v], t[v + v  +1]);
  }
}

void upd(int v, int l, int r, int pos, int val) {
  if (l == r) {
    t[v].bld(val);
  } else {
    int m = (l + r) >> 1;
    if (pos <= m) upd(v + v, l, m, pos, val);
    else upd(v + v + 1,m + 1, r, pos, val);
    t[v].upd(t[v + v], t[v + v + 1]);
  }
}

tree getans(int v, int tl, int tr, int l, int r) {
  if (tl == l && tr == r) {
    return t[v];
  }
  int m = (tl + tr) >> 1;
  if (r <= m) return getans(v + v, tl, m, l, r);
  if (l > m) return getans(v + v+1, m + 1, tr, l, r);
  tree res;
  tree le = getans(v + v, tl, m, l, m);
  tree ri = getans(v + v + 1, m + 1, tr, m + 1, r);
  res.upd(le, ri);
  return res;
}


int main() {
  // freopen("input.txt", "r", stdin);
  ios_base::sync_with_stdio(0);
  cin.tie(nullptr);

  cin >> n >> m;
  for (int i = 1; i <= n; i ++) {
    cin >> a[i];
  }
  bld(1, 1, n);
  while (m --) {
    int x, y, z;
    cin >> x >> y >> z;
    if (x == 1) {
      upd(1, 1, n, y,  z);
    } else {
      cout << getans(1, 1, n, y, z).ans << '\n';
    }
  }

  return 0;
}




