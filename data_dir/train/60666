#define __USE_MINGW_ANSI_STDIO 0
#include <bits/stdc++.h>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl '\n'
#define ff first
#define ss second
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define int long long
#define all(a) a.begin(), a.end()
#define inf (1LL<<61)
#define ull unsigned long long
#define debug1(x) cerr << #x << ": " << x <<'\n'
#define debug2(x, y) cerr << #x << ": " << x << '\t' << #y << ": " << y <<'\n'
#define debug3(x, y, z) cerr << #x << ": " << x << '\t' << #y << ": " << y << '\t' << #z << ": " << z <<'\n'
using namespace std;
int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
int gcd(int x,int y)
{
    if(y==0)
        return x;
    else
        return gcd(y,x%y);
}
int expo(int n,int m,int p)   //modULAR EXPONENTIATION
{
    int r=1;
    n=n%p;
    while(m>0)
    {
        if(m%2)
            r=(r*n)%p;
        n=(n*n)%p;
        m=m/2;
    }
    return r%p;
}
bool isPrime(int n)
{
    // Corner cases
    if (n <= 1)  return false;
    if (n <= 3)  return true;
 
    // This is checked so that we can skip 
    // middle five numbers in below loop
    if (n%2 == 0 || n%3 == 0) return false;
 
    for (int i=5; i*i<=n; i=i+6)
        if (n%i == 0 || n%(i+2) == 0)
           return false;
 
    return true;
}
int x[3],y[3];
int area()
{
	int a=0;
	a=abs((x[0]*y[1]+x[1]*y[2])-(x[1]*y[0]+x[2]*y[1]));
	a=abs(a);
	a=a/2;
	
	return a;
}
bool check()
{
	ull a=((x[0]-x[1])*(x[0]-x[1])+(y[0]-y[1])*(y[0]-y[1]));
	ull b=((x[2]-x[1])*(x[2]-x[1])+(y[2]-y[1])*(y[2]-y[1]));
	ull c=((x[0]-x[2])*(x[0]-x[2])+(y[0]-y[2])*(y[0]-y[2]));
	if(a+b==c||b+c==a||a+c==b)
		return true;
	return false;
}
int32_t main()
{
   IOS;
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin); 
   freopen("output.txt","w",stdout);
   #endif
   /********************* Code starts here ***********************/
   for(int i=0;i<3;i++)
   {
   	cin>>x[i]>>y[i];
   }
   
   set<int>X,Y;
   for(int i=0;i<3;i++)
   {
   	X.insert(x[i]);
   	Y.insert(y[i]);
   }
   if(X.size()==1||Y.size()==1)
   {
   	cout<<1<<endl;
   	return 0;
   }
   if(check())
   {
   	cout<<2<<endl;
   	return 0;
   }
   if(X.size()==2)
   {
   	for(int i=0;i<3;i++)
   	{
   		for(int j=0;j<3;j++)
   		{
   			if(i!=j)
   			{
   				if(x[i]==x[j])
   				{
   					for(int k=0;k<3;k++)
   					{
   						if(i!=k&&j!=k)
   						{
   							if(y[k]<=max(y[i],y[j])&&y[k]>=min(y[i],y[j]))
   								;
   							else
   							{
   								cout<<2<<endl;
   								return 0;
   							}
   						}
   					}
   				}
   			}
   		}
   	}
   }
   if(Y.size()==2)
   {
   	for(int i=0;i<3;i++)
   	{
   		for(int j=0;j<3;j++)
   		{
   			if(i!=j)
   			{
   				if(y[i]==y[j])
   				{
   					for(int k=0;k<3;k++)
   					{
   						if(i!=k&&j!=k)
   						{
   							if(x[k]<=max(x[i],x[j])&&x[k]>=min(x[i],x[j]))
   								;
   							else
   							{
   								cout<<2<<endl;
   								return 0;
   							}
   						}
   					}
   				}
   			}
   		}
   	}
   }
   cout<<3<<endl;
}