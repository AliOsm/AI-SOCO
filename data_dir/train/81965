#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

vector<int> adj[200005];
int color[200005];
int dp[200005];
int ans[200005];

void dfs(int node,int prev){
    for(int i:adj[node]){
        if(prev == i)continue;
        dfs(i,node);
        dp[node] += max(dp[i],0);
    }
}

void dfss(int node,int prev,int val){
    ans[node] = dp[node] + max(val,0);
    for(int i:adj[node]){
        if(prev == i)continue;
        int vall = ans[node] - max(dp[i],0);
        dfss(i,node,vall);
    }
}

int main()
{
    ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
    int n;
    cin >> n;
    for(int i=0;i<n;i++){
        cin>>color[i];
        if(color[i]==1)dp[i] = 1;
        else dp[i] = -1;
    }
    for(int i=0;i<n-1;i++){
        int u,v;
        cin >> u >> v;
        u--;
        v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(0,0);
    ans[0]=dp[0];
    for(int i:adj[0]){
        dfss(i,0,ans[0]-max(dp[i],0));
    }
    for(int i=0;i<n;i++){
        cout<<ans[i]<<" ";
    }


    return 0;
}
