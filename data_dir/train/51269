#include <bits/stdc++.h>

#define SZ(x) (((int)x.size()))

typedef long long ll;
typedef long double ld;

using namespace std;

const int maxn = 200*1000+10;
bool bad;
int n, k, l, sk, locl[maxn], locr[maxn], cl = 1, cr = 1, fl[maxn], fr[maxn];
string s;
vector<int> tdr, tdl;
vector<pair<int, int>> vec;
unordered_set<int> sr, sl;

int nn(int x)
{
	return (x + 1) % n;
}

int pn(int x)
{
	return (x + n - 1) % n;
}

int main()
{
	cin >> n >> k >> s;
	sk = k;
	for (int i = 1; i < n; i++)
	{
		if (s[i] == s[i - 1])
		{
			bad = 1;
			break;
		}
	}
	if (!bad && s[0] != s[n - 1])
	{
		if (k & 1)
		{
			for (auto w : s)
			{
				if (w == 'B')
					cout << 'W';
				else
					cout << 'B';
			}
		}
		else
			cout << s;
		return 0;
	}
	for (int i = 1; i < n; i++)
	{
		if (s[i] != s[i - 1])
		{
			vec.push_back({i - l, l});
			l = i;
		}
	}
	vec.push_back({n - l, l});
	for (int i = 0; i < SZ(vec); i++)
	{
		if (vec[i].first > 1)
			continue;
		if (s[vec[i].second] != s[nn(vec[i].second)] && s[vec[i].second] != s[pn(vec[i].second)] && s[pn(vec[i].second)] == s[pn(pn(vec[i].second))])
		{
			locr[cr] = vec[i].second;
			fr[vec[i].second] = cr;
			sr.insert(cr++);
		}
		if (s[vec[i].second] != s[pn(vec[i].second)] && s[vec[i].second] != s[nn(vec[i].second)] && s[nn(vec[i].second)] == s[nn(nn(vec[i].second))])
		{
			locl[cl] = vec[i].second;
			fl[vec[i].second] = cl;
			sl.insert(cl++);
		}
	}
	while (!sl.empty() || !sr.empty())
	{
		tdl.clear();
		tdr.clear();
		for (auto w : sr)
		{
			s[locr[w]] = s[pn(locr[w])];
			if (fl[locr[w]] > 0)
			{
				tdr.push_back(w);
				tdl.push_back(fl[locr[w]]);
				fl[locr[w]] = 0;
				fr[locr[w]] = 0;
			}
			else
			{
				fr[nn(locr[w])] = w;
				fr[locr[w]] = 0;
				locr[w] = nn(locr[w]);
			}
		}
		for (auto w : tdr)
			sr.erase(w);
		for (auto w : tdl)
			sl.erase(w);
		tdl.clear();
		tdr.clear();
		for (auto w : sl)
		{
			s[locl[w]] = s[nn(locl[w])];
			if (fr[locl[w]] > 0)
			{
				tdl.push_back(w);
				tdr.push_back(fr[locl[w]]);
				fr[locl[w]] = 0;
				fl[locl[w]] = 0;
			}
			else
			{
				fl[pn(locl[w])] = w;
				fl[locl[w]] = 0;
				locl[w] = pn(locl[w]);
			}
		}
		for (auto w : tdl)
			sl.erase(w);
		for (auto w : tdr)
			sr.erase(w);
		k--;
		if (k == 0)
			break;
	}
	if (sk & 1)
	{
		for (auto w : sr)
		{
			for (int i = locr[w]; ; i = nn(i))
			{
				if (s[i] == 'B')
					s[i] = 'W';
				else
					s[i] = 'B';
				if (fl[i] > 0)
					break;
			}
		}
	}
	cout << s;
	return 0;
}
