/*#include <bits/stdc++.h>
using namespace std;
const long long M = 1000000007 , N = 1001;
int r1,r2,r3,c1,c2,c3,c4,n,polycoff[N][N],group2[N][N];
string s1,s2,s3;
void fix(int &a){
	if(a >= M){
		a -= M;
	}else if(a < 0){
		a += M;
	}
}
int main(){
	cin >> n >> r1 >> s1 >> r2 >> s2 >> r3 >> s3;
	for(int i = 0 ; i < n ; i += 1){
		if(s1[i] != s2[i] && s2[i] == s3[i]){
			c1 += 1;
		}else if(s1[i] != s2[i] && s1[i] == s3[i]){
			c2 += 1;
		}else if(s1[i] == s2[i] && s2[i] != s3[i]){
			c3 += 1;
		}else{
			c4 += 1;
		}
	}
	int rr1 = r1-c2-c3-c4 , rr2 = r2-c1-c3-c4 , rr3 = r3-c1-c2-c4;
	for(int i = 0 ; i <= n ; i += 1){
		polycoff[i][0] = polycoff[i][i] = 1;
		for(int j = 1 ; j < i ; j += 1){
			polycoff[i][j] = polycoff[i-1][j] + polycoff[i-1][j-1];
			fix(polycoff[i][j]);
		}
	}
	for(int i = 0 ; i <= c3 ; i += 1){
		for(int j = 0 ; j <= c4 ; j += 1){
			group2[i+j][i-j+c4] = (long long)polycoff[c3][i] * polycoff[c4][j]%M;
		}
	}
	for(int i = 0 ; i <= c3+c4 ; i += 1){
		for(int j = -c4 ; j <= c3 ; j += 1){
			int jj = j+c4;
			group2[i][jj] += (i > 0 ? group2[i-1][jj] : 0) + (jj > 0 ? group2[i][jj-1] : 0);
			fix(group2[i][jj]);
			if(i > 0 && jj > 0){
				group2[i][jj] -= group2[i-1][jj-1];
			}
			fix(group2[i][jj]);
		}
	}
	long long ans = 0;
	for(int i = 0 ; i <= c1 ; i += 1){
		for(int j = 0 ; j <= c2 ; j += 1){
			int rrr1 = rr1 - i + j,rrr2 = rr2 + i - j , rrr3 = rr3 + i + j , rrr4 = max(-rrr1,-rrr2);
			if(rrr4 > c3+c4 || rrr3+c4 < 0){
				continue;
			}
			rrr3 = min(rrr3,c3);
			ans += (polycoff[c1][i]*polycoff[c2][j])*(group2[rrr4][c3+c4]-(rrr3+c4 > 0 ? group2[rrr4][rrr3+c4-1] : 0));
			ans %= M;
		}
	}
	cout << (ans+M)%M << endl;
}
3
1 000
1 100
0 111
*/

#include <bits/stdc++.h>
using namespace std;
vector<vector<int>> graph;
vector<int> v1,v2,ans;
int n;

void dfs(int curr , int par , int p1 , int p2 , int cnt){
	if(cnt % 2 == 1){
		v1[curr] += p1;
		v1[curr] %= 2;
	}else{
		v1[curr] += p2;
		v1[curr] %= 2;
	}
	if(v1[curr] != v2[curr]){
		ans.push_back(curr);
		if(cnt % 2 == 1){
			p1 += 1;
		}else{
			p2 += 1;
		}
	}
	for(int i : graph[curr]){
		if(i != par){
			dfs(i,curr,p1,p2,cnt+1);
		}
	}
}

int main(){
	cin >> n;
	graph.resize(n+1);
	v1.resize(n+1);
	v2.resize(n+1);
	for(int i = 0 ; i < n-1 ; i += 1){
		int a,b;
		cin >> a >> b;
		graph[a].push_back(b);
		graph[b].push_back(a);
	}
	for(int i = 1 ; i <= n ; i += 1){
		cin >> v1[i];
	}
	for(int i = 1 ; i <= n ; i += 1){
		cin >> v2[i];
	}
	dfs(1,-1,0,0,1);
	cout << ans.size() << endl;
	for(int i : ans){
		cout << i << " ";
	}cout << endl;
}