

#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <assert.h>
#include <queue>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <random>
#include <cmath>
#include <chrono>
#include <bitset>

#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()

//#define int long long
using namespace std;

const int INF = 2e9;
const int MOD = 1e9 + 7;
const int MB = 50;

vector<vector<int>> a;
pair<int, int> res;
int n, m;

bool check(int mid) {
	vector<int> b(1 << m, -1);
	for (int i = 0; i < n; i++) {
		int mask = 0;
		for (int j = 0; j < m; j++) {
			if (a[j][i] >= mid) mask |= (1 << j);
		}
		b[mask] = i;
	}

	for (int i = 0; i < b.size(); i++) {
		if (b[i] == -1) continue;
		for (int j = i; j < b.size(); j++) {
			if (b[j] == -1) continue;
			if ((i | j) == ((1 << m) - 1) ) {
				res = { b[i], b[j] };
				return true;
			}
		}
	}
	return false;
}

void solve(){
	cin >> n >> m;
	a.resize(m, vector<int>(n));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> a[j][i];
		}
	}
	int l = 0;
	int r = 1e9 + 1;
	while (r - l > 1) {
		int mid = (l + r) >> 1;
		if (check(mid)) l = mid;
		else r = mid;
	}
	check(l);
	cout << res.first + 1 << " " << res.second + 1;
}

signed main() {
	/*
	freopen("search.in", "r", stdin);
	freopen("search.out", "w", stdout);
	*/
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout.precision(12);
	solve();
}