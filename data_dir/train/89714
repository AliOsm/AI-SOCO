    #pragma optimize("Ofast")

    #include <bits/stdc++.h>

    using namespace std;

    using ll = long long int;
    using ull = unsigned long long int;
    using dd = double;
    using ldd = long double;
    using si = short int;
    using pii = pair<int, int>;
    using pll = pair<ll, ll>;

    #define all(x) (x).begin(), (x).end()
    #define ff first
    #define ss second

    // debug defines
    #ifdef HOME
        int jjj;
        #define PO cout << "Pomelo" << endl;
        #define OL cout << "Oliva" << endl;
        #define debug(x) cout << #x << " " << x << endl;
        #define debug_v(x) cout << #x << " "; for (auto i : x) cout << i << " "; cout << endl;
        #define debug_vp(x) cout << #x << " "; for (auto i : x) cout << '[' << i.ff << " " << i.ss << ']'; cout << endl;
        #define wait() cin >> jjj;
    #else
        #define PO 0
        #define OL 0
        #define debug(x) 0
        #define debug_v(x) 0
        #define debug_vp(x) 0
        #define wait() 0
    #endif // HOME
    // end of debug defines

    vector<int> clr;
    vector<map<int, int>> arr;
    vector<int> ind;
    vector<vector<int>> gr;
    vector<ll> summ;
    vector<int> ma;

    void dfs(int v = 0, int p = -1)
    {
        //debug(v);
        int big = -1;
        for(int i : gr[v])
        {
            if (i == p)
                continue;
            dfs(i, v);
            if (big == -1 || arr[ind[big]].size() < arr[ind[i]].size())
                big = i;
        }
        if (big == -1)
        {
            summ[v] = clr[v];
            ma[v] = 1;
            arr[ind[v]][clr[v]] = 1;
            return;
        }
        summ[v] = summ[big];
        ind[v] = ind[big];
        ma[v] = ma[big];
        for (int i : gr[v])
        {
            if (i == p || i == big)
                continue;
            for (auto j : arr[ind[i]])
            {
                auto& k = arr[ind[v]][j.ff];
                k += j.ss;
                if (k > ma[v])
                {
                    ma[v] = k;
                    summ[v] = 0;
                }
                if (k == ma[v])
                    summ[v] += j.ff;
            }
        }
        auto& k = arr[ind[v]][clr[v]];
        k++;
        if (k > ma[v])
        {
            ma[v] = k;
            summ[v] = 0;
        }
        if (k == ma[v])
            summ[v] += clr[v];
    }

    int main()
    {
        ios_base::sync_with_stdio(0);
        cout.tie(0);
        cin.tie(0);

        int n;
        cin >> n;

        gr.resize(n);
        ind.resize(n);
        clr.resize(n);
        arr.resize(n);
        ma.resize(n);
        summ.resize(n);

        for (int i = 0; i < n; ++i)
        {
            ind[i] = i;
            cin >> clr[i];
        }
        int a, b;

        for (int i = 0; i < n - 1; ++i)
        {
            cin >> a >> b;
            gr[a - 1].push_back(b - 1);
            gr[b - 1].push_back(a - 1);
        }
        dfs();
        for (int i = 0; i < n; ++i)
            cout << summ[i] << " ";

        return 0;
    }
