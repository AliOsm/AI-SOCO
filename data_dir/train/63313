/**
 * @author khokharnikunj8
 */

#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

class DSameGCDs {
public:
    long long findIt(vector<long long> &divisors, long long m, long long gc) {
        vector<long long> dp(divisors.size(), 0);
        for (int i = divisors.size() - 1; i >= 0; i--) {
            dp[i] += (m / divisors[i]);
            for (int j = i + 1; j < divisors.size(); j++) {
                if (divisors[j] % divisors[i] == 0) dp[i] -= dp[j];
            }
            if (divisors[i] == gc) return dp[i];
        }
    }

    void solve(std::istream &in, std::ostream &out) {
        long long a, m;
        in >> a >> m;
        vector<long long> divisors;
        for (long long i = 1; i * i <= m; i++) {
            if (m % i == 0) {
                divisors.push_back(i);
                if (i != m / i) {
                    divisors.push_back(m / i);
                }
            }
        }
        sort(divisors.begin(), divisors.end());
        long long gc = __gcd(a, m);
        out << findIt(divisors, m, gc) << "\n";
    }
};


int main() {
    DSameGCDs solver;
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    int n;
    in >> n;
    for (int i = 0; i < n; ++i) {
        solver.solve(in, out);
    }

    return 0;
}
