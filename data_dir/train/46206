/////////////////////////   _LeMur_
#define _CRT_SECURE_NO_WARNINGS
#include <unordered_map>
#include <unordered_set>
#include <functional>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <chrono>
#include <random>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <ctime>
#include <stack>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <map>
#include <set>

using namespace std;

const int N = 40005;
const int inf = 1000 * 1000 * 1000;
const int mod = 1000 * 1000 * 1000 + 7;
mt19937 myrand(chrono::steady_clock::now().time_since_epoch().count());

int t;
int lp[N];
vector <int> pr;

set <int> primes;
set <int>::iterator it;

vector <int> curPrimes;

int alfa[N];

long long findval(long long answ) {
    curPrimes.clear();
    long long lim = inf * 1ll * inf;
    it = primes.begin();
    while (true) {
        long long x = *it;
        if (answ > lim / x) break;
        answ *= x;
        curPrimes.push_back(x);
        ++it;
    }
    return answ;
}

int main() {
    for (int i = 2; i * i <= inf; i++) {
        if (lp[i] == 0) {
            for (int j = i; j * 1ll * j <= inf; j += i) {
                lp[j] = i;
            }
            pr.push_back(i);
        }
    }

    cin >> t;
    while (t--) {
        long long cur = 1;

        while (!primes.empty()) {
            primes.erase(primes.begin());
        }

        for (int i = 0; i < (int)pr.size(); i++) {
            alfa[ pr[i] ] = 0;
            primes.insert(pr[i]);
        }

        long long cnt = 22;
        while (cnt--) {
            long long x = findval(cur);

            cout << "? " << x << endl;
            cout.flush();
            long long g;
            cin >> g;

            assert(g % cur == 0);
            g /= cur;
            for (int  i = 0; i < (int)curPrimes.size(); i++) {
                int p = curPrimes[i];
                if (g % p != 0) {
                    primes.erase(p);
                } else {
                    cur *= p;
                    alfa[p]++;
                }
            }
        }

        int D = 1;
        for (int i = 0; i < (int)pr.size(); i++) {
            D *= alfa[ pr[i] ] + 1;
        }

        D = max(D + 7, 2 * D);
        cout << "! " << D << endl;
        cout.flush();
    }
    return 0;
}
