#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair < int, int > ii;

const int N = 2e5 + 5;

int n, ans;
int a[N], dv[N];
vector<int> p[N], nodes[N];
vector<int> v[N];
bool h[N], have[N];

int mx, mxi;

void dfs(int p, int x, int d) {
  h[x] = 1;
  // printf("p = %d x = %d d = %d\n", p, x, d);
  if(d > mx) {
    mx = d;
    mxi = x;
  }
  for(auto u : v[x]) {
    if(u != p and have[u]) {
      dfs(x, u, d + 1);
    }
  }
}

void lp(int x) {
  mx = -1;
  dfs(0, x, 1);
  x = mxi;
  mx = -1;
  dfs(0, x, 1);
  ans = max(ans, mx);
}

int main() {
  for(int i = 2; i < N; i++) {
    if(!dv[i]) {
      for(int j = i; j < N; j += i)
        dv[j] = i;
    }
  }
  scanf("%d", &n);
  for(int i = 1; i <= n; i++) {
    int x;
    scanf("%d", &x);
    while(x > 1) {
      int d = dv[x];
      p[i].push_back(d);
      // printf("push %d %d\n", i, d);
      while(x % d == 0)
        x /= d;
    }
  }
  for(int i = 1; i < n; i++) {
    int x, y;
    scanf("%d %d", &x, &y);
    v[x].push_back(y);
    v[y].push_back(x);
  }
  for(int i = 1; i <= n; i++) {
    for(auto x : p[i])
      nodes[x].push_back(i);
  }
  for(int i = 1; i < N; i++) {
    for(auto x : nodes[i])
      have[x] = 1;
    for(auto x : nodes[i]) {
      if(!h[x]) {
        lp(x);
      }
    }
    for(auto x : nodes[i])
      h[x] = have[x] = 0;
  }
  printf("%d\n", ans);
  return 0;
}
