#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <cstring>
#include <cmath>
#include <queue>
#include <set>
#include <algorithm>

using namespace std;

const int maxR = 1e6 + 5;

int n;
int a[maxR];
int t[maxR][20];
int myLog[maxR];

void calcMyLog() {
    myLog[1] = 0;
    for (int i = 2; i < maxR; i++)
        if ((i & (i - 1)) == 0) {
            myLog[i] = myLog[i - 1] + 1;
        }
        else myLog[i] = myLog[i - 1];
}

int rmq(int l, int r) {
    int lg = myLog[r - l + 1];
    return max(t[l][lg], t[r - (1 << lg) + 1][lg]);
}

void buildRMQ() {
    calcMyLog();
    for (int i = 1; i < maxR; i++)
        t[i][0] = a[i];
    for (int j = 1; j < 20; j++)
        for (int i = 1; i + (1 << j) - 1 < maxR; i++)
            t[i][j] = max(t[i][j - 1], t[i + (1 << (j - 1))][j - 1]);
}

int solve(int x) {
    if (x == 1) return 0;
    int res = 0;
    for (int i = x; i < maxR; i += x)
        res = max(res, rmq(i, min(i + x - 1, maxR - 1)) % x);
    return res;
}

int main() {
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    ios_base::sync_with_stdio(0);

    cin >> n;

    set<int> s;

    for (int i = 1; i <= n; i++) {
        int x;
        cin >> x;
        s.insert(x);
        a[x] = x;
    }

    buildRMQ();

    int res = 0;

    for (set<int>::iterator it = s.begin(); it != s.end(); it++)
        res = max(res, solve(*it));

    cout << res << "\n";

    return 0;
}
