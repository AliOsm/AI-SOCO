#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
#define rc(x) return cout<<x<<endl,0
#define pb push_back
#define mkp make_pair
#define in insert
#define er erase
#define fd find
#define fr first
#define sc second
#define all(x) x.begin(),x.end()
typedef long long ll;
typedef long double ld;
const ll INF=0x3f3f3f3f3f3f3f3f;
const ll llinf=(1LL<<62);
const int inf=(1<<30);
const int nmax=1e5+50;
const ll mod=1e9+7;
using namespace std;
int n,m,i,j,oi,di,sz,p[nmax],s[nmax],b[nmax],in[nmax],pr[nmax],cs[nmax],cinc[nmax],rs[nmax];
vector<pair<int,int> >d,o;
vector<int>vc,vfw[3*nmax],fw[3*nmax];
void upb(int i,int v)
{
	for(;i>=1;i-=i&(-i))vfw[i].pb(v);
}
void upd(int i,int v)
{
	for(;i>=1;i-=i&(-i))
	{
		if(vfw[i].empty())continue;
		int j=lower_bound(all(vfw[i]),v)-vfw[i].begin()+1;
		for(;j<(int)fw[i].size();j+=j&(-j))fw[i][j]++;
	}
}
int qry(int i,int v)
{
	int ans=0;
	for(;i<=sz;i+=i&(-i))
	{
		if(vfw[i].empty())continue;
		int j=upper_bound(all(vfw[i]),v)-vfw[i].begin();
		for(;j>=1;j-=j&(-j))ans+=fw[i][j];
	}
	return ans;
}
int main()
{
	//freopen("sol.in","r",stdin);
	//freopen("sol.out","w",stdout);
	//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
	ios_base::sync_with_stdio(false);cin.tie(0);cerr.tie(0);cout.tie(0);
	cin>>n>>m;
	for(i=1;i<=n;i++)cin>>p[i];
	for(i=1;i<=n;i++)cin>>s[i];
	for(i=1;i<=n;i++)cin>>b[i];
	for(i=1;i<=m;i++)cin>>in[i];
	for(i=1;i<=m;i++)cin>>pr[i];
	for(i=1;i<=n;i++)
	{
		d.pb(mkp(b[i],i));
		vc.pb(p[i]);
		vc.pb(s[i]);
	}
	for(i=1;i<=m;i++)
	{
		o.pb(mkp(pr[i],i));
		vc.pb(in[i]);
	}
	sort(all(d));
	sort(all(o));
	sort(all(vc));
	vc.resize(unique(all(vc))-vc.begin());
	sz=(int)vc.size();
	for(i=1;i<=n;i++)cs[i]=lower_bound(all(vc),s[i])-vc.begin()+1;
	for(i=1;i<=m;i++)cinc[i]=lower_bound(all(vc),in[i])-vc.begin()+1;
	j=n-1;
	for(i=m-1;i>=0;i--)
	{
		oi=o[i].sc;
		for(;j>=0;j--)
		{
			di=d[j].sc;
			if(b[di]<pr[oi])break;
			upb(cs[di],p[di]+b[di]);
		}
	}
	for(i=1;i<=sz;i++)
	{
		if(vfw[i].empty())continue;
		sort(all(vfw[i]));
		vfw[i].resize(unique(all(vfw[i]))-vfw[i].begin());
		fw[i].resize((int)vfw[i].size()+2,0);
	}
	j=n-1;
	for(i=m-1;i>=0;i--)
	{
		oi=o[i].sc;
		for(;j>=0;j--)
		{
			di=d[j].sc;
			if(b[di]<pr[oi])break;
			upd(cs[di],p[di]+b[di]);
		}
		rs[oi]+=qry(cinc[oi],in[oi]+pr[oi]);
	}
	for(i=1;i<=sz;i++)
	{
		vfw[i].clear();
		fw[i].clear();
	}
	j=0;
	for(i=0;i<m;i++)
	{
		oi=o[i].sc;
		for(;j<n;j++)
		{
			di=d[j].sc;
			if(b[di]>=pr[oi])break;
			upb(cs[di],p[di]-b[di]);
		}
	}
	for(i=1;i<=sz;i++)
	{
		if(vfw[i].empty())continue;
		sort(all(vfw[i]));
		vfw[i].resize(unique(all(vfw[i]))-vfw[i].begin());
		fw[i].resize((int)vfw[i].size()+2,0);
	}
	j=0;
	for(i=0;i<m;i++)
	{
		oi=o[i].sc;
		for(;j<n;j++)
		{
			di=d[j].sc;
			if(b[di]>=pr[oi])break;
			upd(cs[di],p[di]-b[di]);
		}
		rs[oi]+=qry(cinc[oi],in[oi]-pr[oi]);
	}
	for(i=1;i<=m;i++)cout<<rs[i]<<" ";
	cout<<endl;
	return 0;
}
