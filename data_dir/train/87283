#include <bits/stdc++.h>
#include <ctime>

using namespace std;

#define space ' '
#define enter "\n"
#define fi first
#define se second
#define mp make_pair
#define ALL(x) x.begin(), x.end()

typedef long long ll;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef set <int> si;
typedef map <int, int> mii;
typedef pair <ll, ll> pll;
typedef vector <int> vi;
typedef vector <pii> vii;
typedef long double ld;

template <class T>
T sqr (T x) {
	return x * x;
}

template <class T>
T gcd (T a, T b) {
	return b ? gcd(b, a % b) : a;
}

template <class T1, class T2>
T1 chmin (T1 & x, const T2 & y) {
	if (T1(y) < x)
		return x = y;
	return x;
}

template <class T1, class T2>
T1 chmax (T1 & x, const T2 & y) {
	if (T1(y) > x)
		return x = y;
	return x;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const pair <T1, T2> & p) {
	return os << '(' << p.fi << ", " << p.se << ')';
}

template <class T>
ostream & operator << (ostream & os, const vector <T> & v) {
	os << '{';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '}';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const set <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const multiset <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const map <T1, T2> & m) {
	os << '<';
	bool was = false;
	for (const auto & x : m) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '>';
	return os;
}

const ll INF = (ll) 2e9;
const int MOD = (int) 1e9 + 7;
const int MAXN = (int) 2e5 + 10;

int n;
string s;
int open[MAXN], close[MAXN];
int fact[MAXN * 2];
int ans = 0;

int binpow (int a, int n) {
	int res = 1;
	while (n) {
		if (n & 1)
			res = ((ll) res * a) % MOD;
		a = ((ll) a * a) % MOD;
		n >>= 1;
	}
	return res;
}

int f (int a, int b) {
	if (!a || !b)
		return 1;
	ll res = fact[a + b];
	ll x = ((ll) fact[a] * fact[b]) % MOD;
	res = ((ll) res * binpow(x, MOD - 2)) % MOD;
	return res;
}

int main () {
	ios_base::sync_with_stdio(false);
	cin >> s;
	n = s.size();
	for (int i = 1; i <= n; i++) {
		open[i] = open[i - 1] + (s[i - 1] == '(');
	}
	for (int i = n; i >= 1; i--) {
		close[i] = close[i + 1] + (s[i - 1] == ')');
	}
	fact[0] = 1;
	for (int i = 1; i <= 400000; i++) {
		fact[i] = ((ll) fact[i - 1] * i) % MOD;
	}
	for (int i = 1; i <= n; i++) {
		int a = open[i], b = close[i + 1];
//		if (!a || !b) {
//			continue;
//		}
		ans = ((ll) ans + f(a, b)) % MOD;
		a = open[i - 1];
		ans = (ans - f(a, b) + MOD) % MOD;
	}
	cout << ans;
}

