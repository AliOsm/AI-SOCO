#include <bits/stdc++.h>
using namespace std;
using ll = long long;

struct P {
  ll b, t;
  P(): b{0}, t{0} {};

  bool operator<(const P& rhs) const {
    return b < rhs.b;
  }
};

map<ll, int> used, fr;

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(nullptr);
  cout.tie(nullptr);
  
  int n, k;
  cin >> n >> k;
  vector<P> p(n);
  for(int i = 0; i < n; ++i) {
    cin >> p[i].t >> p[i].b;
  }
  sort(p.begin(), p.end());
  for(int i = 0; i < n; ++i) {
    ++fr[p[i].t];
  }
  ll s = 0;
  for(int i = 0; i < k; ++i) {
    ++used[p[i].t];
    s += p[i].t;
    --fr[p[i].t];
    if (fr[p[i].t] == 0) {
      fr.erase(p[i].t);
    }
  }
  for(int i = k; i < n; ++i) {
    const auto& it = used.begin();
    if (p[i].t > it->first) {
      s -= it->first;
      --used[it->first];
      if (used[it->first] == 0) {
        used.erase(it);
      }
      ++fr[it->first];

      s += p[i].t;
      ++used[p[i].t];
      --fr[p[i].t];
      if (fr[p[i].t] == 0) {
        fr.erase(p[i].t);
      }
    }
  }

  ll ret = 0;
  for(int i = 0; i + k < n; ++i) {
    if (used.count(p[i].t)) {
      ret = max(ret, p[i].b * s);
      s -= p[i].t;
      --used[p[i].t];
      if (used[p[i].t] == 0) {
        used.erase(p[i].t);
      }
      ll best = fr.rbegin()->first;
      s += best;
      used[best]++;
      --fr[best];
      if (fr[best] == 0) {
        fr.erase(best);
      }
    } else {
      ret = max(ret, p[i].b * (s + p[i].t - used.begin()->first));
      --fr[p[i].t];
      if (fr[p[i].t] == 0) {
        fr.erase(p[i].t);
      }
    }
  }

  for(int i = n - k; i < n; ++i) {
    ret = max(ret, p[i].b * s);
    s -= p[i].t;
  }
  cout << ret << endl;
  return 0;
}
