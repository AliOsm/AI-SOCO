#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;
#define nextVector(t, v, size) vector< argument_type<void(t)>::type > v(size); { for (int i = 0 ; i < size ; i++) cin >> v[i]; }

#define range(name, start, count) vector<int> name(count); { for (int i = 0 ; i < count ; i++) name[i] = i + start; }

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) os << v[i] << ' '; os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

int main() {
	srand (time(NULL));
    ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, l);
	next(int, b);
	next(int, f);
	
	next(int, nq);
	auto queries = readVector<pair<int, int>>(nq);
	for (auto &q : queries) if (q.first == 2) q.second--;
	
	vector<pair<int, int>> parked;
	vector<int> place(nq);
	FOR (i, 0, queries.size()) {
		auto q = queries[i];
		if (q.first == 1) {
			int pos = -1;
			if (q.second > l) ;
			else if (parked.size() == 0) pos = 0;
			else {
				if (q.second + f <= parked.front().first) pos = 0;
				else {
					FOR (i, 0, parked.size() - 1)
						if (b + f + q.second <= parked[i + 1].first - parked[i].second) {
							pos = parked[i].second + b;
							break;
						};
					if (pos == -1 && q.second + b <= l - parked.back().second)
						pos = parked.back().second + b;
				}
			}
			cout << pos << endl;
			if (pos != -1) {
				auto it = lower_bound(all(parked), make_pair(pos , 0));
				parked.insert(it, { pos , pos + q.second });
				place[i] = pos;
			}
		} else {
			auto it = lower_bound(all(parked), make_pair(place[q.second] , 0));
			parked.erase(it);
		}
	}
}