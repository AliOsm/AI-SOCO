/********************************************
*                                           *
*    Solved By : Bir Bahadur Khatri(B'ru)   *
*      Be Positive,be Happy.                *
*                                           *
*********************************************/

#define ff first
#define D double
#define sz size()
#define ss second
#define PB push_back
#define MP make_pair
#define SQR(n) (n*n)
#define CHR getchar()
#define NL printf("\n")
#include<bits/stdc++.h>
#define ULL unsigned LL
#define PI 2.0*acos(0.0)
#define LL long long int
#define S1(a) a=in<int>()
#define SL1(a) a=in<LL>()
#define Max(a,b) ((a>b)?a:b)
#define Min(a,b) ((a<b)?a:b)
#define all(a) a.begin(),a.end()
#define _Max(a,b,c) Max(a,Max(b,c))
#define _Min(a,b,c) Min(a,Min(b,c))
#define cp printf("are you okay??\n")
#define SL2(a,b) a=in<LL>(),b=in<LL>()
#define F(i,a,b) for(int i=a;i<b; i++)
#define S2(a,b) a=in<int>(),b=in<int>()
#define R(i,a,b) for(int i=a-1;i>=b; i--)
#define BitCnt(a) __builtin_popcountll(a)
#define MEM(a,val) memset(a,val,sizeof(a))
#define SL3(a,b,c) a=in<LL>(),b=in<LL>(),c=in<LL>()
#define S3(a,b,c) a=in<int>(),b=in<int>(),c=in<int>()
#define trace1(x)                cerr << #x << ": " << x << endl;
#define InpOut freopen("A.in","r",stdin),freopen("A1.out","w",stdout)
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
using namespace std;
template <typename T> T in(){char ch;T n = 0;bool ng = false;while (1){ch = getchar();if (ch == '-'){ng = true;ch = getchar();break;}if (ch>='0' && ch<='9')     break;}while (1){n = n*10 + (ch - '0');ch = getchar();if (ch<'0' || ch>'9')   break;}return (ng?-n:n);}
template<typename T>inline T POW(T B,T P){ if(P==0) return 1; if(P&1) return B*POW(B,P-1);  else return SQR(POW(B,P/2));}
template<typename T>inline T Gcd(T a,T b){if(a<0)return Gcd(-a,b);if(b<0)return Gcd(a,-b);return (b==0)?a:Gcd(b,a%b);}
template<typename T>inline T Lcm(T a,T b) {if(a<0)return Lcm(-a,b);if(b<0)return Lcm(a,-b);return a*(b/Gcd(a,b));}
long long Bigmod(long long base, long long power, long long MOD){long long ret=1;while(power){if(power & 1)ret=(ret*base)%MOD;base=(base*base)%MOD;power>>=1;}return ret;}
bool isVowel(char ch){ ch=toupper(ch); if(ch=='A'||ch=='U'||ch=='I'||ch=='O'||ch=='E') return true; return false;}
long long ModInverse(long long number, long long MOD){return Bigmod(number, MOD-2, MOD);}
bool isConst(char ch){if (isalpha(ch) && !isVowel(ch)) return true; return false;}
///**********************************************************//

#define MD1 1000000007ULL
#define MD2 1000000009ULL
#define MD3 1000000021ULL
#define BS1 10000019ULL
#define BS2 10000079ULL
#define BS3 10000103ULL
#define PUL pair<ULL,ULL>
#define PII pair<int,int>

#define lchild lft,l,mid
#define rchild rgt,mid+1,r
#define ngood  r<st||l>ed
#define good   st<=l&&ed>=r
#define seg    int mid=(l+r)/2,lft=2*id,rgt=lft+1

///         0123456789
#define MX  3300007
#define MOD 1000000007
#define INF 2000000000
#define EPS 1e-9
/// ==========================================////


const int N=1e9+1;
int avl;

struct p{
	int l,r,cnt;
	LL sm;
	p(){
		l=0,r=0,cnt=0,sm=0;
	}
};
int pos,val,st,ed;
int inc;
p tree[MX*4];
void upd(int id,int l,int r) {

	if(l==r) {
		tree[id].cnt+=inc;
		tree[id].sm+=val;
		return ;
	}
	
	
	seg;
	
	if(tree[id].l==0) {
		tree[id].l=++avl;
		tree[avl]=p();
	}
	
	if(tree[id].r==0) {
		tree[id].r=++avl;
		tree[avl]=p();
	}
	if(avl>=MX*4-10) exit(0);
	
	if(pos<=mid) 		upd(  tree[id].l,l,mid );
	else 				upd(  tree[id].r,mid+1,r );
	
	tree[id].cnt=tree[ tree[id].l ].cnt+tree[ tree[id].r ].cnt;
	tree[id].sm=tree[ tree[id].l ].sm+tree[ tree[id].r ].sm;
	
}

int koto(int id,int l,int r,int S,int E) {
	if(r<S||l>E) return 0;
	if(S<=l&&E>=r) return tree[id].cnt;
	seg;
	return koto(tree[id].l,l,mid,S,E)+koto(tree[id].r,mid+1,r,S,E);
}
int fnl;
PII Qry(int id,int l,int r) {
	if(l==r) {
		fnl=l;
		return MP( tree[id].cnt,tree[id].sm );
	}
	
	seg;
	
	if(ed<=mid)					return Qry( tree[id].l,l,mid );
	else if(st>mid)				return Qry(tree[id].r,mid+1,r);
	else {
								int lc=koto(1,1,N,max(l,st),mid);
								if(lc)	return Qry( tree[id].l,l,mid );
								else 	return Qry(tree[id].r,mid+1,r);
	}
}

struct z{
	int l,r,v;
	z(){
		l=0,r=0,v=0;
	}
};

z dp[MX*4];

int Mnn(int a,int b) {
	if(b==0) return a;
	return min(a,b);
}


int avail;

void lol(int id,int l,int r) {
	if(ngood) return;
	if(good) {
		dp[id].v=Mnn(val,dp[id].v);
		return;
	}
	
	seg;
	
	if(dp[id].l==0) {
		dp[id].l=++avail;
		dp[avail]=z();
	}
	if(dp[id].r==0) {
		dp[id].r=++avail;
		dp[avail]=z();
	}
	if(avail>=MX*4-10) exit(0);
	lol(  dp[id].l,l,mid );
	lol(  dp[id].r,mid+1,r );
	
}

int qry(int id,int l,int r,int v) {
	v=Mnn(v,dp[id].v);
	if(l==r) {
		return v;
		
	}
	seg;
	if(pos<=mid)		return qry( dp[id].l,l,mid ,v);
	else 				return qry( dp[id].r,mid+1,r ,v);
}


map<int,int> mp;

int cnt[MX];
LL len[MX];

int main() {
	//cout<< (sizeof(dp)+sizeof(tree))/1e6;
	int n,m;
	S2(n,m);
	avail=1;
	avl=1;
	F(i,1,n+1) {
		int ps,vl;
		S2(ps,vl);
		ps++;
		mp[ps]=i;
		st=ps;
		ps+=vl;
		ed=ps;
		val=st;
		lol(1,1,N);
		len[i]=vl;
	}
	
	while(m--) {
		int ps,s;
		S2(ps,s);
		ps++;
		pos=ps;
		int tp=qry(1,1,N,INF);
		if(tp==INF) {
			val=s;
			inc=1;
			upd(1,1,N);
		}
		else {
			int id=mp[tp];
			cnt[id]++;
			len[id]+=s;
			while(true) {
				st=tp;
				ed=Min(N,tp+len[id]);
				PII x=Qry(1,1,N);
				if(x.ff==0) break;
				cnt[id]+=x.ff;
				len[id]+=x.ss;
				inc=-x.ff;
				val=-x.ss;
				pos=fnl;
				upd(1,1,N);
			}
			st=tp;
			ed=tp+len[id];
			val=tp;
			lol(1,1,N);
		}
	}
	
	F(i,1,n+1) {
		printf("%d %lld\n",cnt[i],len[i]);
	}
	
	
    return 0;
}

