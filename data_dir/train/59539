#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define pb push_back
#define x first
#define y second
#define fastread ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define PI (atan(1)*4)
#define mp make_pair
using namespace std;

string s;
const int maxn=1e6+7,lim=4*maxn;
pair<int,int> segtree[lim];
pair<int,int> seq[lim];
int lazy[lim],n,m;

pair<int,int> add(pair<int,int> a,pair<int,int> b){
	return {a.x+b.x,a.y+b.y};
}



void build(int cur,int l,int r){
	if(l==r){
		if(l>=1 && l<=s.size()){
			if(s[l-1]=='4'){
				segtree[cur].x=1;
				seq[cur].x=1;
				seq[cur].y=1;
			}
			else{
				segtree[cur].y=1;
				seq[cur].y=1;
				seq[cur].x=1;
			}
		}
		return;
	}
	int lc=2*cur,rc=lc+1,mid=(l+r)/2;
	build(lc,l,mid);
	build(rc,mid+1,r);
	segtree[cur]=add(segtree[lc],segtree[rc]);
	seq[cur].x=max(seq[lc].x+segtree[rc].y,segtree[lc].x+seq[rc].x);
	seq[cur].y=max(seq[lc].y+segtree[rc].x,segtree[lc].y+seq[rc].y);
}
void pushlazy(int cur,int lc,int rc){
	lazy[lc]^=1;
	lazy[rc]^=1;
	lazy[cur]=0;
	swap(segtree[lc].x,segtree[lc].y);
	swap(seq[lc].x,seq[lc].y);
	swap(segtree[rc].x,segtree[rc].y);
	swap(seq[rc].x,seq[rc].y);
}



void update(int cur,int l,int r,int ql,int qr){
	if(l>qr || r<ql)
		return;
	if(l>=ql && r<=qr){
		swap(segtree[cur].x,segtree[cur].y);
		swap(seq[cur].x,seq[cur].y);
		lazy[cur]^=1;
		return;
	}
	int lc=2*cur,rc=lc+1,mid=(l+r)/2;
	if(lazy[cur])
		pushlazy(cur,lc,rc);
	update(lc,l,mid,ql,qr);
	update(rc,mid+1,r,ql,qr);
	segtree[cur]=add(segtree[lc],segtree[rc]);
	seq[cur].x=max(seq[lc].x+segtree[rc].y,segtree[lc].x+seq[rc].x);
	seq[cur].y=max(seq[lc].y+segtree[rc].x,segtree[lc].y+seq[rc].y);
}


int main()
{
	fastread;
	cin>>n>>m;
	cin>>s;
	const int lx=0,rx=s.size()+1;
	build(1,lx,rx);
	// int ptr=0,ans=query(1,lx,rx,lx,rx).y;
	// for(int i=1;i<rx;i++){
	// 	int v=query(1,lx,rx,0,i).x+query(1,lx,rx,i+1,rx).y;
	// 	if(v>=ans){
	// 		ans=v;
	// 		ptr=i;
	// 	}
	// }
	while(m--){
		cin>>s;
		if(s[0]=='c')
			cout<<seq[1].x<<'\n';
		else{
			int l,r;
			cin>>l>>r;
			// cout<<"before"<<ptr<<endl;
			update(1,lx,rx,l,r);
		}
	}
	return 0;
}