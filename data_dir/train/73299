#include <bits/stdc++.h>

using namespace std;

#define INF 1234567
int fx[] = {-1, +1, 0, 0};
int fy[] = {0, 0, -1, +1};

int main()
{
    int n, m;
    scanf("%d %d", &n, &m);
    int dist[3][n][m];
    string str[n];
    for(int i=0; i<n; i++) cin >> str[i];
    for(int c=1; c<=3; c++){
        char p = (char)((int)'0'+c);
        deque<pair<int, int> > dq;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                dist[p-'1'][i][j] = INF;
                if(str[i][j] == p){
                    dist[p-'1'][i][j] = 0;
                    dq.push_front(make_pair(i, j));
                }
            }
        }
        while(!dq.empty()){
            pair<int, int> P = dq.front();
            dq.pop_front();
            int x = P.first, y = P.second;
            for(int i=0; i<4; i++){
                int xx = x+fx[i];
                int yy = y+fy[i];
                if(xx >= 0 && xx < n && yy >=0 && yy < m && str[xx][yy] != '#'){
                    int cost = 0;
                    if(str[xx][yy] == '.') cost = 1;
                    if(dist[p-'1'][xx][yy] > dist[p-'1'][x][y]+cost){
                        dist[p-'1'][xx][yy] = dist[p-'1'][x][y]+cost;
                        if(cost == 0){
                            dq.push_front(make_pair(xx, yy));
                        }
                        else dq.push_back(make_pair(xx, yy));
                    }
                }
            }
        }
    }
    int mins = INF;
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            int sum = dist[0][i][j]+dist[1][i][j]+dist[2][i][j]-2*(str[i][j]=='.');
            mins = min(mins, sum);
        }
    }
    if(mins == INF) cout << -1;
    else cout << mins;
}
