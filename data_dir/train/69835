#include <bits/stdc++.h>
using namespace std;

#define MOD 1000000007

long long fAns;

int sub[200005], even[200005], odd[200005];

long long V[200005];
vector<int> X[200005];

void dfs(int i, int par)
{
    sub[i] = even[i] = 1;
    
    for(int j=0; j<X[i].size(); j++)
        if(X[i][j] != par)
        {
            dfs(X[i][j], i);
            
            sub[i] += sub[ X[i][j] ];
            even[i] += odd[ X[i][j] ];
            odd[i] += even[ X[i][j] ];
        }
}

void solve(int i, int par, int e, int o)
{
    long long ansE = 0, ansO = 0;
    
    ansE += (long long) e * even[i] % MOD + (even[i] - 1);
    ansO += (long long) o * odd[i] % MOD;
    
    long long childE = 0, childO = 0;
    
    for(int j=0; j<X[i].size(); j++)
    {
        if(X[i][j] == par)
            continue;
        
        ansO += childE * even[ X[i][j] ] % MOD;
        ansE += childO * odd[ X[i][j] ] % MOD;
        
        childE += even[ X[i][j] ];
        childO += odd[ X[i][j] ];
    }
    
    for(int j=0; j<X[i].size(); j++)
    {
        if(X[i][j] == par)
            continue;
        
        solve(X[i][j], i, o + childE - even[ X[i][j] ], e + 1 + childO - odd[ X[i][j] ]);
    }
    
    //cout << i << " " << ansE << " " << ansO << " " << even[i] << " " << odd[i] << " " << e << " " << o << endl;
    
    fAns += (ansE % MOD * 2 + 1) % MOD * V[i] % MOD;
    fAns += - ansO % MOD * V[i] * 2 % MOD + MOD;
}

int main()
{
    cin.tie(NULL), cout.tie(NULL);
    
    int N;
    cin >> N;
    
    for(int i=1; i<=N; i++)
    {
        cin >> V[i];
        V[i] = (V[i] + MOD) % MOD;
    }
    
    for(int i=1; i<=N-1; i++)
    {
        int a, b;
        cin >> a >> b;
        
        X[a].push_back(b);
        X[b].push_back(a);
    }
    
    dfs(1, 0);
    solve(1, 0, 0, 0);
    
    cout << fAns % MOD << "\n";
    return 0;
}