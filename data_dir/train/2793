#include <bits/stdc++.h>

    using namespace std;

    /* ---*-----*-----
    ---------o--------
    -----------------*/

    typedef long long ll;
    typedef long double ld;

    typedef pair<int, int> pi;
    typedef pair<ll,ll> pl;
    typedef pair<ld,ld> pd;

    typedef vector<int> vi;
    typedef vector<ld> vd;
    typedef vector<ll> vl;
    typedef vector<pi> vpi;
    typedef vector<pl> vpl;
    typedef vector<char> vc;

    #define mp make_pair
    #define pb push_back
    #define f first
    #define s second
    #define lb lower_bound
    #define ub upper_bound

    const int MOD = 1000000007;
    const int N = 100;
    set<char> vowel={'A', 'O', 'Y', 'E', 'U', 'I','a','o','y','e','u','i'};
    ll gcd(ll a, ll b) { return (b == 0 ? a : gcd(b, a % b)); }

    ll n,m,k,l,p=0,q=0,ans=0,res=0,posmin,posmax;
    string ch,ch1,ch2;
    bool tab[N];
    map<int,vi> adj;
    ll dp[N+1];
    ll dp2[N+1];
    int dist[N];

    set<int> si;
    set<char> sc;
    map<char,int> mc;
    vl v,vv;
    
    ll solve(ll i){
    	//cout <<i << endl;
        if(i<0)return 0;
        if(i==0)return 1;
        if (dp[i]!=0)return dp[i];
        ll to_return =0;
        for(int j=1;j<=min(m,i);j++){
            to_return += (solve(i-j)%MOD);
            while(to_return<0)to_return+=MOD;
            to_return%=MOD;
        }
        to_return%=MOD;
        dp[i]=to_return ;
        return to_return;
    
    }
    ll antisolve(ll i){
        if(i<0)return 0;
        if(i==0)return 1;
        if (dp2[i]!=0)return dp2[i];
        ll to_return =0;
        for(int j=1;j<=min(i,k-1);j++){
            to_return += (antisolve(i-j)%MOD);
            while(to_return<0)to_return+=MOD;
            to_return%=MOD;
        }
        to_return%=MOD;
        dp2[i]=to_return ;
        return to_return;
    }

    /*void bfs(){
        while(!q.empty()){
        int u=q.front();
        q.pop();
        if(adj[u].empty())ans=max(ans,dist[u]);
        for(int i=0;i<adj[u].size();i++){
            dist[adj[u][i]]=dist[u]+1;
            q.push(adj[u][i]);
        }
        }
    }
*/

    int main(){
        ios_base::sync_with_stdio(false);
        //freopen("overcode.in", "r", stdin);
        //memset(tab,0,sizeof(tab));
        //memset(pred,-1,sizeof(tab));
        //memset(dist,0,sizeof(tab));
        memset(dp,0,sizeof(dp));
        memset(dp2,0,sizeof(dp2));
        cin >> n >>m >>k;
        ans=solve(n)-antisolve(n);
        while(ans<0)ans+=MOD;
        cout << ans;
        return 0;
    }