#include <bits/stdc++.h>

using namespace std;

typedef unsigned uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ldbl;
typedef pair<int, int> pii;
typedef pair<uint, uint> puu;
typedef pair<ll, ll> pll;
typedef pair<ull, ull> pull;
typedef vector<int> vi;
typedef vector<uint> vu;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<pii> vpii;
typedef vector<puu> vpuu;
typedef vector<pll> vpll;
typedef vector<pull> vpull;
typedef vector<string> vstr;
typedef vector<double> vdbl;
typedef vector<ldbl> vldbl;
#define pb push_back
#define ppb pop_back
#define pfr push_front
#define ppfr pop_front
#define emp emplace
#define empb emplace_back
#define be begin
#define rbe rbegin
#define all(x) (x).be(), (x).end()
#define rall(x) (x).rbe(), (x).rend()
#define fir first
#define sec second
#define mkp make_pair
#define brif(cond) if (cond) break
#define ctif(cond) if (cond) continue
#define retif(cond) if (cond) return
static inline void canhazfast() {ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}
template<typename T> T gcd(T a, T b) {return b ? gcd(b, a%b) : a;}
template<typename T> T extgcd(T a, T b, T &x, T &y)
{
    T x0 = 1, y0 = 0, x1 = 0, y1 = 1;
    while (b) {
        T q = a/b; a %= b; swap(a, b);
        x0 -= q*x1; swap(x0, x1);
        y0 -= q*y1; swap(y0, y1);
    }
    x = x0; y = y0; return a;
}
static inline int ctz(unsigned x) {return __builtin_ctz(x);}
static inline int ctzll(ull x) {return __builtin_ctzll(x);}
static inline int clz(unsigned x) {return __builtin_clz(x);}
static inline int clzll(ull x) {return __builtin_clzll(x);}
static inline int popcnt(unsigned x) {return __builtin_popcount(x);}
static inline int popcntll(ull x) {return __builtin_popcountll(x);}
static inline int bsr(unsigned x) {return 31^clz(x);}
static inline int bsrll(ull x) {return 63^clzll(x);}

#define MX 3072

char s[MX], t[MX];
char x[MX][MX], y[MX][MX]; /// x -> y
int len[MX], b[MX], e[MX], pf[MX];

void build(int l)
{
    //cerr << "build(" << l << ")\n";
    pf[0] = pf[1] = 0;
    //cerr << "pf[0] = 0\npf[1] = 0\n";
    for (int i = 1, k = 0; i < l; ++i) {
        while (k && s[i] != s[k]) k = pf[k];
        if (s[i] == s[k]) ++k;
        pf[i+1] = k;
        //cerr << "pf[" << i+1 << "] = " << pf[i+1] << '\n';
    }
}

int match(const char tx[], int l)
{
    for (int i = 0, k = 0; tx[i]; ++i) {
        while (k && tx[i] != s[k]) k = pf[k];
        if (tx[i] == s[k]) ++k;
        retif(k == l) i-l+1;
    }
    return -1;
}

int main()
{
    canhazfast();

    int n, l, p = 0;
    string tmp, pre, suf;

    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> x[i];
        len[i] = strlen(x[i]);
    }
    for (int i = 0; i < n; ++i) {
        cin >> y[i];
        while (b[i] < len[i] && x[i][b[i]] == y[i][b[i]]) ++b[i];
        ctif(b[i] == len[i]);
        e[i] = len[i];
        while (e[i] && x[i][e[i]-1] == y[i][e[i]-1]) --e[i];
    }
    while (b[p] == len[p]) ++p;
    l = e[p]-b[p];
    copy(x[p]+b[p], x[p]+e[p], s);
    copy(y[p]+b[p], y[p]+e[p], t);
    for (int i = p+1; i < n; ++i) {
        ctif(b[i] == len[i]);
        int li = e[i]-b[i];
        retif(li != l || strncmp(x[i]+b[i], s, l) || strncmp(y[i]+b[i], t, l)) cout << "NO", 0;
    }
    /// pref
    for (int j = 1; j <= b[p]; ++j) {
        char c = x[p][b[p]-j];
        bool ok = true;
        for (int i = p+1; i < n; ++i) {
            ctif(b[i] == len[i]);
            int k = b[i]-j;
            if (k < 0 || x[i][k] != c) {
                ok = false;
                break;
            }
        }
        brif(!ok);
        pre += c;
    }
    /// suff
    for (int j = 0; j < len[p]-e[p]; ++j) {
        char c = x[p][e[p]+j];
        bool ok = true;
        for (int i = p+1; i < n; ++i) {
            ctif(b[i] == len[i]);
            int k = e[i]+j;
            if (k >= len[i] || x[i][k] != c) {
                ok = false;
                break;
            }
        }
        brif(!ok);
        suf += c;
    }
    /// check
    reverse(all(pre));
    tmp = pre+s+suf;
    strcpy(s, tmp.c_str());
    tmp = pre+t+suf;
    strcpy(t, tmp.c_str());
    l = strlen(s);
    //cerr << "s = " << s << "\nt = " << t << '\n';
    build(l);
    //cerr << "done kmp init\n";
    for (int i = 0; i < n; ++i) {
        //char *w = strstr(x[i], s);
        //ctif(!w);
        int pos = match(x[i], l);
        ctif(pos < 0);
        copy_n(t, l, x[i]+pos);
        retif(strcmp(x[i], y[i])) cout << "NO", 0;
    }
    cout << "YES\n" << s << '\n' << t;

    return 0;
}
