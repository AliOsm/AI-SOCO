#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

typedef long long int ll;

void minimize(ll &a,ll b)
{
  a=min(a,b);
}

const int infinite=1000000000;

const int limit=500005;

int n;
int a[limit];
vector<int> g[limit];
int ancestor[limit][20];
int root;

void precompute(int u,int p)
{
  int (&anc)[20]=ancestor[u];
  anc[0]=p;
  for (int b=1;b<20;b++)
    anc[b]=ancestor[anc[b-1]][b-1];
  vector<int> &ar=g[u];
  for (int i=0;i<int(ar.size());i++) {
    int v=ar[i];
    if (v!=p) precompute(v,u);
  }
}

ll compute(int u)
{
  if (root==u) return 0;
  int (&anc)[20]=ancestor[u];
  int p=anc[0];
  ll mini=a[p];
  if (p==root) return mini+a[u];
  int b=0;
  ll logar=1;
  for (;;b++,logar++) {
    p=ancestor[p][b];
    if (p==0 or p==root) p=root;
    minimize(mini,(1+logar)*a[p]);
    if (p==root) break;
  }
  return mini+a[u];
}

int main()
{
  ios::sync_with_stdio(false);
  cin>>n;
  int mini=infinite;
  root=1;
  for (int i=1;i<=n;i++) {
    cin>>a[i];
    if (a[i]<mini) {
      root=i;
      mini=a[i];
    }
  }
  for (int i=0;i<n-1;i++) {
    int u,v;
    cin>>u>>v;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  precompute(root,0);
  ll sol=0;
  for (int u=1;u<=n;u++)
    sol+=compute(u);
  cout<<sol<<endl;
}
