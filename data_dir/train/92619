#include<iostream>
#include<cstdio>

#include<string>
#include<vector>
#include<set>
#include<map>
#include<unordered_map>
#include<queue>
#include<deque>
#include<stack>

#include<iomanip>
#include<algorithm>
#include<cstring>
#include<ctime>
#include<cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define correct(x, y, n, m) (0 <= x && x < n && 0 <= y && y < m)
#define X first
#define Y second
#define all(a) a.begin(), a.end()
#define pb push_back
#define mp make_pair
#define sz(v) (int)(v.size())
#define hash hash_

template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }

typedef long long li;
typedef unsigned long long uli;
typedef long double ld;
typedef pair<li, li> pt;

const int N = 200009;
const int logN = 22;
const int sqrN = 450;
const int MOD = 1000000007;
const int INF = 1e9 + 100;
const li INF64 = 1e14;
const ld PI = 3.1415926535897932384626433832795;
const ld eps = 1e-9;

int dx[] = {0, 0, -1, 1};
int dy[] = {-1, 1, 0, 0};

int n, m;
pair<pt, int> a[N];// r l i
set <li> s;
map<li, stack<int> > M;
int ans[N];

int main(){
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
     
    srand(time(NULL));
    cout << setprecision(10) << fixed;
    cerr << setprecision(10) << fixed;          
    
    cin >> n >> m;
    li lstL, lstR;
    forn(i, n){
        li l, r;
        cin >> l >> r;
        if(i == 0){
            lstL = l, lstR = r;
            continue;
        }
        a[i - 1] = mp(mp(r - lstL, l - lstR), i - 1);
        lstL = l, lstR = r;
    }
    forn(i, m){
        li d;
        cin >> d;
        s.insert(d);
        M[d].push(i);
    }

    --n;
    sort(a, a + n);
    
    forn(i, n){
        li pos = *s.lower_bound(a[i].X.Y);
        if(pos > a[i].X.X){
            puts("No");
            return 0;
        }
        ans[a[i].Y] = M[pos].top() + 1;
        M[pos].pop();
        if(sz(M[pos]) == 0)
            s.erase(pos);
    }

    puts("Yes");
    forn(i, n)
        cout << ans[i] << ' ';
    return 0;
}