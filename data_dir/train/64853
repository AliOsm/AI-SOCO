#include <algorithm>
#include <bitset>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <vector>
using namespace std;

const int N = 4 * 100000;
const int LEXT = 3;
const int LNAME = 8;

char filesStr[N];

bool inRange(int n, int l, int r)
{
  return n >= l && n <= r;
}

bool checkInput(char *input, int n)
{
  char *dotpos_last = filesStr, *dotpos = strchr(filesStr, '.');
  if(dotpos == NULL)
    return false;
  int len = dotpos - dotpos_last;
  if(!inRange(len, 1, LNAME))
    return false;
  dotpos_last = dotpos;
  while((dotpos = strchr(dotpos + 1, '.')) != NULL)
  {
    len = dotpos - dotpos_last - 1;
    if(!inRange(len, 2, LEXT + LNAME))
      return false;
    dotpos_last = dotpos;
  }
  len = dotpos_last - filesStr + 1;
  if(!inRange(n - len, 1, LEXT))
    return false;
  return true;
}

int main(int argc, char **argv)
{
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif 

  int n = fread(filesStr, 1, N, stdin);
  if(filesStr[n - 1] == '\n')
    n--;
  
  if(checkInput(filesStr, n))
  {
    puts("YES");
    
    char ext[LEXT + 1];
    char name[LNAME + 1];
    int lext, lname;
    
    // читаем первое имя
    char *dotpos_last = filesStr, *dotpos = strchr(filesStr, '.');
    lname = dotpos - dotpos_last;
    strncpy(name, dotpos_last, lname); name[lname] = '\0';
    dotpos_last = dotpos;
    while((dotpos = strchr(dotpos + 1, '.')) != NULL)
    {
      int len = dotpos - dotpos_last - 1;      
      lext = min(LEXT, len - 1);
      lname = len - lext;
      
      strncpy(ext, dotpos_last + 1, lext); ext[lext] = '\0';
      printf("%s.%s\n", name, ext);
      strncpy(name, dotpos_last + lext + 1, lname); name[lname] = '\0';
      
      dotpos_last = dotpos;
    }
    
    lext = n - (dotpos_last - filesStr) - 1;
    strncpy(ext, dotpos_last + 1, lext); ext[lext] = '\0';
    printf("%s.%s", name, ext);
  }
  else
  {
    puts("NO");
  }
  
  return 0;
}
