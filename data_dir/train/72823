#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;

long int n,q;

void moveLeft(long int &node){
  if(node & 1)
    return;
  long int leastSignificantSetBit = (node & (-node));
  long int leastSignificantSetBitPos = log2(leastSignificantSetBit) + 1;
  node = (node & ~(1LL << (leastSignificantSetBitPos - 1)));
  leastSignificantSetBit >>= 1;
  node |= leastSignificantSetBit;
}

void moveRight(long int &node){
  if(node & 1)
    return;
  long int leastSignificantSetBit = (node & (-node));
  leastSignificantSetBit >>= 1;
  node |= leastSignificantSetBit;
}

long int getRange(long int num){
  return (num & -(num));
}

void moveUp(long int &node){
  long int rangeEncompassed = getRange(node);
  long int parentRange = 2 * rangeEncompassed;

  long int expectingLeftChild = node - parentRange;
  long int expectingRightChild = node + parentRange;
  long int expectedParent = (expectingLeftChild + node) / 2;
  long int expectedParent2 = (expectingRightChild + node) / 2;

  if(expectingLeftChild > 0 && expectingLeftChild <= n && getRange(expectingLeftChild) == getRange(node) && getRange(expectedParent) == 2 * (getRange(expectingLeftChild)))
    node = (expectingLeftChild + node) / 2;
  else if(expectingRightChild > 0 && expectingRightChild <= n && getRange(expectingRightChild) == getRange(node) && getRange(expectedParent2) == 2 * (getRange(expectingRightChild)))
    node = (expectingRightChild + node) / 2;
}

int main(){
   IOS;
 //    #ifndef ONLINE_JUDGE
 //        freopen("in.txt",  "r",  stdin);
 //        freopen("out.txt", "w", stdout);
 //    #endif
   
    cin>>n>>q;

    while(q--){
      long int node;
      cin>>node;

      string s;
      cin>>s;

      for(auto ele : s){
        if(ele == 'L')
          moveLeft(node);
        else if(ele == 'R')
          moveRight(node);
        else 
          moveUp(node);
      }
      cout<<node<<endl;
    }

   return 0;
}