#include<bits/stdc++.h>
#define mp make_pair
#define pb push_back
#define ppb pop_back
#define mx 100011
#define inf 1000000007
#define ff first
#define ss second
using namespace std;

typedef long long ll;
typedef pair<int,int> pp;
const int mod=1000000007;

inline void scan(int &x) //_unlocked
{
    int c = getchar();
    x = 0;
    for(; (c<48 || c>57); c = getchar());
    for(; c>47 && c<58; c = getchar()) x = (x << 1) + (x << 3) + c - 48;
}


struct node{
    node *next[10];
    int num;
    bool flag;
    node(){
        num = -1;
        flag = 0;
        for(int i=0;i<10;i++){
            next[i] = NULL;
        }
    }
}*root;

void upd(string s,int id){
   // cout<<s<<endl;
    node *cur = root;
    for(int i=0;i<(int)s.length();i++){
        int val = s[i]-48;
        if(cur->next[ val ]==NULL){
            cur->next[ val ] = new node();
            cur->next[ val ]->num = id;
        }
        cur = cur->next[ val  ];
        if( cur->num!=id )
            cur->flag = 1;
    }
}

string ans[70011];

void dfs(node *cur,string s){
    for(int i=0;i<10;i++){
        if(cur->next[i]){
            char c = (char)(i+48);
            int id = cur->next[i]->num;
            string s1 = s+c;
            if( !(cur->next[i]->flag) ){
                if(ans[id].length()>s1.length() || ans[id].length()==0 ){
                    ans[id] = s1;
                }
            }
            dfs(cur->next[i], s1 );
        }
    }
}



int main(  ){
    //freopen("in.txt","r",stdin);

//     freopen("in.txt","w",stdout);



    root = new node();
    int n;
    cin>>n;
    string s;
    for(int i=0;i<n;i++){
        cin>>s;
        for(int k=0;k<s.length();k++){
            string s1="";
            for(int j=k;j<s.length();j++){
                s1+=s[j];
            }
            upd(s1,i);
        }
    }
    dfs(root,"");
    for(int i=0;i<n;i++){
        cout<<ans[i]<<endl;
    }

    return 0;
}

