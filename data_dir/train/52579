#include <bits/stdc++.h>

using namespace std;

#define all(x) begin(x), end(x)

using ll = long long;
using ld = long double;
using pii = pair<int, int>;
using vi = vector<int>;

int gcd(int a, int b) {
    return b ? gcd(b, a % b) : a;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0); cout.tie(0);

    int n, k;
    cin >> n >> k;

    // k doesn't matter, just multiply everything at the end
    //
    // sets:
    // 1 2 3 5
    // 4 7 9 11
    // 6 13 17 19
    // 8 21 23 25
    // 10 27 31 33
    // 12 29 35 37
    // just greedily assign numbers to sets as you go?
    // seems to incresae by 6 each time
    // or not
    //
    // 1 2
    // 3 4
    // 5 6
    // 7 8
    // 9 10
    //
    // 1 2 3
    // 5 6 7
    // 9 4 11
    // 13 8 15

    // 1 2 3 5
    // 4 7 9 11
    //   13 15 17
    //   19 
    vector<vi> ans = {{1, 2, 3, 5}};
    int lst = 11;
    while (ans.size() < n) {
        vi nxt = {lst - 4, lst - 2, lst};
        for (int d = -5; d <= -1; d += 2) {
            bool valid = true;
            for (int x : nxt) {
                if (gcd(x, lst + d) != 1) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                nxt.push_back(lst + d);
                break;
            }
        }

        sort(all(nxt));
        ans.push_back(nxt);
        lst += 6;
    }

    while (ans.size() > n)
        ans.pop_back();

    cout << k * ans.back()[3] << '\n';

    for (auto& row : ans) {
        cout << k * row[0] << ' ' << k * row[1] << ' ' << k * row[2] << ' ' << k * row[3] << '\n';
    }

    return 0;
}
