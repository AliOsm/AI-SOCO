#include <bits/stdc++.h>
#define endl '\n'

using namespace std;
const int MAXN = (int)3e6 + 42;
const int inf = (int)1e9 + 42;

struct edge
{
	int from, to;
	edge() {from = -1; to = -1;}
	edge(int _from, int _to)
	{
		from = _from;
		to = _to;
	}
};

int root = 1;
int n = 4, m;
vector<int> G[MAXN];
edge e[MAXN];

void read()
{
	cin >> m;
	
	G[1].push_back(2);
	G[2].push_back(1);
	G[1].push_back(3);
	G[3].push_back(1);
	G[1].push_back(4);
	G[4].push_back(1);

	for(int i = 0; i < m; i++)
	{
		int u;
		cin >> u;

		G[u].push_back(++n);
		G[n].push_back(u);
		e[2 * i] = edge(u, n);

		G[u].push_back(++n);
		G[n].push_back(u);
		e[2 * i + 1] = edge(u, n);
	}
}

int psz = 0, path[MAXN];

struct segment_tree_rmq
{
	int tr[4 * MAXN];

	void init(int l, int r, int idx)
	{
		if(l == r)
		{
			tr[idx] = path[l];
			return;
		}

		int mid = (l + r) >> 1;
		init(l, mid, 2 * idx + 1);
		init(mid + 1, r, 2 * idx + 2);

		tr[idx] = min(tr[2 * idx + 1], tr[2 * idx + 2]);
	}

	int query(int qL, int qR, int l, int r, int idx)
	{
		if(qL <= l && r <= qR) return tr[idx];
		if(qL > r || qR < l) return inf;

		int mid = (l + r) >> 1;
		return min(query(qL, qR, l, mid, 2 * idx + 1), query(qL, qR, mid + 1, r, 2 * idx + 2));
	}
};

segment_tree_rmq trmq;
int first_occ[MAXN];
int dp[MAXN], real_id[MAXN], id[MAXN];
bool visited[MAXN];

void dfs(int u)
{
	visited[u] = true;
	path[psz++] = id[u];

	int sz = G[u].size(), v;
	for(int i = 0; i < sz; i++)
	{
		v = G[u][i];
		if(!visited[v])
			dfs(v), path[psz++] = id[u];	
	}
}

void bfs(int src)
{
	for(int i = 0; i <= n; i++)
		dp[i] = inf;

	int u, v, curr = 0, sz;
	queue<int> Q;

	dp[src] = 0;
	Q.push(src);
	id[src] = ++curr;
	real_id[curr] = src;

	while(!Q.empty())
	{
		u = Q.front();
		Q.pop();

		sz = G[u].size();
		for(int i = 0; i < sz; i++)
		{
			v = G[u][i];

			if(dp[v] > dp[u] + 1)
			{
				id[v] = ++curr;
				real_id[curr] = v;
				dp[v] = dp[u] + 1;
				Q.push(v);
			}
		}
	}
}

void lca_precompute()
{
	bfs(root);
	dfs(root);

	memset(first_occ, -1, sizeof(first_occ));
	for(int i = 0; i < psz; i++)
		if(first_occ[path[i]] == -1)
			first_occ[path[i]] = i;

	trmq.init(0, psz - 1, 0);
}

int lca(int u, int v)
{
	int l = first_occ[id[u]], r = first_occ[id[v]];
	if(l > r) swap(l, r);
	return real_id[trmq.query(l, r, 0, psz - 1, 0)];
}

int dist(int u, int v)
{
	int l = lca(u, v);
	return dp[u] + dp[v] - 2 * dp[l];
}

int A = 4, B = 2, diam = 2;

void add(int u, int v)
{
	
	int d = max(dist(v, B), dist(v, A));
	if(d > diam)
	{
		diam = d;
		if(dist(v, B) == diam) A = v;	
		else B = v;
	}
}

void solve()
{
	lca_precompute();
	
	for(int i = 0; i < m; i++)
	{
		add(e[2 * i].from, e[2 * i].to);
		add(e[2 * i + 1].from, e[2 * i + 1].to);
		cout << diam << endl;
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	read();
	solve();
	return 0;
}
