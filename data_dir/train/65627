#include <bits/stdc++.h>

using namespace std;

#define int long long

// Warning: Change mod and N according to the question
const int mod = 1e9 + 7;

inline int add(int x, int y, int mod = ::mod) {
  x += y;
  if (x >= mod or x < 0) x %= mod;
  if (x >= 0) return x;
  return x + mod;
} 
inline int mul(int x, int y, int mod = ::mod) {
  if (x >= mod or x + mod < 0) x %= mod;
  if (y >= mod or y + mod < 0) y %= mod;
  x *= y;
  if (x >= mod or x + mod < 0) x %= mod;
  if (x >= 0) return x;
  return x + mod;
}
inline int sub(int x, int y, int mod = ::mod) {
  x -= y;
  if (x + mod < 0 or x >= mod) {
    x %= mod;
  }
  if (x >= 0) return x;
  return x + mod;
}
int po(int x, int n, int mod = ::mod) {
  int res = 1;
  for (;n > 0;) {
    if (n & 1) {
      res = mul(res, x, mod);
    }
    x = mul(x, x, mod);
    n /= 2;
  }
  return res;
}

const int inv = po(2, mod - 2);

int sumR(int n) {
  int x = mul(n, n + 1);
  return mul(x, inv);
}

int sumLR(int l, int r) {
  if (l > r) return 0;
  return sub(sumR(r), sumR(l - 1));
}

signed main() {
  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
  int n, m;
  cin >> n >> m;
  int ans = 0, x = mul(n, m);
  
  if (m > n) m = n;

  const int sqrt = sqrtl(n);
  int st = -1;  

  for (int i = 1; i <= sqrt; ++i) {
    int L = n / (i + 1) + 1;
    int R = min(n / i, m);
    // cout << L << ' ' << R  << '\n';
    ans = add(ans, mul(i, sumLR(L, R)));// if L > R, sum = 0 added
    if (L <= R) st = L - 1;
  }
  if (st == -1) st = m; // if m is less than sqrt(n)
  for (int i = 1; i <= st; ++i) {
    ans = add(ans, mul(i, n / i));
  }
  // cout << ans << '\n';
  cout << sub(x, ans) << '\n';

  return 0;
}