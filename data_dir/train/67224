/**/
#define _USE_MATH_DEFINES
#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define For(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += ((begin) > (end)?-1:1))
#define all( v ) (v).begin(),(v).end()
template<typename T> using V = vector<T>;
typedef long long int ll;
typedef unsigned long long int ull;
/***********************************************/
/*     /    / \
 *    /    /   \
 *    \   /    /
 *     \ /    /
 */
const ll mod = 1000000007;
struct node{
	int mn;
	node * left,* right;
	node(){
		mn = INT_MAX;
		left = nullptr;
		right = nullptr;
	}
}root;
size_t N;
ll s,l;
void build(node & n,size_t L = 0,size_t R = N){
	if(L == R)return;
	n.left = new node();
	n.right = new node();
	size_t md = (L+R)>>1;
	build(*(n.left),L,md);
	build(*(n.right),md+1,R);
}
void upd(node &n,int val,size_t ind,size_t L = 0,size_t R = N){
	if(L == R && ind == L){
		n.mn = val;
		return;
	}
	size_t md = (L+R)>>1;
	if(ind <= md)upd(*(n.left),val,ind,L,md);
	else upd(*(n.right),val,ind,md+1,R);
	n.mn = min(n.left->mn,n.right->mn);
}
size_t qry(node & n,size_t l,size_t r,size_t L = 0,size_t R = N){
	if(l == L && r == R){
		return n.mn;
	}
	size_t res = N+2,md = (L+R) >> 1;
	if(l <= md)res = qry(*(n.left),l,min(r,md),L,md);
	if(r > md)res = min(res,qry(*(n.right),max(l,md+1),r,md+1,R));
	return res;
}
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);

	cin>>N>>s>>l;
	V<int> a(N);
	For(i,0,N)cin>>a[i];
	build(root);
	deque<int> mn,mx;
	upd(root,0,N);
	size_t cur = N-1;
	For(i,N,0){
		while(!mx.empty() && mx.back() < a[i])mx.pop_back();
		mx.pb(a[i]);
		while(!mn.empty() && mn.back() > a[i])mn.pop_back();
		mn.pb(a[i]);
		//cout<<mx.front()<<' '<<mn.front()<<' '<<cur<<endl;

		while(mx.front() - mn.front() > s){
			if(!mx.empty() && mx.front() == a[cur])mx.pop_front();
			if(!mn.empty() && mn.front() == a[cur])mn.pop_front();
			cur--;
		}
		size_t to;
		if(i+l <= cur+1){
			to = 1 + qry(root,i+l,cur+1);
		}else{
			to = N+2;
		}
		upd(root,to,i);
	}
	//For(i,0,N)cout<<qry(root,i,i)<<endl;
	size_t res = qry(root,0,0);
	if(res >= N+2)cout<<"-1\n";
	else cout<<res<<'\n';
	return 0;
}
/**/
