#include<bits/stdc++.h>
#include<random>
using namespace std;

#define MAX 1000002

int n;
int m;

int belong[MAX];

inline int root(int a){
	if (belong[a] == -1)return a;
	belong[a] = root(belong[a]);
	return belong[a];
}
void merge(int a, int b){
	a = root(a);
	b = root(b);
	if (a == b)return;
	belong[a] = b;
}
vector<int> v;
priority_queue<int> q[MAX];
int main(){
	memset(belong, -1, sizeof(belong));
	cin >> n >> m;
	for (int i = 0; i < n; i++){
		int a;
		scanf("%d", &a);
		v.push_back(a);
	}
	for (int i = 0; i < m; i++){
		int a, b;
		scanf("%d%d", &a, &b);
		a--;
		b--;
		merge(a, b);
	}
	for (int i = 0; i < n; i++){
		q[root(i)].push(v[i]);
	}
	for (int i = 0; i < n; i++){
		v[i] = q[root(i)].top();
		q[root(i)].pop();
		if (i)printf(" ");
		printf("%d", v[i]);
	}
	puts("");
	return 0;
}