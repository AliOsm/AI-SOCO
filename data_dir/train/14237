#include <iostream>
#include <cstring>
#include <cstdio>
#include <vector>
using namespace std;
const int Maxn = 510;
int n, m;
char board[Maxn][Maxn];
int dirx[] = {-1, 0, 1, 0};
int diry[] = {0, 1, 0, -1};
bool valid(int x, int y)
{
	return x >= 0 && x < n && y >= 0 && y < m && board[x][y] == '.';
}

struct OP
{
	char op;
	int x, y;
	OP(){}
	OP(char c, int x, int y) : op(c), x(x), y(y) {}
};
vector<OP> vec;
void dfs(int x, int y, int lx = -1, int ly = -1)
{
	board[x][y] = '#';
	for (int i = 0; i < 4; ++i)
	{
		int x1 = x + dirx[i];
		int y1 = y + diry[i];
		if (valid(x1, y1) == false) continue;
		dfs(x1, y1, x, y);
	}
	if (lx != -1)
	{
		vec.push_back(OP('B', lx, ly));
		vec.push_back(OP('R', x, y));
		vec.push_back(OP('D', lx, ly));
	}
	else vec.push_back(OP('B', x, y));
}

int main()
{
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; ++i)
		scanf("%s", board[i]);
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < m; ++j)
		{
			if (board[i][j] == '#') continue;
			dfs(i, j);
		}
	printf("%d\n", vec.size());
	for (int i = 0; i < vec.size(); ++i)
		printf("%c %d %d\n", vec[i].op, vec[i].x + 1, vec[i].y + 1);
	
	return 0;
}
