# include <bits/stdc++.h>

using namespace std;

const int N = 2e5 + 2;

int n, a[N], dist[N], used[N];
vector <int> g[N];
queue < int > q;
map < pair <int, int>, int > ed;

int main(){
      cin >> n;

      for(int i = 1; i < n; i ++){
            int u, v;
            cin >> u >> v;
            g[u].push_back(v);
            g[v].push_back(u);
            ed[{u, v}] = ed[{v, u}] = 1;
      }

      for(int i = 1; i <= n; i ++){
            cin >> a[i];
      }

      if(a[1] != 1){
            puts("No");
            return 0;
      }

      q.push(1);
      used[1] = 1;

      while(!q.empty()){
            int v = q.front();
            q.pop();
            for(int to : g[v]){
                  if(!used[to]){
                        used[to] = 1;
                        dist[to] = dist[v] + 1;
                        q.push(to);
                  }
            }
      }

      for(int i = 2; i <= n; i ++){
            if(dist[a[i - 1]] > dist[a[i]]){
                  puts("No");
                  return 0;
            }
      }

      memset(used, 0, sizeof(used));
      q.push(1);
      used[1] = 1;
      int ps = 1;

      while(!q.empty()){
            int v = q.front();
            q.pop();
            vector <int> v1, v2;
            int pos = ps, fl = !(v == 1);
            for(int i = 0; i < g[v].size() - fl; i ++){
                  v1.push_back(a[++ ps]);
            }
            for(int i = 0; i < g[v].size(); i ++){
                  int to = g[v][i];
                  if(dist[to] > dist[v])
                        v2.push_back(g[v][i]);
            }
            sort(v1.begin(), v1.end());
            sort(v2.begin(), v2.end());
            if(v1 != v2){
                  puts("No");
                  return 0;
            }
            g[v].clear();
            for(int i = 0; i < v1.size(); i ++)
                  g[v].push_back(a[++ pos]);
            for(int to : g[v]){
                  if(used[to]) continue;
                  used[to] = 1;
                  q.push(to);
            }
      }

      puts("Yes");
}
