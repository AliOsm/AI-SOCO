//const int N = 6e5+5;
//bool comp(const pii &a, const pii &b){
//    if(a.Y != b.Y)
//        return a.Y > b.Y;
//    return a.X < b.X;
//}
//int ftree[N];
//int fget(int x){
//    int ans = 0;
//    for(int i = x; i > 0; i -= i&(-i))
//        ans += ftree[i];
//    return ans;
//}
//void fadd(int x){
//    for(int i = x; i < N; i += i&(-i))
//        ftree[i]++;
//}
//void _(){
//    vl all_x, all_y;
//    int n;
//    cin >> n;
//    vpii points(n);
//    cin >> points;
//    for(int i = 0; i < n; ++i){
//        all_x.pb(points[i].X);
//        all_y.pb(points[i].Y);
//        all_x.pb(points[i].X+1);
//        all_x.pb(points[i].X-1);
//        all_y.pb(points[i].Y+1);
//        all_y.pb(points[i].Y-1);
//    }
//    unique(all_x);
//    unique(all_y);
//    for(int i = 0; i < n; ++i){
//        points[i].X = lower_bound(all(all_x),points[i].X) - all_x.begin()+1;
//        points[i].Y = lower_bound(all(all_y),points[i].Y) - all_y.begin()+1;
//    }
//    sort(all(points),comp);
//    map<int,vi> on_y;
//    for(int i = 0; i < n; ++i){
//        on_y[-points[i].Y].pb(points[i].X);
//    }
//    set<int> has;
//    ll ans = 0;
//    for(auto _ : on_y){
//        vi _x = _.Y;
//        assert(is_sorted(all(_x)));
//        vi takes;
//        ll sum = 0, rem = 0;
//        int last_x = 0;
//        for(int x : _x){
//            ll before = fget(x-1)-fget(last_x)+1;
//            sum += before;
//            rem += before*before;
//            last_x = x;
//        }
//        ll last = fget(N-1)-fget(last_x)+1;
//        sum += last;
//        rem += last*last;
//
//        for(int x : _x){
//            if(has.count(x) == 0){
//                has.insert(x);
//                fadd(x);
//            }
//        }
//        ans += sum*sum-rem;
//    }
//    print(ans/2);
//
//}
//
#include <map>
#include <set>
#include <iomanip>
#include <algorithm>
#include <cassert>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define all(v) (v).begin(), (v).end()
#define X first
#define Y second
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<ll> vl;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
template <typename F, typename S> static
istream& operator>>(istream& stream, pair<F, S>& t){
    return stream >> t.first >> t.second;
}
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 vector<T> unique(vector<T>& arr){
    sort(all(arr));
    arr.erase(unique(all(arr)), arr.end());
    return arr;
}
T1 istream& read(T, T, istream& = cin);
T1 istream& operator>>(istream& stream, vector<T>& t){
    return read(all(t), stream);
}
T1 istream& read(T b, T e, istream& stream){
    for(T it = b; it != e; ++it)
        stream >> *it;
    return stream;
}
T1 void print(T x, string end = "\n"){
    cout << x << end;
}
const int N = 6e5+5;
bool comp(const pii &a, const pii &b){
    if(a.Y != b.Y)
        return a.Y > b.Y;
    return a.X < b.X;
}
int ftree[N];
int fget(int x){
    int ans = 0;
    for(int i = x; i > 0; i -= i&(-i))
        ans += ftree[i];
    return ans;
}
void fadd(int x){
    for(int i = x; i < N; i += i&(-i))
        ftree[i]++;
}
void _(){
    vl all_x, all_y;
    int n;
    cin >> n;
    vpii points(n);
    cin >> points;
    for(int i = 0; i < n; ++i){
        all_x.pb(points[i].X);
        all_y.pb(points[i].Y);
        all_x.pb(points[i].X+1);
        all_x.pb(points[i].X-1);
        all_y.pb(points[i].Y+1);
        all_y.pb(points[i].Y-1);
    }
    unique(all_x);
    unique(all_y);
    for(int i = 0; i < n; ++i){
        points[i].X = lower_bound(all(all_x),points[i].X) - all_x.begin()+1;
        points[i].Y = lower_bound(all(all_y),points[i].Y) - all_y.begin()+1;
    }
    sort(all(points),comp);
    map<int,vi> on_y;
    for(int i = 0; i < n; ++i){
        on_y[-points[i].Y].pb(points[i].X);
    }
    set<int> has;
    ll ans = 0;
    for(auto _ : on_y){
        vi _x = _.Y;
        assert(is_sorted(all(_x)));
        vi takes;
        ll sum = 0, rem = 0;
        int last_x = 0;
        for(int x : _x){
            ll before = fget(x-1)-fget(last_x)+1;
            sum += before;
            rem += before*before;
            last_x = x;
        }
        ll last = fget(N-1)-fget(last_x)+1;
        sum += last;
        rem += last*last;
        for(int x : _x){
            if(has.count(x) == 0){
                has.insert(x);
                fadd(x);
            }
        }
        ans += sum*sum-rem;
    }
    print(ans/2);
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        _();
}
