#include <bits/stdc++.h>
using namespace std;
#define pf pop_front
#define pb push_back
#define ulli unsigned long long int
#define LL ulli
#define FOR(i,begin,end) for (LL i=begin;i<=end;i++)
#define rep(i,t) for (LL i=0;i<t;i++)
#define pii pair<LL,LL>
#define pi pair<LL,pair<LL,LL> >
const LL MAX=3*(1e5+7),inf=1e15+1,N=1e5+6;
LL n,m,x,y,z,w,d[MAX],capital,sum;
vector<pi>a[MAX];
bool v[MAX],c[MAX];
set<pii>q;
vector<ulli>ans;
void dijkstra(LL start)
{
	FOR(i,1,n)
	{
		d[i]=inf;
		if(i!=start)q.insert(pii(d[i],i));
	}
	d[start]=0;
	q.insert(pii(d[start],start));
	FOR(i,1,n)
	{
		LL now=q.begin()->second;
		v[now]=true;
		q.erase(pii(d[now],now));
		rep(j,a[now].size())
		{
			LL cur=a[now][j].first,dis=a[now][j].second.first;
			if(!v[cur] && d[cur]>d[now]+dis)
			{
				q.erase(pii(d[cur],cur));
				d[cur]=d[now]+dis;
				q.insert(pii(d[cur],cur));
			}
		}
	}
}
void dfs(LL start)
{
	c[start]=true;
	LL help=inf,indice=0,pointer;
	rep(i,a[start].size())
	{
		LL now=a[start][i].first,dis=a[start][i].second.first;
		if(d[now]+dis==d[start] && dis<help)
		{
			pointer=now;
			help=dis;
			indice=a[start][i].second.second;
		}
	}
	ans.pb(indice);
	sum+=help;
	if(!c[pointer])
	{
		dfs(pointer);
	}
}
int main()
{	
	cin>>n>>m;
	FOR(i,1,m)
	{
		cin>>x>>y>>w;
		a[x].pb(pi(y,pii(w,i)));
		a[y].pb(pi(x,pii(w,i)));
	}
	cin>>capital;
	dijkstra(capital);
	c[capital]=true;
	FOR(i,1,n)
	{
		if(!c[i])
		{
			dfs(i);
		}
	}
	sort(ans.begin(),ans.end());
	cout<<sum<<"\n";
	rep(i,ans.size())
	{
		cout<<ans[i]<<" ";
	}
	return cout<<"\n",0;
}