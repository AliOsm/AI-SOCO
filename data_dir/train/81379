#include<bits/stdc++.h>
using namespace std;
typedef long double lod;
typedef long long ll;
typedef long double ld;
const ld eps=1e-8;
const ld pi=acos(-1.0);
int sgn(ld x)
{
    if (x<-eps) return -1;
    if (x>eps) return 1;
    return 0;
}
 
struct P; //�㣬����
struct LINE; //�߶Σ����ߣ�ֱ��;
struct CIRCLE;
struct TRIANGLE;
struct POLYGON;
 
void kr(ld &x)
{
    double t; scanf("%lf",&t);
    x=t;
}
void kr(ll &x)
{
    scanf("%I64d",&x);
}
struct P
{
    lod x,y;
    void read()
    {
        kr(x); kr(y);
    }
    P operator+(const P &t)const
    {
        return {x+t.x,y+t.y};
    }
    P operator-(const P &t)const
    {
        return {x-t.x,y-t.y};
    }
    P operator*(ld t)const
    {
        return {x*t,y*t};
    }
    P operator/(ld t)const
    {
        return {x/t,y/t};
    }
    lod operator*(const P &t)const
    {
        return x*t.y-y*t.x;
    } //���
    lod operator%(const P &t)const
    {
        return x*t.x+y*t.y;
    } //���
    bool operator<(const P &t)const
    {
        return sgn(x-t.x)<0||sgn(x-t.x)==0&&sgn(y-t.y)<0;
    }
    bool operator==(const P &t)const
    {
        return sgn(x-t.x)==0&&sgn(y-t.y)==0;
    }
    ld ang()const
    {
        return atan2(y,x);
    }
    ld length()const
    {
        return sqrt(x*x+y*y);
    }
    P rotate(const P &t,ld sita)const
    {
        return {(x-t.x)*cos(sita)-(y-t.y)*sin(sita)+t.x,
                (x-t.x)*sin(sita)+(y-t.y)*cos(sita)+t.y};
    } //��ʱ��תsita
    ld btang(const P &t)const
    {
        return acos( (*this%t)/length()/t.length() );
    } //�����н�
    P midvec(const P &t)const
    {
        return (*this)/length()+t/t.length();
    } //��ƽ������
};
 
struct LINE
{
    P p1,p2;
    void read()
    {
        p1.read(); p2.read();
    }
    LINE midLINE()
    {
        P midp=(p1+p2)/2;
        P v=p2-p1;
        v=v.rotate({0,0},pi/2);
        return {midp,midp+v};
    } //�д���
    bool have1(const P &p)const
    {
        return sgn( (p-p1)*(p-p2) )==0&&sgn( (p-p1)%(p-p2) )<=0;
    } //�߶����е�
    bool have2(const P &p)const
    {
        return sgn( (p-p1)*(p-p2) )==0&&sgn( (p-p1)%(p2-p1) )>=0;
    } //�������е�
    bool have3(const P &p)const
    {
        return sgn( (p-p1)*(p-p2) )==0;
    } //ֱ�����е�
    lod areawith(const P &p)const
    {
        return abs( (p1-p)*(p2-p)/2 );
    } //�߶κ͵�Χ�����
    P vecfrom(const P &p)const
    {
        P v=(p2-p1);
        v=v.rotate({0,0},pi/2);
        ld s1=(p1-p)*(p2-p);
        ld s2=v*(p2-p1);
        v=v*(s1/s2);
        return v;
    }//�㵽ֱ�ߴ��������
    P footfrom(const P &p)const
    {
        P v=vecfrom(p);
        return p+v;
    } //�㵽ֱ�ߴ���
    ld dis1from(const P &p)const
    {
        P foot=footfrom(p);
        if (have1(foot)) return (foot-p).length();
        return min( (p1-p).length(),(p2-p).length());
    }//�㵽�߶ξ���
    ld dis2from(const P &p)const
    {
        P foot=footfrom(p);
        if (have2(foot)) return (foot-p).length();
        return (p1-p).length();
    }//�㵽���߾���
    ld dis3from(const P &p)const
    {
        return vecfrom(p).length();
    }//�㵽ֱ�߾���
    P symP(const P &p)const
    {
        P v=vecfrom(p);
        return p+v*2;
    } //�����ֱ�ߵĶԳƵ�
 
 
 
    //1�߶� 2���� 3ֱ��
    bool isct11(const LINE &L)const
    {
        P a1=p1,a2=p2;
        P b1=L.p1,b2=L.p2;
        if (sgn( max(a1.x,a2.x)-min(b1.x,b2.x) )<0||
            sgn( max(b1.x,b2.x)-min(a1.x,a2.x) )<0||
            sgn( max(a1.y,a2.y)-min(b1.y,b2.y) )<0||
            sgn( max(b1.y,b2.y)-min(a1.y,a2.y) )<0)
                return 0;
        lod tmp1=(a2-a1)*(b1-a1);
        lod tmp2=(a2-a1)*(b2-a1);
        if (sgn(tmp1)<0&&sgn(tmp2)<0||sgn(tmp1)>0&&sgn(tmp2)>0) return 0;
        tmp1=(b2-b1)*(a1-b1);
        tmp2=(b2-b1)*(a2-b1);
        if (sgn(tmp1)<0&&sgn(tmp2)<0||sgn(tmp1)>0&&sgn(tmp2)>0) return 0;
        return 1;
    }
    //ǰ���ǲ��غ����н���,p1��p2-p1���򵽴�L�ϵĳ��ȣ�������ʾ����
    //ֱ�߽��������Ҫ�õ�
    ld dis33(const LINE &L)const
    {
        return (L.p1-p1)*(L.p2-p1) / ( (p2-p1)*(L.p2-L.p1) )
                * (p2-p1).length();
    }
    P isctPoint(const LINE &L)const
    {
        ld len=dis33(L);
        P v=p2-p1;
        return p1+v*(len/v.length());
    }
};
ll n,x,y,z,w,ans;
LINE a[1001];
map<pair<ll,ll>,set<ll> >f;
ll gcd(ll x,ll y){return y?gcd(y,x%y):x;}
bool check(lod k){return fabs(k-round(k))<eps;}
#define mp make_pair
int main()
{
	kr(n);
	for(ll i=1;i<=n;i++)
	  {
	  kr(x),kr(y),kr(z),kr(w);
	  ll dx=abs(z-x),dy=abs(w-y);
	  ans+=gcd(dx,dy)+1;
	  a[i]={{(lod)x,(lod)y},{(lod)z,(lod)w}};
	  }
	for(ll i=1;i<=n;i++)
	  for(ll j=i+1;j<=n;j++)
	    if(a[i].isct11(a[j]))
	      {
	      P p=a[i].isctPoint(a[j]);
	      if(check(p.x) && check(p.y))
	        f[mp(round(p.x),round(p.y))].insert(i),
			f[mp(round(p.x),round(p.y))].insert(j);
		  }
	for(auto x:f)ans-=(ll)x.second.size()-1;
	printf("%I64d\n",ans);
	return 0;
}
