#pragma comment (linker, "/STACK:64000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>
 
#define pb push_back
#define pii pair<int, int>
#define piiii pair<pii, pii>
#define mp make_pair
#define sq(x) ((x)*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define INF ((int)(1e9) + 1)
#define LINF ((long long)(5e18))
#define EPS (1e-9)
#define PI (3.1415926535897932384626433832795)
#define y1 asdf_1
#define y0 asdf_2
#define j0 jj0
#define MOD 1000000007
//#define HMOD 536870911
//#define HMOD ((long long)(1e18) + 3LL)
//#ifdef _MY_DEBUG
//#define HMOD 1000000007
//#endif
#define MAX 2000000000
#define HBASE 1009
 
typedef long long int64;
typedef unsigned long long uint64;
typedef long double ldd;
 
using namespace std;

typedef pair<double, int> pdi;

const int MAXN = 1000005;

int n;
int a[MAXN];
vector <int> cand, res;
int64 q1, q2;
int64 dp[MAXN][3];
int64 ans = LINF;

void add_primes(int v)
{
	if (v)
	{
		vector <int> res;
		int k = (sqrt(double(v) + 0.5));
		for (int i = 2; i <= k; i++)
		{
			if (v % i == 0)
			{
				res.push_back(i);
				while (v % i == 0)
				{
					v /= i;
				}
			}
		}
		if (v > 1)
		{
			res.push_back(v);
		}
		cand.insert(cand.begin(), res.begin(), res.end());
	}
}

int64 calc_dp(int prime)
{
	memset(dp, 127, sizeof(dp));
	dp[0][0] = 0;
	for (int i = 1; i <= n; i++)
	{
		dp[i][1] = min(dp[i - 1][1], dp[i - 1][0]) + q1;
		if ((a[i] - 1) % prime == 0 || (a[i] + 1) % prime == 0)
		{
			dp[i][0] = dp[i - 1][0] + q2;
			dp[i][2] = min(dp[i - 1][2], dp[i - 1][1]) + q2;
		}
		if ((a[i]) % prime == 0)
		{
			dp[i][0] = dp[i - 1][0];
			dp[i][2] = min(dp[i - 1][2], dp[i - 1][1]);
		}
	}
	return min(dp[n][0], min(dp[n][1], dp[n][2]));
}

void solve()
{
	scanf ("%d%I64d%I64d", &n, &q1, &q2);
	for (int i = 1; i <= n; i++)
	{
		scanf ("%d", &a[i]);
	}
	add_primes(a[1] - 1);
	add_primes(a[1]);
	add_primes(a[1] + 1);
	add_primes(a[n] - 1);
	add_primes(a[n]);
	add_primes(a[n] + 1);
	sort(cand.begin(), cand.end());
	cand.erase(unique(cand.begin(), cand.end()), cand.end());
	for (int i = 0; i < cand.size(); i++)
	{
		ans = min(ans, calc_dp(cand[i]));
	}
	cout << ans;
}

void precalc()
{
	
}

#define TASK king
 
int main()
{
    //ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
    srand(1363);
	precalc();
	int tests = 1;
	//scanf ("%d", &tests);
	for (int i = 1; i <= tests; i++)
	{
		solve();
	}
    return 0;
}