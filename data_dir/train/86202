#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;


int main(){
   IOS;
 //    #ifndef ONLINE_JUDGE
 //        freopen("in.txt",  "r",  stdin);
 //        freopen("out.txt", "w", stdout);
 //    #endif
   
   long int n;
   cin>>n;

   vector<long int> v(n);
   ordered_set available;

   for(long int i = 0; i < n; i++){
   	cin>>v[i];
   	available.insert(i);
   }

   available.insert(n);
   v.push_back(1e18);

   long int t;
   cin>>t;
   ht waterInVessel;

   while(t--){
   	long int x;
   	cin>>x;

   	if(x == 1){	
   		long int water, vessel;
   		cin>>vessel>>water;

   		long int availableVessel = *available.lower_bound(vessel - 1);
   		if(availableVessel == n)
   			continue;
   		while(water > 0){
   			long int availableVesselSize = v[availableVessel];
   			long int availableVesselFilled = waterInVessel[availableVessel];

   			long int space = min(availableVesselSize - availableVesselFilled,water);
   			waterInVessel[availableVessel] += space;
   			water -= space;
   			if(waterInVessel[availableVessel] == v[availableVessel])
   				available.erase(availableVessel);
   			availableVessel++;
   		}
   	}	
   	else{
   		long int vessel;
   		cin>>vessel;
   		cout<<waterInVessel[vessel - 1]<<endl;
   	}
   }

   // for(auto ele : waterInVessel)
   // 	cout<<ele.first<<" "<<ele.second<<endl;
   return 0;
}