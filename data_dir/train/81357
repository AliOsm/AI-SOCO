#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
 
  
  
using namespace std;
  
  


#define ll long long

const int N = 228228;

struct tup {
	int a, b;
	ll h;
};


ll dp[N], d[4 * N];


void update(int v, int l, int r, int i, ll x) {
	if (l == r) {
		d[v] = max(d[v], x);
	} else {
		int m = (l + r) >> 1;
		if (i <= m) {
			update(v << 1, l, m, i, x);
		} else {
			update((v << 1) + 1, m + 1, r, i, x);
		}
		d[v] = max(d[v << 1], d[(v << 1) + 1]);
	}
}

ll Rmq(int v, int vl, int vr, int l, int r) {
	if (l > r) {
		return 0LL;
	}
	if (vl > r || vr < l) {
		return 0LL;
	}
	if (l <= vl && vr <= r) {
		return d[v];
	}
	int vm = (vl + vr) >> 1;
	return max(Rmq(v << 1, vl, vm, l, r), Rmq((v << 1) + 1, vm + 1, vr, l, r));
}

void upd(int i, ll x) {
	update(1, 1, N, i, x);
}

ll rmq(int l, int r) {
	return Rmq(1, 1, N, l, r);
}


bool cmp(tup x, tup y) { // x < y
	return x.b > y.b || (x.b == y.b && x.a > y.a);
}


int main() {
	int n;
	scanf("%d", &n);
	vector<int> tmp;
	vector<tup> v(n);
	for (int i = 0; i < n; ++i) {
		scanf("%d %d %lld", &v[i].a, &v[i].b, &v[i].h);
		tmp.push_back(v[i].a);
		tmp.push_back(v[i].b);
	}
	sort(tmp.begin(), tmp.end());
	tmp.erase(unique(tmp.begin(), tmp.end()), tmp.end());
	for (int i = 0; i < n; ++i) {
		v[i].a = lower_bound(tmp.begin(), tmp.end(), v[i].a) - tmp.begin() + 1;
		v[i].b = lower_bound(tmp.begin(), tmp.end(), v[i].b) - tmp.begin() + 1;
	}
	sort(v.begin(), v.end(), cmp);
	dp[1] = v[0].h;
	upd(v[0].a, dp[1]);
	for (int i = 2; i <= n; ++i) {
		dp[i] = rmq(1, v[i - 1].b - 1) + v[i - 1].h;
		upd(v[i - 1].a, dp[i]);
	}
	ll maxim = 0LL;
	for (int i = 1; i <= n; ++i) {
		maxim = max(maxim, dp[i]);
	}
	cout << maxim << endl;
	return 0;
}



