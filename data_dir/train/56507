#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PII;
typedef pair<ll , ll> PLL;
typedef long double ld;

#define pb push_back
#define all(c) c.begin(),c.end()
#define allr(c) c.rbegin(),c.rend()
#define mod 998244353
#define PI 3.14159265
#define endl '\n'
#define MAX 300001

inline int add(int x, int y){ x += y; if(x >= mod) x -= mod; return x;}
inline int sub(int x, int y){ x -= y; if(x < 0) x += mod; return x;}
inline int mul(int x, int y){ return (x * 1ll * y) % mod;}
inline int pwr(int a, ll b){
	int x = 1 % mod;
	while(b){
		if(b & 1) x = mul(x, a);
		a = mul(a, a);
		b >>= 1;
	}
	return x;
}
inline int inv(int a){ return pwr(a, mod - 2);}


vector <int> adj[MAX];

bool vis[MAX];
int col[MAX], cnt[2];
bool can;

bool dfs (int s, int color) {
    col[s] = color;
    cnt[color]++;
    vis[s] = true;
    for (auto it : adj[s]) {
        if (!vis[it]) {
            dfs(it, 1 - color);
        }
        if (col[it] == col[s]) {
            can = false;
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        int u, v;
        for (int i = 0; i < m; i++) {
            cin >> u >> v;
            u--;
            v--;
            adj[u].pb(v);
            adj[v].pb(u);
        }
        for (int i = 0; i < n; i++) {
            vis[i] = false;
        }
        int ans = 1;
        can = true;
        for (int i = 0; i < n; i++) {
            if (!vis[i]) {
                cnt[0] = cnt[1] = 0;
                dfs(i, 0);
                if (can) {
                    int temp = add(pwr(2, cnt[0]), pwr(2, cnt[1]));
                    ans = mul(ans, temp);
                }
            }
        }
        if (can) {
            cout << ans << endl;
        }
        else {
            cout << "0" << endl;
        }
        for (int i = 0; i < n; i++) {
            adj[i].clear();
        }
    }

    return 0;
}
