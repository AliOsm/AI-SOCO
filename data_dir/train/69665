#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>

using namespace std;
typedef long long ll;
typedef double db;

struct point
{
    int x, y;
    point(int _x=0, int _y=0): x(_x), y(_y) {}

};

bool operator == (const point& A, const point& B) {return A.x==B.x && A.y==B.y;}

db dist(const point& A , const point& B)
{
    db dx=A.x-B.x;
    db dy=A.y-B.y;
    return sqrt(dx*dx+dy*dy);
}

const int MAXPNTS=100;
db dists[MAXPNTS][MAXPNTS];

void solve(int n, int m)
{
    //if(n<m) swap(n, m); // n>=m
    point cnd[MAXPNTS];
    int sz=0;

    for(int i=0; i<=1 && i<=n; i++)
    {
        for(int j=0; j<=1 && j<=m; j++)
        {
            //cnd.push_back(point(i, j));
            cnd[sz++]=point(i, j);
        }
		
		for(int j=m; j>=m-1 && j>=0; j--)
        {
            //cnd.push_back(point(i, j));
            cnd[sz++]=point(i, j);
        }
    }

    for(int i=n; i>=n-1 && i>=0; i--)
    {
        for(int j=m; j>=m-1 && j>=0; j--)
        {
            //cnd.push_back(point(i, j));
            cnd[sz++]=point(i, j);
        }
		
		for(int j=0; j<=1 && j<=m; j++)
        {
            //cnd.push_back(point(i, j));
            cnd[sz++]=point(i, j);
        }
    }

    for(int i=0; i<sz; i++)
    {
        for(int j=0; j<sz; j++)
        {
            dists[i][j]=dist(cnd[i], cnd[j]);
        }
    }

    //cout << "OK!\n";

    // calc
    db result=0.0;
    point ans[4];
    point curr[4];
    //cout << sz << endl;

    for(int i=0; i<sz; i++)
    {
        for(int j=0; j<sz; j++)
        {
            //if(i==j) continue;
            for(int k=0; k<sz; k++)
            {
                //if(k==i || k==j) continue;
                for(int l=0; l<sz; l++)
                {
                    //if(l==k || l==j || l==i) continue;
                    //cout << l << endl;
                    //cout << result << endl;
                    //cout << l << '\n';
                    curr[0]=cnd[i];
                    curr[1]=cnd[j];
                    curr[2]=cnd[k];
                    curr[3]=cnd[l];

                    db curr_res=0.0;
                    curr_res+=dists[i][j];
                    curr_res+=dists[j][k];
                    curr_res+=dists[k][l];

                    //for(int t=1; t<4; t++) curr_res+=dist(curr[t], curr[t-1]);
                    if(curr_res>result)
                    {
                        curr[0]=cnd[i];
                        curr[1]=cnd[j];
                        curr[2]=cnd[k];
                        curr[3]=cnd[l];
                        bool ok=true;
                        for(int t1=0; t1<4; t1++)
                        {
                            for(int t2=t1+1; t2<4; t2++)
                            {
                                if(curr[t2]==curr[t1]) ok=false;
                            }
                        }
                        if(ok)
                        {
                            result=curr_res;
                            for(int t=0; t<4; t++) ans[t]=curr[t];
                        }
                    }
                }
            }
        }
    }

    for(int i=0; i<4; i++)
    {
        cout << ans[i].x << ' ' << ans[i].y << '\n';
    }
}

int main()
{
    //ios_base::sync_with_stdio(false);
    //cin.tie(NULL); cout.tie(NULL);

    int n, m;
    cin >> n >> m;
    solve(n, m);
    return 0;
}
