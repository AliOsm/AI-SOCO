#include <cstdio>
#include <cstring>

#include <vector>
#include <algorithm>

using namespace std;

typedef pair<int,int> II;

#define INF 0x3f3f3f3f

int N;
int A[1004];

int DP[1004][1004];
int P[1004][1004];
II CP[1004][1004];

int main(int argc, char* argv[]) {
   scanf("%d", &N);
   for (int i = 0; i < N; ++i)
      scanf("%d", A+i);
   if (N <= 2) {
      if (N == 1) {
         printf("%d\n", A[0]);
         puts("1");
      }
      else {
         printf("%d\n", max(A[0], A[1]));
         puts("1 2");
      }
      return 0;
   }

   int N1 = N;
   if ((N1 & 1) == 0)
      A[N1++] = INF;

   memset(DP, 0x3f, sizeof(DP));
   DP[0][0] = 0;
   for (int i = 0; i < N1-2; i += 2) {
      for (int j = 0; j <= i; ++j) {
         if (DP[i][j] >= INF) continue;
         // select j to stay in queue
         if (DP[i+2][j] > DP[i][j] + max(A[i+1], A[i+2])) {
            DP[i+2][j] = DP[i][j] + max(A[i+1], A[i+2]);
            CP[i+2][j] = II(i+1, i+2);
            P[i+2][j] = j;
         }
         
         // select i+1 to stay in queue
         if (DP[i+2][i+1] > DP[i][j] + max(A[j], A[i+2])) {
            DP[i+2][i+1] = DP[i][j] + max(A[j], A[i+2]);
            CP[i+2][i+1] = II(j, i+2);
            P[i+2][i+1] = j;
         }

         // select i+2 to stay in queue
         if (DP[i+2][i+2] > DP[i][j] + max(A[j], A[i+1])) {
            DP[i+2][i+2] = DP[i][j] + max(A[j], A[i+1]);
            CP[i+2][i+2] = II(j, i+1);
            P[i+2][i+2] = j;
         }
      }
   }

// printf("N: %d\n", N);

   if (N != N1)
      A[N1-1] = 0;
   int minj = 0;
   for (int j = 1; j < N1; ++j) {
      if (DP[N1-1][j] + A[j] < DP[N1-1][minj] + A[minj])
         minj = j;
   }
// printf("minj: %d\n", minj);
   printf("%d\n", DP[N1-1][minj] + A[minj]);

   vector<II> res;
   for (int i = N1-1, j = minj; i > 0; j = P[i][j], i -= 2)
      res.push_back(CP[i][j]);

   reverse(res.begin(), res.end());
   for (int j = 0; j < (int) res.size(); ++j)
      printf("%d %d\n", res[j].first+1, res[j].second+1);
   if (A[minj])
      printf("%d\n", minj+1);

   return 0;
}
