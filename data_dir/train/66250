#include <bits/stdc++.h>
using namespace std;

int h;
vector<int> tr[1<<8];
bool tk[1<<8];
int cnt;
void getN(int i)
{
	if (tk[i])
		return;
	cnt++;
	tk[i] = true;
	cout<<"? "<<i<<endl;
	fflush(stdout);
	int k;
	cin>>k;
	for (int j = 0; j < k; j++)
	{
		int y;
		cin>>y;
		tr[i].push_back(y);
	}
}

int getF(int i)
{
	getN(i);
	for (int j = 0; j < tr[i].size(); j++)
		if (!tk[tr[i][j]])
			return tr[i][j];
	return -1;
}
pair<int, int> getNewPath(int i, int lev)
{
	bool found = false;
	int cur = i;
	vector<int> pth;
	while (true)
	{
		pth.push_back(cur);
		getN(cur);
		int k = tr[cur].size();
		if (k == 1)
			break;
		if (k == 2)
		{
			found = true;
			break;
		}
		cur = getF(cur);
	}
	if (found)
		return make_pair(cur, h-1);
	int len = -1;
	if (tr[i].size() == 1)
		len = 1;
	else if (lev != -1)
		len = pth.size() + lev;
	else
	{
		cur = getF(i);
		reverse(pth.begin(), pth.end());
		while (true)
		{
			pth.push_back(cur);
			getN(cur);
			int k = tr[cur].size();
			if (k == 1)
				break;
			if (k == 2)
			{
				found = true;
				break;
			}
			cur = getF(cur);
		}
		len = pth.size();
	}
	if (found)
		return make_pair(cur, h-1);
	len--;
	len /= 2;
	int lca = pth[pth.size() - len - 1];
	int ans = getF(lca);
	if (ans == -1)
		return make_pair(lca, h-1);
	return make_pair(ans, len + 1);
}

int findAns(int i, int lev)
{
	if (lev == h-1)
		return i;
	if (lev != -1 && lev == h-2)
	{
		getN(i);
		for (int j = 0; j < tr[i].size() - 1; j++)
		{
			getN(tr[i][j]);
			if (tr[tr[i][j]].size() == 2)
				return tr[i][j];
		}
		return tr[i].back();
	}
	if (lev != -1 && lev == h-3)
	{
		getN(i);
		vector<int> lev2;
		for (int j = 0; j < tr[i].size(); j++)
		{
			int u = tr[i][j];
			if (tk[u])
				continue;
			getN(u);
			for (int k = 0; k < tr[u].size(); k++)
			{
				if (!tk[tr[u][k]])
					lev2.push_back(tr[u][k]);
			}
		}
		for (int j = 0; j < lev2.size() - 1; j++)
		{
			getN(lev2[j]);
			if (tr[lev2[j]].size() == 2)
				return lev2[j];
		}
		return lev2.back();
	}
	pair<int, int> res = getNewPath(i, lev);
	return findAns(res.first, res.second);
}

int main()
{
	int t;
	cin>>t;
	while (t--)
	{
		cnt = 0;
		memset(tk, 0, sizeof(tk));
		for (int i = 0; i < (1<<8); i++)
			tr[i].clear();
		cin>>h;
		cout<<"! "<<findAns(1, -1)<<endl;
		fflush(stdout);
	}
}