#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 100, inF = N;

int n, m, l, r, cnt[N], dp[N], ans[N];

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> n >> m;
	while(n--) {
		cin >> l >> r;
		cnt[--l]++;
		cnt[r]--;
	}
	for (int i = 1; i < m; i++)
		cnt[i] += cnt[i - 1];
	fill(ans, ans + N, -1);
	fill(dp, dp + N, inF);
	dp[0] = -inF;
	for (int i = 0; i < m; i++) {
		int dex = upper_bound(dp, dp + N, cnt[i]) - dp;
		dp[dex] = cnt[i];
		ans[i] += dex;
	}
	fill(dp, dp + N, inF);
	dp[0] = -inF;
	for (int i = m - 1; ~i; i--) {
		int dex = upper_bound(dp, dp + N, cnt[i]) - dp;
		dp[dex] = cnt[i];
		ans[i] += dex;
	}
	cout << *max_element(ans, ans + N);
	return 0;
}
