#include <bits/stdc++.h>
using namespace std;

#ifdef SG
    #include <debug.h>
#else
    #define show(...)
    #define debug(...)
    #define deepen(...)
    #define timer(...)
#endif

#define ARG4(_1,_2,_3,_4,...) _4

#define forn3(i,l,r) for (int i = int(l); i < int(r); ++i)
#define forn2(i,n) forn3 (i, 0, n)
#define forn(...) ARG4(__VA_ARGS__, forn3, forn2) (__VA_ARGS__)

#define ford3(i,l,r) for (int i = int(r) - 1; i >= int(l); --i)
#define ford2(i,n) ford3 (i, 0, n)
#define ford(...) ARG4(__VA_ARGS__, ford3, ford2) (__VA_ARGS__)

#define forv(i,v) for (auto i = v.begin(); i != v.end(); ++i)
#define forr(i,v) for (auto i = v.end(); i != v.begin() && (--i, 1); )
#define ve vector
#define pa pair
#define tu tuple
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fs first
#define sc second
#define all(a) (a).begin(), (a).end()
#define sz(a) ((int)(a).size())

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef unsigned char uc;
typedef pa<int, int> pii;
typedef pa<int, ll> pil;
typedef pa<ll, int> pli;
typedef pa<ll, ll> pll;
typedef ve<int> vi;

const ld pi = 3.1415926535897932384626433832795l;

template<typename T> inline auto sqr (T x) -> decltype(x * x) {return x * x;}
template<typename T> inline T abs (T x) {return x > T() ? x : -x;}
template<typename T1, typename T2> inline bool umx (T1& a, T2 b) {if (a < b) {a = b; return 1;} return 0;}
template<typename T1, typename T2> inline bool umn (T1& a, T2 b) {if (b < a) {a = b; return 1;} return 0;}

const int N = 310;

struct Input {
    int l[N];
    int c[N];
    int n;  

    bool read () {
        if (scanf ("%d", &n) != 1)
            return 0;
        forn(i, n) {
            scanf ("%d", &l[i]);
        }
        forn(i, n) {
            scanf ("%d", &c[i]);
        }
        return 1;
    }

    void init (const Input &input) {
        *this = input;
    }
};

const ll inf = 1000000000;

struct Data: Input {
    int ans;        

    void write () {
        if (ans == inf) {
            cout << -1 << endl;
        } else {
            cout << ans << endl;
        }
    }
    
    virtual void solve () {}
    
    virtual void clear () {
        *this = Data();
    }
};

const int K = 500 * 700;

struct Solution: Data {
    int d[2][K];

    vector <int> p;
    map <int, int> num;

    inline int gcd (int a, int b) {
        if (a == 0 || b == 0) {
            return a + b;
        }
        return gcd(b, a % b);
    }

    
    void solve () {
        forn(i, 2) {
            forn(j, K) {
                d[i][j] = inf;
            }
        }
        d[0][0] = 0;
        forn(i, n) {
            for (int j = 1; j * j <= l[i]; ++j) {
                if (l[i] % j == 0) {
                    p.pb(j);
                    p.pb(l[i] / j);
                }
            }
        }
        p.pb(0);
        sort(all(p));
        p.erase(unique(all(p)), p.end());
        sort(all(p));
        //debug(all(p));
        forn(i, p.size()) {
            num[p[i]] = i;
        }
        forn(i, n) {
            int i0 = (i & 1), i1 = i0 ^ 1;
            forn(j, p.size()) {
                int k = gcd(p[j], l[i]);
                //debug(num[k]);
                umn(d[i1][num[k]], d[i0][j] + c[i]);            
                umn(d[i1][j], d[i0][j]);
                if (j > 0) 
                    d[i0][j] = inf;
            }
        }
        ans = d[n & 1][1];  
    }

    
    void clear () {
        *this = Solution();
    }
};

Solution sol;

int main () {
    cout.setf(ios::showpoint | ios::fixed);
    cout.precision(20);
#ifdef SG
    freopen("b.in", "r", stdin);
//  freopen("output.txt", "w", stdout);
    while (sol.read()) {
        sol.solve();
        sol.write();
        sol.clear();
    }
#else
//  freopen("", "r", stdin);
//  freopen("", "w", stdout);
    sol.read();
    sol.solve();
    sol.write();
#endif

    return 0;
}
