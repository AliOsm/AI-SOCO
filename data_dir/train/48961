#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <ctime>
#include <map>
#include <iterator>
#include <queue>
#include <list>
#include <stack>
#include <set>
#include <functional>
#include <string>

using namespace std;

typedef long long ll;
typedef long double ld;

const int NMax = 1001;
const int INF = int(1e9);
const int sizeTree = 262145;
const double eps = 1e-9;
const double PI = 3.141592653589793238462;
const int MOD = int(1e9);

#define SQR(x) ((x) * (x))
#define ABS(x) ((x) < (0) ? (-(x)) : (x))
#define SZ(x) (int) (x).size()

struct cell
{
	int x, y, h;
	cell (int x, int y, int h) : x(x), y(y), h(h) {}
};

bool status[NMax][NMax];
queue < cell > q;
int c[NMax][NMax];
int n, m, exit_x, exit_y, ans = 0, k;
char ch[NMax][NMax];
int dx[4] = {0, 0, -1, 1};
int dy[4] = {-1, 1, 0, 0};



void bfs(int y, int x)
{
	status[y][x] = true;
	q.push(cell(x, y, 0));
	while (!q.empty())
	{
		cell tmp = q.front();
		q.pop();
		for (int i = 0;i < 4;i++)
		{
			if (tmp.x + dx[i] < 1 || tmp.x + dx[i] > m || tmp.y + dy[i] < 1 || tmp.y + dy[i] > n) continue;
			if (ch[tmp.y + dy[i]][tmp.x + dx[i]] == 'T') continue;
			if (status[tmp.y + dy[i]][tmp.x + dx[i]] == true) continue;
			status[tmp.y + dy[i]][tmp.x + dx[i]] = true;
			c[tmp.y + dy[i]][tmp.x + dx[i]] = tmp.h + 1;
			q.push(cell(tmp.x + dx[i], tmp.y + dy[i], tmp.h + 1));
		}
	}
}



int main()
{
	scanf("%i%i\n", &n, &m);
	for (int i = 1;i <= n;i++)
	{
		for (int j = 1;j <= m;j++) scanf("%c", &ch[i][j]);
		scanf("\n");
	}
	for (int i = 1;i <= n;i++)
		for (int j = 1;j <= m;j++) 
			if (ch[i][j] == 'E') 
			{
				exit_x = j;
				exit_y = i;
			}
	memset(status, false, sizeof(status));
	memset(c, 0, sizeof(c));
	bfs(exit_y, exit_x);
	for (int i = 1;i <= n;i++)
		for (int j = 1;j <= m;j++)
			if (ch[i][j] == 'S') k = c[i][j];
	for (int i = 1;i <= n;i++)
		for (int j = 1;j <= m;j++)
			if (ch[i][j] >= '0' && ch[i][j] <= '9' && status[i][j] == true)
				if (c[i][j] <= k) ans += (ch[i][j] - '0');
	printf("%i", ans);
	return 0;
}
