#include <iostream>
#include <cstdio>
#include <vector>
#include <unordered_map>
#include <set>
#include <string>
#include <cmath>
#include <algorithm>
#include <assert.h>
#include <memory.h>
#include <string.h>
#include <complex>
#include <queue>
#include <cstdlib>
#include <ctime>
using namespace std;

#define ll long long
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x).size()

ll matrix[555][555];
ll rowsum[555];
ll colsum[555];

int main() {
  //freopen("input.txt", "rt", stdin);
  //freopen("output.txt", "wt", stdout);


  int n;
  scanf("%d", &n);
  if (n == 1) {
    printf("1");
    return 0;
  }

  for(int i = 0; i < n; i++)
    for(int j = 0; j < n; j++)
      scanf("%lld", &matrix[i][j]);

  int a = -1, b = -1;


  for(int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
      if(matrix[i][j] == 0) {
        a = i;
        b = j;
      }
      rowsum[i] += matrix[i][j];
      colsum[j] += matrix[i][j];
    }
  }

  set<ll> vars;
  for(int i = 0; i < n; i++) {
    if(i != a) vars.insert(rowsum[i]);
    if(i != b) vars.insert(colsum[i]);
  }
  if (sz(vars) != 1 || rowsum[a] != colsum[b]) {
    printf("-1");
    return 0;
  }
  ll wtf = *vars.begin();
  ll need = wtf - rowsum[a];
  if (need <= 0) {
    printf("-1");
    return 0;
  }
  matrix[a][b] = need;

  ll diag1 = 0;
  ll diag2 = 0;
  for(int i = 0; i < n; i++) diag1 += matrix[i][i];
  for(int i = 0; i < n; i++) diag2 += matrix[i][n-i-1];
  vars.insert(diag1);
  vars.insert(diag2);
  if (sz(vars) != 1) {
    printf("-1");
    return 0;
  }
  printf("%lld", need);




  return 0;
}