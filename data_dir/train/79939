/*input
7 6
1 2
2 3
3 4
4 5
5 6
5 7
*/
#include "bits/stdc++.h"
using namespace std;

vector<int> v[100005], ecc;

void find_eccentricities(int u, int dad, int d = 0){
	bool leaf = 1;
	for(auto i:v[u]) if(i!=dad){
		leaf = 0;
		find_eccentricities(i,u,d+1);
	}
	if(leaf && d){
		ecc.push_back(d);
	}
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	long long n,s;
	cin>>n>>s;
	if(n==2) return cout<<s,0;
	for(int i=0,x,y;i<n-1;++i){
		cin>>x>>y;
		v[x].push_back(y);
		v[y].push_back(x);
	}
	int deg[100005] = {};
	deque<int> q;
	for(int i=1;i<=n;++i){
		deg[i] = v[i].size();
		if(deg[i] == 1) q.push_back(i);
	}
	cout<<fixed<<setprecision(12)<<2.0*s/q.size();
	return 0;
	int vis = 0;
	int radius = 0;
	while(vis < n-2){
		++radius;
		deque<int> new_q;
		for(auto u:q){
			++vis;
			for(auto i:v[u]){
				if(--deg[i] == 1){
					new_q.push_back(i);
				}
			}
		}
		q = new_q;
	}
	cout<<radius<<'\n';
	assert(q.size()<=2 && q.size() >= 1);
	if(q.size()==1) q.push_back(0);

	find_eccentricities(q[0],q[1]);
	find_eccentricities(q[1],q[0]);

	assert(ecc.size()>0);

	// for(auto i:q) cout<<i<<' '; cout<<'\n';
	for(auto i:ecc) cout<<i<<' '; cout<<'\n';

	cout<<fixed<<setprecision(12)<<2.0*accumulate(ecc.begin(),ecc.end(),0ll)*s/ecc.size()/ecc.size();
}