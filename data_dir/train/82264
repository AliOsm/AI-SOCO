#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

#define MAX ((int)(100000000))
#define pi (2*acos(0))
#define mp make_pair
#define M (998244353)
#define xx first
#define yy second
#define NN ((ll)(1e6+2))
#define N ((int)(3e5+5))
#define eps 0
#define log 20
#define pb push_back
#define MOD 998244353


using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long lu;

typedef tree < ll,  null_type,  less < ll >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;

bool dp[2][101][10001];

int a[102];

int main()
{
    int n, j;
    scanf("%d",&n);
    for(int i = 1; i<=n; i++) scanf("%d",&a[i]);
    sort(a+1,a+1+n);
    ///for(int i = 1; i<=n; i++) cout<<a[i]<<" ";
    ///cout<<endl;
    ///dp[0][0][0] = dp[1][0][0] = 1;
    for(j = 2; j<=n && a[j]==a[1]; j++);

    int ans = j-1;

    ///cout<<j<<endl;

    for(int i = j; i<=n; i++){
        int lim = a[i];
        for(j = i+1; j<=n && a[j]==a[i]; j++) lim += a[j];
        ///cout<<i<<" "<<j<<endl;
        bool cur = 0;

        ///memset(dp,0,sizeof dp);

        for(int jj = 0; jj<=j-i; jj++){
            for(int sum = 0; sum<=lim; sum++) dp[0][jj][sum] = dp[1][jj][sum] = 0;
        }

        dp[0][0][0] = dp[1][0][0] = dp[0][1][a[1]] = 1;

        /*for(int sum = 1; sum<=10000; sum++){
            dp[0][1][sum] = 0;
        }*/


        for(int k = 2; k<=n; k++){
            if(k>=i && k<j){
                k = j-1;
                continue;
            }
            cur = !cur;
            int sz = k;
            if(k>=j) sz -= (j-i);
            for(int jj = 1; jj<=sz; jj++){
                for(int sum = 1; sum<=lim; sum++){
                    dp[cur][jj][sum] = dp[!cur][jj][sum];
                    if(sum>=a[k]) dp[cur][jj][sum] |= dp[!cur][jj-1][sum-a[k]];
                }
            }
        }

        bool flag = 1;

        for(int k = 2; k<=(j-i); k++){
            if(dp[cur][k][a[i]*k]){
                ans = max(ans,k-1);
                ///cout<<"kk "<<i<<" "<<k-1<<endl;
                flag = 0;
                break;
            }
        }

        if(flag){
            ///cout<<"sd "<<j<<endl;
            ans = max(ans,j-i);
            if(j==n+1 && a[i-1]==a[1]) ans = n;
        }

        i = j-1;
        ///cout<<i<<endl;
    }

    printf("%d\n",ans);
    return 0;

}
