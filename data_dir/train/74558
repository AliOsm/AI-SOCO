#include <iostream>
#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define ll long long
#define F first
#define S second
#define PI acos(-1)
#define EPS 1e-9
#define BASE 53ll
#define ld long double
#define MAX 1000000000
#define NIL 0
#define INF -1e18-1e10
#define infi 1e9
#define rd(a) scanf("%d",&a)
#define rd2(a,b) scanf("%d %d",&a,&b)
#define rd3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define rdll(a) scanf("%I64d",&a)
#define sz(a) (int) a.size()
#define lp(i,a,n) for(int i=(a); i<=(n) ; ++i)
#define lpd(i,n,a) for(int i=(n); i>=(a) ; --i)
#define pi acos(-1)

typedef complex<double>CX;
typedef pair<int,int>ii;
typedef pair<int,ii>edge;
typedef pair<vector<int>,int>vii;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int N=100005;

ll mod=1000000009;
ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
bool is_vowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||c=='y')return 1;return 0;}
ld getDistance(ld x1,ld y1,ld x2,ld y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}
ll extended_euclidean(ll a,ll b,ll &x,ll &y){if(b==0){x=1;y=0;return a;}ll g = extended_euclidean(b,a%b,y,x);y -= (a/b)*x;return g;}
ll power(ll base,ll p){if(p==1)return base;if(!p)return 1ll;ll ret=power(base,p/2);ret*=ret;ret%=mod;if(p&1)ret*=base;return ret%mod;}
ii vec(ii a,ii b){ii ret=ii(a.F-b.F,a.S-b.S);return ret;}
ll getArea(ii a,ii b,ii c){ii x=vec(a,b);ii y=vec(c,b);return abs(x.F*y.S-x.S*y.F);}


int n,a[N];
map<int,ll>mp;
int main() {
  //freopen("test.in","r",stdin);
  rd(n);
  lp(i,0,n-1)rd(a[i]);
  vector<ii>active;
  lp(i,0,n-1){
      vector<ii>tmp;
      lp(j,0,(int)active.size()-1){
          tmp.pb(ii(gcd(a[i],active[j].F),active[j].S));
      }
      tmp.pb(ii(a[i],1));
      sort(tmp.begin(),tmp.end());
      active.clear();
      int prv=tmp[0].F,extra=0;
      lp(j,0,(int)tmp.size()-1){
          if(tmp[j].F!=prv){
            active.pb(ii(prv,extra));
            prv=tmp[j].F;
            extra=tmp[j].S;
          }
          else
            extra+=tmp[j].S;
      }
      active.pb(ii(prv,extra));
      lp(j,0,(int)active.size()-1)
         mp[active[j].F]+=active[j].S;
  }
  int q;
  rd(q);
  while(q--){
      int a;
      rd(a);
      printf("%I64d\n",mp[a]);
  }
  return 0;
}
