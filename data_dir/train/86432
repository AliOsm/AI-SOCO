//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

inline void setmin(int &x, int y) { if (y < x) x = y; }
inline void setmax(int &x, int y) { if (y > x) x = y; }
inline void setmin(ll &x, ll y) { if (y < x) x = y; }
inline void setmax(ll &x, ll y) { if (y > x) x = y; }

const int N = 10000 + 10;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

bitset<N> B[30];
bitset<N> ans;

int from[N], to[N], v[N];
vector<pair<int, int> > tmp;

void solve(int t, int l, int r)
{
    if (l == r)
        return;
    if (r - l == 1)
    {
        if (tmp[l].se == inf)
            ans |= B[t];
        return;
    }
    int m = (l + r) / 2;
    B[t + 1] = B[t];
    rep(i, m, r)
        if (tmp[i].se != inf)
            if (tmp[i].se < 0)
            {
                int id = -tmp[i].se - 1;
                if (from[id] < l)
                    B[t + 1] |= (B[t + 1] << v[id]);
            }
    solve(t + 1, l, m);
    B[t + 1] = B[t];
    rep(i, l, m)
        if (tmp[i].se != inf)
        {
            if (tmp[i].se >= 0)
            {
                int id = tmp[i].se;
                if (to[id] >= r)
                    B[t + 1] |= (B[t + 1] << v[id]);
            }
        }
    solve(t + 1, m, r);
}

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n, q;
    cin >> n >> q;
    rep(i, 0, n)
        tmp.push_back({i, inf});
    rep(i, 0, q)
    {
        int a, b, c;
        cin >> a >> b >> c;
        a--; b--;
        tmp.push_back({a, i});
        tmp.push_back({b + 1, -1 - i});
        v[i] = c;
    }
    sort(tmp.begin(), tmp.end());
    rep(i, 0, sz(tmp))
        if (tmp[i].se != inf)
        {
            if (tmp[i].se >= 0)
                from[tmp[i].se] = i;
            else
                to[-tmp[i].se - 1] = i;
        }
    B[0].set(0);
    solve(0, 0, sz(tmp));
    vector<int> out;
    rep(i, 1, n + 1)
        if (ans.test(i))
            out.push_back(i);
    cout << sz(out) << "\n";
    for (int i : out)
        cout << i << " ";
    cout << "\n";
    return 0;
}
