#include<bits/stdc++.h>
#include<ext/numeric>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

#define all(v) v.begin(),v.end()
#define rall(v) v.rbegin(),v.rend()
#define sz(v)  (int)v.size()
#define WHITE -1
#define GREY   0
#define BLACK  1
#define CLR(a,v) memset(a,v,sizeof a)
#define PC(x) __builtin_popcount(x)
#define MP make_pair

typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<ll> vll;
typedef unsigned int ui;

typedef complex<double> point;
#define X real()
#define Y imag()
#define vec(a,b) ((b)-(a))
//#define dot(a,b) ((conj(a)*(b)).real())
#define cross(a,b) ((conj(a)*(b)).imag())
#define colliner pointOnLine

const double PI = acos(-1.0);

int dx[] = { 0, -1, 0, 1, -1, -1, 1, 1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };

int DX[] = { 0, 1, 1, 1, 0, -1, -1, -1 };
int DY[] = { 1, 1, 0, -1, -1, -1, 0, 1 };

const int MAX = 35, MOD = 1e9 + 7, oo = (1 << 30);
const ll OO = 1ll << 60;
const double EPS = 1e-7;

const int inc = 155;

int n, t[MAX], out;
bool ans[inc << 1][inc << 1];
bool vis[31][inc << 1][inc << 1][8];

void solve(int idx, int x, int y, int d) {
	if (idx == n)
		return;
	if (vis[idx][x + inc][y + inc][d])
		return;
	vis[idx][x + inc][y + inc][d] = 1;
//	if (!ans[x + inc][y + inc])
//		ans[x + inc][y + inc] = 1, ++out;
	for (int i = 0; i < t[idx]; ++i) {
		x += DX[d], y += DY[d];
		if (!ans[x + inc][y + inc])
			ans[x + inc][y + inc] = 1, ++out;
	}
	int l = d - 1, r = d + 1;
	if (l == -1)
		l = 7;
	if (r == 8)
		r = 0;
	solve(idx + 1, x, y, l);
	solve(idx + 1, x, y, r);
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
#endif
	scanf("%d", &n);
	for (int i = 0; i < n; ++i)
		scanf("%d", &t[i]);
	solve(0, 0, 0, 0);
	printf("%d\n", out);
}
