#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
    #define EXPECT(expr)
#endif
#define NO_IO_TIE ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
if(! a.size()){ size_t n; fin >> n; a.resize( n ); }
for( auto & u: a) fin >> u; return fin; }
/* @@@ ----------------------------------- */
// 484e

void init( vector< int >::iterator first,
           vector< int >::iterator last,
           const size_t lev,
           vector< int64_t > & rev,
           vector< int64_t > & rep )
{
    /* sort merge sub-intervals and count num. of repeated pairs */
    const auto len = last - first;
    if( len == 1 )
        return;

    const auto iter = first + (len >> 1);

    init(first, iter, lev - 1, rev, rep);
    init(iter, last, lev - 1, rev, rep);

    /* copy the first half into buffer */
    const vector< int > buf(first, iter);

    auto tip = first;
    auto i = begin(buf);

    for( auto j = iter; i != end(buf) && j != last; ++ tip )
        if( *j < *i ) /* this is a reversion */
        {
            *tip = *j++;
            rev[ lev ] += end(buf) - i;
        }
        else
            *tip = *i++;

    copy(i, end(buf), tip);

    /* now count num. of equal pairs */
    /* this will double count repitions pairs @ lower levels */
    for( auto i = first; i != last; )
    {
        int64_t k = 0;
        for( const auto val = *i; i != last && *i == val; ++ i )
            ++ k;

        rep[ lev ] += k * (k - 1LL) / 2LL;
    }
}

void c414()
{
    size_t n;
    cin >> n;
    vector< int > a( 1 << n );
    vector< size_t > query;
    cin >> a >> query;

    /**
     * total num. of reversion in intervals of length 2^i
     * and num. of repitions (equal pairs)
     */
    vector< int64_t > rev( n + 1 ), rep( n + 1 );
    init( begin(a), end(a), n, rev, rep );

    /* adjust for double counting in rep's */
    adjacent_difference(begin(rep), end(rep), begin(rep));
    auto acc = accumulate(begin(rev), end(rev), 0LL);

    vector< int64_t > cnt( n + 1 );
    for( size_t j = 1; j < n + 1; ++ j )
        cnt[ j ] = 1LL << (n + j - 2);

    for( const auto q: query )
    {
        for( size_t j = 1; j < q + 1; ++ j )
        {
            acc += cnt[ j ] - rep[ j ] - 2LL * rev[ j ];
            rev[ j ] = cnt[ j ] - rep[ j ] - rev[ j ];
        }

        cout << acc << '\n';
    }
}

int main( const int argc, char * argv [])
{
    NO_IO_TIE;
    c414();

    return EXIT_SUCCESS;
}
