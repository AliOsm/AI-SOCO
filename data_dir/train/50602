#include<bits/stdc++.h>
using namespace std;

#define ll             long long
#define LL             long long
#define pii            pair<int, int>
#define pll            pair<ll, ll>
#define pil            pair<int, ll>
#define pli            pair<ll, int>
#define vi             vector<int>
#define vl             vector<ll>
#define vii            vector<pii>
#define vll            vector<pll>
#define vil            vector<pil>
#define vli            vector<pli>
#define pb             push_back
#define ppb            pop_back
#define mp             make_pair
#define ff             first
#define ss             second
#define TN             typename
#define all(v)         v.begin(), v.end()
#define fill(a, b)     memset(a, b, sizeof a)
#define endl           '\n'

template <TN T> T gcd(T a, T b) {
    return !b ? a : gcd(b, a % b);
}

template <TN T> T lcm(T a, T b) {
    return a * (b / gcd(a, b));
}

template <TN T> T sqr(T a) {
    return a * a;
}

template <TN T> T cube(T a) {
    return a * a * a;
}

template <TN T> inline void smin(T &a, T b) {
    a = a < b ? a : b;
}

template <TN T> inline void smax(T &a, T b) {
    a = a > b ? a : b;
}

int in() {
    int n;
    scanf("%d", &n);
    return n;
}

ll Lin() {
    ll n;
    scanf("%lld", &n);
    return n;
}

double Din() {
    double n;
    scanf("%lf", &n);
    return n;
}

const ll inf = (ll)1e17;
const ll mod = (ll)1e9 + 7;
const int N = 2e5 + 5;

ll a[N];

int solve() {
    ll n = Lin(), m = Lin(), k = Lin();
    for(int i = 1; i <= m; i++) {
        a[i] = Lin();
    }
    ll r = k, p = 0;
    int i = 1, ans = 0;
    while(i <= m) {
        if(a[i] - p <= r) {
            int cnt = 0;
            while(i <= m && a[i] - p <= r) {
                cnt ++, i++;
            }
            ans++;
            p += cnt;
        } else r = ((a[i] - p - 1) / k) * k + k;
    }
    printf("%d\n", ans);
    return 0;
}

int main() {
    int test = 1, tc = 0;
    //scanf("%d", &test);
    while (test--) {
        //printf("Case %d: ", ++tc);
        solve();
    }
    return 0;
}




