#include <cstdio>
#include <cstdint>
#include <array>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <chrono>
#include <cassert>
#include <memory>
#include <utility>
#include <cstddef>
#include <iterator>

#pragma comment(linker, "/stack:20000000")

using namespace std;
using mt = int32_t;
using fl = double;

template<typename T>
constexpr mt infValue = std::numeric_limits<T>::max() - 1000;
template<typename T>
constexpr mt maxValue = std::is_same<T, int>::value ? 1000000007 : 1000000000000000001ll;

#define rep(a, b, i) for(mt i = a; i < (b); ++i)
#define repe(a, b, i) for(mt i = a; i <= (b); ++i)
#define repd(a, b, i) for(mt i = a; i > (b); --i)
#define repde(a, b, i) for(mt i = a; i >= (b); --i)

constexpr mt INF = infValue<mt>;
constexpr int64_t MOD = 1000000007ll;
constexpr double EPS = 1e-6;
constexpr mt MAX = maxValue<mt>;
using pr = pair<mt, mt>;

constexpr auto N = 100011;
constexpr auto K = 2;
constexpr auto P = 19;
constexpr auto M = 100111;

mt n, a[N];

std::string build(mt l, mt r) {
	if (l == r) return "";
	string d;
	d.resize(r - l + 2 + (r - l - 1) * 2);
	mt base = 0;
	d[base++] = '(';
	rep (l, r, i) {
		d[base++] = a[i] + '0';
		if (i + 1 < r) {
			d[base++] = '-';
			d[base++] = '>';
		}
	}
	d[base++] = ')';
	return d;
}

int main(void) {
#ifdef _DEBUG
	freopen("in.txt", "r", stdin);
#endif
	scanf("%d", &n);
	rep(0, n, i) scanf("%d", a + i);
	if (a[n - 1]) puts("NO");
	else {
		if (n == 1) {
			puts("YES");
			puts("0");
		}
		else if (n >= 2 && a[n - 2] == 1) {
			puts("YES");
			puts(build(0, n).c_str());
		}
		else if (n >= 3 && a[n - 3] == 0) {
			puts("YES");
			std::string answ = n > 3 ? "((" + build(0, n - 3) + "->(0->0))->0)": "0->0->0";
			puts(answ.c_str());
		}
		else if (n > 3) {
			//TODO find (0)....10|0
			mt idx = -1;
			repde(n - 3, 0, i) {
				if (a[i] == 0) {
					idx = i;
					break;
				}
			}
			
			if (idx != -1) {
				puts("YES");
				std::string answ = "((" + build(0, idx) + (idx > 0 ? "->": "") + "(0->(" + build(idx+1, n-3) + (idx + 1 < n - 3 ? "->" : "") + "(1->0))))->0)";
				puts(answ.c_str());
			}
			else puts("NO");
		}
		else puts("NO");
	}

	return 0;
}