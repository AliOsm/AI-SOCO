#ifndef _GLIBCXX_NO_ASSERT
#include <cassert>
#endif
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <ciso646>
#include <climits>
#include <clocale>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#if __cplusplus >= 201103L
#include <ccomplex>
#include <cfenv>
#include <cinttypes>
#include <cstdbool>
#include <cstdint>
#include <ctgmath>
#include <cwchar>
#include <cwctype>
#endif

// C++
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>

#if __cplusplus >= 201103L
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <typeindex>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#endif
#define int         long long
#define ll          long long
#define pb          push_back
#define mp          make_pair
#define pii         pair<int,int>
#define vi          vector<int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)  for(int i=a;i<b;i++)
using namespace std;

string to_string(string s) {
    return '"' + s + '"';
}

string to_string(char ch){
    return string(1,ch);
}

string to_string(const char* s) {
    return to_string((string) s);
}

string to_string(bool b) {
    return (b ? "true" : "false");
}

template <typename A>
string to_string(A v) ;


template <typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(A v) {
    bool first = true;
    string res = "{";
    for (const auto &x : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(x);
    }
    res += "}";
    return res;
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
    cerr << " " << to_string(H);
    debug_out(T...);
}

#ifdef PRINTERS
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

vector<pii> adj[100005];
vector<pii> globadj[100005];
int height[100005];
int dp[20][100005];
int dists[100005];
void dfs(int u,int p=0,int dist=1){
    height[u]=height[p]+1;
    for(auto i:adj[u]){
        if(i.F==p)continue;
        dfs(i.F,u,dist+i.S);
    }
    dists[u]=dist;
    dp[0][u]=p;
}

int lca(int u,int v){
    if(height[u]>height[v])swap(u,v);
    for(int i=19;i>=0;i--){
        if(height[v]-(1<<i)>=height[u])v=dp[i][v];
    }
    if(u==v)return u;
    for(int i=19;i>=0;i--){
        if(dp[i][u]!=dp[i][v])u=dp[i][u],v=dp[i][v];
    }
    return dp[0][u];
}
int n,m;
int d[42][100005];

void solve(){
    memset(d,1,sizeof d);
    cin>>n>>m;
    vi dsu(n+1,-1);
    vector<pair<pii,int>>edges;
    rep(i,0,m){
        int u,v,d;
        cin>>u>>v>>d;
        globadj[u].pb(mp(v,d));
        globadj[v].pb(mp(u,d));
        int a=u;
        int b=v;
        while(dsu[a]>0)a=dsu[a];
        while(dsu[b]>0)b=dsu[b];
        if(a==b){
            edges.pb(mp(mp(u,v),d));
        }
        else{
            if(dsu[a]>dsu[b])swap(a,b);
            dsu[a]+=dsu[b];
            dsu[b]=a;
            adj[u].pb(mp(v,d));
            adj[v].pb(mp(u,d));
        }
    }
    dfs(1);
    rep(i,1,20){
        rep(j,1,n+1){
            dp[i][j]=dp[i-1][dp[i-1][j]];
        }
    }
    auto getDijk=[](int u){
        static int idx=0;
        priority_queue<pii,vector<pii>,greater<pii>>pq;
        pq.push(mp(0,u));
        while(!pq.empty()){
            auto cur=pq.top();
            pq.pop();
            if(d[idx][cur.S]>cur.F){
                d[idx][cur.S]=cur.F;
                for(auto i:globadj[cur.S]){
                    pq.push(mp(cur.F+i.S,i.F));
                }
            }
        }
        idx++;
    };
    for(auto i:edges){
        getDijk(i.F.F);
        getDijk(i.F.S);
    }
    int q;
    cin>>q;
    while(q--){
        int u,v;
        cin>>u>>v;
        int res=dists[u]+dists[v]-2*dists[lca(u,v)];
        rep(i,0,sz(edges)){
            res=min(res,edges[i].S+d[2*i][u]+d[2*i+1][v]);
            res=min(res,edges[i].S+d[2*i][v]+d[2*i+1][u]);
        }
        cout<<res<<endl;
    }
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t=1;
//    cin>>t;
    while(t--){
        solve();
    }
    return 0;
}