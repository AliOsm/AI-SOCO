#define _CRT_SECURE_NO_DEPRECATE
#include <iostream>
#include <bitset>
#include <string>
#include <vector>
#include <algorithm>
#include <ctime>
#include <queue>
#include <cstring>
#include <set>
#include <map>
#include <sstream>
#include <cmath>
#include <fstream>
#include <list>
using namespace std;
#define rp(i,n) for(int (i)=0;(i)<(n);++(i))
#define pb push_back
#define L(s) (int)s.size()
#define mp make_pair
#define pii pair<int,int>
//#define x first 
//#define y second
#define inf 1000000000
#define VI vector<int>
#define ll long long
#define all(s) (s).begin(),(s).end()
#define C(u) memset((u),0,sizeof((u)))
#define ull unsigned ll
struct T
{
	int x,y,z;
} d[555555];
inline bool operator<( const T&a, const T&b)
{
	return a.x<b.x;
}
int a[555555<<2];
inline void upd(int v,int l,int r,int pos,int val)
{
	a[v]=max(a[v],val);
	if (l+1==r)
		return;
	int mid=(l+r+1)/2;
	if (pos<mid)
		upd(2*v+1,l,mid,pos,val);
	else
		upd(2*v+2,mid,r,pos,val);
}
inline int find(int v,int l,int r,int st,int fn)
{
	if (l==st&&r==fn)
		return a[v];
	int mid=(l+r+1)/2;
	int ans=-inf;
	if (st<mid)
		ans=max(ans,find(2*v+1,l,mid,st,min(fn,mid)));
	if (fn>mid)
		ans=max(ans,find(2*v+2,mid,r,max(st,mid),fn));
	return ans;
}
int n,k;
int comp[555555];
int main()
{
	scanf("%d",&n);
	rp(i,n)
	{
		scanf("%d",&d[i].x);
		comp[i]=d[i].x;
	}
	sort(comp,comp+n);
	k=unique(comp,comp+n)-comp;
	rp(i,n)
		d[i].x=lower_bound(comp,comp+k,d[i].x)-comp;
	rp(i,n)
	{
		scanf("%d",&d[i].y);
		comp[i]=d[i].y;
	}
	sort(comp,comp+n);
	k=unique(comp,comp+n)-comp;
	rp(i,n)
		d[i].y=lower_bound(comp,comp+k,d[i].y)-comp;
	rp(i,n)
	{
		scanf("%d",&d[i].z);
		comp[i]=d[i].z;
	}
	sort(comp,comp+n);
	k=unique(comp,comp+n)-comp;
	rp(i,n)
		d[i].z=lower_bound(comp,comp+k,d[i].z)-comp;
	sort(d,d+n);
	reverse(d,d+n);
	rp(i,n<<2)
		a[i]=-inf;
	int ans=0;
	int pos=0;
	rp(i,n)
	{
		for(;d[pos].x!=d[i].x;++pos)
			upd(0,0,n,d[pos].y,d[pos].z);
		if (d[i].y<n-1 && find(0,0,n,d[i].y+1,n)>d[i].z)
			++ans;
	}
	cout<<ans<<endl;
}