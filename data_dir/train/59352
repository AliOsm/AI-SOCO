#include <cstring>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <iostream>
#include <sstream>
#include <set>
#include <queue>
#include <unordered_map>
#include <cassert>
#include <unordered_set>

using namespace std;

int main(int argc, char **argv) {
    int n;
    scanf("%d", &n);
    vector<vector<int>> cost(3, vector<int>(n));
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < n; ++j)
            scanf("%d", &cost[i][j]);
    }
    vector<vector<int>> g(n);
    for (int i = 1; i < n; ++i) {
        int u, v;
        scanf("%d%d", &u, &v);
        --u, --v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    bool can = true;
    for (int i = 0; i < n; ++i) {
        if (g[i].size() > 2) {
            can = false;
            break;
        }
    }
    if (!can) {
        puts("-1");
        return 0;
    }
    int source = -1;
    for (int i = 0; i < n; ++i) {
        if (g[i].size() == 1) {
            source = i;
            break;
        }
    }
    vector<int> order({source});
    while ((int) order.size() < n) {
        int at = order.back();
        int before;
        if (order.size() > 1)
            before = order[order.size() - 2];
        else
            before = -1;
        for (int to : g[at]) {
            if (to != before) {
                order.push_back(to);
                break;
            }
        }
    }
    long long min_cost = LLONG_MAX;
    vector<int> p({0, 1, 2});
    vector<int> min_p;
    do {
        long long need = 0;
        for (int i = 0; i < n; ++i)
            need += cost[p[i % 3]][order[i]];
        if (need < min_cost) {
            min_cost = need;
            min_p = p;
        }
    } while (next_permutation(p.begin(), p.end()));
    vector<int> answer(n);
    for (int i = 0; i < n; ++i)
        answer[order[i]] = min_p[i % 3] + 1;
    printf("%lld\n", min_cost);
    for (int i = 0; i < n; ++i)
        printf("%s%d", i ? " " : "", answer[i]);
    puts("");
    return 0;
}