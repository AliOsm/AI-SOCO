///*** One Last Try ***///
#include<bits/stdc++.h>
using namespace std;
#pragma comment(linker, "/stack:200000000")
#define ll long long int
#define inf ( int )( 1e9 + 1e9 )
#define mxs (int)( 1e6 + 10 )
#define md  int mid = ( l + r )>>1;
#define mod (ll)(1e9)+7
//int dx[]={+1,0,+0,-1};///Four Directions
//int dy[]={+0,-1,+1,+0};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
int  t, n, m, j, k,a, b, c, d, e,f  , i,sz,cases ,q;
ll ans;
string s, s2, s3, s4;
vector < int > tree [ mxs * 4 ];
vector < int >::iterator it;
int ar [ mxs ] ;//, ar2 [ mxs ] , ar3 [ mxs ] , ar4 [ mxs ] ;
void brainfuck();
void build ( int node , int le , int re );
int query_left( int node , int le , int re , int l , int r );
int query_right( int node , int le , int re , int l , int r );
int main()
{
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>n;
    for ( i = 1 ; i <= n; i++ )cin>>ar [ i ];
    build( 1 , 1 , n );
    i = 2;
    for ( i = 2 ; i < n; i++ )ans += ( ll )query_left( 1 , 1 , n , 1 , i - 1 ) * ( ll )query_right( 1 , 1 , n , i + 1 , n );
    cout<<ans;
}
void build ( int node , int le , int re )
{
    if ( le == re )
    {
        tree [ node ].push_back( ar [ le ] );
        return;
    }
    int mid = ( le + re )>>1;
    build( node + node , le , mid );
    build( node + node + 1 , mid + 1 , re );
    merge( tree [ node + node ].begin() , tree [ node + node ].end() , tree [node + node + 1 ].begin() , tree [ node + node + 1 ].end() , back_inserter( tree [ node ] ) );
}
int query_left( int node , int le , int re , int l , int r )
{
    if ( l > r )return 0;
    if ( l == le && r == re )
    {
        ///Searching for bigger elements
        it = upper_bound( tree [ node ].begin() , tree [ node ].end() , ar [ i ] );
        if ( it == tree [ node ].end() )return 0;
        return ( tree [ node ].size() - ( it - tree[ node ].begin() ) );
    }
    int mid = ( le + re )>>1;
    return ( query_left( node + node , le , mid , l , min( mid , r )) + query_left( node + node + 1 , mid+1 , re , max( l , mid + 1 ) , r ) );
}
int query_right( int node , int le , int re , int l , int r )
{
    if ( l > r )return 0;
    if ( l == le && r == re )
    {
        ///Searching for smaller elements
        it = upper_bound( tree [ node ].begin() , tree [ node ].end() , ar [ i ] );
        if ( it == tree [ node ].begin() )return 0;
        it--;
        return ( ( it - tree [ node ].begin() ) + 1 );
    }
    int mid = ( le + re )>>1;
    return ( query_right( node + node , le , mid , l , min( mid , r )) + query_right( node + node + 1 , mid+1 , re , max( l , mid + 1 ) , r ) );
}
