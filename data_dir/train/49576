#include <bits/stdc++.h>

using namespace std;

typedef unsigned uint;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ldbl;
typedef pair<int, int> pii;
typedef pair<uint, uint> puu;
typedef pair<ll, ll> pll;
typedef pair<ull, ull> pull;
typedef pair<double, double> pdd;
typedef vector<int> vi;
typedef vector<uint> vu;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<pii> vpii;
typedef vector<puu> vpuu;
typedef vector<pll> vpll;
typedef vector<pull> vpull;
typedef vector<string> vstr;
typedef vector<double> vdbl;
typedef vector<ldbl> vldbl;
#define pb push_back
#define ppb pop_back
#define pfr push_front
#define ppfr pop_front
#define emp emplace
#define empb emplace_back
#define be begin
#define rbe rbegin
#define all(x) (x).be(), (x).end()
#define rall(x) (x).rbe(), (x).rend()
#define fir first
#define sec second
#define mkp make_pair
#define brif(cond) if (cond) break
#define ctif(cond) if (cond) continue
#define retif(cond) if (cond) return
void canhazfast() {ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}
template<typename T> T gcd(T a, T b) {return b ? gcd(b, a%b) : a;}
template<typename T> T extgcd(T a, T b, T &x, T &y)
{
    T x0 = 1, y0 = 0, x1 = 0, y1 = 1;
    while (b) {
        T q = a/b; a %= b; swap(a, b);
        x0 -= q*x1; swap(x0, x1);
        y0 -= q*y1; swap(y0, y1);
    }
    x = x0; y = y0; return a;
}
int ctz(uint x) {return __builtin_ctz(x);}
int ctzll(ull x) {return __builtin_ctzll(x);}
int clz(uint x) {return __builtin_clz(x);}
int clzll(ull x) {return __builtin_clzll(x);}
int popcnt(uint x) {return __builtin_popcount(x);}
int popcntll(ull x) {return __builtin_popcountll(x);}
int bsr(uint x) {return 31^clz(x);}
int bsrll(ull x) {return 63^clzll(x);}

#define N 100064

char s[N];
int dp[N][32];

int main()
{
    canhazfast();

    int n;

    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> s;
        int m = strlen(s);
        int pre = 0, suf = 0;
        for (int b = 0, e = 0; b < m; b = e) {
            char c = s[b];
            while (e < m && s[e] == s[b]) ++e;
            dp[i][c-'a'] = max(dp[i][c-'a'], e-b);
            if (!b) pre = e-b;
            suf = e-b;
        }
        ctif(!i);
        int jp = s[0]-'a', js = s[m-1]-'a';
        if (pre == m) {
            dp[i][jp] += dp[i-1][jp]*(dp[i][jp]+1);
        } else if (jp == js) {
            dp[i][jp] = max(dp[i][jp], pre+suf+1);
        } else {
            if (dp[i-1][jp]) ++dp[i][jp];
            if (dp[i-1][js]) ++dp[i][js];
        }
        for (int j = 0; j < 26; ++j) if (dp[i-1][j]) dp[i][j] = max(dp[i][j], 1);
    }
    /*cerr << "dp =\n";
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < 8; ++j) cerr << setw(3) << dp[i][j];
        cerr << '\n';
    }*/
    cout << *max_element(dp[n-1], dp[n-1]+26);

    return 0;
}
