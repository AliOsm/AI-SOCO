#include<bits/stdc++.h>

#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define pb push_back

using namespace std;
ll mod = 1e9 + 7;
map < ll, ll > f;
vector < ll > v;
ll c[2050][2050];
ll ans = 0;
ll ff[200000], invf[200000], n, k;
void gen(ll x)
{
    ll x1 = (ll) 10 * x + 7;
    ll x2 = (ll) 10 * x + 4;
    v.pb(0);
    f[x1] = v.size();
    v.pb(0);
    f[x2] = v.size();
    if (x1 < 1e9) gen(x1);
    if (x2 < 1e9) gen(x2);
}
ll binpow(ll x, ll y){
    ll res = 1;
    while(y){
        if (y % 2){
            res *= x;
        }
        x *= x;
        res %= mod;
        x %= mod;
        y >>= 1;
    }
    return res;
}
ll cc(ll k, ll nn)
{
    ll x = ff[nn] * invf[k] % mod;
    x = x * invf[nn - k] % mod;
    return x;
}
main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> k;
    gen(0);
    ff[0] = 1;
    invf[0] = 1;
    for (ll i = 1; i <= max(n, (ll)v.size()); i++){
        ff[i] = (ff[i - 1] * i) % mod;
        invf[i] = binpow(ff[i], mod - 2);
    }
    int x = 0;
    for (int i = 0; i < n; i++){
        ll y;
        cin >> y;
        if (f[y]) {
            v[f[y] - 1]++;
            x++;
        }
    }
    for (int i = 0; i <= v.size(); i++) c[i][0] = 1;
    for (int i = 1; i <= v.size(); i++){
        for (int j = 1; j <= i; j++){
            c[i][j] = (c[i - 1][j] + v[i - 1] * c[i - 1][j - 1]) % mod;
        }
    }
    for (int i = 0; i <= min(k, n - x); i++){
        if (v.size() >= k - i)
        ans = (ans + c[v.size()][k - i] * cc(i, n - x)) % mod;
    }
    cout << ans;
}
