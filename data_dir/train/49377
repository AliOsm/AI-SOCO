#include<iostream>
#include<vector>

using namespace std;

const int MAXN = 1004;
int a[MAXN], t[MAXN], in, mark[MAXN], nsrc[MAXN], dp[MAXN][MAXN];
vector<int> b;

int DFS(int n)
{
	if(mark[n])
		return t[n];
	mark[n] = in;
	if(a[n] < 0)
		return t[n] = 1;
	return t[n] = DFS(a[n]) + 1;
}

int main()
{
	int n, x;
	cin >> n >> x;
	x--;
	for(int i = 0; i < n; i++)
	{
		cin >> a[i];
		a[i]--;
		if(a[i] >= 0)
			nsrc[a[i]] = true;
	}
	for(int i = 0; i < n; i++)
		if(!nsrc[i])
		{
			in++;
			DFS(i);
			if(mark[x] != mark[i])
				b.push_back(t[i]);
		}
	dp[0][0] = 1;
	for(int i = 0; i < b.size(); i++)
		for(int j = 0; j <= n; j++)
			dp[i + 1][j] = max(dp[i][j], (j - b[i] >= 0?dp[i][j - b[i]]:0));
	for(int j = 0; j <= n; j++)
		if(dp[b.size()][j] == 1)
			cout << j + t[x] << endl;
	return 0;
}
