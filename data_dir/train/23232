/* In the name of Allah */
#include<bits/stdc++.h>
using namespace std;

const int N = 2e5 + 5;
vector<pair<pair<int, int>, int>> vec[N];
int n, t, a[N], ans[N << 2], fen[N];
int m = 1, st[N], en[N], nxt[N][30];
int tmp, L, R, q[N], f[N];
vector<int> adj[N];
string s[N];

void dfs(int u) {
	st[u] = tmp++;
	for (auto v: adj[u])
		dfs(v);
	en[u] = tmp;
}

void add(int p, int x) {
	for (p++; p; p -= p & -p)
		fen[p] += x;
}

int get(int p) {
	int res = 0;
	for (p++; p < N; p += p & -p)
		res += fen[p];
	return res;
}

int main() {
	ios:: sync_with_stdio(0), cin.tie(0), cout.tie(0);
	cin >> n >> t;
	for (int i = 0; i < n; i++) {
		cin >> s[i];
		for (auto c: s[i]) {
			if (!nxt[a[i]][c - 'a'])
				nxt[a[i]][c - 'a'] = m++;
			a[i] = nxt[a[i]][c - 'a'];
		}
	}
	for (int i = 0; i < t; i++) {
		int l, r, k;
		cin >> l >> r >> k;
		vec[r].push_back({{--k, -1}, i});
		vec[--l].push_back({{k, +1}, i});
	}
	for (int i = 0; i < 26; i++)
		if (nxt[0][i])
			adj[0].push_back(q[R++] = nxt[0][i]);
	while (L < R)
		for (int u = q[L++], i = 0; i < 30; i++)
			if (nxt[u][i])
				adj[f[nxt[u][i]] = nxt[f[u]][i]].push_back(q[R++] = nxt[u][i]);
			else
				nxt[u][i] = nxt[f[u]][i];
	dfs(0);
	for (int i = n - 1; ~i; i--) {
		int cur = 0;
		for (auto c: s[i])
			add(st[cur = nxt[cur][c - 'a']], 1);
		for (auto x: vec[i]) {
			int v = a[x.first.first];
			ans[x.second] += (get(st[v]) - get(en[v])) * x.first.second;
		}
	}
	for (int i = 0; i < t; i++)
		cout << ans[i] << endl;
}
