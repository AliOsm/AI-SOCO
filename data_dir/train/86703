#include <bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
//template<typename key, typename val>
//using ordered_tree = 
//  tree<key, val, less<key>, rb_tree_tag, tree_order_statistics_node_update>;
using namespace std;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = 1'000'000'007;//998244353;
const int base = 2187;
const double eps = 1e-8;
const int N = 100'000;

int n, m, k;
int d[2][3];

void solve(int test)
{
  int l, r;
  cin >> n >> l >> r;
  int x0, x1, x2;
  if (l % 3 == 0) {
    x0 = (r - l) / 3 + 1;
    x1 = (r - l - 1) / 3 + 1 + (r - l - 1 < 0 ? -1 : 0);
    x2 = (r - l - 2) / 3 + 1 + (r - l - 2 < 0 ? -1 : 0);
  } else if (l % 3 == 1) {
    x0 = (r - l - 2) / 3 + 1 + (r - l - 2 < 0 ? -1 : 0);
    x1 = (r - l) / 3 + 1;
    x2 = (r - l - 1) / 3 + 1 + (r - l - 1 < 0 ? -1 : 0);
  } else {
    x0 = (r - l - 1) / 3 + 1 + (r - l - 1 < 0 ? -1 : 0);
    x1 = (r - l - 2) / 3 + 1 + (r - l - 2 < 0 ? -1 : 0);
    x2 = (r - l) / 3 + 1;
  }
  int t = 0;
  d[0][0] = 1;
  for (int i = 0; i < n; ++i) {
    d[t ^ 1][0] = d[t ^ 1][1] = d[t ^ 1][2] = 0;
    d[t ^ 1][0] += (d[t][0] * 1ll * x0) % mod;
    d[t ^ 1][0] %= mod;
    d[t ^ 1][1] += (d[t][1] * 1ll * x0) % mod;
    d[t ^ 1][1] %= mod;
    d[t ^ 1][2] += (d[t][2] * 1ll * x0) % mod;
    d[t ^ 1][2] %= mod;

    d[t ^ 1][1] += (d[t][0] * 1ll * x1) % mod;
    d[t ^ 1][1] %= mod;
    d[t ^ 1][2] += (d[t][1] * 1ll * x1) % mod;
    d[t ^ 1][2] %= mod;
    d[t ^ 1][0] += (d[t][2] * 1ll * x1) % mod;
    d[t ^ 1][0] %= mod;

    d[t ^ 1][2] += (d[t][0] * 1ll * x2) % mod;
    d[t ^ 1][2] %= mod;
    d[t ^ 1][0] += (d[t][1] * 1ll * x2) % mod;
    d[t ^ 1][0] %= mod;
    d[t ^ 1][1] += (d[t][2] * 1ll * x2) % mod;
    d[t ^ 1][1] %= mod;
    
    t ^= 1;
  }
  cout << d[t][0] << '\n';
}

void precalc()
{
}

int main()
{
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i)
      solve(i);
  //cerr << endl << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count();
  return 0;
}
