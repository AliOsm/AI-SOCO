#include <bits/stdc++.h>

#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define for1(i, n) for(int i = 1; i <= (int)(n); i++)
#define all(x) (x).begin(), (x).end()
#define clr(x) memset((x), 0, sizeof((x)));
#define pb push_back
#define mp make_pair
#define x first
#define y second

using namespace std;
typedef long double ld;
typedef long long ll;
typedef pair<int, int> PII;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef long long i64;
typedef unsigned long long ull;

template<class T>
bool remin(T &a, const T &b) {
    if (a > b) {
        a = b;
        return true;
    }
    return false;
}

template<class T>
bool remax(T &a, const T &b) {
    if (a < b) {
        a = b;
        return true;
    }
    return false;
}

int nxt() {
    int x;
    scanf("%d", &x);
    return x;
}

ll gcd(ll a, ll b) {
    a = abs(a);
    b = abs(b);
    while (b) {
        a %= b;
        swap(a, b);
    }
    return a;
}

typedef ll ptdata;

struct pt {
    ptdata x, y;

    pt() {}

    pt(ptdata x, ptdata y) : x(x), y(y) {}

    inline pt operator-(const pt &r) const {
        return pt(x - r.x, y - r.y);
    }

    inline pt operator+(const pt &r) const {
        return pt(x + r.x, y + r.y);
    }

    inline pt operator*(const ld &r) const {
        return pt(x * r, y * r);
    }

    inline ptdata sqlen() const {
        return abs(x * x + y * y);
    }

    inline bool operator<(const pt &r) const {
        if (x != r.x) return x < r.x;
        return y < r.y;
    }

    inline bool operator==(const pt &r) const {
        return x == r.x && y == r.y;
    }
};

ostream &operator<<(ostream &os, const pt &p) {
    return os << "(" << p.x << "," << p.y << ")";
}

inline ptdata cross(const pt &l, const pt &r) {
    return l.x * r.y - l.y * r.x;
}

inline ptdata dot(const pt &l, const pt &r) {
    return l.x * r.x + l.y * r.y;
}


ll pwmod(ll a, ll n, ll mod) {
    ll ret = 1;
    while (n) {
        if (n & 1) ret = ret * a % mod;
        a = a * a % mod;
        n >>= 1;
    }
    return ret;
}

template<typename T>
inline T sqr(T x) {
    return x * x;
}

int getDir(pt dir) {
    if (dir.x > 0) {
        if (dir.y > 0) {
            return 0;
        } else {
            return 2;
        }
    } else {
        if (dir.y > 0) {
            return 1;
        } else {
            return 3;
        }
    }
}


pt getN(pt dir) {
    return pt(dir.y, -dir.x);
}

int n, m;

bool check(pt a) {
    return a.x >= 0 && a.x <= n && a.y >= 0 && a.y <= m;
}


bool angle(pt a) {
    if (a.x == 0) {
        if (a.y == 0 || a.y == m) return true;
    }
    if (a.x == n) {
        if (a.y == 0 || a.y == m) return true;
    }
    return false;
}

void solve() {
    n = nxt();
    m = nxt();

    int k = nxt();
    vector<pt> a(k);
    forn(i, k) {
        a[i].x = nxt();
        a[i].y = nxt();
    }
    map<ll, ll> mm[4];
    {
        ll t = 0;
        pt st(0, 0);
        pt dir(1, 1);
        while (true) {
            int dd = getDir(dir);
            pt norm = getN(dir);
            ll diag = dot(norm, st);
            //cout << st.x << " " << st.y << " " << dir.x << " " << dir.y << endl;
            assert(!mm[dd].count(diag));
            mm[dd][diag] = t;
            int l = 0, r = max(n, m) + 1;
            while (l < r) {
                int mid = (l + r + 1) >> 1;
                if (check(pt(st.x + dir.x * mid, st.y + dir.y * mid))) {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }

            pt nst = pt(st.x + dir.x * l, st.y + dir.y * l);
            if (angle(nst)) {
                break;
            }
            if (nst.x == 0 || nst.x == n) {
                dir.x *= -1;
            } else {
                dir.y *= -1;
            }
            t += l;
            st = nst;
        }
    }
    pt ddir[] = {pt(1, 1), pt(1, -1), pt(-1, -1), pt(-1, 1)};
    forn(i, k) {
        ll tt = LLONG_MAX;
        int da = -1;
        forn(d, 4) {
            pt dir = ddir[d];
            int dd = getDir(dir);
            pt norm = getN(dir);
            ll diag = dot(norm, a[i]);
            if (mm[dd].count(diag)) {
                if (remin(tt, mm[dd][diag])) {
                    da = d;
                }
            }
        }
        if (tt == LLONG_MAX) {
            cout << "-1\n";
            continue;
        }
        pt dir = ddir[da];
        dir = pt(-dir.x, -dir.y);
        int l = 0, r = max(n, m) + 1;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (check(pt(a[i].x + dir.x * mid, a[i].y + dir.y * mid))) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        cout << tt + l << "\n";
    }
}

void prepare() {

}

int main() {
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    prepare();

    int t = 1;
    //t = nxt();
    forn(i, t) {
        solve();
    }

    //cerr << "Time " << clock() / (double) CLOCKS_PER_SEC << endl;
    return 0;
}