//              +-- -- --++-- +-In the name of ALLAH-+ --++-- -- --+              \\

#include <bits/stdc++.h>

#define F first
#define S second
#define _sz(x) (int)x.size()
#define pb push_back

using namespace std ;
using ll = long long ;
using ld = long double ;
using pii = pair <int , int> ;

const int N = 1e5 + 20 ;
int n , m , c , q ;

map <int , int> mp[N] ;
set <int> has[N] ;

int par[N] ;

int root (int v) { return par[v] < 0 ? v : par[v] = root(par[v]) ; }

inline void merge (int u , int v) {
	if ((u = root(u)) == (v = root(v))) return ;
	
	if (_sz(has[u]) > _sz(has[v])) swap(u , v) ;
	
	par[u] = v ;

	for (auto p : has[u]) has[v].insert(p) ;
	has[u].clear() ;
}

inline void add_edge (int u , int v , int c) {
	if (mp[u].count(c)) merge(v , mp[u][c]) ;
	if (mp[v].count(c)) merge(u , mp[v][c]) ;

	mp[u][c] = v ;
	mp[v][c] = u ;

	has[root(v)].insert(u) ;
	has[root(u)].insert(v) ;
}

int main(){
	memset(par , -1 , sizeof par) ;

	scanf("%d %d %d %d " , &n , &m , &c , &q) ;

	for (int i = 0 , u , v , c ; i < m ; i ++) {
		scanf("%d %d %d " , &u , &v , &c) ;
		u -- , v -- ;

		add_edge(u , v , c) ;
	}

	while (q --) {
		char c ;
		int x , y , z ;

		c = getchar() ;
		scanf("%d %d " , &x , &y) ;
		x -- , y -- ;

		if (c == '+') {
			scanf("%d " , &z) ;
			add_edge(x , y , z) ;
		}
		else {
			int rx = root(x) ;

			if (rx == root(y) || has[rx].find(y) != has[rx].end()) printf("Yes\n") ;
			else printf("No\n") ;
		}
	}
}
