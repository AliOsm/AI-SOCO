#include <bits/stdc++.h>
using namespace std;

const int N = 2e5 + 100;

int t, n, m, u, v;
bool mark[N];
vector<int> a, b, ans, nei[N];

void dfs(int v, int c) {
	mark[v] = true;
	if(c)
		a.push_back(v);
	else
		b.push_back(v);
	for (int u: nei[v])
		if(mark[u] == false)
			dfs(u, !c);
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0);
	cin >> t;
	while(t--) {
		vector<int> help;
		cin >> n >> m;
		while(m--) {
			cin >> u >> v;
			nei[--u].push_back(--v);
			nei[v].push_back(u);
			help.push_back(u);
			help.push_back(v);
		}
		for (int i = 0; i < n; i++)
			if(mark[i] == false) {
				a.clear();
				b.clear();
				dfs(i, 0);
				if(a.size() > b.size())
					swap(a, b);
				for (int u: a)
					ans.push_back(u);
			}
		
		cout << ans.size() << '\n';
		for (int u: ans)
			cout << ++u << ' ';
		cout << '\n';
		
		fill(mark, mark + n, false);
		for (int u: help)
			nei[u].clear();
		ans.clear();
	}
	return 0;
}
