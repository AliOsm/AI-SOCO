#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define MAX_Y ((ll)(1e13))
#define MAX_X ((int)(1e6 + 2))
#define pi (2.0*acos(0))
#define M ((ll)(1e9 + 7))
#define NN ((ll)(305))
#define N ((int)(1e5 + 5))
#define eps (0)
#define log 20
 
 
using namespace std;
using namespace __gnu_pbds;
 
typedef long long ll;
typedef unsigned long long ull;
 
 
typedef tree < ll,  null_type,  less < ll >,  rb_tree_tag,  tree_order_statistics_node_update > o_set;
 
vector < int > v[N];
 
bool vis[N];
int mark[N], cnt[4];
 
map < pair < int, int >, bool > edge;
 
vector < int  > vvv[5];
 
int main()
{
    int n, m;
    scanf("%d %d",&n,&m);
    for(int i = 0; i<m; i++)
    {
        int a, b;
        scanf("%d %d",&a,&b);
        v[b].push_back(a);
        v[a].push_back(b);
        edge[ {a,b}] = 1;
    }
 
    mark[1] = 1;
    if(v[1].size()==0)
    {
        printf("-1\n");
        return 0;
    }
    int nod = v[1][0];
    mark[nod] = 2;
    for(int a:v[1])
    {
        vis[a] = 1;
    }
    for(int a:v[nod])
    {
        if(vis[a])
            mark[a] = 3;
        else
            mark[a] = 1;
    }
    for(int i = 1; i<=n; i++)
    {
        if(vis[i] && mark[i]==0)
        {
            mark[i] = 2;
        }
    }
    for(int i = 1; i<=n; i++)
    {
        if(mark[i]==0)
        {
            printf("-1\n");
            return 0;
        }
    }
 
    for(int i = 1; i<=n; i++)
    {
        for(int a:v[i])
        {
            if(mark[a]==mark[i])
            {
                printf("-1\n");
                return 0;
            }
        }
 
        cnt[mark[i]]++;
    }
    ll tmp = (ll)cnt[1]*(cnt[2] + cnt[3]) + (ll)cnt[2]*cnt[3];
    if(tmp!=m)
    {
        printf("-1\n");
        return 0;
    }/*
    for(int i = 1; i<=n; i++)
    {
        vvv[mark[i]].push_back(i);
    }
    for(int i = 1; i<4; i++)
    {
        for(int a:vvv[i])
        {
            for(int j = i+1; j<4; j++)
            {
 
                for(int b:vvv[j])
                {
                    if(edge[ {min(a,b),max(a,b)}]==0)
                    {
                        printf("-1\n");
                        return 0;
                    }
                }
 
            }
        }
    }*/
    for(int i = 1; i<4; i++){
        if(cnt[i]==0){
            printf("-1\n");
            return 0;
        }
    }
    for(int i = 1; i<=n; i++)
        printf("%d ",mark[i]);
    return 0;
}