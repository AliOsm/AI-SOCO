#include <cstdio>
#include <memory.h>
#include <cstring>
#include <vector>
#include <deque>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <functional>
#include <iostream>
#include <set>
#include <list>
#include <map>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#define sz(x) (int)(x).size()
#define all(x) (x).begin(), (x).end()
using namespace std;

typedef unsigned long long llu;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<ll, ll> pll;
typedef pair<ll, int> pli;
typedef pair<int, ll> pil;
typedef pair<string, int> psi;
const ll MOD = 1e9 + 7;
const long double PI = 3.141592653589793238462643383279502884197;

priority_queue<int, vector<int>, greater<int> > pq;
vector<int> v;

int vec[200001];
char visit[200001][2];
ll dp[200001][2];
int n;

ll go(int o, int tu) {
	if (o < 0 || o >= n) return 0;
	if (o == 0) return 1e18;
	if (dp[o][tu] != -1) return dp[o][tu];
	if (visit[o][tu]) return 1e18;
	visit[o][tu] = 1;

	ll sum = 0;
	if(!tu) sum = go(o + vec[o], tu ^ 1) + vec[o];
	else sum = go(o - vec[o], tu ^ 1) + vec[o];

	// printf("%d %d : %lld//\n", o, tu, sum);
	return dp[o][tu] = sum;
}

int main() {
	memset(dp, -1, sizeof(dp));
	scanf("%d", &n);
	for (int i = 1; i < n; i++)
		scanf("%d", &vec[i]);

	for (int i = 1; i < n; i++) {
		ll t = go(i, 1);
		if (t > 1e17) printf("-1\n");
		else printf("%lld\n", t + i);
	}
}