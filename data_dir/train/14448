#include <bits/stdc++.h>
using namespace std;

const int inf = 0x3f3f3f3f, N = 3e5;

int a[N], ans[N], dp[N];

struct RMQ {
        vector <int> t;
        int n;
        RMQ(int n) : n(n) {
                t.resize(n << 1);
        }

        void modify(int p, int v) {
                for(t[p += n] = v; p > 1; p >>= 1) t[p >> 1] = max(t[p], t[p ^ 1]);
        }
        int query(int l, int r) { int res = 0;
                for(l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {
                        if(l & 1) res = max(res, t[l++]);
                        if(r & 1) res = max(res, t[--r]);
                }
                return res;
        }
};



int main() {
        int n, mx = 0; cin >> n; RMQ SegTree(n + 1);
        stack <int> stk;

        for(int i = 1; i <= n; i++) {
                cin >> a[i];
                while(stk.size() && a[stk.top()] < a[i]) {
                        //cout << i  << " " << stk.top() << " " << stk.size() << endl;
                        stk.pop();
                }
               // cout << stk.size() << endl;
                if(stk.empty()) {
                        dp[i] = 0;
                        ans[i] = i;
                } else {
                        int idx = stk.top(); //stk.pop();
                        //cout << i << " " << idx << endl;
                        if(idx == i - 1) {
                                dp[i] = 1;
                                ans[i] = i - 1;
                        } else {
                                if(SegTree.query(idx + 1, i - 1) < dp[idx]) {
                                        dp[i] = SegTree.query(idx + 1, i - 1) + 1;
                                        ans[i] = idx;
                                } else {
                                        ans[i] = ans[idx];
                                        dp[i] = SegTree.query(ans[idx] + 1, i - 1) + 1;
                                }
                        }
                }
                //cout << dp[i] << " ";
                mx = max(mx, dp[i]);
                SegTree.modify(i, dp[i]);
                stk.push(i);
        }

        cout << mx << endl;
}
