#include <bits/stdc++.h>

using namespace std;

#define loop(i, n) for(int i = 0;i < int(n);i++)
#define rloop(i, n) for(int i = int(n);i >= 0;i--)
#define range(i, a, b) for(int i = int(a);i <= int(b);i++)
#define SZ(c) int(c.size())
#define ALL(c) c.begin(), c.end()
#define RALL(c) c.rbegin(), c.rend()
#define PI acos(-1)
#define pb push_back
#define mp make_pair
#define fr first
#define sc second
#define endl '\n'

typedef vector<int> vi;
typedef vector<pair<int, int> > vii;
typedef long long ll;
typedef pair<int, int> pii;

const int MX = 2 * 5005;
vector<int> adj[MX];
int p[MX], c[MX], q[MX], ans[MX], removed[MX];
int n, m, d;
int r[MX], l[MX], vis[MX];
int vis_id, numR;

bool match(int i) {
    for (int j = 0; j < adj[i].size(); j++) {
        if (vis[adj[i][j]] == vis_id)continue;
        vis[adj[i][j]] = vis_id;
        if (l[adj[i][j]] == -1 || match(l[adj[i][j]])) {
            l[adj[i][j]] = i;
            r[i] = adj[i][j];
            return true;
        }
    }
    return false;
}

int runMatching() {
    memset(r, -1, sizeof r);
    memset(l, -1, sizeof l);
    int ret = 0;
    vis_id++;
    while (ret < m && match(ret)) {
        ret++;
        vis_id++;
    }
    return ret;
}


int main() {

#ifndef ONLINE_JUDGE
    //freopen("in.in", "r", stdin);
    //freopen("out.in", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m;
    range(i, 1, n)cin >> p[i];
    range(i, 1, n)cin >> c[i];
    cin >> d;
    range(i, 1, d)cin >> q[i], removed[q[i]] = true;
    range(i, 1, n) {
        if (removed[i])continue;
        adj[p[i]].pb(m + c[i]);
    }


    int curAns = runMatching();

    for (int i = d; i >= 1; i--) {
        ans[i] = curAns;
        adj[p[q[i]]].pb(m + c[q[i]]);
        vis_id++;
        while (curAns < m && match(curAns)) {
            vis_id++;
            curAns++;
        }
    }


    range(i, 1, d)cout << ans[i] << endl;


    return 0;
}
