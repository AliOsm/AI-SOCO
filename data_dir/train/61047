#include <iostream>
#include <string>
#include <map>

using namespace std;

map<string, int> c, cc, oc;

string get_reverse(const string& s) {
    string t = "";
    for (int i = s.length()-1; i >= 0; i--)
        t += s[i];
    return t;
}

int min(int a, int b) {
    return a < b ? a : b;
}

int main() {
    int n, m;
    string s, ccs, ocs, rccs, rocs, mcs, ans;
    
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        cin >> s;
        c[s]++;
    }
    
    for (map<string, int>::iterator it = c.begin(); it != c.end(); it++) {
        string s = it->first;
        string rs = get_reverse(s);
        int t = min(c[s], c[rs]);
        if (s == rs)
            oc[s] = t;
        else if (cc.count(s) + cc.count(rs) == 0 && t != 0)
            cc[s] = t;
    }
    
    for (map<string, int>::iterator it = cc.begin(); it != cc.end(); it++)
        for (int i = 0; i < it->second; i++)
            ccs += it->first;
    rccs = get_reverse(ccs);
    
    for (map<string, int>::iterator it = oc.begin(); it != oc.end(); it++) {
        int& t = it->second;
        if (t % 2 == 1) {
            t--;
            mcs = it->first;
        }
    }
    
    for (map<string, int>::iterator it = oc.begin(); it != oc.end(); it++) {
        int t = it->second / 2;
        for (int i = 0; i < t; i++)
            ocs += it->first;
    }
    rocs = get_reverse(ocs);
    
    ans = ccs + ocs + mcs + rocs + rccs;
    
    cout << ans.length() << endl;
    cout << ans << endl;
    
    return 0;
}
