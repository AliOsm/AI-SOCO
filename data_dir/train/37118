#include<bits/stdc++.h>
using namespace std;
long long a,b,c,d,i,e,f,g,n,m,k,l,B[200005],BITree[1000006],BITree1[1000006],ans;
pair <long long,long long> A[200005];
map <long long,long long> mp,mp1;
long long getSum(long long index) 
{ 
    long long sum = 0;
    while (index>0) 
    { 
        sum += BITree[index]; 
          index -= index & (-index); 
    } 
    return sum; 
} 
void updateBIT(long long index, long long val) 
{ 
    while (index <= k) 
    { 
    BITree[index] += val; 
    index += index & (-index); 
    } 
} 
long long getSum1(long long index) 
{ 
    long long sum = 0;
    while (index>0) 
    { 
        sum += BITree1[index]; 
          index -= index & (-index); 
    } 
    return sum; 
} 
void updateBIT1(long long index, long long val) 
{ 
    while (index <= k) 
    { 
    BITree1[index] += val; 
    index += index & (-index); 
    } 
}
int main() {
           cin>>n;
           for(long long i=1;i<=n;i++) {
                      cin>>A[i].first;
           }
           for(long long i=1;i<=n;i++) {
                      cin>>A[i].second;
                      if(mp[A[i].second]==0) { k++; B[k]=A[i].second; }
                      else mp[A[i].second]=1;
           }
           sort(A+1,A+1+n);
           sort(B+1,B+1+k);
           for(long long i=1;i<=k;i++) {
                      mp1[B[i]]=i;
           }
           for(long long i=1;i<=n;i++) {
                      //cout<<mp1[A[i].second]<<" ";
                      //cout<<getSum1(mp1[A[i].second])<<" "<<A[i].first<<" "<<getSum(mp1[A[i].second])<<endl;
                      ans+=A[i].first*getSum1(mp1[A[i].second])-getSum(mp1[A[i].second]);
                      updateBIT(mp1[A[i].second],A[i].first);
                      updateBIT1(mp1[A[i].second],1);
           }
           cout<<ans;
}