#include <iostream>
#include <algorithm>
#include <vector>
#include <cassert>

typedef long long ll;

struct Pair {
    ll prime, count;
};

auto factor(ll x) {
    std::vector<Pair> ret;
    for (ll i = 2; i * i <= x; ++i) {
        if (x % i == 0) {
            ll cnt = 0;
            while (x % i == 0) {
                ++cnt;
                x /= i;
            }
            ret.push_back(Pair{i, cnt});
        }
    }
    if (x > 1) {
        ret.push_back(Pair{x, 1});
    }
    return ret;
}
const ll INF = (ll)1e12L+1;
ll solve(std::vector<Pair> a, ll b) {
    ll res = 0;
    while (!a.empty() && b > 1) {
        ll min = -1, min_rem = INF;
        for (int i = 0; i < (int)a.size(); ++i) {
            ll rem = b % a[i].prime;
            if (min == -1 || rem < min_rem) {
                min = i;
                min_rem = rem;
            }
        }
        b /= a[min].prime;
        a[min].count--;
        res += min_rem;
        if (a[min].count == 0) {
            a.erase(a.begin()+min);
        }
    }
    return res + b;
}

ll gcd(ll a, ll b) {
    return b == 0 ? a : gcd(b, a % b);
}

ll solve(ll x, ll y) {
    ll d = gcd(x, y);
    x /= d, y /= d;
    return solve(factor(x), y);
}

ll slow(ll x, ll y) {
    if (y == 0) return 0;
    return 1 + slow(x, y - gcd(x, y));
}

void test() {
    for (int x = 1; x <= 100; ++x) {
        for (int y = 1; y <= 100; ++y) {
            auto sw = slow(x, y);
            auto ft = solve(x, y);
            if (sw != ft) {
                std::cout << x << ' ' << y << " slow = " << sw << " fast = " << ft << std::endl;
                std::exit(0);
            }
        }
    }
    std::exit(0);
}

int main() {
    //test();
    ll x, y; 
    while (std::cin >> x >> y) {
        std::cout << solve(x, y) << std::endl;
    }
    return 0;
}