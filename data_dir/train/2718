#include <bits/stdc++.h>
using namespace std;

#define fr(i,n)    for(int i=0;i<n;i++)
#define fru(i,a,b) for(int i=a;i<=b;i++)
#define frd(i,a,b) for(int i=a;i>=b;i--)

typedef long long   ll;
typedef long double ld;
	
const int INF = 2e9 + 10;
const int N   = 1010;
const int MOD = 1e9 + 7;

int n, m, k;
int ver[N], cnt[N], mark[N], sum[N];
vector<vector<int>> vec;

void dfs(int v, int p) {
   
   if(mark[v])
      return;
   
   mark[v] = 1;
   cnt[p] += 1;
   sum[p] += (int)vec[v].size();
   
   fr(i, (int)vec[v].size())
   {
      int u = vec[v][i];
      if(!mark[u])
         dfs(u, p);
   }
}

int main() {
   ios_base::sync_with_stdio(0);
   cout.tie(0); cin.tie(0);
   
   cin >> n >> m >> k;
   fru(i, 1, k) 
   {
      int x; cin >> x;
      ver[x] = 1;
   }
   
   vec.resize(n + 1);
   fru(i, 1, m)
   {
      int x, y;
      cin >> x >> y;
      
      vec[x].push_back(y);
      vec[y].push_back(x);
   }
   
   fru(i, 1, n) if(ver[i])
      dfs(i, i);
   
   int res = 0;
   int tot = 0;
   int sumfree = 0;
   
   fru(i, 1, n) if(!mark[i])
   {
      sumfree += (int)vec[i].size();
      tot++;
   }
   
   res += tot * (tot - 1) / 2 - sumfree / 2;
   
   int maxv = 0;
   fru(i, 1, n) if(ver[i])
   {
      res += cnt[i] * (cnt[i] - 1) / 2 - sum[i] / 2;
      maxv = max(maxv, cnt[i]);
   }
   
   cout << res + tot * maxv;
   
   return 0;
}