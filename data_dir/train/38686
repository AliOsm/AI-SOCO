# include <iostream>
# include <sstream>
# include <cstdio>
# include <cstdlib>
# include <algorithm>
# include <string>
# include <cstring>
# include <cmath>
# include <stack>
# include <queue>
# include <vector>
# include <list>
# include <map>
# include <set>
# include <deque>
# include <iterator>
# include <functional>
# include <bitset>
# include <climits>
# include <ctime>
using namespace std;
#define max(a,b) ((a)>(b)?(a):(b))
#define min(a,b) ((a)<(b)?(a):(b))
#define odd(x) ((x)&1)
#define sqr(x) ((x)*(x))
#define mp make_pair
#define pb push_back
#define fir first
#define sec second
#define all(x) (x).begin(),(x).end()
#define mem(a,x) memset(a,x,sizeof(a))
#define rep(i,a,b) for (int i=(a); i<=(b); ++i)
#define per(i,a,b) for (int i=(a); i>=(b); --i)
#define rep_it(it,x) for (__typeof((x).begin()) it=(x).begin(); it!=(x).end(); it++)
#define ____ puts("\n_______________\n\n") 
#define debug(x) ____; cout<< #x << " => " << (x) << endl
#define debug_pair(x) cout<<"\n{ "<<(x).fir<<" , "<<(x).sec<<" }\n"
#define debug_arr(x,n) ____; cout<<#x<<":\n"; rep(i,0,n) cout<<#x<<"["<<(i)<<"] => "<<x[i]<<endl
#define debug_arr2(x,n,m) ____; cout<<#x<<":\n"; rep(i,0,n) rep(j,0,m) cout<<#x<<"["<<(i)<<"]["<<(j)<<"]= "<<x[i][j]<<((j==m)?"\n\n":"    ")
#define debug_set(x) ____; cout<<#x<<": \n"; rep_it(it,x) cout<<(*it)<<" "; cout<<endl
#define debug_map(x) ____; cout<<#x<<": \n"; rep_it(it,x) debug_pair(*it)
typedef long long ll;
typedef long double ld;
typedef array<int,2> pii;
typedef vector<int> vi;
const int oo = /*2 * 1000 * 1000 * 1000*/0x3f3f3f3f;
const ll ooo=9223372036854775807ll; 
const int _cnt = 1000 * 1000 + 7;
const int _p = 1000 * 1000 * 1000 + 7;
const int N=200005; 
const double PI=acos(-1.0);
const double eps=1e-9;
int o(int x) { return x%_p; }
int gcd(int a, int b) { return b ? gcd(b, a%b) : a; }
int lcm(int a, int b) { return a / gcd(a, b)*b; }

void file_put() {
	string s="/home/jslijin/jslijin/code/";
    freopen((s+"code.in").c_str(), "r", stdin);
    freopen((s+"code.out").c_str(), "w", stdout);
}

int dep[N];

struct LCARMQ{
    static const int N = 201010 << 1;
    int a[25][N] , lft[N] , rft[N], lg[N] , L;
    bool is_p(int x,int y) {
    	return lft[x]<=lft[y] && rft[y]<=rft[x];
	}
	bool is_in(int x,pii t) {
		int u=lca(t[0],t[1]);
		return is_p(u,x) && (is_p(x,t[0]) || is_p(x,t[1]));
	}
    int rmin(int x,int y){return dep[x] < dep[y] ? x : y;}
    void add(int x){ a[0][L++] = x;}
    void dfs(int c,int fa,const vi g[]){
        lft[c]=L;add(c);
        for(auto t : g[c]) if(t!=fa) dep[t]=dep[c]+1,dfs(t,c,g),add(c);
        rft[c]=L-1;
    }
    void Build(const vi g[]){
        L = 0;dfs(1,0,g);
        rep(i,2,L) lg[i]=lg[i>>1]+1;
        rep(i,1,25){
            int lim = L+1-(1<<i);
            rep(j,0,lim-1) a[i][j] = rmin(a[i-1][j] , a[i-1][j+(1<<i>>1)]);
        }
    }
    int lca(int x,int y){
        x = lft[x] , y = lft[y];
        if(x > y) swap(x , y);
        int i = lg[y-x+1];
        return rmin(a[i][x] , a[i][y+1-(1<<i)]);
    }
} TT;

vi G[N]; int n,m,p,x,y,a[N],q,op; pii t[N<<2];

int dist(int x,int y) {
	return dep[x]+dep[y]-2*dep[TT.lca(x,y)];
}

pii merge(const pii &p,const pii &q) {
	if (p[0]==-1 || q[0]==-1) return {-1,-1};
	if (!p[0]) return q;
	if (!q[0]) return p;
	int l1=dist(p[0],p[1]),l2=dist(q[0],q[1]);
	rep(i,0,1) rep(j,0,1) {
		pii tmp={p[i],q[j]};
		if (TT.is_in(p[i^1],tmp) && TT.is_in(q[j^1],tmp))
			return tmp;
	}
	if (TT.is_in(p[0],q) && TT.is_in(p[1],q)) return q;
	if (TT.is_in(q[0],p) && TT.is_in(q[1],p)) return p;
	return {-1,-1};
}

void push_up(int k) {
	t[k]=merge(t[k<<1],t[k<<1|1]);
}

void Update(int k,int l,int r,int x,pii y) {
	if (l==r) { t[k]=y; return; }
	int mid=l+r>>1;
	if (x<=mid) Update(k<<1,l,mid,x,y); else Update(k<<1|1,mid+1,r,x,y);
	push_up(k);
}

int Query(int k,int l,int r,pii y) {
	//debug(l);
	//debug(r);
	//debug_arr(y,1);
	if (l==r) {
		pii tmp=merge(y,t[k]);
		return l+(tmp[0]!=-1);
	}
	int mid=l+r>>1;
	pii tmp=merge(y,t[k<<1]);
	if (tmp[0]==-1) return Query(k<<1,l,mid,y);
	return Query(k<<1|1,mid+1,r,tmp);
}

int main() {
    //file_put();

    scanf("%d",&n);
    rep(i,1,n) scanf("%d",&a[i]);
    rep(i,2,n) scanf("%d",&p),G[p].pb(i);
    TT.Build(G);
    rep(i,1,n) Update(1,0,n-1,a[i],{i,i});
    scanf("%d",&q);
    while (q--) {
    	scanf("%d",&op);
    	if (op==1) {
			scanf("%d%d",&x,&y);
			swap(a[x],a[y]);
			Update(1,0,n-1,a[x],{x,x});
			Update(1,0,n-1,a[y],{y,y});
		} else printf("%d\n",Query(1,0,n-1,{0,0}));
	}
	
    return 0;
}