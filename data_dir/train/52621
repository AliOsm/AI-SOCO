#include<bits/stdc++.h>
//#include <ext/pb_ds/tree_policy.hpp>
//#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
//using namespace __gnu_pbds;
//typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>pbds;
//#pragma comment(linker, "/stack:200000000")
#define mod ( ll  ) ( 998244353 )  //( 1e9 + 7 )
#define ll long long int
#define inf ( ll  )( 1e9 + 10 )
#define mxs (int)( 1e6 + 10 )
//#define md  int mid = ( l + r )>>1;
//int dx[]={+1,-1,+0,+0};///Four Directions
//int dy[]={+0,+0,+1,-1};///Four directions
//int dx [] = {+1,-1,+0,+0,-1,-1,+1,+1};///Eight Directions
//int dy [] = {+0,+0,+1,-1,+1,-1,-1,+1};///Eight Directions
ll n, m, cases, t , ans;
string s , s2 , s3;
ll ar [ mxs ], ar2 [ mxs ] , cum [ mxs ];
priority_queue < pair < ll , ll > > pq;
vector < pair < ll , ll > > graph [ mxs ];
ll dis [ mxs ];
void brainfuck();
int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    ios_base::sync_with_stdio(NULL);
    cin.tie(NULL);
    cout.tie(NULL);
    brainfuck();
    return 0;
}
void brainfuck()
{
    cin>>n;
    ll a , b , c;
    for ( int i = 1 ; i < n; i++ )
    {
        cin>>a>>b>>c;
        graph [ a ].push_back( { b , c } );
        graph [ b ].push_back( { a , c } );
        ans += ( c + c );
        dis [ i ] = (ll)1e18;
    }
    dis [ n ] = (ll)1e18;
    pq.push( { 0 , 1 } );
    dis [ 1 ] = 0;
    ll mx = 0 ;
    while( !pq.empty() )
    {
        a = pq.top().second;
        pq.pop();
        int sz = graph [ a ].size();
        for ( int i = 0 ; i < sz; i++ )
        {
            b = graph [ a ] [ i ].first;
            c = graph [ a ] [ i ].second;
            if ( dis [ b ] > dis [ a ] + c )
            {
                dis [ b ] = dis [ a ] + c;
                pq.push( { -dis [ b ] , b } );
                mx = max( dis [ b ] , mx );
            }
        }
    }
    ans -= mx;
    cout<<ans;
}
