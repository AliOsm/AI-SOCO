// So when you feel like hope is gone, Look inside you and be strong, And you'll finally see the truth, That a hero lies in you ... 
 
#include<bits/stdc++.h>

#define F first
#define S second
#define PB push_back
#define sz(s) int((s).size())
#define bit(n,k) (((n)>>(k))&1)

using namespace std;

typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;

const int maxn = 2e5 + 10, mod = 1e9 + 7;
const ll inf = 1e18;

template<typename A, typename B> ostream& operator << (ostream& out, pair<A, B> p){
    out << "{ " << p.F << ", " << p.S <<" }";
    return out;
}
template<typename T> ostream& operator << (ostream& out, vector<T> v){
    out << "[ ";
    for(int i = 0; i < sz(v); i++){
	out << v[i];
	if(i != sz(v)-1)
	    out << " ,";
    }
    out << " ]";
    return out;
}

int a[maxn], b[maxn], n;

ll val[4 * maxn], lz[4 * maxn];

void shift(int l, int r, int id){
    val[id]+= lz[id];
    if(r-l > 1)
	lz[2*id]+= lz[id], lz[2*id+1]+= lz[id];
    lz[id] = 0;    
}
void add(int f, int s, ll x, int l = 0, int r = n, int id = 1){
    if(f>=s || l>=r)
	return;
    shift(l, r, id);
    if(s<=l || r<=f)
	return;
    if(f<=l && r<=s){
	lz[id] = x;
	shift(l, r, id);
	return;
    }
    int mid = (l+r) >> 1;
    add(f, s, x, l, mid, 2*id);
    add(f, s, x, mid, r, 2*id+1);
    val[id] = max(val[2*id], val[2*id+1]);    
}

int main(){
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie();

    cin >> n;
    for(int i = 0; i < n; i++)
	cin >> a[i], --a[i];
    for(int i = 0; i < n; i++)
	cin >> b[i];
    for(int i = 0; i < n; i++){
	add(0, a[i], b[i]);	
    }
    ll ans = 0, sm = 0;
    for(int i = 0; i < n-1; i++){
	add(0, a[i], -b[i]);
	add(a[i], n, b[i]);
	ans = max(ans, val[1]);
    }
    for(int i = n-1; i > 0; i--){
	sm+= b[i];
	ans = max(ans, sm);
    }
    ans*=-1;
    for(int i = 0; i < n; i++)
	ans+= b[i];
    return cout << ans << endl, 0;
}
// #pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math")
// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
