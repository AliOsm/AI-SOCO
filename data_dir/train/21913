// In the name of God
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <assert.h>
#include <bitset>
#include <unordered_set>
#define sqr(a) ((a)*(a))
#define all(a) (a).begin(), (a).end()
using namespace std;

template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}

string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}

const long long INF = (long long)1e18 + 227 + 1;
const int INFINT = 1e9 + 227 + 1;
const int MAXN = (int)1e6 + 227 + 1;
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-5;

long long bin_pow(long long a, long long b) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2);
    ans = ans * ans;
    if(b % 2) ans = ans * a;
    return ans;
}

int a[MAXN], b[MAXN];

int main() {
    // freopen(".in", "r", stdin);

    long long l = -INF;
    long long r = INF;

    int n; cin >> n;
    for(int i = 0; i < n; i++) {
        a[i] = next_int<int>();
        b[i] = next_int<int>();
    }

    for(int i = 0; i < n; i++) {
        if(b[i] == 1) 
            l = max(l, 1900LL);
        if(b[i] == 2)
            r = min(r, 1899LL);

        if(i + 1 < n && b[i + 1] == 2 && b[i] == 1) {
            if(a[i] >= 0) {
                puts("Impossible");
                return 0;
            }
            r = min(r, 1900LL - a[i] - 1);
        }
        if(i + 1 < n && b[i + 1] == 1 && b[i] == 2) {
            if(a[i] <= 0) {
                puts("Impossible");
                return 0;
            }
            l = max(l, 1900LL - a[i]);
        }
        l += a[i];
        r += a[i];

        if(l > r) {
            puts("Impossible");
            return 0;
        }
    }

    if(r >= INFINT) {
        puts("Infinity");
        return 0;
    }

    cout << r << "\n";
}
