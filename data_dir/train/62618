#include <bits/stdc++.h>
using namespace std;

#define rep(i, v)       for(int i=0;i<sz(v);++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define all(v)              ((v).begin()), ((v).end())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
const ll OO = 1e8;

const double EPS = (1e-7);
int dcmp(double x, double y) {  return fabs(x-y) <= EPS ? 0 : x < y ? -1 : 1;   }

#define pb                  push_back
#define MP                  make_pair
#define P(x)                cout<<#x<<" = { "<<x<<" }\n"
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef vector<pair<int, int> > vii;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;


#define FilesX



int main() // B
{
#ifdef Files
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios::sync_with_stdio(false);

    ll h, w; cin >> h >> w;
    vi vh;
    vi vw;
    ll num = 1;
    while(num <= h) vh.push_back(num), num *= 2;
    num = 1;
    while(num <= w) vw.push_back(num), num *= 2;
    reverse(all(vh));
    reverse(all(vw));
    
    ll maxi = 0, maxh = 0, maxw;
    rep(i, vh){
        ll hh = vh[i];
        double mwd = hh / 1.25 + EPS;
        if(mwd > w) continue;
        ll mw = hh / 0.8 + EPS;
        if(mw > w) mw = w;
        if(hh * mw > maxi || (hh * mw == maxi && hh > maxh))
            maxi = hh * mw, maxh = hh, maxw = mw;
    }
    rep(i, vw){
        ll ww = vw[i];
        double mhd = ww * 0.8 + EPS;
        if(mhd > h) continue;
        ll mh = ww * 1.25 + EPS;
        if(mh > h) mh = h;
        if(ww * mh > maxi || (ww * mh == maxi && mh > maxh))
            maxi = ww * mh, maxh = mh, maxw = ww;
    }
    cout << maxh << " " << maxw << endl;
    
    return 0;
}
