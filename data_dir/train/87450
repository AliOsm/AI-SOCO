#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int a[200500];

vector<int> t[800500];

void build (int a[], int v, int tl, int tr) {
	if (tl == tr)
		t[v] = vector<int> (1, a[tl]);
	else {
		int tm = (tl + tr) / 2;
		build (a, v*2, tl, tm);
		build (a, v*2+1, tm+1, tr);
		merge (t[v*2].begin(), t[v*2].end(), t[v*2+1].begin(), t[v*2+1].end(),
			back_inserter (t[v]));
	}
}

int query (int v, int tl, int tr, int l, int r, int x) {
	if (l > r)
		return 0;
	if (l == tl && tr == r) {
		vector<int>::iterator pos = lower_bound (t[v].begin(), t[v].end(), x);
		return pos-t[v].begin();
	}
	int tm = (tl + tr) / 2;
	return
		query (v*2, tl, tm, l, min(r,tm), x)
		+query (v*2+1, tm+1, tr, max(l,tm+1), r, x)
	;
}

int query1 (int v, int tl, int tr, int l, int r, int x) {
	if (l > r)
		return 0;
	if (l == tl && tr == r) {
		vector<int>::iterator pos = upper_bound (t[v].begin(), t[v].end(), x);
		return t[v].end()-pos;
	}
	int tm = (tl + tr) / 2;
	return
		query1 (v*2, tl, tm, l, min(r,tm), x)
		+query1 (v*2+1, tm+1, tr, max(l,tm+1), r, x)
	;
}

long long int f(int x)
{
    if (x<0) return 0ll;
    return 1ll*x*(x-1ll)/2ll;
}

int main()
{
    //freopen("a","r",stdin);
    int n,q;
    scanf("%d %d",&n,&q);
    for (int i=0;i<n;i++)
    {
        scanf("%d",a+i);
        a[i]--;
    }
    build(a,1,0,n-1);
    //int q;
    //cin >> q;
    while(q--)
    {
        int l,d,r,u;
        scanf("%d %d %d %d",&l,&u,&r,&d);
        //if (n==200000)
        //printf("%d %d %d %d\n",l,u,r,d);
        l--;
        d--;
        r--;
        u--;
        long long int res=0,a1,a2,a3,a4,a5,a6,a7,a8,a9;
        a1=(n);
        a2=(l);
        a3=(n-r-1);
        a4=(u);
        a5=(n-d-1);
        a6=(query(1,0,n-1,0,l-1,u));
        a7=(query(1,0,n-1,r+1,n-1,u));
        a8=(query1(1,0,n-1,0,l-1,d));
        a9=(query1(1,0,n-1,r+1,n-1,d));
        res=f(a1)-f(a2)-f(a3)-f(a4)-f(a5)+f(a6)+f(a7)+f(a8)+f(a9);
        //if (n==200000)
        //printf("%lld %lld %lld %lld %lld %lld %lld %lld %lld \n",a1,a2,a3,a4,a5,a6,a7,a8,a9);
        printf("%lld\n",res);
    }
    return 0;
}
