#include <bits/stdc++.h>

#define pb push_back
#define pp pop_back
#define mp make_pair
#define ld long double
#define f first
#define s second
#define ll long long

using namespace std;

const int N = 3e6 + 5;

const int mod = 1e9 + 7;
		
int n, m, p[N], q[N], qh, qt, in[N], ans[N];

vector < int > g[N], a[N];

int get(int a)
{
	if (p[a] == a) return a;
	return p[a] = get(p[a]);
}

void Merge(int a, int b)
{
	a = get(a);
	b = get(b);
	if (a == b) return;
	p[b] = a;
}

void add_edge(int a, int b)
{
	a = get(a); b = get(b);
	g[a].pb(b);
	in[b]++;
}

int main()
{
  ios_base::sync_with_stdio(0);
  cin >> n >> m;
  for (int i = 1;i <= n;i++)
  {
  	a[i].resize(m + 1);
  	for (int j = 1;j <= m;j++) 
  	{
  		cin >> a[i][j];
  		p[i * m + j] = i * m + j;
  	}
  }
	for (int i = 1;i <= n;i++)
	{
		vector < pair < int, int > > all;
		for (int j = 1;j <= m;j++) all.pb(mp(a[i][j], i * m + j));
		sort(all.begin(), all.end());
		for (int j = 0;j < m;j++)
		{
			int cur = all[j].f;
			while(j + 1 < m && cur == all[j + 1].f) 
			{	
				Merge(all[j].s, all[j + 1].s);
				j++;
			}
		}
	}
	for (int j = 1;j <= m;j++)
	{
		vector < pair < int, int > > all;
		for (int i = 1;i <= n;i++) all.pb(mp(a[i][j], i * m + j));
		sort(all.begin(), all.end());
		for (int i = 0;i < n;i++)
		{
			int cur = all[i].f;
			while(i + 1 < n && cur == all[i + 1].f) 
			{
				Merge(all[i].s, all[i + 1].s);
				i++;
			}
		}
	}
	for (int i = 1;i <= n;i++)
	{
		vector < pair < int, int > > all;
		for (int j = 1;j <= m;j++) all.pb(mp(a[i][j], i * m + j));
		sort(all.begin(), all.end());
		for (int j = 0;j + 1 < m;j++) if (all[j].f != all[j + 1].f) add_edge(all[j].s, all[j + 1].s);
	}
	for (int j = 1;j <= m;j++)
	{
		vector < pair < int, int > > all;
		for (int i = 1;i <= n;i++) all.pb(mp(a[i][j], i * m + j));
		sort(all.begin(), all.end());
		for (int i = 0;i + 1 < n;i++) if (all[i].f != all[i + 1].f) add_edge(all[i].s, all[i + 1].s);
	}
	for (int i = 1;i <= n;i++)
		for (int j = 1;j <= m;j++)
			if (p[i * m + j] == i * m + j && in[i * m + j] == 0)
			{
				q[qt++] = i * m + j;
				ans[i * m + j] = 1;
			}
	while(qh < qt)
	{
		int v = q[qh++];
		for (auto to : g[v])
		{
			ans[to] = max(ans[to], ans[v] + 1);
			in[to]--;
			if (in[to] == 0) q[qt++] = to;
		}
	}
	for (int i = 1;i <= n;i++)
	{
		for (int j = 1;j <= m;j++) cout << ans[get(i * m + j)] << " ";
		cout << endl;
	}
	return 0;
}