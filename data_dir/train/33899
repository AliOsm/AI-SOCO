#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef double real;

#ifdef WIN32
#define INT64 "%I64d"
#define UINT64 "%I64u"
#else
#define INT64 "%lld"
#define UINT64 "%llu"
#endif

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

int const MAX_N = 20;
int const MAX_L = 1 << MAX_N;
int const MAX_C = 0x3F3F3F3F;
int const NA = -1;
real const EPS = 1E-12;

real x [MAX_N];
real y [MAX_N];
real a [MAX_N];
real sa [MAX_N];
real ca [MAX_N];
real f [MAX_L];
int n;
real l;
real r;

int main (void)
{
	while (scanf (" %d %lf %lf", &n, &l, &r) != EOF)
	{
		for (int i = 0; i < n; i++)
		{
			scanf (" %lf %lf %lf", &x[i], &y[i], &a[i]);
			a[i] *= M_PI / 180.0;
			sa[i] = sin (a[i]);
			ca[i] = cos (a[i]);
		}
		int m = 1 << n;
		for (int s = 0; s < m; s++)
		{
			f[s] = l;
		}
		real res = l;
		for (int s = 0; s < m; s++)
		{
			real d = f[s];
			for (int i = 0; i < n; i++)
			{
				if (!(s & (1 << i)))
				{
					int t = s ^ (1 << i);
					real dx = d - x[i];
					real dy = 0 - y[i];
					real ex =  dx * ca[i] - dy * sa[i];
					real ey =  dx * sa[i] + dy * ca[i];
//					printf ("%.10lf %.10lf\n", dx, dy);
//					printf ("%.10lf %.10lf\n", ex, ey);
					if (ey >= EPS)
					{
						f[t] = r;
						continue;
					}
					real e = x[i] - ex * y[i] / ey;
//					printf ("%.10lf\n", e);
					e = min (e, r);
					f[t] = max (f[t], e);
				}
			}
			res = max (res, f[s]);
		}
		printf ("%.20lf\n", res - l);
	}
	return 0;
}
