#include <bits/stdc++.h>

using namespace std;

typedef pair <int,int> pii;

#define L first
#define R second

const int maxn = 1e5;

int n, seg[4 * maxn], qx[maxn], qy[maxn], ans[maxn];

pii memb[maxn], Memb[maxn], ord[maxn];

vector <pii> v[maxn];
vector <int> q[maxn];

void add(int idx,int L=0,int R=n,int id=1) {
    if (L == R - 1) {
        seg[id]++;
        return;
    }
    int mid = (L + R) >> 1;
    if (idx < mid)
        add(idx, L, mid, id * 2 + 0);
    else
        add(idx, mid, R, id * 2 + 1);
    seg[id] = seg[id * 2 + 0] + seg[id * 2 + 1];
}

int get(int l,int r,int L=0,int R=n,int id=1) {
    if (l == L && r == R)
        return seg[id];
    int mid = (L + R) >> 1, ret = 0;
    if (l < mid)
        ret += get(l, min(mid, r), L, mid, id * 2 + 0);
    if (r > mid)
        ret += get(max(l, mid), r, mid, R, id * 2 + 1);
    return ret;
}

void ADD(int idx,int val,int L=0,int R=n,int id=1) {
    if (L == R - 1) {
        seg[id] = max(seg[id], val);
        return;
    }
    int mid = (L + R) >> 1;
    if (idx < mid)
        ADD(idx, val, L, mid, id * 2 + 0);
    else
        ADD(idx, val, mid, R, id * 2 + 1);
    seg[id] = max(seg[id * 2 + 0], seg[id * 2 + 1]);
}

int GET(int l,int r,int L=0,int R=n,int id=1) {
    if (l == L && r == R)
        return seg[id];
    int mid = (L + R) >> 1, ret = -1;
    if (l < mid)
        ret = max(ret, GET(l, min(r, mid), L, mid, id * 2 + 0));
    if (r > mid)
        ret = max(ret, GET(max(l, mid), r, mid, R, id * 2 + 1));
    return ret;
}

int main() {
    ios_base::sync_with_stdio(false);
    int k;
    cin >> n >> k;
    vector <int> all;
    for (int i = 0; i < n; i++)
        cin >> memb[i].L, all.push_back(memb[i].L);
    sort(all.begin(), all.end());
    all.resize(unique(all.begin(), all.end()) - all.begin());
    for (int i = 0; i < n; i++)
        memb[i].L = lower_bound(all.begin(), all.end(), memb[i].L) - all.begin();

    all.clear();
    for (int i = 0; i < n; i++)
        cin >> memb[i].R, all.push_back(memb[i].R);
    sort(all.begin(), all.end());
    all.resize(unique(all.begin(), all.end()) - all.begin());
    for (int i = 0; i < n; i++)
        Memb[i] = memb[i];
    sort(memb, memb + n);

    for (int i = 0; i < n; i++) {
        int idx = lower_bound(all.begin(), all.end(), memb[i].R) - all.begin();
        add(idx);
        int l = lower_bound(all.begin(), all.end(), memb[i].R - k) - all.begin();
        int r = upper_bound(all.begin(), all.end(), memb[i].R + k) - all.begin();
        v[memb[i].L].push_back(make_pair(get(l, r), memb[i].R));
    }

    int Q;
    cin >> Q;
    for (int i = 0; i < Q; i++) {
        cin >> qx[i] >> qy[i];
        qx[i]--, qy[i]--;
        q[max(Memb[qx[i]].L, Memb[qy[i]].L)].push_back(i);
    }
    memset (seg, -1, sizeof seg);
    for (int i = n - 1; i >= 0; i--) {
        for (int j = 0; j < v[i].size(); j++) {
            int idx = lower_bound(all.begin(), all.end(), v[i][j].R) - all.begin();
            ADD(idx, v[i][j].L);
        }
        for (int j = 0; j < q[i].size(); j++) {
            int idx = q[i][j];
            int ax = Memb[qx[idx]].R;
            int ay = Memb[qy[idx]].R;
            if (ax > ay)
                swap(ax, ay);
            int l = ay - k;
            int r = ax + k;
            if (r < l)
                ans[idx] = -1;
            else {
                int ll = lower_bound(all.begin(), all.end(), l) - all.begin();
                int rr = upper_bound(all.begin(), all.end(), r) - all.begin();
                ans[idx] = GET(ll, rr);
            }
        }
    }

    for (int i = 0; i < Q; i++)
        cout << ans[i] << '\n';

    return 0;
}
