#include "bits/stdc++.h"
#include "ext/pb_ds/tree_policy.hpp"
#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define in(x) (read(x))
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define _sort(a) sort(a.begin(),a.end())
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void read(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

const int maxn = 200010;
vector<int>adj[maxn];
bool vis[maxn];
int cnt = 0;
bool ins[maxn];
int depth[maxn];
vector<ll>cyc;
void dfs(int fa,int cur){
	vis[cur] = 1;
	ins[cur] = 1;
	for(auto to:adj[cur]){
		if(to!=fa){
			if(ins[to] && vis[to]){
				cyc.PB(depth[cur]-depth[to]+1);
				ins[cur] = ins[to] =  0;
			}else if(!vis[to]){	
				depth[to] = depth[cur]+1;
				dfs(cur,to);
			}
		}
	}
	ins[cur] = 0;
}
ll fast(ll a,ll b,ll mod){
	ll ans = 1;
	while(b){
		if(b&1){
			b--;
			ans = ans * a % mod;
		}else{
			a = a * a % mod;
			b/=2;
		}
	}
	return ans;
}

int main(){
	int n;in(n);
	REP(i,1,n+1){
		int c;in(c);
		adj[c].PB(i);
		adj[i].PB(c);
	}
	REP(i,1,n+1){
		sort(all(adj[i]));
	}
	REP(i,1,n+1){
		REP(j,1,sz(adj[i])){
			if(adj[i][j]==adj[i][j-1]){
				cyc.PB(2);
			}
		}
	}
	REP(i,1,n+1){
		complete_unique(adj[i]);
	}
	int t = sz(cyc);
	assert(t%2==0);
	REP(i,0,t/2)cyc.pop_back();
	REP(i,1,n+1){
		if(!vis[i]){
			dfs(0,i);
		}
	}
	if(!sz(cyc)){
		cout<<fast(2,n,mod);;return 0;
	}
	ll re = n;
	for(auto i:cyc)re-=i;
	ll ans = 1;
	for(auto i:cyc){
		ans = ans * (fast(2,i,mod)-2+mod) % mod;
	}
	ans = ans *fast(2,re,mod)%mod;
	cout<<ans;
	return 0;
}