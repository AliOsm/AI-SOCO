#define pragma

#ifdef pragma
#pragma GCC optimize("Ofast")
#pragma GCC optimize("no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")
#endif // pragma

#include <bits/stdc++.h>

using namespace std;
using matrix = vector<vector<long long>>;

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

#define all(x) (x).begin(), (x).end()
#define INF 1000000001

//#define int ll
// Проверь еще раз, не нужно ли изменить int на ll?

const int MAXN = 3e5 + 100;
bool flag = false;
string s;
vector<int> g[MAXN], gt[MAXN];
int used[MAXN];
int d[MAXN][26];

void dfs1(int u) {
    used[u] = 1;
    for (int to : g[u]) {
        if (used[to] == 2) {
            continue;
        }
        else if (used[to] == 1) {
            flag = true;
            break;
        }
        dfs1(to);
    }
    used[u] = 2;
}

bool is_cyclic(int n) {
    for (int i = 0; i < n; ++i) {
        if (used[i]) {
            continue;
        }
        dfs1(i);
        if (flag) {
            return true;
        }
    }
    return false;
}

void update(int u, int v) {
    for (int i = 0; i < 26; ++i) {
        d[v][i] = max(d[v][i], d[u][i]);
    }
}

void dfs2(int u) {
    used[u] = 3;
    for (int to : gt[u]) {
        if (used[to] != 3) {
            dfs2(to);
        }
        update(to, u);
    }
    d[u][s[u] - 'a']++;
}

signed main() {

    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    int n, m;
    cin >> n >> m >> s;
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        u--;
        v--;
        g[u].push_back(v);
        gt[v].push_back(u);
    }
    if (is_cyclic(n)) {
        cout << -1;
        return 0;
    }
    for (int i = 0; i < n; ++i) {
        if (used[i] == 3) {
            continue;
        }
        dfs2(i);
        update(i, n);
    }
    int mx = d[n][0];
    for (int i = 0; i < 26; ++i) {
        mx = max(mx, d[n][i]);
    }
    cout << mx;
}