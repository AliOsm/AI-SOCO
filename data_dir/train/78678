#include "bits/stdc++.h"
//#include "ext/pb_ds/tree_policy.hpp"
//#include "ext/pb_ds/assoc_container.hpp"
#define PB push_back
#define PF push_front
#define LB lower_bound
#define UB upper_bound
#define fr(x) freopen(x,"r",stdin)
#define fw(x) freopen(x,"w",stdout)
#define iout(x) printf("%d\n",x)
#define lout(x) printf("%lld\n",x)
#define REP(x,l,u) for(ll x = l;x<u;x++)
#define RREP(x,l,u) for(ll x = l;x>=u;x--)
#define complete_unique(a) a.erase(unique(a.begin(),a.end()),a.end())
#define mst(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define PII pair<int,int>
#define PLL pair<ll,ll>
#define MP make_pair
#define sqr(x) ((x)*(x))
#define lowbit(x) (x&(-x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define se second
#define fi first
#define dbg(x) cout<<#x<<" = "<<(x)<<endl;
#define sz(x) ((int)x.size())
#define EX0 exit(0);
#define twop(x) (1LL<<x)

typedef  long long ll;
typedef unsigned long long ull;
typedef double db;
typedef long double ld;
using namespace std;
const int block_size = 320;
typedef complex<ll> point;
const ll mod = 1e9+7;
const ld eps = 1e-9;
const int inf = mod;
const db PI = atan(1)*4;
template<typename T>
inline int sign(const T&a){if(a<0)return -1;if(a>0)return 1;return 0;}


template<typename T> inline void in(T &x){
    x = 0; T f = 1; char ch = getchar();
    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}
    while (isdigit(ch))  {x = x * 10 + ch - '0'; ch = getchar();}
    x *= f;
}

int n,t,k;
int cnt[200010];
void f(){
    cout<<-1;EX0;
}

PII range[200010];
int val[200010];
vector<int>cap[200010];
vector<PII>ans;
int main(){
    cin>>n>>t>>k;
    cnt[0] = 1;
    REP(i,1,t+1){
        cin>>cnt[i];
    }
    int bound[2] = {0,0};
    REP(i,0,t){
        if(cnt[i+1]&&!cnt[i])f();
    }
    REP(i,0,t+1){
        if(cnt[i+1]>=cnt[i])continue;
        range[i].fi = cnt[i]-cnt[i+1];
        bound[0]+=cnt[i]-cnt[i+1];
    }
    REP(i,0,t+1){
        if(cnt[i+1]==0){
            bound[1]+=cnt[i];
            range[i].se = cnt[i];
        }else{
            range[i].se = cnt[i]-1;
            bound[1]+=cnt[i]-1;
        }
    }
    if(k<bound[0]||k>bound[1])f();
    REP(i,1,t+1){
        val[i] = range[i].fi;
        k-=val[i];
    }
    REP(i,1,t+1){
        if(k){
            if(k>=range[i].se-val[i]){
                k-=range[i].se-val[i];
                val[i] = range[i].se;
            }else{
                val[i]+=k;
                k=0;
            }
        }
    }
    int curNode = 1;
    REP(i,0,t+1){
        REP(j,0,cnt[i])cap[i].PB(curNode++);
    }
    REP(i,0,t){
        REP(j,0,cnt[i]-val[i]){
            ans.PB({cap[i][j],cap[i+1][j]});
        }
        REP(j,cnt[i]-val[i],sz(cap[i+1])){
            ans.PB({cap[i][0],cap[i+1][j]});
        }
    }
    cout<<curNode-1<<endl;
    REP(i,0,sz(ans)){
        cout<<ans[i].fi<<' '<<ans[i].se<<endl;
    }
    return 0;
}