#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <memory.h>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 1e18+7;
const long long mod = 1e9+7;
const double eps = 1e-12;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (ll (i)=0;(i)<(ll)(n);(i)++)
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, m;

bool def[5005];
ll ans[5005], add[5005];
ll q[5005];
ll type[5005];
ll L[5005];
ll R[5005];
ll Val[5005];

void check(){
  forn(i, n){
    if(ans[i] < -1000000000 || ans[i] > 1000000000){
      puts("NO");
      exit(0);
    }
    q[i] = ans[i];
  }
  forn(i, m){
    ll t = type[i], l = L[i], r = R[i], val = Val[i];
    if(t == 1){
      for(int i = l; i <= r; ++i){
        q[i] += val;
      }
      continue;
    }
    ll Max = q[l];
    for(int i = l + 1; i <= r; ++i){
      Max = max(Max, q[i]);
    }
    if(Max != val){
      puts("NO");
      exit(0);
    }
  }
}

int main(void) {
  #ifndef ONLINE_JUDGE
      freopen("input.txt","rt",stdin);
      freopen("output.txt","wt",stdout);
  #endif
  scanf("%d%d", &n, &m);
  forn(i, m){
    ll t, l, r, val;
    cin >> t >> l >> r >> val;
    --l; --r;
    type[i] = t;
    L[i] = l;
    R[i] = r;
    Val[i] = val;
    if(t == 1){
      for(int i = l; i <= r; ++i){
        add[i] += val;
      }
    } else {
      for(int i = l; i <= r; ++i){
        if(!def[i]){
          def[i] = true;
          ans[i] = val - add[i];
        } else {
          if(val < ans[i] + add[i]){
            ans[i] = val - add[i];
          }
        }
      }
    }
  }
  check();
  puts("YES");
  forn(i, n){
    printf("%d ", (int)ans[i]);
  }
  printf("\n");
  return 0;
}
