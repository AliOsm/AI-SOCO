#include "bits/stdc++.h"
using namespace std;

#define F first
#define S second
#define sz(x) (int)x.size()
#define rep(i,a,n) for (int i = a; i <= n; ++i)
#define all(v)  v.begin(), v.end()
#define pb push_back
#define P pair < int, int >
#define E cout << '\n'
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
	cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
const int mod = 1e9 + 7;
const int N = 2e5 + 5;

int a[N], b[N];
int h[N];
vector < int > v(1);
 
inline void solve() {
	int n, ans(0), x;
	cin >> n;
	rep(i, 1, n) {
		cin >> x;
		h[x] += 1;
	}
	rep(i, 1, n)
		cin >> b[i];
	int idx = n - b[n] + 1, cur = 1;
	bool f = 0;	
	for(int i = idx; i <= n; ++i) {
		if(cur++ != b[i]) {
			f = 1;	
			break;
		}
	}	
	// trace(idx, a[1], b[2]);
	if(!f) {
		rep(i, 1, b[n])	{
			v.push_back(i);			
		}
	}
	for(int i = 1; i <= n; ++i) {
    	if(v.size() == n + 1)
    		break;
    	int req = v.back() + 1;    	    	
    	if(h[req]) {    		    		
    		v.push_back(req);
    	}
    	else {
    		for(int i = sz(v) - 1; i > 0; --i)
    			if(!h[v[i]]){
    				v.clear();v.pb(0);
    				break;
    			}
    	}
    	h[b[i]] += 1;
    	++ans;
    }
    cout << ans + n - (sz(v) - 1);
    trace(idx, a[1], b[2]);
}

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t; while(t--)
                solve();
    return 0;
}