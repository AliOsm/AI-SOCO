#include <bits/stdc++.h>
using namespace std;
const int N = 123456 + 7;
int d[N];
bool bad[N];
bool ok[N];
int bb[N];
int removed = 0;
vector<int> adj[N];

void dfs(int v, int p)
{
    ok[v] = bad[v];
    for (auto u : adj[v])
    {
        if (p == u)
            continue;
        d[u] = d[v] + 1;
        dfs(u, v);
        if (!ok[u])
            removed++;
        ok[v] |= ok[u];
    }
}

int main()
{
    ios::sync_with_stdio(false);
    int n, m;
    cin >> n >> m;
    for (int i=1; i<n; i++)
    {
        int u, v;
        cin >> u >> v;
        u--, v--;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }
    for (int i=0; i<m; i++)
    {
        cin >> bb[i];
        bb[i]--;
        bad[bb[i]] = 1;
    }

    d[bb[0]] = 0;
    dfs(bb[0], -1);

    int mxv = bb[0];
    for (int i=0; i<m; i++)
        if (d[mxv] < d[bb[i]] || (d[mxv] == d[bb[i]] && mxv > bb[i]))
            mxv = bb[i];

    int edges = n-1 - removed;

    d[mxv] = 0;
    dfs(mxv, -1);

    int mxu = bb[0];
    for (int i=0; i<m; i++)
        if (d[mxu] < d[bb[i]] || (d[mxu] == d[bb[i]] && mxu > bb[i]))
            mxu = bb[i];

    cout << min(mxv, mxu) + 1 << "\n";
    cout << edges * 2 - d[mxu] << "\n";
    return 0;
}