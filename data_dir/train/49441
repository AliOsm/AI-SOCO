#include <bits/stdc++.h>
using namespace std;

#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()

using ll = long long;
using ld = long double;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	ll t;
	cin >> t;
	for (ll i = 0; i < t; i++) {
		ll n, m;
		cin >> n >> m;
		vector<set<ll>> adj(n);
		for (ll j = 0; j < m; j++) {
			ll a, b;
			cin >> a >> b;
			a--;
			b--;
			adj[a].insert(b);
			adj[b].insert(a);
		}
		vector<ll> degreeOne;
		for (ll i = 0; i < n; i++) {
			if (sz(adj[i]) == 1) degreeOne.push_back(i);
		}
		vector<bool> covered(n);
		vector<ll> res;
		while (!degreeOne.empty()) {
			ll c = degreeOne.back();
			degreeOne.pop_back();
			if (!covered[c]) {
				c = *adj[c].begin();
				res.push_back(c);
				covered[c] = true;
				for (ll n : adj[c]) {
					covered[n] = true;
					adj[n].erase(c);
				}
				adj[c].clear();
			}
		}

		vector<ll> order(n);
		for (ll j = 0; j < n; j++) {
			order[j] = j;
		}
		sort(all(order), [&](ll a, ll b){
			return sz(adj[a]) > sz(adj[b]);
		});
		for (ll x : order) {
			if (!covered[x]) {
				res.push_back(x);
				covered[x] = true;
				for (ll n : adj[x]) {
					covered[n] = true;
				}
			}
		}
		cout << sz(res) << endl;
		for (ll x : res) {
			cout << x+1 << " ";
		}
		cout << endl;
	}
}
