#include<bits/stdc++.h>
#include<random>
#include<unordered_map>
#include<unordered_set>
using namespace std;

#define MAX 300002

int m;

#define SQ 550


char buf[MAX];


string s;


int linkk[MAX*2][26];
int cnt[MAX*2];

int root = 0;
int ord = 1;

unordered_set<string>  v;

int nex[MAX];

int main(){
	memset(linkk, -1, sizeof(linkk));
	cin >> m;
	while (m--){
		int ty;
		scanf("%d", &ty);
		scanf("%s", buf);
		if (ty == 1 || ty == 2){
			s = buf;
			if (s.size() < SQ){
				int cur = 0;
				for (int i = 0; i < s.size(); i++){
					if (linkk[cur][s[i] - 'a'] == -1){
						linkk[cur][s[i] - 'a'] = ord;
						ord++;
					}
					cur = linkk[cur][s[i] - 'a'];
				}
				if (ty == 1)cnt[cur]++;
				else cnt[cur]--;
			}
			else{
				if (ty == 1)v.insert(s);
				else v.erase(s);
			}
		}
		else{
			int ans = 0;
			s = buf;
			for (int i = 0; i < s.size(); i++){
				int rig = i + SQ;
				if (rig >= s.size()){
					rig = s.size() - 1;
				}
				int cur = 0;
				for (int j = i; j <= rig; j++){
					if (linkk[cur][s[j] - 'a'] == -1){
						break;
					}
					cur = linkk[cur][s[j] - 'a'];
					ans += cnt[cur];
				}
			}
			if (s.size() >= SQ){
				for (auto it = v.begin(); it != v.end(); it++){
					const string &want = (*it);
					if (want.size()>s.size())continue;

					{
						int i = 0;
						int j = -1;
						nex[0] = -1;
						int ws = want.size();
						while (i < ws){
							while (j >= 0 && want[i] != want[j]){
								j = nex[j];
							}
							i++;
							j++;
							nex[i] = j;
						}
					}
				{
					int i = 0;
					int j = 0;
					int ws = want.size();
					int ss = s.size();
					while (i < ss){
						while (j >= 0 && s[i] != want[j]){
							j = nex[j];
						}
						j++;
						if (j == ws){
							ans++;
							j = nex[j];
						}
						i++;
					}
				}
				}
			}
			printf("%d\n",ans);
			fflush(stdout);
		}
	}
	return 0;
}