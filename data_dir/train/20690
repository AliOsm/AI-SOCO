#include <bits/stdc++.h>

using namespace std;

const int L = 2e6 + 10;
const int N = 1e5 + 10;

int n, q;
int a[N];
int ret[N];
int pt[N];
vector<int> g[N], prime[L], stk[L];

void init() {
  for (int i = 2; i < L; ++i) {
    if (!prime[i].empty()) continue;
    for (int j = i; j < L; j += i)
      prime[j].push_back(i);
  }
}

void dfs(int v, int p, int d) {
  for (auto p : prime[a[v]]) stk[p].push_back(d);
  pt[d] = v;
  for (auto u : g[v]) {
    if (u == p) continue;
    int dep = -1;
    for (auto p : prime[a[u]]) {
      if (stk[p].empty()) continue;
      dep = max(dep, stk[p].back());
    }
    if (dep != -1) ret[u] = pt[dep];
    dfs(u, v, d + 1);
  }
  for (auto p : prime[a[v]]) stk[p].pop_back();
}

int main() {
  init();
  scanf("%d%d", &n, &q);
  for (int i = 1; i <= n; ++i) {
    scanf("%d", a + i);
  }
  for (int i = 1, u, v; i < n; ++i) {
    scanf("%d%d", &u, &v);
    g[u].push_back(v);
    g[v].push_back(u);
  }
  fill(ret + 1, ret + n + 1, -1);
  dfs(1, 0, 0);
  while (q--) {
    int t, v;
    scanf("%d%d", &t, &v);
    if (t == 1) {
      printf("%d\n", ret[v]);
    }
    else {
      int w;
      scanf("%d", &w);
      a[v] = w;
      fill(ret + 1, ret + n + 1, -1);
      dfs(1, 0, 0);
    }
  }
  return 0;
}
