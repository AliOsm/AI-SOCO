#pragma comment(linker, "/STACK:256000000")

#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <assert.h>
#include <time.h>
#include <memory.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <utility>
#include <algorithm>
#include <random>
#include <bitset>
#include <unordered_set>
#include <unordered_map>

using namespace std;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<int64, int> pli;
typedef pair<int, int64> pil;
const int INF = (int)(1e9 + 1e5);
const int64 LINF = (int64)(1e18);
const int64 MX = 100500;
const double EPS = 1e-9;
#define sq(x) ((x)*(x))
#define FAIL() (*(int*)(0))++
#define ASSERT(exp) {if (!(exp)) exit(0);}
#ifdef _MY_DEBUG
#define I64d lld
#endif
const int MOD = 1000000007;
const int BASE = 1000003;

const int MAXN = 200500;

struct edge
{
    int v, u, w, num;
    
    bool operator < (const edge& oth) const
    {
        return w < oth.w;
    }
};

int n, m;
edge e[MAXN];
int resv[MAXN], resu[MAXN];
int posv[MAXN], posu[MAXN];
vector<vector<int>> g, fen;

void init()
{
    scanf ("%d%d", &n, &m);
    for (int i = 1; i <= m; ++i)
    {
        scanf ("%d%d%d", &e[i].v, &e[i].u, &e[i].w);
        e[i].num = i;
    }
}

void add(vector<int>& fen, int pos, int val)
{
    while (pos < fen.size())
    {
        fen[pos] = max(fen[pos], val);
        pos |= (pos + 1);
    }
}

int get(vector<int>& fen, int pos)
{
    int res = 0;
    while (pos >= 0)
    {
        res = max(res, fen[pos]);
        pos &= (pos + 1);
        --pos;
    }
    return res;
}

void solve()
{
    g.resize(n + 1);
    fen.resize(n + 1);
    for (int i = 1; i <= m; ++i)
    {
        g[e[i].v].push_back(i);
        g[e[i].u].push_back(i);
    }
    for (int i = 1; i <= n; ++i)
    {
        sort(g[i].begin(), g[i].end());
        fen[i].resize(g[i].size());
    }
    sort(e + 1, e + m + 1);
    int q1 = 1;
    while (q1 <= m)
    {
        int q2 = q1;
        while (q2 + 1 <= m && e[q2 + 1].w == e[q1].w)
        {
            ++q2;
        }
        for (int i = q1; i <= q2; ++i)
        {
            int num = e[i].num;
            int v = e[i].v, u = e[i].u;
            posv[num] = lower_bound(g[v].begin(), g[v].end(), num) - g[v].begin();
            posu[num] = lower_bound(g[u].begin(), g[u].end(), num) - g[u].begin();
            resu[num] = get(fen[v], posv[num]) + 1;
            //cerr << num << " " << posv[num] << " " << posu[num] << " " << resv[num] << " " << resu[num] << endl;
        }
        for (int i = q1; i <= q2; ++i)
        {
            int num = e[i].num;
            int v = e[i].v, u = e[i].u;
            add(fen[u], posu[num], resu[num]);
        }
        q1 = q2 + 1;
    }
}

void print_answer()
{
    printf("%d\n", max(*max_element(resv + 1, resv + m + 1), *max_element(resu + 1, resu + m + 1)));
}

void precalc()
{

}

void run()
{
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#endif // _MY_DEBUG
    precalc();
    int t = 1; //scanf ("%d", &t);
    for (int i = 0; i < t; ++i)
    {
        init();
        solve();
        print_answer();
    }
}
int main()
{
    srand(90);
    ios_base::sync_with_stdio(false); cin.tie(0);
    run();
    return 0;
}