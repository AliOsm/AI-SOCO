#include <bits/stdc++.h>

#define F first
#define S second
#define pb push_back
#define ld  double
#define ll long long
#define int long long

using namespace std;

const int MAXN = 5555 , MOD = 1e9 + 7;

int n , m ;

map < string , int > Id ;

int X = 1 ;

int id(string s )
{
    if(s=="?")
        return 0 ;
    if(!Id[s])
        Id[s] = X ++ ;
   // cout << s << ' ' << Id[s] << '\n' ;
    return Id[s] ;
}

struct varible{
    int x ;
    int f ;
    string ans ;
    int y , z ;

}v[MAXN];

int deg[MAXN] ;

vector<int> adj[MAXN] ;

int ans[MAXN]  ;

bool xx ;

int bit(int i)
{
    if(!i)
        return xx;
    return ans[i] ;

}

string ans_mn = "" , ans_mx = "" ;

int Deg[MAXN] ;

int solve(int x)
{
    for(int i = 1 ; i <= n ; i ++ ) deg[i] = Deg[i] ;
    queue<int> q ;
    for(int i = 1 ; i <= n ; i ++ )
        if(!deg[i])
            q.push(i) ;
    int cnt = 0 ;
    //cout << '7' << x << '\n' ;
    while(q.size())
    {
        int i = q.front() ; q.pop() ;
        if(v[i].f==0)
        {
            ans[i] = (v[i].ans[x]=='1') ;
        }
        else
        {
            int b1 = bit(v[i].y) ;
            int b2 = bit(v[i].z) ;
          //  cout << v[i].y << ' ' << v[i].z << '\n' ;
         //   cout << '*' << b1 << ' ' <<b2<<'\n' ;
            if(v[i].f==1)
                ans[i] = (b1&b2) ;
            if(v[i].f==2)
                ans[i] = (b1|b2) ;
            if(v[i].f==3)
                ans[i] = (b1^b2) ;
        }
        for(auto v : adj[i])
        {
            deg[v]--;
            if(!deg[v])
                q.push(v);
        }
        cnt += ans[i] ;
      //  cout << i << ' ' << ans[i] << '\n' ;
    }
    return cnt ;


}

int32_t main()
{
    ios::sync_with_stdio(0) ; cin.tie(0) ;
    cin >> n >> m ;

    for(int j = 0 ; j < n ; j ++ )
    {
        string s , t , q ,w ;
        cin >> s >> t >> t ;
        int i = id(s) ;
        v[i].x = id(s) ;
        if(t[0]=='0'||t[0]=='1')
        {
            v[i].f = 0 ;
            v[i].ans = t ;
        }
        else
        {
            cin >> q >> w ;
            v[i].y = id(t) ;
            v[i].z = id(w);
            Deg[i] = ( v[i].z > 0 ) + (v[i].y > 0 ) ;
            adj[v[i].y].pb(v[i].x) ;
            adj[v[i].z].pb(v[i].x) ;
            if(q=="AND")
                v[i].f = 1 ;
            if(q=="OR")
                v[i].f = 2 ;
            if(q=="XOR")
                v[i].f = 3 ;
            v[i].ans = "" ;
        }
    }
  //  solve(1);
    for(int i = 0 ; i < m ; i ++ )
    {
        xx = 0 ;
        int x1 = solve(i) ;
        xx = 1 ;
        int x2 = solve(i);
      //  cout << x1 << ' ' << x2 << '\n' ;
        if(x1==x2)
            ans_mn += '0' , ans_mx += '0' ;
        if(x1<x2)
            ans_mn += '0' , ans_mx += '1' ;
        if(x2<x1)
            ans_mn += '1' , ans_mx += '0' ;
    }
    cout << ans_mn << '\n' << ans_mx ;



}
