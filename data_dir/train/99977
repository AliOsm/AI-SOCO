/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>



#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator {
public:
	using value_type = T;
	using difference_type = std::ptrdiff_t;
	using pointer = T*;
	using reference = T;
	using iterator_category = std::input_iterator_tag;

	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	using IteratorType = std::reverse_iterator<IntegerIterator<T>>;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}



#include <random>


namespace impl {
using Random = std::mt19937;
}  // namespace impl

inline impl::Random& randomEngine() {
	static std::random_device device;
	static impl::Random engine(device());
	return engine;
}

inline int randomInteger() {
	std::uniform_int_distribution<int> d;
	return d(randomEngine());
}

inline int randomInteger(int to) {
	SPCPPL_ASSERT(to > 0);
	std::uniform_int_distribution<int> d(0, to - 1);
	return d(randomEngine());
}

inline int randomInteger(int from, int to) {
	return from + randomInteger(to - from);
}


using int64 = int64_t;

using std::vector;
using std::set;
using std::map;
using std::string;
using std::pair;
using std::make_pair;
using std::sort;
using std::unique;
using std::swap;
using std::min;
using std::max;
using std::endl;
using std::nullopt;




class DMultipleTestcases {
public:
	static void solveSlow(std::stringstream& in, std::ostream& out) {
		int n, k; in >> n >> k;
		vector<int> m(n); for (auto& val : m) in >> val; // number of elements in ith array in range [1, k]
		vector<int> c(k); for (auto& val : c) in >> val; // max number of arrays of given size in range [1, n]

		sort(m.begin(), m.end());
		reverse(m.begin(), m.end());

		auto ok = [&] (vector<int> a) -> bool {
			vector<int> counts(k);
			for (int val : a) {
				for (int i = 0; i <= val - 1; i++) {
					counts[i]++;
				}
			}
			for (int i : range(counts.size())) {
				if (counts[i] > c[i]) return false;
			}
			return true;
		};

		auto work = [&] () -> int {
			int res = 0;
			vector<int> cur;

			while (!m.empty()) {
				bool added = false;
				for (int i : range(m.size())) {
					int val = m[i];
					auto temp = cur;
					temp.push_back(val);
					if (ok(temp)) {
						m.erase(m.begin() + i);
						cur.push_back(val);
						added = true;
						break;
					}
				}
				if (!added) {
					res++;
					cur = {};
				}
			}
			if (!cur.empty()) res++;
			return res;
		};

		out << work() << endl;
	}
	static constexpr int kStressIterations = 0;
	static void generateTest(std::ostringstream& in, std::ostringstream& ___) {
		int n = randomInteger(1, 20);
		int k = randomInteger(1, 20);
		in << n << " " << k << endl;
		for (int i : range(n)) {
			in << randomInteger(1, k + 1) << " ";
		}
		in << endl;

		vector<int> c(k);
		for (int i : range(c.size())) {
			c[i] = randomInteger(1, n + 1);
		}
		sort(c.begin(), c.end());
		reverse(c.begin(), c.end());
		for (int val : c) {
			in << val << " ";
		}
		in << endl;

		auto _____ = std::stringstream(in.str());
		solveSlow(_____, ___);
	}
	static void solve(std::istream& in, std::ostream& out) {
		int n, k; in >> n >> k;
		vector<int> m(n); for (auto& val : m) in >> val; // number of elements in ith array in range [1, k]
		vector<int> c(k); for (auto& val : c) in >> val; // max number of arrays of given size in range [1, n]

		vector<int> max_can_add;
		{
			int ptr = c.size() - 1;
			while (ptr >= 0) {
				if (c[ptr] > max_can_add.size()) {
					max_can_add.push_back(ptr + 1);
				} else {
					ptr--;
				}
			}
		}

		map<int, int> bank;
		for (int val : m) bank[val]++;

		vector<vector<int>> res;
		vector<int> cur;
		while (!bank.empty()) {
			if (cur.size() >= max_can_add.size()) {
				res.push_back(cur);
				cur = {};
				continue;
			}
			int max_val = max_can_add[cur.size()];
			auto it = bank.upper_bound(max_val);
			if (it != bank.begin()) it--;
			auto[val, count] = *it;
			if (val > max_val) {
				res.push_back(cur);
				cur = {};
				continue;
			}
			cur.push_back(val);
			bank[val]--;
			if (bank[val] == 0) bank.erase(val);
		}
		if (!cur.empty()) res.push_back(cur);

		out << res.size() << endl;
		for (const auto& vec : res) {
			out << vec.size() << " ";
			for (const auto& val : vec) {
				out << val << " ";
			}
			out << endl;
		}
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	DMultipleTestcases solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	solver.solve(in, out);
	return 0;
}
