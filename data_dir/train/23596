#include<bits/stdc++.h>
using namespace std;

namespace Scapegoat_Tree {
#define MAXN (100000 + 10)
const double alpha = 0.75;
struct Node {
	Node * ch[2];
	int key, size, cover; // size为有效节点的数量，cover为节点总数量
	int cnt; //该节点的个数。（value）

	void PushUp(void) {
		size = ch[0]->size + ch[1]->size + cnt;
		cover = ch[0]->cover + ch[1]->cover + 1;
	}
	bool isBad(void) { // 判断是否需要重构
		return ((ch[0]->cover > cover * alpha + 5)
				|| (ch[1]->cover > cover * alpha + 5));
	}
};
struct STree {
protected:
	Node mem_poor[MAXN]; //内存池，直接分配好避免动态分配内存占用时间
	Node *tail, *root, *null; // 用null表示NULL的指针更方便，tail为内存分配指针，root为根
	Node *bc[MAXN];
	int bc_top; // 储存被删除的节点的内存地址，分配时可以再利用这些地址

	Node * NewNode(int key) {
		Node * p = bc_top ? bc[--bc_top] : tail++;
		p->ch[0] = p->ch[1] = null;
		p->size = p->cover = p->cnt = 1;
		p->key = key;
		return p;
	}
	void Travel(Node * p, vector<Node *>&v) {
		if (p == null)
			return;
		Travel(p->ch[0], v);
		if (p->cnt)
			v.push_back(p); // 构建序列
		else
			bc[bc_top++] = p; // 回收
		Travel(p->ch[1], v);
	}
	Node * Divide(vector<Node *>&v, int l, int r) {
		if (l >= r)
			return null;
		int mid = (l + r) >> 1;
		Node * p = v[mid];
		p->ch[0] = Divide(v, l, mid);
		p->ch[1] = Divide(v, mid + 1, r);
		p->PushUp(); // 自底向上维护，先维护子树
		return p;
	}
	void Rebuild(Node * &p) {
		static vector<Node *> v;
		v.clear();
		Travel(p, v);
		p = Divide(v, 0, v.size());
	}
	Node ** Insert(Node *&p, int key) {
		if (p == null) {
			p = NewNode(key);
			return &null;
		} else {
			p->size++;
			p->cover++;
			// 返回值储存需要重构的位置，若子树也需要重构，本节点开始也需要重构，以本节点为根重构
			Node ** res = &null;
			if (p->key == key) {
				p->cnt++;
			} else {
				res = Insert(p->ch[key > p->key], key);
			}

			if (p->isBad())
				res = &p;
			return res;
		}
	}
	void Erase(Node *p, int id) {
		p->size--;
		int offset = p->ch[0]->size + p->cnt;
		if (p->cnt && id >= p->ch[0]->size + 1 && id <= offset) {
			p->cnt--;
			return;
		} else {
			if (id <= offset)
				Erase(p->ch[0], id);
			else
				Erase(p->ch[1], id - offset);
		}
	}
public:
	void Init(void) {
		tail = mem_poor;
		null = tail++;
		null->ch[0] = null->ch[1] = null;
		null->cover = null->size = null->key = 0;
		root = null;
		bc_top = 0;
	}
	STree(void) {
		Init();
	}

	void Insert(int key) {
		Node ** p = Insert(root, key);
		if (*p != null)
			Rebuild(*p);
	}
	int Rank(int key) {
		Node * now = root;
		int ans = 1;
		while (now != null) { // 非递归求排名
			if (now->key >= key)
				now = now->ch[0];
			else {
				ans += now->ch[0]->size + now->cnt;
				now = now->ch[1];
			}
		}
		return ans;
	}
	int Kth(int k) {
		Node * now = root;
		while (now != null) { // 非递归求第K大
			if (now->ch[0]->size + 1 <= k && now->ch[0]->size + now->cnt >= k)
				return now->key;
			else if (now->ch[0]->size >= k)
				now = now->ch[0];
			else
				k -= now->ch[0]->size + now->cnt, now = now->ch[1];
		}
	}
	void Erase(int k) {
		Erase(root, Rank(k));
		if (root->size < alpha * root->cover)
			Rebuild(root);
	}
	void Erase_kth(int k) {
		Erase(root, k);
		if (root->size < alpha * root->cover)
			Rebuild(root);
	}
};
#undef MAXN

}

using namespace Scapegoat_Tree;

//int n, k, m;
//int main(void) {
//	//freopen("in.txt", "r", stdin);
//	//freopen("out.txt", "w", stdout);
//	read(n);
//	while (n--) {
//		read (k), read(m);
//		switch (k) {
//		case 1:
//			_t.Insert(m);
//			break;
//		case 2:
//			_t.Erase(m);
//			break;
//		case 3:
//			printf("%d\n", _t.Rank(m));
//			break;
//		case 4:
//			printf("%d\n", _t.Kth(m));
//			break;
//		case 5:
//			printf("%d\n", _t.Kth(_t.Rank(m) - 1));
//			break;
//		case 6:
//			printf("%d\n", _t.Kth(_t.Rank(m + 1)));
//			break;
//		}
//		/* DEBUG INFO
//		 vector<Node *> xx;
//		 _t.Travel(_t.root, xx);
//		 cout << "::";
//		 for(int i = 0; i < xx.size(); i++) cout << xx[i]->key << ' '; cout << endl;
//		 */
//	}
//	return 0;
//}

int n;
pair<int, int> a[100008];
STree st;
set<int> seta;
vector<int> veca;
int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &a[i].first);
		a[i].second = i;
	}
	sort(a, a + n);
	a[n].first = -1;
	for (int i = 0; i < n; i++) {
		st.Insert(i);
	}

	long long ansa = 0;
	int lastpos = 1;
	for (int i = 0; i < n; i++) {
		if (lastpos > n - i)
			lastpos = 1;
		if (a[i].first != a[i + 1].first) {
			int r = st.Rank(a[i].second);
			//cout << "r " << r << endl;
			if (lastpos <= r) {
				ansa += r - lastpos + 1;
			} else {
				ansa += (n - i) - lastpos + 1 + r;
			}
			st.Erase_kth(r);
			lastpos = r;
		} else {
//			seta.clear();
			veca.clear();
			int ed = i;
			int smaller = -1;
			int bigger = -1;
			int mina = 1 << 30;
			int maxa = -1;
			while (a[ed].first == a[i].first) {
//				seta.insert(a[ed].second);
				veca.push_back(a[ed].second);
				mina = min(mina, a[ed].second);
				maxa = max(maxa, a[ed].second);
				if (st.Rank(a[ed].second) < lastpos) {
					if (smaller == -1) {
						smaller = a[ed].second;
					} else {
						if (smaller < a[ed].second) {
							smaller = a[ed].second;
						}
					}
				}
				ed++;
			}
			int r;
			int ri;
			if (smaller == -1) {
				ri = maxa;
				r = st.Rank(ri);
				ansa += r - lastpos + 1;
			} else {
				ri = smaller;
				r = st.Rank(ri);
				ansa += (n - i) - lastpos + 1 + r;
			}

			int c = 0;
			for (int j = i; j < ed; j++) {
				st.Erase(a[j].second);
				if (a[j].second < ri) {
					c++;
				}
			}
			lastpos = r - c;
			i = ed - 1;
		}
		//cout << ansa << " " << lastpos << endl;
	}

	printf("%I64d\n", ansa);
	return 0;
}
