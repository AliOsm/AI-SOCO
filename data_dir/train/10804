#include <bits/stdc++.h>
#define Tree int h,int l,int r
#define Left (h<<1),l,((l+r)>>1)
#define Right ((h<<1)|1),((l+r)>>1)+1,r
#define ll long long
#define F first
#define S second
#define Pb push_back
using namespace std;
const int N=5005;
int n,m,k;
int a[N],b[N],c[N],dp[N][N],F[N];
vector < int > v[N];
main () {
	ios::sync_with_stdio(false);
	cin.tie(NULL),cout.tie(NULL);

	cin>>n>>m>>k;

	for (int i=1; i<=n; i++)
		cin>>a[i]>>b[i]>>c[i];

	for (int i=1; i<=m; i++) {
		int x,y;
		cin>>x>>y;
		F[y]=max(F[y],x);
	}

	for (int i=1; i<=n; i++)
		if (!F[i]) v[i].push_back(c[i]);
					else v[F[i]].push_back(c[i]);

	for (int i=1; i<=n; i++) {
		sort(v[i].begin(),v[i].end());
		reverse(v[i].begin(),v[i].end());
	}

	for (int i=0; i<=n; i++)
    for (int j=0; j<=5000; j++)
      dp[i][j]=-1;

  dp[0][k]=0;

	for (int i=1; i<=n; i++) {
    for (int j=a[i]; j<=5000; j++)
      if (dp[i-1][j]!=-1) dp[i][j+b[i]]=dp[i-1][j];

    for (int j=0; j<=5000; j++) {
      int S=0;
      for (int len=0; len<v[i].size(); len++) {
        S+=v[i][len];
        if (dp[i][j-len-1]<dp[i][j]+S && dp[i][j]!=-1)
            dp[i][j-len-1]=dp[i][j]+S;
      }
    }
	}

	int ans=-1;
	for (int i=0; i<=5000; i++)
		ans=max(ans,dp[n][i]);

	cout<<ans<<endl;
}
