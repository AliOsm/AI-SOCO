#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace std;
using namespace __gnu_pbds;
#define PI                      3.1415926535897932384626
#define MOD                     998244353
#define int                     long long int
#define fi                      first
#define se                      second
#define pq                      priority_queue
#define pb                      push_back
#define endl                    '\n'
#define all(x)                  x.begin(),x.end()
#define pii                     pair<int,int>
#define fill(x,y)               memset(x,y,sizeof(x));
#define rep(x,y,z)              for(int x = y; x < z; ++x)
#define repr(x,y,z)             for(int x = y; x > z; --x)
#define fast                    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define hash                    _H
#define lg                      long double         

typedef tree<pii,null_type,less<pii>,rb_tree_tag,
tree_order_statistics_node_update> ordered_set;

template<typename T> T pow(T a,T b, int m){T ans=1; while(b>0){ if(b%2==1) ans=(ans*a)%m; b/=2; a=(a*a)%m; } return ans%m; }
template<typename T>T InverseMod(T a,int m){return pow(a,m-2,m);}
template<typename T>int SquareDist(T a,T b){int x = abs(a.fi - b.fi),y = abs(a.se - b.se); return x*x + y*y;}




void solve()
{
   int n;
   cin >> n;
   vector<int> hand;
   deque<int> pile,cpy;
   multiset<int> k;
   rep(i,0,n)
   {
        int temp;
        cin >> temp;
        hand.pb(temp);
        if(temp == 0)
                temp = 2e18;
        k.insert(temp);
   }
   rep(i,0,n)
   {
        int temp;
        cin >> temp;
        pile.pb(temp);
        if(temp == 0)
                temp = 2e18;
        cpy.pb(temp);
   }
   int x = n+1;
   int count = 0;
   while(--x)
   {
        int top = *k.begin();
        if(top == 2e18)
        {
                break;
        }
        k.erase(k.begin());
        cpy.pb(top);
        k.insert(cpy.front());
        cpy.pop_front();
        count++;
   }
   bool b = true;
   rep(i,0,n)
   {
        if(pile[i] != i+1)
        {
            break;
        }
        if(i == n-1)
        {
                cout << 0 << endl;
                exit(0);
        }
   }
   int req = 0;
   rep(i,0,n)
   {
        if(cpy[i] != i+1)
        {
                b = false;
        }
        if(pile[i] == 0)
            continue;
        req = max(req,(i+1)-pile[i]+1);

   }
   if(b)
   {
        cout << count << endl;
        exit(0);
   }
   cout << n+req << endl;
}   




signed main()
{
    fast;
    solve();
} 