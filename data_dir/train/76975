# include <bits/stdc++.h>
# define int unsigned long long
const int mod = 1e9 + 7;
using namespace std;
int ans[3];
int mul(int a, int b){
	return (a % mod) * (b % mod) % mod;
}
class Mat{
	public: int d[9][9];
	public: Mat(){
		for(int i = 0; i < 9; i++){
			for(int j = 0; j < 9; j++){
				d[i][j] = 0;
			}
		}
	}
	Mat operator*(Mat other){
		Mat ans;
		for(int i = 0; i < 9; i++)
			for(int j = 0; j < 9; j++)
				for(int k = 0; k < 9; k++)
					ans.d[i][j] = (ans.d[i][j] + d[i][k] % (mod - 1) * (other.d[k][j] % (mod - 1)) % (mod - 1)) % (mod - 1);
		return ans;
	}
	Mat operator^(int x){
		Mat ans = *this, cnt = *this;
		x --;
		while(x){
			if(x & 1){
				ans = ans * cnt;
			}
			cnt = cnt * cnt;
			x >>= 1; 
		}
		return ans;
	}
};
Mat Get_Base(){
	Mat base; 
	for(int i = 0; i < 9; i++){
		base.d[i][i % 3] = 1;
	}
	for(int i = 3; i < 9; i++){
		base.d[i - 3][i] = 1; 
	}
	return base;
}
int bin_pow(int x, int y){
	int ans = 1, cnt = x;
	y %= mod - 1; 
	while(y){
		if(y & 1){
			ans = mul(ans, cnt);
		}
		cnt = mul(cnt, cnt);
		y >>= 1; 
	}
	return ans;
}
int inv(int x){
	return bin_pow(x, mod - 2) % mod;
}
void mult(Mat x){
	for(int i = 0; i < 9; i++){
		if(i / 3 + i % 3 != 2)continue;
		for(int j = 0; j < 3; j++){
			ans[j] = (ans[j] + x.d[i][j]) % (mod - 1);
		}
	}
}
main(){
	int n, f0, f1, f2, c, g[3];
	cin >> n >> f0 >> f1 >> f2 >> c; 
	Mat base = Get_Base();
	g[0] = mul(f0, c);
	g[1] = mul(f1, mul(c, c));
	g[2] = mul(f2, mul(c, mul(c, c)));
	Mat power = base^(n - 3);
	mult(power);
	cout << mul(mul(mul(bin_pow(g[0], ans[0]) , bin_pow(g[1], ans[1])) , bin_pow(g[2], ans[2])), inv(bin_pow(c, n))) << endl;
}