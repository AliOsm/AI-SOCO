#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
typedef pair<int, int> pi;


int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL); cout.precision(20);
  int n;
  cin >> n;
  vector<tuple<ll, ll, ll, int> > cubs(n); 
  for (int i = 0; i < n; i++) {
    ll a, b , c;
    ll pa, pb, pc;
    cin >> pa >> pb >> pc;
    a = min(pa,min(pb,pc));
    c = max(pa,max(pb,pc));
    b = pa + pb + pc - a - c;
    cubs[i] = make_tuple(b, c, a, i);
  }
  sort(cubs.begin(), cubs.end());
  int pos = 0;
  ll bests = 0;
  bool parell = false;
  pair<int, int> sol2;
  int sol;
  while (pos < n) {
    while (pos + 1 < n and get<0>(cubs[pos]) == get<0>(cubs[pos+1]) 
      and get<1>(cubs[pos]) == get<1>(cubs[pos+1]) ) pos ++;
    if (get<0>(cubs[pos]) == get<0>(cubs[pos-1]) and get<1>(cubs[pos]) == get<1>(cubs[pos-1])) {
      if (bests < min(get<0>(cubs[pos]), get<2>(cubs[pos])+get<2>(cubs[pos-1]))) {
        bests = min(get<0>(cubs[pos]), get<2>(cubs[pos])+get<2>(cubs[pos-1]) );
        parell = true;
        sol2 = {get<3>(cubs[pos]), get<3>(cubs[pos-1])}; 
      }
    }
    if (bests < get<2>(cubs[pos])) {
        bests = get<2> (cubs[pos]);
        parell = false;
        sol = get<3>(cubs[pos]);
    }
    pos++;
  }
  if (parell) 
    cout << "2\n" << sol2.first+1<< " " << sol2.second+1 << endl;
  else
    cout << "1\n" << sol+1 << endl;
  return 0;
}

