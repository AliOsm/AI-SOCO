/* ****revpro**** */

#include<bits/stdc++.h>
#define ll          long long
#define pb          push_back
#define endl       '\n'
#define pii         pair<ll,ll>
#define vi          vector<ll>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll)x.size()
#define hell        1000000007
#define rep(i,a,b)  for(ll i=a;i<b;i++)
#define repr(i,a,b) for(ll i=b-1;i>=a;i--)    
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
#define mp          make_pair
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define mii        map<ll,ll>
using namespace std;

#define N  100005
vi a[N],vis(N,0);
ll dis[N],k;
ll nodes,P[N][60],T[N],sub[N];
/*make nodes = number of nodes */
/*make T[root] of root node ==-1 */
void dfs(ll node,ll p,ll d)
{
    sub[node]=1;
    T[node]=p;
    vis[node]=1;
    dis[node]=d;
    for(auto i:a[node])
    if(!vis[i])
        {dfs(i,node,d+1);sub[node]+=sub[i];}
}
void process()
{
    int i, j; 
    for (i = 1; i <= nodes; i++)
    for (j = 0; 1 << j < nodes; j++)
        P[i][j] = -1; 
    for (i = 1; i <=nodes; i++)
        P[i][0] = T[i]; 
    for (j = 1; 1 << j < nodes; j++)
        for (i = 1; i <= nodes; i++)
            if (P[i][j - 1] != -1)
                P[i][j] = P[P[i][j - 1]][j - 1];
}
ll query(int p, int q)
{
    int  log, i; 
    if (dis[p] < dis[q]) swap(p,q); 
    for (log = 1; 1 << log <= dis[p]; log++); 
    log--; 
    for (i = log; i >= 0; i--)
        if (dis[p] - (1 << i) >= dis[q])
            p = P[p][i]; 
    if (p == q)
        return p; 
    for (i = log; i >= 0; i--)
        if (P[p][i] != -1 && P[p][i] != P[q][i])
            p = P[p][i], q = P[q][i]; 
    return T[p];
}
ll parent(int node,int d)
{
    if(d==0) return node;
    int log,i;
    for(log=1;1<<log<=d;log++); log--;
    for(i=log;i>=0;i--)
        if((1<<i)<=d)
            {node=P[node][i];d-=(1<<i);}
    return node;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    #ifndef ONLINE_JUDGE
    // for getting input from input.txt
    freopen("input.txt", "r", stdin);
    // for writing output to output.txt
    freopen("output.txt", "w", stdout);
    #endif
    int TESTS=1;
//    cin>>TESTS;
    while(TESTS--)
    {
        cin>>nodes;
        ll u,v;
        rep(i,0,nodes-1) {cin>>v>>u;a[u].pb(v);a[v].pb(u);}
        dfs(1,-1,0);
        ll m;
        cin>>m;
        process();
        rep(i,0,m)
        {
            cin>>u>>v;
            if(u==v)
                {cout<<nodes<<endl;continue;}
            ll p=query(u,v);
            if((dis[u]-dis[p])!=(dis[v]-dis[p]))
            {
                ll d=(dis[u]-dis[p])+(dis[v]-dis[p]);
                if(d%2)
                    cout<<0;
                else
                {
                    if(dis[v]>dis[u]) swap(u,v);
                    ll act=parent(u,d/2);
                    ll s=parent(u,d/2-1);
                    cout<<sub[act]-sub[s];
                }
            }
            else
            {
                ll s1=parent(u,(dis[u]-dis[p])-1);
                ll s2=parent(v,(dis[v]-dis[p])-1);
                cout<<nodes-sub[s1]-sub[s2];

            }
            cout<<endl;
        }
    }
    return 0;
}