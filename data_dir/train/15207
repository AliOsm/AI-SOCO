#include <bits/stdc++.h>

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define sf scanf
#define pf printf
#define pb push_back
#define mp make_pair
#define PI ( acos(-1.0) )
#define mod 1000000007LL
#define maxn 100005
#define IN freopen("C.in","r",stdin)
#define OUT freopen("output.txt","w",stdout)
#define FOR(i,a,b) for(i=a ; i<=b ; i++)
#define DBG pf("Hi\n")
#define INF 1000000000
#define i64 long long int
#define eps (1e-8)
#define xx first
#define yy second
#define ln 17
#define off 2

using namespace __gnu_pbds;
using namespace std ;

typedef tree< i64, null_type, less<i64>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef pair<i64, i64> pii;

vector <int> g[505] ;
stack <int> st ;
int vis[505] ;
vector < pair<int,int> > e ;

bool dfs1(int u)
{
    st.push(u) ;
    vis[u] = 1 ;
    int i ;

    for(i=0 ; i<g[u].size() ; i++)
    {
        int v = g[u][i] ;
        if(vis[v]==0){
            bool res = dfs1(v) ;
            if(res==false) return false ;
        }
        else if(vis[v]==1)
        {
            e.pb( mp(u,v) ) ;
            int last = u ;
            st.pop() ;
            while( v!=last )
            {
                int x = st.top() ;
                st.pop() ;
                e.pb(mp(x,last)) ;
                last = x ;
            }
            return false ;
        }
    }
    vis[u] = 2 ;
    st.pop() ;
    return true ;
}

int y , z ;

bool dfs( int u ,int k )
{
    vis[u] = 1 ;
    bool fl = true ;
    for(int i=0 ; i<g[u].size() ; i++)
    {
        int v = g[u][i] ;
        if( u==e[k].xx && v==e[k].yy ) continue ;
        if( vis[v]==1 ) return false ;
        if( vis[v]==0 )
        {
            fl &= dfs(v,k) ;
        }
    }
    vis[u] = 2 ;
    return fl ;
}

int main()
{
    int i , j , k , l , m , n ;
    int u , v ;

    scanf("%d %d",&n,&m) ;

    for(i=1 ; i<=m ; i++)
    {
        scanf("%d %d",&u,&v) ;
        g[u].pb(v) ;
    }
    bool res = false ;
    memset(vis,0,sizeof(vis)) ;
    for(i=1 ; i<=n; i++)
    {
        if( vis[i]==0 )
        {
            if( dfs1(i)==false ) break ;
        }
    }

    if(i==n+1)
    {
        printf("YES\n") ;
        return 0 ;
    }

    /*
    4 5
    1 2
    2 3
    3 1
    4 2
    3 4
    */

  //  for(i=0 ; i<e.size() ; i++) printf("   %d %d\n",e[i].xx,e[i].yy) ;

    for(i=0 ; i<e.size() ; i++)
    {
        memset(vis,0,sizeof(vis)) ;

        bool fl = true ;
        for(j=1 ; j<=n ; j++)
        {
            if(vis[j]==0) fl &= dfs(j,i) ;
            if(fl==false) break ;
        }
        if(fl==true)
        {
            printf("YES\n") ;
            return 0 ;
        }
    }

    printf("NO\n") ;

    return 0 ;
}
