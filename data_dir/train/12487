//
//  main.cpp
//  Codeforces
//
//  Created by Юрий Бондарчук on 13.10.15.
//  Copyright © 2015 Юрий Бондарчук. All rights reserved.
//

#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <vector>

using namespace std;

#define pb push_back
#define mp make_pair
#define F first
#define S second

const int N = 100500;

struct node {
    node * l;
    node * r;
    int sum;
    node () {
        l = r = NULL;
        sum = 0;
    }
    node (node * l, node * r) : l(l), r(r) {
        sum = l -> sum + r -> sum;
    }
    node (node * l, node * r, int sum) : l(l), r(r), sum(sum) {
    }
};

node * t;

int n, m, q;
int timer = 0;
int foo, bar;
int gotLca;
int tin[N];
int tout[N];
int lca[20][N];
vector<int> g[N];
vector<int> who[N];
vector<node*> roots;

node * build(int l, int r) {
    if (l == r) {
        return new node(NULL, NULL, 0);
    }
    int mid = (l + r) >> 1;
    return new node(build(l, mid), build(mid + 1, r));
}

int getSum(node * ver, int l, int r, int pl, int pr) {
    if (pl > pr) {
        return 0;
    }
    if (l == pl && r == pr) {
        return ver -> sum;
    }
    int mid = (l + r) >> 1;
    return getSum(ver -> l, l, mid, pl, min(pr, mid)) + getSum(ver -> r, mid + 1, r, max(pl, mid + 1), pr);
}

node * update(node * ver, int l, int r, int pos) {
    if (l == r) {
        return new node(NULL, NULL, 1);
    }
    int mid = (l + r) >> 1;
    if (pos <= mid) {
        return new node(update(ver -> l, l, mid, pos), ver -> r);
    } else {
        return new node(ver -> l, update(ver -> r, mid + 1, r, pos));
    }
}

void dfs(int ver, int prev) {
  //  cout << "+" << ver << endl;
    int p_tin = 0;
    if (prev != ver) {
        p_tin = tin[prev];
    }
    tin[ver] = ++timer;
    lca[0][ver] = prev;
    for (int i = 1; i <= 18; i++) {
        lca[i][ver] = lca[i - 1][lca[i - 1][ver]];
    }
    if (ver == 4) {
        
        ver = 4;
        
    }
    t = NULL;
    for (size_t i = 0; i < who[ver].size(); i++) {
        if (ver == 5 || ver == 4) {
            ver = ver;
        }
        if (i == 0) {
            t = update(roots[p_tin], 1, m, who[ver][i]);
        } else t = update(t, 1, m, who[ver][i]);
    }
    if (!t && ver != prev) {
        t = roots[tin[prev]];
    } else if (!t) {
        t = roots[0];
    }
    roots.pb(t);
    for (size_t i = 0; i < g[ver].size(); i++) {
        int to = g[ver][i];
        if (to != prev) {
            dfs(to, ver);
        }
    }
    tout[ver] = timer;
  //  cout << "-" << ver << endl;
}

bool upper(int a, int b) {
    return tin[a] <= tin[b] && tout[b] <= tout[a];
}

int getLca(int a, int b) {
    if (upper(a, b)) return a;
    if (upper(b, a)) return b;
    for (int i = 18; i >= 0; --i) {
        if (!upper(lca[i][a], b)) {
            a = lca[i][a];
        }
    }
    return lca[0][a];
}

int get1(int a, int b, int i) {
    int le = 1;
    int ri = m;
    while (le < ri) {
        int mid = (le + ri) >> 1;
        if (getSum(roots[tin[b]], 1, m, 1, mid) - getSum(roots[tin[lca[0][a]]], 1, m, 1, mid) < i) {
            le = mid + 1;
        } else ri = mid;
    }
    return le;
}

int go;

int get2(int a, int b, int c, int i) {
    int le = 1;
    int ri = m;
    while (le < ri) {
        int mid = (le + ri) >> 1;
        go = getSum(roots[tin[b]], 1, m, 1, mid) + getSum(roots[tin[a]], 1, m, 1, mid) - getSum(roots[tin[c]], 1, m, 1, mid) - getSum(roots[tin[lca[0][c]]], 1, m, 1, mid);
        if (go < i) {
            le = mid + 1;
        } else ri = mid;
    }
    return le;
}

void solve1(int a, int b, int A) {
    // a is upper
  //  int myTin = tin[a];
    int other = tin[b];
    A = min(A, roots[other] -> sum - roots[tin[lca[0][a]]] -> sum);
    printf("%d ", A);
    for (int i = 1; i <= A; i++) {
        printf("%d ", get1(a, b, i));
    }
    puts("");
}

void solve2(int a, int b, int c, int A) {
    // a is upper;
//    int myTin = tin[c];
    int o1 = tin[a];
    int o2 = tin[b];
    A = min(A, roots[o1] -> sum + roots[o2] -> sum - roots[tin[c]] -> sum - roots[tin[lca[0][c]]] -> sum);
    printf("%d ", A);
    for (int i = 1; i <= A; i++) {
        printf("%d ", get2(a, b, c, i));
    }
    puts("");
}

int main() {
    scanf("%d%d%d", &n, &m, &q);
    for (int i = 1; i < n; i++) {
        scanf("%d%d", &foo, &bar);
        g[foo].pb(bar);
        g[bar].pb(foo);
    }
    for (int i = 1; i <= m; i++) {
        scanf("%d", &foo);
        who[foo].pb(i);
    }
    roots.pb(build(1, m));
    dfs(1, 1);
    int A;
    lca[0][1] = 0;
    tin[0] = 0;
    while (q--) {
        scanf("%d%d%d", &foo, &bar, &A);
        gotLca = getLca(foo, bar);
        if (gotLca == foo) {
            solve1(foo, bar, A);
        } else if (gotLca == bar) {
            solve1(bar, foo, A);
        } else solve2(foo, bar, gotLca, A);
    }
    return 0;
}