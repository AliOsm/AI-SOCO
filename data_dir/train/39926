#pragma GCC optimize("Ofast")
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

#define F first
#define S second
#define int long long
#define ll long long
//#define int  unsigned long long
#define pb push_back
//#define double long double

using namespace std;
using namespace __gnu_pbds;
typedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
const int N = 300000;
const int mod = 998244353;
const int K = 60;
const int M = 16;
multiset <int> s1[N], s2[N];
int dp[N][2], ch[N];
vector <int> g[N];
void dfs1(int v, int p = -1){
    int mx1 = 0;
    int mx2 = 0;
    for (auto u: g[v]){
        if (u == p) continue;
        dfs1(u, v);
        ch[v]++;
        s1[v].insert(-dp[u][0]);
        s2[v].insert(-dp[u][1]);
        mx1 = max(mx1, dp[u][0]);
        mx2 = max(mx2, dp[u][1]);
    }
    int z = 1;
    if (ch[v] == 0) z = 0;
    dp[v][0] = ch[v] + mx2 - z;
    dp[v][1] = 1 + mx1;
    dp[v][1] = max(dp[v][1], dp[v][0]);
}
void dfs2(int v, int v1 = 0, int v2 = 0, int p = -1){
    if (p != -1){
            dp[v][1] = max(dp[v][1], v1 + 1);
            dp[v][0] = max(dp[v][0], v2 + (int)g[v].size() - 2);
            dp[v][1] = max(dp[v][1], dp[v][0]);
    }
    s1[v].insert(-v1);
    s2[v].insert(-v1);
    s2[v].insert(-v2);
    for (auto u: g[v]){
        if (u == p) continue;
        int c1 = dp[u][0];
        int c2 = dp[u][1];
        s1[v].erase(s1[v].find(-dp[u][0]));
        s2[v].erase(s2[v].find(-dp[u][1]));
        int y = *s1[v].begin();
        int x = *s2[v].begin();
        x = -x;
        y = -y;
        x = x + (int)g[v].size() - 2;
        y++;
        dfs2(u, x, y, v);
        s1[v].insert(-c1);
        s2[v].insert(-c2);
    }
}
main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    int n;
    cin >> n;
    for (int i = 1; i < n; i++){
        int u, v;
        cin >> u >> v;
        g[u].pb(v);
        g[v].pb(u);
    }
    dfs1(1);
    dfs2(1);
    int ans = 0;
    for (int j = 1; j <= n; j++) ans = max(ans, dp[j][1]);
    cout << ans << endl;
}
