#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <typeindex>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>

using namespace std;

// #define int long long
#define mp make_pair
typedef pair<int, int> pii;

int32_t main() {
    ios_base::sync_with_stdio(false);
    int tests;
    cin >> tests;
    while(tests--) {
        int n, k;
        cin >> n >> k;
        vector<int> a(n);
        for(auto& u : a) cin >> u;
        set<int> q(a.begin(), a.end());
        if(q.size() > k){
            cout << -1 << '\n';
            continue;
        }
        vector<char> used(n+1);
        vector<int> result;
        for(int i = 0; i < n; i++){
            if(!used[a[i]]){
                result.push_back(a[i]);
                used[a[i]] = true;
            }
        }
        for(int i = 1; i <= n; i++){
            if(result.size() < k && !used[i]){
                result.push_back(i);
                used[i] = true;
            }
        }
        cout << result.size() * n << '\n';
        for(int i = 0; i < n; i++){
            for(auto u : result) cout << u << ' ';
        }
        cout << '\n';
    }
    return 0;
}
