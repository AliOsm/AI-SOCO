#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>   
#include <cstdlib>
#include <iomanip>
#include <set>
#include <memory.h>
#include <cstring>
#include <map>
#include <iterator>

using namespace std;

#define pb push_back
#define mp make_pair                  
#define F first
#define S second
#define scf scanf
#define prf printf
#define For(i, n) for (int i = 0; i < n; i++)

typedef long double ld;
typedef long long ll;


int n, m, k;
int cost;
int le, ri, mid;
int GOL;
int res[22];
int lg[100500];
int a[100500][5];
int tree[7][22][100500];

                    
void build(int num) {
    for (int i = 1; i <= n; i++) tree[num][0][i] = a[i][num];
    for (int lvl = 1; lvl <= lg[n]; lvl++) {
        for (int i = 1; i <= n; i++) {
            tree[num][lvl][i] = tree[num][lvl - 1][i];
            GOL = min(n, i + (1 << (lvl - 1)));
            tree[num][lvl][i] = max(tree[num][lvl][i], tree[num][lvl - 1][GOL]);
        }
    }
}

int getMax(int num, int l, int r) {
    GOL = lg[r - l + 1];
    return max(tree[num][GOL][l], tree[num][GOL][r - (1 << GOL) + 1]);
}
                        
bool can(int start, int len) {
    cost = 0;
    for (int i = 1; i <= m; i++) 
        cost += getMax(i, start, start + len - 1);
    return cost <= k;
}

int main() {
//  freopen("input.txt","r",stdin);                      
    scf("%d%d%d", &n, &m, &k);
    for (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) scf("%d", &a[i][j]);
    lg[1] = 0;
    for (int i = 2; i <= n; i++) lg[i] = lg[i >> 1] + 1;
    for (int i = 1; i <= m; i++) 
        build(i);
    int ans = 0;
  //  getMax(2, 2, 3);
    memset(res, 0, sizeof(res));
    for (int i = 1; i <= n; i++) {
        le = 0;
        ri = n - i + 2;
        while (ri - le > 1) {
            mid = (le + ri) >> 1;
            if (can(i, mid)) 
                le = mid;
            else ri = mid;
        }
        if (le > ans) {
            ans = le;
            for (int j = 1; j <= m; j++) res[j] = getMax(j, i, i + le - 1);
        }
    }
    for (int i = 1; i <= m; i++) prf("%d ", res[i]);
    puts("");   
    return 0;
}