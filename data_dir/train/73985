#include <stdio.h>
#include <math.h>
#include <string.h>
#include <limits.h>
#include <stdlib.h>
#include <algorithm>
#include <iostream>
#include <utility>
#include <vector>
#include <string>
#include <unordered_map>
#include <map>
#include <queue>
#include <set>
#include <stack>

using namespace std;

#define long long long
#define fi first
#define se second
typedef pair<int,int> ii;



int n, sz1, sz2;
int X[200003], Y[200003];
int cnt[200003];
vector<int> vec[200003];
map<int, int> mp1, mp2;

int ft[200003];
void update(int x, int val) {for(; x <= sz1; x += (x&-x)) ft[x] += val; }
int query(int x) { return (x == 0)? 0 : ft[x] + query(x-(x&-x)); }
int query(int x, int y) { return query(y) - query(x-1);}

void compress()
{
	for(auto &it : mp1) it.se = ++sz1;
	for(auto &it : mp2) it.se = ++sz2;
	for(int i = 1; i <= n; i++)
	{
		X[i] = mp1[X[i]];
		Y[i] = mp2[Y[i]];
		cnt[X[i]]++;
		vec[Y[i]].push_back(X[i]);

		// printf("%d %d\n", X[i], Y[i]);
	}
	// printf("\n");
}

void solve()
{
	for(int i = 1; i <= sz1; i++) update(i, 1);

	long res = 0;
	for(int i = 1; i <= sz2; i++)
	{
		sort(vec[i].begin(), vec[i].end());
		int bef = 0;
		long hit = 0;
		for(auto x : vec[i])
		{
			hit += 1LL*query(bef+1, x)*query(x, sz1);
			bef = x;
		}
		for(auto x : vec[i])
		{
			cnt[x]--;
			if(cnt[x] == 0) update(x, -1);
		}
		res += hit;

			// printf("I 	: %d %lld\n", i, hit);
			// printf("VEC : "); for(auto x : vec[i]) printf("%d ", x); printf("\n");
			// printf("ft  : "); for(int i = 1; i <= sz1; i++) printf("%d ", query(i,i)); printf("\n");
	}
	printf("%lld\n", res);
}

int main()
{
	// ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	// freopen("input.in", "r", stdin);

	scanf("%d", &n);
	for(int i = 1; i <= n; i++)
	{
		scanf("%d %d", &X[i], &Y[i]);
		mp1[X[i]] = 1;
		mp2[Y[i]] = 1;
	}

	compress();
	solve();
}








