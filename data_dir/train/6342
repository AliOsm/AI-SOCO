#include <bits/stdc++.h>

#define pb push_back
#define mp make_pair

#define all(x) (x).begin(), (x).end()

#define fi first
#define se second

typedef long long ll;

using namespace std;

struct node {
    int sum, cl, cr;
    node() {}
} pers[4000005];

vector <int> vv[100005];

int root[100005];

int cnt[100005];

int ptr[100005];

int arr[100005];

int n, k, q;

int sz;

int newleaf(int x) {
    ++sz;

    pers[sz].sum = x;
    pers[sz].cl = 0;
    pers[sz].cr = 0;

    return sz;
}

int newpar(int l, int r) {
    ++sz;

    pers[sz].cl = l;
    pers[sz].cr = r;
    pers[sz].sum = pers[l].sum + pers[r].sum;

    return sz;
}

int upd(int cur, int tl, int tr, int ps) {
    if (tl == tr) {
        return newleaf(1);
    }

    int mid = (tl + tr) >> 1;

    if (ps <= mid) {
        return newpar(
            upd(pers[cur].cl, tl, mid, ps),
            pers[cur].cr
        );
    }
    else {
        return newpar(
            pers[cur].cl,
            upd(pers[cur].cr, mid + 1, tr, ps)
        );
    }
}

int query(int cur, int tl, int tr, int l, int r) {
    if (l > r || tl > r || tr < l) {
        return 0;
    }

    if (l <= tl && tr <= r) {
        return pers[cur].sum;
    }

    int mid = (tl + tr) >> 1;

    return query(pers[cur].cl, tl, mid, l, r)
    + query(pers[cur].cr, mid + 1, tr, l, r);
}

void solve() {
    scanf("%d %d", &n, &k);

    for (int i = 1; i <= n; ++i) {
        scanf("%d", &arr[i]);
        vv[arr[i]].pb(i);
    }

    for (int i = 1; i <= n; ++i) {
        if (++cnt[arr[i]] <= k) {
            root[1] = upd(root[1], 1, n, i);
            ++ptr[arr[i]];
        }
    }

    for (int l = 2; l <= n; ++l) {
        int v = arr[l - 1];

        if (ptr[v] != vv[v].size()) {
            root[l] = upd(root[l - 1], 1, n, vv[v][ptr[v]++]);
        }
        else {
            root[l] = root[l - 1];
        }
    }

    scanf("%d", &q);

    int lastAns = 0;

    for (int i = 1, l, r; i <= q; ++i) {
        scanf("%d %d", &l, &r);

        l = (l + lastAns) % n + 1;
        r = (r + lastAns) % n + 1;

        if (l > r) {
            swap(l, r);
        }

        lastAns = query(root[l], 1, n, l, r);
        printf("%d\n", lastAns);
    }
}

int main() {
    #ifdef BThero
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif // BThero

    int tt = 1;

    while (tt--) {
        solve();
    }

    return 0;
}