#include<bits/stdc++.h>
//#include<ctime>
//#include <stdlib.h>
#define time ios_base::sync_with_stdio(0);cin.tie(0);
#define dpp(arr,val) memset(arr,val,sizeof (arr))
#define ll long long
#define ull unsigned long long
#define ld long double
#define PQ priority_queue
#define pii pair<int,int>
#define pll pair<ll,ll>
#define S second
#define F first
#define MP make_pair
using namespace std;

ll add(ll a,ll b,ll mod)
{
    return (a%mod+b%mod)%mod;
}
ll sub(ll a,ll b,ll mod)
{
     return (a%mod-b%mod+mod)%mod;

}
ll mul(ll a,ll b,ll mod)
{
    return (a%mod*b%mod)%mod;
}
ll sumodd(ll num,ll mod)
{
    return mul(num,num,mod);
}
ll sumeven(ll num,ll mod)
{
    return mul(num,num+1,mod);
}
ll sumrange(ll st,ll en,ll num)
{
    return (num*(st+en)/2);

}
ll gcd(ll a,ll b)
{
    while(b!=0)
    {
        ll a2=a;
        a=b;
        b=a2%b;
    }
    return a;
}
ll lcm(ll a,ll b)
{
    return a/gcd(a,b)*b;
}
string makeitbinary(ll n)
{
    string s;
    while(n)
    {
        s=s+(char)((n%2)+'0');
        n/=2;
    }
    reverse(s.begin(),s.end());
    return s;
}
bool bit(int num,int i)
{
    return((num>>i)&1);
}
ll fastpowermod(ll b,ll p,ll mod)
{
    ll ans=1;
    while(p){if (p%2){ans=mul(ans,b,mod);}b=mul(b,b,mod);p/=2;}
    return ans;
}
ll fastpower(ll b,ll p)
{
    ll ans=1;
    while(p){if (p%2){ans=ans*b;}b=b*b;p/=2;}
    return ans;
}
ll summation_formula(ll n)
{
    return (n*(n+1)/2);
}



const int sz=2e5+10;
ll M=1e9+7;
bool vis[(1<<18)];
int main()
{
        //myf.open("file.txt");
    //freopen("task.in", "r", stdin);
    //freopen("output.txt", "w", stdout);
    ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
    ll n,x;
    cin>>n>>x;
    vis[0]=1;
    vector<ll>ans;
    ans.push_back(0);
    for (ll i=1;i<(1<<n);i++)
    {
    if (!vis[i^x]){ans.push_back(i);vis[i]=1;}
    }
    cout<<ans.size()-1<<endl;
    for (ll i=1;i<ans.size();i++)
    {
        cout<<(ans[i]^ans[i-1])<<" ";
    }
    return 0;

}
