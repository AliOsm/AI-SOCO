#include <sstream>
#include<iostream>
#include<algorithm>
#include<vector>
#include<set>
#include<ctime>
#include<cmath>
#include<map>
#include<stack>
#include<random>
#include<queue>
#include<list>
#include<math.h>
#include<bitset>
#include<fstream>
using namespace std;
#define ll long long int
#define ld long double
#define key pair<ld,ld>
#define ii pair<int,int>
#define si set<int>
#define vii vector<pair<int,int> >
#define vi vector<int>
#define vll vector<ll>
#define vb vector<bool>
#define vvi vector<vector<int> >
#define vs vector<string>
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define nu 100001
#define mul(x,y) ((ll)(x)*(y))%mod
#define tr(c,i) for(auto i = (c).begin(); i != (c).end(); i++)
#define fastio  ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define forn(i, n) for (int i = 0; i < int(n); i++)
#include<fstream>
const ll INF=9223372036854775807;
const ll mod=1000000007;
int  MOD(int  a, int  b)
{
    if(a>b)
        return a-b;
    else
        return b-a;
}
ll  max3(ll  a,ll  b, ll  c)
{
    return max(c,max(a,b));
}
ll min3(ll  a,ll  b,ll  c)
{
    return min(a,min(b,c));
}
ll  power(ll  x,ll  y,ll mod1)
{
    ll res = 1;
    while (y > 0)
    {
        if (y & 1)
            res = (res*x)%mod1;
        y = y>>1;
        x = (x*x)%mod1;
    }
    return res;
}
ll logg(ll  a)
{
    ll  x=0;
    while(a>1)
    {
        x++;
        a/=2;
    }
    return x;
}
ll  gcd(ll  a,ll   b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}
ll abso(ll x)
{
    if(x<0)
    {
        return -x;
    }
    return x;
}
ll ceiling (ll  a,ll  b)
{
    if(a%b==0)
    {
        return a/b;
    }
    else
    {
        return a/b+1;
    }
}
ll modinv(ll x,ll p)
{
    return power(x,p-2,p);
}
const int LIM=5001;
int bit[2*LIM+1];
void upd(int ind,int val)
{
    for(int j=ind;j<=2*LIM;j+=((j)&(-j)))
    {
        bit[j]+=val;
    }
}
int query(int ind)
{
    int ret=0;
    for(int j=ind;j>0;j-=((j)&(-j)))
    {
        ret+=bit[j];
    }
    return ret;
}
bool intersect(pair<int,pair<int,int>> h1,pair<int,pair<int,int>> v1)
{
    if(h1.f<=v1.s.s&&h1.f>=v1.s.f&&v1.f<=h1.s.s&&v1.f>=h1.s.f)
    {
        return true;
    }
    return false;
}
int main()
{
    int n;
    scanf("%d",&n);
    vector<pair<int,pair<int,int>>> v,h;
    for(int i=0;i<n;i++)
    {
        int x1,y1,x2,y2;
        scanf("%d %d %d %d",&x1,&y1,&x2,&y2);
        x1+=LIM;y1+=LIM;x2+=LIM;y2+=LIM;
        if(x1==x2)
        {
            v.push_back(mp(x1,mp(min(y1,y2),max(y1,y2))));
        }
        else
        {
            h.push_back(mp(y1,mp(min(x1,x2),max(x1,x2))));
        }
    }
    sort(all(v));
    sort(all(h));
    ll ans=0;
    vector<int> line1[2*LIM+1];
    vector<pair<int,int>> line2[2*LIM+1];
    for(int i=0;i<h.size();i++)
    {
        for(int j=0;j<v.size();j++)
        {
            if(intersect(v[j],h[i]))
            {
                line1[v[j].s.s].push_back(v[j].f);
                upd(v[j].f,1);
            }
        }
        for(int j=i+1;j<h.size();j++)
        {
            line2[h[j].f].push_back(h[j].s);
        }
        for(int j=0;j<=2*LIM;j++)
        {
            for(int k=0;k<line2[j].size();k++)
            {
                int cnt=query(line2[j][k].s)-query(line2[j][k].f-1);
                ans=ans+(cnt)*(cnt-1)/2;
            }
            for(int k=0;k<line1[j].size();k++)
            {
                upd(line1[j][k],-1);
            }
        }
        for(int j=0;j<=2*LIM;j++)
        {
            line1[j].resize(0);
            line2[j].resize(0);
        }
    }
    printf("%lld",ans);
}

