#include<iostream>
#include<iomanip>
#include<cstdio>
#include<vector>
#include<cmath>
#include<bitset>
#include<set>
#include<map>
#define inf 1000000000
using namespace std;
int n;
struct tochka
{
    int x,y,z;
};
tochka a[10003];
long double dist[10003];
int v_sni,v_pot;
int main()
{
    ios_base::sync_with_stdio(false);
    cin>>n;
    int i;
    for(i=0;i<=n;i++)
        cin>>a[i].x>>a[i].y>>a[i].z;
    cin>>v_pot>>v_sni;
    long double px,py,pz;
    cin>>px>>py>>pz;
    long double l,r,re;
    r=0.000;
    for(i=1;i<=n;i++)
        dist[i]=1.0*sqrt((a[i].x-a[i-1].x)*(a[i].x-a[i-1].x)+(a[i].y-a[i-1].y)*(a[i].y-a[i-1].y)+(a[i].z-a[i-1].z)*(a[i].z-a[i-1].z));
    long double ep=0.00000000001;
    bool ok=false;
    long double meet_x,meet_y,meet_z;
    long double tim=0.00;
    for(i=1;i<=n && !ok;i++)
    {
        l=0.000000;
        r=dist[i]/(long double)v_sni+3*ep;
        int coun=100;
        while(coun>0)
        {
            coun--;
            re=(l+r)/2.0;
            long double tem=re;
            long double del_x=a[i].x-a[i-1].x;
            long double del_y=a[i].y-a[i-1].y;
            long double del_z=a[i].z-a[i-1].z;
            long double kof=tem/(dist[i]/(long double)v_sni);
            long double mee_x=a[i-1].x+del_x*kof;
            long double mee_y=a[i-1].y+del_y*kof;
            long double mee_z=a[i-1].z+del_z*kof;
            if((long double)v_pot*(re+tim)+ep>=1.0*sqrt((mee_x-px)*(mee_x-px)+(mee_y-py)*(mee_y-py)+(mee_z-pz)*(mee_z-pz)))
            {
                ok=true;
                meet_x=mee_x;
                meet_y=mee_y;
                meet_z=mee_z;
                r=re;
            }
            else
                l=re;
        }
        if(!ok)
            tim+=dist[i]/(long double)v_sni;
    }
    if(!ok)
        cout<<"NO"<<endl;
    else
    {
        cout<<"YES"<<endl;
        cout<<setprecision(20)<<r+tim<<endl;
        cout<<setprecision(20)<<meet_x<<" "<<meet_y<<" "<<meet_z<<endl;
    }
    return 0;
}
/*
1
0 0 0
1 0 0
1 1
2 0 0
*/
