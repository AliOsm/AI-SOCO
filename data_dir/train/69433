/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
#include <bits/stdc++.h>

#define MOD 1000000007
#define LINF (1LL<<60)
#define INF 2147483647
#define PI 3.1415926535897932384626433
#define ll long long
#define pii pair<int,int>
#define mp(x,y) make_pair((x),(y))

using namespace std;

//Persistent segment tree implementation, time complexity: O(mlogn)

string itos(int x){
	stringstream ss;
	ss << x;
	return ss.str();
}

struct node{
	int sz, l, r;
	node(){
		sz = l = r = 0;
	}
};

int a[10010], root[10010], n, m, t;
node T[200010];

void upd(int &pos, int ref, int val, int l = 1, int r = n+1){
	pos = ++t;
	T[pos] = T[ref];
	T[pos].sz++;
	if(l+1 == r)
		return;
	int mid = (l+r)/2;
	if(val < mid)
		upd(T[pos].l, T[ref].l, val, l, mid);
	else
		upd(T[pos].r, T[ref].r, val, mid, r);
}

int ask(int pos, int x, int l = 1, int r = n+1){
	if(r <= x+1)
		return T[pos].sz;
	return (x >= (l+r)/2? ask(T[pos].r, x, (l+r)/2, r): 0) + ask(T[pos].l, x, l, (l+r)/2);
}

int main(){
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	for(int i = 1; i <= n; i++)
		cin >> a[i], upd(root[i], root[i-1], a[i]);
	while(m--){
		int l, r, x;
		cin >> l >> r >> x;
		cout << (x-l+1 == ask(root[r], a[x])-ask(root[l-1], a[x])? "Yes": "No") << endl;
	}
	return 0;
}

