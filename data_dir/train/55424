#include<bits/stdc++.h>
using namespace std;
class node
{
	public:
		int ch[10],dep,cnt;
}t[510];
int n,k,nodecnt=1;
int F[510][15][510],g[510][15][510][15];
int dfs(int x,int r,int f)
{
	if(F[x][r][f]!=-1)return F[x][r][f];
	F[x][r][f]=0x3f3f3f3f;
	if(r)F[x][r][f]=dfs(x,r-1,x);
	vector<int> ch;
	for(int i=0;i<10;i++)
	{
		if(t[x].ch[i])ch.push_back(t[x].ch[i]);
	}
	g[x][r][f][ch.size()]=0;
	for(int i=(int)ch.size()-1;i>=0;i--)
	{
		for(int j=0;j<=r;j++)
		{
			g[x][r][f][i]=min(g[x][r][f][i],g[x][r-j][f][i+1]+dfs(ch[i],j,f));
		}
	}
	F[x][r][f]=min(F[x][r][f],g[x][r][f][0]+t[x].cnt*(t[x].dep-t[f].dep));
	return F[x][r][f];
}
int main()
{
	scanf("%d%d",&n,&k);
	for(int i=1;i<=n;i++)
	{
		string s;
		cin>>s;
		int len=s.size(),p=1;
		for(int i=0;i<len;i++)
		{
			int c=s[i]-'0';
			if(!t[p].ch[c])t[p].ch[c]=++nodecnt,t[nodecnt].dep=t[p].dep+1;
			p=t[p].ch[c];
		}
		int c;
		scanf("%d",&c);
		t[p].cnt+=c;
	}
	memset(F,255,sizeof(F));
	memset(g,0x3f,sizeof(g));
	printf("%d\n",dfs(1,k,1));
	return 0;
}