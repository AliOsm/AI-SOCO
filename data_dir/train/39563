#include <bits/stdc++.h>
using namespace std;
struct P
{
    int x,y,z;
    bool operator<(const P &a)const{
        if(y!=a.y) return y>a.y;
        return x>a.x;
    }

};
vector<int> v[111];
//bitset<4001000> b;
int i,n,d,m,k,a,b,c;
int o[1];
int l[1];
int j[1];
int dx[10]={0,1,0,-1,1,1,-1,-1},dy[10]={1,0,-1,0,1,-1,1,-1},dz[10]={0,0,0,0,1,-1};
long long mod=1000000007,mod2=1000000009,mod3=2017;
long long x,z,y;
double pi=3.14159265;
P u[1];
stack<int> s;
//set<int> se;
//priority_queue<int> q1,q2;
queue<int> q;
string r;
//char r[1];
//2147483647
//'1'==49;
//'A'==65;
//'a'==97;
//unordered_
//map<int,int> p[2];
/*
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
*/
bool as(P a,P b)
{
    //return a.x<b.x;
}

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
//rng();


int main()
{
    scanf("%d %d",&a,&b);
    for(int t=1;t<=b;t++)
    {
        scanf("%d %d",&n,&m);
        v[n].push_back(m);
    }
    for(int t=1;t<=a;t++)
        if(v[t].size())
        sort(v[t].begin(),v[t].end());
    for(int t=1;t<=a;t++)
    {
        int p=0;
        for(int h=1;h<=a;h++)
        if(v[h].size())
        {
            int k=987654;
            for(int i=0;i<v[h].size();i++)
                k=min(k,(v[h][i]+a*200-h)%a);
            //printf("%d %d %d\n",t,h,k+(h+a*100-t)%a+(int)(v[h].size()-1)*a);
            p=max(p,k+(h+a*100-t)%a+(int)(v[h].size()-1)*a);
        }
        printf("%d ",p);
    }
}

//¼ö¿­°ú Äõ¸® 13
