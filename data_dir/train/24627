#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>

#define xx first
#define yy second
#define pb push_back
#define mp make_pair
#define ub upper_bound
#define lb lower_bound

#define lsb(x) ((x) & (-(x)))
#define len(x) (ll)((x).size())
#define all(x) (x).begin(), (x).end()
#define l(x) ((x << 1) + 1)
#define r(x) ((x << 1) + 2)
#define v(x) (ll)(x - 'a')

using namespace std;
// using namespace __gnu_pbds;

typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;

template <class T> using vec = vector <T>;
// template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>; 
const ll inf = numeric_limits <ll>::max() >> 1;
const ll inll = numeric_limits <ll>::max() >> 1;
const int N = 1e5 + 1;
const int L = 20;
int n, q;

struct Graph {
    int hgt[N];
    int par[N];
    int anc[N][L];
    vec <int> adj[N];
} graph;

void input() {
    cin >> n;
    for(int i = 1; i < n; ++i) {
        int u; cin >> u;
        int v; cin >> v;
        graph.adj[u].pb(v);
        graph.adj[v].pb(u);
    }
}

void dfs(int u) {
    for(int i = 1; i < L; ++i) {
        graph.anc[u][i] = 
        graph.anc[graph.anc[u][i - 1]][i - 1];
    }
    for(int v: graph.adj[u]) {
        if(graph.par[u] == v) {
            continue;
        }
        graph.par[v] = 
        graph.anc[v][0] = u;
        graph.hgt[v] =
        graph.hgt[u] + 1;
        dfs(v);
    }
}

int lca(int u, int v) {
    if(graph.hgt[u] < graph.hgt[v]) {
        swap(u, v);
    }
    int k = graph.hgt[u] - graph.hgt[v];
    for(int i = 0; i < L; ++i) {
        if((k >> i) & 1) {
            u = graph.anc[u][i];
        }
    }
    if(u == v) {
        return u;
    }
    for(int i = L - 1; i >= 0; --i) {
        if(graph.anc[u][i] != graph.anc[v][i]) {
            u = graph.anc[u][i];
            v = graph.anc[v][i];
        }
    }
    return graph.par[u];
}

int dist(int u, int v) {
    return graph.hgt[u] + graph.hgt[v] - 2 * graph.hgt[lca(u, v)];
}

void solve() {
    dfs(1);
    cin >> q;
    for(int i = 0; i < q; ++i) {
        int x; cin >> x;
        int y; cin >> y;
        int u; cin >> u;
        int v; cin >> v;
        int d; cin >> d;
        if((dist(u, v) & 1) == (d & 1) && dist(u, v) <= d) {
            cout << "YES\n";
            continue;
        }
        if((dist(u, v) & 1) != (d & 1)) {
            if(!(dist(x, y) & 1) && min(dist(u, x) + dist(y, v), dist(u, y) + dist(x, v)) + 1 <= d) {
                cout << "YES\n";
            } else {
                cout << "NO\n";
            }
        } else {
            if((dist(x, y) & 1) && min(dist(u, x) + dist(y, v), dist(u, y) + dist(x, v)) + 1 <= d) {
                cout << "YES\n";
            } else {
                cout << "NO\n";
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}