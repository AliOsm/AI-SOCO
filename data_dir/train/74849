/* ****GT_18**** */
//Motivational Source->FUHPD

#include<bits/stdc++.h>
#define	MIN(a,b,c)	min(min(a,b),c)
#define	MAX(a,b,c)	max(max(a,b),c)
#define ll          long long
#define itr         vector<ll int>::iterator
#define pb          push_back
#define mp          make_pair
#define pii         pair<ll int,ll int>
#define vi          vector<ll int>
#define all(a)      (a).begin(),(a).end()
#define F           first
#define S           second
#define sz(x)       (ll int)x.size()
#define hell        1000000007
#define endl        '\n'
#define rep(i,a,b)	for(ll int i=a;i<b;i++)
#define lbnd        lower_bound
#define ubnd        upper_bound
#define bs          binary_search
using namespace std;
#define maxn		100005
ll n;
vi a[maxn],vis(maxn,0),t(maxn,0),l(maxn,0);
ll p[maxn][20],cnt[maxn]={0};
void dfs(ll node,ll par,ll lev)
{
	vis[node]=1;
	t[node]=par;
	l[node]=lev;
	rep(i,0,sz(a[node]))
	if(!vis[a[node][i]])
	dfs(a[node][i],node,lev+1);
}
void build()
{
	memset(p,-1,sizeof p);
	rep(i,1,n+1)
	p[i][0]=t[i];
	rep(j,1,20)
	rep(i,1,n+1)
	if(p[i][j-1]!=-1)
	p[i][j]=p[p[i][j-1]][j-1];
}
ll lca(ll x,ll y)
{
	if(l[x]<l[y])
	swap(x,y);
	for(int i=19;i>=0;i--)
	if(l[x]-(1<<i)>=l[y])
	x=p[x][i];
	if(x==y) return x;
	for(int i=19;i>=0;i--)
	if(p[x][i]!=p[y][i]&&p[x][i]!=-1)
	{
		x=p[x][i];
		y=p[y][i];
	}
	return t[x];
}
map<pii,ll> ans;
vector<pii> ed;
ll dfs2(ll node,ll par)
{
	ll sum=cnt[node];
	rep(i,0,sz(a[node]))
	if(a[node][i]!=par)
	sum+=dfs2(a[node][i],node);
	ans[{node,par}]=sum;
	ans[{par,node}]=sum;
	return sum;
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int TESTS=1;
//	cin>>TESTS;
	while(TESTS--)
	{
		cin>>n;
		rep(i,0,n-1)
		{
			ll x,y;
			cin>>x>>y;
			a[x].pb(y);
			a[y].pb(x);
			ed.pb({x,y});
		}
		dfs(1,1,1);
		build();
		ll q;
		cin>>q;
		while(q--)
		{
			ll x,y;
			cin>>x>>y;
			cnt[x]++;
			cnt[y]++;
			cnt[lca(x,y)]-=2;
		}
		dfs2(1,1);
		for(auto i:ed)
		cout<<ans[i]<<" ";
	}
	return 0;
}
