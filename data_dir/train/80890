#include <iostream>
#include <iomanip>
#include <algorithm>
#include <vector>
#include <string>
#include <cmath>
#include <memory.h>
#include <assert.h>
#include <sstream>
#include <stack>
#include <fstream>
#include <cstdio>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <list>
#include <stdlib.h>
#include <queue>
#include <set>
using namespace std;

/*
*/

long long pw(int a, int p, int md)
{
	if (p == 0) return 1;
	long long r = pw(a, p/2, md);
	r *= r;
	r %= md;
	if (p%2==1)
	{
		return (a*r) % md;
	}
	return r;
}

vector<int> pr;
vector<int> cnt;
int p[200005];

int main()
{
	int m;
	scanf("%d", &m);

	for (int i = 0; i < m; i++)
	{
		scanf("%d", p+i);
	}
	sort(p, p+m);
	for (int i = 0; i < m; i++)
	{
		if (i == 0 || p[i] != p[i-1])
		{
			pr.push_back(p[i]);
			cnt.push_back(1);
		}
		else
		{
			cnt[cnt.size() - 1]++;
		}
	}
	const int mod = 1000000007;
	const int mod2 = 1000000006;
	long long divs[200005];
	for (int i = 0; i < pr.size(); i++)
	{
		if (i) divs[i] = divs[i-1];
		else divs[i] = 1;
		divs[i] *= (cnt[i]+1);
		divs[i] %= mod2;
	}
	long long divs2[200005];
	for (int i = pr.size() - 1; i >= 0; i--)
	{
		if (i+1 < pr.size()) divs2[i] = divs2[i+1];
		else divs2[i] = 1;
		divs2[i] *= (cnt[i]+1);
		divs2[i] %= mod2;
	}
	
	long long res = 1;
	for (int i = 0; i < pr.size(); i++)
	{
		long long other = 1;
		if (i) other *= divs[i-1];
		if (i+1 < pr.size())
		{
			other *= divs2[i+1];
		}
		other %= mod2;
		long long a = 1;
		for (int j = 0; j < cnt[i]; j++)
		{
			a *= pr[i];
			a %= mod;
			res *= pw(a, other, mod);
			res %= mod;
		}
	}
	cout<<res<<endl;
}