#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 5;

char ans[N];
bool used[N];
vector<int> g[N], vec;
int n, sz[N], mxsz[N];
void dfs (int v, int pred = 0){
    sz[v] = 1, mxsz[v] = 0;
    vec.push_back(v);
    for (int i = 0; i < g[v].size(); ++i){
        int to = g[v][i];
        if (to == pred || used[to]) continue;
        dfs (to, v);
        sz[v] += sz[to];
        mxsz[v] = max (mxsz[v], sz[to]);
    }
}
void rec (int v, char c){
    vec.clear();
    dfs (v);
    int s = 1e9, centr = 0;
    for (int i = 0; i < vec.size(); ++i){
        int to = vec[i];
        if (used[to]) continue;
        int x = max (mxsz[to], (int)vec.size() - sz[to]);
        if (s > x) s = x, centr = to;
    }
    used[centr] = true;
    ans[centr] = c;
    for (int i = 0; i < g[centr].size(); ++i){
        int to = g[centr][i];
        if (used[to]) continue;
        rec (to, c + 1);
    }
}
int main(){



    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    cin >> n;
    for (int i = 1; i < n; ++i){
        int x, y;
        cin >> x >> y;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    rec (1, 'A');
    for (int i = 1; i <= n; ++i) cout << ans[i] << ' ';


}
