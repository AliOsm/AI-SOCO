#include <iostream>
#include <vector>
using namespace std;

const int MAXN = 100005;
bool marked[MAXN];
vector<int> E[MAXN];

int dist_down[MAXN], dist_up[MAXN];
int seen_dist_down[MAXN];


int dfs1(int node, int father = -1){

    bool flag = false;

    dist_down[node] = (marked[node]) ? 0 : -1;

    for(int i = 0 ; i < E[node].size(); i++){
        int son = E[node][i];

        if(father == son) continue;

        int d = dfs1(son, node);

        if(d >= 0)
            dist_down[node] = max(dist_down[node], d+ 1);

    }

    return dist_down[node];
}

void dfs2(int node, int father = -1){

    int mx1 = -1, mx2 = -1;

    for(int i = 0 ; i < E[node].size(); i++){
        int to = E[node][i];

        if(to == father) continue;

        if(dist_down[to] > mx1){
            mx2 = mx1;
            mx1 = dist_down[to];
        }else{
            if(dist_down[to] > mx2){
                mx2 = dist_down[to];
            }
        }
    }

   // cout << "DFS2  " << node << " " << mx1 << " " << mx2 << endl;

    for(int i = 0 ; i < E[node].size(); i++){
        int son = E[node][i];

        if(father == son) continue;

        int d;
        if( mx1 == dist_down[son] ) d = mx2;
        else d = mx1;

        if(d != -1)
            d += 2;

        dist_up[son] = max(dist_up[son], d);

        if(dist_up[node] != -1)
            dist_up[son] = max(dist_up[son], dist_up[node] + 1);

        if(marked[son]) dist_up[son] = max(dist_up[son], 0);
        dfs2(son, node);

    }

}
int main()
{
    int n, m, d; cin >> n >> m >> d;

    for(int i = 0; i < m; i++){
        int v; cin >> v;
        marked[v] = true;
    }

    for(int i = 1; i <= n; i++)
        dist_up[i] = -1;

    for(int i = 1; i < n; i++){
        int u, v; cin >> u >> v;
        E[u].push_back(v);
        E[v].push_back(u);
    }



    if(marked[1]) dist_up[1] = 0;
    else dist_up[1] = -1;


    dfs1(1);
    dfs2(1);

    int ans = 0;
    for(int i = 1 ; i <= n; i++){
       // if(marked[i]) continue;

        //cout << i << " " << dist_up[i] << " " << dist_down[i] << endl;
        int max_dist = max(dist_up[i], dist_down[i]);
        if(max_dist <= d) ans++;
    }
    cout << ans << endl;

    return 0;
}
