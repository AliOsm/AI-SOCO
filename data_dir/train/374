//  Copyright Â© 2018 Diego Garcia Rodriguez del Campo. All rights reserved.
#include<bits/stdc++.h>
#define MAX 200005
#define LOG 20
#define mid (l+r)/2
#define optimiza_io cin.tie(0); ios_base::sync_with_stdio(0);
using namespace std;
typedef long long i64;

i64 N, Q;
i64 tree[4*MAX][LOG + 2];
bool lazy[4*MAX][LOG + 2];
i64 a[MAX];

void initTree( i64 x , i64 l , i64 r )
{
    if( l == r )
    {
        for( i64 j = 0; j <= LOG; j ++ )
            if( ( a[l] & ( 1 << j ) ) )
                tree[x][j] = 1;
        return;
    }
    
    initTree( 2*x+1 , l , mid );
    initTree( 2*x+2 , mid+1 , r );
    for( i64 j = 0; j <= LOG; j ++ )
        tree[x][j] = tree[2*x+1][j] + tree[2*x+2][j];
}

void updLazy( i64 x , i64 l , i64 r , i64 t )
{
    if( ! lazy[x][t] )
        return;
    lazy[2*x+1][t] ^= 1;
    lazy[2*x+2][t] ^= 1;
    lazy[x][t] ^= 1;
    tree[x][t] = ( r - l + 1 ) - tree[x][t];
}


i64 qry( i64 x , i64 l , i64 r , i64 lq , i64 rq , i64 t )
{
    if( l > rq or r < lq )
        return 0;
    
    updLazy( x , l , r , t );
    if( l >= lq && r <= rq )
        return tree[x][t];
    
    return qry( 2*x+1 , l , mid , lq , rq , t ) + qry( 2*x+2 , mid+1 , r , lq , rq , t ); 
}


void upd( i64 x , i64 l , i64 r , i64 lq , i64 rq , i64 t )
{
    updLazy( x , l , r , t );
    if( l > rq or r < lq )
        return;
        
    if( l >= lq && r <= rq )
    {
        lazy[x][t] ^= 1;
        updLazy( x , l , r , t );
        return;
    }
    
    upd( 2*x+1 , l , mid , lq , rq , t );
    upd( 2*x+2 , mid+1 , r , lq , rq , t );
    tree[x][t] = tree[2*x+1][t] + tree[2*x+2][t];
    
}


int main()
{
    optimiza_io
    cin >> N;
    for( i64 i = 1; i <= N; i ++ )
        cin >> a[i];
        
    initTree( 0 , 1 , N );
    
    cin >> Q;
    while( Q -- )
    {
        i64 t;
        cin >> t;
        if( t == 1 )
        {
            i64 ans = 0;
            i64 l, r;
            cin >> l >> r;
            for( i64 j = 0; j <= LOG; j ++ )
                ans += ( 1 << j ) * qry( 0 , 1 , N , l , r , j );
                
            cout << ans << "\n";
        }
        else
        {
            i64 l, r, v;
            cin >> l >> r >> v;
            for( i64 j = 0; j <= LOG; j ++ )
                if( ( v & ( 1 << j ) ) )
                    upd( 0 , 1 , N , l , r , j );
        }
    }
    return 0;
}

/*

3 
1 1 1
7
1 1 3
1 1 2
1 1 1
2 2 2 2
1 1 3
1 1 2
1 1 1

*/