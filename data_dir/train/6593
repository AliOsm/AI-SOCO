#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define INF             2e16
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())


#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);

const int N = 40005;
bool stat[N],mark[N];
vector<LL>primes;
void siv()
{
    for(LL i = 4;i < N;i+=2)stat[i] = 1;
    LL sq = sqrt(N);
    for(LL i = 3;i <= sq;i += 2){
        if(stat[i])continue;
        for(LL j = i * i;j < N;j += 2 * i){
            stat[j] = 1;
        }
    }
    for(LL i = 2;i < N;i++){
        if(stat[i] == 0)primes.push_back(i);
    }

}
pair<LL,pll> give_me(LL n)
{
    LL lo = max(2LL,n - 20000);
    LL hi = n + 20000;
    for(LL i = 0;i < primes.size();i++){
        LL st = (lo/primes[i]) * primes[i];
        if(st < lo)st += primes[i];
        for(LL j = st;j <= hi;j += primes[i]){
            if(j == primes[i])continue;
            mark[j - lo] = 1;
        }
    }

    LL lowprime = 0, hiprime = 2e9;
    vector<LL>choto;

    for(LL i = lo;i <= hi;i++){
        if(mark[i - lo] == 0){
            if(i <= n){
                choto.push_back(i);
                if(choto.size() == 2)choto.erase(choto.begin());
            }else{
                hiprime = min(hiprime,i);
            }
        }
    }
    return mk(hiprime,mk(1LL,choto[0]));
}
LL lcm(LL a,LL b)
{
    LL g = __gcd(a,b);
    a/=g;
    b/=g;
    return a * b * g;
}

pll add(pll A,pll B)
{
    LL down = lcm(A.second,B.second);
    LL up = (down/A.second) * A.first + (down/B.second) * B.first;
    LL g = __gcd(up,down);
    up/=g;
    down/=g;
    return mk(up,down);
}
pll sub(pll A,pll B)
{
    LL down = lcm(A.second,B.second);
    LL up = (down/A.second) * A.first - (down/B.second) * B.first;
    LL g = __gcd(up,down);
    up/=g;
    down/=g;
    return mk(up,down);

}
void modify(LL &a,LL &b)
{
    LL g = __gcd(a,b);
    a/=g;
    b/=g;
}
int main()
{
    siv();

    LL t;
    cin >> t;
    while(t--){
        MEM(mark,0);
        LL n;
        cin >> n;
        if(n == 2){
            cout << "1/6\n";
            continue;
        }

        pair<LL,pll> P = give_me(n);

        LL s1 = P.second.second;
        LL s2 = P.first;

        LL up = s1 * s2 - 2 * s1 - 2 * s2 + 2 * n + 2;
        LL down = 2 * s1 * s2;
//        cout << s1 << " " << s2 << " " << up << " " << down << "\n";
        modify(up,down);
        cout << up << "/" << down << "\n";
    }


}
