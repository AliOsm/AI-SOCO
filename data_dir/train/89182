#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("board.in");ofstream out("board.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

struct item{
    str t;
    int n;
    item(){}
    item(str a, int b){
        t = a;
        n = b;
    }
};

int a;
vec<item> m;
str k;

int pref(str t){
    return t==k.substr(0, t.size());
}

int suf(str t){
    return t==k.substr(k.size()-t.size());
}

int main() {
    fast;
    cin>>a;
    a = a*2-2;
    m = vec<item>(a);
    for(int q=0; q<a; q++){
        cin>>m[q].t;
        m[q].n = q;
    }
    sort(m.begin(), m.end(), [](item i1, item i2){return i1.t.size()<i2.t.size();});
    k = m[a-2].t+m[a-1].t.back();
    vec<int> o(a);
    o[m[a-1].n] = 1;
    int fl = 1;
    for(int q=0; q<a-2 && fl; q+=2){
        if(pref(m[q].t) && suf(m[q+1].t)) o[m[q+1].n] = 1;
        else if(suf(m[q].t) && pref(m[q+1].t)) o[m[q].n] = 1;
        else fl = 0;
    }
    if(!fl){
        o = vec<int>(a);
        k = m[a-1].t+m[a-2].t.back();
        o[m[a-2].n] = 1;
        fl = 1;
        for(int q=0; q<a-2 && fl; q+=2){
            if(pref(m[q].t) && suf(m[q+1].t)) o[m[q+1].n] = 1;
            else if(suf(m[q].t) && pref(m[q+1].t)) o[m[q].n] = 1;
            else fl = 0;
        }
        if(fl==0) cout<<1/0;
    }
    for(int i : o) cout<<(i ? 'S' : 'P');
}