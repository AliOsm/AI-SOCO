#include <bits/stdc++.h>
#define base 1000000007LL
#define ll long long
#define X first
#define Y second
#define mp make_pair
#define pb push_back
#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)
#define FORE(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)

using namespace std;

typedef pair<int, int> II;
typedef bitset<1000> bits;
typedef vector<II> vi;

struct node {
    int sum, left, right;
    bits bit;
} t[2004010];

int nNode, n, m, q, ver[100010];

void build(int k, int l, int r)
{
    if (l <= r) nNode = max(nNode, k);
    if (l >= r) return;
    t[k].left = k*2;
    t[k].right = k*2+1;
    int mid = (l+r) >> 1;
    build(k*2, l, mid);
    build(k*2+1, mid+1, r);
}

int update(int oldId, int u, int v, int l, int r, bool added)
{
    if (l == r) {
        ++nNode;
        t[nNode].left = t[nNode].right = 0;
        t[nNode].sum = t[oldId].sum;
        t[nNode].bit = t[oldId].bit;
        if (added) {
            if (!t[nNode].bit.test(v)) {
                t[nNode].sum++;
                t[nNode].bit.set(v);
            }
        }
        else {
            if (t[nNode].bit.test(v)) {
                t[nNode].sum--;
                t[nNode].bit.reset(v);
            }
        }
        return nNode;
    }
    int cur = ++nNode;
    int mid = (l+r) >> 1;
    if (u <= mid) {
        t[cur].left = update(t[oldId].left, u, v, l, mid, added);
        t[cur].right = t[oldId].right;
    }
    else {
        t[cur].right = update(t[oldId].right, u, v, mid+1, r, added);
        t[cur].left = t[oldId].left;
    }
    t[cur].sum = t[t[cur].left].sum + t[t[cur].right].sum;
    return cur;
}

int rev(int oldId, int u, int l, int r)
{
    if (l == r) {
        ++nNode;
        t[nNode].left = t[nNode].right = 0;
        t[nNode].sum = m-t[oldId].sum;
        t[nNode].bit = t[oldId].bit;
        t[nNode].bit.flip();
        return nNode;
    }
    int cur = ++nNode;
    int mid = (l+r) >> 1;
    if (u <= mid) {
        t[cur].left = rev(t[oldId].left, u, l, mid);
        t[cur].right = t[oldId].right;
    }
    else {
        t[cur].right = rev(t[oldId].right, u, mid+1, r);
        t[cur].left = t[oldId].left;
    }
    t[cur].sum = t[t[cur].left].sum + t[t[cur].right].sum;
    return cur;
}

int main()
{
    int q, u, v, type;
    ios::sync_with_stdio(0);
    //freopen("inp.txt", "r", stdin);
    cin >> n >> m >> q;
    nNode = 0;
    build(1,1,n);
    ver[0] = 1;
    FOR(i,1,q) {
        cin >> type;
        if (type == 1) {
            cin >> u >> v;
            ver[i] = update(ver[i-1], u, v-1, 1, n, true);
        }
        else if (type == 2) {
            cin >> u >> v;
            ver[i] = update(ver[i-1], u, v-1, 1, n, false);
        }
        else if (type == 3) {
            cin >> u;
            ver[i] = rev(ver[i-1], u, 1, n);
        }
        else {
            cin >> u;
            ver[i] = ver[u];
        }
        cout << t[ver[i]].sum << endl;
    }
    return 0;
}
