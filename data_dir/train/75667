#include <bits/stdc++.h>
/*#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>*/
 
#define pb push_back
#define mp make_pair
#define sz(s) ((int)(s.size()))
#define all(s) s.begin(), s.end()
#define rep(i, a, n) for (int i = a; i <= n; ++i)
#define per(i, n, a) for (int i = n; i >= a; --i)
#define onlycin ios_base::sync_with_stdio(false); cin.tie(0) 
using namespace std;
// using namespace __gnu_pbds;
typedef long long ll;
typedef unsigned long long ull;
/*typedef tree<
pair < int, int >,
null_type,
less< pair < int, int > >,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;*/
// find_by_order() order_of_key()
const int MAXN = (int)5e5+228;
const char nxtl = '\n';
const int mod = (int)1e9+7;
const double eps = (double)1e-7;
template<typename T> inline bool updmin(T &a, const T &b) {return a > b ? a = b, 1 : 0;}
template<typename T> inline bool updmax(T &a, const T &b) {return a < b ? a = b, 1 : 0;}

int dp[52][35555];
int n, k, a[MAXN], used[MAXN], timer;
int f[MAXN], pp[MAXN];

void push(int x) {
	if(pp[x] == 0) return;
	f[x] += pp[x];
	pp[x + x] += pp[x];
	pp[x + x + 1] += pp[x];
	pp[x] = 0;
}
void add(int l, int r, int val, int x = 1, int tl = 0, int tr = n) {
	push(x);
	if(tl > r || tr < l) return;
	if(tl >= l && tr <= r) {
		pp[x] += val;
		push(x);
		return;
	}
	int mid = tl + tr >> 1;
	add(l, r, val, x + x, tl, mid);
	add(l, r, val, x + x + 1, mid + 1, tr);
	f[x] = max(f[x + x], f[x + x + 1]);
}
int get(int l, int r, int x = 1, int tl = 0, int tr = n) {
	push(x);
	if(tl > r || tr < l) return -10101010;
	if(tl >= l && tr <= r) return f[x];
	int mid = tl +tr >> 1;
	return max(get(l, r, x + x, tl, mid), get(l, r, x + x + 1, mid + 1, tr));
}

int last[MAXN];

int main() {
	#ifdef accepted
		freopen(".in", "r", stdin);
		freopen(".out", "w", stdout);
	#endif
	onlycin;
	cin >> n >> k;
	int tmp = 0;
	rep(i, 1, n) {
		cin >> a[i];
		if(!used[a[i]]) {
			used[a[i]] = i;
			last[i] = -1;
			++tmp;
		} else last[i] = used[a[i]];
		used[a[i]] = i;
		dp[1][i] = tmp;
		add(i, i, dp[1][i - 1]);
	}
	rep(i, 2, k) {
		rep(j, 1, n) {
			add(1, j, 1);
			if(~last[j]) add(1, last[j], -1);
			dp[i][j] = get(1, j);
		}
		memset(f, 0, sizeof f);
		memset(pp, 0, sizeof pp);
		rep(j, 1, n) add(j, j, dp[i][j - 1]);
	}
	cout << dp[k][n] << nxtl;
	
	return 0;
}