
#include<bits/stdc++.h>
#define ll long long
#define ld long double
#define OO 4e18
#define oo 2e9
#define yalla ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);
#define FILES freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define sz  100005
#define re return
#define F first
#define S second
#define pll pair<ll,ll>
#define mod  1000000007
#define pi acos(-1)
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<int,null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
string god,s,qry,really;
int n,idx=-1;
bool vis[30],ok;
void input()
{
    cin>>s>>god>>n; really=god;
    for(int i=0; i<s.size(); i++)
        if(s[i]>='a'&&s[i]<='z')
            vis[s[i]-'a']=1;
    int tmp=god.find("*");
    if(tmp>=0&&tmp<god.size())
       idx=tmp;
}
///
void check()
{  for(int i=0; i<qry.size();i++)
    { if(qry[i]!=god[i])
      { if(god[i]=='?'&&vis[qry[i]-'a']) continue;
        else if(god[i]=='*'&&!vis[qry[i]-'a'])continue;
        else {ok=0; break;}
      }
    }
}
///
int main()
{
    ///yalla;
    input();
    ///
    while(n--)
    {
        cin>>qry,god=really;

        ok=1;
        if(qry.size()==god.size())
        { if(idx==-1)check();
          else check();
        }
        else if(qry.size()<god.size())
        {
            if(idx!=-1&&qry.size()+1==god.size())
             god.erase(idx,1),check();
           else ok=0;
        }
        else
        { if(idx==-1)ok=0;
          else
          { string neww="";
              for(int i=idx;i<=idx+(qry.size()-god.size());i++)
                if(!vis[qry[i]-'a'])neww+=qry[i];
                else {ok=0;break;}
            if(ok)god.erase(idx,1),god.insert(idx,neww),check();
          }
        }

        ///
        if(!ok) cout<<"NO"<<endl;
        else cout<<"YES"<<endl;
    }

    re 0;
}