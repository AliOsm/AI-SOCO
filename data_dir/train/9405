#include <iostream>
#include <bits/stdc++.h>

using namespace std;
const int N = 1010, Inf = 1e9;
int n,a[N][N],dp[N][N],dp2[N][N];
pair < int , int > cnt[N][N];

void Build(int i , int j)
{
    int cnt1 = 0, cnt2 = 0;
    int x = a[i][j];
    while(x%2==0)
    {
        x/=2;
        cnt1++;
    }
    while(x%5==0)
    {
        x/=5;
        cnt2++;
    }
    cnt[i][j] = {cnt1, cnt2};
}

int Rec(int i, int j)
{

    if(i==n-1 && j==n-1)  return cnt[i][j].first;

    if(dp[i][j] != -1)  return dp[i][j];

    int Res1 = Inf , Res2 = Inf;

    if(i + 1 < n && a[i+1][j] != 0)  Res1 = cnt[i][j].first + Rec(i + 1, j);

    if(j + 1 < n && a[i][j+1] !=0)  Res2 = cnt[i][j].first + Rec(i, j + 1);

    return dp[i][j] = min(Res1 , Res2);
}

int Rec2(int i, int j)
{

    if(i==n-1 && j==n-1)  return cnt[i][j].second;

    if(dp2[i][j] != -1)  return dp2[i][j];

    int Res1 = Inf , Res2 = Inf;

    if(i + 1 < n && a[i+1][j] != 0)  Res1 = cnt[i][j].second + Rec2(i + 1, j);

    if(j + 1 < n && a[i][j+1] !=0)  Res2 = cnt[i][j].second + Rec2(i, j + 1);

    return dp2[i][j] = min(Res1 , Res2);
}

void path(int i, int j , bool k)
{

    if(i==n-1 &&  j==n-1)   return ;

    int optimal = k ? Rec(i, j) : Rec2(i , j);

    int Res1 = Inf , Res2 = Inf;

    if(i + 1 < n && a[i+1][j] != 0)  Res1 = k ? cnt[i][j].first + Rec(i+1 , j) : cnt[i][j].second + Rec2(i+1 , j);

    if(j + 1 < n && a[i][j+1] != 0)  Res2 = k ? cnt[i][j].first + Rec(i , j+1) : cnt[i][j].second + Rec2(i , j+1);

    if(optimal == Res1)   cout<<"D",path(i + 1, j , k);
    else   cout<<"R",path(i, j+1 , k);
}

int main()
{
    int Ans2 = 1e9 , Ans1 , Ans3;
    pair < int, int > idx;
    memset(dp, -1, sizeof(dp));
    memset(dp2 , -1 , sizeof(dp2));
    cin >> n;
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<n; j++)
        {
            scanf("%d",&a[i][j]);
            if(a[i][j] != 0)  Build(i , j);
            if(a[i][j]==0)  Ans2 = 1, idx = {i, j};
        }
    }
    Ans1 = Rec(0 , 0);
    Ans3 = Rec2(0 , 0);
    if(min(Ans2, min(Ans1 , Ans3)) == Ans2)
    {
        cout << Ans2 << endl;
        int i = 0;
        while(i != idx.second)   printf("R") , i++;
        int j = 0;
        while(j != n-1)   printf("D") , j++;
        while(i != n-1)   printf("R") , i++;
    }
    else if(min(Ans2, min(Ans1 , Ans3)) == Ans1)
    {
        cout << Ans1 << endl;
        path(0, 0 , 1);
    }
    else {
        cout << Ans3 << endl;
        path(0 , 0 , 0);
    }
    return 0;
}
