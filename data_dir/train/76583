#include <iostream>
#include <string>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <fstream>
#include <stack>
#include <limits.h>

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define REV(i,b,a) for(int i=(a);i>=(b);i--)
#define mp make_pair
#define pb push_back
#define SZ(v) (int)v.size()
#define all(c) (c).begin(),(c).end()
#define rall(c) (c).rbegin(),(c).rend()
using namespace std;
double PI = 3.1415926536;
int dX[] = { 1, -1, 0, 0 };
int dY[] = { 0, 0, 1, -1 };
int main()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    map<pair<int, int>, bool> check;
    map<pair<int, int>, string> mp1;
    int n, m, k;
    cin >> n >> m >> k;
    FOR(K, 0, k)
    {
        int num, x, y;
        string drink;
        cin >> num;
        if (num != -1)
            cin >> x >> y;
        cin >> drink;
        if (num != -1)
        {
            while (1)
            {
                if (!check[mp(x, y)])
                {
                    mp1[mp(x, y)] = drink;
                    check[mp(x, y)] = 1;
                    break;
                }
                y++;
                if (y > m && x < n)
                    x++, y = 1;
                if (y > m && x == n)
                    break;
            }
        }
        else
        {
            bool ok = 1;
            for (map<pair<int, int>, string>::iterator it = mp1.begin(); it != mp1.end(); it++)
            {
                if (it->second == drink && check[mp(it->first.first, it->first.second)])
                {
                    cout << it->first.first << " " << it->first.second << "\n";
                    check[mp(it->first.first, it->first.second)] = 0;
                    ok = 0;
                    break;
                }
            }
            if (ok)
                cout << "-1 -1\n";
        }
    }
}
