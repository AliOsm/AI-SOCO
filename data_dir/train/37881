#include <bits/stdc++.h> 
using namespace std;
// #define int long long
#define ld long double
#define fi first
#define se second
#define pb push_back
#define pii pair<int,int>
#define all(x) (x).begin(), (x).end()
const int MOD = 1e9+7;
int mpow(int a,int b,int p=MOD){a=a%p;int res=1;while(b>0){if(b&1)res=(res*a)%p;a=(a*a)%p;b=b>>1;}return res%p;}
const int N=2*1e5+2;
vector<int> a[N];
vector<int> o;
int depth[N];
void dfs(int x,int p=-1,int d=0)
{
	o.pb(x);
	depth[x]=d;
	for(auto y:a[x])
	{
		if(y==p) continue;
		dfs(y,x,d+1);
	}
	o.pb(x);
}
int in[N];
int out[N];
struct FenwickTree {
    vector<int> bit;  // binary indexed tree
    int n;

    void init(int n) {
        this->n = n;
        bit.assign(n, 0);
    }
    int sum(int r) {
        int ret = 0;
        for (; r >= 0; r = (r & (r + 1)) - 1)
            ret += bit[r];
        return ret;
    }
    void add(int idx, int delta) {
        for (; idx < n; idx = idx | (idx + 1))
            bit[idx] += delta;
    }
    int sum(int l, int r) {
        return sum(r) - sum(l - 1);
    }
    void init(vector<int> a) {
        init(a.size());
        for (size_t i = 0; i < a.size(); i++)
            add(i, a[i]);
    }
}fw;
int32_t main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	// freopen("out10.txt","w",stdout);
	#endif
	int n,m;
	cin>>n>>m;
	for(int i=0;i<n-1;i++)
	{
		int x,y;
		cin>>x>>y;
		a[x].pb(y);
		a[y].pb(x);
	}	
	dfs(1);
	for(int i=0;i<o.size();i++)
	{
		out[o[i]]=i;
	}
	for(int i=(int)o.size()-1;i>=0;i--)
	{
		in[o[i]]=i;
	}
	fw.init(3*N);
	for(int i=0;i<m;i++)
	{
		int k;
		cin>>k;
		vector<int> lol;
		int oof=-1;
		int pos=-1;
		for(int j=0;j<k;j++)
		{
			int x;
			cin>>x;
			lol.pb(x);
			if(depth[x]>oof)
			{
				oof=depth[x];
				pos=x;
			}
		}
		// cout<<pos<<" ";
		fw.add(in[1],1);
		fw.add(in[pos]+1,-1);
		bool ok=true;
		for(int i=0;i<k;i++)
		{
			int sum=fw.sum(in[lol[i]])+fw.sum(out[lol[i]]);
			if(sum==1)
			{
				continue;
			}
			bool orz=false;
			for(auto kek:a[lol[i]])
			{
				int sum=fw.sum(in[kek])+fw.sum(out[kek]);
				if(sum==1)
				{
					orz=true;
				}
			}
			if(!orz)
			{
				ok=false;
			}
		}
		fw.add(0,-1);
		fw.add(in[pos]+1,1);
		if(ok) cout<<"YES\n";
		else cout<<"NO\n";
	}
}
// x x x x x 
// 1 1 2 1 2
// 1 2 1 2
// 2 1 2 1 2
// 1 2 1__2
// 211 x y x y
// 211 2 1 2 1
// Don't be afraid to fail. Be afraid not to try.
// "Become grindian instead of greendian" - aryanc403
// When you want to succeed as bad as you want to breathe, only then you’ll Be Successful!
// No Matter,How Fast You Are Driving If You Are Driving in a Wrong Direction You Will Never Reach Your Destination
// When failures hit you, you hit the failures back with Bounce Back!
// When you face failures, Don’t change your goal, Change your strategy!