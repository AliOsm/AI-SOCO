#pragma comment (linker, "/STACK:256000000")
 
#define _USE_MATH_DEFINES
#define _CRT_NO_DEPRECEATE
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <memory.h>
#include <sstream>
#include <cassert>
#include <ctime>
#include <complex>
//#include <random>
 
using namespace std;
 
typedef unsigned int uint32;
typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pll;
typedef pair<pii, pii> piiii;
typedef pair<int64, int> pli;
 
#define pb push_back
#define sq(x) ((x)*(x))
#define tmin(x,y,z) (min(min((x),(y)),(z)))
#define rand32() (((unsigned int)(rand()) << 16) | (unsigned int)(rand()))
#define rand64() (((unsigned int64)(rand32()) << 16) | (unsigned int64)(rand32()))
#define bit(mask, b) ((mask >> b) & 1)
#define biton(mask, bit) (mask | (((uint64)(1)) << bit))
#define bitoff(mask, bit) (mask & (~(((uint64)(1)) << bit)))
#define bitputon(mask, bit) (mask |= (((uint64)(1)) << bit))
#define bitputoff(mask, bit) (mask &= (~(((uint64)(1)) << bit)))
#define FAIL() (*((int*)(0)))++
#define INF ((int)(1e9) + 1337)
#define EPS (1e-11)
#define y1 yy1
#define y0 yy0
#define j0 jj0

//#define HMOD (1000000000000000003LL)
//#ifdef _MY_DEBUG
//#define HMOD 1000000007
//#endif
//#define HBASE 524287

//mt19937 ggen;

const long double PI = acosl((long double)-1.0);

const int MAXN = 200500;
const int64 LINF = ((1ull << 63) - 1ull);

int n, k, c, b;
int64 d[5];
int64 last[5];
int64 res[5];
int cnt;
vector <vector <priority_queue<int64, vector<int64>, less<int64> > > > qu;
int a[MAXN];
vector <int> cand;
int64 ans;

void solve()
{
	for (int i = 0; i < 5; i++)
	{
		last[i] = -1000000010 + i;
	}
	qu.resize(5);
	for (int j = 0; j < 5; j++)
	{
		qu[j].resize(5);
	}
	ans = LINF;
	scanf ("%d%d%d%d", &n, &k, &b, &c);
	for (int i = 1; i <= n; i++)
	{
		scanf ("%d", &a[i]);
	}
	sort (a + 1, a + n + 1);
	a[n + 1] = INF;
	cand.reserve(n * 5);
	for (int i = 1; i <= n; i++)
	{
		for (int j = 0; j < (min(5, a[i + 1] - a[i])); j++)
		{
			cand.push_back(a[i] + j);
		}
	}

	int ptr = 1;
	for (int i = 0; i < cand.size(); i++)
	{
		int q = cand[i];
		int x = (cand[i] + 5000000000LL) % 5;
		int64 five = (cand[i] - last[x]) / 5;
		d[x] += min(b, c * 5) * five;
		res[x] += (int64)min(b, c * 5) * five * cnt;
		last[x] = cand[i];
		while (ptr <= n && a[ptr] == cand[i])
		{
			for (int j = 0; j < 5; j++)
			{
				pli mx = pli(-LINF, -1);
				for (int h = 0; h < 5; h++)
				{
					mx = max(mx, pli((qu[j][h].empty() ? -LINF : qu[j][h].top() + d[j]), h));
				}
				int64 val = -(cand[i] - last[j] + 4LL) / 5LL * min(b, 5 * c) + (last[j] - cand[i] + 5000000000LL) % 5LL * c;
				if (cnt < k || mx.second > -1 && mx.first > val)
				{
					qu[j][x].push(val - d[j]);
					res[j] += val;
					if (cnt == k)
					{
						qu[j][mx.second].pop();
						res[j] -= mx.first;
					}
				}
			}
			if (cnt < k)
			{
				cnt++;
			}
			ptr++;
		}
		if (cnt >= k)
		{
			ans = min(ans, res[x]);
		}
		/*fprintf(stderr, "cand = %d cnt = %d:\n", cand[i], cnt);
		for (int j = 0; j < 5; j++)
		{
			fprintf(stderr, "%lld ", res[j]);
		}
		fprintf(stderr, "\n");*/
	}
	printf("%I64d\n", ans);
}

int main()
{
    //ios_base::sync_with_stdio(false); cin.tie(0);
#ifdef _MY_DEBUG
    freopen("input.txt", "rt", stdin); freopen("output.txt", "wt", stdout);
#else
    //freopen(TASK ".in", "rt", stdin); freopen(TASK ".out", "wt", stdout);
#endif
    srand(1313);
  
	solve();
	
    return 0;
}