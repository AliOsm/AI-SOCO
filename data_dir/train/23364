#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <cstring>
#include <iterator>
#include <cmath>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <chrono>
#include <assert.h>

#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

using namespace std;
typedef long long mt;

template<typename T>
constexpr mt infValue = std::is_same<T, int>::value ? 2000100007 : 8600000000000000007ll;
template<typename T>
constexpr mt maxValue = std::is_same<T, int>::value ? 1000000007 : 1000000000000000001ll;

#define rep(a, b, i) for(register mt i = a; i < b; ++i)
#define repe(a, b, i) for(register mt i = a; i <= (b); ++i)
#define repd(a, b, i) for(register mt i = a; i > b; --i)
#define repde(a, b, i) for(register mt i = a; i >= b; --i)

const mt INF = infValue<mt>;
const long long MOD = 1000000007ll;//1000000007ll;
const double EPS = 1e-6;
const mt MAX = maxValue<mt>;
using pr = pair<mt, mt>;

#define N 550
#define K 56
#define P 3
#define M (1000111)

mt t, n;
char s[N];
bool is[3];
bool test() {
	memset(is, 0, sizeof(is));
	rep(0, n, i) {
		if (isupper(s[i])) is[0] = true;
		else if (islower(s[i])) is[1] = true;
		else is[2] = true;
	}

	return is[0] && is[1] && is[2];
}

char tc[P] = { 'a', 'A', '1' };

char tts[N];
bool ff = false;
void tf() {
	rep(0, n - 1, i) {
		s[i] = tts[i];
		s[i + i] = tts[i + 1];
		rep(0, P, k) {
			rep(0, P, p) {
				s[i] = tc[k];
				s[i + 1] = tc[p];

				if (test()) {
					puts(s);
					return;
				}
			}
		}
	}
}

int main(void)
{
#ifdef _DEBUG
	freopen("in.txt", "r", stdin);
#endif
	scanf("%d", &t);
	while (t--) {
		scanf("%s", s);
		n = strlen(s);
		memcpy(tts, s, n);
		if (test()) puts(s);
		else {
			bool f = false;
			rep(0, n, j) {
				char sc = s[j];
				rep(0, P, i) {
					s[j] = tc[i];
					if (test()) {
						puts(s);
						f = true;
						break;
					}
				}
				s[j] = sc;
				if (f) break;
			}

			if (!f) {
				tf();
			}
		}

	}
	

	return 0;
}