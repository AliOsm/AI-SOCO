#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (int) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const int inf = numeric_limits <int>::max() >> 1;
const int N = 3e5 + 1;
int n, m, s;

int ans[N];

bool und[N];

struct Tri {
    int v, t, i;
};

struct Graph {
    bool vis[N];
    vec <Tri> dir[N];
    vec <Tri> und[N];
} graph;

void input() {
    cin >> n >> m >> s;
    for(int i = 0; i < m; ++i) {
        int t; cin >> t;
        int u; cin >> u;
        int v; cin >> v;
        if(t == 1) {
            graph.dir[u].pb({v, 0, i});
            graph.dir[v].pb({u, 1, i});
        } else {
            und[i] = 1;
            graph.und[u].pb({v, 0, i});
            graph.und[v].pb({u, 1, i});
        }
    }
}

int dfs_mnm(int u) {
    int res = 1;
    graph.vis[u] = 1;
    for(auto e: graph.dir[u]) {
        int v = e.v;
        int t = e.t;
        int i = e.i;
        if(t == 1) {
            continue;
        }
        if(!graph.vis[v]) {
            res += dfs_mnm(v);
        }
    }
    for(auto e: graph.und[u]) {
        int v = e.v;
        int t = e.t;
        int i = e.i;
        ans[i] = !t;
    }
    return res;
}

int dfs_mxm(int u) {
    int res = 1;
    graph.vis[u] = 1;
    for(auto e: graph.dir[u]) {
        int v = e.v;
        int t = e.t;
        int i = e.i;
        if(t == 1) {
            continue;
        }
        if(!graph.vis[v]) {
            res += dfs_mxm(v);
        }
    }
    for(auto e: graph.und[u]) {
        int v = e.v;
        int t = e.t;
        int i = e.i;
        if(!graph.vis[v]) {
            ans[i] = t;
            res += dfs_mxm(v);
        }
    }
    return res;
}

void solve() {
    cout << dfs_mxm(s) << "\n";
    for(int i = 0; i < m; ++i) {
        if(!und[i]) {
            continue;
        }
        if(ans[i] == 0) {
            cout << "+";
        } else {
            cout << "-";
        }
    }
    cout << "\n";
    fill(graph.vis, graph.vis + N, 0);
    cout << dfs_mnm(s) << "\n";
    for(int i = 0; i < m; ++i) {
        if(!und[i]) {
            continue;
        }
        if(ans[i] == 0) {
            cout << "+";
        } else {
            cout << "-";
        }
    }
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
