#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <fstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <stack>
#include <iomanip>
#include <deque>
#include <list>
#include <cassert>
#include <complex>
#include <bitset>
#include <deque>


using namespace std;
typedef long long ll;
//#define int ll
typedef long double ld;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pdd;
#define mmin(a, b) a = min(a, (b))
#define ALL(a) a.begin(),a.end()
#define SZ(a) ((int)(a).size())
#define watch(x) cout << (#x) << " = " << (x) << endl;


const int N = 2e3 + 100 + 10, oo = 1e10 + 10;
const ll M = 1e9 + 7, x = 137;


int used[N][N], n, k;
vector<string> maps;


bool check(int s, int c)
{
	return s < n && c < n && s >= 0 && c >= 0 && !used[s][c];
}


void stupid(vector<pii> first)
{
	vector<pii> second;

	while (!count(ALL(first), make_pair(n - 1, n - 1 )))
	{
		char c = 'z' + 1;

		for (auto p : first)
		{
			if (check(p.first + 1, p.second))
				c = min(c, maps[p.first + 1][p.second]);

			if (check(p.first, p.second + 1))
				c = min(c, maps[p.first][p.second + 1]);
		}

		cout << c;
		second.clear();

		for (auto p : first)
		{
			if (check(p.first + 1, p.second) && maps[p.first + 1][p.second] == c)
			{
				second.push_back({ p.first + 1, p.second });
				used[p.first + 1][p.second] = 1;
			}

			if (check(p.first, p.second + 1) && maps[p.first][p.second + 1] == c)
			{
				second.push_back({ p.first, p.second + 1 });
				used[p.first][p.second + 1] = 1;
			}
		}

		first = second;
	}
}




signed main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);


	cin >> n >> k;
	deque<pii> que;
	maps.resize(n);
	
	for (int i = 0; i < n; ++i)
		cin >> maps[i];
	
	if (!k)
	{
		vector<pii> first;
		cout << maps[0][0];
		used[0][0] = 1;
		first.push_back({ 0, 0 });
		stupid(first);
		return 0;
	}

	used[0][0] = 1 + (int)(maps[0][0] != 'a');
	que.push_back({ 0, 0 });

	while (!que.empty())
	{
		pii cur = que.front();
		que.pop_front();

		if (make_pair(cur.first, cur.second) == make_pair(n - 1, n - 1))
		{
			for (int i = 1; i < 2 * n; ++i)
				cout << 'a';

			return 0;
		}

		if (check(cur.first + 1, cur.second) && maps[cur.first + 1][cur.second] == 'a')
		{
			used[cur.first + 1][cur.second] = used[cur.first][cur.second];
			que.push_front({ cur.first + 1, cur.second });
		}

		if (check(cur.first, cur.second + 1) && maps[cur.first][cur.second + 1] == 'a')
		{
			used[cur.first][cur.second + 1] = used[cur.first][cur.second];
			que.push_front({ cur.first, cur.second + 1});
		}
	
		if (used[cur.first][cur.second] == k + 1)
			continue;

		if (check(cur.first + 1, cur.second) && maps[cur.first + 1][cur.second] != 'a')
		{
			used[cur.first + 1][cur.second] = used[cur.first][cur.second] + 1;
			que.push_back({ cur.first + 1, cur.second });
		}

		if (check(cur.first, cur.second + 1) && maps[cur.first][cur.second + 1] != 'a')
		{
			used[cur.first][cur.second + 1] = used[cur.first][cur.second] + 1;
			que.push_back({ cur.first, cur.second + 1 });
		}
	}

	int ans = -1;

	for (int i = 0; i < n; ++i)
		for (int j = 0; j < n; ++j)
			if (i + j > ans && used[i][j] == k + 1)
				ans = i + j;

	vector<pii> first;
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < n; ++j)
			if (i + j == ans && used[i][j] == k + 1)
				first.push_back({ i, j });
	
	for (int i = 0; i <= ans; ++i)
		cout << 'a';

	stupid(first);
}