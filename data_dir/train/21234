//besmellah
#include <bits/stdc++.h>
using namespace std;

#define int long long

const int maxn = 1e5 + 5, lg = 20;
int ans = 0;
int a[maxn], sz[maxn], M[maxn][lg], b[maxn];
vector <int> adj[maxn];

void dfs(int v, int p = -1) {
	sz[v] = 1;
	for (int i = 0; i < lg; i++) {
		if (a[v] & (1 << i))
			M[v][i] = 1;
	}
	int T[lg], S = 0;
	fill(T, T + lg, 0);
	for (auto u: adj[v]) {
		if (u == p)
			continue;
		b[u] = a[u];
		a[u] ^= a[v];
		dfs(u, v);
		sz[v] += sz[u];
		int tmp = ans;
		for (int i = 0; i < lg; i++) {
			M[v][i] += M[u][i];
			if (b[v] & (1 << i)) {
				ans += M[u][i] * T[i] * (1 << i);
				ans += (sz[u] - M[u][i]) * (S - T[i]) * (1 << i);
				ans += (sz[u] - M[u][i]) * (1 - (bool)(a[v] & (1 << i))) * (1 << i);
				ans += M[u][i] * (bool)(a[v] & (1 << i)) * (1 << i);
			}
			else {
				ans += M[u][i] * (S - T[i]) * (1 << i);
				ans += (sz[u] - M[u][i]) * T[i] * (1 << i);
				ans += M[u][i] * (1 - (bool)(a[v] & (1 << i))) * (1 << i);
				ans += (sz[u] - M[u][i]) * (bool)(a[v] & (1 << i)) * (1 << i);
			}
			T[i] += M[u][i];
		}
//		cout << v << ' ' << u << ' ' << ans - tmp << endl;
		S += sz[u];
	}
//	cout << v << ' ' << a[v] << ' ' << sz[v] << ' ';
//	for (int i = 0; i <= 4; i++)
//		cout << M[v][i] << ' ';
//	cout << endl;
}

int32_t main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
		ans += a[i];
	}
	b[0] = a[0];
	for (int i = 0; i < n - 1; i++) {
		int v, u;
		cin >> v >> u;
		v--;
		u--;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs(0);
	cout << ans;
}
