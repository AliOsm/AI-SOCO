#include<bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
string s;
int dp[N][3][2];
int solve (int i , int rem , bool f){
    if (i == s.size()){
        if (rem == 0 && !f)
            return dp[i][rem][f]=0;
        return dp[i][rem][f]=-1e9;
    }
    if (dp[i][rem][f] != -1)
        return dp[i][rem][f];
    int num = s[i] - '0';
    int A= 0 , B = 0;
    if (!(s[i] == '0' && f))
        A= solve(i + 1 , (rem + num)%3 , 0) + 1;
    B= solve(i + 1 , rem , f);
    return dp[i][rem][f]=max(A,B);
}
void print(int i , int rem , bool f){
    if (i == s.size())
        return ;

    int num = s[i] - '0';
    int A = dp[i+1][(int)((rem+num)%3)][0];
    int B = dp[i+1][rem][f];
    if ( (s[i]!='0' || !f) && A >= B){
        cout << s[i];
        print(i+1,(rem+num)%3 , 0);
    }
    else {
        print(i+1, rem ,f);
    }
}
int main (){
    cin >> s;
    memset(dp,-1,sizeof dp);
    int ans =solve(0,0,1);
    if (ans <= 0){
        for(int i = 0 ; i <s.size() ; i++){
            if (s[i] == '0')
                return puts("0");
        }
        cout <<-1 ;
    }
    else{
        print(0,0,1);
    }

    return 0;
}
