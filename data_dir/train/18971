#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define mp make_pair
#define mod 1000000007
#define pi 3.141592653589793
const int N = 100001;
using namespace std;


string f(string a, string b) {
    if (a.empty()) {
        return b;
    }
    if (a.size() < b.size()) {
        swap(a, b);
    }

    if (a.find(b) != string :: npos) {
        return a;
    }

    for (int i = 1; i < b.size() + 1; i++) {
        if (a.substr(a.size() - i, i) == b.substr(0, i)) {
            return a + b.substr(i, b.size() - i);
        }
    }

    for (int i = 1; i < b.size() + 1; i++) {
        if (b.substr(b.size() - i, i) == a.substr(0, i)) {
            return b + a.substr(i, a.size() - i);
        }
    }

    cout << "NO";
    exit(0);
}


int main() {
//    cout << fixed << setprecision(10);
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);


    int n;
    cin >> n;
    string a[n];
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        unordered_set<char> st;
        for (char c : a[i]) {
            st.insert(c);
        }

        if (st.size() != a[i].size()) {
            cout << "NO";
            return 0;
        }
    }


    set<int> just[200];
    for (int i = 0; i < n; i++) {
        for (char c : a[i]) {
            just[c].insert(i);
        }
    }

    bool vis[n], al[200];
    memset(vis, false, sizeof vis);
    memset(al, false, sizeof al);
    vector<string> b;

    for (int i = 0; i < n; i++) {
        if (vis[i]) {
            continue;
        }

        queue<int> q;
        q.push(i);
        vis[i] = true;
        string h;
        while (!q.empty()) {
            int ind = q.front();
            q.pop();
            h = f(h, a[ind]);
            for (char c : a[ind]) {
                if (!al[c]) {
                    al[c] = true;
                    for (int j = 0; j < n; j++) {
                        if (!vis[j] && count(a[j].begin(), a[j].end(), c)) {
                            vis[j] = true;
                            q.push(j);
                        }
                    }
                }
            }

        }
        b.pb(h);
    }

    unordered_set<char> st;
    int t = 0;
    for (string &s : b) {
        t += s.size();
        for (char c : s) {
            st.insert(c);
        }
    }

    if (st.size() != t) {
        cout << "NO";
        return 0;
    }


    sort(b.begin(), b.end());
    for (string &s : b) {
        cout << s;
    }

}
