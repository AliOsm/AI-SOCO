#include<bits/stdc++.h>
#include<map>
using namespace std;
#define ll long long
#define mk(a,b) make_pair(a,b)
//#define pb push_back
#define pii pair<int ,int >
#define pli pair<ll,int>
#define INF 1ll<<40
#define MOD 1000000007
#define MAX (int)1e5+5
#define FI freopen("in.txt","r",stdin);
#define FO freopen("out.txt","w",stdout);
#define edge pair<pair<int,int>,int>
//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction
//int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction
ll n, m, k;
vector<vector<pii > >v2;
ll costs[MAX];
int parent[MAX];
vector<int>answer;
void dikstra() {
	priority_queue<pli, vector<pli>, greater<pli> >pq;
	pq.push({ 0,1 });
	parent[1] = -1;
	costs[1] = 0;
	while (!pq.empty()) {
		int node = pq.top().second;
		ll cost = pq.top().first;
		pq.pop();
		for (auto I : v2[node]) {
			if (costs[I.second] >cost + I.first) {
				costs[I.second] = cost + I.first;
				parent[I.second] = node;
				pq.push({ costs[I.second],I.second });
			}
		}
	}
}
int main() {
	string s;
	bool c = 0;
	cin >> s;
	string s2="";
	for (int i = 0; i < s.size(); i++) {
		if (s[i] == '/' && !c) {
			c = 1;
			s2 += s[i];
		}
		else if (s[i] == '/' && c) {
			continue;
		}
		if (s[i] != '/') {
			s2 += s[i];
			c = 0;
}
	}
	if (s2[s2.size() - 1] == '/'&&s2.size()>1) {
		s2 = s2.substr(0, s2.size() - 1);
	}
	cout << s2;
	return 0;
}