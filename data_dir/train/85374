#include "bits/stdc++.h"

using namespace std;
using LL = long long;

constexpr int N = 2e5 + 5;
constexpr LL INF = 1e18;

int n;
vector< int> cards[N][4];
LL dp[N][10];
LL dp2[4][2];

int main() {
	ios::sync_with_stdio(false); cin.tie(nullptr);
	
	for (int i = 0; i < N; i++) for (int j = 0; j < 10; j++) dp[i][j] = -INF;

	dp[0][0] = 0;

	cin >> n;

	for (int i = 0; i < n; i++) {
		int k;
		cin >> k;

		while (k--) {
			int c, d;
			cin >> c >> d;
			cards[i][c].push_back(d);
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 1; j <= 3; j++) {
			sort(begin(cards[i][j]), end(cards[i][j]), greater< int>());

			int s = (j == 1? 3 : 1);
			while (cards[i][j].size() > s) cards[i][j].pop_back();
		}
	}

	for (int i = 0; i < n; i++) {

		for (int j = 0; j < 4; j++) dp2[j][0] = dp2[j][1] = -INF;
		dp2[0][0] = 0;

		vector< pair< int, int>> cur;
		for (int j = 1; j <= 3; j++) {
			for (int x : cards[i][j]) {
				cur.push_back(make_pair(j, x));
			}
		}

		sort(begin(cur), end(cur));

		do {
			int can = 3;
			LL score = 0;
			LL mx = 0;
			int cnt = 0;

			for (const auto& x : cur) {
				cnt++;
				if (x.first > can) break;

				can -= x.first;
				score += x.second;
				mx = max(mx, (LL) x.second);
				dp2[cnt][0] = max(dp2[cnt][0], score);
				dp2[cnt][1] = max(dp2[cnt][1], score + mx);
			}

		} while (next_permutation(begin(cur), end(cur)));

		for (int j = 0; j < 10; j++) {
			for (int k = 0; k <= 3; k++) {
				int nxt = (j + k) % 10;
				int f = (j + k >= 10? 1 : 0);
				dp[i + 1][nxt] = max(dp[i + 1][nxt], dp[i][j] + dp2[k][f]);
			}
		}
	}

	LL ans = 0;
	for (int i = 0; i < 10; i++) ans = max(ans, dp[n][i]);

	cout << ans << "\n";
}