#include <bits/stdc++.h>

using namespace std;

const int N = (int)1e5 + 7;

int nxt[N][123], sz[3];
int n, q;
int dp[255][255][255];
string s;
string S[3];

main() {
	scanf("%d %d", &n, &q);
	cin >> s;
	for (int i = 'a'; i <= 'z'; i++) {
		nxt[n][i] = nxt[n + 1][i] = n;
	}
	for (int i = n - 1; i >= 0; i--) {
		for (int j = 'a'; j <= 'z'; j++) {
			nxt[i][j] = nxt[i + 1][j];
		}
		nxt[i][s[i]] = i;
	}
	for (int i = 0; i < 255; i++) {
		for (int j = 0; j < 255; j++) {
			for (int k = 0; k < 255; k++) {
				dp[i][j][k] = n;
			}
		}
	}
	dp[0][0][0] = -1;
	while (q--) {
		char tp;
		int ind;
		cin >> tp;
		scanf("%d", &ind); ind--;
		if (tp == '+') {
			cin >> tp;
			sz[ind]++;
			S[ind].push_back(tp);
			if (ind == 0) {
				for (int j = 0; j <= sz[1]; j++) {
					for (int k = 0; k <= sz[2]; k++) {
						dp[sz[0]][j][k] = n;
					}
				}
				for (int j = 0; j <= sz[1]; j++) {
					for (int k = 0; k <= sz[2]; k++) {
						dp[sz[0]][j][k] = min(dp[sz[0]][j][k], nxt[dp[sz[0] - 1][j][k] + 1][S[0][sz[0] - 1]]);
						if (j + 1 <= sz[1]) {
							dp[sz[0]][j + 1][k] = min(dp[sz[0]][j + 1][k], nxt[dp[sz[0]][j][k] + 1][S[1][j]]);
						}
						if (k + 1 <= sz[2]) {
							dp[sz[0]][j][k + 1] = min(dp[sz[0]][j][k + 1], nxt[dp[sz[0]][j][k] + 1][S[2][k]]);
						}
					}
				}
			} else if (ind == 1) {
				for (int i = 0; i <= sz[0]; i++) {
					for (int k = 0; k <= sz[2]; k++) {
						dp[i][sz[1]][k] = n;
					}
				}
				for (int i = 0; i <= sz[0]; i++) {
					for (int k = 0; k <= sz[2]; k++) {
						dp[i][sz[1]][k] = min(dp[i][sz[1]][k], nxt[dp[i][sz[1] - 1][k] + 1][S[1][sz[1] - 1]]);
						if (i + 1 <= sz[0]) {
							dp[i + 1][sz[1]][k] = min(dp[i + 1][sz[1]][k], nxt[dp[i][sz[1]][k] + 1][S[0][i]]);
						}
						if (k + 1 <= sz[2]) {
							dp[i][sz[1]][k + 1] = min(dp[i][sz[1]][k + 1], nxt[dp[i][sz[1]][k] + 1][S[2][k]]);
						}
					}
				}
			} else {
				for (int i = 0; i <= sz[0]; i++) {
					for (int j = 0; j <= sz[1]; j++) {
						dp[i][j][sz[2]] = n;
					}
				}
				for (int i = 0; i <= sz[0]; i++) {
					for (int j = 0; j <= sz[1]; j++) {
						dp[i][j][sz[2]] = min(dp[i][j][sz[2]], nxt[dp[i][j][sz[2] - 1] + 1][S[2][sz[2] - 1]]);
						if (i + 1 <= sz[0]) {
							dp[i + 1][j][sz[2]] = min(dp[i + 1][j][sz[2]], nxt[dp[i][j][sz[2]] + 1][S[0][i]]);
						}
						if (j + 1 <= sz[1]) {
							dp[i][j + 1][sz[2]] = min(dp[i][j + 1][sz[2]], nxt[dp[i][j][sz[2]] + 1][S[1][j]]);
						}
					}
				}
			}
		} else {
			S[ind].pop_back();
			sz[ind]--;
		}
		// cout << dp[sz[0]][sz[1]][sz[2]] << endl;
		if (dp[sz[0]][sz[1]][sz[2]] < n) {
			puts("yes");
		} else {
			puts("no");
		}
	}
}
