#include <iostream>
#include <cstdio>
#include <list>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstring>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <deque>
#include <queue>
#include <climits>
#include <unordered_map>
#define all(v) v.begin(), v.end()
#define ll long long
#define READ(f) freopen (f, "r", stdin)
#define WRITE(f) freopen (f, "w", stdout)
#define pb push_back
#define mp make_pair
#define foreach(it, S) for(__typeof (S.begin()) it = S.begin(); it != S.end(); it++)
#define inc(i, x, n) for(int i=(int)x;i<=(int)n;i++)
#define dec(i, n, x) for(int i=(int)n;i>=(int)x;i--)
#define F first
#define S second
 
using namespace std;
 
const int MAXN = 1e6 + 256;
const int N = 1256;
const int INF = int (1e9);

string s, k;
int p[MAXN], P[MAXN];
bool u[MAXN];

bool check (int x) {
    double q = sqrt (x);
    int Q = int (q);
    return (double (Q) == q);
}

int main () {
    ios_base :: sync_with_stdio (false);
    
    #ifdef accepted
        READ(".in");
    #endif

    cin >> s >> k;

    string kmp = s;

    for (int i = 1; i < kmp.size(); ++i) {
        int j = p[i-1];
        while (j && kmp[i] != kmp[j])
            j = p[j-1];
        if (kmp[i] == kmp[j])
            j++;
        p[i] = j;
    }
    kmp = k;
    int ans = 0;
    for (int i = 1; i < kmp.size(); ++i) {
        int j = P[i-1];
        while (j && kmp[i] != kmp[j])
            j = P[j-1];
        if (kmp[i] == kmp[j])
            j++;
        P[i] = j;
    }
    int fsz = s.size() - p[s.size() - 1];
    int ssz = k.size() - P[k.size() - 1];

    string f = "", sc = "";

    for (int i = 0; i < fsz; ++i)
        f += s[i];

    for (int i = 0; i < ssz; ++i)
        sc += k[i];

    while (s.size() % f.size() != 0)
        f += s[fsz++];
    while (k.size() % sc.size() != 0)
        sc += k[ssz++];
        //cout << f << ' ' << sc << endl;
    if (f != sc) {
        cout << 0;
        return 0;
    }

    for (int i = 2; i <= min (s.size(), k.size()); ++i) {
        if (min (s.size(), k.size()) % i == 0 && max (s.size(), k.size()) % i == 0) {
            u[i] = u[min (s.size(), k.size()) / i] = 1;
        }
    }
    u[min (s.size(), k.size())] = 1;
    int res = 0;
    for (int i = 2; i <= min (s.size(), k.size()); ++i) {
        if (u[i] && i % ssz == 0 && max (s.size(), k.size()) % i == 0) {
            //cout << i << endl;
            res++;
        }
    }
    if (ssz == 1)
        res++;
    cout << res;

    return 0;
}