// KALAM
# include <bits/stdc++.h>

using namespace std;

const int N = 3000000 + 77;
int n , m , p[N] , t = 1 , fen[N] , s = 1 , A[N];
pair < int , int > a[N];
pair < pair < int , int > , int > Q[N];
void Add(int x){
	for(;x < N;x += x & - x){
		fen[x] ++;
	}
}
int Get(int x){
	int val = 0;
	for(;x;x -= x & - x){
		val += fen[x];
	}
	return val;
}
int main(){
	scanf("%d %d" , & n , & m);
	for(int i = 1;i <= n;i++){
		int x;
		scanf("%d" , & x);
		p[x] = i;
	}
	for(int i = 1;i <= m;i++){
		int l , r;scanf("%d %d" , & l , & r);
		Q[(i << 1) - 1] = make_pair(make_pair(r , (int)1e9) , i);
		Q[(i << 1)] = make_pair(make_pair(l - 1 , r) , i);
	}
	sort(Q + 1 , Q + (m << 1) + 1);
	for(int i = 1;i <= n;i++){
		for(int j = i ;j <= n;j += i){
			if(p[j] < p[i]){a[t] = make_pair(p[j] , p[i]);t ++;continue;}
			a[t] = make_pair(p[i] , p[j]);t ++;
		}
	}
	sort(a + 1 , a + t);
	a[t].first = 1e9;
	for(int i = 1;i <= (m << 1);i++){
		int T = Q[i].first.first , id = Q[i].second;
		while(a[s].first <= T){
			Add(a[s].second);s ++;
		}
		if(Q[i].first.second == (int)1e9){
			A[id] += Get(T);
		}
		else{
			A[id] -= Get(Q[i].first.second);
		}
	}
	for(int i = 1;i <= m;i++){
		printf("%d\n" , A[i]);
	}
 	return 0;
}	