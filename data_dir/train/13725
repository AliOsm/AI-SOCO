#include <bits/stdc++.h>

using namespace std;

const long long mod = 1e9 + 7ll ;
const int MAX = 2e5 + 5 ;

vector< vector<int> >adj(MAX) ;
int vis[MAX] ;

int vertices = 0 , edges = 0 , selfloop = 0 ;

void dfs(int node)
{
    vis[node] = 1 ;
    vertices++ ;
    for(auto &child : adj[node])
    {
        edges++ ;
        if(child == node)
            selfloop = 1 ;
        if(vis[child] == 1)
            continue ;
        dfs(child) ;
    }
    return ;
}

int main()
{
    int n ;
    scanf("%d" , &n) ;
    for(int i = 0 ; i < n ; ++i)
    {
        int x ,y  ;
        scanf("%d %d" , &x , &y) ;
        adj[x].push_back(y) ;
        adj[y].push_back(x) ;
    }
    long long ans = 1ll ;
    for(int i = 1 ; i <= n*2 ; ++i)
    {
        if(vis[i] == 1)
            continue ;
        vertices = 0 ;
        edges = 0 ;
        selfloop = 0 ;
        dfs(i) ;
        edges /= 2 ; //undirected graph
        if(edges == vertices-1)
            ans = (ans * (vertices*1ll)) % mod ;
        else if(selfloop == 0)
            ans = (ans * 2ll) % mod ;
        ans %= mod ;
    }
    return cout<<ans<<"\n" , 0 ;
}
