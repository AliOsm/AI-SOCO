#include <bits/stdc++.h>

using namespace std;

const int N = 2e5 + 5;

typedef long long ll;

const ll mod = 1e9 + 7;

int n, m;
vector <int> g[N], ans;
unordered_set <int> st;
bool used[N];

void bfs(int v) {
    queue <int> q;
    int ct = 0;
    q.push(v);
    st.erase(v);
    while (!q.empty()) {
        ct++;
        v = q.front();
        q.pop();
        used[v] = 1;
        vector <int> vec;
        for (int id : st) {
            auto x = lower_bound(g[v].begin(), g[v].end(), id);
            if (x == g[v].end() || *x != id) {
                q.push(id);
                vec.push_back(id);
            }
        }
        for (int id : vec) {
            st.erase(id);
        }
    }
    ans.push_back(ct);
}

int main() {
    cin >> n >> m;
    for (int i = 1; i <= m; i++) {
        int u, v;
        cin >> u >> v;
        g[v].push_back(u);
        g[u].push_back(v);
    }
    for (int i = 1; i <= n; i++) {
        st.insert(i);
        sort(g[i].begin(), g[i].end());
    }
    for (int i = 1; i <= n; i++) {
        if (!used[i]) {
            bfs(i);
        }
    }
    sort(ans.begin(), ans.end());
    cout << ans.size() << "\n";
    for (int i : ans)
        cout << i << " ";
}
