// I think of what the world could be, A vision of the one I see, A million dreams is all it's gonna take
 
#include<bits/stdc++.h>
 
#define F first
#define S second
#define PB push_back
#define sz(s) int((s).size())
#define bit(n,k) (((n)>>(k))&1)
 
using namespace std;
 
typedef long long ll;
typedef pair<int,int> pii;
 
const int maxn = 5e5 + 10, mod = 998244353;
 
vector<pii> v[maxn];
int LST[maxn];
int dp[maxn];
 
stack<int> pq;
bool is[maxn];
 
int main(){
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie();
 
    int n, k, m;
    cin >> n >> k >> m;
    for(int i = 0; i < m; i++){
	int l, r, x;
	cin >> l >> r >> x;
	--l, --r;
	v[r].PB({l, x});
    }
    for(int i = 0; i < n; i++){
	sort(v[i].begin(), v[i].end());
    }
    int ans = 1;
    for(int i = 0; i < k; i++){
	for(int j = 0; j < n; j++){
	    pq.push(j);
	    int L = -1;
	    reverse(v[j].begin(), v[j].end());
	    for(pii p : v[j])
		if(bit(p.S, i))
		    L = p.F;
	    reverse(v[j].begin(), v[j].end());
	    if(L == -1)
		continue;
	    while(sz(pq) && pq.top() >= L)
		pq.pop();
	}
	for(int j = 0; j < n; j++){
	    is[j] = 0;
	}
	while(sz(pq)){
	    is[pq.top()] = 1;
	    pq.pop();
	}
	vector<int> vec;
	int PT = 0;
	for(int j = 0; j < n; j++){
	    if(is[j])
		LST[sz(vec)] = -1, vec.PB(j);
	    for(pii p : v[j]){
		if(bit(p.S, i))
		    continue;
		if(vec.empty() || vec.back() < p.F)
		    return cout << 0 << endl, 0;
		while(PT < sz(vec) && vec[PT] < p.F)
		    PT++;
		assert(PT < sz(vec));
		LST[ sz(vec)-1 ] = PT;
	    }
	}
	int sm = 0, pt = 0, MX = -1;
	dp[0] = 1;
	for(int j = 0; j < sz(vec); j++){
	    MX = max(MX, LST[j]);
	    while(pt < MX)
		sm = (sm - dp[pt]) % mod, pt++;
	    sm = (sm + dp[j]) % mod;
	    dp[j+1] = sm;
	    if(MX == -1)
		dp[j+1] = (dp[j+1] + 1) % mod;
	}
	ans = 1ll * ans * dp[sz(vec)] % mod;
    }
    if(ans < 0)
	ans+= mod;
    return cout << ans << endl, 0;
}
