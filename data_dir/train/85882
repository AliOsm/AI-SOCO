        /*
    Author: @aliencoder22
    Anil Bansal, DTU
*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define PSET(x,y) fixed<<setprecision(y)<<x
#define pb push_back
#define pf push_front
#define mp make_pair
#define pii pair<int,int>
#define pid pair<int,double>
#define vi vector<int>
#define ff first
#define ss second
#define int long long
#define ull unsigned long long
#define SIZE 200010
#define mod 1000000007
#define BIG 998244353
#define s(t) scanf("%d",&t)
#define p(t) printf("%d\n",t)
#define mii map<int,int>
#define TC int tc;cin>>tc;while(tc--)
#define MSET(table,i) memset(table, i, sizeof(table))
#define N 31607
#define INF 1e18
#define endl '\n'
const double pi = 3.1415926358;
int  max3(int  a,int  b,int c)
{
    return max(c,max(a,b));
}
int min3(int a,int  b,int  c)
{
    return min(a,min(b,c));
}
int  power(int  x,int  y )
{
    int res = 1;
    while (y > 0)
    {
        if (y & 1)
            res = (res*x);
        y = y>>1;
        x = (x*x);
    }
    return res;
}
int  powermod(int  x,int  y,int p )
{
    int res = 1;
    while (y > 0)
    {
        if (y & 1)
            res = (res*x)%p;
        y = y>>1;
        x = (x*x)%p;
    }
    return res%p;
}
int logg(int  a)
{
    int  x=0;
    while(a>1)
    {
        x++;
        a/=2;
    }
    return x;
}
int  gcd(int  a,int   b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}
int ceiling (int  a,int  b)
{
    if(a%b==0)
        return a/b;
    else
        return a/b+1;
}
int modinv(int x)
{
    return powermod(x,mod-2,mod);
}

int last_unset_bit(int n)
{
    int cnt=0;
    while(n)
    {
        if(n%2==0)
            return pow(2,cnt);
        cnt++;
        n/=2;
    }
    return -1;
}

int32_t main()
{
    fast;
    string s1,s2;cin>>s1>>s2;
    int a[26],b[26];
    MSET(a,0);
    MSET(b,0);
    int i=0;
    while(s1[i]!='\0')
    {
        a[s1[i]-97]++;
        ++i;
    }
    i=0;
    while(s2[i]!='\0')
    {
        b[s2[i]-97]++;
        ++i;
    }
    bool ans1,ans2;
    for(int i=0;i<26;++i)
    {
        if(a[i]<b[i])
        {
            ans1=false;
            ans2=false;
            cout<<"need tree"<<endl;
            return 0;
        }
    }
    if(s1.length()>s2.length())
        ans1=true;
    else if(s1.length()==s2.length())
    {
        cout<<"array"<<endl;
        return 0;
    }
    int j=0;
    i=0;
    int tot=0;
    while(s2[j] && s1[i])
    {
        if(s2[j]==s1[i])
        {
            ++i;
            ++j;
            ++tot;
        }
        else
            ++i;
    }
    if(tot==s2.length())
    {
        cout<<"automaton"<<endl;
        return 0;
    }
    cout<<"both"<<endl;
}
