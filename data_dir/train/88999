#include <bits/stdc++.h>

#define SZ 150

#define si(a) scanf("%d",&a)
#define f first
#define s second
#define mp(a,b) make_pair(a,b)

using namespace std;

vector<pair<int,int> > all,temp;
int R[10004],S[10004],is_ans[10004];
int maximum[200005];

map<pair<int,int>,vector<int> > data;
vector<int> answer;

pair<long long,long long> now,preve;

void put_ans(pair<int,int> &x)
{
    vector<int>::iterator it,en;
    it=data[x].begin();
    en=data[x].end();
    while(it!=en){
        answer.push_back(*it);
        it++;
    }
    return ;
}

void print_ans(void)
{
    sort(answer.begin(),answer.end());
    int i;
    for(i=0;i<answer.size();i++)
        printf("%d ",answer[i]+1);
    printf("\n");
    return ;
}

void cross(pair<int,int> one,pair<int,int> two)
{
    long long r1=one.f,s1=one.s,r2=two.f,s2=two.s;
    now.f=s1*s2*(r2-r1);
    now.s=r1*r2*(s1-s2);
    if(now.f<0)
        now.f*=-1;
    if(now.s<0)
        now.s*=-1;
}

bool is_it(void)
{
    double a=now.f,b=now.s,c=preve.f,d=preve.s;
    return a*d<=b*c;
}

int main()
{
    //freopen("input.txt","r",stdin);
    int i,n;
    si(n);
    memset(R,-1,sizeof(R));
    memset(S,-1,sizeof(S));
    for(i=0;i<n;i++){
        int r,s;
        si(r);si(s);
        data[mp(r,s)].push_back(i);
        if(data[mp(r,s)].size()>1)
            continue;
        R[r]=max(R[r],s);
        S[s]=max(S[s],r);
    }
    for(i=0;i<10004;i++){
        if(R[i]==-1 || i!=S[R[i]])
            continue;
        all.push_back(mp(i,R[i]));
    }
    sort(all.begin(),all.end());
    maximum[all.size()]=-1;
    for(i=all.size()-1;i>=0;i--)
        maximum[i]=max(all[i].s,maximum[i+1]);
    for(i=0;i<all.size();i++)
        if(all[i].s>maximum[i+1])
            temp.push_back(all[i]);
    all.swap(temp);
    if(all.size()<3){
        for(i=0;i<all.size();i++)
            put_ans(all[i]);
        print_ans();
        return 0;
    }
    for(i=0;i<all.size()/2;i++)
        swap(all[i],all[all.size()-i-1]);
    for(i=0;i<all.size();i++)
        is_ans[i]=1;
    for(i=0;i<all.size()-1;i++){
        cross(all[i],all[all.size()-1]);
        preve=now;
        for(int j=all.size()-2;j>i;j--){
            cross(all[i],all[j]);
            if(is_it()){
                preve=now;
            }
            else
                is_ans[j]*=0;
        }
    }
    for(i=0;i<all.size();i++)
        if(is_ans[i])
            put_ans(all[i]);
    print_ans();
    return 0;
}
