//Bismillah
#include <bits/stdc++.h>
using namespace std; 
#define pb push_back
#define mp make_pair
#define endl '\n'
typedef long long ll;
typedef pair <int,int> pii;

const int maxN = 60 + 10;
const int INF = INT_MAX;
int d[maxN][maxN][maxN],n,m,dp[maxN][maxN][maxN],r;
//dp[k][s][t]: k car changes, s to t
//d[i][j][k]: i'th car , j to k
int main() 
{
    ios_base::sync_with_stdio(false);
    for (int i = 0 ; i < maxN ; i++)
        for (int j = 0 ; j < maxN ; j++)
            for (int k = 0 ; k < maxN ; k++)          
                d[i][j][k] = dp[i][j][k] = INF;

    cin >> n >> m >> r;
    for (int i = 0 ; i < m ; i++)
        for (int j = 0 ; j < n ; j++)
            for (int k = 0 ; k < n ; k++)
                cin >> d[i][j][k]; //i'th car , j to k

    for (int car = 0 ; car < m ; car++) //Floyd
        for (int k = 0 ; k < n ; k++)
            for (int i = 0 ; i < n ; i++)
                for (int j = 0 ; j < n ; j++)
                    d[car][i][j] = min(d[car][i][j] , d[car][i][k] + d[car][k][j]);

    for (int i = 0 ; i < n ; i++)
        for (int j = 0 ; j < n ; j++)
            for (int car = 0 ; car < m ; car++) //zero car changes
                dp[0][i][j] = min(dp[0][i][j] , d[car][i][j]);

    for (int changes = 1 ; changes < maxN ; changes++)
        for (int i = 0 ; i < n ; i++)
            for (int j = 0 ; j < n ; j++)
                for (int k = 0 ; k < n ; k++) //vaasete
                    dp[changes][i][j] = min(dp[changes][i][j] , dp[changes-1][i][k] + dp[0][k][j]); 

    while (r--)
    {
        int s,t,k;
        cin >> s >> t >> k;
        if (k > n)
            k = n; //length of path isn't more than n 
        cout << dp[k][--s][--t] << endl;
    }
    return 0;
}