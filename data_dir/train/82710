/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
/* FOR ACM-ICPC WF*/
#include <bits/stdc++.h>

using namespace std;
using ll = long long;
using vi = vector<int>;
using vvi = vector<vi>;
using pii = pair<int, int>;

#define pb push_back

constexpr auto MOD = 1000000007LL;
constexpr auto LINF = (1LL << 60);
constexpr auto INF = 2147483647LL;
constexpr auto PI = 3.1415926535897932384626433;
constexpr auto EPS = 1E-9;

template<typename T1, typename T2>
ostream &operator<<(ostream &out, const pair<T1, T2> p) {
    out << p.first << ' ' << p.second;
    return out;
}

template<typename T1, typename T2>
istream &operator>>(istream &in, pair<T1, T2> &p) {
    in >> p.first >> p.second;
    return in;
}

template<typename T>
istream &operator>>(istream &in, vector<T> &v) {
    for (auto &x: v)
        in >> x;
    return in;
}

template<typename T>
ostream &operator<<(ostream &out, vector<T> v) {
    for (int i = 0; i < v.size(); i++)
        out << v[i] << (i + 1 == v.size() ? '\n' : ' ');
    out.flush();
    return out;
}

#if __cplusplus < 201703L
#define mp make_pair
#endif

#define MAXN 300010

int n, m, k;
vi e[MAXN];
int x[MAXN], y[MAXN], w[MAXN], used[MAXN];

ll d[MAXN];
vi res;

inline int get(int id, int now){
    return (x[id] == now? y[id]: x[id]);
}

int main() {
#ifdef LOCAL
    freopen("../input.txt", "r", stdin);
//		freopen("output.txt","w",stdout);
    freopen("../debug.txt", "w", stderr);
#endif
    ios_base::sync_with_stdio(false);

    cin >> n >> m >> k;
    for(int i = 1; i <= m; i++){
        cin >> x[i] >> y[i] >> w[i];
        e[x[i]].push_back(i);
        e[y[i]].push_back(i);
    }

    using nodeT = pair<ll, pii>;
    priority_queue<nodeT, vector<nodeT>, greater<nodeT>> pq;

    pq.push(pair(0, pair(1, 0)));

    while(pq.size()){
        auto [dd, pp] = pq.top();
        auto [x, id] = pp;
        pq.pop();

        if((x > 1 && d[x]) || (x == 1 && dd)) continue;
        if(id){
            res.push_back(id);
        }

        d[x] = dd;
        for(auto id: e[x]){
            pq.push(pair(dd+w[id], pair(get(id, x), id)));
        }
    }

    k = min(k, n-1);
    res.erase(res.begin()+k, res.end());
    cout << k << endl << res;

    return 0;
}
