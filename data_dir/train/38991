#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>

using namespace std;

const double error = 1e-6;

struct Point
{
     double x;
     double y;
};

double R;
Point p1, p2;

double distSquare(double x1, double y1, double x2, double y2)
{
     double dist = 0;
     dist = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
     return dist;
}

bool isNotIn(double R, double x1, double y1, double x2, double y2)
{
     double dist = distSquare(x1, y1, x2, y2);
     if (dist >= R * R)
          return true;
     else
          return false;
}

struct Line
{
     double k;
     double b;
};

Line p1p2, staright;

Line getLine(Point p1, Point p2)
{
     Line line;
     if (p1.y == p2.y)
     {
          line.k = 0;
          line.b = p1.y;
     }
     else
     {
          double dx, dy;
          dx = p1.x - p2.x;
          dy = p1.y - p2.y;
          line.k = dy / dx;
          line.b = p1.y - line.k * p1.x;
     }
     
     return line;
}

int main()
{
     scanf("%lf%lf%lf%lf%lf", &R, &(p1.x), &(p1.y), &(p2.x), &(p2.y));
     Point p;
     
     
     if (isNotIn(R, p1.x, p1.y, p2.x, p2.y))
     {
          printf("%lf %lf %lf", p1.x, p1.y, R);
     }
     else if (p1.x == p2.x){
          double distP1P2 = sqrt(distSquare(p1.x, p1.y, p2.x, p2.y));
          double dist = R + distP1P2;
          double r = dist / 2;
          Point newP;
          
          newP.x = p1.x;
          
          if (p2.y < p1.y)
               newP.y = p2.y + r;
          else
               newP.y = p2.y - r;
          
          printf("%.10lf %.10lf %.10lf", newP.x, newP.y, r);
     }
     else
     {
          double r;
          Point newP;
          
          p1p2 = getLine(p1, p2);
          
          double distP1P2 = sqrt(distSquare(p1.x, p1.y, p2.x, p2.y));
          double dist = R + distP1P2;
          r = dist / 2;
          
          if (p1p2.k == 0)
          {
               newP.y = p1.y;
               if (p2.x < p1.x)
                    newP.x = p2.x + r;
               else
                    newP.x = p2.x - r;
          }
          else
          {
               double dx = r;          
               double pDist;
               
               double pDistA, pDistB;
               if (p1.x > p2.x)
               {
                    newP.x = p2.x + dx;
                    newP.y = newP.x * p1p2.k + p1p2.b;
               }
               else
               {
                    newP.x = p2.x - dx;
                    newP.y = newP.x * p1p2.k + p1p2.b;
               }
                    
               pDist = distSquare(newP.x, newP.y, p2.x, p2.y);
               
               double oldD = 0;
               double newX;
               while (fabs(pDist - r * r) > 1e-6)
               {
                    if ((pDist - r * r) > 0)
                    {
                         newX = dx - fabs(dx - oldD) / 2;
                    }
                    else
                    {
                         newX = dx + fabs(dx - oldD) / 2;
                    }
                    oldD = dx;
                    dx = newX;
                    
                    if (p1.x > p2.x)
                    {
                         newP.x = p2.x + dx;
                         newP.y = newP.x * p1p2.k + p1p2.b;
                    }
                    else
                    {
                         newP.x = p2.x - dx;
                         newP.y = newP.x * p1p2.k + p1p2.b;
                    }
                    
                    pDist = distSquare(newP.x, newP.y, p2.x, p2.y);
               }

               /*double newDist = r - distP1P2;
               double d;
               d = 4 * p1p2.k * p1p2.k * p1p2.b * p1p2.b - 4 * (1 + p1p2.k * p1p2.k) * (p1p2.b * p1p2.b - newDist * newDist);
               Point n1, n2;
               n1.x = (-2 * p1p2.k * p1p2.b - sqrt(d)) / (2 * (1 + p1p2.k * p1p2.k));
               n1.y = n1.x * p1p2.k + p1p2.b;
               n1.x = n1.x + p1.x;
               n1.y = n1.y + p1.y;
               
               n2.x = (-2 * p1p2.k * p1p2.b + sqrt(d)) / (2 * (1 + p1p2.k * p1p2.k));
               n2.y = n2.x * p1p2.k + p1p2.b;
               n2.x = n2.x + p1.x;
               n2.y = n2.y + p1.y;
               
               if (p1.y > p2.y)
               {
                    if (n2.y > n1.y)
                    {
                         newP.x = n2.x;
                         newP.y = n2.y;
                    }
                    else
                    {
                         newP.x = n1.x;
                         newP.y = n1.y;
                    }
               }
               else
               {
                    if (n2.y > n1.y)
                    {
                         newP.x = n1.x;
                         newP.y = n1.y;
                    }
                    else
                    {
                         newP.x = n2.x;
                         newP.y = n2.y;
                    }
               }*/
          }
          
          printf("%.10lf %.10lf %.10lf", newP.x, newP.y, r);
     }
     
     
     return 0;
}
