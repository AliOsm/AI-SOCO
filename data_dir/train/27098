#include <bits/stdc++.h>

using namespace std;

vector<int> used;
vector<vector<int>> g;

void dfs(int cur) {
	used[cur] = 1;
	for (auto t : g[cur]) {
		if (!used[t]) {
			cout << cur + 1 << ' ' << t + 1 << '\n';
			dfs(t);
		}
	}	
}
               
signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	#ifdef LOCAL
	assert(freopen("input.txt", "r", stdin));
	#endif

	int n;
	cin >> n;
	used.resize(n);
	g.resize(n);
	int m;
	cin >> m;
	for (int i = 0; i < m; i++) {
		int u, v;
		cin >> u >> v;
		u--;
		v--;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	int mx = -1;
	for (int i = 0; i < n; i++) {
	 	mx = max(mx, (int)g[i].size());
	}
	for (int i = 0; i < n; i++) {
	 	if ((int)g[i].size() == mx) {
	 		used[i] = 1;
	 		for (auto t : g[i]) {
	 			used[t] = 1;
	 			cout << t + 1 << ' ' << i + 1 << '\n';
	 		}
	 		for (auto t : g[i]) {
	 			dfs(t);
	 		}
	 		exit(0);
	 	}
	}
}

                                        