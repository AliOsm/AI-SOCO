#include "omp.h"
#include <iostream>
#include <iomanip>
#include <string>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <vector>
#include <cassert>
#include <fstream>
#include <algorithm>
#include <list>
#include <random>
#include <ctime>
#include <random>
#include <bitset>
#include <unordered_set>
#include <cassert>
#include <list>


using namespace std;

typedef long long ll;
typedef long double ld;


const int sze = 1e5 + 100, A = 26, k = 3e2 + 10, MOD1 = 1e9 + 7;

vector<vector<pair<int, int>>> vertices(sze);


pair<int, int> dfs1(int v, int a, int len)
{
	pair<int, int> cur = { v, len };

	for (pair<int, int> p : vertices[v])
	{
		pair<int, int> prev;

		if (p.first != a)
		{
			pair<int, int> next = dfs1(p.first, v, len + p.second);
			
			if (next.second > cur.second)
				cur = next;
		}
	}

	return cur;
}


vector<int> way;
int label = 0;


void dfs2(int v, int a, int fn)
{
	if (v == fn)
	{
		label = 1;
		way.push_back(v);
		return;
	}

	for (auto p : vertices[v])
	{
		if (p.first != a)
			dfs2(p.first, v, fn);

		if (label)
		{
			way.push_back(v);
			return;
		}
	}
}


map<pair<int, int>, int> dist;
int visit[sze];


int dfs3(int v, int len)
{
	visit[v] = 1;

	int ans = len;
	for (auto p : vertices[v])
	{
		if (!visit[p.first])
			ans = max(ans, dfs3(p.first, len + p.second));
	}

	return ans;
}


int solution(int l, int r)
{
	fill(visit, visit + sze, 0);
	for (int i = l; i <= r; ++i)
		visit[way[i]] = 1;

	int ans = 0;
	for (int i = l; i <= r; ++i)
		ans = max(ans, dfs3(way[i], 0));

	return ans;
}


int get(int k)
{
	int l = 0, r = way.size() - 1;
	int cntl = 0, cntr = 0;

	while (r - l + 1 > k)
	{
		if (cntl < cntr)
		{
			cntl += dist[{way[l], way[l + 1]}];
			l++;
		}
		else
		{
			cntr += dist[{way[r], way[r - 1]}];
			r--;
		}
	}

	int ans = solution(l, r);

	if (l)
		ans = min(ans, solution(l - 1, r - 1));

	if (r + 1 < way.size())
		ans = min(ans, solution(l + 1, r + 1));

	return ans;
}


signed main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, k;
	cin >> n >> k;
	
	for (int i = 1; i < n; ++i)
	{
		int u, v, w;
		cin >> u >> v >> w;
		vertices[u].push_back({ v, w });
		vertices[v].push_back({ u, w });
		dist[{u, v}] = dist[{v, u}] = w;
	}

	int st = dfs1(1, -1, 0).first;
	int fn = dfs1(st, -1, 0).first;
	dfs2(st, -1, fn);

	cout << get(k);

	return 0;
}