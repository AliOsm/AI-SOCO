#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

ll read_long() {
    ll ans = 0;
    char c;
    bool started = false;
    bool is_negative = false;
    while (true) {
        c = getchar();
        if ((c < '0' || c > '9') && c != '-' && !started) continue;
        if ((c < '0' || c > '9') && c != '-' && started) break;
        if (started) {
            ans = ans * 10;
        }
        started = true;
        if (c == '-') is_negative = true;
        else ans += c - '0';
    }
    if (is_negative) ans *= -1;
    return ans;
}

int n = 16;
int x[100];
vector<int> a, b;

bool is_prime(int val) {
    if (val == 1) return false;
    for (int i = 2; i * i <= val; i++) {
        if (val % i == 0) return false;
    }
    return true;
}

void go(int ind, ll cur, vector<int> &v, set<ll> &s) {
    if (ind == v.size()) {
        s.insert(cur);
        return;
    }
    // cur * a[ind] <= (ll)1e18
    go(ind + 1, cur, v, s);
    if (cur <= (ll)1e18 / v[ind]) {
        go(ind, cur * v[ind], v, s);
    }
}

bool cmp(ll x, ll y, ll z) {
    // x * y > z
    if (x <= z / y) return false;
    return true;
}

ll get_cnt(ll value, vector<ll> &a, vector<ll> &b) {
    ll ans = 0;
    int j = sz(b) - 1;
    for (int i = 0; i < a.size(); i++) {
        while (j >= 0 && cmp(a[i], b[j], value)) j--;
        ans += j + 1;
    }
    return ans;
}

int main(){

    cin >> n;

    int cur = 2;
    for (int i = 0; i < n; i++) {
        while (!is_prime(cur)) cur++;
        x[i] = cur++;
        cin >> x[i];
    }

    ll k;
    cin >> k;

    sort(x, x + n);
    for (int i = 0; i < n; i++) {
        if (i % 2 == 0) a.pb(x[i]);
        else b.pb(x[i]);
    }

    set<ll> sa, sb;

    go(0, 1ll, a, sa);
    go(0, 1ll, b, sb);

    vector<ll> va, vb;

    forit (it, sa) va.pb(*it);
    forit (it, sb) vb.pb(*it);

    ll l = 1, r = (ll)1e18;
    ll best = r;

    while (l <= r) {
        ll mid = (l + r) >> 1;
        ll cnt = get_cnt(mid, va, vb);
        if (cnt >= k) {
            best = mid;
            r = mid - 1;
        } else l = mid + 1;
    }

    printf("%lld\n", best);

    return 0;
}
