#include <bits/stdc++.h>
using namespace std;

// Template Headers {{{
using pii = pair<int, int>; using vpii = vector<pii>;
using vi = vector<int>; using vvi = vector<vi>;
using ll = long long; using vll = vector<long long>;
template <class T> using min_queue = priority_queue<T, vector<T>, greater<T>>;
template <class T> istream &operator>>(istream &, vector<T> &);
template <class T> ostream &operator<<(ostream &, const vector<T> &);
template <class T, class U> istream &operator>>(istream &, pair<T, U> &);
template <class T, class U> ostream &operator<<(ostream &, const pair<T, U> &);
template <class T> struct Inf { static constexpr T inf() { return std::numeric_limits<T>::has_infinity ? std::numeric_limits<T>::infinity() : std::numeric_limits<T>::max(); } };
template <> struct Inf<int> { static constexpr int inf() { return 0x3f3f3f3f; } };
template <> struct Inf<long long> { static constexpr long long inf() { return 0x3f3f3f3f3f3f3f3fLL; } };
constexpr int INF = Inf<int>::inf(); constexpr ll BINF = Inf<ll>::inf();
// mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
// }}}

int solve() {
	int n, m, k; cin >> n >> m >> k;
	if (k > 4 * n * m - 2 * n - 2 * m) return cout << "NO" << endl, 0;
	vector<pair<int, string>> build;
	build.emplace_back(m - 1, "R");
	build.emplace_back(m - 1, "L");
	for (int i = 1; i < n; i++) {
		build.emplace_back(1, "D");
		build.emplace_back(m - 1, "R");
		build.emplace_back(m - 1, "UDL");
	}
	build.emplace_back(n - 1, "U");
	vector<pair<int, string>> build2;
	for (auto [cnt, step] : build) {
		if (k <= 0) break;
		if (cnt == 0) continue;
		int sz = step.size();
		if (k >= cnt * sz) {
			build2.emplace_back(cnt, step);
			k -= cnt * sz;
		} else {
			if (k / sz != 0) build2.emplace_back(k / sz, step);
			if (k % sz != 0) build2.emplace_back(1, step.substr(0, k % sz));
			k = 0;
		}
	}
	assert(k == 0);
	cout << "YES" << endl;
	cout << build2.size() << endl;
	for (auto [cnt, step] : build2) cout << cnt << ' ' << step << endl;
	return 0;
}

// Template Main {{{
int main() {
	ios::sync_with_stdio(0);
	// precompute();
	// int t; cin >> t; for (int i=1;i<=t;i++)
	solve();
	// cout << "Case #" << i << ": ", solve();
	return 0;
}

template <class T> istream &operator>>(istream &is, vector<T> &v) {
	for (auto it=v.begin();it!=v.end();++it) is >> *it;
	return is;
}

template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
	for (auto it=v.begin();it!=v.end();) os << *it, os << " \n"[++it==v.end()];
	return os;
}

template <class T, class U> istream &operator>>(istream &is, pair<T, U> &p) {
	return is >> p.first >> p.second;
}

template <class T, class U> ostream &operator<<(ostream &os, const pair<T, U> &p) {
	return os << p.first << ' ' << p.second;
}
// }}}

// vim: fdm=marker
