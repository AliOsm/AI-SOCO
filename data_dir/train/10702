#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#define P_B push_back
#define M_P make_pair
#define F first
#define S second
#define size(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define FR(i, a, b) for(int i = a; i < b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define mod (1000 * 1000 * 1000 + 7)
#define fast ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
using namespace std;

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <ll, ll> pll;

const int MAXN = 2000 * 1000 + 10;
ll a[MAXN], t[2][50];
int n;

vector <int> f(int s, int e, int p)
{
	if(p == 0)
	{
		t[0][p] = t[1][p] = 0;
		return vector <int> (1, a[s]);
	}
	int m = (s + e)/ 2;
	vector <int> x = f(s, m, p - 1), y = f(m, e, p - 1), z;
	int i = 0, j = 0;
	ll k1 = 0, k2 = 0;
	while(i < size(x) && j < size(y))
		if(x[i] < y[j]) z.P_B(x[i]), i++, k2 += (size(y) - j);
		else if(y[j] < x[i]) z.P_B(y[j]), j++, k1 += (size(x) - i);
		else {
			int k = x[i];
			int u = i, v = j;
			while(u < size(x) && x[u] == k)
				z.P_B(x[u]), u++;
			while(v < size(y) && y[v] == k)
				z.P_B(y[v]), v++;
			k1 += 1LL * (v - j) * (size(x) - u);
			k2 += 1LL * (u - i) * (size(y) - v);
			i = u, j = v;
		}
	while(i < size(x)) z.P_B(x[i]), i++;
	while(j < size(y)) z.P_B(y[j]), j++;

	t[0][p] += k1;
	t[1][p] += k2;
	return z;	
}

int main()
{
	ios::sync_with_stdio(false);
	cin>> n;
	FR(i, 0, (1 << n))
		cin>> a[i];
	f(0, (1 << n), n);
	int m;
	cin>> m;
	while(m--)
	{
		int k;
		cin>> k;
		ll sum = 0;
		FR(i, 0, k + 1)
			swap(t[0][i], t[1][i]);
		FR(i, 0, n + 1)
			sum += t[0][i];
		cout<< sum  << endl;
	}
	return 0;
}
