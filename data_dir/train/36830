#include <bits/stdc++.h>
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
#define pb push_back
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define endl '\n'
#define TIME 1.0*clock()/CLOCKS_PER_SEC
#define pii pair < int , int >
#define Endl '\n'
 
#pragma GCC optimize("Ofast")
 
using namespace std;
using namespace __gnu_pbds;
 
template <typename T> using ordered_set = tree <T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
 
mt19937 gen(chrono::system_clock::now().time_since_epoch().count());
 
const ll mod = 1e9 + 7;
const int FFTM = 998244353;
const int N = 300000;
 
const int SX[4] = {0 , 1 , -1 , 0};
const int SY[4] = {1 , 0 , 0 , -1};
const int rx[8] = {1, -1, 0, 0, 1, 1, -1, -1};
const int ry[8] = {0, 0, 1, -1, 1, -1, 1, -1};
const int kx[8] = {1, 1, -1, -1, 2, 2, -2, -2};
const int ky[8] = {2, -2, 2, -2, 1, -1, 1, -1};
 
ll now = 0;
ll p;
 
priority_queue < pair < ll, int > > q;
vector < ll > ans;
vector < ll > a;
 
queue < int > tech;
 
set < int > rezerv;
 
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
#endif
    int n;
    cin >> n >> p;
    a.resize(n);
    ans.resize(n);
    for (int i = 0;i < n; ++i){
        cin >> a[i];
        q.push({-a[i], -i});
    }
    for (int i = 0;i < n; ++i){
        if (rezerv.size() == 0 && tech.size() == 0)now = -q.top().F;
        now += p;
        while(!q.empty() && -q.top().F <= now){
            if (tech.size() == 0 || -q.top().S < tech.back())tech.push(-q.top().S);
            else rezerv.insert(-q.top().S);
            q.pop();
        }
        ans[tech.front()] = now;
        tech.pop();
        if (tech.size() == 0 && rezerv.size() > 0){
            tech.push(*rezerv.begin());
            rezerv.erase(rezerv.begin());
        }
    }
    for (int i = 0;i < n; ++i)cout << ans[i] << " ";
    return 0;
}