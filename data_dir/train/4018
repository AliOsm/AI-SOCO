//#pragma GCC optimize("Ofast")
//#pragma GCC target("avx,avx2,fma")
#include <bits/stdc++.h>
#define all(x) std::begin(x), std::end(x)
#define isz(x) (int)std::size(x)
#define io_sync_off std::ios_base::sync_with_stdio(0); std::cin.tie(0)
// Debug defines:
#define watch(x) std::cerr << std::setw(12) << #x << " = " << std::setw(12) << x
#define watchln(x) watch(x) << std::endl
#define watchsp(x) watch(x) << " "
#define cerr cerr && debug && std::cerr
const int debug = 0;
namespace std {
    // 2D arrays:
    template<typename T, int N, int M> auto size(const T (&a)[N][M]) { return N * M; }
    template<typename T, int N, int M> auto begin(T (&a)[N][M]) { return &a[0][0]; }
    template<typename T, int N, int M> auto end(T (&a)[N][M]) { return &a[0][0] + N * M; }
    // Algorithms:
    template<typename C> void reuniq(C& c) { c.erase(unique(c), end(c)); }
    template<typename C, typename X> int lowpos(C& c, X& x) {
        return int(lower_bound(all(c), x) - begin(c));
    }
    template<typename X, typename Y> X& remin(X& x, Y& y) { return x = (y < x) ? y : x; }
    template<typename X, typename Y> X& remax(X& x, Y& y) { return x = (x < y) ? y : x; }
}
// Input:
template<typename T>
std::istream& operator>>(std::istream& is, std::vector<T>& vec) {
    for (auto &it : vec) is >> it;
    return is;
}
// Output:
template<typename T>
std::ostream& operator<<(std::ostream& os, std::vector<T>& vec) {
    for (auto it = vec.begin(); it != vec.end(); it++) {
        if (it != vec.begin()) {
            os << ", ";
        }
        os << *it;
    }
    return os;
}
typedef unsigned long long ull;
typedef long long ll;
typedef long double ld;
typedef std::vector<int> vi;
typedef std::vector<ll> vl;
typedef std::vector<vi> vvi;
typedef std::vector<vl> vvl;
typedef std::pair<int,int> pii;
typedef std::pair<int,ll> pil;
typedef std::pair<ll,int> pli;
typedef std::pair<ll,ll> pll;
// -----------------------------------------------------------------------------
int main() {
    io_sync_off;
    int t; std::cin >> t;
    while (t--) {
        int n, x; std::cin >> n >> x;
        std::cout << 2 * x << '\n';
    }
    return 0;
}