#include <bits/stdc++.h>
#define REP(i, n) for (long long i = 0; i < n; i++)
using namespace std;
typedef long long Long;

const Long N=200011;

set< pair<Long,Long> > s;
bool used[N];
set< Long > quedan;

Long dfs(Long u, Long n){
	Long ans = 0;
	used[u] = true;
	quedan.erase(u);
	set<Long> :: iterator v;
	set< pair<Long,Long> > :: iterator it;
	v = quedan.begin();
	while(v != quedan.end()){
		it = s.find(make_pair(min(u,*v),max(u,*v)));
		if(!used[*v] && it == s.end()){
			ans += dfs(*v,n);
			v = quedan.begin();
		}else{
			v++;
		}
	}
	ans++;
	return ans;
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.precision(10);
    cout << fixed;
    
    Long n, m, x, y;
    cin >> n >> m;
    for(Long i = 0; i < m; i++){
    	cin >> x >> y;
    	s.insert(make_pair(min(x,y),max(x,y)));
	}
	for(Long i = 1; i <= n; i++){
		quedan.insert(i);
	}
	vector<Long> ans;
	for(Long i = 1; i <= n; i++){
		if(!used[i]){
			ans.push_back(dfs(i,n));
		}
	}
	sort(ans.begin(),ans.end());
	cout << ans.size() << endl;
	for(Long i = 0; i < ans.size(); i++){
		cout << ans[i] << " ";
	}
	cout << endl;
	return 0;
}
