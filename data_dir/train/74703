#include <bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
// #include <boost/multiprecision/cpp_int.hpp> 

#define gc getchar//_unlocked
#define pc putchar//_unlocked
#define ll long long
#define ld long double
#define pb push_back
#define mp make_pair
#define pp pair<int,int>
#define ppl pair<ll,ll>
#define bigint boost::multiprecision::cpp_int
#define finp ios_base::sync_with_stdio(0);cin.tie(0);
#define bc __builtin_popcountll
#define afor(i,a,b) for(int i=a;i<=b;++i)
#define bfor(i,a,b) for(int i=a;i>=b;--i)
#define vi vector<int>
#define vpp vector<pp>
#define vll vector<ll>
#define fr first
#define se second

using namespace std;
using namespace __gnu_pbds;

char putnb[20];
void putn(ll n) {if(!n)pc('0');if(n<0)pc('-'),n=0-n;int pi=0;while(n)putnb[pi++]=(n%10)+'0',n/=10;while(pi)pc(putnb[--pi]);}
void sci(int *x) {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x = (int)((((*x)<<1) + ((*x)<<3)) + c - 48);}
void scll(ll *x)  {register char c = gc();*x = 0;for(; (c<48)||(c>57);c = gc());for(; (c>47)&&(c<58);c = gc())*x =  (ll)((((*x)<<1) + ((*x)<<3)) + c - 48);}
ll fp(ll a,ll b,ll c) {if(b==0)return 1%c; if(b==1)return a%c; ll ret=fp(a,b/2,c); ret=(ret*ret)%c; if(b&1)ret=(ret*a)%c; return ret;}

const ll mod=998244353;
const ll mod2=1999999973;
const ll inf=1e18;
const int infs=1e9 + 1000;
const int N=200000;
const long double PI = acos(-1);

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

ll n,k;
ll a[N + 5];
ll dp[N + 5];
ll pre[N + 5];
ll F[N + 5];
ll F2[N + 5];
ll pw[N + 5];
ll pw2[N+5];
int main()
{
  finp;
  cin>>n>>k;

  F[0] = 1;
  F2[0] = 0;
  pw[0] = 1;
  pw2[0] = 1;

  afor(i,1,N)
  {
    pw[i]= (pw[i-1] * k)%mod;
    pw2[i]= (pw2[i-1] * (k-1))%mod;
    F[i] = F[i-1];
    F2[i] = F2[i-1];

    if(i & 1)
    {
      F[i]+= mod - pw2[i];
      F2[i]+= mod - pw2[i];

    }
    else
    {
      F[i]+= pw2[i]; 
      F2[i]+= pw2[i]; 
    }
    F[i]%= mod;
    F2[i]%= mod;
  }

  afor(i,1,n)cin>>a[i];

 

  pre[1] = -1;
  pre[2] = 0;

  if(a[1] == -1)dp[1] = k;
  else dp[1] = 1,pre[1] = 1;

  if(a[2] == -1)dp[2] = k;
  else dp[2] = 1,pre[2] = 2;

  afor(i,3,n)
  {
   // if(a[i]!=-1 && a[i-2]==a[i])dp[i] = 0;
    
    if(a[i] != -1)
    {
      int las = pre[i - 2];
      int len = ((i - las)/2) - 1;
      assert(len >= 0);
      if(las <= 0)dp[i] = pw2[len];
      else if(a[las] == a[i])
      {
        dp[i] = dp[las];
        ll curr;
        if(len%2 == 1)curr = mod - F2[len];
        else curr = F2[len];
        dp[i]*= curr;
        dp[i]%= mod;
      }
      else
      {
        dp[i] = dp[las];
        ll curr;
        if(len%2 == 1)curr = mod - F[len];
        else curr = F[len];
        dp[i]*= curr;
        dp[i]%= mod;
      }
      pre[i] = i;
    }
    else
    { 
      int las = pre[i-2];
      int len = (i - las)/2;
      
      if(las >= 1)dp[i] = (dp[las] * pw2[len])%mod;
      else dp[i] = (k * pw2[len-1])%mod;


      pre[i] = las;
    }
  }

//cout<<dp[n-1]<<" "<<dp[n];

  cout<<(dp[n] * dp[n-1])%mod;
  
return 0;
}