#include "bits/stdc++.h"
using namespace std;
# define x first
# define y second
# define pii pair < int , int >
# define mp make_pair
# define vii vector < pii >
# define pb push_back
char v[64][64];
char s[64][64];
vii ans;
void dfs(int xx,int yy)
{
    if (s[xx + 1][yy] == 'U')//it isn't possible so we should look into (x + 1,y + 1)
    {
        if (s[xx + 1][yy + 1] == 'L')//recursion
            dfs(xx + 1,yy + 1);
        ans.pb(mp(xx + 1,yy));
        s[xx + 1][yy] = 'L';
        s[xx + 1][yy + 1] = 'R';
        s[xx + 2][yy] = 'L';
        s[xx + 2][yy + 1] = 'R';
    }
    ans.pb(mp(xx,yy));//it becomes possible to invert and redirect
    s[xx][yy] = 'U';
    s[xx][yy + 1] = 'U';
    s[xx + 1][yy] = 'D';
    s[xx + 1][yy + 1] = 'D';
}
void dfs1(int xx,int yy)
{
    if (s[xx][yy+1] == 'L')//it isn't possible so we should look into (x + 1,y + 1)
    {
        if (s[xx + 1][yy + 1] == 'U')//recursion
            dfs1(xx + 1,yy + 1);
        ans.pb(mp(xx,yy+1));
        s[xx][yy + 1] = 'U';
        s[xx][yy + 2] = 'U';
        s[xx + 1][yy + 1] = 'D';
        s[xx + 1][yy + 2] = 'D';
    }
    ans.pb(mp(xx,yy));//it becomes possible to invert and redirect
    s[xx][yy] = 'L';
    s[xx][yy + 1] = 'R';
    s[xx + 1][yy] = 'L';
    s[xx + 1][yy + 1] = 'R';
}
int main(void)
{
    int n,m;
    cin>>n>>m;
    int was = 0;
    for (int cs = 0;cs < 2;++cs)
    {
        was = ans.size();
        for (int i = 1;i <= n;++i)cin>>(s[i] + 1);
        if(n%2==0)
        {
         	for (int i = 1;i < n;++i)
        		for (int j = 1;j < m;++j)
            		if (s[i][j] == 'L')
                		dfs(i,j);    
        }
        else
        {
            for (int i = 1;i < n;++i)
            	for (int j = 1;j < m;++j)
                	if (s[i][j] == 'U')
                    	dfs1(i,j);  
        }
      /*if(!cs)
      {
           for(int i=1;i<=n;i++)
           {
                for(int j=1;j<=m;j++)cout<<s[i][j];
                cout<<endl;
           }
      }*/
    }
    cout << (ans.size()) << '\n';
    for (int i = 0;i < was;++i)//from initial matrix into I
        cout << ans[i].x << ' ' << ans[i].y << '\n';
    for (int i = ans.size() - 1;i >= was;--i)//from I to final matrix
        cout << ans[i].x << ' ' << ans[i].y << '\n';
    return 0;
}
