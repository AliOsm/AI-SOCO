#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/detail/standard_policies.hpp>
#include <ext/rope>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define long long long 

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
        //use cerr if u want to display at the bottom
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef trie<string,null_type,trie_string_access_traits<>,pat_trie_tag,trie_prefix_search_node_update> pref_trie;
typedef tree<long int,null_type,less<long int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;
typedef cc_hash_table<long int,long int, hash<long int>, equal_to<long int>, direct_mask_range_hashing<long int>, 
hash_standard_resize_policy<hash_exponential_size_policy<>, hash_load_check_resize_trigger<true>, true>> ht;
typedef gp_hash_table<long int,long int> HashTable;

vector<long int> anyLeaf,ans;
long int n;
vector<vector<pair<long int,long int>>> g;

bool DFS(long int idx,long int par){
	
	bool foundLeaf = false;
	
	for(auto ele : g[idx]){
		if(ele.first == par)
			continue;

		bool childWithLeaf = DFS(ele.first,idx);
		if(ele.second && !childWithLeaf){
			childWithLeaf = true;
			ans.push_back(anyLeaf[ele.first]);
		}

		foundLeaf |= childWithLeaf;
	}

	return foundLeaf;
}

void DFS2(long int idx, long int par, list<long int> &l){
	l.push_back(idx);

	if(g[idx].size() == 1){
		while(l.size()){
			anyLeaf[l.back()] = idx;
			l.pop_back();
		}
	}

	for(auto ele : g[idx]){
		if(ele.first == par)
			continue;
		DFS2(ele.first,idx,l);
	}
}


int main(){
   IOS;
 /*    #ifndef ONLINE_JUDGE
         freopen("in.txt",  "r",  stdin);
         freopen("out.txt", "w", stdout);
     #endif */
   cin>>n;

   g.resize(n);
   anyLeaf.resize(n);

   for(long int i = 1; i < n; i++){
      long int a,b,w;
      cin>>a>>b>>w;	
      w--;
      g[a - 1].push_back({b - 1,w});
      g[b - 1].push_back({a - 1, w});
   }

   list<long int> l;
   DFS2(0,0,l);
   DFS(0,0);

   cout<<ans.size()<<endl;
   for(auto ele : ans)
   	cout<<ele + 1<<" ";

   return 0;
}