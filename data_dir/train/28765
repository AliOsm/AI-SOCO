		//			- -- --- ---- -----be name khoda----- ---- --- -- -			\\

#include <bits/stdc++.h>

using namespace std;

const int N = 200002;

int n, m, ez, mark[N], in[N];
vector <int> g[N], ord;
vector <pair<int, int>> a;

int dfs(int v)
{
	mark[v] = 1;
	for(auto u : g[v])
		if(mark[u] == 1 || (!mark[u] && dfs(u)))
			return 1;
	ord.push_back(v);
	mark[v] = 2;
	return 0;
}

inline void addEdge(int v, int u)
{
	in[u]++;
	g[v].push_back(u);
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m;
	ez = m - 1;
	for(int i = 0; i < n; i++)
	{
		a.clear();
		for(int j = 0; j < m; j++)
		{
			int x;
			cin >> x;
			if(x != -1)
				a.push_back(make_pair(x, j));
		}
		sort(a.begin(), a.end());
		for(int i = 0; i < a.size(); i++)
		{
			if(!i || a[i].first != a[i - 1].first)
				ez++;
			addEdge(ez, a[i].second);
			addEdge(a[i].second, ez + 1);
		}
		ez++;
	}

	for(int i = 0; i <= ez; i++)
	{
		sort(g[i].begin(), g[i].end());
		g[i].resize(unique(g[i].begin(), g[i].end()) - g[i].begin());
	}

	bool could = 0;
	for(int i = 0; i <= ez; i++)
		if(!in[i])
			could |= dfs(i);
	if(could)
		cout << -1;
	else while(ord.size())
	{
		if(ord.back() < m)
			cout << ord.back() + 1 << " ";
		ord.pop_back();
	}
	cout << endl;
}
