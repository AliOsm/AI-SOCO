#include <iostream>
#include <vector>
#include <algorithm>
#include <memory>
#include <map>
#include <unordered_map>
#include <set>
#include <queue>
#include <unordered_set>
#include <functional>
#include <climits>
#include <cstring>
#include <cmath>
#include <numeric>
#include <random>
#include <tuple>
#include <chrono>

using namespace std;
using ll = long long;
using ull = unsigned long long;
mt19937 rnd(std::chrono::steady_clock::now().time_since_epoch().count());

const ll MOD = static_cast<ll>(1e9) + 7;
const int N = 100010;
vector<int> g[N];

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int n;
  cin >> n;
  vector<int> a(n);
  for(int i = 0; i < n; ++i) {
    cin >> a[i];
  }

  for(int i = 0; i < n; ++i) {
    for(int j = 1; j * j <= a[i]; ++j) {
      if (a[i] % j == 0) {
        if (j <= n) {
          g[j].emplace_back(i);
        }
        if (j != a[i] / j && a[i] / j <= n) {
          g[a[i] / j].emplace_back(i);
        }
      }
    }
  }

  for(int i = 1; i <= n; ++i) {
    sort(g[i].begin(), g[i].end());
  }

  // for(int i = 1; i <= n; ++i) {
  //   cout << i << " -> ";
  //   for(int j : g[i]) {
  //     cout << j << " ";
  //   }
  //   cout << endl;
  // }

  vector<ll> dp[2];
  for(int i = 0; i < 2; ++i) dp[i].resize(n);
  for(int i = 0; i < n; ++i) dp[0][i] = i + 1;
  int x = 1;
  ll ret = dp[0][n - 1];
  for(int i = 2; i <= n; ++i, x ^= 1) {
    int lo = 0;
    if (g[i].size() == 0) break;
    for(int j = 0; j < (int)g[i].size(); ++j) {
      dp[x][j] = 0;
      if (j > 0) {
        dp[x][j] = dp[x][j - 1];
      }
      // cout << "j = " << j << " g = "<< g[i][j] + 1 << ", i = " << i << endl;
      if (g[i][j] + 1 < i) continue;

      while(lo < (int)g[i - 1].size() && g[i - 1][lo] < g[i][j]) {
        ++lo;
      }
      // cout << "lo = " << lo << endl;
      if (lo > 0) {
        dp[x][j] += dp[1 - x][lo - 1];
        if (dp[x][j] >= MOD) {
          dp[x][j] -= MOD;
        }
      }
    }

    // for(int i = 0; i < n; ++i) {
    //   cout << i << " -> " << dp[x][i] << ";";
    // }
    // cout << endl;
    auto m = g[i].size() - 1;
    // cout << "i = " << i << " ans = " << dp[x][m] << endl;
    ret += dp[x][m];
    if (ret >= MOD) {
      ret -= MOD;
    }
    // cout << endl;
  }

  cout << ret << endl;
  return 0;
}
