#include <bits/stdc++.h>
using namespace std;
typedef long long int64;
typedef complex<long double> cmplx;
const long double pi = 3.14159265358979323846;
const int inf = (int)2e+9 + 2;
const int mod = 1'000'000'007;//998244353;
const long double eps = 1e-8;
const int N = 100'000;

int n, m, k;
int a[N], b[N], dq[N];
int64 d[N];

double x(int i, int j)
{
  return 1. * (d[j] - d[i]) / (b[i] - b[j]);
}

void solve(int test)
{
  cin >> n;
  for (int i = 0; i < n; ++i)
    cin >> a[i];
  for (int i = 0; i < n; ++i)
    cin >> b[i];
  int l = 0, r = 1;
  for (int i = 1; i < n; ++i) {
    while (r - l > 1 && x(dq[l], dq[l + 1]) <= a[i])
      ++l;
    d[i] = d[dq[l]] + a[i] * 1ll * b[dq[l]];
    while (r - l > 1 && x(dq[r - 2], dq[r - 1]) >= x(dq[r - 1], i))
      --r;
    dq[r++] = i;
  }
  cout << d[n - 1];
}

void precalc()
{
}

int main()
{
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  for (int i = 1; i <= test; ++i)
      solve(i);
  return 0;
}
