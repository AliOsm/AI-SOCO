#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
struct trie{
	int nxt[26];
	bool can;
	trie(){memset(nxt,-1,sizeof nxt);can = 0;}
}tree[20*N];
priority_queue<int>q[20*N];
int n,rem = 1;
vector<string>s;
char c[N];
string lol;
void add(){
	int cur = 0;
	for(auto i : lol){
		if(tree[cur].nxt[i - 'a'] == -1)tree[cur].nxt[i - 'a'] = rem++;
		cur = tree[cur].nxt[i - 'a'];
	}
	tree[cur].can = 1;
}
void find(int u,int depth){
	for(int i = 0;i < 26;i++)
		if(tree[u].nxt[i] != -1){
			int x = tree[u].nxt[i];
			find(x,depth + 1);
			if(q[u].size() < q[x].size())swap(q[u],q[x]);
			while(q[x].size())q[u].push(q[x].top()),q[x].pop();
		}
	if(tree[u].can)q[u].push(depth);
	else q[u].pop(),q[u].push(depth);
}
int main() {
// 	freopen("input.txt","r",stdin);
	scanf("%d",&n);	
	for(int i = 0;i < n;i++){
		scanf(" %s",c);
		s.push_back(c);
		lol = c;
		add();
	}
	tree[0].can = 1;
	int ans = 0;
	find(0,0);
	while(q[0].size()){
		ans+=q[0].top();
		q[0].pop();
	}
	printf("%d\n",ans);
}