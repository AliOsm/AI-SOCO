#include <bits/stdc++.h>
#include <ctime>
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")

using namespace std;

#define space ' '
#define enter "\n"
#define fi first
#define se second
#define mp make_pair
#define ALL(x) x.begin(), x.end()

typedef long long ll;
typedef unsigned int uint;
typedef unsigned long long ull;
typedef pair <int, int> pii;
typedef set <int> si;
typedef map <int, int> mii;
typedef pair <ll, ll> pll;
typedef vector <int> vi;
typedef vector <pii> vii;
typedef long double ld;

template <class T>
T sqr (T x) {
	return x * x;
}

template <class T>
T gcd (T a, T b) {
	return b ? gcd(b, a % b) : a;
}

template <class T1, class T2>
T1 chmin (T1 & x, const T2 & y) {
	if (T1(y) < x)
		return x = y;
	return x;
}

template <class T1, class T2>
T1 chmax (T1 & x, const T2 & y) {
	if (T1(y) > x)
		return x = y;
	return x;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const pair <T1, T2> & p) {
	return os << '(' << p.fi << ", " << p.se << ')';
}

template <class T>
ostream & operator << (ostream & os, const vector <T> & v) {
	os << '{';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '}';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const set <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T>
ostream & operator << (ostream & os, const multiset <T> & v) {
	os << '[';
	bool was = false;
	for (const T & x : v) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << ']';
	return os;
}

template <class T1, class T2>
ostream & operator << (ostream & os, const map <T1, T2> & m) {
	os << '<';
	bool was = false;
	for (const auto & x : m) {
		if (was)
			os << ", ";
		was = true;
		os << x;
	}
	os << '>';
	return os;
}

const double EPS = 1e-8;
const int INF = (int) 2e9;
const ll LINF = (ll) 2e18;
const int MOD = (int) 1e9 + 7;
const int MAXN = (int) 1e5 + 10;

auto fooST = [] (int x, int y) { return max(x, y); };

struct SegmentTree {
	int value;
	SegmentTree *l, *r;

	inline SegmentTree () : value(-1), l(NULL), r(NULL) {}

	inline SegmentTree (int x) : value(x), l(NULL), r(NULL) {}

	inline void build (int l, int r) {
		if (l == r) {
			return;
		}
		int md = (l + r) >> 1;
		this->l = new SegmentTree();
		this->r = new SegmentTree();
		this->l->build(l, md);
		this->r->build(md + 1, r);
	}

	int get (int l, int r, int tl, int tr) {
		if (r < tl || l > tr)
			return -1;
		if (tl <= l && r <= tr)
			return this->value;
		int md = (l + r) >> 1;
		return fooST(this->l->get(l, md, tl, tr), this->r->get(md + 1, r, tl, tr));
	}

	int get (int l, int r, int pos) {
		if (l == r)
			return this->value;
		int md = (l + r) >> 1;
		if (pos <= md)
			return fooST(this->l->get(l, md, pos), this->r->value);
		return fooST(this->l->value, this->r->get(md + 1, r, pos));
	}

	int upd (int l, int r, int pos, int val) {
		if (l == r) {
			return this->value = val;
		}
		int md = (l + r) >> 1;
		if (pos <= md)
			return this->value = fooST(this->l->upd(l, md, pos, val), this->r->value);
		return this->value = fooST(this->l->value, this->r->upd(md + 1, r, pos, val));
	}
};

int n, c, d, bestAns, maC = -1, maD = -1;
int b[MAXN], p[MAXN];
char clr[MAXN];
vector <pii> C, D;
pair <pii, pii> x[MAXN], y[MAXN];

int main () {
	ios_base::sync_with_stdio(false);
	cin >> n >> c >> d;
	for (int i = 1; i <= n; i++) {
		cin >> b[i] >> p[i] >> clr[i];
		if (clr[i] == 'C' && p[i] <= c)
			C.push_back(pii(p[i], b[i])), chmax(maC, b[i]);
		if (clr[i] == 'D' && p[i] <= d)
			D.push_back(pii(p[i], b[i])), chmax(maD, b[i]);
	}

	for (int i = 0; i <= 100000; i++)
		x[i] = y[i] = mp(pii(-1, -1), pii(-1, -1));

	for (int i = 0; i < C.size(); i++) {
		int iter = i + 1;
		pii xx[3];
		xx[0] = x[C[i].fi].fi, xx[1] = x[C[i].fi].se, xx[2] = pii(C[i].se, i);
		sort(xx, xx + 3);
		x[C[i].fi] = mp(xx[1], xx[2]);
	}

	for (int i = 0; i < D.size(); i++) {
		int iter = i + 1;
		pii yy[3];
		yy[0] = y[D[i].fi].fi, yy[1] = y[D[i].fi].se, yy[2] = pii(D[i].se, i);
		sort(yy, yy + 3);
		y[D[i].fi] = mp(yy[1], yy[2]);
	}

	for (int i = 1; i <= 100000; i++) {
		pii xx[4];
		xx[0] = x[i - 1].fi, xx[1] = x[i - 1].se, xx[2] = x[i].fi, xx[3] = x[i].se;
		sort(xx, xx + 4);
		x[i] = mp(xx[2], xx[3]);

		pii yy[4];
		yy[0] = y[i - 1].fi, yy[1] = y[i - 1].se, yy[2] = y[i].fi, yy[3] = y[i].se;
		sort(yy, yy + 4);
		y[i] = mp(yy[2], yy[3]);
	}

	for (int i = 0; i < C.size(); i++) {
		pii xx = pii(C[i].se, i), yy;
		if (x[c - C[i].fi].se.se != i) {
			yy = x[c - C[i].fi].se;
		}
		else {
			yy = x[c - C[i].fi].fi;
		}
		if (yy.se == -1)
			continue;
		chmax(bestAns, xx.fi + yy.fi);
	}
	for (int i = 0; i < D.size(); i++) {
		pii xx = pii(D[i].se, i), yy;
		if (y[d - D[i].fi].se.se != i) {
			yy = y[d - D[i].fi].se;
		}
		else {
			yy = y[d - D[i].fi].fi;
		}
		if (yy.se == -1)
			continue;
		chmax(bestAns, xx.fi + yy.fi);
	}
	if (maC != -1 && maD != -1)
		chmax(bestAns, maC + maD);
	cout << bestAns;
}