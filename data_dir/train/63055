#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	int n, k;
	cin >> n >> k;
	
	vector<int> v(n + 1);
	for(int i = 1; i <= n; i++)
		cin >> v[i];
	
	set<pii> S;
	set<int> P;
	
	vector<int> ans(n + 1);
	
	for(int i = 1; i <= n; i++){
		S.insert({v[i], i});
		P.insert(i);
	}
	
	int itt = 0;
	
	while(!S.empty()){
		auto x = *(S.rbegin());
		auto fix = P.find(x.second);
		auto it = fix;
		
		vector<int> pos;
		
		pos.push_back(*(it));
		
		if(it != P.begin()){
			int c = 0;
			while(c < k && it != P.begin()){
				c++;
				it--;
				pos.push_back(*(it));
			}
		}
		
		it = fix;
		
		it++;
		int c = 0;
		while(c < k && it != P.end()){
			pos.push_back(*(it));
			it++;
			c++;
		}
		
		for(auto &p : pos){
			ans[p] = itt % 2 + 1;
			S.erase(S.find(pii(v[p], p)));
			P.erase(P.find(p));
		}
		
		itt++;
	}
	
	for(int i = 1; i <= n; i++)
		cout << ans[i];
	cout << endl;

	return 0;
}
