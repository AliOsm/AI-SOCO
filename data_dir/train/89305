#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

const int N = 1000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const ld eps = 1e-9;
const ld pi = atan2(0, -1);
const int ABC = 26;

string a[4];
int dp[N + 1][1 << 12];
int dp1[1 << 16];
vector<int> cost[4];

void init()
{
    cost[0] = {65534, 65533, 65531, 65527};
    cost[1] = {65484, 65433, 65331};
    cost[2] = {63624, 61713};
    cost[3] = {0};
}

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    init();
    int n;
    cin >> n;
    int a1, a2, a3, a4;
    cin >> a1 >> a2 >> a3 >> a4;
    rep(i, 0, 4)
        cin >> a[i];
    rep(i, 0, n + 1)
        rep(mask, 0, (1 << 12))
            dp[i][mask] = inf;
    dp[0][0] = 0;
    rep(i, 0, n)
    {
        rep(nm, 0, (1 << 16))
            dp1[nm] = inf;
        rep(mask, 0, (1 << 12))
        {
            if (dp[i][mask] == inf)
                continue;
            int nm = mask;
            repb(j, 3, -1)
            {
                nm <<= 1;
                if (a[j][i] == '*')
                    nm++;
            }
            dp1[nm] = min(dp1[nm], dp[i][mask]);
        }
        repb(mask, (1 << 16) - 1, -1)
        {
            if (i + 1 >= 1)
            {
                rep(j, 0, 4)
                    dp1[mask & cost[0][j]] = min(dp1[mask & cost[0][j]], dp1[mask] + a1);
            }
            if (i + 1 >= 2)
            {
                rep(j, 0, 3)
                    dp1[mask & cost[1][j]] = min(dp1[mask & cost[1][j]], dp1[mask] + a2);
            }
            if (i + 1 >= 3)
            {
                rep(j, 0, 2)
                    dp1[mask & cost[2][j]] = min(dp1[mask & cost[2][j]], dp1[mask] + a3);
            }
            if (i + 1 >= 4)
            {
                rep(j, 0, 1)
                    dp1[mask & cost[3][j]] = min(dp1[mask & cost[3][j]], dp1[mask] + a4);
            }
        }
        rep(mask, 0, (1 << 12))
            dp[i + 1][mask] = dp1[mask];
    }
    cout << dp[n][0] << "\n";
    return 0;
}
