//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <stdio.h>
#include <bits/stdc++.h>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)

using namespace std;

inline void setmin(int &x, int y) { if (y < x) x = y; }
inline void setmax(int &x, int y) { if (y > x) x = y; }
inline void setmin(ll &x, ll y) { if (y < x) x = y; }
inline void setmax(ll &x, ll y) { if (y > x) x = y; }

const int N = 100000;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    int n, L, W;
    cin >> n >> L >> W;
    vector<int> pl, pr;
    rep(i, 0, n)
    {
        int x, v;
        cin >> x >> v;
        if (v == 1)
            pl.push_back(x);
        else
            pr.push_back(x);
    }
    sort(pl.begin(), pl.end());
    sort(pr.begin(), pr.end());
    ll ans = 0;
    rep(i, 0, sz(pl))
    {
        int b = pl[i] + L;
        if (b == 0 && W == 1)
            continue;
        if (b >= 0)
        {
            int l = -1, r = sz(pr), mid;
            while (r - l > 1)
            {
                mid = (l + r) / 2;
                if (pr[mid] < pl[i])
                {
                    l = mid;
                    continue;
                }
                if (1LL * W * (pr[mid] - b + 2 * L) > (pr[mid] + b))
                    r = mid;
                else
                    l = mid;
            }
            ans += sz(pr) - r;
        }
        else
        {
            int l = -1, r = sz(pr), mid;
            while (r - l > 1)
            {
                mid = (l + r) / 2;
                if (pr[mid] < pl[i])
                {
                    l = mid;
                    continue;
                }
                if (1LL * (-W) * (pr[mid] - b + 2 * L) < (pr[mid] + b))
                    r = mid;
                else
                    l = mid;
            }
            ans += sz(pr) - r;
        }
    }
    cout << ans << "\n";
    return 0;
}
