#include <bits/stdc++.h>
using namespace std;

#define VIC ios::sync_with_stdio(0);cin.tie(0);ios_base::sync_with_stdio(0);
#define sfi(x) scanf("%d", &x)
#define sfi2(x, y) scanf("%d%d", &x,&y)
#define sfl2(x, y) scanf("%I64d%I64d", &x,&y)
#define sfl(x) scanf("%I64d", &x)
#define sfd(x) scanf("%lf", &x)
#define sfd2(x, y) scanf("%lf%lf", &x, &y)
#define sfs(x) scanf("%s", &x)
#define wtf(s) freopen((s), "w", stdout)
#define rff(s) freopen((s), "r", stdin)
#define mod 998244353
#define pi (2 * acos(0))
#define x first
typedef long double ld;
typedef long long ll;
const int N = 1e5 + 5;
//g++ -std=c++11 main.cpp && a.exe

string s, a, b, c, x, y, z;
int dp[10][10][10][3][3][3];

int solve(int p1, int p2, int p3, int carry, int xf, int yf)
{
    if (p1 == -1 && p2 == -1 && p3 == -1)
        return dp[p1 + 1][p2 + 1][p3 + 1][carry][xf][yf] = carry;
    if (dp[p1 + 1][p2 + 1][p3 + 1][carry][xf][yf] != -1)
        return dp[p1 + 1][p2 + 1][p3 + 1][carry][xf][yf];
    int ans = 1e9;
    for (int i = 0; i < (xf? 1: 10); i++)
        for (int j = 0; j < (yf? 1: 10); j++)
        {
            int res = (i + j + carry) % 10;
            if ((p1 > -1 && i == a[p1] - '0') || (p2 > -1 && j == b[p2] - '0') || (p3 > -1 && res == c[p3] - '0'))
            {
                int np1 = p1, np2 = p2, np3 = p3, ex = 3;
                if (p1 != -1 && i == a[p1] - '0')
                    np1--;
                if (p2 != -1 && j == b[p2] - '0')
                    np2--;
                if (p3 != -1 && res == c[p3] - '0')
                    np3--;
                ex -= (xf + yf);
                if (!yf && i == 0 && !xf && p1 == -1)
                    ans = min(ans, solve(np1, np2, np3, (i + j + carry) / 10, 1, 0) + ex - 1);
                if (!xf && j == 0 && !yf && p2 == -1)
                    ans = min(ans, solve(np1, np2, np3, (i + j + carry) / 10, 0, 1) + ex - 1);
                ans = min(ans, solve(np1, np2, np3, (i + j + carry) / 10, xf, yf) + ex);
            }
        }
    return dp[p1 + 1][p2 + 1][p3 + 1][carry][xf][yf] = ans;
}

void build(int p1, int p2, int p3, int carry, int xf, int yf)
{
    if (p1 == -1 && p2 == -1 && p3 == -1)
    {
        if (carry)
            z += '1';
        return;
    }
    int ans = 1e9;
    for (int i = 0; i < (xf? 1: 10); i++)
        for (int j = 0; j < (yf? 1: 10); j++)
        {
            int res = (i + j + carry) % 10;
            if ((p1 > -1 && i == a[p1] - '0') || (p2 > -1 && j == b[p2] - '0') || (p3 > -1 && res == c[p3] - '0'))
            {
                int np1 = p1, np2 = p2, np3 = p3, ex = 3;
                if (p1 != -1 && i == a[p1] - '0')
                    np1--;
                if (p2 != -1 && j == b[p2] - '0')
                    np2--;
                if (p3 != -1 && res == c[p3] - '0')
                    np3--;
                ex -= (xf + yf);
                if (!yf && i == 0 && !xf && p1 == -1)
                {
                    if (dp[p1 + 1][p2 + 1][p3 + 1][carry][xf][yf] == solve(np1, np2, np3, (i + j + carry) / 10, 1, 0) + ex - 1)
                    {
                        if (p1 != -1)
                            x += i + '0';
                        y += j + '0';
                        z += res + '0';
                        build(np1, np2, np3, (i + j + carry) / 10, 1, 0);
                        return;
                    }
                }
                if (!xf && j == 0 && !yf && p2 == -1)
                {
                    if (dp[p1 + 1][p2 + 1][p3 + 1][carry][xf][yf] == solve(np1, np2, np3, (i + j + carry) / 10, 0, 1) + ex - 1)
                    {
                        x += i + '0';
                        if (p2 != -1)
                            y += j + '0';
                        z += res + '0';
                        build(np1, np2, np3, (i + j + carry) / 10, 0, 1);
                        return;
                    }
                }
                if (dp[p1 + 1][p2 + 1][p3 + 1][carry][xf][yf] == solve(np1, np2, np3, (i + j + carry) / 10, xf, yf) + ex)
                {
                    if (!xf)
                        x += i + '0';
                    if (!yf)
                        y += j + '0';
                    z += res + '0';
                    build(np1, np2, np3, (i + j + carry) / 10, xf, yf);
                    return;
                }
            }
        }
}

int main()
{
    VIC
    memset(dp, -1, sizeof dp);
    cin >> s;
    int i = 0;
    for (; i < s.size(); i++)
        if (s[i] == '+')
            break;
        else
            a += s[i];
    for (i++; i < s.size(); i++)
        if (s[i] == '=')
            break;
        else
            b += s[i];
    for (i++; i < s.size(); i++)
        c += s[i];
    solve(a.size() - 1, b.size() - 1, c.size() - 1, 0, 0, 0);
    build(a.size() - 1, b.size() - 1, c.size() - 1, 0, 0, 0);
    reverse(x.begin(), x.end());
    reverse(y.begin(), y.end());
    reverse(z.begin(), z.end());
    cout << x << '+' << y << '=' << z;
    return 0;
}
