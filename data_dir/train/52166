#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <hash_map>
#include <hash_set>
#include <vector>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iterator>
using namespace std;
#define mems(arr, val) memset(arr, val, sizeof(arr))
#define forn(it, from, to) for(int it = from; it < to; ++it)
#define all(A) (A).begin(), A.end()
#define mp(a, b) make_pair(a, b)
#define forit(it, A) for(auto it = A.begin(); it != A.end(); it++)
typedef long long LL;
typedef pair<int, int> pii;
const LL INF = INT_MAX;
const int MAXN = 100100;
const LL MOD = 1000000007;

LL binpow (LL a, LL p)
{
	if (p == 0) return 1;
	LL tmp = binpow(a, p >> 1);
	tmp *= tmp;
	tmp %= MOD;
	if (p & 1) tmp *= a;
	tmp %= MOD;
	return tmp;
}

int main()
{
#ifdef MY_SOL
    freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
	//freopen("lights.in", "r", stdin); freopen("lights.out", "w", stdout);
#endif

	int n,k;
	cin>>n>>k;
	double T[101];
	for(int i = 1; i <= n; ++i)
		cin>>T[i];
	int c;
	cin>>c;
	int count = n / k;
	double maxi = 0;
	double mini = 9999999;
	int maxk = 0;
	forn(i, 0, c)
	{
		double sum = 0;

		forn(j, 0, count)
		{
			int tmp;
			cin>>tmp;
			sum += T[tmp];
			T[tmp] = -1;
		}
		if (sum < 0) continue;
		maxk++;
		maxi = max(maxi, sum / (double)count);
		mini = min(mini, sum / (double)count);
	}

	vector<double> tmp;
	forn(i, 0, n)
		if (T[i + 1] != -1) tmp.push_back(T[i + 1]);
	sort(all(tmp));
	if (tmp.size() >= count && maxk < k)
	{
		double sum = 0;
		forn(j, 0, count)
		{
			sum += tmp[j];
		}

		maxi = max(maxi, sum / (double)count);
		mini = min(mini, sum / (double)count);

		sum = 0;
		forn(j, tmp.size() - count, tmp.size())
		{
			sum += tmp[j];
		}

		maxi = max(maxi, sum / (double)count);
		mini = min(mini, sum / (double)count);
	}

	printf("%.10f %.10f\n", mini, maxi);

    return 0;
}