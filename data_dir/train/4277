#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define T (1<<17)

int tree[T];

void add(int pos, int val){
    for(int i=pos;i<T;i=((i)|(i+1))) tree[i] += val;
}

int sum(int pos){
    int ans = 0;
    for(int i=pos;i>0;i=((i)&(i-1))) ans += tree[i-1];
    return ans;
}

int get(int x){
    return sum(x+1) - sum(x);
}

void update(int x, int val){
    add(x, val);
}

int sum(int L, int R){
    return sum(R) - sum(L);
}

/*
int a[100010];

int get(int x){
    return a[x];
}

void update(int x, int val){
    a[x] += val;
}

int sum(int L, int R){
    int ans = 0;
    for(int i=L;i<R;i++) ans += a[i];
    return ans;
}
*/

int main(void){
    int N,Q,i,j;
    
    cin >> N >> Q;
    int L = 0, R = N;
    
    REP(i,N) update(i, 1);
    
    REP(j,Q){
        int type;
        scanf("%d", &type);
        
        if(type == 1){
            int p;
            scanf("%d", &p);
            int M;
            if(L < R) M = L + p; else M = L - p;
            if(L > R) swap(L, R);
            int w = min(M-L, R-M);
            
            int L2,R2;
            if(M-L <= R-M){
                REP(i,w){
                    int tmp = get(M-1-i);
                    update(M+i, tmp);
                }
                L2 = M;
                R2 = R;
            } else {
                REP(i,w){
                    int tmp = get(M+i);
                    update(M-1-i, tmp);
                }
                L2 = M;
                R2 = L;
            }
            
            L = L2; R = R2;
            
        //  cout << L << ' ' << R << endl;
        //  REP(i,N) cout << get(i) << ' ';
        //  cout << endl;
        } else {
            int l,r;
            scanf("%d%d", &l, &r);
            int ans = 0;
            if(L < R) ans = sum(L+l, L+r);
            else ans = sum(L-r, L-l);
            printf("%d\n", ans);
        }
    }
    
    return 0;
}
