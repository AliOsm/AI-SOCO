// (NlogN + 2NLogN)?
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 1;
struct Leg {
	int l, d, i;
	bool operator<(Leg a) const {
		return a.d < d;
	}
} leg[N];

int n, freqL[N], total;
vector<Leg> occ[N];
int main() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
#endif
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) {
		scanf("%d", &leg[i].l);
		++freqL[leg[i].l];
	}
	multiset<Leg> st;
	for (int i = 0; i < n; ++i) {
		scanf("%d", &leg[i].d);
		total += leg[i].d;
		leg[i].i = i;
		st.insert(leg[i]);
		occ[leg[i].l].push_back(leg[i]);
	}
	int result = 1e9;
	for (int l = N - 1; l >= 1; --l) {
		if (!freqL[l])
			continue;
		int sum = 0;
		for (auto leg: occ[l]) {
			auto it = st.lower_bound(leg);
			sum += it->d;
			st.erase(it);
		}
		int maxNeed = freqL[l] - 1;
		int take = 0;
		vector<Leg> addAgain;
		while (!st.empty() && maxNeed--) {
			auto it = st.begin();
			take += it->d;
			addAgain.push_back(*it);
			st.erase(it);
		}
		for (auto leg: addAgain)
			st.insert(leg);
		result = min(result, total - (sum + take));
	}
	printf("%d\n", result);
	return 0;
}