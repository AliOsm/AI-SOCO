#include<bits/stdc++.h>
using namespace std;
#define ll int  
#define mod 1000000007
#define scl(n) scanf("%lld",&n)
#define pfl(n) printf("%lld\n",n)
#define sc(n) scanf("%d",&n)
#define pf(n) printf("%d\n",n)
vector<ll>v[200011];
ll has[200011],k;
map<pair<ll,ll>,ll>mp;
set<pair<ll,ll> >st;

ll p = 10;

void remove_edge(ll l,ll r){
    if(has[l]==0&&has[r]==0){
        return ;
    }
    if(has[l]){
        has[l]--;
    }
    if(has[r]){
        has[r]--;
    }

    if(st.count(make_pair(has[l]+1,l))){
        // cout<<"nhg";
        st.erase(make_pair(has[l]+1,l));
        st.insert(make_pair(has[l],l));
    }
    if(st.count(make_pair(has[r]+1,r))){
        // cout<<"asjdgh";
        st.erase(make_pair(has[r]+1,r));
        st.insert(make_pair(has[r],r));
    }
}


void remove_node(ll s){
    if(!st.count(make_pair(has[s],s))){
        return ;
    }

    st.erase(make_pair(has[s],s));

    for(ll i=0;i<v[s].size();i++){
        if(mp.find(make_pair(s,v[s][i]))!=mp.end()){
            continue;
        }
        remove_edge(s,v[s][i]);
        mp[make_pair(s,v[s][i])]++;
        mp[make_pair(v[s][i],s)]++;
        if(has[v[s][i]]<k){
            remove_node(v[s][i]);
        }
    }
    has[s] = 0;
}

int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll t,i,j,l,m,n,r,q;
    cin>>n>>m>>k;
    ll ap[m+11][2];
    for(i=0;i<m;i++){
        cin>>ap[i][0]>>ap[i][1];
        has[ap[i][0]]++;
        has[ap[i][1]]++;
        v[ap[i][0]].push_back(ap[i][1]);
        v[ap[i][1]].push_back(ap[i][0]);
    }

    for(i=1;i<=n;i++){
        st.insert(make_pair(has[i],i));
    }

    ll ans[m+11];

    for(i=m-1;i>=0;i--){
        while((!st.empty())&&(st.begin()->first)<k){
            remove_node(st.begin()->second);
        }

        ans[i] = st.size();

        if(mp.find(make_pair(ap[i][0],ap[i][1]))!=mp.end()){
            continue;
        }
    
        mp[make_pair(ap[i][0],ap[i][1])]++;
        mp[make_pair(ap[i][1],ap[i][0])]++;

        remove_edge(ap[i][0],ap[i][1]);

    }

    for(i=0;i<m;i++){
        cout<<ans[i]<<endl;
    }


return 0;
}