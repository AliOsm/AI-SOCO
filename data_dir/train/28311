#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <assert.h>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
#include <map>

using namespace std;

const int N = 1001;

vector < int > G[7];
int n;
string s[N];

int getBit(int x, int j)
{
	if ((x & (1 << j)))
		return 1;
	else
		return 0;
}

int cntBit(int x)
{
	int res = 0;
	for (int i = 0; i < 6; ++i)
	{
		if (getBit(x, i) == 1)
			res++;
	}
	return res;
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif	
	scanf("%d\n", &n);
	for (int i = 0; i < n; ++i)
		cin >> s[i];
	for (int mask = 0; mask < (1 << 6); ++mask)
		G[cntBit(mask)].push_back(mask);
	for (int k = 1; k <= 6; ++k)
	{
		bool flag = true;
		for (int i = 0; i < G[k].size(); ++i)
		{
			int mask = G[k][i];
			for (int j1 = 0; j1 < n; ++j1)
			{
				for (int j2 = j1 + 1; j2 < n; ++j2)
				{
					if (j1 == j2)
						continue;
					int c1 = 0, c2 = 0;
					for (int j3 = 0; j3 < 6; ++j3)
					{
						if (getBit(mask, j3) == 0 && s[j1][j3] != s[j2][j3])
							c1++;
						else if (getBit(mask, j3) == 1 && s[j1][j3] == s[j2][j3])
							c1++;
						else if (getBit(mask, j3) == 1 && s[j1][j3] != s[j2][j3])
							c2++;
					}
					if (c1 <= k && c1 + c2 >= k)
						flag = false;
				}
			}
		}
		if (flag == false)
		{
			cout << k - 1 << endl;
			return 0;
		}
	}
	cout << 6 << endl;
    return 0;
}