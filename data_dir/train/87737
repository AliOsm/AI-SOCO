#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <stack>
#include <memory.h>
#include <list>
#include <numeric>
#include <functional>
#include <complex>
#include <unordered_set>
#include <cctype>


using namespace std;

typedef long long ll;
typedef long double ld;

struct Monster {
	int hp, dmg, cost;
};

const int N = (int)1e6 + 5;

int best[N];
int t[4 * N];
int lazy[4 * N];

void push(int v, int tl, int tr) {
	t[v] += lazy[v];
	if (tl != tr) {
		lazy[2 * v] += lazy[v];
		lazy[2 * v + 1] += lazy[v];
	}	

	lazy[v] = 0;
}


void build(int v, int tl, int tr) {
	if (tl == tr) {
		t[v] = best[tl];
		return;
	}

	int tm = (tl + tr) / 2;
	build(2 * v, tl, tm);
	build(2 * v + 1, tm + 1, tr);
	t[v] = max(t[2 * v], t[2 * v + 1]);
}

void update(int v, int tl, int tr, int l, int r, int add) {
	push(v, tl, tr);
	if (l > r) return;
	if (l == tl && r == tr) {
		lazy[v] += add;
		push(v, tl ,tr);
		return;
	}

	int tm = (tl + tr) / 2;
	update(2 * v, tl, tm, l, min(tm, r), add);
	update(2 * v + 1, tm + 1, tr, max(tm + 1, l), r, add);
	t[v] = max(t[2 * v], t[2 * v + 1]);
}

int query(int v, int tl, int tr, int l, int r) {
	push(v, tl, tr);
	if (l > r) return INT_MIN;
	if (l == tl && r == tr) {
		return t[v];
	}

	int tm = (tl + tr) / 2;
	return max(
		query(2 * v, tl, tr, l, min(tm, r)), 
		query(2 * v + 1, tm + 1, tr, max(tm + 1, l), r));
}


int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("dictionary.in", "r", stdin);
	//freopen("dictionary.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	int n, m, p;
	cin >> n >> m >> p;

	vector<pair<int, int>>weapon(n);
	for (int i = 0; i < n; i++) {
		cin >> weapon[i].first >> weapon[i].second;
	}

	for (int i = 0; i < N; i++) {
		best[i] = INT_MIN;
	}

	vector<pair<int, int>>armor(m);
	for (int i = 0; i < m; i++) {
		cin >> armor[i].first >> armor[i].second;
		best[armor[i].first] = max(best[armor[i].first], -armor[i].second);
	}

	int cur = INT_MIN;
	for (int i = N - 1; i >= 0; i--) {
		cur = max(cur, best[i]);
		best[i] = cur;
	}

	build(1, 0, N - 1);


	vector<Monster>enemy(p);
	for (int i = 0; i < p; i++) {
		cin >> enemy[i].hp >> enemy[i].dmg >> enemy[i].cost;
	}

	sort(enemy.begin(), enemy.end(), [](Monster m1, Monster m2) {
		return m1.hp < m2.hp;
	});

	sort(weapon.begin(), weapon.end());
	int ptr = 0;

	int ans = INT_MIN;
	for (int i = 0; i < n; i++) {
		while (ptr < p && enemy[ptr].hp < weapon[i].first) {
			update(1, 0, N - 1, enemy[ptr].dmg + 1, N - 1, enemy[ptr].cost);
			ptr++;
		}

		int tmp = query(1, 0, N - 1, 0, N - 1) - weapon[i].second;
		ans = max(ans, tmp);
	}

	cout << ans;
	return 0;
}