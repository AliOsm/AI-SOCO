#include <string>
#include <iostream>
#include <iomanip>
#include <vector>
#include <set>
#include <map>
#include <hash_set>
#include <hash_map>
#include <algorithm>
#include <functional>
#include <cmath>

typedef unsigned long long  uint64_t;
typedef   signed long long  int64_t;
typedef unsigned long       uint32_t;
typedef   signed long       int32_t;
typedef unsigned short      uint16_t;
typedef   signed short      int16_t;
typedef unsigned char       uint8_t;
typedef   signed char       int8_t;

typedef long double double_t;

typedef std::vector<double_t> DoubleVector;

typedef std::vector<int32_t>        IntVector;
typedef std::vector<IntVector>      IntVector2d;

typedef std::vector<size_t>         SizeTVector;
typedef std::vector<SizeTVector>    SizeTVector2d;

typedef std::set<size_t>            SizeTSet;
typedef stdext::hash_set<size_t>    SizeTHashSet;

template <typename T>
inline T ABS(const T v) {return v > 0 ? v : (-v);}

template <typename T>
inline T MIN(const T v1, const T v2) {return v1 < v2 ? v1 : v2;}

double_t GetArriveTime(const double_t d, const double_t vMax, const double_t aMax)
{
	const double_t tStart = vMax / aMax;
	const double_t dStart = vMax * tStart * 0.5;
	if (d < dStart)
	{
		const double_t tArrive = sqrt(2 * d / aMax);
		return tArrive;
	}
	else
	{
		const double_t tPlain = (d - dStart) / vMax;
		return tStart + tPlain;
	}
}

bool Solve(std::istream& ist, std::ostream& ost, bool multipleTestMode)
{
	// first input operation
	//
	size_t n;
	ist >> n;
	// /////////////////////

	if (multipleTestMode && !ist)
	{
		return false;
	}

	// other input operation and calculations
	//
	double_t aMax;
	double_t d;
	ist >> aMax >> d;

	// /////////////////////
	DoubleVector timings(n);

	for (size_t i = 0; i < n; i++)
	{
		double_t tStart;
		double_t vMax;
		ist >> tStart >> vMax;
		const double_t tEnd = GetArriveTime(d, vMax, aMax) + tStart;
		timings[i] = tEnd;
	}

	DoubleVector answer;
	answer.reserve(n);
	size_t idx = 0;
	double_t tCurrent = timings[idx++];
	answer.push_back(tCurrent);
	for (; idx < n; idx++)
	{
		const double_t timing = timings[idx];
		if (timing < tCurrent)
		{
			answer.push_back(tCurrent);
		}
		else
		{
			answer.push_back(timing);
			tCurrent = timing;
		}
	}

	for (size_t i = 0; i < n; i++)
	{
		ost << std::fixed << std::setprecision(5) << answer[i] << std::endl;
	}

	return multipleTestMode;
}

int main()
{
	std::istream& ist = std::cin;
	std::ostream& ost = std::cout;
#if 1
	Solve(ist, ost, false);
#else
	while(Solve(ist, ost, true)) {};
#endif
}
