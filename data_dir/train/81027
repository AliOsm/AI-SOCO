#include <bits/stdc++.h>

using namespace std;

#define mid ((l + r) >> 1)
#define lson (p << 1)
#define rson (p << 1 | 1)

const int N = 2e5 + 10;

int n, sz;
int l[N], r[N];
int tr[N * 4];
vector<int> v;
map<int, int> rk;
int idx[N], ans[N];

int cmp(int a, int b) {
  return l[a] < l[b];
}

void update(int p, int l, int r, int x, int v) {
  if (x < l || x > r) return;
  if (l == r) {
    tr[p] += v;
    return;
  }
  tr[p] += v;
  if (x <= mid)
    update(lson, l, mid, x, v);
  else
    update(rson, mid + 1, r, x, v);
}

int query(int p, int l, int r, int ll, int rr) {
  if (ll > r || rr < l) return 0;
  if (ll <= l && rr >= r) {
    return tr[p];
  }
  return query(lson, l, mid, ll, rr) + query(rson, mid + 1, r, ll, rr);
}

int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%d%d", l + i, r + i);
    v.push_back(r[i]);
  }
  sort(v.begin(), v.end());
  v.erase(unique(v.begin(), v.end()), v.end());
  sz = v.size();
  for (int i = 0; i < v.size(); ++i) {
    rk[v[i]] = i;
  }
  for (int i = 0; i < n; ++i) {
    r[i] = rk[r[i]];
  }
  for (int i = 0; i < n; ++i) {
    update(1, 0, sz - 1, r[i], 1);
  }
  for (int i = 0; i < n; ++i) {
    idx[i] = i;
  }
  sort(idx, idx + n, cmp);
  for (int i = 0; i < n; ++i) {
    int ii = idx[i];
    ans[ii] = query(1, 0, sz - 1, 0, r[ii]) - 1;
    assert(ans[ii] >= 0);
    update(1, 0, sz - 1, r[ii], -1);
  }
  for (int i = 0; i < n; ++i) {
    printf("%d\n", ans[i]);
  }
  return 0;
}
