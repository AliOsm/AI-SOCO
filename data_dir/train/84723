#include <iostream>
#include <cstdio>
#include <algorithm>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <cstring>
#include <fstream>
#include <memory.h>
#include <iomanip>
#include <bitset>
#include <fstream>
#include <string>
#include <list>
#include <unordered_map>
#include <cfloat>

using namespace std;

#define right asfdsg
#define left asfdsvs
#define pb emplace_back
#define F first
#define S second
#define mp make_pair
#define x1 _xxx1
#define y1 _yyy1

#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)

typedef  long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef std::pair < int, int > pii;
typedef std::pair < ll, ll > pll;
typedef std::vector < std::vector < ld > > vld;

const int INF = (int) 2e9 + 7;
const ld EPS = (ld) 1e-5;
const int BASE = (int) 1e9 + 7;
const int MAXN = 200500;
const ll INFLL = (ll) 4e18;

int n, m, k, x;
vector <int> g[MAXN];
int f[MAXN][11][3];
int nv[11][3];

void add(int& x, int y) {
    x = (1ll * x + y) % BASE;
}

int mul(int x, int y) {
    return (1ll * x * y) % BASE;
}

void dfs(int v, int p = -1) {
    f[v][0][0] = k - 1;
    f[v][1][1] = 1;
    f[v][0][2] = m - k;

    for (int to : g[v]) {
        if (to == p) continue;
        dfs(to, v);
        for (int i = 0; i <= 10; i ++)
            for (int j = 0; j < 3; j ++)
                nv[i][j] = 0;


        for (int cnt = 0; cnt <= x; cnt ++) {
            for (int cntTo = 0; cntTo <= x; cntTo ++) {
                if (cnt + cntTo > x) continue;
                add (nv[cnt + cntTo][0], mul(f[v][cnt][0], f[to][cntTo][0]));
                add (nv[cnt + cntTo][0], mul(f[v][cnt][0], f[to][cntTo][1]));
                add (nv[cnt + cntTo][0], mul(f[v][cnt][0], f[to][cntTo][2]));

                add (nv[cnt + cntTo][1], mul(f[v][cnt][1], f[to][cntTo][0]));

                add (nv[cnt + cntTo][2], mul(f[v][cnt][2], f[to][cntTo][0]));
                add (nv[cnt + cntTo][2], mul(f[v][cnt][2], f[to][cntTo][2]));
            }
        }

        for (int i = 0; i <= 10; i ++)
            for (int j = 0; j < 3; j ++)
                f[v][i][j] = nv[i][j];
    }
}

int main() {
    scanf ("%d%d", &n, &m);
    for (int i = 1; i < n; i ++) {
        int a, b;
        scanf ("%d%d", &a, &b);
        g[a].push_back(b);
        g[b].push_back(a);
    }
    scanf ("%d%d", &k, &x);
    dfs(1);
    int ans = 0;
    for (int i = 0; i <= x; i ++) {
        add (ans, f[1][i][0]);
        add (ans, f[1][i][1]);
        add (ans, f[1][i][2]);
    }
    cout << ans;
    return 0;
}
