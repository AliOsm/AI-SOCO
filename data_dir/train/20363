#include <bits/stdc++.h>

#define FOR(x,n) for(int x = 0; x < n; x++)
#define SET(a) memset((a), -1, sizeof(a))
#define CLR(a) memset((a), 0, sizeof(a))
#define ALL(a) (a).begin(), (a).end()

#define ll long long
using namespace std;

typedef pair<ll, pair<int,int> > solveT;

int n, m, p, tmp;

ll tmpDist[302][302] = {};
ll dist[302][302] = {};
pair<int,int> moves[] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };

void solve(vector< pair<int,int> > & starts){
    memset(tmpDist, -1, (sizeof(tmpDist[0][0])) * 302 * 302);
    priority_queue<solveT, vector<solveT>, greater<solveT> > q;
    
    for(pair<int,int> P : starts) 
        tmpDist[P.first][P.second] = dist[P.first][P.second], q.push({dist[P.first][P.second],P});

    while(!q.empty()) {
        pair<int,int> U = q.top().second; 
        ll d = q.top().first; q.pop();
        if(tmpDist[U.first][U.second] < d) continue;
        FOR(x, 4) {
            int xN = U.first + moves[x].first, yN = U.second + moves[x].second;
            if(xN >= 1 && xN <= n && yN >= 1 && yN <= m && (tmpDist[xN][yN] == -1 || tmpDist[xN][yN] > d + 1)){
                tmpDist[xN][yN] = d + 1; 
                q.push({tmpDist[xN][yN],{xN, yN}});
            }
        }
    } 
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    cin >> n >> m >> p;
    vector< vector< pair<int,int> > > B(p+1);
    
    for(int x = 1; x <= n; x++)
        for(int y = 1; y <= m; y++)
            cin >> tmp, B[tmp].push_back({x,y});      
    
    for(pair<int,int> P : B[1])
        dist[P.first][P.second] = P.first + P.second - 2;
    
    for(int k = 2; k <= p; k++) {
    
        if(B[k].size() * B[k-1].size() < 10 * n * m) {
            for(pair<int,int> P : B[k]){
                ll tmp = 1LL << 60;
                for(pair<int,int> Q : B[k-1])
                    tmp = min(tmp, (ll)(abs(Q.first - P.first) + abs(Q.second - P.second)) + dist[Q.first][Q.second]);
                dist[P.first][P.second] = tmp;
            }
        } else {
            solve(B[k-1]);
            for(pair<int,int> P : B[k])
                dist[P.first][P.second] = tmpDist[P.first][P.second];
        }
    }
    
    cout << dist[B[p][0].first][B[p][0].second] << '\n';
}