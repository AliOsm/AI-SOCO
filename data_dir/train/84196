#include <iostream>
#include <cstdio>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <iterator>

#define x0 abc
#define y0 ABC
#define x1 abcd
#define y1 ABCD
#define xn abcde
#define yn ABCDE

#define l_b lower_bound
#define u_b upper_bound

#define fi first
#define se second
#define m_p make_pair

#define p_b push_back
#define po_b pop_back

#define ld long double
#define ll long long

#define cont continue
#define re return

#define uns unsigned

#define MAXLL 9000000000000000000LL
#define MAXINT 2000000000

#define MINLL -9000000000000000000LL
#define MININT -2000000000

#define P acos(-1)

#define endl '\n'

#define OUT cout << "-------" << endl;

using namespace std;

set <int> Set;

vector <int> v[120001], v1[120001], v2, ans;

int a, p[120001], que[120001], n, i, j, k, len, nom, queB, queE;

bool pole[120001], pole1[120001];

    void dfs(int nom)
    {
        int i;

        v2.p_b(nom);

        pole1[nom] = true;

        Set.insert(nom);

        for (i = 0; i < v[nom].size(); i++) {
            if (pole1[v[nom][i]]) {
                if (Set.find(v[nom][i]) != Set.end()) {
                    cout << "-1" << endl;

                    exit(0);
                }

                cont;
            }

            dfs(v[nom][i]);
        }

        Set.erase(nom);
    }

    void add(int nom)
    {
        if (!pole[nom] || pole1[nom])
        re;

        que[queE] = nom;

        queE++;

        pole1[nom] = true;

        ans.p_b(nom);
    }

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> k;

    for (i = 1; i <= k; i++) {
        cin >> a;

        pole[a] = true;
    }

    for (i = 1; i <= n; i++) {
        cin >> len;

        for (j = 0; j < len; j++) {
            cin >> a;

            v[i].p_b(a);
        }
    }

    for (i = 1; i <= n; i++)
        if (pole[i] && !pole1[i]) {
            Set.clear();

            dfs(i);
        }

    for (i = 1; i <= n; i++)
        for (j = 0; j < v[i].size(); j++) {
            v1[v[i][j]].p_b(i);

            p[i]++;
        }

    for (i = 1; i <= n; i++) pole[i] = false;

    for (i = 0; i < v2.size(); i++) pole[v2[i]] = true;

    for (i = 1; i <= n; i++) pole1[i] = false;

    queE = 1;

    for (i = 1; i <= n; i++)
        if (pole[i] && p[i] == 0) add(i);

    while (queB < queE - 1) {
        queB++;

        nom = que[queB];

        for (i = 0; i < v1[nom].size(); i++) {
            p[v1[nom][i]]--;

            if (p[v1[nom][i]] == 0)
            add(v1[nom][i]);
        }
    }

    cout << ans.size() << endl;

    for (i = 0; i < ans.size(); i++) cout << ans[i] << " ";

    cout << endl;

    re 0;
}
