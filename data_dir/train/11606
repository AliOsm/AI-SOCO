#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <assert.h>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
#include <map>

using namespace std;

const int N = 300001;

int n, k;
long long a[N], b[N];
int s, t;
long long pw[60];

void update(int ps)
{
	if (s == -1)
		s = ps;
	t = ps;
}

bool find()
{
	s = -1, t = -1;
	for (int i = 0; ; ++i)
	{
		if (i > n && b[i] == 0)
			break;
		if (i > n && b[i] == -1)
			return false;
		if (b[i] < 0)
		{
			long long c = (b[i] - 1) / 2;
			if (abs(b[i]) % 2 == 1)
				b[i] = 1, update(i);
			else
				b[i] = 0;
			b[i + 1] += c;
		}
		else
		{
			long long c = b[i] / 2;
			if (b[i] % 2 == 1)
				b[i] = 1, update(i);
			else
				b[i] = 0;
			b[i + 1] += c;
		}
	}
	return true;
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
	pw[0] = 1;
	for (int i = 1; i < 60; ++i)
		pw[i] = 2 * pw[i - 1];
	scanf("%d%d", &n, &k);
	for (int i = 0; i <= n; ++i)
	{
		scanf("%I64d", &a[i]);
		//a[i] *= -1;
		b[i] = a[i];
	}
	if (find() == false)
	{
		memset(b, 0, sizeof(b));
		for (int i = 0; i <= n; ++i)
		{
			a[i] *= -1;
			b[i] = a[i];
		}
		find();
	}
	if (t - s >= 30)
	{
		cout << 0 << endl;
		return 0;
	}
	long long cur = 0;
	for (int i = t; i >= s; --i)
	{
		if (b[i] == 1)
			cur += pw[i - s];
	}
	int ans = 0;
	for (int i = s; i >= 0; --i)
	{
		if (cur > 2 * k)
			break;
		if (i == n && a[i] != cur && abs(a[i] - cur) <= k)
			ans++;
		if (i < n && abs(a[i] - cur) <= k)
			ans++;
		cur *= 2;
	}
	printf("%d\n", ans);

    return 0;
}