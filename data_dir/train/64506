#include <bits/stdc++.h>

#define ll long long
#define ld long double
#define pb push_back
#define eb emplace_back
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()

#define int long long
using namespace std;
const int INF = 2e16;
const int MOD = 1e9 + 7;
const int MB = 20;

vector<vector<int>> g;

vector<int> h, p;

void dfs(int v, int hh = 0,int pr = -1) {
	h[v] = hh;
	p[v] = pr;
	for (int u : g[v]) {
		if (u != pr) {
			dfs(u, hh + 1, v);
		}
	}
}

int getLca(int a, int b) {
	if (h[a] < h[b]) swap(a, b);
	while (h[a] > h[b]) a = p[a];
	if (a == b) return a;
	while (a != b) {
		a = p[a];
		b = p[b];
	}
	return a;
}

vector<int> ans;

void update(int a, int b, int v) {
	while (a != b) {
		ans[a] = v;
		a = p[a];
	}
}

int get(int a, int b) {
	int res = 1e6;
	while (a != b) {
		res = min(res, ans[a]);
		a = p[a];
	}
	return res;
}


void solve() {
	int n;
	cin >> n;
	g.resize(n);
	vector<pair<int, int>> edges(n - 1);
	for (int i = 0; i < n - 1; i++) {
		int from, to;
		cin >> from >> to;
		from--; to--;
		g[from].pb(to);
		g[to].pb(from);
		edges[i] = { from, to };
	}

	p.resize(n);
	h.resize(n);
	dfs(0);

	int m;
	cin >> m;
	vector<pair<int, pair<int, int>>> q(m);
	ans.resize(n, 1e6);
	for (int i = 0; i < m; i++) {
		int one, two, three;
		cin >> one >> two >> three;
		one--; two--;
		q[i] = { three, {one, two} };
	}

	sort(all(q));

	for (int i = 0; i < m; i++) {
		int c = getLca(q[i].second.first, q[i].second.second);
		update(q[i].second.first, c, q[i].first);
		update(q[i].second.second, c, q[i].first);
	}

	for (int i = 0; i < m; i++) {
		int c = getLca(q[i].second.first, q[i].second.second);
		int res = min(get(q[i].second.first, c), get(q[i].second.second, c));
		if (res != q[i].first) {
			cout << -1;
			return;
		}
	}

	vector<int> res(n - 1);
	for (int i = 0; i < n - 1; i++) {
		int v = edges[i].first;
		int u = edges[i].second;
		if (h[v] < h[u]) swap(u, v);
		res[i] = ans[v];
	}

	for (int i : res) cout << i << " ";
}
	

signed main() {
	/*
	freopen("search.in", "r", stdin);
	freopen("search.out", "w", stdout);
	*/
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cout << fixed;
	cout.precision(12);
	solve();
}