//CLOCKS_PER_SEC
using namespace std;
#include<bits/stdc++.h>
#define sqr(x) (x)*(x)
//#define sort stable_sort
#define ll long long
#define mk make_pair
#define pb push_back
#define in insert
#define mtr(x,y,z) mk(mk(x,y),z)
#define fi first
#define se second
#define lch(x) ((x)<<1)
#define rch(x) (((x)<<1)|1)
#define all(x) (x).begin(),(x).end()
#define titose CLOCKS_PER_SEC
#define fpi(x) freopen(x,"r",stdin);
#define fpo(x) freopen(x,"w",stdout);
#define fprio fpi("in.txt");fpo("out.txt");
#define fast ios_base::sync_with_stdio(false);
inline void read(int &x){int v=0,f=1;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=(c&15);while (isdigit(c=getchar())) v=(v<<1)+(v<<3)+(c&15);x=v*f;}
inline void read(ll &x){ll v=0ll,f=1ll;char c=getchar();while (!isdigit(c)&&c!='-') c=getchar();if (c=='-') f=-1; else v=(c&15);while (isdigit(c=getchar())) v=(v<<1)+(v<<3)+(c&15);x=v*f;}
inline void readc(char &x){char c;while (((c=getchar())==' ')||c=='\n');x=c;}
inline void writes(string s){puts(s.c_str());}
inline void writeln(){writes("");}
inline void writei(int x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
inline void writell(ll x){if (x<0){putchar('-');x=abs(x);}if (!x) putchar('0');char a[25];int top=0;while (x){a[++top]=(x%10)+'0';x/=10;}while (top){putchar(a[top]);top--;}}
#define pii pair<int,int>
#define pll pair<ll,ll>
#define vi vector<int>
//#define vl vector<ll>
#define si set<int>
#define sl set<ll>
#define mii map<int,int>
#define mll map<ll,ll>
#define msi map<string,int>
#define msl map<string,ll>
#define piii pair<int,pii >
#define piipi pair<pii,int>
#define plll pair<ll,pll >
#define pllpl pair<pll,ll>
#define pqi priority_queue<int>
#define pql priority_queue<ll>
#define npqi priority_queue<int,vector<int>,greater<int> >
#define npql priority_queue<ll,vector<ll>,greater<ll> >
#define forup(i,a,b) for ((i)=(a);(i)<=(b);(i)++)
#define fordo(i,a,b) for ((i)=(a);(i)>=(b);(i)--)
#define rep(i,x) forup ((i),1,(x))
#define repd(i,x) fordo ((i),(x),1)
#define itr iterator
#define fe(itcalc,c) for(__typeof((c).begin()) itcalc=(c).begin();itcalc!=(c).end();itcalc++)
#define NO {cout<<"NO";return 0;}
#define YES {cout<<"YES";return 0;}
#define y0 y000000000000000000000000000
#define y1 y111111111111111111111111111
#define j0 j000000000000000000000000000
#define j1 j111111111111111111111111111
#define cl0(a) memset((a),(0),(sizeof((a))))
#define clz(a) memset((a),(0x16),(sizeof((a))))
#define clf(a) memset((a),(-(0x16)),(sizeof((a))))
#define inf 0x3bbbbbbb
#define lnf 0x1bbbbbbbbbbbbbbbll
#define sqrt divi
#define p2(i) (1ll<<(i))
#define readi read
#define readll read
/*************************************************/
ll n,m,i,j,a[100005];
struct splayt
{
	ll lc[100005],rc[100005],fa[100005],val[100005],tk[100005],tb[100005],rt,sz[100005],cnt;
	void pushup(int x)
	{
		sz[x]=sz[lc[x]]+sz[rc[x]]+1;
	}
	void rot(ll &x)
	{
		ll y=fa[x],z=fa[y];
		if(z){
			if(lc[z]==y) lc[z]=x;else rc[z]=x;
		}
		fa[x]=z;fa[y]=x;
		if(lc[y]==x){
			if(rc[x]) fa[lc[y]=rc[x]]=y; else lc[y]=0;
			rc[x]=y;
		}
		else{
			if(lc[x]) fa[rc[y]=lc[x]]=y; else rc[y]=0;
			lc[x]=y;
		}
		pushup(y);pushup(x);
	}
	void upd(ll x,ll k,ll b)
	{
		val[x]+=k*(sz[lc[x]])+b;
		tk[x]+=k;
		tb[x]+=b;
	}
	void pushdo(ll x)
	{
		if(lc[x]){
			upd(lc[x],tk[x],tb[x]);
		}
		if(rc[x]){
			upd(rc[x],tk[x],tb[x]+tk[x]*(sz[lc[x]]+1));
		}
		tk[x]=tb[x]=0;
	}
	void pushall(ll x)
	{
		if(fa[x]) pushall(fa[x]);
		pushdo(x);
	}
	void splay(ll x)
	{
		pushall(x);
		while(fa[x]){
			ll y=fa[x],z=fa[y];
			if(z){
				if((lc[z]==y)==(lc[y]==x)){
					rot(y);
				}
				else{
					rot(x);
				}
			}
			rot(x);
		}
		rt=x;
	}
	ll kth(ll x,ll k)
	{
		if(sz[lc[x]]>=k) return kth(lc[x],k);
		if(sz[lc[x]]+1==k) {splay(x);return x;}
		return kth(rc[x],k-sz[lc[x]]-1);
	}
	ll query(ll x)
	{
		return val[kth(rt,x)];
	}
	ll dfs(ll x)
	{
		pushdo(x);
		ll s=val[x];
		if(lc[x]) s=max(s,dfs(lc[x]));
		if(rc[x]) s=max(s,dfs(rc[x]));
		return s; 
	}
}tr;
int main()
{
	read(n);
	rep(i,n)read(a[i]);
	tr.rt=tr.cnt=1;tr.sz[1]=1;
	rep(i,n){
		ll l=-1,r=i-2,s=i-1;
		while(l<r){
			ll mid=(l+r+1)>>1;
			if(tr.query(mid+1)+(mid+1)*a[i]>tr.query(mid+2)){
				r=mid-1;
				s=mid;
			}
			else{
				l=mid;
			}
		}
		s++;
		tr.kth(tr.rt,s);
		int x=++tr.cnt;
		tr.val[x]=tr.val[tr.rt];
		tr.fa[x]=tr.rt;
		if(tr.rc[tr.rt]) tr.fa[tr.rc[tr.rt]]=x;
		tr.rc[x]=tr.rc[tr.rt];
		tr.rc[tr.rt]=x;
		tr.pushup(x);tr.pushup(tr.rt);
		tr.upd(x,a[i],1ll*s*a[i]);
	}
	cout<<tr.dfs(tr.rt)<<endl;
	return 0;
}