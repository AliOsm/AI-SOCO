#include <bits/stdc++.h>

using namespace std;

#define rep(i,a,n) for (int i=(a);i<(n);i++)
#define per(i,a,n) for (int i=(n)-1;i>=(a);i--)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define fi first
#define se second
#define SZ(x) (int)x.size()

typedef long long ll;
typedef long double ld;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int,int> pii;
typedef pair<ll,ll>pll;
typedef vector<pii> vpii;

template<typename T>
T getint() {
    T x=0,p=1;
    char ch;
    do{ch=getchar();}while(ch <= ' ');
    if(ch=='-')p=-1,ch=getchar();
    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();
    return x*p;
}

mt19937 rnd(chrono::system_clock::now().time_since_epoch().count());

template<typename T1,typename T2>bool umin(T1 &x,const T2&y){if(x>y)return x=y,true;return false;}
template<typename T1,typename T2>bool umax(T1 &x,const T2&y){if(x<y)return x=y,true;return false;}

const int maxn=(int)1e6+10;
const int inf=(int)1e9+5;
const int mod=1e9 + 7;
const ll llinf=(ll)1e18+5;
const ld pi=acos(-1.0);

int main() {
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);

    ios_base::sync_with_stdio(0);

    int n;
    cin >> n;

    set <int> buy, sell, unknown;

    buy.insert(-inf);
    sell.insert(inf);
    long long ans = 1LL;

    auto bad = []() {
        cout << 0 << endl;
        exit(0);
    };

    for(int i = 0; i < n; ++i) {
        string s;
        cin >> s;
        int x;
        cin >> x;
        if (s == "ACCEPT") {

            if (unknown.count(x)) {
                while(!unknown.empty()) {
                    int z = *unknown.begin();
                    unknown.erase(unknown.begin());
                    if (z < x) {
                        buy.insert(z);
                    } else if (z > x) sell.insert(z);
                }
                ans = (ans * 2) % mod;
            } else {
                if (buy.count(x) && *prev(buy.end()) != x) bad();
                if (sell.count(x) && *sell.begin() != x) bad();
                if (buy.count(x)) {
                     buy.erase(x);
                     for(int x: unknown) sell.insert(x);
                } else {
                     sell.erase(x);
                     for(int x: unknown) buy.insert(x);
                }
                unknown.clear();
                
            }

        } else {
            if (x < *prev(buy.end())) buy.insert(x);
            else if (x > *sell.begin()) sell.insert(x);
            else unknown.insert(x);
        }

        if (*prev(buy.end()) > *sell.begin()) bad();
    }

    ans = (1LL * ans * (unknown.size() + 1)) % mod;
    cout << ans << endl;
    return 0;
}