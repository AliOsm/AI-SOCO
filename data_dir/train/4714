#include<bits/stdc++.h>
using namespace std;
const long long N = 2e5 + 5;
vector < long long > adj[N];
struct TreeNode
{
    long long sum=0;
    long long num=1;
    vector<long long> connect;
    bool visited=false;
};
vector<TreeNode> v;
vector<long long> ans;
void dfs(long long val)
{
    v[val].visited = true;
    for(long long i=0; i<v[val].connect.size(); i++)
    {
        if(!v[v[val].connect[i]].visited)
        {
            dfs(v[val].connect[i]);
            v[val].num += v[v[val].connect[i]].num;
            v[val].sum += v[v[val].connect[i]].sum + v[v[val].connect[i]].num;
        }
    }
}
void dfsans(long long N,long long val)
{
    for(long long i=0; i<v[val].connect.size(); i++)
    {
        if(ans[v[val].connect[i]] == 0)
        {
            ans[v[val].connect[i]] = ans[val] + N - 2*v[v[val].connect[i]].num;
            dfsans(N,v[val].connect[i]);
        }
    }
}
vector<long long> sumOfDistancesinTree(long long N, vector<vector<long long>>& edges)
{
    if(edges.empty()) return {0};
    v.resize(N);
    ans.resize(N,0);
    for(long long i=0; i<edges.size(); i++)
    {
        v[edges[i][0]].connect.push_back(edges[i][1]);
        v[edges[i][1]].connect.push_back(edges[i][0]);
    }
    dfs(edges[0][0]);
    ans[edges[0][0]] = v[edges[0][0]].sum;
    dfsans(N,edges[0][0]);
    return ans;

}
bool vis[N];
long long aans;
long long zfs(long long x){
    if (vis[x])
        return 0;
    vis[x] = 1;
    long long ret = 0;
    for(long long j = 0 ; j < adj[x].size() ; j++){
        ret += zfs(adj[x][j]);
    }
    aans += ret + 1;
    return 1 + ret;
}
int main()
{
    int n;
    scanf("%d",&n);
    vector < vector < long long > > e;
    for(long long i = 0 ;  i< n - 1 ; i++){
        vector < long long > v;
        int x, y;
        scanf("%d%d",&x,&y);
        adj[x].push_back(y);
        adj[y].push_back(x);
        x--;
        y--;
        v.push_back(x);
        v.push_back(y);
        e.push_back(v);
    }
    vector < long long > ans = sumOfDistancesinTree(n, e);
    long long mx = 0, root;
    for(long long i = 0 ; i < ans.size() ; i++){
        if (ans[i] > mx){
            mx = ans[i];
            root = i + 1;
        }
    }
    zfs(root);
    cout << aans;
    return 0;
}
