#include <bits/stdc++.h>
using namespace std;

#define pii pair<int,int>

int n, t[35];


/*
 * Dirs
 *  0 UP
 *  1 UP RIGHT
 *  2 RIGHT
 *  3 DOWN RIGHT
 *  4 DOWN
 *  5 DOWN LEFT
 *  6 LEFT
 *  7 UP LEFT
 */
struct Pos {
    int x, y, dir, rem, cnt;
    Pos (int v1, int v2, int v3, int v4, int v5) {
        x = v1;
        y = v2;
        dir = v3;
        rem = v4;
        cnt = v5;
    }
    bool operator < (const Pos& p2) const {
        if (x == p2.x) {
            if (y == p2.y) {
                if (dir == p2.dir) {
                    if (rem == p2.rem) {
                        return cnt < p2.cnt;
                    }
                    return rem < p2.rem;
                }
                return dir < p2.dir;
            }
            return y < p2.y;
        }
        return x < p2.x;
    }
};


struct lessthan {
    bool operator() (const Pos& p1, const Pos& p2) {
    int x = p1.x;
    int y = p1.y;
    int dir = p1.dir;
    int rem = p1.rem;
    int cnt = p1.cnt;
     if (x == p2.x) {
            if (y == p2.y) {
                if (dir == p2.dir) {
                    if (rem == p2.rem) {
                        return cnt < p2.cnt;
                    }
                    return rem < p2.rem;
                }
                return dir < p2.dir;
            }
            return y < p2.y;
        }
        return x < p2.x;
}
};

set<pii> res;
set<Pos, lessthan> vis;

int main () {
    ios_base::sync_with_stdio(false);
    cin>>n;
    for (int i=0; i<n; i++) cin>>t[i];
    queue<Pos> q;
    q.push(Pos(0, 0, 0, t[0]-1, 0));
    while (!q.empty()) {
        Pos fr = q.front();
        q.pop();
        if (vis.find(fr) != vis.end()) continue;
        int x = fr.x;
        int y = fr.y;
        res.insert(make_pair(x, y));
        int rem = fr.rem;
        int dir = fr.dir;
        int cnt = fr.cnt;
        vis.insert(fr);
        if (rem == 0) {
            if (cnt == n-1) continue;
            else {
                switch (dir) {
                    case 0: // UP
                        q.push(Pos(x+1, y+1, 1, t[cnt+1]-1, cnt+1)); // UP RIGHT
                        q.push(Pos(x-1, y+1, 7, t[cnt+1]-1, cnt+1)); // UP LEFT
                        break;
                    case 1: // UP RIGHT
                        q.push(Pos(x+1, y, 2, t[cnt+1]-1, cnt+1)); // RIGHT
                        q.push(Pos(x, y+1, 0, t[cnt+1]-1, cnt+1)); // UP
                        break;
                    case 2: // RIGHT
                        q.push(Pos(x+1, y+1, 1, t[cnt+1]-1, cnt+1)); // UP RIGHT
                        q.push(Pos(x+1, y-1, 3, t[cnt+1]-1, cnt+1)); // DOWN RIGHT
                        break;
                    case 3: // DOWN RIGHT
                        q.push(Pos(x+1, y, 2, t[cnt+1]-1, cnt+1)); // RIGHT
                        q.push(Pos(x, y-1, 4, t[cnt+1]-1, cnt+1)); // DOWN
                        break;
                    case 4: // DOWN
                        q.push(Pos(x+1, y-1, 3, t[cnt+1]-1, cnt+1)); // DOWN RIGHT
                        q.push(Pos(x-1, y-1, 5, t[cnt+1]-1, cnt+1)); // DOWN LEFT
                        break;
                    case 5: // DOWN LEFT
                        q.push(Pos(x, y-1, 4, t[cnt+1]-1, cnt+1)); // DOWN
                        q.push(Pos(x-1, y, 6, t[cnt+1]-1, cnt+1)); // LEFT
                        break;
                    case 6: // LEFT
                        q.push(Pos(x-1, y-1, 5, t[cnt+1]-1, cnt+1)); // DOWN LEFT
                        q.push(Pos(x-1, y+1, 7, t[cnt+1]-1, cnt+1)); // UP LEFT
                        break;
                    case 7: // UP LEFT
                        q.push(Pos(x, y+1, 0, t[cnt+1]-1, cnt+1)); // UP
                        q.push(Pos(x-1, y, 6, t[cnt+1]-1, cnt+1)); // LEFT
                        break;
                }
            }
        }
        else {
            switch (dir) {
                case 0: // UP
                    q.push(Pos(x, y+1, dir, rem-1, cnt)); 
                    break;
                case 1: // UP RIGHT
                    q.push(Pos(x+1, y+1, dir, rem-1, cnt)); 
                    break;
                case 2: // RIGHT
                    q.push(Pos(x+1, y, dir, rem-1, cnt)); 
                    break;
                case 3: // DOWN RIGHT
                    q.push(Pos(x+1, y-1, dir, rem-1, cnt)); 
                    break;
                case 4: // DOWN
                    q.push(Pos(x, y-1, dir, rem-1, cnt)); 
                    break;
                case 5: // DOWN LEFT
                    q.push(Pos(x-1, y-1, dir, rem-1, cnt)); 
                    break;
                case 6: // LEFT
                    q.push(Pos(x-1, y, dir, rem-1, cnt)); 
                    break;
                case 7: // UP LEFT
                    q.push(Pos(x-1, y+1, dir, rem-1, cnt)); 
                    break;
            }
        }
    }
    cout<<res.size()<<endl;
    return 0;
}