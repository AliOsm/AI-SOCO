#include <bits/stdc++.h>

using namespace std;


int n, m, u, v, dp[405], us, ct;
bool used[405];
int g[3][405][405];
int q[80000];

void dfs(int v)
{
    used[v]=1;
    for (int i=1;i<=n;i++)
    {
        if (!g[1][v][i])
            g[2][v][i]=1, g[2][i][v]=1;
        if (!used[i] && g[2][v][i]==1)
            dfs(i);
    }
}

void bfs(int id)
{
    for (int i=2;i<=n;i++)
        dp[i]=405;
    q[++ct]=1;
    while (ct>0)
    {
        int v=q[ct];
        used[v]=1;
        q[ct]=0;
        ct--;
        for (int i=1;i<=n;i++)
        {
            if (g[id][v][i]==1)
            {
                int to=i;
                if (dp[to]>dp[v]+1)
                {
                    dp[to]=dp[v]+1;
                }
                if (!used[to])
                {
                    q[++ct]=to;
                }
            }
        }
    }
}

main()
{
    //ios_base::sync_with_stdio(0);
    //cin.tie(0);
    cin >> n >> m;
    for (int i=1;i<=m;i++)
    {
        cin >> u >> v;
        g[1][u][v]=1;
        g[1][v][u]=1;
        if (min(u, v)==1 && max(v, u)==n)
        {
            us=1;
        }
    }
    if (us==1)
    {
        for (int i=1;i<=n;i++)
        {
            for (int j=1;j<=n;j++)
            {
                if (g[1][i][j]==0)
                {
                    g[2][i][j]=1;
                    g[2][j][i]=1;
                }
            }
        }
        bfs(2);
        if (dp[n]==405)
        {
            cout << -1;
            return 0;
        }
        cout << dp[n];
    }
    else
    {
        bfs(1);
        if (dp[n]==405)
        {
            cout << -1;
            return 0;
        }
        cout << dp[n];
    }
    return 0;
}
//Easy Peasy
