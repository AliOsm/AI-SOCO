#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define FOR(i,f,t) for(int i=f; i<(int)t; i++)
#define FORR(i,f,t) for(int i=f; i>(int)t; i--)
#define ms(obj, val) memset(obj, val, sizeof(obj))
#define ms2(obj, val, sz) memset(obj, val, sizeof(obj[0])*sz)
#define pb push_back
#define ri(x) scanf("%d",&x)
#define rl(x) scanf("%lld",&x)
#define rii(x,y) ri(x), ri(y)

typedef vector<int> vi;
typedef long long ll;

const int MAXN = 2e5+5;

int n, q, a[MAXN];

int nxta[MAXN];
int nxt(int a){
    if(a==n) return n;
    if(nxta[a] == a) return a;
    return nxta[a] = nxt(nxta[a]);
}

int cur[MAXN];
void upd(int p, int x){
    if(p==n) return;
    if(x==0) return;
    if(cur[p]+x <= a[p]){
        cur[p]+=x;
    }else{
        int y = a[p]-cur[p];
        cur[p] += y;
        if(nxta[p]==p) nxta[p] = p+1;
        upd(nxt(p), x- (y));
    }
}


int main(){
    ri(n);
    FOR(i,0,n) ri(a[i]);
    FOR(i,0,n) nxta[i] = i;
    ri(q);
    FOR(iq,0,q){
        int t; ri(t);
        if(t==1){
            int p, x; rii(p,x); p--;
            upd(p,x);
        }else{
            int k; ri(k); k--; printf("%d\n",cur[k]);
        }
    }
}
