#include<bits/stdc++.h>
using namespace std;
struct Node
{
    int a, p, id, sz = 0, mx = 0;
    Node * l = NULL, * r = NULL;
};
inline int Size(Node * T)
{
    return (T ? T->sz : 0);
}
inline int Max(Node * T)
{
    return (T ? T->mx : 0);
}
void Split(Node * T, Node * &L, Node * &R, int i)
{
    if (!T)
        L = R = NULL;
    else if (Size(T->l) + 1 <= i)
        Split(T->r, T->r, R, i - Size(T->l) - 1), L = T;
    else
        Split(T->l, L, T->l, i), R = T;
    if (T) T->sz = Size(T->l) + Size(T->r) + 1,
        T->mx = max({Max(T->l), Max(T->r), T->a});
}
void Merge(Node * &T, Node * L, Node * R)
{
    if (!L) T = R;
    else if (!R) T = L;
    else if (L->p > R->p)
        Merge(L->r, L->r, R), T = L;
    else
        Merge(R->l, L, R->l), T = R;
    if (T) T->sz = Size(T->l) + Size(T->r) + 1,
        T->mx = max({Max(T->l), Max(T->r), T->a});
}
inline int Find(Node * T, int val)
{
    if (!T || T->mx <= val)
        return (-1);
    if (Max(T->r) > val)
        return (Find(T->r, val) + Size(T->l) + 1);
    if (T->a > val)
        return (Size(T->l));
    return (Find(T->l, val));
}
void DFS(Node * T)
{
    if (!T)
        return ;
    DFS(T->l);
    printf("%d ", T->id);
    DFS(T->r);
    return ;
}
inline void Insert(Node * &T, int i, int val, int id)
{
    Node * K = new Node;
    K->a = K->mx = val; K->id = id;
    K->sz = 1; K->p = rand();
    if (i == 0)
        Merge(T, K, T);
    else
    {
        Node * L = NULL, * R = NULL;
        Split(T, L, R, i);
        Merge(L, L, K);
        Merge(T, L, R);
    }
}
int main()
{
    srand(time(0));
    int n, Mx = 0;
    Node * T = new Node;
    scanf("%d", &n);
    for (int i = 1; i <= n; i++)
    {
        int a, c;
        scanf("%d%d", &a, &c);
        if (i == 1)
            T->a = T->mx = a, T->p = rand(), T->sz = T->id = 1;
        else
        {
            int j = Find(T, a) + 1;
            Insert(T, max(j, i - 1 - c), a, i);
        }
    }
    DFS(T);
    return (0);
}