/* Author: Dhruv Rastogi */
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define int long long
#define all(sdk) sdk.begin(),sdk.end()
#define mll map<int, int>
#define pb push_back
#define rep(i,a,b) for(int i=a;i<b;++i)
#define repd(i,a,b) for(int i=a;i>=b;--i)
#define mp make_pair
#define hell 1000000007
#define endl '\n'
#define vvll vector<vector<int> >
#define vll vector<int>
#define mint map<int,int> 
#define sz(x) (int)x.size()
#define sll set<int>
#define pll pair<int,int>
#define F first
#define S second
const long double PI = acos(-1.0);



void solve(){   
    int n,d;
    cin>>n>>d;
    int a=n-1;
    int depth=1;
    int cur=2;
    int mn=0;
    while(a){
        int diff=min(a,cur);
        mn+=depth*diff;
        a-=diff;
        cur*=2;
        ++depth;
    }
    int mx=n*(n-1)/2;
    if(d<mn or d>mx){
        cout<<"NO"<<endl;
        return;
    }
    cout<<"YES"<<endl;
    int par[n+3];
    int cnt[n+3];
    memset(cnt,0,sizeof cnt);
    vector<vector<int> > levels(n);
    rep(i,0,n){
        levels[i].pb(i+1);
    }
    rep(i,2,n+1){
        par[i]=i-1;
        cnt[i-1]++;
    }
    cur=n;
    while(mx>d){
        int newpar=-1;
        int newlevel=-1;
        repd(i,cur-2,0){
            if(cur-1-(i+1)>mx-d){
                break;
            }
            bool ok=0;
            for(int j:levels[i]){
                if(cnt[j]<2){
                    newpar=j;
                    newlevel=i+1;
                }   
            }
        }
        --cnt[cur-1];
        cnt[newpar]++;
        par[cur]=newpar;
        mx-=cur-1-newlevel;
        //cout<<cur<<" assigned to "<<newpar<<", new answer: "<<mx<<endl;
        levels[newlevel].pb(cur);
        --cur;
    }
    rep(i,2,n+1){
        cout<<par[i]<<' ';
    }
    cout<<endl;
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t=1;
    cin>>t;
    while(t--){
        solve();
    }
    return 0;
}