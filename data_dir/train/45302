#include <bits/stdc++.h>

using namespace std;

const int N = 65539;
pair <int , int> p[N];
queue <int> q;
vector <int> v[N];
int a[N];
map<pair<int,int>,bool> vis;

#if 0
void dfs(int i)
{
    if(vis[i])
        return;
    vis[i] = true;
    int sz = v[i].size();
    for(int j=0 ; j<sz ; ++j)
        if(!vis[v[i][j]])
            printf("%d %d\n" , i , v[i][j]);
}
#endif // 0

int main()
{
    int n;
    scanf("%d" , &n);
    for(int i=0 ; i<n ; ++i)
    {
        scanf("%d%d" , &p[i].first , &p[i].second);
        if(p[i].first == 1)
            q.push(i);
    }
    int res = 0;
    while(!q.empty())
    {
        int temp = q.front();
        q.pop();
        if(p[temp].first == 1)
        {
            v[temp].push_back(p[temp].second^a[temp]);
            v[p[temp].second^a[temp]].push_back(temp);
            res++;
            a[p[temp].second^a[temp]] ^= temp;
            p[p[temp].second^a[temp]].first--;
            if(p[p[temp].second^a[temp]].first == 1)
                q.push(p[temp].second^a[temp]);
        }
    }
    printf("%d\n" , res);
    for(int i=0 ; i<n ; ++i)
    {
        int sz = v[i].size();
        for(int j=0 ; j<sz ; ++j)
            if(!vis[make_pair(i,v[i][j])])
            {
                printf("%d %d\n" , i , v[i][j]);
                vis[make_pair(i,v[i][j])] = true;
                vis[make_pair(v[i][j],i)] = true;
            }
    }
    return 0;
}
