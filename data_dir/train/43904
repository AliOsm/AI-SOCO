#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.1415926535897
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned

int t[2][1600100];
int k;
vector<int> all;

int getMin(int v, int l, int r)
{
	l += k;
	r += k;
	int res = 2000000000;
	for (; l <= r; l = (l + 1) / 2, r = (r - 1) / 2)
		res = MIN(res, MIN(t[v][l], t[v][r]));
	return res;
}

void upd(int v, int p, int val)
{
	p += k;
	t[v][p] = val;
	p /= 2;
	while (p)
	{
		t[v][p] = MIN(t[v][p + p], t[v][p + p + 1]);
		p /= 2;
	}
}

char s[200100][3];
int x[200100];
int y[200100];
set<int> was;

int main() {
#ifdef Fcdkbear
	freopen("in.txt", "r", stdin);
	//freopen("in.txt", "w", stdout);
	double beg = clock();
#endif

	int n, q;
	scanf("%d%d", &n, &q);
	FOR(i, 0, q)
	{
		scanf("%d%d%s", &x[i], &y[i], s[i]);
		all.push_back(x[i]);
		all.push_back(y[i]);
	}
	sort(all.begin(), all.end());
	all.resize(unique(all.begin(), all.end()) - all.begin());
	k = 1;
	while (k < all.size())
		k += k;
	FOR(i, 0, k + k + 1)
		t[0][i] = t[1][i] = 2000000000;
	FOR(i, 0, q)
	{
		if (was.find(x[i]) != was.end())
		{
			printf("0\n");
			continue;
		}
		was.insert(x[i]);
		if (s[i][0] == 'U')
		{
			int v = lower_bound(all.begin(), all.end(), y[i])-all.begin();
			int res = y[i];
			int l = 0;
			int r = v - 1;
			while (l <= r)
			{
				int m = (l + r) / 2;
				int val = getMin(0, m, v - 1);
				if (val <= x[i])
				{
					res = y[i] - all[m];
					l = m + 1;
				}
				else
					r = m - 1;
			}
			v = lower_bound(all.begin(), all.end(), x[i]) - all.begin();
			upd(1, v, y[i] - res + 1);
			printf("%d\n", res);
		}
		else
		{
			int v = lower_bound(all.begin(), all.end(), x[i]) - all.begin();
			int res = x[i];
			int l = 0;
			int r = v - 1;
			while (l <= r)
			{
				int m = (l + r) / 2;
				int val = getMin(1, m, v - 1);
				if (val <= y[i])
				{
					res = x[i] - all[m];
					l = m + 1;
				}
				else
					r = m - 1;
			}
			v = lower_bound(all.begin(), all.end(), y[i]) - all.begin();
			upd(0, v, x[i] - res + 1);
			printf("%d\n", res);
		}
	}

#ifdef Fcdkbear
	double end = clock();
	fprintf(stderr, "*** Total time = %.3lf ***\n",
		(end - beg) / CLOCKS_PER_SEC);
#endif
	return 0;
}