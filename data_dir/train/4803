/*
ID: hepic
PROG: sabotage
LANG: C++11
*/
#include <bits/stdc++.h>

#define FOR(i, a, b) for(auto i=a; i<=b; ++i)
#define REP(i, a, b) for(auto i=a; i<b; ++i)
#define FORI(i, a, b) for(auto i=a; i!=b+1-2*(a>b); i+=1-2*(a>b))
#define REPI(i, a, b) for(auto i=a-(a>b); i!=b-(a>b); i+=1-2*(a>b))
#define ALL(v) v.begin(),v.end()
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define pf(a) push_front(a)
#define eb(a, b) emplace_back(a, b)
#define fir first
#define sec second
#define what_is(x) cout<<#x<<" is "<<x<<endl;
#define type(x) typeid(x).name()
#define ms(arr, val) memset(arr, val, sizeof(arr))
#define min3(a,b,c) min(min(a,b),c)
#define max3(a,b,c) max(max(a,b),c)
#define SIZE 100010
#define MAXN 1000000007LL
#define NUM 1048576
#define PI acos(-1)
#define open_read1 freopen("a", "r", stdin)
#define open_write1 freopen("b", "w", stdout)
#define open_read freopen("poker.in", "r", stdin)
#define open_write freopen("poker.out", "w", stdout)

using namespace std;

typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair<double, double> PDD;
typedef pair<int, int> PII;
typedef pair<int, PII> PIPII;
typedef pair<PII, PII> PPIIPII;
typedef pair<LL, LL> PLL;
typedef pair<ULL, ULL> PUU;
typedef pair<LL, PLL> PLPLL;
typedef pair<PLL, PLL> PPLLPLL;


template<typename T, typename T1>
ostream& operator << (ostream &out, pair<T, T1> obj)
{
    out<<"("<<obj.first<<","<<obj.second<<")";
    return out;
}


template<typename T, typename T1>
ostream& operator << (ostream &out, map<T, T1> cont)
{
    typename map<T, T1>::const_iterator itr = cont.begin();
    typename map<T, T1>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, set<T> cont)
{
    typename set<T>::const_iterator itr = cont.begin();
    typename set<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T>
ostream& operator << (ostream &out, multiset<T> cont)
{
    typename multiset<T>::const_iterator itr = cont.begin();
    typename multiset<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, template<typename ELEM, typename ALLOC=allocator<ELEM>> class CONT>
ostream& operator << (ostream &out, CONT<T> cont)
{
    typename CONT<T>::const_iterator itr = cont.begin();
    typename CONT<T>::const_iterator ends = cont.end();

    for(; itr!=ends; ++itr)
        out<<*itr<<" ";
    out<<endl;

    return out;
}


template<typename T, unsigned int N, typename CTy, typename CTr>
typename enable_if<!is_same<T, char>::value, basic_ostream<CTy, CTr> &>::type
operator << (basic_ostream<CTy, CTr> &out, const T (&arr)[N])
{
     REP(i, 0, N)
        out<<arr[i]<<" ";
    out<<endl;

    return out;
}


template<typename T>
T gcd(T a, T b)
{
    T min_v = min(a, b);
    T max_v = max(a, b);

    while(min_v)
    {
        T temp = max_v % min_v;
        max_v = min_v;
        min_v = temp;
    }

    return max_v;
}


template<typename T>
T lcm(T a, T b)
{
    return (a*b) / gcd(a, b);
}


template<typename T>
T fast_exp_pow(T base, T exp, T mod)
{
    LL res = 1;

    while(exp)
    {
        if(exp&1)
        {
            res *= base;
            res %= mod;
        }

        exp >>= 1;
        base *= base;
        base %= mod;
    }

    return res;
}

/*#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################*/

int N, M, answer = -1;
int coord_I[] = {0, 0, 1, -1}, coord_J[] = {1, -1, 0, 0};
int min_dist[1010][1010], min_dist_1[1010][1010];
int min_dist_2[1010][1010], min_dist_3[1010][1010];
char board[1010][1010];
priority_queue<PIPII, vector<PIPII>, greater<PIPII>> que;


int bfs()
{
    while(!que.empty())
    {
        PII coord = que.top().sec;
        int cost = que.top().fir;
        que.pop();

        REP(a, 0, 4)
        {
            int new_i = coord.fir + coord_I[a];
            int new_j = coord.sec + coord_J[a];

            if(new_i < 0  ||  new_i >= N  ||  new_j < 0  ||  new_j >= M  ||
               board[new_i][new_j] == '#')
                    continue;

             int new_cost = cost;

            if(board[new_i][new_j] == '.')
                ++new_cost;

            if(min_dist[new_i][new_j] == -1  ||  min_dist[new_i][new_j] > new_cost)
            {
                min_dist[new_i][new_j] = new_cost;
                que.push(mp(new_cost, mp(new_i, new_j)));
            }
        }
    }
}


void start_bfs(char num, int min_dist_curr[1010][1010])
{
    REP(i, 0, N)
        REP(j, 0, M)
        {
            if(board[i][j] == num)
            {
                min_dist[i][j] = 0;
                que.push(mp(0, mp(i, j)));
            }
        }

    ms(min_dist, -1);
    bfs();

    REP(i, 0, N)
        REP(j, 0, M)
            min_dist_curr[i][j] = min_dist[i][j];
}




int main()
{
//    open_read1;
//    open_write1;
    scanf("%d%d", &N, &M);

    REP(i, 0, N)
        REP(j, 0, M)
            scanf(" %c", &board[i][j]);

    start_bfs('1', min_dist_1);
    start_bfs('2', min_dist_2);
    start_bfs('3', min_dist_3);

    REP(i, 0, N)
        REP(j, 0, M)
            if(board[i][j] != '#')
            {
                if(min_dist_1[i][j] == -1  ||  min_dist_2[i][j] == -1  ||  min_dist_3[i][j] == -1)
                    continue;

                int val = min_dist_1[i][j] + min_dist_2[i][j] + min_dist_3[i][j];

                if(board[i][j] == '.')
                    val -= 2;

                answer = (answer == -1 ? val : min(answer, val));
            }


    printf("%d\n", answer);
    return 0;
}
