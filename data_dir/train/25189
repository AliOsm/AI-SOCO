#include<bits/stdc++.h>
//#define int long long
using namespace std;
const int N=1e5+5;
vector<int> v[N];
int tin[N],tout[N];
int p[N],g[N];
int jump[N][22];
int t1,t2;
int n,m;
int x,y;
int glub[N];
int rast,cur,o,curv;
bool pr(int x,int y)
{
    return(tin[x]<=tin[y] && tout[x]>=tout[y]);
}

int lca(int x,int y)
{
    if(pr(x,y))return x;
    if(pr(y,x))return y;
    for(int j=17;j>=0;--j)
    {
        if(jump[x][j]==0)continue;
        if(!pr(jump[x][j],y))x=jump[x][j];
    }
    return jump[x][0];
}



void dfs(int x,int pr,int z)
{
    t1++;
    tin[x]=t1;
    jump[x][0]=pr;
    p[x]=pr;
    g[x]=z;
    for(int i=1;i<=17;++i)
        jump[x][i]=jump[jump[x][i-1]][i-1];
    glub[x]=1;
    for(int i=0;i<v[x].size();++i)
    {
        int to=v[x][i];
        if(to==pr)continue;
        dfs(to,x,z+1);
        glub[x]+=glub[to];
    }
    t1++;
    tout[x]=t1;
}


int prig(int x,int z)
{
    for(int j=17;j>=0;j--)
    {
        if(z==0)break;
        if(jump[x][j]==0)continue;
        int y=jump[x][j];
        ///g[y]>=g[x]-z
        int cur=g[x]-g[y];
        if(cur<=z)
        {
            z-=cur;
            x=y;
        }
    }
    return x;
}

int solve(int v1,int x,int y,int kek)
{

    int res=glub[v1];
    if(v1==kek)res+=n-glub[v1];
  //  cout<<res<<endl;
    if(pr(v1,x))
    {
        int r=g[x]-g[v1]-1;
        x=prig(x,r);
        res-=glub[x];
      //  cout<<res<<' '<<x<<endl;
    }
    if(pr(v1,y))
    {
        int r=g[y]-g[v1]-1;
        y=prig(y,r);
        res-=glub[y];
      //  cout<<res<<' '<<y<<endl;
    }
    return res;
}

main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin>>n;
    for(int i=1;i<n;++i)
    {
        cin>>x>>y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    dfs(1,0,1);
    cin>>m;
    for(int i=1;i<=m;++i)
    {
        cin>>x>>y;
        if(x==y)
        {
            cout<<n<<"\n";
            continue;
        }
        o=lca(x,y);

        rast=g[x]-g[o]+g[y]-g[o];
        if(rast%2==1)
        {
            cout<<0<<"\n";
            continue;
        }
        cur=rast>>1;
        curv=-1;
        if(g[x]>=g[y])
        {
            curv=prig(x,cur);
        }else
        {
            curv=prig(y,cur);
        }
        //cout<<x<<' '<<y<<' '<<o<<"\n";
        cout<<solve(curv,x,y,o)<<"\n";
    }
}
