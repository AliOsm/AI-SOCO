#include <bits/stdc++.h>
using namespace std;
#define sc(x)            scanf("%d",&x)
#define scc(x)           scanf("%c",&x)
#define scl(x)           scanf("%lld",&x)
#define sz(v)	     	(v.size())
#define mem(v, d)		memset(v, d, sizeof(v))
#define oo				2000000100
#define OO				4000000000000000100
#define PI 3.14159265
typedef unsigned int uint;
typedef long long ll;
//-----------------------------------------------------
#define N 5005
const int MOD = 1e9 + 7;

int dX[] = {0,0,1,-1};
int dY[] = {1,-1,0,0};

//ll GCD(ll num,ll ones) { return !ones ? num : GCD(ones,num%ones); }
//ll lcm(ll a, ll b) { return (a / GCD(a, b)) * b; }
//double Len(int x,int y,int X,int Y) { return sqrt((X-x)*(X-x)+(Y-y)*(Y-y)); }
/*int fastpower(int a,int x)
{
    if(x == 1) return a;
    if (x==0) return 1;
    int p = fastpower(a,x/2);
    if(x%2) return ((p%m)*(p%m)*(a%m))%m;
s}*/
//----------------------- ------------------------
int MM[N],XOR[N],dp[N],a[N],nxt[N],n;
bool v[N],startat[N];
int solve(int idx)
{
    if(idx==n) return 0;
    int& ret = dp[idx];
    if(~ret) return ret;
    ret = 0;
    if(!startat[idx]) return ret = solve(idx+1);
    return ret = max(solve(nxt[idx]),solve(MM[a[idx]]+1)+XOR[a[idx]]);
}
int main()
{
#ifndef ONLINE_JUDGE
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    sc(n);
    for(int i=0;i<n;++i) sc(a[i]),MM[a[i]]=i;
    set<int>st;
    vector<int>bdayat;
    int id =0;
    for(int i=0;i<n;++i)
    {
        int x = a[i];
        int stp = MM[x];
        if(v[x]) continue;
        for(int j=i;j<=stp;++j) stp = max(stp,MM[a[j]]),MM[x]=stp,st.insert(a[j]);
        bool newseg = 1;
        for(set<int>::iterator it = st.begin();it!=st.end();++it)
        {
            if(v[*it])
            {
                XOR[x] = XOR[*it];
                newseg = 0;
                break;
            }
            XOR[x]^=(*it);
        }
        st.clear();
        v[x] = 1;
        if(newseg)
        {
            bdayat.push_back(i);
            nxt[i] = i+1;
            startat[i]=1;
            if(sz(bdayat)==1) continue;
            nxt[bdayat[sz(bdayat)-2]] = i;
        }
    }
    //for(int i=0;i<n;++i) cout<<nxt[i]<<" ";
    mem(dp,-1);
    cout<<solve(0);

    return 0;
}