/* Author haleyk10198 */
/* �@��:  haleyk10198 */
/* CF handle: haleyk100198*/
/* FOR ACM-ICPC WF*/
#include <bits/stdc++.h>

#define MOD 1000000007
#define LINF (1LL<<60)
#define INF 2147483647
#define PI 3.1415926535897932384626433
#define ll long long
#define pii pair<int,int>
#define mp(x,y) make_pair((x),(y))
#define pb(x) push_back((x))
#define vi vector<int>
#define vvi vector<vi>
#define EPS 1e-9

using namespace std;

int n, a[200010], T[800010];

void getR(int x, int y, int &res, int id = 1, int l = 0, int r = n){
	if(res != -1 || T[id] == 0 || l >= y || x >= r) return;
	if(l+1 == r){
		res = l;
		return;
	}
	getR(x, y, res, id<<1|1, l+r>>1, r);
	getR(x, y, res, id<<1, l, l+r>>1);
	return;
}

void getL(int x, int y, int &res, int id = 1, int l = 0, int r = n){
	if(res != -1 || T[id] == 0 || l >= y || x >= r) return;
	if(l+1 == r){
		res = l;
		return;
	}
	getL(x, y, res, id<<1, l, l+r>>1);
	getL(x, y, res, id<<1|1, l+r>>1, r);
	return;
}

int ask(int id = 1, int l = 0, int r = n){
	if(l+1 == r){
		T[id] = 0;
		return l;
	}
	int ret;
	if(T[id<<1] >= T[id<<1|1]) ret = ask(id<<1, l, l+r>>1);
	else ret = ask(id<<1|1, l+r>>1, r);
	
	T[id] = max(T[id<<1], T[id<<1|1]);
	return ret;
}

int get(int pos, int id = 1, int l = 0, int r = n){
	if(l+1 == r) return T[id];
	int mid = l+r>>1;
	if(pos < mid) return get(pos, id<<1, l, mid);
	else return get(pos, id<<1|1, mid, r);
}

void upd(int pos, int dx, int id = 1, int l = 0, int r = n){
	if(l+1 == r){
		T[id] += dx;
		return;
	}
	int mid = l+r>>1;
	if(pos < mid) upd(pos, dx, id<<1, l, mid);
	else upd(pos, dx, id<<1|1, mid, r);
	T[id] = max(T[id<<1], T[id<<1|1]);
	return;
}

int main(){
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	ios_base::sync_with_stdio(false);
	
	cin >> n;
	for(int i = 0; i < n; i++)
		cin >> a[i];
	
	for(int i = 0, j = 0; i < n; i=j){
		while(j < n && a[i] == a[j])
			j++;
		upd(i, j-i);
	}
	
	int res = 0;
	for(res = 0; T[1]; res++){
		int pos = ask();
		int l, r; l = r = -1;
		getR(0, pos, l), getL(pos, n, r);
		if(l == -1 || r == -1) continue;
		if(a[l] == a[r]){
			int k = get(r);
			upd(l, k);
			upd(r, -k);
		}
	}
		
	cout << res << endl;
	
	return 0;
}

