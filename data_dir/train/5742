//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-7;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i,n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

int n, k, p;

vector<int> b[2];
vector<int> res[100005];

void die(){
  puts("NO");
  exit(0);
}

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  scanf("%d %d %d", &n, &k, &p);
  forn(i, n){
    int x; scanf("%d", &x);
    b[x % 2].pb(x);
  }
  forn(i, k - p){
    if(b[1].empty()) die();
    res[i].pb(b[1].back());
    b[1].pop_back();
  }
  int pos = k - p;
  forn(i, p){
    if(!b[0].empty()){
      res[pos + i].pb(b[0].back());
      b[0].pop_back();
    } else {
      if(b[1].size() < 2) die();
      res[pos + i].pb(b[1].back());
      b[1].pop_back();
      res[pos + i].pb(b[1].back());
      b[1].pop_back();
    }
  }
  if(b[1].size() & 1) die();
  puts("YES");
  forn(i, b[1].size()) res[0].pb(b[1][i]);
  forn(i, b[0].size()) res[0].pb(b[0][i]);
  forn(i, k){
    printf("%d ", (int)res[i].size());
    forn(j, res[i].size()) printf("%d ", res[i][j]);
    printf("\n");
  }
  return 0;
}
