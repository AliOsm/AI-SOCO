//#define ONLINE_JUDGE

#if defined(ONLINE_JUDGE)
#define _SECURE_SCL 0
#endif

#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <functional>
#include <memory>
#include <cmath>
#include <climits>
#include <numeric>
#include <tuple>
#include <memory.h>
#include <stdint.h>

#if !defined(__GNUC__)
#else // !defined(__GNUC__)
#define _CrtDbgBreak() __builtin_trap()
#endif // !defined(__GNUC__)

#if defined(ONLINE_JUDGE)
#define LOCAL_TEST 0
#else 
#define LOCAL_TEST 1
#endif

#if LOCAL_TEST
struct AssertsCounter
{
    AssertsCounter(): counter(0) {}
    ~AssertsCounter() { std::cout << std::endl << "DIAG: " << (counter == 0 ? "OK" : "!!!") << " Asserts count: " << counter << std::endl; }
    void Increment() { counter++; }
    uint32_t counter;
};
AssertsCounter g_assertsCounter;
#define LOCAL_ASSERT(expr) { if (!(expr)) {std::cout << "ASSERT FAILED: '" << #expr << "'" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#define LOCAL_ASSERT_EQ(expr1, expr2) { if ((expr1) != (expr2)) {std::cout << "ASSERT FAILED: '" << #expr1 << "' == '" << #expr2 << "' (" << (expr1) << " vs " << (expr2) << "')" << std::endl; g_assertsCounter.Increment(); _CrtDbgBreak(); } }
#else
#define LOCAL_ASSERT(expr)
#define LOCAL_ASSERT_EQ(expr1, expr2)
#endif

typedef std::string string8_t;

typedef std::vector<size_t> vector_size_t;
typedef std::vector<int32_t> vector_int32_t;
typedef std::vector<uint32_t> vector_uint32_t;
typedef std::vector<int64_t> vector_int64_t;
typedef std::vector<uint64_t> vector_uint64_t;

typedef std::vector<vector_size_t> vector_2d_size_t;
typedef std::vector<string8_t> vector_string8_t;

typedef std::set<size_t> set_size_t;
typedef std::set<int32_t> set_int32_t;
typedef std::set<uint32_t> set_uint32_t;
typedef std::set<int64_t> set_int64_t;
typedef std::set<uint64_t> set_uint64_t;

typedef std::set<string8_t> set_string8_t;
typedef std::multiset<string8_t> multiset_string8_t;

// Auxiliary functions definition
// 
template<typename T> inline T Abs(const T a) { return a < 0 ? -a : a; }
template<typename T> inline T Min(const T a, const T b) {return a < b ? a : b;}
template<typename T> inline T Max(const T a, const T b) {return a > b ? a : b;}
template<typename T> inline void UpdateMin(T& a, const T b) {a = Min(a, b);}
template<typename T> inline void UpdateMax(T& a, const T b) {a = Max(a, b);}

static const double eps = 1.0e-09;
template<typename T> inline bool IsEqual(const T a, const T b) { return Abs(a - b) < eps; }
template<typename T> inline bool IsGreater(const T a, const T b) { return a > b + eps; }
template<typename T> inline bool IsLess(const T a, const T b) { return a + eps < b; }

template<typename T> inline string8_t ToStr(const T& val) { std::ostringstream ostr; ostr << val; return ostr.str(); }
template<typename T> inline bool FromStr(const string8_t& str, T& val) {std::istringstream istr(str); istr >> val; return !!istr; }

template<typename T> inline std::istream& operator>>(std::istream& ist, std::vector<T>& data)
{
    for (size_t i = 0; i < data.size(); i++) { ist >> data[i]; }
    return ist;
}

template<typename T> inline std::ostream& operator<<(std::ostream& ost, const std::vector<T>& data)
{
    for (size_t i = 0; i < data.size(); i++) { if (i != 0) { ost << ' '; } ost << data[i]; }
    return ost;
}

#if defined(ONLINE_JUDGE)
template<size_t id> class StopWatch { };
#else
#include <library/lib_stopwatch.h>
#include <library/lib_random.h>
library::random::Rand g_rnd;
#endif

const char EmptyCell = '.';

const size_t dx[4] = {(size_t)(-1), +1, 0, 0};
const size_t dy[4] = {0, 0, (size_t)(-1), +1};

typedef std::pair<size_t, size_t> pair_size_t;
typedef std::set<pair_size_t> set_pair_size_t;

void PrintField(const vector_string8_t& f)
{
    LOCAL_ASSERT(f.size() > 2);
    LOCAL_ASSERT(f[0].size() > 2);
    const size_t n = f.size() - 2;
    const size_t m = f[1].size() - 2;
    for (size_t i = 0; i < n; i++)
    {
        std::cout << f[i + 1].substr(1, m) << std::endl;
    }
}

bool IsSeparateCell(const vector_string8_t& f, const size_t x, const size_t y)
{
    LOCAL_ASSERT(f[x][y] == EmptyCell);
    for (size_t i = 0; i < 4; i++)
    {
        if (f[x + dx[i]][y + dy[i]] == EmptyCell)
            return false;
    }
    return true;
}

bool HasUniquePosition(const vector_string8_t& f, const size_t x, const size_t y)
{
    LOCAL_ASSERT(f[x][y] == EmptyCell);
    size_t count = 0;
    for (size_t i = 0; i < 4; i++)
    {
        if (f[x + dx[i]][y + dy[i]] == EmptyCell)
            count += 1;
    }

    return count == 1;
}

void MarkAsBusy(vector_string8_t& f, const size_t x, const size_t y)
{
    LOCAL_ASSERT(f[x][y] == EmptyCell);
    LOCAL_ASSERT(HasUniquePosition(f, x, y));

    if (f[x + 1][y] == EmptyCell)
    {
        f[x][y] = '^'; f[x + 1][y] = 'v';
    }
    else if (f[x - 1][y] == EmptyCell)
    {
        f[x][y] = 'v'; f[x - 1][y] = '^';
    }
    else if (f[x][y + 1] == EmptyCell)
    {
        f[x][y] = '<'; f[x][y + 1] = '>';
    }
    else if (f[x][y - 1] == EmptyCell)
    {
        f[x][y] = '>'; f[x][y - 1] = '<';
    }
}

void AddNeighbours(const vector_string8_t& f, set_pair_size_t& q, const size_t x, const size_t y)
{
    const size_t n = f.size() - 2;
    const size_t m = f[1].size() - 2;

    for (int i = -2; i <= +2; i++)
    {
        for (int j = -2; j <= +2; j++)
        {
            const size_t zx = x + i;
            const size_t zy = y + j;

            if (zx < 1 || zx > n)
                continue;
            if (zy < 1 || zy > m)
                continue;

            if (f[zx][zy] != EmptyCell)
                continue;
            if (HasUniquePosition(f, zx, zy))
                q.insert(pair_size_t(zx, zy));
        }
    }
}

bool TryFindUniqueAns(vector_string8_t& f)
{
    LOCAL_ASSERT(f.size() > 2);
    LOCAL_ASSERT(f[0].size() > 2);
    const size_t n = f.size() - 2;
    const size_t m = f[1].size() - 2;

    size_t freeCellsCount = 0;
    set_pair_size_t q;
    for (size_t x = 1; x <= n; x++)
    {
        for (size_t y = 1; y <= m; y++)
        {
            if (f[x][y] == EmptyCell)
            {
                freeCellsCount += 1;
                if (IsSeparateCell(f, x, y))
                    return false;
                if (HasUniquePosition(f, x, y))
                    q.insert(pair_size_t(x, y));
            }
        }
    }

    if (freeCellsCount == 0)
        return true;

    while (!q.empty())
    {
        const size_t x = q.begin()->first;
        const size_t y = q.begin()->second;
        q.erase(q.begin());

        if (f[x][y] != EmptyCell)
            continue;

        if (IsSeparateCell(f, x, y))
            return false;

        LOCAL_ASSERT(HasUniquePosition(f, x, y));
        MarkAsBusy(f, x, y);
        freeCellsCount -= 2;
        AddNeighbours(f, q, x, y);
    }

    if (freeCellsCount > 0)
        return false;

    return true;
}

bool Solve(std::istream& ist, std::ostream& ost, const bool multipleTestMode)
{
    StopWatch<1> sw; (void)sw;

    // 
    size_t n, m;
    ist >> n >> m;

    if (multipleTestMode && !ist)
        return false;

#if LOCAL_TEST
    ost << std::endl << "Next test" << std::endl;
#endif

    // 
    vector_string8_t f(n + 2);
    f[0] = string8_t(m + 2, '*');
    f[n + 1] = f[0];
    for (size_t i = 0; i < n; i++)
    {
        string8_t s;
        ist >> s;

        s = '*' + s + '*';
        f[i + 1] = s;
    }

    vector_string8_t ans = f;
    const bool isUnique = TryFindUniqueAns(ans);
    if (isUnique)
    {
        PrintField(ans);
        return multipleTestMode;
    }

    ost << "Not unique" << std::endl;
    return multipleTestMode;
}

int main(int argc, const char *argv[])
{
    std::ios_base::sync_with_stdio(false);
    std::istream* ist = &std::cin;
    std::ostream* ost = &std::cout;
    
    std::unique_ptr<std::istream> fileInput;
    
    if (argc > 1)
    {
        fileInput.reset(new std::ifstream(argv[1]));
        if (!(*fileInput))
        {
            std::cout << "File not found: " << argv[1] << std::endl;
        }
        ist = fileInput.get();
    }    
    
#if defined(ONLINE_JUDGE)
    Solve(*ist, *ost, false);
#else
    while(Solve(*ist, *ost, true)) {};
#endif
}
