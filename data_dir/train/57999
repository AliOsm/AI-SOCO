/*-----Deep D. Savani------------
-------DAIICT,INDIA--------------
*/
#include<bits/stdc++.h>
#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define mod 1000000007
#define deb(x) cout<<#x<<" : "<<x<<endl;
#define deb2(x,y) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<endl;
#define deb3(x,y,z) cout<<#x<<" : "<<x<<"\t"<<#y<<" : "<<y<<"\t"<<#z<<" : "<<z<<endl;
#define nax 1000010
#define FIO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
typedef long long ll;

using namespace std;

long long modulo(long long base,long long exponent,long long modulus);
long long choose(ll n,ll k);
ll inverse(ll a,ll m);
void build();
ll ncr(ll n,ll r);
vector<ll> fact(nax);


vector<ll> add[nax];
vector<ll> rm[nax];

ll tree[4*nax];
ll lazy[4*nax];

void update(ll node,ll nl,ll nr,ll l,ll r,ll ele)
{
	if(lazy[node]!=0)
	{
		tree[node]+=lazy[node];
		if(nl!=nr)
		{
			lazy[2*node+1]+=lazy[node];
			lazy[2*node+2]+=lazy[node];
		}
		lazy[node]=0;
	}
	if(nl>nr || nl>r || l>r || l>nr)
		return;

	if(l<=nl && nr<=r)
	{
		tree[node]+=ele;
		if(nl!=nr)
		{
			lazy[2*node+1]+=ele;
			lazy[2*node+2]+=ele;
		}
		return;
	}
	ll mid=(nl+nr)/2;

	update(2*node+1,nl,mid,l,r,ele);
	update(2*node+2,mid+1,nr,l,r,ele);

	tree[node]=max(tree[2*node+1],tree[2*node+2]);
}

ll querry(ll node,ll nl,ll nr,ll l,ll r)
{
	if(lazy[node]!=0)
	{
		tree[node]+=lazy[node];
		if(nl!=nr)
		{
			lazy[2*node+1]+=lazy[node];
			lazy[2*node+2]+=lazy[node];
		}
		lazy[node]=0;
	}
	if(nl>nr || nl>r || l>r || l>nr)
		return -mod;

	if(l<=nl && nr<=r)
	{
		return tree[node];
	}

	ll mid=(nl+nr)/2;

	ll p1=querry(2*node+1,nl,mid,l,r);
	ll p2=querry(2*node+2,mid+1,nr,l,r);

	return max(p1,p2);
}

int main() {

    FIO
    //build();

    ll n,m;
    cin>>n>>m;

    vector<ll> a(n);
    for(int i=0;i<n;i++)
    	cin>>a[i];

    vector< pair<ll,ll> > b(m);
    for(int i=0;i<m;i++)
    {
    	ll l,r;
    	cin>>l>>r;

    	l--;
    	r--;

    	b[i]=mp(l,r);
    	add[l].pb(i);
    	rm[r+1].pb(i);
    }

    for(int i=0;i<n;i++)
    	update(0,0,n,i,i,a[i]);

    //deb(tree[0]);
    ll ans=0;

    set<ll> sans;
    set<ll> s;
    for(int i=0;i<n;i++)
    {

    	for(int j=0;j<add[i].size();j++)
    	{
    		update(0,0,n,b[add[i][j]].ff,b[add[i][j]].ss,-1);
    		s.insert(add[i][j]);
    	}

    	for(int j=0;j<rm[i].size();j++)
    	{
    		update(0,0,n,b[rm[i][j]].ff,b[rm[i][j]].ss,1);
    		s.erase(rm[i][j]);
    	}

    	ll ele=querry(0,0,n,i,i);
    	
    	if(ans<(querry(0,0,n,0,i-1)-ele))
    	{
    		ans=querry(0,0,n,0,i-1)-ele;
    		sans=s;
    	}
    	if(ans<(querry(0,0,n,i+1,n-1)-ele))
    	{
    		ans=querry(0,0,n,i+1,n-1)-ele;
    		sans=s;
    	}
    }
    cout<<ans<<endl;
    cout<<sans.size()<<endl;
    for(auto it=sans.begin();it!=sans.end();it++)
    	cout<<(*it)+1<<" ";








    return 0;
}

ll ncr(ll n,ll r)
{
    if(r>n || r<0 || n<0)
        return 0;
    ll ans=fact[n];
    ll temp=(fact[n-r]*fact[r])%mod;
    ans=(ans*inverse(temp,mod))%mod;
    return ans;
}

void build()
{
    fact[0]=1;
    for(ll i=1;i<nax;i++)
        fact[i]=(fact[i-1]*i)%mod;

    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
}

long long modulo(long long base,long long exponent,long long modulus)
{
    if(modulus ==1)
        return 0;

    long long result=1;
    base=base % modulus;
    while(exponent>0)
    {
        if(exponent%2==1)
        {
            result=(result*base) % modulus;

        }
        exponent=exponent>>1;
        base = (base*base) % modulus;
    }
    return result;
}

long long choose(ll n,ll k)
{
    if(k==0)  return 1;
    return (n* choose(n-1,k-1))/k;
}

void EE(ll a,ll b,ll &co1,ll &co2)
{
    if(a%b==0)
    {
        co1=0;
        co2=1;
        return;
    }
    EE(b,a%b,co1,co2);
    ll temp=co1;
    co1=co2;
    co2=temp-co2*(a/b);
}

ll inverse(ll a,ll m)
{
    ll x,y;
    EE(a,m,x,y);
    if(x<0) x+=m;
    return x;
}