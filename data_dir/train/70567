#include<bits/stdc++.h>
using namespace std;

int p[100005];
int cnt[100005];
vector<int> g[100005];
double ans[100005];
int numChildren[100005];
void dfs(int node) {
	cnt[node] = 1;
	for (int i = 0; i < int(g[node].size()); i++) {
		int child = g[node][i];
		if (child == p[node])
			continue;
		dfs(child);
		cnt[node] += cnt[child];
	}
}



void solve(int node) {
	if (p[node] != -1)
		ans[node] += ans[p[node]] + 1;
	for (int i = 0; i < int(g[node].size()); i++) {
		int child = g[node][i];
		if (child == p[node])
			continue;
		long long sum = cnt[node] - cnt[child] - 1;
		ans[child] += (sum * (numChildren[node])) / 2.0 / (numChildren[node] * 1.0);
	}
	for (int i = 0; i < int(g[node].size()); i++) {
		int child = g[node][i];
		if (child == p[node])
			continue;
		solve(child);
	}
}

int main() {
	ios::sync_with_stdio(false);
	int n; scanf("%d", &n);
	for (int i = 1; i < n; i++) {
		scanf("%d", p + i);
		--p[i];
		g[p[i]].push_back(i);
		numChildren[p[i]]++;
	}
	ans[0] = 1;
	p[0] = -1;
	dfs(0);
	solve(0);
	for (int i = 0; i < n; i++)
		printf("%.10lf ", ans[i]);
	puts("");



	return 0;
}
