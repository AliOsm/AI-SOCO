#pragma GCC optimize ("Ofast")
#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define int long long int
#define pb push_back
#define fi first
#define se second
#define deb cerr << "Line no." << __LINE__
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
const int mod = 1e9 + 7;
const int mod1 = 998244353;
typedef long double f80;
#ifndef LOCAL
#define endl '\n'
#endif
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
    uniform_int_distribution<int> uid(l, r);
    return uid(rng);
}
const int N = 2e5 + 5;
vector<pii> v;
int dsu[N], sz[N], a[N];
bool active[N];
int odd = 0;
int root(int u){
  return (dsu[u] == u) ? u : (dsu[u] = root(dsu[u]));
}
int n;
void uni(int u,int v){
  if(u < 1 || u > n) return;
  u = root(u), v = root(v);
  if(u == v) return;
  odd -= (sz[u] & 1);
  odd -= (sz[v] & 1);
  sz[v] += sz[u];
  odd += (sz[v] & 1);
  dsu[u] = v;
}
void solve(){
  cin >> n;
  fr(i, 1, n) dsu[i] = i, sz[i] = 1;
  fr(i, 1, n) cin >> a[i], v.pb({a[i], i});
  sort(all(v));
  int pt = 0;
  while(1){
    int val = v[pt].fi;
    while(pt < n && v[pt].fi == val){
      active[v[pt].se] = 1;
      odd++;
      if(active[v[pt].se - 1]){
        uni(v[pt].se - 1, v[pt].se);
      }
      if(active[v[pt].se + 1]){
        uni(v[pt].se, v[pt].se + 1);
      }
      pt++;
    }
    if(odd && pt != n){
      cout << "NO" << endl;
      return;
    }
    if(pt == n) break;
  }
  cout << "YES" << endl;
}
signed main(){
  IO;
  #ifdef LOCAL
    freopen("inp.txt","r", stdin);
    // freopen("out.txt", "w", stdout);
  #endif
  clock_t clk = clock();
  int t = 1;
  // cin >> t;
  while(t--){
    solve();
  }
  cerr << endl << (double)(clock() - clk) / CLOCKS_PER_SEC;
  return 0;
}