#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#include<x86intrin.h>
#include<bits/stdc++.h>

#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

#define ll long long
#define ld long double
#define pb push_back
#define sz(x) (int)x.size()
#define every(x) x.begin(), x.end()
#define mp make_pair
#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define For(i,x,y) for(int i=x;i<=y;++i)
#define FOr(i,x,y) for(int i=x;i>=y;--i)

using pt = pair<int,int>;
template<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

const int N = 6e5 + 32;
const int mod = 1e9 + 7;
const int inf = 1e9+123;
const double pi = acos(-1);

int n, m, k;
int a[N], b[N], u[N];
vector < int > g[N];
int cur, res;
int ans;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

inline void solve () {
	cin >> n;
	map < ll, ll > dp;
	ll ans = 0;
	For(i, 1, n) {
		int x;
		cin >> x;
		ll res = dp[x-i];
		res += x;
		dp[x-i] = max(dp[x-i], res);
		ans = max(ans, res);
	}
	cout << ans << '\n';
}

int32_t main () {
	int tt = 1;
	//scanf("%d", &tt);
	//cin >> tt;
	for (; tt > 0; --tt) {
		solve();
	}
}