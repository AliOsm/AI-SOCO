#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define rep(i, a, b) for(int i=(a); i<(b); i++)
#define repi(i, a, b) for(int i=(a); i>(b); i--)
#define db(x) (cerr << #x << ": " << (x) << '\n')
#define sync ios_base::sync_with_stdio(false), cin.tie(NULL)
#define tests(t) int t; cin >> t; while(t--)
#define iceil(n, x) (((n) + (x) - 1) / (x))
#define ll long long
#define gcd __gcd
#define eb emplace_back
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define sz size()
#define all(v) (v).begin(), (v).end()
#define uni(v) sort(all(v)); (v).erase(unique(all(v)), (v).end())
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define fi first
#define se second
#define pqueue priority_queue
#define bitcount(x) __builtin_popcount(x)
#define cps CLOCKS_PER_SEC
#define PI acos(-1.0)
#define EPS 1e-9
#define mod 1000000007
using namespace std;
 
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << '\n';
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ','); cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}

template<typename T1, typename T2>
ostream& operator << (ostream& os, const pair<T1, T2>& p) { return os << '(' << p.fi << ", " << p.se << ')'; }

template<typename T>
void printv(const T& v) { for(auto i : v) cerr << i << ' '; cerr << '\n'; }

template<typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;
 
template<typename T>
using maxpq = priority_queue<T>;
 
//All indexing is 0-based
using namespace __gnu_pbds;
template<class key, class cmp = std::less<key>>
using ordered_set = tree<key, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
//methods: find_by_order(k); & order_of_key(k);
//To make it an ordered_multiset, use pairs of (value, time_of_insertion)
//to distinguish values which are similar
 
template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
 
//Returns no. of values x for which ceil(n / x) == y (y must be > 1).
inline ll CC(ll n, ll y) { return iceil(n, y-1) - iceil(n, y); }
 
//Returns no. of values x for which floor(n / x) == y
inline ll FF(ll n, ll y) { return n / y - n / (y+1); }
 
//a and b are assumed to be taken modulo p
inline int add(int a, int b, int p = mod){ int c = a + b; if(c >= p) c -= p; return c; }
inline int sub(int a, int b, int p = mod){ int c = a - b; if(c < 0) c += p; return c; }
inline int mul(int a, int b, int p = mod){ return (a * 1ll * b) % p; }

#define N 200005
#define int ll
// #define trace(...) 42

//SZ[i]: size of the set that the ith element is a root of
//Only valid for root elements
int par[N], Rank[N], SZ[N];
int num_sets;
int n; //number of vertices
//Rank[x] is an upper bound to the height 
//of the subtree roted at node x.
void make_set(int x)
{
    num_sets++;
    par[x]=x;
    Rank[x]=0;
    SZ[x] = 1;
}
 
void init() {
    num_sets = 0;
    for(int i = 0; i < n; i++) make_set(i);
}
 
//returns the representative of the set
//to which x belongs.
int find_set(int x)
{
 
    if(par[x]==x)
        return x;
    else
        return par[x]=find_set(par[x]); 
}
 
//Returns the size of set that the ith vertex is in
int sizeofSet(int i) {
    return SZ[find_set(i)];
}
 
bool merge_sets(int x,int y)
{
    int rx=find_set(x),ry=find_set(y);
    if(rx==ry)
        return 0;
    else{
        num_sets--;
        if(Rank[rx]==Rank[ry])// Anyone can be the others' parent
            par[ry]=rx,Rank[rx]++, SZ[rx]+= SZ[ry];
        else if(Rank[rx]<Rank[ry])
            par[rx]=ry, SZ[ry]+= SZ[rx];
        else
            par[ry]=rx, SZ[rx]+=SZ[ry];
            return 1;
    }
}
  
struct trienode {
    int idx;
    int cnt = 0;
    trienode* ar[2] = {NULL, NULL};
};
 
inline bool bit(int x, int b) {
    return (x >> b) & 1;
}
 
//Uses an improved version of erase() to prevent memory leak
//Rather than deleting nodes make the cnt = 0
struct Trie {
    const int bits = 32; //# bits in the number
    trienode* root = new trienode;
    void insert(int x, int idx) {
        trienode* curr = root;
        for(int i = bits-1; i >= 0; i--) {
            int b = bit(x, i);
            if(curr -> ar[b] == NULL) 
                curr -> ar[b] = new trienode;
            curr = curr -> ar[b];
            curr -> cnt++;
        }
        assert(curr);
        curr -> idx = idx;
    }
 
    int query(int x) {
        trienode* curr = root;
        int ans = 0;
        for(int i = bits-1; i >= 0; i--) {
            int bx = bit(x, i);
            if(curr -> ar[bx] && curr -> ar[bx] -> cnt)
                curr = curr -> ar[bx], ans |= bx << i;
            else
                curr = curr -> ar[!bx], ans |= !bx << i;
        }
        assert(curr);
        return curr -> idx;
    }
 
    void erase(int x) {
        trienode* curr = root;
        vector<trienode*> v;
 
        for(int i = bits-1; i >= 0; i--) {
            int b = bit(x, i);
            (curr -> ar[b] -> cnt)--;
            curr = curr -> ar[b];
        }
    }
};
 
vi adj[N];
int a[N];
ll ans;

main()
{   
    #ifndef ONLINE_JUDGE
        freopen("/home/tarun/Desktop/input.txt", "r", stdin);
     // freopen("/home/tarun/Desktop/output.txt", "w", stdout);
    #endif
    sync;
    clock_t clk = clock();
    cerr << "I will return...\n";

    cin >> n;
    rep(i, 0, n) cin >> a[i];
    
    // trace(n);
    // rep(i, 0, n) trace(i, a[i]);
    
    sort(a, a + n);
    n = unique(a, a + n) - a;
    
    init();
    Trie T;
    
    rep(i, 0, n) T.insert(a[i], i);
    
    while(num_sets > 1) {
        // trace(num_sets);
        rep(i, 0, n) adj[i].clear();
        rep(i, 0, n) adj[find_set(i)].pb(i);
        
        rep(i, 0, n) {
            if(adj[i].empty()) continue;
            for(int j : adj[i]) {
                T.erase(a[j]);
            }
            int mnw;
            pii mnp;
            mnw = 2e9;
            
            for (int j : adj[i]) {
                int k = T.query(a[j]);
                int x = a[j] ^ a[k];
                if(x < mnw) {
                    mnw = x;
                    mnp = {j, k};
                }
            }

            int x, y; tie(x, y) = mnp;
            if(merge_sets(x, y)) ans += a[x] ^ a[y];
            
            for(int j : adj[i]) T.insert(a[j], j);
        }
    }
    
    cout << ans << '\n';


    cerr << "...don't you ever hang your head.\n";
    cerr << "Time (in ms): " << (double)(clock() - clk) * 1000.0 / cps << '\n';
}
 
//Compile using:
//g++ -o filename.exe --std=c++11 filename.cpp
//Use -D CP for defining a macro CP in the local environment


