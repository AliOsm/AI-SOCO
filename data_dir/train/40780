/* winners never quit and quitters never win.
      #swap                                 */
      
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
using namespace std;
using namespace __gnu_pbds;
#pragma GCC optimize ("-O3")
using ll = long long;
using ld = long double;
const ll mod = 1000000007;
const ll inf = 1000000000000000000;
const ll rk = 256;
const ld PI = 3.141592653589793;

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

#define pb push_back
#define mp make_pair
#define vc vector
#define fs first
#define sec second
#define pq priority_queue
#define lb lower_bound
#define ub upper_bound
#define pll pair<ll,ll> 
#define pls pair<ll,string>
#define psl pair<string,ll>
#define plc pair<ll,char>
#define pcl pair<char,ll>
#define pss pair<string,string>
#define all(v) v.begin(),v.end()
#define tol(s) transform(s.begin(),s.end(),s.begin(),::tolower);
#define tou(s) transform(s.begin(),s.end(),s.begin(),::toupper);
#define printclock cerr<<"Time : "<<1000*(ld)clock()/(ld)CLOCKS_PER_SEC<<"ms\n";

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }

void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cerr << *it << " = " << a << endl;
	err(++it, args...);
}

#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define T ll t=0;cin>>t;for(ll test=0;test<t;test++)


 
int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
	//isprime();
	//coeff();
	/*freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);*/
    ll n,m;
    cin>>n>>m;
    if(n==0 and m==0)
    {
        cout<<"0\n";
        exit(0);
    }
    ll x[63]={0};

    for(ll a=0;a<63;a++)
    {
        if((m&(1LL<<a))>0)
            x[a]++;
    }

    bool flag=false;
    for(ll a=62;a>=0;a--)
    {
        ll p=x[a]%2;
        if(p==1 and (n&(1LL<<a))==0)
        {
            if(a==0)
            {
                flag=true;
                break;
            }
            x[a-1]+=2*(x[a]);
            x[a]=0;
        }
        if(a>0 and p==0 and (n&(1LL<<a))==0)
        {
            x[a-1]+=2*(x[a]);
            x[a]=0;
        }
        if(p==0 and (n&(1LL<<a))>0)
        {
            if(x[a]==0 or a==0){
                flag=true;
                break;
            }
            x[a-1]+=2*(x[a]-1);
            x[a]=1;
        }
        if(a>0 and p==1 and (n&(1LL<<a))>0)
        {
            x[a-1]+=2*(x[a]-1);
            x[a]=1;
        }
    }
    if(flag)
        cout<<-1<<endl;
    else
    {
        ll last=0;
        if(m%2==1)
        {
            last=x[0]-1;
            x[0]=1;
        }
        else
        {
            last=x[0];
            x[0]=0;
        }
        queue<ll> q;
        rep(a,63,0)
        {
            if(x[a])
            {
                ll temp=last/(1LL<<a);
                if(temp%2==1)
                    temp--;
                last-=temp*(1LL<<a);
                x[a]+=temp;
            }
            else
            {
                ll temp=last/(1LL<<a);
                if(temp%2==1)
                    temp--;
                last-=temp*(1LL<<a);
                x[a]+=temp;
            }
            for(ll b=0;b<x[a];b++)
            {
                if(q.empty() or (q.front()&(1LL<<a))>0)
                    q.push((1LL<<a));
                else
                {
                    ll po=q.front();
                    q.pop();
                    q.push((1LL<<a)+po);
                }
            }
        }
        
        cout<<(ll)q.size()<<endl;
        while(!q.empty())
        {
            cout<<q.front()<<" ";
            q.pop();
        }
        cout<<endl;
    }
	printclock;
	return 0;
}