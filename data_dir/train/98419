#pragma GCC optimise("Ofast,unroll-loops,no-stack-protector,fast-math");
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,abm,mmx,popcnt,avx,avx2,tune=native")
          
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
          
using namespace std;
using namespace __gnu_pbds;
          
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<ld, ld> pld;
          
using matrix = vector<vector<ll>>;
template<typename T>
using kawaii_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
          
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
//#define int long long
          
void FAST_IO() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    //cout.setf(ios::fixed);
    //cout.precision(20);
    #ifndef _offline
    //freopen("trains.in", "r", stdin);
    //freopen("trains.out", "w", stdout);
    #endif
}

const int MAXN = 2e5 + 100;
int arr[MAXN], cnt[MAXN];

signed main() {
    FAST_IO();
    int n;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
        cnt[arr[i]]++;
    }
    int mx = arr[0];
    for (int i = 1; i < n; ++i) {
        if (cnt[arr[i]] > cnt[mx]) {
            mx = arr[i];
        }
    }
    set<int> poses;
    for (int i = 0; i < n; ++i) {
        if (arr[i] == mx) {
            poses.insert(i);
        }
    }
    vector<tuple<int, int, int>> ans;
    while (poses.size()) {
        int i = *poses.begin();
        poses.erase(poses.begin());
        if (i != 0 && arr[i - 1] != mx) {
            if (arr[i - 1] < arr[i]) {
                ans.push_back({1, i - 1, i});
            }
            else {
                ans.push_back({2, i - 1, i});
            }
            arr[i - 1] = mx;
            poses.insert(i - 1);
        }
        if (i != n - 1 && arr[i + 1] != mx) {
            if (arr[i + 1] < arr[i]) {
                ans.push_back({1, i + 1, i});
            }
            else {
                ans.push_back({2, i + 1, i});
            }
            arr[i + 1] = mx;
            poses.insert(i + 1);
        }
    }
    cout << ans.size() << '\n';
    for (auto &[a, b, c] : ans) {
        cout << a << ' ' << b + 1 << ' ' << c + 1 << '\n';
    }
    return 0;
}