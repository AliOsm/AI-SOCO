#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define SZ(c) ((int)(c).size())

int g[7]={};
int FIND(int x) { return g[g[x]]==g[x]?g[x]:g[x]=FIND(g[x]); }
void UNION(int x, int y) { g[FIND(x)] = FIND(y); }
int x[105], y[105], u[105], n;

bool ok(int start=-1) {
	int deg[7]={};
	for(int i=0;i<=6;i++) g[i]=i;
	for(int i=1;i<=n;i++) if(!u[i]) deg[x[i]]++, deg[y[i]]++;
	for(int i=1;i<=n;i++) if(!u[i]) UNION(x[i], y[i]);
	int grp=-1, odd=0;
	for(int i=0;i<=6;i++) if(deg[i]) grp=FIND(i), odd += deg[i]%2;
	for(int i=0;i<=6;i++) if(deg[i] && grp!=FIND(i)) return false;
	if(!(odd==0 || odd==2)) return false;
	if(start>=0 && odd==2 && deg[start]%2==0) return false;
	if(start>=0 && grp>=0 && FIND(start)!=grp) return false;
	return true;
}

int main(void) {
	scanf("%d", &n);
	for(int i=1;i<=n;i++) scanf("%d%d", &x[i], &y[i]);
	if(!ok()) { puts("No solution"); return 0; }
	int deg[7]={};
	for(int i=1;i<=n;i++) deg[x[i]]++, deg[y[i]]++;
	int now=-1;
	for(int i=0;i<=6;i++) if(deg[i]%2) now=i;
	if(now==-1) for(int i=0;i<=6;i++) if(deg[i]) now=i;
	for(int i=1;i<=n;i++) {
		for(int j=1;j<=n;j++) {
			if(u[j]==0 && (x[j]==now || y[j]==now)) {
				u[j]=1;
				if(ok(x[j]^y[j]^now)) {
					printf("%d %c\n", j, x[j]==now? '+':'-');
					now^=x[j]^y[j];
					break;
				}
				u[j]=0;
			}
		}

	}
	return 0;
}
