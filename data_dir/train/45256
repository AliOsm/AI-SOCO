#include <bits/stdc++.h>
using namespace std;

mt19937 rng(chrono::system_clock::now().time_since_epoch().count());
#define fastio ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)

int main(){
    int n,m;
    scanf("%d %d",&n,&m);

    int deg[n+5]={};
    vector<int>vec[n+5];

    vector<pair<int,int> >edge;
    for(int i=1;i<=m;i++){
        int u,v;
        scanf("%d %d",&u,&v);

        edge.push_back(make_pair(u,v));

        deg[u]+=1;
        deg[v]+=1;

        vec[u].push_back(v);
        vec[v].push_back(u);
    }

    set<pair<int,int> >st;

    int f[n+5]={};
    for(int i=1;i<=n;i++){
        st.insert(make_pair(deg[i],i));
        f[i]=(deg[i]+1)/2;
    }

    map<int,int>vis[n+5];
    while(!st.empty()){
        int u=st.begin()->second;

        st.erase(st.begin());

        priority_queue<pair<int,int> >pq;
        for(int i=0;i<vec[u].size();i++){
            int v=vec[u][i];

            if(!vis[u][v] && deg[v]>f[v])pq.push(make_pair(deg[v],v));
        }

        while(!pq.empty() && deg[u]>f[u]){
            int v=pq.top().second;
            pq.pop();

            st.erase(make_pair(deg[v],v));

            deg[u]--;
            deg[v]--;

            st.insert(make_pair(deg[v],v));

            vis[u][v]=vis[v][u]=1;
        }
    }

    vector<pair<int,int> >res;
    for(int i=0;i<edge.size();i++){
        int u=edge[i].first;
        int v=edge[i].second;

        if(!vis[u][v])res.push_back(make_pair(u,v));
    }

    printf("%d\n",(int)res.size());
    for(int i=0;i<res.size();i++)printf("%d %d\n",res[i].first,res[i].second);

    return 0;
}
