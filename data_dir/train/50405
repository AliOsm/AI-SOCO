#include <cstdio>
#include <vector>
#include <cassert>
#include <algorithm>
using namespace std;

int N,Q;
int p[300000];
int ans[300000];
int maxChild[300000];
int sz[300000];
vector<int> edges[300000];

void dfs(int i)
{
	sz[i] = 1;
	maxChild[i] = -1;
	for(int j=0;j<edges[i].size();j++)
	{
		dfs(edges[i][j]);
		sz[i] += sz[edges[i][j]];
		if(maxChild[i] == -1 || sz[edges[i][j]] > sz[maxChild[i]])
			maxChild[i] = edges[i][j];
	}
	if(maxChild[i]==-1 || 2*sz[maxChild[i]] <= sz[i])
		ans[i] = i;
	else
	{
		ans[i] = ans[maxChild[i]];
		int	maxConSize = sz[i] - sz[ans[i]];
		if(maxChild[ans[i]] > -1)
			maxConSize = max(maxConSize,sz[maxChild[ans[i]]]);				
		while(2*maxConSize > sz[i])
		{
			ans[i] = p[ans[i]];
			maxConSize = sz[i] - sz[ans[i]];
			if(maxChild[ans[i]] > -1)
				maxConSize = max(maxConSize,sz[maxChild[ans[i]]]);				
		}
	}
}

int main()
{
	scanf("%d %d",&N ,&Q);
	for(int i=1;i<N;i++)
	{
		scanf("%d",&p[i]);
		p[i]--;
		edges[p[i]].push_back(i);
	}
	dfs(0);
	int qu;
	for(int i=0;i<Q;i++)
	{
		scanf("%d",&qu);
		qu--;
		printf("%d\n",ans[qu]+1);
	}
}
