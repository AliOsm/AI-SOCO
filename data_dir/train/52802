#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cassert>

#define forn(i, n) for (int i = 0; i < n; i ++)
#define ford(i, n) for (int i = n - 1; i >= 0; i --)
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define pi 3.1415926535897932
#define ll long long

using namespace std;

vector <int> a[2000];
bool used[2000][2000];
bool use[2000];

void dfs(int v){
    use[v] = true;
    forn(i, a[v].size()){
        int to = a[v][i];
        if (!use[to]){
            used[v][to] = used[to][v] = true;
            dfs(to);
        }
    }
}

int color[2000];

void dfs2(int v, int c){
    use[v] = true;
    color[v] = c;
    forn(i, a[v].size()){
        int to = a[v][i];
        if (!used[to][v]) continue;
        if (!use[to])
            dfs2(to, c); 
    }
}

int b[1000][1000];

int main(){
    //freopen ("input.txt","rt",stdin);
    //freopen ("output.txt","wt",stdout);
    int n, t1, t2;
    cin >> n;
    memset(b, 0, sizeof(b));
    forn(i, n - 1){
        scanf ("%d %d", &t1, &t2);
        t1 --;
        t2 --;
        a[t1].pb(t2);
        a[t2].pb(t1);
        b[t1][t2] = b[t2][t1] = 1;
    }
    memset(used, false, sizeof(used));
    memset(use, false, sizeof(use));
    forn(i, n)
        if (!use[i])
            dfs(i);
    int schet = 0;
    memset(use, false, sizeof(use));
    forn(i, n)
        if (!use[i]){
            schet ++;
            dfs2(i, schet);
    }
    vector <pair<int, int>> ans;
    for (int j = 1; j < n; j ++)
        if (color[j] != color[0]){
            ans.pb(mp(0, j));
            int help = color[j];
            forn(z, n)
                if (color[z] == help)
                    color[z] = color[0];
        }
    vector <pair<int, int>> ans1;
    forn(i, n)
        forn(j, n){
            if (i >= j) continue;
            if (!used[i][j] && b[i][j] == 1)
                ans1.pb(mp(i, j));
    }
    printf ("%d\n", ans.size());
    assert(ans.size() == ans1.size());
    forn(i, ans.size())
        printf ("%d %d %d %d\n", ans1[i].x + 1, ans1[i].y + 1, ans[i].x + 1, ans[i].y + 1); 
    return 0;
}