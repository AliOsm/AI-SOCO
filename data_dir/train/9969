#include<bits/stdc++.h>
using namespace std;
#define M 200005
typedef long long ll;

const ll maxVal = 15000000000000LL;

ll apples[M], dp[M];
vector<int> vec[M];
ll tot;

void prexit(ll x)
{
    printf("%lld\n", x);
    exit(0);
}

ll lcm(ll a, ll b)
{
    //assert(a != 0 && b != 0);
    double d = 1.0*a*b/__gcd(a, b);
    if(d > maxVal) prexit(tot);

    ll l = a/__gcd(a, b)*b;
    return l;
}

int getChilds(int x) { return vec[x].size()-(x != 1); }

void dfs(int s, int par, ll val)
{
    dp[s] = val;

    ll nextVal = val*getChilds(s);
    val = nextVal;
    if(val > maxVal) prexit(tot);

    for(int v: vec[s])
    {
        if(v == par) continue;

        dfs(v, s, val);
        apples[s] += apples[v];
    }

    return;
}

int main()
{
    int n;
    scanf("%d", &n);

    for(int i = 1; i <= n; i++)
    {
        scanf("%lld", apples+i);
        tot += apples[i];
    }

    for(int i = 1; i < n; i++)
    {
        int u, v;
        scanf("%d %d", &u, &v);

        vec[u].push_back(v);
        vec[v].push_back(u);
    }

    dfs(1, 0, 1);

    ll minApples = maxVal;
    ll l = 1;

    for(int i = 1; i <= n; i++)
    {
        assert(dp[i] != 0);
        double d = 1.0*apples[i]*dp[i];
        ll x;

        if(d > maxVal) x = maxVal;
        else x = apples[i]*dp[i];

        minApples = min(minApples, x);
        l = lcm(l, dp[i]);
    }

    ll ans = minApples-minApples%l;

    printf("%lld\n", tot-ans);

    return 0;
}
