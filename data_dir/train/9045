#include<bits/stdc++.h>
#define P(x,y) make_pair(x,y)
using namespace std;
const int MX=(1<<20) , MOD = 1e9 + 7;
typedef long long ll;
class BIT{
    int MX , *bit;
    public:
    BIT(){
        MX=0;
        bit=NULL;
    };
    void init(int N){
        MX = N;
        bit = new int[MX+1];
	for(int j = 0 ; j<= MX;j++)
            bit[j] = 0;
    }
    int get(int x){
        int ret=0;
        while(x>0){
            ret+=bit[x];
            x-=x&(-x);
        }
        return ret;
    }
    void add(int x , int V){
        while(x<=MX){
            bit[x]+=V;
            x+=x&(-x);
        }
    }
}bit;
long long fact[MX];
int n , arr[MX];
ll dp[MX];
int main(){
    scanf("%d",&n);
    for(int j=1;j<=n;j++) scanf("%d",&arr[j]);
    bit.init(n);
    fact[0] = fact[1] = 1;
    dp[1] = 0;
    for(int j = 2 ; j < (1<<20) ; j++){
        fact[j] = 1ll * j * fact[j-1]; fact[j] %= MOD;
        dp[j] = 1ll * j * dp[j-1]; dp[j]%=MOD;
        ll theta = 1ll * j * (j-1)/2; theta %= MOD;
        theta *= fact[j-1]; theta %= MOD;
        dp[j] += theta; dp[j]%=MOD;
    }
    //build(1,1,n);
    //cout<<dp[1]<<' '<<dp[2]<<' '<<dp[3]<<' '<<dp[4]<<' '<<dp[5]<<endl;
    ll ans = 0 , inv=0;
    for(int j = 1 ; j <= n ; j++){
        int bigger = n - arr[j] - (bit.get(n) - bit.get(arr[j]));
        int smaller = arr[j] - 1 - bit.get(arr[j]);
        ll theta = 1ll * smaller * dp[n-j]; theta %= MOD;
        ll gamma = 1ll * smaller * (smaller - 1)/2; gamma %= MOD;
        gamma += 1ll * inv * smaller; gamma %= MOD;
        //cout<<smaller<<' '<<bigger<<endl;
        gamma *= fact[n - j]; gamma %= MOD;
        //cout<<theta<<' '<<gamma<<' '<<inv<<endl;
        theta += gamma; theta %= MOD;

        ans += theta; ans %= MOD;
        inv += arr[j] - 1 - bit.get(arr[j]); inv %= MOD;
        bit.add(arr[j] , 1);
    }
    ans += inv;
    ans %= MOD;
    cout<<ans<<endl;
}
