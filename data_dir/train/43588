#include<bits/stdc++.h>
using namespace std;

//#pragma gcc optimize("O3,unroll-loop")
//#pragma gcc target("sse,sse2,sse3,ssse3,sse4,avx,avx2,fma,abm,mmx,popcnt,tune=native")
//#define int long long
//#define double long double

bool vio[10][10], suc;
int n, m;
string s[10], ans;

void dfs(int k)
{
    if (suc)
        return;

    if (k == m)
    {
        cout << ans << '\n';
        suc = true;
        return;
    }

    for (int i = 0; i < n; i++)
    {
        ans += s[i][k];

        bool fail = false;

        if (k)
            for (int j = 0; j < n; j++)
                vio[k][j] = vio[k - 1][j];
        else
            for (int j = 0; j < n; j++)
                vio[k][j] = false;

        for (int j = 0; j < n; j++)
        {
            if (ans[k] != s[j][k])
                if (k && vio[k][j])
                {
                    fail = true;
                    break;
                }
                else
                    vio[k][j] = true;
        }

        if (!fail)
            dfs(k + 1);

        ans.pop_back();
    }
}

signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int T;
    cin >> T;
    while (T--)
    {
        cin >> n >> m;
        for (int i = 0; i < n; i++)
        {
            cin >> s[i];
            for (int j = 0; j < m; j++)
                vio[i][j] = false;
        }

        ans = "", suc = false, dfs(0);

        if (!suc)
            cout << "-1\n";
    }

    return 0;
}

//      *   *  *****  *   *  *   *   ****  ****    ****     **    **
//     *   *  *      **  *  *   *  *      *   *  *        * *   * *
//    *****  *****  * * *  *   *  *      ****   *       *  *     *
//   *   *      *  *  **  *   *  *      *  *   *       *****    *
//  *   *  *****  *   *   ***    ****  *   *    ****     *   *****

//      *****  *****  *   *  *      *****  *   *  *****  *****
//        *   *   *  *   *  *        *    **  *    *    *   *
//       *   *   *  *****  *        *    * * *    *    *****
//   *  *   *   *    *    *        *    *  **    *    *
//  ****   *****    *    *****  *****  *   *    *    *
