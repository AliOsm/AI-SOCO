//ll f(int bit, vi a){
//	int mask = (1<<bit)-1;
//	vi with_zero, with_one;
//	for(int x : a){
//		int y = x&mask;
//		if(x&(1<<bit))
//			with_one.pb(y);
//		else
//			with_zero.pb(y);
//	}
//	sort(all(with_one));
//	sort(all(with_zero));
//	int carry_treshold = 1<<bit;
//	ll ans = 0;
//	{
//		int l = 0;
//		ll cur = 0;
//		per(i,sz(with_zero)){
//			while(l < sz(with_zero) && with_zero[l]+with_zero[i] < carry_treshold)
//				++l;
//			cur += l;
//		}
//		rep(i,sz(with_zero))
//			if(2*with_zero[i] < carry_treshold)
//				--cur;
//		cur /= 2;
//		ll total = sz(with_zero)*(sz(with_zero)-1)/2;
//		ans += total - cur;
//	}
//	{
//		int l = 0;
//		ll cur = 0;
//		per(i,sz(with_one)){
//			while(l < sz(with_one) && with_one[l]+with_one[i] < carry_treshold)
//				++l;
//			cur += l;
//		}
//		rep(i,sz(with_one))
//			if(2*with_one[i] < carry_treshold)
//				--cur;
//		cur /= 2;
//		ll total = sz(with_one)*(sz(with_one)-1)/2;
//		ans += total - cur;
//	}
//	{
//		int l = 0;
//		ll cur = 0;
//		per(i,sz(with_one)){
//			while(l < sz(with_zero) && with_zero[l]+with_one[i] < carry_treshold)
//				++l;
//			cur += l;
//		}
//		ans += cur;
//	}
//	return ans;
//}
//void __(){
//	_(int,n);
//	_(vi,a,n);
//	int ans = 0;
//	for(int bit = 0; bit < 25; ++bit){
//		int cnt = f(bit,a);
//		if(cnt%2)
//			ans ^= (1<<bit);
//	}
//	print ans;
//}
//
#include <iomanip>
#include <algorithm>
#include <vector>
#include <utility>
#include <iostream>
#include <string>
#define pb push_back
#define REP_ZERO_INT(i,r) for(int i = 0; i < r; ++i)
#define GET_REP_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define rep(...) GET_REP_MACRO(__VA_ARGS__,REP_ANY,REP_INT,REP_ZERO_INT)(__VA_ARGS__)
#define PER_ZERO_INT(i,r) for(int i = r-1; i >= 0; --i)
#define GET_PER_MACRO(_1,_2,_3,_4,NAME,...) NAME
#define per(...) GET_PER_MACRO(__VA_ARGS__,PER_ANY,PER_INT,PER_ZERO_INT)(__VA_ARGS__)
#define all(v) (v).begin(), (v).end()
#define sz(v) ll(v.size())
#define T1 template<typename T> static
using namespace std;
typedef long long ll;
typedef vector<int> vi;
T1 ostream& operator<<(ostream& stream, const vector<T>& t);
T1 istream& read(T, T, istream& = cin);
T1 istream& operator>>(istream& stream, vector<T>& t){
    return read(all(t), stream);
}
T1 istream& read(T b, T e, istream& stream){
    for(T it = b; it != e; ++it)
        stream >> *it;
    return stream;
}
struct _print {
    string sep,end;
    bool space;
    ostream &stream;
    _print(string _sep=" ",string _end="\n",
            ostream &_stream = cout)
        : sep(_sep),end(_end),space(false),
            stream(_stream) {}
    ~_print() { stream << end; }
    template <typename T>
        _print &operator , (const T &t) {
            if (space) stream << sep;
            space = true;
            stream << t;
            return *this;
        }
};
#define print _print(),
#define INPUT_WITHOUT_INIT(type,name) type name; cin >> name
#define _IWI(type,name,...) type name(__VA_ARGS__); cin >> name
#define GET_INPUT_MACRO(_1,_2,_3,_4,_5,_6,_7,_8,NAME,...) NAME
#define _(...) GET_INPUT_MACRO(__VA_ARGS__,_IWI,_IWI,_IWI,_IWI,_IWI,_IWI,INPUT_WITHOUT_INIT)(__VA_ARGS__)
ll f(int bit, vi a){
	int mask = (1<<bit)-1;
	vi with_zero, with_one;
	for(int x : a){
		int y = x&mask;
		if(x&(1<<bit))
			with_one.pb(y);
		else
			with_zero.pb(y);
	}
	sort(all(with_one));
	sort(all(with_zero));
	int carry_treshold = 1<<bit;
	ll ans = 0;
	{
		int l = 0;
		ll cur = 0;
		per(i,sz(with_zero)){
			while(l < sz(with_zero) && with_zero[l]+with_zero[i] < carry_treshold)
				++l;
			cur += l;
		}
		rep(i,sz(with_zero))
			if(2*with_zero[i] < carry_treshold)
				--cur;
		cur /= 2;
		ll total = sz(with_zero)*(sz(with_zero)-1)/2;
		ans += total - cur;
	}
	{
		int l = 0;
		ll cur = 0;
		per(i,sz(with_one)){
			while(l < sz(with_one) && with_one[l]+with_one[i] < carry_treshold)
				++l;
			cur += l;
		}
		rep(i,sz(with_one))
			if(2*with_one[i] < carry_treshold)
				--cur;
		cur /= 2;
		ll total = sz(with_one)*(sz(with_one)-1)/2;
		ans += total - cur;
	}
	{
		int l = 0;
		ll cur = 0;
		per(i,sz(with_one)){
			while(l < sz(with_zero) && with_zero[l]+with_one[i] < carry_treshold)
				++l;
			cur += l;
		}
		ans += cur;
	}
	return ans;
}
void __(){
	_(int,n);
	_(vi,a,n);
	int ans = 0;
	for(int bit = 0; bit < 25; ++bit){
		int cnt = f(bit,a);
		if(cnt%2)
			ans ^= (1<<bit);
	}
	print ans;
}
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout << fixed << setprecision(15);
        __();
}
