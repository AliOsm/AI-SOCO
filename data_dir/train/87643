#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <map>
#include <iterator>
#include <queue>
#include <list>
#include <stack>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef list < int > :: iterator IteratorList;

const int NMax = 100011;
const int INF = (int) 1e9;
const int cntTree = 2 * 262145;
const ld eps = 1e-9;
const double PI = 3.141592653589793238462;
const int MD = (int) 1e7 + 9;

#define MIN(x,y) ((x) > (y) ? (y) : (x))
#define MAX(x,y) ((x) > (y) ? (x) : (y))
#define SQR(x) ((x) * (x))
#define ABS(x) ((x) < (0) ? (-(x)) : (x))
#define SZ(x) (int) (x).size()

int n, m, s, f, d;
char ch;
int t[NMax], l[NMax], r[NMax];

int main()
{
    scanf("%i%i%i%i", &n, &m, &s, &f);
    for (int i = 1;i <= m;i++) scanf("%i%i%i", &t[i], &l[i], &r[i]);
    if (s > f)
    {
        d = -1;
        ch = 'L';
    }
    else
    {
        d = 1;
        ch = 'R';
    }
    int stage = 1;
    string ans = "";
    for (int i = 1;i <= m;i++)
    {
        if (s == f) break;
        if (stage < t[i])
        {
            for (int j = 1;(j <= t[i] - stage) && (s != f);j++)
            {
                s += d;
                ans += ch;
            }
            stage = t[i];
        }
        if (s == f) break;
        if (stage == t[i])
        {
            if (s >= l[i] && s <= r[i]) ans += 'X';
            else
            {
                int tmp = s;
                if (s > f) tmp--;
                else tmp++;
                if (tmp >= l[i] && tmp <= r[i]) ans += 'X';
                else
                {
                    s += d;
                    ans += ch;
                }
            }
            stage++;
        }
    }
    while (s != f)
    {
        s += d;
        ans += ch;
    }
    cout << ans << endl;
    
    return 0;
}
