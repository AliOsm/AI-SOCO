#pragma comment(linker, "/STACK:268435456")

#include<iostream>
#include<cstdio>

#include<string>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<stack>

#include<iomanip>
#include<memory.h>
#include<algorithm>
#include<cstring>
#include<ctime>
#include<cmath>
#include<cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define for1(i, n) for(int i = 1; i < (int)(n); ++i)
#define forr(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define fore(i, a, b) for(int i = int(a); i <= int(b); ++i)
#define correct(x, y, n, m) (0 <= x && x < n && 0 <= y && y < m)
#define X first
#define Y second
#define all(a) a.begin(), a.end()
#define pb push_back
#define mp make_pair
#define sz(v) (int)(v.size())
#define hash archash
#define next arcnext
#define link arclink
#define y0 arcy0
#define y1 arcy1
#define log2 arclog2

template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }
template<class T> T gcd(T a, T b) { return a ? gcd (b % a, a) : b; }
template<class T> T lcm(T a, T b) { return a / gcd (a, b) * b; }
template<class T> T sign(T a) { return a > 0 ? 1 : (a < 0 ? -1 : 0); }

typedef long long li;
typedef unsigned long long uli;
typedef long double ld;
typedef pair <int, int> pt;
typedef vector <int> vi; 
typedef vector <vector <int> > vvi;
typedef vector <pair <int, int> > vpt; 

const int dx[] = {-1, 0, 1,  0};
const int dy[] = { 0, 1, 0, -1};
const int dxK[] = {-1, -1, 0, 1, 1,  1,  0, -1};
const int dyK[] = { 0,  1, 1, 1, 0, -1, -1, -1};
const int dxKn[] = {-2, -1, 1, 2,  2,  1, -1, -2};
const int dyKn[] = { 1,  2, 2, 1, -1, -2, -2, -1};

const int N = int(1e5) + 9;
const int M = int(3e3) + 9;
const int LOGN = 22;
const int SQN = 350;
const int MOD = int(1e9) + 7;
const int INF = 1e9 + 100;
const li INF64 = 2e18;
const ld PI = 3.1415926535897932384626433832795;
const ld EPS = 1e-9;

int n, m, k;
map <pt, int> cnt;
map <pt, int> cur;
int rev[N];

int getrev(int x){
	int res = 0;
	while(x){
		res = res * 10 + (x % 10);
		x /= 10;
	}
	return res;
}

pt norm(pt a){
	int g = gcd(a.X, a.Y);
	a.X /= g, a.Y /= g;
	return a;
}

void solve(){
	forn(i, N)
		rev[i] = getrev(i);
	//cout << rev[100] << endl << rev[1230] << endl;
	cin >> n >> m >> k;
	li x = INF, y = INF;

	for1(i, n + 1)
		cnt[norm(mp(i, rev[i]))]++;
	li res = 0;
	int i = n;
	for1(j, m + 1){
		res += cnt[norm(mp(rev[j], j))];
		++cur[norm(mp(rev[j], j))];
		while(i > 1 && res - cur[norm(mp(i, rev[i]))] >= k)
			res -= cur[norm(mp(i, rev[i]))], --cnt[norm(mp(i, rev[i]))], --i;
		if(res >= k && x * y > i * 1LL * j)
			x = i, y = j;
	}
	if(x == INF)
		cout << -1;
	else
		cout << x << ' ' << y;
}

int main(){

	

	srand(time(NULL));
	cout << setprecision(10) << fixed;
	cerr << setprecision(10) << fixed;   

	solve();

	return 0;
}