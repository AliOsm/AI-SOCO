#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<string>
#include<math.h>
#include<queue>
#include<stack>
#include<stdio.h>
#include<map>
#include<set>
#include<memory.h>
#include<algorithm>
#include<vector>
using namespace std;
typedef long long ll;
int n, m, k;
const int N = 100001;
vector<int>g[N];
int seg[6][N * 3];
void inti(int node, int s, int e,int idx){
    if (s == e){
        seg[idx][node] = g[s][idx];
        return;
    }
    inti(node * 2, s, (e + s) / 2, idx);
    inti(node * 2 + 1, (s + e) / 2 + 1, e, idx);
    seg[idx][node] = max(seg[idx][node * 2], seg[idx][node * 2 + 1]);
}
int get(int node, int s, int e, int S, int E, int idx){
    if (e < S || E < s)
        return 0;
    if (s >= S && e <= E)
        return seg[idx][node];
    return max(get(node * 2, s, (s + e) / 2, S, E, idx), get(node * 2 + 1, (s + e) / 2 + 1, e, S, E, idx));
}
int main(){
    cin >> n >> m >> k;
    for (int i = 1; i <= n; ++i){
        g[i].resize(m);
        for (int j = 0; j < m; ++j)
            scanf("%d", &g[i][j]);
    }
    vector<int>pr;
    for (int i = 0; i < m; ++i){
        inti(1, 1, n, i);
        pr.push_back(0);
    }
    int res = 0;
    
    int left = 1, right = 1;
    while (true){
        if (right == n + 1 || left == n + 1)
            break;
        int rem = k;
        vector<int>c;
        for (int i = 0; i < m; ++i){
            int x = get(1, 1, n, left, right, i);
            rem -= x;
            c.push_back(x);
        }
        if (rem < 0){
            left++;
        }
        else{
            if (right - left + 1 > res){
                res = right - left + 1;
                pr = c;
            }
            ++right;
        }
    }
    for (int i = 0; i < pr.size(); ++i)
        cout << pr[i] << " ";
    cin >> n;
}