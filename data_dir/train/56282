#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define all(x) x.begin(),x.end()

int const N = 1e5+100, M = 1e5+1;
int n,q;
vector<int>factors[N];
set<int>added[N], addedBy[N];
set<int>have;
int spf[N];
vector<int>prms;

void prm(int n){
        spf[1] = 1; 
        for(int i=2; i<=M; i++)spf[i] = i; 
        for(int i=4; i<=N; i+=2)spf[i] = 2; 
        for(int i=3; i*i<=M; i++){ 
          if(spf[i] == i) { 
            for (int j=i*i; j<=M; j+=i)spf[j] = i; 
        } 
      } 
}

void factorize(int n){
      for(int i = 2; i<=N-100; ++i){
          if(spf[i] == i){factors[i].push_back(i); continue;}
          int k = i;
          while(k != 1){
              factors[i].push_back(spf[k]);
              k /= spf[k];
          }
      }
}

int main(){
    #ifndef ONLINE_JUDGE
    freopen("read.txt","r",stdin);
    #endif
    scanf("%d%d", &n, &q);
    prm(n);
    factorize(n);
    for(int i = 0; i<q; ++i){
        char tp;
        int x; 
        cin >> tp >> x; 
        bool ff = false;
        if(tp == '+'){
            if(have.find(x) != have.end()){puts("Already on");continue;}
            bool f = false;
            for(auto j: factors[x]){
                  if(added[j].size()){
                      printf("Conflict with %d\n", *added[j].begin());
                      f = true;
                      break;
                  }
            }
            if(f)continue;
            for(auto j: factors[x]){
                added[j].insert(x);
            }
            have.insert(x);
            puts("Success");
        }
        else {
            if(have.find(x) == have.end()){puts("Already off"); continue;}
            for(auto j: factors[x]){
                added[j].clear();
            }
            have.erase(have.find(x));
            puts("Success");
        }
    }
} 
