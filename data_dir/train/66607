#include <iostream>
#include <cstdio>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <iterator>

#define x0 abc
#define y0 ABC
#define x1 abcd
#define y1 ABCD
#define xn abcde
#define yn ABCDE

#define l_b lower_bound
#define u_b upper_bound

#define in insert
#define er erase

#define fi first
#define se second
#define m_p make_pair

#define p_b push_back
#define po_b pop_back

#define ld long double
#define ll long long

#define cont continue
#define re return

#define MAXLL 9000000000000000000LL
#define MAXINT 2000000000

#define MINLL -9000000000000000000LL
#define MININT -2000000000

#define P acos(-1.)

#define endl '\n'

#define OUT cout << "-------" << endl;

using namespace std;

set <ll> Set;

pair <ll, ll> nxt[181];

ll a[120001], pref[120001][21], n, i, j, k, bit, l, r, mid, nom, zn, ans;

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n;

    for (i = 1; i <= n; i++) {
        cin >> a[i];

        for (bit = 0; bit <= 20; bit++) pref[i][bit] = pref[i - 1][bit] + (a[i] >> bit) % 2;

        if (a[i] == 0)
        Set.in(0);
    }

    for (i = 1; i <= n; i++) {
        k = 0;

        for (bit = 0; bit <= 20; bit++) {
            l = i;

            r = n;

            nom = 0;

            while (l <= r) {
                mid = (l + r) / 2;

                if (pref[mid][bit] - pref[i - 1][bit] > 0) {
                    r = mid - 1;

                    nom = mid;
                }
                else l = mid + 1;
            }

            if (nom != 0) {
                k++;

                nxt[k] = m_p(nom, bit);
            }
        }

        sort(nxt + 1, nxt + 1 + k);

        nxt[k + 1].fi = nxt[k].fi - 1;

        zn = 0;

        for (j = 1; j <= k; j++) {
            zn += (1LL << nxt[j].se);

            if (nxt[j].fi != nxt[j + 1].fi)
            Set.in(zn);
        }
    }

    cout << Set.size() << endl;

    re 0;
}
