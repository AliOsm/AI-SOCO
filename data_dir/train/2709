#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

struct robot {
	int x, r, q;
	bool operator< (const robot& b) const {
		return r > b.r;
	}
};

int n, k;
robot a[100005];

struct node {
	node* l, *r;
	int v;

	node() : l(0), r(0), v(0) {}
};

map<int, node*> e;

int daj(node* root, int l, int r, int xl=0, int xr=1e9) {
	if (!root || r < xl || xr < l)
		return 0;
	if (l <= xl && xr <= r)
		return root->v;
	int xm = (xl+xr) / 2;
	return daj(root->l, l, r, xl, xm)
		+ daj(root->r, l, r, xm+1, xr);
}

void ubaci(node*& root, int p, int xl=0, int xr=1e9) {
	if (!root)
		root = new node;
	root->v++;
	if (xl < xr) {
		int xm = (xl+xr) / 2;
		if (p <= xm)
			ubaci(root->l, p, xl, xm);
		else
			ubaci(root->r, p, xm+1, xr);
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	cerr.tie(nullptr);

	cin >> n >> k;
	for (int i=0; i<n; i++)
		cin >> a[i].x >> a[i].r >> a[i].q;
	sort(a, a+n);
	ll sol = 0;
	for (int i=0; i<n; i++) {
		for (int j=a[i].q-k; j<=a[i].q+k; j++) {
			auto it = e.find(j);
			if (it != e.end())
				sol += daj(it->second, a[i].x - a[i].r, a[i].x + a[i].r);
		}
		ubaci(e[a[i].q], a[i].x);
	}
	cout << sol << '\n';
}