/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-04-09 14:17:56
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e6 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

ll n , m , d , ans , A[MAXN] , dp[1 << LOG] , cnt[LOG];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n >> m >> d;
    for(ll i = 0 ; i < m ; i++){
        ll k; cin >> k;
        for(ll j = 0 , x ; j < k ; j++){
            cin >> x;
            A[x] = i;
        }
    }

    for(ll i = 1 ; i < d ; i++) cnt[A[i]]++;
    for(ll i = d ; i <= n ; i++){
        cnt[A[i]]++;
        ll mask = 0;
        for(ll j = 0 ; j < LOG ; j++)   if(cnt[j])  mask |= (1 << j);
        dp[mask] = 1;
        cnt[A[i - d + 1]]--;
    }

    for(ll i = 0 ; i < (1 << m) ; i++){
        for(ll j = 0 ; j < LOG ; j++)   if(i & (1 << j))    dp[i] |= dp[i ^ (1 << j)];
        if(dp[i] == 0)  ans = max(ans , (ll)__builtin_popcountll(i));
    }
    cout << m - ans << endl;

    return 0;
}
/*

*/
