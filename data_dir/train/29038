#include <stdio.h>
#include <math.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <utility>
#include <stack>
#include <queue>
#include <set>
#include <list>
#include <bitset>

using namespace std;

#define fi first
#define se second
#define long long long
typedef pair<int,int> ii;
typedef pair<int,ii> iii;

int ROOT = 1;
int n, k;
int dp[200003];
bool spec[200003];
bool visited[200003];
vector<int> spe[200003], vec[200003];
vector<ii> ans;
priority_queue<ii> pq;

void make_dp(int u)
{
	if(spec[u]) dp[u]++;
	visited[u] = 1;

	for(int v : vec[u])
	{
		if(!visited[v])
		{
			make_dp(v);
			dp[u] += dp[v];
		}
	}
}

void get_root(int u)
{
	visited[u] = 1;

	bool bol = 1;
	for(int v : vec[u])
	{
		if(!visited[v])
		{
			if(dp[v] > k)
			{
				bol = 0;
				get_root(v);
			}
		}
	}
	if(bol) ROOT = u;
}

void make_spe(int u, int root)
{
	if(spec[u]) spe[root].push_back(u);
	visited[u] = 1;

	for(int v : vec[u])
		if(!visited[v])
			make_spe(v, root);
}

int main()
{
	//ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	// freopen("input.in", "r", stdin);
	
    scanf("%d %d", &n, &k);
    for(int i = 1; i < n; i++)
    {
    	int u, v;
    	scanf("%d %d", &u, &v);
    	vec[u].push_back(v);
    	vec[v].push_back(u);
    }
    for(int i = 0; i < 2*k; i++)
    {
    	int x; scanf("%d", &x);
    	spec[x] = 1;
    }
    make_dp(ROOT); memset(visited, 0, sizeof visited);
    get_root(ROOT); memset(visited, 0, sizeof visited); memset(dp, 0, sizeof dp);
    
    visited[ROOT] = 1;
    for(int v : vec[ROOT])
    {
    	make_spe(v,v);
    	if(spe[v].size())
   			pq.push({(int)spe[v].size(),v});
    }

    if(spec[ROOT])
    {
    	spe[ROOT] = {ROOT};
    	pq.push({(int)spe[ROOT].size(),ROOT});
    }

    while(pq.size())
    {
    	int u = pq.top().se; pq.pop();
    	int v = pq.top().se; pq.pop();
    	// printf("%d %d\n", u, v); fflush(stdout);
    	ans.push_back({spe[u].back(), spe[v].back()});
    	spe[u].pop_back();
    	spe[v].pop_back();
    	if((int)spe[u].size() != 0) pq.push({(int)spe[u].size(),u});
    	if((int)spe[v].size() != 0) pq.push({(int)spe[v].size(),v});

    }

    printf("1\n%d\n", ROOT);
    for(ii i : ans) printf("%d %d %d\n", i.fi, i.se, ROOT);

    
    // for(int i = 1; i <= n; i++) printf("%d %d\n", i, (int)spe[i].size());
}










