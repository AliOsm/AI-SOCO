#include<bits/stdc++.h>
#define MOD 1000000007
#define MOD2 1000000006
#define TEMPMOD1 998244353
#define TEMPMOD2 998244352
#define INF 1000000000000000007
#define NEGINF -1000000000000000007
#define vll vector<ll> 
#define vvll vector<vector<ll>>
#define pll pair<ll,ll>
#define pii pair<int,int>
#define plll pair<ll,pll>
#define vpll vector<pll>
using namespace std;
typedef long long int ll;

ll value[200010];
vector<ll> tree[200010];
ll vertice;

ll ans=0;
ll storesum[200010][2];
ll count1[200010][2];

void DFS(ll start,ll parent)
{
    ll size=tree[start].size();
    ll store;
    for(ll i=0;i<size;i++)
    {
        store=tree[start][i];
        if(store==parent)
        {
            continue;
        }
        DFS(store,start);
    }
    count1[start][0]=1;  
    count1[start][1]=0;// focus on length of part not the no of vertice;
    storesum[start][1]=0;
    storesum[start][0]=value[start];
    ll val1;
    ans+=value[start];
    for(ll i=0;i<size;i++)
    {
        store=tree[start][i];
        if(store==parent)
        {
            continue;
        }   
        val1=storesum[store][1];
        val1*=count1[start][0];
        val1=val1%MOD;
        val1=val1*-1;
        val1+=(storesum[start][0]*count1[store][1])%MOD;
        val1=val1%MOD;
        val1=val1*2;
        ans+=val1;
        ans=ans%MOD;
        val1=storesum[store][0];
        val1*=count1[start][1];
        val1=val1%MOD;
        val1=val1*-1;
        val1+=(storesum[start][1]*count1[store][0]);
        val1=val1*2;
        val1=val1%MOD;
        ans-=val1;
        ans=ans%MOD;
        storesum[start][0]+=((count1[store][1]*value[start])-storesum[store][1])%MOD;
        storesum[start][1]+=((count1[store][0]*value[start])-storesum[store][0])%MOD;
        count1[start][0]+=count1[store][1];
        count1[start][1]+=count1[store][0];
        count1[start][0]%=MOD;
        count1[start][1]%=MOD;        
    }
    return ;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    ll vert1,vert2;
    cin>>vertice;
    for(ll i=1;i<=vertice;i++)
    {
        cin>>value[i];
    }
    for(ll i=1;i<vertice;i++)
    {
        cin>>vert1>>vert2;
        tree[vert1].push_back(vert2);
        tree[vert2].push_back(vert1);
    }
    DFS(1,-1);
    ans=(ans+MOD)%MOD;
    cout<<ans;
    return 0;
}