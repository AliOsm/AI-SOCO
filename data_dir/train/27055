#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int INF = 2000000000;

int n, k;
vector<vector<bool>> res;

void updateDP(vector<vector<int>>& dist, vector<vector<ll>>& cnt, int x, int y, int nX, int nY)
{
    if (nX >= 0 && nX < n && nY >= 0 && nY < 4 && !res[nY][nX])
    {
        int newD = dist[y][x] + 1;
        if (newD < dist[nY][nX])
        {
            dist[nY][nX] = newD;
            cnt[nY][nX] = cnt[y][x];
        }
        else
            cnt[nY][nX] += cnt[y][x];
    }
}

ll countPaths(int fromX, int fromY, int toX, int toY)
{
    vector<vector<int>> dist(4, vector<int>(n, INF));
    vector<vector<ll>> cnt(4, vector<ll>(n, 0));
    dist[fromY][fromX] = 0;
    cnt[fromY][fromX] = 1;
    int startY = (toY > fromY) ? 0 : 3, dY = (toY > fromY) ? 1 : -1;
    for (int x = 0; x < n; x++)
    {
        for (int y = startY; y < 4 && y >= 0; y += dY)
        {
            if (res[y][x])
                continue;
            updateDP(dist, cnt, x, y, x + 1, y);
            if (toY > fromY)
                updateDP(dist, cnt, x, y, x, y + 1);
            else
                updateDP(dist, cnt, x, y, x, y - 1);
        }
    }
    return cnt[toY][toX];
}

int main()
{
    clock_t startTime = clock();
    srand(time(NULL));
    ios::sync_with_stdio(false);
    cin >> n >> k;
    res.resize(4, vector<bool>(n));

    bool result = false;
    if (k % 2 == 0)
    {
        for (int i = 1; k > 1; i++, k -= 2)
        {
            res[1][i] = true;
            res[2][i] = true;
        }
        result = true;
    }
    else
    {
        while (((float)(clock() - startTime) / (float)CLOCKS_PER_SEC) < 0.93f)
        {
            for (int y = 0; y < 4; y++)
                for (int x = 0; x < n; x++)
                    res[y][x] = false;
            int cntSet = 0;
            while (cntSet < k)
            {
                int y = 1 + (rand() % 2);
                int x = 1 + (rand() % (n - 2));
                if (!res[y][x])
                {
                    res[y][x] = true;
                    cntSet++;
                }
            }
            if (countPaths(0, 0, n - 1, 3) == countPaths(0, 3, n - 1, 0))
            {
                result = true;
                break;
            }
        }

    }
    cout << (result ? "YES" : "NO") << endl;
    if (result)
    {
        for (int y = 0; y < 4; y++)
        {
            for (int x = 0; x < n; x++)
                cout << (res[y][x] ? '#' : '.');
            cout << endl;
        }
    }
    return 0;
}