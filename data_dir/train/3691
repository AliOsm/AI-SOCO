#include <iomanip>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <ctime>
#include <cstdio>
#include <cmath>
#include <queue>
#include <bitset>
#include <string>
 
#define ll long long
#define mp make_pair
#define pb push_back
 
using namespace std;
 
const int N = 3000010;
const ll INF = 1e18+1;

ll calc(ll x) {
    return x * (x + 1) / 2;
}

ll f(ll x) {
    int len = 0;
    ll tenp = 1;
    ll res = 0;
    while (true) {
        if (x < 10 * tenp) {
            res += calc(x - tenp + 1) * (len + 1);
            break;
        }
        else {
            res += calc(9 * tenp) * (len + 1);
            res += (x - 10 * tenp + 1) * 9 * tenp * (len + 1);
        }
        len++;
        tenp *= 10;
    }
    return res;
}

ll g(ll x) {
    int len = 0;
    ll tenp = 1;
    ll res = 0;
    while (true) {
        if (10 * tenp - 1 <= x) {
            res += 9 * tenp * (len + 1);
        }
        else {
            res += (x - tenp + 1) * (len + 1);
            break;
        }
        len++;
        tenp *= 10;
    }
    return res;
}

ll getcnt(ll x) {
    ll res = 0;
    while (x > 0) {
        res++;
        x /= 10;
    }
    return res;
}

ll get(ll x, ll k) {
    ll cnt = getcnt(x);
    int num = 0;
    while (x > 0) {
        num++;
        int c = x % 10;
        if (num == cnt - k + 1) return c;
        x /= 10;
    }
    return -1;
}

ll gstup(ll x) {
    ll res = 0;
    while (x > 0) {
        res += getcnt(x);
        x--;
    }
    return res;
}

ll fstup(ll x) {
    ll res = 0;
    while (x > 0) {
        res += g(x);
        x--;
    }
    return res;
}

ll solve(ll k) {
    ll l = 0, r = 1e9;
    while (l + 1 < r) {
        ll m = (l + r) / 2;
        if (f(m) >= k) r = m - 1;
        else l = m;
    }
    ll cntblocks = -1;
    if (f(r) < k) cntblocks = r;
    else cntblocks = l;
    k -= f(cntblocks);
    l = 0, r = 1e9;
    while (l + 1 < r) {
        ll m = (l + r) / 2;
        if (g(m) >= k) r = m - 1;
        else l = m;
    }
    ll num = -1;
    if (g(r) < k) num = r;
    else num = l;
    k -= g(num);
    return get(num + 1, k);
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        ll k;
        cin >> k;
        cout << solve(k) << endl;
    }
    return 0;
}