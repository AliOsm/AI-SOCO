#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <cstring>
#include <unordered_map>
#include <unordered_set>

using namespace std;

#define ll long long
#define ull unsigned long long
#define all(aaa) aaa.begin(), aaa.end()
#pragma warning(disable : 4996)

const ll INF = 1e18;
const int N = 4e5 + 5;
ll b[N];
int s[N];

signed main() {
#ifdef HOME
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	ll n, m, ta, tb, k;
	cin >> n >> m >> ta >> tb >> k;

	vector<pair<ll, int>> v;
	
	for (int i = 0; i < n; i++) {
		ll a;
		cin >> a;
		v.push_back({ a + ta, 0 });
	}


	for (int i = 0; i < m; i++) {
		cin >> b[i];
		v.push_back({ b[i], 1 });
	}

	b[m++] = INF;
	v.push_back({ INF, 1 });
	sort(all(v));

	for (int i = 0; i < v.size(); i++) {
		s[i + 1] = s[i] + v[i].second;
	}

	int l = 0, r = m;
	while (r - l > 1) {
		int p = (l + r) >> 1,
			w = lower_bound(all(v), make_pair(b[p], 1)) - v.begin();;

		ll mn = INF;
		for (int i = 0; i < v.size(); i++) {
			mn = min(mn, (ll)i - s[i] + s[w] - s[i]);
			if (v[i].first == b[p] && v[i].second)
				break;
		}
		if (mn <= k) {
			l = p;
		}
		else {
			r = p;
		}
	}

	if (b[l] == INF) {
		cout << -1;
	}
	else {
		cout << b[l] + tb;
	}



	return 0;
}