#include <iostream>
#include <vector>
#include <cassert>
#include <map>
#include <cstring>
#include <cmath>
#include <unordered_map>
#include <algorithm>
using namespace std;
typedef long long Long;
#define MAXF 1000000000000000LL


typedef vector<Long> VI;
typedef vector<VI> VVI;

VVI adj;
VI U;

VI tot, sz;
int K;
void dfs1(int u,int p = -1, int LVL = 0){
	tot[u] = 0;
	sz[u] = U[u];
	for(int v : adj[u]){
		if(p == v)continue;
		dfs1(v,u,LVL+1);
		tot[u] += tot[v] + sz[v];
		sz[u] += sz[v];
		
	}
	int REM = 2*K - sz[u];
	if(REM < sz[u]){
		K -= (sz[u] - REM)/2;
		sz[u] = REM;
	}
//	cout << string(LVL,'\t') << u<<":"<< sz[u] << endl;
}

int main() {
	
	int N;
	cin >> N >> K;
	adj = VVI(N);
	U = VI(N);
	
	tot = VI(N, 0);
	sz = VI(N,0);
	for(int i = 0; i < 2*K; ++i){
		int u;
		cin >> u;
		u--;
		U[u] = 1;
	}
	for(int i = 0; i < N-1; ++i){
		int u,v;
		cin >> u >> v;
		u--;v--;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	dfs1(0);
	cout << tot[0] << endl;
	
}


/*
-----
-----
----

 */
