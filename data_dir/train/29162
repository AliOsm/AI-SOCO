//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma GCC optimize("unroll-loops")

#include <iostream>
#include <stdlib.h>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <unordered_map>
#include <random>
#include <assert.h>
#include <memory.h>
#include <time.h>
#include <bitset>

#define uint unsigned int
#define ll long long
#define ull unsigned long long
#define ld long double
#define rep(i, l, r) for (int i = l; i < r; i++)
#define repb(i, r, l) for (int i = r; i > l; i--)
#define sz(a) (int)a.size()
#define fi first
#define se second
#define mp(a, b) make_pair(a, b)
#define rank qwertyuio
#define next dfghjk

using namespace std;

inline bool setmin(int &x, int y) { return (y < x) ? x = y, 1 : 0; }
inline bool setmax(int &x, int y) { return (y > x) ? x = y, 1 : 0; }
inline bool setmin(ll &x, ll y) { return (y < x) ? x = y, 1 : 0; }
inline bool setmax(ll &x, ll y) { return (y > x) ? x = y, 1 : 0; }

const int N = 2000000 + 293;
const int inf = (int)1e9 + 1;
const ll big = (ll)1e18 + 1;
const int P = 239;
const int P1 = 31;
const int P2 = 57;
const int MOD = (int)1e9 + 7;
const int MOD1 = (int)1e9 + 9;
const int MOD2 = 998244353;
const double eps = 1e-9;
const double pi = atan2(0, -1);
const int ABC = 26;

ll bin_pow(ll a, ll p) {
    ll res = 1;
    while (p) {
        if (p & 1) {
            res = res * a % MOD;
        }
        a = a * a % MOD;
        p >>= 1;
    }
    return res;
}

ll rev(ll x) {
    return bin_pow(x, MOD - 2);
}

ll fact[N], rfact[N];

void init() {
    fact[0] = 1;
    rep(i, 1, N) {
        fact[i] = fact[i - 1] * i % MOD;
    }
    rfact[N - 1] = rev(fact[N - 1]);
    repb(i, N - 2, -1) {
        rfact[i] = rfact[i + 1] * (i + 1) % MOD;
    }
}

ll C(int n, int k) {
    if (k < 0 || k > n) {
        return 0;
    }
    return fact[n] * rfact[k] % MOD * rfact[n - k] % MOD;
}

int solve(int n, vector<int> vals) {
    vector<int> cnt;
    for (int i : vals) {
        int c = n / i;
        if (sz(cnt) > 0) {
            cnt.back() -= c;
        }
        cnt.push_back(c);
    }
    ll ans = 1;
    int cur = 0;
    for (int c : cnt) {
        ans = ans * c % MOD;
        cur++;
        //split (c - 1) into cur groups
        ans = ans * C((c - 1) + cur - 1, cur - 1) % MOD;
        ans = ans * fact[c - 1] % MOD;
        cur += (c - 1);
    }
    return ans;
}

int main()
{
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.precision(20);
    cout << fixed;
    //ll TL = 0.95 * CLOCKS_PER_SEC;
    //clock_t time = clock();
    init();
    int n;
    cin >> n;
    int lg = 0;
    while ((1 << (lg + 1)) <= n) {
        lg++;
    }
    int ans = 0;
    vector<int> a = {1};
    rep(i, 0, lg) {
        a.push_back(a.back() * 2);
    }
    ans = solve(n, a);
    if ((1 << (lg - 1)) * 3 <= n) {
        rep(c3, 0, lg) {
            a = {1};
            rep(i, 0, c3) {
                a.push_back(a.back() * 2);
            }
            a.push_back(a.back() * 3);
            rep(i, 0, lg - c3 - 1) {
                a.push_back(a.back() * 2);
            }
            ans = (ans + solve(n, a)) % MOD;
        }
    }
    cout << ans << "\n";
    return 0;
}