	#include <stdio.h>
	#include <queue>
	#include <math.h>
	#include <iostream>
	#include <assert.h>
	#include <string>
	#include <algorithm>
	#include <vector>
	#include <set>
	#include <map>
	#include <memory.h>
	#include <fstream>
	#include <functional>

	using namespace std;

	const int N = 1e5 + 5, M = 320;

	int sz[N], l[N], r[N], val[N];

	void dfs(int x) {
		sz[x] = 1;
		if (l[x] != -1 && sz[l[x]] == 0)
			dfs(l[x]);
		if (l[x] != -1)sz[x] += sz[l[x]];

		if (r[x] != -1 && sz[r[x]] == 0)
			dfs(r[x]);

		if (r[x] != -1)sz[x] += sz[r[x]];
	}

	map<int, bool > Hash;

	void dfs2(int x, int L, int R) {
		if (L <= val[x] && val[x] <= R)
			Hash[val[x]] = 1;

		if (l[x] != -1) {
			dfs2(l[x], L, min(R, val[x] - 1));
		}
		if (r[x] != -1)
			dfs2(r[x], max(L, val[x]), R);
	}	
	
	bool is[N];
	int main() {
		int n, i, root;
		cin >> n;
		for (i = 1; i <= n; ++i) {
			scanf("%d%d%d", &val[i], &l[i], &r[i]), Hash[val[i]] = 0;
	
			if (l[i] != -1)is[l[i]] = 1;
			if (r[i] != -1)is[r[i]] = 1;
		}
		for (i = 1; i <= n; ++i)if (!is[i])root = i;
		root = -1;
		for (i = 1; i <= n; ++i) {

			if (sz[i] == 0) {
				dfs(i);
				if (sz[i] == n)root = i;
			}
		}
		dfs2(root, 0, 1e9);
	
		int ret = 0;
		for (i = 1; i <= n; ++i)
			if (!Hash[val[i]])++ret;
		printf("%d\n", ret);
	}	