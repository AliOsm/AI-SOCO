#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int LEAVES = 1 << 18;

int n;
int cmd, x, a;
int sz = 1;
ll t[2 * LEAVES];
ll lazy[2 * LEAVES];

void push(int v, int tl, int tr) {
  if (lazy[v]) {
    t[v] += (tr - tl) * lazy[v];
    if (tl + 1 != tr) {
      lazy[v << 1] += lazy[v];
      lazy[v << 1 | 1] += lazy[v];
    }
    lazy[v] = 0;
  }
}

void update(int, int, int, int, int, ll);
void update(int l, int r, ll x) {
  update(1, 0, LEAVES, l, r, x);
}

ll getSum(int, int, int, int, int);
ll getSum(int l, int r) {
  return getSum(1, 0, LEAVES, l, r);
}

int main() {
#ifdef LOCAL
  freopen("input.txt", "r", stdin);
#endif
  scanf("%d", &n);
  for (int tc = 1; tc <= n; ++tc) {
    scanf("%d", &cmd);
    if (cmd == 1) {
      scanf("%d%d", &a, &x);
      update(0, a, x);
    } else if (cmd == 2) {
      scanf("%d", &x);
      ++sz;
      update(sz - 1, sz, x);
    } else {
      update(sz - 1, sz, -getSum(sz - 1, sz));
      --sz;
    }
    printf("%.12f\n", t[1] * 1.0 / sz);
  }
  return 0;
}

void update(int v, int tl, int tr, int l, int r, ll x) {
  push(v, tl, tr);
  if (l >= r) return;
  if (tl == l && tr == r) {
    t[v] += (tr - tl) * x;
    if (tl + 1 != tr) {
      lazy[v << 1] += x;
      lazy[v << 1 | 1] += x;
    }
    return;
  }
  int tm = (tl + tr) >> 1;
  update(v << 1, tl, tm, l, min(r, tm), x);
  update(v << 1 | 1, tm, tr, max(l, tm), r, x);
  t[v] = t[v << 1] + t[v << 1 | 1];
}

ll getSum(int v, int tl, int tr, int l, int r) {
  push(v, tl, tr);
  if (l >= r) return 0;
  if (tl == l && tr == r) return t[v];
  int tm = (tl + tr) >> 1;
  return getSum(v << 1, tl, tm, l, min(r, tm)) + getSum(v << 1 | 1, tm, tr, max(l, tm), r);
}