// In the name of God
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <bitset>
#define sqr(a) (a)*(a)
#define all(a) (a).begin(), (a).end()
using namespace std;
 
template <typename T>
T next_int() {
    T x = 0, p = 1;
    char ch;
    do { ch = getchar(); } while(ch <= ' ');
    if(ch == '-') {
        p = -1;
        ch = getchar();
    }
    while(ch >= '0' && ch <= '9') {
        x = x * 10 + (ch - '0');
        ch = getchar();
    }
    return p * x;
}
 
string next_token() {
    char ch;
    string ans = "";
    do { ch = getchar(); } while(ch <= ' ');
    while(ch > ' ') {
        ans += ch;
        ch = getchar();
    }
    return ans;
}
 
const long long INF = (long long)1e18;
const int INFINT = (int)1e9 + 227 + 1;
const int MAXN = (int)1e6 + 227 + 1;    
const int MOD = (int)1e9 + 7;
const long double EPS = 1e-7;
 
long long bin_pow(long long a, long long b) {
    if(!b) return 1;
    long long ans = bin_pow(a, b / 2);
    ans = ans * ans;
    if(b % 2) ans = ans * a;
    return ans;
}

int main() {
    // freopen(".in", "r", stdin);

    string a = next_token();

    vector<int> q[3];
    for(int i = 0; i < a.size(); i++)
        if(a[i] != '0') {
            if(a[i] == '1')
                q[0].push_back(i);
            else
                q[1].push_back(i);

            q[2].push_back(i);
        }

    int kek = (a.size() - 2) / 2 + (a.size() - 2) % 2;
    int lol = (a.size() - 2) / 2;

// <00>

    if(q[0].size() <= kek)
        puts("00");

// </00>

    // 1 -- (n / 2 + n % 2) + 1

    int n = a.size();

    if(q[0].size() <= n / 2 + n % 2 && q[2].size() >= n / 2 + n % 2) {
        if(q[0].size() == n / 2 + n % 2) {
            for(int i = 0; i < a.size(); i++)
                if(a[i] == '?')
                    a[i] = '0';
        }

        if(a.size() - q[2].size() == n / 2) {
            for(int i = 0; i < a.size(); i++)
                if(a[i] == '?')
                    a[i] = '1';
        }

        if(a[a.size() - 1] != '0')
            puts("01");
        if(a[a.size() - 1] != '1')
            puts("10");

    }

// <11>

    kek = (n - 2) / 2 + (n - 2) % 2;

    if((int)q[2].size() - kek >= 2)
        puts("11");

// </11>

}