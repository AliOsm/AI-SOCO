#include <bits/stdc++.h>
#define fi first
#define se second
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define eb emplace_back
#define emp emplace

using namespace std;
using ll = long long;
using ii = pair<int, int>;

int who(char c)
{
	if (c == 'A')
		return 0;
	else if (c == 'T')
		return 1;
	else if (c == 'C')
		return 2;
	return 3;
}

const int N = 100010;

int ft[4][11][10][N];

void update(int l, int mod, int r, int pos, int val)
{
	while (pos < N)
	{
		ft[l][mod][r][pos] += val;
		pos += pos&-pos;
	}
}

int query(int l, int mod, int r, int pos)
{
	int ret = 0;
	while (pos)
	{	
		ret += ft[l][mod][r][pos];
		pos -= pos&-pos;
	}
	return ret;
}

int main()
{
	ios::sync_with_stdio(0); cin.tie(0);
	string s;
	cin >> s;
	int n = (int)s.size();
	for (int i = 0; i < n; i++)
	{
		int c = who(s[i]);
		for (int m = 1; m <= 10; m++)
			update(c, m, (i+1)%m, i+1, 1);
	}
	
	int q;
	cin >> q;
	while (q--)
	{
		int ty;
		cin >> ty;
		if (ty == 1)
		{
			int p;
			char cc;
			cin >> p >> cc;
			int c = who(cc);
			int oc = who(s[p-1]);

			for (int m = 1; m <= 10; m++)
			{
				update(oc, m, p%m, p, -1);
				update(c, m, p%m, p, 1);
			}
			s[p-1] = cc;
		}
		else
		{
			int l, r;
			string e;
			cin >> l >> r >> e;
			int m = (int)e.size();
			int ans = 0;
			for (int i = 0; i < m; i++)
			{
				int c = who(e[i]);
				int mod = (l+i)%m;
				ans += query(c, m, mod, r) - query(c, m, mod, l-1);
			}
			cout << ans << '\n';
		}
	}
	return 0;
}

