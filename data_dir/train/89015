//int n,m;
//int count_matches(vs g1, vs g2){
//	int ans = 0;
//	for(int i = 0; i < n; ++i)
//		for(int j = 0; j < m; ++j)
//			if(g1[i][j] == g2[i][j])
//				++ans;
//	return ans;
//}
//vs solve_three(vs grid){
//	vector<vvi> collect(2,vvi(m,vi(4)));
//	for(int i = 0; i < n; ++i)
//		for(int j = 0; j < m; ++j)
//			collect[i%2][j][grid[i][j]]++;
//	vector<vvi> dp(m,vvi(4,vi(4,-MOD)));
//	vector<vvi> last_x(m,vvi(4,vi(4,-MOD)));
//	vector<vvi> last_y(m,vvi(4,vi(4,-MOD)));
//	for(int i = 0; i < 4; ++i)
//		for(int j = 0; j < 4; ++j)
//			if(i != j)
//				dp[0][i][j] = collect[0][0][i]+collect[1][0][j];
//	for(int i = 1; i < m; ++i){
//		for(int x = 0; x < 4; ++x)
//			for(int y = 0; y < 4; ++y){
//				if(x == y) continue;
//				for(int a = 0; a < 4; ++a){
//					if(a == x || a == y) continue;
//					for(int b = 0; b < 4; ++b){
//						if(b == x || b == y || b == a) continue;
//						int ndp = dp[i-1][x][y]+collect[0][i][a]+collect[1][i][b];
//						if(ndp > dp[i][a][b]){
//							dp[i][a][b] = ndp;
//							last_x[i][a][b] = x;
//							last_y[i][a][b] = y;
//						}
//					}
//				}
//			}
//	}
//	int bx = -1, by = 1;
//	for(int x = 0; x < 4; ++x)
//		for(int y = 0; y < 4; ++y)
//			if(bx == -1 || dp[m-1][x][y] > dp[m-1][bx][by]){
//				bx = x;
//				by = y;
//			}
//	//watch(bx);
//	//watch(by);
//	//watch(dp[m-1][bx][by]);
//	vs ans(2,string(m,0));
//	ans[0][m-1] = bx;
//	ans[1][m-1] = by;
//	for(int i = m-1; i >= 1; --i){
//		int nx = last_x[i][bx][by];
//		int ny = last_y[i][bx][by];
//		bx = nx;
//		by = ny;
//		ans[0][i-1] = bx;
//		ans[1][i-1] = by;
//	}
//	for(int i = 2; i < n; ++i)
//		ans.pb(ans[i%2]);
//	return ans;
//}
//vs solve_two(vs grid){
//	return grid;
//}
//void trans(vs &grid){
//	for(int i = 0; i < n; ++i)
//		for(int j = 0; j < m; ++j){
//			if(grid[i][j] == 'A') grid[i][j] = 0;
//			else if(grid[i][j] == 'C') grid[i][j] = 1;
//			else if(grid[i][j] == 'G') grid[i][j] = 2;
//			else if(grid[i][j] == 'T') grid[i][j] = 3;
//			else if(grid[i][j] == 0) grid[i][j] = 'A';
//			else if(grid[i][j] == 1) grid[i][j] = 'C';
//			else if(grid[i][j] == 2) grid[i][j] = 'G';
//			else if(grid[i][j] == 3) grid[i][j] = 'T';
//		}
//}
//void rotate(vs &grid){
//	int tn = sz(grid);
//	int tm = sz(grid[0]);
//	vs ans(tm,string(tn,0));
//	for(int i = 0; i < tn; ++i)
//		for(int j = 0; j < tm; ++j)
//			ans[j][i] = grid[i][j];
//	grid = ans;
//}
//void _(){
//	cin >> n >> m;
//	vs grid(n);
//	cin >> grid;
//	trans(grid);
//	vs g1 = solve_three(grid);
//	vs g2;
//	{
//		rotate(grid);
//		swap(n,m);
//		g2 = solve_three(grid);
//		rotate(g2);
//		rotate(grid);
//		swap(n,m);
//	}
//	trans(grid);
//	trans(g1);
//	trans(g2);
//	//print("");
//	//print(g1,"\n");
//	//print("");
//	//print(g2,"\n");
//	//print("");
//	if(count_matches(g1,grid) > count_matches(g2,grid))
//		print(g1,"\n");
//	else
//		print(g2,"\n");
//}
//
//
// ================================================ 
// ^^^	ABOVE is what I wrote in my editor	^^^
// ------------------------------------------------ 
// vvv	BELOW is automatically generated 	vvv
// ================================================ 
#include <set>
#include <iomanip>
#include <algorithm> 
#include <cassert>
#include <vector>
#include <iostream>
#include <string>
using namespace std;
#define pb push_back 
#define all(v) (v).begin(),(v).end()
#define sz(v) ll(v.size())
#define watch(x) cout << (#x) << " = " << x << '\n'
typedef long long ll;
typedef double ld;
typedef vector<int> vi;
typedef vector<string> vs;
typedef vector<vi> vvi;
template<typename IT>
ostream &print(IT b, IT e, string sep = " ", ostream &stream = cout){
    for(IT it = b; it != e; ++it){
        stream << *it;
        if(it+1 != e) stream << sep;
    } 
    return stream;
}
template<typename IT> istream &read(IT b, IT e, istream &stream = cin){
    for(IT it = b; it != e; ++it)
        stream >> *it; 
    return stream;
}
template<typename T> ostream &operator<<(ostream &stream, vector<T> &t){
    return print(all(t)," ",stream);
}
template<typename T> ostream &operator<<(ostream &stream, vector<T> &&t){
    return print(all(t)," ",stream);
}
template<typename T> istream &operator>>(istream &stream, vector<T> &t){
    return read(all(t),stream);
}
template <typename T> 
void print(T x, string end = "\n"){
    cout << x << end;
}
template <typename t> 
void print(vector<t> arr,string sep=" "){
    if(arr.empty()){
        return;
    }
    print(arr.begin(),arr.end(),sep);
    cout << '\n';
}
template <typename T> 
void print(vector<vector<T> > arr){
    for(int i = 0; i < sz(arr); ++i){
        cout << "[" << arr[i] << "]";
        if(i+1 < sz(arr))
            cout << ", ";
    }
    cout << '\n';
}
template<typename T>
T _();
const ll MOD = 1e9+7;
template<typename T>
vector<T> operator+(const vector<T> &lhs, const vector<T> &rhs){
    vector<T> ans(lhs);
    assert(ans.size() == rhs.size());
    for(int i = 0; i < rhs.size(); ++i)
        ans[i] += rhs[i];
    return ans;
}
template<typename T>
vector<T> operator+=(vector<T> &lhs, const vector<T> &rhs){
    return lhs = lhs+rhs;
}
template<typename T>
vector<T> operator-(const vector<T> lhs, const vector<T> rhs){
    vector<T> ans(all(lhs));
    assert(ans.size() == rhs.size());
    for(int i = 0; i < rhs.size(); ++i)
        ans[i] -= rhs[i];
    return ans;
}
template<typename T>
vector<T> operator-=(vector<T> &lhs, const vector<T> &rhs){
    return lhs = lhs-rhs;
}
template<typename T>
vector<T> append(vector<T> &lhs, const vector<T> rhs){
    lhs.insert(lhs.end(),all(rhs));
    return lhs;
}
template<typename T>
T max(const vector<T> arr){
    assert(!arr.empty());
    T ans = arr[0];
    for(auto &cur : arr)
        ans = max(ans,cur);
    return ans;
}
template<typename T>
T max(const set<T> &s){
    assert(!s.empty());
    return *--s.end();
}
template<typename T, typename G>
vector<T> set_max(vector<T> &base, const vector<G> &comp){
    assert(base.size() == comp.size());
    for(int i = 0; i < (int)comp.size(); ++i)
        base[i] = max(base[i],comp[i]);
    return base;
}
int n,m;
int count_matches(vs g1, vs g2){
	int ans = 0;
	for(int i = 0; i < n; ++i)
		for(int j = 0; j < m; ++j)
			if(g1[i][j] == g2[i][j])
				++ans;
	return ans;
}
vs solve_three(vs grid){
	vector<vvi> collect(2,vvi(m,vi(4)));
	for(int i = 0; i < n; ++i)
		for(int j = 0; j < m; ++j)
			collect[i%2][j][grid[i][j]]++;
	vector<vvi> dp(m,vvi(4,vi(4,-MOD)));
	vector<vvi> last_x(m,vvi(4,vi(4,-MOD)));
	vector<vvi> last_y(m,vvi(4,vi(4,-MOD)));
	for(int i = 0; i < 4; ++i)
		for(int j = 0; j < 4; ++j)
			if(i != j)
				dp[0][i][j] = collect[0][0][i]+collect[1][0][j];
	for(int i = 1; i < m; ++i){
		for(int x = 0; x < 4; ++x)
			for(int y = 0; y < 4; ++y){
				if(x == y) continue;
				for(int a = 0; a < 4; ++a){
					if(a == x || a == y) continue;
					for(int b = 0; b < 4; ++b){
						if(b == x || b == y || b == a) continue;
						int ndp = dp[i-1][x][y]+collect[0][i][a]+collect[1][i][b];
						if(ndp > dp[i][a][b]){
							dp[i][a][b] = ndp;
							last_x[i][a][b] = x;
							last_y[i][a][b] = y;
						}
					}
				}
			}
	}
	int bx = -1, by = 1;
	for(int x = 0; x < 4; ++x)
		for(int y = 0; y < 4; ++y)
			if(bx == -1 || dp[m-1][x][y] > dp[m-1][bx][by]){
				bx = x;
				by = y;
			}
	//watch(bx);
	//watch(by);
	//watch(dp[m-1][bx][by]);
	vs ans(2,string(m,0));
	ans[0][m-1] = bx;
	ans[1][m-1] = by;
	for(int i = m-1; i >= 1; --i){
		int nx = last_x[i][bx][by];
		int ny = last_y[i][bx][by];
		bx = nx;
		by = ny;
		ans[0][i-1] = bx;
		ans[1][i-1] = by;
	}
	for(int i = 2; i < n; ++i)
		ans.pb(ans[i%2]);
	return ans;
}
vs solve_two(vs grid){
	return grid;
}
void trans(vs &grid){
	for(int i = 0; i < n; ++i)
		for(int j = 0; j < m; ++j){
			if(grid[i][j] == 'A') grid[i][j] = 0;
			else if(grid[i][j] == 'C') grid[i][j] = 1;
			else if(grid[i][j] == 'G') grid[i][j] = 2;
			else if(grid[i][j] == 'T') grid[i][j] = 3;
			else if(grid[i][j] == 0) grid[i][j] = 'A';
			else if(grid[i][j] == 1) grid[i][j] = 'C';
			else if(grid[i][j] == 2) grid[i][j] = 'G';
			else if(grid[i][j] == 3) grid[i][j] = 'T';
		}
}
void rotate(vs &grid){
	int tn = sz(grid);
	int tm = sz(grid[0]);
	vs ans(tm,string(tn,0));
	for(int i = 0; i < tn; ++i)
		for(int j = 0; j < tm; ++j)
			ans[j][i] = grid[i][j];
	grid = ans;
}
void _(){
	cin >> n >> m;
	vs grid(n);
	cin >> grid;
	trans(grid);
	vs g1 = solve_three(grid);
	vs g2;
	{
		rotate(grid);
		swap(n,m);
		g2 = solve_three(grid);
		rotate(g2);
		rotate(grid);
		swap(n,m);
	}
	trans(grid);
	trans(g1);
	trans(g2);
	//print("");
	//print(g1,"\n");
	//print("");
	//print(g2,"\n");
	//print("");
	if(count_matches(g1,grid) > count_matches(g2,grid))
		print(g1,"\n");
	else
		print(g2,"\n");
}

int main(){
    ios_base::sync_with_stdio(false); cin.tie(0);
    cout << fixed << setprecision(15);
    _();
}
