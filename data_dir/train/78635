#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops")
#pragma GCC optimize("no-stack-protector,fast-math")
#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define IO ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
using namespace std;
const int N = 2e5 + 5, M = 2 * N + 5;
 
int n, a[N], b[N];
int vis[N], vid;
int VIS[N], VID;
 
bool valid(int st){
    ++VID;
    int sz = n - st;
    for(int i = st ; i < n ; ++i)
        VIS[a[i]] = VID;
    for(int i = 1 ; i <= sz ; ++i)
        if(VIS[i] != VID)return false;
    return (sz > 0);
}
 
pair<int, int> getInd(int mx, bool isRev){
    ++vid;
    int l = 1;
    for(int i = 0 ; i < n ; ++i){
        vis[a[i]] = vid;
        while(vis[l] == vid)++l;
        if(l != mx + 1)continue;
        if(i + 1 != mx)break;
        if(!valid(i + 1))break;
        if(isRev == false)
            return make_pair(i + 1, n - (i + 1));
        return make_pair(n - i - 1, i + 1);
    }
    return make_pair(-1, -1);
}
 
int main(){
    int t;
    scanf("%d", &t);
    while(t--){
        scanf("%d", &n);
        for(int i = 0 ; i < n ; ++i)scanf("%d", a + i);
 
        int mx = *max_element(a, a + n);
 
        set<pair<int, int> > ans;
 
        auto ret = getInd(mx, false);
        if(~ret.first)
            ans.emplace(ret);
 
        reverse(a, a + n);
 
        ret = getInd(mx, true);
        if(~ret.first)
            ans.emplace(ret);
 
        printf("%d\n", (int)ans.size());
        for(auto p : ans)
            printf("%d %d\n", p.first, p.second);
    }
}