#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds ;
#define ll long long
#define ld long double
#define pp pair<ll,ll>
#define rep(i,a,b) for(ll i=a;i<b;i+=1)
#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(a) int((a).size())
#define present(c,x) ((c).find(x) != (c).end())
#define mp make_pair
#define hell 1000000007
#define F first
#define S second
#define sll(x) scanf("%lld",&x)
#define si(x) scanf("%d",&x)
typedef tree<pp , null_type , less<pp> , rb_tree_tag , tree_order_statistics_node_update > ordered_set ;
ll t=1 ;
vector<ll> fac( 200005,0 ) , inv( 200005,0 ) ;

vector<ll> calcans( ll n , vector<ll> v )
{
    vector<ll> temp , temp1 ;
    rep( i , 0 , n )
        temp.pb(v[i]);
    ll f = 1 ;
    while(sz(temp)%4!=1)
    {
        //for(auto const& it : temp )cout<<it<<" ";cout<<"\n";
        rep( i , 0 , sz(temp)-1)
        {
            f ? temp1.pb(temp[i]+temp[i+1]) : temp1.pb(temp[i]-temp[i+1]);
            f = !f ;
        }
        temp.clear();
        for(auto const& it : temp1 )
            temp.pb(it);
        temp1.clear();
    }
    return temp;
}
ll power( ll base , ll expo )
{
    ll ans = 1 ;
    while( expo > 0 )
    {
        if(expo&1)
            ans=(ans*base)%hell;
        base=(base*base)%hell;
        expo/=2;
    }
    return ans ;
}
ll C( ll x , ll y )
{
    ll ans = fac[x] ;
    ans = ( ans * inv[y] )%hell;
    ans = ( ans * inv[x-y] )%hell;
    return ans;
}
vector<ll> v1( ll n , ll x )
{
    vector<ll> ans ;
    rep( i , 0 , x + 1 )
    {
        ans.pb(C(x,i));
        ans.pb(0);
    }
    return ans;
}
void solve()
{
    ll n , x ;
    cin >> n ;
    vector<ll> v(n) , vv ;
    rep( i , 0 , n )
        cin >> v[i] ;
    v = calcans(n,v);
    n = sz(v);
    x = (n-1)/2;
    vv = v1(n,x);
    ll anss = 0 ;
    rep(i,0,n)
        anss = ( anss + vv[i]*v[i] + hell )%hell;
    cout << anss ;
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    fac[0]=1;
    rep( i , 1 , 200005 )
        fac[i]=(fac[i-1]*i)%hell;
    inv[200000]=power(fac[200000],hell-2);
    for(ll i = 200000 - 1 ; i >= 0 ; i-- )
        inv[i] =(inv[i+1]*(i+1))%hell;
    //cin>>t;
    while(t--)
        solve() ;
    return 0 ;
}
