#include <bits/stdc++.h>
#define P(x,y) make_pair(x,y)
using namespace std;
const int MX=100007;
const long long INF = (1ll<<60);
int n  , m;
vector < pair < int , int > > v[MX];
long long  dis[MX] ;
int vi[MX] , par[MX];
int main(){
    cin>>n>>m;
    for(int i=1;i<=m;i++){
        int a , b , c;
        //cin>>a>>b>>c;
        scanf("%d %d %d",&a,&b,&c);
        v[a].push_back(P(b,c));
        v[b].push_back(P(a,c));
    }
    for(int i=1;i<=n;i++){
        vi[i] = 0;
        dis[i] = INF;
    }
    priority_queue < pair < long long , int > > Q;
    int S = 1;
    dis[S] = 0;
    Q.push(P(0 , S));
    while(!Q.empty()){
        int node = Q.top().second ;
        long long cost = - Q.top().first; // - is important
        Q.pop();
        if(vi[node]) continue;
        vi[node] = 1;
        int nxt , sz = v[node].size() ;
        long long  ncost;
        for(int i=0;i<sz;i++){
            nxt = v[node][i].first , ncost = cost + v[node][i].second;
            if(dis[nxt] > ncost){
                dis[nxt] = ncost;
                par[nxt] = node;
                Q.push(P(-ncost , nxt)); // - is important
            }
        }
    }
    if(dis[n] == INF) {
        puts("-1");
        return 0;
    }
    vector < int > sol;
    int node = n;
    while(1){
        sol.push_back(node);
        if(node == 1) break;
        node = par[node];
    }
    reverse(sol.begin() , sol.end());
    for(int i=0;i<sol.size();i++) cout<<sol[i]<<' ';
}
