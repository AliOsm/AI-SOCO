#include <stdio.h>
#include <string.h>
#include <math.h>
#include <set>
#include <queue>
#include <map>
#include <algorithm>
using namespace std;
const int MAXN = 100010,MAXT = 20;
///Tree
struct Tree
{
    Tree *l,*r;
    int sz;
} seg[MAXN*40],*root[MAXN*2];
int tcnt=0;
Tree *build(int l,int r)
{
    Tree *next=seg+(tcnt++);
    next->sz=0;
    if (l==r) return next;
    int mid=(l+r)>>1;
    next->l=build(l,mid);
    next->r=build(mid+1,r);
    return next;
}
Tree *insert(Tree *p,int L,int R,int val,int add)
{
    Tree *next=seg+(tcnt++);
    *next=*p;
    if (L==R)
    {
        next->sz+=add;
        return next;
    }
    int mid=(L+R)>>1;
    if (val<=mid) next->l=insert(p->l,L,mid,val,add);
    else next->r=insert(p->r,mid+1,R,val,add);
    next->sz=next->l->sz+next->r->sz;
    return next;
}
int query(Tree *p,int L,int R,int l,int r)
{
    if (L>=l&&R<=r) return p->sz;
    if (R<l||L>r) return 0;
    int mid=(L+R)>>1;
    return query(p->l,L,mid,l,r)+query(p->r,mid+1,R,l,r);
}
struct Edge
{
    int v,pre;
};
Edge e[MAXN];
int hh[MAXN],ecnt;
void addEdge(int u,int v)
{
    e[ecnt].v=v;
    e[ecnt].pre=hh[u];
    hh[u]=ecnt++;
}
///DFS
int L[MAXN],R[MAXN],Tstamp,dep[MAXN],fa[MAXN][MAXT];
void dfs(int u,int pu)
{
    L[u]=++Tstamp;
    dep[u]=dep[pu]+1;
    fa[u][0]=pu;
    for (int i=1; i<MAXT; i++)
        fa[u][i]=fa[fa[u][i-1]][i-1];
    for (int i=hh[u]; i!=-1; i=e[i].pre)
    {
        int v=e[i].v;
        dfs(v,u);
    }
    R[u]=++Tstamp;
}

///LCA
int get_lca(int x,int y)
{
    if (dep[x]<dep[y]) swap(x,y);
    int delta=dep[x]-dep[y];
    for (int i=MAXT-1; i>=0; i--)
        if (delta&(1<<i))
        {
            x=fa[x][i];
            delta-=(1<<i);
        }
    if (x==y) return x;
    for (int i=MAXT-1; i>=0; i--)
        if (fa[x][i]!=fa[y][i])
            x=fa[x][i],y=fa[y][i];
    return fa[x][0];
}
int end;
int get(int x,int p,int tot,int l,int r)
{
    for (int i=MAXT-1;i>=0;i--)
    {
        int len=dep[x]-dep[p];
        if ((1<<i)>len) continue;
        int u=fa[x][i];
        int left=root[L[x]]->sz-query(root[L[x]],0,end,l,r),
            right=root[L[u]]->sz-query(root[L[u]],0,end,l,r);
        if (left-right<tot)
        {
            x=u;
            tot-=(left-right);
        }
    }
    return x;
}
struct Quest
{
    int x,y,l,r,k;
};
Quest q[MAXN];
int num[MAXN],id[MAXN*2],add[MAXN*2];
int main()
{
    int n;
    scanf("%d",&n);
    int r;
    memset(hh,-1,sizeof(hh));
    ecnt=0;
    for (int i=1;i<=n;i++)
    {
        num[i]=0;
        int u;
        scanf("%d",&u);
        if (u==0) r=i;
        else addEdge(u,i);
    }
    int m;
    scanf("%d",&m);
    int cnt=0;
    for (int i=1;i<=m;i++)
    {
        int ope;
        scanf("%d",&ope);
        if (ope==1)
        {
            int pos;
            scanf("%d",&pos);
            num[pos]=i;
        }
        else
        {
            scanf("%d%d%d%d",&q[cnt].x,&q[cnt].y,&q[cnt].k,&q[cnt].l);
            q[cnt].l++;
            q[cnt++].r=i;
        }
    }
    Tstamp=0;
    dfs(r,r);
    end=100000;
    for (int i=1; i<=n; i++)
    {
        id[L[i]]=id[R[i]]=i;
        add[L[i]]=1;
        add[R[i]]=-1;
    }
    root[0]=build(0,end);
    for (int i=1; i<=Tstamp; i++)
    {
        root[i]=insert(root[i-1],0,end,num[id[i]],add[i]);
    }
    for (int i=0;i<cnt;i++)
    {
        int x=q[i].x,y=q[i].y,k=q[i].k,l=q[i].l,r=q[i].r;
        int p=get_lca(x,y);
        int left=root[L[x]]->sz-query(root[L[x]],0,end,l,r),
            right=root[L[y]]->sz-query(root[L[y]],0,end,l,r),
            lca=root[L[p]]->sz-query(root[L[p]],0,end,l,r);
        left-=lca; right-=lca;
        int tot=left+right;
        if (num[p]<l||num[p]>r) tot++;
        if (num[x]<l||num[x]>r) k++;
        if (num[y]<l||num[y]>r) tot--;
        if (tot<k) puts("-1");
        else if ((num[p]<l||num[p]>r)&&left+1==k) printf("%d\n",p);
        else if (left>=k) printf("%d\n",get(x,p,k,l,r));
        else
        {
            if (num[p]<l||num[p]>r) left++;
            printf("%d\n",get(y,p,right-(k-left)+1,l,r));
        }
    }
    return 0;
}
