#include<bits/stdc++.h>
#define ll long long 
#define hell 1000000007 
#define F first
#define re 15000000
#define S second
#define pb push_back
#define all(a)  (a).begin(),(a).end()
#define rep(i,a,b) for(ll int i = a;i<b;i++)
#define pi 3.1415926536
#define Mod 998244353
//char a[2000][2000];
using namespace std;
map<int,int> m;
void primeFactors(int n) 
{ 
    // Print the number of 2s that divide n 
    while (n%2 == 0) 
    { 
        m[2]++; 
        n = n/2; 
    } 
  
    // n must be odd at this point.  So we can skip  
    // one element (Note i = i +2) 
    for (int i = 3; i <= sqrt(n); i = i+2) 
    { 
        // While i divides n, print i and divide n 
        while (n%i == 0) 
        { 
            m[i]++; 
            n = n/i; 
        } 
    } 
  
    // This condition is to handle the case when n  
    // is a prime number greater than 2 
    if (n > 2) 
        m[n]++; 
} 
ll gcd(ll a,ll b)
{
    if (a%b==0)
        return b;
    else
        return gcd(b,a%b);
}

int sum (ll a)
{
    int sum =0;
    while(a>0)
    {
        sum = sum + (a%10);
        a=a/10;
    }
    return sum;
}
int count_digit(ll n)
{
   int  count =0;
    while(n>0)
    {
        if(n%10==9){
            count++;
            n=n/10;
            continue;
        }
        else{
            return count;
        n = n/10;
    }
        //count++;
    }
   // return count;
}
int binarySearch(int x,int y ,ll z ,ll v[])
{
    int low = x;
    int high = y;
    int mid = x+(y-x)/2;
    while(low<=high)
    {
        if(v[mid]==z)
            return mid;
        if(v[mid]<z)
            return binarySearch(mid+1,high,z,v);
        if(v[mid]>z)
            return binarySearch(low,mid-1,z,v);
    }
    return -1;
}
ll modularExponentiation(ll x,ll n,ll M)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return modularExponentiation((x*x)%M,n/2,M);
    else                             //n is odd
        return (x*modularExponentiation((x*x)%M,(n-1)/2,M))%M;

} 
ll binaryExponentiation(ll x,ll n)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return binaryExponentiation(x*x,n/2);
    else                             //n is odd
        return x*binaryExponentiation(x*x,(n-1)/2);
}

int binary(int n)
{
    int c =0;
    while(n>0){
        if(n%2==1)
        {
            return pow(2,c);
        }
        n=n/2;
        c++;}
}
ll ceil1(ll x ,ll y)
{

    if(x%y==0)
        return x/y;
    else
        return x/y+1;
}
set<ll> s;
void genrate(ll n,int len,int max)
{
    if(len>max)
        return ;
    s.insert(n);
    genrate(n*10+1,len+1,max);
    genrate(n*10+0,len+1,max);
}
 
int main()
{   
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int tests=1;
      //freopen("input.txt", "r", stdin);
     // freopen("output.txt", "w", stdout);
    //cin>>tests;   
    while(tests--)  
    { 
        ll n,m,x,y,w;
        cin>>n>>m;
        vector<pair<ll,ll> > v[n+1];
        for(int i =0;i<m;i++)
        {
            cin>>x>>y>>w;
            v[x].pb({y,w});
            v[y].pb({x,w});
        }
       // int X ;
       // cin>>X;
        ll distance[n+1]={10000};
        //distance[1] = 0;
        for(int i =1;i<=n;i++)
            distance[i] = 1e16;
        distance[1] = 0;
    
        bool visited[n+1];
        memset(visited,0,sizeof(visited));
        priority_queue<pair<ll,ll> ,vector<pair<ll,ll> > ,greater<pair<ll,ll> > > q;
        q.push({0,1});
        map<ll,ll> m1;
        while(!q.empty())
        {
            pair<ll,ll> p = q.top();
            q.pop();
            //cout<<p.F<<" "<<p.S<<endl;
            int index = p.S ,dis=p.F;
            if(visited[index])
                continue;
            visited[index] = 1;

            for(int j = 0;j<v[index].size();j++)
            {
              //  cout<<distance[v[index][j].F]<<" ";
                if(distance[index] + v[index][j].S < distance[v[index][j].F])
                {
                   // cout<<"Hi";
                    m1[v[index][j].F] = index;
                    distance[v[index][j].F] = distance[index] + v[index][j].S;
                    q.push({distance[v[index][j].F] , v[index][j].F});
                }
            }
        }
           int K = n;
           if(m1[n]==0)
            cout<<-1;
        else
        {
            vector<ll> ans;
            ans.pb(n);
            while(m1[n]!=1)
            {
                n = m1[n];
                ans.pb(n);
            }
            ans.pb(1);
            for(int i =ans.size()-1;i>=0;i--)
                cout<<ans[i]<<" ";
        }
        
     }
      //  cout<<endl;
 }



