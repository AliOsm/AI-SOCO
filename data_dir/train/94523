#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
#include <random>
#include <cassert>
#include <sstream>
using namespace std;
#define F first
#define S second
#define pb emplace_back
#define MP make_pair
#define ALL(x) begin(x), end(x)
#define SZ(x) (int)(x).size()
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
#define ln(i, n) " \n"[i == n]
typedef long long LL;
typedef long double LDB;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
//////////////////////
const long double eps = 1e-13;
const long double PI = acos(-1);
const int INF = (int)1e9;
const LL  INFF = (LL)1e18;
const int mod = (int)1e9 + 7;
const int MXN = (int)2e3 + 7;
typedef LL Type;
struct Pt{
	Type x, y;
	Pt(){};
	Pt(Type _x, Type _y) : x(_x), y(_y){
	}
	void read(){ scanf("%lld %lld", &x, &y); }
	void print(){ printf("%lld %lld\n", x, y); }
	Pt operator +(const Pt &p2){ return Pt(x+p2.x, y+p2.y); }
	Pt operator -(const Pt &p2){ return Pt(x-p2.x, y-p2.y); }
	Pt operator *(const Type &p2){ return Pt(x*p2, y*p2); }
	Type operator *(const Pt &p2){ return x*p2.x+y*p2.y; }
	Type operator ^(const Pt &p2){ return x*p2.y-y*p2.x; }
	Type dis2(){ return x*x + y*y; }
	double dis(){ return sqrt(x*x +y*y); }
	const bool operator <(const Pt& p2) const{
		return x < p2.x || (x == p2.x && y < p2.y);
	}
};
struct Line{
	int s, e;
	Line(){};
	Line(int _s, int _e) : s(_s), e(_e){
	}
	//void read(){ s.read(); e.read(); }
};
int typ(Pt &p){
	if (p.x > 0 || (p.x == 0 && p.y > 0)) return 0;
	return 1;
}
Pt pt[MXN];
Line line[MXN*MXN];
bool cmp(Line &l1, Line &l2){
	Pt p1 = (pt[l1.e] - pt[l1.s]);
	Pt p2 = (pt[l2.e] - pt[l2.s]);
	int t1 = typ(p1);
	int t2 = typ(p2);
	if (t1 != t2) return t1 < t2;
	return (p1 ^ p2) < 0;
}
LL C(int v){
	return v*1ll*(v-1)/2;
}
int pos[MXN], seg[MXN];
int main(){
	int n; scanf("%d", &n);
	for (int i = 1; i <= n; i++)
		pt[i].read();
	sort(pt + 1, pt + n + 1);
	int cntp = 0;
	for (int i = 1; i <= n; i++)
		for (int j = i+1; j <= n; j++)
			line[++cntp] = Line(i, j);
	sort(line + 1, line + cntp + 1, cmp);
	for (int i = 1; i <= n; i++) {
		pos[i] = seg[i] = i;
	}
	LL ans = 0;
	for (int i = 1; i <= cntp; i++) {
		int p1 = pos[ line[i].s ];
		int p2 = pos[ line[i].e ];
		assert(p1 + 1 == p2);
		swap(seg[p1], seg[p2]);
		pos[ line[i].s ]++;
		pos[ line[i].e ]--;
		LL v = C(p1-1)*C(n-p2);
		ans += v;
	}
	printf("%lld\n", ans);
	return 0;
}
