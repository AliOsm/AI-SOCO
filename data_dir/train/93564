#include <bits/stdc++.h>
using namespace std;
const int N = 10002;
int memo[N];
char s[N];
int n, cur;
string arr[N * 10];
struct Node
{
    Node *child[26];
    int index;
    Node ()
    {
        memset(child,0, sizeof(child));
        index = -1;
    }
};

void insert(char* str, Node *&u)
{
    if (u == NULL)
        u = new Node;

    if (*str == NULL)
    {
        u->index = cur;
        return;
    }
    insert(str + 1, u->child[str[0] - 'a']);
}
Node *root = new Node();
int dp(int idx) {
	if (idx == n)
        return 1;

	int &ret = memo[idx];
	if (ret != -1)
		return ret;
	ret = 0;
	Node *node = new Node();
	node = root;
	for (int i = idx; i < n; i++) {
		if (node->child[s[i] - 'a'] != NULL){
            if (node->child[s[i] - 'a']->index != -1){
                ret |= dp(i + 1);
                if (ret){
                     return ret = node->child[s[i] - 'a']->index;
                }
            }
		}else
            break;
        node = node->child[s[i] - 'a'];
	}
	return ret;
}
int main(){

    int q;
	scanf("%d %s %d", &n, s, &q);
	while (q--) {
        ++cur;
		char t[N];
		char org[N];
		scanf("%s", t);
		strcpy(org, t);
		int len = strlen(t);
		for (int i = 0; i < len; i++)
            t[i] = tolower(t[i]);
		reverse(t, t + len);
		insert(t, root);
		arr[cur] = string(org);
	}
	memset(memo, -1, sizeof memo);

	int garbage = dp(0), i = 0;
	for (int i = 0; i < n; i++){
        if (memo[i] != -1 && memo[i]){
            printf("%s ", arr[memo[i]].c_str());
        }
	}
}
