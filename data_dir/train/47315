#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:336777216")
#pragma GCC optimize("Ofast")

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
#define int long long int
typedef complex<long double> cd;
const long double pi=acos(-1);
typedef double db;
typedef long double ldb;
typedef pair <int, int> pii;
typedef pair <db, db> pdd;
typedef vector<int> vi;
typedef vector<vector<int> > matrix;

#define m1 make_pair
#define pb push_back
#define flush fflush(stdout)
#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);
#define reset(x,v) memset(x,v,sizeof(x))

#define fi first
#define se second
#define endl "\n"
#define debug(x) (cerr << #x << ": " << x << "\n")
#define setbits(x) __builtin_popcount(x)
#define setbitsll(x) __builtin_popcountll(x)
#define all(x) x.begin(),x.end()
#define pii pair<int,int>

inline ll gcd(ll a,ll b){if(a==0) return b;return gcd(b%a,a);}
inline ll power(ll a,ll n,ll m){if(n==0)return 1;ll p=power(a,n/2,m);p=(p%m*p%m)%m;if(n%2) return (p%m*a%m)%m;else return p;}
const double EPS = 1e-9;
const ll MOD =998244353;
const ll hell=1000000007;
const int INF = 1e17;
const ll LL_INF = 0x3f3f3f3f3f3f3f3f;
template<typename T>
using ordered_set=tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

auto seed = chrono::high_resolution_clock::now().time_since_epoch().count();
std::mt19937 rng(seed);

double startTime;
double getCurrentTime() {
    return ((double)clock() - startTime) / CLOCKS_PER_SEC;
}


const int dx[] = { -1, 0, 1, 0 };
const int dy[] = { 0, 1, 0, -1 };

const int N=10005;

vector<pii> adj[N+1];bool visited[N+1];
int Time=0,tin[N];int up1[N],up2[N],down1[N],down2[N];
int dp[N][2];int cnt;int color[N];vi ans;

void dfs(int u,int p)
{
    visited[u]=1;
    tin[u]=Time++;
    color[u]=(!color[p]);
    for(int i=0;i<adj[u].size();i++)
    {
        int v=adj[u][i].fi,in=adj[u][i].se;
        if(v==p)
            continue;
        if(!visited[v])
        {
            dfs(v,u);
        }
        else
        {
           
            if(tin[v]<tin[u])
            {
                if(color[v]!=(!color[u]))
                {
                    cnt++;
                    up1[u]+=1;
                    down1[v]+=1;
                }
                up2[u]+=1;
                down2[v]+=1;
            }
        }
        
    }
    
}
void dfs2(int u,int p,int ind)
{
    visited[u]=1;
    tin[u]=Time++;
    for(int i=0;i<adj[u].size();i++)
    {
        int v=adj[u][i].fi,in=adj[u][i].se;
        if(v==p)
            continue;
        if(!visited[v])
        {
            dfs2(v,u,in);
            dp[u][0]+=dp[v][0];
            dp[u][1]+=dp[v][1];
        }
        else
        {
            if(tin[v]<tin[u])
            {
                if(color[v]!=(!color[u]))
                {
                    if(cnt==1)
                        ans.pb(in);
                }
                else
                {
                    if(!cnt)
                        ans.pb(in);
                }
            }
            
            
        }
    }
    dp[u][0]+=up1[u]-down1[u];
    dp[u][1]+=up2[u]-down2[u];
    if(p)
    {
        if(dp[u][0]==cnt&&dp[u][1]==cnt)
            ans.pb(ind);
        else if(!cnt)
            ans.pb(ind);
    }
    
}




void solve()
{
    int n,m;
    cin>>n>>m;
    int u,v;
    for(int i=0;i<m;i++)
    {
        cin>>u>>v;
        adj[u].pb(m1(v,i+1));
        adj[v].pb(m1(u,i+1));
    }
    for(int i=1;i<=n;i++)
        if(!visited[i])
     dfs(i,0);
    //cout<<cnt<<endl;
    memset(visited,0,sizeof(visited));
    for(int i=1;i<=n;i++)
        if(!visited[i])
            dfs2(i,0,-1);
    
    cout<<ans.size()<<endl;
    if(ans.size()>1)
    sort(ans.begin(),ans.end());
    for(int i:ans)
        cout<<i<<" ";
    cout<<endl;
    
}

int32_t main()
{
    IOS;
    
    int t;
    t=1;
    //cin>>t;
    while(t--)
    {
        solve();
    }
    return 0;
}
