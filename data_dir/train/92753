#include <stdio.h>
#include <vector>
#include <iostream>
#define pb push_back
using namespace std;

struct ret {
	int x1, y1, x2, y2;

	ret() {}
	ret(int x1, int y1, int x2, int y2):x1(x1), y1(y1), x2(x2), y2(y2) {}
};

vector <ret> res;
int n;

int query(int xmin, int ymin, int xmax, int ymax) {
	int x;
	printf("? %d %d %d %d\n", xmin, ymin, xmax, ymax);
	fflush(stdout);
	scanf(" %d", &x);
	return x;
}

void print(ret &r) {
	printf(" %d %d %d %d", r.x1, r.y1, r.x2, r.y2);
}
	

void solve(int got, int xmin, int ymin, int xmax, int ymax) {
	if (xmin <= 0 || xmin > xmax || xmax > n || ymin <= 0 || ymin > ymax || ymax > n) {
		return;
	} 
	if (got >= 2 || (int)res.size() >= 2) {
		return;
	}

	if (query(xmin, ymin, xmax, ymax) == 0) {
		return;
	}

	int r1 = ymin;
	int r2 = ymax;
	int right = ymax;
	while(r1 <= r2) { 
		int mid = (r1 + r2) / 2;
		int aux = query(xmin, ymin, xmax, mid);
		if (aux >= 1) {
			right = mid;
			r2 = mid - 1;
		} else {
			r1 = mid + 1;
		}
	}

	int l1 = ymin;
	int l2 = right;
	int left = ymin;
	while(l1 <= l2) {
		int mid = (l1 + l2) / 2;
		int aux = query(xmin, mid, xmax, right);
		if (aux >= 1) {
			left = mid;
			l1 = mid + 1;
		} else {
			l2 = mid - 1;
		}
	}

	int u1 = xmin;
	int u2 = xmax;
	int up = xmin;
	while(u1 <= u2) {
		int mid = (u1 + u2) / 2;
		int aux = query(mid, left, xmax, right);
		if (aux >= 1) {
			up = mid;
			u1 = mid + 1;
		} else {
			u2 = mid - 1;
		}
	}

	int d1 = up;
	int d2 = xmax;
	int down = xmax;
	while(d1 <= d2) {
		int mid = (d1 + d2) / 2;
		int aux = query(up, left, mid, right);
		if (aux >= 1) {
			down = mid;
			d2 = mid - 1;
		} else {
			d1 = mid + 1;
		}
	}
		
	if (query(up, left, down, right) == 1) {	
		res.pb(ret(up, left, down, right));
	}
	solve(got + 1, xmin, ymin, xmax, left - 1);
	solve(got + 1, xmin, ymin, up - 1, ymax);
	solve(got + 1, down + 1, ymin, xmax, ymax);
	solve(got + 1, xmin, right + 1, xmax, ymax);
	return;
}

int main(void) {

	scanf(" %d", &n);
	solve(0, 1, 1, n, n);
	printf("!");
	for (int i = 0; i < 2; i++) {
		print(res[i]);
	}
	printf("\n");
	fflush(stdout);
	return 0;
}