#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef long double ld;
typedef pair<int,int> pi;
typedef pair<ll,ll> pll;

#define endl '\n'
#define ff first
#define ss second
#define int long long
#define pb push_back
#define f(i,l,r) for(ll i=l;i<=r;i++)
#define rf(i,r,l) for(ll i=r;i>=l;i--)
#define Max 1000001
#define inf 2147483647
#define llinf 9223372036854775807
#define all(v) v.begin(),v.end()
#define bp(n) __builtin_popcount(n)
#define fast ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)

#define d1(a) cout<<a<<endl;
#define d2(a,b) cout<<a<<' '<<b<<endl;
#define d3(a,b,c) cout<<a<<' '<<b<<' '<<c<<endl;
#define d4(a,b,c,d) cout<<a<<' '<<b<<' '<<c<<' '<<d<<endl;
#define d5(a,b,c,d,e) cout<<a<<' '<<b<<' '<<c<<' '<<d<<' '<<e<<endl;

const ll N=18,mod=1e9+7,bit=31;

ld dp[(1ll<<N)][N],p[N][N];
ll n;
bool v[(1ll<<N)][N];

ld solve(ll mask,ll win)
{
    if(mask==(1ll<<n)-1)  //game is over
    {
        return (win==0);
    }
    if(v[mask][win])
    {
        return dp[mask][win];
    }
    v[mask][win]=1;
    dp[mask][win]=0.00;
    f(i,0,n-1)
    {
        if((mask & 1ll<<i)) //player already played the game
        {
            continue;
        }
        dp[mask][win]=max(dp[mask][win],p[i][win]*solve((mask | 1ll<<i),i)+p[win][i]*solve((mask | 1ll<<i),win));
    }
    return dp[mask][win];
}

signed main()
{
    fast;

    ll t=1;
    //cin>>t;
    while(t--)
    {
        cin>>n;
        f(i,0,n-1)
        {
            f(j,0,n-1)
            {
                cin>>p[i][j];
            }
        }
        memset(v,0,sizeof(v));
        ld ans=0.000;
        f(i,0,n-1)
        {
            ans=max(ans,solve((1ll<<i),i)); //start the game with ith player
        }
        cout<<fixed<<setprecision(10)<<ans<<endl;
    }
    return 0;
}




















