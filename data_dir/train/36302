#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

ll dp[64][2][2][2][2];
ll two[64];
ll l, r;

bool check1(ll val, bool l3, bool r3)
{
    return !(l3 == 0 && ( (l & val) != 0) );
}

bool check2(ll val, bool l3, bool r3)
{
    return !(r3 == 0 && ( (r & val) == 0));
}

ll solve(int bit, bool l1, bool r1, bool l2, bool r2)
{
    if(bit == -1)
        return 0;
    ll &ans = dp[bit][l1][r1][l2][r2];
    if(~ans)
        return ans;
    ll val = two[bit];
    ans = 0;
    //0 1
    if(check1(val, l1, r1) && check2(val, l2, r2))
    {
        ans = max(ans, val + solve(bit - 1, l1, r1 | ((r & val) != 0), l2 | ((l & val) == 0), r2));
    }
    //1 0
    if(check2(val, l1, r1) && check1(val, l2, r2))
    {
        ans = max(ans, val + solve(bit - 1, l1 | ((l & val) == 0), r1, l2, r2 | ((r & val) != 0)));
    }
    //0 0
    if(check1(val, l1, r1) && check1(val, l1, r1))
    {
        ans = max(ans, solve(bit - 1, l1, r1 | ((r & val) != 0), l2, r2 | ((r & val) != 0)));
    }
    //1 1
    if(check2(val, l1, r1) && check2(val, l2, r2))
    {
        ans = max(ans, solve(bit - 1, l1 | ((l & val) == 0), r1, l2 | ((l & val) == 0), r2));
    }
    return ans;
}

int main()
{
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    two[0] = 1;
    for(int i = 1; i < 64; i++)
        two[i] = two[i - 1] * 2;
    cin >> l >> r;
    memset(dp, -1, sizeof(dp));
    cout << solve(62, 0, 0, 0, 0);
    return 0;
}
