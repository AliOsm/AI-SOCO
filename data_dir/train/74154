#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <stack>
#include <cstring>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <ctime>
#include <cmath>

using namespace std;

const int N = 100001;
const int MOD = (int)1e9 + 7;

int v, n;
vector < int > G[N];
long long dp[N][2];
bool used[N];
int color[N];

void solve(int v, int parent)
{
	used[v] = true;
	bool flag = false;
	for (int i = 0; i < G[v].size(); ++i)
	{
		if (G[v][i] == parent)
			continue;
		flag = true;
		solve(G[v][i], v);
	}
	if (flag == false)
	{
		dp[v][0] = ((color[v] == 1) ? 0 : 1);
		dp[v][1] = ((color[v] == 1) ? 1 : 0);
	}
	else
	{
		if (color[v] == 1)
		{
			dp[v][0] = 0;
			dp[v][1] = 1;
			for (int i = 0; i < G[v].size(); ++i)
			{
				int u = G[v][i];
				if (u == parent)
					continue;
				dp[v][1] = (dp[v][1] * (dp[u][1] + dp[u][0])) % MOD;
			}
		}
		else
		{
			dp[v][0] = 1;
			long long cur1 = 1;
			long long ans = 0;
			for (int i = 0; i < G[v].size(); ++i)
			{
				int u = G[v][i];
				if (u == parent)
					continue;
				ans = (ans * (dp[u][1] + dp[u][0]) % MOD + cur1 * dp[u][1]) % MOD;
				cur1 = (cur1 * (dp[u][1] + dp[u][0])) % MOD;
				dp[v][0] = (dp[v][0] * (dp[u][1] + dp[u][0])) % MOD;
			}
			dp[v][1] = ans;
		}
	}
	//cout << v << " " << dp[v][0] << " " << dp[v][1] << endl;
}





int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	scanf("%d", &n);
	for (int i = 1; i < n; ++i)
	{
		scanf("%d", &v);
		G[i].push_back(v);
		G[v].push_back(i);
	}
	for (int i = 0; i < n; ++i)
		scanf("%d", &color[i]);

	solve(0, -1);
	printf("%I64d\n", dp[0][1]);

    return 0;
}