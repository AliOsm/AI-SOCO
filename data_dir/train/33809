#include <iostream>
#include <stdio.h>
#include <vector>
#include <string.h>
#include <set>
#include <algorithm>
#include <map>
#ifdef lyosha
#define files freopen("input.txt", "r", stdin);
#else
#define files //freopen("howmany.in","r",stdin); freopen("howmany.out","w",sdout);
#endif
using namespace std;
typedef long long ll;
#define y1 vsdmlkcs
const int N = 2105;
const int mod = 1e9 + 7;
ll f(ll cur){
    return 3 * (cur * (cur + 1));
}
int main()
{
    //files;
    ll n;
    cin >> n;
    ll step = 0;
    while(f(step + 10000000) <= n){
        step += 10000000;
    }
    while(f(step + 100000) <= n){
        step += 100000;
    }
    while(f(step + 10000) <= n){
        step += 10000;
    }
    while(f(step + 100) <= n){
        step += 100;
    }
    while(f(step + 1) <= n){
        step += 1;
    }
    n -= f(step);
    step++;

    ll x = 2 * (step - 1);
    ll y = 0;
    if(n == 0){
        cout << x << " " << y << endl;
        return 0;
    }
    if(n == 1){
        cout << x + 1 << " " << y + 2 << endl;
        return 0;
    }
    x += 1;
    y += 2;
    n--;
    if(n < step - 1){
        cout << x - n << " " << y + 2 * n << endl;
        return 0;
    }
    x -= step - 1;
    y += 2 * (step - 1);
    n -= step - 1;
    if(n < step){
        cout << x - 2 * n << " " << y << endl;
        return 0;
    }
    x -= 2 * step;
    y += 0;
    n -= step;

    if(n < step){
        cout << x - n << " " << y - 2 * n << endl;
        return 0;
    }
    x -= step;
    y -= 2 * step;
    n -= step;

    if(n < step){
        cout << x + n << " " << y - 2 * n << endl;
        return 0;
    }
    x += step;
    y -= 2 * step;
    n -= step;

    if(n < step){
        cout << x + 2 * n << " " << y << endl;
        return 0;
    }
    x += 2 * step;
    y += 0;
    n -= step;

    if(n < step){
        cout << x + n << " " << y + 2 * n << endl;
        return 0;
    }
    x += step;
    y += 2 * step;
    n -= step;
    return 0;
}
