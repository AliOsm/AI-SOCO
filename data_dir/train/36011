#include <bits/stdc++.h>

using namespace std;

const int N = 1000005;

int lg[N];
int mn[20][N];
int mx[20][N];

inline int get_min(int l, int r) {
  int k = lg[r - l + 1];
  return mn[k][l] < mn[k][r - (1 << k) + 1] ? mn[k][l] : mn[k][r - (1 << k) + 1];
}

inline int get_max(int l, int r) {
  int k = lg[r - l + 1];
  return mx[k][l] > mx[k][r - (1 << k) + 1] ? mx[k][l] : mx[k][r - (1 << k) + 1];
}

int a[N];

int main() {
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", a + i);
  }
  lg[0] = -1;
  for (int i = 1; i <= n; ++i) {
    lg[i] = lg[i >> 1] + 1;
  }
  for (int i = 0; i < n; ++i) {
    mn[0][i] = mx[0][i] = a[i];
  }
  for (int j = 1, d = 2; d <= n; ++j, d <<= 1) {
    for (int i = 0; i + d <= n; ++i) {
      mn[j][i] = mn[j - 1][i];
      if (mn[j - 1][i + (d >> 1)] < mn[j][i]) {
        mn[j][i] = mn[j - 1][i + (d >> 1)];
      }
      mx[j][i] = mx[j - 1][i];
      if (mx[j - 1][i + (d >> 1)] > mx[j][i]) {
        mx[j][i] = mx[j - 1][i + (d >> 1)];
      }
    }
  }
  long long ans = 0;
  for (int i = 0; i < n; ++i) {
    int ri0 = -1;
    {
      int l = i, r = n;
      while (r - l > 1) {
        int s = (l + r) >> 1;
        if (a[i] >= get_max(i + 1, s)) {
          l = s;
        } else {
          r = s;
        }
      }
      ri0 = l - i + 1;
    }
    int ri1 = -1;
    {
      int l = i, r = n;
      while (r - l > 1) {
        int s = (l + r) >> 1;
        if (a[i] <= get_min(i + 1, s)) {
          l = s;
        } else {
          r = s;
        }
      }
      ri1 = l - i + 1;
    }
    {
      int l = -1, r = i;
      while (r - l > 1) {
        int s = (l + r) >> 1;
        if (a[i] > get_max(s, i - 1)) {
          r = s;
        } else {
          l = s;
        }
      }
      ans += 1LL * a[i] * ri0 * (i - r + 1);
    }
    {
      int l = -1, r = i;
      while (r - l > 1) {
        int s = (l + r) >> 1;
        if (a[i] < get_min(s, i - 1)) {
          r = s;
        } else {
          l = s;
        }
      }
      ans -= 1LL * a[i] * ri1 * (i - r + 1);
    }
  }
  printf("%lld", ans);
}