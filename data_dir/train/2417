#define _USE_MATH_DEFINES
#include <cassert>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <complex>
#include <cmath>
#include <numeric>
#include <bitset>
#include <functional>
#include <random>
#include <ctime>

using namespace std;

#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << ": " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << ": " << arg1 << " |";
  __f(comma + 1, args...);
}

typedef long long int64;
typedef pair<int, int> ii;
const int INF = 1 << 29;
const int MOD = 1e9 + 7;

const int N = 5e3 + 10;
int dp[N][N];
int a[N], L[N];

int main() {
  int n, m;
  scanf("%d%d", &n, &m);
  for (int i = 1; i <= n; ++i) scanf("%d", &a[i]);
  sort(a + 1, a + n + 1);
  // for (int i = 1; i <= n; ++i) cout << a[i] << " ";
  // cout << endl;
  for (int i = 1, j = 1; i <= n; ++i) {
    while (j < i && a[i] - a[j] > 5) ++j;
    L[i] = j - 1;
  }
  for (int i = 1; i <= n; ++i) {
    copy(dp[i - 1], dp[i - 1] + m + 1, dp[i]);
    int k = L[i];
    // trace(i, k);
    for (int j = 1; j <= m; ++j) {
      dp[i][j] = max(dp[i][j], dp[k][j - 1] + i - k);
      dp[i][j] = max(dp[i][j], dp[i][j - 1]);
    }
  }
  printf("%d\n", dp[n][m]);
  return 0;
}
