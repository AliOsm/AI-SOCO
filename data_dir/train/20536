#include <bits/stdc++.h>
using namespace std;
const int N = 100005;
long long arr[N];
long long dist[N];
int n, m, k;
long long all[N];
long long cdiff[N];
long long memo[2][N];

void solve(bool b, int s, int e, int f, int t) {
	if (s > e)
		return;
	int mid = s + (e - s) / 2;
	int last = min(mid, t);
	int best = last;
	long long &r = memo[b][mid];
	r = 1e16;
	for (int i = last; i >= f; --i) {
		long long cur=(all[mid]-all[i]-((i-1)*(cdiff[mid]-cdiff[i])))+memo[!b][i-1];
		if(cur<r){
			r=cur;
			best=i;
		}
	}
	solve(b, s, mid - 1, f, best);
	solve(b, mid + 1, e, best, t);
}

int main() {
	//freopen("in.txt","rt",stdin);
	scanf("%d %d %d", &m, &n, &k);
	int x, v;
	for (int i = 2; i <= m; ++i) {
		scanf("%d", &x);
		dist[i] = dist[i - 1] + x;
	}
	for (int i = 1; i <= n; ++i) {
		scanf("%d %d", &x, &v);
		arr[i] = v - dist[x];
	}
	sort(arr + 1, arr + n + 1);

	for (int i = 1; i <= n; ++i) {
		cdiff[i] = arr[i] - arr[i - 1] + cdiff[i - 1];
		all[i] = (arr[i] - arr[i - 1]) * (i - 1) + all[i - 1];
	}

	fill(memo[0], memo[0] + n + 3, 1e16);
	memo[0][0] = 0;
	for (int i = 1; i <= k; ++i) {
		solve(i & 1, 1, n, 1, n);
	}
	long long ans = memo[k & 1][n];
//	for (int i = 1; i <= n; ++i) {
//		if (arr[i] < 0)
//			ans += abs(arr[i]);
//	}
	printf("%lld", ans);
}
