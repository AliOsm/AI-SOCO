#include <bits/stdc++.h>
#define f first
#define s second
#define all(v) ((v).begin(), (v).end())
#define IO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define pb push_back
using namespace std;
const int N = 1e6 + 50;
typedef vector<int> vi;
int n, id, a[N], ableh[N], balleh[N];
map<int, int> mp;
vector<vi> v(N);
struct node
{
	int s, e;

	node *l, *r;
	vi b;

	node(int *from, int *to, int lo, int hi)
	{

		s = lo, e = hi;

		if (s == e || from >= to)
			return;
		int md = (s + e) >> 1;
		auto f = [md](int x)
		{
			return x <= md;
		};

		b.reserve(to - from + 1);
		b.pb(0);

		for (auto it = from; it != to; it++)
			b.pb(b.back() + f(*it));

		auto pivot = stable_partition(from, to, f);

		l = new node(from, pivot, s, md);
		r = new node(pivot, to, md + 1, e);

	}
	int LTE(int l, int r, int k)
	{
		if (l > r || s > k)
			return 0;
		if (e <= k)
			return (r - l + 1);
		int lb = b[l - 1], rb = b[r];
		return this->l->LTE(lb + 1, rb, k) + this->r->LTE(l - lb, r - rb, k);
	}
};
int main()
{
	IO;
	cin >> n;
	for(int i = 1; i <= n; i++)
	{
		cin >> a[i];
		if(mp.find(a[i]) == mp.end())
			mp[a[i]] = ++id;
		a[i] = mp[a[i]];
		v[a[i]].push_back(i);
	}
	for(int i = 1; i <= n; i++)
		ableh[i] = upper_bound(v[a[i]].begin(), v[a[i]].end(), i) - v[a[i]].begin();
	for(int i = 1; i <= n; i++)
		balleh[i] = v[a[i]].size() - ableh[i];
	node t(balleh + 1, balleh + n + 1, 0, n);
	long long ans = 0;
	for(int i = 1; i <= n; i++)
		ans += t.LTE(i + 1, n, ableh[i] - 2);
	cout << ans;
}
