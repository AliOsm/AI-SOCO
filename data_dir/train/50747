#include <bits/stdc++.h>
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327
#endif // M_PI
#define endl "\n"
#define S struct
#define X first
#define Y second
#define V vector
#ifndef __linux__
#define LLD "%I64d"
#else
#define LLD "%ll""d"
#endif
#define FOR(x, y, z) for (int x = (y); x < (z); ++x)
#define FORR(x, y, z) for (int x = (y); x > (z); --x)
#define GET(a, n) for (int __i = 0; __i < (n); ++__i) cin >> a[__i];
#define GETM(a, n, m) for (int __i = 0; __i < (n); ++__i) for (int __j = 0; __j < m; ++__j) cin >> a[__i][__j];
#define PRINTM(a, n, m) for (int __i = 0; __i < (n); ++__i) { for (int __j = 0; __j < m; ++__j) cout << a[__i][__j] << " ";  cout << endl; };
#define PRINT(a, n) for (int __i = 0; __i < (n); ++__i) cout << a[__i] << " ";
#define IT(a) a.begin(), a.end()
#define SQR(x) (x) * (x)
#define CASE(a, s) cout << "Case #" << a << ": " << s << endl;
#define DEB(a) cout << #a << " = " << (a) << endl; cout.flush();
#define DEBA(a) for (auto __i: a) cout << __i << " "; cout << endl; cout.flush();
#define IFDEB(b, a) if (b) { cout << #a << " = " << (a) << endl; cout.flush(); }
using namespace std;
typedef long long LL;
typedef long double LD;
typedef unsigned long long ULL;
typedef pair <int, int> PII;
typedef pair <LL, LL> PLL;
const int MOD = 1000000007;
void sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); }
S Sync_stdio { Sync_stdio() { cin.tie(NULL); ios_base::sync_with_stdio(false); } } _sync_stdio;

#define next sadjoiajdioa

vector <vector <vector <int>>> d;
vector <char> next(1000);

int get_next(char x, int dd)
{
    switch(dd) {
    case 0:
        return x;
    case 1:
        return next[x];
    case 2:
        return next[next[x]];
    case 3:
        return next[next[next[x]]];
    }
    assert(0);
    return -1;
};

S Z
{
    int X;
    int Y;
    int dd;
};

vector <int> dir(1000);

enum {L = 1, U = 2, R = 4, D = 8};

int left(char x, int dd)
{
    int t = dir[get_next(x, dd)];
    return t & L;
}

int right(char x, int dd)
{
    int t = dir[get_next(x, dd)];
    return t & R;
}

int up(char x, int dd)
{
    int t = dir[get_next(x, dd)];
    return t & U;
}

int down(char x, int dd)
{
    int t = dir[get_next(x, dd)];
    return t & D;
}

vector <string> v;

void bfs(int x, int y)
{
    queue <Z> q;
    q.push({x, y, 0});
    d[x][y][0] = 0;
    while (q.size()) {
        Z t = q.front();
        //cout << t.X << " " << t.Y << " " << t.dd << endl;
        //cout.flush();
        q.pop();
        if (d[t.X][t.Y][(t.dd + 1) % 4] == -1) {
            d[t.X][t.Y][(t.dd + 1) % 4] = d[t.X][t.Y][t.dd] + 1;
            q.push({t.X, t.Y, (t.dd + 1) % 4});
        }
        if (d[t.X - 1][t.Y][t.dd] == -1 && down(v[t.X - 1][t.Y], t.dd) && up(v[t.X][t.Y], t.dd)) {
            d[t.X - 1][t.Y][t.dd] = d[t.X][t.Y][t.dd] + 1;
            q.push({t.X - 1, t.Y, t.dd});
        }
        if (d[t.X + 1][t.Y][t.dd] == -1 && down(v[t.X][t.Y], t.dd) && up(v[t.X + 1][t.Y], t.dd)) {
            d[t.X + 1][t.Y][t.dd] = d[t.X][t.Y][t.dd] + 1;
            q.push({t.X + 1, t.Y, t.dd});
        }
        if (d[t.X][t.Y - 1][t.dd] == -1 && right(v[t.X][t.Y - 1], t.dd) && left(v[t.X][t.Y], t.dd)) {
            d[t.X][t.Y - 1][t.dd] = d[t.X][t.Y][t.dd] + 1;
            q.push({t.X, t.Y - 1, t.dd});
        }
        if (d[t.X][t.Y + 1][t.dd] == -1 && right(v[t.X][t.Y], t.dd) && left(v[t.X][t.Y + 1], t.dd)) {
            d[t.X][t.Y + 1][t.dd] = d[t.X][t.Y][t.dd] + 1;
            q.push({t.X, t.Y + 1, t.dd});
        }
    }
}

int main()
{
    next['^'] = '>'; dir['^'] = U;
    next['>'] = 'v'; dir['>'] = R;
    next['v'] = '<'; dir['v'] = D;
    next['<'] = '^'; dir['<'] = L;
    next['+'] = '+'; dir['+'] = U | L | D | R;
    next['-'] = '|'; dir['-'] = L | R;
    next['|'] = '-'; dir['|'] = U | D;
    next['L'] = 'U'; dir['L'] = U | D | R;
    next['U'] = 'R'; dir['U'] = L | D | R;
    next['R'] = 'D'; dir['R'] = U | D | L;
    next['D'] = 'L'; dir['D'] = U | L | R;
    next['*'] = '*'; dir['*'] = 0;
    int n, m;
    cin >> n >> m;
    v.resize(n + 2, string(m + 2, '*'));
    FOR (i, 0, n) {
        cin >> v[i + 1];
        v[i + 1] = '*' + v[i + 1] + '*';
    }
    d.assign(n + 2, vector <vector <int>> (m + 2, vector <int> (4, -1)));
    int x1, y1;
    int x2, y2;
    cin >> x1 >> y1;
    cin >> x2 >> y2;
    bfs(x1, y1);
    int res = INT_MAX;
    FOR (i, 0, 4) {
        res = min(res, d[x2][y2][i]);
    }
    cout << (res != INT_MAX ? res : -1);
    return 0;
}
