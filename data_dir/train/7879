#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 2e5 + 7;

int n, parent[N];
vector < int > Q[N];

int Find(int a)
{
    if(parent[a] == a) return a;
    return parent[a] = Find(parent[a]);
}

void Union(int a, int b)
{
    a = Find(a), b = Find(b);
    if(a == b) return;
    if(sz(Q[a]) < sz(Q[b])) swap(a, b);
    for(auto x: Q[b])
        Q[a].push_back(x);
    Q[b].clear();
    parent[b] = a;
}

int main()
{
    _upgrade
    cin >> n;
    for(int i = 1; i <= n; i++)
    {
        parent[i] = i;
        Q[i] = {i};
    }
    for(int i = 1; i < n; i++)
    {
        int a, b; cin >> a >> b;
        Union(a, b);
    }
    int p = Find(1);
    for(auto x: Q[p])
        cout << x << " ";
    cout << "\n";
	return 0;
}
