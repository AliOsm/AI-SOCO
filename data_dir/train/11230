#include <bits/stdc++.h>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
#define PI 3.14159265358979323846
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;

// Modular operations
const int MOD = 1E9 + 9;

int Add(int a, int b, int m = MOD){
  a += b;
  if(a >= m) a -= m;
  return a;
}

int Sub(int a, int b, int m = MOD){
  a -= b;
  if(a < 0) a += m;
  return a;
}

int AddTo(int& to, int w, int m = MOD){
  to += w;
  if(to >= m) to -= m;
  return to;
}

int SubTo(int& to, int w, int m = MOD){
  to -= w;
  if(to < 0) to += m;
  return to;
}

int Mult(int a, int b, int m = MOD){
  return (a * 1LL * b) % m;
}

int Pow(int a, ll deg, int m = MOD){
  int res = 1 % m;
  for(;deg > 0;deg >>= 1, a = Mult(a, a, m))
    if(deg & 1) res = Mult(res, a, m);
  return res;
}

int Oem(int to, int m = MOD){
  return Pow(to, m - 2, m);
}

int Div(int a, int b, int m = MOD){
  return Mult(a, Oem(b, m), m);
}

// Solution
int n, a, b, k;
char buf[100010];

int SumProg(int how, int koef){
  if(how == 0) return 0;
  if(how == 1) return 1;

  if(how % 2 == 1){
    return Add(SumProg(how - 1, koef), Pow(koef, how - 1));
  } else {
    int s = SumProg(how / 2, koef);
    return Add(s, Mult(s, Pow(koef, how / 2)));
  }
}

int main(){
  scanf("%d%d%d%d", &n, &a, &b, &k);
  scanf("%s", buf);

  int base = 0;
  for(int i = 0;i < k;++i){
    if(buf[i] == '-'){
      SubTo(base, Mult(Pow(a, n - i), Pow(b, i)));
    } else {
      AddTo(base, Mult(Pow(a, n - i), Pow(b, i)));
    }
  }

  int koef = Div(Pow(b, k), Pow(a, k));
  int sum = SumProg((n + 1) / k, koef);

  printf("%d\n", Mult(sum, base));

  return 0;
}
