#include <iostream>
#include <stdio.h>
#include <string>
#include <vector>
#include <climits>
#include <cmath>
#include <set>
#include <map>
#include <queue>
#include <algorithm>


using namespace std;
const int N = 1000000;

int us[N];
map<int, pair<long long, int> > dp[N];
vector<pair<int, long long> > g[N];
vector<int> top;

void topsort(int v) {
    if(us[v])
        return;
    us[v] = 1;
    for(int i = 0; i < g[v].size(); i++) {
        topsort(g[v][i].first);
    }
    top.push_back(v);
}


int main() {
    ios::sync_with_stdio(false);
    int n, m;
    long long T;
    cin >> n >> m >> T;

    for(int i = 0; i < m; i++) {
        int a, b;
        long long c;
        cin >> a >> b >> c;
        g[a].push_back(make_pair(b, c));
    }

    topsort(1);
    reverse(top.begin(), top.end());

    dp[1][1] = make_pair(0, -1);
    for(int i = 0; i < top.size(); i++) {
        int v = top[i];
        for(int j = 0; j < g[v].size(); j++) {
            for(map<int, pair<long long, int> >::iterator it = dp[top[i]].begin(); it != dp[top[i]].end(); it++) {
                if(dp[g[v][j].first].find(it -> first + 1) == dp[g[v][j].first].end()) {
                    dp[g[v][j].first][it -> first + 1] = make_pair((long long) 1e18, -1);
                }

                dp[g[v][j].first][it -> first + 1] = min(dp[g[v][j].first][it -> first + 1], make_pair(it -> second.first + g[v][j].second, v));
            }
        }
    }

    int kol, v = n;
    for(map<int, pair<long long, int> >::reverse_iterator it = dp[n].rbegin(); it != dp[n].rend(); it++) {
        if((it -> second).first <= T) {
            kol = it -> first;
            break;
        }
    }
    vector<int> ans;
    while(v > 0) {
        ans.push_back(v);
        v = dp[v][kol].second;
        kol--;
//        cout << v << "\n";
    }
    reverse(ans.begin(), ans.end());
    cout << ans.size() << "\n";
    for(int i = 0; i < ans.size(); i++) {
        cout << ans[i] << " ";
    }
    return 0;
}
