#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

ll a[400005];
ll cnt[25][25];
vector <ll> col [25];

ll ans [2000000];

const ll INF = 9999999999999;

int main()
{
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    ll n;
    cin >>n;
    for(ll i=0;i<n;i++){
        cin>>a[i];
        a[i]--;
        col[ a[i] ].push_back(i);
    }

    for(ll i=0;i<20;i++){
        for(ll j=0;j<20;j++){
            if(i==j)continue;
            if(col[i].size()==0||col[j].size()==0)continue;
            ll pos2 = 0;
            for(ll pos1 = 0 ; pos1 < (ll)col[i].size();pos1++){
                while(1){
                    if( col[j][pos2+1] > col[i][pos1] || pos2 == (ll)col[j].size() - 1 )break;
                    pos2++;
                }
                if(col[i][pos1] > col[j][pos2]){
                    cnt[i][j] += pos2 + 1;
                }
            }
        }
    }
    for(ll mask=1;mask<(1<<20);mask++)ans[mask]=INF;

    for(ll mask=0;mask<(1<<20);mask++){
        vector<int>vis;
        for(ll bit=0;bit<20;bit++){
            if(mask & (1<<bit)){
                vis.push_back(bit);
            }
        }
        for(ll bit=0;bit<20;bit++){
            if(mask & (1<<bit))continue;
            ll sum = 0;
            for(ll i=0;i<vis.size();i++)sum+=cnt[vis[i]][bit];
            ll nmask = mask | (1<<bit);
            ans[nmask] = min( ans[nmask] , ans[mask] + sum );
        }
    }

    cout <<ans[(1<<20)-1];


    return 0;
}
