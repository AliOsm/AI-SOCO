#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, a[200200];
int b[200200];

int main(){

    scanf("%d", &n);
    for (int i = 0; i < n; i++) scanf("%d", a + i);

    map<ll, int> last;
    ll s = 0;
    last[0] = n;
    for (int i = n - 1; i >= 0; i--) {
        s += a[i];
        if (last.count(s)) {
            b[i] = last[s] - 1;
        } else b[i] = inf;
        last[s] = i;
    }

    // min(b[i] ... b[j]) > j
    ll ans = 0;

    multiset<int> st;
    for (int i = 0, j = -1; i < n; i++) {
        if (j < i) {
            st.clear();
            j = i;
        }
        while (j < n) {
            st.insert(b[j]);
            if (*st.begin() > j) {
                j++;
            } else {
                st.erase(st.find(b[j]));
                break;
            }
        }
        ans += j - i;
        if (st.size() > 0) st.erase(st.find(b[i]));
    }

    cout << ans << endl;

    return 0;
}
