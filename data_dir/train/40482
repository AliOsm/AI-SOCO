#include <bits/stdc++.h>
using namespace std;

#define int           long long
#define S             second
#define F             first
#define pb            push_back
#define B(c)          (c).begin()
#define E(c)          (c).end()
#define all(c)        (c).begin(),(c).end()
#define rall(c)       (c).rbegin(),(c).rend() 
#define lb            lower_bound
#define si(c)         (int)((c).size())
#define lcm(a, b)      (a * (b / __gcd(a,b)))  
#define inf           (int)(2e18)
#define endl          '\n'
#define mp            make_pair
#define time(s)       (double(clock()-s)/double(CLOCKS_PER_SEC))

typedef vector<int>                           vi;
typedef pair<int,int>                         pii;
typedef vector<pii>                           vpi;
typedef priority_queue<pii, vector<pii>, greater<pii> > pq;

clock_t start;
mt19937_64 rng(chrono::system_clock::now().time_since_epoch().count());

void solve(){
    int n, m, k;
    cin >> n >> m >> k;
    set<int> res;
    for(int i = 2; i <= n; i++)
        res.insert(i);
    vector<int> no[n+1];
    int one[n+1] = {0};
    for(int i = 0; i < m; i++){
        int a, b;
        cin >> a >> b;
        no[a].pb(b);
        no[b].pb(a);
    }
    for(auto u : no[1]){
        one[u] = 1;
        res.erase(u);
    }
    if(si(res) < k){
        cout << "impossible" << endl;
        return;
    }
    for(auto u : no[1])
        res.insert(u);
    int vis[n+1] = {0};
    vis[1] = 1;
    int cnt = 0;
    for(int i = 2; i <= n; i++){
        if(vis[i]) continue;
        cnt++;
        queue<int> q;
        q.push(i);
        vis[i] = 1;
        res.erase(i);
        vi con;
        while(!q.empty()){
            int v = q.front();
            con.pb(v);
            q.pop();
            vi temp;
            for(auto u : no[v]){
                if(res.find(u) != E(res)){
                    temp.pb(u);
                    res.erase(u);
                }
            }
            while(si(res)){
                vis[*B(res)] = 1;
                q.push(*B(res));
                res.erase(B(res));
            }
            for(auto u: temp)
                res.insert(u);
        }
        bool flag = 1;
        for(auto u : con){
            if(!one[u])flag = 0;
        }
        if(flag){
            cout << "impossible" << endl;
            return;
        }
    }
    if(cnt <= k){
        cout << "possible" << endl;
    }
    else cout << "impossible" << endl;
}

signed main(){

    ios_base::sync_with_stdio(0); 
    cin.tie(0); cout.tie(0);   

    int t = 1;
    start = clock(); 

    cout << fixed << setprecision(20);

    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin); 
    freopen("output.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
    #endif
    
    //cin >> t;

    for(int i = 1;i <= t; i++){
        solve();
    }
    cerr << time(start);
    return 0;
}