#include <bits/stdc++.h>
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define up_b upper_bound
#define low_b lower_bound
#define sz(x) (int)x.size()
#define all(v) v.begin(),v.end()

#define boost ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0)

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef pair<ll,ll> pll;

const ll INF=1e18;
const ll inf=1e9;
const ld eps=1e-7;
const ld pi=acos(-1);
const int dx[8]={0,0 ,1,-1,1,1,-1,-1};
const int dy[8]={1,-1,0,0,1,-1,1,-1};
const int N=2e5+11;
const int M=121111;
const int mod1=998244353;
const int mod2=1e9+7;

vector<pii>g[N];

int c[N];

bool used[N];

bool ok=1;

void dfs(int v,int col){
  used[v]=1;
  c[v]=col;
  for(int i=0;i<sz(g[v]);i++){
    int to=g[v][i].x;
    if(used[to]){
      if(c[to]==c[v]&&!g[v][i].y)ok=0;
      if(c[to]!=c[v]&&g[v][i].y)ok=0;
    }
    else{
      if(g[v][i].y==1)dfs(to,col);
      else dfs(to,1-col);
    }
  }
}

int main(){
  string s;
  cin>>s;
  int n=sz(s);

  reverse(all(s));
  ll ans=0;
  for(int i=n-2;i>=0;i--){
    for(int j=0;j<n/2;j++){
      int k=n-j-1;
      g[k].pb(mp(j,1));
      g[j].pb(mp(k,1));
    }
    for(int j=0;j<(i+1)/2;j++){
      int k=i-j;
      g[j+n].pb(mp(k+n,1));
      g[k+n].pb(mp(j+n,1));
    }
    for(int j=0;j<n-1;j++){
      if(s[j]=='?')continue;
      int k=1-s[j]+'0';
      g[j].pb(mp(j+n,k));
      g[j+n].pb(mp(j,k));
    }
    for(int j=0;j<n;j++){
      used[j]=0;
    }
    for(int j=0;j<n-1;j++){
      used[j+n]=0;
    }
    for(int j=n-2;j>i+1;j--){
      g[j+n].pb(mp(j+n-1,1));
      g[j+n-1].pb(mp(j+n,1));
    }
    ll res=1;
    ok=1;
    dfs(n-1,1);
    if(!ok)res=0;
    dfs(i+n,1);
    if(!ok)res=0;
    if(i+1<n-1)dfs(i+1+n,0);
    if(!ok)res=0;
    for(int j=0;j<n;j++){
      if(!used[j]){
        dfs(j,1);
        if(!ok){
          res=0;
          break;
        }
        res=(res*2)%mod1;
      }
    }
    for(int j=0;j<n-1;j++){
      if(!used[j+n]){
        dfs(j+n,1);
        if(!ok){
          res=0;
          break;
        }
        res=(res*2)%mod1;
      }
    }
    ans=(ans+res)%mod1;
    for(int j=0;j<n+n;j++){
      g[j].clear();
    }
  }
  cout<<ans;
}
