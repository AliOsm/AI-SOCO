#include<bits/stdc++.h>
using namespace std;
const int MX=(1<<20);
class Disjoint_Set{
    public:
    int sz[MX] , P[MX] , Ecnt[MX];
    int find_(int x){
        if(x!=P[x]) P[x]=find_(P[x]);
        return P[x];
    }
    int comp;
    void init(int N){
        for(int j=1;j<=N;j++){
            sz[j]=1 , P[j]=j , Ecnt[j] = 0;
        }
        comp = N;
    }
    bool same(int x , int y){
	return find_(x) == find_(y);
    }
    int compsize(int node){
	return sz[find_(node)];
    }
    bool merge_(int x , int y){
        int px=find_(x) , py=find_(y);
        Ecnt[px]++;
        if(px==py)

            return false;
        if(sz[px] < sz[py]) swap(px , py);
        P[py]=px;
        comp--;
        sz[px]+=sz[py];
        Ecnt[px] += Ecnt[py];
        return true;
    }
}G;
int n , m , K ,  state[MX] , done[MX] , home[MX] , faksan[MX];
int main(){
    scanf("%d %d %d",&n,&m,&K);
    G.init(n);
    for(int j=1;j<=K;j++) scanf("%d",&home[j]);
    for(int j=1;j<=m;j++){
        int a , b;
        scanf("%d %d",&a,&b);
        G.merge_(a , b);
    }
    for(int j=1;j<=K;j++)
        faksan[G.find_(home[j])] = 1;
    int mx = 0;
    long long ans = 0;
    vector < int > v;
    for(int j=1;j<=n;j++){
        int p = G.find_(j);
        if(done[p]) continue;
        done[p] = 1;
        int sz = G.sz[p];
        long long add = 1ll * sz * (sz - 1) / 2;
        add -= G.Ecnt[p];
        ans += add;
       // cout<<add<<endl;
        if(faksan[p]) mx = max(mx , sz);
        else v.push_back(sz);
    }
    int cur = mx;
    for(auto pp : v){
        ans += 1ll * cur * pp;
        cur += pp;
    }
    cout<<ans<<endl;
}
