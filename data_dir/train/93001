#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int N = 2000001;
const int Mod = 1e9 + 7;

int Cnt[N];
int Power[N];
int Mobius[N];
bool IsPrime[N];
vector <int> D[N];

void add_self(int& x, int y)
{
    if(y < 0)   y += Mod;
    if((x += y) >= Mod) x -= Mod;
}

void sub_self(int& x, int y)
{
    if(y < 0)   y += Mod;
    if((x -= y) < 0)    x += Mod;
}

int mul(int x, int y)
{
    return (ll) x * y % Mod;
}

int fp(int x, int y)
{
    int Res = 1;

    while(y)
    {
        if(y & 1)   Res = mul( Res, x);

        y >>= 1;
        x = mul( x, x);
    }

    return Res;
}

int main()
{
    for(int i = 1; i < N; i++)
        for(int j = i; j < N; j += i)
            D[j].push_back(i);

    for(int i = 1; i < N; i++)  Mobius[i] = 1;
    for(int i = 1; i < N; i++)  IsPrime[i] = true;

    IsPrime[0] = IsPrime[1] = false;

    for(int i = 2; i < N; i++)
        if(IsPrime[i])
            for(int j = i; j < N; j += i)
                IsPrime[j] = (i == j), Mobius[j] = ((j / i) % i ? -Mobius[j] : 0);

    int n, k;   cin >> n >> k;

    for(int i = 0; i < N; i++)  Power[i] = fp( i, n);

    int Sum = 0;
    int Ans = 0;

    for(int x = 1; x <= k; x++)
    {
        for(int y : D[x])
        {
            sub_self( Sum, Mobius[y] * Power[Cnt[y]]);
            Cnt[y]++;
            add_self( Sum, Mobius[y] * Power[Cnt[y]]);
        }

        add_self( Ans, x ^ Sum);
    }

    cout << Ans << endl;
}
