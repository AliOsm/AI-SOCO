#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
//#pragma comment(linker, "/stack:200000000")
 
#include <bits/stdc++.h>
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef double ld;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<ld,ld> pdd;
 
#define X first
#define Y second
 
//#include <boost/unordered_map.hpp>
//using namespace boost;
 
/*
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> rbtree;
rbtree T;
*/
 
using i32 = int;
using i64 = long long;
using u8 = unsigned char;
using u32 = unsigned;
using u64 = unsigned long long;
using f64 = double;
using f80 = long double;
//using i128 = __int128_t;
//using u128 = __uint128_t;
//using i128 = i64;
//using u128 = u64;
 
ll power(ll a, ll b, ll p)
{
	if (!b) return 1;
	ll t = power(a, b/2, p);
	t = t*t%p;
	if (b&1) t = t*a%p;
	return t;
}
 
ll exgcd(ll a, ll b, ll &x, ll &y)
{
	if (b == 0)
	{
		x = 1;
		y = 0;
		return a;
	}
	ll px, py;
	ll d = exgcd(b, a%b, px, py);
	x = py;
	y = px-a/b*py;
	return d;
}

ll gcd(ll a, ll b)
{
	return b ? gcd(b, a%b) : a;
}
 
template<class T>
inline void freshmin(T &a, const T &b)
{
	if (a > b) a = b;
}
 
template<class T>
inline void freshmax(T &a, const T &b)
{
	if (a < b) a = b;
}

template<class T>
void print(const T &a)
{
	for (auto x : a) printf("%d ", x); puts("");
}

const int MAXN = 2010;
const int MAXM = 30*30*16*16+10;
const int MAXK = 19;
//const i64 INF = 1000000000000000000LL;
const int INF = 1000000000;
//const int MOD = 998244353;
//const int MOD = 1000000007;
//const int INV2 = (MOD+1)/2;
const ld pi = 3.1415926535897932384626433;

int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};

struct directed_graph
{
	int n;
	vector<vector<int>> v;
	
	directed_graph (int n = 0)
	{
		init(n);
	}
	void init(int n)
	{
		assert(n >= 0);
		this->n = n;
		v = vector<vector<int>>(n+1);
	}
	void addedge(int x, int y)
	{
		assert(1 <= x && x <= n);
		assert(1 <= y && y <= n);
		v[x].push_back(y);
	}
	void erase_multiedges()
	{
		for (int i = 1; i <= n; ++ i)
		{
			sort(v[i].begin(), v[i].end());
			v[i].erase(unique(v[i].begin(), v[i].end()), v[i].end());
		}
	}
	
	vector<int> in_degree()
	{
		vector<int> ret(n+1);
		for (int x = 1; x <= n; ++ x)
			for (auto y : v[x])
				ret[y] ++;
		return ret;
	}
	
	int times;
	vector<int> dfn, low, in;
	vector<int> st;
	int scc;
	vector<int> belong;
	void tarjan(int x)
	{
		dfn[x] = low[x] = ++ times;
		st.push_back(x);
		in[x] = 1;
		for (auto y : v[x])
		{
			if (!dfn[y])
			{
				tarjan(y);
				freshmin(low[x], low[y]);
			}
			else if (in[y])
				freshmin(low[x], dfn[y]);
		}
		if (dfn[x] == low[x])
		{
			scc ++;
			while (1)
			{
				int y = st.back();
				st.pop_back();
				in[y] = 0;
				belong[y] = scc;
				if (x == y) break;
			}
		}
	}
	directed_graph strong_connected_component()
	{
		times = 0;
		dfn = vector<int>(n+1);
		low = vector<int>(n+1);
		in = vector<int>(n+1);
		st = vector<int>();
		scc = 0;
		belong = vector<int>(n+1);
		for (int i = 1; i <= n; ++ i)
			if (!dfn[i]) tarjan(i);
		directed_graph ret(scc);
		for (int x = 1; x <= n; ++ x)
			for (auto y : v[x]) if (belong[x] != belong[y])
				ret.addedge(belong[x], belong[y]);
		ret.erase_multiedges();
		return ret;
	}
};

struct two_sat
{
	int n;
	vector<pii> e;
	
	two_sat (int n = 0)
	{
		init(n);
	}
	void init(int n)
	{
		assert(n >= 0);
		this->n = n;
		e = vector<pii>();
	}
	// if (a ? (x holds) : (x doesn't hold)) then (b ? (y holds) : (y doesn't hold)) holds.
	void add(int x, int a, int y, int b)
	{
		assert(1 <= x && x <= n);
		assert(0 <= a && a <= 1);
		assert(1 <= y && y <= n);
		assert(0 <= b && b <= 1);
		e.push_back({x+a*n, y+b*n});
		if (x != y) e.push_back({y+(1-b)*n, x+(1-a)*n});
	}
	void choose(int x)
	{
		assert(1 <= x && x <= n);
		add(x, 0, x, 1);
	}
	void never_choose(int x)
	{
		assert(1 <= x && x <= n);
		add(x, 1, x, 0);
	}
	
	pair<bool, vector<int>> solve()
	{
		directed_graph G(n+n);
		for (auto p : e)
		{
			int x = p.X, y = p.Y;
			G.addedge(x, y);
		}
		directed_graph H = G.strong_connected_component();
		vector<int> rev(n+n+1);
		for (int i = 1; i <= n; ++ i)
		{
			if (G.belong[i] == G.belong[i+n]) return {false, {}};
			rev[G.belong[i]] = G.belong[i+n];
			rev[G.belong[i+n]] = G.belong[i];
		}
		int scc = H.n;
		queue<int> q;
		vector<int> deg = H.in_degree();
		for (int i = 1; i <= scc; ++ i)
			if (!deg[i]) q.push(i);
		vector<int> used(scc+1);
		while (!q.empty())
		{
			int x = q.front();
			q.pop();
			if (!used[x])
			{
				used[x] = 1;
				used[rev[x]] = 2;
			}
			for (auto y : H.v[x])
				if (!-- deg[y]) q.push(y);
		}
		vector<int> ret(n+1);
		for (int i = 1; i <= n; ++ i)
			ret[i] = used[G.belong[i]] == 1;
		return {true, ret};
	}
};

#define rep(i,a,b) for (int i = (a), I = (b); i <= I; ++ i)

int n;
char s[MAXN];
int a[MAXN][MAXN];
int p[MAXN];

void solve()
{
	scanf("%d", &n);
	for (int i = 1; i <= n; ++ i)
	{
		scanf("%s", s+1);
		for (int j = 1; j <= n; ++ j)
			a[i][j] ^= s[j]-'0';
	}
	for (int i = 1; i <= n; ++ i)
	{
		scanf("%s", s+1);
		for (int j = 1; j <= n; ++ j)
			a[i][j] ^= s[j]-'0';
	}
	scanf("%s", s+1);
	for (int i = 1; i <= n; ++ i)
	{
		p[i] = s[i]-'0';
	}
	two_sat T(n+n);
	for (int i = 1; i <= n; ++ i)
		for (int j = 1; j <= n; ++ j)
		{
			if (a[i][j])
			{
				if (p[i] && p[j])
				{
					T.add(i, 1, j+n, 0);
					T.add(i, 0, j+n, 1);
				}
				else if (p[j])
				{
					T.choose(i);
				}
				else if (p[i])
				{
					T.choose(j+n);
				}
				else
				{
					puts("-1");
					return;
				}
			}
			else
			{
				if (p[i] && p[j])
				{
					T.add(i, 0, j+n, 0);
					T.add(i, 1, j+n, 1);
				}
				else if (p[j])
				{
					T.never_choose(i);
				}
				else if (p[i])
				{
					T.never_choose(j+n);
				}
				else
				{
					
				}
			}
		}
	auto ret = T.solve();
	if (!ret.X)
	{
		puts("-1");
		return;
	}
	vector<pii> ans;
	for (int i = 1; i <= n; ++ i)
		if (ret.Y[i]) ans.push_back({0, i});
	for (int j = 1; j <= n; ++ j)
		if (ret.Y[j+n]) ans.push_back({1, j});
	printf("%d\n", ans.size());
	for (auto e : ans)
	{
		if (e.X == 0)
			printf("row %d\n", e.Y-1);
		else
			printf("col %d\n", e.Y-1);
	}
}

int main()
{
	
	int T;
	T = 1;
	//scanf("%d", &T);
	while (T --)
	solve();
	
	return 0;
}
