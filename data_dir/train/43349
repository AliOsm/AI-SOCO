#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << (x) << endl;
#define ull unsigned long long
#define pii pair<int, int>
//#define pii pair<ll, ll>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-10
//#define endl "\n"
#define pdd pair<double, double>
#define mk make_pair

const int dir[4][2] = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
const int MAXN = 1024;
int n, m, k, head, tail, tt = 0;
pii q[MAXN*MAXN];
string board[MAXN];
int d[MAXN][MAXN], mark[MAXN][MAXN], mx[MAXN][MAXN], cnt[MAXN][MAXN];
bool check[MAXN][MAXN];

void set_max(int &x, int y) {
	if (x < y) x = y;
}

void calc(int sx, int sy) {
	tt++; head = tail = 0;
	q[tail++] = pii(sx, sy);
	mark[sx][sy] = tt; cnt[sx][sy]++;
	set_max(mx[sx][sy], d[sx][sy] = 0);
	while (head < tail) {
		int x = q[head].X;
		int y = q[head].Y;
		head++;
		if (d[x][y] < k) FOR(i, 0, 4) {
			int xx = x+dir[i][0];
			int yy = y+dir[i][1];
			if (xx < 0 || yy < 0 || xx >= n || yy >= m || board[xx][yy] == 'X' || mark[xx][yy] == tt) continue;
			mark[xx][yy] = tt; cnt[xx][yy]++;
			set_max(mx[xx][yy], d[xx][yy] = d[x][y]+1);
			q[tail++] = pii(xx, yy);
		}
	}
}

#define no_ans { cout << -1 << endl; exit(0); }

int main() {
	ifstream cin("input.txt");
	ofstream cout("output.txt");
	cin >> n >> m >> k;
	int tot = 0;
	FOR(i, 0, n) cin >> board[i], tot += count(all(board[i]), 'R');
	if (tot > 2*(k*(k+1)*2+1)) no_ans;
	int sx = -1, sy = -1;
	FOR(i, 0, n) FOR(j, 0, m) if (board[i][j] == 'R') sx = i, sy = j;
	FOR(i, 0, n) FOR(j, 0, m) if (abs(i-sx)+abs(j-sy) <= k && board[i][j] != 'X') {
		memset(d, 64, sizeof d);
		memset(check, 0, sizeof check);
		calc(i, j);
		int tot = 0;
		FOR(r, 0, n) FOR(c, 0, m) if (d[r][c] > k && board[r][c] == 'R') check[r][c] = true, tot++;
		memset(mx, -1, sizeof mx);
		memset(cnt, 0, sizeof cnt);
		FOR(r, 0, n) FOR(c, 0, m) if (check[r][c]) calc(r, c);
		FOR(r, 0, n) FOR(c, 0, m) if ((r != i || c != j) && board[r][c] != 'X' && cnt[r][c] == tot && mx[r][c] <= k) {
			cout << i+1 << " " << j+1 << " " << r+1 << " " << c+1 << endl;
			return 0;
		}
	}
	no_ans;
	return 0;
}

