#pragma GCC optimize ("Ofast")
#include "bits/stdc++.h"
// #include "ext/pb_ds/assoc_container.hpp"
// #include "ext/pb_ds/tree_policy.hpp"
// using namespace __gnu_pbds;
using namespace std;
typedef long long int ll;
#define int long long 
#define pb push_back
#define fi first
#define se second
#define deb cerr << "Line no." << __LINE__
#define fr(i, a, b) for(int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define IO ios :: sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define pii pair<int,int>
#define sz(x) (int)x.size()
const int mod = 1e9 + 7;
const int mod1 = 998244353;
typedef double f80;
// #ifndef LOCAL
// #define endl '\n'
// #endif
 
// template<typename T>
// using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;
 
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int l, int r){
   uniform_int_distribution<int> uid(l, r);
   return uid(rng);
}
ll pwr(ll a,ll b){
	int ans = 1;
	while(b){
	  if(b & 1) ans = (ans * a) % mod;
	  a = (a * a) % mod;
	  b >>= 1;
	}
	return ans;
}
const int N = 2005;
char ch[N][N];
queue<pii> q;
vector<pii> temp;
bool vis[N][N];
int dp[N][N];
void solve(){
	int n, k;
	cin >> n >> k;
	fr(i, 1, n){
		string s;
		cin >> s;
		fr(j, 1, n){
			ch[i][j] = s[j - 1];
			dp[i][j] = 1e9;
		}
	}
	dp[1][1] = (ch[1][1] != 'a');
	int maxi = 0;
	fr(i, 1, n){
		fr(j, 1, n){
			if(i + 1 <= n){
				dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + (ch[i + 1][j] != 'a'));
			}
			if(j + 1 <= n){
				dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + (ch[i][j + 1] != 'a'));
			}
			if(dp[i][j] <= k) maxi = max(maxi, i + j - 1);
		}
	}
	fr(i, 1, n){
		fr(j, 1, n){
			if(dp[i][j] <= k && i + j - 1 == maxi){
				q.push({i, j});
				vis[i][j] = 1;
			}
		}
	}
	string s = "";
	fr(i, 1, maxi) s += 'a';
	if(maxi == 0){
		q.push({1, 1}), s += ch[1][1];
		maxi = 1;
	}
	// fr(i, 1, n){
	// 	fr(j, 1, n){
	// 		cout << dp[i][j] << " ";
	// 	}
	// 	cout << endl;
	// }
	fr(j, maxi + 1, 2 * n - 1){
		char ch1 = 'z' + 1;
		while(!q.empty()){
			pii u = q.front();
			q.pop();
			if(u.fi + 1 <= n && !vis[u.fi + 1][u.se])
			{
				vis[u.fi + 1][u.se] = 1;
				if(ch[u.fi + 1][u.se] < ch1){
					ch1 = ch[u.fi + 1][u.se];
					temp.clear();
				}
				if(ch[u.fi + 1][u.se] == ch1){
					temp.pb({u.fi + 1, u.se});
				}
			}
			if(u.se + 1 <= n && !vis[u.fi][u.se + 1])
			{
				vis[u.fi][u.se + 1] = 1;
				if(ch[u.fi][u.se + 1] < ch1){
					ch1 = ch[u.fi][u.se + 1];
					temp.clear();
				}
				if(u.se + 1 <= n && ch[u.fi][u.se + 1] == ch1){
					temp.pb({u.fi, u.se + 1});
				}
			}
		}
		s += ch1;
		for(pii x : temp){
			q.push(x);
		}
	}
	cout << s << endl;
}
signed main(){
	IO;
	#ifdef LOCAL
	    freopen("inp.txt","r", stdin);
	    // freopen("out.txt", "w", stdout);
	#endif
	clock_t clk = clock();
	int t = 1;
	// cin >> t;
	fr(tt, 1, t){
	    solve();
	}
	cerr << endl << setprecision(10) << fixed << (double)(clock() - clk) / CLOCKS_PER_SEC;
	return 0;
}