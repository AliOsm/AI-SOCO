/// You just can't beat the person who never gives up
/// ICPC next year

#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math,O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include<bits/stdc++.h>
using namespace std ;
const int N = 1e6+5 ,LG = 25 ,mod = 1e9+7 ;


int spf[N] ,vis[N] ,vid ,cnt[N] ;
vector<int> f ;
void sieve(){
    for(int i=1;i<N;++i) spf[i]=i;
    for(int i=2;i*i<N;++i)if(spf[i]==i){
        for(int j=i*i;j<N;j+=i)if(spf[j]==j)spf[j]=i;
    }
}
void factorize(int x){
    f.clear();
    ++vid ;
    while(x!=1){
        if(vis[spf[x]]!=vid){
            vis[spf[x]] = vid ;
            cnt[spf[x]] = 0 ;
            f.push_back(spf[x]);
        }
        ++cnt[spf[x]] ;
        x/=spf[x];
    }
}
int mem[N][LG] ,x ,c ;
int ways(int i,int rem){
    if(!rem) return 1;
    if(i<0) return 0;
    int&ret = mem[i][rem] ;
    if(~ret) return ret ;
    return ret = (ways(i-1,rem) + ways(i,rem-1))%mod ;
}
int pwr(int b,int p){
    int res=1;
    while(p){
        if(p%2) res = 1ll*res*b%mod;
        b = 1ll*b*b%mod;
        p /= 2;
    }
    return res;
}

int main(){
    sieve();
    int q ;
    scanf("%d",&q);
    memset(mem,-1,sizeof mem);
    while(q--){
        scanf("%d%d",&x,&c);
        factorize(x);
        int pos_ways = 1 ;
        for(int i:f) pos_ways = 1ll * pos_ways * ways(c-1,cnt[i]) %mod ;
        ///for(int i=0;i<=c;i+=2) ways += choose(c,i) ;
        int ways = 1ll * pwr(2,c-1) * pos_ways %mod ;
        printf("%d\n",ways);
    }
    return 0;
}
