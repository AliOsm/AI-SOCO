#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <ctime>
#include <cmath>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <cstring>
#include <iterator>
using namespace std;

#define pb push_back
#define rs resize
#define mp make_pair
#define inf 1e9
#define pi 3.1415926535897932384626433832795
#define sz(a) (int)(a).size()
#define Sort(a) sort((a).begin(), (a).end())
#define Reverse(a) reverse((a).begin(), (a).end())
#define sf scanf
#define pf printf
#define ms(a, x) memset((a), (x), sizeof(a))

typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <vvi> vvvi;
typedef vector <vvvi> vvvvi;
typedef vector <bool> vb;
typedef vector <vb> vvb;
typedef vector <vvb> vvvb;
typedef vector <vvvb> vvvvb;
typedef long long ll;
typedef vector <ll> vl;
typedef vector <vl> vvl;
typedef vector <vvl> vvvl;
typedef vector <vvvl> vvvvl;
typedef pair <int, int> ii;
typedef vector <ii> vii;
typedef vector <vii> vvii;
typedef pair <int, ll> il;
typedef vector <il> vil;
typedef vector <vil> vvil;
typedef pair <ll, int> li;
typedef vector <li> vli;
typedef vector <vli> vvli;
typedef set <int> si;
typedef set <li> sli;
typedef set <il> sil;
typedef vector <string> vs;
typedef vector <vs> vvs;
typedef vector <vvs> vvvs;
typedef map <string, int> msi;
typedef map <char, int> mci;
typedef pair <ll, ll> pll;

struct tree {
    int n;
    vi tmax, tmin;

    tree() {}
    tree(int n) : n(n), tmax(4 * n), tmin(4 * n) {}

    void mod(int pos, int value, int v, int tl, int tr) {
        if (tl == tr) {
            tmax[v] = tmin[v] = value;
            return;
        }
        if (pos <= (tl + tr) / 2) {
            mod(pos, value, v * 2, tl, (tl + tr) / 2);
        } else {
            mod(pos, value, v * 2 + 1, (tl + tr) / 2 + 1, tr);
        }
        tmin[v] = min(tmin[v * 2], tmin[v * 2 + 1]);
        tmax[v] = max(tmax[v * 2], tmax[v * 2 + 1]);
        return;
    }
    int get_min(int v, int l, int r, int tl, int tr) {
        if (l < tl)
            l = tl;
        if (r > tr)
            r = tr;
        if (l > r)
            return inf;
        if (tl == l && tr == r) {
            return tmin[v];
        }
        return min(get_min(v * 2, l, r, tl, (tl + tr) / 2), get_min(v * 2 + 1, l, r, (tl + tr) / 2 + 1, tr));
    }
    int get_max(int v, int l, int r, int tl, int tr) {
        if (l < tl)
            l = tl;
        if (r > tr)
            r = tr;
        if (l > r)
            return -inf;
        if (tl == l && tr == r) {
            return tmax[v];
        }
        return max(get_max(v * 2, l, r, tl, (tl + tr) / 2), get_max(v * 2 + 1, l, r, (tl + tr) / 2 + 1, tr));
    }
};

int main() {
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    int n, s, l;
    cin >> n >> s >> l;
    vector <int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    tree t(n);
    vector <int> len(n);
    for (int i = 0; i < n; ++i) {
        int L = 0, R = i;
        t.mod(i, a[i], 1, 0, n - 1);
        while (L < R) {
            int M = (L + R) / 2;
            //cout << t.get_max(1, M, i, 0, n - 1) << ' ' << t.get_min(1, M, i, 0, n - 1) << endl;
            if (t.get_max(1, M, i, 0, n - 1) - t.get_min(1, M, i, 0, n - 1) <= s) {
                R = M;
            } else {
                L = M + 1;
            }
        }
        len[i] = i - L + 1;
    }
    vi dp(n, inf);
    for (int i = 0; i < n; ++i) {
        t.mod(i, 0, 1, 0, n - 1);
    }
    for (int i = 0; i < n; ++i) {
        if (len[i] == i + 1 && len[i] >= l)
            dp[i] = 1;
        else {
            dp[i] = t.get_min(1, i - len[i], i - l, 0, n - 1);
            if (dp[i] != inf)
                dp[i]++;
        }
        t.mod(i, dp[i], 1, 0, n - 1);
    }
    if (dp[n - 1] == inf)
        cout << -1;
    else {
        cout << dp[n - 1];
    }
    return 0;
}