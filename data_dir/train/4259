#include <bits/stdc++.h>
using namespace std;

const int maxn = 1e5+5;

int n, m, cat[maxn], res;
bool visited[maxn];

vector <int> edge[maxn];

///Trace path starting from node 1
void dfs(int node, int consec, int maxcon){
    if (visited[node]) return;
    visited[node] = true;

    if (cat[node]){
        consec++;
    } else{
        consec = 0;
    }
    maxcon = max(maxcon, consec);
    if (edge[node].size() == 1 && node != 1 && maxcon <= m){
        res++;
        maxcon = 0;
        return;
    }
    for (int i = 0; i < edge[node].size(); i++){
        dfs(edge[node][i], consec, maxcon);
    }
}

int main()
{
    cin >> n >> m;
    for (int i = 1; i <= n; i++){
        cin >> cat[i];
    }

    for (int i = 0; i < n-1; i++){
        int par, child;
        cin >> par >> child;
        edge[par].push_back(child);
        edge[child].push_back(par);
    }

    dfs(1, 0, 0);
    cout << res << endl;
    return 0;
}
