#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;

const int MAXN = 200005;
int N, sidx = 0;
ll K;
ll A[MAXN];

ll gcd(ll m, ll n)
{
    if (m % n == 0)
        return n;
    return gcd(n, m % n);
}

ll add(ll a, ll b)
{
    if (a >= K - b)
        return K;
    return a + b;
}

ll mult(ll a, ll b)
{
    if (b == 0)
        return 0;
    if (a >= (K + b - 1)/b)
        return K;
    return a*b;
}

bool check(ll step)
{
    ll cur = 1, total = 0;
    for (int i = N; i >= sidx; i--)
    {
        total = add(total, mult(cur, A[i]));
        if (total >= K)
            return true;
        ll num = step + N - i, dem = N - i + 1;
        ll d = gcd(num, dem);
        num /= d;
        dem /= d;
        d = gcd(cur, dem); 
        cur /= d;
        dem /= d;
        cur = mult(cur, num);
    }
    return false;
}

int main()
{
    ios::sync_with_stdio(0);

    cin >> N >> K;
    for (int i = 1; i <= N; i++)
    {
        cin >> A[i];
        if (A[i] >= K)
        {
            cout << "0\n";
            return 0;
        }
        if (A[i] != 0 && sidx == 0)
            sidx = i;
    }

    ll lo = 1, hi;
    if (N - sidx >= 10000)
        hi = 100;
    else
        hi = K + 2;
    while (lo < hi)
    {
        ll mid = lo + (hi - lo)/2;
        if (check(mid))
            hi = mid;
        else
            lo = mid + 1;
    }

    cout << lo << "\n";

    return 0;
}
