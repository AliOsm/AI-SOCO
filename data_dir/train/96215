//Be Name Khoda, Besmellah Rahmane Rahim, In The Name Of God;
//#include<bits/stdc++.h>
#include<iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <deque>
#include <map>
#include <stack>
#include<bitset>
#include<list>
#include<cassert>
#include<numeric>
#include <stdio.h>
#include <string.h>
#include<iomanip>
#include<unordered_map>
#include<unordered_set>


using namespace std;

const long long N = 2e5 + 5;
vector<long long> graph[N];
map<long long, long long> mp;
long long cnt[N];
long long par[N];
long long d[N];
long long p[N];
long long k;
long long n, m;

void bfs(long long s)
{
	queue<long long> q;
	q.push(s);
	while (q.size())
	{
		long long x = q.front();
		q.pop();
		for (auto u: graph[x])
		{
			if (!d[u] && u != s)
			{
				d[u] = d[x] + 1;
				q.push(u);
				par[u] = x + 1;
			}
			if (d[u] == d[x] + 1)
			{

				cnt[u]++;
				if (mp[u + 1] != par[u])
				{
					par[u] = x + 1;
				}
			}
		}
	}
}


int main()
{
	cin >> n >> m;
	for (long long i = 0; i < m; i++)
	{
		long long u, v;
		cin >> u >> v;
		graph[v - 1].push_back(u - 1);
	}
	cin >> k;
	for (long long i =0 ; i < k; i++)
	{
		cin >> p[i];
	}
	for (long long i = 0; i < n - 1; i++)
	{
		mp[p[i]] = p[i + 1];
	}
	bfs(p[k - 1] - 1);
	long long mini = 0;
	long long maxi = 0;
	for (long long i = 0 ; i < k - 1; i++)
	{
		long long v = p[i];
		if (par[p[i] - 1] != p[i + 1])
		{
			mini++;
		}
		if (cnt[v - 1] == 1 && par[p[i] - 1] != p[i + 1])
		{
			maxi++;
		}
		if (cnt[v - 1] > 1)
		{
			maxi++;
		}
	}
	cout << mini << " " << maxi << endl;




	





}