#include <bits/stdc++.h>
using namespace std;

//.define
// #define FILE_IN_OUT
#define RET(_x)                       return cout << (_x) << '\n', 0;
#define all(_obj)                     (_obj).begin(), (_obj).end()
#define loop(_n)                      for (int i = 0; i < (_n); ++i)
#define ceilDiv(_dividend, _divider)  (((_dividend) - 1LL + (_divider)) / (_divider))
#define has(_obj, _val)               ((_obj).find(_val) != (_obj).end())
#define sz(_obj)                      static_cast<int>((_obj).size())
#ifdef SHJ_LOCAL
    #define debug(_x)                 std::cerr << (#_x) << " = " << (_x) << '\n'; std::cerr.flush();
#else
    #define debug(_x)                 ;
#endif
#define endl                          "\n"
template<typename Tp>
inline void outarr(Tp _array, const std::size_t _N, const char* _delim = " ") {
    Tp end = std::next(_array, _N);
    for (Tp current = _array; current != end; ++current) {
        std::cout << *current << _delim;
    }
    std::cout << '\n';
}

//.constant
using ll  = int64_t;
using pii = std::pair<int, int>;
constexpr int INF = 0x3f3f3f3f;
constexpr int MOD = static_cast<const int>(1e9 + 7);

//.data
int x[3];
int y[3];
int id[3] = {0, 1, 2};
vector<pii> ans;

//.code
int main() {
#ifdef FILE_IN_OUT
    std::ifstream cin ("input.txt",  std::ios::in);
    std::ofstream cout("output.txt", std::ios::out);
#else
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
#endif

    loop(3) {
        cin >> x[i] >> y[i];
    }
    sort(id, id + 3, [](int i, int j) {
        return x[i] < x[j];
    });
    auto [b, e] = minmax_element(y, y + 3);
    for (int i = *b; i <= *e; ++i) {
        ans.emplace_back(x[id[1]], i);
    }
    for (int i = x[id[0]]; i < x[id[1]]; ++i) {
        ans.emplace_back(i, y[id[0]]);
    }
    for (int i = x[id[1]] + 1; i <= x[id[2]]; ++i) {
        ans.emplace_back(i, y[id[2]]);
    }
    cout << sz(ans) << endl;
    for (auto&& [xx, yy] : ans) {
        cout << xx << ' ' << yy << endl;
    }

#ifdef FILE_IN_OUT
    cin.close();
    cout.close();
#endif
    return 0;
}