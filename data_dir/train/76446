#include <bits/stdc++.h>

using namespace std;

struct item {
    int i, j, a, b;
    bool ok;
    item(int i = 0, int j = 0, int a = 0, int b = 0, bool f = false) : i(i), j(j), a(a), b(b), ok(f) {}
};

item dp[4][4][201][201];

void precalc() {
    dp[0][0][0][0].ok = true;
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            int need = 25;
            if (i == 2 and j == 2) {
                need = 15;
            }
            for (int a = 0; a <= 200; ++a) {
                for (int b = 0; b <= 200; ++b) {
                    if (!dp[i][j][a][b].ok) {
                        continue;
                    }
                    for (int k = 0; k <= 200; ++k) {
                        if (max(need, k + 2) + a <= 200 and b + k <= 200) {
                            dp[i + 1][j][a + max(need, k + 2)][b + k] = item(i, j, a, b, true);
                        }
                        if (max(need, k + 2) + b <= 200 and a + k <= 200) {
                            dp[i][j + 1][a + k][b + max(need, k + 2)] = item(i, j, a, b, true);
                        }
                    }
                }
            }
        }
    }
}

pair<int, int> score[] = {{3, 0}, {3, 1}, {3, 2}, {2, 3}, {1, 3}, {0, 3}};

void solve() {
    int a, b;
    cin >> a >> b;
    for (int k = 0; k < 6; ++k) {
        if (dp[score[k].first][score[k].second][a][b].ok) {
            cout << score[k].first << ':' << score[k].second << '\n';
            int i = score[k].first, j = score[k].second;
            vector<pair<int, int>> ans;
            while (i or j) {
                ans.emplace_back(a - dp[i][j][a][b].a, b - dp[i][j][a][b].b);
                int ii = dp[i][j][a][b].i, jj = dp[i][j][a][b].j;
                int aa = dp[i][j][a][b].a, bb = dp[i][j][a][b].b;
                i = ii, j = jj, a = aa, b = bb;
            }
            for (int it = ans.size() - 1; it >= 0; --it) {
                cout << ans[it].first << ':' << ans[it].second;
                if (it) {
                    cout << ' ';
                }
            }
            return;
        }
    }
    cout << "Impossible";
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);

    precalc();
    int t;
    cin >> t;
    while (t--) {
        solve();
        if (t) {
            cout << '\n';
        }
    }

    return 0;
}