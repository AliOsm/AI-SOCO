#include <iostream>
#include <fstream>
#include <algorithm>
#include <iomanip>
#include <random>
#include <ctime>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cmath>
#include <climits>
#include <cstring>
#include <queue>
#include <deque>
#include <stack>
#include <list>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma GCC optimize("O3")
#define ld long double
#define ull unsigned long long
#define ll long long
#define pb push_back
#define mp make_pair
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pld pair<ll, ld>
#define all(x) x.begin(), x.end()
#define fast_io cout.tie(0), cin.tie(0), ios_base::sync_with_stdio(0)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
using namespace std;
ld eps = 1.0 / 1e18;
ll sqr(ll a) { return a * a; };
ll gcd(ll a, ll b) { return !a ? b : gcd(b % a, a); }
ll binpow(ll a, ll b, ll mod) { return b ? (b % 2 ? (a * (sqr(binpow(a, b / 2, mod)) % mod)) % mod : sqr(binpow(a, b / 2, mod)) % mod) : 1; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ll a[101];
pll nw[101];
bool cmp(pll a, pll b) { return a.first != b.first ? a.first > b.first : a.second < b.second; }

int main()
{
    fast_io;
    ll n, m, i, j, l, r;
    cin >> n;
    for (i = 1; i <= n; i++) cin >> a[i], nw[i].first = a[i], nw[i].second = i;
    sort(nw + 1, nw + n + 1, cmp);
    cin >> m;
    //for (i = 1; i <= n; i++) cout << nw[i].first << ' ' << nw[i].second << '\n';
    for (i = 1; i <= m; i++)
    {
        cin >> l >> r;
        vector<pll> vc;
        for (j = 1; j <= l; j++)
            vc.pb({nw[j].second, nw[j].first});
        sort(all(vc));
        cout << vc[r - 1].second << '\n';
    }
    return 0;
}