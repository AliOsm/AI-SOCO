#include<iostream>
#include<sstream>
#include<vector>
#include<algorithm>
#include<set>
#include<map>
#include<queue>
#include<complex>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cassert>
using namespace std;

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define each(i,c) for(__typeof(c.begin()) i=c.begin();i!=c.end();i++)
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

typedef vector<int> vi;
typedef pair<int,int> pi;
typedef long long ll;
const int inf=(int)1e9;
const double EPS=1e-9, INF=1e12;

const int MX = 200010;
int n, mod;
int a[MX], b[MX];
int facto[MX];
ll two[MX];

inline ll pw(ll n, ll m, ll mod){
	ll res = 1;
	for(; m; m /= 2){
		if(m & 1) res = res * n % mod;
		n = n * n % mod;
	}
	return res;
}

int main(){
	scanf("%d", &n);
	vi xs;
	rep(i, n) scanf("%d", a + i), xs.pb(a[i]);
	rep(i, n) scanf("%d", b + i), xs.pb(b[i]);
	scanf("%d", &mod);
	
	sort(all(xs));
	vector<vi> vv(xs.size());
	rep(i, n){
		int aa = lower_bound(all(xs), a[i]) - xs.begin();
		int bb = lower_bound(all(xs), b[i]) - xs.begin();
		vv[aa].pb(i);
		vv[bb].pb(i);
	}
		
	
	facto[0] = 1;
	rep(i, MX - 1){
		ll a = i + 1;
		ll &b = two[i + 1];
		b = two[i];
		while(a % 2 == 0){
			a /= 2;
			b++;
		}
		facto[i + 1] = facto[i] * a % mod;
	}
	ll ans = 1;
	rep(j, vv.size()){
		vi &v = vv[j];
		sort(all(v));
		int p = 0, s = v.size();
		rep(i, v.size()) if(i && v[i] == v[i - 1]) p++;
		ans = ans * facto[s] % mod;
		ans = ans * pw(2, two[s] - p, mod) % mod;
	}
	cout << ans << endl;
	return 0;
}
