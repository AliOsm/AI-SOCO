#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <bitset>
#include <vector>
#include <queue>
#include <memory.h>
#include <deque>
#include <iomanip>
#include <utility>
#include <string>
#include <ext/rope>
#include <iterator>

using namespace std;
using namespace __gnu_cxx;

#define pb push_back
#define mp make_pair
#define F first
#define S second
#define sz size
#define scf scanf
#define prf printf       
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define gcd(a,b) __gcd(a,b)
#define print(x) prf("%d\n", x.sz()); for (int i = 0; i < x.sz(); i++) prf("%d ", x[i]);
#define getBit(x,i) ((x&(1<<i))!=0 ? 1 : 0)
#define For(i,n) for (int i = 0; i < n; ++i)
#define FOR(i,begin,end,move) for (int i = begin; i != end; i += move)

typedef long long ll;

const ll base = 1000000007LL;
const ll INF = 10000000000000LL;

int n;
ll l, r;
vector < int > f, s;

ll Get(vector < int > a)
{                    
    ll res=0;                       
    for (int i = a.size() - 1; i >= 0; --i)
    {
        res *= 2LL;
        res += (1LL * a[i]);
    }
    return res;
}

vector < int > get(ll x)
{                 
    ll y = x;         
    vector < int > res;
    while (y)
    {                      
        res.pb((int)(y % 2LL));
        y /= 2LL;
    }
    return res;
}


int main()
{           
    scf("%d", &n);
    while (n--)
    {               
        scf("%I64d%I64d", &l, &r);     
        s = get(l);
        f = get(r);               
        while (f.sz() != s.sz())
            s.pb(0);
    //  For(i, s.sz())
    //      cout << s[i] << endl; 
        bool can = false;
        For(i, s.sz())
        {
            if (!can && s[i] == 0)
            {              
                s[i] = 1;
                if (Get(s) > Get(f))
                    {          
                        can = true;
                        s[i] = 0;
                    }
            }
        }                  
        prf("%I64d\n", Get(s));
    }
    return 0;
}           