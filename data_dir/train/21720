#include <bits/stdc++.h>
#ifdef BUG
    #include "debug.hpp"
#else
    #define DEBUG(var)
    #define EXPECT(expr)
#endif
#define NO_IO_TIE ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

using namespace std;
template< class T1, class T2 > inline istream &
operator>>( istream & fin, pair< T1, T2 > & pr )
{ fin >> pr.first >> pr.second; return fin; }
template< class T0, class T1, class T2 > inline istream &
operator>>( istream & fin, tuple< T0, T1, T2 > & t )
{ fin >> get<0>(t) >> get<1>(t) >> get<2>(t); return fin; }
template< class T > inline istream &
operator>>( istream & fin, vector< T > & a ) {
if(! a.size()){ size_t n; fin >> n; a.resize( n ); }
for( auto & u: a) fin >> u; return fin; }
/* @@@ ----------------------------------- */
// 484e

inline size_t
next( const size_t self,
      const tuple< size_t, size_t, size_t > & e )
{
    return get< 0 >( e ) + get< 1 >( e ) - self;
}

inline size_t
dfs( const size_t root,
     vector< size_t > & count,
     const vector< tuple< size_t, size_t, size_t > > & edge,
     const vector< vector< size_t > > & adj )
{
    count[ root ] = 1;

    for( const auto & i: adj[ root ] )
    {
        const auto & e = edge[ i ];
        const auto u = next( root, e );

        if( ! count[ u ] )
            count[ root ] += dfs( u, count, edge, adj );
    }
    return count[ root ];
}

void d500()
{
    size_t n;
    cin >> n;

    vector< tuple< size_t, size_t, size_t > > edge( n - 1);
    cin >> edge;

    vector< vector< size_t > > adj( n );

    for( size_t i = 0; i + 1 < n; ++ i )
        adj[ -- get< 0 >( edge[ i ] ) ].emplace_back( i ),
            adj[ -- get< 1 >( edge[ i ] ) ].emplace_back( i );

    vector< size_t > count( n, 0 );
    dfs( 0, count, edge, adj );
    DEBUG( count );

    const auto f = []( const int64_t n ){
        return static_cast< long double >( n * ( n - 1LL ) * ( n - 2LL ));
    };

    const auto g = []( const int64_t n1, const int64_t n2 ){
        return static_cast< long double >( n1 * ( n1 - 1LL ) * n2 );
    };

    const long double mul = 1.0L / f( n );
    long double val = 0;

    for( const auto & e: edge )
    {
        const auto n1 = min( count[ get< 0 >( e )], count[ get< 1 >( e ) ]);
        const auto n2 = n - n1;
        DEBUG( make_pair( n1, n2 ));
        val += 6.0L * mul * ( g( n1, n2 ) + g( n2, n1 )) * get< 2 >( e );
    }
    DEBUG( val );

    size_t m;
    for( cin >> m; 0 < m; -- m )
    {
        size_t i, len;
        cin >> i >> len;
        -- i;
        auto & e = edge[ i ];

        const auto n1 = min( count[ get< 0 >( e )], count[ get< 1 >( e ) ]);
        const auto n2 = n - n1;
        val -= 6.0L * mul * ( g( n1, n2 ) + g( n2, n1 )) *
            (get< 2 >( e ) - len);

        cout << setprecision( 15 ) << val << '\n';
        get< 2 >( e ) = len;
    }

}

int main( const int argc, char * argv [])
{
    // NO_IO_TIE;
    d500();
    return EXIT_SUCCESS;
}
