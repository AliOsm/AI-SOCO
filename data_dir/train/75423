#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
#include<queue>
#include<algorithm>
#define N 200
#define M 200001
using namespace std;  
const int INF=(1<<30);
int n;   
string s;
struct Edge  
{  
    int u,v,pre,cap,cost;  
    Edge(){}  
    Edge(int u,int v,int pre,int cap,int cost) :  
        u(u),v(v),pre(pre),cap(cap),cost(cost) {}  
}edge[M];  
  
int head[M],nEdge;  
struct MinCostFlow  
{  
    queue<int> q;  
    int vis[M],pre[M],dis[M],pos[M];  
    void init()  
    {  
       nEdge=0;  
       memset(head,-1,sizeof(head));  
    }  
    void addEdge(int u,int v,int cap,int cost)  
    {  
       edge[nEdge]=Edge(u,v,head[u],cap,cost);  
       head[u]=nEdge++;  
       edge[nEdge]=Edge(v,u,head[v],0,-cost);  
       head[v]=nEdge++;  
    }  
    int spfa(int s,int t,int n)  
    {  
        for(int i=0;i<=n;i++)  
        {  
            pre[i]=-1; vis[i]=0; dis[i]=INF;  
        }  
  
        q.push(s); pre[s]=s; dis[s]=0; vis[s]=1;  
        while(!q.empty())  
        {  
            int u=q.front();  
  
            q.pop(); vis[u]=0;  
  
            for(int i=head[u];i!=-1;i=edge[i].pre)  
            {  
                int v=edge[i].v,cost=edge[i].cost;  
                if(edge[i].cap>0&&dis[u]+cost<dis[v])  
                {  
                    dis[v]=dis[u]+cost;  
  
                    pre[v]=u; pos[v]=i;  
  
                    if(!vis[v])  
                    {  
                        vis[v]=1;  
                        q.push(v);  
                    }  
                }  
            }  
        }  
        if(pre[t]!=-1&&dis[t]<INF) return 1;  
        return 0;  
    }  
    void solve(int s,int t,int n,int &flow,int &cost)  
    {  
        flow=0,cost=0;  
        while(spfa(s,t,n))  
        {  
            int mi=INF;  
            for(int u=t;u!=s;u=pre[u]) mi=min(mi,edge[pos[u]].cap);  
            flow+=mi;  
            cost+=mi*dis[t];  
            for(int u=t;u!=s;u=pre[u])  
            {  
                edge[ pos[u] ].cap-=mi;  
                edge[ pos[u]^1 ].cap+=mi;  
            }  
        }  
    }  
}mcf;  
int main(){
    int num[30],a;
    int mx_flow,cost;
    while(cin>>s){
         cin>>n;
         mcf.init();
         int len = s.size();
         memset(num,0,sizeof(num));
         for(int i = 0;i<len;++i)
                 num[s[i]-'a']++;
         for(int i = 0;i<26;++i)
                 mcf.addEdge(n+i+1,n+27,num[i],0);
         for(int i = 1;i<=n;++i){
                 cin>>s>>a;
                 mcf.addEdge(0,i,a,0);
                 for(int j = 0;j<s.size();++j)
                         mcf.addEdge(i,n+s[j]-'a'+1,1,i);    
         }
         mcf.solve(0,n+27,n+28,mx_flow,cost);
         if(mx_flow!=len)puts("-1");
         else cout<<cost<<endl;
    }
    return 0;
}
