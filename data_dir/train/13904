#include <bits/stdc++.h>
using namespace std;

const int MAXN = int( 2e5 );
const int MAXP = int( 1e9 );

int N;
int P[ MAXN ];
int A[ MAXN ];
int B[ MAXN ];

signed main() {
  ios::sync_with_stdio( 0 );
  cin >> N;
  for( int i = 0; i < N; ++i ) {
    cin >> P[ i ];
  }
  for( int i = 0; i < N; ++i ) {
    cin >> A[ i ];
    --A[ i ];
  }
  priority_queue< tuple< int, int, int > > pq[ 3 ];
  set< tuple< int, int, int > > bag[ 3 ];
  for( int i = 0; i < N; ++i ) {
    cin >> B[ i ];
    --B[ i ];
    if( A[ i ] > B[ i ] ) {
      swap( A[ i ], B[ i ] );
    }
    pq[ A[ i ] ].emplace( -P[ i ], A[ i ], B[ i ] );
    bag[ A[ i ] ].emplace( -P[ i ], A[ i ], B[ i ] );
    if( A[ i ] != B[ i ] ) {
      pq[ B[ i ] ].emplace( -P[ i ], A[ i ], B[ i ] );
      bag[ B[ i ] ].emplace( -P[ i ], A[ i ], B[ i ] );
    }
  }
  int M;
  cin >> M;
  for( int i = 0; i < M; ++i ) {
    for( int j = 0; j < 3; ++j ) {
      while( not pq[ j ].empty() ) {
        int p, a, b;
        tie( p, a, b ) = pq[ j ].top();
        if( not bag[ a ].count( make_tuple( p, a, b ) ) ) {
          pq[ j ].pop();
        } else {
          break;
        }
      }
    }
    int fav;
    cin >> fav;
    --fav;
    if( pq[ fav ].empty() ) {
      cout << -1 << " \n"[ i + 1 == M ];
    } else {
      int p, a, b;
      tie( p, a, b ) = pq[ fav ].top();
      pq[ fav ].pop();
      bag[ a ].erase( make_tuple( p, a, b ) );
      bag[ b ].erase( make_tuple( p, a, b ) );
      cout << -p << " \n"[ i + 1 == M ];
    }
  }
  return 0;
}
