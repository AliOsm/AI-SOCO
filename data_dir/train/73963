#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <memory.h>
#include <ctime>
#include <bitset>
#include <unordered_map>

using namespace std;

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.14159265358979
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned

int c[30];
int dp[(1 << 12) + 3][13][25];
int sum[1 << 12];
int cnt[1 << 12];
int tot;
int r(int mask, int p, int child)
{
	if (c[p] == 2)
		return 0;
	if (child < 0)
		return 0;
	if ((mask >> p) & 1)
		return 0;
	if (p == tot)
	{
		return (child == 0);
	}
	if (dp[mask][p][child] != -1)
		return dp[mask][p][child];
	int res = r(mask, p + 1, child - c[p] + 1);
	if (res)
		return dp[mask][p][child] = 1;
	for (int s = mask; s > 0; s = ((s - 1)&mask))
	{
		int k = cnt[s];
		int val = sum[s] + 1;
		if (val > c[p])
			continue;
		k += c[p] - sum[s] - 1;
		if (k < 2)
			continue;
		int res = r(mask^s, p + 1, child - (c[p] - sum[s] - 1));
		if (res)
			return dp[mask][p][child] = 1;
	}
	return dp[mask][p][child] = 0;
}

int main()
{
#ifdef Fcdkbear
	freopen("in.txt", "r", stdin);
	//freopen("out.txt","w",stdout);
	double beg = clock();
#endif

	int n;
	scanf("%d", &n);
	int v = 0;
	FOR(i, 0, n)
	{
		scanf("%d", &c[i]);
		if (c[i] == 1)
			v++;
	}
	if (v < (n + 1) / 2)
	{
		cout << "NO" << endl;
		return 0;
	}
	if (n == 1)
	{
		cout << "YES" << endl;
		return 0;
	}
	sort(c, c + n);
	reverse(c, c + n);
	FOR(i, 0, n)
	{
		if (c[i]>1)
			tot++;
	}
	FOR(i, 0, (1 << tot))
	{
		FOR(j, 0, tot)
		{
			if ((i >> j) & 1)
			{
				sum[i] += c[j];
				cnt[i]++;
			}
		}
	}
	MEMS(dp, -1);
	int res = r((1 << tot) - 2, 0, v);
	if (res)
		printf("YES\n");
	else
		printf("NO\n");

#ifdef Fcdkbear
	double end = clock();
	fprintf(stderr, "*** Total time = %.3lf ***\n", (end - beg) / CLOCKS_PER_SEC);
#endif
	return 0;
}