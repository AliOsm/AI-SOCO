#include "assert.h"
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <string.h>
#include <time.h>
#include <vector>

#if LOCAL
	#define DO_NOT_SEND
#endif

typedef long long LL;

int IntMaxVal = (int) 1e20;
int IntMinVal = (int) -1e20;
LL LongMaxVal = (LL) 1e20;
LL LongMinVal = (LL) -1e20;

#define FOR(i, a, b) for(int i = a; i < b ; ++i)
#define FORD(i, a, b) for(int i = a; i >= b; --i)

template<typename T> inline void minimize(T &a, T b) { a = std::min(a, b); }
template<typename T> inline void maximize(T &a, T b) { a = std::max(a, b); }

#define all(v) v.begin(),v.end()

using namespace std;

#define endl '\n'
template<typename T> struct argument_type;
template<typename T, typename U> struct argument_type<T(U)> { typedef U type; };
#define next(t, i) argument_type<void(t)>::type i; cin >> i;

template <typename T1, typename T2> istream& operator >>(istream& is, pair<T1, T2>& s) { is >> s.first >> s.second; return is; }
template <typename T> ostream& operator << (ostream& os, const vector<T> &v) { for (int i = 0 ; i < v.size() ; i++) { if (i) os << ' '; os << v[i]; } os << endl; return os; }
template <typename T1, typename T2> ostream& operator <<(ostream& s, const pair<T1, T2>& t) { s << t.first << ' ' << t.second; return s; }
template <typename T> vector<T> readVector(int n) { vector<T> res(n); for (int i = 0 ; i < n ; i++) cin >> res[i]; return res; }

struct island_dist {
	LL minDist;
	LL maxDist;
	int id;
	int bridge;
};

struct bridge {
	LL len;
	int id;
};

istream& operator >> (istream& is, bridge &x) {
	static int next_id = 1;
	x.id = next_id++;
	return is >> x.len;
}

bool byLen(const bridge &b1, const bridge &b2) {
	return b1.len < b2.len;
}

bool byMinDist(const island_dist &d1, const island_dist &d2) {
	return d1.minDist < d2.minDist;
}

int main() {
	srand (time(NULL));
	ios_base::sync_with_stdio(false); cin.tie(NULL);
	
	next(int, n);
	next(int, m);

	auto islands = readVector<pair<LL, LL>>(n);
	deque<island_dist> distances(n - 1);
	FOR (i, 0,  n - 1) {
		distances[i].id = i;
		distances[i].minDist = islands[i + 1].first - islands[i].second;
		distances[i].maxDist = islands[i + 1].second - islands[i].first;
		distances[i].bridge = -1;
	}

	auto bridges = readVector<bridge>(m);
	sort(all(bridges), byLen);
	sort(all(distances), byMinDist);

	vector<int> result(n - 1, -1);
	set<pair<LL, int>> allowed_distances;
	for (auto &b : bridges) {
		while (distances.size() && distances.front().minDist <= b.len) {
			allowed_distances.insert( { distances.front().maxDist , distances.front().id } );
			distances.pop_front();
		}
		auto ptr = allowed_distances.lower_bound( { b.len , 0 } );
		if (ptr != allowed_distances.end()) {
			result[ptr->second] = b.id;
			allowed_distances.erase(ptr);
		}
	}

	for (auto id : result) if (id == -1) {
		cout << "No";
		return 0;
	}
	cout << "Yes" << endl;
	cout << result;
}