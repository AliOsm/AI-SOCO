#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>

#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mod 1000000007
#define PI 3.14159265
#define pll pair<ll, ll>
using namespace std;

typedef unsigned long long ull;

bool is_prime(int n) {

    for (int i = 2; i * i <= n; ++i) {
            if (n % i == 0) {
                  return false;
            }
    }
    return true;
}

inline ll getPow(ll a,ll b){
    ll res = 1ll,tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
           res %= mod;
       }
       tp *= tp;
       tp %= mod;
       b >>= 1ll;
    }
    return res;
}

double coso(ll x1, ll y1, ll x2, ll y2, ll x3, ll y3) {
    return abs((x2 - x1) * (y3 - y1) - (y2 - y1)*(x3 - x1));
}

inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}

void ok() {
    puts("Yes");
    exit(0);
}

void no() {
    puts("No");
    exit(0);
}

ll xx[] = {-1, 1, 0, 0};
ll yy[] = {0, 0, -1, 1};

// please, accepted!
const ll N = 711;
ll mas[N];

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
    ll n = nxt(), m = nxt(), p = nxt();
    stack<ll> st;
    vector<ll> pr(n + 1, 0);
    set<ll> te;
    vector<char> s;
    for(int i = 1; i <= n; i++) {
           char c;
           cin >> c;
           s.push_back(c);
           if(c == '(') {
               st.push(i);
           }
           else {
               ll ind = st.top();
               pr[ind] = i;
               pr[i] = ind;
               st.pop();
           }
           te.insert(i);
    }
    auto it = te.lower_bound(p);
    for(int i = 0; i < m; i++) {
           char c;
           cin >> c;
           if(c == 'R') {
               it++;
           }
           if(c == 'L') {
               it--;
           }
           if(c == 'D') {
               auto l = it;
               auto r = te.lower_bound(pr[*it]);
               ll vl = *l;
               ll vr = *r;
               if(vl > vr) swap(l, r), swap(vl, vr);
               te.erase(l, ++r);
               auto nw = te.lower_bound(vr);

               if(nw != te.end()) {
                    it = nw;
               }
               else it = --(te.lower_bound(vl));
           }
    }
    vector<char> ans;
    for(auto x : te) {
          ans.push_back(s[(x) - 1]);
    }
    for(auto x : ans) {
          cout << x;
    }
    return 0;
}
