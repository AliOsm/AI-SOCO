// copied by Nurstan Duisengaliev
// skatal
#include <bits/stdc++.h>
 
#define ll long long
#define all(x) x.begin(), x.end()
#define in insert
#define mp make_pair
#define F first
#define S second
#define ppf pop_front
#define pb push_back
#define ppb pop_back
#define pf push_front
#define pii pair <int, int>
#define boost() ios_base::sync_with_stdio(0), cin.tie(0)
#define sz(x) x.size()
 
using namespace std;
 
const int N = (int)2e5 + 123;
const int mod = (int)1e9 + 7;
const ll INF = (ll)1e18 + 7;
int n;
int a[N][4];
int cnt[N];
map <pii, set <int> > m;
vector <int> v;
void make_v () {
	for (int i = 1; i <= n - 2; i ++) {
		if (cnt[a[i][1]] == 1) {
			v.pb (a[i][1]);
		}
		else if (cnt[a[i][2]] == 1) {
			v.pb (a[i][2]);
		}
		else if (cnt[a[i][3]] == 1) {
			v.pb (a[i][3]);
		}
		if (cnt[a[i][1]] == 2) {
			v.pb (a[i][1]);
		}
		else if (cnt[a[i][2]] == 2) {
			v.pb (a[i][2]);
		}
		else if (cnt[a[i][3]] == 2) {
			v.pb (a[i][3]);
		}
		if (v.size() == 1) v.clear ();
		if ((int)sz (v) != 0) break; 
	}
}
void solve () {
	cin >> n;
	for (int i = 1; i <= n - 2; i ++) {
		cin >> a[i][1] >> a[i][2] >> a[i][3];
		sort (a[i] + 1, a[i] + 4);	
		cnt[a[i][1]] ++;
		cnt[a[i][2]] ++;
		cnt[a[i][3]] ++;
		m[mp (a[i][1], a[i][2])].in (a[i][3]);
		m[mp (a[i][1], a[i][3])].in (a[i][2]);
		m[mp (a[i][2], a[i][3])].in (a[i][1]);
	}              
	make_v ();
	while ((int)sz (v) < n) {
		pii inc = mp (min (v.back (), v[v.size() - 2]), max (v.back (), v[v.size() - 2]));
		int nx = *m[inc].begin();
		m[inc].erase (m[inc].begin());
		m[mp( min(v.back (), nx), max (v.back (), nx))].erase (v[v.size() - 2]);
		v.pb (nx);			
	}
	for (auto it : v) {
		cout << it << " ";
	}
}
 
main () {
//	freopen (".in", "r", stdin);
//	freopen (".out", "w", stdout);
	boost ();
	int TT = 1;
//	cin >> TT;
	while (TT --) {
		solve ();
	}
	return 0;	
}