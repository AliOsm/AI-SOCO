#include <bits/stdc++.h>
using namespace std;
#define oo 1000000010
#define mod 1000000007
const int N = 200010;
int n , m , k;

vector< pair<int , pair<int,int> > > edges;

vector< pair<int,int> > g[N];

int vis[N] , vi = 0;

vector< long long > v;

bool done[N];

void dijkstra(int source){
    if(done[source]) return;
    done[source] = true;
    priority_queue < pair<long long,int> > q;
    q.push(make_pair(0 , source));
    vi++;
    int node;
    long long cost;
    while(!q.empty()){
        cost = -q.top().first;
        node = q.top().second;
        q.pop();
        if(vis[node] == vi) continue;
        if(node > source){
            v.push_back(cost);
        }
        vis[node] = vi;
        for(int i = 0 ;i < (int)g[node].size();i++){
            if(vis[g[node][i].first] == vi) continue;
            q.push(make_pair(-cost - g[node][i].second , g[node][i].first));
        }
    }
}

int main(){
    scanf("%d%d%d",&n,&m,&k);
    edges.resize(m);
    for(int i = 0 ;i < m;i++){
        scanf("%d%d%d",&edges[i].second.first,&edges[i].second.second,&edges[i].first);
    }
    sort(edges.begin(),edges.end());
     for(int i = 0 ;i < min(m , k);i++){
        g[edges[i].second.first].push_back(make_pair(edges[i].second.second , edges[i].first));
        g[edges[i].second.second].push_back(make_pair(edges[i].second.first , edges[i].first));
    }
    for(int i = 0 ;i < min(m , k);i++){
        dijkstra(edges[i].second.first);
        dijkstra(edges[i].second.second);
    }
    sort(v.begin(),v.end());
    cout << v[k - 1] << endl;
    return 0;
}