#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;
typedef tree<
        pair<int, int>, // change type
        null_type,
        less<pair<int, int> >, // change type
        rb_tree_tag,
        tree_order_statistics_node_update>
        ordered_set;

typedef long long ll;
#define rep(i, start, end) for(int i = start; i < end; ++i)
#define per(i, start, end) for(int i = (int)start-1; i >= end; --i)
#define sz(x) (int)(x).size()
#define pb push_back
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(d, v) memset(d, v, sizeof(d))
#define pii pair<int, int>
const double PI = 3.14159265358979323846;
const double eps = (1e-8);

long long h, goal;
bool found;

//CHECK LONG LONGS
long long solve(pair<ll, ll> i, bool moveLeft)
{
    if (found)
        return 1LL;
    if (i.first == i.second && i.first == goal)
    {
        found = true;
        return 0;
    }
    if (goal > i.second || goal < i.first) // goal not included in this interval, return number of nodes to visit here
    {
        ll cnt = i.second - i.first + 1LL; // number of leaves
        ll ret = 0;
        for (ll j = 0; (1LL << j) <= cnt; ++j)
        {
            ret += (1LL << j);
        }
        return ret;
    }
    ll newEnd = (i.first + i.second) / 2LL;
    pair<ll, ll> to;
    ll ret = 0;
    if (moveLeft) // going left first
    {
        to = {i.first, newEnd};
        ret += solve(to, !moveLeft);

        if (found)
            return ret + 1LL;
        to = {newEnd + 1LL, i.second};
        ret += solve(to, moveLeft);
    }
    else
    {
        to = {newEnd + 1LL, i.second};
        ret += solve(to, !moveLeft);

        if (found)
            return ret + 1LL;
        to = {i.first, newEnd};
        ret += solve(to, moveLeft);
    }

    if (found)
        return ret + 1LL;
    return ret;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
//    freopen("facebook.txt", "w", stdout);
#endif
    /*
     * 1:56
     * 1:58
     * 2:16 - 2
     * 2:23
     * 2:35
     */
    cin >> h >> goal;
    pair<ll, ll> intervalStart = {1, (1LL << h)};
    cout << solve(intervalStart, 1);
    return 0;
}