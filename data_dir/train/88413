#include <iostream>
#include <iomanip>
#include <algorithm>
#include <vector>
#include <string>
#include <cmath>
#include <memory.h>
#include <stack>
#include <fstream>
#include <cstdio>
#include <unordered_map>
#include <map>
#include <list>
#include <queue>
#include <set>
using namespace std;

/*
*/

int p[200005];
set<int> range;

int find(int i)
{
	if (i == p[i]) return i;
	return p[i] = find(p[i]);
}

void un(int i, int j)
{
	int pi, pj;
	pi = find(i);
	pj = find(j);
	if (pi < pj)
		p[pj] = pi;
	else
		p[pi] = pj;
}

bool con(int i, int j)
{
	return (find(i) == find(j));
}

void merge(int L, int R)
{
	int cur = L;
	set<int> :: iterator i = range.upper_bound(cur);
	i--;
	int start = *(i);

	while (true)
	{
		set<int> :: iterator it = range.upper_bound(cur);
		if (it == range.end() || (*it) > R) break;
		un(start, (*it));
		range.erase(it);
	}
}

bool sol(int x, int y)
{
	set<int> :: iterator i = range.upper_bound(x);
	i--;
	int X = *(i);
	i = range.upper_bound(y);
	i--;
	int Y = *(i);
	return con(X, Y);
}

int main()
{
	int n, q;
	scanf("%d %d",&n,&q);
	for (int i = 1; i <= n; i++)
	{
		p[i] = i;
		range.insert(i);
	}
	while (q--)
	{
		int Q, x, y;
		scanf("%d %d %d",&Q,&x, &y);
		if (Q == 1)
		{
			un(x, y);
		}
		else if (Q == 2)
		{
			merge(x, y);
		}
		else
		{
			if (sol(x, y)) printf("YES\n");
			else printf("NO\n");
		}
	}
}