//{{{By oToToT
#include <iostream>
#include <iomanip>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <bitset>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <random>
#include <utility>
#include <stack>
#include <sstream>
#include <functional>
#include <deque>
#include <cassert>
using namespace std;
/* include everything for Kotori~ <3 */

typedef long long lld;
typedef unsigned long long llu;
typedef long double llf;
typedef pair<int,int> PII;
typedef pair<int,lld> PIL;
typedef pair<lld,int> PLI;
typedef pair<lld,lld> PLL;
template<typename T>
using maxHeap = priority_queue<T,vector<T>,less<T>>;
template<typename T>
using minHeap = priority_queue<T,vector<T>,greater<T>>;
/* define some types for Ruby! */

#define FF first
#define SS second
#define SZ(x) (int)(x.size())
#define ALL(x) begin(x), end(x)
#define PB push_back
#define WC(x) while(x--)
/* make code shorter for Di~a~ */

template<typename Iter>
ostream& _out(ostream &s, Iter b, Iter e) {
	s<<"[";
	for ( auto it=b; it!=e; it++ ) s<<(it==b?"":" ")<<*it;
	s<<"]";
	return s;
}
template<typename A, typename B>
ostream& operator <<( ostream &s, const pair<A,B> &p ) { return s<<"("<<p.FF<<", "<<p.SS<<")"; }
template<typename T>
ostream& operator <<( ostream &s, const vector<T> &c ) { return _out(s,ALL(c)); }
/* make output easier for Ainyan~n~ */

bool debug = 0;
#define DUMP(x) if(debug) cerr<<__PRETTY_FUNCTION__<<":"<<__LINE__<<" - "<<#x<<"="<<x<<'\n'
template<typename T>
void DEBUG(const T& x){if(debug) cerr<<x;}
template<typename T, typename... Args>
void DEBUG(const T& head,const Args& ...tail){
	if(debug){cerr<<head; DEBUG(tail...);}
}
/* Let's debug with Nico~Nico~Ni */
//}}}
const int N = 200000 + 5;
const int MEM = 400000 + 5;

class SegTree{
	private:
		int n;
		struct node{
			int cnt;
			bool flag;
		} nodes[N<<2];
		inline int lc(int x){return 2*x+1;}
		inline int rc(int x){return 2*x+2;}
		inline void push(int id, int l, int r){
			if(r-l > 1){
				nodes[lc(id)].flag |= nodes[id].flag;
				nodes[rc(id)].flag |= nodes[id].flag;
			}
			nodes[id].cnt = (r-l)*(!nodes[id].flag);
		}
		inline void pull(int id, int l, int r){
			if(r-l > 1){
				nodes[id].cnt = nodes[lc(id)].cnt = (r-l)*(!nodes[lc(id)].flag);
				nodes[id].cnt += nodes[rc(id)].cnt = (r-l)*(!nodes[rc(id)].flag);
			}
		}
		void build(int l, int r, int id){
			if(r-l > 1){
				int mid = (l+r)>>1;
				build(l, mid, lc(id));
				build(mid, r, rc(id));
			}
			pull(id, l, r);
		}
		int query(int ql, int qr, int l, int r, int id){
			if(qr <= l or r <= ql) return 0;
			push(id, l, r);
			if(ql <= l and r <= qr) return nodes[id].cnt;
			int mid = (l+r)>>1;
			return query(ql, qr, l, mid, lc(id))+query(ql, qr, mid, r, rc(id));
		}
		void modify(int ql, int qr, int l, int r, int id){
			if(qr <= l or r <= ql) return;
			push(id, l, r);
			if(ql <= l and r <= qr){
				nodes[id].flag = true;
				return;
			}
			int mid = (l+r)>>1;
			modify(ql, qr, l, mid, lc(id));
			modify(ql, qr, mid, r, rc(id));
			pull(id, l, r);
		}
	public:
		void build(int n_){
			n = n_;
			build(0, n, 0);
		}
		int query(int l, int r){
			// 0-base [l, r)
			return query(l, r, 0, n, 0);
		}
		void modify(int l, int r){
			modify(l, r, 0, n, 0);
		}
} seg;

struct node{
	int ln, rn, val, len, l, r;
	node(){}
	node(int x, int a, int b): ln(-1), rn(-1), \
			val(x), len(1), l(a), r(b){}
	friend ostream& operator<<(ostream& ss, const node& x){
		ss << PII(x.val, x.len) << " @ " << PII(x.l, x.r) << " - " << PII(x.ln, x.rn);
		return ss;
	}
} nodes[MEM];
inline int new_node(int x, int l, int r){
	static int mem_ = 0;
	assert(mem_ < MEM);
	nodes[mem_] = node(x, l, r);
	return mem_++;
}

class cmp{
	public:
		bool operator()(int a, int b){
			if(nodes[a].len == nodes[b].len){
				return nodes[a].l > nodes[b].l;
			}
			return nodes[a].len < nodes[b].len;
		}
};

int main(int argc, char* argv[]){
	if(argc>1 and string(argv[1])=="-D") debug=1;
	if(!debug){ios_base::sync_with_stdio(0);cin.tie(0);}
	priority_queue<int,vector<int>,cmp> pq;
	int n, pre = -1; cin>>n;
	for(int i=0;i<n;i++){
		int x; cin>>x;
		if(pre>=0 and nodes[pre].val==x){
			nodes[pre].len++;
			nodes[pre].r++;
		}else{
			int nxt = new_node(x, i, i);
			if(pre >= 0) nodes[pre].rn = nxt;
			nodes[nxt].ln = pre;
			if(pre >= 0){
				pq.push(pre);
				// DEBUG("> push ", nodes[pre], "\n");
			}
			pre = nxt;
		}
	}
	if(pre >= 0){
		pq.push(pre);
		// DEBUG("> push ", nodes[pre], "\n");
	}
	seg.build(n);
	int ans = 0;
	while(!pq.empty()){
		auto tp = pq.top(); pq.pop();
		if(seg.query(nodes[tp].l, nodes[tp].r+1)==0) continue;
		// DEBUG("\n");
		// DEBUG("> pop ", nodes[tp], "\n");
		seg.modify(nodes[tp].l, nodes[tp].r+1);
		if(nodes[tp].ln>=0) nodes[nodes[tp].ln].rn = nodes[tp].rn;
		if(nodes[tp].rn>=0) nodes[nodes[tp].rn].ln = nodes[tp].ln;
		if(nodes[tp].ln >= 0 and nodes[tp].rn >= 0 and \
			nodes[nodes[tp].ln].val==nodes[nodes[tp].rn].val){
			int lid = nodes[tp].ln, rid = nodes[tp].rn;
			// DUMP(nodes[rid]);
			int cur = new_node(nodes[lid].val, nodes[lid].l, nodes[rid].r);
			nodes[cur].len = nodes[lid].len+nodes[rid].len;
			nodes[cur].ln = nodes[lid].ln;
			nodes[cur].rn = nodes[rid].rn;
			if(nodes[lid].ln >= 0) nodes[nodes[lid].ln].rn = cur;
			if(nodes[rid].rn >= 0) nodes[nodes[rid].rn].ln = cur;
			pq.push(cur);
			// DEBUG("> push ", nodes[cur], "\n");
		}
		ans++;
	}
	cout << ans << '\n';
	return 0;
}