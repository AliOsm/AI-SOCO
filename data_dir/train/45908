#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#include <bits/stdc++.h>
#define all(c) c.begin(),c.end()
#define ll long long
#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())
#define mod 1000000009
#define PI 3.1415926536
#define pll pair<ll, ll>
using namespace std;

typedef unsigned long long ull;

bool is_prime(ll n) {
    for (ll i = 2; i * i <= n; ++i) {
            if (n % i == 0) {
                  return false;
            }
    }
    return true;
}

inline ll getPow(ll a,ll b) {
    ll res = 1ll,tp = a;
    while (b){
       if (b&1ll) {
           res *= tp;
       }
       tp *= tp;
       res %= 8;
       tp %= 8;
       b >>= 1ll;
    }
    return res;
}
ll vec_mult(ll x1, ll y1, ll x2, ll y2, ll x3, ll y3) { return abs((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1));}
void ok() { puts("YES"); exit(0);}
void no() { puts("NO"); exit(0);}
inline ll nxt() {
    ll x;
    cin >> x;
    return x;
}
// please, accepted!

int main()
{

    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    ll n = nxt() * 2, m = nxt();
    vector<pll> mas(n);
    set<pll> buf;
    for(int i = 0; i < n; i++) {
           mas[i] = {nxt(), i};
           buf.insert(mas[i]);
    }
    vector<vector<ll>> g(n);
    set<pll> buf2;
    for(int j = 0; j < m; j++) {
           ll t1 = nxt() - 1, t2 = nxt() - 1;
           g[t1].push_back(t2);
           g[t2].push_back(t1);
           pll t = mas[t1];
           buf2.insert(t);
           t = mas[t2];
           buf2.insert(t);
    }
    bool flag = 0;
    bool flag1 = 0;
    ll ind = -1;
    ll tt = nxt();
    if(tt == 1)
    for(int i = 0; i < n; i += 2) {
           if(flag) {
                ll value = mas[ind].first;
                cout << ind + 1 << endl;
                cout.flush();
                pll t = {value, ind};
                buf.erase(buf.find(t));
                flag = 0;
           }
           else {
                if(buf2.size()) {
                      pll t = *buf2.rbegin();
                      cout << t.second + 1 << endl;
                      cout.flush();
                      buf.erase(buf.find(t));
                      buf2.erase(buf2.find(t));
                      pll temp = mas[g[t.second][0]];
                      buf2.erase(buf2.find(temp));
                      if(g[t.second].size()) {
                          flag1 = 1;
                      }

                }
                else {
                    pll t = *buf.rbegin();
                    cout << t.second + 1 << endl;
                    cout.flush();
                    buf.erase(buf.find(t));
                }

           }

           ll t = nxt() - 1;
           if(g[t].size() && !flag1) {
                 ll b = g[t][0];
                 flag = 1;
                 ind = b;
           }
           else if(flag1) {
                flag1 = 0;
           }
           ll value = mas[t].first;
           pll tmp = {value, t};
           buf.erase(buf.find(tmp));

    }
    if(tt == 2)
    for(int i = 0; i < n; i += 2) {
           ll t = nxt() - 1;
           if(g[t].size() && !flag1) {
                 flag = 1;
                 ind = g[t][0];
                 pll pr = mas[t];
                 buf2.erase(buf2.find(pr));
           }
           else if(flag1) {
                flag1 = 0;
           }
           ll value = mas[t].first;
           pll tmp = {value, t};
           buf.erase(buf.find(tmp));

           if(flag) {
                ll value = mas[ind].first;
                cout << ind + 1 << endl;
                cout.flush();
                pll t = {value, ind};
                buf.erase(buf.find(t));
                buf2.erase(buf2.find(t));
                flag = 0;
           }
           else {
                if(buf2.size()) {
                      pll t = *buf2.rbegin();
                      cout << t.second + 1 << endl;
                      cout.flush();
                      buf.erase(buf.find(t));
                      buf2.erase(buf2.find(t));
                      pll temp = mas[g[t.second][0]];
                      buf2.erase(buf2.find(temp));
                      if(g[t.second].size()) {
                          flag1 = 1;
                      }

                }
                else {
                    pll t = *buf.rbegin();
                    cout << t.second + 1 << endl;
                    cout.flush();
                    buf.erase(buf.find(t));
                }

           }


    }
    return 0;
}
