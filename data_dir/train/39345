#include<bits/stdc++.h>
#define int long long int
#define ld long double
#define getFaster ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)
#define rep(i,init,n) for(int i=init;i<n;i++)
#define rev(i,n,init) for(int i=n;i>=init;i--)
#define MAXN 200005
#define MOD2 998244353
#define MOD1 1e9+7
#define f first
#define s second
#define endl '\n'
#define pii pair<int,int>
#define piii pair<pii,int>
#define precise(i) cout<<fixed<<setprecision(i)
using namespace std;
const long double PI = atan(1.0)*4;
const int64_t INF=1000000000000000003;
const int32_t LOG=21;
const int MOD=MOD2;

int fact[100];
int inv[100];

int power(int x,int y)
{
        if(y==0)return 1;
        int temp=power(x,y/2);
        temp=(temp*temp)%MOD;
        if(y&1)temp=(temp*x)%MOD;
        return temp;
}

void init()
{
      fact[0]=1;
      rep(i,1,100)
      {
            fact[i]=(fact[i-1]*i)%MOD;
            inv[i]=power(fact[i],MOD-2);
      }
}

vector<int> primes;

int solve(int x)
{
      int cnt=0;
      vector<int> vals;
      rep(i,0,primes.size())
      {
            int t=primes[i];
            if(x%t==0)
            {
                  
                  int tot=0;
                  while(x%t==0)
                  {
                      tot++;
                      x/=t;
                  }
                  cnt+=tot;
                  vals.push_back(tot);      
            }      
      }


      int ans=fact[cnt];
      for(auto it:vals)
      {
            ans=(ans*inv[it])%MOD;
      }

      return ans;      
}

int32_t main()
{ 
      getFaster;
      int tests=1;
      init();
      //cin>>tests;
      rep(ii,0,tests)
      {
           int n;
           cin>>n;
           for(int i=2;i*i<=n;i++)
           {
                  if(n%i==0)
                  {
                        while(n%i==0)
                        {
                             n/=i; 
                        }

                        primes.push_back(i);      
                  }      
           }
           if(n!=1)
           primes.push_back(n); 
           

           int q;
           cin>>q;
           rep(i,0,q)
           {
              int a,b;
              cin>>a>>b;
              int temp=__gcd(a,b);
              a/=temp,b/=temp;
              int ans=(solve(a)*solve(b))%MOD;
              cout<<ans<<endl;
           } 
      }

      return 0;                         
}

/*
 TIPS(FOR ME):
 1.) Check for corner cases (like 0 is exception case)
 2.) Check for global memory sizes,memory refreshments and its complexity 
 3.) Check for sorting criteria (if used 1-based indexing)
 4.) Check for numbers overflow (while multiplying and doing MOD)
 5.) Check for typecasting issues like int to float( while dividing numbers)
*/
