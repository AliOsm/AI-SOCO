#include <bits/stdc++.h>
using namespace std;

const int N = 5e5+5;

bool inside[N],isGood[N];

int a[N],s[N],lim[N],cc[N];
void solve() {
    int m,k,n,s;
    scanf("%d %d %d %d",&m,&k,&n,&s);
    for(int i=1;i<=m;++i) {
        scanf("%d ",&a[i]);
    }
    int sz = 0;
    for(int i=0;i<s;++i) {
        int x;
        scanf("%d",&x);
        if(!inside[x]) {
            inside[x] = true;
            ++sz;
        }
        ++lim[x];
    }
    int cursz = 0,p = 0;
    int ind = -1;
    for(int i=1;i<=m;++i) {
        while(p+1<=m&& cursz<sz) {
            int x = a[p+1];
            if(inside[x]) {
                ++cc[x];
                if(cc[x]==lim[x]) {
                    ++cursz;
                }
            }
            ++p;
        }
        
        if(sz==cursz) {
            int len = p - i + 1;
            int need = max(0, k - len);
            int np = p + need + 1;
            int Left = i-1, Right = m - np + 1;
            int seg = (int)(Left/k) + (int)Right/k;
            if(seg >= n-1) {
                Left=Left - Left%k;
                Right = Right - Right%k;
                ind = i;
                for(int j= 1;j<=m && Left>0;++j,--Left){
                    isGood[j] = true;
                }
                for(int j = np;j<=m && Right>0 ;++j,--Right) {
                    isGood[j] = true;
                }
                break;
            }
        }
        int x = a[i];
        if(inside[x]) {
            if(cc[x]==lim[x]) {
                --cursz;
            }
            --cc[x];
        }
    }
    if(ind==-1) {
        cout<<-1<<endl;
    } else {
        memset(cc,0,sizeof(cc));
        cursz = 0;
        int rem = 0;
        for(int j = ind;j<=m;++j) {
            int x = a[j];
            if(inside[x] && cc[x]<lim[x]) {
                ++cc[x];
                isGood[j] = true;
                if(cc[x]==lim[x]) {
                    ++cursz;
                }
            }
            if(!isGood[j] && rem < k - s) {
                isGood[j] = true;
                ++rem;
            }
            if( cursz==sz&& rem == k-s ) {
                break;
            }
        }
        int ret = 0;
        for(int i=1;i<=m;++i) {
            if(!isGood[i]) {
                ++ret;
            }
        }
        printf("%d\n",ret);
        for(int i=1;i<=m;++i) {
            if(!isGood[i]) {
                printf("%d ",i);
            }
        }
    }
}
int main() {
    solve();
    return 0;
}