#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<int, int> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	int t;
	cin >> t;
	
	while(t--){
		
		ll n;
		cin >> n;
		
		vector<pair<ll, ll>> primes;
		
		for(ll i = 2; i * i <= n; i++){
			int cnt = 0;
			while(n % i == 0){
				n /= i;
				cnt++;
			}
			
			if(cnt)
				primes.push_back({i, cnt});
		}
		
		if(n > 1)
			primes.push_back({n, 1});
		
		
		
		if(primes.size() == 1){
			if(primes[0].second < 6){
				cout << "NO" << endl;
				continue;
			}
			cout << "YES" << endl;
			ll rem = primes[0].second - 3;
			ll x = 1;
			while(rem--)
				x *= primes[0].first;
			cout << primes[0].first << " " << primes[0].first * primes[0].first << " " << x << endl;
			continue;
		}
		
		if(primes.size() == 2){
			ll x = primes[0].first;
			ll y = primes[1].first;
			ll z = 1;
			
			for(int i = 0; i < 2; i++)
				for(int j = 1; j < primes[i].second; j++)
					z *= primes[i].first;
			
			if(z >= 2 && z != x && z != y){
				cout << "YES" << endl;
				cout << x << " " << y << " " << z << endl;
			}
			else{
				cout << "NO" << endl;
			}
			continue;
		}
		
		cout << "YES" << endl;
		
		ll z = 1, x = 1, y = 1;
		for(int i = 2; i < primes.size(); i++)
			for(int j = 0; j < primes[i].second; j++)
				z *= primes[i].first;
		
		for(int j = 0; j < primes[0].second; j++)
			x *= primes[0].first;
		for(int j = 0; j < primes[1].second; j++)
			y *= primes[1].first;
		
		cout << x << " " << y << " " << z << endl;
	}

	return 0;
}
