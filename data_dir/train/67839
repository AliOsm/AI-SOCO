#include<bits/stdc++.h>
using namespace std;
#define ll  long long
#define eps 1e18

int main(){
	ios::sync_with_stdio(0);
	int p, y; cin>>p>>y;
	int i=0;
	while(i<1000 && y>p){
		bool flag=1;
		for(int j=2; j<=min(p, (int)sqrt(y)); j++){
			if (y%j==0){
				flag=0; break;
			}
		}
		if (flag) {
			cout<<y<<'\n';
			return 0;
		}
		y--; i++;
	}
	cout<<-1;
}




/*
map<pair<string, int>, vector<pair<string, int> > >graph;
map<string, pair<int, int> >answer;
map<string, bool>stored;
string polycarp,sub,project;int version,subv, verse;

map<pair<string, int>, bool>selected;
map<pair<string, int>, pair<string, int> >mom;
map<pair<string, int>, int>len;


void bfs(){
	queue<pair<string, int> >Q;
	for(auto a: graph[make_pair(polycarp, version)])Q.push(a), mom[a]=make_pair(polycarp, version), len[a]=1;
	selected[make_pair(polycarp, version)]=true;
	while(!Q.empty()){
		pair<string, int>node=Q.front();
		Q.pop();
		if (selected[mom[node]]) {
			if (stored[node.first]==true){
				if (answer[node.first].second>len[node]) selected[make_pair(node.first, answer[node.first].first)]=false, answer[node.first].second=len[node], answer[node.first].first=node.second, selected[node]=true;
				if (answer[node.first].second==len[node]){
					if (answer[node.first].first<node.second)  selected[make_pair(node.first, answer[node.first].first)]=false, answer[node.first].first=node.second, selected[node]=true;
				}
			}
			else{
				stored[node.first]=true;
				answer[node.first].first=node.second;
				answer[node.first].second=len[node];
				selected[node]=true;
			}
		}
		for(auto a: graph[node])mom[a]=node,  Q.push(a), len[a]=(len[a]==0?len[node]+1:min(len[node]+1, len[a]));

	}
	
}

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	int n; cin>>n;
	
	
	cin>>polycarp>>version;
	int connect; cin>>connect;
	for(int i=0; i<connect; i++){
		cin>>project>>verse;
		graph[make_pair(polycarp, version)].push_back(make_pair(project, verse));
	}
	
	for(int i=0; i<n-1; i++){
		cin>>sub>>subv>>connect;
		for(int j=0; j<connect; j++){
			cin>>project>>verse;
			graph[make_pair(sub, subv)].push_back(make_pair(project, verse));
		}
	}
	bfs();
	answer.erase(polycarp);
	cout<<answer.size()<<'\n';
	for(auto a: answer) cout<<a.first<<' '<<a.second.first<<'\n';
}


/*

9
codehorses 5
3
webfrmk 6
mashadb 1
mashadb 2
 
commons 2
0
 
mashadb 3
0
 
webfrmk 6
2
mashadb 3
commons 2
 
extra 4
1
extra 5
 
extra 3
0
 
extra 1
0
 
mashad 1
1
extra 5
 
mashadb 2
2
extra 1
extra 4

*/
