	// KALAM
	# include<bits/stdc++.h>
	using namespace std;
	
	const int N = 300000 + 77 , SQ = 547;
	
	int n , q , a[N] , Ql[N] , Qr[N] , Qk[N] , P[N] , A[N] , T[N];
	mt19937 rng;
	bool CMP(int x , int y){
		if(Ql[x] / SQ < Ql[y] / SQ){
			return 0;
		}
		if(Ql[x] / SQ > Ql[y] / SQ){
			return 1;
		}
		return Qr[x] < Qr[y];
	}
	int Random(int l , int r){
		return l + (rng() % (r - l + 1));
	}
	int main(){
		ios::sync_with_stdio(0);cin.tie(0);
		rng.seed(time(0));
		cin >> n >> q;
		iota(P + 1 , P + 1 + q , 1);
		for(int i = 1;i <= n;i ++){
			cin >> a[i];
		} 
		for(int i = 1;i <= q;i ++){
			cin >> Ql[i] >> Qr[i] >> Qk[i];
		}
		sort(P + 1 , P + 1 + q , CMP);
		int l = 1 , r = 1;
		T[a[1]] ++;
		for(int i = 1;i <= q;i ++){
			int id = P[i];
			int ql = Ql[id] , qr = Qr[id] , k = Qk[id];
			while(ql < l){
				l --;
				T[a[l]] ++;
			}
			while(r < qr){
				r ++;
				T[a[r]] ++;
			}
			while(l < ql){
				T[a[l]] --;
				l ++;
			}
			while(qr < r){
				T[a[r]] --;
				r --;
			}
			A[id] = N - 1;
			for(int j = 1;j < 150;j ++){
				int rnd = a[Random(l , r)];
				if(T[rnd] > (r - l + 1) / k){
					A[id] = min(A[id] , rnd);
				}
			}
			if(A[id] > n){
				A[id] = - 1;
			}
		}
		for(int i = 1;i <= q;i ++){
			cout << A[i] << '\n';
		}
		return 0;
	}
