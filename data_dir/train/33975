#include <cstdio>
#include <vector>
#include <cstring>
#include <algorithm>
#include <string>
#include <map>
#include <iostream>
#include <cmath>
#include <stack>
#include <set>
#include <map>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;

const int MAXN=1500000;

map<pair<int,int>,int  > concat;
vector<int> myRaise;
int top=0;

int allocateNewType()
{
	myRaise.push_back(-1);
	return top++;
}

int getRaise(int type)
{
	if(myRaise[type]==-1)
	{
		int res=allocateNewType();
		myRaise[type]=res;
	}
	return myRaise[type];
}

int getConcat(int t1, int t2)
{
	if(t1==-1 || t2==-1) return max(t1,t2);
	if(!concat.count(make_pair(t1,t2)))
		concat[make_pair(t1,t2)]=allocateNewType();
	return concat[make_pair(t1,t2)];
}

char str[MAXN];
int to[MAXN];
int type[MAXN];
int used[MAXN];

vector<int> arr;
vector<int> maxlen;

vector<int> p, pn, cnt;
vector<vector<int> > c;

int cmp1(int a, int b)
{
	return arr[a]<arr[b];
}

int K;

int cmpk(int a, int b)
{
	int mid1=(a+(1<<K))%arr.size();
	int mid2=(b+(1<<K))%arr.size();
	if(c[K][a]!=c[K][b])
		return c[K][a]<c[K][b];
	return c[K][mid1]<c[K][mid2];
}

int lcp(int a, int b)
{
	int res=0;
	for(int i=K-1;i>=0;i--)
		if(c[i][a]==c[i][b])
		{
			res+=(1<<i);
			a+=(1<<i);
			b+=(1<<i);
		}
	return res;
}

void suffarray()
{
	int n=arr.size();
	if(n==0) return;
	int kk=0;
	while((1<<kk)<n) kk++;
	c.resize(kk+1,vector<int> (n));
	p.resize(n);
	pn.resize(n);
	cnt.resize(n);

	REP(i,n)
	{
		p[i]=i;
	}
	sort(p.begin(), p.end(),cmp1);
	c[0][p[0]]=0;
	int classes=0;
	for(int i=1;i<n;i++)
	{
		if(cmp1(p[i-1], p[i]))
			classes++;
		c[0][p[i]]=classes;
	}

	for(K=0;K<kk;K++)
	{
		for(int i=0;i<n;i++)
		{
			pn[i]=p[i]-(1<<K);
			if(pn[i]<0)
				pn[i]+=n;
		}

		for(int i=0;i<n;i++)
		{
			cnt[c[K][i]]++;
		}
		for(int i=1;i<=classes;i++)
			cnt[i]+=cnt[i-1];
		for(int i=n-1;i>=0;i--)
			p[--cnt[c[K][pn[i]]]]=pn[i];
		for(int i=0;i<=classes;i++)
			cnt[i]=0;

		c[K+1][p[0]]=0;
		classes=0;
		for(int i=1;i<n;i++)
		{
			if(cmpk(p[i-1],p[i]))
				classes++;
			c[K+1][p[i]]=classes;
		}
	}
}

int main()
{
	int n;
	scanf("%d",&n);
	scanf("%s",str);
	myRaise.reserve(n+10);
	vector<pair<int, int> > segment;
	segment.reserve(n/2);
	stack<int> st;
	memset(to,-1,sizeof(to));
	for(int i=0;i<n;i++)
	{
		if(str[i]=='(')
			st.push(i);
		else if(str[i]==')')
		{
			if(!st.empty())
			{
				int pr=st.top(); st.pop();
				to[pr]=i;
//				to[i]=pr;
				segment.push_back(make_pair(i-pr,pr));
			}
		}
	}
	int noneType=allocateNewType();
	sort(segment.begin(), segment.end());
	for(int i=0;i<segment.size();i++)
	{
		int l=segment[i].second;
		int r=segment[i].second+segment[i].first;
		l++;
		r--;
		int curtype=-1;
		if(l<=r)
		{
			while(l<=r)
			{
				curtype=getConcat(curtype, type[l]);
				l=to[l]+1;
			}
		}
		else
			curtype=noneType;
		curtype=getRaise(curtype);
		type[segment[i].second]=curtype;
	}
	for(int i=0;i<n;i++)
	{
		if(to[i]!=-1 && !used[i])
		{
			int cur=i;
			while(to[cur]!=-1)
			{
				used[cur]=true;
				arr.push_back(type[cur]);
				cur=to[cur]+1;
			}
			arr.push_back(-i-1);
		}
	}
	maxlen.resize(arr.size(),0);
	for(int i=arr.size()-1;i>=0;i--)
		if(arr[i]<0)
			maxlen[i]=0;
		else
			maxlen[i]=maxlen[i+1]+1;
	suffarray();
	ll res=0;
	for(int i=0;i<arr.size();i++)
		res+=maxlen[i];
	for(int i=1;i<arr.size();i++)
		res-=lcp(p[i-1], p[i]);
	printf("%lld\n",res);
	return 0;
}
