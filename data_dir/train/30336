#pragma comment(linker, "/STACK:64000000")
#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

#define f first
#define s second
#define pb push_back
#define mp make_pair
#define ll long long
#define pii pair < int, int >
#define pll pair < long long, long long>
#define ull unsigned long long
#define y1 stupid_cmath
#define left stupid_left
#define right stupid_right
#define vi vector <int>
#define sz(a) (int)a.size()
#define forit(it, s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it++)
#define all(a) a.begin(), a.end()
#define sqr(x) ((x) * (x))

const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);

int n, k;
vector<pii> g[100];
int dp[2][88][88][88];
int gr[100][100];

int calc(int type, int l, int r, int k) {
    if (k == 0) return 0;
    int &res = dp[type][l][r][k];
    if (res != -1) return res;
    res = inf;
    int v;
    if (type == 0) v = l;
    else v = r;
    for (int to = 0; to < n; to++) {
        int len = gr[v][to];
        if (to < l || to > r || len == inf) continue;
        if (type == 0) {
            res = min(res, len + calc(0, to, r, k - 1));
            res = min(res, len + calc(1, l + 1, to, k - 1));
        } else {
            res = min(res, len + calc(1, l, to, k - 1));
            res = min(res, len + calc(0, to, r - 1, k - 1));
        }
    }
    return res;
}

int main(){

    memset(dp, -1, sizeof dp);

    scanf("%d%d", &n, &k);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) gr[i][j] = inf;
    }

    int m;
    scanf("%d", &m);
    while (m--) {
        int x, y, len;
        scanf("%d%d%d", &x, &y, &len);
        x--; y--;
        if (x == y) continue;
        gr[x][y] = min(gr[x][y], len);
        g[x].pb(mp(y, len));
    }

    int ans = inf;
    for (int i = 0; i < n; i++) {
        ans = min(ans, calc(0, i, n - 1, k - 1));
        ans = min(ans, calc(1, 0, i, k - 1));
    }

    if (ans == inf) ans = -1;

    printf("%d\n", ans);

    return 0;
}
