#include <bits/stdc++.h>
typedef long long int lli;
using namespace std;

#define vi vector<int>
class UnionFind 
{ 
// OOP style
private: 

public:
	vi p, rank; // remember: vi is vector<int>
	UnionFind(int N) 
	{ 
		rank.assign(N, 1);
		p.assign(N, 0); 
		for (int i = 0; i < N; i++) p[i] = i; 
	}
	
	void unionSet(int i, int j) 
	{
		if (!isSameSet(i, j)) 
		{ // if from different set
			int x = findSet(i), y = findSet(j);
			if (rank[x] > rank[y]) swap(x,y);		// y must be bigger than of x
			p[x] = y;
			rank[y]+=rank[x];
		}
	}
	
	int findSet(int i) { return (p[i] == i) ? i : (p[i] = findSet(p[i])); }
	bool isSameSet(int i, int j) { return findSet(i) == findSet(j); }
};

UnionFind u( 1123456 );
int a[1123456];
vector<int> v[1123456];
int k[1123456];

int main()
{
	int n , m; 
	scanf( "%d %d" , &n , &m );
	
	for ( int i=1 ; i<=n ; i++ )
	{
		scanf( "%d" , &a[i] );
	}
	
	for ( int i=1 ; i<=m ; i++ )
	{
		int x , y;
		scanf( "%d %d" , &x , &y );
		u.unionSet( x , y );
	}
	
	for ( int i=1 ; i<=n ; i++ )
	{
		int r = u.findSet( i );
		v[r].push_back( a[i] );
	}
	
	for ( int i=1 ; i<=n ; i++ )
	{
		// cout<<i<<" : ";
		sort( v[i].begin() , v[i].end() , std::greater<int>() );
	
		// for ( int j=0 ; j<v[i].size(); j++ )
			// cout<<v[i][j]<<" ";
		// cout<<"\n";
	}
	
	for ( int i=1 ; i<=n ; i++ )
	{
		int r = u.findSet( i );
		printf( "%d " , v[r][k[r]++] ); 
	}
	printf( "\n" );
	
	return 0;
}