#include <functional>
#include <algorithm>
#include <iostream>
#include <memory.h>
#include <sstream>
#include <assert.h>
#include <fstream>
#include <iomanip>
#include <bitset>
#include <string>
#include <cstdio>
#include <complex>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <ctime>
#include <set>
#include <map>
#include <map>

using namespace std;

const int N = 2000002;

struct state
{
	int next[26];
	int leaf;
	state()
	{
		for (int i = 0; i < 26; ++i)
			next[i] = -1;
		leaf = false;
	}
};

state t[N];
int sz = 1;
int n;
string w[N / 10 + 1];

void add(string &s)
{
	int v = 0;
	for (int i = 0; i < s.size(); ++i)
	{
		if (t[v].next[s[i] - 'a'] == -1)
			t[v].next[s[i] - 'a'] = sz++;
		v = t[v].next[s[i] - 'a'];
	}
	t[v].leaf = true;
}

bool find(string &s)
{
	int v = 0;
	for (int i = 0; i < s.size(); ++i)
	{
		if (t[v].next[s[i] - 'a'] == -1)
			return false;
		v = t[v].next[s[i] - 'a'];
	}
	if (t[v].leaf == false)
		return false;
	else
		return true;
}

int main()
{
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif	
	scanf("%d\n", &n);
	for (int i = 0; i < n; ++i)
		cin >> w[i];
	for (int i = n - 1; i >= 0; --i)
	{
		if (find(w[i]) == false)
		{
			cout << w[i] << "\n";
			add(w[i]);
		}
	}
    return 0;
}