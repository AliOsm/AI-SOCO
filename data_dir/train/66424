/* winners never quit and quitters never win.
      #swap                                 */
      
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
using namespace std;
using namespace __gnu_pbds;
#pragma GCC optimize ("-O3")
using ll = long long;
using ld = long double;
const ll mod = 1000000007;
const ll inf = 1000000000000000000;
const ll rk = 256;
const ld PI = 3.141592653589793;

typedef tree<
int,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

#define pb push_back
#define mp make_pair
#define vc vector
#define fs first
#define sec second
#define pq priority_queue
#define lb lower_bound
#define ub upper_bound
#define pll pair<ll,ll> 
#define pls pair<ll,string>
#define psl pair<string,ll>
#define plc pair<ll,char>
#define pcl pair<char,ll>
#define pss pair<string,string>
#define all(x) (x).begin(), (x).end()
#define tol(s) transform(s.begin(),s.end(),s.begin(),::tolower);
#define tou(s) transform(s.begin(),s.end(),s.begin(),::toupper);
#define printclock cerr<<"Time : "<<1000*(ld)clock()/(ld)CLOCKS_PER_SEC<<"ms\n";

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }

void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cerr << *it << " = " << a << endl;
	err(++it, args...);
}

#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define T ll t=0;cin>>t;for(ll test=0;test<t;test++)

ll nxt() {
    ll TemporaryVariable;
    cin >> TemporaryVariable;
    return TemporaryVariable;
}

ll dp[2005][2005];
ll fact[2005];

ll solve(ll n,ll k)
{
    if(k==0)
        return fact[n];
    if(k==1)
        return (n*fact[n])%mod;
    if(dp[n][k]!=-1)
        return dp[n][k];
    ll ans=(n*solve(n,k-1))%mod;
    ans=(ans+((k-1)*solve(n+1,k-2))%mod)%mod;
    return dp[n][k]=ans;
}

 
int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
	//isprime();
	//coeff();
	/*freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);*/
    ll n=nxt();
    vc<ll> v(n);
    generate(all(v),nxt);
    ll k=0;
    bool done[n]={false};
    ll tot=0;
    rep(a,0,n)
    {
        if(v[a]!=-1)
            v[a]--;
        if(v[a]==-1)
            tot++;
        else
        {
            done[v[a]]=true;
        }
    }
    rep(a,0,n)
    {
        if(!done[a] and v[a]==-1)
        {
            k++;
        }
    }
    if(tot==0)
    {
        rep(a,0,n)
            if(v[a]==a)
            {
                cout<<0<<endl;
                exit(0);
            }
        cout<<1<<endl;
        exit(0);
    }
    n=tot-k;
    fact[0]=1;
    rep(a,1,2005)
        fact[a]=(fact[a-1]*a)%mod;
    rep(a,0,2005)
        rep(b,0,2005)
            dp[a][b]=-1;
    cout<<solve(n,k)<<endl;
	printclock;
	return 0;
}