#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include <iostream>
#include <cmath>
#include <iomanip>
#include <string>
#include <cstring>
#include <cstdio>
#include <math.h>
#include <algorithm>
#include <stdio.h>
#include <climits>
#include <stack>
#include <queue>
#include <vector>
#include <set>
#include <sstream>
#include <map>
#include <ctime>
#include <cstdlib>
#include <list>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include<unordered_map>
using namespace std;

typedef unsigned long long ull;
typedef long long ll;
int dx8[] = { 0, 0, 1, -1, 1, -1, 1, -1 };
int dy8[] = { -1, 1, 0, 0, -1, -1, 1, 1 };
int dy[] = { 1, -1, 0, 0 };
int dx[] = { 0, 0, 1, -1 };
int X[6] = { 0, 0, 0, -1, 0, 1 };
int Y[6] = { 0, 0, -1, 0, 1, 0 };
int Z[6] = { 1, -1, 0, 0, 0, 0 };
// start + (end - start) / 2;
#define OO 1e8
int n;

vector<int>p, out;
bool isprime[1111];

int power(int b, int p) {
    if (p == 0)return 1;
    int sq = power(b, p / 2);
    sq *= sq;
    if (p % 2 == 1)sq *= b;
    return sq;
}

void sieve() {
    memset(isprime, -1, sizeof isprime);
    isprime[0] = isprime[1] = 0;
    for (int i = 2; i < 1111;i++) {
        if (isprime[i]) {
            p.push_back(i);
            for (int j = i * i; j < 1111;j += i) {
                isprime[j] = 0;
            }
        }
    }
}

int main() {
    scanf("%d", &n);
    sieve();
    for (int i = 0; p[i] <= n;i++) {
        int j = 1, val = 0;
        while ((val = power(p[i], j)) <= n) {
            out.push_back(val);
            j++;
        }
    }
    cout << out.size() << "\n";
    for (int i = 0; i < out.size();i++) {
        cout << out[i] << " \n"[i + 1 == out.size()];
    }
}