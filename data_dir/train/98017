#pragma optimization_level 3
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include<bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll,ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node*, Node*>
#define uid uniform_int_distribution
#define FILE ifstream in("board.in");ofstream out("board.out");
#define fast cin.tie(0);cout.tie(0);cin.sync_with_stdio(0);cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); //uid<int> u1(5, 10); u1(rnd);

int a, G;
vec<int> cl, isb, o;
vec<uset<int>> l, big;

int main() {
    int k,z,hh; cin>>a>>k>>z>>hh;
    G = sqrt(a);
    cl = vec<int>(a);
    o = vec<int>(a);
    isb = vec<int>(a);
    l = vec<uset<int>> (a, uset<int>());
    big = vec<uset<int>> (a, uset<int>());
    for(; hh; hh--){
        int x; cin>>x;
        cl[x-1] = 1;
    }
    for(; k; k--){
        int x,y; cin>>x>>y; x--; y--;
        l[x].insert(y);
        l[y].insert(x);
    }
    for(int q=0; q<a; q++) isb[q] = l[q].size()>=G;
    for(int q=0; q<a; q++){
        for(int h : l[q]){
            if(isb[h]) big[q].insert(h);
            o[q]+=cl[h];
        }
    }
    for(; z; z--){
        char c; int x,y=-1; cin>>c>>x;
        if(c=='A' || c=='D') cin>>y;
        x--; y--;
        if(c=='O'){
            cl[x] = 1;
            for(int h : big[x]) o[h]++;
        }
        if(c=='F'){
            cl[x] = 0;
            for(int h : big[x]) o[h]--;
        }
        if(c=='A'){
            l[x].insert(y);
            l[y].insert(x);
            o[x]+=cl[y];
            o[y]+=cl[x];
            if(isb[x]) big[y].insert(x);
            if(isb[y]) big[x].insert(y);
        }
        if(c=='D'){
            l[x].erase(y);
            l[y].erase(x);
            o[x]-=cl[y];
            o[y]-=cl[x];
            big[x].erase(y);
            big[y].erase(x);
        }
        if(c=='C'){
            if(isb[x]) cout<<o[x]<<endl;
            else{
                int u = 0;
                for(int i : l[x]) u+=cl[i];
                cout<<u<<endl;
            }
        }
    }
}
