#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <unordered_map>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <locale>
#include <random>
#include <cassert>
#include <sstream>
using namespace std;
#define F first
#define S second
#define pb push_back
#define MP make_pair
#define ALL(x) begin(x),end(x)
#define SZ(x) ((int)(x).size())
typedef long long LL;
typedef double DB;
typedef long double LDB;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
const int INF = (int)1e9;
const int MXN = (int)5e5 + 7;
const int mod = (int)1e9 + 7;
int a[MXN*2];
PII st[MXN];
vector<int> edge[MXN];
int prt[20][MXN];
int dep[MXN];
void dfs(int u, int pa, int dpt) {
	prt[0][u] = pa;
	dep[u] = dpt;
	for (int x : edge[u]) {
		dfs(x, u, dpt + 1);
	}
}
int main() {
	int n, m; scanf("%d %d", &n, &m);
	for (int i = 1; i <= n; i++) {
		int l, r; scanf("%d %d", &l, &r);
		st[i] = {l, r};
		a[l*2]++;
		a[2*r+1]--;
	}
	for (int i = 1; i < MXN*2; i++) 
		a[i] += a[i-1];
	for (int i = 0; i < MXN*2; i++)
		if (a[i]) a[i] = 1;
	for (int i = 1; i < MXN*2; i++)
		a[i] += a[i-1];
	
	sort(st + 1, st + n + 1);
	vector<PII> seg;
	int cntp = 0;
	for (int i = 1; i <= n; i++) {
		int r = i;
		while (r + 1 <= n && st[i].F == st[r+1].F) r++;
		i = r;
		st[++cntp] = st[i];
	}
	n = cntp;
	for (int i = 1; i <= n; i++) {
		int r = i;
		int ll = st[i].S;
		seg.pb(st[i]);
		while (r + 1 <= n && st[r+1].F < ll) {
			r++;
			if (st[r].S > ll) {
				seg.pb(st[r]);
				ll = st[r].S;
			}
		}
		i = r;
	}
	for (int i = 0; i < SZ(seg); i++) {
		int nxt = lower_bound(ALL(seg), MP(seg[i].S+1, 0)) - seg.begin();
		nxt--;
		if (nxt == i) nxt = SZ(seg);
		edge[nxt].pb(i);
	}
	dfs(SZ(seg), SZ(seg), 1);
	seg.pb({INF, INF});
	for (int i = 1; i <= 19; i++)
		for (int j = 0; j <= SZ(seg); j++)
			prt[i][j] = prt[i-1][ prt[i-1][j] ];
	while (m--) {
		int l, r; scanf("%d %d", &l, &r);
		if (a[2*r] - a[2*l-1] != 2*r - 2*l + 1) { 
			puts("-1"); continue ; 
		}
		int p = lower_bound(ALL(seg), MP(l+1, 0)) - seg.begin();
		p--;
		int ans = 1;
		if (seg[p].S >= r) { puts("1"); continue ; }
		int cur = p;
		for (int i = 19; i >= 0; i--) {
			int pa = prt[i][cur];
			if (seg[pa].S >= r) continue ;
			ans += 1<<i;
			cur = pa;
		}
		printf("%d\n", ans+1);
	}
	return 0;
}
