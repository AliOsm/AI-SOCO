/*
    U FAIL U IMPROVE,
                     U SKIP U LOSE!!
                                    */
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long int lli;
lli M=1e9+9;   
#define INF 100000000
#define sqr(x) (x) * (x)
#define bip(n) __builtin_popcount(n)//no of ones bit in binary!!
#define bictz(n) __builtin_ctz(n)//no of trailing zeroes in binary!!
#define biclz(n) __builtin_clz(n)//no of leading zeroes in binary!!
#define bffs(n) __builtin_ffs(n)//index of first one bit!!
typedef pair<lli,lli> ll;
#define mem1(a,x) fill(&a[0], &a[0] + sizeof(a) / sizeof(a[0]), x)
#define mem2(a,x) fill(&a[0][0], &a[0][0] +sizeof(a)/sizeof(a[0][0]),x)
#define mem3(a,x) fill(&a[0][0][0], &a[0][0][0] +sizeof(a)/sizeof(a[0][0][0]),x)
#define fi1 ifstream fin("input.txt")
#define of1 ofstream fout("output.txt")
typedef tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update> ost;
lli n,k,m,t,q,z;
//unordered_map<pair<ll,lli>,lli> mp;
lli me(lli a,lli b,lli M)
{
    if(b==0)
    return 1;
    else if(b%2==0)
    return me((a*a)%M,b/2,M);
    else
    return (a%M*me((a*a)%M,(b-1)/2,M)%M)%M;
}
lli mI(lli a,lli m)
{
    return me(a,m-2,m);
}
vector<int> pf(string s) {
    int n = (int)s.length();
    vector<int> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j])
            j++;
        pi[i] = j;
    }
    return pi;
}
//lli vis[305][305];
//lli a[500005];
//lli good[5005][5005];
//string s;
map<lli,lli> vis;
//map<lli,lli> ml;
//vector<ll> v[2000005];
//lli mx=0;
lli ff=0;
unordered_map<lli,lli> mm,mm1,mm2;
struct edge
{
    lli x,y,a,b;
};
vector<edge> vv;
bool cmp(edge a1,edge b1)
{
    if(a1.a==b1.a)
    return a1.b>b1.b;
    return a1.a>b1.a;
}

vector<ll> v[100005];
set<lli> s;
map<lli,ll> mk;
void dfs(lli i,lli p,lli vv)
{
   int f=0;
   for(int j=0;j<v[i].size();j++)
   {
       if(v[i][j].second==0)
       f=1;
   }
   if(!f&&vv)
   s.insert(i);
   for(int j=0;j<v[i].size();j++)
   {
       if(vis[v[i][j].first]==0)
       {
           dfs(v[i][j].first,i,v[i][j].second);
       }
   }
}
lli mx=-1;
bool check(lli m)
{
    lli f=1;
    while(m>0)
    {
        lli d=m%10;
        m/=10;
        f=f*d;
    }
    if(mx<f)
    return true;
    else
    return false;
}
lli mi=1e18;
int main()
{
lli x;
cin>>n;
multiset<lli,greater<lli>> odd,even;
for(int i=1;i<=n;i++)
{
    cin>>x;
    if(x%2)
    odd.insert(x);
    else
    even.insert(x);
}
if(odd.size()>=even.size())
{
    int cnt=1;
    while(1)
    {
        if(cnt%2)
        {
            if(odd.size()>0)
            odd.erase(odd.begin());
            else
            break;
        }
        else
        {
            if(even.size()>0)
            even.erase(even.begin());
            else
            break;
        }
        cnt++;
    }
    lli s=0;
    for(auto &i:odd)
    s+=i;
    cout<<s;
}
else
{
    int cnt=1;
    while(1)
    {
        if(cnt%2)
        {
            if(even.size()>0)
            even.erase(even.begin());
            else
            break;
        }
        else
        {
            if(odd.size()>0)
            odd.erase(odd.begin());
            else
            break;
        }
        cnt++;
    }
    lli s=0;
    for(auto &i:even)
    s+=i;
    cout<<s;
}
}