#include <bits/stdc++.h>

using namespace std;

#define loop(i,n) for(int i=0; i<n; i++)
#define pii pair<int, int>

const int MXN = 3 * 1e5 + 5;
int n, k;
pair<pii, int> v[MXN];

struct COMP {
	bool operator() (pair<pii, int>& p1, pair<pii, int>& p2) {
		return p1.first.second > p2.first.second;
	}
};

struct REV_COMP {
	bool operator() (pair<pii, int>& p1, pair<pii, int>& p2) {
		return p1.first.second < p2.first.second;
	}
};

int main() {
	ios_base::sync_with_stdio(false);
	cin>>n>>k;
	loop(i, n) {
		int l, r;
		cin>>l>>r;
		v[i] = make_pair(make_pair(l, r), i);
	}
	sort(v, v + n);
	priority_queue<pair<pii, int>, vector<pair<pii, int> >, REV_COMP> pq1;
	priority_queue<pair<pii, int>, vector<pair<pii, int> >, COMP> pq2;
	int res = -1, res_ind = 0;
	loop(i, n) {
		if (pq2.size() < k) pq2.push(v[i]);
		else {
			pq1.push(v[i]);
			if(pq1.top().first.second > pq2.top().first.second) {
				pair<pii, int> p1 = pq1.top();
				pair<pii, int> p2 = pq2.top();
				pq1.pop();
				pq2.pop();
				pq2.push(p1);
				pq1.push(p2);
				
				if (pq2.top().first.second - v[i].first.first + 1 > res) {
					res = pq2.top().first.second - v[i].first.first + 1;
					res_ind = i;
				}
			}
		}
		if (i + 1 == k) {
			if (pq2.top().first.second - v[i].first.first + 1 > res) {
				res = pq2.top().first.second - v[i].first.first + 1;
				res_ind = i;
			}
		}
	}
	while (!pq1.empty()) pq1.pop();
	while (!pq2.empty()) pq2.pop();
	vector<int> vres;
	loop(i, n) {
		if (pq2.size() < k) pq2.push(v[i]);
		else {
			pq1.push(v[i]);
			if(pq1.top().first.second > pq2.top().first.second) {
				pair<pii, int> p1 = pq1.top();
				pair<pii, int> p2 = pq2.top();
				pq1.pop();
				pq2.pop();
				pq2.push(p1);
				pq1.push(p2);
				
				if (pq2.top().first.second - v[i].first.first + 1 > res) {
					res = pq2.top().first.second - v[i].first.first + 1;
					res_ind = i;
				}
			}
		}
		if (i + 1 == k) {
			if (pq2.top().first.second - v[i].first.first + 1 > res) {
				res = pq2.top().first.second - v[i].first.first + 1;
				res_ind = i;
			}
		}
		if (i == res_ind) {
			while (!pq2.empty()) {
				vres.push_back(pq2.top().second + 1);
				pq2.pop();
			}
			break;
		}
	}
	cout<<max(res, 0)<<endl;
	if (res == -1) loop(i, k) cout<<i + 1<<" ";
	else {
		sort(vres.begin(), vres.end());
		loop(i, vres.size()) cout<<vres[i]<<" ";
	}
	cout<<endl;
	return 0;
}