#include<bits/stdc++.h>
#define rep(i,start,lim) for(lld i=start;i<lim;i++)
#define repd(i,start,lim) for(lld i=start;i>=lim;i--)
#define f first
#define s second
#define pb push_back
#define mp make_pair
#define sz(a) (lld)((a).size())
#define all(c) (c).begin(),(c).end()             
typedef long double ldb;
typedef long long lld;
const lld MOD = 1e9+7;
const lld INF = 1011111111;
const lld LLINF = 1000111000111000111LL;
const ldb EPS = 1e-10;
const ldb PI = 3.14159265358979323;
using namespace std;
lld powm(lld base,lld exp,lld mod=MOD) {lld ans=1;while(exp){if(exp&1) ans=(ans*base)%mod;exp>>=1,base=(base*base)%mod;}return ans;}
#define endl '\n'
#define fre freopen("1.in","r",stdin); freopen("1.out","w",stdout);
const lld N = 2005;
//Max Flow
vector<lld> adj[N];
lld a[N],cap[N][N];
class prioritize{
    public:
        bool operator ()(pair<lld,lld>& p1,pair<lld,lld> &p2)
        {
            return p1.second<p2.second;
        }
};
struct maxFlow{
    lld path,result=0,source,sink,from[N],vis[N],curr,tmp;
    lld max_flow()
    {
        while(bfs()) 
        {
            path=INF;
            for(lld v=sink;v!=source;v=from[v]) path=min(path,cap[from[v]][v]);
            for(lld v=sink;v!=source;v=from[v]) cap[from[v]][v]-=path,cap[v][from[v]]+=path;
            result+=path;
        }
        return result; 
    }
    void addedge(lld a,lld b,lld capacity)
    {
        adj[a].pb(b),cap[a][b]=capacity;
        adj[b].pb(a);
    }
    bool bfs()
    {
        rep(i,0,N) vis[i]=0;
        priority_queue<pair<lld,lld> ,vector<pair<lld,lld> >,prioritize> q;
        q.push({source,0}),vis[source]=1,from[source]=-1;
        while(!q.empty()) 
        {
            curr=q.top().first,q.pop(),tmp=sz(adj[curr]);
            rep(i,0,tmp)
                if(!vis[adj[curr][i]] and cap[curr][adj[curr][i]])
                {
                    q.push({adj[curr][i],cap[curr][adj[curr][i]]}),from[adj[curr][i]]=curr,vis[adj[curr][i]]=1;
                    if(adj[curr][i]==sink) return true;
                }
        }
        return false;
    }
} flow;
int32_t main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    lld n,m,u,v,w,tot = 0;
    cin>>n>>m;
    flow.source = 0, flow.sink = n + m + 1;
    rep(i,1,n+1) {
        cin>>u;
        flow.addedge(0,i,u);
    }
    rep(i,1,m+1) {
        cin>>u>>v>>w;
        tot += w;
        flow.addedge(u,i+n,INF);
        flow.addedge(v,i+n,INF);
        flow.addedge(i+n,n+m+1,w);
    }
    cout<<(tot - flow.max_flow());
    return 0;
}