#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
 
#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2
 
#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound
 
using namespace std;
// using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;
 
// template <class T1, class cmp = less <T1>> using Tree = tree <T1, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
// template <class T1, class T2> using um = unordered_map <T1, T2>;
template <class T> using us = unordered_set <T>;
template <class T> using vec = vector <T>;
 
const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <ll>::max() >> 1;
const ll N = 4e5 + 1;
ll n, m, k, ans;

ll used[N];

pii edge[N];

struct Edge {
    ll v, w, t;
};

struct Graph {
    pii dst[N];
    bool inq[N];
    vec <Edge> adj[N];
} graph;

void input() {
    cin >> n >> m >> k;
    for(ll i = 0; i < m; ++i) {
        ll u; cin >> u;
        ll v; cin >> v;
        ll w; cin >> w;
        graph.adj[u].pb({v, w, 0});
        graph.adj[v].pb({u, w, 0});
    }
    for(ll i = 1; i <= k; ++i) {
        ll u; cin >> u;
        ll w; cin >> w;
        edge[i] = {u, w};
    }
    sort(edge + 1, edge + k + 1, [](pii x, pii y) {
        return x.yy < y.yy;
    });
    for(ll i = 1; i <= k; ++i) {
        ll u = edge[i].xx;
        ll w = edge[i].yy;
        graph.adj[1].pb({u, w, i});
        graph.adj[u].pb({1, w, i});
    }
}

void dijkstra() {
    fill(graph.dst, graph.dst + N, mp(inf, 0));
    queue <ll> q; q.push(1);
    graph.dst[1].xx = 0;
    graph.dst[1].yy = 0;
    while(!q.empty()) {
        ll u = q.front(); q.pop();
        for(Edge e: graph.adj[u]) {
            ll v = e.v;
            ll w = e.w;
            ll t = e.t;
            if(graph.dst[v] > mp(graph.dst[u].xx + w, max(graph.dst[u].yy, t))) {
                graph.dst[v] = mp(graph.dst[u].xx + w, max(graph.dst[u].yy, t));
                if(!graph.inq[v]) {
                    graph.inq[v] = 1;
                    q.push(v);
                }
            }
        }
        graph.inq[u] = 0;
    }
}

void solve() {
    dijkstra();
    for(ll i = 1; i <= n; ++i) {
        used[graph.dst[i].yy] = 1;
    }
    for(ll i = 1; i <= k; ++i) {
        ans += used[i];
    }
    cout << k - ans << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
