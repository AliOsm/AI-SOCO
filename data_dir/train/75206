#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
using namespace __gnu_pbds;
template<typename key, typename val>
using ordered_tree = 
  tree<key, val, less<key>, rb_tree_tag, tree_order_statistics_node_update>;
typedef long long int64;
typedef complex<double> comp;
const double pi = 3.14159265358979323846;
const int inf = (int)1e+9 + 2;
const int64 inf64 = (int64)1e+18 + 2;
const double dinf = 1e+20;
const int mod = /*1'000'000'007*/998244353;
const int base = 2187;
const double eps = 1e-8;
const int N = 1'000;

int n, m, k;
pair<int, int> a[N], b[N], c[N];

bool ok(int j)
{
  int x = a[0].first + b[j].first;
  int y = a[0].second + b[j].second;
  for (int i = 0; i < n; ++i) {
    c[i].first = x - b[i].first;
    c[i].second = y - b[i].second;
  }
  sort(c, c + n);
  return !memcmp(a, c, sizeof(pair<int, int>) * n);
}

void solve(int test)
{
  cin >> n;
  for (int i = 0; i < n; ++i)
    cin >> a[i].first >> a[i].second;
  for (int i = 0; i < n; ++i)
    cin >> b[i].first >> b[i].second;
  sort(a, a + n);
  for (int i = 0; i < n; ++i) {
    if (ok(i)) {
      cout << a[0].first + b[i].first << ' ';
      cout << a[0].second + b[i].second << '\n';
    }
  }
}

void precalc()
{
}

int main()
{
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  precalc();
  int test = 1;
  //cin >> test;
  //auto start = chrono::high_resolution_clock::now();
  for (int i = 1; i <= test; ++i)
      solve(i);
  //cerr << endl << chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - start).count();
  return 0;
}
