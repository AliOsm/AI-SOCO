#include <bits/stdc++.h>
using namespace std;

#define maxC 26 
#define maxN 100
typedef int T1;//for cost
typedef int T2;//for flow
const int maxn = maxC+maxC*maxN/2+maxN+7;
const T1 INF = 107;
const T2 inf = 107;
const T1 eps = 0;
struct Edge {
    int from, to;
    T2 cap, flow;
    T1 cost;
};
struct MCMF {//0-indexed
    int n, m, s, t;
    vector<Edge> edges;
    vector<int> G[maxn];
    int p[maxn],inq[maxn];
    T1 d[maxn];
    T2 a[maxn];
    void init(int n) {
        this->n = n;
        for(int i = 0; i < n; i++) G[i].clear();
        edges.clear();
    }
    void AddEdge(int from,int to,T2 cap,T1 cost) {

        //cout << from << " " << to << " " << cap << ":" << cost << endl;
        edges.push_back((Edge){from, to, cap, 0, cost});
        edges.push_back((Edge){to, from, 0, 0, -cost});
        m = edges.size();
        G[from].push_back(m-2);
        G[to].push_back(m-1);
    }
    pair<T1,T2> Mincost(int s,int t) {//bellmanFord
        T1 tot_cost = 0;
        T2 tot_flow = 0;
        while(true) {
            for(int i = 0; i < n; i++) d[i] = INF;
            d[s] = 0;
            p[s] = 0;
            a[s] = inf;
            bool up=true;
            while(up) {
                up=false;
                for(int u = 0; u < n; u++) {
                    if(d[u]-INF>=-eps)continue;
                    for(int j:G[u]) {
                        Edge &e=edges[j];
                        if(e.cap > e.flow && d[e.to] > d[u] + e.cost+eps) {
                            d[e.to] = d[u] + e.cost;
                            p[e.to] = j;
                            a[e.to] = min(a[u], e.cap - e.flow);
                            up=true;
                        }
                    }
                }
            }
            if(abs(d[t]-INF)<=eps)break;
            tot_cost += (T1)d[t] * a[t];
            tot_flow += (T2)a[t];
            int u = t;
            while(u != s) {
                edges[p[u]].flow += a[t];
                edges[p[u]^1].flow -= a[t];
                u = edges[p[u]].from;
            }
        }
        return {tot_cost,tot_flow};
    }
    pair<T1,T2> Mincost2(int s,int t) {//SPFA
        T1 tot_cost = 0;
        T2 tot_flow = 0;
        while(true) {
            for(int i = 0; i < n; i++) d[i] = INF;
            memset(inq, 0, sizeof(inq));
            d[s] = 0;
            inq[s] = 1;
            p[s] = 0;
            a[s] = inf;
            queue<int> Q;
            srand(time(NULL));
            Q.push(s);
            while(!Q.empty()) {
                int u = Q.front();
                Q.pop();
                inq[u] = 0;
                for(int i = 0; i < G[u].size(); i++) {
                    Edge& e = edges[G[u][i]];
                    if(e.cap > e.flow && d[e.to] > d[u] + e.cost+eps) {
                        d[e.to] = d[u] + e.cost;
                        p[e.to] = G[u][i];
                        a[e.to] = min(a[u], e.cap - e.flow);
                        if(!inq[e.to]) {
                            Q.push(e.to);
                            inq[e.to] = 1;
                        }
                    }
                }
            }
            if(abs(d[t]-INF)<=eps)break;
            tot_cost += (T1)d[t] * a[t];
            tot_flow += a[t];
            int u = t;
            while(u != s) {
                edges[p[u]].flow += a[t];
                edges[p[u]^1].flow -= a[t];
                u = edges[p[u]].from;
            }
        }

        return {tot_cost,tot_flow};
    }
} mcmf;

int n;
string s;
int b[105];
int cnt[29];

int main(){
    cin>>n;

    cin>>s;
    s= "0"+s;
    for(int i=1 ; i<= n ;i++ )scanf("%d",&b[i]);

    for(int i=1;i<=n;i++) cnt[s[i]-'a'+1]++;

    int src = 0 ;
    int snk = maxC + maxC*n/2 + n + 1 ;
    mcmf.init(snk+1);

    for(int i=1;i<=maxC; i++){
        mcmf.AddEdge(src,i,cnt[i],0);
        for(int j=1;j+j<=n;j++){
            int mm1 = 0 ;
            int mm2 = 0 ;
            if((s[j]-'a'+1) == i ) mm1 = -1;
            if((s[n-j+1]-'a'+1) == i ) mm2 = -1;

            mcmf.AddEdge(i, maxC+ n*(i-1)/2 + j, 1, 0);
            mcmf.AddEdge(maxC+ n*(i-1)/2 + j, maxC + maxC*n/2 + j, 1, b[j] * mm1);
            mcmf.AddEdge(maxC+ n*(i-1)/2 + j, maxC + maxC*n/2 + n -j+1, 1, b[n-j+1] * mm2 );
        }
    }
    for(int i=1;i<=n;i++){
        mcmf.AddEdge(maxC + maxC*n/2 + i,snk,1,0);
    }

    auto ret = mcmf.Mincost2(src,snk) ;

    cout << -ret.first << endl;

    return 0;
}