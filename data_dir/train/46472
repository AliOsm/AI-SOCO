#include<iostream>
#include<algorithm>
#include <cstdlib>

using namespace std;

int n, totalSum, size;
int res[20], a[20];
int mark[20];
int sum;
int n2;

inline bool check()
{
	sum = 0;
	for (int j = 0; j < n; j++)
		sum += res[n2 - n + j];
	if (sum != totalSum)
		return false;

	sum = 0;
	for (int i = 0; i < n2; i += n + 1)
		sum += res[i];
	if (sum != totalSum)
		return false;

	for (int i = 0; i < n2; i++)
	{
		cout << res[i] << " ";
		if (i % n == n - 1)
			cout << endl;
	}
	exit(0);
}

bool backTrack(int x)
{
	if(x == n && res[n - 1] > res[0])
		return false;
	if(x > 0 && x % n == 0)
	{
		sum = 0;
		for (int i = 0; i < n; i++)
			sum += res[x - n + i];
		if (sum != totalSum)
			return false;
	}
	else if(x > n2 - n)
	{
		if(x == n2 - n + 1)
		{
			sum = 0;
			for (int i = n - 1; i < n2 - 1; i += n - 1)
				sum += res[i];
			if (sum != totalSum)
				return false;
		}

		sum = 0;
		for (int i = 0; i < n; i++)
			sum += res[x - n2 + n - 1 + i * n];
		if (sum != totalSum)
			return false;
	}
	if (x == n2)
		return check();
	for (int i = 0; i < size; i++)
		if (mark[i] != 0)
		{
			mark[i]--;
			res[x] = a[i];
			backTrack(x + 1);
			mark[i]++;
		}
}

int main()
{
	ios::sync_with_stdio(false);
	cin >> n;
	n2 = n * n;
	for (int i = 0; i < n * n; i++)
	{
		int x;
		cin >> x;
		totalSum += x;
		bool exist = false;
		for (int j = 0; j < size; j++)
			if (a[j] == x)
			{
				mark[j]++;
				exist = true;
				break;
			}
		if (!exist)
		{
			mark[size] = 1;
			a[size++] = x;
		}
	}
	totalSum /= n;
	cout << totalSum << endl;
	if(n == 1)
		cout << a[0] << endl;
	else
		backTrack(0);
	return 0;
}
