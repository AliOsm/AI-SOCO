
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <cmath>
#include <climits>
#include <limits.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <assert.h>
#include <cstring>
using namespace std;
#define rep(i, n) for (int (i) = 0, j1234 = n; (i) < j1234; (i) ++)
#define rep1(i, n) for (int (i) = 1, j1234 = n; (i) <= j1234; (i) ++)
#define For(i, a, b) for (int (i) = (a), ub1234=b; (i) <= ub1234; (i) ++)
#define db(x) {if(debug){cout << #x << " = " << (x) << endl;}}
#define dba(a, x, y) {if(debug){cout << #a << " :";For(i, (x), (y))cout<<" "<<(a)[(i)];cout<<endl;}}
#define clr(x) memset(x,0,sizeof(x));
#define mp make_pair
#define pb push_back
#define endl '\n'
#define ll long long
#define ld long double
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
const int output_precision = 15;
const ld pi = acos(-1);
const bool debug = true;
// const ll MOD = ;

int N, A[200100], B[200100], ans[200100];
map<int,int> nxt;
int work()
{
  rep1(i,N)
  {
    ans[i+2]=nxt[ans[i]];
  }
  set<int> st;
  st.insert(0);
  rep1(i,N)
  st.insert(ans[i]);
  return st.size() == N+1;
}
int main()
{
  ios_base::sync_with_stdio(0); cout.precision(output_precision); cout << fixed;
  cout.tie(0);
  cin >> N;
  rep1(i,N)
  {
    cin >> A[i] >> B[i];
    nxt[A[i]]=B[i];
  }
  set<int> st;
  rep1(i,N) st.insert(B[i]);
  rep1(i,N)
  {
    if (st.find(A[i]) == st.end())
    {
      ans[1]=A[i];
      ans[2]=nxt[0];
      work();
      rep1(ii,N)
      {
        cout << ans[ii] << (ii==N?'\n':' ');
      }
      return 0;
    }
  }

}
