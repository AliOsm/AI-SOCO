// I can't tell you what it really is,
// I can only tell you what it feels like.
#include "bits/stdc++.h"
using namespace std;

const int N = 5e3 + 2;
short dp[N][N];
int a[N];

signed main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int n, k;
  cin >> n >> k;
  for (int i = 1; i <= n; ++i) {
    cin >> a[i];
  }
  sort(a+1, a+1+n);
  for (int i = 1; i <= n; ++i) {
    // cout << a[i] << " \n"[i==n];
    // if (abs(a[i]-a[i-1]) <= 5) cout << a[i] << ' ' << a[i-1] << '\n';
  }
  dp[1][1] = 1;
  for (int i = 2; i <= n; ++i) {
    int find = i-1;
    while (find > 0 && a[i]-a[find] <= 5)--find;
    for (int K = 1; K <= k; ++K) {
      int cnt = 2;
      for (int j = i; j > 0 && cnt--; --j) {      
        if (abs(a[j]-a[i]) < 6) {
          // if (K == 2)
          dp[K][i] = max((int)dp[K][i],dp[K][j] + j-i);          
           // cout << i << ' ' << K << ' ' << j << '\n';
          dp[K][i] = max((int)dp[K][i], dp[K-1][j-1] + i-j+1);
        }
        else {                
         dp[K][i] = max((int)dp[K][i], dp[K-1][j] + i-j);
         break; 
        }
      }
      int j = find;
      dp[K][i] = max((int)dp[K][i], dp[K-1][j] + i-j);
      dp[K][i] = max(dp[K][i], dp[K][i-1]);
    }
  }
  int ans = 0;
  for (int i = 1; i <= k; ++i)
    for (int j = 1; j <= n; ++j) {
      if (ans < dp[i][j]) ans = dp[i][j];
      // cout << dp[i][j] << " \n"[j==n];
    }
  cout << ans;
  return 0;
}
// 1). Try forming/rearranging the equations if any
// 2). If problem asks to count, try counting in reverse(it can be easier sometimes)