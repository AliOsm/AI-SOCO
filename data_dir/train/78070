#include <bits/stdc++.h>
using namespace std;

const int N = 2222;

int dp[N][N];
char s[N][N];
bool inq[N][N];

template <typename T>
void checkmin(T &a, T b) {
    if (b < a) {
        a = b;
    }
}

int main() {
    vector <int> a(0,1);
    int n, k;
    scanf("%d%d", &n, &k);
    for (int i = 0; i < n; i++) {
        scanf("%s", s[i]);
        for (int j = 0; j < n; j++) {
            dp[i][j] = max(dp[max(i-1, 0)][j], dp[i][max(j - 1,0)]) + (s[i][j] == 'a');
        }
    }
    int mx = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if(i + j + 1 - dp[i][j] <= k) {
                if (i + j + 1 > mx) {
                    mx = i + j + 1 ;
                } 
            }
        }
    }

    vector <pair<int,int> > data;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i + j + 1 - dp[i][j] <= k && i + j + 1 == mx) {
                data.push_back(make_pair(i, j));
            }
        }
    }
    string ret(mx, 'a');
    if (data.size() == 0) {
        ret += s[0][0];
        data.push_back(make_pair(0, 0));
    }
    while (!data.empty()) {
        char mi = (char)127;
        for (auto it : data) {
            int x = it.first;
            int y = it.second;
            if (x + 1 < n) {
                checkmin(mi, s[x + 1][y]);
            }
            if (y + 1 < n) {
                checkmin(mi, s[x][y + 1]);
            }
        }
        if (mi == (char) 127) {
            break;
        }
        ret += mi;
        vector <pair<int,int> > tmp;
        for (auto it : data) {
            int x = it.first;
            int y = it.second;
            if (x + 1 < n && s[x + 1][y] == mi && !inq[x + 1][y]) {
                tmp.push_back(make_pair(x + 1, y));
                inq[x + 1][y] = true;
            }
            if (y + 1 < n && s[x ][y + 1] == mi && !inq[x][y + 1]) {
                tmp.push_back(make_pair(x, y + 1));
                inq[x][y + 1] = true;
            }
        }
        data = tmp;
    }
    cout << ret << endl;
    return 0;
}
