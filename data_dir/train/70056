#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/priority_queue.hpp>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse4")
//#pragma GCC target("avx2")

#define deb(x) cout << #x << " = " << x << "\n"
#define all(x) (x).begin(), (x).end()
#define len(x) (ll) x.size()
#define lsb(x) (x) & -(x)
#define l(x) (x << 1) + 1
#define r(x) (x << 1) + 2

#define xx first
#define yy second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef long double ld;
typedef pair <ll, ll> pii;
typedef pair <ld, ld> pld;
typedef pair <ll, ll> pll;

template <class T1, class T2 = less <T1>> using pb_heap = __gnu_pbds::priority_queue <T1, T2, binary_heap_tag>;
template <class T1, class T2 = null_type, class T3 = less <T1>> using pb_map = tree <T1, T2, T3, rb_tree_tag, tree_order_statistics_node_update>;
template <class T1, class T2 = null_type, class T3 = hash <T1>> using pb_umap = gp_hash_table <T1, T2, T3>;
template <class T1, class T2, class T3 = hash <T1>> using umap = unordered_map <T1, T2, T3>;
template <class T> using uset = unordered_set <T>;
template <class T> using vec = vector <T>;

const ll infll = numeric_limits <ll>::max() >> 1;
const ll inf = numeric_limits <ll>::max() >> 1;
const ll N = 5001;
const ll M = 10002;
ll n, m, x;

ll dp[2][M];

vec <ll> sml;

pii p[N];

void input() {
    cin >> n >> x;
    for(ll i = 1; i <= n; ++i) {
        cin >> p[i].xx;
        cin >> p[i].yy;
        sml.pb(p[i].xx);
        sml.pb(p[i].yy);
    }
    sml.pb(x);
}

void compress() {
    sort(all(sml));
    sml.erase(unique(all(sml)), sml.end());
}

ll ind(ll x) {
    return lb(all(sml), x) - sml.begin();
}

void solve() {
    compress();
    fill(dp[0], dp[0] + M, inf);
    dp[0][ind(x)] = 0;
    m = len(sml);
    for(ll i = 1; i <= n; ++i) {
        ll mnm = inf;
        fill(dp[1], dp[1] + M, inf);
        for(ll j = 0; j < m; ++j) {
            mnm = min(mnm, dp[0][j]);
            dp[1][j] = min(dp[1][j], mnm);
            mnm += sml[j + 1] - sml[j];
        }
        mnm = inf;
        for(ll j = m - 1; j >= 0; --j) {
            mnm = min(mnm, dp[0][j]);
            dp[1][j] = min(dp[1][j], mnm);
            mnm += sml[j] - (j? sml[j - 1]: 0);
        }
        for(ll j = 0; j < m; ++j) {
            ll d = min(abs(sml[j] - p[i].xx), abs(sml[j] - p[i].yy));
            if(sml[j] >= p[i].xx && sml[j] <= p[i].yy) {
                d = 0;
            }
            dp[1][j] += d;
        }
        swap(dp[0], dp[1]);
    }
    ll res = inf;
    for(ll i = 0; i < m; ++i) {
        res = min(res, dp[0][i]);
    }
    cout << res << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    input();
    solve();
}
