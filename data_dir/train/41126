#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair < int, int > PII;
typedef pair < LL, LL > PLL;
typedef pair < LD, LD > PDD;

#define _upgrade ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define all(x) (x).begin(), (x).end()
#define sz(x) (int)(x).size()
template < typename _T > inline void _DBG(const char *s, _T x) { cerr << s << " = " << x << "\n"; }
template < typename _T, typename... args > void _DBG(const char *s, _T x, args... a) { while(*s != ',') cerr << *s++; cerr << " = " << x << ','; _DBG(s + 1, a...); }

#ifdef LOCAL
#define DBG(...) _DBG(#__VA_ARGS__, __VA_ARGS__)
#else
#define DBG(...) (__VA_ARGS__)
#define cerr if(0) cout
#endif

// ********************** CODE ********************** //

const int N = 1e5 + 7;
const LL INF = 1e18 + 7;

string p = "What are you doing at the end of the world? Are you busy? Will you save us?";
string s1 = "What are you doing while sending ";
string s2 = "? Are you busy? Will you send ";
string s3 = "?";

LL dl[N];

char solve(int n, LL k)
{
    if(k > dl[n]) return '.';
    if(n == 0)
    {
        return p[k - 1];
    }
    if(k <= sz(s1)) return s1[k - 1];
    k -= sz(s1);
    if(k == 1) return '"';
    k--;
    if(k <= dl[n - 1]) return solve(n - 1, k);
    k -= dl[n - 1];
    if(k == 1) return '"';
    k--;
    if(k <= sz(s2)) return s2[k - 1];
    k -= sz(s2);
    if(k == 1) return '"';
    k--;
    if(k <= dl[n - 1]) return solve(n - 1, k);
    k -= dl[n - 1];
    if(k == 1) return '"';
    k--;
    assert(k <= sz(s3));
    return s3[k - 1];
}

int main()
{
    _upgrade
    int q; cin >> q;
    dl[0] = sz(p);
    for(int i = 1; i <= 1e5; i++)
    {
        dl[i] = min(LL(2 * (dl[i - 1] + 2) + sz(s1) + sz(s2) + sz(s3)), INF);
    }
    while(q--)
    {
        int n; LL k;
        cin >> n >> k;
        cout << solve(n, k);
    }
	return 0;
}
