/******************************************
,--,     ,--,  .--.--.     ,----..   
 |'. \   / .`| /  /    '.  /   /   \  
 ; \ `\ /' / ;|  :  /`. / |   :     : 
 `. \  /  / .';  |  |--`  .   |  ;. / 
  \  \/  / ./ |  :  ;_    .   ; /--`  
   \  \.'  /   \  \    `. ;   | ;     
    \  ;  ;     `----.   \|   : |     
   / \  \  \    __ \  \  |.   | '___  
  ;  /\  \  \  /  /`--'  /'   ; : .'| 
./__;  \  ;  \'--'.     / '   | '/  : 
|   : / \  \  ; `--'---'  |   :    /  
;   |/   \  ' |            \   \ .'   
`---'     `--`              `---`     
   
 ******************************************/
#pragma GCC optimize("Ofast")
#pragma GCC optimize ("unroll-loops")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")


#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cctype>
#include <cassert>
#include <climits>

#include <iostream>
#include <algorithm>
#include <utility>
#include <memory>
#include <numeric>
#include <set>
#include <string>
#include <stack>
#include <vector>
#include <map>
#include <queue>

#include <limits>
#include <bitset>
#include <deque>
#include <list>
#include <new>
#include <iterator>

#if __cpluplus >= 201103L
#include <functional>
#include <cinttypes>
#include <cstdint>
#include <array>
#include <tuple>
#include <unordered_map>
#include <unordered_set>

#include <initializer_list>
#include <complex>
#endif 

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

typedef std::pair < int, int > pii ;
typedef std::vector< int > vi ;
typedef std::vector< pii > vii ;
typedef std::vector< ll > vll;


template< typename T > T gcd(T a, T b){ T m; while(b != T(0) ){ m = a % b; a = b; b= m; } return a; } 
template< typename T > T lcm(T a, T b){ return a == 0 && b == 0 ? 0 : ( a / gcd(a,b) )  * b ;}
 
#define PI   3.1415926535897932384626433832795
#define all(x)    (x).begin(), (x).end() 
#define fi   first
#define se   second
#define pb   push_back
#define DO_UNIQUE(c)   (c).erase( std::unique( all( c ) ), (c).end() ) 
#define fori(n)   for(int i= 0 ; i < (n); ++i)
#define forj(n)   for(int j =0; j < (n); ++j)
/***********************************************************************************************/


int const MAXN  = 1 << 18 ;


int n, m;
int a[ 5005 ] ;
int dp[5005][5005];
int maxmod[ 12 ], maxnum[ 1 << 17 ], code[1<<17];

int solve()
{
    scanf("%d", &n);
    for(int i = 1;i <= n; ++i)scanf("%d", a + i ) ;
     
    memset( maxmod, 0, sizeof(maxmod ) ) ;
    memset( maxnum, 0, sizeof(maxnum ) ) ;
    memset( code  , 0x33, sizeof(code) ) ;
    
    dp[0][0] = 0;
    for(int y = 0; y <= n; ++y){
        
        for(int x = 0; x <= y; ++x){
            dp[y][x] = dp[x][y];
            
            //printf("\tdp[%d][%d] : %d ", y, x, dp[y][x]);
        }
        
        memset(maxmod, 0, sizeof(maxmod)) ;
        
        
        for(int x = 1; x <=  y; ++x){
            int x7 = a[x]  % 7 ;
            
            if ( maxmod[ x7 ] == 0 || dp[ y ][ maxmod[ x7 ] ] < dp[y][x] ){
                maxmod[x7] = x;
            }
            
            int ax = a[x];
            
            if (code[ax] != y || dp[y][maxnum[ax]] < dp[y][x] ) {
                maxnum[ a[ x ] ] = x;
                code[ a[ x ] ] = y;
            }
        }
        
        for(int x = y + 1; x <= n; ++x)
        {
            dp[y][x] = 1 + dp[0][y];// x - in 1-sequence,  1..y - 2-sequences.
              
            if ( int mx = maxmod[   a[x] % 7  ] ) {
                dp[y][x] = max(dp[y][x], dp[y][mx] + 1 ) ;
            }
            
            
            if ( int mx = maxnum[a[x]-1] ) {
                if (code[a[x] - 1]  == y ) {
                    dp[y][x] = max(dp[y][x],  dp[y][ mx ] + 1 ) ;
                }
            }
            
            if ( int mx = maxnum[a[x] + 1] ) {
                if (code[a[x] + 1] == y ) {
                    dp[y][x] = max(dp[y][x],  dp[y][mx] + 1 ) ;
                }
            }
            
          //  printf("\tdp[%d][%d] : %d ", y, x, dp[y][x]);
            //update maxmod and maxnum 
            int x7 = a[x]  % 7 ;
            
            if ( maxmod[ x7 ] == 0 || dp[ y ][ maxmod[ x7 ] ] < dp[y][x] ){
                maxmod[x7] = x;
            }
            
            int ax = a[x];
            
            if (code[ax] != y || dp[y][maxnum[ax]] < dp[y][x] ) {
                maxnum[ a[ x ] ] = x;
                code[ a[ x ] ] = y;
            }
            
        }
        
        //printf("\n");
    }
    
    int ans = 0;
    for(int y = 1; y <= n; ++y){
        for(int x =   1; x <= n; ++x)
            ans = max(ans, dp[y][x]);
    }
    
    printf("%d\n", ans);
    return 0 ;
}

int main(int argc, char* argv[] ) 
{
    
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt" , "w", stdout);
#endif 
    ::std::ios::sync_with_stdio(false);
    ::std::cin.tie(0);
    ::std::cout.tie(0);
    
    solve();
    
    return 0;
}