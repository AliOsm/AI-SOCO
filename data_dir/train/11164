#include <bits/stdc++.h>

using namespace std;

template<class T1, class T2>
istream & operator>> (istream& is, pair<T1,T2> &p){
    return is >> p.first >> p.second;
}
template<class T1, class T2>
ostream & operator<< (ostream &os, pair<T1,T2> &p){
    return os << p.first << " " << p.second;
}


signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
	long long n,m,p;
	cin >> n >> m >> p;
	vector<long long> v(n);
	vector<long long> all;
	for(long long i=0; i<n; i++){
        cin >> v[i];
        all.push_back(v[i]);
	}
	vector<long long> b(m);
	for(long long i=0; i<m; i++){
        cin >> b[i];
        all.push_back(b[i]);
	}
	sort(all.begin(),all.end());
	all.resize(unique(all.begin(),all.end())-all.begin());
	for(long long i=0; i<n; i++){
        v[i]=lower_bound(all.begin(),all.end(),v[i])-all.begin();
	}
	vector<long long> cnt(all.size());
	for(long long i=0; i<m; i++){
        cnt[lower_bound(all.begin(),all.end(),b[i])-all.begin()]++;
	}
    vector<long long> tcnt=cnt;
    vector<long long> ans;
	for(long long q=0; q<p && q+(m-1)*p<n; q++){
        cnt=tcnt;
        long long n_zeros=0;
        for(long long i=0; i<cnt.size(); i++){
            if(!cnt[i])n_zeros++;
        }
        for(long long i=0; i<m; i++){
            cnt[v[q+i*p]]--;
            if(cnt[v[q+i*p]]==0)n_zeros++;
            else if(cnt[v[q+i*p]]==-1)n_zeros--;
        }
        if(n_zeros==cnt.size())ans.push_back(q+1);
        for(long long i=1; q+(i+m-1)*p<n; i++){
            cnt[v[q+(i-1)*p]]++;
            if(cnt[v[q+(i-1)*p]]==0)n_zeros++;
            else if(cnt[v[q+(i-1)*p]]==1)n_zeros--;
            cnt[v[q+(i+m-1)*p]]--;
            if(cnt[v[q+(i+m-1)*p]]==0)n_zeros++;
            else if(cnt[v[q+(i+m-1)*p]]==-1)n_zeros--;
            if(n_zeros==cnt.size())ans.push_back(q+i*p+1);
        }
	}
	cout << ans.size() << "\n";
	sort(ans.begin(),ans.end());
	for(long long x:ans)cout << x << " ";
}
