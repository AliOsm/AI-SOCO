#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define ll long long121
#define F first
#define S second
#define eps 1e-6
#define mp make_pair
const long long INF=1e18;
const int MX=200005;
int N, M, k;
int arr[MX];
vector<pair<int, int> > G[MX];
vector<int> road[MX];
deque<int> dq;
int dist[MX];
vector<string> v;
string cur;
void go(int x)
{
    if(v.size() == k) return;
    if(x == N+1) {
        v.pb(cur);
        return;
    }

    for(int i=0;i<road[x].size();i++)
    {
        cur[road[x][i]-1]='1';
        go(x+1);
        cur[road[x][i]-1]='0';
    }
}
int main()
{
    scanf("%d%d%d", &N, &M, &k);
    for(int i=1;i<=M;i++) {
        int u, v;
        scanf("%d%d" ,&u, &v);
        G[u].push_back(make_pair(v, i));
        G[v].push_back(make_pair(u, i));
    }
    dq.push_back(1);
    for(int i=1;i<=N;i++) {
        dist[i]=1e9;
    }
    dist[1]=0;
    while(dq.size())
    {
        int u=dq.front();
        dq.pop_front();
        for(int i=0;i<G[u].size();i++)
        {
            int v=G[u][i].first;
            int ID=G[u][i].second;
            if(dist[v] == dist[u]+1) {
                road[v].pb(ID);
            }
            else if(dist[v] > dist[u]+1) {
                dist[v]=dist[u]+1;
                dq.push_back(v);
                road[v].push_back(ID);
            }
        }
    }
    cur.resize(M);
    for(int i=0;i<M;i++) cur[i]='0';
    go(2);
    cout<<v.size()<<"\n";
    for(int i=0;i<v.size();i++) cout<<v[i]<<"\n";
    return 0;
}

