#include<bits/stdc++.h>
typedef long long ll;
using namespace std;
const int N = 5100;
int n , sz[N]; bool vis[N];
vector<int> a[N] , vec;
int root = -1;

void dfs(int v , int p = -1){
    sz[v] = 1;
    for(auto u:a[v]){
        if(u == p)continue;
        dfs(u , v);
        sz[v]+=sz[u];
    }
    if(v!=root)return;
    for(auto u:a[v]){
        if(u == p)continue;
        vec.push_back(sz[u]);
    }
}

void knapsack(vector<int> &vec){
    int sz = vec.size(); bitset<5100> knap;
    for(int i=0;i<n;i++)knap[i] = 0;
    knap[0] = 1; //cout<<knap[0]<<endl;
    for(int i=0;i<sz;i++){
        int val = vec[i];
        knap=knap | (knap << val);
    }
    for(int i=0;i<n;i++){
        if(knap[i] == 1)vis[i] = true;
    }
}

int main(){
    cin>>n;
    for(int i=0;i<n-1;i++){
        int u,v; cin>>u>>v;
        a[v].push_back(u);
        a[u].push_back(v);
    }
    for(int i=1;i<=n;i++){
        vec.clear();
        root = i;
        dfs(i , -1);
        knapsack(vec);
    }
    int num = 0;
    for(int i=1;i<n-1;i++){
        if(vis[i])num++;
    }
    cout<< num <<'\n';
    for(int i=1;i<n-1;i++){
        if(vis[i])cout<<i<<" "<<n-1-i<<'\n';
    }
}
