#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <random>
#include <chrono>

using namespace std;
using namespace __gnu_pbds;

#define endl '\n'

typedef long long ll;
typedef pair<ll, ll> pii;
//typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

const int maxn = 1e5 + 1;
const int maxm = 11;

const ll b1 = 1000003;//, b2 = 1000033;
const ll mod1 = 1e9 + 7;//, mod2 = 1e9 + 9;

ll a[maxm][maxn], h1[maxm][maxn], p1[maxn], p2[maxn];//, h2[maxm][maxn], ;
int starts[maxn][maxm];

ll get_hash(int k, int lo, int hi){
	ll s1 = (h1[k][hi] + mod1 - (h1[k][lo - 1] * p1[hi - lo + 1]) % mod1 ) % mod1;
	//ll s2 = (h2[k][hi] + mod2 - (h2[k][lo - 1] * p2[hi - lo + 1]) % mod2 ) % mod2;
	return s1;
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	p1[0] = 1;//p2[0] = 1;
	for(int i = 1; i < maxn; i++){
		p1[i] = (p1[i - 1] * b1) % mod1;
		//p2[i] = (p2[i - 1] * b2) % mod2;
	}
	
	int n, m;
	cin >> n >> m;
	
	for(int i = 1; i <= m; i++)
		for(int j = 1; j <= n; j++)
			cin >> a[i][j], starts[a[i][j]][i] = j;

	for(int i = 1; i <= m; i++){
		for(int j = 1; j <= n; j++){
			h1[i][j] = (h1[i][j - 1] * b1 + a[i][j]) % mod1;
			//h2[i][j] = (h2[i][j - 1] * b2 + a[i][j]) % mod2;
		}
	}
	
	ll ans = 0;
	
	for(int i = 1; i <= n; i++){
		int lo = 2, hi = n, pos = 1;
		
		for(int j = 1; j <= m; j++)
			hi = min(hi, n - starts[i][j] + 1);
		
		while(lo <= hi){
			int mid = (lo + hi) >> 1;
			
			ll x1 = -1;
			bool ok = true;
			
			for(int j = 1; j <= m; j++){
				ll cur = get_hash(j, starts[i][j], starts[i][j] + mid - 1);
				if(x1 == -1)
					x1 = cur;
				else if(x1 != cur){
					ok = false;
				}
			}
			
			if(ok){
				pos = mid;
				lo = mid + 1;
			}
			else hi = mid - 1;
		}
	
		ans += 1ll * pos;
	}
	
	cout << ans << endl;
	
	return 0;
}
