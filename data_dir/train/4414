#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <queue>
#include <iomanip>
#include <bitset>
#include <unordered_map>
#include <stack>
#include <memory.h>
#include <list>
#include <random>
#include <unordered_set>
#include <complex>
#include <assert.h>

#define ll long long
#define ld long double
#define ull unsigned ll
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define pii pair<int,int> 
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vector<int>>
//#define endl '\n'
#define forn(it,from,to) for(int (it)=from; (it)<to; (it)++)
const ll  Inf = 1e18;
ll LINF = (ll)2e18;
using namespace std;
ll mod = 1e9 + 7;
ll mod3 = 998244353;
ll mod4 = 1000003;
ll mod2 = 1e9 + 123;
#define M_PI       3.14159265358979323846   // pi

int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	//freopen("javacert.in", "r", stdin);
	//freopen("javacert.out", "w", stdout);
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0); cout.setf(ios::fixed); cout.precision(20);
	int n, m;
	cin >> n >> m;
	vector<set<int>> gr(n), pl(m);
	forn(i, 0, m) {
		int cnt;
		cin >> cnt;
		forn(j, 0, cnt) {
			int x;
			cin >> x;
			x--;
			gr[x].insert(i);
			pl[i].insert(x);
		}
	}
	vi used(n, 0);
	vi ans(n);
	vi kek(6e5);
	int cur = -1;
	forn(i, 0, n) {
		if (!used[i]) {
			cur++;
			queue<int> q;
			q.push(i);
			used[i] = 1;
			ans[i] = cur;
			int cnt = 1;
			while (!q.empty()) {
				int v = q.front();
				q.pop();
				for (auto g : gr[v]) {
					for (auto p : pl[g]) {
						if (!used[p]) {
							ans[p] = cur;
							used[p] = 1;
							q.push(p);
							cnt++;
						}
					}
					pl[g].clear();
				}
				gr[v].clear();
			}
			kek[cur] = cnt;
		}
	}
	forn(i, 0, n) {
		cout << kek[ans[i]] << " ";
	}
	return 0;
}