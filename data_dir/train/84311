#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <bitset>
#include <functional>
#include <vector>
#include <numeric>      // std::accumulate

#define ll long long
using namespace std;

vector<pair<int,int>> edges[555555];

ll dp[555555][2];

ll Solve(int par, int u, int k, bool is_sat) {
    vector<ll> diffs;
    ll base_sum = 0;
    
    if (dp[u][is_sat]!=-1)
        return dp[u][is_sat];
    
    for(pair<int,int> vw : edges[u]) {
        int v=vw.first;
        int w=vw.second;
        if (v == par)
            continue;
        
        
        
        ll v0 = Solve(u,v,k,false);
        ll v1 = w+Solve(u,v,k,true);
        
        base_sum += v0;
        
        if (v1 > v0) {
            diffs.push_back(v1-v0);
        }
    }
    sort(diffs.begin(),diffs.end(),greater<ll>());
    int max_sz = (is_sat ? k-1 : k);
    if (diffs.size() > max_sz)
        diffs.resize(max_sz);
    
    return dp[u][is_sat]=base_sum + std::accumulate(diffs.begin(),diffs.end(),0ll);
    
    
    
    
}

char buf[58000000];


int readint() {
    int m;
    static char *bp=buf;
    if(*bp<'0' || *bp>'9')
        *bp++;
    
    for(m=*bp++-48; *bp>=48; bp++) m = m*10+*bp-48;
    bp++;
    return m;
}



int main() {
    fread(buf, 1, 51000100, stdin);
    int Q=readint();
    for(int q=1;q<=Q;q++) {
        int n,k;
        n=readint();
        k=readint();
        for(int i=1;i<=n;i++) {
            edges[i].clear();
            dp[i][0]=dp[i][1]=-1;
        }
        
        for(int i=1;i<=n-1;i++) {
            int u,v,w;
            u=readint();
            v=readint();
            w=readint();
            edges[u].push_back({v,w});
            edges[v].push_back({u,w});
        }
        
        cout << Solve(-1, 1, k, false) << endl;
        
    }
}
