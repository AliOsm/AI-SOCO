#include <iostream>
#include <vector>

using namespace std;

typedef long long int ll;

const ll modulo=1e9+7;

void add(ll &a,ll b)
{
  a=(a+b)%modulo;
}

ll expo(ll b,ll e)
{
  if (e==0) return 1;
  if (e%2==0) return expo(b*b%modulo,e/2);
  return b*expo(b*b%modulo,e/2)%modulo;
}

ll inverse(ll x)
{
  return expo(x,modulo-2);
}

void compute(int ifac,int taken,int prod,vector<int> &fac,int tope,int &cases)
{
  if (ifac==int(fac.size())) {
    if (taken==0) return;
    int sign=1;
    if (taken%2==0) sign=-1;
    cases+=sign*(tope/prod);
    return;
  }
  compute(ifac+1,taken,prod,fac,tope,cases);
  compute(ifac+1,taken+1,prod*fac[ifac],fac,tope,cases);
}


const int limit=100005;

int isprime[limit];
vector<int> factors[limit];
vector<int> divisors[limit];

int m;

ll sol[limit];
ll D;
ll so;

int main()
{
  for (int i=2;i<limit;i++)
    isprime[i]=1;
  for (int i=2;i<limit;i++) {
    if (isprime[i]) {
      factors[i].push_back(i);
      for (int j=i+i;j<limit;j+=i) {
	isprime[j]=0;
	factors[j].push_back(i);
      }
    }
  }
  for (int i=1;i<limit;i++)
    for (int j=i+i;j<limit;j+=i)
      divisors[j].push_back(i);
  cin>>m;
  D=inverse(m);
  for (int cur=2;cur<=m;cur++) {
    //cout<<"cur "<<cur<<endl;
    vector<int> &divi=divisors[cur];
    int acum=0;
    for (int j=0;j<int(divi.size());j++) {
      int d=divi[j];
      //if (d==cur) continue;
      int x=cur/d;
      int cases=0;
      /*
      cout<<"factors: ";
      for (int i=0;i<int(factors[x].size());i++)
	cout<<factors[x][i]<<",";
      cout<<endl;
      */
      compute(0,0,1,factors[x],m/d,cases);
      //cout<<"casesfromcompute "<<cases<<endl;
      cases=m/d-cases;
      acum+=cases;
      add(sol[cur],cases*D%modulo*sol[d]);
      //cout<<"d "<<d<<" x "<<x<<" cases "<<cases<<" sol[cur] "<<sol[cur]<<endl;
    }
    sol[cur]=(1+sol[cur])*m%modulo*inverse(acum)%modulo;
    //cout<<"sol[cur] "<<sol[cur]<<endl;
  }
  for (int i=1;i<=m;i++)
    add(so,D*sol[i]);
  so++;
  so=(so%modulo+modulo)%modulo;
  cout<<so<<endl;
}
