# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

# include <stdio.h>
# include <bits/stdc++.h>


#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

using namespace __gnu_pbds;
using namespace std;
 
typedef
tree<pair<int,int>,null_type,less<pair<int,int>>,rb_tree_tag, tree_order_statistics_node_update> ordered_set;

inline bool isvowel (char c) {
	c = tolower(c);
    if (c == 'a' || c == 'e' || c == 'i' || c == 'y' || c == 'o' || c == 'u') return 1;
    return 0;
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 4e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m;
int a[N];
vector < int > g[N];
int b[N];
int mx[N];
int x[N], y[N];

inline int rd(){
    int x=0,fl=1;char ch=getchar();
    for (;ch<48||ch>57;ch=getchar())if(ch=='-')fl=-1;
    for (;48<=ch&&ch<=57;ch=getchar())x=(x<<3)+(x<<1)+(ch^48);
    return x*fl;
}

bool check (int d) {
	for (int i = 1; i <= n; i ++) {
   	mx[i] = -1;
     	b[i] = a[i];
  	}
   for (int i = 0; i <= d; i ++) g[i].clear();
   for (int i = 1; i <= m; i ++) if (x[i] <= d) {
   	mx[y[i]] = max(mx[y[i]], x[i]);
   }

   for (int i = 1; i <= n; i ++) if(mx[i] != -1) {
   	g[mx[i]].push_back(i);
   }
   int cur = 0;
   for(int i = 1; i <= d; i ++) {
        cur ++;
        for(auto it : g[i]) {
            if(cur >= b[it]) {
                cur -= b[it];
                b[it] = 0;
            } else {
                b[it] -= cur;
                cur = 0;
                break;
            }
        }
    }
    
    return 2 * accumulate(b + 1, b + n + 1, 0) <= cur;
}

int main () {
	n = rd();
	m = rd();

	for (int i = 1; i <= n; ++ i) a[i] = rd();
	for (int i = 1; i <= m; ++ i) {
		x[i] = rd(), y[i] = rd();

	} 
	int l = -1, r = 4e5;
	while (r - l > 1) {
		int md = (l + r) >> 1;
		if (check(md)) r = md;
		else l = md;
	}
	printf("%d", r);

	return Accepted;
}

// B...a