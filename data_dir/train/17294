#include <bits/stdc++.h>

using namespace std;
using namespace placeholders;

template <class T> void mini(T &l, T r) {l = min(l, r);}
template <class T> void maxi(T &l, T r) {l = max(l, r);}

template <class TH> void _dbg(const char *sdbg, TH h) {
  cerr << sdbg << "=" << h << "\n";
}
template <class TH, class ...TA> void _dbg(const char *sdbg, TH h, TA ...a) {
  while (*sdbg != ',') cerr << *sdbg++; cerr << "=" << h << ","; _dbg(sdbg + 1, a...);
}
template <class T> ostream &operator<<(ostream &os, vector <T> v) {
  os << "[";
  for (auto vv : v) os << vv << ",";
  return os << "]";
}
template <class L, class R> ostream &operator<<(ostream &os, pair <L, R> p) {
  return os << "(" << p.first << "," << p.second << ")";
}

#define eput(...) _dbg(#__VA_ARGS__, __VA_ARGS__)

const int N = 1010;

int n;
int a[N];
int ans[2] = {-1, -1};

void set_a(int l, int r, int x) {
  for (int i = l; i <= r; ++i) a[i] = x;
}

int query() {
  printf("? ");
  for (int i = 1; i <= n; ++i) printf("%d", a[i]);
  printf("\n");
  fflush(stdout);
  int ret = 0;
  scanf("%d", &ret);
  return ret;
}

void go(int l, int r, int old) {
  if (l > r) return;
  if (l == r) {
    set_a(l, r, 1);
    int nw = query();
    if (nw - old == r - l + 1) {
      ans[0] = r;
    }
    //all 1
    //nw - old = -(r - m)
    else if (nw - old == -(r - l + 1)) {
      ans[1] = r;
    }
    return;
  }
  int m = (l + r) / 2;
  set_a(m + 1, r, 1);
  int nw = query();
  //all 0
  //nw - old = r - m
  if (nw - old == r - m) {
    ans[0] = r;
    go(l, m, nw);
  }
  //all 1
  //nw - old = -(r - m)
  else if (nw - old == -(r - m)) {
    ans[1] = r;
    go(l, m, nw);
  } else {
    set_a(m + 1, r, 0);
    go(m + 1, r, old);
  }
}

void run() {
  scanf("%d", &n);
  for (int i = 1; i <= n; ++i) a[i] = 0;
  int c1 = query();
  go(1, n, c1);
  printf("! %d %d\n", ans[0], ans[1]);
}

int main() {
  run();
  return 0;
}
