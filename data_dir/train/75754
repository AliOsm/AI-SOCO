#pragma GCC target("avx2")
#pragma GCC optimize("O3")

# include <x86intrin.h>
# include <bits/stdc++.h>

# include <ext/pb_ds/assoc_container.hpp>
# include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
 
template<typename T> using ordered_set = tree <T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define _USE_MATH_DEFINES_
#define ll long long
#define ld long double
#define Accepted 0
#define pb push_back
#define mp make_pair
#define sz(x) (int)(x.size())
#define every(x) x.begin(),x.end()
#define F first
#define S second
#define lb lower_bound
#define ub upper_bound
#define For(i,x,y)  for (ll i = x; i <= y; i ++) 
#define FOr(i,x,y)  for (ll i = x; i >= y; i --)
#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
// ROAD to...                                                                                                                                                                                                                Red

inline void Input_Output () {
	//freopen(".in", "r", stdin);
   //freopen(".out", "w", stdout);
}

const double eps = 0.000001;
const ld pi = acos(-1);
const int maxn = 1e7 + 9;
const int mod = 1e9 + 7;
const ll MOD = 1e18 + 9;
const ll INF = 1e18 + 123;
const int inf = 2e9 + 11;
const int mxn = 1e6 + 9;
const int N = 6e5 + 123;                                          
const int M = 22;
const int pri = 997;
const int Magic = 2101;

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
 
int n, m, k;
int a[N];
int pf[N];
int sf[N];
int pref[N];
int suff[N];
vector < int > w;

void solve () {
	cin >> n;
	w.clear();
	for (int i = 1; i <= n; i ++) {
		pref[i] = -inf;
		suff[i] = inf;
		cin >> a[i];
		sf[i] = 0;

		w.pb(a[i]);
	}

	sort(every(w));
	w.resize(unique(every(w)) - w.begin());

	for (int i = 1; i <= n; i ++) {
		a[i] = upper_bound(every(w), a[i]) - w.begin();
		if (!sf[a[i]]) {
			pf[a[i]] = i;
		}
		sf[a[i]] = i;
	}

	int cur = inf;
	int m = sz(w);
	int ans = m - 1;
	int r = m;
	int L = inf;
	/*while (r > 0) {
		if (L < sf[r]) {
			break;
		}
		L = pf[r];
		r--;
	}
	ans = min(ans, r);
	r = 1;
	L= 0 ;
	while (r <= m) {
		if (L > pf[r]) {
			break;
		}
		L = sf[r];
		r++;
	}
	ans = min(ans, m - r + 1);   */

	int l = 1;
	set < int > pos;
	pos.insert(sf[l]);
	for (int r = 2; r <= m; r ++) {
		while (l < r && *pos.rbegin() > pf[r]) {
			pos.erase(sf[l++]);
		}
		pos.insert(sf[r]);
		ans = min(ans, (l - 1) + (m - r));
	}
	
	
	cout << ans << '\n';
}

int main () {
   SpeedForce;
	int q;
	cin >> q;
	while (q--) solve();
   return Accepted;
}

// B...a